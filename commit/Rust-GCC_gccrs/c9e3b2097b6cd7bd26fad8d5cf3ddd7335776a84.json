{"sha": "c9e3b2097b6cd7bd26fad8d5cf3ddd7335776a84", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzllM2IyMDk3YjZjZDdiZDI2ZmFkOGQ1Y2YzZGRkNzMzNTc3NmE4NA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2012-10-15T19:13:41Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-10-15T19:13:41Z"}, "message": "PR c++/50080 (again)\n\n/cp\n2012-10-15  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/50080 (again)\n\t* parser.c (cp_parser_optional_template_keyword): When -pedantic\n\tand C++98 mode restore pre-Core/468 behavior.\n\n/testsuite\n2012-10-15  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/50080 (again)\n\t* g++.dg/parse/tmpl-outside2.C: Tweak, error in C++98.\n\t* g++.dg/parse/tmpl-outside1.C: Likewise.\n\t* g++.dg/template/qualttp18.C: Likewise.\n\t* g++.old-deja/g++.pt/memtemp87.C: Likewise.\n\t* g++.old-deja/g++.pt/overload13.C: Likewise.\n\nFrom-SVN: r192470", "tree": {"sha": "2554b65829608295857311aa6a0f6c9aa8133161", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2554b65829608295857311aa6a0f6c9aa8133161"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9e3b2097b6cd7bd26fad8d5cf3ddd7335776a84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9e3b2097b6cd7bd26fad8d5cf3ddd7335776a84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9e3b2097b6cd7bd26fad8d5cf3ddd7335776a84", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9e3b2097b6cd7bd26fad8d5cf3ddd7335776a84/comments", "author": null, "committer": null, "parents": [{"sha": "e30440106a536e3d9bf5a1366538d40c7c9fb581", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e30440106a536e3d9bf5a1366538d40c7c9fb581", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e30440106a536e3d9bf5a1366538d40c7c9fb581"}], "stats": {"total": 51, "additions": 43, "deletions": 8}, "files": [{"sha": "555345f58a800a24546bdf87271767b4eb0ff459", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9e3b2097b6cd7bd26fad8d5cf3ddd7335776a84/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9e3b2097b6cd7bd26fad8d5cf3ddd7335776a84/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c9e3b2097b6cd7bd26fad8d5cf3ddd7335776a84", "patch": "@@ -1,3 +1,9 @@\n+2012-10-15  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/50080 (again)\n+\t* parser.c (cp_parser_optional_template_keyword): When -pedantic\n+\tand C++98 mode restore pre-Core/468 behavior.\n+\n 2012-10-15  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/50080"}, {"sha": "853d789f987f412331fd4736e9386bc64b229cb9", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9e3b2097b6cd7bd26fad8d5cf3ddd7335776a84/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9e3b2097b6cd7bd26fad8d5cf3ddd7335776a84/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=c9e3b2097b6cd7bd26fad8d5cf3ddd7335776a84", "patch": "@@ -23252,9 +23252,29 @@ cp_parser_optional_template_keyword (cp_parser *parser)\n {\n   if (cp_lexer_next_token_is_keyword (parser->lexer, RID_TEMPLATE))\n     {\n-      /* Consume the `template' keyword.  */\n-      cp_lexer_consume_token (parser->lexer);\n-      return true;\n+      /* In C++98 the `template' keyword can only be used within templates;\n+\t outside templates the parser can always figure out what is a\n+\t template and what is not.  In C++11,  per the resolution of DR 468,\n+\t `template' is allowed in cases where it is not strictly necessary.  */\n+      if (!processing_template_decl\n+\t  && pedantic && cxx_dialect == cxx98)\n+\t{\n+\t  cp_token *token = cp_lexer_peek_token (parser->lexer);\n+\t  pedwarn (token->location, OPT_Wpedantic,\n+\t\t   \"in C++98 %<template%> (as a disambiguator) is only \"\n+\t\t   \"allowed within templates\");\n+\t  /* If this part of the token stream is rescanned, the same\n+\t     error message would be generated.  So, we purge the token\n+\t     from the stream.  */\n+\t  cp_lexer_purge_token (parser->lexer);\n+\t  return false;\n+\t}\n+      else\n+\t{\n+\t  /* Consume the `template' keyword.  */\n+\t  cp_lexer_consume_token (parser->lexer);\n+\t  return true;\n+\t}\n     }\n   return false;\n }"}, {"sha": "99c7a70676a382f57a38a41f1d76131d468d528e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9e3b2097b6cd7bd26fad8d5cf3ddd7335776a84/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9e3b2097b6cd7bd26fad8d5cf3ddd7335776a84/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c9e3b2097b6cd7bd26fad8d5cf3ddd7335776a84", "patch": "@@ -1,3 +1,12 @@\n+2012-10-15  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/50080 (again)\n+\t* g++.dg/parse/tmpl-outside2.C: Tweak, error in C++98.\n+\t* g++.dg/parse/tmpl-outside1.C: Likewise.\n+\t* g++.dg/template/qualttp18.C: Likewise.\n+\t* g++.old-deja/g++.pt/memtemp87.C: Likewise.\n+\t* g++.old-deja/g++.pt/overload13.C: Likewise.\n+\n 2012-10-15  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.target/i386/avx256-unaligned-load-1.c: Update asm scan patterns."}, {"sha": "7d969e46858d7ba5e5f96ad1ec7d231183e8edeb", "filename": "gcc/testsuite/g++.dg/parse/tmpl-outside1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9e3b2097b6cd7bd26fad8d5cf3ddd7335776a84/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftmpl-outside1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9e3b2097b6cd7bd26fad8d5cf3ddd7335776a84/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftmpl-outside1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftmpl-outside1.C?ref=c9e3b2097b6cd7bd26fad8d5cf3ddd7335776a84", "patch": "@@ -7,4 +7,4 @@ struct X\n    template <int i> struct Y {};\n };\n \n-typedef X::template Y<0> y;\n+typedef X::template Y<0> y; // { dg-error \"template|invalid\" \"\" { target c++98 } }"}, {"sha": "54d39fa88dba944a3e9d4455e1335042188acfaf", "filename": "gcc/testsuite/g++.dg/parse/tmpl-outside2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9e3b2097b6cd7bd26fad8d5cf3ddd7335776a84/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftmpl-outside2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9e3b2097b6cd7bd26fad8d5cf3ddd7335776a84/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftmpl-outside2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftmpl-outside2.C?ref=c9e3b2097b6cd7bd26fad8d5cf3ddd7335776a84", "patch": "@@ -15,5 +15,5 @@ void test()\n \n int main()\n {\n-  typename A<double>::template B<int> b;\n+  typename A<double>::template B<int> b; // { dg-error \"template|expected\" \"\" { target c++98 } }\n }"}, {"sha": "691517fd3723135230c102173dae36472502b24e", "filename": "gcc/testsuite/g++.dg/template/qualttp18.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9e3b2097b6cd7bd26fad8d5cf3ddd7335776a84/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9e3b2097b6cd7bd26fad8d5cf3ddd7335776a84/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp18.C?ref=c9e3b2097b6cd7bd26fad8d5cf3ddd7335776a84", "patch": "@@ -14,7 +14,7 @@ template <template <class> class TT> struct X\n \n struct C\n {\n-\tX<A::template B> x;\n+\tX<A::template B> x;  // { dg-error \"template\" \"\" { target c++98 } }\n };\n \n int main()"}, {"sha": "51a66fd41164f7db16fa253f78d78bf407d8b18d", "filename": "gcc/testsuite/g++.old-deja/g++.pt/memtemp87.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9e3b2097b6cd7bd26fad8d5cf3ddd7335776a84/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fmemtemp87.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9e3b2097b6cd7bd26fad8d5cf3ddd7335776a84/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fmemtemp87.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fmemtemp87.C?ref=c9e3b2097b6cd7bd26fad8d5cf3ddd7335776a84", "patch": "@@ -12,4 +12,4 @@ public:\n template<template<class> class>\n class Y {\n };\n-Q::template X<int> x;\n+Q::template X<int> x; // { dg-error \"template\" \"\" { target c++98 } }"}, {"sha": "9c985141fd872879ec4c3512b6f35d75081e5928", "filename": "gcc/testsuite/g++.old-deja/g++.pt/overload13.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9e3b2097b6cd7bd26fad8d5cf3ddd7335776a84/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Foverload13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9e3b2097b6cd7bd26fad8d5cf3ddd7335776a84/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Foverload13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Foverload13.C?ref=c9e3b2097b6cd7bd26fad8d5cf3ddd7335776a84", "patch": "@@ -7,5 +7,5 @@ struct A {\n int main ()\n {\n   A a;\n-  return a.template f (0);\n+  return a.template f (0); // { dg-error \"template\" \"\" { target c++98 } }\n }"}]}