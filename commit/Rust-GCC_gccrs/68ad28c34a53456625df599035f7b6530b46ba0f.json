{"sha": "68ad28c34a53456625df599035f7b6530b46ba0f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjhhZDI4YzM0YTUzNDU2NjI1ZGY1OTkwMzVmN2I2NTMwYjQ2YmEwZg==", "commit": {"author": {"name": "Jiong Wang", "email": "jiong.wang@arm.com", "date": "2016-07-25T16:10:52Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2016-07-25T16:10:52Z"}, "message": "[AArch64][8/10] ARMv8.2-A FP16 two operands scalar intrinsics\n\ngcc/\n\t* config/aarch64/aarch64-simd-builtins.def: Register new builtins.\n\t* config/aarch64/aarch64.md (<FCVT_F2FIXED:fcvt_fixed_insn>hf<mode>3):\n\tNew.\n\t(<FCVT_FIXED2F:fcvt_fixed_insn><mode>hf3): Likewise.\n\t(add<mode>3): Likewise.\n\t(sub<mode>3): Likewise.\n\t(mul<mode>3): Likewise.\n\t(div<mode>3): Likewise.\n\t(*div<mode>3): Likewise.\n\t(<fmaxmin><mode>3): Extend to HF.\n\t* config/aarch64/aarch64-simd.md (aarch64_rsqrts<mode>): Likewise.\n\t(fabd<mode>3): Likewise.\n\t(<FCVT_F2FIXED:fcvt_fixed_insn><VHSDF_HSDF:mode>3): Likewise.\n\t(<FCVT_FIXED2F:fcvt_fixed_insn><VHSDI_HSDI:mode>3): Likewise.\n\t(aarch64_fmulx<mode>): Likewise.\n\t(aarch64_fac<optab><mode>): Likewise.\n\t(aarch64_frecps<mode>): Likewise.\n\t(<FCVT_F2FIXED:fcvt_fixed_insn>hfhi3): New.\n\t(<FCVT_FIXED2F:fcvt_fixed_insn>hihf3): Likewise.\n\t* config/aarch64/iterators.md (VHSDF_SDF): Delete.\n\t(VSDQ_HSDI): Support HI.\n\t(fcvt_target, FCVT_TARGET): Likewise.\n\t* config/aarch64/arm_fp16.h (vaddh_f16, vsubh_f16, vabdh_f16,\n\tvcageh_f16, vcagth_f16, vcaleh_f16, vcalth_f16, vceqh_f16, vcgeh_f16,\n\tvcgth_f16, vcleh_f16, vclth_f16, vcvth_n_f16_s16, vcvth_n_f16_s32,\n\tvcvth_n_f16_s64, vcvth_n_f16_u16, vcvth_n_f16_u32, vcvth_n_f16_u64,\n\tvcvth_n_s16_f16, vcvth_n_s32_f16, vcvth_n_s64_f16, vcvth_n_u16_f16,\n\tvcvth_n_u32_f16, vcvth_n_u64_f16, vdivh_f16, vmaxh_f16, vmaxnmh_f16,\n\tvminh_f16, vminnmh_f16, vmulh_f16, vmulxh_f16, vrecpsh_f16,\n\tvrsqrtsh_f16): New.\n\nFrom-SVN: r238723", "tree": {"sha": "4d1eafbc0356ae5bca773c9f5624465c5d8cc307", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d1eafbc0356ae5bca773c9f5624465c5d8cc307"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68ad28c34a53456625df599035f7b6530b46ba0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68ad28c34a53456625df599035f7b6530b46ba0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68ad28c34a53456625df599035f7b6530b46ba0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68ad28c34a53456625df599035f7b6530b46ba0f/comments", "author": null, "committer": null, "parents": [{"sha": "d7f33f07d88984cbe769047e3d07fc21067fbba9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7f33f07d88984cbe769047e3d07fc21067fbba9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7f33f07d88984cbe769047e3d07fc21067fbba9"}], "stats": {"total": 412, "additions": 347, "deletions": 65}, "files": [{"sha": "3bef6f026f6c38c0a5eaa45af7444bd75b3ba68b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68ad28c34a53456625df599035f7b6530b46ba0f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68ad28c34a53456625df599035f7b6530b46ba0f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=68ad28c34a53456625df599035f7b6530b46ba0f", "patch": "@@ -1,3 +1,36 @@\n+2016-07-25  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def: Register new builtins.\n+\t* config/aarch64/aarch64.md (<FCVT_F2FIXED:fcvt_fixed_insn>hf<mode>3):\n+\tNew.\n+\t(<FCVT_FIXED2F:fcvt_fixed_insn><mode>hf3): Likewise.\n+\t(add<mode>3): Likewise.\n+\t(sub<mode>3): Likewise.\n+\t(mul<mode>3): Likewise.\n+\t(div<mode>3): Likewise.\n+\t(*div<mode>3): Likewise.\n+\t(<fmaxmin><mode>3): Extend to HF.\n+\t* config/aarch64/aarch64-simd.md (aarch64_rsqrts<mode>): Likewise.\n+\t(fabd<mode>3): Likewise.\n+\t(<FCVT_F2FIXED:fcvt_fixed_insn><VHSDF_HSDF:mode>3): Likewise.\n+\t(<FCVT_FIXED2F:fcvt_fixed_insn><VHSDI_HSDI:mode>3): Likewise.\n+\t(aarch64_fmulx<mode>): Likewise.\n+\t(aarch64_fac<optab><mode>): Likewise.\n+\t(aarch64_frecps<mode>): Likewise.\n+\t(<FCVT_F2FIXED:fcvt_fixed_insn>hfhi3): New.\n+\t(<FCVT_FIXED2F:fcvt_fixed_insn>hihf3): Likewise.\n+\t* config/aarch64/iterators.md (VHSDF_SDF): Delete.\n+\t(VSDQ_HSDI): Support HI.\n+\t(fcvt_target, FCVT_TARGET): Likewise.\n+\t* config/aarch64/arm_fp16.h (vaddh_f16, vsubh_f16, vabdh_f16,\n+\tvcageh_f16, vcagth_f16, vcaleh_f16, vcalth_f16, vceqh_f16, vcgeh_f16,\n+\tvcgth_f16, vcleh_f16, vclth_f16, vcvth_n_f16_s16, vcvth_n_f16_s32,\n+\tvcvth_n_f16_s64, vcvth_n_f16_u16, vcvth_n_f16_u32, vcvth_n_f16_u64,\n+\tvcvth_n_s16_f16, vcvth_n_s32_f16, vcvth_n_s64_f16, vcvth_n_u16_f16,\n+\tvcvth_n_u32_f16, vcvth_n_u64_f16, vdivh_f16, vmaxh_f16, vmaxnmh_f16,\n+\tvminh_f16, vminnmh_f16, vmulh_f16, vmulxh_f16, vrecpsh_f16,\n+\tvrsqrtsh_f16): New.\n+\n 2016-07-25  Jiong Wang  <jiong.wang@arm.com>\n \n \t* config.gcc (aarch64*-*-*): Install arm_fp16.h.\n@@ -11,6 +44,7 @@\n \t(l<fcvt_pattern><su_optab><GPF:mode><GPI:mode>2): Likewise.\n \t(fix_trunc<GPF:mode><GPI:mode>2): Likewise.\n \t(sqrt<mode>2): Likewise.\n+\t(*sqrt<mode>2): Likewise.\n \t(abs<mode>2): Likewise.\n \t(<optab><mode>hf2): New pattern for HF mode.\n \t(<optab>hihf2): Likewise.\n@@ -58,7 +92,7 @@\n \t(f, fp): Support HF modes.\n \t* config/aarch64/arm_neon.h (vfma_lane_f16, vfmaq_lane_f16,\n \tvfma_laneq_f16, vfmaq_laneq_f16, vfma_n_f16, vfmaq_n_f16, vfms_lane_f16,\n-        vfmsq_lane_f16, vfms_laneq_f16, vfmsq_laneq_f16, vfms_n_f16,\n+\tvfmsq_lane_f16, vfms_laneq_f16, vfmsq_laneq_f16, vfms_n_f16,\n \tvfmsq_n_f16, vmul_lane_f16, vmulq_lane_f16, vmul_laneq_f16,\n \tvmulq_laneq_f16, vmul_n_f16, vmulq_n_f16, vmulx_lane_f16,\n \tvmulxq_lane_f16, vmulx_laneq_f16, vmulxq_laneq_f16): New.\n@@ -159,7 +193,7 @@\n \tand V8HFmode.\n \t* config/aarch64/arm_neon.h (__INTERLEAVE_LIST): Support float16x4_t,\n \tfloat16x8_t.\n-        (__aarch64_vdup_lane_f16, __aarch64_vdup_laneq_f16,\n+\t(__aarch64_vdup_lane_f16, __aarch64_vdup_laneq_f16,\n \t__aarch64_vdupq_lane_f16, __aarch64_vdupq_laneq_f16, vbsl_f16,\n \tvbslq_f16, vdup_n_f16, vdupq_n_f16, vdup_lane_f16, vdup_laneq_f16,\n \tvdupq_lane_f16, vdupq_laneq_f16, vduph_lane_f16, vduph_laneq_f16,"}, {"sha": "31abc077859254e3696adacb3f8f2b9b2da0647f", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68ad28c34a53456625df599035f7b6530b46ba0f/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68ad28c34a53456625df599035f7b6530b46ba0f/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=68ad28c34a53456625df599035f7b6530b46ba0f", "patch": "@@ -41,7 +41,7 @@\n \n   BUILTIN_VDC (COMBINE, combine, 0)\n   BUILTIN_VB (BINOP, pmul, 0)\n-  BUILTIN_VHSDF_SDF (BINOP, fmulx, 0)\n+  BUILTIN_VHSDF_HSDF (BINOP, fmulx, 0)\n   BUILTIN_VHSDF_DF (UNOP, sqrt, 2)\n   BUILTIN_VD_BHSI (BINOP, addp, 0)\n   VAR1 (UNOP, addp, 0, di)\n@@ -393,13 +393,12 @@\n   /* Implemented by\n      aarch64_frecp<FRECP:frecp_suffix><mode>.  */\n   BUILTIN_GPF_F16 (UNOP, frecpe, 0)\n-  BUILTIN_GPF (BINOP, frecps, 0)\n   BUILTIN_GPF_F16 (UNOP, frecpx, 0)\n \n   BUILTIN_VDQ_SI (UNOP, urecpe, 0)\n \n   BUILTIN_VHSDF (UNOP, frecpe, 0)\n-  BUILTIN_VHSDF (BINOP, frecps, 0)\n+  BUILTIN_VHSDF_HSDF (BINOP, frecps, 0)\n \n   /* Implemented by a mixture of abs2 patterns.  Note the DImode builtin is\n      only ever used for the int64x1_t intrinsic, there is no scalar version.  */\n@@ -496,17 +495,23 @@\n   /* Implemented by <FCVT_F2FIXED/FIXED2F:fcvt_fixed_insn><*><*>3.  */\n   BUILTIN_VSDQ_HSDI (SHIFTIMM, scvtf, 3)\n   BUILTIN_VSDQ_HSDI (FCVTIMM_SUS, ucvtf, 3)\n-  BUILTIN_VHSDF_SDF (SHIFTIMM, fcvtzs, 3)\n-  BUILTIN_VHSDF_SDF (SHIFTIMM_USS, fcvtzu, 3)\n+  BUILTIN_VHSDF_HSDF (SHIFTIMM, fcvtzs, 3)\n+  BUILTIN_VHSDF_HSDF (SHIFTIMM_USS, fcvtzu, 3)\n+  VAR1 (SHIFTIMM, scvtfsi, 3, hf)\n+  VAR1 (SHIFTIMM, scvtfdi, 3, hf)\n+  VAR1 (FCVTIMM_SUS, ucvtfsi, 3, hf)\n+  VAR1 (FCVTIMM_SUS, ucvtfdi, 3, hf)\n+  BUILTIN_GPI (SHIFTIMM, fcvtzshf, 3)\n+  BUILTIN_GPI (SHIFTIMM_USS, fcvtzuhf, 3)\n \n   /* Implemented by aarch64_rsqrte<mode>.  */\n   BUILTIN_VHSDF_HSDF (UNOP, rsqrte, 0)\n \n   /* Implemented by aarch64_rsqrts<mode>.  */\n-  BUILTIN_VHSDF_SDF (BINOP, rsqrts, 0)\n+  BUILTIN_VHSDF_HSDF (BINOP, rsqrts, 0)\n \n   /* Implemented by fabd<mode>3.  */\n-  BUILTIN_VHSDF_SDF (BINOP, fabd, 3)\n+  BUILTIN_VHSDF_HSDF (BINOP, fabd, 3)\n \n   /* Implemented by aarch64_faddp<mode>.  */\n   BUILTIN_VHSDF (BINOP, faddp, 0)\n@@ -522,10 +527,10 @@\n   BUILTIN_VHSDF_HSDF (UNOP, neg, 2)\n \n   /* Implemented by aarch64_fac<optab><mode>.  */\n-  BUILTIN_VHSDF_SDF (BINOP_USS, faclt, 0)\n-  BUILTIN_VHSDF_SDF (BINOP_USS, facle, 0)\n-  BUILTIN_VHSDF_SDF (BINOP_USS, facgt, 0)\n-  BUILTIN_VHSDF_SDF (BINOP_USS, facge, 0)\n+  BUILTIN_VHSDF_HSDF (BINOP_USS, faclt, 0)\n+  BUILTIN_VHSDF_HSDF (BINOP_USS, facle, 0)\n+  BUILTIN_VHSDF_HSDF (BINOP_USS, facgt, 0)\n+  BUILTIN_VHSDF_HSDF (BINOP_USS, facge, 0)\n \n   /* Implemented by sqrt<mode>2.  */\n   VAR1 (UNOP, sqrt, 2, hf)\n@@ -543,3 +548,7 @@\n   BUILTIN_GPI_I16 (UNOPUS, fixuns_trunchf, 2)\n   BUILTIN_GPI (UNOPUS, fixuns_truncsf, 2)\n   BUILTIN_GPI (UNOPUS, fixuns_truncdf, 2)\n+\n+  /* Implemented by <fmaxmin><mode>3.  */\n+  VAR1 (BINOP, fmax, 3, hf)\n+  VAR1 (BINOP, fmin, 3, hf)"}, {"sha": "0bf3ac8a875cd0766013032d8f57c2ee3eaacf35", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68ad28c34a53456625df599035f7b6530b46ba0f/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68ad28c34a53456625df599035f7b6530b46ba0f/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=68ad28c34a53456625df599035f7b6530b46ba0f", "patch": "@@ -391,9 +391,9 @@\n   [(set_attr \"type\" \"neon_fp_rsqrte_<stype><q>\")])\n \n (define_insn \"aarch64_rsqrts<mode>\"\n-  [(set (match_operand:VHSDF_SDF 0 \"register_operand\" \"=w\")\n-\t(unspec:VHSDF_SDF [(match_operand:VHSDF_SDF 1 \"register_operand\" \"w\")\n-\t\t\t   (match_operand:VHSDF_SDF 2 \"register_operand\" \"w\")]\n+  [(set (match_operand:VHSDF_HSDF 0 \"register_operand\" \"=w\")\n+\t(unspec:VHSDF_HSDF [(match_operand:VHSDF_HSDF 1 \"register_operand\" \"w\")\n+\t\t\t    (match_operand:VHSDF_HSDF 2 \"register_operand\" \"w\")]\n \t UNSPEC_RSQRTS))]\n   \"TARGET_SIMD\"\n   \"frsqrts\\\\t%<v>0<Vmtype>, %<v>1<Vmtype>, %<v>2<Vmtype>\"\n@@ -475,11 +475,11 @@\n )\n \n (define_insn \"fabd<mode>3\"\n-  [(set (match_operand:VHSDF_SDF 0 \"register_operand\" \"=w\")\n-\t(abs:VHSDF_SDF\n-\t  (minus:VHSDF_SDF\n-\t    (match_operand:VHSDF_SDF 1 \"register_operand\" \"w\")\n-\t    (match_operand:VHSDF_SDF 2 \"register_operand\" \"w\"))))]\n+  [(set (match_operand:VHSDF_HSDF 0 \"register_operand\" \"=w\")\n+\t(abs:VHSDF_HSDF\n+\t  (minus:VHSDF_HSDF\n+\t    (match_operand:VHSDF_HSDF 1 \"register_operand\" \"w\")\n+\t    (match_operand:VHSDF_HSDF 2 \"register_operand\" \"w\"))))]\n   \"TARGET_SIMD\"\n   \"fabd\\t%<v>0<Vmtype>, %<v>1<Vmtype>, %<v>2<Vmtype>\"\n   [(set_attr \"type\" \"neon_fp_abd_<stype><q>\")]\n@@ -3078,10 +3078,10 @@\n ;; fmulx.\n \n (define_insn \"aarch64_fmulx<mode>\"\n-  [(set (match_operand:VHSDF_SDF 0 \"register_operand\" \"=w\")\n-\t(unspec:VHSDF_SDF\n-\t  [(match_operand:VHSDF_SDF 1 \"register_operand\" \"w\")\n-\t   (match_operand:VHSDF_SDF 2 \"register_operand\" \"w\")]\n+  [(set (match_operand:VHSDF_HSDF 0 \"register_operand\" \"=w\")\n+\t(unspec:VHSDF_HSDF\n+\t  [(match_operand:VHSDF_HSDF 1 \"register_operand\" \"w\")\n+\t   (match_operand:VHSDF_HSDF 2 \"register_operand\" \"w\")]\n \t   UNSPEC_FMULX))]\n  \"TARGET_SIMD\"\n  \"fmulx\\t%<v>0<Vmtype>, %<v>1<Vmtype>, %<v>2<Vmtype>\"\n@@ -4341,10 +4341,10 @@\n   [(set (match_operand:<V_cmp_result> 0 \"register_operand\" \"=w\")\n \t(neg:<V_cmp_result>\n \t  (FAC_COMPARISONS:<V_cmp_result>\n-\t    (abs:VHSDF_SDF\n-\t      (match_operand:VHSDF_SDF 1 \"register_operand\" \"w\"))\n-\t    (abs:VHSDF_SDF\n-\t      (match_operand:VHSDF_SDF 2 \"register_operand\" \"w\"))\n+\t    (abs:VHSDF_HSDF\n+\t      (match_operand:VHSDF_HSDF 1 \"register_operand\" \"w\"))\n+\t    (abs:VHSDF_HSDF\n+\t      (match_operand:VHSDF_HSDF 2 \"register_operand\" \"w\"))\n   )))]\n   \"TARGET_SIMD\"\n   \"fac<n_optab>\\t%<v>0<Vmtype>, %<v><cmp_1><Vmtype>, %<v><cmp_2><Vmtype>\"\n@@ -5460,10 +5460,10 @@\n )\n \n (define_insn \"aarch64_frecps<mode>\"\n-  [(set (match_operand:VHSDF_SDF 0 \"register_operand\" \"=w\")\n-\t(unspec:VHSDF_SDF\n-\t  [(match_operand:VHSDF_SDF 1 \"register_operand\" \"w\")\n-\t  (match_operand:VHSDF_SDF 2 \"register_operand\" \"w\")]\n+  [(set (match_operand:VHSDF_HSDF 0 \"register_operand\" \"=w\")\n+\t(unspec:VHSDF_HSDF\n+\t  [(match_operand:VHSDF_HSDF 1 \"register_operand\" \"w\")\n+\t  (match_operand:VHSDF_HSDF 2 \"register_operand\" \"w\")]\n \t  UNSPEC_FRECPS))]\n   \"TARGET_SIMD\"\n   \"frecps\\\\t%<v>0<Vmtype>, %<v>1<Vmtype>, %<v>2<Vmtype>\""}, {"sha": "6d0a9dcf90c9c63721ebe53e7e43b19db1f2d7b3", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 66, "deletions": 26, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68ad28c34a53456625df599035f7b6530b46ba0f/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68ad28c34a53456625df599035f7b6530b46ba0f/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=68ad28c34a53456625df599035f7b6530b46ba0f", "patch": "@@ -4660,38 +4660,78 @@\n    (set_attr \"simd\" \"*, yes\")]\n )\n \n+(define_insn \"<FCVT_F2FIXED:fcvt_fixed_insn>hf<mode>3\"\n+  [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n+\t(unspec:GPI [(match_operand:HF 1 \"register_operand\" \"w\")\n+\t\t     (match_operand:SI 2 \"immediate_operand\" \"i\")]\n+\t FCVT_F2FIXED))]\n+  \"TARGET_FP_F16INST\"\n+   \"<FCVT_F2FIXED:fcvt_fixed_insn>\\t%<GPI:w>0, %h1, #%2\"\n+  [(set_attr \"type\" \"f_cvtf2i\")]\n+)\n+\n+(define_insn \"<FCVT_FIXED2F:fcvt_fixed_insn><mode>hf3\"\n+  [(set (match_operand:HF 0 \"register_operand\" \"=w\")\n+\t(unspec:HF [(match_operand:GPI 1 \"register_operand\" \"r\")\n+\t\t    (match_operand:SI 2 \"immediate_operand\" \"i\")]\n+\t FCVT_FIXED2F))]\n+  \"TARGET_FP_F16INST\"\n+  \"<FCVT_FIXED2F:fcvt_fixed_insn>\\t%h0, %<GPI:w>1, #%2\"\n+  [(set_attr \"type\" \"f_cvti2f\")]\n+)\n+\n+(define_insn \"<FCVT_F2FIXED:fcvt_fixed_insn>hf3\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=w\")\n+\t(unspec:HI [(match_operand:HF 1 \"register_operand\" \"w\")\n+\t\t    (match_operand:SI 2 \"immediate_operand\" \"i\")]\n+\t FCVT_F2FIXED))]\n+  \"TARGET_SIMD\"\n+  \"<FCVT_F2FIXED:fcvt_fixed_insn>\\t%h0, %h1, #%2\"\n+  [(set_attr \"type\" \"neon_fp_to_int_s\")]\n+)\n+\n+(define_insn \"<FCVT_FIXED2F:fcvt_fixed_insn>hi3\"\n+  [(set (match_operand:HF 0 \"register_operand\" \"=w\")\n+\t(unspec:HF [(match_operand:HI 1 \"register_operand\" \"w\")\n+\t\t    (match_operand:SI 2 \"immediate_operand\" \"i\")]\n+\t FCVT_FIXED2F))]\n+  \"TARGET_SIMD\"\n+  \"<FCVT_FIXED2F:fcvt_fixed_insn>\\t%h0, %h1, #%2\"\n+  [(set_attr \"type\" \"neon_int_to_fp_s\")]\n+)\n+\n ;; -------------------------------------------------------------------\n ;; Floating-point arithmetic\n ;; -------------------------------------------------------------------\n \n (define_insn \"add<mode>3\"\n-  [(set (match_operand:GPF 0 \"register_operand\" \"=w\")\n-        (plus:GPF\n-         (match_operand:GPF 1 \"register_operand\" \"w\")\n-         (match_operand:GPF 2 \"register_operand\" \"w\")))]\n+  [(set (match_operand:GPF_F16 0 \"register_operand\" \"=w\")\n+\t(plus:GPF_F16\n+\t (match_operand:GPF_F16 1 \"register_operand\" \"w\")\n+\t (match_operand:GPF_F16 2 \"register_operand\" \"w\")))]\n   \"TARGET_FLOAT\"\n   \"fadd\\\\t%<s>0, %<s>1, %<s>2\"\n-  [(set_attr \"type\" \"fadd<s>\")]\n+  [(set_attr \"type\" \"fadd<stype>\")]\n )\n \n (define_insn \"sub<mode>3\"\n-  [(set (match_operand:GPF 0 \"register_operand\" \"=w\")\n-        (minus:GPF\n-         (match_operand:GPF 1 \"register_operand\" \"w\")\n-         (match_operand:GPF 2 \"register_operand\" \"w\")))]\n+  [(set (match_operand:GPF_F16 0 \"register_operand\" \"=w\")\n+\t(minus:GPF_F16\n+\t (match_operand:GPF_F16 1 \"register_operand\" \"w\")\n+\t (match_operand:GPF_F16 2 \"register_operand\" \"w\")))]\n   \"TARGET_FLOAT\"\n   \"fsub\\\\t%<s>0, %<s>1, %<s>2\"\n-  [(set_attr \"type\" \"fadd<s>\")]\n+  [(set_attr \"type\" \"fadd<stype>\")]\n )\n \n (define_insn \"mul<mode>3\"\n-  [(set (match_operand:GPF 0 \"register_operand\" \"=w\")\n-        (mult:GPF\n-         (match_operand:GPF 1 \"register_operand\" \"w\")\n-         (match_operand:GPF 2 \"register_operand\" \"w\")))]\n+  [(set (match_operand:GPF_F16 0 \"register_operand\" \"=w\")\n+\t(mult:GPF_F16\n+\t (match_operand:GPF_F16 1 \"register_operand\" \"w\")\n+\t (match_operand:GPF_F16 2 \"register_operand\" \"w\")))]\n   \"TARGET_FLOAT\"\n   \"fmul\\\\t%<s>0, %<s>1, %<s>2\"\n-  [(set_attr \"type\" \"fmul<s>\")]\n+  [(set_attr \"type\" \"fmul<stype>\")]\n )\n \n (define_insn \"*fnmul<mode>3\"\n@@ -4715,9 +4755,9 @@\n )\n \n (define_expand \"div<mode>3\"\n- [(set (match_operand:GPF 0 \"register_operand\")\n-       (div:GPF (match_operand:GPF 1 \"general_operand\")\n-\t\t(match_operand:GPF 2 \"register_operand\")))]\n+ [(set (match_operand:GPF_F16 0 \"register_operand\")\n+       (div:GPF_F16 (match_operand:GPF_F16 1 \"general_operand\")\n+\t\t    (match_operand:GPF_F16 2 \"register_operand\")))]\n  \"TARGET_SIMD\"\n {\n   if (aarch64_emit_approx_div (operands[0], operands[1], operands[2]))\n@@ -4727,12 +4767,12 @@\n })\n \n (define_insn \"*div<mode>3\"\n-  [(set (match_operand:GPF 0 \"register_operand\" \"=w\")\n-        (div:GPF (match_operand:GPF 1 \"register_operand\" \"w\")\n-\t         (match_operand:GPF 2 \"register_operand\" \"w\")))]\n+  [(set (match_operand:GPF_F16 0 \"register_operand\" \"=w\")\n+\t(div:GPF_F16 (match_operand:GPF_F16 1 \"register_operand\" \"w\")\n+\t\t     (match_operand:GPF_F16 2 \"register_operand\" \"w\")))]\n   \"TARGET_FLOAT\"\n   \"fdiv\\\\t%<s>0, %<s>1, %<s>2\"\n-  [(set_attr \"type\" \"fdiv<s>\")]\n+  [(set_attr \"type\" \"fdiv<stype>\")]\n )\n \n (define_insn \"neg<mode>2\"\n@@ -4792,13 +4832,13 @@\n \n ;; Scalar forms for the IEEE-754 fmax()/fmin() functions\n (define_insn \"<fmaxmin><mode>3\"\n-  [(set (match_operand:GPF 0 \"register_operand\" \"=w\")\n-\t(unspec:GPF [(match_operand:GPF 1 \"register_operand\" \"w\")\n-\t\t     (match_operand:GPF 2 \"register_operand\" \"w\")]\n+  [(set (match_operand:GPF_F16 0 \"register_operand\" \"=w\")\n+\t(unspec:GPF_F16 [(match_operand:GPF_F16 1 \"register_operand\" \"w\")\n+\t\t     (match_operand:GPF_F16 2 \"register_operand\" \"w\")]\n \t\t     FMAXMIN))]\n   \"TARGET_FLOAT\"\n   \"<fmaxmin_op>\\\\t%<s>0, %<s>1, %<s>2\"\n-  [(set_attr \"type\" \"f_minmax<s>\")]\n+  [(set_attr \"type\" \"f_minmax<stype>\")]\n )\n \n ;; For copysign (x, y), we want to generate:"}, {"sha": "21edc65695365d269c8e0d1ae4cd01459f9fdcfb", "filename": "gcc/config/aarch64/arm_fp16.h", "status": "modified", "additions": 200, "deletions": 0, "changes": 200, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68ad28c34a53456625df599035f7b6530b46ba0f/gcc%2Fconfig%2Faarch64%2Farm_fp16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68ad28c34a53456625df599035f7b6530b46ba0f/gcc%2Fconfig%2Faarch64%2Farm_fp16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_fp16.h?ref=68ad28c34a53456625df599035f7b6530b46ba0f", "patch": "@@ -360,6 +360,206 @@ vsqrth_f16 (float16_t __a)\n   return __builtin_aarch64_sqrthf (__a);\n }\n \n+/* ARMv8.2-A FP16 two operands scalar intrinsics.  */\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vaddh_f16 (float16_t __a, float16_t __b)\n+{\n+  return __a + __b;\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vabdh_f16 (float16_t __a, float16_t __b)\n+{\n+  return __builtin_aarch64_fabdhf (__a, __b);\n+}\n+\n+__extension__ static __inline uint16_t __attribute__ ((__always_inline__))\n+vcageh_f16 (float16_t __a, float16_t __b)\n+{\n+  return __builtin_aarch64_facgehf_uss (__a, __b);\n+}\n+\n+__extension__ static __inline uint16_t __attribute__ ((__always_inline__))\n+vcagth_f16 (float16_t __a, float16_t __b)\n+{\n+  return __builtin_aarch64_facgthf_uss (__a, __b);\n+}\n+\n+__extension__ static __inline uint16_t __attribute__ ((__always_inline__))\n+vcaleh_f16 (float16_t __a, float16_t __b)\n+{\n+  return __builtin_aarch64_faclehf_uss (__a, __b);\n+}\n+\n+__extension__ static __inline uint16_t __attribute__ ((__always_inline__))\n+vcalth_f16 (float16_t __a, float16_t __b)\n+{\n+  return __builtin_aarch64_faclthf_uss (__a, __b);\n+}\n+\n+__extension__ static __inline uint16_t __attribute__ ((__always_inline__))\n+vceqh_f16 (float16_t __a, float16_t __b)\n+{\n+  return __builtin_aarch64_cmeqhf_uss (__a, __b);\n+}\n+\n+__extension__ static __inline uint16_t __attribute__ ((__always_inline__))\n+vcgeh_f16 (float16_t __a, float16_t __b)\n+{\n+  return __builtin_aarch64_cmgehf_uss (__a, __b);\n+}\n+\n+__extension__ static __inline uint16_t __attribute__ ((__always_inline__))\n+vcgth_f16 (float16_t __a, float16_t __b)\n+{\n+  return __builtin_aarch64_cmgthf_uss (__a, __b);\n+}\n+\n+__extension__ static __inline uint16_t __attribute__ ((__always_inline__))\n+vcleh_f16 (float16_t __a, float16_t __b)\n+{\n+  return __builtin_aarch64_cmlehf_uss (__a, __b);\n+}\n+\n+__extension__ static __inline uint16_t __attribute__ ((__always_inline__))\n+vclth_f16 (float16_t __a, float16_t __b)\n+{\n+  return __builtin_aarch64_cmlthf_uss (__a, __b);\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vcvth_n_f16_s16 (int16_t __a, const int __b)\n+{\n+  return __builtin_aarch64_scvtfhi (__a, __b);\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vcvth_n_f16_s32 (int32_t __a, const int __b)\n+{\n+  return __builtin_aarch64_scvtfsihf (__a, __b);\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vcvth_n_f16_s64 (int64_t __a, const int __b)\n+{\n+  return __builtin_aarch64_scvtfdihf (__a, __b);\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vcvth_n_f16_u16 (uint16_t __a, const int __b)\n+{\n+  return __builtin_aarch64_ucvtfhi_sus (__a, __b);\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vcvth_n_f16_u32 (uint32_t __a, const int __b)\n+{\n+  return __builtin_aarch64_ucvtfsihf_sus (__a, __b);\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vcvth_n_f16_u64 (uint64_t __a, const int __b)\n+{\n+  return __builtin_aarch64_ucvtfdihf_sus (__a, __b);\n+}\n+\n+__extension__ static __inline int16_t __attribute__ ((__always_inline__))\n+vcvth_n_s16_f16 (float16_t __a, const int __b)\n+{\n+  return __builtin_aarch64_fcvtzshf (__a, __b);\n+}\n+\n+__extension__ static __inline int32_t __attribute__ ((__always_inline__))\n+vcvth_n_s32_f16 (float16_t __a, const int __b)\n+{\n+  return __builtin_aarch64_fcvtzshfsi (__a, __b);\n+}\n+\n+__extension__ static __inline int64_t __attribute__ ((__always_inline__))\n+vcvth_n_s64_f16 (float16_t __a, const int __b)\n+{\n+  return __builtin_aarch64_fcvtzshfdi (__a, __b);\n+}\n+\n+__extension__ static __inline uint16_t __attribute__ ((__always_inline__))\n+vcvth_n_u16_f16 (float16_t __a, const int __b)\n+{\n+  return __builtin_aarch64_fcvtzuhf_uss (__a, __b);\n+}\n+\n+__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n+vcvth_n_u32_f16 (float16_t __a, const int __b)\n+{\n+  return __builtin_aarch64_fcvtzuhfsi_uss (__a, __b);\n+}\n+\n+__extension__ static __inline uint64_t __attribute__ ((__always_inline__))\n+vcvth_n_u64_f16 (float16_t __a, const int __b)\n+{\n+  return __builtin_aarch64_fcvtzuhfdi_uss (__a, __b);\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vdivh_f16 (float16_t __a, float16_t __b)\n+{\n+  return __a / __b;\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vmaxh_f16 (float16_t __a, float16_t __b)\n+{\n+  return __builtin_aarch64_fmaxhf (__a, __b);\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vmaxnmh_f16 (float16_t __a, float16_t __b)\n+{\n+  return __builtin_aarch64_fmaxhf (__a, __b);\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vminh_f16 (float16_t __a, float16_t __b)\n+{\n+  return __builtin_aarch64_fminhf (__a, __b);\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vminnmh_f16 (float16_t __a, float16_t __b)\n+{\n+  return __builtin_aarch64_fminhf (__a, __b);\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vmulh_f16 (float16_t __a, float16_t __b)\n+{\n+  return __a * __b;\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vmulxh_f16 (float16_t __a, float16_t __b)\n+{\n+  return __builtin_aarch64_fmulxhf (__a, __b);\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vrecpsh_f16 (float16_t __a, float16_t __b)\n+{\n+  return __builtin_aarch64_frecpshf (__a, __b);\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vrsqrtsh_f16 (float16_t __a, float16_t __b)\n+{\n+  return __builtin_aarch64_rsqrtshf (__a, __b);\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vsubh_f16 (float16_t __a, float16_t __b)\n+{\n+  return __a - __b;\n+}\n+\n #pragma GCC pop_options\n \n #endif"}, {"sha": "91e2e6467b8de6408265f2095cfb4aaf80840559", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68ad28c34a53456625df599035f7b6530b46ba0f/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68ad28c34a53456625df599035f7b6530b46ba0f/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=68ad28c34a53456625df599035f7b6530b46ba0f", "patch": "@@ -105,9 +105,6 @@\n (define_mode_iterator VHSDF_DF [(V4HF \"TARGET_SIMD_F16INST\")\n \t\t\t\t(V8HF \"TARGET_SIMD_F16INST\")\n \t\t\t\tV2SF V4SF V2DF DF])\n-(define_mode_iterator VHSDF_SDF [(V4HF \"TARGET_SIMD_F16INST\")\n-\t\t\t\t (V8HF \"TARGET_SIMD_F16INST\")\n-\t\t\t\t V2SF V4SF V2DF SF DF])\n (define_mode_iterator VHSDF_HSDF [(V4HF \"TARGET_SIMD_F16INST\")\n \t\t\t\t  (V8HF \"TARGET_SIMD_F16INST\")\n \t\t\t\t  V2SF V4SF V2DF\n@@ -190,7 +187,9 @@\n ;; Scalar and Vector modes for S and D, Vector modes for H.\n (define_mode_iterator VSDQ_HSDI [(V4HI \"TARGET_SIMD_F16INST\")\n \t\t\t\t (V8HI \"TARGET_SIMD_F16INST\")\n-\t\t\t\t V2SI V4SI V2DI SI DI])\n+\t\t\t\t V2SI V4SI V2DI\n+\t\t\t\t (HI \"TARGET_SIMD_F16INST\")\n+\t\t\t\t SI DI])\n \n ;; Vector modes for Q and H types.\n (define_mode_iterator VDQQH [V8QI V16QI V4HI V8HI])\n@@ -705,12 +704,12 @@\n \t\t\t       (V2DI \"v2df\") (V4SI \"v4sf\") (V2SI \"v2sf\")\n \t\t\t       (SF \"si\") (DF \"di\") (SI \"sf\") (DI \"df\")\n \t\t\t       (V4HF \"v4hi\") (V8HF \"v8hi\") (V4HI \"v4hf\")\n-\t\t\t       (V8HI \"v8hf\")])\n+\t\t\t       (V8HI \"v8hf\") (HF \"hi\") (HI \"hf\")])\n (define_mode_attr FCVT_TARGET [(V2DF \"V2DI\") (V4SF \"V4SI\") (V2SF \"V2SI\")\n \t\t\t       (V2DI \"V2DF\") (V4SI \"V4SF\") (V2SI \"V2SF\")\n \t\t\t       (SF \"SI\") (DF \"DI\") (SI \"SF\") (DI \"DF\")\n \t\t\t       (V4HF \"V4HI\") (V8HF \"V8HI\") (V4HI \"V4HF\")\n-\t\t\t       (V8HI \"V8HF\")])\n+\t\t\t       (V8HI \"V8HF\") (HF \"HI\") (HI \"HF\")])\n \n \n ;; for the inequal width integer to fp conversions"}]}