{"sha": "7cbdc87dd5c250a5fbf4be81581027438c7bbb94", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2NiZGM4N2RkNWMyNTBhNWZiZjRiZTgxNTgxMDI3NDM4YzdiYmI5NA==", "commit": {"author": {"name": "Kirill Yukhin", "email": "kirill.yukhin@intel.com", "date": "2014-08-22T09:46:18Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2014-08-22T09:46:18Z"}, "message": "sse.md (define_mode_iterator V_AVX512VL): Delete.\n\ngcc/\n\t* gcc/config/i386/sse.md (define_mode_iterator V_AVX512VL): Delete.\n\t(define_mode_iterator V48_AVX512VL): New.\n\t(define_mode_iterator V12_AVX512VL): Ditto.\n\t(define_insn <avx512>_load<mode>_mask): Split into two similar\n\tpatterns which use different mode iterators: V48_AVX512VL V12_AVX512VL.\n\tRefactor output template.\n\t(define_insn \"<avx512>_store<mode>_mask\"): Ditto.\n\nFrom-SVN: r214307", "tree": {"sha": "a27429c40505492c82b10c80a18efb918368e267", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a27429c40505492c82b10c80a18efb918368e267"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7cbdc87dd5c250a5fbf4be81581027438c7bbb94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cbdc87dd5c250a5fbf4be81581027438c7bbb94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cbdc87dd5c250a5fbf4be81581027438c7bbb94", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cbdc87dd5c250a5fbf4be81581027438c7bbb94/comments", "author": null, "committer": null, "parents": [{"sha": "671a475e64d77f16b3fbc5aad349be68828c1318", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/671a475e64d77f16b3fbc5aad349be68828c1318", "html_url": "https://github.com/Rust-GCC/gccrs/commit/671a475e64d77f16b3fbc5aad349be68828c1318"}], "stats": {"total": 156, "additions": 98, "deletions": 58}, "files": [{"sha": "7f5555b67598255dff673707b78e0fab355928c1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cbdc87dd5c250a5fbf4be81581027438c7bbb94/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cbdc87dd5c250a5fbf4be81581027438c7bbb94/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7cbdc87dd5c250a5fbf4be81581027438c7bbb94", "patch": "@@ -1,3 +1,13 @@\n+2014-08-22  Kirill Yukhin  <kirill.yukhin@intel.com>\n+\n+\t* gcc/config/i386/sse.md (define_mode_iterator V_AVX512VL): Delete.\n+\t(define_mode_iterator V48_AVX512VL): New.\n+\t(define_mode_iterator V12_AVX512VL): Ditto.\n+\t(define_insn <avx512>_load<mode>_mask): Split into two similar\n+\tpatterns which use different mode iterators: V48_AVX512VL V12_AVX512VL.\n+\tRefactor output template.\n+\t(define_insn \"<avx512>_store<mode>_mask\"): Ditto.\n+\n 2014-08-22  David Malcolm  <dmalcolm@redhat.com>\n \n \t* cprop.c (struct occr): Strengthen field \"insn\" from rtx to"}, {"sha": "ca944a333826d5a229f462a8eb34da7f3e6ba83d", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 88, "deletions": 58, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cbdc87dd5c250a5fbf4be81581027438c7bbb94/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cbdc87dd5c250a5fbf4be81581027438c7bbb94/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=7cbdc87dd5c250a5fbf4be81581027438c7bbb94", "patch": "@@ -150,16 +150,17 @@\n    (V16SF \"TARGET_AVX512F\") (V8SF \"TARGET_AVX\") V4SF\n    (V8DF \"TARGET_AVX512F\")  (V4DF \"TARGET_AVX\") V2DF])\n \n-;; All AVX512VL vector modes\n-(define_mode_iterator V_AVX512VL\n-  [(V64QI \"TARGET_AVX512BW\") (V32QI \"TARGET_AVX512VL && TARGET_AVX512BW\")\n-   (V16QI \"TARGET_AVX512VL && TARGET_AVX512BW\")\n-   (V32HI \"TARGET_AVX512BW\") (V16HI \"TARGET_AVX512VL && TARGET_AVX512BW\")\n-   (V8HI \"TARGET_AVX512VL && TARGET_AVX512BW\")\n-   (V16SI \"TARGET_AVX512F\") (V8SI \"TARGET_AVX512VL\")  (V4SI \"TARGET_AVX512VL\")\n-   (V8DI \"TARGET_AVX512F\")  (V4DI \"TARGET_AVX512VL\")  (V2DI \"TARGET_AVX512VL\")\n-   (V16SF \"TARGET_AVX512F\") (V8SF \"TARGET_AVX512VL\")  (V4SF \"TARGET_AVX512VL\")\n-   (V8DF \"TARGET_AVX512F\")  (V4DF \"TARGET_AVX512VL\")  (V2DF \"TARGET_AVX512VL\")])\n+;; All AVX-512{F,VL} vector modes. Supposed TARGET_AVX512F baseline.\n+(define_mode_iterator V48_AVX512VL\n+  [V16SI (V8SI \"TARGET_AVX512VL\") (V4SI \"TARGET_AVX512VL\")\n+   V8DI  (V4DI \"TARGET_AVX512VL\") (V2DI \"TARGET_AVX512VL\")\n+   V16SF (V8SF \"TARGET_AVX512VL\") (V4SF \"TARGET_AVX512VL\")\n+   V8DF  (V4DF \"TARGET_AVX512VL\") (V2DF \"TARGET_AVX512VL\")])\n+\n+;; 1,2 byte AVX-512{BW,VL} vector modes. Supposed TARGET_AVX512BW baseline.\n+(define_mode_iterator VI12_AVX512VL\n+  [V64QI (V16QI \"TARGET_AVX512VL\") (V32QI \"TARGET_AVX512VL\")\n+   V32HI (V16HI \"TARGET_AVX512VL\") (V8HI \"TARGET_AVX512VL\")])\n \n ;; All vector modes\n (define_mode_iterator V\n@@ -849,43 +850,56 @@\n \t      (const_string \"<sseinsnmode>\")))])\n \n (define_insn \"<avx512>_load<mode>_mask\"\n-  [(set (match_operand:V_AVX512VL 0 \"register_operand\" \"=v,v\")\n-\t(vec_merge:V_AVX512VL\n-\t  (match_operand:V_AVX512VL 1 \"nonimmediate_operand\" \"v,m\")\n-\t  (match_operand:V_AVX512VL 2 \"vector_move_operand\" \"0C,0C\")\n+  [(set (match_operand:V48_AVX512VL 0 \"register_operand\" \"=v,v\")\n+\t(vec_merge:V48_AVX512VL\n+\t  (match_operand:V48_AVX512VL 1 \"nonimmediate_operand\" \"v,m\")\n+\t  (match_operand:V48_AVX512VL 2 \"vector_move_operand\" \"0C,0C\")\n \t  (match_operand:<avx512fmaskmode> 3 \"register_operand\" \"Yk,Yk\")))]\n   \"TARGET_AVX512F\"\n {\n-  switch (MODE_<sseinsnmode>)\n+  static char buf [64];\n+\n+  const char *insn_op;\n+  const char *sse_suffix;\n+  const char *align;\n+  if (FLOAT_MODE_P (GET_MODE_INNER (<MODE>mode)))\n     {\n-    case MODE_V8DF:\n-    case MODE_V4DF:\n-    case MODE_V2DF:\n-    case MODE_V16SF:\n-    case MODE_V8SF:\n-    case MODE_V4SF:\n-      if (misaligned_operand (operands[1], <MODE>mode))\n-\treturn \"vmovu<ssemodesuffix>\\t{%1, %0%{%3%}%N2|%0%{%3%}%N2, %1}\";\n-      return \"vmova<ssemodesuffix>\\t{%1, %0%{%3%}%N2|%0%{%3%}%N2, %1}\";\n-    default:\n-      /* There is no vmovdqa8/16 use vmovdqu8/16 instead.  */\n-      if (<MODE>mode == V64QImode\n-\t  || <MODE>mode == V32QImode\n-\t  || <MODE>mode == V16QImode\n-\t  || <MODE>mode == V32HImode\n-\t  || <MODE>mode == V16HImode\n-\t  || <MODE>mode == V8HImode\n-\t  || misaligned_operand (operands[1], <MODE>mode))\n-\treturn \"vmovdqu<ssescalarsize>\\t{%1, %0%{%3%}%N2|%0%{%3%}%N2, %1}\";\n-      else\n-\treturn \"vmovdqa<ssescalarsize>\\t{%1, %0%{%3%}%N2|%0%{%3%}%N2, %1}\";\n+      insn_op = \"vmov\";\n+      sse_suffix = \"<ssemodesuffix>\";\n     }\n+  else\n+    {\n+      insn_op = \"vmovdq\";\n+      sse_suffix = \"<ssescalarsize>\";\n+    }\n+\n+  if (misaligned_operand (operands[1], <MODE>mode))\n+    align = \"u\";\n+  else\n+    align = \"a\";\n+\n+  snprintf (buf, sizeof (buf), \"%s%s%s\\t{%%1, %%0%%{%%3%%}%%N2|%%0%%{%%3%%}%%N2, %%1}\",\n+\t    insn_op, align, sse_suffix);\n+  return buf;\n }\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"memory\" \"none,load\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_insn \"<avx512>_load<mode>_mask\"\n+  [(set (match_operand:VI12_AVX512VL 0 \"register_operand\" \"=v,v\")\n+\t(vec_merge:VI12_AVX512VL\n+\t  (match_operand:VI12_AVX512VL 1 \"nonimmediate_operand\" \"v,m\")\n+\t  (match_operand:VI12_AVX512VL 2 \"vector_move_operand\" \"0C,0C\")\n+\t  (match_operand:<avx512fmaskmode> 3 \"register_operand\" \"Yk,Yk\")))]\n+  \"TARGET_AVX512BW\"\n+  \"vmovdqu<ssescalarsize>\\t{%1, %0%{%3%}%N2|%0%{%3%}%N2, %1}\"\n+  [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"memory\" \"none,load\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n (define_insn \"avx512f_blendm<mode>\"\n   [(set (match_operand:VI48F_512 0 \"register_operand\" \"=v\")\n \t(vec_merge:VI48F_512\n@@ -899,40 +913,56 @@\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_insn \"<avx512>_store<mode>_mask\"\n-  [(set (match_operand:V_AVX512VL 0 \"memory_operand\" \"=m\")\n-\t(vec_merge:V_AVX512VL\n-\t  (match_operand:V_AVX512VL 1 \"register_operand\" \"v\")\n+  [(set (match_operand:V48_AVX512VL 0 \"memory_operand\" \"=m\")\n+\t(vec_merge:V48_AVX512VL\n+\t  (match_operand:V48_AVX512VL 1 \"register_operand\" \"v\")\n \t  (match_dup 0)\n \t  (match_operand:<avx512fmaskmode> 2 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512F\"\n {\n-  switch (MODE_<sseinsnmode>)\n+  static char buf [64];\n+\n+  const char *insn_op;\n+  const char *sse_suffix;\n+  const char *align;\n+  if (FLOAT_MODE_P (GET_MODE_INNER (<MODE>mode)))\n     {\n-    case MODE_V8DF:\n-    case MODE_V4DF:\n-    case MODE_V2DF:\n-    case MODE_V16SF:\n-    case MODE_V8SF:\n-    case MODE_V4SF:\n-      return \"vmova<ssemodesuffix>\\t{%1, %0%{%2%}|%0%{%2%}, %1}\";\n-    default:\n-      /* There is no vmovdqa8/16 use vmovdqu8/16 instead.  */\n-      if (<MODE>mode == V64QImode\n-\t  || <MODE>mode == V32QImode\n-\t  || <MODE>mode == V16QImode\n-\t  || <MODE>mode == V32HImode\n-\t  || <MODE>mode == V16HImode\n-\t  || <MODE>mode == V8HImode)\n-\treturn \"vmovdqu<ssescalarsize>\\t{%1, %0%{%2%}|%0%{%2%}, %1}\";\n-      else\n-\treturn \"vmovdqa<ssescalarsize>\\t{%1, %0%{%2%}|%0%{%2%}, %1}\";\n+      insn_op = \"vmov\";\n+      sse_suffix = \"<ssemodesuffix>\";\n     }\n+  else\n+    {\n+      insn_op = \"vmovdq\";\n+      sse_suffix = \"<ssescalarsize>\";\n+    }\n+\n+  if (misaligned_operand (operands[1], <MODE>mode))\n+    align = \"u\";\n+  else\n+    align = \"a\";\n+\n+  snprintf (buf, sizeof (buf), \"%s%s%s\\t{%%1, %%0%%{%%2%%}|%%0%%{%%2%%}, %%1}\",\n+\t    insn_op, align, sse_suffix);\n+  return buf;\n }\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"memory\" \"store\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_insn \"<avx512>_store<mode>_mask\"\n+  [(set (match_operand:VI12_AVX512VL 0 \"memory_operand\" \"=m\")\n+\t(vec_merge:VI12_AVX512VL\n+\t  (match_operand:VI12_AVX512VL 1 \"register_operand\" \"v\")\n+\t  (match_dup 0)\n+\t  (match_operand:<avx512fmaskmode> 2 \"register_operand\" \"Yk\")))]\n+  \"TARGET_AVX512BW\"\n+  \"vmovdqu<ssescalarsize>\\t{%1, %0%{%2%}|%0%{%2%}, %1}\"\n+  [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"memory\" \"store\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n (define_insn \"sse2_movq128\"\n   [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n \t(vec_concat:V2DI"}]}