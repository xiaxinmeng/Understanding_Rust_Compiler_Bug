{"sha": "ad643a75f71cefbfe50788933c5c847211a09fe4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQ2NDNhNzVmNzFjZWZiZmU1MDc4ODkzM2M1Yzg0NzIxMWEwOWZlNA==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2004-10-15T07:58:38Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2004-10-15T07:58:38Z"}, "message": "re PR other/17991 (Two-process fixincludes broken: pz_mn_name_pat undefined)\n\n2004-08-14  Paolo Bonzini  <bonzini@gnu.org>\n\n        PR other/17991\n\n\t* Makefile.in (ALLOBJ, TESTOBJ, FIXOBJ): Add fixopts.o.\n\tUpdate copyright year.\n\t* fixfixes.c (main): Call initialize_opts from fixopts.c.\n\t* fixincl.c (initialize): Call initialize_opts from fixopts.c,\n\tdo not include code for parsing options (environment vars).\n\t(fix_with_system): Use a search path for applyfix, so that you\n\tcan run the test suite with two-process fixincludes.\n\t* fixopts.c: New file.\n\t* configure.ac: Add --enable-twoprocess.  Export ac_exeext\n\tto config.h.  Default to --enable-twoprocess for MinGW32.\n\t* config.h.in: Regenerate.\n\t* configure: Regenerate.\n\nFrom-SVN: r89087", "tree": {"sha": "0988a96569fcf89616a90abf081927a8c8328cf8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0988a96569fcf89616a90abf081927a8c8328cf8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad643a75f71cefbfe50788933c5c847211a09fe4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad643a75f71cefbfe50788933c5c847211a09fe4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad643a75f71cefbfe50788933c5c847211a09fe4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad643a75f71cefbfe50788933c5c847211a09fe4/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e26ce7eddf63a239c48619d4ed8f2e635dc6d8d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e26ce7eddf63a239c48619d4ed8f2e635dc6d8d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e26ce7eddf63a239c48619d4ed8f2e635dc6d8d9"}], "stats": {"total": 244, "additions": 172, "deletions": 72}, "files": [{"sha": "f3573b11039a9cdb5e0add248d1deed02651a6c2", "filename": "fixincludes/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad643a75f71cefbfe50788933c5c847211a09fe4/fixincludes%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad643a75f71cefbfe50788933c5c847211a09fe4/fixincludes%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FChangeLog?ref=ad643a75f71cefbfe50788933c5c847211a09fe4", "patch": "@@ -1,3 +1,20 @@\n+2004-08-14  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\tPR other/17991\n+\n+\t* Makefile.in (ALLOBJ, TESTOBJ, FIXOBJ): Add fixopts.o.\n+\tUpdate copyright year.\n+\t* fixfixes.c (main): Call initialize_opts from fixopts.c.\n+\t* fixincl.c (initialize): Call initialize_opts from fixopts.c,\n+\tdo not include code for parsing options (environment vars).\n+\t(fix_with_system): Use a search path for applyfix, so that you\n+\tcan run the test suite with two-process fixincludes.\n+\t* fixopts.c: New file.\n+\t* configure.ac: Add --enable-twoprocess.  Export ac_exeext\n+\tto config.h.  Default to --enable-twoprocess for MinGW32.\n+\t* config.h.in: Regenerate.\n+\t* configure: Regenerate.\n+\n 2004-10-04  Loren J. Rittle  <ljrittle@acm.org>\n \n \t* tests/base/sys/cdefs.h: Update from test area."}, {"sha": "c067d84a3cc7f00dba47bc9554d6ecc1091c9294", "filename": "fixincludes/Makefile.in", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad643a75f71cefbfe50788933c5c847211a09fe4/fixincludes%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad643a75f71cefbfe50788933c5c847211a09fe4/fixincludes%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FMakefile.in?ref=ad643a75f71cefbfe50788933c5c847211a09fe4", "patch": "@@ -1,6 +1,7 @@\n # Makefile for fixincludes.\n #\n-#   Copyright (C) 1998, 1999, 2000, 2001, 2003 Free Software Foundation, Inc.\n+#   Copyright (C) 1998, 1999, 2000, 2001, 2003, 2004\n+#   Free Software Foundation, Inc.\n \n #This file is part of fixincludes.\n \n@@ -60,10 +61,10 @@ default : all\n LIBIBERTY=../libiberty/libiberty.a\n \n ALLOBJ = fixincl.o fixtests.o fixfixes.o server.o procopen.o \\\n-      fixlib.o\n+      fixlib.o fixopts.o\n \n-TESTOBJ = fixincl.o fixlib.o fixtests.o\n-FIXOBJ  = fixfixes.o fixlib.o\n+TESTOBJ = fixincl.o fixlib.o fixtests.o fixopts.o\n+FIXOBJ  = fixfixes.o fixlib.o fixopts.o\n \n HDR = server.h fixlib.h\n FI  = fixincl@EXEEXT@"}, {"sha": "47d5173c4a252b5bb2b651a284cd50e2f407ddf4", "filename": "fixincludes/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad643a75f71cefbfe50788933c5c847211a09fe4/fixincludes%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad643a75f71cefbfe50788933c5c847211a09fe4/fixincludes%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Fconfig.h.in?ref=ad643a75f71cefbfe50788933c5c847211a09fe4", "patch": "@@ -1,5 +1,8 @@\n /* config.h.in.  Generated from configure.ac by autoheader.  */\n \n+/* Defined to the executable file extension on the host system */\n+#undef EXE_EXT\n+\n /* Define to 1 if you have the declaration of `abort', and to 0 if you don't.\n    */\n #undef HAVE_DECL_ABORT"}, {"sha": "d5da756ada828f68a5601d93fca3fe7f72f14732", "filename": "fixincludes/configure", "status": "modified", "additions": 29, "deletions": 7, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad643a75f71cefbfe50788933c5c847211a09fe4/fixincludes%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad643a75f71cefbfe50788933c5c847211a09fe4/fixincludes%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Fconfigure?ref=ad643a75f71cefbfe50788933c5c847211a09fe4", "patch": "@@ -847,6 +847,7 @@ if test -n \"$ac_init_help\"; then\n Optional Features:\n   --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)\n   --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]\n+  --enable-twoprocess       Use a separate process to apply the fixes\n   --enable-maintainer-mode enable make rules and dependencies not useful\n                           (and sometimes confusing) to the casual installer\n \n@@ -2343,19 +2344,39 @@ ac_compiler_gnu=$ac_cv_c_compiler_gnu\n # Choose one or two-process fix methodology.  Systems that cannot handle\n # bi-directional pipes must use the two process method.\n #\n-case $host in\n+# Check whether --enable-twoprocess or --disable-twoprocess was given.\n+if test \"${enable_twoprocess+set}\" = set; then\n+  enableval=\"$enable_twoprocess\"\n+  if test \"x$enable_twoprocess\" = yes; then\n+\tTARGET=twoprocess\n+else\n+\tTARGET=oneprocess\n+fi\n+else\n+  case $host in\n \ti?86-*-msdosdjgpp* | \\\n+\ti?86-*-mingw32* | \\\n \t*-*-beos* )\n \t\tTARGET=twoprocess\n+\t\t;;\n+\n+\t* )\n+\t\tTARGET=oneprocess\n+\t\t;;\n+esac\n+fi;\n+\n+\n+if test $TARGET = twoprocess; then\n \n cat >>confdefs.h <<\\_ACEOF\n #define SEPARATE_FIX_PROC 1\n _ACEOF\n \n-\t\t;;\n+fi\n \n+case $host in\n \tvax-dec-bsd* )\n-\t\tTARGET=oneprocess\n \n cat >>confdefs.h <<\\_ACEOF\n #define exit xexit\n@@ -2367,13 +2388,14 @@ cat >>confdefs.h <<\\_ACEOF\n _ACEOF\n \n \t\t;;\n-\n-\t* )\n-\t\tTARGET=oneprocess\n-\t\t;;\n esac\n \n \n+cat >>confdefs.h <<_ACEOF\n+#define EXE_EXT \"$ac_exeext\"\n+_ACEOF\n+\n+\n # Checks for header files.\n \n ac_ext=c"}, {"sha": "8499032db816210cbd5e5012c48f01c452fd1614", "filename": "fixincludes/configure.ac", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad643a75f71cefbfe50788933c5c847211a09fe4/fixincludes%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad643a75f71cefbfe50788933c5c847211a09fe4/fixincludes%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Fconfigure.ac?ref=ad643a75f71cefbfe50788933c5c847211a09fe4", "patch": "@@ -9,24 +9,40 @@ AC_PROG_CC\n # Choose one or two-process fix methodology.  Systems that cannot handle\n # bi-directional pipes must use the two process method.\n #\n-case $host in\n+AC_ARG_ENABLE([twoprocess],\n+[  --enable-twoprocess       Use a separate process to apply the fixes],\n+[if test \"x$enable_twoprocess\" = yes; then\n+\tTARGET=twoprocess\n+else\n+\tTARGET=oneprocess\n+fi],\n+[case $host in\n \ti?86-*-msdosdjgpp* | \\\n+\ti?86-*-mingw32* | \\\n \t*-*-beos* )\n \t\tTARGET=twoprocess\n-\t\tAC_DEFINE(SEPARATE_FIX_PROC, 1, [Define if testing and fixing are done by separate process])\n \t\t;;\n \n-\tvax-dec-bsd* )\n+\t* )\n \t\tTARGET=oneprocess\n-\t\tAC_DEFINE(exit, xexit, [Define to xexit if the host system does not support atexit])\n-\t\tAC_DEFINE(atexit, xatexit, [Define to xatexit if the host system does not support atexit])\n \t\t;;\n+esac])\n+AC_SUBST(TARGET)\n \n-\t* )\n-\t\tTARGET=oneprocess\n+if test $TARGET = twoprocess; then\n+\tAC_DEFINE(SEPARATE_FIX_PROC, 1,\n+\t\t  [Define if testing and fixing are done by separate process])\n+fi\n+\n+case $host in\n+\tvax-dec-bsd* )\n+\t\tAC_DEFINE(exit, xexit, [Define to xexit if the host system does not support atexit])\n+\t\tAC_DEFINE(atexit, xatexit, [Define to xatexit if the host system does not support atexit])\n \t\t;;\n esac\n-AC_SUBST(TARGET)\n+\n+AC_DEFINE_UNQUOTED([EXE_EXT], \"$ac_exeext\",\n+  [Defined to the executable file extension on the host system])\n \n # Checks for header files.\n AC_HEADER_STDC"}, {"sha": "ade3c4dc5bf87d1495c779c47ecc84d816ac6aa7", "filename": "fixincludes/fixfixes.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad643a75f71cefbfe50788933c5c847211a09fe4/fixincludes%2Ffixfixes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad643a75f71cefbfe50788933c5c847211a09fe4/fixincludes%2Ffixfixes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixfixes.c?ref=ad643a75f71cefbfe50788933c5c847211a09fe4", "patch": "@@ -3,7 +3,7 @@\n \n    Test to see if a particular fix should be applied to a header file.\n \n-   Copyright (C) 1997, 1998, 1999, 2000, 2001, 2003\n+   Copyright (C) 1997, 1998, 1999, 2000, 2001, 2003, 2004\n    Free Software Foundation, Inc.\n \n = = = = = = = = = = = = = = = = = = = = = = = = =\n@@ -749,6 +749,8 @@ main( int argc, char** argv )\n       return EXIT_FAILURE;\n     }\n \n+  initialize_opts ();\n+\n   {\n     char* pz = argv[1];\n     long  idx;"}, {"sha": "a153a777a54a148c2eb21f4a626b6554d9f593ce", "filename": "fixincludes/fixincl.c", "status": "modified", "additions": 37, "deletions": 51, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad643a75f71cefbfe50788933c5c847211a09fe4/fixincludes%2Ffixincl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad643a75f71cefbfe50788933c5c847211a09fe4/fixincludes%2Ffixincl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixincl.c?ref=ad643a75f71cefbfe50788933c5c847211a09fe4", "patch": "@@ -2,7 +2,7 @@\n    files which are fixed to work correctly with ANSI C and placed in a\n    directory that GCC will search.\n \n-   Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1997, 1998, 1999, 2000, 2004 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -23,6 +23,8 @@ Boston, MA 02111-1307, USA.  */\n \n #include \"fixlib.h\"\n \n+#include <sys/stat.h>\n+\n #if defined( HAVE_MMAP_FILE )\n #include <sys/mman.h>\n #define  BAD_ADDR ((void*)-1)\n@@ -49,12 +51,6 @@ static const char z_std_preamble[] =\n     This had to be done to correct non-standard usages in the\\n\\\n     original, manufacturer supplied header file.  */\\n\\n\";\n \n-/*  Working environment strings.  Essentially, invocation 'options'.  */\n-\n-#define _ENV_(v,m,n,t)   tCC* v = NULL;\n-ENV_TABLE\n-#undef _ENV_\n-\n int find_base_len = 0;\n \n typedef enum {\n@@ -214,18 +210,6 @@ do_version (void)\n void\n initialize ( int argc, char** argv )\n {\n-  static const char var_not_found[] =\n-#ifndef __STDC__\n-    \"fixincl ERROR:  %s environment variable not defined\\n\"\n-#else\n-    \"fixincl ERROR:  %s environment variable not defined\\n\"\n-    \"each of these must be defined:\\n\"\n-# define _ENV_(vv,mm,nn,tt) \"\\t\" nn \"  - \" tt \"\\n\"\n-  ENV_TABLE\n-# undef _ENV_\n-#endif\n-    ;\n-\n   xmalloc_set_program_name (argv[0]);\n \n   switch (argc)\n@@ -255,14 +239,7 @@ initialize ( int argc, char** argv )\n   signal (SIGCHLD, SIG_DFL);\n #endif\n \n-#define _ENV_(v,m,n,t)   { tSCC var[] = n;  \\\n-  v = getenv (var); if (m && (v == NULL)) { \\\n-  fprintf (stderr, var_not_found, var);     \\\n-  exit (EXIT_FAILURE); } }\n-\n-ENV_TABLE\n-\n-#undef _ENV_\n+  initialize_opts ();\n \n   if (ISDIGIT ( *pz_verbose ))\n     verbose_level = (te_verbose)atoi( pz_verbose );\n@@ -877,32 +854,41 @@ fix_with_system (tFixDesc* p_fixd,\n   char*  pz_cmd;\n   char*  pz_scan;\n   size_t argsize;\n+  int i;\n+  tSCC z_applyfix_prog[2] = {\n+    \"/../fixincludes/applyfix\" EXE_EXT,\n+    \"/../../fixincludes/applyfix\" EXE_EXT };\n \n   if (p_fixd->fd_flags & FD_SUBROUTINE)\n-    {\n-      tSCC z_applyfix_prog[] = \"/fixinc/applyfix\";\n-\n-      argsize = 32\n-              + strlen( pz_orig_dir )\n-              + sizeof( z_applyfix_prog )\n-              + strlen( pz_fix_file )\n-              + strlen( pz_file_source )\n-              + strlen( pz_temp_file );\n-\n-      pz_cmd = xmalloc (argsize);\n-\n-      strcpy( pz_cmd, pz_orig_dir );\n-      pz_scan = pz_cmd + strlen( pz_orig_dir );\n-      strcpy( pz_scan, z_applyfix_prog );\n-      pz_scan += sizeof( z_applyfix_prog ) - 1;\n-      *(pz_scan++) = ' ';\n-\n-      /*\n-       *  Now add the fix number and file names that may be needed\n-       */\n-      sprintf (pz_scan, \"%ld \\'%s\\' \\'%s\\' \\'%s\\'\", p_fixd - fixDescList,\n-\t       pz_fix_file, pz_file_source, pz_temp_file);\n-    }\n+    for (i = 0; i < 2; i++)\n+      { \n+\tstruct stat buf;\n+\n+        argsize = 32\n+                + strlen( pz_orig_dir )\n+                + sizeof( z_applyfix_prog )\n+                + strlen( pz_fix_file )\n+                + strlen( pz_file_source )\n+                + strlen( pz_temp_file );\n+\n+        pz_cmd = xmalloc (argsize);\n+\n+        strcpy( pz_cmd, pz_orig_dir );\n+        pz_scan = pz_cmd + strlen( pz_orig_dir );\n+        strcpy( pz_scan, z_applyfix_prog );\n+        pz_scan += sizeof( z_applyfix_prog ) - 1;\n+\n+\tif (stat (pz_scan, &buf) != -1)\n+\t  {\n+            *(pz_scan++) = ' ';\n+            /*\n+             *  Now add the fix number and file names that may be needed\n+             */\n+            sprintf (pz_scan, \"%ld \\'%s\\' \\'%s\\' \\'%s\\'\", p_fixd - fixDescList,\n+\t             pz_fix_file, pz_file_source, pz_temp_file);\n+\t    break;\n+\t  }\n+      }\n   else /* NOT an \"internal\" fix: */\n     {\n       size_t parg_size;"}, {"sha": "e56328b162191582690a9712fee7fd5c60f49f8b", "filename": "fixincludes/fixlib.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad643a75f71cefbfe50788933c5c847211a09fe4/fixincludes%2Ffixlib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad643a75f71cefbfe50788933c5c847211a09fe4/fixincludes%2Ffixlib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixlib.c?ref=ad643a75f71cefbfe50788933c5c847211a09fe4", "patch": "@@ -3,7 +3,7 @@\n    files which are fixed to work correctly with ANSI C and placed in a\n    directory that GCC will search.\n \n-   Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001, 2004 Free Software Foundation, Inc.\n \n This file is part of GCC.\n "}, {"sha": "0ceb60b76268f97681c16b068c72912cc9c83980", "filename": "fixincludes/fixlib.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad643a75f71cefbfe50788933c5c847211a09fe4/fixincludes%2Ffixlib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad643a75f71cefbfe50788933c5c847211a09fe4/fixincludes%2Ffixlib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixlib.h?ref=ad643a75f71cefbfe50788933c5c847211a09fe4", "patch": "@@ -224,4 +224,6 @@ char*  make_raw_shell_str ( char* pz_d, tCC* pz_s, size_t smax );\n #endif\n \n t_bool mn_get_regexps ( regex_t** label_re, regex_t** name_re, tCC *who );\n+\n+void   initialize_opts ( void );\n #endif /* ! GCC_FIXLIB_H */"}, {"sha": "55a85e9b6f46303c25a9df739dbbeb106e114c19", "filename": "fixincludes/fixopts.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad643a75f71cefbfe50788933c5c847211a09fe4/fixincludes%2Ffixopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad643a75f71cefbfe50788933c5c847211a09fe4/fixincludes%2Ffixopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixopts.c?ref=ad643a75f71cefbfe50788933c5c847211a09fe4", "patch": "@@ -0,0 +1,51 @@\n+/* Handle options that are passed from environment variables.\n+\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#include \"fixlib.h\"\n+\n+#define _ENV_(v,m,n,t)   tCC* v = NULL;\n+ENV_TABLE\n+#undef _ENV_\n+\n+void\n+initialize_opts ()\n+{\n+  static const char var_not_found[] =\n+#ifndef __STDC__\n+    \"fixincl ERROR:  %s environment variable not defined\\n\"\n+#else\n+    \"fixincl ERROR:  %s environment variable not defined\\n\"\n+    \"each of these must be defined:\\n\"\n+# define _ENV_(vv,mm,nn,tt) \"\\t\" nn \"  - \" tt \"\\n\"\n+  ENV_TABLE\n+# undef _ENV_\n+#endif\n+    ;\n+\n+#define _ENV_(v,m,n,t)   { tSCC var[] = n;  \\\n+  v = getenv (var); if (m && (v == NULL)) { \\\n+  fprintf (stderr, var_not_found, var);     \\\n+  exit (EXIT_FAILURE); } }\n+\n+ENV_TABLE\n+\n+#undef _ENV_\n+}"}]}