{"sha": "d95188571bdc0356d993cfff890f017afbc4a7c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDk1MTg4NTcxYmRjMDM1NmQ5OTNjZmZmODkwZjAxN2FmYmM0YTdjNw==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1996-01-07T22:14:58Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1996-01-07T22:14:58Z"}, "message": "Fix recogniztion of import libraries under AIX\n\nFrom-SVN: r10952", "tree": {"sha": "2ba9d9a654d34b6beabf3ce63ccc6982f55d3bc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ba9d9a654d34b6beabf3ce63ccc6982f55d3bc7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d95188571bdc0356d993cfff890f017afbc4a7c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d95188571bdc0356d993cfff890f017afbc4a7c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d95188571bdc0356d993cfff890f017afbc4a7c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d95188571bdc0356d993cfff890f017afbc4a7c7/comments", "author": null, "committer": null, "parents": [{"sha": "a211c7b90679f64a73fc10b78a45ff7a64a044a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a211c7b90679f64a73fc10b78a45ff7a64a044a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a211c7b90679f64a73fc10b78a45ff7a64a044a1"}], "stats": {"total": 90, "additions": 48, "deletions": 42}, "files": [{"sha": "f2dd27e2e20f85de31d32347203989d177901043", "filename": "gcc/collect2.c", "status": "modified", "additions": 48, "deletions": 42, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d95188571bdc0356d993cfff890f017afbc4a7c7/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d95188571bdc0356d993cfff890f017afbc4a7c7/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=d95188571bdc0356d993cfff890f017afbc4a7c7", "patch": "@@ -2594,62 +2594,68 @@ scan_libraries (prog_name)\n     {\n       LDHDR ldh;\n       char *impbuf;\n-      int idx;\n+      int entry;\n+\n       FSEEK (ldptr, ldsh.s_scnptr, BEGINNING);\n-      FREAD (&ldh, sizeof ldh, 1, ldptr);\n+      FREAD (&ldh, sizeof (ldh), 1, ldptr);\n       /* read import library list */\n       impbuf = alloca (ldh.l_istlen);\n       FSEEK (ldptr, ldh.l_impoff + ldsh.s_scnptr, BEGINNING);\n       FREAD (impbuf, ldh.l_istlen, 1, ldptr);\n-      idx = strlen (impbuf) + 1;\n-      idx += strlen (impbuf+idx) + 1;\n+\n       if (debug)\n \tfprintf (stderr, \"LIBPATH=%s\\n\", impbuf);\n       prefix_from_string (impbuf, &libpath);\n-      while (idx < ldh.l_istlen)\n+\n+      /* skip LIBPATH and empty base and member fields */\n+      impbuf += strlen (impbuf) + 3;\n+      for (entry = 1; entry < ldh.l_nimpid; ++entry)\n \t{\n-\t  char *implib = impbuf + idx;\n+\t  char *impath = impbuf;\n+\t  char *implib = impath + strlen (impath) + 1;\n \t  char *impmem = implib + strlen (implib) + 1;\n-\t  char *soname = 0;\n+\t  char *soname = NULL;\n+\t  char *trial;\n \t  LDFILE *libptr = NULL;\n \t  struct prefix_list *pl;\n \t  ARCHDR ah;\n-\t  idx += strlen (implib) + 1;\n-\t  if (!implib[0])\n+\n+\t  impbuf = impmem + strlen (impmem) + 1;\n+\t  if (debug)\n+\t    fprintf (stderr, \"PATH+BASE=%s%s\\n\", impath, implib);\n+\t  /* Skip AIX kernel exports */\n+\t  if (*impath == '/' && *(impath+1) == '\\0'\n+\t      && strcmp (implib, \"unix\") == 0)\n \t    continue;\n-\t  idx += strlen (impmem) + 1;\n-\t  if (*implib == '/')\n+          trial = alloca (MAX (strlen (impath), libpath.max_len)\n+\t\t\t  + strlen (implib) + 1);\n+\t  if (*impath)\n \t    {\n-\t      if (access (soname, R_OK) == 0)\n-\t\tsoname = implib;\n+\t      strcpy (trial, impath);\n+\t      strcat (trial, implib);\n+\t      if (access (trial, R_OK) == 0)\n+\t\tsoname = trial;\n \t    }\n \t  else\n-\t    {\n-\t      char *temp = alloca (libpath.max_len + strlen (implib) + 1);\n-\t      for (pl = libpath.plist; pl; pl = pl->next)\n-\t\t{\n-\t\t  strcpy (temp, pl->prefix);\n-\t\t  strcat (temp, implib);\n-\t\t  if (access (temp, R_OK) == 0)\n-\t\t    {\n-\t\t      soname = temp;\n-\t\t      break;\n-\t\t    }\n-\t\t}\n-\t    }\n-\t  if (!soname)\n-\t    {\n-\t      fatal (\"%s: library not found\", implib);\n-\t      continue;\n-\t    }\n+\t    for (pl = libpath.plist; pl; pl = pl->next)\n+\t      {\n+\t\tstrcpy (trial, pl->prefix);\n+\t\tstrcat (trial, implib);\n+\t\tif (access (trial, R_OK) == 0)\n+\t\t  {\n+\t\t    soname = trial;\n+\t\t    break;\n+\t\t  }\n+\t      }\n+\n+\t  if (! soname)\n+\t    fatal (\"%s: library not found\", implib);\n \t  if (debug)\n-\t    {\n-\t      if (impmem[0])\n-\t\tfprintf (stderr, \"%s (%s)\\n\", soname, impmem);\n-\t      else\n-\t\tfprintf (stderr, \"%s\\n\", soname);\n-\t    }\n-\t  ah.ar_name[0] = 0;\n+\t    if (*impmem)\n+\t      fprintf (stderr, \"%s (%s)\\n\", soname, impmem);\n+\t    else\n+\t      fprintf (stderr, \"%s\\n\", soname);\n+\n \t  do\n \t    {\n \t      /* scan imported shared objects for GCC GLOBAL ctors */\n@@ -2659,7 +2665,7 @@ scan_libraries (prog_name)\n \t      if (TYPE (libptr) == ARTYPE)\n \t\t{\n \t\t  LDFILE *memptr;\n-\t\t  if (!impmem[0])\n+\t\t  if (! *impmem)\n \t\t    fatal (\"%s: no archive member specified\", soname);\n \t\t  ldahread (libptr, &ah);\n \t\t  if (strcmp (ah.ar_name, impmem))\n@@ -2676,12 +2682,12 @@ scan_libraries (prog_name)\n \t\t  if (!ldnshread (libptr, _LOADER, &soldsh))\n \t\t    fatal (\"%s: not an import library\", soname);\n \t\t  FSEEK (libptr, soldsh.s_scnptr, BEGINNING);\n-\t\t  if (FREAD (&soldh, sizeof soldh, 1, libptr) != 1)\n+\t\t  if (FREAD (&soldh, sizeof (soldh), 1, libptr) != 1)\n \t\t    fatal (\"%s: can't read loader section\", soname);\n \t\t  /*fprintf (stderr, \"\\tscanning %s\\n\", soname);*/\n \t\t  symcnt = soldh.l_nsyms;\n-\t\t  lsyms = (LDSYM*) alloca (symcnt * sizeof *lsyms);\n-\t\t  symcnt = FREAD (lsyms, sizeof *lsyms, symcnt, libptr);\n+\t\t  lsyms = (LDSYM*) alloca (symcnt * sizeof (*lsyms));\n+\t\t  symcnt = FREAD (lsyms, sizeof (*lsyms), symcnt, libptr);\n \t\t  ldstrings = alloca (soldh.l_stlen);\n \t\t  FSEEK (libptr, soldsh.s_scnptr+soldh.l_stoff, BEGINNING);\n \t\t  FREAD (ldstrings, soldh.l_stlen, 1, libptr);"}]}