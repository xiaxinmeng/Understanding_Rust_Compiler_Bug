{"sha": "70aec3a1b8efd09a951e4d52f396345a740879d3", "node_id": "C_kwDOANBUbNoAKDcwYWVjM2ExYjhlZmQwOWE5NTFlNGQ1MmYzOTYzNDVhNzQwODc5ZDM", "commit": {"author": {"name": "Gary Dismukes", "email": "dismukes@adacore.com", "date": "2021-09-01T23:58:14Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-10-04T08:45:11Z"}, "message": "[Ada] Completion of support for AI12-0409 (attribute Preelaborable_Initialization)\n\ngcc/ada/\n\n\t* sem_ch7.adb (Analyze_Package_Specification): For types marked\n\tas Must_Have_Preelab_Init, we now check for the presence of a\n\tPreelaborable_Initialization aspect on the type, and pass the\n\taspect's expression (if any) on the call to\n\tHas_Preelaborable_Initialization (or pass Empty if the type has\n\tno such aspect or the aspect has no associated expression).\n\t* sem_util.ads (Has_Preelaborable_Initialization): Change\n\tBoolean formal parameter Formal_Types_Have_Preelab_Init to\n\tinstead be a formal of type Node_Id (named Preelab_Init_Expr),\n\tto allow passing an expression that may be a conjunction of\n\tPreelaborable_Initialization aspects. Revise spec comment\n\taccordingly (and remove ??? comment).\n\t* sem_util.adb (Type_Named_In_Preelab_Init_Expression): New\n\tnested function with a result indicating whether a given type is\n\tnamed as the prefix of a Preelaborable_Initialization attribute\n\tin the expression of a corresponding P_I aspect.\n\t(Has_Preelaborable_Initialization): For generic formal derived\n\tand private types, test whether the type is named in the\n\texpression Preelab_Init_Expr (by calling\n\tType_Named_In_Preelab_Init_Expression), and if so, treat the\n\tformal type as having preelaborable initialization (returning\n\tTrue).\n\t* libgnat/a-cobove.ads (Vector): Replace pragma\n\tPreelaborable_Initialization with the aspect, specifying its\n\tvalue as Element_Type'Preelaborable_Initialization.\n\t(Cursor): Replace pragma P_I with the aspect (defaulting to\n\tTrue).\n\t* libgnat/a-cbdlli.ads (List): Replace pragma\n\tPreelaborable_Initialization with the aspect, specifying its\n\tvalue as Element_Type'Preelaborable_Initialization.\n\t(Cursor): Replace pragma P_I with the aspect (defaulting to\n\tTrue).\n\t* libgnat/a-cbhama.ads (Map): Replace pragma\n\tPreelaborable_Initialization with the aspect, specifying its\n\tvalue as (Element_Type'Preelaborable_Initialization and\n\tKey_Type'Preelaborable_Initialization).\n\t(Cursor): Replace pragma P_I with the aspect (defaulting to\n\tTrue).\n\t* libgnat/a-cborma.ads (Map): Replace pragma\n\tPreelaborable_Initialization with the aspect, specifying its\n\tvalue as (Element_Type'Preelaborable_Initialization and\n\tKey_Type'Preelaborable_Initialization).\n\t(Cursor): Replace pragma P_I with the aspect (defaulting to\n\tTrue).\n\t* libgnat/a-cbhase.ads (Set): Replace pragma\n\tPreelaborable_Initialization with the aspect, specifying its\n\tvalue as Element_Type'Preelaborable_Initialization.\n\t(Cursor): Replace pragma P_I with the aspect (defaulting to\n\tTrue).\n\t* libgnat/a-cborse.ads (Set): Replace pragma\n\tPreelaborable_Initialization with the aspect, specifying its\n\tvalue as Element_Type'Preelaborable_Initialization.\n\t(Cursor): Replace pragma P_I with the aspect (defaulting to\n\tTrue).\n\t* libgnat/a-cbmutr.ads (Tree): Replace pragma\n\tPreelaborable_Initialization with the aspect, specifying its\n\tvalue as Element_Type'Preelaborable_Initialization.\n\t(Cursor): Replace pragma P_I with the aspect (defaulting to\n\tTrue).\n\t* libgnat/a-coboho.ads (Holder): Replace pragma\n\tPreelaborable_Initialization with the aspect, specifying its\n\tvalue as Element_Type'Preelaborable_Initialization.\n\t(Cursor): Replace pragma P_I with the aspect (defaulting to\n\tTrue).", "tree": {"sha": "2dec51ef1ec0b7acd1175728e9707c96cdd4a4fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2dec51ef1ec0b7acd1175728e9707c96cdd4a4fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70aec3a1b8efd09a951e4d52f396345a740879d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70aec3a1b8efd09a951e4d52f396345a740879d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70aec3a1b8efd09a951e4d52f396345a740879d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70aec3a1b8efd09a951e4d52f396345a740879d3/comments", "author": {"login": "dismukes", "id": 50880541, "node_id": "MDQ6VXNlcjUwODgwNTQx", "avatar_url": "https://avatars.githubusercontent.com/u/50880541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dismukes", "html_url": "https://github.com/dismukes", "followers_url": "https://api.github.com/users/dismukes/followers", "following_url": "https://api.github.com/users/dismukes/following{/other_user}", "gists_url": "https://api.github.com/users/dismukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dismukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dismukes/subscriptions", "organizations_url": "https://api.github.com/users/dismukes/orgs", "repos_url": "https://api.github.com/users/dismukes/repos", "events_url": "https://api.github.com/users/dismukes/events{/privacy}", "received_events_url": "https://api.github.com/users/dismukes/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5740f2b7285f950e68d7790c37e28a5b768b4e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5740f2b7285f950e68d7790c37e28a5b768b4e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5740f2b7285f950e68d7790c37e28a5b768b4e8"}], "stats": {"total": 193, "additions": 130, "deletions": 63}, "files": [{"sha": "f4086ea1957e48127ec36fa7192fc33d5b350f4a", "filename": "gcc/ada/libgnat/a-cbdlli.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70aec3a1b8efd09a951e4d52f396345a740879d3/gcc%2Fada%2Flibgnat%2Fa-cbdlli.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70aec3a1b8efd09a951e4d52f396345a740879d3/gcc%2Fada%2Flibgnat%2Fa-cbdlli.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cbdlli.ads?ref=70aec3a1b8efd09a951e4d52f396345a740879d3", "patch": "@@ -57,11 +57,11 @@ is\n       Default_Iterator  => Iterate,\n       Iterator_Element  => Element_Type,\n       Aggregate         => (Empty        => Empty,\n-                            Add_Unnamed  => Append);\n-   pragma Preelaborable_Initialization (List);\n+                            Add_Unnamed  => Append),\n+      Preelaborable_Initialization\n+                        => Element_Type'Preelaborable_Initialization;\n \n-   type Cursor is private;\n-   pragma Preelaborable_Initialization (Cursor);\n+   type Cursor is private with Preelaborable_Initialization;\n \n    Empty_List : constant List;\n "}, {"sha": "cdd41350cd8f86913583021268116a3ebe1c877e", "filename": "gcc/ada/libgnat/a-cbhama.ads", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70aec3a1b8efd09a951e4d52f396345a740879d3/gcc%2Fada%2Flibgnat%2Fa-cbhama.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70aec3a1b8efd09a951e4d52f396345a740879d3/gcc%2Fada%2Flibgnat%2Fa-cbhama.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cbhama.ads?ref=70aec3a1b8efd09a951e4d52f396345a740879d3", "patch": "@@ -59,12 +59,13 @@ is\n       Default_Iterator  => Iterate,\n       Iterator_Element  => Element_Type,\n       Aggregate         => (Empty     => Empty,\n-                            Add_Named => Insert);\n+                            Add_Named => Insert),\n+      Preelaborable_Initialization\n+                        => Element_Type'Preelaborable_Initialization\n+                             and\n+                           Key_Type'Preelaborable_Initialization;\n \n-   pragma Preelaborable_Initialization (Map);\n-\n-   type Cursor is private;\n-   pragma Preelaborable_Initialization (Cursor);\n+   type Cursor is private with Preelaborable_Initialization;\n \n    Empty_Map : constant Map;\n    --  Map objects declared without an initialization expression are"}, {"sha": "78b31cf748e10f0acfce73464b2881416aa5235e", "filename": "gcc/ada/libgnat/a-cbhase.ads", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70aec3a1b8efd09a951e4d52f396345a740879d3/gcc%2Fada%2Flibgnat%2Fa-cbhase.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70aec3a1b8efd09a951e4d52f396345a740879d3/gcc%2Fada%2Flibgnat%2Fa-cbhase.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cbhase.ads?ref=70aec3a1b8efd09a951e4d52f396345a740879d3", "patch": "@@ -61,12 +61,11 @@ is\n           Default_Iterator  => Iterate,\n           Iterator_Element  => Element_Type,\n           Aggregate         => (Empty       => Empty,\n-                                Add_Unnamed => Include);\n+                                Add_Unnamed => Include),\n+          Preelaborable_Initialization\n+                            => Element_Type'Preelaborable_Initialization;\n \n-   pragma Preelaborable_Initialization (Set);\n-\n-   type Cursor is private;\n-   pragma Preelaborable_Initialization (Cursor);\n+   type Cursor is private with Preelaborable_Initialization;\n \n    Empty_Set : constant Set;\n    --  Set objects declared without an initialization expression are"}, {"sha": "37120396d71c91480a7fee4c6f95a84b7dc4a968", "filename": "gcc/ada/libgnat/a-cbmutr.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70aec3a1b8efd09a951e4d52f396345a740879d3/gcc%2Fada%2Flibgnat%2Fa-cbmutr.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70aec3a1b8efd09a951e4d52f396345a740879d3/gcc%2Fada%2Flibgnat%2Fa-cbmutr.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cbmutr.ads?ref=70aec3a1b8efd09a951e4d52f396345a740879d3", "patch": "@@ -53,11 +53,11 @@ is\n      with Constant_Indexing => Constant_Reference,\n           Variable_Indexing => Reference,\n           Default_Iterator  => Iterate,\n-          Iterator_Element  => Element_Type;\n-   pragma Preelaborable_Initialization (Tree);\n+          Iterator_Element  => Element_Type,\n+          Preelaborable_Initialization\n+                            => Element_Type'Preelaborable_Initialization;\n \n-   type Cursor is private;\n-   pragma Preelaborable_Initialization (Cursor);\n+   type Cursor is private with Preelaborable_Initialization;\n \n    Empty_Tree : constant Tree;\n "}, {"sha": "9d40a517d285b528cfa977e756a3d5e1911e9857", "filename": "gcc/ada/libgnat/a-cborma.ads", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70aec3a1b8efd09a951e4d52f396345a740879d3/gcc%2Fada%2Flibgnat%2Fa-cborma.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70aec3a1b8efd09a951e4d52f396345a740879d3/gcc%2Fada%2Flibgnat%2Fa-cborma.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cborma.ads?ref=70aec3a1b8efd09a951e4d52f396345a740879d3", "patch": "@@ -60,12 +60,13 @@ is\n       Default_Iterator  => Iterate,\n       Iterator_Element  => Element_Type,\n       Aggregate         => (Empty     => Empty,\n-                            Add_Named => Insert);\n+                            Add_Named => Insert),\n+      Preelaborable_Initialization\n+                        => Element_Type'Preelaborable_Initialization\n+                             and\n+                           Key_Type'Preelaborable_Initialization;\n \n-   pragma Preelaborable_Initialization (Map);\n-\n-   type Cursor is private;\n-   pragma Preelaborable_Initialization (Cursor);\n+   type Cursor is private with Preelaborable_Initialization;\n \n    Empty_Map : constant Map;\n "}, {"sha": "31b8b91fa028e3a4a82f7c84d56ed5204448e95b", "filename": "gcc/ada/libgnat/a-cborse.ads", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70aec3a1b8efd09a951e4d52f396345a740879d3/gcc%2Fada%2Flibgnat%2Fa-cborse.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70aec3a1b8efd09a951e4d52f396345a740879d3/gcc%2Fada%2Flibgnat%2Fa-cborse.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cborse.ads?ref=70aec3a1b8efd09a951e4d52f396345a740879d3", "patch": "@@ -59,12 +59,11 @@ is\n         Default_Iterator  => Iterate,\n         Iterator_Element  => Element_Type,\n         Aggregate         => (Empty       => Empty,\n-                              Add_Unnamed => Include);\n+                              Add_Unnamed => Include),\n+        Preelaborable_Initialization\n+                          => Element_Type'Preelaborable_Initialization;\n \n-   pragma Preelaborable_Initialization (Set);\n-\n-   type Cursor is private;\n-   pragma Preelaborable_Initialization (Cursor);\n+   type Cursor is private with Preelaborable_Initialization;\n \n    Empty_Set : constant Set;\n "}, {"sha": "44269f0ad7d30fe5aef6b117227c62d362fbb733", "filename": "gcc/ada/libgnat/a-coboho.ads", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70aec3a1b8efd09a951e4d52f396345a740879d3/gcc%2Fada%2Flibgnat%2Fa-coboho.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70aec3a1b8efd09a951e4d52f396345a740879d3/gcc%2Fada%2Flibgnat%2Fa-coboho.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-coboho.ads?ref=70aec3a1b8efd09a951e4d52f396345a740879d3", "patch": "@@ -70,7 +70,9 @@ package Ada.Containers.Bounded_Holders is\n    --  System.Storage_Unit; e.g. creating Holders from 5-bit objects won't\n    --  work.\n \n-   type Holder is private;\n+   type Holder is private\n+     with Preelaborable_Initialization\n+            => Element_Type'Preelaborable_Initialization;\n \n    function \"=\" (Left, Right : Holder) return Boolean;\n "}, {"sha": "5f3e1a776f1c29fcac3f5ac70cdaa012f9fc2ea7", "filename": "gcc/ada/libgnat/a-cobove.ads", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70aec3a1b8efd09a951e4d52f396345a740879d3/gcc%2Fada%2Flibgnat%2Fa-cobove.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70aec3a1b8efd09a951e4d52f396345a740879d3/gcc%2Fada%2Flibgnat%2Fa-cobove.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cobove.ads?ref=70aec3a1b8efd09a951e4d52f396345a740879d3", "patch": "@@ -63,12 +63,11 @@ package Ada.Containers.Bounded_Vectors is\n       Aggregate         => (Empty          => Empty,\n                             Add_Unnamed    => Append,\n                             New_Indexed    => New_Vector,\n-                            Assign_Indexed => Replace_Element);\n+                            Assign_Indexed => Replace_Element),\n+      Preelaborable_Initialization\n+                        => Element_Type'Preelaborable_Initialization;\n \n-   pragma Preelaborable_Initialization (Vector);\n-\n-   type Cursor is private;\n-   pragma Preelaborable_Initialization (Cursor);\n+   type Cursor is private with Preelaborable_Initialization;\n \n    Empty_Vector : constant Vector;\n "}, {"sha": "3852a9ae9f72a106bfed2b62409c4077ba0cfa75", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 28, "deletions": 13, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70aec3a1b8efd09a951e4d52f396345a740879d3/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70aec3a1b8efd09a951e4d52f396345a740879d3/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=70aec3a1b8efd09a951e4d52f396345a740879d3", "patch": "@@ -1768,19 +1768,34 @@ package body Sem_Ch7 is\n          end if;\n \n          --  Check preelaborable initialization for full type completing a\n-         --  private type when aspect Preelaborable_Initialization is True.\n-         --  We pass True for the parameter Formal_Types_Have_Preelab_Init\n-         --  to take into account the rule that presumes that subcomponents\n-         --  of generic formal types mentioned in the type's P_I aspect have\n-         --  preelaborable initialization (see RM 10.2.1(11.8/5)).\n-\n-         if Is_Type (E)\n-           and then Must_Have_Preelab_Init (E)\n-           and then not Has_Preelaborable_Initialization\n-                          (E, Formal_Types_Have_Preelab_Init => True)\n-         then\n-            Error_Msg_N\n-              (\"full view of & does not have preelaborable initialization\", E);\n+         --  private type when aspect Preelaborable_Initialization is True\n+         --  or is specified by Preelaborable_Initialization attributes\n+         --  (in the case of a private type in a generic unit). We pass\n+         --  the expression of the aspect (when present) to the parameter\n+         --  Preelab_Init_Expr to take into account the rule that presumes\n+         --  that subcomponents of generic formal types mentioned in the\n+         --  type's P_I aspect have preelaborable initialization (see\n+         --  AI12-0409 and RM 10.2.1(11.8/5)).\n+\n+         if Is_Type (E) and then Must_Have_Preelab_Init (E) then\n+            declare\n+               PI_Aspect : constant Node_Id :=\n+                             Find_Aspect\n+                               (E, Aspect_Preelaborable_Initialization);\n+               PI_Expr   : Node_Id := Empty;\n+            begin\n+               if Present (PI_Aspect) then\n+                  PI_Expr := Expression (PI_Aspect);\n+               end if;\n+\n+               if not Has_Preelaborable_Initialization\n+                        (E, Preelab_Init_Expr => PI_Expr)\n+               then\n+                  Error_Msg_N\n+                    (\"full view of & does not have \"\n+                     & \"preelaborable initialization\", E);\n+               end if;\n+            end;\n          end if;\n \n          Next_Entity (E);"}, {"sha": "e5f3589ebd4d5ccacc8c70f2287365e25652f8b9", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 60, "deletions": 7, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70aec3a1b8efd09a951e4d52f396345a740879d3/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70aec3a1b8efd09a951e4d52f396345a740879d3/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=70aec3a1b8efd09a951e4d52f396345a740879d3", "patch": "@@ -13331,15 +13331,21 @@ package body Sem_Util is\n    --------------------------------------\n \n    function Has_Preelaborable_Initialization\n-     (E                              : Entity_Id;\n-      Formal_Types_Have_Preelab_Init : Boolean := False) return Boolean\n+     (E                 : Entity_Id;\n+      Preelab_Init_Expr : Node_Id := Empty) return Boolean\n    is\n       Has_PE : Boolean;\n \n       procedure Check_Components (E : Entity_Id);\n       --  Check component/discriminant chain, sets Has_PE False if a component\n       --  or discriminant does not meet the preelaborable initialization rules.\n \n+      function Type_Named_In_Preelab_Init_Expression\n+        (Typ  : Entity_Id;\n+         Expr : Node_Id) return Boolean;\n+      --  Returns True iff Typ'Preelaborable_Initialization occurs in Expr\n+      --  (where Expr may be a conjunction of one or more P_I attributes).\n+\n       ----------------------\n       -- Check_Components --\n       ----------------------\n@@ -13388,7 +13394,7 @@ package body Sem_Util is\n \n             if No (Exp) then\n                if not Has_Preelaborable_Initialization\n-                        (Etype (Ent), Formal_Types_Have_Preelab_Init)\n+                        (Etype (Ent), Preelab_Init_Expr)\n                then\n                   Has_PE := False;\n                   exit;\n@@ -13406,6 +13412,44 @@ package body Sem_Util is\n          end loop;\n       end Check_Components;\n \n+      --------------------------------------\n+      -- Type_Named_In_Preelab_Expression --\n+      --------------------------------------\n+\n+      function Type_Named_In_Preelab_Init_Expression\n+        (Typ  : Entity_Id;\n+         Expr : Node_Id) return Boolean\n+      is\n+      begin\n+         --  Return True if Expr is a Preelaborable_Initialization attribute\n+         --  and the prefix is a subtype that has the same type as Typ.\n+\n+         if Nkind (Expr) = N_Attribute_Reference\n+           and then Attribute_Name (Expr) = Name_Preelaborable_Initialization\n+           and then Is_Entity_Name (Prefix (Expr))\n+           and then Base_Type (Entity (Prefix (Expr))) = Base_Type (Typ)\n+         then\n+            return True;\n+\n+         --  In the case where Expr is a conjunction, test whether either\n+         --  operand is a Preelaborable_Initialization attribute whose prefix\n+         --  has the same type as Typ, and return True if so.\n+\n+         elsif Nkind (Expr) = N_Op_And\n+           and then\n+            (Type_Named_In_Preelab_Init_Expression (Typ, Left_Opnd (Expr))\n+              or else\n+             Type_Named_In_Preelab_Init_Expression (Typ, Right_Opnd (Expr)))\n+         then\n+            return True;\n+\n+         --  Typ not named in a Preelaborable_Initialization attribute of Expr\n+\n+         else\n+            return False;\n+         end if;\n+      end Type_Named_In_Preelab_Init_Expression;\n+\n    --  Start of processing for Has_Preelaborable_Initialization\n \n    begin\n@@ -13436,7 +13480,7 @@ package body Sem_Util is\n \n       elsif Is_Array_Type (E) then\n          Has_PE := Has_Preelaborable_Initialization\n-                     (Component_Type (E), Formal_Types_Have_Preelab_Init);\n+                     (Component_Type (E), Preelab_Init_Expr);\n \n       --  A derived type has preelaborable initialization if its parent type\n       --  has preelaborable initialization and (in the case of a derived record\n@@ -13451,7 +13495,11 @@ package body Sem_Util is\n          --  of a generic formal derived type has preelaborable initialization.\n          --  (See comment on spec of Has_Preelaborable_Initialization.)\n \n-         if Is_Generic_Type (E) and then Formal_Types_Have_Preelab_Init then\n+         if Is_Generic_Type (E)\n+           and then Present (Preelab_Init_Expr)\n+           and then\n+             Type_Named_In_Preelab_Init_Expression (E, Preelab_Init_Expr)\n+         then\n             return True;\n          end if;\n \n@@ -13464,7 +13512,8 @@ package body Sem_Util is\n \n          --  First check whether ancestor type has preelaborable initialization\n \n-         Has_PE := Has_Preelaborable_Initialization (Etype (Base_Type (E)));\n+         Has_PE := Has_Preelaborable_Initialization\n+                     (Etype (Base_Type (E)), Preelab_Init_Expr);\n \n          --  If OK, check extension components (if any)\n \n@@ -13495,7 +13544,11 @@ package body Sem_Util is\n          --  of a generic formal private type has preelaborable initialization.\n          --  (See comment on spec of Has_Preelaborable_Initialization.)\n \n-         if Is_Generic_Type (E) and then Formal_Types_Have_Preelab_Init then\n+         if Is_Generic_Type (E)\n+           and then Present (Preelab_Init_Expr)\n+           and then\n+             Type_Named_In_Preelab_Init_Expression (E, Preelab_Init_Expr)\n+         then\n             return True;\n          else\n             return False;"}, {"sha": "63f1d6bb10ee0523da49cfee1241703d04f1aaff", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70aec3a1b8efd09a951e4d52f396345a740879d3/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70aec3a1b8efd09a951e4d52f396345a740879d3/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=70aec3a1b8efd09a951e4d52f396345a740879d3", "patch": "@@ -1526,17 +1526,15 @@ package Sem_Util is\n    --  initialization.\n \n    function Has_Preelaborable_Initialization\n-     (E                              : Entity_Id;\n-      Formal_Types_Have_Preelab_Init : Boolean := False) return Boolean;\n+     (E                 : Entity_Id;\n+      Preelab_Init_Expr : Node_Id := Empty) return Boolean;\n    --  Return True iff type E has preelaborable initialization as defined in\n    --  Ada 2005 (see AI-161 for details of the definition of this attribute).\n-   --  If Formal_Types_Have_Preelab_Init is True, indicates that the function\n-   --  should presume that for any subcomponents of formal private or derived\n-   --  types, the types have preelaborable initialization (RM 10.2.1(11.8/5)).\n-   --  NOTE: The treatment of subcomponents of formal types should only apply\n-   --  for types actually specified in the P_I aspect of the outer type, but\n-   --  for now we take a more liberal interpretation. This needs addressing,\n-   --  perhaps by passing the outermost type instead of the simple flag. ???\n+   --  If Preelab_Init_Expr is present, indicates that the function should\n+   --  presume that for any subcomponent of E that is of a formal private or\n+   --  derived type that is referenced by a Preelaborable_Initialization\n+   --  attribute within the expression Preelab_Init_Expr, the formal type has\n+   --  preelaborable initialization (RM 10.2.1(11.8/5) and AI12-0409).\n \n    function Has_Prefix (N : Node_Id) return Boolean;\n    --  Return True if N has attribute Prefix"}]}