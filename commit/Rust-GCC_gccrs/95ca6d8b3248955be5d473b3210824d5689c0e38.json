{"sha": "95ca6d8b3248955be5d473b3210824d5689c0e38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTVjYTZkOGIzMjQ4OTU1YmU1ZDQ3M2IzMjEwODI0ZDU2ODljMGUzOA==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2003-06-09T19:54:26Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2003-06-09T19:54:26Z"}, "message": "Make-lang.in (JAVA_OBJS, [...]): Update.\n\njava:\n\t* Make-lang.in (JAVA_OBJS, java/lang.o): Update.\n\t(java/j-options.c, java/j-options.h): New.\n\t* java-tree.h (resource_name, compile_resource_file,\n\tcompile_resource_data): Constify.\n\t* jcf-write.c (jcf_write_base_directory): Similarly.\n\t* jcf.h (jcf_write_base_directory): Similarly.\n\t* lang.c: Include j-options.h.\n\t(cl_options_count, cl_options, string_option, java_decode_option,\n\tlang_f_options, lang_W_options, LANG_HOOKS_DECODE_OPTION,\n\tprocess_option_with_no): Remove.\n\t(resource_name): Constify.\n\t(LANG_HOOKS_HANDLE_OPTION): Override.\n\t(java_handle_option): New.\n\t(java_init): Don't call jcf_path_init.\n\t(java_init_options): Call jcf_path_init.\n\t* lang.opt: New.\n\t* resource.c (compile_resource_data, compile_resource_file): Constify.\n\nFrom-SVN: r67673", "tree": {"sha": "1294c96ac7dbea07618cad9609fe95009462e108", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1294c96ac7dbea07618cad9609fe95009462e108"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95ca6d8b3248955be5d473b3210824d5689c0e38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95ca6d8b3248955be5d473b3210824d5689c0e38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95ca6d8b3248955be5d473b3210824d5689c0e38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95ca6d8b3248955be5d473b3210824d5689c0e38/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "00051260e05e8f7108c0fb5d1d30ed24f25a1829", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00051260e05e8f7108c0fb5d1d30ed24f25a1829", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00051260e05e8f7108c0fb5d1d30ed24f25a1829"}], "stats": {"total": 606, "additions": 365, "deletions": 241}, "files": [{"sha": "875fc5388ba7a9068ffbee06506902b17563af45", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95ca6d8b3248955be5d473b3210824d5689c0e38/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95ca6d8b3248955be5d473b3210824d5689c0e38/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=95ca6d8b3248955be5d473b3210824d5689c0e38", "patch": "@@ -1,3 +1,23 @@\n+2003-06-09  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* Make-lang.in (JAVA_OBJS, java/lang.o): Update.\n+\t(java/j-options.c, java/j-options.h): New.\n+\t* java-tree.h (resource_name, compile_resource_file,\n+\tcompile_resource_data): Constify.\n+\t* jcf-write.c (jcf_write_base_directory): Similarly.\n+\t* jcf.h (jcf_write_base_directory): Similarly.\n+\t* lang.c: Include j-options.h.\n+\t(cl_options_count, cl_options, string_option, java_decode_option,\n+\tlang_f_options, lang_W_options, LANG_HOOKS_DECODE_OPTION,\n+\tprocess_option_with_no): Remove.\n+\t(resource_name): Constify.\n+\t(LANG_HOOKS_HANDLE_OPTION): Override.\n+\t(java_handle_option): New.\n+\t(java_init): Don't call jcf_path_init.\n+\t(java_init_options): Call jcf_path_init.\n+\t* lang.opt: New.\n+\t* resource.c (compile_resource_data, compile_resource_file): Constify.\n+\n 2003-06-09  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* java-tree.h (DECL_FUNCTION_LAST_LINE): New."}, {"sha": "18264a6c510a0768255bab45d6dd97ddc7dd0aba", "filename": "gcc/java/Make-lang.in", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95ca6d8b3248955be5d473b3210824d5689c0e38/gcc%2Fjava%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95ca6d8b3248955be5d473b3210824d5689c0e38/gcc%2Fjava%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FMake-lang.in?ref=95ca6d8b3248955be5d473b3210824d5689c0e38", "patch": "@@ -108,7 +108,7 @@ gt-java-builtins.h gtype-java.h gt-java-resource.h : s-gtype ; @true\n JAVA_OBJS = java/parse.o java/class.o java/decl.o java/expr.o \\\n   java/constants.o java/lang.o java/typeck.o java/except.o java/verify.o \\\n   java/zextract.o java/jcf-io.o java/jcf-parse.o java/mangle.o \\\n-  java/mangle_name.o java/builtins.o java/resource.o \\\n+  java/mangle_name.o java/builtins.o java/resource.o java/j-options.o \\\n   java/jcf-write.o java/buffer.o java/check-init.o java/jcf-depend.o \\\n   java/jcf-path.o java/xref.o java/boehm.o java/java-tree-inline.o mkdeps.o\n \n@@ -326,7 +326,7 @@ java/jvgenmain.o: java/jvgenmain.c $(CONFIG_H) $(JAVA_TREE_H) $(SYSTEM_H) \\\n   coretypes.h $(TM_H)\n java/lang.o: java/lang.c $(CONFIG_H) $(JAVA_TREE_H) java/jcf.h input.h \\\n   toplev.h $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(EXPR_H) diagnostic.h \\\n-  langhooks.h $(LANGHOOKS_DEF_H) gt-java-lang.h opts.h\n+  langhooks.h $(LANGHOOKS_DEF_H) gt-java-lang.h opts.h java/j-options.h\n java/mangle.o: java/mangle.c $(CONFIG_H) java/jcf.h $(JAVA_TREE_H) $(SYSTEM_H) \\\n   coretypes.h $(TM_H) toplev.h $(GGC_H) gt-java-mangle.h\n java/mangle_name.o: java/mangle_name.c $(CONFIG_H) java/jcf.h $(JAVA_TREE_H) \\\n@@ -347,6 +347,12 @@ java/xref.o: java/xref.c java/xref.h $(CONFIG_H) $(JAVA_TREE_H) toplev.h \\\n java/zextract.o: java/zextract.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n   java/zipfile.h\n \n+java/j-options.c: java/lang.opt opts.sh java/j-options.h\n+\n+java/j-options.h: java/lang.opt opts.sh\n+\tAWK=$(AWK) $(SHELL) $(srcdir)/opts.sh java/j-options.c \\\n+\t\tjava/j-options.h $(srcdir)/java/lang.opt\n+\n # jcf-io.o needs $(ZLIBINC) added to cflags.\n java/jcf-io.o: java/jcf-io.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n   $(JAVA_TREE_H)"}, {"sha": "f4764e7c3e88a54e70c922c7ededfb3ab1c057bb", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95ca6d8b3248955be5d473b3210824d5689c0e38/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95ca6d8b3248955be5d473b3210824d5689c0e38/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=95ca6d8b3248955be5d473b3210824d5689c0e38", "patch": "@@ -192,7 +192,7 @@ extern int flag_emit_xref;\n extern int do_not_fold;\n \n /* Resource name.  */\n-extern char * resource_name;\n+extern const char *resource_name;\n \n /* Turned to 1 if -Wall was encountered. See lang.c for their meanings.  */\n extern int flag_wall;\n@@ -1130,7 +1130,6 @@ extern tree build_dtable_decl (tree);\n extern tree build_internal_class_name (tree);\n extern tree build_constants_constructor (void);\n extern tree build_ref_from_constant_pool (int);\n-extern void compile_resource_file (char *, const char *);\n extern tree build_utf8_ref (tree);\n extern tree ident_subst (const char*, int, const char*, int, int, const char*);\n extern tree identifier_subst (const tree, const char *, int, int, const char *);\n@@ -1307,9 +1306,9 @@ struct rtx_def * java_expand_expr (tree, rtx, enum machine_mode, int);\n extern void java_inlining_merge_static_initializers (tree, void *);\n extern void java_inlining_map_static_initializers (tree, void *);\n \n-extern void compile_resource_data (char *name, const char *buffer, int length);\n+extern void compile_resource_data (const char *name, const char *buffer, int);\n+extern void compile_resource_file (const char *, const char *);\n extern void write_resource_constructor (void);\n-extern void compile_resource_file (char *name, const char *filename);\n extern void init_resource_processing (void);\n \n "}, {"sha": "36f009b35531f32b29c76ae7eb6408fbd0c68f32", "filename": "gcc/java/jcf-write.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95ca6d8b3248955be5d473b3210824d5689c0e38/gcc%2Fjava%2Fjcf-write.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95ca6d8b3248955be5d473b3210824d5689c0e38/gcc%2Fjava%2Fjcf-write.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-write.c?ref=95ca6d8b3248955be5d473b3210824d5689c0e38", "patch": "@@ -49,7 +49,7 @@ extern struct obstack temporary_obstack;\n /* Base directory in which `.class' files should be written.\n    NULL means to put the file into the same directory as the\n    corresponding .java file.  */\n-char *jcf_write_base_directory = NULL;\n+const char *jcf_write_base_directory = NULL;\n \n /* Make sure bytecode.data is big enough for at least N more bytes. */\n "}, {"sha": "962db122143644a45e5053f81592c6f703d527b9", "filename": "gcc/java/jcf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95ca6d8b3248955be5d473b3210824d5689c0e38/gcc%2Fjava%2Fjcf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95ca6d8b3248955be5d473b3210824d5689c0e38/gcc%2Fjava%2Fjcf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf.h?ref=95ca6d8b3248955be5d473b3210824d5689c0e38", "patch": "@@ -277,7 +277,7 @@ extern int jcf_unexpected_eof (JCF*, int) ATTRIBUTE_NORETURN;\n    ? (((PTR)[-3]&0x0F) << 12) + (((PTR)[-2]&0x3F) << 6) + ((PTR)[-1]&0x3F) \\\n    : ((PTR)++, -1))\n \n-extern char *jcf_write_base_directory;\n+extern const char *jcf_write_base_directory;\n \n /* Debug macros, for the front end */\n "}, {"sha": "f870a574dcf994bf6eaca80233192da726341770", "filename": "gcc/java/lang.c", "status": "modified", "additions": 172, "deletions": 231, "changes": 403, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95ca6d8b3248955be5d473b3210824d5689c0e38/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95ca6d8b3248955be5d473b3210824d5689c0e38/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=95ca6d8b3248955be5d473b3210824d5689c0e38", "patch": "@@ -46,27 +46,17 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"splay-tree.h\"\n #include \"tree-dump.h\"\n #include \"opts.h\"\n-\n-const unsigned int cl_options_count;\n-const struct cl_option cl_options[1];\n-\n-struct string_option\n-{\n-  const char *const string;\n-  int *const variable;\n-  const int on_value;\n-};\n+#include \"j-options.h\"\n \n static bool java_init (void);\n static void java_finish (void);\n static int java_init_options (void);\n static bool java_post_options (const char **);\n \n-static int java_decode_option (int, char **);\n+static int java_handle_option (size_t scode, const char *arg, int value);\n static void put_decl_string (const char *, int);\n static void put_decl_node (tree);\n static void java_print_error_function (diagnostic_context *, const char *);\n-static int process_option_with_no (const char *, const struct string_option *, int);\n static tree java_tree_inlining_walk_subtrees (tree *, int *, walk_tree_fn,\n \t\t\t\t\t      void *, void *);\n static int java_unsafe_for_reeval (tree);\n@@ -123,7 +113,7 @@ static bool inhibit_error_function_printing;\n \n int compiling_from_source;\n \n-char * resource_name;\n+const char *resource_name;\n \n int flag_emit_class_files = 0;\n \n@@ -196,39 +186,6 @@ static int version_flag = 0;\n    line.  */\n int flag_really_inline = 0;\n \n-/* Table of language-dependent -f options.\n-   STRING is the option name.  VARIABLE is the address of the variable.\n-   ON_VALUE is the value to store in VARIABLE\n-    if `-fSTRING' is seen as an option.\n-   (If `-fno-STRING' is seen as an option, the opposite value is stored.)  */\n-\n-static const struct string_option\n-lang_f_options[] =\n-{\n-  {\"emit-class-file\", &flag_emit_class_files, 1},\n-  {\"emit-class-files\", &flag_emit_class_files, 1},\n-  {\"filelist-file\", &flag_filelist_file, 1},\n-  {\"use-divide-subroutine\", &flag_use_divide_subroutine, 1},\n-  {\"use-boehm-gc\", &flag_use_boehm_gc, 1},\n-  {\"hash-synchronization\", &flag_hash_synchronization, 1},\n-  {\"jni\", &flag_jni, 1},\n-  {\"check-references\", &flag_check_references, 1},\n-  {\"force-classes-archive-check\", &flag_force_classes_archive_check, 1},\n-  {\"optimize-static-class-initialization\", &flag_optimize_sci, 1 },\n-  {\"indirect-dispatch\", &flag_indirect_dispatch, 1},\n-  {\"store-check\", &flag_store_check, 1},\n-  {\"assert\", &flag_assert, 1}\n-};\n-\n-static const struct string_option\n-lang_W_options[] =\n-{\n-  { \"redundant-modifiers\", &flag_redundant, 1 },\n-  { \"extraneous-semicolon\", &flag_extraneous_semicolon, 1 },\n-  { \"out-of-date\", &flag_newer, 1 },\n-  { \"deprecated\", &flag_deprecated, 1 }\n-};\n-\n JCF *current_jcf;\n \n /* Variable controlling how dependency tracking is enabled in\n@@ -254,8 +211,8 @@ struct language_function GTY(())\n #define LANG_HOOKS_FINISH java_finish\n #undef LANG_HOOKS_INIT_OPTIONS\n #define LANG_HOOKS_INIT_OPTIONS java_init_options\n-#undef LANG_HOOKS_DECODE_OPTION\n-#define LANG_HOOKS_DECODE_OPTION java_decode_option\n+#undef LANG_HOOKS_HANDLE_OPTION\n+#define LANG_HOOKS_HANDLE_OPTION java_handle_option\n #undef LANG_HOOKS_POST_OPTIONS\n #define LANG_HOOKS_POST_OPTIONS java_post_options\n #undef LANG_HOOKS_PARSE_FILE\n@@ -297,216 +254,199 @@ struct language_function GTY(())\n /* Each front end provides its own.  */\n const struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n \n-/* Process an option that can accept a `no-' form.\n-   Return 1 if option found, 0 otherwise.  */\n-static int\n-process_option_with_no (const char *p, const struct string_option *table,\n-\t\t\tint table_size)\n-{\n-  int j;\n-\n-  for (j = 0; j < table_size; j++)\n-    {\n-      if (!strcmp (p, table[j].string))\n-\t{\n-\t  *table[j].variable = table[j].on_value;\n-\t  return 1;\n-\t}\n-      if (p[0] == 'n' && p[1] == 'o' && p[2] == '-'\n-\t  && ! strcmp (p+3, table[j].string))\n-\t{\n-\t  *table[j].variable = ! table[j].on_value;\n-\t  return 1;\n-\t}\n-    }\n-\n-  return 0;\n-}\n-\n /*\n  * process java-specific compiler command-line options\n  * return 0, but do not complain if the option is not recognized.\n  */\n static int\n-java_decode_option (int argc __attribute__ ((__unused__)), char **argv)\n+java_handle_option (size_t scode, const char *arg, int value)\n {\n-  char *p = argv[0];\n-\n-  jcf_path_init ();\n+  const struct cl_option *option = &cl_options[scode];\n+  enum opt_code code = (enum opt_code) scode;\n \n-  if (strcmp (p, \"-version\") == 0)\n-    {\n-      version_flag = 1;\n-      /* We return 0 so that the caller can process this.  */\n-      return 0;\n-    }\n-\n-#define CLARG \"-fcompile-resource=\"\n-  if (strncmp (p, CLARG, sizeof (CLARG) - 1) == 0)\n-    {\n-      resource_name = p + sizeof (CLARG) - 1;\n-      return 1;\n-    }\n-#undef CLARG\n-#define CLARG \"-fassume-compiled=\"\n-  if (strncmp (p, CLARG, sizeof (CLARG) - 1) == 0)\n-    {\n-      add_assume_compiled (p + sizeof (CLARG) - 1, 0);\n-      return 1;\n-    }\n-#undef CLARG\n-#define CLARG \"-fno-assume-compiled=\"\n-  if (strncmp (p, CLARG, sizeof (CLARG) - 1) == 0)\n-    {\n-      add_assume_compiled (p + sizeof (CLARG) - 1, 1);\n+  /* Ignore file names.  */\n+  if (code == N_OPTS)\n       return 1;\n-    }\n-#undef CLARG\n-#define CLARG \"-fassume-compiled\"\n-  if (strncmp (p, CLARG, sizeof (CLARG) - 1) == 0)\n-    {\n-      add_assume_compiled (\"\", 0);\n-      return 1;\n-    }\n-#undef CLARG\n-#define CLARG \"-fno-assume-compiled\"\n-  if (strncmp (p, CLARG, sizeof (CLARG) - 1) == 0)\n-    {\n-      add_assume_compiled (\"\", 1);\n-      return 1;\n-    }\n-#undef CLARG\n-#define CLARG \"-fCLASSPATH=\"\n-  if (strncmp (p, CLARG, sizeof (CLARG) - 1) == 0)\n-    {\n-      jcf_path_classpath_arg (p + sizeof (CLARG) - 1);\n-      return 1;\n-    }\n-#undef CLARG\n-#define CLARG \"-fclasspath=\"\n-  if (strncmp (p, CLARG, sizeof (CLARG) - 1) == 0)\n-    {\n-      jcf_path_classpath_arg (p + sizeof (CLARG) - 1);\n-      return 1;\n-    }\n-#undef CLARG\n-#define CLARG \"-fbootclasspath=\"\n-  if (strncmp (p, CLARG, sizeof (CLARG) - 1) == 0)\n-    {\n-      jcf_path_bootclasspath_arg (p + sizeof (CLARG) - 1);\n-      return 1;\n-    }\n-#undef CLARG\n-#define CLARG \"-fextdirs=\"\n-  if (strncmp (p, CLARG, sizeof (CLARG) - 1) == 0)\n-    {\n-      jcf_path_extdirs_arg (p + sizeof (CLARG) - 1);\n-      return 1;\n-    }\n-#undef CLARG\n-  else if (strncmp (p, \"-I\", 2) == 0)\n-    {\n-      jcf_path_include_arg (p + 2);\n-      return 1;\n-    }\n \n-#define ARG \"-foutput-class-dir=\"\n-  if (strncmp (p, ARG, sizeof (ARG) - 1) == 0)\n+  if (arg == NULL && (option->flags & (CL_JOINED | CL_SEPARATE)))\n     {\n-      jcf_write_base_directory = p + sizeof (ARG) - 1;\n-      return 1;\n-    }\n-#undef ARG\n-#define ARG \"-fencoding=\"\n-  if (strncmp (p, ARG, sizeof (ARG) - 1) == 0)\n+      /* These can take an emtpy argument.  */\n+      if (code == OPT_fassume_compiled_\n+\t  || code == OPT_fclasspath_\n+\t  || code == OPT_fCLASSPATH_)\n+\targ = \"\";\n+      else\n     {\n-      current_encoding = p + sizeof (ARG) - 1;\n+\t  error (\"missing argument to \\\"-%s\\\"\", option->opt_text);\n       return 1;\n     }\n-#undef ARG\n-#define ARG \"-finline-functions\"\n-  if (strncmp (p, ARG, sizeof (ARG) - 1) == 0)\n-    {\n-      flag_inline_functions = 1;\n-      flag_really_inline = 1;\n-      return 1;\n     }\n-#undef ARG\n \n-  if (p[0] == '-' && p[1] == 'f')\n+  switch (code)\n     {\n-      /* Some kind of -f option.\n-\t P's value is the option sans `-f'.\n-\t Search for it in the table of options.  */\n-      p += 2;\n-      if (process_option_with_no (p, lang_f_options,\n-\t\t\t\t  ARRAY_SIZE (lang_f_options)))\n-\treturn 1;\n-      return dump_switch_p (p);\n-    }\n+    default:\n+      return 0;\n \n-  if (strcmp (p, \"-Wall\") == 0)\n-    {\n-      flag_wall = 1;\n-      flag_redundant = 1;\n-      flag_extraneous_semicolon = 1;\n-      /* When -Wall given, enable -Wunused.  We do this because the C\n-\t compiler does it, and people expect it.  */\n-      set_Wunused (1);\n-      return 1;\n-    }\n+    case OPT_I:\n+      jcf_path_include_arg (arg);\n+      break;\n \n-  if (p[0] == '-' && p[1] == 'W')\n-    {\n-      /* Skip `-W' and see if we accept the option or its `no-' form.  */\n-      p += 2;\n-      return process_option_with_no (p, lang_W_options,\n-\t\t\t\t     ARRAY_SIZE (lang_W_options));\n-    }\n+    case OPT_M:\n+      jcf_dependency_init (1);\n+      dependency_tracking |= DEPEND_ENABLE;\n+      break;\n \n-  if (strcmp (p, \"-MD\") == 0)\n-    {\n+    case OPT_MD:\n       jcf_dependency_init (1);\n       dependency_tracking |= DEPEND_SET_FILE | DEPEND_ENABLE;\n-      return 1;\n-    }\n-  else if (strcmp (p, \"-MMD\") == 0)\n-    {\n+      break;\n+\n+    case OPT_MF:\n+      jcf_dependency_set_dep_file (arg);\n+      break;\n+\n+    case OPT_MM:\n       jcf_dependency_init (0);\n-      dependency_tracking |= DEPEND_SET_FILE | DEPEND_ENABLE;\n-      return 1;\n-    }\n-  else if (strcmp (p, \"-M\") == 0)\n-    {\n-      jcf_dependency_init (1);\n       dependency_tracking |= DEPEND_ENABLE;\n-      return 1;\n-    }\n-  else if (strcmp (p, \"-MM\") == 0)\n-    {\n+      break;\n+\n+    case OPT_MMD:\n       jcf_dependency_init (0);\n-      dependency_tracking |= DEPEND_ENABLE;\n-      return 1;\n-    }\n-  else if (strcmp (p, \"-MP\") == 0)\n-    {\n+      dependency_tracking |= DEPEND_SET_FILE | DEPEND_ENABLE;\n+      break;\n+\n+    case OPT_MP:\n       jcf_dependency_print_dummies ();\n-      return 1;\n-    }\n-  else if (strcmp (p, \"-MT\") == 0)\n-    {\n-      jcf_dependency_set_target (argv[1]);\n+      break;\n+\n+    case OPT_MT:\n+      jcf_dependency_set_target (arg);\n       dependency_tracking |= DEPEND_TARGET_SET;\n-      return 2;\n-    }\n-  else if (strcmp (p, \"-MF\") == 0)\n-    {\n-      jcf_dependency_set_dep_file (argv[1]);\n-      dependency_tracking |= DEPEND_FILE_ALREADY_SET;\n-      return 2;\n-    }\n+      break;\n+\n+    case OPT_Wall:\n+      flag_wall = value;\n+      flag_redundant = value;\n+      flag_extraneous_semicolon = value;\n+      /* When -Wall given, enable -Wunused.  We do this because the C\n+\t compiler does it, and people expect it.  */\n+      set_Wunused (value);\n+      break;\n+\n+    case OPT_Wdeprecated:\n+      flag_deprecated = value;\n+      break;\n+\n+    case OPT_Wextraneous_semicolon:\n+      flag_extraneous_semicolon = value;\n+      break;\n+\n+    case OPT_Wout_of_date:\n+      flag_newer = value;\n+      break;\n+\n+    case OPT_Wredundant_modifiers:\n+      flag_redundant = value;\n+      break;\n+\n+    case OPT_fassert:\n+      flag_assert = value;\n+      break;\n+\n+    case OPT_fassume_compiled_:\n+      add_assume_compiled (arg, !value);\n+      break;\n+\n+    case OPT_fassume_compiled:\n+      add_assume_compiled (\"\", !value);\n+      break;\n+\n+    case OPT_fbootclasspath_:\n+      jcf_path_bootclasspath_arg (arg);\n+      break;\n+\n+    case OPT_fcheck_references:\n+      flag_check_references = value;\n+      break;\n \n+    case OPT_fclasspath_:\n+    case OPT_fCLASSPATH_:\n+      jcf_path_classpath_arg (arg);\n+      break;\n+\n+    case OPT_fcompile_resource_:\n+      resource_name = arg;\n+      break;\n+\n+    case OPT_fdump_:\n+      if (!dump_switch_p (option->opt_text + strlen (\"f\")))\n   return 0;\n+      break;\n+\n+    case OPT_femit_class_file:\n+    case OPT_femit_class_files:\n+      flag_emit_class_files = value;\n+      break;\n+\n+    case OPT_fencoding_:\n+      current_encoding = arg;\n+      break;\n+\n+    case OPT_fextdirs_:\n+      jcf_path_extdirs_arg (arg);\n+      break;\n+\n+    case OPT_ffilelist_file:\n+      flag_filelist_file = value;\n+      break;\n+\n+    case OPT_fforce_classes_archive_check:\n+      flag_force_classes_archive_check = value;\n+      break;\n+\n+    case OPT_fhash_synchronization:\n+      flag_hash_synchronization = value;\n+      break;\n+\n+    case OPT_findirect_dispatch:\n+      flag_indirect_dispatch = value;\n+      break;\n+\n+    case OPT_finline_functions:\n+      flag_inline_functions = value;\n+      flag_really_inline = value;\n+      break;\n+\n+    case OPT_fjni:\n+      flag_jni = value;\n+      break;\n+\n+    case OPT_foptimize_static_class_initialization:\n+      flag_optimize_sci = value;\n+      break;\n+\n+    case OPT_foutput_class_dir_:\n+      jcf_write_base_directory = arg;\n+      break;\n+\n+    case OPT_fstore_check:\n+      flag_store_check = value;\n+      break;\n+\n+    case OPT_fuse_boehm_gc:\n+      flag_use_boehm_gc = value;\n+      break;\n+\n+    case OPT_fuse_divide_subroutine:\n+      flag_use_divide_subroutine = value;\n+      break;\n+\n+    case OPT_version:\n+      version_flag = 1;\n+      break;\n+    }\n+\n+  return 1;\n }\n \n /* Global open file.  */\n@@ -530,7 +470,6 @@ java_init (void)\n       && force_align_functions_log < 1)\n     force_align_functions_log = 1;\n \n-  jcf_path_init ();\n   jcf_path_seal (version_flag);\n \n   java_init_decl_processing ();\n@@ -748,6 +687,8 @@ java_init_options (void)\n   /* In Java arithmetic overflow always wraps around.  */\n   flag_wrapv = 1;\n \n+  jcf_path_init ();\n+\n   return 0;\n }\n "}, {"sha": "b02e6b334e735f67923083927faf6857e6ce22fd", "filename": "gcc/java/lang.opt", "status": "added", "additions": 158, "deletions": 0, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95ca6d8b3248955be5d473b3210824d5689c0e38/gcc%2Fjava%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95ca6d8b3248955be5d473b3210824d5689c0e38/gcc%2Fjava%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.opt?ref=95ca6d8b3248955be5d473b3210824d5689c0e38", "patch": "@@ -0,0 +1,158 @@\n+; Options for the Java front end.\n+; Copyright (C) 2003 Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 2, or (at your option) any later\n+; version.\n+; \n+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; for more details.\n+; \n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING.  If not, write to the Free\n+; Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+; 02111-1307, USA.\n+\n+\n+; This file is processed by the script opts.sh.  It is a database of\n+; command line options, with each record separated by a blank line,\n+; and each field appearing on its own line.  The first field is the\n+; command-line switch with the leading \"-\" removed.  All options\n+; beginning with \"f\" or \"W\" are implicitly assumed to take a \"no-\"\n+; form; this form should not be listed.  If you do not want this\n+; negative form and you want it to be automatically rejected, add\n+; RejectNegative to the second field.\n+\n+; The second field should contain \"Java\".  If the switch takes an\n+; argument, then you should also specify \"Joined\" and/or \"Separate\" to\n+; indicate where the argument can appear.\n+\n+; Comments can appear on their own line anwhere in the file, preceded\n+; by a semicolon.  Whitespace is permitted before the semicolon.\n+\n+; For each switch XXX below, an enumeration constant is created by the\n+; script opts.sh spelt OPT_XXX, but with all non-alphanumeric\n+; characters replaced with an underscore.\n+\n+; Please try to keep this file in ASCII collating order.\n+\n+I\n+Java Joined\n+\n+M\n+Java\n+\n+MD\n+Java\n+\n+MF\n+Java Separate\n+\n+MM\n+Java\n+\n+MMD\n+Java\n+\n+MP\n+Java\n+\n+MT\n+Java Separate\n+\n+Wall\n+Java\n+\n+Wdeprecated\n+Java\n+\n+Wextraneous-semicolon\n+Java\n+\n+Wout-of-date\n+Java\n+\n+Wredundant-modifiers\n+Java\n+\n+fCLASSPATH=\n+Java Joined RejectNegative\n+\n+fassert\n+Java\n+\n+fassume-compiled\n+Java\n+\n+fassume-compiled=\n+Java Joined\n+\n+fbootclasspath=\n+Java Joined RejectNegative\n+\n+fcheck-references\n+Java\n+\n+fclasspath=\n+Java Joined RejectNegative\n+\n+fcompile-resource=\n+Java Joined RejectNegative\n+\n+fdump-\n+Java Joined RejectNegative\n+\n+femit-class-file\n+Java\n+\n+femit-class-files\n+Java\n+\n+fencoding=\n+Java Joined RejectNegative\n+\n+fextdirs=\n+Java Joined RejectNegative\n+\n+ffilelist-file\n+Java\n+\n+fforce-classes-archive-check\n+Java\n+\n+fhash-synchronization\n+Java\n+\n+findirect-dispatch\n+Java\n+\n+finline-functions\n+Java\n+\n+fjni\n+Java\n+\n+foptimize-static-class-initialization\n+Java\n+\n+foutput-class-dir=\n+Java Joined RejectNegative\n+\n+fstore-check\n+Java\n+\n+fuse-boehm-gc\n+Java\n+\n+fuse-divide-subroutine\n+Java\n+\n+version\n+Java\n+\n+; This comment is to ensure we retain the blank line above."}, {"sha": "595b7b06da7e7c26af8b8974c8ed6c588a2d4fec", "filename": "gcc/java/resource.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95ca6d8b3248955be5d473b3210824d5689c0e38/gcc%2Fjava%2Fresource.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95ca6d8b3248955be5d473b3210824d5689c0e38/gcc%2Fjava%2Fresource.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fresource.c?ref=95ca6d8b3248955be5d473b3210824d5689c0e38", "patch": "@@ -56,7 +56,7 @@ static GTY(()) rtx registerResource_libfunc;\n static int Jr_count = 0;\n \n void\n-compile_resource_data (char *name, const char *buffer, int length)\n+compile_resource_data (const char *name, const char *buffer, int length)\n {\n   tree rtype, field = NULL_TREE, data_type, rinit, data, decl;\n   char buf[60];\n@@ -157,7 +157,7 @@ write_resource_constructor (void)\n    compiled Java resource, which is accessed by the runtime using\n    NAME.  */\n void\n-compile_resource_file (char *name, const char *filename)\n+compile_resource_file (const char *name, const char *filename)\n {\n   struct stat stat_buf;\n   int fd;"}]}