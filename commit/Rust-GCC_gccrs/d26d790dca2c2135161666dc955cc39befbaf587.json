{"sha": "d26d790dca2c2135161666dc955cc39befbaf587", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDI2ZDc5MGRjYTJjMjEzNTE2MTY2NmRjOTU1Y2MzOWJlZmJhZjU4Nw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-08-04T09:38:17Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-08-04T09:38:17Z"}, "message": "[multiple changes]\n\n2014-08-04  Robert Dewar  <dewar@adacore.com>\n\n\t* checks.adb (Activate_Overflow_Check): Remove\n\tCheck_Float_Overflow processing.\n\t(Apply_Scalar_Range_Check): Ditto.\n\t(Generate_Range_Check): Ditto.\n\t* exp_ch4.adb (Expand_N_Op_Add): Add call to\n\tCheck_Float_Op_Overflow.\n\t(Expand_N_Op_Divide): ditto.\n\t(Expand_N_Op_Multiply): ditto.\n\t(Expand_N_Op_Subtract): ditto.\n\t* exp_util.ads, exp_util.adb (Check_Float_Op_Overflow): New procedure.\n\t* sem_attr.adb (Analyze_Attribute, case Pred): Make sure\n\tDo_Range_Check is set for floating-point case in -gnatc or\n\tGNATprove mode.\n\t(Analyze_Attribute, case Succ): Make sure\n\tDo_Range_Check is set for floating-point case in -gnatc or\n\tGNATprove mode.\n\t* sem_res.adb (Resolve_Type_Conversion): Make sure Do_Range_Check\n\tflag is set for real to integer conversion in GNATprove or\n\t-gnatc mode.\n\n2014-08-04  Gary Dismukes  <dismukes@adacore.com>\n\n\t* sem_ch13.adb (Analyze_Aspect_Specifications): Resolve\n\tthe expression of an Import or Export aspect as type Boolean\n\tand require it to be static. Add ??? comment. Also, set the\n\tIs_Exported flag when appropriate.\n\nFrom-SVN: r213545", "tree": {"sha": "f3d0f0f15149eab824acc982a9afeee6d907057d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3d0f0f15149eab824acc982a9afeee6d907057d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d26d790dca2c2135161666dc955cc39befbaf587", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d26d790dca2c2135161666dc955cc39befbaf587", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d26d790dca2c2135161666dc955cc39befbaf587", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d26d790dca2c2135161666dc955cc39befbaf587/comments", "author": null, "committer": null, "parents": [{"sha": "d478ac59ee07d9d70a11083c662f78d5a48de5f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d478ac59ee07d9d70a11083c662f78d5a48de5f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d478ac59ee07d9d70a11083c662f78d5a48de5f9"}], "stats": {"total": 170, "additions": 130, "deletions": 40}, "files": [{"sha": "39ace1f7878ef77019d30521aef947f95cc3d61c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d26d790dca2c2135161666dc955cc39befbaf587/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d26d790dca2c2135161666dc955cc39befbaf587/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d26d790dca2c2135161666dc955cc39befbaf587", "patch": "@@ -1,3 +1,32 @@\n+2014-08-04  Robert Dewar  <dewar@adacore.com>\n+\n+\t* checks.adb (Activate_Overflow_Check): Remove\n+\tCheck_Float_Overflow processing.\n+\t(Apply_Scalar_Range_Check): Ditto.\n+\t(Generate_Range_Check): Ditto.\n+\t* exp_ch4.adb (Expand_N_Op_Add): Add call to\n+\tCheck_Float_Op_Overflow.\n+\t(Expand_N_Op_Divide): ditto.\n+\t(Expand_N_Op_Multiply): ditto.\n+\t(Expand_N_Op_Subtract): ditto.\n+\t* exp_util.ads, exp_util.adb (Check_Float_Op_Overflow): New procedure.\n+\t* sem_attr.adb (Analyze_Attribute, case Pred): Make sure\n+\tDo_Range_Check is set for floating-point case in -gnatc or\n+\tGNATprove mode.\n+\t(Analyze_Attribute, case Succ): Make sure\n+\tDo_Range_Check is set for floating-point case in -gnatc or\n+\tGNATprove mode.\n+\t* sem_res.adb (Resolve_Type_Conversion): Make sure Do_Range_Check\n+\tflag is set for real to integer conversion in GNATprove or\n+\t-gnatc mode.\n+\n+2014-08-04  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_Aspect_Specifications): Resolve\n+\tthe expression of an Import or Export aspect as type Boolean\n+\tand require it to be static. Add ??? comment. Also, set the\n+\tIs_Exported flag when appropriate.\n+\n 2014-08-04  Robert Dewar  <dewar@adacore.com>\n \n \t* exp_ch4.adb: Minor reformatting."}, {"sha": "1f9493d1d18dc5b43171e5ec4fdecb2b7aca92ce", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d26d790dca2c2135161666dc955cc39befbaf587/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d26d790dca2c2135161666dc955cc39befbaf587/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=d26d790dca2c2135161666dc955cc39befbaf587", "patch": "@@ -396,10 +396,6 @@ package body Checks is\n       if Present (Etype (N))\n         and then Is_Floating_Point_Type (Etype (N))\n         and then not Is_Constrained (Etype (N))\n-\n-        --  But do the check after all if float overflow checking enforced\n-\n-        and then not Check_Float_Overflow\n       then\n          return;\n       end if;\n@@ -2871,11 +2867,6 @@ package body Checks is\n            and then not Has_Infinities (Target_Typ)\n          then\n             Enable_Range_Check (Expr);\n-\n-         --  Always do a range check for operators if option set\n-\n-         elsif Check_Float_Overflow and then Nkind (Expr) in N_Op then\n-            Enable_Range_Check (Expr);\n          end if;\n       end if;\n \n@@ -2984,9 +2975,9 @@ package body Checks is\n \n       --  Normally, we only do range checks if the type is constrained. We do\n       --  NOT want range checks for unconstrained types, since we want to have\n-      --  infinities. Override this decision in Check_Float_Overflow mode.\n+      --  infinities.\n \n-         if Is_Constrained (S_Typ) or else Check_Float_Overflow then\n+         if Is_Constrained (S_Typ) then\n             Enable_Range_Check (Expr);\n          end if;\n \n@@ -6471,11 +6462,6 @@ package body Checks is\n              or else\n                (Is_Entity_Name (N)\n                  and then Ekind (Entity (N)) = E_Enumeration_Literal))\n-\n-        --  Also do not apply this for floating-point if Check_Float_Overflow\n-\n-        and then not\n-          (Is_Floating_Point_Type (Source_Type) and Check_Float_Overflow)\n       then\n          Set_Do_Range_Check (N, False);\n          return;"}, {"sha": "0f4261fb7b99d30163f3523dcbf962821ed300df", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d26d790dca2c2135161666dc955cc39befbaf587/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d26d790dca2c2135161666dc955cc39befbaf587/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=d26d790dca2c2135161666dc955cc39befbaf587", "patch": "@@ -151,11 +151,11 @@ package body Exp_Ch4 is\n       Bodies : List_Id) return Node_Id;\n    --  Local recursive function used to expand equality for nested composite\n    --  types. Used by Expand_Record/Array_Equality, Bodies is a list on which\n-   --  to attach bodies of local functions that are created in the process.\n-   --  It is the responsibility of the caller to insert those bodies at the\n-   --  right place. Nod provides the Sloc value for generated code. Lhs and Rhs\n-   --  are the left and right sides for the comparison, and Typ is the type of\n-   --  the objects to compare.\n+   --  to attach bodies of local functions that are created in the process. It\n+   --  is the responsibility of the caller to insert those bodies at the right\n+   --  place. Nod provides the Sloc value for generated code. Lhs and Rhs are\n+   --  the left and right sides for the comparison, and Typ is the type of the\n+   --  objects to compare.\n \n    procedure Expand_Concatenate (Cnode : Node_Id; Opnds : List_Id);\n    --  Routine to expand concatenation of a sequence of two or more operands"}, {"sha": "c1fca54fe4928cc2971c9ab4681a63c3557a0900", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d26d790dca2c2135161666dc955cc39befbaf587/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d26d790dca2c2135161666dc955cc39befbaf587/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=d26d790dca2c2135161666dc955cc39befbaf587", "patch": "@@ -1633,6 +1633,60 @@ package body Exp_Util is\n       return Build_Task_Image_Function (Loc, Decls, Stats, Res);\n    end Build_Task_Record_Image;\n \n+   -----------------------------\n+   -- Check_Float_Op_Overflow --\n+   -----------------------------\n+\n+   procedure Check_Float_Op_Overflow (N : Node_Id) is\n+   begin\n+      --  Return if no check needed\n+\n+      if not Check_Float_Overflow\n+        or else not Is_Floating_Point_Type (Etype (N))\n+      then\n+         return;\n+      end if;\n+\n+      --  Otherwise we replace the expression by\n+\n+      --  do Tnn : constant ftype := expression;\n+      --     constraint_error when not Tnn'Valid;\n+      --  in Tnn;\n+\n+      declare\n+         Loc : constant Source_Ptr := Sloc (N);\n+         Tnn : constant Entity_Id  := Make_Temporary (Loc, 'T', N);\n+         Typ : constant Entity_Id  := Etype (N);\n+\n+      begin\n+         --  Prevent recursion\n+\n+         Set_Analyzed (N);\n+\n+         --  Do the rewrite to include the check\n+\n+         Rewrite (N,\n+           Make_Expression_With_Actions (Loc,\n+             Actions    => New_List (\n+               Make_Object_Declaration (Loc,\n+                 Defining_Identifier => Tnn,\n+                 Object_Definition   => New_Occurrence_Of (Typ, Loc),\n+                 Constant_Present    => True,\n+                 Expression          => Relocate_Node (N)),\n+               Make_Raise_Constraint_Error (Loc,\n+                 Condition =>\n+                   Make_Op_Not (Loc,\n+                     Right_Opnd =>\n+                       Make_Attribute_Reference (Loc,\n+                         Prefix         => New_Occurrence_Of (Tnn, Loc),\n+                         Attribute_Name => Name_Valid)),\n+                 Reason    => CE_Overflow_Check_Failed)),\n+             Expression => New_Occurrence_Of (Tnn, Loc)));\n+\n+         Analyze_And_Resolve (N, Typ);\n+      end;\n+   end Check_Float_Op_Overflow;\n+\n    ----------------------------------\n    -- Component_May_Be_Bit_Aligned --\n    ----------------------------------"}, {"sha": "cdc2a24adbd840c81652bd4cf15858d9bf4e320d", "filename": "gcc/ada/exp_util.ads", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d26d790dca2c2135161666dc955cc39befbaf587/gcc%2Fada%2Fexp_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d26d790dca2c2135161666dc955cc39befbaf587/gcc%2Fada%2Fexp_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.ads?ref=d26d790dca2c2135161666dc955cc39befbaf587", "patch": "@@ -276,6 +276,13 @@ package Exp_Util is\n    --  is false, the call is for a stand-alone object, and the generated\n    --  function itself must do its own cleanups.\n \n+   procedure Check_Float_Op_Overflow (N : Node_Id);\n+   --  Called where we could have a floating-point binary operator where we\n+   --  must check for infinities if we are operating in Check_Float_Overflow\n+   --  mode. Note that we don't need to worry about unary operator cases,\n+   --  since for floating-point, abs, unary \"-\", and unary \"+\" can never\n+   --  case overflow.\n+\n    function Component_May_Be_Bit_Aligned (Comp : Entity_Id) return Boolean;\n    --  This function is in charge of detecting record components that may\n    --  cause trouble in the back end if an attempt is made to assign the"}, {"sha": "cab75c945cda7c1c5dca75d0632196b8f864c5a7", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d26d790dca2c2135161666dc955cc39befbaf587/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d26d790dca2c2135161666dc955cc39befbaf587/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=d26d790dca2c2135161666dc955cc39befbaf587", "patch": "@@ -4808,10 +4808,8 @@ package body Sem_Attr is\n          --  make an exception in Check_Float_Overflow mode.\n \n          if Is_Floating_Point_Type (P_Type) then\n-            if Check_Float_Overflow\n-              and then not Range_Checks_Suppressed (P_Base_Type)\n-            then\n-               Enable_Range_Check (E1);\n+            if not Range_Checks_Suppressed (P_Base_Type) then\n+               Set_Do_Range_Check (E1);\n             end if;\n \n          --  If not modular type, test for overflow check required\n@@ -5702,10 +5700,8 @@ package body Sem_Attr is\n          --  make an exception in Check_Float_Overflow mode.\n \n          if Is_Floating_Point_Type (P_Type) then\n-            if Check_Float_Overflow\n-              and then not Range_Checks_Suppressed (P_Base_Type)\n-            then\n-               Enable_Range_Check (E1);\n+            if not Range_Checks_Suppressed (P_Base_Type) then\n+               Set_Do_Range_Check (E1);\n             end if;\n \n          --  If not modular type, test for overflow check required"}, {"sha": "3ef583621b7a7eddec031a0b09d4ab2332c18cfb", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 26, "deletions": 10, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d26d790dca2c2135161666dc955cc39befbaf587/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d26d790dca2c2135161666dc955cc39befbaf587/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=d26d790dca2c2135161666dc955cc39befbaf587", "patch": "@@ -2949,18 +2949,34 @@ package body Sem_Ch13 is\n                      --  that verifed that there was a matching convention\n                      --  is now obsolete.\n \n-                     if A_Id = Aspect_Import then\n-                        Set_Is_Imported (E);\n+                     --  Resolve the expression of an Import or Export here,\n+                     --  and require it to be of type Boolean and static. This\n+                     --  is not quite right, because in general this should be\n+                     --  delayed, but that seems tricky for these, because\n+                     --  normally Boolean aspects are replaced with pragmas at\n+                     --  the freeze point (in Make_Pragma_From_Boolean_Aspect),\n+                     --  but in the case of these aspects we can't generate\n+                     --  a simple pragma with just the entity name. ???\n+\n+                     if not Present (Expr)\n+                       or else Is_True (Static_Boolean (Expr))\n+                     then\n+                        if A_Id = Aspect_Import then\n+                           Set_Is_Imported (E);\n \n-                        --  An imported entity cannot have an explicit\n-                        --  initialization.\n+                           --  An imported entity cannot have an explicit\n+                           --  initialization.\n \n-                        if Nkind (N) = N_Object_Declaration\n-                          and then Present (Expression (N))\n-                        then\n-                           Error_Msg_N\n-                             (\"imported entities cannot be initialized \"\n-                              & \"(RM B.1(24))\", Expression (N));\n+                           if Nkind (N) = N_Object_Declaration\n+                             and then Present (Expression (N))\n+                           then\n+                              Error_Msg_N\n+                                (\"imported entities cannot be initialized \"\n+                                 & \"(RM B.1(24))\", Expression (N));\n+                           end if;\n+\n+                        elsif A_Id = Aspect_Export then\n+                           Set_Is_Exported (E);\n                         end if;\n                      end if;\n "}, {"sha": "6708bc6157aa2c7b06efd70c1addbab00e7bab56", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d26d790dca2c2135161666dc955cc39befbaf587/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d26d790dca2c2135161666dc955cc39befbaf587/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=d26d790dca2c2135161666dc955cc39befbaf587", "patch": "@@ -10507,9 +10507,11 @@ package body Sem_Res is\n \n       --  If at this stage we have a real to integer conversion, make sure\n       --  that the Do_Range_Check flag is set, because such conversions in\n-      --  general need a range check.\n+      --  general need a range check. We only need this if expansion is off\n+      --  or we are in GNATProve mode.\n \n       if Nkind (N) = N_Type_Conversion\n+        and then (GNATprove_Mode or not Expander_Active)\n         and then Is_Integer_Type (Target_Typ)\n         and then Is_Real_Type (Operand_Typ)\n       then"}]}