{"sha": "fada905b06e98c850a5925e4303420287ee0f121", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmFkYTkwNWIwNmU5OGM4NTBhNTkyNWU0MzAzNDIwMjg3ZWUwZjEyMQ==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1995-12-29T03:42:54Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1995-12-29T03:42:54Z"}, "message": "Undo most of 12/27 changes\n\nFrom-SVN: r10895", "tree": {"sha": "a634b65cc3af905352833a5bc0a784be5e225527", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a634b65cc3af905352833a5bc0a784be5e225527"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fada905b06e98c850a5925e4303420287ee0f121", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fada905b06e98c850a5925e4303420287ee0f121", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fada905b06e98c850a5925e4303420287ee0f121", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fada905b06e98c850a5925e4303420287ee0f121/comments", "author": null, "committer": null, "parents": [{"sha": "21451173d21db7d6184bb788693a5e941cb2a08d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21451173d21db7d6184bb788693a5e941cb2a08d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21451173d21db7d6184bb788693a5e941cb2a08d"}], "stats": {"total": 277, "additions": 97, "deletions": 180}, "files": [{"sha": "04399c2fdb8b47b2ac931e0e6e87d166ef934fb8", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 0, "deletions": 63, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fada905b06e98c850a5925e4303420287ee0f121/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fada905b06e98c850a5925e4303420287ee0f121/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=fada905b06e98c850a5925e4303420287ee0f121", "patch": "@@ -449,69 +449,6 @@ gpc_reg_operand (op, mode)\n \t  && (GET_CODE (op) != REG || REGNO (op) >= 67 || REGNO (op) < 64));\n }\n \n-/* Returns 1 if OP is register 0 or is a pseudo register.  */\n-\n-int\n-gpc_reg0_operand (op, mode)\n-     register rtx op;\n-     enum machine_mode mode;\n-{\n-  return (register_operand (op, mode)\n-\t  && (GET_CODE (op) != REG || REGNO (op) == 0 || REGNO (op) >= FIRST_PSEUDO_REGISTER));\n-}\n-\n-/* Returns 1 if OP is register 3 or is a pseudo register.  */\n-\n-int\n-gpc_reg3_operand (op, mode)\n-     register rtx op;\n-     enum machine_mode mode;\n-{\n-  if (GET_CODE (op) != REG || mode != GET_MODE (op))\n-    return 0;\t\t\t/* do not allow SUBREG's */\n-\n-  return (REGNO (op) == 3 || REGNO (op) >= FIRST_PSEUDO_REGISTER);\n-}\n-\n-/* Returns 1 if OP is register 4 or is a pseudo register.  */\n-\n-int\n-gpc_reg4_operand (op, mode)\n-     register rtx op;\n-     enum machine_mode mode;\n-{\n-  if (GET_CODE (op) != REG || mode != GET_MODE (op))\n-    return 0;\t\t\t/* do not allow SUBREG's */\n-\n-  return (REGNO (op) == 4 || REGNO (op) >= FIRST_PSEUDO_REGISTER);\n-}\n-\n-/* Returns 1 if OP is either a pseudo-register or CR1.  */\n-\n-int\n-cc_reg1_operand (op, mode)\n-     register rtx op;\n-     enum machine_mode mode;\n-{\n-  return (register_operand (op, mode)\n-\t  && (GET_CODE (op) != REG\n-\t      || REGNO (op) >= FIRST_PSEUDO_REGISTER\n-\t      || REGNO (op) == 69));\n-}\n-\n-/* Returns 1 if OP is either a pseudo-register or CR0.  */\n-\n-int\n-cc_reg0_operand (op, mode)\n-     register rtx op;\n-     enum machine_mode mode;\n-{\n-  return (register_operand (op, mode)\n-\t  && (GET_CODE (op) != REG\n-\t      || REGNO (op) >= FIRST_PSEUDO_REGISTER\n-\t      || REGNO (op) == 68));\n-}\n-\n /* Returns 1 if OP is either a pseudo-register or a register denoting a\n    CR field.  */\n "}, {"sha": "16faa3db1939275bd978998467adf41d2b9077a6", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 7, "deletions": 41, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fada905b06e98c850a5925e4303420287ee0f121/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fada905b06e98c850a5925e4303420287ee0f121/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=fada905b06e98c850a5925e4303420287ee0f121", "patch": "@@ -69,11 +69,11 @@ Boston, MA 02111-1307, USA.  */\n %{mcpu=rsc1: -D_ARCH_PWR} \\\n %{mcpu=403: -D_ARCH_PPC} \\\n %{mcpu=601: -D_ARCH_PPC -D_ARCH_PWR} \\\n-%{mcpu=602: -mppc} \\\n-%{mcpu=603: -mppc} \\\n-%{mcpu=603e: -mppc} \\\n-%{mcpu=604: -mppc} \\\n-%{mcpu=620: -mppc}\"\n+%{mcpu=602: -d_ARCH_PPC} \\\n+%{mcpu=603: -D_ARCH_PPC} \\\n+%{mcpu=603e: -D_ARCH_PPC} \\\n+%{mcpu=604: -D_ARCH_PPC} \\\n+%{mcpu=620: -D_ARCH_PPC}\"\n \n /* Define the options for the binder: Start text at 512, align all segments\n    to 512 bytes, and warn if there is text relocation.\n@@ -758,16 +758,11 @@ extern struct rs6000_cpu_select rs6000_select[];\n    So make a class for registers valid as base registers.\n \n    Also, cr0 is the only condition code register that can be used in\n-   arithmetic insns, so make a separate class for it.  Common mode\n-   needs to clobber cr1, so add a class for that as well.  */\n+   arithmetic insns, so make a separate class for it. */\n \n enum reg_class\n {\n   NO_REGS,\n-  R0_REGS,\n-  R3_REGS,\n-  R4_REGS,\n-  R34_REGS,\n   BASE_REGS,\n   GENERAL_REGS,\n   FLOAT_REGS,\n@@ -779,7 +774,6 @@ enum reg_class\n   SPECIAL_REGS,\n   SPEC_OR_GEN_REGS,\n   CR0_REGS,\n-  CR1_REGS,\n   CR_REGS,\n   NON_FLOAT_REGS,\n   ALL_REGS,\n@@ -793,10 +787,6 @@ enum reg_class\n #define REG_CLASS_NAMES\t\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   \"NO_REGS\",\t\t\t\t\t\t\t\t\\\n-  \"R0_REGS\",\t\t\t\t\t\t\t\t\\\n-  \"R3_REGS\",\t\t\t\t\t\t\t\t\\\n-  \"R4_REGS\",\t\t\t\t\t\t\t\t\\\n-  \"R34_REGS\",\t\t\t\t\t\t\t\t\\\n   \"BASE_REGS\",\t\t\t\t\t\t\t\t\\\n   \"GENERAL_REGS\",\t\t\t\t\t\t\t\\\n   \"FLOAT_REGS\",\t\t\t\t\t\t\t\t\\\n@@ -808,7 +798,6 @@ enum reg_class\n   \"SPECIAL_REGS\",\t\t\t\t\t\t\t\\\n   \"SPEC_OR_GEN_REGS\",\t\t\t\t\t\t\t\\\n   \"CR0_REGS\",\t\t\t\t\t\t\t\t\\\n-  \"CR1_REGS\",\t\t\t\t\t\t\t\t\\\n   \"CR_REGS\",\t\t\t\t\t\t\t\t\\\n   \"NON_FLOAT_REGS\",\t\t\t\t\t\t\t\\\n   \"ALL_REGS\"\t\t\t\t\t\t\t\t\\\n@@ -821,10 +810,6 @@ enum reg_class\n #define REG_CLASS_CONTENTS\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   { 0x00000000, 0x00000000, 0x00000000 },\t/* NO_REGS */\t\t\\\n-  { 0x00000001, 0x00000000, 0x00000000 },\t/* R0_REGS */\t\t\\\n-  { 0x00000008, 0x00000000, 0x00000000 },\t/* R3_REGS */\t\t\\\n-  { 0x00000010, 0x00000000, 0x00000000 },\t/* R4_REGS */\t\t\\\n-  { 0x00000018, 0x00000000, 0x00000000 },\t/* R34_REGS */\t\t\\\n   { 0xfffffffe, 0x00000000, 0x00000008 },\t/* BASE_REGS */\t\t\\\n   { 0xffffffff, 0x00000000, 0x00000008 },\t/* GENERAL_REGS */\t\\\n   { 0x00000000, 0xffffffff, 0x00000000 },\t/* FLOAT_REGS */\t\\\n@@ -836,7 +821,6 @@ enum reg_class\n   { 0x00000000, 0x00000000, 0x00000007 },\t/* SPECIAL_REGS */\t\\\n   { 0xffffffff, 0x00000000, 0x0000000f },\t/* SPEC_OR_GEN_REGS */\t\\\n   { 0x00000000, 0x00000000, 0x00000010 },\t/* CR0_REGS */\t\t\\\n-  { 0x00000000, 0x00000000, 0x00000020 },\t/* CR1_REGS */\t\t\\\n   { 0x00000000, 0x00000000, 0x00000ff0 },\t/* CR_REGS */\t\t\\\n   { 0xffffffff, 0x00000000, 0x0000ffff },\t/* NON_FLOAT_REGS */\t\\\n   { 0xffffffff, 0xffffffff, 0x0000ffff }\t/* ALL_REGS */\t\t\\\n@@ -848,13 +832,10 @@ enum reg_class\n    or could index an array.  */\n \n #define REGNO_REG_CLASS(REGNO)\t\\\n- ((REGNO) == 0 ? R0_REGS\t\\\n-  : (REGNO) == 3 ? R3_REGS\t\\\n-  : (REGNO) == 4 ? R4_REGS\t\\\n+ ((REGNO) == 0 ? GENERAL_REGS\t\\\n   : (REGNO) < 32 ? BASE_REGS\t\\\n   : FP_REGNO_P (REGNO) ? FLOAT_REGS \\\n   : (REGNO) == 68 ? CR0_REGS\t\\\n-  : (REGNO) == 69 ? CR1_REGS\t\\\n   : CR_REGNO_P (REGNO) ? CR_REGS \\\n   : (REGNO) == 64 ? MQ_REGS\t\\\n   : (REGNO) == 65 ? LINK_REGS\t\\\n@@ -875,13 +856,8 @@ enum reg_class\n    : (C) == 'q' ? MQ_REGS\t\\\n    : (C) == 'c' ? CTR_REGS\t\\\n    : (C) == 'l' ? LINK_REGS\t\\\n-   : (C) == 't' ? CR1_REGS\t\\\n-   : (C) == 'u' ? R3_REGS\t\\\n-   : (C) == 'v' ? R4_REGS\t\\\n-   : (C) == 'w' ? R34_REGS\t\\\n    : (C) == 'x' ? CR0_REGS\t\\\n    : (C) == 'y' ? CR_REGS\t\\\n-   : (C) == 'z' ? R0_REGS\t\\\n    : NO_REGS)\n \n /* The letters I, J, K, L, M, N, and P in a register constraint string\n@@ -2597,11 +2573,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n   {\"u_short_cint_operand\", {CONST_INT}},\t\t\t\\\n   {\"non_short_cint_operand\", {CONST_INT}},\t\t\t\\\n   {\"gpc_reg_operand\", {SUBREG, REG}},\t\t\t\t\\\n-  {\"gpc_reg0_operand\", {SUBREG, REG}},\t\t\t\t\\\n-  {\"gpc_reg3_operand\", {SUBREG, REG}},\t\t\t\t\\\n-  {\"gpc_reg4_operand\", {SUBREG, REG}},\t\t\t\t\\\n-  {\"cc_reg0_operand\", {SUBREG, REG}},\t\t\t\t\\\n-  {\"cc_reg1_operand\", {SUBREG, REG}},\t\t\t\t\\\n   {\"cc_reg_operand\", {SUBREG, REG}},\t\t\t\t\\\n   {\"reg_or_short_operand\", {SUBREG, REG, CONST_INT}},\t\t\\\n   {\"reg_or_neg_short_operand\", {SUBREG, REG, CONST_INT}},\t\\\n@@ -2652,12 +2623,7 @@ extern int any_operand ();\n extern int short_cint_operand ();\n extern int u_short_cint_operand ();\n extern int non_short_cint_operand ();\n-extern int gpc_reg0_operand ();\n-extern int gpc_reg3_operand ();\n-extern int gpc_reg4_operand ();\n extern int gpc_reg_operand ();\n-extern int cc_reg0_operand ();\n-extern int cc_reg1_operand ();\n extern int cc_reg_operand ();\n extern int reg_or_short_operand ();\n extern int reg_or_neg_short_operand ();"}, {"sha": "343825888fd36a4b25d58c84ecbb54f43204b278", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 90, "deletions": 76, "changes": 166, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fada905b06e98c850a5925e4303420287ee0f121/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fada905b06e98c850a5925e4303420287ee0f121/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=fada905b06e98c850a5925e4303420287ee0f121", "patch": "@@ -1294,27 +1294,14 @@\n     {\n       emit_move_insn (gen_rtx (REG, SImode, 3), operands[1]);\n       emit_move_insn (gen_rtx (REG, SImode, 4), operands[2]);\n-      emit_insn (gen_divmodsi4_common ());\n+      emit_insn (gen_divss_call ());\n       emit_move_insn (operands[0], gen_rtx (REG, SImode, 3));\n       emit_move_insn (operands[3], gen_rtx (REG, SImode, 4));\n       DONE;\n     }\n }\")\n \n-(define_insn \"divmodsi4_common\"\n-  [(set (reg:SI 3)\n-\t(div:SI (reg:SI 3) (reg:SI 4)))\n-   (set (reg:SI 4)\n-\t(mod:SI (reg:SI 3) (reg:SI 4)))\n-   (clobber (match_scratch:SI 0 \"=l\"))\n-   (clobber (match_scratch:SI 1 \"=z\"))\n-   (clobber (match_scratch:CC 2 \"=x\"))\n-   (clobber (match_scratch:CC 3 \"=t\"))]\n-  \"! TARGET_POWER && ! TARGET_POWERPC\"\n-  \"bla __divss\"\n-  [(set_attr \"type\" \"jmpreg\")])\n-\n-(define_insn \"*divmodsi4_power\"\n+(define_insn \"\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(div:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n \t\t(match_operand:SI 2 \"gpc_reg_operand\" \"r\")))\n@@ -1324,7 +1311,7 @@\n   \"divs %0,%1,%2\"\n   [(set_attr \"type\" \"idiv\")])\n \n-(define_insn \"*divsi3_powerpc\"\n+(define_insn \"\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n         (div:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n                 (match_operand:SI 2 \"gpc_reg_operand\" \"r\")))]\n@@ -1343,24 +1330,13 @@\n     {\n       emit_move_insn (gen_rtx (REG, SImode, 3), operands[1]);\n       emit_move_insn (gen_rtx (REG, SImode, 4), operands[2]);\n-      emit_insn (gen_udivsi3_common ());\n+      emit_insn (gen_quous_call ());\n       emit_move_insn (operands[0], gen_rtx (REG, SImode, 3));\n       DONE;\n     }\n }\")\n \n-(define_insn \"udivsi3_common\"\n-  [(set (reg:SI 3)\n-\t(udiv:SI (reg:SI 3) (reg:SI 4)))\n-   (clobber (match_scratch:SI 0 \"=l\"))\n-   (clobber (match_scratch:SI 1 \"=z\"))\n-   (clobber (match_scratch:CC 2 \"=x\"))\n-   (clobber (match_scratch:CC 3 \"=t\"))]\n-  \"! TARGET_POWER && ! TARGET_POWERPC\"\n-  \"bla __quous\"\n-  [(set_attr \"type\" \"jmpreg\")])\n-\n-(define_insn \"*udivsi3_powerpc\"\n+(define_insn \"\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n         (udiv:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n                  (match_operand:SI 2 \"gpc_reg_operand\" \"r\")))]\n@@ -1390,21 +1366,12 @@\n     {\n       emit_move_insn (gen_rtx (REG, SImode, 3), operands[1]);\n       emit_move_insn (gen_rtx (REG, SImode, 4), operands[2]);\n-      emit_insn (gen_divsi3_common ());\n+      emit_insn (gen_quoss_call ());\n       emit_move_insn (operands[0], gen_rtx (REG, SImode, 3));\n       DONE;\n     }\n }\")\n \n-(define_insn \"divsi3_common\"\n-  [(set (reg:SI 3)\n-\t(div:SI (reg:SI 3) (reg:SI 4)))\n-   (clobber (match_scratch:SI 0 \"=l\"))\n-   (clobber (match_scratch:SI 1 \"=z\"))]\n-  \"! TARGET_POWER && ! TARGET_POWERPC\"\n-  \"bla __quoss\"\n-  [(set_attr \"type\" \"jmpreg\")])\n-\n (define_expand \"modsi3\"\n   [(use (match_operand:SI 0 \"gpc_reg_operand\" \"\"))\n    (use (match_operand:SI 1 \"gpc_reg_operand\" \"\"))\n@@ -1532,7 +1499,7 @@\n       {\n \temit_move_insn (gen_rtx (REG, SImode, 3), operands[1]);\n \temit_move_insn (gen_rtx (REG, SImode, 4), operands[2]);\n-\temit_insn (gen_udivmodsi4_common ());\n+\temit_insn (gen_divus_call ());\n \temit_move_insn (operands[0], gen_rtx (REG, SImode, 3));\n \temit_move_insn (operands[3], gen_rtx (REG, SImode, 4));\n \tDONE;\n@@ -1558,19 +1525,71 @@\n   DONE;\n }\")\n \n-(define_insn \"udivmodsi4_common\"\n+;; AIX architecture-independent common-mode multiply (DImode),\n+;; divide/modulus, and quotient subroutine calls.  Input operands in R3 and\n+;; R4; results in R3 and sometimes R4; link register always clobbered by bla\n+;; instruction; R0 sometimes clobbered; also, MQ sometimes clobbered but\n+;; assumed unused if generating common-mode, so ignore.\n+(define_insn \"mulh_call\"\n+  [(set (reg:SI 3)\n+\t(truncate:SI\n+\t (lshiftrt:DI (mult:DI (sign_extend:DI (reg:SI 3))\n+\t\t\t       (sign_extend:DI (reg:SI 4)))\n+\t\t      (const_int 32))))\n+   (clobber (match_scratch:SI 0 \"=l\"))\n+   (clobber (reg:SI 4))]\n+  \"! TARGET_POWER && ! TARGET_POWERPC\"\n+  \"bla __mulh\")\n+\n+(define_insn \"mull_call\"\n+  [(set (reg:DI 3)\n+\t(mult:DI (sign_extend:DI (reg:SI 3))\n+\t\t (sign_extend:DI (reg:SI 4))))\n+   (clobber (match_scratch:SI 0 \"=l\"))\n+   (clobber (reg:SI 0))]\n+  \"! TARGET_POWER && ! TARGET_POWERPC\"\n+  \"bla __mull\")\n+\n+(define_insn \"divss_call\"\n+  [(set (reg:SI 3)\n+\t(div:SI (reg:SI 3) (reg:SI 4)))\n+   (set (reg:SI 4)\n+\t(mod:SI (reg:SI 3) (reg:SI 4)))\n+   (clobber (match_scratch:SI 0 \"=l\"))\n+   (clobber (reg:SI 0))]\n+  \"! TARGET_POWER && ! TARGET_POWERPC\"\n+  \"bla __divss\")\n+\n+(define_insn \"divus_call\"\n   [(set (reg:SI 3)\n \t(udiv:SI (reg:SI 3) (reg:SI 4)))\n    (set (reg:SI 4)\n \t(umod:SI (reg:SI 3) (reg:SI 4)))\n    (clobber (match_scratch:SI 0 \"=l\"))\n-   (clobber (match_scratch:SI 1 \"=z\"))\n-   (clobber (match_scratch:CC 2 \"=x\"))\n-   (clobber (match_scratch:CC 3 \"=t\"))]\n+   (clobber (reg:SI 0))\n+   (clobber (match_scratch:CC 1 \"=x\"))\n+   (clobber (reg:CC 69))]\n   \"! TARGET_POWER && ! TARGET_POWERPC\"\n-  \"bla __divus\"\n-  [(set_attr \"type\" \"jmpreg\")])\n+  \"bla __divus\")\n \n+(define_insn \"quoss_call\"\n+  [(set (reg:SI 3)\n+\t(div:SI (reg:SI 3) (reg:SI 4)))\n+   (clobber (match_scratch:SI 0 \"=l\"))\n+   (clobber (match_scratch:CC 1 \"=x\"))\n+   (clobber (reg:CC 69))]\n+  \"! TARGET_POWER && ! TARGET_POWERPC\"\n+  \"bla __quoss\")\n+\n+(define_insn \"quous_call\"\n+  [(set (reg:SI 3)\n+\t(udiv:SI (reg:SI 3) (reg:SI 4)))\n+   (clobber (match_scratch:SI 0 \"=l\"))\n+   (clobber (reg:SI 0))\n+   (clobber (match_scratch:CC 1 \"=x\"))\n+   (clobber (reg:CC 69))]\n+  \"! TARGET_POWER && ! TARGET_POWERPC\"\n+  \"bla __quous\")\n \f\n (define_insn \"andsi3\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r,r,r\")\n@@ -3672,10 +3691,14 @@\n {\n   if (! TARGET_POWER && ! TARGET_POWERPC)\n     {\n+      int endian = (WORDS_BIG_ENDIAN == 0);\n       emit_move_insn (gen_rtx (REG, SImode, 3), operands[1]);\n       emit_move_insn (gen_rtx (REG, SImode, 4), operands[2]);\n-      emit_insn (gen_mulsidi3_common ());\n-      emit_move_insn (operands[0], gen_rtx (REG, DImode, 3));\n+      emit_insn (gen_mull_call ());\n+      emit_move_insn (operand_subword (operands[0], endian, 0, DImode),\n+\t\t      gen_rtx (REG, SImode, 3));\n+      emit_move_insn (operand_subword (operands[0], 1 - endian, 0, DImode),\n+\t\t      gen_rtx (REG, SImode, 4));\n       DONE;\n     }\n   else if (TARGET_POWER)\n@@ -3685,16 +3708,6 @@\n     }\n }\")\n \n-(define_insn \"mulsidi3_common\"\n-  [(set (reg:DI 3)\n-\t(mult:DI (sign_extend:DI (reg:SI 3))\n-\t\t (sign_extend:DI (reg:SI 4))))\n-   (clobber (match_scratch:SI 0 \"=l\"))\n-   (clobber (match_scratch:SI 1 \"=z\"))]\n-  \"! TARGET_POWER && ! TARGET_POWERPC\"\n-  \"bla __mull\"\n-  [(set_attr \"type\" \"jmpreg\")])\n-\n (define_insn \"mulsidi3_mq\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n \t(mult:DI (sign_extend:DI (match_operand:SI 1 \"gpc_reg_operand\" \"%r\"))\n@@ -3788,7 +3801,7 @@\n     {\n       emit_move_insn (gen_rtx (REG, SImode, 3), operands[1]);\n       emit_move_insn (gen_rtx (REG, SImode, 4), operands[2]);\n-      emit_insn (gen_smulsi3_highpart_common ());\n+      emit_insn (gen_mulh_call ());\n       emit_move_insn (operands[0], gen_rtx (REG, SImode, 3));\n       DONE;\n     }\n@@ -3799,34 +3812,26 @@\n     }\n }\")\n \n-(define_insn \"smulsi3_highpart_common\"\n-  [(set (reg:SI 3)\n-\t(truncate:SI\n-\t (lshiftrt:DI (mult:DI (sign_extend:DI (reg:SI 3))\n-\t\t\t       (sign_extend:DI (reg:SI 4)))\n-\t\t      (const_int 32))))\n-   (clobber (match_scratch:SI 0 \"=l\"))\n-   (clobber (reg:SI 4))]\n-  \"! TARGET_POWER && ! TARGET_POWERPC\"\n-  \"bla __mulh\"\n-  [(set_attr \"type\" \"jmpreg\")])\n-\n (define_insn \"smulsi3_highpart_mq\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(truncate:SI\n-\t (lshiftrt:DI (mult:DI (sign_extend:DI (match_operand:SI 1 \"gpc_reg_operand\" \"%r\"))\n-\t\t\t       (sign_extend:DI (match_operand:SI 2 \"gpc_reg_operand\" \"r\")))\n+\t (lshiftrt:DI (mult:DI (sign_extend:DI\n+\t\t\t\t(match_operand:SI 1 \"gpc_reg_operand\" \"%r\"))\n+\t\t\t       (sign_extend:DI\n+\t\t\t\t(match_operand:SI 2 \"gpc_reg_operand\" \"r\")))\n \t\t      (const_int 32))))\n    (clobber (match_scratch:SI 3 \"=q\"))]\n   \"TARGET_POWER\"\n   \"mul %0,%1,%2\"\n   [(set_attr \"type\" \"imul\")])\n \n-(define_insn \"*smulsi3_highpart_powerpc\"\n+(define_insn \"\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(truncate:SI\n-\t (lshiftrt:DI (mult:DI (sign_extend:DI (match_operand:SI 1 \"gpc_reg_operand\" \"%r\"))\n-\t\t\t       (sign_extend:DI (match_operand:SI 2 \"gpc_reg_operand\" \"r\")))\n+\t (lshiftrt:DI (mult:DI (sign_extend:DI\n+\t\t\t\t(match_operand:SI 1 \"gpc_reg_operand\" \"%r\"))\n+\t\t\t       (sign_extend:DI\n+\t\t\t\t(match_operand:SI 2 \"gpc_reg_operand\" \"r\")))\n \t\t      (const_int 32))))]\n   \"TARGET_POWERPC\"\n   \"mulhw %0,%1,%2\"\n@@ -4407,6 +4412,15 @@\n   \"\"\n   \"\n {\n+  if (GET_CODE (operands[0]) == MEM && GET_CODE (operands[1]) == MEM)\n+    {\n+      emit_move_insn (operand_subword (operands[0], 1, 1, DFmode),\n+\t\t      operand_subword_force (operands[1], 1, DFmode));\n+      emit_move_insn (operand_subword (operands[0], 0, 1, DFmode),\n+\t\t      operand_subword_force (operands[1], 0, DFmode));\n+      DONE;\n+    }\n+\n   if (GET_CODE (operands[0]) != REG)\n     operands[1] = force_reg (DFmode, operands[1]);\n "}]}