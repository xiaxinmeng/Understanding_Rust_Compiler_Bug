{"sha": "d1f985421fff69c6956206f9606c4a9e35b32a70", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDFmOTg1NDIxZmZmNjljNjk1NjIwNmY5NjA2YzRhOWUzNWIzMmE3MA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2012-12-19T13:53:18Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-12-19T13:53:18Z"}, "message": "re PR lto/55736 (lto ICE: tree code ''junl is not supported in LTO streams)\n\n2012-12-19  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/55736\n\tPR tree-optimization/55703\n\t* gimplify.c (prune_expr_location): New function.\n\t(unshare_expr_without_location): Likewise.\n\t* tree.h (unshare_expr_without_location): Declare.\n\t* ipa-prop.c (prune_expression_for_jf): Remove.\n\t(prune_expression_for_jf_1): Likewise.\n\t(ipa_set_jf_constant): Use unshare_expr_without_location.\n\t(ipa_set_jf_arith_pass_through): Likewise.\n\t(determine_known_aggregate_parts): Likewise.\n\t* tree-switch-conversion.c (build_constructors): Use\n\tunshare_expr_without_location on all constructor elements.\n\n\t* gcc.dg/lto/pr55703_0.c: New testcase.\n\nFrom-SVN: r194609", "tree": {"sha": "16f545224cd8116189b4ccd1992329c439c78de9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16f545224cd8116189b4ccd1992329c439c78de9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1f985421fff69c6956206f9606c4a9e35b32a70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1f985421fff69c6956206f9606c4a9e35b32a70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1f985421fff69c6956206f9606c4a9e35b32a70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1f985421fff69c6956206f9606c4a9e35b32a70/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c354951b7ef67f8bbbca3db79734db73880d17a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c354951b7ef67f8bbbca3db79734db73880d17a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c354951b7ef67f8bbbca3db79734db73880d17a2"}], "stats": {"total": 141, "additions": 111, "deletions": 30}, "files": [{"sha": "c7f3643ef7bc550c5dc627b0ad1b4fc49a0cf308", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1f985421fff69c6956206f9606c4a9e35b32a70/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1f985421fff69c6956206f9606c4a9e35b32a70/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d1f985421fff69c6956206f9606c4a9e35b32a70", "patch": "@@ -1,3 +1,18 @@\n+2012-12-19  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/55736\n+\tPR tree-optimization/55703\n+\t* gimplify.c (prune_expr_location): New function.\n+\t(unshare_expr_without_location): Likewise.\n+\t* tree.h (unshare_expr_without_location): Declare.\n+\t* ipa-prop.c (prune_expression_for_jf): Remove.\n+\t(prune_expression_for_jf_1): Likewise.\n+\t(ipa_set_jf_constant): Use unshare_expr_without_location.\n+\t(ipa_set_jf_arith_pass_through): Likewise.\n+\t(determine_known_aggregate_parts): Likewise.\n+\t* tree-switch-conversion.c (build_constructors): Use\n+\tunshare_expr_without_location on all constructor elements.\n+\n 2012-12-19  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n \t* target.def: Define canonicalize_comparison hook."}, {"sha": "f628b8ab3c0d26cc5a5230de29c3b1d8c79a9d02", "filename": "gcc/gimplify.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1f985421fff69c6956206f9606c4a9e35b32a70/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1f985421fff69c6956206f9606c4a9e35b32a70/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=d1f985421fff69c6956206f9606c4a9e35b32a70", "patch": "@@ -1059,6 +1059,30 @@ unshare_expr (tree expr)\n   walk_tree (&expr, mostly_copy_tree_r, NULL, NULL);\n   return expr;\n }\n+\n+/* Worker for unshare_expr_without_location.  */\n+\n+static tree\n+prune_expr_location (tree *tp, int *walk_subtrees, void *)\n+{\n+  if (EXPR_P (*tp))\n+    SET_EXPR_LOCATION (*tp, UNKNOWN_LOCATION);\n+  else\n+    *walk_subtrees = 0;\n+  return NULL_TREE;\n+}\n+\n+/* Similar to unshare_expr but also prune all expression locations\n+   from EXPR.  */\n+\n+tree\n+unshare_expr_without_location (tree expr)\n+{\n+  walk_tree (&expr, mostly_copy_tree_r, NULL, NULL);\n+  if (EXPR_P (expr))\n+    walk_tree (&expr, prune_expr_location, NULL, NULL);\n+  return expr;\n+}\n \f\n /* WRAPPER is a code such as BIND_EXPR or CLEANUP_POINT_EXPR which can both\n    contain statements and have a value.  Assign its value to a temporary"}, {"sha": "d225b85f7d019f4906577a4fbfee171f2b749ff1", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 3, "deletions": 28, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1f985421fff69c6956206f9606c4a9e35b32a70/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1f985421fff69c6956206f9606c4a9e35b32a70/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=d1f985421fff69c6956206f9606c4a9e35b32a70", "patch": "@@ -295,31 +295,6 @@ ipa_print_all_jump_functions (FILE *f)\n     }\n }\n \n-/* Worker for prune_expression_for_jf.  */\n-\n-static tree\n-prune_expression_for_jf_1 (tree *tp, int *walk_subtrees, void *)\n-{\n-  if (EXPR_P (*tp))\n-    SET_EXPR_LOCATION (*tp, UNKNOWN_LOCATION);\n-  else\n-    *walk_subtrees = 0;\n-  return NULL_TREE;\n-}\n-\n-/* Return the expression tree EXPR unshared and with location stripped off.  */\n-\n-static tree\n-prune_expression_for_jf (tree exp)\n-{\n-  if (EXPR_P (exp))\n-    {\n-      exp = unshare_expr (exp);\n-      walk_tree (&exp, prune_expression_for_jf_1, NULL, NULL);\n-    }\n-  return exp;\n-}\n-\n /* Set JFUNC to be a known type jump function.  */\n \n static void\n@@ -341,7 +316,7 @@ ipa_set_jf_constant (struct ipa_jump_func *jfunc, tree constant)\n   if (constant && EXPR_P (constant))\n     SET_EXPR_LOCATION (constant, UNKNOWN_LOCATION);\n   jfunc->type = IPA_JF_CONST;\n-  jfunc->value.constant = prune_expression_for_jf (constant);\n+  jfunc->value.constant = unshare_expr_without_location (constant);\n }\n \n /* Set JFUNC to be a simple pass-through jump function.  */\n@@ -363,7 +338,7 @@ ipa_set_jf_arith_pass_through (struct ipa_jump_func *jfunc, int formal_id,\n \t\t\t       tree operand, enum tree_code operation)\n {\n   jfunc->type = IPA_JF_PASS_THROUGH;\n-  jfunc->value.pass_through.operand = prune_expression_for_jf (operand);\n+  jfunc->value.pass_through.operand = unshare_expr_without_location (operand);\n   jfunc->value.pass_through.formal_id = formal_id;\n   jfunc->value.pass_through.operation = operation;\n   jfunc->value.pass_through.agg_preserved = false;\n@@ -1385,7 +1360,7 @@ determine_known_aggregate_parts (gimple call, tree arg,\n \t    {\n \t      struct ipa_agg_jf_item item;\n \t      item.offset = list->offset - arg_offset;\n-\t      item.value = prune_expression_for_jf (list->constant);\n+\t      item.value = unshare_expr_without_location (list->constant);\n \t      jfunc->agg.items->quick_push (item);\n \t    }\n \t  list = list->next;"}, {"sha": "8ae2361e46cdcaae9c1816f8bd823089d39da503", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1f985421fff69c6956206f9606c4a9e35b32a70/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1f985421fff69c6956206f9606c4a9e35b32a70/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d1f985421fff69c6956206f9606c4a9e35b32a70", "patch": "@@ -1,3 +1,9 @@\n+2012-12-19  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/55736\n+\tPR tree-optimization/55703\n+\t* gcc.dg/lto/pr55703_0.c: New testcase.\n+\n 2012-12-19  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/55730"}, {"sha": "1c4e04b3a37cd3b3059d0f365317957b23136fd5", "filename": "gcc/testsuite/gcc.dg/lto/pr55703_0.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1f985421fff69c6956206f9606c4a9e35b32a70/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr55703_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1f985421fff69c6956206f9606c4a9e35b32a70/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr55703_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr55703_0.c?ref=d1f985421fff69c6956206f9606c4a9e35b32a70", "patch": "@@ -0,0 +1,59 @@\n+/* { dg-lto-do run } */\n+/* { dg-lto-options { { -O2 -flto -fno-tree-copy-prop -fno-tree-dce } } } */\n+\n+int try (int num) {\n+  __label__ lab1, lab2, lab3, lab4, lab5, lab6, default_lab;\n+\n+  void *do_switch (int num) {\n+    switch(num) {\n+    case 1:\n+      return &&lab1;\n+    case 2:\n+      return &&lab2;\n+    case 3:\n+      return &&lab3;\n+    case 4:\n+      return &&lab4;\n+    case 5:\n+      return &&lab5;\n+    case 6:\n+      return &&lab6;\n+    default:\n+      return &&default_lab;\n+    }\n+  }\n+\n+  goto *do_switch (num);\n+\n+ lab1:\n+  return 1;\n+\n+ lab2:\n+  return 2;\n+\n+ lab3:\n+  return 3;\n+\n+ lab4:\n+  return 4;\n+\n+ lab5:\n+  return 5;\n+\n+ lab6:\n+  return 6;\n+\n+ default_lab:\n+  return -1;\n+}\n+\n+main()\n+{\n+  int i;\n+  for (i = 1; i <= 6; i++)\n+    {\n+      if (try (i) != i)\n+\t__builtin_abort();\n+    }\n+  __builtin_exit(0);\n+}"}, {"sha": "d250a94567ad73219e250c8bd1ffced504f8aa92", "filename": "gcc/tree-switch-conversion.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1f985421fff69c6956206f9606c4a9e35b32a70/gcc%2Ftree-switch-conversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1f985421fff69c6956206f9606c4a9e35b32a70/gcc%2Ftree-switch-conversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-switch-conversion.c?ref=d1f985421fff69c6956206f9606c4a9e35b32a70", "patch": "@@ -873,7 +873,8 @@ build_constructors (gimple swtch, struct switch_conv_info *info)\n \t      constructor_elt elt;\n \n \t      elt.index = int_const_binop (MINUS_EXPR, pos, info->range_min);\n-\t      elt.value = info->default_values[k];\n+\t      elt.value\n+\t\t= unshare_expr_without_location (info->default_values[k]);\n \t      info->constructors[k]->quick_push (elt);\n \t    }\n \n@@ -899,7 +900,7 @@ build_constructors (gimple swtch, struct switch_conv_info *info)\n \t      constructor_elt elt;\n \n \t      elt.index = int_const_binop (MINUS_EXPR, pos, info->range_min);\n-\t      elt.value = val;\n+\t      elt.value = unshare_expr_without_location (val);\n \t      info->constructors[j]->quick_push (elt);\n \n \t      pos = int_const_binop (PLUS_EXPR, pos, integer_one_node);"}, {"sha": "b68328ec2aff92e9880d1ae655a3d5bc78f35f52", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1f985421fff69c6956206f9606c4a9e35b32a70/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1f985421fff69c6956206f9606c4a9e35b32a70/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=d1f985421fff69c6956206f9606c4a9e35b32a70", "patch": "@@ -5606,6 +5606,7 @@ extern void change_decl_assembler_name (tree, tree);\n \f\n /* In gimplify.c */\n extern tree unshare_expr (tree);\n+extern tree unshare_expr_without_location (tree);\n \f\n /* In stmt.c */\n "}]}