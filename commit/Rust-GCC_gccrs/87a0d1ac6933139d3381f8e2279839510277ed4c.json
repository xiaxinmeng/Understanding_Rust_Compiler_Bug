{"sha": "87a0d1ac6933139d3381f8e2279839510277ed4c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODdhMGQxYWM2OTMzMTM5ZDMzODFmOGUyMjc5ODM5NTEwMjc3ZWQ0Yw==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-10-15T15:44:05Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-10-15T15:44:05Z"}, "message": "Remove code accidentally added twice.\n\nFrom-SVN: r15909", "tree": {"sha": "754ff643316073f81afd1d9fd07b4591da73b40a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/754ff643316073f81afd1d9fd07b4591da73b40a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87a0d1ac6933139d3381f8e2279839510277ed4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87a0d1ac6933139d3381f8e2279839510277ed4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87a0d1ac6933139d3381f8e2279839510277ed4c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87a0d1ac6933139d3381f8e2279839510277ed4c/comments", "author": null, "committer": null, "parents": [{"sha": "434fc96fcae291cf68962aff1176814c500cc211", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/434fc96fcae291cf68962aff1176814c500cc211", "html_url": "https://github.com/Rust-GCC/gccrs/commit/434fc96fcae291cf68962aff1176814c500cc211"}], "stats": {"total": 70, "additions": 0, "deletions": 70}, "files": [{"sha": "ed16c8680cd0d06af719623997bdd4de5a3ddb7a", "filename": "libiberty/cplus-dem.c", "status": "modified", "additions": 0, "deletions": 70, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87a0d1ac6933139d3381f8e2279839510277ed4c/libiberty%2Fcplus-dem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87a0d1ac6933139d3381f8e2279839510277ed4c/libiberty%2Fcplus-dem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcplus-dem.c?ref=87a0d1ac6933139d3381f8e2279839510277ed4c", "patch": "@@ -293,9 +293,6 @@ string_prependn PARAMS ((string *, const char *, int));\n static int\n get_count PARAMS ((const char **, int *));\n \n-static int \n-consume_count_with_underscores PARAMS ((const char**));\n-\n static int\n consume_count PARAMS ((const char **));\n \n@@ -345,42 +342,6 @@ consume_count (type)\n }\n \n \n-/* Like consume_count, but for counts that are preceeded and followed\n-   by '_' if they are greater than 10.  Also, -1 is returned for\n-   failure, since 0 can be a valid value.  */\n-\n-static int\n-consume_count_with_underscores (mangled)\n-     const char **mangled;\n-{\n-  int idx;\n-\n-  if (**mangled == '_')\n-    {\n-      (*mangled)++;\n-      if (!isdigit (**mangled))\n-\treturn -1;\n-\n-      idx = consume_count (mangled);\n-      if (**mangled != '_')\n-\t/* The trailing underscore was missing. */\n-\treturn -1;\n-\t    \n-      (*mangled)++;\n-    }\n-  else\n-    {\n-      if (**mangled < '0' || **mangled > '9')\n-\treturn -1;\n-\t    \n-      idx = **mangled - '0';\n-      (*mangled)++;\n-    }\n-\n-  return idx;\n-}\n-\n-\n /* Like consume_count, but for counts that are preceeded and followed\n    by '_' if they are greater than 10.  Also, -1 is returned for\n    failure, since 0 can be a valid value.  */\n@@ -2387,37 +2348,6 @@ do_type (work, mangled, result)\n       }\n     break;\n \n-    case 'X':\n-    case 'Y':\n-      /* A template parm.  We substitute the corresponding argument. */\n-      {\n-\tint idx;\n-\tint lvl;\n-\n-\t(*mangled)++;\n-\tidx = consume_count_with_underscores (mangled);\n-\n-\tif (idx == -1 \n-\t    || (work->tmpl_argvec && idx >= work->ntmpl_args)\n-\t    || consume_count_with_underscores (mangled) == -1)\n-\t  {\n-\t    success = 0;\n-\t    break;\n-\t  }\n-\n-\tif (work->tmpl_argvec)\n-\t  string_append (result, work->tmpl_argvec[idx]);\n-\telse\n-\t  {\n-\t    char buf[10];\n-\t    sprintf(buf, \"T%d\", idx);\n-\t    string_append (result, buf);\n-\t  }\n-\n-\tsuccess = 1;\n-      }\n-    break;\n-\n     default:\n       success = demangle_fund_type (work, mangled, result);\n       break;"}]}