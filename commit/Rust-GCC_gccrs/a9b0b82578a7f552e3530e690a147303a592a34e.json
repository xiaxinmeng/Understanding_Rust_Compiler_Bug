{"sha": "a9b0b82578a7f552e3530e690a147303a592a34e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTliMGI4MjU3OGE3ZjU1MmUzNTMwZTY5MGExNDczMDNhNTkyYTM0ZQ==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@apple.com", "date": "2005-12-05T20:38:37Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2005-12-05T20:38:37Z"}, "message": "Index: gcc/ChangeLog\n2005-12-05  Geoffrey Keating  <geoffk@apple.com>\n\n\t* varasm.c (default_binds_local_p_1): Weakrefs don't bind locally.\n\tA hidden weak object does bind locally.  Strong linkonce data\n\tcounts like any other strong symbol for binding.\n\t(weak_finish_1): Don't specially handle weakrefs, they no longer\n\tarrive here.\n\t(assemble_alias): Weakrefs can't be TREE_PUBLIC yet.\n\t* c-common.c (handle_alias_attribute): Allow static aliases\n\tof variables.\n\t(handle_weakref_attribute): Don't call declare_weak on weakrefs.\n\t* gthr-dce.h: Make weakrefs static.\n\t* gthr-tpf.h: Likewise.\n\t* gthr-solaris.h: Likewise.\n\t* gthr-posix.h: Likewise.\n\t* gthr-posix95.h: Likewise.\n\t* config/darwin.c (darwin_encode_section_info): static weakref\n\tvariables are not necessarily defined in this translation unit.\n\t* doc/extend.texi (Function Attributes): Mention that an alias\n\tattribute creates a definition for the thing it's attached to.\n\tChange the documentation for weakref to say that the thing\n\tit's attached to must be static.\n\nIndex: gcc/testsuite/ChangeLog\n2005-12-05  Geoffrey Keating  <geoffk@apple.com>\n\n\t* g++.old-deja/g++.abi/vtable2.C: Make weakrefs static.\n\t* gcc.dg/attr-weakref-1.c: Modify to not try to test public weakrefs,\n\tand to work on Darwin.\n\t* gcc.dg/attr-weakref-1b.c: New file.\n\t* gcc.dg/attr-weakref-2.c: New test.\n\t* gcc.dg/darwin-weakref-1.c: New test.\n\nFrom-SVN: r108074", "tree": {"sha": "5e7f04633347fa5f7ca0e1b9e1b991f1227bdea4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e7f04633347fa5f7ca0e1b9e1b991f1227bdea4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9b0b82578a7f552e3530e690a147303a592a34e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9b0b82578a7f552e3530e690a147303a592a34e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9b0b82578a7f552e3530e690a147303a592a34e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9b0b82578a7f552e3530e690a147303a592a34e/comments", "author": {"login": "geoffk01", "id": 31905243, "node_id": "MDQ6VXNlcjMxOTA1MjQz", "avatar_url": "https://avatars.githubusercontent.com/u/31905243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk01", "html_url": "https://github.com/geoffk01", "followers_url": "https://api.github.com/users/geoffk01/followers", "following_url": "https://api.github.com/users/geoffk01/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk01/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk01/subscriptions", "organizations_url": "https://api.github.com/users/geoffk01/orgs", "repos_url": "https://api.github.com/users/geoffk01/repos", "events_url": "https://api.github.com/users/geoffk01/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk01/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "68e58c33468f3523c1eb6232d0a4d1e949db3011", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68e58c33468f3523c1eb6232d0a4d1e949db3011", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68e58c33468f3523c1eb6232d0a4d1e949db3011"}], "stats": {"total": 259, "additions": 179, "deletions": 80}, "files": [{"sha": "29a37f44afb03321f5fa5f5a1196b1b3348d6bac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9b0b82578a7f552e3530e690a147303a592a34e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9b0b82578a7f552e3530e690a147303a592a34e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a9b0b82578a7f552e3530e690a147303a592a34e", "patch": "@@ -1,5 +1,26 @@\n 2005-12-05  Geoffrey Keating  <geoffk@apple.com>\n \n+\t* varasm.c (default_binds_local_p_1): Weakrefs don't bind locally.\n+\tA hidden weak object does bind locally.  Strong linkonce data\n+\tcounts like any other strong symbol for binding.\n+\t(weak_finish_1): Don't specially handle weakrefs, they no longer\n+\tarrive here.\n+\t(assemble_alias): Weakrefs can't be TREE_PUBLIC yet.\n+\t* c-common.c (handle_alias_attribute): Allow static aliases\n+\tof variables.\n+\t(handle_weakref_attribute): Don't call declare_weak on weakrefs.\n+\t* gthr-dce.h: Make weakrefs static.\n+\t* gthr-tpf.h: Likewise.\n+\t* gthr-solaris.h: Likewise.\n+\t* gthr-posix.h: Likewise.\n+\t* gthr-posix95.h: Likewise.\n+\t* config/darwin.c (darwin_encode_section_info): static weakref\n+\tvariables are not necessarily defined in this translation unit.\n+\t* doc/extend.texi (Function Attributes): Mention that an alias\n+\tattribute creates a definition for the thing it's attached to.\n+\tChange the documentation for weakref to say that the thing\n+\tit's attached to must be static.\n+\n \t* config/rs6000/host-darwin.c (segv_handler): Unblock SEGV so\n \twe don't go into an infinite loop.\n "}, {"sha": "557cd554a8fa83ebaae8c8afc104262f17512498", "filename": "gcc/c-common.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9b0b82578a7f552e3530e690a147303a592a34e/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9b0b82578a7f552e3530e690a147303a592a34e/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=a9b0b82578a7f552e3530e690a147303a592a34e", "patch": "@@ -4751,7 +4751,12 @@ handle_alias_attribute (tree *node, tree name, tree args,\n   tree decl = *node;\n \n   if ((TREE_CODE (decl) == FUNCTION_DECL && DECL_INITIAL (decl))\n-      || (TREE_CODE (decl) != FUNCTION_DECL && !DECL_EXTERNAL (decl)))\n+      || (TREE_CODE (decl) != FUNCTION_DECL \n+\t  && TREE_PUBLIC (decl) && !DECL_EXTERNAL (decl))\n+      /* A static variable declaration is always a tentative definition,\n+\t but the alias is a non-tentative definition which overrides.  */\n+      || (TREE_CODE (decl) != FUNCTION_DECL \n+\t  && ! TREE_PUBLIC (decl) && DECL_INITIAL (decl)))\n     {\n       error (\"%q+D defined both normally and as an alias\", decl);\n       *no_add_attrs = true;\n@@ -4816,18 +4821,21 @@ handle_weakref_attribute (tree *node, tree ARG_UNUSED (name), tree args,\n       attr = tree_cons (get_identifier (\"weakref\"), NULL_TREE, attr);\n \n       *no_add_attrs = true;\n+\n+      decl_attributes (node, attr, flags);\n     }\n   else\n     {\n       if (lookup_attribute (\"alias\", DECL_ATTRIBUTES (*node)))\n \terror (\"%Jweakref attribute must appear before alias attribute\",\n \t       *node);\n \n-      attr = tree_cons (get_identifier (\"weak\"), NULL_TREE, attr);\n+      /* Can't call declare_weak because it wants this to be TREE_PUBLIC,\n+\t and that isn't supported; and because it wants to add it to\n+\t the list of weak decls, which isn't helpful.  */\n+      DECL_WEAK (*node) = 1;\n     }\n \n-  decl_attributes (node, attr, flags);\n-\n   return NULL_TREE;\n }\n "}, {"sha": "49c4114c2d2bc3273da5035bc3cab439601b1adf", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9b0b82578a7f552e3530e690a147303a592a34e/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9b0b82578a7f552e3530e690a147303a592a34e/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=a9b0b82578a7f552e3530e690a147303a592a34e", "patch": "@@ -1003,6 +1003,7 @@ darwin_encode_section_info (tree decl, rtx rtl, int first ATTRIBUTE_UNUSED)\n \n   if (!DECL_EXTERNAL (decl)\n       && (!TREE_PUBLIC (decl) || !DECL_WEAK (decl))\n+      && ! lookup_attribute (\"weakref\", DECL_ATTRIBUTES (decl))\n       && ((TREE_STATIC (decl)\n \t   && (!DECL_COMMON (decl) || !TREE_PUBLIC (decl)))\n \t  || (!DECL_COMMON (decl) && DECL_INITIAL (decl)"}, {"sha": "341d6248cdedfbed42ad963cc661d95f45eb6d54", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9b0b82578a7f552e3530e690a147303a592a34e/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9b0b82578a7f552e3530e690a147303a592a34e/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=a9b0b82578a7f552e3530e690a147303a592a34e", "patch": "@@ -1554,7 +1554,7 @@ void __f () @{ /* @r{Do something.} */; @}\n void f () __attribute__ ((weak, alias (\"__f\")));\n @end smallexample\n \n-declares @samp{f} to be a weak alias for @samp{__f}.  In C++, the\n+defines @samp{f} to be a weak alias for @samp{__f}.  In C++, the\n mangled name for the target must be used.  It is an error if @samp{__f}\n is not defined in the same translation unit.\n \n@@ -2376,12 +2376,12 @@ implicitly marks the declaration as @code{weak}.  Without a\n @code{weakref} is equivalent to @code{weak}.\n \n @smallexample\n-extern int x() __attribute__ ((weakref (\"y\")));\n+static int x() __attribute__ ((weakref (\"y\")));\n /* is equivalent to... */\n-extern int x() __attribute__ ((weak, weakref, alias (\"y\")));\n+static int x() __attribute__ ((weak, weakref, alias (\"y\")));\n /* and to... */\n-extern int x() __attribute__ ((weakref));\n-extern int x() __attribute__ ((alias (\"y\")));\n+static int x() __attribute__ ((weakref));\n+static int x() __attribute__ ((alias (\"y\")));\n @end smallexample\n \n A weak reference is an alias that does not by itself require a\n@@ -2396,6 +2396,9 @@ separate translation unit, renaming the alias to the aliased symbol,\n declaring it as weak, compiling the two separate translation units and\n performing a reloadable link on them.\n \n+At present, a declaration to which @code{weakref} is attached can\n+only be @code{static}.\n+\n @item externally_visible\n @cindex @code{externally_visible} attribute.\n This attribute, attached to a global variable or function nullify"}, {"sha": "fe4bba769d9d11475126cbeadc38e002968e4c8d", "filename": "gcc/gthr-dce.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9b0b82578a7f552e3530e690a147303a592a34e/gcc%2Fgthr-dce.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9b0b82578a7f552e3530e690a147303a592a34e/gcc%2Fgthr-dce.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgthr-dce.h?ref=a9b0b82578a7f552e3530e690a147303a592a34e", "patch": "@@ -64,7 +64,7 @@ typedef pthread_mutex_t __gthread_recursive_mutex_t;\n \n #if SUPPORTS_WEAK && GTHREAD_USE_WEAK\n # define __gthrw(name) \\\n-  extern __typeof(name) __gthrw_ ## name __attribute__ ((__weakref__(#name)))\n+  static __typeof(name) __gthrw_ ## name __attribute__ ((__weakref__(#name)))\n #else\n # define __gthrw_asmname(cname) __gthrw_asmnamep (__USER_LABEL_PREFIX__, cname)\n # define __gthrw_asmnamep(prefix, cname) __gthrw_string (prefix) cname"}, {"sha": "e36a76d19ab916f92da0c23b3371b214a6ec00b9", "filename": "gcc/gthr-posix.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9b0b82578a7f552e3530e690a147303a592a34e/gcc%2Fgthr-posix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9b0b82578a7f552e3530e690a147303a592a34e/gcc%2Fgthr-posix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgthr-posix.h?ref=a9b0b82578a7f552e3530e690a147303a592a34e", "patch": "@@ -60,7 +60,7 @@ typedef pthread_mutex_t __gthread_recursive_mutex_t;\n \n #if SUPPORTS_WEAK && GTHREAD_USE_WEAK\n # define __gthrw(name) \\\n-  extern __typeof(name) __gthrw_ ## name __attribute__ ((__weakref__(#name)))\n+  static __typeof(name) __gthrw_ ## name __attribute__ ((__weakref__(#name)))\n #else\n # define __gthrw_asmname(cname) __gthrw_asmnamep (__USER_LABEL_PREFIX__, cname)\n # define __gthrw_asmnamep(prefix, cname) __gthrw_string (prefix) cname"}, {"sha": "f4ee09fb0287ded86760928310fb7487773af3ac", "filename": "gcc/gthr-posix95.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9b0b82578a7f552e3530e690a147303a592a34e/gcc%2Fgthr-posix95.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9b0b82578a7f552e3530e690a147303a592a34e/gcc%2Fgthr-posix95.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgthr-posix95.h?ref=a9b0b82578a7f552e3530e690a147303a592a34e", "patch": "@@ -58,7 +58,7 @@ typedef struct {\n \n #if SUPPORTS_WEAK && GTHREAD_USE_WEAK\n # define __gthrw(name) \\\n-  extern __typeof(name) __gthrw_ ## name __attribute__ ((__weakref__(#name)))\n+  static __typeof(name) __gthrw_ ## name __attribute__ ((__weakref__(#name)))\n #else\n # define __gthrw_asmname(cname) __gthrw_asmnamep (__USER_LABEL_PREFIX__, cname)\n # define __gthrw_asmnamep(prefix, cname) __gthrw_string (prefix) cname"}, {"sha": "b0ceba6d1c4ab7bb935dc0eccc133ff66c282b00", "filename": "gcc/gthr-solaris.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9b0b82578a7f552e3530e690a147303a592a34e/gcc%2Fgthr-solaris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9b0b82578a7f552e3530e690a147303a592a34e/gcc%2Fgthr-solaris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgthr-solaris.h?ref=a9b0b82578a7f552e3530e690a147303a592a34e", "patch": "@@ -58,7 +58,7 @@ typedef struct {\n \n #if SUPPORTS_WEAK && GTHREAD_USE_WEAK\n # define __gthrw(name) \\\n-  extern __typeof(name) __gthrw_ ## name __attribute__ ((__weakref__(#name)))\n+  static __typeof(name) __gthrw_ ## name __attribute__ ((__weakref__(#name)))\n #else\n # define __gthrw_asmname(cname) __gthrw_asmnamep (__USER_LABEL_PREFIX__, cname)\n # define __gthrw_asmnamep(prefix, cname) __gthrw_string (prefix) cname"}, {"sha": "f797a49671f3c31a55cd6aa94760d3beb6af05d6", "filename": "gcc/gthr-tpf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9b0b82578a7f552e3530e690a147303a592a34e/gcc%2Fgthr-tpf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9b0b82578a7f552e3530e690a147303a592a34e/gcc%2Fgthr-tpf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgthr-tpf.h?ref=a9b0b82578a7f552e3530e690a147303a592a34e", "patch": "@@ -70,7 +70,7 @@ typedef pthread_mutex_t __gthread_recursive_mutex_t;\n \n #if SUPPORTS_WEAK && GTHREAD_USE_WEAK\n # define __gthrw(name) \\\n-  extern __typeof(name) __gthrw_ ## name __attribute__ ((__weakref__(#name)))\n+  static __typeof(name) __gthrw_ ## name __attribute__ ((__weakref__(#name)))\n #else\n # define __gthrw_asmname(cname) __gthrw_asmnamep (__USER_LABEL_PREFIX__, cname)\n # define __gthrw_asmnamep(prefix, cname) __gthrw_string (prefix) cname"}, {"sha": "1fbd36c89f92feb007aa72dd4fad3100fd8fa668", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9b0b82578a7f552e3530e690a147303a592a34e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9b0b82578a7f552e3530e690a147303a592a34e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a9b0b82578a7f552e3530e690a147303a592a34e", "patch": "@@ -1,3 +1,12 @@\n+2005-12-05  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* g++.old-deja/g++.abi/vtable2.C: Make weakrefs static.\n+\t* gcc.dg/attr-weakref-1.c: Modify to not try to test public weakrefs,\n+\tand to work on Darwin.\n+\t* gcc.dg/attr-weakref-1b.c: New file.\n+\t* gcc.dg/attr-weakref-2.c: New test.\n+\t* gcc.dg/darwin-weakref-1.c: New test.\n+\n 2005-12-05  Janis Johnson  <janis187@us.ibm.com>\n \n \tPR testsuite/25247"}, {"sha": "b64f0fc257ae27853e2c181e8baa08243b0c7a20", "filename": "gcc/testsuite/g++.old-deja/g++.abi/vtable2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9b0b82578a7f552e3530e690a147303a592a34e/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.abi%2Fvtable2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9b0b82578a7f552e3530e690a147303a592a34e/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.abi%2Fvtable2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.abi%2Fvtable2.C?ref=a9b0b82578a7f552e3530e690a147303a592a34e", "patch": "@@ -127,8 +127,8 @@ extern \"C\" {\n   /* We can use weakref here without dg-require-weak, because we know\n      the symbols are defined, so we don't actually issue the .weak\n      directives.  */\n-  void S3_s3 () __attribute__((__weakref__ (\"_ZN2S32s3Ev\")));\n-  void S4_s1 () __attribute__((__weakref__ (\"_ZN2S42s1Ev\")));\n+  static void S3_s3 () __attribute__((__weakref__ (\"_ZN2S32s3Ev\")));\n+  static void S4_s1 () __attribute__((__weakref__ (\"_ZN2S42s1Ev\")));\n }\n \n // IA-64 uses function descriptors not function pointers in its vtables."}, {"sha": "7ffd64d55cafe7d8e9eb9b6f01e5cd15cd9e43bf", "filename": "gcc/testsuite/gcc.dg/attr-weakref-1.c", "status": "modified", "additions": 49, "deletions": 53, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9b0b82578a7f552e3530e690a147303a592a34e/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-weakref-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9b0b82578a7f552e3530e690a147303a592a34e/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-weakref-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-weakref-1.c?ref=a9b0b82578a7f552e3530e690a147303a592a34e", "patch": "@@ -1,7 +1,9 @@\n // { dg-do run }\n // { dg-require-weak \"\" }\n // { dg-options \"-O2\" }\n+// { dg-options \"-O2 -mmacosx-version-min=10.2\" { target { powerpc-*-darwin* } } }\n // { dg-additional-sources \"attr-weakref-1a.c\" }\n+// { dg-additional-sources \"attr-weakref-1a.c attr-weakref-1b.c\" { target { *-*-darwin* } } }\n \n // Copyright 2005 Free Software Foundation, Inc.\n // Contributed by Alexandre Oliva <aoliva@redhat.com>\n@@ -26,37 +28,32 @@\n typedef int vtype;\n \n extern vtype wv1;\n-extern vtype Wv1a __attribute__((weakref (\"wv1\")));\n+static vtype Wv1a __attribute__((weakref (\"wv1\")));\n static vtype *pv1a USED = &Wv1a;\n-extern vtype Wv1b __attribute__((weak, weakref, alias (\"wv1\")));\n-static vtype *pv1b USED = &Wv1b;\n-extern vtype Wv1c __attribute__((weakref));\n-extern vtype Wv1c __attribute__((alias (\"wv1\")));\n-static vtype *pv1c USED = &Wv1c;\n \n vtype gv2;\n-extern vtype Wv2a __attribute__((weakref (\"gv2\")));\n+static vtype Wv2a __attribute__((weakref (\"gv2\")));\n static vtype *pv2a USED = &Wv2a;\n \n static vtype lv3;\n-extern vtype Wv3a __attribute__((weakref (\"lv3\")));\n+static vtype Wv3a __attribute__((weakref (\"lv3\")));\n static vtype *pv3a USED = &Wv3a;\n \n extern vtype uv4;\n-extern vtype Wv4a __attribute__((weakref (\"uv4\")));\n+static vtype Wv4a __attribute__((weakref (\"uv4\")));\n static vtype *pv4a USED = &Wv4a;\n static vtype *pv4 USED = &uv4;\n \n-extern vtype Wv5a __attribute__((weakref (\"uv5\")));\n+static vtype Wv5a __attribute__((weakref (\"uv5\")));\n static vtype *pv5a USED = &Wv5a;\n extern vtype uv5;\n static vtype *pv5 USED = &uv5;\n \n-extern vtype Wv6a __attribute__((weakref (\"wv6\")));\n+static vtype Wv6a __attribute__((weakref (\"wv6\")));\n static vtype *pv6a USED = &Wv6a;\n extern vtype wv6;\n \n-extern vtype Wv7a __attribute__((weakref (\"uv7\")));\n+static vtype Wv7a __attribute__((weakref (\"uv7\")));\n static vtype* USED fv7 (void) {\n   return &Wv7a;\n }\n@@ -69,71 +66,69 @@ extern vtype uv8;\n static vtype* USED fv8a (void) {\n   return &uv8;\n }\n-extern vtype Wv8a __attribute__((weakref (\"uv8\")));\n+static vtype Wv8a __attribute__((weakref (\"uv8\")));\n static vtype* USED fv8 (void) {\n   return &Wv8a;\n }\n \n extern vtype wv9 __attribute__((weak));\n-extern vtype Wv9a __attribute__((weakref (\"wv9\")));\n+static vtype Wv9a __attribute__((weakref (\"wv9\")));\n static vtype *pv9a USED = &Wv9a;\n \n-extern vtype Wv10a __attribute__((weakref (\"Wv10b\")));\n-extern vtype Wv10b __attribute__((weakref (\"Wv10c\")));\n-extern vtype Wv10c __attribute__((weakref (\"Wv10d\")));\n-extern vtype Wv10d __attribute__((weakref (\"wv10\")));\n+static vtype Wv10a __attribute__((weakref (\"Wv10b\")));\n+static vtype Wv10b __attribute__((weakref (\"Wv10c\")));\n+static vtype Wv10c __attribute__((weakref (\"Wv10d\")));\n+static vtype Wv10d __attribute__((weakref (\"wv10\")));\n extern vtype wv10;\n \n extern vtype wv11;\n-extern vtype Wv11d __attribute__((weakref (\"wv11\")));\n-extern vtype Wv11c __attribute__((weakref (\"Wv11d\")));\n-extern vtype Wv11b __attribute__((weakref (\"Wv11c\")));\n-extern vtype Wv11a __attribute__((weakref (\"Wv11b\")));\n+static vtype Wv11d __attribute__((weakref (\"wv11\")));\n+static vtype Wv11c __attribute__((weakref (\"Wv11d\")));\n+static vtype Wv11b __attribute__((weakref (\"Wv11c\")));\n+static vtype Wv11a __attribute__((weakref (\"Wv11b\")));\n \n-extern vtype Wv12 __attribute__((weakref (\"wv12\")));\n+static vtype Wv12 __attribute__((weakref (\"wv12\")));\n extern vtype wv12 __attribute__((weak));\n \n-extern vtype Wv13 __attribute__((weakref (\"wv13\")));\n+static vtype Wv13 __attribute__((weakref (\"wv13\")));\n extern vtype wv13 __attribute__((weak));\n \n-extern vtype Wv14a __attribute__((weakref (\"wv14\")));\n-extern vtype Wv14b __attribute__((weakref (\"wv14\")));\n+static vtype Wv14a __attribute__((weakref (\"wv14\")));\n+static vtype Wv14b __attribute__((weakref (\"wv14\")));\n extern vtype wv14 __attribute__((weak));\n \n typedef void ftype(void);\n \n extern ftype wf1;\n-extern ftype Wf1a __attribute__((weakref (\"wf1\")));\n+static ftype Wf1a __attribute__((weakref (\"wf1\")));\n static ftype *pf1a USED = &Wf1a;\n-extern ftype Wf1b __attribute__((weak, weakref, alias (\"wf1\")));\n-static ftype *pf1b USED = &Wf1b;\n-extern ftype Wf1c __attribute__((weakref));\n+static ftype Wf1c __attribute__((weakref));\n extern ftype Wf1c __attribute__((alias (\"wf1\")));\n static ftype *pf1c USED = &Wf1c;\n \n void gf2(void) {}\n-extern ftype Wf2a __attribute__((weakref (\"gf2\")));\n+static ftype Wf2a __attribute__((weakref (\"gf2\")));\n static ftype *pf2a USED = &Wf2a;\n \n static void lf3(void) {}\n-extern ftype Wf3a __attribute__((weakref (\"lf3\")));\n+static ftype Wf3a __attribute__((weakref (\"lf3\")));\n static ftype *pf3a USED = &Wf3a;\n \n extern ftype uf4;\n-extern ftype Wf4a __attribute__((weakref (\"uf4\")));\n+static ftype Wf4a __attribute__((weakref (\"uf4\")));\n static ftype *pf4a USED = &Wf4a;\n static ftype *pf4 USED = &uf4;\n \n-extern ftype Wf5a __attribute__((weakref (\"uf5\")));\n+static ftype Wf5a __attribute__((weakref (\"uf5\")));\n static ftype *pf5a USED = &Wf5a;\n extern ftype uf5;\n static ftype *pf5 USED = &uf5;\n \n-extern ftype Wf6a __attribute__((weakref (\"wf6\")));\n+static ftype Wf6a __attribute__((weakref (\"wf6\")));\n static ftype *pf6a USED = &Wf6a;\n extern ftype wf6;\n \n-extern ftype Wf7a __attribute__((weakref (\"uf7\")));\n+static ftype Wf7a __attribute__((weakref (\"uf7\")));\n static ftype* USED ff7 (void) {\n   return &Wf7a;\n }\n@@ -146,43 +141,45 @@ extern ftype uf8;\n static ftype* USED ff8a (void) {\n   return &uf8;\n }\n-extern ftype Wf8a __attribute__((weakref (\"uf8\")));\n+static ftype Wf8a __attribute__((weakref (\"uf8\")));\n static ftype* USED ff8 (void) {\n   return &Wf8a;\n }\n \n extern ftype wf9 __attribute__((weak));\n-extern ftype Wf9a __attribute__((weakref (\"wf9\")));\n+static ftype Wf9a __attribute__((weakref (\"wf9\")));\n static ftype *pf9a USED = &Wf9a;\n \n-extern ftype Wf10a __attribute__((weakref (\"Wf10b\")));\n-extern ftype Wf10b __attribute__((weakref (\"Wf10c\")));\n-extern ftype Wf10c __attribute__((weakref (\"Wf10d\")));\n-extern ftype Wf10d __attribute__((weakref (\"wf10\")));\n+static ftype Wf10a __attribute__((weakref (\"Wf10b\")));\n+static ftype Wf10b __attribute__((weakref (\"Wf10c\")));\n+static ftype Wf10c __attribute__((weakref (\"Wf10d\")));\n+static ftype Wf10d __attribute__((weakref (\"wf10\")));\n extern ftype wf10;\n \n extern ftype wf11;\n-extern ftype Wf11d __attribute__((weakref (\"wf11\")));\n-extern ftype Wf11c __attribute__((weakref (\"Wf11d\")));\n-extern ftype Wf11b __attribute__((weakref (\"Wf11c\")));\n-extern ftype Wf11a __attribute__((weakref (\"Wf11b\")));\n+static ftype Wf11d __attribute__((weakref (\"wf11\")));\n+static ftype Wf11c __attribute__((weakref (\"Wf11d\")));\n+static ftype Wf11b __attribute__((weakref (\"Wf11c\")));\n+static ftype Wf11a __attribute__((weakref (\"Wf11b\")));\n \n-extern ftype Wf12 __attribute__((weakref (\"wf12\")));\n+static ftype Wf12 __attribute__((weakref (\"wf12\")));\n extern ftype wf12 __attribute__((weak));\n \n-extern ftype Wf13 __attribute__((weakref (\"wf13\")));\n+static ftype Wf13 __attribute__((weakref (\"wf13\")));\n extern ftype wf13 __attribute__((weak));\n \n-extern ftype Wf14a __attribute__((weakref (\"wf14\")));\n-extern ftype Wf14b __attribute__((weakref (\"wf14\")));\n+static ftype Wf14a __attribute__((weakref (\"wf14\")));\n+static ftype Wf14b __attribute__((weakref (\"wf14\")));\n extern ftype wf14 __attribute__((weak));\n \n+#ifndef __APPLE__\n #define chk(p) do { if (!p) abort (); } while (0)\n+#else\n+#define chk(p) /* */\n+#endif\n \n int main () {\n   chk (!pv1a);\n-  chk (!pv1b);\n-  chk (!pv1c);\n   chk (pv2a);\n   chk (pv3a);\n   chk (pv4a);\n@@ -203,7 +200,6 @@ int main () {\n   chk (!&Wv14a);\n \n   chk (!pf1a);\n-  chk (!pf1b);\n   chk (!pf1c);\n   chk (pf2a);\n   chk (pf3a);"}, {"sha": "c2c43898c846fd6cc6d63b484030b7a95e3c51ca", "filename": "gcc/testsuite/gcc.dg/attr-weakref-1b.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9b0b82578a7f552e3530e690a147303a592a34e/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-weakref-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9b0b82578a7f552e3530e690a147303a592a34e/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-weakref-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-weakref-1b.c?ref=a9b0b82578a7f552e3530e690a147303a592a34e", "patch": "@@ -0,0 +1,20 @@\n+/* On Darwin, you have to have a definition of the function to link,\n+   even if later on it won't be present in some dylib.  (That is,\n+   you have to link with the latest version of the dylib.)  */\n+void wf1(void) { }\n+void wf6(void) { }\n+void wf9(void) { }\n+void wf10(void) { }\n+void wf11(void) { }\n+void wf12(void) { }\n+void wf13(void) { }\n+void wf14(void) { }\n+\n+int wv1;\n+int wv6;\n+int wv9;\n+int wv10;\n+int wv11;\n+int wv12;\n+int wv13;\n+int wv14;"}, {"sha": "75cc0779c5771bba70da914d839207e984a506ba", "filename": "gcc/testsuite/gcc.dg/attr-weakref-2.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9b0b82578a7f552e3530e690a147303a592a34e/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-weakref-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9b0b82578a7f552e3530e690a147303a592a34e/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-weakref-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-weakref-2.c?ref=a9b0b82578a7f552e3530e690a147303a592a34e", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-require-weak \"\" } */\n+\n+typedef int vtype;\n+\n+extern vtype wv1;\n+extern vtype Wv1a __attribute__((weakref (\"wv1\"))); /* { dg-error \"weakref 'Wv1a' must have static linkage\" } */"}, {"sha": "22a3cc079a82131d4b0931e89cb8e3883041320a", "filename": "gcc/testsuite/gcc.dg/darwin-weakref-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9b0b82578a7f552e3530e690a147303a592a34e/gcc%2Ftestsuite%2Fgcc.dg%2Fdarwin-weakref-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9b0b82578a7f552e3530e690a147303a592a34e/gcc%2Ftestsuite%2Fgcc.dg%2Fdarwin-weakref-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdarwin-weakref-1.c?ref=a9b0b82578a7f552e3530e690a147303a592a34e", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile { target *-*-darwin* } } */\n+// { dg-require-weak \"\" }\n+// { dg-options \"-O2\" }\n+// { dg-options \"-O2 -mmacosx-version-min=10.2\" { target { powerpc-*-darwin* } } }\n+/* { dg-final { scan-assembler \"weak_reference _wv1\" } } */\n+/* { dg-final { scan-assembler \"weak_reference _wf1\" } } */\n+/* { dg-final { scan-assembler-not \"weak_reference _w.2\" } } */\n+\n+\n+typedef int vtype;\n+\n+extern vtype wv1;\n+static vtype Wv1a __attribute__((weakref (\"wv1\")));\n+vtype *pv1a = &Wv1a;\n+\n+extern vtype wv2;\n+static vtype Wv2a __attribute__((weakref (\"wv2\")));\n+vtype *pv2a = &wv2;\n+\n+typedef void ftype(void);\n+\n+extern ftype wf1;\n+static ftype Wf1a __attribute__((weakref (\"wf1\")));\n+ftype *pf1a = &Wf1a;\n+\n+extern ftype wf2;\n+static ftype Wf2a __attribute__((weakref (\"wf2\")));\n+ftype *pf2a = &wf2;"}, {"sha": "5e59f3a1a92c1a0c416908a970f58f7e7054e15d", "filename": "gcc/varasm.c", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9b0b82578a7f552e3530e690a147303a592a34e/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9b0b82578a7f552e3530e690a147303a592a34e/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=a9b0b82578a7f552e3530e690a147303a592a34e", "patch": "@@ -4508,10 +4508,6 @@ weak_finish_1 (tree decl)\n   if (! TREE_USED (decl))\n     return;\n \n-  if (lookup_attribute (\"weakref\", DECL_ATTRIBUTES (decl))\n-      && lookup_attribute (\"alias\", DECL_ATTRIBUTES (decl)))\n-    return;\n-\n #ifdef ASM_WEAKEN_DECL\n   ASM_WEAKEN_DECL (asm_out_file, decl, name, NULL);\n #else\n@@ -4878,6 +4874,8 @@ assemble_alias (tree decl, tree target)\n \t  TREE_CHAIN (alias) = target;\n #endif\n \t}\n+      if (TREE_PUBLIC (decl))\n+\terror (\"weakref %q+D must have static linkage\", decl);\n     }\n   else\n     {\n@@ -5619,21 +5617,29 @@ default_binds_local_p_1 (tree exp, int shlib)\n   /* A non-decl is an entry in the constant pool.  */\n   if (!DECL_P (exp))\n     local_p = true;\n+  /* Weakrefs may not bind locally, even though the weakref itself is\n+     always static and therefore local.  */\n+  else if (lookup_attribute (\"weakref\", DECL_ATTRIBUTES (exp)))\n+    local_p = false;\n   /* Static variables are always local.  */\n   else if (! TREE_PUBLIC (exp))\n     local_p = true;\n-  /* A variable is local if the user explicitly tells us so.  */\n-  else if (DECL_VISIBILITY_SPECIFIED (exp) && DECL_VISIBILITY (exp) != VISIBILITY_DEFAULT)\n+  /* A variable is local if the user has said explicitly that it will\n+     be.  */\n+  else if (DECL_VISIBILITY_SPECIFIED (exp) \n+\t   && DECL_VISIBILITY (exp) != VISIBILITY_DEFAULT)\n     local_p = true;\n-  /* Otherwise, variables defined outside this object may not be local.  */\n+  /* Variables defined outside this object might not be local.  */\n   else if (DECL_EXTERNAL (exp))\n     local_p = false;\n-  /* Linkonce and weak data are never local.  */\n-  else if (DECL_ONE_ONLY (exp) || DECL_WEAK (exp))\n-    local_p = false;\n-  /* If none of the above and visibility is not default, make local.  */\n+  /* If defined in this object and visibility is not default, must be\n+     local.  */\n   else if (DECL_VISIBILITY (exp) != VISIBILITY_DEFAULT)\n     local_p = true;\n+  /* Default visibility weak data can be overridden by a strong symbol\n+     in another module and so are not local.  */\n+  else if (DECL_WEAK (exp))\n+    local_p = false;\n   /* If PIC, then assume that any global name can be overridden by\n      symbols resolved from other modules.  */\n   else if (shlib)"}]}