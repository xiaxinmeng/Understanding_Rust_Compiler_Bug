{"sha": "4f2ca7f5242367c32aa8ca848bfdf1d5cacd7d8b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGYyY2E3ZjUyNDIzNjdjMzJhYThjYTg0OGJmZGYxZDVjYWNkN2Q4Yg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2003-12-18T22:10:06Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-12-18T22:10:06Z"}, "message": "genrecog.c (print_host_wide_int): New.\n\n        * genrecog.c (print_host_wide_int): New.\n        (write_switch, write_cond): Use it.\n\nFrom-SVN: r74806", "tree": {"sha": "d5bb985b417ee92e791b0c01e0418b21679eca8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5bb985b417ee92e791b0c01e0418b21679eca8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f2ca7f5242367c32aa8ca848bfdf1d5cacd7d8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f2ca7f5242367c32aa8ca848bfdf1d5cacd7d8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f2ca7f5242367c32aa8ca848bfdf1d5cacd7d8b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f2ca7f5242367c32aa8ca848bfdf1d5cacd7d8b/comments", "author": null, "committer": null, "parents": [{"sha": "0b667ed86d1e3dafb25492864e181bc04cff7bba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b667ed86d1e3dafb25492864e181bc04cff7bba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b667ed86d1e3dafb25492864e181bc04cff7bba"}], "stats": {"total": 23, "additions": 21, "deletions": 2}, "files": [{"sha": "977262e15ff22b9c756c8e1841f5255ec551cb76", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f2ca7f5242367c32aa8ca848bfdf1d5cacd7d8b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f2ca7f5242367c32aa8ca848bfdf1d5cacd7d8b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4f2ca7f5242367c32aa8ca848bfdf1d5cacd7d8b", "patch": "@@ -1,3 +1,8 @@\n+2003-12-18  Richard Henderson  <rth@redhat.com>\n+\n+\t* genrecog.c (print_host_wide_int): New.\n+\t(write_switch, write_cond): Use it.\n+\n 2003-12-18  Richard Henderson  <rth@redhat.com>\n \n \t* c-decl.c (check_bitfield_type_and_width): Remove enum special"}, {"sha": "208ea8e57f26ad87dddcfa4e56f706736c772c5d", "filename": "gcc/genrecog.c", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f2ca7f5242367c32aa8ca848bfdf1d5cacd7d8b/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f2ca7f5242367c32aa8ca848bfdf1d5cacd7d8b/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=4f2ca7f5242367c32aa8ca848bfdf1d5cacd7d8b", "patch": "@@ -1734,6 +1734,20 @@ write_afterward (struct decision *start, struct decision *afterward,\n     }\n }\n \n+/* Emit a HOST_WIDE_INT as an integer constant expression.  We need to take\n+   special care to avoid \"decimal constant is so large that it is unsigned\"\n+   warnings in the resulting code.  */\n+\n+static void\n+print_host_wide_int (HOST_WIDE_INT val)\n+{\n+  HOST_WIDE_INT min = (unsigned HOST_WIDE_INT)1 << (HOST_BITS_PER_WIDE_INT-1);\n+  if (val == min)\n+    printf (\"(\" HOST_WIDE_INT_PRINT_DEC_C \"-1)\", val + 1);\n+  else\n+    printf (HOST_WIDE_INT_PRINT_DEC_C, val);\n+}\n+\n /* Emit a switch statement, if possible, for an initial sequence of\n    nodes at START.  Return the first node yet untested.  */\n \n@@ -1907,7 +1921,7 @@ write_switch (struct decision *start, int depth)\n \t    case DT_elt_one_int:\n \t    case DT_elt_zero_wide:\n \t    case DT_elt_zero_wide_safe:\n-\t      printf (HOST_WIDE_INT_PRINT_DEC_C, p->tests->u.intval);\n+\t      print_host_wide_int (p->tests->u.intval);\n \t      break;\n \t    default:\n \t      abort ();\n@@ -1964,7 +1978,7 @@ write_cond (struct decision_test *p, int depth,\n     case DT_elt_zero_wide:\n     case DT_elt_zero_wide_safe:\n       printf (\"XWINT (x%d, 0) == \", depth);\n-      printf (HOST_WIDE_INT_PRINT_DEC_C, p->u.intval);\n+      print_host_wide_int (p->u.intval);\n       break;\n \n     case DT_veclen_ge:"}]}