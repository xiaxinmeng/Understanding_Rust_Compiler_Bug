{"sha": "d29760adf92616716f04f958eacb9cceae2a0acf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDI5NzYwYWRmOTI2MTY3MTZmMDRmOTU4ZWFjYjljY2VhZTJhMGFjZg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-02-17T22:51:25Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-02-17T22:51:25Z"}, "message": "re PR c++/43079 (ICE with incompatible pointer-to-member-function as template parameter)\n\n\tPR c++/43079\n\t* pt.c (convert_nontype_argument): Change assert to test.\n\nFrom-SVN: r156839", "tree": {"sha": "bdf901414d0b4aebba3124549aa355e020f55027", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bdf901414d0b4aebba3124549aa355e020f55027"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d29760adf92616716f04f958eacb9cceae2a0acf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d29760adf92616716f04f958eacb9cceae2a0acf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d29760adf92616716f04f958eacb9cceae2a0acf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d29760adf92616716f04f958eacb9cceae2a0acf/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "af14c87be9d09cf9fc192f6db3edcbd441bae5ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af14c87be9d09cf9fc192f6db3edcbd441bae5ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af14c87be9d09cf9fc192f6db3edcbd441bae5ce"}], "stats": {"total": 33, "additions": 30, "deletions": 3}, "files": [{"sha": "40d733460819f58af4236ab9b73a778c829af6e8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d29760adf92616716f04f958eacb9cceae2a0acf/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d29760adf92616716f04f958eacb9cceae2a0acf/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d29760adf92616716f04f958eacb9cceae2a0acf", "patch": "@@ -1,3 +1,8 @@\n+2010-02-17  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/43079\n+\t* pt.c (convert_nontype_argument): Change assert to test.\n+\n 2010-02-16  Jason Merrill  <jason@redhat.com>\n \n \t* cp-gimplify.c (cp_gimplify_expr): Fix error recovery."}, {"sha": "0165a7d69fb6836e40e1a8782f5cfbf55fa1cfef", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d29760adf92616716f04f958eacb9cceae2a0acf/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d29760adf92616716f04f958eacb9cceae2a0acf/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=d29760adf92616716f04f958eacb9cceae2a0acf", "patch": "@@ -5128,12 +5128,13 @@ convert_nontype_argument (tree type, tree expr)\n \t provide a superior diagnostic.  */\n       if (!same_type_p (TREE_TYPE (expr), type))\n \t{\n-\t  /* Make sure we are just one standard conversion off.  */\n-\t  gcc_assert (can_convert (type, TREE_TYPE (expr)));\n \t  error (\"%qE is not a valid template argument for type %qT \"\n \t\t \"because it is of type %qT\", expr, type,\n \t\t TREE_TYPE (expr));\n-\t  inform (input_location, \"standard conversions are not allowed in this context\");\n+\t  /* If we are just one standard conversion off, explain.  */\n+\t  if (can_convert (type, TREE_TYPE (expr)))\n+\t    inform (input_location,\n+\t\t    \"standard conversions are not allowed in this context\");\n \t  return NULL_TREE;\n \t}\n     }"}, {"sha": "87e442e95529089af10114a5fc49d14dc1a84f2b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d29760adf92616716f04f958eacb9cceae2a0acf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d29760adf92616716f04f958eacb9cceae2a0acf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d29760adf92616716f04f958eacb9cceae2a0acf", "patch": "@@ -1,3 +1,8 @@\n+2010-02-17  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/43079\n+\t* g++.dg/template/ptrmem20.C: New.\n+\n 2010-02-17  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/43103"}, {"sha": "d98ef398c585c713d15170691cba345970290748", "filename": "gcc/testsuite/g++.dg/template/ptrmem20.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d29760adf92616716f04f958eacb9cceae2a0acf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fptrmem20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d29760adf92616716f04f958eacb9cceae2a0acf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fptrmem20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fptrmem20.C?ref=d29760adf92616716f04f958eacb9cceae2a0acf", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/43079\n+\n+struct A {};\n+\n+struct B\n+{\n+  void foo() const;\n+  void foo();\n+};\n+\n+template<void (A::*)()> void bar();\n+\n+void baz()\n+{\n+  bar<&B::foo>();  // { dg-error \"not a valid template argument|no match\" }\n+}"}]}