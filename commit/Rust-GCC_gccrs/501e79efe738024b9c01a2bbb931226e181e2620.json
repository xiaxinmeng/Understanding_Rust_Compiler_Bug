{"sha": "501e79efe738024b9c01a2bbb931226e181e2620", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTAxZTc5ZWZlNzM4MDI0YjljMDFhMmJiYjkzMTIyNmUxODFlMjYyMA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2003-10-27T06:49:41Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-10-27T06:49:41Z"}, "message": "alpha.md (attr cannot_copy): New.\n\n        * config/alpha/alpha.md (attr cannot_copy): New.\n        (call_osf_2_er, call_value_osf_2_er, ldgp_er_1, ldgp_er_2,\n        prologue_ldgp_er_2, prologue_ldgp_1): Set it.\n        * config/alpha/alpha.c (alpha_cannot_copy_insn_p): Test it.\n\nFrom-SVN: r72974", "tree": {"sha": "bd1d952df694901e4b565a36e1fc9aa85f5a847f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd1d952df694901e4b565a36e1fc9aa85f5a847f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/501e79efe738024b9c01a2bbb931226e181e2620", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/501e79efe738024b9c01a2bbb931226e181e2620", "html_url": "https://github.com/Rust-GCC/gccrs/commit/501e79efe738024b9c01a2bbb931226e181e2620", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/501e79efe738024b9c01a2bbb931226e181e2620/comments", "author": null, "committer": null, "parents": [{"sha": "40f781eb849a2877966fbb06620e0ccc5f2b398f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40f781eb849a2877966fbb06620e0ccc5f2b398f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40f781eb849a2877966fbb06620e0ccc5f2b398f"}], "stats": {"total": 71, "additions": 38, "deletions": 33}, "files": [{"sha": "e9b247409c99d25d4cb5c5bb45c54ac383b5e138", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/501e79efe738024b9c01a2bbb931226e181e2620/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/501e79efe738024b9c01a2bbb931226e181e2620/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=501e79efe738024b9c01a2bbb931226e181e2620", "patch": "@@ -1,3 +1,10 @@\n+2003-10-26  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/alpha/alpha.md (attr cannot_copy): New.\n+\t(call_osf_2_er, call_value_osf_2_er, ldgp_er_1, ldgp_er_2,\n+\tprologue_ldgp_er_2, prologue_ldgp_1): Set it.\n+\t* config/alpha/alpha.c (alpha_cannot_copy_insn_p): Test it.\n+\n 2003-10-26  Daniel Berlin  <dberlin@dberlin.org>\n \n \t* ggc-zone.c:  New file, zone allocating collector."}, {"sha": "d90103e703e16f375d372322b9e510a009950ec9", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 9, "deletions": 25, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/501e79efe738024b9c01a2bbb931226e181e2620/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/501e79efe738024b9c01a2bbb931226e181e2620/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=501e79efe738024b9c01a2bbb931226e181e2620", "patch": "@@ -2012,38 +2012,22 @@ split_small_symbolic_operand (rtx x)\n    Technically we could copy them if we could set up a mapping from one\n    sequence number to another, across the set of insns to be duplicated.\n    This seems overly complicated and error-prone since interblock motion\n-   from sched-ebb could move one of the pair of insns to a different block.  */\n+   from sched-ebb could move one of the pair of insns to a different block.\n+\n+   Also cannot allow jsr insns to be duplicated.  If they throw exceptions,\n+   then they'll be in a different block from their ldgp.  Which could lead\n+   the bb reorder code to think that it would be ok to copy just the block\n+   containing the call and branch to the block containing the ldgp.  */\n \n static bool\n alpha_cannot_copy_insn_p (rtx insn)\n {\n-  rtx pat;\n-\n   if (!reload_completed || !TARGET_EXPLICIT_RELOCS)\n     return false;\n-\n-  if (GET_CODE (insn) != INSN)\n-    return false;\n-  if (asm_noperands (insn) >= 0)\n-    return false;\n-\n-  pat = PATTERN (insn);\n-  if (GET_CODE (pat) != SET)\n+  if (recog_memoized (insn) >= 0)\n+    return get_attr_cannot_copy (insn);\n+  else\n     return false;\n-  pat = SET_SRC (pat);\n-  if (GET_CODE (pat) == UNSPEC_VOLATILE)\n-    {\n-      if (XINT (pat, 1) == UNSPECV_LDGP1\n-\t  || XINT (pat, 1) == UNSPECV_PLDGP2)\n-\treturn true;\n-    }\n-  else if (GET_CODE (pat) == UNSPEC)\n-    {\n-      if (XINT (pat, 1) == UNSPEC_LDGP2)\n-\treturn true;\n-    }\n-\n-  return false;\n }\n \n   "}, {"sha": "6c25d67dff95b4931fd4bec02a80ec2cef679d23", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/501e79efe738024b9c01a2bbb931226e181e2620/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/501e79efe738024b9c01a2bbb931226e181e2620/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=501e79efe738024b9c01a2bbb931226e181e2620", "patch": "@@ -97,8 +97,8 @@\n ;; separately.\n \n (define_attr \"type\"\n-  \"ild,fld,ldsym,ist,fst,ibr,callpal,fbr,jsr,iadd,ilog,shift,icmov,fcmov,icmp,imul,\\\n-fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi,none\"\n+  \"ild,fld,ldsym,ist,fst,ibr,callpal,fbr,jsr,iadd,ilog,shift,icmov,fcmov,\n+   icmp,imul,fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi,none\"\n   (const_string \"iadd\"))\n \n ;; Describe a user's asm statement.\n@@ -154,6 +154,14 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi,none\"\n \t]\n \t(const_string \"no\")))\n \n+;; The CANNOT_COPY attribute marks instructions with relocations that\n+;; cannot easily be duplicated.  This includes insns with gpdisp relocs\n+;; since they have to stay in 1-1 correspondence with one another.  This\n+;; also includes jsr insns, since they must stay in correspondence with\n+;; the immediately following gpdisp instructions.\n+\n+(define_attr \"cannot_copy\" \"false,true\"\n+  (const_string \"false\"))\n \f\n ;; Include scheduling descriptions.\n   \n@@ -4740,7 +4748,8 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi,none\"\n    (use (match_operand 3 \"const_int_operand\" \"\"))]\n   \"TARGET_EXPLICIT_RELOCS && TARGET_ABI_OSF\"\n   \"jsr $26,(%0),%2%J3\"\n-  [(set_attr \"type\" \"jsr\")])\n+  [(set_attr \"type\" \"jsr\")\n+   (set_attr \"cannot_copy\" \"true\")])\n \n ;; We output a nop after noreturn calls at the very end of the function to\n ;; ensure that the return address always remains in the caller's code range,\n@@ -6814,31 +6823,35 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi,none\"\n \t\t\t     (match_operand 2 \"const_int_operand\" \"\")]\n \t\t\t    UNSPECV_LDGP1))]\n   \"TARGET_EXPLICIT_RELOCS && TARGET_ABI_OSF\"\n-  \"ldah %0,0(%1)\\t\\t!gpdisp!%2\")\n+  \"ldah %0,0(%1)\\t\\t!gpdisp!%2\"\n+  [(set_attr \"cannot_copy\" \"true\")])\n \n (define_insn \"*ldgp_er_2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(unspec:DI [(match_operand:DI 1 \"register_operand\" \"r\")\n \t\t    (match_operand 2 \"const_int_operand\" \"\")]\n \t\t   UNSPEC_LDGP2))]\n   \"TARGET_EXPLICIT_RELOCS && TARGET_ABI_OSF\"\n-  \"lda %0,0(%1)\\t\\t!gpdisp!%2\")\n+  \"lda %0,0(%1)\\t\\t!gpdisp!%2\"\n+  [(set_attr \"cannot_copy\" \"true\")])\n \n (define_insn \"*prologue_ldgp_er_2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(unspec_volatile:DI [(match_operand:DI 1 \"register_operand\" \"r\")\n \t\t\t     (match_operand 2 \"const_int_operand\" \"\")]\n \t\t   \t    UNSPECV_PLDGP2))]\n   \"TARGET_EXPLICIT_RELOCS && TARGET_ABI_OSF\"\n-  \"lda %0,0(%1)\\t\\t!gpdisp!%2\\n$%~..ng:\")\n+  \"lda %0,0(%1)\\t\\t!gpdisp!%2\\n$%~..ng:\"\n+  [(set_attr \"cannot_copy\" \"true\")])\n \n (define_insn \"*prologue_ldgp_1\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(unspec_volatile:DI [(match_operand:DI 1 \"register_operand\" \"r\")\n \t\t\t     (match_operand 2 \"const_int_operand\" \"\")]\n \t\t\t    UNSPECV_LDGP1))]\n   \"\"\n-  \"ldgp %0,0(%1)\\n$%~..ng:\")\n+  \"ldgp %0,0(%1)\\n$%~..ng:\"\n+  [(set_attr \"cannot_copy\" \"true\")])\n \n (define_insn \"*prologue_ldgp_2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n@@ -7974,7 +7987,8 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi,none\"\n    (use (match_operand 4 \"\" \"\"))]\n   \"TARGET_EXPLICIT_RELOCS && TARGET_ABI_OSF\"\n   \"jsr $26,(%1),%3%J4\"\n-  [(set_attr \"type\" \"jsr\")])\n+  [(set_attr \"type\" \"jsr\")\n+   (set_attr \"cannot_copy\" \"true\")])\n \n (define_insn \"*call_value_osf_1_noreturn\"\n   [(set (match_operand 0 \"\" \"\")"}]}