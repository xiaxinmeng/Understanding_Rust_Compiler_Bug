{"sha": "75f8900159133ce069ef1d2edf3b67c7bc82e305", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzVmODkwMDE1OTEzM2NlMDY5ZWYxZDJlZGYzYjY3YzdiYzgyZTMwNQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-04-27T12:47:54Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-04-27T12:47:54Z"}, "message": "match.pd: Add some __builtin_ctz (x) cmp cst simplifications [PR95527]\n\nThis patch adds some ctz simplifications (e.g. ctz (x) >= 3 can be done by\ntesting if the low 3 bits are zero, etc.).\n\nIn addition, I've noticed that in the CLZ case, the\n #ifdef CLZ_DEFINED_VALUE_AT_ZERO don't really work as intended, they\nare evaluated during genmatch and the macro is not defined then\n(but, because of the missing tm.h includes it isn't defined in\ngimple-match.c or generic-match.c either).  And when tm.h is included,\ndefaults.h is included which defines a fallback version of that macro.\n\nFor GCC 12, I wonder if it wouldn't be better to say in addition to __builtin_c[lt]z*\nis always UB at zero that it would be undefined for .C[LT]Z ifn too if it\nhas just one operand and use a second operand to be the constant we expect\nat zero.\n\n2021-04-27  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/95527\n\t* generic-match-head.c: Include tm.h.\n\t* gimple-match-head.c: Include tm.h.\n\t* match.pd (CLZ == INTEGER_CST): Don't use\n\t#ifdef CLZ_DEFINED_VALUE_AT_ZERO, only test CLZ_DEFINED_VALUE_AT_ZERO\n\tif clz == CFN_CLZ.  Add missing val declaration.\n\t(CTZ cmp CST): New simplifications.\n\n\t* gcc.dg/tree-ssa/pr95527-2.c: New test.", "tree": {"sha": "9e267659619ba04d9dbbc58c462abe08fec770a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e267659619ba04d9dbbc58c462abe08fec770a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75f8900159133ce069ef1d2edf3b67c7bc82e305", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75f8900159133ce069ef1d2edf3b67c7bc82e305", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75f8900159133ce069ef1d2edf3b67c7bc82e305", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75f8900159133ce069ef1d2edf3b67c7bc82e305/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3dcd1334b4f522352b80814513fdca902fc2a207", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dcd1334b4f522352b80814513fdca902fc2a207", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dcd1334b4f522352b80814513fdca902fc2a207"}], "stats": {"total": 150, "additions": 138, "deletions": 12}, "files": [{"sha": "f426208de1c7b691197de9c11d97df2bc9144120", "filename": "gcc/generic-match-head.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75f8900159133ce069ef1d2edf3b67c7bc82e305/gcc%2Fgeneric-match-head.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75f8900159133ce069ef1d2edf3b67c7bc82e305/gcc%2Fgeneric-match-head.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgeneric-match-head.c?ref=75f8900159133ce069ef1d2edf3b67c7bc82e305", "patch": "@@ -37,6 +37,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimplify.h\"\n #include \"optabs-tree.h\"\n #include \"dbgcnt.h\"\n+#include \"tm.h\"\n \n /* Routine to determine if the types T1 and T2 are effectively\n    the same for GENERIC.  If T1 or T2 is not a type, the test"}, {"sha": "b084a31572a6e21e44048f8ecdbd3ac6670247b8", "filename": "gcc/gimple-match-head.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75f8900159133ce069ef1d2edf3b67c7bc82e305/gcc%2Fgimple-match-head.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75f8900159133ce069ef1d2edf3b67c7bc82e305/gcc%2Fgimple-match-head.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-match-head.c?ref=75f8900159133ce069ef1d2edf3b67c7bc82e305", "patch": "@@ -43,6 +43,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"optabs-tree.h\"\n #include \"tree-eh.h\"\n #include \"dbgcnt.h\"\n+#include \"tm.h\"\n \n /* Forward declarations of the private auto-generated matchers.\n    They expect valueized operands in canonical order and do not"}, {"sha": "19f4a782ae91ff143b691420778928b21364d9e9", "filename": "gcc/match.pd", "status": "modified", "additions": 79, "deletions": 12, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75f8900159133ce069ef1d2edf3b67c7bc82e305/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75f8900159133ce069ef1d2edf3b67c7bc82e305/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=75f8900159133ce069ef1d2edf3b67c7bc82e305", "patch": "@@ -6341,30 +6341,97 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n    (op (clz:s@2 @0) INTEGER_CST@1)\n    (if (integer_zerop (@1) && single_use (@2))\n     /* clz(X) == 0 is (int)X < 0 and clz(X) != 0 is (int)X >= 0.  */\n-    (with { tree stype = signed_type_for (TREE_TYPE (@0));\n+    (with { tree type0 = TREE_TYPE (@0);\n+\t    tree stype = signed_type_for (type0);\n \t    HOST_WIDE_INT val = 0;\n-#ifdef CLZ_DEFINED_VALUE_AT_ZERO\n \t    /* Punt on hypothetical weird targets.  */\n-\t    if (CLZ_DEFINED_VALUE_AT_ZERO (TYPE_MODE (TREE_TYPE (@0)),\n-\t\t\t\t\t   val) == 2\n+\t    if (clz == CFN_CLZ\n+\t\t&& CLZ_DEFINED_VALUE_AT_ZERO (SCALAR_TYPE_MODE (type0),\n+\t\t\t\t\t      val) == 2\n \t\t&& val == 0)\n \t      stype = NULL_TREE;\n-#endif\n \t  }\n      (if (stype)\n       (cmp (convert:stype @0) { build_zero_cst (stype); })))\n     /* clz(X) == (prec-1) is X == 1 and clz(X) != (prec-1) is X != 1.  */\n     (with { bool ok = true;\n-#ifdef CLZ_DEFINED_VALUE_AT_ZERO\n+\t    HOST_WIDE_INT val = 0;\n+\t    tree type0 = TREE_TYPE (@0);\n \t    /* Punt on hypothetical weird targets.  */\n-\t    if (CLZ_DEFINED_VALUE_AT_ZERO (TYPE_MODE (TREE_TYPE (@0)),\n-\t\t\t\t\t   val) == 2\n-\t\t&& val == TYPE_PRECISION (TREE_TYPE (@0)) - 1)\n+\t    if (clz == CFN_CLZ\n+\t\t&& CLZ_DEFINED_VALUE_AT_ZERO (SCALAR_TYPE_MODE (type0),\n+\t\t\t\t\t      val) == 2\n+\t\t&& val == TYPE_PRECISION (type0) - 1)\n \t      ok = false;\n-#endif\n \t  }\n-     (if (ok && wi::to_wide (@1) == (TYPE_PRECISION (TREE_TYPE (@0)) - 1))\n-      (op @0 { build_one_cst (TREE_TYPE (@0)); })))))))\n+     (if (ok && wi::to_wide (@1) == (TYPE_PRECISION (type0) - 1))\n+      (op @0 { build_one_cst (type0); })))))))\n+\n+/* CTZ simplifications.  */\n+(for ctz (CTZ)\n+ (for op (ge gt le lt)\n+      cmp (eq eq ne ne)\n+  (simplify\n+   /* __builtin_ctz (x) >= C -> (x & ((1 << C) - 1)) == 0.  */\n+   (op (ctz:s @0) INTEGER_CST@1)\n+    (with { bool ok = true;\n+\t    HOST_WIDE_INT val = 0;\n+\t    if (!tree_fits_shwi_p (@1))\n+\t      ok = false;\n+\t    else\n+\t      {\n+\t\tval = tree_to_shwi (@1);\n+\t\t/* Canonicalize to >= or <.  */\n+\t\tif (op == GT_EXPR || op == LE_EXPR)\n+\t\t  {\n+\t\t    if (val == HOST_WIDE_INT_MAX)\n+\t\t      ok = false;\n+\t\t    else\n+\t\t      val++;\n+\t\t  }\n+\t      }\n+\t    bool zero_res = false;\n+\t    HOST_WIDE_INT zero_val = 0;\n+\t    tree type0 = TREE_TYPE (@0);\n+\t    int prec = TYPE_PRECISION (type0);\n+\t    if (ctz == CFN_CTZ\n+\t\t&& CTZ_DEFINED_VALUE_AT_ZERO (SCALAR_TYPE_MODE (type0),\n+\t\t\t\t\t      zero_val) == 2)\n+\t      zero_res = true;\n+\t  }\n+     (if (val <= 0)\n+      (if (ok && (!zero_res || zero_val >= val))\n+       { constant_boolean_node (cmp == EQ_EXPR ? true : false, type); })\n+      (if (val >= prec)\n+       (if (ok && (!zero_res || zero_val < val))\n+\t{ constant_boolean_node (cmp == EQ_EXPR ? false : true, type); })\n+       (if (ok && (!zero_res || zero_val < 0 || zero_val >= prec))\n+\t(cmp (bit_and @0 { wide_int_to_tree (type0,\n+\t\t\t\t\t     wi::mask (val, false, prec)); })\n+\t     { build_zero_cst (type0); })))))))\n+ (for op (eq ne)\n+  (simplify\n+   /* __builtin_ctz (x) == C -> (x & ((1 << (C + 1)) - 1)) == (1 << C).  */\n+   (op (ctz:s @0) INTEGER_CST@1)\n+    (with { bool zero_res = false;\n+\t    HOST_WIDE_INT zero_val = 0;\n+\t    tree type0 = TREE_TYPE (@0);\n+\t    int prec = TYPE_PRECISION (type0);\n+\t    if (ctz == CFN_CTZ\n+\t\t&& CTZ_DEFINED_VALUE_AT_ZERO (SCALAR_TYPE_MODE (type0),\n+\t\t\t\t\t      zero_val) == 2)\n+\t      zero_res = true;\n+\t  }\n+     (if (tree_int_cst_sgn (@1) < 0 || wi::to_widest (@1) >= prec)\n+      (if (!zero_res || zero_val != wi::to_widest (@1))\n+       { constant_boolean_node (op == EQ_EXPR ? false : true, type); })\n+      (if (!zero_res || zero_val < 0 || zero_val >= prec)\n+       (op (bit_and @0 { wide_int_to_tree (type0,\n+\t\t\t\t\t   wi::mask (tree_to_uhwi (@1) + 1,\n+\t\t\t\t\t\t     false, prec)); })\n+\t   { wide_int_to_tree (type0,\n+\t\t\t       wi::shifted_mask (tree_to_uhwi (@1), 1,\n+\t\t\t\t\t\t false, prec)); })))))))\n \n /* POPCOUNT simplifications.  */\n /* popcount(X) + popcount(Y) is popcount(X|Y) when X&Y must be zero.  */"}, {"sha": "b4ae2beeb08cf9ed765659208c876d227f81dfd0", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr95527-2.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75f8900159133ce069ef1d2edf3b67c7bc82e305/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr95527-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75f8900159133ce069ef1d2edf3b67c7bc82e305/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr95527-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr95527-2.c?ref=75f8900159133ce069ef1d2edf3b67c7bc82e305", "patch": "@@ -0,0 +1,57 @@\n+/* PR tree-optimization/95527 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-original\" } */\n+/* { dg-final { scan-tree-dump \"a & 7\\\\) == 0\" \"original\" } } */\n+/* { dg-final { scan-tree-dump \"b & 63\\\\) != 0\" \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"return 0;\" 2 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"return 1;\" 2 \"original\" } } */\n+/* { dg-final { scan-tree-dump \"g & 15\\\\) == 8\" \"original\" } } */\n+/* { dg-final { scan-tree-dump \"h & 255\\\\) != 128\" \"original\" } } */\n+\n+int\n+f1 (int a)\n+{\n+  return __builtin_ctz (a) >= 3;\n+}\n+\n+int\n+f2 (int b)\n+{\n+  return __builtin_ctz (b) < 6;\n+}\n+\n+int\n+f3 (int c)\n+{\n+  return __builtin_ctz (c) < 0;\n+}\n+\n+int\n+f4 (int d)\n+{\n+  return __builtin_ctz (d) >= 0;\n+}\n+\n+int\n+f5 (int e)\n+{\n+  return __builtin_ctz (e) >= __SIZEOF_INT__ * __CHAR_BIT__;\n+}\n+\n+int\n+f6 (int f)\n+{\n+  return __builtin_ctz (f) < __SIZEOF_INT__ * __CHAR_BIT__;\n+}\n+\n+int\n+f7 (int g)\n+{\n+  return __builtin_ctz (g) == 3;\n+}\n+\n+int\n+f8 (int h)\n+{\n+  return __builtin_ctz (h) != 7;\n+}"}]}