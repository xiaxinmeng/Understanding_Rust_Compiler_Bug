{"sha": "553c6572061f6f9ef92514e8f13de95d509ad614", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTUzYzY1NzIwNjFmNmY5ZWY5MjUxNGU4ZjEzZGU5NWQ1MDlhZDYxNA==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2020-07-01T20:44:07Z"}, "committer": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2020-07-01T20:49:30Z"}, "message": "match.pd: (x & y) - (x | y) - 1 -> ~(x ^ y) simplification [PR94882]\n\ngcc/\n\tPR tree-optimization/94882\n\t* match.pd (x & y) - (x | y) - 1 -> ~(x ^ y): New simplification.\n\ngcc/testsuite/\n\tPR tree-optimization/94882\n\t* gcc.dg/tree-ssa/pr94882.c: New test.\n\t* gcc.dg/tree-ssa/pr94882-1.c: New test.\n\t* gcc.dg/tree-ssa/pr94882-2.c: New test.\n\t* gcc.dg/tree-ssa/pr94882-3.c: New test.", "tree": {"sha": "08ad79c49a6c99ca517942d2e5f6c45bf4fc6370", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08ad79c49a6c99ca517942d2e5f6c45bf4fc6370"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/553c6572061f6f9ef92514e8f13de95d509ad614", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/553c6572061f6f9ef92514e8f13de95d509ad614", "html_url": "https://github.com/Rust-GCC/gccrs/commit/553c6572061f6f9ef92514e8f13de95d509ad614", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/553c6572061f6f9ef92514e8f13de95d509ad614/comments", "author": null, "committer": null, "parents": [{"sha": "a1a0dc4548979f8a340a7ea71624a52a20e1e0b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1a0dc4548979f8a340a7ea71624a52a20e1e0b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1a0dc4548979f8a340a7ea71624a52a20e1e0b3"}], "stats": {"total": 264, "additions": 264, "deletions": 0}, "files": [{"sha": "c6ae7a7db7aee88b8d42669133ddfe3f70f8761f", "filename": "gcc/match.pd", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553c6572061f6f9ef92514e8f13de95d509ad614/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553c6572061f6f9ef92514e8f13de95d509ad614/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=553c6572061f6f9ef92514e8f13de95d509ad614", "patch": "@@ -1144,6 +1144,35 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n  (bit_xor (bit_ior:c (bit_not @0) @1) (bit_ior:c @0 (bit_not @1)))\n  (bit_xor @0 @1))\n \n+/* ((x & y) - (x | y)) - 1 -> ~(x ^ y) */\n+(simplify\n+ (plus (nop_convert1? (minus@2 (nop_convert2? (bit_and:c @0 @1))\n+                              (nop_convert2? (bit_ior @0 @1))))\n+       integer_all_onesp)\n+ (if (!TYPE_OVERFLOW_SANITIZED (type) && !TYPE_OVERFLOW_TRAPS (type)\n+      && !TYPE_SATURATING (type) && !TYPE_OVERFLOW_SANITIZED (TREE_TYPE (@2))\n+      && !TYPE_OVERFLOW_TRAPS (TREE_TYPE (@2))\n+      && !TYPE_SATURATING (TREE_TYPE (@2)))\n+ (bit_not (convert (bit_xor @0 @1)))))\n+(simplify\n+ (minus (nop_convert1? (plus@2 (nop_convert2? (bit_and:c @0 @1))\n+                               integer_all_onesp))\n+       (nop_convert3? (bit_ior @0 @1)))\n+ (if (!TYPE_OVERFLOW_SANITIZED (type) && !TYPE_OVERFLOW_TRAPS (type)\n+      && !TYPE_SATURATING (type) && !TYPE_OVERFLOW_SANITIZED (TREE_TYPE (@2))\n+      && !TYPE_OVERFLOW_TRAPS (TREE_TYPE (@2))\n+      && !TYPE_SATURATING (TREE_TYPE (@2)))\n+ (bit_not (convert (bit_xor @0 @1)))))\n+(simplify\n+ (minus (nop_convert1? (bit_and @0 @1))\n+       (nop_convert2? (plus@2 (nop_convert3? (bit_ior:c @0 @1))\n+                               integer_onep)))\n+ (if (!TYPE_OVERFLOW_SANITIZED (type) && !TYPE_OVERFLOW_TRAPS (type)\n+      && !TYPE_SATURATING (type) && !TYPE_OVERFLOW_SANITIZED (TREE_TYPE (@2))\n+      && !TYPE_OVERFLOW_TRAPS (TREE_TYPE (@2))\n+      && !TYPE_SATURATING (TREE_TYPE (@2)))\n+ (bit_not (convert (bit_xor @0 @1)))))\n+\n /* ~x & ~y -> ~(x | y)\n    ~x | ~y -> ~(x & y) */\n (for op (bit_and bit_ior)"}, {"sha": "976b8e5bbdcf4fcc100d156935d250c9909a6f8e", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr94882-1.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553c6572061f6f9ef92514e8f13de95d509ad614/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr94882-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553c6572061f6f9ef92514e8f13de95d509ad614/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr94882-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr94882-1.c?ref=553c6572061f6f9ef92514e8f13de95d509ad614", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-not \"x_\\[0-9]+\\\\\\(D\\\\\\) & y_\\[0-9]+\\\\\\(D\\\\\\);\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"x_\\[0-9]+\\\\\\(D\\\\\\) \\\\| y_\\[0-9]+\\\\\\(D\\\\\\);\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"x_\\[0-9]+\\\\\\(D\\\\\\) \\\\^ y_\\[0-9]+\\\\\\(D\\\\\\);\" 4 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"~_\\[0-9]\\+\" 4 \"optimized\" } } */\n+\n+int\n+a (int x, int y)\n+{\n+  int t = x & y;\n+  int tt = x | y;\n+  t = t - tt;\n+  return t + -1;\n+}\n+\n+int\n+b (int x, int y)\n+{\n+  int t = x & y;\n+  int tt = x | y;\n+  t = t - 1;\n+  return t - tt;\n+}\n+\n+int\n+c (int x, int y)\n+{\n+  int t = x & y;\n+  int tt = x | y;\n+  tt = tt + 1;\n+  return t - tt;\n+}\n+\n+int\n+d (int x, int y)\n+{\n+  int t = x & y;\n+  int tt = x | y;\n+  tt = tt + 1;\n+  return t - tt;\n+}"}, {"sha": "7f533b6d468b9928167837f0db263fe6e3dd6a0d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr94882-2.c", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553c6572061f6f9ef92514e8f13de95d509ad614/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr94882-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553c6572061f6f9ef92514e8f13de95d509ad614/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr94882-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr94882-2.c?ref=553c6572061f6f9ef92514e8f13de95d509ad614", "patch": "@@ -0,0 +1,78 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-not \"x_\\[0-9]+\\\\\\(D\\\\\\) & y_\\[0-9]+\\\\\\(D\\\\\\);\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"x_\\[0-9]+\\\\\\(D\\\\\\) \\\\| y_\\[0-9]+\\\\\\(D\\\\\\);\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"x_\\[0-9]+\\\\\\(D\\\\\\) \\\\^ y_\\[0-9]+\\\\\\(D\\\\\\);\" 8 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"~_\\[0-9]\\+\" 8 \"optimized\" } } */\n+\n+int\n+a (int x, int y)\n+{\n+  unsigned t = x & y;\n+  unsigned tt = x | y;\n+  t = t - tt;\n+  return t + -1;\n+}\n+\n+int\n+a1 (int x, int y)\n+{\n+  int t = x & y;\n+  int tt = x | y;\n+  unsigned t1 = t - tt;\n+  return t1 + -1;\n+}\n+\n+int\n+b (int x, int y)\n+{\n+  unsigned t = x & y;\n+  unsigned tt = x | y;\n+  t = t - 1;\n+  return t - tt;\n+}\n+\n+int\n+b1 (int x, int y)\n+{\n+  int t = x & y;\n+  int tt = x | y;\n+  unsigned t1 = t - 1;\n+  return t1 - tt;\n+}\n+\n+int\n+c (int x, int y)\n+{\n+  unsigned t = x & y;\n+  unsigned tt = x | y;\n+  tt = tt + 1;\n+  return t - tt;\n+}\n+\n+int\n+c1 (int x, int y)\n+{\n+  int t = x & y;\n+  int tt = x | y;\n+  unsigned tt1 = tt + 1;\n+  return t - tt1;\n+}\n+\n+int\n+d (int x, int y)\n+{\n+  unsigned t = x & y;\n+  unsigned tt = x | y;\n+  tt = tt + 1;\n+  return t - tt;\n+}\n+\n+int\n+d1 (int x, int y)\n+{\n+  int t = x & y;\n+  int tt = x | y;\n+  unsigned tt1 = tt + 1;\n+  return t - tt1;\n+}"}, {"sha": "979162f6a5abba356f9dee7c5922fa38611e3326", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr94882-3.c", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553c6572061f6f9ef92514e8f13de95d509ad614/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr94882-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553c6572061f6f9ef92514e8f13de95d509ad614/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr94882-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr94882-3.c?ref=553c6572061f6f9ef92514e8f13de95d509ad614", "patch": "@@ -0,0 +1,79 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-not \"x_\\[0-9]+\\\\\\(D\\\\\\) & y_\\[0-9]+\\\\\\(D\\\\\\);\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"x_\\[0-9]+\\\\\\(D\\\\\\) \\\\| y_\\[0-9]+\\\\\\(D\\\\\\);\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"x_\\[0-9]+\\\\\\(D\\\\\\) \\\\^ y_\\[0-9]+\\\\\\(D\\\\\\);\" 4 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"_\\[0-9] \\\\^ _\\[0-9]\" 4 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"~_\\[0-9]\\+\" 8 \"optimized\" } } */\n+\n+signed char\n+a (short x, short y)\n+{\n+  unsigned char t = (unsigned char) (x & y);\n+  unsigned char tt = (unsigned char) (x | y);\n+  t = t - tt;\n+  return (signed char) (t + -1);\n+}\n+\n+unsigned char\n+a1 (signed char x, signed char y)\n+{\n+  short t = (short) (x & y);\n+  short tt = (short) (x | y);\n+  unsigned char t1 = (unsigned char) (t - tt);\n+  return t1 + -1;\n+}\n+\n+signed char\n+b (short x, short y)\n+{\n+  unsigned char t = (unsigned char) (x & y);\n+  signed char tt = (signed char) (x | y);\n+  t = t - 1;\n+  return ((signed char) t - tt);\n+}\n+\n+short\n+b1 (short x, short y)\n+{\n+  int t = (int) (x & y);\n+  int tt = (int) (x | y);\n+  short t1 = (short) (t - 1);\n+  return (short) (t1 - tt);\n+}\n+\n+signed char\n+c (unsigned x, unsigned y)\n+{\n+  unsigned char t = (unsigned char) (x & y);\n+  signed char tt = (signed char) (x | y);\n+  tt = tt + 1;\n+  return (signed char) (t - tt);\n+}\n+\n+unsigned char\n+c1 (signed char x, signed char y)\n+{\n+  unsigned char t = (unsigned char) (x & y);\n+  short tt = (short) (x | y);\n+  unsigned char tt1 = (unsigned char) (tt + 1);\n+  return t - tt1;\n+}\n+\n+signed char\n+d (unsigned char x, unsigned char y)\n+{\n+  int t = (int) (x & y);\n+  int tt = (int) (x | y);\n+  tt = tt + 1;\n+  return (signed char) (t - tt);\n+}\n+\n+unsigned char\n+d1 (int x, int y)\n+{\n+  signed char t = (signed char) (x & y);\n+  signed char tt = (signed char) (x | y);\n+  unsigned char tt1 = (unsigned char) (tt + 1);\n+  return (unsigned char) (t - tt1);\n+}"}, {"sha": "e7a55308e85ed079461bd4739a3c34dff247ab5b", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr94882.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553c6572061f6f9ef92514e8f13de95d509ad614/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr94882.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553c6572061f6f9ef92514e8f13de95d509ad614/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr94882.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr94882.c?ref=553c6572061f6f9ef92514e8f13de95d509ad614", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-not \"x_\\[0-9]+\\\\\\(D\\\\\\) & y_\\[0-9]+\\\\\\(D\\\\\\);\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"x_\\[0-9]+\\\\\\(D\\\\\\) \\\\| y_\\[0-9]+\\\\\\(D\\\\\\);\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"x_\\[0-9]+\\\\\\(D\\\\\\) \\\\^ y_\\[0-9]+\\\\\\(D\\\\\\);\" 5 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"~_\\[0-9]\\+\" 5 \"optimized\" } } */\n+\n+int\n+a (int x, int y)\n+{\n+  return (x & y) - (x | y) - 1;\n+}\n+\n+int\n+b (int x, int y)\n+{\n+  return (x & y) - 1 - (x | y);\n+}\n+\n+int\n+c (int x, int y)\n+{\n+  return (x & y) - ((x | y) + 1);\n+}\n+\n+int\n+d (int x, int y)\n+{\n+  return (x & y) - (1 + (x | y));\n+}\n+\n+int\n+e (int x, int y)\n+{\n+  return (unsigned) ((x & y) - (x | y)) + -1u;\n+}"}]}