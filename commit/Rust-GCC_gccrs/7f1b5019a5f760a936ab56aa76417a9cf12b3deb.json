{"sha": "7f1b5019a5f760a936ab56aa76417a9cf12b3deb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2YxYjUwMTlhNWY3NjBhOTM2YWI1NmFhNzY0MTdhOWNmMTJiM2RlYg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2017-05-31T14:08:36Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2017-05-31T14:08:36Z"}, "message": "Doxygen: transform ENUM_BITFIELD and comments starting with '/**'.\n\n2017-05-31  Martin Liska  <mliska@suse.cz>\n\n\t* filter_params.py:\n\tTransform ENUM_BITFIELD and comments starting with '/**'\n\nFrom-SVN: r248741", "tree": {"sha": "c229959c3b82d51042f83fe3cf9f45ba801a5b29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c229959c3b82d51042f83fe3cf9f45ba801a5b29"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f1b5019a5f760a936ab56aa76417a9cf12b3deb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f1b5019a5f760a936ab56aa76417a9cf12b3deb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f1b5019a5f760a936ab56aa76417a9cf12b3deb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f1b5019a5f760a936ab56aa76417a9cf12b3deb/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "67b8dbacf69243ffc6ac999fd4928af83fbf6c04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67b8dbacf69243ffc6ac999fd4928af83fbf6c04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67b8dbacf69243ffc6ac999fd4928af83fbf6c04"}], "stats": {"total": 35, "additions": 35, "deletions": 0}, "files": [{"sha": "e2cbd7902fc5eef43e0232aa505eaeea8d41671c", "filename": "contrib/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f1b5019a5f760a936ab56aa76417a9cf12b3deb/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f1b5019a5f760a936ab56aa76417a9cf12b3deb/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=7f1b5019a5f760a936ab56aa76417a9cf12b3deb", "patch": "@@ -1,3 +1,8 @@\n+2017-05-31  Martin Liska  <mliska@suse.cz>\n+\n+\t* filter_params.py:\n+\tTransform ENUM_BITFIELD and comments starting with '/**'\n+\n 2017-05-31  David Malcolm  <dmalcolm@redhat.com>\n \t    Martin Liska  <mliska@suse.cz>\n "}, {"sha": "a82a8d5728cdb3b282ec80e2c5fb991c1de19702", "filename": "contrib/filter_params.py", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f1b5019a5f760a936ab56aa76417a9cf12b3deb/contrib%2Ffilter_params.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f1b5019a5f760a936ab56aa76417a9cf12b3deb/contrib%2Ffilter_params.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Ffilter_params.py?ref=7f1b5019a5f760a936ab56aa76417a9cf12b3deb", "patch": "@@ -34,6 +34,11 @@ def filter_src(text):\n     # so that doxygen will parse them.\n     #\n     # Only comments that begin on the left-most column are converted.\n+    #\n+    text = re.sub(r'^/\\*\\* ',\n+                  r'/** @verbatim ',\n+                  text,\n+                  flags=re.MULTILINE)\n     text = re.sub(r'^/\\* ',\n                   r'/** @verbatim ',\n                   text,\n@@ -58,6 +63,11 @@ def filter_src(text):\n                   r'(\\1)',\n                   text)\n \n+    # Replace 'ENUM_BITFIELD(enum_name)' with 'enum enum_name'.\n+    text = re.sub('ENUM_BITFIELD\\s*\\(([^\\)]*)\\)',\n+                  r'enum \\1',\n+                  text)\n+\n     return text\n \n class FilteringTests(unittest.TestCase):\n@@ -81,6 +91,21 @@ def test_comment_example(self):\n              '   NEXT_LINE\\n'\n              '   FINAL_LINE.   @endverbatim */\\n'))\n \n+    def test_comment_example_gengtype(self):\n+        self.assert_filters_to(\n+            ('/** Allocate and initialize an input buffer state.\\n'\n+             ' * @param file A readable stream.\\n'\n+             ' * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.\\n'\n+             ' * \\n'\n+             ' * @return the allocated buffer state.\\n'\n+             ' */'),\n+            ('/** @verbatim Allocate and initialize an input buffer state.\\n'\n+             ' * @param file A readable stream.\\n'\n+             ' * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.\\n'\n+             ' * \\n'\n+             ' * @return the allocated buffer state.\\n'\n+             '  @endverbatim */'))\n+\n     def test_oneliner_comment(self):\n         self.assert_filters_to(\n             '/* Returns the string representing CLASS.  */\\n',\n@@ -131,6 +156,11 @@ def test_PARAMS(self):\n             'char *strcpy PARAMS ((char *dest, char *source));\\n',\n             'char *strcpy (char *dest, char *source);\\n')\n \n+    def test_ENUM_BITFIELD(self):\n+        self.assert_filters_to(\n+            '  ENUM_BITFIELD (sym_intent) intent:2;\\n',\n+            '  enum sym_intent intent:2;\\n')\n+\n def act_on_files(argv):\n     for filename in argv[1:]:\n         with open(filename) as f:"}]}