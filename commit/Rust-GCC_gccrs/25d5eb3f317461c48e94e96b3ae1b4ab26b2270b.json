{"sha": "25d5eb3f317461c48e94e96b3ae1b4ab26b2270b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjVkNWViM2YzMTc0NjFjNDhlOTRlOTZiM2FlMWI0YWIyNmIyMjcwYg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1997-11-21T20:23:57Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1997-11-21T20:23:57Z"}, "message": "except.c (expand_start_catch_block): We only need the rethrow region for non-sjlj exceptions.\n\n\t* except.c (expand_start_catch_block): We only need the rethrow\n \tregion for non-sjlj exceptions.\n\t(expand_end_catch_block): Likewise.  Use outer_context_label_stack.\n\nFrom-SVN: r16648", "tree": {"sha": "65196e713961e08632110a4cd50d1ff8d0ee433e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/65196e713961e08632110a4cd50d1ff8d0ee433e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25d5eb3f317461c48e94e96b3ae1b4ab26b2270b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25d5eb3f317461c48e94e96b3ae1b4ab26b2270b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25d5eb3f317461c48e94e96b3ae1b4ab26b2270b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25d5eb3f317461c48e94e96b3ae1b4ab26b2270b/comments", "author": null, "committer": null, "parents": [{"sha": "1418bb67a30a99421a337cbaba61fbef05671aad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1418bb67a30a99421a337cbaba61fbef05671aad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1418bb67a30a99421a337cbaba61fbef05671aad"}], "stats": {"total": 41, "additions": 22, "deletions": 19}, "files": [{"sha": "c88e084709cab80ec3cecbd9ac8a92e516073135", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25d5eb3f317461c48e94e96b3ae1b4ab26b2270b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25d5eb3f317461c48e94e96b3ae1b4ab26b2270b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=25d5eb3f317461c48e94e96b3ae1b4ab26b2270b", "patch": "@@ -1,3 +1,9 @@\n+Fri Nov 21 12:22:07 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* except.c (expand_start_catch_block): We only need the rethrow\n+ \tregion for non-sjlj exceptions.\n+\t(expand_end_catch_block): Likewise.  Use outer_context_label_stack.\n+\n Thu Nov 20 14:40:17 1997  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* Make-lang.in (CXX_LIB2FUNCS): Add new op new and op delete objs."}, {"sha": "5c2344d43d799140e277f117b749865ccaab8c4e", "filename": "gcc/cp/except.c", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25d5eb3f317461c48e94e96b3ae1b4ab26b2270b/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25d5eb3f317461c48e94e96b3ae1b4ab26b2270b/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=25d5eb3f317461c48e94e96b3ae1b4ab26b2270b", "patch": "@@ -558,7 +558,8 @@ expand_start_catch_block (declspecs, declarator)\n      that contains this catch block.\n \n      Matches the end in expand_end_catch_block.  */\n-  expand_eh_region_start ();\n+  if (! exceptions_via_longjmp)\n+    expand_eh_region_start ();\n \n   /* Create a binding level for the eh_info and the exception object\n      cleanup.  */\n@@ -667,10 +668,6 @@ expand_start_catch_block (declspecs, declarator)\n void\n expand_end_catch_block ()\n {\n-  rtx start_region_label_rtx;\n-  rtx end_region_label_rtx;\n-  tree decls, t;\n-\n   if (! doing_eh (1))\n     return;\n \n@@ -684,29 +681,29 @@ expand_end_catch_block ()\n   /* Cleanup the EH object.  */\n   expand_end_bindings (getdecls (), kept_level_p (), 0);\n   poplevel (kept_level_p (), 1, 0);\n-      \n-  t = make_node (RTL_EXPR);\n-  TREE_TYPE (t) = void_type_node;\n-  RTL_EXPR_RTL (t) = const0_rtx;\n-  TREE_SIDE_EFFECTS (t) = 1;\n-  do_pending_stack_adjust ();\n-  start_sequence_for_rtl_expr (t);\n \n   if (! exceptions_via_longjmp)\n     {\n       /* If we are not doing setjmp/longjmp EH, we need an extra\n \t region around the whole catch block to skip through the\n \t terminate region we are nested in.  */\n \n-      expand_internal_throw (DECL_RTL (top_label_entry (&caught_return_label_stack)));\n-    }\n+      tree t = make_node (RTL_EXPR);\n+      TREE_TYPE (t) = void_type_node;\n+      RTL_EXPR_RTL (t) = const0_rtx;\n+      TREE_SIDE_EFFECTS (t) = 1;\n+      do_pending_stack_adjust ();\n+      start_sequence_for_rtl_expr (t);\n \n-  do_pending_stack_adjust ();\n-  RTL_EXPR_SEQUENCE (t) = get_insns ();\n-  end_sequence ();\n+      expand_internal_throw (outer_context_label_stack->u.rlabel);\n \n-  /* For the rethrow region.  */\n-  expand_eh_region_end (t);\n+      do_pending_stack_adjust ();\n+      RTL_EXPR_SEQUENCE (t) = get_insns ();\n+      end_sequence ();\n+\n+      /* For the rethrow region.  */\n+      expand_eh_region_end (t);\n+    }\n \n   /* Fall to outside the try statement when done executing handler and\n      we fall off end of handler.  This is jump Lresume in the"}]}