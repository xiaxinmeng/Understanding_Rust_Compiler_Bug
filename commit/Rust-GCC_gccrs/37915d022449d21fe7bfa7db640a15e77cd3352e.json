{"sha": "37915d022449d21fe7bfa7db640a15e77cd3352e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzc5MTVkMDIyNDQ5ZDIxZmU3YmZhN2RiNjQwYTE1ZTc3Y2QzMzUyZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-09-17T07:59:16Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-09-17T07:59:16Z"}, "message": "[Ada] Fix wrong value of 'Size for slices of bit-packed arrays\n\nThis fixes a long-standing issue in the compiler which would return\na wrong value for the Size attribute applied to slices of bit-packed\narrays whose size is not a multiple of the storage unit.\n\nThe problem is that the computation was done in the code generator\nafter the bit-packed array had been internally rewritten into an\narray of bytes, so the Size was always rounded up to the next byte.\n\nThe computation is now rewritten into the product of the Length and\nCompnent_Size attribute of the slices before being sent to the code\ngenerator.\n\n2019-09-17  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* exp_attr.adb (Expand_Size_Attribute): Chain the special cases\n\ton the back-end path and rewrite the attribute appled to slices\n\tof bit-packed arrays into the product of the Length and the\n\tCompoent_Size attributes of the slices.\n\t* exp_ch5.adb (Expand_Assign_Array_Bitfield): Use Size attribute\n\tdirectly to compute the bitfield's size.\n\ngcc/testsuite/\n\n\t* gnat.dg/pack25.adb: New testcase.\n\nFrom-SVN: r275769", "tree": {"sha": "63d68b13e71558c24f9d2b3a8d47774eb456eb8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63d68b13e71558c24f9d2b3a8d47774eb456eb8f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37915d022449d21fe7bfa7db640a15e77cd3352e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37915d022449d21fe7bfa7db640a15e77cd3352e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37915d022449d21fe7bfa7db640a15e77cd3352e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37915d022449d21fe7bfa7db640a15e77cd3352e/comments", "author": null, "committer": null, "parents": [{"sha": "38b06e7a19d4002697117965d0bfce7ee77e1d40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38b06e7a19d4002697117965d0bfce7ee77e1d40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38b06e7a19d4002697117965d0bfce7ee77e1d40"}], "stats": {"total": 76, "additions": 60, "deletions": 16}, "files": [{"sha": "ee7945cff06158cf73276b97378b451c075b5cd9", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37915d022449d21fe7bfa7db640a15e77cd3352e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37915d022449d21fe7bfa7db640a15e77cd3352e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=37915d022449d21fe7bfa7db640a15e77cd3352e", "patch": "@@ -1,3 +1,12 @@\n+2019-09-17  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_attr.adb (Expand_Size_Attribute): Chain the special cases\n+\ton the back-end path and rewrite the attribute appled to slices\n+\tof bit-packed arrays into the product of the Length and the\n+\tCompoent_Size attributes of the slices.\n+\t* exp_ch5.adb (Expand_Assign_Array_Bitfield): Use Size attribute\n+\tdirectly to compute the bitfield's size.\n+\n 2019-09-17  Bob Duff  <duff@adacore.com>\n \n \t* exp_ch5.adb (Expand_Assign_Array_Loop_Or_Bitfield): Add tests"}, {"sha": "c5ff9b50c5fbeb3edaec0754683d986a066cada0", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37915d022449d21fe7bfa7db640a15e77cd3352e/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37915d022449d21fe7bfa7db640a15e77cd3352e/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=37915d022449d21fe7bfa7db640a15e77cd3352e", "patch": "@@ -7600,18 +7600,36 @@ package body Exp_Attr is\n                   New_Occurrence_Of (Get_Actual_Subtype (Pref), Loc),\n                 Attribute_Name => Name_Size));\n             Analyze_And_Resolve (N, Typ);\n-         end if;\n \n-         --  If Size applies to a dereference of an access to unconstrained\n+         --  If Size is applied to a dereference of an access to unconstrained\n          --  packed array, the back end needs to see its unconstrained nominal\n          --  type, but also a hint to the actual constrained type.\n \n-         if Nkind (Pref) = N_Explicit_Dereference\n+         elsif Nkind (Pref) = N_Explicit_Dereference\n            and then Is_Array_Type (Ptyp)\n            and then not Is_Constrained (Ptyp)\n            and then Is_Packed (Ptyp)\n          then\n             Set_Actual_Designated_Subtype (Pref, Get_Actual_Subtype (Pref));\n+\n+         --  If Size was applied to a slice of a bit-packed array, we rewrite\n+         --  it into the product of Length and Component_Size. We need to do so\n+         --  because bit-packed arrays are represented internally as arrays of\n+         --  System.Unsigned_Types.Packed_Byte for code generation purposes so\n+         --  the size is always rounded up in the back end.\n+\n+         elsif Nkind (Original_Node (Pref)) = N_Slice\n+           and then Is_Bit_Packed_Array (Ptyp)\n+         then\n+            Rewrite (N,\n+              Make_Op_Multiply (Loc,\n+                Make_Attribute_Reference (Loc,\n+                  Prefix         => Duplicate_Subexpr (Pref, True),\n+                  Attribute_Name => Name_Length),\n+                Make_Attribute_Reference (Loc,\n+                  Prefix         => Duplicate_Subexpr (Pref, True),\n+                  Attribute_Name => Name_Component_Size)));\n+            Analyze_And_Resolve (N, Typ);\n          end if;\n \n          return;"}, {"sha": "7c2d6328e70c7f157565f604b8a424c641877220", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37915d022449d21fe7bfa7db640a15e77cd3352e/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37915d022449d21fe7bfa7db640a15e77cd3352e/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=37915d022449d21fe7bfa7db640a15e77cd3352e", "patch": "@@ -1408,23 +1408,15 @@ package body Exp_Ch5 is\n               Expressions => New_List (New_Copy_Tree (Right_Lo))),\n           Attribute_Name => Name_Bit);\n \n-      --  Compute the Size of the bitfield. ???We can't use Size here, because\n-      --  it doesn't work properly for slices of packed arrays, so we compute\n-      --  the L'Size as L'Length*L'Component_Size.\n-      --\n+      --  Compute the Size of the bitfield\n+\n       --  Note that the length check has already been done, so we can use the\n       --  size of either L or R.\n \n       Size : constant Node_Id :=\n-        Make_Op_Multiply (Loc,\n-          Make_Attribute_Reference (Loc,\n-            Prefix =>\n-              Duplicate_Subexpr (Name (N), True),\n-            Attribute_Name => Name_Length),\n-          Make_Attribute_Reference (Loc,\n-            Prefix =>\n-              Duplicate_Subexpr (Name (N), True),\n-            Attribute_Name => Name_Component_Size));\n+        Make_Attribute_Reference (Loc,\n+          Prefix         => Duplicate_Subexpr (Name (N), True),\n+          Attribute_Name => Name_Size);\n \n    begin\n       return Make_Procedure_Call_Statement (Loc,"}, {"sha": "b701f9e29e5e49a1c708478598cfd09e8d13d316", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37915d022449d21fe7bfa7db640a15e77cd3352e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37915d022449d21fe7bfa7db640a15e77cd3352e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=37915d022449d21fe7bfa7db640a15e77cd3352e", "patch": "@@ -1,3 +1,7 @@\n+2019-09-17  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/pack25.adb: New testcase.\n+\n 2019-09-16  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* g++.dg/ext/int128-6.C: New."}, {"sha": "d1ac22a70352670a4376511a8217d14fde1224b2", "filename": "gcc/testsuite/gnat.dg/pack25.adb", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37915d022449d21fe7bfa7db640a15e77cd3352e/gcc%2Ftestsuite%2Fgnat.dg%2Fpack25.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37915d022449d21fe7bfa7db640a15e77cd3352e/gcc%2Ftestsuite%2Fgnat.dg%2Fpack25.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fpack25.adb?ref=37915d022449d21fe7bfa7db640a15e77cd3352e", "patch": "@@ -0,0 +1,21 @@\n+--  { dg-do run }\n+procedure Pack25 is\n+\n+   type Bit is ('0', '1');\n+   type Bit_Array is array (Natural range <>) of Bit;\n+   pragma Pack (Bit_Array);\n+\n+   procedure Test (Bits : Bit_Array; Size : Natural) is\n+   begin\n+      if Bits (0 .. Size - 1)'Size /= Size then\n+         raise Program_Error;\n+      end if;\n+   end;\n+\n+   A : Bit_Array (0 .. 127) := (others => '1');\n+\n+begin\n+   for X in A'First .. A'Last + 1 loop\n+      Test (A, X);\n+   end loop;\n+end;\n\\ No newline at end of file"}]}