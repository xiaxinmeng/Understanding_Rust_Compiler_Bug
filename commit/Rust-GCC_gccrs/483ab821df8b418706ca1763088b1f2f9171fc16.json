{"sha": "483ab821df8b418706ca1763088b1f2f9171fc16", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDgzYWI4MjFkZjhiNDE4NzA2Y2ExNzYzMDg4YjFmMmY5MTcxZmMxNg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2002-10-18T23:35:40Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2002-10-18T23:35:40Z"}, "message": "target-def.h (TARGET_ASM_OUTPUT_MI_THUNK): Default to NULL.\n\n\t* target-def.h (TARGET_ASM_OUTPUT_MI_THUNK): Default to NULL.\n\t(TARGET_ASM_OUTPUT_MI_VCALL_THUNK): Likewise.\n\t(TARGET_ASM_OUT): Add them.\n\t* target.h (asm_out): Add output_mi_thunk and\n\toutput_mi_vcall_thunk.\n\t* config/alpha/alpha.h (ASM_OUTPUT_MI_THUNK): Rename to ...\n\t(TARGET_ASM_OUTPUT_MI_THUNK): ... this.\n\t* config/arm/arm-protos.h (arm_output_mi_thunk): Declare.\n\t* config/arm/arm.c (arm_output_mi_thunk): Define.\n\t* config/arm/arm.h (ASM_OUTPUT_MI_THUNK): Rename to ...\n\t(TARGET_ASM_OUTPUT_MI_THUNK): ... this.\n\t* config/cris/cris.h (ASM_OUTPUT_MI_THUNK): Rename to ...\n\t(TARGET_ASM_OUTPUT_MI_THUNK): ... this.\n\t* config/frv/frv.h (ASM_OUTPUT_MI_THUNK): Rename to ...\n\t(TARGET_ASM_OUTPUT_MI_THUNK): ... this.\n\t* config/i386/i386-protos.h (x86_output_mi_thunk): Adjust\n\tprototype.\n\t(x86_output_mi_vcall_thunk): Declare.\n\t* config/i386/i386.c (override_options): Clear\n\toutput_mi_vcall_thunk in 64-bit mode.\n\t(ix86_fntype_regparm): New function.\n\t(ix86_return_pops_args): Use it.\n\t(ia32_this_parameter): New function.\n\t(x86_output_mi_vcall_thunk): New function.\n\t(x86_output_mi_thunk): Use it\n\t* config/i386/unix.h (TARGET_ASM_OUTPUT_MI_THUNK): Adjust.\n\t(TARGET_ASM_OUTPUT_MI_VCALL_THUNK): Define.\n\t* config/i960/i960-protos.h (i960_output_mi_thunk): Declare.\n\t* config/i960/i960.c (i960_output_mi_thunk): New function.\n\t* config/i960/i960.h (ASM_OUTPUT_MI_THUNK): Adjust.\n\t* config/ia64/ia64-protos.h (ia64_output_mi_thunk): Declare.\n\t* config/ia64/ia64.c (ia64_output_mi_thunk): Define.\n\t* config/ia64/ia64.h (ASM_OUTPUT_MI_THUNK): Rename to ...\n\t(TARGET_ASM_OUTPUT_MI_THUNK): ... this.\n\t* config/m68k/m68k-protos.h (m68k_output_mi_thunk): New function.\n\t* config/m68k/linux.h (ASM_OUTPUT_MI_THUNK): Rename to ...\n\t(TARGET_ASM_OUTPUT_MI_THUNK): ... this.\n\t* config/m68k/netbsd-elf.h (ASM_OUTPUT_MI_THUNK): Rename to ...\n\t(TARGET_ASM_OUTPUT_MI_THUNK): ... this.\n\t* config/mmix/mmix.h (ASM_OUTPUT_MI_THUNK): Rename to ...\n\t(TARGET_ASM_OUTPUT_MI_THUNK): ... this.\n\t* config/pa/pa.h (ASM_OUTPUT_MI_THUNK): Rename to ...\n\t(TARGET_ASM_OUTPUT_MI_THUNK): ... this.\n\t* config/rs6000/sysv4.h (ASM_OUTPUT_MI_THUNK): Rename to ...\n\t(TARGET_ASM_OUTPUT_MI_THUNK): ... this.\n\t* config/s390/s390-protos.h (s390_output_mi_thunk): Declare.\n\t* config/s390/s390.c (s390_output_mi_thunk): Define.\n\t* config/s390/s390.h (ASM_OUTPUT_MI_THUNK): Rename to ...\n\t(TARGET_ASM_OUTPUT_MI_THUNK): ... this.\n\t* config/sparc/sparc.h (ASM_OUTPUT_MI_THUNK): Rename to ...\n\t(TARGET_ASM_OUTPUT_MI_THUNK): ... this.\n\t* config/stormy16/stormy16.h (ASM_OUTPUT_MI_THUNK): Rename to ...\n\t(TARGET_ASM_OUTPUT_MI_THUNK): ... this.\n\t* config/vax/vax-protos.h (vax_output_mi_thunk): Declare.\n\t* config/vax/vax.c (vax_output_mi_thunk): Define.\n\t* config/vax/vax.h (ASM_OUTPUT_MI_THUNK): Rename to ...\n\t(TARGET_ASM_OUTPUT_MI_THUNK): ... this.\n\t* doc/tm.texi: Adjust documentation.\n\nFrom-SVN: r58293", "tree": {"sha": "17088ab6800bbdff9c6f83a72299fa33aada4853", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17088ab6800bbdff9c6f83a72299fa33aada4853"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/483ab821df8b418706ca1763088b1f2f9171fc16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/483ab821df8b418706ca1763088b1f2f9171fc16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/483ab821df8b418706ca1763088b1f2f9171fc16", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/483ab821df8b418706ca1763088b1f2f9171fc16/comments", "author": null, "committer": null, "parents": [{"sha": "90e021a061203481abb6d80e59e3b83ac26fb05d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90e021a061203481abb6d80e59e3b83ac26fb05d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90e021a061203481abb6d80e59e3b83ac26fb05d"}], "stats": {"total": 790, "additions": 524, "deletions": 266}, "files": [{"sha": "1fb2af10072e4f9b0674fd2571667e0bdffd0541", "filename": "gcc/ChangeLog", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=483ab821df8b418706ca1763088b1f2f9171fc16", "patch": "@@ -1,3 +1,64 @@\n+2002-10-18  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* target-def.h (TARGET_ASM_OUTPUT_MI_THUNK): Default to NULL.\n+\t(TARGET_ASM_OUTPUT_MI_VCALL_THUNK): Likewise.\n+\t(TARGET_ASM_OUT): Add them.\n+\t* target.h (asm_out): Add output_mi_thunk and\n+\toutput_mi_vcall_thunk.\n+\t* config/alpha/alpha.h (ASM_OUTPUT_MI_THUNK): Rename to ...\n+\t(TARGET_ASM_OUTPUT_MI_THUNK): ... this.\n+\t* config/arm/arm-protos.h (arm_output_mi_thunk): Declare.\n+\t* config/arm/arm.c (arm_output_mi_thunk): Define.\n+\t* config/arm/arm.h (ASM_OUTPUT_MI_THUNK): Rename to ...\n+\t(TARGET_ASM_OUTPUT_MI_THUNK): ... this.\n+\t* config/cris/cris.h (ASM_OUTPUT_MI_THUNK): Rename to ...\n+\t(TARGET_ASM_OUTPUT_MI_THUNK): ... this.\n+\t* config/frv/frv.h (ASM_OUTPUT_MI_THUNK): Rename to ...\n+\t(TARGET_ASM_OUTPUT_MI_THUNK): ... this.\n+\t* config/i386/i386-protos.h (x86_output_mi_thunk): Adjust\n+\tprototype.\n+\t(x86_output_mi_vcall_thunk): Declare.\n+\t* config/i386/i386.c (override_options): Clear\n+\toutput_mi_vcall_thunk in 64-bit mode.\n+\t(ix86_fntype_regparm): New function.\n+\t(ix86_return_pops_args): Use it.\n+\t(ia32_this_parameter): New function.\n+\t(x86_output_mi_vcall_thunk): New function.\n+\t(x86_output_mi_thunk): Use it\n+\t* config/i386/unix.h (TARGET_ASM_OUTPUT_MI_THUNK): Adjust.\n+\t(TARGET_ASM_OUTPUT_MI_VCALL_THUNK): Define.\n+\t* config/i960/i960-protos.h (i960_output_mi_thunk): Declare.\n+\t* config/i960/i960.c (i960_output_mi_thunk): New function.\n+\t* config/i960/i960.h (ASM_OUTPUT_MI_THUNK): Adjust.\n+\t* config/ia64/ia64-protos.h (ia64_output_mi_thunk): Declare.\n+\t* config/ia64/ia64.c (ia64_output_mi_thunk): Define.\n+\t* config/ia64/ia64.h (ASM_OUTPUT_MI_THUNK): Rename to ...\n+\t(TARGET_ASM_OUTPUT_MI_THUNK): ... this.\n+\t* config/m68k/m68k-protos.h (m68k_output_mi_thunk): New function.\n+\t* config/m68k/linux.h (ASM_OUTPUT_MI_THUNK): Rename to ...\n+\t(TARGET_ASM_OUTPUT_MI_THUNK): ... this.\n+\t* config/m68k/netbsd-elf.h (ASM_OUTPUT_MI_THUNK): Rename to ...\n+\t(TARGET_ASM_OUTPUT_MI_THUNK): ... this.\n+\t* config/mmix/mmix.h (ASM_OUTPUT_MI_THUNK): Rename to ...\n+\t(TARGET_ASM_OUTPUT_MI_THUNK): ... this.\n+\t* config/pa/pa.h (ASM_OUTPUT_MI_THUNK): Rename to ...\n+\t(TARGET_ASM_OUTPUT_MI_THUNK): ... this.\n+\t* config/rs6000/sysv4.h (ASM_OUTPUT_MI_THUNK): Rename to ...\n+\t(TARGET_ASM_OUTPUT_MI_THUNK): ... this.\n+\t* config/s390/s390-protos.h (s390_output_mi_thunk): Declare.\n+\t* config/s390/s390.c (s390_output_mi_thunk): Define.\n+\t* config/s390/s390.h (ASM_OUTPUT_MI_THUNK): Rename to ...\n+\t(TARGET_ASM_OUTPUT_MI_THUNK): ... this.\n+\t* config/sparc/sparc.h (ASM_OUTPUT_MI_THUNK): Rename to ...\n+\t(TARGET_ASM_OUTPUT_MI_THUNK): ... this.\n+\t* config/stormy16/stormy16.h (ASM_OUTPUT_MI_THUNK): Rename to ...\n+\t(TARGET_ASM_OUTPUT_MI_THUNK): ... this.\n+\t* config/vax/vax-protos.h (vax_output_mi_thunk): Declare.\n+\t* config/vax/vax.c (vax_output_mi_thunk): Define.\n+\t* config/vax/vax.h (ASM_OUTPUT_MI_THUNK): Rename to ...\n+\t(TARGET_ASM_OUTPUT_MI_THUNK): ... this.\n+\t* doc/tm.texi: Adjust documentation.\n+\t\n 2002-10-18  Jason Thorpe  <thorpej@wasabisystems.com>\n \n \t* config/netbsd.h (NETBSD_ENABLE_EXECUTE_STACK): Define "}, {"sha": "461dc959c8e817068a5f150817ac9d71583a20ad", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=483ab821df8b418706ca1763088b1f2f9171fc16", "patch": "@@ -2141,5 +2141,4 @@ do {\t\t\t\t\t\t\t\\\n \n /* Output code to add DELTA to the first argument, and then jump to FUNCTION.\n    Used for C++ multiple inheritance.  */\n-#define ASM_OUTPUT_MI_THUNK(FILE, THUNK_FNDECL, DELTA, FUNCTION) \\\n-  alpha_output_mi_thunk_osf (FILE, THUNK_FNDECL, DELTA, FUNCTION)\n+#define TARGET_ASM_OUTPUT_MI_THUNK alpha_output_mi_thunk_osf"}, {"sha": "eac8dbbbb410690b8ef72ad326b6fb69000910b7", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=483ab821df8b418706ca1763088b1f2f9171fc16", "patch": "@@ -1,5 +1,5 @@\n /* Prototypes for exported functions defined in arm.c and pe.c\n-   Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n    Contributed by Richard Earnshaw (rearnsha@arm.com)\n    Minor hacks by Nick Clifton (nickc@cygnus.com)\n \n@@ -194,6 +194,7 @@ extern int  arm_dllexport_p \t\tPARAMS ((tree));\n extern int  arm_dllimport_p \t\tPARAMS ((tree));\n extern void arm_mark_dllexport \t\tPARAMS ((tree));\n extern void arm_mark_dllimport \t\tPARAMS ((tree));\n+extern void arm_output_mi_thunk         PARAMS ((FILE *, tree, int, tree));\n #endif\n \n extern void arm_init_builtins\t\tPARAMS ((void));"}, {"sha": "6971a53b2d949fba4094ba66f1d644b686cc8635", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=483ab821df8b418706ca1763088b1f2f9171fc16", "patch": "@@ -11130,3 +11130,38 @@ arm_encode_section_info (decl, first)\n     }\n }\n #endif /* !ARM_PE */\n+\n+void\n+arm_output_mi_thunk (file, thunk, delta, function)\n+     FILE *file;\n+     tree thunk ATTRIBUTE_UNUSED;\n+     int delta;\n+     tree function;\n+{\n+  int mi_delta = delta;\n+  const char *const mi_op = mi_delta < 0 ? \"sub\" : \"add\";\n+  int shift = 0;\n+  int this_regno = (aggregate_value_p (TREE_TYPE (TREE_TYPE (function)))\n+                    ? 1 : 0);\n+  if (mi_delta < 0)\n+    mi_delta = - mi_delta;\n+  while (mi_delta != 0)\n+    {\n+      if ((mi_delta & (3 << shift)) == 0)\n+        shift += 2;\n+      else\n+        {\n+          asm_fprintf (file, \"\\t%s\\t%r, %r, #%d\\n\",\n+                       mi_op, this_regno, this_regno,\n+                       mi_delta & (0xff << shift));\n+          mi_delta &= ~(0xff << shift);\n+          shift += 8;\n+        }\n+    }\n+  fputs (\"\\tb\\t\", file);\n+  assemble_name (file, XSTR (XEXP (DECL_RTL (function), 0), 0));\n+  if (NEED_PLT_RELOC)\n+    fputs (\"(PLT)\", file);\n+  fputc ('\\n', file);\n+}\n+"}, {"sha": "b4f6e705aa651a6d2d0cd10e59bbdcf792815b4c", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 1, "deletions": 30, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=483ab821df8b418706ca1763088b1f2f9171fc16", "patch": "@@ -2697,36 +2697,7 @@ extern int making_const_table;\n      \n /* Output code to add DELTA to the first argument, and then jump to FUNCTION.\n    Used for C++ multiple inheritance.  */\n-#define ASM_OUTPUT_MI_THUNK(FILE, THUNK_FNDECL, DELTA, FUNCTION)\t\t\\\n-  do\t\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\t\\\n-      int mi_delta = (DELTA);\t\t\t\t\t\t\t\\\n-      const char *const mi_op = mi_delta < 0 ? \"sub\" : \"add\";\t\t\t\\\n-      int shift = 0;\t\t\t\t\t\t\t\t\\\n-      int this_regno = (aggregate_value_p (TREE_TYPE (TREE_TYPE (FUNCTION)))\t\\\n-\t\t        ? 1 : 0);\t\t\t\t\t\t\\\n-      if (mi_delta < 0)\t\t\t\t\t\t\t\t\\\n-        mi_delta = - mi_delta;\t\t\t\t\t\t\t\\\n-      while (mi_delta != 0)\t\t\t\t\t\t\t\\\n-        {\t\t\t\t\t\t\t\t\t\\\n-          if ((mi_delta & (3 << shift)) == 0)\t\t\t\t\t\\\n-\t    shift += 2;\t\t\t\t\t\t\t\t\\\n-          else\t\t\t\t\t\t\t\t\t\\\n-\t    {\t\t\t\t\t\t\t\t\t\\\n-\t      asm_fprintf (FILE, \"\\t%s\\t%r, %r, #%d\\n\",\t\t\t\t\\\n-\t\t           mi_op, this_regno, this_regno,\t\t\t\\\n-\t\t           mi_delta & (0xff << shift));\t\t\t\t\\\n-\t      mi_delta &= ~(0xff << shift);\t\t\t\t\t\\\n-\t      shift += 8;\t\t\t\t\t\t\t\\\n-\t    }\t\t\t\t\t\t\t\t\t\\\n-        }\t\t\t\t\t\t\t\t\t\\\n-      fputs (\"\\tb\\t\", FILE);\t\t\t\t\t\t\t\\\n-      assemble_name (FILE, XSTR (XEXP (DECL_RTL (FUNCTION), 0), 0));\t\t\\\n-      if (NEED_PLT_RELOC)\t\t\t\t\t\t\t\\\n-        fputs (\"(PLT)\", FILE);\t\t\t\t\t\t\t\\\n-      fputc ('\\n', FILE);\t\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\t\\\n-  while (0)\n+#define TARGET_ASM_OUTPUT_MI_THUNK arm_output_mi_thunk\n \n /* A C expression whose value is RTL representing the value of the return\n    address for the frame COUNT steps up from the current frame.  */"}, {"sha": "717f24979285d8411a4b4e22425f806370c6696b", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=483ab821df8b418706ca1763088b1f2f9171fc16", "patch": "@@ -1013,8 +1013,7 @@ struct cum_args {int regs;};\n #define ELIGIBLE_FOR_EPILOGUE_DELAY(INSN, N) \\\n   cris_eligible_for_epilogue_delay (INSN)\n \n-#define ASM_OUTPUT_MI_THUNK(FILE, THUNK_FNDECL, DELTA, FUNCTION) \\\n- cris_asm_output_mi_thunk(FILE, THUNK_FNDECL, DELTA, FUNCTION)\n+#define TARGET_ASM_OUTPUT_MI_THUNK cris_asm_output_mi_thunk\n \n \n /* Node: Profiling */"}, {"sha": "8fc43a4687953c560db687db3314dc94f59b7b98", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=483ab821df8b418706ca1763088b1f2f9171fc16", "patch": "@@ -2110,8 +2110,7 @@ struct machine_function GTY(())\n    frontend will generate a less efficient heavyweight thunk that calls\n    FUNCTION instead of jumping to it.  The generic approach does not support\n    varargs.  */\n-#define ASM_OUTPUT_MI_THUNK(FILE, THUNK_FNDECL, DELTA, FUNCTION) \\\n-frv_asm_output_mi_thunk (FILE, THUNK_FNDECL, (long)DELTA, FUNCTION)\n+#define TARGET_ASM_OUTPUT_MI_THUNK frv_asm_output_mi_thunk\n \n \f\n /* Generating Code for Profiling.  */"}, {"sha": "c3b7c308349e168eca138fb75970f89fcadff2c1", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=483ab821df8b418706ca1763088b1f2f9171fc16", "patch": "@@ -211,7 +211,8 @@ extern tree ix86_handle_shared_attribute PARAMS ((tree *, tree, tree, int, bool\n extern unsigned int i386_pe_section_type_flags PARAMS ((tree, const char *,\n \t\t\t\t\t\t\tint));\n extern void i386_pe_asm_named_section PARAMS ((const char *, unsigned int));\n-extern void x86_output_mi_thunk PARAMS ((FILE *, int, tree));\n+extern void x86_output_mi_thunk PARAMS ((FILE *, tree, int, tree));\n+extern void x86_output_mi_vcall_thunk PARAMS ((FILE *, tree, int, int, tree));\n extern int x86_field_alignment PARAMS ((tree, int));\n #endif\n "}, {"sha": "c96270241d1f0e1552b8b0dbf69207782e9fab65", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 112, "deletions": 28, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=483ab821df8b418706ca1763088b1f2f9171fc16", "patch": "@@ -750,6 +750,7 @@ static int ix86_variable_issue PARAMS ((FILE *, int, rtx, int));\n static int ia32_use_dfa_pipeline_interface PARAMS ((void));\n static int ia32_multipass_dfa_lookahead PARAMS ((void));\n static void ix86_init_mmx_sse_builtins PARAMS ((void));\n+static rtx ia32_this_parameter PARAMS ((tree));\n \n struct ix86_address\n {\n@@ -788,6 +789,7 @@ static unsigned int ix86_select_alt_pic_regnum PARAMS ((void));\n static int ix86_save_reg PARAMS ((unsigned int, int));\n static void ix86_compute_frame_layout PARAMS ((struct ix86_frame *));\n static int ix86_comp_type_attributes PARAMS ((tree, tree));\n+static int ix86_fntype_regparm PARAMS ((tree));\n const struct attribute_spec ix86_attribute_table[];\n static tree ix86_handle_cdecl_attribute PARAMS ((tree *, tree, tree, int, bool *));\n static tree ix86_handle_regparm_attribute PARAMS ((tree *, tree, tree, int, bool *));\n@@ -1295,6 +1297,10 @@ override_options ()\n     internal_label_prefix_len = p - internal_label_prefix;\n     *p = '\\0';\n   }\n+\n+  /* In 64-bit mode, we do not have support for vcall thunks.  */\n+  if (TARGET_64BIT)\n+    targetm.asm_out.output_mi_vcall_thunk = NULL;\n }\n \f\n void\n@@ -1431,6 +1437,21 @@ ix86_comp_type_attributes (type1, type2)\n   return 1;\n }\n \f\n+/* Return the regparm value for a fuctio with the indicated TYPE.  */\n+\n+static int\n+ix86_fntype_regparm (type)\n+     tree type;\n+{\n+  tree attr;\n+\n+  attr = lookup_attribute (\"regparm\", TYPE_ATTRIBUTES (type));\n+  if (attr)\n+    return TREE_INT_CST_LOW (TREE_VALUE (TREE_VALUE (attr)));\n+  else\n+    return ix86_regparm;\n+}\n+\n /* Value is the number of bytes of arguments automatically\n    popped when returning from a subroutine call.\n    FUNDECL is the declaration node of the function (as a tree),\n@@ -1474,15 +1495,7 @@ ix86_return_pops_args (fundecl, funtype, size)\n   if (aggregate_value_p (TREE_TYPE (funtype))\n       && !TARGET_64BIT)\n     {\n-      int nregs = ix86_regparm;\n-\n-      if (funtype)\n-\t{\n-\t  tree attr = lookup_attribute (\"regparm\", TYPE_ATTRIBUTES (funtype));\n-\n-\t  if (attr)\n-\t    nregs = TREE_INT_CST_LOW (TREE_VALUE (TREE_VALUE (attr)));\n-\t}\n+      int nregs = ix86_fntype_regparm (funtype);\n \n       if (!nregs)\n \treturn GET_MODE_SIZE (Pmode);\n@@ -13860,27 +13873,51 @@ x86_order_regs_for_local_alloc ()\n      reg_alloc_order [pos++] = 0;\n }\n \n+/* Returns an expression indicating where the this parameter is\n+   located on entry to the FUNCTION.  */\n+\n+static rtx\n+ia32_this_parameter (function)\n+     tree function;\n+{\n+  tree type = TREE_TYPE (function);\n+\n+  if (ix86_fntype_regparm (type) > 0)\n+    {\n+      tree parm;\n+\n+      parm = TYPE_ARG_TYPES (type);\n+      /* Figure out whether or not the function has a variable number of\n+\t arguments.  */\n+      for (; parm; parm = TREE_CHAIN (parm))\\\n+\tif (TREE_VALUE (parm) == void_type_node)\n+\t  break;\n+      /* If not, the this parameter is in %eax.  */\n+      if (parm)\n+\treturn gen_rtx_REG (SImode, 0);\n+    }\n+\n+  if (aggregate_value_p (TREE_TYPE (type)))\n+    return gen_rtx_MEM (SImode, plus_constant (stack_pointer_rtx, 8));\n+  else\n+    return gen_rtx_MEM (SImode, plus_constant (stack_pointer_rtx, 4));\n+}\n+\n+\n void\n-x86_output_mi_thunk (file, delta, function)\n+x86_output_mi_vcall_thunk (file, thunk, delta, vcall_index, function)\n      FILE *file;\n+     tree thunk ATTRIBUTE_UNUSED;\n      int delta;\n+     int vcall_index;\n      tree function;\n {\n-  tree parm;\n   rtx xops[3];\n \n-  if (ix86_regparm > 0)\n-    parm = TYPE_ARG_TYPES (TREE_TYPE (function));\n-  else\n-    parm = NULL_TREE;\n-  for (; parm; parm = TREE_CHAIN (parm))\n-    if (TREE_VALUE (parm) == void_type_node)\n-      break;\n-\n-  xops[0] = GEN_INT (delta);\n   if (TARGET_64BIT)\n     {\n       int n = aggregate_value_p (TREE_TYPE (TREE_TYPE (function))) != 0;\n+      xops[0] = GEN_INT (delta);\n       xops[1] = gen_rtx_REG (DImode, x86_64_int_parameter_registers[n]);\n       output_asm_insn (\"add{q} {%0, %1|%1, %0}\", xops);\n       if (flag_pic)\n@@ -13898,13 +13935,49 @@ x86_output_mi_thunk (file, delta, function)\n     }\n   else\n     {\n-      if (parm)\n-\txops[1] = gen_rtx_REG (SImode, 0);\n-      else if (aggregate_value_p (TREE_TYPE (TREE_TYPE (function))))\n-\txops[1] = gen_rtx_MEM (SImode, plus_constant (stack_pointer_rtx, 8));\n-      else\n-\txops[1] = gen_rtx_MEM (SImode, plus_constant (stack_pointer_rtx, 4));\n-      output_asm_insn (\"add{l} {%0, %1|%1, %0}\", xops);\n+      /* Adjust the this parameter by a fixed constant.  */\n+      if (delta)\n+\t{\n+\t  xops[0] = GEN_INT (delta);\n+\t  xops[1] = ia32_this_parameter (function);\n+\t  output_asm_insn (\"add{l}\\t{%0, %1|%1, %0}\", xops);\n+\t}\n+\n+      /* Adjust the this parameter by a value stored in the vtable.  */\n+      if (vcall_index)\n+\t{\n+\t  rtx this_parm;\n+\n+\t  /* Put the this parameter into %eax.  */\n+\t  this_parm = ia32_this_parameter (function);\n+\t  if (!REG_P (this_parm))\n+\t    {\n+\t      xops[0] = this_parm;\n+\t      xops[1] = gen_rtx_REG (Pmode, 0);\n+\t      output_asm_insn (\"mov{l}\\t{%0, %1|%1, %0}\", xops);\n+\t    }\n+\t  /* Load the virtual table pointer into %edx.  */\n+\t  if (ix86_fntype_regparm (TREE_TYPE (function)) > 2)\n+\t    error (\"virtual function `%D' cannot have more than two register parameters\",\n+\t\t   function);\n+\t  xops[0] = gen_rtx_MEM (Pmode, \n+\t\t\t\t gen_rtx_REG (Pmode, 0));\n+\t  xops[1] = gen_rtx_REG (Pmode, 1);\n+\t  output_asm_insn (\"mov{l}\\t{%0, %1|%1, %0}\", xops);\n+\t  /* Adjust the this parameter.  */\n+\t  xops[0] = gen_rtx_MEM (SImode, \n+\t\t\t\t plus_constant (gen_rtx_REG (Pmode, 1), \n+\t\t\t\t\t\tvcall_index));\n+\t  xops[1] = gen_rtx_REG (Pmode, 0);\n+\t  output_asm_insn (\"add{l}\\t{%0, %1|%1, %0}\", xops);\n+\t  /* Put the this parameter back where it came from.  */\n+\t  if (!REG_P (this_parm))\n+\t    {\n+\t      xops[0] = gen_rtx_REG (Pmode, 0);\n+\t      xops[1] = ia32_this_parameter (function);\n+\t      output_asm_insn (\"mov{l}\\t{%0, %1|%1, %0}\", xops);\n+\t    }\n+\t}\n \n       if (flag_pic)\n \t{\n@@ -13928,13 +14001,24 @@ x86_output_mi_thunk (file, delta, function)\n \t}\n       else\n \t{\n-\t  fprintf (file, \"\\tjmp \");\n+\t  fprintf (file, \"\\tjmp\\t\");\n \t  assemble_name (file, XSTR (XEXP (DECL_RTL (function), 0), 0));\n \t  fprintf (file, \"\\n\");\n \t}\n     }\n }\n \n+void\n+x86_output_mi_thunk (file, thunk, delta, function)\n+     FILE *file;\n+     tree thunk;\n+     int delta;\n+     tree function;\n+{\n+  x86_output_mi_vcall_thunk (file, thunk, delta, /*vcall_index=*/0, \n+\t\t\t     function);\n+}\n+\n int\n x86_field_alignment (field, computed)\n      tree field;"}, {"sha": "09493b08808793c2d04afc34f3ac748459bce59d", "filename": "gcc/config/i386/unix.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fconfig%2Fi386%2Funix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fconfig%2Fi386%2Funix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Funix.h?ref=483ab821df8b418706ca1763088b1f2f9171fc16", "patch": "@@ -1,5 +1,5 @@\n /* Definitions for Unix assembler syntax for the Intel 80386.\n-   Copyright (C) 1988, 1994, 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1988, 1994, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -68,5 +68,5 @@ Boston, MA 02111-1307, USA.  */\n \n /* Output code to add DELTA to the first argument, and then jump to FUNCTION.\n    Used for C++ multiple inheritance.  */\n-#define ASM_OUTPUT_MI_THUNK(FILE, THUNK_FNDECL, DELTA, FUNCTION) \\\n-    x86_output_mi_thunk (FILE, DELTA, FUNCTION);\n+#define TARGET_ASM_OUTPUT_MI_THUNK x86_output_mi_thunk\n+#define TARGET_ASM_OUTPUT_MI_VCALL_THUNK x86_output_mi_vcall_thunk"}, {"sha": "b7b74dc013029c1afd97bcfd9787129e561f5830", "filename": "gcc/config/i960/i960-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fconfig%2Fi960%2Fi960-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fconfig%2Fi960%2Fi960-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960-protos.h?ref=483ab821df8b418706ca1763088b1f2f9171fc16", "patch": "@@ -86,6 +86,7 @@ extern void i960_setup_incoming_varargs PARAMS ((CUMULATIVE_ARGS *, enum machine\n extern tree i960_build_va_list PARAMS ((void));\n extern int i960_final_reg_parm_stack_space PARAMS ((int, tree));\n extern int i960_reg_parm_stack_space PARAMS ((tree));\n+extern void i960_output_mi_thunk PARAMS ((FILE *, tree, int, tree));\n #endif /* TREE_CODE */\n \n extern int process_pragma PARAMS ((int(*)(void), void(*)(int), const char *));"}, {"sha": "fe38d45c5a2d9e855e65ee0ba349b96271f86992", "filename": "gcc/config/i960/i960.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fconfig%2Fi960%2Fi960.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fconfig%2Fi960%2Fi960.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.c?ref=483ab821df8b418706ca1763088b1f2f9171fc16", "patch": "@@ -2824,3 +2824,25 @@ i960_scan_opcode (p)\n       break;\n     }\n }\n+\n+void\n+i960_output_mi_thunk (file, thunk, delta, function)\n+     FILE *file;\n+     tree thunk ATTRIBUTE_UNUSED;\n+     int delta;\n+     tree function;\n+{\n+  int d = delta;\n+  if (d < 0 && d > -32)\t\t\t\t\t\t\t\n+    fprintf (file, \"\\tsubo %d,g0,g0\\n\", -d);\t\t\t\t\n+  else if (d > 0 && d < 32)\t\t\t\t\t\t\n+    fprintf (file, \"\\taddo %d,g0,g0\\n\", d);\t\t\t\t\n+  else\t\t\t\t\t\t\t\t\t\n+    {\t\t\t\t\t\t\t\t\t\n+      fprintf (file, \"\\tldconst %d,r5\\n\", d);\t\t\t\t\n+      fprintf (file, \"\\taddo r5,g0,g0\\n\");\t\t\t\t\n+    }\t\t\t\t\t\t\t\t\t\n+  fprintf (file, \"\\tbx \");\t\t\t\t\t\t\n+  assemble_name (file, XSTR (XEXP (DECL_RTL (function), 0), 0));\t\n+  fprintf (file, \"\\n\");\t\t\t\t\t\t\t\n+}"}, {"sha": "11932e967f870c3520c83f905dee188b66aea3d1", "filename": "gcc/config/i960/i960.h", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fconfig%2Fi960%2Fi960.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fconfig%2Fi960%2Fi960.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.h?ref=483ab821df8b418706ca1763088b1f2f9171fc16", "patch": "@@ -1466,19 +1466,4 @@ extern int rtx_equal_function_value_matters;\n \n /* Output code to add DELTA to the first argument, and then jump to FUNCTION.\n    Used for C++ multiple inheritance.  */\n-#define ASM_OUTPUT_MI_THUNK(FILE, THUNK_FNDECL, DELTA, FUNCTION)\t\\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  int d = (DELTA);\t\t\t\t\t\t\t\\\n-  if (d < 0 && d > -32)\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\tsubo %d,g0,g0\\n\", -d);\t\t\t\t\\\n-  else if (d > 0 && d < 32)\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\taddo %d,g0,g0\\n\", d);\t\t\t\t\\\n-  else\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"\\tldconst %d,r5\\n\", d);\t\t\t\t\\\n-      fprintf (FILE, \"\\taddo r5,g0,g0\\n\");\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  fprintf (FILE, \"\\tbx \");\t\t\t\t\t\t\\\n-  assemble_name (FILE, XSTR (XEXP (DECL_RTL (FUNCTION), 0), 0));\t\\\n-  fprintf (FILE, \"\\n\");\t\t\t\t\t\t\t\\\n-} while (0);\n+#define ASM_OUTPUT_MI_THUNK i960_output_mi_thunk"}, {"sha": "6efb266a83b1501d2f733c23bb7a93b51d39b31f", "filename": "gcc/config/ia64/ia64-protos.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64-protos.h?ref=483ab821df8b418706ca1763088b1f2f9171fc16", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler for IA-64.\n-   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -121,6 +121,7 @@ extern int ia64_function_arg_pass_by_reference PARAMS((CUMULATIVE_ARGS *,\n \t\t\t\t\t\t       tree, int));\n extern int ia64_return_in_memory PARAMS((tree));\n extern void ia64_asm_output_external PARAMS((FILE *, tree, const char *));\n+extern void ia64_output_mi_thunk PARAMS((FILE *, tree, int, tree));\n #endif /* TREE_CODE */\n \n extern int ia64_register_move_cost PARAMS((enum machine_mode, enum reg_class,"}, {"sha": "5fa9927f157045e025e5ae518cb3788dd9510570", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=483ab821df8b418706ca1763088b1f2f9171fc16", "patch": "@@ -8159,4 +8159,39 @@ ia64_aix_select_rtx_section (mode, x, align)\n   flag_pic = save_pic;\n }\n \n+void\n+ia64_output_mi_thunk (file, thunk, delta, function)\n+     FILE *file;\n+     tree thunk ATTRIBUTE_UNUSED;\n+     int delta;\n+     tree function;\n+{\n+  if (CONST_OK_FOR_I (delta))\t\t\t\t\t\t\n+    {\t\t\t\t\t\t\t\t\t\n+      fprintf (file, \"\\tadds r32 = \");\t\t\t\t\t\n+      fprintf (file, HOST_WIDE_INT_PRINT_DEC, (delta));\t\t\t\n+      fprintf (file, \", r32\\n\");\t\t\t\t\t\n+    }\t\t\t\t\t\t\t\t\t\n+  else\t\t\t\t\t\t\t\t\t\n+    {\t\t\t\t\t\t\t\t\t\n+      if (CONST_OK_FOR_J (delta))\t\t\t\t\t\n+        {\t\t\t\t\t\t\t\t\n+          fprintf (file, \"\\taddl r2 = \");\t\t\t\t\n+          fprintf (file, HOST_WIDE_INT_PRINT_DEC, (delta));\t\t\n+          fprintf (file, \", r0\\n\");\t\t\t\t\t\n+        }\t\t\t\t\t\t\t\t\n+      else\t\t\t\t\t\t\t\t\n+        {\t\t\t\t\t\t\t\t\n+\t  fprintf (file, \"\\tmovl r2 = \");\t\t\t\t\n+\t  fprintf (file, HOST_WIDE_INT_PRINT_DEC, (delta));\t\t\n+\t  fprintf (file, \"\\n\");\t\t\t\t\t\t\n+        }\t\t\t\t\t\t\t\t\n+      fprintf (file, \"\\t;;\\n\");\t\t\t\t\t\t\n+      fprintf (file, \"\\tadd r32 = r2, r32\\n\");\t\t\t\t\n+    }\t\t\t\t\t\t\t\t\t\n+  fprintf (file, \"\\tbr \");\t\t\t\t\t\t\n+  assemble_name (file, XSTR (XEXP (DECL_RTL (function), 0), 0));\t\n+  fprintf (file, \"\\n\");\t\t\t\t\t\t\t\n+}\n+\n #include \"gt-ia64.h\""}, {"sha": "e0d524800930dcd141c01d3aa7e26bbe61c79e2a", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 1, "deletions": 29, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=483ab821df8b418706ca1763088b1f2f9171fc16", "patch": "@@ -1431,35 +1431,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n /* A C compound statement that outputs the assembler code for a thunk function,\n    used to implement C++ virtual function calls with multiple inheritance.  */\n \n-#define ASM_OUTPUT_MI_THUNK(FILE, THUNK_FNDECL, DELTA, FUNCTION) \\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  if (CONST_OK_FOR_I (DELTA))\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"\\tadds r32 = \");\t\t\t\t\t\\\n-      fprintf (FILE, HOST_WIDE_INT_PRINT_DEC, (DELTA));\t\t\t\\\n-      fprintf (FILE, \", r32\\n\");\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  else\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      if (CONST_OK_FOR_J (DELTA))\t\t\t\t\t\\\n-        {\t\t\t\t\t\t\t\t\\\n-          fprintf (FILE, \"\\taddl r2 = \");\t\t\t\t\\\n-          fprintf (FILE, HOST_WIDE_INT_PRINT_DEC, (DELTA));\t\t\\\n-          fprintf (FILE, \", r0\\n\");\t\t\t\t\t\\\n-        }\t\t\t\t\t\t\t\t\\\n-      else\t\t\t\t\t\t\t\t\\\n-        {\t\t\t\t\t\t\t\t\\\n-\t  fprintf (FILE, \"\\tmovl r2 = \");\t\t\t\t\\\n-\t  fprintf (FILE, HOST_WIDE_INT_PRINT_DEC, (DELTA));\t\t\\\n-\t  fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n-        }\t\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"\\t;;\\n\");\t\t\t\t\t\t\\\n-      fprintf (FILE, \"\\tadd r32 = r2, r32\\n\");\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  fprintf (FILE, \"\\tbr \");\t\t\t\t\t\t\\\n-  assemble_name (FILE, XSTR (XEXP (DECL_RTL (FUNCTION), 0), 0));\t\\\n-  fprintf (FILE, \"\\n\");\t\t\t\t\t\t\t\\\n-} while (0)\n+#define TARGET_ASM_OUTPUT_MI_THUNK ia64_output_mi_thunk\n \n /* Output part N of a function descriptor for DECL.  For ia64, both\n    words are emitted with a single relocation, so ignore N > 0.  */"}, {"sha": "ce2fbb089f0911c0e5a910d24298c57432fe3fd9", "filename": "gcc/config/m68k/linux.h", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fconfig%2Fm68k%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fconfig%2Fm68k%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Flinux.h?ref=483ab821df8b418706ca1763088b1f2f9171fc16", "patch": "@@ -357,25 +357,4 @@ do {\t\t\t\t\t\t\t\t\t\\\n \f\n /* Output code to add DELTA to the first argument, and then jump to FUNCTION.\n    Used for C++ multiple inheritance.  */\n-#define ASM_OUTPUT_MI_THUNK(FILE, THUNK_FNDECL, DELTA, FUNCTION)\t\\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  if (DELTA > 0 && DELTA <= 8)\t\t\t\t\t\t\\\n-    asm_fprintf (FILE, \"\\taddq.l %I%d,4(%Rsp)\\n\", DELTA);\t\t\\\n-  else if (DELTA < 0 && DELTA >= -8)\t\t\t\t\t\\\n-    asm_fprintf (FILE, \"\\tsubq.l %I%d,4(%Rsp)\\n\", -DELTA);\t\t\\\n-  else\t\t\t\t\t\t\t\t\t\\\n-    asm_fprintf (FILE, \"\\tadd.l %I%d,4(%Rsp)\\n\", DELTA);\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  if (flag_pic)\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"\\tbra.l \");\t\t\t\t\t\\\n-      assemble_name (FILE, XSTR (XEXP (DECL_RTL (FUNCTION), 0), 0));\t\\\n-      fprintf (FILE, \"@PLTPC\\n\");\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  else\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"\\tjmp \");\t\t\t\t\t\t\\\n-      assemble_name (FILE, XSTR (XEXP (DECL_RTL (FUNCTION), 0), 0));\t\\\n-      fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-} while (0)\n+#define TARGET_ASM_OUTPUT_MI_THUNK m68k_output_mi_thunk"}, {"sha": "33accb90b7f30febc87f0f1a691f3542eee277b5", "filename": "gcc/config/m68k/m68k-protos.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h?ref=483ab821df8b418706ca1763088b1f2f9171fc16", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler.  Sun 68000/68020 version.\n-   Copyright (C) 2000 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -64,6 +64,10 @@ extern int pcrel_address PARAMS ((rtx, enum machine_mode));\n extern rtx legitimize_pic_address PARAMS ((rtx, enum machine_mode, rtx));\n #endif /* RTX_CODE */\n \n+#ifdef TREE_CODE\n+extern void m68k_output_mi_thunk PARAMS ((FILE *, tree, int, tree));\n+#endif /* TREE_CODE */\n+\n extern int flags_in_68881 PARAMS ((void));\n extern int use_return_insn PARAMS ((void));\n extern void override_options PARAMS ((void));"}, {"sha": "8a1a729283867ac99497aa8271c7fba680bdd22c", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=483ab821df8b418706ca1763088b1f2f9171fc16", "patch": "@@ -3835,3 +3835,31 @@ m68k_svr3_asm_out_constructor (symbol, priority)\n   output_asm_insn (output_move_simode (xop), xop);\n }\n #endif\n+\n+void\n+m68k_output_mi_thunk (file, thunk, delta, function)\n+     FILE *file;\n+     tree thunk ATTRIBUTE_UNUSED;\n+     int delta;\n+     tree function;\n+{\n+  if (delta > 0 && delta <= 8)\t\t\t\t\t\t\n+    asm_fprintf (file, \"\\taddq.l %I%d,4(%Rsp)\\n\", delta);\t\t\n+  else if (delta < 0 && delta >= -8)\t\t\t\t\t\n+    asm_fprintf (file, \"\\tsubq.l %I%d,4(%Rsp)\\n\", -delta);\t\t\n+  else\t\t\t\t\t\t\t\t\t\n+    asm_fprintf (file, \"\\tadd.l %I%d,4(%Rsp)\\n\", delta);\t\t\n+\t\t\t\t\t\t\t\t\t\n+  if (flag_pic)\t\t\t\t\t\t\t\t\n+    {\t\t\t\t\t\t\t\t\t\n+      fprintf (file, \"\\tbra.l \");\t\t\t\t\t\n+      assemble_name (file, XSTR (XEXP (DECL_RTL (function), 0), 0));\t\n+      fprintf (file, \"@PLTPC\\n\");\t\t\t\t\t\n+    }\t\t\t\t\t\t\t\t\t\n+  else\t\t\t\t\t\t\t\t\t\n+    {\t\t\t\t\t\t\t\t\t\n+      fprintf (file, \"\\tjmp \");\t\t\t\t\t\t\n+      assemble_name (file, XSTR (XEXP (DECL_RTL (function), 0), 0));\t\n+      fprintf (file, \"\\n\");\t\t\t\t\t\t\n+    }\t\t\t\t\t\t\t\t\t\n+}"}, {"sha": "107bdeb03df83fdb935b505b0842eb4c30a034cb", "filename": "gcc/config/m68k/netbsd-elf.h", "status": "modified", "additions": 1, "deletions": 25, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fconfig%2Fm68k%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fconfig%2Fm68k%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fnetbsd-elf.h?ref=483ab821df8b418706ca1763088b1f2f9171fc16", "patch": "@@ -425,31 +425,7 @@ while (0)\n /* Output code to add DELTA to the first argument, and then jump to FUNCTION.\n    Used for C++ multiple inheritance.  */\n \n-#define ASM_OUTPUT_MI_THUNK(FILE, THUNK_FNDECL, DELTA, FUNCTION)\t\\\n-do\t\t\t\t\t\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-    if (DELTA > 0 && DELTA <= 8)\t\t\t\t\t\\\n-      asm_fprintf (FILE, \"\\taddq.l %I%d,4(%Rsp)\\n\", DELTA);\t\t\\\n-    else if (DELTA < 0 && DELTA >= -8)\t\t\t\t\t\\\n-      asm_fprintf (FILE, \"\\tsubq.l %I%d,4(%Rsp)\\n\", -DELTA);\t\t\\\n-    else\t\t\t\t\t\t\t\t\\\n-      asm_fprintf (FILE, \"\\tadd.l %I%d,4(%Rsp)\\n\", DELTA);\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-    if (flag_pic)\t\t\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tfprintf (FILE, \"\\tbra.l \");\t\t\t\t\t\\\n-\tassemble_name (FILE, XSTR (XEXP (DECL_RTL (FUNCTION), 0), 0));\t\\\n-\tfprintf (FILE, \"@PLTPC\\n\");\t\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-    else\t\t\t\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tfprintf (FILE, \"\\tjmp \");\t\t\t\t\t\\\n-\tassemble_name (FILE, XSTR (XEXP (DECL_RTL (FUNCTION), 0), 0));\t\\\n-\tfprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-  }\t\t\t\t\t\t\t\t\t\\\n-while (0)\n-\n+#define TARGET_ASM_OUTPUT_MI_THUNK m68k_output_mi_thunk\n \n /* Output assembler code for a block containing the constant parts\n    of a trampoline, leaving space for the variable parts.  */"}, {"sha": "8001f0af78ef922a840087680f56effa09586718", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=483ab821df8b418706ca1763088b1f2f9171fc16", "patch": "@@ -795,8 +795,7 @@ typedef struct { int regs; int lib; } CUMULATIVE_ARGS;\n #define EPILOGUE_USES(REGNO) \\\n  ((REGNO) == MMIX_INCOMING_RETURN_ADDRESS_REGNUM)\n \n-#define ASM_OUTPUT_MI_THUNK(FILE, THUNK_FNDECL, DELTA, FUNCTION)\t\\\n- mmix_asm_output_mi_thunk (FILE, THUNK_FNDECL, DELTA, FUNCTION)\n+#define TARGET_ASM_OUTPUT_MI_THUNK mmix_asm_output_mi_thunk\n \n \n /* Node: Profiling */"}, {"sha": "003838c6440101ba202b1d6ad970f17548383c3e", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=483ab821df8b418706ca1763088b1f2f9171fc16", "patch": "@@ -897,8 +897,7 @@ extern GTY(()) rtx hppa_compare_op0;\n extern GTY(()) rtx hppa_compare_op1;\n extern enum cmp_type hppa_branch_type;\n \n-#define ASM_OUTPUT_MI_THUNK(FILE, THUNK_FNDECL, DELTA, FUNCTION) \\\n-  pa_asm_output_mi_thunk (FILE, THUNK_FNDECL, DELTA, FUNCTION)\n+#define TARGET_ASM_OUTPUT_MI_THUNK pa_asm_output_mi_thunk\n \n /* On HPPA, we emit profiling code as rtl via PROFILE_HOOK rather than\n    as assembly via FUNCTION_PROFILER.  Just output a local label."}, {"sha": "d393c8e653c88ab67b55f066392e1f5fe23e7308", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=483ab821df8b418706ca1763088b1f2f9171fc16", "patch": "@@ -667,8 +667,7 @@ extern int rs6000_pic_labelno;\n     FUNCTION instead of jumping to it.  The generic approach does not support\n     varargs.  */\n \n-#define\tASM_OUTPUT_MI_THUNK(FILE, THUNK_FNDECL, DELTA, FUNCTION) \\\n-  output_mi_thunk (FILE, THUNK_FNDECL, DELTA, FUNCTION)\n+#define\tTARGET_ASM_OUTPUT_MI_THUNK output_mi_thunk\n \n /* The USER_LABEL_PREFIX stuff is affected by the -fleading-underscore\n    flag.  The LOCAL_LABEL_PREFIX variable is used by dbxelf.h.  */"}, {"sha": "a906d446333e1e5e26387d7da0f8fd9f157aab79", "filename": "gcc/config/s390/s390-protos.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-protos.h?ref=483ab821df8b418706ca1763088b1f2f9171fc16", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler, for IBM S/390.\n-   Copyright (C) 2000 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2002 Free Software Foundation, Inc.\n    Contributed by Hartmut Penner (hpenner@de.ibm.com)\n \n This file is part of GNU CC.\n@@ -86,6 +86,7 @@ extern tree s390_build_va_list PARAMS ((void));\n extern rtx s390_function_arg PARAMS ((CUMULATIVE_ARGS *, enum machine_mode, tree, int));\n extern void s390_va_start PARAMS ((tree, rtx));\n extern rtx s390_va_arg PARAMS ((tree, tree));\n+extern void s390_output_mi_thunk PARAMS ((FILE *, tree, int, tree));\n #endif /* RTX_CODE */\n #endif /* TREE_CODE */\n "}, {"sha": "f7404bc7ba74dac14f39ad6d8302eb0221df99b8", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=483ab821df8b418706ca1763088b1f2f9171fc16", "patch": "@@ -5582,3 +5582,78 @@ s390_encode_section_info (decl, first)\n \t}\n     }\n }\n+\n+void\n+s390_output_mi_thunk (file, thunk, delta, function)\n+     FILE *file;\n+     tree thunk ATTRIBUTE_UNUSED;\n+     int delta;\n+     tree function;\n+{\n+  if (TARGET_64BIT)                                                           \n+    {                                                                         \n+      if (flag_pic)                                                           \n+        {                                                                     \n+          fprintf (file, \"\\tlarl  1,0f\\n\");                                   \n+          fprintf (file, \"\\tagf   %d,0(1)\\n\",                                 \n+                   aggregate_value_p (TREE_TYPE                               \n+                                      (TREE_TYPE (function))) ? 3 :2 );       \n+          fprintf (file, \"\\tlarl  1,\");                                       \n+          assemble_name (file, XSTR (XEXP (DECL_RTL (function), 0), 0));      \n+          fprintf (file, \"@GOTENT\\n\");                                        \n+          fprintf (file, \"\\tlg    1,0(1)\\n\");                                 \n+          fprintf (file, \"\\tbr    1\\n\");                                      \n+          fprintf (file, \"0:\\t.long  \");\t                              \n+          fprintf (file, HOST_WIDE_INT_PRINT_DEC, (delta));                   \n+          fprintf (file, \"\\n\");\t\t\t                              \n+        }                                                                     \n+      else                                                                    \n+        {                                                                     \n+          fprintf (file, \"\\tlarl  1,0f\\n\");                                   \n+          fprintf (file, \"\\tagf   %d,0(1)\\n\",                                 \n+          aggregate_value_p (TREE_TYPE                                        \n+                             (TREE_TYPE (function))) ? 3 :2 );                \n+          fprintf (file, \"\\tjg  \");                                           \n+          assemble_name (file, XSTR (XEXP (DECL_RTL (function), 0), 0));      \n+          fprintf (file, \"\\n\");                                               \n+          fprintf (file, \"0:\\t.long  \");\t\t                      \n+          fprintf (file, HOST_WIDE_INT_PRINT_DEC, (delta));                   \n+          fprintf (file, \"\\n\");\t\t\t                              \n+        }                                                                     \n+    }                                                                         \n+  else                                                                        \n+    {                                                                         \n+      if (flag_pic)                                                           \n+        {                                                                     \n+          fprintf (file, \"\\tbras  1,0f\\n\");                                   \n+          fprintf (file, \"\\t.long _GLOBAL_OFFSET_TABLE_-.\\n\");                \n+          fprintf (file, \"\\t.long  \");                                        \n+          assemble_name (file, XSTR (XEXP (DECL_RTL (function), 0), 0));      \n+          fprintf (file, \"@GOT\\n\");                                           \n+          fprintf (file, \"\\t.long  \");\t\t                              \n+          fprintf (file, HOST_WIDE_INT_PRINT_DEC, (delta));                   \n+          fprintf (file, \"\\n\");\t\t\t                              \n+          fprintf (file, \"0:\\tal  %d,8(1)\\n\",                                 \n+                   aggregate_value_p (TREE_TYPE                               \n+                                      (TREE_TYPE (function))) ? 3 : 2 );      \n+          fprintf (file, \"\\tl     0,4(1)\\n\");                                 \n+          fprintf (file, \"\\tal    1,0(1)\\n\");                                 \n+          fprintf (file, \"\\talr   1,0\\n\");                                    \n+          fprintf (file, \"\\tl     1,0(1)\\n\");                                 \n+          fprintf (file, \"\\tbr    1\\n\");                                      \n+        } else {                                                              \n+          fprintf (file, \"\\tbras  1,0f\\n\");                                   \n+          fprintf (file, \"\\t.long  \");                                        \n+          assemble_name (file, XSTR (XEXP (DECL_RTL (function), 0), 0));      \n+          fprintf (file, \"-.\\n\");                                             \n+          fprintf (file, \"\\t.long  \");\t\t                              \n+          fprintf (file, HOST_WIDE_INT_PRINT_DEC, (delta));                   \n+          fprintf (file, \"\\n\");\t\t\t                              \n+          fprintf (file, \"0:\\tal  %d,4(1)\\n\",                                 \n+                   aggregate_value_p (TREE_TYPE                               \n+                                      (TREE_TYPE (function))) ? 3 : 2 );      \n+          fprintf (file, \"\\tal    1,0(1)\\n\");                                 \n+          fprintf (file, \"\\tbr    1\\n\");                                      \n+       }                                                                      \n+    }                                                                         \n+}"}, {"sha": "e767aeb8a31c2ec149e43d5114abc317d415b7c6", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 1, "deletions": 70, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=483ab821df8b418706ca1763088b1f2f9171fc16", "patch": "@@ -856,76 +856,7 @@ CUMULATIVE_ARGS;\n \n /* Output code to add DELTA to the first argument, and then jump to FUNCTION.\n    Used for C++ multiple inheritance.  */\n-#define ASM_OUTPUT_MI_THUNK(FILE, THUNK_FNDECL, DELTA, FUNCTION)              \\\n-do {                                                                          \\\n-  if (TARGET_64BIT)                                                           \\\n-    {                                                                         \\\n-      if (flag_pic)                                                           \\\n-        {                                                                     \\\n-          fprintf (FILE, \"\\tlarl  1,0f\\n\");                                   \\\n-          fprintf (FILE, \"\\tagf   %d,0(1)\\n\",                                 \\\n-                   aggregate_value_p (TREE_TYPE                               \\\n-                                      (TREE_TYPE (FUNCTION))) ? 3 :2 );       \\\n-          fprintf (FILE, \"\\tlarl  1,\");                                       \\\n-          assemble_name (FILE, XSTR (XEXP (DECL_RTL (FUNCTION), 0), 0));      \\\n-          fprintf (FILE, \"@GOTENT\\n\");                                        \\\n-          fprintf (FILE, \"\\tlg    1,0(1)\\n\");                                 \\\n-          fprintf (FILE, \"\\tbr    1\\n\");                                      \\\n-          fprintf (FILE, \"0:\\t.long  \");\t                              \\\n-          fprintf (FILE, HOST_WIDE_INT_PRINT_DEC, (DELTA));                   \\\n-          fprintf (FILE, \"\\n\");\t\t\t                              \\\n-        }                                                                     \\\n-      else                                                                    \\\n-        {                                                                     \\\n-          fprintf (FILE, \"\\tlarl  1,0f\\n\");                                   \\\n-          fprintf (FILE, \"\\tagf   %d,0(1)\\n\",                                 \\\n-          aggregate_value_p (TREE_TYPE                                        \\\n-                             (TREE_TYPE (FUNCTION))) ? 3 :2 );                \\\n-          fprintf (FILE, \"\\tjg  \");                                           \\\n-          assemble_name (FILE, XSTR (XEXP (DECL_RTL (FUNCTION), 0), 0));      \\\n-          fprintf (FILE, \"\\n\");                                               \\\n-          fprintf (FILE, \"0:\\t.long  \");\t\t                      \\\n-          fprintf (FILE, HOST_WIDE_INT_PRINT_DEC, (DELTA));                   \\\n-          fprintf (FILE, \"\\n\");\t\t\t                              \\\n-        }                                                                     \\\n-    }                                                                         \\\n-  else                                                                        \\\n-    {                                                                         \\\n-      if (flag_pic)                                                           \\\n-        {                                                                     \\\n-          fprintf (FILE, \"\\tbras  1,0f\\n\");                                   \\\n-          fprintf (FILE, \"\\t.long _GLOBAL_OFFSET_TABLE_-.\\n\");                \\\n-          fprintf (FILE, \"\\t.long  \");                                        \\\n-          assemble_name (FILE, XSTR (XEXP (DECL_RTL (FUNCTION), 0), 0));      \\\n-          fprintf (FILE, \"@GOT\\n\");                                           \\\n-          fprintf (FILE, \"\\t.long  \");\t\t                              \\\n-          fprintf (FILE, HOST_WIDE_INT_PRINT_DEC, (DELTA));                   \\\n-          fprintf (FILE, \"\\n\");\t\t\t                              \\\n-          fprintf (FILE, \"0:\\tal  %d,8(1)\\n\",                                 \\\n-                   aggregate_value_p (TREE_TYPE                               \\\n-                                      (TREE_TYPE (FUNCTION))) ? 3 : 2 );      \\\n-          fprintf (FILE, \"\\tl     0,4(1)\\n\");                                 \\\n-          fprintf (FILE, \"\\tal    1,0(1)\\n\");                                 \\\n-          fprintf (FILE, \"\\talr   1,0\\n\");                                    \\\n-          fprintf (FILE, \"\\tl     1,0(1)\\n\");                                 \\\n-          fprintf (FILE, \"\\tbr    1\\n\");                                      \\\n-        } else {                                                              \\\n-          fprintf (FILE, \"\\tbras  1,0f\\n\");                                   \\\n-          fprintf (FILE, \"\\t.long  \");                                        \\\n-          assemble_name (FILE, XSTR (XEXP (DECL_RTL (FUNCTION), 0), 0));      \\\n-          fprintf (FILE, \"-.\\n\");                                             \\\n-          fprintf (FILE, \"\\t.long  \");\t\t                              \\\n-          fprintf (FILE, HOST_WIDE_INT_PRINT_DEC, (DELTA));                   \\\n-          fprintf (FILE, \"\\n\");\t\t\t                              \\\n-          fprintf (FILE, \"0:\\tal  %d,4(1)\\n\",                                 \\\n-                   aggregate_value_p (TREE_TYPE                               \\\n-                                      (TREE_TYPE (FUNCTION))) ? 3 : 2 );      \\\n-          fprintf (FILE, \"\\tal    1,0(1)\\n\");                                 \\\n-          fprintf (FILE, \"\\tbr    1\\n\");                                      \\\n-       }                                                                      \\\n-    }                                                                         \\\n-} while (0)\n-\n+#define TARGET_ASM_OUTPUT_MI_THUNK s390_output_mi_thunk\n \n /* Addressing modes, and classification of registers for them.  */\n "}, {"sha": "8c3f70d5e9d274bfb3a7ea035b1a646973cb9017", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=483ab821df8b418706ca1763088b1f2f9171fc16", "patch": "@@ -2869,8 +2869,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n /* Output code to add DELTA to the first argument, and then jump to FUNCTION.\n    Used for C++ multiple inheritance.  */\n-#define ASM_OUTPUT_MI_THUNK(FILE, THUNK_FNDECL, DELTA, FUNCTION) \\\n-  sparc_output_mi_thunk (FILE, THUNK_FNDECL, DELTA, FUNCTION)\n+#define TARGET_ASM_OUTPUT_MI_THUNK sparc_output_mi_thunk\n \n #define PRINT_OPERAND_PUNCT_VALID_P(CHAR) \\\n   ((CHAR) == '#' || (CHAR) == '*' || (CHAR) == '^' || (CHAR) == '(' || (CHAR) == '_')"}, {"sha": "8034f89a0b20e654148a2f5006a067de80e4e0a8", "filename": "gcc/config/stormy16/stormy16.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.h?ref=483ab821df8b418706ca1763088b1f2f9171fc16", "patch": "@@ -1624,8 +1624,7 @@ enum reg_class\n    frontend will generate a less efficient heavyweight thunk that calls\n    FUNCTION instead of jumping to it.  The generic approach does not support\n    varargs.  */\n-#define ASM_OUTPUT_MI_THUNK(FILE, THUNK_FNDECL, DELTA, FUNCTION)\t\\\n-  xstormy16_asm_output_mi_thunk (FILE, THUNK_FNDECL, DELTA, FUNCTION)\n+#define TARGET_ASM_OUTPUT_MI_THUNK xstormy16_asm_output_mi_thunk\n \n \f\n /* Generating Code for Profiling.  */"}, {"sha": "928a2ab6554be6fa9483ad599b9343569655de16", "filename": "gcc/config/vax/vax-protos.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fconfig%2Fvax%2Fvax-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fconfig%2Fvax%2Fvax-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax-protos.h?ref=483ab821df8b418706ca1763088b1f2f9171fc16", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler.  VAX version.\n-   Copyright (C) 2000 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -36,6 +36,7 @@ extern int check_float_value PARAMS ((enum machine_mode, REAL_VALUE_TYPE *, int)\n \n #ifdef TREE_CODE\n extern void vms_check_external PARAMS ((tree, const char *, int));\n+extern void vax_output_mi_thunk PARAMS ((FILE *, tree, int, tree));\n #endif /* TREE_CODE */\n \n extern void vms_flush_pending_externals PARAMS ((FILE *));"}, {"sha": "35718813f3edc67adeda1caae26134ceb1c0b130", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=483ab821df8b418706ca1763088b1f2f9171fc16", "patch": "@@ -992,3 +992,17 @@ reg_was_0_p (insn, op)\n \t  /* Make sure the reg hasn't been clobbered.  */\n \t  && ! reg_set_between_p (op, XEXP (link, 0), insn));\n }\n+\n+void\n+vax_output_mi_thunk (file, thunk, delta, function)\n+     FILE *file;\n+     tree thunk ATTRIBUTE_UNUSED;\n+     int delta;\n+     tree function;\n+{\n+  fprintf (file, \"\\t.word 0x0ffc\\n\");\t\t\t\t\t\n+  asm_fprintf (file, \"\\taddl2 $%d,4(%Rap)\\n\", delta);\t\t\t\n+  fprintf (file, \"\\tjmp \");\t\t\t\t\t\t\n+  assemble_name (file,  XSTR (XEXP (DECL_RTL (function), 0), 0));\t\n+  fprintf (file, \"+2\\n\");\t\t\t\t\t\t\n+}"}, {"sha": "44844867831c85edaa734cb8ff3c197ba4d1eaa2", "filename": "gcc/config/vax/vax.h", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fconfig%2Fvax%2Fvax.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fconfig%2Fvax%2Fvax.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.h?ref=483ab821df8b418706ca1763088b1f2f9171fc16", "patch": "@@ -1161,14 +1161,7 @@ enum reg_class { NO_REGS, ALL_REGS, LIM_REG_CLASSES };\n \taddl2\t$DELTA, 4(ap)\t#adjust first argument\n \tjmp\tFUNCTION+2\t#jump beyond FUNCTION's entry mask\n  */\n-#define ASM_OUTPUT_MI_THUNK(FILE, THUNK_FNDECL, DELTA, FUNCTION)\t\\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  fprintf (FILE, \"\\t.word 0x0ffc\\n\");\t\t\t\t\t\\\n-  asm_fprintf (FILE, \"\\taddl2 $%d,4(%Rap)\\n\", DELTA);\t\t\t\\\n-  fprintf (FILE, \"\\tjmp \");\t\t\t\t\t\t\\\n-  assemble_name (FILE,  XSTR (XEXP (DECL_RTL (FUNCTION), 0), 0));\t\\\n-  fprintf (FILE, \"+2\\n\");\t\t\t\t\t\t\\\n-} while (0)\n+#define ASM_OUTPUT_MI_THUNK vax_output_mi_thunk\n \n /* Print an instruction operand X on file FILE.\n    CODE is the code from the %-spec that requested printing this operand;"}, {"sha": "8da73626fce8947daa1970cdf95d1276db2b6978", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=483ab821df8b418706ca1763088b1f2f9171fc16", "patch": "@@ -1,3 +1,9 @@\n+2002-10-18  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* Make-lang.in (method.o): Depend on TARGET_H.\n+\t* method.c (target.h): Include it.\n+\t(use_thunk): Use target hooks.  Use vcall thunks, if available.\n+\n 2002-10-18  Mark Mitchell  <mark@codesourcery.com>\n \n \t* class.c (base_derived_from): Make sure return value is a bool."}, {"sha": "42656e7933dfdd929a84402db58f32a58de20ae4", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=483ab821df8b418706ca1763088b1f2f9171fc16", "patch": "@@ -246,7 +246,7 @@ cp/friend.o: cp/friend.c $(CXX_TREE_H) flags.h $(RTL_H) toplev.h $(EXPR_H)\n cp/init.o: cp/init.c $(CXX_TREE_H) flags.h $(RTL_H) $(EXPR_H) toplev.h \\\n   $(GGC_H) except.h\n cp/method.o: cp/method.c $(CXX_TREE_H) toplev.h $(GGC_H) $(RTL_H) $(EXPR_H) \\\n-  $(TM_P_H)\n+  $(TM_P_H) $(TARGET_H)\n cp/cvt.o: cp/cvt.c $(CXX_TREE_H) cp/decl.h flags.h toplev.h convert.h\n cp/search.o: cp/search.c $(CXX_TREE_H) stack.h flags.h toplev.h $(RTL_H)\n cp/tree.o: cp/tree.c $(CXX_TREE_H) flags.h toplev.h $(GGC_H) $(RTL_H) \\"}, {"sha": "5d14f57e7f32d1686b3456ba3bc5917de5395515", "filename": "gcc/cp/method.c", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=483ab821df8b418706ca1763088b1f2f9171fc16", "patch": "@@ -34,6 +34,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"toplev.h\"\n #include \"ggc.h\"\n #include \"tm_p.h\"\n+#include \"target.h\"\n \n /* Various flags to control the mangling process.  */\n \n@@ -408,8 +409,8 @@ use_thunk (thunk_fndecl, emit_p)\n   BLOCK_VARS (DECL_INITIAL (thunk_fndecl)) \n     = DECL_ARGUMENTS (thunk_fndecl);\n \n-#ifdef ASM_OUTPUT_MI_THUNK\n-  if (!vcall_offset)\n+  if (targetm.asm_out.output_mi_vcall_thunk\n+      || (targetm.asm_out.output_mi_thunk && !vcall_offset))\n     {\n       const char *fnname;\n       current_function_decl = thunk_fndecl;\n@@ -419,18 +420,29 @@ use_thunk (thunk_fndecl, emit_p)\n       init_function_start (thunk_fndecl, input_filename, lineno);\n       current_function_is_thunk = 1;\n       assemble_start_function (thunk_fndecl, fnname);\n-      ASM_OUTPUT_MI_THUNK (asm_out_file, thunk_fndecl, delta, function);\n+      if (targetm.asm_out.output_mi_vcall_thunk)\n+\t{\n+\t  int vcall_value = (vcall_offset\n+\t\t\t     ? tree_low_cst (vcall_offset, /*pos=*/0)\n+\t\t\t     : 0);\n+\t  targetm.asm_out.output_mi_vcall_thunk (asm_out_file, \n+\t\t\t\t\t\t thunk_fndecl, delta, \n+\t\t\t\t\t\t vcall_value,\n+\t\t\t\t\t\t function);\n+\t}\n+      else\n+\ttargetm.asm_out.output_mi_thunk (asm_out_file, thunk_fndecl, \n+\t\t\t\t\t delta, function);\n       assemble_end_function (thunk_fndecl, fnname);\n       current_function_decl = 0;\n       cfun = 0;\n       TREE_ASM_WRITTEN (thunk_fndecl) = 1;\n     }\n   else\n-#endif /* ASM_OUTPUT_MI_THUNK */\n     {\n-      /* If we don't have the necessary macro for efficient thunks, generate\n-\t a thunk function that just makes a call to the real function.\n-\t Unfortunately, this doesn't work for varargs.  */\n+      /* If we don't have the necessary code for efficient thunks,\n+\t generate a thunk function that just makes a call to the real\n+\t function.  Unfortunately, this doesn't work for varargs.  */\n \n       tree a, t;\n "}, {"sha": "74231e255ea656affb5b4b0577ad6bb9e7b1f21b", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=483ab821df8b418706ca1763088b1f2f9171fc16", "patch": "@@ -4151,9 +4151,11 @@ outputting the insns in this list, usually by calling\n You need not define this macro if you did not define\n @code{DELAY_SLOTS_FOR_EPILOGUE}.\n \n-@findex ASM_OUTPUT_MI_THUNK\n-@item ASM_OUTPUT_MI_THUNK (@var{file}, @var{thunk_fndecl}, @var{delta}, @var{function})\n-A C compound statement that outputs the assembler code for a thunk\n+@end table\n+\n+@findex TARGET_ASM_OUTPUT_MI_THUNK\n+@deftypefn {Target Hook} void TARGET_ASM_OUTPUT_MI_THUNK (FILE *@var{file}, tree @var{thunk_fndecl}, int @var{delta}, tree @var{function})\n+A function that outputs the assembler code for a thunk\n function, used to implement C++ virtual function calls with multiple\n inheritance.  The thunk acts as a wrapper around a virtual function,\n adjusting the implicit object parameter before handing control off to\n@@ -4184,7 +4186,24 @@ If you do not define this macro, the target-independent code in the C++\n front end will generate a less efficient heavyweight thunk that calls\n @var{function} instead of jumping to it.  The generic approach does\n not support varargs.\n-@end table\n+@end deftypefn\n+\n+@findex TARGET_ASM_OUTPUT_MI_VCALL_THUNK\n+@deftypefn {Target Hook} void TARGET_ASM_OUTPUT_MI_VCALL_THUNK (FILE *@var{file}, tree @var{thunk_fndecl}, int @var{delta}, int @var{vcall_offset}, tree @var{function})\n+A function like @code{TARGET_ASM_OUTPUT_MI_THUNK}, except that if\n+@var{vcall_offset} is non-zero, an additional adjustment should be made\n+after adding @code{delta}.  In particular, if @var{p} is the\n+adjusted pointer, the following adjustment should be made:\n+\n+@example\n+p += (*((ptrdiff_t **)p))[vcall_offset/sizeof(ptrdiff_t)]\n+@end example\n+\n+@noindent\n+If this function is defined, it will always be used in place of\n+@code{TARGET_ASM_OUTPUT_MI_THUNK}.\n+\n+@end deftypefn\n \n @node Profiling\n @subsection Generating Code for Profiling"}, {"sha": "b5a0345fdd3d0a528d1bcbb070af29edc238ce4b", "filename": "gcc/target-def.h", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=483ab821df8b418706ca1763088b1f2f9171fc16", "patch": "@@ -103,6 +103,14 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n # endif\n #endif\n \n+#ifndef TARGET_ASM_OUTPUT_MI_THUNK\n+#define TARGET_ASM_OUTPUT_MI_THUNK NULL\n+#endif\n+\n+#ifndef TARGET_ASM_OUTPUT_MI_VCALL_THUNK\n+#define TARGET_ASM_OUTPUT_MI_VCALL_THUNK NULL\n+#endif\n+\n #if defined(TARGET_ASM_CONSTRUCTOR) && defined(TARGET_ASM_DESTRUCTOR)\n #define TARGET_HAVE_CTORS_DTORS true\n #else\n@@ -173,7 +181,9 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n \t\t\tTARGET_ASM_SELECT_RTX_SECTION,\t\t\\\n \t\t\tTARGET_ASM_UNIQUE_SECTION,\t\t\\\n \t\t\tTARGET_ASM_CONSTRUCTOR,\t\t\t\\\n-\t\t\tTARGET_ASM_DESTRUCTOR}\n+\t\t\tTARGET_ASM_DESTRUCTOR,                  \\\n+                        TARGET_ASM_OUTPUT_MI_THUNK,             \\\n+                        TARGET_ASM_OUTPUT_MI_VCALL_THUNK }\n \n /* Scheduler hooks.  All of these default to null pointers, which\n    haifa-sched.c looks for and handles.  */"}, {"sha": "b05a87dc2747e32868bf10fdbc19234bd81b9fd2", "filename": "gcc/target.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=483ab821df8b418706ca1763088b1f2f9171fc16", "patch": "@@ -119,6 +119,13 @@ struct gcc_target\n \n     /* Output a destructor for a symbol with a given priority.  */\n     void (* destructor) PARAMS ((rtx, int));\n+\n+    /* Output the assembler code for a thunk function.  */\n+    void (* output_mi_thunk) PARAMS ((FILE *, tree, int, tree));\n+\n+    /* Output the assembler code for a thunk function with a vcall\n+       offset.  */\n+    void (* output_mi_vcall_thunk) PARAMS ((FILE *, tree, int, int, tree));\n   } asm_out;\n \n   /* Functions relating to instruction scheduling.  */"}, {"sha": "f393197d4f89566754eb58134aad36ef12fbcf95", "filename": "gcc/testsuite/g++.dg/inherit/thunk1.C", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fthunk1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483ab821df8b418706ca1763088b1f2f9171fc16/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fthunk1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fthunk1.C?ref=483ab821df8b418706ca1763088b1f2f9171fc16", "patch": "@@ -0,0 +1,41 @@\n+// { dg-do run }\n+\n+#include <stdarg.h>\n+\n+extern \"C\" void abort ();\n+\n+struct A {\n+  virtual void f (int, ...) {}\n+  int i;\n+};\n+\n+struct B : virtual public A {\n+};\n+\n+struct C : public B {\n+  C ();\n+  virtual void f (int, ...);\n+};\n+\n+extern C* cp;\n+\n+C::C () { cp = this; }\n+\n+void C::f (int i, ...) {\n+  if (this != cp)\n+    abort ();\n+  va_list ap;\n+  if (i != 3)\n+    abort ();\n+  va_start (ap, i);\n+  if (va_arg (ap, int) != 7)\n+    abort ();\n+  va_end (ap);\n+}\n+\n+C* cp = new C;\n+\n+int main () \n+{\n+  cp->f (3, 7);\n+}"}]}