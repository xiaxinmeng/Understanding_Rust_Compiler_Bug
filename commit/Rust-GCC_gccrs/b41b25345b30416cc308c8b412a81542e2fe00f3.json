{"sha": "b41b25345b30416cc308c8b412a81542e2fe00f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQxYjI1MzQ1YjMwNDE2Y2MzMDhjOGI0MTJhODE1NDJlMmZlMDBmMw==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jblomqvi@cc.hut.fi", "date": "2004-07-04T17:00:12Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2004-07-04T17:00:12Z"}, "message": "re PR libfortran/15280 (Fortran9x commandline not accessable)\n\n\tPR fortran/15280\n\tPR fortran/15665\n\t* gfortran.h (enum gfc_generic_isym_id): Add GFC_ISYM_IARGC and\n\tGFC_ISYM_COMMAND_ARGUMENT_COUNT.\n\t* intrinsic.c (add_functions):  Identify iargc.  Add\n\tcommand_argument_count.\n\t(add_subroutines): Resolve getarg.  Add get_command and\n\tget_command_argument.\n\t* intrinsic.h (gfc_resolve_getarg, gfc_resolve_get_command,\n\tgfc_resolve_get_command_argument): Add prototypes.\n\t* iresolve.c (gfc_resolve_getarg, gfc_resolve_get_command,\n\tgfc_resolve_get_command_argument): New functions.\n\t* trans-decl.c (gfor_fndecl_iargc): New variable.\n\t(gfc_build_intrinsic_function_decls): Set it.\n\t* trans-intrinsic.c (gfc_conv_intrinsic_iargc): New function.\n\t(gfc_conv_intrinsic_function): Use it.\n\t* trans.h (gfor_fndecl_iargc): Declare.\nlibgfortran/\n\t* libgfortran.h (gfc_strlen_type): Define.\n\t* intrinsics/args.c (getarg): Rename ...\n\t(getarg_i4): ... to this.\n\t(getarg_i8, get_command_argument_i4, get_command_argument_i8,\n\tget_command_i4, get_command_i8): New functions.\n\nCo-Authored-By: Paul Brook <paul@codesourcery.com>\n\nFrom-SVN: r84087", "tree": {"sha": "bf14ee897d80e183e56fcc50abe726cd40989776", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf14ee897d80e183e56fcc50abe726cd40989776"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b41b25345b30416cc308c8b412a81542e2fe00f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b41b25345b30416cc308c8b412a81542e2fe00f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b41b25345b30416cc308c8b412a81542e2fe00f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b41b25345b30416cc308c8b412a81542e2fe00f3/comments", "author": null, "committer": null, "parents": [{"sha": "dafa622b60c5db11daf3ea3ab8e91da1df25a093", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dafa622b60c5db11daf3ea3ab8e91da1df25a093", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dafa622b60c5db11daf3ea3ab8e91da1df25a093"}], "stats": {"total": 344, "additions": 338, "deletions": 6}, "files": [{"sha": "ad9aa2ca59b8acb226cde865a35bc69b9bd7354b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b41b25345b30416cc308c8b412a81542e2fe00f3/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b41b25345b30416cc308c8b412a81542e2fe00f3/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=b41b25345b30416cc308c8b412a81542e2fe00f3", "patch": "@@ -1,3 +1,24 @@\n+2004-07-04  Janne Blomqvist  <jblomqvi@cc.hut.fi>\n+\tPaul Brook  <paul@codesourcery.com>\n+\n+\tPR fortran/15280\n+\tPR fortran/15665\n+\t* gfortran.h (enum gfc_generic_isym_id): Add GFC_ISYM_IARGC and\n+\tGFC_ISYM_COMMAND_ARGUMENT_COUNT.\n+\t* intrinsic.c (add_functions):  Identify iargc.  Add\n+\tcommand_argument_count.\n+\t(add_subroutines): Resolve getarg.  Add get_command and\n+\tget_command_argument.\n+\t* intrinsic.h (gfc_resolve_getarg, gfc_resolve_get_command,\n+\tgfc_resolve_get_command_argument): Add prototypes.\n+\t* iresolve.c (gfc_resolve_getarg, gfc_resolve_get_command,\n+\tgfc_resolve_get_command_argument): New functions.\n+\t* trans-decl.c (gfor_fndecl_iargc): New variable.\n+\t(gfc_build_intrinsic_function_decls): Set it.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_iargc): New function.\n+\t(gfc_conv_intrinsic_function): Use it.\n+\t* trans.h (gfor_fndecl_iargc): Declare.\n+\n 2004-07-04  Matthias Klose  <doko@debian.org>\n \n \t* Make-lang.in: Generate and install gfortran man page."}, {"sha": "54508dc590e3dd4685f33c276c85fd90972aa0e1", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b41b25345b30416cc308c8b412a81542e2fe00f3/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b41b25345b30416cc308c8b412a81542e2fe00f3/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=b41b25345b30416cc308c8b412a81542e2fe00f3", "patch": "@@ -291,6 +291,7 @@ enum gfc_generic_isym_id\n   GFC_ISYM_CEILING,\n   GFC_ISYM_CHAR,\n   GFC_ISYM_CMPLX,\n+  GFC_ISYM_COMMAND_ARGUMENT_COUNT,\n   GFC_ISYM_CONJG,\n   GFC_ISYM_COS,\n   GFC_ISYM_COSH,\n@@ -308,6 +309,7 @@ enum gfc_generic_isym_id\n   GFC_ISYM_FRACTION,\n   GFC_ISYM_IACHAR,\n   GFC_ISYM_IAND,\n+  GFC_ISYM_IARGC,\n   GFC_ISYM_IBCLR,\n   GFC_ISYM_IBITS,\n   GFC_ISYM_IBSET,"}, {"sha": "258843bad053ba42ada43ed105b2ab121884588a", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b41b25345b30416cc308c8b412a81542e2fe00f3/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b41b25345b30416cc308c8b412a81542e2fe00f3/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=b41b25345b30416cc308c8b412a81542e2fe00f3", "patch": "@@ -1104,6 +1104,10 @@ add_functions (void)\n   make_generic (\"iand\", GFC_ISYM_IAND);\n \n   add_sym_0 (\"iargc\", 1, 1, BT_INTEGER, di, NULL, NULL, NULL);\t/* Extension, takes no arguments */\n+  make_generic (\"iargc\", GFC_ISYM_IARGC);\n+\n+  add_sym_0 (\"command_argument_count\", 1, 1, BT_INTEGER, di, NULL, NULL, NULL);\n+  make_generic (\"command_argument_count\", GFC_ISYM_COMMAND_ARGUMENT_COUNT);\n \n   add_sym_2 (\"ibclr\", 1, 1, BT_INTEGER, di,\n \t     gfc_check_ibclr, gfc_simplify_ibclr, gfc_resolve_ibclr,\n@@ -1704,7 +1708,9 @@ add_subroutines (void)\n     *h = \"harvest\", *dt = \"date\", *vl = \"values\", *pt = \"put\",\n     *c = \"count\", *tm = \"time\", *tp = \"topos\", *gt = \"get\",\n     *t = \"to\", *zn = \"zone\", *fp = \"frompos\", *cm = \"count_max\",\n-    *f = \"from\", *sz = \"size\", *ln = \"len\", *cr = \"count_rate\";\n+    *f = \"from\", *sz = \"size\", *ln = \"len\", *cr = \"count_rate\",\n+    *com = \"command\", *length = \"length\", *st = \"status\",\n+    *val = \"value\", *num = \"number\";\n \n   int di, dr, dc;\n \n@@ -1738,8 +1744,24 @@ add_subroutines (void)\n \t     vl, BT_REAL, 4, 0, tm, BT_REAL, 4, 0);\n \n   add_sym_2 (\"getarg\", 0, 1, BT_UNKNOWN, 0,\n-\t     NULL, NULL, NULL,\n+\t     NULL, NULL, gfc_resolve_getarg,\n \t     c, BT_INTEGER, di, 0, vl, BT_CHARACTER, dc, 0);\n+\n+  /* F2003 commandline routines.  */\n+\n+  add_sym_3s (\"get_command\", 0, 1, BT_UNKNOWN, 0,\n+\t     NULL, NULL, gfc_resolve_get_command,\n+\t     com, BT_CHARACTER, dc, 1,\n+\t     length, BT_INTEGER, di, 1,\n+\t     st, BT_INTEGER, di, 1);\n+\n+  add_sym_4 (\"get_command_argument\", 0, 1, BT_UNKNOWN, 0,\n+\t     NULL, NULL, gfc_resolve_get_command_argument,\n+\t     num, BT_INTEGER, di, 0,\n+\t     val, BT_CHARACTER, dc, 1,\n+\t     length, BT_INTEGER, di, 1,\n+\t     st, BT_INTEGER, di, 1);\n+\t     \n   /* Extension */\n \n   add_sym_5 (\"mvbits\", 1, 1, BT_UNKNOWN, 0,"}, {"sha": "2d759cf5a9d1ffa10bfc749f094bce04a23baf80", "filename": "gcc/fortran/intrinsic.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b41b25345b30416cc308c8b412a81542e2fe00f3/gcc%2Ffortran%2Fintrinsic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b41b25345b30416cc308c8b412a81542e2fe00f3/gcc%2Ffortran%2Fintrinsic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.h?ref=b41b25345b30416cc308c8b412a81542e2fe00f3", "patch": "@@ -315,6 +315,9 @@ void gfc_resolve_verify (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_cpu_time (gfc_code *);\n void gfc_resolve_system_clock(gfc_code *);\n void gfc_resolve_random_number (gfc_code *);\n+void gfc_resolve_getarg (gfc_code *);\n+void gfc_resolve_get_command (gfc_code *);\n+void gfc_resolve_get_command_argument (gfc_code *);\n \n \n /* The mvbits() subroutine requires the most arguments: five.  */"}, {"sha": "f7e7f71427eb5d3de828d6879cb3b3d3a9b9efba", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b41b25345b30416cc308c8b412a81542e2fe00f3/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b41b25345b30416cc308c8b412a81542e2fe00f3/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=b41b25345b30416cc308c8b412a81542e2fe00f3", "patch": "@@ -1408,6 +1408,48 @@ gfc_resolve_srand (gfc_code * c)\n }\n \n \n+/* Resolve the getarg intrinsic subroutine.  */\n+\n+void\n+gfc_resolve_getarg (gfc_code * c)\n+{\n+  const char *name;\n+  int kind;\n+\n+  kind = gfc_default_integer_kind ();\n+  name = gfc_get_string (PREFIX(\"getarg_i%d\"), kind);\n+  c->resolved_sym = gfc_get_intrinsic_sub_symbol (name);\n+}\n+\n+\n+/* Resolve the get_command intrinsic subroutine.  */\n+\n+void\n+gfc_resolve_get_command (gfc_code * c)\n+{\n+  const char *name;\n+  int kind;\n+\n+  kind = gfc_default_integer_kind ();\n+  name = gfc_get_string (PREFIX(\"get_command_i%d\"), kind);\n+  c->resolved_sym = gfc_get_intrinsic_sub_symbol (name);\n+}\n+\n+\n+/* Resolve the get_command_argument intrinsic subroutine.  */\n+\n+void\n+gfc_resolve_get_command_argument (gfc_code * c)\n+{\n+  const char *name;\n+  int kind;\n+\n+  kind = gfc_default_integer_kind ();\n+  name = gfc_get_string (PREFIX(\"get_command_argument_i%d\"), kind);\n+  c->resolved_sym = gfc_get_intrinsic_sub_symbol (name);\n+}\n+\n+\n /* Determine if the arguments to SYSTEM_CLOCK are INTEGER(4) or INTEGER(8) */\n \n void"}, {"sha": "47d9ba53a5a2191bfaedd5c7bb33e2b06df6974b", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b41b25345b30416cc308c8b412a81542e2fe00f3/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b41b25345b30416cc308c8b412a81542e2fe00f3/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=b41b25345b30416cc308c8b412a81542e2fe00f3", "patch": "@@ -125,6 +125,7 @@ tree gfor_fndecl_adjustr;\n \n tree gfor_fndecl_size0;\n tree gfor_fndecl_size1;\n+tree gfor_fndecl_iargc;\n \n /* Intrinsic functions implemented in FORTRAN.  */\n tree gfor_fndecl_si_kind;\n@@ -1518,6 +1519,11 @@ gfc_build_intrinsic_function_decls (void)\n \t\t\t\t     gfc_array_index_type,\n \t\t\t\t     2, pvoid_type_node,\n \t\t\t\t     gfc_array_index_type);\n+\n+  gfor_fndecl_iargc =\n+    gfc_build_library_function_decl (get_identifier (PREFIX (\"iargc\")),\n+\t\t\t\t     gfc_int4_type_node,\n+\t\t\t\t     0);\n }\n \n "}, {"sha": "1151da952569ca1d1f5add0486edc6c9482c7f84", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b41b25345b30416cc308c8b412a81542e2fe00f3/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b41b25345b30416cc308c8b412a81542e2fe00f3/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=b41b25345b30416cc308c8b412a81542e2fe00f3", "patch": "@@ -2585,6 +2585,29 @@ gfc_conv_intrinsic_repeat (gfc_se * se, gfc_expr * expr)\n }\n \n \n+/* Generate code for the IARGC intrinsic.  If args_only is true this is\n+   actually the COMMAND_ARGUMENT_COUNT intrinsic, so return IARGC - 1.  */\n+\n+static void\n+gfc_conv_intrinsic_iargc (gfc_se * se, gfc_expr * expr, bool args_only)\n+{\n+  tree tmp;\n+  tree fndecl;\n+  tree type;\n+\n+  /* Call the library function.  This always returns an INTEGER(4).  */\n+  fndecl = gfor_fndecl_iargc;\n+  tmp = gfc_build_function_call (fndecl, NULL_TREE);\n+\n+  /* Convert it to the required type.  */\n+  type = gfc_typenode_for_spec (&expr->ts);\n+  tmp = fold_convert (type, tmp);\n+\n+  if (args_only)\n+    tmp = build (MINUS_EXPR, type, tmp, convert (type, integer_one_node));\n+  se->expr = tmp;\n+}\n+\n /* Generate code for an intrinsic function.  Some map directly to library\n    calls, others get special handling.  In some cases the name of the function\n    used depends on the type specifiers.  */\n@@ -2739,6 +2762,10 @@ gfc_conv_intrinsic_function (gfc_se * se, gfc_expr * expr)\n       gfc_conv_intrinsic_cmplx (se, expr, name[5] == '1');\n       break;\n \n+    case GFC_ISYM_COMMAND_ARGUMENT_COUNT:\n+      gfc_conv_intrinsic_iargc (se, expr, TRUE);\n+      break;\n+\n     case GFC_ISYM_CONJG:\n       gfc_conv_intrinsic_conjg (se, expr);\n       break;\n@@ -2777,6 +2804,10 @@ gfc_conv_intrinsic_function (gfc_se * se, gfc_expr * expr)\n       gfc_conv_intrinsic_ichar (se, expr);\n       break;\n \n+    case GFC_ISYM_IARGC:\n+      gfc_conv_intrinsic_iargc (se, expr, FALSE);\n+      break;\n+\n     case GFC_ISYM_IEOR:\n       gfc_conv_intrinsic_bitop (se, expr, BIT_XOR_EXPR);\n       break;"}, {"sha": "6119e587129bc5906681f0940531c6d93bef1f6e", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b41b25345b30416cc308c8b412a81542e2fe00f3/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b41b25345b30416cc308c8b412a81542e2fe00f3/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=b41b25345b30416cc308c8b412a81542e2fe00f3", "patch": "@@ -481,6 +481,7 @@ extern GTY(()) tree gfor_fndecl_adjustr;\n /* Other misc. runtime library functions.  */\n extern GTY(()) tree gfor_fndecl_size0;\n extern GTY(()) tree gfor_fndecl_size1;\n+extern GTY(()) tree gfor_fndecl_iargc;\n \n /* Implemented in FORTRAN.  */\n extern GTY(()) tree gfor_fndecl_si_kind;"}, {"sha": "ed0044d04e73dc2d4d6297b852b29d1b73c49ec4", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b41b25345b30416cc308c8b412a81542e2fe00f3/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b41b25345b30416cc308c8b412a81542e2fe00f3/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=b41b25345b30416cc308c8b412a81542e2fe00f3", "patch": "@@ -1,3 +1,14 @@\n+2004-07-04  Janne Blomqvist  <jblomqvi@cc.hut.fi>\n+\tPaul Brook  <paul@codesourcery.com>\n+\n+\tPR fortran/15280\n+\tPR fortran/15665\n+\t* libgfortran.h (gfc_strlen_type): Define.\n+\t* intrinsics/args.c (getarg): Rename ...\n+\t(getarg_i4): ... to this.\n+\t(getarg_i8, get_command_argument_i4, get_command_argument_i8,\n+\tget_command_i4, get_command_i8): New functions.\n+\n 2004-07-04  Matthias Klose  <doko@debian.org>\n \n \t* libtool-version: New."}, {"sha": "caa55d46d8ba9a6163f218ca972bc578b38a9c6e", "filename": "libgfortran/intrinsics/args.c", "status": "modified", "additions": 196, "deletions": 4, "changes": 200, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b41b25345b30416cc308c8b412a81542e2fe00f3/libgfortran%2Fintrinsics%2Fargs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b41b25345b30416cc308c8b412a81542e2fe00f3/libgfortran%2Fintrinsics%2Fargs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fargs.c?ref=b41b25345b30416cc308c8b412a81542e2fe00f3", "patch": "@@ -1,5 +1,7 @@\n-/* Implementation of the IARG/ARGC intrinsic(s).\n+/* Implementation of the GETARG and IARGC g77, and\n+   corresponding F2003, intrinsics. \n    Copyright (C) 2004 Free Software Foundation, Inc.\n+   Contributed by Bud Davis and Janne Blomqvist.\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n \n@@ -23,8 +25,11 @@ Boston, MA 02111-1307, USA.  */\n #include <string.h>\n #include \"libgfortran.h\"\n \n+\n+/* Get a commandline argument.  */\n+\n void \n-prefix(getarg) (GFC_INTEGER_4 *pos, char  *val, GFC_INTEGER_4 val_len)\n+prefix(getarg_i4) (GFC_INTEGER_4 *pos, char  *val, gfc_strlen_type val_len)\n {\n   int argc;\n   int arglen;\n@@ -35,7 +40,7 @@ prefix(getarg) (GFC_INTEGER_4 *pos, char  *val, GFC_INTEGER_4 val_len)\n   if (val_len < 1 || !val )\n     return;   /* something is wrong , leave immediately */\n   \n-  memset( val, ' ', val_len);\n+  memset (val, ' ', val_len);\n \n   if ((*pos) + 1 <= argc  && *pos >=0 )\n     {\n@@ -46,8 +51,23 @@ prefix(getarg) (GFC_INTEGER_4 *pos, char  *val, GFC_INTEGER_4 val_len)\n     }\n }\n \n+\n+/* INTEGER*8 wrapper of getarg.  */\n+\n+void \n+prefix(getarg_i8) (GFC_INTEGER_8 *pos, char  *val, gfc_strlen_type val_len)\n+{\n+  GFC_INTEGER_4 pos4;\n+\n+  pos4 = (GFC_INTEGER_4) *pos;\n+  prefix(getarg_i4) (&pos4, val, val_len);\n+}\n+\n+\n+/* Return the number of commandline arguments.  */\n+\n GFC_INTEGER_4\n-prefix(iargc) ()\n+prefix(iargc) (void)\n {\n   int argc;\n   char **argv;\n@@ -56,3 +76,175 @@ prefix(iargc) ()\n \n   return argc;\n } \n+\n+\n+/* F2003 intrinsic functions and subroutines related to command line\n+   arguments.\n+\n+   - function command_argument_count() is converted to iargc by the compiler.\n+\n+   - subroutine get_command([command, length, status]).\n+\n+   - subroutine get_command_argument(number, [value, length, status]).\n+*/\n+\n+/* These two status codes are specified in the standard. */\n+#define GFC_GC_SUCCESS 0\n+#define GFC_GC_VALUE_TOO_SHORT -1\n+\n+/* Processor-specific status failure code. */\n+#define GFC_GC_FAILURE 42\n+\n+\n+/* Get a single commandline argument.  */\n+\n+void\n+prefix(get_command_argument_i4) (GFC_INTEGER_4 *number, \n+\t\t\t\t char *value, \n+\t\t\t\t GFC_INTEGER_4 *length, \n+\t\t\t\t GFC_INTEGER_4 *status, \n+\t\t\t\t gfc_strlen_type value_len)\n+{\n+  int argc, arglen = 0, stat_flag = GFC_GC_SUCCESS;\n+  char **argv;\n+\n+  if (number == NULL )\n+    /* Should never happen.  */\n+    runtime_error (\"Missing argument to get_command_argument\");\n+\n+  if (value == NULL && length == NULL && status == NULL)\n+    return; /* No need to do anything.  */\n+\n+  get_args (&argc, &argv);\n+\n+  if (*number < 0 || *number >= argc)\n+    stat_flag = GFC_GC_FAILURE;\n+  else\n+    arglen = strlen(argv[*number]);    \n+\n+  if (value != NULL)\n+    {\n+      if (value_len < 1)\n+\tstat_flag = GFC_GC_FAILURE;\n+      else\n+\tmemset (value, ' ', value_len);\n+    }\n+\n+  if (value != NULL && stat_flag != GFC_GC_FAILURE)\n+    {\n+      if (arglen > value_len)\n+       {\n+\t arglen = value_len;\n+\t stat_flag = GFC_GC_VALUE_TOO_SHORT;\n+       }\n+      memcpy (value, argv[*number], arglen);\n+    }\n+\n+  if (length != NULL)\n+    *length = arglen;\n+\n+  if (status != NULL)\n+    *status = stat_flag;\n+}\n+\n+\n+/* INTEGER*8 wrapper for get_command_argument.  */\n+\n+void\n+prefix(get_command_argument_i8) (GFC_INTEGER_8 *number, \n+\t\t\t\t char *value, \n+\t\t\t\t GFC_INTEGER_8 *length, \n+\t\t\t\t GFC_INTEGER_8 *status, \n+\t\t\t\t gfc_strlen_type value_len)\n+{\n+  GFC_INTEGER_4 number4;\n+  GFC_INTEGER_4 length4;\n+  GFC_INTEGER_4 status4;\n+\n+  number4 = (GFC_INTEGER_4) *number;\n+  prefix (get_command_argument_i4) (&number4, value, &length4, &status4,\n+\t\t\t\t    value_len);\n+  if (length)\n+    *length = length4;\n+  if (status)\n+    *status = status4;\n+}\n+\n+\n+/* Return the whole commandline.  */\n+\n+void\n+prefix(get_command_i4) (char *command, \n+\t\t\tGFC_INTEGER_4 *length, \n+\t\t\tGFC_INTEGER_4 *status,\n+\t\t\tgfc_strlen_type command_len)\n+{\n+  int i, argc, arglen, thisarg;\n+  int stat_flag = GFC_GC_SUCCESS;\n+  int tot_len = 0;\n+  char **argv;\n+\n+  if (command == NULL && length == NULL && status == NULL)\n+    return; /* No need to do anything.  */\n+\n+  get_args (&argc, &argv);\n+\n+  if (command != NULL)\n+    {\n+      /* Initialize the string to blanks.  */\n+      if (command_len < 1)\n+\tstat_flag = GFC_GC_FAILURE;\n+      else\n+\tmemset (command, ' ', command_len);\n+    }\n+\n+  for (i = 0; i < argc ; i++)\n+    {\n+      arglen = strlen(argv[i]);\n+\n+      if (command != NULL && stat_flag == GFC_GC_SUCCESS)\n+\t{\n+\t  thisarg = arglen;\n+\t  if (tot_len + thisarg > command_len)\n+\t    {\n+\t      thisarg = command_len - tot_len; /* Truncate.  */\n+\t      stat_flag = GFC_GC_VALUE_TOO_SHORT;\n+\t    }\n+\t  /* Also a space before the next arg.  */\n+\t  else if (i != argc - 1 && tot_len + arglen == command_len)\n+\t    stat_flag = GFC_GC_VALUE_TOO_SHORT;\n+\n+\t  memcpy (&command[tot_len], argv[i], thisarg);\n+\t}\n+\n+      /* Add the legth of the argument.  */\n+      tot_len += arglen;\n+      if (i != argc - 1)\n+\ttot_len++;\n+    }\n+\n+  if (length != NULL)\n+    *length = tot_len;\n+\n+  if (status != NULL)\n+    *status = stat_flag;\n+}\n+\n+\n+/* INTEGER*8 wrapper for get_command.  */\n+\n+void\n+prefix(get_command_i8) (char *command, \n+\t\t\tGFC_INTEGER_8 *length, \n+\t\t\tGFC_INTEGER_8 *status,\n+\t\t\tgfc_strlen_type command_len)\n+{\n+  GFC_INTEGER_4 length4;\n+  GFC_INTEGER_4 status4;\n+\n+  prefix (get_command_i4) (command, &length4, &status4, command_len);\n+  if (length)\n+    *length = length4;\n+  if (status)\n+    *status = status4;\n+}"}, {"sha": "c0406aaffed1f299397b43e6dc83532ddeb8b723", "filename": "libgfortran/libgfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b41b25345b30416cc308c8b412a81542e2fe00f3/libgfortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b41b25345b30416cc308c8b412a81542e2fe00f3/libgfortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Flibgfortran.h?ref=b41b25345b30416cc308c8b412a81542e2fe00f3", "patch": "@@ -88,6 +88,7 @@ typedef complex float GFC_COMPLEX_4;\n typedef complex double GFC_COMPLEX_8;\n \n typedef size_t index_type;\n+typedef GFC_INTEGER_4 gfc_strlen_type;\n \n /* This will be 0 on little-endian machines and one on big-endian machines.  */\n #define l8_to_l4_offset prefix(l8_to_l4_offset)"}]}