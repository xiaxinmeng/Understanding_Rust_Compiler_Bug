{"sha": "dd9b529f08c3c6064c37234922d298336d78caf7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQ5YjUyOWYwOGMzYzYwNjRjMzcyMzQ5MjJkMjk4MzM2ZDc4Y2FmNw==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-01-28T19:32:56Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-01-28T19:33:12Z"}, "message": "i386: Prefer TARGET_AVX over TARGET_SSE_TYPELESS_STORES\n\nmovaps/movups is one byte shorter than movdqa/movdqu.  But it isn't the\ncase for AVX nor AVX512.  This patch prefers TARGET_AVX over\nTARGET_SSE_TYPELESS_STORES and adjust vmovups checks in assembly ouputs.\n\ngcc/\n\n\tPR target/91461\n\t* config/i386/i386.md (*movoi_internal_avx): Remove\n\tTARGET_SSE_TYPELESS_STORES check.\n\t(*movti_internal): Prefer TARGET_AVX over\n\tTARGET_SSE_TYPELESS_STORES.\n\t(*movtf_internal): Likewise.\n\t* config/i386/sse.md (mov<mode>_internal): Prefer TARGET_AVX over\n\tTARGET_SSE_TYPELESS_STORES.  Remove \"<MODE_SIZE> == 16\" check\n\tfrom TARGET_SSE_TYPELESS_STORES.\n\ngcc/testsuite/\n\n\tPR target/91461\n\t* gcc.target/i386/avx256-unaligned-store-2.c: Don't check\n\tvmovups.\n\t* gcc.target/i386/avx256-unaligned-store-3.c: Likewise.\n\t* gcc.target/i386/pieces-memcpy-4.c: Likewise.\n\t* gcc.target/i386/pieces-memcpy-5.c: Likewise.\n\t* gcc.target/i386/pieces-memcpy-6.c: Likewise.\n\t* gcc.target/i386/pieces-strcpy-2.c: Likewise.\n\t* gcc.target/i386/pr90980-1.c: Likewise.\n\t* gcc.target/i386/pr87317-4.c: Check \"\\tvmovd\\t\" instead of\n\t\"vmovd\" to avoid matching \"vmovdqu\".\n\t* gcc.target/i386/pr87317-5.c: Likewise.\n\t* gcc.target/i386/pr87317-7.c: Likewise.\n\t* gcc.target/i386/pr91461-1.c: New test.\n\t* gcc.target/i386/pr91461-2.c: Likewise.\n\t* gcc.target/i386/pr91461-3.c: Likewise.\n\t* gcc.target/i386/pr91461-4.c: Likewise.\n\t* gcc.target/i386/pr91461-5.c: Likewise.", "tree": {"sha": "7851f3104602455f14e3013c32a8d1a08d450a85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7851f3104602455f14e3013c32a8d1a08d450a85"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd9b529f08c3c6064c37234922d298336d78caf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd9b529f08c3c6064c37234922d298336d78caf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd9b529f08c3c6064c37234922d298336d78caf7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd9b529f08c3c6064c37234922d298336d78caf7/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c8e584430bc5dc01b4438f3c38a2a10fcba7685", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c8e584430bc5dc01b4438f3c38a2a10fcba7685", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c8e584430bc5dc01b4438f3c38a2a10fcba7685"}], "stats": {"total": 280, "additions": 253, "deletions": 27}, "files": [{"sha": "05f3b724660bd9f880fa8223e501d9bf64319f6d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd9b529f08c3c6064c37234922d298336d78caf7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd9b529f08c3c6064c37234922d298336d78caf7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dd9b529f08c3c6064c37234922d298336d78caf7", "patch": "@@ -1,3 +1,15 @@\n+2020-01-28  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/91461\n+\t* config/i386/i386.md (*movoi_internal_avx): Remove\n+\tTARGET_SSE_TYPELESS_STORES check.\n+\t(*movti_internal): Prefer TARGET_AVX over\n+\tTARGET_SSE_TYPELESS_STORES.\n+\t(*movtf_internal): Likewise.\n+\t* config/i386/sse.md (mov<mode>_internal): Prefer TARGET_AVX over\n+\tTARGET_SSE_TYPELESS_STORES.  Remove \"<MODE_SIZE> == 16\" check\n+\tfrom TARGET_SSE_TYPELESS_STORES.\n+\n 2020-01-28  David Malcolm  <dmalcolm@redhat.com>\n \n \t* diagnostic-core.h (warning_at): Rename overload to..."}, {"sha": "9f0077d59a973e8561c1f3cf5ef6255f7fb3ef37", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd9b529f08c3c6064c37234922d298336d78caf7/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd9b529f08c3c6064c37234922d298336d78caf7/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=dd9b529f08c3c6064c37234922d298336d78caf7", "patch": "@@ -1980,9 +1980,7 @@\n \t       (and (eq_attr \"alternative\" \"1\")\n \t\t    (match_test \"TARGET_AVX512VL\"))\n \t\t (const_string \"XI\")\n-\t       (ior (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n-\t\t    (and (eq_attr \"alternative\" \"3\")\n-\t\t\t (match_test \"TARGET_SSE_TYPELESS_STORES\")))\n+\t       (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n \t\t (const_string \"V8SF\")\n \t      ]\n \t      (const_string \"OI\")))])\n@@ -2059,13 +2057,13 @@\n \t       (and (eq_attr \"alternative\" \"3\")\n \t\t    (match_test \"TARGET_AVX512VL\"))\n \t\t (const_string \"XI\")\n+\t       (match_test \"TARGET_AVX\")\n+\t\t (const_string \"TI\")\n \t       (ior (not (match_test \"TARGET_SSE2\"))\n \t\t    (ior (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n \t\t\t (and (eq_attr \"alternative\" \"5\")\n \t\t\t      (match_test \"TARGET_SSE_TYPELESS_STORES\"))))\n \t\t (const_string \"V4SF\")\n-\t       (match_test \"TARGET_AVX\")\n-\t\t (const_string \"TI\")\n \t       (match_test \"optimize_function_for_size_p (cfun)\")\n \t\t (const_string \"V4SF\")\n \t       ]\n@@ -3324,13 +3322,13 @@\n    (set (attr \"mode\")\n         (cond [(eq_attr \"alternative\" \"3,4\")\n \t\t (const_string \"DI\")\n+\t       (match_test \"TARGET_AVX\")\n+\t\t (const_string \"TI\")\n \t       (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n \t\t (const_string \"V4SF\")\n \t       (and (eq_attr \"alternative\" \"2\")\n \t\t    (match_test \"TARGET_SSE_TYPELESS_STORES\"))\n \t\t (const_string \"V4SF\")\n-\t       (match_test \"TARGET_AVX\")\n-\t\t (const_string \"TI\")\n \t       (ior (not (match_test \"TARGET_SSE2\"))\n \t\t    (match_test \"optimize_function_for_size_p (cfun)\"))\n \t\t (const_string \"V4SF\")"}, {"sha": "abbd879aab35c3512b25e56087cbb5b87a50b004", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd9b529f08c3c6064c37234922d298336d78caf7/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd9b529f08c3c6064c37234922d298336d78caf7/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=dd9b529f08c3c6064c37234922d298336d78caf7", "patch": "@@ -1116,13 +1116,12 @@\n \t(cond [(and (eq_attr \"alternative\" \"1\")\n \t\t    (match_test \"TARGET_AVX512VL\"))\n \t\t (const_string \"<sseinsnmode>\")\n-\t       (and (match_test \"<MODE_SIZE> == 16\")\n-\t\t    (ior (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n-\t\t\t (and (eq_attr \"alternative\" \"3\")\n-\t\t\t      (match_test \"TARGET_SSE_TYPELESS_STORES\"))))\n-\t\t (const_string \"<ssePSmode>\")\n \t       (match_test \"TARGET_AVX\")\n \t\t (const_string \"<sseinsnmode>\")\n+\t       (ior (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n+\t\t    (and (eq_attr \"alternative\" \"3\")\n+\t\t\t (match_test \"TARGET_SSE_TYPELESS_STORES\")))\n+\t\t (const_string \"<ssePSmode>\")\n \t       (ior (not (match_test \"TARGET_SSE2\"))\n \t\t    (match_test \"optimize_function_for_size_p (cfun)\"))\n \t\t (const_string \"V4SF\")"}, {"sha": "37ab4b9ea62e8018ef089ba8ae3bd7ac040f68de", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd9b529f08c3c6064c37234922d298336d78caf7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd9b529f08c3c6064c37234922d298336d78caf7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dd9b529f08c3c6064c37234922d298336d78caf7", "patch": "@@ -1,3 +1,24 @@\n+2020-01-28  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/91461\n+\t* gcc.target/i386/avx256-unaligned-store-2.c: Don't check\n+\tvmovups.\n+\t* gcc.target/i386/avx256-unaligned-store-3.c: Likewise.\n+\t* gcc.target/i386/pieces-memcpy-4.c: Likewise.\n+\t* gcc.target/i386/pieces-memcpy-5.c: Likewise.\n+\t* gcc.target/i386/pieces-memcpy-6.c: Likewise.\n+\t* gcc.target/i386/pieces-strcpy-2.c: Likewise.\n+\t* gcc.target/i386/pr90980-1.c: Likewise.\n+\t* gcc.target/i386/pr87317-4.c: Check \"\\tvmovd\\t\" instead of\n+\t\"vmovd\" to avoid matching \"vmovdqu\".\n+\t* gcc.target/i386/pr87317-5.c: Likewise.\n+\t* gcc.target/i386/pr87317-7.c: Likewise.\n+\t* gcc.target/i386/pr91461-1.c: New test.\n+\t* gcc.target/i386/pr91461-2.c: Likewise.\n+\t* gcc.target/i386/pr91461-3.c: Likewise.\n+\t* gcc.target/i386/pr91461-4.c: Likewise.\n+\t* gcc.target/i386/pr91461-5.c: Likewise.\n+\n 2020-01-28  David Malcolm  <dmalcolm@redhat.com>\n \n \t* gcc.dg/plugin/diagnostic_plugin_test_metadata.c: Update for"}, {"sha": "be12529e8d5c5a0778113ba44a2779ceb5011385", "filename": "gcc/testsuite/gcc.target/i386/avx256-unaligned-store-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd9b529f08c3c6064c37234922d298336d78caf7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-store-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd9b529f08c3c6064c37234922d298336d78caf7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-store-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-store-2.c?ref=dd9b529f08c3c6064c37234922d298336d78caf7", "patch": "@@ -23,6 +23,6 @@ avx_test (void)\n     }\n }\n \n-/* { dg-final { scan-assembler-not \"vmovups.*movv32qi_internal/3\" } } */\n-/* { dg-final { scan-assembler \"vmovups.*movv16qi_internal/3\" } } */\n+/* { dg-final { scan-assembler-not \"vmovdqu.*movv32qi_internal/3\" } } */\n+/* { dg-final { scan-assembler \"vmovdqu.*movv16qi_internal/3\" } } */\n /* { dg-final { scan-assembler \"vextract.128\" } } */"}, {"sha": "918028df9ed8a6cc10f7eaa9c8bb64013f549695", "filename": "gcc/testsuite/gcc.target/i386/avx256-unaligned-store-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd9b529f08c3c6064c37234922d298336d78caf7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-store-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd9b529f08c3c6064c37234922d298336d78caf7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-store-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-store-3.c?ref=dd9b529f08c3c6064c37234922d298336d78caf7", "patch": "@@ -17,6 +17,6 @@ avx_test (void)\n     d[i] = c[i] * 20.0;\n }\n \n-/* { dg-final { scan-assembler-not \"vmovups.*movv4df_internal/3\" } } */\n-/* { dg-final { scan-assembler \"vmovups.*movv2df_internal/3\" } } */\n+/* { dg-final { scan-assembler-not \"vmovupd.*movv4df_internal/3\" } } */\n+/* { dg-final { scan-assembler \"vmovupd.*movv2df_internal/3\" } } */\n /* { dg-final { scan-assembler \"vextractf128\" } } */"}, {"sha": "6f20203a1466a15e014d0d38c3dd1b0900d0a074", "filename": "gcc/testsuite/gcc.target/i386/pieces-memcpy-4.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd9b529f08c3c6064c37234922d298336d78caf7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memcpy-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd9b529f08c3c6064c37234922d298336d78caf7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memcpy-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memcpy-4.c?ref=dd9b529f08c3c6064c37234922d298336d78caf7", "patch": "@@ -9,5 +9,4 @@ foo (void)\n   __builtin_memcpy (dst, src, 18);\n }\n \n-/* { dg-final { scan-assembler-times \"vmovdqu\\[ \\\\t\\]+\\[^\\n\\]*%xmm\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vmovups\\[ \\\\t\\]+\\[^\\n\\]*%xmm\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu\\[ \\\\t\\]+\\[^\\n\\]*%xmm\" 2 } } */"}, {"sha": "5a1c7b3d512ddf3d607d9ccca123aad0c7f7b023", "filename": "gcc/testsuite/gcc.target/i386/pieces-memcpy-5.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd9b529f08c3c6064c37234922d298336d78caf7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memcpy-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd9b529f08c3c6064c37234922d298336d78caf7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memcpy-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memcpy-5.c?ref=dd9b529f08c3c6064c37234922d298336d78caf7", "patch": "@@ -9,5 +9,4 @@ foo (void)\n   __builtin_memcpy (dst, src, 19);\n }\n \n-/* { dg-final { scan-assembler-times \"vmovdqu\\[ \\\\t\\]+\\[^\\n\\]*%xmm\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vmovups\\[ \\\\t\\]+\\[^\\n\\]*%xmm\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu\\[ \\\\t\\]+\\[^\\n\\]*%xmm\" 2 } } */"}, {"sha": "5f99cc98c4720c902ad4ce93bca5372bb98438b4", "filename": "gcc/testsuite/gcc.target/i386/pieces-memcpy-6.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd9b529f08c3c6064c37234922d298336d78caf7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memcpy-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd9b529f08c3c6064c37234922d298336d78caf7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memcpy-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memcpy-6.c?ref=dd9b529f08c3c6064c37234922d298336d78caf7", "patch": "@@ -9,5 +9,4 @@ foo (void)\n   __builtin_memcpy (dst, src, 33);\n }\n \n-/* { dg-final { scan-assembler-times \"vmovdqu\\[ \\\\t\\]+\\[^\\n\\]*%xmm\" 2 } } */\n-/* { dg-final { scan-assembler-times \"vmovups\\[ \\\\t\\]+\\[^\\n\\]*%xmm\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu\\[ \\\\t\\]+\\[^\\n\\]*%xmm\" 4 } } */"}, {"sha": "90446edb4f35086353359af1801fafe73a0ab74d", "filename": "gcc/testsuite/gcc.target/i386/pieces-strcpy-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd9b529f08c3c6064c37234922d298336d78caf7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-strcpy-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd9b529f08c3c6064c37234922d298336d78caf7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-strcpy-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-strcpy-2.c?ref=dd9b529f08c3c6064c37234922d298336d78caf7", "patch": "@@ -12,4 +12,4 @@ foo (char *s)\n }\n \n /* { dg-final { scan-assembler-times \"vmovdqa\\[ \\\\t\\]+\\[^\\n\\]*%xmm\" 4 } } */\n-/* { dg-final { scan-assembler-times \"vmovups\\[ \\\\t\\]+\\[^\\n\\]*%xmm\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu\\[ \\\\t\\]+\\[^\\n\\]*%xmm\" 4 } } */"}, {"sha": "d802575f4c511944f980eae6ad8d3728d0a7b594", "filename": "gcc/testsuite/gcc.target/i386/pr87317-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd9b529f08c3c6064c37234922d298336d78caf7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87317-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd9b529f08c3c6064c37234922d298336d78caf7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87317-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87317-4.c?ref=dd9b529f08c3c6064c37234922d298336d78caf7", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -march=haswell\" } */\n /* { dg-final { scan-assembler-times \"vpmovzxbd\" 1 } } */\n-/* { dg-final { scan-assembler-not \"vmovd\" } } */\n+/* { dg-final { scan-assembler-not \"\\tvmovd\\t\" } } */\n \n #include <immintrin.h>\n "}, {"sha": "42cf7dc0ffedc9c3516ae5f85b97b2932bc76167", "filename": "gcc/testsuite/gcc.target/i386/pr87317-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd9b529f08c3c6064c37234922d298336d78caf7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87317-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd9b529f08c3c6064c37234922d298336d78caf7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87317-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87317-5.c?ref=dd9b529f08c3c6064c37234922d298336d78caf7", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -march=haswell\" } */\n /* { dg-final { scan-assembler-times \"vpmovzxwq\" 1 } } */\n-/* { dg-final { scan-assembler-not \"vmovd\" } } */\n+/* { dg-final { scan-assembler-not \"\\tvmovd\\t\" } } */\n \n #include <immintrin.h>\n "}, {"sha": "c76af7efd5fbae565197f044e1ed16caeff50e26", "filename": "gcc/testsuite/gcc.target/i386/pr87317-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd9b529f08c3c6064c37234922d298336d78caf7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87317-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd9b529f08c3c6064c37234922d298336d78caf7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87317-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87317-7.c?ref=dd9b529f08c3c6064c37234922d298336d78caf7", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile { target { ! ia32 } } } */\n /* { dg-options \"-O2 -march=haswell\" } */\n /* { dg-final { scan-assembler-times \"vpmovzxbd\" 1 } } */\n-/* { dg-final { scan-assembler-not \"vmovd\" } } */\n+/* { dg-final { scan-assembler-not \"\\tvmovd\\t\" } } */\n \n #include <immintrin.h>\n "}, {"sha": "885518984c53283eda6410e4d4e1891ba6cd753d", "filename": "gcc/testsuite/gcc.target/i386/pr90980-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd9b529f08c3c6064c37234922d298336d78caf7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90980-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd9b529f08c3c6064c37234922d298336d78caf7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90980-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90980-1.c?ref=dd9b529f08c3c6064c37234922d298336d78caf7", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-march=skylake-avx512 -O2\" } */\n-/* { dg-final { scan-assembler-times \"(?:vmovups|vmovdqu)\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*\\\\)(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu\\[2346\\]*\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*\\\\)(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n \n #include <immintrin.h>\n "}, {"sha": "0c94b8e2b7638562c58463363394e649203cb736", "filename": "gcc/testsuite/gcc.target/i386/pr91461-1.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd9b529f08c3c6064c37234922d298336d78caf7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91461-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd9b529f08c3c6064c37234922d298336d78caf7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91461-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91461-1.c?ref=dd9b529f08c3c6064c37234922d298336d78caf7", "patch": "@@ -0,0 +1,66 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx\" } */\n+/* { dg-final { scan-assembler \"\\tvmovdqa\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tvmovdqu\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tvmovapd\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tvmovupd\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tvmovaps\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tvmovups\\t\" } } */\n+\n+#include <immintrin.h>\n+\n+void\n+foo1 (__m128i *p, __m128i x)\n+{\n+  *p = x;\n+}\n+\n+void\n+foo2 (__m128d *p, __m128d x)\n+{\n+  *p = x;\n+}\n+\n+void\n+foo3 (__float128 *p, __float128 x)\n+{\n+  *p = x;\n+}\n+\n+void\n+foo4 (__m128i_u *p, __m128i x)\n+{\n+  *p = x;\n+}\n+\n+void\n+foo5 (__m128d_u *p, __m128d x)\n+{\n+  *p = x;\n+}\n+\n+typedef __float128 __float128_u __attribute__ ((__aligned__ (1)));\n+\n+void\n+foo6 (__float128_u *p, __float128 x)\n+{\n+  *p = x;\n+}\n+\n+#ifdef __x86_64__\n+typedef __int128 __int128_u __attribute__ ((__aligned__ (1)));\n+\n+extern __int128 int128;\n+\n+void\n+foo7 (__int128 *p)\n+{\n+  *p = int128;\n+}\n+\n+void\n+foo8 (__int128_u *p)\n+{\n+  *p = int128;\n+}\n+#endif"}, {"sha": "921cfaf9780b41ea7207ab87e488e7ee2a5b1086", "filename": "gcc/testsuite/gcc.target/i386/pr91461-2.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd9b529f08c3c6064c37234922d298336d78caf7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91461-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd9b529f08c3c6064c37234922d298336d78caf7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91461-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91461-2.c?ref=dd9b529f08c3c6064c37234922d298336d78caf7", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx\" } */\n+/* { dg-final { scan-assembler \"\\tvmovdqa\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tvmovapd\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tvmovaps\\t\" } } */\n+\n+#include <immintrin.h>\n+\n+void\n+foo1 (__m256i *p, __m256i x)\n+{\n+  *p = x;\n+}\n+\n+void\n+foo2 (__m256d *p, __m256d x)\n+{\n+  *p = x;\n+}"}, {"sha": "c67a48063bfa3bc5ccdc79066b782a990d0ab248", "filename": "gcc/testsuite/gcc.target/i386/pr91461-3.c", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd9b529f08c3c6064c37234922d298336d78caf7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91461-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd9b529f08c3c6064c37234922d298336d78caf7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91461-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91461-3.c?ref=dd9b529f08c3c6064c37234922d298336d78caf7", "patch": "@@ -0,0 +1,76 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mavx512f -mavx512vl\" } */\n+/* { dg-final { scan-assembler-not \"\\tvmovaps\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tvmovups\\t\" } } */\n+\n+#include <immintrin.h>\n+\n+void\n+foo1 (__m128i *p, __m128i a)\n+{\n+  register __m128i x __asm (\"xmm16\") = a;\n+  asm volatile (\"\" : \"+v\" (x));\n+  *p = x;\n+}\n+\n+void\n+foo2 (__m128d *p, __m128d a)\n+{\n+  register __m128d x __asm (\"xmm16\") = a;\n+  asm volatile (\"\" : \"+v\" (x));\n+  *p = x;\n+}\n+\n+void\n+foo3 (__float128 *p, __float128 a)\n+{\n+  register __float128 x __asm (\"xmm16\") = a;\n+  asm volatile (\"\" : \"+v\" (x));\n+  *p = x;\n+}\n+\n+void\n+foo4 (__m128i_u *p, __m128i a)\n+{\n+  register __m128i x __asm (\"xmm16\") = a;\n+  asm volatile (\"\" : \"+v\" (x));\n+  *p = x;\n+}\n+\n+void\n+foo5 (__m128d_u *p, __m128d a)\n+{\n+  register __m128d x __asm (\"xmm16\") = a;\n+  asm volatile (\"\" : \"+v\" (x));\n+  *p = x;\n+}\n+\n+typedef __float128 __float128_u __attribute__ ((__aligned__ (1)));\n+\n+void\n+foo6 (__float128_u *p, __float128 a)\n+{\n+  register __float128 x __asm (\"xmm16\") = a;\n+  asm volatile (\"\" : \"+v\" (x));\n+  *p = x;\n+}\n+\n+typedef __int128 __int128_u __attribute__ ((__aligned__ (1)));\n+\n+extern __int128 int128;\n+\n+void\n+foo7 (__int128 *p)\n+{\n+  register __int128 x __asm (\"xmm16\") = int128;\n+  asm volatile (\"\" : \"+v\" (x));\n+  *p = x;\n+}\n+\n+void\n+foo8 (__int128_u *p)\n+{\n+  register __int128 x __asm (\"xmm16\") = int128;\n+  asm volatile (\"\" : \"+v\" (x));\n+  *p = x;\n+}"}, {"sha": "69df590de3a9253960dfca26c702db56d0505fd7", "filename": "gcc/testsuite/gcc.target/i386/pr91461-4.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd9b529f08c3c6064c37234922d298336d78caf7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91461-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd9b529f08c3c6064c37234922d298336d78caf7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91461-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91461-4.c?ref=dd9b529f08c3c6064c37234922d298336d78caf7", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mavx512f -mavx512vl\" } */\n+/* { dg-final { scan-assembler-not \"\\tvmovaps\\t\" } } */\n+\n+#include <immintrin.h>\n+\n+void\n+foo1 (__m256i *p, __m256i a)\n+{\n+  register __m256i x __asm (\"xmm16\") = a;\n+  asm volatile (\"\" : \"+v\" (x));\n+  *p = x;\n+}\n+\n+void\n+foo2 (__m256d *p, __m256d a)\n+{\n+  register __m256d x __asm (\"xmm16\") = a;\n+  asm volatile (\"\" : \"+v\" (x));\n+  *p = x;\n+}"}, {"sha": "974263042f37a144461e53b609d66b3e05ab56ad", "filename": "gcc/testsuite/gcc.target/i386/pr91461-5.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd9b529f08c3c6064c37234922d298336d78caf7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91461-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd9b529f08c3c6064c37234922d298336d78caf7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91461-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91461-5.c?ref=dd9b529f08c3c6064c37234922d298336d78caf7", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-final { scan-assembler-not \"\\tvmovaps\\t\" } } */\n+\n+#include <immintrin.h>\n+\n+void\n+foo1 (__m512i *p, __m512i x)\n+{\n+  *p = x;\n+}\n+\n+void\n+foo2 (__m512d *p, __m512d x)\n+{\n+  *p = x;\n+}"}]}