{"sha": "28ccbd3ff85e3208f4b6ccd990d75834267426db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjhjY2JkM2ZmODVlMzIwOGY0YjZjY2Q5OTBkNzU4MzQyNjc0MjZkYg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-25T13:33:16Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-25T13:33:16Z"}, "message": "[multiple changes]\n\n2017-04-25  Claire Dross  <dross@adacore.com>\n\n\t* exp_util.ads (Expression_Contains_Primitives_Calls_Of): New\n\tfunction used in GNATprove to know if an expression contains\n\tnon-dispatching calls on primitives of a tagged type.\n\n2017-04-25  Bob Duff  <duff@adacore.com>\n\n\t* rtsfind.adb (Initialize): Initialize\n\tFirst_Implicit_With. Building the compiler with Normalize_Scalars\n\tand validity checking finds this being used as an uninitialized\n\tvariable.\n\nFrom-SVN: r247231", "tree": {"sha": "fb07df48463fe9ea1861c42e3832511d39458842", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb07df48463fe9ea1861c42e3832511d39458842"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28ccbd3ff85e3208f4b6ccd990d75834267426db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28ccbd3ff85e3208f4b6ccd990d75834267426db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28ccbd3ff85e3208f4b6ccd990d75834267426db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28ccbd3ff85e3208f4b6ccd990d75834267426db/comments", "author": null, "committer": null, "parents": [{"sha": "f9a8f9105771efaf9188cb1c6c979cea3f677c63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9a8f9105771efaf9188cb1c6c979cea3f677c63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9a8f9105771efaf9188cb1c6c979cea3f677c63"}], "stats": {"total": 83, "additions": 81, "deletions": 2}, "files": [{"sha": "add3c602571a1f4f7e6e8d3bcec573b62ca31b95", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28ccbd3ff85e3208f4b6ccd990d75834267426db/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28ccbd3ff85e3208f4b6ccd990d75834267426db/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=28ccbd3ff85e3208f4b6ccd990d75834267426db", "patch": "@@ -1,3 +1,16 @@\n+2017-04-25  Claire Dross  <dross@adacore.com>\n+\n+\t* exp_util.ads (Expression_Contains_Primitives_Calls_Of): New\n+\tfunction used in GNATprove to know if an expression contains\n+\tnon-dispatching calls on primitives of a tagged type.\n+\n+2017-04-25  Bob Duff  <duff@adacore.com>\n+\n+\t* rtsfind.adb (Initialize): Initialize\n+\tFirst_Implicit_With. Building the compiler with Normalize_Scalars\n+\tand validity checking finds this being used as an uninitialized\n+\tvariable.\n+\n 2017-04-25  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* contracts.adb (Analyze_Entry_Or_Subprogram_Body_Contract):"}, {"sha": "414e9d77a5516f52e08394f75a3143618a5ae2d1", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28ccbd3ff85e3208f4b6ccd990d75834267426db/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28ccbd3ff85e3208f4b6ccd990d75834267426db/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=28ccbd3ff85e3208f4b6ccd990d75834267426db", "patch": "@@ -5187,6 +5187,65 @@ package body Exp_Util is\n       end if;\n    end Expand_Subtype_From_Expr;\n \n+   ---------------------------------------------\n+   -- Expression_Contains_Primitives_Calls_Of --\n+   ---------------------------------------------\n+\n+   function Expression_Contains_Primitives_Calls_Of\n+     (Expr : Node_Id;\n+      Typ  : Entity_Id) return Boolean\n+   is\n+      U_Typ : constant Entity_Id := Unique_Entity (Typ);\n+\n+      function Search_Primitive_Calls (N : Node_Id) return Traverse_Result;\n+      --  Search for non-dispatching calls to primitive functions of type Typ\n+\n+      ----------------------------\n+      -- Search_Primitive_Calls --\n+      ----------------------------\n+\n+      function Search_Primitive_Calls (N : Node_Id) return Traverse_Result is\n+      begin\n+         if Nkind (N) = N_Identifier\n+           and then Present (Entity (N))\n+           and then\n+             (Is_Formal (Entity (N)) or else Is_Subprogram (Entity (N)))\n+           and then Nkind (Parent (N)) = N_Function_Call\n+         then\n+            --  Do not consider dispatching calls\n+\n+            if Is_Subprogram (Entity (N))\n+              and then Nkind (Parent (N)) = N_Function_Call\n+              and then Present (Controlling_Argument (Parent (N)))\n+            then\n+               return OK;\n+            end if;\n+\n+            --  If N is a function call, and E is dispatching, search for the\n+            --  controlling type to see if it is Ty.\n+\n+            if Is_Subprogram (Entity (N))\n+              and then Nkind (Parent (N)) = N_Function_Call\n+              and then Is_Dispatching_Operation (Entity (N))\n+              and then Present (Find_Dispatching_Type (Entity (N)))\n+              and then\n+                Unique_Entity (Find_Dispatching_Type (Entity (N))) = U_Typ\n+            then\n+               return Abandon;\n+            end if;\n+         end if;\n+\n+         return OK;\n+      end Search_Primitive_Calls;\n+\n+      function Search_Calls is new Traverse_Func (Search_Primitive_Calls);\n+\n+   --  Start of processing for Expression_Contains_Primitives_Calls_Of_Type\n+\n+   begin\n+      return Search_Calls (Expr) = Abandon;\n+   end Expression_Contains_Primitives_Calls_Of;\n+\n    ----------------------\n    -- Finalize_Address --\n    ----------------------"}, {"sha": "532cca7369390d18344db16261d38c507c7fc861", "filename": "gcc/ada/exp_util.ads", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28ccbd3ff85e3208f4b6ccd990d75834267426db/gcc%2Fada%2Fexp_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28ccbd3ff85e3208f4b6ccd990d75834267426db/gcc%2Fada%2Fexp_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.ads?ref=28ccbd3ff85e3208f4b6ccd990d75834267426db", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -556,6 +556,12 @@ package Exp_Util is\n    --  class-wide). Set Related_Id to request an external name for the subtype\n    --  rather than an internal temporary.\n \n+   function Expression_Contains_Primitives_Calls_Of\n+     (Expr : Node_Id;\n+      Typ  : Entity_Id) return Boolean;\n+   --  Return True if the expression Expr contains a non-dispatching call to a\n+   --  function which is a primitive of the tagged type Typ.\n+\n    function Finalize_Address (Typ : Entity_Id) return Entity_Id;\n    --  Locate TSS primitive Finalize_Address in type Typ. Return Empty if the\n    --  subprogram is not available."}, {"sha": "faeffd263b1b1d68fbba8a53edf1a6abec66be10", "filename": "gcc/ada/rtsfind.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28ccbd3ff85e3208f4b6ccd990d75834267426db/gcc%2Fada%2Frtsfind.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28ccbd3ff85e3208f4b6ccd990d75834267426db/gcc%2Fada%2Frtsfind.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.adb?ref=28ccbd3ff85e3208f4b6ccd990d75834267426db", "patch": "@@ -642,6 +642,7 @@ package body Rtsfind is\n \n       for J in RTU_Id loop\n          RT_Unit_Table (J).Entity := Empty;\n+         RT_Unit_Table (J).First_Implicit_With := Empty;\n       end loop;\n \n       for J in RE_Id loop\n@@ -959,7 +960,7 @@ package body Rtsfind is\n       --  from the enumeration literal name in type RTU_Id.\n \n       U.Uname                := Get_Unit_Name (U_Id);\n-      U. First_Implicit_With := Empty;\n+      U.First_Implicit_With  := Empty;\n \n       --  Now do the load call, note that setting Error_Node to Empty is\n       --  a signal to Load_Unit that we will regard a failure to find the"}]}