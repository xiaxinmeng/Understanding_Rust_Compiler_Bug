{"sha": "52325f2ca5b70566c41f1bb929c102c014dd74e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTIzMjVmMmNhNWI3MDU2NmM0MWYxYmI5MjljMTAyYzAxNGRkNzRlMQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-09-19T17:13:18Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-09-19T17:13:18Z"}, "message": "i386.md (maxmin): New code iterator.\n\n\t* config/i386/i386.md (maxmin): New code iterator.\n\t* config/i386/sse.md (<maxmin:code><mode>3): Macroize expander\n\tfrom <umaxmin:code><mode>3 and <smaxmin:code><mode>3 using maxmin\n\tcode iterator.\n\t(*avx2_<maxmin:code><mode>3): Macroize isn from\n\t*avx2_<umaxmin:code><mode>3 and *avx2_<smaxmin:code><mode>3 using\n\tmaxmin code iterator.\n\t(<smaxmin:code><VI124_128:mode>3): Merge with <smaxmin:code>v8hi3.\n\t(<umaxmin:code><VI124_128:mode>3): Merge with umaxv4si3 and\n\t<umaxmin:code>v16qi3.\n\nFrom-SVN: r178981", "tree": {"sha": "3874f76ec174432d998ce6af00c02b3f70c125f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3874f76ec174432d998ce6af00c02b3f70c125f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52325f2ca5b70566c41f1bb929c102c014dd74e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52325f2ca5b70566c41f1bb929c102c014dd74e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52325f2ca5b70566c41f1bb929c102c014dd74e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52325f2ca5b70566c41f1bb929c102c014dd74e1/comments", "author": null, "committer": null, "parents": [{"sha": "0b5f3ce78fafdd62e9949f6dd697465cc437c23c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b5f3ce78fafdd62e9949f6dd697465cc437c23c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b5f3ce78fafdd62e9949f6dd697465cc437c23c"}], "stats": {"total": 274, "additions": 116, "deletions": 158}, "files": [{"sha": "723bb32fb24449d84500c6648e260defef847d58", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52325f2ca5b70566c41f1bb929c102c014dd74e1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52325f2ca5b70566c41f1bb929c102c014dd74e1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=52325f2ca5b70566c41f1bb929c102c014dd74e1", "patch": "@@ -1,3 +1,16 @@\n+2011-09-19  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (maxmin): New code iterator.\n+\t* config/i386/sse.md (<maxmin:code><mode>3): Macroize expander\n+\tfrom <umaxmin:code><mode>3 and <smaxmin:code><mode>3 using maxmin\n+\tcode iterator.\n+\t(*avx2_<maxmin:code><mode>3): Macroize isn from\n+\t*avx2_<umaxmin:code><mode>3 and *avx2_<smaxmin:code><mode>3 using\n+\tmaxmin code iterator.\n+\t(<smaxmin:code><VI124_128:mode>3): Merge with <smaxmin:code>v8hi3.\n+\t(<umaxmin:code><VI124_128:mode>3): Merge with umaxv4si3 and\n+\t<umaxmin:code>v16qi3.\n+\n 2011-09-19  Alan Modra  <amodra@gmail.com>\n \t    Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n@@ -36,7 +49,6 @@\n \n 2011-09-19  Paul Brook  <paul@codesourcery.com>\n \n-\tgcc/\n \t* config/arm/predicates.md (shift_amount_operand): Check constant\n \tshift count is in range.\n \t(const_shift_operand): Remove.\n@@ -114,12 +126,10 @@\n \t* config/i386/i386.c (ix86_build_const_vector): Handle V8SImode\n \tand V4DImode.\n \t(ix86_build_signbit_mask): Likewise.\n-\t(ix86_expand_int_vcond): Likewise.  Handle V16HImode and\n-\tV32QImode.\n+\t(ix86_expand_int_vcond): Likewise.  Handle V16HImode and V32QImode.\n \t(bdesc_args): Use CODE_FOR_{s,u}m{ax,in}v{32q,16h,8s}i3\n \tinstead of CODE_FOR_avx2_{s,u}m{ax,in}v{32q,16h,8s}i3.\n-\t* config/i386/sse.md (avx2_<code><mode>3 umaxmin expand): Rename\n-\tto...\n+\t* config/i386/sse.md (avx2_<code><mode>3 umaxmin expand): Rename to...\n \t(<code><mode>3) ... this.\n \t(avx2_<code><mode>3 smaxmin expand): Rename to...\n \t(<code><mode>3) ... this.\n@@ -190,8 +200,7 @@\n \n \t* Makefile.in (SYSROOT_CFLAGS_FOR_TARGET): Define from\n \t@SYSROOT_CFLAGS_FOR_TARGET@.\n-\t* configure.ac (SYSROOT_CFLAGS_FOR_TARGET): Set from\n-\tbuild-sysroot.\n+\t* configure.ac (SYSROOT_CFLAGS_FOR_TARGET): Set from build-sysroot.\n \t* configure: Regenerate.\n \t(site.exp): Add definition of TEST_ALWAYS_FLAGS.\n \tRemove setting of GCC_UNDER_TEST."}, {"sha": "0f6de89383287e8af94e43c2f3955424fc40a515", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52325f2ca5b70566c41f1bb929c102c014dd74e1/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52325f2ca5b70566c41f1bb929c102c014dd74e1/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=52325f2ca5b70566c41f1bb929c102c014dd74e1", "patch": "@@ -751,6 +751,9 @@\n (define_code_attr comm [(plus \"%\") (ss_plus \"%\") (us_plus \"%\")\n \t\t\t(minus \"\") (ss_minus \"\") (us_minus \"\")])\n \n+;; Mapping of max and min\n+(define_code_iterator maxmin [smax smin umax umin])\n+\n ;; Mapping of signed max and min\n (define_code_iterator smaxmin [smax smin])\n "}, {"sha": "5a1b597d5bd7b37f95946f3c9ee37a8621b1c124", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 97, "deletions": 151, "changes": 248, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52325f2ca5b70566c41f1bb929c102c014dd74e1/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52325f2ca5b70566c41f1bb929c102c014dd74e1/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=52325f2ca5b70566c41f1bb929c102c014dd74e1", "patch": "@@ -5831,17 +5831,18 @@\n    (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+\n (define_expand \"<code><mode>3\"\n   [(set (match_operand:VI124_256 0 \"register_operand\" \"\")\n-\t(umaxmin:VI124_256\n+\t(maxmin:VI124_256\n \t  (match_operand:VI124_256 1 \"nonimmediate_operand\" \"\")\n \t  (match_operand:VI124_256 2 \"nonimmediate_operand\" \"\")))]\n   \"TARGET_AVX2\"\n   \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n \n (define_insn \"*avx2_<code><mode>3\"\n   [(set (match_operand:VI124_256 0 \"register_operand\" \"=x\")\n-\t(umaxmin:VI124_256\n+\t(maxmin:VI124_256\n \t  (match_operand:VI124_256 1 \"nonimmediate_operand\" \"%x\")\n \t  (match_operand:VI124_256 2 \"nonimmediate_operand\" \"xm\")))]\n   \"TARGET_AVX2 && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n@@ -5852,24 +5853,74 @@\n    (set_attr \"mode\" \"OI\")])\n \n (define_expand \"<code><mode>3\"\n-  [(set (match_operand:VI124_256 0 \"register_operand\" \"\")\n-\t(smaxmin:VI124_256\n-\t  (match_operand:VI124_256 1 \"nonimmediate_operand\" \"\")\n-\t  (match_operand:VI124_256 2 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_AVX2\"\n-  \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n+  [(set (match_operand:VI8_AVX2 0 \"register_operand\" \"\")\n+\t(maxmin:VI8_AVX2 (match_operand:VI8_AVX2 1 \"register_operand\" \"\")\n+\t\t\t (match_operand:VI8_AVX2 2 \"register_operand\" \"\")))]\n+  \"TARGET_SSE4_2\"\n+{\n+  enum rtx_code code;\n+  rtx xops[6];\n+  bool ok;\n \n-(define_insn \"*avx2_<code><mode>3\"\n-  [(set (match_operand:VI124_256 0 \"register_operand\" \"=x\")\n-\t(smaxmin:VI124_256\n-\t  (match_operand:VI124_256 1 \"nonimmediate_operand\" \"%x\")\n-\t  (match_operand:VI124_256 2 \"nonimmediate_operand\" \"xm\")))]\n-  \"TARGET_AVX2 && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n-  \"vp<maxmin_int><ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"sseiadd\")\n-   (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"OI\")])\n+  xops[0] = operands[0];\n+\n+  if (<CODE> == SMAX || <CODE> == UMAX)\n+    {\n+      xops[1] = operands[1];\n+      xops[2] = operands[2];\n+    }\n+  else\n+    {\n+      xops[1] = operands[2];\n+      xops[2] = operands[1];\n+    }\n+\n+  code = (<CODE> == UMAX || <CODE> == UMIN) ? GTU : GT;\n+\n+  xops[3] = gen_rtx_fmt_ee (code, VOIDmode, operands[1], operands[2]);\n+  xops[4] = operands[1];\n+  xops[5] = operands[2];\n+\n+  ok = ix86_expand_int_vcond (xops);\n+  gcc_assert (ok);\n+  DONE;\n+})\n+\n+(define_expand \"<code><mode>3\"\n+  [(set (match_operand:VI124_128 0 \"register_operand\" \"\")\n+\t(smaxmin:VI124_128 (match_operand:VI124_128 1 \"register_operand\" \"\")\n+\t\t\t   (match_operand:VI124_128 2 \"register_operand\" \"\")))]\n+  \"TARGET_SSE2\"\n+{\n+  if (TARGET_SSE4_1 || <MODE>mode == V8HImode)\n+    ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\n+  else\n+    {\n+      rtx xops[6];\n+      bool ok;\n+\n+      xops[0] = operands[0];\n+\n+      if (<CODE> == SMAX)\n+\t{\n+\t  xops[1] = operands[1];\n+\t  xops[2] = operands[2];\n+\t}\n+      else\n+\t{\n+\t  xops[1] = operands[2];\n+\t  xops[2] = operands[1];\n+\t}\n+\n+      xops[3] = gen_rtx_GT (VOIDmode, operands[1], operands[2]);\n+      xops[4] = operands[1];\n+      xops[5] = operands[2];\n+\n+      ok = ix86_expand_int_vcond (xops);\n+      gcc_assert (ok);\n+      DONE;\n+    }\n+})\n \n (define_insn \"*sse4_1_<code><mode>3\"\n   [(set (match_operand:VI14_128 0 \"register_operand\" \"=x,x\")\n@@ -5903,58 +5954,50 @@\n    (set_attr \"mode\" \"TI\")])\n \n (define_expand \"<code><mode>3\"\n-  [(set (match_operand:VI14_128 0 \"register_operand\" \"\")\n-\t(smaxmin:VI14_128 (match_operand:VI14_128 1 \"register_operand\" \"\")\n-\t\t\t  (match_operand:VI14_128 2 \"register_operand\" \"\")))]\n+  [(set (match_operand:VI124_128 0 \"register_operand\" \"\")\n+\t(umaxmin:VI124_128 (match_operand:VI124_128 1 \"register_operand\" \"\")\n+\t\t\t   (match_operand:VI124_128 2 \"register_operand\" \"\")))]\n   \"TARGET_SSE2\"\n {\n-  if (TARGET_SSE4_1)\n+  if (TARGET_SSE4_1 || <MODE>mode == V16QImode)\n     ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\n+  else if (<CODE> == UMAX && <MODE>mode == V8HImode)\n+    {\n+      rtx op0 = operands[0], op2 = operands[2], op3 = op0;\n+      if (rtx_equal_p (op3, op2))\n+\top3 = gen_reg_rtx (V8HImode);\n+      emit_insn (gen_sse2_ussubv8hi3 (op3, operands[1], op2));\n+      emit_insn (gen_addv8hi3 (op0, op3, op2));\n+      DONE;\n+    }\n   else\n     {\n       rtx xops[6];\n       bool ok;\n \n       xops[0] = operands[0];\n-      xops[1] = operands[<CODE> == SMAX ? 1 : 2];\n-      xops[2] = operands[<CODE> == SMAX ? 2 : 1];\n-      xops[3] = gen_rtx_GT (VOIDmode, operands[1], operands[2]);\n+\n+      if (<CODE> == UMAX)\n+\t{\n+\t  xops[1] = operands[1];\n+\t  xops[2] = operands[2];\n+\t}\n+      else\n+\t{\n+\t  xops[1] = operands[2];\n+\t  xops[2] = operands[1];\n+\t}\n+\n+      xops[3] = gen_rtx_GTU (VOIDmode, operands[1], operands[2]);\n       xops[4] = operands[1];\n       xops[5] = operands[2];\n+\n       ok = ix86_expand_int_vcond (xops);\n       gcc_assert (ok);\n       DONE;\n     }\n })\n \n-(define_expand \"<code>v8hi3\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"\")\n-\t(smaxmin:V8HI\n-\t  (match_operand:V8HI 1 \"nonimmediate_operand\" \"\")\n-\t  (match_operand:V8HI 2 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_SSE2\"\n-  \"ix86_fixup_binary_operands_no_copy (<CODE>, V8HImode, operands);\")\n-\n-(define_expand \"<code><mode>3\"\n-  [(set (match_operand:VI8_AVX2 0 \"register_operand\" \"\")\n-\t(smaxmin:VI8_AVX2 (match_operand:VI8_AVX2 1 \"register_operand\" \"\")\n-\t\t\t  (match_operand:VI8_AVX2 2 \"register_operand\" \"\")))]\n-  \"TARGET_SSE4_2\"\n-{\n-  rtx xops[6];\n-  bool ok;\n-\n-  xops[0] = operands[0];\n-  xops[1] = operands[<CODE> == SMAX ? 1 : 2];\n-  xops[2] = operands[<CODE> == SMAX ? 2 : 1];\n-  xops[3] = gen_rtx_GT (VOIDmode, operands[1], operands[2]);\n-  xops[4] = operands[1];\n-  xops[5] = operands[2];\n-  ok = ix86_expand_int_vcond (xops);\n-  gcc_assert (ok);\n-  DONE;\n-})\n-\n (define_insn \"*sse4_1_<code><mode>3\"\n   [(set (match_operand:VI24_128 0 \"register_operand\" \"=x,x\")\n \t(umaxmin:VI24_128\n@@ -5986,103 +6029,6 @@\n    (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_expand \"<code>v16qi3\"\n-  [(set (match_operand:V16QI 0 \"register_operand\" \"\")\n-\t(umaxmin:V16QI\n-\t  (match_operand:V16QI 1 \"nonimmediate_operand\" \"\")\n-\t  (match_operand:V16QI 2 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_SSE2\"\n-  \"ix86_fixup_binary_operands_no_copy (<CODE>, V16QImode, operands);\")\n-\n-(define_expand \"umaxv8hi3\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"\")\n-\t(umax:V8HI (match_operand:V8HI 1 \"register_operand\" \"\")\n-\t\t   (match_operand:V8HI 2 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_SSE2\"\n-{\n-  if (TARGET_SSE4_1)\n-    ix86_fixup_binary_operands_no_copy (UMAX, V8HImode, operands);\n-  else\n-    {\n-      rtx op0 = operands[0], op2 = operands[2], op3 = op0;\n-      if (rtx_equal_p (op3, op2))\n-\top3 = gen_reg_rtx (V8HImode);\n-      emit_insn (gen_sse2_ussubv8hi3 (op3, operands[1], op2));\n-      emit_insn (gen_addv8hi3 (op0, op3, op2));\n-      DONE;\n-    }\n-})\n-\n-(define_expand \"umaxv4si3\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"\")\n-\t(umax:V4SI (match_operand:V4SI 1 \"register_operand\" \"\")\n-\t\t   (match_operand:V4SI 2 \"register_operand\" \"\")))]\n-  \"TARGET_SSE2\"\n-{\n-  if (TARGET_SSE4_1)\n-    ix86_fixup_binary_operands_no_copy (UMAX, V4SImode, operands);\n-  else\n-    {\n-      rtx xops[6];\n-      bool ok;\n-\n-      xops[0] = operands[0];\n-      xops[1] = operands[1];\n-      xops[2] = operands[2];\n-      xops[3] = gen_rtx_GTU (VOIDmode, operands[1], operands[2]);\n-      xops[4] = operands[1];\n-      xops[5] = operands[2];\n-      ok = ix86_expand_int_vcond (xops);\n-      gcc_assert (ok);\n-      DONE;\n-    }\n-})\n-\n-(define_expand \"umin<mode>3\"\n-  [(set (match_operand:VI24_128 0 \"register_operand\" \"\")\n-\t(umin:VI24_128 (match_operand:VI24_128 1 \"register_operand\" \"\")\n-\t\t       (match_operand:VI24_128 2 \"register_operand\" \"\")))]\n-  \"TARGET_SSE2\"\n-{\n-  if (TARGET_SSE4_1)\n-    ix86_fixup_binary_operands_no_copy (UMIN, <MODE>mode, operands);\n-  else\n-    {\n-      rtx xops[6];\n-      bool ok;\n-\n-      xops[0] = operands[0];\n-      xops[1] = operands[2];\n-      xops[2] = operands[1];\n-      xops[3] = gen_rtx_GTU (VOIDmode, operands[1], operands[2]);\n-      xops[4] = operands[1];\n-      xops[5] = operands[2];\n-      ok = ix86_expand_int_vcond (xops);\n-      gcc_assert (ok);\n-      DONE;\n-    }\n-})\n-\n-(define_expand \"<code><mode>3\"\n-  [(set (match_operand:VI8_AVX2 0 \"register_operand\" \"\")\n-\t(umaxmin:VI8_AVX2 (match_operand:VI8_AVX2 1 \"register_operand\" \"\")\n-\t\t\t  (match_operand:VI8_AVX2 2 \"register_operand\" \"\")))]\n-  \"TARGET_SSE4_2\"\n-{\n-  rtx xops[6];\n-  bool ok;\n-\n-  xops[0] = operands[0];\n-  xops[1] = operands[<CODE> == UMAX ? 1 : 2];\n-  xops[2] = operands[<CODE> == UMAX ? 2 : 1];\n-  xops[3] = gen_rtx_GTU (VOIDmode, operands[1], operands[2]);\n-  xops[4] = operands[1];\n-  xops[5] = operands[2];\n-  ok = ix86_expand_int_vcond (xops);\n-  gcc_assert (ok);\n-  DONE;\n-})\n-\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;;\n ;; Parallel integral comparisons"}]}