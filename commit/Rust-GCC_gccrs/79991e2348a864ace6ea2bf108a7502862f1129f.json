{"sha": "79991e2348a864ace6ea2bf108a7502862f1129f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzk5OTFlMjM0OGE4NjRhY2U2ZWEyYmYxMDhhNzUwMjg2MmYxMTI5Zg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-10-28T23:02:29Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-10-29T18:06:13Z"}, "message": "c++: Reject float <=> enum.\n\nAs [depr.arith.conv.enum] says, these are ill-formed.\n\ngcc/cp/ChangeLog:\n\n\t* typeck.c (do_warn_enum_conversions): Don't warn for SPACESHIP_EXPR.\n\t(cp_build_binary_op): Reject float <=> enum or enum <=> float.  Use\n\tCP_INTEGRAL_TYPE_P instead of INTEGRAL_OR_ENUMERATION_TYPE_P.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/enum-conv1.C: Remove unused code.\n\t* g++.dg/cpp2a/spaceship-err5.C: New test.", "tree": {"sha": "a1208522e1a5783776514985cc2371947e4be5dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1208522e1a5783776514985cc2371947e4be5dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79991e2348a864ace6ea2bf108a7502862f1129f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79991e2348a864ace6ea2bf108a7502862f1129f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79991e2348a864ace6ea2bf108a7502862f1129f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79991e2348a864ace6ea2bf108a7502862f1129f/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1344fe7b6a96966281c78e46e777b456d5c2e19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1344fe7b6a96966281c78e46e777b456d5c2e19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1344fe7b6a96966281c78e46e777b456d5c2e19"}], "stats": {"total": 39, "additions": 34, "deletions": 5}, "files": [{"sha": "d3b701610cfb79491182008f9b58ec247d9d7a70", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79991e2348a864ace6ea2bf108a7502862f1129f/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79991e2348a864ace6ea2bf108a7502862f1129f/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=79991e2348a864ace6ea2bf108a7502862f1129f", "patch": "@@ -4512,6 +4512,9 @@ do_warn_enum_conversions (location_t loc, enum tree_code code, tree type0,\n \t\t\t\"with enumeration type %qT is deprecated\",\n \t\t\ttype0, type1);\n \t  return;\n+\tcase SPACESHIP_EXPR:\n+\t  /* This is invalid, don't warn.  */\n+\t  return;\n \tdefault:\n \t  if (enum_first_p)\n \t    warning_at (loc, opt, \"arithmetic between enumeration type %qT \"\n@@ -5584,6 +5587,12 @@ cp_build_binary_op (const op_location_t &location,\n \t   arithmetic conversions are applied to the operands.\"  So we don't do\n \t   arithmetic conversions if the operands both have enumeral type.  */\n \tresult_type = NULL_TREE;\n+      else if ((orig_code0 == ENUMERAL_TYPE && orig_code1 == REAL_TYPE)\n+\t       || (orig_code0 == REAL_TYPE && orig_code1 == ENUMERAL_TYPE))\n+\t/* [depr.arith.conv.enum]: Three-way comparisons between such operands\n+\t   [where one is of enumeration type and the other is of a different\n+\t   enumeration type or a floating-point type] are ill-formed.  */\n+\tresult_type = NULL_TREE;\n \n       if (result_type)\n \t{\n@@ -5598,12 +5607,12 @@ cp_build_binary_op (const op_location_t &location,\n \t     type to a floating point type, the program is ill-formed.  */\n \t  bool ok = true;\n \t  if (TREE_CODE (result_type) == REAL_TYPE\n-\t      && INTEGRAL_OR_ENUMERATION_TYPE_P (TREE_TYPE (orig_op0)))\n+\t      && CP_INTEGRAL_TYPE_P (orig_type0))\n \t    /* OK */;\n \t  else if (!check_narrowing (result_type, orig_op0, complain))\n \t    ok = false;\n \t  if (TREE_CODE (result_type) == REAL_TYPE\n-\t      && INTEGRAL_OR_ENUMERATION_TYPE_P (TREE_TYPE (orig_op1)))\n+\t      && CP_INTEGRAL_TYPE_P (orig_type1))\n \t    /* OK */;\n \t  else if (!check_narrowing (result_type, orig_op1, complain))\n \t    ok = false;"}, {"sha": "4571b5e89688dad60e82f69f40a7322426ab6c18", "filename": "gcc/testsuite/g++.dg/cpp2a/enum-conv1.C", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79991e2348a864ace6ea2bf108a7502862f1129f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fenum-conv1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79991e2348a864ace6ea2bf108a7502862f1129f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fenum-conv1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fenum-conv1.C?ref=79991e2348a864ace6ea2bf108a7502862f1129f", "patch": "@@ -110,9 +110,6 @@ enum_float (bool b)\n   r += b ? d : u1; // { dg-warning \"conditional expression between\" \"\" { target c++20 } }\n   r += b ? u1 : d; // { dg-warning \"conditional expression between\" \"\" { target c++20 } }\n \n-  // FIXME should be error\n-  // e1 <=> d;\n-\n   d += e1; // { dg-warning \"arithmetic between floating-point type .double. and enumeration type .E1.\" \"\" { target c++20 } }\n   d = e1;\n "}, {"sha": "3dc2a0f23659701a6ff29b5338350d6e994b8ab6", "filename": "gcc/testsuite/g++.dg/cpp2a/spaceship-err5.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79991e2348a864ace6ea2bf108a7502862f1129f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-err5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79991e2348a864ace6ea2bf108a7502862f1129f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-err5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-err5.C?ref=79991e2348a864ace6ea2bf108a7502862f1129f", "patch": "@@ -0,0 +1,23 @@\n+// { dg-do compile { target c++20 } }\n+// Test [depr.arith.conv.enum] for <=>.\n+\n+#include <compare>\n+\n+enum E1 { e } e1;\n+enum E2 { f } e2;\n+static double d;\n+\n+void\n+g ()\n+{\n+  void(e1 <=> e);\n+  e1 <=> d; // { dg-error \"invalid operands of types .E1. and .double.\" }\n+  d <=> e1; // { dg-error \"invalid operands of types .double. and .E1.\" }\n+  e <=> d; // { dg-error \"invalid operands of types .E1. and .double.\" }\n+  d <=> e; // { dg-error \"invalid operands of types .double. and .E1.\" }\n+\n+  e <=> f; // { dg-error \"invalid operands of types .E1. and .E2.\" }\n+  f <=> e; // { dg-error \"invalid operands of types .E2. and .E1.\" }\n+  e1 <=> e2; // { dg-error \"invalid operands of types .E1. and .E2.\" }\n+  e2 <=> e1; // { dg-error \"invalid operands of types .E2. and .E1.\" }\n+}"}]}