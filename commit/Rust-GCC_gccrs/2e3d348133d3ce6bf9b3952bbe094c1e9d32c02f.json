{"sha": "2e3d348133d3ce6bf9b3952bbe094c1e9d32c02f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmUzZDM0ODEzM2QzY2U2YmY5YjM5NTJiYmUwOTRjMWU5ZDMyYzAyZg==", "commit": {"author": {"name": "Stephane Carrez", "email": "Stephane.Carrez@worldnet.fr", "date": "2002-03-24T16:02:57Z"}, "committer": {"name": "Stephane Carrez", "email": "ciceron@gcc.gnu.org", "date": "2002-03-24T16:02:57Z"}, "message": "m68hc11.md (\"*subsi3_zero_extendhi\"): Allow address register for operand 2.\n\n\t* config/m68hc11/m68hc11.md (\"*subsi3_zero_extendhi\"): Allow address\n\tregister for operand 2.\n\t(\"*subsi3_zero_extendqi\"): Likewise.\n\t(\"*iorhi3_gen\"): Do the operation on the upper bits and then lower\n\tbits so that it is compatible with a pop.\n\t(\"*andhi3_gen\"): Likewise.\n\t(\"xorhi3\"): Likewise.\n\nFrom-SVN: r51262", "tree": {"sha": "875e8e56c94345cde18db4c8b0e602a12faa623f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/875e8e56c94345cde18db4c8b0e602a12faa623f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e3d348133d3ce6bf9b3952bbe094c1e9d32c02f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e3d348133d3ce6bf9b3952bbe094c1e9d32c02f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e3d348133d3ce6bf9b3952bbe094c1e9d32c02f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e3d348133d3ce6bf9b3952bbe094c1e9d32c02f/comments", "author": null, "committer": null, "parents": [{"sha": "2784528c88b0abf0496214ef78347939366c3eb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2784528c88b0abf0496214ef78347939366c3eb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2784528c88b0abf0496214ef78347939366c3eb9"}], "stats": {"total": 45, "additions": 40, "deletions": 5}, "files": [{"sha": "1b07db0df058888145e4b9eeaec7918803a5b09b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e3d348133d3ce6bf9b3952bbe094c1e9d32c02f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e3d348133d3ce6bf9b3952bbe094c1e9d32c02f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2e3d348133d3ce6bf9b3952bbe094c1e9d32c02f", "patch": "@@ -1,3 +1,13 @@\n+2002-03-24  Stephane Carrez  <Stephane.Carrez@worldnet.fr>\n+\n+\t* config/m68hc11/m68hc11.md (\"*subsi3_zero_extendhi\"): Allow address\n+\tregister for operand 2.\n+\t(\"*subsi3_zero_extendqi\"): Likewise.\n+\t(\"*iorhi3_gen\"): Do the operation on the upper bits and then lower\n+\tbits so that it is compatible with a pop.\n+\t(\"*andhi3_gen\"): Likewise.\n+\t(\"xorhi3\"): Likewise.\n+\n 2002-03-24  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* cppinit.c (cpp_handle_option): Set warn_endif_labels if"}, {"sha": "6cad95162a91a948b828fd94e6ebfbd82eaf917d", "filename": "gcc/config/m68hc11/m68hc11.md", "status": "modified", "additions": 30, "deletions": 5, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e3d348133d3ce6bf9b3952bbe094c1e9d32c02f/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e3d348133d3ce6bf9b3952bbe094c1e9d32c02f/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md?ref=2e3d348133d3ce6bf9b3952bbe094c1e9d32c02f", "patch": "@@ -2509,13 +2509,31 @@\n (define_insn \"*subsi3_zero_extendhi\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=D\")\n \t(minus:SI (match_operand:SI 1 \"register_operand\" \"0\")\n-\t    (zero_extend:SI (match_operand:HI 2 \"general_operand\" \"d!mui\"))))\n+\t    (zero_extend:SI (match_operand:HI 2 \"general_operand\" \"dmui*A\"))))\n    (clobber (match_scratch:HI 3 \"=X\"))]\n   \"\"\n   \"*\n {\n   rtx ops[2];\n \n+  if (A_REG_P (operands[2]))\n+    {\n+      if (TARGET_M6812)\n+        ops[0] = gen_rtx (MEM, HImode,\n+\t\t\t  gen_rtx (PRE_DEC, HImode,\n+\t\t\t\t   gen_rtx (REG, HImode, HARD_SP_REGNUM)));\n+      else\n+        ops[0] = gen_rtx (REG, HImode, SOFT_TMP_REGNUM);\n+\n+      ops[1] = operands[2];\n+      m68hc11_gen_movhi (insn, ops);\n+      if (TARGET_M6812)\n+        operands[2] = gen_rtx (MEM, HImode,\n+\t\t\t       gen_rtx (POST_INC, HImode,\n+\t\t\t\t        gen_rtx (REG, HImode, HARD_SP_REGNUM)));\n+      else\n+        operands[2] = gen_rtx (REG, HImode, SOFT_TMP_REGNUM);\n+    }\n   ops[0] = gen_label_rtx (); \n   output_asm_insn (\\\"subd\\\\t%2\\\", operands);\n   output_asm_insn (\\\"bcc\\\\t%l0\\\", ops);\n@@ -2528,13 +2546,20 @@\n (define_insn \"*subsi3_zero_extendqi\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=D\")\n \t(minus:SI (match_operand:SI 1 \"register_operand\" \"0\")\n-\t    (zero_extend:SI (match_operand:QI 2 \"general_operand\" \"!dmui\"))))\n+\t    (zero_extend:SI (match_operand:QI 2 \"general_operand\" \"dmui*A\"))))\n    (clobber (match_scratch:HI 3 \"=X\"))]\n   \"\"\n   \"*\n {\n   rtx ops[2];\n \n+  if (A_REG_P (operands[2]))\n+    {\n+      ops[0] = gen_rtx (REG, HImode, SOFT_TMP_REGNUM);\n+      ops[1] = operands[2];\n+      m68hc11_gen_movhi (insn, ops);\n+      operands[2] = gen_rtx (REG, QImode, SOFT_TMP_REGNUM);\n+    }\n   ops[0] = gen_label_rtx (); \n   output_asm_insn (\\\"subb\\\\t%b2\\\", operands);\n   output_asm_insn (\\\"sbca\\\\t#0\\\", operands);\n@@ -3174,7 +3199,7 @@\n     return \\\"#\\\";\n \n   CC_STATUS_INIT;\n-  return \\\"andb\\\\t%b2\\\\n\\\\tanda\\\\t%h2\\\";\n+  return \\\"anda\\\\t%h2\\\\n\\\\tandb\\\\t%b2\\\";\n }\")\n \n (define_expand \"andqi3\"\n@@ -3395,7 +3420,7 @@\n     return \\\"#\\\";\n \n   CC_STATUS_INIT;\n-  return \\\"orab\\\\t%b2\\\\n\\\\toraa\\\\t%h2\\\";\n+  return \\\"oraa\\\\t%h2\\\\n\\\\torab\\\\t%b2\\\";\n }\")\n \n (define_expand \"iorqi3\"\n@@ -3548,7 +3573,7 @@\n     }\n \n   CC_STATUS_INIT;\n-  return \\\"eorb\\\\t%b2\\\\n\\\\teora\\\\t%h2\\\";\n+  return \\\"eora\\\\t%h2\\\\n\\\\teorb\\\\t%b2\\\";\n }\")\n \n (define_insn \"xorqi3\""}]}