{"sha": "b1879fb84e78fa2c530e66de43f3dc125820864a", "node_id": "C_kwDOANBUbNoAKGIxODc5ZmI4NGU3OGZhMmM1MzBlNjZkZTQzZjNkYzEyNTgyMDg2NGE", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-01-09T12:36:22Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-01-09T12:36:22Z"}, "message": "calls: Fix up TYPE_NO_NAMED_ARGS_STDARG_P handling [PR107453]\n\nOn powerpc64le-linux, the following patch fixes\n-FAIL: gcc.dg/c2x-stdarg-4.c execution test\n-FAIL: gcc.dg/torture/c2x-stdarg-split-1a.c   -O0  execution test\n-FAIL: gcc.dg/torture/c2x-stdarg-split-1a.c   -O1  execution test\n-FAIL: gcc.dg/torture/c2x-stdarg-split-1a.c   -O2  execution test\n-FAIL: gcc.dg/torture/c2x-stdarg-split-1a.c   -O2 -flto -fno-use-linker-plugin -flto-partition=none  execution test\n-FAIL: gcc.dg/torture/c2x-stdarg-split-1a.c   -O2 -flto -fuse-linker-plugin -fno-fat-lto-objects  execution test\n-FAIL: gcc.dg/torture/c2x-stdarg-split-1a.c   -O3 -g  execution test\n-FAIL: gcc.dg/torture/c2x-stdarg-split-1a.c   -Os  execution test\nThe problem is mismatch between the caller and callee side.\nOn the callee side, we do:\n  /* NAMED_ARG is a misnomer.  We really mean 'non-variadic'. */\n  if (!cfun->stdarg)\n    data->arg.named = 1;  /* No variadic parms.  */\n  else if (DECL_CHAIN (parm))\n    data->arg.named = 1;  /* Not the last non-variadic parm. */\n  else if (targetm.calls.strict_argument_naming (all->args_so_far))\n    data->arg.named = 1;  /* Only variadic ones are unnamed.  */\n  else\n    data->arg.named = 0;  /* Treat as variadic.  */\nwhich is later passed to the target hooks to determine if a particular\nargument is named or not.  Now, cfun->stdarg is determined from the stdarg_p\ncall, which for the new C2X TYPE_NO_NAMED_ARGS_STDARG_P function types\n(rettype fn (...)) returns true.  Such functions have no named arguments,\nso data->arg.named will be 0 in function.cc.  But on the caller side,\nas TYPE_NO_NAMED_ARGS_STDARG_P function types have TYPE_ARG_TYPES NULL,\nwe instead treat those calls as unprototyped even when they are prototyped\n- /* If we know nothing, treat all args as named.  */ n_named_args = num_actuals;\nin 2 spots.  We need to treat the TYPE_NO_NAMED_ARGS_STDARG_P cases as\nprototyped with no named arguments.\n\n2023-01-09  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/107453\n\t* calls.cc (expand_call): For calls with\n\tTYPE_NO_NAMED_ARGS_STDARG_P (funtype) use zero for n_named_args.\n\tFormatting fix.", "tree": {"sha": "0cb43d633226c392c91dc314e9b68152c09c74e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0cb43d633226c392c91dc314e9b68152c09c74e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1879fb84e78fa2c530e66de43f3dc125820864a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1879fb84e78fa2c530e66de43f3dc125820864a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1879fb84e78fa2c530e66de43f3dc125820864a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1879fb84e78fa2c530e66de43f3dc125820864a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5a8242153d078f1ebe60f00409415da260a29ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5a8242153d078f1ebe60f00409415da260a29ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5a8242153d078f1ebe60f00409415da260a29ee"}], "stats": {"total": 8, "additions": 6, "deletions": 2}, "files": [{"sha": "4d7f6c3d2912c9dcb150d8d219dce07d99ada0a6", "filename": "gcc/calls.cc", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1879fb84e78fa2c530e66de43f3dc125820864a/gcc%2Fcalls.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1879fb84e78fa2c530e66de43f3dc125820864a/gcc%2Fcalls.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.cc?ref=b1879fb84e78fa2c530e66de43f3dc125820864a", "patch": "@@ -2908,8 +2908,8 @@ expand_call (tree exp, rtx target, int ignore)\n     }\n \n   /* Count the arguments and set NUM_ACTUALS.  */\n-  num_actuals =\n-    call_expr_nargs (exp) + num_complex_actuals + structure_value_addr_parm;\n+  num_actuals\n+    = call_expr_nargs (exp) + num_complex_actuals + structure_value_addr_parm;\n \n   /* Compute number of named args.\n      First, do a raw count of the args for INIT_CUMULATIVE_ARGS.  */\n@@ -2919,6 +2919,8 @@ expand_call (tree exp, rtx target, int ignore)\n       = (list_length (type_arg_types)\n \t /* Count the struct value address, if it is passed as a parm.  */\n \t + structure_value_addr_parm);\n+  else if (TYPE_NO_NAMED_ARGS_STDARG_P (funtype))\n+    n_named_args = 0;\n   else\n     /* If we know nothing, treat all args as named.  */\n     n_named_args = num_actuals;\n@@ -2957,6 +2959,8 @@ expand_call (tree exp, rtx target, int ignore)\n \t   && ! targetm.calls.pretend_outgoing_varargs_named (args_so_far))\n     /* Don't include the last named arg.  */\n     --n_named_args;\n+  else if (TYPE_NO_NAMED_ARGS_STDARG_P (funtype))\n+    n_named_args = 0;\n   else\n     /* Treat all args as named.  */\n     n_named_args = num_actuals;"}]}