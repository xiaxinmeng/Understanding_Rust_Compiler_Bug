{"sha": "b1a970a5cc7730abed0f1710a8c6385f6a5fcc99", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjFhOTcwYTVjYzc3MzBhYmVkMGYxNzEwYThjNjM4NWY2YTVmY2M5OQ==", "commit": {"author": {"name": "Matthew Wahab", "email": "matthew.wahab@arm.com", "date": "2016-09-23T09:23:01Z"}, "committer": {"name": "Matthew Wahab", "email": "mwahab@gcc.gnu.org", "date": "2016-09-23T09:23:01Z"}, "message": "[PATCH 6/17][ARM] Add data processing intrinsics for float16_t.\n\ngcc/\n2016-09-23  Matthew Wahab  <matthew.wahab@arm.com>\n\n\t* config/arm/arm.c (arm_evpc_neon_vuzp): Add support for V8HF and\n\tV4HF modes.\n\t(arm_evpc_neon_vtrn): Likewise.\n\t(arm_evpc_neon_vrev): Likewise.\n\t(arm_evpc_neon_vext): Likewise.\n\t* config/arm/arm_neon.h (vbsl_f16): New.\n\t(vbslq_f16): New.\n\t(vdup_n_f16): New.\n\t(vdupq_n_f16): New.\n\t(vdup_lane_f16): New.\n\t(vdupq_lane_f16): New.\n\t(vext_f16): New.\n\t(vextq_f16): New.\n\t(vmov_n_f16): New.\n\t(vmovq_n_f16): New.\n\t(vrev64_f16): New.\n\t(vrev64q_f16): New.\n\t(vtrn_f16): New.\n\t(vtrnq_f16): New.\n\t(vuzp_f16): New.\n\t(vuzpq_f16): New.\n\t(vzip_f16): New.\n\t(vzipq_f16): New.\n\t* config/arm/arm_neon_buillins.def (vdup_n): New (v8hf, v4hf variants).\n\t(vdup_lane): New (v8hf, v4hf variants).\n\t(vext): New (v8hf, v4hf variants).\n\t(vbsl): New (v8hf, v4hf variants).\n\t* config/arm/iterators.md (VDQWH): New.\n\t(VH): New.\n\t(V_double_vector_mode): Add V8HF and V4HF.  Fix white-space.\n\t(Scalar_mul_8_16): Fix white-space.\n\t(Is_d_reg): Add V4HF and V8HF.\n\t* config/arm/neon.md (neon_vdup_lane<mode>_internal): New.\n\t(neon_vdup_lane<mode>): New.\n\t(neon_vtrn<mode>_internal): Replace VDQW with VDQWH.\n\t(*neon_vtrn<mode>_insn): Likewise.\n\t(neon_vzip<mode>_internal): Likewise. Also fix white-space.\n\t(*neon_vzip<mode>_insn): Likewise\n\t(neon_vuzp<mode>_internal): Likewise.\n\t(*neon_vuzp<mode>_insn): Likewise\n\t* config/arm/vec-common.md (vec_perm_const<mode>): New.\n\ntestsuite/\n2016-09-23  Matthew Wahab  <matthew.wahab@arm.com>\n\n\t* gcc.target/aarch64/advsimd-intrinsics/arm-neon-ref.h\n\t(FP16_SUPPORTED): New\n\t(expected-hfloat-16x4): Make conditional on __fp16 support.\n\t(expected-hfloat-16x8): Likewise.\n\t(vdup_n_f16): Disable for non-AArch64 targets.\n\t* gcc.target/aarch64/advsimd-intrinsics/vbsl.c: Add __fp16 tests,\n\tconditional on FP16_SUPPORTED.\n\t* gcc.target/aarch64/advsimd-intrinsics/vdup-vmov.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vdup_lane.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vext.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vrev.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vshuffle.inc: Add support\n\tfor testing __fp16.\n\t* gcc.target/aarch64/advsimd-intrinsics/vtrn.c: Add __fp16 tests,\n\tconditional on FP16_SUPPORTED.\n\t* gcc.target/aarch64/advsimd-intrinsics/vuzp.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vzip.c: Likewise.\n\nFrom-SVN: r240404", "tree": {"sha": "51c3c6e919f46ad68ffbcb5d19a29032c32f3f07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51c3c6e919f46ad68ffbcb5d19a29032c32f3f07"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1a970a5cc7730abed0f1710a8c6385f6a5fcc99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1a970a5cc7730abed0f1710a8c6385f6a5fcc99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1a970a5cc7730abed0f1710a8c6385f6a5fcc99", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1a970a5cc7730abed0f1710a8c6385f6a5fcc99/comments", "author": null, "committer": null, "parents": [{"sha": "50df9464b86a58d5c959b10c33c1870c0c4c5e48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50df9464b86a58d5c959b10c33c1870c0c4c5e48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50df9464b86a58d5c959b10c33c1870c0c4c5e48"}], "stats": {"total": 699, "additions": 650, "deletions": 49}, "files": [{"sha": "1ffee95a749de051d944fd83cd4bfaacf759771d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a970a5cc7730abed0f1710a8c6385f6a5fcc99/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a970a5cc7730abed0f1710a8c6385f6a5fcc99/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b1a970a5cc7730abed0f1710a8c6385f6a5fcc99", "patch": "@@ -1,3 +1,47 @@\n+2016-09-23  Matthew Wahab  <matthew.wahab@arm.com>\n+\n+\t* config/arm/arm.c (arm_evpc_neon_vuzp): Add support for V8HF and\n+\tV4HF modes.\n+\t(arm_evpc_neon_vtrn): Likewise.\n+\t(arm_evpc_neon_vrev): Likewise.\n+\t(arm_evpc_neon_vext): Likewise.\n+\t* config/arm/arm_neon.h (vbsl_f16): New.\n+\t(vbslq_f16): New.\n+\t(vdup_n_f16): New.\n+\t(vdupq_n_f16): New.\n+\t(vdup_lane_f16): New.\n+\t(vdupq_lane_f16): New.\n+\t(vext_f16): New.\n+\t(vextq_f16): New.\n+\t(vmov_n_f16): New.\n+\t(vmovq_n_f16): New.\n+\t(vrev64_f16): New.\n+\t(vrev64q_f16): New.\n+\t(vtrn_f16): New.\n+\t(vtrnq_f16): New.\n+\t(vuzp_f16): New.\n+\t(vuzpq_f16): New.\n+\t(vzip_f16): New.\n+\t(vzipq_f16): New.\n+\t* config/arm/arm_neon_buillins.def (vdup_n): New (v8hf, v4hf variants).\n+\t(vdup_lane): New (v8hf, v4hf variants).\n+\t(vext): New (v8hf, v4hf variants).\n+\t(vbsl): New (v8hf, v4hf variants).\n+\t* config/arm/iterators.md (VDQWH): New.\n+\t(VH): New.\n+\t(V_double_vector_mode): Add V8HF and V4HF.  Fix white-space.\n+\t(Scalar_mul_8_16): Fix white-space.\n+\t(Is_d_reg): Add V4HF and V8HF.\n+\t* config/arm/neon.md (neon_vdup_lane<mode>_internal): New.\n+\t(neon_vdup_lane<mode>): New.\n+\t(neon_vtrn<mode>_internal): Replace VDQW with VDQWH.\n+\t(*neon_vtrn<mode>_insn): Likewise.\n+\t(neon_vzip<mode>_internal): Likewise. Also fix white-space.\n+\t(*neon_vzip<mode>_insn): Likewise\n+\t(neon_vuzp<mode>_internal): Likewise.\n+\t(*neon_vuzp<mode>_insn): Likewise\n+\t* config/arm/vec-common.md (vec_perm_const<mode>): New.\n+\n 2016-09-23  Jiong Wang  <jiong.wang@arm.com>\n \t    Matthew Wahab  <matthew.wahab@arm.com>\n "}, {"sha": "e6b59d54157df27a516106c57baa83ff91f634b3", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a970a5cc7730abed0f1710a8c6385f6a5fcc99/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a970a5cc7730abed0f1710a8c6385f6a5fcc99/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=b1a970a5cc7730abed0f1710a8c6385f6a5fcc99", "patch": "@@ -28576,6 +28576,8 @@ arm_evpc_neon_vuzp (struct expand_vec_perm_d *d)\n     case V8QImode:  gen = gen_neon_vuzpv8qi_internal;  break;\n     case V8HImode:  gen = gen_neon_vuzpv8hi_internal;  break;\n     case V4HImode:  gen = gen_neon_vuzpv4hi_internal;  break;\n+    case V8HFmode:  gen = gen_neon_vuzpv8hf_internal;  break;\n+    case V4HFmode:  gen = gen_neon_vuzpv4hf_internal;  break;\n     case V4SImode:  gen = gen_neon_vuzpv4si_internal;  break;\n     case V2SImode:  gen = gen_neon_vuzpv2si_internal;  break;\n     case V2SFmode:  gen = gen_neon_vuzpv2sf_internal;  break;\n@@ -28649,6 +28651,8 @@ arm_evpc_neon_vzip (struct expand_vec_perm_d *d)\n     case V8QImode:  gen = gen_neon_vzipv8qi_internal;  break;\n     case V8HImode:  gen = gen_neon_vzipv8hi_internal;  break;\n     case V4HImode:  gen = gen_neon_vzipv4hi_internal;  break;\n+    case V8HFmode:  gen = gen_neon_vzipv8hf_internal;  break;\n+    case V4HFmode:  gen = gen_neon_vzipv4hf_internal;  break;\n     case V4SImode:  gen = gen_neon_vzipv4si_internal;  break;\n     case V2SImode:  gen = gen_neon_vzipv2si_internal;  break;\n     case V2SFmode:  gen = gen_neon_vzipv2sf_internal;  break;\n@@ -28701,6 +28705,8 @@ arm_evpc_neon_vrev (struct expand_vec_perm_d *d)\n \tcase V8QImode:  gen = gen_neon_vrev32v8qi;  break;\n \tcase V8HImode:  gen = gen_neon_vrev64v8hi;  break;\n \tcase V4HImode:  gen = gen_neon_vrev64v4hi;  break;\n+\tcase V8HFmode:  gen = gen_neon_vrev64v8hf;  break;\n+\tcase V4HFmode:  gen = gen_neon_vrev64v4hf;  break;\n \tdefault:\n \t  return false;\n \t}\n@@ -28784,6 +28790,8 @@ arm_evpc_neon_vtrn (struct expand_vec_perm_d *d)\n     case V8QImode:  gen = gen_neon_vtrnv8qi_internal;  break;\n     case V8HImode:  gen = gen_neon_vtrnv8hi_internal;  break;\n     case V4HImode:  gen = gen_neon_vtrnv4hi_internal;  break;\n+    case V8HFmode:  gen = gen_neon_vtrnv8hf_internal;  break;\n+    case V4HFmode:  gen = gen_neon_vtrnv4hf_internal;  break;\n     case V4SImode:  gen = gen_neon_vtrnv4si_internal;  break;\n     case V2SImode:  gen = gen_neon_vtrnv2si_internal;  break;\n     case V2SFmode:  gen = gen_neon_vtrnv2sf_internal;  break;\n@@ -28859,6 +28867,8 @@ arm_evpc_neon_vext (struct expand_vec_perm_d *d)\n     case V8HImode: gen = gen_neon_vextv8hi; break;\n     case V2SImode: gen = gen_neon_vextv2si; break;\n     case V4SImode: gen = gen_neon_vextv4si; break;\n+    case V4HFmode: gen = gen_neon_vextv4hf; break;\n+    case V8HFmode: gen = gen_neon_vextv8hf; break;\n     case V2SFmode: gen = gen_neon_vextv2sf; break;\n     case V4SFmode: gen = gen_neon_vextv4sf; break;\n     case V2DImode: gen = gen_neon_vextv2di; break;"}, {"sha": "3bd951703baa8c9e215c4c8ba3ff536acacdfec2", "filename": "gcc/config/arm/arm_neon.h", "status": "modified", "additions": 175, "deletions": 0, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a970a5cc7730abed0f1710a8c6385f6a5fcc99/gcc%2Fconfig%2Farm%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a970a5cc7730abed0f1710a8c6385f6a5fcc99/gcc%2Fconfig%2Farm%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_neon.h?ref=b1a970a5cc7730abed0f1710a8c6385f6a5fcc99", "patch": "@@ -14842,6 +14842,181 @@ vmull_high_p64 (poly64x2_t __a, poly64x2_t __b)\n \n #pragma GCC pop_options\n \n+  /* Half-precision data processing intrinsics.  */\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+\n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vbsl_f16 (uint16x4_t __a, float16x4_t __b, float16x4_t __c)\n+{\n+  return __builtin_neon_vbslv4hf ((int16x4_t)__a, __b, __c);\n+}\n+\n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vbslq_f16 (uint16x8_t __a, float16x8_t __b, float16x8_t __c)\n+{\n+  return __builtin_neon_vbslv8hf ((int16x8_t)__a, __b, __c);\n+}\n+\n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vdup_n_f16 (float16_t __a)\n+{\n+  return __builtin_neon_vdup_nv4hf (__a);\n+}\n+\n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vdupq_n_f16 (float16_t __a)\n+{\n+  return __builtin_neon_vdup_nv8hf (__a);\n+}\n+\n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vdup_lane_f16 (float16x4_t __a, const int __b)\n+{\n+  return __builtin_neon_vdup_lanev4hf (__a, __b);\n+}\n+\n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vdupq_lane_f16 (float16x4_t __a, const int __b)\n+{\n+  return __builtin_neon_vdup_lanev8hf (__a, __b);\n+}\n+\n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vext_f16 (float16x4_t __a, float16x4_t __b, const int __c)\n+{\n+  return __builtin_neon_vextv4hf (__a, __b, __c);\n+}\n+\n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vextq_f16 (float16x8_t __a, float16x8_t __b, const int __c)\n+{\n+  return __builtin_neon_vextv8hf (__a, __b, __c);\n+}\n+\n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vmov_n_f16 (float16_t __a)\n+{\n+  return __builtin_neon_vdup_nv4hf (__a);\n+}\n+\n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vmovq_n_f16 (float16_t __a)\n+{\n+  return __builtin_neon_vdup_nv8hf (__a);\n+}\n+\n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vrev64_f16 (float16x4_t __a)\n+{\n+  return (float16x4_t)__builtin_shuffle (__a, (uint16x4_t){ 3, 2, 1, 0 });\n+}\n+\n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vrev64q_f16 (float16x8_t __a)\n+{\n+  return\n+    (float16x8_t)__builtin_shuffle (__a,\n+\t\t\t\t    (uint16x8_t){ 3, 2, 1, 0, 7, 6, 5, 4 });\n+}\n+\n+__extension__ static __inline float16x4x2_t __attribute__ ((__always_inline__))\n+vtrn_f16 (float16x4_t __a, float16x4_t __b)\n+{\n+  float16x4x2_t __rv;\n+#ifdef __ARM_BIG_ENDIAN\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint16x4_t){ 5, 1, 7, 3 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint16x4_t){ 4, 0, 6, 2 });\n+#else\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint16x4_t){ 0, 4, 2, 6 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint16x4_t){ 1, 5, 3, 7 });\n+#endif\n+  return __rv;\n+}\n+\n+__extension__ static __inline float16x8x2_t __attribute__ ((__always_inline__))\n+vtrnq_f16 (float16x8_t __a, float16x8_t __b)\n+{\n+  float16x8x2_t __rv;\n+#ifdef __ARM_BIG_ENDIAN\n+  __rv.val[0] = __builtin_shuffle (__a, __b,\n+\t\t\t\t   (uint16x8_t){ 9, 1, 11, 3, 13, 5, 15, 7 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b,\n+\t\t\t\t   (uint16x8_t){ 8, 0, 10, 2, 12, 4, 14, 6 });\n+#else\n+  __rv.val[0] = __builtin_shuffle (__a, __b,\n+\t\t\t\t   (uint16x8_t){ 0, 8, 2, 10, 4, 12, 6, 14 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b,\n+\t\t\t\t   (uint16x8_t){ 1, 9, 3, 11, 5, 13, 7, 15 });\n+#endif\n+  return __rv;\n+}\n+\n+__extension__ static __inline float16x4x2_t __attribute__ ((__always_inline__))\n+vuzp_f16 (float16x4_t __a, float16x4_t __b)\n+{\n+  float16x4x2_t __rv;\n+#ifdef __ARM_BIG_ENDIAN\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint16x4_t){ 5, 7, 1, 3 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint16x4_t){ 4, 6, 0, 2 });\n+#else\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint16x4_t){ 0, 2, 4, 6 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint16x4_t){ 1, 3, 5, 7 });\n+#endif\n+  return __rv;\n+}\n+\n+__extension__ static __inline float16x8x2_t __attribute__ ((__always_inline__))\n+vuzpq_f16 (float16x8_t __a, float16x8_t __b)\n+{\n+  float16x8x2_t __rv;\n+#ifdef __ARM_BIG_ENDIAN\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint16x8_t)\n+\t\t\t\t   { 5, 7, 1, 3, 13, 15, 9, 11 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint16x8_t)\n+\t\t\t\t   { 4, 6, 0, 2, 12, 14, 8, 10 });\n+#else\n+  __rv.val[0] = __builtin_shuffle (__a, __b,\n+\t\t\t\t   (uint16x8_t){ 0, 2, 4, 6, 8, 10, 12, 14 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b,\n+\t\t\t\t   (uint16x8_t){ 1, 3, 5, 7, 9, 11, 13, 15 });\n+#endif\n+  return __rv;\n+}\n+\n+__extension__ static __inline float16x4x2_t __attribute__ ((__always_inline__))\n+vzip_f16 (float16x4_t __a, float16x4_t __b)\n+{\n+  float16x4x2_t __rv;\n+#ifdef __ARM_BIG_ENDIAN\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint16x4_t){ 6, 2, 7, 3 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint16x4_t){ 4, 0, 5, 1 });\n+#else\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint16x4_t){ 0, 4, 1, 5 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint16x4_t){ 2, 6, 3, 7 });\n+#endif\n+  return __rv;\n+}\n+\n+__extension__ static __inline float16x8x2_t __attribute__ ((__always_inline__))\n+vzipq_f16 (float16x8_t __a, float16x8_t __b)\n+{\n+  float16x8x2_t __rv;\n+#ifdef __ARM_BIG_ENDIAN\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint16x8_t)\n+\t\t\t\t   { 10, 2, 11, 3, 8, 0, 9, 1 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint16x8_t)\n+\t\t\t\t   { 14, 6, 15, 7, 12, 4, 13, 5 });\n+#else\n+  __rv.val[0] = __builtin_shuffle (__a, __b,\n+\t\t\t\t   (uint16x8_t){ 0, 8, 1, 9, 2, 10, 3, 11 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b,\n+\t\t\t\t   (uint16x8_t){ 4, 12, 5, 13, 6, 14, 7, 15 });\n+#endif\n+  return __rv;\n+}\n+\n+#endif\n+\n #ifdef __cplusplus\n }\n #endif"}, {"sha": "a4ba516209c04b3bc9c3fd7b76726feb75cb1c67", "filename": "gcc/config/arm/arm_neon_builtins.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a970a5cc7730abed0f1710a8c6385f6a5fcc99/gcc%2Fconfig%2Farm%2Farm_neon_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a970a5cc7730abed0f1710a8c6385f6a5fcc99/gcc%2Fconfig%2Farm%2Farm_neon_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_neon_builtins.def?ref=b1a970a5cc7730abed0f1710a8c6385f6a5fcc99", "patch": "@@ -166,8 +166,10 @@ VAR10 (SETLANE, vset_lane,\n VAR5 (UNOP, vcreate, v8qi, v4hi, v2si, v2sf, di)\n VAR10 (UNOP, vdup_n,\n \t v8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf, v2di)\n+VAR2 (UNOP, vdup_n, v8hf, v4hf)\n VAR10 (GETLANE, vdup_lane,\n \t v8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf, v2di)\n+VAR2 (GETLANE, vdup_lane, v8hf, v4hf)\n VAR6 (COMBINE, vcombine, v8qi, v4hi, v4hf, v2si, v2sf, di)\n VAR6 (UNOP, vget_high, v16qi, v8hi, v8hf, v4si, v4sf, v2di)\n VAR6 (UNOP, vget_low, v16qi, v8hi, v8hf, v4si, v4sf, v2di)\n@@ -197,6 +199,7 @@ VAR2 (MAC_N, vmlslu_n, v4hi, v2si)\n VAR2 (MAC_N, vqdmlsl_n, v4hi, v2si)\n VAR10 (SETLANE, vext,\n \t v8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf, v2di)\n+VAR2 (SETLANE, vext, v8hf, v4hf)\n VAR8 (UNOP, vrev64, v8qi, v4hi, v2si, v2sf, v16qi, v8hi, v4si, v4sf)\n VAR4 (UNOP, vrev32, v8qi, v4hi, v16qi, v8hi)\n VAR2 (UNOP, vrev16, v8qi, v16qi)\n@@ -208,6 +211,7 @@ VAR1 (UNOP, vcvtv4sf, v4hf)\n VAR1 (UNOP, vcvtv4hf, v4sf)\n VAR10 (TERNOP, vbsl,\n \t v8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf, v2di)\n+VAR2 (TERNOP, vbsl, v8hf, v4hf)\n VAR2 (UNOP, copysignf, v2sf, v4sf)\n VAR2 (UNOP, vrintn, v2sf, v4sf)\n VAR2 (UNOP, vrinta, v2sf, v4sf)"}, {"sha": "3f9d9e43e3cbd7f0ebb93939d6fb328fc3c38763", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a970a5cc7730abed0f1710a8c6385f6a5fcc99/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a970a5cc7730abed0f1710a8c6385f6a5fcc99/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=b1a970a5cc7730abed0f1710a8c6385f6a5fcc99", "patch": "@@ -119,6 +119,10 @@\n ;; All supported vector modes (except those with 64-bit integer elements).\n (define_mode_iterator VDQW [V8QI V16QI V4HI V8HI V2SI V4SI V2SF V4SF])\n \n+;; All supported vector modes including 16-bit float modes.\n+(define_mode_iterator VDQWH [V8QI V16QI V4HI V8HI V2SI V4SI V2SF V4SF\n+\t\t\t     V8HF V4HF])\n+\n ;; Supported integer vector modes (not 64 bit elements).\n (define_mode_iterator VDQIW [V8QI V16QI V4HI V8HI V2SI V4SI])\n \n@@ -174,6 +178,9 @@\n ;; Modes with 8-bit, 16-bit and 32-bit elements.\n (define_mode_iterator VU [V16QI V8HI V4SI])\n \n+;; Vector modes for 16-bit floating-point support.\n+(define_mode_iterator VH [V8HF V4HF])\n+\n ;; Iterators used for fixed-point support.\n (define_mode_iterator FIXED [QQ HQ SQ UQQ UHQ USQ HA SA UHA USA])\n \n@@ -475,9 +482,10 @@\n ;; Used for neon_vdup_lane, where the second operand is double-sized\n ;; even when the first one is quad.\n (define_mode_attr V_double_vector_mode [(V16QI \"V8QI\") (V8HI \"V4HI\")\n-                                        (V4SI \"V2SI\") (V4SF \"V2SF\")\n-                                        (V8QI \"V8QI\") (V4HI \"V4HI\")\n-                                        (V2SI \"V2SI\") (V2SF \"V2SF\")])\n+\t\t\t\t\t(V4SI \"V2SI\") (V4SF \"V2SF\")\n+\t\t\t\t\t(V8QI \"V8QI\") (V4HI \"V4HI\")\n+\t\t\t\t\t(V2SI \"V2SI\") (V2SF \"V2SF\")\n+\t\t\t\t\t(V8HF \"V4HF\") (V4HF \"V4HF\")])\n \n ;; Mode of result of comparison operations (and bit-select operand 1).\n (define_mode_attr V_cmp_result [(V8QI \"V8QI\") (V16QI \"V16QI\")\n@@ -582,17 +590,17 @@\n                  (DI \"false\") (V2DI \"false\")])\n \n (define_mode_attr Scalar_mul_8_16 [(V8QI \"true\") (V16QI \"true\")\n-                   (V4HI \"true\") (V8HI \"true\")\n-                   (V2SI \"false\") (V4SI \"false\")\n-                   (V2SF \"false\") (V4SF \"false\")\n-                   (DI \"false\") (V2DI \"false\")])\n-\n+\t\t\t\t   (V4HI \"true\") (V8HI \"true\")\n+\t\t\t\t   (V2SI \"false\") (V4SI \"false\")\n+\t\t\t\t   (V2SF \"false\") (V4SF \"false\")\n+\t\t\t\t   (DI \"false\") (V2DI \"false\")])\n \n (define_mode_attr Is_d_reg [(V8QI \"true\") (V16QI \"false\")\n                             (V4HI \"true\") (V8HI  \"false\")\n                             (V2SI \"true\") (V4SI  \"false\")\n                             (V2SF \"true\") (V4SF  \"false\")\n-                            (DI   \"true\") (V2DI  \"false\")])\n+                            (DI   \"true\") (V2DI  \"false\")\n+\t\t\t    (V4HF \"true\") (V8HF  \"false\")])\n \n (define_mode_attr V_mode_nunits [(V8QI \"8\") (V16QI \"16\")\n \t\t\t\t (V4HF \"4\") (V8HF \"8\")"}, {"sha": "c7bb121368736ce4e2956865eed2638fa35538f6", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 78, "deletions": 37, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a970a5cc7730abed0f1710a8c6385f6a5fcc99/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a970a5cc7730abed0f1710a8c6385f6a5fcc99/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=b1a970a5cc7730abed0f1710a8c6385f6a5fcc99", "patch": "@@ -3045,6 +3045,28 @@ if (BYTES_BIG_ENDIAN)\n   [(set_attr \"type\" \"neon_dup<q>\")]\n )\n \n+(define_insn \"neon_vdup_lane<mode>_internal\"\n+ [(set (match_operand:VH 0 \"s_register_operand\" \"=w\")\n+   (vec_duplicate:VH\n+    (vec_select:<V_elem>\n+     (match_operand:<V_double_vector_mode> 1 \"s_register_operand\" \"w\")\n+     (parallel [(match_operand:SI 2 \"immediate_operand\" \"i\")]))))]\n+ \"TARGET_NEON && TARGET_FP16\"\n+{\n+  if (BYTES_BIG_ENDIAN)\n+    {\n+      int elt = INTVAL (operands[2]);\n+      elt = GET_MODE_NUNITS (<V_double_vector_mode>mode) - 1 - elt;\n+      operands[2] = GEN_INT (elt);\n+    }\n+  if (<Is_d_reg>)\n+    return \"vdup.<V_sz_elem>\\t%P0, %P1[%c2]\";\n+  else\n+    return \"vdup.<V_sz_elem>\\t%q0, %P1[%c2]\";\n+}\n+  [(set_attr \"type\" \"neon_dup<q>\")]\n+)\n+\n (define_expand \"neon_vdup_lane<mode>\"\n   [(match_operand:VDQW 0 \"s_register_operand\" \"=w\")\n    (match_operand:<V_double_vector_mode> 1 \"s_register_operand\" \"w\")\n@@ -3064,6 +3086,25 @@ if (BYTES_BIG_ENDIAN)\n     DONE;\n })\n \n+(define_expand \"neon_vdup_lane<mode>\"\n+  [(match_operand:VH 0 \"s_register_operand\")\n+   (match_operand:<V_double_vector_mode> 1 \"s_register_operand\")\n+   (match_operand:SI 2 \"immediate_operand\")]\n+  \"TARGET_NEON && TARGET_FP16\"\n+{\n+  if (BYTES_BIG_ENDIAN)\n+    {\n+      unsigned int elt = INTVAL (operands[2]);\n+      unsigned int reg_nelts\n+\t= 64 / GET_MODE_UNIT_BITSIZE (<V_double_vector_mode>mode);\n+      elt ^= reg_nelts - 1;\n+      operands[2] = GEN_INT (elt);\n+    }\n+  emit_insn (gen_neon_vdup_lane<mode>_internal (operands[0], operands[1],\n+\t\t\t\t\t\toperands[2]));\n+  DONE;\n+})\n+\n ; Scalar index is ignored, since only zero is valid here.\n (define_expand \"neon_vdup_lanedi\"\n   [(match_operand:DI 0 \"s_register_operand\" \"=w\")\n@@ -4281,77 +4322,77 @@ if (BYTES_BIG_ENDIAN)\n \n (define_expand \"neon_vtrn<mode>_internal\"\n   [(parallel\n-    [(set (match_operand:VDQW 0 \"s_register_operand\" \"\")\n-\t  (unspec:VDQW [(match_operand:VDQW 1 \"s_register_operand\" \"\")\n-\t\t\t(match_operand:VDQW 2 \"s_register_operand\" \"\")]\n+    [(set (match_operand:VDQWH 0 \"s_register_operand\")\n+\t  (unspec:VDQWH [(match_operand:VDQWH 1 \"s_register_operand\")\n+\t\t\t (match_operand:VDQWH 2 \"s_register_operand\")]\n \t   UNSPEC_VTRN1))\n-     (set (match_operand:VDQW 3 \"s_register_operand\" \"\")\n-          (unspec:VDQW [(match_dup 1) (match_dup 2)] UNSPEC_VTRN2))])]\n+     (set (match_operand:VDQWH 3 \"s_register_operand\")\n+\t  (unspec:VDQWH [(match_dup 1) (match_dup 2)] UNSPEC_VTRN2))])]\n   \"TARGET_NEON\"\n   \"\"\n )\n \n ;; Note: Different operand numbering to handle tied registers correctly.\n (define_insn \"*neon_vtrn<mode>_insn\"\n-  [(set (match_operand:VDQW 0 \"s_register_operand\" \"=&w\")\n-        (unspec:VDQW [(match_operand:VDQW 1 \"s_register_operand\" \"0\")\n-                      (match_operand:VDQW 3 \"s_register_operand\" \"2\")]\n-                     UNSPEC_VTRN1))\n-   (set (match_operand:VDQW 2 \"s_register_operand\" \"=&w\")\n-         (unspec:VDQW [(match_dup 1) (match_dup 3)]\n-                     UNSPEC_VTRN2))]\n+  [(set (match_operand:VDQWH 0 \"s_register_operand\" \"=&w\")\n+\t(unspec:VDQWH [(match_operand:VDQWH 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:VDQWH 3 \"s_register_operand\" \"2\")]\n+\t UNSPEC_VTRN1))\n+   (set (match_operand:VDQWH 2 \"s_register_operand\" \"=&w\")\n+\t(unspec:VDQWH [(match_dup 1) (match_dup 3)]\n+\t UNSPEC_VTRN2))]\n   \"TARGET_NEON\"\n   \"vtrn.<V_sz_elem>\\t%<V_reg>0, %<V_reg>2\"\n   [(set_attr \"type\" \"neon_permute<q>\")]\n )\n \n (define_expand \"neon_vzip<mode>_internal\"\n   [(parallel\n-    [(set (match_operand:VDQW 0 \"s_register_operand\" \"\")\n-\t  (unspec:VDQW [(match_operand:VDQW 1 \"s_register_operand\" \"\")\n-\t  \t        (match_operand:VDQW 2 \"s_register_operand\" \"\")]\n-\t\t       UNSPEC_VZIP1))\n-    (set (match_operand:VDQW 3 \"s_register_operand\" \"\")\n-\t (unspec:VDQW [(match_dup 1) (match_dup 2)] UNSPEC_VZIP2))])]\n+    [(set (match_operand:VDQWH 0 \"s_register_operand\")\n+\t  (unspec:VDQWH [(match_operand:VDQWH 1 \"s_register_operand\")\n+\t\t\t (match_operand:VDQWH 2 \"s_register_operand\")]\n+\t   UNSPEC_VZIP1))\n+    (set (match_operand:VDQWH 3 \"s_register_operand\")\n+\t (unspec:VDQWH [(match_dup 1) (match_dup 2)] UNSPEC_VZIP2))])]\n   \"TARGET_NEON\"\n   \"\"\n )\n \n ;; Note: Different operand numbering to handle tied registers correctly.\n (define_insn \"*neon_vzip<mode>_insn\"\n-  [(set (match_operand:VDQW 0 \"s_register_operand\" \"=&w\")\n-        (unspec:VDQW [(match_operand:VDQW 1 \"s_register_operand\" \"0\")\n-                      (match_operand:VDQW 3 \"s_register_operand\" \"2\")]\n-                     UNSPEC_VZIP1))\n-   (set (match_operand:VDQW 2 \"s_register_operand\" \"=&w\")\n-        (unspec:VDQW [(match_dup 1) (match_dup 3)]\n-                     UNSPEC_VZIP2))]\n+  [(set (match_operand:VDQWH 0 \"s_register_operand\" \"=&w\")\n+\t(unspec:VDQWH [(match_operand:VDQWH 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:VDQWH 3 \"s_register_operand\" \"2\")]\n+\t UNSPEC_VZIP1))\n+   (set (match_operand:VDQWH 2 \"s_register_operand\" \"=&w\")\n+\t(unspec:VDQWH [(match_dup 1) (match_dup 3)]\n+\t UNSPEC_VZIP2))]\n   \"TARGET_NEON\"\n   \"vzip.<V_sz_elem>\\t%<V_reg>0, %<V_reg>2\"\n   [(set_attr \"type\" \"neon_zip<q>\")]\n )\n \n (define_expand \"neon_vuzp<mode>_internal\"\n   [(parallel\n-    [(set (match_operand:VDQW 0 \"s_register_operand\" \"\")\n-\t  (unspec:VDQW [(match_operand:VDQW 1 \"s_register_operand\" \"\")\n-\t\t\t(match_operand:VDQW 2 \"s_register_operand\" \"\")]\n+    [(set (match_operand:VDQWH 0 \"s_register_operand\")\n+\t  (unspec:VDQWH [(match_operand:VDQWH 1 \"s_register_operand\")\n+\t\t\t(match_operand:VDQWH 2 \"s_register_operand\")]\n \t   UNSPEC_VUZP1))\n-     (set (match_operand:VDQW 3 \"s_register_operand\" \"\")\n-\t  (unspec:VDQW [(match_dup 1) (match_dup 2)] UNSPEC_VUZP2))])]\n+     (set (match_operand:VDQWH 3 \"s_register_operand\" \"\")\n+\t  (unspec:VDQWH [(match_dup 1) (match_dup 2)] UNSPEC_VUZP2))])]\n   \"TARGET_NEON\"\n   \"\"\n )\n \n ;; Note: Different operand numbering to handle tied registers correctly.\n (define_insn \"*neon_vuzp<mode>_insn\"\n-  [(set (match_operand:VDQW 0 \"s_register_operand\" \"=&w\")\n-        (unspec:VDQW [(match_operand:VDQW 1 \"s_register_operand\" \"0\")\n-                      (match_operand:VDQW 3 \"s_register_operand\" \"2\")]\n-                     UNSPEC_VUZP1))\n-   (set (match_operand:VDQW 2 \"s_register_operand\" \"=&w\")\n-        (unspec:VDQW [(match_dup 1) (match_dup 3)]\n-                     UNSPEC_VUZP2))]\n+  [(set (match_operand:VDQWH 0 \"s_register_operand\" \"=&w\")\n+\t(unspec:VDQWH [(match_operand:VDQWH 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:VDQWH 3 \"s_register_operand\" \"2\")]\n+\t UNSPEC_VUZP1))\n+   (set (match_operand:VDQWH 2 \"s_register_operand\" \"=&w\")\n+\t(unspec:VDQWH [(match_dup 1) (match_dup 3)]\n+\t UNSPEC_VUZP2))]\n   \"TARGET_NEON\"\n   \"vuzp.<V_sz_elem>\\t%<V_reg>0, %<V_reg>2\"\n   [(set_attr \"type\" \"neon_zip<q>\")]"}, {"sha": "645b01ead67124dd52eae5564f909f23779e78ee", "filename": "gcc/config/arm/vec-common.md", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a970a5cc7730abed0f1710a8c6385f6a5fcc99/gcc%2Fconfig%2Farm%2Fvec-common.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a970a5cc7730abed0f1710a8c6385f6a5fcc99/gcc%2Fconfig%2Farm%2Fvec-common.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvec-common.md?ref=b1a970a5cc7730abed0f1710a8c6385f6a5fcc99", "patch": "@@ -124,6 +124,20 @@\n     FAIL;\n })\n \n+(define_expand \"vec_perm_const<mode>\"\n+  [(match_operand:VH 0 \"s_register_operand\")\n+   (match_operand:VH 1 \"s_register_operand\")\n+   (match_operand:VH 2 \"s_register_operand\")\n+   (match_operand:<V_cmp_result> 3)]\n+  \"TARGET_NEON\"\n+{\n+  if (arm_expand_vec_perm_const (operands[0], operands[1],\n+\t\t\t\t operands[2], operands[3]))\n+    DONE;\n+  else\n+    FAIL;\n+})\n+\n (define_expand \"vec_perm<mode>\"\n   [(match_operand:VE 0 \"s_register_operand\" \"\")\n    (match_operand:VE 1 \"s_register_operand\" \"\")"}, {"sha": "34ef9d3a9119765f2b9132d39fa1b151b0e4e8b9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a970a5cc7730abed0f1710a8c6385f6a5fcc99/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a970a5cc7730abed0f1710a8c6385f6a5fcc99/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b1a970a5cc7730abed0f1710a8c6385f6a5fcc99", "patch": "@@ -1,3 +1,23 @@\n+2016-09-23  Matthew Wahab  <matthew.wahab@arm.com>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/arm-neon-ref.h\n+\t(FP16_SUPPORTED): New\n+\t(expected-hfloat-16x4): Make conditional on __fp16 support.\n+\t(expected-hfloat-16x8): Likewise.\n+\t(vdup_n_f16): Disable for non-AArch64 targets.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vbsl.c: Add __fp16 tests,\n+\tconditional on FP16_SUPPORTED.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vdup-vmov.c: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vdup_lane.c: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vext.c: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vrev.c: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vshuffle.inc: Add support\n+\tfor testing __fp16.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vtrn.c: Add __fp16 tests,\n+\tconditional on FP16_SUPPORTED.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vuzp.c: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vzip.c: Likewise.\n+\n 2016-09-23  Matthew Wahab  <matthew.wahab@arm.com>\n \n \t* gcc.target/arm/short-vfp-1.c: New."}, {"sha": "1297137350c93c293cececd35b1202306bd4115a", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/arm-neon-ref.h", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a970a5cc7730abed0f1710a8c6385f6a5fcc99/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Farm-neon-ref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a970a5cc7730abed0f1710a8c6385f6a5fcc99/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Farm-neon-ref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Farm-neon-ref.h?ref=b1a970a5cc7730abed0f1710a8c6385f6a5fcc99", "patch": "@@ -16,6 +16,15 @@ extern void *memset(void *, int, size_t);\n extern void *memcpy(void *, const void *, size_t);\n extern size_t strlen(const char *);\n \n+/* Helper macro to select FP16 tests.  */\n+#if (!defined (__aarch64__)\t\t\t\t\t\t\\\n+     && (defined (__ARM_FP16_FORMAT_IEEE)\t\t\t\t\\\n+\t || defined (__ARM_FP16_FORMAT_ALTERNATIVE)))\n+#define FP16_SUPPORTED (1)\n+#else\n+#undef FP16_SUPPORTED\n+#endif\n+\n /* Various string construction helpers.  */\n \n /*\n@@ -511,7 +520,9 @@ static void clean_results (void)\n /* Helpers to initialize vectors.  */\n #define VDUP(VAR, Q, T1, T2, W, N, V)\t\t\t\\\n   VECT_VAR(VAR, T1, W, N) = vdup##Q##_n_##T2##W(V)\n-#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+#if (defined (__aarch64__)\t\t\t\t\t\t\\\n+     && (defined (__ARM_FP16_FORMAT_IEEE)\t\t\t\t\\\n+\t || defined (__ARM_FP16_FORMAT_ALTERNATIVE)))\n /* Work around that there is no vdup_n_f16 intrinsic.  */\n #define vdup_n_f16(VAL)\t\t\\\n   __extension__\t\t\t\\"}, {"sha": "e9b3dfd1c0233a900ce9889793100a651a7e51cc", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vbsl.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a970a5cc7730abed0f1710a8c6385f6a5fcc99/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvbsl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a970a5cc7730abed0f1710a8c6385f6a5fcc99/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvbsl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvbsl.c?ref=b1a970a5cc7730abed0f1710a8c6385f6a5fcc99", "patch": "@@ -16,6 +16,10 @@ VECT_VAR_DECL(expected,uint,64,1) [] = { 0xfffffff1 };\n VECT_VAR_DECL(expected,poly,8,8) [] = { 0xf3, 0xf3, 0xf3, 0xf3,\n \t\t\t\t\t0xf7, 0xf7, 0xf7, 0xf7 };\n VECT_VAR_DECL(expected,poly,16,4) [] = { 0xfff0, 0xfff0, 0xfff2, 0xfff2 };\n+#if defined (FP16_SUPPORTED)\n+VECT_VAR_DECL (expected, hfloat, 16, 4) [] = { 0xcc09, 0xcb89,\n+\t\t\t\t\t       0xcb09, 0xca89 };\n+#endif\n VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0xc1800004, 0xc1700004 };\n VECT_VAR_DECL(expected,int,8,16) [] = { 0xf2, 0xf2, 0xf2, 0xf2,\n \t\t\t\t\t0xf6, 0xf6, 0xf6, 0xf6,\n@@ -43,6 +47,12 @@ VECT_VAR_DECL(expected,poly,8,16) [] = { 0xf3, 0xf3, 0xf3, 0xf3,\n \t\t\t\t\t 0xf7, 0xf7, 0xf7, 0xf7 };\n VECT_VAR_DECL(expected,poly,16,8) [] = { 0xfff0, 0xfff0, 0xfff2, 0xfff2,\n \t\t\t\t\t 0xfff4, 0xfff4, 0xfff6, 0xfff6 };\n+#if defined (FP16_SUPPORTED)\n+VECT_VAR_DECL (expected, hfloat, 16, 8) [] = { 0xcc09, 0xcb89,\n+\t\t\t\t\t       0xcb09, 0xca89,\n+\t\t\t\t\t       0xca09, 0xc989,\n+\t\t\t\t\t       0xc909, 0xc889 };\n+#endif\n VECT_VAR_DECL(expected,hfloat,32,4) [] = { 0xc1800001, 0xc1700001,\n \t\t\t\t\t   0xc1600001, 0xc1500001 };\n \n@@ -66,6 +76,10 @@ void exec_vbsl (void)\n   clean_results ();\n \n   TEST_MACRO_ALL_VARIANTS_2_5(VLOAD, vector, buffer);\n+#if defined (FP16_SUPPORTED)\n+  VLOAD(vector, buffer, , float, f, 16, 4);\n+  VLOAD(vector, buffer, q, float, f, 16, 8);\n+#endif\n   VLOAD(vector, buffer, , float, f, 32, 2);\n   VLOAD(vector, buffer, q, float, f, 32, 4);\n \n@@ -80,6 +94,9 @@ void exec_vbsl (void)\n   VDUP(vector2, , uint, u, 16, 4, 0xFFF2);\n   VDUP(vector2, , uint, u, 32, 2, 0xFFFFFFF0);\n   VDUP(vector2, , uint, u, 64, 1, 0xFFFFFFF3);\n+#if defined (FP16_SUPPORTED)\n+  VDUP(vector2, , float, f, 16, 4, -2.4f);   /* -2.4f is 0xC0CD.  */\n+#endif\n   VDUP(vector2, , float, f, 32, 2, -30.3f);\n   VDUP(vector2, , poly, p, 8, 8, 0xF3);\n   VDUP(vector2, , poly, p, 16, 4, 0xFFF2);\n@@ -94,6 +111,9 @@ void exec_vbsl (void)\n   VDUP(vector2, q, uint, u, 64, 2, 0xFFFFFFF3);\n   VDUP(vector2, q, poly, p, 8, 16, 0xF3);\n   VDUP(vector2, q, poly, p, 16, 8, 0xFFF2);\n+#if defined (FP16_SUPPORTED)\n+  VDUP(vector2, q, float, f, 16, 8, -2.4f);\n+#endif\n   VDUP(vector2, q, float, f, 32, 4, -30.4f);\n \n   VDUP(vector_first, , uint, u, 8, 8, 0xF4);\n@@ -111,10 +131,18 @@ void exec_vbsl (void)\n   TEST_VBSL(uint, , poly, p, 16, 4);\n   TEST_VBSL(uint, q, poly, p, 8, 16);\n   TEST_VBSL(uint, q, poly, p, 16, 8);\n+#if defined (FP16_SUPPORTED)\n+  TEST_VBSL(uint, , float, f, 16, 4);\n+  TEST_VBSL(uint, q, float, f, 16, 8);\n+#endif\n   TEST_VBSL(uint, , float, f, 32, 2);\n   TEST_VBSL(uint, q, float, f, 32, 4);\n \n+#if defined (FP16_SUPPORTED)\n+  CHECK_RESULTS (TEST_MSG, \"\");\n+#else\n   CHECK_RESULTS_NO_FP16 (TEST_MSG, \"\");\n+#endif\n }\n \n int main (void)"}, {"sha": "aef4173326c907a5f487f2520d0e354afbc16fd4", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vdup-vmov.c", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a970a5cc7730abed0f1710a8c6385f6a5fcc99/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvdup-vmov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a970a5cc7730abed0f1710a8c6385f6a5fcc99/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvdup-vmov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvdup-vmov.c?ref=b1a970a5cc7730abed0f1710a8c6385f6a5fcc99", "patch": "@@ -19,6 +19,10 @@ VECT_VAR_DECL(expected0,uint,64,1) [] = { 0xfffffffffffffff0 };\n VECT_VAR_DECL(expected0,poly,8,8) [] = { 0xf0, 0xf0, 0xf0, 0xf0,\n \t\t\t\t\t 0xf0, 0xf0, 0xf0, 0xf0 };\n VECT_VAR_DECL(expected0,poly,16,4) [] = { 0xfff0, 0xfff0, 0xfff0, 0xfff0 };\n+#if defined (FP16_SUPPORTED)\n+VECT_VAR_DECL (expected0, hfloat, 16, 4) [] = { 0xcc00, 0xcc00,\n+\t\t\t\t\t\t0xcc00, 0xcc00 };\n+#endif\n VECT_VAR_DECL(expected0,hfloat,32,2) [] = { 0xc1800000, 0xc1800000 };\n VECT_VAR_DECL(expected0,int,8,16) [] = { 0xf0, 0xf0, 0xf0, 0xf0,\n \t\t\t\t\t 0xf0, 0xf0, 0xf0, 0xf0,\n@@ -46,6 +50,12 @@ VECT_VAR_DECL(expected0,poly,8,16) [] = { 0xf0, 0xf0, 0xf0, 0xf0,\n \t\t\t\t\t  0xf0, 0xf0, 0xf0, 0xf0 };\n VECT_VAR_DECL(expected0,poly,16,8) [] = { 0xfff0, 0xfff0, 0xfff0, 0xfff0,\n \t\t\t\t\t  0xfff0, 0xfff0, 0xfff0, 0xfff0 };\n+#if defined (FP16_SUPPORTED)\n+VECT_VAR_DECL (expected0, hfloat, 16, 8) [] = { 0xcc00, 0xcc00,\n+\t\t\t\t\t\t0xcc00, 0xcc00,\n+\t\t\t\t\t\t0xcc00, 0xcc00,\n+\t\t\t\t\t\t0xcc00, 0xcc00 };\n+#endif\n VECT_VAR_DECL(expected0,hfloat,32,4) [] = { 0xc1800000, 0xc1800000,\n \t\t\t\t\t    0xc1800000, 0xc1800000 };\n \n@@ -63,6 +73,10 @@ VECT_VAR_DECL(expected1,uint,64,1) [] = { 0xfffffffffffffff1 };\n VECT_VAR_DECL(expected1,poly,8,8) [] = { 0xf1, 0xf1, 0xf1, 0xf1,\n \t\t\t\t\t 0xf1, 0xf1, 0xf1, 0xf1 };\n VECT_VAR_DECL(expected1,poly,16,4) [] = { 0xfff1, 0xfff1, 0xfff1, 0xfff1 };\n+#if defined (FP16_SUPPORTED)\n+VECT_VAR_DECL (expected1, hfloat, 16, 4) [] = { 0xcb80, 0xcb80,\n+\t\t\t\t\t\t0xcb80, 0xcb80 };\n+#endif\n VECT_VAR_DECL(expected1,hfloat,32,2) [] = { 0xc1700000, 0xc1700000 };\n VECT_VAR_DECL(expected1,int,8,16) [] = { 0xf1, 0xf1, 0xf1, 0xf1,\n \t\t\t\t\t 0xf1, 0xf1, 0xf1, 0xf1,\n@@ -90,6 +104,12 @@ VECT_VAR_DECL(expected1,poly,8,16) [] = { 0xf1, 0xf1, 0xf1, 0xf1,\n \t\t\t\t\t  0xf1, 0xf1, 0xf1, 0xf1 };\n VECT_VAR_DECL(expected1,poly,16,8) [] = { 0xfff1, 0xfff1, 0xfff1, 0xfff1,\n \t\t\t\t\t  0xfff1, 0xfff1, 0xfff1, 0xfff1 };\n+#if defined (FP16_SUPPORTED)\n+VECT_VAR_DECL (expected1, hfloat, 16, 8) [] = { 0xcb80, 0xcb80,\n+\t\t\t\t\t\t0xcb80, 0xcb80,\n+\t\t\t\t\t\t0xcb80, 0xcb80,\n+\t\t\t\t\t\t0xcb80, 0xcb80 };\n+#endif\n VECT_VAR_DECL(expected1,hfloat,32,4) [] = { 0xc1700000, 0xc1700000,\n \t\t\t\t\t    0xc1700000, 0xc1700000 };\n \n@@ -107,6 +127,10 @@ VECT_VAR_DECL(expected2,uint,64,1) [] = { 0xfffffffffffffff2 };\n VECT_VAR_DECL(expected2,poly,8,8) [] = { 0xf2, 0xf2, 0xf2, 0xf2,\n \t\t\t\t\t 0xf2, 0xf2, 0xf2, 0xf2 };\n VECT_VAR_DECL(expected2,poly,16,4) [] = { 0xfff2, 0xfff2, 0xfff2, 0xfff2 };\n+#if defined (FP16_SUPPORTED)\n+VECT_VAR_DECL (expected2, hfloat, 16, 4) [] = { 0xcb00, 0xcb00,\n+\t\t\t\t\t\t0xcb00, 0xcb00 };\n+#endif\n VECT_VAR_DECL(expected2,hfloat,32,2) [] = { 0xc1600000, 0xc1600000 };\n VECT_VAR_DECL(expected2,int,8,16) [] = { 0xf2, 0xf2, 0xf2, 0xf2,\n \t\t\t\t\t 0xf2, 0xf2, 0xf2, 0xf2,\n@@ -134,6 +158,12 @@ VECT_VAR_DECL(expected2,poly,8,16) [] = { 0xf2, 0xf2, 0xf2, 0xf2,\n \t\t\t\t\t  0xf2, 0xf2, 0xf2, 0xf2 };\n VECT_VAR_DECL(expected2,poly,16,8) [] = { 0xfff2, 0xfff2, 0xfff2, 0xfff2,\n \t\t\t\t\t  0xfff2, 0xfff2, 0xfff2, 0xfff2 };\n+#if defined (FP16_SUPPORTED)\n+VECT_VAR_DECL (expected2, hfloat, 16, 8) [] = { 0xcb00, 0xcb00,\n+\t\t\t\t\t\t0xcb00, 0xcb00,\n+\t\t\t\t\t\t0xcb00, 0xcb00,\n+\t\t\t\t\t\t0xcb00, 0xcb00 };\n+#endif\n VECT_VAR_DECL(expected2,hfloat,32,4) [] = { 0xc1600000, 0xc1600000,\n \t\t\t\t\t    0xc1600000, 0xc1600000 };\n \n@@ -171,6 +201,9 @@ void exec_vdup_vmov (void)\n     TEST_VDUP(, uint, u, 64, 1);\n     TEST_VDUP(, poly, p, 8, 8);\n     TEST_VDUP(, poly, p, 16, 4);\n+#if defined (FP16_SUPPORTED)\n+    TEST_VDUP(, float, f, 16, 4);\n+#endif\n     TEST_VDUP(, float, f, 32, 2);\n \n     TEST_VDUP(q, int, s, 8, 16);\n@@ -183,8 +216,26 @@ void exec_vdup_vmov (void)\n     TEST_VDUP(q, uint, u, 64, 2);\n     TEST_VDUP(q, poly, p, 8, 16);\n     TEST_VDUP(q, poly, p, 16, 8);\n+#if defined (FP16_SUPPORTED)\n+    TEST_VDUP(q, float, f, 16, 8);\n+#endif\n     TEST_VDUP(q, float, f, 32, 4);\n \n+#if defined (FP16_SUPPORTED)\n+    switch (i) {\n+    case 0:\n+      CHECK_RESULTS_NAMED (TEST_MSG, expected0, \"\");\n+      break;\n+    case 1:\n+      CHECK_RESULTS_NAMED (TEST_MSG, expected1, \"\");\n+      break;\n+    case 2:\n+      CHECK_RESULTS_NAMED (TEST_MSG, expected2, \"\");\n+      break;\n+    default:\n+      abort();\n+    }\n+#else\n     switch (i) {\n     case 0:\n       CHECK_RESULTS_NAMED_NO_FP16 (TEST_MSG, expected0, \"\");\n@@ -198,6 +249,7 @@ void exec_vdup_vmov (void)\n     default:\n       abort();\n     }\n+#endif\n   }\n \n   /* Do the same tests with vmov. Use the same expected results.  */\n@@ -216,6 +268,9 @@ void exec_vdup_vmov (void)\n     TEST_VMOV(, uint, u, 64, 1);\n     TEST_VMOV(, poly, p, 8, 8);\n     TEST_VMOV(, poly, p, 16, 4);\n+#if defined (FP16_SUPPORTED)\n+    TEST_VMOV(, float, f, 16, 4);\n+#endif\n     TEST_VMOV(, float, f, 32, 2);\n \n     TEST_VMOV(q, int, s, 8, 16);\n@@ -228,8 +283,26 @@ void exec_vdup_vmov (void)\n     TEST_VMOV(q, uint, u, 64, 2);\n     TEST_VMOV(q, poly, p, 8, 16);\n     TEST_VMOV(q, poly, p, 16, 8);\n+#if defined (FP16_SUPPORTED)\n+    TEST_VMOV(q, float, f, 16, 8);\n+#endif\n     TEST_VMOV(q, float, f, 32, 4);\n \n+#if defined (FP16_SUPPORTED)\n+    switch (i) {\n+    case 0:\n+      CHECK_RESULTS_NAMED (TEST_MSG, expected0, \"\");\n+      break;\n+    case 1:\n+      CHECK_RESULTS_NAMED (TEST_MSG, expected1, \"\");\n+      break;\n+    case 2:\n+      CHECK_RESULTS_NAMED (TEST_MSG, expected2, \"\");\n+      break;\n+    default:\n+      abort();\n+    }\n+#else\n     switch (i) {\n     case 0:\n       CHECK_RESULTS_NAMED_NO_FP16 (TEST_MSG, expected0, \"\");\n@@ -243,6 +316,8 @@ void exec_vdup_vmov (void)\n     default:\n       abort();\n     }\n+#endif\n+\n   }\n }\n "}, {"sha": "c4b8f14de78cdc1696101e9bc8b9091df34a6afd", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vdup_lane.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a970a5cc7730abed0f1710a8c6385f6a5fcc99/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvdup_lane.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a970a5cc7730abed0f1710a8c6385f6a5fcc99/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvdup_lane.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvdup_lane.c?ref=b1a970a5cc7730abed0f1710a8c6385f6a5fcc99", "patch": "@@ -17,6 +17,10 @@ VECT_VAR_DECL(expected,poly,8,8) [] = { 0xf7, 0xf7, 0xf7, 0xf7,\n \t\t\t\t\t0xf7, 0xf7, 0xf7, 0xf7 };\n VECT_VAR_DECL(expected,poly,16,4) [] = { 0xfff3, 0xfff3, 0xfff3, 0xfff3 };\n VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0xc1700000, 0xc1700000 };\n+#if defined (FP16_SUPPORTED)\n+VECT_VAR_DECL (expected, hfloat, 16, 4) [] = { 0xca80, 0xca80,\n+\t\t\t\t\t       0xca80, 0xca80 };\n+#endif\n VECT_VAR_DECL(expected,int,8,16) [] = { 0xf2, 0xf2, 0xf2, 0xf2,\n \t\t\t\t\t0xf2, 0xf2, 0xf2, 0xf2,\n \t\t\t\t\t0xf2, 0xf2, 0xf2, 0xf2,\n@@ -43,6 +47,12 @@ VECT_VAR_DECL(expected,poly,8,16) [] = { 0xf5, 0xf5, 0xf5, 0xf5,\n \t\t\t\t\t 0xf5, 0xf5, 0xf5, 0xf5 };\n VECT_VAR_DECL(expected,poly,16,8) [] = { 0xfff1, 0xfff1, 0xfff1, 0xfff1,\n \t\t\t\t\t 0xfff1, 0xfff1, 0xfff1, 0xfff1 };\n+#if defined (FP16_SUPPORTED)\n+VECT_VAR_DECL (expected, hfloat, 16, 8) [] = { 0xca80, 0xca80,\n+\t\t\t\t\t       0xca80, 0xca80,\n+\t\t\t\t\t       0xca80, 0xca80,\n+\t\t\t\t\t       0xca80, 0xca80 };\n+#endif\n VECT_VAR_DECL(expected,hfloat,32,4) [] = { 0xc1700000, 0xc1700000,\n \t\t\t\t\t   0xc1700000, 0xc1700000 };\n \n@@ -63,6 +73,9 @@ void exec_vdup_lane (void)\n   clean_results ();\n \n   TEST_MACRO_64BITS_VARIANTS_2_5(VLOAD, vector, buffer);\n+#if defined (FP16_SUPPORTED)\n+  VLOAD(vector, buffer, , float, f, 16, 4);\n+#endif\n   VLOAD(vector, buffer, , float, f, 32, 2);\n \n   /* Choose lane arbitrarily.  */\n@@ -76,6 +89,9 @@ void exec_vdup_lane (void)\n   TEST_VDUP_LANE(, uint, u, 64, 1, 1, 0);\n   TEST_VDUP_LANE(, poly, p, 8, 8, 8, 7);\n   TEST_VDUP_LANE(, poly, p, 16, 4, 4, 3);\n+#if defined (FP16_SUPPORTED)\n+  TEST_VDUP_LANE(, float, f, 16, 4, 4, 3);\n+#endif\n   TEST_VDUP_LANE(, float, f, 32, 2, 2, 1);\n \n   TEST_VDUP_LANE(q, int, s, 8, 16, 8, 2);\n@@ -88,9 +104,16 @@ void exec_vdup_lane (void)\n   TEST_VDUP_LANE(q, uint, u, 64, 2, 1, 0);\n   TEST_VDUP_LANE(q, poly, p, 8, 16, 8, 5);\n   TEST_VDUP_LANE(q, poly, p, 16, 8, 4, 1);\n+#if defined (FP16_SUPPORTED)\n+  TEST_VDUP_LANE(q, float, f, 16, 8, 4, 3);\n+#endif\n   TEST_VDUP_LANE(q, float, f, 32, 4, 2, 1);\n \n+#if defined (FP16_SUPPORTED)\n+  CHECK_RESULTS (TEST_MSG, \"\");\n+#else\n   CHECK_RESULTS_NO_FP16 (TEST_MSG, \"\");\n+#endif\n }\n \n int main (void)"}, {"sha": "908294a991db7daeafe7ba9f29826575c1c7eb02", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vext.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a970a5cc7730abed0f1710a8c6385f6a5fcc99/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvext.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a970a5cc7730abed0f1710a8c6385f6a5fcc99/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvext.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvext.c?ref=b1a970a5cc7730abed0f1710a8c6385f6a5fcc99", "patch": "@@ -16,6 +16,10 @@ VECT_VAR_DECL(expected,uint,64,1) [] = { 0xfffffffffffffff0 };\n VECT_VAR_DECL(expected,poly,8,8) [] = { 0xf6, 0xf7, 0x55, 0x55,\n \t\t\t\t\t0x55, 0x55, 0x55, 0x55 };\n VECT_VAR_DECL(expected,poly,16,4) [] = { 0xfff2, 0xfff3, 0x66, 0x66 };\n+#if defined (FP16_SUPPORTED)\n+VECT_VAR_DECL (expected, hfloat, 16, 4) [] = { 0xcb00, 0xca80,\n+\t\t\t\t\t       0x4b4d, 0x4b4d };\n+#endif\n VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0xc1700000, 0x42066666 };\n VECT_VAR_DECL(expected,int,8,16) [] = { 0xfe, 0xff, 0x11, 0x11,\n \t\t\t\t\t0x11, 0x11, 0x11, 0x11,\n@@ -39,6 +43,12 @@ VECT_VAR_DECL(expected,poly,8,16) [] = { 0xfc, 0xfd, 0xfe, 0xff,\n \t\t\t\t\t 0x55, 0x55, 0x55, 0x55 };\n VECT_VAR_DECL(expected,poly,16,8) [] = { 0xfff6, 0xfff7, 0x66, 0x66,\n \t\t\t\t\t 0x66, 0x66, 0x66, 0x66 };\n+#if defined (FP16_SUPPORTED)\n+VECT_VAR_DECL (expected, hfloat, 16, 8) [] = { 0xc880, 0x4b4d,\n+\t\t\t\t\t       0x4b4d, 0x4b4d,\n+\t\t\t\t\t       0x4b4d, 0x4b4d,\n+\t\t\t\t\t       0x4b4d, 0x4b4d };\n+#endif\n VECT_VAR_DECL(expected,hfloat,32,4) [] = { 0xc1500000, 0x4204cccd,\n \t\t\t\t\t   0x4204cccd, 0x4204cccd };\n \n@@ -60,6 +70,10 @@ void exec_vext (void)\n   clean_results ();\n \n   TEST_MACRO_ALL_VARIANTS_2_5(VLOAD, vector1, buffer);\n+#ifdef FP16_SUPPORTED\n+  VLOAD(vector1, buffer, , float, f, 16, 4);\n+  VLOAD(vector1, buffer, q, float, f, 16, 8);\n+#endif\n   VLOAD(vector1, buffer, , float, f, 32, 2);\n   VLOAD(vector1, buffer, q, float, f, 32, 4);\n \n@@ -74,6 +88,9 @@ void exec_vext (void)\n   VDUP(vector2, , uint, u, 64, 1, 0x88);\n   VDUP(vector2, , poly, p, 8, 8, 0x55);\n   VDUP(vector2, , poly, p, 16, 4, 0x66);\n+#if defined (FP16_SUPPORTED)\n+  VDUP (vector2, , float, f, 16, 4, 14.6f);   /* 14.6f is 0x4b4d.  */\n+#endif\n   VDUP(vector2, , float, f, 32, 2, 33.6f);\n \n   VDUP(vector2, q, int, s, 8, 16, 0x11);\n@@ -86,6 +103,9 @@ void exec_vext (void)\n   VDUP(vector2, q, uint, u, 64, 2, 0x88);\n   VDUP(vector2, q, poly, p, 8, 16, 0x55);\n   VDUP(vector2, q, poly, p, 16, 8, 0x66);\n+#if defined (FP16_SUPPORTED)\n+  VDUP (vector2, q, float, f, 16, 8, 14.6f);\n+#endif\n   VDUP(vector2, q, float, f, 32, 4, 33.2f);\n \n   /* Choose arbitrary extract offsets.  */\n@@ -99,6 +119,9 @@ void exec_vext (void)\n   TEST_VEXT(, uint, u, 64, 1, 0);\n   TEST_VEXT(, poly, p, 8, 8, 6);\n   TEST_VEXT(, poly, p, 16, 4, 2);\n+#if defined (FP16_SUPPORTED)\n+  TEST_VEXT(, float, f, 16, 4, 2);\n+#endif\n   TEST_VEXT(, float, f, 32, 2, 1);\n \n   TEST_VEXT(q, int, s, 8, 16, 14);\n@@ -111,9 +134,16 @@ void exec_vext (void)\n   TEST_VEXT(q, uint, u, 64, 2, 1);\n   TEST_VEXT(q, poly, p, 8, 16, 12);\n   TEST_VEXT(q, poly, p, 16, 8, 6);\n+#if defined (FP16_SUPPORTED)\n+  TEST_VEXT(q, float, f, 16, 8, 7);\n+#endif\n   TEST_VEXT(q, float, f, 32, 4, 3);\n \n+#if defined (FP16_SUPPORTED)\n+  CHECK_RESULTS (TEST_MSG, \"\");\n+#else\n   CHECK_RESULTS_NO_FP16 (TEST_MSG, \"\");\n+#endif\n }\n \n int main (void)"}, {"sha": "0c01318a3032f34a1d37ad73ed2e8821fc30ddf6", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vrev.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a970a5cc7730abed0f1710a8c6385f6a5fcc99/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a970a5cc7730abed0f1710a8c6385f6a5fcc99/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrev.c?ref=b1a970a5cc7730abed0f1710a8c6385f6a5fcc99", "patch": "@@ -63,6 +63,10 @@ VECT_VAR_DECL(expected_vrev64,uint,32,2) [] = { 0xfffffff1, 0xfffffff0 };\n VECT_VAR_DECL(expected_vrev64,poly,8,8) [] = { 0xf7, 0xf6, 0xf5, 0xf4,\n \t\t\t\t\t       0xf3, 0xf2, 0xf1, 0xf0 };\n VECT_VAR_DECL(expected_vrev64,poly,16,4) [] = { 0xfff3, 0xfff2, 0xfff1, 0xfff0 };\n+#if defined (FP16_SUPPORTED)\n+VECT_VAR_DECL (expected_vrev64, hfloat, 16, 4) [] = { 0xca80, 0xcb00,\n+\t\t\t\t\t\t      0xcb80, 0xcc00 };\n+#endif\n VECT_VAR_DECL(expected_vrev64,hfloat,32,2) [] = { 0xc1700000, 0xc1800000 };\n VECT_VAR_DECL(expected_vrev64,int,8,16) [] = { 0xf7, 0xf6, 0xf5, 0xf4,\n \t\t\t\t\t       0xf3, 0xf2, 0xf1, 0xf0,\n@@ -86,6 +90,12 @@ VECT_VAR_DECL(expected_vrev64,poly,8,16) [] = { 0xf7, 0xf6, 0xf5, 0xf4,\n \t\t\t\t\t\t0xfb, 0xfa, 0xf9, 0xf8 };\n VECT_VAR_DECL(expected_vrev64,poly,16,8) [] = { 0xfff3, 0xfff2, 0xfff1, 0xfff0,\n \t\t\t\t\t\t0xfff7, 0xfff6, 0xfff5, 0xfff4 };\n+#if defined (FP16_SUPPORTED)\n+VECT_VAR_DECL (expected_vrev64, hfloat, 16, 8) [] = { 0xca80, 0xcb00,\n+\t\t\t\t\t\t      0xcb80, 0xcc00,\n+\t\t\t\t\t\t      0xc880, 0xc900,\n+\t\t\t\t\t\t      0xc980, 0xca00 };\n+#endif\n VECT_VAR_DECL(expected_vrev64,hfloat,32,4) [] = { 0xc1700000, 0xc1800000,\n \t\t\t\t\t\t  0xc1500000, 0xc1600000 };\n \n@@ -104,6 +114,10 @@ void exec_vrev (void)\n \n   /* Initialize input \"vector\" from \"buffer\".  */\n   TEST_MACRO_ALL_VARIANTS_2_5(VLOAD, vector, buffer);\n+#if defined (FP16_SUPPORTED)\n+  VLOAD (vector, buffer, , float, f, 16, 4);\n+  VLOAD (vector, buffer, q, float, f, 16, 8);\n+#endif\n   VLOAD(vector, buffer, , float, f, 32, 2);\n   VLOAD(vector, buffer, q, float, f, 32, 4);\n \n@@ -187,6 +201,12 @@ void exec_vrev (void)\n   CHECK(TEST_MSG, poly, 8, 16, PRIx8, expected_vrev64, \"\");\n   CHECK(TEST_MSG, poly, 16, 8, PRIx16, expected_vrev64, \"\");\n \n+#if defined (FP16_SUPPORTED)\n+  TEST_VREV (, float, f, 16, 4, 64);\n+  TEST_VREV (q, float, f, 16, 8, 64);\n+  CHECK_FP(TEST_MSG, float, 16, 4, PRIx32, expected_vrev64, \"\");\n+  CHECK_FP(TEST_MSG, float, 16, 8, PRIx32, expected_vrev64, \"\");\n+#endif\n   TEST_VREV(, float, f, 32, 2, 64);\n   TEST_VREV(q, float, f, 32, 4, 64);\n   CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected_vrev64, \"\");"}, {"sha": "ad5bf315b6c9468ea5b038bb9413a51efda80872", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vshuffle.inc", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a970a5cc7730abed0f1710a8c6385f6a5fcc99/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvshuffle.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a970a5cc7730abed0f1710a8c6385f6a5fcc99/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvshuffle.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvshuffle.inc?ref=b1a970a5cc7730abed0f1710a8c6385f6a5fcc99", "patch": "@@ -53,9 +53,17 @@ void FNNAME (INSN_NAME) (void)\n   DECL_VSHUFFLE(float, 32, 4)\n \n   DECL_ALL_VSHUFFLE();\n+#if defined (FP16_SUPPORTED)\n+  DECL_VSHUFFLE (float, 16, 4);\n+  DECL_VSHUFFLE (float, 16, 8);\n+#endif\n \n   /* Initialize input \"vector\" from \"buffer\".  */\n   TEST_MACRO_ALL_VARIANTS_2_5(VLOAD, vector1, buffer);\n+#if defined (FP16_SUPPORTED)\n+  VLOAD (vector1, buffer, , float, f, 16, 4);\n+  VLOAD (vector1, buffer, q, float, f, 16, 8);\n+#endif\n   VLOAD(vector1, buffer, , float, f, 32, 2);\n   VLOAD(vector1, buffer, q, float, f, 32, 4);\n \n@@ -68,6 +76,9 @@ void FNNAME (INSN_NAME) (void)\n   VDUP(vector2, , uint, u, 32, 2, 0x77);\n   VDUP(vector2, , poly, p, 8, 8, 0x55);\n   VDUP(vector2, , poly, p, 16, 4, 0x66);\n+#if defined (FP16_SUPPORTED)\n+  VDUP (vector2, , float, f, 16, 4, 14.6f);   /* 14.6f is 0x4b4d.  */\n+#endif\n   VDUP(vector2, , float, f, 32, 2, 33.6f);\n \n   VDUP(vector2, q, int, s, 8, 16, 0x11);\n@@ -78,8 +89,11 @@ void FNNAME (INSN_NAME) (void)\n   VDUP(vector2, q, uint, u, 32, 4, 0x77);\n   VDUP(vector2, q, poly, p, 8, 16, 0x55);\n   VDUP(vector2, q, poly, p, 16, 8, 0x66);\n+#if defined (FP16_SUPPORTED)\n+  VDUP (vector2, q, float, f, 16, 8, 14.6f);\n+#endif\n   VDUP(vector2, q, float, f, 32, 4, 33.8f);\n-  \n+\n #define TEST_ALL_VSHUFFLE(INSN)\t\t\t\t\\\n   TEST_VSHUFFLE(INSN, , int, s, 8, 8);\t\t\t\\\n   TEST_VSHUFFLE(INSN, , int, s, 16, 4);\t\t\t\\\n@@ -100,6 +114,10 @@ void FNNAME (INSN_NAME) (void)\n   TEST_VSHUFFLE(INSN, q, poly, p, 16, 8);\t\t\\\n   TEST_VSHUFFLE(INSN, q, float, f, 32, 4)\n \n+#define TEST_VSHUFFLE_FP16(INSN)\t\t\\\n+  TEST_VSHUFFLE(INSN, , float, f, 16, 4);\t\\\n+  TEST_VSHUFFLE(INSN, q, float, f, 16, 8);\n+\n #define TEST_ALL_EXTRA_CHUNKS()\t\t\t\\\n   TEST_EXTRA_CHUNK(int, 8, 8, 1);\t\t\\\n   TEST_EXTRA_CHUNK(int, 16, 4, 1);\t\t\\\n@@ -143,17 +161,37 @@ void FNNAME (INSN_NAME) (void)\n     CHECK(test_name, poly, 8, 16, PRIx8, EXPECTED, comment);\t\t\\\n     CHECK(test_name, poly, 16, 8, PRIx16, EXPECTED, comment);\t\t\\\n     CHECK_FP(test_name, float, 32, 4, PRIx32, EXPECTED, comment);\t\\\n-  }\t\t\t\t\t\t\t\t\t\\\n+  }\n+\n+#define CHECK_RESULTS_VSHUFFLE_FP16(test_name,EXPECTED,comment)\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    CHECK_FP (test_name, float, 16, 4, PRIx16, EXPECTED, comment);\t\\\n+    CHECK_FP (test_name, float, 16, 8, PRIx16, EXPECTED, comment);\t\\\n+  }\n \n   clean_results ();\n \n   /* Execute the tests.  */\n   TEST_ALL_VSHUFFLE(INSN_NAME);\n+#if defined (FP16_SUPPORTED)\n+  TEST_VSHUFFLE_FP16 (INSN_NAME);\n+#endif\n \n   CHECK_RESULTS_VSHUFFLE (TEST_MSG, expected0, \"(chunk 0)\");\n+#if defined (FP16_SUPPORTED)\n+  CHECK_RESULTS_VSHUFFLE_FP16 (TEST_MSG, expected0, \"(chunk 0)\");\n+#endif\n \n   TEST_ALL_EXTRA_CHUNKS();\n+#if defined (FP16_SUPPORTED)\n+  TEST_EXTRA_CHUNK (float, 16, 4, 1);\n+  TEST_EXTRA_CHUNK (float, 16, 8, 1);\n+#endif\n+\n   CHECK_RESULTS_VSHUFFLE (TEST_MSG, expected1, \"(chunk 1)\");\n+#if defined (FP16_SUPPORTED)\n+  CHECK_RESULTS_VSHUFFLE_FP16 (TEST_MSG, expected1, \"(chunk 1)\");\n+#endif\n }\n \n int main (void)"}, {"sha": "ea2d8d8f8bb5363efded15c4d176af314c07cbda", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vtrn.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a970a5cc7730abed0f1710a8c6385f6a5fcc99/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvtrn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a970a5cc7730abed0f1710a8c6385f6a5fcc99/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvtrn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvtrn.c?ref=b1a970a5cc7730abed0f1710a8c6385f6a5fcc99", "patch": "@@ -15,6 +15,10 @@ VECT_VAR_DECL(expected0,uint,32,2) [] = { 0xfffffff0, 0xfffffff1 };\n VECT_VAR_DECL(expected0,poly,8,8) [] = { 0xf0, 0xf1, 0x55, 0x55,\n \t\t\t\t\t 0xf2, 0xf3, 0x55, 0x55 };\n VECT_VAR_DECL(expected0,poly,16,4) [] = { 0xfff0, 0xfff1, 0x66, 0x66 };\n+#if defined (FP16_SUPPORTED)\n+VECT_VAR_DECL (expected0, hfloat, 16, 4) [] = { 0xcc00, 0xcb80,\n+\t\t\t\t\t\t0x4b4d, 0x4b4d };\n+#endif\n VECT_VAR_DECL(expected0,hfloat,32,2) [] = { 0xc1800000, 0xc1700000 };\n VECT_VAR_DECL(expected0,int,8,16) [] = { 0xf0, 0xf1, 0x11, 0x11,\n \t\t\t\t\t 0xf2, 0xf3, 0x11, 0x11,\n@@ -36,6 +40,12 @@ VECT_VAR_DECL(expected0,poly,8,16) [] = { 0xf0, 0xf1, 0x55, 0x55,\n \t\t\t\t\t  0xf6, 0xf7, 0x55, 0x55 };\n VECT_VAR_DECL(expected0,poly,16,8) [] = { 0xfff0, 0xfff1, 0x66, 0x66,\n \t\t\t\t\t  0xfff2, 0xfff3, 0x66, 0x66 };\n+#if defined (FP16_SUPPORTED)\n+VECT_VAR_DECL (expected0, hfloat, 16, 8) [] = { 0xcc00, 0xcb80,\n+\t\t\t\t\t\t0x4b4d, 0x4b4d,\n+\t\t\t\t\t\t0xcb00, 0xca80,\n+\t\t\t\t\t\t0x4b4d, 0x4b4d };\n+#endif\n VECT_VAR_DECL(expected0,hfloat,32,4) [] = { 0xc1800000, 0xc1700000,\n \t\t\t\t\t    0x42073333, 0x42073333 };\n \n@@ -51,6 +61,10 @@ VECT_VAR_DECL(expected1,uint,32,2) [] = { 0x77, 0x77 };\n VECT_VAR_DECL(expected1,poly,8,8) [] = { 0xf4, 0xf5, 0x55, 0x55,\n \t\t\t\t\t 0xf6, 0xf7, 0x55, 0x55 };\n VECT_VAR_DECL(expected1,poly,16,4) [] = { 0xfff2, 0xfff3, 0x66, 0x66 };\n+#if defined (FP16_SUPPORTED)\n+VECT_VAR_DECL (expected1, hfloat, 16, 4) [] = { 0xcb00, 0xca80,\n+\t\t\t\t\t\t0x4b4d, 0x4b4d };\n+#endif\n VECT_VAR_DECL(expected1,hfloat,32,2) [] = { 0x42066666, 0x42066666 };\n VECT_VAR_DECL(expected1,int,8,16) [] = { 0xf8, 0xf9, 0x11, 0x11,\n \t\t\t\t\t 0xfa, 0xfb, 0x11, 0x11,\n@@ -72,6 +86,12 @@ VECT_VAR_DECL(expected1,poly,8,16) [] = { 0xf8, 0xf9, 0x55, 0x55,\n \t\t\t\t\t  0xfe, 0xff, 0x55, 0x55 };\n VECT_VAR_DECL(expected1,poly,16,8) [] = { 0xfff4, 0xfff5, 0x66, 0x66,\n \t\t\t\t\t  0xfff6, 0xfff7, 0x66, 0x66 };\n+#if defined (FP16_SUPPORTED)\n+VECT_VAR_DECL (expected1, hfloat, 16, 8) [] = { 0xca00, 0xc980,\n+\t\t\t\t\t\t0x4b4d, 0x4b4d,\n+\t\t\t\t\t\t0xc900, 0xc880,\n+\t\t\t\t\t\t0x4b4d, 0x4b4d };\n+#endif\n VECT_VAR_DECL(expected1,hfloat,32,4) [] = { 0xc1600000, 0xc1500000,\n \t\t\t\t\t    0x42073333, 0x42073333 };\n "}, {"sha": "43b49cacd6ba1944f68401705491d2f84cbd1341", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vuzp.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a970a5cc7730abed0f1710a8c6385f6a5fcc99/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvuzp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a970a5cc7730abed0f1710a8c6385f6a5fcc99/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvuzp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvuzp.c?ref=b1a970a5cc7730abed0f1710a8c6385f6a5fcc99", "patch": "@@ -19,6 +19,10 @@ VECT_VAR_DECL(expected0,poly,8,8) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n \t\t\t\t\t 0xf4, 0xf5, 0xf6, 0xf7 };\n VECT_VAR_DECL(expected0,poly,16,4) [] = { 0xfff0, 0xfff1,\n \t\t\t\t\t  0xfff2, 0xfff3 };\n+#if defined (FP16_SUPPORTED)\n+VECT_VAR_DECL (expected0, hfloat, 16, 4) [] = { 0xcc00, 0xcb80,\n+\t\t\t\t\t\t0xcb00, 0xca80 };\n+#endif\n VECT_VAR_DECL(expected0,hfloat,32,2) [] = { 0xc1800000, 0xc1700000 };\n VECT_VAR_DECL(expected0,int,8,16) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n \t\t\t\t\t 0xf4, 0xf5, 0xf6, 0xf7,\n@@ -48,6 +52,12 @@ VECT_VAR_DECL(expected0,poly,16,8) [] = { 0xfff0, 0xfff1,\n \t\t\t\t\t  0xfff2, 0xfff3,\n \t\t\t\t\t  0xfff4, 0xfff5,\n \t\t\t\t\t  0xfff6, 0xfff7 };\n+#if defined (FP16_SUPPORTED)\n+VECT_VAR_DECL (expected0, hfloat, 16, 8) [] = { 0xcc00, 0xcb80,\n+\t\t\t\t\t\t0xcb00, 0xca80,\n+\t\t\t\t\t\t0xca00, 0xc980,\n+\t\t\t\t\t\t0xc900, 0xc880 };\n+#endif\n VECT_VAR_DECL(expected0,hfloat,32,4) [] = { 0xc1800000, 0xc1700000,\n \t\t\t\t\t    0xc1600000, 0xc1500000 };\n \n@@ -63,6 +73,10 @@ VECT_VAR_DECL(expected1,uint,32,2) [] = { 0x77, 0x77 };\n VECT_VAR_DECL(expected1,poly,8,8) [] = { 0x55, 0x55, 0x55, 0x55,\n \t\t\t\t\t 0x55, 0x55, 0x55, 0x55 };\n VECT_VAR_DECL(expected1,poly,16,4) [] = { 0x66, 0x66, 0x66, 0x66 };\n+#if defined (FP16_SUPPORTED)\n+VECT_VAR_DECL (expected1, hfloat, 16, 4) [] = { 0x4b4d, 0x4b4d,\n+\t\t\t\t\t\t0x4b4d, 0x4b4d };\n+#endif\n VECT_VAR_DECL(expected1,hfloat,32,2) [] = { 0x42066666, 0x42066666 };\n VECT_VAR_DECL(expected1,int,8,16) [] = { 0x11, 0x11, 0x11, 0x11,\n \t\t\t\t\t 0x11, 0x11, 0x11, 0x11,\n@@ -84,6 +98,12 @@ VECT_VAR_DECL(expected1,poly,8,16) [] = { 0x55, 0x55, 0x55, 0x55,\n \t\t\t\t\t  0x55, 0x55, 0x55, 0x55 };\n VECT_VAR_DECL(expected1,poly,16,8) [] = { 0x66, 0x66, 0x66, 0x66,\n \t\t\t\t\t  0x66, 0x66, 0x66, 0x66 };\n+#if defined (FP16_SUPPORTED)\n+VECT_VAR_DECL (expected1, hfloat, 16, 8) [] = { 0x4b4d, 0x4b4d,\n+\t\t\t\t\t\t0x4b4d, 0x4b4d,\n+\t\t\t\t\t\t0x4b4d, 0x4b4d,\n+\t\t\t\t\t\t0x4b4d, 0x4b4d };\n+#endif\n VECT_VAR_DECL(expected1,hfloat,32,4) [] = { 0x42073333, 0x42073333,\n \t\t\t\t\t    0x42073333, 0x42073333 };\n "}, {"sha": "20f4f5dbd3d66a1da1e6aaabec73b32ed26be1c0", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vzip.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a970a5cc7730abed0f1710a8c6385f6a5fcc99/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvzip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a970a5cc7730abed0f1710a8c6385f6a5fcc99/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvzip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvzip.c?ref=b1a970a5cc7730abed0f1710a8c6385f6a5fcc99", "patch": "@@ -18,6 +18,10 @@ VECT_VAR_DECL(expected0,poly,8,8) [] = { 0xf0, 0xf4, 0x55, 0x55,\n \t\t\t\t\t 0xf1, 0xf5, 0x55, 0x55 };\n VECT_VAR_DECL(expected0,poly,16,4) [] = { 0xfff0, 0xfff2,\n \t\t\t\t\t  0x66, 0x66 };\n+#if defined (FP16_SUPPORTED)\n+VECT_VAR_DECL (expected0, hfloat, 16, 4) [] = { 0xcc00, 0xcb00,\n+\t\t\t\t\t\t0x4b4d, 0x4b4d };\n+#endif\n VECT_VAR_DECL(expected0,hfloat,32,2) [] = { 0xc1800000, 0xc1700000 };\n VECT_VAR_DECL(expected0,int,8,16) [] = { 0xf0, 0xf8, 0x11, 0x11,\n \t\t\t\t\t 0xf1, 0xf9, 0x11, 0x11,\n@@ -41,6 +45,12 @@ VECT_VAR_DECL(expected0,poly,8,16) [] = { 0xf0, 0xf8, 0x55, 0x55,\n \t\t\t\t\t  0xf3, 0xfb, 0x55, 0x55 };\n VECT_VAR_DECL(expected0,poly,16,8) [] = { 0xfff0, 0xfff4, 0x66, 0x66,\n \t\t\t\t\t  0xfff1, 0xfff5, 0x66, 0x66 };\n+#if defined (FP16_SUPPORTED)\n+VECT_VAR_DECL (expected0, hfloat, 16, 8) [] = { 0xcc00, 0xca00,\n+\t\t\t\t\t\t0x4b4d, 0x4b4d,\n+\t\t\t\t\t\t0xcb80, 0xc980,\n+\t\t\t\t\t\t0x4b4d, 0x4b4d };\n+#endif\n VECT_VAR_DECL(expected0,hfloat,32,4) [] = { 0xc1800000, 0xc1600000,\n \t\t\t\t\t    0x42073333, 0x42073333 };\n \n@@ -59,6 +69,10 @@ VECT_VAR_DECL(expected1,poly,8,8) [] = { 0xf2, 0xf6, 0x55, 0x55,\n \t\t\t\t\t 0xf3, 0xf7, 0x55, 0x55 };\n VECT_VAR_DECL(expected1,poly,16,4) [] = { 0xfff1, 0xfff3,\n \t\t\t\t\t  0x66, 0x66 };\n+#if defined (FP16_SUPPORTED)\n+VECT_VAR_DECL (expected1, hfloat, 16, 4) [] = { 0xcb80, 0xca80,\n+\t\t\t\t\t\t0x4b4d, 0x4b4d };\n+#endif\n VECT_VAR_DECL(expected1,hfloat,32,2) [] = { 0x42066666, 0x42066666 };\n VECT_VAR_DECL(expected1,int,8,16) [] = { 0xf4, 0xfc, 0x11, 0x11,\n \t\t\t\t\t 0xf5, 0xfd, 0x11, 0x11,\n@@ -82,6 +96,12 @@ VECT_VAR_DECL(expected1,poly,8,16) [] = { 0xf4, 0xfc, 0x55, 0x55,\n \t\t\t\t\t  0xf7, 0xff, 0x55, 0x55 };\n VECT_VAR_DECL(expected1,poly,16,8) [] = { 0xfff2, 0xfff6, 0x66, 0x66,\n \t\t\t\t\t  0xfff3, 0xfff7, 0x66, 0x66 };\n+#if defined (FP16_SUPPORTED)\n+VECT_VAR_DECL (expected1, hfloat, 16, 8) [] = { 0xcb00, 0xc900,\n+\t\t\t\t\t\t0x4b4d, 0x4b4d,\n+\t\t\t\t\t\t0xca80, 0xc880,\n+\t\t\t\t\t\t0x4b4d, 0x4b4d };\n+#endif\n VECT_VAR_DECL(expected1,hfloat,32,4) [] = { 0xc1700000, 0xc1500000,\n \t\t\t\t\t    0x42073333, 0x42073333 };\n "}]}