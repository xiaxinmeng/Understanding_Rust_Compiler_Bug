{"sha": "1b38d3ecfe83db1237281b2f5074289895fd5cfd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWIzOGQzZWNmZTgzZGIxMjM3MjgxYjJmNTA3NDI4OTg5NWZkNWNmZA==", "commit": {"author": {"name": "Aditya Kumar", "email": "aditya.k7@samsung.com", "date": "2015-11-04T20:59:12Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2015-11-04T20:59:12Z"}, "message": "improve debug of codegen\n\n- fix printing of ISL stmt and parameter names\n- move dot_scop* functions outside of anonymous namespace.\n\n  * graphite-isl-ast-to-gimple.c: Include tree-cfg.h.\n  (translate_isl_ast_node_user): Add more dumps: call print_loops_bb.\n  * graphite-scop-detection.c (dot_all_scops_1): Moved out of\n  anonymous namespace.\n  * graphite-sese-to-poly.c (ssa_name_version_typesize): Remove.\n  (isl_id_for_pbb): Use a buffer of size 10.\n  (isl_id_for_ssa_name): Same.\n  * sese.c (set_rename): Add more dumps.\n\nCo-Authored-By: Sebastian Pop <s.pop@samsung.com>\n\nFrom-SVN: r229782", "tree": {"sha": "0b84ef4d1580461204d86634f66c034f8f57856b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b84ef4d1580461204d86634f66c034f8f57856b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b38d3ecfe83db1237281b2f5074289895fd5cfd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b38d3ecfe83db1237281b2f5074289895fd5cfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b38d3ecfe83db1237281b2f5074289895fd5cfd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b38d3ecfe83db1237281b2f5074289895fd5cfd/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b76e99102f8a10f25b43e4dd64f2721922c272c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b76e99102f8a10f25b43e4dd64f2721922c272c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b76e99102f8a10f25b43e4dd64f2721922c272c9"}], "stats": {"total": 431, "additions": 231, "deletions": 200}, "files": [{"sha": "9e4b928bfde9f09df13c383b42adf56627aa767c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b38d3ecfe83db1237281b2f5074289895fd5cfd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b38d3ecfe83db1237281b2f5074289895fd5cfd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1b38d3ecfe83db1237281b2f5074289895fd5cfd", "patch": "@@ -1,3 +1,15 @@\n+2015-11-04  Aditya Kumar  <aditya.k7@samsung.com>\n+\t    Sebastian Pop  <s.pop@samsung.com>\n+\n+\t* graphite-isl-ast-to-gimple.c: Include tree-cfg.h.\n+\t(translate_isl_ast_node_user): Add more dumps: call print_loops_bb.\n+\t* graphite-scop-detection.c (dot_all_scops_1): Moved out of\n+\tanonymous namespace.\n+\t* graphite-sese-to-poly.c (ssa_name_version_typesize): Remove.\n+\t(isl_id_for_pbb): Use a buffer of size 10.\n+\t(isl_id_for_ssa_name): Same.\n+\t* sese.c (set_rename): Add more dumps.\n+\n 2015-11-04  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* omp-low.c (struct omp_context): Remove reduction_map field."}, {"sha": "975e1063c2df177eece290cb923b92f4332fd732", "filename": "gcc/graphite-isl-ast-to-gimple.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b38d3ecfe83db1237281b2f5074289895fd5cfd/gcc%2Fgraphite-isl-ast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b38d3ecfe83db1237281b2f5074289895fd5cfd/gcc%2Fgraphite-isl-ast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-isl-ast-to-gimple.c?ref=1b38d3ecfe83db1237281b2f5074289895fd5cfd", "patch": "@@ -62,6 +62,7 @@ extern \"C\" {\n #include \"ssa-iterators.h\"\n #include <map>\n #include \"graphite-isl-ast-to-gimple.h\"\n+#include \"tree-cfg.h\"\n \n /* This flag is set when an error occurred during the translation of\n    ISL AST to Gimple.  */\n@@ -793,10 +794,23 @@ translate_isl_ast_node_user (__isl_keep isl_ast_node *node,\n \n   build_iv_mapping (iv_map, gbb, user_expr, ip, pbb->scop->scop_info->region);\n   isl_ast_expr_free (user_expr);\n+\n+  if (dump_file)\n+    {\n+      fprintf (dump_file, \"[codegen] copying\");\n+      print_loops_bb (dump_file, GBB_BB (gbb), 0, 3);\n+    }\n+\n   next_e = copy_bb_and_scalar_dependences (GBB_BB (gbb),\n \t\t\t\t\t   pbb->scop->scop_info, next_e,\n \t\t\t\t\t   iv_map,\n \t\t\t\t\t   &graphite_regenerate_error);\n+  if (dump_file)\n+    {\n+      fprintf (dump_file, \"[codegen] to\");\n+      print_loops_bb (dump_file, next_e->src, 0, 3);\n+    }\n+\n   iv_map.release ();\n   mark_virtual_operands_for_renaming (cfun);\n   update_ssa (TODO_update_ssa);"}, {"sha": "ae8497db79da814cd6f07b102071510df44c851b", "filename": "gcc/graphite-scop-detection.c", "status": "modified", "additions": 194, "deletions": 195, "changes": 389, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b38d3ecfe83db1237281b2f5074289895fd5cfd/gcc%2Fgraphite-scop-detection.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b38d3ecfe83db1237281b2f5074289895fd5cfd/gcc%2Fgraphite-scop-detection.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-scop-detection.c?ref=1b38d3ecfe83db1237281b2f5074289895fd5cfd", "patch": "@@ -88,6 +88,200 @@ class debug_printer\n       if (dump_file && (dump_flags & TDF_DETAILS)) { args; }\t\\\n     } while (0);\n \n+/* Pretty print to FILE all the SCoPs in DOT format and mark them with\n+   different colors.  If there are not enough colors, paint the\n+   remaining SCoPs in gray.\n+\n+   Special nodes:\n+   - \"*\" after the node number denotes the entry of a SCoP,\n+   - \"#\" after the node number denotes the exit of a SCoP,\n+   - \"()\" around the node number denotes the entry or the\n+     exit nodes of the SCOP.  These are not part of SCoP.  */\n+\n+static void\n+dot_all_scops_1 (FILE *file, vec<scop_p> scops)\n+{\n+  basic_block bb;\n+  edge e;\n+  edge_iterator ei;\n+  scop_p scop;\n+  const char *color;\n+  int i;\n+\n+  /* Disable debugging while printing graph.  */\n+  int tmp_dump_flags = dump_flags;\n+  dump_flags = 0;\n+\n+  fprintf (file, \"digraph all {\\n\");\n+\n+  FOR_ALL_BB_FN (bb, cfun)\n+    {\n+      int part_of_scop = false;\n+\n+      /* Use HTML for every bb label.  So we are able to print bbs\n+\t which are part of two different SCoPs, with two different\n+\t background colors.  */\n+      fprintf (file, \"%d [label=<\\n  <TABLE BORDER=\\\"0\\\" CELLBORDER=\\\"1\\\" \",\n+\t       bb->index);\n+      fprintf (file, \"CELLSPACING=\\\"0\\\">\\n\");\n+\n+      /* Select color for SCoP.  */\n+      FOR_EACH_VEC_ELT (scops, i, scop)\n+\t{\n+\t  sese_l region = scop->scop_info->region;\n+\t  if (bb_in_sese_p (bb, region) || (region.exit->dest == bb)\n+\t      || (region.entry->dest == bb))\n+\t    {\n+\t      switch (i % 17)\n+\t\t{\n+\t\tcase 0: /* red */\n+\t\t  color = \"#e41a1c\";\n+\t\t  break;\n+\t\tcase 1: /* blue */\n+\t\t  color = \"#377eb8\";\n+\t\t  break;\n+\t\tcase 2: /* green */\n+\t\t  color = \"#4daf4a\";\n+\t\t  break;\n+\t\tcase 3: /* purple */\n+\t\t  color = \"#984ea3\";\n+\t\t  break;\n+\t\tcase 4: /* orange */\n+\t\t  color = \"#ff7f00\";\n+\t\t  break;\n+\t\tcase 5: /* yellow */\n+\t\t  color = \"#ffff33\";\n+\t\t  break;\n+\t\tcase 6: /* brown */\n+\t\t  color = \"#a65628\";\n+\t\t  break;\n+\t\tcase 7: /* rose */\n+\t\t  color = \"#f781bf\";\n+\t\t  break;\n+\t\tcase 8:\n+\t\t  color = \"#8dd3c7\";\n+\t\t  break;\n+\t\tcase 9:\n+\t\t  color = \"#ffffb3\";\n+\t\t  break;\n+\t\tcase 10:\n+\t\t  color = \"#bebada\";\n+\t\t  break;\n+\t\tcase 11:\n+\t\t  color = \"#fb8072\";\n+\t\t  break;\n+\t\tcase 12:\n+\t\t  color = \"#80b1d3\";\n+\t\t  break;\n+\t\tcase 13:\n+\t\t  color = \"#fdb462\";\n+\t\t  break;\n+\t\tcase 14:\n+\t\t  color = \"#b3de69\";\n+\t\t  break;\n+\t\tcase 15:\n+\t\t  color = \"#fccde5\";\n+\t\t  break;\n+\t\tcase 16:\n+\t\t  color = \"#bc80bd\";\n+\t\t  break;\n+\t\tdefault: /* gray */\n+\t\t  color = \"#999999\";\n+\t\t}\n+\n+\t      fprintf (file, \"    <TR><TD WIDTH=\\\"50\\\" BGCOLOR=\\\"%s\\\">\",\n+\t\t       color);\n+\n+\t      if (!bb_in_sese_p (bb, region))\n+\t\tfprintf (file, \" (\");\n+\n+\t      if (bb == region.entry->dest && bb == region.exit->dest)\n+\t\tfprintf (file, \" %d*# \", bb->index);\n+\t      else if (bb == region.entry->dest)\n+\t\tfprintf (file, \" %d* \", bb->index);\n+\t      else if (bb == region.exit->dest)\n+\t\tfprintf (file, \" %d# \", bb->index);\n+\t      else\n+\t\tfprintf (file, \" %d \", bb->index);\n+\n+\t      fprintf (file, \"{lp_%d}\", bb->loop_father->num);\n+\n+\t      if (!bb_in_sese_p (bb, region))\n+\t\tfprintf (file, \")\");\n+\n+\t      fprintf (file, \"</TD></TR>\\n\");\n+\t      part_of_scop = true;\n+\t    }\n+\t}\n+\n+\tif (!part_of_scop)\n+\t  {\n+\t    fprintf (file, \"    <TR><TD WIDTH=\\\"50\\\" BGCOLOR=\\\"#ffffff\\\">\");\n+\t    fprintf (file, \" %d {lp_%d} </TD></TR>\\n\", bb->index,\n+\t\t     bb->loop_father->num);\n+\t  }\n+\tfprintf (file, \"  </TABLE>>, shape=box, style=\\\"setlinewidth(0)\\\"]\\n\");\n+    }\n+\n+    FOR_ALL_BB_FN (bb, cfun)\n+      {\n+\tFOR_EACH_EDGE (e, ei, bb->succs)\n+\t  fprintf (file, \"%d -> %d;\\n\", bb->index, e->dest->index);\n+      }\n+\n+  fputs (\"}\\n\\n\", file);\n+\n+  /* Enable debugging again.  */\n+  dump_flags = tmp_dump_flags;\n+}\n+\n+/* Display all SCoPs using dotty.  */\n+\n+DEBUG_FUNCTION void\n+dot_all_scops (vec<scop_p> scops)\n+{\n+  /* When debugging, enable the following code.  This cannot be used\n+     in production compilers because it calls \"system\".  */\n+#if 0\n+  int x;\n+  FILE *stream = fopen (\"/tmp/allscops.dot\", \"w\");\n+  gcc_assert (stream);\n+\n+  dot_all_scops_1 (stream, scops);\n+  fclose (stream);\n+\n+  x = system (\"dotty /tmp/allscops.dot &\");\n+#else\n+  dot_all_scops_1 (stderr, scops);\n+#endif\n+}\n+\n+/* Display all SCoPs using dotty.  */\n+\n+DEBUG_FUNCTION void\n+dot_scop (scop_p scop)\n+{\n+  auto_vec<scop_p, 1> scops;\n+\n+  if (scop)\n+    scops.safe_push (scop);\n+\n+  /* When debugging, enable the following code.  This cannot be used\n+     in production compilers because it calls \"system\".  */\n+#if 0\n+  {\n+    int x;\n+    FILE *stream = fopen (\"/tmp/allscops.dot\", \"w\");\n+    gcc_assert (stream);\n+\n+    dot_all_scops_1 (stream, scops);\n+    fclose (stream);\n+    x = system (\"dotty /tmp/allscops.dot &\");\n+  }\n+#else\n+  dot_all_scops_1 (stderr, scops);\n+#endif\n+}\n \n /* Return true if BB is empty, contains only DEBUG_INSNs.  */\n \n@@ -1228,201 +1422,6 @@ scop_detection::harmful_stmt_in_bb (sese_l scop, basic_block bb) const\n   return false;\n }\n \n-/* Pretty print to FILE all the SCoPs in DOT format and mark them with\n-   different colors.  If there are not enough colors, paint the\n-   remaining SCoPs in gray.\n-\n-   Special nodes:\n-   - \"*\" after the node number denotes the entry of a SCoP,\n-   - \"#\" after the node number denotes the exit of a SCoP,\n-   - \"()\" around the node number denotes the entry or the\n-     exit nodes of the SCOP.  These are not part of SCoP.  */\n-\n-static void\n-dot_all_scops_1 (FILE *file, vec<scop_p> scops)\n-{\n-  basic_block bb;\n-  edge e;\n-  edge_iterator ei;\n-  scop_p scop;\n-  const char *color;\n-  int i;\n-\n-  /* Disable debugging while printing graph.  */\n-  int tmp_dump_flags = dump_flags;\n-  dump_flags = 0;\n-\n-  fprintf (file, \"digraph all {\\n\");\n-\n-  FOR_ALL_BB_FN (bb, cfun)\n-    {\n-      int part_of_scop = false;\n-\n-      /* Use HTML for every bb label.  So we are able to print bbs\n-\t which are part of two different SCoPs, with two different\n-\t background colors.  */\n-      fprintf (file, \"%d [label=<\\n  <TABLE BORDER=\\\"0\\\" CELLBORDER=\\\"1\\\" \",\n-\t       bb->index);\n-      fprintf (file, \"CELLSPACING=\\\"0\\\">\\n\");\n-\n-      /* Select color for SCoP.  */\n-      FOR_EACH_VEC_ELT (scops, i, scop)\n-\t{\n-\t  sese_l region = scop->scop_info->region;\n-\t  if (bb_in_sese_p (bb, region) || (region.exit->dest == bb)\n-\t      || (region.entry->dest == bb))\n-\t    {\n-\t      switch (i % 17)\n-\t\t{\n-\t\tcase 0: /* red */\n-\t\t  color = \"#e41a1c\";\n-\t\t  break;\n-\t\tcase 1: /* blue */\n-\t\t  color = \"#377eb8\";\n-\t\t  break;\n-\t\tcase 2: /* green */\n-\t\t  color = \"#4daf4a\";\n-\t\t  break;\n-\t\tcase 3: /* purple */\n-\t\t  color = \"#984ea3\";\n-\t\t  break;\n-\t\tcase 4: /* orange */\n-\t\t  color = \"#ff7f00\";\n-\t\t  break;\n-\t\tcase 5: /* yellow */\n-\t\t  color = \"#ffff33\";\n-\t\t  break;\n-\t\tcase 6: /* brown */\n-\t\t  color = \"#a65628\";\n-\t\t  break;\n-\t\tcase 7: /* rose */\n-\t\t  color = \"#f781bf\";\n-\t\t  break;\n-\t\tcase 8:\n-\t\t  color = \"#8dd3c7\";\n-\t\t  break;\n-\t\tcase 9:\n-\t\t  color = \"#ffffb3\";\n-\t\t  break;\n-\t\tcase 10:\n-\t\t  color = \"#bebada\";\n-\t\t  break;\n-\t\tcase 11:\n-\t\t  color = \"#fb8072\";\n-\t\t  break;\n-\t\tcase 12:\n-\t\t  color = \"#80b1d3\";\n-\t\t  break;\n-\t\tcase 13:\n-\t\t  color = \"#fdb462\";\n-\t\t  break;\n-\t\tcase 14:\n-\t\t  color = \"#b3de69\";\n-\t\t  break;\n-\t\tcase 15:\n-\t\t  color = \"#fccde5\";\n-\t\t  break;\n-\t\tcase 16:\n-\t\t  color = \"#bc80bd\";\n-\t\t  break;\n-\t\tdefault: /* gray */\n-\t\t  color = \"#999999\";\n-\t\t}\n-\n-\t      fprintf (file, \"    <TR><TD WIDTH=\\\"50\\\" BGCOLOR=\\\"%s\\\">\",\n-\t\t       color);\n-\n-\t      if (!bb_in_sese_p (bb, region))\n-\t\tfprintf (file, \" (\");\n-\n-\t      if (bb == region.entry->dest && bb == region.exit->dest)\n-\t\tfprintf (file, \" %d*# \", bb->index);\n-\t      else if (bb == region.entry->dest)\n-\t\tfprintf (file, \" %d* \", bb->index);\n-\t      else if (bb == region.exit->dest)\n-\t\tfprintf (file, \" %d# \", bb->index);\n-\t      else\n-\t\tfprintf (file, \" %d \", bb->index);\n-\n-\t      fprintf (file, \"{lp_%d}\", bb->loop_father->num);\n-\n-\t      if (!bb_in_sese_p (bb, region))\n-\t\tfprintf (file, \")\");\n-\n-\t      fprintf (file, \"</TD></TR>\\n\");\n-\t      part_of_scop = true;\n-\t    }\n-\t}\n-\n-\tif (!part_of_scop)\n-\t  {\n-\t    fprintf (file, \"    <TR><TD WIDTH=\\\"50\\\" BGCOLOR=\\\"#ffffff\\\">\");\n-\t    fprintf (file, \" %d {lp_%d} </TD></TR>\\n\", bb->index,\n-\t\t     bb->loop_father->num);\n-\t  }\n-\tfprintf (file, \"  </TABLE>>, shape=box, style=\\\"setlinewidth(0)\\\"]\\n\");\n-    }\n-\n-    FOR_ALL_BB_FN (bb, cfun)\n-      {\n-\tFOR_EACH_EDGE (e, ei, bb->succs)\n-\t  fprintf (file, \"%d -> %d;\\n\", bb->index, e->dest->index);\n-      }\n-\n-  fputs (\"}\\n\\n\", file);\n-\n-  /* Enable debugging again.  */\n-  dump_flags = tmp_dump_flags;\n-}\n-\n-/* Display all SCoPs using dotty.  */\n-\n-DEBUG_FUNCTION void\n-dot_all_scops (vec<scop_p> scops)\n-{\n-  /* When debugging, enable the following code.  This cannot be used\n-     in production compilers because it calls \"system\".  */\n-#if 0\n-  int x;\n-  FILE *stream = fopen (\"/tmp/allscops.dot\", \"w\");\n-  gcc_assert (stream);\n-\n-  dot_all_scops_1 (stream, scops);\n-  fclose (stream);\n-\n-  x = system (\"dotty /tmp/allscops.dot &\");\n-#else\n-  dot_all_scops_1 (stderr, scops);\n-#endif\n-}\n-\n-/* Display all SCoPs using dotty.  */\n-\n-DEBUG_FUNCTION void\n-dot_scop (scop_p scop)\n-{\n-  auto_vec<scop_p, 1> scops;\n-\n-  if (scop)\n-    scops.safe_push (scop);\n-\n-  /* When debugging, enable the following code.  This cannot be used\n-     in production compilers because it calls \"system\".  */\n-#if 0\n-  {\n-    int x;\n-    FILE *stream = fopen (\"/tmp/allscops.dot\", \"w\");\n-    gcc_assert (stream);\n-\n-    dot_all_scops_1 (stream, scops);\n-    fclose (stream);\n-    x = system (\"dotty /tmp/allscops.dot &\");\n-  }\n-#else\n-  dot_all_scops_1 (stderr, scops);\n-#endif\n-}\n-\n /* Return true when the body of LOOP has statements that can be represented as a\n    valid scop.  */\n "}, {"sha": "fa33c50a5334e1948a4afadbdfb9c30ea2b1874f", "filename": "gcc/graphite-sese-to-poly.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b38d3ecfe83db1237281b2f5074289895fd5cfd/gcc%2Fgraphite-sese-to-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b38d3ecfe83db1237281b2f5074289895fd5cfd/gcc%2Fgraphite-sese-to-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-sese-to-poly.c?ref=1b38d3ecfe83db1237281b2f5074289895fd5cfd", "patch": "@@ -67,9 +67,6 @@ extern \"C\" {\n #include \"tree-ssa-propagate.h\"\n #include \"graphite-sese-to-poly.h\"\n \n-\n-static const unsigned ssa_name_version_typesize =  sizeof(unsigned);\n-\n /* Assigns to RES the value of the INTEGER_CST T.  */\n \n static inline void\n@@ -201,7 +198,7 @@ reduction_phi_p (sese_l &region, gphi_iterator *psi)\n static isl_id *\n isl_id_for_pbb (scop_p s, poly_bb_p pbb)\n {\n-  char name[ssa_name_version_typesize];\n+  char name[10];\n   snprintf (name, sizeof (name), \"S_%d\", pbb_index (pbb));\n   return isl_id_alloc (s->isl_context, name, pbb);\n }\n@@ -401,7 +398,7 @@ isl_id_for_ssa_name (scop_p s, tree e)\n     id = isl_id_alloc (s->isl_context, name, e);\n   else\n     {\n-      char name1[ssa_name_version_typesize];\n+      char name1[10];\n       snprintf (name1, sizeof (name1), \"P_%d\", SSA_NAME_VERSION (e));\n       id = isl_id_alloc (s->isl_context, name1, e);\n     }"}, {"sha": "c176b8ab98a3aad8eeb742f78fafe56e49022eff", "filename": "gcc/sese.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b38d3ecfe83db1237281b2f5074289895fd5cfd/gcc%2Fsese.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b38d3ecfe83db1237281b2f5074289895fd5cfd/gcc%2Fsese.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsese.c?ref=1b38d3ecfe83db1237281b2f5074289895fd5cfd", "patch": "@@ -373,6 +373,15 @@ static void\n set_rename (rename_map_type *rename_map, tree old_name, tree expr,\n \t    sese_info_p region)\n {\n+  if (dump_file)\n+    {\n+      fprintf (dump_file, \"[codegen] setting rename: old_name = \");\n+      print_generic_expr (dump_file, old_name, 0);\n+      fprintf (dump_file, \", new_name = \");\n+      print_generic_expr (dump_file, expr, 0);\n+      fprintf (dump_file, \"\\n\");\n+    }\n+\n   if (old_name == expr)\n     return;\n "}]}