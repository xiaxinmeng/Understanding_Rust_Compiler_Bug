{"sha": "49dcecd3b6b540e3d8f03623463f2236496c5bcf", "node_id": "C_kwDOANBUbNoAKDQ5ZGNlY2QzYjZiNTQwZTNkOGYwMzYyMzQ2M2YyMjM2NDk2YzViY2Y", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-02-26T12:19:49Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-02-26T12:23:12Z"}, "message": "frust-cfg: Use proper parser to parse key-value pairs\n\nIn order to conform to the rust reference, we must make sure that when\nparsing -frust-cfg key-value pairs, we actually parse a valid key and\nvalue. The key must be a valid identifier, while the value must be a\nvalid identifier surrounded by double quotes", "tree": {"sha": "d55eb22aaf013524df6a01446e366c76347d2aac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d55eb22aaf013524df6a01446e366c76347d2aac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49dcecd3b6b540e3d8f03623463f2236496c5bcf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49dcecd3b6b540e3d8f03623463f2236496c5bcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49dcecd3b6b540e3d8f03623463f2236496c5bcf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49dcecd3b6b540e3d8f03623463f2236496c5bcf/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ede68b7ba64ace5fbcb900b37c7e8572a2ddefb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ede68b7ba64ace5fbcb900b37c7e8572a2ddefb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ede68b7ba64ace5fbcb900b37c7e8572a2ddefb5"}], "stats": {"total": 105, "additions": 70, "deletions": 35}, "files": [{"sha": "f98419b983b40dae55952b8cd716e29f4baf8493", "filename": "gcc/rust/parse/rust-cfg-parser.cc", "status": "modified", "additions": 69, "deletions": 33, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49dcecd3b6b540e3d8f03623463f2236496c5bcf/gcc%2Frust%2Fparse%2Frust-cfg-parser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49dcecd3b6b540e3d8f03623463f2236496c5bcf/gcc%2Frust%2Fparse%2Frust-cfg-parser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-cfg-parser.cc?ref=49dcecd3b6b540e3d8f03623463f2236496c5bcf", "patch": "@@ -1,45 +1,55 @@\n #include \"rust-cfg-parser.h\"\n+#include \"rust-lex.h\"\n+#include \"rust-parse.h\"\n+#include \"rust-session-manager.h\"\n #include \"selftest.h\"\n \n namespace Rust {\n bool\n-parse_cfg_option (const std::string &input, std::string &key,\n-\t\t  std::string &value)\n+parse_cfg_option (std::string &input, std::string &key, std::string &value)\n {\n   key.clear ();\n   value.clear ();\n \n-  auto equal = input.find ('=');\n+  auto lexer = Lexer::lex_string (input);\n+  auto parser = Parser<Lexer> (std::move (lexer));\n \n-  // If there is no equal sign, it means there is no value. Clean up the key\n-  // and return\n-  if (equal == std::string::npos)\n+  auto token = parser.peek_current_token ();\n+  if (token->get_id () != IDENTIFIER)\n     {\n-      key = input;\n-\n-      // FIXME: Make sure key is a proper identifier\n-\n-      return true;\n+      return false;\n     }\n \n-  key = input.substr (0, equal);\n-\n-  auto remaining_input = input.substr (equal + 1);\n-  if (remaining_input[0] != '\"' || remaining_input.back () != '\"')\n-    return false;\n-\n-  // Remove the quotes around the value, by advancing one character\n-  value = remaining_input.substr (1);\n-  // And trimming the rightmost character. This is fine since we've already\n-  // checked that both the first and last characters were quotes.\n-  value.resize (value.size () - 1);\n+  key = token->get_str ();\n \n-  // FIXME: We need to sanitize here and make sure that both key and value\n-  // are proper identifiers\n+  rust_assert (parser.skip_token (IDENTIFIER));\n+  token = parser.peek_current_token ();\n \n-  return true;\n+  switch (token->get_id ())\n+    {\n+    case END_OF_FILE:\n+      // we're done parsing, we had a valid key, return happily\n+      return true;\n+    case EQUAL:\n+      // We have an equal sign: Skip the token and parse an identifier\n+      {\n+\trust_assert (parser.skip_token (EQUAL));\n+\n+\tauto value_expr = parser.parse_literal_expr ();\n+\t// We had an equal sign but no value, error out\n+\tif (!value_expr)\n+\t  return false;\n+\n+\tif (value_expr->get_lit_type () != AST::Literal::LitType::STRING)\n+\t  return false;\n+\n+\tvalue = value_expr->get_literal ().as_string ();\n+\treturn true;\n+      }\n+    default:\n+      return false;\n+    }\n }\n-\n } // namespace Rust\n \n #if CHECKING_P\n@@ -52,23 +62,49 @@ rust_cfg_parser_test (void)\n   std::string key;\n   std::string value;\n \n-  ASSERT_TRUE (Rust::parse_cfg_option (\"key-no-value\", key, value));\n-  ASSERT_EQ (key, \"key-no-value\");\n+  auto input = std::string (\"key_no_value\");\n+\n+  ASSERT_TRUE (Rust::parse_cfg_option (input, key, value));\n+  ASSERT_EQ (key, \"key_no_value\");\n   ASSERT_TRUE (value.empty ());\n \n-  ASSERT_TRUE (Rust::parse_cfg_option (\"k=\\\"v\\\"\", key, value));\n+  input = std::string (\"k=\\\"v\\\"\");\n+\n+  ASSERT_TRUE (Rust::parse_cfg_option (input, key, value));\n   ASSERT_EQ (key, \"k\");\n   ASSERT_EQ (value, \"v\");\n \n   // values should be between double quotes\n-  ASSERT_FALSE (Rust::parse_cfg_option (\"k=v\", key, value));\n+  input = std::string (\"k=v\");\n+  ASSERT_FALSE (Rust::parse_cfg_option (input, key, value));\n \n   // No value is an error if there is an equal sign\n-  ASSERT_FALSE (Rust::parse_cfg_option (\"k=\", key, value));\n+  input = std::string (\"k=\");\n+  ASSERT_FALSE (Rust::parse_cfg_option (input, key, value));\n \n   // No key is an error\n-  ASSERT_FALSE (Rust::parse_cfg_option (\"=\", key, value));\n-  ASSERT_FALSE (Rust::parse_cfg_option (\"=value\", key, value));\n+  input = std::string (\"=\");\n+  ASSERT_FALSE (Rust::parse_cfg_option (input, key, value));\n+\n+  input = std::string (\"=value\");\n+  ASSERT_FALSE (Rust::parse_cfg_option (input, key, value));\n+\n+  // values that are not string literals are an error\n+  input = std::string (\"key=b\\\"a\\\"\");\n+  ASSERT_FALSE (Rust::parse_cfg_option (input, key, value));\n+\n+  input = std::string (\"key='v'\");\n+  ASSERT_FALSE (Rust::parse_cfg_option (input, key, value));\n+\n+  input = std::string (\"key=155\");\n+  ASSERT_FALSE (Rust::parse_cfg_option (input, key, value));\n+\n+  input = std::string (\"key=3.14\");\n+  ASSERT_FALSE (Rust::parse_cfg_option (input, key, value));\n+\n+  // kebab case is not valid for an identifier\n+  input = std::string (\"key-no-value\");\n+  ASSERT_FALSE (Rust::parse_cfg_option (input, key, value));\n }\n } // namespace selftest\n "}, {"sha": "bf4ed4d496e962324d0397c2625cd816334d6082", "filename": "gcc/rust/parse/rust-cfg-parser.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49dcecd3b6b540e3d8f03623463f2236496c5bcf/gcc%2Frust%2Fparse%2Frust-cfg-parser.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49dcecd3b6b540e3d8f03623463f2236496c5bcf/gcc%2Frust%2Fparse%2Frust-cfg-parser.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-cfg-parser.h?ref=49dcecd3b6b540e3d8f03623463f2236496c5bcf", "patch": "@@ -41,8 +41,7 @@ namespace Rust {\n  * @return false if the given input was invalid, true otherwise\n  */\n bool\n-parse_cfg_option (const std::string &input, std::string &key,\n-\t\t  std::string &value);\n+parse_cfg_option (std::string &input, std::string &key, std::string &value);\n } // namespace Rust\n \n #if CHECKING_P"}]}