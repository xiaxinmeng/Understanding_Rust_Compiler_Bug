{"sha": "55cd237908dcfa48ef12b4f7cd9e41f154139bd2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTVjZDIzNzkwOGRjZmE0OGVmMTJiNGY3Y2Q5ZTQxZjE1NDEzOWJkMg==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2019-05-15T15:18:41Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2019-05-15T15:18:41Z"}, "message": "i386: Emulate MMX maskmovq with SSE2 maskmovdqu\n\nEmulate MMX maskmovq with SSE2 maskmovdqu for TARGET_MMX_WITH_SSE by\nzero-extending source and mask operands to 128 bits.  Handle unmapped\nbits 64:127 at memory address by adjusting source and mask operands\ntogether with memory address.\n\n\tPR target/89021\n\t* config/i386/xmmintrin.h: Emulate MMX maskmovq with SSE2\n\tmaskmovdqu for __MMX_WITH_SSE__.\n\nFrom-SVN: r271234", "tree": {"sha": "1be858e7acd2a2b26e04013d48dd45250a720fa7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1be858e7acd2a2b26e04013d48dd45250a720fa7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55cd237908dcfa48ef12b4f7cd9e41f154139bd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55cd237908dcfa48ef12b4f7cd9e41f154139bd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55cd237908dcfa48ef12b4f7cd9e41f154139bd2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55cd237908dcfa48ef12b4f7cd9e41f154139bd2/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9377b54a62a4b6424194c3f9d755eb0f84fce726", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9377b54a62a4b6424194c3f9d755eb0f84fce726", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9377b54a62a4b6424194c3f9d755eb0f84fce726"}], "stats": {"total": 67, "additions": 67, "deletions": 0}, "files": [{"sha": "8f3e5f88abc4a091fcea67a11a09fcc1fc8d2fea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55cd237908dcfa48ef12b4f7cd9e41f154139bd2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55cd237908dcfa48ef12b4f7cd9e41f154139bd2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=55cd237908dcfa48ef12b4f7cd9e41f154139bd2", "patch": "@@ -1,3 +1,9 @@\n+2019-05-15  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/89021\n+\t* config/i386/xmmintrin.h: Emulate MMX maskmovq with SSE2\n+\tmaskmovdqu for __MMX_WITH_SSE__.\n+\n 2019-05-15  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/89021"}, {"sha": "a915f6c87d70bb615dc9b749e561da3dd1682593", "filename": "gcc/config/i386/xmmintrin.h", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55cd237908dcfa48ef12b4f7cd9e41f154139bd2/gcc%2Fconfig%2Fi386%2Fxmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55cd237908dcfa48ef12b4f7cd9e41f154139bd2/gcc%2Fconfig%2Fi386%2Fxmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxmmintrin.h?ref=55cd237908dcfa48ef12b4f7cd9e41f154139bd2", "patch": "@@ -1165,7 +1165,68 @@ _m_pshufw (__m64 __A, int const __N)\n extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_maskmove_si64 (__m64 __A, __m64 __N, char *__P)\n {\n+#ifdef __MMX_WITH_SSE__\n+  /* Emulate MMX maskmovq with SSE2 maskmovdqu and handle unmapped bits\n+     64:127 at address __P.  */\n+  typedef long long __v2di __attribute__ ((__vector_size__ (16)));\n+  typedef char __v16qi __attribute__ ((__vector_size__ (16)));\n+  /* Zero-extend __A and __N to 128 bits.  */\n+  __v2di __A128 = __extension__ (__v2di) { ((__v1di) __A)[0], 0 };\n+  __v2di __N128 = __extension__ (__v2di) { ((__v1di) __N)[0], 0 };\n+\n+  /* Check the alignment of __P.  */\n+  __SIZE_TYPE__ offset = ((__SIZE_TYPE__) __P) & 0xf;\n+  if (offset)\n+    {\n+      /* If the misalignment of __P > 8, subtract __P by 8 bytes.\n+\t Otherwise, subtract __P by the misalignment.  */\n+      if (offset > 8)\n+\toffset = 8;\n+      __P = (char *) (((__SIZE_TYPE__) __P) - offset);\n+\n+      /* Shift __A128 and __N128 to the left by the adjustment.  */\n+      switch (offset)\n+\t{\n+\tcase 1:\n+\t  __A128 = __builtin_ia32_pslldqi128 (__A128, 8);\n+\t  __N128 = __builtin_ia32_pslldqi128 (__N128, 8);\n+\t  break;\n+\tcase 2:\n+\t  __A128 = __builtin_ia32_pslldqi128 (__A128, 2 * 8);\n+\t  __N128 = __builtin_ia32_pslldqi128 (__N128, 2 * 8);\n+\t  break;\n+\tcase 3:\n+\t  __A128 = __builtin_ia32_pslldqi128 (__A128, 3 * 8);\n+\t  __N128 = __builtin_ia32_pslldqi128 (__N128, 3 * 8);\n+\t  break;\n+\tcase 4:\n+\t  __A128 = __builtin_ia32_pslldqi128 (__A128, 4 * 8);\n+\t  __N128 = __builtin_ia32_pslldqi128 (__N128, 4 * 8);\n+\t  break;\n+\tcase 5:\n+\t  __A128 = __builtin_ia32_pslldqi128 (__A128, 5 * 8);\n+\t  __N128 = __builtin_ia32_pslldqi128 (__N128, 5 * 8);\n+\t  break;\n+\tcase 6:\n+\t  __A128 = __builtin_ia32_pslldqi128 (__A128, 6 * 8);\n+\t  __N128 = __builtin_ia32_pslldqi128 (__N128, 6 * 8);\n+\t  break;\n+\tcase 7:\n+\t  __A128 = __builtin_ia32_pslldqi128 (__A128, 7 * 8);\n+\t  __N128 = __builtin_ia32_pslldqi128 (__N128, 7 * 8);\n+\t  break;\n+\tcase 8:\n+\t  __A128 = __builtin_ia32_pslldqi128 (__A128, 8 * 8);\n+\t  __N128 = __builtin_ia32_pslldqi128 (__N128, 8 * 8);\n+\t  break;\n+\tdefault:\n+\t  break;\n+\t}\n+    }\n+  __builtin_ia32_maskmovdqu ((__v16qi)__A128, (__v16qi)__N128, __P);\n+#else\n   __builtin_ia32_maskmovq ((__v8qi)__A, (__v8qi)__N, __P);\n+#endif\n }\n \n extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))"}]}