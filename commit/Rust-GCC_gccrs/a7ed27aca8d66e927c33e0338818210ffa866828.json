{"sha": "a7ed27aca8d66e927c33e0338818210ffa866828", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTdlZDI3YWNhOGQ2NmU5MjdjMzNlMDMzODgxODIxMGZmYTg2NjgyOA==", "commit": {"author": {"name": "Li Feng", "email": "nemokingdom@gmail.com", "date": "2009-11-25T05:24:43Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2009-11-25T05:24:43Z"}, "message": "graphite-clast-to-gimple.c (get_stmtfor_depth): Removed.\n\n2009-10-20  Li Feng  <nemokingdom@gmail.com>\n\n\t* graphite-clast-to-gimple.c (get_stmtfor_depth): Removed.\n\t(translate_clast): Pass an extra parameter LEVEL.\n\tCall get_scattering_level.\n\t* graphite-clast-to-gimple.h (get_scattering_level): New.\n\nFrom-SVN: r154625", "tree": {"sha": "e63e0093ba560368a701634c0bcca4eef54db483", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e63e0093ba560368a701634c0bcca4eef54db483"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7ed27aca8d66e927c33e0338818210ffa866828", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7ed27aca8d66e927c33e0338818210ffa866828", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7ed27aca8d66e927c33e0338818210ffa866828", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7ed27aca8d66e927c33e0338818210ffa866828/comments", "author": {"login": "LiFeng", "id": 117740, "node_id": "MDQ6VXNlcjExNzc0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/117740?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LiFeng", "html_url": "https://github.com/LiFeng", "followers_url": "https://api.github.com/users/LiFeng/followers", "following_url": "https://api.github.com/users/LiFeng/following{/other_user}", "gists_url": "https://api.github.com/users/LiFeng/gists{/gist_id}", "starred_url": "https://api.github.com/users/LiFeng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LiFeng/subscriptions", "organizations_url": "https://api.github.com/users/LiFeng/orgs", "repos_url": "https://api.github.com/users/LiFeng/repos", "events_url": "https://api.github.com/users/LiFeng/events{/privacy}", "received_events_url": "https://api.github.com/users/LiFeng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e6ef139122f2f2209b7cde869b36de3f68dc82f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e6ef139122f2f2209b7cde869b36de3f68dc82f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e6ef139122f2f2209b7cde869b36de3f68dc82f"}], "stats": {"total": 62, "additions": 30, "deletions": 32}, "files": [{"sha": "733d35b94b6135bf58f99c9ce1c821a3ae5a1e88", "filename": "gcc/ChangeLog.graphite", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7ed27aca8d66e927c33e0338818210ffa866828/gcc%2FChangeLog.graphite", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7ed27aca8d66e927c33e0338818210ffa866828/gcc%2FChangeLog.graphite", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.graphite?ref=a7ed27aca8d66e927c33e0338818210ffa866828", "patch": "@@ -1,3 +1,10 @@\n+2009-10-20  Li Feng  <nemokingdom@gmail.com>\n+\n+\t* graphite-clast-to-gimple.c (get_stmtfor_depth): Removed.\n+\t(translate_clast): Pass an extra parameter LEVEL.\n+\tCall get_scattering_level.\n+\t* graphite-clast-to-gimple.h (get_scattering_level): New.\n+\n 2009-10-22  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* cfgloop.c (alloc_loop): Initialize loop->single_iv."}, {"sha": "05d3e2f61a34cfd706b9a4620279ef26212ea3c6", "filename": "gcc/graphite-clast-to-gimple.c", "status": "modified", "additions": 12, "deletions": 32, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7ed27aca8d66e927c33e0338818210ffa866828/gcc%2Fgraphite-clast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7ed27aca8d66e927c33e0338818210ffa866828/gcc%2Fgraphite-clast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-clast-to-gimple.c?ref=a7ed27aca8d66e927c33e0338818210ffa866828", "patch": "@@ -558,27 +558,6 @@ mark_bb_with_pbb (poly_bb_p pbb, basic_block bb, htab_t bb_pbb_mapping)\n     *x = new_bb_pbb_def (bb, pbb);\n }\n \n-/* Returns the scattering dimension for STMTFOR.\n-\n-   FIXME: This is a hackish solution to locate the scattering\n-   dimension in newly created loops. Here the hackish solush\n-   assume that the stmt_for->iterator is always something like:\n-   scat_1 , scat_3 etc., where after \"scat_\" is loop level in\n-   scattering dimension.\n-*/\n-\n-static int get_stmtfor_depth (struct clast_for *stmtfor)\n-{\n-  const char * iterator = stmtfor->iterator;\n-  const char * depth;\n-\n-  depth = strchr (iterator, '_');\n-  if (!strncmp (iterator, \"scat_\", 5))\n-    return atoi (depth+1);\n-\n-  gcc_unreachable();\n-}\n-\n /* Translates a CLAST statement STMT to GCC representation in the\n    context of a SESE.\n \n@@ -593,14 +572,15 @@ static edge\n translate_clast (sese region, struct loop *context_loop,\n \t\t struct clast_stmt *stmt, edge next_e,\n \t\t htab_t rename_map, VEC (tree, heap) **newivs,\n-\t\t htab_t newivs_index, htab_t bb_pbb_mapping)\n+\t\t htab_t newivs_index, htab_t bb_pbb_mapping, int level)\n {\n   if (!stmt)\n     return next_e;\n \n   if (CLAST_STMT_IS_A (stmt, stmt_root))\n     return translate_clast (region, context_loop, stmt->next, next_e,\n-\t\t\t    rename_map, newivs, newivs_index, bb_pbb_mapping);\n+\t\t\t    rename_map, newivs, newivs_index,\n+\t\t\t    bb_pbb_mapping, level);\n \n   if (CLAST_STMT_IS_A (stmt, stmt_user))\n     {\n@@ -624,7 +604,7 @@ translate_clast (sese region, struct loop *context_loop,\n       graphite_verify ();\n       return translate_clast (region, context_loop, stmt->next, next_e,\n \t\t\t      rename_map, newivs, newivs_index,\n-\t\t\t      bb_pbb_mapping);\n+\t\t\t      bb_pbb_mapping, level);\n     }\n \n   if (CLAST_STMT_IS_A (stmt, stmt_for))\n@@ -639,7 +619,7 @@ translate_clast (sese region, struct loop *context_loop,\n \n       loop->aux = XNEW (int);\n       /* Pass scattering level information of the new loop by LOOP->AUX.  */\n-      *((int *)(loop->aux)) = get_stmtfor_depth (stmtfor);\n+      *((int *)(loop->aux)) = get_scattering_level (level);\n \n       /* Create a basic block for loop close phi nodes.  */\n       last_e = single_succ_edge (split_edge (last_e));\n@@ -648,7 +628,7 @@ translate_clast (sese region, struct loop *context_loop,\n       next_e = translate_clast\n \t(region, loop, ((struct clast_for *) stmt)->body,\n \t single_succ_edge (loop->header), rename_map, newivs,\n-\t newivs_index, bb_pbb_mapping);\n+\t newivs_index, bb_pbb_mapping, level + 1);\n       redirect_edge_succ_nodup (next_e, after);\n       set_immediate_dominator (CDI_DOMINATORS, next_e->dest, next_e->src);\n \n@@ -660,7 +640,7 @@ translate_clast (sese region, struct loop *context_loop,\n       graphite_verify ();\n       return translate_clast (region, context_loop, stmt->next, last_e,\n \t\t\t      rename_map, newivs, newivs_index,\n-\t\t\t      bb_pbb_mapping);\n+\t\t\t      bb_pbb_mapping, level);\n     }\n \n   if (CLAST_STMT_IS_A (stmt, stmt_guard))\n@@ -679,7 +659,7 @@ translate_clast (sese region, struct loop *context_loop,\n       next_e = translate_clast (region, context_loop,\n \t\t\t\t((struct clast_guard *) stmt)->then,\n \t\t\t\ttrue_e, rename_map, newivs, newivs_index,\n-\t\t\t\tbb_pbb_mapping);\n+\t\t\t\tbb_pbb_mapping, level);\n       insert_guard_phis (last_e->src, exit_true_e, exit_false_e,\n \t\t\t before_guard, rename_map);\n \n@@ -689,20 +669,20 @@ translate_clast (sese region, struct loop *context_loop,\n \n       return translate_clast (region, context_loop, stmt->next, last_e,\n \t\t\t      rename_map, newivs, newivs_index,\n-\t\t\t      bb_pbb_mapping);\n+\t\t\t      bb_pbb_mapping, level);\n     }\n \n   if (CLAST_STMT_IS_A (stmt, stmt_block))\n     {\n       next_e = translate_clast (region, context_loop,\n \t\t\t\t((struct clast_block *) stmt)->body,\n \t\t\t\tnext_e, rename_map, newivs, newivs_index,\n-\t\t\t\tbb_pbb_mapping);\n+\t\t\t\tbb_pbb_mapping, level);\n       recompute_all_dominators ();\n       graphite_verify ();\n       return translate_clast (region, context_loop, stmt->next, next_e,\n \t\t\t      rename_map, newivs, newivs_index,\n-\t\t\t      bb_pbb_mapping);\n+\t\t\t      bb_pbb_mapping, level);\n     }\n \n   gcc_unreachable ();\n@@ -1157,7 +1137,7 @@ gloog (scop_p scop, htab_t bb_pbb_mapping)\n   new_scop_exit_edge = translate_clast (region, context_loop, pc.stmt,\n \t\t\t\t\tif_region->true_region->entry,\n \t\t\t\t\trename_map, &newivs, newivs_index,\n-\t\t\t\t\tbb_pbb_mapping);\n+\t\t\t\t\tbb_pbb_mapping, 1);\n   sese_reset_aux_in_loops (region);\n   graphite_verify ();\n   sese_adjust_liveout_phis (region, rename_map,"}, {"sha": "cbbf875f1427f7d5b4f2b8d73d090d146b8654fa", "filename": "gcc/graphite-clast-to-gimple.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7ed27aca8d66e927c33e0338818210ffa866828/gcc%2Fgraphite-clast-to-gimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7ed27aca8d66e927c33e0338818210ffa866828/gcc%2Fgraphite-clast-to-gimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-clast-to-gimple.h?ref=a7ed27aca8d66e927c33e0338818210ffa866828", "patch": "@@ -61,5 +61,16 @@ eq_bb_pbb_map (const void *bb_pbb1, const void *bb_pbb2)\n   return (bp1->bb->index == bp2->bb->index);\n }\n \n+/* Returns the scattering dimension for STMTFOR.\n+\n+   The relationship between dimension in scattering matrix\n+   and the DEPTH of the loop is:\n+   DIMENSION = 2*DEPTH - 1\n+*/\n+\n+static inline int get_scattering_level (int depth)\n+{\n+  return 2 * depth - 1;\n+}\n \n #endif"}]}