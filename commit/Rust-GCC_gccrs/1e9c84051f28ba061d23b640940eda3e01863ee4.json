{"sha": "1e9c84051f28ba061d23b640940eda3e01863ee4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWU5Yzg0MDUxZjI4YmEwNjFkMjNiNjQwOTQwZWRhM2UwMTg2M2VlNA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2004-08-13T16:43:04Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2004-08-13T16:43:04Z"}, "message": "genattrtab.c (insn_ent): Replace insn_code...\n\n\t* genattrtab.c (insn_ent): Replace insn_code, insn_index and lineno\n\tfields with a pointer to the instruction definition.\n\t(get_attr_value, fill_attr, make_length_attrs, remove_insn_ent)\n\t(insert_insn_ent, simplify_test_exp, optimize_attrs, write_attr_get)\n\t(write_attr_case, write_const_num_delay_slots): Update accordingly.\n\t(write_attr_case, write_const_num_delay_slots): Write the name of\n\tan insn next to its case statement.\n\t* genoutput.c (data): Add a filename field.\n\t(gen_insn, gen_peephole, gen_expand, gen_split): Set it.\n\t(output_insn_data): Print the location of each insn definition.\n\t* genrecog.c (write_action): Print the name of an insn above\n\tthe statement that returns its code.\n\nFrom-SVN: r85947", "tree": {"sha": "bb94b947de49dc4151bc99a73621177f77fa655e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb94b947de49dc4151bc99a73621177f77fa655e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e9c84051f28ba061d23b640940eda3e01863ee4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e9c84051f28ba061d23b640940eda3e01863ee4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e9c84051f28ba061d23b640940eda3e01863ee4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e9c84051f28ba061d23b640940eda3e01863ee4/comments", "author": null, "committer": null, "parents": [{"sha": "1e5f1716392c7915c55d95329ae59d1acce8592a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e5f1716392c7915c55d95329ae59d1acce8592a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e5f1716392c7915c55d95329ae59d1acce8592a"}], "stats": {"total": 73, "additions": 47, "deletions": 26}, "files": [{"sha": "ec30892263c563fe7a1d82f8195c145336dc15b5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e9c84051f28ba061d23b640940eda3e01863ee4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e9c84051f28ba061d23b640940eda3e01863ee4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1e9c84051f28ba061d23b640940eda3e01863ee4", "patch": "@@ -1,3 +1,18 @@\n+2004-08-13  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* genattrtab.c (insn_ent): Replace insn_code, insn_index and lineno\n+\tfields with a pointer to the instruction definition.\n+\t(get_attr_value, fill_attr, make_length_attrs, remove_insn_ent)\n+\t(insert_insn_ent, simplify_test_exp, optimize_attrs, write_attr_get)\n+\t(write_attr_case, write_const_num_delay_slots): Update accordingly.\n+\t(write_attr_case, write_const_num_delay_slots): Write the name of\n+\tan insn next to its case statement.\n+\t* genoutput.c (data): Add a filename field.\n+\t(gen_insn, gen_peephole, gen_expand, gen_split): Set it.\n+\t(output_insn_data): Print the location of each insn definition.\n+\t* genrecog.c (write_action): Print the name of an insn above\n+\tthe statement that returns its code.\n+\n 2004-08-12  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* config/darwin-c.c (find_subframework_file): Fix spelling of cannot."}, {"sha": "f8f3277d76f9092a68cd597544d71bb92b325f30", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 23, "deletions": 25, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e9c84051f28ba061d23b640940eda3e01863ee4/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e9c84051f28ba061d23b640940eda3e01863ee4/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=1e9c84051f28ba061d23b640940eda3e01863ee4", "patch": "@@ -160,9 +160,7 @@ struct insn_def\n struct insn_ent\n {\n   struct insn_ent *next;\t/* Next in chain.  */\n-  int insn_code;\t\t/* Instruction number.  */\n-  int insn_index;\t\t/* Index of definition in file */\n-  int lineno;\t\t\t/* Line number.  */\n+  struct insn_def *def;\t\t/* Instruction definition.  */\n };\n \n /* Each value of an attribute (either constant or computed) is assigned a\n@@ -1377,7 +1375,7 @@ get_attr_value (rtx value, struct attr_desc *attr, int insn_code)\n   for (av = attr->first_value; av; av = av->next)\n     if (rtx_equal_p (value, av->value)\n \t&& (num_alt == 0 || av->first_insn == NULL\n-\t    || insn_alternatives[av->first_insn->insn_code]))\n+\t    || insn_alternatives[av->first_insn->def->insn_code]))\n       return av;\n \n   av = oballoc (sizeof (struct attr_value));\n@@ -1524,8 +1522,7 @@ fill_attr (struct attr_desc *attr)\n \tav = get_attr_value (value, attr, id->insn_code);\n \n       ie = oballoc (sizeof (struct insn_ent));\n-      ie->insn_code = id->insn_code;\n-      ie->insn_index = id->insn_code;\n+      ie->def = id;\n       insert_insn_ent (av, ie);\n     }\n }\n@@ -1651,10 +1648,9 @@ make_length_attrs (void)\n \t    new_av = get_attr_value (substitute_address (av->value,\n \t\t\t\t\t\t\t no_address_fn[i],\n \t\t\t\t\t\t\t address_fn[i]),\n-\t\t\t\t     new_attr, ie->insn_code);\n+\t\t\t\t     new_attr, ie->def->insn_code);\n \t    new_ie = oballoc (sizeof (struct insn_ent));\n-\t    new_ie->insn_code = ie->insn_code;\n-\t    new_ie->insn_index = ie->insn_index;\n+\t    new_ie->def = ie->def;\n \t    insert_insn_ent (new_av, new_ie);\n \t  }\n     }\n@@ -1854,7 +1850,7 @@ remove_insn_ent (struct attr_value *av, struct insn_ent *ie)\n     }\n \n   av->num_insns--;\n-  if (ie->insn_code == -1)\n+  if (ie->def->insn_code == -1)\n     av->has_asm_insn = 0;\n \n   num_insn_ents--;\n@@ -1868,7 +1864,7 @@ insert_insn_ent (struct attr_value *av, struct insn_ent *ie)\n   ie->next = av->first_insn;\n   av->first_insn = ie;\n   av->num_insns++;\n-  if (ie->insn_code == -1)\n+  if (ie->def->insn_code == -1)\n     av->has_asm_insn = 1;\n \n   num_insn_ents++;\n@@ -2826,7 +2822,7 @@ simplify_test_exp (rtx exp, int insn_code, int insn_index)\n \t  && (attr = find_attr (&XSTR (exp, 0), 0)) != NULL)\n \tfor (av = attr->first_value; av; av = av->next)\n \t  for (ie = av->first_insn; ie; ie = ie->next)\n-\t    if (ie->insn_code == insn_code)\n+\t    if (ie->def->insn_code == insn_code)\n \t      {\n \t\trtx x;\n \t\tx = evaluate_eq_attr (exp, av->value, insn_code, insn_index);\n@@ -2896,8 +2892,8 @@ optimize_attrs (void)\n \t    iv->attr = attr;\n \t    iv->av = av;\n \t    iv->ie = ie;\n-\t    iv->next = insn_code_values[ie->insn_code];\n-\t    insn_code_values[ie->insn_code] = iv;\n+\t    iv->next = insn_code_values[ie->def->insn_code];\n+\t    insn_code_values[ie->def->insn_code] = iv;\n \t    iv++;\n \t  }\n \n@@ -2927,8 +2923,8 @@ optimize_attrs (void)\n \t  newexp = av->value;\n \t  while (GET_CODE (newexp) == COND)\n \t    {\n-\t      rtx newexp2 = simplify_cond (newexp, ie->insn_code,\n-\t\t\t\t\t   ie->insn_index);\n+\t      rtx newexp2 = simplify_cond (newexp, ie->def->insn_code,\n+\t\t\t\t\t   ie->def->insn_index);\n \t      if (newexp2 == newexp)\n \t\tbreak;\n \t      newexp = newexp2;\n@@ -2939,7 +2935,7 @@ optimize_attrs (void)\n \t    {\n \t      newexp = attr_copy_rtx (newexp);\n \t      remove_insn_ent (av, ie);\n-\t      av = get_attr_value (newexp, attr, ie->insn_code);\n+\t      av = get_attr_value (newexp, attr, ie->def->insn_code);\n \t      iv->av = av;\n \t      insert_insn_ent (av, ie);\n \t    }\n@@ -3739,8 +3735,8 @@ write_attr_get (struct attr_desc *attr)\n       for (av = attr->first_value; av; av = av->next)\n \tif (av->num_insns != 0)\n \t  write_attr_set (attr, 2, av->value, \"return\", \";\",\n-\t\t\t  true_rtx, av->first_insn->insn_code,\n-\t\t\t  av->first_insn->insn_index);\n+\t\t\t  true_rtx, av->first_insn->def->insn_code,\n+\t\t\t  av->first_insn->def->insn_index);\n \n       printf (\"}\\n\\n\");\n       return;\n@@ -3905,10 +3901,11 @@ write_attr_case (struct attr_desc *attr, struct attr_value *av,\n   if (write_case_lines)\n     {\n       for (ie = av->first_insn; ie; ie = ie->next)\n-\tif (ie->insn_code != -1)\n+\tif (ie->def->insn_code != -1)\n \t  {\n \t    write_indent (indent);\n-\t    printf (\"case %d:\\n\", ie->insn_code);\n+\t    printf (\"case %d:  /* %s */\\n\",\n+\t\t    ie->def->insn_code, XSTR (ie->def->def, 0));\n \t  }\n     }\n   else\n@@ -3933,8 +3930,8 @@ write_attr_case (struct attr_desc *attr, struct attr_value *av,\n     }\n \n   write_attr_set (attr, indent + 2, av->value, prefix, suffix,\n-\t\t  known_true, av->first_insn->insn_code,\n-\t\t  av->first_insn->insn_index);\n+\t\t  known_true, av->first_insn->def->insn_code,\n+\t\t  av->first_insn->def->insn_index);\n \n   if (strncmp (prefix, \"return\", 6))\n     {\n@@ -4384,8 +4381,9 @@ write_const_num_delay_slots (void)\n \t  if (length_used)\n \t    {\n \t      for (ie = av->first_insn; ie; ie = ie->next)\n-\t\tif (ie->insn_code != -1)\n-\t\t  printf (\"    case %d:\\n\", ie->insn_code);\n+\t\tif (ie->def->insn_code != -1)\n+\t\t  printf (\"    case %d:  /* %s */\\n\",\n+\t\t\t  ie->def->insn_code, XSTR (ie->def->def, 0));\n \t      printf (\"      return 0;\\n\");\n \t    }\n \t}"}, {"sha": "e21fc7fd86ddc86798a28725128623a523595dbc", "filename": "gcc/genoutput.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e9c84051f28ba061d23b640940eda3e01863ee4/gcc%2Fgenoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e9c84051f28ba061d23b640940eda3e01863ee4/gcc%2Fgenoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenoutput.c?ref=1e9c84051f28ba061d23b640940eda3e01863ee4", "patch": "@@ -160,6 +160,7 @@ struct data\n   const char *template;\n   int code_number;\n   int index_number;\n+  const char *filename;\n   int lineno;\n   int n_operands;\t\t/* Number of operands this insn recognizes */\n   int n_dups;\t\t\t/* Number times match_dup appears in pattern */\n@@ -291,6 +292,7 @@ output_insn_data (void)\n \n   for (d = idata; d; d = d->next)\n     {\n+      printf (\"  /* %s:%d */\\n\", d->filename, d->lineno);\n       printf (\"  {\\n\");\n \n       if (d->name)\n@@ -823,6 +825,7 @@ gen_insn (rtx insn, int lineno)\n \n   d->code_number = next_code_number;\n   d->index_number = next_index_number;\n+  d->filename = read_rtx_filename;\n   d->lineno = lineno;\n   if (XSTR (insn, 0)[0])\n     d->name = XSTR (insn, 0);\n@@ -864,6 +867,7 @@ gen_peephole (rtx peep, int lineno)\n \n   d->code_number = next_code_number;\n   d->index_number = next_index_number;\n+  d->filename = read_rtx_filename;\n   d->lineno = lineno;\n   d->name = 0;\n \n@@ -902,6 +906,7 @@ gen_expand (rtx insn, int lineno)\n \n   d->code_number = next_code_number;\n   d->index_number = next_index_number;\n+  d->filename = read_rtx_filename;\n   d->lineno = lineno;\n   if (XSTR (insn, 0)[0])\n     d->name = XSTR (insn, 0);\n@@ -945,6 +950,7 @@ gen_split (rtx split, int lineno)\n \n   d->code_number = next_code_number;\n   d->index_number = next_index_number;\n+  d->filename = read_rtx_filename;\n   d->lineno = lineno;\n   d->name = 0;\n "}, {"sha": "097faefe8c25cb17452e4eb4a160e6dc67d59b83", "filename": "gcc/genrecog.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e9c84051f28ba061d23b640940eda3e01863ee4/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e9c84051f28ba061d23b640940eda3e01863ee4/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=1e9c84051f28ba061d23b640940eda3e01863ee4", "patch": "@@ -2168,7 +2168,9 @@ write_action (struct decision *p, struct decision_test *test,\n \t  if (test->u.insn.num_clobbers_to_add != 0)\n \t    printf (\"%s*pnum_clobbers = %d;\\n\",\n \t\t    indent, test->u.insn.num_clobbers_to_add);\n-\t  printf (\"%sreturn %d;\\n\", indent, test->u.insn.code_number);\n+\t  printf (\"%sreturn %d;  /* %s */\\n\", indent,\n+\t\t  test->u.insn.code_number,\n+\t\t  insn_name_ptr[test->u.insn.code_number]);\n \t  break;\n \n \tcase SPLIT:"}]}