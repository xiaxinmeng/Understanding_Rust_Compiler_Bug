{"sha": "ff7d6bfed2e7bc08fba1cc456daf464e6176dd46", "node_id": "C_kwDOANBUbNoAKGZmN2Q2YmZlZDJlN2JjMDhmYmExY2M0NTZkYWY0NjRlNjE3NmRkNDY", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-08-24T15:21:38Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-08-25T15:16:13Z"}, "message": "builtins: Add add_overflow builtin and refactor class", "tree": {"sha": "8053114eea428cf750a78943b4ff5c120cec7a93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8053114eea428cf750a78943b4ff5c120cec7a93"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff7d6bfed2e7bc08fba1cc456daf464e6176dd46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff7d6bfed2e7bc08fba1cc456daf464e6176dd46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff7d6bfed2e7bc08fba1cc456daf464e6176dd46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff7d6bfed2e7bc08fba1cc456daf464e6176dd46/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e79563a65e78ddb6b2ef10df7e1d4e3441aaff2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e79563a65e78ddb6b2ef10df7e1d4e3441aaff2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e79563a65e78ddb6b2ef10df7e1d4e3441aaff2"}], "stats": {"total": 51, "additions": 36, "deletions": 15}, "files": [{"sha": "5cd840107231c654412142a99cca88e7e8ceb71e", "filename": "gcc/rust/backend/rust-builtins.h", "status": "modified", "additions": 36, "deletions": 15, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7d6bfed2e7bc08fba1cc456daf464e6176dd46/gcc%2Frust%2Fbackend%2Frust-builtins.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7d6bfed2e7bc08fba1cc456daf464e6176dd46/gcc%2Frust%2Fbackend%2Frust-builtins.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-builtins.h?ref=ff7d6bfed2e7bc08fba1cc456daf464e6176dd46", "patch": "@@ -18,8 +18,9 @@\n #define RUST_BUILTINS_H\n \n #include \"rust-system.h\"\n-#include \"tree.h\"\n+#include \"rust-tree.h\"\n #include \"langhooks.h\"\n+#include \"tree.h\"\n \n namespace Rust {\n namespace Compile {\n@@ -99,16 +100,34 @@ class BuiltinsContext\n \n   BuiltinsContext () { setup (); }\n \n-  void setup ()\n+  void setup_overflow_fns ()\n+  {\n+    tree overflow_type\n+      = build_varargs_function_type_list (boolean_type_node, NULL_TREE);\n+\n+    define_builtin (\"add_overflow\", BUILT_IN_ADD_OVERFLOW,\n+\t\t    \"__builtin_add_overflow\", \"add_overflow\", overflow_type, 0);\n+    define_builtin (\"sub_overflow\", BUILT_IN_SUB_OVERFLOW,\n+\t\t    \"__builtin_sub_overflow\", \"sub_overflow\", overflow_type, 0);\n+    define_builtin (\"mul_overflow\", BUILT_IN_MUL_OVERFLOW,\n+\t\t    \"__builtin_mul_overflow\", \"mul_overflow\", overflow_type, 0);\n+  }\n+\n+  void setup_math_fns ()\n   {\n     tree math_function_type_f32\n       = build_function_type_list (float_type_node, float_type_node, NULL_TREE);\n \n     define_builtin (\"sinf32\", BUILT_IN_SINF, \"__builtin_sinf\", \"sinf\",\n \t\t    math_function_type_f32, builtin_const);\n-\n     define_builtin (\"sqrtf32\", BUILT_IN_SQRTF, \"__builtin_sqrtf\", \"sqrtf\",\n \t\t    math_function_type_f32, builtin_const);\n+  }\n+\n+  void setup ()\n+  {\n+    setup_math_fns ();\n+    setup_overflow_fns ();\n \n     define_builtin (\"unreachable\", BUILT_IN_UNREACHABLE,\n \t\t    \"__builtin_unreachable\", NULL,\n@@ -132,6 +151,16 @@ class BuiltinsContext\n       0);\n   }\n \n+  static void handle_flags (tree decl, int flags)\n+  {\n+    if (flags & builtin_const)\n+      TREE_READONLY (decl) = 1;\n+    if (flags & builtin_noreturn)\n+      TREE_READONLY (decl) = 1;\n+    if (flags & builtin_novops)\n+      DECL_IS_NOVOPS (decl) = 1;\n+  }\n+\n   // Define a builtin function.  BCODE is the builtin function code\n   // defined by builtins.def.  NAME is the name of the builtin function.\n   // LIBNAME is the name of the corresponding library function, and is\n@@ -144,24 +173,16 @@ class BuiltinsContext\n   {\n     tree decl = add_builtin_function (name, fntype, bcode, BUILT_IN_NORMAL,\n \t\t\t\t      libname, NULL_TREE);\n-    if ((flags & builtin_const) != 0)\n-      TREE_READONLY (decl) = 1;\n-    if ((flags & builtin_noreturn) != 0)\n-      TREE_THIS_VOLATILE (decl) = 1;\n-    if ((flags & builtin_novops) != 0)\n-      DECL_IS_NOVOPS (decl) = 1;\n+    handle_flags (decl, flags);\n     set_builtin_decl (bcode, decl, true);\n+\n     this->builtin_functions_[name] = decl;\n     if (libname != NULL)\n       {\n \tdecl = add_builtin_function (libname, fntype, bcode, BUILT_IN_NORMAL,\n \t\t\t\t     NULL, NULL_TREE);\n-\tif ((flags & builtin_const) != 0)\n-\t  TREE_READONLY (decl) = 1;\n-\tif ((flags & builtin_noreturn) != 0)\n-\t  TREE_THIS_VOLATILE (decl) = 1;\n-\tif ((flags & builtin_novops) != 0)\n-\t  DECL_IS_NOVOPS (decl) = 1;\n+\thandle_flags (decl, flags);\n+\n \tthis->builtin_functions_[libname] = decl;\n       }\n "}]}