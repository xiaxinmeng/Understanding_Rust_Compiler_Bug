{"sha": "630036c6a3f9d08629ee070b58890837d6c5c476", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjMwMDM2YzZhM2Y5ZDA4NjI5ZWUwNzBiNTg4OTA4MzdkNmM1YzQ3Ng==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2001-11-13T16:45:18Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2001-11-13T16:45:18Z"}, "message": "emit-rtl.c (adjust_address_1): Add ADJUST argument.\n\n\t* emit-rtl.c (adjust_address_1): Add ADJUST argument.\n\t(adjust_automodify_address_1): New.\n\t* expr.h (adjust_address, adjust_address_nv): Adjust.\n\t(adjust_automodify_address, adjust_automodify_address_nv): Define.\n\t(adjust_address_1): Update prototype.\n\t(adjust_automodify_address_1): Add prototype.\n\t* expr.c (move_by_pieces_1): Use adjust_automodify_address.\n\t(store_by_pieces_2): Likewise.\n\n\t* gcc.c-torture/execute/20011113-1.c: New test.\n\nFrom-SVN: r46988", "tree": {"sha": "d66cd731e9536db2b2295ea3338e767b3dac7a71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d66cd731e9536db2b2295ea3338e767b3dac7a71"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/630036c6a3f9d08629ee070b58890837d6c5c476", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/630036c6a3f9d08629ee070b58890837d6c5c476", "html_url": "https://github.com/Rust-GCC/gccrs/commit/630036c6a3f9d08629ee070b58890837d6c5c476", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/630036c6a3f9d08629ee070b58890837d6c5c476/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1d974ca723f9be828c76c61098fe7754d2f65dca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d974ca723f9be828c76c61098fe7754d2f65dca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d974ca723f9be828c76c61098fe7754d2f65dca"}], "stats": {"total": 127, "additions": 105, "deletions": 22}, "files": [{"sha": "e3c672f2266cc00bec73c5c22aa1dc58e454973a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630036c6a3f9d08629ee070b58890837d6c5c476/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630036c6a3f9d08629ee070b58890837d6c5c476/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=630036c6a3f9d08629ee070b58890837d6c5c476", "patch": "@@ -1,3 +1,14 @@\n+2001-11-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* emit-rtl.c (adjust_address_1): Add ADJUST argument.\n+\t(adjust_automodify_address_1): New.\n+\t* expr.h (adjust_address, adjust_address_nv): Adjust.\n+\t(adjust_automodify_address, adjust_automodify_address_nv): Define.\n+\t(adjust_address_1): Update prototype.\n+\t(adjust_automodify_address_1): Add prototype.\n+\t* expr.c (move_by_pieces_1): Use adjust_automodify_address.\n+\t(store_by_pieces_2): Likewise.\n+\n Tue Nov 13 05:45:40 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* Makefile.in (explow.o): Now depends on ggc.h."}, {"sha": "3729233ff99742bebe129fe9e23634ff4ed8e9ee", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 29, "deletions": 10, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630036c6a3f9d08629ee070b58890837d6c5c476/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630036c6a3f9d08629ee070b58890837d6c5c476/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=630036c6a3f9d08629ee070b58890837d6c5c476", "patch": "@@ -1870,32 +1870,34 @@ change_address (memref, mode, addr)\n \n /* Return a memory reference like MEMREF, but with its mode changed\n    to MODE and its address offset by OFFSET bytes.  If VALIDATE is\n-   nonzero, the memory address is forced to be valid.  */\n+   nonzero, the memory address is forced to be valid.\n+   If ADJUST is zero, OFFSET is only used to update MEM_ATTRS\n+   and caller is responsible for adjusting MEMREF base register.  */\n \n rtx\n-adjust_address_1 (memref, mode, offset, validate)\n+adjust_address_1 (memref, mode, offset, validate, adjust)\n      rtx memref;\n      enum machine_mode mode;\n      HOST_WIDE_INT offset;\n-     int validate;\n+     int validate, adjust;\n {\n   rtx addr = XEXP (memref, 0);\n   rtx new;\n   rtx memoffset = MEM_OFFSET (memref);\n   rtx size = 0;\n   unsigned int memalign = MEM_ALIGN (memref);\n \n+  if (adjust == 0 || offset == 0)\n+    /* ??? Prefer to create garbage instead of creating shared rtl.  */\n+    addr = copy_rtx (addr);\n   /* If MEMREF is a LO_SUM and the offset is within the alignment of the\n      object, we can merge it into the LO_SUM.  */\n-  if (GET_MODE (memref) != BLKmode && GET_CODE (addr) == LO_SUM\n-      && offset >= 0\n-      && (unsigned HOST_WIDE_INT) offset\n-         < GET_MODE_ALIGNMENT (GET_MODE (memref)) / BITS_PER_UNIT)\n+  else if (GET_MODE (memref) != BLKmode && GET_CODE (addr) == LO_SUM\n+\t   && offset >= 0\n+\t   && (unsigned HOST_WIDE_INT) offset\n+\t      < GET_MODE_ALIGNMENT (GET_MODE (memref)) / BITS_PER_UNIT)\n     addr = gen_rtx_LO_SUM (Pmode, XEXP (addr, 0),\n \t\t\t   plus_constant (XEXP (addr, 1), offset));\n-  else if (offset == 0)\n-    /* ??? Prefer to create garbage instead of creating shared rtl.  */\n-    addr = copy_rtx (addr);\n   else\n     addr = plus_constant (addr, offset);\n \n@@ -1926,6 +1928,23 @@ adjust_address_1 (memref, mode, offset, validate)\n   return new;\n }\n \n+/* Return a memory reference like MEMREF, but with its mode changed\n+   to MODE and its address changed to ADDR, which is assumed to be\n+   MEMREF offseted by OFFSET bytes.  If VALIDATE is\n+   nonzero, the memory address is forced to be valid.  */\n+\n+rtx\n+adjust_automodify_address_1 (memref, mode, addr, offset, validate)\n+     rtx memref;\n+     enum machine_mode mode;\n+     rtx addr;\n+     HOST_WIDE_INT offset;\n+     int validate;\n+{\n+  memref = change_address_1 (memref, VOIDmode, addr, validate);\n+  return adjust_address_1 (memref, mode, offset, validate, 0);\n+}\n+\n /* Return a memory reference like MEMREF, but whose address is changed by\n    adding OFFSET, an RTX, to it.  POW2 is the highest power of two factor\n    known to be in OFFSET (possibly 1).  */"}, {"sha": "d48227a0bb282712e2a8ec2bcd38b8bf4a2b781e", "filename": "gcc/expr.c", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630036c6a3f9d08629ee070b58890837d6c5c476/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630036c6a3f9d08629ee070b58890837d6c5c476/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=630036c6a3f9d08629ee070b58890837d6c5c476", "patch": "@@ -1577,19 +1577,15 @@ move_by_pieces_1 (genfun, mode, data)\n       if (data->to)\n \t{\n \t  if (data->autinc_to)\n-\t    {\n-\t      to1 = replace_equiv_address (data->to, data->to_addr);\n-\t      to1 = adjust_address (to1, mode, 0);\n-\t    }\n+\t    to1 = adjust_automodify_address (data->to, mode, data->to_addr,\n+\t\t\t\t\t     data->offset);\n \t  else\n \t    to1 = adjust_address (data->to, mode, data->offset);\n \t}\n \n       if (data->autinc_from)\n-\t{\n-\t  from1 = replace_equiv_address (data->from, data->from_addr);\n-\t  from1 = adjust_address (from1, mode, 0);\n-\t}\n+\tfrom1 = adjust_automodify_address (data->from, mode, data->from_addr,\n+\t\t\t\t\t   data->offset);\n       else\n \tfrom1 = adjust_address (data->from, mode, data->offset);\n \n@@ -2525,10 +2521,8 @@ store_by_pieces_2 (genfun, mode, data)\n \tdata->offset -= size;\n \n       if (data->autinc_to)\n-\t{\n-\t  to1 = replace_equiv_address (data->to, data->to_addr);\n-\t  to1 = adjust_address (to1, mode, 0);\n-\t}\n+\tto1 = adjust_automodify_address (data->to, mode, data->to_addr,\n+\t\t\t\t\t data->offset);\n       else\n \tto1 = adjust_address (data->to, mode, data->offset);\n "}, {"sha": "f52f1b8c4395ba1511e215c505c3f3f54ab2332c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630036c6a3f9d08629ee070b58890837d6c5c476/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630036c6a3f9d08629ee070b58890837d6c5c476/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=630036c6a3f9d08629ee070b58890837d6c5c476", "patch": "@@ -1,3 +1,7 @@\n+2001-11-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.c-torture/execute/20011113-1.c: New test.\n+\n 2001-11-09  Geoffrey Keating  <geoffk@redhat.com>\n \n \t* gcc.c-torture/execute/20011109-2.c: New test."}, {"sha": "a2eb86b6df6dcd2eca954a0598fd3cf0f13e4016", "filename": "gcc/testsuite/gcc.c-torture/execute/20011113-1.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630036c6a3f9d08629ee070b58890837d6c5c476/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20011113-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630036c6a3f9d08629ee070b58890837d6c5c476/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20011113-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20011113-1.c?ref=630036c6a3f9d08629ee070b58890837d6c5c476", "patch": "@@ -0,0 +1,55 @@\n+typedef __SIZE_TYPE__ size_t;\n+extern void *memcpy (void *__restrict, const void *__restrict, size_t);\n+extern void abort (void);\n+extern void exit (int);\n+\n+typedef struct t\n+{\n+  unsigned a : 16;\n+  unsigned b : 8;\n+  unsigned c : 8;\n+  long d[4];\n+} *T;\n+\n+typedef struct {\n+  long r[3];\n+} U;\n+\n+T bar (U, unsigned int);\n+\n+T foo (T x)\n+{\n+  U d, u;\n+\n+  memcpy (&u, &x->d[1], sizeof u);\n+  d = u;\n+  return bar (d, x->b);\n+}\n+\n+T baz (T x)\n+{\n+  U d, u;\n+\n+  d.r[0] = 0x123456789;\n+  d.r[1] = 0xfedcba987;\n+  d.r[2] = 0xabcdef123;\n+  memcpy (&u, &x->d[1], sizeof u);\n+  d = u;\n+  return bar (d, x->b);\n+}\n+\n+T bar (U d, unsigned int m)\n+{\n+  if (d.r[0] != 21 || d.r[1] != 22 || d.r[2] != 23)\n+    abort ();\n+  return 0;\n+}\n+\n+struct t t = { 26, 0, 0, { 0, 21, 22, 23 }};\n+\n+int main (void)\n+{\n+  baz (&t);\n+  foo (&t);\n+  exit (0);\n+}"}]}