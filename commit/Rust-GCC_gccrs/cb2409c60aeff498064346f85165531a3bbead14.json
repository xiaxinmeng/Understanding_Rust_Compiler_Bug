{"sha": "cb2409c60aeff498064346f85165531a3bbead14", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2IyNDA5YzYwYWVmZjQ5ODA2NDM0NmY4NTE2NTUzMWEzYmJlYWQxNA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-03-05T01:19:31Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-03-05T01:19:31Z"}, "message": "PR c++/90938 - Initializing array with {1} works but not {0}\n\ngcc/cp/ChangeLog:\n\n\tPR c++/90938\n\t* tree.c (type_initializer_zero_p): Fail for structs initialized\n\twith non-structs.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/90938\n\t* g++.dg/init/array55.C: New test.\n\t* g++.dg/init/array56.C: New test.\n\t* g++.dg/cpp2a/nontype-class33.C: New test.", "tree": {"sha": "d4339dd2f882ebf991d3047bd9549683abc233c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4339dd2f882ebf991d3047bd9549683abc233c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb2409c60aeff498064346f85165531a3bbead14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb2409c60aeff498064346f85165531a3bbead14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb2409c60aeff498064346f85165531a3bbead14", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb2409c60aeff498064346f85165531a3bbead14/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "547cdf8510a0096d5d6e4d54f0e3fe51d7b70e13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/547cdf8510a0096d5d6e4d54f0e3fe51d7b70e13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/547cdf8510a0096d5d6e4d54f0e3fe51d7b70e13"}], "stats": {"total": 193, "additions": 192, "deletions": 1}, "files": [{"sha": "f01563e96fce6833e22d9fde35d319e679cde6cd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb2409c60aeff498064346f85165531a3bbead14/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb2409c60aeff498064346f85165531a3bbead14/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=cb2409c60aeff498064346f85165531a3bbead14", "patch": "@@ -1,3 +1,9 @@\n+2020-03-04  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/90938\n+\t* tree.c (type_initializer_zero_p): Fail for structs initialized\n+\twith non-structs.\n+\n 2020-03-04  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/90432"}, {"sha": "a412345e3bfcef3d6bff62421b086f7e5b67b233", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb2409c60aeff498064346f85165531a3bbead14/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb2409c60aeff498064346f85165531a3bbead14/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=cb2409c60aeff498064346f85165531a3bbead14", "patch": "@@ -5727,7 +5727,15 @@ type_initializer_zero_p (tree type, tree init)\n     return TREE_CODE (init) != STRING_CST && initializer_zerop (init);\n \n   if (TREE_CODE (init) != CONSTRUCTOR)\n-    return initializer_zerop (init);\n+    {\n+      /* A class can only be initialized by a non-class type if it has\n+\t a ctor that converts from that type.  Such classes are excluded\n+\t since their semantics are unknown.  */\n+      if (RECORD_OR_UNION_TYPE_P (type)\n+\t  && !RECORD_OR_UNION_TYPE_P (TREE_TYPE (init)))\n+\treturn false;\n+      return initializer_zerop (init);\n+    }\n \n   if (TREE_CODE (type) == ARRAY_TYPE)\n     {"}, {"sha": "95c8710800b0950dff1da328a0b4e924111f4c06", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb2409c60aeff498064346f85165531a3bbead14/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb2409c60aeff498064346f85165531a3bbead14/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cb2409c60aeff498064346f85165531a3bbead14", "patch": "@@ -1,3 +1,10 @@\n+2020-03-04  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/90938\n+\t* g++.dg/init/array55.C: New test.\n+\t* g++.dg/init/array56.C: New test.\n+\t* g++.dg/cpp2a/nontype-class33.C: New test.\n+\n 2020-03-04  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/93986"}, {"sha": "1b9dfb88918bd401a374ec8a6d18ca07aad7cd35", "filename": "gcc/testsuite/g++.dg/cpp2a/nontype-class33.C", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb2409c60aeff498064346f85165531a3bbead14/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class33.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb2409c60aeff498064346f85165531a3bbead14/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class33.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class33.C?ref=cb2409c60aeff498064346f85165531a3bbead14", "patch": "@@ -0,0 +1,36 @@\n+// PR c++/90938 - Initializing array with {1} works, but not {0}\n+// { dg-do compile { target c++2a } }\n+// { dg-options \"-Wall\" }\n+\n+struct A { int i; };\n+struct B { A a[2]; };\n+\n+static const constexpr A a0 = { 0 };\n+static const constexpr A a_ = { };\n+\n+template <B> struct X { };\n+\n+typedef X<B{ }>             XB;\n+typedef X<B{{A{ }}}>        XB;\n+typedef X<B{{A{ 0 }}}>      XB;\n+typedef X<B{{a_}}>          XB;\n+typedef X<B{{a0}}>          XB;\n+typedef X<B{{a_, A{ }}}>    XB;\n+typedef X<B{{a_, A{ 0 }}}>  XB;\n+typedef X<B{{a_, a_}}>      XB;\n+typedef X<B{{a_, a0}}>      XB;\n+\n+\n+struct C { constexpr C () = default; };\n+struct D { C c[2]; };\n+\n+static const constexpr C c_ = { };\n+\n+template <D> struct Y { };\n+\n+typedef Y<D{ }>             YD;\n+typedef Y<D{C { }}>         YD;\n+typedef Y<D{{c_}}>          YD;\n+typedef Y<D{C{ }, C{ }}>    YD;\n+typedef Y<D{C{ }, c_}>      YD;\n+typedef Y<D{{c_, c_}}>      YD;"}, {"sha": "70fb183b897f67e9f3da8ca3e55832aeab5f323f", "filename": "gcc/testsuite/g++.dg/init/array55.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb2409c60aeff498064346f85165531a3bbead14/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray55.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb2409c60aeff498064346f85165531a3bbead14/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray55.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray55.C?ref=cb2409c60aeff498064346f85165531a3bbead14", "patch": "@@ -0,0 +1,27 @@\n+/* PR c++/90938 - Initializing array with {1} works, but not {0}\n+   { dg-do compile { target c++11 } } */\n+\n+struct A\n+{\n+  A () = delete;\n+  A (int) = delete;\n+};\n+\n+A a_[] = { 0 };            // { dg-error \"use of deleted function 'A::A\\\\\\(int\\\\\\)'\" }\n+\n+A a1[1] = { 0 };           // { dg-error \"use of deleted function 'A::A\\\\\\(int\\\\\\)'\" }\n+\n+\n+struct B\n+{\n+  B () = delete;\n+  B (int) = delete;\n+  B (long);\n+};\n+\n+B b_[] = { 0 };            // { dg-error \"use of deleted function 'B::B\\\\\\(int\\\\\\)'\" }\n+\n+B b1[1] = { 0 };           // { dg-error \"use of deleted function 'B::B\\\\\\(int\\\\\\)'\" }\n+\n+B b2[] = { 0L };\n+B b3[1] = { 0L };"}, {"sha": "63e16663ec1483f4a7d96cc0102bf12cb2f07767", "filename": "gcc/testsuite/g++.dg/init/array56.C", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb2409c60aeff498064346f85165531a3bbead14/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray56.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb2409c60aeff498064346f85165531a3bbead14/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray56.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray56.C?ref=cb2409c60aeff498064346f85165531a3bbead14", "patch": "@@ -0,0 +1,107 @@\n+/* PR c++/90938 - Initializing array with {1} works, but not {0}\n+   { dg-do compile { target c++11 } }\n+   { dg-options \"-O -Wall -fdump-tree-optimized\" } */\n+\n+#define assert(e)\t\t\t\t\t\t\\\n+  ((e) ? (void)0\t\t\t\t\t\t\\\n+   : (__builtin_printf (\"assertion failed on line %i: %s\\n\",\t\\\n+\t\t\t__LINE__, #e),\t\t\t\t\\\n+      __builtin_abort ()))\n+\n+namespace A {\n+\n+struct X\n+{\n+  X () = default;\n+  X (int n) : n (n + 1) { }\n+  int n;\n+};\n+\n+static_assert (__is_trivial (X), \"X is trivial\");\n+\n+static void test ()\n+{\n+  {\n+    X x[] { 0 };\n+    assert (1 == x->n);\n+  }\n+\n+  {\n+    X x[1] { 0 };\n+    assert (1 == x->n);                     // fails\n+  }\n+\n+  {\n+    X x[2] { 0 };\n+    assert (1 == x[0].n && 0 == x[1].n);    // fails\n+  }\n+\n+  {\n+    X x[] { 1, 0 };\n+    assert (2 == x[0].n && 1 == x[1].n);    // passes\n+  }\n+\n+  {\n+    X x[2] { 1, 0 };\n+    assert (2 == x[0].n && 1 == x[1].n);    // fails\n+  }\n+}\n+\n+}\n+\n+namespace B {\n+\n+struct X\n+{\n+  X () = default;\n+  X (int *p) : p (p ? p : new int (1)) { }\n+  int *p;\n+};\n+\n+static_assert (__is_trivial (X), \"X is trivial\");\n+\n+static void test ()\n+{\n+  X x[1] { nullptr };\n+  assert (*x->p == 1);   // fails\n+\n+  X y[1] { 0 };\n+  assert (*y->p == 1);   // fails\n+}\n+\n+}\n+\n+namespace C {\n+\n+static const char *vector_swizzle (int vecsize, int index)\n+{\n+  static const char *swizzle[4][4] =\n+    {\n+     { \".x\", \".y\", \".z\", \".w\" },\n+     { \".xy\", \".yz\", \".zw\", nullptr },\n+     { \".xyz\", \".yzw\", nullptr, nullptr },\n+     { \"\", nullptr, nullptr, nullptr },\n+    };\n+\n+  assert (vecsize >= 1 && vecsize <= 4);\n+  assert (index >= 0 && index < 4);\n+  assert (swizzle[vecsize - 1][index]);\n+\n+  return swizzle[vecsize - 1][index];\n+}\n+\n+static void test ()\n+{\n+  assert (!*vector_swizzle(4, 0));\n+}\n+\n+}\n+\n+int main ()\n+{\n+  A::test ();\n+  B::test ();\n+  C::test ();\n+}\n+\n+// { dg-final { scan-tree-dump-not \"abort\" \"optimized\" } }"}]}