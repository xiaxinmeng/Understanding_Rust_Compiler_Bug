{"sha": "7a5911d36f6a8f9e17320201d23505a05258badb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2E1OTExZDM2ZjZhOGY5ZTE3MzIwMjAxZDIzNTA1YTA1MjU4YmFkYg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-09-29T18:59:52Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-09-29T18:59:52Z"}, "message": "invoke.texi: Fix usage of @tie{} command.\n\n\t* doc/invoke.texi: Fix usage of @tie{} command.\n\nFrom-SVN: r203015", "tree": {"sha": "93a6c138c3ce2bf4e98b9a884c1fddb8ccf07814", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93a6c138c3ce2bf4e98b9a884c1fddb8ccf07814"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a5911d36f6a8f9e17320201d23505a05258badb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a5911d36f6a8f9e17320201d23505a05258badb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a5911d36f6a8f9e17320201d23505a05258badb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a5911d36f6a8f9e17320201d23505a05258badb/comments", "author": null, "committer": null, "parents": [{"sha": "3f67a73d5caeefc406ab35e5760dfda60d060031", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f67a73d5caeefc406ab35e5760dfda60d060031", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f67a73d5caeefc406ab35e5760dfda60d060031"}], "stats": {"total": 105, "additions": 54, "deletions": 51}, "files": [{"sha": "bb40908b13c42446958c4ea03fabdb8209117176", "filename": "gcc/ChangeLog", "status": "modified", "additions": 52, "deletions": 49, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5911d36f6a8f9e17320201d23505a05258badb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5911d36f6a8f9e17320201d23505a05258badb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7a5911d36f6a8f9e17320201d23505a05258badb", "patch": "@@ -1,3 +1,7 @@\n+2013-09-29  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* doc/invoke.texi: Fix usage of @tie{} command.\n+\n 2013-09-29  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config/sparc/sync.md: Add peephole for consecutive memory barriers.\n@@ -9,7 +13,8 @@\n \n 2013-09-28  Jan Hubicka  <jh@suse.cz>\n \n-\t* x86-tune.def (X86_TUNE_SSE_UNALIGNED_LOAD_OPTIMAL): Enable for generic.\n+\t* x86-tune.def (X86_TUNE_SSE_UNALIGNED_LOAD_OPTIMAL): Enable for\n+\tgeneric.\n \t(X86_TUNE_SSE_UNALIGNED_STORE_OPTIMAL): Likewise.\n \t(X86_TUNE_FOUR_JUMP_LIMIT): Drop for generic and buldozer.\n \t(X86_TUNE_PAD_RETURNS): Drop for buldozer chips.\n@@ -209,8 +214,7 @@\n \n 2013-09-26  Richard Biener  <rguenther@suse.de>\n \n-\t* tree-into-ssa.c (rewrite_into_ssa): Make more SSA names\n-\tto anonymous.\n+\t* tree-into-ssa.c (rewrite_into_ssa): Make more SSA names to anonymous.\n \n 2013-09-26  Richard Biener  <rguenther@suse.de>\n \n@@ -226,13 +230,13 @@\n \n 2013-09-26  Andrew MacLeod  <amacleod@redhat.com>\n \n-\t* tree-ssa-live.h (find_replaceable_exprs, dump_replaceable_exprs): Move\n-\tprototypes to...\n+\t* tree-ssa-live.h (find_replaceable_exprs, dump_replaceable_exprs):\n+\tMove prototypes to...\n \t* tree-ssa-ter.h: New File.  Move prototypes here.\n \t* tree-flow.h (stmt_is_replaceable_p): Remove prototype.\n \t* tree-outof-ssa.h: New. Rename ssaexpand.h, include tree-ssa-ter.h.\n \t* tree-outof-ssa.c (ssa_is_replaceable_p): New.  Refactor common bits\n-\tfrom is_replaceable_p. \n+\tfrom is_replaceable_p.\n \t* tree-ssa-ter.c (is_replaceable_p, stmt_is_replaceable_p): Delete.\n \t(ter_is_replaceable_p): New.  Use new refactored ssa_is_replaceable_p.\n \t(process_replaceable): Use ter_is_replaceable_p.\n@@ -586,8 +590,7 @@\n 2013-09-25  Tom Tromey  <tromey@redhat.com>\n \n \t* Makefile.in (ALL_HOST_BACKEND_OBJS): Add lto-wrapper.o.\n-\t($(ALL_HOST_OBJS)): Move order-only dependency to end\n-\tof file.\n+\t($(ALL_HOST_OBJS)): Move order-only dependency to end of file.\n \n 2013-09-25  Tom Tromey  <tromey@redhat.com>\n \n@@ -622,10 +625,10 @@\n \n \t* config/sh/sh.md: Fix formatting.\n \n-2013-09-24  Xinliang David Li <davidxl@google.com>\n+2013-09-24  Xinliang David Li  <davidxl@google.com>\n \n-\t* tree-vect-data-refs.c (vect_enhance_data_refs_alignment): \n-\tCheck max peel iterations parameter.\n+\t* tree-vect-data-refs.c (vect_enhance_data_refs_alignment): Check\n+\tmax peel iterations parameter.\n \t* param.def: New parameter.\n \t* doc/invoke.texi: Document New parameter.\n \n@@ -644,9 +647,9 @@\n \n \tPR middle-end/57134\n \tPR middle-end/57586\n-\t* stmt.c (expand_asm_operands): Call expand_expr with\n-\tEXPAND_MEMORY for output operands that disallow regs.  Don't\n-\tuse EXPAND_WRITE on inout operands.\n+\t* stmt.c (expand_asm_operands): Call expand_expr with EXPAND_MEMORY\n+\tfor output operands that disallow regs.  Don't use EXPAND_WRITE on\n+\tinout operands.\n \n 2013-09-24  Richard Biener  <rguenther@suse.de>\n \n@@ -835,17 +838,15 @@\n \t* tree-ssa-copy.c (fini_copy_prop): Likewise.\n \t* tree-vrp.c (value_range_type): Remove definition, now in\n \ttree-ssanames.h.\n-\t(vrp_finalize): Call set_range_info to update value range of\n-\tSSA_NAMEs.\n+\t(vrp_finalize): Call set_range_info to update value range of SSA_NAMEs.\n \t* tree.h (SSA_NAME_PTR_INFO): Macro changed to access via union.\n \t(SSA_NAME_RANGE_INFO): New macro.\n \n 2013-09-23  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/58464\n \t* tree-ssa-pre.c (phi_trans_lookup): Remove.\n-\t(phi_trans_add): Change to add conditionally on being not\n-\tpresent.\n+\t(phi_trans_add): Change to add conditionally on being not present.\n \t(phi_translate_1): Remove recursion detection here.\n \t(phi_translate): Pre-seed the cache with NULL to catch\n \trecursion here in a more generic way.\n@@ -865,7 +866,8 @@\n \tRevert r202780:\n \t2013-09-20  Renlin Li  <renlin.li@arm.com>\n \n-\t* config/aarch64/aarch64.c (aarch64_expand_prologue): Use plus_constant.\n+\t* config/aarch64/aarch64.c (aarch64_expand_prologue): Use\n+\tplus_constant.\n \t(aarch64_expand_epilogue): Likewise.\n \t(aarch64_legitimize_reload_address): Likewise.\n \n@@ -905,7 +907,7 @@\n \tand __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4.\n \n 2013-09-20  DJ Delorie  <dj@redhat.com>\n-            Nick Clifton  <nickc@redhat.com>\n+\t    Nick Clifton  <nickc@redhat.com>\n \n \t* config/rl78/rl78.c: Various whitespace and comment tweaks.\n \t(need_to_save): Save bank 0 on interrupts.\n@@ -963,14 +965,14 @@\n \n 2013-09-20  Basile Starynkevitch  <basile@starynkevitch.net>\n \n-\t* plugin.c (parse_plugin_arg_opt): Accept equal sign inside \n-          plugin argument.\n+\t* plugin.c (parse_plugin_arg_opt): Accept equal sign inside\n+\tplugin argument.\n \n 2013-09-20  Basile Starynkevitch  <basile@starynkevitch.net>\n \n-       * gengtype.c (file_rules): Added rule for *.cc files.\n-       (get_output_file_with_visibility): Give fatal message when no\n-       rules found.\n+\t* gengtype.c (file_rules): Added rule for *.cc files.\n+\t(get_output_file_with_visibility): Give fatal message when no\n+\trules found.\n \n 2013-09-20  Renlin Li  <renlin.li@arm.com>\n \n@@ -1044,7 +1046,8 @@\n \t* i386-c.c (ix86_target_macros_internal): Unify generic64 and 32.\n \t(ix86_target_macros_internal): Likewise.\n \t* driver-i386.c (host_detect_local_cpu): Likewise.\n-\t* i386.c (generic64_memcpy, generic64_memset, generic64_cost): Rename to ..\n+\t* i386.c (generic64_memcpy, generic64_memset, generic64_cost): Rename\n+\tto ..\n \t(generic_memcpy, generic_memset, generic_cost): This one.\n \t(generic32_memcpy, generic32_memset, generic32_cost): Remove.\n \t(m_GENERIC32, m_GENERIC64): Remove.\n@@ -1233,9 +1236,8 @@\n \n 2013-09-18  Bin Cheng  <bin.cheng@arm.com>\n \n-\t* config/arm/arm.c (thumb1_reorg): Search for flag setting insn\n-\tbefore branch in same basic block.  Check both src and dest of\n-\tthe move insn.\n+\t* config/arm/arm.c (thumb1_reorg): Search for flag setting insn before\n+\tbranch in same basic block.  Check both src and dest of the move insn.\n \n 2013-09-17  Nick Clifton  <nickc@redhat.com>\n \n@@ -1305,20 +1307,22 @@\n \ttree-ssa-threadupdate.c\n \t(thread_across_edge): Don't check PHI argument equality when\n \tthreading through joiner block here.\n-\t\n+\n 2013-09-17  Andrew MacLeod <amacleod@redhat.com>\n \n \t* tree-flow.h (ssa_undefined_value_p): Remove prototype.\n \t* tree-ssa.c (ssa_undefined_value_p): Move pass independent parts here.\n-\t(warn_uninit, warn_uninitialized_vars, execute_early_warn_uninitialized,\n-\tmake_pass_early_warn_uninitialized): Move to tree-ssa-uninit.c.\n+\t(warn_uninit, warn_uninitialized_vars,\n+\texecute_early_warn_uninitialized, make_pass_early_warn_uninitialized):\n+\tMove to tree-ssa-uninit.c.\n \t* tree-ssa-uninit.c (ssa_undefined_value_p): Move to tree-ssa.c\n-\t(has_undefined_value_p): New.  Pass dependant parts of \n+\t(has_undefined_value_p): New.  Pass dependant parts of\n \tssa_undefined_value_p.\n \t(uninit_undefined_value_p): Use has_undefined_value_p.\n-\t(warn_uninit, warn_uninitialized_vars, execute_early_warn_uninitialized,\n-\tmake_pass_early_warn_uninitialized): Move from tree-ssa.c\n-\t* tree-ssa.h: Adjust prototypes\n+\t(warn_uninit, warn_uninitialized_vars,\n+\texecute_early_warn_uninitialized, make_pass_early_warn_uninitialized):\n+\tMove from tree-ssa.c.\n+\t* tree-ssa.h: Adjust prototypes.\n \n 2013-09-17  Jan Hubicka  <jh@suse.cz>\n \n@@ -1429,7 +1433,8 @@\n 2013-09-17  Alan Modra  <amodra@gmail.com>\n \n \tPR target/57589\n-\t* config/rs6000/driver-rs6000.c (elf_platform): Revert 2013-06-11 patch.\n+\t* config/rs6000/driver-rs6000.c (elf_platform): Revert 2013-06-11\n+\tpatch.\n \n 2013-09-16  DJ Delorie  <dj@redhat.com>\n \n@@ -1459,7 +1464,7 @@\n \t(tree_vectorize): Ditto.\n \t(pass_vectorize::gate): Call new function.\n \t(pass_vectorize::execute): Ditto.\n-\topts.c: O3 default setting change.\n+\t* opts.c: O3 default setting change.\n \t(finish_options): Check new flag.\n \t* doc/invoke.texi: Document new flags.\n \t* common.opt: New flags.\n@@ -1592,14 +1597,12 @@\n \n 2013-09-16  Diego Novillo  <dnovillo@google.com>\n \n-\t* tree-core.h: Add missing comment lines from refactoring\n-\tof tree.h.\n+\t* tree-core.h: Add missing comment lines from refactoring of tree.h.\n \n 2013-09-16  Jan Hubicka  <jh@suse.cz>\n \n \t* gimple-fold.c (can_refer_decl_in_current_unit_p): Do not accept\n-\tabstract functions; for static functions check the presence\n-\tof body.\n+\tabstract functions; for static functions check the presence of body.\n \n 2013-09-16  James Greenhalgh  <james.greenhalgh@arm.com>\n \n@@ -3805,7 +3808,7 @@\n 2013-09-04  Dodji Seketeli  <dodji@redhat.com>\n \n \t* tree.h (DECL_BUILT_IN, DECL_IS_BUILTIN): Add more comments\n-    \texplaining their differences.\n+\texplaining their differences.\n \n 2013-09-04  Sandeep Kumar Singh<Sandeep.Singh2@kpitcummins.com>\n \n@@ -5051,12 +5054,12 @@\n \n 2013-08-21  Kirill Yukhin  <kirill.yukhin@intel.com>\n \n-        * config/i386/sse.md (V16): Rename to...\n-        (VMOVE): this.\n-        (mov<mode>): Update iterator name.\n-        (*mov<mode>_internal): Ditto.\n-        (push<mode>1): Ditto.\n-        (movmisalign<mode>): Ditto.\n+\t* config/i386/sse.md (V16): Rename to...\n+\t(VMOVE): this.\n+\t(mov<mode>): Update iterator name.\n+\t(*mov<mode>_internal): Ditto.\n+\t(push<mode>1): Ditto.\n+\t(movmisalign<mode>): Ditto.\n \n 2013-08-20  Jan Hubicka  <jh@suse.cz>\n "}, {"sha": "6036f9225e560efac59e6ab3b00544dc39970bf9", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5911d36f6a8f9e17320201d23505a05258badb/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5911d36f6a8f9e17320201d23505a05258badb/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=7a5911d36f6a8f9e17320201d23505a05258badb", "patch": "@@ -12047,7 +12047,7 @@ generic or @code{__flash} is used, then @code{RAMPZ} is set\n as needed before the operation.\n \n @item\n-If the device supports RAM larger than 64@tie{KiB} and the compiler\n+If the device supports RAM larger than 64@tie{}KiB and the compiler\n needs to change @code{RAMPZ} to accomplish an operation, @code{RAMPZ}\n is reset to zero after the operation.\n \n@@ -12057,7 +12057,7 @@ prologue/epilogue saves/restores that SFR and initializes it with\n zero in case the ISR code might (implicitly) use it.\n \n @item\n-RAM larger than 64@tie{KiB} is not supported by GCC for AVR targets.\n+RAM larger than 64@tie{}KiB is not supported by GCC for AVR targets.\n If you use inline assembler to read from locations outside the\n 16-bit address range and change one of the @code{RAMP} registers,\n you must reset it to zero after the access."}]}