{"sha": "8ce9ce6b16b3988f60bb92a916ea50dd3237a532", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGNlOWNlNmIxNmIzOTg4ZjYwYmI5MmE5MTZlYTUwZGQzMjM3YTUzMg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-04-19T12:38:03Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-04-21T08:20:23Z"}, "message": "Remove pedantic_non_lvalue_loc\n\nThis removes pedantic_non_lvalue_loc which doesn't do what it says\nsince quite some time in favor of what it actually does and where\nthat's not a duplicate (protected_set_expr_location_unshare).\n\n2021-04-19  Richard Biener  <rguenther@suse.de>\n\n\t* fold-const.c (pedantic_non_lvalue_loc): Remove.\n\t(fold_binary_loc): Adjust.\n\t(fold_ternary_loc): Likewise.", "tree": {"sha": "6bca13427fd5286c208a2b6d7354d7309976329f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6bca13427fd5286c208a2b6d7354d7309976329f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ce9ce6b16b3988f60bb92a916ea50dd3237a532", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ce9ce6b16b3988f60bb92a916ea50dd3237a532", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ce9ce6b16b3988f60bb92a916ea50dd3237a532", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ce9ce6b16b3988f60bb92a916ea50dd3237a532/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b67778b59932fdc64dc89a97550349e973ca0352", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b67778b59932fdc64dc89a97550349e973ca0352", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b67778b59932fdc64dc89a97550349e973ca0352"}], "stats": {"total": 28, "additions": 7, "deletions": 21}, "files": [{"sha": "5a41524702baa35531c030c9ce142472aed1ae6a", "filename": "gcc/fold-const.c", "status": "modified", "additions": 7, "deletions": 21, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ce9ce6b16b3988f60bb92a916ea50dd3237a532/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ce9ce6b16b3988f60bb92a916ea50dd3237a532/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=8ce9ce6b16b3988f60bb92a916ea50dd3237a532", "patch": "@@ -2619,15 +2619,6 @@ non_lvalue_loc (location_t loc, tree x)\n     return x;\n   return build1_loc (loc, NON_LVALUE_EXPR, TREE_TYPE (x), x);\n }\n-\n-/* When pedantic, return an expr equal to X but certainly not valid as a\n-   pedantic lvalue.  Otherwise, return X.  */\n-\n-static tree\n-pedantic_non_lvalue_loc (location_t loc, tree x)\n-{\n-  return protected_set_expr_location_unshare (x, loc);\n-}\n \f\n /* Given a tree comparison code, return the code that is the logical inverse.\n    It is generally not safe to do this for floating-point comparisons, except\n@@ -12532,9 +12523,9 @@ fold_binary_loc (location_t loc, enum tree_code code, tree type,\n       if (TREE_SIDE_EFFECTS (arg0) || TREE_CONSTANT (arg1))\n \treturn NULL_TREE;\n       /* Don't let (0, 0) be null pointer constant.  */\n-      tem = integer_zerop (arg1) ? build1 (NOP_EXPR, type, arg1)\n+      tem = integer_zerop (arg1) ? build1_loc (loc, NOP_EXPR, type, arg1)\n \t\t\t\t : fold_convert_loc (loc, type, arg1);\n-      return pedantic_non_lvalue_loc (loc, tem);\n+      return tem;\n \n     case ASSERT_EXPR:\n       /* An ASSERT_EXPR should never be passed to fold_binary.  */\n@@ -12781,7 +12772,7 @@ fold_ternary_loc (location_t loc, enum tree_code code, tree type,\n                || !contains_label_p (unused_op))\n               && (! VOID_TYPE_P (TREE_TYPE (tem))\n                   || VOID_TYPE_P (type)))\n-\t    return pedantic_non_lvalue_loc (loc, tem);\n+\t    return protected_set_expr_location_unshare (tem, loc);\n \t  return NULL_TREE;\n \t}\n       else if (TREE_CODE (arg0) == VECTOR_CST)\n@@ -12864,7 +12855,7 @@ fold_ternary_loc (location_t loc, enum tree_code code, tree type,\n \t     a COND, which will recurse.  In that case, the COND_EXPR\n \t     is probably the best choice, so leave it alone.  */\n \t  && type == TREE_TYPE (arg0))\n-\treturn pedantic_non_lvalue_loc (loc, arg0);\n+\treturn protected_set_expr_location_unshare (arg0, loc);\n \n       /* Convert A ? 0 : 1 to !A.  This prefers the use of NOT_EXPR\n \t over COND_EXPR in cases such as floating point comparisons.  */\n@@ -12873,10 +12864,8 @@ fold_ternary_loc (location_t loc, enum tree_code code, tree type,\n \t  && integer_onep (op2)\n \t  && !VECTOR_TYPE_P (type)\n \t  && truth_value_p (TREE_CODE (arg0)))\n-\treturn pedantic_non_lvalue_loc (loc,\n-\t\t\t\t    fold_convert_loc (loc, type,\n-\t\t\t\t\t      invert_truthvalue_loc (loc,\n-\t\t\t\t\t\t\t\t     arg0)));\n+\treturn fold_convert_loc (loc, type,\n+\t\t\t\t invert_truthvalue_loc (loc, arg0));\n \n       /* A < 0 ? <sign bit of A> : 0 is simply (A & <sign bit of A>).  */\n       if (TREE_CODE (arg0) == LT_EXPR\n@@ -12982,10 +12971,7 @@ fold_ternary_loc (location_t loc, enum tree_code code, tree type,\n \t     second operand 32-bit -128, which is not a power of two (or vice\n \t     versa.  */\n \t  && integer_pow2p (TREE_OPERAND (TREE_OPERAND (arg0, 0), 1)))\n-\treturn pedantic_non_lvalue_loc (loc,\n-\t\t\t\t\tfold_convert_loc (loc, type,\n-\t\t\t\t\t\t\t  TREE_OPERAND (arg0,\n-\t\t\t\t\t\t\t\t\t0)));\n+\treturn fold_convert_loc (loc, type, TREE_OPERAND (arg0, 0));\n \n       /* Disable the transformations below for vectors, since\n \t fold_binary_op_with_conditional_arg may undo them immediately,"}]}