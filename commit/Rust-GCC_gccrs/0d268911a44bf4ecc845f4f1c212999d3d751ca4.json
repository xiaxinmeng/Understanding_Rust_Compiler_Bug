{"sha": "0d268911a44bf4ecc845f4f1c212999d3d751ca4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQyNjg5MTFhNDRiZjRlY2M4NDVmNGYxYzIxMjk5OWQzZDc1MWNhNA==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2005-11-15T13:51:27Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-11-15T13:51:27Z"}, "message": "exp_vfpt.adb: Handle /= case\n\n2005-11-14  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_vfpt.adb: Handle /= case\n\t(Expand_Vax_Conversion): Properly recognize Conversion_OK flag\n\tso that we do not get duplicate scaling for fixed point conversions.\n\n\t* s-vaflop.ads, s-vaflop.adb: (Ne_F): New function\n\nFrom-SVN: r106951", "tree": {"sha": "e54b0d0f1f3af51f07c6e177453dbe50f24fccea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e54b0d0f1f3af51f07c6e177453dbe50f24fccea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d268911a44bf4ecc845f4f1c212999d3d751ca4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d268911a44bf4ecc845f4f1c212999d3d751ca4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d268911a44bf4ecc845f4f1c212999d3d751ca4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d268911a44bf4ecc845f4f1c212999d3d751ca4/comments", "author": null, "committer": null, "parents": [{"sha": "f02b8bb877f4e1000c92df67b4a8b5b1efc263bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f02b8bb877f4e1000c92df67b4a8b5b1efc263bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f02b8bb877f4e1000c92df67b4a8b5b1efc263bd"}], "stats": {"total": 123, "additions": 90, "deletions": 33}, "files": [{"sha": "de2fae1045982ec4ca7d92cc9e04523531a59967", "filename": "gcc/ada/exp_vfpt.adb", "status": "modified", "additions": 61, "deletions": 28, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d268911a44bf4ecc845f4f1c212999d3d751ca4/gcc%2Fada%2Fexp_vfpt.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d268911a44bf4ecc845f4f1c212999d3d751ca4/gcc%2Fada%2Fexp_vfpt.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_vfpt.adb?ref=0d268911a44bf4ecc845f4f1c212999d3d751ca4", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1997-2005 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1997-2005, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -196,6 +196,13 @@ package body Exp_VFpt is\n                Func := RE_Lt_G;\n             end if;\n \n+         when N_Op_Ne =>\n+            if Typc = 'F' then\n+               Func := RE_Ne_F;\n+            else\n+               Func := RE_Ne_G;\n+            end if;\n+\n          when others =>\n             Func := RE_Null;\n             raise Program_Error;\n@@ -295,14 +302,16 @@ package body Exp_VFpt is\n          end if;\n       end Call_Type;\n \n+      -------------------------------------------------\n+      -- Expand_Multiply_Fixed_By_Fixed_Giving_Fixed --\n+      -------------------------------------------------\n+\n       function Equivalent_Integer_Type (T : Entity_Id) return Entity_Id is\n       begin\n          if Esize (T) = Esize (Standard_Long_Long_Integer) then\n             return Standard_Long_Long_Integer;\n-\n          elsif Esize (T) = Esize (Standard_Long_Integer) then\n             return  Standard_Long_Integer;\n-\n          else\n             return Standard_Integer;\n          end if;\n@@ -320,38 +329,62 @@ package body Exp_VFpt is\n          Rewrite (N,\n            Unchecked_Convert_To (T_Typ, Expr));\n \n+      --  Case of conversion of fixed-point type to Vax_Float type\n+\n       elsif Is_Fixed_Point_Type (S_Typ) then\n \n-         --  convert the scaled integer value to the target type, and multiply\n-         --  by 'Small of type.\n+         --  If Conversion_OK set, then we introduce an intermediate IEEE\n+         --  target type since we are expecting the code generator to handle\n+         --  the case of integer to IEEE float.\n \n-         Rewrite (N,\n-            Make_Op_Multiply (Loc,\n-              Left_Opnd =>\n-                Make_Type_Conversion (Loc,\n-                  Subtype_Mark => New_Occurrence_Of (T_Typ, Loc),\n-                  Expression   =>\n-                    Unchecked_Convert_To (\n-                      Equivalent_Integer_Type (S_Typ), Expr)),\n-              Right_Opnd =>\n-                Make_Real_Literal (Loc, Realval => Small_Value (S_Typ))));\n+         if Conversion_OK (N) then\n+            Rewrite (N,\n+              Convert_To (T_Typ, OK_Convert_To (Universal_Real, Expr)));\n+\n+         --  Otherwise, convert the scaled integer value to the target type,\n+         --  and multiply by 'Small of type.\n+\n+         else\n+            Rewrite (N,\n+               Make_Op_Multiply (Loc,\n+                 Left_Opnd =>\n+                   Make_Type_Conversion (Loc,\n+                     Subtype_Mark => New_Occurrence_Of (T_Typ, Loc),\n+                     Expression   =>\n+                       Unchecked_Convert_To (\n+                         Equivalent_Integer_Type (S_Typ), Expr)),\n+                 Right_Opnd =>\n+                   Make_Real_Literal (Loc, Realval => Small_Value (S_Typ))));\n+         end if;\n+\n+      --  Case of conversion of Vax_Float type to fixed-point type\n \n       elsif Is_Fixed_Point_Type (T_Typ) then\n \n-         --  multiply value by 'small of type, and convert to the corresponding\n-         --  integer type.\n+         --  If Conversion_OK set, then we introduce an intermediate IEEE\n+         --  target type, since we are expecting the code generator to handle\n+         --  the case of IEEE float to integer.\n \n-         Rewrite (N,\n-           Unchecked_Convert_To (T_Typ,\n-             Make_Type_Conversion (Loc,\n-               Subtype_Mark =>\n-                 New_Occurrence_Of (Equivalent_Integer_Type (T_Typ), Loc),\n-               Expression =>\n-                 Make_Op_Multiply (Loc,\n-                   Left_Opnd => Expr,\n-                   Right_Opnd =>\n-                     Make_Real_Literal (Loc,\n-                       Realval => Ureal_1 / Small_Value (T_Typ))))));\n+         if Conversion_OK (N) then\n+            Rewrite (N,\n+              OK_Convert_To (T_Typ, Convert_To (Universal_Real, Expr)));\n+\n+         --  Otherwise, multiply value by 'small of type, and convert to the\n+         --  corresponding integer type.\n+\n+         else\n+            Rewrite (N,\n+              Unchecked_Convert_To (T_Typ,\n+                Make_Type_Conversion (Loc,\n+                  Subtype_Mark =>\n+                    New_Occurrence_Of (Equivalent_Integer_Type (T_Typ), Loc),\n+                  Expression =>\n+                    Make_Op_Multiply (Loc,\n+                      Left_Opnd => Expr,\n+                      Right_Opnd =>\n+                        Make_Real_Literal (Loc,\n+                          Realval => Ureal_1 / Small_Value (T_Typ))))));\n+         end if;\n \n       --  All other cases\n "}, {"sha": "3cf96e26e936efcb66756e15181d7c0debff2152", "filename": "gcc/ada/s-vaflop.adb", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d268911a44bf4ecc845f4f1c212999d3d751ca4/gcc%2Fada%2Fs-vaflop.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d268911a44bf4ecc845f4f1c212999d3d751ca4/gcc%2Fada%2Fs-vaflop.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-vaflop.adb?ref=0d268911a44bf4ecc845f4f1c212999d3d751ca4", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1997-2005 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1997-2005, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -310,6 +310,24 @@ package body System.Vax_Float_Operations is\n       return X * Y;\n    end Mul_G;\n \n+   ----------\n+   -- Ne_F --\n+   ----------\n+\n+   function Ne_F (X, Y : F) return Boolean is\n+   begin\n+      return X /= Y;\n+   end Ne_F;\n+\n+   ----------\n+   -- Ne_G --\n+   ----------\n+\n+   function Ne_G (X, Y : G) return Boolean is\n+   begin\n+      return X /= Y;\n+   end Ne_G;\n+\n    -----------\n    -- Neg_F --\n    -----------\n@@ -426,7 +444,7 @@ package body System.Vax_Float_Operations is\n    --  accurate, but is good enough in practice.\n \n    function Valid_D (Arg : D) return Boolean is\n-      Val : T := G_To_T (D_To_G (Arg));\n+      Val : constant T := G_To_T (D_To_G (Arg));\n    begin\n       return Val'Valid;\n    end Valid_D;\n@@ -439,7 +457,7 @@ package body System.Vax_Float_Operations is\n    --  accurate, but is good enough in practice.\n \n    function Valid_F (Arg : F) return Boolean is\n-      Val : S := F_To_S (Arg);\n+      Val : constant S := F_To_S (Arg);\n    begin\n       return Val'Valid;\n    end Valid_F;\n@@ -452,7 +470,7 @@ package body System.Vax_Float_Operations is\n    --  accurate, but is good enough in practice.\n \n    function Valid_G (Arg : G) return Boolean is\n-      Val : T := G_To_T (Arg);\n+      Val : constant T := G_To_T (Arg);\n    begin\n       return Val'Valid;\n    end Valid_G;"}, {"sha": "9f205d4833856f37341a53051d31cb7d7b60e74c", "filename": "gcc/ada/s-vaflop.ads", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d268911a44bf4ecc845f4f1c212999d3d751ca4/gcc%2Fada%2Fs-vaflop.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d268911a44bf4ecc845f4f1c212999d3d751ca4/gcc%2Fada%2Fs-vaflop.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-vaflop.ads?ref=0d268911a44bf4ecc845f4f1c212999d3d751ca4", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1997-2005 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1997-2005, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -139,6 +139,10 @@ package System.Vax_Float_Operations is\n    function Lt_G (X, Y : G) return Boolean;\n    --  Compares for X < Y\n \n+   function Ne_F (X, Y : F) return Boolean;\n+   function Ne_G (X, Y : G) return Boolean;\n+   --  Compares for X /= Y\n+\n    ----------------------------------\n    -- Routines for Valid Attribute --\n    ----------------------------------\n@@ -218,6 +222,8 @@ private\n    pragma Inline (Le_G);\n    pragma Inline (Lt_F);\n    pragma Inline (Lt_G);\n+   pragma Inline (Ne_F);\n+   pragma Inline (Ne_G);\n \n    pragma Inline (Valid_D);\n    pragma Inline (Valid_F);"}]}