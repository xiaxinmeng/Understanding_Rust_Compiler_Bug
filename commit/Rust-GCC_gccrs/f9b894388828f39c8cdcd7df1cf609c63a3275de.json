{"sha": "f9b894388828f39c8cdcd7df1cf609c63a3275de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjliODk0Mzg4ODI4ZjM5YzhjZGNkN2RmMWNmNjA5YzYzYTMyNzVkZQ==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@redhat.com", "date": "2007-02-08T22:22:52Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2007-02-08T22:22:52Z"}, "message": "m32c-protos.h (m32c_illegal_subreg_p): New.\n\n* config/m32c/m32c-protos.h (m32c_illegal_subreg_p): New.\n* config/m32c/m32c.c (legal_subregs): New.\n(m32c_illegal_subreg_p): New.\n* config/m32c/predicates.md (m32c_any_operand): Use it to reject\nunsupported subregs of hard regs.\n\nFrom-SVN: r121725", "tree": {"sha": "ca63f21f6a9cf192f20b2fca82777f493a0bb2ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca63f21f6a9cf192f20b2fca82777f493a0bb2ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9b894388828f39c8cdcd7df1cf609c63a3275de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9b894388828f39c8cdcd7df1cf609c63a3275de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9b894388828f39c8cdcd7df1cf609c63a3275de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9b894388828f39c8cdcd7df1cf609c63a3275de/comments", "author": null, "committer": null, "parents": [{"sha": "ff39b79b8fe48e0f47c2798b71732250264baaa7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff39b79b8fe48e0f47c2798b71732250264baaa7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff39b79b8fe48e0f47c2798b71732250264baaa7"}], "stats": {"total": 90, "additions": 89, "deletions": 1}, "files": [{"sha": "232a4a1efea0b2e71a6e6d9aa01615c1f3cfa5e3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9b894388828f39c8cdcd7df1cf609c63a3275de/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9b894388828f39c8cdcd7df1cf609c63a3275de/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f9b894388828f39c8cdcd7df1cf609c63a3275de", "patch": "@@ -1,3 +1,11 @@\n+2007-02-08  DJ Delorie  <dj@redhat.com>\n+\n+\t* config/m32c/m32c-protos.h (m32c_illegal_subreg_p): New.\n+\t* config/m32c/m32c.c (legal_subregs): New.\n+\t(m32c_illegal_subreg_p): New.\n+\t* config/m32c/predicates.md (m32c_any_operand): Use it to reject\n+\tunsupported subregs of hard regs.\n+\n 2007-02-08  Jan Hubicka  <jh@suse.cz>\n \n \t* tree-cfg.c (bsi_replace): Shortcut when replacing the statement with"}, {"sha": "5735ee75867411c79ad603276bce827f8d61ad54", "filename": "gcc/config/m32c/m32c-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9b894388828f39c8cdcd7df1cf609c63a3275de/gcc%2Fconfig%2Fm32c%2Fm32c-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9b894388828f39c8cdcd7df1cf609c63a3275de/gcc%2Fconfig%2Fm32c%2Fm32c-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c-protos.h?ref=f9b894388828f39c8cdcd7df1cf609c63a3275de", "patch": "@@ -74,6 +74,7 @@ int  m32c_extra_constraint_p (rtx, char, const char *);\n int  m32c_extra_constraint_p2 (rtx, char, const char *);\n int  m32c_hard_regno_nregs (int, MM);\n int  m32c_hard_regno_ok (int, MM);\n+bool m32c_illegal_subreg_p (rtx);\n bool m32c_immd_dbl_mov (rtx *, MM);\n rtx  m32c_incoming_return_addr_rtx (void);\n void m32c_initialize_trampoline (rtx, rtx, rtx);"}, {"sha": "65f0898ee1bdbfc1d0255e2c7b94d9590bafbf17", "filename": "gcc/config/m32c/m32c.c", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9b894388828f39c8cdcd7df1cf609c63a3275de/gcc%2Fconfig%2Fm32c%2Fm32c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9b894388828f39c8cdcd7df1cf609c63a3275de/gcc%2Fconfig%2Fm32c%2Fm32c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.c?ref=f9b894388828f39c8cdcd7df1cf609c63a3275de", "patch": "@@ -2749,6 +2749,81 @@ m32c_insert_attributes (tree node ATTRIBUTE_UNUSED,\n \n /* Predicates */\n \n+/* This is a list of legal subregs of hard regs.  */\n+static struct {\n+  enum machine_mode outer_mode_size;\n+  enum machine_mode inner_mode_size;\n+  unsigned int regno;\n+  int byte_mask;\n+  int legal_when;\n+} legal_subregs[] = {\n+  {1, 2, R0_REGNO, 0x03, 1}, /* r0h r0l */\n+  {1, 2, R1_REGNO, 0x03, 1}, /* r1h r1l */\n+  {1, 2, A0_REGNO, 0x01, 1},\n+  {1, 2, A1_REGNO, 0x01, 1},\n+\n+  {1, 4, A0_REGNO, 0x01, 1},\n+  {1, 4, A1_REGNO, 0x01, 1},\n+\n+  {2, 4, R0_REGNO, 0x05, 1}, /* r2 r0 */\n+  {2, 4, R1_REGNO, 0x05, 1}, /* r3 r1 */\n+  {2, 4, A0_REGNO, 0x05, 16}, /* a1 a0 */\n+  {2, 4, A0_REGNO, 0x01, 24}, /* a1 a0 */\n+  {2, 4, A1_REGNO, 0x01, 24}, /* a1 a0 */\n+\n+  {4, 8, R0_REGNO, 0x55, 1}, /* r3 r1 r2 r0 */\n+};\n+\n+/* Returns TRUE if OP is a subreg of a hard reg which we don't\n+   support.  */\n+bool\n+m32c_illegal_subreg_p (rtx op)\n+{\n+  rtx orig_op = op;\n+  int offset;\n+  unsigned int i;\n+  int src_mode, dest_mode;\n+\n+  if (GET_CODE (op) != SUBREG)\n+    return false;\n+\n+  dest_mode = GET_MODE (op);\n+  offset = SUBREG_BYTE (op);\n+  op = SUBREG_REG (op);\n+  src_mode = GET_MODE (op);\n+\n+  if (GET_MODE_SIZE (dest_mode) == GET_MODE_SIZE (src_mode))\n+    return false;\n+  if (GET_CODE (op) != REG)\n+    return false;\n+  if (REGNO (op) >= MEM0_REGNO)\n+    return false;\n+\n+  offset = (1 << offset);\n+\n+  for (i = 0; i < sizeof(legal_subregs)/sizeof(legal_subregs[0]); i ++)\n+    if (legal_subregs[i].outer_mode_size == GET_MODE_SIZE (dest_mode)\n+\t&& legal_subregs[i].regno == REGNO (op)\n+\t&& legal_subregs[i].inner_mode_size == GET_MODE_SIZE (src_mode)\n+\t&& legal_subregs[i].byte_mask & offset)\n+      {\n+\tswitch (legal_subregs[i].legal_when)\n+\t  {\n+\t  case 1:\n+\t    return false;\n+\t  case 16:\n+\t    if (TARGET_A16)\n+\t      return false;\n+\t    break;\n+\t  case 24:\n+\t    if (TARGET_A24)\n+\t      return false;\n+\t    break;\n+\t  }\n+      }\n+  return true;\n+}\n+\n /* Returns TRUE if we support a move between the first two operands.\n    At the moment, we just want to discourage mem to mem moves until\n    after reload, because reload has a hard time with our limited"}, {"sha": "5ca881f39b381b5c28b3708691efa25adedbbd44", "filename": "gcc/config/m32c/predicates.md", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9b894388828f39c8cdcd7df1cf609c63a3275de/gcc%2Fconfig%2Fm32c%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9b894388828f39c8cdcd7df1cf609c63a3275de/gcc%2Fconfig%2Fm32c%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fpredicates.md?ref=f9b894388828f39c8cdcd7df1cf609c63a3275de", "patch": "@@ -27,7 +27,11 @@\n \n (define_predicate \"m32c_any_operand\"\n   (ior (match_operand 0 \"general_operand\")\n-       (match_operand 1 \"memory_operand\")))\n+       (match_operand 1 \"memory_operand\"))\n+  {\n+    return ! m32c_illegal_subreg_p (op);\n+  }\n+)\n \n ; Likewise for nonimmediate_operand.\n "}]}