{"sha": "f917ae96804310fc0e4b9ae88081b0ca553bc85b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjkxN2FlOTY4MDQzMTBmYzBlNGI5YWU4ODA4MWIwY2E1NTNiYzg1Yg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2005-01-18T08:26:21Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2005-01-18T08:26:21Z"}, "message": "re PR rtl-optimization/19296 (Range check on short miscompiled at -O)\n\n\tPR rtl-optimization/19296\n\t* combine.c (simplify_comparison): Rewrite the condition under\n\twhich a non-paradoxical SUBREG of a PLUS can be lifted when\n\tcompared against a constant.\n\nFrom-SVN: r93818", "tree": {"sha": "bb35b5440252ae54228e10dbf1fe2c62cf9156a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb35b5440252ae54228e10dbf1fe2c62cf9156a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f917ae96804310fc0e4b9ae88081b0ca553bc85b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f917ae96804310fc0e4b9ae88081b0ca553bc85b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f917ae96804310fc0e4b9ae88081b0ca553bc85b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f917ae96804310fc0e4b9ae88081b0ca553bc85b/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "06da3c24eb3039103c09ee18c996876d8f65e9d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06da3c24eb3039103c09ee18c996876d8f65e9d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06da3c24eb3039103c09ee18c996876d8f65e9d2"}], "stats": {"total": 130, "additions": 106, "deletions": 24}, "files": [{"sha": "ad34b3f17d0c06840d012cc04a12523464e22b1a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f917ae96804310fc0e4b9ae88081b0ca553bc85b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f917ae96804310fc0e4b9ae88081b0ca553bc85b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f917ae96804310fc0e4b9ae88081b0ca553bc85b", "patch": "@@ -1,3 +1,10 @@\n+2005-01-18  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\tPR rtl-optimization/19296\n+\t* combine.c (simplify_comparison): Rewrite the condition under\n+\twhich a non-paradoxical SUBREG of a PLUS can be lifted when\n+\tcompared against a constant.\n+\n 2005-01-18  Andi Kleen <ak@muc.de>\n \n \t* c-typeck.c: (convert_for_assignment): Check warn_pointer_sign."}, {"sha": "4f9ddfbd8e0673166e4536df76450eb3c0a903e2", "filename": "gcc/combine.c", "status": "modified", "additions": 51, "deletions": 24, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f917ae96804310fc0e4b9ae88081b0ca553bc85b/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f917ae96804310fc0e4b9ae88081b0ca553bc85b/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=f917ae96804310fc0e4b9ae88081b0ca553bc85b", "patch": "@@ -10041,34 +10041,61 @@ simplify_comparison (enum rtx_code code, rtx *pop0, rtx *pop1)\n \t  break;\n \n \tcase SUBREG:\n-\t  /* Check for the case where we are comparing A - C1 with C2,\n-\t     both constants are smaller than 1/2 the maximum positive\n-\t     value in MODE, and the comparison is equality or unsigned.\n-\t     In that case, if A is either zero-extended to MODE or has\n-\t     sufficient sign bits so that the high-order bit in MODE\n-\t     is a copy of the sign in the inner mode, we can prove that it is\n-\t     safe to do the operation in the wider mode.  This simplifies\n-\t     many range checks.  */\n+\t  /* Check for the case where we are comparing A - C1 with C2, that is\n+\n+\t       (subreg:MODE (plus (A) (-C1))) op (C2)\n+\n+\t     with C1 a constant, and try to lift the SUBREG, i.e. to do the\n+\t     comparison in the wider mode.  One of the following two conditions\n+\t     must be true in order for this to be valid:\n+\n+\t       1. The mode extension results in the same bit pattern being added\n+\t\t  on both sides and the comparison is equality or unsigned.  As\n+\t\t  C2 has been truncated to fit in MODE, the pattern can only be\n+\t\t  all 0s or all 1s.\n+\n+\t       2. The mode extension results in the sign bit being copied on\n+\t\t  each side.\n+\n+\t     The difficulty here is that we have predicates for A but not for\n+\t     (A - C1) so we need to check that C1 is within proper bounds so\n+\t     as to perturbate A as little as possible.  */\n \n \t  if (mode_width <= HOST_BITS_PER_WIDE_INT\n \t      && subreg_lowpart_p (op0)\n+\t      && GET_MODE_BITSIZE (GET_MODE (SUBREG_REG (op0))) > mode_width\n \t      && GET_CODE (SUBREG_REG (op0)) == PLUS\n-\t      && GET_CODE (XEXP (SUBREG_REG (op0), 1)) == CONST_INT\n-\t      && INTVAL (XEXP (SUBREG_REG (op0), 1)) < 0\n-\t      && (-INTVAL (XEXP (SUBREG_REG (op0), 1))\n-\t\t  < (HOST_WIDE_INT) (GET_MODE_MASK (mode) / 2))\n-\t      && (unsigned HOST_WIDE_INT) const_op < GET_MODE_MASK (mode) / 2\n-\t      && (0 == (nonzero_bits (XEXP (SUBREG_REG (op0), 0),\n-\t\t\t\t      GET_MODE (SUBREG_REG (op0)))\n-\t\t\t& ~GET_MODE_MASK (mode))\n-\t\t  || (num_sign_bit_copies (XEXP (SUBREG_REG (op0), 0),\n-\t\t\t\t\t   GET_MODE (SUBREG_REG (op0)))\n-\t\t      > (unsigned int)\n-\t\t\t(GET_MODE_BITSIZE (GET_MODE (SUBREG_REG (op0)))\n-\t\t\t - GET_MODE_BITSIZE (mode)))))\n-\t    {\n-\t      op0 = SUBREG_REG (op0);\n-\t      continue;\n+\t      && GET_CODE (XEXP (SUBREG_REG (op0), 1)) == CONST_INT)\n+\t    {\n+\t      enum machine_mode inner_mode = GET_MODE (SUBREG_REG (op0));\n+\t      rtx a = XEXP (SUBREG_REG (op0), 0);\n+\t      HOST_WIDE_INT c1 = -INTVAL (XEXP (SUBREG_REG (op0), 1));\n+\n+\t      if ((c1 > 0\n+\t           && (unsigned HOST_WIDE_INT) c1\n+\t\t       < (unsigned HOST_WIDE_INT) 1 << (mode_width - 1)\n+\t\t   && (equality_comparison_p || unsigned_comparison_p)\n+\t\t   /* (A - C1) zero-extends if it is positive and sign-extends\n+\t\t      if it is negative, C2 both zero- and sign-extends.  */\n+\t\t   && ((0 == (nonzero_bits (a, inner_mode)\n+\t\t\t      & ~GET_MODE_MASK (mode))\n+\t\t\t&& const_op >= 0)\n+\t\t       /* (A - C1) sign-extends if it is positive and 1-extends\n+\t\t\t  if it is negative, C2 both sign- and 1-extends.  */\n+\t\t       || (num_sign_bit_copies (a, inner_mode)\n+\t\t\t   > (unsigned int) (GET_MODE_BITSIZE (inner_mode)\n+\t\t\t\t\t     - mode_width)\n+\t\t\t   && const_op < 0)))\n+\t\t  || ((unsigned HOST_WIDE_INT) c1\n+\t\t       < (unsigned HOST_WIDE_INT) 1 << (mode_width - 2)\n+\t\t      /* (A - C1) always sign-extends, like C2.  */\n+\t\t      && num_sign_bit_copies (a, inner_mode)\n+\t\t\t > (unsigned int) (GET_MODE_BITSIZE (inner_mode)\n+\t\t\t\t\t   - mode_width - 1)))\n+\t\t{\n+\t\t  op0 = SUBREG_REG (op0);\n+\t\t  continue;\n+\t        }\n \t    }\n \n \t  /* If the inner mode is narrower and we are extracting the low part,"}, {"sha": "07c39cf43039db532833a973d7e315f7bf9406ce", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f917ae96804310fc0e4b9ae88081b0ca553bc85b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f917ae96804310fc0e4b9ae88081b0ca553bc85b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f917ae96804310fc0e4b9ae88081b0ca553bc85b", "patch": "@@ -1,3 +1,8 @@\n+2005-01-18  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* gcc.dg/short-compare-1.c: New test.\n+\t* gcc.dg/short-compare-2.c: Likewise.\n+\n 2005-01-18  Michael Matz  <matz@suse.de>\n \n \t* gcc.dg/Wno-pointer-sign.c: New test for -Wno-pointer-sign."}, {"sha": "6a4e388d179610613ef3b50bfce5f99d8c057ae9", "filename": "gcc/testsuite/gcc.dg/short-compare-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f917ae96804310fc0e4b9ae88081b0ca553bc85b/gcc%2Ftestsuite%2Fgcc.dg%2Fshort-compare-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f917ae96804310fc0e4b9ae88081b0ca553bc85b/gcc%2Ftestsuite%2Fgcc.dg%2Fshort-compare-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fshort-compare-1.c?ref=f917ae96804310fc0e4b9ae88081b0ca553bc85b", "patch": "@@ -0,0 +1,21 @@\n+/* PR rtl-optimization/19296 */\n+/* Origin: Falk Hueffner <falk@debian.org> */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O\" } */\n+/* { dg-options \"-O -mtune=i686\" { target i?86-*-* } } */\n+/* { dg-options \"-O -m32 -mtune=i686\" { target x86_64-*-* } } */\n+\n+extern void abort(void);\n+\n+void f(unsigned short ad)\n+{\n+  if (ad >= 0x4000 && ad < 0xc000) \n+    abort();\n+}\n+\n+int main(void)\n+{\n+  f(0xff00); \n+  return 0;\n+}"}, {"sha": "1c5963c5a2f231a50dc5b01a0853cb9d8eac6044", "filename": "gcc/testsuite/gcc.dg/short-compare-2.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f917ae96804310fc0e4b9ae88081b0ca553bc85b/gcc%2Ftestsuite%2Fgcc.dg%2Fshort-compare-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f917ae96804310fc0e4b9ae88081b0ca553bc85b/gcc%2Ftestsuite%2Fgcc.dg%2Fshort-compare-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fshort-compare-2.c?ref=f917ae96804310fc0e4b9ae88081b0ca553bc85b", "patch": "@@ -0,0 +1,22 @@\n+/* PR rtl-optimization/19296 */\n+/* Origin: Falk Hueffner <falk@debian.org> */\n+/* Testcase by Andrew Pinski <pinskia@gcc.gnu.org> */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O\" } */\n+/* { dg-options \"-O -mtune=i686\" { target i?86-*-* } } */\n+/* { dg-options \"-O -m32 -mtune=i686\" { target x86_64-*-* } } */\n+\n+extern void abort();\n+\n+void f(unsigned short ad)\n+{\n+  if ((short) (ad - 0x4000) >= 0)\n+    abort();\n+}\n+\n+int main(void)\n+{\n+  f(0xc000);\n+  return 0;\n+}"}]}