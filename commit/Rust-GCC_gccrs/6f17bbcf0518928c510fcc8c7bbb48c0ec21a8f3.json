{"sha": "6f17bbcf0518928c510fcc8c7bbb48c0ec21a8f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmYxN2JiY2YwNTE4OTI4YzUxMGZjYzhjN2JiYjQ4YzBlYzIxYThmMw==", "commit": {"author": {"name": "James A. Morrison", "email": "phython@gcc.gnu.org", "date": "2004-12-21T17:01:08Z"}, "committer": {"name": "James A. Morrison", "email": "phython@gcc.gnu.org", "date": "2004-12-21T17:01:08Z"}, "message": "re PR c/18596 (ICE in make_decl_rtl)\n\n2004-12-19  James A. Morrison  <phython@gcc.gnu.org>\n\n       PR c/18596\n       * c-parse.in (initdcl): Don't process a declaration if start_decl fails.\n       (notype_initdcl):  Don't process a declaration if start_decl fails.\n       * c-decl.c (start_decl): Fail if grokdeclarator fails.\n       (grokdeclarator): Fail if a function definition has an invalid storage\n       class.\n       * c-typeck.c (start_init): Treat error_mark_node the same as 0.\n\ntestsuite:\n        PR c/18596\n        * gcc.dg/funcdef-storage-1.c (foo): Remove.\n        * gcc.dg/pr18596-1.c: Use dg-error.\n        (dg-options): Use -fno-unit-at-a-time.\n        * gcc.dg/pr18596-2.c: New test.\n        * gcc.dg/pr18596-3.c: New test.\n\nFrom-SVN: r92459", "tree": {"sha": "4f41c122c72dec3b860a1cabdb23536dbf18fbee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f41c122c72dec3b860a1cabdb23536dbf18fbee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f17bbcf0518928c510fcc8c7bbb48c0ec21a8f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f17bbcf0518928c510fcc8c7bbb48c0ec21a8f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f17bbcf0518928c510fcc8c7bbb48c0ec21a8f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f17bbcf0518928c510fcc8c7bbb48c0ec21a8f3/comments", "author": null, "committer": null, "parents": [{"sha": "41afe4ef3e66834becefe1d2ad5e879c878f1008", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41afe4ef3e66834becefe1d2ad5e879c878f1008", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41afe4ef3e66834becefe1d2ad5e879c878f1008"}], "stats": {"total": 160, "additions": 137, "deletions": 23}, "files": [{"sha": "3fc04174332503fbf0f13eea849375b1760191ed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f17bbcf0518928c510fcc8c7bbb48c0ec21a8f3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f17bbcf0518928c510fcc8c7bbb48c0ec21a8f3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6f17bbcf0518928c510fcc8c7bbb48c0ec21a8f3", "patch": "@@ -1,3 +1,13 @@\n+2004-12-21  James A. Morrison  <phython@gcc.gnu.org>\n+\n+\tPR c/18596\n+\t* c-parse.in (initdcl): Don't process a declaration if start_decl fails.\n+\t(notype_initdcl):  Don't process a declaration if start_decl fails.\n+\t* c-decl.c (start_decl): Fail if grokdeclarator fails.\n+\t(grokdeclarator): Fail if a function definition has an invalid storage\n+\tclass.\n+\t* c-typeck.c (start_init): Treat error_mark_node the same as 0.\n+\n 2004-12-21  Richard Henderson  <rth@redhat.com>\n \n \t* config/i386/i386.c (x86_sse_split_regs): Rename from"}, {"sha": "f881ea8e052135b31945a06ae72ad20570921954", "filename": "gcc/c-decl.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f17bbcf0518928c510fcc8c7bbb48c0ec21a8f3/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f17bbcf0518928c510fcc8c7bbb48c0ec21a8f3/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=6f17bbcf0518928c510fcc8c7bbb48c0ec21a8f3", "patch": "@@ -2964,6 +2964,8 @@ start_decl (struct c_declarator *declarator, struct c_declspecs *declspecs,\n \n   decl = grokdeclarator (declarator, declspecs,\n \t\t\t NORMAL, initialized, NULL);\n+  if (!decl)\n+    return 0;\n \n   deprecated_state = DEPRECATED_NORMAL;\n \n@@ -4437,14 +4439,9 @@ grokdeclarator (const struct c_declarator *declarator,\n       }\n     else if (TREE_CODE (type) == FUNCTION_TYPE)\n       {\n-\tdecl = build_decl (FUNCTION_DECL, declarator->u.id, type);\n-\tdecl = build_decl_attribute_variant (decl, decl_attr);\n-\n \tif (storage_class == csc_register || threadp)\n \t  {\n \t    error (\"invalid storage class for function %qs\", name);\n-\t    if (DECL_INITIAL (decl) != NULL_TREE)\n-\t      DECL_INITIAL (decl) = error_mark_node;\n \t   }\n \telse if (current_scope != file_scope)\n \t  {\n@@ -4458,14 +4455,19 @@ grokdeclarator (const struct c_declarator *declarator,\n \t\tif (pedantic)\n \t\t  pedwarn (\"invalid storage class for function %qs\", name);\n \t      }\n-\t    if (storage_class == csc_static)\n+\t    else if (storage_class == csc_static)\n \t      {\n \t        error (\"invalid storage class for function %qs\", name);\n-\t\tif (DECL_INITIAL (decl) != NULL_TREE)\n-\t\t  DECL_INITIAL (decl) = error_mark_node;\n+\t        if (funcdef_flag)\n+\t\t  storage_class = declspecs->storage_class = csc_none;\n+\t\telse\n+\t\t  return 0;\n \t      }\n \t  }\n \n+\tdecl = build_decl (FUNCTION_DECL, declarator->u.id, type);\n+\tdecl = build_decl_attribute_variant (decl, decl_attr);\n+\n \tDECL_LANG_SPECIFIC (decl) = GGC_CNEW (struct lang_decl);\n \n \tif (pedantic && type_quals && !DECL_IN_SYSTEM_HEADER (decl))"}, {"sha": "94df4bbc3b0f2eba6368c0ab9cf6f1e3f55b7f3a", "filename": "gcc/c-parse.in", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f17bbcf0518928c510fcc8c7bbb48c0ec21a8f3/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f17bbcf0518928c510fcc8c7bbb48c0ec21a8f3/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=6f17bbcf0518928c510fcc8c7bbb48c0ec21a8f3", "patch": "@@ -1321,33 +1321,47 @@ initdcl:\n \t  declarator maybeasm maybe_attribute '='\n \t\t{ $<ttype>$ = start_decl ($1, current_declspecs, true,\n \t\t\t\t\t  chainon ($3, all_prefix_attributes));\n+\t\t  if (!$<ttype>$)\n+\t\t    $<ttype>$ = error_mark_node;\n \t\t  start_init ($<ttype>$, $2, global_bindings_p ()); }\n \t  init\n /* Note how the declaration of the variable is in effect while its init is parsed! */\n \t\t{ finish_init ();\n-\t\t  maybe_warn_string_init (TREE_TYPE ($<ttype>5), $6);\n-\t\t  finish_decl ($<ttype>5, $6.value, $2); }\n+\t\t  if ($<ttype>5 != error_mark_node)\n+\t\t    {\n+\t\t      maybe_warn_string_init (TREE_TYPE ($<ttype>5), $6);\n+\t\t      finish_decl ($<ttype>5, $6.value, $2);\n+\t\t    }\n+\t\t}\n \t| declarator maybeasm maybe_attribute\n \t\t{ tree d = start_decl ($1, current_declspecs, false,\n \t\t\t\t       chainon ($3, all_prefix_attributes));\n-\t\t  finish_decl (d, NULL_TREE, $2);\n+\t\t  if (d)\n+\t\t    finish_decl (d, NULL_TREE, $2);\n                 }\n \t;\n \n notype_initdcl:\n \t  notype_declarator maybeasm maybe_attribute '='\n \t\t{ $<ttype>$ = start_decl ($1, current_declspecs, true,\n \t\t\t\t\t  chainon ($3, all_prefix_attributes));\n+\t\t  if (!$<ttype>$)\n+\t\t    $<ttype>$ = error_mark_node;\n \t\t  start_init ($<ttype>$, $2, global_bindings_p ()); }\n \t  init\n /* Note how the declaration of the variable is in effect while its init is parsed! */\n \t\t{ finish_init ();\n-\t\t  maybe_warn_string_init (TREE_TYPE ($<ttype>5), $6);\n-\t\t  finish_decl ($<ttype>5, $6.value, $2); }\n+\t\t  if ($<ttype>5 != error_mark_node)\n+\t\t    {\n+\t\t      maybe_warn_string_init (TREE_TYPE ($<ttype>5), $6);\n+\t\t      finish_decl ($<ttype>5, $6.value, $2);\n+\t\t    }\n+\t\t}\n \t| notype_declarator maybeasm maybe_attribute\n \t\t{ tree d = start_decl ($1, current_declspecs, false,\n \t\t\t\t       chainon ($3, all_prefix_attributes));\n-\t\t  finish_decl (d, NULL_TREE, $2); }\n+\t\t  if (d)\n+                    finish_decl (d, NULL_TREE, $2); }\n \t;\n /* the * rules are dummies to accept the Apollo extended syntax\n    so that the header files compile. */"}, {"sha": "d2963b374545bcce6e4ace76b67b38330cf936d3", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f17bbcf0518928c510fcc8c7bbb48c0ec21a8f3/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f17bbcf0518928c510fcc8c7bbb48c0ec21a8f3/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=6f17bbcf0518928c510fcc8c7bbb48c0ec21a8f3", "patch": "@@ -4470,7 +4470,7 @@ start_init (tree decl, tree asmspec_tree ATTRIBUTE_UNUSED, int top_level)\n   constructor_designated = 0;\n   constructor_top_level = top_level;\n \n-  if (decl != 0)\n+  if (decl != 0 && decl != error_mark_node)\n     {\n       require_constant_value = TREE_STATIC (decl);\n       require_constant_elements"}, {"sha": "0c742af3358d77ac3538419bee29bbb5124e5321", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f17bbcf0518928c510fcc8c7bbb48c0ec21a8f3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f17bbcf0518928c510fcc8c7bbb48c0ec21a8f3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6f17bbcf0518928c510fcc8c7bbb48c0ec21a8f3", "patch": "@@ -1,3 +1,12 @@\n+2004-12-21  James A. Morrison  <phython@gcc.gnu.org>\n+\n+\tPR c/18596\n+\t* gcc.dg/funcdef-storage-1.c (foo): Remove.\n+\t* gcc.dg/pr18596-1.c: Use dg-error.\n+\t(dg-options): Use -fno-unit-at-a-time.\n+\t* gcc.dg/pr18596-2.c: New test.\n+\t* gcc.dg/pr18596-3.c: New test.\n+\t\n 2004-12-20  Roger Sayle  <roger@eyesopen.com>\n \n \tPR middle-end/18683"}, {"sha": "9aa963a02887452a0b5d5e854fe8eb7994ba27e0", "filename": "gcc/testsuite/gcc.dg/funcdef-storage-1.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f17bbcf0518928c510fcc8c7bbb48c0ec21a8f3/gcc%2Ftestsuite%2Fgcc.dg%2Ffuncdef-storage-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f17bbcf0518928c510fcc8c7bbb48c0ec21a8f3/gcc%2Ftestsuite%2Fgcc.dg%2Ffuncdef-storage-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffuncdef-storage-1.c?ref=6f17bbcf0518928c510fcc8c7bbb48c0ec21a8f3", "patch": "@@ -1,5 +1,4 @@\n /* { dg-do compile } */\n-/* { dg-options \"\" } */\n \n void\n flarm(void)\n@@ -8,8 +7,3 @@ flarm(void)\n \n   foo();\n }\n-\n-static void\n-foo(void)\n-{\n-}"}, {"sha": "dc34f444e5de47bd3563eed66781e29dc2ffe2bd", "filename": "gcc/testsuite/gcc.dg/pr18596-1.c", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f17bbcf0518928c510fcc8c7bbb48c0ec21a8f3/gcc%2Ftestsuite%2Fgcc.dg%2Fpr18596-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f17bbcf0518928c510fcc8c7bbb48c0ec21a8f3/gcc%2Ftestsuite%2Fgcc.dg%2Fpr18596-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr18596-1.c?ref=6f17bbcf0518928c510fcc8c7bbb48c0ec21a8f3", "patch": "@@ -1,7 +1,39 @@\n /* { dg-do compile } */\n+/* { dg-options \"-fno-unit-at-a-time\" } */\n+\n int f(int i)\n {\n-  static int g(); /* { dg-warning \"invalid storage class\" } */\n-  static int g() { return i; } /* { dg-warning \"invalid storage class\" } */\n+  static int g(); /* { dg-error \"invalid storage class\" } */\n+  static int g() { return i; } /* { dg-error \"invalid storage class\" } */\n   return g();\n }\n+\n+int k (int i)\n+{\n+  static int g (); /* { dg-error \"invalid storage class\" } */\n+  int g () {\n+\treturn i;\n+  }\n+\n+  return g ();\n+}\n+\n+int l (int i)\n+{\n+  auto int g ();\n+  static int g () { /* { dg-error \"invalid storage class\" } */\n+    return i;\n+  }\n+\n+  static int h () { /* { dg-error \"invalid storage class\" } */\n+    return 3;\n+  }\n+  return g () + h ();\n+}\n+\n+int m (int i)\n+{\n+  static g ();  /* { dg-error \"invalid storage class\" } */\n+  static g () { return i; } /* { dg-error \"invalid storage class\" } */\n+  return g ();\n+}"}, {"sha": "7a52e807d383d01c8b3bc5b99d630a297dfb82c4", "filename": "gcc/testsuite/gcc.dg/pr18596-2.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f17bbcf0518928c510fcc8c7bbb48c0ec21a8f3/gcc%2Ftestsuite%2Fgcc.dg%2Fpr18596-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f17bbcf0518928c510fcc8c7bbb48c0ec21a8f3/gcc%2Ftestsuite%2Fgcc.dg%2Fpr18596-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr18596-2.c?ref=6f17bbcf0518928c510fcc8c7bbb48c0ec21a8f3", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-funit-at-a-time\" } */\n+\n+int f(int i)\n+{\n+  static int g(); /* { dg-error \"invalid storage class\" } */\n+  static int g() { return i; } /* { dg-error \"invalid storage class\" } */\n+  return g();\n+}\n+\n+int k (int i)\n+{\n+  static int g (); /* { dg-error \"invalid storage class\" } */\n+  int g () {\n+\treturn i;\n+  }\n+\n+  return g ();\n+}\n+\n+int l (int i)\n+{\n+  auto int g ();\n+  static int g () { /* { dg-error \"invalid storage class\" } */\n+    return i;\n+  }\n+\n+  static int h () { /* { dg-error \"invalid storage class\" } */\n+    return 3;\n+  }\n+  return g () + h ();\n+}\n+\n+int m (int i)\n+{\n+  static g ();  /* { dg-error \"invalid storage class\" } */\n+  static g () { return i; } /* { dg-error \"invalid storage class\" } */\n+  return g ();\n+}"}, {"sha": "be17e7ca4b367cbce1f06140934a1ff03593f14f", "filename": "gcc/testsuite/gcc.dg/pr18596-3.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f17bbcf0518928c510fcc8c7bbb48c0ec21a8f3/gcc%2Ftestsuite%2Fgcc.dg%2Fpr18596-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f17bbcf0518928c510fcc8c7bbb48c0ec21a8f3/gcc%2Ftestsuite%2Fgcc.dg%2Fpr18596-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr18596-3.c?ref=6f17bbcf0518928c510fcc8c7bbb48c0ec21a8f3", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+int foo ()\n+{\n+  static g () = 0; /* { dg-error \"invalid storage class\" } */\n+  static int f () = 1; /* { dg-error \"invalid storage class\" } */\n+  auto int h () = 0; /* { dg-error \"initialized like a variable\" } */\n+  static int i () = { 0 }; /* { dg-error \"invalid storage class\" } */\n+  static int j () = /* { dg-error \"invalid storage class\" } */\n+\t{ 0, 0.0 };\n+}\n+/* { dg-warning \"excess elements\" \"\" { target *-*-* } 11 } */\n+/* { dg-warning \"near initialization\" \"\" { target *-*-* } 11 } */"}]}