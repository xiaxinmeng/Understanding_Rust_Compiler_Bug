{"sha": "cd5437ab5d98cf95cc6686a533b7d3582bcb1706", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Q1NDM3YWI1ZDk4Y2Y5NWNjNjY4NmE1MzNiN2QzNTgyYmNiMTcwNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-03-11T16:50:08Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-03-11T16:50:08Z"}, "message": "re PR debug/58150 (debug info about definition of enum class not emitted if the declaration was already used in a class)\n\n\tPR debug/58150\n\t* dwarf2out.c (gen_enumeration_type_die): Don't guard adding\n\tDW_AT_declaration for ENUM_IS_OPAQUE on -gdwarf-4 or -gno-strict-dwarf,\n\tbut on TYPE_SIZE.  Don't do anything for ENUM_IS_OPAQUE if not creating\n\ta new die.  Don't set TREE_ASM_WRITTEN if ENUM_IS_OPAQUE.  Guard\n\taddition of most attributes on !orig_type_die or the attribute not\n\tbeing present already.  Assert TYPE_VALUES is NULL for ENUM_IS_OPAQUE.\n\n\t* g++.dg/debug/dwarf2/enum2.C: New test.\n\nFrom-SVN: r258434", "tree": {"sha": "54e2da59d352dcb8b8042f0b4be28546059be6fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54e2da59d352dcb8b8042f0b4be28546059be6fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd5437ab5d98cf95cc6686a533b7d3582bcb1706", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd5437ab5d98cf95cc6686a533b7d3582bcb1706", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd5437ab5d98cf95cc6686a533b7d3582bcb1706", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd5437ab5d98cf95cc6686a533b7d3582bcb1706/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ff77f6e8b3c1ad4ef3ec86289969e10100911913", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff77f6e8b3c1ad4ef3ec86289969e10100911913", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff77f6e8b3c1ad4ef3ec86289969e10100911913"}], "stats": {"total": 82, "additions": 67, "deletions": 15}, "files": [{"sha": "85062c0628081c8ed134a79aef12fa60b9915f9a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd5437ab5d98cf95cc6686a533b7d3582bcb1706/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd5437ab5d98cf95cc6686a533b7d3582bcb1706/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cd5437ab5d98cf95cc6686a533b7d3582bcb1706", "patch": "@@ -1,3 +1,13 @@\n+2018-03-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/58150\n+\t* dwarf2out.c (gen_enumeration_type_die): Don't guard adding\n+\tDW_AT_declaration for ENUM_IS_OPAQUE on -gdwarf-4 or -gno-strict-dwarf,\n+\tbut on TYPE_SIZE.  Don't do anything for ENUM_IS_OPAQUE if not creating\n+\ta new die.  Don't set TREE_ASM_WRITTEN if ENUM_IS_OPAQUE.  Guard\n+\taddition of most attributes on !orig_type_die or the attribute not\n+\tbeing present already.  Assert TYPE_VALUES is NULL for ENUM_IS_OPAQUE.\n+\n 2018-03-11  Kito Cheng  <kito.cheng@gmail.com>\n \t    Chung-Ju Wu  <jasonwucj@gmail.com>\n "}, {"sha": "8c41a8d17762261504036930d4efd9d26d091e1f", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd5437ab5d98cf95cc6686a533b7d3582bcb1706/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd5437ab5d98cf95cc6686a533b7d3582bcb1706/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=cd5437ab5d98cf95cc6686a533b7d3582bcb1706", "patch": "@@ -21914,27 +21914,26 @@ static dw_die_ref\n gen_enumeration_type_die (tree type, dw_die_ref context_die)\n {\n   dw_die_ref type_die = lookup_type_die (type);\n+  dw_die_ref orig_type_die = type_die;\n \n   if (type_die == NULL)\n     {\n       type_die = new_die (DW_TAG_enumeration_type,\n \t\t\t  scope_die_for (type, context_die), type);\n       equate_type_number_to_die (type, type_die);\n       add_name_attribute (type_die, type_tag (type));\n-      if (dwarf_version >= 4 || !dwarf_strict)\n-\t{\n-\t  if (ENUM_IS_SCOPED (type))\n-\t    add_AT_flag (type_die, DW_AT_enum_class, 1);\n-\t  if (ENUM_IS_OPAQUE (type))\n-\t    add_AT_flag (type_die, DW_AT_declaration, 1);\n-\t}\n+      if ((dwarf_version >= 4 || !dwarf_strict)\n+\t  && ENUM_IS_SCOPED (type))\n+\tadd_AT_flag (type_die, DW_AT_enum_class, 1);\n+      if (ENUM_IS_OPAQUE (type) && TYPE_SIZE (type))\n+\tadd_AT_flag (type_die, DW_AT_declaration, 1);\n       if (!dwarf_strict)\n \tadd_AT_unsigned (type_die, DW_AT_encoding,\n \t\t\t TYPE_UNSIGNED (type)\n \t\t\t ? DW_ATE_unsigned\n \t\t\t : DW_ATE_signed);\n     }\n-  else if (! TYPE_SIZE (type))\n+  else if (! TYPE_SIZE (type) || ENUM_IS_OPAQUE (type))\n     return type_die;\n   else\n     remove_AT (type_die, DW_AT_declaration);\n@@ -21946,19 +21945,25 @@ gen_enumeration_type_die (tree type, dw_die_ref context_die)\n     {\n       tree link;\n \n-      TREE_ASM_WRITTEN (type) = 1;\n-      add_byte_size_attribute (type_die, type);\n-      add_alignment_attribute (type_die, type);\n-      if (dwarf_version >= 3 || !dwarf_strict)\n+      if (!ENUM_IS_OPAQUE (type))\n+\tTREE_ASM_WRITTEN (type) = 1;\n+      if (!orig_type_die || !get_AT (type_die, DW_AT_byte_size))\n+\tadd_byte_size_attribute (type_die, type);\n+      if (!orig_type_die || !get_AT (type_die, DW_AT_alignment))\n+\tadd_alignment_attribute (type_die, type);\n+      if ((dwarf_version >= 3 || !dwarf_strict)\n+\t  && (!orig_type_die || !get_AT (type_die, DW_AT_type)))\n \t{\n \t  tree underlying = lang_hooks.types.enum_underlying_base_type (type);\n \t  add_type_attribute (type_die, underlying, TYPE_UNQUALIFIED, false,\n \t\t\t      context_die);\n \t}\n       if (TYPE_STUB_DECL (type) != NULL_TREE)\n \t{\n-\t  add_src_coords_attributes (type_die, TYPE_STUB_DECL (type));\n-\t  add_accessibility_attribute (type_die, TYPE_STUB_DECL (type));\n+\t  if (!orig_type_die || !get_AT (type_die, DW_AT_decl_file))\n+\t    add_src_coords_attributes (type_die, TYPE_STUB_DECL (type));\n+\t  if (!orig_type_die || !get_AT (type_die, DW_AT_accessibility))\n+\t    add_accessibility_attribute (type_die, TYPE_STUB_DECL (type));\n \t}\n \n       /* If the first reference to this type was as the return type of an\n@@ -21972,6 +21977,7 @@ gen_enumeration_type_die (tree type, dw_die_ref context_die)\n \t  dw_die_ref enum_die = new_die (DW_TAG_enumerator, type_die, link);\n \t  tree value = TREE_VALUE (link);\n \n+\t  gcc_assert (!ENUM_IS_OPAQUE (type));\n \t  add_name_attribute (enum_die,\n \t\t\t      IDENTIFIER_POINTER (TREE_PURPOSE (link)));\n \n@@ -22001,7 +22007,8 @@ gen_enumeration_type_die (tree type, dw_die_ref context_die)\n \t}\n \n       add_gnat_descriptive_type_attribute (type_die, type, context_die);\n-      if (TYPE_ARTIFICIAL (type))\n+      if (TYPE_ARTIFICIAL (type)\n+\t  && (!orig_type_die || !get_AT (type_die, DW_AT_artificial)))\n \tadd_AT_flag (type_die, DW_AT_artificial, 1);\n     }\n   else"}, {"sha": "b3544f43ba88b1945447932836a9e4d3032578b3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd5437ab5d98cf95cc6686a533b7d3582bcb1706/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd5437ab5d98cf95cc6686a533b7d3582bcb1706/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cd5437ab5d98cf95cc6686a533b7d3582bcb1706", "patch": "@@ -1,3 +1,8 @@\n+2018-03-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/58150\n+\t* g++.dg/debug/dwarf2/enum2.C: New test.\n+\n 2018-03-10  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/84734"}, {"sha": "6ccd4e436ec5bd8e1be8560fa4239ad5272bcf3f", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/enum2.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd5437ab5d98cf95cc6686a533b7d3582bcb1706/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fenum2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd5437ab5d98cf95cc6686a533b7d3582bcb1706/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fenum2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fenum2.C?ref=cd5437ab5d98cf95cc6686a533b7d3582bcb1706", "patch": "@@ -0,0 +1,30 @@\n+// PR debug/58150\n+// { dg-do compile }\n+// { dg-options \"-std=c++11 -gdwarf-4 -dA -fno-merge-debug-strings\" }\n+// { dg-final { scan-assembler-times \"DIE\\[^\\n\\r\\]*DW_TAG_enumeration_type\" 3 } }\n+// { dg-final { scan-assembler-times \" DW_AT_enum_class\" 3 } }\n+// { dg-final { scan-assembler-times \" DW_AT_declaration\" 1 } }\n+// { dg-final { scan-assembler-times \"\\\"E1..\\\"\\[^\\n\\]*DW_AT_name\" 1 } }\n+// { dg-final { scan-assembler-times \"\\\"E2..\\\"\\[^\\n\\]*DW_AT_name\" 1 } }\n+// { dg-final { scan-assembler-times \"\\\"F1..\\\"\\[^\\n\\]*DW_AT_name\" 1 } }\n+// { dg-final { scan-assembler-times \"\\\"F2..\\\"\\[^\\n\\]*DW_AT_name\" 1 } }\n+\n+enum class E : int;\n+enum class F : int;\n+enum class G : int;\n+struct S { E s; };\n+struct T { G t; };\n+enum class E : int\n+{\n+  E1, E2\n+};\n+enum class F : int\n+{\n+  F1, F2\n+};\n+\n+bool\n+foo (E e, F f, G g)\n+{\n+  return e == E::E1 && f == F::F1 && (int) g == 0;\n+}"}]}