{"sha": "1067694a52b1cb7b5508c1240cc1d58bc71113d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTA2NzY5NGE1MmIxY2I3YjU1MDhjMTI0MGNjMWQ1OGJjNzExMTNkNA==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2003-04-22T19:28:00Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2003-04-22T19:28:00Z"}, "message": "c-lex.c (c_lex): Handle CPP_OTHER differently.\n\n\t* c-lex.c (c_lex): Handle CPP_OTHER differently.\n\t* cppexp.c (_cpp_parse_expr): Similarly.\n\t* cpplex.c (SPELL_CHAR): Remove.\n\t(_cpp_lex_direct): Stray chars are saved as byte strings.\n\t(cpp_spell_token, cpp_output_token, _cpp_equiv_token): Don't\n\thandle SPELL_CHAR.\n\t(cpp_avoid_paste): Update handling of CPP_OTHER.\n\t* cpplib.h: Spell CPP_OTHER like a number.\n\t(struct cpp_token): Remove member c.\n\t* cppmacro.c (stringify_arg): Update handling of CPP_OTHER.\n\nFrom-SVN: r65951", "tree": {"sha": "0004496cf3900a93b9e0ad258622e9c33e36e97d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0004496cf3900a93b9e0ad258622e9c33e36e97d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1067694a52b1cb7b5508c1240cc1d58bc71113d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1067694a52b1cb7b5508c1240cc1d58bc71113d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1067694a52b1cb7b5508c1240cc1d58bc71113d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1067694a52b1cb7b5508c1240cc1d58bc71113d4/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "45aca21f40ea1aad7cf94857e064fa0cd9ea1a93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45aca21f40ea1aad7cf94857e064fa0cd9ea1a93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45aca21f40ea1aad7cf94857e064fa0cd9ea1a93"}], "stats": {"total": 57, "additions": 28, "deletions": 29}, "files": [{"sha": "f2dc8c7220d2b17b8ec9ffc1b6af86bf8781e1ff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1067694a52b1cb7b5508c1240cc1d58bc71113d4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1067694a52b1cb7b5508c1240cc1d58bc71113d4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1067694a52b1cb7b5508c1240cc1d58bc71113d4", "patch": "@@ -1,3 +1,16 @@\n+2003-04-22  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* c-lex.c (c_lex): Handle CPP_OTHER differently.\n+\t* cppexp.c (_cpp_parse_expr): Similarly.\n+\t* cpplex.c (SPELL_CHAR): Remove.\n+\t(_cpp_lex_direct): Stray chars are saved as byte strings.\n+\t(cpp_spell_token, cpp_output_token, _cpp_equiv_token): Don't\n+\thandle SPELL_CHAR.\n+\t(cpp_avoid_paste): Update handling of CPP_OTHER.\n+\t* cpplib.h: Spell CPP_OTHER like a number.\n+\t(struct cpp_token): Remove member c.\n+\t* cppmacro.c (stringify_arg): Update handling of CPP_OTHER.\n+\n 2003-04-22  David Turner <novalis@gnu.org>\n \n \t* gbl-ctors.h: Add special license exception."}, {"sha": "e6017d3141a362c0942ab94de04f7a46f631a8ae", "filename": "gcc/c-lex.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1067694a52b1cb7b5508c1240cc1d58bc71113d4/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1067694a52b1cb7b5508c1240cc1d58bc71113d4/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=1067694a52b1cb7b5508c1240cc1d58bc71113d4", "patch": "@@ -344,12 +344,9 @@ c_lex (value)\n   *value = NULL_TREE;\n   switch (tok->type)\n     {\n-    /* Issue this error here, where we can get at tok->val.c.  */\n     case CPP_OTHER:\n-      if (ISGRAPH (tok->val.c))\n-\terror (\"stray '%c' in program\", tok->val.c);\n-      else\n-\terror (\"stray '\\\\%o' in program\", tok->val.c);\n+      error (\"stray token \\\"%s\\\" in program\",\n+\t     cpp_token_as_text (parse_in, tok));\n       goto retry;\n       \n     case CPP_NAME:"}, {"sha": "bb74d1a64231c047ff4001f9a19571b3378b6efb", "filename": "gcc/cppexp.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1067694a52b1cb7b5508c1240cc1d58bc71113d4/gcc%2Fcppexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1067694a52b1cb7b5508c1240cc1d58bc71113d4/gcc%2Fcppexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppexp.c?ref=1067694a52b1cb7b5508c1240cc1d58bc71113d4", "patch": "@@ -746,12 +746,6 @@ _cpp_parse_expr (pfile)\n \t  if (want_value)\n \t    op.op = CPP_UMINUS;\n \t  break;\n-\tcase CPP_OTHER:\n-\t  if (ISGRAPH (op.token->val.c))\n-\t    SYNTAX_ERROR2 (\"invalid character '%c' in #if\", op.token->val.c);\n-\t  else\n-\t    SYNTAX_ERROR2 (\"invalid character '\\\\%03o' in #if\",\n-\t\t\t   op.token->val.c);\n \n \tdefault:\n \t  if ((int) op.op <= (int) CPP_EQ || (int) op.op >= (int) CPP_PLUS_EQ)"}, {"sha": "552a40657e0431b84dadc312adedb186c4853a29", "filename": "gcc/cpplex.c", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1067694a52b1cb7b5508c1240cc1d58bc71113d4/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1067694a52b1cb7b5508c1240cc1d58bc71113d4/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=1067694a52b1cb7b5508c1240cc1d58bc71113d4", "patch": "@@ -31,7 +31,6 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n enum spell_type\n {\n   SPELL_OPERATOR = 0,\n-  SPELL_CHAR,\n   SPELL_IDENT,\n   SPELL_NUMBER,\n   SPELL_STRING,\n@@ -1076,10 +1075,16 @@ _cpp_lex_direct (pfile)\n \t    break;\n \t  }\n \tbuffer->cur++;\n+      }\n \n-      default:\n+    default:\n+      {\n+\tuchar *dest = _cpp_unaligned_alloc (pfile, 1 + 1);\n+\tdest[0] = c;\n+\tdest[1] = '\\0';\n \tresult->type = CPP_OTHER;\n-\tresult->val.c = c;\n+\tresult->val.str.len = 1;\n+\tresult->val.str.text = dest;\n \tbreak;\n       }\n     }\n@@ -1136,10 +1141,6 @@ cpp_spell_token (pfile, token, buffer)\n       }\n       break;\n \n-    case SPELL_CHAR:\n-      *buffer++ = token->val.c;\n-      break;\n-\n     spell_ident:\n     case SPELL_IDENT:\n       memcpy (buffer, NODE_NAME (token->val.node), NODE_LEN (token->val.node));\n@@ -1237,10 +1238,6 @@ cpp_output_token (token, fp)\n       }\n       break;\n \n-    case SPELL_CHAR:\n-      putc (token->val.c, fp);\n-      break;\n-\n     spell_ident:\n     case SPELL_IDENT:\n       fwrite (NODE_NAME (token->val.node), 1, NODE_LEN (token->val.node), fp);\n@@ -1288,8 +1285,6 @@ _cpp_equiv_tokens (a, b)\n       default:\t\t\t/* Keep compiler happy.  */\n       case SPELL_OPERATOR:\n \treturn 1;\n-      case SPELL_CHAR:\n-\treturn a->val.c == b->val.c; /* Character.  */\n       case SPELL_NONE:\n \treturn (a->type != CPP_MACRO_ARG || a->val.arg_no == b->val.arg_no);\n       case SPELL_IDENT:\n@@ -1352,9 +1347,10 @@ cpp_avoid_paste (pfile, token1, token2)\n     case CPP_NUMBER:\treturn (b == CPP_NUMBER || b == CPP_NAME\n \t\t\t\t|| c == '.' || c == '+' || c == '-');\n \t\t\t\t      /* UCNs */\n-    case CPP_OTHER:\treturn ((token1->val.c == '\\\\' && b == CPP_NAME)\n+    case CPP_OTHER:\treturn ((token1->val.str.text[0] == '\\\\'\n+\t\t\t\t && b == CPP_NAME)\n \t\t\t\t|| (CPP_OPTION (pfile, objc)\n-\t\t\t\t    && token1->val.c == '@'\n+\t\t\t\t    && token1->val.str.text[0] == '@'\n \t\t\t\t    && (b == CPP_NAME || b == CPP_STRING)));\n     default:\t\tbreak;\n     }"}, {"sha": "875fe5bf0b1c5e89587dd2245b7e604321fec2f8", "filename": "gcc/cpplib.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1067694a52b1cb7b5508c1240cc1d58bc71113d4/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1067694a52b1cb7b5508c1240cc1d58bc71113d4/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=1067694a52b1cb7b5508c1240cc1d58bc71113d4", "patch": "@@ -128,7 +128,7 @@ struct file_name_map_list;\n \\\n   TK(CPP_CHAR,\t\tSPELL_STRING)\t/* 'char' */\t\t\t\\\n   TK(CPP_WCHAR,\t\tSPELL_STRING)\t/* L'char' */\t\t\t\\\n-  TK(CPP_OTHER,\t\tSPELL_CHAR)\t/* stray punctuation */\t\t\\\n+  TK(CPP_OTHER,\t\tSPELL_NUMBER)\t/* stray punctuation */\t\t\\\n \\\n   TK(CPP_STRING,\tSPELL_STRING)\t/* \"string\" */\t\t\t\\\n   TK(CPP_WSTRING,\tSPELL_STRING)\t/* L\"string\" */\t\t\t\\\n@@ -184,7 +184,6 @@ struct cpp_token\n     const cpp_token *source;\t/* Inherit padding from this token.  */\n     struct cpp_string str;\t/* A string, or number.  */\n     unsigned int arg_no;\t/* Argument no. for a CPP_MACRO_ARG.  */\n-    unsigned char c;\t\t/* Character represented by CPP_OTHER.  */\n   } val;\n };\n "}, {"sha": "84692f359d4e664a3572942b22cf224cdf5c658a", "filename": "gcc/cppmacro.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1067694a52b1cb7b5508c1240cc1d58bc71113d4/gcc%2Fcppmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1067694a52b1cb7b5508c1240cc1d58bc71113d4/gcc%2Fcppmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmacro.c?ref=1067694a52b1cb7b5508c1240cc1d58bc71113d4", "patch": "@@ -395,7 +395,7 @@ stringify_arg (pfile, arg)\n       else\n \tdest = cpp_spell_token (pfile, token, dest);\n \n-      if (token->type == CPP_OTHER && token->val.c == '\\\\')\n+      if (token->type == CPP_OTHER && token->val.str.text[0] == '\\\\')\n \tbackslash_count++;\n       else\n \tbackslash_count = 0;"}]}