{"sha": "9547983155087b81454e9149ad37c2945f8137b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTU0Nzk4MzE1NTA4N2I4MTQ1NGU5MTQ5YWQzN2MyOTQ1ZjgxMzdiOQ==", "commit": {"author": {"name": "David S. Miller", "email": "davem@redhat.com", "date": "2002-05-23T15:22:05Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2002-05-23T15:22:05Z"}, "message": "basic-block.h (CLEANUP_NO_INSN_DEL): Define it.\n\n2002-05-23  David S. Miller  <davem@redhat.com>\n\n\t* basic-block.h (CLEANUP_NO_INSN_DEL): Define it.\n\t* cfgcleanup.c (cleanup_cfg): If it is set do not\n\tattempt to delete trivially dead insns.\n\t* except.c (finish_eh_generation): Pass it to cleanup_cfg.\n\t* toplev.c (rest_of_compilation): Document non-trivial aspect\n\tthe RTL before optimize_save_area_alloca is run.\n\nFrom-SVN: r53789", "tree": {"sha": "40fccab8e687849f2b4ac8156c613c1dd0531a4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40fccab8e687849f2b4ac8156c613c1dd0531a4a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9547983155087b81454e9149ad37c2945f8137b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9547983155087b81454e9149ad37c2945f8137b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9547983155087b81454e9149ad37c2945f8137b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9547983155087b81454e9149ad37c2945f8137b9/comments", "author": null, "committer": null, "parents": [{"sha": "a97d1398381199317a5627d7a24e407284ef1e2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a97d1398381199317a5627d7a24e407284ef1e2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a97d1398381199317a5627d7a24e407284ef1e2e"}], "stats": {"total": 26, "additions": 21, "deletions": 5}, "files": [{"sha": "d7334a9cb7ae8e18225fea6816e1e9b182c6768d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9547983155087b81454e9149ad37c2945f8137b9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9547983155087b81454e9149ad37c2945f8137b9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9547983155087b81454e9149ad37c2945f8137b9", "patch": "@@ -1,3 +1,12 @@\n+2002-05-23  David S. Miller  <davem@redhat.com>\n+\n+\t* basic-block.h (CLEANUP_NO_INSN_DEL): Define it.\n+\t* cfgcleanup.c (cleanup_cfg): If it is set do not\n+\tattempt to delete trivially dead insns.\n+\t* except.c (finish_eh_generation): Pass it to cleanup_cfg.\n+\t* toplev.c (rest_of_compilation): Document non-trivial aspect\n+\tthe RTL before optimize_save_area_alloca is run.\n+\n 2002-05-23  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* c-lex.c (indent_level): Remove."}, {"sha": "69ec1224b4e8d0d8a5b2a6570852b43bbc815892", "filename": "gcc/basic-block.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9547983155087b81454e9149ad37c2945f8137b9/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9547983155087b81454e9149ad37c2945f8137b9/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=9547983155087b81454e9149ad37c2945f8137b9", "patch": "@@ -595,6 +595,8 @@ enum update_life_extent\n \t\t\t\t\t   notes.  */\n #define CLEANUP_UPDATE_LIFE\t32\t/* Keep life information up to date.  */\n #define CLEANUP_THREADING\t64\t/* Do jump threading.  */\n+#define CLEANUP_NO_INSN_DEL\t128\t/* Do not try to delete trivially dead\n+\t\t\t\t\t   insns.  */\n /* Flags for loop discovery.  */\n \n #define LOOP_TREE\t\t1\t/* Build loop hierarchy tree.  */"}, {"sha": "1e4056a60f4bb6c263068b7ffad1f8387c2bad63", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9547983155087b81454e9149ad37c2945f8137b9/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9547983155087b81454e9149ad37c2945f8137b9/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=9547983155087b81454e9149ad37c2945f8137b9", "patch": "@@ -1800,7 +1800,8 @@ cleanup_cfg (mode)\n       changed = true;\n       /* We've possibly created trivially dead code.  Cleanup it right\n \t now to introduce more oppurtunities for try_optimize_cfg.  */\n-      if (!(mode & (CLEANUP_UPDATE_LIFE | CLEANUP_PRE_SIBCALL))\n+      if (!(mode & (CLEANUP_NO_INSN_DEL\n+\t\t    | CLEANUP_UPDATE_LIFE | CLEANUP_PRE_SIBCALL))\n \t  && !reload_completed)\n \tdelete_trivially_dead_insns (get_insns(), max_reg_num ());\n     }\n@@ -1819,7 +1820,8 @@ cleanup_cfg (mode)\n \t\t\t\t\t\t | PROP_LOG_LINKS))\n \t    break;\n \t}\n-      else if (!(mode & CLEANUP_PRE_SIBCALL) && !reload_completed)\n+      else if (!(mode & (CLEANUP_NO_INSN_DEL | CLEANUP_PRE_SIBCALL))\n+\t       && !reload_completed)\n \t{\n \t  if (!delete_trivially_dead_insns (get_insns(), max_reg_num ()))\n \t    break;"}, {"sha": "ee6ee9f023ddba6b117c5c826b5135f2b81df730", "filename": "gcc/except.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9547983155087b81454e9149ad37c2945f8137b9/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9547983155087b81454e9149ad37c2945f8137b9/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=9547983155087b81454e9149ad37c2945f8137b9", "patch": "@@ -2501,7 +2501,7 @@ finish_eh_generation ()\n \n   rebuild_jump_labels (get_insns ());\n   find_basic_blocks (get_insns (), max_reg_num (), 0);\n-  cleanup_cfg (CLEANUP_PRE_LOOP);\n+  cleanup_cfg (CLEANUP_PRE_LOOP | CLEANUP_NO_INSN_DEL);\n \n   /* These registers are used by the landing pads.  Make sure they\n      have been generated.  */\n@@ -2524,7 +2524,7 @@ finish_eh_generation ()\n   find_exception_handler_labels ();\n   rebuild_jump_labels (get_insns ());\n   find_basic_blocks (get_insns (), max_reg_num (), 0);\n-  cleanup_cfg (CLEANUP_PRE_LOOP);\n+  cleanup_cfg (CLEANUP_PRE_LOOP | CLEANUP_NO_INSN_DEL);\n }\n \f\n static hashval_t"}, {"sha": "bb6a4486d83e0c2caf0bcd76270c90909cc45c1a", "filename": "gcc/toplev.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9547983155087b81454e9149ad37c2945f8137b9/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9547983155087b81454e9149ad37c2945f8137b9/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=9547983155087b81454e9149ad37c2945f8137b9", "patch": "@@ -2573,7 +2573,10 @@ rest_of_compilation (decl)\n   unshare_all_rtl (current_function_decl, insns);\n \n #ifdef SETJMP_VIA_SAVE_AREA\n-  /* This must be performed before virtual register instantiation.  */\n+  /* This must be performed before virtual register instantiation.\n+     Please be aware the everything in the compiler that can look\n+     at the RTL up to this point must understand that REG_SAVE_AREA\n+     is just like a use of the REG contained inside.  */\n   if (current_function_calls_alloca)\n     optimize_save_area_alloca (insns);\n #endif"}]}