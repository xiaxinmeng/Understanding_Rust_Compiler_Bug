{"sha": "d966ae60665c7dbe90121db5304b4328feb0eb04", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDk2NmFlNjA2NjVjN2RiZTkwMTIxZGI1MzA0YjQzMjhmZWIwZWIwNA==", "commit": {"author": {"name": "John David Anglin", "email": "dave@hiauly1.hia.nrc.ca", "date": "2001-01-30T17:25:29Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2001-01-30T17:25:29Z"}, "message": "pa.c (pa_init_machine_status): Initialize pic_offset_table_save_rtx to NULL_RTX.\n\n        * pa.c (pa_init_machine_status): Initialize pic_offset_table_save_rtx\n        to NULL_RTX.\n        (hppa_expand_prologue): Delete code to save pic offset table register\n        in the function prologue.\n        * pa.h (PIC_OFFSET_TABLE_SAVE_RTX): Correct type in comment.\n        * pa.md (call, call_value, sibcall, sibcall_value): Save the pic offset\n        table register at the beginning of the function after the prologue.\n\nFrom-SVN: r39351", "tree": {"sha": "60b2997a663865477b7965cf1f60c03e361d7926", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60b2997a663865477b7965cf1f60c03e361d7926"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d966ae60665c7dbe90121db5304b4328feb0eb04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d966ae60665c7dbe90121db5304b4328feb0eb04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d966ae60665c7dbe90121db5304b4328feb0eb04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d966ae60665c7dbe90121db5304b4328feb0eb04/comments", "author": null, "committer": null, "parents": [{"sha": "633254a097d448c3ca7ef2cddb6acd411111b24a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/633254a097d448c3ca7ef2cddb6acd411111b24a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/633254a097d448c3ca7ef2cddb6acd411111b24a"}], "stats": {"total": 89, "additions": 68, "deletions": 21}, "files": [{"sha": "8f5a437bbcc173b3c381c5a5b84dcdc220bae558", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d966ae60665c7dbe90121db5304b4328feb0eb04/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d966ae60665c7dbe90121db5304b4328feb0eb04/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d966ae60665c7dbe90121db5304b4328feb0eb04", "patch": "@@ -1,3 +1,13 @@\n+2001-01-30  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n+\n+\t* pa.c (pa_init_machine_status): Initialize pic_offset_table_save_rtx\n+\tto NULL_RTX.\n+\t(hppa_expand_prologue): Delete code to save pic offset table register\n+\tin the function prologue.\n+\t* pa.h (PIC_OFFSET_TABLE_SAVE_RTX): Correct type in comment.\n+\t* pa.md (call, call_value, sibcall, sibcall_value): Save the pic offset\n+\ttable register at the beginning of the function after the prologue.\n+\n 2001-01-29  lars brinkhoff  <lars@nocrew.org>\n \n         * tm.texi (PUSH_ROUNDING): Remove duplicate lines."}, {"sha": "aad9345ed3591335f17f49f7b7ab82f30387f53a", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d966ae60665c7dbe90121db5304b4328feb0eb04/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d966ae60665c7dbe90121db5304b4328feb0eb04/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=d966ae60665c7dbe90121db5304b4328feb0eb04", "patch": "@@ -206,7 +206,7 @@ pa_init_machine_status (p)\n {\n   p->machine = (machine_function *) xmalloc (sizeof (machine_function));\n \n-  p->machine->pic_offset_table_save_rtx = gen_reg_rtx (Pmode);\n+  p->machine->pic_offset_table_save_rtx = NULL_RTX;\n }\n \n static void\n@@ -3186,25 +3186,6 @@ hppa_expand_prologue()\n \t    }\n \t}\n     }\n-\n-  /* When generating PIC code it is necessary to save/restore the\n-     PIC register around each function call.  We used to do this\n-     in the call patterns themselves, but that implementation\n-     made incorrect assumptions about using global variables to hold\n-     per-function rtl code generated in the backend.\n-\n-     So instead, we copy the PIC register into a callee saved register\n-     in the prologue.  Then after each call we reload the PIC register\n-     from the callee saved register.\n-\n-     Avoid doing this if the register isn't used (eg. leaf functions)\n-     as it's an error to delete an instruction from the prologue.  */\n-\n-  if (flag_pic\n-      && (GET_CODE (PIC_OFFSET_TABLE_SAVE_RTX) != REG\n-\t  || HARD_REGISTER_P (PIC_OFFSET_TABLE_SAVE_RTX)))\n-    emit_move_insn (PIC_OFFSET_TABLE_SAVE_RTX,\n-\t\t    gen_rtx_REG (word_mode, PIC_OFFSET_TABLE_REGNUM));\n }\n \n "}, {"sha": "898008e7305c87c5621df2d102dd1554dcc8932c", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d966ae60665c7dbe90121db5304b4328feb0eb04/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d966ae60665c7dbe90121db5304b4328feb0eb04/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=d966ae60665c7dbe90121db5304b4328feb0eb04", "patch": "@@ -500,7 +500,7 @@ extern int target_flags;\n #define PIC_OFFSET_TABLE_REGNUM (TARGET_64BIT ? 27 : 19)\n #define PIC_OFFSET_TABLE_REG_CALL_CLOBBERED 1\n \n-/* Register into which we save the PIC_OFFEST_TABLE_REGNUM so that it\n+/* Register into which we save the PIC_OFFSET_TABLE_REGNUM so that it\n    can be restored across function calls.  */\n #define PIC_OFFSET_TABLE_SAVE_RTX (cfun->machine->pic_offset_table_save_rtx)\n "}, {"sha": "41dc77c0703c1202bafde05d03d81dc658360d19", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d966ae60665c7dbe90121db5304b4328feb0eb04/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d966ae60665c7dbe90121db5304b4328feb0eb04/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=d966ae60665c7dbe90121db5304b4328feb0eb04", "patch": "@@ -5737,6 +5737,20 @@\n \t\t    gen_rtx_PLUS (word_mode, virtual_outgoing_args_rtx,\n \t\t\t\t  GEN_INT (64)));\n \n+  if (flag_pic && PIC_OFFSET_TABLE_SAVE_RTX == NULL_RTX)\n+    {\n+      rtx insn;\n+\n+      PIC_OFFSET_TABLE_SAVE_RTX = gen_reg_rtx (Pmode);\n+      insn = gen_rtx_SET (VOIDmode, PIC_OFFSET_TABLE_SAVE_RTX,\n+\t\t\t  gen_rtx_REG (word_mode, PIC_OFFSET_TABLE_REGNUM));\n+\n+      /* Emit the insn at the beginning of the function after the prologue.  */\n+      push_topmost_sequence ();\n+      emit_insn_after (insn, get_insns ());\n+      pop_topmost_sequence ();\n+    }\n+\n   /* Use two different patterns for calls to explicitly named functions\n      and calls through function pointers.  This is necessary as these two\n      types of calls use different calling conventions, and CSE might try\n@@ -5907,6 +5921,20 @@\n \t\t    gen_rtx_PLUS (word_mode, virtual_outgoing_args_rtx,\n \t\t\t\t  GEN_INT (64)));\n \n+  if (flag_pic && PIC_OFFSET_TABLE_SAVE_RTX == NULL_RTX)\n+    {\n+      rtx insn;\n+\n+      PIC_OFFSET_TABLE_SAVE_RTX = gen_reg_rtx (Pmode);\n+      insn = gen_rtx_SET (VOIDmode, PIC_OFFSET_TABLE_SAVE_RTX,\n+\t\t\t  gen_rtx_REG (word_mode, PIC_OFFSET_TABLE_REGNUM));\n+\n+      /* Emit the insn at the beginning of the function after the prologue.  */\n+      push_topmost_sequence ();\n+      emit_insn_after (insn, get_insns ());\n+      pop_topmost_sequence ();\n+    }\n+\n   /* Use two different patterns for calls to explicitly named functions\n      and calls through function pointers.  This is necessary as these two\n      types of calls use different calling conventions, and CSE might try\n@@ -6103,6 +6131,20 @@\n \n   op = XEXP (operands[0], 0);\n \n+  if (flag_pic && PIC_OFFSET_TABLE_SAVE_RTX == NULL_RTX)\n+    {\n+      rtx insn;\n+\n+      PIC_OFFSET_TABLE_SAVE_RTX = gen_reg_rtx (Pmode);\n+      insn = gen_rtx_SET (VOIDmode, PIC_OFFSET_TABLE_SAVE_RTX,\n+\t\t\t  gen_rtx_REG (word_mode, PIC_OFFSET_TABLE_REGNUM));\n+\n+      /* Emit the insn at the beginning of the function after the prologue.  */\n+      push_topmost_sequence ();\n+      emit_insn_after (insn, get_insns ());\n+      pop_topmost_sequence ();\n+    }\n+\n   /* We do not allow indirect sibling calls.  */\n   call_insn = emit_call_insn (gen_sibcall_internal_symref (op, operands[1]));\n \n@@ -6158,6 +6200,20 @@\n \n   op = XEXP (operands[1], 0);\n \n+  if (flag_pic && PIC_OFFSET_TABLE_SAVE_RTX == NULL_RTX)\n+    {\n+      rtx insn;\n+\n+      PIC_OFFSET_TABLE_SAVE_RTX = gen_reg_rtx (Pmode);\n+      insn = gen_rtx_SET (VOIDmode, PIC_OFFSET_TABLE_SAVE_RTX,\n+\t\t\t  gen_rtx_REG (word_mode, PIC_OFFSET_TABLE_REGNUM));\n+\n+      /* Emit the insn at the beginning of the function after the prologue.  */\n+      push_topmost_sequence ();\n+      emit_insn_after (insn, get_insns ());\n+      pop_topmost_sequence ();\n+    }\n+\n   /* We do not allow indirect sibling calls.  */\n   call_insn = emit_call_insn (gen_sibcall_value_internal_symref (operands[0],\n \t\t\t\t\t\t\t\t op,"}]}