{"sha": "b35431cf0745e4f775964ac12097f1a2c545862e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjM1NDMxY2YwNzQ1ZTRmNzc1OTY0YWMxMjA5N2YxYTJjNTQ1ODYyZQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-11-19T04:53:38Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-11-19T04:53:38Z"}, "message": "exception_support.h: New header file.\n\n\t* libsupc++/exception_support.h: New header file.\n\t* libsupc++/vec.cc: Include it.\n\t(__cxa_vec_new2): Recatch exceptions before rethrows.\n\t(__cxa_vec_new3): Likewise.\n\t(__cxa_vec_ctor): Likewise.\n\t(__cxa_vec_cctor): Likewise.\n\t(__cxa_vec_dtor): Likewise.\n\t(__cxa_vec_delete2): Likewise.\n\t(__cxa_vec_delete3): Likewise.\n\nFrom-SVN: r37554", "tree": {"sha": "bf49fdbfa651dd23c3c3a4f98b8f714d4ff36930", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf49fdbfa651dd23c3c3a4f98b8f714d4ff36930"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b35431cf0745e4f775964ac12097f1a2c545862e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b35431cf0745e4f775964ac12097f1a2c545862e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b35431cf0745e4f775964ac12097f1a2c545862e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b35431cf0745e4f775964ac12097f1a2c545862e/comments", "author": null, "committer": null, "parents": [{"sha": "0657c69c3240a594ca3335ac3721be40a47c0ee8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0657c69c3240a594ca3335ac3721be40a47c0ee8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0657c69c3240a594ca3335ac3721be40a47c0ee8"}], "stats": {"total": 66, "additions": 66, "deletions": 0}, "files": [{"sha": "2b08388490b095b929429c5fd879f8aa846c8421", "filename": "libstdc++-v3/libsupc++/exception_support.h", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b35431cf0745e4f775964ac12097f1a2c545862e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_support.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b35431cf0745e4f775964ac12097f1a2c545862e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_support.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_support.h?ref=b35431cf0745e4f775964ac12097f1a2c545862e", "patch": "@@ -0,0 +1,66 @@\n+// Copyright (C) 2000\n+// Free Software Foundation, Inc.\n+// \n+// GNU CC is free software; you can redistribute it and/or modify\n+// it under the terms of the GNU General Public License as published by\n+// the Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// GNU CC is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GNU CC; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 59 Temple Place - Suite 330,\n+// Boston, MA 02111-1307, USA. \n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include \"gansidecl.h\" /* Needed to support macros used in eh-common.h. */\n+#include \"eh-common.h\"\n+\n+/* The type of a function called to clean up an exception object.\n+   (These will be destructors.)  Under the old ABI, these take a\n+   second argument (the `in-charge' argument), that indicates whether\n+   or not do delete the object, and whether or not to destroy virtual\n+   bases.  Under the new ABI, there is no second argument.  */\n+#if !defined (__GXX_ABI_VERSION) || __GXX_ABI_VERSION < 100\n+typedef void (*cleanup_fn)(void *, int);\n+/* The `2' is the value for the in-charge parameter that indicates\n+   that virtual bases should be destroyed.  */\n+#define CALL_CLEANUP(FN, THIS) FN (THIS, 2)\n+#else\n+typedef void (*cleanup_fn)(void *);\n+#define CALL_CLEANUP(FN, THIS) FN (THIS)\n+#endif\n+\n+/* C++-specific state about the current exception.  This must match\n+   init_exception_processing().\n+\n+   Note that handlers and caught are not redundant; when rethrown, an\n+   exception can have multiple active handlers and still be considered\n+   uncaught.  */\n+\n+struct cp_eh_info\n+{\n+  __eh_info eh_info;\n+  void *value;\n+  void *type;\n+  cleanup_fn cleanup;\n+  bool caught;\n+  cp_eh_info *next;\n+  long handlers;\n+  void *original_value;\n+};\n+\n+extern \"C\" cp_eh_info *__uncatch_exception (void);\n+extern \"C\" void __recatch_exception (cp_eh_info *);"}]}