{"sha": "3c79fa86db0cf6bbcc3673c2844e85ca8679370c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M3OWZhODZkYjBjZjZiYmNjMzY3M2MyODQ0ZTg1Y2E4Njc5MzcwYw==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@physics.uc.edu", "date": "2004-05-30T23:53:32Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2004-05-30T23:53:32Z"}, "message": "c-decl.c (c_expand_body_1): Remove and fold back into ...\n\nChangeLog:\n\t* c-decl.c (c_expand_body_1): Remove and fold back into ...\n\t(c_expand_body): here.\n\t(c_expand_decl): Move to ...\n\t* c-common.c (c_expand_decl): Here and remove check for nested\n\tfunctions.\n\t* c-common.h (c_expand_decl): Add prototype.\n\t* c-tree.h (c_expand_decl): Remove.\n\ncp/ChangeLog:\n\t* cp-lang.c (cp_expand_decl): Remove.\n\t(LANG_HOOKS_EXPAND_DECL): Use c_expand_decl.\n\nFrom-SVN: r82469", "tree": {"sha": "ea6af9f1714899b3e6bb97969fabd46262b40f7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea6af9f1714899b3e6bb97969fabd46262b40f7e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c79fa86db0cf6bbcc3673c2844e85ca8679370c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c79fa86db0cf6bbcc3673c2844e85ca8679370c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c79fa86db0cf6bbcc3673c2844e85ca8679370c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c79fa86db0cf6bbcc3673c2844e85ca8679370c/comments", "author": null, "committer": null, "parents": [{"sha": "1b0f3e79b1b3b9e96be90ec30fc6a142057e84ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b0f3e79b1b3b9e96be90ec30fc6a142057e84ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b0f3e79b1b3b9e96be90ec30fc6a142057e84ed"}], "stats": {"total": 134, "additions": 50, "deletions": 84}, "files": [{"sha": "7c8627a283bd1b44dda5cd3212cb89801a1d86df", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c79fa86db0cf6bbcc3673c2844e85ca8679370c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c79fa86db0cf6bbcc3673c2844e85ca8679370c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3c79fa86db0cf6bbcc3673c2844e85ca8679370c", "patch": "@@ -1,3 +1,13 @@\n+2004-05-30  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\t* c-decl.c (c_expand_body_1): Remove and fold back into ...\n+\t(c_expand_body): here.\n+\t(c_expand_decl): Move to ...\n+\t* c-common.c (c_expand_decl): Here and remove check for nested\n+\tfunctions.\n+\t* c-common.h (c_expand_decl): Add prototype.\n+\t* c-tree.h (c_expand_decl): Remove.\n+\n 2004-05-30  Roger Sayle  <roger@eyesopen.com>\n \n \t* fold-const.c (combine_comparisons, optimize_bit_field_compare,"}, {"sha": "4b2b35501f0e71565492b81c55038dae71f693a3", "filename": "gcc/c-common.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c79fa86db0cf6bbcc3673c2844e85ca8679370c/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c79fa86db0cf6bbcc3673c2844e85ca8679370c/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=3c79fa86db0cf6bbcc3673c2844e85ca8679370c", "patch": "@@ -1123,6 +1123,30 @@ fname_as_string (int pretty_p)\n   return namep;\n }\n \n+/* Expand DECL if it declares an entity not handled by the\n+   common code.  */\n+\n+int\n+c_expand_decl (tree decl)\n+{\n+  if (TREE_CODE (decl) == VAR_DECL && !TREE_STATIC (decl))\n+    {\n+      /* Let the back-end know about this variable.  */\n+      if (!anon_aggr_type_p (TREE_TYPE (decl)))\n+        emit_local_var (decl);\n+      else\n+        expand_anon_union_decl (decl, NULL_TREE,\n+                                DECL_ANON_UNION_ELEMS (decl));\n+    }\n+  else if (TREE_CODE (decl) == VAR_DECL && TREE_STATIC (decl))\n+    make_rtl_for_local_static (decl);\n+  else\n+    return 0;\n+\n+  return 1;\n+}\n+\n+\n /* Return the VAR_DECL for a const char array naming the current\n    function. If the VAR_DECL has not yet been created, create it\n    now. RID indicates how it should be formatted and IDENTIFIER_NODE"}, {"sha": "8d0f926b07a6ff56a0631467e6fd1c54ffdf3da3", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c79fa86db0cf6bbcc3673c2844e85ca8679370c/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c79fa86db0cf6bbcc3673c2844e85ca8679370c/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=3c79fa86db0cf6bbcc3673c2844e85ca8679370c", "patch": "@@ -332,6 +332,7 @@ extern void prep_stmt (tree);\n extern tree c_begin_if_stmt (void);\n extern tree c_begin_while_stmt (void);\n extern void c_finish_while_stmt_cond (tree, tree);\n+extern int c_expand_decl (tree);\n \n extern int field_decl_cmp (const void *, const void *);\n extern void resort_sorted_fields (void *, void *, gt_pointer_operator, "}, {"sha": "5cf4e0e239af0fcef66ede649b07029a1847fbcf", "filename": "gcc/c-decl.c", "status": "modified", "additions": 9, "deletions": 58, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c79fa86db0cf6bbcc3673c2844e85ca8679370c/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c79fa86db0cf6bbcc3673c2844e85ca8679370c/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=3c79fa86db0cf6bbcc3673c2844e85ca8679370c", "patch": "@@ -6361,47 +6361,26 @@ finish_function (void)\n   current_function_decl = NULL;\n }\n \n-/* Generate the RTL for the body of FNDECL.  If NESTED_P is nonzero,\n-   then we are already in the process of generating RTL for another\n-   function.  */\n+/* Generate the RTL for the body of FNDECL.  */\n \n-static void\n-c_expand_body_1 (tree fndecl, int nested_p)\n+void\n+c_expand_body (tree fndecl)\n {\n-  if (nested_p)\n-    {\n-      /* Make sure that we will evaluate variable-sized types involved\n-\t in our function's type.  */\n-      expand_pending_sizes (DECL_LANG_SPECIFIC (fndecl)->pending_sizes);\n \n-      /* Squirrel away our current state.  */\n-      push_function_context ();\n-    }\n-    \n-  tree_rest_of_compilation (fndecl, nested_p);\n+  if (!DECL_INITIAL (fndecl)\n+      || DECL_INITIAL (fndecl) == error_mark_node)\n+    return;\n \n-  if (nested_p)\n-    /* Return to the enclosing function.  */\n-    pop_function_context ();\n+  tree_rest_of_compilation (fndecl, false);\n \n   if (DECL_STATIC_CONSTRUCTOR (fndecl)\n       && targetm.have_ctors_dtors)\n     targetm.asm_out.constructor (XEXP (DECL_RTL (fndecl), 0),\n-\t\t\t\t DEFAULT_INIT_PRIORITY);\n+                                 DEFAULT_INIT_PRIORITY);\n   if (DECL_STATIC_DESTRUCTOR (fndecl)\n       && targetm.have_ctors_dtors)\n     targetm.asm_out.destructor (XEXP (DECL_RTL (fndecl), 0),\n-\t\t\t\tDEFAULT_INIT_PRIORITY);\n-}\n-\n-/* Like c_expand_body_1 but only for unnested functions.  */\n-\n-void\n-c_expand_body (tree fndecl)\n-{\n-\n-  if (DECL_INITIAL (fndecl) && DECL_INITIAL (fndecl) != error_mark_node)\n-    c_expand_body_1 (fndecl, 0);\n+                                DEFAULT_INIT_PRIORITY);\n }\n \f\n /* Check the declarations given in a for-loop for satisfying the C99\n@@ -6597,34 +6576,6 @@ c_begin_compound_stmt (void)\n   return stmt;\n }\n \n-/* Expand DECL if it declares an entity not handled by the\n-   common code.  */\n-\n-int\n-c_expand_decl (tree decl)\n-{\n-  if (TREE_CODE (decl) == VAR_DECL && !TREE_STATIC (decl))\n-    {\n-      /* Let the back-end know about this variable.  */\n-      if (!anon_aggr_type_p (TREE_TYPE (decl)))\n-\temit_local_var (decl);\n-      else\n-\texpand_anon_union_decl (decl, NULL_TREE, \n-\t\t\t\tDECL_ANON_UNION_ELEMS (decl));\n-    }\n-  else if (TREE_CODE (decl) == VAR_DECL && TREE_STATIC (decl))\n-    make_rtl_for_local_static (decl);\n-  /* Expand nested functions.  */\n-  else if (TREE_CODE (decl) == FUNCTION_DECL\n-\t   && DECL_CONTEXT (decl) == current_function_decl\n-\t   && DECL_SAVED_TREE (decl))\n-    c_expand_body_1 (decl, 1);\n-  else\n-    return 0;\n-\n-  return 1;\n-}\n-\n /* Return the global value of T as a symbol.  */\n \n tree"}, {"sha": "f460e1ee486ff30e27ac352718ea107cd57f6954", "filename": "gcc/c-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c79fa86db0cf6bbcc3673c2844e85ca8679370c/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c79fa86db0cf6bbcc3673c2844e85ca8679370c/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=3c79fa86db0cf6bbcc3673c2844e85ca8679370c", "patch": "@@ -192,7 +192,6 @@ extern tree start_struct (enum tree_code, tree);\n extern void store_parm_decls (void);\n extern tree xref_tag (enum tree_code, tree);\n extern tree c_begin_compound_stmt (void);\n-extern int c_expand_decl (tree);\n extern void c_static_assembler_name (tree);\n extern tree make_pointer_declarator (tree, tree);\n "}, {"sha": "539d5a3d88a90eee591bb784d406a75f5ab47cd2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c79fa86db0cf6bbcc3673c2844e85ca8679370c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c79fa86db0cf6bbcc3673c2844e85ca8679370c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3c79fa86db0cf6bbcc3673c2844e85ca8679370c", "patch": "@@ -1,3 +1,8 @@\n+2004-05-30  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\t* cp-lang.c (cp_expand_decl): Remove.\n+\t(LANG_HOOKS_EXPAND_DECL): Use c_expand_decl.\n+\n 2004-05-30  Andreas Jaeger  <aj@suse.de>\n \n \t* lang-specs.h: Add missing initializers for .ii."}, {"sha": "8a82e4e72ce81451633e957b9d40fb2aad1758de", "filename": "gcc/cp/cp-lang.c", "status": "modified", "additions": 1, "deletions": 25, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c79fa86db0cf6bbcc3673c2844e85ca8679370c/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c79fa86db0cf6bbcc3673c2844e85ca8679370c/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=3c79fa86db0cf6bbcc3673c2844e85ca8679370c", "patch": "@@ -40,7 +40,6 @@ static tree cp_expr_size (tree);\n static size_t cp_tree_size (enum tree_code);\n static bool cp_var_mod_type_p (tree);\n static int cxx_types_compatible_p (tree, tree);\n-static int cp_expand_decl (tree);\n static void cxx_initialize_diagnostics (diagnostic_context *);\n \n #undef LANG_HOOKS_NAME\n@@ -72,7 +71,7 @@ static void cxx_initialize_diagnostics (diagnostic_context *);\n #undef LANG_HOOKS_EXPAND_EXPR\n #define LANG_HOOKS_EXPAND_EXPR cxx_expand_expr\n #undef LANG_HOOKS_EXPAND_DECL\n-#define LANG_HOOKS_EXPAND_DECL cp_expand_decl\n+#define LANG_HOOKS_EXPAND_DECL c_expand_decl\n #undef LANG_HOOKS_SAFE_FROM_P\n #define LANG_HOOKS_SAFE_FROM_P c_safe_from_p\n #undef LANG_HOOKS_PARSE_FILE\n@@ -293,29 +292,6 @@ cp_expr_size (tree exp)\n     return lhd_expr_size (exp);\n }\n \n-/* Expand DECL if it declares an entity not handled by the\n-   common code.  */\n-\n-static int\n-cp_expand_decl (tree decl)\n-{\n-  if (TREE_CODE (decl) == VAR_DECL && !TREE_STATIC (decl))\n-    {\n-      /* Let the back-end know about this variable.  */\n-      if (!anon_aggr_type_p (TREE_TYPE (decl)))\n-\temit_local_var (decl);\n-      else\n-\texpand_anon_union_decl (decl, NULL_TREE, \n-\t\t\t\tDECL_ANON_UNION_ELEMS (decl));\n-    }\n-  else if (TREE_CODE (decl) == VAR_DECL && TREE_STATIC (decl))\n-    make_rtl_for_local_static (decl);\n-  else\n-    return 0;\n-\n-  return 1;\n-}\n-\n int\n cp_tree_chain_matters_p (tree t)\n {"}]}