{"sha": "62dca3d53ee985e5fd69eb5e2611a8d157ea7bdc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjJkY2EzZDUzZWU5ODVlNWZkNjllYjVlMjYxMWE4ZDE1N2VhN2JkYw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-09-14T18:45:46Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-09-14T18:45:46Z"}, "message": "Formatting and comment syntax adjustments.\n\nFrom-SVN: r275717", "tree": {"sha": "dcbd63867c60930618f0bd24a26709bb8da7bebb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dcbd63867c60930618f0bd24a26709bb8da7bebb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62dca3d53ee985e5fd69eb5e2611a8d157ea7bdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62dca3d53ee985e5fd69eb5e2611a8d157ea7bdc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62dca3d53ee985e5fd69eb5e2611a8d157ea7bdc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62dca3d53ee985e5fd69eb5e2611a8d157ea7bdc/comments", "author": null, "committer": null, "parents": [{"sha": "603a4ad49978d2a967a1996ac626531200553715", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/603a4ad49978d2a967a1996ac626531200553715", "html_url": "https://github.com/Rust-GCC/gccrs/commit/603a4ad49978d2a967a1996ac626531200553715"}], "stats": {"total": 56, "additions": 29, "deletions": 27}, "files": [{"sha": "a8332ab3b140585db0856af6345369458003ee51", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62dca3d53ee985e5fd69eb5e2611a8d157ea7bdc/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62dca3d53ee985e5fd69eb5e2611a8d157ea7bdc/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=62dca3d53ee985e5fd69eb5e2611a8d157ea7bdc", "patch": "@@ -4605,7 +4605,7 @@ build_clone (tree fn, tree name)\n     }\n   else\n     {\n-      // Clone constraints.\n+      /* Clone constraints.  */\n       if (flag_concepts)\n         if (tree ci = get_constraints (fn))\n           set_constraints (clone, copy_node (ci));"}, {"sha": "793847d03d82324e2f8f66112afae345a5cd768a", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62dca3d53ee985e5fd69eb5e2611a8d157ea7bdc/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62dca3d53ee985e5fd69eb5e2611a8d157ea7bdc/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=62dca3d53ee985e5fd69eb5e2611a8d157ea7bdc", "patch": "@@ -1470,7 +1470,7 @@ check_nonnull (T* p)\n   return p;\n }\n \n-// Returns true iff T is non-null and represents constraint info.\n+/* Returns true iff T is non-null and represents constraint info.  */\n inline tree_constraint_info *\n check_constraint_info (tree t)\n {\n@@ -1479,35 +1479,35 @@ check_constraint_info (tree t)\n   return NULL;\n }\n \n-// Access the expression describing the template constraints. This may be\n-// null if no constraints were introduced in the template parameter list,\n-// a requirements clause after the template parameter list, or constraints\n-// through a constrained-type-specifier.\n+/* Access the expression describing the template constraints. This may be\n+   null if no constraints were introduced in the template parameter list,\n+   a requirements clause after the template parameter list, or constraints\n+   through a constrained-type-specifier.  */\n #define CI_TEMPLATE_REQS(NODE) \\\n-  check_constraint_info (check_nonnull(NODE))->template_reqs\n+  check_constraint_info (check_nonnull (NODE))->template_reqs\n \n-// Access the expression describing the trailing constraints. This is non-null\n-// for any implicit instantiation of a constrained declaration. For a\n-// templated declaration it is non-null only when a trailing requires-clause\n-// was specified.\n+/* Access the expression describing the trailing constraints. This is non-null\n+   for any implicit instantiation of a constrained declaration. For a\n+   templated declaration it is non-null only when a trailing requires-clause\n+   was specified.  */\n #define CI_DECLARATOR_REQS(NODE) \\\n-  check_constraint_info (check_nonnull(NODE))->declarator_reqs\n+  check_constraint_info (check_nonnull (NODE))->declarator_reqs\n \n-// The computed associated constraint expression for a declaration.\n+/* The computed associated constraint expression for a declaration.  */\n #define CI_ASSOCIATED_CONSTRAINTS(NODE) \\\n-  check_constraint_info (check_nonnull(NODE))->associated_constr\n+  check_constraint_info (check_nonnull (NODE))->associated_constr\n \n-// Access the logical constraints on the template parameters introduced\n-// at a given template parameter list level indicated by NODE.\n+/* Access the constraint-expression introduced by the requires-clause\n+   associate the template parameter list NODE.  */\n #define TEMPLATE_PARMS_CONSTRAINTS(NODE) \\\n   TREE_TYPE (TREE_LIST_CHECK (NODE))\n \n-// Access the logical constraints on the template parameter declaration\n-// indicated by NODE.\n+/* Access the logical constraints on the template parameter declaration\n+   indicated by NODE.  */\n #define TEMPLATE_PARM_CONSTRAINTS(NODE) \\\n   TREE_TYPE (TREE_LIST_CHECK (NODE))\n \n-/* Non-zero if the noexcept is present in a compound requirement. */\n+/* Non-zero if the noexcept is present in a compound requirement.  */\n #define COMPOUND_REQ_NOEXCEPT_P(NODE) \\\n   TREE_LANG_FLAG_0 (TREE_CHECK (NODE, COMPOUND_REQ))\n "}, {"sha": "e0d67328121e9c57a0171461c156f80289dde230", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62dca3d53ee985e5fd69eb5e2611a8d157ea7bdc/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62dca3d53ee985e5fd69eb5e2611a8d157ea7bdc/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=62dca3d53ee985e5fd69eb5e2611a8d157ea7bdc", "patch": "@@ -8949,10 +8949,10 @@ grokfndecl (tree ctype,\n   if (location == UNKNOWN_LOCATION)\n     location = input_location;\n \n-  // Was the concept specifier present?\n+  /* Was the concept specifier present?  */\n   bool concept_p = inlinep & 4;\n \n-  // Concept declarations must have a corresponding definition.\n+  /* Concept declarations must have a corresponding definition.  */\n   if (concept_p && !funcdef_flag)\n     {\n       error_at (location, \"concept %qD has no definition\", declarator);"}, {"sha": "b2fb150c912ba9e52d4d45f5df7fe4a3efa2c300", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62dca3d53ee985e5fd69eb5e2611a8d157ea7bdc/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62dca3d53ee985e5fd69eb5e2611a8d157ea7bdc/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=62dca3d53ee985e5fd69eb5e2611a8d157ea7bdc", "patch": "@@ -19734,7 +19734,7 @@ cp_parser_alias_declaration (cp_parser* parser)\n   if (decl == error_mark_node)\n     return decl;\n \n-  // Attach constraints to the alias declaration.\n+  /* Attach constraints to the alias declaration.  */\n   if (flag_concepts && current_template_parms)\n     {\n       tree reqs = TEMPLATE_PARMS_CONSTRAINTS (current_template_parms);\n@@ -22551,12 +22551,14 @@ cp_parser_parameter_declaration (cp_parser *parser,\n \t  && !LAMBDA_TYPE_P (current_class_type))\n \tdefault_argument = cp_parser_cache_defarg (parser, /*nsdmi=*/false);\n \n-      // A constrained-type-specifier may declare a type template-parameter.\n+      /* A constrained-type-specifier may declare a type\n+\t template-parameter.  */\n       else if (declares_constrained_type_template_parameter (type))\n         default_argument\n           = cp_parser_default_type_template_argument (parser);\n \n-      // A constrained-type-specifier may declare a template-template-parameter.\n+      /* A constrained-type-specifier may declare a\n+\t template-template-parameter.  */\n       else if (declares_constrained_template_template_parameter (type))\n         default_argument\n           = cp_parser_default_template_template_argument (parser);\n@@ -28475,9 +28477,9 @@ cp_parser_single_declaration (cp_parser* parser,\n       if (cp_parser_declares_only_class_p (parser)\n \t  || (declares_class_or_enum & 2))\n \t{\n-\t  // If this is a declaration, but not a definition, associate\n-\t  // any constraints with the type declaration. Constraints\n-\t  // are associated with definitions in cp_parser_class_specifier.\n+\t  /* If this is a declaration, but not a definition, associate\n+\t     any constraints with the type declaration. Constraints\n+\t     are associated with definitions in cp_parser_class_specifier.  */\n \t  if (declares_class_or_enum == 1)\n \t    associate_classtype_constraints (decl_specifiers.type);\n "}]}