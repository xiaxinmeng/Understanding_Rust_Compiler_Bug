{"sha": "4b316a1e8ba8bc6fd2c837906b84eead4162a14d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGIzMTZhMWU4YmE4YmM2ZmQyYzgzNzkwNmI4NGVlYWQ0MTYyYTE0ZA==", "commit": {"author": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2010-07-27T13:26:34Z"}, "committer": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2010-07-27T13:26:34Z"}, "message": "re PR target/29090 (gcc.dg-struct-layout-1 failures on Darwin PPC at -m64)\n\n\n\tPR target/29090\n\t* config/rs6000/rs6000.c (rs6000_gimplify_va_arg): Special-case the\n\tDarwin64 ABI, for zero-sized objects.\n\nFrom-SVN: r162568", "tree": {"sha": "1cd17e43f44c7cc36ac816f6f4a4c4ee6e3cf175", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1cd17e43f44c7cc36ac816f6f4a4c4ee6e3cf175"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b316a1e8ba8bc6fd2c837906b84eead4162a14d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b316a1e8ba8bc6fd2c837906b84eead4162a14d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b316a1e8ba8bc6fd2c837906b84eead4162a14d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b316a1e8ba8bc6fd2c837906b84eead4162a14d/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9ab25e2b426a24273f121ea8d29239cc526ce72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9ab25e2b426a24273f121ea8d29239cc526ce72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9ab25e2b426a24273f121ea8d29239cc526ce72"}], "stats": {"total": 44, "additions": 44, "deletions": 0}, "files": [{"sha": "d5ceb35dbbb9119781fc5190553a5ac92d22073a", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b316a1e8ba8bc6fd2c837906b84eead4162a14d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b316a1e8ba8bc6fd2c837906b84eead4162a14d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=4b316a1e8ba8bc6fd2c837906b84eead4162a14d", "patch": "@@ -8995,6 +8995,50 @@ rs6000_gimplify_va_arg (tree valist, tree type, gimple_seq *pre_p,\n       return build_va_arg_indirect_ref (t);\n     }\n \n+  /* We need to deal with the fact that the darwin ppc64 ABI is defined by an\n+     earlier version of gcc, with the property that it always applied alignment\n+     adjustments to the va-args (even for zero-sized types).  The cheapest way\n+     to deal with this is to replicate the effect of the part of \n+     std_gimplify_va_arg_expr that carries out the align adjust, for the case \n+     of relevance.  \n+     We don't need to check for pass-by-reference because of the test above.\n+     We can return a simplifed answer, since we know there's no offset to add.  */\n+\n+  if (TARGET_MACHO\n+      && rs6000_darwin64_abi \n+      && integer_zerop (TYPE_SIZE (type)))\n+    {\n+      unsigned HOST_WIDE_INT align, boundary;\n+      tree valist_tmp = get_initialized_tmp_var (valist, pre_p, NULL);\n+      align = PARM_BOUNDARY / BITS_PER_UNIT;\n+      boundary = FUNCTION_ARG_BOUNDARY (TYPE_MODE (type), type);\n+      if (boundary > MAX_SUPPORTED_STACK_ALIGNMENT)\n+\tboundary = MAX_SUPPORTED_STACK_ALIGNMENT;\n+      boundary /= BITS_PER_UNIT;\n+      if (boundary > align)\n+\t{\n+\t  tree t ;\n+\t  /* This updates arg ptr by the amount that would be necessary\n+\t     to align the zero-sized (but not zero-alignment) item.  */\n+\t  t = build2 (MODIFY_EXPR, TREE_TYPE (valist), valist_tmp,\n+\t\t  fold_build2 (POINTER_PLUS_EXPR,\n+\t\t\t       TREE_TYPE (valist),\n+\t\t\t       valist_tmp, size_int (boundary - 1)));\n+\t  gimplify_and_add (t, pre_p);\n+\n+\t  t = fold_convert (sizetype, valist_tmp);\n+\t  t = build2 (MODIFY_EXPR, TREE_TYPE (valist), valist_tmp,\n+\t\t  fold_convert (TREE_TYPE (valist),\n+\t\t\t\tfold_build2 (BIT_AND_EXPR, sizetype, t,\n+\t\t\t\t\t     size_int (-boundary))));\n+\t  t = build2 (MODIFY_EXPR, TREE_TYPE (valist), valist, t);\n+\t  gimplify_and_add (t, pre_p);\n+\t}\n+      /* Since it is zero-sized there's no increment for the item itself. */\n+      valist_tmp = fold_convert (build_pointer_type (type), valist_tmp);\n+      return build_va_arg_indirect_ref (valist_tmp);\n+    }\n+\n   if (DEFAULT_ABI != ABI_V4)\n     {\n       if (targetm.calls.split_complex_arg && TREE_CODE (type) == COMPLEX_TYPE)"}]}