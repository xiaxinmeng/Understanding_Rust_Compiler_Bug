{"sha": "b9dcdee46edefdb67cbbb5aa0829fba999c2a1f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjlkY2RlZTQ2ZWRlZmRiNjdjYmJiNWFhMDgyOWZiYTk5OWMyYTFmMA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2004-03-03T11:25:51Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2004-03-03T11:25:51Z"}, "message": "ggc-common.c (ggc_alloc_cleared_stat, [...]): Rename from ...; make statistics transparent.\n\n\t* ggc-common.c (ggc_alloc_cleared_stat, ggc_realloc_stat):\n\tRename from ...; make statistics transparent.\n\t(ggc_alloc_cleared, ggc_realloc_stat): ... these.\n\t(loc_descriptor): New structure.\n\t(hash_descriptor, eq_descriptor, loc_descriptor, cmp_statistics,\n\tadd_statistics):\n\tNew static function.\n\t(ggc_record_overhead, dump_statistics): New global function.\n\t* ggc-none.c (ggc_alloc_types_stat, ggc_alloc_stat, ggc_alloc_zone_stat,\n\tggc_alloc_cleared_stat, ggc_realloc_stat, ggc_alloc_typed_stat): Rename\n\tfrom ...; accept locations\n\t(ggc_alloc_types, ggc_alloc, ggc_alloc_zone, ggc_alloc_cleared,\n\tggc_realloc, ggc_alloc_typed):  ... this one.\n\tfrom ...; accept locations\n\t* ggc-page.c (ggc_alloc_typed_stat, ggc_alloc_zone_stat,\n\tggc_alloc_stat): Rename from ... ; pass locations\n\t* ggc-page.c (ggc_alloc_typed, ggc_alloc_zone, ggc_alloc):\n\t... this one.\n\t(ggc_alloc_stat): Record overehead.\n\t* ggc.h (ggc_alloc_types, ggc_alloc, ggc_alloc_zone, ggc_alloc_cleared,\n\tggc_realloc, ggc_alloc_typed):  Turn to macros\n\t(ggc_alloc_types_stat, ggc_alloc_stat, ggc_alloc_zone_stat,\n\tggc_alloc_cleared_stat, ggc_realloc_stat, ggc_alloc_typed_stat): Declare.\n\t(dump_ggc_loc_satistics, ggc_record_overehead): Declare.\n\t* langhooks.h (lhd_make_node): Declare.\n\t(LANG_HOOKS_MAKE_TYPE): Default to new function,\n\t* langhooks.c (lhd_make_node): New.\n\t* rtl.c (rtx_alloc_stat, swallow_copy_rtx_stat): Rename from ... ; pass\n\tlocations.\n\t(rtx_alloc, swallow_copy_rtx): ... this one.\n\t* rtl.h (rtx_alloc, swallow_copy_rtx): Turn to macros.\n\t* rtl.c (rtx_alloc_stat, swallow_copy_rtx_stat): Declare.\n\t* toplpev.c (finalize): Dump stats.\n\t* tree.c (make_node_stat, copy_node_stat, make_tree_vec_stat,\n\tbuild_tree_list_stat, tree_cons_stat, build?_stat,  build_decl_stat):\n\tRename from ... ; pass locators.\n\t(make_node, copy_node, make_tree_vec, build_tree_list, tree_cons,\n\tbuild?,  build_decl): Declare.\n\t* tree.h (make_node_stat, copy_node_stat, make_tree_vec_stat,\n\tbuild_tree_list_stat, tree_cons_stat, build?_stat,  build_decl_stat):\n\tDeclare.\n\t(make_node, copy_node, make_tree_vec, build_tree_list, tree_cons,\n\tbuild?,  build_decl): New macros.\n\t* Makefile.in (RTL_H, TREE_H): Add statistics.h dependency.\n\t* statistics.h: New file.\n\nFrom-SVN: r78826", "tree": {"sha": "2b3885b2b287da398b70600d8381767cc76aa181", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b3885b2b287da398b70600d8381767cc76aa181"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9dcdee46edefdb67cbbb5aa0829fba999c2a1f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9dcdee46edefdb67cbbb5aa0829fba999c2a1f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9dcdee46edefdb67cbbb5aa0829fba999c2a1f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9dcdee46edefdb67cbbb5aa0829fba999c2a1f0/comments", "author": null, "committer": null, "parents": [{"sha": "6ba7b54780fd483f81c39e0ac07537cbe40063df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ba7b54780fd483f81c39e0ac07537cbe40063df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ba7b54780fd483f81c39e0ac07537cbe40063df"}], "stats": {"total": 395, "additions": 331, "deletions": 64}, "files": [{"sha": "7ed079e6db675e0f159923c3474ae7f1feb45f42", "filename": "gcc/ChangeLog", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9dcdee46edefdb67cbbb5aa0829fba999c2a1f0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9dcdee46edefdb67cbbb5aa0829fba999c2a1f0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b9dcdee46edefdb67cbbb5aa0829fba999c2a1f0", "patch": "@@ -1,3 +1,51 @@\n+2004-03-03  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ggc-common.c (ggc_alloc_cleared_stat, ggc_realloc_stat):\n+\tRename from ...; make statistics transparent.\n+\t(ggc_alloc_cleared, ggc_realloc_stat): ... these.\n+\t(loc_descriptor): New structure.\n+\t(hash_descriptor, eq_descriptor, loc_descriptor, cmp_statistics,\n+\tadd_statistics):\n+\tNew static function.\n+\t(ggc_record_overhead, dump_statistics): New global function.\n+\t* ggc-none.c (ggc_alloc_types_stat, ggc_alloc_stat, ggc_alloc_zone_stat,\n+\tggc_alloc_cleared_stat, ggc_realloc_stat, ggc_alloc_typed_stat): Rename\n+\tfrom ...; accept locations\n+\t(ggc_alloc_types, ggc_alloc, ggc_alloc_zone, ggc_alloc_cleared,\n+\tggc_realloc, ggc_alloc_typed):  ... this one.\n+\tfrom ...; accept locations\n+\t* ggc-page.c (ggc_alloc_typed_stat, ggc_alloc_zone_stat,\n+\tggc_alloc_stat): Rename from ... ; pass locations\n+\t* ggc-page.c (ggc_alloc_typed, ggc_alloc_zone, ggc_alloc):\n+\t... this one.\n+\t(ggc_alloc_stat): Record overehead.\n+\t* ggc.h (ggc_alloc_types, ggc_alloc, ggc_alloc_zone, ggc_alloc_cleared,\n+\tggc_realloc, ggc_alloc_typed):  Turn to macros\n+\t(ggc_alloc_types_stat, ggc_alloc_stat, ggc_alloc_zone_stat,\n+\tggc_alloc_cleared_stat, ggc_realloc_stat, ggc_alloc_typed_stat): Declare.\n+\t(dump_ggc_loc_satistics, ggc_record_overehead): Declare.\n+\t* langhooks.h (lhd_make_node): Declare.\n+\t(LANG_HOOKS_MAKE_TYPE): Default to new function,\n+\t* langhooks.c (lhd_make_node): New.\n+\t* rtl.c (rtx_alloc_stat, swallow_copy_rtx_stat): Rename from ... ; pass\n+\tlocations.\n+\t(rtx_alloc, swallow_copy_rtx): ... this one.\n+\t* rtl.h (rtx_alloc, swallow_copy_rtx): Turn to macros.\n+\t* rtl.c (rtx_alloc_stat, swallow_copy_rtx_stat): Declare.\n+\t* toplpev.c (finalize): Dump stats.\n+\t* tree.c (make_node_stat, copy_node_stat, make_tree_vec_stat,\n+\tbuild_tree_list_stat, tree_cons_stat, build?_stat,  build_decl_stat):\n+\tRename from ... ; pass locators.\n+\t(make_node, copy_node, make_tree_vec, build_tree_list, tree_cons,\n+\tbuild?,  build_decl): Declare.\n+\t* tree.h (make_node_stat, copy_node_stat, make_tree_vec_stat,\n+\tbuild_tree_list_stat, tree_cons_stat, build?_stat,  build_decl_stat):\n+\tDeclare.\n+\t(make_node, copy_node, make_tree_vec, build_tree_list, tree_cons,\n+\tbuild?,  build_decl): New macros.\n+\t* Makefile.in (RTL_H, TREE_H): Add statistics.h dependency.\n+\t* statistics.h: New file.\n+\n 2004-03-03  Maciej W. Rozycki  <macro@ds2.pg.gda.pl>\n \t    Richard Sandiford  <rsandifo@redhat.com>\n "}, {"sha": "416e2305edc20d993acee3510bb78226fb6286e8", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9dcdee46edefdb67cbbb5aa0829fba999c2a1f0/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9dcdee46edefdb67cbbb5aa0829fba999c2a1f0/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=b9dcdee46edefdb67cbbb5aa0829fba999c2a1f0", "patch": "@@ -663,10 +663,10 @@ LANGHOOKS_DEF_H = langhooks-def.h $(HOOKS_H)\n TARGET_DEF_H = target-def.h $(HOOKS_H)\n MACHMODE_H = machmode.h mode-classes.def insn-modes.h\n RTL_BASE_H = rtl.h rtl.def $(MACHMODE_H)\n-RTL_H = $(RTL_BASE_H) genrtl.h input.h\n+RTL_H = $(RTL_BASE_H) genrtl.h input.h statistics.h\n PARAMS_H = params.h params.def\n TREE_H = tree.h tree.def $(MACHMODE_H) tree-check.h version.h builtins.def \\\n-          input.h\n+          input.h statistics.h\n BASIC_BLOCK_H = basic-block.h bitmap.h sbitmap.h varray.h $(PARTITION_H) \\\n           hard-reg-set.h cfghooks.h\n COVERAGE_H = coverage.h gcov-io.h gcov-iov.h"}, {"sha": "70a0d084c8172fb9326be93e8c95dc316ead0252", "filename": "gcc/ggc-common.c", "status": "modified", "additions": 142, "deletions": 5, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9dcdee46edefdb67cbbb5aa0829fba999c2a1f0/gcc%2Fggc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9dcdee46edefdb67cbbb5aa0829fba999c2a1f0/gcc%2Fggc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-common.c?ref=b9dcdee46edefdb67cbbb5aa0829fba999c2a1f0", "patch": "@@ -129,22 +129,22 @@ ggc_mark_roots (void)\n \n /* Allocate a block of memory, then clear it.  */\n void *\n-ggc_alloc_cleared (size_t size)\n+ggc_alloc_cleared_stat (size_t size MEM_STAT_DECL)\n {\n-  void *buf = ggc_alloc (size);\n+  void *buf = ggc_alloc_stat (size PASS_MEM_STAT);\n   memset (buf, 0, size);\n   return buf;\n }\n \n /* Resize a block of memory, possibly re-allocating it.  */\n void *\n-ggc_realloc (void *x, size_t size)\n+ggc_realloc_stat (void *x, size_t size MEM_STAT_DECL)\n {\n   void *r;\n   size_t old_size;\n \n   if (x == NULL)\n-    return ggc_alloc (size);\n+    return ggc_alloc_stat (size PASS_MEM_STAT);\n \n   old_size = ggc_get_size (x);\n \n@@ -166,7 +166,7 @@ ggc_realloc (void *x, size_t size)\n       return x;\n     }\n \n-  r = ggc_alloc (size);\n+  r = ggc_alloc_stat (size PASS_MEM_STAT);\n \n   /* Since ggc_get_size returns the size of the pool, not the size of the\n      individually allocated object, we'd access parts of the old object\n@@ -761,3 +761,140 @@ init_ggc_heuristics (void)\n   set_param_value (\"ggc-min-heapsize\", ggc_min_heapsize_heuristic());\n #endif\n }\n+\n+#ifdef GATHER_STATISTICS\n+\n+/* Datastructure used to store per-call-site statistics.  */\n+struct loc_descriptor\n+{\n+  const char *file;\n+  int line;\n+  const char *function;\n+  int times;\n+  size_t allocated;\n+  size_t overhead;\n+};\n+\n+/* Hashtable used for statistics.  */\n+static htab_t loc_hash;\n+\n+/* Hash table helpers functions.  */\n+static hashval_t\n+hash_descriptor (const void *p)\n+{\n+  const struct loc_descriptor *d = p;\n+\n+  return htab_hash_pointer (d->function) | d->line;\n+}\n+\n+static int\n+eq_descriptor (const void *p1, const void *p2)\n+{\n+  const struct loc_descriptor *d = p1;\n+  const struct loc_descriptor *d2 = p2;\n+\n+  return (d->file == d2->file && d->line == d2->line\n+\t  && d->function == d2->function);\n+}\n+\n+/* Return descriptor for given call site, create new one if needed.  */\n+static struct loc_descriptor *\n+loc_descriptor (const char *name, int line, const char *function)\n+{\n+  struct loc_descriptor loc;\n+  struct loc_descriptor **slot;\n+\n+  loc.file = name;\n+  loc.line = line;\n+  loc.function = function;\n+  if (!loc_hash)\n+    loc_hash = htab_create (10, hash_descriptor, eq_descriptor, NULL);\n+\n+  slot = (struct loc_descriptor **) htab_find_slot (loc_hash, &loc, 1);\n+  if (*slot)\n+    return *slot;\n+  *slot = xcalloc (sizeof (**slot), 1);\n+  (*slot)->file = name;\n+  (*slot)->line = line;\n+  (*slot)->function = function;\n+  return *slot;\n+}\n+\n+/* Record ALLOCATED and OVERHEAD bytes to descritor NAME:LINE (FUNCTION).  */\n+void ggc_record_overhead (size_t allocated, size_t overhead,\n+\t\t\t  const char *name, int line, const char *function)\n+{\n+  struct loc_descriptor *loc = loc_descriptor (name, line, function);\n+\n+  loc->times++;\n+  loc->allocated+=allocated;\n+  loc->overhead+=overhead;\n+}\n+\n+/* Helper for qsort; sort descriptors by amount of memory consumed.  */\n+static int\n+cmp_statistic (const void *loc1, const void *loc2)\n+{\n+  struct loc_descriptor *l1 = *(struct loc_descriptor **) loc1;\n+  struct loc_descriptor *l2 = *(struct loc_descriptor **) loc2;\n+  return (l1->allocated + l1->overhead) - (l2->allocated + l2->overhead);\n+}\n+\n+/* Collect array of the descriptors from hashtable.  */\n+struct loc_descriptor **loc_array;\n+static int\n+add_statistics (void **slot, void *b)\n+{\n+  int *n = (int *)b;\n+  loc_array[*n] = (struct loc_descriptor *) *slot;\n+  (*n)++;\n+  return 1;\n+}\n+\n+/* Dump per-site memory statistics.  */\n+#endif\n+void dump_ggc_loc_statistics (void)\n+{\n+#ifdef GATHER_STATISTICS\n+  int nentries = 0;\n+  char s[4096];\n+  size_t count, size, overhead;\n+  int i;\n+\n+  loc_array = xcalloc (sizeof (*loc_array), loc_hash->n_elements);\n+  fprintf (stderr, \"-------------------------------------------------------\\n\");\n+  fprintf (stderr, \"\\n%-60s %10s %10s %10s\\n\",\n+\t   \"source location\", \"Times\", \"Allocated\", \"Overhead\");\n+  fprintf (stderr, \"-------------------------------------------------------\\n\");\n+  count = 0;\n+  size = 0;\n+  overhead = 0;\n+  htab_traverse (loc_hash, add_statistics, &nentries);\n+  qsort (loc_array, nentries, sizeof (*loc_array), cmp_statistic);\n+  for (i = 0; i < nentries; i++)\n+    {\n+      struct loc_descriptor *d = loc_array[i];\n+      size += d->allocated;\n+      count += d->times;\n+      overhead += d->overhead;\n+    }\n+  for (i = 0; i < nentries; i++)\n+    {\n+      struct loc_descriptor *d = loc_array[i];\n+      if (d->allocated)\n+\t{\n+\t  const char *s1 = d->file;\n+\t  const char *s2;\n+\t  while ((s2 = strstr (s1, \"gcc/\")))\n+\t    s1 = s2 + 4;\n+\t  sprintf (s, \"%s:%i (%s)\", s1, d->line, d->function);\n+\t  fprintf (stderr, \"%-60s %10i %10li %10li:%.3f%%\\n\", s,\n+\t\t   d->times, (long)d->allocated, (long)d->overhead,\n+\t\t   (d->allocated + d->overhead) *100.0 / (size + overhead));\n+\t}\n+    }\n+  fprintf (stderr, \"%-60s %10ld %10ld %10ld\\n\",\n+\t   \"Total\", (long)count, (long)size, (long)overhead);\n+  fprintf (stderr, \"-------------------------------------------------------\\n\");\n+#endif\n+}"}, {"sha": "0a97d95456be1bb71d61db560c04fdee5f683b3a", "filename": "gcc/ggc-none.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9dcdee46edefdb67cbbb5aa0829fba999c2a1f0/gcc%2Fggc-none.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9dcdee46edefdb67cbbb5aa0829fba999c2a1f0/gcc%2Fggc-none.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-none.c?ref=b9dcdee46edefdb67cbbb5aa0829fba999c2a1f0", "patch": "@@ -32,31 +32,33 @@ struct alloc_zone *rtl_zone = NULL;\n struct alloc_zone *garbage_zone = NULL;\n \n void *\n-ggc_alloc_typed (enum gt_types_enum gte ATTRIBUTE_UNUSED, size_t size)\n+ggc_alloc_typed_stat (enum gt_types_enum gte ATTRIBUTE_UNUSED, size_t size\n+\t\t      MEM_STAT_DECL)\n {\n   return xmalloc (size);\n }\n \n void *\n-ggc_alloc (size_t size)\n+ggc_alloc_stat (size_t size MEM_STAT_DECL)\n {\n   return xmalloc (size);\n }\n \n void *\n-ggc_alloc_zone (size_t size, struct alloc_zone *zone ATTRIBUTE_UNUSED)\n+ggc_alloc_zone_stat (size_t size, struct alloc_zone *zone ATTRIBUTE_UNUSED\n+\t\t     MEM_STAT_DECL)\n {\n   return xmalloc (size);\n }\n \n void *\n-ggc_alloc_cleared (size_t size)\n+ggc_alloc_cleared_stat (size_t size MEM_STAT_DECL)\n {\n   return xcalloc (size, 1);\n }\n \n void *\n-ggc_realloc (void *x, size_t size)\n+ggc_realloc_stat (void *x, size_t size MEM_STAT_DECL)\n {\n   return xrealloc (x, size);\n }"}, {"sha": "dadc1249c89742ff49f51afbcb91e113d57ada66", "filename": "gcc/ggc-page.c", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9dcdee46edefdb67cbbb5aa0829fba999c2a1f0/gcc%2Fggc-page.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9dcdee46edefdb67cbbb5aa0829fba999c2a1f0/gcc%2Fggc-page.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-page.c?ref=b9dcdee46edefdb67cbbb5aa0829fba999c2a1f0", "patch": "@@ -1044,23 +1044,25 @@ static unsigned char size_lookup[257] =\n /* Typed allocation function.  Does nothing special in this collector.  */\n \n void *\n-ggc_alloc_typed (enum gt_types_enum type ATTRIBUTE_UNUSED, size_t size)\n+ggc_alloc_typed_stat (enum gt_types_enum type ATTRIBUTE_UNUSED, size_t size\n+\t\t      MEM_STAT_DECL)\n {\n-  return ggc_alloc (size);\n+  return ggc_alloc_stat (size PASS_MEM_STAT);\n }\n \n /* Zone allocation function.  Does nothing special in this collector.  */\n \n void *\n-ggc_alloc_zone (size_t size, struct alloc_zone *zone ATTRIBUTE_UNUSED)\n+ggc_alloc_zone_stat (size_t size, struct alloc_zone *zone ATTRIBUTE_UNUSED\n+\t\t     MEM_STAT_DECL)\n {\n-  return ggc_alloc (size);\n+  return ggc_alloc_stat (size PASS_MEM_STAT);\n }\n \n /* Allocate a chunk of memory of SIZE bytes.  Its contents are undefined.  */\n \n void *\n-ggc_alloc (size_t size)\n+ggc_alloc_stat (size_t size MEM_STAT_DECL)\n {\n   size_t order, word, bit, object_offset, object_size;\n   struct page_entry *entry;\n@@ -1171,6 +1173,9 @@ ggc_alloc (size_t size)\n       G.page_tails[order]->next = entry;\n       G.page_tails[order] = entry;\n     }\n+#ifdef GATHER_STATISTICS\n+  ggc_record_overhead (OBJECT_SIZE (order), OBJECT_SIZE (order) - size PASS_MEM_STAT);\n+#endif\n \n   /* Calculate the object's address.  */\n   result = entry->page + object_offset;"}, {"sha": "4ce271a0760a651abd88d47d8d0daa8e60409362", "filename": "gcc/ggc.h", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9dcdee46edefdb67cbbb5aa0829fba999c2a1f0/gcc%2Fggc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9dcdee46edefdb67cbbb5aa0829fba999c2a1f0/gcc%2Fggc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc.h?ref=b9dcdee46edefdb67cbbb5aa0829fba999c2a1f0", "patch": "@@ -21,6 +21,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n #ifndef GCC_GGC_H\n #define GCC_GGC_H\n+#include \"statistics.h\"\n \n /* Symbols are marked with `ggc' for `gcc gc' so as not to interfere with\n    an external gc library that might be linked in.  */\n@@ -210,21 +211,31 @@ extern struct alloc_zone *rtl_zone;\n extern struct alloc_zone *tree_zone;\n \n /* The internal primitive.  */\n-extern void *ggc_alloc (size_t);\n+extern void *ggc_alloc_stat (size_t MEM_STAT_DECL);\n+#define ggc_alloc(s) ggc_alloc_stat (s MEM_STAT_INFO)\n /* Allocate an object into the specified allocation zone.  */\n-extern void *ggc_alloc_zone (size_t, struct alloc_zone *);\n+extern void *ggc_alloc_zone_stat (size_t, struct alloc_zone * MEM_STAT_DECL);\n+#define ggc_alloc_zone(s,z) ggc_alloc_zone_stat (s,z MEM_STAT_INFO)\n /* Allocate an object of the specified type and size.  */\n-extern void *ggc_alloc_typed (enum gt_types_enum, size_t);\n+extern void *ggc_alloc_typed_stat (enum gt_types_enum, size_t MEM_STAT_DECL);\n+#define ggc_alloc_typed(s,z) ggc_alloc_typed_stat (s,z MEM_STAT_INFO)\n /* Like ggc_alloc, but allocates cleared memory.  */\n-extern void *ggc_alloc_cleared (size_t);\n+extern void *ggc_alloc_cleared_stat (size_t MEM_STAT_DECL);\n+#define ggc_alloc_cleared(s) ggc_alloc_cleared_stat (s MEM_STAT_INFO)\n /* Like ggc_alloc_zone, but allocates cleared memory.  */\n-extern void *ggc_alloc_cleared_zone (size_t, struct alloc_zone *);\n+extern void *ggc_alloc_cleared_zone (size_t, struct alloc_zone * MEM_STAT_DECL);\n+#define ggc_alloc_cleared_zone(s,z) ggc_alloc_cleared_stat (s,z MEM_STAT_INFO)\n /* Resize a block.  */\n-extern void *ggc_realloc (void *, size_t);\n+extern void *ggc_realloc_stat (void *, size_t MEM_STAT_DECL);\n+#define ggc_realloc(s,z) ggc_realloc_stat (s,z MEM_STAT_INFO)\n /* Like ggc_alloc_cleared, but performs a multiplication.  */\n extern void *ggc_calloc (size_t, size_t);\n /* Free a block.  To be used when known for certain it's not reachable.  */\n extern void ggc_free (void *);\n+ \n+extern void ggc_record_overhead (size_t, size_t MEM_STAT_DECL);\n+\n+extern void dump_ggc_loc_statistics (void);\n \n #define ggc_alloc_rtx(CODE)                    \\\n   ((rtx) ggc_alloc_typed (gt_ggc_e_7rtx_def, RTX_SIZE (CODE)))"}, {"sha": "f9e621f3e289648457d2b79cc80f3c6301ad7965", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9dcdee46edefdb67cbbb5aa0829fba999c2a1f0/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9dcdee46edefdb67cbbb5aa0829fba999c2a1f0/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=b9dcdee46edefdb67cbbb5aa0829fba999c2a1f0", "patch": "@@ -206,6 +206,7 @@ extern tree lhd_callgraph_analyze_expr (tree *, int *, tree);\n /* Tree dump hooks.  */\n extern bool lhd_tree_dump_dump_tree (void *, tree);\n extern int lhd_tree_dump_type_quals (tree);\n+extern tree lhd_make_node (enum tree_code);\n \n #define LANG_HOOKS_TREE_DUMP_DUMP_TREE_FN lhd_tree_dump_dump_tree\n #define LANG_HOOKS_TREE_DUMP_TYPE_QUALS_FN lhd_tree_dump_type_quals\n@@ -217,7 +218,7 @@ extern int lhd_tree_dump_type_quals (tree);\n \n /* Types hooks.  There are no reasonable defaults for most of them,\n    so we create a compile-time error instead.  */\n-#define LANG_HOOKS_MAKE_TYPE make_node\n+#define LANG_HOOKS_MAKE_TYPE lhd_make_node\n #define LANG_HOOKS_INCOMPLETE_TYPE_ERROR lhd_incomplete_type_error\n #define LANG_HOOKS_TYPE_PROMOTES_TO lhd_type_promotes_to\n #define LANG_HOOKS_REGISTER_BUILTIN_TYPE lhd_register_builtin_type"}, {"sha": "d37ba2135863e2851104fd6ca31c6931399127e7", "filename": "gcc/langhooks.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9dcdee46edefdb67cbbb5aa0829fba999c2a1f0/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9dcdee46edefdb67cbbb5aa0829fba999c2a1f0/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=b9dcdee46edefdb67cbbb5aa0829fba999c2a1f0", "patch": "@@ -562,4 +562,10 @@ lhd_callgraph_analyze_expr (tree *tp ATTRIBUTE_UNUSED,\n   return NULL;\n }\n \n+tree\n+lhd_make_node (enum tree_code code)\n+{\n+  return make_node (code);\n+}\n+\n #include \"gt-langhooks.h\""}, {"sha": "9f545d836234e4b21392a8f4f1f81333d3f9bbf2", "filename": "gcc/rtl.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9dcdee46edefdb67cbbb5aa0829fba999c2a1f0/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9dcdee46edefdb67cbbb5aa0829fba999c2a1f0/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=b9dcdee46edefdb67cbbb5aa0829fba999c2a1f0", "patch": "@@ -173,11 +173,11 @@ rtvec_alloc (int n)\n    all the rest is initialized to zero.  */\n \n rtx\n-rtx_alloc (RTX_CODE code)\n+rtx_alloc_stat (RTX_CODE code MEM_STAT_DECL)\n {\n   rtx rt;\n \n-  rt = ggc_alloc_rtx (code);\n+  rt = ggc_alloc_typed_stat (gt_ggc_e_7rtx_def, RTX_SIZE (code) PASS_MEM_STAT);\n \n   /* We want to clear everything up to the FLD array.  Normally, this\n      is one int, but we don't want to assume that and it isn't very\n@@ -309,11 +309,12 @@ copy_rtx (rtx orig)\n /* Create a new copy of an rtx.  Only copy just one level.  */\n \n rtx\n-shallow_copy_rtx (rtx orig)\n+shallow_copy_rtx_stat (rtx orig MEM_STAT_DECL)\n {\n   rtx copy;\n \n-  copy = ggc_alloc_rtx (GET_CODE (orig));\n+  copy = ggc_alloc_typed_stat (gt_ggc_e_7rtx_def, RTX_SIZE (GET_CODE (orig))\n+\t\t\t       PASS_MEM_STAT);\n   memcpy (copy, orig, RTX_SIZE (GET_CODE (orig)));\n   return copy;\n }"}, {"sha": "66578d08bf50529ea8d2657bb93f64ee744e0a45", "filename": "gcc/rtl.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9dcdee46edefdb67cbbb5aa0829fba999c2a1f0/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9dcdee46edefdb67cbbb5aa0829fba999c2a1f0/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=b9dcdee46edefdb67cbbb5aa0829fba999c2a1f0", "patch": "@@ -21,6 +21,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n #ifndef GCC_RTL_H\n #define GCC_RTL_H\n+#include \"statistics.h\"\n \n struct function;\n \n@@ -1556,9 +1557,12 @@ extern rtx emit_copy_of_insn_after (rtx, rtx);\n extern void set_reg_attrs_from_mem (rtx, rtx);\n extern void set_mem_attrs_from_reg (rtx, rtx);\n extern void set_reg_attrs_for_parm (rtx, rtx);\n+extern void set_reg_pointer_align (rtx, unsigned int);\n \n /* In rtl.c */\n-extern rtx rtx_alloc (RTX_CODE);\n+extern rtx rtx_alloc_stat (RTX_CODE MEM_STAT_DECL);\n+#define rtx_alloc(c) rtx_alloc_stat (c MEM_STAT_INFO)\n+\n extern rtvec rtvec_alloc (int);\n extern rtx copy_rtx (rtx);\n extern void dump_rtx_statistics (void);\n@@ -1568,7 +1572,8 @@ extern rtx copy_rtx_if_shared (rtx);\n \n /* In rtl.c */\n extern rtx copy_most_rtx (rtx, rtx);\n-extern rtx shallow_copy_rtx (rtx);\n+extern rtx shallow_copy_rtx_stat (rtx MEM_STAT_DECL);\n+#define shallow_copy_rtx(a) shallow_copy_rtx_stat (a MEM_STAT_INFO)\n extern int rtx_equal_p (rtx, rtx);\n \n /* In emit-rtl.c */"}, {"sha": "2b0656574ddbf3c1346b5e10f08ee03203d2643e", "filename": "gcc/statistics.h", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9dcdee46edefdb67cbbb5aa0829fba999c2a1f0/gcc%2Fstatistics.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9dcdee46edefdb67cbbb5aa0829fba999c2a1f0/gcc%2Fstatistics.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstatistics.h?ref=b9dcdee46edefdb67cbbb5aa0829fba999c2a1f0", "patch": "@@ -0,0 +1,34 @@\n+/* Memory statistics helpers.\n+   Copyright (C) 2004\n+   Free Software Foundation, Inc.\n+   Contributed by Cygnus Solutions.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 2, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING.  If not, write to the Free\n+   the Free Software Foundation, 59 Temple Place - Suite 330, Boston,\n+   MA 02111-1307, USA.  */\n+\n+#ifndef GCC_STATISTICS\n+#define GCC_STATISTICS\n+#ifdef GATHER_STATISTICS\n+#define MEM_STAT_DECL , const char *_loc_name ATTRIBUTE_UNUSED, int _loc_line ATTRIBUTE_UNUSED, const char *_loc_function ATTRIBUTE_UNUSED\n+#define PASS_MEM_STAT , _loc_name, _loc_line,  _loc_function\n+#define MEM_STAT_INFO , __FILE__, __LINE__, __FUNCTION__\n+#else\n+#define MEM_STAT_DECL\n+#define PASS_MEM_STAT\n+#define MEM_STAT_INFO\n+#endif\n+#endif"}, {"sha": "da9e7f90bab88ba7772a2e21fa866f856d5b50de", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9dcdee46edefdb67cbbb5aa0829fba999c2a1f0/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9dcdee46edefdb67cbbb5aa0829fba999c2a1f0/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=b9dcdee46edefdb67cbbb5aa0829fba999c2a1f0", "patch": "@@ -2527,6 +2527,7 @@ finalize (void)\n       dump_rtx_statistics ();\n       dump_varray_statistics ();\n       dump_alloc_pool_statistics ();\n+      dump_ggc_loc_statistics ();\n     }\n \n   /* Free up memory for the benefit of leak detectors.  */"}, {"sha": "633dcd1fcb9c8529ff9d48a935b72d0aff77cb45", "filename": "gcc/tree.c", "status": "modified", "additions": 26, "deletions": 23, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9dcdee46edefdb67cbbb5aa0829fba999c2a1f0/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9dcdee46edefdb67cbbb5aa0829fba999c2a1f0/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=b9dcdee46edefdb67cbbb5aa0829fba999c2a1f0", "patch": "@@ -200,7 +200,7 @@ tree_size (tree node)\n    Achoo!  I got a code in the node.  */\n \n tree\n-make_node (enum tree_code code)\n+make_node_stat (enum tree_code code MEM_STAT_DECL)\n {\n   tree t;\n   int type = TREE_CODE_CLASS (code);\n@@ -269,7 +269,7 @@ make_node (enum tree_code code)\n   tree_node_sizes[(int) kind] += length;\n #endif\n \n-  t = ggc_alloc_tree (length);\n+  t = ggc_alloc_zone_stat (length, tree_zone PASS_MEM_STAT);\n \n   memset (t, 0, length);\n \n@@ -340,14 +340,14 @@ make_node (enum tree_code code)\n    TREE_CHAIN is zero and it has a fresh uid.  */\n \n tree\n-copy_node (tree node)\n+copy_node_stat (tree node MEM_STAT_DECL)\n {\n   tree t;\n   enum tree_code code = TREE_CODE (node);\n   size_t length;\n \n   length = tree_size (node);\n-  t = ggc_alloc_tree (length);\n+  t = ggc_alloc_zone_stat (length, tree_zone PASS_MEM_STAT);\n   memcpy (t, node, length);\n \n   TREE_CHAIN (t) = 0;\n@@ -554,7 +554,7 @@ build_complex (tree type, tree real, tree imag)\n /* Build a newly constructed TREE_VEC node of length LEN.  */\n \n tree\n-make_tree_vec (int len)\n+make_tree_vec_stat (int len MEM_STAT_DECL)\n {\n   tree t;\n   int length = (len - 1) * sizeof (tree) + sizeof (struct tree_vec);\n@@ -564,9 +564,10 @@ make_tree_vec (int len)\n   tree_node_sizes[(int) vec_kind] += length;\n #endif\n \n-  t = ggc_alloc_tree (length);\n+  t = ggc_alloc_zone_stat (length, tree_zone PASS_MEM_STAT);\n \n   memset (t, 0, length);\n+\n   TREE_SET_CODE (t, TREE_VEC);\n   TREE_VEC_LENGTH (t) = len;\n \n@@ -1024,9 +1025,9 @@ nreverse (tree t)\n    purpose and value fields are PARM and VALUE.  */\n \n tree\n-build_tree_list (tree parm, tree value)\n+build_tree_list_stat (tree parm, tree value MEM_STAT_DECL)\n {\n-  tree t = make_node (TREE_LIST);\n+  tree t = make_node_stat (TREE_LIST PASS_MEM_STAT);\n   TREE_PURPOSE (t) = parm;\n   TREE_VALUE (t) = value;\n   return t;\n@@ -1037,11 +1038,12 @@ build_tree_list (tree parm, tree value)\n    and whose TREE_CHAIN is CHAIN.  */\n \n tree\n-tree_cons (tree purpose, tree value, tree chain)\n+tree_cons_stat (tree purpose, tree value, tree chain MEM_STAT_DECL)\n {\n   tree node;\n \n-  node = ggc_alloc_tree (sizeof (struct tree_list));\n+  node = ggc_alloc_zone_stat (sizeof (struct tree_list),\n+\t\t\t      tree_zone PASS_MEM_STAT);\n \n   memset (node, 0, sizeof (struct tree_common));\n \n@@ -2296,7 +2298,7 @@ stabilize_reference_1 (tree e)\n    magic within the build macro.  */\n \n tree\n-build0 (enum tree_code code, tree tt)\n+build0_stat (enum tree_code code, tree tt MEM_STAT_DECL)\n {\n   tree t;\n \n@@ -2305,14 +2307,14 @@ build0 (enum tree_code code, tree tt)\n     abort ();\n #endif\n \n-  t = make_node (code);\n+  t = make_node_stat (code PASS_MEM_STAT);\n   TREE_TYPE (t) = tt;\n \n   return t;\n }\n \n tree\n-build1 (enum tree_code code, tree type, tree node)\n+build1_stat (enum tree_code code, tree type, tree node MEM_STAT_DECL)\n {\n   int length = sizeof (struct tree_exp);\n #ifdef GATHER_STATISTICS\n@@ -2343,7 +2345,7 @@ build1 (enum tree_code code, tree type, tree node)\n     abort ();\n #endif /* ENABLE_CHECKING */\n \n-  t = ggc_alloc_tree (length);\n+  t = ggc_alloc_zone_stat (length, tree_zone PASS_MEM_STAT);\n \n   memset (t, 0, sizeof (struct tree_common));\n \n@@ -2429,7 +2431,7 @@ build1 (enum tree_code code, tree type, tree node)\n   } while (0)\n \n tree\n-build2 (enum tree_code code, tree tt, tree arg0, tree arg1)\n+build2_stat (enum tree_code code, tree tt, tree arg0, tree arg1 MEM_STAT_DECL)\n {\n   bool constant, read_only, side_effects;\n   tree t;\n@@ -2440,7 +2442,7 @@ build2 (enum tree_code code, tree tt, tree arg0, tree arg1)\n     abort ();\n #endif\n \n-  t = make_node (code);\n+  t = make_node_stat (code PASS_MEM_STAT);\n   TREE_TYPE (t) = tt;\n \n   /* Below, we automatically set TREE_SIDE_EFFECTS and TREE_READONLY for the\n@@ -2487,7 +2489,8 @@ build2 (enum tree_code code, tree tt, tree arg0, tree arg1)\n }\n \n tree\n-build3 (enum tree_code code, tree tt, tree arg0, tree arg1, tree arg2)\n+build3_stat (enum tree_code code, tree tt, tree arg0, tree arg1,\n+\t     tree arg2 MEM_STAT_DECL)\n {\n   bool constant, read_only, side_effects;\n   tree t;\n@@ -2508,7 +2511,7 @@ build3 (enum tree_code code, tree tt, tree arg0, tree arg1, tree arg2)\n     abort ();\n #endif\n \n-  t = make_node (code);\n+  t = make_node_stat (code PASS_MEM_STAT);\n   TREE_TYPE (t) = tt;\n \n   fro = first_rtl_op (code);\n@@ -2525,8 +2528,8 @@ build3 (enum tree_code code, tree tt, tree arg0, tree arg1, tree arg2)\n }\n \n tree\n-build4 (enum tree_code code, tree tt, tree arg0, tree arg1,\n-\ttree arg2, tree arg3)\n+build4_stat (enum tree_code code, tree tt, tree arg0, tree arg1,\n+\t     tree arg2, tree arg3 MEM_STAT_DECL)\n {\n   bool constant, read_only, side_effects;\n   tree t;\n@@ -2537,7 +2540,7 @@ build4 (enum tree_code code, tree tt, tree arg0, tree arg1,\n     abort ();\n #endif\n \n-  t = make_node (code);\n+  t = make_node_stat (code PASS_MEM_STAT);\n   TREE_TYPE (t) = tt;\n \n   fro = first_rtl_op (code);\n@@ -2631,11 +2634,11 @@ build_nt (enum tree_code code, ...)\n    Other slots are initialized to 0 or null pointers.  */\n \n tree\n-build_decl (enum tree_code code, tree name, tree type)\n+build_decl_stat (enum tree_code code, tree name, tree type MEM_STAT_DECL)\n {\n   tree t;\n \n-  t = make_node (code);\n+  t = make_node_stat (code PASS_MEM_STAT);\n \n /*  if (type == error_mark_node)\n     type = integer_type_node; */"}, {"sha": "2d14d898da93efaab72db77fe63e3b97be8b753b", "filename": "gcc/tree.h", "status": "modified", "additions": 24, "deletions": 11, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9dcdee46edefdb67cbbb5aa0829fba999c2a1f0/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9dcdee46edefdb67cbbb5aa0829fba999c2a1f0/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=b9dcdee46edefdb67cbbb5aa0829fba999c2a1f0", "patch": "@@ -25,6 +25,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"machmode.h\"\n #include \"version.h\"\n #include \"input.h\"\n+#include \"statistics.h\"\n \n /* Codes of tree nodes */\n \n@@ -2066,19 +2067,22 @@ extern size_t tree_size (tree);\n    The TREE_CODE is the only argument.  Contents are initialized\n    to zero except for a few of the common fields.  */\n \n-extern tree make_node (enum tree_code);\n+extern tree make_node_stat (enum tree_code MEM_STAT_DECL);\n+#define make_node(t) make_node_stat (t MEM_STAT_INFO)\n \n /* Make a copy of a node, with all the same contents.  */\n \n-extern tree copy_node (tree);\n+extern tree copy_node_stat (tree MEM_STAT_DECL);\n+#define copy_node(t) copy_node_stat (t MEM_STAT_INFO)\n \n /* Make a copy of a chain of TREE_LIST nodes.  */\n \n extern tree copy_list (tree);\n \n /* Make a TREE_VEC.  */\n \n-extern tree make_tree_vec (int);\n+extern tree make_tree_vec_stat (int MEM_STAT_DECL);\n+#define make_tree_vec(t) make_tree_vec_stat (t MEM_STAT_INFO)\n \n /* Return the (unique) IDENTIFIER_NODE node for a given name.\n    The name is supplied as a char *.  */\n@@ -2124,20 +2128,28 @@ extern tree build_nt (enum tree_code, ...);\n #define _buildC2(x,a1,a2,a3,a4,a5,a6,a7,a8,a9,c,...) c\n #endif\n \n-extern tree build0 (enum tree_code, tree);\n-extern tree build1 (enum tree_code, tree, tree);\n-extern tree build2 (enum tree_code, tree, tree, tree);\n-extern tree build3 (enum tree_code, tree, tree, tree, tree);\n-extern tree build4 (enum tree_code, tree, tree, tree, tree, tree);\n+extern tree build0_stat (enum tree_code, tree MEM_STAT_DECL);\n+#define build0(c,t) build0_stat (c,t MEM_STAT_INFO)\n+extern tree build1_stat (enum tree_code, tree, tree MEM_STAT_DECL);\n+#define build1(c,t1,t2) build1_stat (c,t1,t2 MEM_STAT_INFO)\n+extern tree build2_stat (enum tree_code, tree, tree, tree MEM_STAT_DECL);\n+#define build2(c,t1,t2,t3) build2_stat (c,t1,t2,t3 MEM_STAT_INFO)\n+extern tree build3_stat (enum tree_code, tree, tree, tree, tree MEM_STAT_DECL);\n+#define build3(c,t1,t2,t3,t4) build3_stat (c,t1,t2,t3,t4 MEM_STAT_INFO)\n+extern tree build4_stat (enum tree_code, tree, tree, tree, tree,\n+\t\t\t tree MEM_STAT_DECL);\n+#define build4(c,t1,t2,t3,t4,t5) build4_stat (c,t1,t2,t3,t4,t5 MEM_STAT_INFO)\n \n extern tree build_int_2_wide (unsigned HOST_WIDE_INT, HOST_WIDE_INT);\n extern tree build_vector (tree, tree);\n extern tree build_constructor (tree, tree);\n extern tree build_real_from_int_cst (tree, tree);\n extern tree build_complex (tree, tree, tree);\n extern tree build_string (int, const char *);\n-extern tree build_tree_list (tree, tree);\n-extern tree build_decl (enum tree_code, tree, tree);\n+extern tree build_tree_list_stat (tree, tree MEM_STAT_DECL);\n+#define build_tree_list(t,q) build_tree_list_stat(t,q MEM_STAT_INFO)\n+extern tree build_decl_stat (enum tree_code, tree, tree MEM_STAT_DECL);\n+#define build_decl(c,t,q) build_decl_stat (c,t,q MEM_STAT_INFO)\n extern tree build_block (tree, tree, tree, tree, tree);\n extern tree build_expr_wfl (tree, const char *, int, int);\n \n@@ -2495,7 +2507,8 @@ extern tree chainon (tree, tree);\n \n /* Make a new TREE_LIST node from specified PURPOSE, VALUE and CHAIN.  */\n \n-extern tree tree_cons (tree, tree, tree);\n+extern tree tree_cons_stat (tree, tree, tree MEM_STAT_DECL);\n+#define tree_cons(t,q,w) tree_cons_stat (t,q,w MEM_STAT_INFO)\n \n /* Return the last tree node in a chain.  */\n "}]}