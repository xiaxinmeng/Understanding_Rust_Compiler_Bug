{"sha": "0b69c29f22d08dba08c8913e2f4778d14d64e239", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGI2OWMyOWYyMmQwOGRiYTA4Yzg5MTNlMmY0Nzc4ZDE0ZDY0ZTIzOQ==", "commit": {"author": {"name": "James E Wilson", "email": "wilson@specifixinc.com", "date": "2003-11-11T20:54:38Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2003-11-11T20:54:38Z"}, "message": "Undo accidental GET_MODE_BITSIZE damage.\n\n(store_bit_field, extract_bit_field): Revert last two\nchanges.\n\nFrom-SVN: r73463", "tree": {"sha": "0a648267a26f2ea2e72eb46f836e98ba14c3b1f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a648267a26f2ea2e72eb46f836e98ba14c3b1f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b69c29f22d08dba08c8913e2f4778d14d64e239", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b69c29f22d08dba08c8913e2f4778d14d64e239", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b69c29f22d08dba08c8913e2f4778d14d64e239", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b69c29f22d08dba08c8913e2f4778d14d64e239/comments", "author": null, "committer": null, "parents": [{"sha": "5b84be73837bd61dc88a7a76fd68f90440dc2e49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b84be73837bd61dc88a7a76fd68f90440dc2e49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b84be73837bd61dc88a7a76fd68f90440dc2e49"}], "stats": {"total": 20, "additions": 9, "deletions": 11}, "files": [{"sha": "b07f54a6c4da9c0ee2ccc43490766d08cee2a7f1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b69c29f22d08dba08c8913e2f4778d14d64e239/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b69c29f22d08dba08c8913e2f4778d14d64e239/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0b69c29f22d08dba08c8913e2f4778d14d64e239", "patch": "@@ -1,3 +1,8 @@\n+2003-11-11  James E Wilson  <wilson@specifixinc.com>\n+\n+\t* expmed.c (store_bit_field, extract_bit_field): Revert last two\n+\tchanges.\n+\n 2003-11-11  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/h8300/lib1funcs.asm: Replace DenHighZero with"}, {"sha": "d93be934be3baf3cdfdc80187c86fca315e7ec25", "filename": "gcc/expmed.c", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b69c29f22d08dba08c8913e2f4778d14d64e239/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b69c29f22d08dba08c8913e2f4778d14d64e239/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=0b69c29f22d08dba08c8913e2f4778d14d64e239", "patch": "@@ -326,17 +326,13 @@ store_bit_field (rtx str_rtx, unsigned HOST_WIDE_INT bitsize,\n \n      If the target is memory, storing any naturally aligned field can be\n      done with a simple store.  For targets that support fast unaligned\n-     memory, any naturally sized, unit aligned field can be done directly.\n-\n-     It's okay if the requested bitsize is greater than fieldmode's\n-     bitsize; that just means the mode has padding bits.  */\n+     memory, any naturally sized, unit aligned field can be done directly.  */\n \n   byte_offset = (bitnum % BITS_PER_WORD) / BITS_PER_UNIT\n                 + (offset * UNITS_PER_WORD);\n \n   if (bitpos == 0\n-      && GET_MODE_BITSIZE (fieldmode) != 0\n-      && bitsize >= GET_MODE_BITSIZE (fieldmode)\n+      && bitsize == GET_MODE_BITSIZE (fieldmode)\n       && (GET_CODE (op0) != MEM\n \t  ? ((GET_MODE_SIZE (fieldmode) >= UNITS_PER_WORD\n \t     || GET_MODE_SIZE (GET_MODE (op0)) == GET_MODE_SIZE (fieldmode))\n@@ -1033,12 +1029,9 @@ extract_bit_field (rtx str_rtx, unsigned HOST_WIDE_INT bitsize,\n   if (GET_CODE (op0) == REG\n       && mode == GET_MODE (op0)\n       && bitnum == 0\n-      && GET_MODE_BITSIZE (GET_MODE (op0)) != 0\n-      && bitsize >= GET_MODE_BITSIZE (GET_MODE (op0)))\n+      && bitsize == GET_MODE_BITSIZE (GET_MODE (op0)))\n     {\n-      /* We're trying to extract a full register from itself.\n-         (If the requested bitsize is greater than the bitsize of op0,\n-         that just means op0's mode has padding bits.)  */\n+      /* We're trying to extract a full register from itself.  */\n       return op0;\n     }\n "}]}