{"sha": "0d47f0862930d2f12338968b00a514f45c23e367", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQ0N2YwODYyOTMwZDJmMTIzMzg5NjhiMDBhNTE0ZjQ1YzIzZTM2Nw==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2001-10-09T17:40:13Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2001-10-09T17:40:13Z"}, "message": "* java/net/DatagramSocketImpl.java: Merge with Classpath\n\nFrom-SVN: r46127", "tree": {"sha": "b1394e548fde886586f250cf635be14069055fb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1394e548fde886586f250cf635be14069055fb8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d47f0862930d2f12338968b00a514f45c23e367", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d47f0862930d2f12338968b00a514f45c23e367", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d47f0862930d2f12338968b00a514f45c23e367", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d47f0862930d2f12338968b00a514f45c23e367/comments", "author": null, "committer": null, "parents": [{"sha": "48c8b0becfdbc9fe3060148cf4b9e5a310a50286", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48c8b0becfdbc9fe3060148cf4b9e5a310a50286", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48c8b0becfdbc9fe3060148cf4b9e5a310a50286"}], "stats": {"total": 167, "additions": 152, "deletions": 15}, "files": [{"sha": "6a7b6cc08f54849c3990294cffdb2cd4f02dd6cc", "filename": "libjava/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d47f0862930d2f12338968b00a514f45c23e367/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d47f0862930d2f12338968b00a514f45c23e367/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=0d47f0862930d2f12338968b00a514f45c23e367", "patch": "@@ -1,3 +1,7 @@\n+2001-10-08  Mark Wielaard  <mark@klomp.org>\n+\n+\t* java/net/DatagramSocketImpl.java: Merge with Classpath\n+\n 2001-10-07  Mark Wielaard  <mark@klomp.org>\n \n \t* java/net/URLDecoder.java: Remerge with Classpath"}, {"sha": "17d0119453e35e4412469cd0659c3a3fd86582e3", "filename": "libjava/java/net/DatagramSocketImpl.java", "status": "modified", "additions": 148, "deletions": 15, "changes": 163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d47f0862930d2f12338968b00a514f45c23e367/libjava%2Fjava%2Fnet%2FDatagramSocketImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d47f0862930d2f12338968b00a514f45c23e367/libjava%2Fjava%2Fnet%2FDatagramSocketImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FDatagramSocketImpl.java?ref=0d47f0862930d2f12338968b00a514f45c23e367", "patch": "@@ -1,60 +1,193 @@\n-// DatagramSocketImpl.java - Abstract datagram socket implementation.\n+/* DatagramSocketImpl.java -- Abstract class for UDP socket implementations\n+   Copyright (C) 1998, 1999 2000, 2001 Free Software Foundation, Inc.\n \n-/* Copyright (C) 1999  Free Software Foundation\n+This file is part of GNU Classpath.\n \n-   This file is part of libgcj.\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.net;\n+\n import java.io.IOException;\n import java.io.FileDescriptor;\n \n-/**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date May 3, 1999.\n- */\n-\n /**\n  * Written using on-line Java Platform 1.2 API Specification, as well\n  * as \"The Java Class Libraries\", 2nd edition (Addison-Wesley, 1998).\n  * Status:  Believed complete and correct.\n  */\n \n+/**\n+ * This abstract class models a datagram socket implementation.  An\n+ * actual implementation class would implement these methods, probably\n+ * via redirecting them to native code.\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ */\n public abstract class DatagramSocketImpl implements SocketOptions\n {\n+\n+  /**\n+   * The local port to which this socket is bound\n+   */\n   protected int localPort;\n+\n+  /**\n+   * The FileDescriptor object for this object. \n+   */\n   protected FileDescriptor fd;\n \n+  /**\n+   * Default, no-argument constructor for subclasses to call.\n+   */\n   public DatagramSocketImpl()\n   {\n   }\n \n+  /**\n+   * This method binds the socket to the specified local port and address.\n+   *\n+   * @param lport The port number to bind to\n+   * @param laddr The address to bind to\n+   *\n+   * @exception SocketException If an error occurs\n+   */\n   protected abstract void bind(int lport, InetAddress laddr)\n   \tthrows SocketException;\n+\n+  /**\n+   * This methods closes the socket\n+   */\n   protected abstract void close();\n+\n+  /**\n+   * Creates a new datagram socket.\n+   *\n+   * @exception SocketException If an error occurs\n+   */\n   protected abstract void create() throws SocketException;\n+\n+  /**\n+   * Takes a peek at the next packet received in order to retrieve the\n+   * address of the sender\n+   *\n+   * @param i The InetAddress to fill in with the information about the\n+   *          sender if the next packet\n+   *\n+   * @return The port number of the sender of the packet\n+   *\n+   * @exception IOException If an error occurs\n+   */\n   protected abstract int peek(InetAddress i) throws IOException;\n+\n+  /**\n+   * Transmits the specified packet of data to the network.  The destination\n+   * host and port should be encoded in the packet.\n+   *\n+   * @param p The packet to send\n+   *\n+   * @exception IOException If an error occurs\n+   */\n   protected abstract void send(DatagramPacket p) throws IOException;\n+\n+  /**\n+   * Receives a packet of data from the network  Will block until a packet\n+   * arrives.  The packet info in populated into the passed in \n+   * DatagramPacket object.\n+   *\n+   * @param p A place to store the incoming packet.\n+   *\n+   * @exception IOException If an error occurs\n+   */\n   protected abstract void receive(DatagramPacket p) throws IOException;\n+\n+  /**\n+   * Sets the Time to Live (TTL) setting on this socket to the specified\n+   * value. <b>Use <code>setTimeToLive(int)</code></b> instead.\n+   *\n+   * @param ttl The new Time to Live value\n+   *\n+   * @exception IOException If an error occurs\n+   * @deprecated\n+   */\n   protected abstract void setTTL(byte ttl) throws IOException;\n+\n+  /**\n+   * This method returns the current Time to Live (TTL) setting on this\n+   * socket.  <b>Use <code>getTimeToLive()</code></b> instead.\n+   *\n+   * @exception IOException If an error occurs\n+   * @deprecated\n+   */\n   protected abstract byte getTTL() throws IOException;\n+\n+ /**\n+   * Sets the Time to Live (TTL) setting on this socket to the specified\n+   * value.\n+   *\n+   * @param ttl The new Time to Live value\n+   *\n+   * @exception IOException If an error occurs\n+   */\n   protected abstract void setTimeToLive(int ttl) throws IOException;\n+\n+  /**\n+   * This method returns the current Time to Live (TTL) setting on this\n+   * socket.\n+   *\n+   * @exception IOException If an error occurs\n+   */\n   protected abstract int getTimeToLive() throws IOException;\n+\n+  /**\n+   * Causes this socket to join the specified multicast group\n+   *\n+   * @param inetaddr The multicast address to join with\n+   *\n+   * @exception IOException If an error occurs\n+   */\n   protected abstract void join(InetAddress inetaddr) throws IOException;\n-  protected abstract void leave(InetAddress inetaddr) throws IOException;\n \n-  public abstract Object getOption(int optID) throws SocketException;\n-  public abstract void setOption(int optID, Object value)\n-    throws SocketException;\n+ /**\n+   * Causes the socket to leave the specified multicast group.\n+   *\n+   * @param inetaddr The multicast address to leave\n+   *\n+   * @exception IOException If an error occurs\n+   */\n+  protected abstract void leave(InetAddress inetaddr) throws IOException;\n \n+  /**\n+   * Returns the FileDescriptor for this socket\n+   */\n   protected FileDescriptor getFileDescriptor()\n   {\n     return fd;\n   }\n \n+  /**\n+   * Returns the local port this socket is bound to\n+   */\n   protected int getLocalPort()\n   {\n     return localPort;"}]}