{"sha": "18396541e4793382a989a23f41f5deb347610234", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTgzOTY1NDFlNDc5MzM4MmE5ODlhMjNmNDFmNWRlYjM0NzYxMDIzNA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-02-28T16:35:32Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-02-28T16:35:32Z"}, "message": "c++: Further tweak for P1937R2 - const{expr,eval} inconsistencies\n\nSeems I've missed one thing, as the first hunk in\nhttps://github.com/cplusplus/draft/commit/c8e68ed202b4a9260616bcee8a9768b5dca4bbca\nchanges the wording so that only potentially-evaluated id-expressions that\ndenote immediate functions must appear only in the specified contexts.\nThat IMO means that in unevaluated contexts there aren't such restrictions\nanymore, so I think in unevaluated contexts one should be able to take the\naddress of an immediate function.\n\n2020-02-28  Jakub Jelinek  <jakub@redhat.com>\n\n\tP1937R2 - Fixing inconsistencies between const{expr,eval} functions\n\t* typeck.c (cp_build_addr_expr_1): Allow taking address of immediate\n\tfunctions in unevaluated contexts.\n\n\t* g++.dg/cpp2a/consteval3.C: Change dg-error about taking address of\n\timmediate function in unevaluated contexts into dg-bogus.\n\t* g++.dg/cpp2a/consteval16.C: New test.", "tree": {"sha": "70142f3f7cdb056c4037fd52065fa4e1a99f6033", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70142f3f7cdb056c4037fd52065fa4e1a99f6033"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18396541e4793382a989a23f41f5deb347610234", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18396541e4793382a989a23f41f5deb347610234", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18396541e4793382a989a23f41f5deb347610234", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18396541e4793382a989a23f41f5deb347610234/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3ce088645e5305d932380c7520809181b2d2eb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3ce088645e5305d932380c7520809181b2d2eb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3ce088645e5305d932380c7520809181b2d2eb9"}], "stats": {"total": 23, "additions": 21, "deletions": 2}, "files": [{"sha": "4dc30e0a321b0348c50c7fc0c4bc8d38b8e1ca6f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18396541e4793382a989a23f41f5deb347610234/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18396541e4793382a989a23f41f5deb347610234/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=18396541e4793382a989a23f41f5deb347610234", "patch": "@@ -1,3 +1,9 @@\n+2020-02-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tP1937R2 - Fixing inconsistencies between const{expr,eval} functions\n+\t* typeck.c (cp_build_addr_expr_1): Allow taking address of immediate\n+\tfunctions in unevaluated contexts.\n+\n 2020-02-27  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/93933"}, {"sha": "8e3188a415d91a0d2ea1a8614bd32029adc2bd28", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18396541e4793382a989a23f41f5deb347610234/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18396541e4793382a989a23f41f5deb347610234/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=18396541e4793382a989a23f41f5deb347610234", "patch": "@@ -6332,6 +6332,7 @@ cp_build_addr_expr_1 (tree arg, bool strict_lvalue, tsubst_flags_t complain)\n       tree stripped_arg = tree_strip_any_location_wrapper (arg);\n       if (TREE_CODE (stripped_arg) == FUNCTION_DECL\n \t  && DECL_IMMEDIATE_FUNCTION_P (stripped_arg)\n+\t  && cp_unevaluated_operand == 0\n \t  && (current_function_decl == NULL_TREE\n \t      || !DECL_IMMEDIATE_FUNCTION_P (current_function_decl)))\n \t{"}, {"sha": "3727ae255fef20ce49dbdd296426c88b77414e66", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18396541e4793382a989a23f41f5deb347610234/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18396541e4793382a989a23f41f5deb347610234/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=18396541e4793382a989a23f41f5deb347610234", "patch": "@@ -1,5 +1,10 @@\n 2020-02-28  Jakub Jelinek  <jakub@redhat.com>\n \n+\tP1937R2 - Fixing inconsistencies between const{expr,eval} functions\n+\t* g++.dg/cpp2a/consteval3.C: Change dg-error about taking address of\n+\timmediate function in unevaluated contexts into dg-bogus.\n+\t* g++.dg/cpp2a/consteval16.C: New test.\n+\n \tPR middle-end/92152\n \t* g++.dg/torture/pr92152.C (size_t): Use decltype (sizeof (0)) instead\n \tof hardcoding unsigned long."}, {"sha": "9b43de8b5faf9e309dc46e7945901fac64174ce6", "filename": "gcc/testsuite/g++.dg/cpp2a/consteval16.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18396541e4793382a989a23f41f5deb347610234/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18396541e4793382a989a23f41f5deb347610234/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval16.C?ref=18396541e4793382a989a23f41f5deb347610234", "patch": "@@ -0,0 +1,7 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++2a\" }\n+\n+consteval int foo () { return 0; }\n+int bar (int (*) ());\n+auto sz = sizeof (bar (foo));\t// { dg-bogus \"taking address of an immediate function\" }\n+decltype (bar (foo)) baz;\t// { dg-bogus \"taking address of an immediate function\" }"}, {"sha": "9fb1f1a0b12520aaea31bdaed297dc3c78a7ead4", "filename": "gcc/testsuite/g++.dg/cpp2a/consteval3.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18396541e4793382a989a23f41f5deb347610234/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18396541e4793382a989a23f41f5deb347610234/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval3.C?ref=18396541e4793382a989a23f41f5deb347610234", "patch": "@@ -31,8 +31,8 @@ consteval consteval int f11 () { return 0; }\t// { dg-error \"duplicate 'consteval\n struct U { consteval ~U () {} };\t// { dg-error \"a destructor cannot be 'consteval'\" }\n struct V { consteval int v = 5; };\t// { dg-error \"non-static data member 'v' declared 'consteval'\" }\n struct W { consteval static int w; };\t// { dg-error \"static data member 'w' declared 'consteval'\" }\n-int i = sizeof (&f6);\t\t\t// { dg-error \"taking address of an immediate function 'consteval int f6\\\\(int\\\\)'\" }\n-using j = decltype (&f6);\t\t// { dg-error \"taking address of an immediate function 'consteval int f6\\\\(int\\\\)'\" }\n+int i = sizeof (&f6);\t\t\t// { dg-bogus \"taking address of an immediate function 'consteval int f6\\\\(int\\\\)'\" }\n+using j = decltype (&f6);\t\t// { dg-bogus \"taking address of an immediate function 'consteval int f6\\\\(int\\\\)'\" }\n int k = sizeof (f6 (d));\t\t// { dg-bogus \"the value of 'd' is not usable in a constant expression\" }\n using l = decltype (f6 (d));\t\t// { dg-bogus \"the value of 'd' is not usable in a constant expression\" }\n bool m = noexcept (f6 (d));\t\t// { dg-bogus \"the value of 'd' is not usable in a constant expression\" }"}]}