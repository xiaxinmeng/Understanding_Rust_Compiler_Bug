{"sha": "2cfe82fe43c3c6880be8e25877bb77c550097099", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmNmZTgyZmU0M2MzYzY4ODBiZThlMjU4NzdiYjc3YzU1MDA5NzA5OQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-09-23T21:27:25Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-09-23T21:27:25Z"}, "message": "decl.c (grokfndecl): If ::main is found not to return int, correct it after issuing a diagnostic.\n\ngcc/cp:\n\t* decl.c (grokfndecl): If ::main is found not to return int,\n\tcorrect it after issuing a diagnostic.\n\t(grokdeclarator): If the incoming type was error_mark_node, do\n\tnot complain about declaring something with no type.\n\t(start_function): Change check for ::main not returning int to\n\tan assertion, as grokfndecl now catches this when the user did it.\n\t* init.c (perform_member_init, sort_mem_initializers)\n\t(emit_mem_initializers): Make most diagnostics be issued on\n\tthe line of current_function_decl, not whatever the current\n\tinput line is.\n\t* parser.c (cp_lexer_peek_token_emit_debug_info): Surround\n\tdefinition and declaration with #ifdef ENABLE_CHECKING.\n\tAvoid unnecessary use of fprintf.\n\t(cp_lexer_print_token, cp_lexer_debug_stream): Adjust stub\n\tdefinitions to avoid warnings.\n\t(cp_lexer_new_main): Add assertion that first token is not a\n\tpadding token.\n\t(cp_lexer_new_from_token_array): Fold into ...\n\t(cp_lexer_new_from_tokens): ... here.  Add assertion that\n\tfirst token is not a padding token.\n\t(cp_lexer_set_source_position_from_token): Move nearer to callers.\n\tRemove unused lexer argument.\n\t(cp_lexer_peek_token): Just print debugging report (if enabled)\n\tand return lexer->next_token.\n\t(cp_lexer_skip_purged_tokens): Delete.\n\t(cp_lexer_next_token_is, cp_lexer_next_token_is_not): Make\n\tinline, simplify bodies.\n\t(cp_lexer_peek_nth_token): Add debugging report a la\n\tcp_lexer_peek_token.\n\t(cp_lexer_consume_token): Correct commentary.  Advance over\n\tpurged tokens here.  Set current source position here, from\n\ttoken to be returned.  Avoid unnecessary use of fprintf.\n\t(cp_lexer_purge_token): Advance next_token pointer over this and\n\tsubsequent purged tokens.\n\t(cp_parser_error): Adjust source position to that of the\n\tpeeked token.\n\t(cp_parser_push_lexer_for_tokens, cp_parser_pop_lexer): New functions.\n\t(cp_parser_string_literal): Remove some excessive cleverness.\n\t(cp_parser_enum_specifier): Call start_enum before consuming\n\tthe opening brace.\n\t(cp_parser_member_declaration): Make the \"extra semicolon\"\n\tdiagnostic consistently-worded with the other place this is\n\tdiagnosed.  Explicitly set the diagnostic location to the\n\tlocation of the offending semicolon.\n\t(cp_parser_enclosed_template_argument_list): Use %</%> quoting\n\tin diagnostics.  Do not use cp_parser_require.  Set location\n\tof diagnostics about improper use of '>>' to location of\n\toffending token.\n\t(cp_parser_late_parsing_for_member):\n\tUse cp_parser_push_lexer_for_tokens and cp_parser_pop_lexer.\n\t(cp_parser_late_parsing_default_args): Likewise.  Manually\n\tmove some logic outside the loop.\n\ngcc/testsuite:\n\t* g++.dg/ext/complit1.C\n\t* g++.dg/other/error2.C\n\t* g++.dg/other/nontype-1.C\n\t* g++.dg/parse/crash11.C\n\t* g++.dg/parse/crash12.C\n\t* g++.dg/parse/error15.C\n\t* g++.dg/parse/error4.C\n\t* g++.dg/parse/tmpl-outside1.C\n\t* g++.dg/parse/too-many-tmpl-args1.C\n\t* g++.dg/template/dependent-expr3.C\n\t* g++.dg/template/error10.C\n\t* g++.dg/template/instantiate1.C\n\t* g++.dg/template/vtable2.C\n\t* g++.dg/warn/Wshadow-1.C\n\t* g++.dg/warn/weak1.C\n\t* g++.old-deja/g++.brendan/crash16.C\n\t* g++.old-deja/g++.brendan/crash18.C\n\t* g++.old-deja/g++.brendan/crash48.C\n\t* g++.old-deja/g++.brendan/crash49.C\n\t* g++.old-deja/g++.brendan/crash55.C\n\t* g++.old-deja/g++.brendan/crash56.C\n\t* g++.old-deja/g++.brendan/crash8.C\n\t* g++.old-deja/g++.brendan/enum11.C\n\t* g++.old-deja/g++.brendan/enum8.C\n\t* g++.old-deja/g++.brendan/enum9.C\n\t* g++.old-deja/g++.brendan/friend3.C\n\t* g++.old-deja/g++.brendan/misc14.C\n\t* g++.old-deja/g++.bugs/900402_02.C\n\t* g++.old-deja/g++.bugs/900404_03.C\n\t* g++.old-deja/g++.bugs/900404_04.C\n\t* g++.old-deja/g++.bugs/900428_03.C\n\t* g++.old-deja/g++.jason/crash4.C\n\t* g++.old-deja/g++.jason/overload21.C\n\t* g++.old-deja/g++.jason/redecl1.C\n\t* g++.old-deja/g++.jason/report.C\n\t* g++.old-deja/g++.jason/rfg10.C\n\t* g++.old-deja/g++.jason/template30.C\n\t* g++.old-deja/g++.law/arm12.C\n\t* g++.old-deja/g++.law/ctors5.C\n\t* g++.old-deja/g++.law/cvt20.C\n\t* g++.old-deja/g++.law/init10.C\n\t* g++.old-deja/g++.law/init8.C\n\t* g++.old-deja/g++.law/visibility17.C\n\t* g++.old-deja/g++.law/visibility7.C\n\t* g++.old-deja/g++.mike/net8.C\n\t* g++.old-deja/g++.mike/p646.C\n\t* g++.old-deja/g++.mike/p700.C\n\t* g++.old-deja/g++.mike/p701.C\n\t* g++.old-deja/g++.mike/p811.C\n\t* g++.old-deja/g++.ns/template13.C\n\t* g++.old-deja/g++.other/array3.C\n\t* g++.old-deja/g++.other/crash25.C\n\t* g++.old-deja/g++.other/dtor3.C\n\t* g++.old-deja/g++.other/dtor4.C\n\t* g++.old-deja/g++.other/main1.C\n\t* g++.old-deja/g++.other/warn7.C\n\t* g++.old-deja/g++.pt/crash11.C\n\t* g++.old-deja/g++.pt/crash36.C\n\t* g++.old-deja/g++.pt/spec22.C\n\t* g++.old-deja/g++.pt/spec9.C\n\t* g++.old-deja/g++.pt/ttp52.C\n\t* g++.old-deja/g++.robertl/eb103.C\n\t* g++.old-deja/g++.robertl/eb121.C\n\t* g++.old-deja/g++.robertl/eb22.C\n\t* g++.old-deja/g++.robertl/eb8.C:\n\tUpdate locations and/or regexps of dg-error markers.\n\tRemove markers for some bogus messages that are no longer issued.\n\nlibstdc++-v3:\n\t* testsuite/20_util/memory/auto_ptr/assign_neg.cc\n\t* testsuite/23_containers/map/operators/1_neg.cc\n\t* testsuite/23_containers/set/operators/1_neg.cc:\n\tUpdate locations and/or regexps of dg-error markers.\n\nFrom-SVN: r87985", "tree": {"sha": "7c8b072e4a0dd5d53355cf9e4fe5a56ff9c7a5c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c8b072e4a0dd5d53355cf9e4fe5a56ff9c7a5c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2cfe82fe43c3c6880be8e25877bb77c550097099", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cfe82fe43c3c6880be8e25877bb77c550097099", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cfe82fe43c3c6880be8e25877bb77c550097099", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cfe82fe43c3c6880be8e25877bb77c550097099/comments", "author": null, "committer": null, "parents": [{"sha": "31d66fa9381f5a21a80f6e9b828525da34235054", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31d66fa9381f5a21a80f6e9b828525da34235054", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31d66fa9381f5a21a80f6e9b828525da34235054"}], "stats": {"total": 1252, "additions": 700, "deletions": 552}, "files": [{"sha": "9ea3fe3e7bd731445a2a573747c4e5480b3e3543", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 56, "deletions": 1, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -1,3 +1,58 @@\n+2004-09-23  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* decl.c (grokfndecl): If ::main is found not to return int,\n+\tcorrect it after issuing a diagnostic.\n+\t(grokdeclarator): If the incoming type was error_mark_node, do\n+\tnot complain about declaring something with no type.\n+\t(start_function): Change check for ::main not returning int to\n+\tan assertion, as grokfndecl now catches this when the user did it.\n+\t* init.c (perform_member_init, sort_mem_initializers)\n+\t(emit_mem_initializers): Make most diagnostics be issued on\n+\tthe line of current_function_decl, not whatever the current\n+\tinput line is.\n+\t* parser.c (cp_lexer_peek_token_emit_debug_info): Surround\n+\tdefinition and declaration with #ifdef ENABLE_CHECKING.\n+\tAvoid unnecessary use of fprintf.\n+\t(cp_lexer_print_token, cp_lexer_debug_stream): Adjust stub\n+\tdefinitions to avoid warnings.\n+\t(cp_lexer_new_main): Add assertion that first token is not a\n+\tpadding token.\n+\t(cp_lexer_new_from_token_array): Fold into ...\n+\t(cp_lexer_new_from_tokens): ... here.  Add assertion that\n+\tfirst token is not a padding token.\n+\t(cp_lexer_set_source_position_from_token): Move nearer to callers.\n+\tRemove unused lexer argument.\n+\t(cp_lexer_peek_token): Just print debugging report (if enabled)\n+\tand return lexer->next_token.\n+\t(cp_lexer_skip_purged_tokens): Delete.\n+\t(cp_lexer_next_token_is, cp_lexer_next_token_is_not): Make\n+\tinline, simplify bodies.\n+\t(cp_lexer_peek_nth_token): Add debugging report a la\n+\tcp_lexer_peek_token.\n+\t(cp_lexer_consume_token): Correct commentary.  Advance over\n+\tpurged tokens here.  Set current source position here, from\n+\ttoken to be returned.  Avoid unnecessary use of fprintf.\n+\t(cp_lexer_purge_token): Advance next_token pointer over this and\n+\tsubsequent purged tokens.\n+\t(cp_parser_error): Adjust source position to that of the\n+\tpeeked token.\n+\t(cp_parser_push_lexer_for_tokens, cp_parser_pop_lexer): New functions.\n+\t(cp_parser_string_literal): Remove some excessive cleverness.\n+\t(cp_parser_enum_specifier): Call start_enum before consuming\n+\tthe opening brace.\n+\t(cp_parser_member_declaration): Make the \"extra semicolon\"\n+\tdiagnostic consistently-worded with the other place this is\n+\tdiagnosed.  Explicitly set the diagnostic location to the\n+\tlocation of the offending semicolon.\n+\t(cp_parser_enclosed_template_argument_list): Use %</%> quoting\n+\tin diagnostics.  Do not use cp_parser_require.  Set location\n+\tof diagnostics about improper use of '>>' to location of\n+\toffending token.\n+\t(cp_parser_late_parsing_for_member):\n+\tUse cp_parser_push_lexer_for_tokens and cp_parser_pop_lexer.\n+\t(cp_parser_late_parsing_default_args): Likewise.  Manually\n+\tmove some logic outside the loop.\n+\n 2004-09-23  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR c++/17618\n@@ -68,7 +123,7 @@\n \tclass_hint_flags): Remove.\n \t(get_pseudo_ti_init): Use CLASSTYPE_REPEATED_BASE_P and\n \tCLASSTYPE_DIAMOND_SHAPED_P.\n-\t\n+\n 2004-09-21  Ziemowit Laski  <zlaski@apple.com>\n \n \t* cp-lang.c (LANG_HOOKS_FOLD_OBJ_TYPE_REF): Moved here from"}, {"sha": "d3a0c8d4b21d1432db4a93082fe2f72e21a37392", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -5590,7 +5590,10 @@ grokfndecl (tree ctype,\n \terror (\"cannot declare `::main' to be static\");\n       if (!same_type_p (TREE_TYPE (TREE_TYPE (decl)),\n \t\t\tinteger_type_node))\n-\terror (\"`main' must return `int'\");\n+\t{\n+\t  error (\"`::main' must return `int'\");\n+\t  TREE_TYPE (TREE_TYPE (decl)) = integer_type_node;\n+\t}\n       inlinep = 0;\n       publicp = 1;\n     }\n@@ -6465,6 +6468,7 @@ grokdeclarator (const cp_declarator *declarator,\n   cp_decl_spec ds;\n   cp_storage_class storage_class;\n   bool unsigned_p, signed_p, short_p, long_p, thread_p;\n+  bool type_was_error_mark_node = false;\n \n   signed_p = declspecs->specs[(int)ds_signed];\n   unsigned_p = declspecs->specs[(int)ds_unsigned];\n@@ -6665,7 +6669,10 @@ grokdeclarator (const cp_declarator *declarator,\n   /* Extract the basic type from the decl-specifier-seq.  */\n   type = declspecs->type;\n   if (type == error_mark_node)\n-    type = NULL_TREE;\n+    {\n+      type = NULL_TREE;\n+      type_was_error_mark_node = true;\n+    }\n   /* If the entire declaration is itself tagged as deprecated then\n      suppress reports of deprecated items.  */\n   if (type && TREE_DEPRECATED (type)\n@@ -6756,7 +6763,9 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t && in_namespace == NULL_TREE\n \t\t && current_namespace == global_namespace);\n \n-      if (in_system_header || flag_ms_extensions)\n+      if (type_was_error_mark_node)\n+\t/* We've already issued an error, don't complain more.  */;\n+      else if (in_system_header || flag_ms_extensions)\n \t/* Allow it, sigh.  */;\n       else if (pedantic || ! is_main)\n \tpedwarn (\"ISO C++ forbids declaration of `%s' with no type\",\n@@ -10101,16 +10110,10 @@ start_function (cp_decl_specifier_seq *declspecs,\n     maybe_apply_pragma_weak (decl1);\n \n   if (DECL_MAIN_P (decl1))\n-    {\n-      /* If this doesn't return integer_type, or a typedef to\n-\t integer_type, complain.  */\n-      if (!same_type_p (TREE_TYPE (TREE_TYPE (decl1)), integer_type_node))\n-\t{\n-\t  if (pedantic || warn_return_type)\n-\t    pedwarn (\"return type for `main' changed to `int'\");\n-\t  TREE_TYPE (decl1) = default_function_type;\n-\t}\n-    }\n+    /* main must return int.  grokfndecl should have corrected it\n+       (and issued a diagnostic) if the user got it wrong.  */\n+    gcc_assert (same_type_p (TREE_TYPE (TREE_TYPE (decl1)),\n+\t\t\t     integer_type_node));\n \n   start_preparsed_function (decl1, attrs, /*flags=*/SF_DEFAULT);\n "}, {"sha": "b820e9ed8377e5ddd0e0f9f1fd12e35296d3acd6", "filename": "gcc/cp/init.c", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -315,9 +315,8 @@ perform_member_init (tree member, tree init)\n   /* Effective C++ rule 12 requires that all data members be\n      initialized.  */\n   if (warn_ecpp && !explicit && TREE_CODE (type) != ARRAY_TYPE)\n-    warning (\"`%D' should be initialized in the member initialization \"\n-\t     \"list\", \n-\t     member);\n+    warning (\"%J%qD should be initialized in the member initialization \"\n+\t     \"list\", current_function_decl, member);\n \n   if (init == void_type_node)\n     init = NULL_TREE;\n@@ -363,16 +362,17 @@ perform_member_init (tree member, tree init)\n \t    {\n \t      init = build_default_init (type, /*nelts=*/NULL_TREE);\n \t      if (TREE_CODE (type) == REFERENCE_TYPE)\n-\t\twarning\n-\t\t  (\"default-initialization of `%#D', which has reference type\",\n-\t\t   member);\n+\t\twarning (\"%Jdefault-initialization of %q#D, \"\n+\t\t\t \"which has reference type\",\n+\t\t\t current_function_decl, member);\n \t    }\n \t  /* member traversal: note it leaves init NULL */\n \t  else if (TREE_CODE (type) == REFERENCE_TYPE)\n-\t    pedwarn (\"uninitialized reference member `%D'\", member);\n+\t    pedwarn (\"%Juninitialized reference member %qD\",\n+\t\t     current_function_decl, member);\n \t  else if (CP_TYPE_CONST_P (type))\n-\t    pedwarn (\"uninitialized member `%D' with `const' type `%T'\",\n-\t\t     member, type);\n+\t    pedwarn (\"%Juninitialized member %qD with %<const%> type %qT\",\n+\t\t     current_function_decl, member, type);\n \t}\n       else if (TREE_CODE (init) == TREE_LIST)\n \t/* There was an explicit member initialization.  Do some work\n@@ -509,7 +509,8 @@ sort_mem_initializers (tree t, tree mem_inits)\n \t  break;\n \n       /* Issue a warning if the explicit initializer order does not\n-\t match that which will actually occur.  */\n+\t match that which will actually occur.\n+         ??? Are all these on the correct lines?  */\n       if (warn_reorder && !subobject_init)\n \t{\n \t  if (TREE_CODE (TREE_PURPOSE (next_subobject)) == FIELD_DECL)\n@@ -522,7 +523,7 @@ sort_mem_initializers (tree t, tree mem_inits)\n \t    cp_warning_at (\"  `%#D'\", subobject);\n \t  else\n \t    warning (\"  base `%T'\", subobject);\n-\t  warning (\"  when initialized here\");\n+\t  warning (\"%J  when initialized here\", current_function_decl);\n \t}\n \n       /* Look again, from the beginning of the list.  */\n@@ -538,10 +539,11 @@ sort_mem_initializers (tree t, tree mem_inits)\n       if (TREE_VALUE (subobject_init))\n \t{\n \t  if (TREE_CODE (subobject) == FIELD_DECL)\n-\t    error (\"multiple initializations given for `%D'\", subobject);\n+\t    error (\"%Jmultiple initializations given for %qD\",\n+\t\t   current_function_decl, subobject);\n \t  else\n-\t    error (\"multiple initializations given for base `%T'\", \n-\t\t   subobject);\n+\t    error (\"%Jmultiple initializations given for base %qT\", \n+\t\t   current_function_decl, subobject);\n \t}\n \n       /* Record the initialization.  */\n@@ -607,8 +609,8 @@ sort_mem_initializers (tree t, tree mem_inits)\n \t\t  if (same_type_p (last_field_type, field_type))\n \t\t    {\n \t\t      if (TREE_CODE (field_type) == UNION_TYPE)\n-\t\t\terror (\"initializations for multiple members of `%T'\",\n-\t\t\t\t  last_field_type);\n+\t\t\terror (\"%Jinitializations for multiple members of %qT\",\n+\t\t\t       current_function_decl, last_field_type);\n \t\t      done = 1;\n \t\t      break;\n \t\t    }\n@@ -664,9 +666,9 @@ emit_mem_initializers (tree mem_inits)\n       if (extra_warnings && !arguments \n \t  && DECL_COPY_CONSTRUCTOR_P (current_function_decl)\n \t  && TYPE_NEEDS_CONSTRUCTING (BINFO_TYPE (subobject)))\n-\twarning (\"base class `%#T' should be explicitly initialized in the \"\n+\twarning (\"%Jbase class `%#T' should be explicitly initialized in the \"\n \t\t \"copy constructor\",\n-\t\t BINFO_TYPE (subobject));\n+\t\t current_function_decl, BINFO_TYPE (subobject));\n \n       /* If an explicit -- but empty -- initializer list was present,\n \t treat it just like default initialization at this point.  */"}, {"sha": "49d02372d54d4697a96962d270bbe05c056d4459", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 175, "deletions": 158, "changes": 333, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -113,8 +113,6 @@ typedef struct cp_token_cache GTY(())\n \n static cp_lexer *cp_lexer_new_main\n   (void);\n-static cp_lexer *cp_lexer_new_from_token_array\n-  (cp_token *, cp_token *);\n static cp_lexer *cp_lexer_new_from_tokens\n   (cp_token_cache *tokens);\n static void cp_lexer_destroy\n@@ -133,10 +131,6 @@ static void cp_lexer_get_preprocessor_token\n   (cp_lexer *, cp_token *);\n static inline cp_token *cp_lexer_peek_token\n   (cp_lexer *);\n-static void cp_lexer_peek_token_emit_debug_info\n-  (cp_lexer *, cp_token *);\n-static void cp_lexer_skip_purged_tokens\n-  (cp_lexer *);\n static cp_token *cp_lexer_peek_nth_token\n   (cp_lexer *, size_t);\n static inline bool cp_lexer_next_token_is\n@@ -159,8 +153,6 @@ static void cp_lexer_commit_tokens\n   (cp_lexer *);\n static void cp_lexer_rollback_tokens\n   (cp_lexer *);\n-static inline void cp_lexer_set_source_position_from_token\n-  (cp_lexer *, const cp_token *);\n #ifdef ENABLE_CHECKING\n static void cp_lexer_print_token\n   (FILE *, cp_token *);\n@@ -170,10 +162,17 @@ static void cp_lexer_start_debugging\n   (cp_lexer *) ATTRIBUTE_UNUSED;\n static void cp_lexer_stop_debugging\n   (cp_lexer *) ATTRIBUTE_UNUSED;\n+static void cp_lexer_peek_token_emit_debug_info\n+  (cp_lexer *, cp_token *);\n #else\n-#define cp_lexer_debug_stream NULL\n-#define cp_lexer_print_token(str, tok)\n+/* If we define cp_lexer_debug_stream to NULL it will provoke warnings\n+   about passing NULL to functions that require non-NULL arguments\n+   (fputs, fprintf).  It will never be used, so all we need is a value\n+   of the right type that's guaranteed not to be NULL.  */\n+#define cp_lexer_debug_stream stdout\n+#define cp_lexer_print_token(str, tok) (void) 0\n #define cp_lexer_debugging_p(lexer) 0\n+#define cp_lexer_peek_token_emit_debug_info(lexer, tok) (void) 0\n #endif /* ENABLE_CHECKING */\n \n static cp_token_cache *cp_token_cache_new\n@@ -269,16 +268,18 @@ cp_lexer_new_main (void)\n      string constant concatenation.  */\n   c_lex_return_raw_strings = false;\n \n+  gcc_assert (lexer->next_token->type != CPP_PURGED);\n   return lexer;\n }\n \n /* Create a new lexer whose token stream is primed with the tokens in\n-   the range [FIRST, LAST).  When these tokens are exhausted, no new\n-   tokens will be read.  */\n+   CACHE.  When these tokens are exhausted, no new tokens will be read.  */\n \n static cp_lexer *\n-cp_lexer_new_from_token_array (cp_token *first, cp_token *last)\n+cp_lexer_new_from_tokens (cp_token_cache *cache)\n {\n+  cp_token *first = cache->first;\n+  cp_token *last = cache->last;\n   cp_lexer *lexer = GGC_CNEW (cp_lexer);\n   cp_token *eof;\n \n@@ -305,16 +306,9 @@ cp_lexer_new_from_token_array (cp_token *first, cp_token *last)\n   /* Initially we are not debugging.  */\n   lexer->debugging_p = false;\n #endif\n-  return lexer;\n-}\n \n-/* Create a new lexer whose token stream is primed with the tokens in\n-   CACHE.  When these tokens are exhausted, no new tokens will be read.  */\n-\n-static cp_lexer *\n-cp_lexer_new_from_tokens (cp_token_cache *cache)\n-{\n-  return cp_lexer_new_from_token_array (cache->first, cache->last);\n+  gcc_assert (lexer->next_token->type != CPP_PURGED);\n+  return lexer;\n }\n \n /* Frees all resources associated with LEXER. */\n@@ -338,24 +332,6 @@ cp_lexer_debugging_p (cp_lexer *lexer)\n \n #endif /* ENABLE_CHECKING */\n \n-/* Set the current source position from the information stored in\n-   TOKEN.  */\n-\n-static inline void\n-cp_lexer_set_source_position_from_token (cp_lexer *lexer ATTRIBUTE_UNUSED ,\n-                                         const cp_token *token)\n-{\n-  /* Ideally, the source position information would not be a global\n-     variable, but it is.  */\n-\n-  /* Update the line number and system header flag. */\n-  if (token->type != CPP_EOF)\n-    {\n-      input_location = token->location;\n-      in_system_header = token->in_system_header;\n-    }\n-}\n-\n /* TOKEN points into the circular token buffer.  Return a pointer to\n    the next token in the buffer.  */\n \n@@ -487,28 +463,29 @@ cp_lexer_get_preprocessor_token (cp_lexer *lexer ATTRIBUTE_UNUSED ,\n     token->keyword = RID_MAX;\n }\n \n+/* Update the globals input_location and in_system_header from TOKEN.   */\n+static inline void\n+cp_lexer_set_source_position_from_token (cp_token *token)\n+{\n+  if (token->type != CPP_EOF)\n+    {\n+      input_location = token->location;\n+      in_system_header = token->in_system_header;\n+    }\n+}\n+\n /* Return a pointer to the next token in the token stream, but do not\n    consume it.  */\n \n static inline cp_token *\n cp_lexer_peek_token (cp_lexer *lexer)\n {\n-  cp_token *token;\n-\n-  /* Skip over purged tokens if necessary. */\n-  if (lexer->next_token->type == CPP_PURGED)\n-    cp_lexer_skip_purged_tokens (lexer);\n-\n-  token = lexer->next_token;\n-\n-  /* Provide debugging output.  */\n   if (cp_lexer_debugging_p (lexer))\n-    cp_lexer_peek_token_emit_debug_info (lexer, token);\n-\n-  cp_lexer_set_source_position_from_token (lexer, token);\n-  return token;\n+    cp_lexer_peek_token_emit_debug_info (lexer, lexer->next_token);\n+  return lexer->next_token;\n }\n \n+#ifdef ENABLE_CHECKING\n /* Emit debug output for cp_lexer_peek_token.  Split out into a\n    separate function so that cp_lexer_peek_token can be small and\n    inlinable. */\n@@ -517,43 +494,31 @@ static void\n cp_lexer_peek_token_emit_debug_info (cp_lexer *lexer ATTRIBUTE_UNUSED,\n \t\t\t\t     cp_token *token ATTRIBUTE_UNUSED)\n {\n-  fprintf (cp_lexer_debug_stream, \"cp_lexer: peeking at token: \");\n+  fputs (\"cp_lexer: peeking at token: \", cp_lexer_debug_stream);\n   cp_lexer_print_token (cp_lexer_debug_stream, token);\n-  fprintf (cp_lexer_debug_stream, \"\\n\");\n-}\n-\n-/* Skip all tokens whose type is CPP_PURGED. */\n-\n-static void cp_lexer_skip_purged_tokens (cp_lexer *lexer)\n-{\n-  while (lexer->next_token->type == CPP_PURGED)\n-    ++lexer->next_token;\n+  putc ('\\n', cp_lexer_debug_stream);\n }\n+#endif\n \n /* Return true if the next token has the indicated TYPE.  */\n \n-static bool\n+static inline bool\n cp_lexer_next_token_is (cp_lexer* lexer, enum cpp_ttype type)\n {\n-  cp_token *token;\n-\n-  /* Peek at the next token.  */\n-  token = cp_lexer_peek_token (lexer);\n-  /* Check to see if it has the indicated TYPE.  */\n-  return token->type == type;\n+  return cp_lexer_peek_token (lexer)->type == type;\n }\n \n /* Return true if the next token does not have the indicated TYPE.  */\n \n-static bool\n+static inline bool\n cp_lexer_next_token_is_not (cp_lexer* lexer, enum cpp_ttype type)\n {\n   return !cp_lexer_next_token_is (lexer, type);\n }\n \n /* Return true if the next token is the indicated KEYWORD.  */\n \n-static bool\n+static inline bool\n cp_lexer_next_token_is_keyword (cp_lexer* lexer, enum rid keyword)\n {\n   cp_token *token;\n@@ -565,7 +530,10 @@ cp_lexer_next_token_is_keyword (cp_lexer* lexer, enum rid keyword)\n }\n \n /* Return a pointer to the Nth token in the token stream.  If N is 1,\n-   then this is precisely equivalent to cp_lexer_peek_token.  */\n+   then this is precisely equivalent to cp_lexer_peek_token (except\n+   that it is not inline).  One would like to disallow that case, but\n+   there is one case (cp_parser_nth_token_starts_template_id) where\n+   the caller passes a variable for N and it might be 1.  */\n \n static cp_token *\n cp_lexer_peek_nth_token (cp_lexer* lexer, size_t n)\n@@ -575,6 +543,10 @@ cp_lexer_peek_nth_token (cp_lexer* lexer, size_t n)\n   /* N is 1-based, not zero-based.  */\n   gcc_assert (n > 0);\n \n+  if (cp_lexer_debugging_p (lexer))\n+    fprintf (cp_lexer_debug_stream,\n+\t     \"cp_lexer: peeking ahead %ld at token: \", (long)n);\n+\n   --n;\n   token = lexer->next_token;\n   while (n != 0)\n@@ -584,39 +556,43 @@ cp_lexer_peek_nth_token (cp_lexer* lexer, size_t n)\n \t--n;\n     }\n \n+  if (cp_lexer_debugging_p (lexer))\n+    {\n+      cp_lexer_print_token (cp_lexer_debug_stream, token);\n+      putc ('\\n', cp_lexer_debug_stream);\n+    }\n+\n   return token;\n }\n \n-/* Consume the next token.  The pointer returned is valid only until\n-   another token is read.  Callers should preserve copy the token\n-   explicitly if they will need its value for a longer period of\n-   time.  */\n+/* Return the next token, and advance the lexer's next_token pointer\n+   to point to the next non-purged token.  */\n \n static cp_token *\n cp_lexer_consume_token (cp_lexer* lexer)\n {\n-  cp_token *token;\n+  cp_token *token = lexer->next_token;\n \n-  /* Skip over purged tokens if necessary. */\n-  if (lexer->next_token->type == CPP_PURGED)\n-    cp_lexer_skip_purged_tokens (lexer);\n+  do\n+    ++lexer->next_token;\n+  while (lexer->next_token->type == CPP_PURGED);\n \n-  token = lexer->next_token++;\n+  cp_lexer_set_source_position_from_token (token);\n \n   /* Provide debugging output.  */\n   if (cp_lexer_debugging_p (lexer))\n     {\n-      fprintf (cp_lexer_debug_stream, \"cp_lexer: consuming token: \");\n+      fputs (\"cp_lexer: consuming token: \", cp_lexer_debug_stream);\n       cp_lexer_print_token (cp_lexer_debug_stream, token);\n-      fprintf (cp_lexer_debug_stream, \"\\n\");\n+      putc ('\\n', cp_lexer_debug_stream);\n     }\n \n   return token;\n }\n \n-/* Permanently remove the next token from the token stream.  There\n-   must be a valid next token already; this token never reads\n-   additional tokens from the preprocessor.  */\n+/* Permanently remove the next token from the token stream, and\n+   advance the next_token pointer to refer to the next non-purged\n+   token.  */\n \n static void\n cp_lexer_purge_token (cp_lexer *lexer)\n@@ -626,6 +602,10 @@ cp_lexer_purge_token (cp_lexer *lexer)\n   tok->location = UNKNOWN_LOCATION;\n   tok->value = NULL_TREE;\n   tok->keyword = RID_MAX;\n+\n+  do\n+    ++lexer->next_token;\n+  while (lexer->next_token->type == CPP_PURGED);\n }\n \n /* Permanently remove all tokens after TOK, up to, but not\n@@ -661,7 +641,6 @@ cp_lexer_handle_pragma (cp_lexer *lexer)\n   s.len = TREE_STRING_LENGTH (token->value);\n   s.text = (const unsigned char *) TREE_STRING_POINTER (token->value);\n \n-  cp_lexer_set_source_position_from_token (lexer, token);\n   cpp_handle_deferred_pragma (parse_in, &s);\n \n   /* Clearing token->value here means that we will get an ICE if we\n@@ -1836,16 +1815,21 @@ cp_parser_is_keyword (cp_token* token, enum rid keyword)\n   return token->keyword == keyword;\n }\n \n-/* Issue the indicated error MESSAGE.  */\n+/* If not parsing tentatively, issue a diagnostic of the form\n+      FILE:LINE: MESSAGE before TOKEN\n+   where TOKEN is the next token in the input stream.  MESSAGE\n+   (specified by the caller) is usually of the form \"expected\n+   OTHER-TOKEN\".  */\n \n static void\n cp_parser_error (cp_parser* parser, const char* message)\n {\n-  /* Output the MESSAGE -- unless we're parsing tentatively.  */\n   if (!cp_parser_simulate_error (parser))\n     {\n-      cp_token *token;\n-      token = cp_lexer_peek_token (parser->lexer);\n+      cp_token *token = cp_lexer_peek_token (parser->lexer);\n+      /* This diagnostic makes more sense if it is tagged to the line\n+\t of the token we just peeked at.  */\n+      cp_lexer_set_source_position_from_token (token);\n       c_parse_error (message,\n \t\t     /* Because c_parser_error does not understand\n \t\t\tCPP_KEYWORD, keywords are treated like\n@@ -2453,6 +2437,36 @@ cp_parser_new (void)\n   return parser;\n }\n \n+/* Create a cp_lexer structure which will emit the tokens in CACHE\n+   and push it onto the parser's lexer stack.  This is used for delayed\n+   parsing of in-class method bodies and default arguments, and should\n+   not be confused with tentative parsing.  */\n+static void\n+cp_parser_push_lexer_for_tokens (cp_parser *parser, cp_token_cache *cache)\n+{\n+  cp_lexer *lexer = cp_lexer_new_from_tokens (cache);\n+  lexer->next = parser->lexer;\n+  parser->lexer = lexer;\n+\n+  /* Move the current source position to that of the first token in the\n+     new lexer.  */\n+  cp_lexer_set_source_position_from_token (lexer->next_token);\n+}\n+\n+/* Pop the top lexer off the parser stack.  This is never used for the\n+   \"main\" lexer, only for those pushed by cp_parser_push_lexer_for_tokens.  */\n+static void\n+cp_parser_pop_lexer (cp_parser *parser)\n+{\n+  cp_lexer *lexer = parser->lexer;\n+  parser->lexer = lexer->next;\n+  cp_lexer_destroy (lexer);\n+\n+  /* Put the current source position back where it was before this\n+     lexer was pushed.  */\n+  cp_lexer_set_source_position_from_token (parser->lexer->next_token);\n+}\n+\n /* Lexical conventions [gram.lex]  */\n \n /* Parse an identifier.  Returns an IDENTIFIER_NODE representing the\n@@ -2502,14 +2516,16 @@ cp_parser_string_literal (cp_parser *parser, bool translate, bool wide_ok)\n \n   /* Try to avoid the overhead of creating and destroying an obstack\n      for the common case of just one string.  */\n-  if (!cp_parser_is_string_literal (cp_lexer_peek_nth_token (parser->lexer, 2)))\n+  if (!cp_parser_is_string_literal\n+      (cp_lexer_peek_nth_token (parser->lexer, 2)))\n     {\n+      cp_lexer_consume_token (parser->lexer);\n+\n       str.text = (const unsigned char *)TREE_STRING_POINTER (tok->value);\n       str.len = TREE_STRING_LENGTH (tok->value);\n       count = 1;\n       if (tok->type == CPP_WSTRING)\n \twide = true;\n-      cp_lexer_consume_token (parser->lexer);\n \n       strs = &str;\n     }\n@@ -2520,6 +2536,7 @@ cp_parser_string_literal (cp_parser *parser, bool translate, bool wide_ok)\n \n       do\n \t{\n+\t  cp_lexer_consume_token (parser->lexer);\n \t  count++;\n \t  str.text = (unsigned char *)TREE_STRING_POINTER (tok->value);\n \t  str.len = TREE_STRING_LENGTH (tok->value);\n@@ -2528,11 +2545,7 @@ cp_parser_string_literal (cp_parser *parser, bool translate, bool wide_ok)\n \n \t  obstack_grow (&str_ob, &str, sizeof (cpp_string));\n \n-\t  /* We do it this way so that, if we have to issue semantic\n-\t     errors on this string literal, the source position will\n-\t     be that of the first token of the string.  */\n-\t  tok = cp_lexer_peek_nth_token (parser->lexer, 2);\n-\t  cp_lexer_consume_token (parser->lexer);\n+\t  tok = cp_lexer_peek_token (parser->lexer);\n \t}\n       while (cp_parser_is_string_literal (tok));\n \n@@ -6610,9 +6623,9 @@ cp_parser_declaration_seq_opt (cp_parser* parser)\n \t{\n \t  /* A declaration consisting of a single semicolon is\n \t     invalid.  Allow it unless we're being pedantic.  */\n-\t  if (pedantic && !in_system_header)\n-\t    pedwarn (\"extra `;'\");\n \t  cp_lexer_consume_token (parser->lexer);\n+\t  if (pedantic && !in_system_header)\n+\t    pedwarn (\"extra %<;%>\");\n \t  continue;\n \t}\n \n@@ -8344,7 +8357,7 @@ cp_parser_template_id (cp_parser *parser,\n   /* If we find the sequence `[:' after a template-name, it's probably\n      a digraph-typo for `< ::'. Substitute the tokens and check if we can\n      parse correctly the argument list.  */\n-  next_token = cp_lexer_peek_nth_token (parser->lexer, 1);\n+  next_token = cp_lexer_peek_token (parser->lexer);\n   next_token_2 = cp_lexer_peek_nth_token (parser->lexer, 2);\n   if (next_token->type == CPP_OPEN_SQUARE\n       && next_token->flags & DIGRAPH\n@@ -9808,14 +9821,17 @@ cp_parser_enum_specifier (cp_parser* parser)\n   else\n     identifier = make_anon_name ();\n \n-  cp_lexer_consume_token (parser->lexer);\n-\n   /* Issue an error message if type-definitions are forbidden here.  */\n   cp_parser_check_type_definition (parser);\n \n-  /* Create the new type.  */\n+  /* Create the new type.  We do this before consuming the opening brace\n+     so the enum will be recorded as being on the line of its tag (or the\n+     'enum' keyword, if there is no tag).  */\n   type = start_enum (identifier);\n \n+  /* Consume the opening brace.  */\n+  cp_lexer_consume_token (parser->lexer);\n+\n   /* If the next token is not '}', then there are some enumerators.  */\n   if (cp_lexer_next_token_is_not (parser->lexer, CPP_CLOSE_BRACE))\n     cp_parser_enumerator_list (parser, type);\n@@ -12880,8 +12896,9 @@ cp_parser_member_declaration (cp_parser* parser)\n \t name of the class.  */\n       if (!decl_specifiers.any_specifiers_p)\n \t{\n-\t  if (pedantic)\n-\t    pedwarn (\"extra semicolon\");\n+\t  cp_token *token = cp_lexer_peek_token (parser->lexer);\n+\t  if (pedantic && !token->in_system_header)\n+\t    pedwarn (\"%Hextra %<;%>\", &token->location);\n \t}\n       else\n \t{\n@@ -14979,25 +14996,37 @@ cp_parser_enclosed_template_argument_list (cp_parser* parser)\n     {\n       if (!saved_greater_than_is_operator_p)\n \t{\n-\t  /* If we're in a nested template argument list, the '>>' has to be\n-\t    a typo for '> >'. We emit the error message, but we continue\n-\t    parsing and we push a '>' as next token, so that the argument\n-\t    list will be parsed correctly..  */\n-\t  cp_token* token;\n-\t  error (\"`>>' should be `> >' within a nested template argument list\");\n-\t  token = cp_lexer_peek_token (parser->lexer);\n+\t  /* If we're in a nested template argument list, the '>>' has\n+\t    to be a typo for '> >'. We emit the error message, but we\n+\t    continue parsing and we push a '>' as next token, so that\n+\t    the argument list will be parsed correctly.  Note that the\n+\t    global source location is still on the token before the\n+\t    '>>', so we need to say explicitly where we want it.  */\n+\t  cp_token *token = cp_lexer_peek_token (parser->lexer);\n+\t  error (\"%H%<>>%> should be %<> >%> \"\n+\t\t \"within a nested template argument list\",\n+\t\t &token->location);\n+\n+\t  /* ??? Proper recovery should terminate two levels of\n+\t     template argument list here.  */\n \t  token->type = CPP_GREATER;\n \t}\n       else\n \t{\n-\t  /* If this is not a nested template argument list, the '>>' is\n-\t    a typo for '>'. Emit an error message and continue.  */\n-\t  error (\"spurious `>>', use `>' to terminate a template argument list\");\n+\t  /* If this is not a nested template argument list, the '>>'\n+\t    is a typo for '>'. Emit an error message and continue.\n+\t    Same deal about the token location, but here we can get it\n+\t    right by consuming the '>>' before issuing the diagnostic.  */\n \t  cp_lexer_consume_token (parser->lexer);\n+\t  error (\"spurious %<>>%>, use %<>%> to terminate \"\n+\t\t \"a template argument list\");\n \t}\n     }\n-  else if (!cp_parser_require (parser, CPP_GREATER, \"`>'\"))\n-    error (\"missing `>' to terminate the template argument list\");\n+  else if (!cp_lexer_next_token_is (parser->lexer, CPP_GREATER))\n+    error (\"missing %<>%> to terminate the template argument list\");\n+  else\n+    /* It's what we want, a '>'; consume it.  */\n+    cp_lexer_consume_token (parser->lexer);\n   /* The `>' token might be a greater-than operator again now.  */\n   parser->greater_than_is_operator_p\n     = saved_greater_than_is_operator_p;\n@@ -15016,8 +15045,6 @@ cp_parser_enclosed_template_argument_list (cp_parser* parser)\n static void\n cp_parser_late_parsing_for_member (cp_parser* parser, tree member_function)\n {\n-  cp_lexer *saved_lexer;\n-\n   /* If this member is a template, get the underlying\n      FUNCTION_DECL.  */\n   if (DECL_FUNCTION_TEMPLATE_P (member_function))\n@@ -15054,15 +15081,8 @@ cp_parser_late_parsing_for_member (cp_parser* parser, tree member_function)\n       if (function_scope)\n \tpush_function_context_to (function_scope);\n \n-      /* Save away the current lexer.  */\n-      saved_lexer = parser->lexer;\n-      /* Make a new lexer to feed us the tokens saved for this function.  */\n-      parser->lexer = cp_lexer_new_from_tokens (tokens);\n-      parser->lexer->next = saved_lexer;\n-\n-      /* Set the current source position to be the location of the first\n-\t token in the saved inline body.  */\n-      cp_lexer_peek_token (parser->lexer);\n+      /* Push the body of the function onto the lexer stack.  */\n+      cp_parser_push_lexer_for_tokens (parser, tokens);\n \n       /* Let the front end know that we going to be defining this\n \t function.  */\n@@ -15076,8 +15096,7 @@ cp_parser_late_parsing_for_member (cp_parser* parser, tree member_function)\n       /* Leave the scope of the containing function.  */\n       if (function_scope)\n \tpop_function_context_from (function_scope);\n-      /* Restore the lexer.  */\n-      parser->lexer = saved_lexer;\n+      cp_parser_pop_lexer (parser);\n     }\n \n   /* Remove any template parameters from the symbol table.  */\n@@ -15117,10 +15136,8 @@ cp_parser_save_default_args (cp_parser* parser, tree decl)\n static void\n cp_parser_late_parsing_default_args (cp_parser *parser, tree fn)\n {\n-  cp_lexer *saved_lexer;\n-  cp_token_cache *tokens;\n   bool saved_local_variables_forbidden_p;\n-  tree parameters;\n+  tree parm;\n \n   /* While we're parsing the default args, we might (due to the\n      statement expression extension) encounter more classes.  We want\n@@ -15129,42 +15146,42 @@ cp_parser_late_parsing_default_args (cp_parser *parser, tree fn)\n   parser->unparsed_functions_queues\n     = tree_cons (NULL_TREE, NULL_TREE, parser->unparsed_functions_queues);\n \n-  for (parameters = TYPE_ARG_TYPES (TREE_TYPE (fn));\n-       parameters;\n-       parameters = TREE_CHAIN (parameters))\n+  /* Local variable names (and the `this' keyword) may not appear\n+     in a default argument.  */\n+  saved_local_variables_forbidden_p = parser->local_variables_forbidden_p;\n+  parser->local_variables_forbidden_p = true;\n+\n+  for (parm = TYPE_ARG_TYPES (TREE_TYPE (fn));\n+       parm;\n+       parm = TREE_CHAIN (parm))\n     {\n-      if (!TREE_PURPOSE (parameters)\n-\t  || TREE_CODE (TREE_PURPOSE (parameters)) != DEFAULT_ARG)\n-\tcontinue;\n+      cp_token_cache *tokens;\n \n-       /* Save away the current lexer.  */\n-      saved_lexer = parser->lexer;\n-       /* Create a new one, using the tokens we have saved.  */\n-      tokens =  DEFARG_TOKENS (TREE_PURPOSE (parameters));\n-      parser->lexer = cp_lexer_new_from_tokens (tokens);\n+      if (!TREE_PURPOSE (parm)\n+\t  || TREE_CODE (TREE_PURPOSE (parm)) != DEFAULT_ARG)\n+\tcontinue;\n \n-       /* Set the current source position to be the location of the\n-     \t  first token in the default argument.  */\n-      cp_lexer_peek_token (parser->lexer);\n+       /* Push the saved tokens for the default argument onto the parser's\n+\t  lexer stack.  */\n+      tokens = DEFARG_TOKENS (TREE_PURPOSE (parm));\n+      cp_parser_push_lexer_for_tokens (parser, tokens);\n \n-       /* Local variable names (and the `this' keyword) may not appear\n-     \t  in a default argument.  */\n-      saved_local_variables_forbidden_p = parser->local_variables_forbidden_p;\n-      parser->local_variables_forbidden_p = true;\n-       /* Parse the assignment-expression.  */\n-      TREE_PURPOSE (parameters) = cp_parser_assignment_expression (parser);\n+      /* Parse the assignment-expression.  */\n+      TREE_PURPOSE (parm) = cp_parser_assignment_expression (parser);\n \n       /* If the token stream has not been completely used up, then\n \t there was extra junk after the end of the default\n \t argument.  */\n       if (!cp_lexer_next_token_is (parser->lexer, CPP_EOF))\n \tcp_parser_error (parser, \"expected `,'\");\n \n-       /* Restore saved state.  */\n-      parser->lexer = saved_lexer;\n-      parser->local_variables_forbidden_p = saved_local_variables_forbidden_p;\n+      /* Revert to the main lexer.  */\n+      cp_parser_pop_lexer (parser);\n     }\n \n+  /* Restore the state of local_variables_forbidden_p.  */\n+  parser->local_variables_forbidden_p = saved_local_variables_forbidden_p;\n+\n   /* Restore the queue.  */\n   parser->unparsed_functions_queues\n     = TREE_CHAIN (parser->unparsed_functions_queues);"}, {"sha": "b6f1ca1c449baae83e9a3b07db3736304ad5fcf7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 110, "deletions": 40, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -1,3 +1,73 @@\n+2004-09-23  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* g++.dg/ext/complit1.C\n+\t* g++.dg/other/error2.C\n+\t* g++.dg/other/nontype-1.C\n+\t* g++.dg/parse/crash11.C\n+\t* g++.dg/parse/crash12.C\n+\t* g++.dg/parse/error15.C\n+\t* g++.dg/parse/error4.C\n+\t* g++.dg/parse/tmpl-outside1.C\n+\t* g++.dg/parse/too-many-tmpl-args1.C\n+\t* g++.dg/template/dependent-expr3.C\n+\t* g++.dg/template/error10.C\n+\t* g++.dg/template/instantiate1.C\n+\t* g++.dg/template/vtable2.C\n+\t* g++.dg/warn/Wshadow-1.C\n+\t* g++.dg/warn/weak1.C\n+\t* g++.old-deja/g++.brendan/crash16.C\n+\t* g++.old-deja/g++.brendan/crash18.C\n+\t* g++.old-deja/g++.brendan/crash48.C\n+\t* g++.old-deja/g++.brendan/crash49.C\n+\t* g++.old-deja/g++.brendan/crash55.C\n+\t* g++.old-deja/g++.brendan/crash56.C\n+\t* g++.old-deja/g++.brendan/crash8.C\n+\t* g++.old-deja/g++.brendan/enum11.C\n+\t* g++.old-deja/g++.brendan/enum8.C\n+\t* g++.old-deja/g++.brendan/enum9.C\n+\t* g++.old-deja/g++.brendan/friend3.C\n+\t* g++.old-deja/g++.brendan/misc14.C\n+\t* g++.old-deja/g++.bugs/900402_02.C\n+\t* g++.old-deja/g++.bugs/900404_03.C\n+\t* g++.old-deja/g++.bugs/900404_04.C\n+\t* g++.old-deja/g++.bugs/900428_03.C\n+\t* g++.old-deja/g++.jason/crash4.C\n+\t* g++.old-deja/g++.jason/overload21.C\n+\t* g++.old-deja/g++.jason/redecl1.C\n+\t* g++.old-deja/g++.jason/report.C\n+\t* g++.old-deja/g++.jason/rfg10.C\n+\t* g++.old-deja/g++.jason/template30.C\n+\t* g++.old-deja/g++.law/arm12.C\n+\t* g++.old-deja/g++.law/ctors5.C\n+\t* g++.old-deja/g++.law/cvt20.C\n+\t* g++.old-deja/g++.law/init10.C\n+\t* g++.old-deja/g++.law/init8.C\n+\t* g++.old-deja/g++.law/visibility17.C\n+\t* g++.old-deja/g++.law/visibility7.C\n+\t* g++.old-deja/g++.mike/net8.C\n+\t* g++.old-deja/g++.mike/p646.C\n+\t* g++.old-deja/g++.mike/p700.C\n+\t* g++.old-deja/g++.mike/p701.C\n+\t* g++.old-deja/g++.mike/p811.C\n+\t* g++.old-deja/g++.ns/template13.C\n+\t* g++.old-deja/g++.other/array3.C\n+\t* g++.old-deja/g++.other/crash25.C\n+\t* g++.old-deja/g++.other/dtor3.C\n+\t* g++.old-deja/g++.other/dtor4.C\n+\t* g++.old-deja/g++.other/main1.C\n+\t* g++.old-deja/g++.other/warn7.C\n+\t* g++.old-deja/g++.pt/crash11.C\n+\t* g++.old-deja/g++.pt/crash36.C\n+\t* g++.old-deja/g++.pt/spec22.C\n+\t* g++.old-deja/g++.pt/spec9.C\n+\t* g++.old-deja/g++.pt/ttp52.C\n+\t* g++.old-deja/g++.robertl/eb103.C\n+\t* g++.old-deja/g++.robertl/eb121.C\n+\t* g++.old-deja/g++.robertl/eb22.C\n+\t* g++.old-deja/g++.robertl/eb8.C:\n+\tUpdate locations and/or regexps of dg-error markers.\n+\tRemove markers for some bogus messages that are no longer issued.\n+\n 2004-09-23  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.c-torture/execute/builtins/strcpy-2.c: New test.\n@@ -10,38 +80,38 @@\n \n 2004-09-23  Dorit Naishlos <dorit@il.ibm.com>\n \n-        * gcc.dg/vect/vect-27.c: Now vectorized on altivec.\n-        * gcc.dg/vect/vect-29.c: Now vectorized on altivec.\n-        * gcc.dg/vect/vect-48.c: Now vectorized on altivec.\n-        * gcc.dg/vect/vect-56.c: Now vectorized on altivec.\n-        * gcc.dg/vect/vect-72.c: New test for altivec and sse2.\n-        * gcc.dg/vect/vect-77.c: Now vectorized on altivec.\n-\n-        * gcc.dg/vect/vect-27a.c: New test for altivec and mmx.\n-        * gcc.dg/vect/vect-29a.c: New test for altivec and mmx.\n-        * gcc.dg/vect/vect-48a.c: New test for altivec and mmx.\n-        * gcc.dg/vect/vect-56a.c: New test for altivec and mmx.\n-        * gcc.dg/vect/vect-72a.c: New test for altivec and mmx.\n-        * gcc.dg/vect/vect-77a.c: New test for altivec and mmx.\n-\n-        * gcc.dg/vect/vect-13.c: Change to run test instead of compile.\n-\n-        * gcc.dg/vect/vect-44.c: Check additional cases.\n-        * gcc.dg/vect/vect-48.c: Check additional cases.\n-\n-        * gcc.dg/vect/vect-26.c: Use sse2 instead of sse.\n-        * gcc.dg/vect/vect-27.c: Use sse2 instead of sse.\n-        * gcc.dg/vect/vect-28.c: Use sse2 instead of sse.\n-        * gcc.dg/vect/vect-29.c: Use sse2 instead of sse.\n-        * gcc.dg/vect/vect-4?.c: Use sse2 instead of sse.\n-        * gcc.dg/vect/vect-75.c: Use sse2 instead of sse.\n-        * gcc.dg/vect/vect-76.c: Use sse2 instead of sse.\n-        * gcc.dg/vect/vect-77.c: Use sse2 instead of sse.\n-        * gcc.dg/vect/vect-78.c: Use sse2 instead of sse.\n-\n-        * gcc.dg/vect/vect-5?.c: Use sse2 instead of sse. Add return 0.\n-        * gcc.dg/vect/vect-60.c: Use sse2 instead of sse. Add return 0.\n-        * gcc.dg/vect/vect-61.c: Use sse2 instead of sse. Add return 0.\n+\t* gcc.dg/vect/vect-27.c: Now vectorized on altivec.\n+\t* gcc.dg/vect/vect-29.c: Now vectorized on altivec.\n+\t* gcc.dg/vect/vect-48.c: Now vectorized on altivec.\n+\t* gcc.dg/vect/vect-56.c: Now vectorized on altivec.\n+\t* gcc.dg/vect/vect-72.c: New test for altivec and sse2.\n+\t* gcc.dg/vect/vect-77.c: Now vectorized on altivec.\n+\n+\t* gcc.dg/vect/vect-27a.c: New test for altivec and mmx.\n+\t* gcc.dg/vect/vect-29a.c: New test for altivec and mmx.\n+\t* gcc.dg/vect/vect-48a.c: New test for altivec and mmx.\n+\t* gcc.dg/vect/vect-56a.c: New test for altivec and mmx.\n+\t* gcc.dg/vect/vect-72a.c: New test for altivec and mmx.\n+\t* gcc.dg/vect/vect-77a.c: New test for altivec and mmx.\n+\n+\t* gcc.dg/vect/vect-13.c: Change to run test instead of compile.\n+\n+\t* gcc.dg/vect/vect-44.c: Check additional cases.\n+\t* gcc.dg/vect/vect-48.c: Check additional cases.\n+\n+\t* gcc.dg/vect/vect-26.c: Use sse2 instead of sse.\n+\t* gcc.dg/vect/vect-27.c: Use sse2 instead of sse.\n+\t* gcc.dg/vect/vect-28.c: Use sse2 instead of sse.\n+\t* gcc.dg/vect/vect-29.c: Use sse2 instead of sse.\n+\t* gcc.dg/vect/vect-4?.c: Use sse2 instead of sse.\n+\t* gcc.dg/vect/vect-75.c: Use sse2 instead of sse.\n+\t* gcc.dg/vect/vect-76.c: Use sse2 instead of sse.\n+\t* gcc.dg/vect/vect-77.c: Use sse2 instead of sse.\n+\t* gcc.dg/vect/vect-78.c: Use sse2 instead of sse.\n+\n+\t* gcc.dg/vect/vect-5?.c: Use sse2 instead of sse. Add return 0.\n+\t* gcc.dg/vect/vect-60.c: Use sse2 instead of sse. Add return 0.\n+\t* gcc.dg/vect/vect-61.c: Use sse2 instead of sse. Add return 0.\n \n 2004-09-23  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n \n@@ -93,7 +163,7 @@\n \n \tPR c++/15049\n \t* g++.dg/other/anon3.C: New.\n-\t\n+\n 2004-09-21  Roger Sayle  <roger@eyesopen.com>\n \n \tPR c++/7503\n@@ -115,7 +185,7 @@\n \n 2004-09-20  Andrew Pinski  <pinskia@physics.uc.edu>\n \n-\tPR tree-opt/17558 \n+\tPR tree-opt/17558\n \t* gcc.c-torture/compile/pr17558.c: New test.\n \n 2004-09-20  Richard Sandiford  <rsandifo@redhat.com>\n@@ -138,7 +208,7 @@\n 2004-09-20  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n \n \tPR fortran/15750\n-\t* gfortran.fortran-torture/execute/iolength_2.f90: New test.\t\n+\t* gfortran.fortran-torture/execute/iolength_2.f90: New test.\n \n 2004-09-20  Ira Rosen  <irar@il.ibm.com>\n \n@@ -200,7 +270,7 @@\n 2004-09-17  Devang Patel  <dpatel@apple.com>\n \n \t* gcc.dg/20040813-1.c: New test.\n-\t\n+\n 2004-09-17  Diego Novillo  <dnovillo@redhat.com>\n \n \tPR tree-optimization/17273\n@@ -225,7 +295,7 @@\n \n \tPR c++/16002\n \t* g++.dg/template/error18.C: New test.\n-\t\n+\n \tPR c++/16029\n \t* g++.dg/warn/Wunused-8.C: New test.\n \n@@ -320,7 +390,7 @@\n \t* gcc.dg/declspec-12.c: New test.\n \n 2004-09-14  Bud Davis  <bdavis9659@comcast.net>\n-\t\n+\n \t* gfortran.dg/pr17090.f90: Add directives to test.\n \n 2004-09-14  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n@@ -331,7 +401,7 @@\n \n \tPR c++/16162\n \t* g++.dg/template/decl2.C: New test.\n-\t\n+\n 2004-09-13  Bud Davis  <bdavis9659@comcast.net>\n \n \tPR fortran/17090\n@@ -345,7 +415,7 @@\n \n \tPR c++/16716\n \t* g++.dg/parse/crash17.C: New test.\n-\t\n+\n \tPR c++/17327\n \t* g++.dg/template/enum3.C: New test.\n "}, {"sha": "ab2b038fe341d89ac21d72969730db44969159ca", "filename": "gcc/testsuite/g++.dg/ext/complit1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fcomplit1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fcomplit1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fcomplit1.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -11,6 +11,6 @@ public:\n };\n \n Foo::Foo(int v0, int v1)\n-  : val_((int[]) {v0, v1})\n-{\t\t\t\t// { dg-error \"\" \"\" }\n+  : val_((int[]) {v0, v1})  // { dg-error \"\" \"\" }\n+{\n }"}, {"sha": "36089e4b5b5dc07364470129d46af22ead2ecab1", "filename": "gcc/testsuite/g++.dg/other/error2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror2.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -10,5 +10,5 @@ namespace N\n   class B { friend void operator>>(int, class B); };\n   class N { friend void operator>>(int,class N); };\n } \n-void N::operator>>(int, N::B)  // { dg-error \"N::N::B\" }\n-{ } // { dg-error \"\" \"\" }\n+void N::operator>>(int, N::B)  // { dg-error \"N::N::B|N::operator>>\" }\n+{ }"}, {"sha": "11bbfb829685b6e929796f348aaebe08a3a8590e", "filename": "gcc/testsuite/g++.dg/other/nontype-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fnontype-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fnontype-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fnontype-1.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -2,6 +2,6 @@ template <class Op>\n bool asfun(Op f,\n            Op::first_argument_type a, // { dg-error \"not a type\" }\n            Op::second_argument_type b) // { dg-error \"not a type\" }\n-{                               // { dg-error \"no type\" }\n+{\n    return Op(a, b);\n }"}, {"sha": "4fa7ff23c73c6afee16d8ae282f620e18d2d7d96", "filename": "gcc/testsuite/g++.dg/parse/crash11.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash11.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -19,8 +19,8 @@ struct B\n   template <typename T>\n   struct Template\n   {\n-    typedef typename A<A<TP>::Template>\n-      ::template Template<T>::Type Type; // { dg-error \"mismatch|class template|unqualified-id\" }\n+    typedef typename A<A<TP>::Template>  // { dg-error \"mismatch|class template\" }\n+      ::template Template<T>::Type Type; // { dg-error \"unqualified-id\" }\n   };\n };\n template <typename T>"}, {"sha": "a936e8c30ee0df456f22fe8673943afc4c072a4f", "filename": "gcc/testsuite/g++.dg/parse/crash12.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash12.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -14,8 +14,8 @@ public:\n };\n \n template <class _Tp>\n-inline counted_ptr<_Tp>::counted_ptr(class auto_ptr& __a) // { dg-error \"required\" }\n-{\t\t\t\t\t\t// { dg-error \"no type|not match|template\" }\n+inline counted_ptr<_Tp>::counted_ptr(class auto_ptr& __a) // { dg-error \"required|not match|template\" }\n+{\n }\n \n template <class _Tp>"}, {"sha": "e49e211480abae803e09cbdfbd599de92bc2a95d", "filename": "gcc/testsuite/g++.dg/parse/error15.C", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror15.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -35,5 +35,3 @@ struct C\n };\n \n // { dg-bogus \"\" \"bogus excess errors in declaration\" { xfail *-*-* } 16 }\n-// { dg-bogus \"\" \"bogus excess errors in declaration\" { xfail *-*-* } 24 }\n-// { dg-bogus \"\" \"bogus excess errors in declaration\" { xfail *-*-* } 34 }"}, {"sha": "aa1bfad0dc9d09e5a7659eaf1e079d4508a3b10d", "filename": "gcc/testsuite/g++.dg/parse/error4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror4.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -3,5 +3,5 @@\n struct X { \n   virtual void f(int, \n \t\t itn,        // { dg-error \"declared\" }\n-\t\t int);       // { dg-error \"\" }\n+\t\t int);\n }; "}, {"sha": "4b8bb723cac712dca950ed997ab765ece3883165", "filename": "gcc/testsuite/g++.dg/parse/tmpl-outside1.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftmpl-outside1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftmpl-outside1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftmpl-outside1.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -8,3 +8,4 @@ struct X\n };\n \n typedef X::template Y<0> y; // { dg-error \"template\" }\n+// { dg-bogus \"with no type\" \"\" { xfail *-*-* } 10 }"}, {"sha": "4d98e754639a3a85712a36baf9cf9e7d919c2415", "filename": "gcc/testsuite/g++.dg/parse/too-many-tmpl-args1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftoo-many-tmpl-args1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftoo-many-tmpl-args1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftoo-many-tmpl-args1.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -2,8 +2,8 @@\n // Origin: Wolfgang Bangerth <bangerth@ticam.utexas.edu>\n // { dg-do compile }\n \n-template <typename T> class A\n-{                                                             // { dg-error \"\" }\n+template <typename T> class A                                 // { dg-error \"\" }\n+{\n     struct B;\n     template <typename U> friend typename A<U,void>::B foo(); // { dg-error \"\" }\n };"}, {"sha": "97fddbdd8d44819deab9e82215b7c0592216adc6", "filename": "gcc/testsuite/g++.dg/template/dependent-expr3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-expr3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-expr3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-expr3.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -10,5 +10,5 @@ template <typename K> struct Y : K {\n \n template <class T> struct Z {\n   S< (bool)(&static_cast<Y<T> *>(0)->x == 0) > // { dg-error \"\" }\n-  s; // { dg-error \"\" }\n+  s;\n };"}, {"sha": "ccb577dfc736b5e1acaf3438690fac850e320aa7", "filename": "gcc/testsuite/g++.dg/template/error10.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror10.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -9,8 +9,8 @@\n template <class T>\n class A {};\n \n-A<A<int>> blah;  // { dg-error \"should be `> >' within\" }\n-A<int>> blah2; // { dg-error \"spurious `>>'\" }\n+A<A<int>> blah;  // { dg-error \"should be '> >' within\" }\n+A<int>> blah2; // { dg-error \"spurious '>>'\" }\n \n \n /*\n@@ -66,5 +66,5 @@ struct K {};\n \n void KFunc(void);\n \n-A<K<&KFunc>> k1;  // { dg-error \"should be `> >' within\" }\n-K<&KFunc>> k2; // { dg-error \"spurious `>>'\" }\n+A<K<&KFunc>> k1;  // { dg-error \"should be '> >' within\" }\n+K<&KFunc>> k2; // { dg-error \"spurious '>>'\" }"}, {"sha": "311344d9451dacee895dc63ae0deb6099f1df560", "filename": "gcc/testsuite/g++.dg/template/instantiate1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finstantiate1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finstantiate1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finstantiate1.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -16,6 +16,6 @@ template <class T> struct Z {\t// { dg-error \"declaration\" }\n   Y<Z<T> > y;\t\t\t// { dg-error \"instantiated\" }\n };\n \n-struct ZZ : Z<int>\n-{\t\t\t\t// { dg-error \"instantiated\" }\n+struct ZZ : Z<int>\t\t// { dg-error \"instantiated\" }\n+{\n };"}, {"sha": "3bcc1ac3f8a687b2037af00eb5e8f7271a6741b3", "filename": "gcc/testsuite/g++.dg/template/vtable2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fvtable2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fvtable2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fvtable2.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -11,8 +11,8 @@\n template <class T> struct inner {};\n \n template <class T> struct parent {\n-  virtual void f()\n-    { parent<inner<T> > p; };\t\t// { dg-error \"instantiation depth\" }\n+  virtual void f()\t\t\t// { dg-error \"instantiation depth\" }\n+    { parent<inner<T> > p; };\n };\n \n template struct parent<int>;"}, {"sha": "1647a010d12289ba4bbeadc8bc87dfe3918a8c3c", "filename": "gcc/testsuite/g++.dg/warn/Wshadow-1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWshadow-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWshadow-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWshadow-1.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -21,8 +21,8 @@ struct status\t\t\t// { dg-bogus \"shadowed declaration\" }\n int decl1;\t\t\t// { dg-warning \"shadowed declaration\" }\n int decl2;\t\t\t// { dg-warning \"shadowed declaration\" }\n void foo (struct status &status,// { dg-bogus \"shadows a global decl\" }\n-\t  double decl1)\n-{\t\t\t\t// { dg-warning \"shadows a global decl\" }\n+\t  double decl1)\t\t// { dg-warning \"shadows a global decl\" }\n+{\n }\n \n void foo1 (int d)"}, {"sha": "84d08fbd4797270f22f81973b8c436d5f6ae5f13", "filename": "gcc/testsuite/g++.dg/warn/weak1.C", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fweak1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fweak1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fweak1.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -1,6 +1,5 @@\n // { dg-do run }\n-// { dg-do compile { target *-*-coff i?86-pc-cygwin } }\n-// { dg-warning \"weak declaration\" \"COFF format does not support weak\" { target *-*-coff i?86-pc-cygwin powerpc-ibm-aix4* rs6000-ibm-aix4* } 5 }\n+// { dg-require-weak \"\" }\n \n extern void foo (void) __attribute__ ((weak));\n "}, {"sha": "8b91e6ba093da685ceeb35d925b82eb302b621c5", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash16.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash16.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -1,12 +1,12 @@\n-// { dg-do assemble { xfail *-*-* } }\n+// { dg-do compile }\n // GROUPS passed old-abort\n class Graph {\n public:\n       unsigned         char N;\n-      Graph(void) {}; // { dg-error \"\" } previously defined here\n+      Graph(void) {}; // { dg-error \"previously defined here\" }\n }\n \n-Graph::Graph(void)\n-{    N = 10;// { dg-error \"\" }  return type.*\n+Graph::Graph(void)    // { dg-error \"return type|redefinition\" }\n+{    N = 10;\n }\n "}, {"sha": "119ba46053859622782b796a49d980d0a12cb88b", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash18.C", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash18.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do assemble  }\n+// { dg-do compile }\n // GROUPS passed old-abort\n typedef int element;\n class Pix {\n@@ -7,11 +7,12 @@ public:\n     Pix(const Pix&);\n \n     // Friend functions so that v == x works as does x == v works\n-    friend int operator==(void *v, const Pix& x)\n-        { return v == index; }// { dg-error \"\" } .*\n-    friend int operator==(void *v, const Pix& x)\n-        { return v != index; }// { dg-error \"\" } .*\n+    friend int operator==(void *v, const Pix& x) // { dg-error \"previously\" }\n+    { return v == index; }  // { dg-error \"from this location\" }\n+    // ??? should be operator!=\n+    friend int operator==(void *v, const Pix& x) // { dg-error \"redefinition\" }\n+    { return v != index; }\n private:\n //    friend class List<T>;\n-    element *index; // { dg-error \"\" } invalid use of member\n+    element *index; // { dg-error \"invalid use of non-static data member\" }\n };"}, {"sha": "bdb522aeb56c96e27c42a3921672cefc6a8ee549", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash48.C", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash48.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash48.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash48.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -1,22 +1,22 @@\n-// { dg-do assemble  }\n+// { dg-do compile }\n // GROUPS passed old-abort\n-class internal { // { dg-error \"\" } candidates are\n+class internal { // { dg-error \"internal::internal\" }\n \tint field;\n \tint anotherfield;\n };\n \n-class bug { // { dg-error \"\" } several errors\n+class bug { // { dg-error \"bug::bug\" }\n \tinternal* numbers;\n \tbug(int size);\n };\n \n-bug::bug(int size)\n-{ // { dg-error \"\" } candidates\n-\tnumbers = new internal(size * size);// { dg-error \"\" }  no match.*\n+bug::bug(int size) // { dg-error \"bug::bug\" }\n+{\n+  numbers = new internal(size * size);// { dg-error \"no match\" }\n }\n \n int\n main()\n {\n-\tbug test;// { dg-error \"\" }  no match\n+  bug test; // { dg-error \"no match\" }\n }"}, {"sha": "e0664da28dd808ac563ad73101e85395ab35ba9a", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash49.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash49.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash49.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash49.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -5,8 +5,8 @@\n const int keys = 10;\n const int key[keys] = {6, key[1], 2, keys, 1, 7, 6, key[2], key[8]};\n \n-void main()\n-{ // { dg-error \"\" } return type for main\n+void main()  // { dg-error \"must return .int\" }\n+{\n         for(int i = 0; i < keys;) std::cout << key[i++] << \" \";\n         std::endl(std::cout);\n }"}, {"sha": "cd952af142b87fe2b8c1c2e820f42b7aae6f4e7a", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash55.C", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash55.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash55.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash55.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -1,10 +1,10 @@\n-// { dg-do assemble  }\n+// { dg-do compile }\n // GROUPS passed old-abort\n-      extern f(int);// { dg-error \"\" }  ambiguates.*\n+      extern int f(int); // { dg-error \"ambiguates\" }\n \n-      int& f(int x)\n-      {// { dg-error \"\" }  new declaration.*\n-          int local;// { dg-error \"\" }  warning\n+      int& f(int x)  // { dg-error \"new declaration\" }\n+      {\n+          int local; // { dg-error \"reference to local\" }\n \n           local = x+2;\n       "}, {"sha": "57c7c11480bdd91a447ee97da9a18fb0019826e2", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash56.C", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash56.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash56.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash56.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -20,16 +20,16 @@ public:\n     class Vix {\n     public:\n \tVix();\n-\tfriend int operator==(void *v, const Vix& x)\n-\t    { return v == x.item; }// { dg-error \"\" } list of candidates\n-\tfriend int operator==(const Vix& x, void *v)\n-\t    { return v == x.item; }// { dg-error \"\" } candidate for call\n+\tfriend int operator==(void *v, const Vix& x) // { dg-error \"operator==\" }\n+\t    { return v == x.item; }\n+\tfriend int operator==(const Vix& x, void *v) // { dg-error \"operator==\" }\n+\t    { return v == x.item; }\n \tfriend int operator!=(void *v, const Vix& x)\n \t    { return v != x.item; }\n \tfriend int operator!=(const Vix& x, void *v)\n \t    { return v != x.item; }\n-\tfriend int operator==(const Vix& x1, const Vix& x2)\n-\t    { return x1.owner == x2.owner && x1.item == x2.item; }// { dg-error \"\" } candidate for call\n+\tfriend int operator==(const Vix& x1, const Vix& x2) // { dg-error \"operator==\" }\n+\t    { return x1.owner == x2.owner && x1.item == x2.item; }\n \tfriend int operator!=(const Vix& x1, const Vix& x2)\n \t    { return x1.owner != x2.owner || x1.item != x2.item; }\n \tbool first;\t\t \n@@ -343,8 +343,8 @@ operator>=(const SetLD<T>& a, const SetLD<T>& b)\n class String { };\n class IcaseString: public String { };\n template <> class SetLD< IcaseString >: public SetLD<    String  > {\tpublic:\t SetLD (): SetLD<    String  >() { };\t SetLD (const ListD<   IcaseString  >& other): SetLD<    String  >()\t{ ListD<   IcaseString  >::Vix x;\tfor (other.first(x); 0 != x; other.next(x))\tadd(other(x)); };\t SetLD (const  SetLD & other): SetLD<    String  >(other) { };\tconst    IcaseString  & operator()(const Vix& x) const\t{ return (   IcaseString  &) SetLD<    String  >::operator()(x); }\t}; \ttypedef SetLD<  String > SetLD_String_IcaseString_old_tmp99;\ttypedef SetLD< IcaseString > SetLD_String_IcaseString_new_tmp99;\t\n-inline int\t operator== (const SetLD_String_IcaseString_new_tmp99& a,\tconst SetLD_String_IcaseString_new_tmp99& b)\n-{// { dg-error \"\" } candidate for call\n+inline int\t operator== (const SetLD_String_IcaseString_new_tmp99& a,\tconst SetLD_String_IcaseString_new_tmp99& b) // { dg-error \"operator==\" }\n+{\n const SetLD_String_IcaseString_old_tmp99& oa = a;\n const SetLD_String_IcaseString_old_tmp99& ob = b;\n return  operator== (oa, ob);\t} \t"}, {"sha": "487208328efca4f87f957199427ccabc3317ef25", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash8.C", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash8.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -1,12 +1,12 @@\n-// { dg-do assemble  }\n+// { dg-do compile }\n // GROUPS passed old-abort\n template<int a, int b>\n-class Elvis\n-{ // { dg-error \"\" } in template.*\n+class Elvis // { dg-error \"class Elvis\" }\n+{\n } ;\n \n template<int a>\n-class Elvis<0>\n-{ // { dg-error \"\" } incorrect number of parameters\n+class Elvis<0> // { dg-error \"wrong number of template arguments\" }\n+{\n   int geta() { return a ; }\n } ;"}, {"sha": "009333a18bea96d4de806ac673230214c93f74f8", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/enum11.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum11.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -6,8 +6,8 @@ class X\n     {\n        oneMask = 0x0000FFFF,\n        twoMask  = 0x000F0000,\n-       thiMask = 0xFFF00000,\n-    }; // { dg-error \"\" } comma\n+       thiMask = 0xFFF00000, // { dg-error \"comma at end\" }\n+    };\n     unsigned int foo;\n \n public:"}, {"sha": "ecf6fbf4eceb50a8cb6d4cef3a318c4f27ad0f1b", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/enum8.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum8.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -6,8 +6,8 @@ class foo1\n    enum foo1_enum\n    {\n       ENUM1,\n-      ENUM2,\n-   }; // { dg-error \"\" } comma\n+      ENUM2, // { dg-error \"comma at end\" }\n+   };\n };\n \n    "}, {"sha": "88ecc73283d8051a94d4f2998bb67885019d18a2", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/enum9.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum9.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -2,8 +2,8 @@\n // GROUPS passed enums\n enum fig {\n     figgy,\n-    pudding,\n-}; // { dg-error \"\" } comma\n+    pudding,  // { dg-error \"comma at end\" }\n+};\n \n class X {\n public:"}, {"sha": "ecd85b44b09733a164e161d5ba379e7e2139f9e2", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/friend3.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ffriend3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ffriend3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ffriend3.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -5,8 +5,8 @@ class B {\n    friend class A;\n \n    enum {\n-      bEnum = 1,\n-   }; // { dg-error \"\" } comma\n+      bEnum = 1, // { dg-error \"comma at end\" }\n+   };\n \n    int bArray[ bEnum ];\n "}, {"sha": "09242a46fa547a0a5a244ac0362652fee5518f89", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/misc14.C", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc14.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -3,10 +3,11 @@\n class X {\n public:\n     enum e {\n-\tNew,// { dg-error \"\" }  conflicts with other.*\n-    }; // { dg-error \"\" } comma\n+\tNew // { dg-error \"conflicts with previous\" }\n+\t,   // { dg-error \"comma at end\" }\n+    };\n \n-    static int New(int);// { dg-error \"\" }  declaration.*\n+    static int New(int); // { dg-error \"declaration of\" }\n };\n \n int main() {}"}, {"sha": "d3cf5ad9abe53f7a39bf66e4c4056418e39c2d5c", "filename": "gcc/testsuite/g++.old-deja/g++.bugs/900402_02.C", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900402_02.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900402_02.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900402_02.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -6,17 +6,17 @@\n \n // keywords: arrays, array bound, zero length\n \n-typedef int array_type[0];\t\t// { dg-error \"\" } gets warning only\n+typedef int array_type[0];\t\t// { dg-error \"zero-size array\" }\n \n-int array_object_1[0];\t\t\t// { dg-error \"\" } gets warning only\n+int array_object_1[0];\t\t\t// { dg-error \"zero-size array\" }\n \n-void function_0 (int formal_array[0])\n-{\t\t\t\t\t// { dg-error \"\" } gets warning only\n+void function_0 (int formal_array[0])\t// { dg-error \"zero-size array\" }\n+{\n }\n \n void function_2 ()\n {\n-  int local_object_array_0[0];\t\t// { dg-error \"\" } gets warning only\n+  int local_object_array_0[0];\t\t// { dg-error \"zero-size array\" }\n }\n \n int main () { return 0; }"}, {"sha": "726f9ef933e5cfeb4ad98246185cb877e47131f2", "filename": "gcc/testsuite/g++.old-deja/g++.bugs/900404_03.C", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900404_03.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900404_03.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900404_03.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -8,21 +8,21 @@\n \n // keywords: overloading, ambiguity, resolution\n \n-void function0 (int i, char c)\n-{\t\t\t\t// { dg-error \"\" } \n+void function0 (int i, char c)\t// { dg-error \"function0\" }\n+{\n   i = c;\n }\n \n-void function0 (char c, int i)\n-{\t\t\t\t// { dg-error \"\" } \n+void function0 (char c, int i)  // { dg-error \"function0\" }\n+{\n   i = c;\n }\n \n char c;\n \n void test ()\n {\n-  function0 (c,c);\t\t// { dg-error \"\" } missed\n+  function0 (c,c);\t\t// { dg-error \"ambiguous\" }\n }\n \n int main () { return 0; }"}, {"sha": "04ff66905498c3dedc2cff1f6aab23afbb4234bd", "filename": "gcc/testsuite/g++.old-deja/g++.bugs/900404_04.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900404_04.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900404_04.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900404_04.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -13,6 +13,6 @@\n \n int i;\n \n-;\t\t\t// { dg-error \"\" } \n+;\t\t\t// { dg-error \"extra ';'\" } \n \n int main () { return 0; }"}, {"sha": "d0625c4b4736a2b46cc653d4091c246c7e93d1b8", "filename": "gcc/testsuite/g++.old-deja/g++.bugs/900428_03.C", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900428_03.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900428_03.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900428_03.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -18,15 +18,15 @@ public:\n };\n \n struct_0::struct_0 (int i) { }\n-struct_0::struct_0 (int, int) { } // { dg-error \"\" } xref from below\n+struct_0::struct_0 (int, int) { } // { dg-error \"is private\" }\n \n struct struct_1 : public struct_0 {\n \n   struct_1 ();\n };\n \n-struct_1::struct_1 () : struct_0 (8,9)\n-{\t\t\t\t// { dg-error \"\" } \n+struct_1::struct_1 () : struct_0 (8,9) // { dg-error \"within this context\" }\n+{\n }\n \n struct struct_2 {\n@@ -35,11 +35,8 @@ struct struct_2 {\n   struct_2 ();\n };\n \n-// g++ catches the following error (but does so only at the line with the \n-// closing curly brace).\n-\n-struct_2::struct_2 () : struct_2_data_member (8,9)\n-{\t\t\t\t// { dg-error \"\" } should be up one line\n+struct_2::struct_2 () : struct_2_data_member (8,9) // { dg-error \"within this context\" }\n+{\n }\n \n int main () { return 0; }"}, {"sha": "00ba0cc0644e4ad708f24fb1191fa532f85619a3", "filename": "gcc/testsuite/g++.old-deja/g++.jason/crash4.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fcrash4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fcrash4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fcrash4.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -16,8 +16,8 @@ public:\n };\n \n template <class T>\n-const ccObjectInfo& cc_Array<T>::repInvariant(int) const\n-{  return *this /* *this is required here */; } // { dg-error \"\" } redefined\n+const ccObjectInfo& cc_Array<T>::repInvariant(int) const  // { dg-error \"previously declared\" }\n+{  return *this /* *this is required here */; }\n \n template <class T>\n class ccArray :public ccObjectInfo\n@@ -32,7 +32,7 @@ class ccObjArray : public ccArray<T>\n }; \n \n template <class T>\n-const ccObjectInfo& cc_Array<T>::repInvariant(int) const\n-{  return 0; }\t\t\t// { dg-error \"\" } causes compiler segfault\n+const ccObjectInfo& cc_Array<T>::repInvariant(int) const // { dg-error \"redefinition\" }\n+{  return 0; }\n \n typedef ccObjArray< double>\tccROIRuns;\t "}, {"sha": "229be93da7cf34d952ad3f82a1b258ca9813cbd2", "filename": "gcc/testsuite/g++.old-deja/g++.jason/overload21.C", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Foverload21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Foverload21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Foverload21.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -1,13 +1,13 @@\n // { dg-do assemble  }\n struct X {\n-  void f (int = 4, char = 'r');\t// { dg-error \"\" } \n-  void g (int = 4, char = 'r');\t// { dg-error \"\" } \n+  void f (int = 4, char = 'r');\t// { dg-error \"previous specification\" } \n+  void g (int = 4, char = 'r');\t// { dg-error \"previous specification\" } \n };\n \n void\n-X::f (int i = 4, char x = 'r')\n-{ }\t\t\t\t// { dg-error \"\" } duplicate default args\n+X::f (int i = 4, char x = 'r') // { dg-error \"default argument\" }\n+{ }\n \n void\n-X::g (int i = 9, char x = 's')\n-{ }\t\t\t\t// { dg-error \"\" } duplicate default args\n+X::g (int i = 9, char x = 's') // { dg-error \"default argument\" }\n+{ }"}, {"sha": "6fda9d27ac95ad02a6bd83e15fbb557ad19a084f", "filename": "gcc/testsuite/g++.old-deja/g++.jason/redecl1.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fredecl1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fredecl1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fredecl1.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -3,11 +3,11 @@ class A\n {\n public:\n     A (const A& ccref);\n-    friend A const re (const A& v1); // { dg-error \"\" } \n+    friend A const re (const A& v1); // { dg-error \"ambiguates\" } \n };\n \n A // const\n-re (const A& ref)\n-{\t\t\t\t// { dg-error \"\" } mismatched decls\n+re (const A& ref) // { dg-error \"new declaration\" }\n+{\n     return A (ref);\n }"}, {"sha": "c1b9a57bbb0b529f68ca9176476e2e6d0d26d929", "filename": "gcc/testsuite/g++.old-deja/g++.jason/report.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Freport.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Freport.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Freport.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -50,8 +50,8 @@ typedef int const * bart ();\n typedef bart const * const * bar2;\n typedef bart volatile * const * bar2v;\n \n-bar2 baz (X::Y y)\n-{\t\t\t\t// { dg-error \"\" } in this context\n+bar2 baz (X::Y y)\t        // { dg-error \"\" } in this context\n+{\n   X::Y f;\t\t\t// { dg-error \"\" } in this context\n   bar2 wa [5];\n   wa[0] = baz(f);"}, {"sha": "f6d5af3a8b842839b1446459f8ed446711f7c2a1", "filename": "gcc/testsuite/g++.old-deja/g++.jason/rfg10.C", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Frfg10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Frfg10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Frfg10.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -6,5 +6,6 @@\n enum COLOR\n {\n     red,\n-    green = ULONG_MAX, blue\n-};\t\t\t\t// { dg-error \"\" } enum overflow\n+    green = ULONG_MAX,\n+    blue // { dg-error \"overflow in enumeration\" }\n+};"}, {"sha": "370bb18a561c34b08673d38ba081d4f7994d169d", "filename": "gcc/testsuite/g++.old-deja/g++.jason/template30.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Ftemplate30.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Ftemplate30.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Ftemplate30.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -3,8 +3,8 @@ template <class T, class U>\n int func(U, T);\t\t\t// { dg-error \"\" } ref below\n \n template <class T, class U>    \n-int func(T, U)\n-{\t\t\t\t// { dg-error \"\" } ref below\n+int func(T, U)\t\t\t// { dg-error \"\" } ref below\n+{\n         return 2;\n }\n "}, {"sha": "c0332d3673336957023429efc1f4440ee86b04ee", "filename": "gcc/testsuite/g++.old-deja/g++.law/arm12.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Farm12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Farm12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Farm12.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -22,8 +22,8 @@ public:\n   Y();\n };\n \n-X::X()\n-{// { dg-error \"\" } .*\n+X::X() // { dg-error \"is private\" }\n+{\n   std::cout << \"X::X()\" << std::endl;\n }\n \n@@ -32,8 +32,8 @@ void X::f()\n   std::cout << \"X::f()\" << std::endl;\n }\n \n-Y::Y()\n-{// { dg-error \"\" }  within this\n+Y::Y() // { dg-error \"within this context\" }\n+{\n   std::cout << \"Y::Y()\" << std::endl;\n }\n "}, {"sha": "d08805a36aadd0e082b5366ee6607f0a054e3f22", "filename": "gcc/testsuite/g++.old-deja/g++.law/ctors5.C", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fctors5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fctors5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fctors5.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -5,7 +5,7 @@\n // Date: Tue, 1 Sep 92 10:38:44 EDT\n \n class X\n-{ // { dg-error \"\" } candidate\n+{ // { dg-error \"X::X\" } implicit constructor\n   private:\n     int x;\n   public:\n@@ -20,14 +20,14 @@ class Y\n   public:\n     Y();\n }\n-X::X( int xi )\n-{// { dg-error \"\" }  return.*\n+X::X( int xi ) // { dg-error \"return type|X::X\" }\n+{\n     x = xi;\n }\n \n const X X::x0( 0 );\n \n-Y::Y()\n-{// { dg-error \"\" }  no mat\n+Y::Y() // { dg-error \"no match\" }\n+{\n     xx = X::x0;\n }"}, {"sha": "5d699d7f8570a4d5bb542ce792c65f0fbe73b0b9", "filename": "gcc/testsuite/g++.old-deja/g++.law/cvt20.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fcvt20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fcvt20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fcvt20.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -9,12 +9,12 @@\n \n // Compiles fine with Sun CC 2.1\n \n-void f(char *& x)\n-{// { dg-error \"\" } location of error\n+void f(char *& x) // { dg-error \"passing argument\" }\n+{\n   x++;\n }\n \n int main()\n {\n-  f (\"foo\");// { dg-error \"\" } init of non-const ref from char*\n+  f (\"foo\"); // { dg-error \"invalid initialization\" }\n }"}, {"sha": "4d567fecf7d606cb4098b1bc86a2b64de291b712", "filename": "gcc/testsuite/g++.old-deja/g++.law/init10.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Finit10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Finit10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Finit10.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -20,7 +20,7 @@ public:\n         b();\n };\n \n-b::b() : three(this)\n-{ // { dg-error \"\" } bad array initializer\n+b::b() : three(this)  // { dg-error \"bad array initializer\" }\n+{\n }\n "}, {"sha": "ba8dde2e8bed70380424cce2cef6111a753f636c", "filename": "gcc/testsuite/g++.old-deja/g++.law/init8.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Finit8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Finit8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Finit8.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -8,15 +8,15 @@\n \n \n const int ic = 1;\n-void f(int& arg)\n-{ // { dg-error \"\" } argument 1\n+void f(int& arg)  // { dg-error \"passing argument 1\" }\n+{\n         if (arg) ;\n }\n const int& icr = ic;\n \n int main(void)\n {\n-  f(icr);   // g++ does not give error here// { dg-error \"\" } .*\n+  f(icr);   // { dg-error \"invalid initialization\" }\n \n   return 0;\n }"}, {"sha": "67ef8927a634dd1f5f9e289f1c7edbd1f97ed3f2", "filename": "gcc/testsuite/g++.old-deja/g++.law/visibility17.C", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fvisibility17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fvisibility17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fvisibility17.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -31,24 +31,24 @@ private:\n   int num_;\n };\n \n-Base::Base()\n-{ // { dg-error \"\" } private\n+Base::Base() // { dg-error \"is private\" }\n+{\n   name_ = std::strcpy(new char[std::strlen(\" \") + 1], \" \");\n }\n \n-Base::Base(char* str)\n-{ // { dg-error \"\" } private\n+Base::Base(char* str) // { dg-error \"is private\" }\n+{\n   if(str != NULL)\n     name_ = std::strcpy(new char[std::strlen(str) + 1], str);\n }\n \n-Derived::Derived(int n, char* str) : Base(str)\n-{// { dg-error \"\" } .*\n+Derived::Derived(int n, char* str) : Base(str) // { dg-error \"within this context\" }\n+{\n   num_ = n;\n }\n \n-Derived::Derived(int n) : Base()\n-{// { dg-error \"\" } .*\n+Derived::Derived(int n) : Base() // { dg-error \"within this context\" }\n+{\n   num_ = n;\n }\n "}, {"sha": "ed37f5f8d2bdef8046fa955c83e2c1ff3a4c7471", "filename": "gcc/testsuite/g++.old-deja/g++.law/visibility7.C", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fvisibility7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fvisibility7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fvisibility7.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -15,10 +15,10 @@ class A {\n     {}\n   virtual ~A()\n     {}\n-  virtual void Number(int c)\n-    { number = c; } // { dg-error \"\" } private\n-  virtual int Number()\n-    { return number; } // { dg-error \"\" } private\n+  virtual void Number(int c) // { dg-error \"inaccessible\" }\n+    { number = c; }\n+  virtual int Number() // { dg-error \"inaccessible\" }\n+    { return number; }\n };\n \n class B : private A {\n@@ -53,9 +53,9 @@ class C {\n   // and they should not be able to do so\n   //\n   virtual void setBValue(int i) \n-    { if (bobject) bobject->Number(i); }// { dg-error \"\" } .*\n+    { if (bobject) bobject->Number(i); } // { dg-error \"this context|accessible base\" }\n   virtual int getBValue()\n-    { if (bobject) { return bobject->Number(); } return 0; }// { dg-error \"\" } .*\n+    { if (bobject) { return bobject->Number(); } return 0; } // { dg-error \"this context|accessible base\" }\n };\n \n "}, {"sha": "09f9c30a85e7acb64412609e7b9a5b9bb4c9691a", "filename": "gcc/testsuite/g++.old-deja/g++.mike/net8.C", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fnet8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fnet8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fnet8.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -11,22 +11,22 @@ public:\n   int bar;\n };\n \n-void func(Base&);\t\t// { dg-error \"\" } \n+void func(Base&);\t\t\t// { dg-error \"passing argument 1\" } \n \n void func2(const Derived& d) {\n-  func(d);\t\t\t// { dg-error \"\" } this is bad\n+  func(d);\t\t\t\t// { dg-error \"invalid initialization\" }\n }\n \n void\n-foo (int& a)\n-{\t\t\t\t// { dg-error \"\" } \n+foo (int& a)\t\t\t\t// { dg-error \"in passing argument 1\" } \n+{\n }\n \n int main ()\n {\n   int b;\n   const int*const a = &b;\n-  *a = 10;\t\t\t\t// { dg-error \"\" } it's const\n-  foo (*a);\t\t\t\t// { dg-error \"\" } it's const\n+  *a = 10;\t\t\t\t// { dg-error \"read-only location\" }\n+  foo (*a);\t\t\t\t// { dg-error \"invalid initialization\" }\n   return 0;\n }"}, {"sha": "3fdcd41aece4d018e25f105dd4f3e634ec95610b", "filename": "gcc/testsuite/g++.old-deja/g++.mike/p646.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp646.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp646.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp646.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -132,8 +132,8 @@ warn_foo_parm_returns_foo (foo f)\n   f;\n }                              // { dg-warning \"\" } control reaches end\n \n-main ()\n-{\t\t\t\t// { dg-warning \"\" } no type\n+main ()\t\t\t       // { dg-warning \"\" } no type\n+{\n   int ii = return_1 ();\n   if (ii != 1)\n     abort_because (\"wrong value returned\");"}, {"sha": "106a497d0409fd38f9bd27883e432f779d61d523", "filename": "gcc/testsuite/g++.old-deja/g++.mike/p700.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp700.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp700.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp700.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -223,8 +223,8 @@ inline  void  Int::operator >>=(const int b)\n { rep >>= b;  ; }\n \n \n-inline  int& operator  = (int& a,  const Int &   b)\n-{ a = b.Int::val(); return a;}\t// { dg-warning \"\" } \n+inline  int& operator  = (int& a,  const Int &   b)\t// { dg-warning \"\" } \n+{ a = b.Int::val(); return a;}\n inline  int& operator += (int& a,  const Int &   b)\n { a += b.Int::val(); return a; }\n inline  int& operator -= (int& a,  const Int &   b)\n@@ -562,8 +562,8 @@ inline  void  Char::operator >>=(const char b)\n { rep >>= b;  ; }\n \n \n-inline  char& operator  = (char& a,  const Char &   b)\n-{ a = b.Char::val(); return a;}\t// { dg-warning \"\" } \n+inline  char& operator  = (char& a,  const Char &   b)\t// { dg-warning \"\" } \n+{ a = b.Char::val(); return a;}\n inline  char& operator += (char& a,  const Char &   b)\n { a += b.Char::val(); return a; }\n inline  char& operator -= (char& a,  const Char &   b)"}, {"sha": "6a52591040ea065d506d7189c336cb6becf188b0", "filename": "gcc/testsuite/g++.old-deja/g++.mike/p701.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp701.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp701.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp701.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -7,8 +7,8 @@ extern \"C\"\n }\n \n \n-void Munge(int& x) \n-{\t\t\t\t// { dg-error \"\" } referenced below\n+void Munge(int& x) \t// { dg-error \"passing argument 1\" }\n+{\n    x = 2;\n }\n \n@@ -24,7 +24,7 @@ class A\n void\n A::Safe() const \n {\n-   Munge(i);\t// { dg-error \"\" } should not be able to modify a const object\n+   Munge(i);\t        // { dg-error \"invalid initialization\" }\n }\n \n int main()"}, {"sha": "7d15e9ed8aaf0c4a6ea2e3027aa9fb4d3037181c", "filename": "gcc/testsuite/g++.old-deja/g++.mike/p811.C", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp811.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp811.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp811.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -512,25 +512,25 @@ class Y {\n public:\n     Y() {}\n     virtual const char *stringify() = 0;\n-    virtual char *stringify2() const = 0; // { dg-error \"\" } \n+    virtual char *stringify2() const = 0; // { dg-error \"overriding\" } \n };\n \n class X: public Y {\n public:\n     X(): Y() {}\n-    char *stringify();\t\t// { dg-error \"\" } ok\n-    const char *stringify2() const;  // { dg-error \"\" } ok\n+    char *stringify();\t\t// { dg-error \"candidate\" }\n+    const char *stringify2() const;  // { dg-error \"candidate|conflicting return type\" }\n };\n \n char *\n-X::stringify() const\n-{ // { dg-error \"\" } ok\n+X::stringify() const  // { dg-error \"does not match\" }\n+{\n     return \"stringify\";\n }\n \n const char *\n-X::stringify2()\n-{ // { dg-error \"\" } ok\n+X::stringify2()   // { dg-error \"does not match\" }\n+{\n     return \"stringify2\";\n }\n "}, {"sha": "46555387af3ea05c41bd40ad81ec5409c637b31f", "filename": "gcc/testsuite/g++.old-deja/g++.ns/template13.C", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ns%2Ftemplate13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ns%2Ftemplate13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ns%2Ftemplate13.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -1,23 +1,23 @@\n-// { dg-do assemble { xfail *-*-* } }\n+// { dg-do compile }\n // Templates defined outside must be declared inside\n namespace bar\n {\n   // trick it to provide some prior declaration\n   template<class T>\n   void foo(); // { dg-error \"definition\" }\n-  template<class T>class X; // { dg-error \"\" } previous declaration\n+  template<class T>class X; // { dg-error \"previous declaration\" }\n }\n \n template <typename T>\n T const\n-bar::foo(T const &a)    \n-{                        // { dg-error \"\" \"\" { xfail *-*-* } } not declared in bar - \n+bar::foo(T const &a)     // { dg-error \"\" \"\" { xfail *-*-* } } not declared in bar - \n+{\n   return a;\n }\n \n-template<> void bar::foo<int>()\n-{                        // { dg-error \"\" }\n+template<> void bar::foo<int>()     // { dg-error \"different namespace\" }\n+{\n }\n \n template<class T,class U>\n-class bar::X{};         // { dg-error \"\" } does not match declaration\n+class bar::X{};         // { dg-error \"1 template parameter\" }"}, {"sha": "fc37c9bd8bdb0371cbb7dc6fed441db673a15bdd", "filename": "gcc/testsuite/g++.old-deja/g++.other/array3.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Farray3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Farray3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Farray3.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -20,6 +20,6 @@ class B\n };\n \n B::B (const A a[])\n-  : ary(a)\n-{        // { dg-error \"\" } bad array initializer\n+  : ary(a)        // { dg-error \"bad array initializer\" }\n+{\n }"}, {"sha": "b18d99b30d7e76c6d9c08b8316d5e144a8e5e4a7", "filename": "gcc/testsuite/g++.old-deja/g++.other/crash25.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcrash25.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcrash25.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcrash25.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -7,10 +7,10 @@ public:\n   virtual ~X();\n }\n \n-X::x()\n-{\t\t\t\t// { dg-error \"\" } \n+X::x()\t// { dg-error \"return type|member function\" }\n+{\n }\n \n-X::~x()                         // { dg-error \"\" } \n+X::~x()\t// { dg-error \"expected class-name\" }\n {\t\t\t\t\n }"}, {"sha": "f5a00ed577c0c39f8ef57c05d4f00b877bcbff84", "filename": "gcc/testsuite/g++.old-deja/g++.other/dtor3.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdtor3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdtor3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdtor3.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -31,8 +31,8 @@ struct S5\n   ~S5(); \n };\n \n-S5::~S5(float) \n-{ // { dg-error \"\" } destructors may not have parameters\n+S5::~S5(float)  // { dg-error \"\" } destructors may not have parameters\n+{\n }\n \n \n@@ -43,8 +43,8 @@ struct S6\n };\n \n template <class T>\n-S6<T>::~S6(float)\n-{ // { dg-error \"\" } destructors may not have parameters\n+S6<T>::~S6(float)   // { dg-error \"\" } destructors may not have parameters\n+{\n }\n \n "}, {"sha": "a4db38ba7077f9511d8392e08030a35ceed749d0", "filename": "gcc/testsuite/g++.old-deja/g++.other/dtor4.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdtor4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdtor4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdtor4.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -4,8 +4,8 @@ struct S1 {\n   ~S1(); // { dg-error \"\" } candidate\n };\n \n-S1::~S1() const\n-{ // { dg-error \"\" } prototype does not match \n+S1::~S1() const // { dg-error \"\" } prototype does not match \n+{\n }\n \n \n@@ -20,8 +20,8 @@ struct S3 {\n };\n \n template <class T>\n-S3<T>::~S3() volatile\n-{ // { dg-error \"\" } prototype does not match \n+S3<T>::~S3() volatile  // { dg-error \"\" } prototype does not match \n+{\n }\n \n "}, {"sha": "c5cfe8b9eb03c19c4550d1786fc1ed057e8d0fa7", "filename": "gcc/testsuite/g++.old-deja/g++.other/main1.C", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fmain1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fmain1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fmain1.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -1,13 +1,12 @@\n-// { dg-do assemble  }\n-// Build don't linK:\n+// { dg-do compile }\n \n-int main()\n-{ // { dg-error \"\" } invalid redeclaration of\n+int main()  // { dg-error \"previous declaration\" }\n+{\n   return 0;\n }\n \n \n-int main(int, const char**)\n-{ // { dg-error \"\" } as\n+int main(int, const char**) // { dg-error \"conflicts\" }\n+{\n   return 0;\n }"}, {"sha": "c7684d18ca1da7045ad1e1681ea417f430077380", "filename": "gcc/testsuite/g++.old-deja/g++.other/warn7.C", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fwarn7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fwarn7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fwarn7.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -34,12 +34,12 @@ struct Y\n };\n void bar (int);\n \n-Y::Y(int i)\n-{ // { dg-warning \"\" } unused parameter\n+Y::Y(int i)  // { dg-warning \"unused parameter\" }\n+{\n }\n-void Y::bar (int i) \n-{ // { dg-warning \"\" } unused parameter\n+void Y::bar (int i)  // { dg-warning \"unused parameter\" }\n+{\n }\n-void bar (int i)\n-{ // { dg-warning \"\" } unused parameter\n+void bar (int i) // { dg-warning \"unused parameter\" }\n+{\n }"}, {"sha": "be83f5abe7b679da947b7c09d6567cb13f5eaf38", "filename": "gcc/testsuite/g++.old-deja/g++.pt/crash11.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash11.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -8,6 +8,6 @@ class A\n };\n \n \n-template <class j> class A::A_impl \n-{ // { dg-error \"\" } does not declare a template\n+template <class j> class A::A_impl // { dg-error \"does not declare a template\" }\n+{\n };"}, {"sha": "13695f9c69b195999a275908dd14a429f96ae3be", "filename": "gcc/testsuite/g++.old-deja/g++.pt/crash36.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash36.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash36.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash36.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -28,7 +28,7 @@ struct list {\n   };\n   \n   reverse_iterator<list_iterator<T> > rbegin()\n-    { return reverse_iterator<list_iterator<T> > // { dg-error \"\" } no type|instantiated here\n+    { return reverse_iterator<list_iterator<T> >\n \t(list_iterator<T>(Head->next())); } // { dg-error \"\" } not declared\n };\n "}, {"sha": "41aab394d3eecd05ae05777589b1bf34bf6e2d69", "filename": "gcc/testsuite/g++.old-deja/g++.pt/spec22.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fspec22.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fspec22.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fspec22.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -9,7 +9,7 @@ struct S\n \n \n template <class T> \n-template <> // { dg-error \"\" } enclosing classes not specialized\n-void S<T>::f<int> () \n-{ // { dg-error \"\" } template does not match any declaration\n+template <> // { dg-error \"enclosing class templates|invalid explicit specialization\" }\n+void S<T>::f<int> ()  // { dg-error \"does not match|invalid function declaration\" }\n+{\n }"}, {"sha": "e2c5b4e5296b748764e3b22d7dace0d8851229fd", "filename": "gcc/testsuite/g++.old-deja/g++.pt/spec9.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fspec9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fspec9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fspec9.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -14,8 +14,8 @@ int main()\n }\n \n template <>\n-int f(int i) \n-{             // { dg-error \"\" } specialization of f<int>(int) after instantiation\n+int f(int i)   // { dg-error \"specialization\\[^\\n\\]*after instantiation\" }\n+{\n   return 1;\n }\n "}, {"sha": "4a9b7ee39dcb712135ed08dbb2838424532cb704", "filename": "gcc/testsuite/g++.old-deja/g++.pt/ttp52.C", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp52.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp52.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp52.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -7,12 +7,10 @@ template<class Key,\n          template<class, class > class MapT> \n class base \n {\n-  \n };\n \n // specialization\n template<class Key, class Value>\n-class base<Key, Value, mymap<int, int > >\t\n-{\t\t\t\t\t\t// { dg-error \"\" } type/value mismatch\n-  \n+class base<Key, Value, mymap<int, int > > // { dg-error \"type/value|class template\" }\n+{\n };"}, {"sha": "c272d9403323bcb1338722118fe81c852a258034", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb103.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb103.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb103.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb103.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -4,8 +4,8 @@\n template <int nlimb, int i>\n inline unsigned f (unsigned* ptr);\n template <int nlimb>\n-inline unsigned f<nlimb,nlimb> (unsigned* ptr)\n-{                        //{ dg-error \"\" } partial specialization of function?\n+inline unsigned f<nlimb,nlimb> (unsigned* ptr) // { dg-error \"function template partial specialization\" }\n+{\n   return 1;\n }\n "}, {"sha": "e01d7478838f905fbd2aa8becb91d096ca12f3ae", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb121.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb121.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb121.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb121.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -3,12 +3,12 @@ class A {\n private:\n   int i1_;\n public:\n-  void f(int const i1 = 1); // { dg-error \"\" } previous specification\n+  void f(int const i1 = 1); // { dg-error \"previous specification\" }\n };\n \n void\n-A::f(int const i1 = 1)\n-{                          // { dg-error \"\" } duplicate default argument\n+A::f(int const i1 = 1) // { dg-error \"default argument given\" }\n+{\n   i1_ = i1;\n }\n "}, {"sha": "b969d686624c6d3ac07474aaec16653f495cb441", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb22.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb22.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb22.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb22.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -11,13 +11,13 @@ public:\n         operator int() const {return 2;}\n };\n \n-bool operator==(const MyInt& a, const int& b)\n-{                                               // { dg-error \"\" } candidate\n+bool operator==(const MyInt& a, const int& b)   // { dg-error \"\" } candidate\n+{\n         return (int)a == b;\n }\n \n-bool operator==(const MyInt& a, const MyInt& b)\n-{                                               // { dg-error \"\" } candidate\n+bool operator==(const MyInt& a, const MyInt& b) // { dg-error \"\" } candidate\n+{\n         return (int)a == (int)b;\n }\n "}, {"sha": "c660050628ec0271f4a084387b4a80466bf871fb", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb8.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb8.C?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -6,8 +6,8 @@ public:\n   operator <<(char *);        //{ dg-error \"\" } no return type\n };\n \n-void main()\n-{                             //{ dg-error \"\" } wrong return type for main\n+void main()\t\t      // { dg-error \"must return .int\" }\n+{\n   foo f;\n   f << (void*)0;\n }"}, {"sha": "78c379bb35cddbfd9afcec524c73d0bc51f3d066", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 101, "deletions": 94, "changes": 195, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -1,3 +1,10 @@\n+2004-09-23  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* testsuite/20_util/memory/auto_ptr/assign_neg.cc\n+\t* testsuite/23_containers/map/operators/1_neg.cc\n+\t* testsuite/23_containers/set/operators/1_neg.cc:\n+\tUpdate locations and/or regexps of dg-error markers.\n+\n 2004-09-23  P.J. Darcy  <darcypj@us.ibm.com>\n \n \t* include/Makefile.am (thread_host_headers): Add gthr-tpf.h.\n@@ -6,7 +13,7 @@\n \n 2004-09-23  Paolo Carlini  <pcarlini@suse.de>\n \t    Magnus Fromreide  <magfr@lysator.liu.se>\n-\t    \n+\n \t* include/bits/boost_concept_check.h (struct _SequenceConcept):\n \tRemove wrong requirement, i.e., not present in Table 67.\n \n@@ -124,18 +131,18 @@\n 2004-09-02  Mark Mitchell  <mark@codesourcery.com>\n \n \t* libsupc++/typeinfo: Honor __GXX_MERGED_TYPEINFO_NAMES if already\n-\tdefined. \n+\tdefined.\n \n 2004-09-02  Benjamin Kosnik  <bkoz@redhat.com>\n-            Simon Richter  <Simon.Richter@hogyros.de>\n-\t\n+\t    Simon Richter  <Simon.Richter@hogyros.de>\n+\n \tPR libstdc++/16715\n \t* include/bits/istream.tcc: Add extern template for iostream\n \tchar and wchar_t instantiations.\n \n 2004-09-02  Benjamin Kosnik  <bkoz@redhat.com>\n-            Leland Wang  <llwang@infor.org>\n-\t\n+\t    Leland Wang  <llwang@infor.org>\n+\n \tPR libstdc++/17259\n \t* include/ext/ropeimpl.h (rope::_S_compare): Use\n \t_Rope_constants::_S_leaf.\n@@ -170,19 +177,19 @@\n \t* testsuite/ext/mt_allocator/tune-1.cc: New.\n \t* testsuite/ext/mt_allocator/tune-2.cc: New.\n \t* testsuite/ext/mt_allocator/tune-3.cc: New.\n-\t* testsuite/ext/mt_allocator/tune-4.cc: New.\t\n+\t* testsuite/ext/mt_allocator/tune-4.cc: New.\n \n \t* testsuite/testsuite_allocator.h (__gnu_test::check_new): New.\n \t* testsuite/ext/allocators.cc: Use check_new, split into...\n \t* testsuite/ext/mt_allocator/check_new.cc: this.\n \t* testsuite/ext/pool_allocator/check_new.cc: this.\n-\t* testsuite/ext/malloc_allocator/check_new.cc: this.\t\n-\t* testsuite/ext/debug_allocator/check_new.cc: this.\t\n+\t* testsuite/ext/malloc_allocator/check_new.cc: this.\n+\t* testsuite/ext/debug_allocator/check_new.cc: this.\n \t* testsuite/ext/mt_allocator/instantiate.cc: this.\n \t* testsuite/ext/pool_allocator/instantiate.cc: this.\n-\t* testsuite/ext/malloc_allocator/instantiate.cc: this.\t\n+\t* testsuite/ext/malloc_allocator/instantiate.cc: this.\n \t* testsuite/ext/debug_allocator/instantiate.cc: this.\n-\t\n+\n 2004-08-30  Phil Edwards  <phil@codesourcery.com>\n \n \t* docs/html/install.html:  Update locales list (from Paolo).\n@@ -240,7 +247,7 @@\n \t* testsuite/27_io/manipulators/basefield/wchar_t/1.cc: Likewise.\n \t* testsuite/27_io/manipulators/standard/wchar_t/1.cc: Likewise.\n \t* testsuite/27_io/manipulators/standard/wchar_t/2.cc: Likewise.\n-\t\n+\n \t* testsuite/27_io/manipulators/adjustfield/char/1.cc: Minor\n \tformatting fixes.\n \t* testsuite/27_io/manipulators/adjustfield/char/2.cc: Likewise.\n@@ -343,7 +350,7 @@\n \n \t* cpu/hppa/atomicity.h (__exchange_and_add, __atomic_add): Add memory\n \tbarrier to locking asm.\n-\t\n+\n 2004-08-20  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/c_std/cmath.tcc (__cmath_power): Revert previous commit:\n@@ -397,7 +404,7 @@\n \t* testsuite/22_locale/time_put/put/wchar_t/2.cc: Likewise.\n \t* testsuite/22_locale/time_put/put/wchar_t/3.cc: Likewise.\n \t* testsuite/22_locale/time_put/put/wchar_t/4.cc: Likewise.\n- \n+\n 2004-08-19  Paolo Carlini  <pcarlini@suse.de>\n \n \t* config/abi/x86_64-linux-gnu/baseline_symbols.txt: Update to 3.4.0.\n@@ -464,7 +471,7 @@\n \t* testsuite/22_locale/time_put/put/wchar_t/8.cc: Likewise.\n \n 2004-08-13  Paolo Carlini  <pcarlini@suse.de>\n-\t\n+\n \t* src/debug.cc (_Error_formatter::_M_print_string): Fix thinko,\n \tmemmove is not needed, memcpy suffices.\n \n@@ -521,7 +528,7 @@\n \t* testsuite/27_io/basic_stringbuf/sbumpc/wchar_t/1.cc: Fix typo.\n \n 2004-08-11  Paolo Carlini  <pcarlini@suse.de>\n-\t\n+\n \t* testsuite/27_io/basic_stringbuf/imbue/char/1.cc: Declare test\n \tvariable.\n \t* testsuite/27_io/basic_stringbuf/imbue/wchar_t/1.cc: Ditto.\n@@ -564,7 +571,7 @@\n \n 2004-08-07  Jonathan Wakely  <redi@gcc.gnu.org>\n \t    Paolo Carlini  <pcarlini@suse.de>\n-\t\n+\n \t* src/debug.cc (_Error_formatter::_M_print_string): In order\n \tto print individual words from __string, _M_format_word can't\n \tbe called since may be just sprintf, thus ignoring completely\n@@ -622,7 +629,7 @@\n \t* include/c_std/std/std_cstdlib.h (stdlib.h): Do not include it\n \twhen freestanding.  Do not bring names into std:: namespace with\n \t\"using\" when freestanding.  Declare required functions and macros\n-\twhen freestanding. \n+\twhen freestanding.\n \t* libsupc++/Makefile.am (c_sources): Do not include cp-demangle.c\n \twhen freestanding.\n \t* libsupc++/del_op.cc: Declare \"free\" only when freestanding.\n@@ -647,11 +654,11 @@\n \t* po/Makefile.in: Likewise.\n \t* src/Makefile.in: Likewise.\n \t* testsuite/Makefile.in: Likewise.\n-\t\n+\n 2004-08-01  Matt Austern  <austern@apple.com>\n \n \tPR libstdc++/16844\n-\t* include/bits/stl_list.h (_M_create_node): Remove unused \n+\t* include/bits/stl_list.h (_M_create_node): Remove unused\n \tzero-argument version.\n \t* include/ext/slist (_M_create_node): Pass two arguments to\n \tallocator's construct() member function.\n@@ -664,7 +671,7 @@\n \t* testsuite/23_containers/multiset/explicit_instantiation.cc: New.\n \t* testsuite/ext/hash_set_explicit_instantiation.cc: New.\n \t* testsuite/ext/slist_explicit_instantiation.cc: New.\n-\t\n+\n 2004-07-30  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/locale_facets.tcc (num_get<>::_M_extract_float,\n@@ -685,7 +692,7 @@\n \t* docs/html/ext/lwg-active.html, lwg-defects.html: Import Revision 31.\n \n 2004-07-29  Paolo Carlini  <pcarlini@suse.de>\n-            Petur Runolfsson  <peturr02@ru.is>\n+\t    Petur Runolfsson  <peturr02@ru.is>\n \n \tPR libstdc++/12658 (continued)\n \t* src/locale_init.cc (locale::locale, locale::global): Use\n@@ -732,26 +739,26 @@\n \t* include/bits/stl_vector.h: Likewise.\n \t* include/bits/vector.tcc: Likewise.\n \t* include/ext/hashtable.h: Use rebind so that allocator_type\n-\thas correct type for a container's allocator.  Replace use of \n-\tsingle-argument _Construct and _Destroy with use of allocator's \n+\thas correct type for a container's allocator.  Replace use of\n+\tsingle-argument _Construct and _Destroy with use of allocator's\n \tconstruct and destroy methods.\n \t* include/ext/memory (__uninitialized_copy_n_a): New function.\n \tLike uninitialized_copy_n except that it takes an extra parameter,\n \tan allocator, and uses it for construct and destroy operations.\n \t* include/ext/rope: Use new forms defined in stl_construct.h,\n-\tstl_uninitialized.h, and ext/memory.  Replace use of single-argument \n+\tstl_uninitialized.h, and ext/memory.  Replace use of single-argument\n \t_Construct and _Destroy with allocator construct and destroy methods.\n \t* include/ext/ropeimpl.h: Likewise.\n \t* include/ext/slist.h: Likewise.\n \t* testsuite/testsuite_allocator.h (check_construct_destroy): New.\n \t* testsuite/testsuite_allocator.cc (check_construct_destroy): New.\n \t* testsuite/23_containers/deque/check_construct_destroy.cc: New.\n \t* testsuite/23_containers/list/check_construct_destroy.cc: New.\n-\t* testsuite/23_containers/set/check_construct_destroy.cc: New.\t\n-\t* testsuite/23_containers/vector/check_construct_destroy.cc: New. \n+\t* testsuite/23_containers/set/check_construct_destroy.cc: New.\n+\t* testsuite/23_containers/vector/check_construct_destroy.cc: New.\n \t* testsuite/ext/hash_check_construct_destroy.cc: New.\n \t* testsuite/ext/slist_check_construct_destroy.cc: New.\n-\t\n+\n 2004-07-28  Alexandre Oliva  <aoliva@redhat.com>\n \n \t2003-10-01  Eric Christopher  <echristo@redhat.com>\n@@ -931,7 +938,7 @@\n \t* configure: Regenerated.\n \n \t* testsuite/testsuite_abi.cc (check_version): Add 3.4.2.\n-\t\n+\n 2004-07-07  Aaron W. LaFramboise  <aaronraolete36@aaronwl.com>\n \n \tPR libstdc++/16411\n@@ -955,7 +962,7 @@\n \tPR libstdc++/15928\n \t* crossconfig.m4: Add in bits for djgpp.\n \t* configure: Regenerate.\n-\t\n+\n 2004-07-05  Jonathan Wakely  <redi@gcc.gnu.org>\n \n \t* testsuite/23_containers/{set,multiset}/14340.cc: Fix typos in\n@@ -1016,14 +1023,14 @@\n \t__is_trivially_copyable, __are_same and __copy::copy.\n \t(__copy): Rewrite as a class template and two specializations.\n \t(__copy_ni2): Simplify, just call __copy_aux.\n-\t\n+\n \t* include/bits/stl_algobase.h (__copy_backward_aux): Add __are_same\n \tcheck.\n \t* testsuite/25_algorithms/copy/1.cc, 2.cc, 3.cc, 4.cc: Test also\n \tfor destination value type != source value type.\n \n 2004-07-01  Benjamin Kosnik  <bkoz@redhat.com>\n-            Per Bothner  <per@bothner.com>\n+\t    Per Bothner  <per@bothner.com>\n \t    Mohan Embar  <gnustuff@thisiscool.com>\n \n \tPR libstdc++/16248\n@@ -1035,25 +1042,25 @@\n \t* include/ext/pool_allocator.h (__pool_base::_M_get_mutex): Change\n \tto mutex_type.\n \t* src/allocator.cc: Same.\n-\t\n+\n 2004-06-30  Brad Spencer  <spencer@infointeractive.com>\n \n \t* include/ext/mt_allocator.h: Handle allocations at static\n \tinitialization that happen before _S_options is (automatically)\n \tconstructed; set _S_init even if _M_force_new is true.\n-\t\n+\n 2004-06-30  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* config/linker-map.gnu: Revert new exports.\n \n 2004-06-30  Benjamin Kosnik  <bkoz@redhat.com>\n-            Stuart Anderson  <anderson@netsweng.com>\n-\t\n+\t    Stuart Anderson  <anderson@netsweng.com>\n+\n \t* config/linker-map.gnu: Add destructor exports for abstract base\n \tclasses to conform to LSB.\n \n 2004-06-30  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n-            Paolo Carlini  <pcarlini@suse.de>\n+\t    Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/cpp_type_traits.h: Add __is_pointer and\n \t__is_trivially_copyable.\n@@ -1090,7 +1097,7 @@\n \tRevert -Weffc++ changes that defined copy ctory and or assignment\n \toperator.\n \t* libsupc++/tinfo.cc (__upcast_result): Same.\n-\t\n+\n 2004-06-28  Paolo Carlini  <pcarlini@suse.de>\n \n \t* src/localename.cc (locale::_Impl::_Impl): Slightly improve\n@@ -1135,7 +1142,7 @@\n \n 2004-06-25  Benjamin Kosnik  <bkoz@redhat.com>\n \n-\tPR libstdc++/16182\t\n+\tPR libstdc++/16182\n \t* linkage.m4 (GLIBCXX_CHECK_BUILTIN_MATH_DEC): Revert to\n \tAC_DEFINE_UNQUOTED.\n \t* configure: Regenerate.\n@@ -1201,10 +1208,10 @@\n \n \t* src/allocator.cc: Move all instantiations...\n \t* src/allocator-inst.cc: ...here.\n-\t\n+\n 2004-06-23  Andrew Pinski  <apinski@apple.com>\n \n-\t* linkage.m4: Remove check for libmx.\t\n+\t* linkage.m4: Remove check for libmx.\n \t* configure: Regenerate.\n \n 2004-06-23  Paolo Carlini  <pcarlini@suse.de>\n@@ -1291,7 +1298,7 @@\n \t(__pool_alloc): Move _S_force new here.\n \t* src/allocator.cc: Move out of line __pool_base definitions here.\n \t* config/linker-map.gnu: Export bits from __pool_base.\n-\t\n+\n 2004-06-18  Paolo Carlini  <pcarlini@suse.de>\n \n \t* config/locale/gnu/numeric_members.cc\n@@ -1320,7 +1327,7 @@\n \t(rope<>::_S_dump): Likewise.\n \t(rope<>::_S_fetch_ptr): Likewise.\n \t(rope<>::_S_compare): Likewise.\n-\t(rope<>::replace_with_c_str()): Likewise.\t\t\n+\t(rope<>::replace_with_c_str()): Likewise.\n \n \t* testsuite/ext/rope.cc: Rename to testsuite/ext/rope/1.cc.\n \t* testsuite/ext/rope/2.cc: New.\n@@ -1419,11 +1426,11 @@\n \n 2004-06-09  Benjamin Kosnik  <bkoz@redhat.com>\n \n-\t* crossconfig.m4: Remove signbit, signbitf, signbitl.\t\n+\t* crossconfig.m4: Remove signbit, signbitf, signbitl.\n \t* linkage.m4: Comment LIBMATHOBJS, tweak others.  AC_DEFINES for\n \tbuiltin math functions instead of AC_DEFINE_UNQUOTED.\n \t* configure: Regenerate.\n-\t\n+\n 2004-06-08  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* docs/doxygen/filter.sed: Rename _GLIBCXX_STD to std.\n@@ -1460,11 +1467,11 @@\n \t* configure.ac (libtool_VERSION): Bump to 6:1:0.\n \t* configure: Regenerate.\n \t* aclocal.m4: Regenerate.\n-\t\n+\n 2004-05-30  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \t* include/std/std_complex.h (complex<_Tp>): Properly indent\n-\tto follow C++STYLE. \n+\tto follow C++STYLE.\n \t(complex<>::__rep): New.\n \t(__complex_abs): New.  Dispatch to built-ins.\n \t(abs): Use them.\n@@ -1492,8 +1499,8 @@\n \t(pow): Use it.\n \n 2004-05-29  Richard B. Kreckel  <Richard.Kreckel@Framatome-ANP.com>\n-            Benjamin Kosnik  <bkoz@redhat.com>\n-\t\n+\t    Benjamin Kosnik  <bkoz@redhat.com>\n+\n \tPR libstdc++/14600\n \t* include/ext/stdio_sync_filebuf.h (stdio_sync_filebuf::file): New.\n \t* include/ext/stdio_filebuf.h (stdio_filebuf::file): New.\n@@ -1540,25 +1547,25 @@\n 2004-05-22  Benjamin Kosnik  <bkoz@redhat.com>\n \n \tPR libstdc++/12854\n-\tFixups for -Weffc++.\t\n+\tFixups for -Weffc++.\n \t* include/bits/basic_string.h (basic_string::operator=): Return\n \tpointer to this instead of result of assign. Although redundant,\n \tthis doesn't impact resultant codegen.\n-\t\n+\n \t* include/bits/locale_facets.h (__numpunct_cache): Declare\n \tassignment opxserator and copy constructor private.\n \t(__timepunct_cache): Same.\n \t(__moneypunct_cache): Same.\n \t(collate): Use member initialization list for _M_c_locale_collate.\n \t* config/locale/gnu/messages_members.h: Same.\n-\t* config/locale/gnu/time_members.h (__timepunct): Same.\t\n+\t* config/locale/gnu/time_members.h (__timepunct): Same.\n \t* src/codecvt.cc: Use member initialization list to initialize\n-\t_M_c_locale_codecvt.\t\n+\t_M_c_locale_codecvt.\n \t* src/ctype.cc: Same, with _M_c_locale_ctype and _M_narrow_ok.\n \t* config/os/gnu-linux/ctype_noninline.h: Same.\n \t* src/locale.cc (_Impl): Same.\n \t* src/locale_init.cc: Same.\n-\t* src/localename.cc: Same.\t\n+\t* src/localename.cc: Same.\n \n \t* include/bits/basic_ios.h (basic_ios): Complete member\n \tinitialization list.\n@@ -1569,7 +1576,7 @@\n \t* include/std/std_streambuf.h: Same.\n \t* include/std/std_sstream.h: Same, for _M_mode.\n \t* src/ios.cc (ios_base): Same.\n-\t\n+\n \t* include/ext/rope: Make derived classes match exception\n \n \t specifications. Add copy constructors and assignment operators.\n@@ -1586,24 +1593,24 @@\n 2004-05-22  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* testsuite/testsuite_hooks.h (func_callback): Declare copy\n-\tconstructor and assignment operator private.\t\n+\tconstructor and assignment operator private.\n \t* testsuite/23_containers/deque/cons/clear_allocator.cc: Match\n \texception specifications of base class.\n \t* testsuite/23_containers/list/cons/clear_allocator.cc: Same.\n \t* testsuite/23_containers/vector/cons/clear_allocator.cc: Same.\n \t* testsuite/23_containers/vector/bool/clear_allocator.cc: New.\n-\t\t\n+\n 2004-05-22  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* libsupc++/cxxabi.h: Remove duplicated and useless public and\n-        private keywords in class declarations. Format. Use\n-        stddef.h. Expose declarations to \"C\" compilation.\n-        * libsupc++/tinfo.cc (__upcast_result): Add copy constructor and\n-        assignment operator.\n-        (__dyncast_result): Same.\n-        * libsupc++/vec.cc (uncatch_exception): Same, use member\n-        initialization list.\n-                 \n+\tprivate keywords in class declarations. Format. Use\n+\tstddef.h. Expose declarations to \"C\" compilation.\n+\t* libsupc++/tinfo.cc (__upcast_result): Add copy constructor and\n+\tassignment operator.\n+\t(__dyncast_result): Same.\n+\t* libsupc++/vec.cc (uncatch_exception): Same, use member\n+\tinitialization list.\n+\n 2004-05-22  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* testsuite/abi_check.cc: Add unistd.h.\n@@ -1627,7 +1634,7 @@\n \t* testsuite/22_locale/num_put/put/wchar_t/8.cc: Likewise.\n \n 2004-05-21  Matthias Klose  <doko@debian.org>\n- \n+\n \t* docs/doxygen/run_doxygen:  Bump required version.\n \n 2004-05-21  Benjamin Kosnik  <bkoz@redhat.com>\n@@ -1667,14 +1674,14 @@\n \t* docs/doxygen/guide.html: Add dot note.\n \t* docs/doxygen/stdheader.cc: Edit, add files.\n \t* docs/doxygen/user.cfg.in: Regenerate with Doxygen 1.3.7.\n-\t\n+\n 2004-05-18  Jonathan Wakely  <redi@gcc.gnu.org>\n \n \t* include/ext/stdio_filebuf.h: Update comments to reflect PR 11691.\n \n 2004-05-18  Jan Beulich  <jbeulich@novell.com>\n- \n-        PR libstdc++/15489\n+\n+\tPR libstdc++/15489\n \t* scripts/create_testsuite_files: Also find source files through\n \tsymbolic links.\n \n@@ -1712,9 +1719,9 @@\n \n 2004-05-17  Douglas Gregor   <gregod@cs.rpi.edu>\n \n-\tPR libstdc++/14340 \n-\t* include/debug/safe_iterator.h (_Safe_iterator converting \n-\tconstructor): Only allow declaration to instantiate when the \n+\tPR libstdc++/14340\n+\t* include/debug/safe_iterator.h (_Safe_iterator converting\n+\tconstructor): Only allow declaration to instantiate when the\n \tincoming _Safe_iterator has exactly the right iterator type.\n \n 2004-05-17  Jonathan Wakely  <redi@gcc.gnu.org>\n@@ -1754,7 +1761,7 @@\n \tPR libstdc++/15046\n \t* crossconfig.m4: Add C99 math bits for linux crosses.\n \t* configure: Regenerate.\n-\t\n+\n 2004-05-13  Simon Marshall <simon.marshall@misys.com>\n \t    Benjamin Kosnik  <bkoz@redhat.com>\n \n@@ -1770,16 +1777,16 @@\n \t* config/locale/gnu/numeric_members.cc: Same.\n \t* testsuite/testsuite_abi.cc: Same.\n \t* testsuite/testsuite_hooks.cc: Same.\n-\t\n+\n 2004-05-13  Jonathan Wakely  <redi@gcc.gnu.org>\n-\t\n+\n \t* docs/html/abi.html: Document effect of -fabi-version on value\n \tof __GXX_ABI_VERSION, and that it's defined in c-cppbuiltin.c.\n \tFix markup.\n \n 2004-05-13  Benjamin Kosnik  <bkoz@redhat.com>\n \n-\tPR libstdc++/15074\t\n+\tPR libstdc++/15074\n \t* docs/html/faq/index.html: Update docs for libsupc++ usage.\n \n 2004-05-13  Benjamin Kosnik  <bkoz@redhat.com>\n@@ -1788,12 +1795,12 @@\n \t* include/bits/stl_threads.h (_GLIBCXX_mutex): Move to namespace\n \t__gnu_internal.\n \t(_GLIBCXX_mutex_address): Same.\n-\t(_GLIBCXX_once): Same.\t\n+\t(_GLIBCXX_once): Same.\n \t(_GLIBCXX_mutex_init): Same.\n \t(_GLIBCXX_mutex_address_init): Same.\n-\t\n+\n 2004-05-13  Benjamin Kosnik  <bkoz@redhat.com>\n-\t\n+\n \t* docs/html/abi.html: New.\n \t* docs/html/abi.txt: Remove.\n \t* docs/html/documentation.html: Add link.\n@@ -1805,7 +1812,7 @@\n \n \t* docs/html/17_intro/TODO: Update.\n \t* include/bits/stl_pair.h: Format.\n-\t\n+\n 2004-05-06  Matthias Klose  <doko@debian.org>\n \n \t* include/backward/iterator.h: \tAdd GPL copyright info,\n@@ -1814,7 +1821,7 @@\n \t* include\n \t* libsupc++/tinfo.h: Likewise.\n \t* po/string_literals.cc: Likewise.\n-\t\n+\n 2004-05-03  Andreas Tobler  <a.tobler@schweiz.ch>\n \n \t* acinclude.m4: Replace -W with more speaking -Wextra.\n@@ -1893,7 +1900,7 @@\n \n 2004-04-24  Paolo Carlini  <pcarlini@suse.de>\n \n-\t* testsuite/27_io/basic_istream/getline/char/4.cc: New.\t\n+\t* testsuite/27_io/basic_istream/getline/char/4.cc: New.\n \n \t* include/bits/istream.tcc (getline(basic_istream<>&,\n \tbasic_string<>&, _CharT)): Change to use sgetc()/snextc() instead\n@@ -1931,17 +1938,17 @@\n \n 2004-04-19  Benjamin Kosnik  <bkoz@redhat.com>\n \n-\t* testsuite/27_io/basic_istream/extractors_character/char/9555-ic.cc: \n+\t* testsuite/27_io/basic_istream/extractors_character/char/9555-ic.cc:\n \tClarify assertion, set test variable to false before assert.\n \t* testsuite/27_io/basic_istringstream/str/char/1.cc: Same.\n \t* testsuite/27_io/basic_stringstream/str/char/1.cc: Same.\n \t* testsuite/27_io/ios_base/storage/2.cc: Same.\n-\t\n+\n \t* testsuite/27_io/basic_filebuf/imbue/char/13171-4.cc: Fix\n \tfunction returns.\n \t* testsuite/27_io/basic_filebuf/imbue/wchar_t/13582-3.cc: Same.\n \t* testsuite/27_io/fpos/14320-3.cc: Same.\n-\t\n+\n \t* testsuite/27_io/basic_filebuf/2.cc: Instantiate in namespace std.\n \t* testsuite/27_io/fpos/1.cc: Same.\n \t* testsuite/27_io/basic_stringstream/2.cc: Same.\n@@ -1970,30 +1977,30 @@\n \t* testsuite/21_strings/char_traits/requirements/wchar_t/1.cc: Same.\n \t* testsuite/21_strings/char_traits/requirements/char/1.cc: Same.\n \t* testsuite/21_strings/char_traits/requirements/short/1.cc: Same.\n-\t* testsuite/27_io/basic_istream/seekg/char/exceptions_badbit_throw.cc: \n+\t* testsuite/27_io/basic_istream/seekg/char/exceptions_badbit_throw.cc:\n \tSame.\n \t* testsuite/27_io/basic_ostream/inserters_arithmetic/char/exceptions_badbit_throw.cc: Same.\n-\t* testsuite/27_io/basic_ostream/seekp/char/exceptions_badbit_throw.cc: \n+\t* testsuite/27_io/basic_ostream/seekp/char/exceptions_badbit_throw.cc:\n \tSame.\n \t* testsuite/27_io/basic_ostream/inserters_arithmetic/char/exceptions_failbit_throw.cc: Same.\n \t* testsuite/27_io/types/2.cc: Same.\n \n \t* testsuite/ext/stdio_sync_filebuf/wchar_t/12077.cc: Fix temporary\n-\tfile name.\t\n+\tfile name.\n \t* testsuite/27_io/fpos/14775.cc: Same.\n-\t\n+\n 2004-04-19  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/15002 (partial)\n \t* include/bits/basic_string.h (_M_replace_aux, _M_replace_safe):\n-\tSpecial case __n2 == 1, not calling traits_type::assign/copy. \n+\tSpecial case __n2 == 1, not calling traits_type::assign/copy.\n \n 2004-04-17  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/bits/stl_bvector.h: Use _M_impl._M_start.\n-\t\n+\n 2004-04-16  Benjamin Kosnik  <bkoz@redhat.com>\n-\t\n+\n \t* include/bits/c++config (_GLIBCXX_STD): New.\n \t* src/list.cc: Use it.\n \t* include/std/std_bitset.h: Same.\n@@ -2015,7 +2022,7 @@\n \t* include/debug/map.h: Same.\n \t* include/debug/list: Same.\n \t* include/debug/deque: Same.\n-\t* include/debug/bitset: Same.\t\n+\t* include/debug/bitset: Same.\n \t* include/debug/formatter.h (__gnu_debug): Remove using directive.\n \tAdd using declaration for std::type_info.\n \t* include/debug/safe_iterator.h: Add using declaration for\n@@ -2029,7 +2036,7 @@\n \t* include/bits/stl_bvector.h (_Bvector_base): Use _Bvector_impl\n \tidiom that other containers use.\n \t* testsuite/23_containers/vector/bool/clear_allocator.cc: New.\n-\t\t\t\n+\n 2004-04-16  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/14975"}, {"sha": "8899c9893aceaec7d7a27faced9515c02aa894b9", "filename": "libstdc++-v3/testsuite/20_util/memory/auto_ptr/assign_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmemory%2Fauto_ptr%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmemory%2Fauto_ptr%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmemory%2Fauto_ptr%2Fassign_neg.cc?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -46,5 +46,5 @@ main()\n   test01();\n   return 0;\n }\n-// { dg-error \"candidates\" \"\" { target *-*-* } 223 } \n-// { dg-error \"std::auto_ptr\" \"\" { target *-*-* } 353 } \n+// { dg-error \"candidates\" \"\" { target *-*-* } 222 } \n+// { dg-error \"std::auto_ptr\" \"\" { target *-*-* } 352 } "}, {"sha": "15b182d0c2632684cf1f61c78c27a1c65bd2a7a1", "filename": "libstdc++-v3/testsuite/23_containers/map/operators/1_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Foperators%2F1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Foperators%2F1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Foperators%2F1_neg.cc?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -41,5 +41,5 @@ void test01()\n   test &= itr == mapByName.end(); // { dg-error \"no\" } \n }\n  \n-// { dg-error \"candidates are\" \"\" { target *-*-* } 209 } \n-// { dg-error \"candidates are\" \"\" { target *-*-* } 213 }\n+// { dg-error \"candidates are\" \"\" { target *-*-* } 208 } \n+// { dg-error \"candidates are\" \"\" { target *-*-* } 212 }"}, {"sha": "4a5b45bd74cb8685c68a84ec284d265e6e32515e", "filename": "libstdc++-v3/testsuite/23_containers/set/operators/1_neg.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe82fe43c3c6880be8e25877bb77c550097099/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Foperators%2F1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe82fe43c3c6880be8e25877bb77c550097099/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Foperators%2F1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Foperators%2F1_neg.cc?ref=2cfe82fe43c3c6880be8e25877bb77c550097099", "patch": "@@ -39,6 +39,5 @@ void test01()\n   test &= itr == setByName.end(); // { dg-error \"no\" } \n }\n \n-// { dg-error \"candidates are\" \"\" { target *-*-* } 282 } \n-// { dg-error \"candidates are\" \"\" { target *-*-* } 286 }\n-\n+// { dg-error \"candidates are\" \"\" { target *-*-* } 281 } \n+// { dg-error \"candidates are\" \"\" { target *-*-* } 285 }"}]}