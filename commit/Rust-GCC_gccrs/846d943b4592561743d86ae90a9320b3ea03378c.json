{"sha": "846d943b4592561743d86ae90a9320b3ea03378c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQ2ZDk0M2I0NTkyNTYxNzQzZDg2YWU5MGE5MzIwYjNlYTAzMzc4Yw==", "commit": {"author": {"name": "Chung-Lin Tang", "email": "cltang@codesourcery.com", "date": "2018-08-20T18:32:06Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2018-08-20T18:32:06Z"}, "message": "targhooks.c (std_gimplify_va_arg_expr): Properly handle case of when TARGET_SPLIT_COMPLEX_ARG is defined.\n\n\t* targhooks.c (std_gimplify_va_arg_expr): Properly handle case of when\n\tTARGET_SPLIT_COMPLEX_ARG is defined.\n\nFrom-SVN: r263671", "tree": {"sha": "5c2e5e1ca920dbcdf5e9ae0a669d9bb8fc9d832a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c2e5e1ca920dbcdf5e9ae0a669d9bb8fc9d832a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/846d943b4592561743d86ae90a9320b3ea03378c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/846d943b4592561743d86ae90a9320b3ea03378c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/846d943b4592561743d86ae90a9320b3ea03378c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/846d943b4592561743d86ae90a9320b3ea03378c/comments", "author": {"login": "cltang", "id": 4055966, "node_id": "MDQ6VXNlcjQwNTU5NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/4055966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cltang", "html_url": "https://github.com/cltang", "followers_url": "https://api.github.com/users/cltang/followers", "following_url": "https://api.github.com/users/cltang/following{/other_user}", "gists_url": "https://api.github.com/users/cltang/gists{/gist_id}", "starred_url": "https://api.github.com/users/cltang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cltang/subscriptions", "organizations_url": "https://api.github.com/users/cltang/orgs", "repos_url": "https://api.github.com/users/cltang/repos", "events_url": "https://api.github.com/users/cltang/events{/privacy}", "received_events_url": "https://api.github.com/users/cltang/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a5a35247177708c5dd2e6c835ae5aa19fe1fb77e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5a35247177708c5dd2e6c835ae5aa19fe1fb77e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5a35247177708c5dd2e6c835ae5aa19fe1fb77e"}], "stats": {"total": 22, "additions": 22, "deletions": 0}, "files": [{"sha": "15bcc7fd147cd305ab94d238ead12d1b87a15323", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/846d943b4592561743d86ae90a9320b3ea03378c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/846d943b4592561743d86ae90a9320b3ea03378c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=846d943b4592561743d86ae90a9320b3ea03378c", "patch": "@@ -1,3 +1,8 @@\n+2018-08-20  Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\t* targhooks.c (std_gimplify_va_arg_expr): Properly handle case of when\n+\tTARGET_SPLIT_COMPLEX_ARG is defined.\n+\n 2018-08-20  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \t* expr.c (store_field): Change gcc_assert to gcc_checking_assert."}, {"sha": "afd56f3ec457ecac05ca03e89fb109a72c452a41", "filename": "gcc/targhooks.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/846d943b4592561743d86ae90a9320b3ea03378c/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/846d943b4592561743d86ae90a9320b3ea03378c/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=846d943b4592561743d86ae90a9320b3ea03378c", "patch": "@@ -2154,6 +2154,23 @@ std_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n   if (indirect)\n     type = build_pointer_type (type);\n \n+  if (targetm.calls.split_complex_arg\n+      && TREE_CODE (type) == COMPLEX_TYPE\n+      && targetm.calls.split_complex_arg (type))\n+    {\n+      tree real_part, imag_part;\n+\n+      real_part = std_gimplify_va_arg_expr (valist,\n+\t\t\t\t\t    TREE_TYPE (type), pre_p, NULL);\n+      real_part = get_initialized_tmp_var (real_part, pre_p, NULL);\n+\n+      imag_part = std_gimplify_va_arg_expr (unshare_expr (valist),\n+\t\t\t\t\t    TREE_TYPE (type), pre_p, NULL);\n+      imag_part = get_initialized_tmp_var (imag_part, pre_p, NULL);\n+\n+      return build2 (COMPLEX_EXPR, type, real_part, imag_part);\n+   }\n+\n   align = PARM_BOUNDARY / BITS_PER_UNIT;\n   boundary = targetm.calls.function_arg_boundary (TYPE_MODE (type), type);\n "}]}