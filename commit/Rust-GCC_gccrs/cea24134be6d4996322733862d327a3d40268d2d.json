{"sha": "cea24134be6d4996322733862d327a3d40268d2d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2VhMjQxMzRiZTZkNDk5NjMyMjczMzg2MmQzMjdhM2Q0MDI2OGQyZA==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@redhat.com", "date": "2006-01-18T20:04:01Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2006-01-18T20:04:01Z"}, "message": "Werror-1.c, [...]: New.\n\n* gcc.dg/Werror-1.c, gcc.dg/Werror-2.c, gcc.dg/Werror-3.c,\ngcc.dg/Werror-4.c, gcc.dg/Werror-5.c, gcc.dg/Werror-6.c,\ngcc.dg/Werror-7.c, gcc.dg/Werror-8.c, gcc.dg/Werror-9.c,\ngcc.dg/Werror-10.c, gcc.dg/Werror-11.c, gcc.dg/Werror-12: New.\n\nFrom-SVN: r109908", "tree": {"sha": "0ce66fbd7f1ed533eda7b0fb37b3023a151aae03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ce66fbd7f1ed533eda7b0fb37b3023a151aae03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cea24134be6d4996322733862d327a3d40268d2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cea24134be6d4996322733862d327a3d40268d2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cea24134be6d4996322733862d327a3d40268d2d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cea24134be6d4996322733862d327a3d40268d2d/comments", "author": null, "committer": null, "parents": [{"sha": "79cf599406a6a51e2fdd47810fdba89e04cbf1cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79cf599406a6a51e2fdd47810fdba89e04cbf1cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79cf599406a6a51e2fdd47810fdba89e04cbf1cc"}], "stats": {"total": 210, "additions": 210, "deletions": 0}, "files": [{"sha": "deca25d98502149dc84adfa0e86623a08e395f22", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cea24134be6d4996322733862d327a3d40268d2d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cea24134be6d4996322733862d327a3d40268d2d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cea24134be6d4996322733862d327a3d40268d2d", "patch": "@@ -1,3 +1,10 @@\n+2006-01-18  DJ Delorie  <dj@redhat.com>\n+\n+\t* gcc.dg/Werror-1.c, gcc.dg/Werror-2.c, gcc.dg/Werror-3.c,\n+\tgcc.dg/Werror-4.c, gcc.dg/Werror-5.c, gcc.dg/Werror-6.c,\n+\tgcc.dg/Werror-7.c, gcc.dg/Werror-8.c, gcc.dg/Werror-9.c,\n+\tgcc.dg/Werror-10.c, gcc.dg/Werror-11.c, gcc.dg/Werror-12: New.\n+\n 2006-01-18  Jeff Law  <law@redhat.com>\n \n \t* gcc.c-torture/execute/930529-1.x: Use -fwrapv as test depends"}, {"sha": "d50e07c45f273ed90b8151e7c690b41337f98953", "filename": "gcc/testsuite/gcc.dg/Werror-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cea24134be6d4996322733862d327a3d40268d2d/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cea24134be6d4996322733862d327a3d40268d2d/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-1.c?ref=cea24134be6d4996322733862d327a3d40268d2d", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Walways-true -Wattributes -Werror\" } */\n+/* { dg-warning \"warnings being treated as errors\" \"\" {target \"*-*-*\"} 0 } */\n+\n+/* This is the first in a series of test cases that test the\n+   interaction between -Wfoo, -Werror, -Werror=foo, and #pragma GCC\n+   diagnostic error foo.  This one has all the bits we're testing, the\n+   others are subsets of this one.  */\n+\n+#pragma GCC diagnostic error \"-Walways-true\"\n+\n+void __attribute__((dj)) bar() { }\t/* { dg-warning \"warning: .* attribute directive ignored\" } */\n+\n+int i;\n+\n+void\n+foo ()\n+{\n+  if (&i)\t/* { dg-error \"error: .* will always evaluate as 'true'\" } */\n+    grill ();\n+}"}, {"sha": "3e2c9dffa4f140aef94edb5a369feef927eb6775", "filename": "gcc/testsuite/gcc.dg/Werror-10.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cea24134be6d4996322733862d327a3d40268d2d/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cea24134be6d4996322733862d327a3d40268d2d/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-10.c?ref=cea24134be6d4996322733862d327a3d40268d2d", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wattributes -Werror\" } */\n+/* { dg-warning \"warnings being treated as errors\" \"\" {target \"*-*-*\"} 0 } */\n+\n+/* Make sure #pragma can work with -Werror.  */\n+\n+#pragma GCC diagnostic error \"-Walways-true\"\n+\n+void __attribute__((dj)) bar() { }\t/* { dg-warning \"warning: .* attribute directive ignored\" } */\n+\n+int i;\n+\n+void\n+foo ()\n+{\n+  if (&i)\t/* { dg-error \"error: .* will always evaluate as 'true'\" } */\n+    grill ();\n+}"}, {"sha": "14aae3129f8c94402a11e1169a6ca1a5a49120a3", "filename": "gcc/testsuite/gcc.dg/Werror-11.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cea24134be6d4996322733862d327a3d40268d2d/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cea24134be6d4996322733862d327a3d40268d2d/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-11.c?ref=cea24134be6d4996322733862d327a3d40268d2d", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wattributes -Werror\" } */\n+/* { dg-warning \"warnings being treated as errors\" \"\" {target \"*-*-*\"} 0 } */\n+\n+/* Make sure #pragma can override -Werror.  */\n+\n+#pragma GCC diagnostic warning \"-Walways-true\"\n+\n+void __attribute__((dj)) bar() { }\t/* { dg-warning \"warning: .* attribute directive ignored\" } */\n+\n+int i;\n+\n+void\n+foo ()\n+{\n+  if (&i)\t/* { dg-warning \"warning: .* will always evaluate as 'true'\" } */\n+    grill ();\n+}"}, {"sha": "0cb1f78f8054c91a18b612db3388c64d146e84d6", "filename": "gcc/testsuite/gcc.dg/Werror-12.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cea24134be6d4996322733862d327a3d40268d2d/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cea24134be6d4996322733862d327a3d40268d2d/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-12.c?ref=cea24134be6d4996322733862d327a3d40268d2d", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wattributes -Walways-true\" } */\n+\n+/* Make sure #pragma can override -Wfoo.  */\n+\n+#pragma GCC diagnostic ignored \"-Walways-true\"\n+\n+void __attribute__((dj)) bar() { }\t/* { dg-warning \"attribute directive ignored\" } */\n+\n+int i;\n+\n+void\n+foo ()\n+{\n+  if (&i)\t/* { dg-bogus \"true\" } */\n+    grill ();\n+}"}, {"sha": "8e08ba0857ea674ba04d27a256b4d72e1ac4bbd5", "filename": "gcc/testsuite/gcc.dg/Werror-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cea24134be6d4996322733862d327a3d40268d2d/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cea24134be6d4996322733862d327a3d40268d2d/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-2.c?ref=cea24134be6d4996322733862d327a3d40268d2d", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+/* This one is the baseline.  Make sure with no option we get no\n+   warnings.  */\n+\n+void __attribute__((dj)) bar() { }\t/* { dg-warning \"warning: .* attribute directive ignored\" } */\n+\n+int i;\n+\n+void\n+foo ()\n+{\n+  if (&i)\n+    grill ();\n+}"}, {"sha": "a994714446c1945c64b214d43fb02f92aa8d4650", "filename": "gcc/testsuite/gcc.dg/Werror-3.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cea24134be6d4996322733862d327a3d40268d2d/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cea24134be6d4996322733862d327a3d40268d2d/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-3.c?ref=cea24134be6d4996322733862d327a3d40268d2d", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Walways-true -Wattributes\" } */\n+\n+/* Make sure the command line option enables the warning.  */\n+\n+void __attribute__((dj)) bar() { }\t/* { dg-warning \"warning: .* attribute directive ignored\" } */\n+\n+int i;\n+\n+void\n+foo ()\n+{\n+  if (&i)\t/* { dg-warning \"warning: .* will always evaluate as 'true'\" } */\n+    grill ();\n+}"}, {"sha": "45d217b32331899e0d6e298d9521bab2301ccf8a", "filename": "gcc/testsuite/gcc.dg/Werror-4.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cea24134be6d4996322733862d327a3d40268d2d/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cea24134be6d4996322733862d327a3d40268d2d/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-4.c?ref=cea24134be6d4996322733862d327a3d40268d2d", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wattributes\" } */\n+\n+/* Make sure the pragma enables the error.  */\n+\n+#pragma GCC diagnostic error \"-Walways-true\"\n+\n+void __attribute__((dj)) bar() { }\t/* { dg-warning \"warning: .* attribute directive ignored\" } */\n+\n+int i;\n+\n+void\n+foo ()\n+{\n+  if (&i)\t/* { dg-error \"error: .* will always evaluate as 'true'\" } */\n+    grill ();\n+}"}, {"sha": "39125904dfa0fe388e505e08e23282af47a4be05", "filename": "gcc/testsuite/gcc.dg/Werror-5.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cea24134be6d4996322733862d327a3d40268d2d/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cea24134be6d4996322733862d327a3d40268d2d/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-5.c?ref=cea24134be6d4996322733862d327a3d40268d2d", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Walways-true -Wattributes -Werror\" } */\n+/* { dg-warning \"warnings being treated as errors\" \"\" {target \"*-*-*\"} 0 } */\n+\n+/* Make sure -Werror turns warnings in to errors.  */\n+\n+void __attribute__((dj)) bar() { }\t/* { dg-warning \"warning: .* attribute directive ignored\" } */\n+\n+int i;\n+\n+void\n+foo ()\n+{\n+  if (&i)\t/* { dg-warning \"warning: .* will always evaluate as 'true'\" } */\n+    grill ();\n+}"}, {"sha": "11f28b0aa6a078ac9bed072da394b9b8ae13a3bc", "filename": "gcc/testsuite/gcc.dg/Werror-6.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cea24134be6d4996322733862d327a3d40268d2d/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cea24134be6d4996322733862d327a3d40268d2d/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-6.c?ref=cea24134be6d4996322733862d327a3d40268d2d", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wattributes -Werror=always-true\" } */\n+\n+/* Make sure -Werror-foo emits an error and not a warning */\n+\n+void __attribute__((dj)) bar() { }\t/* { dg-warning \"warning: .* attribute directive ignored\" } */\n+\n+int i;\n+\n+void\n+foo ()\n+{\n+  if (&i)\t/* { dg-error \"error: .* will always evaluate as 'true'\" } */\n+    grill ();\n+}"}, {"sha": "e6671991f5a2d73f299af7d2fda80446812986a4", "filename": "gcc/testsuite/gcc.dg/Werror-7.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cea24134be6d4996322733862d327a3d40268d2d/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cea24134be6d4996322733862d327a3d40268d2d/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-7.c?ref=cea24134be6d4996322733862d327a3d40268d2d", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Walways-true -Werror -Wno-error=always-true -Wattributes\" } */\n+/* { dg-warning \"warnings being treated as errors\" \"\" {target \"*-*-*\"} 0 } */\n+\n+/* Make sure -Wno-error= overrides -Werror.  */\n+\n+void __attribute__((dj)) bar() { }\t/* { dg-warning \"warning: .* attribute directive ignored\" } */\n+\n+int i;\n+\n+void\n+foo ()\n+{\n+  if (&i)\t/* { dg-warning \"warning: .* will always evaluate as 'true'\" } */\n+    grill ();\n+}"}, {"sha": "ec70a2e8eab8b6f7dade4e1a965f036f05060ece", "filename": "gcc/testsuite/gcc.dg/Werror-8.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cea24134be6d4996322733862d327a3d40268d2d/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cea24134be6d4996322733862d327a3d40268d2d/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-8.c?ref=cea24134be6d4996322733862d327a3d40268d2d", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wattributes\" } */\n+\n+/* Make sure #pragma can enable a warning.  */\n+\n+#pragma GCC diagnostic warning \"-Walways-true\"\n+\n+void __attribute__((dj)) bar() { }\t/* { dg-warning \"warning: .* attribute directive ignored\" } */\n+\n+int i;\n+\n+void\n+foo ()\n+{\n+  if (&i)\t/* { dg-warning \"warning: .* will always evaluate as 'true'\" } */\n+    grill ();\n+}"}, {"sha": "5b287793f556f2adbd17d2470ef52851d50f2ae1", "filename": "gcc/testsuite/gcc.dg/Werror-9.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cea24134be6d4996322733862d327a3d40268d2d/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cea24134be6d4996322733862d327a3d40268d2d/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-9.c?ref=cea24134be6d4996322733862d327a3d40268d2d", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wattributes\" } */\n+\n+/* Make sure #pragma can enable a warning as an error.  */\n+\n+#pragma GCC diagnostic error \"-Walways-true\"\n+\n+void __attribute__((dj)) bar() { }\t/* { dg-warning \"warning: .* attribute directive ignored\" } */\n+\n+int i;\n+\n+void\n+foo ()\n+{\n+  if (&i)\t/* { dg-error \"error: .* will always evaluate as 'true'\" } */\n+    grill ();\n+}"}]}