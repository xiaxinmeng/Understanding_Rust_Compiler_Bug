{"sha": "87cb2a87f80194173484e8ae56b7beb089c19a81", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODdjYjJhODdmODAxOTQxNzM0ODRlOGFlNTZiN2JlYjA4OWMxOWE4MQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-10-07T08:54:09Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-10-07T08:54:09Z"}, "message": "i960.md (*): Use TFmode, not XFmode.\n\n        * config/i960/i960.md (*): Use TFmode, not XFmode.\n        * config/i960/i960.c (*): Likewise.\n        (i960_arg_size_and_align): Remove XFmode alignment hack.\n        (i960_round_align): Merge code from ROUND_TYPE_ALIGN.\n        * config/i960/i960.h (LONG_DOUBLE_TYPE_SIZE): Use 128, not 96.\n        (MAX_LONG_DOUBLE_TYPE_SIZE): Likewise.\n        (DATA_ALIGNMENT, ROUND_TYPE_SIZE): Remove.\n\nFrom-SVN: r57889", "tree": {"sha": "fd86b0d86f7237fa456967eb08666696c6c1ebab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd86b0d86f7237fa456967eb08666696c6c1ebab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87cb2a87f80194173484e8ae56b7beb089c19a81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87cb2a87f80194173484e8ae56b7beb089c19a81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87cb2a87f80194173484e8ae56b7beb089c19a81", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87cb2a87f80194173484e8ae56b7beb089c19a81/comments", "author": null, "committer": null, "parents": [{"sha": "5ef38d2ac17d31bec0d881f6a23eb102cccdc213", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ef38d2ac17d31bec0d881f6a23eb102cccdc213", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ef38d2ac17d31bec0d881f6a23eb102cccdc213"}], "stats": {"total": 180, "additions": 85, "deletions": 95}, "files": [{"sha": "fe6bd87e42e2c1e157e36a2f89802f9f07339c0d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cb2a87f80194173484e8ae56b7beb089c19a81/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cb2a87f80194173484e8ae56b7beb089c19a81/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=87cb2a87f80194173484e8ae56b7beb089c19a81", "patch": "@@ -1,3 +1,13 @@\n+2002-10-07  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/i960/i960.md (*): Use TFmode, not XFmode.\n+\t* config/i960/i960.c (*): Likewise.\n+\t(i960_arg_size_and_align): Remove XFmode alignment hack.\n+\t(i960_round_align): Merge code from ROUND_TYPE_ALIGN.\n+\t* config/i960/i960.h (LONG_DOUBLE_TYPE_SIZE): Use 128, not 96.\n+\t(MAX_LONG_DOUBLE_TYPE_SIZE): Likewise.\n+\t(DATA_ALIGNMENT, ROUND_TYPE_SIZE): Remove.\n+\n 2002-10-07  Richard Henderson  <rth@redhat.com>\n \n \t* config/fp-bit.c (EXTENDED_FLOAT_STUBS): Flush out all XF/TFmode"}, {"sha": "bde671052559853f194ce915ca1685215bdbc543", "filename": "gcc/config/i960/i960.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cb2a87f80194173484e8ae56b7beb089c19a81/gcc%2Fconfig%2Fi960%2Fi960.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cb2a87f80194173484e8ae56b7beb089c19a81/gcc%2Fconfig%2Fi960%2Fi960.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.c?ref=87cb2a87f80194173484e8ae56b7beb089c19a81", "patch": "@@ -152,8 +152,8 @@ i960_initialize ()\n       i960_last_maxbitalignment = 8;\n     }\n \n-  /* Tell the compiler which flavor of XFmode we're using.  */\n-  real_format_for_mode[XFmode - QFmode] = &ieee_extended_intel_96_format;\n+  /* Tell the compiler which flavor of TFmode we're using.  */\n+  real_format_for_mode[TFmode - QFmode] = &ieee_extended_intel_128_format;\n }\n \f\n /* Return true if OP can be used as the source of an fp move insn.  */\n@@ -803,13 +803,13 @@ i960_output_ldconst (dst, src)\n       output_asm_insn (\"ldconst\t%1,%0\", operands);\n       return \"\";\n     }\n-  else if (mode == XFmode)\n+  else if (mode == TFmode)\n     {\n       REAL_VALUE_TYPE d;\n       long value_long[3];\n       int i;\n \n-      if (fp_literal_zero (src, XFmode))\n+      if (fp_literal_zero (src, TFmode))\n \treturn \"movt\t0,%0\";\n \n       REAL_VALUE_FROM_CONST_DOUBLE (d, src);\n@@ -2208,7 +2208,7 @@ hard_regno_mode_ok (regno, mode)\n \tcase DImode: case DFmode:\n \t  return (regno & 1) == 0;\n \n-\tcase TImode: case XFmode:\n+\tcase TImode: case TFmode:\n \t  return (regno & 3) == 0;\n \n \tdefault:\n@@ -2219,7 +2219,7 @@ hard_regno_mode_ok (regno, mode)\n     {\n       switch (mode)\n \t{\n-\tcase SFmode: case DFmode: case XFmode:\n+\tcase SFmode: case DFmode: case TFmode:\n \tcase SCmode: case DCmode:\n \t  return 1;\n \n@@ -2397,14 +2397,7 @@ i960_arg_size_and_align (mode, type, size_out, align_out)\n     size = (GET_MODE_SIZE (mode) + UNITS_PER_WORD - 1) / UNITS_PER_WORD;\n \n   if (type == 0)\n-    {\n-      /* ??? This is a hack to properly correct the alignment of XFmode\n-\t values without affecting anything else.  */\n-      if (size == 3)\n-\talign = 4;\n-      else\n-\talign = size;\n-    }\n+    align = size;\n   else if (TYPE_ALIGN (type) >= BITS_PER_WORD)\n     align = TYPE_ALIGN (type) / BITS_PER_WORD;\n   else\n@@ -2503,11 +2496,18 @@ i960_object_bytes_bitalign (n)\n                      MIN (pragma align, structure size alignment)).  */\n \n int\n-i960_round_align (align, tsize)\n+i960_round_align (align, type)\n      int align;\n-     tree tsize;\n+     tree type;\n {\n   int new_align;\n+  tree tsize;\n+\n+  if (TARGET_OLD_ALIGN || TYPE_PACKED (type))\n+    return align;\n+  if (TREE_CODE (type) != RECORD_TYPE)\n+    return align;\n+  tsize = TYPE_SIZE (type);\n \n   if (! tsize || TREE_CODE (tsize) != INTEGER_CST)\n     return align;"}, {"sha": "ee27398300d8bf82ddbed7aa319980c02c11c971", "filename": "gcc/config/i960/i960.h", "status": "modified", "additions": 7, "deletions": 27, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cb2a87f80194173484e8ae56b7beb089c19a81/gcc%2Fconfig%2Fi960%2Fi960.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cb2a87f80194173484e8ae56b7beb089c19a81/gcc%2Fconfig%2Fi960%2Fi960.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.h?ref=87cb2a87f80194173484e8ae56b7beb089c19a81", "patch": "@@ -362,17 +362,16 @@ extern int target_flags;\n /* Width of a word, in units (bytes).  */\n #define UNITS_PER_WORD 4\n \n-/* Width in bits of a long double.  Define to 96, and let\n-   ROUND_TYPE_ALIGN adjust the alignment for speed.  */\n-#define\tLONG_DOUBLE_TYPE_SIZE (TARGET_LONG_DOUBLE_64 ? 64 : 96)\n-#define MAX_LONG_DOUBLE_TYPE_SIZE 96\n+/* Width in bits of a long double.  */\n+#define\tLONG_DOUBLE_TYPE_SIZE (TARGET_LONG_DOUBLE_64 ? 64 : 128)\n+#define MAX_LONG_DOUBLE_TYPE_SIZE 128\n \n /* Define this to set long double type size to use in libgcc2.c, which can\n    not depend on target_flags.  */\n #if defined(__LONG_DOUBLE_64__)\n #define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 64\n #else\n-#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 96\n+#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 128\n #endif\n \n /* Allocation boundary (in *bits*) for storing pointers in memory.  */\n@@ -417,33 +416,14 @@ extern int target_flags;\n    ? i960_object_bytes_bitalign (int_size_in_bytes (TREE_TYPE (EXP)))\t    \\\n    : (ALIGN))\n \n-/* Make XFmode floating point quantities be 128 bit aligned.  */\n-#define DATA_ALIGNMENT(TYPE, ALIGN)\t\t\t\t\t\\\n-  (TREE_CODE (TYPE) == ARRAY_TYPE\t\t\t\t\t\\\n-   && TYPE_MODE (TREE_TYPE (TYPE)) == XFmode\t\t\t\t\\\n-   && (ALIGN) < 128 ? 128 : (ALIGN))\n-\n /* Macros to determine size of aggregates (structures and unions\n    in C).  Normally, these may be defined to simply return the maximum\n    alignment and simple rounded-up size, but on some machines (like\n    the i960), the total size of a structure is based on a non-trivial\n    rounding method.  */\n \n-#define ROUND_TYPE_ALIGN(TYPE, COMPUTED, SPECIFIED)\t\t\\\n-  ((TREE_CODE (TYPE) == REAL_TYPE && TYPE_MODE (TYPE) == XFmode)\t   \\\n-   ? 128  /* Put 80 bit floating point elements on 128 bit boundaries.  */ \\\n-   : ((!TARGET_OLD_ALIGN && !TYPE_PACKED (TYPE)\t\t\t\t   \\\n-       && TREE_CODE (TYPE) == RECORD_TYPE)\t\t\t\t   \\\n-      ? i960_round_align (MAX ((COMPUTED), (SPECIFIED)), TYPE_SIZE (TYPE)) \\\n-      : MAX ((COMPUTED), (SPECIFIED))))\n-\n-#define ROUND_TYPE_SIZE(TYPE, COMPUTED, SPECIFIED)\t\t\\\n-  ((TREE_CODE (TYPE) == REAL_TYPE && TYPE_MODE (TYPE) == XFmode)\t\\\n-   ? bitsize_int (128) : round_up (COMPUTED, SPECIFIED))\n-#define ROUND_TYPE_SIZE_UNIT(TYPE, COMPUTED, SPECIFIED)\t\t\\\n-  ((TREE_CODE (TYPE) == REAL_TYPE && TYPE_MODE (TYPE) == XFmode)\t\\\n-   ? size_int (16) : round_up (COMPUTED, SPECIFIED))\n-\n+#define ROUND_TYPE_ALIGN(TYPE, COMPUTED, SPECIFIED) \\\n+  i960_round_align (MAX ((COMPUTED), (SPECIFIED)), TYPE)\n \f\n /* Standard register usage.  */\n \n@@ -526,7 +506,7 @@ extern int target_flags;\n \n /* Value is 1 if hard register REGNO can hold a value of machine-mode MODE.\n    On 80960, the cpu registers can hold any mode but the float registers\n-   can only hold SFmode, DFmode, or XFmode.  */\n+   can only hold SFmode, DFmode, or TFmode.  */\n #define HARD_REGNO_MODE_OK(REGNO, MODE) hard_regno_mode_ok ((REGNO), (MODE))\n \n /* Value is 1 if it is a good idea to tie two pseudo registers"}, {"sha": "af0193fcceb39191e6374d927267a8840da48675", "filename": "gcc/config/i960/i960.md", "status": "modified", "additions": 52, "deletions": 52, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cb2a87f80194173484e8ae56b7beb089c19a81/gcc%2Fconfig%2Fi960%2Fi960.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cb2a87f80194173484e8ae56b7beb089c19a81/gcc%2Fconfig%2Fi960%2Fi960.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.md?ref=87cb2a87f80194173484e8ae56b7beb089c19a81", "patch": "@@ -2061,10 +2061,10 @@\n \f\n ;; Tetra (16 byte) float support.\n \n-(define_expand \"cmpxf\"\n+(define_expand \"cmptf\"\n   [(set (reg:CC 36)\n-\t(compare:CC (match_operand:XF 0 \"register_operand\" \"\")\n-\t\t    (match_operand:XF 1 \"nonmemory_operand\" \"\")))]\n+\t(compare:CC (match_operand:TF 0 \"register_operand\" \"\")\n+\t\t    (match_operand:TF 1 \"nonmemory_operand\" \"\")))]\n   \"TARGET_NUMERICS\"\n   \"\n {\n@@ -2075,27 +2075,27 @@\n \n (define_insn \"\"\n   [(set (reg:CC 36)\n-\t(compare:CC (match_operand:XF 0 \"register_operand\" \"f\")\n-\t\t    (match_operand:XF 1 \"nonmemory_operand\" \"fGH\")))]\n+\t(compare:CC (match_operand:TF 0 \"register_operand\" \"f\")\n+\t\t    (match_operand:TF 1 \"nonmemory_operand\" \"fGH\")))]\n   \"TARGET_NUMERICS\"\n   \"cmpr %0,%1\"\n   [(set_attr \"type\" \"fpcc\")])\n \n-(define_expand \"movxf\"\n-  [(set (match_operand:XF 0 \"general_operand\" \"\")\n-\t(match_operand:XF 1 \"fpmove_src_operand\" \"\"))]\n+(define_expand \"movtf\"\n+  [(set (match_operand:TF 0 \"general_operand\" \"\")\n+\t(match_operand:TF 1 \"fpmove_src_operand\" \"\"))]\n   \"\"\n   \"\n {\n-  if (emit_move_sequence (operands, XFmode))\n+  if (emit_move_sequence (operands, TFmode))\n     DONE;\n }\")\n \n (define_insn \"\"\n-  [(set (match_operand:XF 0 \"general_operand\" \"=r,f,d,d,m\")\n-\t(match_operand:XF 1 \"fpmove_src_operand\" \"r,GH,F,m,d\"))]\n-  \"register_operand (operands[0], XFmode)\n-   || register_operand (operands[1], XFmode)\"\n+  [(set (match_operand:TF 0 \"general_operand\" \"=r,f,d,d,m\")\n+\t(match_operand:TF 1 \"fpmove_src_operand\" \"r,GH,F,m,d\"))]\n+  \"register_operand (operands[0], TFmode)\n+   || register_operand (operands[1], TFmode)\"\n   \"*\n {\n   switch (which_alternative)\n@@ -2119,105 +2119,105 @@\n }\"\n   [(set_attr \"type\" \"move,move,load,fpload,fpstore\")])\n \n-(define_insn \"extendsfxf2\"\n-  [(set (match_operand:XF 0 \"register_operand\" \"=f,d\")\n-\t(float_extend:XF\n+(define_insn \"extendsftf2\"\n+  [(set (match_operand:TF 0 \"register_operand\" \"=f,d\")\n+\t(float_extend:TF\n \t (match_operand:SF 1 \"register_operand\" \"d,f\")))]\n   \"TARGET_NUMERICS\"\n   \"@\n   movr\t%1,%0\n   movre\t%1,%0\"\n   [(set_attr \"type\" \"fpmove\")])\n \n-(define_insn \"extenddfxf2\"\n-  [(set (match_operand:XF 0 \"register_operand\" \"=f,d\")\n-\t(float_extend:XF\n+(define_insn \"extenddftf2\"\n+  [(set (match_operand:TF 0 \"register_operand\" \"=f,d\")\n+\t(float_extend:TF\n \t (match_operand:DF 1 \"register_operand\" \"d,f\")))]\n   \"TARGET_NUMERICS\"\n   \"@\n   movrl\t%1,%0\n   movre\t%1,%0\"\n   [(set_attr \"type\" \"fpmove\")])\n \n-(define_insn \"truncxfdf2\"\n+(define_insn \"trunctfdf2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=d\")\n \t(float_truncate:DF\n-\t (match_operand:XF 1 \"register_operand\" \"f\")))]\n+\t (match_operand:TF 1 \"register_operand\" \"f\")))]\n   \"TARGET_NUMERICS\"\n   \"movrl\t%1,%0\"\n   [(set_attr \"type\" \"fpmove\")])\n \n-(define_insn \"truncxfsf2\"\n+(define_insn \"trunctfsf2\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=d\")\n \t(float_truncate:SF\n-\t (match_operand:XF 1 \"register_operand\" \"f\")))]\n+\t (match_operand:TF 1 \"register_operand\" \"f\")))]\n   \"TARGET_NUMERICS\"\n   \"movr\t%1,%0\"\n   [(set_attr \"type\" \"fpmove\")])\n \n-(define_insn \"floatsixf2\"\n-  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n-\t(float:XF (match_operand:SI 1 \"register_operand\" \"d\")))]\n+(define_insn \"floatsitf2\"\n+  [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n+\t(float:TF (match_operand:SI 1 \"register_operand\" \"d\")))]\n   \"TARGET_NUMERICS\"\n   \"cvtir\t%1,%0\"\n   [(set_attr \"type\" \"fpcvt\")])\n \n-(define_insn \"fix_truncxfsi2\"\n+(define_insn \"fix_trunctfsi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(fix:SI (fix:XF (match_operand:XF 1 \"register_operand\" \"f\"))))]\n+\t(fix:SI (fix:TF (match_operand:TF 1 \"register_operand\" \"f\"))))]\n   \"TARGET_NUMERICS\"\n   \"cvtzri\t%1,%0\"\n   [(set_attr \"type\" \"fpcvt\")])\n \n-(define_insn \"fixuns_truncxfsi2\"\n+(define_insn \"fixuns_trunctfsi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(unsigned_fix:SI (fix:XF (match_operand:XF 1 \"register_operand\" \"f\"))))]\n+\t(unsigned_fix:SI (fix:TF (match_operand:TF 1 \"register_operand\" \"f\"))))]\n   \"TARGET_NUMERICS\"\n   \"cvtzri\t%1,%0\"\n   [(set_attr \"type\" \"fpcvt\")])\n \n-(define_insn \"addxf3\"\n-  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n-\t(plus:XF (match_operand:XF 1 \"nonmemory_operand\" \"%fGH\")\n-\t\t (match_operand:XF 2 \"nonmemory_operand\" \"fGH\")))]\n+(define_insn \"addtf3\"\n+  [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n+\t(plus:TF (match_operand:TF 1 \"nonmemory_operand\" \"%fGH\")\n+\t\t (match_operand:TF 2 \"nonmemory_operand\" \"fGH\")))]\n   \"TARGET_NUMERICS\"\n   \"addr\t%1,%2,%0\"\n   [(set_attr \"type\" \"fpadd\")])\n \n-(define_insn \"subxf3\"\n-  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n-\t(minus:XF (match_operand:XF 1 \"nonmemory_operand\" \"fGH\")\n-\t\t  (match_operand:XF 2 \"nonmemory_operand\" \"fGH\")))]\n+(define_insn \"subtf3\"\n+  [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n+\t(minus:TF (match_operand:TF 1 \"nonmemory_operand\" \"fGH\")\n+\t\t  (match_operand:TF 2 \"nonmemory_operand\" \"fGH\")))]\n   \"TARGET_NUMERICS\"\n   \"subr\t%2,%1,%0\"\n   [(set_attr \"type\" \"fpadd\")])\n \n-(define_insn \"mulxf3\"\n-  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n-\t(mult:XF (match_operand:XF 1 \"nonmemory_operand\" \"%fGH\")\n-\t\t (match_operand:XF 2 \"nonmemory_operand\" \"fGH\")))]\n+(define_insn \"multf3\"\n+  [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n+\t(mult:TF (match_operand:TF 1 \"nonmemory_operand\" \"%fGH\")\n+\t\t (match_operand:TF 2 \"nonmemory_operand\" \"fGH\")))]\n   \"TARGET_NUMERICS\"\n   \"mulr\t%1,%2,%0\"\n   [(set_attr \"type\" \"fpmul\")])\n \n-(define_insn \"divxf3\"\n-  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n-\t(div:XF (match_operand:XF 1 \"nonmemory_operand\" \"fGH\")\n-\t\t(match_operand:XF 2 \"nonmemory_operand\" \"fGH\")))]\n+(define_insn \"divtf3\"\n+  [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n+\t(div:TF (match_operand:TF 1 \"nonmemory_operand\" \"fGH\")\n+\t\t(match_operand:TF 2 \"nonmemory_operand\" \"fGH\")))]\n   \"TARGET_NUMERICS\"\n   \"divr\t%2,%1,%0\"\n   [(set_attr \"type\" \"fpdiv\")])\n \n-(define_insn \"negxf2\"\n-  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n-\t(neg:XF (match_operand:XF 1 \"register_operand\" \"f\")))]\n+(define_insn \"negtf2\"\n+  [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n+\t(neg:TF (match_operand:TF 1 \"register_operand\" \"f\")))]\n   \"TARGET_NUMERICS\"\n   \"subr\t%1,0f0.0,%0\"\n   [(set_attr \"type\" \"fpadd\")])\n \n-(define_insn \"absxf2\"\n-  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n-\t(abs:XF (match_operand:XF 1 \"register_operand\" \"f\")))]\n+(define_insn \"abstf2\"\n+  [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n+\t(abs:TF (match_operand:TF 1 \"register_operand\" \"f\")))]\n   \"(TARGET_NUMERICS)\"\n   \"cpysre\t%1,0f0.0,%0\"\n   [(set_attr \"type\" \"fpmove\")])"}]}