{"sha": "182e515e724e29aaa44873ea71333fd799ee3925", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTgyZTUxNWU3MjRlMjlhYWE0NDg3M2VhNzEzMzNmZDc5OWVlMzkyNQ==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2002-06-15T09:41:13Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2002-06-15T09:41:13Z"}, "message": "tm.texi (MEMBER_TYPE_FORCES_BLK): Document MODE argument.\n\n2002-06-15  Aldy Hernandez  <aldyh@redhat.com>\n\n        * tm.texi (MEMBER_TYPE_FORCES_BLK): Document MODE argument.\n\n        * stor-layout.c (compute_record_mode): Remove check for\n        FUNCTION_ARG_REG_LITTLE_ENDIAN and VOIDmode when checking for\n        MEMBER_TYPE_FORCES_BLK.  Pass new mode field to\n        MEMBER_TYPE_FORCES_BLK.\n\n        * config/ia64/hpux.h (MEMBER_TYPE_FORCES_BLK): Same.\n\n        * config/c4x/c4x.h (MEMBER_TYPE_FORCES_BLK): Same.\n\nFrom-SVN: r54643", "tree": {"sha": "61bbb17e58b498d6833007ffcfd18ab3fddef41d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61bbb17e58b498d6833007ffcfd18ab3fddef41d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/182e515e724e29aaa44873ea71333fd799ee3925", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/182e515e724e29aaa44873ea71333fd799ee3925", "html_url": "https://github.com/Rust-GCC/gccrs/commit/182e515e724e29aaa44873ea71333fd799ee3925", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/182e515e724e29aaa44873ea71333fd799ee3925/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2313d59405eb165d70bbdd81bb1914ab1eddd1d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2313d59405eb165d70bbdd81bb1914ab1eddd1d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2313d59405eb165d70bbdd81bb1914ab1eddd1d8"}], "stats": {"total": 41, "additions": 25, "deletions": 16}, "files": [{"sha": "75ee85301771e05aa4c154a6b61f06804408a4a2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/182e515e724e29aaa44873ea71333fd799ee3925/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/182e515e724e29aaa44873ea71333fd799ee3925/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=182e515e724e29aaa44873ea71333fd799ee3925", "patch": "@@ -1,3 +1,16 @@\n+2002-06-15  Aldy Hernandez  <aldyh@redhat.com>\n+\n+        * tm.texi (MEMBER_TYPE_FORCES_BLK): Document MODE argument.\n+\n+        * stor-layout.c (compute_record_mode): Remove check for\n+        FUNCTION_ARG_REG_LITTLE_ENDIAN and VOIDmode when checking for\n+        MEMBER_TYPE_FORCES_BLK.  Pass new mode field to\n+        MEMBER_TYPE_FORCES_BLK.\n+\n+        * config/ia64/hpux.h (MEMBER_TYPE_FORCES_BLK): Same.\n+\n+        * config/c4x/c4x.h (MEMBER_TYPE_FORCES_BLK): Same.\n+\n 2002-06-14  Jeff Sturm  <jsturm@one-point.com>\n \n \t* config/sparc/sparc.h (DYNAMIC_CHAIN_ADDRESS): Add SPARC_STACK_BIAS."}, {"sha": "e73c40eb0a6929393dad78888d3fd8c0b8dacedc", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/182e515e724e29aaa44873ea71333fd799ee3925/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/182e515e724e29aaa44873ea71333fd799ee3925/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=182e515e724e29aaa44873ea71333fd799ee3925", "patch": "@@ -378,9 +378,9 @@ extern const char *c4x_rpts_cycles_string, *c4x_cpu_version_string;\n #define MAX_FIXED_MODE_SIZE\t64 /* HImode.  */\n \n /* If a structure has a floating point field then force structure\n-   to have BLKMODE.  */\n-#define MEMBER_TYPE_FORCES_BLK(FIELD) \\\n-  (TREE_CODE (TREE_TYPE (FIELD)) == REAL_TYPE)\n+   to have BLKMODE, unless it is the only field.  */\n+#define MEMBER_TYPE_FORCES_BLK(FIELD, MODE) \\\n+  (TREE_CODE (TREE_TYPE (FIELD)) == REAL_TYPE && (MODE) == VOIDmode)\n \n /* Number of bits in the high and low parts of a two stage\n    load of an immediate constant.  */"}, {"sha": "561d629d64b52862f6bd629d722734c536a23d92", "filename": "gcc/config/ia64/hpux.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/182e515e724e29aaa44873ea71333fd799ee3925/gcc%2Fconfig%2Fia64%2Fhpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/182e515e724e29aaa44873ea71333fd799ee3925/gcc%2Fconfig%2Fia64%2Fhpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fhpux.h?ref=182e515e724e29aaa44873ea71333fd799ee3925", "patch": "@@ -103,7 +103,7 @@ Boston, MA 02111-1307, USA.  */\n    structure handling, this macro simply ensures that single field\n    structures are always treated like structures.  */\n \n-#define MEMBER_TYPE_FORCES_BLK(FIELD) 1\n+#define MEMBER_TYPE_FORCES_BLK(FIELD, MODE) 1\n \n /* Override the setting of FUNCTION_ARG_REG_LITTLE_ENDIAN in\n    defaults.h.  Setting this to true means that we are not passing"}, {"sha": "446d2327d7424379b185b6df7b4fba30b125010a", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/182e515e724e29aaa44873ea71333fd799ee3925/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/182e515e724e29aaa44873ea71333fd799ee3925/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=182e515e724e29aaa44873ea71333fd799ee3925", "patch": "@@ -1213,10 +1213,15 @@ Like @code{PCC_BITFIELD_TYPE_MATTERS} except that its effect is limited\n to aligning a bit-field within the structure.\n \n @findex MEMBER_TYPE_FORCES_BLK\n-@item MEMBER_TYPE_FORCES_BLK (@var{field})\n+@item MEMBER_TYPE_FORCES_BLK (@var{field}, @var{mode})\n Return 1 if a structure or array containing @var{field} should be accessed using\n @code{BLKMODE}.\n \n+If @var{field} is the only field in the structure, @var{mode} is its\n+mode, otherwise @var{mode} is VOIDmode.  @var{mode} is provided in the\n+case where structures of one field would require the structure's mode to\n+retain the field's mode.\n+\n Normally, this is not needed.  See the file @file{c4x.h} for an example\n of how to use this macro to prevent a structure having a floating point\n field from being accessed in an integer mode."}, {"sha": "753e41d29ade13847d0e4be6f78c90ba28795f87", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/182e515e724e29aaa44873ea71333fd799ee3925/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/182e515e724e29aaa44873ea71333fd799ee3925/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=182e515e724e29aaa44873ea71333fd799ee3925", "patch": "@@ -1228,16 +1228,7 @@ compute_record_mode (type)\n       /* With some targets, eg. c4x, it is sub-optimal\n \t to access an aligned BLKmode structure as a scalar.  */\n \n-      /* On ia64-*-hpux we need to ensure that we don't change the\n-\t mode of a structure containing a single field or else we\n-\t will pass it incorrectly.  Since a structure with a single\n-\t field causes mode to get set above we can't allow the\n-\t check for mode == VOIDmode in this case.  Perhaps\n-\t MEMBER_TYPE_FORCES_BLK should be extended to include mode\n-\t as an argument and the check could be put in there for c4x.  */\n-\n-      if ((mode == VOIDmode || FUNCTION_ARG_REG_LITTLE_ENDIAN)\n-\t  && MEMBER_TYPE_FORCES_BLK (field))\n+      if (MEMBER_TYPE_FORCES_BLK (field, mode))\n \treturn;\n #endif /* MEMBER_TYPE_FORCES_BLK  */\n     }\n@@ -1577,7 +1568,7 @@ layout_type (type)\n \tTYPE_MODE (type) = BLKmode;\n \tif (TYPE_SIZE (type) != 0\n #ifdef MEMBER_TYPE_FORCES_BLK\n-\t    && ! MEMBER_TYPE_FORCES_BLK (type)\n+\t    && ! MEMBER_TYPE_FORCES_BLK (type, VOIDmode)\n #endif\n \t    /* BLKmode elements force BLKmode aggregate;\n \t       else extract/store fields may lose.  */"}]}