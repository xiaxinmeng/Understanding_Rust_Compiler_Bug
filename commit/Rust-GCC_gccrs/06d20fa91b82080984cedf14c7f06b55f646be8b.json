{"sha": "06d20fa91b82080984cedf14c7f06b55f646be8b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDZkMjBmYTkxYjgyMDgwOTg0Y2VkZjE0YzdmMDZiNTVmNjQ2YmU4Yg==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@nildram.co.uk", "date": "2007-09-24T19:57:29Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2007-09-24T19:57:29Z"}, "message": "target-supports.exp (check_effective_target_mips16_attribute): Reject hard-float modes unless the ABI is o32 or o64.\n\ngcc/testsuite/\n\t* lib/target-supports.exp (check_effective_target_mips16_attribute):\n\tReject hard-float modes unless the ABI is o32 or o64.\n\t* gcc.target/mips/inter/mips16-inter.exp: Load gcc-dg.exp instead\n\tof gcc.exp.  Skip the tests when mips16 code generation is not\n\tsupported.\n\t* gcc.target/mips/mips16-attributes.c: Require mips16_attribute\n\tand use dg-add-options mips16_attribute.\n\nFrom-SVN: r128723", "tree": {"sha": "944bad16c3ba1b01b6b37d7e82c1a4df88865328", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/944bad16c3ba1b01b6b37d7e82c1a4df88865328"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06d20fa91b82080984cedf14c7f06b55f646be8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06d20fa91b82080984cedf14c7f06b55f646be8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06d20fa91b82080984cedf14c7f06b55f646be8b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06d20fa91b82080984cedf14c7f06b55f646be8b/comments", "author": null, "committer": null, "parents": [{"sha": "a951757d9f568ed60f4b78dac3b561e712f9dc0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a951757d9f568ed60f4b78dac3b561e712f9dc0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a951757d9f568ed60f4b78dac3b561e712f9dc0a"}], "stats": {"total": 30, "additions": 27, "deletions": 3}, "files": [{"sha": "944cdf8d03246bd72e07740a1d3069aadc1775c5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06d20fa91b82080984cedf14c7f06b55f646be8b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06d20fa91b82080984cedf14c7f06b55f646be8b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=06d20fa91b82080984cedf14c7f06b55f646be8b", "patch": "@@ -1,3 +1,13 @@\n+2007-09-24  Richard Sandiford  <rsandifo@nildram.co.uk>\n+\n+\t* lib/target-supports.exp (check_effective_target_mips16_attribute):\n+\tReject hard-float modes unless the ABI is o32 or o64.\n+\t* gcc.target/mips/inter/mips16-inter.exp: Load gcc-dg.exp instead\n+\tof gcc.exp.  Skip the tests when mips16 code generation is not\n+\tsupported.\n+\t* gcc.target/mips/mips16-attributes.c: Require mips16_attribute\n+\tand use dg-add-options mips16_attribute.\n+\n 2007-09-24  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/33506"}, {"sha": "45e0c5ebce6d7f0ec4355d7606d5e5fcdd798b00", "filename": "gcc/testsuite/gcc.target/mips/inter/mips16-inter.exp", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06d20fa91b82080984cedf14c7f06b55f646be8b/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Finter%2Fmips16-inter.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06d20fa91b82080984cedf14c7f06b55f646be8b/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Finter%2Fmips16-inter.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Finter%2Fmips16-inter.exp?ref=06d20fa91b82080984cedf14c7f06b55f646be8b", "patch": "@@ -6,6 +6,13 @@ if { ![istarget mipsisa*-*-elf*] && ![istarget mips64vr*-*-elf*] } {\n     return\n }\n \n+load_lib gcc-dg.exp\n+\n+# Check whether the flags are compatible with MIPS16 code generation.\n+if { ![check_effective_target_mips16_attribute] } {\n+    return\n+}\n+\n # Save the old value of CFLAGS_FOR_TARGET, if any.\n global saved_CFLAGS_FOR_TARGET\n if { [info exists CFLAGS_FOR_TARGET] } {\n@@ -36,7 +43,6 @@ proc compat-use-tst-compiler { } {\n     }\n }\n \n-load_lib gcc.exp\n load_lib compat.exp\n \n gcc_init"}, {"sha": "96945e10e8ce9ae241ad08d1d8a29e23440d4f0c", "filename": "gcc/testsuite/gcc.target/mips/mips16-attributes.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06d20fa91b82080984cedf14c7f06b55f646be8b/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips16-attributes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06d20fa91b82080984cedf14c7f06b55f646be8b/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips16-attributes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips16-attributes.c?ref=06d20fa91b82080984cedf14c7f06b55f646be8b", "patch": "@@ -1,7 +1,8 @@\n /* Verify that mips16 and nomips16 attributes work, checking all combinations\n    of calling a nomips16/mips16/default function from a nomips16/mips16/default\n    function.  */\n-/* { dg-do run { target mipsisa*-*-elf* } } */\n+/* { dg-do run { target { mipsisa*-*-elf* && mips16_attribute } } } */\n+/* { dg-add-options mips16_attribute } */\n \n #include <stdlib.h>\n "}, {"sha": "7ec6581278fae2063fe72d7b40010989dcdc87ec", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06d20fa91b82080984cedf14c7f06b55f646be8b/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06d20fa91b82080984cedf14c7f06b55f646be8b/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=06d20fa91b82080984cedf14c7f06b55f646be8b", "patch": "@@ -648,10 +648,17 @@ proc add_options_for_mips16_attribute { flags } {\n }\n \n # Return true if we can force a mode that allows MIPS16 code generation.\n+# We don't support MIPS16 PIC, and only support MIPS16 -mhard-float\n+# for o32 and o64.\n \n proc check_effective_target_mips16_attribute { } {\n     return [check_no_compiler_messages mips16_attribute assembly {\n-\t#if __PIC__\n+\t#ifdef PIC\n+\t#error FOO\n+\t#endif\n+\t#if defined __mips_hard_float \\\n+\t    && (!defined _ABIO32 || _MIPS_SIM != _ABIO32) \\\n+\t    && (!defined _ABIO64 || _MIPS_SIM != _ABIO64)\n \t#error FOO\n \t#endif\n     } [add_options_for_mips16_attribute \"\"]]"}]}