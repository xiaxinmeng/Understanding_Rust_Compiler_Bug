{"sha": "aa7e7eff5ec165dc8463a0e74309801b15d1feda", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWE3ZTdlZmY1ZWMxNjVkYzg0NjNhMGU3NDMwOTgwMWIxNWQxZmVkYQ==", "commit": {"author": {"name": "Dominique d'Humieres", "email": "dhumieres.dominique@free.fr", "date": "2020-07-24T18:27:53Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2020-07-24T18:47:47Z"}, "message": "PR 93567, G edit descriptor uses E instead of F editing in rounding mode UP.\n\nThe switch between FMT_E and FMT_F is based on the absolute value.\nSet r=0 for rounding toward zero and r = 1 otherwise.\nIf (exp_d - m) == 1 there is no rounding needed.\n\nlibgfortran/ChangeLog:\n\n\tPR fortran/93567\n\t* io/write_float.def (determine_en_precision): Fix switch between\n\tFMT_E and FMT_F.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/93567\n\t* gfortran.dg/round_3.f08: Add test cases.", "tree": {"sha": "237c249a7dcaafe8c18ac9b32062f9b5b4eb208c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/237c249a7dcaafe8c18ac9b32062f9b5b4eb208c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa7e7eff5ec165dc8463a0e74309801b15d1feda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa7e7eff5ec165dc8463a0e74309801b15d1feda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa7e7eff5ec165dc8463a0e74309801b15d1feda", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa7e7eff5ec165dc8463a0e74309801b15d1feda/comments", "author": null, "committer": null, "parents": [{"sha": "05e0971bcf94a481cbfa2731484f024a67dbd4a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05e0971bcf94a481cbfa2731484f024a67dbd4a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05e0971bcf94a481cbfa2731484f024a67dbd4a5"}], "stats": {"total": 38, "additions": 33, "deletions": 5}, "files": [{"sha": "4a0a692fa7bf77947cafdfd2659f0a8db2a45160", "filename": "gcc/testsuite/gfortran.dg/round_3.f08", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa7e7eff5ec165dc8463a0e74309801b15d1feda/gcc%2Ftestsuite%2Fgfortran.dg%2Fround_3.f08", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa7e7eff5ec165dc8463a0e74309801b15d1feda/gcc%2Ftestsuite%2Fgfortran.dg%2Fround_3.f08", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fround_3.f08?ref=aa7e7eff5ec165dc8463a0e74309801b15d1feda", "patch": "@@ -110,6 +110,30 @@ program pr48615\n     call checkfmt(\"(RU,E17.1)\", nearest(2.0, 1.0),     \"          0.3E+01\")\n     call checkfmt(\"(RD,E17.1)\", nearest(3.0, -1.0),    \"          0.2E+01\")\n \n+    call checkfmt(\"(G12.2)\", 99.0,       \"     99.    \")\n+    call checkfmt(\"(G12.2)\", 99.5,       \"    0.10E+03\")\n+    call checkfmt(\"(G12.2)\", 100.0,      \"    0.10E+03\")\n+    call checkfmt(\"(G12.2)\", -99.0,      \"    -99.    \")\n+    call checkfmt(\"(G12.2)\", -99.5,      \"   -0.10E+03\")\n+    call checkfmt(\"(G12.2)\", -100.0,     \"   -0.10E+03\")\n+    call checkfmt(\"(RU,G12.2)\", 99.0,    \"     99.    \")    ! pr93567\n+    call checkfmt(\"(RU,G12.2)\", 99.01,   \"    0.10E+03\")\n+    call checkfmt(\"(RU,G12.2)\", -99.0,   \"    -99.    \")\n+    call checkfmt(\"(RU,G12.2)\", -99.01,  \"    -99.    \")\n+    call checkfmt(\"(RU,G12.2)\", -100.01, \"   -0.10E+03\")\n+    call checkfmt(\"(RU,G12.4)\", 99.0 ,   \"   99.00    \")\n+    call checkfmt(\"(RU,G12.4)\", 99.01,   \"   99.02    \")\n+    call checkfmt(\"(RD,G12.2)\", 99.0,    \"     99.    \")\n+    call checkfmt(\"(RD,G12.2)\", 99.01,   \"     99.    \")\n+    call checkfmt(\"(RD,G12.2)\", 100.01,  \"    0.10E+03\")\n+    call checkfmt(\"(RD,G12.2)\", -99.0,   \"    -99.    \")\n+    call checkfmt(\"(RD,G12.2)\", -99.01,  \"   -0.10E+03\")\n+    call checkfmt(\"(RD,G12.2)\", -100.00, \"   -0.10E+03\")\n+    call checkfmt(\"(Rz,G12.2)\", 99.01,   \"     99.    \")\n+    call checkfmt(\"(Rz,G12.2)\", 100.01,  \"    0.10E+03\")\n+    call checkfmt(\"(Rz,G12.2)\", -99.01,  \"    -99.    \")\n+    call checkfmt(\"(Rz,G12.2)\", -100.01, \"   -0.10E+03\")\n+\n contains\n     subroutine checkfmt(fmt, x, cmp)\n         character(len=*), intent(in) :: fmt\n@@ -119,6 +143,6 @@ subroutine checkfmt(fmt, x, cmp)\n         \n         write(s, fmt) x\n         if (s /= cmp) STOP 1\n-        !if (s /= cmp) print \"(a,1x,a,' expected: ',1x)\", fmt, s, cmp\n+        !if (s /= cmp) print \"(a,1x,a,' expected: ',1x,a)\", fmt, s, cmp\n     end subroutine\n end program"}, {"sha": "9a4462c11171dc97005d49d577221fed3f31bd5e", "filename": "libgfortran/io/write_float.def", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa7e7eff5ec165dc8463a0e74309801b15d1feda/libgfortran%2Fio%2Fwrite_float.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa7e7eff5ec165dc8463a0e74309801b15d1feda/libgfortran%2Fio%2Fwrite_float.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fwrite_float.def?ref=aa7e7eff5ec165dc8463a0e74309801b15d1feda", "patch": "@@ -988,24 +988,28 @@ determine_en_precision (st_parameter_dt *dtp, const fnode *f,\n \t  w = default_width;\\\n \t  d = precision;\\\n \t}\\\n+      /* The switch between FMT_E and FMT_F is based on the absolute value.  \\\n+         Set r=0 for rounding toward zero and r = 1 otherwise.  \\\n+\t If (exp_d - m) == 1 there is no rounding needed.  */\\\n       switch (dtp->u.p.current_unit->round_status)\\\n \t{\\\n \t  case ROUND_ZERO:\\\n-\t    r = sign_bit ? 1.0 : 0.0;\\\n+\t    r = 0.0;\\\n \t    break;\\\n \t  case ROUND_UP:\\\n-\t    r = 1.0;\\\n+\t    r = sign_bit ? 0.0 : 1.0;\\\n \t    break;\\\n \t  case ROUND_DOWN:\\\n-\t    r = 0.0;\\\n+\t    r = sign_bit ? 1.0 : 0.0;\\\n \t    break;\\\n \t  default:\\\n \t    break;\\\n \t}\\\n       exp_d = calculate_exp_ ## x (d);\\\n       r_sc = (1 - r / exp_d);\\\n       temp = 0.1 * r_sc;\\\n-      if ((m > 0.0 && ((m < temp) || (r >= (exp_d - m))))\\\n+      if ((m > 0.0 && ((m < temp) || (r < 1 && r >= (exp_d - m))\\\n+\t\t\t\t  || (r == 1 && 1 > (exp_d - m))))\\\n \t  || ((m == 0.0) && !(compile_options.allow_std\\\n \t\t\t      & (GFC_STD_F2003 | GFC_STD_F2008)))\\\n \t  ||  d == 0)\\"}]}