{"sha": "d50672efa744b4492ca692e4cffcd7c9cdd55e37", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDUwNjcyZWZhNzQ0YjQ0OTJjYTY5MmU0Y2ZmY2Q3YzljZGQ1NWUzNw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2003-02-22T00:32:09Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2003-02-22T00:32:09Z"}, "message": "i386.c (builtin_description): Add __builtin_ia32_paddq and __builtin_ia32_psubq.\n\n\t* i386.c (builtin_description): Add __builtin_ia32_paddq and\n\t__builtin_ia32_psubq. Fix __builtin_ia32_paddq128\n\t and __builtin_ia32_psubq128.\n\t* i386.h (IX86_BUILTIN_PADDQ, IX86_BUILTIN_PSUBQ): New.\n\t* i386.md (addv*, mmx_ior*, mmx_xoe*, mmx_and*): Add missing '%'.\n\t(mmx_adddi3, mmx_subdi3): New.\n\t* mmintrin.h (_mm_add_si64, _mm_sub_si64): New.\n\t* xmmintrin.h (_mm_movepi64_pi64): New.\n\t(_mm_add_epi64, _mm_sub_epi64): fix.\n\t(_mm_mul_pu16): Rename to...\n\t(_mm_mul_su32): ... this one.\n\n\t* builtins.c (expand_builtin_expect):  Do not predict\n\tflag_guess_branch_prob is not set.\n\t* c-semantics.c (expand_stmt): Likewise.\n\t* predict.c (predict_insn): Likewise.\n\t* stmt.c (expand_continue_loop): Likewise.\n\t* toplev.c (rest_of_compilation): Do not call\n\tnote_prediction_to_br_prob and note_prediction_to_br_prob\n\twhen not optimizing.\n\nFrom-SVN: r63263", "tree": {"sha": "a266b0a843d5fff9a87b5ef6845e62d66c3338ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a266b0a843d5fff9a87b5ef6845e62d66c3338ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d50672efa744b4492ca692e4cffcd7c9cdd55e37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d50672efa744b4492ca692e4cffcd7c9cdd55e37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d50672efa744b4492ca692e4cffcd7c9cdd55e37", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d50672efa744b4492ca692e4cffcd7c9cdd55e37/comments", "author": null, "committer": null, "parents": [{"sha": "6a6d417ebdde6e06c887058bcedb884d21180be0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a6d417ebdde6e06c887058bcedb884d21180be0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a6d417ebdde6e06c887058bcedb884d21180be0"}], "stats": {"total": 144, "additions": 112, "deletions": 32}, "files": [{"sha": "993fe0cc4e1c7041194062e3d96dca6545919389", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d50672efa744b4492ca692e4cffcd7c9cdd55e37/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d50672efa744b4492ca692e4cffcd7c9cdd55e37/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d50672efa744b4492ca692e4cffcd7c9cdd55e37", "patch": "@@ -1,3 +1,26 @@\n+Sat Feb 22 00:48:22 CET 2003  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386.c (builtin_description): Add __builtin_ia32_paddq and\n+\t__builtin_ia32_psubq. Fix __builtin_ia32_paddq128\n+\t and __builtin_ia32_psubq128.\n+\t* i386.h (IX86_BUILTIN_PADDQ, IX86_BUILTIN_PSUBQ): New.\n+\t* i386.md (addv*, mmx_ior*, mmx_xoe*, mmx_and*): Add missing '%'.\n+\t(mmx_adddi3, mmx_subdi3): New.\n+\t* mmintrin.h (_mm_add_si64, _mm_sub_si64): New.\n+\t* xmmintrin.h (_mm_movepi64_pi64): New.\n+\t(_mm_add_epi64, _mm_sub_epi64): fix.\n+\t(_mm_mul_pu16): Rename to...\n+\t(_mm_mul_su32): ... this one.\n+\n+\t* builtins.c (expand_builtin_expect):  Do not predict\n+\tflag_guess_branch_prob is not set.\n+\t* c-semantics.c (expand_stmt): Likewise.\n+\t* predict.c (predict_insn): Likewise.\n+\t* stmt.c (expand_continue_loop): Likewise.\n+\t* toplev.c (rest_of_compilation): Do not call\n+\tnote_prediction_to_br_prob and note_prediction_to_br_prob\n+\twhen not optimizing.\n+\n Fri Feb 21 23:10:13 CET 2003  Jan Hubicka  <jh@suse.cz>\n \n \t* cfgrtl.c (commit_edge_insertions):  Call"}, {"sha": "ebb9835a2f508d7ab251d578746aa9c9196afec5", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d50672efa744b4492ca692e4cffcd7c9cdd55e37/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d50672efa744b4492ca692e4cffcd7c9cdd55e37/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=d50672efa744b4492ca692e4cffcd7c9cdd55e37", "patch": "@@ -3840,7 +3840,7 @@ expand_builtin_expect (arglist, target)\n   target = expand_expr (exp, target, VOIDmode, EXPAND_NORMAL);\n \n   /* Don't bother with expected value notes for integral constants.  */\n-  if (GET_CODE (target) != CONST_INT)\n+  if (flag_guess_branch_prob && GET_CODE (target) != CONST_INT)\n     {\n       /* We do need to force this into a register so that we can be\n \t moderately sure to be able to correctly interpret the branch"}, {"sha": "6a81d6e47f2428e2d039019b23834a8cc3396030", "filename": "gcc/c-semantics.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d50672efa744b4492ca692e4cffcd7c9cdd55e37/gcc%2Fc-semantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d50672efa744b4492ca692e4cffcd7c9cdd55e37/gcc%2Fc-semantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-semantics.c?ref=d50672efa744b4492ca692e4cffcd7c9cdd55e37", "patch": "@@ -864,7 +864,8 @@ expand_stmt (t)\n \tcase GOTO_STMT:\n \t  /* Emit information for branch prediction.  */\n \t  if (!GOTO_FAKE_P (t)\n-\t      && TREE_CODE (GOTO_DESTINATION (t)) == LABEL_DECL)\n+\t      && TREE_CODE (GOTO_DESTINATION (t)) == LABEL_DECL\n+\t      && flag_guess_branch_prob)\n \t    {\n \t      rtx note = emit_note (NULL, NOTE_INSN_PREDICTION);\n "}, {"sha": "0c908786320c529e64760a53c777640a6897684d", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d50672efa744b4492ca692e4cffcd7c9cdd55e37/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d50672efa744b4492ca692e4cffcd7c9cdd55e37/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=d50672efa744b4492ca692e4cffcd7c9cdd55e37", "patch": "@@ -12787,9 +12787,11 @@ static const struct builtin_description bdesc_2arg[] =\n   { MASK_MMX, CODE_FOR_addv8qi3, \"__builtin_ia32_paddb\", IX86_BUILTIN_PADDB, 0, 0 },\n   { MASK_MMX, CODE_FOR_addv4hi3, \"__builtin_ia32_paddw\", IX86_BUILTIN_PADDW, 0, 0 },\n   { MASK_MMX, CODE_FOR_addv2si3, \"__builtin_ia32_paddd\", IX86_BUILTIN_PADDD, 0, 0 },\n+  { MASK_MMX, CODE_FOR_mmx_adddi3, \"__builtin_ia32_paddq\", IX86_BUILTIN_PADDQ, 0, 0 },\n   { MASK_MMX, CODE_FOR_subv8qi3, \"__builtin_ia32_psubb\", IX86_BUILTIN_PSUBB, 0, 0 },\n   { MASK_MMX, CODE_FOR_subv4hi3, \"__builtin_ia32_psubw\", IX86_BUILTIN_PSUBW, 0, 0 },\n   { MASK_MMX, CODE_FOR_subv2si3, \"__builtin_ia32_psubd\", IX86_BUILTIN_PSUBD, 0, 0 },\n+  { MASK_MMX, CODE_FOR_mmx_subdi3, \"__builtin_ia32_psubq\", IX86_BUILTIN_PSUBQ, 0, 0 },\n \n   { MASK_MMX, CODE_FOR_ssaddv8qi3, \"__builtin_ia32_paddsb\", IX86_BUILTIN_PADDSB, 0, 0 },\n   { MASK_MMX, CODE_FOR_ssaddv4hi3, \"__builtin_ia32_paddsw\", IX86_BUILTIN_PADDSW, 0, 0 },\n@@ -12910,11 +12912,11 @@ static const struct builtin_description bdesc_2arg[] =\n   { MASK_SSE2, CODE_FOR_addv16qi3, \"__builtin_ia32_paddb128\", IX86_BUILTIN_PADDB128, 0, 0 },\n   { MASK_SSE2, CODE_FOR_addv8hi3, \"__builtin_ia32_paddw128\", IX86_BUILTIN_PADDW128, 0, 0 },\n   { MASK_SSE2, CODE_FOR_addv4si3, \"__builtin_ia32_paddd128\", IX86_BUILTIN_PADDD128, 0, 0 },\n-  { MASK_SSE2, CODE_FOR_addv4si3, \"__builtin_ia32_paddq128\", IX86_BUILTIN_PADDQ128, 0, 0 },\n+  { MASK_SSE2, CODE_FOR_addv2di3, \"__builtin_ia32_paddq128\", IX86_BUILTIN_PADDQ128, 0, 0 },\n   { MASK_SSE2, CODE_FOR_subv16qi3, \"__builtin_ia32_psubb128\", IX86_BUILTIN_PSUBB128, 0, 0 },\n   { MASK_SSE2, CODE_FOR_subv8hi3, \"__builtin_ia32_psubw128\", IX86_BUILTIN_PSUBW128, 0, 0 },\n   { MASK_SSE2, CODE_FOR_subv4si3, \"__builtin_ia32_psubd128\", IX86_BUILTIN_PSUBD128, 0, 0 },\n-  { MASK_SSE2, CODE_FOR_subv4si3, \"__builtin_ia32_psubq128\", IX86_BUILTIN_PSUBQ128, 0, 0 },\n+  { MASK_SSE2, CODE_FOR_subv2di3, \"__builtin_ia32_psubq128\", IX86_BUILTIN_PSUBQ128, 0, 0 },\n \n   { MASK_MMX, CODE_FOR_ssaddv16qi3, \"__builtin_ia32_paddsb128\", IX86_BUILTIN_PADDSB128, 0, 0 },\n   { MASK_MMX, CODE_FOR_ssaddv8hi3, \"__builtin_ia32_paddsw128\", IX86_BUILTIN_PADDSW128, 0, 0 },"}, {"sha": "7e0c621553c78d88edbe398bebe9b73117853011", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d50672efa744b4492ca692e4cffcd7c9cdd55e37/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d50672efa744b4492ca692e4cffcd7c9cdd55e37/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=d50672efa744b4492ca692e4cffcd7c9cdd55e37", "patch": "@@ -2163,13 +2163,15 @@ enum ix86_builtins\n   IX86_BUILTIN_PADDB,\n   IX86_BUILTIN_PADDW,\n   IX86_BUILTIN_PADDD,\n+  IX86_BUILTIN_PADDQ,\n   IX86_BUILTIN_PADDSB,\n   IX86_BUILTIN_PADDSW,\n   IX86_BUILTIN_PADDUSB,\n   IX86_BUILTIN_PADDUSW,\n   IX86_BUILTIN_PSUBB,\n   IX86_BUILTIN_PSUBW,\n   IX86_BUILTIN_PSUBD,\n+  IX86_BUILTIN_PSUBQ,\n   IX86_BUILTIN_PSUBSB,\n   IX86_BUILTIN_PSUBSW,\n   IX86_BUILTIN_PSUBUSB,"}, {"sha": "4c359ee377cffd3bdcdbe663033a56abe829b1a1", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 40, "deletions": 18, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d50672efa744b4492ca692e4cffcd7c9cdd55e37/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d50672efa744b4492ca692e4cffcd7c9cdd55e37/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=d50672efa744b4492ca692e4cffcd7c9cdd55e37", "patch": "@@ -20242,7 +20242,7 @@\n \n (define_insn \"addv8qi3\"\n   [(set (match_operand:V8QI 0 \"register_operand\" \"=y\")\n-        (plus:V8QI (match_operand:V8QI 1 \"register_operand\" \"0\")\n+        (plus:V8QI (match_operand:V8QI 1 \"register_operand\" \"%0\")\n \t           (match_operand:V8QI 2 \"nonimmediate_operand\" \"ym\")))]\n   \"TARGET_MMX\"\n   \"paddb\\t{%2, %0|%0, %2}\"\n@@ -20251,7 +20251,7 @@\n \n (define_insn \"addv4hi3\"\n   [(set (match_operand:V4HI 0 \"register_operand\" \"=y\")\n-        (plus:V4HI (match_operand:V4HI 1 \"register_operand\" \"0\")\n+        (plus:V4HI (match_operand:V4HI 1 \"register_operand\" \"%0\")\n \t           (match_operand:V4HI 2 \"nonimmediate_operand\" \"ym\")))]\n   \"TARGET_MMX\"\n   \"paddw\\t{%2, %0|%0, %2}\"\n@@ -20260,16 +20260,27 @@\n \n (define_insn \"addv2si3\"\n   [(set (match_operand:V2SI 0 \"register_operand\" \"=y\")\n-        (plus:V2SI (match_operand:V2SI 1 \"register_operand\" \"0\")\n+        (plus:V2SI (match_operand:V2SI 1 \"register_operand\" \"%0\")\n \t           (match_operand:V2SI 2 \"nonimmediate_operand\" \"ym\")))]\n   \"TARGET_MMX\"\n   \"paddd\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"mmxadd\")\n    (set_attr \"mode\" \"DI\")])\n \n+(define_insn \"mmx_adddi3\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=y\")\n+        (unspec:DI\n+\t [(plus:DI (match_operand:DI 1 \"register_operand\" \"%0\")\n+\t\t   (match_operand:DI 2 \"nonimmediate_operand\" \"ym\"))]\n+\t UNSPEC_NOP))]\n+  \"TARGET_MMX\"\n+  \"paddq\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmxadd\")\n+   (set_attr \"mode\" \"DI\")])\n+\n (define_insn \"ssaddv8qi3\"\n   [(set (match_operand:V8QI 0 \"register_operand\" \"=y\")\n-        (ss_plus:V8QI (match_operand:V8QI 1 \"register_operand\" \"0\")\n+        (ss_plus:V8QI (match_operand:V8QI 1 \"register_operand\" \"%0\")\n \t\t      (match_operand:V8QI 2 \"nonimmediate_operand\" \"ym\")))]\n   \"TARGET_MMX\"\n   \"paddsb\\t{%2, %0|%0, %2}\"\n@@ -20278,7 +20289,7 @@\n \n (define_insn \"ssaddv4hi3\"\n   [(set (match_operand:V4HI 0 \"register_operand\" \"=y\")\n-        (ss_plus:V4HI (match_operand:V4HI 1 \"register_operand\" \"0\")\n+        (ss_plus:V4HI (match_operand:V4HI 1 \"register_operand\" \"%0\")\n \t\t      (match_operand:V4HI 2 \"nonimmediate_operand\" \"ym\")))]\n   \"TARGET_MMX\"\n   \"paddsw\\t{%2, %0|%0, %2}\"\n@@ -20287,7 +20298,7 @@\n \n (define_insn \"usaddv8qi3\"\n   [(set (match_operand:V8QI 0 \"register_operand\" \"=y\")\n-        (us_plus:V8QI (match_operand:V8QI 1 \"register_operand\" \"0\")\n+        (us_plus:V8QI (match_operand:V8QI 1 \"register_operand\" \"%0\")\n \t\t      (match_operand:V8QI 2 \"nonimmediate_operand\" \"ym\")))]\n   \"TARGET_MMX\"\n   \"paddusb\\t{%2, %0|%0, %2}\"\n@@ -20296,7 +20307,7 @@\n \n (define_insn \"usaddv4hi3\"\n   [(set (match_operand:V4HI 0 \"register_operand\" \"=y\")\n-        (us_plus:V4HI (match_operand:V4HI 1 \"register_operand\" \"0\")\n+        (us_plus:V4HI (match_operand:V4HI 1 \"register_operand\" \"%0\")\n \t\t      (match_operand:V4HI 2 \"nonimmediate_operand\" \"ym\")))]\n   \"TARGET_MMX\"\n   \"paddusw\\t{%2, %0|%0, %2}\"\n@@ -20330,6 +20341,17 @@\n   [(set_attr \"type\" \"mmxadd\")\n    (set_attr \"mode\" \"DI\")])\n \n+(define_insn \"mmx_subdi3\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=y\")\n+        (unspec:DI\n+\t [(minus:DI (match_operand:DI 1 \"register_operand\" \"0\")\n+\t\t    (match_operand:DI 2 \"nonimmediate_operand\" \"ym\"))]\n+\t UNSPEC_NOP))]\n+  \"TARGET_MMX\"\n+  \"psubq\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmxadd\")\n+   (set_attr \"mode\" \"DI\")])\n+\n (define_insn \"sssubv8qi3\"\n   [(set (match_operand:V8QI 0 \"register_operand\" \"=y\")\n         (ss_minus:V8QI (match_operand:V8QI 1 \"register_operand\" \"0\")\n@@ -20433,7 +20455,7 @@\n (define_insn \"mmx_iordi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=y\")\n         (unspec:DI\n-\t [(ior:DI (match_operand:DI 1 \"register_operand\" \"0\")\n+\t [(ior:DI (match_operand:DI 1 \"register_operand\" \"%0\")\n \t\t  (match_operand:DI 2 \"nonimmediate_operand\" \"ym\"))]\n \t UNSPEC_NOP))]\n   \"TARGET_MMX\"\n@@ -20444,7 +20466,7 @@\n (define_insn \"mmx_xordi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=y\")\n         (unspec:DI\n-\t [(xor:DI (match_operand:DI 1 \"register_operand\" \"0\")\n+\t [(xor:DI (match_operand:DI 1 \"register_operand\" \"%0\")\n \t\t  (match_operand:DI 2 \"nonimmediate_operand\" \"ym\"))]\n \t UNSPEC_NOP))]\n   \"TARGET_MMX\"\n@@ -20467,7 +20489,7 @@\n (define_insn \"mmx_anddi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=y\")\n         (unspec:DI\n-\t [(and:DI (match_operand:DI 1 \"register_operand\" \"0\")\n+\t [(and:DI (match_operand:DI 1 \"register_operand\" \"%0\")\n \t\t  (match_operand:DI 2 \"nonimmediate_operand\" \"ym\"))]\n \t UNSPEC_NOP))]\n   \"TARGET_MMX\"\n@@ -21894,7 +21916,7 @@\n \n (define_insn \"addv16qi3\"\n   [(set (match_operand:V16QI 0 \"register_operand\" \"=x\")\n-        (plus:V16QI (match_operand:V16QI 1 \"register_operand\" \"0\")\n+        (plus:V16QI (match_operand:V16QI 1 \"register_operand\" \"%0\")\n \t\t    (match_operand:V16QI 2 \"nonimmediate_operand\" \"xm\")))]\n   \"TARGET_SSE2\"\n   \"paddb\\t{%2, %0|%0, %2}\"\n@@ -21903,7 +21925,7 @@\n \n (define_insn \"addv8hi3\"\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n-        (plus:V8HI (match_operand:V8HI 1 \"register_operand\" \"0\")\n+        (plus:V8HI (match_operand:V8HI 1 \"register_operand\" \"%0\")\n \t           (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm\")))]\n   \"TARGET_SSE2\"\n   \"paddw\\t{%2, %0|%0, %2}\"\n@@ -21912,7 +21934,7 @@\n \n (define_insn \"addv4si3\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n-        (plus:V4SI (match_operand:V4SI 1 \"register_operand\" \"0\")\n+        (plus:V4SI (match_operand:V4SI 1 \"register_operand\" \"%0\")\n \t           (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm\")))]\n   \"TARGET_SSE2\"\n   \"paddd\\t{%2, %0|%0, %2}\"\n@@ -21921,7 +21943,7 @@\n \n (define_insn \"addv2di3\"\n   [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n-        (plus:V2DI (match_operand:V2DI 1 \"register_operand\" \"0\")\n+        (plus:V2DI (match_operand:V2DI 1 \"register_operand\" \"%0\")\n \t           (match_operand:V2DI 2 \"nonimmediate_operand\" \"xm\")))]\n   \"TARGET_SSE2\"\n   \"paddq\\t{%2, %0|%0, %2}\"\n@@ -21930,7 +21952,7 @@\n \n (define_insn \"ssaddv16qi3\"\n   [(set (match_operand:V16QI 0 \"register_operand\" \"=x\")\n-        (ss_plus:V16QI (match_operand:V16QI 1 \"register_operand\" \"0\")\n+        (ss_plus:V16QI (match_operand:V16QI 1 \"register_operand\" \"%0\")\n \t\t       (match_operand:V16QI 2 \"nonimmediate_operand\" \"xm\")))]\n   \"TARGET_SSE2\"\n   \"paddsb\\t{%2, %0|%0, %2}\"\n@@ -21939,7 +21961,7 @@\n \n (define_insn \"ssaddv8hi3\"\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n-        (ss_plus:V8HI (match_operand:V8HI 1 \"register_operand\" \"0\")\n+        (ss_plus:V8HI (match_operand:V8HI 1 \"register_operand\" \"%0\")\n \t\t      (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm\")))]\n   \"TARGET_SSE2\"\n   \"paddsw\\t{%2, %0|%0, %2}\"\n@@ -21948,7 +21970,7 @@\n \n (define_insn \"usaddv16qi3\"\n   [(set (match_operand:V16QI 0 \"register_operand\" \"=x\")\n-        (us_plus:V16QI (match_operand:V16QI 1 \"register_operand\" \"0\")\n+        (us_plus:V16QI (match_operand:V16QI 1 \"register_operand\" \"%0\")\n \t\t       (match_operand:V16QI 2 \"nonimmediate_operand\" \"xm\")))]\n   \"TARGET_SSE2\"\n   \"paddusb\\t{%2, %0|%0, %2}\"\n@@ -21957,7 +21979,7 @@\n \n (define_insn \"usaddv8hi3\"\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n-        (us_plus:V8HI (match_operand:V8HI 1 \"register_operand\" \"0\")\n+        (us_plus:V8HI (match_operand:V8HI 1 \"register_operand\" \"%0\")\n \t\t      (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm\")))]\n   \"TARGET_SSE2\"\n   \"paddusw\\t{%2, %0|%0, %2}\""}, {"sha": "21cbf7fd2322241b46abe0a953f278aed4bcf454", "filename": "gcc/config/i386/mmintrin.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d50672efa744b4492ca692e4cffcd7c9cdd55e37/gcc%2Fconfig%2Fi386%2Fmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d50672efa744b4492ca692e4cffcd7c9cdd55e37/gcc%2Fconfig%2Fi386%2Fmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmintrin.h?ref=d50672efa744b4492ca692e4cffcd7c9cdd55e37", "patch": "@@ -160,6 +160,13 @@ _mm_add_pi32 (__m64 __m1, __m64 __m2)\n   return (__m64) __builtin_ia32_paddd ((__v2si)__m1, (__v2si)__m2);\n }\n \n+/* Add the 64-bit values in M1 to the 64-bit values in M2.  */\n+static __inline __m64\n+_mm_add_si64 (__m64 __m1, __m64 __m2)\n+{\n+  return (__m64) __builtin_ia32_paddq ((long long)__m1, (long long)__m2);\n+}\n+\n /* Add the 8-bit values in M1 to the 8-bit values in M2 using signed\n    saturated arithmetic.  */\n static __inline __m64\n@@ -213,6 +220,13 @@ _mm_sub_pi32 (__m64 __m1, __m64 __m2)\n   return (__m64) __builtin_ia32_psubd ((__v2si)__m1, (__v2si)__m2);\n }\n \n+/* Add the 64-bit values in M1 to the 64-bit values in M2.  */\n+static __inline __m64\n+_mm_sub_si64 (__m64 __m1, __m64 __m2)\n+{\n+  return (__m64) __builtin_ia32_psubq ((long long)__m1, (long long)__m2);\n+}\n+\n /* Subtract the 8-bit values in M2 from the 8-bit values in M1 using signed\n    saturating arithmetic.  */\n static __inline __m64"}, {"sha": "1e07ec67239b0ed1483c5263386ed26335a6614d", "filename": "gcc/config/i386/xmmintrin.h", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d50672efa744b4492ca692e4cffcd7c9cdd55e37/gcc%2Fconfig%2Fi386%2Fxmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d50672efa744b4492ca692e4cffcd7c9cdd55e37/gcc%2Fconfig%2Fi386%2Fxmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxmmintrin.h?ref=d50672efa744b4492ca692e4cffcd7c9cdd55e37", "patch": "@@ -1619,6 +1619,12 @@ _mm_storel_epi64 (__m128i *__P, __m128i __B)\n   *(long long *)__P = __builtin_ia32_movdq2q ((__v2di)__B);\n }\n \n+static __inline __m64\n+_mm_movepi64_pi64 (__m128i __B)\n+{\n+  return (__m64) __builtin_ia32_movdq2q ((__v2di)__B);\n+}\n+\n static __inline __m128i\n _mm_move_epi64 (__m128i __A)\n {\n@@ -2048,7 +2054,7 @@ _mm_add_epi32 (__m128i __A, __m128i __B)\n static __inline __m128i\n _mm_add_epi64 (__m128i __A, __m128i __B)\n {\n-  return (__m128i)__builtin_ia32_paddq128 ((__v4si)__A, (__v4si)__B);\n+  return (__m128i)__builtin_ia32_paddq128 ((__v2di)__A, (__v2di)__B);\n }\n \n static __inline __m128i\n@@ -2096,7 +2102,7 @@ _mm_sub_epi32 (__m128i __A, __m128i __B)\n static __inline __m128i\n _mm_sub_epi64 (__m128i __A, __m128i __B)\n {\n-  return (__m128i)__builtin_ia32_psubq128 ((__v4si)__A, (__v4si)__B);\n+  return (__m128i)__builtin_ia32_psubq128 ((__v2di)__A, (__v2di)__B);\n }\n \n static __inline __m128i\n@@ -2142,7 +2148,7 @@ _mm_mullo_epi16 (__m128i __A, __m128i __B)\n }\n \n static __inline __m64\n-_mm_mul_pu16 (__m64 __A, __m64 __B)\n+_mm_mul_su32 (__m64 __A, __m64 __B)\n {\n   return (__m64)__builtin_ia32_pmuludq ((__v2si)__A, (__v2si)__B);\n }"}, {"sha": "704f269a7f61779dc69edf42ca44733e9cba1ce2", "filename": "gcc/predict.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d50672efa744b4492ca692e4cffcd7c9cdd55e37/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d50672efa744b4492ca692e4cffcd7c9cdd55e37/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=d50672efa744b4492ca692e4cffcd7c9cdd55e37", "patch": "@@ -186,6 +186,8 @@ predict_insn (insn, predictor, probability)\n {\n   if (!any_condjump_p (insn))\n     abort ();\n+  if (!flag_guess_branch_prob)\n+    return;\n \n   REG_NOTES (insn)\n     = gen_rtx_EXPR_LIST (REG_BR_PRED,"}, {"sha": "e4789a79694c36d3702a5001417faf59f5bddf53", "filename": "gcc/stmt.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d50672efa744b4492ca692e4cffcd7c9cdd55e37/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d50672efa744b4492ca692e4cffcd7c9cdd55e37/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=d50672efa744b4492ca692e4cffcd7c9cdd55e37", "patch": "@@ -2781,8 +2781,11 @@ expand_continue_loop (whichloop)\n   /* Emit information for branch prediction.  */\n   rtx note;\n \n-  note = emit_note (NULL, NOTE_INSN_PREDICTION);\n-  NOTE_PREDICTION (note) = NOTE_PREDICT (PRED_CONTINUE, IS_TAKEN);\n+  if (flag_guess_branch_prob)\n+    {\n+      note = emit_note (NULL, NOTE_INSN_PREDICTION);\n+      NOTE_PREDICTION (note) = NOTE_PREDICT (PRED_CONTINUE, IS_TAKEN);\n+    }\n   clear_last_expr ();\n   if (whichloop == 0)\n     whichloop = loop_stack;\n@@ -2974,7 +2977,8 @@ expand_value_return (val)\n   rtx return_reg;\n   enum br_predictor pred;\n \n-  if ((pred = return_prediction (val)) != PRED_NO_PREDICTION)\n+  if (flag_guess_branch_prob\n+      && (pred = return_prediction (val)) != PRED_NO_PREDICTION)\n     {\n       /* Emit information for branch prediction.  */\n       rtx note;"}, {"sha": "92bc8adcb49ce275d6e5e6f9ff2f199db32cdeb2", "filename": "gcc/toplev.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d50672efa744b4492ca692e4cffcd7c9cdd55e37/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d50672efa744b4492ca692e4cffcd7c9cdd55e37/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=d50672efa744b4492ca692e4cffcd7c9cdd55e37", "patch": "@@ -2605,9 +2605,12 @@ rest_of_compilation (decl)\n   delete_unreachable_blocks ();\n \n   /* Turn NOTE_INSN_PREDICTIONs into branch predictions.  */\n-  timevar_push (TV_BRANCH_PROB);\n-  note_prediction_to_br_prob ();\n-  timevar_pop (TV_BRANCH_PROB);\n+  if (flag_guess_branch_prob)\n+    {\n+      timevar_push (TV_BRANCH_PROB);\n+      note_prediction_to_br_prob ();\n+      timevar_pop (TV_BRANCH_PROB);\n+    }\n \n   /* We may have potential sibling or tail recursion sites.  Select one\n      (of possibly multiple) methods of performing the call.  */\n@@ -2688,7 +2691,8 @@ rest_of_compilation (decl)\n   timevar_push (TV_JUMP);\n   /* Turn NOTE_INSN_EXPECTED_VALUE into REG_BR_PROB.  Do this\n      before jump optimization switches branch directions.  */\n-  expected_value_to_br_prob ();\n+  if (flag_guess_branch_prob)\n+    expected_value_to_br_prob ();\n \n   reg_scan (insns, max_reg_num (), 0);\n   rebuild_jump_labels (insns);"}]}