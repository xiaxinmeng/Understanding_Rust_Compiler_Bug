{"sha": "320c7be3ff77ef695230a0f5bc816cbd53bb4f54", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzIwYzdiZTNmZjc3ZWY2OTUyMzBhMGY1YmM4MTZjYmQ1M2JiNGY1NA==", "commit": {"author": {"name": "Sebastian Huber", "email": "sebastian.huber@embedded-brains.de", "date": "2016-09-23T06:58:00Z"}, "committer": {"name": "Sebastian Huber", "email": "sh@gcc.gnu.org", "date": "2016-09-23T06:58:00Z"}, "message": "[RTEMS] Always use atomic builtins for libstdc++\n\nlibstdc++-v3/\n\t* config/cpu/m68k/atomicity.h: Adjust comment.\n\t* acinclude.m4 (GLIBCXX_ENABLE_ATOMIC_BUILTINS): Honor\n\texplicit atomicity_dir setup via configure.host.\n\t* configure.host (rtems-*): Set atomicity_dir.\n\t* configure: Regenerate.\n\nFrom-SVN: r240387", "tree": {"sha": "ae778f7dbfc0250868fdd5d946e22bf5d9006a85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae778f7dbfc0250868fdd5d946e22bf5d9006a85"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/320c7be3ff77ef695230a0f5bc816cbd53bb4f54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/320c7be3ff77ef695230a0f5bc816cbd53bb4f54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/320c7be3ff77ef695230a0f5bc816cbd53bb4f54", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/320c7be3ff77ef695230a0f5bc816cbd53bb4f54/comments", "author": {"login": "sebhub", "id": 932056, "node_id": "MDQ6VXNlcjkzMjA1Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/932056?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebhub", "html_url": "https://github.com/sebhub", "followers_url": "https://api.github.com/users/sebhub/followers", "following_url": "https://api.github.com/users/sebhub/following{/other_user}", "gists_url": "https://api.github.com/users/sebhub/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebhub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebhub/subscriptions", "organizations_url": "https://api.github.com/users/sebhub/orgs", "repos_url": "https://api.github.com/users/sebhub/repos", "events_url": "https://api.github.com/users/sebhub/events{/privacy}", "received_events_url": "https://api.github.com/users/sebhub/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e9f1eeed6b7a47692e263a43731c6abde700c5d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9f1eeed6b7a47692e263a43731c6abde700c5d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9f1eeed6b7a47692e263a43731c6abde700c5d3"}], "stats": {"total": 37, "additions": 28, "deletions": 9}, "files": [{"sha": "81e99e709644629a852dd7278bd52b974ef03aab", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/320c7be3ff77ef695230a0f5bc816cbd53bb4f54/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/320c7be3ff77ef695230a0f5bc816cbd53bb4f54/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=320c7be3ff77ef695230a0f5bc816cbd53bb4f54", "patch": "@@ -1,3 +1,11 @@\n+2015-09-23  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n+\n+\t* config/cpu/m68k/atomicity.h: Adjust comment.\n+\t* acinclude.m4 (GLIBCXX_ENABLE_ATOMIC_BUILTINS): Honor\n+\texplicit atomicity_dir setup via configure.host.\n+\t* configure.host (rtems-*): Set atomicity_dir.\n+\t* configure: Regenerate.\n+\n 2016-09-22  Jonathan Wakely  <jwakely@redhat.com>\n \n \tImplement C++17 node extraction and insertion (P0083R5)"}, {"sha": "ffead7dfd4c3917180d39b24341654d35fdb088e", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/320c7be3ff77ef695230a0f5bc816cbd53bb4f54/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/320c7be3ff77ef695230a0f5bc816cbd53bb4f54/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=320c7be3ff77ef695230a0f5bc816cbd53bb4f54", "patch": "@@ -3489,10 +3489,12 @@ EOF\n   CXXFLAGS=\"$old_CXXFLAGS\"\n   AC_LANG_RESTORE\n \n-  # Set atomicity_dir to builtins if all but the long long test above passes.\n-  if test \"$glibcxx_cv_atomic_bool\" = yes \\\n+  # Set atomicity_dir to builtins if all but the long long test above passes,\n+  # or if the builtins were already chosen (e.g. by configure.host).\n+  if { test \"$glibcxx_cv_atomic_bool\" = yes \\\n      && test \"$glibcxx_cv_atomic_short\" = yes \\\n-     && test \"$glibcxx_cv_atomic_int\" = yes; then\n+     && test \"$glibcxx_cv_atomic_int\" = yes; } \\\n+     || test \"$atomicity_dir\" = \"cpu/generic/atomicity_builtins\"; then\n     AC_DEFINE(_GLIBCXX_ATOMIC_BUILTINS, 1,\n     [Define if the compiler supports C++11 atomics.])\n     atomicity_dir=cpu/generic/atomicity_builtins"}, {"sha": "a9ddc6ba3bf55b9d6f2545c92ba0d6b669b37fbf", "filename": "libstdc++-v3/config/cpu/m68k/atomicity.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/320c7be3ff77ef695230a0f5bc816cbd53bb4f54/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fm68k%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/320c7be3ff77ef695230a0f5bc816cbd53bb4f54/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fm68k%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fm68k%2Fatomicity.h?ref=320c7be3ff77ef695230a0f5bc816cbd53bb4f54", "patch": "@@ -48,6 +48,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   }\n \n #elif defined(__rtems__)\n+  // This code is only provided for reference.  RTEMS uses now the atomic\n+  // builtins and libatomic.  See configure.host.\n+  //\n   // TAS/JBNE is unsafe on systems with strict priority-based scheduling.\n   // Disable interrupts, which we can do only from supervisor mode.\n   _Atomic_word"}, {"sha": "ba471b08d102d0c795590beeaa478a7b08880b63", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/320c7be3ff77ef695230a0f5bc816cbd53bb4f54/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/320c7be3ff77ef695230a0f5bc816cbd53bb4f54/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=320c7be3ff77ef695230a0f5bc816cbd53bb4f54", "patch": "@@ -15538,10 +15538,12 @@ ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $\n ac_compiler_gnu=$ac_cv_c_compiler_gnu\n \n \n-  # Set atomicity_dir to builtins if all but the long long test above passes.\n-  if test \"$glibcxx_cv_atomic_bool\" = yes \\\n+  # Set atomicity_dir to builtins if all but the long long test above passes,\n+  # or if the builtins were already chosen (e.g. by configure.host).\n+  if { test \"$glibcxx_cv_atomic_bool\" = yes \\\n      && test \"$glibcxx_cv_atomic_short\" = yes \\\n-     && test \"$glibcxx_cv_atomic_int\" = yes; then\n+     && test \"$glibcxx_cv_atomic_int\" = yes; } \\\n+     || test \"$atomicity_dir\" = \"cpu/generic/atomicity_builtins\"; then\n \n $as_echo \"#define _GLIBCXX_ATOMIC_BUILTINS 1\" >>confdefs.h\n \n@@ -15573,7 +15575,7 @@ $as_echo \"$as_me: WARNING: Performance of certain classes will degrade as a resu\n   # unnecessary for this test.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15576 \"configure\"\n+#line 15578 \"configure\"\n int main()\n {\n   _Decimal32 d1;\n@@ -15615,7 +15617,7 @@ ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n   # unnecessary for this test.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15618 \"configure\"\n+#line 15620 \"configure\"\n template<typename T1, typename T2>\n   struct same\n   { typedef T2 type; };\n@@ -15649,7 +15651,7 @@ $as_echo \"$enable_int128\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15652 \"configure\"\n+#line 15654 \"configure\"\n template<typename T1, typename T2>\n   struct same\n   { typedef T2 type; };"}, {"sha": "eb56ab12d75c8b8f720c28d1503e2c02d2cbc119", "filename": "libstdc++-v3/configure.host", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/320c7be3ff77ef695230a0f5bc816cbd53bb4f54/libstdc%2B%2B-v3%2Fconfigure.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/320c7be3ff77ef695230a0f5bc816cbd53bb4f54/libstdc%2B%2B-v3%2Fconfigure.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.host?ref=320c7be3ff77ef695230a0f5bc816cbd53bb4f54", "patch": "@@ -296,6 +296,10 @@ case \"${host_os}\" in\n     os_include_dir=\"os/qnx/qnx6.1\"\n     c_model=c\n     ;;\n+  rtems*)\n+    # Use libatomic if necessary and avoid libstdc++ specific atomicity support\n+    atomicity_dir=\"cpu/generic/atomicity_builtins\"\n+    ;;\n   solaris2)\n     # This too-vague configuration does not provide enough information\n     # to select a ctype include, and thus os_include_dir is a crap shoot."}]}