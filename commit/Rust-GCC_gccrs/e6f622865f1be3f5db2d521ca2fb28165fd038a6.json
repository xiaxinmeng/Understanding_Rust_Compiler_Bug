{"sha": "e6f622865f1be3f5db2d521ca2fb28165fd038a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTZmNjIyODY1ZjFiZTNmNWRiMmQ1MjFjYTJmYjI4MTY1ZmQwMzhhNg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-01-18T14:07:32Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-01-18T14:07:32Z"}, "message": "typeck.c (build_component_ref): Wrap an OVERLOAD around a unique non-static member function.\n\n\t* typeck.c (build_component_ref): Wrap an OVERLOAD around a unique\n\tnon-static member function.\n        * class.c (instantiate_type): Only diagnose illegal address of member\n        function if complaining.\n        * decl.c (lookup_name_real): Remove duplicate code.\n\nFrom-SVN: r24750", "tree": {"sha": "b5e1bae7ad0d95526b10b5fcf213722a2c462da6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5e1bae7ad0d95526b10b5fcf213722a2c462da6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6f622865f1be3f5db2d521ca2fb28165fd038a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6f622865f1be3f5db2d521ca2fb28165fd038a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6f622865f1be3f5db2d521ca2fb28165fd038a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6f622865f1be3f5db2d521ca2fb28165fd038a6/comments", "author": null, "committer": null, "parents": [{"sha": "6b9b6b150929c20219227d06a968579480447c6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b9b6b150929c20219227d06a968579480447c6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b9b6b150929c20219227d06a968579480447c6b"}], "stats": {"total": 72, "additions": 48, "deletions": 24}, "files": [{"sha": "143ce6c04bc61424e38b1cb70b367202afdbbe55", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6f622865f1be3f5db2d521ca2fb28165fd038a6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6f622865f1be3f5db2d521ca2fb28165fd038a6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e6f622865f1be3f5db2d521ca2fb28165fd038a6", "patch": "@@ -1,3 +1,15 @@\n+1999-01-18  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* typeck.c (build_component_ref): Wrap an OVERLOAD around a unique\n+\tnon-static member function.\n+\n+1999-01-18  Nathan Sidwell  <nathan@acm.org>\n+\n+        * class.c (instantiate_type): Only diagnose illegal address of member\n+        function if complaining.\n+\n+        * decl.c (lookup_name_real): Remove duplicate code.\n+\n 1999-01-18  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* tree.c (copy_template_template_parm): Use permanent_obstack."}, {"sha": "2e6022bc7028a1d88147f6795de338998ad1ae91", "filename": "gcc/cp/class.c", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6f622865f1be3f5db2d521ca2fb28165fd038a6/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6f622865f1be3f5db2d521ca2fb28165fd038a6/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=e6f622865f1be3f5db2d521ca2fb28165fd038a6", "patch": "@@ -5325,19 +5325,22 @@ instantiate_type (lhstype, rhs, complain)\n \n \tif (r != error_mark_node && TYPE_PTRMEMFUNC_P (lhstype))\n \t  {\n-\t    tree t = TYPE_PTRMEMFUNC_OBJECT_TYPE (lhstype);\n-\t    tree fn = TREE_VALUE (field);\n-\t    if (TREE_CODE (fn) == OVERLOAD)\n-\t      fn = OVL_FUNCTION (fn);\n-\t    if (TREE_CODE (fn) == FUNCTION_DECL)\n+\t    if (complain)\n \t      {\n-\t\tcp_error (\"object-dependent reference `%E' can only be used in a call\",\n-\t\t\t  DECL_NAME (fn));\n-\t\tcp_error (\"  to form a pointer to member function, say `&%T::%E'\",\n-\t\t\t  t, DECL_NAME (fn));\n+\t        tree t = TYPE_PTRMEMFUNC_OBJECT_TYPE (lhstype);\n+\t        tree fn = TREE_VALUE (field);\n+\t        if (TREE_CODE (fn) == OVERLOAD)\n+\t          fn = OVL_FUNCTION (fn);\n+\t        if (TREE_CODE (fn) == FUNCTION_DECL)\n+\t          {\n+\t\t    cp_error (\"object-dependent reference `%E' can only be used in a call\",\n+\t\t    \t      DECL_NAME (fn));\n+  \t    \t    cp_error (\"  to form a pointer to member function, say `&%T::%E'\",\n+\t\t    \t      t, DECL_NAME (fn));\n+    \t          }\n+\t        else\n+\t          cp_error (\"object-dependent reference can only be used in a call\");\n \t      }\n-\t    else\n-\t      cp_error (\"object-dependent reference can only be used in a call\");\n \t    return error_mark_node;\n \t  }\n \t"}, {"sha": "bb2ef729f3ca96dff49097f611e34a0400b500b1", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6f622865f1be3f5db2d521ca2fb28165fd038a6/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6f622865f1be3f5db2d521ca2fb28165fd038a6/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=e6f622865f1be3f5db2d521ca2fb28165fd038a6", "patch": "@@ -5415,7 +5415,6 @@ lookup_name_real (name, prefer_type, nonclass, namespaces_only)\n     flags = lookup_flags (prefer_type, namespaces_only);\n \n   /* First, look in non-namespace scopes.  */\n-  val = IDENTIFIER_BINDING (name); \n   for (val = IDENTIFIER_BINDING (name); val; val = TREE_CHAIN (val))\n     {\n       if (!LOCAL_BINDING_P (val) && nonclass)"}, {"sha": "9882f764345f207d514cb31633deb81ca8c33ae5", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6f622865f1be3f5db2d521ca2fb28165fd038a6/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6f622865f1be3f5db2d521ca2fb28165fd038a6/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=e6f622865f1be3f5db2d521ca2fb28165fd038a6", "patch": "@@ -2055,21 +2055,31 @@ build_component_ref (datum, component, basetype_path, protect)\n \t\t now.  Otherwise, we have to wait and see what context it is\n \t\t used in; a component_ref involving a non-static member\n \t\t function can only be used in a call (expr.ref).  */\n+\n \t      if (TREE_CHAIN (fndecls) == NULL_TREE\n-\t\t  && TREE_CODE (TREE_VALUE (fndecls)) == FUNCTION_DECL\n-\t\t  && DECL_STATIC_FUNCTION_P (TREE_VALUE (fndecls)))\n+\t\t  && TREE_CODE (TREE_VALUE (fndecls)) == FUNCTION_DECL)\n \t\t{\n-\t\t  tree fndecl = TREE_VALUE (fndecls);\n-\t\t  enforce_access (TREE_PURPOSE (fndecls), fndecl);\n-\t\t  mark_used (fndecl);\n-\t\t  return fndecl;\n-\t\t}\n-\t      else\n-\t\t{\n-\t\t  ref = build (COMPONENT_REF, unknown_type_node,\n-\t\t\t       datum, fndecls);\n-\t\t  return ref;\n+\t\t  if (DECL_STATIC_FUNCTION_P (TREE_VALUE (fndecls)))\n+\t\t    {\n+\t\t      tree fndecl = TREE_VALUE (fndecls);\n+\t\t      enforce_access (TREE_PURPOSE (fndecls), fndecl);\n+\t\t      mark_used (fndecl);\n+\t\t      return fndecl;\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      /* A unique non-static member function.  Other parts\n+\t\t\t of the compiler expect something with\n+\t\t\t unknown_type_node to be really overloaded, so\n+\t\t\t let's oblige.  */\n+\t\t      TREE_VALUE (fndecls)\n+\t\t\t= scratch_ovl_cons (TREE_VALUE (fndecls), NULL_TREE);\n+\t\t    }\n \t\t}\n+\n+\t      ref = build (COMPONENT_REF, unknown_type_node,\n+\t\t\t   datum, fndecls);\n+\t      return ref;\n \t    }\n \n \t  cp_error (\"`%#T' has no member named `%D'\", basetype, name);"}]}