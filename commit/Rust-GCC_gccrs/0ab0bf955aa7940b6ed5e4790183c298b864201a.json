{"sha": "0ab0bf955aa7940b6ed5e4790183c298b864201a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGFiMGJmOTU1YWE3OTQwYjZlZDVlNDc5MDE4M2MyOThiODY0MjAxYQ==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2015-11-23T11:20:34Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@gcc.gnu.org", "date": "2015-11-23T11:20:34Z"}, "message": "opt.ads (Exception_Mechanism): Now three values: Front_End_SJLJ, Back_End_SJLJ and Back_End_ZCX.\n\n2015-11-23  Olivier Hainque  <hainque@adacore.com>\n\t    Eric Botcazou  <botcazou@adacore.com>\n\n\t* opt.ads (Exception_Mechanism): Now three values: Front_End_SJLJ,\n\tBack_End_SJLJ and Back_End_ZCX.\n\t(Back_End_Exceptions, Front_End_Exceptions, ZCX_Exceptions,\n\tSJLJ_Exceptions): New functions, reflecting properties of the current\n\tException_Mechanism.\n\t* opt.adb: Implement the new functions.\n\t* fe.h: Bind the new Exception_Mechanism and helper functions for gigi.\n\n\t* exp_ch11.adb (Expand_At_End_Handler): Replace test on mechanism by\n\tuse of property helper and update comments.\n\t(Expand_Exception_Handlers): Replace tests on mechanism by use of\n\thelper. Restrict Abort_Defer to ZCX specifically.\n\t* exp_ch9.adb (Expand_N_Asynchronous_Select): Replace tests on\n\tmechanism by calls to helper functions. Abort_Undefer for ZCX only,\n\tpaired with Expand_Exception_Handlers.\n\t* exp_sel.adb (Build_Abort_Block_Handler): Replace tests on mechanism\n\tby calls to helper functions. Abort_Undefer for ZCX only, paired with\n\tExpand_Exception_Handlers.\n\n\t* lib-writ.ads (P line documentation): Add entry for \"FX\",\n\trepresentative of unit compiled with Frontend_Exceptions True.\n\t* lib-writ.adb (Output_Main_Program_Line): Add \"FX\" on P line if\n\tcompiled with Frontend_Exceptions True.\n\n\t* ali.ads (ALIs_Record): Ada a Frontend_Exceptions component, to reflect\n\twhether the ALI file contained an \"FX\" indication on the P line.\n\t(Frontend_Exceptions_Specified): New boolean, to keep track of whether\n\tat least an FX ALI file is in the closure.\n\t* ali.adb (Scan_ALI): Handle \"FX\" on the P line.\n\t(Initialize_ALI): Initialize Frontend_Exceptions_Specified to False.\n\n\t* targparm.ads: Update desription of exception schemes.\n\t(Frontend_Exceptions_On_Target): New flag, reflect Frontend_Exceptions\n\tset to True in system.ads, or not set at all.\n\t* targparm.adb (Targparm_Tags): Add FEX to convey Frontend_Exceptions.\n\tRename ZCD to ZCX for consistency.\n\t(FEX_Str, Targparm_Str, Get_Target_Parameters): Adjust accordingly.\n\n\t* gnat1drv.adb (Adjust_Global_Switches): Adjust Exception_Mechanism\n\tsetting, now from combination of Frontend_Exceptions and ZCX_By_Default.\n\n\t* bcheck.adb (Check_Consistent_Zero_Cost_Exception_Handling): Rename\n\tas ...\n\t(Check_Consistent_Exception_Handling): Check consistency of both\n\tZCX_By_Default and Frontend_Exceptions.\n\t(Check_Configuration_Consistency): Check_Consistent_Exception_Handling\n\tif either flag was set at least once.\n\n\t* make.adb (Check): Remove processing of a possible -fsjlj coming from\n\tlang-specs.h.\n\t* gnatlink.adb (Gnatlin): Likewise.\n\n\t* gcc-interface/Makefile.in (gnatlib-sjlj/zcx): Now set\n\tboth ZCX_By_Default and Frontend_Exceptions.\n\t* gcc-interface/decl.c (gnat_to_gnu_entity, case E_Variable):\n\tUse eh property helper to test for back-end exceptions. Adjust\n\tmechanism name when testing for front-end sjlj.\n\t(case E_Procedure): Likewise.\n\t* gcc-interface/trans.c (Handled_Sequence_Of_Statements_to_gnu):\n\tLikewise, and rename local variables.\n\t(Exception_Handler_to_gnu_sjlj): Rename as\n\tException_Handler_to_gnu_fe_sjlj.\n\t(Exception_Handler_to_gnu_zcx): Rename as\n\tException_Handler_to_gnu_gcc and adjust tests on eh mechanisms\n\tto use property helpers or correct mechanism name.\n\n\nCo-Authored-By: Eric Botcazou <ebotcazou@adacore.com>\n\nFrom-SVN: r230752", "tree": {"sha": "267b1724f61677cc6d135ffc9cc85a5cab60ec2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/267b1724f61677cc6d135ffc9cc85a5cab60ec2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ab0bf955aa7940b6ed5e4790183c298b864201a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ab0bf955aa7940b6ed5e4790183c298b864201a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ab0bf955aa7940b6ed5e4790183c298b864201a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ab0bf955aa7940b6ed5e4790183c298b864201a/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f119bebb36fc3680e94123630f57357d1ae571f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f119bebb36fc3680e94123630f57357d1ae571f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f119bebb36fc3680e94123630f57357d1ae571f6"}], "stats": {"total": 425, "additions": 298, "deletions": 127}, "files": [{"sha": "ddbb58aff6a0cc37a2ac8786e2d811daa4f876e5", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ab0bf955aa7940b6ed5e4790183c298b864201a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ab0bf955aa7940b6ed5e4790183c298b864201a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0ab0bf955aa7940b6ed5e4790183c298b864201a", "patch": "@@ -1,3 +1,72 @@\n+2015-11-23  Olivier Hainque  <hainque@adacore.com>\n+\t    Eric Botcazou  <botcazou@adacore.com>\n+\n+\t* opt.ads (Exception_Mechanism): Now three values: Front_End_SJLJ,\n+\tBack_End_SJLJ and Back_End_ZCX.\n+\t(Back_End_Exceptions, Front_End_Exceptions, ZCX_Exceptions,\n+\tSJLJ_Exceptions): New functions, reflecting properties of the current\n+\tException_Mechanism.\n+\t* opt.adb: Implement the new functions.\n+\t* fe.h: Bind the new Exception_Mechanism and helper functions for gigi.\n+\n+\t* exp_ch11.adb (Expand_At_End_Handler): Replace test on mechanism by\n+\tuse of property helper and update comments.\n+\t(Expand_Exception_Handlers): Replace tests on mechanism by use of\n+\thelper. Restrict Abort_Defer to ZCX specifically.\n+\t* exp_ch9.adb (Expand_N_Asynchronous_Select): Replace tests on\n+\tmechanism by calls to helper functions. Abort_Undefer for ZCX only,\n+\tpaired with Expand_Exception_Handlers.\n+\t* exp_sel.adb (Build_Abort_Block_Handler): Replace tests on mechanism\n+\tby calls to helper functions. Abort_Undefer for ZCX only, paired with\n+\tExpand_Exception_Handlers.\n+\n+\t* lib-writ.ads (P line documentation): Add entry for \"FX\",\n+\trepresentative of unit compiled with Frontend_Exceptions True.\n+\t* lib-writ.adb (Output_Main_Program_Line): Add \"FX\" on P line if\n+\tcompiled with Frontend_Exceptions True.\n+\n+\t* ali.ads (ALIs_Record): Ada a Frontend_Exceptions component, to reflect\n+\twhether the ALI file contained an \"FX\" indication on the P line.\n+\t(Frontend_Exceptions_Specified): New boolean, to keep track of whether\n+\tat least an FX ALI file is in the closure.\n+\t* ali.adb (Scan_ALI): Handle \"FX\" on the P line.\n+\t(Initialize_ALI): Initialize Frontend_Exceptions_Specified to False.\n+\n+\t* targparm.ads: Update desription of exception schemes.\n+\t(Frontend_Exceptions_On_Target): New flag, reflect Frontend_Exceptions\n+\tset to True in system.ads, or not set at all.\n+\t* targparm.adb (Targparm_Tags): Add FEX to convey Frontend_Exceptions.\n+\tRename ZCD to ZCX for consistency.\n+\t(FEX_Str, Targparm_Str, Get_Target_Parameters): Adjust accordingly.\n+\n+\t* gnat1drv.adb (Adjust_Global_Switches): Adjust Exception_Mechanism\n+\tsetting, now from combination of Frontend_Exceptions and ZCX_By_Default.\n+\n+\t* bcheck.adb (Check_Consistent_Zero_Cost_Exception_Handling): Rename\n+\tas ...\n+\t(Check_Consistent_Exception_Handling): Check consistency of both\n+\tZCX_By_Default and Frontend_Exceptions.\n+\t(Check_Configuration_Consistency): Check_Consistent_Exception_Handling\n+\tif either flag was set at least once.\n+\n+\t* make.adb (Check): Remove processing of a possible -fsjlj coming from\n+\tlang-specs.h.\n+\t* gnatlink.adb (Gnatlin): Likewise.\n+\n+\t* gcc-interface/Makefile.in (gnatlib-sjlj/zcx): Now set\n+\tboth ZCX_By_Default and Frontend_Exceptions.\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity, case E_Variable):\n+\tUse eh property helper to test for back-end exceptions. Adjust\n+\tmechanism name when testing for front-end sjlj.\n+\t(case E_Procedure): Likewise.\n+\t* gcc-interface/trans.c (Handled_Sequence_Of_Statements_to_gnu):\n+\tLikewise, and rename local variables.\n+\t(Exception_Handler_to_gnu_sjlj): Rename as\n+\tException_Handler_to_gnu_fe_sjlj.\n+\t(Exception_Handler_to_gnu_zcx): Rename as\n+\tException_Handler_to_gnu_gcc and adjust tests on eh mechanisms\n+\tto use property helpers or correct mechanism name.\n+\n 2015-11-19  Bob Duff  <duff@adacore.com>\n \n \t* sem_elab.adb (Check_Internal_Call_Continue): Correction to previous"}, {"sha": "d07b3df781a125b107c4d24aa19d65734cb79b0d", "filename": "gcc/ada/ali.adb", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ab0bf955aa7940b6ed5e4790183c298b864201a/gcc%2Fada%2Fali.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ab0bf955aa7940b6ed5e4790183c298b864201a/gcc%2Fada%2Fali.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fali.adb?ref=0ab0bf955aa7940b6ed5e4790183c298b864201a", "patch": "@@ -119,6 +119,7 @@ package body ALI is\n       Static_Elaboration_Model_Used          := False;\n       Task_Dispatching_Policy_Specified      := ' ';\n       Unreserve_All_Interrupts_Specified     := False;\n+      Frontend_Exceptions_Specified          := False;\n       Zero_Cost_Exceptions_Specified         := False;\n    end Initialize_ALI;\n \n@@ -900,6 +901,7 @@ package body ALI is\n         Unit_Exception_Table         => False,\n         Ver                          => (others => ' '),\n         Ver_Len                      => 0,\n+        Frontend_Exceptions          => False,\n         Zero_Cost_Exceptions         => False);\n \n       --  Now we acquire the input lines from the ALI file. Note that the\n@@ -1091,6 +1093,18 @@ package body ALI is\n                ALIs.Table (Id).Partition_Elaboration_Policy :=\n                  Partition_Elaboration_Policy_Specified;\n \n+            --  Processing for FX\n+\n+            elsif C = 'F' then\n+               C := Getc;\n+\n+               if C = 'X' then\n+                  ALIs.Table (Id).Frontend_Exceptions := True;\n+                  Frontend_Exceptions_Specified := True;\n+               else\n+                  Fatal_Error_Ignore;\n+               end if;\n+\n             --  Processing for GP\n \n             elsif C = 'G' then"}, {"sha": "96f6bd55a9d3f68fb02aa80f81e4e1c77cdbaf8c", "filename": "gcc/ada/ali.ads", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ab0bf955aa7940b6ed5e4790183c298b864201a/gcc%2Fada%2Fali.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ab0bf955aa7940b6ed5e4790183c298b864201a/gcc%2Fada%2Fali.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fali.ads?ref=0ab0bf955aa7940b6ed5e4790183c298b864201a", "patch": "@@ -199,6 +199,10 @@ package ALI is\n       --  Set to True if unit exception table pointer generated. Not set if 'P'\n       --  appears in Ignore_Lines.\n \n+      Frontend_Exceptions : Boolean;\n+      --  Set to True if file was compiled with front-end exceptions. Not set\n+      --  if 'P' appears in Ignore_Lines.\n+\n       Zero_Cost_Exceptions : Boolean;\n       --  Set to True if file was compiled with zero cost exceptions. Not set\n       --  if 'P' appears in Ignore_Lines.\n@@ -474,6 +478,10 @@ package ALI is\n    --  Set to False by Initialize_ALI. Set to True if Scan_ALI reads\n    --  a unit for which dynamic elaboration checking is enabled.\n \n+   Frontend_Exceptions_Specified : Boolean := False;\n+   --  Set to False by Initialize_ALI. Set to True if an ali file is read that\n+   --  has a P line specifying the generation of front-end exceptions.\n+\n    GNATprove_Mode_Specified : Boolean := False;\n    --  Set to True if an ali file was produced in GNATprove mode.\n "}, {"sha": "fcfb2f489bfebc8350eaf17726bb1c1b20d4d26d", "filename": "gcc/ada/bcheck.adb", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ab0bf955aa7940b6ed5e4790183c298b864201a/gcc%2Fada%2Fbcheck.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ab0bf955aa7940b6ed5e4790183c298b864201a/gcc%2Fada%2Fbcheck.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbcheck.adb?ref=0ab0bf955aa7940b6ed5e4790183c298b864201a", "patch": "@@ -56,7 +56,7 @@ package body Bcheck is\n    procedure Check_Consistent_Restrictions;\n    procedure Check_Consistent_Restriction_No_Default_Initialization;\n    procedure Check_Consistent_SSO_Default;\n-   procedure Check_Consistent_Zero_Cost_Exception_Handling;\n+   procedure Check_Consistent_Exception_Handling;\n \n    procedure Consistency_Error_Msg (Msg : String);\n    --  Produce an error or a warning message, depending on whether an\n@@ -88,8 +88,10 @@ package body Bcheck is\n          Check_Consistent_SSO_Default;\n       end if;\n \n-      if Zero_Cost_Exceptions_Specified then\n-         Check_Consistent_Zero_Cost_Exception_Handling;\n+      if Zero_Cost_Exceptions_Specified\n+        or else Frontend_Exceptions_Specified\n+      then\n+         Check_Consistent_Exception_Handling;\n       end if;\n \n       Check_Consistent_Normalize_Scalars;\n@@ -1164,18 +1166,20 @@ package body Bcheck is\n       end loop;\n    end Check_Consistent_SSO_Default;\n \n-   ---------------------------------------------------\n-   -- Check_Consistent_Zero_Cost_Exception_Handling --\n-   ---------------------------------------------------\n+   -----------------------------------------\n+   -- Check_Consistent_Exception_Handling --\n+   -----------------------------------------\n \n-   --  Check consistent zero cost exception handling. The rule is that\n-   --  all units must have the same exception handling mechanism.\n+   --  All units must have the same exception handling mechanism.\n \n-   procedure Check_Consistent_Zero_Cost_Exception_Handling is\n+   procedure Check_Consistent_Exception_Handling is\n    begin\n       Check_Mechanism : for A1 in ALIs.First + 1 .. ALIs.Last loop\n-         if ALIs.Table (A1).Zero_Cost_Exceptions /=\n-            ALIs.Table (ALIs.First).Zero_Cost_Exceptions\n+         if (ALIs.Table (A1).Zero_Cost_Exceptions /=\n+             ALIs.Table (ALIs.First).Zero_Cost_Exceptions)\n+           or else\n+            (ALIs.Table (A1).Frontend_Exceptions /=\n+             ALIs.Table (ALIs.First).Frontend_Exceptions)\n          then\n             Error_Msg_File_1 := ALIs.Table (A1).Sfile;\n             Error_Msg_File_2 := ALIs.Table (ALIs.First).Sfile;\n@@ -1184,7 +1188,7 @@ package body Bcheck is\n                                             & \"exception handling mechanisms\");\n          end if;\n       end loop Check_Mechanism;\n-   end Check_Consistent_Zero_Cost_Exception_Handling;\n+   end Check_Consistent_Exception_Handling;\n \n    -------------------------------\n    -- Check_Duplicated_Subunits --"}, {"sha": "89dd350ffbacc21f46d4f9b931053c804515cc9e", "filename": "gcc/ada/exp_ch11.adb", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ab0bf955aa7940b6ed5e4790183c298b864201a/gcc%2Fada%2Fexp_ch11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ab0bf955aa7940b6ed5e4790183c298b864201a/gcc%2Fada%2Fexp_ch11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch11.adb?ref=0ab0bf955aa7940b6ed5e4790183c298b864201a", "patch": "@@ -116,9 +116,10 @@ package body Exp_Ch11 is\n       pragma Assert (Present (Clean));\n       pragma Assert (No (Exception_Handlers (HSS)));\n \n-      --  Don't expand if back end exception handling active\n+      --  Back end exception schemes don't need explicit handlers to\n+      --  trigger AT-END actions on exceptional paths.\n \n-      if Exception_Mechanism = Back_End_Exceptions then\n+      if Back_End_Exceptions then\n          return;\n       end if;\n \n@@ -1025,11 +1026,12 @@ package body Exp_Ch11 is\n                --        ...\n                --     end;\n \n-               --  This expansion is not performed when using GCC ZCX. Gigi\n-               --  will insert a call to initialize the choice parameter.\n+               --  This expansion is only performed when using front-end\n+               --  exceptions. Gigi will insert a call to initialize the\n+               --  choice parameter.\n \n                if Present (Choice_Parameter (Handler))\n-                 and then (Exception_Mechanism /= Back_End_Exceptions\n+                 and then (Front_End_Exceptions\n                             or else CodePeer_Mode)\n                then\n                   declare\n@@ -1102,7 +1104,7 @@ package body Exp_Ch11 is\n                --  are allowed.\n \n                if Abort_Allowed\n-                 and then Exception_Mechanism /= Back_End_Exceptions\n+                 and then not ZCX_Exceptions\n                then\n                   --  There are some special cases in which we do not do the\n                   --  undefer. In particular a finalization (AT END) handler\n@@ -1719,7 +1721,7 @@ package body Exp_Ch11 is\n          --  code which can be formally analyzed.\n \n          if not CodePeer_Mode\n-           and then Exception_Mechanism = Back_End_Exceptions\n+           and then Back_End_Exceptions\n          then\n             return;\n          end if;"}, {"sha": "11294ed53270f101c3ccd8bb1711bdee289c0bd8", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ab0bf955aa7940b6ed5e4790183c298b864201a/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ab0bf955aa7940b6ed5e4790183c298b864201a/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=0ab0bf955aa7940b6ed5e4790183c298b864201a", "patch": "@@ -7785,9 +7785,9 @@ package body Exp_Ch9 is\n              Is_Asynchronous_Call_Block => True);\n \n          --  Aborts are not deferred at beginning of exception handlers in\n-         --  ZCX.\n+         --  ZCX mode.\n \n-         if Exception_Mechanism = Back_End_Exceptions then\n+         if ZCX_Exceptions then\n             Handler_Stmt := Make_Null_Statement (Loc);\n \n          else"}, {"sha": "06895d7e37b20684e9cb33d3f192f54129d9c09c", "filename": "gcc/ada/exp_sel.adb", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ab0bf955aa7940b6ed5e4790183c298b864201a/gcc%2Fada%2Fexp_sel.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ab0bf955aa7940b6ed5e4790183c298b864201a/gcc%2Fada%2Fexp_sel.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_sel.adb?ref=0ab0bf955aa7940b6ed5e4790183c298b864201a", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -73,15 +73,14 @@ package body Exp_Sel is\n       Stmt : Node_Id;\n \n    begin\n-      if Exception_Mechanism = Back_End_Exceptions then\n \n-         --  With ZCX, aborts are not defered in handlers\n+      --  With ZCX exceptions, aborts are not defered in handlers. With SJLJ,\n+      --  they are deferred at the beginning of Abort_Signal handlers.\n \n+      if ZCX_Exceptions then\n          Stmt := Make_Null_Statement (Loc);\n-      else\n-         --  With FE SJLJ, aborts are defered at the beginning of Abort_Signal\n-         --  handlers.\n \n+      else\n          Stmt :=\n            Make_Procedure_Call_Statement (Loc,\n              Name => New_Occurrence_Of (RTE (RE_Abort_Undefer), Loc),"}, {"sha": "e9c37217e95624b39df3f560425dcd13aebaae50", "filename": "gcc/ada/fe.h", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ab0bf955aa7940b6ed5e4790183c298b864201a/gcc%2Fada%2Ffe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ab0bf955aa7940b6ed5e4790183c298b864201a/gcc%2Fada%2Ffe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffe.h?ref=0ab0bf955aa7940b6ed5e4790183c298b864201a", "patch": "@@ -178,7 +178,9 @@ extern Boolean In_Same_Source_Unit              (Node_Id, Node_Id);\n #define List_Representation_Info       opt__list_representation_info\n #define No_Strict_Aliasing_CP          opt__no_strict_aliasing\n \n-typedef enum {Setjmp_Longjmp, Back_End_Exceptions} Exception_Mechanism_Type;\n+typedef enum {\n+  Front_End_SJLJ, Back_End_ZCX, Back_End_SJLJ\n+} Exception_Mechanism_Type;\n \n extern Boolean Back_End_Inlining;\n extern Boolean Exception_Extra_Info;\n@@ -190,6 +192,16 @@ extern Boolean GNAT_Mode;\n extern Int List_Representation_Info;\n extern Boolean No_Strict_Aliasing_CP;\n \n+#define ZCX_Exceptions            opt__zcx_exceptions\n+#define SJLJ_Exceptions           opt__sjlj_exceptions\n+#define Front_End_Exceptions      opt__front_end_exceptions\n+#define Back_End_Exceptions       opt__back_end_exceptions\n+\n+extern Boolean ZCX_Exceptions       (void);\n+extern Boolean SJLJ_Exceptions      (void);\n+extern Boolean Front_End_Exceptions (void);\n+extern Boolean Back_End_Exceptions  (void);\n+\n /* restrict: */\n \n #define No_Exception_Handlers_Set      restrict__no_exception_handlers_set"}, {"sha": "d217a790e7be2232209a15d95eb4f8bb32612a51", "filename": "gcc/ada/gcc-interface/Makefile.in", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ab0bf955aa7940b6ed5e4790183c298b864201a/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ab0bf955aa7940b6ed5e4790183c298b864201a/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMakefile.in?ref=0ab0bf955aa7940b6ed5e4790183c298b864201a", "patch": "@@ -3008,10 +3008,12 @@ gnatlib-shared:\n gnatlib-sjlj:\n \t$(MAKE) $(FLAGS_TO_PASS) EH_MECHANISM=\"\" \\\n \tTHREAD_KIND=\"$(THREAD_KIND)\" ../stamp-gnatlib1-$(RTSDIR)\n-\tsed -e 's/ZCX_By_Default.*/ZCX_By_Default            : constant Boolean := False;/' $(RTSDIR)/system.ads > $(RTSDIR)/s.ads\n-\tsed -e 's/\\(pragma Linker.*crtbe.*\\)/--  \\1/' $(RTSDIR)/s.ads > $(RTSDIR)/s2.ads\n-\t$(RM) $(RTSDIR)/s.ads\n-\t$(MV) $(RTSDIR)/s2.ads $(RTSDIR)/system.ads\n+\tsed \\\n+\t  -e 's/Frontend_Exceptions.*/Frontend_Exceptions       : constant Boolean := True;/' \\\n+\t  -e 's/ZCX_By_Default.*/ZCX_By_Default            : constant Boolean := False;/' \\\n+\t  -e 's/\\(pragma Linker.*crtbe.*\\)/--  \\1/' \\\n+\t  $(RTSDIR)/system.ads > $(RTSDIR)/s.ads\n+\t$(MV) $(RTSDIR)/s.ads $(RTSDIR)/system.ads\n \t$(MAKE) $(FLAGS_TO_PASS) \\\n \t     EH_MECHANISM=\"\" \\\n \t     GNATLIBFLAGS=\"$(GNATLIBFLAGS)\" \\\n@@ -3025,7 +3027,10 @@ gnatlib-sjlj:\n gnatlib-zcx:\n \t$(MAKE) $(FLAGS_TO_PASS) EH_MECHANISM=\"-gcc\" \\\n \t  THREAD_KIND=\"$(THREAD_KIND)\" ../stamp-gnatlib1-$(RTSDIR)\n-\tsed -e 's/ZCX_By_Default.*/ZCX_By_Default            : constant Boolean := True;/' $(RTSDIR)/system.ads > $(RTSDIR)/s.ads\n+\tsed \\\n+\t  -e 's/Frontend_Exceptions.*/Frontend_Exceptions       : constant Boolean := False;/' \\\n+\t  -e 's/ZCX_By_Default.*/ZCX_By_Default            : constant Boolean := True;/' \\\n+\t  $(RTSDIR)/system.ads > $(RTSDIR)/s.ads\n \t$(MV) $(RTSDIR)/s.ads $(RTSDIR)/system.ads\n \t$(MAKE) $(FLAGS_TO_PASS) \\\n \t     EH_MECHANISM=\"-gcc\" \\"}, {"sha": "e3284378aaf51b4fee76d5262f675ba1d5d7bc70", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ab0bf955aa7940b6ed5e4790183c298b864201a/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ab0bf955aa7940b6ed5e4790183c298b864201a/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=0ab0bf955aa7940b6ed5e4790183c298b864201a", "patch": "@@ -1501,7 +1501,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t   exception handler, and we aren't using the GCC exception mechanism,\n \t   we must force this variable in memory in order to avoid an invalid\n \t   optimization.  */\n-\tif (Exception_Mechanism != Back_End_Exceptions\n+\tif (Front_End_Exceptions ()\n \t    && Has_Nested_Block_With_Handler (Scope (gnat_entity)))\n \t  TREE_ADDRESSABLE (gnu_decl) = 1;\n \n@@ -1520,9 +1520,10 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \n \t/* If we are defining an object with variable size or an object with\n \t   fixed size that will be dynamically allocated, and we are using the\n-\t   setjmp/longjmp exception mechanism, update the setjmp buffer.  */\n+\t   front-end setjmp/longjmp exception mechanism, update the setjmp\n+\t   buffer.  */\n \tif (definition\n-\t    && Exception_Mechanism == Setjmp_Longjmp\n+\t    && Exception_Mechanism == Front_End_SJLJ\n \t    && get_block_jmpbuf_decl ()\n \t    && DECL_SIZE_UNIT (gnu_decl)\n \t    && (TREE_CODE (DECL_SIZE_UNIT (gnu_decl)) != INTEGER_CST\n@@ -4099,7 +4100,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n           trigger an \"abnormal\" transfer of control flow; thus they can be\n           neither \"const\" nor \"pure\" in the back-end sense.  */\n \tbool const_flag\n-\t  = (Exception_Mechanism == Back_End_Exceptions\n+\t  = (Back_End_Exceptions ()\n \t     && Is_Pure (gnat_entity));\n \tbool noreturn_flag = No_Return (gnat_entity);\n \tbool return_by_direct_ref_p = false;"}, {"sha": "8cfa1a26dcc10323872bc710739725e4540f69dc", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 26, "deletions": 25, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ab0bf955aa7940b6ed5e4790183c298b864201a/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ab0bf955aa7940b6ed5e4790183c298b864201a/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=0ab0bf955aa7940b6ed5e4790183c298b864201a", "patch": "@@ -646,7 +646,7 @@ gigi (Node_Id gnat_root,\n       (TREE_STRING_POINTER (gnat_to_gnu (Ident_String (Main_Unit))));\n \n   /* If we are using the GCC exception mechanism, let GCC know.  */\n-  if (Exception_Mechanism == Back_End_Exceptions)\n+  if (Back_End_Exceptions ())\n     gnat_init_gcc_eh ();\n \n   /* Initialize the GCC support for FP operations.  */\n@@ -4923,14 +4923,14 @@ Handled_Sequence_Of_Statements_to_gnu (Node_Id gnat_node)\n   tree gnu_jmpsave_decl = NULL_TREE;\n   tree gnu_jmpbuf_decl = NULL_TREE;\n   /* If just annotating, ignore all EH and cleanups.  */\n-  bool gcc_zcx = (!type_annotate_only\n-\t\t  && Present (Exception_Handlers (gnat_node))\n-\t\t  && Exception_Mechanism == Back_End_Exceptions);\n-  bool setjmp_longjmp\n+  bool gcc_eh = (!type_annotate_only\n+                 && Present (Exception_Handlers (gnat_node))\n+                 && Back_End_Exceptions ());\n+  bool fe_sjlj\n     = (!type_annotate_only && Present (Exception_Handlers (gnat_node))\n-       && Exception_Mechanism == Setjmp_Longjmp);\n+       && Exception_Mechanism == Front_End_SJLJ);\n   bool at_end = !type_annotate_only && Present (At_End_Proc (gnat_node));\n-  bool binding_for_block = (at_end || gcc_zcx || setjmp_longjmp);\n+  bool binding_for_block = (at_end || gcc_eh || fe_sjlj);\n   tree gnu_inner_block; /* The statement(s) for the block itself.  */\n   tree gnu_result;\n   tree gnu_expr;\n@@ -4953,17 +4953,17 @@ Handled_Sequence_Of_Statements_to_gnu (Node_Id gnat_node)\n      condition to make it not ZCX specific.\n \n      If there are any exceptions or cleanup processing involved, we need an\n-     outer statement group (for Setjmp_Longjmp) and binding level.  */\n+     outer statement group (for Fe_Sjlj) and binding level.  */\n   if (binding_for_block)\n     {\n       start_stmt_group ();\n       gnat_pushlevel ();\n     }\n \n-  /* If using setjmp_longjmp, make the variables for the setjmp buffer and save\n+  /* If using fe_sjlj, make the variables for the setjmp buffer and save\n      area for address of previous buffer.  Do this first since we need to have\n      the setjmp buf known for any decls in this block.  */\n-  if (setjmp_longjmp)\n+  if (fe_sjlj)\n     {\n       gnu_jmpsave_decl\n \t= create_var_decl (get_identifier (\"JMPBUF_SAVE\"), NULL_TREE,\n@@ -4973,7 +4973,7 @@ Handled_Sequence_Of_Statements_to_gnu (Node_Id gnat_node)\n \t\t\t   NULL, gnat_node);\n \n       /* The __builtin_setjmp receivers will immediately reinstall it.  Now\n-\t because of the unstructured form of EH used by setjmp_longjmp, there\n+\t because of the unstructured form of EH used by fe_sjlj, there\n \t might be forward edges going to __builtin_setjmp receivers on which\n \t it is uninitialized, although they will never be actually taken.  */\n       TREE_NO_WARNING (gnu_jmpsave_decl) = 1;\n@@ -5008,7 +5008,7 @@ Handled_Sequence_Of_Statements_to_gnu (Node_Id gnat_node)\n      If this is SJLJ, set our jmp_buf as the current buffer.  */\n   start_stmt_group ();\n \n-  if (setjmp_longjmp)\n+  if (fe_sjlj)\n     {\n       gnu_expr = build_call_n_expr (set_jmpbuf_decl, 1,\n \t\t\t\t    build_unary_op (ADDR_EXPR, NULL_TREE,\n@@ -5031,7 +5031,7 @@ Handled_Sequence_Of_Statements_to_gnu (Node_Id gnat_node)\n \n   /* Now generate code for the two exception models, if either is relevant for\n      this block.  */\n-  if (setjmp_longjmp)\n+  if (fe_sjlj)\n     {\n       tree *gnu_else_ptr = 0;\n       tree gnu_handler;\n@@ -5103,7 +5103,7 @@ Handled_Sequence_Of_Statements_to_gnu (Node_Id gnat_node)\n \t\t\t\t\t     gnu_jmpbuf_decl))),\n \t\t\t   gnu_handler, gnu_inner_block);\n     }\n-  else if (gcc_zcx)\n+  else if (gcc_eh)\n     {\n       tree gnu_handlers;\n       location_t locus;\n@@ -5147,11 +5147,11 @@ Handled_Sequence_Of_Statements_to_gnu (Node_Id gnat_node)\n }\n \f\n /* Subroutine of gnat_to_gnu to translate gnat_node, an N_Exception_Handler,\n-   to a GCC tree, which is returned.  This is the variant for Setjmp_Longjmp\n+   to a GCC tree, which is returned.  This is the variant for front-end sjlj\n    exception handling.  */\n \n static tree\n-Exception_Handler_to_gnu_sjlj (Node_Id gnat_node)\n+Exception_Handler_to_gnu_fe_sjlj (Node_Id gnat_node)\n {\n   /* Unless this is \"Others\" or the special \"Non-Ada\" exception for Ada, make\n      an \"if\" statement to select the proper exceptions.  For \"Others\", exclude\n@@ -5216,10 +5216,11 @@ Exception_Handler_to_gnu_sjlj (Node_Id gnat_node)\n }\n \f\n /* Subroutine of gnat_to_gnu to translate gnat_node, an N_Exception_Handler,\n-   to a GCC tree, which is returned.  This is the variant for ZCX.  */\n+   to a GCC tree, which is returned.  This is the variant for GCC exception\n+   schemes.  */\n \n static tree\n-Exception_Handler_to_gnu_zcx (Node_Id gnat_node)\n+Exception_Handler_to_gnu_gcc (Node_Id gnat_node)\n {\n   tree gnu_etypes_list = NULL_TREE;\n   tree gnu_current_exc_ptr, prev_gnu_incoming_exc_ptr;\n@@ -7294,10 +7295,10 @@ gnat_to_gnu (Node_Id gnat_node)\n \n     case N_Handled_Sequence_Of_Statements:\n       /* If there is an At_End procedure attached to this node, and the EH\n-\t mechanism is SJLJ, we must have at least a corresponding At_End\n+\t mechanism is front-end, we must have at least a corresponding At_End\n \t handler, unless the No_Exception_Handlers restriction is set.  */\n       gcc_assert (type_annotate_only\n-\t\t  || Exception_Mechanism != Setjmp_Longjmp\n+\t\t  || !Front_End_Exceptions ()\n \t\t  || No (At_End_Proc (gnat_node))\n \t\t  || Present (Exception_Handlers (gnat_node))\n \t\t  || No_Exception_Handlers_Set ());\n@@ -7306,18 +7307,18 @@ gnat_to_gnu (Node_Id gnat_node)\n       break;\n \n     case N_Exception_Handler:\n-      if (Exception_Mechanism == Setjmp_Longjmp)\n-\tgnu_result = Exception_Handler_to_gnu_sjlj (gnat_node);\n-      else if (Exception_Mechanism == Back_End_Exceptions)\n-\tgnu_result = Exception_Handler_to_gnu_zcx (gnat_node);\n+      if (Exception_Mechanism == Front_End_SJLJ)\n+\tgnu_result = Exception_Handler_to_gnu_fe_sjlj (gnat_node);\n+      else if (Back_End_Exceptions ())\n+\tgnu_result = Exception_Handler_to_gnu_gcc (gnat_node);\n       else\n \tgcc_unreachable ();\n       break;\n \n     case N_Raise_Statement:\n       /* Only for reraise in back-end exceptions mode.  */\n       gcc_assert (No (Name (gnat_node))\n-\t\t  && Exception_Mechanism == Back_End_Exceptions);\n+                  && Back_End_Exceptions ());\n \n       start_stmt_group ();\n       gnat_pushlevel ();"}, {"sha": "b8ea58595ed6822af5e2073523c95156693f2ae8", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ab0bf955aa7940b6ed5e4790183c298b864201a/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ab0bf955aa7940b6ed5e4790183c298b864201a/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=0ab0bf955aa7940b6ed5e4790183c298b864201a", "patch": "@@ -527,9 +527,26 @@ procedure Gnat1drv is\n \n       --  Set and check exception mechanism\n \n-      if Targparm.ZCX_By_Default_On_Target then\n-         Exception_Mechanism := Back_End_Exceptions;\n-      end if;\n+      case Targparm.Frontend_Exceptions_On_Target is\n+         when True =>\n+            case Targparm.ZCX_By_Default_On_Target is\n+               when True =>\n+                  Write_Line\n+                    (\"Run-time library configured incorrectly\");\n+                  Write_Line\n+                    (\"(requesting support for Frontend ZCX exceptions)\");\n+                  raise Unrecoverable_Error;\n+               when False =>\n+                  Exception_Mechanism := Front_End_SJLJ;\n+            end case;\n+         when False =>\n+            case Targparm.ZCX_By_Default_On_Target is\n+               when True =>\n+                  Exception_Mechanism := Back_End_ZCX;\n+               when False =>\n+                  Exception_Mechanism := Back_End_SJLJ;\n+            end case;\n+      end case;\n \n       --  Set proper status for overflow check mechanism\n "}, {"sha": "67b07b23e3cff61474717620ff3a68ac04094e41", "filename": "gcc/ada/gnatlink.adb", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ab0bf955aa7940b6ed5e4790183c298b864201a/gcc%2Fada%2Fgnatlink.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ab0bf955aa7940b6ed5e4790183c298b864201a/gcc%2Fada%2Fgnatlink.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatlink.adb?ref=0ab0bf955aa7940b6ed5e4790183c298b864201a", "patch": "@@ -1565,13 +1565,6 @@ begin\n                         Linker_Options.Increment_Last;\n                         Linker_Options.Table\n                           (Linker_Options.Last) := String_Access (Arg);\n-\n-                     elsif Arg'Length = 6\n-                       and then Arg (Arg'First + 1 .. Arg'First + 5) = \"fsjlj\"\n-                     then\n-                        Linker_Options.Increment_Last;\n-                        Linker_Options.Table\n-                          (Linker_Options.Last) := String_Access (Arg);\n                      end if;\n \n                   elsif Arg'Length > 5"}, {"sha": "e7925651f7bae95c2a4bb7ad26bfea53fe040b09", "filename": "gcc/ada/lib-writ.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ab0bf955aa7940b6ed5e4790183c298b864201a/gcc%2Fada%2Flib-writ.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ab0bf955aa7940b6ed5e4790183c298b864201a/gcc%2Fada%2Flib-writ.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-writ.adb?ref=0ab0bf955aa7940b6ed5e4790183c298b864201a", "patch": "@@ -1182,7 +1182,11 @@ package body Lib.Writ is\n          Write_Info_Str (\" UA\");\n       end if;\n \n-      if Exception_Mechanism = Back_End_Exceptions then\n+      if Front_End_Exceptions then\n+         Write_Info_Str (\" FX\");\n+      end if;\n+\n+      if ZCX_Exceptions then\n          Write_Info_Str (\" ZX\");\n       end if;\n "}, {"sha": "dce65f04eede6e0160d50f6fcabcb961a95f66ab", "filename": "gcc/ada/lib-writ.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ab0bf955aa7940b6ed5e4790183c298b864201a/gcc%2Fada%2Flib-writ.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ab0bf955aa7940b6ed5e4790183c298b864201a/gcc%2Fada%2Flib-writ.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-writ.ads?ref=0ab0bf955aa7940b6ed5e4790183c298b864201a", "patch": "@@ -192,6 +192,9 @@ package Lib.Writ is\n    --              the units in this file, where x is the first character\n    --              (upper case) of the policy name (e.g. 'C' for Concurrent).\n \n+   --         FX  Units in this file use front-end exceptions, with explicit\n+   --             handlers to trigger AT-END actions on exception paths.\n+\n    --         GP   Set if this compilation was done in GNATprove mode, either\n    --              from direct use of GNATprove, or from use of -gnatdF.\n "}, {"sha": "c5bf2b901b8954dfb3974f645e2ed66bad070348", "filename": "gcc/ada/make.adb", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ab0bf955aa7940b6ed5e4790183c298b864201a/gcc%2Fada%2Fmake.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ab0bf955aa7940b6ed5e4790183c298b864201a/gcc%2Fada%2Fmake.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmake.adb?ref=0ab0bf955aa7940b6ed5e4790183c298b864201a", "patch": "@@ -1798,9 +1798,7 @@ package body Make is\n             --  according to the lang-specs.h.settings.\n \n             for K in First_Arg .. Last_Arg loop\n-               if Args.Table (K).all = \"-mrtp\"\n-                  or else Args.Table (K).all = \"-fsjlj\"\n-               then\n+               if Args.Table (K).all = \"-mrtp\" then\n                   Number_Of_Switches := Number_Of_Switches - 1;\n                end if;\n             end loop;"}, {"sha": "213b6f4bc1b3db228dd5a61f21502e7b698f1344", "filename": "gcc/ada/opt.adb", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ab0bf955aa7940b6ed5e4790183c298b864201a/gcc%2Fada%2Fopt.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ab0bf955aa7940b6ed5e4790183c298b864201a/gcc%2Fada%2Fopt.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.adb?ref=0ab0bf955aa7940b6ed5e4790183c298b864201a", "patch": "@@ -38,6 +38,44 @@ package body Opt is\n    SU : constant := Storage_Unit;\n    --  Shorthand for System.Storage_Unit\n \n+   -------------------------\n+   -- Back_End_Exceptions --\n+   -------------------------\n+\n+   function Back_End_Exceptions return Boolean is\n+   begin\n+      return Exception_Mechanism = Back_End_SJLJ\n+        or else Exception_Mechanism = Back_End_ZCX;\n+   end Back_End_Exceptions;\n+\n+   -------------------------\n+   -- Front_End_Exceptions --\n+   -------------------------\n+\n+   function Front_End_Exceptions return Boolean is\n+   begin\n+      return Exception_Mechanism = Front_End_SJLJ;\n+   end Front_End_Exceptions;\n+\n+   --------------------\n+   -- SJLJ_Exceptions --\n+   --------------------\n+\n+   function SJLJ_Exceptions return Boolean is\n+   begin\n+      return Exception_Mechanism = Back_End_SJLJ\n+        or else Exception_Mechanism = Front_End_SJLJ;\n+   end SJLJ_Exceptions;\n+\n+   --------------------\n+   -- ZCX_Exceptions --\n+   --------------------\n+\n+   function ZCX_Exceptions return Boolean is\n+   begin\n+      return Exception_Mechanism = Back_End_ZCX;\n+   end ZCX_Exceptions;\n+\n    ----------------------------------\n    -- Register_Opt_Config_Switches --\n    ----------------------------------"}, {"sha": "1766950f7535c148eafec490e4c8ed54679852fe", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 23, "deletions": 9, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ab0bf955aa7940b6ed5e4790183c298b864201a/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ab0bf955aa7940b6ed5e4790183c298b864201a/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=0ab0bf955aa7940b6ed5e4790183c298b864201a", "patch": "@@ -573,27 +573,41 @@ package Opt is\n    --  currently active.\n \n    type Exception_Mechanism_Type is\n-   --  Determines the handling of exceptions. See Exp_Ch11 for details\n+   --  Determines the kind of mechanism used to handle exceptions\n    --\n-     (Front_End_Setjmp_Longjmp_Exceptions,\n+     (Front_End_SJLJ,\n       --  Exceptions use setjmp/longjmp generated explicitly by the front end\n       --  (this includes gigi or other equivalent parts of the code generator).\n       --  AT END handlers are converted into exception handlers by the front\n       --  end in this mode.\n \n-      Back_End_Exceptions);\n+      Back_End_ZCX,\n       --  Exceptions are handled by the back end. The front end simply\n       --  generates the handlers as they appear in the source, and AT END\n       --  handlers are left untouched (they are not converted into exception\n-      --  handlers when operating in this mode.\n+      --  handlers when operating in this mode). Propagation is performed\n+      --  using a frame unwinding scheme and requires no particular setup code\n+      --  at handler sites on regular execution paths.\n+\n+      Back_End_SJLJ);\n+      --  Similar to Back_End_ZCX with respect to the front-end processing\n+      --  of regular and AT-END handlers. A setjmp/longjmp scheme is used to\n+      --  propagate and setup handler contexts on regular execution paths.\n+\n    pragma Convention (C, Exception_Mechanism_Type);\n \n-   Exception_Mechanism : Exception_Mechanism_Type :=\n-                           Front_End_Setjmp_Longjmp_Exceptions;\n+   Exception_Mechanism : Exception_Mechanism_Type := Front_End_SJLJ;\n+   --  GNAT\n+   --  Set to the appropriate value depending on the flags in system.ads\n+   --  (Frontend_Exceptions + ZCX_By_Default). The C convention is there to\n+   --  allow access by gigi.\n+\n+   function Back_End_Exceptions return Boolean;\n+   function Front_End_Exceptions return Boolean;\n+   function ZCX_Exceptions return Boolean;\n+   function SJLJ_Exceptions return Boolean;\n    --  GNAT\n-   --  Set to the appropriate value depending on the default as given in\n-   --  system.ads (ZCX_By_Default). The C convention is there to make this\n-   --  variable accessible to gigi.\n+   --  Various properties of the active Exception_Mechanism\n \n    Exception_Tracebacks : Boolean := False;\n    --  GNATBIND"}, {"sha": "70bd0615edb0d65cf7a27a062806a1907ae9e345", "filename": "gcc/ada/targparm.adb", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ab0bf955aa7940b6ed5e4790183c298b864201a/gcc%2Fada%2Ftargparm.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ab0bf955aa7940b6ed5e4790183c298b864201a/gcc%2Fada%2Ftargparm.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftargparm.adb?ref=0ab0bf955aa7940b6ed5e4790183c298b864201a", "patch": "@@ -49,6 +49,7 @@ package body Targparm is\n       DEN,  --   Denorm\n       EXS,  --   Exit_Status_Supported\n       FEL,  --   Frontend_Layout\n+      FEX,  --   Frontend_Exceptions\n       FFO,  --   Fractional_Fixed_Ops\n       MOV,  --   Machine_Overflows\n       MRN,  --   Machine_Rounds\n@@ -64,7 +65,7 @@ package body Targparm is\n       SNZ,  --   Signed_Zeros\n       SSL,  --   Suppress_Standard_Library\n       UAM,  --   Use_Ada_Main_Program_Name\n-      ZCD); --   ZCX_By_Default\n+      ZCX); --   ZCX_By_Default\n \n    Targparm_Flags : array (Targparm_Tags) of Boolean := (others => False);\n    --  Flag is set True if corresponding parameter is scanned\n@@ -82,6 +83,7 @@ package body Targparm is\n    DEN_Str : aliased constant Source_Buffer := \"Denorm\";\n    EXS_Str : aliased constant Source_Buffer := \"Exit_Status_Supported\";\n    FEL_Str : aliased constant Source_Buffer := \"Frontend_Layout\";\n+   FEX_Str : aliased constant Source_Buffer := \"Frontend_Exceptions\";\n    FFO_Str : aliased constant Source_Buffer := \"Fractional_Fixed_Ops\";\n    MOV_Str : aliased constant Source_Buffer := \"Machine_Overflows\";\n    MRN_Str : aliased constant Source_Buffer := \"Machine_Rounds\";\n@@ -97,7 +99,7 @@ package body Targparm is\n    SNZ_Str : aliased constant Source_Buffer := \"Signed_Zeros\";\n    SSL_Str : aliased constant Source_Buffer := \"Suppress_Standard_Library\";\n    UAM_Str : aliased constant Source_Buffer := \"Use_Ada_Main_Program_Name\";\n-   ZCD_Str : aliased constant Source_Buffer := \"ZCX_By_Default\";\n+   ZCX_Str : aliased constant Source_Buffer := \"ZCX_By_Default\";\n \n    --  The following defines a set of pointers to the above strings,\n    --  indexed by the tag values.\n@@ -115,6 +117,7 @@ package body Targparm is\n       DEN_Str'Access,\n       EXS_Str'Access,\n       FEL_Str'Access,\n+      FEX_Str'Access,\n       FFO_Str'Access,\n       MOV_Str'Access,\n       MRN_Str'Access,\n@@ -130,7 +133,7 @@ package body Targparm is\n       SNZ_Str'Access,\n       SSL_Str'Access,\n       UAM_Str'Access,\n-      ZCD_Str'Access);\n+      ZCX_Str'Access);\n \n    -----------------------\n    -- Local Subprograms --\n@@ -804,6 +807,7 @@ package body Targparm is\n                      when DEN => Denorm_On_Target                    := Result;\n                      when EXS => Exit_Status_Supported_On_Target     := Result;\n                      when FEL => Frontend_Layout_On_Target           := Result;\n+                     when FEX => Frontend_Exceptions_On_Target       := Result;\n                      when FFO => Fractional_Fixed_Ops_On_Target      := Result;\n                      when MOV => Machine_Overflows_On_Target         := Result;\n                      when MRN => Machine_Rounds_On_Target            := Result;\n@@ -819,7 +823,7 @@ package body Targparm is\n                      when SSL => Suppress_Standard_Library_On_Target := Result;\n                      when SNZ => Signed_Zeros_On_Target              := Result;\n                      when UAM => Use_Ada_Main_Program_Name_On_Target := Result;\n-                     when ZCD => ZCX_By_Default_On_Target            := Result;\n+                     when ZCX => ZCX_By_Default_On_Target            := Result;\n \n                      goto Line_Loop_Continue;\n                   end case;"}, {"sha": "af2177d0f594da6af80d95a24efa8f75a9fd1f91", "filename": "gcc/ada/targparm.ads", "status": "modified", "additions": 23, "deletions": 38, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ab0bf955aa7940b6ed5e4790183c298b864201a/gcc%2Fada%2Ftargparm.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ab0bf955aa7940b6ed5e4790183c298b864201a/gcc%2Fada%2Ftargparm.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftargparm.ads?ref=0ab0bf955aa7940b6ed5e4790183c298b864201a", "patch": "@@ -234,66 +234,51 @@ package Targparm is\n    --      This approach uses longjmp/setjmp to handle exceptions. It\n    --      uses less storage, and can often propagate exceptions faster,\n    --      at the expense of (sometimes considerable) overhead in setting\n-   --      up an exception handler. This approach is available on all\n-   --      targets, and is the default where it is the only approach.\n+   --      up an exception handler.\n \n    --      The generation of the setjmp and longjmp calls is handled by\n    --      the front end of the compiler (this includes gigi in the case\n    --      of the standard GCC back end). It does not use any back end\n    --      support (such as the GCC3 exception handling mechanism). When\n    --      this approach is used, the compiler generates special exception\n-   --      handlers for handling cleanups when an exception is raised.\n-\n-   --    Front-End Zero Cost Exceptions\n-\n-   --      This approach uses separate exception tables. These use extra\n-   --      storage, and exception propagation can be quite slow, but there\n-   --      is no overhead in setting up an exception handler (it is to this\n-   --      latter operation that the phrase zero-cost refers). This approach\n-   --      is only available on some targets, and is the default where it is\n-   --      available.\n-\n-   --      The generation of the exception tables is handled by the front\n-   --      end of the compiler. It does not use any back end support (such\n-   --      as the GCC3 exception handling mechanism). When this approach\n-   --      is used, the compiler generates special exception handlers for\n-   --      handling cleanups when an exception is raised.\n+   --      handlers for handling cleanups (AT-END actions) when an exception\n+   --      is raised.\n \n    --    Back-End Zero Cost Exceptions\n \n    --      With this approach, the back end handles the generation and\n    --      handling of exceptions. For example, the GCC3 exception handling\n    --      mechanisms are used in this mode. The front end simply generates\n-   --      code for explicit exception handlers, and AT END cleanup handlers\n+   --      code for explicit exception handlers, and AT-END cleanup handlers\n    --      are simply passed unchanged to the backend for generating cleanups\n    --      both in the exceptional and non-exceptional cases.\n \n-   --      As the name implies, this approach generally uses a zero-cost\n-   --      mechanism with tables, but the tables are generated by the back\n-   --      end. However, since the back-end is entirely responsible for the\n-   --      handling of exceptions, another mechanism might be used. In the\n-   --      case of GCC3 for instance, it might be the case that the compiler\n-   --      is configured for setjmp/longjmp handling, then everything will\n-   --      work correctly. However, it is definitely preferred that the\n-   --      back end provide zero cost exception handling.\n+   --      As the name implies, this approach uses a table-based mechanism,\n+   --      which incurs no setup when entering a region covered by handlers\n+   --      but requires complex unwinding to walk up the call chain and search\n+   --      for handlers at propagation time.\n \n-   --    Controlling the selection of methods\n+   --    Back-End Setjmp/Longjmp Exceptions\n \n-   --      On most implementations, back-end zero-cost exceptions are used.\n-   --      Otherwise, Front-End Longjmp/Setjmp approach is used.\n-   --      Note that there is a requirement that all Ada units in a partition\n-   --      be compiled with the same exception model.\n+   --      With this approach, the back end also handles the generation and\n+   --      handling of exceptions, using setjmp/longjmp to setup receivers and\n+   --      propagate. AT-END actions on exceptional paths are also taken care\n+   --      of by the back end and the front end doesn't need to generate\n+   --      explicit exception handlers for these.\n \n    --    Control of Available Methods and Defaults\n \n-   --      The following switches specify whether ZCX is available, and\n-   --      whether it is enabled by default.\n+   --      The following switches specify whether we're using a front-end or a\n+   --      back-end mechanism and whether this is a zero-cost or a sjlj scheme.\n+\n+   --      The per switch default values correspond to the default value of\n+   --      Opt.Exception_Mechanism.\n \n    ZCX_By_Default_On_Target : Boolean := False;\n-   --  Indicates if zero cost exceptions are active by default. If this\n-   --  variable is False, then the only possible exception method is the\n-   --  front-end setjmp/longjmp approach, and this is the default. If\n-   --  this variable is True, then GCC ZCX is used.\n+   --  Indicates if zero cost scheme for exceptions\n+\n+   Frontend_Exceptions_On_Target : Boolean := True;\n+   --  Indicates if we're using a front-end scheme for exceptions\n \n    ------------------------------------\n    -- Run-Time Library Configuration --"}]}