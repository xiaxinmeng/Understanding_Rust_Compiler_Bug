{"sha": "af9ecd0ca05832b2681965b96e0f169b19355f89", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWY5ZWNkMGNhMDU4MzJiMjY4MTk2NWI5NmUwZjE2OWIxOTM1NWY4OQ==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "dvorakz@suse.cz", "date": "2005-02-14T11:37:52Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2005-02-14T11:37:52Z"}, "message": "re PR rtl-optimization/17428 (internal compiler error: in spill_failure, at reload1.c:1880 (-fspeculative-prefetching))\n\n\tPR target/17428\n\t* cfgrtl.c (safe_insert_insn_on_edge): Avoid extending life range of hard\n\tregisters.\n\t* value-prof.c (insn_prefetch_values_to_profile): Only scan normal insns.\n\n\t* value-prof.c (rtl_find_values_to_profile): Do not look for values to\n\tprofile in libcalls.\n\nFrom-SVN: r95007", "tree": {"sha": "ccf30967b64909fbd1caf38b5e2c68a7e4788148", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ccf30967b64909fbd1caf38b5e2c68a7e4788148"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af9ecd0ca05832b2681965b96e0f169b19355f89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af9ecd0ca05832b2681965b96e0f169b19355f89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af9ecd0ca05832b2681965b96e0f169b19355f89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af9ecd0ca05832b2681965b96e0f169b19355f89/comments", "author": null, "committer": null, "parents": [{"sha": "09950393c3c5d37dc48236f04b9823be8f5425c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09950393c3c5d37dc48236f04b9823be8f5425c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09950393c3c5d37dc48236f04b9823be8f5425c0"}], "stats": {"total": 45, "additions": 42, "deletions": 3}, "files": [{"sha": "6cf49a96d0854f082910cc09c9707a3bef594f59", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af9ecd0ca05832b2681965b96e0f169b19355f89/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af9ecd0ca05832b2681965b96e0f169b19355f89/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=af9ecd0ca05832b2681965b96e0f169b19355f89", "patch": "@@ -1,3 +1,13 @@\n+2005-02-13  Zdenek Dvorak  <dvorakz@suse.cz>\n+\n+\tPR target/17428\n+\t* cfgrtl.c (safe_insert_insn_on_edge): Avoid extending life range of hard\n+\tregisters.\n+\t* value-prof.c (insn_prefetch_values_to_profile): Only scan normal insns.\n+\n+\t* value-prof.c (rtl_find_values_to_profile): Do not look for values to\n+\tprofile in libcalls.\n+\n 2005-02-13  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* bitmap.h (bitmap_and_compl_into): Return bool."}, {"sha": "8de76449941e23d4b5a76d74b95119c9cb44ea35", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af9ecd0ca05832b2681965b96e0f169b19355f89/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af9ecd0ca05832b2681965b96e0f169b19355f89/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=af9ecd0ca05832b2681965b96e0f169b19355f89", "patch": "@@ -1470,6 +1470,16 @@ safe_insert_insn_on_edge (rtx insn, edge e)\n   for (x = insn; x; x = NEXT_INSN (x))\n     if (INSN_P (x))\n       note_stores (PATTERN (x), mark_killed_regs, killed);\n+\n+  /* Mark all hard registers as killed.  Register allocator/reload cannot\n+     cope with the situation when life range of hard register spans operation\n+     for that the appropriate register is needed, i.e. it would be unsafe to\n+     extend the life ranges of hard registers.  */\n+  for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n+    if (!fixed_regs[regno]\n+\t&& !REGNO_PTR_FRAME_P (regno))\n+      SET_REGNO_REG_SET (killed, regno);\n+\n   bitmap_and_into (killed, e->dest->global_live_at_start);\n \n   EXECUTE_IF_SET_IN_REG_SET (killed, 0, regno, rsi)\n@@ -1515,6 +1525,7 @@ safe_insert_insn_on_edge (rtx insn, edge e)\n   insert_insn_on_edge (insn, e);\n   \n   FREE_REG_SET (killed);\n+\n   return true;\n }\n "}, {"sha": "e5e43206b400973c86fd105587b14f0133b5e54a", "filename": "gcc/value-prof.c", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af9ecd0ca05832b2681965b96e0f169b19355f89/gcc%2Fvalue-prof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af9ecd0ca05832b2681965b96e0f169b19355f89/gcc%2Fvalue-prof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.c?ref=af9ecd0ca05832b2681965b96e0f169b19355f89", "patch": "@@ -245,7 +245,8 @@ insn_prefetch_values_to_profile (rtx insn, histogram_values *values)\n   int write;\n   histogram_value hist;\n \n-  if (!INSN_P (insn))\n+  /* It only makes sense to look for memory references in ordinary insns.  */\n+  if (GET_CODE (insn) != INSN)\n     return false;\n \n   if (!find_mem_reference (insn, &mem, &write))\n@@ -288,13 +289,30 @@ static void\n rtl_find_values_to_profile (histogram_values *values)\n {\n   rtx insn;\n-  unsigned i;\n+  unsigned i, libcall_level;\n \n   life_analysis (NULL, PROP_DEATH_NOTES);\n \n   *values = VEC_alloc (histogram_value, 0);\n+  libcall_level = 0;\n   for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n-    insn_values_to_profile (insn, values);\n+    {\n+      if (find_reg_note (insn, REG_LIBCALL, NULL_RTX))\n+\tlibcall_level++;\n+\n+      /* Do not instrument values inside libcalls (we are going to split block\n+\t due to instrumentation, and libcall blocks should be local to a single\n+\t basic block).  */\n+      if (!libcall_level)\n+\tinsn_values_to_profile (insn, values);\n+\n+      if (find_reg_note (insn, REG_RETVAL, NULL_RTX))\n+\t{\n+\t  gcc_assert (libcall_level > 0);\n+\t  libcall_level--;\n+\t}\n+    }\n+  gcc_assert (libcall_level == 0);\n \n   for (i = 0; i < VEC_length (histogram_value, *values); i++)\n     {"}]}