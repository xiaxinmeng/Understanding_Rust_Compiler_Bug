{"sha": "29f6f2d244c77dd7ae5a86b3bf7cb18fd953168f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjlmNmYyZDI0NGM3N2RkN2FlNWE4NmIzYmY3Y2IxOGZkOTUzMTY4Zg==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2018-10-30T11:33:24Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2018-10-30T11:33:24Z"}, "message": "Don't allow the pool allocator to be configured to allocate zero-sized objects\n\nPR bootstrap/87747 would have been significantly easier to track down if\nthe pool allocator had faulted an attempt to configure it to allocate\nzero-sized objects.  Instead, this slipped through and we later hit\nmemory corruption when the assumed size turned out to be different to\nthe configured size.\n\nWhile, theoretically, there might be a use case for this, it seems\nunlikely to me that GCC would have such a use.  So this patch adds a\nchecking assert that the object size is not zero.\n\n\t* alloc-pool.h (base_pool_allocator <TBlockAllocator>::initialize):\n\tAssert that the allocation size is not zero.\n\nFrom-SVN: r265620", "tree": {"sha": "1ee9b9016dfa2e295a56d7818b86352f608cf646", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ee9b9016dfa2e295a56d7818b86352f608cf646"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29f6f2d244c77dd7ae5a86b3bf7cb18fd953168f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29f6f2d244c77dd7ae5a86b3bf7cb18fd953168f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29f6f2d244c77dd7ae5a86b3bf7cb18fd953168f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29f6f2d244c77dd7ae5a86b3bf7cb18fd953168f/comments", "author": null, "committer": null, "parents": [{"sha": "22e4f1fb6cda89074fa82ba70dfd757fb9ead5f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22e4f1fb6cda89074fa82ba70dfd757fb9ead5f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22e4f1fb6cda89074fa82ba70dfd757fb9ead5f0"}], "stats": {"total": 6, "additions": 6, "deletions": 0}, "files": [{"sha": "c07d3ad96680558156a2492cff82ce38ae725979", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f6f2d244c77dd7ae5a86b3bf7cb18fd953168f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f6f2d244c77dd7ae5a86b3bf7cb18fd953168f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=29f6f2d244c77dd7ae5a86b3bf7cb18fd953168f", "patch": "@@ -1,3 +1,8 @@\n+2018-10-30  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* alloc-pool.h (base_pool_allocator <TBlockAllocator>::initialize):\n+\tAssert that the allocation size is not zero.\n+\n 2018-10-30  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/87800"}, {"sha": "d2ee00057611453cee567bab76d0e1f19effb238", "filename": "gcc/alloc-pool.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f6f2d244c77dd7ae5a86b3bf7cb18fd953168f/gcc%2Falloc-pool.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f6f2d244c77dd7ae5a86b3bf7cb18fd953168f/gcc%2Falloc-pool.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falloc-pool.h?ref=29f6f2d244c77dd7ae5a86b3bf7cb18fd953168f", "patch": "@@ -256,6 +256,7 @@ base_pool_allocator <TBlockAllocator>::initialize ()\n   size_t size = m_size;\n \n   gcc_checking_assert (m_name);\n+  gcc_checking_assert (m_size);\n \n   /* Make size large enough to store the list header.  */\n   if (size < sizeof (allocation_pool_list*))"}]}