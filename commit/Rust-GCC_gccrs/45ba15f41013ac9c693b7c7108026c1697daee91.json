{"sha": "45ba15f41013ac9c693b7c7108026c1697daee91", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDViYTE1ZjQxMDEzYWM5YzY5M2I3YzcxMDgwMjZjMTY5N2RhZWU5MQ==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@redhat.com", "date": "2003-01-14T18:42:29Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2003-01-14T18:42:29Z"}, "message": "ffi64.c (ffi_prep_args): Check for void retval.\n\n2003-01-14  Andrew Haley  <aph@redhat.com>\n\n        * src/x86/ffi64.c (ffi_prep_args): Check for void retval.\n        (ffi_prep_cif_machdep): Likewise.\n        * src/x86/unix64.S: Add unwind info.\n\nFrom-SVN: r61291", "tree": {"sha": "1112fcafba7b2e785bde6d27abba98829ae77c27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1112fcafba7b2e785bde6d27abba98829ae77c27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45ba15f41013ac9c693b7c7108026c1697daee91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45ba15f41013ac9c693b7c7108026c1697daee91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45ba15f41013ac9c693b7c7108026c1697daee91", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45ba15f41013ac9c693b7c7108026c1697daee91/comments", "author": {"login": "theRealAph", "id": 254637, "node_id": "MDQ6VXNlcjI1NDYzNw==", "avatar_url": "https://avatars.githubusercontent.com/u/254637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theRealAph", "html_url": "https://github.com/theRealAph", "followers_url": "https://api.github.com/users/theRealAph/followers", "following_url": "https://api.github.com/users/theRealAph/following{/other_user}", "gists_url": "https://api.github.com/users/theRealAph/gists{/gist_id}", "starred_url": "https://api.github.com/users/theRealAph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theRealAph/subscriptions", "organizations_url": "https://api.github.com/users/theRealAph/orgs", "repos_url": "https://api.github.com/users/theRealAph/repos", "events_url": "https://api.github.com/users/theRealAph/events{/privacy}", "received_events_url": "https://api.github.com/users/theRealAph/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "474113419b419d53e0ad7bf116760a895420aa01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/474113419b419d53e0ad7bf116760a895420aa01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/474113419b419d53e0ad7bf116760a895420aa01"}], "stats": {"total": 55, "additions": 52, "deletions": 3}, "files": [{"sha": "6b5df6bb56a03259c398a818bb4db1582d424ad4", "filename": "libffi/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45ba15f41013ac9c693b7c7108026c1697daee91/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45ba15f41013ac9c693b7c7108026c1697daee91/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=45ba15f41013ac9c693b7c7108026c1697daee91", "patch": "@@ -1,3 +1,9 @@\n+2003-01-14  Andrew Haley  <aph@redhat.com>\n+\n+\t* src/x86/ffi64.c (ffi_prep_args): Check for void retval.\n+\t(ffi_prep_cif_machdep): Likewise.\n+\t* src/x86/unix64.S: Add unwind info.\n+\n 2003-01-14  Andreas Jaeger  <aj@suse.de>\n \n \t* src/ffitest.c (main): Only use ffi_closures if those are"}, {"sha": "ed6e89d7729221721c811f64e48b66b63fd18b23", "filename": "libffi/src/x86/ffi64.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45ba15f41013ac9c693b7c7108026c1697daee91/libffi%2Fsrc%2Fx86%2Fffi64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45ba15f41013ac9c693b7c7108026c1697daee91/libffi%2Fsrc%2Fx86%2Fffi64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fx86%2Fffi64.c?ref=45ba15f41013ac9c693b7c7108026c1697daee91", "patch": "@@ -285,7 +285,8 @@ ffi_prep_args (stackLayout *stack, extended_cif *ecif)\n   /* First check if the return value should be passed in memory. If so,\n      pass the pointer as the first argument.  */\n   gprcount = ssecount = 0;\n-  if (examine_argument (ecif->cif->rtype, 1, &g, &s) == 0)\n+  if (ecif->cif->rtype->type != FFI_TYPE_VOID \n+      && examine_argument (ecif->cif->rtype, 1, &g, &s) == 0)\n     (void *)stack->gpr[gprcount++] = ecif->rvalue;\n \n   for (i=ecif->cif->nargs, p_arg=ecif->cif->arg_types, p_argv = ecif->avalue;\n@@ -389,8 +390,8 @@ ffi_prep_cif_machdep (ffi_cif *cif)\n \n   /* If the return value should be passed in memory, pass the pointer\n      as the first argument. The actual memory isn't allocated here.  */\n-\n-  if (examine_argument (cif->rtype, 1, &g, &s) == 0)\n+  if (cif->rtype->type != FFI_TYPE_VOID \n+      && examine_argument (cif->rtype, 1, &g, &s) == 0)\n     gprcount = 1;\n \n   /* Go over all arguments and determine the way they should be passed."}, {"sha": "8ac1145f7e90dd02818c3def96248a488fcb2429", "filename": "libffi/src/x86/unix64.S", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45ba15f41013ac9c693b7c7108026c1697daee91/libffi%2Fsrc%2Fx86%2Funix64.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45ba15f41013ac9c693b7c7108026c1697daee91/libffi%2Fsrc%2Fx86%2Funix64.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fx86%2Funix64.S?ref=45ba15f41013ac9c693b7c7108026c1697daee91", "patch": "@@ -163,4 +163,46 @@ sse2floatfloat:\n \tmovq\t%xmm0, (%rsi)\n \tret\n \t\n+        .section        .eh_frame,\"a\",@progbits\n+.Lframe0:\n+        .long   .LECIE1-.LSCIE1\n+.LSCIE1:\n+        .long   0x0\n+        .byte   0x1\n+        .string \"zR\"\n+        .uleb128 0x1\n+        .sleb128 -8\n+        .byte   0x10\n+        .uleb128 0x1\n+        .byte   0x1b\n+        .byte   0xc\n+        .uleb128 0x7\n+        .uleb128 0x8\n+        .byte   0x90\n+        .uleb128 0x1\n+        .align 8\n+.LECIE1:\n+.LSFDE1:\n+\t.long\t.LEFDE1-.LASFDE1\n+.LASFDE1:\n+        .long   .LASFDE1-.Lframe0\n+\n+        .long   .LFB1-.\n+        .long   .LFE1-.LFB1\n+        .uleb128 0x0\n+        .byte   0x4\t\t# DW_CFA_advance_loc4\n+        .long   .LCFI0-.LFB1\n+        .byte   0xe\t\t# DW_CFA_def_cfa_offset\n+        .uleb128 0x10\n+        .byte   0x86\t\t# DW_CFA_offset: r6 at cfa-16\n+        .uleb128 0x2\n+        .byte   0x4\t\t# DW_CFA_advance_loc4\n+        .long   .LCFI1-.LCFI0\n+        .byte   0x86\t\t# DW_CFA_offset: r6 at cfa-16\n+        .uleb128 0x2\n+        .byte   0xd\t\t# DW_CFA_def_cfa_reg: r6\n+        .uleb128 0x6\n+\t.align 8\n+.LEFDE1:\n+\n #endif /* __x86_64__  */"}]}