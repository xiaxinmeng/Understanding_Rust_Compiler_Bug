{"sha": "700ad580a6b6b3c53d74a03a75ad6b3ce82b0a41", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzAwYWQ1ODBhNmI2YjNjNTNkNzRhMDNhNzVhZDZiM2NlODJiMGE0MQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-04-14T22:49:18Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-04-14T22:49:18Z"}, "message": "(range_test): Don't convert hi_cst or lo_cst to unsigned when folding\nsigned range tests.\n\nFrom-SVN: r11768", "tree": {"sha": "168521c0927d2183ac6994e49bee52faaa4d9a8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/168521c0927d2183ac6994e49bee52faaa4d9a8f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/700ad580a6b6b3c53d74a03a75ad6b3ce82b0a41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/700ad580a6b6b3c53d74a03a75ad6b3ce82b0a41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/700ad580a6b6b3c53d74a03a75ad6b3ce82b0a41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/700ad580a6b6b3c53d74a03a75ad6b3ce82b0a41/comments", "author": null, "committer": null, "parents": [{"sha": "84c7be4b21fdb0614ffbf954771b0aa241a7877d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84c7be4b21fdb0614ffbf954771b0aa241a7877d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84c7be4b21fdb0614ffbf954771b0aa241a7877d"}], "stats": {"total": 22, "additions": 14, "deletions": 8}, "files": [{"sha": "78da4fb6963b73af873638a64f918f24c9d52034", "filename": "gcc/fold-const.c", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700ad580a6b6b3c53d74a03a75ad6b3ce82b0a41/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700ad580a6b6b3c53d74a03a75ad6b3ce82b0a41/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=700ad580a6b6b3c53d74a03a75ad6b3ce82b0a41", "patch": "@@ -2617,15 +2617,21 @@ range_test (jcode, type, lo_code, hi_code, var, lo_cst, hi_cst)\n   if (! TREE_UNSIGNED (utype))\n     {\n       utype = unsigned_type (utype);\n-      var = convert (utype, var);\n-      lo_cst = convert (utype, lo_cst);\n-      hi_cst = convert (utype, hi_cst);\n+      return fold (convert (type,\n+\t\t\t    build (rcode, utype,\n+\t\t\t\t   convert (utype,\n+\t\t\t\t\t    build (MINUS_EXPR, TREE_TYPE (var),\n+\t\t\t\t\t\t   var, lo_cst)),\n+\t\t\t\t   convert (utype,\n+\t\t\t\t\t    const_binop (MINUS_EXPR, hi_cst,\n+\t\t\t\t\t\t\t lo_cst, 0)))));\n     }\n-\n-  return fold (convert (type,\n-\t\t\tbuild (rcode, utype,\n-\t\t\t       build (MINUS_EXPR, utype, var, lo_cst),\n-\t\t\t       const_binop (MINUS_EXPR, hi_cst, lo_cst, 0))));\n+  else\n+      return fold (convert (type,\n+\t\t\t    build (rcode, utype,\n+\t\t\t\t   build (MINUS_EXPR, utype, var, lo_cst),\n+\t\t\t\t   const_binop (MINUS_EXPR, hi_cst,\n+\t\t\t\t\t\tlo_cst, 0))));\n }\n \f\n /* Subroutine for fold_truthop: C is an INTEGER_CST interpreted as a P"}]}