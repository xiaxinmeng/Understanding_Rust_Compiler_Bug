{"sha": "3a2cb4d037cc66a0b6567d944cbc9450adf11814", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2EyY2I0ZDAzN2NjNjZhMGI2NTY3ZDk0NGNiYzk0NTBhZGYxMTgxNA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-04-08T06:08:13Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-04-08T06:08:13Z"}, "message": "re PR c++/48481 (C++ overloading memory hog)\n\n\tPR c++/48481\n\t* cp-tree.h (OVL_ARG_DEPENDENT): New.\n\t* name-lookup.c (add_function): Set it.\n\t* semantics.c (finish_call_expr): Free OVERLOADs if it's set.\n\nFrom-SVN: r172163", "tree": {"sha": "d9df08540a47670491171f7843e50c2e8dc8420f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9df08540a47670491171f7843e50c2e8dc8420f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a2cb4d037cc66a0b6567d944cbc9450adf11814", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a2cb4d037cc66a0b6567d944cbc9450adf11814", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a2cb4d037cc66a0b6567d944cbc9450adf11814", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a2cb4d037cc66a0b6567d944cbc9450adf11814/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c9b558895e7c82d5973c8682c766dedb95bb4d32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9b558895e7c82d5973c8682c766dedb95bb4d32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9b558895e7c82d5973c8682c766dedb95bb4d32"}], "stats": {"total": 33, "additions": 32, "deletions": 1}, "files": [{"sha": "307272bef42b423ee00a5a87f29af72d575bf0a1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a2cb4d037cc66a0b6567d944cbc9450adf11814/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a2cb4d037cc66a0b6567d944cbc9450adf11814/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3a2cb4d037cc66a0b6567d944cbc9450adf11814", "patch": "@@ -1,5 +1,10 @@\n 2011-04-07  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/48481\n+\t* cp-tree.h (OVL_ARG_DEPENDENT): New.\n+\t* name-lookup.c (add_function): Set it.\n+\t* semantics.c (finish_call_expr): Free OVERLOADs if it's set.\n+\n \tPR c++/48481\n \t* call.c (build_user_type_conversion_1): Use lookup_fnfields_slot.\n \tRelease unused vector."}, {"sha": "885b31cd61ae568690b3471860e43f7b9bacb1f7", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a2cb4d037cc66a0b6567d944cbc9450adf11814/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a2cb4d037cc66a0b6567d944cbc9450adf11814/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=3a2cb4d037cc66a0b6567d944cbc9450adf11814", "patch": "@@ -317,6 +317,9 @@ typedef struct ptrmem_cst * ptrmem_cst_t;\n    This is not to confuse with being used somewhere, which\n    is not important for this node.  */\n #define OVL_USED(NODE)\t\tTREE_USED (NODE)\n+/* If set, this OVERLOAD was created for argument-dependent lookup\n+   and can be freed afterward.  */\n+#define OVL_ARG_DEPENDENT(NODE) TREE_LANG_FLAG_0 (OVERLOAD_CHECK (NODE))\n \n struct GTY(()) tree_overload {\n   struct tree_common common;"}, {"sha": "696a8f5fdcbae56f911e17aa40b7db158f606485", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a2cb4d037cc66a0b6567d944cbc9450adf11814/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a2cb4d037cc66a0b6567d944cbc9450adf11814/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=3a2cb4d037cc66a0b6567d944cbc9450adf11814", "patch": "@@ -4725,7 +4725,11 @@ add_function (struct arg_lookup *k, tree fn)\n   else if (fn == k->functions)\n     ;\n   else\n-    k->functions = build_overload (fn, k->functions);\n+    {\n+      k->functions = build_overload (fn, k->functions);\n+      if (TREE_CODE (k->functions) == OVERLOAD)\n+\tOVL_ARG_DEPENDENT (k->functions) = true;\n+    }\n \n   return false;\n }"}, {"sha": "2184a53558e4a957ed2e10f63b2e9439451df389", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a2cb4d037cc66a0b6567d944cbc9450adf11814/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a2cb4d037cc66a0b6567d944cbc9450adf11814/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=3a2cb4d037cc66a0b6567d944cbc9450adf11814", "patch": "@@ -2160,6 +2160,25 @@ finish_call_expr (tree fn, VEC(tree,gc) **args, bool disallow_virtual,\n       result = convert_from_reference (result);\n     }\n \n+  if (koenig_p)\n+    {\n+      /* Free garbage OVERLOADs from arg-dependent lookup.  */\n+      tree next = NULL_TREE;\n+      for (fn = orig_fn;\n+\t   fn && TREE_CODE (fn) == OVERLOAD && OVL_ARG_DEPENDENT (fn);\n+\t   fn = next)\n+\t{\n+\t  if (processing_template_decl)\n+\t    /* In a template, we'll re-use them at instantiation time.  */\n+\t    OVL_ARG_DEPENDENT (fn) = false;\n+\t  else\n+\t    {\n+\t      next = OVL_CHAIN (fn);\n+\t      ggc_free (fn);\n+\t    }\n+\t}\n+    }\n+\n   return result;\n }\n "}]}