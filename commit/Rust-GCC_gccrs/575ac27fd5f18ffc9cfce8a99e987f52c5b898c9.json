{"sha": "575ac27fd5f18ffc9cfce8a99e987f52c5b898c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTc1YWMyN2ZkNWYxOGZmYzljZmNlOGE5OWU5ODdmNTJjNWI4OThjOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-04-29T07:01:49Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-04-29T07:01:49Z"}, "message": "c++, middle-end, rs6000: Fix C++17 ABI incompatibilities during class layout and [[no_unique_address]] handling [PR94707]\n\nAs reported by Iain and David, powerpc-darwin and powerpc-aix* have C++14\nvs. C++17 ABI incompatibilities which are not fixed by mere adding of\ncxx17_empty_base_field_p calls.  Unlike the issues that were seen on other\ntargets where the artificial empty base field affected function argument\npassing or returning of values, on these two targets the difference is\nduring class layout, not afterwards (e.g.\nstruct empty_base {};\nstruct S : public empty_base { unsigned long long l[2]; };\nwill have different __alignof__ (S) between C++14 and C++17 (or possibly\nwith double instead of unsigned long long too)).\n\nI've tried:\nstruct X { };\nstruct Y { int : 0; };\nstruct Z { int : 0; Y y; };\nstruct U : public X { X q; };\nstruct A { float a, b, c, d; };\nstruct B : public X { float a, b, c, d; };\nstruct C : public Y { float a, b, c, d; };\nstruct D : public Z { float a, b, c, d; };\nstruct E : public U { float a, b, c, d; };\nstruct F { [[no_unique_address]] X x; float a, b, c, d; };\nstruct G { [[no_unique_address]] Y y; float a, b, c, d; };\nstruct H { [[no_unique_address]] Z z; float a, b, c, d; };\nstruct I { [[no_unique_address]] U u; float a, b, c, d; };\nstruct J { float a, b; [[no_unique_address]] X x; float c, d; };\nstruct K { float a, b; [[no_unique_address]] Y y; float c, d; };\nstruct L { float a, b; [[no_unique_address]] Z z; float c, d; };\nstruct M { float a, b; [[no_unique_address]] U u; float c, d; };\n #define T(S, s) extern S s; extern void foo##s (S); int bar##s () { foo##s (s); return 0; }\nT (A, a)\nT (B, b)\nT (C, c)\nT (D, d)\nT (E, e)\nT (F, f)\nT (G, g)\nT (H, h)\nT (I, i)\nT (J, j)\nT (K, k)\nT (L, l)\nT (M, m)\ntestcase on powerpc64-linux.  Results:\nG++ 9 -std=c++14                A, B, C passed in fprs, the rest in gprs\nG++ 9 -std=c++17                A passed in fprs, the rest in gprs\ncurrent trunk -std=c++14 & 17   A, B, C passed in fprs, the rest in gprs\npatched trunk -std=c++14 & 17   A, B, C, F, G, J, K passed in fprs, the rest in gprs\nclang++ [*] -std=c++14 & 17     A, B, C, F, G, J, K passed in fprs, the rest in gprs\n[*] clang version 11.0.0 (git@github.com:llvm/llvm-project.git 5c352e69e76a26e4eda075e20aa6a9bb7686042c)\n\nIs that what we want?  I think it matches the stated intent of P0840R2 or\nwhat Jason/Jonathan said, and doing something different like e.g. not\ntreating C, G and K as homogenous because of the int : 0 in empty bases\nor in zero sized [[no_unique_address] fields would be quite hard to\nimplement (because for C++14 the FIELD_DECL just isn't there).\n\n2020-04-29  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/94707\n\t* tree-core.h (tree_decl_common): Note decl_flag_0 used for\n\tDECL_FIELD_ABI_IGNORED.\n\t* tree.h (DECL_FIELD_ABI_IGNORED): Define.\n\t* calls.h (cxx17_empty_base_field_p): Change into a temporary\n\tmacro, check DECL_FIELD_ABI_IGNORED flag with no \"no_unique_address\"\n\tattribute.\n\t* calls.c (cxx17_empty_base_field_p): Remove.\n\t* tree-streamer-out.c (pack_ts_decl_common_value_fields): Handle\n\tDECL_FIELD_ABI_IGNORED.\n\t* tree-streamer-in.c (unpack_ts_decl_common_value_fields): Likewise.\n\t* lto-streamer-out.c (hash_tree): Likewise.\n\t* config/rs6000/rs6000-call.c (rs6000_aggregate_candidate): Rename\n\tcxx17_empty_base_seen to empty_base_seen, change type to int *,\n\tadjust recursive calls, use DECL_FIELD_ABI_IGNORED instead of\n\tcxx17_empty_base_field_p, if \"no_unique_address\" attribute is\n\tpresent, propagate that to the caller too.\n\t(rs6000_discover_homogeneous_aggregate): Adjust\n\trs6000_aggregate_candidate caller, emit different diagnostics\n\twhen c++17 empty base fields are present and when empty\n\t[[no_unique_address]] fields are present.\n\t* config/rs6000/rs6000.c (rs6000_special_round_type_align,\n\tdarwin_rs6000_special_round_type_align): Skip DECL_FIELD_ABI_IGNORED\n\tfields.\n\n\t* class.c (build_base_field): Set DECL_FIELD_ABI_IGNORED on C++17 empty\n\tbase artificial FIELD_DECLs.\n\t(layout_class_type): Set DECL_FIELD_ABI_IGNORED on empty class\n\tfield_poverlapping_p FIELD_DECLs.\n\n\t* lto-common.c (compare_tree_sccs_1): Handle DECL_FIELD_ABI_IGNORED.\n\n\t* g++.target/powerpc/pr94707-1.C: New test.\n\t* g++.target/powerpc/pr94707-2.C: New test.\n\t* g++.target/powerpc/pr94707-3.C: New test.\n\t* g++.target/powerpc/pr94707-4.C: New test.\n\t* g++.target/powerpc/pr94707-5.C: New test.\n\t* g++.target/powerpc/pr94707-4.C: New test.", "tree": {"sha": "b5a4515fb2bf50360866c27ed81640a59822904c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5a4515fb2bf50360866c27ed81640a59822904c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/575ac27fd5f18ffc9cfce8a99e987f52c5b898c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/575ac27fd5f18ffc9cfce8a99e987f52c5b898c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/575ac27fd5f18ffc9cfce8a99e987f52c5b898c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/575ac27fd5f18ffc9cfce8a99e987f52c5b898c9/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df30ab70690d6088f367e74757f0b5dd6a2587e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df30ab70690d6088f367e74757f0b5dd6a2587e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df30ab70690d6088f367e74757f0b5dd6a2587e5"}], "stats": {"total": 324, "additions": 288, "deletions": 36}, "files": [{"sha": "738a74def202a76775a873a7981b624eb3671b2f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/575ac27fd5f18ffc9cfce8a99e987f52c5b898c9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/575ac27fd5f18ffc9cfce8a99e987f52c5b898c9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=575ac27fd5f18ffc9cfce8a99e987f52c5b898c9", "patch": "@@ -1,3 +1,30 @@\n+2020-04-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/94707\n+\t* tree-core.h (tree_decl_common): Note decl_flag_0 used for\n+\tDECL_FIELD_ABI_IGNORED.\n+\t* tree.h (DECL_FIELD_ABI_IGNORED): Define.\n+\t* calls.h (cxx17_empty_base_field_p): Change into a temporary\n+\tmacro, check DECL_FIELD_ABI_IGNORED flag with no \"no_unique_address\"\n+\tattribute.\n+\t* calls.c (cxx17_empty_base_field_p): Remove.\n+\t* tree-streamer-out.c (pack_ts_decl_common_value_fields): Handle\n+\tDECL_FIELD_ABI_IGNORED.\n+\t* tree-streamer-in.c (unpack_ts_decl_common_value_fields): Likewise.\n+\t* lto-streamer-out.c (hash_tree): Likewise.\n+\t* config/rs6000/rs6000-call.c (rs6000_aggregate_candidate): Rename\n+\tcxx17_empty_base_seen to empty_base_seen, change type to int *,\n+\tadjust recursive calls, use DECL_FIELD_ABI_IGNORED instead of\n+\tcxx17_empty_base_field_p, if \"no_unique_address\" attribute is\n+\tpresent, propagate that to the caller too.\n+\t(rs6000_discover_homogeneous_aggregate): Adjust\n+\trs6000_aggregate_candidate caller, emit different diagnostics\n+\twhen c++17 empty base fields are present and when empty\n+\t[[no_unique_address]] fields are present.\n+\t* config/rs6000/rs6000.c (rs6000_special_round_type_align,\n+\tdarwin_rs6000_special_round_type_align): Skip DECL_FIELD_ABI_IGNORED\n+\tfields.\n+\n 2020-04-29  Richard Biener  <rguenther@suse.de>\n \n \t* tree-ssa-loop-im.c (ref_always_accessed::operator ()):"}, {"sha": "5bd922779af7144a4310f963428f8d537b509938", "filename": "gcc/calls.c", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/575ac27fd5f18ffc9cfce8a99e987f52c5b898c9/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/575ac27fd5f18ffc9cfce8a99e987f52c5b898c9/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=575ac27fd5f18ffc9cfce8a99e987f52c5b898c9", "patch": "@@ -6261,23 +6261,5 @@ must_pass_va_arg_in_stack (tree type)\n   return targetm.calls.must_pass_in_stack (arg);\n }\n \n-/* Return true if FIELD is the C++17 empty base field that should\n-   be ignored for ABI calling convention decisions in order to\n-   maintain ABI compatibility between C++14 and earlier, which doesn't\n-   add this FIELD to classes with empty bases, and C++17 and later\n-   which does.  */\n-\n-bool\n-cxx17_empty_base_field_p (const_tree field)\n-{\n-  return (TREE_CODE (field) == FIELD_DECL\n-\t  && DECL_ARTIFICIAL (field)\n-\t  && RECORD_OR_UNION_TYPE_P (TREE_TYPE (field))\n-\t  && DECL_SIZE (field)\n-\t  && integer_zerop (DECL_SIZE (field))\n-\t  && TYPE_SIZE (TREE_TYPE (field))\n-\t  && !integer_zerop (TYPE_SIZE (TREE_TYPE (field))));\n-}\n-\n /* Tell the garbage collector about GTY markers in this source file.  */\n #include \"gt-calls.h\""}, {"sha": "e1c944efbb6f7381e569d71b1ced12f2ac77176f", "filename": "gcc/calls.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/575ac27fd5f18ffc9cfce8a99e987f52c5b898c9/gcc%2Fcalls.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/575ac27fd5f18ffc9cfce8a99e987f52c5b898c9/gcc%2Fcalls.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.h?ref=575ac27fd5f18ffc9cfce8a99e987f52c5b898c9", "patch": "@@ -135,6 +135,9 @@ extern tree get_attr_nonstring_decl (tree, tree * = NULL);\n extern void maybe_warn_nonstring_arg (tree, tree);\n extern bool get_size_range (tree, tree[2], bool = false);\n extern rtx rtx_for_static_chain (const_tree, bool);\n-extern bool cxx17_empty_base_field_p (const_tree);\n+/* FIXME: Remove after all backends are converted.  */\n+#define cxx17_empty_base_field_p(t) \\\n+  (DECL_FIELD_ABI_IGNORED (t)\t\t\t\t\t\t\\\n+   && !lookup_attribute (\"no_unique_address\", DECL_ATTRIBUTES (t)))\n \n #endif // GCC_CALLS_H"}, {"sha": "800ac2b5b5e1620d44545e667245bd882cbe0a36", "filename": "gcc/config/rs6000/rs6000-call.c", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/575ac27fd5f18ffc9cfce8a99e987f52c5b898c9/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/575ac27fd5f18ffc9cfce8a99e987f52c5b898c9/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.c?ref=575ac27fd5f18ffc9cfce8a99e987f52c5b898c9", "patch": "@@ -5529,7 +5529,7 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n \n static int\n rs6000_aggregate_candidate (const_tree type, machine_mode *modep,\n-\t\t\t    bool *cxx17_empty_base_seen)\n+\t\t\t    int *empty_base_seen)\n {\n   machine_mode mode;\n   HOST_WIDE_INT size;\n@@ -5600,7 +5600,7 @@ rs6000_aggregate_candidate (const_tree type, machine_mode *modep,\n \t  return -1;\n \n \tcount = rs6000_aggregate_candidate (TREE_TYPE (type), modep,\n-\t\t\t\t\t    cxx17_empty_base_seen);\n+\t\t\t\t\t    empty_base_seen);\n \tif (count == -1\n \t    || !index\n \t    || !TYPE_MAX_VALUE (index)\n@@ -5638,14 +5638,18 @@ rs6000_aggregate_candidate (const_tree type, machine_mode *modep,\n \t    if (TREE_CODE (field) != FIELD_DECL)\n \t      continue;\n \n-\t    if (cxx17_empty_base_field_p (field))\n+\t    if (DECL_FIELD_ABI_IGNORED (field))\n \t      {\n-\t\t*cxx17_empty_base_seen = true;\n+\t\tif (lookup_attribute (\"no_unique_address\",\n+\t\t\t\t      DECL_ATTRIBUTES (field)))\n+\t\t  *empty_base_seen |= 2;\n+\t\telse\n+\t\t  *empty_base_seen |= 1;\n \t\tcontinue;\n \t      }\n \n \t    sub_count = rs6000_aggregate_candidate (TREE_TYPE (field), modep,\n-\t\t\t\t\t\t    cxx17_empty_base_seen);\n+\t\t\t\t\t\t    empty_base_seen);\n \t    if (sub_count < 0)\n \t      return -1;\n \t    count += sub_count;\n@@ -5679,7 +5683,7 @@ rs6000_aggregate_candidate (const_tree type, machine_mode *modep,\n \t      continue;\n \n \t    sub_count = rs6000_aggregate_candidate (TREE_TYPE (field), modep,\n-\t\t\t\t\t\t    cxx17_empty_base_seen);\n+\t\t\t\t\t\t    empty_base_seen);\n \t    if (sub_count < 0)\n \t      return -1;\n \t    count = count > sub_count ? count : sub_count;\n@@ -5720,9 +5724,9 @@ rs6000_discover_homogeneous_aggregate (machine_mode mode, const_tree type,\n       && AGGREGATE_TYPE_P (type))\n     {\n       machine_mode field_mode = VOIDmode;\n-      bool cxx17_empty_base_seen = false;\n+      int empty_base_seen = 0;\n       int field_count = rs6000_aggregate_candidate (type, &field_mode,\n-\t\t\t\t\t\t    &cxx17_empty_base_seen);\n+\t\t\t\t\t\t    &empty_base_seen);\n \n       if (field_count > 0)\n \t{\n@@ -5737,16 +5741,22 @@ rs6000_discover_homogeneous_aggregate (machine_mode mode, const_tree type,\n \t\t*elt_mode = field_mode;\n \t      if (n_elts)\n \t\t*n_elts = field_count;\n-\t      if (cxx17_empty_base_seen && warn_psabi)\n+\t      if (empty_base_seen && warn_psabi)\n \t\t{\n \t\t  static unsigned last_reported_type_uid;\n \t\t  unsigned uid = TYPE_UID (TYPE_MAIN_VARIANT (type));\n \t\t  if (uid != last_reported_type_uid)\n \t\t    {\n-\t\t      inform (input_location,\n-\t\t\t      \"parameter passing for argument of type %qT \"\n-\t\t\t      \"when C++17 is enabled changed to match C++14 \"\n-\t\t\t      \"in GCC 10.1\", type);\n+\t\t      if (empty_base_seen & 1)\n+\t\t\tinform (input_location,\n+\t\t\t\t\"parameter passing for argument of type %qT \"\n+\t\t\t\t\"when C++17 is enabled changed to match C++14 \"\n+\t\t\t\t\"in GCC 10.1\", type);\n+\t\t      else\n+\t\t\tinform (input_location,\n+\t\t\t\t\"parameter passing for argument of type %qT \"\n+\t\t\t\t\"with %<[[no_unique_address]]%> members \"\n+\t\t\t\t\"changed in GCC 10.1\", type);\n \t\t      last_reported_type_uid = uid;\n \t\t    }\n \t\t}"}, {"sha": "d4e16ce7fccc07a4c0c0f96b3fbd3555e82dbf87", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/575ac27fd5f18ffc9cfce8a99e987f52c5b898c9/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/575ac27fd5f18ffc9cfce8a99e987f52c5b898c9/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=575ac27fd5f18ffc9cfce8a99e987f52c5b898c9", "patch": "@@ -7204,7 +7204,9 @@ rs6000_special_round_type_align (tree type, unsigned int computed,\n   tree field = TYPE_FIELDS (type);\n \n   /* Skip all non field decls */\n-  while (field != NULL && TREE_CODE (field) != FIELD_DECL)\n+  while (field != NULL\n+\t && (TREE_CODE (field) != FIELD_DECL\n+\t     || DECL_FIELD_ABI_IGNORED (field)))\n     field = DECL_CHAIN (field);\n \n   if (field != NULL && field != type)\n@@ -7236,7 +7238,9 @@ darwin_rs6000_special_round_type_align (tree type, unsigned int computed,\n   do {\n     tree field = TYPE_FIELDS (type);\n     /* Skip all non field decls */\n-    while (field != NULL && TREE_CODE (field) != FIELD_DECL)\n+    while (field != NULL\n+\t   && (TREE_CODE (field) != FIELD_DECL\n+\t       || DECL_FIELD_ABI_IGNORED (field)))\n       field = DECL_CHAIN (field);\n     if (! field)\n       break;"}, {"sha": "41db16e782fa805ba0f8c443be632ac3ba55e8e8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/575ac27fd5f18ffc9cfce8a99e987f52c5b898c9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/575ac27fd5f18ffc9cfce8a99e987f52c5b898c9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=575ac27fd5f18ffc9cfce8a99e987f52c5b898c9", "patch": "@@ -1,3 +1,11 @@\n+2020-04-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/94707\n+\t* class.c (build_base_field): Set DECL_FIELD_ABI_IGNORED on C++17 empty\n+\tbase artificial FIELD_DECLs.\n+\t(layout_class_type): Set DECL_FIELD_ABI_IGNORED on empty class\n+\tfield_poverlapping_p FIELD_DECLs.\n+\n 2020-04-29  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/94819"}, {"sha": "1f524a319174f77e02a271a1eecec215787cc188", "filename": "gcc/cp/class.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/575ac27fd5f18ffc9cfce8a99e987f52c5b898c9/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/575ac27fd5f18ffc9cfce8a99e987f52c5b898c9/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=575ac27fd5f18ffc9cfce8a99e987f52c5b898c9", "patch": "@@ -4515,6 +4515,7 @@ build_base_field (record_layout_info rli, tree binfo, tree access,\n \t  DECL_FIELD_OFFSET (decl) = BINFO_OFFSET (binfo);\n \t  DECL_FIELD_BIT_OFFSET (decl) = bitsize_zero_node;\n \t  SET_DECL_OFFSET_ALIGN (decl, BITS_PER_UNIT);\n+\t  DECL_FIELD_ABI_IGNORED (decl) = 1;\n \t}\n \n       /* An empty virtual base causes a class to be non-empty\n@@ -6522,7 +6523,10 @@ layout_class_type (tree t, tree *virtuals_p)\n \t  SET_DECL_MODE (field, TYPE_MODE (type));\n \t}\n       else if (might_overlap && is_empty_class (type))\n-\tlayout_empty_base_or_field (rli, field, empty_base_offsets);\n+\t{\n+\t  DECL_FIELD_ABI_IGNORED (field) = 1;\n+\t  layout_empty_base_or_field (rli, field, empty_base_offsets);\n+\t}\n       else\n \tlayout_nonempty_base_or_field (rli, field, NULL_TREE,\n \t\t\t\t       empty_base_offsets);"}, {"sha": "47fc32ed8be6c30116472f5de65a2c28a513b72f", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/575ac27fd5f18ffc9cfce8a99e987f52c5b898c9/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/575ac27fd5f18ffc9cfce8a99e987f52c5b898c9/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=575ac27fd5f18ffc9cfce8a99e987f52c5b898c9", "patch": "@@ -1080,6 +1080,7 @@ hash_tree (struct streamer_tree_cache_d *cache, hash_map<tree, hashval_t> *map,\n \t  hstate.add_flag (DECL_PACKED (t));\n \t  hstate.add_flag (DECL_NONADDRESSABLE_P (t));\n \t  hstate.add_flag (DECL_PADDING_P (t));\n+\t  hstate.add_flag (DECL_FIELD_ABI_IGNORED (t));\n \t  hstate.add_int (DECL_OFFSET_ALIGN (t));\n \t}\n       else if (code == VAR_DECL)"}, {"sha": "e0b1aaf63fe6e81321311e4962d4d8210e22b0c4", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/575ac27fd5f18ffc9cfce8a99e987f52c5b898c9/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/575ac27fd5f18ffc9cfce8a99e987f52c5b898c9/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=575ac27fd5f18ffc9cfce8a99e987f52c5b898c9", "patch": "@@ -1,3 +1,8 @@\n+2020-04-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/94707\n+\t* lto-common.c (compare_tree_sccs_1): Handle DECL_FIELD_ABI_IGNORED.\n+\n 2020-04-17  Martin Liska  <mliska@suse.cz>\n \n \tPR lto/94612"}, {"sha": "c8fd6f5c595882a84bb5a410f8a6df37cacb458b", "filename": "gcc/lto/lto-common.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/575ac27fd5f18ffc9cfce8a99e987f52c5b898c9/gcc%2Flto%2Flto-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/575ac27fd5f18ffc9cfce8a99e987f52c5b898c9/gcc%2Flto%2Flto-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-common.c?ref=575ac27fd5f18ffc9cfce8a99e987f52c5b898c9", "patch": "@@ -1179,6 +1179,7 @@ compare_tree_sccs_1 (tree t1, tree t2, tree **map)\n \t  compare_values (DECL_PACKED);\n \t  compare_values (DECL_NONADDRESSABLE_P);\n \t  compare_values (DECL_PADDING_P);\n+\t  compare_values (DECL_FIELD_ABI_IGNORED);\n \t  compare_values (DECL_OFFSET_ALIGN);\n \t}\n       else if (code == VAR_DECL)"}, {"sha": "a8b69a15ccb0878d4ffa34304146d6f9e54ae1ca", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/575ac27fd5f18ffc9cfce8a99e987f52c5b898c9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/575ac27fd5f18ffc9cfce8a99e987f52c5b898c9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=575ac27fd5f18ffc9cfce8a99e987f52c5b898c9", "patch": "@@ -1,3 +1,13 @@\n+2020-04-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/94707\n+\t* g++.target/powerpc/pr94707-1.C: New test.\n+\t* g++.target/powerpc/pr94707-2.C: New test.\n+\t* g++.target/powerpc/pr94707-3.C: New test.\n+\t* g++.target/powerpc/pr94707-4.C: New test.\n+\t* g++.target/powerpc/pr94707-5.C: New test.\n+\t* g++.target/powerpc/pr94707-4.C: New test.\n+\n 2020-04-29  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/94819"}, {"sha": "45b457395aa3bc340b9c7767db3935ed860596fa", "filename": "gcc/testsuite/g++.target/powerpc/pr94707-1.C", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/575ac27fd5f18ffc9cfce8a99e987f52c5b898c9/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fpowerpc%2Fpr94707-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/575ac27fd5f18ffc9cfce8a99e987f52c5b898c9/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fpowerpc%2Fpr94707-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fpowerpc%2Fpr94707-1.C?ref=575ac27fd5f18ffc9cfce8a99e987f52c5b898c9", "patch": "@@ -0,0 +1,38 @@\n+// PR target/94707\n+// { dg-do compile { target powerpc_elfv2 } }\n+// { dg-options \"-O2 -std=c++14\" }\n+// Test that for all the calls in this testcase the C++17 empty base\n+// artificial fields and [[no_unique_address]] empty class non-static\n+// data members are ignored in the decision about passing homogeneous\n+// arguments.\n+// { dg-final { scan-assembler-times {(?n)^\\s+lfs\\s+(?:%f)?4,} 7 } }\n+\n+struct X { };\n+struct Y { int : 0; };\n+struct Z { int : 0; Y y; };\n+struct U : public X { X q; };\n+struct A { float a, b, c, d; };\n+struct B : public X { float a, b, c, d; };\n+struct C : public Y { float a, b, c, d; };\n+struct D : public Z { float a, b, c, d; };\n+struct E : public U { float a, b, c, d; };\n+struct F { [[no_unique_address]] X x; float a, b, c, d; };\n+struct G { [[no_unique_address]] Y y; float a, b, c, d; };\n+struct H { [[no_unique_address]] Z z; float a, b, c, d; };\n+struct I { [[no_unique_address]] U u; float a, b, c, d; };\n+struct J { float a, b; [[no_unique_address]] X x; float c, d; };\n+struct K { float a, b; [[no_unique_address]] Y y; float c, d; };\n+struct L { float a, b; [[no_unique_address]] Z z; float c, d; };\n+struct M { float a, b; [[no_unique_address]] U u; float c, d; };\n+#define T(S, s) extern S s; extern void foo##s (S); int bar##s () { foo##s (s); return 0; }\n+// { dg-message \"parameter passing for argument of type 'F' with '\\\\\\[\\\\\\[no_unique_address\\\\\\]\\\\\\]' members changed in GCC 10.1\" \"\" { target *-*-* } .-1 }\n+// { dg-message \"parameter passing for argument of type 'G' with '\\\\\\[\\\\\\[no_unique_address\\\\\\]\\\\\\]' members changed in GCC 10.1\" \"\" { target *-*-* } .-2 }\n+// { dg-message \"parameter passing for argument of type 'J' with '\\\\\\[\\\\\\[no_unique_address\\\\\\]\\\\\\]' members changed in GCC 10.1\" \"\" { target *-*-* } .-3 }\n+// { dg-message \"parameter passing for argument of type 'K' with '\\\\\\[\\\\\\[no_unique_address\\\\\\]\\\\\\]' members changed in GCC 10.1\" \"\" { target *-*-* } .-4 }\n+T (A, a)\n+T (B, b)\n+T (C, c)\n+T (F, f)\n+T (G, g)\n+T (J, j)\n+T (K, k)"}, {"sha": "6d26146a0dcb754ca43b508a85d213576b8f91ff", "filename": "gcc/testsuite/g++.target/powerpc/pr94707-2.C", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/575ac27fd5f18ffc9cfce8a99e987f52c5b898c9/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fpowerpc%2Fpr94707-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/575ac27fd5f18ffc9cfce8a99e987f52c5b898c9/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fpowerpc%2Fpr94707-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fpowerpc%2Fpr94707-2.C?ref=575ac27fd5f18ffc9cfce8a99e987f52c5b898c9", "patch": "@@ -0,0 +1,34 @@\n+// PR target/94707\n+// { dg-do compile { target powerpc_elfv2 } }\n+// { dg-options \"-O2 -std=c++14\" }\n+// Test that for no calls in this testcase the C++17 empty base\n+// artificial fields and [[no_unique_address]] empty class non-static\n+// data members are ignored in the decision about passing homogeneous\n+// arguments.\n+// { dg-final { scan-assembler-not {(?n)^\\s+lfs\\s+(?:%f)?4,} } }\n+\n+struct X { };\n+struct Y { int : 0; };\n+struct Z { int : 0; Y y; };\n+struct U : public X { X q; };\n+struct A { float a, b, c, d; };\n+struct B : public X { float a, b, c, d; };\n+struct C : public Y { float a, b, c, d; };\n+struct D : public Z { float a, b, c, d; };\n+struct E : public U { float a, b, c, d; };\n+struct F { [[no_unique_address]] X x; float a, b, c, d; };\n+struct G { [[no_unique_address]] Y y; float a, b, c, d; };\n+struct H { [[no_unique_address]] Z z; float a, b, c, d; };\n+struct I { [[no_unique_address]] U u; float a, b, c, d; };\n+struct J { float a, b; [[no_unique_address]] X x; float c, d; };\n+struct K { float a, b; [[no_unique_address]] Y y; float c, d; };\n+struct L { float a, b; [[no_unique_address]] Z z; float c, d; };\n+struct M { float a, b; [[no_unique_address]] U u; float c, d; };\n+#define T(S, s) extern S s; extern void foo##s (S); int bar##s () { foo##s (s); return 0; }\n+// { dg-bogus \"parameter passing for argument of type\" }\n+T (D, d)\n+T (E, e)\n+T (H, h)\n+T (I, i)\n+T (L, l)\n+T (M, m)"}, {"sha": "52a6a9a95127760cfdd1309d180ca32fe54cb0d3", "filename": "gcc/testsuite/g++.target/powerpc/pr94707-3.C", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/575ac27fd5f18ffc9cfce8a99e987f52c5b898c9/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fpowerpc%2Fpr94707-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/575ac27fd5f18ffc9cfce8a99e987f52c5b898c9/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fpowerpc%2Fpr94707-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fpowerpc%2Fpr94707-3.C?ref=575ac27fd5f18ffc9cfce8a99e987f52c5b898c9", "patch": "@@ -0,0 +1,40 @@\n+// PR target/94707\n+// { dg-do compile { target powerpc_elfv2 } }\n+// { dg-options \"-O2 -std=c++17\" }\n+// Test that for all the calls in this testcase the C++17 empty base\n+// artificial fields and [[no_unique_address]] empty class non-static\n+// data members are ignored in the decision about passing homogeneous\n+// arguments.\n+// { dg-final { scan-assembler-times {(?n)^\\s+lfs\\s+(?:%f)?4,} 7 } }\n+\n+struct X { };\n+struct Y { int : 0; };\n+struct Z { int : 0; Y y; };\n+struct U : public X { X q; };\n+struct A { float a, b, c, d; };\n+struct B : public X { float a, b, c, d; };\n+struct C : public Y { float a, b, c, d; };\n+struct D : public Z { float a, b, c, d; };\n+struct E : public U { float a, b, c, d; };\n+struct F { [[no_unique_address]] X x; float a, b, c, d; };\n+struct G { [[no_unique_address]] Y y; float a, b, c, d; };\n+struct H { [[no_unique_address]] Z z; float a, b, c, d; };\n+struct I { [[no_unique_address]] U u; float a, b, c, d; };\n+struct J { float a, b; [[no_unique_address]] X x; float c, d; };\n+struct K { float a, b; [[no_unique_address]] Y y; float c, d; };\n+struct L { float a, b; [[no_unique_address]] Z z; float c, d; };\n+struct M { float a, b; [[no_unique_address]] U u; float c, d; };\n+#define T(S, s) extern S s; extern void foo##s (S); int bar##s () { foo##s (s); return 0; }\n+// { dg-message \"parameter passing for argument of type 'B' when C\\\\+\\\\+17 is enabled changed to match C\\\\+\\\\+14 in GCC 10.1\" \"\" { target *-*-* } .-1 }\n+// { dg-message \"parameter passing for argument of type 'C' when C\\\\+\\\\+17 is enabled changed to match C\\\\+\\\\+14 in GCC 10.1\" \"\" { target *-*-* } .-2 }\n+// { dg-message \"parameter passing for argument of type 'F' with '\\\\\\[\\\\\\[no_unique_address\\\\\\]\\\\\\]' members changed in GCC 10.1\" \"\" { target *-*-* } .-3 }\n+// { dg-message \"parameter passing for argument of type 'G' with '\\\\\\[\\\\\\[no_unique_address\\\\\\]\\\\\\]' members changed in GCC 10.1\" \"\" { target *-*-* } .-4 }\n+// { dg-message \"parameter passing for argument of type 'J' with '\\\\\\[\\\\\\[no_unique_address\\\\\\]\\\\\\]' members changed in GCC 10.1\" \"\" { target *-*-* } .-5 }\n+// { dg-message \"parameter passing for argument of type 'K' with '\\\\\\[\\\\\\[no_unique_address\\\\\\]\\\\\\]' members changed in GCC 10.1\" \"\" { target *-*-* } .-6 }\n+T (A, a)\n+T (B, b)\n+T (C, c)\n+T (F, f)\n+T (G, g)\n+T (J, j)\n+T (K, k)"}, {"sha": "0e9bb3b6d4d60e15f2bcd66731f23c4ed83019d8", "filename": "gcc/testsuite/g++.target/powerpc/pr94707-4.C", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/575ac27fd5f18ffc9cfce8a99e987f52c5b898c9/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fpowerpc%2Fpr94707-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/575ac27fd5f18ffc9cfce8a99e987f52c5b898c9/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fpowerpc%2Fpr94707-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fpowerpc%2Fpr94707-4.C?ref=575ac27fd5f18ffc9cfce8a99e987f52c5b898c9", "patch": "@@ -0,0 +1,34 @@\n+// PR target/94707\n+// { dg-do compile { target powerpc_elfv2 } }\n+// { dg-options \"-O2 -std=c++17\" }\n+// Test that for no calls in this testcase the C++17 empty base\n+// artificial fields and [[no_unique_address]] empty class non-static\n+// data members are ignored in the decision about passing homogeneous\n+// arguments.\n+// { dg-final { scan-assembler-not {(?n)^\\s+lfs\\s+(?:%f)?4,} } }\n+\n+struct X { };\n+struct Y { int : 0; };\n+struct Z { int : 0; Y y; };\n+struct U : public X { X q; };\n+struct A { float a, b, c, d; };\n+struct B : public X { float a, b, c, d; };\n+struct C : public Y { float a, b, c, d; };\n+struct D : public Z { float a, b, c, d; };\n+struct E : public U { float a, b, c, d; };\n+struct F { [[no_unique_address]] X x; float a, b, c, d; };\n+struct G { [[no_unique_address]] Y y; float a, b, c, d; };\n+struct H { [[no_unique_address]] Z z; float a, b, c, d; };\n+struct I { [[no_unique_address]] U u; float a, b, c, d; };\n+struct J { float a, b; [[no_unique_address]] X x; float c, d; };\n+struct K { float a, b; [[no_unique_address]] Y y; float c, d; };\n+struct L { float a, b; [[no_unique_address]] Z z; float c, d; };\n+struct M { float a, b; [[no_unique_address]] U u; float c, d; };\n+#define T(S, s) extern S s; extern void foo##s (S); int bar##s () { foo##s (s); return 0; }\n+// { dg-bogus \"parameter passing for argument of type\" }\n+T (D, d)\n+T (E, e)\n+T (H, h)\n+T (I, i)\n+T (L, l)\n+T (M, m)"}, {"sha": "ed3d1b25aeb31c5883d7bf9e2fa57cd084467bc7", "filename": "gcc/testsuite/g++.target/powerpc/pr94707-5.C", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/575ac27fd5f18ffc9cfce8a99e987f52c5b898c9/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fpowerpc%2Fpr94707-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/575ac27fd5f18ffc9cfce8a99e987f52c5b898c9/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fpowerpc%2Fpr94707-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fpowerpc%2Fpr94707-5.C?ref=575ac27fd5f18ffc9cfce8a99e987f52c5b898c9", "patch": "@@ -0,0 +1,35 @@\n+// PR target/94707\n+// { dg-do compile { target powerpc*-*-darwin* } }\n+// { dg-require-effective-target ilp32 }\n+// { dg-options \"-std=c++14\" }\n+\n+struct X { };\n+struct Y { int : 0; };\n+struct Z { int : 0; Y y; };\n+struct U : public X { X q; };\n+struct A { double a; };\n+struct B : public X { double a; };\n+struct C : public Y { double a; };\n+struct D : public Z { double a; };\n+struct E : public U { double a; };\n+struct F { [[no_unique_address]] X x; double a; };\n+struct G { [[no_unique_address]] Y y; double a; };\n+struct H { [[no_unique_address]] Z z; double a; };\n+struct I { [[no_unique_address]] U u; double a; };\n+struct J { double a; [[no_unique_address]] X x; };\n+struct K { double a; [[no_unique_address]] Y y; };\n+struct L { double a; [[no_unique_address]] Z z; };\n+struct M { double a; [[no_unique_address]] U u; };\n+static_assert (__alignof__ (A) == 8, \"\");\n+static_assert (__alignof__ (B) == 8, \"\");\n+static_assert (__alignof__ (C) == 8, \"\");\n+static_assert (__alignof__ (D) == 4, \"\");\n+static_assert (__alignof__ (E) == 4, \"\");\n+static_assert (__alignof__ (F) == 8, \"\");\n+static_assert (__alignof__ (G) == 8, \"\");\n+static_assert (__alignof__ (H) == 4, \"\");\n+static_assert (__alignof__ (I) == 4, \"\");\n+static_assert (__alignof__ (J) == 8, \"\");\n+static_assert (__alignof__ (K) == 8, \"\");\n+static_assert (__alignof__ (L) == 8, \"\");\n+static_assert (__alignof__ (M) == 8, \"\");"}, {"sha": "65dcca590031facbc480b2aa3cb0a658a01eefa9", "filename": "gcc/testsuite/g++.target/powerpc/pr94707-6.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/575ac27fd5f18ffc9cfce8a99e987f52c5b898c9/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fpowerpc%2Fpr94707-6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/575ac27fd5f18ffc9cfce8a99e987f52c5b898c9/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fpowerpc%2Fpr94707-6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fpowerpc%2Fpr94707-6.C?ref=575ac27fd5f18ffc9cfce8a99e987f52c5b898c9", "patch": "@@ -0,0 +1,6 @@\n+// PR target/94707\n+// { dg-do compile { target powerpc*-*-darwin* } }\n+// { dg-require-effective-target ilp32 }\n+// { dg-options \"-O2 -std=c++17\" }\n+\n+#include \"pr94707-5.C\""}, {"sha": "eb01c2434cd0bd577937a23f6c0c0b9f71454545", "filename": "gcc/tree-core.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/575ac27fd5f18ffc9cfce8a99e987f52c5b898c9/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/575ac27fd5f18ffc9cfce8a99e987f52c5b898c9/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=575ac27fd5f18ffc9cfce8a99e987f52c5b898c9", "patch": "@@ -1709,7 +1709,8 @@ struct GTY(()) tree_decl_common {\n   unsigned lang_flag_8 : 1;\n \n   /* In VAR_DECL and PARM_DECL, this is DECL_REGISTER\n-     IN TRANSLATION_UNIT_DECL, this is TRANSLATION_UNIT_WARN_EMPTY_P.  */\n+     In TRANSLATION_UNIT_DECL, this is TRANSLATION_UNIT_WARN_EMPTY_P.\n+     In FIELD_DECL, this is DECL_FIELD_ABI_IGNORED.  */\n   unsigned decl_flag_0 : 1;\n   /* In FIELD_DECL, this is DECL_BIT_FIELD\n      In VAR_DECL and FUNCTION_DECL, this is DECL_EXTERNAL."}, {"sha": "5b653cdf5ad2acb6bd47c94697f5fb15b3c41266", "filename": "gcc/tree-streamer-in.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/575ac27fd5f18ffc9cfce8a99e987f52c5b898c9/gcc%2Ftree-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/575ac27fd5f18ffc9cfce8a99e987f52c5b898c9/gcc%2Ftree-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-in.c?ref=575ac27fd5f18ffc9cfce8a99e987f52c5b898c9", "patch": "@@ -256,6 +256,7 @@ unpack_ts_decl_common_value_fields (struct bitpack_d *bp, tree expr)\n       DECL_PACKED (expr) = (unsigned) bp_unpack_value (bp, 1);\n       DECL_NONADDRESSABLE_P (expr) = (unsigned) bp_unpack_value (bp, 1);\n       DECL_PADDING_P (expr) = (unsigned) bp_unpack_value (bp, 1);\n+      DECL_FIELD_ABI_IGNORED (expr) = (unsigned) bp_unpack_value (bp, 1);\n       expr->decl_common.off_align = bp_unpack_value (bp, 8);\n     }\n "}, {"sha": "0b54ffb63f35c55ad2dda884b0cb5d0f79dc8ffa", "filename": "gcc/tree-streamer-out.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/575ac27fd5f18ffc9cfce8a99e987f52c5b898c9/gcc%2Ftree-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/575ac27fd5f18ffc9cfce8a99e987f52c5b898c9/gcc%2Ftree-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-out.c?ref=575ac27fd5f18ffc9cfce8a99e987f52c5b898c9", "patch": "@@ -217,6 +217,7 @@ pack_ts_decl_common_value_fields (struct bitpack_d *bp, tree expr)\n       bp_pack_value (bp, DECL_PACKED (expr), 1);\n       bp_pack_value (bp, DECL_NONADDRESSABLE_P (expr), 1);\n       bp_pack_value (bp, DECL_PADDING_P (expr), 1);\n+      bp_pack_value (bp, DECL_FIELD_ABI_IGNORED (expr), 1);\n       bp_pack_value (bp, expr->decl_common.off_align, 8);\n     }\n "}, {"sha": "bd0c51b2a182533d88a636b95971f5621f0c27e8", "filename": "gcc/tree.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/575ac27fd5f18ffc9cfce8a99e987f52c5b898c9/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/575ac27fd5f18ffc9cfce8a99e987f52c5b898c9/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=575ac27fd5f18ffc9cfce8a99e987f52c5b898c9", "patch": "@@ -2750,6 +2750,13 @@ extern void decl_value_expr_insert (tree, tree);\n /* In a FIELD_DECL, indicates this field should be bit-packed.  */\n #define DECL_PACKED(NODE) (FIELD_DECL_CHECK (NODE)->base.u.bits.packed_flag)\n \n+/* In a FIELD_DECL, indicates this field should be ignored for ABI decisions\n+   like passing/returning containing struct by value.\n+   Set for C++17 empty base artificial FIELD_DECLs as well as\n+   empty [[no_unique_address]] non-static data members.  */\n+#define DECL_FIELD_ABI_IGNORED(NODE) \\\n+  (FIELD_DECL_CHECK (NODE)->decl_common.decl_flag_0)\n+\n /* Nonzero in a FIELD_DECL means it is a bit field, and must be accessed\n    specially.  */\n #define DECL_BIT_FIELD(NODE) (FIELD_DECL_CHECK (NODE)->decl_common.decl_flag_1)"}]}