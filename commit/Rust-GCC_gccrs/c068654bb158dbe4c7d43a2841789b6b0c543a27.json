{"sha": "c068654bb158dbe4c7d43a2841789b6b0c543a27", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzA2ODY1NGJiMTU4ZGJlNGM3ZDQzYTI4NDE3ODliNmIwYzU0M2EyNw==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@arm.com", "date": "2013-09-17T04:59:08Z"}, "committer": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2013-09-17T04:59:08Z"}, "message": "gimple-ssa-strength-reduction.c (backtrace_base_for_ref): New.\n\n\n\t* gimple-ssa-strength-reduction.c (backtrace_base_for_ref): New.\n\t(restructure_reference): Call backtrace_base_for_ref.\n\n\t* gcc.dg/tree-ssa/slsr-39.c: New test.\n\nFrom-SVN: r202643", "tree": {"sha": "e7719f12944e0a187609506cfd9b05c37271f166", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7719f12944e0a187609506cfd9b05c37271f166"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c068654bb158dbe4c7d43a2841789b6b0c543a27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c068654bb158dbe4c7d43a2841789b6b0c543a27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c068654bb158dbe4c7d43a2841789b6b0c543a27", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c068654bb158dbe4c7d43a2841789b6b0c543a27/comments", "author": null, "committer": null, "parents": [{"sha": "567969e484ec339bc94f7fbcb5668fb92e40183e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/567969e484ec339bc94f7fbcb5668fb92e40183e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/567969e484ec339bc94f7fbcb5668fb92e40183e"}], "stats": {"total": 102, "additions": 98, "deletions": 4}, "files": [{"sha": "ebb3564381e3bb0988399947dee3454ad3f89209", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c068654bb158dbe4c7d43a2841789b6b0c543a27/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c068654bb158dbe4c7d43a2841789b6b0c543a27/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c068654bb158dbe4c7d43a2841789b6b0c543a27", "patch": "@@ -1,3 +1,8 @@\n+2013-09-17  Bin Cheng  <bin.cheng@arm.com>\n+\n+\t* gimple-ssa-strength-reduction.c (backtrace_base_for_ref): New.\n+\t(restructure_reference): Call backtrace_base_for_ref.\n+\n 2013-09-17  Alan Modra  <amodra@gmail.com>\n \n \tPR target/57589"}, {"sha": "53ed6b34332af345817bbfa54e9dd458d525fa72", "filename": "gcc/gimple-ssa-strength-reduction.c", "status": "modified", "additions": 63, "deletions": 4, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c068654bb158dbe4c7d43a2841789b6b0c543a27/gcc%2Fgimple-ssa-strength-reduction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c068654bb158dbe4c7d43a2841789b6b0c543a27/gcc%2Fgimple-ssa-strength-reduction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-strength-reduction.c?ref=c068654bb158dbe4c7d43a2841789b6b0c543a27", "patch": "@@ -750,6 +750,57 @@ slsr_process_phi (gimple phi, bool speed)\n   add_cand_for_stmt (phi, c);\n }\n \n+/* Given PBASE which is a pointer to tree, look up the defining\n+   statement for it and check whether the candidate is in the\n+   form of:\n+\n+     X = B + (1 * S), S is integer constant\n+     X = B + (i * S), S is integer one\n+\n+   If so, set PBASE to the candidate's base_expr and return double\n+   int (i * S).\n+   Otherwise, just return double int zero.  */\n+\n+static double_int\n+backtrace_base_for_ref (tree *pbase)\n+{\n+  tree base_in = *pbase;\n+  slsr_cand_t base_cand;\n+\n+  STRIP_NOPS (base_in);\n+  if (TREE_CODE (base_in) != SSA_NAME)\n+    return tree_to_double_int (integer_zero_node);\n+\n+  base_cand = base_cand_from_table (base_in);\n+\n+  while (base_cand && base_cand->kind != CAND_PHI)\n+    {\n+      if (base_cand->kind == CAND_ADD\n+\t  && base_cand->index.is_one ()\n+\t  && TREE_CODE (base_cand->stride) == INTEGER_CST)\n+\t{\n+\t  /* X = B + (1 * S), S is integer constant.  */\n+\t  *pbase = base_cand->base_expr;\n+\t  return tree_to_double_int (base_cand->stride);\n+\t}\n+      else if (base_cand->kind == CAND_ADD\n+\t       && TREE_CODE (base_cand->stride) == INTEGER_CST\n+\t       && integer_onep (base_cand->stride))\n+        {\n+\t  /* X = B + (i * S), S is integer one.  */\n+\t  *pbase = base_cand->base_expr;\n+\t  return base_cand->index;\n+\t}\n+\n+      if (base_cand->next_interp)\n+\tbase_cand = lookup_cand (base_cand->next_interp);\n+      else\n+\tbase_cand = NULL;\n+    }\n+\n+  return tree_to_double_int (integer_zero_node);\n+}\n+\n /* Look for the following pattern:\n \n     *PBASE:    MEM_REF (T1, C1)\n@@ -767,7 +818,14 @@ slsr_process_phi (gimple phi, bool speed)\n \n     *PBASE:    T1\n     *POFFSET:  MULT_EXPR (T2, C3)\n-    *PINDEX:   C1 + (C2 * C3) + C4  */\n+    *PINDEX:   C1 + (C2 * C3) + C4\n+\n+   When T2 is recorded by a CAND_ADD in the form of (T2' + C5), it\n+   will be further restructured to:\n+\n+    *PBASE:    T1\n+    *POFFSET:  MULT_EXPR (T2', C3)\n+    *PINDEX:   C1 + (C2 * C3) + C4 + (C5 * C3)  */\n \n static bool\n restructure_reference (tree *pbase, tree *poffset, double_int *pindex,\n@@ -777,7 +835,7 @@ restructure_reference (tree *pbase, tree *poffset, double_int *pindex,\n   double_int index = *pindex;\n   double_int bpu = double_int::from_uhwi (BITS_PER_UNIT);\n   tree mult_op0, mult_op1, t1, t2, type;\n-  double_int c1, c2, c3, c4;\n+  double_int c1, c2, c3, c4, c5;\n \n   if (!base\n       || !offset\n@@ -823,11 +881,12 @@ restructure_reference (tree *pbase, tree *poffset, double_int *pindex,\n     }\n \n   c4 = index.udiv (bpu, FLOOR_DIV_EXPR);\n+  c5 = backtrace_base_for_ref (&t2);\n \n   *pbase = t1;\n-  *poffset = fold_build2 (MULT_EXPR, sizetype, t2,\n+  *poffset = fold_build2 (MULT_EXPR, sizetype, fold_convert (sizetype, t2),\n \t\t\t  double_int_to_tree (sizetype, c3));\n-  *pindex = c1 + c2 * c3 + c4;\n+  *pindex = c1 + c2 * c3 + c4 + c5 * c3;\n   *ptype = type;\n \n   return true;"}, {"sha": "fedd45760bb8fb5e319701875dcb086db6404588", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c068654bb158dbe4c7d43a2841789b6b0c543a27/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c068654bb158dbe4c7d43a2841789b6b0c543a27/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c068654bb158dbe4c7d43a2841789b6b0c543a27", "patch": "@@ -1,3 +1,7 @@\n+2013-09-17  Bin Cheng  <bin.cheng@arm.com>\n+\n+\t* gcc.dg/tree-ssa/slsr-39.c: New test.\n+\n 2013-09-16  Xinliang David Li  <davidxl@google.com>\n \n \t* gcc.misc-tests/help.exp: Optimizer help change."}, {"sha": "8cc279857c28bf0fd4f47753f03ca9ec4904c1f8", "filename": "gcc/testsuite/gcc.dg/tree-ssa/slsr-39.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c068654bb158dbe4c7d43a2841789b6b0c543a27/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fslsr-39.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c068654bb158dbe4c7d43a2841789b6b0c543a27/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fslsr-39.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fslsr-39.c?ref=c068654bb158dbe4c7d43a2841789b6b0c543a27", "patch": "@@ -0,0 +1,26 @@\n+/* Verify straight-line strength reduction for back-tracing\n+   CAND_ADD for T2 in:\n+\n+    *PBASE:    T1\n+    *POFFSET:  MULT_EXPR (T2, C3)\n+    *PINDEX:   C1 + (C2 * C3) + C4  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-slsr\" } */\n+\n+typedef int arr_2[50][50];\n+\n+void foo (arr_2 a2, int v1)\n+{\n+  int i, j;\n+\n+  i = v1 + 5;\n+  j = i;\n+  a2 [i] [j++] = i;\n+  a2 [i] [j++] = i;\n+  a2 [i] [i-1] += 1;\n+  return;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"MEM\" 4 \"slsr\" } } */\n+/* { dg-final { cleanup-tree-dump \"slsr\" } } */"}]}