{"sha": "3c0194d7ff21d61c02f3c6b111c83ef24a69e1f0", "node_id": "C_kwDOANBUbNoAKDNjMDE5NGQ3ZmYyMWQ2MWMwMmYzYzZiMTExYzgzZWYyNGE2OWUxZjA", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-10-11T10:27:10Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-10-13T11:11:12Z"}, "message": "tree-optimization/102659 - avoid undefined overflow after if-conversion\n\nThe following makes sure to rewrite arithmetic with undefined behavior\non overflow to a well-defined variant when moving them to be always\nexecuted as part of doing if-conversion for loop vectorization.\n\n2021-10-11  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/102659\n\t* tree-if-conv.c (need_to_rewrite_undefined): New flag.\n\t(if_convertible_gimple_assign_stmt_p): Mark the loop for\n\trewrite when stmts with undefined behavior on integer\n\toverflow appear.\n\t(combine_blocks): Predicate also when we need to rewrite stmts.\n\t(predicate_statements): Rewrite affected stmts to something\n\twith well-defined behavior on overflow.\n\t(tree_if_conversion): Initialize need_to_rewrite_undefined.\n\n\t* gcc.dg/torture/pr69760.c: Adjust the testcase.\n\t* gcc.target/i386/avx2-vect-mask-store-move1.c: Expect to move\n\tthe conversions to unsigned as well.", "tree": {"sha": "8ffe45c73c7ed019e0f9f1eea777ed3eb47e9b9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ffe45c73c7ed019e0f9f1eea777ed3eb47e9b9f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c0194d7ff21d61c02f3c6b111c83ef24a69e1f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c0194d7ff21d61c02f3c6b111c83ef24a69e1f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c0194d7ff21d61c02f3c6b111c83ef24a69e1f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c0194d7ff21d61c02f3c6b111c83ef24a69e1f0/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77c7abe3588d407ed820224f8d1b1a17a16831a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77c7abe3588d407ed820224f8d1b1a17a16831a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77c7abe3588d407ed820224f8d1b1a17a16831a0"}], "stats": {"total": 33, "additions": 29, "deletions": 4}, "files": [{"sha": "47e01ae59bd2581db5682bc07dc956c8ecf35292", "filename": "gcc/testsuite/gcc.dg/torture/pr69760.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c0194d7ff21d61c02f3c6b111c83ef24a69e1f0/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr69760.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c0194d7ff21d61c02f3c6b111c83ef24a69e1f0/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr69760.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr69760.c?ref=3c0194d7ff21d61c02f3c6b111c83ef24a69e1f0", "patch": "@@ -1,11 +1,10 @@\n /* PR tree-optimization/69760 */\n /* { dg-do run { target { { *-*-linux* *-*-gnu* *-*-uclinux* } && mmap } } } */\n-/* { dg-options \"-O2\" } */\n \n #include <unistd.h>\n #include <sys/mman.h>\n \n-__attribute__((noinline, noclone)) void\n+__attribute__((noinline, noclone)) static void\n test_func (double *a, int L, int m, int n, int N)\n {\n   int i, k;"}, {"sha": "6a47a09c8357777271ffc41eea04deaac4c61b6c", "filename": "gcc/testsuite/gcc.target/i386/avx2-vect-mask-store-move1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c0194d7ff21d61c02f3c6b111c83ef24a69e1f0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vect-mask-store-move1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c0194d7ff21d61c02f3c6b111c83ef24a69e1f0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vect-mask-store-move1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vect-mask-store-move1.c?ref=3c0194d7ff21d61c02f3c6b111c83ef24a69e1f0", "patch": "@@ -78,4 +78,4 @@ avx2_test (void)\n       abort ();\n }\n \n-/* { dg-final { scan-tree-dump-times \"Move stmt to created bb\" 6 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Move stmt to created bb\" 10 \"vect\" } } */"}, {"sha": "6a67acfeaae21405b0dadad88ab03cbe2f9465c1", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c0194d7ff21d61c02f3c6b111c83ef24a69e1f0/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c0194d7ff21d61c02f3c6b111c83ef24a69e1f0/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=3c0194d7ff21d61c02f3c6b111c83ef24a69e1f0", "patch": "@@ -132,6 +132,11 @@ along with GCC; see the file COPYING3.  If not see\n    predicate_statements for the kinds of predication we support.  */\n static bool need_to_predicate;\n \n+/* True if we have to rewrite stmts that may invoke undefined behavior\n+   when a condition C was false so it doesn't if it is always executed.\n+   See predicate_statements for the kinds of predication we support.  */\n+static bool need_to_rewrite_undefined;\n+\n /* Indicate if there are any complicated PHIs that need to be handled in\n    if-conversion.  Complicated PHI has more than two arguments and can't\n    be degenerated to two arguments PHI.  See more information in comment\n@@ -1042,6 +1047,12 @@ if_convertible_gimple_assign_stmt_p (gimple *stmt,\n \tfprintf (dump_file, \"tree could trap...\\n\");\n       return false;\n     }\n+  else if (INTEGRAL_TYPE_P (TREE_TYPE (lhs))\n+\t   && TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (lhs))\n+\t   && arith_code_with_undefined_signed_overflow\n+\t\t\t\t(gimple_assign_rhs_code (stmt)))\n+    /* We have to rewrite stmts with undefined overflow.  */\n+    need_to_rewrite_undefined = true;\n \n   /* When if-converting stores force versioning, likewise if we\n      ended up generating store data races.  */\n@@ -2563,6 +2574,20 @@ predicate_statements (loop_p loop)\n \n \t      gsi_replace (&gsi, new_stmt, true);\n \t    }\n+\t  else if (INTEGRAL_TYPE_P (TREE_TYPE (gimple_assign_lhs (stmt)))\n+\t\t   && TYPE_OVERFLOW_UNDEFINED\n+\t\t\t(TREE_TYPE (gimple_assign_lhs (stmt)))\n+\t\t   && arith_code_with_undefined_signed_overflow\n+\t\t\t\t\t\t(gimple_assign_rhs_code (stmt)))\n+\t    {\n+\t      gsi_remove (&gsi, true);\n+\t      gsi_insert_seq_before (&gsi, rewrite_to_defined_overflow (stmt),\n+\t\t\t\t     GSI_SAME_STMT);\n+\t      if (gsi_end_p (gsi))\n+\t\tgsi = gsi_last_bb (gimple_bb (stmt));\n+\t      else\n+\t\tgsi_prev (&gsi);\n+\t    }\n \t  else if (gimple_vdef (stmt))\n \t    {\n \t      tree lhs = gimple_assign_lhs (stmt);\n@@ -2647,7 +2672,7 @@ combine_blocks (class loop *loop)\n   insert_gimplified_predicates (loop);\n   predicate_all_scalar_phis (loop);\n \n-  if (need_to_predicate)\n+  if (need_to_predicate || need_to_rewrite_undefined)\n     predicate_statements (loop);\n \n   /* Merge basic blocks.  */\n@@ -3148,6 +3173,7 @@ tree_if_conversion (class loop *loop, vec<gimple *> *preds)\n   rloop = NULL;\n   ifc_bbs = NULL;\n   need_to_predicate = false;\n+  need_to_rewrite_undefined = false;\n   any_complicated_phi = false;\n \n   /* Apply more aggressive if-conversion when loop or its outer loop were"}]}