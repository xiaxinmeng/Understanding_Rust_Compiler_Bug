{"sha": "f2ae4b2bd03c98446d25729a4483b35e515a08d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJhZTRiMmJkMDNjOTg0NDZkMjU3MjlhNDQ4M2IzNWU1MTVhMDhkNA==", "commit": {"author": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2005-11-04T08:44:29Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2005-11-04T08:44:29Z"}, "message": "re PR libfortran/22298 (libgfortran init() constructor isn't called if executable is statically linked)\n\n\tPR libfortran/22298\n\n\t* runtime/main.c (stupid_function_name_for_static_linking): New\n\tfunction.\n\t* runtime/error.c (internal_error): Call\n\tstupid_function_name_for_static_linking.\n\t* libgfortran.h: Add prototype for\n\tstupid_function_name_for_static_linking.\n\n\t* gcc/testsuite/lib/target-supports.exp\n\t(check_effective_target_static_libgfortran): New\n\tstatic_libgfortran effective target.\n\t* gcc/testsuite/gfortran.dg/static_linking_1.f: New test.\n\t* gcc/testsuite/gfortran.dg/static_linking_1.c: New file.\n\nFrom-SVN: r106484", "tree": {"sha": "2baeb30ac5f592018a46140e8a34f178598a67b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2baeb30ac5f592018a46140e8a34f178598a67b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2ae4b2bd03c98446d25729a4483b35e515a08d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2ae4b2bd03c98446d25729a4483b35e515a08d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2ae4b2bd03c98446d25729a4483b35e515a08d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2ae4b2bd03c98446d25729a4483b35e515a08d4/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a67ec6ab99c91c593138358b56dcc160aa09a015", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a67ec6ab99c91c593138358b56dcc160aa09a015", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a67ec6ab99c91c593138358b56dcc160aa09a015"}], "stats": {"total": 119, "additions": 112, "deletions": 7}, "files": [{"sha": "57c589c4684c408047b69868f31a3f2364e39bdf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ae4b2bd03c98446d25729a4483b35e515a08d4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ae4b2bd03c98446d25729a4483b35e515a08d4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f2ae4b2bd03c98446d25729a4483b35e515a08d4", "patch": "@@ -1,3 +1,12 @@\n+2005-11-04  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\tPR libfortran/22298\n+\t* gcc/testsuite/lib/target-supports.exp\n+\t(check_effective_target_static_libgfortran): New\n+\tstatic_libgfortran effective target.\n+\t* gcc/testsuite/gfortran.dg/static_linking_1.f: New test.\n+\t* gcc/testsuite/gfortran.dg/static_linking_1.c: New file.\n+\n 2005-11-04  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* gcc.dg/pr24615.c: Guard test with { target fpic }.\n@@ -129,11 +138,9 @@\n 2005-11-02  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR fortran/18157\n-        * gfortran.fortran-torture/compile/defined_type_1.f90: New test.\n-\t* gfortran.fortran-torture/compile/defined_type_2.f90: New\n-\ttest.\n-\t* gfortran.fortran-torture/compile/defined_type_3.f90:\n-\tNew test.\n+\t* gfortran.fortran-torture/compile/defined_type_1.f90: New test.\n+\t* gfortran.fortran-torture/compile/defined_type_2.f90: New test.\n+\t* gfortran.fortran-torture/compile/defined_type_3.f90: New test.\n \n 2005-11-02  Mark Mitchell  <mark@codesourcery.com>\n "}, {"sha": "e7d266d68e13cd512d182cc190ff71eeadf9863f", "filename": "gcc/testsuite/gfortran.dg/static_linking_1.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ae4b2bd03c98446d25729a4483b35e515a08d4/gcc%2Ftestsuite%2Fgfortran.dg%2Fstatic_linking_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ae4b2bd03c98446d25729a4483b35e515a08d4/gcc%2Ftestsuite%2Fgfortran.dg%2Fstatic_linking_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fstatic_linking_1.c?ref=f2ae4b2bd03c98446d25729a4483b35e515a08d4", "patch": "@@ -0,0 +1,6 @@\n+extern void f_(void);\n+int main (void)\n+{\n+  f_();\n+  return 0;\n+}"}, {"sha": "5107a07da77570ddb8002e44cbe0545e393c4017", "filename": "gcc/testsuite/gfortran.dg/static_linking_1.f", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ae4b2bd03c98446d25729a4483b35e515a08d4/gcc%2Ftestsuite%2Fgfortran.dg%2Fstatic_linking_1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ae4b2bd03c98446d25729a4483b35e515a08d4/gcc%2Ftestsuite%2Fgfortran.dg%2Fstatic_linking_1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fstatic_linking_1.f?ref=f2ae4b2bd03c98446d25729a4483b35e515a08d4", "patch": "@@ -0,0 +1,11 @@\n+! { dg-require-effective-target static_libgfortran }\n+! { dg-do run }\n+! { dg-additional-sources static_linking_1.c }\n+! { dg-options \"-static\" }\n+!\n+! This testcase checks that statically linking libgfortran with C main()\n+! really calls the constructor function\n+! PR libfortran/22298\n+      subroutine f\n+        print *, \"subroutine output\"\n+      end"}, {"sha": "38eb91ad197d5a59c638fa027b188e2446c02886", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ae4b2bd03c98446d25729a4483b35e515a08d4/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ae4b2bd03c98446d25729a4483b35e515a08d4/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=f2ae4b2bd03c98446d25729a4483b35e515a08d4", "patch": "@@ -602,6 +602,59 @@ proc check_effective_target_fortran_large_int { } {\n     return $et_fortran_large_int_saved\n }\n \n+# Return 1 if we can statically link libgfortran, 0 otherwise.\n+#\n+# When the target name changes, replace the cached result.\n+\n+proc check_effective_target_static_libgfortran { } {\n+    global et_static_libgfortran\n+    global et_static_libgfortran_target_name\n+    global tool\n+\n+    if { ![info exists et_static_libgfortran_target_name] } {\n+       set et_static_libgfortran_target_name \"\"\n+    }\n+\n+    # If the target has changed since we set the cached value, clear it.\n+    set current_target [current_target_name]\n+    if { $current_target != $et_static_libgfortran_target_name } {\n+       verbose \"check_effective_target_static_libgfortran: `$et_static_libgfortran_target_name' `$current_target'\" 2\n+       set et_static_libgfortran_target_name $current_target\n+       if [info exists et_static_libgfortran_saved] {\n+           verbose \"check_effective_target_static_libgfortran: removing cached result\" 2\n+           unset et_static_libgfortran_saved\n+       }\n+    }\n+\n+    if [info exists et_static_libgfortran_saved] {\n+       verbose \"check_effective_target_static_libgfortran returning saved $et_static_libgfortran_saved\" 2\n+    } else {\n+       set et_static_libgfortran_saved 0\n+\n+       # Set up, compile, and execute a test program using static linking.\n+       # Include the current process ID in the file names to prevent\n+       # conflicts with invocations for multiple testsuites.\n+       set src static[pid].f\n+        set exe static[pid].x\n+\n+       set f [open $src \"w\"]\n+       puts $f \"      print *, 'test'\"\n+       puts $f \"      end\"\n+       close $f\n+\n+       verbose \"check_effective_target_static_libgfortran compiling testfile $src\" 2\n+       set lines [${tool}_target_compile $src $exe executable \"-static\"]\n+       file delete $src\n+\n+       if [string match \"\" $lines] then {\n+           # No error message, compilation succeeded.\n+           set et_static_libgfortran_saved 1\n+       }\n+    }\n+\n+    return $et_static_libgfortran_saved\n+}\n+\n # Return 1 if the target supports executing AltiVec instructions, 0\n # otherwise.  Cache the result.\n "}, {"sha": "c3c5a9ecb6ffc4e168fb7a871f2ad6829a6b0573", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ae4b2bd03c98446d25729a4483b35e515a08d4/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ae4b2bd03c98446d25729a4483b35e515a08d4/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=f2ae4b2bd03c98446d25729a4483b35e515a08d4", "patch": "@@ -1,3 +1,13 @@\n+2005-11-04  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\tPR libfortran/22298\n+\t* runtime/main.c (stupid_function_name_for_static_linking): New\n+\tfunction.\n+\t* runtime/error.c (internal_error): Call\n+\tstupid_function_name_for_static_linking.\n+\t* libgfortran.h: Add prototype for\n+\tstupid_function_name_for_static_linking.\n+\n 2005-11-01  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/14994\n@@ -6,8 +16,8 @@\n \n 2005-10-31  Jerry DeLisle  <jvdelisle@verizon.net>\n \n-        PR libgfortran/24584\n-        * io/list_read.c (free_saved): Set saved_used to zero.\n+\tPR libgfortran/24584\n+\t* io/list_read.c (free_saved): Set saved_used to zero.\n \n 2005-10-30  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n "}, {"sha": "791a6f899a0ed0f937b279bf5530c84256fe8357", "filename": "libgfortran/libgfortran.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ae4b2bd03c98446d25729a4483b35e515a08d4/libgfortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ae4b2bd03c98446d25729a4483b35e515a08d4/libgfortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Flibgfortran.h?ref=f2ae4b2bd03c98446d25729a4483b35e515a08d4", "patch": "@@ -434,6 +434,9 @@ iexport_data_proto(filename);\n \n /* main.c */\n \n+extern void stupid_function_name_for_static_linking (void);\n+internal_proto(stupid_function_name_for_static_linking);\n+\n extern void library_start (void);\n internal_proto(library_start);\n "}, {"sha": "64a062ab330618f08a3ea7abd0d99169e0d2fe02", "filename": "libgfortran/runtime/error.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ae4b2bd03c98446d25729a4483b35e515a08d4/libgfortran%2Fruntime%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ae4b2bd03c98446d25729a4483b35e515a08d4/libgfortran%2Fruntime%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Ferror.c?ref=f2ae4b2bd03c98446d25729a4483b35e515a08d4", "patch": "@@ -353,6 +353,13 @@ internal_error (const char *message)\n   recursion_check ();\n   show_locus ();\n   st_printf (\"Internal Error: %s\\n\", message);\n+\n+  /* This function call is here to get the main.o object file included\n+     when linking statically. This works because error.o is supposed to\n+     be always linked in (and the function call is in internal_error\n+     because hopefully it doesn't happen too often).  */\n+  stupid_function_name_for_static_linking();\n+\n   sys_exit (3);\n }\n "}, {"sha": "cfd77f29be9c10fa3b93626021cfed12c3cd0384", "filename": "libgfortran/runtime/main.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ae4b2bd03c98446d25729a4483b35e515a08d4/libgfortran%2Fruntime%2Fmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ae4b2bd03c98446d25729a4483b35e515a08d4/libgfortran%2Fruntime%2Fmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fmain.c?ref=f2ae4b2bd03c98446d25729a4483b35e515a08d4", "patch": "@@ -35,6 +35,14 @@ Boston, MA 02110-1301, USA.  */\n \n #include \"libgfortran.h\"\n \n+/* Stupid function to be sure the constructor is always linked in, even\n+   in the case of static linking.  See PR libfortran/22298 for details.  */\n+void\n+stupid_function_name_for_static_linking (void)\n+{\n+  return;\n+}\n+\n /* This is the offset (in bytes) required to cast from logical(8)* to\n    logical(4)*. and still get the same result.  Will be 0 for little-endian\n    machines and 4 for big-endian machines.  */"}]}