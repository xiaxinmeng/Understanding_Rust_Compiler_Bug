{"sha": "bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmFkMGEzZGYwYmQzZjdlMWZjYThkZmViNzE4ZTk4YTM0MjU3ZGZkYQ==", "commit": {"author": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2017-10-14T16:25:21Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2017-10-14T16:25:21Z"}, "message": "[multiple changes]\n\n2017-10-14  Bob Duff  <duff@adacore.com>\n\n\t* exp_ch6.adb (Is_Build_In_Place_Result_Type): Include code for\n\tenabling b-i-p for nonlimited controlled types (but disabled).\n\n2017-10-14  Justin Squirek  <squirek@adacore.com>\n\n\t* sem_elab.adb (Is_Suitable_Variable_Assignment): Replace call to\n\tHas_Warnings_Off with Warnings_Off.\n\n2017-10-14  Piotr Trojanek  <trojanek@adacore.com>\n\n\t* sinfo.ads (Generic_Parent): Remove wrong (possibly obsolete) comment.\n\n2017-10-14  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_ch3.adb (Analyze_Declarations): Analyze the contract of an\n\tenclosing package at the end of the visible declarations.\n\t* sem_prag.adb (Analyze_Initialization_Item): Suppress the analysis of\n\tan initialization item which is undefined due to some illegality.\n\n2017-10-14  Patrick Bernardi  <bernardi@adacore.com>\n\n\t* ali.adb: Add new ALI line 'T' to read the number of tasks contain\n\twithin each unit that require a default-sized primary and secondary\n\tstack to be generated by the binder.\n\t(Scan_ALI): Scan new 'T' lines.\n\t* ali.ads: Add Primary_Stack_Count and Sec_Stack_Count to Unit_Record.\n\t* bindgen.adb (Gen_Output_File): Count the number of default-sized\n\tstacks within the closure that are to be created by the binder.\n\t(Gen_Adainit, Gen_Output_File_Ada): Generate default-sized secondary\n\tstacks and record these in System.Secodnary_Stack.\n\t(Resolve_Binder_Options): Check if System.Secondary_Stack is in the\n\tclosure of the program being bound.\n\t* bindusg.adb (Display): Add \"-Q\" switch. Remove rouge \"--RTS\" comment.\n\t* exp_ch3.adb (Count_Default_Sized_Task_Stacks): New routine.\n\t(Expand_N_Object_Declaration): Count the number of default-sized stacks\n\tused by task objects contained within the object whose declaration is\n\tbeing expanded.  Only performed when either the restrictions\n\tNo_Implicit_Heap_Allocations or No_Implicit_Task_Allocations are in\n\teffect.\n\t* exp_ch9.adb (Create_Secondary_Stack_For_Task): New routine.\n\t(Expand_N_Task_Type_Declaration): Create a secondary stack as part of\n\tthe expansion of a task type if the size of the stack is known at\n\trun-time and the restrictions No_Implicit_Heap_Allocations or\n\tNo_Implicit_Task_Allocations are in effect.\n\t(Make_Task_Create_Call): If using a restricted profile provide\n\tsecondary stack parameter: either the statically created stack or null.\n\t* lib-load.adb (Create_Dummy_Package_Unit, Load_Unit,\n\tLoad_Main_Source): Include Primary_Stack_Count and Sec_Stack_Count in\n\tUnit_Record initialization expressions.\n\t* lib-writ.adb (Add_Preprocessing_Dependency,\n\tEnsure_System_Dependency): Include Primary_Stack_Count and\n\tSec_Stack_Count in Unit_Record initialization expression.\n\t(Write_ALI): Write T lines.\n\t(Write_Unit_Information): Do not output 'T' lines if there are no\n\tstacks for the binder to generate.\n\t* lib-writ.ads: Updated library information documentation to include\n\tnew T line entry.\n\t* lib.adb (Increment_Primary_Stack_Count): New routine.\n\t(Increment_Sec_Stack_Count): New routine.\n\t(Primary_Stack_Count): New routine.\n\t(Sec_Stack_Count): New routine.\n\t* lib.ads: Add Primary_Stack_Count and Sec_Stack_Count components to\n\tUnit_Record and updated documentation.\n\t(Increment_Primary_Stack_Count): New routine along with pragma Inline.\n\t(Increment_Sec_Stack_Count): New routine along with pragma Inline.\n\t(Primary_Stack_Count): New routine along with pragma Inline.\n\t(Sec_Stack_Count): New routine along with pragma Inline.\n\t* opt.ads: New constant No_Stack_Size.\tFlag Default_Stack_Size\n\tredefined.  New flag Default_Sec_Stack_Size and\n\tQuantity_Of_Default_Size_Sec_Stacks.\n\t* rtfinal.c Fixed erroneous comment.\n\t* rtsfind.ads: Moved RE_Default_Secondary_Stack_Size from\n\tSystem.Secondary_Stack to System.Parameters.  Add RE_SS_Stack.\n\t* sem_util.adb (Number_Of_Elements_In_Array): New routine.\n\t* sem_util.ads (Number_Of_Elements_In_Array): New routine.\n\t* switch-b.adb (Scan_Binder_Switches): Scan \"-Q\" switch.\n\t* libgnarl/s-solita.adb (Get_Sec_Stack_Addr): Removed routine.\n\t(Set_Sec_Stack_Addr): Removed routine.\n\t(Get_Sec_Stack): New routine.\n\t(Set_Sec_Stack): New routine.\n\t(Init_Tasking_Soft_Links): Update System.Soft_Links reference to\n\treflect new procedure and global names.\n\t* libgnarl/s-taprop__linux.adb, libgnarl/s-taprop__mingw.adb,\n\tlibgnarl/s-taprop__posix.adb, libgnarl/s-taprop__solaris.adb,\n\tlibgnarl/s-taprop__vxworks.adb (Register_Foreign_Thread): Update\n\tparameter profile to allow the secondary stack size to be specified.\n\t* libgnarl/s-tarest.adb (Create_Restricted_Task): Update the parameter\n\tprofile to include Sec_Stack_Address.  Update Tasking.Initialize_ATCB\n\tcall to remove Secondary_Stack_Size reference.  Add secondary stack\n\taddress and size to SSL.Create_TSD call.\n\t(Task_Wrapper): Remove secondary stack creation.\n\t* libgnarl/s-tarest.ads (Create_Restricted_Task,\n\tCreate_Restricted_Task_Sequential): Update parameter profile to include\n\tSec_Stack_Address and clarify the Size parameter.\n\t* libgnarl/s-taskin.adb (Initialize_ATCB): Remove Secondary_Stack_Size\n\tfrom profile and body.\n\t(Initialize): Remove Secondary_Stack_Size from Initialize_ATCB call.\n\t* libgnarl/s-taskin.ads: Removed component Secondary_Stack_Size from\n\tCommon_ATCB.\n\t(Initialize_ATCB): Update the parameter profile to remove\n\tSecondary_Stack_Size.\n\t* libgnarl/s-tassta.adb (Create_Task): Updated parameter profile and\n\tcall to Initialize_ATCB.  Add secondary stack address and size to\n\tSSL.Create_TSD call, and catch any storage exception from the call.\n\t(Finalize_Global_Tasks): Update System.Soft_Links references to reflect\n\tnew subprogram and component names.\n\t(Task_Wrapper): Remove secondary stack creation.\n\t(Vulnerable_Complete_Master): Update to reflect TSD changes.\n\t* libgnarl/s-tassta.ads: Reformat comments.\n\t(Create_Task): Update parameter profile.\n\t* libgnarl/s-tporft.adb (Register_Foreign_Thread): Update parameter\n\tprofile to include secondary stack size. Remove secondary size\n\tparameter from Initialize_ATCB call and add it to Create_TSD call.\n\t* libgnat/s-parame.adb, libgnat/s-parame__rtems.adb,\n\tlibgnat/s-parame__vxworks.adb (Default_Sec_Stack_Size): New routine.\n\t* libgnat/s-parame.ads, libgnat/s-parame__ae653.ads,\n\tlibgnat/s-parame__hpux.ads, libgnat/s-parame__vxworks.ads: Remove type\n\tPercentage.  Remove constants Dynamic, Sec_Stack_Percentage and\n\tSec_Stack_Dynamic.  Add constant Runtime_Default_Sec_Stack_Size and\n\tSec_Stack_Dynamic.\n\t(Default_Sec_Stack_Size): New routine.\n\t* libgnat/s-secsta.adb, libgnat/s-secsta.ads: New implementation. Is\n\tnow Preelaborate.\n\t* libgnat/s-soflin.adb: Removed unused with-clauses.  With\n\tSystem.Soft_Links.Initialize to initialize non-tasking TSD.\n\t(Create_TSD): Update parameter profile. Initialize the TSD and\n\tunconditionally call SS_Init.\n\t(Destroy_TSD): Update SST.SS_Free call.\n\t(Get_Sec_Stack_Addr_NT, Get_Sec_Stack_Addr_Soft, Set_Sec_Stack_Addr_NT,\n\tSet_Sec_Stack_Addr_Soft): Remove routines.\n\t(Get_Sec_Stack_NT, Get_Sec_Stack_Soft, Set_Sec_Stack_NT,\n\tSet_Sec_Stack_Soft): Add routines.\n\t(NT_TSD): Move to private part of package specification.\n\t* libgnat/s-soflin.ads: New types Get_Stack_Call and Set_Stack_Call\n\twith suppressed access checks.  Renamed *_Sec_Stack_Addr_* routines and\n\tobjects to *_Sec_Stack_*.  TSD: removed warning suppression and\n\tcomponent intialization. Changed Sec_Stack_Addr to Sec_Stack_Ptr.\n\t(Create_TSD): Update parameter profile.\n\t(NT_TSD): Move to private section from body.\n\t* libgnat/s-soliin.adb, libgnat/s-soliin.ads: New files.\n\t* libgnat/s-thread.ads (Thread_Body_Enter): Update parameter profile.\n\t* libgnat/s-thread__ae653.adb (Get_Sec_Stack_Addr, Set_Sec_Stack_Addr):\n\tRemove routine.\n\t(Get_Sec_Stack, Set_Sec_Stack): Add routine.\n\t(Thread_Body_Enter): Update parameter profile and body to adapt to new\n\tSystem.Secondary_Stack.\n\t(Init_RTS): Update body for new System.Soft_Links names.\n\t* gcc-interface/Make-lang.in (GNAT_ADA_OBJS, GNATBIND_OBJS): Add\n\ts-soliin.o.\n\nFrom-SVN: r253754", "tree": {"sha": "8ca509794ef973e3ed4925e310c611f15ffee4d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ca509794ef973e3ed4925e310c611f15ffee4d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/comments", "author": null, "committer": null, "parents": [{"sha": "41f59cdada7360f4a652fb67aa73ae0bb97d10c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41f59cdada7360f4a652fb67aa73ae0bb97d10c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41f59cdada7360f4a652fb67aa73ae0bb97d10c5"}], "stats": {"total": 2832, "additions": 1836, "deletions": 996}, "files": [{"sha": "8e8be98fd4ff6db7f2b187e6be3dea95a075eb6b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda", "patch": "@@ -1,3 +1,155 @@\n+2017-10-14  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_ch6.adb (Is_Build_In_Place_Result_Type): Include code for\n+\tenabling b-i-p for nonlimited controlled types (but disabled).\n+\n+2017-10-14  Justin Squirek  <squirek@adacore.com>\n+\n+\t* sem_elab.adb (Is_Suitable_Variable_Assignment): Replace call to\n+\tHas_Warnings_Off with Warnings_Off.\n+\n+2017-10-14  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sinfo.ads (Generic_Parent): Remove wrong (possibly obsolete) comment.\n+\n+2017-10-14  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_ch3.adb (Analyze_Declarations): Analyze the contract of an\n+\tenclosing package at the end of the visible declarations.\n+\t* sem_prag.adb (Analyze_Initialization_Item): Suppress the analysis of\n+\tan initialization item which is undefined due to some illegality.\n+\n+2017-10-14  Patrick Bernardi  <bernardi@adacore.com>\n+\n+\t* ali.adb: Add new ALI line 'T' to read the number of tasks contain\n+\twithin each unit that require a default-sized primary and secondary\n+\tstack to be generated by the binder.\n+\t(Scan_ALI): Scan new 'T' lines.\n+\t* ali.ads: Add Primary_Stack_Count and Sec_Stack_Count to Unit_Record.\n+\t* bindgen.adb (Gen_Output_File): Count the number of default-sized\n+\tstacks within the closure that are to be created by the binder.\n+\t(Gen_Adainit, Gen_Output_File_Ada): Generate default-sized secondary\n+\tstacks and record these in System.Secodnary_Stack.\n+\t(Resolve_Binder_Options): Check if System.Secondary_Stack is in the\n+\tclosure of the program being bound.\n+\t* bindusg.adb (Display): Add \"-Q\" switch. Remove rouge \"--RTS\" comment.\n+\t* exp_ch3.adb (Count_Default_Sized_Task_Stacks): New routine.\n+\t(Expand_N_Object_Declaration): Count the number of default-sized stacks\n+\tused by task objects contained within the object whose declaration is\n+\tbeing expanded.  Only performed when either the restrictions\n+\tNo_Implicit_Heap_Allocations or No_Implicit_Task_Allocations are in\n+\teffect.\n+\t* exp_ch9.adb (Create_Secondary_Stack_For_Task): New routine.\n+\t(Expand_N_Task_Type_Declaration): Create a secondary stack as part of\n+\tthe expansion of a task type if the size of the stack is known at\n+\trun-time and the restrictions No_Implicit_Heap_Allocations or\n+\tNo_Implicit_Task_Allocations are in effect.\n+\t(Make_Task_Create_Call): If using a restricted profile provide\n+\tsecondary stack parameter: either the statically created stack or null.\n+\t* lib-load.adb (Create_Dummy_Package_Unit, Load_Unit,\n+\tLoad_Main_Source): Include Primary_Stack_Count and Sec_Stack_Count in\n+\tUnit_Record initialization expressions.\n+\t* lib-writ.adb (Add_Preprocessing_Dependency,\n+\tEnsure_System_Dependency): Include Primary_Stack_Count and\n+\tSec_Stack_Count in Unit_Record initialization expression.\n+\t(Write_ALI): Write T lines.\n+\t(Write_Unit_Information): Do not output 'T' lines if there are no\n+\tstacks for the binder to generate.\n+\t* lib-writ.ads: Updated library information documentation to include\n+\tnew T line entry.\n+\t* lib.adb (Increment_Primary_Stack_Count): New routine.\n+\t(Increment_Sec_Stack_Count): New routine.\n+\t(Primary_Stack_Count): New routine.\n+\t(Sec_Stack_Count): New routine.\n+\t* lib.ads: Add Primary_Stack_Count and Sec_Stack_Count components to\n+\tUnit_Record and updated documentation.\n+\t(Increment_Primary_Stack_Count): New routine along with pragma Inline.\n+\t(Increment_Sec_Stack_Count): New routine along with pragma Inline.\n+\t(Primary_Stack_Count): New routine along with pragma Inline.\n+\t(Sec_Stack_Count): New routine along with pragma Inline.\n+\t* opt.ads: New constant No_Stack_Size.\tFlag Default_Stack_Size\n+\tredefined.  New flag Default_Sec_Stack_Size and\n+\tQuantity_Of_Default_Size_Sec_Stacks.\n+\t* rtfinal.c Fixed erroneous comment.\n+\t* rtsfind.ads: Moved RE_Default_Secondary_Stack_Size from\n+\tSystem.Secondary_Stack to System.Parameters.  Add RE_SS_Stack.\n+\t* sem_util.adb (Number_Of_Elements_In_Array): New routine.\n+\t* sem_util.ads (Number_Of_Elements_In_Array): New routine.\n+\t* switch-b.adb (Scan_Binder_Switches): Scan \"-Q\" switch.\n+\t* libgnarl/s-solita.adb (Get_Sec_Stack_Addr): Removed routine.\n+\t(Set_Sec_Stack_Addr): Removed routine.\n+\t(Get_Sec_Stack): New routine.\n+\t(Set_Sec_Stack): New routine.\n+\t(Init_Tasking_Soft_Links): Update System.Soft_Links reference to\n+\treflect new procedure and global names.\n+\t* libgnarl/s-taprop__linux.adb, libgnarl/s-taprop__mingw.adb,\n+\tlibgnarl/s-taprop__posix.adb, libgnarl/s-taprop__solaris.adb,\n+\tlibgnarl/s-taprop__vxworks.adb (Register_Foreign_Thread): Update\n+\tparameter profile to allow the secondary stack size to be specified.\n+\t* libgnarl/s-tarest.adb (Create_Restricted_Task): Update the parameter\n+\tprofile to include Sec_Stack_Address.  Update Tasking.Initialize_ATCB\n+\tcall to remove Secondary_Stack_Size reference.  Add secondary stack\n+\taddress and size to SSL.Create_TSD call.\n+\t(Task_Wrapper): Remove secondary stack creation.\n+\t* libgnarl/s-tarest.ads (Create_Restricted_Task,\n+\tCreate_Restricted_Task_Sequential): Update parameter profile to include\n+\tSec_Stack_Address and clarify the Size parameter.\n+\t* libgnarl/s-taskin.adb (Initialize_ATCB): Remove Secondary_Stack_Size\n+\tfrom profile and body.\n+\t(Initialize): Remove Secondary_Stack_Size from Initialize_ATCB call.\n+\t* libgnarl/s-taskin.ads: Removed component Secondary_Stack_Size from\n+\tCommon_ATCB.\n+\t(Initialize_ATCB): Update the parameter profile to remove\n+\tSecondary_Stack_Size.\n+\t* libgnarl/s-tassta.adb (Create_Task): Updated parameter profile and\n+\tcall to Initialize_ATCB.  Add secondary stack address and size to\n+\tSSL.Create_TSD call, and catch any storage exception from the call.\n+\t(Finalize_Global_Tasks): Update System.Soft_Links references to reflect\n+\tnew subprogram and component names.\n+\t(Task_Wrapper): Remove secondary stack creation.\n+\t(Vulnerable_Complete_Master): Update to reflect TSD changes.\n+\t* libgnarl/s-tassta.ads: Reformat comments.\n+\t(Create_Task): Update parameter profile.\n+\t* libgnarl/s-tporft.adb (Register_Foreign_Thread): Update parameter\n+\tprofile to include secondary stack size. Remove secondary size\n+\tparameter from Initialize_ATCB call and add it to Create_TSD call.\n+\t* libgnat/s-parame.adb, libgnat/s-parame__rtems.adb,\n+\tlibgnat/s-parame__vxworks.adb (Default_Sec_Stack_Size): New routine.\n+\t* libgnat/s-parame.ads, libgnat/s-parame__ae653.ads,\n+\tlibgnat/s-parame__hpux.ads, libgnat/s-parame__vxworks.ads: Remove type\n+\tPercentage.  Remove constants Dynamic, Sec_Stack_Percentage and\n+\tSec_Stack_Dynamic.  Add constant Runtime_Default_Sec_Stack_Size and\n+\tSec_Stack_Dynamic.\n+\t(Default_Sec_Stack_Size): New routine.\n+\t* libgnat/s-secsta.adb, libgnat/s-secsta.ads: New implementation. Is\n+\tnow Preelaborate.\n+\t* libgnat/s-soflin.adb: Removed unused with-clauses.  With\n+\tSystem.Soft_Links.Initialize to initialize non-tasking TSD.\n+\t(Create_TSD): Update parameter profile. Initialize the TSD and\n+\tunconditionally call SS_Init.\n+\t(Destroy_TSD): Update SST.SS_Free call.\n+\t(Get_Sec_Stack_Addr_NT, Get_Sec_Stack_Addr_Soft, Set_Sec_Stack_Addr_NT,\n+\tSet_Sec_Stack_Addr_Soft): Remove routines.\n+\t(Get_Sec_Stack_NT, Get_Sec_Stack_Soft, Set_Sec_Stack_NT,\n+\tSet_Sec_Stack_Soft): Add routines.\n+\t(NT_TSD): Move to private part of package specification.\n+\t* libgnat/s-soflin.ads: New types Get_Stack_Call and Set_Stack_Call\n+\twith suppressed access checks.  Renamed *_Sec_Stack_Addr_* routines and\n+\tobjects to *_Sec_Stack_*.  TSD: removed warning suppression and\n+\tcomponent intialization. Changed Sec_Stack_Addr to Sec_Stack_Ptr.\n+\t(Create_TSD): Update parameter profile.\n+\t(NT_TSD): Move to private section from body.\n+\t* libgnat/s-soliin.adb, libgnat/s-soliin.ads: New files.\n+\t* libgnat/s-thread.ads (Thread_Body_Enter): Update parameter profile.\n+\t* libgnat/s-thread__ae653.adb (Get_Sec_Stack_Addr, Set_Sec_Stack_Addr):\n+\tRemove routine.\n+\t(Get_Sec_Stack, Set_Sec_Stack): Add routine.\n+\t(Thread_Body_Enter): Update parameter profile and body to adapt to new\n+\tSystem.Secondary_Stack.\n+\t(Init_RTS): Update body for new System.Soft_Links names.\n+\t* gcc-interface/Make-lang.in (GNAT_ADA_OBJS, GNATBIND_OBJS): Add\n+\ts-soliin.o.\n+\n 2017-10-10  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* gcc-interface/decl.c (annotate_value): Use wi::to_wide when"}, {"sha": "959b30587280b809442c1acf3f8502c34293d90a", "filename": "gcc/ada/ali.adb", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Fali.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Fali.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fali.adb?ref=bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda", "patch": "@@ -58,6 +58,7 @@ package body ALI is\n       'Z'    => True,   -- implicit with from instantiation\n       'C'    => True,   -- SCO information\n       'F'    => True,   -- SPARK cross-reference information\n+      'T'    => True,   -- task stack information\n       others => False);\n \n    --------------------\n@@ -842,7 +843,7 @@ package body ALI is\n \n       if Read_Xref then\n          Ignore :=\n-           ('U' | 'W' | 'Y' | 'Z' | 'D' | 'X' => False, others => True);\n+           ('T' | 'U' | 'W' | 'Y' | 'Z' | 'D' | 'X' => False, others => True);\n \n       --  Read_Lines parameter given\n \n@@ -1744,6 +1745,8 @@ package body ALI is\n             UL.Elaborate_Body_Desirable := False;\n             UL.Optimize_Alignment       := 'O';\n             UL.Has_Finalizer            := False;\n+            UL.Primary_Stack_Count      := 0;\n+            UL.Sec_Stack_Count          := 0;\n \n             if Debug_Flag_U then\n                Write_Str (\" ----> reading unit \");\n@@ -2096,6 +2099,28 @@ package body ALI is\n          Units.Table (Units.Last).Last_With := Withs.Last;\n          Units.Table (Units.Last).Last_Arg  := Args.Last;\n \n+         --  Scan out task stack information for the unit if present\n+\n+         Check_Unknown_Line;\n+\n+         if C = 'T' then\n+            if Ignore ('T') then\n+               Skip_Line;\n+\n+            else\n+               Checkc (' ');\n+               Skip_Space;\n+\n+               Units.Table (Units.Last).Primary_Stack_Count := Get_Nat;\n+               Skip_Space;\n+               Units.Table (Units.Last).Sec_Stack_Count := Get_Nat;\n+               Skip_Space;\n+               Skip_Eol;\n+            end if;\n+\n+            C := Getc;\n+         end if;\n+\n          --  If there are linker options lines present, scan them\n \n          Name_Len := 0;"}, {"sha": "3fa4d99fb09c32c697de1c2180871e6919ec7de3", "filename": "gcc/ada/ali.ads", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Fali.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Fali.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fali.ads?ref=bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda", "patch": "@@ -388,11 +388,19 @@ package ALI is\n       --  together as possible.\n \n       Optimize_Alignment : Character;\n-      --  Optimize_Alignment setting. Set to L/S/T/O for OL/OS/OT/OO present\n+      --  Optimize_Alignment setting. Set to L/S/T/O for OL/OS/OT/OO present.\n \n       Has_Finalizer : Boolean;\n       --  Indicates whether a package body or a spec has a library-level\n       --  finalization routine.\n+\n+      Primary_Stack_Count : Int;\n+      --  Indicates the number of task objects declared in this unit that have\n+      --  default sized primary stacks.\n+\n+      Sec_Stack_Count : Int;\n+      --  Indicates the number of task objects declared in this unit that have\n+      --  default sized secondary stacks.\n    end record;\n \n    package Units is new Table.Table ("}, {"sha": "b8d61a860959bcedf21487e7c0ca595d5d1e5e88", "filename": "gcc/ada/bindgen.adb", "status": "modified", "additions": 203, "deletions": 19, "changes": 222, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Fbindgen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Fbindgen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindgen.adb?ref=bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda", "patch": "@@ -59,6 +59,14 @@ package body Bindgen is\n    Num_Elab_Calls : Nat := 0;\n    --  Number of generated calls to elaboration routines\n \n+   Num_Primary_Stacks : Int := 0;\n+   --  Number of default-sized primary stacks the binder needs to allocate for\n+   --  task objects declared in the program.\n+\n+   Num_Sec_Stacks : Int := 0;\n+   --  Number of default-sized primary stacks the binder needs to allocate for\n+   --  task objects declared in the program.\n+\n    System_Restrictions_Used : Boolean := False;\n    --  Flag indicating whether the unit System.Restrictions is in the closure\n    --  of the partition. This is set by Resolve_Binder_Options, and is used\n@@ -74,6 +82,12 @@ package body Bindgen is\n    --  domains just before calling the main procedure from the environment\n    --  task.\n \n+   System_Secondary_Stack_Used : Boolean := False;\n+   --  Flag indicating whether the unit System.Secondary_Stack is in the\n+   --  closure of the partition. This is set by Resolve_Binder_Options, and\n+   --  is used to initialize the package in cases where the run-time brings\n+   --  in package but the secondary stack is not used.\n+\n    System_Tasking_Restricted_Stages_Used : Boolean := False;\n    --  Flag indicating whether the unit System.Tasking.Restricted.Stages is in\n    --  the closure of the partition. This is set by Resolve_Binder_Options,\n@@ -179,8 +193,11 @@ package body Bindgen is\n    --     Exception_Tracebacks_Symbolic : Integer;\n    --     Detect_Blocking               : Integer;\n    --     Default_Stack_Size            : Integer;\n+   --     Default_Secondary_Stack_Size  : System.Parameters.Size_Type;\n    --     Leap_Seconds_Support          : Integer;\n    --     Main_CPU                      : Integer;\n+   --     Default_Sized_SS_Pool         : System.Address;\n+   --     Binder_Sec_Stacks_Count       : Natural;\n \n    --  Main_Priority is the priority value set by pragma Priority in the main\n    --  program. If no such pragma is present, the value is -1.\n@@ -261,13 +278,24 @@ package body Bindgen is\n    --  Default_Stack_Size is the default stack size used when creating an Ada\n    --  task with no explicit Storage_Size clause.\n \n+   --  Default_Secondary_Stack_Size is the default secondary stack size used\n+   --  when creating an Ada task with no explicit Secondary_Stack_Size clause.\n+\n    --  Leap_Seconds_Support denotes whether leap seconds have been enabled or\n    --  disabled. A value of zero indicates that leap seconds are turned \"off\",\n    --  while a value of one signifies \"on\" status.\n \n    --  Main_CPU is the processor set by pragma CPU in the main program. If no\n    --  such pragma is present, the value is -1.\n \n+   --  Default_Sized_SS_Pool is set to the address of the default-sized\n+   --  secondary stacks array generated by the binder. This pool of stacks is\n+   --  generated when either the restriction No_Implicit_Heap_Allocations\n+   --  or No_Implicit_Task_Allocations is active.\n+\n+   --  Binder_Sec_Stacks_Count is the number of generated secondary stacks in\n+   --  the Default_Sized_SS_Pool.\n+\n    procedure WBI (Info : String) renames Osint.B.Write_Binder_Info;\n    --  Convenient shorthand used throughout\n \n@@ -554,6 +582,32 @@ package body Bindgen is\n             WBI (\"      procedure Start_Slave_CPUs;\");\n             WBI (\"      pragma Import (C, Start_Slave_CPUs,\" &\n                  \" \"\"__gnat_start_slave_cpus\"\");\");\n+            WBI (\"\");\n+         end if;\n+\n+         --  A restricted run-time may attempt to initialize the main task's\n+         --  secondary stack even if the stack is not used. Consequently,\n+         --  the binder needs to initialize Binder_Sec_Stacks_Count anytime\n+         --  System.Secondary_Stack is in the enclosure of the partition.\n+\n+         if System_Secondary_Stack_Used then\n+            WBI (\"      Binder_Sec_Stacks_Count : Natural;\");\n+            WBI (\"      pragma Import (Ada, Binder_Sec_Stacks_Count, \" &\n+                 \"\"\"__gnat_binder_ss_count\"\");\");\n+            WBI (\"\");\n+         end if;\n+\n+         if Sec_Stack_Used then\n+            WBI (\"      Default_Secondary_Stack_Size : \" &\n+                 \"System.Parameters.Size_Type;\");\n+            WBI (\"      pragma Import (C, Default_Secondary_Stack_Size, \" &\n+                 \"\"\"__gnat_default_ss_size\"\");\");\n+\n+            WBI (\"      Default_Sized_SS_Pool : System.Address;\");\n+            WBI (\"      pragma Import (Ada, Default_Sized_SS_Pool, \" &\n+                 \"\"\"__gnat_default_ss_pool\"\");\");\n+\n+            WBI (\"\");\n          end if;\n \n          WBI (\"   begin\");\n@@ -588,6 +642,48 @@ package body Bindgen is\n             WBI (\"      null;\");\n          end if;\n \n+         --  Generate default-sized secondary stack pool and set secondary\n+         --  stack globals.\n+\n+         if Sec_Stack_Used then\n+            --  Elaborate the body of the binder to initialize the\n+            --  default-sized secondary stack pool.\n+\n+            WBI (\"\");\n+            WBI (\"      \" & Get_Ada_Main_Name & \"'Elab_Body;\");\n+\n+            --  Generate the default-sized secondary stack pool and set the\n+            --  related secondary stack globals.\n+\n+            Set_String (\"      Default_Secondary_Stack_Size := \");\n+            if Opt.Default_Sec_Stack_Size /= Opt.No_Stack_Size then\n+               Set_Int (Opt.Default_Sec_Stack_Size);\n+            else\n+               Set_String\n+                 (\"System.Parameters.Runtime_Default_Sec_Stack_Size\");\n+            end if;\n+            Set_Char (';');\n+            Write_Statement_Buffer;\n+\n+            Set_String (\"      Binder_Sec_Stacks_Count := \");\n+            Set_Int (Num_Sec_Stacks);\n+            Set_Char (';');\n+            Write_Statement_Buffer;\n+\n+            WBI (\"      Default_Sized_SS_Pool := \" &\n+                   \"Sec_Default_Sized_Stacks'Address;\");\n+            WBI (\"\");\n+\n+         --  When a restricted run-time initializes the main task's secondary\n+         --  stack but the program does not use it, no secondary stack is\n+         --  generated. Binder_Sec_Stacks_Count is set to zero so the run-time\n+         --  is aware that the lack of pre-allocated secondary stack is\n+         --  expected.\n+\n+         elsif System_Secondary_Stack_Used then\n+            WBI (\"      Binder_Sec_Stacks_Count := 0;\");\n+         end if;\n+\n       --  Normal case (standard library not suppressed). Set all global values\n       --  used by the run time.\n \n@@ -647,6 +743,10 @@ package body Bindgen is\n          WBI (\"      Default_Stack_Size : Integer;\");\n          WBI (\"      pragma Import (C, Default_Stack_Size, \" &\n               \"\"\"__gl_default_stack_size\"\");\");\n+         WBI (\"      Default_Secondary_Stack_Size : \" &\n+              \"System.Parameters.Size_Type;\");\n+         WBI (\"      pragma Import (C, Default_Secondary_Stack_Size, \" &\n+              \"\"\"__gnat_default_ss_size\"\");\");\n          WBI (\"      Leap_Seconds_Support : Integer;\");\n          WBI (\"      pragma Import (C, Leap_Seconds_Support, \" &\n               \"\"\"__gl_leap_seconds_support\"\");\");\n@@ -730,6 +830,18 @@ package body Bindgen is\n                  & \"\"\"__gnat_freeze_dispatching_domains\"\");\");\n          end if;\n \n+         --  Secondary stack global variables\n+\n+         WBI (\"      Binder_Sec_Stacks_Count : Natural;\");\n+         WBI (\"      pragma Import (Ada, Binder_Sec_Stacks_Count, \" &\n+              \"\"\"__gnat_binder_ss_count\"\");\");\n+\n+         WBI (\"      Default_Sized_SS_Pool : System.Address;\");\n+         WBI (\"      pragma Import (Ada, Default_Sized_SS_Pool, \" &\n+              \"\"\"__gnat_default_ss_pool\"\");\");\n+\n+         WBI (\"\");\n+\n          --  Start of processing for Adainit\n \n          WBI (\"   begin\");\n@@ -870,9 +982,46 @@ package body Bindgen is\n             WBI (\"      Bind_Env_Addr := Bind_Env'Address;\");\n          end if;\n \n-         --  Generate call to Install_Handler\n-\n          WBI (\"\");\n+\n+         --  Generate default-sized secondary stack pool and set secondary\n+         --  stack globals.\n+\n+         if Sec_Stack_Used then\n+            --  Elaborate the body of the binder to initialize the\n+            --  default-sized secondary stack pool.\n+\n+            WBI (\"      \" & Get_Ada_Main_Name & \"'Elab_Body;\");\n+\n+            --  Generate the default-sized secondary stack pool and set the\n+            --  related secondary stack globals.\n+\n+            Set_String (\"      Default_Secondary_Stack_Size := \");\n+            if Opt.Default_Sec_Stack_Size /= Opt.No_Stack_Size then\n+               Set_Int (Opt.Default_Sec_Stack_Size);\n+            else\n+               Set_String (\"System.Parameters.Runtime_Default_Sec_Stack_Size\");\n+            end if;\n+            Set_Char (';');\n+            Write_Statement_Buffer;\n+\n+            Set_String (\"      Binder_Sec_Stacks_Count := \");\n+            Set_Int (Num_Sec_Stacks);\n+            Set_Char (';');\n+            Write_Statement_Buffer;\n+\n+            Set_String (\"      Default_Sized_SS_Pool := \");\n+            if Num_Sec_Stacks > 0 then\n+               Set_String (\"Sec_Default_Sized_Stacks'Address;\");\n+            else\n+               Set_String (\"System.Null_Address;\");\n+            end if;\n+            Write_Statement_Buffer;\n+\n+            WBI (\"\");\n+         end if;\n+\n+         --  Generate call to Runtime_Initialize\n          WBI (\"      Runtime_Initialize (1);\");\n       end if;\n \n@@ -888,17 +1037,6 @@ package body Bindgen is\n          Write_Statement_Buffer;\n       end if;\n \n-      --  Generate assignment of default secondary stack size if set\n-\n-      if Sec_Stack_Used and then Default_Sec_Stack_Size /= -1 then\n-         WBI (\"\");\n-         Set_String (\"      System.Secondary_Stack.\");\n-         Set_String (\"Default_Secondary_Stack_Size := \");\n-         Set_Int (Opt.Default_Sec_Stack_Size);\n-         Set_Char (';');\n-         Write_Statement_Buffer;\n-      end if;\n-\n       --  Initialize stack limit variable of the environment task if the stack\n       --  check method is stack limit and stack check is enabled.\n \n@@ -2044,6 +2182,24 @@ package body Bindgen is\n          end if;\n       end loop;\n \n+      --  Count the number of statically allocated stacks to be generated by\n+      --  the binder. If the user has specified the number of default-sized\n+      --  secondary stacks, use that number. Otherwise start the count at one\n+      --  as the binder is responsible for creating a secondary stack for the\n+      --  main task.\n+\n+      if Opt.Quantity_Of_Default_Size_Sec_Stacks /= -1 then\n+         Num_Sec_Stacks := Quantity_Of_Default_Size_Sec_Stacks;\n+      elsif Sec_Stack_Used then\n+         Num_Sec_Stacks := 1;\n+      end if;\n+\n+      for J in Units.First .. Units.Last loop\n+         Num_Primary_Stacks := Num_Primary_Stacks +\n+           Units.Table (J).Primary_Stack_Count;\n+         Num_Sec_Stacks := Num_Sec_Stacks + Units.Table (J).Sec_Stack_Count;\n+      end loop;\n+\n       --  Generate output file in appropriate language\n \n       Gen_Output_File_Ada (Filename, Elab_Order);\n@@ -2114,9 +2270,11 @@ package body Bindgen is\n          WBI (\"with System.Scalar_Values;\");\n       end if;\n \n-      --  Generate with of System.Secondary_Stack if active\n+      --  Generate withs of System.Secondary_Stack and System.Parameters to\n+      --  allow the generation of the default-sized secondary stack pool.\n \n-      if Sec_Stack_Used and then Default_Sec_Stack_Size /= -1 then\n+      if Sec_Stack_Used then\n+         WBI (\"with System.Parameters;\");\n          WBI (\"with System.Secondary_Stack;\");\n       end if;\n \n@@ -2156,10 +2314,10 @@ package body Bindgen is\n             end if;\n          end if;\n \n-         --  Define exit status. Again in normal mode, this is in the\n-         --  run-time library, and is initialized there, but in the\n-         --  configurable runtime case, the variable is declared and\n-         --  initialized in this file.\n+         --  Define exit status. Again in normal mode, this is in the run-time\n+         --  library, and is initialized there, but in the configurable\n+         --  run-time case, the variable is declared and initialized in this\n+         --  file.\n \n          WBI (\"\");\n \n@@ -2358,6 +2516,27 @@ package body Bindgen is\n \n       Gen_Elab_Externals (Elab_Order);\n \n+      --  Generate default-sized secondary stacks pool. At least one stack is\n+      --  created and assigned to the environment task if secondary stacks are\n+      --  used by the program.\n+\n+      if Sec_Stack_Used then\n+         Set_String (\"   Sec_Default_Sized_Stacks\");\n+         Set_String (\" : array (1 .. \");\n+         Set_Int (Num_Sec_Stacks);\n+         Set_String (\") of aliased System.Secondary_Stack.SS_Stack (\");\n+         if Opt.Default_Sec_Stack_Size /= No_Stack_Size then\n+            Set_Int (Opt.Default_Sec_Stack_Size);\n+         else\n+            Set_String (\"System.Parameters.Runtime_Default_Sec_Stack_Size\");\n+         end if;\n+         Set_String (\");\");\n+         Write_Statement_Buffer;\n+         WBI (\"\");\n+      end if;\n+\n+      --  Generate reference\n+\n       if not CodePeer_Mode then\n          if not Suppress_Standard_Library_On_Target then\n \n@@ -2873,6 +3052,11 @@ package body Bindgen is\n \n          Check_Package (System_Restrictions_Used, \"system.restrictions%s\");\n \n+         --  Ditto for the use of System.Secondary_Stack\n+\n+         Check_Package\n+           (System_Secondary_Stack_Used, \"system.secondary_stack%s\");\n+\n          --  Ditto for use of an SMP bareboard runtime\n \n          Check_Package (System_BB_CPU_Primitives_Multiprocessors_Used,"}, {"sha": "7c17f93951492221c1041fd57ed238cfb67e1721", "filename": "gcc/ada/bindusg.adb", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Fbindusg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Fbindusg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindusg.adb?ref=bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda", "patch": "@@ -210,6 +210,11 @@ package body Bindusg is\n       Write_Line\n         (\"  -P        Generate binder file suitable for CodePeer\");\n \n+      --  Line for Q switch\n+\n+      Write_Line\n+        (\"  -Qnnn     Generate nnn default-sized secondary stacks\");\n+\n       --  Line for -r switch\n \n       Write_Line\n@@ -309,8 +314,6 @@ package body Bindusg is\n       Write_Line\n         (\"  -z        No main subprogram (zero main)\");\n \n-      --  Line for --RTS\n-\n       --  Line for -Z switch\n \n       Write_Line"}, {"sha": "837c8a98d86e5b5ccf971f4777ca49305147f704", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 151, "deletions": 0, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda", "patch": "@@ -43,6 +43,7 @@ with Exp_Tss;  use Exp_Tss;\n with Exp_Util; use Exp_Util;\n with Freeze;   use Freeze;\n with Ghost;    use Ghost;\n+with Lib;      use Lib;\n with Namet;    use Namet;\n with Nlists;   use Nlists;\n with Nmake;    use Nmake;\n@@ -5580,6 +5581,15 @@ package body Exp_Ch3 is\n       --  arithmetic might yield a meaningless value for the length of the\n       --  array, or its corresponding attribute.\n \n+      procedure Count_Default_Sized_Task_Stacks\n+        (Typ         : Entity_Id;\n+         Pri_Stacks  : out Int;\n+         Sec_Stacks  : out Int);\n+      --  Count the number of default-sized primary and secondary task stacks\n+      --  required for task objects contained within type Typ. If the number of\n+      --  task objects contained within the type is not known at compile time\n+      --  the procedure will return the stack counts of zero.\n+\n       procedure Default_Initialize_Object (After : Node_Id);\n       --  Generate all default initialization actions for object Def_Id. Any\n       --  new code is inserted after node After.\n@@ -5772,6 +5782,116 @@ package body Exp_Ch3 is\n          end if;\n       end Check_Large_Modular_Array;\n \n+      -------------------------------------\n+      -- Count_Default_Sized_Task_Stacks --\n+      -------------------------------------\n+\n+      procedure Count_Default_Sized_Task_Stacks\n+        (Typ         : Entity_Id;\n+         Pri_Stacks  : out Int;\n+         Sec_Stacks  : out Int)\n+      is\n+         Component : Entity_Id;\n+      begin\n+         --  To calculate the number of default-sized task stacks required for\n+         --  an object of Typ, a depth-first recursive traversal of the AST\n+         --  from the Typ entity node is undertaken. Only type nodes containing\n+         --  task objects are visited.\n+\n+         Pri_Stacks := 0;\n+         Sec_Stacks := 0;\n+\n+         if not Has_Task (Typ) then\n+            return;\n+         end if;\n+\n+         case Ekind (Typ) is\n+            when E_Task_Type\n+               | E_Task_Subtype\n+            =>\n+               --  A task type is found marking the bottom of the descent. If\n+               --  the type has no representation aspect for the corresponding\n+               --  stack then that stack is using the default size.\n+\n+               if Present (Get_Rep_Item (Typ, Name_Storage_Size)) then\n+                  Pri_Stacks := 0;\n+               else\n+                  Pri_Stacks := 1;\n+               end if;\n+\n+               if Present (Get_Rep_Item (Typ, Name_Secondary_Stack_Size)) then\n+                  Sec_Stacks := 0;\n+               else\n+                  Sec_Stacks := 1;\n+               end if;\n+\n+            when E_Array_Type\n+               | E_Array_Subtype\n+            =>\n+               --  First find the number of default stacks contained within an\n+               --  array component.\n+\n+               Count_Default_Sized_Task_Stacks\n+                 (Component_Type (Typ),\n+                  Pri_Stacks,\n+                  Sec_Stacks);\n+\n+               --  Then multiply the result by the size of the array\n+\n+               declare\n+                  Quantity : constant Int := Number_Of_Elements_In_Array (Typ);\n+                  --  Number_Of_Elements_In_Array is non-trival, consequently\n+                  --  its result is captured as an optimization.\n+\n+               begin\n+                  Pri_Stacks := Pri_Stacks * Quantity;\n+                  Sec_Stacks := Sec_Stacks * Quantity;\n+               end;\n+\n+            when E_Record_Type\n+               | E_Record_Subtype\n+               | E_Protected_Type\n+               | E_Protected_Subtype\n+            =>\n+               Component := First_Component_Or_Discriminant (Typ);\n+\n+               --  Recursively descend each component of the composite type\n+               --  looking for tasks, but only if the component is marked as\n+               --  having a task.\n+\n+               while Present (Component) loop\n+                  if Has_Task (Etype (Component)) then\n+                     declare\n+                        P, S : Int;\n+                     begin\n+                        Count_Default_Sized_Task_Stacks\n+                          (Etype (Component), P, S);\n+                        Pri_Stacks := Pri_Stacks + P;\n+                        Sec_Stacks := Sec_Stacks + S;\n+                     end;\n+                  end if;\n+\n+                  Next_Component_Or_Discriminant (Component);\n+               end loop;\n+\n+            when E_Limited_Private_Type\n+               | E_Limited_Private_Subtype\n+               | E_Record_Type_With_Private\n+               | E_Record_Subtype_With_Private\n+            =>\n+               --  Switch to the full view of the private type to continue\n+               --  search.\n+\n+               Count_Default_Sized_Task_Stacks\n+                 (Full_View (Typ), Pri_Stacks, Sec_Stacks);\n+\n+            --  Other types should not contain tasks\n+\n+            when others =>\n+               raise Program_Error;\n+         end case;\n+      end Count_Default_Sized_Task_Stacks;\n+\n       -------------------------------\n       -- Default_Initialize_Object --\n       -------------------------------\n@@ -6198,6 +6318,37 @@ package body Exp_Ch3 is\n \n       Check_Large_Modular_Array;\n \n+      --  If No_Implicit_Heap_Allocations or No_Implicit_Task_Allocations\n+      --  restrictions are active then default-sized secondary stacks are\n+      --  generated by the binder and allocated by SS_Init. To provide the\n+      --  binder the number of stacks to generate, the number of default-sized\n+      --  stacks required for task objects contained within the object\n+      --  declaration N is calculated here as it is at this point where\n+      --  unconstrained types become constrained. The result is stored in the\n+      --  enclosing unit's Unit_Record.\n+\n+      --  Note if N is an array object declaration that has an initialization\n+      --  expression, a second object declaration for the initialization\n+      --  expression is created by the compiler. To prevent double counting\n+      --  of the stacks in this scenario, the stacks of the first array are\n+      --  not counted.\n+\n+      if Has_Task (Typ)\n+        and then not Restriction_Active (No_Secondary_Stack)\n+        and then (Restriction_Active (No_Implicit_Heap_Allocations)\n+          or else Restriction_Active (No_Implicit_Task_Allocations))\n+        and then not (Ekind_In (Ekind (Typ), E_Array_Type, E_Array_Subtype)\n+                      and then (Has_Init_Expression (N)))\n+      then\n+         declare\n+            PS_Count, SS_Count : Int := 0;\n+         begin\n+            Count_Default_Sized_Task_Stacks (Typ, PS_Count, SS_Count);\n+            Increment_Primary_Stack_Count (PS_Count);\n+            Increment_Sec_Stack_Count (SS_Count);\n+         end;\n+      end if;\n+\n       --  Default initialization required, and no expression present\n \n       if No (Expr) then"}, {"sha": "4e229c452a4aa43141e9682f21f9735ed4decb99", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 37, "deletions": 2, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda", "patch": "@@ -7240,7 +7240,37 @@ package body Exp_Ch6 is\n       if Is_Limited_View (Typ) then\n          return Ada_Version >= Ada_2005 and then not Debug_Flag_Dot_L;\n       else\n-         return Debug_Flag_Dot_9;\n+--         if Debug_Flag_Dot_9 then\n+         if True then\n+            return False; -- ???disable bip for nonlimited types\n+         end if;\n+\n+         if Has_Interfaces (Typ) then\n+            return False;\n+         end if;\n+\n+         --  For T'Class, return True if it's True for the corresponding\n+         --  specific type. This is necessary because a class-wide function\n+         --  might say \"return F (...)\", where F returns the corresponding\n+         --  specific type.\n+\n+         if Is_Class_Wide_Type (Typ) then\n+            return Is_Build_In_Place_Result_Type (Etype (Typ));\n+         end if;\n+\n+         declare\n+            T : Entity_Id := Typ;\n+         begin\n+            if Present (Underlying_Type (Typ)) then\n+               T := Underlying_Type (Typ);\n+            end if;\n+\n+            declare\n+               Result : constant Boolean := Is_Controlled (T);\n+            begin\n+               return Result;\n+            end;\n+         end;\n       end if;\n    end Is_Build_In_Place_Result_Type;\n \n@@ -7326,7 +7356,12 @@ package body Exp_Ch6 is\n          raise Program_Error;\n       end if;\n \n-      return Is_Build_In_Place_Function (Function_Id);\n+      declare\n+         Result : constant Boolean := Is_Build_In_Place_Function (Function_Id);\n+         --  So we can stop here in the debugger\n+      begin\n+         return Result;\n+      end;\n    end Is_Build_In_Place_Function_Call;\n \n    -----------------------"}, {"sha": "be205e47a7eb20c818b10cb11d8647bf0efd91df", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 101, "deletions": 5, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda", "patch": "@@ -339,6 +339,14 @@ package body Exp_Ch9 is\n    --  same parameter names and the same resolved types, but with new entities\n    --  for the formals.\n \n+   function Create_Secondary_Stack_For_Task (T : Node_Id) return Boolean;\n+   --  Return whether a secondary stack for the task T should be created by the\n+   --  expander. The secondary stack for a task will be created by the expander\n+   --  if the size of the stack has been specified by the Secondary_Stack_Size\n+   --  representation aspect and either the No_Implicit_Heap_Allocations or\n+   --  No_Implicit_Task_Allocations restrictions are in effect and the\n+   --  No_Secondary_Stack restriction is not.\n+\n    procedure Debug_Private_Data_Declarations (Decls : List_Id);\n    --  Decls is a list which may contain the declarations created by Install_\n    --  Private_Data_Declarations. All generated entities are marked as needing\n@@ -5414,6 +5422,20 @@ package body Exp_Ch9 is\n       end if;\n    end Convert_Concurrent;\n \n+   -------------------------------------\n+   -- Create_Secondary_Stack_For_Task --\n+   -------------------------------------\n+\n+   function Create_Secondary_Stack_For_Task (T : Node_Id) return Boolean is\n+   begin\n+      return\n+        (Restriction_Active (No_Implicit_Heap_Allocations)\n+          or else Restriction_Active (No_Implicit_Task_Allocations))\n+        and then not Restriction_Active (No_Secondary_Stack)\n+        and then Has_Rep_Item (T, Name_Secondary_Stack_Size,\n+                               Check_Parents => False);\n+   end Create_Secondary_Stack_For_Task;\n+\n    -------------------------------------\n    -- Debug_Private_Data_Declarations --\n    -------------------------------------\n@@ -11712,6 +11734,7 @@ package body Exp_Ch9 is\n       Body_Decl  : Node_Id;\n       Cdecls     : List_Id;\n       Decl_Stack : Node_Id;\n+      Decl_SS    : Node_Id;\n       Elab_Decl  : Node_Id;\n       Ent_Stack  : Entity_Id;\n       Proc_Spec  : Node_Id;\n@@ -11939,6 +11962,57 @@ package body Exp_Ch9 is\n \n       end if;\n \n+      --  Declare a static secondary stack if the conditions for a statically\n+      --  generated stack are met.\n+\n+      if Create_Secondary_Stack_For_Task (TaskId) then\n+         declare\n+            Ritem     : Node_Id;\n+            Size_Expr : Node_Id;\n+\n+         begin\n+            --  First extract the secondary stack size from the task type's\n+            --  representation aspect.\n+\n+            Ritem :=\n+              Get_Rep_Item\n+                (TaskId, Name_Secondary_Stack_Size, Check_Parents => False);\n+\n+            --  Get Secondary_Stack_Size expression. Can be a pragma or\n+            --  aspect.\n+\n+            if Nkind (Ritem) = N_Pragma then\n+               Size_Expr :=\n+                 Expression\n+                   (First (Pragma_Argument_Associations (Ritem)));\n+            else\n+               Size_Expr := Expression (Ritem);\n+            end if;\n+\n+            pragma Assert (Compile_Time_Known_Value (Size_Expr));\n+\n+            --  Create the secondary stack for the task\n+\n+            Decl_SS := Make_Component_Declaration (Loc,\n+              Defining_Identifier  =>\n+                Make_Defining_Identifier (Loc, Name_uSecondary_Stack),\n+\n+              Component_Definition =>\n+                Make_Component_Definition (Loc,\n+                  Aliased_Present     => True,\n+                  Subtype_Indication  => Make_Subtype_Indication (Loc,\n+                    Subtype_Mark =>\n+                       New_Occurrence_Of (RTE (RE_SS_Stack), Loc),\n+                    Constraint   =>\n+                      Make_Index_Or_Discriminant_Constraint (Loc,\n+                        Constraints  => New_List (\n+                          Make_Integer_Literal (Loc,\n+                            Expr_Value (Size_Expr)))))));\n+\n+            Append_To (Cdecls, Decl_SS);\n+         end;\n+      end if;\n+\n       --  Add components for entry families\n \n       Collect_Entry_Families (Loc, Cdecls, Size_Decl, Tasktyp);\n@@ -14136,11 +14210,33 @@ package body Exp_Ch9 is\n            New_Occurrence_Of (Storage_Size_Variable (Ttyp), Loc));\n       end if;\n \n-      --  Secondary_Stack_Size parameter. Set Default_Secondary_Stack_Size\n-      --  unless there is a Secondary_Stack_Size rep item, in which case we\n-      --  take the value from the rep item. If the restriction\n-      --  No_Secondary_Stack is active then a size of 0 is passed regardless\n-      --  to prevent the allocation of the unused stack.\n+      --  Secondary_Stack parameter used for restricted profiles\n+\n+      if Restricted_Profile then\n+\n+         --  If the secondary stack has been allocated by the expander then\n+         --  pass its access pointer. Otherwise, pass null.\n+\n+         if Create_Secondary_Stack_For_Task (Ttyp) then\n+            Append_To (Args,\n+              Make_Attribute_Reference (Loc,\n+                Prefix         =>\n+                  Make_Selected_Component (Loc,\n+                    Prefix        => Make_Identifier (Loc, Name_uInit),\n+                      Selector_Name =>\n+                        Make_Identifier (Loc, Name_uSecondary_Stack)),\n+                Attribute_Name => Name_Unrestricted_Access));\n+\n+         else\n+            Append_To (Args, Make_Null (Loc));\n+         end if;\n+      end if;\n+\n+      --  Secondary_Stack_Size parameter. Set RE_Unspecified_Size unless there\n+      --  is a Secondary_Stack_Size rep item, in which case take the value from\n+      --  the rep item. If the restriction No_Secondary_Stack is active then a\n+      --  size of 0 is passed regardless to prevent the allocation of the\n+      --  unused stack.\n \n       if Restriction_Active (No_Secondary_Stack) then\n          Append_To (Args, Make_Integer_Literal (Loc, 0));"}, {"sha": "9c7b6e1496fa3f4bd6b01d9e95778cf7d4d868ea", "filename": "gcc/ada/gcc-interface/Make-lang.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMake-lang.in?ref=bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda", "patch": "@@ -390,6 +390,7 @@ GNAT_ADA_OBJS =\t\\\n  ada/libgnat/s-restri.o\t\\\n  ada/libgnat/s-secsta.o\t\\\n  ada/libgnat/s-soflin.o\t\\\n+ ada/libgnat/s-soliin.o\t\\\n  ada/libgnat/s-sopco3.o\t\\\n  ada/libgnat/s-sopco4.o\t\\\n  ada/libgnat/s-sopco5.o\t\\\n@@ -579,6 +580,7 @@ GNATBIND_OBJS = \\\n  ada/libgnat/s-restri.o   \\\n  ada/libgnat/s-secsta.o   \\\n  ada/libgnat/s-soflin.o   \\\n+ ada/libgnat/s-soliin.o   \\\n  ada/libgnat/s-sopco3.o   \\\n  ada/libgnat/s-sopco4.o   \\\n  ada/libgnat/s-sopco5.o   \\"}, {"sha": "0b0ea7f5057b36149d58ecc1056aa2cb1e993d91", "filename": "gcc/ada/lib-load.adb", "status": "modified", "additions": 73, "deletions": 66, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flib-load.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flib-load.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-load.adb?ref=bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda", "patch": "@@ -214,34 +214,36 @@ package body Lib.Load is\n       Unum := Units.Last;\n \n       Units.Table (Unum) :=\n-        (Cunit             => Cunit,\n-         Cunit_Entity      => Cunit_Entity,\n-         Dependency_Num    => 0,\n-         Dynamic_Elab      => False,\n-         Error_Location    => Sloc (With_Node),\n-         Expected_Unit     => Spec_Name,\n-         Fatal_Error       => Error_Detected,\n-         Generate_Code     => False,\n-         Has_RACW          => False,\n-         Filler            => False,\n-         Ident_String      => Empty,\n+        (Cunit                  => Cunit,\n+         Cunit_Entity           => Cunit_Entity,\n+         Dependency_Num         => 0,\n+         Dynamic_Elab           => False,\n+         Error_Location         => Sloc (With_Node),\n+         Expected_Unit          => Spec_Name,\n+         Fatal_Error            => Error_Detected,\n+         Generate_Code          => False,\n+         Has_RACW               => False,\n+         Filler                 => False,\n+         Ident_String           => Empty,\n \n          Is_Predefined_Renaming => Ren_Name,\n          Is_Predefined_Unit     => Pre_Name or Ren_Name,\n          Is_Internal_Unit       => Pre_Name or Ren_Name or GNAT_Name,\n          Filler2                => False,\n \n-         Loading           => False,\n-         Main_Priority     => Default_Main_Priority,\n-         Main_CPU          => Default_Main_CPU,\n-         Munit_Index       => 0,\n-         No_Elab_Code_All  => False,\n-         Serial_Number     => 0,\n-         Source_Index      => No_Source_File,\n-         Unit_File_Name    => Fname,\n-         Unit_Name         => Spec_Name,\n-         Version           => 0,\n-         OA_Setting        => 'O');\n+         Loading                => False,\n+         Main_Priority          => Default_Main_Priority,\n+         Main_CPU               => Default_Main_CPU,\n+         Primary_Stack_Count    => 0,\n+         Sec_Stack_Count        => 0,\n+         Munit_Index            => 0,\n+         No_Elab_Code_All       => False,\n+         Serial_Number          => 0,\n+         Source_Index           => No_Source_File,\n+         Unit_File_Name         => Fname,\n+         Unit_Name              => Spec_Name,\n+         Version                => 0,\n+         OA_Setting             => 'O');\n \n       Set_Comes_From_Source_Default (Save_CS);\n       Set_Error_Posted (Cunit_Entity);\n@@ -350,34 +352,37 @@ package body Lib.Load is\n          end if;\n \n          Units.Table (Main_Unit) :=\n-           (Cunit             => Empty,\n-            Cunit_Entity      => Empty,\n-            Dependency_Num    => 0,\n-            Dynamic_Elab      => False,\n-            Error_Location    => No_Location,\n-            Expected_Unit     => No_Unit_Name,\n-            Fatal_Error       => None,\n-            Generate_Code     => False,\n-            Has_RACW          => False,\n-            Filler            => False,\n-            Ident_String      => Empty,\n+           (Cunit                  => Empty,\n+            Cunit_Entity           => Empty,\n+            Dependency_Num         => 0,\n+            Dynamic_Elab           => False,\n+            Error_Location         => No_Location,\n+            Expected_Unit          => No_Unit_Name,\n+            Fatal_Error            => None,\n+            Generate_Code          => False,\n+            Has_RACW               => False,\n+            Filler                 => False,\n+            Ident_String           => Empty,\n \n             Is_Predefined_Renaming => Ren_Name,\n             Is_Predefined_Unit     => Pre_Name or Ren_Name,\n             Is_Internal_Unit       => Pre_Name or Ren_Name or GNAT_Name,\n             Filler2                => False,\n \n-            Loading           => True,\n-            Main_Priority     => Default_Main_Priority,\n-            Main_CPU          => Default_Main_CPU,\n-            Munit_Index       => 0,\n-            No_Elab_Code_All  => False,\n-            Serial_Number     => 0,\n-            Source_Index      => Main_Source_File,\n-            Unit_File_Name    => Fname,\n-            Unit_Name         => No_Unit_Name,\n-            Version           => Version,\n-            OA_Setting        => 'O');\n+            Loading                => True,\n+            Main_Priority          => Default_Main_Priority,\n+            Main_CPU               => Default_Main_CPU,\n+            Primary_Stack_Count    => 0,\n+            Sec_Stack_Count        => 0,\n+\n+            Munit_Index            => 0,\n+            No_Elab_Code_All       => False,\n+            Serial_Number          => 0,\n+            Source_Index           => Main_Source_File,\n+            Unit_File_Name         => Fname,\n+            Unit_Name              => No_Unit_Name,\n+            Version                => Version,\n+            OA_Setting             => 'O');\n       end if;\n    end Load_Main_Source;\n \n@@ -728,34 +733,36 @@ package body Lib.Load is\n \n          if Src_Ind > No_Source_File then\n             Units.Table (Unum) :=\n-              (Cunit             => Empty,\n-               Cunit_Entity      => Empty,\n-               Dependency_Num    => 0,\n-               Dynamic_Elab      => False,\n-               Error_Location    => Sloc (Error_Node),\n-               Expected_Unit     => Uname_Actual,\n-               Fatal_Error       => None,\n-               Generate_Code     => False,\n-               Has_RACW          => False,\n-               Filler            => False,\n-               Ident_String      => Empty,\n+              (Cunit                  => Empty,\n+               Cunit_Entity           => Empty,\n+               Dependency_Num         => 0,\n+               Dynamic_Elab           => False,\n+               Error_Location         => Sloc (Error_Node),\n+               Expected_Unit          => Uname_Actual,\n+               Fatal_Error            => None,\n+               Generate_Code          => False,\n+               Has_RACW               => False,\n+               Filler                 => False,\n+               Ident_String           => Empty,\n \n                Is_Predefined_Renaming => Ren_Name,\n                Is_Predefined_Unit     => Pre_Name or Ren_Name,\n                Is_Internal_Unit       => Pre_Name or Ren_Name or GNAT_Name,\n                Filler2                => False,\n \n-               Loading           => True,\n-               Main_Priority     => Default_Main_Priority,\n-               Main_CPU          => Default_Main_CPU,\n-               Munit_Index       => 0,\n-               No_Elab_Code_All  => False,\n-               Serial_Number     => 0,\n-               Source_Index      => Src_Ind,\n-               Unit_File_Name    => Fname,\n-               Unit_Name         => Uname_Actual,\n-               Version           => Source_Checksum (Src_Ind),\n-               OA_Setting        => 'O');\n+               Loading                => True,\n+               Main_Priority          => Default_Main_Priority,\n+               Main_CPU               => Default_Main_CPU,\n+               Primary_Stack_Count    => 0,\n+               Sec_Stack_Count        => 0,\n+               Munit_Index            => 0,\n+               No_Elab_Code_All       => False,\n+               Serial_Number          => 0,\n+               Source_Index           => Src_Ind,\n+               Unit_File_Name         => Fname,\n+               Unit_Name              => Uname_Actual,\n+               Version                => Source_Checksum (Src_Ind),\n+               OA_Setting             => 'O');\n \n             --  Parse the new unit\n "}, {"sha": "47109b4e3f98a08e9abafd16e7a0b4748ccd3abd", "filename": "gcc/ada/lib-writ.adb", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flib-writ.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flib-writ.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-writ.adb?ref=bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda", "patch": "@@ -96,6 +96,8 @@ package body Lib.Writ is\n          Main_CPU               => -1,\n          Munit_Index            => 0,\n          No_Elab_Code_All       => False,\n+         Primary_Stack_Count    => 0,\n+         Sec_Stack_Count        => 0,\n          Serial_Number          => 0,\n          Version                => 0,\n          Error_Location         => No_Location,\n@@ -157,6 +159,8 @@ package body Lib.Writ is\n          Main_CPU               => -1,\n          Munit_Index            => 0,\n          No_Elab_Code_All       => False,\n+         Primary_Stack_Count    => 0,\n+         Sec_Stack_Count        => 0,\n          Serial_Number          => 0,\n          Version                => 0,\n          Error_Location         => No_Location,\n@@ -616,6 +620,19 @@ package body Lib.Writ is\n \n          Write_With_Lines;\n \n+         --  Generate task stack lines\n+\n+         if Primary_Stack_Count (Unit_Num) > 0\n+           or else Sec_Stack_Count (Unit_Num) > 0\n+         then\n+            Write_Info_Initiate ('T');\n+            Write_Info_Char (' ');\n+            Write_Info_Int (Primary_Stack_Count (Unit_Num));\n+            Write_Info_Char (' ');\n+            Write_Info_Int (Sec_Stack_Count (Unit_Num));\n+            Write_Info_EOL;\n+         end if;\n+\n          --  Generate the linker option lines\n \n          for J in 1 .. Linker_Option_Lines.Last loop"}, {"sha": "a959e94e2fccae38e0dc0c4de7c51f30efc77362", "filename": "gcc/ada/lib-writ.ads", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flib-writ.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flib-writ.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-writ.ads?ref=bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -670,14 +670,33 @@ package Lib.Writ is\n    --      binder do the consistency check, but not include the unit in the\n    --      partition closure (unless it is properly With'ed somewhere).\n \n+   --  --------------------\n+   --  -- T  Task Stacks --\n+   --  --------------------\n+\n+   --  Following the W lines (if any, or the U line if not), is an optional\n+   --  line that identifies the number of default-sized primary and secondary\n+   --  stacks that the binder needs to create for the tasks declared within the\n+   --  unit. For each compilation unit, a line is present in the form:\n+\n+   --    T primary-stack-quantity secondary-stack-quantity\n+\n+   --     The first parameter of T defines the number of task objects declared\n+   --     in the unit that have no Storage_Size specified. The second parameter\n+   --     defines the number of task objects declared in the unit that have no\n+   --     Secondary_Stack_Size specified. These values are non-zero only if\n+   --     the restrictions No_Implicit_Heap_Allocations or\n+   --     No_Implicit_Task_Allocations are active.\n+\n    --  -----------------------\n    --  -- L  Linker_Options --\n    --  -----------------------\n \n-   --  Following the W lines (if any, or the U line if not), are an optional\n-   --  series of lines that indicates the usage of the pragma Linker_Options in\n-   --  the associated unit. For each appearance of a pragma Linker_Options (or\n-   --  Link_With) in the unit, a line is present with the form:\n+   --  Following the T and W lines (if any, or the U line if not), are\n+   --  an optional series of lines that indicates the usage of the pragma\n+   --  Linker_Options in the associated unit. For each appearance of a pragma\n+   --  Linker_Options (or Link_With) in the unit, a line is present with the\n+   --  form:\n \n    --    L \"string\"\n "}, {"sha": "02eb1987d8ec2945b5e6dfae4831fff7da4fdbce", "filename": "gcc/ada/lib.adb", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flib.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flib.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib.adb?ref=bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda", "patch": "@@ -178,6 +178,16 @@ package body Lib is\n       return Units.Table (U).OA_Setting;\n    end OA_Setting;\n \n+   function Primary_Stack_Count (U : Unit_Number_Type) return Int is\n+   begin\n+      return Units.Table (U).Primary_Stack_Count;\n+   end Primary_Stack_Count;\n+\n+   function Sec_Stack_Count  (U : Unit_Number_Type) return Int is\n+   begin\n+      return Units.Table (U).Sec_Stack_Count;\n+   end Sec_Stack_Count;\n+\n    function Source_Index (U : Unit_Number_Type) return Source_File_Index is\n    begin\n       return Units.Table (U).Source_Index;\n@@ -1027,6 +1037,26 @@ package body Lib is\n       return Get_Source_Unit (N1) = Get_Source_Unit (N2);\n    end In_Same_Source_Unit;\n \n+   -----------------------------------\n+   -- Increment_Primary_Stack_Count --\n+   -----------------------------------\n+\n+   procedure Increment_Primary_Stack_Count (Increment : Int) is\n+      PSC : Int renames Units.Table (Current_Sem_Unit).Primary_Stack_Count;\n+   begin\n+      PSC := PSC + Increment;\n+   end Increment_Primary_Stack_Count;\n+\n+   -------------------------------\n+   -- Increment_Sec_Stack_Count --\n+   -------------------------------\n+\n+   procedure Increment_Sec_Stack_Count (Increment : Int) is\n+      SSC : Int renames Units.Table (Current_Sem_Unit).Sec_Stack_Count;\n+   begin\n+      SSC := SSC + Increment;\n+   end Increment_Sec_Stack_Count;\n+\n    -----------------------------\n    -- Increment_Serial_Number --\n    -----------------------------"}, {"sha": "f2b195c75c268899a4c8b38d04e44c0698c4639e", "filename": "gcc/ada/lib.ads", "status": "modified", "additions": 81, "deletions": 50, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flib.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flib.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib.ads?ref=bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda", "patch": "@@ -370,6 +370,20 @@ package Lib is\n    --      This is a character field containing L if Optimize_Alignment mode\n    --      was set locally, and O/T/S for Off/Time/Space default if not.\n \n+   --    Primary_Stack_Count\n+   --      The number of primary stacks belonging to tasks defined within the\n+   --      unit that have no Storage_Size specified when the either restriction\n+   --      No_Implicit_Heap_Allocations or No_Implicit_Task_Allocations is\n+   --      active. Only used by the binder to generate stacks for these tasks\n+   --      at bind time.\n+\n+   --    Sec_Stack_Count\n+   --      The number of secondary stacks belonging to tasks defined within the\n+   --      unit that have no Secondary_Stack_Size specified when the either\n+   --      the No_Implicit_Heap_Allocations or No_Implicit_Task_Allocations\n+   --      restrictions are active. Only used by the binder to generate stacks\n+   --      for these tasks at bind time.\n+\n    --    Serial_Number\n    --      This field holds a serial number used by New_Internal_Name to\n    --      generate unique temporary numbers on a unit by unit basis. The\n@@ -450,6 +464,8 @@ package Lib is\n    function Munit_Index      (U : Unit_Number_Type) return Nat;\n    function No_Elab_Code_All (U : Unit_Number_Type) return Boolean;\n    function OA_Setting       (U : Unit_Number_Type) return Character;\n+   function Primary_Stack_Count (U : Unit_Number_Type) return Int;\n+   function Sec_Stack_Count  (U : Unit_Number_Type) return Int;\n    function Source_Index     (U : Unit_Number_Type) return Source_File_Index;\n    function Unit_File_Name   (U : Unit_Number_Type) return File_Name_Type;\n    function Unit_Name        (U : Unit_Number_Type) return Unit_Name_Type;\n@@ -662,6 +678,13 @@ package Lib is\n    --  source unit, the criterion being that Get_Source_Unit yields the\n    --  same value for each argument.\n \n+   procedure Increment_Primary_Stack_Count (Increment : Int);\n+   --  Increment the Primary_Stack_Count field for the current unit by\n+   --  Increment.\n+\n+   procedure Increment_Sec_Stack_Count (Increment : Int);\n+   --  Increment the Sec_Stack_Count field for the current unit by Increment\n+\n    function Increment_Serial_Number return Nat;\n    --  Increment Serial_Number field for current unit, and return the\n    --  incremented value.\n@@ -794,6 +817,8 @@ private\n    pragma Inline (Fatal_Error);\n    pragma Inline (Generate_Code);\n    pragma Inline (Has_RACW);\n+   pragma Inline (Increment_Primary_Stack_Count);\n+   pragma Inline (Increment_Sec_Stack_Count);\n    pragma Inline (Increment_Serial_Number);\n    pragma Inline (Loading);\n    pragma Inline (Main_CPU);\n@@ -809,6 +834,8 @@ private\n    pragma Inline (Is_Predefined_Renaming);\n    pragma Inline (Is_Internal_Unit);\n    pragma Inline (Is_Predefined_Unit);\n+   pragma Inline (Primary_Stack_Count);\n+   pragma Inline (Sec_Stack_Count);\n    pragma Inline (Set_Loading);\n    pragma Inline (Set_Main_CPU);\n    pragma Inline (Set_Main_Priority);\n@@ -822,28 +849,30 @@ private\n    --  The Units Table\n \n    type Unit_Record is record\n-      Unit_File_Name    : File_Name_Type;\n-      Unit_Name         : Unit_Name_Type;\n-      Munit_Index       : Nat;\n-      Expected_Unit     : Unit_Name_Type;\n-      Source_Index      : Source_File_Index;\n-      Cunit             : Node_Id;\n-      Cunit_Entity      : Entity_Id;\n-      Dependency_Num    : Int;\n-      Ident_String      : Node_Id;\n-      Main_Priority     : Int;\n-      Main_CPU          : Int;\n-      Serial_Number     : Nat;\n-      Version           : Word;\n-      Error_Location    : Source_Ptr;\n-      Fatal_Error       : Fatal_Type;\n-      Generate_Code     : Boolean;\n-      Has_RACW          : Boolean;\n-      Dynamic_Elab      : Boolean;\n-      No_Elab_Code_All  : Boolean;\n-      Filler            : Boolean;\n-      Loading           : Boolean;\n-      OA_Setting        : Character;\n+      Unit_File_Name         : File_Name_Type;\n+      Unit_Name              : Unit_Name_Type;\n+      Munit_Index            : Nat;\n+      Expected_Unit          : Unit_Name_Type;\n+      Source_Index           : Source_File_Index;\n+      Cunit                  : Node_Id;\n+      Cunit_Entity           : Entity_Id;\n+      Dependency_Num         : Int;\n+      Ident_String           : Node_Id;\n+      Main_Priority          : Int;\n+      Main_CPU               : Int;\n+      Primary_Stack_Count    : Int;\n+      Sec_Stack_Count        : Int;\n+      Serial_Number          : Nat;\n+      Version                : Word;\n+      Error_Location         : Source_Ptr;\n+      Fatal_Error            : Fatal_Type;\n+      Generate_Code          : Boolean;\n+      Has_RACW               : Boolean;\n+      Dynamic_Elab           : Boolean;\n+      No_Elab_Code_All       : Boolean;\n+      Filler                 : Boolean;\n+      Loading                : Boolean;\n+      OA_Setting             : Character;\n \n       Is_Predefined_Renaming : Boolean;\n       Is_Internal_Unit       : Boolean;\n@@ -856,36 +885,38 @@ private\n    --  written by Tree_Gen, we do not write uninitialized values to the file.\n \n    for Unit_Record use record\n-      Unit_File_Name    at  0 range 0 .. 31;\n-      Unit_Name         at  4 range 0 .. 31;\n-      Munit_Index       at  8 range 0 .. 31;\n-      Expected_Unit     at 12 range 0 .. 31;\n-      Source_Index      at 16 range 0 .. 31;\n-      Cunit             at 20 range 0 .. 31;\n-      Cunit_Entity      at 24 range 0 .. 31;\n-      Dependency_Num    at 28 range 0 .. 31;\n-      Ident_String      at 32 range 0 .. 31;\n-      Main_Priority     at 36 range 0 .. 31;\n-      Main_CPU          at 40 range 0 .. 31;\n-      Serial_Number     at 44 range 0 .. 31;\n-      Version           at 48 range 0 .. 31;\n-      Error_Location    at 52 range 0 .. 31;\n-      Fatal_Error       at 56 range 0 ..  7;\n-      Generate_Code     at 57 range 0 ..  7;\n-      Has_RACW          at 58 range 0 ..  7;\n-      Dynamic_Elab      at 59 range 0 ..  7;\n-      No_Elab_Code_All  at 60 range 0 ..  7;\n-      Filler            at 61 range 0 ..  7;\n-      OA_Setting        at 62 range 0 ..  7;\n-      Loading           at 63 range 0 ..  7;\n-\n-      Is_Predefined_Renaming at 64 range 0 .. 7;\n-      Is_Internal_Unit       at 65 range 0 .. 7;\n-      Is_Predefined_Unit     at 66 range 0 .. 7;\n-      Filler2                at 67 range 0 .. 7;\n+      Unit_File_Name         at  0 range 0 .. 31;\n+      Unit_Name              at  4 range 0 .. 31;\n+      Munit_Index            at  8 range 0 .. 31;\n+      Expected_Unit          at 12 range 0 .. 31;\n+      Source_Index           at 16 range 0 .. 31;\n+      Cunit                  at 20 range 0 .. 31;\n+      Cunit_Entity           at 24 range 0 .. 31;\n+      Dependency_Num         at 28 range 0 .. 31;\n+      Ident_String           at 32 range 0 .. 31;\n+      Main_Priority          at 36 range 0 .. 31;\n+      Main_CPU               at 40 range 0 .. 31;\n+      Primary_Stack_Count    at 44 range 0 .. 31;\n+      Sec_Stack_Count        at 48 range 0 .. 31;\n+      Serial_Number          at 52 range 0 .. 31;\n+      Version                at 56 range 0 .. 31;\n+      Error_Location         at 60 range 0 .. 31;\n+      Fatal_Error            at 64 range 0 ..  7;\n+      Generate_Code          at 65 range 0 ..  7;\n+      Has_RACW               at 66 range 0 ..  7;\n+      Dynamic_Elab           at 67 range 0 ..  7;\n+      No_Elab_Code_All       at 68 range 0 ..  7;\n+      Filler                 at 69 range 0 ..  7;\n+      OA_Setting             at 70 range 0 ..  7;\n+      Loading                at 71 range 0 ..  7;\n+\n+      Is_Predefined_Renaming at 72 range 0 .. 7;\n+      Is_Internal_Unit       at 73 range 0 .. 7;\n+      Is_Predefined_Unit     at 74 range 0 .. 7;\n+      Filler2                at 75 range 0 .. 7;\n    end record;\n \n-   for Unit_Record'Size use 68 * 8;\n+   for Unit_Record'Size use 76 * 8;\n    --  This ensures that we did not leave out any fields\n \n    package Units is new Table.Table ("}, {"sha": "a5485aa268d74f6bfc6505125f638dbb931879e3", "filename": "gcc/ada/libgnarl/s-solita.adb", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flibgnarl%2Fs-solita.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flibgnarl%2Fs-solita.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-solita.adb?ref=bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda", "patch": "@@ -44,6 +44,7 @@ with Ada.Exceptions.Is_Null_Occurrence;\n with System.Task_Primitives.Operations;\n with System.Tasking;\n with System.Stack_Checking;\n+with System.Secondary_Stack;\n \n package body System.Soft_Links.Tasking is\n \n@@ -52,6 +53,8 @@ package body System.Soft_Links.Tasking is\n \n    use Ada.Exceptions;\n \n+   use type System.Secondary_Stack.SS_Stack_Ptr;\n+\n    use type System.Tasking.Task_Id;\n    use type System.Tasking.Termination_Handler;\n \n@@ -71,8 +74,8 @@ package body System.Soft_Links.Tasking is\n    procedure Set_Jmpbuf_Address (Addr : Address);\n    --  Get/Set Jmpbuf_Address for current task\n \n-   function  Get_Sec_Stack_Addr return  Address;\n-   procedure Set_Sec_Stack_Addr (Addr : Address);\n+   function  Get_Sec_Stack return SST.SS_Stack_Ptr;\n+   procedure Set_Sec_Stack (Stack : SST.SS_Stack_Ptr);\n    --  Get/Set location of current task's secondary stack\n \n    procedure Timed_Delay_T (Time : Duration; Mode : Integer);\n@@ -93,14 +96,14 @@ package body System.Soft_Links.Tasking is\n       return STPO.Self.Common.Compiler_Data.Jmpbuf_Address;\n    end Get_Jmpbuf_Address;\n \n-   function Get_Sec_Stack_Addr return  Address is\n+   function Get_Sec_Stack return SST.SS_Stack_Ptr is\n    begin\n-      return Result : constant Address :=\n-        STPO.Self.Common.Compiler_Data.Sec_Stack_Addr\n+      return Result : constant SST.SS_Stack_Ptr :=\n+        STPO.Self.Common.Compiler_Data.Sec_Stack_Ptr\n       do\n-         pragma Assert (Result /= Null_Address);\n+         pragma Assert (Result /= null);\n       end return;\n-   end Get_Sec_Stack_Addr;\n+   end Get_Sec_Stack;\n \n    function Get_Stack_Info return Stack_Checking.Stack_Access is\n    begin\n@@ -116,10 +119,10 @@ package body System.Soft_Links.Tasking is\n       STPO.Self.Common.Compiler_Data.Jmpbuf_Address := Addr;\n    end Set_Jmpbuf_Address;\n \n-   procedure Set_Sec_Stack_Addr (Addr : Address) is\n+   procedure Set_Sec_Stack (Stack : SST.SS_Stack_Ptr) is\n    begin\n-      STPO.Self.Common.Compiler_Data.Sec_Stack_Addr := Addr;\n-   end Set_Sec_Stack_Addr;\n+      STPO.Self.Common.Compiler_Data.Sec_Stack_Ptr := Stack;\n+   end Set_Sec_Stack;\n \n    -------------------\n    -- Timed_Delay_T --\n@@ -213,20 +216,20 @@ package body System.Soft_Links.Tasking is\n \n          SSL.Get_Jmpbuf_Address       := Get_Jmpbuf_Address'Access;\n          SSL.Set_Jmpbuf_Address       := Set_Jmpbuf_Address'Access;\n-         SSL.Get_Sec_Stack_Addr       := Get_Sec_Stack_Addr'Access;\n+         SSL.Get_Sec_Stack            := Get_Sec_Stack'Access;\n          SSL.Get_Stack_Info           := Get_Stack_Info'Access;\n-         SSL.Set_Sec_Stack_Addr       := Set_Sec_Stack_Addr'Access;\n+         SSL.Set_Sec_Stack            := Set_Sec_Stack'Access;\n          SSL.Timed_Delay              := Timed_Delay_T'Access;\n          SSL.Task_Termination_Handler := Task_Termination_Handler_T'Access;\n \n          --  No need to create a new secondary stack, since we will use the\n          --  default one created in s-secsta.adb.\n \n-         SSL.Set_Sec_Stack_Addr     (SSL.Get_Sec_Stack_Addr_NT);\n+         SSL.Set_Sec_Stack          (SSL.Get_Sec_Stack_NT);\n          SSL.Set_Jmpbuf_Address     (SSL.Get_Jmpbuf_Address_NT);\n       end if;\n \n-      pragma Assert (Get_Sec_Stack_Addr /= Null_Address);\n+      pragma Assert (Get_Sec_Stack /= null);\n    end Init_Tasking_Soft_Links;\n \n end System.Soft_Links.Tasking;"}, {"sha": "ba5a09907c1b57b575c6d6e22326f316a81ef0ea", "filename": "gcc/ada/libgnarl/s-taprop__linux.adb", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flibgnarl%2Fs-taprop__linux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flibgnarl%2Fs-taprop__linux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-taprop__linux.adb?ref=bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda", "patch": "@@ -152,11 +152,16 @@ package body System.Task_Primitives.Operations is\n    -- Support for foreign threads --\n    ---------------------------------\n \n-   function Register_Foreign_Thread (Thread : Thread_Id) return Task_Id;\n-   --  Allocate and Initialize a new ATCB for the current Thread\n+   function Register_Foreign_Thread\n+     (Thread         : Thread_Id;\n+      Sec_Stack_Size : Size_Type := Unspecified_Size) return Task_Id;\n+   --  Allocate and initialize a new ATCB for the current Thread. The size of\n+   --  the secondary stack can be optionally specified.\n \n    function Register_Foreign_Thread\n-     (Thread : Thread_Id) return Task_Id is separate;\n+     (Thread         : Thread_Id;\n+      Sec_Stack_Size : Size_Type := Unspecified_Size)\n+     return Task_Id is separate;\n \n    -----------------------\n    -- Local Subprograms --"}, {"sha": "b14444ad1850c42c422e2b9d566de52c92921386", "filename": "gcc/ada/libgnarl/s-taprop__mingw.adb", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flibgnarl%2Fs-taprop__mingw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flibgnarl%2Fs-taprop__mingw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-taprop__mingw.adb?ref=bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda", "patch": "@@ -190,11 +190,16 @@ package body System.Task_Primitives.Operations is\n    -- Support for foreign threads --\n    ---------------------------------\n \n-   function Register_Foreign_Thread (Thread : Thread_Id) return Task_Id;\n-   --  Allocate and Initialize a new ATCB for the current Thread\n+   function Register_Foreign_Thread\n+     (Thread         : Thread_Id;\n+      Sec_Stack_Size : Size_Type := Unspecified_Size) return Task_Id;\n+   --  Allocate and initialize a new ATCB for the current Thread. The size of\n+   --  the secondary stack can be optionally specified.\n \n    function Register_Foreign_Thread\n-     (Thread : Thread_Id) return Task_Id is separate;\n+     (Thread         : Thread_Id;\n+      Sec_Stack_Size : Size_Type := Unspecified_Size)\n+     return Task_Id is separate;\n \n    ----------------------------------\n    -- Condition Variable Functions --"}, {"sha": "a614507bd04fa96b2c4d93f0d8b4378d4400e328", "filename": "gcc/ada/libgnarl/s-taprop__posix.adb", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flibgnarl%2Fs-taprop__posix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flibgnarl%2Fs-taprop__posix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-taprop__posix.adb?ref=bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda", "patch": "@@ -156,11 +156,16 @@ package body System.Task_Primitives.Operations is\n    -- Support for foreign threads --\n    ---------------------------------\n \n-   function Register_Foreign_Thread (Thread : Thread_Id) return Task_Id;\n-   --  Allocate and Initialize a new ATCB for the current Thread\n+   function Register_Foreign_Thread\n+     (Thread         : Thread_Id;\n+      Sec_Stack_Size : Size_Type := Unspecified_Size) return Task_Id;\n+   --  Allocate and initialize a new ATCB for the current Thread. The size of\n+   --  the secondary stack can be optionally specified.\n \n    function Register_Foreign_Thread\n-     (Thread : Thread_Id) return Task_Id is separate;\n+     (Thread         : Thread_Id;\n+      Sec_Stack_Size : Size_Type := Unspecified_Size)\n+     return Task_Id is separate;\n \n    -----------------------\n    -- Local Subprograms --"}, {"sha": "26d83e584d6f17f994188c7b12e5c56754c082c9", "filename": "gcc/ada/libgnarl/s-taprop__solaris.adb", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flibgnarl%2Fs-taprop__solaris.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flibgnarl%2Fs-taprop__solaris.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-taprop__solaris.adb?ref=bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda", "patch": "@@ -237,11 +237,16 @@ package body System.Task_Primitives.Operations is\n    -- Support for foreign threads --\n    ---------------------------------\n \n-   function Register_Foreign_Thread (Thread : Thread_Id) return Task_Id;\n-   --  Allocate and Initialize a new ATCB for the current Thread\n+   function Register_Foreign_Thread\n+     (Thread         : Thread_Id;\n+      Sec_Stack_Size : Size_Type := Unspecified_Size) return Task_Id;\n+   --  Allocate and initialize a new ATCB for the current Thread. The size of\n+   --  the secondary stack can be optionally specified.\n \n    function Register_Foreign_Thread\n-     (Thread : Thread_Id) return Task_Id is separate;\n+     (Thread         : Thread_Id;\n+      Sec_Stack_Size : Size_Type := Unspecified_Size)\n+     return Task_Id is separate;\n \n    ------------\n    -- Checks --"}, {"sha": "83ebc22312e0e843907b3634ccb74ba132eca003", "filename": "gcc/ada/libgnarl/s-taprop__vxworks.adb", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flibgnarl%2Fs-taprop__vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flibgnarl%2Fs-taprop__vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-taprop__vxworks.adb?ref=bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda", "patch": "@@ -149,11 +149,16 @@ package body System.Task_Primitives.Operations is\n    -- Support for foreign threads --\n    ---------------------------------\n \n-   function Register_Foreign_Thread (Thread : Thread_Id) return Task_Id;\n-   --  Allocate and Initialize a new ATCB for the current Thread\n+   function Register_Foreign_Thread\n+     (Thread         : Thread_Id;\n+      Sec_Stack_Size : Size_Type := Unspecified_Size) return Task_Id;\n+   --  Allocate and initialize a new ATCB for the current Thread. The size of\n+   --  the secondary stack can be optionally specified.\n \n    function Register_Foreign_Thread\n-     (Thread : Thread_Id) return Task_Id is separate;\n+     (Thread         : Thread_Id;\n+      Sec_Stack_Size : Size_Type := Unspecified_Size)\n+     return Task_Id is separate;\n \n    -----------------------\n    -- Local Subprograms --"}, {"sha": "7b9f260927e165f0595b6a57f477c285436f41ba", "filename": "gcc/ada/libgnarl/s-tarest.adb", "status": "modified", "additions": 67, "deletions": 122, "changes": 189, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flibgnarl%2Fs-tarest.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flibgnarl%2Fs-tarest.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-tarest.adb?ref=bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda", "patch": "@@ -47,12 +47,6 @@ with Ada.Exceptions;\n \n with System.Task_Primitives.Operations;\n with System.Soft_Links.Tasking;\n-with System.Storage_Elements;\n-\n-with System.Secondary_Stack;\n-pragma Elaborate_All (System.Secondary_Stack);\n---  Make sure the body of Secondary_Stack is elaborated before calling\n---  Init_Tasking_Soft_Links. See comments for this routine for explanation.\n \n with System.Soft_Links;\n --  Used for the non-tasking routines (*_NT) that refer to global data. They\n@@ -65,8 +59,6 @@ package body System.Tasking.Restricted.Stages is\n \n    package STPO renames System.Task_Primitives.Operations;\n    package SSL  renames System.Soft_Links;\n-   package SSE  renames System.Storage_Elements;\n-   package SST  renames System.Secondary_Stack;\n \n    use Ada.Exceptions;\n \n@@ -115,17 +107,18 @@ package body System.Tasking.Restricted.Stages is\n    --  This should only be called by the Task_Wrapper procedure.\n \n    procedure Create_Restricted_Task\n-     (Priority             : Integer;\n-      Stack_Address        : System.Address;\n-      Size                 : System.Parameters.Size_Type;\n-      Secondary_Stack_Size : System.Parameters.Size_Type;\n-      Task_Info            : System.Task_Info.Task_Info_Type;\n-      CPU                  : Integer;\n-      State                : Task_Procedure_Access;\n-      Discriminants        : System.Address;\n-      Elaborated           : Access_Boolean;\n-      Task_Image           : String;\n-      Created_Task         : Task_Id);\n+     (Priority          : Integer;\n+      Stack_Address     : System.Address;\n+      Stack_Size        : System.Parameters.Size_Type;\n+      Sec_Stack_Address : System.Secondary_Stack.SS_Stack_Ptr;\n+      Sec_Stack_Size    : System.Parameters.Size_Type;\n+      Task_Info         : System.Task_Info.Task_Info_Type;\n+      CPU               : Integer;\n+      State             : Task_Procedure_Access;\n+      Discriminants     : System.Address;\n+      Elaborated        : Access_Boolean;\n+      Task_Image        : String;\n+      Created_Task      : Task_Id);\n    --  Code shared between Create_Restricted_Task (the concurrent version) and\n    --  Create_Restricted_Task_Sequential. See comment of the former in the\n    --  specification of this package.\n@@ -205,54 +198,6 @@ package body System.Tasking.Restricted.Stages is\n       --\n       --  DO NOT delete ID. As noted, it is needed on some targets.\n \n-      function Secondary_Stack_Size return Storage_Elements.Storage_Offset;\n-      --  Returns the size of the secondary stack for the task. For fixed\n-      --  secondary stacks, the function will return the ATCB field\n-      --  Secondary_Stack_Size if it is not set to Unspecified_Size,\n-      --  otherwise a percentage of the stack is reserved using the\n-      --  System.Parameters.Sec_Stack_Percentage property.\n-\n-      --  Dynamic secondary stacks are allocated in System.Soft_Links.\n-      --  Create_TSD and thus the function returns 0 to suppress the\n-      --  creation of the fixed secondary stack in the primary stack.\n-\n-      --------------------------\n-      -- Secondary_Stack_Size --\n-      --------------------------\n-\n-      function Secondary_Stack_Size return Storage_Elements.Storage_Offset is\n-         use System.Storage_Elements;\n-         use System.Secondary_Stack;\n-\n-      begin\n-         if Parameters.Sec_Stack_Dynamic then\n-            return 0;\n-\n-         elsif Self_ID.Common.Secondary_Stack_Size = Unspecified_Size then\n-            return (Self_ID.Common.Compiler_Data.Pri_Stack_Info.Size\n-                       * SSE.Storage_Offset (Sec_Stack_Percentage) / 100);\n-         else\n-            --  Use the size specified by aspect Secondary_Stack_Size padded\n-            --  by the amount of space used by the stack data structure.\n-\n-            return Storage_Offset (Self_ID.Common.Secondary_Stack_Size) +\n-                     Storage_Offset (Minimum_Secondary_Stack_Size);\n-         end if;\n-      end Secondary_Stack_Size;\n-\n-      Secondary_Stack : aliased Storage_Elements.Storage_Array\n-                          (1 .. Secondary_Stack_Size);\n-      for Secondary_Stack'Alignment use Standard'Maximum_Alignment;\n-      --  This is the secondary stack data. Note that it is critical that this\n-      --  have maximum alignment, since any kind of data can be allocated here.\n-\n-      pragma Warnings (Off);\n-      Secondary_Stack_Address : System.Address := Secondary_Stack'Address;\n-      pragma Warnings (On);\n-      --  Address of secondary stack. In the fixed secondary stack case, this\n-      --  value is not modified, causing a warning, hence the bracketing with\n-      --  Warnings (Off/On).\n-\n       Cause : Cause_Of_Termination := Normal;\n       --  Indicates the reason why this task terminates. Normal corresponds to\n       --  a task terminating due to completing the last statement of its body.\n@@ -266,15 +211,7 @@ package body System.Tasking.Restricted.Stages is\n       --  execution of its task body, then EO will contain the associated\n       --  exception occurrence. Otherwise, it will contain Null_Occurrence.\n \n-   --  Start of processing for Task_Wrapper\n-\n    begin\n-      if not Parameters.Sec_Stack_Dynamic then\n-         Self_ID.Common.Compiler_Data.Sec_Stack_Addr :=\n-           Secondary_Stack'Address;\n-         SST.SS_Init (Secondary_Stack_Address, Integer (Secondary_Stack'Last));\n-      end if;\n-\n       --  Initialize low-level TCB components, that cannot be initialized by\n       --  the creator.\n \n@@ -539,17 +476,18 @@ package body System.Tasking.Restricted.Stages is\n    ----------------------------\n \n    procedure Create_Restricted_Task\n-     (Priority             : Integer;\n-      Stack_Address        : System.Address;\n-      Size                 : System.Parameters.Size_Type;\n-      Secondary_Stack_Size : System.Parameters.Size_Type;\n-      Task_Info            : System.Task_Info.Task_Info_Type;\n-      CPU                  : Integer;\n-      State                : Task_Procedure_Access;\n-      Discriminants        : System.Address;\n-      Elaborated           : Access_Boolean;\n-      Task_Image           : String;\n-      Created_Task         : Task_Id)\n+     (Priority          : Integer;\n+      Stack_Address     : System.Address;\n+      Stack_Size        : System.Parameters.Size_Type;\n+      Sec_Stack_Address : System.Secondary_Stack.SS_Stack_Ptr;\n+      Sec_Stack_Size    : System.Parameters.Size_Type;\n+      Task_Info         : System.Task_Info.Task_Info_Type;\n+      CPU               : Integer;\n+      State             : Task_Procedure_Access;\n+      Discriminants     : System.Address;\n+      Elaborated        : Access_Boolean;\n+      Task_Image        : String;\n+      Created_Task      : Task_Id)\n    is\n       Self_ID       : constant Task_Id := STPO.Self;\n       Base_Priority : System.Any_Priority;\n@@ -608,8 +546,7 @@ package body System.Tasking.Restricted.Stages is\n \n       Initialize_ATCB\n         (Self_ID, State, Discriminants, Self_ID, Elaborated, Base_Priority,\n-         Base_CPU, null, Task_Info, Size, Secondary_Stack_Size,\n-         Created_Task, Success);\n+         Base_CPU, null, Task_Info, Stack_Size, Created_Task, Success);\n \n       --  If we do our job right then there should never be any failures, which\n       --  was probably said about the Titanic; so just to be safe, let's retain\n@@ -639,25 +576,31 @@ package body System.Tasking.Restricted.Stages is\n          Unlock_RTS;\n       end if;\n \n-      --  Create TSD as early as possible in the creation of a task, since it\n-      --  may be used by the operation of Ada code within the task.\n+      --  Create TSD as early as possible in the creation of a task, since\n+      --  it may be used by the operation of Ada code within the task. If the\n+      --  compiler has not allocated a secondary stack, a stack will be\n+      --  allocated fromt the binder generated pool.\n \n-      SSL.Create_TSD (Created_Task.Common.Compiler_Data);\n+      SSL.Create_TSD\n+        (Created_Task.Common.Compiler_Data,\n+         Sec_Stack_Address,\n+         Sec_Stack_Size);\n    end Create_Restricted_Task;\n \n    procedure Create_Restricted_Task\n-     (Priority             : Integer;\n-      Stack_Address        : System.Address;\n-      Size                 : System.Parameters.Size_Type;\n-      Secondary_Stack_Size : System.Parameters.Size_Type;\n-      Task_Info            : System.Task_Info.Task_Info_Type;\n-      CPU                  : Integer;\n-      State                : Task_Procedure_Access;\n-      Discriminants        : System.Address;\n-      Elaborated           : Access_Boolean;\n-      Chain                : in out Activation_Chain;\n-      Task_Image           : String;\n-      Created_Task         : Task_Id)\n+     (Priority          : Integer;\n+      Stack_Address     : System.Address;\n+      Stack_Size        : System.Parameters.Size_Type;\n+      Sec_Stack_Address : System.Secondary_Stack.SS_Stack_Ptr;\n+      Sec_Stack_Size    : System.Parameters.Size_Type;\n+      Task_Info         : System.Task_Info.Task_Info_Type;\n+      CPU               : Integer;\n+      State             : Task_Procedure_Access;\n+      Discriminants     : System.Address;\n+      Elaborated        : Access_Boolean;\n+      Chain             : in out Activation_Chain;\n+      Task_Image        : String;\n+      Created_Task      : Task_Id)\n    is\n    begin\n       if Partition_Elaboration_Policy = 'S' then\n@@ -668,14 +611,14 @@ package body System.Tasking.Restricted.Stages is\n          --  sequential, activation must be deferred.\n \n          Create_Restricted_Task_Sequential\n-           (Priority, Stack_Address, Size, Secondary_Stack_Size,\n-            Task_Info, CPU, State, Discriminants, Elaborated,\n+           (Priority, Stack_Address, Stack_Size, Sec_Stack_Address,\n+            Sec_Stack_Size, Task_Info, CPU, State, Discriminants, Elaborated,\n             Task_Image, Created_Task);\n \n       else\n          Create_Restricted_Task\n-           (Priority, Stack_Address, Size, Secondary_Stack_Size,\n-            Task_Info, CPU, State, Discriminants, Elaborated,\n+           (Priority, Stack_Address, Stack_Size, Sec_Stack_Address,\n+            Sec_Stack_Size, Task_Info, CPU, State, Discriminants, Elaborated,\n             Task_Image, Created_Task);\n \n          --  Append this task to the activation chain\n@@ -690,22 +633,24 @@ package body System.Tasking.Restricted.Stages is\n    ---------------------------------------\n \n    procedure Create_Restricted_Task_Sequential\n-     (Priority             : Integer;\n-      Stack_Address        : System.Address;\n-      Size                 : System.Parameters.Size_Type;\n-      Secondary_Stack_Size : System.Parameters.Size_Type;\n-      Task_Info            : System.Task_Info.Task_Info_Type;\n-      CPU                  : Integer;\n-      State                : Task_Procedure_Access;\n-      Discriminants        : System.Address;\n-      Elaborated           : Access_Boolean;\n-      Task_Image           : String;\n-      Created_Task         : Task_Id) is\n+     (Priority          : Integer;\n+      Stack_Address     : System.Address;\n+      Stack_Size        : System.Parameters.Size_Type;\n+      Sec_Stack_Address : System.Secondary_Stack.SS_Stack_Ptr;\n+      Sec_Stack_Size    : System.Parameters.Size_Type;\n+      Task_Info         : System.Task_Info.Task_Info_Type;\n+      CPU               : Integer;\n+      State             : Task_Procedure_Access;\n+      Discriminants     : System.Address;\n+      Elaborated        : Access_Boolean;\n+      Task_Image        : String;\n+      Created_Task      : Task_Id)\n+   is\n    begin\n-      Create_Restricted_Task (Priority, Stack_Address, Size,\n-                              Secondary_Stack_Size, Task_Info,\n-                              CPU, State, Discriminants, Elaborated,\n-                              Task_Image, Created_Task);\n+      Create_Restricted_Task\n+        (Priority, Stack_Address, Stack_Size, Sec_Stack_Address,\n+         Sec_Stack_Size, Task_Info, CPU, State, Discriminants, Elaborated,\n+         Task_Image, Created_Task);\n \n       --  Append this task to the activation chain\n "}, {"sha": "e51fa58ca61b3ab3ff39041ce00084e3beb30eed", "filename": "gcc/ada/libgnarl/s-tarest.ads", "status": "modified", "additions": 36, "deletions": 29, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flibgnarl%2Fs-tarest.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flibgnarl%2Fs-tarest.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-tarest.ads?ref=bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda", "patch": "@@ -43,8 +43,9 @@\n --  The restricted GNARLI is also composed of System.Protected_Objects and\n --  System.Protected_Objects.Single_Entry\n \n-with System.Task_Info;\n with System.Parameters;\n+with System.Secondary_Stack;\n+with System.Task_Info;\n \n package System.Tasking.Restricted.Stages is\n    pragma Elaborate_Body;\n@@ -128,33 +129,38 @@ package System.Tasking.Restricted.Stages is\n    --  by the binder generated code, before calling elaboration code.\n \n    procedure Create_Restricted_Task\n-     (Priority             : Integer;\n-      Stack_Address        : System.Address;\n-      Size                 : System.Parameters.Size_Type;\n-      Secondary_Stack_Size : System.Parameters.Size_Type;\n-      Task_Info            : System.Task_Info.Task_Info_Type;\n-      CPU                  : Integer;\n-      State                : Task_Procedure_Access;\n-      Discriminants        : System.Address;\n-      Elaborated           : Access_Boolean;\n-      Chain                : in out Activation_Chain;\n-      Task_Image           : String;\n-      Created_Task         : Task_Id);\n+     (Priority          : Integer;\n+      Stack_Address     : System.Address;\n+      Stack_Size        : System.Parameters.Size_Type;\n+      Sec_Stack_Address : System.Secondary_Stack.SS_Stack_Ptr;\n+      Sec_Stack_Size    : System.Parameters.Size_Type;\n+      Task_Info         : System.Task_Info.Task_Info_Type;\n+      CPU               : Integer;\n+      State             : Task_Procedure_Access;\n+      Discriminants     : System.Address;\n+      Elaborated        : Access_Boolean;\n+      Chain             : in out Activation_Chain;\n+      Task_Image        : String;\n+      Created_Task      : Task_Id);\n    --  Compiler interface only. Do not call from within the RTS.\n    --  This must be called to create a new task, when the partition\n    --  elaboration policy is not specified (or is concurrent).\n    --\n    --  Priority is the task's priority (assumed to be in the\n-   --  System.Any_Priority'Range)\n+   --  System.Any_Priority'Range).\n    --\n    --  Stack_Address is the start address of the stack associated to the task,\n    --  in case it has been preallocated by the compiler; it is equal to\n    --  Null_Address when the stack needs to be allocated by the underlying\n    --  operating system.\n    --\n-   --  Size is the stack size of the task to create\n+   --  Stack_Size is the stack size of the task to create.\n+   --\n+   --  Sec_Stack_Address is the pointer to the secondary stack created by the\n+   --  compiler. If null, the secondary stack is either allocated by the binder\n+   --  or the run-time.\n    --\n-   --  Secondary_Stack_Size is the secondary stack size of the task to create\n+   --  Secondary_Stack_Size is the secondary stack size of the task to create.\n    --\n    --  Task_Info is the task info associated with the created task, or\n    --  Unspecified_Task_Info if none.\n@@ -164,7 +170,7 @@ package System.Tasking.Restricted.Stages is\n    --   checks are performed when analyzing the pragma, and dynamic ones are\n    --   performed before setting the affinity at run time.\n    --\n-   --  State is the compiler generated task's procedure body\n+   --  State is the compiler generated task's procedure body.\n    --\n    --  Discriminants is a pointer to a limited record whose discriminants are\n    --  those of the task to create. This parameter should be passed as the\n@@ -182,20 +188,21 @@ package System.Tasking.Restricted.Stages is\n    --\n    --  Created_Task is the resulting task.\n    --\n-   --  This procedure can raise Storage_Error if the task creation fails\n+   --  This procedure can raise Storage_Error if the task creation fails.\n \n    procedure Create_Restricted_Task_Sequential\n-     (Priority             : Integer;\n-      Stack_Address        : System.Address;\n-      Size                 : System.Parameters.Size_Type;\n-      Secondary_Stack_Size : System.Parameters.Size_Type;\n-      Task_Info            : System.Task_Info.Task_Info_Type;\n-      CPU                  : Integer;\n-      State                : Task_Procedure_Access;\n-      Discriminants        : System.Address;\n-      Elaborated           : Access_Boolean;\n-      Task_Image           : String;\n-      Created_Task         : Task_Id);\n+     (Priority          : Integer;\n+      Stack_Address     : System.Address;\n+      Stack_Size        : System.Parameters.Size_Type;\n+      Sec_Stack_Address : System.Secondary_Stack.SS_Stack_Ptr;\n+      Sec_Stack_Size    : System.Parameters.Size_Type;\n+      Task_Info         : System.Task_Info.Task_Info_Type;\n+      CPU               : Integer;\n+      State             : Task_Procedure_Access;\n+      Discriminants     : System.Address;\n+      Elaborated        : Access_Boolean;\n+      Task_Image        : String;\n+      Created_Task      : Task_Id);\n    --  Compiler interface only. Do not call from within the RTS.\n    --  This must be called to create a new task, when the sequential partition\n    --  elaboration policy is used."}, {"sha": "d9fc6e3213b97225c1a68763f53171b5445150cd", "filename": "gcc/ada/libgnarl/s-taskin.adb", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flibgnarl%2Fs-taskin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flibgnarl%2Fs-taskin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-taskin.adb?ref=bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda", "patch": "@@ -96,7 +96,6 @@ package body System.Tasking is\n       Domain               : Dispatching_Domain_Access;\n       Task_Info            : System.Task_Info.Task_Info_Type;\n       Stack_Size           : System.Parameters.Size_Type;\n-      Secondary_Stack_Size : System.Parameters.Size_Type;\n       T                    : Task_Id;\n       Success              : out Boolean)\n    is\n@@ -147,7 +146,6 @@ package body System.Tasking is\n       T.Common.Specific_Handler         := null;\n       T.Common.Debug_Events             := (others => False);\n       T.Common.Task_Image_Len           := 0;\n-      T.Common.Secondary_Stack_Size     := Secondary_Stack_Size;\n \n       if T.Common.Parent = null then\n \n@@ -244,7 +242,6 @@ package body System.Tasking is\n          Domain               => System_Domain,\n          Task_Info            => Task_Info.Unspecified_Task_Info,\n          Stack_Size           => 0,\n-         Secondary_Stack_Size => Parameters.Unspecified_Size,\n          T                    => T,\n          Success              => Success);\n       pragma Assert (Success);"}, {"sha": "7c8b44b952ca730fac75aa828a02244e38f5ff7e", "filename": "gcc/ada/libgnarl/s-taskin.ads", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flibgnarl%2Fs-taskin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flibgnarl%2Fs-taskin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-taskin.ads?ref=bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda", "patch": "@@ -37,12 +37,12 @@\n with Ada.Exceptions;\n with Ada.Unchecked_Conversion;\n \n+with System.Multiprocessors;\n with System.Parameters;\n-with System.Task_Info;\n with System.Soft_Links;\n-with System.Task_Primitives;\n with System.Stack_Usage;\n-with System.Multiprocessors;\n+with System.Task_Info;\n+with System.Task_Primitives;\n \n package System.Tasking is\n    pragma Preelaborate;\n@@ -702,13 +702,6 @@ package System.Tasking is\n       --  need to do different things depending on the situation.\n       --\n       --  Protection: Self.L\n-\n-      Secondary_Stack_Size : System.Parameters.Size_Type;\n-      --  Secondary_Stack_Size is the size of the secondary stack for the\n-      --  task. Defined here since it is the responsibility of the task to\n-      --  creates its own secondary stack.\n-      --\n-      --  Protected: Only accessed by Self\n    end record;\n \n    ---------------------------------------\n@@ -1173,7 +1166,6 @@ package System.Tasking is\n       Domain               : Dispatching_Domain_Access;\n       Task_Info            : System.Task_Info.Task_Info_Type;\n       Stack_Size           : System.Parameters.Size_Type;\n-      Secondary_Stack_Size : System.Parameters.Size_Type;\n       T                    : Task_Id;\n       Success              : out Boolean);\n    --  Initialize fields of the TCB for task T, and link into global TCB"}, {"sha": "518a02c8b48ebd3764147ee4c70286df9c5807fb", "filename": "gcc/ada/libgnarl/s-tassta.adb", "status": "modified", "additions": 18, "deletions": 75, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flibgnarl%2Fs-tassta.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flibgnarl%2Fs-tassta.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-tassta.adb?ref=bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda", "patch": "@@ -71,11 +71,11 @@ package body System.Tasking.Stages is\n    package STPO renames System.Task_Primitives.Operations;\n    package SSL  renames System.Soft_Links;\n    package SSE  renames System.Storage_Elements;\n-   package SST  renames System.Secondary_Stack;\n \n    use Ada.Exceptions;\n \n    use Parameters;\n+   use Secondary_Stack;\n    use Task_Primitives;\n    use Task_Primitives.Operations;\n \n@@ -465,7 +465,7 @@ package body System.Tasking.Stages is\n \n    procedure Create_Task\n      (Priority             : Integer;\n-      Size                 : System.Parameters.Size_Type;\n+      Stack_Size           : System.Parameters.Size_Type;\n       Secondary_Stack_Size : System.Parameters.Size_Type;\n       Task_Info            : System.Task_Info.Task_Info_Type;\n       CPU                  : Integer;\n@@ -604,8 +604,7 @@ package body System.Tasking.Stages is\n       end if;\n \n       Initialize_ATCB (Self_ID, State, Discriminants, P, Elaborated,\n-        Base_Priority, Base_CPU, Domain, Task_Info, Size,\n-        Secondary_Stack_Size, T, Success);\n+        Base_Priority, Base_CPU, Domain, Task_Info, Stack_Size, T, Success);\n \n       if not Success then\n          Free (T);\n@@ -692,10 +691,18 @@ package body System.Tasking.Stages is\n            Dispatching_Domain_Tasks (Base_CPU) + 1;\n       end if;\n \n-      --  Create TSD as early as possible in the creation of a task, since it\n-      --  may be used by the operation of Ada code within the task.\n+      --  Create the secondary stack for the task as early as possible during\n+      --  in the creation of a task, since it may be used by the operation of\n+      --  Ada code within the task.\n+\n+      begin\n+         SSL.Create_TSD (T.Common.Compiler_Data, null, Secondary_Stack_Size);\n+      exception\n+         when others =>\n+            Initialization.Undefer_Abort_Nestable (Self_ID);\n+            raise Storage_Error with \"Secondary stack could not be allocated\";\n+      end;\n \n-      SSL.Create_TSD (T.Common.Compiler_Data);\n       T.Common.Activation_Link := Chain.T_ID;\n       Chain.T_ID := T;\n       Created_Task := T;\n@@ -914,8 +921,8 @@ package body System.Tasking.Stages is\n       SSL.Unlock_Task        := SSL.Task_Unlock_NT'Access;\n       SSL.Get_Jmpbuf_Address := SSL.Get_Jmpbuf_Address_NT'Access;\n       SSL.Set_Jmpbuf_Address := SSL.Set_Jmpbuf_Address_NT'Access;\n-      SSL.Get_Sec_Stack_Addr := SSL.Get_Sec_Stack_Addr_NT'Access;\n-      SSL.Set_Sec_Stack_Addr := SSL.Set_Sec_Stack_Addr_NT'Access;\n+      SSL.Get_Sec_Stack      := SSL.Get_Sec_Stack_NT'Access;\n+      SSL.Set_Sec_Stack      := SSL.Set_Sec_Stack_NT'Access;\n       SSL.Check_Abort_Status := SSL.Check_Abort_Status_NT'Access;\n       SSL.Get_Stack_Info     := SSL.Get_Stack_Info_NT'Access;\n \n@@ -1014,7 +1021,6 @@ package body System.Tasking.Stages is\n    --  at-end handler that the compiler generates.\n \n    procedure Task_Wrapper (Self_ID : Task_Id) is\n-      use type SSE.Storage_Offset;\n       use System.Standard_Library;\n       use System.Stack_Usage;\n \n@@ -1027,52 +1033,6 @@ package body System.Tasking.Stages is\n       Use_Alternate_Stack : constant Boolean := Alternate_Stack_Size /= 0;\n       --  Whether to use above alternate signal stack for stack overflows\n \n-      function Secondary_Stack_Size return Storage_Elements.Storage_Offset;\n-      --  Returns the size of the secondary stack for the task. For fixed\n-      --  secondary stacks, the function will return the ATCB field\n-      --  Secondary_Stack_Size if it is not set to Unspecified_Size,\n-      --  otherwise a percentage of the stack is reserved using the\n-      --  System.Parameters.Sec_Stack_Percentage property.\n-\n-      --  Dynamic secondary stacks are allocated in System.Soft_Links.\n-      --  Create_TSD and thus the function returns 0 to suppress the\n-      --  creation of the fixed secondary stack in the primary stack.\n-\n-      --------------------------\n-      -- Secondary_Stack_Size --\n-      --------------------------\n-\n-      function Secondary_Stack_Size return Storage_Elements.Storage_Offset is\n-         use System.Storage_Elements;\n-\n-      begin\n-         if Parameters.Sec_Stack_Dynamic then\n-            return 0;\n-\n-         elsif Self_ID.Common.Secondary_Stack_Size = Unspecified_Size then\n-            return (Self_ID.Common.Compiler_Data.Pri_Stack_Info.Size\n-                    * SSE.Storage_Offset (Sec_Stack_Percentage) / 100);\n-         else\n-            --  Use the size specified by aspect Secondary_Stack_Size padded\n-            --  by the amount of space used by the stack data structure.\n-\n-            return Storage_Offset (Self_ID.Common.Secondary_Stack_Size) +\n-                     Storage_Offset (SST.Minimum_Secondary_Stack_Size);\n-         end if;\n-      end Secondary_Stack_Size;\n-\n-      Secondary_Stack : aliased Storage_Elements.Storage_Array\n-                          (1 .. Secondary_Stack_Size);\n-      for Secondary_Stack'Alignment use Standard'Maximum_Alignment;\n-      --  Actual area allocated for secondary stack. Note that it is critical\n-      --  that this have maximum alignment, since any kind of data can be\n-      --  allocated here.\n-\n-      Secondary_Stack_Address : System.Address := Secondary_Stack'Address;\n-      --  Address of secondary stack. In the fixed secondary stack case, this\n-      --  value is not modified, causing a warning, hence the bracketing with\n-      --  Warnings (Off/On). But why is so much *more* bracketed???\n-\n       SEH_Table : aliased SSE.Storage_Array (1 .. 8);\n       --  Structured Exception Registration table (2 words)\n \n@@ -1136,14 +1096,6 @@ package body System.Tasking.Stages is\n       Debug.Master_Hook\n         (Self_ID, Self_ID.Common.Parent, Self_ID.Master_of_Task);\n \n-      --  Assume a size of the stack taken at this stage\n-\n-      if not Parameters.Sec_Stack_Dynamic then\n-         Self_ID.Common.Compiler_Data.Sec_Stack_Addr :=\n-           Secondary_Stack'Address;\n-         SST.SS_Init (Secondary_Stack_Address, Integer (Secondary_Stack'Last));\n-      end if;\n-\n       if Use_Alternate_Stack then\n          Self_ID.Common.Task_Alternate_Stack := Task_Alternate_Stack'Address;\n       end if;\n@@ -1197,15 +1149,6 @@ package body System.Tasking.Stages is\n \n                Stack_Base := Bottom_Of_Stack'Address;\n \n-               --  Also reduce the size of the stack to take into account the\n-               --  secondary stack array declared in this frame. This is for\n-               --  sure very conservative.\n-\n-               if not Parameters.Sec_Stack_Dynamic then\n-                  Pattern_Size :=\n-                    Pattern_Size - Natural (Secondary_Stack_Size);\n-               end if;\n-\n                --  Adjustments for inner frames\n \n                Pattern_Size := Pattern_Size -\n@@ -1973,10 +1916,10 @@ package body System.Tasking.Stages is\n          then\n             Initialization.Task_Lock (Self_ID);\n \n-            --  If Sec_Stack_Addr is not null, it means that Destroy_TSD\n+            --  If Sec_Stack_Ptr is not null, it means that Destroy_TSD\n             --  has not been called yet (case of an unactivated task).\n \n-            if T.Common.Compiler_Data.Sec_Stack_Addr /= Null_Address then\n+            if T.Common.Compiler_Data.Sec_Stack_Ptr /= null then\n                SSL.Destroy_TSD (T.Common.Compiler_Data);\n             end if;\n "}, {"sha": "a1129a1085a83949a88e37cbcfd33f8916703130", "filename": "gcc/ada/libgnarl/s-tassta.ads", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flibgnarl%2Fs-tassta.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flibgnarl%2Fs-tassta.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-tassta.ads?ref=bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda", "patch": "@@ -70,7 +70,7 @@ package System.Tasking.Stages is\n    --   tE : aliased boolean := false;\n    --   tZ : size_type := unspecified_size;\n    --   type tV (discr : integer) is limited record\n-   --      _task_id : task_id;\n+   --      _task_id         : task_id;\n    --   end record;\n    --   procedure tB (_task : access tV);\n    --   freeze tV [\n@@ -168,7 +168,7 @@ package System.Tasking.Stages is\n \n    procedure Create_Task\n      (Priority             : Integer;\n-      Size                 : System.Parameters.Size_Type;\n+      Stack_Size           : System.Parameters.Size_Type;\n       Secondary_Stack_Size : System.Parameters.Size_Type;\n       Task_Info            : System.Task_Info.Task_Info_Type;\n       CPU                  : Integer;\n@@ -187,31 +187,44 @@ package System.Tasking.Stages is\n    --\n    --  Priority is the task's priority (assumed to be in range of type\n    --   System.Any_Priority)\n-   --  Size is the stack size of the task to create\n-   --  Secondary_Stack_Size is the secondary stack size of the task to create\n+   --\n+   --  Stack_Size is the stack size of the task to create\n+   --\n+   --  Secondary_Stack_Size is the size of the secondary stack to be used by\n+   --  the task.\n+   --\n    --  Task_Info is the task info associated with the created task, or\n    --   Unspecified_Task_Info if none.\n+   --\n    --  CPU is the task affinity. Passed as an Integer because the undefined\n    --   value is not in the range of CPU_Range. Static range checks are\n    --   performed when analyzing the pragma, and dynamic ones are performed\n    --   before setting the affinity at run time.\n+   --\n    --  Relative_Deadline is the relative deadline associated with the created\n    --   task by means of a pragma Relative_Deadline, or 0.0 if none.\n+   --\n    --  Domain is the dispatching domain associated with the created task by\n    --   means of a Dispatching_Domain pragma or aspect, or null if none.\n+   --\n    --  State is the compiler generated task's procedure body\n+   --\n    --  Discriminants is a pointer to a limited record whose discriminants\n    --   are those of the task to create. This parameter should be passed as\n    --   the single argument to State.\n+   --\n    --  Elaborated is a pointer to a Boolean that must be set to true on exit\n    --   if the task could be successfully elaborated.\n+   --\n    --  Chain is a linked list of task that needs to be created. On exit,\n    --   Created_Task.Activation_Link will be Chain.T_ID, and Chain.T_ID\n    --   will be Created_Task (e.g the created task will be linked at the front\n    --   of Chain).\n+   --\n    --  Task_Image is a string created by the compiler that the\n    --   run time can store to ease the debugging and the\n    --   Ada.Task_Identification facility.\n+   --\n    --  Created_Task is the resulting task.\n    --\n    --  This procedure can raise Storage_Error if the task creation failed."}, {"sha": "56eda26e6a1011eddd7d8bb009f1c1d3336dbc84", "filename": "gcc/ada/libgnarl/s-tporft.adb", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flibgnarl%2Fs-tporft.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flibgnarl%2Fs-tporft.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-tporft.adb?ref=bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda", "patch": "@@ -29,16 +29,16 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with System.Task_Info;\n---  Use for Unspecified_Task_Info\n-\n-with System.Soft_Links;\n---  used to initialize TSD for a C thread, in function Self\n-\n with System.Multiprocessors;\n+with System.Soft_Links;\n+with System.Task_Info;\n \n separate (System.Task_Primitives.Operations)\n-function Register_Foreign_Thread (Thread : Thread_Id) return Task_Id is\n+function Register_Foreign_Thread\n+  (Thread         : Thread_Id;\n+   Sec_Stack_Size : Size_Type := Unspecified_Size)\n+   return Task_Id\n+is\n    Local_ATCB : aliased Ada_Task_Control_Block (0);\n    Self_Id    : Task_Id;\n    Succeeded  : Boolean;\n@@ -66,7 +66,7 @@ begin\n      (Self_Id, null, Null_Address, Null_Task,\n       Foreign_Task_Elaborated'Access,\n       System.Priority'First, System.Multiprocessors.Not_A_Specific_CPU, null,\n-      Task_Info.Unspecified_Task_Info, 0, 0, Self_Id, Succeeded);\n+      Task_Info.Unspecified_Task_Info, 0, Self_Id, Succeeded);\n    Unlock_RTS;\n    pragma Assert (Succeeded);\n \n@@ -92,7 +92,10 @@ begin\n \n    Self_Id.Common.Task_Alternate_Stack := Null_Address;\n \n-   System.Soft_Links.Create_TSD (Self_Id.Common.Compiler_Data);\n+   --  Create the TSD for the task\n+\n+   System.Soft_Links.Create_TSD\n+     (Self_Id.Common.Compiler_Data, null, Sec_Stack_Size);\n \n    Enter_Task (Self_Id);\n "}, {"sha": "27e352f2b46f4e0cf6eb5e5a06b51483b910be8f", "filename": "gcc/ada/libgnat/s-parame.adb", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flibgnat%2Fs-parame.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flibgnat%2Fs-parame.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-parame.adb?ref=bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda", "patch": "@@ -50,6 +50,32 @@ package body System.Parameters is\n       end if;\n    end Adjust_Storage_Size;\n \n+   ----------------------------\n+   -- Default_Sec_Stack_Size --\n+   ----------------------------\n+\n+   function Default_Sec_Stack_Size return Size_Type is\n+      Default_SS_Size : Integer;\n+      pragma Import (C, Default_SS_Size,\n+                     \"__gnat_default_ss_size\");\n+   begin\n+      --  There are two situations where the default secondary stack size is\n+      --  set to zero:\n+      --    * The user sets it to zero erroneously thinking it will disable\n+      --      the secondary stack.\n+      --    * Or more likely, we are building with an old compiler and\n+      --      Default_SS_Size is never set.\n+      --\n+      --  In both case set the default secondary stack size to the run-time\n+      --  default.\n+\n+      if Default_SS_Size > 0 then\n+         return Size_Type (Default_SS_Size);\n+      else\n+         return Runtime_Default_Sec_Stack_Size;\n+      end if;\n+   end Default_Sec_Stack_Size;\n+\n    ------------------------\n    -- Default_Stack_Size --\n    ------------------------"}, {"sha": "60a5e99702109b90f204acc3d1d049b4d308e13f", "filename": "gcc/ada/libgnat/s-parame.ads", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flibgnat%2Fs-parame.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flibgnat%2Fs-parame.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-parame.ads?ref=bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda", "patch": "@@ -64,20 +64,6 @@ package System.Parameters is\n    Unspecified_Size : constant Size_Type := Size_Type'First;\n    --  Value used to indicate that no size type is set\n \n-   subtype Percentage is Size_Type range -1 .. 100;\n-   Dynamic : constant Size_Type := -1;\n-   --  The secondary stack ratio is a constant between 0 and 100 which\n-   --  determines the percentage of the allocated task stack that is\n-   --  used by the secondary stack (the rest being the primary stack).\n-   --  The special value of minus one indicates that the secondary\n-   --  stack is to be allocated from the heap instead.\n-\n-   Sec_Stack_Percentage : constant Percentage := Dynamic;\n-   --  This constant defines the handling of the secondary stack\n-\n-   Sec_Stack_Dynamic : constant Boolean := Sec_Stack_Percentage = Dynamic;\n-   --  Convenient Boolean for testing for dynamic secondary stack\n-\n    function Default_Stack_Size return Size_Type;\n    --  Default task stack size used if none is specified\n \n@@ -94,15 +80,27 @@ package System.Parameters is\n    --    otherwise return given Size\n \n    Default_Env_Stack_Size : constant Size_Type := 8_192_000;\n-   --  Assumed size of the environment task, if no other information\n-   --  is available. This value is used when stack checking is\n-   --  enabled and no GNAT_STACK_LIMIT environment variable is set.\n+   --  Assumed size of the environment task, if no other information is\n+   --  available. This value is used when stack checking is enabled and\n+   --  no GNAT_STACK_LIMIT environment variable is set.\n \n    Stack_Grows_Down  : constant Boolean := True;\n    --  This constant indicates whether the stack grows up (False) or\n    --  down (True) in memory as functions are called. It is used for\n    --  proper implementation of the stack overflow check.\n \n+   Runtime_Default_Sec_Stack_Size : constant Size_Type := 10 * 1024;\n+   --  The run-time chosen default size for secondary stacks that may be\n+   --  overriden by the user with the use of binder -D switch.\n+\n+   function Default_Sec_Stack_Size return Size_Type;\n+   --  The default initial size for secondary stacks that reflects any user\n+   --  specified default via the binder -D switch.\n+\n+   Sec_Stack_Dynamic : constant Boolean := True;\n+   --  Indicates if secondary stacks can grow and shrink at run-time. If False,\n+   --  the size of a secondary stack is fixed at the point of its creation.\n+\n    ----------------------------------------------\n    -- Characteristics of types in Interfaces.C --\n    ----------------------------------------------"}, {"sha": "42d438e72ea05a3aee7a1935bf94581502dce1e2", "filename": "gcc/ada/libgnat/s-parame__ae653.ads", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flibgnat%2Fs-parame__ae653.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flibgnat%2Fs-parame__ae653.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-parame__ae653.ads?ref=bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda", "patch": "@@ -62,20 +62,6 @@ package System.Parameters is\n    Unspecified_Size : constant Size_Type := Size_Type'First;\n    --  Value used to indicate that no size type is set\n \n-   subtype Percentage is Size_Type range -1 .. 100;\n-   Dynamic : constant Size_Type := -1;\n-   --  The secondary stack ratio is a constant between 0 and 100 which\n-   --  determines the percentage of the allocated task stack that is\n-   --  used by the secondary stack (the rest being the primary stack).\n-   --  The special value of minus one indicates that the secondary\n-   --  stack is to be allocated from the heap instead.\n-\n-   Sec_Stack_Percentage : constant Percentage := 25;\n-   --  This constant defines the handling of the secondary stack\n-\n-   Sec_Stack_Dynamic : constant Boolean := Sec_Stack_Percentage = Dynamic;\n-   --  Convenient Boolean for testing for dynamic secondary stack\n-\n    function Default_Stack_Size return Size_Type;\n    --  Default task stack size used if none is specified\n \n@@ -103,6 +89,18 @@ package System.Parameters is\n    --  down (True) in memory as functions are called. It is used for\n    --  proper implementation of the stack overflow check.\n \n+   Runtime_Default_Sec_Stack_Size : constant Size_Type := 10 * 1024;\n+   --  The run-time chosen default size for secondary stacks that may be\n+   --  overriden by the user with the use of binder -D switch.\n+\n+   function Default_Sec_Stack_Size return Size_Type;\n+   --  The default size for secondary stacks that reflects any user specified\n+   --  default via the binder -D switch.\n+\n+   Sec_Stack_Dynamic : constant Boolean := False;\n+   --  Indicates if secondary stacks can grow and shrink at run-time. If False,\n+   --  the size of a secondary stack is fixed at the point of its creation.\n+\n    ----------------------------------------------\n    -- Characteristics of types in Interfaces.C --\n    ----------------------------------------------"}, {"sha": "846b165561eaa5cc8f53a724f5bbcbac8acb74c9", "filename": "gcc/ada/libgnat/s-parame__hpux.ads", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flibgnat%2Fs-parame__hpux.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flibgnat%2Fs-parame__hpux.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-parame__hpux.ads?ref=bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda", "patch": "@@ -62,20 +62,6 @@ package System.Parameters is\n    Unspecified_Size : constant Size_Type := Size_Type'First;\n    --  Value used to indicate that no size type is set\n \n-   subtype Percentage is Size_Type range -1 .. 100;\n-   Dynamic : constant Size_Type := -1;\n-   --  The secondary stack ratio is a constant between 0 and 100 which\n-   --  determines the percentage of the allocated task stack that is\n-   --  used by the secondary stack (the rest being the primary stack).\n-   --  The special value of minus one indicates that the secondary\n-   --  stack is to be allocated from the heap instead.\n-\n-   Sec_Stack_Percentage : constant Percentage := Dynamic;\n-   --  This constant defines the handling of the secondary stack\n-\n-   Sec_Stack_Dynamic : constant Boolean := Sec_Stack_Percentage = Dynamic;\n-   --  Convenient Boolean for testing for dynamic secondary stack\n-\n    function Default_Stack_Size return Size_Type;\n    --  Default task stack size used if none is specified\n \n@@ -101,6 +87,18 @@ package System.Parameters is\n    --  down (True) in memory as functions are called. It is used for\n    --  proper implementation of the stack overflow check.\n \n+   Runtime_Default_Sec_Stack_Size : constant Size_Type := 10 * 1024;\n+   --  The run-time chosen default size for secondary stacks that may be\n+   --  overriden by the user with the use of binder -D switch.\n+\n+   function Default_Sec_Stack_Size return Size_Type;\n+   --  The default initial size for secondary stacks that reflects any user\n+   --  specified default via the binder -D switch.\n+\n+   Sec_Stack_Dynamic : constant Boolean := True;\n+   --  Indicates if secondary stacks can grow and shrink at run-time. If False,\n+   --  the size of a secondary stack is fixed at the point of its creation.\n+\n    ----------------------------------------------\n    -- Characteristics of Types in Interfaces.C --\n    ----------------------------------------------"}, {"sha": "5a19c4396da762074626930001fee159a8f0efe0", "filename": "gcc/ada/libgnat/s-parame__rtems.adb", "status": "modified", "additions": 30, "deletions": 18, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flibgnat%2Fs-parame__rtems.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flibgnat%2Fs-parame__rtems.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-parame__rtems.adb?ref=bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1997-2009 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1997-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -39,6 +39,35 @@ package body System.Parameters is\n    pragma Import (C, ada_pthread_minimum_stack_size,\n      \"_ada_pthread_minimum_stack_size\");\n \n+   -------------------------\n+   -- Adjust_Storage_Size --\n+   -------------------------\n+\n+   function Adjust_Storage_Size (Size : Size_Type) return Size_Type is\n+   begin\n+      if Size = Unspecified_Size then\n+         return Default_Stack_Size;\n+\n+      elsif Size < Minimum_Stack_Size then\n+         return Minimum_Stack_Size;\n+\n+      else\n+         return Size;\n+      end if;\n+   end Adjust_Storage_Size;\n+\n+   ----------------------------\n+   -- Default_Sec_Stack_Size --\n+   ----------------------------\n+\n+   function Default_Sec_Stack_Size return Size_Type is\n+      Default_SS_Size : Integer;\n+      pragma Import (C, Default_SS_Size,\n+                     \"__gnat_default_ss_size\");\n+   begin\n+      return Size_Type (Default_SS_Size);\n+   end Default_Sec_Stack_Size;\n+\n    ------------------------\n    -- Default_Stack_Size --\n    ------------------------\n@@ -58,21 +87,4 @@ package body System.Parameters is\n       return Size_Type (ada_pthread_minimum_stack_size);\n    end Minimum_Stack_Size;\n \n-   -------------------------\n-   -- Adjust_Storage_Size --\n-   -------------------------\n-\n-   function Adjust_Storage_Size (Size : Size_Type) return Size_Type is\n-   begin\n-      if Size = Unspecified_Size then\n-         return Default_Stack_Size;\n-\n-      elsif Size < Minimum_Stack_Size then\n-         return Minimum_Stack_Size;\n-\n-      else\n-         return Size;\n-      end if;\n-   end Adjust_Storage_Size;\n-\n end System.Parameters;"}, {"sha": "97d74b6932e2cb7579ea37ddb154706431b342fe", "filename": "gcc/ada/libgnat/s-parame__vxworks.adb", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flibgnat%2Fs-parame__vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flibgnat%2Fs-parame__vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-parame__vxworks.adb?ref=bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda", "patch": "@@ -48,6 +48,18 @@ package body System.Parameters is\n       end if;\n    end Adjust_Storage_Size;\n \n+   ----------------------------\n+   -- Default_Sec_Stack_Size --\n+   ----------------------------\n+\n+   function Default_Sec_Stack_Size return Size_Type is\n+      Default_SS_Size : Integer;\n+      pragma Import (C, Default_SS_Size,\n+                     \"__gnat_default_ss_size\");\n+   begin\n+      return Size_Type (Default_SS_Size);\n+   end Default_Sec_Stack_Size;\n+\n    ------------------------\n    -- Default_Stack_Size --\n    ------------------------"}, {"sha": "e395e017b05d178e2643fe1e67f8fb4ca34dd3b3", "filename": "gcc/ada/libgnat/s-parame__vxworks.ads", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flibgnat%2Fs-parame__vxworks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flibgnat%2Fs-parame__vxworks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-parame__vxworks.ads?ref=bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda", "patch": "@@ -62,20 +62,6 @@ package System.Parameters is\n    Unspecified_Size : constant Size_Type := Size_Type'First;\n    --  Value used to indicate that no size type is set\n \n-   subtype Percentage is Size_Type range -1 .. 100;\n-   Dynamic : constant Size_Type := -1;\n-   --  The secondary stack ratio is a constant between 0 and 100 which\n-   --  determines the percentage of the allocated task stack that is\n-   --  used by the secondary stack (the rest being the primary stack).\n-   --  The special value of minus one indicates that the secondary\n-   --  stack is to be allocated from the heap instead.\n-\n-   Sec_Stack_Percentage : constant Percentage := Dynamic;\n-   --  This constant defines the handling of the secondary stack\n-\n-   Sec_Stack_Dynamic : constant Boolean := Sec_Stack_Percentage = Dynamic;\n-   --  Convenient Boolean for testing for dynamic secondary stack\n-\n    function Default_Stack_Size return Size_Type;\n    --  Default task stack size used if none is specified\n \n@@ -103,6 +89,18 @@ package System.Parameters is\n    --  down (True) in memory as functions are called. It is used for\n    --  proper implementation of the stack overflow check.\n \n+   Runtime_Default_Sec_Stack_Size : constant Size_Type := 10 * 1024;\n+   --  The run-time chosen default size for secondary stacks that may be\n+   --  overriden by the user with the use of binder -D switch.\n+\n+   function Default_Sec_Stack_Size return Size_Type;\n+   --  The default initial size for secondary stacks that reflects any user\n+   --  specified default via the binder -D switch.\n+\n+   Sec_Stack_Dynamic : constant Boolean := True;\n+   --  Indicates if secondary stacks can grow and shrink at run-time. If False,\n+   --  the size of a secondary stack is fixed at the point of its creation.\n+\n    ----------------------------------------------\n    -- Characteristics of types in Interfaces.C --\n    ----------------------------------------------"}, {"sha": "b39cf0dc33decd55849d9aa4103d528cb063ed47", "filename": "gcc/ada/libgnat/s-secsta.adb", "status": "modified", "additions": 154, "deletions": 316, "changes": 470, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flibgnat%2Fs-secsta.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flibgnat%2Fs-secsta.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-secsta.adb?ref=bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda", "patch": "@@ -31,211 +31,73 @@\n \n pragma Compiler_Unit_Warning;\n \n-with System.Soft_Links;\n-with System.Parameters;\n-\n with Ada.Unchecked_Conversion;\n with Ada.Unchecked_Deallocation;\n+with System.Soft_Links;\n \n package body System.Secondary_Stack is\n \n    package SSL renames System.Soft_Links;\n \n-   use type SSE.Storage_Offset;\n    use type System.Parameters.Size_Type;\n \n-   SS_Ratio_Dynamic : constant Boolean :=\n-                        Parameters.Sec_Stack_Percentage = Parameters.Dynamic;\n-   --  There are two entirely different implementations of the secondary\n-   --  stack mechanism in this unit, and this Boolean is used to select\n-   --  between them (at compile time, so the generated code will contain\n-   --  only the code for the desired variant). If SS_Ratio_Dynamic is\n-   --  True, then the secondary stack is dynamically allocated from the\n-   --  heap in a linked list of chunks. If SS_Ration_Dynamic is False,\n-   --  then the secondary stack is allocated statically by grabbing a\n-   --  section of the primary stack and using it for this purpose.\n-\n-   type Memory is array (SS_Ptr range <>) of SSE.Storage_Element;\n-   for Memory'Alignment use Standard'Maximum_Alignment;\n-   --  This is the type used for actual allocation of secondary stack\n-   --  areas. We require maximum alignment for all such allocations.\n-\n-   ---------------------------------------------------------------\n-   -- Data Structures for Dynamically Allocated Secondary Stack --\n-   ---------------------------------------------------------------\n-\n-   --  The following is a diagram of the data structures used for the\n-   --  case of a dynamically allocated secondary stack, where the stack\n-   --  is allocated as a linked list of chunks allocated from the heap.\n-\n-   --                                      +------------------+\n-   --                                      |       Next       |\n-   --                                      +------------------+\n-   --                                      |                  | Last (200)\n-   --                                      |                  |\n-   --                                      |                  |\n-   --                                      |                  |\n-   --                                      |                  |\n-   --                                      |                  |\n-   --                                      |                  | First (101)\n-   --                                      +------------------+\n-   --                         +----------> |          |       |\n-   --                         |            +--------- | ------+\n-   --                         |                    ^  |\n-   --                         |                    |  |\n-   --                         |                    |  V\n-   --                         |            +------ | ---------+\n-   --                         |            |       |          |\n-   --                         |            +------------------+\n-   --                         |            |                  | Last (100)\n-   --                         |            |         C        |\n-   --                         |            |         H        |\n-   --    +-----------------+  |   +------->|         U        |\n-   --    |  Current_Chunk ----+   |        |         N        |\n-   --    +-----------------+      |        |         K        |\n-   --    |       Top      --------+        |                  | First (1)\n-   --    +-----------------+               +------------------+\n-   --    | Default_Size    |               |       Prev       |\n-   --    +-----------------+               +------------------+\n-   --\n-\n-   type Chunk_Id (First, Last : SS_Ptr);\n-   type Chunk_Ptr is access all Chunk_Id;\n-\n-   type Chunk_Id (First, Last : SS_Ptr) is record\n-      Prev, Next : Chunk_Ptr;\n-      Mem        : Memory (First .. Last);\n-   end record;\n-\n-   type Stack_Id is record\n-      Top           : SS_Ptr;\n-      Default_Size  : SSE.Storage_Count;\n-      Current_Chunk : Chunk_Ptr;\n-   end record;\n-\n-   type Stack_Ptr is access Stack_Id;\n-   --  Pointer to record used to represent a dynamically allocated secondary\n-   --  stack descriptor for a secondary stack chunk.\n-\n    procedure Free is new Ada.Unchecked_Deallocation (Chunk_Id, Chunk_Ptr);\n    --  Free a dynamically allocated chunk\n \n-   function To_Stack_Ptr is new\n-     Ada.Unchecked_Conversion (Address, Stack_Ptr);\n-   function To_Addr is new\n-     Ada.Unchecked_Conversion (Stack_Ptr, Address);\n-   --  Convert to and from address stored in task data structures\n-\n-   --------------------------------------------------------------\n-   -- Data Structures for Statically Allocated Secondary Stack --\n-   --------------------------------------------------------------\n-\n-   --  For the static case, the secondary stack is a single contiguous\n-   --  chunk of storage, carved out of the primary stack, and represented\n-   --  by the following data structure\n-\n-   type Fixed_Stack_Id is record\n-      Top : SS_Ptr;\n-      --  Index of next available location in Mem. This is initialized to\n-      --  0, and then incremented on Allocate, and Decremented on Release.\n-\n-      Last : SS_Ptr;\n-      --  Length of usable Mem array, which is thus the index past the\n-      --  last available location in Mem. Mem (Last-1) can be used. This\n-      --  is used to check that the stack does not overflow.\n-\n-      Max : SS_Ptr;\n-      --  Maximum value of Top. Initialized to 0, and then may be incremented\n-      --  on Allocate, but is never Decremented. The last used location will\n-      --  be Mem (Max - 1), so Max is the maximum count of used stack space.\n-\n-      Mem : Memory (0 .. 0);\n-      --  This is the area that is actually used for the secondary stack.\n-      --  Note that the upper bound is a dummy value properly defined by\n-      --  the value of Last. We never actually allocate objects of type\n-      --  Fixed_Stack_Id, so the bounds declared here do not matter.\n-   end record;\n-\n-   Dummy_Fixed_Stack : Fixed_Stack_Id;\n-   pragma Warnings (Off, Dummy_Fixed_Stack);\n-   --  Well it is not quite true that we never allocate an object of the\n-   --  type. This dummy object is allocated for the purpose of getting the\n-   --  offset of the Mem field via the 'Position attribute (such a nuisance\n-   --  that we cannot apply this to a field of a type).\n-\n-   type Fixed_Stack_Ptr is access Fixed_Stack_Id;\n-   --  Pointer to record used to describe statically allocated sec stack\n-\n-   function To_Fixed_Stack_Ptr is new\n-     Ada.Unchecked_Conversion (Address, Fixed_Stack_Ptr);\n-   --  Convert from address stored in task data structures\n-\n-   ----------------------------------\n-   -- Minimum_Secondary_Stack_Size --\n-   ----------------------------------\n-\n-   function Minimum_Secondary_Stack_Size return Natural is\n-   begin\n-      return Dummy_Fixed_Stack.Mem'Position;\n-   end Minimum_Secondary_Stack_Size;\n-\n-   --------------\n-   -- Allocate --\n-   --------------\n+   -----------------\n+   -- SS_Allocate --\n+   -----------------\n \n    procedure SS_Allocate\n      (Addr         : out Address;\n       Storage_Size : SSE.Storage_Count)\n    is\n-      Max_Align : constant SS_Ptr := SS_Ptr (Standard'Maximum_Alignment);\n-      Max_Size  : constant SS_Ptr :=\n-                    ((SS_Ptr (Storage_Size) + Max_Align - 1) / Max_Align) *\n-                      Max_Align;\n-\n+      Max_Align   : constant SS_Ptr := SS_Ptr (Standard'Maximum_Alignment);\n+      Mem_Request : constant SS_Ptr :=\n+                      ((SS_Ptr (Storage_Size) + Max_Align - 1) / Max_Align) *\n+                        Max_Align;\n+      --  Round up Storage_Size to the nearest multiple of the max alignment\n+      --  value for the target. This ensures efficient stack access.\n+\n+      Stack : constant SS_Stack_Ptr := SSL.Get_Sec_Stack.all;\n    begin\n-      --  Case of fixed allocation secondary stack\n-\n-      if not SS_Ratio_Dynamic then\n-         declare\n-            Fixed_Stack : constant Fixed_Stack_Ptr :=\n-                            To_Fixed_Stack_Ptr (SSL.Get_Sec_Stack_Addr.all);\n+      --  Case of fixed secondary stack\n \n-         begin\n-            --  Check if max stack usage is increasing\n+      if not SP.Sec_Stack_Dynamic then\n+         --  Check if max stack usage is increasing\n \n-            if Fixed_Stack.Top + Max_Size > Fixed_Stack.Max then\n+         if Stack.Top + Mem_Request > Stack.Max then\n \n-               --  If so, check if max size is exceeded\n+            --  If so, check if the stack is exceeded, noting Stack.Top points\n+            --  to the first free byte (so the value of Stack.Top on a fully\n+            --  allocated stack will be Stack.Size + 1).\n \n-               if Fixed_Stack.Top + Max_Size > Fixed_Stack.Last then\n-                  raise Storage_Error;\n-               end if;\n+            if Stack.Top + Mem_Request > Stack.Size + 1 then\n+               raise Storage_Error;\n+            end if;\n \n-               --  Record new max usage\n+            --  Record new max usage\n \n-               Fixed_Stack.Max := Fixed_Stack.Top + Max_Size;\n-            end if;\n+            Stack.Max := Stack.Top + Mem_Request;\n+         end if;\n \n-            --  Set resulting address and update top of stack pointer\n+         --  Set resulting address and update top of stack pointer\n \n-            Addr := Fixed_Stack.Mem (Fixed_Stack.Top)'Address;\n-            Fixed_Stack.Top := Fixed_Stack.Top + Max_Size;\n-         end;\n+         Addr := Stack.Internal_Chunk.Mem (Stack.Top)'Address;\n+         Stack.Top := Stack.Top + Mem_Request;\n \n-      --  Case of dynamically allocated secondary stack\n+      --  Case of dynamic secondary stack\n \n       else\n          declare\n-            Stack : constant Stack_Ptr :=\n-                      To_Stack_Ptr (SSL.Get_Sec_Stack_Addr.all);\n             Chunk : Chunk_Ptr;\n \n             To_Be_Released_Chunk : Chunk_Ptr;\n \n          begin\n             Chunk := Stack.Current_Chunk;\n \n-            --  The Current_Chunk may not be the good one if a lot of release\n+            --  The Current_Chunk may not be the best one if a lot of release\n             --  operations have taken place. Go down the stack if necessary.\n \n             while Chunk.First > Stack.Top loop\n@@ -246,7 +108,7 @@ package body System.Secondary_Stack is\n             --  sufficient, if not, go to the next one and eventually create\n             --  the necessary room.\n \n-            while Chunk.Last - Stack.Top + 1 < Max_Size loop\n+            while Chunk.Last - Stack.Top + 1 < Mem_Request loop\n                if Chunk.Next /= null then\n \n                   --  Release unused non-first empty chunk\n@@ -262,11 +124,11 @@ package body System.Secondary_Stack is\n                --  Create new chunk of default size unless it is not sufficient\n                --  to satisfy the current request.\n \n-               elsif SSE.Storage_Count (Max_Size) <= Stack.Default_Size then\n+               elsif Mem_Request <= Stack.Size then\n                   Chunk.Next :=\n                     new Chunk_Id\n                       (First => Chunk.Last + 1,\n-                       Last  => Chunk.Last + SS_Ptr (Stack.Default_Size));\n+                       Last  => Chunk.Last + SS_Ptr (Stack.Size));\n \n                   Chunk.Next.Prev := Chunk;\n \n@@ -276,7 +138,7 @@ package body System.Secondary_Stack is\n                   Chunk.Next :=\n                     new Chunk_Id\n                       (First => Chunk.Last + 1,\n-                       Last  => Chunk.Last + Max_Size);\n+                       Last  => Chunk.Last + Mem_Request);\n \n                   Chunk.Next.Prev := Chunk;\n                end if;\n@@ -288,8 +150,15 @@ package body System.Secondary_Stack is\n             --  Resulting address is the address pointed by Stack.Top\n \n             Addr                := Chunk.Mem (Stack.Top)'Address;\n-            Stack.Top           := Stack.Top + Max_Size;\n+            Stack.Top           := Stack.Top + Mem_Request;\n             Stack.Current_Chunk := Chunk;\n+\n+            --  Record new max usage\n+\n+            if Stack.Top > Stack.Max then\n+               Stack.Max := Stack.Top;\n+            end if;\n+\n          end;\n       end if;\n    end SS_Allocate;\n@@ -298,91 +167,79 @@ package body System.Secondary_Stack is\n    -- SS_Free --\n    -------------\n \n-   procedure SS_Free (Stk : in out Address) is\n+   procedure SS_Free (Stack : in out SS_Stack_Ptr) is\n+      procedure Free is\n+         new Ada.Unchecked_Deallocation (SS_Stack, SS_Stack_Ptr);\n    begin\n-      --  Case of statically allocated secondary stack, nothing to free\n-\n-      if not SS_Ratio_Dynamic then\n-         return;\n+      --  If using dynamic secondary stack, free any external chunks\n \n-      --  Case of dynamically allocated secondary stack\n-\n-      else\n+      if SP.Sec_Stack_Dynamic then\n          declare\n-            Stack : Stack_Ptr := To_Stack_Ptr (Stk);\n             Chunk : Chunk_Ptr;\n \n             procedure Free is\n-              new Ada.Unchecked_Deallocation (Stack_Id, Stack_Ptr);\n+              new Ada.Unchecked_Deallocation (Chunk_Id, Chunk_Ptr);\n \n          begin\n             Chunk := Stack.Current_Chunk;\n \n-            while Chunk.Prev /= null loop\n-               Chunk := Chunk.Prev;\n-            end loop;\n+            --  Go to top of linked list and free backwards. Do not free the\n+            --  internal chunk as it is part of SS_Stack.\n \n             while Chunk.Next /= null loop\n                Chunk := Chunk.Next;\n-               Free (Chunk.Prev);\n             end loop;\n \n-            Free (Chunk);\n-            Free (Stack);\n-            Stk := Null_Address;\n+            while Chunk.Prev /= null loop\n+               Chunk := Chunk.Prev;\n+               Free (Chunk.Next);\n+            end loop;\n          end;\n       end if;\n+\n+      if Stack.Freeable then\n+         Free (Stack);\n+      end if;\n    end SS_Free;\n \n    ----------------\n    -- SS_Get_Max --\n    ----------------\n \n    function SS_Get_Max return Long_Long_Integer is\n+      Stack : constant SS_Stack_Ptr := SSL.Get_Sec_Stack.all;\n    begin\n-      if SS_Ratio_Dynamic then\n-         return -1;\n-      else\n-         declare\n-            Fixed_Stack : constant Fixed_Stack_Ptr :=\n-                            To_Fixed_Stack_Ptr (SSL.Get_Sec_Stack_Addr.all);\n-         begin\n-            return Long_Long_Integer (Fixed_Stack.Max);\n-         end;\n-      end if;\n+      --  Stack.Max points to the first untouched byte in the stack, thus the\n+      --  maximum number of bytes that have been allocated on the stack is one\n+      --  less the value of Stack.Max.\n+\n+      return Long_Long_Integer (Stack.Max - 1);\n    end SS_Get_Max;\n \n    -------------\n    -- SS_Info --\n    -------------\n \n    procedure SS_Info is\n+      Stack : constant SS_Stack_Ptr := SSL.Get_Sec_Stack.all;\n    begin\n       Put_Line (\"Secondary Stack information:\");\n \n       --  Case of fixed secondary stack\n \n-      if not SS_Ratio_Dynamic then\n-         declare\n-            Fixed_Stack : constant Fixed_Stack_Ptr :=\n-                            To_Fixed_Stack_Ptr (SSL.Get_Sec_Stack_Addr.all);\n-\n-         begin\n-            Put_Line (\"  Total size              : \"\n-                      & SS_Ptr'Image (Fixed_Stack.Last)\n-                      & \" bytes\");\n+      if not SP.Sec_Stack_Dynamic then\n+         Put_Line (\"  Total size              : \"\n+                   & SS_Ptr'Image (Stack.Size)\n+                   & \" bytes\");\n \n-            Put_Line (\"  Current allocated space : \"\n-                      & SS_Ptr'Image (Fixed_Stack.Top)\n-                      & \" bytes\");\n-         end;\n+         Put_Line (\"  Current allocated space : \"\n+                   & SS_Ptr'Image (Stack.Top - 1)\n+                   & \" bytes\");\n \n-      --  Case of dynamically allocated secondary stack\n+      --  Case of dynamic secondary stack\n \n       else\n          declare\n-            Stack     : constant Stack_Ptr :=\n-                          To_Stack_Ptr (SSL.Get_Sec_Stack_Addr.all);\n             Nb_Chunks : Integer   := 1;\n             Chunk     : Chunk_Ptr := Stack.Current_Chunk;\n \n@@ -414,7 +271,7 @@ package body System.Secondary_Stack is\n                       & Integer'Image (Nb_Chunks));\n \n             Put_Line (\"  Default size of Chunks : \"\n-                      & SSE.Storage_Count'Image (Stack.Default_Size));\n+                      & SP.Size_Type'Image (Stack.Size));\n          end;\n       end if;\n    end SS_Info;\n@@ -424,56 +281,96 @@ package body System.Secondary_Stack is\n    -------------\n \n    procedure SS_Init\n-     (Stk  : in out Address;\n-      Size : Natural := Default_Secondary_Stack_Size)\n+     (Stack : in out SS_Stack_Ptr;\n+      Size  : SP.Size_Type := SP.Unspecified_Size)\n    is\n-   begin\n-      --  Case of fixed size secondary stack\n-\n-      if not SS_Ratio_Dynamic then\n-         declare\n-            Fixed_Stack : constant Fixed_Stack_Ptr :=\n-                            To_Fixed_Stack_Ptr (Stk);\n-\n-         begin\n-            Fixed_Stack.Top  := 0;\n-            Fixed_Stack.Max  := 0;\n-\n-            if Size <= Dummy_Fixed_Stack.Mem'Position then\n-               Fixed_Stack.Last := 0;\n-            else\n-               Fixed_Stack.Last :=\n-                 SS_Ptr (Size) - Dummy_Fixed_Stack.Mem'Position;\n-            end if;\n-         end;\n-\n-      --  Case of dynamically allocated secondary stack\n+      use Parameters;\n \n-      else\n-         declare\n-            Stack : Stack_Ptr;\n-         begin\n-            Stack               := new Stack_Id;\n-            Stack.Current_Chunk := new Chunk_Id (1, SS_Ptr (Size));\n-            Stack.Top           := 1;\n-            Stack.Default_Size  := SSE.Storage_Count (Size);\n-            Stk := To_Addr (Stack);\n-         end;\n+      Stack_Size : Size_Type;\n+   begin\n+      --  If Stack is not null then the stack has been allocated outside the\n+      --  package (by the compiler or the user) and all that is left to do is\n+      --  initialize the stack. Otherwise, SS_Init will allocate a secondary\n+      --  stack from either the heap or the default-sized secondary stack pool\n+      --  generated by the binder. In the later case, this pool is generated\n+      --  only when the either No_Implicit_Heap_Allocations\n+      --  or No_Implicit_Task_Allocations are active, and SS_Init will allocate\n+      --  all requests for a secondary stack of Unspecified_Size from this\n+      --  pool.\n+\n+      if Stack = null then\n+         if Size = Unspecified_Size then\n+            Stack_Size := Default_Sec_Stack_Size;\n+         else\n+            Stack_Size := Size;\n+         end if;\n+\n+         if Size = Unspecified_Size\n+           and then Binder_SS_Count > 0\n+           and then Num_Of_Assigned_Stacks < Binder_SS_Count\n+         then\n+            --  The default-sized secondary stack pool is passed from the\n+            --  binder to this package as an Address since it is not possible\n+            --  to have a pointer to an array of unconstrained objects. A\n+            --  pointer to the pool is obtainable via an unchecked conversion\n+            --  to a constrained array of SS_Stacks that mirrors the one used\n+            --  by the binder.\n+\n+            --  However, Ada understandably does not allow a local pointer to\n+            --  a stack in the pool to be stored in a pointer outside of this\n+            --  scope. While the conversion is safe in this case, since a view\n+            --  of a global object is being used, using Unchecked_Access\n+            --  would prevent users from specifying the restriction\n+            --  No_Unchecked_Access whenever the secondary stack is used. As\n+            --  a workaround, the local stack pointer is converted to a global\n+            --  pointer via System.Address.\n+\n+            declare\n+               type Stk_Pool_Array is array (1 .. Binder_SS_Count) of\n+                 aliased SS_Stack (Default_SS_Size);\n+               type Stk_Pool_Access is access Stk_Pool_Array;\n+\n+               function To_Stack_Pool is new\n+                 Ada.Unchecked_Conversion (Address, Stk_Pool_Access);\n+\n+               pragma Warnings (Off);\n+               function To_Global_Ptr is new\n+                 Ada.Unchecked_Conversion (Address, SS_Stack_Ptr);\n+               pragma Warnings (On);\n+               --  Suppress aliasing warning since the pointer we return will\n+               --  be the only access to the stack.\n+\n+               Local_Stk_Address : System.Address;\n+\n+            begin\n+               Num_Of_Assigned_Stacks := Num_Of_Assigned_Stacks + 1;\n+\n+               Local_Stk_Address :=\n+                 To_Stack_Pool\n+                   (Default_Sized_SS_Pool) (Num_Of_Assigned_Stacks)'Address;\n+               Stack := To_Global_Ptr (Local_Stk_Address);\n+            end;\n+\n+            Stack.Freeable := False;\n+         else\n+            Stack := new SS_Stack (Stack_Size);\n+            Stack.Freeable := True;\n+         end if;\n       end if;\n+\n+      Stack.Top := 1;\n+      Stack.Max := 1;\n+      Stack.Current_Chunk := Stack.Internal_Chunk'Access;\n    end SS_Init;\n \n    -------------\n    -- SS_Mark --\n    -------------\n \n    function SS_Mark return Mark_Id is\n-      Sstk : constant System.Address := SSL.Get_Sec_Stack_Addr.all;\n+      Stack : constant SS_Stack_Ptr := SSL.Get_Sec_Stack.all;\n    begin\n-      if SS_Ratio_Dynamic then\n-         return (Sstk => Sstk, Sptr => To_Stack_Ptr (Sstk).Top);\n-      else\n-         return (Sstk => Sstk, Sptr => To_Fixed_Stack_Ptr (Sstk).Top);\n-      end if;\n+      return (Sec_Stack => Stack, Sptr => Stack.Top);\n    end SS_Mark;\n \n    ----------------\n@@ -482,66 +379,7 @@ package body System.Secondary_Stack is\n \n    procedure SS_Release (M : Mark_Id) is\n    begin\n-      if SS_Ratio_Dynamic then\n-         To_Stack_Ptr (M.Sstk).Top := M.Sptr;\n-      else\n-         To_Fixed_Stack_Ptr (M.Sstk).Top := M.Sptr;\n-      end if;\n+      M.Sec_Stack.Top := M.Sptr;\n    end SS_Release;\n \n-   -------------------------\n-   -- Package Elaboration --\n-   -------------------------\n-\n-   --  Allocate a secondary stack for the main program to use\n-\n-   --  We make sure that the stack has maximum alignment. Some systems require\n-   --  this (e.g. Sparc), and in any case it is a good idea for efficiency.\n-\n-   Stack : aliased Stack_Id;\n-   for Stack'Alignment use Standard'Maximum_Alignment;\n-\n-   Static_Secondary_Stack_Size : constant := 10 * 1024;\n-   --  Static_Secondary_Stack_Size must be static so that Chunk is allocated\n-   --  statically, and not via dynamic memory allocation.\n-\n-   Chunk : aliased Chunk_Id (1, Static_Secondary_Stack_Size);\n-   for Chunk'Alignment use Standard'Maximum_Alignment;\n-   --  Default chunk used, unless gnatbind -D is specified with a value greater\n-   --  than Static_Secondary_Stack_Size.\n-\n-begin\n-   declare\n-      Chunk_Address : Address;\n-      Chunk_Access  : Chunk_Ptr;\n-\n-   begin\n-      if Default_Secondary_Stack_Size <= Static_Secondary_Stack_Size then\n-\n-         --  Normally we allocate the secondary stack for the main program\n-         --  statically, using the default secondary stack size.\n-\n-         Chunk_Access := Chunk'Access;\n-\n-      else\n-         --  Default_Secondary_Stack_Size was increased via gnatbind -D, so we\n-         --  need to allocate a chunk dynamically.\n-\n-         Chunk_Access :=\n-           new Chunk_Id (1, SS_Ptr (Default_Secondary_Stack_Size));\n-      end if;\n-\n-      if SS_Ratio_Dynamic then\n-         Stack.Top           := 1;\n-         Stack.Current_Chunk := Chunk_Access;\n-         Stack.Default_Size  :=\n-           SSE.Storage_Offset (Default_Secondary_Stack_Size);\n-         System.Soft_Links.Set_Sec_Stack_Addr_NT (Stack'Address);\n-\n-      else\n-         Chunk_Address := Chunk_Access.all'Address;\n-         SS_Init (Chunk_Address, Default_Secondary_Stack_Size);\n-         System.Soft_Links.Set_Sec_Stack_Addr_NT (Chunk_Address);\n-      end if;\n-   end;\n end System.Secondary_Stack;"}, {"sha": "ae5ec888453b371e3ecb97ed6d5ff32e755c514f", "filename": "gcc/ada/libgnat/s-secsta.ads", "status": "modified", "additions": 152, "deletions": 46, "changes": 198, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flibgnat%2Fs-secsta.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flibgnat%2Fs-secsta.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-secsta.ads?ref=bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda", "patch": "@@ -31,52 +31,37 @@\n \n pragma Compiler_Unit_Warning;\n \n+with System.Parameters;\n with System.Storage_Elements;\n \n package System.Secondary_Stack is\n+   pragma Preelaborate;\n \n+   package SP renames System.Parameters;\n    package SSE renames System.Storage_Elements;\n \n-   Default_Secondary_Stack_Size : Natural := 10 * 1024;\n-   --  Default size of a secondary stack. May be modified by binder -D switch\n-   --  which causes the binder to generate an appropriate assignment in the\n-   --  binder generated file.\n+   type SS_Stack (Size : SP.Size_Type) is private;\n+   --  Data structure for secondary stacks\n \n-   function Minimum_Secondary_Stack_Size return Natural;\n-   --  The minimum size of the secondary stack so that the internal\n-   --  requirements of the stack are met.\n+   type SS_Stack_Ptr is access all SS_Stack;\n+   --  Pointer to secondary stack objects\n \n    procedure SS_Init\n-     (Stk  : in out Address;\n-      Size : Natural := Default_Secondary_Stack_Size);\n-   --  Initialize the secondary stack with a main stack of the given Size.\n-   --\n-   --  If System.Parameters.Sec_Stack_Percentage equals Dynamic, Stk is really\n-   --  an OUT parameter that will be allocated on the heap. Then all further\n-   --  allocations which do not overflow the main stack will not generate\n-   --  dynamic (de)allocation calls. If the main Stack overflows, a new\n-   --  chuck of at least the same size will be allocated and linked to the\n-   --  previous chunk.\n-   --\n-   --  Otherwise (Sec_Stack_Percentage between 0 and 100), Stk is an IN\n-   --  parameter that is already pointing to a Stack_Id. The secondary stack\n-   --  in this case is fixed, and any attempt to allocate more than the initial\n-   --  size will result in a Storage_Error being raised.\n-   --\n-   --  Note: the reason that Stk is passed is that SS_Init is called before\n-   --  the proper interface is established to obtain the address of the\n-   --  stack using System.Soft_Links.Get_Sec_Stack_Addr.\n+     (Stack : in out SS_Stack_Ptr;\n+      Size  : SP.Size_Type := SP.Unspecified_Size);\n+   --  Initialize the secondary stack Stack. If Stack is null allocate a stack\n+   --  from the heap or from the default-sized secondary stack pool if the\n+   --  pool exists and the requested size is Unspecified_Size.\n \n    procedure SS_Allocate\n      (Addr         : out Address;\n       Storage_Size : SSE.Storage_Count);\n    --  Allocate enough space for a 'Storage_Size' bytes object with Maximum\n    --  alignment. The address of the allocated space is returned in Addr.\n \n-   procedure SS_Free (Stk : in out Address);\n-   --  Release the memory allocated for the Secondary Stack. That is\n-   --  to say, all the allocated chunks. Upon return, Stk will be set\n-   --  to System.Null_Address.\n+   procedure SS_Free (Stack : in out SS_Stack_Ptr);\n+   --  Release the memory allocated for the Stack. If the stack was statically\n+   --  allocated the SS_Stack record is not freed.\n \n    type Mark_Id is private;\n    --  Type used to mark the stack for mark/release processing\n@@ -85,17 +70,11 @@ package System.Secondary_Stack is\n    --  Return the Mark corresponding to the current state of the stack\n \n    procedure SS_Release (M : Mark_Id);\n-   --  Restore the state of the stack corresponding to the mark M. If an\n-   --  additional chunk have been allocated, it will never be freed during a\n-   --  ??? missing comment here\n+   --  Restore the state of the stack corresponding to the mark M\n \n    function SS_Get_Max return Long_Long_Integer;\n-   --  Return maximum used space in storage units for the current secondary\n-   --  stack. For a dynamically allocated secondary stack, the returned\n-   --  result is always -1. For a statically allocated secondary stack,\n-   --  the returned value shows the largest amount of space allocated so\n-   --  far during execution of the program to the current secondary stack,\n-   --  i.e. the secondary stack for the current task.\n+   --  Return the high water mark of the secondary stack for the current\n+   --  secondary stack in bytes.\n \n    generic\n       with procedure Put_Line (S : String);\n@@ -109,15 +88,142 @@ private\n    --  Unused entity that is just present to ease the sharing of the pool\n    --  mechanism for specific allocation/deallocation in the compiler\n \n-   type SS_Ptr is new SSE.Integer_Address;\n-   --  Stack pointer value for secondary stack\n+   -------------------------------------\n+   -- Secondary Stack Data Structures --\n+   -------------------------------------\n+\n+   --  This package provides fixed and dynamically sized secondary stack\n+   --  implementations centered around a common data structure SS_Stack. This\n+   --  record contains an initial secondary stack allocation of the requested\n+   --  size, and markers for the current top of the stack and the high-water\n+   --  mark of the stack. A SS_Stack can be either pre-allocated outside the\n+   --  package or SS_Init can allocate a stack from the heap or the\n+   --  default-sized secondary stack from a pool generated by the binder.\n+\n+   --  For dynamically allocated secondary stacks, the stack can grow via a\n+   --  linked list of stack chunks allocated from the heap. New chunks are\n+   --  allocated once the initial static allocation and any existing chunks are\n+   --  exhausted. The following diagram illustrated the data structures used\n+   --  for a dynamically allocated secondary stack:\n+   --\n+   --                                       +------------------+\n+   --                                       |       Next       |\n+   --                                       +------------------+\n+   --                                       |                  | Last (300)\n+   --                                       |                  |\n+   --                                       |                  |\n+   --                                       |                  |\n+   --                                       |                  |\n+   --                                       |                  |\n+   --                                       |                  | First (201)\n+   --                                       +------------------+\n+   --    +-----------------+       +------> |          |       |\n+   --    |                 | (100) |        +--------- | ------+\n+   --    |                 |       |                ^  |\n+   --    |                 |       |                |  |\n+   --    |                 |       |                |  V\n+   --    |                 |       |        +------ | ---------+\n+   --    |                 |       |        |       |          |\n+   --    |                 |       |        +------------------+\n+   --    |                 |       |        |                  | Last (200)\n+   --    |                 |       |        |         C        |\n+   --    |                 | (1)   |        |         H        |\n+   --    +-----------------+       |  +---->|         U        |\n+   --    |  Current_Chunk ---------+  |     |         N        |\n+   --    +-----------------+          |     |         K        |\n+   --    |       Top      ------------+     |                  | First (101)\n+   --    +-----------------+                +------------------+\n+   --    |       Size      |                |       Prev       |\n+   --    +-----------------+                +------------------+\n+   --\n+   --  The implementation used by the runtime is controlled via the constant\n+   --  System.Parameter.Sec_Stack_Dynamic. If True, the implementation is\n+   --  permitted to grow the secondary stack at runtime. The implementation is\n+   --  designed for the compiler to include only code to support the desired\n+   --  secondary stack behavior.\n+\n+   subtype SS_Ptr is SP.Size_Type;\n+   --  Stack pointer value for the current position within the secondary stack.\n+   --  Size_Type is used as the base type since the Size discriminate of\n+   --  SS_Stack forms the bounds of the internal memory array.\n+\n+   type Memory is array (SS_Ptr range <>) of SSE.Storage_Element;\n+   for Memory'Alignment use Standard'Maximum_Alignment;\n+   --  The region of memory that holds the stack itself. Requires maximum\n+   --  alignment for efficient stack operations.\n+\n+   --  Chunk_Id\n+\n+   --  Chunk_Id is a contiguous block of dynamically allocated stack. First\n+   --  and Last indicate the range of secondary stack addresses present in the\n+   --  chunk. Chunk_Ptr points to a Chunk_Id block.\n+\n+   type Chunk_Id (First, Last : SS_Ptr);\n+   type Chunk_Ptr is access all Chunk_Id;\n+\n+   type Chunk_Id (First, Last : SS_Ptr) is record\n+      Prev, Next : Chunk_Ptr;\n+      Mem        : Memory (First .. Last);\n+   end record;\n+\n+   --  Secondary stack data structure\n+\n+   type SS_Stack (Size : SP.Size_Type) is record\n+      Top : SS_Ptr;\n+      --  Index of next available location in the stack. Initialized to 1 and\n+      --  then incremented on Allocate and decremented on Release.\n+\n+      Max : SS_Ptr;\n+      --  Contains the high-water mark of Top. Initialized to 1 and then\n+      --  may be incremented on Allocate but never decremented. Since\n+      --  Top = Size + 1 represents a fully used stack, Max - 1 indicates\n+      --  the size of the stack used in bytes.\n+\n+      Current_Chunk : Chunk_Ptr;\n+      --  A link to the chunk containing the highest range of the stack\n+\n+      Freeable : Boolean;\n+      --  Indicates if an object of this type can be freed\n+\n+      Internal_Chunk : aliased Chunk_Id (1, Size);\n+      --  Initial memory allocation of the secondary stack\n+   end record;\n \n    type Mark_Id is record\n-      Sstk : System.Address;\n-      Sptr : SS_Ptr;\n+      Sec_Stack : SS_Stack_Ptr;\n+      Sptr      : SS_Ptr;\n    end record;\n-   --  A mark value contains the address of the secondary stack structure,\n-   --  as returned by System.Soft_Links.Get_Sec_Stack_Addr, and a stack\n-   --  pointer value corresponding to the point of the mark call.\n+   --  Contains the pointer to the secondary stack object and the stack pointer\n+   --  value corresponding to the top of the stack at the time of the mark\n+   --  call.\n+\n+   ------------------------------------\n+   -- Binder Allocated Stack Support --\n+   ------------------------------------\n+\n+   --  When the No_Implicit_Heap_Allocations or No_Implicit_Task_Allocations\n+   --  restrictions are in effect the binder statically generates secondary\n+   --  stacks for tasks who are using default-sized secondary stack. Assignment\n+   --  of these stacks to tasks is handled by SS_Init. The following variables\n+   --  assist SS_Init and are defined here so the runtime does not depend on\n+   --  the binder.\n+\n+   Binder_SS_Count : Natural;\n+   pragma Export (Ada, Binder_SS_Count, \"__gnat_binder_ss_count\");\n+   --  The number of default sized secondary stacks allocated by the binder\n+\n+   Default_SS_Size : SP.Size_Type;\n+   pragma Export (Ada, Default_SS_Size, \"__gnat_default_ss_size\");\n+   --  The default size for secondary stacks. Defined here and not in init.c/\n+   --  System.Init because these locations are not present on ZFP or\n+   --  Ravenscar-SFP run-times.\n+\n+   Default_Sized_SS_Pool : System.Address;\n+   pragma Export (Ada, Default_Sized_SS_Pool, \"__gnat_default_ss_pool\");\n+   --  Address to the secondary stack pool generated by the binder that\n+   --  contains default sized stacks.\n+\n+   Num_Of_Assigned_Stacks : Natural := 0;\n+   --  The number of currently allocated secondary stacks\n \n end System.Secondary_Stack;"}, {"sha": "94ead0306faa780b540e048d66c71ca82c0af17b", "filename": "gcc/ada/libgnat/s-soflin.adb", "status": "modified", "additions": 38, "deletions": 43, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flibgnat%2Fs-soflin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flibgnat%2Fs-soflin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-soflin.adb?ref=bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda", "patch": "@@ -35,25 +35,19 @@ pragma Polling (Off);\n --  We must turn polling off for this unit, because otherwise we get an\n --  infinite loop from the code within the Poll routine itself.\n \n-with System.Parameters;\n-\n pragma Warnings (Off);\n---  Disable warnings since System.Secondary_Stack is currently not Preelaborate\n-with System.Secondary_Stack;\n+--  Disable warnings as System.Soft_Links.Initialize is not Preelaborate. It is\n+--  safe to with this unit as its elaboration routine will only be initializing\n+--  NT_TSD, which is part of this package spec.\n+with System.Soft_Links.Initialize;\n pragma Warnings (On);\n \n package body System.Soft_Links is\n \n-   package SST renames System.Secondary_Stack;\n-\n-   NT_TSD : TSD;\n-   --  Note: we rely on the default initialization of NT_TSD\n-\n-   --  Needed for Vx6Cert (Vx653mc) GOS cert and ravenscar-cert runtimes,\n-   --  VxMILS cert, ravenscar-cert and full runtimes, Vx 5 default runtime\n    Stack_Limit : aliased System.Address := System.Null_Address;\n-\n    pragma Export (C, Stack_Limit, \"__gnat_stack_limit\");\n+   --  Needed for Vx6Cert (Vx653mc) GOS cert and ravenscar-cert runtimes,\n+   --  VxMILS cert, ravenscar-cert and full runtimes, Vx 5 default runtime\n \n    --------------------\n    -- Abort_Defer_NT --\n@@ -125,14 +119,16 @@ package body System.Soft_Links is\n    -- Create_TSD --\n    ----------------\n \n-   procedure Create_TSD (New_TSD : in out TSD) is\n-      use Parameters;\n-      SS_Ratio_Dynamic : constant Boolean := Sec_Stack_Percentage = Dynamic;\n+   procedure Create_TSD\n+     (New_TSD        : in out TSD;\n+      Sec_Stack      : SST.SS_Stack_Ptr;\n+      Sec_Stack_Size : System.Parameters.Size_Type)\n+   is\n    begin\n-      if SS_Ratio_Dynamic then\n-         SST.SS_Init\n-           (New_TSD.Sec_Stack_Addr, SST.Default_Secondary_Stack_Size);\n-      end if;\n+      New_TSD.Jmpbuf_Address := Null_Address;\n+\n+      New_TSD.Sec_Stack_Ptr := Sec_Stack;\n+      SST.SS_Init (New_TSD.Sec_Stack_Ptr, Sec_Stack_Size);\n    end Create_TSD;\n \n    -----------------------\n@@ -150,7 +146,7 @@ package body System.Soft_Links is\n \n    procedure Destroy_TSD (Old_TSD : in out TSD) is\n    begin\n-      SST.SS_Free (Old_TSD.Sec_Stack_Addr);\n+      SST.SS_Free (Old_TSD.Sec_Stack_Ptr);\n    end Destroy_TSD;\n \n    ---------------------\n@@ -198,23 +194,23 @@ package body System.Soft_Links is\n       return Get_Jmpbuf_Address.all;\n    end Get_Jmpbuf_Address_Soft;\n \n-   ---------------------------\n-   -- Get_Sec_Stack_Addr_NT --\n-   ---------------------------\n+   ----------------------\n+   -- Get_Sec_Stack_NT --\n+   ----------------------\n \n-   function Get_Sec_Stack_Addr_NT return  Address is\n+   function Get_Sec_Stack_NT return SST.SS_Stack_Ptr is\n    begin\n-      return NT_TSD.Sec_Stack_Addr;\n-   end Get_Sec_Stack_Addr_NT;\n+      return NT_TSD.Sec_Stack_Ptr;\n+   end Get_Sec_Stack_NT;\n \n    -----------------------------\n-   -- Get_Sec_Stack_Addr_Soft --\n+   -- Get_Sec_Stack_Soft --\n    -----------------------------\n \n-   function Get_Sec_Stack_Addr_Soft return  Address is\n+   function Get_Sec_Stack_Soft return SST.SS_Stack_Ptr is\n    begin\n-      return Get_Sec_Stack_Addr.all;\n-   end Get_Sec_Stack_Addr_Soft;\n+      return Get_Sec_Stack.all;\n+   end Get_Sec_Stack_Soft;\n \n    -----------------------\n    -- Get_Stack_Info_NT --\n@@ -254,23 +250,23 @@ package body System.Soft_Links is\n       Set_Jmpbuf_Address (Addr);\n    end Set_Jmpbuf_Address_Soft;\n \n-   ---------------------------\n-   -- Set_Sec_Stack_Addr_NT --\n-   ---------------------------\n+   ----------------------\n+   -- Set_Sec_Stack_NT --\n+   ----------------------\n \n-   procedure Set_Sec_Stack_Addr_NT (Addr : Address) is\n+   procedure Set_Sec_Stack_NT (Stack : SST.SS_Stack_Ptr) is\n    begin\n-      NT_TSD.Sec_Stack_Addr := Addr;\n-   end Set_Sec_Stack_Addr_NT;\n+      NT_TSD.Sec_Stack_Ptr := Stack;\n+   end Set_Sec_Stack_NT;\n \n-   -----------------------------\n-   -- Set_Sec_Stack_Addr_Soft --\n-   -----------------------------\n+   ------------------------\n+   -- Set_Sec_Stack_Soft --\n+   ------------------------\n \n-   procedure Set_Sec_Stack_Addr_Soft (Addr : Address) is\n+   procedure Set_Sec_Stack_Soft (Stack : SST.SS_Stack_Ptr) is\n    begin\n-      Set_Sec_Stack_Addr (Addr);\n-   end Set_Sec_Stack_Addr_Soft;\n+      Set_Sec_Stack (Stack);\n+   end Set_Sec_Stack_Soft;\n \n    ------------------\n    -- Task_Lock_NT --\n@@ -308,5 +304,4 @@ package body System.Soft_Links is\n    begin\n       null;\n    end Task_Unlock_NT;\n-\n end System.Soft_Links;"}, {"sha": "4242fcee7ee6ce7ac24b825b17a5ac70b137e1d6", "filename": "gcc/ada/libgnat/s-soflin.ads", "status": "modified", "additions": 33, "deletions": 17, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flibgnat%2Fs-soflin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flibgnat%2Fs-soflin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-soflin.ads?ref=bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda", "patch": "@@ -40,11 +40,15 @@\n pragma Compiler_Unit_Warning;\n \n with Ada.Exceptions;\n+with System.Parameters;\n+with System.Secondary_Stack;\n with System.Stack_Checking;\n \n package System.Soft_Links is\n    pragma Preelaborate;\n \n+   package SST renames System.Secondary_Stack;\n+\n    subtype EOA is Ada.Exceptions.Exception_Occurrence_Access;\n    subtype EO is Ada.Exceptions.Exception_Occurrence;\n \n@@ -89,6 +93,11 @@ package System.Soft_Links is\n    type Set_EO_Call       is access procedure (Excep : EO);\n    pragma Favor_Top_Level (Set_EO_Call);\n \n+   type Get_Stack_Call    is access function return SST.SS_Stack_Ptr;\n+   pragma Favor_Top_Level (Get_Stack_Call);\n+   type Set_Stack_Call    is access procedure (Stack : SST.SS_Stack_Ptr);\n+   pragma Favor_Top_Level (Set_Stack_Call);\n+\n    type Special_EO_Call   is access\n      procedure (Excep : EO := Current_Target_Exception);\n    pragma Favor_Top_Level (Special_EO_Call);\n@@ -118,6 +127,8 @@ package System.Soft_Links is\n    pragma Suppress (Access_Check, Set_Integer_Call);\n    pragma Suppress (Access_Check, Get_EOA_Call);\n    pragma Suppress (Access_Check, Set_EOA_Call);\n+   pragma Suppress (Access_Check, Get_Stack_Call);\n+   pragma Suppress (Access_Check, Set_Stack_Call);\n    pragma Suppress (Access_Check, Timed_Delay_Call);\n    pragma Suppress (Access_Check, Get_Stack_Access_Call);\n    pragma Suppress (Access_Check, Task_Name_Call);\n@@ -228,11 +239,11 @@ package System.Soft_Links is\n    Get_Jmpbuf_Address : Get_Address_Call := Get_Jmpbuf_Address_NT'Access;\n    Set_Jmpbuf_Address : Set_Address_Call := Set_Jmpbuf_Address_NT'Access;\n \n-   function  Get_Sec_Stack_Addr_NT return  Address;\n-   procedure Set_Sec_Stack_Addr_NT (Addr : Address);\n+   function  Get_Sec_Stack_NT return  SST.SS_Stack_Ptr;\n+   procedure Set_Sec_Stack_NT (Stack : SST.SS_Stack_Ptr);\n \n-   Get_Sec_Stack_Addr : Get_Address_Call := Get_Sec_Stack_Addr_NT'Access;\n-   Set_Sec_Stack_Addr : Set_Address_Call := Set_Sec_Stack_Addr_NT'Access;\n+   Get_Sec_Stack : Get_Stack_Call := Get_Sec_Stack_NT'Access;\n+   Set_Sec_Stack : Set_Stack_Call := Set_Sec_Stack_NT'Access;\n \n    function Get_Current_Excep_NT return EOA;\n \n@@ -320,19 +331,14 @@ package System.Soft_Links is\n       --  must be initialized to the tasks requested stack size before the task\n       --  can do its first stack check.\n \n-      pragma Warnings (Off);\n-      --  Needed because we are giving a non-static default to an object in\n-      --  a preelaborated unit, which is formally not permitted, but OK here.\n-\n-      Jmpbuf_Address : System.Address := System.Null_Address;\n+      Jmpbuf_Address : System.Address;\n       --  Address of jump buffer used to store the address of the current\n       --  longjmp/setjmp buffer for exception management. These buffers are\n       --  threaded into a stack, and the address here is the top of the stack.\n       --  A null address means that no exception handler is currently active.\n \n-      Sec_Stack_Addr : System.Address := System.Null_Address;\n-      pragma Warnings (On);\n-      --  Address of currently allocated secondary stack\n+      Sec_Stack_Ptr : SST.SS_Stack_Ptr;\n+      --  Pointer of the allocated secondary stack\n \n       Current_Excep : aliased EO;\n       --  Exception occurrence that contains the information for the current\n@@ -344,7 +350,10 @@ package System.Soft_Links is\n       --  exception mechanism, organized as a stack with the most recent first.\n    end record;\n \n-   procedure Create_TSD (New_TSD : in out TSD);\n+   procedure Create_TSD\n+     (New_TSD        : in out TSD;\n+      Sec_Stack      : SST.SS_Stack_Ptr;\n+      Sec_Stack_Size : System.Parameters.Size_Type);\n    pragma Inline (Create_TSD);\n    --  Called from s-tassta when a new thread is created to perform\n    --  any required initialization of the TSD.\n@@ -370,10 +379,10 @@ package System.Soft_Links is\n    pragma Inline (Get_Jmpbuf_Address_Soft);\n    pragma Inline (Set_Jmpbuf_Address_Soft);\n \n-   function  Get_Sec_Stack_Addr_Soft return  Address;\n-   procedure Set_Sec_Stack_Addr_Soft (Addr : Address);\n-   pragma Inline (Get_Sec_Stack_Addr_Soft);\n-   pragma Inline (Set_Sec_Stack_Addr_Soft);\n+   function  Get_Sec_Stack_Soft return  SST.SS_Stack_Ptr;\n+   procedure Set_Sec_Stack_Soft (Stack : SST.SS_Stack_Ptr);\n+   pragma Inline (Get_Sec_Stack_Soft);\n+   pragma Inline (Set_Sec_Stack_Soft);\n \n    --  The following is a dummy record designed to mimic Communication_Block as\n    --  defined in s-tpobop.ads:\n@@ -396,4 +405,11 @@ package System.Soft_Links is\n       Comp_3 : Boolean;\n    end record;\n \n+private\n+   NT_TSD : TSD;\n+   --  The task specific data for the main task when the Ada tasking run-time\n+   --  is not used. It relies on the default initialization of NT_TSD. It is\n+   --  placed here and not the body to ensure the default initialization does\n+   --  not clobber the secondary stack initialization that occurs as part of\n+   --  System.Soft_Links.Initialization.\n end System.Soft_Links;"}, {"sha": "5364e46f6f4e7716854f53fafacdb87ea1f497f2", "filename": "gcc/ada/libgnat/s-soliin.adb", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flibgnat%2Fs-soliin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flibgnat%2Fs-soliin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-soliin.adb?ref=bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda", "patch": "@@ -0,0 +1,47 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--          S Y S T E M . S O F T _ L I N K S . I N I T I A L I Z E         --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--            Copyright (C) 2017, Free Software Foundation, Inc.            --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with System.Secondary_Stack;\n+\n+package body System.Soft_Links.Initialize is\n+\n+   package SSS renames System.Secondary_Stack;\n+\n+begin\n+   --  Initialize the TSD of the main task\n+\n+   NT_TSD.Jmpbuf_Address := System.Null_Address;\n+\n+   --  Allocate and initialize the secondary stack for the main task\n+\n+   NT_TSD.Sec_Stack_Ptr := null;\n+   SSS.SS_Init (NT_TSD.Sec_Stack_Ptr);\n+end System.Soft_Links.Initialize;"}, {"sha": "ba9cf745f483982eb2cb4611d87ff670feecf8e9", "filename": "gcc/ada/libgnat/s-soliin.ads", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flibgnat%2Fs-soliin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flibgnat%2Fs-soliin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-soliin.ads?ref=bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda", "patch": "@@ -0,0 +1,48 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--          S Y S T E M . S O F T _ L I N K S . I N I T I A L I Z E         --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--            Copyright (C) 2017, Free Software Foundation, Inc.            --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package exists to initialize the TSD record of the main task and in\n+--  the process, allocate and initialize the secondary stack for the main task.\n+--  The initialization routine is contained within its own package because\n+--  System.Soft_Links and System.Secondary_Stack are both Preelaborate packages\n+--  that are the parents to other Preelaborate System packages.\n+\n+--  Ideally, the secondary stack would be set up via __gnat_runtime_initialize\n+--  to have the secondary stack active as early as possible and to remove the\n+--  awkwardness of System.Soft_Links depending on a non-Preelaborate package.\n+--  However, as this procedure only exists from 2014, for bootstrapping\n+--  purposes the elaboration mechanism is used instead to perform these\n+--  functions.\n+\n+package System.Soft_Links.Initialize is\n+   pragma Elaborate_Body;\n+   --  Allow this package to have a body\n+end System.Soft_Links.Initialize;"}, {"sha": "185141b1f1b6be23ae7b28f7ca7aad05148fdcc0", "filename": "gcc/ada/libgnat/s-thread.ads", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flibgnat%2Fs-thread.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flibgnat%2Fs-thread.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-thread.ads?ref=bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda", "patch": "@@ -42,10 +42,13 @@ with Ada.Unchecked_Conversion;\n \n with Interfaces.C;\n \n+with System.Secondary_Stack;\n with System.Soft_Links;\n \n package System.Threads is\n \n+   package SST renames System.Secondary_Stack;\n+\n    type ATSD is limited private;\n    --  Type of the Ada thread specific data. It contains datas needed\n    --  by the GNAT runtime.\n@@ -71,8 +74,7 @@ package System.Threads is\n    --  wrapper in the APEX process registration package.\n \n    procedure Thread_Body_Enter\n-     (Sec_Stack_Address    : System.Address;\n-      Sec_Stack_Size       : Natural;\n+     (Sec_Stack_Ptr        : SST.SS_Stack_Ptr;\n       Process_ATSD_Address : System.Address);\n    --  Enter thread body, see above for details\n "}, {"sha": "9e8b2abb946aaeea788c6b4a5658ce288b9aa583", "filename": "gcc/ada/libgnat/s-thread__ae653.adb", "status": "modified", "additions": 20, "deletions": 25, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flibgnat%2Fs-thread__ae653.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Flibgnat%2Fs-thread__ae653.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-thread__ae653.adb?ref=bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda", "patch": "@@ -37,15 +37,11 @@ pragma Restrictions (No_Tasking);\n --  will be checked by the binder.\n \n with System.OS_Versions; use System.OS_Versions;\n-with System.Secondary_Stack;\n-pragma Elaborate_All (System.Secondary_Stack);\n \n package body System.Threads is\n \n    use Interfaces.C;\n \n-   package SSS renames System.Secondary_Stack;\n-\n    package SSL renames System.Soft_Links;\n \n    Current_ATSD : aliased System.Address := System.Null_Address;\n@@ -94,17 +90,16 @@ package body System.Threads is\n    procedure Install_Handler;\n    pragma Import (C, Install_Handler, \"__gnat_install_handler\");\n \n-   function  Get_Sec_Stack_Addr return  Address;\n+   function  Get_Sec_Stack return SST.SS_Stack_Ptr;\n \n-   procedure Set_Sec_Stack_Addr (Addr : Address);\n+   procedure Set_Sec_Stack (Stack : SST.SS_Stack_Ptr);\n \n    -----------------------\n    -- Thread_Body_Enter --\n    -----------------------\n \n    procedure Thread_Body_Enter\n-     (Sec_Stack_Address    : System.Address;\n-      Sec_Stack_Size       : Natural;\n+     (Sec_Stack_Ptr        : SST.SS_Stack_Ptr;\n       Process_ATSD_Address : System.Address)\n    is\n       --  Current_ATSD must already be a taskVar of taskIdSelf.\n@@ -115,8 +110,8 @@ package body System.Threads is\n \n    begin\n \n-      TSD.Sec_Stack_Addr := Sec_Stack_Address;\n-      SSS.SS_Init (TSD.Sec_Stack_Addr, Sec_Stack_Size);\n+      TSD.Sec_Stack_Ptr := Sec_Stack_Ptr;\n+      SST.SS_Init (TSD.Sec_Stack_Ptr);\n       Current_ATSD := Process_ATSD_Address;\n \n       Install_Handler;\n@@ -166,23 +161,23 @@ package body System.Threads is\n       pragma Assert (Result /= ERROR);\n \n    begin\n-      Main_ATSD.Sec_Stack_Addr := SSL.Get_Sec_Stack_Addr_NT;\n+      Main_ATSD.Sec_Stack_Ptr := SSL.Get_Sec_Stack_NT;\n       Current_ATSD := Main_ATSD'Address;\n       Install_Handler;\n-      SSL.Get_Sec_Stack_Addr := Get_Sec_Stack_Addr'Access;\n-      SSL.Set_Sec_Stack_Addr := Set_Sec_Stack_Addr'Access;\n+      SSL.Get_Sec_Stack := Get_Sec_Stack'Access;\n+      SSL.Set_Sec_Stack := Set_Sec_Stack'Access;\n    end Init_RTS;\n \n-   ------------------------\n-   -- Get_Sec_Stack_Addr --\n-   ------------------------\n+   -------------------\n+   -- Get_Sec_Stack --\n+   -------------------\n \n-   function  Get_Sec_Stack_Addr return  Address is\n+   function  Get_Sec_Stack return SST.SS_Stack_Ptr is\n       CTSD : constant ATSD_Access := From_Address (Current_ATSD);\n    begin\n       pragma Assert (CTSD /= null);\n-      return CTSD.Sec_Stack_Addr;\n-   end Get_Sec_Stack_Addr;\n+      return CTSD.Sec_Stack_Ptr;\n+   end Get_Sec_Stack;\n \n    --------------\n    -- Register --\n@@ -229,16 +224,16 @@ package body System.Threads is\n       return Result;\n    end Register;\n \n-   ------------------------\n-   -- Set_Sec_Stack_Addr --\n-   ------------------------\n+   -------------------\n+   -- Set_Sec_Stack --\n+   -------------------\n \n-   procedure Set_Sec_Stack_Addr (Addr : Address) is\n+   procedure Set_Sec_Stack (Stack : SST.SS_Stack_Ptr) is\n       CTSD : constant ATSD_Access := From_Address (Current_ATSD);\n    begin\n       pragma Assert (CTSD /= null);\n-      CTSD.Sec_Stack_Addr := Addr;\n-   end Set_Sec_Stack_Addr;\n+      CTSD.Sec_Stack_Ptr := Stack;\n+   end Set_Sec_Stack;\n \n begin\n    --  Initialize run-time library"}, {"sha": "96e2f3e2f924f5914c187040002d78e7201d3484", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda", "patch": "@@ -462,18 +462,21 @@ package Opt is\n    --    otherwise:   \"pragma Default_Storage_Pool (X);\" applies, and\n    --                 this points to the name X.\n    --  Push_Scope and Pop_Scope in Sem_Ch8 save and restore this value.\n-   Default_Stack_Size : Int := -1;\n+\n+   No_Stack_Size : constant := -1;\n+\n+   Default_Stack_Size : Int := No_Stack_Size;\n    --  GNATBIND\n-   --  Set to default primary stack size in units of bytes. Set by\n-   --  the -dnnn switch for the binder. A value of -1 indicates that no\n-   --  default was set by the binder.\n+   --  Set to default primary stack size in units of bytes. Set by the -dnnn\n+   --  switch for the binder. A value of No_Stack_Size indicates that\n+   --  no default was set by the binder.\n \n-   Default_Sec_Stack_Size : Int := -1;\n+   Default_Sec_Stack_Size : Int := No_Stack_Size;\n    --  GNATBIND\n-   --  Set to default secondary stack size in units of bytes. Set by\n-   --  the -Dnnn switch for the binder. A value of -1 indicates that no\n-   --  default was set by the binder, and that the default should be the\n-   --  initial value of System.Secondary_Stack.Default_Secondary_Stack_Size.\n+   --  Set to default secondary stack size in units of bytes. Set by the -Dnnn\n+   --  switch for the binder. A value of No_Stack_Size indicates that no\n+   --  default was set by the binder and the run-time value should be used\n+   --  instead.\n \n    Default_SSO : Character := ' ';\n    --  GNAT\n@@ -1313,6 +1316,13 @@ package Opt is\n    --  Indicates if a project file is used or not. Set to In_Use by the first\n    --  SFNP pragma.\n \n+   Quantity_Of_Default_Size_Sec_Stacks : Int := -1;\n+   --  GNATBIND\n+   --  The number of default sized secondary stacks that the binder should\n+   --  generate. Allows ZFP users to have the binder generate extra stacks if\n+   --  needed to support multithreaded applications. A value of -1 indicates\n+   --  that no size was set by the binder.\n+\n    Queuing_Policy : Character := ' ';\n    --  GNAT, GNATBIND\n    --  Set to ' ' for the default case (no queuing policy specified). Reset to"}, {"sha": "9398af393baf0383ec5c7bd42b9111a13a1c6a95", "filename": "gcc/ada/rtfinal.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Frtfinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Frtfinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtfinal.c?ref=bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *             Copyright (C) 2014, Free Software Foundation, Inc.           *\n+ *            Copyright (C) 2014-2017, Free Software Foundation, Inc.       *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -40,7 +40,7 @@ extern void __gnat_runtime_finalize (void);\n    at all, the intention is that this be replaced by system specific code\n    where finalization is required.\n \n-   Note that __gnat_runtime_initialize() is called in adafinal()   */\n+   Note that __gnat_runtime_finalize() is called in adafinal()   */\n \n extern int __gnat_rt_init_count;\n /*  see initialize.c  */"}, {"sha": "c4d7d3c80c635a43d42698f2e327c2b1706b1ea7", "filename": "gcc/ada/rtsfind.ads", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Frtsfind.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Frtsfind.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.ads?ref=bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda", "patch": "@@ -1249,6 +1249,7 @@ package Rtsfind is\n      RE_Set_63,                          -- System.Pack_63\n \n      RE_Adjust_Storage_Size,             -- System.Parameters\n+     RE_Default_Secondary_Stack_Size,    -- System.Parameters\n      RE_Default_Stack_Size,              -- System.Parameters\n      RE_Garbage_Collected,               -- System.Parameters\n      RE_Size_Type,                       -- System.Parameters\n@@ -1424,12 +1425,12 @@ package Rtsfind is\n      RE_IS_Ilf,                          -- System.Scalar_Values\n      RE_IS_Ill,                          -- System.Scalar_Values\n \n-     RE_Default_Secondary_Stack_Size,    -- System.Secondary_Stack\n      RE_Mark_Id,                         -- System.Secondary_Stack\n      RE_SS_Allocate,                     -- System.Secondary_Stack\n      RE_SS_Pool,                         -- System.Secondary_Stack\n      RE_SS_Mark,                         -- System.Secondary_Stack\n      RE_SS_Release,                      -- System.Secondary_Stack\n+     RE_SS_Stack,                        -- System.Secondary_Stack\n \n      RE_Shared_Var_Lock,                 -- System.Shared_Storage\n      RE_Shared_Var_Unlock,               -- System.Shared_Storage\n@@ -2487,6 +2488,7 @@ package Rtsfind is\n      RE_Set_63                           => System_Pack_63,\n \n      RE_Adjust_Storage_Size              => System_Parameters,\n+     RE_Default_Secondary_Stack_Size     => System_Parameters,\n      RE_Default_Stack_Size               => System_Parameters,\n      RE_Garbage_Collected                => System_Parameters,\n      RE_Size_Type                        => System_Parameters,\n@@ -2662,12 +2664,12 @@ package Rtsfind is\n      RE_IS_Ilf                           => System_Scalar_Values,\n      RE_IS_Ill                           => System_Scalar_Values,\n \n-     RE_Default_Secondary_Stack_Size     => System_Secondary_Stack,\n      RE_Mark_Id                          => System_Secondary_Stack,\n      RE_SS_Allocate                      => System_Secondary_Stack,\n      RE_SS_Mark                          => System_Secondary_Stack,\n      RE_SS_Pool                          => System_Secondary_Stack,\n      RE_SS_Release                       => System_Secondary_Stack,\n+     RE_SS_Stack                         => System_Secondary_Stack,\n \n      RE_Shared_Var_Lock                  => System_Shared_Storage,\n      RE_Shared_Var_Unlock                => System_Shared_Storage,"}, {"sha": "1e3b78ccf2f0f070609d5944c80d1018b1f539e8", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 4, "deletions": 18, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda", "patch": "@@ -2820,24 +2820,10 @@ package body Sem_Ch3 is\n \n          --  Analyze the contracts of packages and their bodies\n \n-         if Nkind (Context) = N_Package_Specification then\n-\n-            --  When a package has private declarations, its contract must be\n-            --  analyzed at the end of the said declarations. This way both the\n-            --  analysis and freeze actions are properly synchronized in case\n-            --  of private type use within the contract.\n-\n-            if L = Private_Declarations (Context) then\n-               Analyze_Package_Contract (Defining_Entity (Context));\n-\n-            --  Otherwise the contract is analyzed at the end of the visible\n-            --  declarations.\n-\n-            elsif L = Visible_Declarations (Context)\n-              and then No (Private_Declarations (Context))\n-            then\n-               Analyze_Package_Contract (Defining_Entity (Context));\n-            end if;\n+         if Nkind (Context) = N_Package_Specification\n+           and then L = Visible_Declarations (Context)\n+         then\n+            Analyze_Package_Contract (Defining_Entity (Context));\n \n          elsif Nkind (Context) = N_Package_Body then\n             Analyze_Package_Body_Contract (Defining_Entity (Context));"}, {"sha": "dafc563d56b993aa97751baabda4a6fda69082b2", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda", "patch": "@@ -5186,7 +5186,7 @@ package body Sem_Elab is\n         --  The variable must be a source entity and susceptible to warnings\n \n         Comes_From_Source (Var_Id)\n-          and then not Has_Warnings_Off (Var_Id)\n+          and then not Warnings_Off (Var_Id)\n \n           --  The variable must be declared in the spec of compilation unit U\n "}, {"sha": "e2bf4b5d7d5aa16e4eb01b9ad549aabd1ab5d5f5", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda", "patch": "@@ -2818,10 +2818,16 @@ package body Sem_Prag is\n                                              E_Constant,\n                                              E_Variable)\n                then\n+                  --  When the initialization item is undefined, it appears as\n+                  --  Any_Id. Do not continue with the analysis of the item.\n+\n+                  if Item_Id = Any_Id then\n+                     null;\n+\n                   --  The state or variable must be declared in the visible\n                   --  declarations of the package (SPARK RM 7.1.5(7)).\n \n-                  if not Contains (States_And_Objs, Item_Id) then\n+                  elsif not Contains (States_And_Objs, Item_Id) then\n                      Error_Msg_Name_1 := Chars (Pack_Id);\n                      SPARK_Msg_NE\n                        (\"initialization item & must appear in the visible \""}, {"sha": "e07d6fd74dfef7184318626f635682bb80f18363", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda", "patch": "@@ -20584,6 +20584,51 @@ package body Sem_Util is\n       return False;\n    end Null_To_Null_Address_Convert_OK;\n \n+   ---------------------------------\n+   -- Number_Of_Elements_In_Array --\n+   ---------------------------------\n+\n+   function Number_Of_Elements_In_Array (T : Entity_Id) return Int is\n+      Indx : Node_Id;\n+      Typ  : Entity_Id;\n+      Low  : Node_Id;\n+      High : Node_Id;\n+      Num  : Int := 1;\n+\n+   begin\n+      pragma Assert (Is_Array_Type (T));\n+\n+      Indx := First_Index (T);\n+      while Present (Indx) loop\n+         Typ := Underlying_Type (Etype (Indx));\n+\n+         --  Never look at junk bounds of a generic type\n+\n+         if Is_Generic_Type (Typ) then\n+            return 0;\n+         end if;\n+\n+         --  Check the array bounds are known at compile time and return zero\n+         --  if they are not.\n+\n+         Low  := Type_Low_Bound (Typ);\n+         High := Type_High_Bound (Typ);\n+\n+         if not Compile_Time_Known_Value (Low) then\n+            return 0;\n+         elsif not Compile_Time_Known_Value (High) then\n+            return 0;\n+         else\n+            Num :=\n+              Num * UI_To_Int ((Expr_Value (High) - Expr_Value (Low) + 1));\n+         end if;\n+\n+         Next_Index (Indx);\n+      end loop;\n+\n+      return Num;\n+   end Number_Of_Elements_In_Array;\n+\n    -------------------------\n    -- Object_Access_Level --\n    -------------------------"}, {"sha": "f7c4c564c8744c6b21fa232805dbea415e7544ee", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda", "patch": "@@ -2275,6 +2275,11 @@ package Sem_Util is\n    --   2) N is a comparison operator, one of the operands is null, and the\n    --      type of the other operand is a descendant of System.Address.\n \n+   function Number_Of_Elements_In_Array (T : Entity_Id) return Int;\n+   --  Returns the number elements in the array T if the index bounds of T is\n+   --  known at compile time. If the bounds are not known at compile time, the\n+   --  function returns the value zero.\n+\n    function Object_Access_Level (Obj : Node_Id) return Uint;\n    --  Return the accessibility level of the view of the object Obj. For\n    --  convenience, qualified expressions applied to object names are also"}, {"sha": "9030c7c1176cb8607192612699142b925b33097a", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda", "patch": "@@ -1472,10 +1472,7 @@ package Sinfo is\n    --  Generic_Parent (Node5-Sem)\n    --    Generic_Parent is defined on declaration nodes that are instances. The\n    --    value of Generic_Parent is the generic entity from which the instance\n-   --    is obtained. Generic_Parent is also defined for the renaming\n-   --    declarations and object declarations created for the actuals in an\n-   --    instantiation. The generic parent of such a declaration is the\n-   --    corresponding generic association in the Instantiation node.\n+   --    is obtained.\n \n    --  Generic_Parent_Type (Node4-Sem)\n    --    Generic_Parent_Type is defined on Subtype_Declaration nodes for the"}, {"sha": "61fe4404b7d0e7bb07ca0da709fb106d76b70465", "filename": "gcc/ada/switch-b.adb", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Fswitch-b.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda/gcc%2Fada%2Fswitch-b.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-b.adb?ref=bad0a3df0bd3f7e1fca8dfeb718e98a34257dfda", "patch": "@@ -391,6 +391,18 @@ package body Switch.B is\n             Ptr := Ptr + 1;\n             Quiet_Output := True;\n \n+         --  Processing for Q switch\n+\n+         when 'Q' =>\n+            if Ptr = Max then\n+               Bad_Switch (Switch_Chars);\n+            end if;\n+\n+            Ptr := Ptr + 1;\n+            Scan_Pos\n+              (Switch_Chars, Max, Ptr,\n+               Quantity_Of_Default_Size_Sec_Stacks, C);\n+\n          --  Processing for r switch\n \n          when 'r' =>"}]}