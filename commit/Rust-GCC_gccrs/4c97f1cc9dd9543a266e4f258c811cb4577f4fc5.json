{"sha": "4c97f1cc9dd9543a266e4f258c811cb4577f4fc5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGM5N2YxY2M5ZGQ5NTQzYTI2NmU0ZjI1OGM4MTFjYjQ1NzdmNGZjNQ==", "commit": {"author": {"name": "Joern Rennecke", "email": "joern.rennecke@embecosm.com", "date": "2013-07-27T18:41:49Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2013-07-27T18:41:49Z"}, "message": "epiphany.c (epiphany_compute_frame_size): Also reserve space for saving UNKNOWN_REGNUM for leaf functions.\n\n        * config/epiphany/epiphany.c (epiphany_compute_frame_size):\n        Also reserve space for saving UNKNOWN_REGNUM for leaf functions.\n\nFrom-SVN: r201287", "tree": {"sha": "6184d50bdd7084a886917534ac514a5e6a7f575b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6184d50bdd7084a886917534ac514a5e6a7f575b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c97f1cc9dd9543a266e4f258c811cb4577f4fc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c97f1cc9dd9543a266e4f258c811cb4577f4fc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c97f1cc9dd9543a266e4f258c811cb4577f4fc5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c97f1cc9dd9543a266e4f258c811cb4577f4fc5/comments", "author": {"login": "amylaar", "id": 1663475, "node_id": "MDQ6VXNlcjE2NjM0NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1663475?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amylaar", "html_url": "https://github.com/amylaar", "followers_url": "https://api.github.com/users/amylaar/followers", "following_url": "https://api.github.com/users/amylaar/following{/other_user}", "gists_url": "https://api.github.com/users/amylaar/gists{/gist_id}", "starred_url": "https://api.github.com/users/amylaar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amylaar/subscriptions", "organizations_url": "https://api.github.com/users/amylaar/orgs", "repos_url": "https://api.github.com/users/amylaar/repos", "events_url": "https://api.github.com/users/amylaar/events{/privacy}", "received_events_url": "https://api.github.com/users/amylaar/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9f1930bea87d274cefe24a19098e565c519ee464", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f1930bea87d274cefe24a19098e565c519ee464", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f1930bea87d274cefe24a19098e565c519ee464"}], "stats": {"total": 17, "additions": 15, "deletions": 2}, "files": [{"sha": "db8db6f894a105f298d7d63220561a7ce8142ceb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c97f1cc9dd9543a266e4f258c811cb4577f4fc5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c97f1cc9dd9543a266e4f258c811cb4577f4fc5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4c97f1cc9dd9543a266e4f258c811cb4577f4fc5", "patch": "@@ -1,3 +1,8 @@\n+2013-07-27  Joern Rennecke  <joern.rennecke@embecosm.com>\n+\n+\t* config/epiphany/epiphany.c (epiphany_compute_frame_size):\n+\tAlso reserve space for saving UNKNOWN_REGNUM for leaf functions.\n+\n 2013-07-26  Cary Coutant  <ccoutant@google.com>\n \n \t* dwarf2out.c (die_checksum_ordered): Don't include template"}, {"sha": "1dcdc4b380852d4d41ab0340068f6e55117fb562", "filename": "gcc/config/epiphany/epiphany.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c97f1cc9dd9543a266e4f258c811cb4577f4fc5/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c97f1cc9dd9543a266e4f258c811cb4577f4fc5/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.c?ref=4c97f1cc9dd9543a266e4f258c811cb4577f4fc5", "patch": "@@ -884,6 +884,11 @@ struct epiphany_frame_info\n   int      stld_sz;             /* Current load/store data size for offset\n \t\t\t\t   adjustment. */\n   int      need_fp;             /* value to override \"frame_pointer_needed */\n+  /* FIRST_SLOT is the slot that is saved first, at the very start of\n+     the frame, with a POST_MODIFY to allocate the frame, if the size fits,\n+     or at least the parm and register save areas, otherwise.\n+     In the case of a large frame, LAST_SLOT is the slot that is saved last,\n+     with a POST_MODIFY to allocate the rest of the frame.  */\n   int first_slot, last_slot, first_slot_offset, last_slot_offset;\n   int first_slot_size;\n   int small_threshold;\n@@ -1069,7 +1074,10 @@ epiphany_compute_frame_size (int size /* # of var. bytes allocated.  */)\n \t to be a lot of code complexity for little gain.  */\n       || (reg_size > 8 && optimize))\n     reg_size = EPIPHANY_STACK_ALIGN (reg_size);\n-  if (total_size + reg_size <= (unsigned) epiphany_stack_offset\n+  if (((total_size + reg_size\n+\t/* Reserve space for UNKNOWN_REGNUM.  */\n+\t+ EPIPHANY_STACK_ALIGN (4))\n+       <= (unsigned) epiphany_stack_offset)\n       && !interrupt_p\n       && crtl->is_leaf && !frame_pointer_needed)\n     {\n@@ -1108,7 +1116,7 @@ epiphany_compute_frame_size (int size /* # of var. bytes allocated.  */)\n       if (total_size + reg_size <= (unsigned) epiphany_stack_offset)\n \t{\n \t  gcc_assert (first_slot < 0);\n-\t  gcc_assert (reg_size == 0);\n+\t  gcc_assert (reg_size == 0 || reg_size == epiphany_stack_offset);\n \t  last_slot_offset = EPIPHANY_STACK_ALIGN (total_size + reg_size);\n \t}\n       else"}]}