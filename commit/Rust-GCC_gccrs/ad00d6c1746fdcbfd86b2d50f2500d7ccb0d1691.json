{"sha": "ad00d6c1746fdcbfd86b2d50f2500d7ccb0d1691", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQwMGQ2YzE3NDZmZGNiZmQ4NmIyZDUwZjI1MDBkN2NjYjBkMTY5MQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-10-07T08:38:49Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-10-07T08:38:49Z"}, "message": "Use CONSTEXPR in machmode.h\n\nThis patch adds CONSTEXPR to constructors and operators in machmode.h,\nexcluding the controversial constexpr-resistant \"() {}\" constructors,\nwhich would become \"= default\" if we required C++11.\n\nSome of the other routines could potentially be constexpr too,\nbut that can be done on an as-needed basis.\n\n2019-10-07  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* machmode.h (opt_mode): Mark constructors with CONSTEXPR.\n\t(pod_mode): Mark operators likewise.\n\t(scalar_int_mode): Mark non-default constructors and\n\toperators with CONSTEXPR.\n\t(scalar_float_mode, scalar_mode, complex_mode): Likewise.\n\t(fixed_size_mode): Likewise.\n\nFrom-SVN: r276649", "tree": {"sha": "e898c4bd4fc7177de519be6d52f7c865c52345f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e898c4bd4fc7177de519be6d52f7c865c52345f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad00d6c1746fdcbfd86b2d50f2500d7ccb0d1691", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad00d6c1746fdcbfd86b2d50f2500d7ccb0d1691", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad00d6c1746fdcbfd86b2d50f2500d7ccb0d1691", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad00d6c1746fdcbfd86b2d50f2500d7ccb0d1691/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "698114484e668abf28c70d989bc93fa399dda9ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/698114484e668abf28c70d989bc93fa399dda9ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/698114484e668abf28c70d989bc93fa399dda9ac"}], "stats": {"total": 96, "additions": 71, "deletions": 25}, "files": [{"sha": "ce9158595924b7d8280c667fea45a0f85bd6ff9d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad00d6c1746fdcbfd86b2d50f2500d7ccb0d1691/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad00d6c1746fdcbfd86b2d50f2500d7ccb0d1691/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ad00d6c1746fdcbfd86b2d50f2500d7ccb0d1691", "patch": "@@ -1,3 +1,12 @@\n+2019-10-07  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* machmode.h (opt_mode): Mark constructors with CONSTEXPR.\n+\t(pod_mode): Mark operators likewise.\n+\t(scalar_int_mode): Mark non-default constructors and\n+\toperators with CONSTEXPR.\n+\t(scalar_float_mode, scalar_mode, complex_mode): Likewise.\n+\t(fixed_size_mode): Likewise.\n+\n 2019-10-07  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR target/91994"}, {"sha": "64ac213fbac1e3e6349aa7e63feda2d11caa305a", "filename": "gcc/machmode.h", "status": "modified", "additions": 62, "deletions": 25, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad00d6c1746fdcbfd86b2d50f2500d7ccb0d1691/gcc%2Fmachmode.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad00d6c1746fdcbfd86b2d50f2500d7ccb0d1691/gcc%2Fmachmode.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmachmode.h?ref=ad00d6c1746fdcbfd86b2d50f2500d7ccb0d1691", "patch": "@@ -244,11 +244,11 @@ class opt_mode\n public:\n   enum from_int { dummy = MAX_MACHINE_MODE };\n \n-  ALWAYS_INLINE opt_mode () : m_mode (E_VOIDmode) {}\n-  ALWAYS_INLINE opt_mode (const T &m) : m_mode (m) {}\n+  ALWAYS_INLINE CONSTEXPR opt_mode () : m_mode (E_VOIDmode) {}\n+  ALWAYS_INLINE CONSTEXPR opt_mode (const T &m) : m_mode (m) {}\n   template<typename U>\n-  ALWAYS_INLINE opt_mode (const U &m) : m_mode (T (m)) {}\n-  ALWAYS_INLINE opt_mode (from_int m) : m_mode (machine_mode (m)) {}\n+  ALWAYS_INLINE CONSTEXPR opt_mode (const U &m) : m_mode (T (m)) {}\n+  ALWAYS_INLINE CONSTEXPR opt_mode (from_int m) : m_mode (machine_mode (m)) {}\n \n   machine_mode else_void () const;\n   machine_mode else_blk () const { return else_mode (BLKmode); }\n@@ -324,8 +324,12 @@ struct pod_mode\n   typedef typename T::measurement_type measurement_type;\n \n   machine_mode m_mode;\n-  ALWAYS_INLINE operator machine_mode () const { return m_mode; }\n-  ALWAYS_INLINE operator T () const { return from_int (m_mode); }\n+  ALWAYS_INLINE CONSTEXPR\n+  operator machine_mode () const { return m_mode; }\n+\n+  ALWAYS_INLINE CONSTEXPR\n+  operator T () const { return from_int (m_mode); }\n+\n   ALWAYS_INLINE pod_mode &operator = (const T &m) { m_mode = m; return *this; }\n };\n \n@@ -403,8 +407,11 @@ class scalar_int_mode\n   typedef unsigned short measurement_type;\n \n   ALWAYS_INLINE scalar_int_mode () {}\n-  ALWAYS_INLINE scalar_int_mode (from_int m) : m_mode (machine_mode (m)) {}\n-  ALWAYS_INLINE operator machine_mode () const { return m_mode; }\n+\n+  ALWAYS_INLINE CONSTEXPR\n+  scalar_int_mode (from_int m) : m_mode (machine_mode (m)) {}\n+\n+  ALWAYS_INLINE CONSTEXPR operator machine_mode () const { return m_mode; }\n \n   static bool includes_p (machine_mode);\n \n@@ -428,8 +435,11 @@ class scalar_float_mode\n   typedef unsigned short measurement_type;\n \n   ALWAYS_INLINE scalar_float_mode () {}\n-  ALWAYS_INLINE scalar_float_mode (from_int m) : m_mode (machine_mode (m)) {}\n-  ALWAYS_INLINE operator machine_mode () const { return m_mode; }\n+\n+  ALWAYS_INLINE CONSTEXPR\n+  scalar_float_mode (from_int m) : m_mode (machine_mode (m)) {}\n+\n+  ALWAYS_INLINE CONSTEXPR operator machine_mode () const { return m_mode; }\n \n   static bool includes_p (machine_mode);\n \n@@ -453,11 +463,20 @@ class scalar_mode\n   typedef unsigned short measurement_type;\n \n   ALWAYS_INLINE scalar_mode () {}\n-  ALWAYS_INLINE scalar_mode (from_int m) : m_mode (machine_mode (m)) {}\n-  ALWAYS_INLINE scalar_mode (const scalar_int_mode &m) : m_mode (m) {}\n-  ALWAYS_INLINE scalar_mode (const scalar_float_mode &m) : m_mode (m) {}\n-  ALWAYS_INLINE scalar_mode (const scalar_int_mode_pod &m) : m_mode (m) {}\n-  ALWAYS_INLINE operator machine_mode () const { return m_mode; }\n+\n+  ALWAYS_INLINE CONSTEXPR\n+  scalar_mode (from_int m) : m_mode (machine_mode (m)) {}\n+\n+  ALWAYS_INLINE CONSTEXPR\n+  scalar_mode (const scalar_int_mode &m) : m_mode (m) {}\n+\n+  ALWAYS_INLINE CONSTEXPR\n+  scalar_mode (const scalar_float_mode &m) : m_mode (m) {}\n+\n+  ALWAYS_INLINE CONSTEXPR\n+  scalar_mode (const scalar_int_mode_pod &m) : m_mode (m) {}\n+\n+  ALWAYS_INLINE CONSTEXPR operator machine_mode () const { return m_mode; }\n \n   static bool includes_p (machine_mode);\n \n@@ -494,8 +513,11 @@ class complex_mode\n   typedef unsigned short measurement_type;\n \n   ALWAYS_INLINE complex_mode () {}\n-  ALWAYS_INLINE complex_mode (from_int m) : m_mode (machine_mode (m)) {}\n-  ALWAYS_INLINE operator machine_mode () const { return m_mode; }\n+\n+  ALWAYS_INLINE CONSTEXPR\n+  complex_mode (from_int m) : m_mode (machine_mode (m)) {}\n+\n+  ALWAYS_INLINE CONSTEXPR operator machine_mode () const { return m_mode; }\n \n   static bool includes_p (machine_mode);\n \n@@ -764,14 +786,29 @@ class fixed_size_mode\n   typedef unsigned short measurement_type;\n \n   ALWAYS_INLINE fixed_size_mode () {}\n-  ALWAYS_INLINE fixed_size_mode (from_int m) : m_mode (machine_mode (m)) {}\n-  ALWAYS_INLINE fixed_size_mode (const scalar_mode &m) : m_mode (m) {}\n-  ALWAYS_INLINE fixed_size_mode (const scalar_int_mode &m) : m_mode (m) {}\n-  ALWAYS_INLINE fixed_size_mode (const scalar_float_mode &m) : m_mode (m) {}\n-  ALWAYS_INLINE fixed_size_mode (const scalar_mode_pod &m) : m_mode (m) {}\n-  ALWAYS_INLINE fixed_size_mode (const scalar_int_mode_pod &m) : m_mode (m) {}\n-  ALWAYS_INLINE fixed_size_mode (const complex_mode &m) : m_mode (m) {}\n-  ALWAYS_INLINE operator machine_mode () const { return m_mode; }\n+\n+  ALWAYS_INLINE CONSTEXPR\n+  fixed_size_mode (from_int m) : m_mode (machine_mode (m)) {}\n+\n+  ALWAYS_INLINE CONSTEXPR\n+  fixed_size_mode (const scalar_mode &m) : m_mode (m) {}\n+\n+  ALWAYS_INLINE CONSTEXPR\n+  fixed_size_mode (const scalar_int_mode &m) : m_mode (m) {}\n+\n+  ALWAYS_INLINE CONSTEXPR\n+  fixed_size_mode (const scalar_float_mode &m) : m_mode (m) {}\n+\n+  ALWAYS_INLINE CONSTEXPR\n+  fixed_size_mode (const scalar_mode_pod &m) : m_mode (m) {}\n+\n+  ALWAYS_INLINE CONSTEXPR\n+  fixed_size_mode (const scalar_int_mode_pod &m) : m_mode (m) {}\n+\n+  ALWAYS_INLINE CONSTEXPR\n+  fixed_size_mode (const complex_mode &m) : m_mode (m) {}\n+\n+  ALWAYS_INLINE CONSTEXPR operator machine_mode () const { return m_mode; }\n \n   static bool includes_p (machine_mode);\n "}]}