{"sha": "65016251f649b17274bda3628c02df1cb154220a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjUwMTYyNTFmNjQ5YjE3Mjc0YmRhMzYyOGMwMmRmMWNiMTU0MjIwYQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2015-12-16T18:22:17Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-12-16T18:22:17Z"}, "message": "re PR c++/63628 ([c++1y] cannot use decltype on captured arg-pack)\n\n\tPR c++/63628\n\t* pt.c (tsubst_pack_expansion): Also make dummy decls if\n\tretrieve_local_specialization fails.\n\nFrom-SVN: r231713", "tree": {"sha": "135523b5c2a7da7e27690fbb0869927f5718cda9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/135523b5c2a7da7e27690fbb0869927f5718cda9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65016251f649b17274bda3628c02df1cb154220a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65016251f649b17274bda3628c02df1cb154220a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65016251f649b17274bda3628c02df1cb154220a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65016251f649b17274bda3628c02df1cb154220a/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "de67c4c37913cb4f30cc0d5163665ab8419ac2ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de67c4c37913cb4f30cc0d5163665ab8419ac2ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de67c4c37913cb4f30cc0d5163665ab8419ac2ed"}], "stats": {"total": 36, "additions": 30, "deletions": 6}, "files": [{"sha": "751779244f6047021b13927bfdec47e71f3285c7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65016251f649b17274bda3628c02df1cb154220a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65016251f649b17274bda3628c02df1cb154220a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=65016251f649b17274bda3628c02df1cb154220a", "patch": "@@ -1,3 +1,9 @@\n+2015-12-16  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/63628\n+\t* pt.c (tsubst_pack_expansion): Also make dummy decls if\n+\tretrieve_local_specialization fails.\n+\n 2015-12-16  David Malcolm  <dmalcolm@redhat.com>\n \n \t* parser.c (cp_lexer_peek_conflict_marker): New function."}, {"sha": "2c2da11488bed14f3b55f1b3e8e89ce924c7d2d9", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65016251f649b17274bda3628c02df1cb154220a/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65016251f649b17274bda3628c02df1cb154220a/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=65016251f649b17274bda3628c02df1cb154220a", "patch": "@@ -10803,20 +10803,23 @@ tsubst_pack_expansion (tree t, tree args, tsubst_flags_t complain,\n \t  if (PACK_EXPANSION_LOCAL_P (t) || CONSTRAINT_VAR_P (parm_pack))\n \t    arg_pack = retrieve_local_specialization (parm_pack);\n \t  else\n+\t    /* We can't rely on local_specializations for a parameter\n+\t       name used later in a function declaration (such as in a\n+\t       late-specified return type).  Even if it exists, it might\n+\t       have the wrong value for a recursive call.  */\n+\t    need_local_specializations = true;\n+\n+\t  if (!arg_pack)\n \t    {\n-\t      /* We can't rely on local_specializations for a parameter\n-\t\t name used later in a function declaration (such as in a\n-\t\t late-specified return type).  Even if it exists, it might\n-\t\t have the wrong value for a recursive call.  Just make a\n-\t\t dummy decl, since it's only used for its type.  */\n+\t      /* This parameter pack was used in an unevaluated context.  Just\n+\t\t make a dummy decl, since it's only used for its type.  */\n \t      arg_pack = tsubst_decl (parm_pack, args, complain);\n \t      if (arg_pack && DECL_PACK_P (arg_pack))\n \t\t/* Partial instantiation of the parm_pack, we can't build\n \t\t   up an argument pack yet.  */\n \t\targ_pack = NULL_TREE;\n \t      else\n \t\targ_pack = make_fnparm_pack (arg_pack);\n-\t      need_local_specializations = true;\n \t    }\n \t}\n       else if (TREE_CODE (parm_pack) == FIELD_DECL)"}, {"sha": "9b3455a4da3828c750d73a5fcd9a03877f0eaa13", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-generic-variadic3.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65016251f649b17274bda3628c02df1cb154220a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-variadic3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65016251f649b17274bda3628c02df1cb154220a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-variadic3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-variadic3.C?ref=65016251f649b17274bda3628c02df1cb154220a", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/63628\n+// { dg-do compile { target c++14 } }\n+\n+auto const pack = [](auto&&... t)\n+{\n+  return [&](auto&& f)->decltype(auto)\n+  {\n+    return f(static_cast<decltype(t)>(t)...);\n+  };\n+};\n+\n+int main(int argc, char** argv) {\n+  pack(1)([](int){});\n+  return 0;\n+}"}]}