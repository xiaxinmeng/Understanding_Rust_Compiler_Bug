{"sha": "6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmMxZGFlNzNjZDJjZWI2YTMyNmY3ODZmNmQ0ZTg2NzQ4NjNkZTQ1ZQ==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2019-07-09T16:36:00Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2019-07-09T16:36:00Z"}, "message": "PR c++/61339 - add mismatch between struct and class [-Wmismatched-tags] to non-bugs\n\ngcc/c/ChangeLog:\n\n\tPR c++/61339\n\t* c-decl.c: Change class-key from class to struct and vice versa\n\tto match convention and avoid -Wclass-is-pod and -Wstruct-no-pod.\n\t* gimple-parser.c: Same.\n\ngcc/c-family/ChangeLog:\n\n\tPR c++/61339\n\t* c-format.c (check_argument_type): Change class-key from class to\n\tstruct and vice versa to match convention and avoid -Wclass-is-pod\n\tand -Wstruct-no-pod.\n\t* c-pretty-print.h: Same.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/61339\n\t* constexpr.c (cxx_eval_call_expression): Change class-key from class\n\tto struct and vice versa to match convention and avoid -Wclass-is-pod\n\tand -Wstruct-no-pod.\n\t* constraint.cc (get_concept_definition): Same.\n\t* cp-tree.h: Same.\n\t* cxx-pretty-print.h: Same.\n\t* error.c: Same.\n\t* logic.cc (term_list::replace): Same.\n\t* name-lookup.c (find_local_binding): Same.\n\t* pt.c (tsubst_binary_right_fold): Same.\n\t* search.c (field_accessor_p): Same.\n\t* semantics.c (expand_or_defer_fn): Same.\n\ngcc/lto/ChangeLog:\n\n\tPR c++/61339\n\t* lto-dump.c: Change class-key from classi to struct and vice versa\n\tto match convention and avoid -Wclass-is-pod and -Wstruct-no-pod.\n\ngcc/ChangeLog:\n\n\tPR c++/61339\n\t* align.h: Change class-key from class to struct and vice versa\n\tto match convention and avoid -Wclass-is-pod and -Wstruct-no-pod.\n\t* alloc-pool.h: Same.\n\t* asan.c (shadow_mem_size): Same.\n\t* auto-profile.c: Same.\n\t* basic-block.h: Same.\n\t* bitmap.h: Same.\n\t* cfgexpand.c (set_rtl): Same.\n\t(expand_one_stack_var_at): Same.\n\t* cfghooks.h: Same.\n\t* cfgloop.h: Same.\n\t* cgraph.h: Same.\n\t* config/i386/i386.h: Same.\n\t* df-problems.c (df_print_bb_index): Same.\n\t* df-scan.c: Same.\n\t* df.h (df_single_use): Same.\n\t* diagnostic-show-locus.c (layout::print_annotation_line): Same.\n\t(layout::annotation_line_showed_range_p): Same.\n\t(get_printed_columns): Same.\n\t(correction::ensure_terminated): Same.\n\t(line_corrections::~line_corrections): Same.\n\t* dojump.h: Same.\n\t* dse.c: Same.\n\t* dump-context.h: Same.\n\t* dumpfile.h: Same.\n\t* dwarf2out.c: Same.\n\t* edit-context.c: Same.\n\t* fibonacci_heap.c (test_union_of_equal_heaps): Same.\n\t* flags.h: Same.\n\t* function.c (assign_stack_local): Same.\n\t* function.h: Same.\n\t* gcc.c: Same.\n\t* gcov.c (block_info::block_info): Same.\n\t* genattrtab.c: Same.\n\t* genextract.c: Same.\n\t* genmatch.c (comparison_code_p): Same.\n\t(id_base::id_base): Same.\n\t(decision_tree::print): Same.\n\t* genoutput.c: Same.\n\t* genpreds.c (write_one_predicate_function): Same.\n\t* genrecog.c (validate_pattern): Same.\n\t(find_operand_positions): Same.\n\t(optimize_subroutine_group): Same.\n\t(merge_pattern_transition::merge_pattern_transition): Same.\n\t(merge_pattern_info::merge_pattern_info): Same.\n\t(merge_state_result::merge_state_result): Same.\n\t(merge_into_state): Same.\n\t* gensupport.c: Same.\n\t* gensupport.h: Same.\n\t* ggc-common.c (init_ggc_heuristics): Same.\n\t* ggc-tests.c (test_union): Same.\n\t* gimple-loop-interchange.cc (dump_induction): Same.\n\t* gimple-loop-versioning.cc: Same.\n\t* gimple-match.h (gimple_match_cond::any_else): Same.\n\t* gimple-ssa-backprop.c: Same.\n\t* gimple-ssa-sprintf.c: Same.\n\t* gimple-ssa-store-merging.c (store_operand_info::store_operand_info): Same.\n\t(store_immediate_info::store_immediate_info): Same.\n\t(merged_store_group::apply_stores): Same.\n\t(get_location_for_stmts): Same.\n\t* gimple-ssa-strength-reduction.c: Same.\n\t* gimple-ssa-warn-alloca.c: Same.\n\t* gimple-ssa-warn-restrict.c (pass_wrestrict::execute): Same.\n\t* godump.c (go_type_decl): Same.\n\t* hash-map-tests.c (test_map_of_strings_to_int): Same.\n\t* hash-map.h: Same.\n\t* hash-set-tests.c (test_set_of_strings): Same.\n\t* hsa-brig.c: Same.\n\t* hsa-common.h: Same.\n\t* hsa-gen.c (transformable_switch_to_sbr_p): Same.\n\t* input.c (assert_loceq): Same.\n\t* input.h: Same.\n\t* ipa-cp.c: Same.\n\t* ipa-devirt.c (possible_polymorphic_call_targets_1): Same.\n\t* ipa-fnsummary.h: Same.\n\t* ipa-inline.h: Same.\n\t* ipa-prop.h: Same.\n\t* ipa-split.c (visit_bb): Same.\n\t* ira-int.h (minmax_set_iter_next): Same.\n\t* loop-invariant.c: Same.\n\t* loop-iv.c: Same.\n\t* lra-eliminations.c: Same.\n\t* lra-int.h: Same.\n\t* lra-lives.c (mark_regno_dead): Same.\n\t* lra-remat.c: Same.\n\t* lra-spills.c: Same.\n\t* lto-streamer.h: Same.\n\t* mem-stats.h: Same.\n\t* omp-grid.c (omp_grid_lastprivate_predicate): Same.\n\t* omp-low.c (omp_clause_aligned_alignment): Same.\n\t* optabs-query.h (get_vcond_eq_icode): Same.\n\t* optabs.h: Same.\n\t* opts.c (wrap_help): Same.\n\t* poly-int.h: Same.\n\t* predict.c (predict_paths_leading_to_edge): Same.\n\t* pretty-print.h: Same.\n\t* profile-count.h: Same.\n\t* read-md.h: Same.\n\t* read-rtl-function.c: Same.\n\t* ree.c: Same.\n\t* reginfo.c: Same.\n\t* regrename.c: Same.\n\t* regrename.h: Same.\n\t* reload.h: Same.\n\t* rtl-iter.h: Same.\n\t* rtl.h (costs_add_n_insns): Same.\n\t* sanopt.c: Same.\n\t* sched-int.h: Same.\n\t* sel-sched-ir.h: Same.\n\t* selftest.h: Same.\n\t* sese.h (vec_find): Same.\n\t* stmt.c: Same.\n\t* target-globals.h: Same.\n\t* tree-affine.c (aff_combination_find_elt): Same.\n\t* tree-affine.h: Same.\n\t* tree-data-ref.h: Same.\n\t* tree-outof-ssa.c (ssa_is_replaceable_p): Same.\n\t* tree-predcom.c: Same.\n\t* tree-scalar-evolution.c (find_var_scev_info): Same.\n\t* tree-ssa-alias.h: Same.\n\t* tree-ssa-ccp.c: Same.\n\t* tree-ssa-coalesce.c (ssa_conflicts_dump): Same.\n\t* tree-ssa-loop-im.c (for_all_locs_in_loop): Same.\n\t(rewrite_mem_refs): Same.\n\t(execute_sm_if_changed): Same.\n\t(hoist_memory_references): Same.\n\t* tree-ssa-loop-ivopts.c (operator<=): Same.\n\t* tree-ssa-loop.h: Same.\n\t* tree-ssa-pre.c (get_or_alloc_expr_for_name): Same.\n\t* tree-ssa-structalias.c: Same.\n\t* tree-switch-conversion.h (cluster::cluster): Same.\n\t(simple_cluster::simple_cluster): Same.\n\t* tree-vect-patterns.c (type_conversion_p): Same.\n\t* tree-vectorizer.c (dump_stmt_cost): Same.\n\t* tree-vectorizer.h (loop_vec_info_for_loop): Same.\n\t* tree.c (protected_set_expr_location): Same.\n\t* tree.h (desired_pro_or_demotion_p): Same.\n\t(fndecl_built_in_p): Same.\n\t* unique-ptr-tests.cc: Same.\n\t* var-tracking.c (delete_variable_part): Same.\n\t* varasm.c (assemble_real): Same.\n\t(tree_output_constant_def): Same.\n\t* vec.c: Same.\n\t* wide-int-bitmask.h: Same.\n\t* wide-int.h (decompose): Same.\n\nFrom-SVN: r273308", "tree": {"sha": "3245c6dc2920696a64b6dbe29f7d356194a09249", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3245c6dc2920696a64b6dbe29f7d356194a09249"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1f88cc260c67c8492ac15490184b8faead4b6f62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f88cc260c67c8492ac15490184b8faead4b6f62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f88cc260c67c8492ac15490184b8faead4b6f62"}], "stats": {"total": 1060, "additions": 761, "deletions": 299}, "files": [{"sha": "1606b91039123006a2d689862e9021fb8d750a2c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 149, "deletions": 0, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -1,3 +1,152 @@\n+2019-07-09  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/61339\n+\t* align.h: Change class-key from class to struct and vice versa\n+\tto match convention and avoid -Wclass-is-pod and -Wstruct-no-pod.\n+\t* alloc-pool.h: Same.\n+\t* asan.c (shadow_mem_size): Same.\n+\t* auto-profile.c: Same.\n+\t* basic-block.h: Same.\n+\t* bitmap.h: Same.\n+\t* cfgexpand.c (set_rtl): Same.\n+\t(expand_one_stack_var_at): Same.\n+\t* cfghooks.h: Same.\n+\t* cfgloop.h: Same.\n+\t* cgraph.h: Same.\n+\t* config/i386/i386.h: Same.\n+\t* df-problems.c (df_print_bb_index): Same.\n+\t* df-scan.c: Same.\n+\t* df.h (df_single_use): Same.\n+\t* diagnostic-show-locus.c (layout::print_annotation_line): Same.\n+\t(layout::annotation_line_showed_range_p): Same.\n+\t(get_printed_columns): Same.\n+\t(correction::ensure_terminated): Same.\n+\t(line_corrections::~line_corrections): Same.\n+\t* dojump.h: Same.\n+\t* dse.c: Same.\n+\t* dump-context.h: Same.\n+\t* dumpfile.h: Same.\n+\t* dwarf2out.c: Same.\n+\t* edit-context.c: Same.\n+\t* fibonacci_heap.c (test_union_of_equal_heaps): Same.\n+\t* flags.h: Same.\n+\t* function.c (assign_stack_local): Same.\n+\t* function.h: Same.\n+\t* gcc.c: Same.\n+\t* gcov.c (block_info::block_info): Same.\n+\t* genattrtab.c: Same.\n+\t* genextract.c: Same.\n+\t* genmatch.c (comparison_code_p): Same.\n+\t(id_base::id_base): Same.\n+\t(decision_tree::print): Same.\n+\t* genoutput.c: Same.\n+\t* genpreds.c (write_one_predicate_function): Same.\n+\t* genrecog.c (validate_pattern): Same.\n+\t(find_operand_positions): Same.\n+\t(optimize_subroutine_group): Same.\n+\t(merge_pattern_transition::merge_pattern_transition): Same.\n+\t(merge_pattern_info::merge_pattern_info): Same.\n+\t(merge_state_result::merge_state_result): Same.\n+\t(merge_into_state): Same.\n+\t* gensupport.c: Same.\n+\t* gensupport.h: Same.\n+\t* ggc-common.c (init_ggc_heuristics): Same.\n+\t* ggc-tests.c (test_union): Same.\n+\t* gimple-loop-interchange.cc (dump_induction): Same.\n+\t* gimple-loop-versioning.cc: Same.\n+\t* gimple-match.h (gimple_match_cond::any_else): Same.\n+\t* gimple-ssa-backprop.c: Same.\n+\t* gimple-ssa-sprintf.c: Same.\n+\t* gimple-ssa-store-merging.c (store_operand_info::store_operand_info): Same.\n+\t(store_immediate_info::store_immediate_info): Same.\n+\t(merged_store_group::apply_stores): Same.\n+\t(get_location_for_stmts): Same.\n+\t* gimple-ssa-strength-reduction.c: Same.\n+\t* gimple-ssa-warn-alloca.c: Same.\n+\t* gimple-ssa-warn-restrict.c (pass_wrestrict::execute): Same.\n+\t* godump.c (go_type_decl): Same.\n+\t* hash-map-tests.c (test_map_of_strings_to_int): Same.\n+\t* hash-map.h: Same.\n+\t* hash-set-tests.c (test_set_of_strings): Same.\n+\t* hsa-brig.c: Same.\n+\t* hsa-common.h: Same.\n+\t* hsa-gen.c (transformable_switch_to_sbr_p): Same.\n+\t* input.c (assert_loceq): Same.\n+\t* input.h: Same.\n+\t* ipa-cp.c: Same.\n+\t* ipa-devirt.c (possible_polymorphic_call_targets_1): Same.\n+\t* ipa-fnsummary.h: Same.\n+\t* ipa-inline.h: Same.\n+\t* ipa-prop.h: Same.\n+\t* ipa-split.c (visit_bb): Same.\n+\t* ira-int.h (minmax_set_iter_next): Same.\n+\t* loop-invariant.c: Same.\n+\t* loop-iv.c: Same.\n+\t* lra-eliminations.c: Same.\n+\t* lra-int.h: Same.\n+\t* lra-lives.c (mark_regno_dead): Same.\n+\t* lra-remat.c: Same.\n+\t* lra-spills.c: Same.\n+\t* lto-streamer.h: Same.\n+\t* mem-stats.h: Same.\n+\t* omp-grid.c (omp_grid_lastprivate_predicate): Same.\n+\t* omp-low.c (omp_clause_aligned_alignment): Same.\n+\t* optabs-query.h (get_vcond_eq_icode): Same.\n+\t* optabs.h: Same.\n+\t* opts.c (wrap_help): Same.\n+\t* poly-int.h: Same.\n+\t* predict.c (predict_paths_leading_to_edge): Same.\n+\t* pretty-print.h: Same.\n+\t* profile-count.h: Same.\n+\t* read-md.h: Same.\n+\t* read-rtl-function.c: Same.\n+\t* ree.c: Same.\n+\t* reginfo.c: Same.\n+\t* regrename.c: Same.\n+\t* regrename.h: Same.\n+\t* reload.h: Same.\n+\t* rtl-iter.h: Same.\n+\t* rtl.h (costs_add_n_insns): Same.\n+\t* sanopt.c: Same.\n+\t* sched-int.h: Same.\n+\t* sel-sched-ir.h: Same.\n+\t* selftest.h: Same.\n+\t* sese.h (vec_find): Same.\n+\t* stmt.c: Same.\n+\t* target-globals.h: Same.\n+\t* tree-affine.c (aff_combination_find_elt): Same.\n+\t* tree-affine.h: Same.\n+\t* tree-data-ref.h: Same.\n+\t* tree-outof-ssa.c (ssa_is_replaceable_p): Same.\n+\t* tree-predcom.c: Same.\n+\t* tree-scalar-evolution.c (find_var_scev_info): Same.\n+\t* tree-ssa-alias.h: Same.\n+\t* tree-ssa-ccp.c: Same.\n+\t* tree-ssa-coalesce.c (ssa_conflicts_dump): Same.\n+\t* tree-ssa-loop-im.c (for_all_locs_in_loop): Same.\n+\t(rewrite_mem_refs): Same.\n+\t(execute_sm_if_changed): Same.\n+\t(hoist_memory_references): Same.\n+\t* tree-ssa-loop-ivopts.c (operator<=): Same.\n+\t* tree-ssa-loop.h: Same.\n+\t* tree-ssa-pre.c (get_or_alloc_expr_for_name): Same.\n+\t* tree-ssa-structalias.c: Same.\n+\t* tree-switch-conversion.h (cluster::cluster): Same.\n+\t(simple_cluster::simple_cluster): Same.\n+\t* tree-vect-patterns.c (type_conversion_p): Same.\n+\t* tree-vectorizer.c (dump_stmt_cost): Same.\n+\t* tree-vectorizer.h (loop_vec_info_for_loop): Same.\n+\t* tree.c (protected_set_expr_location): Same.\n+\t* tree.h (desired_pro_or_demotion_p): Same.\n+\t(fndecl_built_in_p): Same.\n+\t* unique-ptr-tests.cc: Same.\n+\t* var-tracking.c (delete_variable_part): Same.\n+\t* varasm.c (assemble_real): Same.\n+\t(tree_output_constant_def): Same.\n+\t* vec.c: Same.\n+\t* wide-int-bitmask.h: Same.\n+\t* wide-int.h (decompose): Same.\n+\n 2019-07-09  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/91114"}, {"sha": "6c98e2d9646f3acf837e082bab6b73569d4515db", "filename": "gcc/align.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Falign.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Falign.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falign.h?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -45,8 +45,9 @@ struct align_flags_tuple\n /* Alignment flags is structure used as value of -align-* options.\n    It's used in target-dependant code.  */\n \n-struct align_flags\n+class align_flags\n {\n+public:\n   /* Default constructor.  */\n   align_flags (int log0 = 0, int maxskip0 = 0, int log1 = 0, int maxskip1 = 0)\n   {"}, {"sha": "d8878b6b7427533ea9da43fd8be61334894d3622", "filename": "gcc/alloc-pool.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Falloc-pool.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Falloc-pool.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falloc-pool.h?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -34,8 +34,9 @@ typedef unsigned long ALLOC_POOL_ID_TYPE;\n extern ALLOC_POOL_ID_TYPE last_id;\n \n /* Pool allocator memory usage.  */\n-struct pool_usage: public mem_usage\n+class pool_usage: public mem_usage\n {\n+public:\n   /* Default contructor.  */\n   pool_usage (): m_element_size (0), m_pool_name (\"\") {}\n   /* Constructor.  */"}, {"sha": "a731bd490b4e78e916ae20fc9a0249c1fc04daa5", "filename": "gcc/asan.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -1225,8 +1225,9 @@ shadow_mem_size (unsigned HOST_WIDE_INT size)\n #define RZ_BUFFER_SIZE 4\n \n /* ASAN redzone buffer container that handles emission of shadow bytes.  */\n-struct asan_redzone_buffer\n+class asan_redzone_buffer\n {\n+public:\n   /* Constructor.  */\n   asan_redzone_buffer (rtx shadow_mem, HOST_WIDE_INT prev_offset):\n     m_shadow_mem (shadow_mem), m_prev_offset (prev_offset),"}, {"sha": "59100a0a47dd5d38b2c1872e2fac343f8b16de12", "filename": "gcc/auto-profile.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fauto-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fauto-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fauto-profile.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -136,8 +136,9 @@ typedef std::map<unsigned, gcov_type> icall_target_map;\n typedef std::set<gimple *> stmt_set;\n \n /* Represent count info of an inline stack.  */\n-struct count_info\n+class count_info\n {\n+public:\n   /* Sampled count of the inline stack.  */\n   gcov_type count;\n "}, {"sha": "964f2bd5784a261bb9acf110ca38ed617f269b17", "filename": "gcc/basic-block.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -23,7 +23,8 @@ along with GCC; see the file COPYING3.  If not see\n #include <profile-count.h>\n \n /* Control flow edge information.  */\n-struct GTY((user)) edge_def {\n+class GTY((user)) edge_def {\n+public:\n   /* The two blocks at the ends of the edge.  */\n   basic_block src;\n   basic_block dest;"}, {"sha": "0e3ffc8862f466ec4aae70db9658e29d83c1e08d", "filename": "gcc/bitmap.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fbitmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fbitmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.h?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -212,8 +212,9 @@ along with GCC; see the file COPYING3.  If not see\n #include \"obstack.h\"\n \n /* Bitmap memory usage.  */\n-struct bitmap_usage: public mem_usage\n+class bitmap_usage: public mem_usage\n {\n+public:\n   /* Default contructor.  */\n   bitmap_usage (): m_nsearches (0), m_search_iter (0) {}\n   /* Constructor.  */\n@@ -321,7 +322,8 @@ struct GTY((chain_next (\"%h.next\"))) bitmap_element {\n /* Head of bitmap linked list.  The 'current' member points to something\n    already pointed to by the chain started by first, so GTY((skip)) it.  */\n \n-struct GTY(()) bitmap_head {\n+class GTY(()) bitmap_head {\n+public:\n   static bitmap_obstack crashme;\n   /* Poison obstack to not make it not a valid initialized GC bitmap.  */\n   CONSTEXPR bitmap_head()"}, {"sha": "4d8f967b3410135afd3ce0847c0d304800b43771", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -1,3 +1,11 @@\n+2019-07-09  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/61339\n+\t* c-format.c (check_argument_type): Change class-key from class to\n+\tstruct and vice versa to match convention and avoid -Wclass-is-pod\n+\tand -Wstruct-no-pod.\n+\t* c-pretty-print.h: Same.\n+\n 2019-07-03  Martin Liska  <mliska@suse.cz>\n \n \t* c-common.c (try_to_locate_new_include_insertion_point): Remove"}, {"sha": "d134116d598b12fd7a544a508f31779f8e4e9a9b", "filename": "gcc/c-family/c-format.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fc-family%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fc-family%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-format.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -1839,8 +1839,9 @@ class flag_chars_t\n /* Support struct for argument_parser and check_format_info_main.\n    Encapsulates any length modifier applied to the current argument.  */\n \n-struct length_modifier\n+class length_modifier\n {\n+public:\n   length_modifier ()\n   : chars (NULL), val (FMT_LEN_none), std (STD_C89),\n     scalar_identity_flag (0)\n@@ -2853,8 +2854,9 @@ check_argument_type (const format_char_info *fci,\n /* Describes \"paired tokens\" within the format string that are\n    expected to be balanced.  */\n \n-struct baltoks_t\n+class baltoks_t\n {\n+public:\n   baltoks_t (): singlequote (), doublequote () { }\n \n   typedef auto_vec<const char *> balanced_tokens_t;"}, {"sha": "8c516c3e56b81eca2d66ff45c8902289520d8d0c", "filename": "gcc/c-family/c-pretty-print.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fc-family%2Fc-pretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fc-family%2Fc-pretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pretty-print.h?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -47,8 +47,9 @@ typedef void (*c_pretty_print_fn) (c_pretty_printer *, tree);\n    facilities provided here.  A derived pretty-printer can override\n    any function listed in the vtable below.  See cp/cxx-pretty-print.h\n    and cp/cxx-pretty-print.c for an example of derivation.  */\n-struct c_pretty_printer : pretty_printer\n+class c_pretty_printer : public pretty_printer\n {\n+public:\n   c_pretty_printer ();\n \n   // Format string, possibly translated."}, {"sha": "d2645a84decd48eda36d36f747a62cd6791de2ca", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -1,3 +1,10 @@\n+2019-07-09  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/61339\n+\t* c-decl.c: Change class-key from class to struct and vice versa\n+\tto match convention and avoid -Wclass-is-pod and -Wstruct-no-pod.\n+\t* gimple-parser.c: Same.\n+\n 2019-07-01  Richard Biener  <rguenther@suse.de>\n \n \t* gimple-parser.c (c_parser_gimple_postfix_expression): Handle"}, {"sha": "35e15ba2a8b48b869775c561a6a0b5c1e0a6feb1", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -574,8 +574,9 @@ typedef struct c_binding *c_binding_ptr;\n /* Information that we keep for a struct or union while it is being\n    parsed.  */\n \n-struct c_struct_parse_info\n+class c_struct_parse_info\n {\n+public:\n   /* If warn_cxx_compat, a list of types defined within this\n      struct.  */\n   auto_vec<tree> struct_types;"}, {"sha": "e388d93b9e2e3315fb4b1571d887c251d4054f7b", "filename": "gcc/c/gimple-parser.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fc%2Fgimple-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fc%2Fgimple-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fgimple-parser.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -68,17 +68,19 @@ along with GCC; see the file COPYING3.  If not see\n \n /* GIMPLE parser state.  */\n \n-struct gimple_parser\n+class gimple_parser\n {\n+public:\n   gimple_parser (c_parser *p) : parser (p), edges(), current_bb(NULL) {}\n   /* c_parser is not visible here, use composition and fake inheritance\n      via a conversion operator.  */\n   operator c_parser *() { return parser; }\n   c_parser *parser;\n \n   /* CFG build state.  */\n-  struct gimple_parser_edge\n+  class gimple_parser_edge\n   {\n+  public:\n     int src;\n     int dest;\n     int flags;"}, {"sha": "0128fca4e2bdbef34147a43229c44c49efc672f9", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -305,8 +305,9 @@ set_rtl (tree t, rtx x)\n \n /* This structure holds data relevant to one variable that will be\n    placed in a stack slot.  */\n-struct stack_var\n+class stack_var\n {\n+public:\n   /* The Variable.  */\n   tree decl;\n \n@@ -1021,8 +1022,9 @@ expand_one_stack_var_at (tree decl, rtx base, unsigned base_align,\n   set_rtl (decl, x);\n }\n \n-struct stack_vars_data\n+class stack_vars_data\n {\n+public:\n   /* Vector of offset pairs, always end of some padding followed\n      by start of the padding that needs Address Sanitizer protection.\n      The vector is in reversed, highest offset pairs come first.  */"}, {"sha": "9ed0c3631585b86cdfa1cff9344397cb3ba5d9f3", "filename": "gcc/cfghooks.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fcfghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fcfghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfghooks.h?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -58,8 +58,9 @@ typedef int_hash <unsigned short, 0> dependence_hash;\n \n /* Optional data for duplicate_block.   */\n \n-struct copy_bb_data\n+class copy_bb_data\n {\n+public:\n   copy_bb_data() : dependence_map (NULL) {}\n   ~copy_bb_data () { delete dependence_map; }\n "}, {"sha": "941407020550f523396a0e3ccb9d9170576db049", "filename": "gcc/cfgloop.h", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fcfgloop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fcfgloop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.h?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -46,7 +46,8 @@ enum iv_extend_code\n \n /* The structure describing a bound on number of iterations of a loop.  */\n \n-struct GTY ((chain_next (\"%h.next\"))) nb_iter_bound {\n+class GTY ((chain_next (\"%h.next\"))) nb_iter_bound {\n+public:\n   /* The statement STMT is executed at most ...  */\n   gimple *stmt;\n \n@@ -113,7 +114,8 @@ struct GTY ((chain_next (\"%h.next\"))) control_iv {\n };\n \n /* Structure to hold information for each natural loop.  */\n-struct GTY ((chain_next (\"%h.next\"))) loop {\n+class GTY ((chain_next (\"%h.next\"))) loop {\n+public:\n   /* Index into loops array.  Note indices will never be reused after loop\n      is destroyed.  */\n   int num;\n@@ -422,8 +424,9 @@ void mark_loop_for_removal (loop_p);\n    computation is done, which would enable it to be different from the\n    outer one?  */\n \n-struct rtx_iv\n+class rtx_iv\n {\n+public:\n   /* Its base and step (mode of base and step is supposed to be extend_mode,\n      see the description above).  */\n   rtx base, step;\n@@ -448,8 +451,9 @@ struct rtx_iv\n /* The description of an exit from the loop and of the number of iterations\n    till we take the exit.  */\n \n-struct GTY(()) niter_desc\n+class GTY(()) niter_desc\n {\n+public:\n   /* The edge out of the loop.  */\n   edge out_edge;\n \n@@ -651,8 +655,9 @@ enum li_flags\n \n /* The iterator for loops.  */\n \n-struct loop_iterator\n+class loop_iterator\n {\n+public:\n   loop_iterator (function *fn, loop_p *loop, unsigned flags);\n   ~loop_iterator ();\n "}, {"sha": "e5fd6dd133cb544561513db4e8575640c3f35423", "filename": "gcc/cgraph.h", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -100,8 +100,8 @@ enum symbol_partitioning_class\n \n /* Base of all entries in the symbol table.\n    The symtab_node is inherited by cgraph and varpol nodes.  */\n-class GTY((desc (\"%h.type\"), tag (\"SYMTAB_SYMBOL\"),\n-\t   chain_next (\"%h.next\"), chain_prev (\"%h.previous\")))\n+struct GTY((desc (\"%h.type\"), tag (\"SYMTAB_SYMBOL\"),\n+\t    chain_next (\"%h.next\"), chain_prev (\"%h.previous\")))\n   symtab_node\n {\n public:\n@@ -912,7 +912,8 @@ struct cgraph_edge_hasher : ggc_ptr_hash<cgraph_edge>\n /* The cgraph data structure.\n    Each function decl has assigned cgraph_node listing callees and callers.  */\n \n-struct GTY((tag (\"SYMTAB_FUNCTION\"))) cgraph_node : public symtab_node {\n+class GTY((tag (\"SYMTAB_FUNCTION\"))) cgraph_node : public symtab_node\n+{\n public:\n   friend class symbol_table;\n \n@@ -1632,8 +1633,9 @@ class GTY(()) ipa_polymorphic_call_context {\n \n /* Structure containing additional information about an indirect call.  */\n \n-struct GTY(()) cgraph_indirect_call_info\n+class GTY(()) cgraph_indirect_call_info\n {\n+public:\n   /* When agg_content is set, an offset where the call pointer is located\n      within the aggregate.  */\n   HOST_WIDE_INT offset;\n@@ -1673,8 +1675,10 @@ struct GTY(()) cgraph_indirect_call_info\n   unsigned vptr_changed : 1;\n };\n \n-struct GTY((chain_next (\"%h.next_caller\"), chain_prev (\"%h.prev_caller\"),\n-\t    for_user)) cgraph_edge {\n+class GTY((chain_next (\"%h.next_caller\"), chain_prev (\"%h.prev_caller\"),\n+\t   for_user)) cgraph_edge\n+{\n+public:\n   friend class cgraph_node;\n   friend class symbol_table;\n \n@@ -1856,8 +1860,8 @@ struct GTY((chain_next (\"%h.next_caller\"), chain_prev (\"%h.prev_caller\"),\n /* The varpool data structure.\n    Each static variable decl has assigned varpool_node.  */\n \n-class GTY((tag (\"SYMTAB_VARIABLE\"))) varpool_node : public symtab_node {\n-public:\n+struct GTY((tag (\"SYMTAB_VARIABLE\"))) varpool_node : public symtab_node\n+{\n   /* Dump given varpool node to F.  */\n   void dump (FILE *f);\n "}, {"sha": "a2fcdd4c644a5244b0a213c27a86722a3f1f1614", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -2417,8 +2417,9 @@ const wide_int_bitmask PTA_KNM = PTA_KNL | PTA_AVX5124VNNIW\n \n #include \"insn-attr-common.h\"\n \n-struct pta\n+class pta\n {\n+public:\n   const char *const name;\t\t/* processor name or nickname.  */\n   const enum processor_type processor;\n   const enum attr_cpu schedule;"}, {"sha": "2dd3893f8ac0accfc0fe3f1099ed39d52642fc96", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -1,3 +1,19 @@\n+2019-07-09  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/61339\n+\t* constexpr.c (cxx_eval_call_expression): Change class-key from class\n+\tto struct and vice versa to match convention and avoid -Wclass-is-pod\n+\tand -Wstruct-no-pod.\n+\t* constraint.cc (get_concept_definition): Same.\n+\t* cp-tree.h: Same.\n+\t* cxx-pretty-print.h: Same.\n+\t* error.c: Same.\n+\t* logic.cc (term_list::replace): Same.\n+\t* name-lookup.c (find_local_binding): Same.\n+\t* pt.c (tsubst_binary_right_fold): Same.\n+\t* search.c (field_accessor_p): Same.\n+\t* semantics.c (expand_or_defer_fn): Same.\n+\n 2019-07-08  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/91110"}, {"sha": "c1b8b9b8a5d635b55e03a535bc25a98cc6c8c920", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -1753,8 +1753,9 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n   /* We build up the bindings list before we know whether we already have this\n      call cached.  If we don't end up saving these bindings, ggc_free them when\n      this function exits.  */\n-  struct free_bindings\n+  class free_bindings\n   {\n+  public:\n     tree &bindings;\n     bool do_free;\n     free_bindings (tree &b): bindings (b), do_free(true) { }"}, {"sha": "cc578bb5b39b964a2ecc9322491b50827d074b6b", "filename": "gcc/cp/constraint.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fcp%2Fconstraint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fcp%2Fconstraint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstraint.cc?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -517,8 +517,9 @@ get_concept_definition (tree decl)\n \n int expansion_level = 0;\n \n-struct expanding_concept_sentinel\n+class expanding_concept_sentinel\n {\n+public:\n   expanding_concept_sentinel ()\n   {\n     ++expansion_level;"}, {"sha": "970296df010853772720c4f5cc0d5d32fdc7ffb6", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -873,8 +873,9 @@ struct named_decl_hash : ggc_remove <tree>\n \n /* Simplified unique_ptr clone to release a tree vec on exit.  */\n \n-struct releasing_vec\n+class releasing_vec\n {\n+public:\n   typedef vec<tree, va_gc> vec_t;\n \n   releasing_vec (vec_t *v): v(v) { }\n@@ -1728,8 +1729,9 @@ extern GTY(()) struct saved_scope *scope_chain;\n /* RAII sentinel to handle clearing processing_template_decl and restoring\n    it when done.  */\n \n-struct processing_template_decl_sentinel\n+class processing_template_decl_sentinel\n {\n+public:\n   int saved;\n   processing_template_decl_sentinel (bool reset = true)\n     : saved (processing_template_decl)\n@@ -1746,8 +1748,9 @@ struct processing_template_decl_sentinel\n /* RAII sentinel to disable certain warnings during template substitution\n    and elsewhere.  */\n \n-struct warning_sentinel\n+class warning_sentinel\n {\n+public:\n   int &flag;\n   int val;\n   warning_sentinel(int& flag, bool suppress=true)\n@@ -5267,17 +5270,19 @@ extern int cp_unevaluated_operand;\n /* RAII class used to inhibit the evaluation of operands during parsing\n    and template instantiation. Evaluation warnings are also inhibited. */\n \n-struct cp_unevaluated\n+class cp_unevaluated\n {\n+public:\n   cp_unevaluated ();\n   ~cp_unevaluated ();\n };\n \n /* The reverse: an RAII class used for nested contexts that are evaluated even\n    if the enclosing context is not.  */\n \n-struct cp_evaluated\n+class cp_evaluated\n {\n+public:\n   int uneval;\n   int inhibit;\n   cp_evaluated ()\n@@ -5304,8 +5309,9 @@ enum unification_kind_t {\n // specializations. When the stack goes out of scope, the\n // previous pointer map is restored.\n enum lss_policy { lss_blank, lss_copy };\n-struct local_specialization_stack\n+class local_specialization_stack\n {\n+public:\n   local_specialization_stack (lss_policy = lss_blank);\n   ~local_specialization_stack ();\n \n@@ -6973,8 +6979,9 @@ extern bool perform_or_defer_access_check\t(tree, tree, tree,\n /* RAII sentinel to ensures that deferred access checks are popped before\n   a function returns.  */\n \n-struct deferring_access_check_sentinel\n+class deferring_access_check_sentinel\n {\n+public:\n   deferring_access_check_sentinel (enum deferring_kind kind = dk_deferred)\n   {\n     push_deferring_access_checks (kind);"}, {"sha": "347811fe735d9384e1f339e61998c88c641a8eb5", "filename": "gcc/cp/cxx-pretty-print.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fcp%2Fcxx-pretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fcp%2Fcxx-pretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.h?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -29,8 +29,9 @@ enum cxx_pretty_printer_flags\n   pp_cxx_flag_default_argument = 1 << pp_c_flag_last_bit\n };\n \n-struct cxx_pretty_printer : c_pretty_printer\n+class cxx_pretty_printer : public c_pretty_printer\n {\n+public:\n   cxx_pretty_printer ();\n \n   void constant (tree);"}, {"sha": "5943762fd2d9e58e8df65b89452650655e293e4a", "filename": "gcc/cp/error.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -107,8 +107,9 @@ static bool cp_printer (pretty_printer *, text_info *, const char *,\n /* Struct for handling %H or %I, which require delaying printing the\n    type until a postprocessing stage.  */\n \n-struct deferred_printed_type\n+class deferred_printed_type\n {\n+public:\n   deferred_printed_type ()\n   : m_tree (NULL_TREE), m_buffer_ptr (NULL), m_verbose (false), m_quote (false)\n   {}"}, {"sha": "13cc321243677cdc8c07eeb8507c5e6261ecddbf", "filename": "gcc/cp/logic.cc", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fcp%2Flogic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fcp%2Flogic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flogic.cc?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -104,8 +104,9 @@ struct term_hasher : ggc_ptr_hash<term_entry>\n    Each term list maintains an iterator that refers to the current\n    term. This can be used by various tactics to support iteration\n    and stateful manipulation of the list. */\n-struct term_list\n+class term_list\n {\n+public:\n   typedef std::list<tree>::iterator iterator;\n \n   term_list ();\n@@ -220,8 +221,9 @@ term_list::replace (iterator iter, tree t1, tree t2)\n    conclusions written as propositions in the constraint\n    language (i.e., lists of trees). */\n \n-struct proof_goal\n+class proof_goal\n {\n+public:\n   term_list assumptions;\n   term_list conclusions;\n };\n@@ -230,8 +232,9 @@ struct proof_goal\n    current sub-goal. The class also provides facilities\n    for managing subgoals and constructing term lists. */\n \n-struct proof_state : std::list<proof_goal>\n+class proof_state : public std::list<proof_goal>\n {\n+public:\n   proof_state ();\n \n   iterator branch (iterator i);"}, {"sha": "ad866298fa5d44c65760663f5e7da2a553ec2c8e", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -157,7 +157,7 @@ find_local_binding (cp_binding_level *b, tree name)\n   return NULL;\n }\n \n-struct name_lookup\n+class name_lookup\n {\n public:\n   typedef std::pair<tree, tree> using_pair;"}, {"sha": "c0a048720019602b07870ef351ca3d57e41684bd", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -12032,8 +12032,9 @@ tsubst_binary_right_fold (tree t, tree args, tsubst_flags_t complain,\n /* Walk through the pattern of a pack expansion, adding everything in\n    local_specializations to a list.  */\n \n-struct el_data\n+class el_data\n {\n+public:\n   hash_set<tree> internal;\n   tree extra;\n   tsubst_flags_t complain;"}, {"sha": "a737e242b1ce66856f7b331cf76685c5c8b4c7d6", "filename": "gcc/cp/search.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -1803,8 +1803,9 @@ field_accessor_p (tree fn, tree field_decl, bool const_p)\n \n /* Callback data for dfs_locate_field_accessor_pre.  */\n \n-struct locate_field_data\n+class locate_field_data\n {\n+public:\n   locate_field_data (tree field_decl_, bool const_p_)\n   : field_decl (field_decl_), const_p (const_p_) {}\n "}, {"sha": "ceb6c6417506bd314bc7a4305bbe118ab033c80a", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -4380,8 +4380,9 @@ expand_or_defer_fn (tree fn)\n     }\n }\n \n-struct nrv_data\n+class nrv_data\n {\n+public:\n   nrv_data () : visited (37) {}\n \n   tree var;"}, {"sha": "62b2cf6162f6114714320cf2901b556c92582450", "filename": "gcc/df-problems.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fdf-problems.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fdf-problems.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-problems.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -144,8 +144,9 @@ df_print_bb_index (basic_block bb, FILE *file)\n \n /* Private data used to compute the solution for this problem.  These\n    data structures are not accessible outside of this module.  */\n-struct df_rd_problem_data\n+class df_rd_problem_data\n {\n+public:\n   /* The set of defs to regs invalidated by call.  */\n   bitmap_head sparse_invalidated_by_call;\n   /* The set of defs to regs invalidate by call for rd.  */"}, {"sha": "ffaca0b66fd739188025994637a0bc3e4a1d58ee", "filename": "gcc/df-scan.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fdf-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fdf-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-scan.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -44,8 +44,9 @@ static HARD_REG_SET elim_reg_set;\n /* Initialize ur_in and ur_out as if all hard registers were partially\n    available.  */\n \n-struct df_collection_rec\n+class df_collection_rec\n {\n+public:\n   auto_vec<df_ref, 128> def_vec;\n   auto_vec<df_ref, 32> use_vec;\n   auto_vec<df_ref, 32> eq_use_vec;"}, {"sha": "13358f9ad3c15a7dd9cc864447baed9dde3b1ce5", "filename": "gcc/df.h", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fdf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fdf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf.h?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -524,8 +524,9 @@ struct df_reg_info\n    used by owners of the problem.\n ----------------------------------------------------------------------------*/\n \n-struct df_d\n+class df_d\n {\n+public:\n \n   /* The set of problems to be solved is stored in two arrays.  In\n      PROBLEMS_IN_ORDER, the problems are stored in the order that they\n@@ -830,8 +831,9 @@ struct df_scan_bb_info\n    the ref except sparse_kill which is indexed by regno.  For the\n    LR&RD problem, the kill set is not complete: It does not contain\n    DEFs killed because the set register has died in the LR set.  */\n-struct df_rd_bb_info\n+class df_rd_bb_info\n {\n+public:\n   /* Local sets to describe the basic blocks.   */\n   bitmap_head kill;\n   bitmap_head sparse_kill;\n@@ -846,8 +848,9 @@ struct df_rd_bb_info\n /* Multiple reaching definitions.  All bitmaps are referenced by the\n    register number.  */\n \n-struct df_md_bb_info\n+class df_md_bb_info\n {\n+public:\n   /* Local sets to describe the basic blocks.  */\n   bitmap_head gen;    /* Partial/conditional definitions live at BB out.  */\n   bitmap_head kill;   /* Other definitions that are live at BB out.  */\n@@ -862,8 +865,9 @@ struct df_md_bb_info\n /* Live registers, a backwards dataflow problem.  All bitmaps are\n    referenced by the register number.  */\n \n-struct df_lr_bb_info\n+class df_lr_bb_info\n {\n+public:\n   /* Local sets to describe the basic blocks.  */\n   bitmap_head def;   /* The set of registers set in this block\n                         - except artificial defs at the top.  */\n@@ -879,8 +883,9 @@ struct df_lr_bb_info\n    register number.  Anded results of the forwards and backward live\n    info.  Note that the forwards live information is not available\n    separately.  */\n-struct df_live_bb_info\n+class df_live_bb_info\n {\n+public:\n   /* Local sets to describe the basic blocks.  */\n   bitmap_head kill;  /* The set of registers unset in this block.  Calls,\n \t\t        for instance, unset registers.  */\n@@ -897,8 +902,9 @@ struct df_live_bb_info\n    pseudo.  Only pseudos that have a size of 2 * UNITS_PER_WORD are\n    meaningfully tracked.  */\n \n-struct df_word_lr_bb_info\n+class df_word_lr_bb_info\n {\n+public:\n   /* Local sets to describe the basic blocks.  */\n   bitmap_head def;   /* The set of registers set in this block\n                         - except artificial defs at the top.  */\n@@ -911,8 +917,9 @@ struct df_word_lr_bb_info\n \n /* Must-initialized registers.  All bitmaps are referenced by the\n    register number.  */\n-struct df_mir_bb_info\n+class df_mir_bb_info\n {\n+public:\n   /* Local sets to describe the basic blocks.  */\n   bitmap_head kill;  /* The set of registers unset in this block.  Calls,\n \t\t        for instance, unset registers.  */\n@@ -1222,7 +1229,7 @@ df_single_use (const df_insn_info *info)\n \n /* web */\n \n-class web_entry_base\n+struct web_entry_base\n {\n  private:\n   /* Reference to the parent in the union/find tree.  */"}, {"sha": "4d563dda8f420d22e97836a95be6b3709d0e90dc", "filename": "gcc/diagnostic-show-locus.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fdiagnostic-show-locus.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fdiagnostic-show-locus.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-show-locus.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -164,8 +164,9 @@ struct line_bounds\n    splits the pertinent source lines into a list of disjoint line_span\n    instances (e.g. lines 5-10, lines 15-20, line 23).  */\n \n-struct line_span\n+class line_span\n {\n+public:\n   line_span (linenum_type first_line, linenum_type last_line)\n     : m_first_line (first_line), m_last_line (last_line)\n   {\n@@ -1409,8 +1410,9 @@ layout::print_annotation_line (linenum_type row, const line_bounds lbounds)\n \n    A label within the given row of source.  */\n \n-struct line_label\n+class line_label\n {\n+public:\n   line_label (int state_idx, int column, label_text text)\n   : m_state_idx (state_idx), m_column (column),\n     m_text (text), m_length (strlen (text.m_buffer)),\n@@ -1723,8 +1725,9 @@ layout::annotation_line_showed_range_p (linenum_type line, int start_column,\n \n /* A range of columns within a line.  */\n \n-struct column_range\n+class column_range\n {\n+public:\n   column_range (int start_, int finish_) : start (start_), finish (finish_)\n   {\n     /* We must have either a range, or an insertion.  */\n@@ -1776,8 +1779,9 @@ get_printed_columns (const fixit_hint *hint)\n    instances that affected the line, potentially consolidating hints\n    into corrections to make the result easier for the user to read.  */\n \n-struct correction\n+class correction\n {\n+public:\n   correction (column_range affected_columns,\n \t      column_range printed_columns,\n \t      const char *new_text, size_t new_text_len)\n@@ -1854,8 +1858,9 @@ correction::ensure_terminated ()\n    This is used by layout::print_trailing_fixits for planning\n    how to print the fix-it hints affecting the line.  */\n \n-struct line_corrections\n+class line_corrections\n {\n+public:\n   line_corrections (const char *filename, linenum_type row)\n   : m_filename (filename), m_row (row)\n   {}\n@@ -1881,8 +1886,9 @@ line_corrections::~line_corrections ()\n /* A struct wrapping a particular source line, allowing\n    run-time bounds-checking of accesses in a checked build.  */\n \n-struct source_line\n+class source_line\n {\n+public:\n   source_line (const char *filename, int line);\n \n   char_span as_span () { return char_span (chars, width); }"}, {"sha": "f4dbc111c3f29fa56320d914ea9cd2e08d340f1d", "filename": "gcc/dojump.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fdojump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fdojump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdojump.h?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -37,8 +37,9 @@ extern void do_pending_stack_adjust (void);\n /* Struct for saving/restoring of pending_stack_adjust/stack_pointer_delta\n    values.  */\n \n-struct saved_pending_stack_adjust\n+class saved_pending_stack_adjust\n {\n+public:\n   /* Saved value of pending_stack_adjust.  */\n   poly_int64 x_pending_stack_adjust;\n "}, {"sha": "a3cefbf527fa9e87089ed068185d5a0edd915717", "filename": "gcc/dse.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fdse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fdse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdse.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -220,8 +220,9 @@ static bitmap scratch = NULL;\n struct insn_info_type;\n \n /* This structure holds information about a candidate store.  */\n-struct store_info\n+class store_info\n {\n+public:\n \n   /* False means this is a clobber.  */\n   bool is_set;\n@@ -309,8 +310,9 @@ static object_allocator<store_info> rtx_store_info_pool (\"rtx_store_info_pool\");\n \n /* This structure holds information about a load.  These are only\n    built for rtx bases.  */\n-struct read_info_type\n+class read_info_type\n {\n+public:\n   /* The id of the mem group of the base address.  */\n   int group_id;\n "}, {"sha": "bb856c64dafe1c9a1cd2c7b319c653ef75cd6756", "filename": "gcc/dump-context.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fdump-context.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fdump-context.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdump-context.h?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -166,8 +166,9 @@ class dump_pretty_printer : public pretty_printer\n private:\n   /* Information on an optinfo_item that was generated during phase 2 of\n      formatting.  */\n-  struct stashed_item\n+  class stashed_item\n   {\n+  public:\n     stashed_item (const char **buffer_ptr_, optinfo_item *item_)\n       : buffer_ptr (buffer_ptr_), item (item_) {}\n     const char **buffer_ptr;"}, {"sha": "8614483f36d087f3c0cbd568636e975655eaeed7", "filename": "gcc/dumpfile.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fdumpfile.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fdumpfile.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdumpfile.h?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -367,8 +367,9 @@ class dump_user_location_t\n /* A class for identifying where in the compiler's own source\n    (or a plugin) that a dump message is being emitted from.  */\n \n-struct dump_impl_location_t\n+class dump_impl_location_t\n {\n+public:\n   dump_impl_location_t (\n #if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)\n \t\t\tconst char *file = __builtin_FILE (),"}, {"sha": "0449c2b2912685339eb4cd95320a4ea2ff14d0b5", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -3104,7 +3104,8 @@ die_node;\n /* Set to TRUE while dwarf2out_early_global_decl is running.  */\n static bool early_dwarf;\n static bool early_dwarf_finished;\n-struct set_early_dwarf {\n+class set_early_dwarf {\n+public:\n   bool saved;\n   set_early_dwarf () : saved(early_dwarf)\n     {"}, {"sha": "4cd26c95e213fd75b063ca7a2a2d936a5d146033", "filename": "gcc/edit-context.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fedit-context.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fedit-context.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fedit-context.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -48,8 +48,9 @@ class line_event;\n \n /* A struct to hold the params of a print_diff call.  */\n \n-struct diff\n+class diff\n {\n+public:\n   diff (pretty_printer *pp, bool show_filenames)\n   : m_pp (pp), m_show_filenames (show_filenames) {}\n "}, {"sha": "bddd047769426a1ee8faf955574ab6aa7aaba4fd", "filename": "gcc/fibonacci_heap.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Ffibonacci_heap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Ffibonacci_heap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffibonacci_heap.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -219,8 +219,9 @@ test_union_of_equal_heaps ()\n \n /* Dummy struct for testing.  */\n \n-struct heap_key\n+class heap_key\n {\n+public:\n   heap_key (int k): key (k)\n   {\n   }"}, {"sha": "0cc7df2666c49c69e378b2d6068d386ba6028aaf", "filename": "gcc/flags.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -42,8 +42,9 @@ extern bool final_insns_dump_p;\n \f\n /* Other basic status info about current function.  */\n \n-struct target_flag_state\n+class target_flag_state\n {\n+public:\n   /* Each falign-foo can generate up to two levels of alignment:\n      -falign-foo=N:M[:N2:M2] */\n   align_flags x_align_loops;"}, {"sha": "b44c4d0ee339cb270582b8913e00d248e628bed6", "filename": "gcc/function.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -556,7 +556,8 @@ assign_stack_local (machine_mode mode, poly_int64 size, int align)\n    result, all temporaries are preserved.  A temporary is preserved by\n    pretending it was allocated at the previous nesting level.  */\n \n-struct GTY(()) temp_slot {\n+class GTY(()) temp_slot {\n+public:\n   /* Points to next temporary slot.  */\n   struct temp_slot *next;\n   /* Points to previous temporary slot.  */"}, {"sha": "c2596bf48d58a4d4b185af7e2bd36d5574da6b33", "filename": "gcc/function.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -183,16 +183,18 @@ struct GTY(()) function_subsections {\n /* Describe an empty area of space in the stack frame.  These can be chained\n    into a list; this is used to keep track of space wasted for alignment\n    reasons.  */\n-struct GTY(()) frame_space\n+class GTY(()) frame_space\n {\n+public:\n   struct frame_space *next;\n \n   poly_int64 start;\n   poly_int64 length;\n };\n \n-struct GTY(()) stack_usage\n+class GTY(()) stack_usage\n {\n+public:\n   /* # of bytes of static stack space allocated by the function.  */\n   HOST_WIDE_INT static_stack_size;\n "}, {"sha": "a4323eb146edfd07a3c9817e65e84bcc4168a222", "filename": "gcc/gcc.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -57,7 +57,7 @@ compilation is specified by a string called a \"spec\".  */\n      getenv ();\n    Hence we need to use \"get\" for the accessor method, not \"getenv\".  */\n \n-class env_manager\n+struct env_manager\n {\n  public:\n   void init (bool can_restore, bool debug);\n@@ -8579,7 +8579,7 @@ static int n_mdswitches;\n /* Check whether a particular argument was used.  The first time we\n    canonicalize the switches to keep only the ones we care about.  */\n \n-class used_arg_t\n+struct used_arg_t\n {\n  public:\n   int operator () (const char *p, int len);"}, {"sha": "1d9d3b25b5d01f2d571233d9bb5dcc3d6879c5d9", "filename": "gcc/gcov.c", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -121,8 +121,9 @@ struct arc_info\n /* Describes which locations (lines and files) are associated with\n    a basic block.  */\n \n-struct block_location_info\n+class block_location_info\n {\n+public:\n   block_location_info (unsigned _source_file_idx):\n     source_file_idx (_source_file_idx)\n   {}\n@@ -134,8 +135,9 @@ struct block_location_info\n /* Describes a basic block. Contains lists of arcs to successor and\n    predecessor blocks.  */\n \n-struct block_info\n+class block_info\n {\n+public:\n   /* Constructor.  */\n   block_info ();\n \n@@ -191,8 +193,9 @@ block_info::block_info (): succ (NULL), pred (NULL), num_succ (0), num_pred (0),\n /* Describes a single line of source.  Contains a chain of basic blocks\n    with code on it.  */\n \n-struct line_info\n+class line_info\n {\n+public:\n   /* Default constructor.  */\n   line_info ();\n \n@@ -230,8 +233,9 @@ static int flag_demangled_names = 0;\n \n /* Describes a single function. Contains an array of basic blocks.  */\n \n-struct function_info\n+class function_info\n {\n+public:\n   function_info ();\n   ~function_info ();\n \n@@ -356,8 +360,9 @@ struct coverage_info\n /* Describes a file mentioned in the block graph.  Contains an array\n    of line info.  */\n \n-struct source_info\n+class source_info\n {\n+public:\n   /* Default constructor.  */\n   source_info ();\n "}, {"sha": "604526d68088cefe9e3b43a69712cfd4d48d1905", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -133,8 +133,9 @@ static struct obstack *temp_obstack = &obstack2;\n    `struct insn_def'.  This is done to allow attribute definitions to occur\n    anywhere in the file.  */\n \n-struct insn_def\n+class insn_def\n {\n+public:\n   struct insn_def *next;\t/* Next insn in chain.  */\n   rtx def;\t\t\t/* The DEFINE_...  */\n   int insn_code;\t\t/* Instruction number.  */\n@@ -169,8 +170,9 @@ struct attr_value\n \n /* Structure for each attribute.  */\n \n-struct attr_desc\n+class attr_desc\n {\n+public:\n   char *name;\t\t\t/* Name of attribute.  */\n   const char *enum_name;\t/* Enum name for DEFINE_ENUM_NAME.  */\n   struct attr_desc *next;\t/* Next attribute.  */\n@@ -184,8 +186,9 @@ struct attr_desc\n \n /* Structure for each DEFINE_DELAY.  */\n \n-struct delay_desc\n+class delay_desc\n {\n+public:\n   rtx def;\t\t\t/* DEFINE_DELAY expression.  */\n   struct delay_desc *next;\t/* Next DEFINE_DELAY.  */\n   file_location loc;\t\t/* Where in the .md files it occurs.  */"}, {"sha": "66886f6fc91ea5354aaa2fc7f872c70bddcd1e9b", "filename": "gcc/genextract.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fgenextract.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fgenextract.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenextract.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -68,8 +68,9 @@ static struct code_ptr *peepholes;\n    data that will be used to produce an extractions structure.  */\n \n \n-struct accum_extract\n+class accum_extract\n {\n+public:\n   accum_extract () : oplocs (10), duplocs (10), dupnums (10), pathstr (20) {}\n \n   auto_vec<locstr> oplocs;"}, {"sha": "7403ccb7482a6a6071d12afe16bb7c57fb0db1fb", "filename": "gcc/genmatch.c", "status": "modified", "additions": 38, "deletions": 19, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fgenmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fgenmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmatch.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -347,8 +347,9 @@ comparison_code_p (enum tree_code code)\n \n /* Base class for all identifiers the parser knows.  */\n \n-struct id_base : nofree_ptr_hash<id_base>\n+class id_base : public nofree_ptr_hash<id_base>\n {\n+public:\n   enum id_kind { CODE, FN, PREDICATE, USER, NULL_ID } kind;\n \n   id_base (id_kind, const char *, int = -1);\n@@ -393,8 +394,9 @@ id_base::id_base (id_kind kind_, const char *id_, int nargs_)\n \n /* Identifier that maps to a tree code.  */\n \n-struct operator_id : public id_base\n+class operator_id : public id_base\n {\n+public:\n   operator_id (enum tree_code code_, const char *id_, unsigned nargs_,\n \t       const char *tcc_)\n       : id_base (id_base::CODE, id_, nargs_), code (code_), tcc (tcc_) {}\n@@ -404,8 +406,9 @@ struct operator_id : public id_base\n \n /* Identifier that maps to a builtin or internal function code.  */\n \n-struct fn_id : public id_base\n+class fn_id : public id_base\n {\n+public:\n   fn_id (enum built_in_function fn_, const char *id_)\n       : id_base (id_base::FN, id_), fn (fn_) {}\n   fn_id (enum internal_fn fn_, const char *id_)\n@@ -417,17 +420,19 @@ struct simplify;\n \n /* Identifier that maps to a user-defined predicate.  */\n \n-struct predicate_id : public id_base\n+class predicate_id : public id_base\n {\n+public:\n   predicate_id (const char *id_)\n     : id_base (id_base::PREDICATE, id_), matchers (vNULL) {}\n   vec<simplify *> matchers;\n };\n \n /* Identifier that maps to a operator defined by a 'for' directive.  */\n \n-struct user_id : public id_base\n+class user_id : public id_base\n {\n+public:\n   user_id (const char *id_, bool is_oper_list_ = false)\n     : id_base (id_base::USER, id_), substitutes (vNULL),\n       used (false), is_oper_list (is_oper_list_) {}\n@@ -665,7 +670,8 @@ struct capture_info;\n \n /* The base class for operands.  */\n \n-struct operand {\n+class operand {\n+public:\n   enum op_type { OP_PREDICATE, OP_EXPR, OP_CAPTURE, OP_C_EXPR, OP_IF, OP_WITH };\n   operand (enum op_type type_, location_t loc_)\n     : type (type_), location (loc_) {}\n@@ -680,8 +686,9 @@ struct operand {\n \n /* A predicate operand.  Predicates are leafs in the AST.  */\n \n-struct predicate : public operand\n+class predicate : public operand\n {\n+public:\n   predicate (predicate_id *p_, location_t loc)\n     : operand (OP_PREDICATE, loc), p (p_) {}\n   predicate_id *p;\n@@ -690,8 +697,9 @@ struct predicate : public operand\n /* An operand that constitutes an expression.  Expressions include\n    function calls and user-defined predicate invocations.  */\n \n-struct expr : public operand\n+class expr : public operand\n {\n+public:\n   expr (id_base *operation_, location_t loc, bool is_commutative_ = false)\n     : operand (OP_EXPR, loc), operation (operation_),\n       ops (vNULL), expr_type (NULL), is_commutative (is_commutative_),\n@@ -723,11 +731,13 @@ struct expr : public operand\n    a leaf operand in the AST.  This class is also used to represent\n    the code to be generated for 'if' and 'with' expressions.  */\n \n-struct c_expr : public operand\n+class c_expr : public operand\n {\n+public:\n   /* A mapping of an identifier and its replacement.  Used to apply\n      'for' lowering.  */\n-  struct id_tab {\n+  class id_tab {\n+  public:\n     const char *id;\n     const char *oper;\n     id_tab (const char *id_, const char *oper_): id (id_), oper (oper_) {}\n@@ -753,8 +763,9 @@ struct c_expr : public operand\n \n /* A wrapper around another operand that captures its value.  */\n \n-struct capture : public operand\n+class capture : public operand\n {\n+public:\n   capture (location_t loc, unsigned where_, operand *what_, bool value_)\n       : operand (OP_CAPTURE, loc), where (where_), value_match (value_),\n         what (what_) {}\n@@ -773,8 +784,9 @@ struct capture : public operand\n \n /* if expression.  */\n \n-struct if_expr : public operand\n+class if_expr : public operand\n {\n+public:\n   if_expr (location_t loc)\n     : operand (OP_IF, loc), cond (NULL), trueexpr (NULL), falseexpr (NULL) {}\n   c_expr *cond;\n@@ -784,8 +796,9 @@ struct if_expr : public operand\n \n /* with expression.  */\n \n-struct with_expr : public operand\n+class with_expr : public operand\n {\n+public:\n   with_expr (location_t loc)\n     : operand (OP_WITH, loc), with (NULL), subexpr (NULL) {}\n   c_expr *with;\n@@ -845,8 +858,9 @@ is_a_helper <with_expr *>::test (operand *op)\n    duplicates all outer 'if' and 'for' expressions here so each\n    simplify can exist in isolation.  */\n \n-struct simplify\n+class simplify\n {\n+public:\n   enum simplify_kind { SIMPLIFY, MATCH };\n \n   simplify (simplify_kind kind_, unsigned id_, operand *match_,\n@@ -1598,8 +1612,9 @@ static unsigned current_id;\n \n /* Decision tree base class, used for DT_NODE.  */\n \n-struct dt_node\n+class dt_node\n {\n+public:\n   enum dt_type { DT_NODE, DT_OPERAND, DT_TRUE, DT_MATCH, DT_SIMPLIFY };\n \n   enum dt_type type;\n@@ -1634,8 +1649,9 @@ struct dt_node\n \n /* Generic decision tree node used for DT_OPERAND, DT_MATCH and DT_TRUE.  */\n \n-struct dt_operand : public dt_node\n+class dt_operand : public dt_node\n {\n+public:\n   operand *op;\n   dt_operand *match_dop;\n   unsigned pos;\n@@ -1660,8 +1676,9 @@ struct dt_operand : public dt_node\n \n /* Leaf node of the decision tree, used for DT_SIMPLIFY.  */\n \n-struct dt_simplify : public dt_node\n+class dt_simplify : public dt_node\n {\n+public:\n   simplify *s;\n   unsigned pattern_no;\n   dt_operand **indexes;\n@@ -1697,8 +1714,9 @@ is_a_helper <dt_simplify *>::test (dt_node *n)\n \n /* A container for the actual decision tree.  */\n \n-struct decision_tree\n+class decision_tree\n {\n+public:\n   dt_node *root;\n \n   void insert (struct simplify *, unsigned);\n@@ -2070,8 +2088,9 @@ decision_tree::print (FILE *f)\n    on the outermost match expression operands for cases we cannot\n    handle.  */\n \n-struct capture_info\n+class capture_info\n {\n+public:\n   capture_info (simplify *s, operand *, bool);\n   void walk_match (operand *o, unsigned toplevel_arg, bool, bool);\n   bool walk_result (operand *o, bool, operand *);"}, {"sha": "ab4c46a51f14f0708a4e7f5aa998895609fa3011", "filename": "gcc/genoutput.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fgenoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fgenoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenoutput.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -143,8 +143,9 @@ static struct operand_data **odata_end = &null_operand.next;\n /* Record in this chain all information that we will output,\n    associated with the code number of the insn.  */\n \n-struct data\n+class data\n {\n+public:\n   struct data *next;\n   const char *name;\n   const char *template_code;\n@@ -179,8 +180,9 @@ static void process_template (struct data *, const char *);\n static void validate_insn_alternatives (struct data *);\n static void validate_insn_operands (struct data *);\n \n-struct constraint_data\n+class constraint_data\n {\n+public:\n   struct constraint_data *next_this_letter;\n   file_location loc;\n   unsigned int namelen;"}, {"sha": "293930c695d500479f68010f88ae10dfad7393a0", "filename": "gcc/genpreds.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fgenpreds.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fgenpreds.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenpreds.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -666,8 +666,9 @@ write_one_predicate_function (struct pred_data *p)\n    verify that there are no duplicate names.  */\n \n /* All data from one constraint definition.  */\n-struct constraint_data\n+class constraint_data\n {\n+public:\n   struct constraint_data *next_this_letter;\n   struct constraint_data *next_textual;\n   const char *name;"}, {"sha": "a3b8e683c6310b6516ac4e7df0c6bbea52954df9", "filename": "gcc/genrecog.c", "status": "modified", "additions": 36, "deletions": 18, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -818,11 +818,13 @@ validate_pattern (rtx pattern, md_rtx_info *info, rtx set, int set_code)\n    to \"T *prev, *next;\" and a function \"void set_parent (list_head <T> *)\"\n    to set the parent list.  */\n template <typename T>\n-struct list_head\n+class list_head\n {\n+public:\n   /* A range of linked items.  */\n-  struct range\n+  class range\n   {\n+  public:\n     range (T *);\n     range (T *, T *);\n \n@@ -1008,8 +1010,9 @@ operator != (const acceptance_type &a, const acceptance_type &b)\n }\n \n /* Represents a parameter to a pattern routine.  */\n-struct parameter\n+class parameter\n {\n+public:\n   /* The C type of parameter.  */\n   enum type_enum {\n     /* Represents an invalid parameter.  */\n@@ -1069,8 +1072,9 @@ operator != (const parameter &param1, const parameter &param2)\n    an ad-hoc enum value on success and -1 on failure.  The routine can\n    be used by any subroutine type.  The match can be parameterized by\n    things like mode, code and UNSPEC number.  */\n-struct pattern_routine\n+class pattern_routine\n {\n+public:\n   /* The state that implements the pattern.  */\n   state *s;\n \n@@ -1096,8 +1100,9 @@ struct pattern_routine\n static vec <pattern_routine *> patterns;\n \n /* Represents one use of a pattern routine.  */\n-struct pattern_use\n+class pattern_use\n {\n+public:\n   /* The pattern routine to use.  */\n   pattern_routine *routine;\n \n@@ -1107,8 +1112,9 @@ struct pattern_use\n };\n \n /* Represents a test performed by a decision.  */\n-struct rtx_test\n+class rtx_test\n {\n+public:\n   rtx_test ();\n \n   /* The types of test that can be performed.  Most of them take as input\n@@ -1427,8 +1433,9 @@ operator != (const rtx_test &a, const rtx_test &b)\n \n /* A simple set of transition labels.  Most transitions have a singleton\n    label, so try to make that case as efficient as possible.  */\n-struct int_set : public auto_vec <uint64_t, 1>\n+class int_set : public auto_vec <uint64_t, 1>\n {\n+public:\n   typedef uint64_t *iterator;\n \n   int_set ();\n@@ -1496,8 +1503,9 @@ struct decision;\n \n /* Represents a transition between states, dependent on the result of\n    a test T.  */\n-struct transition\n+class transition\n {\n+public:\n   transition (const int_set &, state *, bool);\n \n   void set_parent (list_head <transition> *);\n@@ -1536,8 +1544,9 @@ struct transition\n    to the transition's target state.  If no suitable transition exists,\n    the machine either falls through to the next decision or, if there are no\n    more decisions to try, fails the match.  */\n-struct decision : list_head <transition>\n+class decision : public list_head <transition>\n {\n+public:\n   decision (const rtx_test &);\n \n   void set_parent (list_head <decision> *s);\n@@ -1556,8 +1565,9 @@ struct decision : list_head <transition>\n /* Represents one machine state.  For each state the machine tries a list\n    of decisions, in order, and acts on the first match.  It fails without\n    further backtracking if no decisions match.  */\n-struct state : list_head <decision>\n+class state : public list_head <decision>\n {\n+public:\n   void set_parent (list_head <state> *) {}\n };\n \n@@ -1767,8 +1777,9 @@ const unsigned char TESTED_CODE = 1;\n const unsigned char TESTED_VECLEN = 2;\n \n /* Represents a set of conditions that are known to hold.  */\n-struct known_conditions\n+class known_conditions\n {\n+public:\n   /* A mask of TESTED_ values for each position, indexed by the position's\n      id field.  */\n   auto_vec <unsigned char> position_tests;\n@@ -2095,8 +2106,9 @@ find_operand_positions (state *s, vec <int> &operand_pos)\n }\n \n /* Statistics about a matching routine.  */\n-struct stats\n+class stats\n {\n+public:\n   stats ();\n \n   /* The total number of decisions in the routine, excluding trivial\n@@ -2235,8 +2247,9 @@ optimize_subroutine_group (const char *type, state *root)\n struct merge_pattern_info;\n \n /* Represents a transition from one pattern to another.  */\n-struct merge_pattern_transition\n+class merge_pattern_transition\n {\n+public:\n   merge_pattern_transition (merge_pattern_info *);\n \n   /* The target pattern.  */\n@@ -2256,8 +2269,9 @@ merge_pattern_transition::merge_pattern_transition (merge_pattern_info *to_in)\n /* Represents a pattern that can might match several states.  The pattern\n    may replace parts of the test with a parameter value.  It may also\n    replace transition labels with parameters.  */\n-struct merge_pattern_info\n+class merge_pattern_info\n {\n+public:\n   merge_pattern_info (unsigned int);\n \n   /* If PARAM_TEST_P, the state's singleton test should be generalized\n@@ -2329,8 +2343,9 @@ merge_pattern_info::merge_pattern_info (unsigned int num_transitions)\n \n /* Describes one way of matching a particular state to a particular\n    pattern.  */\n-struct merge_state_result\n+class merge_state_result\n {\n+public:\n   merge_state_result (merge_pattern_info *, position *, merge_state_result *);\n \n   /* A pattern that matches the state.  */\n@@ -2360,8 +2375,9 @@ merge_state_result::merge_state_result (merge_pattern_info *pattern_in,\n \n /* Information about a state, used while trying to match it against\n    a pattern.  */\n-struct merge_state_info\n+class merge_state_info\n {\n+public:\n   merge_state_info (state *);\n \n   /* The state itself.  */\n@@ -3860,7 +3876,8 @@ merge_into_state (state *s1, state *s2)\n \n /* Pairs a pattern that needs to be matched with the rtx position at\n    which the pattern should occur.  */\n-struct pattern_pos {\n+class pattern_pos {\n+public:\n   pattern_pos () {}\n   pattern_pos (rtx, position *);\n \n@@ -4384,8 +4401,9 @@ enum exit_state {\n \n /* Information used while writing out code.  */\n \n-struct output_state\n+class output_state\n {\n+public:\n   /* The type of routine that we're generating.  */\n   routine_type type;\n "}, {"sha": "07aa8391f281d5d9feefd07748796970c2c98f35", "filename": "gcc/gensupport.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fgensupport.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fgensupport.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -65,8 +65,9 @@ static htab_t condition_table;\n    define_cond_exec and define_subst patterns, then return\n    them one at a time.  */\n \n-struct queue_elem\n+class queue_elem\n {\n+public:\n   rtx data;\n   file_location loc;\n   struct queue_elem *next;"}, {"sha": "10a5c7a9073fe92fe48ee8625a7cfdfee0ab507a", "filename": "gcc/gensupport.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fgensupport.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fgensupport.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.h?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -26,7 +26,8 @@ struct obstack;\n extern struct obstack *rtl_obstack;\n \n /* Information about an .md define_* rtx.  */\n-struct md_rtx_info {\n+class md_rtx_info {\n+public:\n   /* The rtx itself.  */\n   rtx def;\n "}, {"sha": "0968d9769faeb31c622bccc39ad66b1b0408fb8b", "filename": "gcc/ggc-common.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fggc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fggc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-common.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -818,8 +818,9 @@ init_ggc_heuristics (void)\n }\n \n /* GGC memory usage.  */\n-struct ggc_usage: public mem_usage\n+class ggc_usage: public mem_usage\n {\n+public:\n   /* Default constructor.  */\n   ggc_usage (): m_freed (0), m_collected (0), m_overhead (0) {}\n   /* Constructor.  */"}, {"sha": "1ea5e4cfc10685def6f4de1bfffdc33f912caf40", "filename": "gcc/ggc-tests.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fggc-tests.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fggc-tests.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-tests.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -176,8 +176,9 @@ test_union ()\n \n /* Verify that destructors get run when instances are collected.  */\n \n-struct GTY(()) test_struct_with_dtor\n+class GTY(()) test_struct_with_dtor\n {\n+public:\n   /* This struct has a destructor; it *ought* to be called\n      by the ggc machinery when instances are collected.  */\n   ~test_struct_with_dtor () { dtor_call_count++; }"}, {"sha": "1324489e85a13ed492b012acbdb027ef4daf3d2b", "filename": "gcc/gimple-loop-interchange.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fgimple-loop-interchange.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fgimple-loop-interchange.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-loop-interchange.cc?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -172,8 +172,9 @@ dump_induction (struct loop *loop, induction_p iv)\n \n /* Loop candidate for interchange.  */\n \n-struct loop_cand\n+class loop_cand\n {\n+public:\n   loop_cand (struct loop *, struct loop *);\n   ~loop_cand ();\n "}, {"sha": "468f5860d69e0d7dda4c49b8a1f26d5d531e65d5", "filename": "gcc/gimple-loop-versioning.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fgimple-loop-versioning.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fgimple-loop-versioning.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-loop-versioning.cc?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -179,8 +179,9 @@ struct address_term_info\n \n /* Information about an address calculation, and the range of constant\n    offsets applied to it.  */\n-struct address_info\n+class address_info\n {\n+public:\n   static const unsigned int MAX_TERMS = 8;\n \n   /* One statement that calculates the address.  If multiple statements\n@@ -210,8 +211,9 @@ struct address_info_hasher : nofree_ptr_hash <address_info>\n };\n \n /* Information about the versioning we'd like to apply to a loop.  */\n-struct loop_info\n+class loop_info\n {\n+public:\n   bool worth_versioning_p () const;\n \n   /* True if we've decided not to version this loop.  The remaining"}, {"sha": "ea0f66f06b10092c996d269d66bd087e74995779", "filename": "gcc/gimple-match.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fgimple-match.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fgimple-match.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-match.h?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -43,8 +43,9 @@ class code_helper\n /* Represents the condition under which an operation should happen,\n    and the value to use otherwise.  The condition applies elementwise\n    (as for VEC_COND_EXPR) if the values are vectors.  */\n-struct gimple_match_cond\n+class gimple_match_cond\n {\n+public:\n   enum uncond { UNCOND };\n \n   /* Build an unconditional op.  */\n@@ -79,8 +80,9 @@ gimple_match_cond::any_else () const\n \n /* Represents an operation to be simplified, or the result of the\n    simplification.  */\n-struct gimple_match_op\n+class gimple_match_op\n {\n+public:\n   gimple_match_op ();\n   gimple_match_op (const gimple_match_cond &, code_helper, tree, unsigned int);\n   gimple_match_op (const gimple_match_cond &,"}, {"sha": "0aeac4e1c4c91a14f14cdfed6b99dd5e294596fd", "filename": "gcc/gimple-ssa-backprop.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fgimple-ssa-backprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fgimple-ssa-backprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-backprop.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -107,8 +107,9 @@ along with GCC; see the file COPYING3.  If not see\n namespace {\n \n /* Information about a group of uses of an SSA name.  */\n-struct usage_info\n+class usage_info\n {\n+public:\n   usage_info () : flag_word (0) {}\n   usage_info &operator &= (const usage_info &);\n   usage_info operator & (const usage_info &) const;"}, {"sha": "6ba3d86f211ec4000be769b8d52031bca564f21c", "filename": "gcc/gimple-ssa-sprintf.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fgimple-ssa-sprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fgimple-ssa-sprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-sprintf.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -520,8 +520,9 @@ enum format_lengths\n /* Description of the result of conversion either of a single directive\n    or the whole format string.  */\n \n-struct fmtresult\n+class fmtresult\n {\n+public:\n   /* Construct a FMTRESULT object with all counters initialized\n      to MIN.  KNOWNRANGE is set when MIN is valid.  */\n   fmtresult (unsigned HOST_WIDE_INT min = HOST_WIDE_INT_MAX)"}, {"sha": "1f50e3af03e33bf38ffbb0c3f429fbf44a812609", "filename": "gcc/gimple-ssa-store-merging.c", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fgimple-ssa-store-merging.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fgimple-ssa-store-merging.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-store-merging.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -1324,8 +1324,9 @@ namespace {\n    and the other fields also reflect the memory load, or an SSA name, then\n    VAL represents the SSA name and all the other fields are zero,  */\n \n-struct store_operand_info\n+class store_operand_info\n {\n+public:\n   tree val;\n   tree base_addr;\n   poly_uint64 bitsize;\n@@ -1347,8 +1348,9 @@ store_operand_info::store_operand_info ()\n    to memory.  These are created in the first phase and coalesced into\n    merged_store_group objects in the second phase.  */\n \n-struct store_immediate_info\n+class store_immediate_info\n {\n+public:\n   unsigned HOST_WIDE_INT bitsize;\n   unsigned HOST_WIDE_INT bitpos;\n   unsigned HOST_WIDE_INT bitregion_start;\n@@ -1413,8 +1415,9 @@ store_immediate_info::store_immediate_info (unsigned HOST_WIDE_INT bs,\n    These are produced by the second phase (coalescing) and consumed in the\n    third phase that outputs the widened stores.  */\n \n-struct merged_store_group\n+class merged_store_group\n {\n+public:\n   unsigned HOST_WIDE_INT start;\n   unsigned HOST_WIDE_INT width;\n   unsigned HOST_WIDE_INT bitregion_start;\n@@ -2083,8 +2086,9 @@ merged_store_group::apply_stores ()\n \n /* Structure describing the store chain.  */\n \n-struct imm_store_chain_info\n+class imm_store_chain_info\n {\n+public:\n   /* Doubly-linked list that imposes an order on chain processing.\n      PNXP (prev's next pointer) points to the head of a list, or to\n      the next field in the previous chain in the list.\n@@ -3064,8 +3068,9 @@ get_location_for_stmts (vec<gimple *> &stmts)\n /* Used to decribe a store resulting from splitting a wide store in smaller\n    regularly-sized stores in split_group.  */\n \n-struct split_store\n+class split_store\n {\n+public:\n   unsigned HOST_WIDE_INT bytepos;\n   unsigned HOST_WIDE_INT size;\n   unsigned HOST_WIDE_INT align;"}, {"sha": "aa5a8567a1bef74f36d2b3c4392883313ac9aa2b", "filename": "gcc/gimple-ssa-strength-reduction.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fgimple-ssa-strength-reduction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fgimple-ssa-strength-reduction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-strength-reduction.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -226,8 +226,9 @@ enum cand_kind\n   CAND_PHI\n };\n \n-struct slsr_cand_d\n+class slsr_cand_d\n {\n+public:\n   /* The candidate statement S1.  */\n   gimple *cand_stmt;\n \n@@ -329,8 +330,9 @@ typedef const struct cand_chain_d *const_cand_chain_t;\n    of the cost of initializers.  The absolute value of the increment\n    is stored in the incr_info.  */\n \n-struct incr_info_d\n+class incr_info_d\n {\n+public:\n   /* The increment that relates a candidate to its basis.  */\n   widest_int incr;\n "}, {"sha": "73726c1a67017ee524397dac6d469c7fe3ae55d4", "filename": "gcc/gimple-ssa-warn-alloca.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fgimple-ssa-warn-alloca.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fgimple-ssa-warn-alloca.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-warn-alloca.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -118,7 +118,8 @@ enum alloca_type {\n };\n \n // Type of an alloca call with its corresponding limit, if applicable.\n-struct alloca_type_and_limit {\n+class alloca_type_and_limit {\n+public:\n   enum alloca_type type;\n   // For ALLOCA_BOUND_MAYBE_LARGE and ALLOCA_BOUND_DEFINITELY_LARGE\n   // types, this field indicates the assumed limit if known or"}, {"sha": "64175f258ae73a08c38d8740df172ead9cad4d43", "filename": "gcc/gimple-ssa-warn-restrict.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fgimple-ssa-warn-restrict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fgimple-ssa-warn-restrict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-warn-restrict.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -124,8 +124,9 @@ pass_wrestrict::execute (function *fun)\n /* Description of a memory reference by a built-in function.  This\n    is similar to ao_ref but made especially suitable for -Wrestrict\n    and not for optimization.  */\n-struct builtin_memref\n+class builtin_memref\n {\n+public:\n   /* The original pointer argument to the built-in function.  */\n   tree ptr;\n   /* The referenced subobject or NULL if not available, and the base"}, {"sha": "39cce5e6b361d545b0f231c202dfedfdc0898630", "filename": "gcc/godump.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fgodump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fgodump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgodump.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -535,8 +535,9 @@ go_type_decl (tree decl, int local)\n /* A container for the data we pass around when generating information\n    at the end of the compilation.  */\n \n-struct godump_container\n+class godump_container\n {\n+public:\n   /* DECLs that we have already seen.  */\n   hash_set<tree> decls_seen;\n "}, {"sha": "f3b216be07ca8304991cc17d8e1446667c2ef1ee", "filename": "gcc/hash-map-tests.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fhash-map-tests.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fhash-map-tests.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-map-tests.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -103,8 +103,9 @@ test_map_of_strings_to_int ()\n   ASSERT_EQ (1, string_map.elements ());\n }\n \n-typedef struct hash_map_test_val_t\n+typedef class hash_map_test_val_t\n {\n+public:\n   static int ndefault;\n   static int ncopy;\n   static int nassign;"}, {"sha": "ba20fe79f230639e82a2d1f1c334a06233e256a3", "filename": "gcc/hash-map.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fhash-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fhash-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-map.h?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -253,7 +253,8 @@ class GTY((user)) hash_map\n     /* Can't use std::pair here, because GCC before 4.3 don't handle\n        std::pair where template parameters are references well.\n        See PR86739.  */\n-    struct reference_pair {\n+    class reference_pair {\n+    public:\n       const Key &first;\n       Value &second;\n "}, {"sha": "ce59059bee15c744fc866e1a130c58647056c859", "filename": "gcc/hash-set-tests.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fhash-set-tests.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fhash-set-tests.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-set-tests.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -134,8 +134,9 @@ test_set_of_strings ()\n   ASSERT_EQ (2, t.elements ());\n }\n \n-typedef struct hash_set_test_value_t\n+typedef class hash_set_test_value_t\n {\n+public:\n   static int ndefault;\n   static int ncopy;\n   static int nassign;"}, {"sha": "424eac7ef471c33252b1ac8c570ffcdca33b0b30", "filename": "gcc/hsa-brig.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fhsa-brig.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fhsa-brig.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhsa-brig.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -195,8 +195,9 @@ hash_table <hsa_internal_fn_hasher> *hsa_emitted_internal_decls;\n /* List of sbr instructions.  */\n static vec <hsa_insn_sbr *> *switch_instructions;\n \n-struct function_linkage_pair\n+class function_linkage_pair\n {\n+public:\n   function_linkage_pair (tree decl, unsigned int off)\n     : function_decl (decl), offset (off) {}\n "}, {"sha": "121c4eab8e7a91f896dbe65ed91333833b1401b5", "filename": "gcc/hsa-common.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fhsa-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fhsa-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhsa-common.h?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -55,8 +55,9 @@ class hsa_bb;\n /* Class representing an input argument, output argument (result) or a\n    variable, that will eventually end up being a symbol directive.  */\n \n-struct hsa_symbol\n+class hsa_symbol\n {\n+public:\n   /* Constructor.  */\n   hsa_symbol (BrigType16_t type, BrigSegment8_t segment,\n \t      BrigLinkage8_t linkage, bool global_scope_p = false,\n@@ -1213,8 +1214,9 @@ enum hsa_function_kind\n   HSA_FUNCTION\n };\n \n-struct hsa_function_summary\n+class hsa_function_summary\n {\n+public:\n   /* Default constructor.  */\n   hsa_function_summary ();\n "}, {"sha": "54d98a5f50797f168e25c5625f6d55ff4e34b79a", "filename": "gcc/hsa-gen.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fhsa-gen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fhsa-gen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhsa-gen.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -6213,8 +6213,9 @@ transformable_switch_to_sbr_p (gswitch *s)\n /* Structure hold connection between PHI nodes and immediate\n    values hold by there nodes.  */\n \n-struct phi_definition\n+class phi_definition\n {\n+public:\n   phi_definition (unsigned phi_i, unsigned label_i, tree imm):\n     phi_index (phi_i), label_index (label_i), phi_value (imm)\n   {}"}, {"sha": "baab42af9aef6691f1f7e9414a68ce3e27b4ddef", "filename": "gcc/input.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Finput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Finput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -32,11 +32,13 @@ along with GCC; see the file COPYING3.  If not see\n \n /* This is a cache used by get_next_line to store the content of a\n    file to be searched for file lines.  */\n-struct fcache\n+class fcache\n {\n+public:\n   /* These are information used to store a line boundary.  */\n-  struct line_info\n+  class line_info\n   {\n+  public:\n     /* The line number.  It starts from 1.  */\n     size_t line_num;\n \n@@ -1691,8 +1693,9 @@ assert_loceq (const char *exp_filename, int exp_linenum, int exp_colnum,\n    The following struct describes a particular case within our test\n    matrix.  */\n \n-struct line_table_case\n+class line_table_case\n {\n+public:\n   line_table_case (int default_range_bits, int base_location)\n   : m_default_range_bits (default_range_bits),\n     m_base_location (base_location)\n@@ -2085,8 +2088,9 @@ class cpp_reader_ptr\n \n /* A struct for writing lexer tests.  */\n \n-struct lexer_test\n+class lexer_test\n {\n+public:\n   lexer_test (const line_table_case &case_, const char *content,\n \t      lexer_test_options *options);\n   ~lexer_test ();"}, {"sha": "3e038207bd01ce9cc08aa73209b55ecefc474094", "filename": "gcc/input.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Finput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Finput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.h?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -175,8 +175,9 @@ void diagnostics_file_cache_fini (void);\n \n void diagnostics_file_cache_forcibly_evict_file (const char *file_path);\n \n-struct GTY(()) string_concat\n+class GTY(()) string_concat\n {\n+public:\n   string_concat (int num, location_t *locs);\n \n   int m_num;"}, {"sha": "e62a9a03ef953d86a2ba7c59e7d3c2af14e704f1", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -130,7 +130,7 @@ template <typename valtype> class ipcp_value;\n /* Describes a particular source for an IPA-CP value.  */\n \n template <typename valtype>\n-class ipcp_value_source\n+struct ipcp_value_source\n {\n public:\n   /* Aggregate offset of the source, negative if the source is scalar value of\n@@ -209,7 +209,7 @@ class ipcp_value : public ipcp_value_base\n    contains_variable flag should be disregarded.  */\n \n template <typename valtype>\n-class ipcp_lattice\n+struct ipcp_lattice\n {\n public:\n   /* The list of known values and types in this lattice.  Note that values are\n@@ -236,7 +236,7 @@ class ipcp_lattice\n /* Lattice of tree values with an offset to describe a part of an\n    aggregate.  */\n \n-class ipcp_agg_lattice : public ipcp_lattice<tree>\n+struct ipcp_agg_lattice : public ipcp_lattice<tree>\n {\n public:\n   /* Offset that is being described by this lattice. */\n@@ -3385,8 +3385,9 @@ static call_summary <edge_clone_summary *> *edge_clone_summaries = NULL;\n \n /* Edge clone summary.  */\n \n-struct edge_clone_summary\n+class edge_clone_summary\n {\n+public:\n   /* Default constructor.  */\n   edge_clone_summary (): prev_clone (NULL), next_clone (NULL) {}\n "}, {"sha": "a5e3a63b66d417cb46a2fc26b4617031a383fc3c", "filename": "gcc/ipa-devirt.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fipa-devirt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fipa-devirt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-devirt.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -2626,8 +2626,9 @@ possible_polymorphic_call_targets_1 (vec <cgraph_node *> &nodes,\n    polymorphic calls in the program, so we memoize all the previous\n    queries and avoid duplicated work.  */\n \n-struct polymorphic_call_target_d\n+class polymorphic_call_target_d\n {\n+public:\n   HOST_WIDE_INT otr_token;\n   ipa_polymorphic_call_context context;\n   odr_type type;\n@@ -2949,8 +2950,9 @@ struct decl_warn_count\n \n /* Information about type and decl warnings.  */\n \n-struct final_warning_record\n+class final_warning_record\n {\n+public:\n   /* If needed grow type_warnings vector and initialize new decl_warn_count\n      to have dyn_count set to profile_count::zero ().  */\n   void grow_type_warnings (unsigned newlen);"}, {"sha": "7b077042b8eca062907a3be255135e03fcace8e2", "filename": "gcc/ipa-fnsummary.h", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fipa-fnsummary.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fipa-fnsummary.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-fnsummary.h?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -72,8 +72,9 @@ struct agg_position_info\n /* Representation of function body size and time depending on the call\n    context.  We keep simple array of record, every containing of predicate\n    and time/size to account.  */\n-struct GTY(()) size_time_entry\n+class GTY(()) size_time_entry\n {\n+public:\n   /* Predicate for code to be executed.  */\n   predicate exec_predicate;\n   /* Predicate for value to be constant and optimized out in a specialized copy.\n@@ -85,8 +86,9 @@ struct GTY(()) size_time_entry\n };\n \n /* Function inlining information.  */\n-struct GTY(()) ipa_fn_summary\n+class GTY(()) ipa_fn_summary\n {\n+public:\n   /* Keep all field empty so summary dumping works during its computation.\n      This is useful for debugging.  */\n   ipa_fn_summary ()\n@@ -205,8 +207,9 @@ extern GTY(()) fast_function_summary <ipa_fn_summary *, va_gc>\n   *ipa_fn_summaries;\n \n /* Information kept about callgraph edges.  */\n-struct ipa_call_summary\n+class ipa_call_summary\n {\n+public:\n   /* Keep all field empty so summary dumping works during its computation.\n      This is useful for debugging.  */\n   ipa_call_summary ()"}, {"sha": "18c8e1eebd0cbcd0099cdf100501dbcc143fb0f3", "filename": "gcc/ipa-inline.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fipa-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fipa-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.h?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -23,8 +23,9 @@ along with GCC; see the file COPYING3.  If not see\n \n /* Data we cache about callgraph edges during inlining to avoid expensive\n    re-computations during the greedy algorithm.  */\n-struct edge_growth_cache_entry\n+class edge_growth_cache_entry\n {\n+public:\n   sreal time, nonspec_time;\n   int size;\n   ipa_hints hints;"}, {"sha": "7605911f701733915ee23bf7f948bd86a57aaf18", "filename": "gcc/ipa-prop.h", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fipa-prop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fipa-prop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.h?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -144,8 +144,9 @@ struct GTY(()) ipa_agg_jump_function\n typedef struct ipa_agg_jump_function *ipa_agg_jump_function_p;\n \n /* Information about zero/non-zero bits.  */\n-struct GTY(()) ipa_bits\n+class GTY(()) ipa_bits\n {\n+public:\n   /* The propagated value.  */\n   widest_int value;\n   /* Mask corresponding to the value.\n@@ -156,8 +157,9 @@ struct GTY(()) ipa_bits\n \n /* Info about value ranges.  */\n \n-struct GTY(()) ipa_vr\n+class GTY(()) ipa_vr\n {\n+public:\n   /* The data fields below are valid only if known is true.  */\n   bool known;\n   enum value_range_kind type;\n@@ -319,8 +321,9 @@ struct GTY(()) ipa_param_descriptor\n    and some other information for interprocedural passes that operate on\n    parameters (such as ipa-cp).  */\n \n-struct GTY((for_user)) ipa_node_params\n+class GTY((for_user)) ipa_node_params\n {\n+public:\n   /* Default constructor.  */\n   ipa_node_params ();\n "}, {"sha": "44ae2c7d07727bfa6b69ac85789ab5b98170c6ae", "filename": "gcc/ipa-split.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fipa-split.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fipa-split.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-split.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -108,8 +108,9 @@ along with GCC; see the file COPYING3.  If not see\n \n /* Per basic block info.  */\n \n-struct split_bb_info\n+class split_bb_info\n {\n+public:\n   unsigned int size;\n   sreal time;\n };\n@@ -118,8 +119,9 @@ static vec<split_bb_info> bb_info_vec;\n \n /* Description of split point.  */\n \n-struct split_point\n+class split_point\n {\n+public:\n   /* Size of the partitions.  */\n   sreal header_time, split_time;\n   unsigned int header_size, split_size;\n@@ -979,8 +981,9 @@ visit_bb (basic_block bb, basic_block return_bb,\n \n /* Stack entry for recursive DFS walk in find_split_point.  */\n \n-struct stack_entry\n+class stack_entry\n {\n+public:\n   /* Basic block we are examining.  */\n   basic_block bb;\n "}, {"sha": "08848f0e81755676bf3a19ff03c51f22de5f49f7", "filename": "gcc/ira-int.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fira-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fira-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-int.h?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -597,8 +597,9 @@ extern int ira_copies_num;\n \n /* The following structure describes a stack slot used for spilled\n    pseudo-registers.  */\n-struct ira_spilled_reg_stack_slot\n+class ira_spilled_reg_stack_slot\n {\n+public:\n   /* pseudo-registers assigned to the stack slot.  */\n   bitmap_head spilled_regs;\n   /* RTL representation of the stack slot.  */\n@@ -774,7 +775,8 @@ minmax_set_iter_next (minmax_set_iterator *i)\n        minmax_set_iter_cond (&(ITER), &(N));\t\t\t\\\n        minmax_set_iter_next (&(ITER)))\n \f\n-struct target_ira_int {\n+class target_ira_int {\n+public:\n   ~target_ira_int ();\n \n   void free_ira_costs ();"}, {"sha": "4fc73d4917bbe081d7a6f3c04180164d5b9a343c", "filename": "gcc/loop-invariant.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Floop-invariant.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Floop-invariant.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-invariant.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -58,8 +58,9 @@ along with GCC; see the file COPYING3.  If not see\n \n /* The data stored for the loop.  */\n \n-struct loop_data\n+class loop_data\n {\n+public:\n   struct loop *outermost_exit;\t/* The outermost exit of the loop.  */\n   bool has_call;\t\t/* True if the loop contains a call.  */\n   /* Maximal register pressure inside loop for given register class"}, {"sha": "f078a68d8bfd33bd6cf294103d6ee86e7bfb1f38", "filename": "gcc/loop-iv.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Floop-iv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Floop-iv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-iv.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -85,8 +85,9 @@ enum iv_grd_result\n \n /* Information about a biv.  */\n \n-struct biv_entry\n+class biv_entry\n {\n+public:\n   unsigned regno;\t/* The register of the biv.  */\n   struct rtx_iv iv;\t/* Value of the biv.  */\n };"}, {"sha": "e583bca426147dc9f387b313fc37a29e0d1b0554", "filename": "gcc/lra-eliminations.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Flra-eliminations.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Flra-eliminations.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-eliminations.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -71,8 +71,9 @@ along with GCC; see the file COPYING3.\tIf not see\n \n /* This structure is used to record information about hard register\n    eliminations.  */\n-struct lra_elim_table\n+class lra_elim_table\n {\n+public:\n   /* Hard register number to be eliminated.  */\n   int from;\n   /* Hard register number used as replacement.\t*/"}, {"sha": "cc47c4daba2e2b3ddcdd250ca6c511392773d912", "filename": "gcc/lra-int.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Flra-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Flra-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-int.h?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -64,8 +64,9 @@ struct lra_copy\n };\n \n /* Common info about a register (pseudo or hard register).  */\n-struct lra_reg\n+class lra_reg\n {\n+public:\n   /* Bitmap of UIDs of insns (including debug insns) referring the\n      reg.  */\n   bitmap_head insn_bitmap;\n@@ -210,8 +211,9 @@ struct lra_static_insn_data\n \n /* LRA internal info about an insn (LRA internal insn\n    representation).  */\n-struct lra_insn_recog_data\n+class lra_insn_recog_data\n {\n+public:\n   /* The insn code.  */\n   int icode;\n   /* The alternative should be used for the insn, LRA_UNKNOWN_ALT if"}, {"sha": "975e5230a91989194335bb411bd108b48f502d77", "filename": "gcc/lra-lives.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Flra-lives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Flra-lives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-lives.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -384,8 +384,9 @@ mark_regno_dead (int regno, machine_mode mode)\n \n /* Structure describing local BB data used for pseudo\n    live-analysis.  */\n-struct bb_data_pseudos\n+class bb_data_pseudos\n {\n+public:\n   /* Basic block about which the below data are.  */\n   basic_block bb;\n   bitmap_head killed_pseudos; /* pseudos killed in the BB.  */"}, {"sha": "51d3543efdc5b4159b2c198d77d58bc7c9479713", "filename": "gcc/lra-remat.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Flra-remat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Flra-remat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-remat.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -124,8 +124,9 @@ static cand_t *regno_cands;\n \n /* Data about basic blocks used for the rematerialization\n    sub-pass.  */\n-struct remat_bb_data\n+class remat_bb_data\n {\n+public:\n   /* Basic block about which the below data are.  */\n   basic_block bb;\n   /* Registers changed in the basic block: */"}, {"sha": "5db94dc862950ebb468f54dd7ab88aa5cac99a69", "filename": "gcc/lra-spills.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Flra-spills.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Flra-spills.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-spills.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -97,8 +97,9 @@ static struct pseudo_slot *pseudo_slots;\n \n /* The structure describes a register or a stack slot which can be\n    used for several spilled pseudos.  */\n-struct slot\n+class slot\n {\n+public:\n   /* First pseudo with given stack slot.  */\n   int regno;\n   /* Hard reg into which the slot pseudos are spilled.\tThe value is"}, {"sha": "d5dbeb73b32542145c8c841eec37a9961e2daa60", "filename": "gcc/lto-streamer.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Flto-streamer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Flto-streamer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer.h?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -735,8 +735,9 @@ struct output_block\n \n \n /* Data and descriptors used when reading from an LTO file.  */\n-struct data_in\n+class data_in\n {\n+public:\n   /* The global decls and types.  */\n   struct lto_file_decl_data *file_data;\n "}, {"sha": "f3796f56b77fb80a2989ec4576cb4c1c25c567bd", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -1,3 +1,9 @@\n+2019-07-09  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/61339\n+\t* lto-dump.c: Change class-key from class to struct and vice versa\n+\tto match convention and avoid -Wclass-is-pod and -Wstruct-no-pod.\n+\n 2019-07-04  Martin Liska  <mliska@suse.cz>\n \n \tPR lto/91078"}, {"sha": "262f9f24d852adfb15802826a5696346ae0ddc01", "filename": "gcc/lto/lto-dump.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Flto%2Flto-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Flto%2Flto-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-dump.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -38,8 +38,9 @@ along with GCC; see the file COPYING3.  If not see\n \n /* Stores details of symbols for dumping symbol list.  */\n \n-struct symbol_entry\n+class symbol_entry\n {\n+public:\n   symtab_node *node;\n   symbol_entry (symtab_node *node_): node (node_)\n   {}\n@@ -70,8 +71,9 @@ struct symbol_entry\n \n /* Stores variable specific details of symbols for dumping symbol list.  */\n \n-struct variable_entry: public symbol_entry\n+class variable_entry: public symbol_entry\n {\n+public:\n   variable_entry (varpool_node *node_): symbol_entry (node_)\n   {}\n \n@@ -100,8 +102,9 @@ struct variable_entry: public symbol_entry\n \n /* Stores function specific details of symbols for dumping symbol list.  */\n \n-struct function_entry: public symbol_entry\n+class function_entry: public symbol_entry\n {\n+public:\n   function_entry (cgraph_node *node_): symbol_entry (node_)\n   {}\n "}, {"sha": "9ceb9ccc55b3d3c302e1908e119f655f41b8be54", "filename": "gcc/mem-stats.h", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fmem-stats.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fmem-stats.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmem-stats.h?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -31,8 +31,9 @@ class hash_map;\n #define LOCATION_LINE_WIDTH\t  48\n \n /* Memory allocation location.  */\n-struct mem_location\n+class mem_location\n {\n+public:\n   /* Default constructor.  */\n   inline\n   mem_location () {}\n@@ -123,8 +124,9 @@ struct mem_location\n };\n \n /* Memory usage register to a memory location.  */\n-struct mem_usage\n+class mem_usage\n {\n+public:\n   /* Default constructor.  */\n   mem_usage (): m_allocated (0), m_times (0), m_peak (0), m_instances (1) {}\n \n@@ -260,8 +262,9 @@ struct mem_usage\n /* Memory usage pair that connectes memory usage and number\n    of allocated bytes.  */\n template <class T>\n-struct mem_usage_pair\n+class mem_usage_pair\n {\n+public:\n   mem_usage_pair (T *usage_, size_t allocated_): usage (usage_),\n   allocated (allocated_) {}\n "}, {"sha": "898d73f8a6059deeea7ce4a92cde62ea45244377", "filename": "gcc/omp-grid.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fomp-grid.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fomp-grid.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-grid.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -83,8 +83,9 @@ omp_grid_lastprivate_predicate (struct omp_for_data *fd)\n /* Structure describing the basic properties of the loop we ara analyzing\n    whether it can be gridified and when it is gridified.  */\n \n-struct grid_prop\n+class grid_prop\n {\n+public:\n   /* True when we are doing tiling gridification, i.e. when there is a distinct\n      distribute loop over groups and a loop construct over work-items.  False\n      when distribute and parallel for loops form a combined construct.  */"}, {"sha": "a855c5b2f8b959e861ff5137ac0ff7d8c8ccc4b6", "filename": "gcc/omp-low.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -3777,7 +3777,8 @@ omp_clause_aligned_alignment (tree clause)\n /* This structure is part of the interface between lower_rec_simd_input_clauses\n    and lower_rec_input_clauses.  */\n \n-struct omplow_simd_context {\n+class omplow_simd_context {\n+public:\n   omplow_simd_context () { memset (this, 0, sizeof (*this)); }\n   tree idx;\n   tree lane;"}, {"sha": "d998fcaf7db1934b7ff896f8fd32bf564a01b23e", "filename": "gcc/optabs-query.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Foptabs-query.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Foptabs-query.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs-query.h?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -144,8 +144,9 @@ get_vcond_eq_icode (machine_mode vmode, machine_mode cmode)\n enum extraction_pattern { EP_insv, EP_extv, EP_extzv };\n \n /* Describes an instruction that inserts or extracts a bitfield.  */\n-struct extraction_insn\n+class extraction_insn\n {\n+public:\n   /* The code of the instruction.  */\n   enum insn_code icode;\n "}, {"sha": "ca7e06366f3a29f4ab831945701aabe12ab1bb89", "filename": "gcc/optabs.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Foptabs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Foptabs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.h?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -41,7 +41,8 @@ enum expand_operand_type {\n };\n \n /* Information about an operand for instruction expansion.  */\n-struct expand_operand {\n+class expand_operand {\n+public:\n   /* The type of operand.  */\n   ENUM_BITFIELD (expand_operand_type) type : 8;\n "}, {"sha": "46a19a278871178bce85e1f601a5f695d9e6b28f", "filename": "gcc/opts.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -1282,8 +1282,9 @@ wrap_help (const char *help,\n \n /* Data structure used to print list of valid option values.  */\n \n-struct option_help_tuple\n+class option_help_tuple\n {\n+public:\n   option_help_tuple (int code, vec<const char *> values):\n     m_code (code), m_values (values)\n   {}\n@@ -1801,8 +1802,9 @@ const struct sanitizer_opts_s coverage_sanitizer_opts[] =\n \n /* A struct for describing a run of chars within a string.  */\n \n-struct string_fragment\n+class string_fragment\n {\n+public:\n   string_fragment (const char *start, size_t len)\n   : m_start (start), m_len (len) {}\n "}, {"sha": "635f1ebeef691c770087f730625868c4ccfbe6c9", "filename": "gcc/poly-int.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fpoly-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fpoly-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpoly-int.h?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -335,7 +335,7 @@ struct poly_result<T1, T2, 2>\n /* A base POD class for polynomial integers.  The polynomial has N\n    coefficients of type C.  */\n template<unsigned int N, typename C>\n-class poly_int_pod\n+struct poly_int_pod\n {\n public:\n   template<typename Ca>"}, {"sha": "766f418aa691fb1b0a55ff9ae31cf63541ab0c0b", "filename": "gcc/predict.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -3236,8 +3236,9 @@ predict_paths_leading_to_edge (edge e, enum br_predictor pred,\n /* This is used to carry information about basic blocks.  It is\n    attached to the AUX field of the standard CFG block.  */\n \n-struct block_info\n+class block_info\n {\n+public:\n   /* Estimated frequency of execution of basic_block.  */\n   sreal frequency;\n \n@@ -3249,8 +3250,9 @@ struct block_info\n };\n \n /* Similar information for edges.  */\n-struct edge_prob_info\n+class edge_prob_info\n {\n+public:\n   /* In case edge is a loopback edge, the probability edge will be reached\n      in case header is.  Estimated number of iterations of the loop can be\n      then computed as 1 / (1 - back_edge_prob).  */"}, {"sha": "2d03b3f9e8def388cce022ecb375738359bdd2fe", "filename": "gcc/pretty-print.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fpretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fpretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpretty-print.h?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -74,8 +74,9 @@ struct chunk_info\n \n /* The output buffer datatype.  This is best seen as an abstract datatype\n    whose fields should not be accessed directly by clients.  */\n-struct output_buffer\n+class output_buffer\n {\n+public:\n   output_buffer ();\n   ~output_buffer ();\n \n@@ -214,8 +215,9 @@ class format_postprocessor\n /* The data structure that contains the bare minimum required to do\n    proper pretty-printing.  Clients may derived from this structure\n    and add additional fields they need.  */\n-struct pretty_printer\n+class pretty_printer\n {\n+public:\n   /* Default construct a pretty printer with specified\n      maximum line length cut off limit.  */\n   explicit pretty_printer (int = 0);"}, {"sha": "e584aab641f3c5bd2c892aa89a44d9c0b72dc02b", "filename": "gcc/profile-count.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fprofile-count.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fprofile-count.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile-count.h?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -676,7 +676,7 @@ class GTY((user)) profile_probability\n \n class sreal;\n \n-class GTY(()) profile_count\n+struct GTY(()) profile_count\n {\n public:\n   /* Use 62bit to hold basic block counters.  Should be at least"}, {"sha": "9cb75694ffe8bb4fc01f089668e919cb93657668", "filename": "gcc/read-md.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fread-md.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fread-md.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fread-md.h?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -23,7 +23,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"obstack.h\"\n \n /* Records a position in the file.  */\n-struct file_location {\n+class file_location {\n+public:\n   file_location () {}\n   file_location (const char *, int, int);\n "}, {"sha": "f41f54a0d4a5b10349f23f6e85482c78b744d66b", "filename": "gcc/read-rtl-function.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fread-rtl-function.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fread-rtl-function.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fread-rtl-function.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -52,8 +52,9 @@ class fixup;\n    at LOC, which will be turned into an actual CFG edge once\n    the \"insn-chain\" is fully parsed.  */\n \n-struct deferred_edge\n+class deferred_edge\n {\n+public:\n   deferred_edge (file_location loc, int src_bb_idx, int dest_bb_idx, int flags)\n   : m_loc (loc), m_src_bb_idx (src_bb_idx), m_dest_bb_idx (dest_bb_idx),\n     m_flags (flags)"}, {"sha": "c63e1591ae31dd3d9d58e42f49b4fd576fad005f", "filename": "gcc/ree.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Free.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Free.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Free.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -579,8 +579,9 @@ struct ATTRIBUTE_PACKED ext_modified\n };\n \n /* Vectors used by combine_reaching_defs and its helpers.  */\n-struct ext_state\n+class ext_state\n {\n+public:\n   /* In order to avoid constant alloc/free, we keep these\n      4 vectors live through the entire find_and_remove_re and just\n      truncate them each time.  */"}, {"sha": "4832affd436ac0a4a2631f55a7d721e61310a4c8", "filename": "gcc/reginfo.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Freginfo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Freginfo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freginfo.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -50,8 +50,9 @@ int max_regno;\n \n /* Used to cache the results of simplifiable_subregs.  SHAPE is the input\n    parameter and SIMPLIFIABLE_REGS is the result.  */\n-struct simplifiable_subreg\n+class simplifiable_subreg\n {\n+public:\n   simplifiable_subreg (const subreg_shape &);\n \n   subreg_shape shape;"}, {"sha": "7dbbeb91a6d480c45e039320b785c013cb024495", "filename": "gcc/regrename.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fregrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fregrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregrename.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -547,8 +547,9 @@ struct incoming_reg_info {\n    A pointer to such a structure is stored in each basic block's aux field\n    during regrename_analyze, except for blocks we know can't be optimized\n    (such as entry and exit blocks).  */\n-struct bb_rename_info\n+class bb_rename_info\n {\n+public:\n   /* The basic block corresponding to this structure.  */\n   basic_block bb;\n   /* Copies of the global information.  */"}, {"sha": "e9f28236cde6b9c08b1171d88d6057eda8cf4f9d", "filename": "gcc/regrename.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fregrename.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fregrename.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregrename.h?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -22,8 +22,9 @@ along with GCC; see the file COPYING3.  If not see\n \n /* We keep linked lists of DU_HEAD structures, each of which describes\n    a chain of occurrences of a reg.  */\n-struct du_head\n+class du_head\n {\n+public:\n   /* The next chain.  */\n   struct du_head *next_chain;\n   /* The first and last elements of this chain.  */"}, {"sha": "edfeebfff0e0bae8abed70687e0e6855c02ef651", "filename": "gcc/reload.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Freload.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Freload.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.h?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -278,8 +278,9 @@ extern int num_not_at_initial_offset;\n /* This structure describes instructions which are relevant for reload.\n    Apart from all regular insns, this also includes CODE_LABELs, since they\n    must be examined for register elimination.  */\n-struct insn_chain\n+class insn_chain\n {\n+public:\n   /* Links to the neighbor instructions.  */\n   struct insn_chain *next, *prev;\n "}, {"sha": "ba5e692f70c2ef2a4e7427ffe33705dad5d048a6", "filename": "gcc/rtl-iter.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Frtl-iter.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Frtl-iter.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl-iter.h?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -56,8 +56,9 @@ class generic_subrtx_iterator\n   typedef typename T::rtunion_type rtunion_type;\n \n public:\n-  struct array_type\n+  class array_type\n   {\n+  public:\n     array_type ();\n     ~array_type ();\n     value_type stack[LOCAL_ELEMS];"}, {"sha": "ad2f3cd5de66fd123b304425e5bff0c3a89ebb28", "filename": "gcc/rtl.h", "status": "modified", "additions": 21, "deletions": 17, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -145,8 +145,9 @@ struct addr_diff_vec_flags\n /* Structure used to describe the attributes of a MEM.  These are hashed\n    so MEMs that the same attributes share a data structure.  This means\n    they cannot be modified in place.  */\n-struct GTY(()) mem_attrs\n+class GTY(()) mem_attrs\n {\n+public:\n   mem_attrs ();\n \n   /* The expression that the MEM accesses, or null if not known.\n@@ -187,7 +188,8 @@ struct GTY(()) mem_attrs\n    object in the low part of a 4-byte register, the OFFSET field\n    will be -3 rather than 0.  */\n \n-struct GTY((for_user)) reg_attrs {\n+class GTY((for_user)) reg_attrs {\n+public:\n   tree decl;\t\t\t/* decl corresponding to REG.  */\n   poly_int64 offset;\t\t/* Offset from start of DECL.  */\n };\n@@ -449,8 +451,9 @@ struct GTY((desc(\"0\"), tag(\"0\"),\n \n /* A node for constructing singly-linked lists of rtx.  */\n \n-class GTY(()) rtx_expr_list : public rtx_def\n+struct GTY(()) rtx_expr_list : public rtx_def\n {\n+private:\n   /* No extra fields, but adds invariant: (GET_CODE (X) == EXPR_LIST).  */\n \n public:\n@@ -469,8 +472,9 @@ is_a_helper <rtx_expr_list *>::test (rtx rt)\n   return rt->code == EXPR_LIST;\n }\n \n-class GTY(()) rtx_insn_list : public rtx_def\n+struct GTY(()) rtx_insn_list : public rtx_def\n {\n+private:\n   /* No extra fields, but adds invariant: (GET_CODE (X) == INSN_LIST).\n \n      This is an instance of:\n@@ -501,8 +505,9 @@ is_a_helper <rtx_insn_list *>::test (rtx rt)\n /* A node with invariant GET_CODE (X) == SEQUENCE i.e. a vector of rtx,\n    typically (but not always) of rtx_insn *, used in the late passes.  */\n \n-class GTY(()) rtx_sequence : public rtx_def\n+struct GTY(()) rtx_sequence : public rtx_def\n {\n+private:\n   /* No extra fields, but adds invariant: (GET_CODE (X) == SEQUENCE).  */\n \n public:\n@@ -533,7 +538,7 @@ is_a_helper <const rtx_sequence *>::test (const_rtx rt)\n   return rt->code == SEQUENCE;\n }\n \n-class GTY(()) rtx_insn : public rtx_def\n+struct GTY(()) rtx_insn : public rtx_def\n {\n public:\n   /* No extra fields, but adds the invariant:\n@@ -567,7 +572,7 @@ class GTY(()) rtx_insn : public rtx_def\n \n /* Subclasses of rtx_insn.  */\n \n-class GTY(()) rtx_debug_insn : public rtx_insn\n+struct GTY(()) rtx_debug_insn : public rtx_insn\n {\n   /* No extra fields, but adds the invariant:\n        DEBUG_INSN_P (X) aka (GET_CODE (X) == DEBUG_INSN)\n@@ -578,7 +583,7 @@ class GTY(()) rtx_debug_insn : public rtx_insn\n      from rtl.def.  */\n };\n \n-class GTY(()) rtx_nonjump_insn : public rtx_insn\n+struct GTY(()) rtx_nonjump_insn : public rtx_insn\n {\n   /* No extra fields, but adds the invariant:\n        NONJUMP_INSN_P (X) aka (GET_CODE (X) == INSN)\n@@ -589,7 +594,7 @@ class GTY(()) rtx_nonjump_insn : public rtx_insn\n      from rtl.def.  */\n };\n \n-class GTY(()) rtx_jump_insn : public rtx_insn\n+struct GTY(()) rtx_jump_insn : public rtx_insn\n {\n public:\n   /* No extra fields, but adds the invariant:\n@@ -616,7 +621,7 @@ class GTY(()) rtx_jump_insn : public rtx_insn\n   inline void set_jump_target (rtx_code_label *);\n };\n \n-class GTY(()) rtx_call_insn : public rtx_insn\n+struct GTY(()) rtx_call_insn : public rtx_insn\n {\n   /* No extra fields, but adds the invariant:\n        CALL_P (X) aka (GET_CODE (X) == CALL_INSN)\n@@ -629,7 +634,7 @@ class GTY(()) rtx_call_insn : public rtx_insn\n      from rtl.def.  */\n };\n \n-class GTY(()) rtx_jump_table_data : public rtx_insn\n+struct GTY(()) rtx_jump_table_data : public rtx_insn\n {\n   /* No extra fields, but adds the invariant:\n        JUMP_TABLE_DATA_P (X) aka (GET_CODE (INSN) == JUMP_TABLE_DATA)\n@@ -640,8 +645,6 @@ class GTY(()) rtx_jump_table_data : public rtx_insn\n        DEF_RTL_EXPR(JUMP_TABLE_DATA, \"jump_table_data\", \"uuBe0000\", RTX_INSN)\n      from rtl.def.  */\n \n-public:\n-\n   /* This can be either:\n \n        (a) a table of absolute jumps, in which case PATTERN (this) is an\n@@ -657,7 +660,7 @@ class GTY(()) rtx_jump_table_data : public rtx_insn\n   inline scalar_int_mode get_data_mode () const;\n };\n \n-class GTY(()) rtx_barrier : public rtx_insn\n+struct GTY(()) rtx_barrier : public rtx_insn\n {\n   /* No extra fields, but adds the invariant:\n        BARRIER_P (X) aka (GET_CODE (X) == BARRIER)\n@@ -668,7 +671,7 @@ class GTY(()) rtx_barrier : public rtx_insn\n      from rtl.def.  */\n };\n \n-class GTY(()) rtx_code_label : public rtx_insn\n+struct GTY(()) rtx_code_label : public rtx_insn\n {\n   /* No extra fields, but adds the invariant:\n        LABEL_P (X) aka (GET_CODE (X) == CODE_LABEL)\n@@ -679,7 +682,7 @@ class GTY(()) rtx_code_label : public rtx_insn\n      from rtl.def.  */\n };\n \n-class GTY(()) rtx_note : public rtx_insn\n+struct GTY(()) rtx_note : public rtx_insn\n {\n   /* No extra fields, but adds the invariant:\n        NOTE_P(X) aka (GET_CODE (X) == NOTE)\n@@ -2096,7 +2099,8 @@ costs_add_n_insns (struct full_rtx_costs *c, int n)\n    inner_mode == the mode of the SUBREG_REG\n    offset     == the SUBREG_BYTE\n    outer_mode == the mode of the SUBREG itself.  */\n-struct subreg_shape {\n+class subreg_shape {\n+public:\n   subreg_shape (machine_mode, poly_uint16, machine_mode);\n   bool operator == (const subreg_shape &) const;\n   bool operator != (const subreg_shape &) const;"}, {"sha": "bf9fdc9cb8354c8aeb542573ffe27fb4a0f8f0b3", "filename": "gcc/sanopt.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fsanopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fsanopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsanopt.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -207,8 +207,9 @@ struct sanopt_tree_couple_hash : typed_noop_remove <sanopt_tree_couple>\n /* This is used to carry various hash maps and variables used\n    in sanopt_optimize_walker.  */\n \n-struct sanopt_ctx\n+class sanopt_ctx\n {\n+public:\n   /* This map maps a pointer (the first argument of UBSAN_NULL) to\n      a vector of UBSAN_NULL call statements that check this pointer.  */\n   hash_map<tree, auto_vec<gimple *> > null_check_map;"}, {"sha": "5fef221a0ea7e49c926404b2b92311017d6267ba", "filename": "gcc/sched-int.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fsched-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fsched-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-int.h?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -454,8 +454,9 @@ struct deps_reg\n };\n \n /* Describe state of dependencies used during sched_analyze phase.  */\n-struct deps_desc\n+class deps_desc\n {\n+public:\n   /* The *_insns and *_mems are paired lists.  Each pending memory operation\n      will have a pointer to the MEM rtx on one list and a pointer to the\n      containing insn on the other list in the same place in the list.  */"}, {"sha": "2a24a920991c16a094814a2ee3a73a77e729fcbb", "filename": "gcc/sel-sched-ir.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fsel-sched-ir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fsel-sched-ir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched-ir.h?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -713,8 +713,9 @@ struct transformed_insns\n \n /* Indexed by INSN_LUID, the collection of all data associated with\n    a single instruction that is in the stream.  */\n-struct _sel_insn_data\n+class _sel_insn_data\n {\n+public:\n   /* The expression that contains vinsn for this insn and some\n      flow-sensitive data like priority.  */\n   expr_def expr;"}, {"sha": "6152ef5478257f27b51a783d0a6173576ae13de0", "filename": "gcc/selftest.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fselftest.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fselftest.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fselftest.h?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -30,8 +30,9 @@ namespace selftest {\n /* A struct describing the source-location of a selftest, to make it\n    easier to track down failing tests.  */\n \n-struct location\n+class location\n {\n+public:\n   location (const char *file, int line, const char *function)\n     : m_file (file), m_line (line), m_function (function) {}\n "}, {"sha": "0319da6508f3fdc7b43866a942617b0b9242e039", "filename": "gcc/sese.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fsese.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fsese.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsese.h?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -26,8 +26,9 @@ typedef struct ifsese_s *ifsese;\n \n /* A Single Entry, Single Exit region is a part of the CFG delimited\n    by two edges.  */\n-struct sese_l\n+class sese_l\n {\n+public:\n   sese_l (edge e, edge x) : entry (e), exit (x) {}\n \n   operator bool () const { return entry && exit; }\n@@ -71,8 +72,9 @@ vec_find (const vec<T> &v, const T &elem)\n }\n \n /* A helper structure for bookkeeping information about a scop in graphite.  */\n-typedef struct sese_info_t\n+typedef class sese_info_t\n {\n+public:\n   /* The SESE region.  */\n   sese_l region;\n "}, {"sha": "040899e273116041cd988df8c947296a4d3f6737", "filename": "gcc/stmt.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -68,8 +68,9 @@ along with GCC; see the file COPYING3.  If not see\n \n */\n \n-struct simple_case_node\n+class simple_case_node\n {\n+public:\n   simple_case_node (tree low, tree high, tree code_label):\n     m_low (low), m_high (high), m_code_label (code_label)\n   {}"}, {"sha": "57cb42f320ed04f52267c7b7a1b5ea702d69f3a7", "filename": "gcc/target-globals.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Ftarget-globals.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Ftarget-globals.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-globals.h?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -39,7 +39,8 @@ extern struct target_bb_reorder *this_target_bb_reorder;\n extern struct target_lower_subreg *this_target_lower_subreg;\n #endif\n \n-struct GTY(()) target_globals {\n+class GTY(()) target_globals {\n+public:\n   ~target_globals ();\n \n   struct target_flag_state *GTY((skip)) flag_state;"}, {"sha": "ee7e010a1a5b74d629634e4b3bd25efe6ba36304", "filename": "gcc/tree-affine.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Ftree-affine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Ftree-affine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-affine.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -695,8 +695,9 @@ aff_combination_find_elt (aff_tree *comb, tree val, unsigned *idx)\n /* Element of the cache that maps ssa name NAME to its expanded form\n    as an affine expression EXPANSION.  */\n \n-struct name_expansion\n+class name_expansion\n {\n+public:\n   aff_tree expansion;\n \n   /* True if the expansion for the name is just being generated.  */"}, {"sha": "23c6096254b939eda822b813c252183fae051906", "filename": "gcc/tree-affine.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Ftree-affine.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Ftree-affine.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-affine.h?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -28,17 +28,19 @@ along with GCC; see the file COPYING3.  If not see\n \n /* Element of an affine combination.  */\n \n-struct aff_comb_elt\n+class aff_comb_elt\n {\n+public:\n   /* The value of the element.  */\n   tree val;\n \n   /* Its coefficient in the combination.  */\n   widest_int coef;\n };\n \n-struct aff_tree\n+class aff_tree\n {\n+public:\n   /* Type of the result of the combination.  */\n   tree type;\n "}, {"sha": "d7cd98d589ddc498f9fa12118582a6f82bf9697d", "filename": "gcc/tree-data-ref.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Ftree-data-ref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Ftree-data-ref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.h?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -203,8 +203,9 @@ typedef struct data_reference *data_reference_p;\n    including the data ref itself and the segment length for aliasing\n    checks.  This is used to merge alias checks.  */\n \n-struct dr_with_seg_len\n+class dr_with_seg_len\n {\n+public:\n   dr_with_seg_len (data_reference_p d, tree len, unsigned HOST_WIDE_INT size,\n \t\t   unsigned int a)\n     : dr (d), seg_len (len), access_size (size), align (a) {}\n@@ -224,8 +225,9 @@ struct dr_with_seg_len\n /* This struct contains two dr_with_seg_len objects with aliasing data\n    refs.  Two comparisons are generated from them.  */\n \n-struct dr_with_seg_len_pair_t\n+class dr_with_seg_len_pair_t\n {\n+public:\n   dr_with_seg_len_pair_t (const dr_with_seg_len& d1,\n \t\t\t       const dr_with_seg_len& d2)\n     : first (d1), second (d2) {}"}, {"sha": "eb35ebf8d996868636271e477eccd26fd91ee85c", "filename": "gcc/tree-outof-ssa.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Ftree-outof-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Ftree-outof-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-outof-ssa.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -129,8 +129,9 @@ ssa_is_replaceable_p (gimple *stmt)\n    rarely more than 6, and in the bootstrap of gcc, the maximum number\n    of nodes encountered was 12.  */\n \n-struct elim_graph\n+class elim_graph\n {\n+public:\n   elim_graph (var_map map);\n \n   /* Size of the elimination vectors.  */"}, {"sha": "dfb21460d58fc3667a8dd71c90957ab526f39968", "filename": "gcc/tree-predcom.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Ftree-predcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Ftree-predcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-predcom.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -243,8 +243,9 @@ along with GCC; see the file COPYING3.  If not see\n /* Data references (or phi nodes that carry data reference values across\n    loop iterations).  */\n \n-typedef struct dref_d\n+typedef class dref_d\n {\n+public:\n   /* The reference itself.  */\n   struct data_reference *ref;\n "}, {"sha": "08c882edd6f40b2857c6f3960f194a49cd84d4d3", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -370,8 +370,9 @@ find_var_scev_info (basic_block instantiated_below, tree var)\n    analyzing a scalar evolution, instantiating a CHREC or\n    resolving mixers.  */\n \n-struct instantiate_cache_type\n+class instantiate_cache_type\n {\n+public:\n   htab_t map;\n   vec<scev_info_str> entries;\n "}, {"sha": "c7c6020efc03aee6ae51e6a2584e7ff7c19be289", "filename": "gcc/tree-ssa-alias.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Ftree-ssa-alias.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Ftree-ssa-alias.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.h?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -68,8 +68,9 @@ struct GTY(()) pt_solution\n /* Simplified and cached information about a memory reference tree.\n    Used by the alias-oracle internally and externally in alternate\n    interfaces.  */\n-struct ao_ref\n+class ao_ref\n {\n+public:\n   /* The original full memory reference tree or NULL_TREE if that is\n      not available.  */\n   tree ref;"}, {"sha": "4dd703558b1ba00216c12a68b5dccfdc880c73e0", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -157,7 +157,8 @@ typedef enum\n   VARYING\n } ccp_lattice_t;\n \n-struct ccp_prop_value_t {\n+class ccp_prop_value_t {\n+public:\n     /* Lattice value.  */\n     ccp_lattice_t lattice_val;\n "}, {"sha": "2ca0d02d9a000c694a4317db88c8bb55e3a48ba8", "filename": "gcc/tree-ssa-coalesce.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Ftree-ssa-coalesce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Ftree-ssa-coalesce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-coalesce.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -674,8 +674,9 @@ ssa_conflicts_dump (FILE *file, ssa_conflicts *ptr)\n    marked as being live.  This delays clearing of these bitmaps until\n    they are actually needed again.  */\n \n-struct live_track\n+class live_track\n {\n+public:\n   bitmap_obstack obstack;\t/* A place to allocate our bitmaps.  */\n   bitmap_head live_base_var;\t\t/* Indicates if a basevar is live.  */\n   bitmap_head *live_base_partitions;\t/* Live partitions for each basevar.  */"}, {"sha": "f8bcabc0aa5d72c067c25f43ecf876d29d355614", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -113,8 +113,9 @@ struct mem_ref_loc\n \n /* Description of a memory reference.  */\n \n-struct im_mem_ref\n+class im_mem_ref\n {\n+public:\n   unsigned id : 30;\t\t/* ID assigned to the memory reference\n \t\t\t\t   (its index in memory_accesses.refs_list)  */\n   unsigned ref_canonical : 1;   /* Whether mem.ref was canonicalized.  */\n@@ -1756,8 +1757,9 @@ for_all_locs_in_loop (struct loop *loop, im_mem_ref *ref, FN fn)\n \n /* Rewrites location LOC by TMP_VAR.  */\n \n-struct rewrite_mem_ref_loc\n+class rewrite_mem_ref_loc\n {\n+public:\n   rewrite_mem_ref_loc (tree tmp_var_) : tmp_var (tmp_var_) {}\n   bool operator () (mem_ref_loc *loc);\n   tree tmp_var;\n@@ -1781,8 +1783,9 @@ rewrite_mem_refs (struct loop *loop, im_mem_ref *ref, tree tmp_var)\n \n /* Stores the first reference location in LOCP.  */\n \n-struct first_mem_ref_loc_1\n+class first_mem_ref_loc_1\n {\n+public:\n   first_mem_ref_loc_1 (mem_ref_loc **locp_) : locp (locp_) {}\n   bool operator () (mem_ref_loc *loc);\n   mem_ref_loc **locp;\n@@ -2017,8 +2020,9 @@ execute_sm_if_changed (edge ex, tree mem, tree tmp_var, tree flag,\n \n /* When REF is set on the location, set flag indicating the store.  */\n \n-struct sm_set_flag_if_changed\n+class sm_set_flag_if_changed\n {\n+public:\n   sm_set_flag_if_changed (tree flag_, hash_set <basic_block> *bbs_)\n \t : flag (flag_), bbs (bbs_) {}\n   bool operator () (mem_ref_loc *loc);\n@@ -2151,8 +2155,9 @@ hoist_memory_references (struct loop *loop, bitmap mem_refs,\n     }\n }\n \n-struct ref_always_accessed\n+class ref_always_accessed\n {\n+public:\n   ref_always_accessed (struct loop *loop_, bool stored_p_)\n       : loop (loop_), stored_p (stored_p_) {}\n   bool operator () (mem_ref_loc *loc);"}, {"sha": "cb189aba53361e030f09a0717b404cc5fb8430a1", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -175,8 +175,9 @@ enum use_type\n };\n \n /* Cost of a computation.  */\n-struct comp_cost\n+class comp_cost\n {\n+public:\n   comp_cost (): cost (0), complexity (0), scratch (0)\n   {}\n \n@@ -352,8 +353,9 @@ operator<= (comp_cost cost1, comp_cost cost2)\n struct iv_inv_expr_ent;\n \n /* The candidate - cost pair.  */\n-struct cost_pair\n+class cost_pair\n {\n+public:\n   struct iv_cand *cand;\t/* The candidate.  */\n   comp_cost cost;\t/* The cost.  */\n   enum tree_code comp;\t/* For iv elimination, the comparison.  */\n@@ -442,8 +444,9 @@ struct iv_cand\n };\n \n /* Hashtable entry for common candidate derived from iv uses.  */\n-struct iv_common_cand\n+class iv_common_cand\n {\n+public:\n   tree base;\n   tree step;\n   /* IV uses from which this common candidate is derived.  */\n@@ -616,8 +619,9 @@ struct ivopts_data\n \n /* An assignment of iv candidates to uses.  */\n \n-struct iv_ca\n+class iv_ca\n {\n+public:\n   /* The number of uses covered by the assignment.  */\n   unsigned upto;\n "}, {"sha": "24fad0f3e10a9e40882f35269c58e29599cb1395", "filename": "gcc/tree-ssa-loop.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Ftree-ssa-loop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Ftree-ssa-loop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop.h?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -36,8 +36,9 @@ struct affine_iv\n    the structure can be evaluated at the end of the loop's preheader\n    (and due to ssa form, also anywhere inside the body of the loop).  */\n \n-struct tree_niter_desc\n+class tree_niter_desc\n {\n+public:\n   tree assumptions;\t/* The boolean expression.  If this expression evaluates\n \t\t\t   to false, then the other fields in this structure\n \t\t\t   should not be used; there is no guarantee that they"}, {"sha": "36da4c6a1e1de3e02e62cc809e09c7645ba8f0f8", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -428,8 +428,9 @@ get_or_alloc_expr_for_name (tree name)\n \n /* An unordered bitmap set.  One bitmap tracks values, the other,\n    expressions.  */\n-typedef struct bitmap_set\n+typedef class bitmap_set\n {\n+public:\n   bitmap_head expressions;\n   bitmap_head values;\n } *bitmap_set_t;"}, {"sha": "f470f31d29502b41c5d0bdd69e6d0358790815fb", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -1393,8 +1393,9 @@ static bitmap changed;\n \n /* Strongly Connected Component visitation info.  */\n \n-struct scc_info\n+class scc_info\n {\n+public:\n   scc_info (size_t size);\n   ~scc_info ();\n "}, {"sha": "653007f0e17b5beb7e80a4d530af0b0c45b5191a", "filename": "gcc/tree-switch-conversion.h", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Ftree-switch-conversion.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Ftree-switch-conversion.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-switch-conversion.h?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -44,8 +44,9 @@ enum cluster_type\n      |-jump_table_cluster (JUMP_TABLE)\n      `-bit_test_cluster   (BIT_TEST).  */\n \n-struct cluster\n+class cluster\n {\n+public:\n   /* Constructor.  */\n   cluster (tree case_label_expr, basic_block case_bb, profile_probability prob,\n \t   profile_probability subtree_prob);\n@@ -117,8 +118,9 @@ cluster::cluster (tree case_label_expr, basic_block case_bb,\n /* Subclass of cluster representing a simple contiguous range\n    from [low..high].  */\n \n-struct simple_cluster: public cluster\n+class simple_cluster: public cluster\n {\n+public:\n   /* Constructor.  */\n   simple_cluster (tree low, tree high, tree case_label_expr,\n \t\t  basic_block case_bb, profile_probability prob);\n@@ -196,8 +198,9 @@ simple_cluster::simple_cluster (tree low, tree high, tree case_label_expr,\n /* Abstract subclass of jump table and bit test cluster,\n    handling a collection of simple_cluster instances.  */\n \n-struct group_cluster: public cluster\n+class group_cluster: public cluster\n {\n+public:\n   /* Constructor.  */\n   group_cluster (vec<cluster *> &clusters, unsigned start, unsigned end);\n \n@@ -233,8 +236,9 @@ struct group_cluster: public cluster\n    The \"emit\" vfunc gernerates a nested switch statement which\n    is later lowered to a jump table.  */\n \n-struct jump_table_cluster: public group_cluster\n+class jump_table_cluster: public group_cluster\n {\n+public:\n   /* Constructor.  */\n   jump_table_cluster (vec<cluster *> &clusters, unsigned start, unsigned end)\n   : group_cluster (clusters, start, end)\n@@ -332,8 +336,9 @@ This transformation was contributed by Roger Sayle, see this e-mail:\n    http://gcc.gnu.org/ml/gcc-patches/2003-01/msg01950.html\n */\n \n-struct bit_test_cluster: public group_cluster\n+class bit_test_cluster: public group_cluster\n {\n+public:\n   /* Constructor.  */\n   bit_test_cluster (vec<cluster *> &clusters, unsigned start, unsigned end,\n \t\t    bool handles_entire_switch)\n@@ -417,8 +422,9 @@ struct bit_test_cluster: public group_cluster\n \n /* Helper struct to find minimal clusters.  */\n \n-struct min_cluster_item\n+class min_cluster_item\n {\n+public:\n   /* Constructor.  */\n   min_cluster_item (unsigned count, unsigned start, unsigned non_jt_cases):\n     m_count (count), m_start (start), m_non_jt_cases (non_jt_cases)\n@@ -436,8 +442,9 @@ struct min_cluster_item\n \n /* Helper struct to represent switch decision tree.  */\n \n-struct case_tree_node\n+class case_tree_node\n {\n+public:\n   /* Empty Constructor.  */\n   case_tree_node ();\n \n@@ -503,8 +510,9 @@ bool jump_table_cluster::is_enabled (void)\n    is used to quickly identify all cases in this set without\n    looking at label_to_block for every case label.  */\n \n-struct case_bit_test\n+class case_bit_test\n {\n+public:\n   wide_int mask;\n   basic_block target_bb;\n   tree label;\n@@ -515,8 +523,9 @@ struct case_bit_test\n   static int cmp (const void *p1, const void *p2);\n };\n \n-struct switch_decision_tree\n+class switch_decision_tree\n {\n+public:\n   /* Constructor.  */\n   switch_decision_tree (gswitch *swtch): m_switch (swtch), m_phi_mapping (),\n     m_case_bbs (), m_case_node_pool (\"struct case_node pool\"),\n@@ -681,8 +690,9 @@ This transformation was contributed by Martin Jambor, see this e-mail:\n    http://gcc.gnu.org/ml/gcc-patches/2008-07/msg00011.html  */\n \n /* The main structure of the pass.  */\n-struct switch_conversion\n+class switch_conversion\n {\n+public:\n   /* Constructor.  */\n   switch_conversion ();\n "}, {"sha": "0157ba4992e39904b9d36327d565aab9ab08c57a", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -286,7 +286,8 @@ type_conversion_p (tree name, stmt_vec_info stmt_vinfo, bool check_sign,\n \n /* Holds information about an input operand after some sign changes\n    and type promotions have been peeled away.  */\n-struct vect_unpromoted_value {\n+class vect_unpromoted_value {\n+public:\n   vect_unpromoted_value ();\n \n   void set_op (tree, vect_def_type, stmt_vec_info = NULL);"}, {"sha": "868dc5c675c081342cbf854b99fa3a4e78588c37", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -188,8 +188,9 @@ dump_stmt_cost (FILE *f, void *data, int count, enum vect_cost_for_stmt kind,\n \f\n /* For mapping simduid to vectorization factor.  */\n \n-struct simduid_to_vf : free_ptr_hash<simduid_to_vf>\n+class simduid_to_vf : public free_ptr_hash<simduid_to_vf>\n {\n+public:\n   unsigned int simduid;\n   poly_uint64 vf;\n "}, {"sha": "6e76b7eaab5cd772464757e89089732201eb0367", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -141,7 +141,8 @@ struct _slp_tree {\n \n /* SLP instance is a sequence of stmts in a loop that can be packed into\n    SIMD stmts.  */\n-typedef struct _slp_instance {\n+typedef class _slp_instance {\n+public:\n   /* The root of SLP tree.  */\n   slp_tree root;\n \n@@ -181,7 +182,8 @@ typedef std::pair<tree, tree> vec_object_pair;\n \n /* Records that vectorization is only possible if abs (EXPR) >= MIN_VALUE.\n    UNSIGNED_P is true if we can assume that abs (EXPR) == EXPR.  */\n-struct vec_lower_bound {\n+class vec_lower_bound {\n+public:\n   vec_lower_bound () {}\n   vec_lower_bound (tree e, bool u, poly_uint64 m)\n     : expr (e), unsigned_p (u), min_value (m) {}\n@@ -193,7 +195,8 @@ struct vec_lower_bound {\n \n /* Vectorizer state shared between different analyses like vector sizes\n    of the same CFG region.  */\n-struct vec_info_shared {\n+class vec_info_shared {\n+public:\n   vec_info_shared();\n   ~vec_info_shared();\n \n@@ -213,7 +216,8 @@ struct vec_info_shared {\n };\n \n /* Vectorizer state common between loop and basic-block vectorization.  */\n-struct vec_info {\n+class vec_info {\n+public:\n   enum vec_kind { bb, loop };\n \n   vec_info (vec_kind, void *, vec_info_shared *);\n@@ -377,7 +381,8 @@ typedef auto_vec<rgroup_masks> vec_loop_masks;\n /*-----------------------------------------------------------------*/\n /* Info on vectorized loops.                                       */\n /*-----------------------------------------------------------------*/\n-typedef struct _loop_vec_info : public vec_info {\n+typedef class _loop_vec_info : public vec_info {\n+public:\n   _loop_vec_info (struct loop *, vec_info_shared *);\n   ~_loop_vec_info ();\n \n@@ -650,8 +655,9 @@ loop_vec_info_for_loop (struct loop *loop)\n   return (loop_vec_info) loop->aux;\n }\n \n-typedef struct _bb_vec_info : public vec_info\n+typedef class _bb_vec_info : public vec_info\n {\n+public:\n   _bb_vec_info (gimple_stmt_iterator, gimple_stmt_iterator, vec_info_shared *);\n   ~_bb_vec_info ();\n \n@@ -790,7 +796,8 @@ enum vect_memory_access_type {\n   VMAT_GATHER_SCATTER\n };\n \n-struct dr_vec_info {\n+class dr_vec_info {\n+public:\n   /* The data reference itself.  */\n   data_reference *dr;\n   /* The statement that contains the data reference.  */\n@@ -807,7 +814,8 @@ struct dr_vec_info {\n \n typedef struct data_reference *dr_p;\n \n-struct _stmt_vec_info {\n+class _stmt_vec_info {\n+public:\n \n   enum stmt_vec_info_type type;\n "}, {"sha": "7892c20e5c44ada8ca80c7fb4ebee2e69e5e6622", "filename": "gcc/tree.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -5107,8 +5107,9 @@ protected_set_expr_location (tree t, location_t loc)\n \n /* Data used when collecting DECLs and TYPEs for language data removal.  */\n \n-struct free_lang_data_d\n+class free_lang_data_d\n {\n+public:\n   free_lang_data_d () : decls (100), types (100) {}\n \n   /* Worklist to avoid excessive recursion.  */"}, {"sha": "992abd12f7a74e27cec8f88395956e41cd875249", "filename": "gcc/tree.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -5984,8 +5984,9 @@ desired_pro_or_demotion_p (const_tree to_type, const_tree from_type)\n \n /* Pointer type used to declare builtins before we have seen its real\n    declaration.  */\n-struct builtin_structptr_type\n+class builtin_structptr_type\n {\n+public:\n   tree& node;\n   tree& base;\n   const char *str;\n@@ -6069,8 +6070,9 @@ fndecl_built_in_p (const_tree node, built_in_function name)\n \n    where it is not.  */\n \n-struct op_location_t\n+class op_location_t\n {\n+public:\n   location_t m_operator_loc;\n   location_t m_combined_loc;\n "}, {"sha": "45c189b2e97c7ba77dbddcc3bece7235ccb3427c", "filename": "gcc/unique-ptr-tests.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Funique-ptr-tests.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Funique-ptr-tests.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funique-ptr-tests.cc?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -31,8 +31,9 @@ namespace {\n \n /* A class for counting ctor and dtor invocations.  */\n \n-struct stats\n+class stats\n {\n+public:\n   stats () : ctor_count (0), dtor_count (0) {}\n \n   int ctor_count;\n@@ -59,8 +60,9 @@ class foo\n \n /* A struct for testing unique_ptr<T[]>.  */\n \n-struct has_default_ctor\n+class has_default_ctor\n {\n+public:\n   has_default_ctor () : m_field (42) {}\n   int m_field;\n };"}, {"sha": "65df25dfb52d58fd03b3f955cb8de155cdba6cc0", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -929,8 +929,9 @@ static poly_int64 hard_frame_pointer_adjustment = -1;\n \n /* Data for adjust_mems callback.  */\n \n-struct adjust_mem_data\n+class adjust_mem_data\n {\n+public:\n   bool store;\n   machine_mode mem_mode;\n   HOST_WIDE_INT stack_adjust;\n@@ -8061,8 +8062,9 @@ delete_variable_part (dataflow_set *set, rtx loc, decl_or_value dv,\n \n /* Structure for passing some other parameters to function\n    vt_expand_loc_callback.  */\n-struct expand_loc_callback_data\n+class expand_loc_callback_data\n {\n+public:\n   /* The variables and values active at this point.  */\n   variable_table_type *vars;\n "}, {"sha": "827a37092fd9b99f1742da86882bb2786ce6b3ec", "filename": "gcc/varasm.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -2899,7 +2899,8 @@ assemble_real (REAL_VALUE_TYPE d, scalar_float_mode mode, unsigned int align,\n    Store them both in the structure *VALUE.\n    EXP must be reducible.  */\n \n-struct addr_const {\n+class addr_const {\n+public:\n   rtx base;\n   poly_int64 offset;\n };\n@@ -3621,7 +3622,8 @@ tree_output_constant_def (tree exp)\n   return decl;\n }\n \f\n-struct GTY((chain_next (\"%h.next\"), for_user)) constant_descriptor_rtx {\n+class GTY((chain_next (\"%h.next\"), for_user)) constant_descriptor_rtx {\n+public:\n   struct constant_descriptor_rtx *next;\n   rtx mem;\n   rtx sym;"}, {"sha": "cbd2db010f973fedee3b523912bdd66d24f7cb5c", "filename": "gcc/vec.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fvec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fvec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvec.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -49,8 +49,9 @@ along with GCC; see the file COPYING3.  If not see\n vnull vNULL;\n \n /* Vector memory usage.  */\n-struct vec_usage: public mem_usage\n+class vec_usage: public mem_usage\n {\n+public:\n   /* Default constructor.  */\n   vec_usage (): m_items (0), m_items_peak (0), m_element_size (0) {}\n "}, {"sha": "e95e46349ada28071610b8f73eb6c221f0c044ed", "filename": "gcc/wide-int-bitmask.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fwide-int-bitmask.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fwide-int-bitmask.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fwide-int-bitmask.h?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -20,8 +20,9 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_WIDE_INT_BITMASK_H\n #define GCC_WIDE_INT_BITMASK_H\n \n-struct wide_int_bitmask\n+class wide_int_bitmask\n {\n+public:\n   inline wide_int_bitmask ();\n   inline wide_int_bitmask (uint64_t l);\n   inline wide_int_bitmask (uint64_t l, uint64_t h);"}, {"sha": "18e76b7ab1fc582e62f32619f5b1dcea838f6ae9", "filename": "gcc/wide-int.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fwide-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/gcc%2Fwide-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fwide-int.h?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -642,8 +642,9 @@ namespace wi\n {\n   /* Contains the components of a decomposed integer for easy, direct\n      access.  */\n-  struct storage_ref\n+  class storage_ref\n   {\n+  public:\n     storage_ref () {}\n     storage_ref (const HOST_WIDE_INT *, unsigned int, unsigned int);\n \n@@ -968,7 +969,7 @@ decompose (HOST_WIDE_INT *, unsigned int precision,\n    wide_int, with the optimization that VAL is normally a pointer to\n    another integer's storage, so that no array copy is needed.  */\n template <bool SE, bool HDP>\n-struct wide_int_ref_storage : public wi::storage_ref\n+class wide_int_ref_storage : public wi::storage_ref\n {\n private:\n   /* Scratch space that can be used when decomposing the original integer.\n@@ -1357,7 +1358,7 @@ namespace wi\n    bytes beyond the sizeof need to be allocated.  Use set_precision\n    to initialize the structure.  */\n template <int N>\n-class GTY((user)) trailing_wide_ints\n+struct GTY((user)) trailing_wide_ints\n {\n private:\n   /* The shared precision of each number.  */\n@@ -1554,8 +1555,9 @@ namespace wi\n {\n   /* Stores HWI-sized integer VAL, treating it as having signedness SGN\n      and precision PRECISION.  */\n-  struct hwi_with_prec\n+  class hwi_with_prec\n   {\n+  public:\n     hwi_with_prec () {}\n     hwi_with_prec (HOST_WIDE_INT, unsigned int, signop);\n     HOST_WIDE_INT val;"}, {"sha": "c6e8e04b46e011e31edcc868e04bebf8630eaa49", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -1,3 +1,9 @@\n+2019-07-09  Martin Sebor  <msebor@redhat.com>\n+\n+\t* include/line-map.h: Change class-key from class to struct and vice\n+\tversa to match convention and avoid -Wclass-is-pod and -Wstruct-no-pod.\n+\t* mkdeps.c: Same.\n+\n 2019-07-03  Martin Liska  <mliska@suse.cz>\n \n \t* line-map.c (linemap_get_expansion_filename): Remove"}, {"sha": "3961b636e238d982e7019f9f715c3ac3e11ecd2c", "filename": "libcpp/include/line-map.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/libcpp%2Finclude%2Fline-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/libcpp%2Finclude%2Fline-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fline-map.h?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -770,7 +770,8 @@ struct GTY(()) location_adhoc_data_map {\n };\n \n /* A set of chronological line_map structures.  */\n-struct GTY(()) line_maps {\n+class GTY(()) line_maps {\n+public:\n \n   ~line_maps ();\n   \n@@ -1783,8 +1784,9 @@ class rich_location\n    of localized text, and a flag to determine if the caller should \"free\" the\n    buffer.  */\n \n-struct label_text\n+class label_text\n {\n+public:\n   label_text ()\n   : m_buffer (NULL), m_caller_owned (false)\n   {}"}, {"sha": "6693c21db526ecbb2f12a333feae8aa4fc93a801", "filename": "libcpp/mkdeps.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/libcpp%2Fmkdeps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1dae73cd2ceb6a326f786f6d4e8674863de45e/libcpp%2Fmkdeps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmkdeps.c?ref=6c1dae73cd2ceb6a326f786f6d4e8674863de45e", "patch": "@@ -29,7 +29,7 @@ along with this program; see the file COPYING3.  If not see\n \n /* Keep this structure local to this file, so clients don't find it\n    easy to start making assumptions.  */\n-struct mkdeps\n+class mkdeps\n {\n public:\n   /* T has trivial cctor & dtor.  */"}]}