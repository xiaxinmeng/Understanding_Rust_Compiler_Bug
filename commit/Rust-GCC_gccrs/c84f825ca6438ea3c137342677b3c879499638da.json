{"sha": "c84f825ca6438ea3c137342677b3c879499638da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzg0ZjgyNWNhNjQzOGVhM2MxMzczNDI2NzdiM2M4Nzk0OTk2MzhkYQ==", "commit": {"author": {"name": "Christian Bruel", "email": "christian.bruel@st.com", "date": "2015-06-11T08:51:17Z"}, "committer": {"name": "Christian Bruel", "email": "chrbr@gcc.gnu.org", "date": "2015-06-11T08:51:17Z"}, "message": "Add ARM/thumb pragma target \n\n\tPR target/52144\n\t* config/arm/arm-c.c (arm_cpu_cpp_builtins): Conditionally define\n\t macros in ...\n\t(arm_cpu_builtins): New function.\n\t(arm_pragma_target_parse): Call arm_cpu_builtins.\n\t* config/arm/arm-protos.h (arm_cpu_builtins): Declare.\n\t(arm_register_target_pragmas): Likewise.\n\t* config/arm/arm.h (REGISTER_TARGET_PRAGMAS):\n\t Call arm_register_target_pragmas.\n\t* config/arm/arm-c.c (arm_register_target_pragmas): New function.\n\t(arm_pragma_target_parse): Likewise.\n\n\tPR target/52144\n\t* gcc.target/arm/pragma_attribute.c: New test.\n\nFrom-SVN: r224365", "tree": {"sha": "162e2b98e73df673621c73b9c34bee20d5c00f08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/162e2b98e73df673621c73b9c34bee20d5c00f08"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c84f825ca6438ea3c137342677b3c879499638da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c84f825ca6438ea3c137342677b3c879499638da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c84f825ca6438ea3c137342677b3c879499638da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c84f825ca6438ea3c137342677b3c879499638da/comments", "author": null, "committer": null, "parents": [{"sha": "1e5df998631330662f7fb51bd0ae0725c8b1327f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e5df998631330662f7fb51bd0ae0725c8b1327f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e5df998631330662f7fb51bd0ae0725c8b1327f"}], "stats": {"total": 159, "additions": 148, "deletions": 11}, "files": [{"sha": "f89cbb6c9d25c291138909ec931e48b043e9e827", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c84f825ca6438ea3c137342677b3c879499638da/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c84f825ca6438ea3c137342677b3c879499638da/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c84f825ca6438ea3c137342677b3c879499638da", "patch": "@@ -1,3 +1,17 @@\n+2015-06-11  Christian Bruel  <christian.bruel@st.com>\n+\n+\tPR target/52144\n+\t* config/arm/arm-c.c (arm_cpu_cpp_builtins): Conditionally define\n+\t macros in ...\n+\t(arm_cpu_builtins): New function.\n+\t(arm_pragma_target_parse): Call arm_cpu_builtins.\n+\t* config/arm/arm-protos.h (arm_cpu_builtins): Declare.\n+\t(arm_register_target_pragmas): Likewise.\n+\t* config/arm/arm.h (REGISTER_TARGET_PRAGMAS):\n+\t Call arm_register_target_pragmas.\n+\t* config/arm/arm-c.c (arm_register_target_pragmas): New function.\n+\t(arm_pragma_target_parse): Likewise.\n+\n 2015-06-10  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \t* config/sh/sh.md (tstsi_t): Add '?' modifier to 'r' alternative"}, {"sha": "f02dfb47560429ef1ed2c811dafe6cc3f0525089", "filename": "gcc/config/arm/arm-c.c", "status": "modified", "additions": 87, "deletions": 7, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c84f825ca6438ea3c137342677b3c879499638da/gcc%2Fconfig%2Farm%2Farm-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c84f825ca6438ea3c137342677b3c879499638da/gcc%2Fconfig%2Farm%2Farm-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-c.c?ref=c84f825ca6438ea3c137342677b3c879499638da", "patch": "@@ -25,7 +25,11 @@\n #include \"alias.h\"\n #include \"symtab.h\"\n #include \"tree.h\"\n+#include \"tm_p.h\"\n #include \"c-family/c-common.h\"\n+#include \"target.h\"\n+#include \"target-def.h\"\n+#include \"c-family/c-pragma.h\"\n \n /* Output C specific EABI object attributes.  These can not be done in\n    arm.c because they require information from the C frontend.  */\n@@ -62,10 +66,8 @@ def_or_undef_macro(struct cpp_reader* pfile, const char *name, bool def_p)\n } \n \n void\n-arm_cpu_cpp_builtins (struct cpp_reader * pfile)\n+arm_cpu_builtins (struct cpp_reader* pfile, int flags)\n {\n-  int flags = target_flags;\n-\n   def_or_undef_macro (pfile, \"__ARM_FEATURE_DSP\",\n \t\t      TARGET_DSP_MULTIPLY_P (flags));\n   def_or_undef_macro (pfile, \"__ARM_FEATURE_QBIT\",\n@@ -157,8 +159,6 @@ arm_cpu_cpp_builtins (struct cpp_reader * pfile)\n   if (arm_cpp_interwork)\n     builtin_define (\"__THUMB_INTERWORK__\");\n \n-  builtin_assert (\"cpu=arm\");\n-  builtin_assert (\"machine=arm\");\n \n   builtin_define (arm_arch_name);\n   if (arm_arch_xscale)\n@@ -179,10 +179,90 @@ arm_cpu_cpp_builtins (struct cpp_reader * pfile)\n       builtin_define (\"__ARM_EABI__\");\n     }\n \n-\n-\n   def_or_undef_macro (pfile, \"__ARM_ARCH_EXT_IDIV__\", TARGET_IDIV_P (flags));\n   def_or_undef_macro (pfile, \"__ARM_FEATURE_IDIV\", TARGET_IDIV_P (flags));\n \n   def_or_undef_macro (pfile, \"__ARM_ASM_SYNTAX_UNIFIED__\", inline_asm_unified);\n }\n+\n+void\n+arm_cpu_cpp_builtins (struct cpp_reader * pfile)\n+{\n+  builtin_assert (\"cpu=arm\");\n+  builtin_assert (\"machine=arm\");\n+\n+  arm_cpu_builtins (pfile, target_flags);\n+}\n+\n+/* Hook to validate the current #pragma GCC target and set the arch custom\n+   mode state.  If ARGS is NULL, then POP_TARGET is used to reset\n+   the options.  */\n+static bool\n+arm_pragma_target_parse (tree args, tree pop_target)\n+{\n+  tree prev_tree = build_target_option_node (&global_options);\n+  tree cur_tree;\n+  struct cl_target_option *prev_opt;\n+  struct cl_target_option *cur_opt;\n+\n+  if (! args)\n+    {\n+      cur_tree = ((pop_target) ? pop_target : target_option_default_node);\n+      cl_target_option_restore (&global_options,\n+\t\t\t\tTREE_TARGET_OPTION (cur_tree));\n+    }\n+  else\n+    {\n+      cur_tree = arm_valid_target_attribute_tree (args, &global_options,\n+\t\t\t\t\t\t  &global_options_set);\n+      if (cur_tree == NULL_TREE)\n+\t{\n+\t  cl_target_option_restore (&global_options,\n+\t\t\t\t    TREE_TARGET_OPTION (prev_tree));\n+\t  return false;\n+\t}\n+    }\n+\n+  target_option_current_node = cur_tree;\n+  arm_reset_previous_fndecl ();\n+\n+  /* Figure out the previous mode.  */\n+  prev_opt  = TREE_TARGET_OPTION (prev_tree);\n+  cur_opt   = TREE_TARGET_OPTION (cur_tree);\n+\n+  gcc_assert (prev_opt);\n+  gcc_assert (cur_opt);\n+\n+  if (cur_opt->x_target_flags != prev_opt->x_target_flags)\n+    {\n+      /* For the definitions, ensure all newly defined macros are considered\n+\t as used for -Wunused-macros.  There is no point warning about the\n+\t compiler predefined macros.  */\n+      cpp_options *cpp_opts = cpp_get_options (parse_in);\n+      unsigned char saved_warn_unused_macros = cpp_opts->warn_unused_macros;\n+      cpp_opts->warn_unused_macros = 0;\n+\n+      /* Update macros.  */\n+      arm_cpu_builtins (parse_in, cur_opt->x_target_flags);\n+\n+      cpp_opts->warn_unused_macros = saved_warn_unused_macros;\n+    }\n+\n+  return true;\n+}\n+\n+/* Register target pragmas.  We need to add the hook for parsing #pragma GCC\n+   option here rather than in arm.c since it will pull in various preprocessor\n+   functions, and those are not present in languages like fortran without a\n+   preprocessor.  */\n+\n+void\n+arm_register_target_pragmas (void)\n+{\n+  /* Update pragma hook to allow parsing #pragma GCC target.  */\n+  targetm.target_option.pragma_parse = arm_pragma_target_parse;\n+\n+#ifdef REGISTER_SUBTARGET_PRAGMAS\n+  REGISTER_SUBTARGET_PRAGMAS ();\n+#endif\n+}"}, {"sha": "1abe54ecf787547777e3c3a2dcd7543fdfea256d", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c84f825ca6438ea3c137342677b3c879499638da/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c84f825ca6438ea3c137342677b3c879499638da/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=c84f825ca6438ea3c137342677b3c879499638da", "patch": "@@ -211,10 +211,10 @@ extern int arm_dllimport_p (tree);\n extern void arm_mark_dllexport (tree);\n extern void arm_mark_dllimport (tree);\n extern bool arm_change_mode_p (tree);\n-extern tree arm_valid_target_attribute_tree (tree, struct gcc_options *,\n-\t\t\t\t\t     struct gcc_options *);\n #endif\n \n+extern tree arm_valid_target_attribute_tree (tree, struct gcc_options *,\n+\t\t\t\t\t     struct gcc_options *);\n extern void arm_pr_long_calls (struct cpp_reader *);\n extern void arm_pr_no_long_calls (struct cpp_reader *);\n extern void arm_pr_long_calls_off (struct cpp_reader *);\n@@ -336,7 +336,9 @@ extern const char *arm_rewrite_selected_cpu (const char *name);\n \n /* Defined in gcc/common/config/arm-c.c.  */\n extern void arm_lang_object_attributes_init (void);\n+extern void arm_register_target_pragmas (void);\n extern void arm_cpu_cpp_builtins (struct cpp_reader *);\n+extern void arm_cpu_builtins (struct cpp_reader *, int);\n \n extern bool arm_is_constant_pool_ref (rtx);\n "}, {"sha": "373dc85778d1bd4694c666ea4c6d82dc9ce8e819", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c84f825ca6438ea3c137342677b3c879499638da/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c84f825ca6438ea3c137342677b3c879499638da/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=c84f825ca6438ea3c137342677b3c879499638da", "patch": "@@ -1991,7 +1991,8 @@ extern int making_const_table;\n   c_register_pragma (0, \"long_calls\", arm_pr_long_calls);\t\t\\\n   c_register_pragma (0, \"no_long_calls\", arm_pr_no_long_calls);\t\t\\\n   c_register_pragma (0, \"long_calls_off\", arm_pr_long_calls_off);\t\\\n-  arm_lang_object_attributes_init(); \\\n+  arm_lang_object_attributes_init();\t\t\t\t\t\\\n+  arm_register_target_pragmas();                                       \\\n } while (0)\n \n /* Condition code information.  */"}, {"sha": "0accb7c3d71e3e9f008ad2e8434958f29feb40a2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c84f825ca6438ea3c137342677b3c879499638da/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c84f825ca6438ea3c137342677b3c879499638da/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c84f825ca6438ea3c137342677b3c879499638da", "patch": "@@ -1,3 +1,8 @@\n+2015-06-11  Christian Bruel  <christian.bruel@st.com>\n+\n+\tPR target/52144\n+\t* gcc.target/arm/pragma_attribute.c: New test.\n+\n 2015-06-10  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* g++.dg/abi/mangle-regparm.C (dg-optiond): Add -save-temps.\n@@ -13,7 +18,7 @@\n \t* gcc.dg/tls/pr66470.c: New test.\n \t* gcc.target/i386/pr66470.c: New test.\n \n-2015-06-09  Christian Bruel  <christian.bruel@st.com>\n+2015-06-10  Christian Bruel  <christian.bruel@st.com>\n \n \tPR target/52144\n \t* gcc.target/arm/attr_arm.c: New test"}, {"sha": "12afc97ed50a8b97096102ed6e2349997b37350a", "filename": "gcc/testsuite/gcc.target/arm/pragma_attribute.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c84f825ca6438ea3c137342677b3c879499638da/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpragma_attribute.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c84f825ca6438ea3c137342677b3c879499638da/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpragma_attribute.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpragma_attribute.c?ref=c84f825ca6438ea3c137342677b3c879499638da", "patch": "@@ -0,0 +1,35 @@\n+/* Test for #prama target macros.  */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_thumb1_ok } */\n+\n+#pragma GCC target (\"thumb\")\n+\n+#ifndef __thumb__\n+#error \"__thumb__ is not defined\"\n+#endif\n+\n+#ifdef __thumb2__\n+#ifndef __ARM_32BIT_STATE\n+#error  \"__ARM_32BIT_STATE is not defined\"\n+#endif\n+#else /* thumb1 */\n+#ifdef __ARM_32BIT_STATE\n+#error  \"__ARM_32BIT_STATE is defined\"\n+#endif\n+#endif /* thumb1 */\n+\n+#pragma GCC target (\"arm\")\n+\n+#ifdef __thumb__\n+#error \"__thumb__ is defined\"\n+#endif\n+\n+#if defined (__thumb2__) || defined (__thumb1__)\n+#error \"thumb is defined\"\n+#endif \n+\n+#ifndef __ARM_32BIT_STATE\n+#error  \"__ARM_32BIT_STATE is not defined\"\n+#endif\n+\n+#pragma GCC reset_options"}]}