{"sha": "1cbba79d074af647f641e9b684b8bba242421241", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWNiYmE3OWQwNzRhZjY0N2Y2NDFlOWI2ODRiOGJiYTI0MjQyMTI0MQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-03-25T18:00:37Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-03-25T18:00:37Z"}, "message": "re PR c++/60375 ([c++11] ICE with invalid use of lambda)\n\n\tPR c++/60375\n\t* parser.c (cp_parser_lambda_expression): Don't parse the body of\n\ta lambda in unevaluated context.\n\nFrom-SVN: r208817", "tree": {"sha": "77953a194d931e793e575b2f0a0d3a09e0fe9fb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77953a194d931e793e575b2f0a0d3a09e0fe9fb2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1cbba79d074af647f641e9b684b8bba242421241", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cbba79d074af647f641e9b684b8bba242421241", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cbba79d074af647f641e9b684b8bba242421241", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cbba79d074af647f641e9b684b8bba242421241/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "45156f1474c97ecc7147951b36714fe4655676af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45156f1474c97ecc7147951b36714fe4655676af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45156f1474c97ecc7147951b36714fe4655676af"}], "stats": {"total": 29, "additions": 24, "deletions": 5}, "files": [{"sha": "23a2c8fc3f350b61c5e725359b3c85ba4937477c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cbba79d074af647f641e9b684b8bba242421241/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cbba79d074af647f641e9b684b8bba242421241/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1cbba79d074af647f641e9b684b8bba242421241", "patch": "@@ -1,5 +1,9 @@\n 2014-03-25  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/60375\n+\t* parser.c (cp_parser_lambda_expression): Don't parse the body of\n+\ta lambda in unevaluated context.\n+\n \tPR c++/60628\n \t* decl.c (create_array_type_for_decl): Complain about array of auto.\n "}, {"sha": "2e117a53155c0feeec84154e91bb627ddffe1e1b", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cbba79d074af647f641e9b684b8bba242421241/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cbba79d074af647f641e9b684b8bba242421241/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=1cbba79d074af647f641e9b684b8bba242421241", "patch": "@@ -8718,14 +8718,17 @@ cp_parser_lambda_expression (cp_parser* parser)\n {\n   tree lambda_expr = build_lambda_expr ();\n   tree type;\n-  bool ok;\n+  bool ok = true;\n \n   LAMBDA_EXPR_LOCATION (lambda_expr)\n     = cp_lexer_peek_token (parser->lexer)->location;\n \n   if (cp_unevaluated_operand)\n-    error_at (LAMBDA_EXPR_LOCATION (lambda_expr),\n-\t      \"lambda-expression in unevaluated context\");\n+    {\n+      error_at (LAMBDA_EXPR_LOCATION (lambda_expr),\n+\t\t\"lambda-expression in unevaluated context\");\n+      ok = false;\n+    }\n \n   /* We may be in the middle of deferred access check.  Disable\n      it now.  */\n@@ -8770,12 +8773,15 @@ cp_parser_lambda_expression (cp_parser* parser)\n     /* By virtue of defining a local class, a lambda expression has access to\n        the private variables of enclosing classes.  */\n \n-    ok = cp_parser_lambda_declarator_opt (parser, lambda_expr);\n+    ok &= cp_parser_lambda_declarator_opt (parser, lambda_expr);\n \n     if (ok)\n       cp_parser_lambda_body (parser, lambda_expr);\n     else if (cp_parser_require (parser, CPP_OPEN_BRACE, RT_OPEN_BRACE))\n-      cp_parser_skip_to_end_of_block_or_statement (parser);\n+      {\n+\tif (cp_parser_skip_to_closing_brace (parser))\n+\t  cp_lexer_consume_token (parser->lexer);\n+      }\n \n     /* The capture list was built up in reverse order; fix that now.  */\n     LAMBDA_EXPR_CAPTURE_LIST (lambda_expr)"}, {"sha": "dcea1690dded1bc7de2ccd075d39ca94ed128fb6", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-uneval.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cbba79d074af647f641e9b684b8bba242421241/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-uneval.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cbba79d074af647f641e9b684b8bba242421241/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-uneval.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-uneval.C?ref=1cbba79d074af647f641e9b684b8bba242421241", "patch": "@@ -5,3 +5,5 @@ template <class T>\n struct A { };\n A<decltype([]{ return 1; }())> a; // { dg-error \"lambda.*unevaluated context\" }\n \n+// { dg-prune-output \"template argument\" }\n+// { dg-prune-output \"invalid type\" }"}, {"sha": "14cb2987420070575122cd05ae75cfd3262322f8", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-uneval2.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cbba79d074af647f641e9b684b8bba242421241/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-uneval2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cbba79d074af647f641e9b684b8bba242421241/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-uneval2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-uneval2.C?ref=1cbba79d074af647f641e9b684b8bba242421241", "patch": "@@ -0,0 +1,7 @@\n+// PR c++/60375\n+// { dg-do compile { target c++11 } }\n+\n+struct A\n+{\n+  decltype( [](){ return this; }() ) x; // { dg-error \"unevaluated\" }\n+};"}]}