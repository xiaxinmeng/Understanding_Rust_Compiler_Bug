{"sha": "09b04f2d9f3a2fd97e9794dc7fc7857de4be971c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDliMDRmMmQ5ZjNhMmZkOTdlOTc5NGRjN2ZjNzg1N2RlNGJlOTcxYw==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2003-04-26T15:19:06Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2003-04-26T15:19:06Z"}, "message": "flags.h (time_report): Remove.\n\n\t* flags.h (time_report): Remove.\n\t* timevar.c (timevar_enable): New.\n\t(TIMEVAR_ENABLE): Remove, use timevar_enable.\n\t(timevar_init): Rename from init_timevar.\n\t* timevar.h (timevar_init): Rename from init_timevar.\n\t* toplev.c (time_report): Make static.\n\t(do_compile): Conditionally call init_timevar first.\n\t(preprocess_options): Move some code to do_compile.\n\nFrom-SVN: r66110", "tree": {"sha": "6424ff69f6fae47ba0b6239a1c29e1973c0dafc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6424ff69f6fae47ba0b6239a1c29e1973c0dafc6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/09b04f2d9f3a2fd97e9794dc7fc7857de4be971c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09b04f2d9f3a2fd97e9794dc7fc7857de4be971c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09b04f2d9f3a2fd97e9794dc7fc7857de4be971c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09b04f2d9f3a2fd97e9794dc7fc7857de4be971c/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3e35d143117380707aebb2c46f3ec7e200f46b04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e35d143117380707aebb2c46f3ec7e200f46b04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e35d143117380707aebb2c46f3ec7e200f46b04"}], "stats": {"total": 79, "additions": 41, "deletions": 38}, "files": [{"sha": "f96ea7014405464e3f35192b264cfae0e8de63e8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09b04f2d9f3a2fd97e9794dc7fc7857de4be971c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09b04f2d9f3a2fd97e9794dc7fc7857de4be971c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=09b04f2d9f3a2fd97e9794dc7fc7857de4be971c", "patch": "@@ -1,3 +1,14 @@\n+2003-04-26  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* flags.h (time_report): Remove.\n+\t* timevar.c (timevar_enable): New.\n+\t(TIMEVAR_ENABLE): Remove, use timevar_enable.\n+\t(timevar_init): Rename from init_timevar.\n+\t* timevar.h (timevar_init): Rename from init_timevar.\n+\t* toplev.c (time_report): Make static.\n+\t(do_compile): Conditionally call init_timevar first.\n+\t(preprocess_options): Move some code to do_compile.\n+\n 2003-04-26  Stephane Carrez  <stcarrez@nerim.fr>\n \n \t* doc/install.texi (Binaries): Mention binaries for HC11/HC12."}, {"sha": "982cb9331590699d14dd774d187ad0e0118461b3", "filename": "gcc/flags.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09b04f2d9f3a2fd97e9794dc7fc7857de4be971c/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09b04f2d9f3a2fd97e9794dc7fc7857de4be971c/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=09b04f2d9f3a2fd97e9794dc7fc7857de4be971c", "patch": "@@ -72,10 +72,6 @@ extern int optimize_size;\n \n extern int quiet_flag;\n \n-/* Print times taken by the various passes.  -ftime-report.  */\n-\n-extern int time_report;\n-\n /* Print memory still in use at end of compilation (which may have little\n    to do with peak memory consumption).  -fmem-report.  */\n "}, {"sha": "534001bfe10ed2195f3df4607ecfb1678794ee9b", "filename": "gcc/timevar.c", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09b04f2d9f3a2fd97e9794dc7fc7857de4be971c/gcc%2Ftimevar.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09b04f2d9f3a2fd97e9794dc7fc7857de4be971c/gcc%2Ftimevar.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftimevar.c?ref=09b04f2d9f3a2fd97e9794dc7fc7857de4be971c", "patch": "@@ -113,10 +113,9 @@ static double clocks_to_msec;\n #include \"flags.h\"\n #include \"timevar.h\"\n \n-/* See timevar.h for an explanation of timing variables.  */\n+static bool timevar_enable;\n \n-/* This macro evaluates to nonzero if timing variables are enabled.  */\n-#define TIMEVAR_ENABLE (time_report)\n+/* See timevar.h for an explanation of timing variables.  */\n \n /* A timing variable.  */\n \n@@ -187,7 +186,7 @@ get_time (now)\n   now->sys  = 0;\n   now->wall = 0;\n \n-  if (!TIMEVAR_ENABLE)\n+  if (!timevar_enable)\n     return;\n \n   {\n@@ -225,10 +224,9 @@ timevar_accumulate (timer, start_time, stop_time)\n /* Initialize timing variables.  */\n \n void\n-init_timevar ()\n+timevar_init ()\n {\n-  if (!TIMEVAR_ENABLE)\n-    return;\n+  timevar_enable = true;\n \n   /* Zero all elapsed times.  */\n   memset ((void *) timevars, 0, sizeof (timevars));\n@@ -262,7 +260,7 @@ timevar_push (timevar)\n   struct timevar_stack_def *context;\n   struct timevar_time_def now;\n \n-  if (!TIMEVAR_ENABLE)\n+  if (!timevar_enable)\n     return;\n \n   /* Mark this timing variable as used.  */\n@@ -314,7 +312,7 @@ timevar_pop (timevar)\n   struct timevar_time_def now;\n   struct timevar_stack_def *popped = stack;\n \n-  if (!TIMEVAR_ENABLE)\n+  if (!timevar_enable)\n     return;\n \n   if (&timevars[timevar] != stack->timevar)\n@@ -353,7 +351,7 @@ timevar_start (timevar)\n {\n   struct timevar_def *tv = &timevars[timevar];\n \n-  if (!TIMEVAR_ENABLE)\n+  if (!timevar_enable)\n     return;\n \n   /* Mark this timing variable as used.  */\n@@ -378,7 +376,7 @@ timevar_stop (timevar)\n   struct timevar_def *tv = &timevars[timevar];\n   struct timevar_time_def now;\n \n-  if (!TIMEVAR_ENABLE)\n+  if (!timevar_enable)\n     return;\n \n   /* TIMEVAR must have been started via timevar_start.  */\n@@ -430,7 +428,7 @@ timevar_print (fp)\n   struct timevar_time_def *total = &timevars[TV_TOTAL].elapsed;\n   struct timevar_time_def now;\n \n-  if (!TIMEVAR_ENABLE)\n+  if (!timevar_enable)\n     return;\n \n   /* Update timing information in case we're calling this from GDB.  */"}, {"sha": "abcbb95dee068654f8244d4e885fe3f55f46abb2", "filename": "gcc/timevar.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09b04f2d9f3a2fd97e9794dc7fc7857de4be971c/gcc%2Ftimevar.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09b04f2d9f3a2fd97e9794dc7fc7857de4be971c/gcc%2Ftimevar.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftimevar.h?ref=09b04f2d9f3a2fd97e9794dc7fc7857de4be971c", "patch": "@@ -79,7 +79,7 @@ timevar_id_t;\n /* Execute the sequence: timevar_pop (TV), return (E);  */\n #define POP_TIMEVAR_AND_RETURN(TV, E)  return (timevar_pop (TV), (E))\n \n-extern void init_timevar PARAMS ((void));\n+extern void timevar_init PARAMS ((void));\n extern void timevar_push PARAMS ((timevar_id_t));\n extern void timevar_pop PARAMS ((timevar_id_t));\n extern void timevar_start PARAMS ((timevar_id_t));"}, {"sha": "4d7e35141a6d6f81124284edf7702a0afa308d3b", "filename": "gcc/toplev.c", "status": "modified", "additions": 19, "deletions": 21, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09b04f2d9f3a2fd97e9794dc7fc7857de4be971c/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09b04f2d9f3a2fd97e9794dc7fc7857de4be971c/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=09b04f2d9f3a2fd97e9794dc7fc7857de4be971c", "patch": "@@ -431,7 +431,7 @@ int quiet_flag = 0;\n \n /* Print times taken by the various passes.  -ftime-report.  */\n \n-int time_report = 0;\n+static int time_report = 0;\n \n /* Print memory still in use at end of compilation (which may have little\n    to do with peak memory consumption).  -fmem-report.  */\n@@ -5326,9 +5326,6 @@ process_options ()\n \tprint_switch_values (stderr, 0, MAX_LINE, \"\", \" \", \"\\n\");\n     }\n \n-  if (! quiet_flag  || flag_detailed_statistics)\n-    time_report = 1;\n-\n   if (flag_syntax_only)\n     {\n       write_symbols = NO_DEBUG;\n@@ -5562,20 +5559,27 @@ finalize ()\n static void\n do_compile ()\n {\n-  /* We cannot start timing until after options are processed since that\n-     says if we run timers or not.  */\n-  init_timevar ();\n+  /* Initialize timing first.  The C front ends read the main file in\n+     the post_options hook, and C++ does file timings.  */\n+  if (time_report || !quiet_flag  || flag_detailed_statistics)\n+    timevar_init ();\n   timevar_start (TV_TOTAL);\n \n-  /* Set up the back-end if requested.  */\n-  if (!no_backend)\n-    backend_init ();\n+  process_options ();\n+\n+  /* Don't do any more if an error has already occurred.  */\n+  if (!errorcount)\n+    {\n+      /* Set up the back-end if requested.  */\n+      if (!no_backend)\n+\tbackend_init ();\n \n-  /* Language-dependent initialization.  Returns true on success.  */\n-  if (lang_dependent_init (filename))\n-    compile_file ();\n+      /* Language-dependent initialization.  Returns true on success.  */\n+      if (lang_dependent_init (filename))\n+\tcompile_file ();\n \n-  finalize ();\n+      finalize ();\n+    }\n \n   /* Stop timing and print the times.  */\n   timevar_stop (TV_TOTAL);\n@@ -5603,13 +5607,7 @@ toplev_main (argc, argv)\n \n   /* Exit early if we can (e.g. -help).  */\n   if (!exit_after_options)\n-    {\n-      process_options ();\n-\n-      /* Don't do any more if an error has already occurred.  */\n-      if (!errorcount)\n-\tdo_compile ();\n-    }\n+    do_compile ();\n \n   if (errorcount || sorrycount)\n     return (FATAL_EXIT_CODE);"}]}