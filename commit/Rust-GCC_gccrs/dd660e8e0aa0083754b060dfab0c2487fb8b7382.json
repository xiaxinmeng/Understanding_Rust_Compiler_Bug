{"sha": "dd660e8e0aa0083754b060dfab0c2487fb8b7382", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQ2NjBlOGUwYWEwMDgzNzU0YjA2MGRmYWIwYzI0ODdmYjhiNzM4Mg==", "commit": {"author": {"name": "Greta Yorsh", "email": "greta.yorsh@arm.com", "date": "2013-04-05T17:08:53Z"}, "committer": {"name": "Greta Yorsh", "email": "gretay@gcc.gnu.org", "date": "2013-04-05T17:08:53Z"}, "message": "arm.md (arm_ashldi3_1bit): Convert define_insn into define_insn_and_split.\n\n2013-04-05  Greta Yorsh  <Greta.Yorsh@arm.com>\n\n\t* config/arm/arm.md (arm_ashldi3_1bit): Convert define_insn into\n\tdefine_insn_and_split.\n        (arm_ashrdi3_1bit,arm_lshrdi3_1bit): Likewise.\n\t(shiftsi3_compare): New pattern.\n\t(rrx): New pattern.\n\t* config/arm/unspecs.md (UNSPEC_RRX): New.\n\nFrom-SVN: r197527", "tree": {"sha": "34a01f8d36b6630cfb8f68916db328dc7fc4a9e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34a01f8d36b6630cfb8f68916db328dc7fc4a9e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd660e8e0aa0083754b060dfab0c2487fb8b7382", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd660e8e0aa0083754b060dfab0c2487fb8b7382", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd660e8e0aa0083754b060dfab0c2487fb8b7382", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd660e8e0aa0083754b060dfab0c2487fb8b7382/comments", "author": null, "committer": null, "parents": [{"sha": "045e472c6eebe085feb5d3b95666409b78ba2b5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/045e472c6eebe085feb5d3b95666409b78ba2b5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/045e472c6eebe085feb5d3b95666409b78ba2b5b"}], "stats": {"total": 95, "additions": 87, "deletions": 8}, "files": [{"sha": "da89fdeb9301d5963ab853e56e0717d42a094fc1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd660e8e0aa0083754b060dfab0c2487fb8b7382/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd660e8e0aa0083754b060dfab0c2487fb8b7382/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dd660e8e0aa0083754b060dfab0c2487fb8b7382", "patch": "@@ -1,3 +1,12 @@\n+2013-04-05  Greta Yorsh  <Greta.Yorsh@arm.com>\n+\n+\t* config/arm/arm.md (arm_ashldi3_1bit): Convert define_insn into\n+\tdefine_insn_and_split.\n+        (arm_ashrdi3_1bit,arm_lshrdi3_1bit): Likewise.\n+\t(shiftsi3_compare): New pattern.\n+\t(rrx): New pattern.\n+\t* config/arm/unspecs.md (UNSPEC_RRX): New.\n+\n 2013-04-05  Greta Yorsh  <Greta.Yorsh@arm.com>\n \n \t* config/arm/arm.md (negdi_extendsidi): New pattern."}, {"sha": "ffec1b4ad4a99198916d116065493f1e09d678a0", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 76, "deletions": 8, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd660e8e0aa0083754b060dfab0c2487fb8b7382/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd660e8e0aa0083754b060dfab0c2487fb8b7382/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=dd660e8e0aa0083754b060dfab0c2487fb8b7382", "patch": "@@ -3656,13 +3656,26 @@\n   \"\n )\n \n-(define_insn \"arm_ashldi3_1bit\"\n+(define_insn_and_split \"arm_ashldi3_1bit\"\n   [(set (match_operand:DI            0 \"s_register_operand\" \"=r,&r\")\n         (ashift:DI (match_operand:DI 1 \"s_register_operand\" \"0,r\")\n                    (const_int 1)))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_32BIT\"\n-  \"movs\\\\t%Q0, %Q1, asl #1\\;adc\\\\t%R0, %R1, %R1\"\n+  \"#\"   ; \"movs\\\\t%Q0, %Q1, asl #1\\;adc\\\\t%R0, %R1, %R1\"\n+  \"&& reload_completed\"\n+  [(parallel [(set (reg:CC CC_REGNUM)\n+\t\t   (compare:CC (ashift:SI (match_dup 1) (const_int 1))\n+                               (const_int 0)))\n+\t      (set (match_dup 0) (ashift:SI (match_dup 1) (const_int 1)))])\n+   (set (match_dup 2) (plus:SI (plus:SI (match_dup 3) (match_dup 3))\n+\t\t\t       (ltu:SI (reg:CC_C CC_REGNUM) (const_int 0))))]\n+  {\n+    operands[2] = gen_highpart (SImode, operands[0]);\n+    operands[0] = gen_lowpart (SImode, operands[0]);\n+    operands[3] = gen_highpart (SImode, operands[1]);\n+    operands[1] = gen_lowpart (SImode, operands[1]);\n+  }\n   [(set_attr \"conds\" \"clob\")\n    (set_attr \"length\" \"8\")]\n )\n@@ -3738,18 +3751,43 @@\n   \"\n )\n \n-(define_insn \"arm_ashrdi3_1bit\"\n+(define_insn_and_split \"arm_ashrdi3_1bit\"\n   [(set (match_operand:DI              0 \"s_register_operand\" \"=r,&r\")\n         (ashiftrt:DI (match_operand:DI 1 \"s_register_operand\" \"0,r\")\n                      (const_int 1)))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_32BIT\"\n-  \"movs\\\\t%R0, %R1, asr #1\\;mov\\\\t%Q0, %Q1, rrx\"\n+  \"#\"   ; \"movs\\\\t%R0, %R1, asr #1\\;mov\\\\t%Q0, %Q1, rrx\"\n+  \"&& reload_completed\"\n+  [(parallel [(set (reg:CC CC_REGNUM)\n+                   (compare:CC (ashiftrt:SI (match_dup 3) (const_int 1))\n+                               (const_int 0)))\n+              (set (match_dup 2) (ashiftrt:SI (match_dup 3) (const_int 1)))])\n+   (set (match_dup 0) (unspec:SI [(match_dup 1)\n+                                  (reg:CC_C CC_REGNUM)]\n+                                 UNSPEC_RRX))]\n+  {\n+    operands[2] = gen_highpart (SImode, operands[0]);\n+    operands[0] = gen_lowpart (SImode, operands[0]);\n+    operands[3] = gen_highpart (SImode, operands[1]);\n+    operands[1] = gen_lowpart (SImode, operands[1]);\n+  }\n   [(set_attr \"conds\" \"clob\")\n-   (set_attr \"insn\" \"mov\")\n    (set_attr \"length\" \"8\")]\n )\n \n+(define_insn \"*rrx\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+        (unspec:SI [(match_operand:SI 1 \"s_register_operand\" \"r\")\n+                    (reg:CC_C CC_REGNUM)]\n+                   UNSPEC_RRX))]\n+  \"TARGET_32BIT\"\n+  \"mov\\\\t%0, %1, rrx\"\n+  [(set_attr \"conds\" \"use\")\n+   (set_attr \"insn\" \"mov\")\n+   (set_attr \"type\" \"alu_shift\")]\n+)\n+\n (define_expand \"ashrsi3\"\n   [(set (match_operand:SI              0 \"s_register_operand\" \"\")\n \t(ashiftrt:SI (match_operand:SI 1 \"s_register_operand\" \"\")\n@@ -3818,15 +3856,28 @@\n   \"\n )\n \n-(define_insn \"arm_lshrdi3_1bit\"\n+(define_insn_and_split \"arm_lshrdi3_1bit\"\n   [(set (match_operand:DI              0 \"s_register_operand\" \"=r,&r\")\n         (lshiftrt:DI (match_operand:DI 1 \"s_register_operand\" \"0,r\")\n                      (const_int 1)))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_32BIT\"\n-  \"movs\\\\t%R0, %R1, lsr #1\\;mov\\\\t%Q0, %Q1, rrx\"\n+  \"#\"   ;  \"movs\\\\t%R0, %R1, lsr #1\\;mov\\\\t%Q0, %Q1, rrx\"\n+  \"&& reload_completed\"\n+  [(parallel [(set (reg:CC CC_REGNUM)\n+                   (compare:CC (lshiftrt:SI (match_dup 3) (const_int 1))\n+                               (const_int 0)))\n+              (set (match_dup 2) (lshiftrt:SI (match_dup 3) (const_int 1)))])\n+   (set (match_dup 0) (unspec:SI [(match_dup 1)\n+                                  (reg:CC_C CC_REGNUM)]\n+                                 UNSPEC_RRX))]\n+  {\n+    operands[2] = gen_highpart (SImode, operands[0]);\n+    operands[0] = gen_lowpart (SImode, operands[0]);\n+    operands[3] = gen_highpart (SImode, operands[1]);\n+    operands[1] = gen_lowpart (SImode, operands[1]);\n+  }\n   [(set_attr \"conds\" \"clob\")\n-   (set_attr \"insn\" \"mov\")\n    (set_attr \"length\" \"8\")]\n )\n \n@@ -3914,6 +3965,23 @@\n \t\t      (const_string \"alu_shift_reg\")))]\n )\n \n+(define_insn \"*shiftsi3_compare\"\n+  [(set (reg:CC CC_REGNUM)\n+\t(compare:CC (match_operator:SI 3 \"shift_operator\"\n+\t\t\t  [(match_operand:SI 1 \"s_register_operand\" \"r\")\n+\t\t\t   (match_operand:SI 2 \"arm_rhs_operand\" \"rM\")])\n+                    (const_int 0)))\n+   (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+\t(match_op_dup 3 [(match_dup 1) (match_dup 2)]))]\n+  \"TARGET_32BIT\"\n+  \"* return arm_output_shift(operands, 1);\"\n+  [(set_attr \"conds\" \"set\")\n+   (set_attr \"shift\" \"1\")\n+   (set (attr \"type\") (if_then_else (match_operand 2 \"const_int_operand\" \"\")\n+\t\t      (const_string \"alu_shift\")\n+\t\t      (const_string \"alu_shift_reg\")))]\n+)\n+\n (define_insn \"*shiftsi3_compare0\"\n   [(set (reg:CC_NOOV CC_REGNUM)\n \t(compare:CC_NOOV (match_operator:SI 3 \"shift_operator\""}, {"sha": "c43a6a6c696b1d193ca4c956b6f8e7d711decb86", "filename": "gcc/config/arm/unspecs.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd660e8e0aa0083754b060dfab0c2487fb8b7382/gcc%2Fconfig%2Farm%2Funspecs.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd660e8e0aa0083754b060dfab0c2487fb8b7382/gcc%2Fconfig%2Farm%2Funspecs.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funspecs.md?ref=dd660e8e0aa0083754b060dfab0c2487fb8b7382", "patch": "@@ -83,6 +83,8 @@\n                         ; FPSCR rounding mode and signal inexactness.\n   UNSPEC_VRINTA         ; Represent a float to integral float rounding\n                         ; towards nearest, ties away from zero.\n+  UNSPEC_RRX            ; Rotate Right with Extend shifts register right\n+                        ; by one place, with Carry flag shifted into bit[31].\n ])\n \n (define_c_enum \"unspec\" ["}]}