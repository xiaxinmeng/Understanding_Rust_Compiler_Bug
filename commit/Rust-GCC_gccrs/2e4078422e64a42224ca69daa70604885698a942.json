{"sha": "2e4078422e64a42224ca69daa70604885698a942", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmU0MDc4NDIyZTY0YTQyMjI0Y2E2OWRhYTcwNjA0ODg1Njk4YTk0Mg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-06-16T14:12:44Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-06-16T14:12:44Z"}, "message": "tree-ssa-alias.c (is_escape_site): Remove.\n\n2009-06-16  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-ssa-alias.c (is_escape_site): Remove.\n\t* tree-ssa-alias.h (enum escape_type): Remove.\n\t(is_escape_site): Likewise.\n\t* tree-ssa-structalias.c (find_func_aliases): Handle escapes\n\tvia casts and asms without deferring to is_escape_site.\n\nFrom-SVN: r148534", "tree": {"sha": "7cde33eea870313f90b60f30132fd44837a55153", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7cde33eea870313f90b60f30132fd44837a55153"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e4078422e64a42224ca69daa70604885698a942", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e4078422e64a42224ca69daa70604885698a942", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e4078422e64a42224ca69daa70604885698a942", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e4078422e64a42224ca69daa70604885698a942/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f2ff88729a86a0db86cc6a6ea98d3d5ebfeaa231", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2ff88729a86a0db86cc6a6ea98d3d5ebfeaa231", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2ff88729a86a0db86cc6a6ea98d3d5ebfeaa231"}], "stats": {"total": 119, "additions": 14, "deletions": 105}, "files": [{"sha": "ab1db07bc94a222d9fc974521e8173f33b33a56d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e4078422e64a42224ca69daa70604885698a942/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e4078422e64a42224ca69daa70604885698a942/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2e4078422e64a42224ca69daa70604885698a942", "patch": "@@ -1,3 +1,11 @@\n+2009-06-16  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-ssa-alias.c (is_escape_site): Remove.\n+\t* tree-ssa-alias.h (enum escape_type): Remove.\n+\t(is_escape_site): Likewise.\n+\t* tree-ssa-structalias.c (find_func_aliases): Handle escapes\n+\tvia casts and asms without deferring to is_escape_site.\n+\n 2009-06-16  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/40446"}, {"sha": "6cbec5de2bf5a2a01e9bff50f7ed30650313096c", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 0, "deletions": 76, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e4078422e64a42224ca69daa70604885698a942/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e4078422e64a42224ca69daa70604885698a942/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=2e4078422e64a42224ca69daa70604885698a942", "patch": "@@ -232,82 +232,6 @@ ptr_derefs_may_alias_p (tree ptr1, tree ptr2)\n   return pt_solutions_intersect (&pi1->pt, &pi2->pt);\n }\n \n-/* Return true if STMT is an \"escape\" site from the current function.  Escape\n-   sites those statements which might expose the address of a variable\n-   outside the current function.  STMT is an escape site iff:\n-\n-   \t1- STMT is a function call, or\n-\t2- STMT is an __asm__ expression, or\n-\t3- STMT is an assignment to a non-local variable, or\n-\t4- STMT is a return statement.\n-\n-   Return the type of escape site found, if we found one, or NO_ESCAPE\n-   if none.  */\n-\n-enum escape_type\n-is_escape_site (gimple stmt)\n-{\n-  if (is_gimple_call (stmt))\n-    {\n-      if (gimple_call_flags (stmt) & (ECF_PURE | ECF_CONST))\n-\treturn ESCAPE_TO_PURE_CONST;\n-\n-      return ESCAPE_TO_CALL;\n-    }\n-  else if (gimple_code (stmt) == GIMPLE_ASM)\n-    return ESCAPE_TO_ASM;\n-  else if (is_gimple_assign (stmt))\n-    {\n-      tree lhs = gimple_assign_lhs (stmt);\n-\n-      /* Get to the base of _REF nodes.  */\n-      if (TREE_CODE (lhs) != SSA_NAME)\n-\tlhs = get_base_address (lhs);\n-\n-      /* If we couldn't recognize the LHS of the assignment, assume that it\n-\t is a non-local store.  */\n-      if (lhs == NULL_TREE)\n-\treturn ESCAPE_UNKNOWN;\n-\n-      if (gimple_assign_cast_p (stmt))\n-\t{\n-\t  tree from = TREE_TYPE (gimple_assign_rhs1 (stmt));\n-\t  tree to = TREE_TYPE (lhs);\n-\n-\t  /* If the RHS is a conversion between a pointer and an integer, the\n-\t     pointer escapes since we can't track the integer.  */\n-\t  if (POINTER_TYPE_P (from) && !POINTER_TYPE_P (to))\n-\t    return ESCAPE_BAD_CAST;\n-\t}\n-\n-      /* If the LHS is an SSA name, it can't possibly represent a non-local\n-\t memory store.  */\n-      if (TREE_CODE (lhs) == SSA_NAME)\n-\treturn NO_ESCAPE;\n-\n-      /* If the LHS is a non-global decl, it isn't a non-local memory store.\n-\t If the LHS escapes, the RHS escape is dealt with in the PTA solver.  */\n-      if (DECL_P (lhs)\n-\t  && !is_global_var (lhs))\n-\treturn NO_ESCAPE;\n-\n-      /* FIXME: LHS is not an SSA_NAME.  Even if it's an assignment to a\n-\t local variables we cannot be sure if it will escape, because we\n-\t don't have information about objects not in SSA form.  Need to\n-\t implement something along the lines of\n-\n-\t J.-D. Choi, M. Gupta, M. J. Serrano, V. C. Sreedhar, and S. P.\n-\t Midkiff, ``Escape analysis for java,'' in Proceedings of the\n-\t Conference on Object-Oriented Programming Systems, Languages, and\n-\t Applications (OOPSLA), pp. 1-19, 1999.  */\n-      return ESCAPE_STORED_IN_GLOBAL;\n-    }\n-  else if (gimple_code (stmt) == GIMPLE_RETURN)\n-    return ESCAPE_TO_RETURN;\n-\n-  return NO_ESCAPE;\n-}\n-\n \n /* Dump alias information on FILE.  */\n "}, {"sha": "9115e61c22c376d2921231d25d7357bdb743988b", "filename": "gcc/tree-ssa-alias.h", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e4078422e64a42224ca69daa70604885698a942/gcc%2Ftree-ssa-alias.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e4078422e64a42224ca69daa70604885698a942/gcc%2Ftree-ssa-alias.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.h?ref=2e4078422e64a42224ca69daa70604885698a942", "patch": "@@ -24,26 +24,6 @@\n #include \"coretypes.h\"\n \n \n-/* The reasons a variable may escape a function.  */\n-enum escape_type \n-{\n-  NO_ESCAPE = 0,\t\t\t/* Doesn't escape.  */\n-  ESCAPE_STORED_IN_GLOBAL = 1 << 0,\n-  ESCAPE_TO_ASM = 1 << 1,\t\t/* Passed by address to an assembly\n-\t\t\t\t\t   statement.  */\n-  ESCAPE_TO_CALL = 1 << 2,\t\t/* Escapes to a function call.  */\n-  ESCAPE_BAD_CAST = 1 << 3,\t\t/* Cast from pointer to integer */\n-  ESCAPE_TO_RETURN = 1 << 4,\t\t/* Returned from function.  */\n-  ESCAPE_TO_PURE_CONST = 1 << 5,\t/* Escapes to a pure or constant\n-\t\t\t\t\t   function call.  */\n-  ESCAPE_IS_GLOBAL = 1 << 6,\t\t/* Is a global variable.  */\n-  ESCAPE_IS_PARM = 1 << 7,\t\t/* Is an incoming function argument.  */\n-  ESCAPE_UNKNOWN = 1 << 8\t\t/* We believe it escapes for\n-\t\t\t\t\t   some reason not enumerated\n-\t\t\t\t\t   above.  */\n-};\n-\n-\n /* The points-to solution.\n \n    The points-to solution is a union of pt_vars and the abstract\n@@ -107,7 +87,6 @@ typedef struct ao_ref_s\n extern void ao_ref_init (ao_ref *, tree);\n extern tree ao_ref_base (ao_ref *);\n extern alias_set_type ao_ref_alias_set (ao_ref *);\n-extern enum escape_type is_escape_site (gimple);\n extern bool ptr_deref_may_alias_global_p (tree);\n extern bool refs_may_alias_p (tree, tree);\n extern bool refs_anti_dependent_p (tree, tree);"}, {"sha": "f60b24c9c521dcf4a39d3346190d42075d0e73b0", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e4078422e64a42224ca69daa70604885698a942/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e4078422e64a42224ca69daa70604885698a942/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=2e4078422e64a42224ca69daa70604885698a942", "patch": "@@ -3561,7 +3561,6 @@ find_func_aliases (gimple origt)\n   VEC(ce_s, heap) *lhsc = NULL;\n   VEC(ce_s, heap) *rhsc = NULL;\n   struct constraint_expr *c;\n-  enum escape_type stmt_escape_type;\n \n   /* Now build constraints expressions.  */\n   if (gimple_code (t) == GIMPLE_PHI)\n@@ -3759,16 +3758,15 @@ find_func_aliases (gimple origt)\n \t  && is_global_var (lhsop))\n \tmake_escape_constraint (rhsop);\n     }\n-\n-  stmt_escape_type = is_escape_site (t);\n-  if (stmt_escape_type == ESCAPE_BAD_CAST)\n+  /* For conversions of pointers to non-pointers the pointer escapes.  */\n+  else if (gimple_assign_cast_p (t)\n+\t   && POINTER_TYPE_P (TREE_TYPE (gimple_assign_rhs1 (t)))\n+\t   && !POINTER_TYPE_P (TREE_TYPE (gimple_assign_lhs (t))))\n     {\n-      gcc_assert (is_gimple_assign (t));\n-      gcc_assert (CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (t))\n-\t\t  || gimple_assign_rhs_code (t) == VIEW_CONVERT_EXPR);\n       make_escape_constraint (gimple_assign_rhs1 (t));\n     }\n-  else if (stmt_escape_type == ESCAPE_TO_ASM)\n+  /* Handle asms conservatively by adding escape constraints to everything.  */\n+  else if (gimple_code (t) == GIMPLE_ASM)\n     {\n       unsigned i, noutputs;\n       const char **oconstraints;"}]}