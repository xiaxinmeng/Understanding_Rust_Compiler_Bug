{"sha": "1145837df5c8c6c7664551878d216671ecf8ef6e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTE0NTgzN2RmNWM4YzZjNzY2NDU1MTg3OGQyMTY2NzFlY2Y4ZWY2ZQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2014-06-04T17:34:40Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2014-06-04T17:34:40Z"}, "message": "recog.h (operand_alternative): Convert reg_class, reject, matched and matches into bitfields.\n\ngcc/\n\t* recog.h (operand_alternative): Convert reg_class, reject,\n\tmatched and matches into bitfields.\n\t(preprocess_constraints): New overload.\n\t(preprocess_insn_constraints): New function.\n\t(preprocess_constraints): Take the insn as parameter.\n\t(recog_op_alt): Change into a pointer.\n\t(target_recog): Add x_op_alt.\n\t* recog.c (asm_op_alt): New variable.\n\t(recog_op_alt): Change into a pointer.\n\t(preprocess_constraints): New overload, replacing the old function\n\tdefinition with one that doesn't use global state.\n\t(preprocess_insn_constraints): New function.\n\t(preprocess_constraints): Use them.  Take the insn as parameter.\n\tUse asm_op_alt for asms.\n\t(recog_init): Free existing x_op_alt entries.\n\t* ira-lives.c (check_and_make_def_conflict): Make operand_alternative\n\tpointer const.\n\t(make_early_clobber_and_input_conflicts): Likewise.\n\t(process_bb_node_lives): Pass the insn to process_constraints.\n\t* reg-stack.c (check_asm_stack_operands): Likewise.\n\t(subst_asm_stack_regs): Likewise.\n\t* regcprop.c (copyprop_hardreg_forward_1): Likewise.\n\t* regrename.c (build_def_use): Likewise.\n\t* sched-deps.c (sched_analyze_insn): Likewise.\n\t* sel-sched.c (get_reg_class, implicit_clobber_conflict_p): Likewise.\n\t* config/arm/arm.c (xscale_sched_adjust_cost): Likewise.\n\t(note_invalid_constants): Likewise.\n\t* config/i386/i386.c (ix86_legitimate_combined_insn): Likewise.\n\t(ix86_legitimate_combined_insn): Make operand_alternative pointer\n\tconst.\n\nFrom-SVN: r211240", "tree": {"sha": "d9fb5507a542d8ccc1d218346a802396dd5c276c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9fb5507a542d8ccc1d218346a802396dd5c276c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1145837df5c8c6c7664551878d216671ecf8ef6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1145837df5c8c6c7664551878d216671ecf8ef6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1145837df5c8c6c7664551878d216671ecf8ef6e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1145837df5c8c6c7664551878d216671ecf8ef6e/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5f2e0797aeb67a52d1b71859e054f55d1cd24ec7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f2e0797aeb67a52d1b71859e054f55d1cd24ec7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f2e0797aeb67a52d1b71859e054f55d1cd24ec7"}], "stats": {"total": 178, "additions": 138, "deletions": 40}, "files": [{"sha": "049ab7d3ba1b7072366410d832d95354cde63cc5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1145837df5c8c6c7664551878d216671ecf8ef6e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1145837df5c8c6c7664551878d216671ecf8ef6e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1145837df5c8c6c7664551878d216671ecf8ef6e", "patch": "@@ -1,3 +1,36 @@\n+2014-06-04  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* recog.h (operand_alternative): Convert reg_class, reject,\n+\tmatched and matches into bitfields.\n+\t(preprocess_constraints): New overload.\n+\t(preprocess_insn_constraints): New function.\n+\t(preprocess_constraints): Take the insn as parameter.\n+\t(recog_op_alt): Change into a pointer.\n+\t(target_recog): Add x_op_alt.\n+\t* recog.c (asm_op_alt): New variable.\n+\t(recog_op_alt): Change into a pointer.\n+\t(preprocess_constraints): New overload, replacing the old function\n+\tdefinition with one that doesn't use global state.\n+\t(preprocess_insn_constraints): New function.\n+\t(preprocess_constraints): Use them.  Take the insn as parameter.\n+\tUse asm_op_alt for asms.\n+\t(recog_init): Free existing x_op_alt entries.\n+\t* ira-lives.c (check_and_make_def_conflict): Make operand_alternative\n+\tpointer const.\n+\t(make_early_clobber_and_input_conflicts): Likewise.\n+\t(process_bb_node_lives): Pass the insn to process_constraints.\n+\t* reg-stack.c (check_asm_stack_operands): Likewise.\n+\t(subst_asm_stack_regs): Likewise.\n+\t* regcprop.c (copyprop_hardreg_forward_1): Likewise.\n+\t* regrename.c (build_def_use): Likewise.\n+\t* sched-deps.c (sched_analyze_insn): Likewise.\n+\t* sel-sched.c (get_reg_class, implicit_clobber_conflict_p): Likewise.\n+\t* config/arm/arm.c (xscale_sched_adjust_cost): Likewise.\n+\t(note_invalid_constants): Likewise.\n+\t* config/i386/i386.c (ix86_legitimate_combined_insn): Likewise.\n+\t(ix86_legitimate_combined_insn): Make operand_alternative pointer\n+\tconst.\n+\n 2014-06-04  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* recog.c (preprocess_constraints): Don't skip disabled alternatives."}, {"sha": "c68d888028fe2a3f3c5b212e2c4ee8c6bcc6b3e2", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1145837df5c8c6c7664551878d216671ecf8ef6e/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1145837df5c8c6c7664551878d216671ecf8ef6e/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=1145837df5c8c6c7664551878d216671ecf8ef6e", "patch": "@@ -11341,7 +11341,7 @@ xscale_sched_adjust_cost (rtx insn, rtx link, rtx dep, int * cost)\n \t     that overlaps with SHIFTED_OPERAND, then we have increase the\n \t     cost of this dependency.  */\n \t  extract_insn (dep);\n-\t  preprocess_constraints ();\n+\t  preprocess_constraints (dep);\n \t  for (opno = 0; opno < recog_data.n_operands; opno++)\n \t    {\n \t      /* We can ignore strict inputs.  */\n@@ -16876,7 +16876,7 @@ note_invalid_constants (rtx insn, HOST_WIDE_INT address, int do_pushes)\n \n   /* Fill in recog_op_alt with information about the constraints of\n      this insn.  */\n-  preprocess_constraints ();\n+  preprocess_constraints (insn);\n \n   const operand_alternative *op_alt = which_op_alt ();\n   for (opno = 0; opno < recog_data.n_operands; opno++)"}, {"sha": "9105132cf1a2be155d7b6cd5cc5d216615dece64", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1145837df5c8c6c7664551878d216671ecf8ef6e/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1145837df5c8c6c7664551878d216671ecf8ef6e/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=1145837df5c8c6c7664551878d216671ecf8ef6e", "patch": "@@ -5827,15 +5827,15 @@ ix86_legitimate_combined_insn (rtx insn)\n       int i;\n \n       extract_insn (insn);\n-      preprocess_constraints ();\n+      preprocess_constraints (insn);\n \n       int n_operands = recog_data.n_operands;\n       int n_alternatives = recog_data.n_alternatives;\n       for (i = 0; i < n_operands; i++)\n \t{\n \t  rtx op = recog_data.operand[i];\n \t  enum machine_mode mode = GET_MODE (op);\n-\t  operand_alternative *op_alt;\n+\t  const operand_alternative *op_alt;\n \t  int offset = 0;\n \t  bool win;\n \t  int j;"}, {"sha": "65133202432826a5abc8671c2f142775502f0bf2", "filename": "gcc/ira-lives.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1145837df5c8c6c7664551878d216671ecf8ef6e/gcc%2Fira-lives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1145837df5c8c6c7664551878d216671ecf8ef6e/gcc%2Fira-lives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-lives.c?ref=1145837df5c8c6c7664551878d216671ecf8ef6e", "patch": "@@ -625,7 +625,7 @@ check_and_make_def_conflict (int alt, int def, enum reg_class def_cl)\n   advance_p = true;\n \n   int n_operands = recog_data.n_operands;\n-  operand_alternative *op_alt = &recog_op_alt[alt * n_operands];\n+  const operand_alternative *op_alt = &recog_op_alt[alt * n_operands];\n   for (use = 0; use < n_operands; use++)\n     {\n       int alt1;\n@@ -646,7 +646,8 @@ check_and_make_def_conflict (int alt, int def, enum reg_class def_cl)\n \t{\n \t  if (!TEST_BIT (enabled, alt1))\n \t    continue;\n-\t  operand_alternative *op_alt1 = &recog_op_alt[alt1 * n_operands];\n+\t  const operand_alternative *op_alt1\n+\t    = &recog_op_alt[alt1 * n_operands];\n \t  if (op_alt1[use].matches == def\n \t      || (use < n_operands - 1\n \t\t  && recog_data.constraints[use][0] == '%'\n@@ -692,7 +693,7 @@ make_early_clobber_and_input_conflicts (void)\n   int n_alternatives = recog_data.n_alternatives;\n   int n_operands = recog_data.n_operands;\n   alternative_mask enabled = recog_data.enabled_alternatives;\n-  operand_alternative *op_alt = recog_op_alt;\n+  const operand_alternative *op_alt = recog_op_alt;\n   for (alt = 0; alt < n_alternatives; alt++, op_alt += n_operands)\n     if (TEST_BIT (enabled, alt))\n       for (def = 0; def < n_operands; def++)\n@@ -1251,7 +1252,7 @@ process_bb_node_lives (ira_loop_tree_node_t loop_tree_node)\n \t      }\n \n \t  extract_insn (insn);\n-\t  preprocess_constraints ();\n+\t  preprocess_constraints (insn);\n \t  process_single_reg_class_operands (false, freq);\n \n \t  /* See which defined values die here.  */"}, {"sha": "0a5d82e1a80b46f1c2c4c0c71351c4ad13ddf980", "filename": "gcc/recog.c", "status": "modified", "additions": 75, "deletions": 16, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1145837df5c8c6c7664551878d216671ecf8ef6e/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1145837df5c8c6c7664551878d216671ecf8ef6e/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=1145837df5c8c6c7664551878d216671ecf8ef6e", "patch": "@@ -81,8 +81,11 @@ struct recog_data_d recog_data;\n /* Contains a vector of operand_alternative structures, such that\n    operand OP of alternative A is at index A * n_operands + OP.\n    Set up by preprocess_constraints.  */\n-struct operand_alternative recog_op_alt[MAX_RECOG_OPERANDS\n-\t\t\t\t\t* MAX_RECOG_ALTERNATIVES];\n+const operand_alternative *recog_op_alt;\n+\n+/* Used to provide recog_op_alt for asms.  */\n+static operand_alternative asm_op_alt[MAX_RECOG_OPERANDS\n+\t\t\t\t      * MAX_RECOG_ALTERNATIVES];\n \n /* On return from `constrain_operands', indicate which alternative\n    was satisfied.  */\n@@ -2324,26 +2327,23 @@ extract_insn (rtx insn)\n   which_alternative = -1;\n }\n \n-/* After calling extract_insn, you can use this function to extract some\n-   information from the constraint strings into a more usable form.\n-   The collected data is stored in recog_op_alt.  */\n+/* Fill in OP_ALT_BASE for an instruction that has N_OPERANDS operands,\n+   N_ALTERNATIVES alternatives and constraint strings CONSTRAINTS.\n+   OP_ALT_BASE has N_ALTERNATIVES * N_OPERANDS entries and CONSTRAINTS\n+   has N_OPERANDS entries.  */\n+\n void\n-preprocess_constraints (void)\n+preprocess_constraints (int n_operands, int n_alternatives,\n+\t\t\tconst char **constraints,\n+\t\t\toperand_alternative *op_alt_base)\n {\n-  int i;\n-\n-  int n_operands = recog_data.n_operands;\n-  int n_alternatives = recog_data.n_alternatives;\n-  int n_entries = n_operands * n_alternatives;\n-  memset (recog_op_alt, 0, n_entries * sizeof (struct operand_alternative));\n-\n-  for (i = 0; i < n_operands; i++)\n+  for (int i = 0; i < n_operands; i++)\n     {\n       int j;\n       struct operand_alternative *op_alt;\n-      const char *p = recog_data.constraints[i];\n+      const char *p = constraints[i];\n \n-      op_alt = recog_op_alt;\n+      op_alt = op_alt_base;\n \n       for (j = 0; j < n_alternatives; j++, op_alt += n_operands)\n \t{\n@@ -2462,6 +2462,59 @@ preprocess_constraints (void)\n     }\n }\n \n+/* Return an array of operand_alternative instructions for\n+   instruction ICODE.  */\n+\n+const operand_alternative *\n+preprocess_insn_constraints (int icode)\n+{\n+  gcc_checking_assert (IN_RANGE (icode, 0, LAST_INSN_CODE));\n+  if (this_target_recog->x_op_alt[icode])\n+    return this_target_recog->x_op_alt[icode];\n+\n+  int n_operands = insn_data[icode].n_operands;\n+  if (n_operands == 0)\n+    return 0;\n+  /* Always provide at least one alternative so that which_op_alt ()\n+     works correctly.  If the instruction has 0 alternatives (i.e. all\n+     constraint strings are empty) then each operand in this alternative\n+     will have anything_ok set.  */\n+  int n_alternatives = MAX (insn_data[icode].n_alternatives, 1);\n+  int n_entries = n_operands * n_alternatives;\n+\n+  operand_alternative *op_alt = XCNEWVEC (operand_alternative, n_entries);\n+  const char **constraints = XALLOCAVEC (const char *, n_operands);\n+\n+  for (int i = 0; i < n_operands; ++i)\n+    constraints[i] = insn_data[icode].operand[i].constraint;\n+  preprocess_constraints (n_operands, n_alternatives, constraints, op_alt);\n+\n+  this_target_recog->x_op_alt[icode] = op_alt;\n+  return op_alt;\n+}\n+\n+/* After calling extract_insn, you can use this function to extract some\n+   information from the constraint strings into a more usable form.\n+   The collected data is stored in recog_op_alt.  */\n+\n+void\n+preprocess_constraints (rtx insn)\n+{\n+  int icode = INSN_CODE (insn);\n+  if (icode >= 0)\n+    recog_op_alt = preprocess_insn_constraints (icode);\n+  else\n+    {\n+      int n_operands = recog_data.n_operands;\n+      int n_alternatives = recog_data.n_alternatives;\n+      int n_entries = n_operands * n_alternatives;\n+      memset (asm_op_alt, 0, n_entries * sizeof (operand_alternative));\n+      preprocess_constraints (n_operands, n_alternatives,\n+\t\t\t      recog_data.constraints, asm_op_alt);\n+      recog_op_alt = asm_op_alt;\n+    }\n+}\n+\n /* Check the operands of an insn against the insn's operand constraints\n    and return 1 if they are valid.\n    The information about the insn's operands, constraints, operand modes\n@@ -4212,4 +4265,10 @@ recog_init ()\n     }\n   memset (this_target_recog->x_enabled_alternatives, 0,\n \t  sizeof (this_target_recog->x_enabled_alternatives));\n+  for (int i = 0; i < LAST_INSN_CODE; ++i)\n+    if (this_target_recog->x_op_alt[i])\n+      {\n+\tfree (this_target_recog->x_op_alt[i]);\n+\tthis_target_recog->x_op_alt[i] = 0;\n+      }\n }"}, {"sha": "2017c85a49873e7056b415fb31ab6d8005d3f5d1", "filename": "gcc/recog.h", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1145837df5c8c6c7664551878d216671ecf8ef6e/gcc%2Frecog.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1145837df5c8c6c7664551878d216671ecf8ef6e/gcc%2Frecog.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.h?ref=1145837df5c8c6c7664551878d216671ecf8ef6e", "patch": "@@ -46,18 +46,18 @@ struct operand_alternative\n   const char *constraint;\n \n   /* The register class valid for this alternative (possibly NO_REGS).  */\n-  enum reg_class cl;\n+  ENUM_BITFIELD (reg_class) cl : 16;\n \n   /* \"Badness\" of this alternative, computed from number of '?' and '!'\n      characters in the constraint string.  */\n-  unsigned int reject;\n+  unsigned int reject : 16;\n \n   /* -1 if no matching constraint was found, or an operand number.  */\n-  int matches;\n+  int matches : 8;\n   /* The same information, but reversed: -1 if this operand is not\n      matched by any other, or the operand number of the operand that\n      matches this one.  */\n-  int matched;\n+  int matched : 8;\n \n   /* Nonzero if '&' was found in the constraint string.  */\n   unsigned int earlyclobber:1;\n@@ -77,6 +77,8 @@ struct operand_alternative\n   /* Nonzero if 'X' was found in the constraint string, or if the constraint\n      string for this alternative was empty.  */\n   unsigned int anything_ok:1;\n+\n+  unsigned int unused : 8;\n };\n \n /* Return the class for operand I of alternative ALT, taking matching\n@@ -142,7 +144,10 @@ extern void insn_extract (rtx);\n extern void extract_insn (rtx);\n extern void extract_constrain_insn_cached (rtx);\n extern void extract_insn_cached (rtx);\n-extern void preprocess_constraints (void);\n+extern void preprocess_constraints (int, int, const char **,\n+\t\t\t\t    operand_alternative *);\n+extern const operand_alternative *preprocess_insn_constraints (int);\n+extern void preprocess_constraints (rtx);\n extern rtx peep2_next_insn (int);\n extern int peep2_regno_dead_p (int, int);\n extern int peep2_reg_dead_p (int, rtx);\n@@ -264,8 +269,7 @@ struct recog_data_d\n \n extern struct recog_data_d recog_data;\n \n-extern struct operand_alternative recog_op_alt[MAX_RECOG_OPERANDS\n-\t\t\t\t\t       * MAX_RECOG_ALTERNATIVES];\n+extern const operand_alternative *recog_op_alt;\n \n /* Return a pointer to an array in which index OP describes the constraints\n    on operand OP of the current instruction alternative (which_alternative).\n@@ -396,6 +400,7 @@ extern int peep2_current_count;\n struct target_recog {\n   bool x_initialized;\n   alternative_mask x_enabled_alternatives[LAST_INSN_CODE];\n+  operand_alternative *x_op_alt[LAST_INSN_CODE];\n };\n \n extern struct target_recog default_target_recog;"}, {"sha": "05ca881e4542bbb7b7f0fadfef08a2ec7019b339", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1145837df5c8c6c7664551878d216671ecf8ef6e/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1145837df5c8c6c7664551878d216671ecf8ef6e/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=1145837df5c8c6c7664551878d216671ecf8ef6e", "patch": "@@ -471,7 +471,7 @@ check_asm_stack_operands (rtx insn)\n   extract_insn (insn);\n   constrain_operands (1);\n \n-  preprocess_constraints ();\n+  preprocess_constraints (insn);\n \n   get_asm_operands_in_out (body, &n_outputs, &n_inputs);\n \n@@ -2029,7 +2029,7 @@ subst_asm_stack_regs (rtx insn, stack_ptr regstack)\n   extract_insn (insn);\n   constrain_operands (1);\n \n-  preprocess_constraints ();\n+  preprocess_constraints (insn);\n   const operand_alternative *op_alt = which_op_alt ();\n \n   get_asm_operands_in_out (body, &n_outputs, &n_inputs);"}, {"sha": "fe370ee70ba587b1037f71b0a1e69704c391e72a", "filename": "gcc/regcprop.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1145837df5c8c6c7664551878d216671ecf8ef6e/gcc%2Fregcprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1145837df5c8c6c7664551878d216671ecf8ef6e/gcc%2Fregcprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregcprop.c?ref=1145837df5c8c6c7664551878d216671ecf8ef6e", "patch": "@@ -774,7 +774,7 @@ copyprop_hardreg_forward_1 (basic_block bb, struct value_data *vd)\n       extract_insn (insn);\n       if (! constrain_operands (1))\n \tfatal_insn_not_found (insn);\n-      preprocess_constraints ();\n+      preprocess_constraints (insn);\n       const operand_alternative *op_alt = which_op_alt ();\n       n_ops = recog_data.n_operands;\n       is_asm = asm_noperands (PATTERN (insn)) >= 0;\n@@ -877,7 +877,7 @@ copyprop_hardreg_forward_1 (basic_block bb, struct value_data *vd)\n \t      extract_insn (insn);\n \t      if (! constrain_operands (1))\n \t\tfatal_insn_not_found (insn);\n-\t      preprocess_constraints ();\n+\t      preprocess_constraints (insn);\n \t    }\n \n \t  /* Otherwise, try all valid registers and see if its valid.  */\n@@ -905,7 +905,7 @@ copyprop_hardreg_forward_1 (basic_block bb, struct value_data *vd)\n \t\t  extract_insn (insn);\n \t\t  if (! constrain_operands (1))\n \t\t    fatal_insn_not_found (insn);\n-\t\t  preprocess_constraints ();\n+\t\t  preprocess_constraints (insn);\n \t\t}\n \t    }\n \t}"}, {"sha": "20f0baa62d768550168126b0bc7f36731949e00d", "filename": "gcc/regrename.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1145837df5c8c6c7664551878d216671ecf8ef6e/gcc%2Fregrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1145837df5c8c6c7664551878d216671ecf8ef6e/gcc%2Fregrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregrename.c?ref=1145837df5c8c6c7664551878d216671ecf8ef6e", "patch": "@@ -1570,7 +1570,7 @@ build_def_use (basic_block bb)\n \t  extract_insn (insn);\n \t  if (! constrain_operands (1))\n \t    fatal_insn_not_found (insn);\n-\t  preprocess_constraints ();\n+\t  preprocess_constraints (insn);\n \t  const operand_alternative *op_alt = which_op_alt ();\n \t  n_ops = recog_data.n_operands;\n \t  untracked_operands = 0;"}, {"sha": "019ec2f9532d983de6250735c58a1cfe9e538e50", "filename": "gcc/sched-deps.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1145837df5c8c6c7664551878d216671ecf8ef6e/gcc%2Fsched-deps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1145837df5c8c6c7664551878d216671ecf8ef6e/gcc%2Fsched-deps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-deps.c?ref=1145837df5c8c6c7664551878d216671ecf8ef6e", "patch": "@@ -2865,7 +2865,7 @@ sched_analyze_insn (struct deps_desc *deps, rtx x, rtx insn)\n       HARD_REG_SET temp;\n \n       extract_insn (insn);\n-      preprocess_constraints ();\n+      preprocess_constraints (insn);\n       ira_implicitly_set_insn_hard_regs (&temp);\n       AND_COMPL_HARD_REG_SET (temp, ira_no_alloc_regs);\n       IOR_HARD_REG_SET (implicit_reg_pending_clobbers, temp);"}, {"sha": "416e91725e84846504c3f8223124bf92e62c5cdb", "filename": "gcc/sel-sched.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1145837df5c8c6c7664551878d216671ecf8ef6e/gcc%2Fsel-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1145837df5c8c6c7664551878d216671ecf8ef6e/gcc%2Fsel-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched.c?ref=1145837df5c8c6c7664551878d216671ecf8ef6e", "patch": "@@ -1019,7 +1019,7 @@ get_reg_class (rtx insn)\n   extract_insn (insn);\n   if (! constrain_operands (1))\n     fatal_insn_not_found (insn);\n-  preprocess_constraints ();\n+  preprocess_constraints (insn);\n   n_ops = recog_data.n_operands;\n \n   const operand_alternative *op_alt = which_op_alt ();\n@@ -2134,7 +2134,7 @@ implicit_clobber_conflict_p (insn_t through_insn, expr_t expr)\n \n   /* Calculate implicit clobbers.  */\n   extract_insn (insn);\n-  preprocess_constraints ();\n+  preprocess_constraints (insn);\n   ira_implicitly_set_insn_hard_regs (&temp);\n   AND_COMPL_HARD_REG_SET (temp, ira_no_alloc_regs);\n "}]}