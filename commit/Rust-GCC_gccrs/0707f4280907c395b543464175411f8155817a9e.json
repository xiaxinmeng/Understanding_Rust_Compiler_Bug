{"sha": "0707f4280907c395b543464175411f8155817a9e", "node_id": "C_kwDOANBUbNoAKDA3MDdmNDI4MDkwN2MzOTViNTQzNDY0MTc1NDExZjgxNTU4MTdhOWU", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2022-04-20T09:00:33Z"}, "committer": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2022-04-20T09:00:33Z"}, "message": "Fix overflows in ipa-modref-tree.cc\n\ngcc/ChangeLog:\n\n2022-04-20  Jan Hubicka  <hubicka@ucw.cz>\n\n\tPR ipa/103818\n\n\t* ipa-modref-tree.cc (modref_access_node::closer_pair_p): Use\n\tpoly_offset_int to avoid overflow.\n\t(modref_access_node::update2): likewise.\n\ngcc/testsuite/ChangeLog:\n\n2022-04-20  Jan Hubicka  <hubicka@ucw.cz>\n\n\t* gcc.c-torture/compile/103818.c: New test.", "tree": {"sha": "bd65a6b7a3bf6b1adfeb10fa3e5af69b12e39e89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd65a6b7a3bf6b1adfeb10fa3e5af69b12e39e89"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0707f4280907c395b543464175411f8155817a9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0707f4280907c395b543464175411f8155817a9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0707f4280907c395b543464175411f8155817a9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0707f4280907c395b543464175411f8155817a9e/comments", "author": null, "committer": null, "parents": [{"sha": "2a6d372ba96cc0836bfd46579ad78c1ee5a3cf8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a6d372ba96cc0836bfd46579ad78c1ee5a3cf8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a6d372ba96cc0836bfd46579ad78c1ee5a3cf8a"}], "stats": {"total": 43, "additions": 35, "deletions": 8}, "files": [{"sha": "44cb645954f2475cffa93a4e9eb850b93f551e79", "filename": "gcc/ipa-modref-tree.cc", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0707f4280907c395b543464175411f8155817a9e/gcc%2Fipa-modref-tree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0707f4280907c395b543464175411f8155817a9e/gcc%2Fipa-modref-tree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-modref-tree.cc?ref=0707f4280907c395b543464175411f8155817a9e", "patch": "@@ -267,34 +267,42 @@ modref_access_node::closer_pair_p (const modref_access_node &a1,\n \n \n   /* Now compute distance of the intervals.  */\n-  poly_int64 dist1, dist2;\n+  poly_offset_int dist1, dist2;\n   if (known_le (offseta1, offsetb1))\n     {\n       if (!known_size_p (a1.max_size))\n \tdist1 = 0;\n       else\n-\tdist1 = offsetb1 - offseta1 - a1.max_size;\n+\tdist1 = (poly_offset_int)offsetb1\n+\t\t- (poly_offset_int)offseta1\n+\t\t- (poly_offset_int)a1.max_size;\n     }\n   else\n     {\n       if (!known_size_p (b1.max_size))\n \tdist1 = 0;\n       else\n-\tdist1 = offseta1 - offsetb1 - b1.max_size;\n+\tdist1 = (poly_offset_int)offseta1\n+\t\t - (poly_offset_int)offsetb1\n+\t\t - (poly_offset_int)b1.max_size;\n     }\n   if (known_le (offseta2, offsetb2))\n     {\n       if (!known_size_p (a2.max_size))\n \tdist2 = 0;\n       else\n-\tdist2 = offsetb2 - offseta2 - a2.max_size;\n+\tdist2 = (poly_offset_int)offsetb2\n+\t\t- (poly_offset_int)offseta2\n+\t\t- (poly_offset_int)a2.max_size;\n     }\n   else\n     {\n       if (!known_size_p (b2.max_size))\n \tdist2 = 0;\n       else\n-\tdist2 = offseta2 - offsetb2 - b2.max_size;\n+\tdist2 = offseta2\n+\t\t- (poly_offset_int)offsetb2\n+\t\t- (poly_offset_int)b2.max_size;\n     }\n   /* It may happen that intervals overlap in case size\n      is different.  Prefer the overlap to non-overlap.  */\n@@ -380,9 +388,16 @@ modref_access_node::update2 (poly_int64 parm_offset1,\n     new_max_size = max_size2;\n   else\n     {\n-      new_max_size = max_size2 + offset2 - offset1;\n-      if (known_le (new_max_size, max_size1))\n-\tnew_max_size = max_size1;\n+      poly_offset_int s = (poly_offset_int)max_size2\n+\t\t\t  + (poly_offset_int)offset2\n+\t\t\t  - (poly_offset_int)offset1;\n+      if (s.to_shwi (&new_max_size))\n+\t{\n+\t  if (known_le (new_max_size, max_size1))\n+\t    new_max_size = max_size1;\n+\t}\n+      else\n+\tnew_max_size = -1;\n     }\n \n   update (parm_offset1, offset1,"}, {"sha": "e6cbe7860cf8f2d99b068479a89fc9d9a82f4489", "filename": "gcc/testsuite/gcc.c-torture/compile/103818.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0707f4280907c395b543464175411f8155817a9e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F103818.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0707f4280907c395b543464175411f8155817a9e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F103818.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F103818.c?ref=0707f4280907c395b543464175411f8155817a9e", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile { target lp64 } } */\n+struct A { int b[1]; };\n+\n+void\n+foo (struct A *d)\n+{\n+  d->b[0] = d->b[-144115188075855873LL] + d->b[11] * d->b[2]\n+          + d->b[0] % d->b[1025] + d->b[5];\n+  d->b[0] = d->b[144678138029277184LL] + d->b[0] & d->b[-3] * d->b[053]\n+          + d->b[7] ^ d->b[-9] + d->b[14] + d->b[9] % d->b[49]\n+          + d->b[024] + d->b[82] & d->b[4096];\n+}"}]}