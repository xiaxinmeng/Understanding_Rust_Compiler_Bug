{"sha": "a17ab4b6add6a7b7cedbef39af442ca99f7cb3f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTE3YWI0YjZhZGQ2YTdiN2NlZGJlZjM5YWY0NDJjYTk5ZjdjYjNmOA==", "commit": {"author": {"name": "Maciej W. Rozycki", "email": "macro@linux-mips.org", "date": "2020-12-05T18:26:25Z"}, "committer": {"name": "Maciej W. Rozycki", "email": "macro@linux-mips.org", "date": "2020-12-05T18:26:25Z"}, "message": "VAX: Provide the `ctz' operation\n\nOur `ffssi2_internal' pattern and the machine FFS instruction, which\ntechnically is a bit-field operation, match the `ctz' operation exactly,\nwith the result produced for the bit-field source operand of zero equal\nto its width as specified with another machine instruction operand, not\ndirectly expressed in RTL and currently hardcoded in the assembly code\nproduced.  In our terms this is the bit size of the machine mode used,\nand although it's SImode now let's be flexible for an upcoming change.\n\nThe operation also sets the Z condition code according to the value of\nthe source operand.\n\n\tgcc/\n\t* config/vax/builtins.md (ffssi2_internal): Rename insn to...\n\t(ctzsi2): ... this.  Update the RTL operation.\n\t(ffssi2): Update accordingly.\n\t* config/vax/vax.c (vax_notice_update_cc): Handle CTZ.\n\t* config/vax/vax.h (CTZ_DEFINED_VALUE_AT_ZERO): New macro.\n\n\tgcc/testsuite/\n\t* gcc.target/vax/ctzsi.c: New test.", "tree": {"sha": "7e53d2b4d7249f08dff03f36144e15ce8759b950", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e53d2b4d7249f08dff03f36144e15ce8759b950"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a17ab4b6add6a7b7cedbef39af442ca99f7cb3f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a17ab4b6add6a7b7cedbef39af442ca99f7cb3f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a17ab4b6add6a7b7cedbef39af442ca99f7cb3f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a17ab4b6add6a7b7cedbef39af442ca99f7cb3f8/comments", "author": null, "committer": null, "parents": [{"sha": "da076a8b12c17b10cfe2e6a9c5ea84aa0a0f5ebf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da076a8b12c17b10cfe2e6a9c5ea84aa0a0f5ebf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da076a8b12c17b10cfe2e6a9c5ea84aa0a0f5ebf"}], "stats": {"total": 28, "additions": 25, "deletions": 3}, "files": [{"sha": "e8cefe70d25334e7ab1343bf72c405e39f4124bf", "filename": "gcc/config/vax/builtins.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a17ab4b6add6a7b7cedbef39af442ca99f7cb3f8/gcc%2Fconfig%2Fvax%2Fbuiltins.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a17ab4b6add6a7b7cedbef39af442ca99f7cb3f8/gcc%2Fconfig%2Fvax%2Fbuiltins.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fbuiltins.md?ref=a17ab4b6add6a7b7cedbef39af442ca99f7cb3f8", "patch": "@@ -39,17 +39,17 @@\n   rtx cond = gen_rtx_NE (VOIDmode, cc0_rtx, const0_rtx);\n   rtx target = gen_rtx_IF_THEN_ELSE (VOIDmode, cond, label_ref, pc_rtx);\n \n-  emit_insn (gen_ffssi2_internal (operands[0], operands[1]));\n+  emit_insn (gen_ctzsi2 (operands[0], operands[1]));\n   emit_jump_insn (gen_rtx_SET (pc_rtx, target));\n   emit_insn (gen_negsi2 (operands[0], const1_rtx));\n   emit_label (label);\n   emit_insn (gen_addsi3 (operands[0], operands[0], const1_rtx));\n   DONE;\n }\")\n \n-(define_insn \"ffssi2_internal\"\n+(define_insn \"ctzsi2\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rQ\")\n-\t(ffs:SI (match_operand:SI 1 \"general_operand\" \"nrQT\")))\n+\t(ctz:SI (match_operand:SI 1 \"general_operand\" \"nrQT\")))\n    (set (cc0)\n \t(compare (match_dup 1)\n \t\t (const_int 0)))]"}, {"sha": "69a05b33e9590e14b1adef96bf50fb715317fc8c", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a17ab4b6add6a7b7cedbef39af442ca99f7cb3f8/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a17ab4b6add6a7b7cedbef39af442ca99f7cb3f8/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=a17ab4b6add6a7b7cedbef39af442ca99f7cb3f8", "patch": "@@ -1135,6 +1135,9 @@ vax_notice_update_cc (rtx exp, rtx insn ATTRIBUTE_UNUSED)\n \t    case REG:\n \t      cc_status.flags = CC_NO_OVERFLOW;\n \t      break;\n+\t    case CTZ:\n+\t      cc_status.flags = CC_NOT_NEGATIVE;\n+\t      break;\n \t    default:\n \t      break;\n \t    }"}, {"sha": "43182ff1d888f1c816f5e8dd31042b572cf6fb84", "filename": "gcc/config/vax/vax.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a17ab4b6add6a7b7cedbef39af442ca99f7cb3f8/gcc%2Fconfig%2Fvax%2Fvax.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a17ab4b6add6a7b7cedbef39af442ca99f7cb3f8/gcc%2Fconfig%2Fvax%2Fvax.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.h?ref=a17ab4b6add6a7b7cedbef39af442ca99f7cb3f8", "patch": "@@ -683,3 +683,7 @@ VAX operand formatting codes:\n    by the proper FDE definition.  */\n #define INCOMING_RETURN_ADDR_RTX gen_rtx_REG (Pmode, PC_REGNUM)\n \n+/* Upon failure to find the bit the FFS hardware instruction returns\n+   the position of the bit immediately following the field specified.  */\n+#define CTZ_DEFINED_VALUE_AT_ZERO(MODE, VALUE)\t\\\n+  ((VALUE) = GET_MODE_BITSIZE (MODE), 2)"}, {"sha": "8be42712c7715d86342220e153aad05e21169480", "filename": "gcc/testsuite/gcc.target/vax/ctzsi.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a17ab4b6add6a7b7cedbef39af442ca99f7cb3f8/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fctzsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a17ab4b6add6a7b7cedbef39af442ca99f7cb3f8/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fctzsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fctzsi.c?ref=a17ab4b6add6a7b7cedbef39af442ca99f7cb3f8", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+\n+int\n+ctzsi (unsigned int x)\n+{\n+  return __builtin_ctz (x);\n+}\n+\n+/* Expect assembly like:\n+\n+\tffs $0,$32,4(%ap),%r0\n+\n+ */\n+\n+/* { dg-final { scan-assembler \"\\tffs \\\\\\$0,\\\\\\$32,\" } } */"}]}