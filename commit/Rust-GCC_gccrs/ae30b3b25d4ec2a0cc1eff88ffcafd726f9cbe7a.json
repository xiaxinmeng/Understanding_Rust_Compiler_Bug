{"sha": "ae30b3b25d4ec2a0cc1eff88ffcafd726f9cbe7a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWUzMGIzYjI1ZDRlYzJhMGNjMWVmZjg4ZmZjYWZkNzI2ZjljYmU3YQ==", "commit": {"author": {"name": "Mohan Embar", "email": "gnustuff@thisiscool.com", "date": "2004-01-30T06:33:43Z"}, "committer": {"name": "Mohan Embar", "email": "membar@gcc.gnu.org", "date": "2004-01-30T06:33:43Z"}, "message": "BufferedReader.java (sbuf): New field.\n\n\t* java/io/BufferedReader.java (sbuf): New field.\n\t(readLine): Use String.valueOf instead of new String() as per\n\tPer Bothner's suggestion. Use instance sbuf field instead of a\n\tlocal StringBuffer instance.\n\t* java/io/InputStreamReader.java (read(char[],int,int)): Pass the\n\tcaller's buffer to refill().\n\t(read(void)): Pass our internal work buffer to refill if our\n\tinput queue is empty.\n\t(refill): Changed return type to int. Use the specified buffer\n\tinstead of our work buffer as per Bryce McKinlay's suggestion.\n\tReturn the number of characters read or -1 for EOF.\n\nFrom-SVN: r76927", "tree": {"sha": "f57a095d33f60f3fd7a5ada51e038edd80f676f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f57a095d33f60f3fd7a5ada51e038edd80f676f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae30b3b25d4ec2a0cc1eff88ffcafd726f9cbe7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae30b3b25d4ec2a0cc1eff88ffcafd726f9cbe7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae30b3b25d4ec2a0cc1eff88ffcafd726f9cbe7a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae30b3b25d4ec2a0cc1eff88ffcafd726f9cbe7a/comments", "author": null, "committer": null, "parents": [{"sha": "eadccbea1257934ae7446a921cdb1c12431b8f58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eadccbea1257934ae7446a921cdb1c12431b8f58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eadccbea1257934ae7446a921cdb1c12431b8f58"}], "stats": {"total": 66, "additions": 41, "deletions": 25}, "files": [{"sha": "aa6242fca3621c65d5c24a46f396a94ace230e19", "filename": "libjava/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae30b3b25d4ec2a0cc1eff88ffcafd726f9cbe7a/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae30b3b25d4ec2a0cc1eff88ffcafd726f9cbe7a/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=ae30b3b25d4ec2a0cc1eff88ffcafd726f9cbe7a", "patch": "@@ -1,3 +1,17 @@\n+2004-01-29  Mohan Embar  <gnustuff@thisiscool.com>\n+\n+\t* java/io/BufferedReader.java (sbuf): New field.\n+\t(readLine): Use String.valueOf instead of new String() as per\n+\tPer Bothner's suggestion. Use instance sbuf field instead of a\n+\tlocal StringBuffer instance.\n+\t* java/io/InputStreamReader.java (read(char[],int,int)): Pass the\n+\tcaller's buffer to refill().\n+\t(read(void)): Pass our internal work buffer to refill if our\n+\tinput queue is empty.\n+\t(refill): Changed return type to int. Use the specified buffer\n+\tinstead of our work buffer as per Bryce McKinlay's suggestion.\n+\tReturn the number of characters read or -1 for EOF.\n+\n 2004-01-29  Scott Gilbertson  <scottg@mantatest.com>\n \n \t* gnu/awt/xlib/XCanvasPeer.java (handleEvent): Implemented."}, {"sha": "1bc0dcf7994d27f57b177a114c1b699cf8b7dbf9", "filename": "libjava/java/io/BufferedReader.java", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae30b3b25d4ec2a0cc1eff88ffcafd726f9cbe7a/libjava%2Fjava%2Fio%2FBufferedReader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae30b3b25d4ec2a0cc1eff88ffcafd726f9cbe7a/libjava%2Fjava%2Fio%2FBufferedReader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FBufferedReader.java?ref=ae30b3b25d4ec2a0cc1eff88ffcafd726f9cbe7a", "patch": "@@ -1,5 +1,5 @@\n /* BufferedReader.java\n-   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003 \n+   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004\n      Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n@@ -88,6 +88,11 @@ public class BufferedReader extends Reader\n   // This is package-private because it is used by LineNumberReader.\n   static final int DEFAULT_BUFFER_SIZE = 8192;\n \n+  /**\n+   * The line buffer for <code>readLine</code>.\n+   */\n+  private StringBuffer sbuf = null;\n+\n   /**\n     * Create a new <code>BufferedReader</code> that will read from the \n     * specified subordinate stream with a default buffer size of 8192 chars.\n@@ -439,7 +444,7 @@ public String readLine() throws IOException\n     int i = lineEnd(limit);\n     if (i < limit)\n       {\n-\tString str = new String(buffer, pos, i - pos);\n+\tString str = String.valueOf(buffer, pos, i - pos);\n \tpos = i + 1;\n \t// If the last char in the buffer is a '\\r', we must remember\n \t// to check if the next char to be read after the buffer is refilled\n@@ -450,7 +455,10 @@ public String readLine() throws IOException\n \t    pos++;\n \treturn str;\n       }\n-    StringBuffer sbuf = new StringBuffer(200);\n+    if (sbuf == null)\n+      sbuf = new StringBuffer(200);\n+    else\n+      sbuf.setLength(0);\n     sbuf.append(buffer, pos, i - pos);\n     pos = i;\n     // We only want to return null when no characters were read before"}, {"sha": "07be132510bf1c4825c54d56887e57915142cd14", "filename": "libjava/java/io/InputStreamReader.java", "status": "modified", "additions": 16, "deletions": 22, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae30b3b25d4ec2a0cc1eff88ffcafd726f9cbe7a/libjava%2Fjava%2Fio%2FInputStreamReader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae30b3b25d4ec2a0cc1eff88ffcafd726f9cbe7a/libjava%2Fjava%2Fio%2FInputStreamReader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FInputStreamReader.java?ref=ae30b3b25d4ec2a0cc1eff88ffcafd726f9cbe7a", "patch": "@@ -1,5 +1,5 @@\n /* InputStreamReader.java -- Reader than transforms bytes to chars\n-   Copyright (C) 1998, 1999, 2001, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2001, 2003, 2004 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -231,10 +231,8 @@ public int read (char[] buf, int offset, int length) throws IOException\n \tint wavail = wcount - wpos;\n \tif (wavail <= 0)\n \t  {\n-\t    // Nothing waiting, so refill our buffer.\n-\t    if (! refill ())\n-\t      return -1;\n-\t    wavail = wcount - wpos;\n+\t    // Nothing waiting, so refill their buffer.\n+\t    return refill(buf, offset, length);\n \t  }\n \n \tif (length > wavail)\n@@ -262,24 +260,24 @@ public int read() throws IOException\n \tint wavail = wcount - wpos;\n \tif (wavail <= 0)\n \t  {\n-\t    // Nothing waiting, so refill our buffer.\n-\t    if (! refill ())\n+\t    // Nothing waiting, so refill our internal buffer.\n+\t    wpos = wcount = 0;\n+\t    if (work == null)\n+\t       work = new char[100];\n+\t    int count = refill(work, 0, work.length);\n+\t    if (count == -1)\n \t      return -1;\n+\t    wcount += count;\n \t  }\n \n \treturn work[wpos++];\n       }\n   }\n \n-  // Read more bytes and convert them into the WORK buffer.\n-  // Return false on EOF.\n-  private boolean refill () throws IOException\n+  // Read more bytes and convert them into the specified buffer.\n+  // Returns the number of converted characters or -1 on EOF.\n+  private int refill(char[] buf, int offset, int length) throws IOException\n   {\n-    wcount = wpos = 0;\n-\n-    if (work == null)\n-      work = new char[100];\n-\n     for (;;)\n       {\n \t// We have knowledge of the internals of BufferedInputStream\n@@ -290,17 +288,13 @@ private boolean refill () throws IOException\n \tboolean r = in.pos < in.count || in.refill ();\n \tin.reset ();\n \tif (! r)\n-\t  return false;\n+\t  return -1;\n \tconverter.setInput(in.buf, in.pos, in.count);\n-\tint count = converter.read (work, wpos, work.length - wpos);\n+\tint count = converter.read(buf, offset, length);\n \tin.skip(converter.inpos - in.pos);\n \tif (count > 0)\n-\t  {\n-\t    wcount += count;\n-\t    return true;\n-\t  }\n+\t  return count;\n       }\n   }\n-\n } // class InputStreamReader\n "}]}