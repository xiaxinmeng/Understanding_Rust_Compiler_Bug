{"sha": "1696d58da2675e9007645304d010710e34022482", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTY5NmQ1OGRhMjY3NWU5MDA3NjQ1MzA0ZDAxMDcxMGUzNDAyMjQ4Mg==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2014-08-01T14:46:11Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-08-01T14:46:11Z"}, "message": "restrict.adb (Update_Restrictions): For restrictions with a maximum parameter (e.g.\n\n2014-08-01  Ed Schonberg  <schonberg@adacore.com>\n\n\t* restrict.adb (Update_Restrictions): For restrictions with a\n\tmaximum parameter (e.g. number of protected entries in Ravenscar)\n\tdo not compute the maximum of the violation over several objects,\n\tbecause the restriction is per-object.\n\t(Check_Restriction): After possible message, reset the value\n\tof of a checked max_parameter restriction to zero, to prevent\n\tcascaded errors.\n\t* sem_ch3.adb (Build_Derived_Private_Type): Use base of parent\n\t(sub)type to determine whether derived type should be on the\n\tlist of private dependents of a type whose full view may become\n\tvisible subsequently.\n\nFrom-SVN: r213483", "tree": {"sha": "8bd9b3e28a77d47e7ac709aba3431ab20ad8a3ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8bd9b3e28a77d47e7ac709aba3431ab20ad8a3ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1696d58da2675e9007645304d010710e34022482", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1696d58da2675e9007645304d010710e34022482", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1696d58da2675e9007645304d010710e34022482", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1696d58da2675e9007645304d010710e34022482/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9a30c7c4092fa2e7f46ee54883404a3fe34f2919", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a30c7c4092fa2e7f46ee54883404a3fe34f2919", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a30c7c4092fa2e7f46ee54883404a3fe34f2919"}], "stats": {"total": 58, "additions": 42, "deletions": 16}, "files": [{"sha": "cf119859b70ced991005747de0279711626c03de", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1696d58da2675e9007645304d010710e34022482/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1696d58da2675e9007645304d010710e34022482/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1696d58da2675e9007645304d010710e34022482", "patch": "@@ -1,3 +1,17 @@\n+2014-08-01  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* restrict.adb (Update_Restrictions): For restrictions with a\n+\tmaximum parameter (e.g. number of protected entries in Ravenscar)\n+\tdo not compute the maximum of the violation over several objects,\n+\tbecause the restriction is per-object.\n+\t(Check_Restriction): After possible message, reset the value\n+\tof of a checked max_parameter restriction to zero, to prevent\n+\tcascaded errors.\n+\t* sem_ch3.adb (Build_Derived_Private_Type): Use base of parent\n+\t(sub)type to determine whether derived type should be on the\n+\tlist of private dependents of a type whose full view may become\n+\tvisible subsequently.\n+\n 2014-08-01  Olivier Hainque  <hainque@adacore.com>\n \n \t* gcc-interface/Make-lang.in (ADA_TOOLS_FLAGS_TO_PASS, native): use"}, {"sha": "ff44e6f75e46e8238e43df7dd20bce3e0643999b", "filename": "gcc/ada/restrict.adb", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1696d58da2675e9007645304d010710e34022482/gcc%2Fada%2Frestrict.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1696d58da2675e9007645304d010710e34022482/gcc%2Fada%2Frestrict.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frestrict.adb?ref=1696d58da2675e9007645304d010710e34022482", "patch": "@@ -427,6 +427,7 @@ package body Restrict is\n                if VV < 0 then\n                   Info.Unknown (R) := True;\n                   Info.Count (R) := 1;\n+\n                else\n                   Info.Count (R) := VV;\n                end if;\n@@ -442,10 +443,11 @@ package body Restrict is\n             if VV < 0 then\n                Info.Unknown (R) := True;\n \n-            --  If checked by maximization, do maximization\n+            --  If checked by maximization, nothing to do because the\n+            --  check is per-object.\n \n             elsif R in Checked_Max_Parameter_Restrictions then\n-               Info.Count (R) := Integer'Max (Info.Count (R), VV);\n+               null;\n \n             --  If checked by adding, do add, checking for overflow\n \n@@ -554,6 +556,13 @@ package body Restrict is\n          Msg_Issued := True;\n          Restriction_Msg (R, N);\n       end if;\n+\n+      --  For Max_Entries and the like, do not carry forward the violation\n+      --  count because it does not affect later declarations.\n+\n+      if R in Checked_Max_Parameter_Restrictions then\n+         Restrictions.Count (R) := 0;\n+      end if;\n    end Check_Restriction;\n \n    -------------------------------------"}, {"sha": "ce46257525a40230c5c725bf9b6f164559f1880e", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1696d58da2675e9007645304d010710e34022482/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1696d58da2675e9007645304d010710e34022482/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=1696d58da2675e9007645304d010710e34022482", "patch": "@@ -6540,13 +6540,14 @@ package body Sem_Ch3 is\n       Is_Completion : Boolean;\n       Derive_Subps  : Boolean := True)\n    is\n-      Loc         : constant Source_Ptr := Sloc (N);\n-      Der_Base    : Entity_Id;\n-      Discr       : Entity_Id;\n-      Full_Der    : Entity_Id;\n-      Full_P      : Entity_Id;\n-      Last_Discr  : Entity_Id;\n-      Par_Scope   : constant Entity_Id := Scope (Base_Type (Parent_Type));\n+      Loc        : constant Source_Ptr := Sloc (N);\n+      Par_Base   : constant Entity_Id  := Base_Type (Parent_Type);\n+      Par_Scope  : constant Entity_Id  := Scope (Par_Base);\n+      Der_Base   : Entity_Id;\n+      Discr      : Entity_Id;\n+      Full_Der   : Entity_Id;\n+      Full_P     : Entity_Id;\n+      Last_Discr : Entity_Id;\n \n       procedure Build_Full_Derivation;\n       --  Build full derivation, i.e. derive from the full view\n@@ -6984,10 +6985,12 @@ package body Sem_Ch3 is\n          Set_Private_Dependents (Derived_Type, New_Elmt_List);\n       end if;\n \n-      if Is_Private_Type (Parent_Type)\n-        and then Base_Type (Parent_Type) = Parent_Type\n-        and then In_Open_Scopes (Scope (Parent_Type))\n-      then\n+      --  If the parent base type is in scope, add the derived type to its\n+      --  list of private dependents, because its full view may become\n+      --  visible subsequently (in a nested private part, a body, or in a\n+      --  further child unit).\n+\n+      if Is_Private_Type (Par_Base) and then In_Open_Scopes (Par_Scope) then\n          Append_Elmt (Derived_Type, Private_Dependents (Parent_Type));\n \n          --  Check for unusual case where a type completed by a private\n@@ -7008,9 +7011,9 @@ package body Sem_Ch3 is\n          then\n             --  In this case, the full view of the parent type will become\n             --  visible in the body of the enclosing child, and only then will\n-            --  the current type be possibly non-private. We build an\n-            --  underlying full view that will be installed when the enclosing\n-            --  child body is compiled.\n+            --  the current type be possibly non-private. Build an underlying\n+            --  full view that will be installed when the enclosing child body\n+            --  is compiled.\n \n             if Present (Underlying_Full_View (Derived_Type)) then\n                Full_Der := Underlying_Full_View (Derived_Type);"}]}