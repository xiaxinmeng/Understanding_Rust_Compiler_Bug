{"sha": "5852948c5b998dc8ddd9073ca68c097b96180838", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTg1Mjk0OGM1Yjk5OGRjOGRkZDkwNzNjYTY4YzA5N2I5NjE4MDgzOA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2007-04-12T09:15:53Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2007-04-12T09:15:53Z"}, "message": "re PR tree-optimization/24689 (operand_equal_p does not return true for some equivalent ARRAY_REF)\n\n2007-04-12  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/24689\n\tPR tree-optimization/31307\n\t* fold-const.c (operand_equal_p): Compare INTEGER_CST array\n\tindices by value.\n\t* gimplify.c (canonicalize_addr_expr): To be consistent with\n\tgimplify_compound_lval only set operands two and three of\n\tARRAY_REFs if they are not gimple_min_invariant.  This makes\n\tit never at this place.\n\t* tree-ssa-ccp.c (maybe_fold_offset_to_array_ref): Likewise.\n\n\t* g++.dg/tree-ssa/pr31307.C: New testcase.\n\t* gcc.dg/tree-ssa/pr24689.c: Likewise.\n\nFrom-SVN: r123736", "tree": {"sha": "03bea213dba9cc1181e65e0dcad9f2ea2208af80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03bea213dba9cc1181e65e0dcad9f2ea2208af80"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5852948c5b998dc8ddd9073ca68c097b96180838", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5852948c5b998dc8ddd9073ca68c097b96180838", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5852948c5b998dc8ddd9073ca68c097b96180838", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5852948c5b998dc8ddd9073ca68c097b96180838/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d51347f96ce3765c6fad1c4e50c2b911e350339f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d51347f96ce3765c6fad1c4e50c2b911e350339f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d51347f96ce3765c6fad1c4e50c2b911e350339f"}], "stats": {"total": 99, "additions": 91, "deletions": 8}, "files": [{"sha": "d8a3c651c2b3ed835e6396a0e1e62be4fdf3f784", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5852948c5b998dc8ddd9073ca68c097b96180838/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5852948c5b998dc8ddd9073ca68c097b96180838/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5852948c5b998dc8ddd9073ca68c097b96180838", "patch": "@@ -1,3 +1,15 @@\n+2007-04-12  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/24689\n+\tPR tree-optimization/31307\n+\t* fold-const.c (operand_equal_p): Compare INTEGER_CST array\n+\tindices by value.\n+\t* gimplify.c (canonicalize_addr_expr): To be consistent with\n+\tgimplify_compound_lval only set operands two and three of\n+\tARRAY_REFs if they are not gimple_min_invariant.  This makes\n+\tit never at this place.\n+\t* tree-ssa-ccp.c (maybe_fold_offset_to_array_ref): Likewise.\n+\n 2007-04-11  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \t* pa.c (pa_som_asm_init_sections): Ensure that cfun->machine is not"}, {"sha": "857065f1344441503769b78d575deb1c4d257936", "filename": "gcc/fold-const.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5852948c5b998dc8ddd9073ca68c097b96180838/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5852948c5b998dc8ddd9073ca68c097b96180838/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=5852948c5b998dc8ddd9073ca68c097b96180838", "patch": "@@ -2884,9 +2884,13 @@ operand_equal_p (tree arg0, tree arg1, unsigned int flags)\n \n \tcase ARRAY_REF:\n \tcase ARRAY_RANGE_REF:\n-\t  /* Operands 2 and 3 may be null.  */\n+\t  /* Operands 2 and 3 may be null.\n+\t     Compare the array index by value if it is constant first as we\n+\t     may have different types but same value here.  */\n \t  return (OP_SAME (0)\n-\t\t  && OP_SAME (1)\n+\t\t  && (tree_int_cst_equal (TREE_OPERAND (arg0, 1),\n+\t\t\t\t\t  TREE_OPERAND (arg1, 1))\n+\t\t      || OP_SAME (1))\n \t\t  && OP_SAME_WITH_NULL (2)\n \t\t  && OP_SAME_WITH_NULL (3));\n "}, {"sha": "0b6ec34d97471dc946aba2fc54bff697b7f2fa28", "filename": "gcc/gimplify.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5852948c5b998dc8ddd9073ca68c097b96180838/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5852948c5b998dc8ddd9073ca68c097b96180838/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=5852948c5b998dc8ddd9073ca68c097b96180838", "patch": "@@ -1607,9 +1607,7 @@ canonicalize_addr_expr (tree *expr_p)\n   /* All checks succeeded.  Build a new node to merge the cast.  */\n   *expr_p = build4 (ARRAY_REF, dctype, obj_expr,\n \t\t    TYPE_MIN_VALUE (TYPE_DOMAIN (datype)),\n-\t\t    TYPE_MIN_VALUE (TYPE_DOMAIN (datype)),\n-\t\t    size_binop (EXACT_DIV_EXPR, TYPE_SIZE_UNIT (dctype),\n-\t\t\t\tsize_int (TYPE_ALIGN_UNIT (dctype))));\n+\t\t    NULL_TREE, NULL_TREE);\n   *expr_p = build1 (ADDR_EXPR, ctype, *expr_p);\n }\n "}, {"sha": "f431bcb45013c9b76b6a9e78525c917d9775161f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5852948c5b998dc8ddd9073ca68c097b96180838/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5852948c5b998dc8ddd9073ca68c097b96180838/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5852948c5b998dc8ddd9073ca68c097b96180838", "patch": "@@ -1,3 +1,10 @@\n+2007-04-12  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/24689\n+\tPR tree-optimization/31307\n+\t* g++.dg/tree-ssa/pr31307.C: New testcase.\n+\t* gcc.dg/tree-ssa/pr24689.c: Likewise.\n+\n 2007-04-12  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/31472"}, {"sha": "bdfe5bd5ac18d407e287ffe19bd1b06a4581505a", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr31307.C", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5852948c5b998dc8ddd9073ca68c097b96180838/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr31307.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5852948c5b998dc8ddd9073ca68c097b96180838/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr31307.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr31307.C?ref=5852948c5b998dc8ddd9073ca68c097b96180838", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-optimized\" } */\n+\n+union MY_M128\n+{\n+  double i;\n+};\n+\n+struct RegFile\n+{\n+  MY_M128 dst[4];\n+};\n+\n+__inline__ __attribute__((always_inline)) static void\n+MEM_OPT_LOAD(MY_M128* reg, double* mem)\n+{\n+  reg[0].i = *mem;\n+}\n+\n+void _ia32_movntdq (double *, double);\n+\n+__inline__ __attribute__((always_inline)) static void\n+MEM_OPT_STORE(MY_M128* reg, double* mem)\n+{\n+  _ia32_movntdq ((double*)mem, (double)reg[0].i);\n+}\n+\n+double _mm_adds_epu8 (double __A, double __B);\n+\n+int test(unsigned char *d)\n+{ \n+  RegFile r;\n+  MEM_OPT_LOAD((r.dst) , ((double*) d)); \n+  r.dst[0].i = _mm_adds_epu8(r.dst[0].i, r.dst[0].i);\n+  MEM_OPT_STORE((r.dst), (double*) d);\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"r.dst\" \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "4fe74b65882f1df10c2927a5ffd8b83c61049cfa", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr24689.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5852948c5b998dc8ddd9073ca68c097b96180838/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr24689.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5852948c5b998dc8ddd9073ca68c097b96180838/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr24689.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr24689.c?ref=5852948c5b998dc8ddd9073ca68c097b96180838", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-optimized\" } */\n+\n+extern void bar (unsigned int);\n+\n+int\n+foo (void)\n+{\n+  char buf[1] = { 3 };\n+  const char *p = buf;\n+  const char **q = &p;\n+  unsigned int ch;\n+  switch (**q)\n+    {\n+    case 1:  ch = 5; break;\n+    default: ch = 0; break;\n+    }\n+\n+  bar (ch);\n+  return ch;\n+}\n+\n+/* { dg-final { scan-tree-dump \"return 0;\" \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "530dee01a094db4d69d3af0f47647b90f328dcc4", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5852948c5b998dc8ddd9073ca68c097b96180838/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5852948c5b998dc8ddd9073ca68c097b96180838/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=5852948c5b998dc8ddd9073ca68c097b96180838", "patch": "@@ -1632,9 +1632,7 @@ maybe_fold_offset_to_array_ref (tree base, tree offset, tree orig_type)\n   if (!integer_zerop (elt_offset))\n     idx = int_const_binop (PLUS_EXPR, idx, elt_offset, 0);\n \n-  return build4 (ARRAY_REF, orig_type, base, idx, min_idx,\n-\t\t size_int (tree_low_cst (elt_size, 1)\n-\t\t\t   / (TYPE_ALIGN_UNIT (elt_type))));\n+  return build4 (ARRAY_REF, orig_type, base, idx, NULL_TREE, NULL_TREE);\n }\n \n "}]}