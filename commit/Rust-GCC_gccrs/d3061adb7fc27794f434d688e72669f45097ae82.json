{"sha": "d3061adb7fc27794f434d688e72669f45097ae82", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDMwNjFhZGI3ZmMyNzc5NGY0MzRkNjg4ZTcyNjY5ZjQ1MDk3YWU4Mg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2012-11-15T01:53:37Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2012-11-15T01:53:37Z"}, "message": "class.c (finish_struct_1): Check virtual functions for missing ABI tags.\n\n\t* class.c (finish_struct_1): Check virtual functions\n\tfor missing ABI tags.\n\nFrom-SVN: r193525", "tree": {"sha": "ed887803eac4ff793a67dab2e4942a835b9efc88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed887803eac4ff793a67dab2e4942a835b9efc88"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3061adb7fc27794f434d688e72669f45097ae82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3061adb7fc27794f434d688e72669f45097ae82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3061adb7fc27794f434d688e72669f45097ae82", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3061adb7fc27794f434d688e72669f45097ae82/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4fce678f8afd3d667becf67576b7d88d07670805", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fce678f8afd3d667becf67576b7d88d07670805", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fce678f8afd3d667becf67576b7d88d07670805"}], "stats": {"total": 19, "additions": 18, "deletions": 1}, "files": [{"sha": "af55e29add394ecad609168fb6b73c9286bc5ff6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3061adb7fc27794f434d688e72669f45097ae82/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3061adb7fc27794f434d688e72669f45097ae82/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d3061adb7fc27794f434d688e72669f45097ae82", "patch": "@@ -1,5 +1,8 @@\n 2012-11-13  Jason Merrill  <jason@redhat.com>\n \n+\t* class.c (finish_struct_1): Check virtual functions\n+\tfor missing ABI tags.\n+\n \tPR c++/55275\n \t* pt.c (maybe_process_partial_specialization): Update\n \tDECL_SOURCE_LOCATION for new specializations."}, {"sha": "cdc02ae7d7aee2a199fb7388bcb9baf1420cf252", "filename": "gcc/cp/class.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3061adb7fc27794f434d688e72669f45097ae82/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3061adb7fc27794f434d688e72669f45097ae82/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=d3061adb7fc27794f434d688e72669f45097ae82", "patch": "@@ -6275,6 +6275,12 @@ finish_struct_1 (tree t)\n \t/* Here we know enough to change the type of our virtual\n \t   function table, but we will wait until later this function.  */\n \tbuild_primary_vtable (CLASSTYPE_PRIMARY_BINFO (t), t);\n+\n+      /* If we're warning about ABI tags, check the types of the new\n+\t virtual functions.  */\n+      if (warn_abi_tag)\n+\tfor (tree v = virtuals; v; v = TREE_CHAIN (v))\n+\t  check_abi_tags (t, TREE_VALUE (v));\n     }\n \n   if (TYPE_CONTAINS_VPTR_P (t))"}, {"sha": "43b21c6231fd3f451070f1b191d456d98d2978fe", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3061adb7fc27794f434d688e72669f45097ae82/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3061adb7fc27794f434d688e72669f45097ae82/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=d3061adb7fc27794f434d688e72669f45097ae82", "patch": "@@ -15622,7 +15622,7 @@ A redeclaration of a function or class must not add new ABI tags,\n since doing so would change the mangled name.\n \n The @option{-Wabi-tag} flag enables a warning about a class which does\n-not have all the ABI tags used by its subobjects; for users with code\n+not have all the ABI tags used by its subobjects and virtual functions; for users with code\n that needs to coexist with an earlier ABI, using this option can help\n to find all affected types that need to be tagged.\n "}, {"sha": "3f8d7bfbc3d441b333c3936dea97358fb3ad2ec4", "filename": "gcc/testsuite/g++.dg/abi/abi-tag4.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3061adb7fc27794f434d688e72669f45097ae82/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3061adb7fc27794f434d688e72669f45097ae82/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag4.C?ref=d3061adb7fc27794f434d688e72669f45097ae82", "patch": "@@ -0,0 +1,8 @@\n+// { dg-options \"-Wabi-tag\" }\n+\n+struct __attribute ((abi_tag (\"X\"))) A { };\n+\n+struct B\t\t\t// { dg-warning \"abi tag\" }\n+{\n+  virtual void f(A);\t\t// { dg-message \"declared here\" }\n+};"}]}