{"sha": "b3db92ac1996449f3c1f29ba17c9c1b73f8b817b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjNkYjkyYWMxOTk2NDQ5ZjNjMWYyOWJhMTdjOWMxYjczZjhiODE3Yg==", "commit": {"author": {"name": "Kazuhio Inaoka", "email": "kazuhiro.inaoka.ud@renesas.com", "date": "2011-05-17T08:27:40Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2011-05-17T08:27:40Z"}, "message": "rx.md: Add peepholes to match a register move followed by a comparison of the moved...\n\n\t* config/rx/rx.md: Add peepholes to match a register move followed\n\tby a comparison of the moved register.  Replace these with an\n\taddition of zero that does both actions in one instruction.\n\nCo-Authored-By: Nick Clifton <nickc@redhat.com>\n\nFrom-SVN: r173819", "tree": {"sha": "19f39188cdbbd5142b186c7f3f545468c41cda7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19f39188cdbbd5142b186c7f3f545468c41cda7f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3db92ac1996449f3c1f29ba17c9c1b73f8b817b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3db92ac1996449f3c1f29ba17c9c1b73f8b817b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3db92ac1996449f3c1f29ba17c9c1b73f8b817b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3db92ac1996449f3c1f29ba17c9c1b73f8b817b/comments", "author": null, "committer": null, "parents": [{"sha": "f3450bc8d85a76ebfbd7b1fd6bf987465f1abc35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3450bc8d85a76ebfbd7b1fd6bf987465f1abc35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3450bc8d85a76ebfbd7b1fd6bf987465f1abc35"}], "stats": {"total": 40, "additions": 40, "deletions": 0}, "files": [{"sha": "8ceeac30236e30f79c5e16e0519463f891e3797f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3db92ac1996449f3c1f29ba17c9c1b73f8b817b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3db92ac1996449f3c1f29ba17c9c1b73f8b817b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b3db92ac1996449f3c1f29ba17c9c1b73f8b817b", "patch": "@@ -1,3 +1,10 @@\n+2011-05-17  Kazuhio Inaoka  <kazuhiro.inaoka.ud@renesas.com>\n+\t    Nick Clifton  <nickc@redhat.com>\n+\n+\t* config/rx/rx.md: Add peepholes to match a register move followed\n+\tby a comparison of the moved register.  Replace these with an\n+\taddition of zero that does both actions in one instruction.\n+\n 2011-05-17  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/48986"}, {"sha": "fdbf2876a3e462dbff74979f7a29edf5a5a6608a", "filename": "gcc/config/rx/rx.md", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3db92ac1996449f3c1f29ba17c9c1b73f8b817b/gcc%2Fconfig%2Frx%2Frx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3db92ac1996449f3c1f29ba17c9c1b73f8b817b/gcc%2Fconfig%2Frx%2Frx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.md?ref=b3db92ac1996449f3c1f29ba17c9c1b73f8b817b", "patch": "@@ -904,6 +904,39 @@\n    (set_attr \"length\"   \"3,4,5,6,7,6\")]\n )\n \n+;; Peepholes to match:\n+;;   (set (reg A) (reg B))\n+;;   (set (CC) (compare:CC (reg A/reg B) (const_int 0)))\n+;; and replace them with the addsi3_flags pattern, using an add\n+;; of zero to copy the register and set the condition code bits.\n+(define_peephole2\n+  [(set (match_operand:SI 0 \"register_operand\")\n+        (match_operand:SI 1 \"register_operand\"))\n+   (set (reg:CC CC_REG)\n+        (compare:CC (match_dup 0)\n+                    (const_int 0)))]\n+  \"\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (plus:SI (match_dup 1) (const_int 0)))\n+\t      (set (reg:CC_ZSC CC_REG)\n+\t\t   (compare:CC_ZSC (plus:SI (match_dup 1) (const_int 0))\n+\t\t\t\t   (const_int 0)))])]\n+)\n+\n+(define_peephole2\n+  [(set (match_operand:SI 0 \"register_operand\")\n+        (match_operand:SI 1 \"register_operand\"))\n+   (set (reg:CC CC_REG)\n+        (compare:CC (match_dup 1)\n+                    (const_int 0)))]\n+  \"\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (plus:SI (match_dup 1) (const_int 0)))\n+\t      (set (reg:CC_ZSC CC_REG)\n+\t\t   (compare:CC_ZSC (plus:SI (match_dup 1) (const_int 0))\n+\t\t\t\t   (const_int 0)))])]\n+)\n+\n (define_expand \"adddi3\"\n   [(set (match_operand:DI          0 \"register_operand\")\n \t(plus:DI (match_operand:DI 1 \"register_operand\")"}]}