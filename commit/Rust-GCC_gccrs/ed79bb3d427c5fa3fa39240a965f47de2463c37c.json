{"sha": "ed79bb3d427c5fa3fa39240a965f47de2463c37c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQ3OWJiM2Q0MjdjNWZhM2ZhMzkyNDBhOTY1ZjQ3ZGUyNDYzYzM3Yw==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "amylaar@cygnus.co.uk", "date": "1998-07-06T21:50:50Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-07-06T21:50:50Z"}, "message": "gcse.c (hash_scan_insn): New argument IN_LIBCALL_BLOCK.\n\n        * gcse.c (hash_scan_insn): New argument IN_LIBCALL_BLOCK.  Changed\n        caller.\n\nFrom-SVN: r20967", "tree": {"sha": "62fb7190f182ab40d6bda74df6f131aa8dd17194", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62fb7190f182ab40d6bda74df6f131aa8dd17194"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed79bb3d427c5fa3fa39240a965f47de2463c37c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed79bb3d427c5fa3fa39240a965f47de2463c37c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed79bb3d427c5fa3fa39240a965f47de2463c37c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed79bb3d427c5fa3fa39240a965f47de2463c37c/comments", "author": null, "committer": null, "parents": [{"sha": "fcc60894b89947e0fb4a0833d6c99a7c20cf6e63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcc60894b89947e0fb4a0833d6c99a7c20cf6e63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcc60894b89947e0fb4a0833d6c99a7c20cf6e63"}], "stats": {"total": 26, "additions": 20, "deletions": 6}, "files": [{"sha": "9f0c949f71718ad7d4c1b5443a3cea0c61884371", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed79bb3d427c5fa3fa39240a965f47de2463c37c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed79bb3d427c5fa3fa39240a965f47de2463c37c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ed79bb3d427c5fa3fa39240a965f47de2463c37c", "patch": "@@ -1,3 +1,8 @@\n+Mon Jul  6 22:47:55 1998  J\"orn Rennecke <amylaar@cygnus.co.uk>\n+\n+\t* gcse.c (hash_scan_insn): New argument IN_LIBCALL_BLOCK.  Changed\n+\tcaller.\n+\n Mon Jul  6 22:21:56 1998  Kamil Iskra  <iskra@student.uci.agh.edu.pl>\n \n \t* m68k.c (output_scc_di): Use cmpw #0 instead of tstl when"}, {"sha": "c424a33264fb972867d18c0c276e07951a6cb211", "filename": "gcc/gcse.c", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed79bb3d427c5fa3fa39240a965f47de2463c37c/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed79bb3d427c5fa3fa39240a965f47de2463c37c/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=ed79bb3d427c5fa3fa39240a965f47de2463c37c", "patch": "@@ -550,7 +550,7 @@ static void record_one_set            PROTO ((int, rtx));\n static void record_set_info           PROTO ((rtx, rtx));\n static void compute_sets              PROTO ((rtx));\n \n-static void hash_scan_insn            PROTO ((rtx, int));\n+static void hash_scan_insn            PROTO ((rtx, int, int));\n static void hash_scan_set             PROTO ((rtx, rtx, int));\n static void hash_scan_clobber         PROTO ((rtx, rtx));\n static void hash_scan_call            PROTO ((rtx, rtx));\n@@ -1849,10 +1849,12 @@ hash_scan_call (x, insn)\n    are also in the PARALLEL.  Later.\n \n    If SET_P is non-zero, this is for the assignment hash table,\n-   otherwise it is for the expression hash table.  */\n+   otherwise it is for the expression hash table.\n+   If IN_LIBCALL_BLOCK nonzero, we are in a libcall block, and should\n+   not record any expressions.  */\n \n static void\n-hash_scan_insn (insn, set_p)\n+hash_scan_insn (insn, set_p, in_libcall_block)\n      rtx insn;\n      int set_p;\n {\n@@ -1861,7 +1863,7 @@ hash_scan_insn (insn, set_p)\n   /* Pick out the sets of INSN and for other forms of instructions record\n      what's been modified.  */\n \n-  if (GET_CODE (pat) == SET)\n+  if (GET_CODE (pat) == SET && ! in_libcall_block)\n     hash_scan_set (pat, insn, set_p);\n   else if (GET_CODE (pat) == PARALLEL)\n     {\n@@ -2037,6 +2039,7 @@ compute_hash_table (f, set_p)\n     {\n       rtx insn;\n       int regno;\n+      int in_libcall_block;\n \n       /* First pass over the instructions records information used to\n \t determine when registers and memory are first and last set.\n@@ -2080,12 +2083,18 @@ compute_hash_table (f, set_p)\n \n       /* The next pass builds the hash table.  */\n \n-      for (insn = basic_block_head[bb];\n+      for (insn = basic_block_head[bb], in_libcall_block = 0;\n \t   insn && insn != NEXT_INSN (basic_block_end[bb]);\n \t   insn = NEXT_INSN (insn))\n \t{\n \t  if (GET_RTX_CLASS (GET_CODE (insn)) == 'i')\n-\t    hash_scan_insn (insn, set_p);\n+\t    {\n+\t      if (find_reg_note (insn, REG_LIBCALL, NULL_RTX))\n+\t\tin_libcall_block = 1;\n+\t      else if (find_reg_note (insn, REG_RETVAL, NULL_RTX))\n+\t\tin_libcall_block = 0;\n+\t      hash_scan_insn (insn, set_p, in_libcall_block);\n+\t    }\n \t}\n     }\n "}]}