{"sha": "2d7b05000140db2ef7ef994559ca69b644cb2552", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQ3YjA1MDAwMTQwZGIyZWY3ZWY5OTQ1NTljYTY5YjY0NGNiMjU1Mg==", "commit": {"author": {"name": "David Edelsohn", "email": "dje.gcc@gmail.com", "date": "2012-12-21T17:25:57Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2012-12-21T17:25:57Z"}, "message": "varasm.c (bss_initializer_p): Remove static.\n\n        * varasm.c (bss_initializer_p): Remove static.\n        * output.h (bss_initializer_p): Declare.\n        * xcoffout.c (xcoff_tbss_section_name): Define.\n        * xcoffout.h (xcoff_tbss_section_name): Declare.\n        * config/rs6000/xcoff.h (TARGET_ENCODE_SECTION_INFO): Define.\n        (ASM_OUTPUT_TLS_COMMON): Merge strings.\n        * config/rs6000/rs6000.c (tls_private_data_section): New.\n        (output_toc): Only output CSECT decoration for TLS.\n        Output appropriate CSECT for data or bss.\n        (rs6000_xcoff_asm_init_sections) Define tls_private_data_section.\n        (rs6000_xcoff_select_section): Handle TLS bss and private data.\n        (rs6000_xcoff_file_start): Generate xcoff_tbss_section_name.\n        (rs6000_xcoff_encode_section_info): Strip SYMBOL_FLAG_HAS_BLOCK_INFO\n        from native TLS symbols.\n\nFrom-SVN: r194675", "tree": {"sha": "d7e15d93310c71b4b50fe76638218798e8d4132f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7e15d93310c71b4b50fe76638218798e8d4132f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d7b05000140db2ef7ef994559ca69b644cb2552", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d7b05000140db2ef7ef994559ca69b644cb2552", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d7b05000140db2ef7ef994559ca69b644cb2552", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d7b05000140db2ef7ef994559ca69b644cb2552/comments", "author": {"login": "edelsohn", "id": 667700, "node_id": "MDQ6VXNlcjY2NzcwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/667700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edelsohn", "html_url": "https://github.com/edelsohn", "followers_url": "https://api.github.com/users/edelsohn/followers", "following_url": "https://api.github.com/users/edelsohn/following{/other_user}", "gists_url": "https://api.github.com/users/edelsohn/gists{/gist_id}", "starred_url": "https://api.github.com/users/edelsohn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edelsohn/subscriptions", "organizations_url": "https://api.github.com/users/edelsohn/orgs", "repos_url": "https://api.github.com/users/edelsohn/repos", "events_url": "https://api.github.com/users/edelsohn/events{/privacy}", "received_events_url": "https://api.github.com/users/edelsohn/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "25743ba44ea969ce8dfcf9b89d246aedd4118a9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25743ba44ea969ce8dfcf9b89d246aedd4118a9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25743ba44ea969ce8dfcf9b89d246aedd4118a9c"}], "stats": {"total": 100, "additions": 89, "deletions": 11}, "files": [{"sha": "e57a17baf6ee58162aa7f314a58ffe67c8e8221f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d7b05000140db2ef7ef994559ca69b644cb2552/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d7b05000140db2ef7ef994559ca69b644cb2552/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2d7b05000140db2ef7ef994559ca69b644cb2552", "patch": "@@ -1,3 +1,20 @@\n+2012-12-21  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* varasm.c (bss_initializer_p): Remove static.\n+\t* output.h (bss_initializer_p): Declare.\n+\t* xcoffout.c (xcoff_tbss_section_name): Define.\n+\t* xcoffout.h (xcoff_tbss_section_name): Declare.\n+\t* config/rs6000/xcoff.h (TARGET_ENCODE_SECTION_INFO): Define.\n+\t(ASM_OUTPUT_TLS_COMMON): Merge strings.\n+\t* config/rs6000/rs6000.c (tls_private_data_section): New.\n+\t(output_toc): Only output CSECT decoration for TLS.\n+\tOutput appropriate CSECT for data or bss.\n+\t(rs6000_xcoff_asm_init_sections) Define tls_private_data_section.\n+\t(rs6000_xcoff_select_section): Handle TLS bss and private data.\n+\t(rs6000_xcoff_file_start): Generate xcoff_tbss_section_name.\n+\t(rs6000_xcoff_encode_section_info): Strip SYMBOL_FLAG_HAS_BLOCK_INFO\n+\tfrom native TLS symbols.\n+\n 2012-12-21  Richard Biener  <rguenther@suse.de>\n \n \tPR rtl-optimization/52996"}, {"sha": "668566eb228485959d4fefaa7871007cf77237c0", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 62, "deletions": 8, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d7b05000140db2ef7ef994559ca69b644cb2552/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d7b05000140db2ef7ef994559ca69b644cb2552/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=2d7b05000140db2ef7ef994559ca69b644cb2552", "patch": "@@ -209,6 +209,7 @@ static short cached_can_issue_more;\n static GTY(()) section *read_only_data_section;\n static GTY(()) section *private_data_section;\n static GTY(()) section *tls_data_section;\n+static GTY(()) section *tls_private_data_section;\n static GTY(()) section *read_only_private_data_section;\n static GTY(()) section *sdata2_section;\n static GTY(()) section *toc_section;\n@@ -22316,23 +22317,33 @@ output_toc (FILE *file, rtx x, int labelno, enum machine_mode mode)\n     output_addr_const (file, x);\n \n #if HAVE_AS_TLS\n-  if (TARGET_XCOFF && GET_CODE (base) == SYMBOL_REF)\n+  if (TARGET_XCOFF && GET_CODE (base) == SYMBOL_REF\n+      && SYMBOL_REF_TLS_MODEL (base) != 0)\n     {\n+      tree decl = SYMBOL_REF_DECL (base);\n+      if (bss_initializer_p (decl))\n+\tfputs (\"[UL]\", file);\n+      else\n+\tfputs (\"[TL]\", file);\n+\n       if (SYMBOL_REF_TLS_MODEL (base) == TLS_MODEL_LOCAL_EXEC)\n-\tfputs (\"[TL]@le\", file);\n+\tfputs (\"@le\", file);\n       else if (SYMBOL_REF_TLS_MODEL (base) == TLS_MODEL_INITIAL_EXEC)\n-\tfputs (\"[TL]@ie\", file);\n+\tfputs (\"@ie\", file);\n       /* Use global-dynamic for local-dynamic.  */\n       else if (SYMBOL_REF_TLS_MODEL (base) == TLS_MODEL_GLOBAL_DYNAMIC\n \t       || SYMBOL_REF_TLS_MODEL (base) == TLS_MODEL_LOCAL_DYNAMIC)\n \t{\n-\t  fputs (\"[TL]\\n\", file);\n+\t  putc ('\\n', file);\n \t  (*targetm.asm_out.internal_label) (file, \"LCM\", labelno);\n \t  fputs (\"\\t.tc .\", file);\n \t  RS6000_OUTPUT_BASENAME (file, name);\n \t  fputs (\"[TC],\", file);\n \t  output_addr_const (file, x);\n-\t  fputs (\"[TL]@m\", file);\n+\t  if (TREE_PUBLIC (SYMBOL_REF_DECL (base)))\n+\t    fputs (\"[TL]@m\", file);\n+\t  else\n+\t    fputs (\"[UL]@m\", file);\n \t}\n     }\n #endif\n@@ -25705,6 +25716,11 @@ rs6000_xcoff_asm_init_sections (void)\n \t\t\t   rs6000_xcoff_output_tls_section_asm_op,\n \t\t\t   &xcoff_tls_data_section_name);\n \n+  tls_private_data_section\n+    = get_unnamed_section (SECTION_TLS,\n+\t\t\t   rs6000_xcoff_output_tls_section_asm_op,\n+\t\t\t   &xcoff_private_data_section_name);\n+\n   read_only_private_data_section\n     = get_unnamed_section (0, rs6000_xcoff_output_readonly_section_asm_op,\n \t\t\t   &xcoff_private_data_section_name);\n@@ -25758,7 +25774,18 @@ rs6000_xcoff_select_section (tree decl, int reloc,\n     {\n #if HAVE_AS_TLS\n       if (TREE_CODE (decl) == VAR_DECL && DECL_THREAD_LOCAL_P (decl))\n-\treturn tls_data_section;\n+\t{\n+\t  if (TREE_PUBLIC (decl))\n+\t    return tls_data_section;\n+\t  else if (bss_initializer_p (decl))\n+\t    {\n+\t      /* Convert to COMMON to emit in BSS.  */\n+\t      DECL_COMMON (decl) = 1;\n+\t      return tls_comm_section;\n+\t    }\n+\t  else\n+\t    return tls_private_data_section;\n+\t}\n       else\n #endif\n \tif (TREE_PUBLIC (decl))\n@@ -25857,10 +25884,12 @@ rs6000_xcoff_file_start (void)\n \t\t\t   main_input_filename, \".bss_\");\n   rs6000_gen_section_name (&xcoff_private_data_section_name,\n \t\t\t   main_input_filename, \".rw_\");\n-  rs6000_gen_section_name (&xcoff_tls_data_section_name,\n-\t\t\t   main_input_filename, \".tls_\");\n   rs6000_gen_section_name (&xcoff_read_only_section_name,\n \t\t\t   main_input_filename, \".ro_\");\n+  rs6000_gen_section_name (&xcoff_tls_data_section_name,\n+\t\t\t   main_input_filename, \".tls_\");\n+  rs6000_gen_section_name (&xcoff_tbss_section_name,\n+\t\t\t   main_input_filename, \".tbss_[UL]\");\n \n   fputs (\"\\t.file\\t\", asm_out_file);\n   output_quoted_string (asm_out_file, main_input_filename);\n@@ -25886,6 +25915,31 @@ rs6000_xcoff_file_end (void)\n \t ? \"\\t.long _section_.text\\n\" : \"\\t.llong _section_.text\\n\",\n \t asm_out_file);\n }\n+\n+#ifdef HAVE_AS_TLS\n+static void\n+rs6000_xcoff_encode_section_info (tree decl, rtx rtl, int first)\n+{\n+  rtx symbol;\n+  int flags;\n+\n+  default_encode_section_info (decl, rtl, first);\n+\n+  /* Careful not to prod global register variables.  */\n+  if (!MEM_P (rtl))\n+    return;\n+  symbol = XEXP (rtl, 0);\n+  if (GET_CODE (symbol) != SYMBOL_REF)\n+    return;\n+\n+  flags = SYMBOL_REF_FLAGS (symbol);\n+\n+  if (TREE_CODE (decl) == VAR_DECL && DECL_THREAD_LOCAL_P (decl))\n+    flags &= ~SYMBOL_FLAG_HAS_BLOCK_INFO;\n+\n+  SYMBOL_REF_FLAGS (symbol) = flags;\n+}\n+#endif /* HAVE_AS_TLS */\n #endif /* TARGET_XCOFF */\n \n /* Compute a (partial) cost for rtx X.  Return true if the complete"}, {"sha": "4c12e1f4671dd43cc88ee16638aaaa77453c39c9", "filename": "gcc/config/rs6000/xcoff.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d7b05000140db2ef7ef994559ca69b644cb2552/gcc%2Fconfig%2Frs6000%2Fxcoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d7b05000140db2ef7ef994559ca69b644cb2552/gcc%2Fconfig%2Frs6000%2Fxcoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fxcoff.h?ref=2d7b05000140db2ef7ef994559ca69b644cb2552", "patch": "@@ -98,6 +98,9 @@\n #define TARGET_ASM_FUNCTION_RODATA_SECTION default_no_function_rodata_section\n #define TARGET_STRIP_NAME_ENCODING  rs6000_xcoff_strip_name_encoding\n #define TARGET_SECTION_TYPE_FLAGS  rs6000_xcoff_section_type_flags\n+#ifdef HAVE_AS_TLS\n+#define TARGET_ENCODE_SECTION_INFO rs6000_xcoff_encode_section_info\n+#endif\n \n /* FP save and restore routines.  */\n #define\tSAVE_FP_PREFIX \"._savef\"\n@@ -308,8 +311,8 @@\n #define ASM_OUTPUT_TLS_COMMON(FILE, DECL, NAME, SIZE)\t\\\n   do { fputs(COMMON_ASM_OP, (FILE));\t\t\t\\\n        RS6000_OUTPUT_BASENAME ((FILE), (NAME));\t\t\\\n-       fputs(\"[UL]\", (FILE));\t\t\t\t\t\\\n-       fprintf ((FILE), \",\"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", (SIZE)); \\\n+       fprintf ((FILE), \"[UL],\"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", \\\n+       (SIZE));\t\t\t\t\t\t\\\n   } while (0)\n #endif\n "}, {"sha": "bd5c3ebd0aa79bbaba7f70e124d354617eff3987", "filename": "gcc/output.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d7b05000140db2ef7ef994559ca69b644cb2552/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d7b05000140db2ef7ef994559ca69b644cb2552/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=2d7b05000140db2ef7ef994559ca69b644cb2552", "patch": "@@ -556,6 +556,8 @@ extern void output_file_directive (FILE *, const char *);\n extern unsigned int default_section_type_flags (tree, const char *, int);\n \n extern bool have_global_bss_p (void);\n+extern bool bss_initializer_p (const_tree);\n+\n extern void default_no_named_section (const char *, unsigned int, tree);\n extern void default_elf_asm_named_section (const char *, unsigned int, tree);\n extern enum section_category categorize_decl_for_section (const_tree, int);"}, {"sha": "7d083fdacce127a3629fc5757f7255f0e5483b90", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d7b05000140db2ef7ef994559ca69b644cb2552/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d7b05000140db2ef7ef994559ca69b644cb2552/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=2d7b05000140db2ef7ef994559ca69b644cb2552", "patch": "@@ -927,7 +927,7 @@ decode_reg_name (const char *name)\n \f\n /* Return true if DECL's initializer is suitable for a BSS section.  */\n \n-static bool\n+bool\n bss_initializer_p (const_tree decl)\n {\n   return (DECL_INITIAL (decl) == NULL"}, {"sha": "d0733764bfce7d5020deb8f75d5f2d92e289eea7", "filename": "gcc/xcoffout.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d7b05000140db2ef7ef994559ca69b644cb2552/gcc%2Fxcoffout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d7b05000140db2ef7ef994559ca69b644cb2552/gcc%2Fxcoffout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fxcoffout.c?ref=2d7b05000140db2ef7ef994559ca69b644cb2552", "patch": "@@ -67,6 +67,7 @@ static const char *xcoff_current_function_file;\n char *xcoff_bss_section_name;\n char *xcoff_private_data_section_name;\n char *xcoff_tls_data_section_name;\n+char *xcoff_tbss_section_name;\n char *xcoff_read_only_section_name;\n \n /* Last source file name mentioned in a NOTE insn.  */"}, {"sha": "1692279d12b9dd6c12be17447c6b470be1ffe061", "filename": "gcc/xcoffout.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d7b05000140db2ef7ef994559ca69b644cb2552/gcc%2Fxcoffout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d7b05000140db2ef7ef994559ca69b644cb2552/gcc%2Fxcoffout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fxcoffout.h?ref=2d7b05000140db2ef7ef994559ca69b644cb2552", "patch": "@@ -127,6 +127,7 @@ extern const char *xcoff_current_include_file;\n extern char *xcoff_bss_section_name;\n extern char *xcoff_private_data_section_name;\n extern char *xcoff_tls_data_section_name;\n+extern char *xcoff_tbss_section_name;\n extern char *xcoff_read_only_section_name;\n \n /* Last source file name mentioned in a NOTE insn.  */"}]}