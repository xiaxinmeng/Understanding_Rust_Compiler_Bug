{"sha": "8df1868d92b45fb257bd09bc8cd8af3baff0ae85", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGRmMTg2OGQ5MmI0NWZiMjU3YmQwOWJjOGNkOGFmM2JhZmYwYWU4NQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2018-02-13T03:07:04Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2018-02-13T03:07:04Z"}, "message": "re PR target/83760 ([SH] ICE in maybe_record_trace_start building glibc tst-copy_file_range.c)\n\n\tPR target/83760\n\t* config/sh/sh.c (find_barrier): Consider a sibling call\n\ta barrier as well.\n\nFrom-SVN: r257611", "tree": {"sha": "81849d99c0495c93899c35ad1966f1a8cd166466", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81849d99c0495c93899c35ad1966f1a8cd166466"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8df1868d92b45fb257bd09bc8cd8af3baff0ae85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8df1868d92b45fb257bd09bc8cd8af3baff0ae85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8df1868d92b45fb257bd09bc8cd8af3baff0ae85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8df1868d92b45fb257bd09bc8cd8af3baff0ae85/comments", "author": null, "committer": null, "parents": [{"sha": "a4f197f50e348a0128cf2a616043899da2ca5dd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4f197f50e348a0128cf2a616043899da2ca5dd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4f197f50e348a0128cf2a616043899da2ca5dd0"}], "stats": {"total": 16, "additions": 16, "deletions": 0}, "files": [{"sha": "a74c8610443bd802525f972114e6d79029f34458", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8df1868d92b45fb257bd09bc8cd8af3baff0ae85/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8df1868d92b45fb257bd09bc8cd8af3baff0ae85/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8df1868d92b45fb257bd09bc8cd8af3baff0ae85", "patch": "@@ -1,5 +1,9 @@\n 2018-02-12  Jeff Law  <law@redhat.com>\n \n+\tPR target/83760\n+\t* config/sh/sh.c (find_barrier): Consider a sibling call\n+\ta barrier as well.\n+\n \t* cse.c (try_back_substitute_reg): Move any REG_ARGS_SIZE note when\n \tsuccessfully back substituting a reg.\n "}, {"sha": "90d6c733d335279d390ddefc2fa34d0db8e493ae", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8df1868d92b45fb257bd09bc8cd8af3baff0ae85/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8df1868d92b45fb257bd09bc8cd8af3baff0ae85/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=8df1868d92b45fb257bd09bc8cd8af3baff0ae85", "patch": "@@ -5233,10 +5233,22 @@ find_barrier (int num_mova, rtx_insn *mova, rtx_insn *from)\n \t CALL_ARG_LOCATION note.  */\n       if (CALL_P (from))\n \t{\n+\t  bool sibcall_p = SIBLING_CALL_P (from);\n+\n \t  rtx_insn *next = NEXT_INSN (from);\n \t  if (next && NOTE_P (next)\n \t      && NOTE_KIND (next) == NOTE_INSN_CALL_ARG_LOCATION)\n \t    from = next;\n+\n+\t  /* If FROM was a sibling call, then we know that control\n+\t     will not return.  In fact, we were guaranteed to hit\n+\t     a barrier before another real insn.\n+\n+\t     The jump around the constant pool is unnecessary.  It\n+\t     costs space, but more importantly it confuses dwarf2cfi\n+\t     generation.  */\n+\t  if (sibcall_p)\n+\t    return emit_barrier_after (from);\n \t}\n \n       from = emit_jump_insn_after (gen_jump (label), from);"}]}