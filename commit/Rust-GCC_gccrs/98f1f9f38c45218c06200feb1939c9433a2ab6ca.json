{"sha": "98f1f9f38c45218c06200feb1939c9433a2ab6ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OThmMWY5ZjM4YzQ1MjE4YzA2MjAwZmViMTkzOWM5NDMzYTJhYjZjYQ==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-07-15T16:11:23Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-07-15T16:22:06Z"}, "message": "Avoid -Wvla-parameter for nontrivial bounds [PR97548].\n\nResolves:\nPR c/101289 - bogus -Wvla-paramater warning when using const for vla param\nPR c/97548 -  bogus -Wvla-parameter on a bound expression involving a parameter\n\ngcc/c-family/ChangeLog:\n\n\tPR c/101289\n\tPR c/97548\n\t* c-warn.c (warn_parm_array_mismatch): Use OEP_DECL_NAME.\n\ngcc/c/ChangeLog:\n\n\tPR c/101289\n\tPR c/97548\n\t* c-decl.c (get_parm_array_spec): Strip nops.\n\ngcc/ChangeLog:\n\n\tPR c/101289\n\tPR c/97548\n\t* fold-const.c (operand_compare::operand_equal_p): Handle OEP_DECL_NAME.\n\t(operand_compare::verify_hash_value): Same.\n\t* tree-core.h (OEP_DECL_NAME): New.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/Wvla-parameter-12.c: New test.", "tree": {"sha": "37cd9c520dba216ab5078e1ae64e83b50ec28c88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37cd9c520dba216ab5078e1ae64e83b50ec28c88"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98f1f9f38c45218c06200feb1939c9433a2ab6ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98f1f9f38c45218c06200feb1939c9433a2ab6ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98f1f9f38c45218c06200feb1939c9433a2ab6ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98f1f9f38c45218c06200feb1939c9433a2ab6ca/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07bd2703047d222ed7ff189d86350e73c5cc2c9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07bd2703047d222ed7ff189d86350e73c5cc2c9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07bd2703047d222ed7ff189d86350e73c5cc2c9e"}], "stats": {"total": 80, "additions": 69, "deletions": 11}, "files": [{"sha": "552a29f99445bdb97fe0e695cdd3630a4fec6600", "filename": "gcc/c-family/c-warn.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f1f9f38c45218c06200feb1939c9433a2ab6ca/gcc%2Fc-family%2Fc-warn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f1f9f38c45218c06200feb1939c9433a2ab6ca/gcc%2Fc-family%2Fc-warn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-warn.c?ref=98f1f9f38c45218c06200feb1939c9433a2ab6ca", "patch": "@@ -3646,7 +3646,8 @@ warn_parm_array_mismatch (location_t origloc, tree fndecl, tree newparms)\n \t      /* The VLA bounds don't refer to other function parameters.\n \t\t Compare them lexicographically to detect gross mismatches\n \t\t such as between T[foo()] and T[bar()].  */\n-\t      if (operand_equal_p (newbnd, curbnd, OEP_LEXICOGRAPHIC))\n+\t      if (operand_equal_p (newbnd, curbnd,\n+\t\t\t\t   OEP_DECL_NAME | OEP_LEXICOGRAPHIC))\n \t\tcontinue;\n \n \t      if (warning_at (newloc, OPT_Wvla_parameter,"}, {"sha": "234ee16fe4afe5baf3490596d27662c7acee8126", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f1f9f38c45218c06200feb1939c9433a2ab6ca/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f1f9f38c45218c06200feb1939c9433a2ab6ca/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=98f1f9f38c45218c06200feb1939c9433a2ab6ca", "patch": "@@ -5865,6 +5865,7 @@ get_parm_array_spec (const struct c_parm *parm, tree attrs)\n \n       /* Each variable VLA bound is represented by a dollar sign.  */\n       spec += \"$\";\n+      STRIP_NOPS (nelts);\n       vbchain = tree_cons (NULL_TREE, nelts, vbchain);\n     }\n "}, {"sha": "7dcecc9a5c08d56703075229f762f750ed6c5d93", "filename": "gcc/fold-const.c", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f1f9f38c45218c06200feb1939c9433a2ab6ca/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f1f9f38c45218c06200feb1939c9433a2ab6ca/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=98f1f9f38c45218c06200feb1939c9433a2ab6ca", "patch": "@@ -3499,11 +3499,26 @@ operand_compare::operand_equal_p (const_tree arg0, const_tree arg1,\n \n     case tcc_declaration:\n       /* Consider __builtin_sqrt equal to sqrt.  */\n-      return (TREE_CODE (arg0) == FUNCTION_DECL\n-\t      && fndecl_built_in_p (arg0) && fndecl_built_in_p (arg1)\n-\t      && DECL_BUILT_IN_CLASS (arg0) == DECL_BUILT_IN_CLASS (arg1)\n-\t      && (DECL_UNCHECKED_FUNCTION_CODE (arg0)\n-\t\t  == DECL_UNCHECKED_FUNCTION_CODE (arg1)));\n+      if (TREE_CODE (arg0) == FUNCTION_DECL)\n+\treturn (fndecl_built_in_p (arg0) && fndecl_built_in_p (arg1)\n+\t\t&& DECL_BUILT_IN_CLASS (arg0) == DECL_BUILT_IN_CLASS (arg1)\n+\t\t&& (DECL_UNCHECKED_FUNCTION_CODE (arg0)\n+\t\t    == DECL_UNCHECKED_FUNCTION_CODE (arg1)));\n+\n+      if (DECL_P (arg0)\n+\t  && (flags & OEP_DECL_NAME)\n+\t  && (flags & OEP_LEXICOGRAPHIC))\n+\t{\n+\t  /* Consider decls with the same name equal.  The caller needs\n+\t     to make sure they refer to the same entity (such as a function\n+\t     formal parameter).  */\n+\t  tree a0name = DECL_NAME (arg0);\n+\t  tree a1name = DECL_NAME (arg1);\n+\t  const char *a0ns = a0name ? IDENTIFIER_POINTER (a0name) : NULL;\n+\t  const char *a1ns = a1name ? IDENTIFIER_POINTER (a1name) : NULL;\n+\t  return a0ns && a1ns && strcmp (a0ns, a1ns) == 0;\n+\t}\n+      return false;\n \n     case tcc_exceptional:\n       if (TREE_CODE (arg0) == CONSTRUCTOR)\n@@ -3914,14 +3929,14 @@ bool\n operand_compare::verify_hash_value (const_tree arg0, const_tree arg1,\n \t\t\t\t    unsigned int flags, bool *ret)\n {\n-  /* When checking, verify at the outermost operand_equal_p call that\n-     if operand_equal_p returns non-zero then ARG0 and ARG1 has the same\n-     hash value.  */\n+  /* When checking and unless comparing DECL names, verify that if\n+     the outermost operand_equal_p call returns non-zero then ARG0\n+     and ARG1 have the same hash value.  */\n   if (flag_checking && !(flags & OEP_NO_HASH_CHECK))\n     {\n       if (operand_equal_p (arg0, arg1, flags | OEP_NO_HASH_CHECK))\n \t{\n-\t  if (arg0 != arg1)\n+\t  if (arg0 != arg1 && !(flags & OEP_DECL_NAME))\n \t    {\n \t      inchash::hash hstate0 (0), hstate1 (0);\n \t      hash_operand (arg0, hstate0, flags | OEP_HASH_CHECK);"}, {"sha": "1be5e48203bc51932bf0f7a53aaf78fd6c3a1f39", "filename": "gcc/testsuite/gcc.dg/Wvla-parameter-12.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f1f9f38c45218c06200feb1939c9433a2ab6ca/gcc%2Ftestsuite%2Fgcc.dg%2FWvla-parameter-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f1f9f38c45218c06200feb1939c9433a2ab6ca/gcc%2Ftestsuite%2Fgcc.dg%2FWvla-parameter-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWvla-parameter-12.c?ref=98f1f9f38c45218c06200feb1939c9433a2ab6ca", "patch": "@@ -0,0 +1,36 @@\n+/* PR c/101289 - bogus -Wvla-parameter warning when using const bound\n+   { dg-do compile }\n+   { dg-options \"-Wall\" } */\n+\n+void f1ci_can (const int n, char a[n]);\n+void f1ci_can (const int n, char a[n]); // { dg-bogus \"-Wvla-parameter\" }\n+\n+void f2ci_can (const int m, char a[m]);\n+void f2ci_can (int n,       char a[n]); // { dg-bogus \"-Wvla-parameter\" }\n+\n+void f3i_can (int n,       char a[n]);\n+void f3i_can (const int n, char a[n]);  // { dg-bogus \"-Wvla-parameter\" }\n+\n+void f4i_can (int n,       char a[n]);\n+void f4i_can (const int n, char a[(int)n]);   // { dg-bogus \"-Wvla-parameter\" }\n+\n+void f5i_can (int n,       char a[(char)n]);\n+void f5i_can (const int n, char a[(char)n]);  // { dg-bogus \"-Wvla-parameter\" }\n+\n+void f6i_can (int m,       char a[(char)m]);\n+void f6i_can (const int n, char a[(char)n]);  // { dg-bogus \"-Wvla-parameter\" \"\" { xfail *-*-* } }\n+\n+\n+/* PR c/97548 - bogus -Wvla-parameter on a bound expression involving\n+   a parameter */\n+\n+int n;\n+\n+void f7ianp1 (int, int[n + 1]);\n+void f7ianp1 (int, int[n + 1]);\n+void f7ianp1 (int, int[n + 2]);         // { dg-warning \"-Wvla-parameter\" }\n+\n+void f8iakp1 (int k, int [k + 1]);\n+void f8iakp1 (int k, int [k + 1]);      // { dg-bogus \"-Wvla-parameter\" }\n+void f8iakp1 (int k, int [1 + k]);      // { dg-bogus \"-Wvla-parameter\" }\n+void f8iakp1 (int k, int [k + 2]);      // { dg-warning \"-Wvla-parameter\" }"}, {"sha": "23cd289bcc3f51a57b58ca51799f4dd92c615fc2", "filename": "gcc/tree-core.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f1f9f38c45218c06200feb1939c9433a2ab6ca/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f1f9f38c45218c06200feb1939c9433a2ab6ca/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=98f1f9f38c45218c06200feb1939c9433a2ab6ca", "patch": "@@ -888,6 +888,7 @@ enum size_type_kind {\n   stk_type_kind_last\n };\n \n+/* Flags controlling operand_equal_p() behavior.  */\n enum operand_equal_flag {\n   OEP_ONLY_CONST = 1,\n   OEP_PURE_SAME = 2,\n@@ -902,7 +903,11 @@ enum operand_equal_flag {\n   OEP_BITWISE = 128,\n   /* For OEP_ADDRESS_OF of COMPONENT_REFs, only consider same fields as\n      equivalent rather than also different fields with the same offset.  */\n-  OEP_ADDRESS_OF_SAME_FIELD = 256\n+  OEP_ADDRESS_OF_SAME_FIELD = 256,\n+  /* In conjunction with OEP_LEXICOGRAPHIC considers names of declarations\n+     of the same kind.  Used to compare VLA bounds involving parameters\n+     across redeclarations of the same function.  */\n+  OEP_DECL_NAME = 512\n };\n \n /* Enum and arrays used for tree allocation stats."}]}