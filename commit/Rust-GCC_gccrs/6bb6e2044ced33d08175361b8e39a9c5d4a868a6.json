{"sha": "6bb6e2044ced33d08175361b8e39a9c5d4a868a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmJiNmUyMDQ0Y2VkMzNkMDgxNzUzNjFiOGUzOWE5YzVkNGE4NjhhNg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-07-28T12:16:35Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-07-28T13:14:19Z"}, "message": "tree-optimization/101615 - SLP permute opt of existing vectors\n\nThis fixes one issue discovered when analyzing PR101615, namely\nwe happily push permutes to pre-existing vectors but end up\nnot actually permuting them.  In fact we don't want to, so force\nmaterialization on the external.\n\nIt doesn't fix the original testcase though.\n\n2021-07-28  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/101615\n\t* tree-vect-slp.c (vect_optimize_slp): Pre-existing vector\n\texternal nodes cannot be permuted so make them perm_out 0.\n\n\t* gcc.dg/vect/bb-slp-pr101615-1.c: New testcase.", "tree": {"sha": "394e67b07401407ca837ea9f674100fdb3e72196", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/394e67b07401407ca837ea9f674100fdb3e72196"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6bb6e2044ced33d08175361b8e39a9c5d4a868a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bb6e2044ced33d08175361b8e39a9c5d4a868a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bb6e2044ced33d08175361b8e39a9c5d4a868a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bb6e2044ced33d08175361b8e39a9c5d4a868a6/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1af16666943ef075673501765a13e425e47015cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1af16666943ef075673501765a13e425e47015cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1af16666943ef075673501765a13e425e47015cd"}], "stats": {"total": 36, "additions": 34, "deletions": 2}, "files": [{"sha": "d1c9c02d517a974ca23f9d4279ed2231259148bf", "filename": "gcc/testsuite/gcc.dg/vect/bb-slp-pr101615-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bb6e2044ced33d08175361b8e39a9c5d4a868a6/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-pr101615-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bb6e2044ced33d08175361b8e39a9c5d4a868a6/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-pr101615-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-pr101615-1.c?ref=6bb6e2044ced33d08175361b8e39a9c5d4a868a6", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run } */\n+/* { dg-additional-options \"-w -Wno-psabi\" } */\n+\n+#include \"tree-vect.h\"\n+\n+typedef int v4si __attribute__((vector_size(16)));\n+\n+int a[4];\n+int b[4];\n+\n+void __attribute__((noipa))\n+foo (v4si x)\n+{\n+  b[0] = a[3] + x[0];\n+  b[1] = a[2] + x[1];\n+  b[2] = a[1] + x[2];\n+  b[3] = a[0] + x[3];\n+}\n+\n+int main()\n+{\n+  check_vect ();\n+  for (int i = 0; i < 4; ++i)\n+    a[i] = i;\n+  v4si x = (v4si) { 8, 6, 4, 2 };\n+  foo (x);\n+  if (b[0] != 11 || b[1] != 8 || b[2] != 5 || b[3] != 2)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "07cc24a60e1bed9f95879bb6f843da36eb1e4e7c", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bb6e2044ced33d08175361b8e39a9c5d4a868a6/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bb6e2044ced33d08175361b8e39a9c5d4a868a6/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=6bb6e2044ced33d08175361b8e39a9c5d4a868a6", "patch": "@@ -3648,8 +3648,10 @@ vect_optimize_slp (vec_info *vinfo)\n       slp_tree node = vertices[idx].node;\n \n       /* Handle externals and constants optimistically throughout the\n-\t iteration.  */\n-      if (SLP_TREE_DEF_TYPE (node) == vect_external_def\n+\t iteration.  But treat existing vectors as fixed since we\n+\t do not handle permuting them below.  */\n+      if ((SLP_TREE_DEF_TYPE (node) == vect_external_def\n+\t   && !SLP_TREE_VEC_DEFS (node).exists ())\n \t  || SLP_TREE_DEF_TYPE (node) == vect_constant_def)\n \tcontinue;\n "}]}