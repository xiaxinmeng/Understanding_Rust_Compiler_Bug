{"sha": "2e28e797125a94c7587b599eba438015fa02e5fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmUyOGU3OTcxMjVhOTRjNzU4N2I1OTllYmE0MzgwMTVmYTAyZTVmZQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2008-03-18T15:21:06Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2008-03-18T15:21:06Z"}, "message": "tree-pretty-print.c: Include predict.h.\n\n\n\t* tree-pretty-print.c: Include predict.h.\n\t(dump_generic_node): Dump predictor.\n\t* tree.h (PREDICT_EXPR_OUTCOME, PREDICT_EXPR_PREDICTION): Update.\n\t* tree-gimple.c (is_gimple_stmt): Add PREDICT_EXPR.\n\t* gimple-low.c (lower_stmt): Likewise.\n\t* expr.c (expand_expr_real): Likewise.\n\t* predict.c (tree_bb_level_predictions): Use PREDICT_EXPRs and remove\n\tthem.\n\t(build_predict_expr, build_predict_expr): New.\n\t* predict.h (predictor_name, build_predict_expr): Update.\n\t* c-typeck.c (c_finish_bc_stmt): Add prediction.\n\t* gimplify.c (gimplify_expr): Add PREDICT_EXPR.\n\t* predict.def (PRED_CONTINUE): Update hitrate.\n\t* tree.def (PREDICT_EXPR): Define.\n\t* tree-ssa-dce.c (mark_stmt_if_obviously_necessary): Mark PREDICT_EXPR;\n\tdo not handle BIND_EXPR.\n\t* tree-inline.c (estimate_num_insns_1): PREDICT_EXPR is free.\n\t* tree-cfg.c (verify_gimple_stmt): PREDICT_EXPR is valid.\n\t* tree-ssa-operands.c (get_expr_operands): PREDICT_EXPR takes no\n\toperands.\n\nFrom-SVN: r133313", "tree": {"sha": "e2ca0569c078a0ce7bcb5fe80388985cdcfbfac8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2ca0569c078a0ce7bcb5fe80388985cdcfbfac8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e28e797125a94c7587b599eba438015fa02e5fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e28e797125a94c7587b599eba438015fa02e5fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e28e797125a94c7587b599eba438015fa02e5fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e28e797125a94c7587b599eba438015fa02e5fe/comments", "author": null, "committer": null, "parents": [{"sha": "52f1c7ed4d3ebab5b0b54f567bafbf1c29ccffeb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52f1c7ed4d3ebab5b0b54f567bafbf1c29ccffeb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52f1c7ed4d3ebab5b0b54f567bafbf1c29ccffeb"}], "stats": {"total": 114, "additions": 111, "deletions": 3}, "files": [{"sha": "823742584112a4b0c0f79b78240fe4f36cc4dadf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e28e797125a94c7587b599eba438015fa02e5fe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e28e797125a94c7587b599eba438015fa02e5fe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2e28e797125a94c7587b599eba438015fa02e5fe", "patch": "@@ -1,3 +1,26 @@\n+2008-03-18  Jan Hubicka  <jh@suse.cz>\n+\n+\t* tree-pretty-print.c: Include predict.h.\n+\t(dump_generic_node): Dump predictor.\n+\t* tree.h (PREDICT_EXPR_OUTCOME, PREDICT_EXPR_PREDICTION): Update.\n+\t* tree-gimple.c (is_gimple_stmt): Add PREDICT_EXPR.\n+\t* gimple-low.c (lower_stmt): Likewise.\n+\t* expr.c (expand_expr_real): Likewise.\n+\t* predict.c (tree_bb_level_predictions): Use PREDICT_EXPRs and remove\n+\tthem.\n+\t(build_predict_expr, build_predict_expr): New.\n+\t* predict.h (predictor_name, build_predict_expr): Update.\n+\t* c-typeck.c (c_finish_bc_stmt): Add prediction.\n+\t* gimplify.c (gimplify_expr): Add PREDICT_EXPR.\n+\t* predict.def (PRED_CONTINUE): Update hitrate.\n+\t* tree.def (PREDICT_EXPR): Define.\n+\t* tree-ssa-dce.c (mark_stmt_if_obviously_necessary): Mark PREDICT_EXPR;\n+\tdo not handle BIND_EXPR.\n+\t* tree-inline.c (estimate_num_insns_1): PREDICT_EXPR is free.\n+\t* tree-cfg.c (verify_gimple_stmt): PREDICT_EXPR is valid.\n+\t* tree-ssa-operands.c (get_expr_operands): PREDICT_EXPR takes no\n+\toperands.\n+\n 2008-03-18  Michael Matz  <matz@suse.de>\n \n \t* gcov-io.h (__gcov_merge_ior, __gcov_fork): Mark hidden.\n@@ -21,6 +44,29 @@\n \t* gimplify.c (gimplify_expr): Gimplify second operand of\n \tOMP_ATOMIC_LOAD.\n \n+2008-03-17  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-pretty-print.c: Include predict.h.\n+\t(dump_generic_node): Dump predictor.\n+\t* tree.h (PREDICT_EXPR_OUTCOME, PREDICT_EXPR_PREDICTION): Update.\n+\t* tree-gimple.c (is_gimple_stmt): Add PREDICT_EXPR.\n+\t* gimple-low.c (lower_stmt): Likewise.\n+\t* expr.c (expand_expr_real): Likewise.\n+\t* predict.c (tree_bb_level_predictions): Use PREDICT_EXPRs and remove\n+\tthem.\n+\t(build_predict_expr, build_predict_expr): New.\n+\t* predict.h (predictor_name, build_predict_expr): Update.\n+\t* c-typeck.c (c_finish_bc_stmt): Add prediction.\n+\t* gimplify.c (gimplify_expr): Add PREDICT_EXPR.\n+\t* predict.def (PRED_CONTINUE): Update hitrate.\n+\t* tree.def (PREDICT_EXPR): Define.\n+\t* tree-ssa-dce.c (mark_stmt_if_obviously_necessary): Mark PREDICT_EXPR;\n+\tdo not handle BIND_EXPR.\n+\t* tree-inline.c (estimate_num_insns_1): PREDICT_EXPR is free.\n+\t* tree-cfg.c (verify_gimple_stmt): PREDICT_EXPR is valid.\n+\t* tree-ssa-operands.c (get_expr_operands): PREDICT_EXPR takes no\n+\toperands.\n+\n 2008-03-17  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/19637"}, {"sha": "4d476c5d4dd5f7397e46ecb67d04f45aa8218aed", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e28e797125a94c7587b599eba438015fa02e5fe/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e28e797125a94c7587b599eba438015fa02e5fe/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=2e28e797125a94c7587b599eba438015fa02e5fe", "patch": "@@ -7503,6 +7503,9 @@ c_finish_bc_stmt (tree *label_p, bool is_break)\n   if (skip)\n     return NULL_TREE;\n \n+  if (!is_break)\n+    add_stmt (build_predict_expr (PRED_CONTINUE, NOT_TAKEN));\n+\n   return add_stmt (build1 (GOTO_EXPR, void_type_node, label));\n }\n "}, {"sha": "83e8e442a8a0977144e7b2a08728b1dfb18e84f1", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e28e797125a94c7587b599eba438015fa02e5fe/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e28e797125a94c7587b599eba438015fa02e5fe/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=2e28e797125a94c7587b599eba438015fa02e5fe", "patch": "@@ -7055,6 +7055,7 @@ expand_expr_real (tree exp, rtx target, enum machine_mode tmode,\n \n   /* Handle ERROR_MARK before anybody tries to access its type.  */\n   if (TREE_CODE (exp) == ERROR_MARK\n+      || TREE_CODE (exp) == PREDICT_EXPR\n       || (!GIMPLE_TUPLE_P (exp) && TREE_CODE (TREE_TYPE (exp)) == ERROR_MARK))\n     {\n       ret = CONST0_RTX (tmode);"}, {"sha": "7330464ebf1422fa02aaedb2654405d19e65012d", "filename": "gcc/gimple-low.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e28e797125a94c7587b599eba438015fa02e5fe/gcc%2Fgimple-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e28e797125a94c7587b599eba438015fa02e5fe/gcc%2Fgimple-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-low.c?ref=2e28e797125a94c7587b599eba438015fa02e5fe", "patch": "@@ -235,6 +235,7 @@ lower_stmt (tree_stmt_iterator *tsi, struct lower_data *data)\n     case NOP_EXPR:\n     case ASM_EXPR:\n     case GOTO_EXPR:\n+    case PREDICT_EXPR:\n     case LABEL_EXPR:\n     case SWITCH_EXPR:\n     case CHANGE_DYNAMIC_TYPE_EXPR:"}, {"sha": "acdfb994960f5f7aa8d05b8361701a614e57cf4f", "filename": "gcc/gimplify.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e28e797125a94c7587b599eba438015fa02e5fe/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e28e797125a94c7587b599eba438015fa02e5fe/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=2e28e797125a94c7587b599eba438015fa02e5fe", "patch": "@@ -5837,6 +5837,10 @@ gimplify_expr (tree *expr_p, tree *pre_p, tree *post_p,\n \t\t\t\t NULL, is_gimple_val, fb_rvalue);\n \t  break;\n \n+\t  /* Predictions are always gimplified.  */\n+\tcase PREDICT_EXPR:\n+\t  goto out;\n+\n \tcase LABEL_EXPR:\n \t  ret = GS_ALL_DONE;\n \t  gcc_assert (decl_function_context (LABEL_EXPR_LABEL (*expr_p))"}, {"sha": "a20b3526ce385c46fd680ac6621e2649988e70fd", "filename": "gcc/predict.c", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e28e797125a94c7587b599eba438015fa02e5fe/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e28e797125a94c7587b599eba438015fa02e5fe/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=2e28e797125a94c7587b599eba438015fa02e5fe", "patch": "@@ -1293,10 +1293,11 @@ tree_bb_level_predictions (void)\n     {\n       block_stmt_iterator bsi = bsi_last (bb);\n \n-      for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))\n+      for (bsi = bsi_start (bb); !bsi_end_p (bsi);)\n \t{\n \t  tree stmt = bsi_stmt (bsi);\n \t  tree decl;\n+\t  bool next = false;\n \n \t  switch (TREE_CODE (stmt))\n \t    {\n@@ -1319,9 +1320,17 @@ call_expr:;\n \t\t  predict_paths_leading_to (bb, PRED_COLD_FUNCTION,\n \t\t      \t\t\t    NOT_TAKEN);\n \t\tbreak;\n+\t      case PREDICT_EXPR:\n+\t\tpredict_paths_leading_to (bb, PREDICT_EXPR_PREDICTOR (stmt),\n+\t\t      \t\t\t  PREDICT_EXPR_OUTCOME (stmt));\n+\t\tbsi_remove (&bsi, true);\n+\t\tnext = true;\n+\t\tbreak;\n \t      default:\n \t\tbreak;\n \t    }\n+\t  if (!next)\n+\t    bsi_next (&bsi);\n \t}\n     }\n }\n@@ -1915,6 +1924,21 @@ gate_estimate_probability (void)\n   return flag_guess_branch_prob;\n }\n \n+/* Build PREDICT_EXPR.  */\n+tree\n+build_predict_expr (enum br_predictor predictor, enum prediction taken)\n+{\n+  tree t = build1 (PREDICT_EXPR, NULL_TREE, build_int_cst (NULL, predictor));\n+  PREDICT_EXPR_OUTCOME (t) = taken;\n+  return t;\n+}\n+\n+const char *\n+predictor_name (enum br_predictor predictor)\n+{\n+  return predictor_info[predictor].name;\n+}\n+\n struct tree_opt_pass pass_profile = \n {\n   \"profile\",\t\t\t\t/* name */"}, {"sha": "62ae9d9f8d3dee4dc1ae14d442f9baaf1059327e", "filename": "gcc/predict.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e28e797125a94c7587b599eba438015fa02e5fe/gcc%2Fpredict.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e28e797125a94c7587b599eba438015fa02e5fe/gcc%2Fpredict.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.def?ref=2e28e797125a94c7587b599eba438015fa02e5fe", "patch": "@@ -66,7 +66,7 @@ DEF_PREDICTOR (PRED_LOOP_ITERATIONS_GUESSED, \"guessed loop iterations\",\n \t       PROB_ALWAYS, PRED_FLAG_FIRST_MATCH)\n \n /* Branch containing goto is probably not taken.  */\n-DEF_PREDICTOR (PRED_CONTINUE, \"continue\", HITRATE (56), 0)\n+DEF_PREDICTOR (PRED_CONTINUE, \"continue\", HITRATE (50), 0)\n \n /* Branch to basic block containing call marked by noreturn attribute.  */\n DEF_PREDICTOR (PRED_NORETURN, \"noreturn call\", HITRATE (99),"}, {"sha": "6552c7293fdc00878745e02c35c12bcf55379f9e", "filename": "gcc/predict.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e28e797125a94c7587b599eba438015fa02e5fe/gcc%2Fpredict.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e28e797125a94c7587b599eba438015fa02e5fe/gcc%2Fpredict.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.h?ref=2e28e797125a94c7587b599eba438015fa02e5fe", "patch": "@@ -38,5 +38,7 @@ enum prediction\n extern void predict_insn_def (rtx, enum br_predictor, enum prediction);\n extern int counts_to_freqs (void);\n extern void estimate_bb_frequencies (void);\n+extern const char *predictor_name (enum br_predictor);\n+extern tree build_predict_expr (enum br_predictor, enum prediction);\n \n #endif  /* GCC_PREDICT_H */"}, {"sha": "329566411b05003c645571d699e06d718a599401", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e28e797125a94c7587b599eba438015fa02e5fe/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e28e797125a94c7587b599eba438015fa02e5fe/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=2e28e797125a94c7587b599eba438015fa02e5fe", "patch": "@@ -4059,6 +4059,7 @@ verify_gimple_stmt (tree stmt)\n     case NOP_EXPR:\n     case CHANGE_DYNAMIC_TYPE_EXPR:\n     case ASM_EXPR:\n+    case PREDICT_EXPR:\n       return false;\n \n     default:"}, {"sha": "bc482983847d2fccd7dd8429a8f4a247264db6e4", "filename": "gcc/tree-gimple.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e28e797125a94c7587b599eba438015fa02e5fe/gcc%2Ftree-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e28e797125a94c7587b599eba438015fa02e5fe/gcc%2Ftree-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-gimple.c?ref=2e28e797125a94c7587b599eba438015fa02e5fe", "patch": "@@ -325,6 +325,7 @@ is_gimple_stmt (tree t)\n \n     case CALL_EXPR:\n     case GIMPLE_MODIFY_STMT:\n+    case PREDICT_EXPR:\n       /* These are valid regardless of their type.  */\n       return true;\n "}, {"sha": "54cacb5a79b892705cf31da56d537505ec11ab02", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e28e797125a94c7587b599eba438015fa02e5fe/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e28e797125a94c7587b599eba438015fa02e5fe/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=2e28e797125a94c7587b599eba438015fa02e5fe", "patch": "@@ -2265,6 +2265,7 @@ estimate_num_insns_1 (tree *tp, int *walk_subtrees, void *data)\n     case COMPLEX_CST:\n     case VECTOR_CST:\n     case STRING_CST:\n+    case PREDICT_EXPR:\n       *walk_subtrees = 0;\n       return NULL;\n "}, {"sha": "8b5f847e476ae4aa3da08e9473aeb65a1d58f2df", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e28e797125a94c7587b599eba438015fa02e5fe/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e28e797125a94c7587b599eba438015fa02e5fe/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=2e28e797125a94c7587b599eba438015fa02e5fe", "patch": "@@ -35,6 +35,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-pass.h\"\n #include \"fixed-value.h\"\n #include \"value-prof.h\"\n+#include \"predict.h\"\n \n /* Local functions, macros and variables.  */\n static int op_prio (const_tree);\n@@ -1592,6 +1593,16 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n       is_expr = false;\n       break;\n \n+    case PREDICT_EXPR:\n+      pp_string (buffer, \"// predicted \");\n+      if (PREDICT_EXPR_OUTCOME (node))\n+        pp_string (buffer, \"likely by \");\n+      else\n+        pp_string (buffer, \"unlikely by \");\n+      pp_string (buffer, predictor_name (PREDICT_EXPR_PREDICTOR (node)));\n+      pp_string (buffer, \" predictor.\");\n+      break;\n+\n     case RETURN_EXPR:\n       pp_string (buffer, \"return\");\n       op0 = TREE_OPERAND (node, 0);"}, {"sha": "640c1f38f5c44dd6b5da113c5f5569d47db3cc3d", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e28e797125a94c7587b599eba438015fa02e5fe/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e28e797125a94c7587b599eba438015fa02e5fe/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=2e28e797125a94c7587b599eba438015fa02e5fe", "patch": "@@ -277,7 +277,7 @@ mark_stmt_if_obviously_necessary (tree stmt, bool aggressive)\n      can then remove the block and labels.  */\n   switch (TREE_CODE (stmt))\n     {\n-    case BIND_EXPR:\n+    case PREDICT_EXPR:\n     case LABEL_EXPR:\n     case CASE_LABEL_EXPR:\n       mark_stmt_necessary (stmt, false);"}, {"sha": "8869e6ed95a64db2a5884435e08c8819c04491ca", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e28e797125a94c7587b599eba438015fa02e5fe/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e28e797125a94c7587b599eba438015fa02e5fe/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=2e28e797125a94c7587b599eba438015fa02e5fe", "patch": "@@ -2376,6 +2376,7 @@ get_expr_operands (tree stmt, tree *expr_p, int flags)\n     case OMP_RETURN:\n     case OMP_SECTION:\n     case OMP_SECTIONS_SWITCH:\n+    case PREDICT_EXPR:\n       /* Expressions that make no memory references.  */\n       return;\n "}, {"sha": "89c18dfd16cab36446cf6308543df8bd5ae54d4d", "filename": "gcc/tree.def", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e28e797125a94c7587b599eba438015fa02e5fe/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e28e797125a94c7587b599eba438015fa02e5fe/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=2e28e797125a94c7587b599eba438015fa02e5fe", "patch": "@@ -1170,6 +1170,12 @@ DEFTREECODE (VEC_EXTRACT_ODD_EXPR, \"vec_extractodd_expr\", tcc_binary, 2)\n DEFTREECODE (VEC_INTERLEAVE_HIGH_EXPR, \"vec_interleavehigh_expr\", tcc_binary, 2)\n DEFTREECODE (VEC_INTERLEAVE_LOW_EXPR, \"vec_interleavelow_expr\", tcc_binary, 2)\n \n+/* PREDICT_EXPR.  Specify hint for branch prediction.  The\n+   PREDICT_EXPR_PREDICTOR specify predictor and PREDICT_EXPR_OUTCOME the\n+   outcome (0 for not taken and 1 for taken).  Once the profile is guessed\n+   all conditional branches leading to execution paths executing the\n+   PREDICT_EXPR will get predicted by the specified predictor.  */\n+DEFTREECODE (PREDICT_EXPR, \"predict_expr\", tcc_unary, 1)\n /*\n Local variables:\n mode:c"}, {"sha": "0cb2fadca75e8fb4936849529bfd17e46ed466e8", "filename": "gcc/tree.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e28e797125a94c7587b599eba438015fa02e5fe/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e28e797125a94c7587b599eba438015fa02e5fe/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=2e28e797125a94c7587b599eba438015fa02e5fe", "patch": "@@ -436,6 +436,7 @@ struct gimple_stmt GTY(())\n \t   expression.\n        CALL_EXPR_TAILCALL in CALL_EXPR\n        CASE_LOW_SEEN in CASE_LABEL_EXPR\n+       RETURN_EXPR_OUTCOME in RETURN_EXPR\n \n    static_flag:\n \n@@ -1158,6 +1159,11 @@ extern void omp_clause_range_check_failed (const_tree, const char *, int,\n #define CASE_LOW_SEEN(NODE) \\\n   (CASE_LABEL_EXPR_CHECK (NODE)->base.addressable_flag)\n \n+#define PREDICT_EXPR_OUTCOME(NODE) \\\n+  (PREDICT_EXPR_CHECK(NODE)->base.addressable_flag)\n+#define PREDICT_EXPR_PREDICTOR(NODE) \\\n+  ((enum br_predictor)tree_low_cst (TREE_OPERAND (PREDICT_EXPR_CHECK (NODE), 0), 0))\n+\n /* In a VAR_DECL, nonzero means allocate static storage.\n    In a FUNCTION_DECL, nonzero if function has been defined.\n    In a CONSTRUCTOR, nonzero means allocate static storage."}]}