{"sha": "2669cae081c852bc8bde1647d671aa66930cc556", "node_id": "C_kwDOANBUbNoAKDI2NjljYWUwODFjODUyYmM4YmRlMTY0N2Q2NzFhYTY2OTMwY2M1NTY", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-05-16T12:18:41Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-06-27T08:12:08Z"}, "message": "lto-plugin: make claim_file_handler thread-safe\n\nlto-plugin/ChangeLog:\n\n\t* lto-plugin.c (plugin_lock): New lock.\n\t(claim_file_handler): Use mutex for critical section.\n\t(onload): Initialize mutex.\n\t* configure.ac: Check for pthread.h.\n\t* configure: Regenerate.\n\t* config.h.in: Regenerate.", "tree": {"sha": "7c2cc38e788c80b3a60036a36c3ea39325c7b5f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c2cc38e788c80b3a60036a36c3ea39325c7b5f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2669cae081c852bc8bde1647d671aa66930cc556", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2669cae081c852bc8bde1647d671aa66930cc556", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2669cae081c852bc8bde1647d671aa66930cc556", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2669cae081c852bc8bde1647d671aa66930cc556/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64d4f27a0ce47e97867512bda7fa5683acf8a134", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64d4f27a0ce47e97867512bda7fa5683acf8a134", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64d4f27a0ce47e97867512bda7fa5683acf8a134"}], "stats": {"total": 47, "additions": 45, "deletions": 2}, "files": [{"sha": "029e782f1ee5433a009b52f04d973891668f0761", "filename": "lto-plugin/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2669cae081c852bc8bde1647d671aa66930cc556/lto-plugin%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2669cae081c852bc8bde1647d671aa66930cc556/lto-plugin%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2Fconfig.h.in?ref=2669cae081c852bc8bde1647d671aa66930cc556", "patch": "@@ -9,6 +9,9 @@\n /* Define to 1 if you have the <memory.h> header file. */\n #undef HAVE_MEMORY_H\n \n+/* Define to 1 if pthread.h is present. */\n+#undef HAVE_PTHREAD_H\n+\n /* Define to 1 if you have the <stdint.h> header file. */\n #undef HAVE_STDINT_H\n "}, {"sha": "7d2f1ad308c2fda07d6b0ccefcec038cd37356b2", "filename": "lto-plugin/configure", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2669cae081c852bc8bde1647d671aa66930cc556/lto-plugin%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2669cae081c852bc8bde1647d671aa66930cc556/lto-plugin%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2Fconfigure?ref=2669cae081c852bc8bde1647d671aa66930cc556", "patch": "@@ -5643,6 +5643,9 @@ ac_compiler_gnu=$ac_cv_c_compiler_gnu\n \n \n \n+# The plug-in depends on pthreads\n+LDFLAGS=\"-pthread\"\n+\n # Check whether -static-libgcc is supported.\n saved_LDFLAGS=\"$LDFLAGS\"\n LDFLAGS=\"$LDFLAGS -static-libgcc\"\n@@ -6010,6 +6013,16 @@ else\n fi\n \n \n+# Check for thread headers.\n+ac_fn_c_check_header_mongrel \"$LINENO\" \"pthread.h\" \"ac_cv_header_pthread_h\" \"$ac_includes_default\"\n+if test \"x$ac_cv_header_pthread_h\" = xyes; then :\n+\n+$as_echo \"#define HAVE_PTHREAD_H 1\" >>confdefs.h\n+\n+fi\n+\n+\n+\n case `pwd` in\n   *\\ * | *\\\t*)\n     { $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: Libtool does not cope well with whitespace in \\`pwd\\`\" >&5\n@@ -12081,7 +12094,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12084 \"configure\"\n+#line 12097 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -12187,7 +12200,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12190 \"configure\"\n+#line 12203 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "75cf46ac5c72c914a9f515dd5e3b7792ecdd4cd2", "filename": "lto-plugin/configure.ac", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2669cae081c852bc8bde1647d671aa66930cc556/lto-plugin%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2669cae081c852bc8bde1647d671aa66930cc556/lto-plugin%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2Fconfigure.ac?ref=2669cae081c852bc8bde1647d671aa66930cc556", "patch": "@@ -13,6 +13,9 @@ AC_PROG_CC\n AC_SYS_LARGEFILE\n ACX_PROG_CC_WARNING_OPTS([-Wall], [ac_lto_plugin_warn_cflags])\n \n+# The plug-in depends on pthreads\n+LDFLAGS=\"-pthread\"\n+\n # Check whether -static-libgcc is supported.\n saved_LDFLAGS=\"$LDFLAGS\"\n LDFLAGS=\"$LDFLAGS -static-libgcc\"\n@@ -87,6 +90,10 @@ AM_CONDITIONAL(LTO_PLUGIN_USE_SYMVER, [test \"x$lto_plugin_use_symver\" != xno])\n AM_CONDITIONAL(LTO_PLUGIN_USE_SYMVER_GNU, [test \"x$lto_plugin_use_symver\" = xgnu])\n AM_CONDITIONAL(LTO_PLUGIN_USE_SYMVER_SUN, [test \"x$lto_plugin_use_symver\" = xsun])\n \n+# Check for thread headers.\n+AC_CHECK_HEADER(pthread.h,\n+  [AC_DEFINE(HAVE_PTHREAD_H, 1, [Define to 1 if pthread.h is present.])])\n+\n AM_PROG_LIBTOOL\n ACX_LT_HOST_FLAGS\n AC_SUBST(target_noncanonical)"}, {"sha": "635e126946bcf58274f5cfb76bda7b1b224fa139", "filename": "lto-plugin/lto-plugin.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2669cae081c852bc8bde1647d671aa66930cc556/lto-plugin%2Flto-plugin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2669cae081c852bc8bde1647d671aa66930cc556/lto-plugin%2Flto-plugin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2Flto-plugin.c?ref=2669cae081c852bc8bde1647d671aa66930cc556", "patch": "@@ -40,7 +40,11 @@ along with this program; see the file COPYING3.  If not see\n \n #ifdef HAVE_CONFIG_H\n #include \"config.h\"\n+#if !HAVE_PTHREAD_H\n+#error POSIX threads are mandatory dependency\n #endif\n+#endif\n+\n #if HAVE_STDINT_H\n #include <stdint.h>\n #endif\n@@ -55,6 +59,7 @@ along with this program; see the file COPYING3.  If not see\n #include <unistd.h>\n #include <fcntl.h>\n #include <sys/types.h>\n+#include <pthread.h>\n #ifdef HAVE_SYS_WAIT_H\n #include <sys/wait.h>\n #endif\n@@ -157,6 +162,9 @@ enum symbol_style\n   ss_uscore,\t/* Underscore prefix all symbols.  */\n };\n \n+/* Plug-in mutex.  */\n+static pthread_mutex_t plugin_lock;\n+\n static char *arguments_file_name;\n static ld_plugin_register_claim_file register_claim_file;\n static ld_plugin_register_all_symbols_read register_all_symbols_read;\n@@ -1262,15 +1270,18 @@ claim_file_handler (const struct ld_plugin_input_file *file, int *claimed)\n \t\t\t      lto_file.symtab.syms);\n       check (status == LDPS_OK, LDPL_FATAL, \"could not add symbols\");\n \n+      pthread_mutex_lock (&plugin_lock);\n       num_claimed_files++;\n       claimed_files =\n \txrealloc (claimed_files,\n \t\t  num_claimed_files * sizeof (struct plugin_file_info));\n       claimed_files[num_claimed_files - 1] = lto_file;\n+      pthread_mutex_unlock (&plugin_lock);\n \n       *claimed = 1;\n     }\n \n+  pthread_mutex_lock (&plugin_lock);\n   if (offload_files == NULL)\n     {\n       /* Add dummy item to the start of the list.  */\n@@ -1333,11 +1344,14 @@ claim_file_handler (const struct ld_plugin_input_file *file, int *claimed)\n \toffload_files_last_lto = ofld;\n       num_offload_files++;\n     }\n+  pthread_mutex_unlock (&plugin_lock);\n \n   goto cleanup;\n \n  err:\n+  pthread_mutex_lock (&plugin_lock);\n   non_claimed_files++;\n+  pthread_mutex_unlock (&plugin_lock);\n   free (lto_file.name);\n \n  cleanup:\n@@ -1415,6 +1429,12 @@ onload (struct ld_plugin_tv *tv)\n   struct ld_plugin_tv *p;\n   enum ld_plugin_status status;\n \n+  if (pthread_mutex_init (&plugin_lock, NULL) != 0)\n+    {\n+      fprintf (stderr, \"mutex init failed\\n\");\n+      abort ();\n+    }\n+\n   p = tv;\n   while (p->tv_tag)\n     {"}]}