{"sha": "2b3dffa66b6294bea45c75538efdf5fe9fd53293", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmIzZGZmYTY2YjYyOTRiZWE0NWM3NTUzOGVmZGY1ZmU5ZmQ1MzI5Mw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2008-04-08T12:25:49Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2008-04-08T12:25:49Z"}, "message": "ada-tree.h (TYPE_PACKED_ARRAY_TYPE_P): Only set it when bit-packed.\n\n\t* ada-tree.h (TYPE_PACKED_ARRAY_TYPE_P): Only set it when bit-packed.\n\t* decl.c (gnat_to_gnu_entity): Adjust for above change.\n\t<E_Record_Type>: Try to get a better form of the component for\n\tpacking, even if it has an integral mode.\n\t<E_Record_Subtype>: Likewise.\n\t* trans.c (gnat_to_gnu): Do not require BLKmode for the special\n\texception suppressing the final conversion between record types.\n\n\nCo-Authored-By: Richard Kenner <kenner@adacore.com>\n\nFrom-SVN: r134093", "tree": {"sha": "9abd7e33f14317e7d1a999389d28d0488b0ce318", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9abd7e33f14317e7d1a999389d28d0488b0ce318"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b3dffa66b6294bea45c75538efdf5fe9fd53293", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b3dffa66b6294bea45c75538efdf5fe9fd53293", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b3dffa66b6294bea45c75538efdf5fe9fd53293", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b3dffa66b6294bea45c75538efdf5fe9fd53293/comments", "author": null, "committer": null, "parents": [{"sha": "ba3f46d0910139e56300a68bc7992c0217b7adb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba3f46d0910139e56300a68bc7992c0217b7adb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba3f46d0910139e56300a68bc7992c0217b7adb9"}], "stats": {"total": 143, "additions": 122, "deletions": 21}, "files": [{"sha": "cdcf5293dd605edb7043ecc4cb3b528995e4866b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b3dffa66b6294bea45c75538efdf5fe9fd53293/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b3dffa66b6294bea45c75538efdf5fe9fd53293/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2b3dffa66b6294bea45c75538efdf5fe9fd53293", "patch": "@@ -1,3 +1,14 @@\n+2008-04-08  Eric Botcazou  <ebotcazou@adacore.com>\n+            Richard Kenner  <kenner@adacore.com>\n+\n+\t* ada-tree.h (TYPE_PACKED_ARRAY_TYPE_P): Only set it when bit-packed.\n+\t* decl.c (gnat_to_gnu_entity): Adjust for above change.\n+\t<E_Record_Type>: Try to get a better form of the component for\n+\tpacking, even if it has an integral mode.\n+\t<E_Record_Subtype>: Likewise.\n+\t* trans.c (gnat_to_gnu): Do not require BLKmode for the special\n+\texception suppressing the final conversion between record types.\n+\n 2008-04-08  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* decl.c (gnat_to_gnu_entity) <object>: If -gnatd.a and not optimizing"}, {"sha": "544138edf16d86030a3e121756c7a1db8c459f95", "filename": "gcc/ada/ada-tree.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b3dffa66b6294bea45c75538efdf5fe9fd53293/gcc%2Fada%2Fada-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b3dffa66b6294bea45c75538efdf5fe9fd53293/gcc%2Fada%2Fada-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fada-tree.h?ref=2b3dffa66b6294bea45c75538efdf5fe9fd53293", "patch": "@@ -69,8 +69,9 @@ struct lang_type GTY(()) {tree t; };\n #define TYPE_FAT_POINTER_P(NODE)  \\\n   (TREE_CODE (NODE) == RECORD_TYPE && TYPE_IS_FAT_POINTER_P (NODE))\n \n-/* For integral types and array types, nonzero if this is a packed array type.\n-   Such types should not be extended to a larger size.  */\n+/* For integral types and array types, nonzero if this is a packed array type\n+   used for bit-packed types.  Such types should not be extended to a larger\n+   size or validated against a specified size.  */\n #define TYPE_PACKED_ARRAY_TYPE_P(NODE) TYPE_LANG_FLAG_0 (NODE)\n \n #define TYPE_IS_PACKED_ARRAY_TYPE_P(NODE) \\"}, {"sha": "2b2cf57f7de4b11ca965eda0249314c2eb16f5c7", "filename": "gcc/ada/decl.c", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b3dffa66b6294bea45c75538efdf5fe9fd53293/gcc%2Fada%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b3dffa66b6294bea45c75538efdf5fe9fd53293/gcc%2Fada%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdecl.c?ref=2b3dffa66b6294bea45c75538efdf5fe9fd53293", "patch": "@@ -1400,7 +1400,8 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \n \tgnu_type = make_unsigned_type (GET_MODE_BITSIZE (mode));\n \tTYPE_PACKED_ARRAY_TYPE_P (gnu_type)\n-\t  = Is_Packed_Array_Type (gnat_entity);\n+\t  = (Is_Packed_Array_Type (gnat_entity)\n+\t     && Is_Bit_Packed_Array (Original_Array_Type (gnat_entity)));\n \n \t/* Get the modulus in this type.  If it overflows, assume it is because\n \t   it is equal to 2**Esize.  Note that there is no overflow checking\n@@ -1435,7 +1436,8 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t    TYPE_UNSIGNED (gnu_subtype) = 1;\n \t    TYPE_EXTRA_SUBTYPE_P (gnu_subtype) = 1;\n \t    TYPE_PACKED_ARRAY_TYPE_P (gnu_subtype)\n-\t      = Is_Packed_Array_Type (gnat_entity);\n+\t      = (Is_Packed_Array_Type (gnat_entity)\n+\t\t && Is_Bit_Packed_Array (Original_Array_Type (gnat_entity)));\n \t    layout_type (gnu_subtype);\n \n \t    gnu_type = gnu_subtype;\n@@ -1473,7 +1475,8 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t\t\t    gnu_expr, 0);\n \n       gnu_type = make_node (INTEGER_TYPE);\n-      if (Is_Packed_Array_Type (gnat_entity))\n+      if (Is_Packed_Array_Type (gnat_entity)\n+\t  && Is_Bit_Packed_Array (Original_Array_Type (gnat_entity)))\n \t{\n \t  esize = UI_To_Int (RM_Size (gnat_entity));\n \t  TYPE_PACKED_ARRAY_TYPE_P (gnu_type) = 1;\n@@ -1531,7 +1534,8 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t such values), we only get the good bits, since the unused bits\n \t are uninitialized.  Both goals are accomplished by wrapping the\n \t modular value in an enclosing struct.  */\n-      if (Is_Packed_Array_Type (gnat_entity))\n+      if (Is_Packed_Array_Type (gnat_entity)\n+\t    && Is_Bit_Packed_Array (Original_Array_Type (gnat_entity)))\n \t{\n \t  tree gnu_field_type = gnu_type;\n \t  tree gnu_field;\n@@ -1839,7 +1843,6 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t    && !Has_Aliased_Components (gnat_entity)\n \t    && !Strict_Alignment (Component_Type (gnat_entity))\n \t    && TREE_CODE (tem) == RECORD_TYPE\n-\t    && TYPE_MODE (tem) == BLKmode\n \t    && host_integerp (TYPE_SIZE (tem), 1))\n \t  tem = make_packable_type (tem, false);\n \n@@ -2208,7 +2211,6 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t\t  && !Has_Aliased_Components (gnat_entity)\n \t\t  && !Strict_Alignment (Component_Type (gnat_entity))\n \t\t  && TREE_CODE (gnu_type) == RECORD_TYPE\n-\t\t  && TYPE_MODE (gnu_type) == BLKmode\n \t\t  && host_integerp (TYPE_SIZE (gnu_type), 1))\n \t\tgnu_type = make_packable_type (gnu_type, false);\n \n@@ -2341,7 +2343,8 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t  TYPE_CONVENTION_FORTRAN_P (gnu_type)\n \t    = (Convention (gnat_entity) == Convention_Fortran);\n \t  TYPE_PACKED_ARRAY_TYPE_P (gnu_type)\n-\t    = Is_Packed_Array_Type (gnat_entity);\n+\t    = (Is_Packed_Array_Type (gnat_entity)\n+\t       && Is_Bit_Packed_Array (Original_Array_Type (gnat_entity)));\n \n \t  /* If our size depends on a placeholder and the maximum size doesn't\n \t     overflow, use it.  */\n@@ -5400,12 +5403,12 @@ round_up_to_align (unsigned HOST_WIDE_INT t, unsigned int align)\n   return t;\n }\n \n-/* TYPE is a RECORD_TYPE, UNION_TYPE, or QUAL_UNION_TYPE, with BLKmode that\n-   is being used as the field type of a packed record if IN_RECORD is true,\n-   or as the component type of a packed array if IN_RECORD is false.  See\n-   if we can rewrite it either as a type that has a non-BLKmode, which we\n-   can pack tighter, or as a smaller type with BLKmode.  If so, return the\n-   new type.  If not, return the original type.  */\n+/* TYPE is a RECORD_TYPE, UNION_TYPE or QUAL_UNION_TYPE that is being used\n+   as the field type of a packed record if IN_RECORD is true, or as the\n+   component type of a packed array if IN_RECORD is false.  See if we can\n+   rewrite it either as a type that has a non-BLKmode, which we can pack\n+   tighter in the packed record case, or as a smaller type with BLKmode.\n+   If so, return the new type.  If not, return the original type.  */\n \n static tree\n make_packable_type (tree type, bool in_record)"}, {"sha": "9fc77baa23b8a0c01652a8b6bb9dca93ec206bfa", "filename": "gcc/ada/trans.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b3dffa66b6294bea45c75538efdf5fe9fd53293/gcc%2Fada%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b3dffa66b6294bea45c75538efdf5fe9fd53293/gcc%2Fada%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftrans.c?ref=2b3dffa66b6294bea45c75538efdf5fe9fd53293", "patch": "@@ -4848,10 +4848,10 @@ gnat_to_gnu (Node_Id gnat_node)\n \t  its size since those are the cases where the front end may have the\n \t  type wrong due to \"instantiating\" the unconstrained record with\n \t  discriminant values.  Similarly, if the two types are record types\n-\t  with the same name and the result type has BLKmode, don't convert.\n-\t  This will be the case when we are converting from a packed version\n-\t  of a type to its original type and we need those conversions to be\n-\t  NOPs in order for assignments into these types to work properly.\n+\t  with the same name don't convert.  This will be the case when we are\n+\t  converting from a packed version of a type to its original type and\n+\t  we need those conversions to be NOPs in order for assignments into\n+\t  these types to work properly.\n \n        3. If the type is void or if we have no result, return error_mark_node\n \t  to show we have no result.\n@@ -4903,8 +4903,7 @@ gnat_to_gnu (Node_Id gnat_node)\n \t   || ((TYPE_NAME (gnu_result_type)\n \t\t== TYPE_NAME (TREE_TYPE (gnu_result)))\n \t       && TREE_CODE (gnu_result_type) == RECORD_TYPE\n-\t       && TREE_CODE (TREE_TYPE (gnu_result)) == RECORD_TYPE\n-\t       && TYPE_MODE (gnu_result_type) == BLKmode))\n+\t       && TREE_CODE (TREE_TYPE (gnu_result)) == RECORD_TYPE))\n     {\n       /* Remove any padding.  */\n       if (TREE_CODE (TREE_TYPE (gnu_result)) == RECORD_TYPE"}, {"sha": "89353a747871f239270db368d6f2af6565536443", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b3dffa66b6294bea45c75538efdf5fe9fd53293/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b3dffa66b6294bea45c75538efdf5fe9fd53293/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2b3dffa66b6294bea45c75538efdf5fe9fd53293", "patch": "@@ -1,3 +1,9 @@\n+2008-04-08  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/pack6.adb: New test.\n+\t* gnat.dg/pack7.adb: Likewise.\n+\t* gnat.dg/pack8.adb: Likewise.\n+\n 2008-04-08  Arnaud Charlet  <charlet@adacore.com>\n \n \t* gnat.dg/parent_ltd_with-child_full_view.adb: New test."}, {"sha": "d846ed12ce0ef562916b758ebbd1471fd1d92438", "filename": "gcc/testsuite/gnat.dg/pack6.adb", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b3dffa66b6294bea45c75538efdf5fe9fd53293/gcc%2Ftestsuite%2Fgnat.dg%2Fpack6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b3dffa66b6294bea45c75538efdf5fe9fd53293/gcc%2Ftestsuite%2Fgnat.dg%2Fpack6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fpack6.adb?ref=2b3dffa66b6294bea45c75538efdf5fe9fd53293", "patch": "@@ -0,0 +1,27 @@\n+-- { dg-do compile }\n+-- { dg-options \"-gnatws\" }\n+\n+procedure Pack6 is\n+\n+  type R is record\n+     I : Integer;\n+     a, b, c, d, e : Character;\n+  end record;\n+\n+  type Ar1 is array (1..4) of R;\n+  type Ar2 is array (1..4) of R;\n+  pragma Pack (Ar2);\n+\n+  type R2 is record\n+    A : Ar2;\n+  end record;\n+  for R2 use record\n+    A at 0 range 0 .. 72*4-1;\n+  end record;\n+\n+  X : Ar1;\n+  Y : Ar2;\n+\n+begin\n+  Y (1) := X (1);\n+end;"}, {"sha": "000e7fa8163bf15c46faaceb4a7c2931bd3685e4", "filename": "gcc/testsuite/gnat.dg/pack7.adb", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b3dffa66b6294bea45c75538efdf5fe9fd53293/gcc%2Ftestsuite%2Fgnat.dg%2Fpack7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b3dffa66b6294bea45c75538efdf5fe9fd53293/gcc%2Ftestsuite%2Fgnat.dg%2Fpack7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fpack7.adb?ref=2b3dffa66b6294bea45c75538efdf5fe9fd53293", "patch": "@@ -0,0 +1,27 @@\n+-- { dg-do compile }\n+-- { dg-options \"-gnatws\" }\n+\n+procedure Pack7 is\n+\n+  type R is record\n+     I : Integer;\n+     a, b : Character;\n+  end record;\n+\n+  type Ar1 is array (1..4) of R;\n+  type Ar2 is array (1..4) of R;\n+  pragma Pack (Ar2);\n+\n+  type R2 is record\n+    A : Ar2;\n+  end record;\n+  for R2 use record\n+    A at 0 range 0 .. 48*4-1;\n+  end record;\n+\n+  X : Ar1;\n+  Y : Ar2;\n+\n+begin\n+  Y (1) := X (1);\n+end;"}, {"sha": "a3a83bab0a9444725befb2b630c7292eaec96a85", "filename": "gcc/testsuite/gnat.dg/pack8.adb", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b3dffa66b6294bea45c75538efdf5fe9fd53293/gcc%2Ftestsuite%2Fgnat.dg%2Fpack8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b3dffa66b6294bea45c75538efdf5fe9fd53293/gcc%2Ftestsuite%2Fgnat.dg%2Fpack8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fpack8.adb?ref=2b3dffa66b6294bea45c75538efdf5fe9fd53293", "patch": "@@ -0,0 +1,27 @@\n+-- { dg-do compile }\n+-- { dg-options \"-gnatws\" }\n+\n+procedure Pack8 is\n+\n+  type R is record\n+     I : Integer;\n+     a, b : Character;\n+  end record;\n+\n+  type Ar1 is array (1..4) of R;\n+  type Ar2 is array (1..4) of R;\n+  pragma Pack (Ar2);\n+\n+  type R2 is record\n+    A : Ar2;\n+  end record;\n+  for R2 use record\n+    A at 0 range 0 .. 48*4-1-1;  -- { dg-error \"too small\" }\n+  end record;\n+\n+  X : Ar1;\n+  Y : Ar2;\n+\n+begin\n+  Y (1) := X (1);\n+end;"}]}