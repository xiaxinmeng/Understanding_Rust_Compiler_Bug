{"sha": "c1fc9f6e10e646f01194c8f150affbc1cfbc404a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzFmYzlmNmUxMGU2NDZmMDExOTRjOGYxNTBhZmZiYzFjZmJjNDA0YQ==", "commit": {"author": {"name": "Antony Polukhin", "email": "antoshkka@gmail.com", "date": "2020-09-24T17:51:37Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-09-24T17:51:37Z"}, "message": "libstdc++: assert that type traits are not misused with incomplete types [PR 71579]\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/71579\n\t* include/std/type_traits (invoke_result, is_invocable)\n\t(is_invocable_r, is_nothrow_invocable, is_nothrow_invocable_r):\n\tAdd static_asserts to make sure that the arguments of the type\n\ttraits are not misused with incomplete types.\n\t* testsuite/20_util/invoke_result/incomplete_args_neg.cc: New test.\n\t* testsuite/20_util/is_invocable/incomplete_args_neg.cc: New test.\n\t* testsuite/20_util/is_invocable/incomplete_neg.cc: New test.\n\t* testsuite/20_util/is_nothrow_invocable/incomplete_args_neg.cc:\n\tNew test.\n\t* testsuite/20_util/is_nothrow_invocable/incomplete_neg.cc: Check\n\tfor error on incomplete type usage in trait.", "tree": {"sha": "95e8dc4ec6086c2f7be3711c4a562eb47ff925ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95e8dc4ec6086c2f7be3711c4a562eb47ff925ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1fc9f6e10e646f01194c8f150affbc1cfbc404a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1fc9f6e10e646f01194c8f150affbc1cfbc404a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1fc9f6e10e646f01194c8f150affbc1cfbc404a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1fc9f6e10e646f01194c8f150affbc1cfbc404a/comments", "author": {"login": "apolukhin", "id": 1700098, "node_id": "MDQ6VXNlcjE3MDAwOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1700098?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apolukhin", "html_url": "https://github.com/apolukhin", "followers_url": "https://api.github.com/users/apolukhin/followers", "following_url": "https://api.github.com/users/apolukhin/following{/other_user}", "gists_url": "https://api.github.com/users/apolukhin/gists{/gist_id}", "starred_url": "https://api.github.com/users/apolukhin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apolukhin/subscriptions", "organizations_url": "https://api.github.com/users/apolukhin/orgs", "repos_url": "https://api.github.com/users/apolukhin/repos", "events_url": "https://api.github.com/users/apolukhin/events{/privacy}", "received_events_url": "https://api.github.com/users/apolukhin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42907ca9a495a4a535bbd995fa126afb76012023", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42907ca9a495a4a535bbd995fa126afb76012023", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42907ca9a495a4a535bbd995fa126afb76012023"}], "stats": {"total": 251, "additions": 251, "deletions": 0}, "files": [{"sha": "b7bb63bbc745b3f8d375a9cf3fc408a83aa8e63b", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1fc9f6e10e646f01194c8f150affbc1cfbc404a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1fc9f6e10e646f01194c8f150affbc1cfbc404a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=c1fc9f6e10e646f01194c8f150affbc1cfbc404a", "patch": "@@ -2965,6 +2965,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       static_assert(std::__is_complete_or_unbounded(__type_identity<_Functor>{}),\n \t\"_Functor must be a complete class or an unbounded array\");\n+      static_assert((std::__is_complete_or_unbounded(\n+\t__type_identity<_ArgTypes>{}) && ...),\n+\t\"each argument type must be a complete class or an unbounded array\");\n     };\n \n   /// std::invoke_result_t\n@@ -2978,6 +2981,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       static_assert(std::__is_complete_or_unbounded(__type_identity<_Fn>{}),\n \t\"_Fn must be a complete class or an unbounded array\");\n+      static_assert((std::__is_complete_or_unbounded(\n+\t__type_identity<_ArgTypes>{}) && ...),\n+\t\"each argument type must be a complete class or an unbounded array\");\n     };\n \n   /// std::is_invocable_r\n@@ -2987,6 +2993,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       static_assert(std::__is_complete_or_unbounded(__type_identity<_Fn>{}),\n \t\"_Fn must be a complete class or an unbounded array\");\n+      static_assert((std::__is_complete_or_unbounded(\n+\t__type_identity<_ArgTypes>{}) && ...),\n+\t\"each argument type must be a complete class or an unbounded array\");\n+      static_assert(std::__is_complete_or_unbounded(__type_identity<_Ret>{}),\n+\t\"_Ret must be a complete class or an unbounded array\");\n     };\n \n   /// std::is_nothrow_invocable\n@@ -2997,6 +3008,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       static_assert(std::__is_complete_or_unbounded(__type_identity<_Fn>{}),\n \t\"_Fn must be a complete class or an unbounded array\");\n+      static_assert((std::__is_complete_or_unbounded(\n+\t__type_identity<_ArgTypes>{}) && ...),\n+\t\"each argument type must be a complete class or an unbounded array\");\n     };\n \n   template<typename _Result, typename _Ret, typename = void>\n@@ -3017,6 +3031,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       static_assert(std::__is_complete_or_unbounded(__type_identity<_Fn>{}),\n \t\"_Fn must be a complete class or an unbounded array\");\n+      static_assert((std::__is_complete_or_unbounded(\n+\t__type_identity<_ArgTypes>{}) && ...),\n+\t\"each argument type must be a complete class or an unbounded array\");\n+      static_assert(std::__is_complete_or_unbounded(__type_identity<_Ret>{}),\n+\t\"_Ret must be a complete class or an unbounded array\");\n     };\n \n   /// std::is_invocable_v"}, {"sha": "a35ff4cd059cbd3a594f8563b098b01e4a77b981", "filename": "libstdc++-v3/testsuite/20_util/invoke_result/incomplete_args_neg.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1fc9f6e10e646f01194c8f150affbc1cfbc404a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Finvoke_result%2Fincomplete_args_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1fc9f6e10e646f01194c8f150affbc1cfbc404a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Finvoke_result%2Fincomplete_args_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Finvoke_result%2Fincomplete_args_neg.cc?ref=c1fc9f6e10e646f01194c8f150affbc1cfbc404a", "patch": "@@ -0,0 +1,47 @@\n+// { dg-do compile { target c++17 } }\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-error \"must be a complete class\" \"\" { target *-*-* } 0 }\n+\n+#include <type_traits>\n+\n+class X;\n+\n+void test01()\n+{\n+  std::invoke_result<int(X), X>();\t\t// { dg-error \"required from here\" }\n+  std::invoke_result<int(int, X), int, X>();\t\t// { dg-error \"required from here\" }\n+  std::invoke_result<int(int, X), X, int>();\t\t// { dg-error \"required from here\" }\n+\n+\n+  std::invoke_result<int(X&), X&>();\t\t// { dg-bogus \"required from here\" }\n+  std::invoke_result<int(int, X&), int, X&>();\t\t// { dg-bogus \"required from here\" }\n+\n+  std::invoke_result<int(X&&), X&&>();\t\t// { dg-bogus \"required from here\" }\n+  std::invoke_result<int(int, X&&), int, X&&>();\t\t// { dg-bogus \"required from here\" }\n+\n+  std::invoke_result<int(const X&&), const X&&>();\t\t// { dg-bogus \"required from here\" }\n+  std::invoke_result<int(int, const X&&), int, const X&&>();\t\t// { dg-bogus \"required from here\" }\n+\n+  std::invoke_result<int(const X&), const X&>();\t\t// { dg-bogus \"required from here\" }\n+  std::invoke_result<int(int, const X&), int, const X&>();\t\t// { dg-bogus \"required from here\" }\n+\n+  std::invoke_result<int(const X&), X&>();\t\t// { dg-bogus \"required from here\" }\n+  std::invoke_result<int(int, const X&), int, X&>();\t\t// { dg-bogus \"required from here\" }\n+}"}, {"sha": "a5ce49a7fc5097355a77fc8ac9de9ac83fb47195", "filename": "libstdc++-v3/testsuite/20_util/is_invocable/incomplete_args_neg.cc", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1fc9f6e10e646f01194c8f150affbc1cfbc404a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_invocable%2Fincomplete_args_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1fc9f6e10e646f01194c8f150affbc1cfbc404a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_invocable%2Fincomplete_args_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_invocable%2Fincomplete_args_neg.cc?ref=c1fc9f6e10e646f01194c8f150affbc1cfbc404a", "patch": "@@ -0,0 +1,70 @@\n+// { dg-do compile { target c++17 } }\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-error \"must be a complete class\" \"\" { target *-*-* } 0 }\n+\n+#include <type_traits>\n+\n+class X;\n+\n+void test01()\n+{\n+  std::is_invocable<int(X), X>();\t\t// { dg-error \"required from here\" }\n+  std::is_invocable<int(int, X), int, X>();\t\t// { dg-error \"required from here\" }\n+  std::is_invocable<int(int, X), X, int>();\t\t// { dg-error \"required from here\" }\n+\n+\n+  std::is_invocable<int(X&), X&>();\t\t// { dg-bogus \"required from here\" }\n+  std::is_invocable<int(int, X&), int, X&>();\t\t// { dg-bogus \"required from here\" }\n+\n+  std::is_invocable<int(X&&), X&&>();\t\t// { dg-bogus \"required from here\" }\n+  std::is_invocable<int(int, X&&), int, X&&>();\t\t// { dg-bogus \"required from here\" }\n+\n+  std::is_invocable<int(const X&&), const X&&>();\t\t// { dg-bogus \"required from here\" }\n+  std::is_invocable<int(int, const X&&), int, const X&&>();\t\t// { dg-bogus \"required from here\" }\n+\n+  std::is_invocable<int(const X&), const X&>();\t\t// { dg-bogus \"required from here\" }\n+  std::is_invocable<int(int, const X&), int, const X&>();\t\t// { dg-bogus \"required from here\" }\n+\n+  std::is_invocable<int(const X&), X&>();\t\t// { dg-bogus \"required from here\" }\n+  std::is_invocable<int(int, const X&), int, X&>();\t\t// { dg-bogus \"required from here\" }\n+}\n+\n+void test02()\n+{\n+  std::is_invocable_r<int, int(X), X>();\t\t// { dg-error \"required from here\" }\n+  std::is_invocable_r<int, int(int, X), int, X>();\t\t// { dg-error \"required from here\" }\n+  std::is_invocable_r<int, int(int, X), X, int>();\t\t// { dg-error \"required from here\" }\n+\n+\n+  std::is_invocable_r<int, int(X&), X&>();\t\t// { dg-bogus \"required from here\" }\n+  std::is_invocable_r<int, int(int, X&), int, X&>();\t\t// { dg-bogus \"required from here\" }\n+\n+  std::is_invocable_r<int, int(X&&), X&&>();\t\t// { dg-bogus \"required from here\" }\n+  std::is_invocable_r<int, int(int, X&&), int, X&&>();\t\t// { dg-bogus \"required from here\" }\n+\n+  std::is_invocable_r<int, int(const X&&), const X&&>();\t\t// { dg-bogus \"required from here\" }\n+  std::is_invocable_r<int, int(int, const X&&), int, const X&&>();\t\t// { dg-bogus \"required from here\" }\n+\n+  std::is_invocable_r<int, int(const X&), const X&>();\t\t// { dg-bogus \"required from here\" }\n+  std::is_invocable_r<int, int(int, const X&), int, const X&>();\t\t// { dg-bogus \"required from here\" }\n+\n+  std::is_invocable_r<int, int(const X&), X&>();\t\t// { dg-bogus \"required from here\" }\n+  std::is_invocable_r<int, int(int, const X&), int, X&>();\t\t// { dg-bogus \"required from here\" }\n+}"}, {"sha": "3041554b62a512e77f519288cdc2f7a9022d3bc8", "filename": "libstdc++-v3/testsuite/20_util/is_invocable/incomplete_neg.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1fc9f6e10e646f01194c8f150affbc1cfbc404a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_invocable%2Fincomplete_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1fc9f6e10e646f01194c8f150affbc1cfbc404a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_invocable%2Fincomplete_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_invocable%2Fincomplete_neg.cc?ref=c1fc9f6e10e646f01194c8f150affbc1cfbc404a", "patch": "@@ -0,0 +1,39 @@\n+// { dg-do compile { target c++17 } }\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-error \"must be a complete class\" \"\" { target *-*-* } 0 }\n+\n+#include <type_traits>\n+\n+class X;\n+\n+void test01()\n+{\n+  std::is_invocable<X, int>();\t\t// { dg-error \"required from here\" }\n+  std::is_invocable<X>();\t\t// { dg-error \"required from here\" }\n+\n+  std::is_invocable_r<int, X, int>();\t\t// { dg-error \"required from here\" }\n+  std::is_invocable_r<int, X>();\t\t// { dg-error \"required from here\" }\n+\n+  std::is_invocable_r<X, X()>();\t\t// { dg-error \"required from here\" }\n+  std::is_invocable_r<X, X(int), int>();\t\t// { dg-error \"required from here\" }\n+  std::is_invocable_r<X, X(int, int), int, int>();\t\t// { dg-error \"required from here\" }\n+\n+  std::is_invocable_r<X, X(), int, int>();\t\t// { dg-error \"required from here\" }\n+}"}, {"sha": "c60e73b8ec21e0711512b8e560cbbd0e3f17354e", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_invocable/incomplete_args_neg.cc", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1fc9f6e10e646f01194c8f150affbc1cfbc404a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_invocable%2Fincomplete_args_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1fc9f6e10e646f01194c8f150affbc1cfbc404a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_invocable%2Fincomplete_args_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_invocable%2Fincomplete_args_neg.cc?ref=c1fc9f6e10e646f01194c8f150affbc1cfbc404a", "patch": "@@ -0,0 +1,70 @@\n+// { dg-do compile { target c++17 } }\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-error \"must be a complete class\" \"\" { target *-*-* } 0 }\n+\n+#include <type_traits>\n+\n+class X;\n+\n+void test01()\n+{\n+  std::is_nothrow_invocable<int(X), X>();\t\t// { dg-error \"required from here\" }\n+  std::is_nothrow_invocable<int(int, X), int, X>();\t\t// { dg-error \"required from here\" }\n+  std::is_nothrow_invocable<int(int, X), X, int>();\t\t// { dg-error \"required from here\" }\n+\n+\n+  std::is_nothrow_invocable<int(X&), X&>();\t\t// { dg-bogus \"required from here\" }\n+  std::is_nothrow_invocable<int(int, X&), int, X&>();\t\t// { dg-bogus \"required from here\" }\n+\n+  std::is_nothrow_invocable<int(X&&), X&&>();\t\t// { dg-bogus \"required from here\" }\n+  std::is_nothrow_invocable<int(int, X&&), int, X&&>();\t\t// { dg-bogus \"required from here\" }\n+\n+  std::is_nothrow_invocable<int(const X&&), const X&&>();\t\t// { dg-bogus \"required from here\" }\n+  std::is_nothrow_invocable<int(int, const X&&), int, const X&&>();\t\t// { dg-bogus \"required from here\" }\n+\n+  std::is_nothrow_invocable<int(const X&), const X&>();\t\t// { dg-bogus \"required from here\" }\n+  std::is_nothrow_invocable<int(int, const X&), int, const X&>();\t\t// { dg-bogus \"required from here\" }\n+\n+  std::is_nothrow_invocable<int(const X&), X&>();\t\t// { dg-bogus \"required from here\" }\n+  std::is_nothrow_invocable<int(int, const X&), int, X&>();\t\t// { dg-bogus \"required from here\" }\n+}\n+\n+void test02()\n+{\n+  std::is_nothrow_invocable_r<int, int(X), X>();\t\t// { dg-error \"required from here\" }\n+  std::is_nothrow_invocable_r<int, int(int, X), int, X>();\t\t// { dg-error \"required from here\" }\n+  std::is_nothrow_invocable_r<int, int(int, X), X, int>();\t\t// { dg-error \"required from here\" }\n+\n+\n+  std::is_nothrow_invocable_r<int, int(X&), X&>();\t\t// { dg-bogus \"required from here\" }\n+  std::is_nothrow_invocable_r<int, int(int, X&), int, X&>();\t\t// { dg-bogus \"required from here\" }\n+\n+  std::is_nothrow_invocable_r<int, int(X&&), X&&>();\t\t// { dg-bogus \"required from here\" }\n+  std::is_nothrow_invocable_r<int, int(int, X&&), int, X&&>();\t\t// { dg-bogus \"required from here\" }\n+\n+  std::is_nothrow_invocable_r<int, int(const X&&), const X&&>();\t\t// { dg-bogus \"required from here\" }\n+  std::is_nothrow_invocable_r<int, int(int, const X&&), int, const X&&>();\t\t// { dg-bogus \"required from here\" }\n+\n+  std::is_nothrow_invocable_r<int, int(const X&), const X&>();\t\t// { dg-bogus \"required from here\" }\n+  std::is_nothrow_invocable_r<int, int(int, const X&), int, const X&>();\t\t// { dg-bogus \"required from here\" }\n+\n+  std::is_nothrow_invocable_r<int, int(const X&), X&>();\t\t// { dg-bogus \"required from here\" }\n+  std::is_nothrow_invocable_r<int, int(int, const X&), int, X&>();\t\t// { dg-bogus \"required from here\" }\n+}"}, {"sha": "ef8717185cc9ea7661f0e5797110f5d0101513b9", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_invocable/incomplete_neg.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1fc9f6e10e646f01194c8f150affbc1cfbc404a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_invocable%2Fincomplete_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1fc9f6e10e646f01194c8f150affbc1cfbc404a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_invocable%2Fincomplete_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_invocable%2Fincomplete_neg.cc?ref=c1fc9f6e10e646f01194c8f150affbc1cfbc404a", "patch": "@@ -30,4 +30,10 @@ void test01()\n \n   std::is_nothrow_invocable_r<int, X>();\t\t// { dg-error \"required from here\" }\n   std::is_nothrow_invocable_r<int, X, short>();\t\t// { dg-error \"required from here\" }\n+\n+  std::is_nothrow_invocable_r<X, X()>();\t\t// { dg-error \"required from here\" }\n+  std::is_nothrow_invocable_r<X, X(int), int>();\t\t// { dg-error \"required from here\" }\n+  std::is_nothrow_invocable_r<X, X(int, int), int, int>();\t\t// { dg-error \"required from here\" }\n+\n+  std::is_nothrow_invocable_r<X, X(), int, int>();\t\t// { dg-error \"required from here\" }\n }"}]}