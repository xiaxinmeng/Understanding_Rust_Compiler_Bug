{"sha": "af75269882c389f1abce41e732b27fdfedba1131", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWY3NTI2OTg4MmMzODlmMWFiY2U0MWU3MzJiMjdmZGZlZGJhMTEzMQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1997-11-03T02:49:29Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-11-03T02:49:29Z"}, "message": "com.c (ffecom_expr_): Only use TREE_TYPE argument for simple arithmetic...\n\n        * com.c (ffecom_expr_): Only use TREE_TYPE argument for simple\n        arithmetic; convert types as necessary; recurse with target tree type.\n\nCVS _----------------------------------------------------------------------\n\nFrom-SVN: r16287", "tree": {"sha": "a6fe550b8a49ba2c769237d4f02e2c52e7308cd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6fe550b8a49ba2c769237d4f02e2c52e7308cd0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af75269882c389f1abce41e732b27fdfedba1131", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af75269882c389f1abce41e732b27fdfedba1131", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af75269882c389f1abce41e732b27fdfedba1131", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af75269882c389f1abce41e732b27fdfedba1131/comments", "author": null, "committer": null, "parents": [{"sha": "cbd44549e68e0124548f12f3500a0a64ff17b3f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbd44549e68e0124548f12f3500a0a64ff17b3f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbd44549e68e0124548f12f3500a0a64ff17b3f9"}], "stats": {"total": 87, "additions": 67, "deletions": 20}, "files": [{"sha": "9f11174616b60acedaec8deda22aae96df2b76e5", "filename": "gcc/f/ChangeLog.egcs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af75269882c389f1abce41e732b27fdfedba1131/gcc%2Ff%2FChangeLog.egcs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af75269882c389f1abce41e732b27fdfedba1131/gcc%2Ff%2FChangeLog.egcs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog.egcs?ref=af75269882c389f1abce41e732b27fdfedba1131", "patch": "@@ -1,3 +1,8 @@\n+Sun Nov  2 19:49:51 1997  Richard Henderson  <rth@cygnus.com>\n+\n+\t* com.c (ffecom_expr_): Only use TREE_TYPE argument for simple\n+\tarithmetic; convert types as necessary; recurse with target tree type.\n+\n Wed Oct 22 11:37:41 1997  Richard Henderson  <rth@cygnus.com>\n \n \t* com.c (ffecom_expr_): Take an new arg TREE_TYPE that if non-null"}, {"sha": "e53190abbbbc4d181a11477f87605a33b647c44c", "filename": "gcc/f/com.c", "status": "modified", "additions": 62, "deletions": 20, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af75269882c389f1abce41e732b27fdfedba1131/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af75269882c389f1abce41e732b27fdfedba1131/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=af75269882c389f1abce41e732b27fdfedba1131", "patch": "@@ -2674,7 +2674,7 @@ ffecom_do_entry_ (ffesymbol fn, int entrynum)\n \n #if FFECOM_targetCURRENT == FFECOM_targetGCC\n static tree\n-ffecom_expr_ (ffebld expr, tree tree_type, tree dest_tree,\n+ffecom_expr_ (ffebld expr, tree tree_type_x, tree dest_tree,\n \t      ffebld dest, bool *dest_used,\n \t      bool assignp)\n {\n@@ -2685,6 +2685,8 @@ ffecom_expr_ (ffebld expr, tree tree_type, tree dest_tree,\n   ffeinfoKindtype kt;\n   tree t;\n   tree dt;\t\t\t/* decl_tree for an ffesymbol. */\n+  tree tree_type;\n+  tree left, right;\n   ffesymbol s;\n   enum tree_code code;\n \n@@ -2695,8 +2697,7 @@ ffecom_expr_ (ffebld expr, tree tree_type, tree dest_tree,\n \n   bt = ffeinfo_basictype (ffebld_info (expr));\n   kt = ffeinfo_kindtype (ffebld_info (expr));\n-  if (!tree_type)\n-    tree_type = ffecom_tree_type[bt][kt];\n+  tree_type = ffecom_tree_type[bt][kt];\n \n   switch (ffebld_op (expr))\n     {\n@@ -2940,35 +2941,76 @@ ffecom_expr_ (ffebld expr, tree tree_type, tree dest_tree,\n       }\n \n     case FFEBLD_opUPLUS:\n-      return ffecom_1 (NOP_EXPR, tree_type, ffecom_expr (ffebld_left (expr)));\n+      left = ffecom_expr_ (ffebld_left (expr), tree_type_x, NULL, NULL,\n+\t\t\t   NULL, FALSE);\n+      return ffecom_1 (NOP_EXPR, tree_type, left);\n \n     case FFEBLD_opPAREN:\t/* ~~~Make sure Fortran rules respected here */\n-      return ffecom_1 (NOP_EXPR, tree_type, ffecom_expr (ffebld_left (expr)));\n+      left = ffecom_expr_ (ffebld_left (expr), tree_type_x, NULL, NULL,\n+\t\t\t   NULL, FALSE);\n+      return ffecom_1 (NOP_EXPR, tree_type, left);\n \n     case FFEBLD_opUMINUS:\n-      return ffecom_1 (NEGATE_EXPR, tree_type,\n-\t\t       ffecom_expr (ffebld_left (expr)));\n+      left = ffecom_expr_ (ffebld_left (expr), tree_type_x, NULL, NULL,\n+\t\t\t   NULL, FALSE);\n+      if (tree_type_x) \n+\t{\n+\t  tree_type = tree_type_x;\n+\t  left = convert (tree_type, left);\n+\t}\n+      return ffecom_1 (NEGATE_EXPR, tree_type, left);\n \n     case FFEBLD_opADD:\n-      return ffecom_2 (PLUS_EXPR, tree_type,\n-\t\t       ffecom_expr (ffebld_left (expr)),\n-\t\t       ffecom_expr (ffebld_right (expr)));\n-      break;\n+      left = ffecom_expr_ (ffebld_left (expr), tree_type_x, NULL, NULL,\n+\t\t\t   NULL, FALSE);\n+      right = ffecom_expr_ (ffebld_right (expr), tree_type_x, NULL, NULL,\n+\t\t\t    NULL, FALSE);\n+      if (tree_type_x) \n+\t{\n+\t  tree_type = tree_type_x;\n+\t  left = convert (tree_type, left);\n+\t  right = convert (tree_type, right);\n+\t}\n+      return ffecom_2 (PLUS_EXPR, tree_type, left, right);\n \n     case FFEBLD_opSUBTRACT:\n-      return ffecom_2 (MINUS_EXPR, tree_type,\n-\t\t       ffecom_expr (ffebld_left (expr)),\n-\t\t       ffecom_expr (ffebld_right (expr)));\n+      left = ffecom_expr_ (ffebld_left (expr), tree_type_x, NULL, NULL,\n+\t\t\t   NULL, FALSE);\n+      right = ffecom_expr_ (ffebld_right (expr), tree_type_x, NULL, NULL,\n+\t\t\t    NULL, FALSE);\n+      if (tree_type_x) \n+\t{\n+\t  tree_type = tree_type_x;\n+\t  left = convert (tree_type, left);\n+\t  right = convert (tree_type, right);\n+\t}\n+      return ffecom_2 (MINUS_EXPR, tree_type, left, right);\n \n     case FFEBLD_opMULTIPLY:\n-      return ffecom_2 (MULT_EXPR, tree_type,\n-\t\t       ffecom_expr (ffebld_left (expr)),\n-\t\t       ffecom_expr (ffebld_right (expr)));\n+      left = ffecom_expr_ (ffebld_left (expr), tree_type_x, NULL, NULL,\n+\t\t\t   NULL, FALSE);\n+      right = ffecom_expr_ (ffebld_right (expr), tree_type_x, NULL, NULL,\n+\t\t\t    NULL, FALSE);\n+      if (tree_type_x) \n+\t{\n+\t  tree_type = tree_type_x;\n+\t  left = convert (tree_type, left);\n+\t  right = convert (tree_type, right);\n+\t}\n+      return ffecom_2 (MULT_EXPR, tree_type, left, right);\n \n     case FFEBLD_opDIVIDE:\n-      return ffecom_tree_divide_ (tree_type,\n-\t\t\t          ffecom_expr (ffebld_left (expr)),\n-\t\t\t          ffecom_expr (ffebld_right (expr)),\n+      left = ffecom_expr_ (ffebld_left (expr), tree_type_x, NULL, NULL,\n+\t\t\t   NULL, FALSE);\n+      right = ffecom_expr_ (ffebld_right (expr), tree_type_x, NULL, NULL,\n+\t\t\t    NULL, FALSE);\n+      if (tree_type_x) \n+\t{\n+\t  tree_type = tree_type_x;\n+\t  left = convert (tree_type, left);\n+\t  right = convert (tree_type, right);\n+\t}\n+      return ffecom_tree_divide_ (tree_type, left, right,\n \t\t\t          dest_tree, dest, dest_used);\n \n     case FFEBLD_opPOWER:"}]}