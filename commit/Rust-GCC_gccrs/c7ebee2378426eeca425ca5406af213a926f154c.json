{"sha": "c7ebee2378426eeca425ca5406af213a926f154c", "node_id": "C_kwDOANBUbNoAKGM3ZWJlZTIzNzg0MjZlZWNhNDI1Y2E1NDA2YWYyMTNhOTI2ZjE1NGM", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2022-10-17T22:13:47Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2022-10-20T10:07:39Z"}, "message": "Add 'libgomp.oacc-c-c++-common/private-big-1.c' [PR105421]\n\nAfter commit r13-3404-g7c55755d4c760de326809636531478fd7419e1e5\n\"amdgcn: Use FLAT addressing for all functions with pointer arguments [PR105421]\",\n\"big\" private data now works for GCN offloading, too.\n\n\tPR target/105421\n\tlibgomp/\n\t* testsuite/libgomp.oacc-c-c++-common/private-big-1.c: New.", "tree": {"sha": "101d1c9869cb7a0a1f161ecee926a7b832847550", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/101d1c9869cb7a0a1f161ecee926a7b832847550"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7ebee2378426eeca425ca5406af213a926f154c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7ebee2378426eeca425ca5406af213a926f154c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7ebee2378426eeca425ca5406af213a926f154c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7ebee2378426eeca425ca5406af213a926f154c/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c55755d4c760de326809636531478fd7419e1e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c55755d4c760de326809636531478fd7419e1e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c55755d4c760de326809636531478fd7419e1e5"}], "stats": {"total": 100, "additions": 100, "deletions": 0}, "files": [{"sha": "c0e8db0c894ceaedb09bca8e68410b9de1bcc98f", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/private-big-1.c", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7ebee2378426eeca425ca5406af213a926f154c/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fprivate-big-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7ebee2378426eeca425ca5406af213a926f154c/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fprivate-big-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fprivate-big-1.c?ref=c7ebee2378426eeca425ca5406af213a926f154c", "patch": "@@ -0,0 +1,100 @@\n+/* Test \"big\" private data.  */\n+\n+/* { dg-additional-options -fno-inline } for stable results regarding OpenACC 'routine'.  */\n+\n+/* { dg-additional-options -fopt-info-all-omp }\n+   { dg-additional-options --param=openacc-privatization=noisy }\n+   { dg-additional-options -foffload=-fopt-info-all-omp }\n+   { dg-additional-options -foffload=--param=openacc-privatization=noisy }\n+   for testing/documenting aspects of that functionality.  */\n+\n+/* { dg-additional-options -Wopenacc-parallelism } for testing/documenting\n+   aspects of that functionality.  */\n+\n+/* For GCN offloading compilation, we (expectedly) run into a\n+   'gang-private data-share memory exhausted' error: the default\n+   '-mgang-private-size' is too small.  Raise it so that 'uint32_t x[344]' plus\n+   some internal-use data fits in:\n+   { dg-additional-options -foffload-options=amdgcn-amdhsa=-mgang-private-size=1555 { target openacc_radeon_accel_selected } } */\n+\n+/* It's only with Tcl 8.5 (released in 2007) that \"the variable 'varName'\n+   passed to 'incr' may be unset, and in that case, it will be set to [...]\",\n+   so to maintain compatibility with earlier Tcl releases, we manually\n+   initialize counter variables:\n+   { dg-line l_dummy[variable c_compute 0 c_loop 0] }\n+   { dg-message dummy {} { target iN-VAl-Id } l_dummy } to avoid\n+   \"WARNING: dg-line var l_dummy defined, but not used\".  */\n+\n+#include <assert.h>\n+#include <stdint.h>\n+\n+\n+/* Based on 'private-variables.c:loop_g_5'.  */\n+\n+/* To demonstrate PR105421 \"GCN offloading, raised '-mgang-private-size':\n+   'HSA_STATUS_ERROR_MEMORY_APERTURE_VIOLATION'\", a 'struct' indirection, for\n+   example, has been necessary in combination with a separate routine.  */\n+\n+struct data\n+{\n+  uint32_t *x;\n+  uint32_t *arr;\n+  uint32_t i;\n+};\n+\n+#pragma acc routine worker\n+static void\n+loop_g_5_r(struct data *data)\n+{\n+  uint32_t *x = data->x;\n+  uint32_t *arr = data->arr;\n+  uint32_t i = data->i;\n+\n+#pragma acc loop /* { dg-line l_loop[incr c_loop] } */\n+  /* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop$c_loop } */\n+  /* { dg-optimized {assigned OpenACC worker vector loop parallelism} {} { target *-*-* } l_loop$c_loop } */\n+  for (int j = 0; j < 320; j++)\n+    arr[i * 320 + j] += x[(i * 320 + j) % 344];\n+}\n+\n+void loop_g_5()\n+{\n+  uint32_t x[344], i, arr[320 * 320];\n+\n+  for (i = 0; i < 320 * 320; i++)\n+    arr[i] = i;\n+\n+  #pragma acc parallel copy(arr)\n+  {\n+    #pragma acc loop gang private(x) /* { dg-line l_loop[incr c_loop] } */\n+    /* { dg-note {variable 'x' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_loop$c_loop }\n+       { dg-note {variable 'x' ought to be adjusted for OpenACC privatization level: 'gang'} {} { target *-*-* } l_loop$c_loop }\n+       { dg-note {variable 'x' adjusted for OpenACC privatization level: 'gang'} {} { target { ! openacc_host_selected } } l_loop$c_loop } */\n+    /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop$c_loop } */\n+    /* { dg-note {variable 'data' declared in block is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_loop$c_loop }\n+       { dg-note {variable 'data' ought to be adjusted for OpenACC privatization level: 'gang'} {} { target *-*-* } l_loop$c_loop }\n+       { dg-note {variable 'data' adjusted for OpenACC privatization level: 'gang'} {} { target { ! openacc_host_selected } } l_loop$c_loop } */\n+    /* { dg-note {variable 'j' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop$c_loop } */\n+    /* { dg-optimized {assigned OpenACC gang loop parallelism} {} { target *-*-* } l_loop$c_loop } */\n+    for (i = 0; i < 320; i++)\n+      {\n+        for (int j = 0; j < 344; j++)\n+\t  x[j] = j * (2 + i);\n+\n+\tstruct data data = { x, arr, i };\n+\tloop_g_5_r(&data); /* { dg-line l_compute[incr c_compute] } */\n+\t/* { dg-optimized {assigned OpenACC worker vector loop parallelism} {} { target *-*-* } l_compute$c_compute } */\n+      }\n+  }\n+\n+  for (i = 0; i < 320 * 320; i++)\n+    assert(arr[i] == i + (i % 344) * (2 + (i / 320)));\n+}\n+\n+\n+int main ()\n+{\n+  loop_g_5();\n+\n+  return 0;\n+}"}]}