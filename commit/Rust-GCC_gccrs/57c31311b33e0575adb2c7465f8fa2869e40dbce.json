{"sha": "57c31311b33e0575adb2c7465f8fa2869e40dbce", "node_id": "C_kwDOANBUbNoAKDU3YzMxMzExYjMzZTA1NzVhZGIyYzc0NjVmOGZhMjg2OWU0MGRiY2U", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-11-05T17:42:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-05T17:42:34Z"}, "message": "Merge #796\n\n796: Handle forward declared items within blocks r=philberty a=philberty\n\nThis changes the resolution in BlockExpr's to iterate the Items then Stmts\r\nbut we might want to handle this by desugaring the HIR BlockExpr to have\r\nitems then stmts to ensure we type resolve the items before the stmts.\r\n\r\nFixes #531\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "21c23aa6eabd9d7fcdfdb2b5c9f2638b12876977", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21c23aa6eabd9d7fcdfdb2b5c9f2638b12876977"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57c31311b33e0575adb2c7465f8fa2869e40dbce", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhhW0KCRBK7hj4Ov3rIwAA2agIAAPwCNP6Ppl5cIc6JOJeZHut\nNUrcq5iXjBdELBLnqymVApeHS5TEkrXi/U2R0HClMABrRYV+mIfS03kGx13RcHWh\np8u+ZkZEa+e/kPCdbyGX6VFzBTSkR/yAJrya/fWKAII0Ky85ht4uYsRvRmWmx91J\nkeT3LrSlPmhnM0UqX2qnx7jN1Df1QvO7ZgZUbUTOVUB88F/vz2J2VfLgMgKbOAdx\n+PHNlIKXlrzITwfInP3jYmrXiaTaSNQN6PT+X7o2w/UebjldSbLzLmqFGQZoGp/N\nlWi3HHdXZc6FaskMRS4Y7npc3+BVhxXc4aMmkF2xnc2FjWT5EmAVoAHyJfhAYvM=\n=ZM+d\n-----END PGP SIGNATURE-----\n", "payload": "tree 21c23aa6eabd9d7fcdfdb2b5c9f2638b12876977\nparent 5074f89f4fd0be3f5fbaf46db604a0b961e7267d\nparent 17dc14cb4b0819532376a22b592b26dd6ffc364f\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1636134154 +0000\ncommitter GitHub <noreply@github.com> 1636134154 +0000\n\nMerge #796\n\n796: Handle forward declared items within blocks r=philberty a=philberty\n\nThis changes the resolution in BlockExpr's to iterate the Items then Stmts\r\nbut we might want to handle this by desugaring the HIR BlockExpr to have\r\nitems then stmts to ensure we type resolve the items before the stmts.\r\n\r\nFixes #531\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57c31311b33e0575adb2c7465f8fa2869e40dbce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57c31311b33e0575adb2c7465f8fa2869e40dbce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57c31311b33e0575adb2c7465f8fa2869e40dbce/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5074f89f4fd0be3f5fbaf46db604a0b961e7267d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5074f89f4fd0be3f5fbaf46db604a0b961e7267d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5074f89f4fd0be3f5fbaf46db604a0b961e7267d"}, {"sha": "17dc14cb4b0819532376a22b592b26dd6ffc364f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17dc14cb4b0819532376a22b592b26dd6ffc364f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17dc14cb4b0819532376a22b592b26dd6ffc364f"}], "stats": {"total": 122, "additions": 88, "deletions": 34}, "files": [{"sha": "72f260989ba6b79d44ed3b364c0646b7a3b7d236", "filename": "gcc/rust/ast/rust-ast.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57c31311b33e0575adb2c7465f8fa2869e40dbce/gcc%2Frust%2Fast%2Frust-ast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57c31311b33e0575adb2c7465f8fa2869e40dbce/gcc%2Frust%2Fast%2Frust-ast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.h?ref=57c31311b33e0575adb2c7465f8fa2869e40dbce", "patch": "@@ -822,6 +822,8 @@ class Stmt\n   virtual bool is_marked_for_strip () const = 0;\n   NodeId get_node_id () const { return node_id; }\n \n+  virtual bool is_item () const = 0;\n+\n protected:\n   Stmt () : node_id (Analysis::Mappings::get ()->get_next_node_id ()) {}\n \n@@ -847,6 +849,8 @@ class Item : public Stmt\n   add_crate_name (std::vector<std::string> &names ATTRIBUTE_UNUSED) const\n   {}\n \n+  bool is_item () const override final { return true; }\n+\n protected:\n   // Clone function implementation as pure virtual method\n   virtual Item *clone_item_impl () const = 0;"}, {"sha": "a1b4e5778cd4d5eecdddb0f43445fb2f60416caa", "filename": "gcc/rust/ast/rust-stmt.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57c31311b33e0575adb2c7465f8fa2869e40dbce/gcc%2Frust%2Fast%2Frust-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57c31311b33e0575adb2c7465f8fa2869e40dbce/gcc%2Frust%2Fast%2Frust-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-stmt.h?ref=57c31311b33e0575adb2c7465f8fa2869e40dbce", "patch": "@@ -46,6 +46,8 @@ class EmptyStmt : public Stmt\n   void mark_for_strip () override { marked_for_strip = true; }\n   bool is_marked_for_strip () const override { return marked_for_strip; }\n \n+  bool is_item () const override final { return false; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n@@ -169,6 +171,8 @@ class LetStmt : public Stmt\n     return type;\n   }\n \n+  bool is_item () const override final { return false; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n@@ -186,6 +190,8 @@ class ExprStmt : public Stmt\n public:\n   Location get_locus () const override final { return locus; }\n \n+  bool is_item () const override final { return false; }\n+\n protected:\n   ExprStmt (Location locus) : locus (locus) {}\n };"}, {"sha": "575d1f66a861a266e48a53ac20eb7d26fc90182e", "filename": "gcc/rust/hir/tree/rust-hir-expr.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57c31311b33e0575adb2c7465f8fa2869e40dbce/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57c31311b33e0575adb2c7465f8fa2869e40dbce/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h?ref=57c31311b33e0575adb2c7465f8fa2869e40dbce", "patch": "@@ -2007,15 +2007,6 @@ class BlockExpr : public ExprWithBlock\n \n   void accept_vis (HIRVisitor &vis) override;\n \n-  void iterate_stmts (std::function<bool (Stmt *)> cb)\n-  {\n-    for (auto it = statements.begin (); it != statements.end (); it++)\n-      {\n-\tif (!cb (it->get ()))\n-\t  return;\n-      }\n-  }\n-\n   bool is_final_stmt (Stmt *stmt) { return statements.back ().get () == stmt; }\n \n   Location get_closing_locus ()"}, {"sha": "29e98faf7b0fa05b0c1c9a9e4cd5324d80b35c78", "filename": "gcc/rust/hir/tree/rust-hir-stmt.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57c31311b33e0575adb2c7465f8fa2869e40dbce/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57c31311b33e0575adb2c7465f8fa2869e40dbce/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-stmt.h?ref=57c31311b33e0575adb2c7465f8fa2869e40dbce", "patch": "@@ -41,6 +41,8 @@ class EmptyStmt : public Stmt\n \n   void accept_vis (HIRVisitor &vis) override;\n \n+  bool is_item () const override final { return false; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n@@ -119,6 +121,8 @@ class LetStmt : public Stmt\n \n   HIR::Pattern *get_pattern () { return variables_pattern.get (); }\n \n+  bool is_item () const override final { return false; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n@@ -136,6 +140,8 @@ class ExprStmt : public Stmt\n public:\n   Location get_locus () const override final { return locus; }\n \n+  bool is_item () const override final { return false; }\n+\n protected:\n   ExprStmt (Analysis::NodeMapping mappings, Location locus)\n     : Stmt (std::move (mappings)), locus (locus)"}, {"sha": "e8345539b39df577642b96226f781d6e68d54bc3", "filename": "gcc/rust/hir/tree/rust-hir.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57c31311b33e0575adb2c7465f8fa2869e40dbce/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57c31311b33e0575adb2c7465f8fa2869e40dbce/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h?ref=57c31311b33e0575adb2c7465f8fa2869e40dbce", "patch": "@@ -104,6 +104,8 @@ class Stmt\n \n   const Analysis::NodeMapping &get_mappings () const { return mappings; }\n \n+  virtual bool is_item () const = 0;\n+\n protected:\n   Stmt (Analysis::NodeMapping mappings) : mappings (std::move (mappings)) {}\n \n@@ -140,6 +142,8 @@ class Item : public Stmt\n   AST::AttrVec &get_outer_attrs () { return outer_attrs; }\n   const AST::AttrVec &get_outer_attrs () const { return outer_attrs; }\n \n+  bool is_item () const override final { return true; }\n+\n protected:\n   // Constructor\n   Item (Analysis::NodeMapping mappings,"}, {"sha": "ca5d8945c290c86448b72924b8d8f75400389fe6", "filename": "gcc/rust/lint/rust-lint-marklive.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57c31311b33e0575adb2c7465f8fa2869e40dbce/gcc%2Frust%2Flint%2Frust-lint-marklive.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57c31311b33e0575adb2c7465f8fa2869e40dbce/gcc%2Frust%2Flint%2Frust-lint-marklive.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flint%2Frust-lint-marklive.h?ref=57c31311b33e0575adb2c7465f8fa2869e40dbce", "patch": "@@ -97,10 +97,10 @@ class MarkLive : public MarkLiveBase\n \n   void visit (HIR::BlockExpr &expr) override\n   {\n-    expr.iterate_stmts ([&] (HIR::Stmt *s) mutable -> bool {\n-      s->accept_vis (*this);\n-      return true;\n-    });\n+    for (auto &s : expr.get_statements ())\n+      {\n+\ts->accept_vis (*this);\n+      }\n     if (expr.has_expr ())\n       {\n \texpr.get_final_expr ()->accept_vis (*this);"}, {"sha": "921b77c91795b2c11448726d60d03985343dbfb8", "filename": "gcc/rust/resolve/rust-ast-resolve.cc", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57c31311b33e0575adb2c7465f8fa2869e40dbce/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57c31311b33e0575adb2c7465f8fa2869e40dbce/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc?ref=57c31311b33e0575adb2c7465f8fa2869e40dbce", "patch": "@@ -349,7 +349,16 @@ ResolveExpr::visit (AST::BlockExpr &expr)\n   resolver->push_new_label_rib (resolver->get_type_scope ().peek ());\n \n   for (auto &s : expr.get_statements ())\n-    ResolveStmt::go (s.get (), s->get_node_id ());\n+    {\n+      if (s->is_item ())\n+\tResolveStmt::go (s.get (), s->get_node_id ());\n+    }\n+\n+  for (auto &s : expr.get_statements ())\n+    {\n+      if (!s->is_item ())\n+\tResolveStmt::go (s.get (), s->get_node_id ());\n+    }\n \n   if (expr.has_tail_expr ())\n     ResolveExpr::go (expr.get_tail_expr ().get (), expr.get_node_id ());"}, {"sha": "ca4842a1630237ce21c9d96c317dfa09040bf7a7", "filename": "gcc/rust/typecheck/rust-hir-type-check.cc", "status": "modified", "additions": 29, "deletions": 14, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57c31311b33e0575adb2c7465f8fa2869e40dbce/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57c31311b33e0575adb2c7465f8fa2869e40dbce/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc?ref=57c31311b33e0575adb2c7465f8fa2869e40dbce", "patch": "@@ -93,22 +93,37 @@ TypeResolution::Resolve (HIR::Crate &crate)\n void\n TypeCheckExpr::visit (HIR::BlockExpr &expr)\n {\n-  expr.iterate_stmts ([&] (HIR::Stmt *s) mutable -> bool {\n-    auto resolved = TypeCheckStmt::Resolve (s, inside_loop);\n-    if (resolved == nullptr)\n-      {\n-\trust_error_at (s->get_locus (), \"failure to resolve type\");\n-\treturn false;\n-      }\n+  for (auto &s : expr.get_statements ())\n+    {\n+      if (!s->is_item ())\n+\tcontinue;\n \n-    if (s->is_unit_check_needed () && !resolved->is_unit ())\n-      {\n-\tauto unit = new TyTy::TupleType (s->get_mappings ().get_hirid ());\n-\tresolved = unit->unify (resolved);\n-      }\n+      auto resolved = TypeCheckStmt::Resolve (s.get (), inside_loop);\n+      if (resolved == nullptr)\n+\t{\n+\t  rust_error_at (s->get_locus (), \"failure to resolve type\");\n+\t  return;\n+\t}\n+    }\n \n-    return true;\n-  });\n+  for (auto &s : expr.get_statements ())\n+    {\n+      if (s->is_item ())\n+\tcontinue;\n+\n+      auto resolved = TypeCheckStmt::Resolve (s.get (), inside_loop);\n+      if (resolved == nullptr)\n+\t{\n+\t  rust_error_at (s->get_locus (), \"failure to resolve type\");\n+\t  return;\n+\t}\n+\n+      if (s->is_unit_check_needed () && !resolved->is_unit ())\n+\t{\n+\t  auto unit = new TyTy::TupleType (s->get_mappings ().get_hirid ());\n+\t  resolved = unit->unify (resolved);\n+\t}\n+    }\n \n   if (expr.has_expr ())\n     infered"}, {"sha": "c305d48bec38bb93f5bd149062f6f820e90a1b4c", "filename": "gcc/rust/typecheck/rust-tycheck-dump.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57c31311b33e0575adb2c7465f8fa2869e40dbce/gcc%2Frust%2Ftypecheck%2Frust-tycheck-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57c31311b33e0575adb2c7465f8fa2869e40dbce/gcc%2Frust%2Ftypecheck%2Frust-tycheck-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tycheck-dump.h?ref=57c31311b33e0575adb2c7465f8fa2869e40dbce", "patch": "@@ -94,12 +94,12 @@ class TypeResolverDump : public TypeCheckBase\n   {\n     indentation_level++;\n \n-    expr.iterate_stmts ([&] (HIR::Stmt *s) mutable -> bool {\n-      dump += indent ();\n-      s->accept_vis (*this);\n-      dump += \";\\n\";\n-      return true;\n-    });\n+    for (auto &s : expr.get_statements ())\n+      {\n+\tdump += indent ();\n+\ts->accept_vis (*this);\n+\tdump += \";\\n\";\n+      }\n \n     if (expr.has_expr ())\n       {"}, {"sha": "73a47fe061bbf8ddaee5ff0e7f6f1e430bcaf918", "filename": "gcc/testsuite/rust/compile/torture/forward_decl_5.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57c31311b33e0575adb2c7465f8fa2869e40dbce/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fforward_decl_5.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57c31311b33e0575adb2c7465f8fa2869e40dbce/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fforward_decl_5.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fforward_decl_5.rs?ref=57c31311b33e0575adb2c7465f8fa2869e40dbce", "patch": "@@ -0,0 +1,19 @@\n+pub fn main() {\n+    let a;\n+    a = foo { a: 123, b: 456f32 };\n+\n+    let mut a = 123;\n+    a = bar(a);\n+\n+    let mut b = 456f32;\n+    b = bar(b);\n+\n+    fn bar<T>(x: T) -> T {\n+        x\n+    }\n+\n+    struct foo {\n+        a: i32,\n+        b: f32,\n+    };\n+}"}]}