{"sha": "058d19b42ad4c4c22635f70db6913a80884aedec", "node_id": "C_kwDOANBUbNoAKDA1OGQxOWI0MmFkNGM0YzIyNjM1ZjcwZGI2OTEzYTgwODg0YWVkZWM", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-03-08T11:07:07Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-03-08T14:57:50Z"}, "message": "tree-optimization/84201 - add --param vect-induction-float\n\nThis adds a --param to allow disabling of vectorization of\nfloating point inductions.  Ontop of -Ofast this should allow\n549.fotonik3d_r to not miscompare.\n\n2022-03-08  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/84201\n\t* params.opt (-param=vect-induction-float): Add.\n\t* doc/invoke.texi (vect-induction-float): Document.\n\t* tree-vect-loop.cc (vectorizable_induction): Honor\n\tparam_vect_induction_float.\n\n\t* gcc.dg/vect/pr84201.c: New testcase.", "tree": {"sha": "132a35c433f10840e076458499896e86ef4bc9ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/132a35c433f10840e076458499896e86ef4bc9ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/058d19b42ad4c4c22635f70db6913a80884aedec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/058d19b42ad4c4c22635f70db6913a80884aedec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/058d19b42ad4c4c22635f70db6913a80884aedec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/058d19b42ad4c4c22635f70db6913a80884aedec/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7cce7b1c3d829172eb7f232e71ad194a0ad51931", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cce7b1c3d829172eb7f232e71ad194a0ad51931", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cce7b1c3d829172eb7f232e71ad194a0ad51931"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "a0fa5e1cf434202b6832d7f289f41b6251ce076d", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/058d19b42ad4c4c22635f70db6913a80884aedec/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/058d19b42ad4c4c22635f70db6913a80884aedec/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=058d19b42ad4c4c22635f70db6913a80884aedec", "patch": "@@ -14989,6 +14989,9 @@ in an inner loop relative to the loop being vectorized.  The factor applied\n is the maximum of the estimated number of iterations of the inner loop and\n this parameter.  The default value of this parameter is 50.\n \n+@item vect-induction-float\n+Enable loop vectorization of floating point inductions.\n+\n @item avoid-fma-max-bits\n Maximum number of bits for which we avoid creating FMAs.\n "}, {"sha": "9561aa61a50260d08997c43c4fa2f1c8d867772d", "filename": "gcc/params.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/058d19b42ad4c4c22635f70db6913a80884aedec/gcc%2Fparams.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/058d19b42ad4c4c22635f70db6913a80884aedec/gcc%2Fparams.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.opt?ref=058d19b42ad4c4c22635f70db6913a80884aedec", "patch": "@@ -1176,6 +1176,10 @@ Controls how loop vectorizer uses partial vectors.  0 means never, 1 means only\n Common Joined UInteger Var(param_vect_inner_loop_cost_factor) Init(50) IntegerRange(1, 10000) Param Optimization\n The maximum factor which the loop vectorizer applies to the cost of statements in an inner loop relative to the loop being vectorized.\n \n+-param=vect-induction-float=\n+Common Joined UInteger Var(param_vect_induction_float) Init(1) IntegerRage(0, 1) Param Optimization\n+Enable loop vectorization of floating point inductions.\n+\n -param=vrp1-mode=\n Common Joined Var(param_vrp1_mode) Enum(vrp_mode) Init(VRP_MODE_VRP) Param Optimization\n --param=vrp1-mode=[vrp|ranger] Specifies the mode VRP1 should operate in."}, {"sha": "1cc6d1ff13c7264251c33ec36d8514915bf22fa1", "filename": "gcc/testsuite/gcc.dg/vect/pr84201.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/058d19b42ad4c4c22635f70db6913a80884aedec/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr84201.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/058d19b42ad4c4c22635f70db6913a80884aedec/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr84201.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr84201.c?ref=058d19b42ad4c4c22635f70db6913a80884aedec", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-Ofast --param vect-induction-float=0\" } */\n+\n+void foo (float *a, float f, float s, int n)\n+{\n+  for (int i = 0; i < n; ++i)\n+    {\n+      a[i] = f;\n+      f += s;\n+    }\n+}\n+\n+void bar (double *a, double f, double s, int n)\n+{\n+  for (int i = 0; i < n; ++i)\n+    {\n+      a[i] = f;\n+      f += s;\n+    }\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 2 \"vect\" } } */"}, {"sha": "7fcec12a3e9efa35fcd4e3584d054b439e57442a", "filename": "gcc/tree-vect-loop.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/058d19b42ad4c4c22635f70db6913a80884aedec/gcc%2Ftree-vect-loop.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/058d19b42ad4c4c22635f70db6913a80884aedec/gcc%2Ftree-vect-loop.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.cc?ref=058d19b42ad4c4c22635f70db6913a80884aedec", "patch": "@@ -8175,6 +8175,14 @@ vectorizable_induction (loop_vec_info loop_vinfo,\n       return false;\n     }\n \n+  if (FLOAT_TYPE_P (vectype) && !param_vect_induction_float)\n+    {\n+      if (dump_enabled_p ())\n+\tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n+\t\t\t \"floating point induction vectorization disabled\\n\");\n+      return false;\n+    }\n+\n   step_expr = STMT_VINFO_LOOP_PHI_EVOLUTION_PART (stmt_info);\n   gcc_assert (step_expr != NULL_TREE);\n   tree step_vectype = get_same_sized_vectype (TREE_TYPE (step_expr), vectype);"}]}