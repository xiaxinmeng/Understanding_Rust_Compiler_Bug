{"sha": "14bd21c2c576d6f4b9bd403f543502cff40f54fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTRiZDIxYzJjNTc2ZDZmNGI5YmQ0MDNmNTQzNTAyY2ZmNDBmNTRmYw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-03-26T16:08:33Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-03-26T16:08:33Z"}, "message": "aarch64: Add a CPU-specific cost table for Neoverse V1\n\nThis patch adds dedicated vector costs for Neoverse V1.\nPreviously we just used the Cortex-A57 costs, which isn't\nideal given that Cortex-A57 doesn't support SVE.\n\ngcc/\n\t* config/aarch64/aarch64.c (neoversev1_advsimd_vector_cost)\n\t(neoversev1_sve_vector_cost): New cost structures.\n\t(neoversev1_vector_cost): Likewise.\n\t(neoversev1_tunings): Use them.  Enable use_new_vector_costs.", "tree": {"sha": "0ed30d4bf81be16a180e5e60e5ba2aee4a94d25b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ed30d4bf81be16a180e5e60e5ba2aee4a94d25b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14bd21c2c576d6f4b9bd403f543502cff40f54fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14bd21c2c576d6f4b9bd403f543502cff40f54fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14bd21c2c576d6f4b9bd403f543502cff40f54fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14bd21c2c576d6f4b9bd403f543502cff40f54fc/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c679969bac9b7ae5e9446bfaa5466e19063d690", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c679969bac9b7ae5e9446bfaa5466e19063d690", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c679969bac9b7ae5e9446bfaa5466e19063d690"}], "stats": {"total": 95, "additions": 93, "deletions": 2}, "files": [{"sha": "2e9853e4c9b74cbb0b9ffecc3962c589253927cf", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 93, "deletions": 2, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14bd21c2c576d6f4b9bd403f543502cff40f54fc/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14bd21c2c576d6f4b9bd403f543502cff40f54fc/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=14bd21c2c576d6f4b9bd403f543502cff40f54fc", "patch": "@@ -1619,12 +1619,102 @@ static const struct tune_params neoversen1_tunings =\n   &generic_prefetch_tune\n };\n \n+static const advsimd_vec_cost neoversev1_advsimd_vector_cost =\n+{\n+  2, /* int_stmt_cost  */\n+  2, /* fp_stmt_cost  */\n+  4, /* ld2_st2_permute_cost */\n+  4, /* ld3_st3_permute_cost  */\n+  5, /* ld4_st4_permute_cost  */\n+  3, /* permute_cost  */\n+  4, /* reduc_i8_cost  */\n+  4, /* reduc_i16_cost  */\n+  2, /* reduc_i32_cost  */\n+  2, /* reduc_i64_cost  */\n+  6, /* reduc_f16_cost  */\n+  3, /* reduc_f32_cost  */\n+  2, /* reduc_f64_cost  */\n+  2, /* store_elt_extra_cost  */\n+  /* This value is just inherited from the Cortex-A57 table.  */\n+  8, /* vec_to_scalar_cost  */\n+  /* This depends very much on what the scalar value is and\n+     where it comes from.  E.g. some constants take two dependent\n+     instructions or a load, while others might be moved from a GPR.\n+     4 seems to be a reasonable compromise in practice.  */\n+  4, /* scalar_to_vec_cost  */\n+  4, /* align_load_cost  */\n+  4, /* unalign_load_cost  */\n+  /* Although stores have a latency of 2 and compete for the\n+     vector pipes, in practice it's better not to model that.  */\n+  1, /* unalign_store_cost  */\n+  1  /* store_cost  */\n+};\n+\n+static const sve_vec_cost neoversev1_sve_vector_cost =\n+{\n+  {\n+    2, /* int_stmt_cost  */\n+    2, /* fp_stmt_cost  */\n+    4, /* ld2_st2_permute_cost  */\n+    7, /* ld3_st3_permute_cost  */\n+    8, /* ld4_st4_permute_cost  */\n+    3, /* permute_cost  */\n+    /* Theoretically, a reduction involving 31 scalar ADDs could\n+       complete in ~9 cycles and would have a cost of 31.  [SU]ADDV\n+       completes in 14 cycles, so give it a cost of 31 + 5.  */\n+    36, /* reduc_i8_cost  */\n+    /* Likewise for 15 scalar ADDs (~5 cycles) vs. 12: 15 + 7.  */\n+    22, /* reduc_i16_cost  */\n+    /* Likewise for 7 scalar ADDs (~3 cycles) vs. 10: 7 + 7.  */\n+    14, /* reduc_i32_cost  */\n+    /* Likewise for 3 scalar ADDs (~2 cycles) vs. 10: 3 + 8.  */\n+    11, /* reduc_i64_cost  */\n+    /* Theoretically, a reduction involving 15 scalar FADDs could\n+       complete in ~9 cycles and would have a cost of 30.  FADDV\n+       completes in 13 cycles, so give it a cost of 30 + 4.  */\n+    34, /* reduc_f16_cost  */\n+    /* Likewise for 7 scalar FADDs (~6 cycles) vs. 11: 14 + 5.  */\n+    19, /* reduc_f32_cost  */\n+    /* Likewise for 3 scalar FADDs (~4 cycles) vs. 9: 6 + 5.  */\n+    11, /* reduc_f64_cost  */\n+    2, /* store_elt_extra_cost  */\n+    /* This value is just inherited from the Cortex-A57 table.  */\n+    8, /* vec_to_scalar_cost  */\n+    /* See the comment above the Advanced SIMD versions.  */\n+    4, /* scalar_to_vec_cost  */\n+    4, /* align_load_cost  */\n+    4, /* unalign_load_cost  */\n+    /* Although stores have a latency of 2 and compete for the\n+       vector pipes, in practice it's better not to model that.  */\n+    1, /* unalign_store_cost  */\n+    1  /* store_cost  */\n+  },\n+  3, /* clast_cost  */\n+  19, /* fadda_f16_cost  */\n+  11, /* fadda_f32_cost  */\n+  8, /* fadda_f64_cost  */\n+  3 /* scatter_store_elt_cost  */\n+};\n+\n+/* Neoverse V1 costs for vector insn classes.  */\n+static const struct cpu_vector_cost neoversev1_vector_cost =\n+{\n+  1, /* scalar_int_stmt_cost  */\n+  2, /* scalar_fp_stmt_cost  */\n+  4, /* scalar_load_cost  */\n+  1, /* scalar_store_cost  */\n+  1, /* cond_taken_branch_cost  */\n+  1, /* cond_not_taken_branch_cost  */\n+  &neoversev1_advsimd_vector_cost, /* advsimd  */\n+  &neoversev1_sve_vector_cost /* sve  */\n+};\n+\n static const struct tune_params neoversev1_tunings =\n {\n   &cortexa76_extra_costs,\n   &generic_addrcost_table,\n   &generic_regmove_cost,\n-  &cortexa57_vector_cost,\n+  &neoversev1_vector_cost,\n   &generic_branch_cost,\n   &generic_approx_modes,\n   SVE_256, /* sve_width  */\n@@ -1641,7 +1731,8 @@ static const struct tune_params neoversev1_tunings =\n   2,\t/* min_div_recip_mul_df.  */\n   0,\t/* max_case_values.  */\n   tune_params::AUTOPREFETCHER_WEAK,\t/* autoprefetcher_model.  */\n-  (AARCH64_EXTRA_TUNE_CSE_SVE_VL_CONSTANTS),\t/* tune_flags.  */\n+  (AARCH64_EXTRA_TUNE_CSE_SVE_VL_CONSTANTS\n+   | AARCH64_EXTRA_TUNE_USE_NEW_VECTOR_COSTS),\t/* tune_flags.  */\n   &generic_prefetch_tune\n };\n "}]}