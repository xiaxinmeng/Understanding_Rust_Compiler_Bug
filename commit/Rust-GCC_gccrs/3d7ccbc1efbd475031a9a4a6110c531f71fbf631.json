{"sha": "3d7ccbc1efbd475031a9a4a6110c531f71fbf631", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Q3Y2NiYzFlZmJkNDc1MDMxYTlhNGE2MTEwYzUzMWY3MWZiZjYzMQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2021-08-06T19:32:01Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2021-08-10T04:41:35Z"}, "message": "x86: Optimize load of const FP all bits set vectors\n\nCheck float_vector_all_ones_operand for vector floating-point modes to\noptimize load of const floating-point all bits set vectors.\n\ngcc/\n\n\tPR target/101804\n\t* config/i386/constraints.md (BC): Document for integer SSE\n\tconstant all bits set operand.\n\t(BF): New constraint for const floating-point all bits set\n\tvectors.\n\t* config/i386/i386.c (standard_sse_constant_p): Likewise.\n\t(standard_sse_constant_opcode): Likewise.\n\t* config/i386/sse.md (sseconstm1): New mode attribute.\n\t(mov<mode>_internal): Replace BC with <sseconstm1>.\n\ngcc/testsuite/\n\n\tPR target/101804\n\t* gcc.target/i386/avx2-gather-2.c: Pass -march=skylake instead\n\tof \"-mavx2 -mtune=skylake\".  Scan vpcmpeqd.", "tree": {"sha": "0161a6c4b497a2dec9b32bb14801f336cd26b141", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0161a6c4b497a2dec9b32bb14801f336cd26b141"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d7ccbc1efbd475031a9a4a6110c531f71fbf631", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d7ccbc1efbd475031a9a4a6110c531f71fbf631", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d7ccbc1efbd475031a9a4a6110c531f71fbf631", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d7ccbc1efbd475031a9a4a6110c531f71fbf631/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "813ccbe9d272cd67a8f075beea280de95f807492", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/813ccbe9d272cd67a8f075beea280de95f807492", "html_url": "https://github.com/Rust-GCC/gccrs/commit/813ccbe9d272cd67a8f075beea280de95f807492"}], "stats": {"total": 35, "additions": 29, "deletions": 6}, "files": [{"sha": "87cceac4cfbed11ba87c7b94ac5609a1689b8905", "filename": "gcc/config/i386/constraints.md", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7ccbc1efbd475031a9a4a6110c531f71fbf631/gcc%2Fconfig%2Fi386%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7ccbc1efbd475031a9a4a6110c531f71fbf631/gcc%2Fconfig%2Fi386%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fconstraints.md?ref=3d7ccbc1efbd475031a9a4a6110c531f71fbf631", "patch": "@@ -166,7 +166,8 @@\n ;;  s  Sibcall memory operand, not valid for TARGET_X32\n ;;  w  Call memory operand, not valid for TARGET_X32\n ;;  z  Constant call address operand.\n-;;  C  SSE constant operand.\n+;;  C  Integer SSE constant with all bits set operand.\n+;;  F  Floating-point SSE constant with all bits set operand.\n \n (define_constraint \"Bf\"\n   \"@internal Flags register operand.\"\n@@ -216,11 +217,16 @@\n   (match_operand 0 \"constant_call_address_operand\"))\n \n (define_constraint \"BC\"\n-  \"@internal SSE constant -1 operand.\"\n+  \"@internal integer SSE constant with all bits set operand.\"\n   (and (match_test \"TARGET_SSE\")\n        (ior (match_test \"op == constm1_rtx\")\n \t    (match_operand 0 \"vector_all_ones_operand\"))))\n \n+(define_constraint \"BF\"\n+  \"@internal floating-point SSE constant with all bits set operand.\"\n+  (and (match_test \"TARGET_SSE\")\n+       (match_operand 0 \"float_vector_all_ones_operand\")))\n+\n ;; Integer constant constraints.\n (define_constraint \"Wb\"\n   \"Integer constant in the range 0 @dots{} 7, for 8-bit shifts.\""}, {"sha": "4d4ab6a03d65e617bf5a0db5ac2caf5823f2414b", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7ccbc1efbd475031a9a4a6110c531f71fbf631/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7ccbc1efbd475031a9a4a6110c531f71fbf631/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=3d7ccbc1efbd475031a9a4a6110c531f71fbf631", "patch": "@@ -5073,7 +5073,11 @@ standard_sse_constant_p (rtx x, machine_mode pred_mode)\n   if (x == const0_rtx || const0_operand (x, mode))\n     return 1;\n \n-  if (x == constm1_rtx || vector_all_ones_operand (x, mode))\n+  if (x == constm1_rtx\n+      || vector_all_ones_operand (x, mode)\n+      || ((GET_MODE_CLASS (mode) == MODE_VECTOR_FLOAT\n+\t   || GET_MODE_CLASS (pred_mode) == MODE_VECTOR_FLOAT)\n+\t  && float_vector_all_ones_operand (x, mode)))\n     {\n       /* VOIDmode integer constant, get mode from the predicate.  */\n       if (mode == VOIDmode)\n@@ -5171,7 +5175,10 @@ standard_sse_constant_opcode (rtx_insn *insn, rtx *operands)\n \t  gcc_unreachable ();\n \t}\n     }\n-  else if (x == constm1_rtx || vector_all_ones_operand (x, mode))\n+  else if (x == constm1_rtx\n+\t   || vector_all_ones_operand (x, mode)\n+\t   || (GET_MODE_CLASS (mode) == MODE_VECTOR_FLOAT\n+\t       && float_vector_all_ones_operand (x, mode)))\n     {\n       enum attr_mode insn_mode = get_attr_mode (insn);\n       "}, {"sha": "2b0d10e856a2a538c7dd673f467950b1db24d15f", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7ccbc1efbd475031a9a4a6110c531f71fbf631/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7ccbc1efbd475031a9a4a6110c531f71fbf631/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=3d7ccbc1efbd475031a9a4a6110c531f71fbf631", "patch": "@@ -784,6 +784,15 @@\n    (V4SF \"V4SF\") (V2DF \"V2DF\")\n    (TI \"TI\")])\n \n+;; SSE constant -1 constraint\n+(define_mode_attr sseconstm1\n+  [(V64QI \"BC\") (V32HI \"BC\") (V16SI \"BC\") (V8DI \"BC\") (V4TI \"BC\")\n+   (V32QI \"BC\") (V16HI \"BC\") (V8SI \"BC\") (V4DI \"BC\") (V2TI \"BC\")\n+   (V16QI \"BC\") (V8HI \"BC\") (V4SI \"BC\") (V2DI \"BC\") (V1TI \"BC\")\n+   (V16SF \"BF\") (V8DF \"BF\")\n+   (V8SF \"BF\") (V4DF \"BF\")\n+   (V4SF \"BF\") (V2DF \"BF\")])\n+\n ;; Mapping of vector modes to corresponding mask size\n (define_mode_attr avx512fmaskmode\n   [(V64QI \"DI\") (V32QI \"SI\") (V16QI \"HI\")\n@@ -1063,7 +1072,7 @@\n   [(set (match_operand:VMOVE 0 \"nonimmediate_operand\"\n \t \"=v,v ,v ,m\")\n \t(match_operand:VMOVE 1 \"nonimmediate_or_sse_const_operand\"\n-\t \" C,BC,vm,v\"))]\n+\t \" C,<sseconstm1>,vm,v\"))]\n   \"TARGET_SSE\n    && (register_operand (operands[0], <MODE>mode)\n        || register_operand (operands[1], <MODE>mode))\""}, {"sha": "ad5ef73107c1a5fa0641562adac264fd2fe182c6", "filename": "gcc/testsuite/gcc.target/i386/avx2-gather-2.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7ccbc1efbd475031a9a4a6110c531f71fbf631/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-gather-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7ccbc1efbd475031a9a4a6110c531f71fbf631/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-gather-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-gather-2.c?ref=3d7ccbc1efbd475031a9a4a6110c531f71fbf631", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O3 -mavx2 -fdump-tree-vect-details -mtune=skylake\" } */\n+/* { dg-options \"-O3 -fdump-tree-vect-details -march=skylake\" } */\n \n #include \"avx2-gather-1.c\"\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops in function\" 16 \"vect\" } } */\n+/* { dg-final { scan-assembler \"vpcmpeqd\" } } */"}]}