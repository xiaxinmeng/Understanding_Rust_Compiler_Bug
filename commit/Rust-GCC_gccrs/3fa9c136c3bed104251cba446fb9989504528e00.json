{"sha": "3fa9c136c3bed104251cba446fb9989504528e00", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZhOWMxMzZjM2JlZDEwNDI1MWNiYTQ0NmZiOTk4OTUwNDUyOGUwMA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard@codesourcery.com", "date": "2006-03-03T09:11:58Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2006-03-03T09:11:58Z"}, "message": "tm.texi: Refer to SYMBOL_REF_HAS_BLOCK_INFO_P instead of SYMBOL_REF_IN_BLOCK_P.\n\n\t* doc/tm.texi: Refer to SYMBOL_REF_HAS_BLOCK_INFO_P instead of\n\tSYMBOL_REF_IN_BLOCK_P.\n\t* doc/rtl.texi: Likewise.  Refer to SYMBOL_FLAG_HAS_BLOCK_INFO instead\n\tof SYMBOL_FLAG_IN_BLOCK.\n\t* gengtype.c (adjust_field_rtx_def): Use SYMBOL_REF_HAS_BLOCK_INFO_P\n\tinstead of SYMBOL_REF_IN_BLOCK_P.\n\t* explow.c (use_anchored_address): Likewise.\n\t* rtl.c (rtx_size): Likewise.\n\t* varasm.c (create_block_symbol): Set SYMBOL_FLAG_HAS_BLOCK_INFO\n\tinstead of SYMBOL_FLAG_IN_BLOCK.\n\t(make_decl_rtl): Use SYMBOL_REF_HAS_BLOCK_INFO_P instead of\n\tSYMBOL_REF_IN_BLOCK_P.\n\t(assemble_variable): Likewise.\n\t(output_constant_def_contents): Likewise.\n\t(output_constant_pool): Likewise.\n\t(default_encode_section_info): Preserve SYMBOL_FLAG_HAS_BLOCK_INFO\n\tinstead of SYMBOL_FLAG_IN_BLOCK.\n\t* rtl.h (block_symbol): Refer to SYMBOL_REF_HAS_BLOCK_INFO_P instead of\n\tSYMBOL_REF_IN_BLOCK_P.\n\t(SYMBOL_REF_BLOCK): Likewise.\n\t(SYMBOL_REF_OFFSET): Likewise.\n\t(BLOCK_SYMBOL_CHECK): Use SYMBOL_REF_HAS_BLOCK_INFO_P instead of\n\tSYMBOL_REF_IN_BLOCK_P.\n\t(SYMBOL_FLAG_IN_BLOCK): Replace with...\n\t(SYMBOL_FLAG_HAS_BLOCK_INFO): ...this.\n\t(SYMBOL_REF_IN_BLOCK_P): Replace with...\n\t(SYMBOL_REF_HAS_BLOCK_INFO_P): ...this.\n\nFrom-SVN: r111675", "tree": {"sha": "735d1313d25f4094319b64fffac6f6b86aaed7f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/735d1313d25f4094319b64fffac6f6b86aaed7f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3fa9c136c3bed104251cba446fb9989504528e00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fa9c136c3bed104251cba446fb9989504528e00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fa9c136c3bed104251cba446fb9989504528e00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fa9c136c3bed104251cba446fb9989504528e00/comments", "author": null, "committer": null, "parents": [{"sha": "f677599ed9974ede2549beab2eee10b9242bb845", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f677599ed9974ede2549beab2eee10b9242bb845", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f677599ed9974ede2549beab2eee10b9242bb845"}], "stats": {"total": 111, "additions": 73, "deletions": 38}, "files": [{"sha": "11527685c54205956beb5927dfd908edb99f44ad", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fa9c136c3bed104251cba446fb9989504528e00/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fa9c136c3bed104251cba446fb9989504528e00/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3fa9c136c3bed104251cba446fb9989504528e00", "patch": "@@ -1,3 +1,33 @@\n+2006-03-03  Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* doc/tm.texi: Refer to SYMBOL_REF_HAS_BLOCK_INFO_P instead of\n+\tSYMBOL_REF_IN_BLOCK_P.\n+\t* doc/rtl.texi: Likewise.  Refer to SYMBOL_FLAG_HAS_BLOCK_INFO instead\n+\tof SYMBOL_FLAG_IN_BLOCK.\n+\t* gengtype.c (adjust_field_rtx_def): Use SYMBOL_REF_HAS_BLOCK_INFO_P\n+\tinstead of SYMBOL_REF_IN_BLOCK_P.\n+\t* explow.c (use_anchored_address): Likewise.\n+\t* rtl.c (rtx_size): Likewise.\n+\t* varasm.c (create_block_symbol): Set SYMBOL_FLAG_HAS_BLOCK_INFO\n+\tinstead of SYMBOL_FLAG_IN_BLOCK.\n+\t(make_decl_rtl): Use SYMBOL_REF_HAS_BLOCK_INFO_P instead of\n+\tSYMBOL_REF_IN_BLOCK_P.\n+\t(assemble_variable): Likewise.\n+\t(output_constant_def_contents): Likewise.\n+\t(output_constant_pool): Likewise.\n+\t(default_encode_section_info): Preserve SYMBOL_FLAG_HAS_BLOCK_INFO\n+\tinstead of SYMBOL_FLAG_IN_BLOCK.\n+\t* rtl.h (block_symbol): Refer to SYMBOL_REF_HAS_BLOCK_INFO_P instead of\n+\tSYMBOL_REF_IN_BLOCK_P.\n+\t(SYMBOL_REF_BLOCK): Likewise.\n+\t(SYMBOL_REF_OFFSET): Likewise.\n+\t(BLOCK_SYMBOL_CHECK): Use SYMBOL_REF_HAS_BLOCK_INFO_P instead of\n+\tSYMBOL_REF_IN_BLOCK_P.\n+\t(SYMBOL_FLAG_IN_BLOCK): Replace with...\n+\t(SYMBOL_FLAG_HAS_BLOCK_INFO): ...this.\n+\t(SYMBOL_REF_IN_BLOCK_P): Replace with...\n+\t(SYMBOL_REF_HAS_BLOCK_INFO_P): ...this.\n+\n 2006-03-03  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/arm/unwind-arm.h (_Unwind_GetIPInfo): Fix pasto."}, {"sha": "71e6df73e891487605b0b4d0f5adc5a879a74aca", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fa9c136c3bed104251cba446fb9989504528e00/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fa9c136c3bed104251cba446fb9989504528e00/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=3fa9c136c3bed104251cba446fb9989504528e00", "patch": "@@ -502,12 +502,11 @@ This is a multi-bit field accessor that returns the @code{tls_model}\n to be used for a thread-local storage symbol.  It returns zero for\n non-thread-local symbols.\n \n-@findex SYMBOL_REF_IN_BLOCK_P\n-@findex SYMBOL_FLAG_IN_BLOCK\n-@item SYMBOL_FLAG_IN_BLOCK\n-Set if the symbol has been assigned to an @code{object_block} structure.\n-@code{SYMBOL_REF_BLOCK} and @code{SYMBOL_REF_BLOCK_OFFSET} provide more\n-information about such symbols.\n+@findex SYMBOL_REF_HAS_BLOCK_INFO_P\n+@findex SYMBOL_FLAG_HAS_BLOCK_INFO\n+@item SYMBOL_FLAG_HAS_BLOCK_INFO\n+Set if the symbol has @code{SYMBOL_REF_BLOCK} and\n+@code{SYMBOL_REF_BLOCK_OFFSET} fields.\n \n @findex SYMBOL_REF_ANCHOR_P\n @findex SYMBOL_FLAG_ANCHOR\n@@ -518,7 +517,7 @@ are symbols that have a known position within an @code{object_block}\n and that can be used to access nearby members of that block.\n They are used to implement @option{-fsection-anchors}.\n \n-If this flag is set, then @code{SYMBOL_FLAG_IN_BLOCK} will be too.\n+If this flag is set, then @code{SYMBOL_FLAG_HAS_BLOCK_INFO} will be too.\n @end table\n \n Bits beginning with @code{SYMBOL_FLAG_MACH_DEP} are available for\n@@ -527,14 +526,16 @@ the target's use.\n \n @findex SYMBOL_REF_BLOCK\n @item SYMBOL_REF_BLOCK (@var{x})\n-If @samp{SYMBOL_REF_IN_BLOCK_P (@var{x})}, this is the @samp{object_block}\n-structure to which the symbol belongs, or @code{NULL} if none.\n+If @samp{SYMBOL_REF_HAS_BLOCK_INFO_P (@var{x})}, this is the\n+@samp{object_block} structure to which the symbol belongs,\n+or @code{NULL} if it has not been assigned a block.\n \n @findex SYMBOL_REF_BLOCK_OFFSET\n @item SYMBOL_REF_BLOCK_OFFSET (@var{x})\n-If @samp{SYMBOL_REF_IN_BLOCK_P (@var{x})}, this is the offset of @var{x}\n+If @samp{SYMBOL_REF_HAS_BLOCK_INFO_P (@var{x})}, this is the offset of @var{x}\n from the first object in @samp{SYMBOL_REF_BLOCK (@var{x})}.  The value is\n-negative if @var{x} has not yet been assigned an offset.\n+negative if @var{x} has not yet been assigned to a block, or it has not\n+been given an offset within that block.\n @end table\n \n @node Flags"}, {"sha": "674cd95c694fd540e2c554ffadb3edddfd048459", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fa9c136c3bed104251cba446fb9989504528e00/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fa9c136c3bed104251cba446fb9989504528e00/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=3fa9c136c3bed104251cba446fb9989504528e00", "patch": "@@ -5329,7 +5329,7 @@ is @code{NULL}, which disables the use of section anchors altogether.\n \n @deftypefn {Target Hook} bool TARGET_USE_ANCHORS_FOR_SYMBOL_P (rtx @var{x})\n Return true if GCC should attempt to use anchors to access @code{SYMBOL_REF}\n-@var{x}.  You can assume @samp{SYMBOL_REF_IN_BLOCK_P (@var{x})} and\n+@var{x}.  You can assume @samp{SYMBOL_REF_HAS_BLOCK_INFO_P (@var{x})} and\n @samp{!SYMBOL_REF_ANCHOR_P (@var{x})}.\n \n The default version is correct for most targets, but you might need to"}, {"sha": "2cc34899197ffbfce4c559e2dec8c173f2646705", "filename": "gcc/explow.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fa9c136c3bed104251cba446fb9989504528e00/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fa9c136c3bed104251cba446fb9989504528e00/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=3fa9c136c3bed104251cba446fb9989504528e00", "patch": "@@ -566,7 +566,7 @@ use_anchored_address (rtx x)\n \n   /* Check whether BASE is suitable for anchors.  */\n   if (GET_CODE (base) != SYMBOL_REF\n-      || !SYMBOL_REF_IN_BLOCK_P (base)\n+      || !SYMBOL_REF_HAS_BLOCK_INFO_P (base)\n       || SYMBOL_REF_ANCHOR_P (base)\n       || SYMBOL_REF_BLOCK (base) == NULL\n       || !targetm.use_anchors_for_symbol_p (base))"}, {"sha": "2ca4ac7af36eaaeb6c8085c3b65056cc78d26df7", "filename": "gcc/gengtype.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fa9c136c3bed104251cba446fb9989504528e00/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fa9c136c3bed104251cba446fb9989504528e00/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=3fa9c136c3bed104251cba446fb9989504528e00", "patch": "@@ -675,10 +675,11 @@ adjust_field_rtx_def (type_p t, options_p ARG_UNUSED (opt))\n \n       if (i == SYMBOL_REF)\n \t{\n-\t  /* Add the \"block_sym\" field if SYMBOL_REF_IN_BLOCK_P holds.  */\n+\t  /* Add the \"block_sym\" field if SYMBOL_REF_HAS_BLOCK_INFO_P holds.  */\n \t  type_p field_tp = find_structure (\"block_symbol\", 0);\n-\t  subfields = create_optional_field (subfields, field_tp, \"block_sym\",\n-\t\t\t\t\t     \"SYMBOL_REF_IN_BLOCK_P (&%0)\");\n+\t  subfields\n+\t    = create_optional_field (subfields, field_tp, \"block_sym\",\n+\t\t\t\t     \"SYMBOL_REF_HAS_BLOCK_INFO_P (&%0)\");\n \t}\n \n       sname = xasprintf (\"rtx_def_%s\", rtx_name[i]);"}, {"sha": "b1c1ac14471d99656d3e56f95e3c101720c5e653", "filename": "gcc/rtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fa9c136c3bed104251cba446fb9989504528e00/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fa9c136c3bed104251cba446fb9989504528e00/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=3fa9c136c3bed104251cba446fb9989504528e00", "patch": "@@ -175,7 +175,7 @@ rtvec_alloc (int n)\n unsigned int\n rtx_size (rtx x)\n {\n-  if (GET_CODE (x) == SYMBOL_REF && SYMBOL_REF_IN_BLOCK_P (x))\n+  if (GET_CODE (x) == SYMBOL_REF && SYMBOL_REF_HAS_BLOCK_INFO_P (x))\n     return RTX_HDR_SIZE + sizeof (struct block_symbol);\n   return RTX_CODE_SIZE (GET_CODE (x));\n }"}, {"sha": "409734d4b883de1cd1cc285500bde753d20e4bcc", "filename": "gcc/rtl.h", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fa9c136c3bed104251cba446fb9989504528e00/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fa9c136c3bed104251cba446fb9989504528e00/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=3fa9c136c3bed104251cba446fb9989504528e00", "patch": "@@ -178,7 +178,7 @@ typedef union rtunion_def rtunion;\n \n /* This structure remembers the position of a SYMBOL_REF within an\n    object_block structure.  A SYMBOL_REF only provides this information\n-   if SYMBOL_REF_IN_BLOCK_P is true.  */\n+   if SYMBOL_REF_HAS_BLOCK_INFO_P is true.  */\n struct block_symbol GTY(()) {\n   /* The usual SYMBOL_REF fields.  */\n   rtunion GTY ((skip)) fld[3];\n@@ -212,7 +212,7 @@ struct object_block GTY(())\n      order of increasing offset and the following conditions will\n      hold for each element X:\n \n-\t SYMBOL_REF_IN_BLOCK_P (X)\n+\t SYMBOL_REF_HAS_BLOCK_INFO_P (X)\n \t !SYMBOL_REF_ANCHOR_P (X)\n \t SYMBOL_REF_BLOCK (X) == [address of this structure]\n \t SYMBOL_REF_BLOCK_OFFSET (X) >= 0.  */\n@@ -222,7 +222,7 @@ struct object_block GTY(())\n      in order of increasing offset, and then increasing TLS model.\n      The following conditions will hold for each element X in this vector:\n \n-\t SYMBOL_REF_IN_BLOCK_P (X)\n+\t SYMBOL_REF_HAS_BLOCK_INFO_P (X)\n \t SYMBOL_REF_ANCHOR_P (X)\n \t SYMBOL_REF_BLOCK (X) == [address of this structure]\n \t SYMBOL_REF_BLOCK_OFFSET (X) >= 0.  */\n@@ -529,7 +529,7 @@ struct rtvec_def GTY(()) {\n #define BLOCK_SYMBOL_CHECK(RTX) __extension__\t\t\t\t\\\n ({ rtx const _symbol = (RTX);\t\t\t\t\t\t\\\n    unsigned int flags = RTL_CHECKC1 (_symbol, 1, SYMBOL_REF).rt_int;\t\\\n-   if ((flags & SYMBOL_FLAG_IN_BLOCK) == 0)\t\t\t\t\\\n+   if ((flags & SYMBOL_FLAG_HAS_BLOCK_INFO) == 0)\t\t\t\\\n      rtl_check_failed_block_symbol (__FILE__, __LINE__,\t\t\t\\\n \t\t\t\t    __FUNCTION__);\t\t\t\\\n    &_symbol->u.block_sym; })\n@@ -1318,11 +1318,11 @@ do {\t\t\t\t\t\t\\\n #define SYMBOL_REF_EXTERNAL_P(RTX) \\\n   ((SYMBOL_REF_FLAGS (RTX) & SYMBOL_FLAG_EXTERNAL) != 0)\n /* Set if this symbol has a block_symbol structure associated with it.  */\n-#define SYMBOL_FLAG_IN_BLOCK\t(1 << 7)\n-#define SYMBOL_REF_IN_BLOCK_P(RTX) \\\n-  ((SYMBOL_REF_FLAGS (RTX) & SYMBOL_FLAG_IN_BLOCK) != 0)\n+#define SYMBOL_FLAG_HAS_BLOCK_INFO (1 << 7)\n+#define SYMBOL_REF_HAS_BLOCK_INFO_P(RTX) \\\n+  ((SYMBOL_REF_FLAGS (RTX) & SYMBOL_FLAG_HAS_BLOCK_INFO) != 0)\n /* Set if this symbol is a section anchor.  SYMBOL_REF_ANCHOR_P implies\n-   SYMBOL_REF_IN_BLOCK_P.  */\n+   SYMBOL_REF_HAS_BLOCK_INFO_P.  */\n #define SYMBOL_FLAG_ANCHOR\t(1 << 8)\n #define SYMBOL_REF_ANCHOR_P(RTX) \\\n   ((SYMBOL_REF_FLAGS (RTX) & SYMBOL_FLAG_ANCHOR) != 0)\n@@ -1331,13 +1331,15 @@ do {\t\t\t\t\t\t\\\n #define SYMBOL_FLAG_MACH_DEP_SHIFT\t9\n #define SYMBOL_FLAG_MACH_DEP\t\t(1 << SYMBOL_FLAG_MACH_DEP_SHIFT)\n \n-/* The block to which the given SYMBOL_REF belongs, or NULL if none.\n-   Only valid if SYMBOL_REF_IN_BLOCK_P (RTX).  */\n+/* If SYMBOL_REF_HAS_BLOCK_INFO_P (RTX), this is the object_block\n+   structure to which the symbol belongs, or NULL if it has not been\n+   assigned a block.  */\n #define SYMBOL_REF_BLOCK(RTX) (BLOCK_SYMBOL_CHECK (RTX)->block)\n \n-/* The byte offset of the given SYMBOL_REF from the start of its block,\n-   or a negative value if the symbol has not yet been assigned a position.\n-   Only valid if SYMBOL_REF_IN_BLOCK_P (RTX).  */\n+/* If SYMBOL_REF_HAS_BLOCK_INFO_P (RTX), this is the offset of RTX from\n+   the first object in SYMBOL_REF_BLOCK (RTX).  The value is negative if\n+   RTX has not yet been assigned to a block, or it has not been given an\n+   offset within that block.  */\n #define SYMBOL_REF_BLOCK_OFFSET(RTX) (BLOCK_SYMBOL_CHECK (RTX)->offset)\n \n /* Define a macro to look for REG_INC notes,"}, {"sha": "4835c309d5aa92afe0352eb914cb99437a0018ff", "filename": "gcc/varasm.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fa9c136c3bed104251cba446fb9989504528e00/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fa9c136c3bed104251cba446fb9989504528e00/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=3fa9c136c3bed104251cba446fb9989504528e00", "patch": "@@ -365,7 +365,7 @@ create_block_symbol (const char *label, struct object_block *block,\n   PUT_CODE (symbol, SYMBOL_REF);\n   PUT_MODE (symbol, Pmode);\n   XSTR (symbol, 0) = label;\n-  SYMBOL_REF_FLAGS (symbol) = SYMBOL_FLAG_IN_BLOCK;\n+  SYMBOL_REF_FLAGS (symbol) = SYMBOL_FLAG_HAS_BLOCK_INFO;\n \n   /* Initialize the block_symbol stuff.  */\n   SYMBOL_REF_BLOCK (symbol) = block;\n@@ -986,11 +986,11 @@ make_decl_rtl (tree decl)\n \t decl attribute overrides another.  */\n       targetm.encode_section_info (decl, DECL_RTL (decl), false);\n \n-      /* If the old address was assigned to an object block, see whether\n-\t that block is still in the right section.  */\n+      /* If the symbol has a SYMBOL_REF_BLOCK field, update it based\n+\t on the new decl information.  */\n       if (MEM_P (x)\n \t  && GET_CODE (XEXP (x, 0)) == SYMBOL_REF\n-\t  && SYMBOL_REF_IN_BLOCK_P (XEXP (x, 0)))\n+\t  && SYMBOL_REF_HAS_BLOCK_INFO_P (XEXP (x, 0)))\n \tchange_symbol_block (XEXP (x, 0), get_block_for_decl (decl));\n \n       /* Make this function static known to the mudflap runtime.  */\n@@ -1819,7 +1819,7 @@ assemble_variable (tree decl, int top_level ATTRIBUTE_UNUSED,\n   /* If the decl is part of an object_block, make sure that the decl\n      has been positioned within its block, but do not write out its\n      definition yet.  output_object_blocks will do that later.  */\n-  if (SYMBOL_REF_IN_BLOCK_P (symbol) && SYMBOL_REF_BLOCK (symbol))\n+  if (SYMBOL_REF_HAS_BLOCK_INFO_P (symbol) && SYMBOL_REF_BLOCK (symbol))\n     {\n       gcc_assert (!dont_output_data);\n       place_block_symbol (symbol);\n@@ -2947,7 +2947,7 @@ output_constant_def_contents (rtx symbol)\n   /* If the constant is part of an object block, make sure that the\n      decl has been positioned within its block, but do not write out\n      its definition yet.  output_object_blocks will do that later.  */\n-  if (SYMBOL_REF_IN_BLOCK_P (symbol) && SYMBOL_REF_BLOCK (symbol))\n+  if (SYMBOL_REF_HAS_BLOCK_INFO_P (symbol) && SYMBOL_REF_BLOCK (symbol))\n     place_block_symbol (symbol);\n   else\n     {\n@@ -3508,7 +3508,8 @@ output_constant_pool (const char *fnname ATTRIBUTE_UNUSED,\n \t   the constant has been positioned within its block, but do not\n \t   write out its definition yet.  output_object_blocks will do\n \t   that later.  */\n-\tif (SYMBOL_REF_IN_BLOCK_P (desc->sym) && SYMBOL_REF_BLOCK (desc->sym))\n+\tif (SYMBOL_REF_HAS_BLOCK_INFO_P (desc->sym)\n+\t    && SYMBOL_REF_BLOCK (desc->sym))\n \t  place_block_symbol (desc->sym);\n \telse\n \t  {\n@@ -5683,7 +5684,7 @@ default_encode_section_info (tree decl, rtx rtl, int first ATTRIBUTE_UNUSED)\n   if (GET_CODE (symbol) != SYMBOL_REF)\n     return;\n \n-  flags = SYMBOL_REF_FLAGS (symbol) & SYMBOL_FLAG_IN_BLOCK;\n+  flags = SYMBOL_REF_FLAGS (symbol) & SYMBOL_FLAG_HAS_BLOCK_INFO;\n   if (TREE_CODE (decl) == FUNCTION_DECL)\n     flags |= SYMBOL_FLAG_FUNCTION;\n   if (targetm.binds_local_p (decl))"}]}