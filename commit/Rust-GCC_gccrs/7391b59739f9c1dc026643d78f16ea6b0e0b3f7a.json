{"sha": "7391b59739f9c1dc026643d78f16ea6b0e0b3f7a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzM5MWI1OTczOWY5YzFkYzAyNjY0M2Q3OGYxNmVhNmIwZTBiM2Y3YQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2008-11-20T16:00:17Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-11-20T16:00:17Z"}, "message": "re PR libstdc++/38196 (num_put<>::do_put(bool) performs 'internal' padding incorrectly when boolalpha==true)\n\n2008-11-20  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/38196\n\t* include/bits/locale_facets.tcc (num_put<>::do_put(iter_type,\n\tios_base&, char_type, bool)): Fix.\n\t* testsuite/22_locale/num_put/put/char/38196.cc: New.\n\t* testsuite/22_locale/num_put/put/wchar_t/38196.cc: Likewise.\n\nFrom-SVN: r142048", "tree": {"sha": "6ccc1ec3ea1b7df7136e46e6ea4aa1b4db015cfe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ccc1ec3ea1b7df7136e46e6ea4aa1b4db015cfe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7391b59739f9c1dc026643d78f16ea6b0e0b3f7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7391b59739f9c1dc026643d78f16ea6b0e0b3f7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7391b59739f9c1dc026643d78f16ea6b0e0b3f7a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7391b59739f9c1dc026643d78f16ea6b0e0b3f7a/comments", "author": null, "committer": null, "parents": [{"sha": "8c3ed71edb8aaab3973092991c20cedb8560bb50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c3ed71edb8aaab3973092991c20cedb8560bb50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c3ed71edb8aaab3973092991c20cedb8560bb50"}], "stats": {"total": 192, "additions": 188, "deletions": 4}, "files": [{"sha": "99c108d534b6f8902bc80d77f6b037946104260b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7391b59739f9c1dc026643d78f16ea6b0e0b3f7a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7391b59739f9c1dc026643d78f16ea6b0e0b3f7a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7391b59739f9c1dc026643d78f16ea6b0e0b3f7a", "patch": "@@ -1,3 +1,11 @@\n+2008-11-20  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/38196\n+\t* include/bits/locale_facets.tcc (num_put<>::do_put(iter_type,\n+\tios_base&, char_type, bool)): Fix.\n+\t* testsuite/22_locale/num_put/put/char/38196.cc: New.\n+\t* testsuite/22_locale/num_put/put/wchar_t/38196.cc: Likewise.\n+\n 2008-11-18  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/tr1_impl/cinttypes: Remove redundant pragma system_header."}, {"sha": "33e89083b5a4a50c99d03897ae9ff2bc7f603c6a", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7391b59739f9c1dc026643d78f16ea6b0e0b3f7a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7391b59739f9c1dc026643d78f16ea6b0e0b3f7a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=7391b59739f9c1dc026643d78f16ea6b0e0b3f7a", "patch": "@@ -1096,11 +1096,25 @@ _GLIBCXX_BEGIN_LDBL_NAMESPACE\n \t  const streamsize __w = __io.width();\n \t  if (__w > static_cast<streamsize>(__len))\n \t    {\n-\t      _CharT* __cs\n+\t      const streamsize __plen = __w - __len;\n+\t      _CharT* __ps\n \t\t= static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)\n-\t\t\t\t\t\t\t* __w));\n-\t      _M_pad(__fill, __w, __io, __cs, __name, __len);\n-\t      __name = __cs;\n+\t\t\t\t\t\t\t* __plen));\n+\n+\t      char_traits<_CharT>::assign(__ps, __plen, __fill);\n+\t      __io.width(0);\n+\n+\t      if ((__flags & ios_base::adjustfield) == ios_base::left)\n+\t\t{\n+\t\t  __s = std::__write(__s, __name, __len);\n+\t\t  __s = std::__write(__s, __ps, __plen);\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  __s = std::__write(__s, __ps, __plen);\n+\t\t  __s = std::__write(__s, __name, __len);\n+\t\t}\n+\t      return __s;\n \t    }\n \t  __io.width(0);\n \t  __s = std::__write(__s, __name, __len);"}, {"sha": "69c0c998eedad19dfe5fc5eb3da35b20cc073bba", "filename": "libstdc++-v3/testsuite/22_locale/num_put/put/char/38196.cc", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7391b59739f9c1dc026643d78f16ea6b0e0b3f7a/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2F38196.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7391b59739f9c1dc026643d78f16ea6b0e0b3f7a/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2F38196.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2F38196.cc?ref=7391b59739f9c1dc026643d78f16ea6b0e0b3f7a", "patch": "@@ -0,0 +1,81 @@\n+// Copyright (C) 2008 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 22.2.2.2.1  num_put members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+class my_punct : public std::numpunct<char>\n+{\n+protected:\n+  std::string do_falsename() const { return \"-no-\"; }\n+};\n+\n+// libstdc++/38196\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+\n+  ostringstream oss1, oss2, oss3, oss4;\n+  string result1, result2, result3, result4;\n+\n+  oss1.imbue(locale(oss1.getloc(), new my_punct));\n+  oss2.imbue(locale(oss2.getloc(), new my_punct));\n+  oss3.imbue(locale(oss3.getloc(), new my_punct));\n+  oss4.imbue(locale(oss4.getloc(), new my_punct));\n+  const num_put<char>& ng1 = use_facet<num_put<char> >(oss1.getloc());\n+  const num_put<char>& ng2 = use_facet<num_put<char> >(oss2.getloc());\n+  const num_put<char>& ng3 = use_facet<num_put<char> >(oss3.getloc());\n+  const num_put<char>& ng4 = use_facet<num_put<char> >(oss4.getloc());\n+\n+  oss1.width(6);\n+  oss1.setf(ios_base::boolalpha);\n+  ng1.put(oss1.rdbuf(), oss1, '*', false);\n+  result1 = oss1.str();\n+  VERIFY( result1 == \"**-no-\" );\n+\n+  oss2.width(6);\n+  oss2.setf(ios_base::right, ios_base::adjustfield);\n+  oss2.setf(ios_base::boolalpha);\n+  ng2.put(oss2.rdbuf(), oss2, '*', false);\n+  result2 = oss2.str();\n+  VERIFY( result2 == \"**-no-\" );\n+\n+  oss3.width(6);\n+  oss3.setf(ios_base::internal, ios_base::adjustfield);\n+  oss3.setf(ios_base::boolalpha);\n+  ng3.put(oss3.rdbuf(), oss3, '*', false);\n+  result3 = oss3.str();\n+  VERIFY( result3 == \"**-no-\" );\n+\n+  oss4.width(6);\n+  oss4.setf(ios_base::left, ios_base::adjustfield);\n+  oss4.setf(ios_base::boolalpha);\n+  ng4.put(oss4.rdbuf(), oss4, '*', false);\n+  result4 = oss4.str();\n+  VERIFY( result4 == \"-no-**\" );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "ac69b6d400d524d4c34913196f4281efb43ddee3", "filename": "libstdc++-v3/testsuite/22_locale/num_put/put/wchar_t/38196.cc", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7391b59739f9c1dc026643d78f16ea6b0e0b3f7a/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F38196.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7391b59739f9c1dc026643d78f16ea6b0e0b3f7a/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F38196.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F38196.cc?ref=7391b59739f9c1dc026643d78f16ea6b0e0b3f7a", "patch": "@@ -0,0 +1,81 @@\n+// Copyright (C) 2008 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 22.2.2.2.1  num_put members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+class my_punct : public std::numpunct<wchar_t>\n+{\n+protected:\n+  std::wstring do_falsename() const { return L\"-no-\"; }\n+};\n+\n+// libstdc++/38196\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+\n+  wostringstream oss1, oss2, oss3, oss4;\n+  wstring result1, result2, result3, result4;\n+\n+  oss1.imbue(locale(oss1.getloc(), new my_punct));\n+  oss2.imbue(locale(oss2.getloc(), new my_punct));\n+  oss3.imbue(locale(oss3.getloc(), new my_punct));\n+  oss4.imbue(locale(oss4.getloc(), new my_punct));\n+  const num_put<wchar_t>& ng1 = use_facet<num_put<wchar_t> >(oss1.getloc());\n+  const num_put<wchar_t>& ng2 = use_facet<num_put<wchar_t> >(oss2.getloc());\n+  const num_put<wchar_t>& ng3 = use_facet<num_put<wchar_t> >(oss3.getloc());\n+  const num_put<wchar_t>& ng4 = use_facet<num_put<wchar_t> >(oss4.getloc());\n+\n+  oss1.width(6);\n+  oss1.setf(ios_base::boolalpha);\n+  ng1.put(oss1.rdbuf(), oss1, L'*', false);\n+  result1 = oss1.str();\n+  VERIFY( result1 == L\"**-no-\" );\n+\n+  oss2.width(6);\n+  oss2.setf(ios_base::right, ios_base::adjustfield);\n+  oss2.setf(ios_base::boolalpha);\n+  ng2.put(oss2.rdbuf(), oss2, L'*', false);\n+  result2 = oss2.str();\n+  VERIFY( result2 == L\"**-no-\" );\n+\n+  oss3.width(6);\n+  oss3.setf(ios_base::internal, ios_base::adjustfield);\n+  oss3.setf(ios_base::boolalpha);\n+  ng3.put(oss3.rdbuf(), oss3, L'*', false);\n+  result3 = oss3.str();\n+  VERIFY( result3 == L\"**-no-\" );\n+\n+  oss4.width(6);\n+  oss4.setf(ios_base::left, ios_base::adjustfield);\n+  oss4.setf(ios_base::boolalpha);\n+  ng4.put(oss4.rdbuf(), oss4, L'*', false);\n+  result4 = oss4.str();\n+  VERIFY( result4 == L\"-no-**\" );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}