{"sha": "d769c5040874bf9546f2524f3f1d2a894165f92a", "node_id": "C_kwDOANBUbNoAKGQ3NjljNTA0MDg3NGJmOTU0NmYyNTI0ZjNmMWQyYTg5NDE2NWY5MmE", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-11-26T00:17:08Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-11-26T00:17:08Z"}, "message": "Daily bump.", "tree": {"sha": "a11e54418c77b3adf07ed450d232abd31faf10f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a11e54418c77b3adf07ed450d232abd31faf10f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d769c5040874bf9546f2524f3f1d2a894165f92a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d769c5040874bf9546f2524f3f1d2a894165f92a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d769c5040874bf9546f2524f3f1d2a894165f92a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d769c5040874bf9546f2524f3f1d2a894165f92a/comments", "author": null, "committer": null, "parents": [{"sha": "309e2d95e3b930c6f15c8a5346b913158404c76d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/309e2d95e3b930c6f15c8a5346b913158404c76d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/309e2d95e3b930c6f15c8a5346b913158404c76d"}], "stats": {"total": 134, "additions": 133, "deletions": 1}, "files": [{"sha": "506e8b92f88be2fd4fdbf8337667e1d01f6bbcd3", "filename": "ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d769c5040874bf9546f2524f3f1d2a894165f92a/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d769c5040874bf9546f2524f3f1d2a894165f92a/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=d769c5040874bf9546f2524f3f1d2a894165f92a", "patch": "@@ -1,3 +1,10 @@\n+2022-11-25  Weimin Pan  <weimin.pan@oracle.com>\n+\n+\t* Makefile.def: Add libsframe as new module with its dependencies.\n+\t* Makefile.in: Regenerated.\n+\t* configure.ac: Add libsframe to host_libs.\n+\t* configure: Regenerated.\n+\n 2022-11-23  Marek Polacek  <polacek@redhat.com>\n \n \tRevert:"}, {"sha": "944f67ea83de0a773f05770c4dbb35b9bf654ef0", "filename": "contrib/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d769c5040874bf9546f2524f3f1d2a894165f92a/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d769c5040874bf9546f2524f3f1d2a894165f92a/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=d769c5040874bf9546f2524f3f1d2a894165f92a", "patch": "@@ -1,3 +1,11 @@\n+2022-11-25  Martin Liska  <mliska@suse.cz>\n+\n+\tRevert:\n+\t2022-11-25  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc-changelog/git_commit.py: Temporarily disable\n+\tcheck_line.start.\n+\n 2022-11-25  Martin Liska  <mliska@suse.cz>\n \n \t* gcc-changelog/git_commit.py: Temporarily disable"}, {"sha": "f999e2cba43d6b4f15fb48a6a4c9884b30938885", "filename": "gcc/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d769c5040874bf9546f2524f3f1d2a894165f92a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d769c5040874bf9546f2524f3f1d2a894165f92a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d769c5040874bf9546f2524f3f1d2a894165f92a", "patch": "@@ -1,3 +1,36 @@\n+2022-11-25  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* common.opt (fopenmp-target-simd-clone): New option.\n+\t(target_simd_clone_device): New enum to go with it.\n+\t* doc/invoke.texi (-fopenmp-target-simd-clone): Document.\n+\t* flag-types.h (enum omp_target_simd_clone_device_kind): New.\n+\t* omp-simd-clone.cc (auto_simd_fail): New function.\n+\t(auto_simd_check_stmt): New function.\n+\t(plausible_type_for_simd_clone): New function.\n+\t(ok_for_auto_simd_clone): New function.\n+\t(simd_clone_create): Add force_local argument, make the symbol\n+\thave internal linkage if it is true.\n+\t(expand_simd_clones): Also check for cloneable functions with\n+\t\"omp declare target\".  Pass explicit_p argument to\n+\tsimd_clone.compute_vecsize_and_simdlen target hook.\n+\t* opts.cc (default_options_table): Add -fopenmp-target-simd-clone.\n+\t* target.def (TARGET_SIMD_CLONE_COMPUTE_VECSIZE_AND_SIMDLEN):\n+\tAdd bool explicit_p argument.\n+\t* doc/tm.texi: Regenerated.\n+\t* config/aarch64/aarch64.cc\n+\t(aarch64_simd_clone_compute_vecsize_and_simdlen): Update.\n+\t* config/gcn/gcn.cc\n+\t(gcn_simd_clone_compute_vecsize_and_simdlen): Update.\n+\t* config/i386/i386.cc\n+\t(ix86_simd_clone_compute_vecsize_and_simdlen): Update.\n+\n+2022-11-25  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR target/107830\n+\t* config/aarch64/aarch64.cc\n+\t(aarch64_vectorize_can_special_div_by_constant): Check validity during\n+\tcodegen phase as well.\n+\n 2022-11-25  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* range-op.cc (operator_bitwise_xor::op1_range): Fix thinko."}, {"sha": "ba3785810969dd401df760b3952931a78251a834", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d769c5040874bf9546f2524f3f1d2a894165f92a/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d769c5040874bf9546f2524f3f1d2a894165f92a/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=d769c5040874bf9546f2524f3f1d2a894165f92a", "patch": "@@ -1 +1 @@\n-20221125\n+20221126"}, {"sha": "f664bda986136733192bf26fdd9df02f9855c3f9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d769c5040874bf9546f2524f3f1d2a894165f92a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d769c5040874bf9546f2524f3f1d2a894165f92a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d769c5040874bf9546f2524f3f1d2a894165f92a", "patch": "@@ -1,3 +1,23 @@\n+2022-11-25  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* g++.dg/gomp/target-simd-clone-1.C: New.\n+\t* g++.dg/gomp/target-simd-clone-2.C: New.\n+\t* gcc.dg/gomp/target-simd-clone-1.c: New.\n+\t* gcc.dg/gomp/target-simd-clone-2.c: New.\n+\t* gcc.dg/gomp/target-simd-clone-3.c: New.\n+\t* gcc.dg/gomp/target-simd-clone-4.c: New.\n+\t* gcc.dg/gomp/target-simd-clone-5.c: New.\n+\t* gcc.dg/gomp/target-simd-clone-6.c: New.\n+\t* gcc.dg/gomp/target-simd-clone-7.c: New.\n+\t* gcc.dg/gomp/target-simd-clone-8.c: New.\n+\t* lib/scanoffloadipa.exp: New.\n+\n+2022-11-25  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR target/107830\n+\t* gcc.target/aarch64/sve2/pr107830-1.c: New test.\n+\t* gcc.target/aarch64/sve2/pr107830-2.c: New test.\n+\n 2022-11-25  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/opt100.adb: New test."}, {"sha": "afb0fad9b2fe2c15f022b20b7f944c7dd3e4c192", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d769c5040874bf9546f2524f3f1d2a894165f92a/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d769c5040874bf9546f2524f3f1d2a894165f92a/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=d769c5040874bf9546f2524f3f1d2a894165f92a", "patch": "@@ -1,3 +1,22 @@\n+2022-11-25  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* testsuite/lib/libgomp.exp: Load scanoffloadipa.exp library.\n+\t* testsuite/libgomp.c/target-simd-clone-1.c: New.\n+\t* testsuite/libgomp.c/target-simd-clone-2.c: New.\n+\t* testsuite/libgomp.c/target-simd-clone-3.c: New.\n+\n+2022-11-25  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* plugin/plugin-nvptx.c (GOMP_OFFLOAD_load_image): Use unsigned int\n+\tfor 'i' to match 'fn_entries'; regard absent GOMP_REV_OFFLOAD_VAR\n+\tas valid and the code having no reverse-offload code.\n+\t* testsuite/libgomp.c-c++-common/reverse-offload-2.c: New test.\n+\n+2022-11-25  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* libgomp.texi (OpenMP Implementation Status): Add three 5.1 items\n+\tand status for Technical Report (TR) 11.\n+\n 2022-11-21  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* config/gcn/libgomp-gcn.h (struct output):"}, {"sha": "6e776d412c2d5863ac0a1683b43b265eafcc70e8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d769c5040874bf9546f2524f3f1d2a894165f92a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d769c5040874bf9546f2524f3f1d2a894165f92a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d769c5040874bf9546f2524f3f1d2a894165f92a", "patch": "@@ -1,3 +1,48 @@\n+2022-11-25  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* acinclude.m4 (GLIBCXX_CHECK_UCHAR_H): Don't use AC_MSG_RESULT\n+\tunless the AC_MSG_CHECKING happened.\n+\t* configure: Regenerate.\n+\n+2022-11-25  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/107850\n+\t* include/bits/erase_if.h (__erase_nodes_if): Use non-const\n+\treference to the container.\n+\t* include/experimental/map (erase_if): Likewise.\n+\t* include/experimental/set (erase_if): Likewise.\n+\t* include/experimental/unordered_map (erase_if): Likewise.\n+\t* include/experimental/unordered_set (erase_if): Likewise.\n+\t* include/std/map (erase_if): Likewise.\n+\t* include/std/set (erase_if): Likewise.\n+\t* include/std/unordered_map (erase_if): Likewise.\n+\t* include/std/unordered_set (erase_if): Likewise.\n+\t* testsuite/23_containers/map/erasure.cc: Check with\n+\tconst-incorrect predicate.\n+\t* testsuite/23_containers/set/erasure.cc: Likewise.\n+\t* testsuite/23_containers/unordered_map/erasure.cc: Likewise.\n+\t* testsuite/23_containers/unordered_set/erasure.cc: Likewise.\n+\t* testsuite/experimental/map/erasure.cc: Likewise.\n+\t* testsuite/experimental/set/erasure.cc: Likewise.\n+\t* testsuite/experimental/unordered_map/erasure.cc: Likewise.\n+\t* testsuite/experimental/unordered_set/erasure.cc: Likewise.\n+\n+2022-11-25  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/random.h [three_way_comparison] (operator!=):\n+\tDo not define inequality operators when C++20 three way\n+\tcomparisons are supported.\n+\t* include/ext/random [three_way_comparison] (operator!=):\n+\tLikewise.\n+\n+2022-11-25  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/stl_iterator_base_funcs.h (__distance):\n+\tAdd always_inline attribute to overload for random\n+\taccess iterators.\n+\t(advance, distance, next, prev): Add always_inline attribute to\n+\tinline functions that just forward to another function.\n+\n 2022-11-25  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* doc/html/manual/bugs.html: Regenerate."}]}