{"sha": "b322c36a1a12020806047196b94e859c586a14d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjMyMmMzNmExYTEyMDIwODA2MDQ3MTk2Yjk0ZTg1OWM1ODZhMTRkMg==", "commit": {"author": {"name": "Ramana Radhakrishnan", "email": "ramana.radhakrishnan@arm.com", "date": "2014-04-10T08:13:30Z"}, "committer": {"name": "Ramana Radhakrishnan", "email": "ramana@gcc.gnu.org", "date": "2014-04-10T08:13:30Z"}, "message": "Fix PR debug/60655 part 2.\n\n2014-04-10  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n\n        PR debug/60655\n        * config/arm/arm.c (TARGET_CONST_NOT_OK_FOR_DEBUG_P): Define\n        (arm_const_not_ok_for_debug_p): Reject MINUS with SYM_REF's\n        ameliorating the cases where it can be.\n\n2014-04-10  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n\n        PR debug/60655\n        * gcc.c-torture/compile/pr60655-2.c: Copy from pr60655-1.c without\n        -fdata-sections.\n\nFrom-SVN: r209269", "tree": {"sha": "950605bf00f8407c8e379651b34cf95a1cfbcf1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/950605bf00f8407c8e379651b34cf95a1cfbcf1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b322c36a1a12020806047196b94e859c586a14d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b322c36a1a12020806047196b94e859c586a14d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b322c36a1a12020806047196b94e859c586a14d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b322c36a1a12020806047196b94e859c586a14d2/comments", "author": null, "committer": null, "parents": [{"sha": "9e837b7f5d362523bb9afbe4bbbf3b4bd65ac1a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e837b7f5d362523bb9afbe4bbbf3b4bd65ac1a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e837b7f5d362523bb9afbe4bbbf3b4bd65ac1a7"}], "stats": {"total": 89, "additions": 89, "deletions": 0}, "files": [{"sha": "4e1ef1f3e47c7b8786f00ab0e6f7f52002ac90c6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b322c36a1a12020806047196b94e859c586a14d2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b322c36a1a12020806047196b94e859c586a14d2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b322c36a1a12020806047196b94e859c586a14d2", "patch": "@@ -1,3 +1,10 @@\n+2014-04-10  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n+\n+\tPR debug/60655\n+\t* config/arm/arm.c (TARGET_CONST_NOT_OK_FOR_DEBUG_P): Define\n+\t(arm_const_not_ok_for_debug_p): Reject MINUS with SYM_REF's\n+\tameliorating the cases where it can be.\n+\n 2014-04-09  David Edelsohn  <dje.gcc@gmail.com>\n \n \tRevert"}, {"sha": "e5cf5036631dd27cbe8b5641a40c04c496314742", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b322c36a1a12020806047196b94e859c586a14d2/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b322c36a1a12020806047196b94e859c586a14d2/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=b322c36a1a12020806047196b94e859c586a14d2", "patch": "@@ -72,6 +72,7 @@ struct four_ints\n };\n \n /* Forward function declarations.  */\n+static bool arm_const_not_ok_for_debug_p (rtx);\n static bool arm_lra_p (void);\n static bool arm_needs_doubleword_align (enum machine_mode, const_tree);\n static int arm_compute_static_chain_stack_bytes (void);\n@@ -674,6 +675,9 @@ static const struct attribute_spec arm_attribute_table[] =\n #undef TARGET_CAN_USE_DOLOOP_P\n #define TARGET_CAN_USE_DOLOOP_P can_use_doloop_if_innermost\n \n+#undef TARGET_CONST_NOT_OK_FOR_DEBUG_P\n+#define TARGET_CONST_NOT_OK_FOR_DEBUG_P arm_const_not_ok_for_debug_p\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Obstack for minipool constant handling.  */\n@@ -31116,4 +31120,46 @@ arm_asan_shadow_offset (void)\n   return (unsigned HOST_WIDE_INT) 1 << 29;\n }\n \n+\n+/* This is a temporary fix for PR60655.  Ideally we need\n+   to handle most of these cases in the generic part but\n+   currently we reject minus (..) (sym_ref).  We try to \n+   ameliorate the case with minus (sym_ref1) (sym_ref2)\n+   where they are in the same section.  */\n+\n+static bool\n+arm_const_not_ok_for_debug_p (rtx p)\n+{\n+  tree decl_op0 = NULL;\n+  tree decl_op1 = NULL;\n+\n+  if (GET_CODE (p) == MINUS)\n+    {\n+      if (GET_CODE (XEXP (p, 1)) == SYMBOL_REF)\n+\t{\n+\t  decl_op1 = SYMBOL_REF_DECL (XEXP (p, 1));\n+\t  if (decl_op1\n+\t      && GET_CODE (XEXP (p, 0)) == SYMBOL_REF\n+\t      && (decl_op0 = SYMBOL_REF_DECL (XEXP (p, 0))))\n+\t    {\n+\t      if ((TREE_CODE (decl_op1) == VAR_DECL\n+\t\t   || TREE_CODE (decl_op1) == CONST_DECL)\n+\t\t  && (TREE_CODE (decl_op0) == VAR_DECL\n+\t\t      || TREE_CODE (decl_op0) == CONST_DECL))\n+\t\treturn (get_variable_section (decl_op1, false)\n+\t\t\t!= get_variable_section (decl_op0, false));\n+\n+\t      if (TREE_CODE (decl_op1) == LABEL_DECL\n+\t\t  && TREE_CODE (decl_op0) == LABEL_DECL)\n+\t\treturn (DECL_CONTEXT (decl_op1)\n+\t\t\t!= DECL_CONTEXT (decl_op0));\n+\t    }\n+\n+\t  return true;\n+\t}\n+    }\n+\n+  return false;\n+}\n+\n #include \"gt-arm.h\""}, {"sha": "a2008d6dde07e38f9f0961a1be266c4fee582b9c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b322c36a1a12020806047196b94e859c586a14d2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b322c36a1a12020806047196b94e859c586a14d2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b322c36a1a12020806047196b94e859c586a14d2", "patch": "@@ -1,3 +1,9 @@\n+2014-04-10  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n+\n+\tPR debug/60655\n+\t* gcc.c-torture/compile/pr60655-2.c: Copy from pr60655-1.c without\n+\t-fdata-sections.\n+\n 2014-04-09  Steve Ellcey  <sellcey@mips.com>\n \n \t* gcc.dg/tree-ssa/ssa-ifcombine-13.c: Remove mips*-*-* from option"}, {"sha": "f33db643f72f8493d4e0528aff3b1df88fa856e3", "filename": "gcc/testsuite/gcc.c-torture/compile/pr60655-2.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b322c36a1a12020806047196b94e859c586a14d2/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr60655-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b322c36a1a12020806047196b94e859c586a14d2/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr60655-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr60655-2.c?ref=b322c36a1a12020806047196b94e859c586a14d2", "patch": "@@ -0,0 +1,30 @@\n+\n+typedef unsigned char unit;\n+typedef unit *unitptr;\n+extern short global_precision;\n+typedef __SIZE_TYPE__ size_t;\n+extern void *memcpy (void *dest, const void *src, size_t n);\n+\n+short mp_compare(const unit* r1, const unit* r2)\n+{\n+  register short precision;\n+  precision = global_precision;\n+  (r1) = ((r1)+(precision)-1);\n+  (r2) = ((r2)+(precision)-1);\n+  do\n+    { if (*r1 < *r2)\n+\treturn(-1);\n+      if (*((r1)--) > *((r2)--))\n+\treturn(1);\n+    } while (--precision);\n+}\n+\n+static unit modulus[((1280+(2*8))/8)];\n+static unit d_data[((1280+(2*8))/8)*2];\n+\n+int upton_modmult (unitptr prod, unitptr multiplicand, unitptr multiplier)\n+{\n+ unitptr d = d_data;\n+ while (mp_compare(d,modulus) > 0)\n+   memcpy((void*)(prod), (const void*)(d), (global_precision));\n+}"}]}