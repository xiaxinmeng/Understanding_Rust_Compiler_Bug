{"sha": "3c1ecd7e8afd90a487bbbdf720ec4f3d1ed9b6fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2MxZWNkN2U4YWZkOTBhNDg3YmJiZGY3MjBlYzRmM2QxZWQ5YjZmYw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-09-10T10:12:50Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-09-10T10:12:50Z"}, "message": "[multiple changes]\n\n2010-09-10  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* exp_disp.adb: Minor reformatting.\n\n2010-09-10  Arnaud Charlet  <charlet@adacore.com>\n\n\t* sem_prag.adb (Analyze_Pragma): Ignore Inline_Always pragma in\n\tCodePeer mode.\n\n2010-09-10  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_res.adb: Minor reformatting.\n\t* exp_ch9.adb, rtsfind.ads, exp_ch4.adb, exp_ch3.adb: Do not hardcode\n\tmagic constants for task master levels (instead, reference\n\tnamed numbers from System.Tasking).\n\n2010-09-10  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* gnatvsn.ads (Ver_Prefix): New constant string.\n\t* bindgen.adb (Gen_Output_File_Ada): Use it in lieu of hardcoded value.\n\t(Gen_Output_File_C): Likewise.\n\t* g-comver.adb (Ver_Prefix): Add cross-reference to Gnatvsn.Ver_Prefix\n\tin comment.\n\t\n2010-09-10  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem.adb (Walk_Library_Items): Do not traverse children of the main\n\tunit, to prevent spurious circularities in the walk order.\n\t(Depends_On_Main): Use elsewhere to prevent circularities when the body\n\tof an ancestor of the main unit depends on a child of the main unit.\n\nFrom-SVN: r164157", "tree": {"sha": "f25ec741a8f64c496dbd492a7f3098cd16f1053d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f25ec741a8f64c496dbd492a7f3098cd16f1053d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c1ecd7e8afd90a487bbbdf720ec4f3d1ed9b6fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c1ecd7e8afd90a487bbbdf720ec4f3d1ed9b6fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c1ecd7e8afd90a487bbbdf720ec4f3d1ed9b6fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c1ecd7e8afd90a487bbbdf720ec4f3d1ed9b6fc/comments", "author": null, "committer": null, "parents": [{"sha": "4120ada717cd3866e9a5121677e2fe3c99fbb3f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4120ada717cd3866e9a5121677e2fe3c99fbb3f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4120ada717cd3866e9a5121677e2fe3c99fbb3f2"}], "stats": {"total": 214, "additions": 145, "deletions": 69}, "files": [{"sha": "2490a89e22e74725090a4465bbeb4272a9d05250", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c1ecd7e8afd90a487bbbdf720ec4f3d1ed9b6fc/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c1ecd7e8afd90a487bbbdf720ec4f3d1ed9b6fc/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3c1ecd7e8afd90a487bbbdf720ec4f3d1ed9b6fc", "patch": "@@ -1,3 +1,34 @@\n+2010-09-10  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_disp.adb: Minor reformatting.\n+\n+2010-09-10  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Pragma): Ignore Inline_Always pragma in\n+\tCodePeer mode.\n+\n+2010-09-10  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_res.adb: Minor reformatting.\n+\t* exp_ch9.adb, rtsfind.ads, exp_ch4.adb, exp_ch3.adb: Do not hardcode\n+\tmagic constants for task master levels (instead, reference\n+\tnamed numbers from System.Tasking).\n+\n+2010-09-10  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnatvsn.ads (Ver_Prefix): New constant string.\n+\t* bindgen.adb (Gen_Output_File_Ada): Use it in lieu of hardcoded value.\n+\t(Gen_Output_File_C): Likewise.\n+\t* g-comver.adb (Ver_Prefix): Add cross-reference to Gnatvsn.Ver_Prefix\n+\tin comment.\n+\t\n+2010-09-10  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem.adb (Walk_Library_Items): Do not traverse children of the main\n+\tunit, to prevent spurious circularities in the walk order.\n+\t(Depends_On_Main): Use elsewhere to prevent circularities when the body\n+\tof an ancestor of the main unit depends on a child of the main unit.\n+\n 2010-09-10  Robert Dewar  <dewar@adacore.com>\n \n \t* gnatlink.adb, prj-ext.adb, prj-util.adb, s-tporft.adb,"}, {"sha": "e87ff50aa0cc40c225df3120afdbe392ec107375", "filename": "gcc/ada/bindgen.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c1ecd7e8afd90a487bbbdf720ec4f3d1ed9b6fc/gcc%2Fada%2Fbindgen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c1ecd7e8afd90a487bbbdf720ec4f3d1ed9b6fc/gcc%2Fada%2Fbindgen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindgen.adb?ref=3c1ecd7e8afd90a487bbbdf720ec4f3d1ed9b6fc", "patch": "@@ -2341,7 +2341,7 @@ package body Bindgen is\n \n          WBI (\"\");\n          WBI (\"   GNAT_Version : constant String :=\");\n-         WBI (\"                    \"\"GNAT Version: \" &\n+         WBI (\"                    \"\"\" & Ver_Prefix &\n                                    Gnat_Version_String &\n                                    \"\"\" & ASCII.NUL;\");\n          WBI (\"   pragma Export (C, GNAT_Version, \"\"__gnat_version\"\");\");\n@@ -2750,7 +2750,7 @@ package body Bindgen is\n \n       if Bind_Main_Program then\n          WBI (\"\");\n-         WBI (\"char __gnat_version[] = \"\"GNAT Version: \" &\n+         WBI (\"char __gnat_version[] = \"\"\" & Ver_Prefix &\n                                    Gnat_Version_String & \"\"\";\");\n \n          Set_String (\"char __gnat_ada_main_program_name[] = \"\"\");"}, {"sha": "84e01efe23f70a79e3451d06c90f6e7c68f62fca", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c1ecd7e8afd90a487bbbdf720ec4f3d1ed9b6fc/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c1ecd7e8afd90a487bbbdf720ec4f3d1ed9b6fc/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=3c1ecd7e8afd90a487bbbdf720ec4f3d1ed9b6fc", "patch": "@@ -1481,12 +1481,8 @@ package body Exp_Ch3 is\n \n       if Has_Task (Full_Type) then\n          if Restriction_Active (No_Task_Hierarchy) then\n-\n-            --  3 is System.Tasking.Library_Task_Level\n-            --  (should be rtsfindable constant ???)\n-\n-            Append_To (Args, Make_Integer_Literal (Loc, 3));\n-\n+            Append_To (Args,\n+              New_Occurrence_Of (RTE (RE_Library_Task_Level), Loc));\n          else\n             Append_To (Args, Make_Identifier (Loc, Name_uMaster));\n          end if;\n@@ -2042,10 +2038,8 @@ package body Exp_Ch3 is\n \n          if Has_Task (Rec_Type) then\n             if Restriction_Active (No_Task_Hierarchy) then\n-\n-               --  3 is System.Tasking.Library_Task_Level\n-\n-               Append_To (Args, Make_Integer_Literal (Loc, 3));\n+               Append_To (Args,\n+                 New_Occurrence_Of (RTE (RE_Library_Task_Level), Loc));\n             else\n                Append_To (Args, Make_Identifier (Loc, Name_uMaster));\n             end if;"}, {"sha": "dad493cbe066efc6b449b66a51705e1c70bf5485", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c1ecd7e8afd90a487bbbdf720ec4f3d1ed9b6fc/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c1ecd7e8afd90a487bbbdf720ec4f3d1ed9b6fc/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=3c1ecd7e8afd90a487bbbdf720ec4f3d1ed9b6fc", "patch": "@@ -3724,8 +3724,8 @@ package body Exp_Ch4 is\n                   end if;\n \n                   if Restriction_Active (No_Task_Hierarchy) then\n-                     --  3 is System.Tasking.Library_Task_Level\n-                     Append_To (Args, Make_Integer_Literal (Loc, 3));\n+                     Append_To (Args,\n+                       New_Occurrence_Of (RTE (RE_Library_Task_Level), Loc));\n                   else\n                      Append_To (Args,\n                        New_Reference_To"}, {"sha": "f272b951b1c5759f4a17040e196e998718b86212", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c1ecd7e8afd90a487bbbdf720ec4f3d1ed9b6fc/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c1ecd7e8afd90a487bbbdf720ec4f3d1ed9b6fc/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=3c1ecd7e8afd90a487bbbdf720ec4f3d1ed9b6fc", "patch": "@@ -12133,13 +12133,14 @@ package body Exp_Ch9 is\n \n          --  Master parameter. This is a reference to the _Master parameter of\n          --  the initialization procedure, except in the case of the pragma\n-         --  Restrictions (No_Task_Hierarchy) where the value is fixed to 3\n-         --  (3 is System.Tasking.Library_Task_Level).\n+         --  Restrictions (No_Task_Hierarchy) where the value is fixed to\n+         --  System.Tasking.Library_Task_Level.\n \n          if Restriction_Active (No_Task_Hierarchy) = False then\n             Append_To (Args, Make_Identifier (Loc, Name_uMaster));\n          else\n-            Append_To (Args, Make_Integer_Literal (Loc, 3));\n+            Append_To (Args,\n+              New_Occurrence_Of (RTE (RE_Library_Task_Level), Loc));\n          end if;\n       end if;\n "}, {"sha": "2517071ebe2d987a30e5a60141a096cc3c0b5e55", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c1ecd7e8afd90a487bbbdf720ec4f3d1ed9b6fc/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c1ecd7e8afd90a487bbbdf720ec4f3d1ed9b6fc/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=3c1ecd7e8afd90a487bbbdf720ec4f3d1ed9b6fc", "patch": "@@ -6667,8 +6667,8 @@ package body Exp_Disp is\n          end;\n       end if;\n \n-      --  Mark entities of dispatch table. Required by the back end to\n-      --  handle them properly.\n+      --  Mark entities of dispatch table. Required by the back end to handle\n+      --  them properly.\n \n       if Present (DT) then\n          Set_Is_Dispatch_Table_Entity (DT);"}, {"sha": "b71cadcf856d2e70c8a648085d8d1c1a51a3d059", "filename": "gcc/ada/g-comver.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c1ecd7e8afd90a487bbbdf720ec4f3d1ed9b6fc/gcc%2Fada%2Fg-comver.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c1ecd7e8afd90a487bbbdf720ec4f3d1ed9b6fc/gcc%2Fada%2Fg-comver.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-comver.adb?ref=3c1ecd7e8afd90a487bbbdf720ec4f3d1ed9b6fc", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 2002-2008, AdaCore                     --\n+--                     Copyright (C) 2002-2010, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -42,7 +42,8 @@ package body GNAT.Compiler_Version is\n    --  import this directly since run-time units cannot WITH compiler units.\n \n    Ver_Prefix : constant String := \"GNAT Version: \";\n-   --  Prefix generated by binder\n+   --  This is logically a reference to Gnatvsn.Ver_Prefix but we cannot\n+   --  import this directly since run-time units cannot WITH compiler units.\n \n    GNAT_Version : constant String (1 .. Ver_Len_Max + Ver_Prefix'Length);\n    pragma Import (C, GNAT_Version, \"__gnat_version\");"}, {"sha": "f112c96c2594f22dc84fa989e82110244a0a655e", "filename": "gcc/ada/gnatvsn.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c1ecd7e8afd90a487bbbdf720ec4f3d1ed9b6fc/gcc%2Fada%2Fgnatvsn.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c1ecd7e8afd90a487bbbdf720ec4f3d1ed9b6fc/gcc%2Fada%2Fgnatvsn.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatvsn.ads?ref=3c1ecd7e8afd90a487bbbdf720ec4f3d1ed9b6fc", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -77,6 +77,10 @@ package Gnatvsn is\n    --  value should never be decreased in the future, but it would be\n    --  OK to increase it if absolutely necessary.\n \n+   Ver_Prefix : constant String := \"GNAT Version: \";\n+   --  Prefix generated by binder. If it is changed, be sure to change\n+   --  GNAT.Compiler_Version.Ver_Prefix as well.\n+\n    Library_Version : constant String := \"4.6\";\n    --  Library version. This value must be updated whenever any change to the\n    --  compiler affects the library formats in such a way as to obsolete"}, {"sha": "c0744c41cbb601f25a27fcbd8d4396416314ac86", "filename": "gcc/ada/rtsfind.ads", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c1ecd7e8afd90a487bbbdf720ec4f3d1ed9b6fc/gcc%2Fada%2Frtsfind.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c1ecd7e8afd90a487bbbdf720ec4f3d1ed9b6fc/gcc%2Fada%2Frtsfind.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.ads?ref=3c1ecd7e8afd90a487bbbdf720ec4f3d1ed9b6fc", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1396,6 +1396,11 @@ package Rtsfind is\n      RE_Conditional_Call,                -- System.Tasking\n      RE_Asynchronous_Call,               -- System.Tasking\n \n+     RE_Foreign_Task_Level,              -- System.Tasking\n+     RE_Environment_Task_Level,          -- System.Tasking\n+     RE_Independent_Task_Level,          -- System.Tasking\n+     RE_Library_Task_Level,              -- System.Tasking\n+\n      RE_Ada_Task_Control_Block,          -- System.Tasking\n \n      RE_Task_List,                       -- System.Tasking\n@@ -2561,6 +2566,11 @@ package Rtsfind is\n      RE_Conditional_Call                 => System_Tasking,\n      RE_Asynchronous_Call                => System_Tasking,\n \n+     RE_Foreign_Task_Level               => System_Tasking,\n+     RE_Environment_Task_Level           => System_Tasking,\n+     RE_Independent_Task_Level           => System_Tasking,\n+     RE_Library_Task_Level               => System_Tasking,\n+\n      RE_Ada_Task_Control_Block           => System_Tasking,\n \n      RE_Task_List                        => System_Tasking,"}, {"sha": "90304b3c47e3a13f041d5b70a983de6988280dfe", "filename": "gcc/ada/sem.adb", "status": "modified", "additions": 72, "deletions": 43, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c1ecd7e8afd90a487bbbdf720ec4f3d1ed9b6fc/gcc%2Fada%2Fsem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c1ecd7e8afd90a487bbbdf720ec4f3d1ed9b6fc/gcc%2Fada%2Fsem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.adb?ref=3c1ecd7e8afd90a487bbbdf720ec4f3d1ed9b6fc", "patch": "@@ -1539,6 +1539,23 @@ package body Sem is\n       --  context of some other unit. We do not want this to force processing\n       --  of the main body before all other units have been processed.\n \n+      function Depends_On_Main (CU : Node_Id) return Boolean;\n+      --  The body of a unit that is withed by the spec of the main unit\n+      --  may in turn have a with_clause on that spec. In that case do not\n+      --  traverse the body, to prevent loops. It can also happen that the\n+      --  main body has a with_clause on a child, which of course has an\n+      --  implicit with on its parent. It's OK to traverse the child body\n+      --  if the main spec has been processed, otherwise we also have a\n+      --  circularity to avoid.\n+\n+      --  Another circularity pattern occurs when the main unit is a child unit\n+      --  and the body of an ancestor has a with-clause of the main unit or on\n+      --  one of its children. In both cases the body in question has a with-\n+      --  clause on the main unit, and must be excluded from the traversal. In\n+      --  some convoluted cases this may lead to a CodePeer error because the\n+      --  spec of a subprogram declared in an instance within the parent will\n+      --  not be seen in the main unit.\n+\n       procedure Do_Action (CU : Node_Id; Item : Node_Id);\n       --  Calls Action, with some validity checks\n \n@@ -1558,6 +1575,39 @@ package body Sem is\n       --  is processed wherever it appears in the list of units, while the body\n       --  is processed as the last unit in the list.\n \n+      ---------------------\n+      -- Depends_On_Main --\n+      ---------------------\n+\n+      function Depends_On_Main (CU : Node_Id) return Boolean is\n+         CL  : Node_Id;\n+         MCU : constant Node_Id := Unit (Main_CU);\n+\n+      begin\n+         CL := First (Context_Items (CU));\n+\n+         --  Problem does not arise with main subprograms\n+\n+         if\n+           not Nkind_In (MCU, N_Package_Body, N_Package_Declaration)\n+         then\n+            return False;\n+         end if;\n+\n+         while Present (CL) loop\n+            if Nkind (CL) = N_With_Clause\n+              and then Library_Unit (CL) = Main_CU\n+              and then not Done (Get_Cunit_Unit_Number (Library_Unit (CL)))\n+            then\n+               return True;\n+            end if;\n+\n+            Next (CL);\n+         end loop;\n+\n+         return False;\n+      end Depends_On_Main;\n+\n       ---------------\n       -- Do_Action --\n       ---------------\n@@ -1812,45 +1862,6 @@ package body Sem is\n \n          procedure Do_Withed_Units is new Walk_Withs (Do_Withed_Unit);\n \n-         function Depends_On_Main (CU : Node_Id) return Boolean;\n-         --  The body of a unit that is withed by the spec of the main unit\n-         --  may in turn have a with_clause on that spec. In that case do not\n-         --  traverse the body, to prevent loops. It can also happen that the\n-         --  main body has a with_clause on a child, which of course has an\n-         --  implicit with on its parent. It's OK to traverse the child body\n-         --  if the main spec has been processed, otherwise we also have a\n-         --  circularity to avoid.\n-\n-         ---------------------\n-         -- Depends_On_Main --\n-         ---------------------\n-\n-         function Depends_On_Main (CU : Node_Id) return Boolean is\n-            CL : Node_Id;\n-\n-         begin\n-            CL := First (Context_Items (CU));\n-\n-            --  Problem does not arise with main subprograms\n-\n-            if Nkind (Unit (Main_CU)) /= N_Package_Body then\n-               return False;\n-            end if;\n-\n-            while Present (CL) loop\n-               if Nkind (CL) = N_With_Clause\n-                 and then Library_Unit (CL) = Library_Unit (Main_CU)\n-                 and then not Done (Get_Cunit_Unit_Number (Library_Unit (CL)))\n-               then\n-                  return True;\n-               end if;\n-\n-               Next (CL);\n-            end loop;\n-\n-            return False;\n-         end Depends_On_Main;\n-\n       --  Start of processing for Process_Bodies_In_Context\n \n       begin\n@@ -1931,8 +1942,9 @@ package body Sem is\n       Cur := First_Elmt (Comp_Unit_List);\n       while Present (Cur) loop\n          declare\n-            CU : constant Node_Id := Node (Cur);\n-            N  : constant Node_Id := Unit (CU);\n+            CU  : constant Node_Id := Node (Cur);\n+            N   : constant Node_Id := Unit (CU);\n+            Par : Entity_Id;\n \n          begin\n             pragma Assert (Nkind (CU) = N_Compilation_Unit);\n@@ -1969,10 +1981,26 @@ package body Sem is\n                         Unit (Library_Unit (Main_CU)));\n                   end if;\n \n-               --  It's a spec, process it, and the units it depends on\n+                  --  It's a spec, process it, and the units it depends on,\n+                  --  unless it is a descendent of the main unit.  This can\n+                  --  happen when the body of a parent depends on some other\n+                  --  descendent.\n \n                when others =>\n-                  Do_Unit_And_Dependents (CU, N);\n+                  Par := Scope (Defining_Entity (Unit (CU)));\n+\n+                  if Is_Child_Unit (Defining_Entity (Unit (CU))) then\n+                     while Present (Par)\n+                       and then Par /= Standard_Standard\n+                       and then Par /= Cunit_Entity (Main_Unit)\n+                     loop\n+                        Par := Scope (Par);\n+                     end loop;\n+                  end if;\n+\n+                  if Par /= Cunit_Entity (Main_Unit) then\n+                     Do_Unit_And_Dependents (CU, N);\n+                  end if;\n             end case;\n          end;\n \n@@ -2042,6 +2070,7 @@ package body Sem is\n \n                   if Present (Body_CU)\n                     and then not Seen (Get_Cunit_Unit_Number (Body_CU))\n+                    and then not Depends_On_Main (Body_CU)\n                   then\n                      Body_U := Get_Cunit_Unit_Number (Body_CU);\n                      Seen (Body_U) := True;"}, {"sha": "fa8cff8afa8d61cc4a324ec24c962b6db8ab03f5", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c1ecd7e8afd90a487bbbdf720ec4f3d1ed9b6fc/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c1ecd7e8afd90a487bbbdf720ec4f3d1ed9b6fc/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=3c1ecd7e8afd90a487bbbdf720ec4f3d1ed9b6fc", "patch": "@@ -8287,7 +8287,13 @@ package body Sem_Prag is\n \n          when Pragma_Inline_Always =>\n             GNAT_Pragma;\n-            Process_Inline (True);\n+\n+            --  Pragma always active unless in CodePeer mode, since this causes\n+            --  walk order issues.\n+\n+            if not CodePeer_Mode then\n+               Process_Inline (True);\n+            end if;\n \n          --------------------\n          -- Inline_Generic --"}, {"sha": "519292b1827f9b0023620e2bf6908220c3c11220", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c1ecd7e8afd90a487bbbdf720ec4f3d1ed9b6fc/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c1ecd7e8afd90a487bbbdf720ec4f3d1ed9b6fc/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=3c1ecd7e8afd90a487bbbdf720ec4f3d1ed9b6fc", "patch": "@@ -9302,8 +9302,8 @@ package body Sem_Res is\n          Index_Subtype := Create_Itype (Subtype_Kind (Ekind (Index_Type)), N);\n \n          --  Take a new copy of Drange (where bounds have been rewritten to\n-         --  reference side-effect-vree names). Using a separate tree ensures\n-         --  that further expansion (e.g while rewriting a slice assignment\n+         --  reference side-effect-free names). Using a separate tree ensures\n+         --  that further expansion (e.g. while rewriting a slice assignment\n          --  into a FOR loop) does not attempt to remove side effects on the\n          --  bounds again (which would cause the bounds in the index subtype\n          --  definition to refer to temporaries before they are defined) (the"}]}