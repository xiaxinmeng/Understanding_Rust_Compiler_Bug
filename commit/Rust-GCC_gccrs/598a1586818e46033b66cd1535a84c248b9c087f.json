{"sha": "598a1586818e46033b66cd1535a84c248b9c087f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTk4YTE1ODY4MThlNDYwMzNiNjZjZDE1MzVhODRjMjQ4YjljMDg3Zg==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2014-09-22T00:49:01Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2014-09-22T00:49:01Z"}, "message": "crtstuff.c (USE_EH_FRAME_REGISTRY): Let USE_EH_FRAME_REGISTRY_ALWAYS override USE_PT_GNU_EH_FRAME.\n\n\t* crtstuff.c (USE_EH_FRAME_REGISTRY): Let USE_EH_FRAME_REGISTRY_ALWAYS\n\toverride USE_PT_GNU_EH_FRAME.\n\t[__LIBGCC_EH_FRAME_SECTION_NAME__ && !USE_PT_GNU_EH_FRAME]: Sanity-\n\tcheck USE_EH_FRAME_REGISTRY_ALWAYS against\n\t__LIBGCC_EH_FRAME_SECTION_NAME__, emit error if unsane.\n\t* Makefile.in (FORCE_EXPLICIT_EH_REGISTRY): New\n\tvariable for substituted force_explicit_eh_registry.\n\t(CRTSTUFF_CFLAGS): Add FORCE_EXPLICIT_EH_REGISTRY.\n\t* configure.ac (explicit-exception-frame-registration):\n\tNew AC_ARG_ENABLE.\n\t* configure: Regenerate.\n\nFrom-SVN: r215443", "tree": {"sha": "b6f33662c68bf5cebe1c4bee71f55e32a48e2490", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6f33662c68bf5cebe1c4bee71f55e32a48e2490"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/598a1586818e46033b66cd1535a84c248b9c087f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/598a1586818e46033b66cd1535a84c248b9c087f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/598a1586818e46033b66cd1535a84c248b9c087f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/598a1586818e46033b66cd1535a84c248b9c087f/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "794eb939b95bd1753a32116ead05d6f98a05add4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/794eb939b95bd1753a32116ead05d6f98a05add4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/794eb939b95bd1753a32116ead05d6f98a05add4"}], "stats": {"total": 63, "additions": 61, "deletions": 2}, "files": [{"sha": "7c7d96509f0b9eb01b40558479c310fc5222f32e", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/598a1586818e46033b66cd1535a84c248b9c087f/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/598a1586818e46033b66cd1535a84c248b9c087f/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=598a1586818e46033b66cd1535a84c248b9c087f", "patch": "@@ -1,3 +1,17 @@\n+2014-09-22  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* crtstuff.c (USE_EH_FRAME_REGISTRY): Let USE_EH_FRAME_REGISTRY_ALWAYS\n+\toverride USE_PT_GNU_EH_FRAME.\n+\t[__LIBGCC_EH_FRAME_SECTION_NAME__ && !USE_PT_GNU_EH_FRAME]: Sanity-\n+\tcheck USE_EH_FRAME_REGISTRY_ALWAYS against\n+\t__LIBGCC_EH_FRAME_SECTION_NAME__, emit error if unsane.\n+\t* Makefile.in (FORCE_EXPLICIT_EH_REGISTRY): New\n+\tvariable for substituted force_explicit_eh_registry.\n+\t(CRTSTUFF_CFLAGS): Add FORCE_EXPLICIT_EH_REGISTRY.\n+\t* configure.ac (explicit-exception-frame-registration):\n+\tNew AC_ARG_ENABLE.\n+\t* configure: Regenerate.\n+\n 2014-09-19  Olivier Hainque  <hainque@adacore.com>\n \n \t* config.host (powerpc-wrs-vxworksmils): New configuration,"}, {"sha": "0d2c0b4cde2c8e7626485b18f889accad8ea352f", "filename": "libgcc/Makefile.in", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/598a1586818e46033b66cd1535a84c248b9c087f/libgcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/598a1586818e46033b66cd1535a84c248b9c087f/libgcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FMakefile.in?ref=598a1586818e46033b66cd1535a84c248b9c087f", "patch": "@@ -50,6 +50,8 @@ target_noncanonical = @target_noncanonical@\n # The rules for compiling them should be in the t-* file for the machine.\n EXTRA_PARTS = @extra_parts@\n \n+FORCE_EXPLICIT_EH_REGISTRY = @force_explicit_eh_registry@\n+\n extra-parts = libgcc-extra-parts\n \n # Multilib support variables.\n@@ -283,7 +285,7 @@ INTERNAL_CFLAGS = $(CFLAGS) $(LIBGCC2_CFLAGS) $(HOST_LIBGCC2_CFLAGS) \\\n CRTSTUFF_CFLAGS = -O2 $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -g0 \\\n   -finhibit-size-directive -fno-inline -fno-exceptions \\\n   -fno-zero-initialized-in-bss -fno-toplevel-reorder -fno-tree-vectorize \\\n-  -fbuilding-libgcc -fno-stack-protector \\\n+  -fbuilding-libgcc -fno-stack-protector $(FORCE_EXPLICIT_EH_REGISTRY) \\\n   $(INHIBIT_LIBC_CFLAGS)\n \n # Extra flags to use when compiling crt{begin,end}.o."}, {"sha": "19c4ed69b19603bb7c826f65d6c82c28c5ba313d", "filename": "libgcc/configure", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/598a1586818e46033b66cd1535a84c248b9c087f/libgcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/598a1586818e46033b66cd1535a84c248b9c087f/libgcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure?ref=598a1586818e46033b66cd1535a84c248b9c087f", "patch": "@@ -566,6 +566,7 @@ sfp_machine_header\n set_use_emutls\n set_have_cc_tls\n vis_hide\n+force_explicit_eh_registry\n fixed_point\n enable_decimal_float\n decimal_float\n@@ -664,6 +665,7 @@ with_build_libsubdir\n enable_decimal_float\n with_system_libunwind\n enable_sjlj_exceptions\n+enable_explicit_exception_frame_registration\n enable_tls\n '\n       ac_precious_vars='build_alias\n@@ -1301,6 +1303,10 @@ Optional Features:\n \t\t\tto use\n   --enable-sjlj-exceptions\n                           force use of builtin_setjmp for exceptions\n+  --enable-explicit-exception-frame-registration\n+                          register exception tables explicitly at module\n+                          start, for use e.g. for compatibility with\n+                          installations without PT_GNU_EH_FRAME support\n   --enable-tls            Use thread-local storage [default=yes]\n \n Optional Packages:\n@@ -4270,6 +4276,22 @@ no)\n   ;;\n esac\n \n+# Check whether --enable-explicit-exception-frame-registration was given.\n+if test \"${enable_explicit_exception_frame_registration+set}\" = set; then :\n+  enableval=$enable_explicit_exception_frame_registration;\n+force_explicit_eh_registry=\n+if test \"$enable_explicit_exception_frame_registration\" = yes; then\n+  if test \"$enable_sjlj_exceptions\" = yes; then\n+    as_fn_error \"Can't enable both of --enable-sjlj-exceptions\n+                  and --enable-explicit-exception-frame-registration\" \"$LINENO\" 5\n+  fi\n+  force_explicit_eh_registry=-DUSE_EH_FRAME_REGISTRY_ALWAYS\n+fi\n+\n+fi\n+\n+\n+\n { $as_echo \"$as_me:${as_lineno-$LINENO}: checking if the linker ($LD) is GNU ld\" >&5\n $as_echo_n \"checking if the linker ($LD) is GNU ld... \" >&6; }\n if test \"${acl_cv_prog_gnu_ld+set}\" = set; then :"}, {"sha": "72a21a97e797f88503c4f4bb1d6d5655764c5021", "filename": "libgcc/configure.ac", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/598a1586818e46033b66cd1535a84c248b9c087f/libgcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/598a1586818e46033b66cd1535a84c248b9c087f/libgcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure.ac?ref=598a1586818e46033b66cd1535a84c248b9c087f", "patch": "@@ -262,6 +262,22 @@ no)\n   ;;\n esac\n \n+AC_ARG_ENABLE([explicit-exception-frame-registration],\n+  [AC_HELP_STRING([--enable-explicit-exception-frame-registration],\n+     [register exception tables explicitly at module start, for use\n+      e.g. for compatibility with installations without PT_GNU_EH_FRAME support])],\n+[\n+force_explicit_eh_registry=\n+if test \"$enable_explicit_exception_frame_registration\" = yes; then\n+  if test \"$enable_sjlj_exceptions\" = yes; then\n+    AC_MSG_ERROR([Can't enable both of --enable-sjlj-exceptions\n+                  and --enable-explicit-exception-frame-registration])\n+  fi\n+  force_explicit_eh_registry=-DUSE_EH_FRAME_REGISTRY_ALWAYS\n+fi\n+])\n+AC_SUBST([force_explicit_eh_registry])\n+\n AC_LIB_PROG_LD_GNU\n \n AC_MSG_CHECKING([for thread model used by GCC])"}, {"sha": "03a30fe176e0ab9c1bad86187d7efe216e497599", "filename": "libgcc/crtstuff.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/598a1586818e46033b66cd1535a84c248b9c087f/libgcc%2Fcrtstuff.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/598a1586818e46033b66cd1535a84c248b9c087f/libgcc%2Fcrtstuff.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fcrtstuff.c?ref=598a1586818e46033b66cd1535a84c248b9c087f", "patch": "@@ -131,7 +131,12 @@ call_ ## FUNC (void)\t\t\t\t\t\\\n # define USE_PT_GNU_EH_FRAME\n #endif\n \n-#if defined(__LIBGCC_EH_FRAME_SECTION_NAME__) && !defined(USE_PT_GNU_EH_FRAME)\n+#ifdef USE_EH_FRAME_REGISTRY_ALWAYS\n+# ifndef __LIBGCC_EH_FRAME_SECTION_NAME__\n+#  error \"Can't use explicit exception-frame-registration without __LIBGCC_EH_FRAME_SECTION_NAME__\"\n+# endif\n+#endif\n+#if defined(__LIBGCC_EH_FRAME_SECTION_NAME__) && (!defined(USE_PT_GNU_EH_FRAME) || defined(USE_EH_FRAME_REGISTRY_ALWAYS))\n # define USE_EH_FRAME_REGISTRY\n #endif\n #if defined(__LIBGCC_EH_FRAME_SECTION_NAME__) \\"}]}