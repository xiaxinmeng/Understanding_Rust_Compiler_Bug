{"sha": "a3fbeceef46546fd47ed370474feed347c86713f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTNmYmVjZWVmNDY1NDZmZDQ3ZWQzNzA0NzRmZWVkMzQ3Yzg2NzEzZg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-01-27T11:50:23Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-04T09:11:14Z"}, "message": "[Ada] Alignment clause ignored on completion derived from private type\n\n2020-06-04  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* exp_attr.adb (xpand_N_Attribute_Reference) <Input>: Call\n\tFind_Inherited_TSS to look up the Stream_Read TSS.\n\t<Output>: Likewise for the Stream_Write TSS.\n\t* exp_ch7.adb (Make_Final_Call): Call Underlying_Type on\n\tprivate types to account for underlying full views.\n\t* exp_strm.ads  (Build_Record_Or_Elementary_Input_Function):\n\tRemove Use_Underlying parameter.\n\t* exp_strm.adb (Build_Record_Or_Elementary_Input_Function):\n\tLikewise and adjust accordingly.\n\t* exp_tss.adb (Find_Inherited_TSS): Deal with full views.\n\tCall Find_Inherited_TSS recursively on the parent type if\n\tthe base type is a derived type.\n\t* sem_ch13.adb (Analyze_Attribute_Definition_Clause): Take\n\tinto account underlying full views for derived types.\n\t* sem_ch3.adb (Copy_And_Build): Look up the underlying full\n\tview only for a completion.  Be prepared for private types.\n\t(Build_Derived_Private_Type): Build an underlying full view\n\tfor a completion in the general case too.", "tree": {"sha": "3015c5813fab3c0ec7c43afc94c210421a8aa4c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3015c5813fab3c0ec7c43afc94c210421a8aa4c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3fbeceef46546fd47ed370474feed347c86713f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3fbeceef46546fd47ed370474feed347c86713f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3fbeceef46546fd47ed370474feed347c86713f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3fbeceef46546fd47ed370474feed347c86713f/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5e53c73a0cf2e326bbfdacbe94e4a3bb79cd219", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5e53c73a0cf2e326bbfdacbe94e4a3bb79cd219", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5e53c73a0cf2e326bbfdacbe94e4a3bb79cd219"}], "stats": {"total": 151, "additions": 70, "deletions": 81}, "files": [{"sha": "d8831beeb7c62391e8aba24c7de7ecddf125ece7", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 20, "deletions": 36, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3fbeceef46546fd47ed370474feed347c86713f/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3fbeceef46546fd47ed370474feed347c86713f/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=a3fbeceef46546fd47ed370474feed347c86713f", "patch": "@@ -3879,26 +3879,18 @@ package body Exp_Attr is\n                --  A special case arises if we have a defined _Read routine,\n                --  since in this case we are required to call this routine.\n \n-               declare\n-                  Typ : Entity_Id := P_Type;\n-               begin\n-                  if Present (Full_View (Typ)) then\n-                     Typ := Full_View (Typ);\n-                  end if;\n+               if Present (Find_Inherited_TSS (P_Type, TSS_Stream_Read)) then\n+                  Build_Record_Or_Elementary_Input_Function\n+                    (Loc, P_Type, Decl, Fname);\n+                  Insert_Action (N, Decl);\n \n-                  if Present (TSS (Base_Type (Typ), TSS_Stream_Read)) then\n-                     Build_Record_Or_Elementary_Input_Function\n-                       (Loc, Typ, Decl, Fname, Use_Underlying => False);\n-                     Insert_Action (N, Decl);\n+               --  For normal cases, we call the I_xxx routine directly\n \n-                  --  For normal cases, we call the I_xxx routine directly\n-\n-                  else\n-                     Rewrite (N, Build_Elementary_Input_Call (N));\n-                     Analyze_And_Resolve (N, P_Type);\n-                     return;\n-                  end if;\n-               end;\n+               else\n+                  Rewrite (N, Build_Elementary_Input_Call (N));\n+                  Analyze_And_Resolve (N, P_Type);\n+                  return;\n+               end if;\n \n             --  Array type case\n \n@@ -4985,26 +4977,18 @@ package body Exp_Attr is\n                --  A special case arises if we have a defined _Write routine,\n                --  since in this case we are required to call this routine.\n \n-               declare\n-                  Typ : Entity_Id := P_Type;\n-               begin\n-                  if Present (Full_View (Typ)) then\n-                     Typ := Full_View (Typ);\n-                  end if;\n-\n-                  if Present (TSS (Base_Type (Typ), TSS_Stream_Write)) then\n-                     Build_Record_Or_Elementary_Output_Procedure\n-                       (Loc, Typ, Decl, Pname);\n-                     Insert_Action (N, Decl);\n+               if Present (Find_Inherited_TSS (P_Type, TSS_Stream_Write)) then\n+                  Build_Record_Or_Elementary_Output_Procedure\n+                    (Loc, P_Type, Decl, Pname);\n+                  Insert_Action (N, Decl);\n \n-                  --  For normal cases, we call the W_xxx routine directly\n+               --  For normal cases, we call the W_xxx routine directly\n \n-                  else\n-                     Rewrite (N, Build_Elementary_Write_Call (N));\n-                     Analyze (N);\n-                     return;\n-                  end if;\n-               end;\n+               else\n+                  Rewrite (N, Build_Elementary_Write_Call (N));\n+                  Analyze (N);\n+                  return;\n+               end if;\n \n             --  Array type case\n "}, {"sha": "9d7ed1229b04207b9f8fc6d74aad401a44264218", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3fbeceef46546fd47ed370474feed347c86713f/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3fbeceef46546fd47ed370474feed347c86713f/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=a3fbeceef46546fd47ed370474feed347c86713f", "patch": "@@ -8290,12 +8290,11 @@ package body Exp_Ch7 is\n          Ref  := Convert_Concurrent (Ref, Typ);\n \n       elsif Is_Private_Type (Typ)\n-        and then Present (Full_View (Typ))\n-        and then Is_Concurrent_Type (Full_View (Typ))\n+        and then Is_Concurrent_Type (Underlying_Type (Typ))\n       then\n-         Utyp := Corresponding_Record_Type (Full_View (Typ));\n+         Utyp := Corresponding_Record_Type (Underlying_Type (Typ));\n          Atyp := Typ;\n-         Ref  := Convert_Concurrent (Ref, Full_View (Typ));\n+         Ref  := Convert_Concurrent (Ref, Underlying_Type (Typ));\n \n       else\n          Utyp := Typ;"}, {"sha": "045305b5d6908960f868a81d248c42fac1cc5d59", "filename": "gcc/ada/exp_strm.adb", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3fbeceef46546fd47ed370474feed347c86713f/gcc%2Fada%2Fexp_strm.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3fbeceef46546fd47ed370474feed347c86713f/gcc%2Fada%2Fexp_strm.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_strm.adb?ref=a3fbeceef46546fd47ed370474feed347c86713f", "patch": "@@ -1119,25 +1119,20 @@ package body Exp_Strm is\n      (Loc            : Source_Ptr;\n       Typ            : Entity_Id;\n       Decl           : out Node_Id;\n-      Fnam           : out Entity_Id;\n-      Use_Underlying : Boolean := True)\n+      Fnam           : out Entity_Id)\n    is\n-      B_Typ      : Entity_Id := Base_Type (Typ);\n+      B_Typ      : constant Entity_Id := Underlying_Type (Base_Type (Typ));\n       Cn         : Name_Id;\n       Constr     : List_Id;\n       Decls      : List_Id;\n       Discr      : Entity_Id;\n-      Discr_Elmt : Elmt_Id   := No_Elmt;\n+      Discr_Elmt : Elmt_Id            := No_Elmt;\n       J          : Pos;\n       Obj_Decl   : Node_Id;\n       Odef       : Node_Id;\n       Stms       : List_Id;\n \n    begin\n-      if Use_Underlying then\n-         B_Typ := Underlying_Type (B_Typ);\n-      end if;\n-\n       Decls  := New_List;\n       Constr := New_List;\n "}, {"sha": "d77d756463993b6ad9d1ae53c5f93e0f467650d4", "filename": "gcc/ada/exp_strm.ads", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3fbeceef46546fd47ed370474feed347c86713f/gcc%2Fada%2Fexp_strm.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3fbeceef46546fd47ed370474feed347c86713f/gcc%2Fada%2Fexp_strm.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_strm.ads?ref=a3fbeceef46546fd47ed370474feed347c86713f", "patch": "@@ -108,14 +108,11 @@ package Exp_Strm is\n      (Loc            : Source_Ptr;\n       Typ            : Entity_Id;\n       Decl           : out Node_Id;\n-      Fnam           : out Entity_Id;\n-      Use_Underlying : Boolean := True);\n+      Fnam           : out Entity_Id);\n    --  Build function for Input attribute for record type or for an elementary\n    --  type (the latter is used only in the case where a user-defined Read\n    --  routine is defined, since, in other cases, Input calls the appropriate\n-   --  runtime library routine directly). The flag Use_Underlying controls\n-   --  whether the base type or the underlying type of the base type of Typ is\n-   --  used during construction.\n+   --  runtime library routine directly).\n \n    procedure Build_Record_Or_Elementary_Output_Procedure\n      (Loc  : Source_Ptr;"}, {"sha": "fc2338f8b0274f540e735998f26780bc7705fd04", "filename": "gcc/ada/exp_tss.adb", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3fbeceef46546fd47ed370474feed347c86713f/gcc%2Fada%2Fexp_tss.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3fbeceef46546fd47ed370474feed347c86713f/gcc%2Fada%2Fexp_tss.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_tss.adb?ref=a3fbeceef46546fd47ed370474feed347c86713f", "patch": "@@ -147,27 +147,29 @@ package body Exp_Tss is\n      (Typ : Entity_Id;\n       Nam : TSS_Name_Type) return Entity_Id\n    is\n-      Btyp : Entity_Id := Typ;\n+      Btyp : Entity_Id;\n       Proc : Entity_Id;\n \n    begin\n-      loop\n-         Btyp := Base_Type (Btyp);\n-         Proc := TSS (Btyp, Nam);\n+      --  If Typ is a private type, look at the full view\n \n-         exit when Present (Proc)\n-           or else not Is_Derived_Type (Btyp);\n+      if Is_Private_Type (Typ) and then Present (Full_View (Typ)) then\n+         Btyp := Base_Type (Full_View (Typ));\n+      else\n+         Btyp := Base_Type (Typ);\n+      end if;\n \n-         --  If Typ is a derived type, it may inherit attributes from some\n-         --  ancestor.\n+      Proc := TSS (Btyp, Nam);\n \n-         Btyp := Etype (Btyp);\n-      end loop;\n+      --  If Typ is a derived type, it may inherit attributes from an ancestor\n \n-      if No (Proc) then\n+      if No (Proc) and then Is_Derived_Type (Btyp) then\n+         Proc := Find_Inherited_TSS (Etype (Btyp), Nam);\n+      end if;\n \n-         --  If nothing else, use the TSS of the root type\n+      --  If nothing else, use the TSS of the root type\n \n+      if No (Proc) then\n          Proc := TSS (Base_Type (Underlying_Type (Typ)), Nam);\n       end if;\n "}, {"sha": "bdb2b6a514495177b8642762531dff5100aac83a", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3fbeceef46546fd47ed370474feed347c86713f/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3fbeceef46546fd47ed370474feed347c86713f/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=a3fbeceef46546fd47ed370474feed347c86713f", "patch": "@@ -4921,20 +4921,17 @@ package body Sem_Ch13 is\n          return;\n       end if;\n \n-      --  Rep clause applies to full view of incomplete type or private type if\n-      --  we have one (if not, this is a premature use of the type). However,\n-      --  certain semantic checks need to be done on the specified entity (i.e.\n-      --  the private view), so we save it in Ent.\n+      --  Rep clause applies to (underlying) full view of private or incomplete\n+      --  type if we have one (if not, this is a premature use of the type).\n+      --  However, some semantic checks need to be done on the specified entity\n+      --  i.e. the private view, so we save it in Ent.\n \n       if Is_Private_Type (Ent)\n         and then Is_Derived_Type (Ent)\n         and then not Is_Tagged_Type (Ent)\n         and then No (Full_View (Ent))\n+        and then No (Underlying_Full_View (Ent))\n       then\n-         --  If this is a private type whose completion is a derivation from\n-         --  another private type, there is no full view, and the attribute\n-         --  belongs to the type itself, not its underlying parent.\n-\n          U_Ent := Ent;\n \n       elsif Ekind (Ent) = E_Incomplete_Type then"}, {"sha": "8d86bc7d4cbd677b1d670fe2753489cf03e39690", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3fbeceef46546fd47ed370474feed347c86713f/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3fbeceef46546fd47ed370474feed347c86713f/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=a3fbeceef46546fd47ed370474feed347c86713f", "patch": "@@ -7669,19 +7669,26 @@ package body Sem_Ch3 is\n             Full_Parent := Full_View (Full_Parent);\n          end if;\n \n-         --  And its underlying full view if necessary\n+         --  If the full view is itself derived from another private type\n+         --  and has got an underlying full view, and this is done for a\n+         --  completion, i.e. to build the underlying full view of the type,\n+         --  then use this underlying full view. We cannot do that if this\n+         --  is not a completion, i.e. to build the full view of the type,\n+         --  because this would break the privacy status of the parent.\n \n          if Is_Private_Type (Full_Parent)\n            and then Present (Underlying_Full_View (Full_Parent))\n+           and then Is_Completion\n          then\n             Full_Parent := Underlying_Full_View (Full_Parent);\n          end if;\n \n-         --  For record, concurrent, access and most enumeration types, the\n-         --  derivation from full view requires a fully-fledged declaration.\n-         --  In the other cases, just use an itype.\n+         --  For private, record, concurrent, access and almost all enumeration\n+         --  types, the derivation from the full view requires a fully-fledged\n+         --  declaration. In the other cases, just use an itype.\n \n-         if Is_Record_Type (Full_Parent)\n+         if Is_Private_Type (Full_Parent)\n+           or else Is_Record_Type (Full_Parent)\n            or else Is_Concurrent_Type (Full_Parent)\n            or else Is_Access_Type (Full_Parent)\n            or else\n@@ -8047,18 +8054,26 @@ package body Sem_Ch3 is\n          end if;\n \n          --  If this is not a completion, construct the implicit full view by\n-         --  deriving from the full view of the parent type.\n+         --  deriving from the full view of the parent type. But if this is a\n+         --  completion, the derived private type being built is a full view\n+         --  and the full derivation can only be its underlying full view.\n \n          --  ??? If the parent is untagged private and its completion is\n          --  tagged, this mechanism will not work because we cannot derive from\n          --  the tagged full view unless we have an extension.\n \n          if Present (Full_View (Parent_Type))\n            and then not Is_Tagged_Type (Full_View (Parent_Type))\n-           and then not Is_Completion\n+           and then not Error_Posted (N)\n          then\n             Build_Full_Derivation;\n-            Set_Full_View (Derived_Type, Full_Der);\n+\n+            if not Is_Completion then\n+               Set_Full_View (Derived_Type, Full_Der);\n+            else\n+               Set_Underlying_Full_View (Derived_Type, Full_Der);\n+               Set_Is_Underlying_Full_View (Full_Der);\n+            end if;\n          end if;\n       end if;\n "}]}