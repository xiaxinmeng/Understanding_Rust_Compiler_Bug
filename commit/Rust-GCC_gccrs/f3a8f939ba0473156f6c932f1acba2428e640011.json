{"sha": "f3a8f939ba0473156f6c932f1acba2428e640011", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjNhOGY5MzliYTA0NzMxNTZmNmM5MzJmMWFjYmEyNDI4ZTY0MDAxMQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-01-26T11:10:45Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-05-07T09:28:57Z"}, "message": "[Ada] Fix signature mismatch for Defining_Entity\n\ngcc/ada/\n\n\t* sem_util.ads (Defining_Entity): Remove Empty_On_Errors parameter.\n\t(Defining_Entity_Or_Empty): New function.\n\t* sem_util.adb (Defining_Entity): Move bulk of implementation to...\n\t(Defining_Entity_Or_Empty): ...here.  Do not raise Program_Error.\n\t(Innermost_Master_Scope_Depth): Call Defining_Entity_Or_Empty.", "tree": {"sha": "30592d81f8330fe38780e7505ebcec9ee5f5fc77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30592d81f8330fe38780e7505ebcec9ee5f5fc77"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3a8f939ba0473156f6c932f1acba2428e640011", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3a8f939ba0473156f6c932f1acba2428e640011", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3a8f939ba0473156f6c932f1acba2428e640011", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3a8f939ba0473156f6c932f1acba2428e640011/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a6303e53b4d2328eb43c933f2cbd7f53526962c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a6303e53b4d2328eb43c933f2cbd7f53526962c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a6303e53b4d2328eb43c933f2cbd7f53526962c"}], "stats": {"total": 66, "additions": 31, "deletions": 35}, "files": [{"sha": "7d919a0723537c8d77b3e581b69a39ef6f000c1f", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 26, "deletions": 22, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3a8f939ba0473156f6c932f1acba2428e640011/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3a8f939ba0473156f6c932f1acba2428e640011/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=f3a8f939ba0473156f6c932f1acba2428e640011", "patch": "@@ -269,25 +269,22 @@ package body Sem_Util is\n       --  Construct an integer literal representing an accessibility level\n       --  with its type set to Natural.\n \n-      function Innermost_Master_Scope_Depth\n-        (N : Node_Id) return Uint;\n+      function Innermost_Master_Scope_Depth (N : Node_Id) return Uint;\n       --  Returns the scope depth of the given node's innermost\n       --  enclosing dynamic scope (effectively the accessibility\n       --  level of the innermost enclosing master).\n \n-      function Function_Call_Or_Allocator_Level\n-        (N : Node_Id) return Node_Id;\n+      function Function_Call_Or_Allocator_Level (N : Node_Id) return Node_Id;\n       --  Centralized processing of subprogram calls which may appear in\n       --  prefix notation.\n \n       ----------------------------------\n       -- Innermost_Master_Scope_Depth --\n       ----------------------------------\n \n-      function Innermost_Master_Scope_Depth\n-        (N : Node_Id) return Uint\n-      is\n+      function Innermost_Master_Scope_Depth (N : Node_Id) return Uint is\n          Encl_Scop           : Entity_Id;\n+         Ent                 : Entity_Id;\n          Node_Par            : Node_Id := Parent (N);\n          Master_Lvl_Modifier : Int     := 0;\n \n@@ -301,12 +298,10 @@ package body Sem_Util is\n          --  among other things. These cases are detected properly ???\n \n          while Present (Node_Par) loop\n+            Ent := Defining_Entity_Or_Empty (Node_Par);\n \n-            if Present (Defining_Entity\n-                         (Node_Par, Empty_On_Errors => True))\n-            then\n-               Encl_Scop := Nearest_Dynamic_Scope\n-                              (Defining_Entity (Node_Par));\n+            if Present (Ent) then\n+               Encl_Scop := Nearest_Dynamic_Scope (Ent);\n \n                --  Ignore transient scopes made during expansion\n \n@@ -7076,10 +7071,23 @@ package body Sem_Util is\n    -- Defining_Entity --\n    ---------------------\n \n-   function Defining_Entity\n-     (N               : Node_Id;\n-      Empty_On_Errors : Boolean := False) return Entity_Id\n-   is\n+   function Defining_Entity (N : Node_Id) return Entity_Id is\n+      Ent : constant Entity_Id := Defining_Entity_Or_Empty (N);\n+\n+   begin\n+      if Present (Ent) then\n+         return Ent;\n+\n+      else\n+         raise Program_Error;\n+      end if;\n+   end Defining_Entity;\n+\n+   ------------------------------\n+   -- Defining_Entity_Or_Empty --\n+   ------------------------------\n+\n+   function Defining_Entity_Or_Empty (N : Node_Id) return Entity_Id is\n    begin\n       case Nkind (N) is\n          when N_Abstract_Subprogram_Declaration\n@@ -7178,13 +7186,9 @@ package body Sem_Util is\n             return Entity (Identifier (N));\n \n          when others =>\n-            if Empty_On_Errors then\n-               return Empty;\n-            end if;\n-\n-            raise Program_Error;\n+            return Empty;\n       end case;\n-   end Defining_Entity;\n+   end Defining_Entity_Or_Empty;\n \n    --------------------------\n    -- Denotes_Discriminant --"}, {"sha": "b3a53a23e8e13339ee0896da97c96b6af677014a", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3a8f939ba0473156f6c932f1acba2428e640011/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3a8f939ba0473156f6c932f1acba2428e640011/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=f3a8f939ba0473156f6c932f1acba2428e640011", "patch": "@@ -662,9 +662,7 @@ package Sem_Util is\n    --  in the case of a descendant of a generic formal type (returns Int'Last\n    --  instead of 0).\n \n-   function Defining_Entity\n-     (N               : Node_Id;\n-      Empty_On_Errors : Boolean := False) return Entity_Id;\n+   function Defining_Entity (N : Node_Id) return Entity_Id;\n    --  Given a declaration N, returns the associated defining entity. If the\n    --  declaration has a specification, the entity is obtained from the\n    --  specification. If the declaration has a defining unit name, then the\n@@ -675,19 +673,13 @@ package Sem_Util is\n    --  local entities declared during loop expansion. These entities need\n    --  debugging information, generated through Qualify_Entity_Names, and\n    --  the loop declaration must be placed in the table Name_Qualify_Units.\n-   --\n-   --  Set flag Empty_On_Errors to change the behavior of this routine as\n-   --  follows:\n-   --\n-   --    * True  - A declaration that lacks a defining entity returns Empty.\n-   --      A node that does not allow for a defining entity returns Empty.\n-   --\n-   --    * False - A declaration that lacks a defining entity is given a new\n-   --      internally generated entity which is subsequently returned. A node\n-   --      that does not allow for a defining entity raises Program_Error\n \n    --  WARNING: There is a matching C declaration of this subprogram in fe.h\n \n+   function Defining_Entity_Or_Empty (N : Node_Id) return Entity_Id;\n+   --  This is equivalent to Defining_Entity but it returns Empty for nodes\n+   --  without an entity instead of raising Program_Error.\n+\n    function Denotes_Discriminant\n      (N                : Node_Id;\n       Check_Concurrent : Boolean := False) return Boolean;"}]}