{"sha": "e88396c0721010f49c8f2013c91916a8f30c1162", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTg4Mzk2YzA3MjEwMTBmNDljOGYyMDEzYzkxOTE2YThmMzBjMTE2Mg==", "commit": {"author": {"name": "Janis Johnson", "email": "janis187@us.ibm.com", "date": "2009-02-17T18:35:24Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2009-02-17T18:35:24Z"}, "message": "bin: New directory.\n\n\t* bin: New directory.\n\t* bin/reg-hunt: New.\n\t* bin/reg_periodic: New.\n\t* bin/gcc-svn-update: New.\n\t* bin/gcc-svn-update-fix: New.\n\t* bin/gcc-build-simple: New.\n\t* bin/gcc-build-full: New.\n\t* bin/gcc-cleanup: New.\n\t* bin/reg-test: New.\n\t* bin/reg-newmid: New.\n\t* bin/gcc-test-ice-on-valid-code: New.\n\t* bin/gcc-test-ice-on-invalid-code: New.\n\t* bin/gcc-test-compiler-hangs: New.\n\t* bin/gcc-test-missing-warning: New.\n\t* bin/gcc-test-bogus-warning: New.\n\t* bin/gcc-test-segfault-on-valid-code: New.\n\t* bin/gcc-test-rejects-valid: New.\n\t* bin/gcc-test-accepts-invalid: New.\n\t* bin/gcc-test-wrong-code: New.\n\t* bin/gcc-svn-patchlist: New.\n\t* bin/gcc-svn-checkfail: New.\n\t* bin/gcc-svn-recordfail: New.\n\t* bin/gcc-svn-report: New.\n\t* bin/gcc-svn-ids: New.\n\nFrom-SVN: r144240", "tree": {"sha": "abbdf3e73b00c128324024b4ff8cc14c3916d638", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/abbdf3e73b00c128324024b4ff8cc14c3916d638"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e88396c0721010f49c8f2013c91916a8f30c1162", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e88396c0721010f49c8f2013c91916a8f30c1162", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e88396c0721010f49c8f2013c91916a8f30c1162", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e88396c0721010f49c8f2013c91916a8f30c1162/comments", "author": null, "committer": null, "parents": [{"sha": "1ce205fe0b19e5f2547ceb216787ce2dc8bf542c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ce205fe0b19e5f2547ceb216787ce2dc8bf542c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ce205fe0b19e5f2547ceb216787ce2dc8bf542c"}], "stats": {"total": 1659, "additions": 1659, "deletions": 0}, "files": [{"sha": "24625a26bd678f25ec26d2e66f37dd0e002c6095", "filename": "contrib/reghunt/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88396c0721010f49c8f2013c91916a8f30c1162/contrib%2Freghunt%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88396c0721010f49c8f2013c91916a8f30c1162/contrib%2Freghunt%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Freghunt%2FChangeLog?ref=e88396c0721010f49c8f2013c91916a8f30c1162", "patch": "@@ -1,5 +1,30 @@\n 2009-02-17  Janis Johnson  <janis187@us.ibm.com>\n \n+\t* bin: New directory.\n+\t* bin/reg-hunt: New.\n+\t* bin/reg_periodic: New.\n+\t* bin/gcc-svn-update: New.\n+\t* bin/gcc-svn-update-fix: New.\n+\t* bin/gcc-build-simple: New.\n+\t* bin/gcc-build-full: New.\n+\t* bin/gcc-cleanup: New.\n+\t* bin/reg-test: New.\n+\t* bin/reg-newmid: New.\n+\t* bin/gcc-test-ice-on-valid-code: New.\n+\t* bin/gcc-test-ice-on-invalid-code: New.\n+\t* bin/gcc-test-compiler-hangs: New.\n+\t* bin/gcc-test-missing-warning: New.\n+\t* bin/gcc-test-bogus-warning: New.\n+\t* bin/gcc-test-segfault-on-valid-code: New.\n+\t* bin/gcc-test-rejects-valid: New.\n+\t* bin/gcc-test-accepts-invalid: New.\n+\t* bin/gcc-test-wrong-code: New.\n+\t* bin/gcc-svn-patchlist: New.\n+\t* bin/gcc-svn-checkfail: New.\n+\t* bin/gcc-svn-recordfail: New.\n+\t* bin/gcc-svn-report: New.\n+\t* bin/gcc-svn-ids: New.\n+\n \t* date_based: New directory.\n \t* README: Move from here ...\n \t* date_based/README: to here."}, {"sha": "21e6d684fedeb1873fa7bfa78b3ee21ee78e28fa", "filename": "contrib/reghunt/bin/gcc-build-full", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88396c0721010f49c8f2013c91916a8f30c1162/contrib%2Freghunt%2Fbin%2Fgcc-build-full", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88396c0721010f49c8f2013c91916a8f30c1162/contrib%2Freghunt%2Fbin%2Fgcc-build-full", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Freghunt%2Fbin%2Fgcc-build-full?ref=e88396c0721010f49c8f2013c91916a8f30c1162", "patch": "@@ -0,0 +1,52 @@\n+#! /bin/sh\n+\n+# Perform a simple build of GCC for a particular language, using several\n+# environment variables defined by reghunt scripts and config files.\n+#\n+# Copyright (C) 2007 Free Software Foundation.\n+#\n+# This file is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# For a copy of the GNU General Public License, write the the\n+# Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+# Boston, MA 02111-1301, USA.\n+\n+abort() {\n+  echo \"`date`  $1\"\n+  exit 1\n+}\n+\n+ID=$1\n+LOGDIR=${REG_BUILDDIR}/logs/${BUGID}/${ID}\n+mkdir -p $LOGDIR\n+\n+echo \"`date`  building GCC ($REG_LANGS) for id ${ID}\"\n+\n+cd $REG_BUILDDIR\n+rm -rf obj\n+mkdir obj\n+cd obj\n+\n+echo \"REG_CONFOPTS = $REG_CONFOPTS\" > ${LOGDIR}/configure.log\n+echo \"REG_PREFIX   = $REG_PREFIX\"  >> ${LOGDIR}/configure.log\n+echo \"REG_LANGS    = $REG_LANGS\"   >> ${LOGDIR}/configure.log\n+echo >> ${LOGDIR}/configure.log\n+\n+${REG_GCCSRC}/configure \\\n+  --prefix=$REG_PREFIX \\\n+  $REG_CONFOPTS \\\n+  --enable-languages=$REG_LANGS \\\n+  >> ${LOGDIR}/configure.log 2>&1 || abort \"  configure failed\"\n+    \n+make $REG_MAKE_J > ${LOGDIR}/make.log 2>&1 || abort \"  make failed\"\n+make install > ${LOGDIR}/make.install.log 2>&1 || abort \"  make install failed\"\n+\n+exit 0"}, {"sha": "f2d8ea39cc657551dfb290adbc6fc70c2c20f614", "filename": "contrib/reghunt/bin/gcc-build-simple", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88396c0721010f49c8f2013c91916a8f30c1162/contrib%2Freghunt%2Fbin%2Fgcc-build-simple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88396c0721010f49c8f2013c91916a8f30c1162/contrib%2Freghunt%2Fbin%2Fgcc-build-simple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Freghunt%2Fbin%2Fgcc-build-simple?ref=e88396c0721010f49c8f2013c91916a8f30c1162", "patch": "@@ -0,0 +1,79 @@\n+#! /bin/sh\n+\n+# Build a GCC compiler, using environment variables defined by several\n+# reghunt scripts and config files.\n+#\n+# This doesn't work for sources earlier than about 2003-02-25.\n+#\n+# Copyright (C) 2007 Free Software Foundation.\n+#\n+# This file is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# For a copy of the GNU General Public License, write the the\n+# Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+# Boston, MA 02111-1301, USA.\n+\n+ID=\"${1}\"\n+LOGDIR=${REG_BUILDDIR}/logs/${BUGID}/${ID}\n+mkdir -p $LOGDIR\n+\n+msg() {\n+    echo \"`date`  ${1}\"\n+}\n+\n+abort() {\n+    msg \"${1}\"\n+    exit 1\n+}\n+\n+msg \"building $REG_COMPILER for id $ID\"\n+\n+rm -rf $REG_OBJDIR\n+mkdir $REG_OBJDIR\n+cd $REG_OBJDIR\n+\n+#msg \"configure\"\n+${REG_GCCSRC}/configure \\\n+    --prefix=$REG_PREFIX \\\n+    --enable-languages=$REG_LANGS \\\n+    $REG_CONFOPTS \\\n+  > configure.log 2>&1 || abort \"  configure failed\"\n+\n+#msg \"make libraries\"\n+make all-build-libiberty > ${LOGDIR}/make.all-build-libiberty.log 2>&1 || true\n+make all-libcpp > ${LOGDIR}/make.all-libcpp.log 2>&1 || true\n+make all-libdecnumber > ${LOGDIR}/make.all-libdecnumber.log 2>&1 || true\n+make all-intl > ${LOGDIR}/make.all-intl.log 2>&1 || true\n+make all-libbanshee > ${LOGDIR}/make.all-libbanshee.log 2>&1 || true\n+make configure-gcc > ${LOGDIR}/make.configure-gcc.log  2>&1 || true\n+\n+# hack for 3.3 branch\n+if [ ! -f libiberty/libiberty.a ]; then\n+  if [ -d libiberty ]; then\n+    # another hack for 3.2!\n+    cd libiberty\n+    make > ${LOGDIR}/make.libiberty.log 2>&1 || true\n+    cd ..\n+  else\n+    mkdir -p libiberty\n+    cd libiberty\n+    ln -s ../build-${REG_BLD}/libiberty/libiberty.a .\n+    cd ..\n+  fi\n+fi\n+\n+cd gcc\n+# REG_COMPILER is cc1, cc1plus, or f951\n+#msg \"make $REG_COMPILER\"\n+make $REG_MAKE_J $REG_COMPILER > ${LOGDIR}/make.${REG_COMPILER}.log 2>&1 \\\n+  || abort \"  make failed\"\n+msg \"build completed\"\n+exit 0"}, {"sha": "3ec1b8f050ea6bb3551321b350e408dc721eb0e7", "filename": "contrib/reghunt/bin/gcc-cleanup", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88396c0721010f49c8f2013c91916a8f30c1162/contrib%2Freghunt%2Fbin%2Fgcc-cleanup", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88396c0721010f49c8f2013c91916a8f30c1162/contrib%2Freghunt%2Fbin%2Fgcc-cleanup", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Freghunt%2Fbin%2Fgcc-cleanup?ref=e88396c0721010f49c8f2013c91916a8f30c1162", "patch": "@@ -0,0 +1,20 @@\n+#! /bin/sh\n+\n+# Clean up between regression hunts.\n+\n+if [ \"x${REG_SRCDIR}\" = \"x\" ]; then\n+   if [ -f gcc-svn-env ]; then\n+    . ./gcc-svn-env\n+  elif [ -f ../gcc-svn-env ]; then\n+    . ../gcc-svn-env\n+  elif [ -f ${HOME}/etc/gcc-svn-env ]; then\n+    . ${HOME}/etc/gcc-svn-env\n+  else\n+    echo \"$0: could not find gcc-svn-env file\"\n+    exit 1\n+  fi\n+fi\n+\n+rm -rf ${REG_SRCDIR}/gcc\n+rm -rf ${REG_BUILDDIR}/obj\n+rm -rf ${REG_PREFIX}"}, {"sha": "3877a062bf86f566a979a814ab9da1af6d374b2e", "filename": "contrib/reghunt/bin/gcc-svn-checkfail", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88396c0721010f49c8f2013c91916a8f30c1162/contrib%2Freghunt%2Fbin%2Fgcc-svn-checkfail", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88396c0721010f49c8f2013c91916a8f30c1162/contrib%2Freghunt%2Fbin%2Fgcc-svn-checkfail", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Freghunt%2Fbin%2Fgcc-svn-checkfail?ref=e88396c0721010f49c8f2013c91916a8f30c1162", "patch": "@@ -0,0 +1,9 @@\n+#! /bin/sh\n+\n+# Given an identifier that is an index into the current patch list,\n+# return 1 if the corresponding SVN revision number is in the list of\n+# known failures, 0 otherwise.\n+\n+ID=$1\n+REV=`${REG_IDS} -f index -t rev ${ID}`\n+grep -q \"^${REV}$\" ${REG_FAILLIST}"}, {"sha": "98602cc3e630321b2d4d226b8ec8c215575852f5", "filename": "contrib/reghunt/bin/gcc-svn-ids", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88396c0721010f49c8f2013c91916a8f30c1162/contrib%2Freghunt%2Fbin%2Fgcc-svn-ids", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88396c0721010f49c8f2013c91916a8f30c1162/contrib%2Freghunt%2Fbin%2Fgcc-svn-ids", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Freghunt%2Fbin%2Fgcc-svn-ids?ref=e88396c0721010f49c8f2013c91916a8f30c1162", "patch": "@@ -0,0 +1,88 @@\n+#! /bin/sh\n+\n+# Convert one kind of changeset identifier to another.\n+#\n+# Usage: gcc-svn-ids -f from_kind -t to_kind id\n+#\n+# Where from_kind is one of:\n+#   index   index into the changeset list used by the reghunt tools\n+#   rev     is the Subversion revision name\n+# and to_kind is one of:\n+#   index   index into the changeset list used by the reghunt tools\n+#   rev     is the Subversion revision name\n+#   date    expanded UTC date string\n+#   branch  the branch, or \"trunk\" for mainline\n+#   author  the person who checked in the patch\n+\n+errmsg () {\n+  echo $1 1>&2\n+}\n+\n+usage () {\n+  echo 'cvs_ids -f kind -t kind id' 1>&2\n+  echo '   where from_kind is index or rev' 1>&2\n+  echo '   and to_kind is index, rev, date, author, or branch' 1>&2\n+  echo \"error\"\n+  exit 1\n+}\n+\n+if [ \"x${REG_CHANGESET_LIST}\" = \"x\" ]; then\n+  errmsg \"REG_CHANGESET_LIST is not defined\"\n+  echo \"error\"\n+  exit 1\n+fi\n+\n+if [ ! -f ${REG_CHANGESET_LIST} ]; then\n+  errmsg \"changeset list ${REG_CHANGESET_LIST} does not exist\"\n+  echo \"error\"\n+  exit 1\n+fi\n+\n+# Use a shorter name here.\n+LIST=${REG_CHANGESET_LIST}\n+\n+while getopts \"f:t:\" ARG; do\n+  case ${ARG} in\n+  f) FROM_KIND=\"${OPTARG}\";;\n+  t) TO_KIND=\"${OPTARG}\";;\n+  h) usage;;\n+  *) errmsg \"unrecognized option: ${ARG}\";\n+     usage;;\n+  esac\n+done\n+shift `expr ${OPTIND} - 1`\n+\n+if [ $# -eq 0 ]; then\n+  errmsg \"too few arguments, ID is missing\"\n+  usage\n+fi\n+if [ $# -gt 1 ]; then\n+  errmsg \"unexpected arguments: $*\"\n+  usage\n+fi\n+ID=\"$1\"\n+\n+case ${FROM_KIND} in\n+index)  LINE=\"`awk -F '|' -v id=\"${ID}\" '{if ($1 == id) print }' < ${LIST}`\";;\n+rev)    LINE=\"`awk -F '|' -v id=\"${ID}\" '{if ($2 == id) print }' < ${LIST}`\";;\n+*)      errmsg \"unrecognized FROM kind: ${FROM_KIND}\";\n+        usage;;\n+esac\n+\n+if [ \"x${LINE}\" = \"x\" ]; then\n+  errmsg \"no entry found for ${FROM_KIND} = ${ID}\"\n+  echo \"error\"\n+  exit 1\n+fi\n+\n+case ${TO_KIND} in\n+index)  TO_ID=\"`echo ${LINE} | awk -F '|' '{ print $1 }'`\";;\n+rev)    TO_ID=\"`echo ${LINE} | awk -F '|' '{ print $2 }'`\";;\n+author) TO_ID=\"`echo ${LINE} | awk -F '|' '{ print $3 }'`\";;\n+date)   TO_ID=\"`echo ${LINE} | awk -F '|' '{ print $4 }'`\";;\n+branch) TO_ID=\"`echo ${LINE} | awk -F '|' '{ print $5 }'`\";;\n+*)      errmsg \"unrecognized TO kind: ${TO_KIND}\";\n+        usage;;\n+esac\n+\n+echo ${TO_ID}"}, {"sha": "02b2046a8f06a4f640b709723c14c837a48784b6", "filename": "contrib/reghunt/bin/gcc-svn-patchlist", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88396c0721010f49c8f2013c91916a8f30c1162/contrib%2Freghunt%2Fbin%2Fgcc-svn-patchlist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88396c0721010f49c8f2013c91916a8f30c1162/contrib%2Freghunt%2Fbin%2Fgcc-svn-patchlist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Freghunt%2Fbin%2Fgcc-svn-patchlist?ref=e88396c0721010f49c8f2013c91916a8f30c1162", "patch": "@@ -0,0 +1,85 @@\n+#! /bin/bash\n+\n+# Make a list of revisions for commits to the branch of interest (trunk\n+# by default) between the specified dates.  This skips commits that do\n+# not modify any existing files and changes by gccadmin.\n+#\n+# Copyright (C) 2007 Free Software Foundation.\n+#\n+# This file is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# For a copy of the GNU General Public License, write the the\n+# Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+# Boston, MA 02111-1301, USA.\n+\n+#set -ex\n+\n+abort() {\n+    echo \"$@\"\n+    exit 1\n+}\n+\n+test $# -lt 2 && abort \"usage: $0 low_date high_date [branch]\"\n+\n+export TZ=UTC\n+LOW_DATE=\"$1\"\n+HIGH_DATE=\"$2\"\n+\n+if [ $# -eq 3 ]; then\n+    BRANCH=\"$3\"\n+else\n+    BRANCH=\"\"\n+fi\n+\n+# Verify branch name, convert a short name to the real one.\n+\n+case $BRANCH in\n+\"\")             BRANCH=\"trunk\";;\n+mline)          BRANCH=\"trunk\";;\n+mainline)       BRANCH=\"trunk\";;\n+4.1)            BRANCH=\"gcc-4_1-branch\";;\n+gcc-4_1-branch) ;;\n+4.0)            BRANCH=\"gcc-4_0-branch\";;\n+gcc-4_0-branch) ;;\n+3.4)            BRANCH=\"gcc-3_4-branch\";;\n+gcc-3_4-branch) ;;\n+*)              ;; # abort \"$0: unrecognized branch $BRANCH\"\n+esac\n+\n+if [ \"${BRANCH}\" = \"trunk\" ]; then\n+  BRANCHPATH=trunk\n+else\n+  BRANCHPATH=branches/${BRANCH}\n+fi\n+\n+# Get the revision at the time of LOW_DATE.\n+\n+LOW_REV=`svn info --revision {\"${LOW_DATE}\"} \\\n+        ${REG_SVN_REPO}/${BRANCHPATH} \\\n+  | awk '/Revision:/ { print $2 }'`\n+\n+# Create the list of information for LOW_REV through HIGH_DATE in a\n+# form expected by gcc-svn-ids.\n+\n+svn log --quiet --non-interactive \\\n+        --revision ${LOW_REV}:{\"${HIGH_DATE}\"} \\\n+        ${REG_SVN_REPO}/${BRANCHPATH} \\\n+  | awk -v branch=$BRANCH \\\n+      'BEGIN { id=0 }\n+       /---/ { next }\n+       /(no author)/ { next }\n+       /gccadmin/ { next }\n+             { sub(\" \\\\+0000 (.*)\",\"\")\n+               sub(\"r\",\"\",$1)\n+               gsub(\" \\\\| \",\"|\")\n+               id++\n+               print id \"|\" $0 \"|\" branch\n+             }'"}, {"sha": "cf5cde7540be2d402c33820e234b9b0a10975475", "filename": "contrib/reghunt/bin/gcc-svn-recordfail", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88396c0721010f49c8f2013c91916a8f30c1162/contrib%2Freghunt%2Fbin%2Fgcc-svn-recordfail", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88396c0721010f49c8f2013c91916a8f30c1162/contrib%2Freghunt%2Fbin%2Fgcc-svn-recordfail", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Freghunt%2Fbin%2Fgcc-svn-recordfail?ref=e88396c0721010f49c8f2013c91916a8f30c1162", "patch": "@@ -0,0 +1,8 @@\n+#! /bin/sh\n+\n+# Given an identifier that is an index into the current patch list,\n+# record the corresponding SVN number to the list of known failures.\n+\n+ID=$1\n+REV=`${REG_IDS} -f index -t rev ${ID}`\n+echo $REV >> ${REG_FAILLIST}"}, {"sha": "a0de534b3d56de9230352118b71fe30b3c545152", "filename": "contrib/reghunt/bin/gcc-svn-report", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88396c0721010f49c8f2013c91916a8f30c1162/contrib%2Freghunt%2Fbin%2Fgcc-svn-report", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88396c0721010f49c8f2013c91916a8f30c1162/contrib%2Freghunt%2Fbin%2Fgcc-svn-report", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Freghunt%2Fbin%2Fgcc-svn-report?ref=e88396c0721010f49c8f2013c91916a8f30c1162", "patch": "@@ -0,0 +1,26 @@\n+#! /bin/sh\n+\n+# Report a more informative version of the patch identifier.\n+\n+ID=$1\n+\n+test \"x${REG_IDS}\" != \"x\" || exit 1\n+test \"x${REG_CHANGESET_LIST}\" != \"x\" || exit 1\n+\n+BRANCH=`${REG_IDS} -f index -t branch ${ID}`\n+cd ${REG_SRCDIR}/gcc\n+unset LANG\n+unset LC_ALL\n+REV=`${REG_IDS} -f index -t rev ${ID}`\n+\n+# long set of information\n+TZ=UTC \\\n+svn log --revision $REV\n+\n+# URL of diffs\n+echo\n+echo '    http://gcc.gnu.org/viewcvs?view=rev&rev='$REV\n+\n+# short set of information, without final line of hyphens\n+TZ=UTC \\\n+svn log --quiet --revision $REV | sed -e '/---/d' -e 's/^/    /'"}, {"sha": "0f6aac866755dee071d0bdfb347afdc5999c9005", "filename": "contrib/reghunt/bin/gcc-svn-update", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88396c0721010f49c8f2013c91916a8f30c1162/contrib%2Freghunt%2Fbin%2Fgcc-svn-update", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88396c0721010f49c8f2013c91916a8f30c1162/contrib%2Freghunt%2Fbin%2Fgcc-svn-update", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Freghunt%2Fbin%2Fgcc-svn-update?ref=e88396c0721010f49c8f2013c91916a8f30c1162", "patch": "@@ -0,0 +1,117 @@\n+#! /bin/bash\n+\n+# Update or check out GCC sources for a particular Subversion revision\n+# and a particular branch.\n+#\n+# Copyright (C) 2007 Free Software Foundation.\n+#\n+# This file is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# For a copy of the GNU General Public License, write the the\n+# Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+# Boston, MA 02111-1301, USA.\n+\n+#set -ex\n+\n+if [ $# != 1 ]; then\n+  echo Usage: $0 id\n+  exit 1\n+fi\n+\n+if [ \"x${REG_DO_CLEANUPS}\" != \"x\" ]; then\n+  reg_cleanup\n+fi\n+\n+ID=$1\n+BRANCH=\"\"\n+\n+########################################################################\n+# Get sources.\n+########################################################################\n+\n+svn_get() {\n+  # In case there are problems with updates (there were with CVS),\n+  # creating a file called REMOVE in the REG_SRCDIR directory causes us\n+  # to start with a clean tree each time.\n+\n+  unset LC_ALL\n+  unset LANG\n+\n+  cd ${REG_SRCDIR}\n+  if [ -d gcc ]; then\n+    # There's already a tree; do an update with the new revision.\n+    cd gcc\n+    echo \"`date`  svn update begun for id ${ID}, rev ${REV}\"\n+    echo svn update --non-interactive --revision ${REV} >> $LOG\n+    svn update --non-interactive --revision ${REV} >> $LOG\n+    if [ $? -eq 0 ]; then\n+      echo \"`date`  svn update done\"\n+    else\n+      echo \"`date`  svn update failed\"\n+      exit 1\n+    fi\n+  else\n+    echo \"`date`  svn checkout begun for id ${ID}, rev ${REV}\"\n+    echo svn checkout --non-interactive --revision ${REV} \\\n+      ${REG_SVN_REPO}/${BRANCHPATH} gcc >> $LOG\n+    svn checkout --non-interactive --revision ${REV} \\\n+      ${REG_SVN_REPO}/${BRANCHPATH} gcc >> $LOG\n+    if [ $? -eq 0 ]; then\n+      echo \"`date`  svn checkout done\"\n+    else\n+      echo \"`date`  svn checkout failed\"\n+      exit 1\n+    fi\n+    cd gcc\n+  fi\n+\n+  # Touch generated files.\n+  contrib/gcc_update --touch >> $LOG\n+}\n+\n+########################################################################\n+# Main program\n+########################################################################\n+\n+cd ${REG_SRCDIR}\n+\n+# This is a simple way to stop a long regression search fairly cleanly;\n+# just touch a file called STOP.\n+\n+if [ -f STOP ]; then\n+  echo \"`date`  $0 detected STOP file\"\n+  rm -f STOP\n+  exit 1\n+fi\n+\n+# Set up the log file.\n+REV=`${REG_IDS} -f index -t rev ${ID}`\n+LOG=${REG_SRCDIR}/logs/${BUGID}/${REV}.log\n+mkdir -p ${REG_SRCDIR}/logs/${BUGID}\n+rm -f $LOG\n+touch $LOG\n+\n+# Get the branch for this patch.\n+BRANCH=`${REG_IDS} -f index -t branch ${ID}`\n+if [ \"${BRANCH}\" = \"error\" ]; then\n+  echo \"`date`  $0: cannot determine the SVN branch for id ${ID}\"\n+  exit 1\n+fi\n+\n+if [ \"${BRANCH}\" = \"trunk\" ]; then\n+  BRANCHPATH=trunk\n+else\n+  BRANCHPATH=branches/${BRANCH}\n+fi\n+\n+svn_get\n+\n+exit 0"}, {"sha": "9775055022aae53a9d353abbfce0ac6b2188bf7e", "filename": "contrib/reghunt/bin/gcc-svn-update-fix", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88396c0721010f49c8f2013c91916a8f30c1162/contrib%2Freghunt%2Fbin%2Fgcc-svn-update-fix", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88396c0721010f49c8f2013c91916a8f30c1162/contrib%2Freghunt%2Fbin%2Fgcc-svn-update-fix", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Freghunt%2Fbin%2Fgcc-svn-update-fix?ref=e88396c0721010f49c8f2013c91916a8f30c1162", "patch": "@@ -0,0 +1,113 @@\n+#! /bin/bash\n+\n+#set -ex\n+\n+# Update an SVN tree for a particular date.\n+\n+if [ $# != 1 ]; then\n+  echo Usage: $0 id\n+  exit 1\n+fi\n+\n+if [ \"x${REG_DO_CLEANUPS}\" != \"x\" ]; then\n+  reg_cleanup\n+fi\n+\n+ID=$1\n+BRANCH=\"\"\n+\n+########################################################################\n+# Get sources.\n+########################################################################\n+\n+svn_get() {\n+  # In case there are problems with updates (there were with CVS),\n+  # creating a file called REMOVE in the REG_SRCDIR directory causes us\n+  # to start with a clean tree each time.\n+\n+  unset LC_ALL\n+  unset LANG\n+\n+  cd ${REG_SRCDIR}\n+  if [ -d gcc ]; then\n+    # There's already a tree; do an update with the new revision.\n+    cd gcc\n+    echo \"`date`  svn update begun for id ${ID}, rev ${REV} (fix)\"\n+    echo svn update --non-interactive --revision ${REV} >> $LOG\n+    svn update --non-interactive --revision ${REV} >> $LOG\n+    if [ $? -eq 0 ]; then\n+      echo \"`date`  svn update done\"\n+    else\n+      echo \"`date`  svn update failed\"\n+      exit 1\n+    fi\n+  else\n+    echo \"`date`  svn checkout begun for id ${ID}, rev ${REV}\"\n+    echo svn checkout --non-interactive --revision ${REV} \\\n+      ${REG_SVN_REPO}/${BRANCHPATH} gcc >> $LOG\n+    svn checkout --non-interactive --revision ${REV} \\\n+      ${REG_SVN_REPO}/${BRANCHPATH} gcc >> $LOG\n+    if [ $? -eq 0 ]; then\n+      echo \"`date`  svn checkout done\"\n+    else\n+      echo \"`date`  svn checkout failed\"\n+      exit 1\n+    fi\n+    cd gcc\n+  fi\n+\n+  # Touch generated files.\n+  contrib/gcc_update --touch >> $LOG\n+}\n+\n+########################################################################\n+# Main program\n+########################################################################\n+\n+cd ${REG_SRCDIR}\n+\n+# This is a simple way to stop a long regression search fairly cleanly;\n+# just touch a file called STOP.\n+\n+if [ -f STOP ]; then\n+  echo \"`date`  $0 detected STOP file\"\n+  rm -f STOP\n+  exit 1\n+fi\n+\n+# Set up the log file.\n+REV=`${REG_IDS} -f index -t rev ${ID}`\n+LOG=${REG_SRCDIR}/logs/${BUGID}/${REV}.log\n+mkdir -p ${REG_SRCDIR}/logs/${BUGID}\n+rm -f $LOG\n+touch $LOG\n+\n+# Get the branch for this patch.\n+BRANCH=`${REG_IDS} -f index -t branch ${ID}`\n+if [ \"${BRANCH}\" = \"error\" ]; then\n+  echo \"`date`  $0: cannot determine the SVN branch for id ${ID}\"\n+  exit 1\n+fi\n+\n+if [ \"${BRANCH}\" = \"trunk\" ]; then\n+  BRANCHPATH=trunk\n+else\n+  BRANCHPATH=branches/${BRANCH}\n+fi\n+\n+svn_get\n+\n+# Look for a patch that's needed for this revision to build.\n+FIX=${REG_PATCHES}/${REV}.fix\n+echo \"`date`  looking for $FIX\"\n+if [ -f $FIX ]; then\n+  echo \"`date`  fix needed; checking whether it is already applied\"\n+  cd ${REG_SRCDIR}/gcc\n+  patch --dry-run -s -p0 -i $FIX < /dev/null > /dev/null 2>&1\n+  if [ $? -eq 0 ]; then\n+    echo \"`date`  applying fix\"\n+    patch -s -p0 -i $FIX\n+  fi\n+fi\n+\n+exit 0"}, {"sha": "564c0bbd7c437c6065c6c4888793d7d7316c9f6f", "filename": "contrib/reghunt/bin/gcc-test-accepts-invalid", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88396c0721010f49c8f2013c91916a8f30c1162/contrib%2Freghunt%2Fbin%2Fgcc-test-accepts-invalid", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88396c0721010f49c8f2013c91916a8f30c1162/contrib%2Freghunt%2Fbin%2Fgcc-test-accepts-invalid", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Freghunt%2Fbin%2Fgcc-test-accepts-invalid?ref=e88396c0721010f49c8f2013c91916a8f30c1162", "patch": "@@ -0,0 +1,48 @@\n+#! /bin/sh\n+\n+# Test an \"accepts-invalid\" GCC bug, using environment variables set in\n+# several reghunt scripts and configuration files.\n+#\n+# Copyright (C) 2007 Free Software Foundation.\n+#\n+# This file is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# For a copy of the GNU General Public License, write the the\n+# Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+# Boston, MA 02111-1301, USA.\n+\n+ID=$1\n+\n+LOGID=`printf \"%04d\" ${ID}`\n+LOG=${BUGID}.${LOGID}.out\n+MSGID=\"bug ${BUGID}, id ${ID}\"\n+\n+$REG_TEST_COMPILER $REG_OPTS $REG_TESTCASE > ${LOG} 2>&1\n+\n+if [ $? -eq 0 ]; then\n+    echo \"`date`  test compiled successfully for ${MSGID}\"\n+    exit $REG_FAIL\n+fi\n+\n+grep -q 'No such file or directory' ${LOG}\n+if [ $? -eq 0 ]; then\n+    echo \"`date`    unexpected failure: missing file for ${MSGID}\"\n+    exit $REG_ERROR\n+fi\n+\n+grep -q 'error' ${LOG}\n+if [ $? -ne 0 ]; then\n+    echo \"`date`    unexpected failure: no error message for ${MSGID}\"\n+    exit $REG_ERROR\n+fi\n+\n+echo \"`date`  compilation failed for ${MSGID}\"\n+exit $REG_PASS"}, {"sha": "1bd0095ba9819bc267b1179d7fcbed1922750f7d", "filename": "contrib/reghunt/bin/gcc-test-bogus-warning", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88396c0721010f49c8f2013c91916a8f30c1162/contrib%2Freghunt%2Fbin%2Fgcc-test-bogus-warning", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88396c0721010f49c8f2013c91916a8f30c1162/contrib%2Freghunt%2Fbin%2Fgcc-test-bogus-warning", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Freghunt%2Fbin%2Fgcc-test-bogus-warning?ref=e88396c0721010f49c8f2013c91916a8f30c1162", "patch": "@@ -0,0 +1,42 @@\n+#! /bin/sh\n+\n+# Test a \"bogus-warning\" GCC bug, using environment variables set in\n+# several reghunt scripts and configuration files.\n+#\n+# Copyright (C) 2007 Free Software Foundation.\n+#\n+# This file is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# For a copy of the GNU General Public License, write the the\n+# Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+# Boston, MA 02111-1301, USA.\n+\n+ID=$1\n+\n+LOGID=`printf \"%04d\" ${ID}`\n+LOG=${BUGID}.${LOGID}.out\n+MSGID=\"bug ${BUGID}, id ${ID}\" \n+\n+$REG_TEST_COMPILER $REG_OPTS $REG_TESTCASE > ${LOG} 2>&1\n+\n+if [ $? -ne 0 ]; then\n+    echo \"`date`    unexpected failure: compilation failed for ${MSGID}\"\n+    exit $REG_ERROR\n+fi\n+\n+grep -q 'warning' ${LOG}\n+if [ $? -eq 0 ]; then\n+    echo \"`date`  bogus warning detected for ${MSGID}\"\n+    exit $REG_FAIL\n+fi\n+\n+echo \"`date`  no bogus warning for ${MSGID}\"\n+exit $REG_PASS"}, {"sha": "043bc26991bd20ac0f65fbf0b9e5f8978b830f60", "filename": "contrib/reghunt/bin/gcc-test-compiler-hangs", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88396c0721010f49c8f2013c91916a8f30c1162/contrib%2Freghunt%2Fbin%2Fgcc-test-compiler-hangs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88396c0721010f49c8f2013c91916a8f30c1162/contrib%2Freghunt%2Fbin%2Fgcc-test-compiler-hangs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Freghunt%2Fbin%2Fgcc-test-compiler-hangs?ref=e88396c0721010f49c8f2013c91916a8f30c1162", "patch": "@@ -0,0 +1,63 @@\n+#! /bin/sh\n+\n+# Test a bug for which the compiler hangs, using environment variables\n+# set in several reghunt scripts and configuration files.\n+#\n+# Copyright (C) 2007 Free Software Foundation.\n+#\n+# This file is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# For a copy of the GNU General Public License, write the the\n+# Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+# Boston, MA 02111-1301, USA.\n+\n+ID=$1\n+LOGID=`printf \"%04d\" ${ID}`\n+LOG=${BUGID}.${LOGID}.out\n+MSGID=\"bug ${BUGID}, id ${ID}\"\n+\n+trap \"echo \\\"`date`  compiler hang for ${MSGID}\\\"; pkill -9 cc1; exit $REG_FAIL\" SIGUSR1\n+SLEEPCNT=10\n+\n+# Set up to trap the hang.\n+sleep $SLEEPCNT && /bin/kill -s SIGUSR1 0 &\n+SLEEPID=$!\n+\n+# This might hang.\n+$REG_TEST_COMPILER $REG_OPTS $REG_TESTCASE > ${LOG} 2>&1\n+\n+# The command didn't hang.  Capture its return value so we can check\n+# whether it had other unexpected problems.\n+RET=$?\n+\n+# Kill the sleep command so it won't finish normally and cause this\n+# process to get a signal telling it to report a failure.\n+/bin/kill $SLEEPID\n+\n+if [ $RET -eq 0 ]; then\n+    echo \"`date`  test compiled successfully for ${MSGID}\"\n+    exit $REG_PASS\n+fi\n+\n+grep -q 'No such file or directory' ${LOG}\n+if [ $? -eq 0 ]; then\n+    echo \"`date`    unexpected failure: missing file for ${MSGID}\"\n+    exit $REG_ERROR\n+fi\n+\n+grep -q \"egmentation fault\"\n+if [ $? -eq 0 ]; then\n+    echo \"`date`   unexpected failure: segfault for ${MSGID}\"\n+    exit $REG_ERROR\n+fi\n+\n+echo \"`date`    unexpected failure for ${MSGID}\"\n+exit $REG_ERROR"}, {"sha": "6e449a84ac36a5c838cb2eef3b6f92b239c83dd9", "filename": "contrib/reghunt/bin/gcc-test-ice-on-invalid-code", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88396c0721010f49c8f2013c91916a8f30c1162/contrib%2Freghunt%2Fbin%2Fgcc-test-ice-on-invalid-code", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88396c0721010f49c8f2013c91916a8f30c1162/contrib%2Freghunt%2Fbin%2Fgcc-test-ice-on-invalid-code", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Freghunt%2Fbin%2Fgcc-test-ice-on-invalid-code?ref=e88396c0721010f49c8f2013c91916a8f30c1162", "patch": "@@ -0,0 +1,54 @@\n+#! /bin/sh\n+\n+# Test an \"ice-on-invalid-code\" GCC bug, using environment variables set\n+# in several reghunt scripts and configuration files.\n+#\n+# Copyright (C) 2007 Free Software Foundation.\n+#\n+# This file is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# For a copy of the GNU General Public License, write the the\n+# Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+# Boston, MA 02111-1301, USA.\n+\n+ID=$1\n+\n+LOGID=`printf \"%04d\" ${ID}`\n+LOG=${BUGID}.${LOGID}.out\n+MSGID=\"bug ${BUGID}, id ${ID}\"\n+\n+$REG_TEST_COMPILER $REG_OPTS $REG_TESTCASE > ${LOG} 2>&1\n+\n+if [ $? -eq 0 ]; then\n+    echo \"`date`  unexpected failure: compilation succeeded for ${MSGID}\"\n+    exit $REG_ERROR\n+fi\n+\n+grep -q 'No such file or directory' ${LOG}\n+if [ $? -eq 0 ]; then\n+    echo \"`date`    unexpected failure: missing file for ${MSGID}\"\n+    exit $REG_ERROR\n+fi\n+\n+grep -q 'internal compiler error' ${LOG}\n+if [ $? -eq 0 ]; then\n+    echo \"`date`  internal compiler error for ${MSGID}\"\n+    exit $REG_FAIL\n+fi\n+\n+grep -q 'error' ${LOG}\n+if [ $? -ne 0 ]; then\n+    echo \"`date`    unexpected failure: no error message for ${MSGID}\"\n+    exit $REG_ERROR\n+fi\n+\n+echo \"`date`  compilation failed for ${MSGID}\"\n+exit $REG_PASS"}, {"sha": "ecc5fe04afcf4ef94f34522ef16f3227e3018b34", "filename": "contrib/reghunt/bin/gcc-test-ice-on-valid-code", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88396c0721010f49c8f2013c91916a8f30c1162/contrib%2Freghunt%2Fbin%2Fgcc-test-ice-on-valid-code", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88396c0721010f49c8f2013c91916a8f30c1162/contrib%2Freghunt%2Fbin%2Fgcc-test-ice-on-valid-code", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Freghunt%2Fbin%2Fgcc-test-ice-on-valid-code?ref=e88396c0721010f49c8f2013c91916a8f30c1162", "patch": "@@ -0,0 +1,48 @@\n+#! /bin/sh\n+\n+# Test an \"ice-on-valid-code\" GCC bug, using environment variables set\n+# in several reghunt scripts and configuration files.\n+#\n+# Copyright (C) 2007 Free Software Foundation.\n+#\n+# This file is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# For a copy of the GNU General Public License, write the the\n+# Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+# Boston, MA 02111-1301, USA.\n+\n+ID=$1\n+\n+LOGID=`printf \"%04d\" ${ID}`\n+LOG=${BUGID}.${LOGID}.out\n+MSGID=\"bug ${BUGID}, id ${ID}\"\n+\n+$REG_TEST_COMPILER $REG_OPTS $REG_TESTCASE > ${LOG} 2>&1\n+\n+if [ $? -eq 0 ]; then\n+    echo \"`date`  test compiled successfully for ${MSGID}\"\n+    exit $REG_PASS\n+fi\n+\n+grep -q 'No such file or directory' ${LOG}\n+if [ $? -eq 0 ]; then\n+    echo \"`date`    unexpected failure: missing file for ${MSGID}\"\n+    exit $REG_ERROR\n+fi\n+\n+grep -q 'nternal.* error' ${LOG}\n+if [ $? -ne 0 ]; then\n+    echo \"`date`    unexpected failure: no ICE message for ${MSGID}\"\n+    exit $REG_ERROR\n+fi\n+\n+echo \"`date`  compilation failed for ${MSGID}\"\n+exit $REG_FAIL"}, {"sha": "0fc9b2dc8ea9f03064278dddedc9a3e010d541c2", "filename": "contrib/reghunt/bin/gcc-test-missing-warning", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88396c0721010f49c8f2013c91916a8f30c1162/contrib%2Freghunt%2Fbin%2Fgcc-test-missing-warning", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88396c0721010f49c8f2013c91916a8f30c1162/contrib%2Freghunt%2Fbin%2Fgcc-test-missing-warning", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Freghunt%2Fbin%2Fgcc-test-missing-warning?ref=e88396c0721010f49c8f2013c91916a8f30c1162", "patch": "@@ -0,0 +1,42 @@\n+#! /bin/sh\n+\n+# Test a \"missing-warning\" GCC bug, using environment variables set in\n+# several reghunt scripts and configuration files.\n+#\n+# Copyright (C) 2007 Free Software Foundation.\n+#\n+# This file is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# For a copy of the GNU General Public License, write the the\n+# Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+# Boston, MA 02111-1301, USA.\n+\n+ID=$1\n+\n+LOGID=`printf \"%04d\" ${ID}`\n+LOG=${BUGID}.${LOGID}.out\n+MSGID=\"bug ${BUGID}, id ${ID}\"\n+\n+$REG_TEST_COMPILER $REG_OPTS $REG_TESTCASE > ${LOG} 2>&1\n+\n+if [ $? -ne 0 ]; then\n+    echo \"`date`    unexpected failure: compilation failed for ${MSGID}\"\n+    exit $REG_ERROR\n+fi\n+\n+grep -q 'warning' ${LOG}\n+if [ $? -eq 0 ]; then\n+    echo \"`date`  warning detected for ${MSGID}\"\n+    exit $REG_PASS\n+fi\n+\n+echo \"`date`  no warning for ${MSGID}\"\n+exit $REG_FAIL"}, {"sha": "5672a0dfee64ce72e8d6cbb7c82f9412edbf93ba", "filename": "contrib/reghunt/bin/gcc-test-rejects-valid", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88396c0721010f49c8f2013c91916a8f30c1162/contrib%2Freghunt%2Fbin%2Fgcc-test-rejects-valid", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88396c0721010f49c8f2013c91916a8f30c1162/contrib%2Freghunt%2Fbin%2Fgcc-test-rejects-valid", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Freghunt%2Fbin%2Fgcc-test-rejects-valid?ref=e88396c0721010f49c8f2013c91916a8f30c1162", "patch": "@@ -0,0 +1,48 @@\n+#! /bin/sh\n+\n+# Test a \"rejects-valid\" GCC bug, using environment variables set in\n+# several reghunt scripts and configuration files.\n+#\n+# Copyright (C) 2007 Free Software Foundation.\n+#\n+# This file is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# For a copy of the GNU General Public License, write the the\n+# Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+# Boston, MA 02111-1301, USA.\n+\n+ID=$1\n+\n+LOGID=`printf \"%04d\" ${ID}`\n+LOG=${BUGID}.${LOGID}.out\n+MSGID=\"bug ${BUGID}, id ${ID}\"\n+\n+$REG_TEST_COMPILER $REG_OPTS $REG_TESTCASE > ${LOG} 2>&1\n+\n+if [ $? -eq 0 ]; then\n+    echo \"`date`  test compiled successfully for ${MSGID}\"\n+    exit $REG_PASS\n+fi\n+\n+grep -q 'No such file or directory' ${LOG}\n+if [ $? -eq 0 ]; then\n+    echo \"`date`    unexpected failure: missing file for ${MSGID}\"\n+    exit $REG_ERROR\n+fi\n+\n+grep -q 'error' ${LOG}\n+if [ $? -ne 0 ]; then\n+    echo \"`date`    unexpected failure: no error message for ${MSGID}\"\n+    exit $REG_ERROR\n+fi\n+\n+echo \"`date`  compilation failed for ${MSGID}\"\n+exit $REG_FAIL"}, {"sha": "0a1b1b722b58400315920f60ac5288d2464e52ae", "filename": "contrib/reghunt/bin/gcc-test-segfault-on-valid-code", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88396c0721010f49c8f2013c91916a8f30c1162/contrib%2Freghunt%2Fbin%2Fgcc-test-segfault-on-valid-code", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88396c0721010f49c8f2013c91916a8f30c1162/contrib%2Freghunt%2Fbin%2Fgcc-test-segfault-on-valid-code", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Freghunt%2Fbin%2Fgcc-test-segfault-on-valid-code?ref=e88396c0721010f49c8f2013c91916a8f30c1162", "patch": "@@ -0,0 +1,49 @@\n+#! /bin/sh\n+\n+# Test an \"ice-on-valid-code\" GCC bug that results in a compiler\n+# segfault, using environment variables set in several reghunt scripts\n+# and configuration files.\n+#\n+# Copyright (C) 2007 Free Software Foundation.\n+#\n+# This file is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# For a copy of the GNU General Public License, write the the\n+# Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+# Boston, MA 02111-1301, USA.\n+\n+ID=$1\n+\n+LOGID=`printf \"%04d\" ${ID}`\n+LOG=${BUGID}.${LOGID}.out\n+MSGID=\"bug ${BUGID}, id ${ID}\"\n+\n+$REG_TEST_COMPILER $REG_OPTS $REG_TESTCASE > ${LOG} 2>&1\n+\n+if [ $? -eq 0 ]; then\n+    echo \"`date`  test compiled successfully for ${MSGID}\"\n+    exit $REG_PASS\n+fi\n+\n+grep -q 'No such file or directory' ${LOG}\n+if [ $? -eq 0 ]; then\n+    echo \"`date`    unexpected failure: missing file for ${MSGID}\"\n+    exit $REG_ERROR\n+fi\n+\n+grep -q 'egmentation fault' ${LOG}\n+if [ $? -ne 0 ]; then\n+    echo \"`date`    unexpected failure: no segfault message for ${MSGID}\"\n+    exit $REG_ERROR\n+fi\n+\n+echo \"`date`  compilation failed for ${MSGID}\"\n+exit $REG_FAIL"}, {"sha": "2c0398beac74046406884f58abc800e838aee7ab", "filename": "contrib/reghunt/bin/gcc-test-wrong-code", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88396c0721010f49c8f2013c91916a8f30c1162/contrib%2Freghunt%2Fbin%2Fgcc-test-wrong-code", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88396c0721010f49c8f2013c91916a8f30c1162/contrib%2Freghunt%2Fbin%2Fgcc-test-wrong-code", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Freghunt%2Fbin%2Fgcc-test-wrong-code?ref=e88396c0721010f49c8f2013c91916a8f30c1162", "patch": "@@ -0,0 +1,42 @@\n+#! /bin/sh\n+\n+# Test a \"wrong-code\" GCC bug, using environment variables set in\n+# several reghunt scripts and configuration files.\n+#\n+# Copyright (C) 2007 Free Software Foundation.\n+#\n+# This file is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# For a copy of the GNU General Public License, write the the\n+# Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+# Boston, MA 02111-1301, USA.\n+\n+ID=$1\n+\n+LOGID=`printf \"%04d\" ${ID}`\n+LOG=${BUGID}.${LOGID}.out\n+MSGID=\"bug ${BUGID}, id ${ID}\"\n+\n+$REG_TEST_COMPILER $REG_OPTS $REG_TESTCASE > ${LOG} 2>&1\n+\n+if [ $? -ne 0 ]; then\n+    echo \"`date`  unexpected failure: test compilation failed for ${MSGID}\"\n+    exit $REG_ERROR\n+fi\n+\n+./a.out >> ${LOG} 2>&1\n+if [ $? -ne 0 ]; then\n+    echo \"`date`  test run aborted for ${MSGID}\"\n+    exit $REG_FAIL\n+fi\n+\n+echo \"`date`  test ran successfully for ${MSGID}\"\n+exit $REG_PASS"}, {"sha": "aa0ea61ee220801fe710e263b04d45360ce69b49", "filename": "contrib/reghunt/bin/reg-hunt", "status": "added", "additions": 363, "deletions": 0, "changes": 363, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88396c0721010f49c8f2013c91916a8f30c1162/contrib%2Freghunt%2Fbin%2Freg-hunt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88396c0721010f49c8f2013c91916a8f30c1162/contrib%2Freghunt%2Fbin%2Freg-hunt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Freghunt%2Fbin%2Freg-hunt?ref=e88396c0721010f49c8f2013c91916a8f30c1162", "patch": "@@ -0,0 +1,363 @@\n+#! /bin/bash\n+\n+#set -x\n+\n+########################################################################\n+#\n+# File:    reg-hunt\n+# Author:  Janis Johnson <janis187@us.ibm.com>\n+# Date:    2003/08/19\n+#\n+# Search for the patch identifier for which results for a test changed,\n+# using a binary search.  The functionality for getting sources,\n+# building the component to test, and running the test are in other\n+# scripts that are run from here.  Before the search begins, we verify\n+# that we get the expected behavior for the first and last patch\n+# identifiers.\n+#\n+# Define these in a file whose name is the argument to this script:\n+#   LOW_PATCH:  Patch identifier.\n+#   HIGH_PATCH: Patch identifier.\n+#   REG_UPDATE: Pathname of script to update your source tree; returns\n+#               zero for success, nonzero for failure.\n+#   REG_BUILD:  Pathname of script to build enough of the product to run\n+#               the test; returns zero for success, nonzero for failure.\n+#   REG_TEST:   Pathname of script to run the test; returns 1 if we\n+#               should search later patches, 0 if we should search\n+#               earlier patches, and something else if there was an\n+#               unexpected failure.\n+# Optional:\n+#   REG_REPORT  Pathname of script to call at the end with the id of the\n+#               patch that caused the change in behavior.\n+#   REG_FINISH  Pathname of script to call at the end with the two final\n+#               patch identifiers as arguments.\n+#   REG_NEWMID  Pathname of script to call when a build has failed, with\n+#               arguments of the failed id and the current low and high\n+#   SKIP_LOW    If 1, skip verifying the low patch identifier of the\n+#               range; define this only if you're restarting and have\n+#               already tested the low patch.\n+#   SKIP_HIGH   If 1, skip verifying the high patch identifier of the\n+#               range; define this only if you're restarting and have\n+#               already tested the high patch.\n+#   FIRST_MID   Use this as the first midpoint, to avoid a midpoint that\n+#               is known not to build.\n+#   VERBOSITY   Default is 0, to print only errors and final message.\n+#   DATE_IN_MSG If set to anything but 0, include the time and date in\n+#               messages.\n+#\n+#\n+#\n+# Copyright (c) 2002, 2003, 2004, 2005, 2007 Free Software Foundation, Inc.\n+#\n+# This file is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# For a copy of the GNU General Public License, write the the\n+# Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+# Boston, MA 02111-1301, USA.\n+# \n+########################################################################\n+\n+########################################################################\n+# Functions\n+########################################################################\n+\n+# Issue a message if its verbosity level is high enough.\n+\n+msg() {\n+  test ${1} -gt ${VERBOSITY}  && return\n+\n+  if [ \"x${DATE_IN_MSG}\" = \"x\" ]; then\n+    echo \"${2}\"\n+  else\n+    echo \"`date`  ${2}\"\n+  fi\n+}\n+\n+# Issue an error message and exit with a non-zero status.  If there\n+# is a valid current range whose end points have been tested, report\n+# it so the user can start again from there.\n+\n+error() {\n+  msg 0 \"error: ${1}\"\n+  test ${VALID_RANGE} -eq 1 && \\\n+    echo \"current range:\"\n+    echo \"LOW_PATCH=${LATER_THAN}\"\n+    echo \"HIGH_PATCH=${EARLIER_THAN}\"\n+  exit 1\n+}\n+\n+# Build the components to test using sources as of a particular patch\n+# and run a test case.  Pass each of the scripts the patch identifier\n+# that we're testing; the first one needs it, the others can ignore it\n+# if they want.\n+\n+process_patch () {\n+  TEST_ID=${1}\n+\n+  # If we're keeping track of known failures, see if TEST_ID is one and\n+  # if so, don't bother updating sources and trying to build.\n+\n+  FAILS=0\n+  SKIP=0\n+  if [ ${SKIP_FAILURES} -eq 1 ]; then\n+    ${REG_CHECKFAIL} ${TEST_ID}\n+    if [ $? -eq 0 ]; then\n+      msg 1 \"skipping ${TEST_ID}; it is a known build failure\"\n+      FAILS=1\n+      SKIP=1\n+    fi\n+  fi\n+\n+  if [ ${FAILS} -eq 0 ]; then\n+    ${REG_UPDATE} ${TEST_ID} || error \"source update failed for ${TEST_ID}\"\n+    ${REG_BUILD} ${TEST_ID}\n+    if [ $? -ne 0 ]; then\n+      FAILS=1\n+      msg 1 \"build failed for ${TEST_ID}\"\n+      if [ ${SKIP_FAILURES} -eq 1 ]; then\n+        ${REG_RECORDFAIL} ${TEST_ID}\n+      fi\n+    fi\n+  fi\n+\n+  if [ ${FAILS} -eq 0 ]; then\n+    ${REG_TEST} ${TEST_ID}\n+    LATER=$?\n+    if [ $LATER -ne 0 -a $LATER -ne 1 ]; then\n+      msg 0 \"unexpected test failure for ${TEST_ID}\"\n+      exit 1\n+    fi\n+  else\n+\n+    # The build failed, or this patch is already known to fail to build.\n+    # If it's an endpoint, or if we don't have a way to recover from\n+    # build failures, quit now.\n+\n+    if [ ${SKIP} -eq 0 ]; then\n+      if [ \"x${REG_NEWMID}\" == \"x\" \\\n+           -o ${TEST_ID} -eq ${LATER_THAN} \\\n+           -o ${TEST_ID} -eq ${EARLIER_THAN} ]; then\n+        error \"build failed for ${TEST_ID}\"\n+      fi\n+    fi\n+\n+    # Try to find a new patch to try within the current range.\n+\n+    FIRST_MID=`${REG_NEWMID} ${LATER_THAN} ${EARLIER_THAN}`\n+    if [ ${FIRST_MID} -eq 0 ]; then\n+\n+      # The heuristics in the tool ran out of patches to try next;\n+      # let the user handle it from here.+\n+      error \"build failed for ${TEST_ID}, could not find new candidate\"\n+    fi\n+    msg 1 \"using ${FIRST_MID}, between ${LATER_THAN} and ${EARLIER_THAN}\"\n+  fi\n+\n+  # Return with a valid LATER value or a new ID to try in FIRST_MID.\n+}\n+\n+# Get the number of a patch within the range.  It's not actually the\n+# middle one, but the one that might minimize the number of checks.\n+\n+get_mid_special() {\n+  LOW=$1\n+  HIGH=$2\n+\n+  let DIFF=HIGH-LOW\n+  M=1\n+  POWER2=1\n+  while\n+      [ $POWER2 -lt $DIFF ]\n+  do\n+      let M=POWER2\n+      let POWER2=POWER2*2\n+  done\n+  let MID=LOW+M\n+}\n+\n+# Get the number of the patch in the middle of the range.\n+\n+get_mid () {\n+  LOW=$1\n+  HIGH=$2\n+\n+  let DIFF=HIGH-LOW\n+  let M=DIFF/2\n+  let MID=LOW+M\n+}\n+\n+# Perform a binary search on patch identifiers within the range\n+# specified by the arguments.\n+\n+search_patches () {\n+  LOW=$1\n+  HIGH=$2\n+\n+  # Get an identifier within the range.  The user can override the\n+  # initial mid patch if it is known to have problems, e.g., if a\n+  # build fails for that patch.\n+\n+  if [ ${FIRST_MID} -ne 0 ]; then\n+    MID=${FIRST_MID}\n+    FIRST_MID=0\n+    let DIFF=HIGH-LOW\n+  else\n+    get_mid $LOW $HIGH\n+  fi\n+\n+  while [ ${DIFF} -gt 1 ]; do\n+    TEST_ID=\"${MID}\"\n+\n+    # Test it.\n+\n+    process_patch ${TEST_ID}\n+\n+    # FIRST_MID being set is a signal that the build failed and we\n+    # should start over again.\n+    \n+    test ${FIRST_MID} -ne 0 && return\n+\n+    # Narrow the search based on the outcome of testing TEST_ID.\n+\n+    if [ ${LATER} -eq 1 ]; then\n+      msg 1 \"search patches later than ${TEST_ID}\"\n+      LATER_THAN=${TEST_ID}\n+      let LOW=MID\n+    else\n+      msg 1 \"search patches earlier than ${TEST_ID}\"\n+      EARLIER_THAN=${TEST_ID}\n+      let HIGH=MID\n+    fi\n+\n+    get_mid $LOW $HIGH\n+  done\n+}\n+\n+########################################################################\n+# Main program (so to speak)\n+########################################################################\n+\n+# The error function uses this.\n+\n+VALID_RANGE=0\n+\n+# Process the configuration file.\n+\n+if [ $# != 1 ]; then\n+  echo Usage: $0 config_file\n+  exit 1\n+fi\n+\n+CONFIG=${1}\n+if [ ! -f ${CONFIG} ]; then\n+  error \"configuration file ${CONFIG} does not exist\"\n+fi\n+\n+# OK, the config file exists.  Source it, make sure required parameters\n+# are defined and their files exist, and give default values to optional\n+# parameters.\n+\n+. ${CONFIG}\n+\n+test \"x${REG_UPDATE}\" = \"x\" && error \"REG_UPDATE is not defined\"\n+test \"x${REG_BUILD}\" = \"x\" && error \"REG_BUILD is not defined\"\n+test \"x${REG_TEST}\" = \"x\" && error \"REG_TEST is not defined\"\n+test -x ${REG_TEST} || error \"REG_TEST is not an executable file\"\n+test \"x${SKIP_LOW}\" = \"x\" && SKIP_LOW=0\n+test \"x${SKIP_HIGH}\" = \"x\" && SKIP_HIGH=0\n+test \"x${VERBOSITY}\" = \"x\" && VERBOSITY=0\n+test \"x${REG_FINISH}\" = \"x\" && REG_FINISH=true\n+test \"x${REG_REPORT}\" = \"x\" && REG_REPORT=true\n+\n+msg 2 \"LOW_PATCH  = ${LOW_PATCH}\"\n+msg 2 \"HIGH_PATCH = ${HIGH_PATCH}\"\n+msg 2 \"REG_UPDATE = ${REG_UPDATE}\"\n+msg 2 \"REG_BUILD  = ${REG_BUILD}\"\n+msg 2 \"REG_TEST   = ${REG_TEST}\"\n+msg 2 \"REG_NEWMID = ${REG_NEWMID}\"\n+msg 2 \"SKIP_LOW   = ${SKIP_LOW}\"\n+msg 2 \"SKIP_HIGH  = ${SKIP_HIGH}\"\n+msg 2 \"FIRST_MID  = ${FIRST_MID}\"\n+msg 2 \"VERBOSITY  = ${VERBOSITY}\"\n+\n+# If REG_NEWMID was defined, assume that we're skipping known failures\n+# and adding to the list for new failures.  If the list of failures\n+# doesn't exist, create it.  We use a different flag, SKIP_FAILURES,\n+# to make it easier to separate the flag from REG_NEWMID if we want\n+# to change the usage later.\n+\n+if [ \"x${REG_NEWMID}\" != \"x\" ]; then\n+  touch ${REG_FAILLIST}\n+  SKIP_FAILURES=1\n+else\n+  SKIP_FAILURES=0\n+fi\n+\n+# If FIRST_MID was defined, make sure it's in the range.\n+\n+if [ \"x${FIRST_MID}\" != \"x\" ]; then\n+  test ${FIRST_MID} -le ${LOW_PATCH}  && \\\n+    error \"FIRST_MID id is lower than LOW_PATCH\"\n+  test ${FIRST_MID} -ge ${HIGH_PATCH} && \\\n+    error \"FIRST_MID is higher than HIGH_PATCH\"\n+else\n+  FIRST_MID=0\n+fi \n+\n+# Keep track of the bounds of the range where the test behavior changes.\n+\n+LATER_THAN=${LOW_PATCH}\n+EARLIER_THAN=${HIGH_PATCH}\n+LATER=1\n+\n+msg 1 \"LATER_THAN   = ${LATER_THAN}\"\n+msg 1 \"EARLIER_THAN = ${EARLIER_THAN}\"\n+\n+# Verify that the range isn't backwards.\n+\n+test ${LOW_PATCH} -lt ${HIGH_PATCH} || \\\n+  error \"patch identifier range is backwards\"\n+\n+# Verify that the first and last patches in the range get the results we\n+# expect.  If not, quit, because any of several things could be wrong.\n+\n+if [ ${SKIP_HIGH} -eq 0 ]; then\n+  process_patch ${EARLIER_THAN}\n+  test ${LATER} -ne 0 && \\\n+    error \"unexpected result for high patch ${EARLIER_THAN}\"\n+  msg 1 \"result for high patch ${EARLIER_THAN} is as expected\"\n+fi\n+\n+if [ ${SKIP_LOW} -eq 0 ]; then\n+  process_patch ${LATER_THAN}\n+  test ${LATER} -ne 1 && \\\n+    error \"unexpected result for low patch ${LATER_THAN}\"\n+  msg 1 \"result for low patch ${LATER_THAN} is as expected\"\n+fi\n+\n+# Search within the range, now that we know that the end points are valid.\n+# If the build failed then FIRST_MID is set to a new patch to try.\n+\n+VALID_RANGE=1\n+while true; do\n+  search_patches ${LATER_THAN} ${EARLIER_THAN}\n+  test ${FIRST_MID} -eq 0 && break\n+done\n+\n+# Report where the test behavior changes.\n+\n+echo \"Test result changes with id ${EARLIER_THAN}\"\n+${REG_REPORT} ${EARLIER_THAN}\n+\n+# Invoke the optional script to verify the result and report additional\n+# information about changes between the two patches.\n+\n+${REG_FINISH} ${LATER_THAN} ${EARLIER_THAN}"}, {"sha": "2a6b57362baac612fb99e540efbce4095ac01be9", "filename": "contrib/reghunt/bin/reg-newmid", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88396c0721010f49c8f2013c91916a8f30c1162/contrib%2Freghunt%2Fbin%2Freg-newmid", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88396c0721010f49c8f2013c91916a8f30c1162/contrib%2Freghunt%2Fbin%2Freg-newmid", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Freghunt%2Fbin%2Freg-newmid?ref=e88396c0721010f49c8f2013c91916a8f30c1162", "patch": "@@ -0,0 +1,86 @@\n+#! /bin/sh\n+\n+# The build failed for and identifier in the range bwetween LOW and HIGH.\n+# Find a new patch id to try within that range.\n+#\n+# It's meant to be easy to modify the heuristics used to select the\n+# next patch to try by adding to or rearranging the patches listed in\n+# MIDLIST.  Known failures are recorded in ${REG_FAILLIST}.\n+#\n+# A nifty improvement would be to record known ranges of failure as\n+# ranges, and then pick revisions just before and just after the range.\n+#\n+# Copyright (C) 2006 Free Software Foundation, Inc.\n+#\n+# This file is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# For a copy of the GNU General Public License, write the the\n+# Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+# Boston, MA 02111-1301, USA.\n+\n+LOW=$1\n+HIGH=$2\n+\n+MIDLIST=\"\"\n+\n+let MID01=LOW+LOW+LOW+LOW+LOW+LOW+LOW+LOW+LOW+LOW+LOW+HIGH\n+let MID01=MID01/12\n+let MID02=LOW+LOW+LOW+LOW+LOW+LOW+LOW+LOW+LOW+LOW+HIGH+HIGH\n+let MID02=MID02/12\n+let MID03=LOW+LOW+LOW+LOW+LOW+LOW+LOW+LOW+LOW+HIGH+HIGH+HIGH\n+let MID03=MID03/12\n+let MID04=LOW+LOW+LOW+LOW+LOW+LOW+LOW+LOW+HIGH+HIGH+HIGH+HIGH\n+let MID04=MID04/12\n+let MID05=LOW+LOW+LOW+LOW+LOW+LOW+LOW+HIGH+HIGH+HIGH+HIGH+HIGH\n+let MID05=MID05/12\n+let MID06=LOW+LOW+LOW+LOW+LOW+LOW+HIGH+HIGH+HIGH+HIGH+HIGH+HIGH\n+let MID06=MID06/12\n+let MID07=LOW+LOW+LOW+LOW+LOW+HIGH+HIGH+HIGH+HIGH+HIGH+HIGH+HIGH\n+let MID07=MID07/12\n+let MID08=LOW+LOW+LOW+LOW+HIGH+HIGH+HIGH+HIGH+HIGH+HIGH+HIGH+HIGH\n+let MID08=MID08/12\n+let MID09=LOW+LOW+LOW+HIGH+HIGH+HIGH+HIGH+HIGH+HIGH+HIGH+HIGH+HIGH\n+let MID09=MID09/12\n+let MID10=LOW+LOW+HIGH+HIGH+HIGH+HIGH+HIGH+HIGH+HIGH+HIGH+HIGH+HIGH\n+let MID10=MID10/12\n+let MID11=LOW+HIGH+HIGH+HIGH+HIGH+HIGH+HIGH+HIGH+HIGH+HIGH+HIGH+HIGH\n+let MID11=MID11/12\n+\n+# Look in this order; MID has already been done:\n+#\n+#  LOW--10---7---6---3---2---MID---1---4---5---8---9---HIGH\n+\n+MIDLIST=\"${MIDLIST} ${MID07}\"\n+MIDLIST=\"${MIDLIST} ${MID05}\"\n+MIDLIST=\"${MIDLIST} ${MID04}\"\n+MIDLIST=\"${MIDLIST} ${MID08}\"\n+MIDLIST=\"${MIDLIST} ${MID09}\"\n+MIDLIST=\"${MIDLIST} ${MID03}\"\n+MIDLIST=\"${MIDLIST} ${MID02}\"\n+MIDLIST=\"${MIDLIST} ${MID10}\"\n+MIDLIST=\"${MIDLIST} ${MID11}\"\n+MIDLIST=\"${MIDLIST} ${MID01}\"\n+\n+for MID in ${MIDLIST}\n+do\n+  # Skip this if it's the low endpoint.\n+  if [ ${MID} != ${LOW} ]; then\n+    # Is this patch already known to fail?\n+    ${REG_CHECKFAIL} ${MID}\n+    if [ $? -ne 0 ]; then\n+      echo ${MID}\n+      exit 0\n+    fi\n+  fi\n+done\n+\n+echo 0\n+exit 1"}, {"sha": "622a6546150cf57036b4ff6769b86855aaa0f4da", "filename": "contrib/reghunt/bin/reg-test", "status": "added", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88396c0721010f49c8f2013c91916a8f30c1162/contrib%2Freghunt%2Fbin%2Freg-test", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88396c0721010f49c8f2013c91916a8f30c1162/contrib%2Freghunt%2Fbin%2Freg-test", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Freghunt%2Fbin%2Freg-test?ref=e88396c0721010f49c8f2013c91916a8f30c1162", "patch": "@@ -0,0 +1,152 @@\n+#! /bin/bash\n+\n+#set -x\n+\n+########################################################################\n+#\n+# File:    reg-test\n+# Author:  Janis Johnson\n+# Date:    2005/09/08\n+#\n+# For each of a list of patches, invoke separate tools to update\n+# sources, do a build, and run one or more tests. \n+#\n+# Define these in a file whose name is the argument to this script:\n+#   REG_IDLIST: List of patch identifiers.\n+#   REG_UPDATE: Pathname of script to update the source tree.\n+#   REG_BUILD:  Pathname of script to build enough of the product to run\n+#               the test.\n+#   REG_TEST:   Pathname of script to run one or more tests.\n+# Optional:\n+#   VERBOSITY:  Default is 0, to print only errors and final message.\n+#   DATE_IN_MSG If set to anything but 0, include the time and date in\n+#               messages\n+#   REG_STOP    Pathname of a file whose existence says to quit; default\n+#               is STOP in the current directory.\n+#\n+#\n+# Copyright (c) 2002, 2003, 2005 Free Software Foundation, Inc.\n+#\n+# This file is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# For a copy of the GNU General Public License, write the the\n+# Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+# Boston, MA 02111-1301, USA.\n+#\n+########################################################################\n+\n+########################################################################\n+# Functions\n+########################################################################\n+\n+# Issue a message if its verbosity level is high enough.\n+\n+msg() {\n+  test ${1} -gt ${VERBOSITY}  && return\n+\n+  if [ \"x${DATE_IN_MSG}\" = \"x\" ]; then\n+    echo \"${2}\"\n+  else\n+    echo \"`${DATE}`  ${2}\"\n+  fi\n+}\n+\n+# Issue an error message and exit with a nonzero status.\n+\n+error() {\n+  msg 0 \"error: ${1}\"\n+  exit 1\n+}\n+\n+# Build the components to test using sources as of a particular patch\n+# and run a test case.  Pass each of the scripts the patch identifier\n+# that we're testing; the first one needs it, the others can ignore it\n+# if they want.\n+\n+process_patch () {\n+  TEST_ID=${1}\n+\n+  ${REG_UPDATE} ${TEST_ID}\n+  if [ $? -ne 0 ]; then\n+    msg 0 \"source update failed for id ${TEST_ID}\"\n+    return\n+  fi\n+  ${REG_BUILD} ${TEST_ID}\n+  if [ $? -ne 0 ]; then\n+    msg 0 \"build failed for id ${TEST_ID}\"\n+    return\n+  fi\n+  ${REG_TEST} \"${TEST_ID}\"\n+}\n+ \n+########################################################################\n+# Main program (so to speak)\n+########################################################################\n+\n+# If DATE isn't defined, use the default date command; the configuration\n+# file can override this.\n+\n+if [ \"x${DATE}\" = \"x\" ]; then\n+  DATE=date\n+fi\n+\n+# Process the configuration file.\n+\n+if [ $# -ne 1 ]; then\n+  echo Usage: $0 config_file\n+  exit 1\n+fi\n+\n+CONFIG=${1}\n+if [ ! -f ${CONFIG} ]; then\n+  error \"configuration file ${CONFIG} does not exist\"\n+fi\n+\n+# OK, the config file exists.  Source it, make sure required parameters\n+# are defined and their files exist, and give default values to optional\n+# parameters.\n+\n+. ${CONFIG}\n+\n+test \"x${REG_IDLIST}\" = \"x\" && error \"REG_IDLIST is not defined\"\n+test \"x${REG_UPDATE}\" = \"x\" && error \"REG_UPDATE is not defined\"\n+test \"x${REG_BUILD}\" = \"x\" && error \"REG_BUILD is not defined\"\n+test \"x${REG_TEST}\" = \"x\" && error \"REG_TEST is not defined\"\n+test -x ${REG_TEST} || error \"REG_TEST is not an executable file\"\n+test \"x${VERBOSITY}\" = \"x\" && VERBOSITY=0\n+test \"x${REG_STOP}\" = \"x\" && REG_STOP=\"STOP\"\n+ \n+msg 2 \"REG_IDLIST = ${REG_IDLIST}\"\n+msg 2 \"REG_UPDATE = ${REG_UPDATE}\"\n+msg 2 \"REG_BUILD  = ${REG_BUILD}\"\n+msg 2 \"REG_TEST   = ${REG_TEST}\"\n+msg 2 \"VERBOSITY  = ${VERBOSITY}\"\n+\n+# Process each patch identifier in the list.\n+\n+for TEST_ID in $REG_IDLIST; do\n+\n+  # If a file called STOP appears, stop; this allows a clean way to\n+  # interrupt a search.\n+\n+  if [ -f ${REG_STOP} ]; then\n+    msg 0 \"STOP file detected\"\n+    rm -f ${REG_STOP}\n+    exit 1\n+  fi\n+\n+  # Process the new patch.\n+\n+  msg 2 \"process id ${TEST_ID}\"\n+  process_patch ${TEST_ID}\n+done\n+\n+msg 1 \"done\""}]}