{"sha": "d7e0324f1a1134da2491d5d6af57c47bca397753", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDdlMDMyNGYxYTExMzRkYTI0OTFkNWQ2YWY1N2M0N2JjYTM5Nzc1Mw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-08-31T12:31:20Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-08-31T12:31:20Z"}, "message": "(emit_reload_insn): Emit RELOAD_OTHER output reloads last.\n\nFrom-SVN: r10295", "tree": {"sha": "f3d9857279dd7671baefac44878da59d009ca3e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3d9857279dd7671baefac44878da59d009ca3e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7e0324f1a1134da2491d5d6af57c47bca397753", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7e0324f1a1134da2491d5d6af57c47bca397753", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7e0324f1a1134da2491d5d6af57c47bca397753", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7e0324f1a1134da2491d5d6af57c47bca397753/comments", "author": null, "committer": null, "parents": [{"sha": "74347d76f06ff17e4459c3bf73223f2ba630db5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74347d76f06ff17e4459c3bf73223f2ba630db5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74347d76f06ff17e4459c3bf73223f2ba630db5b"}], "stats": {"total": 18, "additions": 15, "deletions": 3}, "files": [{"sha": "9f437b6bf92ed5997c9d6a178c11a020f46dfe8a", "filename": "gcc/reload1.c", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7e0324f1a1134da2491d5d6af57c47bca397753/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7e0324f1a1134da2491d5d6af57c47bca397753/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=d7e0324f1a1134da2491d5d6af57c47bca397753", "patch": "@@ -5650,6 +5650,7 @@ emit_reload_insns (insn)\n   rtx output_address_reload_insns[MAX_RECOG_OPERANDS];\n   rtx operand_reload_insns = 0;\n   rtx other_operand_reload_insns = 0;\n+  rtx other_output_reload_insns = 0;\n   rtx following_insn = NEXT_INSN (insn);\n   rtx before_insn = insn;\n   int special;\n@@ -6288,7 +6289,10 @@ emit_reload_insns (insn)\n \t  if (GET_CODE (insn) == JUMP_INSN)\n \t    abort ();\n \n-\t  push_to_sequence (output_reload_insns[reload_opnum[j]]);\n+\t  if (reload_when_needed[j] == RELOAD_OTHER)\n+\t    push_to_sequence (other_output_reload_insns);\n+\t  else\n+\t    push_to_sequence (output_reload_insns[reload_opnum[j]]);\n \n \t  /* Determine the mode to reload in.\n \t     See comments above (for input reloading).  */\n@@ -6432,7 +6436,11 @@ emit_reload_insns (insn)\n \t\t  new_spill_reg_store[reload_spill_index[j]] = p;\n \t      }\n \n-\t  output_reload_insns[reload_opnum[j]] = get_insns ();\n+\t  if (reload_when_needed[j] == RELOAD_OTHER)\n+\t    other_output_reload_insns = get_insns ();\n+\t  else\n+\t    output_reload_insns[reload_opnum[j]] = get_insns ();\n+\n \t  end_sequence ();\n \t}\n     }\n@@ -6455,7 +6463,9 @@ emit_reload_insns (insn)\n      After the insn being reloaded, we write the following:\n \n      For each operand, any RELOAD_FOR_OUTPUT_ADDRESS reload followed by\n-     the RELOAD_FOR_OUTPUT reload for that operand.  */\n+     the RELOAD_FOR_OUTPUT reload for that operand.\n+\n+     Any RELOAD_OTHER output reloads.  */\n \n   emit_insns_before (other_input_address_reload_insns, before_insn);\n   emit_insns_before (other_input_reload_insns, before_insn);\n@@ -6475,6 +6485,8 @@ emit_reload_insns (insn)\n       emit_insns_before (output_reload_insns[j], following_insn);\n     }\n \n+  emit_insns_before (other_output_reload_insns, following_insn);\n+\n   /* Move death notes from INSN\n      to output-operand-address and output reload insns.  */\n #ifdef PRESERVE_DEATH_INFO_REGNO_P"}]}