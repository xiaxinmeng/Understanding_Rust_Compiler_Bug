{"sha": "c7a9655be60cb4f224d1e5906bfe8ae227b5a3a0", "node_id": "C_kwDOANBUbNoAKGM3YTk2NTViZTYwY2I0ZjIyNGQxZTU5MDZiZmU4YWUyMjdiNWEzYTA", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2023-02-15T10:17:40Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2023-02-15T10:18:31Z"}, "message": "libgomp: Fix 'target enter data' with always pointer\n\nAs GOMP_MAP_ALWAYS_POINTER operates on the previous map item, ensure that\nwith 'target enter data' both are passed together to gomp_map_vars_internal.\n\nlibgomp/ChangeLog:\n\n\t* target.c (gomp_map_vars_internal): Add 'i > 0' before doing a\n\tkind check.\n\t(GOMP_target_enter_exit_data): If the next map item is\n\tGOMP_MAP_ALWAYS_POINTER map it together with the current item.\n\t* testsuite/libgomp.fortran/target-enter-data-3.f90: New test.", "tree": {"sha": "2352ef12c4be99d6147b9404b4abddfe9a3a3a76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2352ef12c4be99d6147b9404b4abddfe9a3a3a76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7a9655be60cb4f224d1e5906bfe8ae227b5a3a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7a9655be60cb4f224d1e5906bfe8ae227b5a3a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7a9655be60cb4f224d1e5906bfe8ae227b5a3a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7a9655be60cb4f224d1e5906bfe8ae227b5a3a0/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f71b82596e992eb6e53fe9bbd70a4b52bc908e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f71b82596e992eb6e53fe9bbd70a4b52bc908e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f71b82596e992eb6e53fe9bbd70a4b52bc908e8"}], "stats": {"total": 32, "additions": 29, "deletions": 3}, "files": [{"sha": "b4ea2c559c8247613a69114b18bd4cb6b82f75a8", "filename": "libgomp/target.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a9655be60cb4f224d1e5906bfe8ae227b5a3a0/libgomp%2Ftarget.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a9655be60cb4f224d1e5906bfe8ae227b5a3a0/libgomp%2Ftarget.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftarget.c?ref=c7a9655be60cb4f224d1e5906bfe8ae227b5a3a0", "patch": "@@ -1480,8 +1480,9 @@ gomp_map_vars_internal (struct gomp_device_descr *devicep,\n \t\t    gomp_mutex_unlock (&devicep->lock);\n \t\t    gomp_fatal (\"always pointer not mapped\");\n \t\t  }\n-\t\tif ((get_kind (short_mapkind, kinds, i - 1) & typemask)\n-\t\t    != GOMP_MAP_ALWAYS_POINTER)\n+\t\tif (i > 0\n+\t\t    && ((get_kind (short_mapkind, kinds, i - 1) & typemask)\n+\t\t\t!= GOMP_MAP_ALWAYS_POINTER))\n \t\t  cur_node.tgt_offset = gomp_map_val (tgt, hostaddrs, i - 1);\n \t\tif (cur_node.tgt_offset)\n \t\t  cur_node.tgt_offset -= sizes[i];\n@@ -4085,7 +4086,10 @@ GOMP_target_enter_exit_data (int device, size_t mapnum, void **hostaddrs,\n \t\t\t GOMP_MAP_VARS_ENTER_DATA);\n \t  i += j - i - 1;\n \t}\n-      else if (i + 1 < mapnum && (kinds[i + 1] & 0xff) == GOMP_MAP_ATTACH)\n+      else if (i + 1 < mapnum\n+\t       && ((kinds[i + 1] & 0xff) == GOMP_MAP_ATTACH\n+\t\t   || ((kinds[i + 1] & 0xff) == GOMP_MAP_ALWAYS_POINTER\n+\t\t       && (kinds[i] & 0xff) != GOMP_MAP_ALWAYS_POINTER)))\n \t{\n \t  /* An attach operation must be processed together with the mapped\n \t     base-pointer list item.  */"}, {"sha": "5d97566c66ca4b6d91e6a6baec68a2fa6d830d1a", "filename": "libgomp/testsuite/libgomp.fortran/target-enter-data-3.f90", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a9655be60cb4f224d1e5906bfe8ae227b5a3a0/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ftarget-enter-data-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a9655be60cb4f224d1e5906bfe8ae227b5a3a0/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ftarget-enter-data-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ftarget-enter-data-3.f90?ref=c7a9655be60cb4f224d1e5906bfe8ae227b5a3a0", "patch": "@@ -0,0 +1,22 @@\n+implicit none\n+type t\n+  integer :: dummy\n+  integer, pointer :: p1(:), p2(:)\n+  integer :: dummy2\n+end type t\n+type(t) :: var\n+integer :: i\n+allocate(var%p1(5),var%p2(2:4))\n+var%p1 = [22,53,28,6,4]\n+var%p2 = [46,679,54]\n+\n+!$omp target enter data map(to:var%p1, var%p2)\n+!$omp target\n+  if (.not.associated(var%p1).or.lbound(var%p1,1)/=1.or.ubound(var%p1,1)/=5) stop 1\n+  if (.not.associated(var%p2).or.lbound(var%p2,1)/=2.or.ubound(var%p2,1)/=4) stop 2\n+  if (any (var%p1 /= [22,53,28,6,4])) stop 3\n+  if (any (var%p2 /= [46,679,54])) stop 4\n+!$omp end target\n+!!$omp target exit data map(from:var%p1, var%p2)\n+end\n+"}]}