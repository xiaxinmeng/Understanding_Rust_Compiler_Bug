{"sha": "72db90a9fc84a29541b5adbb7ca90e6056973fca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzJkYjkwYTlmYzg0YTI5NTQxYjVhZGJiN2NhOTBlNjA1Njk3M2ZjYQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-12-19T22:21:01Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-12-19T22:21:01Z"}, "message": "compiler: Add temporaries required in cases of interface conversion.\n\nFrom-SVN: r218979", "tree": {"sha": "00c842dfef5a4a575fdaf4e5e6fc4c6ac81ca328", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/00c842dfef5a4a575fdaf4e5e6fc4c6ac81ca328"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72db90a9fc84a29541b5adbb7ca90e6056973fca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72db90a9fc84a29541b5adbb7ca90e6056973fca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72db90a9fc84a29541b5adbb7ca90e6056973fca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72db90a9fc84a29541b5adbb7ca90e6056973fca/comments", "author": null, "committer": null, "parents": [{"sha": "e8af59bc73dc39f8932a812bf1d265281b2dd7d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8af59bc73dc39f8932a812bf1d265281b2dd7d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8af59bc73dc39f8932a812bf1d265281b2dd7d0"}], "stats": {"total": 61, "additions": 45, "deletions": 16}, "files": [{"sha": "ccb472bed30d89cb7324472b7c523ac09dba6408", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 41, "deletions": 15, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72db90a9fc84a29541b5adbb7ca90e6056973fca/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72db90a9fc84a29541b5adbb7ca90e6056973fca/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=72db90a9fc84a29541b5adbb7ca90e6056973fca", "patch": "@@ -8786,6 +8786,10 @@ Call_expression::do_flatten(Gogo* gogo, Named_object*,\n   if (this->classification() == EXPRESSION_ERROR)\n     return this;\n \n+  if (this->is_flattened_)\n+    return this;\n+  this->is_flattened_ = true;\n+\n   // Add temporary variables for all arguments that require type\n   // conversion.\n   Function_type* fntype = this->get_function_type();\n@@ -10590,33 +10594,41 @@ Map_index_expression::do_traverse(Traverse* traverse)\n // recomputation.\n \n Expression*\n-Map_index_expression::do_flatten(Gogo*, Named_object*,\n+Map_index_expression::do_flatten(Gogo* gogo, Named_object*,\n \t\t\t\t Statement_inserter* inserter)\n {\n+  Location loc = this->location();\n   Map_type* mt = this->get_map_type();\n-  if (this->index_->type() != mt->key_type())\n-    this->index_ = Expression::make_cast(mt->key_type(), this->index_,\n-                                         this->location());\n+  if (!Type::are_identical(mt->key_type(), this->index_->type(), false, NULL))\n+    {\n+      if (this->index_->type()->interface_type() != NULL\n+\t  && !this->index_->is_variable())\n+\t{\n+\t  Temporary_statement* temp =\n+\t    Statement::make_temporary(NULL, this->index_, loc);\n+\t  inserter->insert(temp);\n+\t  this->index_ = Expression::make_temporary_reference(temp, loc);\n+\t}\n+      this->index_ = Expression::convert_for_assignment(gogo, mt->key_type(),\n+\t\t\t\t\t\t\tthis->index_, loc);\n+    }\n \n   if (!this->index_->is_variable())\n     {\n       Temporary_statement* temp = Statement::make_temporary(NULL, this->index_,\n-                                                            this->location());\n+                                                            loc);\n       inserter->insert(temp);\n-      this->index_ = Expression::make_temporary_reference(temp,\n-                                                          this->location());\n+      this->index_ = Expression::make_temporary_reference(temp, loc);\n     }\n \n   if (this->value_pointer_ == NULL)\n     this->get_value_pointer(this->is_lvalue_);\n   if (!this->value_pointer_->is_variable())\n     {\n       Temporary_statement* temp =\n-          Statement::make_temporary(NULL, this->value_pointer_,\n-                                    this->location());\n+\tStatement::make_temporary(NULL, this->value_pointer_, loc);\n       inserter->insert(temp);\n-      this->value_pointer_ =\n-          Expression::make_temporary_reference(temp, this->location());\n+      this->value_pointer_ = Expression::make_temporary_reference(temp, loc);\n     }\n \n   return this;\n@@ -12540,12 +12552,26 @@ Map_construction_expression::do_flatten(Gogo* gogo, Named_object*,\n            ++pv, ++i)\n         {\n           Expression_list* key_value_pair = new Expression_list();\n-          Expression* key =\n-              Expression::convert_for_assignment(gogo, key_type, *pv, loc);\n+          Expression* key = *pv;\n+\t  if (key->type()->interface_type() != NULL && !key->is_variable())\n+\t    {\n+\t      Temporary_statement* temp =\n+\t\tStatement::make_temporary(NULL, key, loc);\n+\t      inserter->insert(temp);\n+\t      key = Expression::make_temporary_reference(temp, loc);\n+\t    }\n+\t  key = Expression::convert_for_assignment(gogo, key_type, key, loc);\n \n           ++pv;\n-          Expression* val =\n-              Expression::convert_for_assignment(gogo, val_type, *pv, loc);\n+          Expression* val = *pv;\n+\t  if (val->type()->interface_type() != NULL && !val->is_variable())\n+\t    {\n+\t      Temporary_statement* temp =\n+\t\tStatement::make_temporary(NULL, val, loc);\n+\t      inserter->insert(temp);\n+\t      val = Expression::make_temporary_reference(temp, loc);\n+\t    }\n+\t  val = Expression::convert_for_assignment(gogo, val_type, val, loc);\n \n           key_value_pair->push_back(key);\n           key_value_pair->push_back(val);"}, {"sha": "a2346c8c63eea791797919f6ad47ccd6bfbd8b0e", "filename": "gcc/go/gofrontend/expressions.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72db90a9fc84a29541b5adbb7ca90e6056973fca/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72db90a9fc84a29541b5adbb7ca90e6056973fca/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.h?ref=72db90a9fc84a29541b5adbb7ca90e6056973fca", "patch": "@@ -1632,7 +1632,8 @@ class Call_expression : public Expression\n       fn_(fn), args_(args), type_(NULL), results_(NULL), call_(NULL),\n       call_temp_(NULL), expected_result_count_(0), is_varargs_(is_varargs),\n       varargs_are_lowered_(false), types_are_determined_(false),\n-      is_deferred_(false), issued_error_(false), is_multi_value_arg_(false)\n+      is_deferred_(false), issued_error_(false), is_multi_value_arg_(false),\n+      is_flattened_(false)\n   { }\n \n   // The function to call.\n@@ -1817,6 +1818,8 @@ class Call_expression : public Expression\n   bool issued_error_;\n   // True if this call is used as an argument that returns multiple results.\n   bool is_multi_value_arg_;\n+  // True if this expression has already been flattened.\n+  bool is_flattened_;\n };\n \n // An expression which represents a pointer to a function."}]}