{"sha": "8750f9cdec153095cc47c41b887bc86fda4a0e3e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODc1MGY5Y2RlYzE1MzA5NWNjNDdjNDFiODg3YmM4NmZkYTRhMGUzZQ==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jblomqvi@cc.hut.fi", "date": "2004-06-22T00:43:55Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2004-06-22T00:43:55Z"}, "message": "re PR fortran/15750 (IOLENGTH form of INQUIRE statement not implemented)\n\n\tPR fortran/15750\n\t* io.c (gfc_match_inquire): Bugfix for iolength related stuff.\n\t(gfc_resolve_inquire): Resolve the iolength tag.  Return\n\tSUCCESS at end of function if no failure has occured.\n\t* resolve.c (resolve_code): Resolve if iolength is encountered.\n\t* trans-io.c: (ioparm_iolength, iocall_iolength,\n\tiocall_iolength_done): New variables.\n\t(last_dt): Add IOLENGTH.\n\t(gfc_build_io_library_fndecls ): Set iolength related variables.\n\t(gfc_trans_iolength): Implement.\n\t(gfc_trans_dt_end): Treat iolength as a third form of data transfer.\nlibgfortran/\n\tPR fortran/15750\n\t* inquire.c (st_inquire): Add comment\n\t* io.h (st_parameter): Add iolength.\n\t(st_iolength, st_iolength_done): Declare.\n\t* transfer.c (iolength_transfer, iolength_transfer_init,\n\tst_iolength, st_iolength_done): New functions.\ntestsuite/\n\t* gfortran.fortran-torture/execute/iolength_1.f90: New test.\n\t* gfortran.fortran-torture/execute/iolength_3.f90: New test.\n\nFrom-SVN: r83472", "tree": {"sha": "ceecaee98023a95b8e6865056ce0fa2cc4afb927", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ceecaee98023a95b8e6865056ce0fa2cc4afb927"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8750f9cdec153095cc47c41b887bc86fda4a0e3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8750f9cdec153095cc47c41b887bc86fda4a0e3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8750f9cdec153095cc47c41b887bc86fda4a0e3e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8750f9cdec153095cc47c41b887bc86fda4a0e3e/comments", "author": null, "committer": null, "parents": [{"sha": "88c499cce7487e1d4b40e8c7d568db22ba59d90e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88c499cce7487e1d4b40e8c7d568db22ba59d90e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88c499cce7487e1d4b40e8c7d568db22ba59d90e"}], "stats": {"total": 219, "additions": 203, "deletions": 16}, "files": [{"sha": "01147289fb47cfaf8cfb759f609d60758f660587", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8750f9cdec153095cc47c41b887bc86fda4a0e3e/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8750f9cdec153095cc47c41b887bc86fda4a0e3e/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=8750f9cdec153095cc47c41b887bc86fda4a0e3e", "patch": "@@ -1,3 +1,17 @@\n+2004-06-22  Janne Blomqvist  <jblomqvi@cc.hut.fi>\n+\n+\tPR fortran/15750\n+\t* io.c (gfc_match_inquire): Bugfix for iolength related stuff.\n+\t(gfc_resolve_inquire): Resolve the iolength tag.  Return\n+\tSUCCESS at end of function if no failure has occured.\n+\t* resolve.c (resolve_code): Resolve if iolength is encountered.\n+\t* trans-io.c: (ioparm_iolength, iocall_iolength,\n+\tiocall_iolength_done): New variables.\n+\t(last_dt): Add IOLENGTH.\n+\t(gfc_build_io_library_fndecls ): Set iolength related variables.\n+\t(gfc_trans_iolength): Implement.\n+\t(gfc_trans_dt_end): Treat iolength as a third form of data transfer.\n+\n 2004-06-21  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de\n \n \tPR fortran/15511"}, {"sha": "ee52c6932457135d6765eb554bcc054519a879c4", "filename": "gcc/fortran/io.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8750f9cdec153095cc47c41b887bc86fda4a0e3e/gcc%2Ffortran%2Fio.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8750f9cdec153095cc47c41b887bc86fda4a0e3e/gcc%2Ffortran%2Fio.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fio.c?ref=8750f9cdec153095cc47c41b887bc86fda4a0e3e", "patch": "@@ -2353,7 +2353,7 @@ gfc_match_inquire (void)\n \n       new_st.op = EXEC_IOLENGTH;\n       new_st.expr = inquire->iolength;\n-      gfc_free (inquire);\n+      new_st.ext.inquire = inquire;\n \n       if (gfc_pure (NULL))\n \t{\n@@ -2439,9 +2439,10 @@ gfc_resolve_inquire (gfc_inquire * inquire)\n   RESOLVE_TAG (&tag_readwrite, inquire->readwrite);\n   RESOLVE_TAG (&tag_s_delim, inquire->delim);\n   RESOLVE_TAG (&tag_s_pad, inquire->pad);\n+  RESOLVE_TAG (&tag_iolength, inquire->iolength);\n \n   if (gfc_reference_st_label (inquire->err, ST_LABEL_TARGET) == FAILURE)\n     return FAILURE;\n \n-  return FAILURE;\n+  return SUCCESS;\n }"}, {"sha": "03851f5ad5e0f5295204b3b26cdca25645ac0caf", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8750f9cdec153095cc47c41b887bc86fda4a0e3e/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8750f9cdec153095cc47c41b887bc86fda4a0e3e/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=8750f9cdec153095cc47c41b887bc86fda4a0e3e", "patch": "@@ -3452,7 +3452,6 @@ resolve_code (gfc_code * code, gfc_namespace * ns)\n \t{\n \tcase EXEC_NOP:\n \tcase EXEC_CYCLE:\n-\tcase EXEC_IOLENGTH:\n \tcase EXEC_PAUSE:\n \tcase EXEC_STOP:\n \tcase EXEC_EXIT:\n@@ -3619,6 +3618,14 @@ resolve_code (gfc_code * code, gfc_namespace * ns)\n \t  break;\n \n \tcase EXEC_INQUIRE:\n+\t  if (gfc_resolve_inquire (code->ext.inquire) == FAILURE)\n+\t      break;\n+\n+\t  resolve_branch (code->ext.inquire->err, code);\n+\t  break;\n+\n+\tcase EXEC_IOLENGTH:\n+\t  assert(code->ext.inquire != NULL);\n \t  if (gfc_resolve_inquire (code->ext.inquire) == FAILURE)\n \t    break;\n "}, {"sha": "3f4076fc557b34d9948ffcd9501e66ad1e04aa4a", "filename": "gcc/fortran/trans-io.c", "status": "modified", "additions": 76, "deletions": 13, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8750f9cdec153095cc47c41b887bc86fda4a0e3e/gcc%2Ffortran%2Ftrans-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8750f9cdec153095cc47c41b887bc86fda4a0e3e/gcc%2Ffortran%2Ftrans-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-io.c?ref=8750f9cdec153095cc47c41b887bc86fda4a0e3e", "patch": "@@ -59,6 +59,7 @@ static GTY(()) tree ioparm_nextrec;\n static GTY(()) tree ioparm_size;\n static GTY(()) tree ioparm_recl_in;\n static GTY(()) tree ioparm_recl_out;\n+static GTY(()) tree ioparm_iolength;\n static GTY(()) tree ioparm_file;\n static GTY(()) tree ioparm_file_len;\n static GTY(()) tree ioparm_status;\n@@ -124,6 +125,8 @@ static GTY(()) tree iocall_x_complex;\n static GTY(()) tree iocall_open;\n static GTY(()) tree iocall_close;\n static GTY(()) tree iocall_inquire;\n+static GTY(()) tree iocall_iolength;\n+static GTY(()) tree iocall_iolength_done;\n static GTY(()) tree iocall_rewind;\n static GTY(()) tree iocall_backspace;\n static GTY(()) tree iocall_endfile;\n@@ -136,7 +139,7 @@ static GTY(()) tree iocall_set_nml_val_log;\n /* Variable for keeping track of what the last data transfer statement\n    was.  Used for deciding which subroutine to call when the data\n    transfer is complete. */\n-static enum { READ, WRITE } last_dt;\n+static enum { READ, WRITE, IOLENGTH } last_dt;\n \n #define ADD_FIELD(name, type)\t\t\t\t\t\t\\\n   ioparm_ ## name = gfc_add_field_to_struct\t\t\t\t\\\n@@ -187,6 +190,8 @@ gfc_build_io_library_fndecls (void)\n   ADD_FIELD (recl_in, gfc_pint4_type_node);\n   ADD_FIELD (recl_out, gfc_pint4_type_node);\n \n+  ADD_FIELD (iolength, gfc_pint4_type_node);\n+\n   ADD_STRING (file);\n   ADD_STRING (status);\n \n@@ -282,6 +287,10 @@ gfc_build_io_library_fndecls (void)\n     gfc_build_library_function_decl (get_identifier (PREFIX(\"st_inquire\")),\n \t\t\t\t     gfc_int4_type_node, 0);\n \n+  iocall_iolength =\n+    gfc_build_library_function_decl(get_identifier (PREFIX(\"st_iolength\")),\n+\t\t\t\t    void_type_node, 0);\n+\n   iocall_rewind =\n     gfc_build_library_function_decl (get_identifier (PREFIX(\"st_rewind\")),\n \t\t\t\t     gfc_int4_type_node, 0);\n@@ -302,6 +311,11 @@ gfc_build_io_library_fndecls (void)\n   iocall_write_done =\n     gfc_build_library_function_decl (get_identifier (PREFIX(\"st_write_done\")),\n \t\t\t\t     gfc_int4_type_node, 0);\n+\n+  iocall_iolength_done =\n+    gfc_build_library_function_decl (get_identifier (PREFIX(\"st_iolength_done\")),\n+\t\t\t\t     gfc_int4_type_node, 0);\n+\n   iocall_set_nml_val_int =\n     gfc_build_library_function_decl (get_identifier (PREFIX(\"st_set_nml_var_int\")),\n                                      void_type_node, 4,\n@@ -793,16 +807,6 @@ gfc_trans_inquire (gfc_code * code)\n }\n \n \n-/* Translate the IOLENGTH form of an INQUIRE statement.  We treat\n-   this as a third sort of data transfer statement, except that\n-   lengths are summed instead of actually transfering any data.  */\n-\n-tree\n-gfc_trans_iolength (gfc_code * c ATTRIBUTE_UNUSED)\n-{\n-  gfc_todo_error (\"IOLENGTH statement\");\n-}\n-\n static gfc_expr *\n gfc_new_nml_name_expr (char * name)\n {\n@@ -858,6 +862,8 @@ build_dt (tree * function, gfc_code * code)\n   set_error_locus (&block, &code->loc);\n   dt = code->ext.dt;\n \n+  assert (dt != NULL);\n+\n   if (dt->io_unit)\n     {\n       if (dt->io_unit->ts.type == BT_CHARACTER)\n@@ -973,6 +979,41 @@ build_dt (tree * function, gfc_code * code)\n }\n \n \n+/* Translate the IOLENGTH form of an INQUIRE statement.  We treat\n+   this as a third sort of data transfer statement, except that\n+   lengths are summed instead of actually transfering any data.  */\n+\n+tree\n+gfc_trans_iolength (gfc_code * code)\n+{\n+  stmtblock_t block;\n+  gfc_inquire *inq;\n+  tree dt;\n+\n+  gfc_init_block (&block);\n+\n+  set_error_locus (&block, &code->loc);\n+\n+  inq = code->ext.inquire;\n+\n+  /* First check that preconditions are met.  */\n+  assert(inq != NULL);\n+  assert(inq->iolength != NULL);\n+\n+  /* Connect to the iolength variable.  */\n+  if (inq->iolength)\n+    set_parameter_ref (&block, ioparm_iolength, inq->iolength);\n+\n+  /* Actual logic.  */\n+  last_dt = IOLENGTH;\n+  dt = build_dt(&iocall_iolength, code);\n+\n+  gfc_add_expr_to_block (&block, dt);\n+\n+  return gfc_finish_block (&block);\n+}\n+\n+\n /* Translate a READ statement.  */\n \n tree\n@@ -1005,12 +1046,33 @@ gfc_trans_dt_end (gfc_code * code)\n \n   gfc_init_block (&block);\n \n-  function = (last_dt == READ) ? iocall_read_done : iocall_write_done;\n+  switch (last_dt)\n+    {\n+    case READ:\n+      function = iocall_read_done;\n+      break;\n+\n+    case WRITE:\n+      function = iocall_write_done;\n+      break;\n+\n+    case IOLENGTH:\n+      function = iocall_iolength_done;\n+      break;\n+\n+    default:\n+      abort ();\n+    }\n \n   tmp = gfc_build_function_call (function, NULL);\n   gfc_add_expr_to_block (&block, tmp);\n \n-  io_result (&block, code->ext.dt->err, code->ext.dt->end, code->ext.dt->eor);\n+  if (last_dt != IOLENGTH)\n+    {\n+      assert(code->ext.dt != NULL);\n+      io_result (&block, code->ext.dt->err,\n+\t\t code->ext.dt->end, code->ext.dt->eor);\n+    }\n \n   return gfc_finish_block (&block);\n }\n@@ -1087,6 +1149,7 @@ transfer_expr (gfc_se * se, gfc_typespec * ts, tree addr_expr)\n   tmp = gfc_build_function_call (function, args);\n   gfc_add_expr_to_block (&se->pre, tmp);\n   gfc_add_block_to_block (&se->pre, &se->post);\n+\n }\n \n "}, {"sha": "73cebd14a476ce4335cd33f4e437d4622c5fb49d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8750f9cdec153095cc47c41b887bc86fda4a0e3e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8750f9cdec153095cc47c41b887bc86fda4a0e3e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8750f9cdec153095cc47c41b887bc86fda4a0e3e", "patch": "@@ -1,3 +1,8 @@\n+2004-06-22  Janne Blomqvist  <jblomqvi@cc.hut.fi>\n+\n+\t* gfortran.fortran-torture/execute/iolength_1.f90: New test.\n+\t* gfortran.fortran-torture/execute/iolength_3.f90: New test.\n+\n 2004-06-21  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n \n \t* gfortran.fortran-torture/execute/select_1.f90: Rename function"}, {"sha": "8b22b03a7ce5e2dcc44a54f6e8e5d84e14cc9b43", "filename": "gcc/testsuite/gfortran.fortran-torture/execute/iolength_1.f90", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8750f9cdec153095cc47c41b887bc86fda4a0e3e/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fiolength_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8750f9cdec153095cc47c41b887bc86fda4a0e3e/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fiolength_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fiolength_1.f90?ref=8750f9cdec153095cc47c41b887bc86fda4a0e3e", "patch": "@@ -0,0 +1,16 @@\n+! Test that IOLENGTH works for dynamic arrays\n+program iolength_1\n+  implicit none\n+  ! 32 bit, i.e. 4 byte integer (every gcc architecture should have this?)\n+  integer, parameter :: int32 = selected_int_kind(9)\n+  integer(int32), allocatable :: a(:)\n+  integer :: iol, alength\n+  real :: r\n+  call random_number(r)\n+  alength = nint(r*20)\n+  allocate(a(alength))\n+  inquire (iolength = iol) a\n+  if ( 4*alength /= iol) then\n+     call abort\n+  end if\n+end program iolength_1"}, {"sha": "23f14c63660445c005f6479cb69198a599f0ebad", "filename": "gcc/testsuite/gfortran.fortran-torture/execute/iolength_3.f90", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8750f9cdec153095cc47c41b887bc86fda4a0e3e/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fiolength_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8750f9cdec153095cc47c41b887bc86fda4a0e3e/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fiolength_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fiolength_3.f90?ref=8750f9cdec153095cc47c41b887bc86fda4a0e3e", "patch": "@@ -0,0 +1,15 @@\n+! Test that IOLENGTH works for io list containing more than one entry\n+program iolength_3\n+  implicit none\n+  integer, parameter ::  &\n+       ! 32 bit, i.e. 4 byte integer (every gcc architecture should have this?)\n+       int32 = selected_int_kind(9), &\n+       ! IEEE double precision, i.e. 8 bytes\n+       dp = selected_real_kind(15, 307)\n+  integer(int32) :: a, b, iol\n+  real(dp) :: c\n+  inquire (iolength = iol) a, b, c\n+  if ( 16 /= iol) then\n+     call abort\n+  end if\n+end program iolength_3"}, {"sha": "933187a9c825988b15527bd47e2c8abcef296886", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8750f9cdec153095cc47c41b887bc86fda4a0e3e/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8750f9cdec153095cc47c41b887bc86fda4a0e3e/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=8750f9cdec153095cc47c41b887bc86fda4a0e3e", "patch": "@@ -1,3 +1,12 @@\n+2004-06-22  Janne Blomqvist  <jblomqvi@cc.hut.fi>\n+\n+\tPR fortran/15750\n+\t* inquire.c (st_inquire): Add comment\n+\t* io.h (st_parameter): Add iolength.\n+\t(st_iolength, st_iolength_done): Declare.\n+\t* transfer.c (iolength_transfer, iolength_transfer_init,\n+\tst_iolength, st_iolength_done): New functions.\n+\n 2004-06-21  Steven G. Kargl  <kargls@comcast.net>\n \n \t* etime.c (etime_sub): Remove array rank check;"}, {"sha": "36957dde58f37ae21e1486e938a5e9defdf17785", "filename": "libgfortran/io/inquire.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8750f9cdec153095cc47c41b887bc86fda4a0e3e/libgfortran%2Fio%2Finquire.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8750f9cdec153095cc47c41b887bc86fda4a0e3e/libgfortran%2Fio%2Finquire.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Finquire.c?ref=8750f9cdec153095cc47c41b887bc86fda4a0e3e", "patch": "@@ -348,6 +348,8 @@ inquire_via_filename (void)\n }\n \n \n+/* Library entry point for the INQUIRE statement (non-IOLENGTH\n+   form).  */\n \n void\n st_inquire (void)"}, {"sha": "8ad25993ce4f6deb7aeb159f0d7e20a86367061d", "filename": "libgfortran/io/io.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8750f9cdec153095cc47c41b887bc86fda4a0e3e/libgfortran%2Fio%2Fio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8750f9cdec153095cc47c41b887bc86fda4a0e3e/libgfortran%2Fio%2Fio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fio.h?ref=8750f9cdec153095cc47c41b887bc86fda4a0e3e", "patch": "@@ -177,6 +177,8 @@ typedef struct\n   int recl_in; \n   int *recl_out;\n \n+  int *iolength;\n+\n   char *file;\n   int file_len;\n   char *status;\n@@ -642,6 +644,8 @@ void list_formatted_write (bt, void *, int);\n #define st_open prefix(st_open)\n #define st_close prefix(st_close)\n #define st_inquire prefix(st_inquire)\n+#define st_iolength prefix(st_iolength)\n+#define st_iolength_done prefix(st_iolength_done)\n #define st_rewind prefix(st_rewind)\n #define st_read prefix(st_read)\n #define st_read_done prefix(st_read_done)"}, {"sha": "b20f860bcefdbbd9107a025a65a79ada10f67a47", "filename": "libgfortran/io/transfer.c", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8750f9cdec153095cc47c41b887bc86fda4a0e3e/libgfortran%2Fio%2Ftransfer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8750f9cdec153095cc47c41b887bc86fda4a0e3e/libgfortran%2Fio%2Ftransfer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Ftransfer.c?ref=8750f9cdec153095cc47c41b887bc86fda4a0e3e", "patch": "@@ -1361,6 +1361,57 @@ finalize_transfer (void)\n }\n \n \n+/* Transfer function for IOLENGTH. It doesn't actually do any\n+   data transfer, it just updates the length counter.  */\n+\n+static void\n+iolength_transfer (bt type, void *dest, int len)\n+{\n+  if (ioparm.iolength != NULL)\n+    *ioparm.iolength += len;\n+}\n+\n+\n+/* Initialize the IOLENGTH data transfer. This function is in essence\n+   a very much simplified version of data_transfer_init(), because it\n+   doesn't have to deal with units at all.  */\n+\n+static void\n+iolength_transfer_init (void)\n+{\n+\n+  if (ioparm.iolength != NULL)\n+    *ioparm.iolength = 0;\n+\n+  g.item_count = 0;\n+\n+  /* Set up the subroutine that will handle the transfers.  */\n+\n+  transfer = iolength_transfer;\n+\n+}\n+\n+\n+/* Library entry point for the IOLENGTH form of the INQUIRE\n+   statement. The IOLENGTH form requires no I/O to be performed, but\n+   it must still be a runtime library call so that we can determine\n+   the iolength for dynamic arrays and such.  */\n+\n+void\n+st_iolength (void)\n+{\n+  library_start ();\n+\n+  iolength_transfer_init ();\n+}\n+\n+void\n+st_iolength_done (void)\n+{\n+  library_end ();\n+}\n+\n+\n /* The READ statement */\n \n void"}]}