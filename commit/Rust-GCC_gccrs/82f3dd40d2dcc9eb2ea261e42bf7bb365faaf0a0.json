{"sha": "82f3dd40d2dcc9eb2ea261e42bf7bb365faaf0a0", "node_id": "C_kwDOANBUbNoAKDgyZjNkZDQwZDJkY2M5ZWIyZWEyNjFlNDJiZjdiYjM2NWZhYWYwYTA", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2021-10-29T16:36:56Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-11-01T13:12:47Z"}, "message": "Extract reuseable function to handle substitutions for struct fields", "tree": {"sha": "e6277d7f1f7f85e0fc8e5ffaa76c3f35efa2c694", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6277d7f1f7f85e0fc8e5ffaa76c3f35efa2c694"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82f3dd40d2dcc9eb2ea261e42bf7bb365faaf0a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82f3dd40d2dcc9eb2ea261e42bf7bb365faaf0a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82f3dd40d2dcc9eb2ea261e42bf7bb365faaf0a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82f3dd40d2dcc9eb2ea261e42bf7bb365faaf0a0/comments", "author": null, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e69ab6d0853da706441bc26ed6379348d1d463a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e69ab6d0853da706441bc26ed6379348d1d463a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e69ab6d0853da706441bc26ed6379348d1d463a"}], "stats": {"total": 98, "additions": 54, "deletions": 44}, "files": [{"sha": "d1db83575c8c1853f03398eef9e7792f6fb371f6", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 54, "deletions": 44, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f3dd40d2dcc9eb2ea261e42bf7bb365faaf0a0/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f3dd40d2dcc9eb2ea261e42bf7bb365faaf0a0/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=82f3dd40d2dcc9eb2ea261e42bf7bb365faaf0a0", "patch": "@@ -705,6 +705,57 @@ ADTType::clone () const\n \t\t      get_combined_refs ());\n }\n \n+static bool\n+handle_substitions (SubstitutionArgumentMappings &subst_mappings,\n+\t\t    StructFieldType *field)\n+{\n+  auto fty = field->get_field_type ();\n+  bool is_param_ty = fty->get_kind () == TypeKind::PARAM;\n+  if (is_param_ty)\n+    {\n+      ParamType *p = static_cast<ParamType *> (fty);\n+\n+      SubstitutionArg arg = SubstitutionArg::error ();\n+      bool ok = subst_mappings.get_argument_for_symbol (p, &arg);\n+      if (ok)\n+\t{\n+\t  auto argt = arg.get_tyty ();\n+\t  bool arg_is_param = argt->get_kind () == TyTy::TypeKind::PARAM;\n+\t  bool arg_is_concrete = argt->get_kind () != TyTy::TypeKind::INFER;\n+\n+\t  if (arg_is_param || arg_is_concrete)\n+\t    {\n+\t      auto new_field = argt->clone ();\n+\t      new_field->set_ref (fty->get_ref ());\n+\t      field->set_field_type (new_field);\n+\t    }\n+\t  else\n+\t    {\n+\t      field->get_field_type ()->set_ty_ref (argt->get_ref ());\n+\t    }\n+\t}\n+    }\n+  else if (fty->has_subsititions_defined () || fty->contains_type_parameters ())\n+    {\n+      BaseType *concrete\n+\t= Resolver::SubstMapperInternal::Resolve (fty, subst_mappings);\n+\n+      if (concrete->get_kind () == TyTy::TypeKind::ERROR)\n+\t{\n+\t  rust_error_at (subst_mappings.get_locus (),\n+\t\t\t \"Failed to resolve field substitution type: %s\",\n+\t\t\t fty->as_string ().c_str ());\n+\t  return false;\n+\t}\n+\n+      auto new_field = concrete->clone ();\n+      new_field->set_ref (fty->get_ref ());\n+      field->set_field_type (new_field);\n+    }\n+\n+  return true;\n+}\n+\n ADTType *\n ADTType::handle_substitions (SubstitutionArgumentMappings subst_mappings)\n {\n@@ -723,50 +774,9 @@ ADTType::handle_substitions (SubstitutionArgumentMappings subst_mappings)\n \n   for (auto &field : adt->fields)\n     {\n-      auto fty = field->get_field_type ();\n-      bool is_param_ty = fty->get_kind () == TypeKind::PARAM;\n-      if (is_param_ty)\n-\t{\n-\t  ParamType *p = static_cast<ParamType *> (fty);\n-\n-\t  SubstitutionArg arg = SubstitutionArg::error ();\n-\t  bool ok = subst_mappings.get_argument_for_symbol (p, &arg);\n-\t  if (ok)\n-\t    {\n-\t      auto argt = arg.get_tyty ();\n-\t      bool arg_is_param = argt->get_kind () == TyTy::TypeKind::PARAM;\n-\t      bool arg_is_concrete = argt->get_kind () != TyTy::TypeKind::INFER;\n-\n-\t      if (arg_is_param || arg_is_concrete)\n-\t\t{\n-\t\t  auto new_field = argt->clone ();\n-\t\t  new_field->set_ref (fty->get_ref ());\n-\t\t  field->set_field_type (new_field);\n-\t\t}\n-\t      else\n-\t\t{\n-\t\t  field->get_field_type ()->set_ty_ref (argt->get_ref ());\n-\t\t}\n-\t    }\n-\t}\n-      else if (fty->has_subsititions_defined ()\n-\t       || fty->contains_type_parameters ())\n-\t{\n-\t  BaseType *concrete\n-\t    = Resolver::SubstMapperInternal::Resolve (fty, subst_mappings);\n-\n-\t  if (concrete->get_kind () == TyTy::TypeKind::ERROR)\n-\t    {\n-\t      rust_error_at (subst_mappings.get_locus (),\n-\t\t\t     \"Failed to resolve field substitution type: %s\",\n-\t\t\t     fty->as_string ().c_str ());\n-\t      return adt;\n-\t    }\n-\n-\t  auto new_field = concrete->clone ();\n-\t  new_field->set_ref (fty->get_ref ());\n-\t  field->set_field_type (new_field);\n-\t}\n+      bool ok = ::Rust::TyTy::handle_substitions (subst_mappings, field);\n+      if (!ok)\n+\treturn adt;\n     }\n \n   return adt;"}]}