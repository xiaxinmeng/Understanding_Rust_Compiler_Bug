{"sha": "226d62d2d1fae33873e8ecda6004fb24ec36e421", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjI2ZDYyZDJkMWZhZTMzODczZThlY2RhNjAwNGZiMjRlYzM2ZTQyMQ==", "commit": {"author": {"name": "Ilya Enkovich", "email": "ilya.enkovich@intel.com", "date": "2015-03-10T09:46:11Z"}, "committer": {"name": "Ilya Enkovich", "email": "ienkovich@gcc.gnu.org", "date": "2015-03-10T09:46:11Z"}, "message": "c.opt (fchkp-use-wrappers): New.\n\n\t* c-family/c.opt (fchkp-use-wrappers): New.\n\t* ipa-chkp.c (CHKP_WRAPPER_SYMBOL_PREFIX): New.\n\t(chkp_wrap_function): New.\n\t(chkp_build_instrumented_fndecl): Support wrapped\n\tfunctions.\n\t* doc/invoke.texi (-fcheck-pointer-bounds): New.\n\t(-fchkp-check-incomplete-type): New.\n\t(-fchkp-first-field-has-own-bounds): New.\n\t(-fchkp-narrow-bounds): New.\n\t(-fchkp-narrow-to-innermost-array): New.\n\t(-fchkp-optimize): New.\n\t(-fchkp-use-fast-string-functions): New.\n\t(-fchkp-use-nochk-string-functions): New.\n\t(-fchkp-use-static-bounds): New.\n\t(-fchkp-use-static-const-bounds): New.\n\t(-fchkp-treat-zero-dynamic-size-as-infinite): New.\n\t(-fchkp-check-read): New.\n\t(-fchkp-check-write): New.\n\t(-fchkp-store-bounds): New.\n\t(-fchkp-instrument-calls): New.\n\t(-fchkp-instrument-marked-only): New.\n\t(-fchkp-use-wrappers): New.\n\t(-static-libmpx): New.\n\t(-static-libmpxwrappers): New.\n\nFrom-SVN: r221314", "tree": {"sha": "9f634c911b71cfb8096225967112f43c9f6053e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f634c911b71cfb8096225967112f43c9f6053e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/226d62d2d1fae33873e8ecda6004fb24ec36e421", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/226d62d2d1fae33873e8ecda6004fb24ec36e421", "html_url": "https://github.com/Rust-GCC/gccrs/commit/226d62d2d1fae33873e8ecda6004fb24ec36e421", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/226d62d2d1fae33873e8ecda6004fb24ec36e421/comments", "author": {"login": "ienkovich", "id": 18308708, "node_id": "MDQ6VXNlcjE4MzA4NzA4", "avatar_url": "https://avatars.githubusercontent.com/u/18308708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ienkovich", "html_url": "https://github.com/ienkovich", "followers_url": "https://api.github.com/users/ienkovich/followers", "following_url": "https://api.github.com/users/ienkovich/following{/other_user}", "gists_url": "https://api.github.com/users/ienkovich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ienkovich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ienkovich/subscriptions", "organizations_url": "https://api.github.com/users/ienkovich/orgs", "repos_url": "https://api.github.com/users/ienkovich/repos", "events_url": "https://api.github.com/users/ienkovich/events{/privacy}", "received_events_url": "https://api.github.com/users/ienkovich/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d2d7e672ad18c54aedfa766b7918d1631a22b4fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2d7e672ad18c54aedfa766b7918d1631a22b4fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2d7e672ad18c54aedfa766b7918d1631a22b4fa"}], "stats": {"total": 248, "additions": 243, "deletions": 5}, "files": [{"sha": "422465646e1bef3895310ab7117aa07772e95c28", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/226d62d2d1fae33873e8ecda6004fb24ec36e421/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/226d62d2d1fae33873e8ecda6004fb24ec36e421/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=226d62d2d1fae33873e8ecda6004fb24ec36e421", "patch": "@@ -1,3 +1,30 @@\n+2015-03-10  Ilya Enkovich  <ilya.enkovich@intel.com>\n+\n+\t* c-family/c.opt (fchkp-use-wrappers): New.\n+\t* ipa-chkp.c (CHKP_WRAPPER_SYMBOL_PREFIX): New.\n+\t(chkp_wrap_function): New.\n+\t(chkp_build_instrumented_fndecl): Support wrapped\n+\tfunctions.\n+\t* doc/invoke.texi (-fcheck-pointer-bounds): New.\n+\t(-fchkp-check-incomplete-type): New.\n+\t(-fchkp-first-field-has-own-bounds): New.\n+\t(-fchkp-narrow-bounds): New.\n+\t(-fchkp-narrow-to-innermost-array): New.\n+\t(-fchkp-optimize): New.\n+\t(-fchkp-use-fast-string-functions): New.\n+\t(-fchkp-use-nochk-string-functions): New.\n+\t(-fchkp-use-static-bounds): New.\n+\t(-fchkp-use-static-const-bounds): New.\n+\t(-fchkp-treat-zero-dynamic-size-as-infinite): New.\n+\t(-fchkp-check-read): New.\n+\t(-fchkp-check-write): New.\n+\t(-fchkp-store-bounds): New.\n+\t(-fchkp-instrument-calls): New.\n+\t(-fchkp-instrument-marked-only): New.\n+\t(-fchkp-use-wrappers): New.\n+\t(-static-libmpx): New.\n+\t(-static-libmpxwrappers): New.\n+\n 2015-03-10  Ilya Enkovich  <ilya.enkovich@intel.com>\n \n \t* config/i386/linux-common.h (LIBMPX_WRAPPERSSPEC): New."}, {"sha": "2692fb50851922d2c613d750b3f2f1b2602c6b28", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/226d62d2d1fae33873e8ecda6004fb24ec36e421/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/226d62d2d1fae33873e8ecda6004fb24ec36e421/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=226d62d2d1fae33873e8ecda6004fb24ec36e421", "patch": "@@ -1041,6 +1041,10 @@ fchkp-instrument-marked-only\n C ObjC C++ ObjC++ LTO Report Var(flag_chkp_instrument_marked_only) Init(0)\n Instrument only functions marked with bnd_instrument attribute.\n \n+fchkp-use-wrappers\n+C ObjC C++ ObjC++ LTO Report Var(flag_chkp_use_wrappers) Init(1)\n+Transform instrumented builtin calls into calls to wrappers.\n+\n static-libmpx\n Driver\n "}, {"sha": "b18669cce8d86282c5d850d2ab37648e6808f8cf", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/226d62d2d1fae33873e8ecda6004fb24ec36e421/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/226d62d2d1fae33873e8ecda6004fb24ec36e421/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=226d62d2d1fae33873e8ecda6004fb24ec36e421", "patch": "@@ -302,6 +302,15 @@ Objective-C and Objective-C++ Dialects}.\n @gccoptlist{-d@var{letters}  -dumpspecs  -dumpmachine  -dumpversion @gol\n -fsanitize=@var{style} -fsanitize-recover -fsanitize-recover=@var{style} @gol\n -fasan-shadow-offset=@var{number} -fsanitize-undefined-trap-on-error @gol\n+-fcheck-pointer-bounds -fchkp-check-incomplete-type @gol\n+-fchkp-first-field-has-own-bounds -fchkp-narrow-bounds @gol\n+-fchkp-narrow-to-innermost-array -fchkp-optimize @gol\n+-fchkp-use-fast-string-functions -fchkp-use-nochk-string-functions @gol\n+-fchkp-use-static-bounds -fchkp-use-static-const-bounds @gol\n+-fchkp-treat-zero-dynamic-size-as-infinite -fchkp-check-read @gol\n+-fchkp-check-read -fchkp-check-write -fchkp-store-bounds @gol\n+-fchkp-instrument-calls -fchkp-instrument-marked-only @gol\n+-fchkp-use-wrappers @gol\n -fdbg-cnt-list -fdbg-cnt=@var{counter-value-list} @gol\n -fdisable-ipa-@var{pass_name} @gol\n -fdisable-rtl-@var{pass_name} @gol\n@@ -477,6 +486,7 @@ Objective-C and Objective-C++ Dialects}.\n -nostartfiles  -nodefaultlibs  -nostdlib -pie -rdynamic @gol\n -s  -static -static-libgcc -static-libstdc++ @gol\n -static-libasan -static-libtsan -static-liblsan -static-libubsan @gol\n+-static-libmpx -static-libmpxwrappers @gol\n -shared -shared-libgcc  -symbolic @gol\n -T @var{script}  -Wl,@var{option}  -Xlinker @var{option} @gol\n -u @var{symbol} -z @var{keyword}}\n@@ -5827,6 +5837,135 @@ a @code{libubsan} library routine.  The advantage of this is that the\n @code{libubsan} library is not needed and is not linked in, so this\n is usable even in freestanding environments.\n \n+@item -fcheck-pointer-bounds\n+@opindex fcheck-pointer-bounds\n+@opindex fno-check-pointer-bounds\n+Enable Pointer Bounds Checker instrumentation.  Each memory reference\n+is instrumented with checks of pointer used for memory access against\n+bounds associated with that pointer.  Generated instrumentation may\n+be controlled by various @option{-fchkp-*} options.  Currently there\n+is only Intel MPX based implementation available, thus i386 target\n+and @option{-mmpx} are required.  MPX based instrumentation requires\n+a runtime library to enable MPX in a hardware and handle bounds\n+violation signals.  By default when @option{-fcheck-pointer-bounds}\n+and @option{-mmpx} options are used to link a program, the GCC driver\n+links against @option{libmpx} runtime library.  MPX based instrumentation\n+may be used for a debugging and also it may be included into a release\n+version to increase program security.  Depending on usage you may\n+put different requirements to runtime library.  Current version\n+ of MPX runtime library is more oriented to be used as a debugging\n+tool.  MPX runtime library usage implies @option{-lpthread}.  See\n+also @option{-static-libmpx}.  The runtime library  behavior can be\n+influenced using various @env{CHKP_RT_*} environment variables.  See\n+@uref{https://gcc.gnu.org/wiki/Intel%20MPX%20support%20in%20the%20GCC%20compiler}\n+for more details.\n+\n+@item -fchkp-check-incomplete-type\n+@opindex fchkp-check-incomplete-type\n+@opindex fno-chkp-check-incomplete-type\n+Generate pointer bounds checks for variables with incomplete type.\n+Enabled by default\n+\n+@item -fchkp-narrow-bounds\n+@opindex fchkp-narrow-bounds\n+@opindex fno-chkp-narrow-bounds\n+Controls bounds used by Pointer Bounds Checker for pointers to object\n+fields.  If narrowing is enabled then field bounds are used.  Otherwise\n+object bounds are used.  See also @option{-fchkp-narrow-to-innermost-array}\n+and @option{-fchkp-first-field-has-own-bounds}.  Enabled by default.\n+\n+@item -fchkp-first-field-has-own-bounds\n+@opindex fchkp-first-field-has-own-bounds\n+@opindex fno-chkp-first-field-has-own-bounds\n+Forces Pointer Bounds Checker to use narrowed bounds for address of the\n+first field in the structure.  By default pointer to the first field has\n+the same bounds as pointer to the whole structure.\n+\n+@item -fchkp-narrow-to-innermost-array\n+@opindex fchkp-narrow-to-innermost-array\n+@opindex fno-chkp-narrow-to-innermost-array\n+Forces Pointer Bounds Checker to use bounds of the innermost arrays in\n+case of nested static arryas access.  By default it is disabled and\n+bounds of the outermost array are used.\n+\n+@item -fchkp-optimize\n+@opindex fchkp-optimize\n+@opindex fno-chkp-optimize\n+Enables Pointer Bounds Checker optimizations.  Enabled by default at\n+optimization levels @option{-O}, @option{-O2}, @option{-O3}.\n+\n+@item -fchkp-use-fast-string-functions\n+@opindex fchkp-use-fast-string-functions\n+@opindex fno-chkp-use-fast-string-functions\n+Allow to use @code{*_nobnd} versions of string functions (not copying bounds)\n+by Pointer Bounds Checker.  Disabled by default.\n+\n+@item -fchkp-use-nochk-string-functions\n+@opindex fchkp-use-nochk-string-functions\n+@opindex fno-chkp-use-nochk-string-functions\n+Allow to use @code{*_nochk} versions of string functions (not checking bounds)\n+by Pointer Bounds Checker.  Disabled by default.\n+\n+@item -fchkp-use-static-bounds\n+@opindex fchkp-use-static-bounds\n+@opindex fno-chkp-use-static-bounds\n+Allow Pointer Bounds Checker to generate static bounds holding\n+bounds of static variables.  Enabled by default.\n+\n+@item -fchkp-use-static-const-bounds\n+@opindex fchkp-use-static-const-bounds\n+@opindex fno-chkp-use-static-const-bounds\n+Use statically initialized bounds for constant bounds instead of\n+generating them each time it is required.  By default enabled when\n+@option{-fchkp-use-static-bounds} is enabled.\n+\n+@item -fchkp-treat-zero-dynamic-size-as-infinite\n+@opindex fchkp-treat-zero-dynamic-size-as-infinite\n+@opindex fno-chkp-treat-zero-dynamic-size-as-infinite\n+With this option zero size obtained dynamically for objects with\n+incomplete type will be treated as infinite by Pointer Bounds\n+Checker.  It may be helpful if program is linked with a library\n+missing size information for some symbols.  Disabled by default.\n+\n+@item -fchkp-check-read\n+@opindex fchkp-check-read\n+@opindex fno-chkp-check-read\n+Instructs Pointer Bounds Checker to generate checks for all read\n+accesses to memory.  Enabled by default.\n+\n+@item -fchkp-check-write\n+@opindex fchkp-check-write\n+@opindex fno-chkp-check-write\n+Instructs Pointer Bounds Checker to generate checks for all write\n+accesses to memory.  Enabled by default.\n+\n+@item -fchkp-store-bounds\n+@opindex fchkp-store-bounds\n+@opindex fno-chkp-store-bounds\n+Instructs Pointer Bounds Checker to generate bounds stores for\n+pointer writes.  Enabled by default.\n+\n+@item -fchkp-instrument-calls\n+@opindex fchkp-instrument-calls\n+@opindex fno-chkp-instrument-calls\n+Instructs Pointer Bounds Checker to pass pointer bounds to calls.\n+Enabled by default.\n+\n+@item -fchkp-instrument-marked-only\n+@opindex fchkp-instrument-marked-only\n+@opindex fno-chkp-instrument-marked-only\n+Instructs Pointer Bounds Checker to instrument only functions\n+marked with @code{bnd_instrument} attribute.  Disabled by default.\n+\n+@item -fchkp-use-wrappers\n+@opindex fchkp-use-wrappers\n+@opindex fno-chkp-use-wrappers\n+Allows Pointer Bounds Checker to replace calls to built-in function\n+with calls to wrapper functions.  When the @option{-fchkp-use-wrappers}\n+is used to link a program, the GCC driver automatically links\n+agains @option{libmpxwrappers}.  See also @option{-static-libmpxwrappers}.\n+Enabled by default.\n+\n @item -fdump-final-insns@r{[}=@var{file}@r{]}\n @opindex fdump-final-insns\n Dump the final internal representation (RTL) to @var{file}.  If the\n@@ -11136,6 +11275,27 @@ option is not used, then this links against the shared version of\n driver to link @file{libubsan} statically, without necessarily linking\n other libraries statically.\n \n+@item -static-libmpx\n+@opindex static-libmpx\n+When @option{-fcheck-pointer bounds} and @option{-mmpx} options are\n+used to link a program, the GCC driver automatically links against\n+@option{libmpx}.  If @file{libmpx} is available as a shared library,\n+and the @option{-static} option is not used, then this links against\n+the shared version of @file{libmpx}.  The @option{-static-libmpx}\n+option directs the GCC driver to link @file{libmpx} statically,\n+without necessarily linking other libraries statically.\n+\n+@item -static-libmpxwrappers\n+@opindex static-libmpxwrappers\n+When @option{-fcheck-pointer bounds}, @option{-mmpx} options are used and\n+@option{-fno-chkp-use-wrappers} option is not used to link a program, the\n+GCC driver automatically links against @option{libmpxwrappers}.  If\n+@file{libmpxwrappers} is available as a shared library, and the\n+@option{-static} option is not used, then this links against the shared\n+version of @file{libmpxwrappers}.  The @option{-static-libmpxwrappers}\n+option directs the GCC driver to link @file{libmpxwrappers} statically,\n+without necessarily linking other libraries statically.\n+\n @item -static-libstdc++\n @opindex static-libstdc++\n When the @command{g++} program is used to link a C++ program, it"}, {"sha": "3bea06ab75087e7b630744eb51af8da57680f360", "filename": "gcc/ipa-chkp.c", "status": "modified", "additions": 52, "deletions": 5, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/226d62d2d1fae33873e8ecda6004fb24ec36e421/gcc%2Fipa-chkp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/226d62d2d1fae33873e8ecda6004fb24ec36e421/gcc%2Fipa-chkp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-chkp.c?ref=226d62d2d1fae33873e8ecda6004fb24ec36e421", "patch": "@@ -100,6 +100,44 @@ along with GCC; see the file COPYING3.  If not see\n     removed.  */\n \n #define CHKP_BOUNDS_OF_SYMBOL_PREFIX \"__chkp_bounds_of_\"\n+#define CHKP_WRAPPER_SYMBOL_PREFIX \"__mpx_wrapper_\"\n+\n+/* Return 1 calls to FNDECL should be replaced with\n+   a call to wrapper function.  */\n+static bool\n+chkp_wrap_function (tree fndecl)\n+{\n+  if (!flag_chkp_use_wrappers)\n+    return false;\n+\n+  if (DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL)\n+    {\n+      switch (DECL_FUNCTION_CODE (fndecl))\n+\t{\n+\tcase BUILT_IN_STRLEN:\n+\tcase BUILT_IN_STRCPY:\n+\tcase BUILT_IN_STRNCPY:\n+\tcase BUILT_IN_STPCPY:\n+\tcase BUILT_IN_STPNCPY:\n+\tcase BUILT_IN_STRCAT:\n+\tcase BUILT_IN_STRNCAT:\n+\tcase BUILT_IN_MEMCPY:\n+\tcase BUILT_IN_MEMPCPY:\n+\tcase BUILT_IN_MEMSET:\n+\tcase BUILT_IN_MEMMOVE:\n+\tcase BUILT_IN_BZERO:\n+\tcase BUILT_IN_MALLOC:\n+\tcase BUILT_IN_CALLOC:\n+\tcase BUILT_IN_REALLOC:\n+\t  return 1;\n+\n+\tdefault:\n+\t  return 0;\n+\t}\n+    }\n+\n+  return false;\n+}\n \n /* Build a clone of FNDECL with a modified name.  */\n \n@@ -124,11 +162,20 @@ chkp_build_instrumented_fndecl (tree fndecl)\n      because it conflicts with decl merging algorithms in LTO.\n      Achieve the result by using transparent alias name for the\n      instrumented version.  */\n-  s = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (fndecl));\n-  s += \".chkp\";\n-  new_name = get_identifier (s.c_str ());\n-  IDENTIFIER_TRANSPARENT_ALIAS (new_name) = 1;\n-  TREE_CHAIN (new_name) = DECL_ASSEMBLER_NAME (fndecl);\n+  if (chkp_wrap_function(fndecl))\n+    {\n+      s = CHKP_WRAPPER_SYMBOL_PREFIX;\n+      s += IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (fndecl));\n+      new_name = get_identifier (s.c_str ());\n+    }\n+  else\n+    {\n+      s = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (fndecl));\n+      s += \".chkp\";\n+      new_name = get_identifier (s.c_str ());\n+      IDENTIFIER_TRANSPARENT_ALIAS (new_name) = 1;\n+      TREE_CHAIN (new_name) = DECL_ASSEMBLER_NAME (fndecl);\n+    }\n   SET_DECL_ASSEMBLER_NAME (new_decl, new_name);\n \n   /* For functions with body versioning will make a copy of arguments."}]}