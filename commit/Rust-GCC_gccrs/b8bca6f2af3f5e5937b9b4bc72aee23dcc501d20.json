{"sha": "b8bca6f2af3f5e5937b9b4bc72aee23dcc501d20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjhiY2E2ZjJhZjNmNWU1OTM3YjliNGJjNzJhZWUyM2RjYzUwMWQyMA==", "commit": {"author": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1994-10-11T18:39:14Z"}, "committer": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1994-10-11T18:39:14Z"}, "message": "(grokdeclarator): Don't warn about applying const to a const typedef or template type parameter.\n\n(grokdeclarator): Don't warn about applying const to a\n        const typedef or template type parameter.\n(shadow_tag): Remove obsolete code for pushing tags and\n        dealing with exceptions.\n\nFrom-SVN: r8250", "tree": {"sha": "8ca84b27297bb029b72771d2cd0490aca88489d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ca84b27297bb029b72771d2cd0490aca88489d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8bca6f2af3f5e5937b9b4bc72aee23dcc501d20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8bca6f2af3f5e5937b9b4bc72aee23dcc501d20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8bca6f2af3f5e5937b9b4bc72aee23dcc501d20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8bca6f2af3f5e5937b9b4bc72aee23dcc501d20/comments", "author": null, "committer": null, "parents": [{"sha": "cba8ba3576b617b89ae23345b3cbdfb40e78505b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cba8ba3576b617b89ae23345b3cbdfb40e78505b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cba8ba3576b617b89ae23345b3cbdfb40e78505b"}], "stats": {"total": 66, "additions": 9, "deletions": 57}, "files": [{"sha": "b6b4f89d6577390a3ded0b963a3b38f8a4aa756e", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 9, "deletions": 57, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8bca6f2af3f5e5937b9b4bc72aee23dcc501d20/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8bca6f2af3f5e5937b9b4bc72aee23dcc501d20/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=b8bca6f2af3f5e5937b9b4bc72aee23dcc501d20", "patch": "@@ -5069,7 +5069,6 @@ shadow_tag (declspecs)\n      tree declspecs;\n {\n   int found_tag = 0;\n-  int warned = 0;\n   tree ob_modifier = NULL_TREE;\n   register tree link;\n   register enum tree_code code, ok_code = ERROR_MARK;\n@@ -5082,41 +5081,14 @@ shadow_tag (declspecs)\n       code = TREE_CODE (value);\n       if (IS_AGGR_TYPE_CODE (code) || code == ENUMERAL_TYPE)\n \t{\n-\t  register tree name = TYPE_NAME (value);\n+\t  my_friendly_assert (TYPE_NAME (value) != NULL_TREE, 261);\n \n \t  if (code == ENUMERAL_TYPE && TYPE_SIZE (value) == 0)\n \t    cp_error (\"forward declaration of `%#T'\", value);\n \n-\t  if (name == NULL_TREE)\n-\t    name = lookup_tag_reverse (value, NULL_TREE);\n-\n-\t  if (name && TREE_CODE (name) == TYPE_DECL)\n-\t    name = DECL_NAME (name);\n-\n-\t  t = lookup_tag (code, name, inner_binding_level, 1);\n-\n-\t  if (t == NULL_TREE)\n-\t    {\n-\t      push_obstacks (&permanent_obstack, &permanent_obstack);\n-\t      if (IS_AGGR_TYPE_CODE (code))\n-\t\tt = make_lang_type (code);\n-\t      else\n-\t\tt = make_node (code);\n-\t      pushtag (name, t, 0);\n-\t      pop_obstacks ();\n-\t      ok_code = code;\n-\t    }\n-\t  else if (name != NULL_TREE || code == ENUMERAL_TYPE)\n-\t    ok_code = code;\n-\n-\t  if (ok_code != ERROR_MARK)\n-\t    found_tag++;\n-\t  else\n-\t    {\n-\t      if (!warned)\n-\t\tpedwarn (\"useless keyword or type name in declaration\");\n-\t      warned = 1;\n-\t    }\n+\t  t = value;\n+\t  ok_code = code;\n+\t  found_tag++;\n \t}\n       else if (value == ridpointers[(int) RID_STATIC]\n \t       || value == ridpointers[(int) RID_EXTERN]\n@@ -5156,32 +5128,9 @@ shadow_tag (declspecs)\n \tcp_error (\"`%D' can only be specified for objects and functions\",\n \t\t  ob_modifier);\n \n-      if (ok_code == RECORD_TYPE\n-\t  && found_tag == 1\n-\t  && TYPE_LANG_SPECIFIC (t)\n-\t  && CLASSTYPE_DECLARED_EXCEPTION (t))\n-\t{\n-\t  if (TYPE_SIZE (t))\n-\t    cp_error (\"redeclaration of exception `%T'\", t);\n-\t  else\n-\t    {\n-\t      tree ename, decl;\n-\n-\t      push_obstacks (&permanent_obstack, &permanent_obstack);\n-\n-\t      pushclass (t, 0);\n-\n-\t      ename = TYPE_NAME (t);\n-\t      if (TREE_CODE (ename) == TYPE_DECL)\n-\t\tename = DECL_NAME (ename);\n-\t      decl = build_lang_field_decl (VAR_DECL, ename, t);\n-\n-\t      pop_obstacks ();\n-\t    }\n-\t}\n-      else if (found_tag == 0)\n+      if (found_tag == 0)\n \tpedwarn (\"abstract declarator used as declaration\");\n-      else if (!warned && found_tag > 1)\n+      else if (found_tag > 1)\n \tpedwarn (\"multiple types in one declaration\");\n     }\n }\n@@ -7598,10 +7547,13 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, raises)\n   volatilep = !! RIDBIT_SETP (RID_VOLATILE, specbits) + TYPE_VOLATILE (type);\n   staticp = 0;\n   inlinep = !! RIDBIT_SETP (RID_INLINE, specbits);\n+#if 0\n+  /* This sort of redundancy is blessed in a footnote to the Sep 94 WP.  */\n   if (constp > 1)\n     warning (\"duplicate `const'\");\n   if (volatilep > 1)\n     warning (\"duplicate `volatile'\");\n+#endif\n   virtualp = RIDBIT_SETP (RID_VIRTUAL, specbits);\n \n   if (RIDBIT_SETP (RID_STATIC, specbits))"}]}