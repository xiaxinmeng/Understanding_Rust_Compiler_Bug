{"sha": "3308e40acfa587d7d7971f1bc2bbc90cdad022b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzMwOGU0MGFjZmE1ODdkN2Q3OTcxZjFiYzJiYmM5MGNkYWQwMjJiNw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-18T05:21:50Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-18T05:21:50Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r516", "tree": {"sha": "b0a2eec659a5067148b4cfd36b16babdec932efa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0a2eec659a5067148b4cfd36b16babdec932efa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3308e40acfa587d7d7971f1bc2bbc90cdad022b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3308e40acfa587d7d7971f1bc2bbc90cdad022b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3308e40acfa587d7d7971f1bc2bbc90cdad022b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3308e40acfa587d7d7971f1bc2bbc90cdad022b7/comments", "author": null, "committer": null, "parents": [{"sha": "1a2ef701e7e7fab9ef51e79bf6b34136c6ff1b1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a2ef701e7e7fab9ef51e79bf6b34136c6ff1b1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a2ef701e7e7fab9ef51e79bf6b34136c6ff1b1b"}], "stats": {"total": 43, "additions": 29, "deletions": 14}, "files": [{"sha": "413eefef5d419625357cdaaaed7f5354f45101d1", "filename": "gcc/fixincludes", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3308e40acfa587d7d7971f1bc2bbc90cdad022b7/gcc%2Ffixincludes", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3308e40acfa587d7d7971f1bc2bbc90cdad022b7/gcc%2Ffixincludes", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixincludes?ref=3308e40acfa587d7d7971f1bc2bbc90cdad022b7", "patch": "@@ -43,11 +43,9 @@ fi\n \n echo 'Making directories:'\n cd ${INPUT}\n-if $LINKS; then\n-  files=`ls -LR | sed -n s/:$//p`\n-else\n-  files=`find . -type d -print | sed '/^.$/d'`\n-fi\n+# Find all directories and all symlinks that point to directories.\n+files=`\tfind . -type d -print | sed '/^.$/d'\n+\t$LINKS && find . -type l -exec test -d '{}' \\; -print`\n for file in $files; do\n   rm -rf $LIB/$file\n   if [ ! -d $LIB/$file ]\n@@ -110,10 +108,12 @@ while [ $# != 0 ]; do\n   for file in $files; do\n # This call to egrep is essential, since checking a file with egrep\n # is much faster than actually trying to fix it.\n+# It is also essential that most files *not* match!\n+# Thus, matching every #endif is unacceptable.\n # But the argument to egrep must be kept small, or many versions of egrep\n # won't be able to handle it.\n # rms: I removed `|#[el].*if.*[^/ \t]' because it made egrep fail.\n-    if egrep '[ \t_]_IO|CTRL|#define.NULL|#[el]*if.*([0-9]|#e[nl]|sparc|vax|sun|pyr)' $file > /dev/null; then\n+    if egrep '[ \t_]_IO|CTRL|#define.NULL|#[el]*if.*([0-9]|sparc|vax|sun|pyr)' $file > /dev/null; then\n       echo Fixing $file\n       if [ -r $file ]; then\n \tcp $file $2/$file >/dev/null 2>&1\t\\\n@@ -194,26 +194,26 @@ if [ -r ${LIB}/$file ]; then\n   ex ${LIB}/$file <<EOF\n   /size_t.*;/\n   i\n-#ifndef _SIZE_T\n-#define _SIZE_T\n+#ifndef _GCC_SIZE_T\n+#define _GCC_SIZE_T\n .\n   /size_t/+1\n   i\n #endif\n .\n   /ptrdiff_t.*;/\n   i\n-#ifndef _PTRDIFF_T\n-#define _PTRDIFF_T\n+#ifndef _GCC_PTRDIFF_T\n+#define _GCC_PTRDIFF_T\n .\n   /ptrdiff_t/+1\n   i\n #endif\n .\n   /wchar_t.*;/\n   i\n-#ifndef _WCHAR_T\n-#define _WCHAR_T\n+#ifndef _GCC_WCHAR_T\n+#define _GCC_WCHAR_T\n .\n   /wchar_t/+1\n   i\n@@ -239,8 +239,8 @@ if [ -r ${LIB}/$file ]; then\n   ex ${LIB}/$file <<EOF\n   /size_t.*;/\n   i\n-#ifndef _SIZE_T\n-#define _SIZE_T\n+#ifndef _GCC_SIZE_T\n+#define _GCC_SIZE_T\n .\n   /size_t/+1\n   i"}, {"sha": "ffd8c62908c67ade1d750fb9d2d4439b1d9be438", "filename": "gcc/ginclude/stddef.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3308e40acfa587d7d7971f1bc2bbc90cdad022b7/gcc%2Fginclude%2Fstddef.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3308e40acfa587d7d7971f1bc2bbc90cdad022b7/gcc%2Fginclude%2Fstddef.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fstddef.h?ref=3308e40acfa587d7d7971f1bc2bbc90cdad022b7", "patch": "@@ -16,45 +16,57 @@\n /* Signed type of difference of two pointers.  */\n \n #ifndef _PTRDIFF_T\t/* in case <sys/types.h> has defined it. */\n+#ifndef _T_PTRDIFF_\n #ifndef _T_PTRDIFF\n #ifndef __PTRDIFF_T\n #ifndef _PTRDIFF_T_\n #ifndef ___int_ptrdiff_t_h\n+#ifndef _GCC_PTRDIFF_T\n #define _PTRDIFF_T\n+#define _T_PTRDIFF_\n #define _T_PTRDIFF\n #define __PTRDIFF_T\n #define _PTRDIFF_T_\n #define ___int_ptrdiff_t_h\n+#define _GCC_PTRDIFF_T\n #ifndef __PTRDIFF_TYPE__\n #define __PTRDIFF_TYPE__ long int\n #endif\n typedef __PTRDIFF_TYPE__ ptrdiff_t;\n+#endif /* _GCC_PTRDIFF_T */\n #endif /* ___int_ptrdiff_t_h */\n #endif /* _PTRDIFF_T_ */\n #endif /* __PTRDIFF_T */\n #endif /* _T_PTRDIFF */\n+#endif /* _T_PTRDIFF_ */\n #endif /* _PTRDIFF_T */\n \n /* Unsigned type of `sizeof' something.  */\n \n #ifndef _SIZE_T\t/* in case <sys/types.h> has defined it. */\n+#ifndef _T_SIZE_\n #ifndef _T_SIZE\n #ifndef __SIZE_T\n #ifndef _SIZE_T_\n #ifndef ___int_size_t_h\n+#ifndef _GCC_SIZE_T\n #define _SIZE_T\n+#define _T_SIZE_\n #define _T_SIZE\n #define __SIZE_T\n #define _SIZE_T_\n #define ___int_size_t_h\n+#define _GCC_SIZE_T\n #ifndef __SIZE_TYPE__\n #define __SIZE_TYPE__ long unsigned int\n #endif\n typedef __SIZE_TYPE__ size_t;\n+#endif /* _GCC_SIZE_T */\n #endif /* ___int_size_t_h */\n #endif /* _SIZE_T_ */\n #endif /* __SIZE_T */\n #endif /* _T_SIZE */\n+#endif /* _T_SIZE_ */\n #endif /* _SIZE_T */\n \n /* Data type for wide chars.  */\n@@ -65,12 +77,14 @@ typedef __SIZE_TYPE__ size_t;\n #ifndef __WCHAR_T\n #ifndef _WCHAR_T_\n #ifndef ___int_wchar_t_h\n+#ifndef _GCC_WCHAR_T\n #define _WCHAR_T\n #define _T_WCHAR_\n #define _T_WCHAR\n #define __WCHAR_T\n #define _WCHAR_T_\n #define ___int_wchar_t_h\n+#define _GCC_WCHAR_T\n #ifndef __WCHAR_TYPE__\n #define __WCHAR_TYPE__ int\n #endif\n@@ -81,6 +95,7 @@ typedef __WCHAR_TYPE__ wchar_t;\n #endif\n #endif\n #endif\n+#endif\n \n #endif /* __sys_stdtypes_h */\n "}]}