{"sha": "71628aa09889112d4acdfcea51b85d43808e1d74", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzE2MjhhYTA5ODg5MTEyZDRhY2RmY2VhNTFiODVkNDM4MDhlMWQ3NA==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@superh.com", "date": "2003-07-15T22:49:07Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2003-07-15T22:49:07Z"}, "message": "dwarf2out.c (expand_builtin_init_dwarf_reg_sizes): If DWARF_FRAME_RETURN_COLUMN doesn't have a register mode, use Pmode.\n\n2003-07-15  J\"orn Rennecke <joern.rennecke@superh.com>\n\n\t* dwarf2out.c (expand_builtin_init_dwarf_reg_sizes):\n\tIf DWARF_FRAME_RETURN_COLUMN doesn't have a register mode, use Pmode.\n\n2003-07-15  J\"orn Rennecke <joern.rennecke@superh.com>\n\t    Richard Henderson  <rth@redhat.com>\n\n\t* unwind-dw2.c (_Unwind_GetGR): Use dwarf_reg_size_table\n\tto decide if to access a _Unwind_Ptr or a _Unwind_Word.\n\t(_Unwind_SetGR): Likewise.\n\t(_Unwind_GetPtr, _Unwind_SetSpColumn): New functions.\n\t(Unwind_SpTmp): New typedef.\n\t(uw_update_context_1): Use _Unwind_SetSpColumn and _Unwind_GetPtr.\n\t(uw_update_context): Use _Unwind_GetPtr.\n\t(init_dwarf_reg_size_table): Move above uw_init_context_1.\n\t(uw_init_context_1): Initialize dwarf_reg_size_table if necessary.\n\tUse _Unwind_SetSpColumn.\n\t(uw_install_context_1): Don't initialize dwarf_reg_size_table.\n\tUse _Unwind_GetPtr.\n\nCo-Authored-By: Richard Henderson <rth@redhat.com>\n\nFrom-SVN: r69424", "tree": {"sha": "0b4cd663dafe5a829643f9e752beb54ae5870d2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b4cd663dafe5a829643f9e752beb54ae5870d2f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71628aa09889112d4acdfcea51b85d43808e1d74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71628aa09889112d4acdfcea51b85d43808e1d74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71628aa09889112d4acdfcea51b85d43808e1d74", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71628aa09889112d4acdfcea51b85d43808e1d74/comments", "author": null, "committer": null, "parents": [{"sha": "5a170a05da225e0d29dff9cc282bc3c188fdb367", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a170a05da225e0d29dff9cc282bc3c188fdb367", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a170a05da225e0d29dff9cc282bc3c188fdb367"}], "stats": {"total": 140, "additions": 108, "deletions": 32}, "files": [{"sha": "d7f64de60ad1fa727f449456c57876e0e2a9d7bc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71628aa09889112d4acdfcea51b85d43808e1d74/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71628aa09889112d4acdfcea51b85d43808e1d74/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=71628aa09889112d4acdfcea51b85d43808e1d74", "patch": "@@ -1,3 +1,24 @@\n+2003-07-15  J\"orn Rennecke <joern.rennecke@superh.com>\n+\n+\t* dwarf2out.c (expand_builtin_init_dwarf_reg_sizes):\n+\tIf DWARF_FRAME_RETURN_COLUMN doesn't have a register mode, use Pmode.\n+\n+2003-07-15  J\"orn Rennecke <joern.rennecke@superh.com>\n+\t    Richard Henderson  <rth@redhat.com>\n+\n+\t* unwind-dw2.c (_Unwind_GetGR): Use dwarf_reg_size_table\n+\tto decide if to access a _Unwind_Ptr or a _Unwind_Word.\n+\t(_Unwind_SetGR): Likewise.\n+\t(_Unwind_GetPtr, _Unwind_SetSpColumn): New functions.\n+\t(Unwind_SpTmp): New typedef.\n+\t(uw_update_context_1): Use _Unwind_SetSpColumn and _Unwind_GetPtr.\n+\t(uw_update_context): Use _Unwind_GetPtr.\n+\t(init_dwarf_reg_size_table): Move above uw_init_context_1.\n+\t(uw_init_context_1): Initialize dwarf_reg_size_table if necessary.\n+\tUse _Unwind_SetSpColumn.\n+\t(uw_install_context_1): Don't initialize dwarf_reg_size_table.\n+\tUse _Unwind_GetPtr.\n+\n 2003-07-15  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* c.opt: Document more options."}, {"sha": "94269b16c1a0c7a6394ceff8ad2789a452307bd6", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71628aa09889112d4acdfcea51b85d43808e1d74/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71628aa09889112d4acdfcea51b85d43808e1d74/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=71628aa09889112d4acdfcea51b85d43808e1d74", "patch": "@@ -443,6 +443,7 @@ expand_builtin_init_dwarf_reg_sizes (tree address)\n   enum machine_mode mode = TYPE_MODE (char_type_node);\n   rtx addr = expand_expr (address, NULL_RTX, VOIDmode, 0);\n   rtx mem = gen_rtx_MEM (BLKmode, addr);\n+  bool wrote_return_column = false;\n \n   for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n     if (DWARF_FRAME_REGNUM (i) < DWARF_FRAME_REGISTERS)\n@@ -453,12 +454,25 @@ expand_builtin_init_dwarf_reg_sizes (tree address)\n \n \tif (HARD_REGNO_CALL_PART_CLOBBERED (i, save_mode))\n \t  save_mode = choose_hard_reg_mode (i, 1, true);\n+\tif (DWARF_FRAME_REGNUM (i) == DWARF_FRAME_RETURN_COLUMN)\n+\t  {\n+\t    if (save_mode == VOIDmode)\n+\t      continue;\n+\t    wrote_return_column = true;\n+\t  }\n \tsize = GET_MODE_SIZE (save_mode);\n \tif (offset < 0)\n \t  continue;\n \n \temit_move_insn (adjust_address (mem, mode, offset), GEN_INT (size));\n       }\n+  if (! wrote_return_column)\n+    {\n+      enum machine_mode save_mode = Pmode;\n+      HOST_WIDE_INT offset = DWARF_FRAME_RETURN_COLUMN * GET_MODE_SIZE (mode);\n+      HOST_WIDE_INT size = GET_MODE_SIZE (save_mode);\n+      emit_move_insn (adjust_address (mem, mode, offset), GEN_INT (size));\n+    }\n }\n \n /* Convert a DWARF call frame info. operation to its string name */"}, {"sha": "eadd88bba5ac3fc3f5e4e3766c4f0ba6d61f23aa", "filename": "gcc/unwind-dw2.c", "status": "modified", "additions": 73, "deletions": 32, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71628aa09889112d4acdfcea51b85d43808e1d74/gcc%2Funwind-dw2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71628aa09889112d4acdfcea51b85d43808e1d74/gcc%2Funwind-dw2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind-dw2.c?ref=71628aa09889112d4acdfcea51b85d43808e1d74", "patch": "@@ -168,9 +168,27 @@ read_8s (const void *p) { const union unaligned *up = p; return up->s8; }\n inline _Unwind_Word\n _Unwind_GetGR (struct _Unwind_Context *context, int index)\n {\n+  int size;\n+  void *ptr;\n+\n   index = DWARF_REG_TO_UNWIND_COLUMN (index);\n+  size = dwarf_reg_size_table[index];\n+  ptr = context->reg[index];\n+\n   /* This will segfault if the register hasn't been saved.  */\n-  return * (_Unwind_Word *) context->reg[index];\n+  if (size == sizeof(_Unwind_Ptr))\n+    return * (_Unwind_Ptr *) ptr;\n+\n+  if (size == sizeof(_Unwind_Word))\n+    return * (_Unwind_Word *) ptr;\n+\n+  abort ();\n+}\n+\n+static inline void *\n+_Unwind_GetPtr (struct _Unwind_Context *context, int index)\n+{\n+  return (void *)(_Unwind_Ptr) _Unwind_GetGR (context, index);\n }\n \n /* Get the value of the CFA as saved in CONTEXT.  */\n@@ -186,8 +204,19 @@ _Unwind_GetCFA (struct _Unwind_Context *context)\n inline void\n _Unwind_SetGR (struct _Unwind_Context *context, int index, _Unwind_Word val)\n {\n+  int size;\n+  void *ptr;\n+\n   index = DWARF_REG_TO_UNWIND_COLUMN (index);\n-  * (_Unwind_Word *) context->reg[index] = val;\n+  size = dwarf_reg_size_table[index];\n+  ptr = context->reg[index];\n+\n+  if (size == sizeof(_Unwind_Ptr))\n+    * (_Unwind_Ptr *) ptr = val;\n+  else if (size == sizeof(_Unwind_Word))\n+    * (_Unwind_Word *) ptr = val;\n+  else\n+    abort ();\n }\n \n /* Get the pointer to a register INDEX as saved in CONTEXT.  */\n@@ -1072,6 +1101,23 @@ __frame_state_for (void *pc_target, struct frame_state *state_in)\n   return state_in;\n }\n \f\n+typedef union { _Unwind_Ptr ptr; _Unwind_Word word; } _Unwind_SpTmp;\n+\n+static inline void\n+_Unwind_SetSpColumn (struct _Unwind_Context *context, void *cfa,\n+                     _Unwind_SpTmp *tmp_sp)\n+{\n+  int size = dwarf_reg_size_table[__builtin_dwarf_sp_column ()];\n+  \n+  if (size == sizeof(_Unwind_Ptr))\n+    tmp_sp->ptr = (_Unwind_Ptr) cfa;\n+  else if (size == sizeof(_Unwind_Word))\n+    tmp_sp->word = (_Unwind_Ptr) cfa;\n+  else\n+    abort ();\n+  _Unwind_SetGRPtr (context, __builtin_dwarf_sp_column (), tmp_sp);\n+}\n+\n static void\n uw_update_context_1 (struct _Unwind_Context *context, _Unwind_FrameState *fs)\n {\n@@ -1095,21 +1141,18 @@ uw_update_context_1 (struct _Unwind_Context *context, _Unwind_FrameState *fs)\n      Always zap the saved stack pointer value for the next frame; carrying\n      the value over from one frame to another doesn't make sense.  */\n \n-  _Unwind_Word tmp_sp;\n+  _Unwind_SpTmp tmp_sp;\n \n   if (!_Unwind_GetGRPtr (&orig_context, __builtin_dwarf_sp_column ()))\n-    {\n-      tmp_sp = (_Unwind_Ptr) context->cfa;\n-      _Unwind_SetGRPtr (&orig_context, __builtin_dwarf_sp_column (), &tmp_sp);\n-    }\n+    _Unwind_SetSpColumn (&orig_context, context->cfa, &tmp_sp);\n   _Unwind_SetGRPtr (context, __builtin_dwarf_sp_column (), NULL);\n #endif\n \n   /* Compute this frame's CFA.  */\n   switch (fs->cfa_how)\n     {\n     case CFA_REG_OFFSET:\n-      cfa = (void *) (_Unwind_Ptr) _Unwind_GetGR (&orig_context, fs->cfa_reg);\n+      cfa = _Unwind_GetPtr (&orig_context, fs->cfa_reg);\n       cfa += fs->cfa_offset;\n       break;\n \n@@ -1175,7 +1218,7 @@ uw_update_context (struct _Unwind_Context *context, _Unwind_FrameState *fs)\n   /* Compute the return address now, since the return address column\n      can change from frame to frame.  */\n   context->ra = __builtin_extract_return_addr\n-    ((void *) (_Unwind_Ptr) _Unwind_GetGR (context, fs->retaddr_column));\n+    (_Unwind_GetPtr (context, fs->retaddr_column));\n }\n \f\n /* Fill in CONTEXT for top-of-stack.  The only valid registers at this\n@@ -1192,23 +1235,40 @@ uw_update_context (struct _Unwind_Context *context, _Unwind_FrameState *fs)\n     }\t\t\t\t\t\t\t\t\t   \\\n   while (0)\n \n+static inline void\n+init_dwarf_reg_size_table (void)\n+{\n+  __builtin_init_dwarf_reg_size_table (dwarf_reg_size_table);\n+}\n+\n static void\n uw_init_context_1 (struct _Unwind_Context *context,\n \t\t   void *outer_cfa, void *outer_ra)\n {\n   void *ra = __builtin_extract_return_addr (__builtin_return_address (0));\n   _Unwind_FrameState fs;\n-  _Unwind_Word sp_slot;\n+  _Unwind_SpTmp sp_slot;\n \n   memset (context, 0, sizeof (struct _Unwind_Context));\n   context->ra = ra;\n \n   if (uw_frame_state_for (context, &fs) != _URC_NO_REASON)\n     abort ();\n \n+#if __GTHREADS\n+  {\n+    static __gthread_once_t once_regsizes = __GTHREAD_ONCE_INIT;\n+    if (__gthread_once (&once_regsizes, init_dwarf_reg_size_table) != 0\n+\t|| dwarf_reg_size_table[0] == 0)\n+      init_dwarf_reg_size_table ();\n+  }\n+#else\n+  if (dwarf_reg_size_table[0] == 0)\n+    init_dwarf_reg_size_table ();\n+#endif\n+\n   /* Force the frame state to use the known cfa value.  */\n-  sp_slot = (_Unwind_Ptr) outer_cfa;\n-  _Unwind_SetGRPtr (context, __builtin_dwarf_sp_column (), &sp_slot);\n+  _Unwind_SetSpColumn (context, outer_cfa, &sp_slot);\n   fs.cfa_how = CFA_REG_OFFSET;\n   fs.cfa_reg = __builtin_dwarf_sp_column ();\n   fs.cfa_offset = 0;\n@@ -1235,30 +1295,12 @@ uw_init_context_1 (struct _Unwind_Context *context,\n     }\t\t\t\t\t\t\t\t\t \\\n   while (0)\n \n-static inline void\n-init_dwarf_reg_size_table (void)\n-{\n-  __builtin_init_dwarf_reg_size_table (dwarf_reg_size_table);\n-}\n-\n static long\n uw_install_context_1 (struct _Unwind_Context *current,\n \t\t      struct _Unwind_Context *target)\n {\n   long i;\n \n-#if __GTHREADS\n-  {\n-    static __gthread_once_t once_regsizes = __GTHREAD_ONCE_INIT;\n-    if (__gthread_once (&once_regsizes, init_dwarf_reg_size_table) != 0\n-\t|| dwarf_reg_size_table[0] == 0)\n-      init_dwarf_reg_size_table ();\n-  }\n-#else\n-  if (dwarf_reg_size_table[0] == 0)\n-    init_dwarf_reg_size_table ();\n-#endif\n-\n   for (i = 0; i < DWARF_FRAME_REGISTERS; ++i)\n     {\n       void *c = current->reg[i];\n@@ -1274,8 +1316,7 @@ uw_install_context_1 (struct _Unwind_Context *current,\n \n     /* If the last frame records a saved stack pointer, use it.  */\n     if (_Unwind_GetGRPtr (target, __builtin_dwarf_sp_column ()))\n-      target_cfa = (void *)(_Unwind_Ptr)\n-        _Unwind_GetGR (target, __builtin_dwarf_sp_column ());\n+      target_cfa = _Unwind_GetPtr (target, __builtin_dwarf_sp_column ());\n     else\n       target_cfa = target->cfa;\n "}]}