{"sha": "99e757d5101bd235e7d8915eaeefc76515876b55", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTllNzU3ZDUxMDFiZDIzNWU3ZDg5MTVlYWVlZmM3NjUxNTg3NmI1NQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-04-24T17:45:50Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-04-24T17:45:50Z"}, "message": "aclocal.m4: (GCC_HEADER_STRING...\n\n        * aclocal.m4: (GCC_HEADER_STRING, GCC_NEED_DECLARATION,\n        GCC_NEED_DECLARATIONS, GCC_FUNC_VFPRINTF_DOPRNT,\n        GCC_FUNC_PRINTF_PTR, GCC_PROG_LN_S, GCC_PROG_LN, GCC_C_VOLATILE,\n        AC_GCC_C_LONG_DOUBLE, GCC_FUNC_MKDIR_TAKES_ONE_ARG,\n        EGCS_PROG_INSTALL): Rename autoconf macros with prefix gcc_AC_.\n\n        * configure.in (AC_GCC_C_LONG_DOUBLE, GCC_PROG_LN, GCC_PROG_LN_S,\n        GCC_C_VOLATILE, EGCS_PROG_INSTALL, GCC_HEADER_STRING,\n        GCC_FUNC_VFPRINTF_DOPRNT, GCC_FUNC_PRINTF_PTR,\n        GCC_NEED_DECLARATIONS, GCC_FUNC_MKDIR_TAKES_ONE_ARG): Invoke with\n        new macros names.\n\nFrom-SVN: r33383", "tree": {"sha": "dc4bdec96d6ecd6e81d4e819e8fd6e06444e0e68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc4bdec96d6ecd6e81d4e819e8fd6e06444e0e68"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99e757d5101bd235e7d8915eaeefc76515876b55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99e757d5101bd235e7d8915eaeefc76515876b55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99e757d5101bd235e7d8915eaeefc76515876b55", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99e757d5101bd235e7d8915eaeefc76515876b55/comments", "author": null, "committer": null, "parents": [{"sha": "be961d574a12d21dfce8b5c924326ca0360a5d2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be961d574a12d21dfce8b5c924326ca0360a5d2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be961d574a12d21dfce8b5c924326ca0360a5d2c"}], "stats": {"total": 72, "additions": 43, "deletions": 29}, "files": [{"sha": "db80273433cec33c639892d9c0f859caf9d287fd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e757d5101bd235e7d8915eaeefc76515876b55/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e757d5101bd235e7d8915eaeefc76515876b55/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=99e757d5101bd235e7d8915eaeefc76515876b55", "patch": "@@ -1,3 +1,17 @@\n+2000-04-24  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* aclocal.m4: (GCC_HEADER_STRING, GCC_NEED_DECLARATION,\n+\tGCC_NEED_DECLARATIONS, GCC_FUNC_VFPRINTF_DOPRNT,\n+\tGCC_FUNC_PRINTF_PTR, GCC_PROG_LN_S, GCC_PROG_LN, GCC_C_VOLATILE,\n+\tAC_GCC_C_LONG_DOUBLE, GCC_FUNC_MKDIR_TAKES_ONE_ARG,\n+\tEGCS_PROG_INSTALL): Rename autoconf macros with prefix gcc_AC_.\n+\n+\t* configure.in (AC_GCC_C_LONG_DOUBLE, GCC_PROG_LN, GCC_PROG_LN_S,\n+\tGCC_C_VOLATILE, EGCS_PROG_INSTALL, GCC_HEADER_STRING,\n+\tGCC_FUNC_VFPRINTF_DOPRNT, GCC_FUNC_PRINTF_PTR,\n+\tGCC_NEED_DECLARATIONS, GCC_FUNC_MKDIR_TAKES_ONE_ARG): Invoke with\n+\tnew macros names.\n+\n 2000-04-24  Mumit Khan  <khan@xraylith.wisc.edu>\n \n \t* c-pragma.c (push_alignment): Use BITS_PER_UNIT macro. "}, {"sha": "259317170b78cf8fafc5ab52831078f94ac73e16", "filename": "gcc/aclocal.m4", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e757d5101bd235e7d8915eaeefc76515876b55/gcc%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e757d5101bd235e7d8915eaeefc76515876b55/gcc%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Faclocal.m4?ref=99e757d5101bd235e7d8915eaeefc76515876b55", "patch": "@@ -1,5 +1,5 @@\n dnl See whether we can include both string.h and strings.h.\n-AC_DEFUN(GCC_HEADER_STRING,\n+AC_DEFUN(gcc_AC_HEADER_STRING,\n [AC_CACHE_CHECK([whether string.h and strings.h may both be included],\n   gcc_cv_header_string,\n [AC_TRY_COMPILE([#include <string.h>\n@@ -10,8 +10,8 @@ fi\n ])\n \n dnl See whether we need a declaration for a function.\n-dnl GCC_NEED_DECLARATION(FUNCTION [, EXTRA-HEADER-FILES])\n-AC_DEFUN(GCC_NEED_DECLARATION,\n+dnl gcc_AC_NEED_DECLARATION(FUNCTION [, EXTRA-HEADER-FILES])\n+AC_DEFUN(gcc_AC_NEED_DECLARATION,\n [AC_MSG_CHECKING([whether $1 must be declared])\n AC_CACHE_VAL(gcc_cv_decl_needed_$1,\n [AC_TRY_COMPILE([\n@@ -57,17 +57,17 @@ fi\n ])dnl\n \n dnl Check multiple functions to see whether each needs a declaration.\n-dnl GCC_NEED_DECLARATIONS(FUNCTION... [, EXTRA-HEADER-FILES])\n-AC_DEFUN(GCC_NEED_DECLARATIONS,\n+dnl gcc_AC_NEED_DECLARATIONS(FUNCTION... [, EXTRA-HEADER-FILES])\n+AC_DEFUN(gcc_AC_NEED_DECLARATIONS,\n [for ac_func in $1\n do\n-GCC_NEED_DECLARATION($ac_func, $2)\n+gcc_AC_NEED_DECLARATION($ac_func, $2)\n done\n ])\n \n dnl Check if we have vprintf and possibly _doprnt.\n dnl Note autoconf checks for vprintf even though we care about vfprintf.\n-AC_DEFUN(GCC_FUNC_VFPRINTF_DOPRNT,\n+AC_DEFUN(gcc_AC_FUNC_VFPRINTF_DOPRNT,\n [AC_FUNC_VPRINTF\n vfprintf=\n doprint=\n@@ -82,7 +82,7 @@ AC_SUBST(doprint)\n ])    \n \n dnl See if the printf functions in libc support %p in format strings.\n-AC_DEFUN(GCC_FUNC_PRINTF_PTR,\n+AC_DEFUN(gcc_AC_FUNC_PRINTF_PTR,\n [AC_CACHE_CHECK(whether the printf functions support %p,\n   gcc_cv_func_printf_ptr,\n [AC_TRY_RUN([#include <stdio.h>\n@@ -103,7 +103,7 @@ fi\n ])\n \n dnl See if symbolic links work and if not, try to substitute either hard links or simple copy.\n-AC_DEFUN(GCC_PROG_LN_S,\n+AC_DEFUN(gcc_AC_PROG_LN_S,\n [AC_MSG_CHECKING(whether ln -s works)\n AC_CACHE_VAL(gcc_cv_prog_LN_S,\n [rm -f conftestdata_t\n@@ -135,7 +135,7 @@ AC_SUBST(LN_S)dnl\n ])\n \n dnl See if hard links work and if not, try to substitute either symbolic links or simple copy.\n-AC_DEFUN(GCC_PROG_LN,\n+AC_DEFUN(gcc_AC_PROG_LN,\n [AC_MSG_CHECKING(whether ln works)\n AC_CACHE_VAL(gcc_cv_prog_LN,\n [rm -f conftestdata_t\n@@ -167,7 +167,7 @@ AC_SUBST(LN)dnl\n ])\n \n dnl See whether the stage1 host compiler accepts the volatile keyword.\n-AC_DEFUN(GCC_C_VOLATILE,\n+AC_DEFUN(gcc_AC_C_VOLATILE,\n [AC_CACHE_CHECK([for volatile], gcc_cv_c_volatile,\n [AC_TRY_COMPILE(, [volatile int foo;],\n         gcc_cv_c_volatile=yes, gcc_cv_c_volatile=no)])\n@@ -178,7 +178,7 @@ fi\n \n dnl Check whether long double is supported.  This differs from the\n dnl built-in autoconf test in that it works for cross compiles.\n-AC_DEFUN(AC_GCC_C_LONG_DOUBLE,\n+AC_DEFUN(gcc_AC_C_LONG_DOUBLE,\n [AC_CACHE_CHECK(for long double, gcc_cv_c_long_double,\n [if test \"$GCC\" = yes; then\n   gcc_cv_c_long_double=yes\n@@ -197,7 +197,7 @@ fi\n \n dnl Define MKDIR_TAKES_ONE_ARG if mkdir accepts only one argument instead\n dnl of the usual 2.\n-AC_DEFUN(GCC_FUNC_MKDIR_TAKES_ONE_ARG,\n+AC_DEFUN(gcc_AC_FUNC_MKDIR_TAKES_ONE_ARG,\n [AC_CACHE_CHECK([if mkdir takes one argument], gcc_cv_mkdir_takes_one_arg,\n [AC_TRY_COMPILE([\n #include <sys/types.h>\n@@ -216,7 +216,7 @@ if test $gcc_cv_mkdir_takes_one_arg = yes ; then\n fi\n ])\n \n-AC_DEFUN(EGCS_PROG_INSTALL,\n+AC_DEFUN(gcc_AC_PROG_INSTALL,\n [AC_REQUIRE([AC_CONFIG_AUX_DIR_DEFAULT])dnl\n # Find a good install program.  We prefer a C program (faster),\n # so one script is as good as another.  But avoid the broken or"}, {"sha": "69fc80fba73a553dd003ddbcdb4e6875add65191", "filename": "gcc/configure", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e757d5101bd235e7d8915eaeefc76515876b55/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e757d5101bd235e7d8915eaeefc76515876b55/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=99e757d5101bd235e7d8915eaeefc76515876b55", "patch": "@@ -6734,7 +6734,7 @@ else\n int main() {\n \n /* Ultrix mips cc rejects this.  */\n-typedef int charset[2]; const charset x = {0,0};\n+typedef int charset[2]; const charset x;\n /* SunOS 4.1.1 cc rejects this.  */\n char const *const *ccp;\n char **p;\n@@ -6809,7 +6809,7 @@ for ac_kw in inline __inline__ __inline; do\n #include \"confdefs.h\"\n \n int main() {\n-} int $ac_kw foo() {\n+} $ac_kw foo() {\n ; return 0; }\n EOF\n if { (eval echo configure:6816: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n@@ -6915,7 +6915,7 @@ else\n #include \"confdefs.h\"\n #include <alloca.h>\n int main() {\n-void *p = alloca(2 * sizeof(int));\n+char *p = alloca(2 * sizeof(int));\n ; return 0; }\n EOF\n if { (eval echo configure:6922: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then"}, {"sha": "ce58f69858ba8c9d9ddab215ea148c13335a40a0", "filename": "gcc/configure.in", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e757d5101bd235e7d8915eaeefc76515876b55/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e757d5101bd235e7d8915eaeefc76515876b55/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=99e757d5101bd235e7d8915eaeefc76515876b55", "patch": "@@ -287,7 +287,7 @@ AC_CANONICAL_SYSTEM\n \n # Find the native compiler\n AC_PROG_CC\n-AC_GCC_C_LONG_DOUBLE\n+gcc_AC_C_LONG_DOUBLE\n \n # If the native compiler is GCC, we can enable warnings even in stage1.  \n # That's useful for people building cross-compilers, or just running a\n@@ -326,16 +326,16 @@ fi\n # Find some useful tools\n AC_PROG_AWK\n AC_PROG_LEX\n-GCC_PROG_LN\n-GCC_PROG_LN_S\n-GCC_C_VOLATILE\n+gcc_AC_PROG_LN\n+gcc_AC_PROG_LN_S\n+gcc_AC_C_VOLATILE\n AC_PROG_RANLIB\n AC_PROG_YACC\n-EGCS_PROG_INSTALL\n+gcc_AC_PROG_INSTALL\n \n AC_HEADER_STDC\n AC_HEADER_TIME\n-GCC_HEADER_STRING\n+gcc_AC_HEADER_STRING\n AC_HEADER_SYS_WAIT\n AC_CHECK_HEADERS(limits.h stddef.h string.h strings.h stdlib.h time.h \\\n \t\t fcntl.h unistd.h stab.h sys/file.h sys/time.h \\\n@@ -397,8 +397,8 @@ AC_CHECK_FUNCS(strtoul bsearch putenv popen bcopy bzero bcmp \\\n # Make sure wchar_t is available\n #AC_CHECK_TYPE(wchar_t, unsigned int)\n \n-GCC_FUNC_VFPRINTF_DOPRNT\n-GCC_FUNC_PRINTF_PTR\n+gcc_AC_FUNC_VFPRINTF_DOPRNT\n+gcc_AC_FUNC_PRINTF_PTR\n \n case \"${host}\" in\n *-*-uwin*)\n@@ -412,25 +412,25 @@ AC_FUNC_VFORK\n AC_FUNC_MMAP_ANYWHERE\n AC_FUNC_MMAP_FILE\n \n-GCC_NEED_DECLARATIONS(bcopy bzero bcmp \\\n+gcc_AC_NEED_DECLARATIONS(bcopy bzero bcmp \\\n \tindex rindex getenv atol sbrk abort atof getcwd getwd \\\n \tstrsignal putc_unlocked fputs_unlocked strstr environ)\n \n-GCC_NEED_DECLARATIONS(malloc realloc calloc free, [\n+gcc_AC_NEED_DECLARATIONS(malloc realloc calloc free, [\n #ifdef HAVE_MALLOC_H\n #include <malloc.h>\n #endif\n ])\n \n-GCC_NEED_DECLARATIONS(getrlimit setrlimit getrusage, [\n+gcc_AC_NEED_DECLARATIONS(getrlimit setrlimit getrusage, [\n #include <sys/types.h>\n #ifdef HAVE_SYS_RESOURCE_H\n #include <sys/resource.h>\n #endif\n ])\n \n # mkdir takes a single argument on some systems. \n-GCC_FUNC_MKDIR_TAKES_ONE_ARG\n+gcc_AC_FUNC_MKDIR_TAKES_ONE_ARG\n \n # File extensions\n manext='.1'"}]}