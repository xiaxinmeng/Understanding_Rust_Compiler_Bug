{"sha": "c7c1d59b367431c350d91c1cdb460fb1bb6d6bc6", "node_id": "C_kwDOANBUbNoAKGM3YzFkNTliMzY3NDMxYzM1MGQ5MWMxY2RiNDYwZmIxYmI2ZDZiYzY", "commit": {"author": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2022-05-16T12:52:41Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-06-02T09:06:44Z"}, "message": "[Ada] Fix references to old variables that have been refactored\n\nLocal_Entity_Suppress and Global_Entity_Suppress variables referencing\ntables were refactored to Local_Suppress_Stack_Top and\nGlobal_Suppress_Stack_Top stacks back in 2007.  Fix remaining references\nto these variables.\n\ngcc/ada/\n\n\t* einfo.ads: Fix reference to Global_Entity_Suppress and\n\tLocal_Entity_Suppress variable in the comments.\n\t* sem.ads: Likewise.\n\t* sem_prag.adb: Likewise.", "tree": {"sha": "5f810d57ba147f14e0c0a80cb4b88070a664cdc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f810d57ba147f14e0c0a80cb4b88070a664cdc1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7c1d59b367431c350d91c1cdb460fb1bb6d6bc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7c1d59b367431c350d91c1cdb460fb1bb6d6bc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7c1d59b367431c350d91c1cdb460fb1bb6d6bc6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7c1d59b367431c350d91c1cdb460fb1bb6d6bc6/comments", "author": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b376b593570317195f99c65343a5856ae8c07eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b376b593570317195f99c65343a5856ae8c07eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b376b593570317195f99c65343a5856ae8c07eb"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "6182724d7079bd5c12414a9d314712ed46f998e9", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7c1d59b367431c350d91c1cdb460fb1bb6d6bc6/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7c1d59b367431c350d91c1cdb460fb1bb6d6bc6/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=c7c1d59b367431c350d91c1cdb460fb1bb6d6bc6", "patch": "@@ -605,10 +605,10 @@ package Einfo is\n \n --    Checks_May_Be_Suppressed\n --       Defined in all entities. Set if a pragma Suppress or Unsuppress\n---       mentions the entity specifically in the second argument. If this\n---       flag is set the Global_Entity_Suppress and Local_Entity_Suppress\n---       tables must be consulted to determine if there actually is an active\n---       Suppress or Unsuppress pragma that applies to the entity.\n+--       mentions the entity specifically in the second argument. If this flag\n+--       is set the global and local suppress stacks must be consulted to\n+--       determine if there actually is an active Suppress or Unsuppress pragma\n+--       that applies to the entity.\n \n --    Class_Postconditions\n --       Defined on subprogram entities. Set if the subprogram has class-wide"}, {"sha": "fa3e9bfa203d48e28c2134ef1b4ac1006713dc3a", "filename": "gcc/ada/sem.ads", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7c1d59b367431c350d91c1cdb460fb1bb6d6bc6/gcc%2Fada%2Fsem.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7c1d59b367431c350d91c1cdb460fb1bb6d6bc6/gcc%2Fada%2Fsem.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.ads?ref=c7c1d59b367431c350d91c1cdb460fb1bb6d6bc6", "patch": "@@ -327,8 +327,8 @@ package Sem is\n    --  using pragma Check_Name), are handled as follows. If a suppress or\n    --  unsuppress pragma is encountered for a given entity, then the flag\n    --  Checks_May_Be_Suppressed is set in the entity and an entry is made in\n-   --  either the Local_Entity_Suppress stack (case of pragma that appears in\n-   --  other than a package spec), or in the Global_Entity_Suppress stack (case\n+   --  either the local suppress stack (case of pragma that appears in\n+   --  other than a package spec), or in the global suppress stack (case\n    --  of pragma that appears in a package spec, which is by the rule of RM\n    --  11.5(7) applicable throughout the life of the entity). Similarly, a\n    --  Suppress/Unsuppress pragma for a non-predefined check which does not\n@@ -340,7 +340,7 @@ package Sem is\n    --  other point is that we have to make sure that we have proper nested\n    --  interaction between such specific pragmas and locally applied general\n    --  pragmas applying to all entities. This is achieved by including in the\n-   --  Local_Entity_Suppress table dummy entries with an empty Entity field\n+   --  local suppress stack dummy entries with an empty Entity field\n    --  that are applicable to all entities. A similar search is needed for any\n    --  non-predefined check even if no specific entity is involved.\n \n@@ -359,18 +359,18 @@ package Sem is\n    --  applies, and gives the right result when such pragmas are used even\n    --  in complex cases of nested Suppress and Unsuppress pragmas.\n \n-   --  The Local_Entity_Suppress and Global_Entity_Suppress stacks are handled\n-   --  using dynamic allocation and linked lists. We do not often use this\n-   --  approach in the compiler (preferring to use extensible tables instead).\n-   --  The reason we do it here is that scope stack entries save a pointer to\n-   --  the current local stack top, which is also saved and restored on scope\n-   --  exit. Furthermore for processing of generics we save pointers to the\n-   --  top of the stack, so that the local stack is actually a tree of stacks\n-   --  rather than a single stack, a structure that is easy to represent using\n-   --  linked lists, but impossible to represent using a single table. Note\n-   --  that because of the generic issue, we never release entries in these\n-   --  stacks, but that's no big deal, since we are unlikely to have a huge\n-   --  number of Suppress/Unsuppress entries in a single compilation.\n+   --  The local and global suppress stacks are handled using dynamic\n+   --  allocation and linked lists. We do not often use this approach in the\n+   --  compiler (preferring to use extensible tables instead). The reason we do\n+   --  it here is that scope stack entries save a pointer to the current local\n+   --  stack top, which is also saved and restored on scope exit. Furthermore\n+   --  for processing of generics we save pointers to the top of the stack, so\n+   --  that the local stack is actually a tree of stacks rather than a single\n+   --  stack, a structure that is easy to represent using linked lists, but\n+   --  impossible to represent using a single table. Note that because of the\n+   --  generic issue, we never release entries in these stacks, but that's no\n+   --  big deal, since we are unlikely to have a huge number of\n+   --  Suppress/Unsuppress entries in a single compilation.\n \n    type Suppress_Stack_Entry;\n    type Suppress_Stack_Entry_Ptr is access all Suppress_Stack_Entry;"}, {"sha": "487cd59f2b4d19ab995a6c0171e365fc9650ea2e", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7c1d59b367431c350d91c1cdb460fb1bb6d6bc6/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7c1d59b367431c350d91c1cdb460fb1bb6d6bc6/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=c7c1d59b367431c350d91c1cdb460fb1bb6d6bc6", "patch": "@@ -11000,7 +11000,7 @@ package body Sem_Prag is\n                Scope_Suppress.Suppress (C) := Suppress_Case;\n             end if;\n \n-            --  Also make an entry in the Local_Entity_Suppress table\n+            --  Also push an entry in the local suppress stack\n \n             Push_Local_Suppress_Stack_Entry\n               (Entity   => Empty,"}]}