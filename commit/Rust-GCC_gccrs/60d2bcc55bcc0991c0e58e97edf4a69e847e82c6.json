{"sha": "60d2bcc55bcc0991c0e58e97edf4a69e847e82c6", "node_id": "C_kwDOANBUbNoAKDYwZDJiY2M1NWJjYzA5OTFjMGU1OGU5N2VkZjRhNjllODQ3ZTgyYzY", "commit": {"author": {"name": "Philipp Tomsich", "email": "philipp.tomsich@vrull.eu", "date": "2022-10-16T10:48:26Z"}, "committer": {"name": "Philipp Tomsich", "email": "philipp.tomsich@vrull.eu", "date": "2022-11-18T20:17:50Z"}, "message": "RISC-V: Handle \"(a & twobits) == singlebit\" in branches using Zbs\n\nUse Zbs when generating a sequence for\n   \"if ((a & twobits) == singlebit) ...\"\nthat can be expressed as\n   bexti + bexti + andn.\n\ngcc/ChangeLog:\n\n\t* config/riscv/bitmanip.md\n\t(*branch<X:mode>_mask_twobits_equals_singlebit):\n\tHandle \"if ((a & T) == C)\" using Zbs, when T has 2 bits set and C\n\thas one\tof these tow bits set.\n\t* config/riscv/predicates.md (const_twobits_not_arith_operand):\n\tNew predicate.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/zbs-if_then_else-01.c: New test.", "tree": {"sha": "9a2f3f295f0e6e763fb4a3c36b068c302e8de1b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a2f3f295f0e6e763fb4a3c36b068c302e8de1b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60d2bcc55bcc0991c0e58e97edf4a69e847e82c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60d2bcc55bcc0991c0e58e97edf4a69e847e82c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60d2bcc55bcc0991c0e58e97edf4a69e847e82c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60d2bcc55bcc0991c0e58e97edf4a69e847e82c6/comments", "author": {"login": "ptomsich", "id": 14983582, "node_id": "MDQ6VXNlcjE0OTgzNTgy", "avatar_url": "https://avatars.githubusercontent.com/u/14983582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptomsich", "html_url": "https://github.com/ptomsich", "followers_url": "https://api.github.com/users/ptomsich/followers", "following_url": "https://api.github.com/users/ptomsich/following{/other_user}", "gists_url": "https://api.github.com/users/ptomsich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptomsich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptomsich/subscriptions", "organizations_url": "https://api.github.com/users/ptomsich/orgs", "repos_url": "https://api.github.com/users/ptomsich/repos", "events_url": "https://api.github.com/users/ptomsich/events{/privacy}", "received_events_url": "https://api.github.com/users/ptomsich/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ptomsich", "id": 14983582, "node_id": "MDQ6VXNlcjE0OTgzNTgy", "avatar_url": "https://avatars.githubusercontent.com/u/14983582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptomsich", "html_url": "https://github.com/ptomsich", "followers_url": "https://api.github.com/users/ptomsich/followers", "following_url": "https://api.github.com/users/ptomsich/following{/other_user}", "gists_url": "https://api.github.com/users/ptomsich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptomsich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptomsich/subscriptions", "organizations_url": "https://api.github.com/users/ptomsich/orgs", "repos_url": "https://api.github.com/users/ptomsich/repos", "events_url": "https://api.github.com/users/ptomsich/events{/privacy}", "received_events_url": "https://api.github.com/users/ptomsich/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc6beecb4d64fcd82988f840fdad45a69d73c7bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc6beecb4d64fcd82988f840fdad45a69d73c7bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc6beecb4d64fcd82988f840fdad45a69d73c7bb"}], "stats": {"total": 67, "additions": 67, "deletions": 0}, "files": [{"sha": "58bac7231e335243e07892fc465998087a9f53e8", "filename": "gcc/config/riscv/bitmanip.md", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60d2bcc55bcc0991c0e58e97edf4a69e847e82c6/gcc%2Fconfig%2Friscv%2Fbitmanip.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60d2bcc55bcc0991c0e58e97edf4a69e847e82c6/gcc%2Fconfig%2Friscv%2Fbitmanip.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fbitmanip.md?ref=60d2bcc55bcc0991c0e58e97edf4a69e847e82c6", "patch": "@@ -595,3 +595,45 @@\n \toperands[3] = GEN_INT (bits | topbit);\n \toperands[4] = GEN_INT (~topbit);\n })\n+\n+;; IF_THEN_ELSE: test for 2 bits of opposite polarity\n+(define_insn_and_split \"*branch<X:mode>_mask_twobits_equals_singlebit\"\n+  [(set (pc)\n+\t(if_then_else\n+\t  (match_operator 1 \"equality_operator\"\n+\t    [(and:X (match_operand:X 2 \"register_operand\" \"r\")\n+\t\t    (match_operand:X 3 \"const_twobits_not_arith_operand\" \"i\"))\n+\t     (match_operand:X 4 \"single_bit_mask_operand\" \"i\")])\n+\t (label_ref (match_operand 0 \"\" \"\"))\n+\t (pc)))\n+   (clobber (match_scratch:X 5 \"=&r\"))\n+   (clobber (match_scratch:X 6 \"=&r\"))]\n+  \"TARGET_ZBS && TARGET_ZBB\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 5) (zero_extract:X (match_dup 2)\n+\t\t\t\t      (const_int 1)\n+\t\t\t\t      (match_dup 8)))\n+   (set (match_dup 6) (zero_extract:X (match_dup 2)\n+\t\t\t\t      (const_int 1)\n+\t\t\t\t      (match_dup 9)))\n+   (set (match_dup 6) (and:X (not:X (match_dup 6)) (match_dup 5)))\n+   (set (pc) (if_then_else (match_op_dup 1 [(match_dup 6) (const_int 0)])\n+\t\t\t   (label_ref (match_dup 0))\n+\t\t\t   (pc)))]\n+{\n+   unsigned HOST_WIDE_INT twobits_mask = UINTVAL (operands[3]);\n+   unsigned HOST_WIDE_INT singlebit_mask = UINTVAL (operands[4]);\n+\n+   /* We should never see an unsatisfiable condition.  */\n+   gcc_assert (twobits_mask & singlebit_mask);\n+\n+   int setbit = ctz_hwi (singlebit_mask);\n+   int clearbit = ctz_hwi (twobits_mask & ~singlebit_mask);\n+\n+   operands[1] = gen_rtx_fmt_ee (GET_CODE (operands[1]) == NE ? EQ : NE,\n+\t\t\t\t <X:MODE>mode, operands[6], GEN_INT(0));\n+\n+   operands[8] = GEN_INT (setbit);\n+   operands[9] = GEN_INT (clearbit);\n+})"}, {"sha": "dfd98761b8b5545f46e8c7b1da882c35411a7d76", "filename": "gcc/config/riscv/predicates.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60d2bcc55bcc0991c0e58e97edf4a69e847e82c6/gcc%2Fconfig%2Friscv%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60d2bcc55bcc0991c0e58e97edf4a69e847e82c6/gcc%2Fconfig%2Friscv%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fpredicates.md?ref=60d2bcc55bcc0991c0e58e97edf4a69e847e82c6", "patch": "@@ -310,6 +310,11 @@\n   (and (match_code \"const_int\")\n        (match_test \"popcount_hwi (UINTVAL (op)) == 2\")))\n \n+(define_predicate \"const_twobits_not_arith_operand\"\n+  (and (match_code \"const_int\")\n+       (and (not (match_operand 0 \"arith_operand\"))\n+\t    (match_operand 0 \"const_twobits_operand\"))))\n+\n ;; A CONST_INT operand that fits into the unsigned half of a\n ;; signed-immediate after the top bit has been cleared\n (define_predicate \"uimm_extra_bit_operand\""}, {"sha": "d249a841ff9cbc083bd9f0300e256e6a5f435fcf", "filename": "gcc/testsuite/gcc.target/riscv/zbs-if_then_else-01.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60d2bcc55bcc0991c0e58e97edf4a69e847e82c6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbs-if_then_else-01.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60d2bcc55bcc0991c0e58e97edf4a69e847e82c6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbs-if_then_else-01.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbs-if_then_else-01.c?ref=60d2bcc55bcc0991c0e58e97edf4a69e847e82c6", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gc_zbb_zbs -mabi=lp64\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-O0\" \"-Og\" \"-O1\" } } */\n+\n+void g();\n+\n+void f1 (long a)\n+{\n+  if ((a & ((1ul << 33) | (1 << 4))) == (1ul << 33))\n+    g();\n+}\n+\n+void f2 (long a)\n+{\n+  if ((a & 0x12) == 0x10)\n+    g();\n+}\n+\n+/* { dg-final { scan-assembler-times \"bexti\\t\" 2 } } */\n+/* { dg-final { scan-assembler-times \"andn\\t\" 1 } } */"}]}