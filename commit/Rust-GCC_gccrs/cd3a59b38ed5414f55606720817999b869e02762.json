{"sha": "cd3a59b38ed5414f55606720817999b869e02762", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2QzYTU5YjM4ZWQ1NDE0ZjU1NjA2NzIwODE3OTk5Yjg2OWUwMjc2Mg==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2007-05-26T02:02:37Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2007-05-26T02:02:37Z"}, "message": "mips.c (mips_attribute_table): Add \"near\" and \"far\" function attributes, \"far\" being an alias for \"long_call\".\n\n2007-05-25  Sandra Loosemore  <sandra@codesourcery.com>\n\t    Nigel Stephens  <nigel@mips.com>\n\n\tgcc/\n\t* config/mips/mips.c (mips_attribute_table): Add \"near\" and \"far\"\n\tfunction attributes, \"far\" being an alias for \"long_call\".\n\t(TARGET_COMP_TYPE_ATTRIBUTES): Define as mips_comp_type_attributes.\n\t(mips_near_type_p, mips_far_type_p): New.\n\t(mips_comp_type_attributes): New function to check that attributes\n\tattached to a function type are compatible.\n\t(mips_output_mi_thunk): Test SYMBOL_REF_LONG_CALL_P() rather than\n\tTARGET_LONG_CALLS when deciding\twhether we can do a direct sibcall\n\tto the target function of the thunk.\n\t(mips_encode_section_info): Check for \"near\" and \"far\" function\n\tattributes, and always set the SYMBOL_FLAG_LONG_CALL bit explicitly.\n\n\t* config/mips/predicates.md (const_call_insn_operand): Test only\n\tSYMBOL_REF_LONG_CALL_P() and not TARGET_LONG_CALLS.\n\n\t* doc/extend.texi (Function Attributes): Document MIPS \"near\" and\n\t\"far\" attributes.\n\n\t* testsuite/gcc.target/mips/near-far-1.c:  New test case.\n\t* testsuite/gcc.target/mips/near-far-2.c:  New test case.\n\t* testsuite/gcc.target/mips/near-far-3.c:  New test case.\n\t* testsuite/gcc.target/mips/near-far-4.c:  New test case.\n\nCo-Authored-By: Nigel Stephens <nigel@mips.com>\n\nFrom-SVN: r125086", "tree": {"sha": "93fc294792273907df1fb67c31af6acf379bd425", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93fc294792273907df1fb67c31af6acf379bd425"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd3a59b38ed5414f55606720817999b869e02762", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd3a59b38ed5414f55606720817999b869e02762", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd3a59b38ed5414f55606720817999b869e02762", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd3a59b38ed5414f55606720817999b869e02762/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8536ebb582cb5f4a7d78342ac9e8bd0f7f065503", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8536ebb582cb5f4a7d78342ac9e8bd0f7f065503", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8536ebb582cb5f4a7d78342ac9e8bd0f7f065503"}], "stats": {"total": 179, "additions": 166, "deletions": 13}, "files": [{"sha": "79bb878276aa3e21077a24849a2e52642cc9bb6a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd3a59b38ed5414f55606720817999b869e02762/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd3a59b38ed5414f55606720817999b869e02762/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cd3a59b38ed5414f55606720817999b869e02762", "patch": "@@ -1,3 +1,29 @@\n+2007-05-25  Sandra Loosemore  <sandra@codesourcery.com>\n+\t    Nigel Stephens  <nigel@mips.com>\n+\n+\t* config/mips/mips.c (mips_attribute_table): Add \"near\" and \"far\"\n+\tfunction attributes, \"far\" being an alias for \"long_call\".\n+\t(TARGET_COMP_TYPE_ATTRIBUTES): Define as mips_comp_type_attributes.\n+\t(mips_near_type_p, mips_far_type_p): New.\n+\t(mips_comp_type_attributes): New function to check that attributes\n+\tattached to a function type are compatible.\n+\t(mips_output_mi_thunk): Test SYMBOL_REF_LONG_CALL_P() rather than\n+\tTARGET_LONG_CALLS when deciding\twhether we can do a direct sibcall\n+\tto the target function of the thunk.\n+\t(mips_encode_section_info): Check for \"near\" and \"far\" function\n+\tattributes, and always set the SYMBOL_FLAG_LONG_CALL bit explicitly.\n+\n+\t* config/mips/predicates.md (const_call_insn_operand): Test only\n+\tSYMBOL_REF_LONG_CALL_P() and not TARGET_LONG_CALLS.\n+\n+\t* doc/extend.texi (Function Attributes): Document MIPS \"near\" and\n+\t\"far\" attributes.\n+\n+\t* testsuite/gcc.target/mips/near-far-1.c:  New test case.\n+\t* testsuite/gcc.target/mips/near-far-2.c:  New test case.\n+\t* testsuite/gcc.target/mips/near-far-3.c:  New test case.\n+\t* testsuite/gcc.target/mips/near-far-4.c:  New test case.\n+\n 2007-05-25  Eric Christopher  <echristo@apple.com>\n \n \t* config.gcc: Add i386/t-fprules-softfp64 and soft-fp/t-softfp"}, {"sha": "ba36ecec2338c0d855867294571da14735cff713", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 50, "deletions": 4, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd3a59b38ed5414f55606720817999b869e02762/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd3a59b38ed5414f55606720817999b869e02762/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=cd3a59b38ed5414f55606720817999b869e02762", "patch": "@@ -411,6 +411,7 @@ static rtx mips_expand_builtin_compare (enum mips_builtin_type,\n static rtx mips_expand_builtin_bposge (enum mips_builtin_type, rtx);\n static void mips_encode_section_info (tree, rtx, int);\n static void mips_extra_live_on_entry (bitmap);\n+static int mips_comp_type_attributes (tree, tree);\n static int mips_mode_rep_extended (enum machine_mode, enum machine_mode);\n static bool mips_offset_within_alignment_p (rtx, HOST_WIDE_INT);\n \n@@ -685,6 +686,8 @@ const enum reg_class mips_regno_to_class[] =\n const struct attribute_spec mips_attribute_table[] =\n {\n   { \"long_call\",   0, 0, false, true,  true,  NULL },\n+  { \"far\",     \t   0, 0, false, true,  true,  NULL },\n+  { \"near\",        0, 0, false, true,  true,  NULL },\n   { NULL,\t   0, 0, false, false, false, NULL }\n };\n \f\n@@ -1249,7 +1252,48 @@ static struct mips_rtx_cost_data const mips_rtx_cost_data[PROCESSOR_MAX] =\n #undef TARGET_USE_ANCHORS_FOR_SYMBOL_P\n #define TARGET_USE_ANCHORS_FOR_SYMBOL_P mips_use_anchors_for_symbol_p\n \n+#undef  TARGET_COMP_TYPE_ATTRIBUTES\n+#define TARGET_COMP_TYPE_ATTRIBUTES mips_comp_type_attributes\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n+\n+\n+/* Predicates to test for presence of \"near\" and \"far\"/\"long_call\"\n+   attributes on the given TYPE.  */\n+\n+static bool\n+mips_near_type_p (tree type)\n+{\n+  return lookup_attribute (\"near\", TYPE_ATTRIBUTES (type)) != NULL;\n+}\n+\n+static bool\n+mips_far_type_p (tree type)\n+{\n+  return (lookup_attribute (\"long_call\", TYPE_ATTRIBUTES (type)) != NULL\n+\t  || lookup_attribute (\"far\", TYPE_ATTRIBUTES (type)) != NULL);\n+}\n+\n+\n+/* Return 0 if the attributes for two types are incompatible, 1 if they\n+   are compatible, and 2 if they are nearly compatible (which causes a\n+   warning to be generated).  */\n+\n+static int\n+mips_comp_type_attributes (tree type1, tree type2)\n+{\n+  /* Check for mismatch of non-default calling convention.  */\n+  if (TREE_CODE (type1) != FUNCTION_TYPE)\n+    return 1;\n+\n+  /* Disallow mixed near/far attributes.  */\n+  if (mips_far_type_p (type1) && mips_near_type_p (type2))\n+    return 0;\n+  if (mips_near_type_p (type1) && mips_far_type_p (type2))\n+    return 0;\n+\n+  return 1;\n+}\n \f\n /* Return true if SYMBOL_REF X is associated with a global symbol\n    (in the STB_GLOBAL sense).  */\n@@ -7332,7 +7376,7 @@ mips_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n   /* Jump to the target function.  Use a sibcall if direct jumps are\n      allowed, otherwise load the address into a register first.  */\n   fnaddr = XEXP (DECL_RTL (function), 0);\n-  if (TARGET_MIPS16 || TARGET_USE_GOT || TARGET_LONG_CALLS)\n+  if (TARGET_MIPS16 || TARGET_USE_GOT || SYMBOL_REF_LONG_CALL_P (fnaddr))\n     {\n       /* This is messy.  gas treats \"la $25,foo\" as part of a call\n \t sequence and may allow a global \"foo\" to be lazily bound.\n@@ -11139,11 +11183,13 @@ mips_encode_section_info (tree decl, rtx rtl, int first)\n {\n   default_encode_section_info (decl, rtl, first);\n \n-  if (TREE_CODE (decl) == FUNCTION_DECL\n-      && lookup_attribute (\"long_call\", TYPE_ATTRIBUTES (TREE_TYPE (decl))))\n+  if (TREE_CODE (decl) == FUNCTION_DECL)\n     {\n       rtx symbol = XEXP (rtl, 0);\n-      SYMBOL_REF_FLAGS (symbol) |= SYMBOL_FLAG_LONG_CALL;\n+\n+      if ((TARGET_LONG_CALLS && !mips_near_type_p (TREE_TYPE (decl)))\n+\t  || mips_far_type_p (TREE_TYPE (decl)))\n+\tSYMBOL_REF_FLAGS (symbol) |= SYMBOL_FLAG_LONG_CALL;\n     }\n }\n "}, {"sha": "fbe3ab44bed2c51aad1c866d4c1ec25a1c48249d", "filename": "gcc/config/mips/predicates.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd3a59b38ed5414f55606720817999b869e02762/gcc%2Fconfig%2Fmips%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd3a59b38ed5414f55606720817999b869e02762/gcc%2Fconfig%2Fmips%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fpredicates.md?ref=cd3a59b38ed5414f55606720817999b869e02762", "patch": "@@ -113,10 +113,10 @@\n \t       && !DECL_EXTERNAL (SYMBOL_REF_DECL (op))))\n \treturn false;\n \n-      /* If -mlong-calls, force all calls to use register addressing.  Also,\n-\t if this function has the long_call attribute, we must use register\n-\t addressing.  */\n-      return !TARGET_LONG_CALLS && !SYMBOL_REF_LONG_CALL_P (op);\n+      /* If -mlong-calls or if this function has an explicit long_call\n+\t attribute, we must use register addressing.  The\n+\t SYMBOL_FLAG_LONG_CALL bit is set by mips_encode_section_info.  */\n+      return !SYMBOL_REF_LONG_CALL_P (op);\n \n     case SYMBOL_GOT_DISP:\n       /* Without explicit relocs, there is no special syntax for"}, {"sha": "e1104dcc4748b4308eec8a75cef68a95cdb9c29f", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd3a59b38ed5414f55606720817999b869e02762/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd3a59b38ed5414f55606720817999b869e02762/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=cd3a59b38ed5414f55606720817999b869e02762", "patch": "@@ -2110,13 +2110,16 @@ PowerPC, the @code{#pragma longcall} setting.\n @xref{RS/6000 and PowerPC Options}, for more information on whether long\n calls are necessary.\n \n-@item long_call\n+@item long_call/near/far\n @cindex indirect calls on MIPS\n-This attribute specifies how a particular function is called on MIPS@.\n-The attribute overrides the @option{-mlong-calls} (@pxref{MIPS Options})\n-command line switch.  This attribute causes the compiler to always call\n+These attributes specify how a particular function is called on MIPS@.\n+The attributes override the @option{-mlong-calls} (@pxref{MIPS Options})\n+command-line switch.  The @code{long_call} and @code{far} attributes are\n+synonyms, and cause the compiler to always call\n the function by first loading its address into a register, and then using\n-the contents of that register.\n+the contents of that register.  The @code{near} attribute has the opposite\n+effect; it specifies that non-PIC calls should be made using the more \n+efficient @code{jal} instruction.\n \n @item malloc\n @cindex @code{malloc} attribute"}, {"sha": "f8bc5c93ef417bc03eb45e9c66873fad7efb9819", "filename": "gcc/testsuite/gcc.target/mips/near-far-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd3a59b38ed5414f55606720817999b869e02762/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fnear-far-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd3a59b38ed5414f55606720817999b869e02762/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fnear-far-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fnear-far-1.c?ref=cd3a59b38ed5414f55606720817999b869e02762", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-mips-options \"-mlong-calls\" } */\n+/* { dg-require-effective-target nonpic } */\n+\n+extern int long_call_func () __attribute__((long_call));\n+extern int far_func () __attribute__((far));\n+extern int near_func () __attribute__((near));\n+extern int normal_func ();\n+\n+int test ()\n+{\n+  return (long_call_func ()\n+          + far_func ()\n+          + near_func ()\n+          + normal_func ());\n+}\n+\n+/* { dg-final { scan-assembler-not \"\\tjal\\tlong_call_func\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tjal\\tfar_func\\n\" } } */\n+/* { dg-final { scan-assembler     \"\\tjal\\tnear_func\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tjal\\tnormal_func\\n\" } } */"}, {"sha": "d65c44cf9f9743f09e0eb17d7d97230763d5e8af", "filename": "gcc/testsuite/gcc.target/mips/near-far-2.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd3a59b38ed5414f55606720817999b869e02762/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fnear-far-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd3a59b38ed5414f55606720817999b869e02762/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fnear-far-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fnear-far-2.c?ref=cd3a59b38ed5414f55606720817999b869e02762", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-mips-options \"-mno-long-calls\" } */\n+/* { dg-require-effective-target nonpic } */\n+\n+extern int long_call_func () __attribute__((long_call));\n+extern int far_func () __attribute__((far));\n+extern int near_func () __attribute__((near));\n+extern int normal_func ();\n+\n+int test ()\n+{\n+  return (long_call_func ()\n+          + far_func ()\n+          + near_func ()\n+          + normal_func ());\n+}\n+\n+/* { dg-final { scan-assembler-not \"\\tjal\\tlong_call_func\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tjal\\tfar_func\\n\" } } */\n+/* { dg-final { scan-assembler     \"\\tjal\\tnear_func\\n\" } } */\n+/* { dg-final { scan-assembler     \"\\tjal\\tnormal_func\\n\" } } */"}, {"sha": "d6902cdfeb0ac227d3d0f518fe609698d9233298", "filename": "gcc/testsuite/gcc.target/mips/near-far-3.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd3a59b38ed5414f55606720817999b869e02762/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fnear-far-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd3a59b38ed5414f55606720817999b869e02762/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fnear-far-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fnear-far-3.c?ref=cd3a59b38ed5414f55606720817999b869e02762", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-mips-options \"-mlong-calls -O2 -mno-mips16\" } */\n+/* { dg-require-effective-target nonpic } */\n+\n+extern int long_call_func () __attribute__((long_call));\n+extern int far_func () __attribute__((far));\n+extern int near_func () __attribute__((near));\n+extern int normal_func ();\n+\n+int test1 () { return long_call_func (); }\n+int test2 () { return far_func (); }\n+int test3 () { return near_func (); }\n+int test4 () { return normal_func (); }\n+\n+/* { dg-final { scan-assembler-not \"\\tj\\tlong_call_func\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tj\\tfar_func\\n\" } } */\n+/* { dg-final { scan-assembler     \"\\tj\\tnear_func\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tj\\tnormal_func\\n\" } } */"}, {"sha": "7d156fabdc5260c31903cae3b73bad2265a62d9e", "filename": "gcc/testsuite/gcc.target/mips/near-far-4.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd3a59b38ed5414f55606720817999b869e02762/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fnear-far-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd3a59b38ed5414f55606720817999b869e02762/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fnear-far-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fnear-far-4.c?ref=cd3a59b38ed5414f55606720817999b869e02762", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-mips-options \"-mno-long-calls -O2 -mno-mips16\" } */\n+/* { dg-require-effective-target nonpic } */\n+\n+extern int long_call_func () __attribute__((long_call));\n+extern int far_func () __attribute__((far));\n+extern int near_func () __attribute__((near));\n+extern int normal_func ();\n+\n+int test1 () { return long_call_func (); }\n+int test2 () { return far_func (); }\n+int test3 () { return near_func (); }\n+int test4 () { return normal_func (); }\n+\n+/* { dg-final { scan-assembler-not \"\\tj\\tlong_call_func\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tj\\tfar_func\\n\" } } */\n+/* { dg-final { scan-assembler     \"\\tj\\tnear_func\\n\" } } */\n+/* { dg-final { scan-assembler     \"\\tj\\tnormal_func\\n\" } } */"}]}