{"sha": "fea3ca9130aa2ba28ea5176b647c80f2ebc7670a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmVhM2NhOTEzMGFhMmJhMjhlYTUxNzZiNjQ3YzgwZjJlYmM3NjcwYQ==", "commit": {"author": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2011-11-30T10:42:58Z"}, "committer": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2011-11-30T10:42:58Z"}, "message": "shift flag_next/gnu_runtime to modern opts system.\n\ngcc:\n\n\t* doc/tm.texi.in (NEXT_OBJC_RUNTIME): Update macro description.\n\t* doc/tm.texi: Regenerate.\n\t* flags.h (flag_next_runtime): Remove references.\n\t* toplev.c: Likewise.\n\t* defaults.h (NEXT_OBJC_RUNTIME): Provide default.\n\t* gccspec.c (lang_specific_driver): Adjust use of NEXT_OBJC_RUNTIME.\n\t* config/darwin.c (darwin_override_options): Provide default\n\tObjective-C abi settings and target conflict checks.\n\t* config/darwin.h (SUBTARGET_C_COMMON_OVERRIDE_OPTIONS): Remove unused\n\tcode. Adjust indenting.\n\ngcc/c-family:\n\n\t* c.opt (fgnu-runtime): Provide full description.\n\t(fnext-runtime): Likewise.\n\t* c-opts.c (OPT_fgnu_runtime, OPT_fnext_runtime) Remove.\n\nFrom-SVN: r181837", "tree": {"sha": "b653e1b6a2f0c5f5fadb055efeb46c96ad475c0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b653e1b6a2f0c5f5fadb055efeb46c96ad475c0e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fea3ca9130aa2ba28ea5176b647c80f2ebc7670a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fea3ca9130aa2ba28ea5176b647c80f2ebc7670a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fea3ca9130aa2ba28ea5176b647c80f2ebc7670a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fea3ca9130aa2ba28ea5176b647c80f2ebc7670a/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f14d442fcb906786e4db5b4ce010ff25fb462e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f14d442fcb906786e4db5b4ce010ff25fb462e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f14d442fcb906786e4db5b4ce010ff25fb462e7"}], "stats": {"total": 133, "additions": 81, "deletions": 52}, "files": [{"sha": "5091c39dd8d036305817f2e51b36b89e1fb3d2dd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fea3ca9130aa2ba28ea5176b647c80f2ebc7670a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fea3ca9130aa2ba28ea5176b647c80f2ebc7670a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fea3ca9130aa2ba28ea5176b647c80f2ebc7670a", "patch": "@@ -1,3 +1,16 @@\n+2011-11-30  Iain Sandoe  <iains@gcc.gnu.org>\n+\n+\t* doc/tm.texi.in (NEXT_OBJC_RUNTIME): Update macro description.\n+\t* doc/tm.texi: Regenerate.\n+\t* flags.h (flag_next_runtime): Remove references.\n+\t* toplev.c: Likewise.\n+\t* defaults.h (NEXT_OBJC_RUNTIME): Provide default.\n+\t* gccspec.c (lang_specific_driver): Adjust use of NEXT_OBJC_RUNTIME.\n+\t* config/darwin.c (darwin_override_options): Provide default\n+\tObjective-C abi settings and target conflict checks.\n+\t* config/darwin.h (SUBTARGET_C_COMMON_OVERRIDE_OPTIONS): Remove unused\n+\tcode. Adjust indenting.\n+\n 2011-11-29  Joseph Myers  <joseph@codesourcery.com>\n \n \t* config/sh/sh.h (enum reg_class, REG_CLASS_NAMES)"}, {"sha": "075da2f43b3f26e0a2b582b5403ceb940a064e5e", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fea3ca9130aa2ba28ea5176b647c80f2ebc7670a/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fea3ca9130aa2ba28ea5176b647c80f2ebc7670a/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=fea3ca9130aa2ba28ea5176b647c80f2ebc7670a", "patch": "@@ -1,3 +1,9 @@\n+2011-11-30  Iain Sandoe  <iains@gcc.gnu.org>\n+\n+\t* c.opt (fgnu-runtime): Provide full description.\n+\t(fnext-runtime): Likewise.\n+\t* c-opts.c (OPT_fgnu_runtime, OPT_fnext_runtime) Remove.\n+\n 2011-11-28  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* c-cpp-builtin.c (cpp_atomic_builtins):New.  Emit all atomic"}, {"sha": "a08b0e80a568045703f3194366e91a82157c4ca9", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fea3ca9130aa2ba28ea5176b647c80f2ebc7670a/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fea3ca9130aa2ba28ea5176b647c80f2ebc7670a/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=fea3ca9130aa2ba28ea5176b647c80f2ebc7670a", "patch": "@@ -604,14 +604,6 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n       cpp_opts->extended_identifiers = value;\n       break;\n \n-    case OPT_fgnu_runtime:\n-      flag_next_runtime = !value;\n-      break;\n-\n-    case OPT_fnext_runtime:\n-      flag_next_runtime = value;\n-      break;\n-\n     case OPT_foperator_names:\n       cpp_opts->operator_names = value;\n       break;"}, {"sha": "7694794e0c66e5d0f59fa1162dd77542d5dfb8fb", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fea3ca9130aa2ba28ea5176b647c80f2ebc7670a/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fea3ca9130aa2ba28ea5176b647c80f2ebc7670a/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=fea3ca9130aa2ba28ea5176b647c80f2ebc7670a", "patch": "@@ -810,7 +810,7 @@ C++ ObjC++ Var(flag_no_gnu_keywords, 0)\n Recognize GNU-defined keywords\n \n fgnu-runtime\n-ObjC ObjC++\n+ObjC ObjC++ Report RejectNegative Var(flag_next_runtime,0) Init(NEXT_OBJC_RUNTIME)\n Generate code for GNU runtime environment\n \n fgnu89-inline\n@@ -872,7 +872,7 @@ fnew-abi\n C++ ObjC++ Ignore Warn(switch %qs is no longer supported)\n \n fnext-runtime\n-ObjC ObjC++\n+ObjC ObjC++ Report RejectNegative Var(flag_next_runtime)\n Generate code for NeXT (Apple Mac OS X) runtime environment\n \n fnil-receivers"}, {"sha": "ba253dd7dbf6334e441203a67c5b7f35488dda72", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fea3ca9130aa2ba28ea5176b647c80f2ebc7670a/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fea3ca9130aa2ba28ea5176b647c80f2ebc7670a/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=fea3ca9130aa2ba28ea5176b647c80f2ebc7670a", "patch": "@@ -2942,6 +2942,33 @@ darwin_override_options (void)\n       /* Earlier versions are not specifically accounted, until required.  */\n     }\n \n+  /* In principle, this should be c-family only.  However, we really need to\n+     set sensible defaults for LTO as well, since the section selection stuff\n+     should check for correctness re. the ABI.  TODO: check and provide the\n+     flags (runtime & ABI) from the lto wrapper).  */\n+\n+  /* Unless set, force ABI=2 for NeXT and m64, 0 otherwise.  */\n+  if (!global_options_set.x_flag_objc_abi)\n+    global_options.x_flag_objc_abi\n+\t= (!flag_next_runtime)\n+\t\t? 0\n+\t\t: (TARGET_64BIT ? 2\n+\t\t\t\t: (generating_for_darwin_version >= 9) ? 1\n+\t\t\t\t\t\t\t\t       : 0);\n+\n+  /* Objective-C family ABI 2 is only valid for next/m64 at present.  */\n+  if (global_options_set.x_flag_objc_abi && flag_next_runtime)\n+    {\n+      if (TARGET_64BIT && global_options.x_flag_objc_abi < 2)\n+\terror_at (UNKNOWN_LOCATION, \"%<-fobjc-abi-version%> >= 2 must be\"\n+\t\t\t\t    \" used for %<-m64%> targets with\"\n+\t\t\t\t    \" %<-fnext-runtime%>\");\n+      if (!TARGET_64BIT && global_options.x_flag_objc_abi >= 2)\n+\terror_at (UNKNOWN_LOCATION, \"%<-fobjc-abi-version%> >= 2 is not\"\n+\t\t\t\t    \" supported on %<-m32%> targets with\"\n+\t\t\t\t    \" %<-fnext-runtime%>\");\n+    }\n+\n   /* Don't emit DWARF3/4 unless specifically selected.  This is a \n      workaround for tool bugs.  */\n   if (!global_options_set.x_dwarf_strict) "}, {"sha": "fd4590404bd6d4cc72f1561639afb954c8a216fa", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fea3ca9130aa2ba28ea5176b647c80f2ebc7670a/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fea3ca9130aa2ba28ea5176b647c80f2ebc7670a/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=fea3ca9130aa2ba28ea5176b647c80f2ebc7670a", "patch": "@@ -112,7 +112,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n /* Default to using the NeXT-style runtime, since that's what is\n    pre-installed on Darwin systems.  */\n \n-#define NEXT_OBJC_RUNTIME\n+#define NEXT_OBJC_RUNTIME 1\n \n /* Don't default to pcc-struct-return, because gcc is the only compiler, and\n    we want to retain compatibility with older gcc versions.  */\n@@ -140,20 +140,8 @@ extern GTY(()) int darwin_ms_struct;\n   } while (0)\n \n #define SUBTARGET_C_COMMON_OVERRIDE_OPTIONS do {                        \\\n-  /* Unless set, force ABI=2 for NeXT and m64, 0 otherwise.  */\t\t\\\n-  if (!global_options_set.x_flag_objc_abi)\t\t\t\t\\\n-    global_options.x_flag_objc_abi\t\t\t\t\t\\\n-\t= (flag_next_runtime && TARGET_64BIT) ? 2 : 0;\t\t\t\\\n-  /* Objective-C family ABI 2 is only valid for next/m64 at present. */\t\\\n-  if (global_options_set.x_flag_objc_abi && flag_next_runtime)\t\t\\\n-    if (TARGET_64BIT && global_options.x_flag_objc_abi < 2)\t\t\\\n-      error_at (UNKNOWN_LOCATION, \"%<-fobjc-abi-version%> >= 2 is only\"\t\\\n-\t\t\" supported on %<-m64%> targets for\"\t\t\t\\\n-\t\t\" %<-fnext-runtime%>\");\t\t\t\t\t\\\n-  /* Sort out ObjC exceptions: If the runtime is NeXT we default to\t\\\n-     sjlj for m32 only.  */\t\t\t\t\t\t\\\n-  if (!global_options_set.x_flag_objc_sjlj_exceptions)\t\t\t\\\n-    global_options.x_flag_objc_sjlj_exceptions = \t\t\t\\\n+    if (!global_options_set.x_flag_objc_sjlj_exceptions)\t\t\\\n+      global_options.x_flag_objc_sjlj_exceptions = \t\t\t\\\n \t\t\t\tflag_next_runtime && !TARGET_64BIT;\t\\\n     if (flag_mkernel || flag_apple_kext)\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\"}, {"sha": "0e9e2b497ba0b332284bb8462b2e8afa0577cb23", "filename": "gcc/defaults.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fea3ca9130aa2ba28ea5176b647c80f2ebc7670a/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fea3ca9130aa2ba28ea5176b647c80f2ebc7670a/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=fea3ca9130aa2ba28ea5176b647c80f2ebc7670a", "patch": "@@ -793,6 +793,11 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define ACCUMULATE_OUTGOING_ARGS 0\n #endif\n \n+/* By default, use the GNU runtime for Objective C.  */\n+#ifndef NEXT_OBJC_RUNTIME\n+#define NEXT_OBJC_RUNTIME 0\n+#endif\n+\n /* Supply a default definition for PUSH_ARGS.  */\n #ifndef PUSH_ARGS\n #ifdef PUSH_ROUNDING"}, {"sha": "c98b93c985bcd4c35f56322ea1b85dcd79601290", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fea3ca9130aa2ba28ea5176b647c80f2ebc7670a/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fea3ca9130aa2ba28ea5176b647c80f2ebc7670a/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=fea3ca9130aa2ba28ea5176b647c80f2ebc7670a", "patch": "@@ -5351,13 +5351,18 @@ void sincosl(long double x, long double *sin, long double *cos);\n @end defmac\n \n @defmac NEXT_OBJC_RUNTIME\n-Define this macro to generate code for Objective-C message sending using\n-the calling convention of the NeXT system.  This calling convention\n-involves passing the object, the selector and the method arguments all\n-at once to the method-lookup library function.\n-\n-The default calling convention passes just the object and the selector\n-to the lookup function, which returns a pointer to the method.\n+Set this macro to 1 to use the \"NeXT\" Objective-C message sending conventions\n+by default.  This calling convention involves passing the object, the selector\n+and the method arguments all at once to the method-lookup library function.\n+This is the usual setting when targeting Darwin/Mac OS X systems, which have\n+the NeXT runtime installed.\n+\n+If the macro is set to 0, the \"GNU\" Objective-C message sending convention\n+will be used by default.  This convention passes just the object and the\n+selector to the method-lookup function, which returns a pointer to the method.\n+\n+In either case, it remains possible to select code-generation for the alternate\n+scheme, by means of compiler command line switches.\n @end defmac\n \n @node Addressing Modes"}, {"sha": "d5a7d3978e3dab6b0e2d4755aa676a624f9b6fa3", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fea3ca9130aa2ba28ea5176b647c80f2ebc7670a/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fea3ca9130aa2ba28ea5176b647c80f2ebc7670a/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=fea3ca9130aa2ba28ea5176b647c80f2ebc7670a", "patch": "@@ -5289,13 +5289,18 @@ void sincosl(long double x, long double *sin, long double *cos);\n @end defmac\n \n @defmac NEXT_OBJC_RUNTIME\n-Define this macro to generate code for Objective-C message sending using\n-the calling convention of the NeXT system.  This calling convention\n-involves passing the object, the selector and the method arguments all\n-at once to the method-lookup library function.\n-\n-The default calling convention passes just the object and the selector\n-to the lookup function, which returns a pointer to the method.\n+Set this macro to 1 to use the \"NeXT\" Objective-C message sending conventions\n+by default.  This calling convention involves passing the object, the selector\n+and the method arguments all at once to the method-lookup library function.\n+This is the usual setting when targeting Darwin/Mac OS X systems, which have\n+the NeXT runtime installed.\n+\n+If the macro is set to 0, the \"GNU\" Objective-C message sending convention\n+will be used by default.  This convention passes just the object and the\n+selector to the method-lookup function, which returns a pointer to the method.\n+\n+In either case, it remains possible to select code-generation for the alternate\n+scheme, by means of compiler command line switches.\n @end defmac\n \n @node Addressing Modes"}, {"sha": "9791e1b23441616939458373da4c708b21e20f33", "filename": "gcc/flags.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fea3ca9130aa2ba28ea5176b647c80f2ebc7670a/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fea3ca9130aa2ba28ea5176b647c80f2ebc7670a/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=fea3ca9130aa2ba28ea5176b647c80f2ebc7670a", "patch": "@@ -56,10 +56,6 @@ extern bool final_insns_dump_p;\n /* Nonzero means make permerror produce warnings instead of errors.  */\n \n extern int flag_permissive;\n-\n-/* Generate code for GNU or NeXT Objective-C runtime environment.  */\n-\n-extern int flag_next_runtime;\n \f\n /* Other basic status info about current function.  */\n "}, {"sha": "e1613594fc42f91cf6a47f17fd48399ad4d31c3f", "filename": "gcc/gccspec.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fea3ca9130aa2ba28ea5176b647c80f2ebc7670a/gcc%2Fgccspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fea3ca9130aa2ba28ea5176b647c80f2ebc7670a/gcc%2Fgccspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgccspec.c?ref=fea3ca9130aa2ba28ea5176b647c80f2ebc7670a", "patch": "@@ -33,7 +33,7 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options ATTRIBUTE_UN\n   /* Systems which use the NeXT runtime by default should arrange\n      for the shared libgcc to be used when -fgnu-runtime is passed\n      through specs.  */\n-#if defined(ENABLE_SHARED_LIBGCC) && ! defined(NEXT_OBJC_RUNTIME)\n+#if defined(ENABLE_SHARED_LIBGCC) && ! NEXT_OBJC_RUNTIME\n   unsigned int i;\n \n   /* The new argument list will be contained in this.  */"}, {"sha": "766aa9917c325067f3a6f37435e1f3098054cb6c", "filename": "gcc/toplev.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fea3ca9130aa2ba28ea5176b647c80f2ebc7670a/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fea3ca9130aa2ba28ea5176b647c80f2ebc7670a/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=fea3ca9130aa2ba28ea5176b647c80f2ebc7670a", "patch": "@@ -146,14 +146,6 @@ HOST_WIDE_INT random_seed;\n \n /* -f flags.  */\n \n-/* Generate code for GNU or NeXT Objective-C runtime environment.  */\n-\n-#ifdef NEXT_OBJC_RUNTIME\n-int flag_next_runtime = 1;\n-#else\n-int flag_next_runtime = 0;\n-#endif\n-\n /* Nonzero means make permerror produce warnings instead of errors.  */\n \n int flag_permissive = 0;"}]}