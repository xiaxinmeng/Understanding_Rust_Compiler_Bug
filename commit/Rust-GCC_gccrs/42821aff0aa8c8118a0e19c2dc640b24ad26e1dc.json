{"sha": "42821aff0aa8c8118a0e19c2dc640b24ad26e1dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDI4MjFhZmYwYWE4YzgxMThhMGUxOWMyZGM2NDBiMjRhZDI2ZTFkYw==", "commit": {"author": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2011-04-08T20:18:08Z"}, "committer": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2011-04-08T20:18:08Z"}, "message": "re PR rtl-optimization/48389 (ICE: in make_edges, at cfgbuild.c:319 with -mtune=pentiumpro)\n\n\tPR middle-end/48389\n\t* jump.c (rebuild_jump_labels_1, rebuild_jump_labels_chain): New\n\tfunctions.\n\t(rebuild_jump_labels): Call rebuild_jump_labels_1.\n\t* rtl.h (rebuild_jump_labels_chain): Declare.\n\t* cfgexpand.c (gimple_expand_cfg): Initialize JUMP_LABEL also on\n        insns inserted on edges.\n\ntestsuite/\n\t* gcc.target/i386/pr48389.c: New test.\n\nFrom-SVN: r172208", "tree": {"sha": "913be8fcb10baa2e6e9e098eeb7d7b28a3bc79b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/913be8fcb10baa2e6e9e098eeb7d7b28a3bc79b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/42821aff0aa8c8118a0e19c2dc640b24ad26e1dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42821aff0aa8c8118a0e19c2dc640b24ad26e1dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42821aff0aa8c8118a0e19c2dc640b24ad26e1dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42821aff0aa8c8118a0e19c2dc640b24ad26e1dc/comments", "author": null, "committer": null, "parents": [{"sha": "ad7be0090c0276c2526887944f5f6927e20507f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad7be0090c0276c2526887944f5f6927e20507f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad7be0090c0276c2526887944f5f6927e20507f2"}], "stats": {"total": 76, "additions": 66, "deletions": 10}, "files": [{"sha": "bc6b580207d53456d149e15a5bb12fa9da2a1da5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42821aff0aa8c8118a0e19c2dc640b24ad26e1dc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42821aff0aa8c8118a0e19c2dc640b24ad26e1dc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=42821aff0aa8c8118a0e19c2dc640b24ad26e1dc", "patch": "@@ -1,3 +1,13 @@\n+2011-04-08  Michael Matz  <matz@suse.de>\n+\n+\tPR middle-end/48389\n+\t* jump.c (rebuild_jump_labels_1, rebuild_jump_labels_chain): New\n+\tfunctions.\n+\t(rebuild_jump_labels): Call rebuild_jump_labels_1.\n+\t* rtl.h (rebuild_jump_labels_chain): Declare.\n+\t* cfgexpand.c (gimple_expand_cfg): Initialize JUMP_LABEL also on\n+\tinsns inserted on edges.\n+\n 2011-04-08  Joseph Myers  <joseph@codesourcery.com>\n \n \t* config.gcc (arm*-*-*): Add arm/arm-tables.opt to extra_options.\n@@ -16,7 +26,7 @@\n \t* config/arm/t-arm ($(srcdir)/config/arm/arm-tables.opt): New.\n \t(arm.o): Update dependencies.\n \n-2011-04-08 \ufffdBasile Starynkevitch \ufffd<basile@starynkevitch.net>\n+2011-04-08  Basile Starynkevitch  <basile@starynkevitch.net>\n \n \t* gengtype.c (write_typed_alloc_def): New argument f. Use it instead\n \tof header_file."}, {"sha": "cc1382fa4dfac7881a5d34d1c2d35d9499067904", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42821aff0aa8c8118a0e19c2dc640b24ad26e1dc/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42821aff0aa8c8118a0e19c2dc640b24ad26e1dc/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=42821aff0aa8c8118a0e19c2dc640b24ad26e1dc", "patch": "@@ -4143,6 +4143,8 @@ gimple_expand_cfg (void)\n   /* Zap the tree EH table.  */\n   set_eh_throw_stmt_table (cfun, NULL);\n \n+  /* We need JUMP_LABEL be set in order to redirect jumps, and hence\n+     split edges which edge insertions might do.  */\n   rebuild_jump_labels (get_insns ());\n \n   FOR_BB_BETWEEN (bb, ENTRY_BLOCK_PTR, EXIT_BLOCK_PTR, next_bb)\n@@ -4153,6 +4155,7 @@ gimple_expand_cfg (void)\n \t{\n \t  if (e->insns.r)\n \t    {\n+\t      rebuild_jump_labels_chain (e->insns.r);\n \t      /* Avoid putting insns before parm_birth_insn.  */\n \t      if (e->src == ENTRY_BLOCK_PTR\n \t\t  && single_succ_p (ENTRY_BLOCK_PTR)"}, {"sha": "39fc2340c31085561a3bb3b0323bb028076d40fc", "filename": "gcc/jump.c", "status": "modified", "additions": 26, "deletions": 9, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42821aff0aa8c8118a0e19c2dc640b24ad26e1dc/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42821aff0aa8c8118a0e19c2dc640b24ad26e1dc/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=42821aff0aa8c8118a0e19c2dc640b24ad26e1dc", "patch": "@@ -72,12 +72,9 @@ static void redirect_exp_1 (rtx *, rtx, rtx, rtx);\n static int invert_exp_1 (rtx, rtx);\n static int returnjump_p_1 (rtx *, void *);\n \f\n-/* This function rebuilds the JUMP_LABEL field and REG_LABEL_TARGET\n-   notes in jumping insns and REG_LABEL_OPERAND notes in non-jumping\n-   instructions and jumping insns that have labels as operands\n-   (e.g. cbranchsi4).  */\n-void\n-rebuild_jump_labels (rtx f)\n+/* Worker for rebuild_jump_labels and rebuild_jump_labels_chain.  */\n+static void\n+rebuild_jump_labels_1 (rtx f, bool count_forced)\n {\n   rtx insn;\n \n@@ -89,11 +86,31 @@ rebuild_jump_labels (rtx f)\n      closely enough to delete them here, so make sure their reference\n      count doesn't drop to zero.  */\n \n-  for (insn = forced_labels; insn; insn = XEXP (insn, 1))\n-    if (LABEL_P (XEXP (insn, 0)))\n-      LABEL_NUSES (XEXP (insn, 0))++;\n+  if (count_forced)\n+    for (insn = forced_labels; insn; insn = XEXP (insn, 1))\n+      if (LABEL_P (XEXP (insn, 0)))\n+\tLABEL_NUSES (XEXP (insn, 0))++;\n   timevar_pop (TV_REBUILD_JUMP);\n }\n+\n+/* This function rebuilds the JUMP_LABEL field and REG_LABEL_TARGET\n+   notes in jumping insns and REG_LABEL_OPERAND notes in non-jumping\n+   instructions and jumping insns that have labels as operands\n+   (e.g. cbranchsi4).  */\n+void\n+rebuild_jump_labels (rtx f)\n+{\n+  rebuild_jump_labels_1 (f, true);\n+}\n+\n+/* This function is like rebuild_jump_labels, but doesn't run over\n+   forced_labels.  It can be used on insn chains that aren't the \n+   main function chain.  */\n+void\n+rebuild_jump_labels_chain (rtx chain)\n+{\n+  rebuild_jump_labels_1 (chain, false);\n+}\n \f\n /* Some old code expects exactly one BARRIER as the NEXT_INSN of a\n    non-fallthru insn.  This is not generally true, as multiple barriers"}, {"sha": "67dbf2b6ab5aea183881e9c11352bd894c33d037", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42821aff0aa8c8118a0e19c2dc640b24ad26e1dc/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42821aff0aa8c8118a0e19c2dc640b24ad26e1dc/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=42821aff0aa8c8118a0e19c2dc640b24ad26e1dc", "patch": "@@ -2315,6 +2315,7 @@ extern int redirect_jump_1 (rtx, rtx);\n extern void redirect_jump_2 (rtx, rtx, rtx, int, int);\n extern int redirect_jump (rtx, rtx, int);\n extern void rebuild_jump_labels (rtx);\n+extern void rebuild_jump_labels_chain (rtx);\n extern rtx reversed_comparison (const_rtx, enum machine_mode);\n extern enum rtx_code reversed_comparison_code (const_rtx, const_rtx);\n extern enum rtx_code reversed_comparison_code_parts (enum rtx_code, const_rtx,"}, {"sha": "4f5fb0006dbb74c8612a9ecd343ba01f4b91d51a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42821aff0aa8c8118a0e19c2dc640b24ad26e1dc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42821aff0aa8c8118a0e19c2dc640b24ad26e1dc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=42821aff0aa8c8118a0e19c2dc640b24ad26e1dc", "patch": "@@ -1,3 +1,8 @@\n+2011-04-08  Michael Matz  <matz@suse.de>\n+\n+\tPR middle-end/48389\n+\t* gcc.target/i386/pr48389.c: New test.\n+\n 2011-04-08  Andrey Belevantsev  <abel@ispras.ru>\n \n \tPR rtl-optimization/48272\n@@ -1828,6 +1833,13 @@\n \tPR fortran/47775\n \t* gfortran.dg/func_result_6.f90: New.\n \n+2011-02-18  Michael Matz  <matz@suse.de>\n+\n+\tPR fortran/45586\n+\t* gfortran.dg/lto/pr45586_0.f90: New test.\n+\t* gfortran.dg/typebound_proc_20.f90: Ditto.\n+\t* gfortran.dg/typebound_proc_21.f90: Ditto.\n+\n 2011-02-18  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/47795"}, {"sha": "d43f664d8b4f21dbc96aaba43897bb05bd244a9c", "filename": "gcc/testsuite/gcc.target/i386/pr48389.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42821aff0aa8c8118a0e19c2dc640b24ad26e1dc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr48389.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42821aff0aa8c8118a0e19c2dc640b24ad26e1dc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr48389.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr48389.c?ref=42821aff0aa8c8118a0e19c2dc640b24ad26e1dc", "patch": "@@ -0,0 +1,13 @@\n+/* PR middle-end/48389 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O -mtune=pentiumpro -Wno-abi\" } */\n+/* { dg-require-effective-target ilp32 } */\n+typedef float V2SF __attribute__ ((vector_size (128)));\n+V2SF foo (int x, V2SF a)\n+{\n+  V2SF b = {};\n+  if (x & 42)\n+    b = a;\n+  a += b;\n+  return a;\n+}"}]}