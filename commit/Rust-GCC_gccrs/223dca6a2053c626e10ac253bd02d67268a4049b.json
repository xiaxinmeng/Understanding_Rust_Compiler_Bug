{"sha": "223dca6a2053c626e10ac253bd02d67268a4049b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjIzZGNhNmEyMDUzYzYyNmUxMGFjMjUzYmQwMmQ2NzI2OGE0MDQ5Yg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-12-14T16:05:23Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-12-14T16:05:23Z"}, "message": "cppp.c (main): Set trigraphs and __STRICT_ANSI__ as appropriate for -lang-c89 and -std=*.\n\n        * cppp.c (main): Set trigraphs and __STRICT_ANSI__ as\n        appropriate for -lang-c89 and -std=*.\n        * cppinit.c (cpp_handle_option): Likewise.\n        (new_pending_define): New, split out from cpp_handle_option.\n        * gcc.c (default_compilers): Don't define __STRICT_ANSI__\n        or enable trigraphs for -ansi/-std=*.\n\n        * ginclude/stdarg.h (__va_copy): New.\n        (va_copy): Don't define for C89.\n\nFrom-SVN: r30921", "tree": {"sha": "94fb7f433efa5a20773aff67980a0d17cc9938cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94fb7f433efa5a20773aff67980a0d17cc9938cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/223dca6a2053c626e10ac253bd02d67268a4049b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/223dca6a2053c626e10ac253bd02d67268a4049b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/223dca6a2053c626e10ac253bd02d67268a4049b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/223dca6a2053c626e10ac253bd02d67268a4049b/comments", "author": null, "committer": null, "parents": [{"sha": "9e3fc4303ea57e3547a1c938d1897279859ef412", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e3fc4303ea57e3547a1c938d1897279859ef412", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e3fc4303ea57e3547a1c938d1897279859ef412"}], "stats": {"total": 124, "additions": 93, "deletions": 31}, "files": [{"sha": "4acc21470c44d374ac65eacbc4f35bb687d61e78", "filename": "gcc/cccp.c", "status": "modified", "additions": 34, "deletions": 8, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/223dca6a2053c626e10ac253bd02d67268a4049b/gcc%2Fcccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/223dca6a2053c626e10ac253bd02d67268a4049b/gcc%2Fcccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcccp.c?ref=223dca6a2053c626e10ac253bd02d67268a4049b", "patch": "@@ -1454,7 +1454,11 @@ main (argc, argv)\n \tif (! strcmp (argv[i], \"-lang-c\"))\n \t  cplusplus = 0, cplusplus_comments = 1, c89 = 0, c9x = 1, objc = 0;\n \telse if (! strcmp (argv[i], \"-lang-c89\"))\n-\t  cplusplus = 0, cplusplus_comments = 0, c89 = 1, c9x = 0, objc = 0;\n+\t  {\n+\t    cplusplus = 0, cplusplus_comments = 0, c89 = 1, c9x = 0, objc = 0;\n+\t    no_trigraphs = 0;\n+\t    pend_defs[i] = \"__STRICT_ANSI__=199000\";\n+\t  }\n \telse if (! strcmp (argv[i], \"-lang-c++\"))\n \t  cplusplus = 1, cplusplus_comments = 1, c89 = 0, c9x = 0, objc = 0;\n \telse if (! strcmp (argv[i], \"-lang-objc\"))\n@@ -1472,15 +1476,37 @@ main (argc, argv)\n \tbreak;\n \n       case 's':\n-\tif (!strcmp (argv[i], \"-std=iso9899:1990\")\n-\t    || !strcmp (argv[i], \"-std=iso9899:199409\")\n-\t    || !strcmp (argv[i], \"-std=c89\")\n-\t    || !strcmp (argv[i], \"-std=gnu89\"))\n-\t  cplusplus = 0, cplusplus_comments = 0, c89 = 1, c9x = 0, objc = 0;\n+\tif (!strcmp (argv[i], \"-std=gnu89\"))\n+\t  {\n+\t    cplusplus = 0, cplusplus_comments = 0, c89 = 1, c9x = 0, objc = 0;\n+\t  }\n+\telse if (!strcmp (argv[i], \"-std=gnu9x\")\n+\t\t || !strcmp (argv[i], \"-std=gnu99\"))\n+\t  {\n+\t    cplusplus = 0, cplusplus_comments = 1, c89 = 0, c9x = 1, objc = 0;\n+\t  }\n+\telse if (!strcmp (argv[i], \"-std=iso9899:1990\")\n+\t\t || !strcmp (argv[i], \"-std=c89\"))\n+\t  {\n+\t    cplusplus = 0, cplusplus_comments = 0, c89 = 1, c9x = 0, objc = 0;\n+\t    no_trigraphs = 0;\n+\t    pend_defs[i] = \"__STRICT_ANSI__=199000\";\n+\t  }\n+\telse if (!strcmp (argv[i], \"-std=iso9899:199409\"))\n+\t  {\n+\t    cplusplus = 0, cplusplus_comments = 0, c89 = 1, c9x = 0, objc = 0;\n+\t    no_trigraphs = 0;\n+\t    pend_defs[i] = \"__STRICT_ANSI__=199409\";\n+\t  }\n         else if (!strcmp (argv[i], \"-std=iso9899:199x\")\n+\t\t || !strcmp (argv[i], \"-std=iso9899:1999\")\n \t\t || !strcmp (argv[i], \"-std=c9x\")\n-\t\t || !strcmp (argv[i], \"-std=gnu9x\"))\n-\t  cplusplus = 0, cplusplus_comments = 1, c89 = 0, c9x = 1, objc = 0;\n+\t\t || !strcmp (argv[i], \"-std=c99\"))\n+\t  {\n+\t    cplusplus = 0, cplusplus_comments = 1, c89 = 0, c9x = 1, objc = 0;\n+\t    no_trigraphs = 0;\n+\t    pend_defs[i] = \"__STRICT_ANSI__=199900\";\n+\t  }\n \tbreak;\n \n       case 'w':"}, {"sha": "3ffda8a337cbb52cfd2801a4c9896dffe996b50b", "filename": "gcc/cppinit.c", "status": "modified", "additions": 56, "deletions": 18, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/223dca6a2053c626e10ac253bd02d67268a4049b/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/223dca6a2053c626e10ac253bd02d67268a4049b/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=223dca6a2053c626e10ac253bd02d67268a4049b", "patch": "@@ -1069,6 +1069,20 @@ cpp_finish (pfile)\n     }\n }\n \n+static void\n+new_pending_define (opts, text)\n+     struct cpp_options *opts;\n+     const char *text;\n+{\n+  struct pending_option *o = (struct pending_option *)\n+    xmalloc (sizeof (struct pending_option));\n+\n+  o->arg = text;\n+  o->next = NULL;\n+  o->undef = 0;\n+  APPEND (opts->pending, define, o);\n+}\n+\n /* Handle one command-line option in (argc, argv).\n    Can be called multiple times, to handle multiple sets of options.\n    Returns number of strings consumed.  */\n@@ -1313,8 +1327,12 @@ cpp_handle_option (pfile, argc, argv)\n \t  opts->cplusplus = 0, opts->cplusplus_comments = 1, opts->c89 = 0,\n \t    opts->c9x = 1, opts->objc = 0;\n \tif (! strcmp (argv[i], \"-lang-c89\"))\n-\t  opts->cplusplus = 0, opts->cplusplus_comments = 0, opts->c89 = 1,\n-\t    opts->c9x = 0, opts->objc = 0;\n+\t  {\n+\t    opts->cplusplus = 0, opts->cplusplus_comments = 0;\n+\t    opts->c89 = 1, opts->c9x = 0, opts->objc = 0;\n+\t    opts->trigraphs = 1;\n+\t    new_pending_define (opts, \"__STRICT_ANSI__=199000\");\n+\t  }\n \tif (! strcmp (argv[i], \"-lang-c++\"))\n \t  opts->cplusplus = 1, opts->cplusplus_comments = 1, opts->c89 = 0,\n \t    opts->c9x = 0, opts->objc = 0;\n@@ -1338,17 +1356,41 @@ cpp_handle_option (pfile, argc, argv)\n \tbreak;\n \n       case 's':\n-\tif (!strcmp (argv[i], \"-std=iso9899:1990\")\n-\t    || !strcmp (argv[i], \"-std=iso9899:199409\")\n-\t    || !strcmp (argv[i], \"-std=c89\")\n-\t    || !strcmp (argv[i], \"-std=gnu89\"))\n-\t  opts->cplusplus = 0, opts->cplusplus_comments = 0,\n+\tif (!strcmp (argv[i], \"-std=gnu89\"))\n+\t  {\n+\t    opts->cplusplus = 0, opts->cplusplus_comments = 0;\n+\t    opts->c89 = 1, opts->c9x = 0, opts->objc = 0;\n+\t  }\n+\telse if (!strcmp (argv[i], \"-std=gnu9x\"))\n+\t  {\n+\t    opts->cplusplus = 0, opts->cplusplus_comments = 1;\n+\t    opts->c89 = 0, opts->c9x = 1, opts->objc = 0;\n+\t  }\n+\telse if (!strcmp (argv[i], \"-std=iso9899:1990\")\n+\t\t || !strcmp (argv[i], \"-std=c89\"))\n+\t  {\n+\t    opts->cplusplus = 0, opts->cplusplus_comments = 0;\n \t    opts->c89 = 1, opts->c9x = 0, opts->objc = 0;\n+\t    opts->trigraphs = 1;\n+\t    new_pending_define (opts, \"__STRICT_ANSI__=199000\");\n+\t  }\n+\telse if (!strcmp (argv[i], \"-std=iso9899:199409\"))\n+\t  {\n+\t    opts->cplusplus = 0, opts->cplusplus_comments = 0;\n+\t    opts->c89 = 1, opts->c9x = 0, opts->objc = 0;\n+\t    opts->trigraphs = 1;\n+\t    new_pending_define (opts, \"__STRICT_ANSI__=199409\");\n+\t  }\n \telse if (!strcmp (argv[i], \"-std=iso9899:199x\")\n+\t\t || !strcmp (argv[i], \"-std=iso9899:1999\")\n \t\t || !strcmp (argv[i], \"-std=c9x\")\n-\t\t || !strcmp (argv[i], \"-std=gnu9x\"))\n-\t  opts->cplusplus = 0, opts->cplusplus_comments = 1, opts->c89 = 0,\n-\t    opts->c9x = 1, opts->objc = 0;\n+\t\t || !strcmp (argv[i], \"-std=c99\"))\n+\t  {\n+\t    opts->cplusplus = 0, opts->cplusplus_comments = 1;\n+\t    opts->c89 = 0, opts->c9x = 1, opts->objc = 0;\n+\t    opts->trigraphs = 1;\n+\t    new_pending_define (opts, \"__STRICT_ANSI__=199900\");\n+\t  }\n \tbreak;\n \n       case 'w':\n@@ -1487,21 +1529,17 @@ cpp_handle_option (pfile, argc, argv)\n       \n       case 'D':\n \t{\n-\t  struct pending_option *o = (struct pending_option *)\n-\t    xmalloc (sizeof (struct pending_option));\n+\t  const char *text;\n \t  if (argv[i][2] != 0)\n-\t    o->arg = argv[i] + 2;\n+\t    text = argv[i] + 2;\n \t  else if (i + 1 == argc)\n \t    {\n \t      cpp_fatal (pfile, \"Macro name missing after -D option\");\n \t      return argc;\n \t    }\n \t  else\n-\t    o->arg = argv[++i];\n-\n-\t  o->next = NULL;\n-\t  o->undef = 0;\n-\t  APPEND (opts->pending, define, o);\n+\t    text = argv[++i];\n+\t  new_pending_define (opts, text);\n \t}\n \tbreak;\n       "}, {"sha": "0230b49847312591db825e1eb8db2294f5fbc21b", "filename": "gcc/gcc.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/223dca6a2053c626e10ac253bd02d67268a4049b/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/223dca6a2053c626e10ac253bd02d67268a4049b/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=223dca6a2053c626e10ac253bd02d67268a4049b", "patch": "@@ -628,7 +628,6 @@ static struct compiler default_compilers[] =\n \t%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n \t%{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d} %{MG}\\\n         %{!no-gcc:-D__GNUC__=%v1 -D__GNUC_MINOR__=%v2}\\\n-\t%{ansi|std=*:%{!std=gnu*:-trigraphs -D__STRICT_ANSI__}}\\\n \t%{!undef:%{!ansi:%{!std=*:%p}%{std=gnu*:%p}} %P} %{trigraphs}\\\n         %c %{Os:-D__OPTIMIZE_SIZE__} %{O*:%{!O0:-D__OPTIMIZE__}}\\\n \t%{ffast-math:-D__FAST_MATH__}\\\n@@ -643,7 +642,6 @@ static struct compiler default_compilers[] =\n                   %{!Q:-quiet} -dumpbase %b.c %{d*} %{m*} %{a*}\\\n                   %{MD:-MD %b.d} %{MMD:-MMD %b.d} %{MG}\\\n                   %{!no-gcc:-D__GNUC__=%v1 -D__GNUC_MINOR__=%v2}\\\n-\t\t  %{ansi|std=*:%{!std=gnu*:-trigraphs -D__STRICT_ANSI__}}\\\n \t\t  %{!undef:%{!ansi:%{!std=*:%p}%{std=gnu*:%p}} %P} %{trigraphs}\\\n                   %c %{Os:-D__OPTIMIZE_SIZE__} %{O*:%{!O0:-D__OPTIMIZE__}}\\\n \t\t  %{ffast-math:-D__FAST_MATH__}\\\n@@ -667,7 +665,6 @@ static struct compiler default_compilers[] =\n \t%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n \t%{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d} %{MG}\\\n         %{!no-gcc:-D__GNUC__=%v1 -D__GNUC_MINOR__=%v2}\\\n-\t%{ansi|std=*:%{!std=gnu*:-trigraphs -D__STRICT_ANSI__}}\\\n \t%{!undef:%{!ansi:%{!std=*:%p}%{std=gnu*:%p}} %P} %{trigraphs}\\\n         %c %{Os:-D__OPTIMIZE_SIZE__} %{O*:%{!O0:-D__OPTIMIZE__}}\\\n \t%{ffast-math:-D__FAST_MATH__}\\\n@@ -696,7 +693,6 @@ static struct compiler default_compilers[] =\n \t%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n \t%{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d} %{MG}\\\n         %{!no-gcc:-D__GNUC__=%v1 -D__GNUC_MINOR__=%v2}\\\n-\t%{ansi|std=*:%{!std=gnu*:-trigraphs -D__STRICT_ANSI__}}\\\n \t%{!undef:%{!ansi:%{!std=*:%p}%{std=gnu*:%p}} %P} %{trigraphs}\\\n         %c %{Os:-D__OPTIMIZE_SIZE__} %{O*:%{!O0:-D__OPTIMIZE__}}\\\n \t%{ffast-math:-D__FAST_MATH__}\\\n@@ -714,7 +710,6 @@ static struct compiler default_compilers[] =\n \t%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n \t%{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d} %{MG}\\\n         %{!no-gcc:-D__GNUC__=%v1 -D__GNUC_MINOR__=%v2}\\\n-\t%{std=*:%{!std=gnu*:-trigraphs -D__STRICT_ANSI__}}\\\n \t%{!undef:%{!std=*:%p}%{std=gnu*:%p} %P} %{trigraphs}\\\n         %c %{Os:-D__OPTIMIZE_SIZE__} %{O*:%{!O0:-D__OPTIMIZE__}}\\\n \t%{ffast-math:-D__FAST_MATH__}\\"}, {"sha": "c74c80d392bb95f16a21454b66082d696f459b18", "filename": "gcc/ginclude/stdarg.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/223dca6a2053c626e10ac253bd02d67268a4049b/gcc%2Fginclude%2Fstdarg.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/223dca6a2053c626e10ac253bd02d67268a4049b/gcc%2Fginclude%2Fstdarg.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fstdarg.h?ref=223dca6a2053c626e10ac253bd02d67268a4049b", "patch": "@@ -54,7 +54,10 @@ typedef __builtin_va_list __gnuc_va_list;\n #define va_start(v,l)\t__builtin_stdarg_start(&(v),l)\n #define va_end\t\t__builtin_va_end\n #define va_arg\t\t__builtin_va_arg\n+#if defined(__STRICT_ANSI__) && __STRICT_ANSI__ + 0 < 199900\n #define va_copy(d,s)\t__builtin_va_copy(&(d),(s))\n+#endif\n+#define __va_copy(d,s)\t__builtin_va_copy(&(d),(s))\n \n \n /* Define va_list, if desired, from __gnuc_va_list. */"}]}