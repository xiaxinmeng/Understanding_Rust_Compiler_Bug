{"sha": "9aeb3bef2cae234dbb90609392e536bafc09365c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWFlYjNiZWYyY2FlMjM0ZGJiOTA2MDkzOTJlNTM2YmFmYzA5MzY1Yw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-10-30T15:48:11Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-10-30T15:48:11Z"}, "message": "Apply C++20 changes to various iterator types\n\nThis ensures that __normal_iterator<T*, C> satisfies the\ncontiguous_iterator concept, by defining the iterator_concept member\ntype.\n\nAlso update vector<bool>'s iterators, reverse_iterator,\nistreambuf_iterator and ostreambuf_iterator to meet the C++20\nrequirements.\n\n\tPR libstdc++/92272\n\t* include/bits/stl_bvector.h (_Bit_iterator::pointer)\n\t(_Bit_const_iterator::pointer): Define as void for C++20.\n\t* include/bits/stl_iterator.h (reverse_iterator::operator->()): Add\n\tconstraints for C++20.\n\t(__normal_iterator::iterator_concept): Define for C++20.\n\t* include/bits/streambuf_iterator.h (istreambuf_iterator::pointer):\n\tDefine as void for C++20.\n\t(ostreambuf_iterator::difference_type): Define as ptrdiff_t for C++20.\n\t(ostreambuf_iterator::ostreambuf_iterator()): Add default constructor\n\tfor C++20.\n\t* testsuite/23_containers/vector/bool/iterator_c++20.cc: New test.\n\t* testsuite/24_iterators/bidirectional/concept.cc: New test.\n\t* testsuite/24_iterators/bidirectional/tag.cc: New test.\n\t* testsuite/24_iterators/contiguous/concept.cc: New test.\n\t* testsuite/24_iterators/contiguous/tag.cc: New test.\n\t* testsuite/24_iterators/forward/concept.cc: New test.\n\t* testsuite/24_iterators/forward/tag.cc: New test.\n\t* testsuite/24_iterators/input/concept.cc: New test.\n\t* testsuite/24_iterators/input/tag.cc: New test.\n\t* testsuite/24_iterators/istreambuf_iterator/requirements/typedefs.cc:\n\tNew test.\n\t* testsuite/24_iterators/ostreambuf_iterator/requirements/typedefs.cc:\n\tNew test.\n\t* testsuite/24_iterators/output/concept.cc: New test.\n\t* testsuite/24_iterators/output/tag.cc: New test.\n\t* testsuite/24_iterators/random_access/concept.cc: New test.\n\t* testsuite/24_iterators/random_access/tag.cc: New test.\n\t* testsuite/24_iterators/range_operations/advance_debug_neg.cc: New\n\ttest.\n\t* testsuite/24_iterators/random_access_iterator/26020.cc: Move to ...\n\t* testsuite/24_iterators/operations/26020.cc: ... here.\n\t* testsuite/24_iterators/random_access_iterator/\n\tstring_vector_iterators.cc: Move to ...\n\t* testsuite/24_iterators/random_access/string_vector_iterators.cc: ...\n\there.\n\nFrom-SVN: r277629", "tree": {"sha": "1359fb3c7db320eb8d70c477c13efbf908cea2c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1359fb3c7db320eb8d70c477c13efbf908cea2c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9aeb3bef2cae234dbb90609392e536bafc09365c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9aeb3bef2cae234dbb90609392e536bafc09365c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9aeb3bef2cae234dbb90609392e536bafc09365c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9aeb3bef2cae234dbb90609392e536bafc09365c/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5211593c58c15a2a011003fa55acc62422609107", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5211593c58c15a2a011003fa55acc62422609107", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5211593c58c15a2a011003fa55acc62422609107"}], "stats": {"total": 910, "additions": 899, "deletions": 11}, "files": [{"sha": "12eca8f8138c9a7eab3333615c41bf3dc280c525", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aeb3bef2cae234dbb90609392e536bafc09365c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aeb3bef2cae234dbb90609392e536bafc09365c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9aeb3bef2cae234dbb90609392e536bafc09365c", "patch": "@@ -1,5 +1,42 @@\n 2019-10-30  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/92272\n+\t* include/bits/stl_bvector.h (_Bit_iterator::pointer)\n+\t(_Bit_const_iterator::pointer): Define as void for C++20.\n+\t* include/bits/stl_iterator.h (reverse_iterator::operator->()): Add\n+\tconstraints for C++20.\n+\t(__normal_iterator::iterator_concept): Define for C++20.\n+\t* include/bits/streambuf_iterator.h (istreambuf_iterator::pointer):\n+\tDefine as void for C++20.\n+\t(ostreambuf_iterator::difference_type): Define as ptrdiff_t for C++20.\n+\t(ostreambuf_iterator::ostreambuf_iterator()): Add default constructor\n+\tfor C++20.\n+\t* testsuite/23_containers/vector/bool/iterator_c++20.cc: New test.\n+\t* testsuite/24_iterators/bidirectional/concept.cc: New test.\n+\t* testsuite/24_iterators/bidirectional/tag.cc: New test.\n+\t* testsuite/24_iterators/contiguous/concept.cc: New test.\n+\t* testsuite/24_iterators/contiguous/tag.cc: New test.\n+\t* testsuite/24_iterators/forward/concept.cc: New test.\n+\t* testsuite/24_iterators/forward/tag.cc: New test.\n+\t* testsuite/24_iterators/input/concept.cc: New test.\n+\t* testsuite/24_iterators/input/tag.cc: New test.\n+\t* testsuite/24_iterators/istreambuf_iterator/requirements/typedefs.cc:\n+\tNew test.\n+\t* testsuite/24_iterators/ostreambuf_iterator/requirements/typedefs.cc:\n+\tNew test.\n+\t* testsuite/24_iterators/output/concept.cc: New test.\n+\t* testsuite/24_iterators/output/tag.cc: New test.\n+\t* testsuite/24_iterators/random_access/concept.cc: New test.\n+\t* testsuite/24_iterators/random_access/tag.cc: New test.\n+\t* testsuite/24_iterators/range_operations/advance_debug_neg.cc: New\n+\ttest.\n+\t* testsuite/24_iterators/random_access_iterator/26020.cc: Move to ...\n+\t* testsuite/24_iterators/operations/26020.cc: ... here.\n+\t* testsuite/24_iterators/random_access_iterator/\n+\tstring_vector_iterators.cc: Move to ...\n+\t* testsuite/24_iterators/random_access/string_vector_iterators.cc: ...\n+\there.\n+\n \t* testsuite/util/testsuite_iterators.h: Fix typo in __cplusplus check.\n \n 2019-10-29  Jonathan Wakely  <jwakely@redhat.com>"}, {"sha": "f2eea7799dca090a3d2c18bf27c2474aacbdf3e6", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aeb3bef2cae234dbb90609392e536bafc09365c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aeb3bef2cae234dbb90609392e536bafc09365c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=9aeb3bef2cae234dbb90609392e536bafc09365c", "patch": "@@ -220,7 +220,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n   struct _Bit_iterator : public _Bit_iterator_base\n   {\n     typedef _Bit_reference  reference;\n+#if __cplusplus > 201703L\n+    typedef void\t    pointer;\n+#else\n     typedef _Bit_reference* pointer;\n+#endif\n     typedef _Bit_iterator   iterator;\n \n     _Bit_iterator() : _Bit_iterator_base(0, 0) { }\n@@ -309,7 +313,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n   {\n     typedef bool                 reference;\n     typedef bool                 const_reference;\n+#if __cplusplus > 201703L\n+    typedef void\t    pointer;\n+#else\n     typedef const bool*          pointer;\n+#endif\n     typedef _Bit_const_iterator  const_iterator;\n \n     _Bit_const_iterator() : _Bit_iterator_base(0, 0) { }"}, {"sha": "2a3b023107970d3f917e19c77e8a791a100bb3b4", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aeb3bef2cae234dbb90609392e536bafc09365c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aeb3bef2cae234dbb90609392e536bafc09365c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=9aeb3bef2cae234dbb90609392e536bafc09365c", "patch": "@@ -187,6 +187,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       */\n       _GLIBCXX17_CONSTEXPR pointer\n       operator->() const\n+#if __cplusplus > 201703L && defined __cpp_concepts\n+      requires is_pointer_v<_Iterator>\n+\t|| requires(const _Iterator __i) { __i.operator->(); }\n+#endif\n       {\n \t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t// 1052. operator-> should also support smart pointers\n@@ -807,6 +811,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef typename __traits_type::reference \treference;\n       typedef typename __traits_type::pointer   \tpointer;\n \n+#if __cplusplus > 201703L\n+      using iterator_concept = std::__detail::__iter_concept<_Iterator>;\n+#endif\n+\n       _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT\n       : _M_current(_Iterator()) { }\n "}, {"sha": "077b11a5ff5d618a0a00ae1253038730a0ffda13", "filename": "libstdc++-v3/include/bits/streambuf_iterator.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aeb3bef2cae234dbb90609392e536bafc09365c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aeb3bef2cae234dbb90609392e536bafc09365c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h?ref=9aeb3bef2cae234dbb90609392e536bafc09365c", "patch": "@@ -61,6 +61,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // Types:\n       //@{\n       /// Public typedefs\n+#if __cplusplus > 201703L\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 3188. istreambuf_iterator::pointer should not be unspecified\n+      using pointer = void;\n+#endif\n       typedef _CharT\t\t\t\t\tchar_type;\n       typedef _Traits\t\t\t\t\ttraits_type;\n       typedef typename _Traits::int_type\t\tint_type;\n@@ -230,6 +235,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // Types:\n       //@{\n       /// Public typedefs\n+#if __cplusplus > 201703L\n+      using difference_type = ptrdiff_t;\n+#endif\n       typedef _CharT\t\t\t       char_type;\n       typedef _Traits\t\t\t       traits_type;\n       typedef basic_streambuf<_CharT, _Traits> streambuf_type;\n@@ -247,6 +255,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       bool\t\t_M_failed;\n \n     public:\n+\n+#if __cplusplus > 201703L\n+      constexpr\n+      ostreambuf_iterator() noexcept\n+      : _M_sbuf(nullptr), _M_failed(true) { }\n+#endif\n+\n       ///  Construct output iterator from ostream.\n       ostreambuf_iterator(ostream_type& __s) _GLIBCXX_USE_NOEXCEPT\n       : _M_sbuf(__s.rdbuf()), _M_failed(!_M_sbuf) { }"}, {"sha": "2a36d98672ba19491a50166b52f30b43b0c28ded", "filename": "libstdc++-v3/testsuite/23_containers/vector/bool/iterator_c++20.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aeb3bef2cae234dbb90609392e536bafc09365c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fiterator_c%2B%2B20.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aeb3bef2cae234dbb90609392e536bafc09365c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fiterator_c%2B%2B20.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fiterator_c%2B%2B20.cc?ref=9aeb3bef2cae234dbb90609392e536bafc09365c", "patch": "@@ -0,0 +1,30 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <vector>\n+\n+// C++20 [iterator.traits]: The type iterator_traits<I>::pointer shall be void\n+// for an iterator of class type I that does not support operator->.\n+template<typename I>\n+  concept arrow_or_no_pointer = requires (I i) { i.operator->(); }\n+    || std::same_as<typename std::iterator_traits<I>::pointer, void>;\n+\n+static_assert( arrow_or_no_pointer<std::vector<bool>::iterator> );\n+static_assert( arrow_or_no_pointer<std::vector<bool>::const_iterator> );"}, {"sha": "0bcd6f52c5b7b51be3c3fd9a876afee665c4ba26", "filename": "libstdc++-v3/testsuite/24_iterators/bidirectional/concept.cc", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aeb3bef2cae234dbb90609392e536bafc09365c/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fbidirectional%2Fconcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aeb3bef2cae234dbb90609392e536bafc09365c/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fbidirectional%2Fconcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fbidirectional%2Fconcept.cc?ref=9aeb3bef2cae234dbb90609392e536bafc09365c", "patch": "@@ -0,0 +1,81 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <iterator>\n+\n+using std::bidirectional_iterator;\n+\n+static_assert( bidirectional_iterator< int*\t    > );\n+static_assert( bidirectional_iterator< const int* > );\n+static_assert( bidirectional_iterator< void**\t    > );\n+\n+static_assert( ! bidirectional_iterator< int* const\t> );\n+static_assert( ! bidirectional_iterator< const int* const\t> );\n+static_assert( ! bidirectional_iterator< void** const\t> );\n+\n+static_assert( ! bidirectional_iterator< void*\t  > );\n+static_assert( ! bidirectional_iterator< const void*\t  > );\n+static_assert( ! bidirectional_iterator< volatile void* > );\n+\n+static_assert( ! bidirectional_iterator< void(*)() > );\n+static_assert( ! bidirectional_iterator< void(&)() > );\n+\n+struct A;\n+static_assert( ! bidirectional_iterator< void(A::*)() > );\n+static_assert( ! bidirectional_iterator< int A::*\t> );\n+\n+#include <array>\n+#include <deque>\n+#include <forward_list>\n+#include <list>\n+#include <string>\n+#include <string_view>\n+#include <vector>\n+\n+using std::array;\n+using std::deque;\n+using std::forward_list;\n+using std::list;\n+using std::string;\n+using std::string_view;\n+using std::vector;\n+\n+struct B { };\n+\n+static_assert( bidirectional_iterator< array<int, 1>::iterator\t    > );\n+static_assert( bidirectional_iterator< array<B, 1>::const_iterator  > );\n+\n+static_assert( bidirectional_iterator< deque<int>::iterator     > );\n+static_assert( bidirectional_iterator< deque<B>::const_iterator > );\n+\n+static_assert( bidirectional_iterator< list<int>::iterator\t> );\n+static_assert( bidirectional_iterator< list<B>::const_iterator\t> );\n+\n+static_assert( ! bidirectional_iterator< forward_list<int>::iterator      > );\n+static_assert( ! bidirectional_iterator< forward_list<B>::const_iterator  > );\n+\n+static_assert( bidirectional_iterator< string::iterator\t      > );\n+static_assert( bidirectional_iterator< string::const_iterator > );\n+\n+static_assert( bidirectional_iterator< string_view::iterator\t    > );\n+static_assert( bidirectional_iterator< string_view::const_iterator  > );\n+\n+static_assert( bidirectional_iterator< vector<int>::iterator\t  > );\n+static_assert( bidirectional_iterator< vector<B>::const_iterator  > );"}, {"sha": "9b24b3102e62b566f231305fb4564a8b0671a543", "filename": "libstdc++-v3/testsuite/24_iterators/bidirectional/tag.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aeb3bef2cae234dbb90609392e536bafc09365c/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fbidirectional%2Ftag.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aeb3bef2cae234dbb90609392e536bafc09365c/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fbidirectional%2Ftag.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fbidirectional%2Ftag.cc?ref=9aeb3bef2cae234dbb90609392e536bafc09365c", "patch": "@@ -0,0 +1,32 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <iterator>\n+\n+using std::bidirectional_iterator_tag;\n+using std::forward_iterator_tag;\n+using std::iterator_traits;\n+\n+static_assert( std::is_empty<bidirectional_iterator_tag>::value );\n+static_assert( std::is_trivially_copy_constructible<bidirectional_iterator_tag>::value );\n+\n+static_assert( std::is_base_of<forward_iterator_tag,\n+\t\t\t       bidirectional_iterator_tag>::value );\n+static_assert( std::is_convertible<bidirectional_iterator_tag*,\n+\t\t\t\t   forward_iterator_tag*>::value );"}, {"sha": "0f9419aaba1ec254527416944fc3c6ccb5c93644", "filename": "libstdc++-v3/testsuite/24_iterators/contiguous/concept.cc", "status": "modified", "additions": 54, "deletions": 10, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aeb3bef2cae234dbb90609392e536bafc09365c/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fcontiguous%2Fconcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aeb3bef2cae234dbb90609392e536bafc09365c/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fcontiguous%2Fconcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fcontiguous%2Fconcept.cc?ref=9aeb3bef2cae234dbb90609392e536bafc09365c", "patch": "@@ -20,17 +20,61 @@\n \n #include <iterator>\n \n-static_assert( std::contiguous_iterator<int*> );\n-static_assert( std::contiguous_iterator<const int*> );\n-static_assert( std::contiguous_iterator<void**> );\n+using std::contiguous_iterator;\n \n-static_assert( ! std::contiguous_iterator<void*> );\n-static_assert( ! std::contiguous_iterator<const void*> );\n-static_assert( ! std::contiguous_iterator<volatile void*> );\n+static_assert( contiguous_iterator< int*\t    > );\n+static_assert( contiguous_iterator< const int* > );\n+static_assert( contiguous_iterator< void**\t    > );\n \n-static_assert( ! std::contiguous_iterator<void(*)()> );\n-static_assert( ! std::contiguous_iterator<void(*)()> );\n+static_assert( ! contiguous_iterator< int* const\t> );\n+static_assert( ! contiguous_iterator< const int* const\t> );\n+static_assert( ! contiguous_iterator< void** const\t> );\n+\n+static_assert( ! contiguous_iterator< void*\t  > );\n+static_assert( ! contiguous_iterator< const void*\t  > );\n+static_assert( ! contiguous_iterator< volatile void* > );\n+\n+static_assert( ! contiguous_iterator< void(*)() > );\n+static_assert( ! contiguous_iterator< void(&)() > );\n+static_assert( contiguous_iterator< void(**)() > );\n \n struct A;\n-static_assert( ! std::contiguous_iterator<void(A::*)()> );\n-static_assert( ! std::contiguous_iterator<int A::*> );\n+static_assert( ! contiguous_iterator< void(A::*)() > );\n+static_assert( ! contiguous_iterator< int A::*\t> );\n+\n+#include <array>\n+#include <deque>\n+#include <list>\n+#include <string>\n+#include <string_view>\n+#include <vector>\n+\n+using std::array;\n+using std::deque;\n+using std::list;\n+using std::string;\n+using std::string_view;\n+using std::vector;\n+\n+struct B { };\n+\n+static_assert( contiguous_iterator< array<int, 1>::iterator\t> );\n+static_assert( contiguous_iterator< array<B, 1>::const_iterator > );\n+\n+static_assert( ! contiguous_iterator< deque<int>::iterator\t> );\n+static_assert( ! contiguous_iterator< deque<B>::const_iterator\t> );\n+\n+static_assert( ! contiguous_iterator< list<int>::iterator\t> );\n+static_assert( ! contiguous_iterator< list<B>::const_iterator\t> );\n+\n+static_assert( contiguous_iterator< string::iterator\t\t> );\n+static_assert( contiguous_iterator< string::const_iterator\t> );\n+\n+static_assert( contiguous_iterator< string_view::iterator\t> );\n+static_assert( contiguous_iterator< string_view::const_iterator\t> );\n+\n+static_assert( contiguous_iterator< vector<int>::iterator\t> );\n+static_assert( contiguous_iterator< vector<B>::const_iterator\t> );\n+\n+static_assert( ! contiguous_iterator< vector<bool>::iterator\t    > );\n+static_assert( ! contiguous_iterator< vector<bool>::const_iterator  > );"}, {"sha": "8a0029c338be005c3f9eaff8f66029ae9953b894", "filename": "libstdc++-v3/testsuite/24_iterators/contiguous/tag.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aeb3bef2cae234dbb90609392e536bafc09365c/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fcontiguous%2Ftag.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aeb3bef2cae234dbb90609392e536bafc09365c/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fcontiguous%2Ftag.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fcontiguous%2Ftag.cc?ref=9aeb3bef2cae234dbb90609392e536bafc09365c", "patch": "@@ -20,6 +20,10 @@\n \n #include <iterator>\n \n+using std::contiguous_iterator_tag;\n+using std::random_access_iterator_tag;\n+using std::iterator_traits;\n+\n static_assert( std::is_empty_v<std::contiguous_iterator_tag> );\n static_assert( std::is_trivially_copy_constructible_v<std::contiguous_iterator_tag> );\n "}, {"sha": "4b125e52fda1cab8f3eb7678dc58c34782488d4d", "filename": "libstdc++-v3/testsuite/24_iterators/forward/concept.cc", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aeb3bef2cae234dbb90609392e536bafc09365c/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fforward%2Fconcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aeb3bef2cae234dbb90609392e536bafc09365c/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fforward%2Fconcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fforward%2Fconcept.cc?ref=9aeb3bef2cae234dbb90609392e536bafc09365c", "patch": "@@ -0,0 +1,86 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <iterator>\n+\n+using std::forward_iterator;\n+\n+static_assert( forward_iterator< int*\t    > );\n+static_assert( forward_iterator< const int* > );\n+static_assert( forward_iterator< void**\t    > );\n+\n+static_assert( ! forward_iterator< int* const\t> );\n+static_assert( ! forward_iterator< const int* const\t> );\n+static_assert( ! forward_iterator< void** const\t> );\n+\n+static_assert( ! forward_iterator< void*\t  > );\n+static_assert( ! forward_iterator< const void*\t  > );\n+static_assert( ! forward_iterator< volatile void* > );\n+\n+static_assert( ! forward_iterator< void(*)() > );\n+static_assert( ! forward_iterator< void(&)() > );\n+\n+struct A;\n+static_assert( ! forward_iterator< void(A::*)() > );\n+static_assert( ! forward_iterator< int A::*\t> );\n+\n+#include <array>\n+#include <deque>\n+#include <forward_list>\n+#include <list>\n+#include <string>\n+#include <string_view>\n+#include <vector>\n+\n+using std::array;\n+using std::deque;\n+using std::forward_list;\n+using std::list;\n+using std::string;\n+using std::string_view;\n+using std::vector;\n+using std::istreambuf_iterator;\n+using std::ostreambuf_iterator;\n+\n+struct B { };\n+\n+static_assert( forward_iterator< array<int, 1>::iterator      > );\n+static_assert( forward_iterator< array<B, 1>::const_iterator  > );\n+\n+static_assert( forward_iterator< deque<int>::iterator\t  > );\n+static_assert( forward_iterator< deque<B>::const_iterator > );\n+\n+static_assert( forward_iterator< forward_list<int>::iterator\t  > );\n+static_assert( forward_iterator< forward_list<B>::const_iterator  > );\n+\n+static_assert( forward_iterator< list<int>::iterator\t  > );\n+static_assert( forward_iterator< list<B>::const_iterator  > );\n+\n+static_assert( forward_iterator< string::iterator\t> );\n+static_assert( forward_iterator< string::const_iterator\t> );\n+\n+static_assert( forward_iterator< string_view::iterator\t      > );\n+static_assert( forward_iterator< string_view::const_iterator  > );\n+\n+static_assert( forward_iterator< vector<int>::iterator\t    > );\n+static_assert( forward_iterator< vector<B>::const_iterator  > );\n+\n+static_assert( ! forward_iterator< istreambuf_iterator<char> > );\n+static_assert( ! forward_iterator< ostreambuf_iterator<char> > );"}, {"sha": "6ec325606fefcb521a5d9171d75fe56fbb7ece67", "filename": "libstdc++-v3/testsuite/24_iterators/forward/tag.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aeb3bef2cae234dbb90609392e536bafc09365c/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fforward%2Ftag.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aeb3bef2cae234dbb90609392e536bafc09365c/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fforward%2Ftag.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fforward%2Ftag.cc?ref=9aeb3bef2cae234dbb90609392e536bafc09365c", "patch": "@@ -0,0 +1,32 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <iterator>\n+\n+using std::forward_iterator_tag;\n+using std::input_iterator_tag;\n+using std::iterator_traits;\n+\n+static_assert( std::is_empty<forward_iterator_tag>::value );\n+static_assert( std::is_trivially_copy_constructible<forward_iterator_tag>::value );\n+\n+static_assert( std::is_base_of<input_iterator_tag,\n+\t\t\t       forward_iterator_tag>::value );\n+static_assert( std::is_convertible<forward_iterator_tag*,\n+\t\t\t\t   input_iterator_tag*>::value );"}, {"sha": "80bb679a7c0aba62222a80bfa8d07249539f3894", "filename": "libstdc++-v3/testsuite/24_iterators/input/concept.cc", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aeb3bef2cae234dbb90609392e536bafc09365c/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Finput%2Fconcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aeb3bef2cae234dbb90609392e536bafc09365c/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Finput%2Fconcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Finput%2Fconcept.cc?ref=9aeb3bef2cae234dbb90609392e536bafc09365c", "patch": "@@ -0,0 +1,89 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <iterator>\n+\n+using std::input_iterator;\n+\n+static_assert( input_iterator< int*\t    > );\n+static_assert( input_iterator< const int* > );\n+static_assert( input_iterator< void**\t    > );\n+\n+static_assert( ! input_iterator< int* const\t> );\n+static_assert( ! input_iterator< const int* const\t> );\n+static_assert( ! input_iterator< void** const\t> );\n+\n+static_assert( ! input_iterator< void*\t  > );\n+static_assert( ! input_iterator< const void*\t  > );\n+static_assert( ! input_iterator< volatile void* > );\n+\n+static_assert( ! input_iterator< void(*)() > );\n+static_assert( ! input_iterator< void(&)() > );\n+\n+struct A;\n+static_assert( ! input_iterator< void(A::*)() > );\n+static_assert( ! input_iterator< int A::*\t> );\n+\n+#include <array>\n+#include <deque>\n+#include <forward_list>\n+#include <list>\n+#include <string>\n+#include <string_view>\n+#include <vector>\n+\n+using std::array;\n+using std::deque;\n+using std::forward_list;\n+using std::list;\n+using std::string;\n+using std::string_view;\n+using std::vector;\n+\n+struct B { };\n+\n+static_assert( input_iterator< array<int, 1>::iterator\t    > );\n+static_assert( input_iterator< array<B, 1>::const_iterator  > );\n+\n+static_assert( input_iterator< deque<int>::iterator\t> );\n+static_assert( input_iterator< deque<B>::const_iterator\t> );\n+\n+static_assert( input_iterator< forward_list<int>::iterator\t> );\n+static_assert( input_iterator< forward_list<B>::const_iterator\t> );\n+\n+static_assert( input_iterator< list<int>::iterator\t> );\n+static_assert( input_iterator< list<B>::const_iterator\t> );\n+\n+static_assert( input_iterator< string::iterator\t      > );\n+static_assert( input_iterator< string::const_iterator > );\n+\n+static_assert( input_iterator< string_view::iterator\t    > );\n+static_assert( input_iterator< string_view::const_iterator  > );\n+\n+static_assert( input_iterator< vector<int>::iterator\t  > );\n+static_assert( input_iterator< vector<B>::const_iterator  > );\n+\n+#include <streambuf>\n+\n+using std::istreambuf_iterator;\n+using std::ostreambuf_iterator;\n+\n+static_assert( input_iterator< istreambuf_iterator<char>    > );\n+static_assert( ! input_iterator< ostreambuf_iterator<char>  > );"}, {"sha": "ade01c40db8e1052e3169f33627a32a3a3d43b69", "filename": "libstdc++-v3/testsuite/24_iterators/input/tag.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aeb3bef2cae234dbb90609392e536bafc09365c/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Finput%2Ftag.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aeb3bef2cae234dbb90609392e536bafc09365c/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Finput%2Ftag.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Finput%2Ftag.cc?ref=9aeb3bef2cae234dbb90609392e536bafc09365c", "patch": "@@ -0,0 +1,32 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <iterator>\n+\n+using std::input_iterator_tag;\n+using std::output_iterator_tag;\n+using std::iterator_traits;\n+\n+static_assert( std::is_empty<input_iterator_tag>::value );\n+static_assert( std::is_trivially_copy_constructible<input_iterator_tag>::value );\n+\n+static_assert( ! std::is_base_of<output_iterator_tag,\n+\t\t\t\t input_iterator_tag>::value );\n+static_assert( ! std::is_convertible<input_iterator_tag*,\n+\t\t\t\t     output_iterator_tag*>::value );"}, {"sha": "fcd703e592801987e3a9c1a4c97295e91eb6da59", "filename": "libstdc++-v3/testsuite/24_iterators/istreambuf_iterator/requirements/typedefs.cc", "status": "modified", "additions": 50, "deletions": 1, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aeb3bef2cae234dbb90609392e536bafc09365c/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistreambuf_iterator%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aeb3bef2cae234dbb90609392e536bafc09365c/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistreambuf_iterator%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistreambuf_iterator%2Frequirements%2Ftypedefs.cc?ref=9aeb3bef2cae234dbb90609392e536bafc09365c", "patch": "@@ -22,7 +22,6 @@\n \n #include <sstream>\n #include <iterator>\n-#include <testsuite_hooks.h>\n \n void test01()\n {\n@@ -41,3 +40,53 @@ void test01()\n   typedef test_iterator::istream_type istream_type;\n   typedef test_iterator::streambuf_type streambuf_type;\n }\n+\n+#if __cplusplus >= 201103L\n+void test02()\n+{\n+  using namespace std;\n+\n+  using test_type = istreambuf_iterator<char>;\n+\n+  static_assert(is_same<test_type::value_type, char>::value, \"\");\n+  static_assert(is_same<test_type::difference_type,\n+\t\t\t  char_traits<char>::off_type>::value, \"\");\n+#if __cplusplus <= 201703L\n+  static_assert(is_same<test_type::pointer, char*>::value, \"\");\n+#else\n+  static_assert(is_same<test_type::pointer, void>::value, \"\");\n+#endif\n+  static_assert(is_same<test_type::reference, char>::value, \"\");\n+  static_assert(is_same<test_type::iterator_category, input_iterator_tag>::value, \"\");\n+\n+  static_assert(is_same<test_type::char_type, char>::value, \"\");\n+  static_assert(is_same<test_type::traits_type, char_traits<char>>::value, \"\");\n+  static_assert(is_same<test_type::istream_type, istream>::value, \"\");\n+  static_assert(is_same<test_type::streambuf_type, streambuf>::value, \"\");\n+}\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+void test03()\n+{\n+  using namespace std;\n+\n+  using test_type = istreambuf_iterator<wchar_t>;\n+\n+  static_assert(is_same<test_type::value_type, wchar_t>::value, \"\");\n+  static_assert(is_same<test_type::difference_type,\n+\t\t\t  char_traits<wchar_t>::off_type>::value, \"\");\n+#if __cplusplus <= 201703L\n+  static_assert(is_same<test_type::pointer, wchar_t*>::value, \"\");\n+#else\n+  static_assert(is_same<test_type::pointer, void>::value, \"\");\n+#endif\n+  static_assert(is_same<test_type::reference, wchar_t>::value, \"\");\n+  static_assert(is_same<test_type::iterator_category, input_iterator_tag>::value, \"\");\n+\n+  static_assert(is_same<test_type::char_type, wchar_t>::value, \"\");\n+  static_assert(is_same<test_type::traits_type, char_traits<wchar_t>>::value, \"\");\n+  static_assert(is_same<test_type::istream_type, wistream>::value, \"\");\n+  static_assert(is_same<test_type::streambuf_type, wstreambuf>::value, \"\");\n+}\n+#endif\n+#endif"}, {"sha": "ec2344374d9d42f63e0ee3ec3539b59c99731400", "filename": "libstdc++-v3/testsuite/24_iterators/operations/26020.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aeb3bef2cae234dbb90609392e536bafc09365c/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Foperations%2F26020.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aeb3bef2cae234dbb90609392e536bafc09365c/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Foperations%2F26020.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Foperations%2F26020.cc?ref=9aeb3bef2cae234dbb90609392e536bafc09365c", "previous_filename": "libstdc++-v3/testsuite/24_iterators/random_access_iterator/26020.cc"}, {"sha": "11813e39174f50789ec440cdc383aa9cc46484fa", "filename": "libstdc++-v3/testsuite/24_iterators/ostreambuf_iterator/requirements/typedefs.cc", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aeb3bef2cae234dbb90609392e536bafc09365c/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostreambuf_iterator%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aeb3bef2cae234dbb90609392e536bafc09365c/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostreambuf_iterator%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostreambuf_iterator%2Frequirements%2Ftypedefs.cc?ref=9aeb3bef2cae234dbb90609392e536bafc09365c", "patch": "@@ -41,3 +41,49 @@ void test01()\n   typedef test_iterator::ostream_type ostream_type;\n   typedef test_iterator::streambuf_type streambuf_type;\n }\n+\n+#if __cplusplus >= 201103L\n+void test02()\n+{\n+  using namespace std;\n+\n+  using test_type = ostreambuf_iterator<char>;\n+  static_assert(is_same<test_type::value_type, void>::value, \"\");\n+#if __cplusplus <= 201703L\n+  static_assert(is_same<test_type::difference_type, void>::value, \"\");\n+#else\n+  static_assert(is_same<test_type::difference_type, ptrdiff_t>::value, \"\");\n+#endif\n+  static_assert(is_same<test_type::pointer, void>::value, \"\");\n+  static_assert(is_same<test_type::reference, void>::value, \"\");\n+  static_assert(is_same<test_type::iterator_category, output_iterator_tag>::value, \"\");\n+\n+  static_assert(is_same<test_type::char_type, char>::value, \"\");\n+  static_assert(is_same<test_type::traits_type, char_traits<char>>::value, \"\");\n+  static_assert(is_same<test_type::ostream_type, ostream>::value, \"\");\n+  static_assert(is_same<test_type::streambuf_type, streambuf>::value, \"\");\n+}\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+void test03()\n+{\n+  using namespace std;\n+\n+  using test_type = ostreambuf_iterator<wchar_t>;\n+  static_assert(is_same<test_type::value_type, void>::value, \"\");\n+#if __cplusplus <= 201703L\n+  static_assert(is_same<test_type::difference_type, void>::value, \"\");\n+#else\n+  static_assert(is_same<test_type::difference_type, ptrdiff_t>::value, \"\");\n+#endif\n+  static_assert(is_same<test_type::pointer, void>::value, \"\");\n+  static_assert(is_same<test_type::reference, void>::value, \"\");\n+  static_assert(is_same<test_type::iterator_category, output_iterator_tag>::value, \"\");\n+\n+  static_assert(is_same<test_type::char_type, wchar_t>::value, \"\");\n+  static_assert(is_same<test_type::traits_type, char_traits<wchar_t>>::value, \"\");\n+  static_assert(is_same<test_type::ostream_type, wostream>::value, \"\");\n+  static_assert(is_same<test_type::streambuf_type, wstreambuf>::value, \"\");\n+}\n+#endif\n+#endif"}, {"sha": "1b8c593d844ed8acbd26526c392ebaea3057192e", "filename": "libstdc++-v3/testsuite/24_iterators/output/concept.cc", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aeb3bef2cae234dbb90609392e536bafc09365c/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Foutput%2Fconcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aeb3bef2cae234dbb90609392e536bafc09365c/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Foutput%2Fconcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Foutput%2Fconcept.cc?ref=9aeb3bef2cae234dbb90609392e536bafc09365c", "patch": "@@ -0,0 +1,121 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <iterator>\n+\n+using std::output_iterator;\n+\n+static_assert( output_iterator< int*, int > );\n+static_assert( output_iterator< int*, const int > );\n+static_assert( output_iterator< int*, long > );\n+static_assert( output_iterator< void**, void* > );\n+static_assert( output_iterator< void**, long* > );\n+static_assert( ! output_iterator< const int*, int > );\n+\n+static_assert( ! output_iterator< int* const, int > );\n+static_assert( ! output_iterator< const int* const, int > );\n+static_assert( ! output_iterator< void** const, void* > );\n+\n+static_assert( ! output_iterator< void*, void > );\n+static_assert( ! output_iterator< const void*, void > );\n+static_assert( ! output_iterator< const void*, void* > );\n+static_assert( ! output_iterator< volatile void*, void > );\n+static_assert( ! output_iterator< volatile void*, void* > );\n+\n+static_assert( ! output_iterator< void(*)(), void(&)() > );\n+static_assert( ! output_iterator< void(&)(), void(&)() > );\n+static_assert( output_iterator< void(**)(), void(*)() > );\n+static_assert( output_iterator< void(**)(), void(&)() > );\n+\n+struct A;\n+static_assert( ! output_iterator< void(A::*)(), A* > );\n+static_assert( ! output_iterator< void(A::*)(), void(A::*)() > );\n+static_assert( ! output_iterator< int A::*, int > );\n+static_assert( ! output_iterator< int A::*, int A::* > );\n+\n+#include <array>\n+#include <deque>\n+#include <forward_list>\n+#include <list>\n+#include <set>\n+#include <string>\n+#include <string_view>\n+#include <vector>\n+\n+using std::array;\n+using std::deque;\n+using std::forward_list;\n+using std::list;\n+using std::set;\n+using std::string;\n+using std::string_view;\n+using std::vector;\n+\n+struct B { };\n+\n+static_assert( output_iterator< array<int, 1>::iterator, int > );\n+static_assert( output_iterator< array<B, 1>::iterator, B > );\n+static_assert( ! output_iterator< array<int, 1>::const_iterator, int > );\n+static_assert( ! output_iterator< array<B, 1>::const_iterator, B > );\n+\n+static_assert( output_iterator< deque<int>::iterator, int > );\n+static_assert( output_iterator< deque<B>::iterator, B > );\n+static_assert( ! output_iterator< deque<int>::const_iterator, int > );\n+static_assert( ! output_iterator< deque<B>::const_iterator, B > );\n+\n+static_assert( output_iterator< forward_list<int>::iterator, int > );\n+static_assert( output_iterator< forward_list<B>::iterator, B > );\n+static_assert( ! output_iterator< forward_list<int>::const_iterator, int > );\n+static_assert( ! output_iterator< forward_list<B>::const_iterator, B > );\n+\n+static_assert( output_iterator< list<int>::iterator, int > );\n+static_assert( output_iterator< list<B>::iterator, B > );\n+static_assert( ! output_iterator< list<int>::const_iterator, int > );\n+static_assert( ! output_iterator< list<B>::const_iterator, B > );\n+\n+static_assert( ! output_iterator< set<int>::iterator, int > );\n+static_assert( ! output_iterator< set<B>::iterator, B > );\n+static_assert( ! output_iterator< set<int>::const_iterator, int > );\n+static_assert( ! output_iterator< set<B>::const_iterator, B > );\n+\n+static_assert( output_iterator< string::iterator, char > );\n+static_assert( output_iterator< string::iterator, int > );\n+static_assert( ! output_iterator< string::const_iterator, char > );\n+static_assert( ! output_iterator< string::const_iterator, int > );\n+\n+static_assert( ! output_iterator< string_view::iterator, char > );\n+static_assert( ! output_iterator< string_view::iterator, int > );\n+static_assert( ! output_iterator< string_view::const_iterator, char > );\n+static_assert( ! output_iterator< string_view::const_iterator, int > );\n+\n+static_assert( output_iterator< vector<int>::iterator, int > );\n+static_assert( output_iterator< vector<B>::iterator, B > );\n+static_assert( ! output_iterator< vector<int>::const_iterator, int > );\n+static_assert( ! output_iterator< vector<B>::const_iterator, B > );\n+\n+#include <streambuf>\n+\n+using std::istreambuf_iterator;\n+using std::ostreambuf_iterator;\n+\n+static_assert( ! output_iterator< istreambuf_iterator<char>, char > );\n+static_assert( ! output_iterator< istreambuf_iterator<char>, int > );\n+static_assert( output_iterator< ostreambuf_iterator<char>, char > );\n+static_assert( output_iterator< ostreambuf_iterator<char>, int > );"}, {"sha": "515088eb1c070b52efd24e422a26b0fb5fa5992b", "filename": "libstdc++-v3/testsuite/24_iterators/output/tag.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aeb3bef2cae234dbb90609392e536bafc09365c/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Foutput%2Ftag.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aeb3bef2cae234dbb90609392e536bafc09365c/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Foutput%2Ftag.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Foutput%2Ftag.cc?ref=9aeb3bef2cae234dbb90609392e536bafc09365c", "patch": "@@ -0,0 +1,32 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <iterator>\n+\n+using std::output_iterator_tag;\n+using std::input_iterator_tag;\n+using std::iterator_traits;\n+\n+static_assert( std::is_empty<output_iterator_tag>::value );\n+static_assert( std::is_trivially_copy_constructible<output_iterator_tag>::value );\n+\n+static_assert( ! std::is_base_of<input_iterator_tag,\n+\t\t\t\t output_iterator_tag>::value );\n+static_assert( ! std::is_convertible<output_iterator_tag*,\n+\t\t\t\t     input_iterator_tag*>::value );"}, {"sha": "f513c57fe36e8a21c89f5c84103f9eba1c5e6493", "filename": "libstdc++-v3/testsuite/24_iterators/random_access/concept.cc", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aeb3bef2cae234dbb90609392e536bafc09365c/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frandom_access%2Fconcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aeb3bef2cae234dbb90609392e536bafc09365c/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frandom_access%2Fconcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frandom_access%2Fconcept.cc?ref=9aeb3bef2cae234dbb90609392e536bafc09365c", "patch": "@@ -0,0 +1,76 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <iterator>\n+\n+using std::random_access_iterator;\n+\n+static_assert( random_access_iterator< int*\t    > );\n+static_assert( random_access_iterator< const int* > );\n+static_assert( random_access_iterator< void**\t    > );\n+\n+static_assert( ! random_access_iterator< int* const\t> );\n+static_assert( ! random_access_iterator< const int* const\t> );\n+static_assert( ! random_access_iterator< void** const\t> );\n+\n+static_assert( ! random_access_iterator< void*\t  > );\n+static_assert( ! random_access_iterator< const void*\t  > );\n+static_assert( ! random_access_iterator< volatile void* > );\n+\n+static_assert( ! random_access_iterator< void(*)() > );\n+static_assert( ! random_access_iterator< void(&)() > );\n+\n+struct A;\n+static_assert( ! random_access_iterator< void(A::*)() > );\n+static_assert( ! random_access_iterator< int A::*\t> );\n+\n+#include <array>\n+#include <deque>\n+#include <list>\n+#include <string>\n+#include <string_view>\n+#include <vector>\n+\n+using std::array;\n+using std::deque;\n+using std::list;\n+using std::string;\n+using std::string_view;\n+using std::vector;\n+\n+struct B { };\n+\n+static_assert( random_access_iterator< array<int, 1>::iterator\t    > );\n+static_assert( random_access_iterator< array<B, 1>::const_iterator  > );\n+\n+static_assert( random_access_iterator< deque<int>::iterator\t> );\n+static_assert( random_access_iterator< deque<B>::const_iterator\t> );\n+\n+static_assert( ! random_access_iterator< list<int>::iterator\t  > );\n+static_assert( ! random_access_iterator< list<B>::const_iterator  > );\n+\n+static_assert( random_access_iterator< string::iterator\t\t> );\n+static_assert( random_access_iterator< string::const_iterator\t> );\n+\n+static_assert( random_access_iterator< string_view::iterator\t    > );\n+static_assert( random_access_iterator< string_view::const_iterator  > );\n+\n+static_assert( random_access_iterator< vector<int>::iterator\t  > );\n+static_assert( random_access_iterator< vector<B>::const_iterator  > );"}, {"sha": "c496254a228889d777718b215fb93de92fdeaa0f", "filename": "libstdc++-v3/testsuite/24_iterators/random_access/string_vector_iterators.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aeb3bef2cae234dbb90609392e536bafc09365c/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frandom_access%2Fstring_vector_iterators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aeb3bef2cae234dbb90609392e536bafc09365c/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frandom_access%2Fstring_vector_iterators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frandom_access%2Fstring_vector_iterators.cc?ref=9aeb3bef2cae234dbb90609392e536bafc09365c", "previous_filename": "libstdc++-v3/testsuite/24_iterators/random_access_iterator/string_vector_iterators.cc"}, {"sha": "c2285fdfc505fa36aa92696607714b765abf8a76", "filename": "libstdc++-v3/testsuite/24_iterators/random_access/tag.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aeb3bef2cae234dbb90609392e536bafc09365c/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frandom_access%2Ftag.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aeb3bef2cae234dbb90609392e536bafc09365c/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frandom_access%2Ftag.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frandom_access%2Ftag.cc?ref=9aeb3bef2cae234dbb90609392e536bafc09365c", "patch": "@@ -0,0 +1,35 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <iterator>\n+\n+using std::random_access_iterator_tag;\n+using std::bidirectional_iterator_tag;\n+using std::iterator_traits;\n+\n+static_assert( std::is_empty<random_access_iterator_tag>::value );\n+static_assert( std::is_trivially_copy_constructible<random_access_iterator_tag>::value );\n+\n+static_assert( std::is_base_of<bidirectional_iterator_tag,\n+\t\t\t       random_access_iterator_tag>::value );\n+static_assert( std::is_convertible<random_access_iterator_tag*,\n+\t\t\t\t   bidirectional_iterator_tag*>::value );\n+\n+static_assert( std::is_same<iterator_traits<int*>::iterator_category,\n+\t\t\t    random_access_iterator_tag>::value );"}, {"sha": "6a21da30e3fd1e6b2c7dc466c649ede11c140c90", "filename": "libstdc++-v3/testsuite/24_iterators/range_operations/advance_debug_neg.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aeb3bef2cae234dbb90609392e536bafc09365c/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frange_operations%2Fadvance_debug_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aeb3bef2cae234dbb90609392e536bafc09365c/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frange_operations%2Fadvance_debug_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frange_operations%2Fadvance_debug_neg.cc?ref=9aeb3bef2cae234dbb90609392e536bafc09365c", "patch": "@@ -0,0 +1,31 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a -D_GLIBCXX_DEBUG\" }\n+// { dg-do compile { xfail c++2a } }\n+\n+#include <iterator>\n+#include <testsuite_iterators.h>\n+\n+void\n+test01()\n+{\n+  int a[2] = { };\n+  __gnu_test::test_container<int, __gnu_test::forward_iterator_wrapper> c(a);\n+  auto iter = c.begin();\n+  std::ranges::advance(iter, -1);\n+}"}]}