{"sha": "fbf8314b0a8dc4e234997aaa850675379e0adc2a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmJmODMxNGIwYThkYzRlMjM0OTk3YWFhODUwNjc1Mzc5ZTBhZGMyYQ==", "commit": {"author": {"name": "Vineet Gupta", "email": "vgupta@synopsys.com", "date": "2019-12-12T08:42:21Z"}, "committer": {"name": "Claudiu Zissulescu", "email": "claziss@gcc.gnu.org", "date": "2019-12-12T08:42:21Z"}, "message": "[ARC] generate signaling FDCMPF for hard float comparisons\n\nPR 92846:\nARC gcc generates FDCMP instructions which raises Invalid operation for\nsignaling NaN only. This causes glibc iseqsig() primitives to fail (in\nthe current ongoing glibc port to ARC)\n\nSo break up the hard float compares into tw categories and for unordered\ncompares generate the FDCMPF instructions which raised exception for\neither NaNs.\n\nWith this fix testsuite/gcc.dg/torture/pr52451.c passes for ARC.\n\nAlso no regressions for the glibc math testsuite, only 6 additional\npasses for test*iseqsig\n\ngcc/\nxxxx-xx-xx  Vineet Gupta  <vgupta@synopsys.com>\n\n\t* config/arc/arc-modes.def (CC_FPUE): New Mode CC_FPUE which\n\thelps codegen generate exceptions even for quiet NaN.\n\t* config/arc/arc.c (arc_init_reg_tables): Handle New CC_FPUE mode.\n\t(get_arc_condition_code): Likewise.\n\t(arc_select_cc_mode): LT, LE, GT, GE to use the New CC_FPUE mode.\n\t* config/arc/arc.h (REVERSE_CONDITION): Handle New CC_FPUE mode.\n\t* config/arc/predicates.md (proper_comparison_operator): Likewise.\n\t* config/arc/fpu.md (cmpsf_fpu_trap): New Pattern for CC_FPUE.\n\t(cmpdf_fpu_trap): Likewise.\n\nSigned-off-by: Vineet Gupta <vgupta@synopsys.com>\n\nFrom-SVN: r279274", "tree": {"sha": "1fa68ba3b4ce03df9d29f61d24daae3c0150806c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1fa68ba3b4ce03df9d29f61d24daae3c0150806c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fbf8314b0a8dc4e234997aaa850675379e0adc2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbf8314b0a8dc4e234997aaa850675379e0adc2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbf8314b0a8dc4e234997aaa850675379e0adc2a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbf8314b0a8dc4e234997aaa850675379e0adc2a/comments", "author": {"login": "vineetgarc", "id": 1390751, "node_id": "MDQ6VXNlcjEzOTA3NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1390751?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vineetgarc", "html_url": "https://github.com/vineetgarc", "followers_url": "https://api.github.com/users/vineetgarc/followers", "following_url": "https://api.github.com/users/vineetgarc/following{/other_user}", "gists_url": "https://api.github.com/users/vineetgarc/gists{/gist_id}", "starred_url": "https://api.github.com/users/vineetgarc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vineetgarc/subscriptions", "organizations_url": "https://api.github.com/users/vineetgarc/orgs", "repos_url": "https://api.github.com/users/vineetgarc/repos", "events_url": "https://api.github.com/users/vineetgarc/events{/privacy}", "received_events_url": "https://api.github.com/users/vineetgarc/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "48f13fb118fe82efebf8fcec3a42be89486ec2dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48f13fb118fe82efebf8fcec3a42be89486ec2dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48f13fb118fe82efebf8fcec3a42be89486ec2dc"}], "stats": {"total": 48, "additions": 45, "deletions": 3}, "files": [{"sha": "c9eb4224d0165f20ff5a6faa90b2302bdbd921d8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbf8314b0a8dc4e234997aaa850675379e0adc2a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbf8314b0a8dc4e234997aaa850675379e0adc2a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fbf8314b0a8dc4e234997aaa850675379e0adc2a", "patch": "@@ -1,3 +1,15 @@\n+2019-12-12  Vineet Gupta  <vgupta@synopsys.com>\n+\n+\t* config/arc/arc-modes.def (CC_FPUE): New Mode CC_FPUE which\n+\thelps codegen generate exceptions even for quiet NaN.\n+\t* config/arc/arc.c (arc_init_reg_tables): Handle New CC_FPUE mode.\n+\t(get_arc_condition_code): Likewise.\n+\t(arc_select_cc_mode): LT, LE, GT, GE to use the New CC_FPUE mode.\n+\t* config/arc/arc.h (REVERSE_CONDITION): Handle New CC_FPUE mode.\n+\t* config/arc/predicates.md (proper_comparison_operator): Likewise.\n+\t* config/arc/fpu.md (cmpsf_fpu_trap): New Pattern for CC_FPUE.\n+\t(cmpdf_fpu_trap): Likewise.\n+\n 2019-12-12  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* config/arc/arc.md (iterator SDF): Check TARGET_FP_DP_BASE."}, {"sha": "d16b6a289a15b807e397fe36f116e3e45bd8afe7", "filename": "gcc/config/arc/arc-modes.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbf8314b0a8dc4e234997aaa850675379e0adc2a/gcc%2Fconfig%2Farc%2Farc-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbf8314b0a8dc4e234997aaa850675379e0adc2a/gcc%2Fconfig%2Farc%2Farc-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc-modes.def?ref=fbf8314b0a8dc4e234997aaa850675379e0adc2a", "patch": "@@ -38,4 +38,5 @@ VECTOR_MODES (INT, 16);       /* V16QI V8HI V4SI V2DI */\n \n /* FPU condition flags.  */\n CC_MODE (CC_FPU);\n+CC_MODE (CC_FPUE);\n CC_MODE (CC_FPU_UNEQ);"}, {"sha": "cbb95d6e9043cc8556726219fa2f4e2037eed851", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbf8314b0a8dc4e234997aaa850675379e0adc2a/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbf8314b0a8dc4e234997aaa850675379e0adc2a/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=fbf8314b0a8dc4e234997aaa850675379e0adc2a", "patch": "@@ -1564,6 +1564,7 @@ get_arc_condition_code (rtx comparison)\n \tdefault : gcc_unreachable ();\n \t}\n     case E_CC_FPUmode:\n+    case E_CC_FPUEmode:\n       switch (GET_CODE (comparison))\n \t{\n \tcase EQ\t       : return ARC_CC_EQ;\n@@ -1686,11 +1687,13 @@ arc_select_cc_mode (enum rtx_code op, rtx x, rtx y)\n       case UNLE:\n       case UNGT:\n       case UNGE:\n+\treturn CC_FPUmode;\n+\n       case LT:\n       case LE:\n       case GT:\n       case GE:\n-\treturn CC_FPUmode;\n+\treturn CC_FPUEmode;\n \n       case LTGT:\n       case UNEQ:\n@@ -1844,7 +1847,7 @@ arc_init_reg_tables (void)\n \t  if (i == (int) CCmode || i == (int) CC_ZNmode || i == (int) CC_Zmode\n \t      || i == (int) CC_Cmode\n \t      || i == CC_FP_GTmode || i == CC_FP_GEmode || i == CC_FP_ORDmode\n-\t      || i == CC_FPUmode || i == CC_FPU_UNEQmode)\n+\t      || i == CC_FPUmode || i == CC_FPUEmode || i == CC_FPU_UNEQmode)\n \t    arc_mode_class[i] = 1 << (int) C_MODE;\n \t  else\n \t    arc_mode_class[i] = 0;\n@@ -8401,6 +8404,7 @@ arc_reorg (void)\n \n \t  /* Avoid FPU instructions.  */\n \t  if ((GET_MODE (XEXP (XEXP (pc_target, 0), 0)) == CC_FPUmode)\n+\t      || (GET_MODE (XEXP (XEXP (pc_target, 0), 0)) == CC_FPUEmode)\n \t      || (GET_MODE (XEXP (XEXP (pc_target, 0), 0)) == CC_FPU_UNEQmode))\n \t    continue;\n "}, {"sha": "c08ca3d0d432ec793ddfba0bc0e5fc2ed994e45c", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbf8314b0a8dc4e234997aaa850675379e0adc2a/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbf8314b0a8dc4e234997aaa850675379e0adc2a/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=fbf8314b0a8dc4e234997aaa850675379e0adc2a", "patch": "@@ -1531,7 +1531,7 @@ enum arc_function_type {\n   (((MODE) == CC_FP_GTmode || (MODE) == CC_FP_GEmode\t\t \\\n     || (MODE) == CC_FP_UNEQmode || (MODE) == CC_FP_ORDmode\t \\\n     || (MODE) == CC_FPXmode || (MODE) == CC_FPU_UNEQmode\t \\\n-    || (MODE) == CC_FPUmode)\t\t\t\t\t \\\n+    || (MODE) == CC_FPUmode || (MODE) == CC_FPUEmode)\t\t \\\n    ? reverse_condition_maybe_unordered ((CODE))\t\t\t \\\n    : reverse_condition ((CODE)))\n "}, {"sha": "6729795de542bf720c6b2ae7d3883b462791d77b", "filename": "gcc/config/arc/fpu.md", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbf8314b0a8dc4e234997aaa850675379e0adc2a/gcc%2Fconfig%2Farc%2Ffpu.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbf8314b0a8dc4e234997aaa850675379e0adc2a/gcc%2Fconfig%2Farc%2Ffpu.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Ffpu.md?ref=fbf8314b0a8dc4e234997aaa850675379e0adc2a", "patch": "@@ -242,6 +242,18 @@\n    (set_attr \"type\" \"fpu\")\n    (set_attr \"predicable\" \"yes\")])\n \n+(define_insn \"*cmpsf_fpu_trap\"\n+  [(set (reg:CC_FPUE CC_REG)\n+\t(compare:CC_FPUE (match_operand:SF 0 \"register_operand\"  \"r,  r,r\")\n+\t\t\t(match_operand:SF 1 \"nonmemory_operand\" \"r,CfZ,F\")))]\n+  \"TARGET_FP_SP_BASE\"\n+  \"fscmpf%?\\\\t%0,%1\"\n+  [(set_attr \"length\" \"4,4,8\")\n+   (set_attr \"iscompact\" \"false\")\n+   (set_attr \"cond\" \"set\")\n+   (set_attr \"type\" \"fpu\")\n+   (set_attr \"predicable\" \"yes\")])\n+\n (define_insn \"*cmpsf_fpu_uneq\"\n   [(set (reg:CC_FPU_UNEQ CC_REG)\n \t(compare:CC_FPU_UNEQ\n@@ -338,6 +350,18 @@\n    (set_attr \"type\" \"fpu\")\n    (set_attr \"predicable\" \"yes\")])\n \n+(define_insn \"*cmpdf_fpu_trap\"\n+  [(set (reg:CC_FPUE CC_REG)\n+\t(compare:CC_FPUE (match_operand:DF 0 \"even_register_operand\"  \"r\")\n+\t\t\t(match_operand:DF 1 \"even_register_operand\"  \"r\")))]\n+  \"TARGET_FP_DP_BASE\"\n+  \"fdcmpf%? %0, %1\"\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"iscompact\" \"false\")\n+   (set_attr \"cond\" \"set\")\n+   (set_attr \"type\" \"fpu\")\n+   (set_attr \"predicable\" \"yes\")])\n+\n (define_insn \"*cmpdf_fpu_uneq\"\n   [(set (reg:CC_FPU_UNEQ CC_REG)\n \t(compare:CC_FPU_UNEQ"}, {"sha": "4d2ad7ba67896211d60fe0874cffbc78037c5500", "filename": "gcc/config/arc/predicates.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbf8314b0a8dc4e234997aaa850675379e0adc2a/gcc%2Fconfig%2Farc%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbf8314b0a8dc4e234997aaa850675379e0adc2a/gcc%2Fconfig%2Farc%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Fpredicates.md?ref=fbf8314b0a8dc4e234997aaa850675379e0adc2a", "patch": "@@ -439,6 +439,7 @@\n \t      || code == ORDERED || code == UNORDERED);\n \n     case E_CC_FPUmode:\n+    case E_CC_FPUEmode:\n       return 1;\n     case E_CC_FPU_UNEQmode:\n       return 1;"}]}