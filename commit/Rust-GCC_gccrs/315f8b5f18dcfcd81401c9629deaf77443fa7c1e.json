{"sha": "315f8b5f18dcfcd81401c9629deaf77443fa7c1e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzE1ZjhiNWYxOGRjZmNkODE0MDFjOTYyOWRlYWY3NzQ0M2ZhN2MxZQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-05-02T21:23:38Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-05-02T21:23:38Z"}, "message": "PR libstdc++/90314 fix non-equivalent declarations of std::swap\n\nIn order to use the _GLIBCXX_NOEXCEPT_IF macro for an expression\ncontaining commas I enclosed it in parentheses, so the preprocessor\nwouldn't treat it as two arguments to the function-like macro. Clang\ngives an error because now the noexcept-specifier noexcept((C)) is not\nequivalent to the noexcept(C) one on the declaration of swap in\n<type_traits>.\n\nInstead of requiring extra parentheses around the expression, redefine\n_GLIBCXX_NOEXCEPT_IF as a variadic macro (even though supporting that in\nC++98 is a GNU extension).\n\n\tPR libstdc++/90314\n\t* include/bits/c++config (_GLIBCXX_NOEXCEPT_IF): Use variadic macro.\n\t* include/bits/move.h (swap): Remove extra parentheses.\n\nFrom-SVN: r270827", "tree": {"sha": "c67f2a13583af00c07f97f877c822185815fe380", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c67f2a13583af00c07f97f877c822185815fe380"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/315f8b5f18dcfcd81401c9629deaf77443fa7c1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/315f8b5f18dcfcd81401c9629deaf77443fa7c1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/315f8b5f18dcfcd81401c9629deaf77443fa7c1e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/315f8b5f18dcfcd81401c9629deaf77443fa7c1e/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b752e2c926065820a0086c7a482edf199d79dfc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b752e2c926065820a0086c7a482edf199d79dfc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b752e2c926065820a0086c7a482edf199d79dfc2"}], "stats": {"total": 12, "additions": 8, "deletions": 4}, "files": [{"sha": "6c93604d3187c00ac0506b4c5bbf269d9cf7adeb", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/315f8b5f18dcfcd81401c9629deaf77443fa7c1e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/315f8b5f18dcfcd81401c9629deaf77443fa7c1e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=315f8b5f18dcfcd81401c9629deaf77443fa7c1e", "patch": "@@ -1,5 +1,9 @@\n 2019-05-02  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/90314\n+\t* include/bits/c++config (_GLIBCXX_NOEXCEPT_IF): Use variadic macro.\n+\t* include/bits/move.h (swap): Remove extra parentheses.\n+\n \t* include/experimental/bits/lfts_config.h: Improve doc markup.\n \t* include/experimental/optional: Improve docs.\n \t(_Has_addressof_mem, _Has_addressof_free, _Has_addressof)"}, {"sha": "ca1557af56436cf2411d5df6ca40f1277b5971fa", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/315f8b5f18dcfcd81401c9629deaf77443fa7c1e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/315f8b5f18dcfcd81401c9629deaf77443fa7c1e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=315f8b5f18dcfcd81401c9629deaf77443fa7c1e", "patch": "@@ -157,12 +157,12 @@\n #ifndef _GLIBCXX_NOEXCEPT\n # if __cplusplus >= 201103L\n #  define _GLIBCXX_NOEXCEPT noexcept\n-#  define _GLIBCXX_NOEXCEPT_IF(_COND) noexcept(_COND)\n+#  define _GLIBCXX_NOEXCEPT_IF(...) noexcept(__VA_ARGS__)\n #  define _GLIBCXX_USE_NOEXCEPT noexcept\n #  define _GLIBCXX_THROW(_EXC)\n # else\n #  define _GLIBCXX_NOEXCEPT\n-#  define _GLIBCXX_NOEXCEPT_IF(_COND)\n+#  define _GLIBCXX_NOEXCEPT_IF(...)\n #  define _GLIBCXX_USE_NOEXCEPT throw()\n #  define _GLIBCXX_THROW(_EXC) throw(_EXC)\n # endif"}, {"sha": "7271e273e8eed4d13fdaeca6f99da9bb0bdf4289", "filename": "libstdc++-v3/include/bits/move.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/315f8b5f18dcfcd81401c9629deaf77443fa7c1e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/315f8b5f18dcfcd81401c9629deaf77443fa7c1e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h?ref=315f8b5f18dcfcd81401c9629deaf77443fa7c1e", "patch": "@@ -183,8 +183,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     void\n #endif\n     swap(_Tp& __a, _Tp& __b)\n-    _GLIBCXX_NOEXCEPT_IF((__and_<is_nothrow_move_constructible<_Tp>,\n-\t\t\t\t is_nothrow_move_assignable<_Tp>>::value))\n+    _GLIBCXX_NOEXCEPT_IF(__and_<is_nothrow_move_constructible<_Tp>,\n+\t\t\t\tis_nothrow_move_assignable<_Tp>>::value)\n     {\n       // concept requirements\n       __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)"}]}