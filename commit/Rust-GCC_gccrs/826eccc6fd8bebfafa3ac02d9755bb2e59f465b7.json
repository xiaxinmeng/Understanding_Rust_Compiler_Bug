{"sha": "826eccc6fd8bebfafa3ac02d9755bb2e59f465b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI2ZWNjYzZmZDhiZWJmYWZhM2FjMDJkOTc1NWJiMmU1OWY0NjViNw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-11-21T17:40:34Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-11-21T17:40:34Z"}, "message": "re PR c++/83045 (-Wreturn-type regression in C++)\n\n\tPR c++/83045\n\t* tree-cfg.c (pass_warn_function_return::execute): Formatting fix.\n\tAlso warn if seen __builtin_unreachable () call with BUILTINS_LOCATION.\n\tUse LOCATION_LOCUS when comparing against UNKNOWN_LOCATION.\n\n\t* c-c++-common/pr61405.c (fn0, fn1): Add return stmts.\n\t* c-c++-common/Wlogical-op-2.c (fn): Likewise.\n\t* g++.dg/debug/pr53466.C: Add -Wno-return-type to dg-options.\n\t* g++.dg/opt/combine.C: Likewise.\n\t* g++.dg/ubsan/return-3.C: Likewise.\n\t* g++.dg/pr59445.C: Likewise.\n\t* g++.dg/pr49847.C: Likewise.\n\t* g++.dg/ipa/pr61800.C: Likewise.\n\t* g++.dg/ipa/pr63470.C: Likewise.\n\t* g++.dg/ipa/pr68672-1.C: Likewise.\n\t* g++.dg/pr58438.C: Likewise.\n\t* g++.dg/torture/pr59265.C: Likewise.\n\t* g++.dg/tree-ssa/ssa-dse-2.C: Likewise.\n\t* g++.old-deja/g++.eh/catch13.C: Likewise.\n\t* g++.old-deja/g++.eh/crash1.C: Likewise.\n\t* g++.dg/tm/pr60004.C: Expect -Wreturn-type warning.\n\t* g++.dg/torture/pr55740.C: Likewise.\n\t* g++.dg/torture/pr43257.C: Likewise.\n\t* g++.dg/torture/pr64280.C: Likewise.\n\t* g++.dg/torture/pr54684.C: Likewise.\n\t* g++.dg/torture/pr56694.C: Likewise.\n\t* g++.dg/torture/pr68470.C: Likewise.\n\t* g++.dg/torture/pr60648.C: Likewise.\n\t* g++.dg/torture/pr71281.C: Likewise.\n\t* g++.dg/torture/pr52772.C: Add -Wno-return-type dg-additional-options.\n\t* g++.dg/torture/pr64669.C: Likewise.\n\t* g++.dg/torture/pr58369.C: Likewise.\n\t* g++.dg/torture/pr33627.C: Likewise.\n\t* g++.dg/torture/predcom-1.C: Add\n\t#pragma GCC diagnostic ignored \"-Wreturn-type\".\n\t* g++.dg/lto/20090221_0.C: Likewise.\n\t* g++.dg/lto/20091026-1_1.C: Likewise.\n\t* g++.dg/lto/pr54625-1_1.C: Likewise.\n\t* g++.dg/warn/pr83045.C: New test.\n\nFrom-SVN: r255018", "tree": {"sha": "39a19feeb4e8a2c41e98c603252802db36730aeb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39a19feeb4e8a2c41e98c603252802db36730aeb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/comments", "author": null, "committer": null, "parents": [{"sha": "8fccb0a6b606aacc1bcb3e02b400c5d6455196cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fccb0a6b606aacc1bcb3e02b400c5d6455196cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fccb0a6b606aacc1bcb3e02b400c5d6455196cc"}], "stats": {"total": 164, "additions": 136, "deletions": 28}, "files": [{"sha": "d631cb694d1d746ed08de40c18eb6e637bf8d355", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=826eccc6fd8bebfafa3ac02d9755bb2e59f465b7", "patch": "@@ -1,7 +1,14 @@\n+2017-11-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/83045\n+\t* tree-cfg.c (pass_warn_function_return::execute): Formatting fix.\n+\tAlso warn if seen __builtin_unreachable () call with BUILTINS_LOCATION.\n+\tUse LOCATION_LOCUS when comparing against UNKNOWN_LOCATION.\n+\n 2017-11-21  Martin Liska  <mliska@suse.cz>\n \n-\t* tree-inline.c (expand_call_inline):\n-\t  Remove not needed xstrdup_for_dump.\n+\t* tree-inline.c (expand_call_inline): Remove not needed\n+\txstrdup_for_dump.\n \n 2017-11-21  James Cowgill  <James.Cowgill@imgtec.com>\n \t    Jakub Jelinek  <jakub@redhat.com>"}, {"sha": "eb333c1251a0a929f7beb7e09154ea2e1cee519a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=826eccc6fd8bebfafa3ac02d9755bb2e59f465b7", "patch": "@@ -1,3 +1,41 @@\n+2017-11-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/83045\n+\t* c-c++-common/pr61405.c (fn0, fn1): Add return stmts.\n+\t* c-c++-common/Wlogical-op-2.c (fn): Likewise.\n+\t* g++.dg/debug/pr53466.C: Add -Wno-return-type to dg-options.\n+\t* g++.dg/opt/combine.C: Likewise.\n+\t* g++.dg/ubsan/return-3.C: Likewise.\n+\t* g++.dg/pr59445.C: Likewise.\n+\t* g++.dg/pr49847.C: Likewise.\n+\t* g++.dg/ipa/pr61800.C: Likewise.\n+\t* g++.dg/ipa/pr63470.C: Likewise.\n+\t* g++.dg/ipa/pr68672-1.C: Likewise.\n+\t* g++.dg/pr58438.C: Likewise.\n+\t* g++.dg/torture/pr59265.C: Likewise.\n+\t* g++.dg/tree-ssa/ssa-dse-2.C: Likewise.\n+\t* g++.old-deja/g++.eh/catch13.C: Likewise.\n+\t* g++.old-deja/g++.eh/crash1.C: Likewise.\n+\t* g++.dg/tm/pr60004.C: Expect -Wreturn-type warning.\n+\t* g++.dg/torture/pr55740.C: Likewise.\n+\t* g++.dg/torture/pr43257.C: Likewise.\n+\t* g++.dg/torture/pr64280.C: Likewise.\n+\t* g++.dg/torture/pr54684.C: Likewise.\n+\t* g++.dg/torture/pr56694.C: Likewise.\n+\t* g++.dg/torture/pr68470.C: Likewise.\n+\t* g++.dg/torture/pr60648.C: Likewise.\n+\t* g++.dg/torture/pr71281.C: Likewise.\n+\t* g++.dg/torture/pr52772.C: Add -Wno-return-type dg-additional-options.\n+\t* g++.dg/torture/pr64669.C: Likewise.\n+\t* g++.dg/torture/pr58369.C: Likewise.\n+\t* g++.dg/torture/pr33627.C: Likewise.\n+\t* g++.dg/torture/predcom-1.C: Add\n+\t#pragma GCC diagnostic ignored \"-Wreturn-type\".\n+\t* g++.dg/lto/20090221_0.C: Likewise.\n+\t* g++.dg/lto/20091026-1_1.C: Likewise.\n+\t* g++.dg/lto/pr54625-1_1.C: Likewise.\n+\t* g++.dg/warn/pr83045.C: New test.\n+\n 2017-11-21  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.target/i386/movbe-1.c: Update scan string for movbe"}, {"sha": "5d8a3fcd91da61d4961661fd5074914643f75b1e", "filename": "gcc/testsuite/c-c++-common/Wlogical-op-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWlogical-op-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWlogical-op-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWlogical-op-2.c?ref=826eccc6fd8bebfafa3ac02d9755bb2e59f465b7", "patch": "@@ -9,4 +9,5 @@ fn (int a, int b)\n     return a;\n   if ((a + 1) || (a + 1)) /* { dg-warning \"logical .or. of equal expressions\" } */\n     return b;\n+  return -1;\n }"}, {"sha": "f186926617fc9a08752488555245586942d3088d", "filename": "gcc/testsuite/c-c++-common/pr61405.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr61405.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr61405.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr61405.c?ref=826eccc6fd8bebfafa3ac02d9755bb2e59f465b7", "patch": "@@ -16,6 +16,7 @@ fn0 (struct S *s)\n     case B:\n       return 2;\n     }\n+  return 3;\n }\n \n int\n@@ -28,4 +29,5 @@ fn1 (TS *s)\n     case B:\n       return 2;\n     }\n+  return 3;\n }"}, {"sha": "0ab90d478d4b81f9148772612b700f1e8ae4d7b7", "filename": "gcc/testsuite/g++.dg/debug/pr53466.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fpr53466.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fpr53466.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fpr53466.C?ref=826eccc6fd8bebfafa3ac02d9755bb2e59f465b7", "patch": "@@ -1,5 +1,5 @@\n // { dg-do compile }\n-// { dg-options \"-foptimize-sibling-calls -fcompare-debug\" }\n+// { dg-options \"-foptimize-sibling-calls -fcompare-debug -Wno-return-type\" }\n \n typedef union gimple_statement_d *gimple;\n typedef gimple gimple_seq_node;"}, {"sha": "e5336f2f120ea1eecb1b72272d84a22010acd786", "filename": "gcc/testsuite/g++.dg/ipa/pr61800.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr61800.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr61800.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr61800.C?ref=826eccc6fd8bebfafa3ac02d9755bb2e59f465b7", "patch": "@@ -1,7 +1,7 @@\n /* PR ipa/61800 */\n /* { dg-do compile } */\n /* { dg-require-visibility \"\" } */\n-/* { dg-options \"-O2\" } */\n+/* { dg-options \"-O2 -Wno-return-type\" } */\n \n #pragma GCC visibility push(hidden)\n class A"}, {"sha": "f2dc111c6b9c47ad065f6d04a38efb74d0ef469d", "filename": "gcc/testsuite/g++.dg/ipa/pr63470.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr63470.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr63470.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr63470.C?ref=826eccc6fd8bebfafa3ac02d9755bb2e59f465b7", "patch": "@@ -1,6 +1,6 @@\n /* PR ipa/63470.C */\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -finline-functions\" } */\n+/* { dg-options \"-O2 -finline-functions -Wno-return-type\" } */\n \n class A\n {"}, {"sha": "4e30d66baaec784873e435a4291f2351fbf88ad1", "filename": "gcc/testsuite/g++.dg/ipa/pr68672-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr68672-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr68672-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr68672-1.C?ref=826eccc6fd8bebfafa3ac02d9755bb2e59f465b7", "patch": "@@ -1,6 +1,6 @@\n // PR ipa/68672\n // { dg-do compile }\n-// { dg-options \"-O -finline-small-functions -fpartial-inlining --param=partial-inlining-entry-probability=100\" }\n+// { dg-options \"-O -finline-small-functions -fpartial-inlining --param=partial-inlining-entry-probability=100 -Wno-return-type\" }\n \n void f2 (void *);\n void *a;"}, {"sha": "ccbe4533e289c21264eb25655278b542fa93a218", "filename": "gcc/testsuite/g++.dg/lto/20090221_0.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20090221_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20090221_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20090221_0.C?ref=826eccc6fd8bebfafa3ac02d9755bb2e59f465b7", "patch": "@@ -25,6 +25,7 @@ struct Baz\n  Baz(Bar &a):a(a) { }\n };\n \n+#pragma GCC diagnostic ignored \"-Wreturn-type\"\n struct Zonk\n {\n  Baz baz;"}, {"sha": "35ca21859ba714fd114f73cffdc178851b4726ce", "filename": "gcc/testsuite/g++.dg/lto/20091026-1_1.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20091026-1_1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20091026-1_1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20091026-1_1.C?ref=826eccc6fd8bebfafa3ac02d9755bb2e59f465b7", "patch": "@@ -1,4 +1,6 @@\n #include \"20091026-1_a.h\"\n+\n+#pragma GCC diagnostic ignored \"-Wreturn-type\"\n extern cHead networks;\n class cNetworkType;\n inline cNetworkType *findNetwork(const char *s)"}, {"sha": "3d5f05e361d5246301ce864806cc038c451256a9", "filename": "gcc/testsuite/g++.dg/lto/pr54625-1_1.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr54625-1_1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr54625-1_1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr54625-1_1.C?ref=826eccc6fd8bebfafa3ac02d9755bb2e59f465b7", "patch": "@@ -1,5 +1,6 @@\n extern \"C\" double sin (double);\n typedef double UnaryFunType (double);\n+#pragma GCC diagnostic ignored \"-Wreturn-type\"\n class A\n {\n public:"}, {"sha": "08aa9900b180f9582e15e7b34d7a2fb7ad2c8ac4", "filename": "gcc/testsuite/g++.dg/opt/combine.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fcombine.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fcombine.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fcombine.C?ref=826eccc6fd8bebfafa3ac02d9755bb2e59f465b7", "patch": "@@ -1,5 +1,5 @@\n // { dg-do assemble { target fpic } }\n-// { dg-options \"-O2 -fweb -fPIC -fvisibility=hidden\" }\n+// { dg-options \"-O2 -fweb -fPIC -fvisibility=hidden -Wno-return-type\" }\n // { dg-require-visibility \"\" }\n \n class QBasicAtomicInt"}, {"sha": "42bd5a18159a99b37908455dc5f4418696db80ce", "filename": "gcc/testsuite/g++.dg/pr49847.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr49847.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr49847.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr49847.C?ref=826eccc6fd8bebfafa3ac02d9755bb2e59f465b7", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -fnon-call-exceptions\" } */\n+/* { dg-options \"-O -fnon-call-exceptions -Wno-return-type\" } */\n int f (float g)\n {\n   try { return g >= 0; }"}, {"sha": "820f070080699dd452e41c65d6466beaa0c0b89c", "filename": "gcc/testsuite/g++.dg/pr58438.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr58438.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr58438.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr58438.C?ref=826eccc6fd8bebfafa3ac02d9755bb2e59f465b7", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-march=amdfam10 -O3 -fprofile-generate\" } */\n+/* { dg-options \"-march=amdfam10 -O3 -fprofile-generate -Wno-return-type\" } */\n enum gimple_code {};\n struct A {\n   gimple_code code;"}, {"sha": "660e4aa2e35c6f03e748e67369cc3b01c2b7bbc7", "filename": "gcc/testsuite/g++.dg/pr59445.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr59445.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr59445.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr59445.C?ref=826eccc6fd8bebfafa3ac02d9755bb2e59f465b7", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2\" } */\n+/* { dg-options \"-O2 -Wno-return-type\" } */\n \n template <typename _Iterator> struct A;\n template <typename _Tp> struct A<_Tp *> {"}, {"sha": "9034336da305587f4a8b8d83a57de405ce0a87ca", "filename": "gcc/testsuite/g++.dg/tm/pr60004.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftm%2Fpr60004.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftm%2Fpr60004.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftm%2Fpr60004.C?ref=826eccc6fd8bebfafa3ac02d9755bb2e59f465b7", "patch": "@@ -7,4 +7,4 @@ int f() {\n         if (a == 5)\n             return 1;\n     }\n-}\n+}\t// { dg-warning \"control reaches end of non-void function\" }"}, {"sha": "c17453641d6baa45a391e6c2af0d0c46f0489866", "filename": "gcc/testsuite/g++.dg/torture/pr33627.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr33627.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr33627.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr33627.C?ref=826eccc6fd8bebfafa3ac02d9755bb2e59f465b7", "patch": "@@ -1,4 +1,5 @@\n /* { dg-do compile } */\n+/* { dg-additional-options \"-Wno-return-type\" } */\n \n typedef unsigned int UT_uint32;\n typedef UT_uint32 PT_DocPosition;"}, {"sha": "fab5f09c31a3bd194cc5cc25cbfb74a22b70be4d", "filename": "gcc/testsuite/g++.dg/torture/pr43257.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr43257.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr43257.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr43257.C?ref=826eccc6fd8bebfafa3ac02d9755bb2e59f465b7", "patch": "@@ -7,7 +7,7 @@ static void *func (int n)\n {\n   void *p;\n   if (p == 0) throw ::A ();\n-}\n+}\t// { dg-warning \"control reaches end of non-void function\" }\n \n static void *func (int n, B const &)\n {"}, {"sha": "bc5d3a1ddf503ba892ef994ff60b701c516b850a", "filename": "gcc/testsuite/g++.dg/torture/pr52772.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr52772.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr52772.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr52772.C?ref=826eccc6fd8bebfafa3ac02d9755bb2e59f465b7", "patch": "@@ -1,4 +1,5 @@\n // { dg-do compile }\n+// { dg-additional-options \"-Wno-return-type\" }\n \n typedef __SIZE_TYPE__ size_t;\n "}, {"sha": "d13dd8f6f7420361eb50c60149bc8c7b041aa5c3", "filename": "gcc/testsuite/g++.dg/torture/pr54684.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr54684.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr54684.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr54684.C?ref=826eccc6fd8bebfafa3ac02d9755bb2e59f465b7", "patch": "@@ -60,4 +60,4 @@ bool visit_ref_for_mod_analysis (gimple stmt __attribute__ ((__unused__)),\n       ((void)(__builtin_expect(!(index >= 0), 0) ? __builtin_unreachable(), 0 : 0));\n       ipa_set_param_used (info, index, true);\n     }\n-}\n+}\t// { dg-warning \"control reaches end of non-void function\" }"}, {"sha": "9597c28f965456ffa743814358fc742fadbb5aa9", "filename": "gcc/testsuite/g++.dg/torture/pr55740.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr55740.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr55740.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr55740.C?ref=826eccc6fd8bebfafa3ac02d9755bb2e59f465b7", "patch": "@@ -16,4 +16,4 @@ bool IsValidPath( char const * filename )\n       if ( *run ) \n \t++run;\n     }\n-}\n+}\t// { dg-warning \"control reaches end of non-void function\" }"}, {"sha": "774bac4c61547c9411d70ba1255d3cc41f191fc9", "filename": "gcc/testsuite/g++.dg/torture/pr56694.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr56694.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr56694.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr56694.C?ref=826eccc6fd8bebfafa3ac02d9755bb2e59f465b7", "patch": "@@ -20,7 +20,7 @@ inline GVector& GVector::operator+= (const GVector& v)\n   if (m_num != v.m_num)\n     throw GException::vector_mismatch(m_num, v.m_num);\n   for (int i = 0; i < m_num; ++i)  m_data[i] += v.m_data[i];\n-};\n+};\t// { dg-warning \"control reaches end of non-void function\" }\n void eval(GVector* m_gradient, GVector* vect_cpy_grad, int n)\n {\n #pragma omp sections"}, {"sha": "7ae06ad56fe34cfa6271c3919fdc581922e4da73", "filename": "gcc/testsuite/g++.dg/torture/pr58369.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr58369.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr58369.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr58369.C?ref=826eccc6fd8bebfafa3ac02d9755bb2e59f465b7", "patch": "@@ -1,4 +1,5 @@\n // { dg-do compile }\n+// { dg-additional-options \"-Wno-return-type\" }\n // Reduced from boost-1.54\n \n int pow(int, int);"}, {"sha": "d48efe59395ffcf5de5f5d4890f336fce2a59d58", "filename": "gcc/testsuite/g++.dg/torture/pr59265.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr59265.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr59265.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr59265.C?ref=826eccc6fd8bebfafa3ac02d9755bb2e59f465b7", "patch": "@@ -1,5 +1,5 @@\n // { dg-do compile }\n-// { dg-options \"-fprofile-use -std=gnu++11\" }\n+// { dg-options \"-fprofile-use -std=gnu++11 -Wno-return-type\" }\n \n class A {\n   int m_fn1() const;"}, {"sha": "5e391e72e353488d5b731eb9c10d5212d8bcd308", "filename": "gcc/testsuite/g++.dg/torture/pr60648.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr60648.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr60648.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr60648.C?ref=826eccc6fd8bebfafa3ac02d9755bb2e59f465b7", "patch": "@@ -51,7 +51,7 @@ inline component fn2 (direction p1)\n     case P:\n       return component (3);\n     }\n-}\n+}\t// { dg-warning \"control reaches end of non-void function\" }\n \n void fn3 ()\n {"}, {"sha": "5c569e864b4c70a311292e8d1ca146b3f2f08067", "filename": "gcc/testsuite/g++.dg/torture/pr64280.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr64280.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr64280.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr64280.C?ref=826eccc6fd8bebfafa3ac02d9755bb2e59f465b7", "patch": "@@ -39,4 +39,4 @@ F::m_fn2 ()\n     else\n       D ();\n   A b;\n-}\n+}\t// { dg-warning \"control reaches end of non-void function\" }"}, {"sha": "c43b3add18ee29c14eafa6e3e9de0a2cac7a76b0", "filename": "gcc/testsuite/g++.dg/torture/pr64669.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr64669.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr64669.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr64669.C?ref=826eccc6fd8bebfafa3ac02d9755bb2e59f465b7", "patch": "@@ -1,3 +1,5 @@\n+// { dg-additional-options \"-Wno-return-type\" }\n+\n typedef unsigned int source_location;\n typedef source_location location_t;\n extern void error_at (location_t, const char *, ...)"}, {"sha": "ea5701aa151d792595a17802b98c942d4bdd1d5c", "filename": "gcc/testsuite/g++.dg/torture/pr68470.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr68470.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr68470.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr68470.C?ref=826eccc6fd8bebfafa3ac02d9755bb2e59f465b7", "patch": "@@ -11,7 +11,7 @@ struct D {\n     C *m_fn2() {\n \tif (a)\n \t  __builtin_abort();\n-    }\n+    }\t// { dg-warning \"control reaches end of non-void function\" }\n };\n D getd();\n "}, {"sha": "7c68b56015adfc5018170bce813cf8245f549b8a", "filename": "gcc/testsuite/g++.dg/torture/pr71281.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr71281.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr71281.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr71281.C?ref=826eccc6fd8bebfafa3ac02d9755bb2e59f465b7", "patch": "@@ -47,7 +47,7 @@ public:\n     reference m_fn3(unsigned){\n \tif (m_fn2())\n \t  fn1();\n-    }\n+    }\t// { dg-warning \"control reaches end of non-void function\" }\n };\n \n H<H<H<unsigned>>> c;"}, {"sha": "ff68fd0e9aff5c7fa51f1ee075dc80046e266632", "filename": "gcc/testsuite/g++.dg/torture/predcom-1.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpredcom-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpredcom-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpredcom-1.C?ref=826eccc6fd8bebfafa3ac02d9755bb2e59f465b7", "patch": "@@ -1,6 +1,8 @@\n /* Test for ICE in predictive commoning with empty loop header block\n    on arm-none-linux-*.  */\n \n+#pragma GCC diagnostic ignored \"-Wreturn-type\"\n+\n struct Foo\n {\n   double *ptr;"}, {"sha": "ca7e18f66a9a93667b17397dd6dbbc50f4f19484", "filename": "gcc/testsuite/g++.dg/tree-ssa/ssa-dse-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fssa-dse-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fssa-dse-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fssa-dse-2.C?ref=826eccc6fd8bebfafa3ac02d9755bb2e59f465b7", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-dse2-details\" } */\n+/* { dg-options \"-O2 -fdump-tree-dse2-details -Wno-return-type\" } */\n \n typedef __SIZE_TYPE__ size_t;\n extern \"C\""}, {"sha": "ee90e59ab2b225741585049ce15fb9e82e0bb509", "filename": "gcc/testsuite/g++.dg/ubsan/return-3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Freturn-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Freturn-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Freturn-3.C?ref=826eccc6fd8bebfafa3ac02d9755bb2e59f465b7", "patch": "@@ -1,5 +1,5 @@\n // { dg-do compile }\n-// { dg-options \"-fsanitize=return\" }\n+// { dg-options \"-fsanitize=return -Wno-return-type\" }\n \n struct S { S (); ~S (); };\n "}, {"sha": "3709d363f1b9aec35ab866cce5eff8187b24cd9e", "filename": "gcc/testsuite/g++.dg/warn/pr83045.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr83045.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr83045.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr83045.C?ref=826eccc6fd8bebfafa3ac02d9755bb2e59f465b7", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/83045\n+// { dg-do compile }\n+// { dg-options \"-Wreturn-type -O2\" }\n+\n+void foo (void);\n+\n+int\n+bar (int a)\n+{\n+  if (a != 0)\n+    foo ();\n+}\t/* { dg-warning \"no return statement in function returning non-void\" } */\n+\n+int\n+baz (int a)\n+{\n+  if (a != 0)\n+    __builtin_abort ();\n+}\t/* { dg-warning \"control reaches end of non-void function\" } */"}, {"sha": "90c533e5e4acb778a55f881c76076dc48603c57f", "filename": "gcc/testsuite/g++.old-deja/g++.eh/catch13.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fcatch13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fcatch13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fcatch13.C?ref=826eccc6fd8bebfafa3ac02d9755bb2e59f465b7", "patch": "@@ -1,5 +1,5 @@\n // { dg-do assemble  }\n-// { dg-options \"-O2\" }\n+// { dg-options \"-O2 -Wno-return-type\" }\n // Copyright (C) 2001 Free Software Foundation, Inc.\n // Contributed by Jakub Jelinek 2 May 2001 <jakub@redhat.com>\n "}, {"sha": "e4c83700c989b4630ceca1709e92f2bf999c6e08", "filename": "gcc/testsuite/g++.old-deja/g++.eh/crash1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fcrash1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fcrash1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fcrash1.C?ref=826eccc6fd8bebfafa3ac02d9755bb2e59f465b7", "patch": "@@ -1,5 +1,5 @@\n // { dg-do assemble  }\n-// { dg-options \"-O1 -fno-inline-functions\" }\n+// { dg-options \"-O1 -fno-inline-functions -Wno-return-type\" }\n \n struct A\n {"}, {"sha": "bdcb04f8c4aaeec7ddb0730d788f7e982d1f4362", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 34, "deletions": 4, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826eccc6fd8bebfafa3ac02d9755bb2e59f465b7/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=826eccc6fd8bebfafa3ac02d9755bb2e59f465b7", "patch": "@@ -9049,7 +9049,8 @@ pass_warn_function_return::execute (function *fun)\n \t  if ((gimple_code (last) == GIMPLE_RETURN\n \t       || gimple_call_builtin_p (last, BUILT_IN_RETURN))\n \t      && location == UNKNOWN_LOCATION\n-\t      && (location = gimple_location (last)) != UNKNOWN_LOCATION\n+\t      && ((location = LOCATION_LOCUS (gimple_location (last)))\n+\t\t  != UNKNOWN_LOCATION)\n \t      && !optimize)\n \t    break;\n \t  /* When optimizing, replace return stmts in noreturn functions\n@@ -9075,7 +9076,6 @@ pass_warn_function_return::execute (function *fun)\n      without returning a value.  */\n   else if (warn_return_type > 0\n \t   && !TREE_NO_WARNING (fun->decl)\n-\t   && EDGE_COUNT (EXIT_BLOCK_PTR_FOR_FN (fun)->preds) > 0\n \t   && !VOID_TYPE_P (TREE_TYPE (TREE_TYPE (fun->decl))))\n     {\n       FOR_EACH_EDGE (e, ei, EXIT_BLOCK_PTR_FOR_FN (fun)->preds)\n@@ -9087,13 +9087,43 @@ pass_warn_function_return::execute (function *fun)\n \t      && !gimple_no_warning_p (last))\n \t    {\n \t      location = gimple_location (last);\n-\t      if (location == UNKNOWN_LOCATION)\n+\t      if (LOCATION_LOCUS (location) == UNKNOWN_LOCATION)\n \t\tlocation = fun->function_end_locus;\n-\t      warning_at (location, OPT_Wreturn_type, \"control reaches end of non-void function\");\n+\t      warning_at (location, OPT_Wreturn_type,\n+\t\t\t  \"control reaches end of non-void function\");\n \t      TREE_NO_WARNING (fun->decl) = 1;\n \t      break;\n \t    }\n \t}\n+      /* The C++ FE turns fallthrough from the end of non-void function\n+\t into __builtin_unreachable () call with BUILTINS_LOCATION.\n+\t Recognize those too.  */\n+      basic_block bb;\n+      if (!TREE_NO_WARNING (fun->decl))\n+\tFOR_EACH_BB_FN (bb, fun)\n+\t  if (EDGE_COUNT (bb->succs) == 0)\n+\t    {\n+\t      gimple *last = last_stmt (bb);\n+\t      if (last\n+\t\t  && (LOCATION_LOCUS (gimple_location (last))\n+\t\t      == BUILTINS_LOCATION)\n+\t\t  && gimple_call_builtin_p (last, BUILT_IN_UNREACHABLE))\n+\t\t{\n+\t\t  gimple_stmt_iterator gsi = gsi_for_stmt (last);\n+\t\t  gsi_prev_nondebug (&gsi);\n+\t\t  gimple *prev = gsi_stmt (gsi);\n+\t\t  if (prev == NULL)\n+\t\t    location = UNKNOWN_LOCATION;\n+\t\t  else\n+\t\t    location = gimple_location (prev);\n+\t\t  if (LOCATION_LOCUS (location) == UNKNOWN_LOCATION)\n+\t\t    location = fun->function_end_locus;\n+\t\t  warning_at (location, OPT_Wreturn_type,\n+\t\t\t      \"control reaches end of non-void function\");\n+\t\t  TREE_NO_WARNING (fun->decl) = 1;\n+\t\t  break;\n+\t\t}\n+\t    }\n     }\n   return 0;\n }"}]}