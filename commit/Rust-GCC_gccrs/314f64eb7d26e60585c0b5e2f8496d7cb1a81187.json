{"sha": "314f64eb7d26e60585c0b5e2f8496d7cb1a81187", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzE0ZjY0ZWI3ZDI2ZTYwNTg1YzBiNWUyZjg0OTZkN2NiMWE4MTE4Nw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-04-04T15:06:44Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-04-04T15:06:44Z"}, "message": "re PR tree-optimization/56826 (Run-fail after r197189.)\n\n2013-04-04  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/56826\n\t* tree-vect-slp.c (vect_build_slp_tree): Compute ncopies\n\tmore accurately.\n\n\t* gcc.dg/vect/pr56826.c: New testcase.\n\t* gcc.dg/vect/O3-pr36098.c: Adjust.\n\nFrom-SVN: r197486", "tree": {"sha": "0c901052e51eec2dc4b4dd82f3082695c9b8e2f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c901052e51eec2dc4b4dd82f3082695c9b8e2f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/314f64eb7d26e60585c0b5e2f8496d7cb1a81187", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/314f64eb7d26e60585c0b5e2f8496d7cb1a81187", "html_url": "https://github.com/Rust-GCC/gccrs/commit/314f64eb7d26e60585c0b5e2f8496d7cb1a81187", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/314f64eb7d26e60585c0b5e2f8496d7cb1a81187/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "48f3c26686c0d5361a477f4a10a0cf52743627f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48f3c26686c0d5361a477f4a10a0cf52743627f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48f3c26686c0d5361a477f4a10a0cf52743627f7"}], "stats": {"total": 65, "additions": 60, "deletions": 5}, "files": [{"sha": "970c0d97fd1c9c5e54327455402c20a40599f920", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314f64eb7d26e60585c0b5e2f8496d7cb1a81187/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314f64eb7d26e60585c0b5e2f8496d7cb1a81187/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=314f64eb7d26e60585c0b5e2f8496d7cb1a81187", "patch": "@@ -1,3 +1,9 @@\n+2013-04-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/56826\n+\t* tree-vect-slp.c (vect_build_slp_tree): Compute ncopies\n+\tmore accurately.\n+\n 2013-04-04  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/56213"}, {"sha": "a65b101de03be8310bf47e5ef023b51b60221d34", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314f64eb7d26e60585c0b5e2f8496d7cb1a81187/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314f64eb7d26e60585c0b5e2f8496d7cb1a81187/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=314f64eb7d26e60585c0b5e2f8496d7cb1a81187", "patch": "@@ -1,3 +1,9 @@\n+2013-04-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/56826\n+\t* gcc.dg/vect/pr56826.c: New testcase.\n+\t* gcc.dg/vect/O3-pr36098.c: Adjust.\n+\n 2013-04-04  Tejas Belagod  <tejas.belagod@arm.com>\n \n \t* gcc.target/aarch64/inc/asm-adder-clobber-lr.c: Remove duplication."}, {"sha": "b0b8e3c94665e1f20d4653beb6e7f7a30e313c12", "filename": "gcc/testsuite/gcc.dg/vect/O3-pr36098.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314f64eb7d26e60585c0b5e2f8496d7cb1a81187/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2FO3-pr36098.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314f64eb7d26e60585c0b5e2f8496d7cb1a81187/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2FO3-pr36098.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2FO3-pr36098.c?ref=314f64eb7d26e60585c0b5e2f8496d7cb1a81187", "patch": "@@ -17,5 +17,5 @@ void foo (int ncons, t_sortblock *sb, int *iatom)\n      iatom[m]=sb[i].iatom[m];\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 0 \"vect\" } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "7a5c5ff4008c625e51e9717a1e7d53be03b2954f", "filename": "gcc/testsuite/gcc.dg/vect/pr56826.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314f64eb7d26e60585c0b5e2f8496d7cb1a81187/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr56826.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314f64eb7d26e60585c0b5e2f8496d7cb1a81187/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr56826.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr56826.c?ref=314f64eb7d26e60585c0b5e2f8496d7cb1a81187", "patch": "@@ -0,0 +1,41 @@\n+extern void abort (void);\r\n+\r\n+typedef struct {\r\n+    int a[3];\r\n+    int num;\r\n+} t1;\r\n+t1 B[100];\r\n+int A[300];\r\n+\r\n+void __attribute__((noinline,noclone))\r\n+bar (int *A, t1 *B, int n)\r\n+{\r\n+  int i;\r\n+  int *a = A;\r\n+  for (i=0; i<n; i++, a+=3)\r\n+    {\r\n+      a[0] = B[i].a[0];\r\n+      a[1] = B[i].a[1];\r\n+      a[2] = B[i].a[2];\r\n+    }\r\n+}\r\n+\r\n+int main()\r\n+{\r\n+  int i;\r\n+  for (i=0; i<100; i++) \r\n+    {\r\n+      B[i].num = i;\r\n+      B[i].a[0] = i * 3;\r\n+      B[i].a[1] = i * 3 + 1;\r\n+      B[i].a[2] = i * 3 + 2;\r\n+      __asm__ volatile (\"\");\r\n+    }\r\n+  bar (&A[0], &B[0], 100);\r\n+  for (i=0; i<300; i++)\r\n+    if (A[i] != i)\r\n+      abort ();\r\n+  return 0;\r\n+} \r\n+\r\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */\r"}, {"sha": "4a5317dc3ce82340946344de8e34a38da9f20943", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314f64eb7d26e60585c0b5e2f8496d7cb1a81187/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314f64eb7d26e60585c0b5e2f8496d7cb1a81187/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=314f64eb7d26e60585c0b5e2f8496d7cb1a81187", "patch": "@@ -470,7 +470,6 @@ vect_build_slp_tree (loop_vec_info loop_vinfo, bb_vec_info bb_vinfo,\n   tree lhs;\n   bool stop_recursion = false, need_same_oprnds = false;\n   tree vectype, scalar_type, first_op1 = NULL_TREE;\n-  unsigned int ncopies;\n   optab optab;\n   int icode;\n   enum machine_mode optab_op2_mode;\n@@ -577,8 +576,6 @@ vect_build_slp_tree (loop_vec_info loop_vinfo, bb_vec_info bb_vinfo,\n             vectorization_factor = *max_nunits;\n         }\n \n-      ncopies = vectorization_factor / TYPE_VECTOR_SUBPARTS (vectype);\n-\n       if (is_gimple_call (stmt))\n \t{\n \t  rhs_code = CALL_EXPR;\n@@ -741,12 +738,15 @@ vect_build_slp_tree (loop_vec_info loop_vinfo, bb_vec_info bb_vinfo,\n \t  else\n \t    {\n \t      /* Load.  */\n+\t      unsigned unrolling_factor\n+\t\t= least_common_multiple\n+\t\t    (*max_nunits, group_size) / group_size;\n               /* FORNOW: Check that there is no gap between the loads\n \t\t and no gap between the groups when we need to load\n \t\t multiple groups at once.\n \t\t ???  We should enhance this to only disallow gaps\n \t\t inside vectors.  */\n-              if ((ncopies > 1\n+              if ((unrolling_factor > 1\n \t\t   && GROUP_FIRST_ELEMENT (vinfo_for_stmt (stmt)) == stmt\n \t\t   && GROUP_GAP (vinfo_for_stmt (stmt)) != 0)\n \t\t  || (GROUP_FIRST_ELEMENT (vinfo_for_stmt (stmt)) != stmt\n@@ -767,6 +767,8 @@ vect_build_slp_tree (loop_vec_info loop_vinfo, bb_vec_info bb_vinfo,\n \n               /* Check that the size of interleaved loads group is not\n                  greater than the SLP group size.  */\n+\t      unsigned ncopies\n+\t\t= vectorization_factor / TYPE_VECTOR_SUBPARTS (vectype);\n               if (loop_vinfo\n \t\t  && GROUP_FIRST_ELEMENT (vinfo_for_stmt (stmt)) == stmt\n                   && ((GROUP_SIZE (vinfo_for_stmt (stmt))"}]}