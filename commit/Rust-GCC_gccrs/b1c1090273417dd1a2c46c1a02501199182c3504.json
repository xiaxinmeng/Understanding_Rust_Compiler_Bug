{"sha": "b1c1090273417dd1a2c46c1a02501199182c3504", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjFjMTA5MDI3MzQxN2RkMWEyYzQ2YzFhMDI1MDExOTkxODJjMzUwNA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-12-09T19:03:24Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-12-09T19:03:24Z"}, "message": "Clean up copy-initialization in overloading code.\n\n        * call.c (build_user_type_conversion_1): Die if we are asked to\n        convert to the same or a base type.\n        (implicit_conversion): Avoid doing so.  Lose reference binding code.\n        (convert_like_real): Treat BASE_CONV and RVALUE_CONV as implicit\n        direct-initialization.  Also do direct-init part of copy-init.\n        (build_user_type_conversion): Don't provide context to convert_like.\n        * cvt.c (ocp_convert): build_user_type_conversion will now provide\n        the constructor call for copy-init.\n\nFrom-SVN: r38159", "tree": {"sha": "046c19372cdfa032da73f332f85817179dbd2067", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/046c19372cdfa032da73f332f85817179dbd2067"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1c1090273417dd1a2c46c1a02501199182c3504", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1c1090273417dd1a2c46c1a02501199182c3504", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1c1090273417dd1a2c46c1a02501199182c3504", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1c1090273417dd1a2c46c1a02501199182c3504/comments", "author": null, "committer": null, "parents": [{"sha": "5e818b935158ec6f4b03e583c7e9a3c2d986fd9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e818b935158ec6f4b03e583c7e9a3c2d986fd9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e818b935158ec6f4b03e583c7e9a3c2d986fd9e"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "c91d9c76f6f5b8085dcba7113579b3a7c477c8d6", "filename": "gcc/testsuite/g++.old-deja/g++.pt/auto_ptr.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1c1090273417dd1a2c46c1a02501199182c3504/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fauto_ptr.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1c1090273417dd1a2c46c1a02501199182c3504/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fauto_ptr.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fauto_ptr.C?ref=b1c1090273417dd1a2c46c1a02501199182c3504", "patch": "@@ -8,9 +8,9 @@ template<typename X> struct auto_ptr {\n    typedef X element_type;\n \n    explicit auto_ptr(X* p =0) throw() : px(p) {}\n-   auto_ptr(auto_ptr& r) throw() : px(r.release()) {}\n+   auto_ptr(auto_ptr& r) throw() : px(r.release()) {} // ERROR - candidate\n    template<typename Y>\n-      auto_ptr(auto_ptr<Y>& r) throw() : px(r.release()) {}\n+      auto_ptr(auto_ptr<Y>& r) throw() : px(r.release()) {}// ERROR - candidate\n \n    auto_ptr& operator=(auto_ptr& r) throw() { \n       reset(r.release()); \n@@ -29,7 +29,7 @@ template<typename X> struct auto_ptr {\n    X* release() throw() { X* p=px; px=0; return p; }\n    void reset(X* p=0) throw() { if (px != p) delete px, px = p; }\n \n-   auto_ptr(auto_ptr_ref<X> r) throw() : px(r.py) {}\n+   auto_ptr(auto_ptr_ref<X> r) throw() : px(r.py) {} // ERROR - candidate\n    template<typename Y> operator auto_ptr_ref<Y>() throw() {\n       return auto_ptr_ref<Y>(release()); \n    }\n@@ -50,5 +50,5 @@ int main() {\n     auto_ptr<Derived> y(f());\n     x = y;\n     g(f());\n-    h(f());\n+    h(f());\t\t\t// ERROR - no usable copy ctor\n }"}]}