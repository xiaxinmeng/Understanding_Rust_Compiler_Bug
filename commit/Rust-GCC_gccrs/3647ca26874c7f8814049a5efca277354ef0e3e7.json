{"sha": "3647ca26874c7f8814049a5efca277354ef0e3e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzY0N2NhMjY4NzRjN2Y4ODE0MDQ5YTVlZmNhMjc3MzU0ZWYwZTNlNw==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2011-08-30T13:28:16Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-30T13:28:16Z"}, "message": "exp_ch3.adb (Expand_Freeze_Array_Type): Correct the call to Build_Finalization_Master by supplying an insertion node...\n\n2011-08-30  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_ch3.adb (Expand_Freeze_Array_Type): Correct the call to\n\tBuild_Finalization_Master by supplying an insertion node and enclosing\n\tscope. In its old version, the call did not generate a finalization\n\tmaster.\n\t(Expand_Freeze_Record_Type): Add local variable Has_AACC. Add code to\n\trecognize anonymous access-to-controlled components. Rewrite the\n\tmachinery which creates finalization masters to service anonymous\n\taccess-to-controlled components of a record type. In its current state,\n\tonly one heterogeneous master is necessary to handle multiple anonymous\n\tcomponents.\n\t(Freeze_Type): Comment reformatting.\n\t* rtsfind.ads: Add RE_Set_Is_Heterogeneous to tables RE_Id and\n\tRE_Unit_Table.\n\t* s-stposu.adb (Allocate_Any_Controlled): Rewrite the machinery which\n\tassociates TSS primitive Finalize_Address with either the master itself\n\tor with the internal hash table depending on the mode of operation of\n\tthe master.\n\nFrom-SVN: r178301", "tree": {"sha": "485a52093002a07b2af758d81496537165510170", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/485a52093002a07b2af758d81496537165510170"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3647ca26874c7f8814049a5efca277354ef0e3e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3647ca26874c7f8814049a5efca277354ef0e3e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3647ca26874c7f8814049a5efca277354ef0e3e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3647ca26874c7f8814049a5efca277354ef0e3e7/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6d4e4fbcd2f5c5a73d263c4f45b0438d7dec9492", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d4e4fbcd2f5c5a73d263c4f45b0438d7dec9492", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d4e4fbcd2f5c5a73d263c4f45b0438d7dec9492"}], "stats": {"total": 191, "additions": 151, "deletions": 40}, "files": [{"sha": "901c4eec92391f404ce9556e123f6a586e3556de", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3647ca26874c7f8814049a5efca277354ef0e3e7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3647ca26874c7f8814049a5efca277354ef0e3e7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3647ca26874c7f8814049a5efca277354ef0e3e7", "patch": "@@ -1,3 +1,23 @@\n+2011-08-30  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch3.adb (Expand_Freeze_Array_Type): Correct the call to\n+\tBuild_Finalization_Master by supplying an insertion node and enclosing\n+\tscope. In its old version, the call did not generate a finalization\n+\tmaster.\n+\t(Expand_Freeze_Record_Type): Add local variable Has_AACC. Add code to\n+\trecognize anonymous access-to-controlled components. Rewrite the\n+\tmachinery which creates finalization masters to service anonymous\n+\taccess-to-controlled components of a record type. In its current state,\n+\tonly one heterogeneous master is necessary to handle multiple anonymous\n+\tcomponents.\n+\t(Freeze_Type): Comment reformatting.\n+\t* rtsfind.ads: Add RE_Set_Is_Heterogeneous to tables RE_Id and\n+\tRE_Unit_Table.\n+\t* s-stposu.adb (Allocate_Any_Controlled): Rewrite the machinery which\n+\tassociates TSS primitive Finalize_Address with either the master itself\n+\tor with the internal hash table depending on the mode of operation of\n+\tthe master.\n+\n 2011-08-30  Javier Miranda  <miranda@adacore.com>\n \n \t* exp_ch3.adb (Make_Eq_If): If the etype of the _parent component is an"}, {"sha": "4af2ab6a074ab23561b16133a6669b8e9d0810f5", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 114, "deletions": 25, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3647ca26874c7f8814049a5efca277354ef0e3e7/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3647ca26874c7f8814049a5efca277354ef0e3e7/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=3647ca26874c7f8814049a5efca277354ef0e3e7", "patch": "@@ -5522,14 +5522,18 @@ package body Exp_Ch3 is\n                then\n                   Build_Slice_Assignment (Typ);\n                end if;\n+            end if;\n \n-            --  ??? Now that masters acts as heterogeneous lists, it might be\n-            --  worthwhile to revisit the global master approach.\n+            --  Create a finalization master to service the anonymous access\n+            --  components of the array.\n \n-            elsif Ekind (Comp_Typ) = E_Anonymous_Access_Type\n-              and then Needs_Finalization (Directly_Designated_Type (Comp_Typ))\n+            if Ekind (Comp_Typ) = E_Anonymous_Access_Type\n+              and then Needs_Finalization (Designated_Type (Comp_Typ))\n             then\n-               Build_Finalization_Master (Comp_Typ);\n+               Build_Finalization_Master\n+                 (Typ        => Comp_Typ,\n+                  Ins_Node   => Parent (Typ),\n+                  Encl_Scope => Scope (Typ));\n             end if;\n          end if;\n \n@@ -5943,6 +5947,7 @@ package body Exp_Ch3 is\n       Type_Decl   : constant Node_Id := Parent (Def_Id);\n       Comp        : Entity_Id;\n       Comp_Typ    : Entity_Id;\n+      Has_AACC    : Boolean;\n       Predef_List : List_Id;\n \n       Renamed_Eq : Node_Id := Empty;\n@@ -6011,8 +6016,9 @@ package body Exp_Ch3 is\n \n       --  Update task and controlled component flags, because some of the\n       --  component types may have been private at the point of the record\n-      --  declaration.\n+      --  declaration. Detect anonymous access-to-controlled components.\n \n+      Has_AACC := False;\n       Comp := First_Component (Def_Id);\n       while Present (Comp) loop\n          Comp_Typ := Etype (Comp);\n@@ -6029,6 +6035,14 @@ package body Exp_Ch3 is\n                                 and then Is_Controlled (Comp_Typ)))\n          then\n             Set_Has_Controlled_Component (Def_Id);\n+\n+         --  Non self-referential anonymous access-to-controlled component\n+\n+         elsif Ekind (Comp_Typ) = E_Anonymous_Access_Type\n+           and then Needs_Finalization (Designated_Type (Comp_Typ))\n+           and then Designated_Type (Comp_Typ) /= Def_Id\n+         then\n+            Has_AACC := True;\n          end if;\n \n          Next_Component (Comp);\n@@ -6396,28 +6410,103 @@ package body Exp_Ch3 is\n          end;\n       end if;\n \n-      --  Processing for components of anonymous access type that designate\n-      --  a controlled type.\n+      --  Create a heterogeneous finalization master to service the anonymous\n+      --  access-to-controlled components of the record type.\n \n-      Comp := First_Component (Def_Id);\n-      while Present (Comp) loop\n-         Comp_Typ := Etype (Comp);\n+      if Has_AACC then\n+         declare\n+            Encl_Scope : constant Entity_Id  := Scope (Def_Id);\n+            Ins_Node   : constant Node_Id    := Parent (Def_Id);\n+            Loc        : constant Source_Ptr := Sloc (Def_Id);\n+            Fin_Mas_Id : Entity_Id;\n+\n+            Attributes_Set : Boolean := False;\n+            Master_Built   : Boolean := False;\n+            --  Two flags which control the creation and initialization of a\n+            --  common heterogeneous master.\n+\n+         begin\n+            Comp := First_Component (Def_Id);\n+            while Present (Comp) loop\n+               Comp_Typ := Etype (Comp);\n \n-         if Ekind (Comp_Typ) = E_Anonymous_Access_Type\n-           and then Needs_Finalization (Directly_Designated_Type (Comp_Typ))\n+               --  A non self-referential anonymous access-to-controlled\n+               --  component.\n \n-            --  Avoid self-references\n+               if Ekind (Comp_Typ) = E_Anonymous_Access_Type\n+                 and then Needs_Finalization (Designated_Type (Comp_Typ))\n+                 and then Designated_Type (Comp_Typ) /= Def_Id\n+               then\n+                  if VM_Target = No_VM then\n \n-           and then Directly_Designated_Type (Comp_Typ) /= Def_Id\n-         then\n-            Build_Finalization_Master\n-             (Typ        => Comp_Typ,\n-              Ins_Node   => Parent (Def_Id),\n-              Encl_Scope => Scope (Def_Id));\n-         end if;\n+                     --  Build a homogeneous master for the first anonymous\n+                     --  access-to-controlled component. This master may be\n+                     --  converted into a heterogeneous collection if more\n+                     --  components are to follow.\n \n-         Next_Component (Comp);\n-      end loop;\n+                     if not Master_Built then\n+                        Master_Built := True;\n+\n+                        --  All anonymous access-to-controlled types allocate\n+                        --  on the global pool.\n+\n+                        Set_Associated_Storage_Pool (Comp_Typ,\n+                          Get_Global_Pool_For_Access_Type (Comp_Typ));\n+\n+                        Build_Finalization_Master\n+                          (Typ        => Comp_Typ,\n+                           Ins_Node   => Ins_Node,\n+                           Encl_Scope => Encl_Scope);\n+\n+                        Fin_Mas_Id := Finalization_Master (Comp_Typ);\n+\n+                     --  Subsequent anonymous access-to-controlled components\n+                     --  reuse the already available master.\n+\n+                     else\n+                        --  All anonymous access-to-controlled types allocate\n+                        --  on the global pool.\n+\n+                        Set_Associated_Storage_Pool (Comp_Typ,\n+                          Get_Global_Pool_For_Access_Type (Comp_Typ));\n+\n+                        --  Shared the master among multiple components\n+\n+                        Set_Finalization_Master (Comp_Typ, Fin_Mas_Id);\n+\n+                        --  Convert the master into a heterogeneous collection.\n+                        --  Generate:\n+                        --\n+                        --    Set_Is_Heterogeneous (<Fin_Mas_Id>);\n+\n+                        if not Attributes_Set then\n+                           Attributes_Set := True;\n+\n+                           Insert_Action (Ins_Node,\n+                             Make_Procedure_Call_Statement (Loc,\n+                               Name =>\n+                                 New_Reference_To\n+                                   (RTE (RE_Set_Is_Heterogeneous), Loc),\n+                               Parameter_Associations => New_List (\n+                                 New_Reference_To (Fin_Mas_Id, Loc))));\n+                        end if;\n+                     end if;\n+\n+                  --  Since .NET/JVM targets do not support heterogeneous\n+                  --  masters, each component must have its own master.\n+\n+                  else\n+                     Build_Finalization_Master\n+                       (Typ        => Comp_Typ,\n+                        Ins_Node   => Ins_Node,\n+                        Encl_Scope => Encl_Scope);\n+                  end if;\n+               end if;\n+\n+               Next_Component (Comp);\n+            end loop;\n+         end;\n+      end if;\n    end Expand_Freeze_Record_Type;\n \n    ------------------------------\n@@ -6738,8 +6827,8 @@ package body Exp_Ch3 is\n             then\n                null;\n \n-            --  The machinery assumes that incomplete or private types are\n-            --  always completed by a controlled full vies.\n+            --  Assume that incomplete and private types are always completed\n+            --  by a controlled full view.\n \n             elsif Needs_Finalization (Desig_Type)\n               or else"}, {"sha": "be2bda7e774e1cb2d5309c829d038633dff18754", "filename": "gcc/ada/rtsfind.ads", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3647ca26874c7f8814049a5efca277354ef0e3e7/gcc%2Fada%2Frtsfind.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3647ca26874c7f8814049a5efca277354ef0e3e7/gcc%2Fada%2Frtsfind.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.ads?ref=3647ca26874c7f8814049a5efca277354ef0e3e7", "patch": "@@ -803,6 +803,7 @@ package Rtsfind is\n      RE_Finalization_Master_Ptr,         -- System.Finalization_Masters\n      RE_Set_Base_Pool,                   -- System.Finalization_Masters\n      RE_Set_Finalize_Address,            -- System.Finalization_Masters\n+     RE_Set_Is_Heterogeneous,            -- System.Finalization_Masters\n \n      RE_Root_Controlled,                 -- System.Finalization_Root\n      RE_Root_Controlled_Ptr,             -- System.Finalization_Root\n@@ -1991,6 +1992,7 @@ package Rtsfind is\n      RE_Finalization_Master_Ptr          => System_Finalization_Masters,\n      RE_Set_Base_Pool                    => System_Finalization_Masters,\n      RE_Set_Finalize_Address             => System_Finalization_Masters,\n+     RE_Set_Is_Heterogeneous             => System_Finalization_Masters,\n \n      RE_Root_Controlled                  => System_Finalization_Root,\n      RE_Root_Controlled_Ptr              => System_Finalization_Root,"}, {"sha": "2bbc9ef6c2c1b72fafd4623e9fbf1d3d4d2f7e7b", "filename": "gcc/ada/s-stposu.adb", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3647ca26874c7f8814049a5efca277354ef0e3e7/gcc%2Fada%2Fs-stposu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3647ca26874c7f8814049a5efca277354ef0e3e7/gcc%2Fada%2Fs-stposu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-stposu.adb?ref=3647ca26874c7f8814049a5efca277354ef0e3e7", "patch": "@@ -269,25 +269,25 @@ package body System.Storage_Pools.Subpools is\n \n          Addr := N_Addr + Header_And_Padding;\n \n-         --  Subpool allocations use heterogeneous masters to manage various\n-         --  controlled objects. Associate a Finalize_Address with the object.\n-         --  This relation pair is deleted when the object is deallocated or\n-         --  when the associated master is finalized.\n-\n-         if Is_Subpool_Allocation then\n-            pragma Assert (not Master.Is_Homogeneous);\n-\n-            Set_Finalize_Address (Addr, Fin_Address);\n-            Finalize_Address_Table_In_Use := True;\n-\n-         --  Normal allocations chain objects on homogeneous collections\n-\n-         else\n-            pragma Assert (Master.Is_Homogeneous);\n+         --  Homogeneous masters service the following:\n+         --\n+         --    1) Allocations on / Deallocations from regular pools\n+         --    2) Named access types\n+         --    3) Most cases of anonymous access types usage\n \n+         if Master.Is_Homogeneous then\n             if Finalize_Address (Master.all) = null then\n                Set_Finalize_Address (Master.all, Fin_Address);\n             end if;\n+\n+         --  Heterogeneous masters service the following:\n+         --\n+         --    1) Allocations on / Deallocations from subpools\n+         --    2) Certain cases of anonymous access types usage\n+\n+         else\n+            Set_Finalize_Address (Addr, Fin_Address);\n+            Finalize_Address_Table_In_Use := True;\n          end if;\n \n       --  Non-controlled allocation"}]}