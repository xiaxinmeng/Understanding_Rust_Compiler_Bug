{"sha": "b5d32c25372d1e0604bbd8471d735e46215dbe03", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjVkMzJjMjUzNzJkMWUwNjA0YmJkODQ3MWQ3MzVlNDYyMTVkYmUwMw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2007-07-18T16:13:09Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2007-07-18T16:13:09Z"}, "message": "re PR middle-end/32668 (The type-generic builtins apply default promotions)\n\n\tPR middle-end/32668\n\n\t* builtin-attrs.def (ATTR_TYPEGENERIC,\n\tATTR_CONST_NOTHROW_TYPEGENERIC): New.\n\n\t* builtins.def (BUILT_IN_ISINF, BUILT_IN_ISNAN,\n\tBUILT_IN_ISGREATER, BUILT_IN_ISGREATEREQUAL, BUILT_IN_ISLESS,\n\tBUILT_IN_ISLESSEQUAL, BUILT_IN_ISLESSGREATER,\n\tBUILT_IN_ISUNORDERED): Use ATTR_CONST_NOTHROW_TYPEGENERIC.\n\n\t* c-common.c (handle_type_generic_attribute): New.\n\t(c_common_attribute_table): Add \"type generic\".\n\n\t* c-typeck.c (convert_arguments): Handle \"type generic\" functions.\n\nFrom-SVN: r126723", "tree": {"sha": "2df881b0bf06cd1bc8e30b69d2a519b82a1442ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2df881b0bf06cd1bc8e30b69d2a519b82a1442ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5d32c25372d1e0604bbd8471d735e46215dbe03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5d32c25372d1e0604bbd8471d735e46215dbe03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5d32c25372d1e0604bbd8471d735e46215dbe03", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5d32c25372d1e0604bbd8471d735e46215dbe03/comments", "author": null, "committer": null, "parents": [{"sha": "c3e4e34df939059960b03bf4a4dc0dcaf548e31b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3e4e34df939059960b03bf4a4dc0dcaf548e31b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3e4e34df939059960b03bf4a4dc0dcaf548e31b"}], "stats": {"total": 66, "additions": 56, "deletions": 10}, "files": [{"sha": "94074ff9a720fcd6968d30392659275d1cbf87b1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5d32c25372d1e0604bbd8471d735e46215dbe03/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5d32c25372d1e0604bbd8471d735e46215dbe03/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b5d32c25372d1e0604bbd8471d735e46215dbe03", "patch": "@@ -1,3 +1,20 @@\n+2007-07-18  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\tPR middle-end/32668\n+\n+\t* builtin-attrs.def (ATTR_TYPEGENERIC,\n+\tATTR_CONST_NOTHROW_TYPEGENERIC): New.\n+\n+\t* builtins.def (BUILT_IN_ISINF, BUILT_IN_ISNAN,\n+\tBUILT_IN_ISGREATER, BUILT_IN_ISGREATEREQUAL, BUILT_IN_ISLESS,\n+\tBUILT_IN_ISLESSEQUAL, BUILT_IN_ISLESSGREATER,\n+\tBUILT_IN_ISUNORDERED): Use ATTR_CONST_NOTHROW_TYPEGENERIC.\n+\n+\t* c-common.c (handle_type_generic_attribute): New.\n+\t(c_common_attribute_table): Add \"type generic\".\n+\n+\t* c-typeck.c (convert_arguments): Handle \"type generic\" functions.\n+\n 2007-07-18  Daniel Berlin  <dberlin@dberlin.org>\n \n \t* tree-ssa-sccvn.c (try_to_simplify): Use valid_gimple_expression"}, {"sha": "40008de2de187809bc176c6f562a7a2cecdc4973", "filename": "gcc/builtin-attrs.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5d32c25372d1e0604bbd8471d735e46215dbe03/gcc%2Fbuiltin-attrs.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5d32c25372d1e0604bbd8471d735e46215dbe03/gcc%2Fbuiltin-attrs.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltin-attrs.def?ref=b5d32c25372d1e0604bbd8471d735e46215dbe03", "patch": "@@ -94,6 +94,7 @@ DEF_ATTR_IDENT (ATTR_SCANF, \"scanf\")\n DEF_ATTR_IDENT (ATTR_SENTINEL, \"sentinel\")\n DEF_ATTR_IDENT (ATTR_STRFMON, \"strfmon\")\n DEF_ATTR_IDENT (ATTR_STRFTIME, \"strftime\")\n+DEF_ATTR_IDENT (ATTR_TYPEGENERIC, \"type generic\")\n \n DEF_ATTR_TREE_LIST (ATTR_NOVOPS_LIST, ATTR_NOVOPS, ATTR_NULL, ATTR_NULL)\n \n@@ -142,6 +143,9 @@ DEF_ATTR_TREE_LIST (ATTR_NOTHROW_NONNULL_5, ATTR_NONNULL, ATTR_LIST_5, \\\n /* Nothrow const functions whose pointer parameter(s) are all nonnull.  */\n DEF_ATTR_TREE_LIST (ATTR_CONST_NOTHROW_NONNULL, ATTR_CONST, ATTR_NULL, \\\n \t\t\tATTR_NOTHROW_NONNULL)\n+/* Nothrow const functions which are type-generic.  */\n+DEF_ATTR_TREE_LIST (ATTR_CONST_NOTHROW_TYPEGENERIC, ATTR_TYPEGENERIC, ATTR_NULL, \\\n+\t\t\tATTR_CONST_NOTHROW_LIST)\n /* Nothrow pure functions whose pointer parameter(s) are all nonnull.  */\n DEF_ATTR_TREE_LIST (ATTR_PURE_NOTHROW_NONNULL, ATTR_PURE, ATTR_NULL, \\\n \t\t\tATTR_NOTHROW_NONNULL)"}, {"sha": "28556179597180c131fbf0d1ae4bc6a941639bfe", "filename": "gcc/builtins.def", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5d32c25372d1e0604bbd8471d735e46215dbe03/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5d32c25372d1e0604bbd8471d735e46215dbe03/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=b5d32c25372d1e0604bbd8471d735e46215dbe03", "patch": "@@ -654,24 +654,24 @@ DEF_EXT_LIB_BUILTIN    (BUILT_IN_FINITEL, \"finitel\", BT_FN_INT_LONGDOUBLE, ATTR_\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_FINITED32, \"finited32\", BT_FN_INT_DFLOAT32, ATTR_CONST_NOTHROW_LIST)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_FINITED64, \"finited64\", BT_FN_INT_DFLOAT64, ATTR_CONST_NOTHROW_LIST)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_FINITED128, \"finited128\", BT_FN_INT_DFLOAT128, ATTR_CONST_NOTHROW_LIST)\n-DEF_C99_C90RES_BUILTIN (BUILT_IN_ISINF, \"isinf\", BT_FN_INT_VAR, ATTR_CONST_NOTHROW_LIST)\n+DEF_C99_C90RES_BUILTIN (BUILT_IN_ISINF, \"isinf\", BT_FN_INT_VAR, ATTR_CONST_NOTHROW_TYPEGENERIC)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_ISINFF, \"isinff\", BT_FN_INT_FLOAT, ATTR_CONST_NOTHROW_LIST)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_ISINFL, \"isinfl\", BT_FN_INT_LONGDOUBLE, ATTR_CONST_NOTHROW_LIST)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_ISINFD32, \"isinfd32\", BT_FN_INT_DFLOAT32, ATTR_CONST_NOTHROW_LIST)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_ISINFD64, \"isinfd64\", BT_FN_INT_DFLOAT64, ATTR_CONST_NOTHROW_LIST)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_ISINFD128, \"isinfd128\", BT_FN_INT_DFLOAT128, ATTR_CONST_NOTHROW_LIST)\n-DEF_C99_C90RES_BUILTIN (BUILT_IN_ISNAN, \"isnan\", BT_FN_INT_VAR, ATTR_CONST_NOTHROW_LIST)\n+DEF_C99_C90RES_BUILTIN (BUILT_IN_ISNAN, \"isnan\", BT_FN_INT_VAR, ATTR_CONST_NOTHROW_TYPEGENERIC)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_ISNANF, \"isnanf\", BT_FN_INT_FLOAT, ATTR_CONST_NOTHROW_LIST)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_ISNANL, \"isnanl\", BT_FN_INT_LONGDOUBLE, ATTR_CONST_NOTHROW_LIST)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_ISNAND32, \"isnand32\", BT_FN_INT_DFLOAT32, ATTR_CONST_NOTHROW_LIST)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_ISNAND64, \"isnand64\", BT_FN_INT_DFLOAT64, ATTR_CONST_NOTHROW_LIST)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_ISNAND128, \"isnand128\", BT_FN_INT_DFLOAT128, ATTR_CONST_NOTHROW_LIST)\n-DEF_GCC_BUILTIN        (BUILT_IN_ISGREATER, \"isgreater\", BT_FN_INT_VAR, ATTR_CONST_NOTHROW_LIST)\n-DEF_GCC_BUILTIN        (BUILT_IN_ISGREATEREQUAL, \"isgreaterequal\", BT_FN_INT_VAR, ATTR_CONST_NOTHROW_LIST)\n-DEF_GCC_BUILTIN        (BUILT_IN_ISLESS, \"isless\", BT_FN_INT_VAR, ATTR_CONST_NOTHROW_LIST)\n-DEF_GCC_BUILTIN        (BUILT_IN_ISLESSEQUAL, \"islessequal\", BT_FN_INT_VAR, ATTR_CONST_NOTHROW_LIST)\n-DEF_GCC_BUILTIN        (BUILT_IN_ISLESSGREATER, \"islessgreater\", BT_FN_INT_VAR, ATTR_CONST_NOTHROW_LIST)\n-DEF_GCC_BUILTIN        (BUILT_IN_ISUNORDERED, \"isunordered\", BT_FN_INT_VAR, ATTR_CONST_NOTHROW_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_ISGREATER, \"isgreater\", BT_FN_INT_VAR, ATTR_CONST_NOTHROW_TYPEGENERIC)\n+DEF_GCC_BUILTIN        (BUILT_IN_ISGREATEREQUAL, \"isgreaterequal\", BT_FN_INT_VAR, ATTR_CONST_NOTHROW_TYPEGENERIC)\n+DEF_GCC_BUILTIN        (BUILT_IN_ISLESS, \"isless\", BT_FN_INT_VAR, ATTR_CONST_NOTHROW_TYPEGENERIC)\n+DEF_GCC_BUILTIN        (BUILT_IN_ISLESSEQUAL, \"islessequal\", BT_FN_INT_VAR, ATTR_CONST_NOTHROW_TYPEGENERIC)\n+DEF_GCC_BUILTIN        (BUILT_IN_ISLESSGREATER, \"islessgreater\", BT_FN_INT_VAR, ATTR_CONST_NOTHROW_TYPEGENERIC)\n+DEF_GCC_BUILTIN        (BUILT_IN_ISUNORDERED, \"isunordered\", BT_FN_INT_VAR, ATTR_CONST_NOTHROW_TYPEGENERIC)\n DEF_LIB_BUILTIN        (BUILT_IN_LABS, \"labs\", BT_FN_LONG_LONG, ATTR_CONST_NOTHROW_LIST)\n DEF_C99_BUILTIN        (BUILT_IN_LLABS, \"llabs\", BT_FN_LONGLONG_LONGLONG, ATTR_CONST_NOTHROW_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_LONGJMP, \"longjmp\", BT_FN_VOID_PTR_INT, ATTR_NORETURN_NOTHROW_LIST)"}, {"sha": "c9874d23ccd9747366462380f720b6e3e36579ec", "filename": "gcc/c-common.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5d32c25372d1e0604bbd8471d735e46215dbe03/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5d32c25372d1e0604bbd8471d735e46215dbe03/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=b5d32c25372d1e0604bbd8471d735e46215dbe03", "patch": "@@ -555,6 +555,7 @@ static tree handle_cleanup_attribute (tree *, tree, tree, int, bool *);\n static tree handle_warn_unused_result_attribute (tree *, tree, tree, int,\n \t\t\t\t\t\t bool *);\n static tree handle_sentinel_attribute (tree *, tree, tree, int, bool *);\n+static tree handle_type_generic_attribute (tree *, tree, tree, int, bool *);\n static tree handle_alloc_size_attribute (tree *, tree, tree, int, bool *);\n \n static void check_function_nonnull (tree, int, tree *);\n@@ -650,6 +651,10 @@ const struct attribute_spec c_common_attribute_table[] =\n \t\t\t      handle_warn_unused_result_attribute },\n   { \"sentinel\",               0, 1, false, true, true,\n \t\t\t      handle_sentinel_attribute },\n+  /* For internal use (marking of builtins) only.  The name contains space\n+     to prevent its usage in source code.  */\n+  { \"type generic\",           0, 0, false, true, true,\n+\t\t\t      handle_type_generic_attribute },\n   { \"alloc_size\",\t      1, 2, false, true, true,\n \t\t\t      handle_alloc_size_attribute },\n   { \"cold\",                   0, 0, true,  false, false,\n@@ -6166,6 +6171,19 @@ handle_sentinel_attribute (tree *node, tree name, tree args,\n \n   return NULL_TREE;\n }\n+\n+/* Handle a \"type_generic\" attribute.  */\n+\n+static tree\n+handle_type_generic_attribute (tree *node, tree ARG_UNUSED (name),\n+\t\t\t       tree ARG_UNUSED (args), int ARG_UNUSED (flags),\n+\t\t\t       bool * ARG_UNUSED (no_add_attrs))\n+{\n+  /* Ensure we have a function type, with no arguments.  */\n+  gcc_assert (TREE_CODE (*node) == FUNCTION_TYPE && ! TYPE_ARG_TYPES (*node));\n+\n+  return NULL_TREE;\n+}\n \f\n /* Check for valid arguments being passed to a function.\n    ATTRS is a list of attributes.  There are NARGS arguments in the array"}, {"sha": "2151f970afcc50997fa9b4608c18b77f742205b0", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5d32c25372d1e0604bbd8471d735e46215dbe03/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5d32c25372d1e0604bbd8471d735e46215dbe03/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=b5d32c25372d1e0604bbd8471d735e46215dbe03", "patch": "@@ -2394,6 +2394,8 @@ convert_arguments (int nargs, tree *argarray,\n {\n   tree typetail, valtail;\n   int parmnum;\n+  const bool type_generic = fundecl\n+    && lookup_attribute (\"type generic\", TYPE_ATTRIBUTES(TREE_TYPE (fundecl)));\n   tree selector;\n \n   /* Change pointer to function to the function itself for\n@@ -2585,8 +2587,13 @@ convert_arguments (int nargs, tree *argarray,\n \t       && (TYPE_PRECISION (TREE_TYPE (val))\n \t\t   < TYPE_PRECISION (double_type_node))\n \t       && !DECIMAL_FLOAT_MODE_P (TYPE_MODE (TREE_TYPE (val))))\n-\t/* Convert `float' to `double'.  */\n-\targarray[parmnum] = convert (double_type_node, val);\n+        {\n+\t  if (type_generic)\n+\t    argarray[parmnum] = val;\n+\t  else\n+\t    /* Convert `float' to `double'.  */\n+\t    argarray[parmnum] = convert (double_type_node, val);\n+\t}\n       else if ((invalid_func_diag =\n \t\ttargetm.calls.invalid_arg_for_unprototyped_fn (typelist, fundecl, val)))\n \t{"}]}