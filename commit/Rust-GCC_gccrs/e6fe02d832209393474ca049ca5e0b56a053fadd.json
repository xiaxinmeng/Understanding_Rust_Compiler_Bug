{"sha": "e6fe02d832209393474ca049ca5e0b56a053fadd", "node_id": "C_kwDOANBUbNoAKGU2ZmUwMmQ4MzIyMDkzOTM0NzRjYTA0OWNhNWUwYjU2YTA1M2ZhZGQ", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-10-05T00:19:06Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-10-05T00:19:06Z"}, "message": "analyzer: widening_svalues take a function_point rather than a program_point\n\nEnabling work towrads better call summarization.\n\ngcc/analyzer/ChangeLog:\n\t* region-model-manager.cc\n\t(region_model_manager::get_or_create_widening_svalue): Use a\n\tfunction_point rather than a program_point.\n\t* region-model.cc (selftest::test_widening_constraints): Likewise.\n\t* region-model.h\n\t(region_model_manager::get_or_create_widening_svalue): Likewise.\n\t(model_merger::get_function_point): New.\n\t* svalue.cc (svalue::can_merge_p): Use a function_point rather\n\tthan a program_point.\n\t(svalue::can_merge_p): Likewise.\n\t* svalue.h (widening_svalue::key_t): Likewise.\n\t(widening_svalue::widening_svalue): Likewise.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "bb5789ea042a47e604fb9a6a720319321d6af9d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb5789ea042a47e604fb9a6a720319321d6af9d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6fe02d832209393474ca049ca5e0b56a053fadd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6fe02d832209393474ca049ca5e0b56a053fadd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6fe02d832209393474ca049ca5e0b56a053fadd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6fe02d832209393474ca049ca5e0b56a053fadd/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85872a69ee1b123557c7c352d45ef608e70b20fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85872a69ee1b123557c7c352d45ef608e70b20fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85872a69ee1b123557c7c352d45ef608e70b20fb"}], "stats": {"total": 29, "additions": 17, "deletions": 12}, "files": [{"sha": "ed5b9c759101a91aa83e1bd74fce4cb33e292f5c", "filename": "gcc/analyzer/region-model-manager.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6fe02d832209393474ca049ca5e0b56a053fadd/gcc%2Fanalyzer%2Fregion-model-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6fe02d832209393474ca049ca5e0b56a053fadd/gcc%2Fanalyzer%2Fregion-model-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model-manager.cc?ref=e6fe02d832209393474ca049ca5e0b56a053fadd", "patch": "@@ -1143,10 +1143,11 @@ region_model_manager::get_or_create_unmergeable (const svalue *arg)\n    and ITER_SVAL at POINT, creating it if necessary.  */\n \n const svalue *\n-region_model_manager::get_or_create_widening_svalue (tree type,\n-\t\t\t\t\t\t     const program_point &point,\n-\t\t\t\t\t\t     const svalue *base_sval,\n-\t\t\t\t\t\t     const svalue *iter_sval)\n+region_model_manager::\n+get_or_create_widening_svalue (tree type,\n+\t\t\t       const function_point &point,\n+\t\t\t       const svalue *base_sval,\n+\t\t\t       const svalue *iter_sval)\n {\n   gcc_assert (base_sval->get_kind () != SK_WIDENING);\n   gcc_assert (iter_sval->get_kind () != SK_WIDENING);"}, {"sha": "e92bba2b438bdac387c217cb746e6ecc542a51be", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6fe02d832209393474ca049ca5e0b56a053fadd/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6fe02d832209393474ca049ca5e0b56a053fadd/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=e6fe02d832209393474ca049ca5e0b56a053fadd", "patch": "@@ -7956,7 +7956,7 @@ static void\n test_widening_constraints ()\n {\n   region_model_manager mgr;\n-  program_point point (program_point::origin (mgr));\n+  function_point point (program_point::origin (mgr).get_function_point ());\n   tree int_0 = build_int_cst (integer_type_node, 0);\n   tree int_m1 = build_int_cst (integer_type_node, -1);\n   tree int_1 = build_int_cst (integer_type_node, 1);"}, {"sha": "baac7ba4a12385b6a283fa86c9fb500b6d94c2cf", "filename": "gcc/analyzer/region-model.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6fe02d832209393474ca049ca5e0b56a053fadd/gcc%2Fanalyzer%2Fregion-model.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6fe02d832209393474ca049ca5e0b56a053fadd/gcc%2Fanalyzer%2Fregion-model.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.h?ref=e6fe02d832209393474ca049ca5e0b56a053fadd", "patch": "@@ -278,7 +278,7 @@ class region_model_manager\n \t\t\t\t\t   const svalue *inner_svalue);\n   const svalue *get_or_create_unmergeable (const svalue *arg);\n   const svalue *get_or_create_widening_svalue (tree type,\n-\t\t\t\t\t       const program_point &point,\n+\t\t\t\t\t       const function_point &point,\n \t\t\t\t\t       const svalue *base_svalue,\n \t\t\t\t\t       const svalue *iter_svalue);\n   const svalue *get_or_create_compound_svalue (tree type,\n@@ -1282,6 +1282,10 @@ struct model_merger\n   }\n \n   bool mergeable_svalue_p (const svalue *) const;\n+  const function_point &get_function_point () const\n+  {\n+    return m_point.get_function_point ();\n+  }\n \n   const region_model *m_model_a;\n   const region_model *m_model_b;"}, {"sha": "a37c152bb044668893d0867ed6b84f189a7a8809", "filename": "gcc/analyzer/svalue.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6fe02d832209393474ca049ca5e0b56a053fadd/gcc%2Fanalyzer%2Fsvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6fe02d832209393474ca049ca5e0b56a053fadd/gcc%2Fanalyzer%2Fsvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsvalue.cc?ref=e6fe02d832209393474ca049ca5e0b56a053fadd", "patch": "@@ -207,7 +207,7 @@ svalue::can_merge_p (const svalue *other,\n   if (maybe_get_constant () && other->maybe_get_constant ())\n     {\n       return mgr->get_or_create_widening_svalue (other->get_type (),\n-\t\t\t\t\t\t merger->m_point,\n+\t\t\t\t\t\t merger->get_function_point (),\n \t\t\t\t\t\t other, this);\n     }\n \n@@ -220,7 +220,7 @@ svalue::can_merge_p (const svalue *other,\n \t&& binop_sval->get_arg1 ()->get_kind () == SK_CONSTANT\n \t&& other->get_kind () != SK_WIDENING)\n       return mgr->get_or_create_widening_svalue (other->get_type (),\n-\t\t\t\t\t\t merger->m_point,\n+\t\t\t\t\t\t merger->get_function_point (),\n \t\t\t\t\t\t other, this);\n \n   /* Merge: (Widen(existing_val, V), existing_val) -> Widen (existing_val, V)"}, {"sha": "9393d6ec213ee0b546400de11b714fe2ce7ea823", "filename": "gcc/analyzer/svalue.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6fe02d832209393474ca049ca5e0b56a053fadd/gcc%2Fanalyzer%2Fsvalue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6fe02d832209393474ca049ca5e0b56a053fadd/gcc%2Fanalyzer%2Fsvalue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsvalue.h?ref=e6fe02d832209393474ca049ca5e0b56a053fadd", "patch": "@@ -1113,9 +1113,9 @@ class widening_svalue : public svalue\n   /* A support class for uniquifying instances of widening_svalue.  */\n   struct key_t\n   {\n-    key_t (tree type, const program_point &point,\n+    key_t (tree type, const function_point &point,\n \t   const svalue *base_sval, const svalue *iter_sval)\n-    : m_type (type), m_point (point.get_function_point ()),\n+    : m_type (type), m_point (point),\n       m_base_sval (base_sval), m_iter_sval (iter_sval)\n     {}\n \n@@ -1153,12 +1153,12 @@ class widening_svalue : public svalue\n      DIR_UNKNOWN\n     };\n \n-  widening_svalue (tree type, const program_point &point,\n+  widening_svalue (tree type, const function_point &point,\n \t\t   const svalue *base_sval, const svalue *iter_sval)\n   : svalue (complexity::from_pair (base_sval->get_complexity (),\n \t\t\t\t   iter_sval->get_complexity ()),\n \t    type),\n-    m_point (point.get_function_point ()),\n+    m_point (point),\n     m_base_sval (base_sval), m_iter_sval (iter_sval)\n   {\n     gcc_assert (base_sval->can_have_associated_state_p ());"}]}