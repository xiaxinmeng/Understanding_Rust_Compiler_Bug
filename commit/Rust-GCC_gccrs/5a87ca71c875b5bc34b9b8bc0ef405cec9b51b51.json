{"sha": "5a87ca71c875b5bc34b9b8bc0ef405cec9b51b51", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWE4N2NhNzFjODc1YjViYzM0YjliOGJjMGVmNDA1Y2VjOWI1MWI1MQ==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2011-04-26T18:39:55Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2011-04-26T18:39:55Z"}, "message": "frontend-passes.c (inserted_block): New variable.\n\n2011-04-26  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\t* frontend-passes.c (inserted_block):  New variable.\n\t(changed_statement):  Likewise.\n\t(create_var):  Encase statement to be operated on in a BLOCK.\n\tAdjust code insertion for BLOCK.\n\t(cfe_code):  Set inserted_block and changed_statement to NULL.\n\nFrom-SVN: r172983", "tree": {"sha": "7735356f62f3cd1621a936bc0deec5e47d8f610b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7735356f62f3cd1621a936bc0deec5e47d8f610b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a87ca71c875b5bc34b9b8bc0ef405cec9b51b51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a87ca71c875b5bc34b9b8bc0ef405cec9b51b51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a87ca71c875b5bc34b9b8bc0ef405cec9b51b51", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a87ca71c875b5bc34b9b8bc0ef405cec9b51b51/comments", "author": null, "committer": null, "parents": [{"sha": "6d7b45ad646c08497f8103a55087edf102c835ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d7b45ad646c08497f8103a55087edf102c835ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d7b45ad646c08497f8103a55087edf102c835ad"}], "stats": {"total": 48, "additions": 43, "deletions": 5}, "files": [{"sha": "f9425a9e16a6c3760acb25a57fe8421227487c6d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a87ca71c875b5bc34b9b8bc0ef405cec9b51b51/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a87ca71c875b5bc34b9b8bc0ef405cec9b51b51/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=5a87ca71c875b5bc34b9b8bc0ef405cec9b51b51", "patch": "@@ -1,3 +1,11 @@\n+2011-04-26  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\t* frontend-passes.c (inserted_block):  New variable.\n+\t(changed_statement):  Likewise.\n+\t(create_var):  Encase statement to be operated on in a BLOCK.\n+\tAdjust code insertion for BLOCK.\n+\t(cfe_code):  Set inserted_block and changed_statement to NULL.\n+\n 2011-04-23  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/18918"}, {"sha": "85af45eec6f6ea2c6be2f8b84412e27535a2c48a", "filename": "gcc/fortran/frontend-passes.c", "status": "modified", "additions": 35, "deletions": 5, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a87ca71c875b5bc34b9b8bc0ef405cec9b51b51/gcc%2Ffortran%2Ffrontend-passes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a87ca71c875b5bc34b9b8bc0ef405cec9b51b51/gcc%2Ffortran%2Ffrontend-passes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ffrontend-passes.c?ref=5a87ca71c875b5bc34b9b8bc0ef405cec9b51b51", "patch": "@@ -48,10 +48,15 @@ static gfc_expr ***expr_array;\n static int expr_size, expr_count;\n \n /* Pointer to the gfc_code we currently work on - to be able to insert\n-   a statement before.  */\n+   a block before the statement.  */\n \n static gfc_code **current_code;\n \n+/* Pointer to the block to be inserted, and the statement we are\n+   changing within the block.  */\n+\n+static gfc_code *inserted_block, **changed_statement;\n+\n /* The namespace we are currently dealing with.  */\n \n gfc_namespace *current_ns;\n@@ -203,7 +208,9 @@ cfe_register_funcs (gfc_expr **e, int *walk_subtrees ATTRIBUTE_UNUSED,\n \n /* Returns a new expression (a variable) to be used in place of the old one,\n    with an an assignment statement before the current statement to set\n-   the value of the variable.  */\n+   the value of the variable. Creates a new BLOCK for the statement if\n+   that hasn't already been done and puts the statement, plus the\n+   newly created variables, in that block.  */\n \n static gfc_expr*\n create_var (gfc_expr * e)\n@@ -214,10 +221,31 @@ create_var (gfc_expr * e)\n   gfc_symbol *symbol;\n   gfc_expr *result;\n   gfc_code *n;\n+  gfc_namespace *ns;\n   int i;\n \n+  /* If the block hasn't already been created, do so.  */\n+  if (inserted_block == NULL)\n+    {\n+      inserted_block = XCNEW (gfc_code);\n+      inserted_block->op = EXEC_BLOCK;\n+      inserted_block->loc = (*current_code)->loc;\n+      ns = gfc_build_block_ns (current_ns);\n+      inserted_block->ext.block.ns = ns;\n+      inserted_block->ext.block.assoc = NULL;\n+\n+      ns->code = *current_code;\n+      inserted_block->next = (*current_code)->next;\n+      changed_statement = &(inserted_block->ext.block.ns->code);\n+      (*current_code)->next = NULL;\n+      /* Insert the BLOCK at the right position.  */\n+      *current_code = inserted_block;\n+    }\n+  else\n+    ns = inserted_block->ext.block.ns;\n+\n   sprintf(name, \"__var_%d\",num++);\n-  if (gfc_get_sym_tree (name, current_ns, &symtree, false) != 0)\n+  if (gfc_get_sym_tree (name, ns, &symtree, false) != 0)\n     gcc_unreachable ();\n \n   symbol = symtree->n.sym;\n@@ -267,10 +295,10 @@ create_var (gfc_expr * e)\n   n = XCNEW (gfc_code);\n   n->op = EXEC_ASSIGN;\n   n->loc = (*current_code)->loc;\n-  n->next = *current_code;\n+  n->next = *changed_statement;\n   n->expr1 = gfc_copy_expr (result);\n   n->expr2 = e;\n-  *current_code = n;\n+  *changed_statement = n;\n \n   return result;\n }\n@@ -347,6 +375,8 @@ cfe_code (gfc_code **c, int *walk_subtrees ATTRIBUTE_UNUSED,\n \t  void *data ATTRIBUTE_UNUSED)\n {\n   current_code = c;\n+  inserted_block = NULL;\n+  changed_statement = NULL;\n   return 0;\n }\n "}]}