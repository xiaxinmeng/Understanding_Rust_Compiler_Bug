{"sha": "963aeaad25122bc507f9c72b9af6fc13cbeccde4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTYzYWVhYWQyNTEyMmJjNTA3ZjljNzJiOWFmNmZjMTNjYmVjY2RlNA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-08-16T07:51:13Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-08-16T07:51:13Z"}, "message": "PR81815: Invalid conditional reduction\n\nWe weren't checking whether the phi in a conditional reduction was\nused by the condition itself (which isn't a case we handle).\n\n2017-08-11  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\tPR tree-optimization/81835\n\t* tree-vect-loop.c (vect_is_simple_reduction): Simply checks for\n\tthe phi SSA_NAME.  Check that the condition in a COND_EXPR does\n\tnot depend on the phi.\n\ngcc/testsuite/\n\tPR tree-optimization/81835\n\t* gcc.dg/vect/pr81815.c: New test.\n\nFrom-SVN: r251117", "tree": {"sha": "9c24e2074a1675f8b8a339be48ef9450a724feaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c24e2074a1675f8b8a339be48ef9450a724feaf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/963aeaad25122bc507f9c72b9af6fc13cbeccde4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/963aeaad25122bc507f9c72b9af6fc13cbeccde4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/963aeaad25122bc507f9c72b9af6fc13cbeccde4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/963aeaad25122bc507f9c72b9af6fc13cbeccde4/comments", "author": null, "committer": null, "parents": [{"sha": "60e095de004cd024b67875f3c1d2a382feba7cce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60e095de004cd024b67875f3c1d2a382feba7cce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60e095de004cd024b67875f3c1d2a382feba7cce"}], "stats": {"total": 57, "additions": 50, "deletions": 7}, "files": [{"sha": "d86b59f36716ece915a23d2f0fb2e635d8dc4514", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/963aeaad25122bc507f9c72b9af6fc13cbeccde4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/963aeaad25122bc507f9c72b9af6fc13cbeccde4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=963aeaad25122bc507f9c72b9af6fc13cbeccde4", "patch": "@@ -1,3 +1,10 @@\n+2017-08-16  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\tPR tree-optimization/81835\n+\t* tree-vect-loop.c (vect_is_simple_reduction): Simply checks for\n+\tthe phi SSA_NAME.  Check that the condition in a COND_EXPR does\n+\tnot depend on the phi.\n+\n 2017-08-16  Alan Modra  <amodra@gmail.com>\n \n \t* config/rs6000/rs6000.c (rs6000_init_hard_regno_mode_ok): Delete"}, {"sha": "fe2ea0221f8502afb55f3a2bacbea84b5bfbc91c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/963aeaad25122bc507f9c72b9af6fc13cbeccde4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/963aeaad25122bc507f9c72b9af6fc13cbeccde4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=963aeaad25122bc507f9c72b9af6fc13cbeccde4", "patch": "@@ -1,3 +1,8 @@\n+2017-08-16  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\tPR tree-optimization/81835\n+\t* gcc.dg/vect/pr81815.c: New test.\n+\n 2017-08-15  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR target/78460"}, {"sha": "1eb7c59b70e1a13cf217899d04c55fd60949872f", "filename": "gcc/testsuite/gcc.dg/vect/pr81815.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/963aeaad25122bc507f9c72b9af6fc13cbeccde4/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr81815.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/963aeaad25122bc507f9c72b9af6fc13cbeccde4/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr81815.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr81815.c?ref=963aeaad25122bc507f9c72b9af6fc13cbeccde4", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run } */\n+\n+int __attribute__ ((noinline, noclone))\n+f (int *x, int n)\n+{\n+  int b = 13;\n+  for (int i = 0; i < n; ++i)\n+    {\n+      int next = x[i];\n+      b = b < 100 ? next : 200;\n+    }\n+  return b;\n+}\n+\n+static int res[32];\n+\n+int\n+main (void)\n+{\n+  for (int i = 0; i < 32; ++i)\n+    res[i] = i;\n+  res[15] = 100;\n+  if (f (res, 32) != 200)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "906323b4d765421279b480551669c90422aa0dd4", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/963aeaad25122bc507f9c72b9af6fc13cbeccde4/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/963aeaad25122bc507f9c72b9af6fc13cbeccde4/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=963aeaad25122bc507f9c72b9af6fc13cbeccde4", "patch": "@@ -2690,15 +2690,15 @@ vect_is_simple_reduction (loop_vec_info loop_info, gimple *phi,\n   *double_reduc = false;\n   *v_reduc_type = TREE_CODE_REDUCTION;\n \n-  name = PHI_RESULT (phi);\n+  tree phi_name = PHI_RESULT (phi);\n   /* ???  If there are no uses of the PHI result the inner loop reduction\n      won't be detected as possibly double-reduction by vectorizable_reduction\n      because that tries to walk the PHI arg from the preheader edge which\n      can be constant.  See PR60382.  */\n-  if (has_zero_uses (name))\n+  if (has_zero_uses (phi_name))\n     return NULL;\n   nloop_uses = 0;\n-  FOR_EACH_IMM_USE_FAST (use_p, imm_iter, name)\n+  FOR_EACH_IMM_USE_FAST (use_p, imm_iter, phi_name)\n     {\n       gimple *use_stmt = USE_STMT (use_p);\n       if (is_gimple_debug (use_stmt))\n@@ -2847,10 +2847,7 @@ vect_is_simple_reduction (loop_vec_info loop_info, gimple *phi,\n      simply rewriting this into \"res += -x[i]\".  Avoid changing\n      gimple instruction for the first simple tests and only do this\n      if we're allowed to change code at all.  */\n-  if (code == MINUS_EXPR\n-      && ! ((op1 = gimple_assign_rhs2 (def_stmt))\n-\t    && TREE_CODE (op1) == SSA_NAME\n-\t    && SSA_NAME_DEF_STMT (op1) == phi))\n+  if (code == MINUS_EXPR && gimple_assign_rhs2 (def_stmt) != phi_name)\n     code = PLUS_EXPR;\n \n   if (code == COND_EXPR)\n@@ -2864,6 +2861,14 @@ vect_is_simple_reduction (loop_vec_info loop_info, gimple *phi,\n           op4 = TREE_OPERAND (op3, 1);\n           op3 = TREE_OPERAND (op3, 0);\n         }\n+      if (op3 == phi_name || op4 == phi_name)\n+\t{\n+\t  if (dump_enabled_p ())\n+\t    report_vect_op (MSG_MISSED_OPTIMIZATION, def_stmt,\n+\t\t\t    \"reduction: condition depends on previous\"\n+\t\t\t    \" iteration: \");\n+\t  return NULL;\n+\t}\n \n       op1 = gimple_assign_rhs2 (def_stmt);\n       op2 = gimple_assign_rhs3 (def_stmt);"}]}