{"sha": "0c64497d6eae75b9f87aef777f9beb5184ecaa64", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGM2NDQ5N2Q2ZWFlNzViOWY4N2FlZjc3N2Y5YmViNTE4NGVjYWE2NA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2018-02-01T11:04:58Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-02-01T11:04:58Z"}, "message": "[AArch64] Fix SVE testsuite failures for ILP32 (PR 83846)\n\nThe SVE tests are split into code-quality compile tests and runtime\ntests.  A lot of the former are geared towards LP64.  It would be\npossible (but tedious!) to mark up every line that is expected to work\nonly for LP64, but I think it would be a constant source of problems.\n\nSince the code has not been tuned for ILP32 yet, I think the best\nthing is to select only the runtime tests for that combination.\nThey all pass on aarch64-elf and aarch64_be-elf except vec-cond-[34].c,\nwhich are unsupported due to the lack of fenv support.\n\nThe patch also replaces uses of built-in types with stdint.h types\nwhere possible.  (This excludes tests that change the endianness,\nsince we can't assume that system header files work in that case.)\n\n2018-02-01  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/testsuite/\n\tPR testsuite/83846\n\t* gcc.target/aarch64/sve/aarch64-sve.exp: Only do *_run tests\n\tfor ILP32.\n\t* gcc.target/aarch64/sve/clastb_2_run.c (main): Use TYPE instead\n\tof hard-coding the choice.\n\t* gcc.target/aarch64/sve/clastb_4_run.c (main): Likewise.\n\t* gcc.target/aarch64/sve/clastb_5_run.c (main): Likewise.\n\t* gcc.target/aarch64/sve/clastb_3_run.c (main): Likewise.  Generalize\n\tmemset call.\n\t* gcc.target/aarch64/sve/const_pred_1.C: Include stdint.h and use\n\tstdint.h types.\n\t* gcc.target/aarch64/sve/const_pred_2.C: Likewise.\n\t* gcc.target/aarch64/sve/const_pred_3.C: Likewise.\n\t* gcc.target/aarch64/sve/const_pred_4.C: Likewise.\n\t* gcc.target/aarch64/sve/load_const_offset_2.c: Likewise.\n\t* gcc.target/aarch64/sve/logical_1.c: Likewise.\n\t* gcc.target/aarch64/sve/mask_struct_load_1.c: Likewise.\n\t* gcc.target/aarch64/sve/mask_struct_load_2.c: Likewise.\n\t* gcc.target/aarch64/sve/mask_struct_load_3.c: Likewise.\n\t* gcc.target/aarch64/sve/mask_struct_load_4.c: Likewise.\n\t* gcc.target/aarch64/sve/mask_struct_load_5.c: Likewise.\n\t* gcc.target/aarch64/sve/mask_struct_load_6.c: Likewise.\n\t* gcc.target/aarch64/sve/mask_struct_load_7.c: Likewise.\n\t* gcc.target/aarch64/sve/mask_struct_load_8.c: Likewise.\n\t* gcc.target/aarch64/sve/mask_struct_store_1.c: Likewise.\n\t* gcc.target/aarch64/sve/mask_struct_store_2.c: Likewise.\n\t* gcc.target/aarch64/sve/mask_struct_store_3.c: Likewise.\n\t* gcc.target/aarch64/sve/mask_struct_store_4.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_1.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_2.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_2_run.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_3.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_3_run.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_4.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_4_run.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_7.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_8.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_8_run.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_9.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_9_run.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_10.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_10_run.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_11.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_11_run.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_12.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_12_run.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_13.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_13_run.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_14.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_18.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_19.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_20.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_21.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_22.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_23.c: Likewise.\n\t* gcc.target/aarch64/sve/popcount_1.c (popcount_64): Use\n\t__builtin_popcountll rather than __builtin_popcountl.\n\nReviewed-by: James Greenhalgh <james.greenhalgh@arm.com>\n\nFrom-SVN: r257290", "tree": {"sha": "a8a51730f29186c0ba73725362bf62ec2f16b6ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8a51730f29186c0ba73725362bf62ec2f16b6ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c64497d6eae75b9f87aef777f9beb5184ecaa64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c64497d6eae75b9f87aef777f9beb5184ecaa64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c64497d6eae75b9f87aef777f9beb5184ecaa64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c64497d6eae75b9f87aef777f9beb5184ecaa64/comments", "author": null, "committer": null, "parents": [{"sha": "002092be4027b1fd667178e9bbe99fa6ecee2e10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/002092be4027b1fd667178e9bbe99fa6ecee2e10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/002092be4027b1fd667178e9bbe99fa6ecee2e10"}], "stats": {"total": 504, "additions": 312, "deletions": 192}, "files": [{"sha": "bd118a9391c29ade5f11b319903252f037b756d6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0c64497d6eae75b9f87aef777f9beb5184ecaa64", "patch": "@@ -1,3 +1,63 @@\n+2018-02-01  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\tPR testsuite/83846\n+\t* gcc.target/aarch64/sve/aarch64-sve.exp: Only do *_run tests\n+\tfor ILP32.\n+\t* gcc.target/aarch64/sve/clastb_2_run.c (main): Use TYPE instead\n+\tof hard-coding the choice.\n+\t* gcc.target/aarch64/sve/clastb_4_run.c (main): Likewise.\n+\t* gcc.target/aarch64/sve/clastb_5_run.c (main): Likewise.\n+\t* gcc.target/aarch64/sve/clastb_3_run.c (main): Likewise.  Generalize\n+\tmemset call.\n+\t* gcc.target/aarch64/sve/const_pred_1.C: Include stdint.h and use\n+\tstdint.h types.\n+\t* gcc.target/aarch64/sve/const_pred_2.C: Likewise.\n+\t* gcc.target/aarch64/sve/const_pred_3.C: Likewise.\n+\t* gcc.target/aarch64/sve/const_pred_4.C: Likewise.\n+\t* gcc.target/aarch64/sve/load_const_offset_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/logical_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/mask_struct_load_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/mask_struct_load_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/mask_struct_load_3.c: Likewise.\n+\t* gcc.target/aarch64/sve/mask_struct_load_4.c: Likewise.\n+\t* gcc.target/aarch64/sve/mask_struct_load_5.c: Likewise.\n+\t* gcc.target/aarch64/sve/mask_struct_load_6.c: Likewise.\n+\t* gcc.target/aarch64/sve/mask_struct_load_7.c: Likewise.\n+\t* gcc.target/aarch64/sve/mask_struct_load_8.c: Likewise.\n+\t* gcc.target/aarch64/sve/mask_struct_store_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/mask_struct_store_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/mask_struct_store_3.c: Likewise.\n+\t* gcc.target/aarch64/sve/mask_struct_store_4.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_2_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_3.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_3_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_4.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_4_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_7.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_8.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_8_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_9.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_9_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_10.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_10_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_11.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_11_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_12.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_12_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_13.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_13_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_14.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_18.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_19.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_20.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_21.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_22.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_23.c: Likewise.\n+\t* gcc.target/aarch64/sve/popcount_1.c (popcount_64): Use\n+\t__builtin_popcountll rather than __builtin_popcountl.\n+\n 2018-02-01  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* gcc.target/aarch64/sve/slp_2.c: Expect LD1RQ to be used instead"}, {"sha": "e2d92d4153330988815783a617ecba0baa19a3b5", "filename": "gcc/testsuite/gcc.target/aarch64/sve/aarch64-sve.exp", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Faarch64-sve.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Faarch64-sve.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Faarch64-sve.exp?ref=0c64497d6eae75b9f87aef777f9beb5184ecaa64", "patch": "@@ -44,8 +44,16 @@ if { [check_effective_target_aarch64_sve] } {\n     set sve_flags \"-march=armv8.2-a+sve\"\n }\n \n+# Most of the code-quality tests are written for LP64.  Just do the\n+# correctness tests for ILP32.\n+if { [check_effective_target_ilp32] } {\n+    set pattern \"*_run\"\n+} else {\n+    set pattern \"*\"\n+}\n+\n # Main loop.\n-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[cCS\\]]] \\\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/$pattern.\\[cCS\\]]] \\\n     $sve_flags $DEFAULT_CFLAGS\n \n # All done."}, {"sha": "e23314df07ca62411786d8cb1f18e8a3ee3fcbc8", "filename": "gcc/testsuite/gcc.target/aarch64/sve/clastb_2_run.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclastb_2_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclastb_2_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclastb_2_run.c?ref=0c64497d6eae75b9f87aef777f9beb5184ecaa64", "patch": "@@ -6,15 +6,15 @@\n int __attribute__ ((optimize (1)))\n main (void)\n {\n-  unsigned int a[N] = {\n+  TYPE a[N] = {\n     11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n     1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\n     21, 22, 23, 24, 25, 26, 27, 28, 29, 30,\n     31, 32\n   };\n-  __builtin_memset (a + 32, 43, (N - 32) * sizeof (int));\n+  __builtin_memset (a + 32, 43, (N - 32) * sizeof (TYPE));\n \n-  unsigned int ret = condition_reduction (a, 16);\n+  TYPE ret = condition_reduction (a, 16);\n \n   if (ret != 10)\n     __builtin_abort ();"}, {"sha": "5b0eef6ffe22ce43a441094ca1cb899018ec8054", "filename": "gcc/testsuite/gcc.target/aarch64/sve/clastb_3_run.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclastb_3_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclastb_3_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclastb_3_run.c?ref=0c64497d6eae75b9f87aef777f9beb5184ecaa64", "patch": "@@ -6,15 +6,15 @@\n int __attribute__ ((optimize (1)))\n main (void)\n {\n-  unsigned char a[N] = {\n+  TYPE a[N] = {\n     11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n     1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\n     21, 22, 23, 24, 25, 26, 27, 28, 29, 30,\n     31, 32\n   };\n-  __builtin_memset (a + 32, 43, N - 32);\n+  __builtin_memset (a + 32, 43, (N - 32) * sizeof (TYPE));\n \n-  unsigned char ret = condition_reduction (a, 16);\n+  TYPE ret = condition_reduction (a, 16);\n \n   if (ret != 10)\n     __builtin_abort ();"}, {"sha": "7aa3603b4c2541cb9e5fbb93c2d97aaec03cc716", "filename": "gcc/testsuite/gcc.target/aarch64/sve/clastb_4_run.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclastb_4_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclastb_4_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclastb_4_run.c?ref=0c64497d6eae75b9f87aef777f9beb5184ecaa64", "patch": "@@ -8,15 +8,15 @@ extern void abort (void) __attribute__ ((noreturn));\n int __attribute__ ((optimize (1)))\n main (void)\n {\n-  short a[N] = {\n+  TYPE a[N] = {\n   11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n   1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\n   21, 22, 23, 24, 25, 26, 27, 28, 29, 30,\n   31, 32\n   };\n-  __builtin_memset (a+32, 43, (N-32)*sizeof (short));\n+  __builtin_memset (a+32, 43, (N-32)*sizeof (TYPE));\n \n-  short ret = condition_reduction (a, 16);\n+  TYPE ret = condition_reduction (a, 16);\n \n   if (ret != 10)\n     abort ();"}, {"sha": "134a2df3ae487c17caa9e429003c08dca4666878", "filename": "gcc/testsuite/gcc.target/aarch64/sve/clastb_5_run.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclastb_5_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclastb_5_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclastb_5_run.c?ref=0c64497d6eae75b9f87aef777f9beb5184ecaa64", "patch": "@@ -6,15 +6,15 @@\n int __attribute__ ((optimize (1)))\n main (void)\n {\n-  long a[N] = {\n+  TYPE a[N] = {\n     11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n     1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\n     21, 22, 23, 24, 25, 26, 27, 28, 29, 30,\n     31, 32\n   };\n-  __builtin_memset (a + 32, 43, (N - 32) * sizeof (long));\n+  __builtin_memset (a + 32, 43, (N - 32) * sizeof (TYPE));\n \n-  long ret = condition_reduction (a, 16);\n+  TYPE ret = condition_reduction (a, 16);\n \n   if (ret != 10)\n     __builtin_abort ();"}, {"sha": "25b7663273fef57f2c6bec58d534d3a1873f3100", "filename": "gcc/testsuite/gcc.target/aarch64/sve/const_pred_1.C", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fconst_pred_1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fconst_pred_1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fconst_pred_1.C?ref=0c64497d6eae75b9f87aef777f9beb5184ecaa64", "patch": "@@ -1,7 +1,9 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -msve-vector-bits=256\" } */\n \n-typedef signed char vnx16qi __attribute__((vector_size(32)));\n+#include <stdint.h>\n+\n+typedef int8_t vnx16qi __attribute__((vector_size(32)));\n \n vnx16qi\n foo (vnx16qi x, vnx16qi y)"}, {"sha": "4c781ca560c4788fa754c87d1e111d70a2ed91ab", "filename": "gcc/testsuite/gcc.target/aarch64/sve/const_pred_2.C", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fconst_pred_2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fconst_pred_2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fconst_pred_2.C?ref=0c64497d6eae75b9f87aef777f9beb5184ecaa64", "patch": "@@ -1,7 +1,9 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -msve-vector-bits=256\" } */\n \n-typedef short vnx8hi __attribute__((vector_size(32)));\n+#include <stdint.h>\n+\n+typedef int16_t vnx8hi __attribute__((vector_size(32)));\n \n vnx8hi\n foo (vnx8hi x, vnx8hi y)"}, {"sha": "6196ee05be7b14ed59bec8327278a596b6e1df37", "filename": "gcc/testsuite/gcc.target/aarch64/sve/const_pred_3.C", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fconst_pred_3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fconst_pred_3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fconst_pred_3.C?ref=0c64497d6eae75b9f87aef777f9beb5184ecaa64", "patch": "@@ -1,7 +1,9 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -msve-vector-bits=256\" } */\n \n-typedef int vnx4si __attribute__((vector_size(32)));\n+#include <stdint.h>\n+\n+typedef int32_t vnx4si __attribute__((vector_size(32)));\n \n vnx4si\n foo (vnx4si x, vnx4si y)"}, {"sha": "2bdf67fd03861b26c83371a77ddc10992ffa09b5", "filename": "gcc/testsuite/gcc.target/aarch64/sve/const_pred_4.C", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fconst_pred_4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fconst_pred_4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fconst_pred_4.C?ref=0c64497d6eae75b9f87aef777f9beb5184ecaa64", "patch": "@@ -1,7 +1,9 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -msve-vector-bits=256\" } */\n \n-typedef long long vnx2di __attribute__((vector_size(32)));\n+#include <stdint.h>\n+\n+typedef int64_t vnx2di __attribute__((vector_size(32)));\n \n vnx2di\n foo (vnx2di x, vnx2di y)"}, {"sha": "e02a6b5abee117b2d0a5432032aef99a97403fa3", "filename": "gcc/testsuite/gcc.target/aarch64/sve/load_const_offset_2.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fload_const_offset_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fload_const_offset_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fload_const_offset_2.c?ref=0c64497d6eae75b9f87aef777f9beb5184ecaa64", "patch": "@@ -1,14 +1,16 @@\n /* { dg-do assemble { target aarch64_asm_sve_ok } } */\n /* { dg-options \"-O2 -ftree-vectorize -save-temps\" } */\n \n+#include <stdint.h>\n+\n void\n-f (unsigned int *restrict a, signed char *restrict b, signed char mask, int n)\n+f (uint32_t *restrict a, int8_t *restrict b, int8_t mask, int n)\n {\n   for (int i = 0; i < n; ++i)\n-    a[i] += (signed char) (b[i] | mask);\n+    a[i] += (int8_t) (b[i] | mask);\n }\n \n-/* { dg-final { scan-assembler-times {\\tld1w\\tz[0-9]+\\.s, p[0-7]/z, \\[x[0-9]+\\]\\n} 1 } } */\n-/* { dg-final { scan-assembler-times {\\tld1w\\tz[0-9]+\\.s, p[0-7]/z, \\[x[0-9]+, #1, mul vl\\]\\n} 1 } } */\n-/* { dg-final { scan-assembler-times {\\tld1w\\tz[0-9]+\\.s, p[0-7]/z, \\[x[0-9]+, #2, mul vl\\]\\n} 1 } } */\n-/* { dg-final { scan-assembler-times {\\tld1w\\tz[0-9]+\\.s, p[0-7]/z, \\[x[0-9]+, #3, mul vl\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1w\\tz[0-9]+\\.s, p[0-7]/z, \\[x[0-9]+\\]\\n} 1 { xfail ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\tld1w\\tz[0-9]+\\.s, p[0-7]/z, \\[x[0-9]+, #1, mul vl\\]\\n} 1 { xfail ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\tld1w\\tz[0-9]+\\.s, p[0-7]/z, \\[x[0-9]+, #2, mul vl\\]\\n} 1 { xfail ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\tld1w\\tz[0-9]+\\.s, p[0-7]/z, \\[x[0-9]+, #3, mul vl\\]\\n} 1 { xfail ilp32 } } } */"}, {"sha": "f3d43cc44d4d50f20364c1953d6ad527afcfcaaa", "filename": "gcc/testsuite/gcc.target/aarch64/sve/logical_1.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Flogical_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Flogical_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Flogical_1.c?ref=0c64497d6eae75b9f87aef777f9beb5184ecaa64", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do assemble { target aarch64_asm_sve_ok } } */\n /* { dg-options \"-O3 --save-temps\" } */\n \n+#include <stdint.h>\n+\n #define DO_CONSTANT(VALUE, TYPE, OP, NAME)\t\t\t\\\n void vlogical_imm_##NAME##_##TYPE (TYPE *dst, int count)\t\\\n {\t\t\t\t\t\t\t\t\\\n@@ -78,12 +80,12 @@ void vlogical_imm_##NAME##_##TYPE (TYPE *dst, int count)\t\\\n   DO_CONSTANT (-8, TYPE, OP, NAME ## minus8)\t\t\t\\\n   DO_CONSTANT (-9, TYPE, OP, NAME ## minus9)\n \n-DO_LOGICAL_OPS_BRIEF (char, &, and)\n-DO_LOGICAL_OPS_BRIEF (long, &, and)\n+DO_LOGICAL_OPS_BRIEF (int8_t, &, and)\n+DO_LOGICAL_OPS_BRIEF (int64_t, &, and)\n \n-DO_LOGICAL_OPS (int, &, and)\n-DO_LOGICAL_OPS (int, |, or)\n-DO_LOGICAL_OPS (int, ^, xor)\n+DO_LOGICAL_OPS (int32_t, &, and)\n+DO_LOGICAL_OPS (int32_t, |, or)\n+DO_LOGICAL_OPS (int32_t, ^, xor)\n \n /* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.d, z[0-9]+\\.d, #0x1\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x1\\n} 1 } } */"}, {"sha": "d4503322d77fce28777c226bc8caf18b764bb52b", "filename": "gcc/testsuite/gcc.target/aarch64/sve/mask_struct_load_1.c", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_load_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_load_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_load_1.c?ref=0c64497d6eae75b9f87aef777f9beb5184ecaa64", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n \n+#include <stdint.h>\n+\n #define TEST_LOOP(NAME, OUTTYPE, INTYPE, MASKTYPE)\t\t\\\n   void __attribute__ ((noinline, noclone))\t\t\t\\\n   NAME##_2 (OUTTYPE *__restrict dest, INTYPE *__restrict src,\t\\\n@@ -12,22 +14,22 @@\n   }\n \n #define TEST2(NAME, OUTTYPE, INTYPE) \\\n-  TEST_LOOP (NAME##_i8, OUTTYPE, INTYPE, signed char) \\\n-  TEST_LOOP (NAME##_i16, OUTTYPE, INTYPE, unsigned short) \\\n+  TEST_LOOP (NAME##_i8, OUTTYPE, INTYPE, int8_t) \\\n+  TEST_LOOP (NAME##_i16, OUTTYPE, INTYPE, uint16_t) \\\n   TEST_LOOP (NAME##_f32, OUTTYPE, INTYPE, float) \\\n   TEST_LOOP (NAME##_f64, OUTTYPE, INTYPE, double)\n \n #define TEST1(NAME, OUTTYPE) \\\n-  TEST2 (NAME##_i8, OUTTYPE, signed char) \\\n-  TEST2 (NAME##_i16, OUTTYPE, unsigned short) \\\n-  TEST2 (NAME##_i32, OUTTYPE, int) \\\n-  TEST2 (NAME##_i64, OUTTYPE, unsigned long)\n+  TEST2 (NAME##_i8, OUTTYPE, int8_t) \\\n+  TEST2 (NAME##_i16, OUTTYPE, uint16_t) \\\n+  TEST2 (NAME##_i32, OUTTYPE, int32_t) \\\n+  TEST2 (NAME##_i64, OUTTYPE, uint64_t)\n \n #define TEST(NAME) \\\n-  TEST1 (NAME##_i8, signed char) \\\n-  TEST1 (NAME##_i16, unsigned short) \\\n-  TEST1 (NAME##_i32, int) \\\n-  TEST1 (NAME##_i64, unsigned long) \\\n+  TEST1 (NAME##_i8, int8_t) \\\n+  TEST1 (NAME##_i16, uint16_t) \\\n+  TEST1 (NAME##_i32, int32_t) \\\n+  TEST1 (NAME##_i64, uint64_t) \\\n   TEST2 (NAME##_f16_f16, _Float16, _Float16) \\\n   TEST2 (NAME##_f32_f32, float, float) \\\n   TEST2 (NAME##_f64_f64, double, double)"}, {"sha": "812b96723cb64e6b3572f23dac3cc9d32fe1e1ce", "filename": "gcc/testsuite/gcc.target/aarch64/sve/mask_struct_load_2.c", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_load_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_load_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_load_2.c?ref=0c64497d6eae75b9f87aef777f9beb5184ecaa64", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n \n+#include <stdint.h>\n+\n #define TEST_LOOP(NAME, OUTTYPE, INTYPE, MASKTYPE)\t\t\\\n   void __attribute__ ((noinline, noclone))\t\t\t\\\n   NAME##_3 (OUTTYPE *__restrict dest, INTYPE *__restrict src,\t\\\n@@ -14,22 +16,22 @@\n   }\n \n #define TEST2(NAME, OUTTYPE, INTYPE) \\\n-  TEST_LOOP (NAME##_i8, OUTTYPE, INTYPE, signed char) \\\n-  TEST_LOOP (NAME##_i16, OUTTYPE, INTYPE, unsigned short) \\\n+  TEST_LOOP (NAME##_i8, OUTTYPE, INTYPE, int8_t) \\\n+  TEST_LOOP (NAME##_i16, OUTTYPE, INTYPE, uint16_t) \\\n   TEST_LOOP (NAME##_f32, OUTTYPE, INTYPE, float) \\\n   TEST_LOOP (NAME##_f64, OUTTYPE, INTYPE, double)\n \n #define TEST1(NAME, OUTTYPE) \\\n-  TEST2 (NAME##_i8, OUTTYPE, signed char) \\\n-  TEST2 (NAME##_i16, OUTTYPE, unsigned short) \\\n-  TEST2 (NAME##_i32, OUTTYPE, int) \\\n-  TEST2 (NAME##_i64, OUTTYPE, unsigned long)\n+  TEST2 (NAME##_i8, OUTTYPE, int8_t) \\\n+  TEST2 (NAME##_i16, OUTTYPE, uint16_t) \\\n+  TEST2 (NAME##_i32, OUTTYPE, int32_t) \\\n+  TEST2 (NAME##_i64, OUTTYPE, uint64_t)\n \n #define TEST(NAME) \\\n-  TEST1 (NAME##_i8, signed char) \\\n-  TEST1 (NAME##_i16, unsigned short) \\\n-  TEST1 (NAME##_i32, int) \\\n-  TEST1 (NAME##_i64, unsigned long) \\\n+  TEST1 (NAME##_i8, int8_t) \\\n+  TEST1 (NAME##_i16, uint16_t) \\\n+  TEST1 (NAME##_i32, int32_t) \\\n+  TEST1 (NAME##_i64, uint64_t) \\\n   TEST2 (NAME##_f16_f16, _Float16, _Float16) \\\n   TEST2 (NAME##_f32_f32, float, float) \\\n   TEST2 (NAME##_f64_f64, double, double)"}, {"sha": "29702ab55f249c3ebd0baf44981870524098e1e4", "filename": "gcc/testsuite/gcc.target/aarch64/sve/mask_struct_load_3.c", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_load_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_load_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_load_3.c?ref=0c64497d6eae75b9f87aef777f9beb5184ecaa64", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n \n+#include <stdint.h>\n+\n #define TEST_LOOP(NAME, OUTTYPE, INTYPE, MASKTYPE)\t\t\\\n   void __attribute__ ((noinline, noclone))\t\t\t\\\n   NAME##_4 (OUTTYPE *__restrict dest, INTYPE *__restrict src,\t\\\n@@ -15,22 +17,22 @@\n   }\n \n #define TEST2(NAME, OUTTYPE, INTYPE) \\\n-  TEST_LOOP (NAME##_i8, OUTTYPE, INTYPE, signed char) \\\n-  TEST_LOOP (NAME##_i16, OUTTYPE, INTYPE, unsigned short) \\\n+  TEST_LOOP (NAME##_i8, OUTTYPE, INTYPE, int8_t) \\\n+  TEST_LOOP (NAME##_i16, OUTTYPE, INTYPE, uint16_t) \\\n   TEST_LOOP (NAME##_f32, OUTTYPE, INTYPE, float) \\\n   TEST_LOOP (NAME##_f64, OUTTYPE, INTYPE, double)\n \n #define TEST1(NAME, OUTTYPE) \\\n-  TEST2 (NAME##_i8, OUTTYPE, signed char) \\\n-  TEST2 (NAME##_i16, OUTTYPE, unsigned short) \\\n-  TEST2 (NAME##_i32, OUTTYPE, int) \\\n-  TEST2 (NAME##_i64, OUTTYPE, unsigned long)\n+  TEST2 (NAME##_i8, OUTTYPE, int8_t) \\\n+  TEST2 (NAME##_i16, OUTTYPE, uint16_t) \\\n+  TEST2 (NAME##_i32, OUTTYPE, int32_t) \\\n+  TEST2 (NAME##_i64, OUTTYPE, uint64_t)\n \n #define TEST(NAME) \\\n-  TEST1 (NAME##_i8, signed char) \\\n-  TEST1 (NAME##_i16, unsigned short) \\\n-  TEST1 (NAME##_i32, int) \\\n-  TEST1 (NAME##_i64, unsigned long) \\\n+  TEST1 (NAME##_i8, int8_t) \\\n+  TEST1 (NAME##_i16, uint16_t) \\\n+  TEST1 (NAME##_i32, int32_t) \\\n+  TEST1 (NAME##_i64, uint64_t) \\\n   TEST2 (NAME##_f16_f16, _Float16, _Float16) \\\n   TEST2 (NAME##_f32_f32, float, float) \\\n   TEST2 (NAME##_f64_f64, double, double)"}, {"sha": "436da08576005d2134e2cc94e4aca682981248c4", "filename": "gcc/testsuite/gcc.target/aarch64/sve/mask_struct_load_4.c", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_load_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_load_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_load_4.c?ref=0c64497d6eae75b9f87aef777f9beb5184ecaa64", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n \n+#include <stdint.h>\n+\n #define TEST_LOOP(NAME, OUTTYPE, INTYPE, MASKTYPE)\t\t\\\n   void __attribute__ ((noinline, noclone))\t\t\t\\\n   NAME##_3 (OUTTYPE *__restrict dest, INTYPE *__restrict src,\t\\\n@@ -12,22 +14,22 @@\n   }\n \n #define TEST2(NAME, OUTTYPE, INTYPE) \\\n-  TEST_LOOP (NAME##_i8, OUTTYPE, INTYPE, signed char) \\\n-  TEST_LOOP (NAME##_i16, OUTTYPE, INTYPE, unsigned short) \\\n+  TEST_LOOP (NAME##_i8, OUTTYPE, INTYPE, int8_t) \\\n+  TEST_LOOP (NAME##_i16, OUTTYPE, INTYPE, uint16_t) \\\n   TEST_LOOP (NAME##_f32, OUTTYPE, INTYPE, float) \\\n   TEST_LOOP (NAME##_f64, OUTTYPE, INTYPE, double)\n \n #define TEST1(NAME, OUTTYPE) \\\n-  TEST2 (NAME##_i8, OUTTYPE, signed char) \\\n-  TEST2 (NAME##_i16, OUTTYPE, unsigned short) \\\n-  TEST2 (NAME##_i32, OUTTYPE, int) \\\n-  TEST2 (NAME##_i64, OUTTYPE, unsigned long)\n+  TEST2 (NAME##_i8, OUTTYPE, int8_t) \\\n+  TEST2 (NAME##_i16, OUTTYPE, uint16_t) \\\n+  TEST2 (NAME##_i32, OUTTYPE, int32_t) \\\n+  TEST2 (NAME##_i64, OUTTYPE, uint64_t)\n \n #define TEST(NAME) \\\n-  TEST1 (NAME##_i8, signed char) \\\n-  TEST1 (NAME##_i16, unsigned short) \\\n-  TEST1 (NAME##_i32, int) \\\n-  TEST1 (NAME##_i64, unsigned long) \\\n+  TEST1 (NAME##_i8, int8_t) \\\n+  TEST1 (NAME##_i16, uint16_t) \\\n+  TEST1 (NAME##_i32, int32_t) \\\n+  TEST1 (NAME##_i64, uint64_t) \\\n   TEST2 (NAME##_f16_f16, _Float16, _Float16) \\\n   TEST2 (NAME##_f32_f32, float, float) \\\n   TEST2 (NAME##_f64_f64, double, double)"}, {"sha": "08e58247f00f6b77a4c1e75c7ab2b25776f4945c", "filename": "gcc/testsuite/gcc.target/aarch64/sve/mask_struct_load_5.c", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_load_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_load_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_load_5.c?ref=0c64497d6eae75b9f87aef777f9beb5184ecaa64", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n \n+#include <stdint.h>\n+\n #define TEST_LOOP(NAME, OUTTYPE, INTYPE, MASKTYPE)\t\t\\\n   void __attribute__ ((noinline, noclone))\t\t\t\\\n   NAME##_4 (OUTTYPE *__restrict dest, INTYPE *__restrict src,\t\\\n@@ -12,22 +14,22 @@\n   }\n \n #define TEST2(NAME, OUTTYPE, INTYPE) \\\n-  TEST_LOOP (NAME##_i8, OUTTYPE, INTYPE, signed char) \\\n-  TEST_LOOP (NAME##_i16, OUTTYPE, INTYPE, unsigned short) \\\n+  TEST_LOOP (NAME##_i8, OUTTYPE, INTYPE, int8_t) \\\n+  TEST_LOOP (NAME##_i16, OUTTYPE, INTYPE, uint16_t) \\\n   TEST_LOOP (NAME##_f32, OUTTYPE, INTYPE, float) \\\n   TEST_LOOP (NAME##_f64, OUTTYPE, INTYPE, double)\n \n #define TEST1(NAME, OUTTYPE) \\\n-  TEST2 (NAME##_i8, OUTTYPE, signed char) \\\n-  TEST2 (NAME##_i16, OUTTYPE, unsigned short) \\\n-  TEST2 (NAME##_i32, OUTTYPE, int) \\\n-  TEST2 (NAME##_i64, OUTTYPE, unsigned long)\n+  TEST2 (NAME##_i8, OUTTYPE, int8_t) \\\n+  TEST2 (NAME##_i16, OUTTYPE, uint16_t) \\\n+  TEST2 (NAME##_i32, OUTTYPE, int32_t) \\\n+  TEST2 (NAME##_i64, OUTTYPE, uint64_t)\n \n #define TEST(NAME) \\\n-  TEST1 (NAME##_i8, signed char) \\\n-  TEST1 (NAME##_i16, unsigned short) \\\n-  TEST1 (NAME##_i32, int) \\\n-  TEST1 (NAME##_i64, unsigned long) \\\n+  TEST1 (NAME##_i8, int8_t) \\\n+  TEST1 (NAME##_i16, uint16_t) \\\n+  TEST1 (NAME##_i32, int32_t) \\\n+  TEST1 (NAME##_i64, uint64_t) \\\n   TEST2 (NAME##_f16_f16, _Float16, _Float16) \\\n   TEST2 (NAME##_f32_f32, float, float) \\\n   TEST2 (NAME##_f64_f64, double, double)"}, {"sha": "d4542eca0f787eb4e0137860939f64a05ac63b6b", "filename": "gcc/testsuite/gcc.target/aarch64/sve/mask_struct_load_6.c", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_load_6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_load_6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_load_6.c?ref=0c64497d6eae75b9f87aef777f9beb5184ecaa64", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n \n+#include <stdint.h>\n+\n #define TEST_LOOP(NAME, OUTTYPE, INTYPE, MASKTYPE)\t\t\\\n   void __attribute__ ((noinline, noclone))\t\t\t\\\n   NAME##_2 (OUTTYPE *__restrict dest, INTYPE *__restrict src,\t\\\n@@ -12,22 +14,22 @@\n   }\n \n #define TEST2(NAME, OUTTYPE, INTYPE) \\\n-  TEST_LOOP (NAME##_i8, OUTTYPE, INTYPE, signed char) \\\n-  TEST_LOOP (NAME##_i16, OUTTYPE, INTYPE, unsigned short) \\\n+  TEST_LOOP (NAME##_i8, OUTTYPE, INTYPE, int8_t) \\\n+  TEST_LOOP (NAME##_i16, OUTTYPE, INTYPE, uint16_t) \\\n   TEST_LOOP (NAME##_f32, OUTTYPE, INTYPE, float) \\\n   TEST_LOOP (NAME##_f64, OUTTYPE, INTYPE, double)\n \n #define TEST1(NAME, OUTTYPE) \\\n-  TEST2 (NAME##_i8, OUTTYPE, signed char) \\\n-  TEST2 (NAME##_i16, OUTTYPE, unsigned short) \\\n-  TEST2 (NAME##_i32, OUTTYPE, int) \\\n-  TEST2 (NAME##_i64, OUTTYPE, unsigned long)\n+  TEST2 (NAME##_i8, OUTTYPE, int8_t) \\\n+  TEST2 (NAME##_i16, OUTTYPE, uint16_t) \\\n+  TEST2 (NAME##_i32, OUTTYPE, int32_t) \\\n+  TEST2 (NAME##_i64, OUTTYPE, uint64_t)\n \n #define TEST(NAME) \\\n-  TEST1 (NAME##_i8, signed char) \\\n-  TEST1 (NAME##_i16, unsigned short) \\\n-  TEST1 (NAME##_i32, int) \\\n-  TEST1 (NAME##_i64, unsigned long) \\\n+  TEST1 (NAME##_i8, int8_t) \\\n+  TEST1 (NAME##_i16, uint16_t) \\\n+  TEST1 (NAME##_i32, int32_t) \\\n+  TEST1 (NAME##_i64, uint64_t) \\\n   TEST2 (NAME##_f16_f16, _Float16, _Float16) \\\n   TEST2 (NAME##_f32_f32, float, float) \\\n   TEST2 (NAME##_f64_f64, double, double)"}, {"sha": "9d26e15c0d9883f275f565b4138f29cfb08e9c81", "filename": "gcc/testsuite/gcc.target/aarch64/sve/mask_struct_load_7.c", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_load_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_load_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_load_7.c?ref=0c64497d6eae75b9f87aef777f9beb5184ecaa64", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n \n+#include <stdint.h>\n+\n #define TEST_LOOP(NAME, OUTTYPE, INTYPE, MASKTYPE)\t\t\\\n   void __attribute__ ((noinline, noclone))\t\t\t\\\n   NAME##_3 (OUTTYPE *__restrict dest, INTYPE *__restrict src,\t\\\n@@ -12,22 +14,22 @@\n   }\n \n #define TEST2(NAME, OUTTYPE, INTYPE) \\\n-  TEST_LOOP (NAME##_i8, OUTTYPE, INTYPE, signed char) \\\n-  TEST_LOOP (NAME##_i16, OUTTYPE, INTYPE, unsigned short) \\\n+  TEST_LOOP (NAME##_i8, OUTTYPE, INTYPE, int8_t) \\\n+  TEST_LOOP (NAME##_i16, OUTTYPE, INTYPE, uint16_t) \\\n   TEST_LOOP (NAME##_f32, OUTTYPE, INTYPE, float) \\\n   TEST_LOOP (NAME##_f64, OUTTYPE, INTYPE, double)\n \n #define TEST1(NAME, OUTTYPE) \\\n-  TEST2 (NAME##_i8, OUTTYPE, signed char) \\\n-  TEST2 (NAME##_i16, OUTTYPE, unsigned short) \\\n-  TEST2 (NAME##_i32, OUTTYPE, int) \\\n-  TEST2 (NAME##_i64, OUTTYPE, unsigned long)\n+  TEST2 (NAME##_i8, OUTTYPE, int8_t) \\\n+  TEST2 (NAME##_i16, OUTTYPE, uint16_t) \\\n+  TEST2 (NAME##_i32, OUTTYPE, int32_t) \\\n+  TEST2 (NAME##_i64, OUTTYPE, uint64_t)\n \n #define TEST(NAME) \\\n-  TEST1 (NAME##_i8, signed char) \\\n-  TEST1 (NAME##_i16, unsigned short) \\\n-  TEST1 (NAME##_i32, int) \\\n-  TEST1 (NAME##_i64, unsigned long) \\\n+  TEST1 (NAME##_i8, int8_t) \\\n+  TEST1 (NAME##_i16, uint16_t) \\\n+  TEST1 (NAME##_i32, int32_t) \\\n+  TEST1 (NAME##_i64, uint64_t) \\\n   TEST2 (NAME##_f16_f16, _Float16, _Float16) \\\n   TEST2 (NAME##_f32_f32, float, float) \\\n   TEST2 (NAME##_f64_f64, double, double)"}, {"sha": "17fd4c0a079345a2e483f99d923266999e8cf5c5", "filename": "gcc/testsuite/gcc.target/aarch64/sve/mask_struct_load_8.c", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_load_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_load_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_load_8.c?ref=0c64497d6eae75b9f87aef777f9beb5184ecaa64", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n \n+#include <stdint.h>\n+\n #define TEST_LOOP(NAME, OUTTYPE, INTYPE, MASKTYPE)\t\t\\\n   void __attribute__ ((noinline, noclone))\t\t\t\\\n   NAME##_4 (OUTTYPE *__restrict dest, INTYPE *__restrict src,\t\\\n@@ -12,22 +14,22 @@\n   }\n \n #define TEST2(NAME, OUTTYPE, INTYPE) \\\n-  TEST_LOOP (NAME##_i8, OUTTYPE, INTYPE, signed char) \\\n-  TEST_LOOP (NAME##_i16, OUTTYPE, INTYPE, unsigned short) \\\n+  TEST_LOOP (NAME##_i8, OUTTYPE, INTYPE, int8_t) \\\n+  TEST_LOOP (NAME##_i16, OUTTYPE, INTYPE, uint16_t) \\\n   TEST_LOOP (NAME##_f32, OUTTYPE, INTYPE, float) \\\n   TEST_LOOP (NAME##_f64, OUTTYPE, INTYPE, double)\n \n #define TEST1(NAME, OUTTYPE) \\\n-  TEST2 (NAME##_i8, OUTTYPE, signed char) \\\n-  TEST2 (NAME##_i16, OUTTYPE, unsigned short) \\\n-  TEST2 (NAME##_i32, OUTTYPE, int) \\\n-  TEST2 (NAME##_i64, OUTTYPE, unsigned long)\n+  TEST2 (NAME##_i8, OUTTYPE, int8_t) \\\n+  TEST2 (NAME##_i16, OUTTYPE, uint16_t) \\\n+  TEST2 (NAME##_i32, OUTTYPE, int32_t) \\\n+  TEST2 (NAME##_i64, OUTTYPE, uint64_t)\n \n #define TEST(NAME) \\\n-  TEST1 (NAME##_i8, signed char) \\\n-  TEST1 (NAME##_i16, unsigned short) \\\n-  TEST1 (NAME##_i32, int) \\\n-  TEST1 (NAME##_i64, unsigned long) \\\n+  TEST1 (NAME##_i8, int8_t) \\\n+  TEST1 (NAME##_i16, uint16_t) \\\n+  TEST1 (NAME##_i32, int32_t) \\\n+  TEST1 (NAME##_i64, uint64_t) \\\n   TEST2 (NAME##_f16_f16, _Float16, _Float16) \\\n   TEST2 (NAME##_f32_f32, float, float) \\\n   TEST2 (NAME##_f64_f64, double, double)"}, {"sha": "8897fe1c9701f79a349f83de33eb5fb1b0e4f9d3", "filename": "gcc/testsuite/gcc.target/aarch64/sve/mask_struct_store_1.c", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_store_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_store_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_store_1.c?ref=0c64497d6eae75b9f87aef777f9beb5184ecaa64", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n \n+#include <stdint.h>\n+\n #define TEST_LOOP(NAME, OUTTYPE, INTYPE, MASKTYPE)\t\t\\\n   void __attribute__ ((noinline, noclone))\t\t\t\\\n   NAME##_2 (OUTTYPE *__restrict dest, INTYPE *__restrict src,\t\\\n@@ -18,22 +20,22 @@\n   }\n \n #define TEST2(NAME, OUTTYPE, INTYPE) \\\n-  TEST_LOOP (NAME##_i8, OUTTYPE, INTYPE, signed char) \\\n-  TEST_LOOP (NAME##_i16, OUTTYPE, INTYPE, unsigned short) \\\n+  TEST_LOOP (NAME##_i8, OUTTYPE, INTYPE, int8_t) \\\n+  TEST_LOOP (NAME##_i16, OUTTYPE, INTYPE, uint16_t) \\\n   TEST_LOOP (NAME##_f32, OUTTYPE, INTYPE, float) \\\n   TEST_LOOP (NAME##_f64, OUTTYPE, INTYPE, double)\n \n #define TEST1(NAME, OUTTYPE) \\\n-  TEST2 (NAME##_i8, OUTTYPE, signed char) \\\n-  TEST2 (NAME##_i16, OUTTYPE, unsigned short) \\\n-  TEST2 (NAME##_i32, OUTTYPE, int) \\\n-  TEST2 (NAME##_i64, OUTTYPE, unsigned long)\n+  TEST2 (NAME##_i8, OUTTYPE, int8_t) \\\n+  TEST2 (NAME##_i16, OUTTYPE, uint16_t) \\\n+  TEST2 (NAME##_i32, OUTTYPE, int32_t) \\\n+  TEST2 (NAME##_i64, OUTTYPE, uint64_t)\n \n #define TEST(NAME) \\\n-  TEST1 (NAME##_i8, signed char) \\\n-  TEST1 (NAME##_i16, unsigned short) \\\n-  TEST1 (NAME##_i32, int) \\\n-  TEST1 (NAME##_i64, unsigned long) \\\n+  TEST1 (NAME##_i8, int8_t) \\\n+  TEST1 (NAME##_i16, uint16_t) \\\n+  TEST1 (NAME##_i32, int32_t) \\\n+  TEST1 (NAME##_i64, uint64_t) \\\n   TEST2 (NAME##_f16_f16, _Float16, _Float16) \\\n   TEST2 (NAME##_f32_f32, float, float) \\\n   TEST2 (NAME##_f64_f64, double, double)"}, {"sha": "dccdceef652c733e9c7e686b09fc76f6d9eeb161", "filename": "gcc/testsuite/gcc.target/aarch64/sve/mask_struct_store_2.c", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_store_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_store_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_store_2.c?ref=0c64497d6eae75b9f87aef777f9beb5184ecaa64", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n \n+#include <stdint.h>\n+\n #define TEST_LOOP(NAME, OUTTYPE, INTYPE, MASKTYPE)\t\t\\\n   void __attribute__ ((noinline, noclone))\t\t\t\\\n   NAME##_3 (OUTTYPE *__restrict dest, INTYPE *__restrict src,\t\\\n@@ -19,22 +21,22 @@\n   }\n \n #define TEST2(NAME, OUTTYPE, INTYPE) \\\n-  TEST_LOOP (NAME##_i8, OUTTYPE, INTYPE, signed char) \\\n-  TEST_LOOP (NAME##_i16, OUTTYPE, INTYPE, unsigned short) \\\n+  TEST_LOOP (NAME##_i8, OUTTYPE, INTYPE, int8_t) \\\n+  TEST_LOOP (NAME##_i16, OUTTYPE, INTYPE, uint16_t) \\\n   TEST_LOOP (NAME##_f32, OUTTYPE, INTYPE, float) \\\n   TEST_LOOP (NAME##_f64, OUTTYPE, INTYPE, double)\n \n #define TEST1(NAME, OUTTYPE) \\\n-  TEST2 (NAME##_i8, OUTTYPE, signed char) \\\n-  TEST2 (NAME##_i16, OUTTYPE, unsigned short) \\\n-  TEST2 (NAME##_i32, OUTTYPE, int) \\\n-  TEST2 (NAME##_i64, OUTTYPE, unsigned long)\n+  TEST2 (NAME##_i8, OUTTYPE, int8_t) \\\n+  TEST2 (NAME##_i16, OUTTYPE, uint16_t) \\\n+  TEST2 (NAME##_i32, OUTTYPE, int32_t) \\\n+  TEST2 (NAME##_i64, OUTTYPE, uint64_t)\n \n #define TEST(NAME) \\\n-  TEST1 (NAME##_i8, signed char) \\\n-  TEST1 (NAME##_i16, unsigned short) \\\n-  TEST1 (NAME##_i32, int) \\\n-  TEST1 (NAME##_i64, unsigned long) \\\n+  TEST1 (NAME##_i8, int8_t) \\\n+  TEST1 (NAME##_i16, uint16_t) \\\n+  TEST1 (NAME##_i32, int32_t) \\\n+  TEST1 (NAME##_i64, uint64_t) \\\n   TEST2 (NAME##_f16_f16, _Float16, _Float16) \\\n   TEST2 (NAME##_f32_f32, float, float) \\\n   TEST2 (NAME##_f64_f64, double, double)"}, {"sha": "001f5be8ff58bfcc75eccc4c050bef1e53faffeb", "filename": "gcc/testsuite/gcc.target/aarch64/sve/mask_struct_store_3.c", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_store_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_store_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_store_3.c?ref=0c64497d6eae75b9f87aef777f9beb5184ecaa64", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n \n+#include <stdint.h>\n+\n #define TEST_LOOP(NAME, OUTTYPE, INTYPE, MASKTYPE)\t\t\\\n   void __attribute__ ((noinline, noclone))\t\t\t\\\n   NAME##_4 (OUTTYPE *__restrict dest, INTYPE *__restrict src,\t\\\n@@ -20,22 +22,22 @@\n   }\n \n #define TEST2(NAME, OUTTYPE, INTYPE) \\\n-  TEST_LOOP (NAME##_i8, OUTTYPE, INTYPE, signed char) \\\n-  TEST_LOOP (NAME##_i16, OUTTYPE, INTYPE, unsigned short) \\\n+  TEST_LOOP (NAME##_i8, OUTTYPE, INTYPE, int8_t) \\\n+  TEST_LOOP (NAME##_i16, OUTTYPE, INTYPE, uint16_t) \\\n   TEST_LOOP (NAME##_f32, OUTTYPE, INTYPE, float) \\\n   TEST_LOOP (NAME##_f64, OUTTYPE, INTYPE, double)\n \n #define TEST1(NAME, OUTTYPE) \\\n-  TEST2 (NAME##_i8, OUTTYPE, signed char) \\\n-  TEST2 (NAME##_i16, OUTTYPE, unsigned short) \\\n-  TEST2 (NAME##_i32, OUTTYPE, int) \\\n-  TEST2 (NAME##_i64, OUTTYPE, unsigned long)\n+  TEST2 (NAME##_i8, OUTTYPE, int8_t) \\\n+  TEST2 (NAME##_i16, OUTTYPE, uint16_t) \\\n+  TEST2 (NAME##_i32, OUTTYPE, int32_t) \\\n+  TEST2 (NAME##_i64, OUTTYPE, uint64_t)\n \n #define TEST(NAME) \\\n-  TEST1 (NAME##_i8, signed char) \\\n-  TEST1 (NAME##_i16, unsigned short) \\\n-  TEST1 (NAME##_i32, int) \\\n-  TEST1 (NAME##_i64, unsigned long) \\\n+  TEST1 (NAME##_i8, int8_t) \\\n+  TEST1 (NAME##_i16, uint16_t) \\\n+  TEST1 (NAME##_i32, int32_t) \\\n+  TEST1 (NAME##_i64, uint64_t) \\\n   TEST2 (NAME##_f16_f16, _Float16, _Float16) \\\n   TEST2 (NAME##_f32_f32, float, float) \\\n   TEST2 (NAME##_f64_f64, double, double)"}, {"sha": "59e9ee49c4a214b731ed1975da0dcfa46c059f8b", "filename": "gcc/testsuite/gcc.target/aarch64/sve/mask_struct_store_4.c", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_store_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_store_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_store_4.c?ref=0c64497d6eae75b9f87aef777f9beb5184ecaa64", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n \n+#include <stdint.h>\n+\n #define TEST_LOOP(NAME, OUTTYPE, INTYPE, MASKTYPE)\t\t\\\n   void __attribute__ ((noinline, noclone))\t\t\t\\\n   NAME##_2 (OUTTYPE *__restrict dest, INTYPE *__restrict src,\t\\\n@@ -16,22 +18,22 @@\n   }\n \n #define TEST2(NAME, OUTTYPE, INTYPE) \\\n-  TEST_LOOP (NAME##_i8, OUTTYPE, INTYPE, signed char) \\\n-  TEST_LOOP (NAME##_i16, OUTTYPE, INTYPE, unsigned short) \\\n+  TEST_LOOP (NAME##_i8, OUTTYPE, INTYPE, int8_t) \\\n+  TEST_LOOP (NAME##_i16, OUTTYPE, INTYPE, uint16_t) \\\n   TEST_LOOP (NAME##_f32, OUTTYPE, INTYPE, float) \\\n   TEST_LOOP (NAME##_f64, OUTTYPE, INTYPE, double)\n \n #define TEST1(NAME, OUTTYPE) \\\n-  TEST2 (NAME##_i8, OUTTYPE, signed char) \\\n-  TEST2 (NAME##_i16, OUTTYPE, unsigned short) \\\n-  TEST2 (NAME##_i32, OUTTYPE, int) \\\n-  TEST2 (NAME##_i64, OUTTYPE, unsigned long)\n+  TEST2 (NAME##_i8, OUTTYPE, int8_t) \\\n+  TEST2 (NAME##_i16, OUTTYPE, uint16_t) \\\n+  TEST2 (NAME##_i32, OUTTYPE, int32_t) \\\n+  TEST2 (NAME##_i64, OUTTYPE, uint64_t)\n \n #define TEST(NAME) \\\n-  TEST1 (NAME##_i8, signed char) \\\n-  TEST1 (NAME##_i16, unsigned short) \\\n-  TEST1 (NAME##_i32, int) \\\n-  TEST1 (NAME##_i64, unsigned long) \\\n+  TEST1 (NAME##_i8, int8_t) \\\n+  TEST1 (NAME##_i16, uint16_t) \\\n+  TEST1 (NAME##_i32, int32_t) \\\n+  TEST1 (NAME##_i64, uint64_t) \\\n   TEST2 (NAME##_f16_f16, _Float16, _Float16) \\\n   TEST2 (NAME##_f32_f32, float, float) \\\n   TEST2 (NAME##_f64_f64, double, double)"}, {"sha": "dfb6f4ac7a56ca38fb7814bcb33aabcd92f6b9fc", "filename": "gcc/testsuite/gcc.target/aarch64/sve/popcount_1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpopcount_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpopcount_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpopcount_1.c?ref=0c64497d6eae75b9f87aef777f9beb5184ecaa64", "patch": "@@ -14,7 +14,7 @@ void __attribute__ ((noinline, noclone))\n popcount_64 (unsigned int *restrict dst, uint64_t *restrict src, int size)\n {\n   for (int i = 0; i < size; ++i)\n-    dst[i] = __builtin_popcountl (src[i]);\n+    dst[i] = __builtin_popcountll (src[i]);\n }\n \n /* { dg-final { scan-assembler-times {\\tcnt\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s\\n} 1 } } */"}, {"sha": "6e3c8898a505faca3b0474ce58b1874321318fe3", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_1.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_1.c?ref=0c64497d6eae75b9f87aef777f9beb5184ecaa64", "patch": "@@ -1,8 +1,10 @@\n /* { dg-do assemble { target aarch64_asm_sve_ok } } */\n /* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n \n+#include <stdint.h>\n+\n #ifndef TYPE\n-#define TYPE unsigned char\n+#define TYPE uint8_t\n #endif\n \n #ifndef NAME"}, {"sha": "f06ab2108402bee923ec37acdba24860f6064929", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_10.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_10.c?ref=0c64497d6eae75b9f87aef777f9beb5184ecaa64", "patch": "@@ -1,8 +1,8 @@\n /* { dg-do assemble { target aarch64_asm_sve_ok } } */\n /* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n \n-#define TYPE unsigned long\n-#define ITYPE long\n+#define TYPE uint64_t\n+#define ITYPE int64_t\n #include \"struct_vect_7.c\"\n \n /* { dg-final { scan-assembler {\\tld2d\\t{z[0-9]+.d - z[0-9]+.d}, p[0-7]/z, \\[x[0-9]+\\]\\n} } } */"}, {"sha": "f09ea60ecb08e3604e5866f1c44f08ff43265e2b", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_10_run.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_10_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_10_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_10_run.c?ref=0c64497d6eae75b9f87aef777f9beb5184ecaa64", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do run { target aarch64_sve_hw } } */\n /* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n \n-#define TYPE unsigned long\n-#define ITYPE long\n+#define TYPE uint64_t\n+#define ITYPE int64_t\n #include \"struct_vect_7_run.c\""}, {"sha": "a47b145b2a2c28f91f645780f3cd64ff879e2877", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_11.c?ref=0c64497d6eae75b9f87aef777f9beb5184ecaa64", "patch": "@@ -2,7 +2,7 @@\n /* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n \n #define TYPE _Float16\n-#define ITYPE short\n+#define ITYPE int16_t\n #include \"struct_vect_7.c\"\n \n /* { dg-final { scan-assembler {\\tld2h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7]/z, \\[x[0-9]+\\]\\n} } } */"}, {"sha": "847646a839f744c7c0adcaf4e2e54edf06badd36", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_11_run.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_11_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_11_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_11_run.c?ref=0c64497d6eae75b9f87aef777f9beb5184ecaa64", "patch": "@@ -2,5 +2,5 @@\n /* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n \n #define TYPE _Float16\n-#define ITYPE short\n+#define ITYPE int16_t\n #include \"struct_vect_7_run.c\""}, {"sha": "117ed3e9f25712f179bbc10ad518358e985c5225", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_12.c?ref=0c64497d6eae75b9f87aef777f9beb5184ecaa64", "patch": "@@ -2,7 +2,7 @@\n /* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n \n #define TYPE float\n-#define ITYPE int\n+#define ITYPE int32_t\n #include \"struct_vect_7.c\"\n \n /* { dg-final { scan-assembler {\\tld2w\\t{z[0-9]+.s - z[0-9]+.s}, p[0-7]/z, \\[x[0-9]+\\]\\n} } } */"}, {"sha": "ae6b4134f0fd2349194a4735474f7c974c5f310e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_12_run.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_12_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_12_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_12_run.c?ref=0c64497d6eae75b9f87aef777f9beb5184ecaa64", "patch": "@@ -2,5 +2,5 @@\n /* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n \n #define TYPE float\n-#define ITYPE int\n+#define ITYPE int32_t\n #include \"struct_vect_7_run.c\""}, {"sha": "0e0a909bffd6008daab907d4901180d27e7e1196", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_13.c?ref=0c64497d6eae75b9f87aef777f9beb5184ecaa64", "patch": "@@ -2,7 +2,7 @@\n /* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n \n #define TYPE double\n-#define ITYPE long\n+#define ITYPE int64_t\n #include \"struct_vect_7.c\"\n \n /* { dg-final { scan-assembler {\\tld2d\\t{z[0-9]+.d - z[0-9]+.d}, p[0-7]/z, \\[x[0-9]+\\]\\n} } } */"}, {"sha": "ac8839cd5eb3bedd6a0942448c1fb320ba5faaf0", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_13_run.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_13_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_13_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_13_run.c?ref=0c64497d6eae75b9f87aef777f9beb5184ecaa64", "patch": "@@ -2,5 +2,5 @@\n /* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n \n #define TYPE double\n-#define ITYPE long\n+#define ITYPE int64_t\n #include \"struct_vect_7_run.c\""}, {"sha": "45644b67bda8955dc10cf0b7a8a7a8667c51b76a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_14.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_14.c?ref=0c64497d6eae75b9f87aef777f9beb5184ecaa64", "patch": "@@ -1,25 +1,25 @@\n /* { dg-do assemble { target aarch64_asm_sve_ok } } */\n /* { dg-options \"-O2 -ftree-vectorize -msve-vector-bits=256 --save-temps\" } */\n \n-#define TYPE unsigned char\n+#define TYPE uint8_t\n #define NAME(X) qi_##X\n #include \"struct_vect_1.c\"\n #undef NAME\n #undef TYPE\n \n-#define TYPE unsigned short\n+#define TYPE uint16_t\n #define NAME(X) hi_##X\n #include \"struct_vect_1.c\"\n #undef NAME\n #undef TYPE\n \n-#define TYPE unsigned int\n+#define TYPE uint32_t\n #define NAME(X) si_##X\n #include \"struct_vect_1.c\"\n #undef NAME\n #undef TYPE\n \n-#define TYPE unsigned long\n+#define TYPE uint64_t\n #define NAME(X) di_##X\n #include \"struct_vect_1.c\"\n #undef NAME"}, {"sha": "dc912e63c0452c228ddfb6000be71b90dd18a3b5", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_18.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_18.c?ref=0c64497d6eae75b9f87aef777f9beb5184ecaa64", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -ftree-vectorize\" } */\n \n+#include <stdint.h>\n+\n #define N 2000\n \n #define TEST_LOOP(NAME, TYPE)\t\t\t\t\t\\\n@@ -12,8 +14,8 @@\n   }\n \n #define TEST(NAME) \\\n-  TEST_LOOP (NAME##_i8, signed char) \\\n-  TEST_LOOP (NAME##_i16, unsigned short) \\\n+  TEST_LOOP (NAME##_i8, int8_t) \\\n+  TEST_LOOP (NAME##_i16, uint16_t) \\\n   TEST_LOOP (NAME##_f32, float) \\\n   TEST_LOOP (NAME##_f64, double)\n "}, {"sha": "6568dc71cfe7af6c4bf9df22aa9f78095d229901", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_19.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_19.c?ref=0c64497d6eae75b9f87aef777f9beb5184ecaa64", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -ftree-vectorize\" } */\n \n+#include <stdint.h>\n+\n #define TEST_LOOP(NAME, TYPE)\t\t\t\t\t\\\n   void __attribute__ ((noinline, noclone))\t\t\t\\\n   NAME (TYPE *restrict dest, TYPE *restrict src, int n)\t\t\\\n@@ -10,8 +12,8 @@\n   }\n \n #define TEST(NAME) \\\n-  TEST_LOOP (NAME##_i8, signed char) \\\n-  TEST_LOOP (NAME##_i16, unsigned short) \\\n+  TEST_LOOP (NAME##_i8, int8_t) \\\n+  TEST_LOOP (NAME##_i16, uint16_t) \\\n   TEST_LOOP (NAME##_f32, float) \\\n   TEST_LOOP (NAME##_f64, double)\n "}, {"sha": "e1715952d32bcc3890662241d8e69b4936105b96", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_2.c?ref=0c64497d6eae75b9f87aef777f9beb5184ecaa64", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do assemble { target aarch64_asm_sve_ok } } */\n /* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n \n-#define TYPE unsigned short\n+#define TYPE uint16_t\n #include \"struct_vect_1.c\"\n \n /* { dg-final { scan-assembler {\\tld2h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7]/z, \\[x[0-9]+\\]\\n} } } */"}, {"sha": "6c3520c2f54a552fcf9254365f1a64d5a2954710", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_20.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_20.c?ref=0c64497d6eae75b9f87aef777f9beb5184ecaa64", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -ftree-vectorize\" } */\n \n+#include <stdint.h>\n+\n #define N 2000\n \n #define TEST_LOOP(NAME, TYPE)\t\t\t\t\t\\\n@@ -12,8 +14,8 @@\n   }\n \n #define TEST(NAME) \\\n-  TEST_LOOP (NAME##_i8, signed char) \\\n-  TEST_LOOP (NAME##_i16, unsigned short) \\\n+  TEST_LOOP (NAME##_i8, int8_t) \\\n+  TEST_LOOP (NAME##_i16, uint16_t) \\\n   TEST_LOOP (NAME##_f32, float) \\\n   TEST_LOOP (NAME##_f64, double)\n "}, {"sha": "4b2a5e463b1f691dcf6622c4e6ef004e76a47b5c", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_21.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_21.c?ref=0c64497d6eae75b9f87aef777f9beb5184ecaa64", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -ftree-vectorize\" } */\n \n+#include <stdint.h>\n+\n #define TEST_LOOP(NAME, TYPE)\t\t\t\t\t\\\n   void __attribute__ ((noinline, noclone))\t\t\t\\\n   NAME (TYPE *restrict dest, TYPE *restrict src, int n)\t\t\\\n@@ -10,8 +12,8 @@\n   }\n \n #define TEST(NAME) \\\n-  TEST_LOOP (NAME##_i8, signed char) \\\n-  TEST_LOOP (NAME##_i16, unsigned short) \\\n+  TEST_LOOP (NAME##_i8, int8_t) \\\n+  TEST_LOOP (NAME##_i16, uint16_t) \\\n   TEST_LOOP (NAME##_f32, float) \\\n   TEST_LOOP (NAME##_f64, double)\n "}, {"sha": "b615360536175d720ebf39d190d9e2356f7c1810", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_22.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_22.c?ref=0c64497d6eae75b9f87aef777f9beb5184ecaa64", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -ftree-vectorize\" } */\n \n+#include <stdint.h>\n+\n #define N 2000\n \n #define TEST_LOOP(NAME, TYPE)\t\t\t\t\t\\\n@@ -12,8 +14,8 @@\n   }\n \n #define TEST(NAME) \\\n-  TEST_LOOP (NAME##_i8, signed char) \\\n-  TEST_LOOP (NAME##_i16, unsigned short) \\\n+  TEST_LOOP (NAME##_i8, int8_t) \\\n+  TEST_LOOP (NAME##_i16, uint16_t) \\\n   TEST_LOOP (NAME##_f32, float) \\\n   TEST_LOOP (NAME##_f64, double)\n "}, {"sha": "b529e0386f7b8f193f79d33eeea5088b8cf2de09", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_23.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_23.c?ref=0c64497d6eae75b9f87aef777f9beb5184ecaa64", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -ftree-vectorize\" } */\n \n+#include <stdint.h>\n+\n #define TEST_LOOP(NAME, TYPE)\t\t\t\t\t\\\n   void __attribute__ ((noinline, noclone))\t\t\t\\\n   NAME (TYPE *restrict dest, TYPE *restrict src, int n)\t\t\\\n@@ -10,8 +12,8 @@\n   }\n \n #define TEST(NAME) \\\n-  TEST_LOOP (NAME##_i8, signed char) \\\n-  TEST_LOOP (NAME##_i16, unsigned short) \\\n+  TEST_LOOP (NAME##_i8, int8_t) \\\n+  TEST_LOOP (NAME##_i16, uint16_t) \\\n   TEST_LOOP (NAME##_f32, float) \\\n   TEST_LOOP (NAME##_f64, double)\n "}, {"sha": "fad6162a47ce5aeaa8c099aef835f25dc1544341", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_2_run.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_2_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_2_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_2_run.c?ref=0c64497d6eae75b9f87aef777f9beb5184ecaa64", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run { target aarch64_sve_hw } } */\n /* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n \n-#define TYPE unsigned short\n+#define TYPE uint16_t\n #include \"struct_vect_1_run.c\""}, {"sha": "6bda6136c992e9eff80d5a5da3f889dfb4694c0a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_3.c?ref=0c64497d6eae75b9f87aef777f9beb5184ecaa64", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do assemble { target aarch64_asm_sve_ok } } */\n /* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n \n-#define TYPE unsigned int\n+#define TYPE uint32_t\n #include \"struct_vect_1.c\"\n \n /* { dg-final { scan-assembler {\\tld2w\\t{z[0-9]+.s - z[0-9]+.s}, p[0-7]/z, \\[x[0-9]+\\]\\n} } } */"}, {"sha": "22d03f9495eda62a11a41cc61a7a71ae669c9955", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_3_run.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_3_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_3_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_3_run.c?ref=0c64497d6eae75b9f87aef777f9beb5184ecaa64", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run { target aarch64_sve_hw } } */\n /* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n \n-#define TYPE unsigned int\n+#define TYPE uint32_t\n #include \"struct_vect_1_run.c\""}, {"sha": "4682d7e00b73ef3a1d088672830e5efb6ce4d2de", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_4.c?ref=0c64497d6eae75b9f87aef777f9beb5184ecaa64", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do assemble { target aarch64_asm_sve_ok } } */\n /* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n \n-#define TYPE unsigned long\n+#define TYPE uint64_t\n #include \"struct_vect_1.c\"\n \n /* { dg-final { scan-assembler {\\tld2d\\t{z[0-9]+.d - z[0-9]+.d}, p[0-7]/z, \\[x[0-9]+\\]\\n} } } */"}, {"sha": "9513940624056f0f5c43f5c0c9b3c4c605bc1def", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_4_run.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_4_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_4_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_4_run.c?ref=0c64497d6eae75b9f87aef777f9beb5184ecaa64", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run { target aarch64_sve_hw } } */\n /* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n \n-#define TYPE unsigned long\n+#define TYPE uint64_t\n #include \"struct_vect_1_run.c\""}, {"sha": "b741901499d739ced5ffd6a3aabab6787f16d469", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_7.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_7.c?ref=0c64497d6eae75b9f87aef777f9beb5184ecaa64", "patch": "@@ -1,9 +1,11 @@\n /* { dg-do assemble { target aarch64_asm_sve_ok } } */\n /* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n \n+#include <stdint.h>\n+\n #ifndef TYPE\n-#define TYPE unsigned char\n-#define ITYPE signed char\n+#define TYPE uint8_t\n+#define ITYPE int8_t\n #endif\n \n void __attribute__ ((noinline, noclone))"}, {"sha": "07e389438e2d9e716488864726fe057b822e17a7", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_8.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_8.c?ref=0c64497d6eae75b9f87aef777f9beb5184ecaa64", "patch": "@@ -1,8 +1,8 @@\n /* { dg-do assemble { target aarch64_asm_sve_ok } } */\n /* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n \n-#define TYPE unsigned short\n-#define ITYPE short\n+#define TYPE uint16_t\n+#define ITYPE int16_t\n #include \"struct_vect_7.c\"\n \n /* { dg-final { scan-assembler {\\tld2h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7]/z, \\[x[0-9]+\\]\\n} } } */"}, {"sha": "c9569717b883daf2a7f9505be23b7bb3303b0e04", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_8_run.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_8_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_8_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_8_run.c?ref=0c64497d6eae75b9f87aef777f9beb5184ecaa64", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do run { target aarch64_sve_hw } } */\n /* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n \n-#define TYPE unsigned short\n-#define ITYPE short\n+#define TYPE uint16_t\n+#define ITYPE int16_t\n #include \"struct_vect_7_run.c\""}, {"sha": "2fbcc9289ee004128c765c99e8388b1b9132518e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_9.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_9.c?ref=0c64497d6eae75b9f87aef777f9beb5184ecaa64", "patch": "@@ -1,8 +1,8 @@\n /* { dg-do assemble { target aarch64_asm_sve_ok } } */\n /* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n \n-#define TYPE unsigned int\n-#define ITYPE int\n+#define TYPE uint32_t\n+#define ITYPE int32_t\n #include \"struct_vect_7.c\"\n \n /* { dg-final { scan-assembler {\\tld2w\\t{z[0-9]+.s - z[0-9]+.s}, p[0-7]/z, \\[x[0-9]+\\]\\n} } } */"}, {"sha": "f8987725599a6ed7aacb0d133aaad34e7b7c614a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_9_run.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_9_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c64497d6eae75b9f87aef777f9beb5184ecaa64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_9_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_9_run.c?ref=0c64497d6eae75b9f87aef777f9beb5184ecaa64", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do run { target aarch64_sve_hw } } */\n /* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n \n-#define TYPE unsigned int\n-#define ITYPE int\n+#define TYPE uint32_t\n+#define ITYPE int32_t\n #include \"struct_vect_7_run.c\""}]}