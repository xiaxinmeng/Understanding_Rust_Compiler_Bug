{"sha": "e770968be5dbacddb5591860fc43a3f2d3c83894", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTc3MDk2OGJlNWRiYWNkZGI1NTkxODYwZmM0M2EzZjJkM2M4Mzg5NA==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-03-02T21:00:24Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-03-02T21:00:24Z"}, "message": "(mov*): Only accept store zero to memory insn if\nrtx_equal_function_value_matters is zero.\n\nFrom-SVN: r3603", "tree": {"sha": "6791a794f66621da93e0f1decee40ce94e230936", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6791a794f66621da93e0f1decee40ce94e230936"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e770968be5dbacddb5591860fc43a3f2d3c83894", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e770968be5dbacddb5591860fc43a3f2d3c83894", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e770968be5dbacddb5591860fc43a3f2d3c83894", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e770968be5dbacddb5591860fc43a3f2d3c83894/comments", "author": null, "committer": null, "parents": [{"sha": "778ebe62856880d81f0924cfb6e2a7cb048ca1a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/778ebe62856880d81f0924cfb6e2a7cb048ca1a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/778ebe62856880d81f0924cfb6e2a7cb048ca1a7"}], "stats": {"total": 59, "additions": 41, "deletions": 18}, "files": [{"sha": "c42a3f9ef3ffc6de0d2a0800a5d5651263608aa6", "filename": "gcc/config/i960/i960.md", "status": "modified", "additions": 41, "deletions": 18, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e770968be5dbacddb5591860fc43a3f2d3c83894/gcc%2Fconfig%2Fi960%2Fi960.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e770968be5dbacddb5591860fc43a3f2d3c83894/gcc%2Fconfig%2Fi960%2Fi960.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.md?ref=e770968be5dbacddb5591860fc43a3f2d3c83894", "patch": "@@ -549,13 +549,21 @@\n ;; to register move insn to a store (or load) insn without rerecognizing\n ;; the insn.\n \n-;; Special pattern for zero stores to memory for functions which don't use\n-;; the arg pointer.\n+;; The i960 does not have any store constant to memory instruction.  However,\n+;; the calling convention is defined so that the arg pointer when it is not\n+;; overwise being used is zero.  Thus, we can handle store zero to memory\n+;; by storing an unused arg pointer.  The arg pointer will be unused if\n+;; current_function_args_size is zero.  This value of this variable is not\n+;; valid until after all rtl generation is complete, including function\n+;; inlining (because a function that doesn't need an arg pointer may be\n+;; inlined into a function that does need an arg pointer), so we must also\n+;; check that rtx_equal_function_value_matters is zero.\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=d,d,d,m\")\n \t(match_operand:SI 1 \"general_operand\" \"dI,i,m,dJ\"))]\n-  \"current_function_args_size == 0\n+  \"(current_function_args_size == 0\n+    && rtx_equal_function_value_matters == 0)\n    && (register_operand (operands[0], SImode)\n        || register_operand (operands[1], SImode)\n        || operands[1] == const0_rtx)\"\n@@ -588,7 +596,8 @@\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=d,d,d,m\")\n \t(match_operand:SI 1 \"general_operand\" \"dI,i,m,d\"))]\n-  \"current_function_args_size != 0\n+  \"(current_function_args_size != 0\n+    || rtx_equal_function_value_matters != 0)\n    && (register_operand (operands[0], SImode)\n        || register_operand (operands[1], SImode))\"\n   \"*\n@@ -632,7 +641,8 @@\n (define_insn \"\"\n   [(set (match_operand:HI 0 \"general_operand\" \"=d,d,d,m\")\n \t(match_operand:HI 1 \"general_operand\" \"dI,i,m,dJ\"))]\n-  \"current_function_args_size == 0\n+  \"(current_function_args_size == 0\n+    && rtx_equal_function_value_matters == 0)\n    && (register_operand (operands[0], HImode)\n        || register_operand (operands[1], HImode)\n        || operands[1] == const0_rtx)\"\n@@ -666,7 +676,8 @@\n (define_insn \"\"\n   [(set (match_operand:HI 0 \"general_operand\" \"=d,d,d,m\")\n \t(match_operand:HI 1 \"general_operand\" \"dI,i,m,d\"))]\n-  \"current_function_args_size != 0\n+  \"(current_function_args_size != 0\n+    || rtx_equal_function_value_matters != 0)\n    && (register_operand (operands[0], HImode)\n        || register_operand (operands[1], HImode))\"\n   \"*\n@@ -707,7 +718,8 @@\n (define_insn \"\"\n   [(set (match_operand:QI 0 \"general_operand\" \"=d,d,d,m\")\n \t(match_operand:QI 1 \"general_operand\" \"dI,i,m,dJ\"))]\n-  \"current_function_args_size == 0\n+  \"(current_function_args_size == 0\n+    && rtx_equal_function_value_matters == 0)\n    && (register_operand (operands[0], QImode)\n        || register_operand (operands[1], QImode)\n        || operands[1] == const0_rtx)\"\n@@ -741,7 +753,8 @@\n (define_insn \"\"\n   [(set (match_operand:QI 0 \"general_operand\" \"=d,d,d,m\")\n \t(match_operand:QI 1 \"general_operand\" \"dI,i,m,d\"))]\n-  \"current_function_args_size != 0\n+  \"(current_function_args_size != 0\n+    || rtx_equal_function_value_matters != 0)\n    && (register_operand (operands[0], QImode)\n        || register_operand (operands[1], QImode))\"\n   \"*\n@@ -782,7 +795,8 @@\n (define_insn \"\"\n   [(set (match_operand:DI 0 \"general_operand\" \"=d,d,d,m,o\")\n \t(match_operand:DI 1 \"general_operand\" \"dI,i,m,d,J\"))]\n-  \"current_function_args_size == 0\n+  \"(current_function_args_size == 0\n+    && rtx_equal_function_value_matters == 0)\n    && (register_operand (operands[0], DImode)\n        || register_operand (operands[1], DImode)\n        || operands[1] == const0_rtx)\"\n@@ -809,7 +823,8 @@\n (define_insn \"\"\n   [(set (match_operand:DI 0 \"general_operand\" \"=d,d,d,m\")\n \t(match_operand:DI 1 \"general_operand\" \"dI,i,m,d\"))]\n-  \"current_function_args_size != 0\n+  \"(current_function_args_size != 0\n+    || rtx_equal_function_value_matters != 0)\n    && (register_operand (operands[0], DImode)\n        || register_operand (operands[1], DImode))\"\n   \"*\n@@ -842,7 +857,8 @@\n (define_insn \"\"\n   [(set (match_operand:TI 0 \"general_operand\" \"=d,d,d,m,o\")\n \t(match_operand:TI 1 \"general_operand\" \"dI,i,m,d,J\"))]\n-  \"current_function_args_size == 0\n+  \"(current_function_args_size == 0\n+    && rtx_equal_function_value_matters == 0)\n    && (register_operand (operands[0], TImode)\n        || register_operand (operands[1], TImode)\n        || operands[1] == const0_rtx)\"\n@@ -871,7 +887,8 @@\n (define_insn \"\"\n   [(set (match_operand:TI 0 \"general_operand\" \"=d,d,d,m\")\n \t(match_operand:TI 1 \"general_operand\" \"dI,i,m,d\"))]\n-  \"current_function_args_size != 0\n+  \"(current_function_args_size != 0\n+    || rtx_equal_function_value_matters != 0)\n    && (register_operand (operands[0], TImode)\n        || register_operand (operands[1], TImode))\"\n   \"*\n@@ -958,7 +975,8 @@\n (define_insn \"\"\n   [(set (match_operand:DF 0 \"general_operand\" \"=r,*f,d,d,m,o\")\n \t(match_operand:DF 1 \"fpmove_src_operand\" \"r,GH,F,m,d,G\"))]\n-  \"current_function_args_size == 0\n+  \"(current_function_args_size == 0\n+    && rtx_equal_function_value_matters == 0)\n    && (register_operand (operands[0], DFmode)\n        || register_operand (operands[1], DFmode)\n        || operands[1] == CONST0_RTX (DFmode))\"\n@@ -989,7 +1007,8 @@\n (define_insn \"\"\n   [(set (match_operand:DF 0 \"general_operand\" \"=r,*f,d,d,m\")\n \t(match_operand:DF 1 \"fpmove_src_operand\" \"r,GH,F,m,d\"))]\n-  \"current_function_args_size != 0\n+  \"(current_function_args_size != 0\n+    || rtx_equal_function_value_matters != 0)\n    && (register_operand (operands[0], DFmode)\n        || register_operand (operands[1], DFmode))\"\n   \"*\n@@ -1026,7 +1045,8 @@\n (define_insn \"\"\n   [(set (match_operand:SF 0 \"general_operand\" \"=r,*f,d,d,m\")\n \t(match_operand:SF 1 \"fpmove_src_operand\" \"r,GH,F,m,dG\"))]\n-  \"current_function_args_size == 0\n+  \"(current_function_args_size == 0\n+    && rtx_equal_function_value_matters == 0)\n    && (register_operand (operands[0], SFmode)\n        || register_operand (operands[1], SFmode)\n        || operands[1] == CONST0_RTX (SFmode))\"\n@@ -1056,7 +1076,8 @@\n (define_insn \"\"\n   [(set (match_operand:SF 0 \"general_operand\" \"=r,*f,d,d,m\")\n \t(match_operand:SF 1 \"fpmove_src_operand\" \"r,GH,F,m,d\"))]\n-  \"current_function_args_size != 0\n+  \"(current_function_args_size != 0\n+    || rtx_equal_function_value_matters != 0)\n    && (register_operand (operands[0], SFmode)\n        || register_operand (operands[1], SFmode))\"\n   \"*\n@@ -1907,7 +1928,8 @@\n (define_insn \"\"\n   [(set (match_operand:TF 0 \"general_operand\" \"=r,*f,d,d,m,o\")\n \t(match_operand:TF 1 \"fpmove_src_operand\" \"r,GH,F,m,d,G\"))]\n-  \"current_function_args_size == 0\n+  \"(current_function_args_size == 0\n+    && rtx_equal_function_value_matters == 0)\n    && (register_operand (operands[0], TFmode)\n        || register_operand (operands[1], TFmode)\n        || operands[1] == CONST0_RTX (TFmode))\"\n@@ -1940,7 +1962,8 @@\n (define_insn \"\"\n   [(set (match_operand:TF 0 \"general_operand\" \"=r,*f,d,d,m\")\n \t(match_operand:TF 1 \"fpmove_src_operand\" \"r,GH,F,m,d\"))]\n-  \"current_function_args_size != 0\n+  \"(current_function_args_size != 0\n+    || rtx_equal_function_value_matters != 0)\n    && (register_operand (operands[0], TFmode)\n        || register_operand (operands[1], TFmode))\"\n   \"*"}]}