{"sha": "8db99db275183d379d0b6f2cd80942f6f5f5b4b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGRiOTlkYjI3NTE4M2QzNzlkMGI2ZjJjZDgwOTQyZjZmNWY1YjRiMg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-03-19T12:43:55Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-03-19T12:43:55Z"}, "message": "Warning fixes:\n\n        * cccp.c (create_definition): Cast to U_CHAR* when assigning to one.\n        * cppfiles.c (read_and_prescan): Likewise.\n        Start a #define in column 0.\n        * cpplib.c (cpp_define): Cast to U_CHAR* when assigning to one.\n        (cpp_push_buffer): Likewise for cpp_buffer*.\n        (do_include): Change the type of `fbeg' and `fend' to unsigned char*.\n        (do_endif): Cast to char* when assigning to one.\n        (do_assert): Likewise.\n        (do_unassert): Likewise.\n        (cpp_read_check_assertion): Change the type of `name' to U_CHAR*.\n        Don't do unnecessary cast to char* anymore.\n        * genrecog.c (make_insn_sequence): Cast to char** when assigning\n        to one.  Cast the first argument of bzero to PTR.\n        * loop.c (strength_reduce): Remove unused variable `note'.\n        * reload1.c (new_insn_chain): Cast to struct insn_chain* when\n        assigning to one.\n        * rtl.c (copy_rtx): Use memcpy instead of bcopy.\n\nFrom-SVN: r25860", "tree": {"sha": "44ab1abac4ea78664a7aac624e55999489833429", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44ab1abac4ea78664a7aac624e55999489833429"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8db99db275183d379d0b6f2cd80942f6f5f5b4b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8db99db275183d379d0b6f2cd80942f6f5f5b4b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8db99db275183d379d0b6f2cd80942f6f5f5b4b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8db99db275183d379d0b6f2cd80942f6f5f5b4b2/comments", "author": null, "committer": null, "parents": [{"sha": "b03a08ee0f0d0c64d3d0df60730d078b26c49876", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b03a08ee0f0d0c64d3d0df60730d078b26c49876", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b03a08ee0f0d0c64d3d0df60730d078b26c49876"}], "stats": {"total": 76, "additions": 51, "deletions": 25}, "files": [{"sha": "9a17c3c956ab818c9a91e9280f082e3b92820c36", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8db99db275183d379d0b6f2cd80942f6f5f5b4b2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8db99db275183d379d0b6f2cd80942f6f5f5b4b2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8db99db275183d379d0b6f2cd80942f6f5f5b4b2", "patch": "@@ -1,3 +1,29 @@\n+Fri Mar 19 15:28:38 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* cccp.c (create_definition): Cast to U_CHAR* when assigning to one.\n+\n+\t* cppfiles.c (read_and_prescan): Likewise.\n+\tStart a #define in column 0.\n+\n+\t* cpplib.c (cpp_define): Cast to U_CHAR* when assigning to one.\n+\t(cpp_push_buffer): Likewise for cpp_buffer*.\n+\t(do_include): Change the type of `fbeg' and `fend' to unsigned char*.\n+\t(do_endif): Cast to char* when assigning to one.\n+\t(do_assert): Likewise.\n+\t(do_unassert): Likewise.\n+\t(cpp_read_check_assertion): Change the type of `name' to U_CHAR*.\n+\tDon't do unnecessary cast to char* anymore.\n+\n+\t* genrecog.c (make_insn_sequence): Cast to char** when assigning\n+\tto one.  Cast the first argument of bzero to PTR.\n+\n+\t* loop.c (strength_reduce): Remove unused variable `note'.\n+\n+\t* reload1.c (new_insn_chain): Cast to struct insn_chain* when\n+ \tassigning to one.\n+\n+\t* rtl.c (copy_rtx): Use memcpy instead of bcopy.\n+\n Fri Mar 19 11:19:31 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* calls.c (initialize_argument_information): Mark parameters"}, {"sha": "a849aabd6b31be62fcab073335bb4746da5f6463", "filename": "gcc/cccp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8db99db275183d379d0b6f2cd80942f6f5f5b4b2/gcc%2Fcccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8db99db275183d379d0b6f2cd80942f6f5f5b4b2/gcc%2Fcccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcccp.c?ref=8db99db275183d379d0b6f2cd80942f6f5f5b4b2", "patch": "@@ -5861,7 +5861,7 @@ create_definition (buf, limit, op)\n       if (bp == temp->name && rest_args == 1)\n \t{\n \t  /* This is the ISO C 9x style.  */\n-\t  temp->name = va_args_name;\n+\t  temp->name = (U_CHAR *) va_args_name;\n \t  temp->length = VA_ARGS_NAME_LENGTH;\n \t}\n       else"}, {"sha": "aac49bd5437212117ece5de99f395f1282056b8c", "filename": "gcc/cppfiles.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8db99db275183d379d0b6f2cd80942f6f5f5b4b2/gcc%2Fcppfiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8db99db275183d379d0b6f2cd80942f6f5f5b4b2/gcc%2Fcppfiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppfiles.c?ref=8db99db275183d379d0b6f2cd80942f6f5f5b4b2", "patch": "@@ -814,7 +814,7 @@ read_and_prescan (pfile, fp, desc, len)\n      int desc;\n      size_t len;\n {\n-  U_CHAR *buf = xmalloc (len);\n+  U_CHAR *buf = (U_CHAR *) xmalloc (len);\n   U_CHAR *ip, *op, *line_base;\n   U_CHAR *ibase;\n   unsigned int line, deferred_newlines;\n@@ -829,11 +829,11 @@ read_and_prescan (pfile, fp, desc, len)\n   /* Table of characters that can't be handled in the inner loop.\n      Keep these contiguous to optimize the performance of the code generated\n      for the switch that uses them.  */\n-  #define SPECCASE_EMPTY     0\n-  #define SPECCASE_NUL       1\n-  #define SPECCASE_CR        2\n-  #define SPECCASE_BACKSLASH 3\n-  #define SPECCASE_QUESTION  4\n+#define SPECCASE_EMPTY     0\n+#define SPECCASE_NUL       1\n+#define SPECCASE_CR        2\n+#define SPECCASE_BACKSLASH 3\n+#define SPECCASE_QUESTION  4\n   U_CHAR speccase[256];\n \n   offset = 0;"}, {"sha": "d50848698b00b7967b293c40abc15d643fc42587", "filename": "gcc/cpplib.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8db99db275183d379d0b6f2cd80942f6f5f5b4b2/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8db99db275183d379d0b6f2cd80942f6f5f5b4b2/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=8db99db275183d379d0b6f2cd80942f6f5f5b4b2", "patch": "@@ -188,7 +188,7 @@ cpp_define (pfile, str)\n   memcpy (buf, str, count - 2);\n   /* Change the first \"=\" in the string to a space.  If there is none,\n      tack \" 1\" on the end. */\n-  p = strchr (buf, '=');\n+  p = (U_CHAR *) strchr (buf, '=');\n   if (p)\n     {\n       *p = ' ';\n@@ -755,7 +755,7 @@ cpp_push_buffer (pfile, buffer, length)\n       return NULL;\n     }\n \n-  new = xcalloc (sizeof (cpp_buffer), 1);\n+  new = (cpp_buffer *) xcalloc (sizeof (cpp_buffer), 1);\n \n   new->if_stack = pfile->if_stack;\n   new->cleanup = null_cleanup;\n@@ -1006,7 +1006,7 @@ do_include (pfile, keyword)\n   int angle_brackets = 0;\t/* 0 for \"...\", 1 for <...> */\n   int before;  /* included before? */\n   long flen;\n-  char *fbeg, *fend;\n+  unsigned char *fbeg, *fend;\n   cpp_buffer *fp;\n \n   enum cpp_token token;\n@@ -2025,7 +2025,7 @@ do_endif (pfile, keyword)\n \t      for (ip = CPP_BUFFER (pfile); ; ip = CPP_PREV_BUFFER (ip))\n \t\tif (ip->fname != NULL)\n \t\t  break;\n-\t      ip->ihash->control_macro = temp->control_macro;\n+\t      ip->ihash->control_macro = (char *) temp->control_macro;\n \t    }\n         }\n       free (temp);\n@@ -2748,7 +2748,7 @@ do_assert (pfile, keyword)\n     cpp_pedwarn (pfile, \"ANSI C does not allow `#assert'\");\n \n   cpp_skip_hspace (pfile);\n-  sym = CPP_PWRITTEN (pfile);\t/* remember where it starts */\n+  sym = (char *) CPP_PWRITTEN (pfile);\t/* remember where it starts */\n   ret = parse_assertion (pfile);\n   if (ret == 0)\n     goto error;\n@@ -2790,11 +2790,11 @@ do_assert (pfile, keyword)\n \t\t      (char *)base->value.aschain, -1);\n   base->value.aschain = this;\n   \n-  pfile->limit = sym; /* Pop */\n+  pfile->limit = (unsigned char *) sym; /* Pop */\n   return 0;\n \n  error:\n-  pfile->limit = sym; /* Pop */\n+  pfile->limit = (unsigned char *) sym; /* Pop */\n   skip_rest_of_line (pfile);\n   return 1;\n }\n@@ -2815,7 +2815,7 @@ do_unassert (pfile, keyword)\n \n   cpp_skip_hspace (pfile);\n \n-  sym = CPP_PWRITTEN (pfile);\t/* remember where it starts */\n+  sym = (char *) CPP_PWRITTEN (pfile);\t/* remember where it starts */\n   ret = parse_assertion (pfile);\n   if (ret == 0)\n     goto error;\n@@ -2860,10 +2860,10 @@ do_unassert (pfile, keyword)\n \tdelete_macro (base);  /* Last answer for this predicate deleted. */\n     }\n   \n-  pfile->limit = sym; /* Pop */\n+  pfile->limit = (unsigned char *) sym; /* Pop */\n   return 0;\n  error:\n-  pfile->limit = sym; /* Pop */\n+  pfile->limit = (unsigned char *) sym; /* Pop */\n   skip_rest_of_line (pfile);\n   return 1;\n }\n@@ -2885,7 +2885,7 @@ int\n cpp_read_check_assertion (pfile)\n      cpp_reader *pfile;\n {\n-  char *name = CPP_PWRITTEN (pfile);\n+  U_CHAR *name = CPP_PWRITTEN (pfile);\n   int result;\n   HASHNODE *hp;\n   \n@@ -2895,7 +2895,7 @@ cpp_read_check_assertion (pfile)\n     result = 0;\n   else\n     {\n-      hp = cpp_lookup (pfile, name, (char *)CPP_PWRITTEN (pfile) - name, -1);\n+      hp = cpp_lookup (pfile, name, CPP_PWRITTEN (pfile) - name, -1);\n       result = (hp != 0);\n     }\n "}, {"sha": "f1359470b6b28e60ef1b71d34df073490661cb2d", "filename": "gcc/genrecog.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8db99db275183d379d0b6f2cd80942f6f5f5b4b2/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8db99db275183d379d0b6f2cd80942f6f5f5b4b2/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=8db99db275183d379d0b6f2cd80942f6f5f5b4b2", "patch": "@@ -221,8 +221,9 @@ make_insn_sequence (insn, type)\n       {\n \tint new_size;\n \tnew_size = (insn_name_ptr_size ? insn_name_ptr_size * 2 : 512);\n-\tinsn_name_ptr = xrealloc (insn_name_ptr, sizeof(char *) * new_size);\n-\tbzero (insn_name_ptr + insn_name_ptr_size,\n+\tinsn_name_ptr =\n+\t  (char **) xrealloc (insn_name_ptr, sizeof(char *) * new_size);\n+\tbzero ((PTR)(insn_name_ptr + insn_name_ptr_size),\n \t       sizeof(char *) * (new_size - insn_name_ptr_size));\n \tinsn_name_ptr_size = new_size;\n       }"}, {"sha": "f2adbf470c1f2f5d40c883c3b96a8adb0201c31e", "filename": "gcc/loop.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8db99db275183d379d0b6f2cd80942f6f5f5b4b2/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8db99db275183d379d0b6f2cd80942f6f5f5b4b2/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=8db99db275183d379d0b6f2cd80942f6f5f5b4b2", "patch": "@@ -4216,8 +4216,6 @@ strength_reduce (scan_start, end, loop_top, insn_count,\n \t\t   p != next->insn;\n \t\t   p = next_insn_in_loop (p, scan_start, end, loop_top))\n \t\t{\n-\t\t  rtx note;\n-    \n \t\t  if (GET_RTX_CLASS (GET_CODE (p)) != 'i')\n \t\t    continue;\n \t\t  if (reg_mentioned_p (old_reg, PATTERN (p)))"}, {"sha": "081b997710f6734f1d0b8975659aa12e43cdafbb", "filename": "gcc/reload1.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8db99db275183d379d0b6f2cd80942f6f5f5b4b2/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8db99db275183d379d0b6f2cd80942f6f5f5b4b2/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=8db99db275183d379d0b6f2cd80942f6f5f5b4b2", "patch": "@@ -509,7 +509,8 @@ new_insn_chain ()\n \n   if (unused_insn_chains == 0)\n     {\n-      c = obstack_alloc (&reload_obstack, sizeof (struct insn_chain));\n+      c = (struct insn_chain *)\n+\tobstack_alloc (&reload_obstack, sizeof (struct insn_chain));\n       c->live_before = OBSTACK_ALLOC_REG_SET (&reload_obstack);\n       c->live_after = OBSTACK_ALLOC_REG_SET (&reload_obstack);\n     }"}, {"sha": "ae474d08bf1fb56d81cf8302f8e78bc913746a01", "filename": "gcc/rtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8db99db275183d379d0b6f2cd80942f6f5f5b4b2/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8db99db275183d379d0b6f2cd80942f6f5f5b4b2/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=8db99db275183d379d0b6f2cd80942f6f5f5b4b2", "patch": "@@ -325,7 +325,7 @@ copy_rtx (orig)\n      all fields need copying, and then clear the fields that should\n      not be copied.  That is the sensible default behavior, and forces\n      us to explicitly document why we are *not* copying a flag.  */\n-  bcopy (orig, copy, sizeof (struct rtx_def) - sizeof (rtunion));\n+  memcpy (copy, orig, sizeof (struct rtx_def) - sizeof (rtunion));\n \n   /* We do not copy the USED flag, which is used as a mark bit during\n      walks over the RTL.  */"}]}