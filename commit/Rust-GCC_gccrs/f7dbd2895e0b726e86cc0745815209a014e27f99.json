{"sha": "f7dbd2895e0b726e86cc0745815209a014e27f99", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjdkYmQyODk1ZTBiNzI2ZTg2Y2MwNzQ1ODE1MjA5YTAxNGUyN2Y5OQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2004-05-07T15:09:23Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2004-05-07T15:09:23Z"}, "message": "mips.c (mips_va_arg): Fix calculation of osize for EABI_FLOAT_VARARGS_P.\n\n\t* config/mips/mips.c (mips_va_arg): Fix calculation of osize for\n\tEABI_FLOAT_VARARGS_P.\n\nFrom-SVN: r81625", "tree": {"sha": "efc7c1c892f18323d7fbfb9181bc35217a1a3581", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/efc7c1c892f18323d7fbfb9181bc35217a1a3581"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7dbd2895e0b726e86cc0745815209a014e27f99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7dbd2895e0b726e86cc0745815209a014e27f99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7dbd2895e0b726e86cc0745815209a014e27f99", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7dbd2895e0b726e86cc0745815209a014e27f99/comments", "author": null, "committer": null, "parents": [{"sha": "5c8a81d5a8a462b4648491110c0bee8ae2c89d0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c8a81d5a8a462b4648491110c0bee8ae2c89d0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c8a81d5a8a462b4648491110c0bee8ae2c89d0a"}], "stats": {"total": 58, "additions": 39, "deletions": 19}, "files": [{"sha": "5b036b28e81dfa4ebf18e4ae8c75f39310057c2f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7dbd2895e0b726e86cc0745815209a014e27f99/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7dbd2895e0b726e86cc0745815209a014e27f99/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f7dbd2895e0b726e86cc0745815209a014e27f99", "patch": "@@ -1,3 +1,8 @@\n+2004-05-07  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/mips/mips.c (mips_va_arg): Fix calculation of osize for\n+\tEABI_FLOAT_VARARGS_P.\n+\n 2004-05-07  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/mips/mips.h (ISA_HAS_BRANCHLIKELY): Remove TARGET_MIPS5500."}, {"sha": "2925ffd3d96bcd0cc6afe2f9bb03d0228da7e287", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 34, "deletions": 19, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7dbd2895e0b726e86cc0745815209a014e27f99/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7dbd2895e0b726e86cc0745815209a014e27f99/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=f7dbd2895e0b726e86cc0745815209a014e27f99", "patch": "@@ -4133,8 +4133,6 @@ mips_va_arg (tree valist, tree type)\n \t  rsize = UNITS_PER_WORD;\n \t}\n \n-      addr_rtx = gen_reg_rtx (Pmode);\n-\n       if (!EABI_FLOAT_VARARGS_P)\n \t{\n \t  /* Case of all args in a merged stack.  No need to check bounds,\n@@ -4157,12 +4155,12 @@ mips_va_arg (tree valist, tree type)\n \n \t  /* Emit code to set addr_rtx to the valist, and postincrement\n \t     the valist by the size of the argument, rounded up to the\n-\t     next word.\t */\n+\t     next word.\t Account for padding on big-endian targets.  */\n \t  t = build (POSTINCREMENT_EXPR, TREE_TYPE (gpr), gpr,\n \t\t     size_int (rsize));\n-\t  r = expand_expr (t, addr_rtx, Pmode, EXPAND_NORMAL);\n-\t  if (r != addr_rtx)\n-\t    emit_move_insn (addr_rtx, r);\n+\t  addr_rtx = expand_expr (t, 0, Pmode, EXPAND_NORMAL);\n+\t  if (BYTES_BIG_ENDIAN)\n+\t    addr_rtx = plus_constant (addr_rtx, rsize - size);\n \n \t  /* Flush the POSTINCREMENT.  */\n \t  emit_queue();\n@@ -4176,6 +4174,8 @@ mips_va_arg (tree valist, tree type)\n \t  rtx lab_over = NULL_RTX, lab_false;\n \t  HOST_WIDE_INT osize;\n \n+\t  addr_rtx = gen_reg_rtx (Pmode);\n+\n \t  f_ovfl = TYPE_FIELDS (va_list_type_node);\n \t  f_gtop = TREE_CHAIN (f_ovfl);\n \t  f_ftop = TREE_CHAIN (f_gtop);\n@@ -4226,6 +4226,25 @@ mips_va_arg (tree valist, tree type)\n \t\t each one will take up UNITS_PER_HWFPVALUE bytes, regardless\n \t\t of the float's precision.  */\n \t      rsize = UNITS_PER_HWFPVALUE;\n+\n+\t      /* Overflow arguments are padded to UNITS_PER_WORD bytes\n+\t\t (= PARM_BOUNDARY bits).  This can be different from RSIZE\n+\t\t in two cases:\n+\n+\t\t     (1) On 32-bit targets when TYPE is a structure such as:\n+\n+\t\t\t     struct s { float f; };\n+\n+\t\t\t Such structures are passed in paired FPRs, so RSIZE\n+\t\t\t will be 8 bytes.  However, the structure only takes\n+\t\t\t up 4 bytes of memory, so OSIZE will only be 4.\n+\n+\t\t     (2) In combinations such as -mgp64 -msingle-float\n+\t\t\t -fshort-double.  Doubles passed in registers\n+\t\t\t will then take up 4 (UNITS_PER_HWFPVALUE) bytes,\n+\t\t\t but those passed on the stack take up\n+\t\t\t UNITS_PER_WORD bytes.  */\n+\t      osize = MAX (GET_MODE_SIZE (TYPE_MODE (type)), UNITS_PER_WORD);\n \t    }\n \t  else\n \t    {\n@@ -4239,23 +4258,21 @@ mips_va_arg (tree valist, tree type)\n \t\t  t = build (MODIFY_EXPR, TREE_TYPE (off), off, t);\n \t\t  expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n \t\t}\n+\t      osize = rsize;\n \t    }\n-\t  /* Every overflow argument must take up at least UNITS_PER_WORD\n-\t     bytes (= PARM_BOUNDARY bits).  RSIZE can sometimes be smaller\n-\t     than that, such as in the combination -mgp64 -msingle-float\n-\t     -fshort-double.  Doubles passed in registers will then take\n-\t     up UNITS_PER_HWFPVALUE bytes, but those passed on the stack\n-\t     take up UNITS_PER_WORD bytes.  */\n-\t  osize = MAX (rsize, UNITS_PER_WORD);\n \n \t  /* [2] Emit code to branch if off == 0.  */\n \t  r = expand_expr (off, NULL_RTX, TYPE_MODE (TREE_TYPE (off)),\n \t\t\t   EXPAND_NORMAL);\n \t  emit_cmp_and_jump_insns (r, const0_rtx, EQ, const1_rtx, GET_MODE (r),\n \t\t\t\t   1, lab_false);\n \n-\t  /* [4] Emit code for: addr_rtx = top - off.  */\n+\t  /* [4] Emit code for: addr_rtx = top - off.  On big endian machines,\n+\t     the argument has RSIZE - SIZE bytes of leading padding.  */\n \t  t = build (MINUS_EXPR, TREE_TYPE (top), top, off);\n+\t  if (BYTES_BIG_ENDIAN && rsize > size)\n+\t    t = build (PLUS_EXPR, TREE_TYPE (t), t,\n+\t\t       build_int_2 (rsize - size, 0));\n \t  r = expand_expr (t, addr_rtx, Pmode, EXPAND_NORMAL);\n \t  if (r != addr_rtx)\n \t    emit_move_insn (addr_rtx, r);\n@@ -4285,21 +4302,19 @@ mips_va_arg (tree valist, tree type)\n \n \t  /* [10, 11].\tEmit code to store ovfl in addr_rtx, then\n \t     post-increment ovfl by osize.  On big-endian machines,\n-\t     the argument has OSIZE - RSIZE bytes of leading padding.  */\n+\t     the argument has OSIZE - SIZE bytes of leading padding.  */\n \t  t = build (POSTINCREMENT_EXPR, TREE_TYPE (ovfl), ovfl,\n \t\t     size_int (osize));\n-\t  if (BYTES_BIG_ENDIAN && osize > rsize)\n+\t  if (BYTES_BIG_ENDIAN && osize > size)\n \t    t = build (PLUS_EXPR, TREE_TYPE (t), t,\n-\t\t       build_int_2 (osize - rsize, 0));\n+\t\t       build_int_2 (osize - size, 0));\n \t  r = expand_expr (t, addr_rtx, Pmode, EXPAND_NORMAL);\n \t  if (r != addr_rtx)\n \t    emit_move_insn (addr_rtx, r);\n \n \t  emit_queue();\n \t  emit_label (lab_over);\n \t}\n-      if (BYTES_BIG_ENDIAN && rsize != size)\n-\taddr_rtx = plus_constant (addr_rtx, rsize - size);\n       if (indirect)\n \t{\n \t  addr_rtx = force_reg (Pmode, addr_rtx);"}]}