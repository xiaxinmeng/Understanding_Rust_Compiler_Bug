{"sha": "4ec39494ac756ee9525371d2225f55f18200d8e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGVjMzk0OTRhYzc1NmVlOTUyNTM3MWQyMjI1ZjU1ZjE4MjAwZDhlMA==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2015-09-16T21:25:28Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2015-09-16T21:25:28Z"}, "message": "Move check_global_declaration from toplev.c to cgraphunit.c\n\nUnfortunately, toplev.c is a kitchen sink of things that do not belong anywhere\nin particular. For example, check_global_declarations is only used in\ncgraphunit.c. Moving it there allows us to make it static and remove one call\nto symtab_node::get.\n\ngcc/ChangeLog:\n\n2015-09-16  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\t* toplev.h (check_global_declaration): Remove declaration.\n\t* toplev.c (check_global_declaration): Move to ...\n\t* cgraphunit.c: ... here. Make it static and pass a symtab_node *.\n\t(analyze_functions): Update call.\n\nFrom-SVN: r227835", "tree": {"sha": "b82a31d5d53ebfe4aa79b8cf8362be98cba22d67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b82a31d5d53ebfe4aa79b8cf8362be98cba22d67"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ec39494ac756ee9525371d2225f55f18200d8e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ec39494ac756ee9525371d2225f55f18200d8e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ec39494ac756ee9525371d2225f55f18200d8e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ec39494ac756ee9525371d2225f55f18200d8e0/comments", "author": null, "committer": null, "parents": [{"sha": "ca2fe289df060b0564c52738e17f71e1d23366c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca2fe289df060b0564c52738e17f71e1d23366c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca2fe289df060b0564c52738e17f71e1d23366c0"}], "stats": {"total": 136, "additions": 71, "deletions": 65}, "files": [{"sha": "f2432e252e7ce1ec0c976e7dc04b598982e0fb78", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ec39494ac756ee9525371d2225f55f18200d8e0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ec39494ac756ee9525371d2225f55f18200d8e0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4ec39494ac756ee9525371d2225f55f18200d8e0", "patch": "@@ -1,3 +1,10 @@\n+2015-09-16  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\t* toplev.h (check_global_declaration): Remove declaration.\n+\t* toplev.c (check_global_declaration): Move to ...\n+\t* cgraphunit.c: ... here. Make it static and pass a symtab_node *.\n+\t(analyze_functions): Update call.\n+\n 2015-09-16  David S. Miller  <davem@davemloft.net>\n \n \t* lra-constraints.c (simplify_operand_subreg): Do not assume that"}, {"sha": "5d84246dc8d7a1122f061c9fa2b0b46569f0a908", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 64, "deletions": 1, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ec39494ac756ee9525371d2225f55f18200d8e0/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ec39494ac756ee9525371d2225f55f18200d8e0/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=4ec39494ac756ee9525371d2225f55f18200d8e0", "patch": "@@ -923,6 +923,69 @@ walk_polymorphic_call_targets (hash_set<void *> *reachable_call_targets,\n     }\n }\n \n+/* Issue appropriate warnings for the global declaration DECL.  */\n+\n+static void\n+check_global_declaration (symtab_node *snode)\n+{\n+  tree decl = snode->decl;\n+\n+  /* Warn about any function declared static but not defined.  We don't\n+     warn about variables, because many programs have static variables\n+     that exist only to get some text into the object file.  */\n+  if (TREE_CODE (decl) == FUNCTION_DECL\n+      && DECL_INITIAL (decl) == 0\n+      && DECL_EXTERNAL (decl)\n+      && ! DECL_ARTIFICIAL (decl)\n+      && ! TREE_NO_WARNING (decl)\n+      && ! TREE_PUBLIC (decl)\n+      && (warn_unused_function\n+\t  || snode->referred_to_p (/*include_self=*/false)))\n+    {\n+      if (snode->referred_to_p (/*include_self=*/false))\n+\tpedwarn (input_location, 0, \"%q+F used but never defined\", decl);\n+      else\n+\twarning (OPT_Wunused_function, \"%q+F declared %<static%> but never defined\", decl);\n+      /* This symbol is effectively an \"extern\" declaration now.  */\n+      TREE_PUBLIC (decl) = 1;\n+    }\n+\n+  /* Warn about static fns or vars defined but not used.  */\n+  if (((warn_unused_function && TREE_CODE (decl) == FUNCTION_DECL)\n+       || (((warn_unused_variable && ! TREE_READONLY (decl))\n+\t    || (warn_unused_const_variable && TREE_READONLY (decl)))\n+\t   && TREE_CODE (decl) == VAR_DECL))\n+      && ! DECL_IN_SYSTEM_HEADER (decl)\n+      && ! snode->referred_to_p (/*include_self=*/false)\n+      /* This TREE_USED check is needed in addition to referred_to_p\n+\t above, because the `__unused__' attribute is not being\n+\t considered for referred_to_p.  */\n+      && ! TREE_USED (decl)\n+      /* The TREE_USED bit for file-scope decls is kept in the identifier,\n+\t to handle multiple external decls in different scopes.  */\n+      && ! (DECL_NAME (decl) && TREE_USED (DECL_NAME (decl)))\n+      && ! DECL_EXTERNAL (decl)\n+      && ! DECL_ARTIFICIAL (decl)\n+      && ! DECL_ABSTRACT_ORIGIN (decl)\n+      && ! TREE_PUBLIC (decl)\n+      /* A volatile variable might be used in some non-obvious way.  */\n+      && ! TREE_THIS_VOLATILE (decl)\n+      /* Global register variables must be declared to reserve them.  */\n+      && ! (TREE_CODE (decl) == VAR_DECL && DECL_REGISTER (decl))\n+      /* Global ctors and dtors are called by the runtime.  */\n+      && (TREE_CODE (decl) != FUNCTION_DECL\n+\t  || (!DECL_STATIC_CONSTRUCTOR (decl)\n+\t      && !DECL_STATIC_DESTRUCTOR (decl)))\n+      /* Otherwise, ask the language.  */\n+      && lang_hooks.decls.warn_unused_global (decl))\n+    warning_at (DECL_SOURCE_LOCATION (decl),\n+\t\t(TREE_CODE (decl) == FUNCTION_DECL)\n+\t\t? OPT_Wunused_function\n+\t\t: (TREE_READONLY (decl)\n+\t\t   ? OPT_Wunused_const_variable\n+\t\t   : OPT_Wunused_variable),\n+\t\t\"%qD defined but not used\", decl);\n+}\n \n /* Discover all functions and variables that are trivially needed, analyze\n    them as well as all functions and variables referred by them  */\n@@ -1110,7 +1173,7 @@ analyze_functions (bool first_time)\n     {\n       symtab_node *snode;\n       FOR_EACH_SYMBOL (snode)\n-\tcheck_global_declaration (snode->decl);\n+\tcheck_global_declaration (snode);\n     }\n \n   if (symtab->dump_file)"}, {"sha": "46689ab2860ba1e7f8ead559a756d843fcbb77d6", "filename": "gcc/toplev.c", "status": "modified", "additions": 0, "deletions": 63, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ec39494ac756ee9525371d2225f55f18200d8e0/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ec39494ac756ee9525371d2225f55f18200d8e0/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=4ec39494ac756ee9525371d2225f55f18200d8e0", "patch": "@@ -469,69 +469,6 @@ wrapup_global_declarations (tree *vec, int len)\n   return output_something;\n }\n \n-/* Issue appropriate warnings for the global declaration DECL.  */\n-\n-void\n-check_global_declaration (tree decl)\n-{\n-  /* Warn about any function declared static but not defined.  We don't\n-     warn about variables, because many programs have static variables\n-     that exist only to get some text into the object file.  */\n-  symtab_node *snode = symtab_node::get (decl);\n-  if (TREE_CODE (decl) == FUNCTION_DECL\n-      && DECL_INITIAL (decl) == 0\n-      && DECL_EXTERNAL (decl)\n-      && ! DECL_ARTIFICIAL (decl)\n-      && ! TREE_NO_WARNING (decl)\n-      && ! TREE_PUBLIC (decl)\n-      && (warn_unused_function\n-\t  || snode->referred_to_p (/*include_self=*/false)))\n-    {\n-      if (snode->referred_to_p (/*include_self=*/false))\n-\tpedwarn (input_location, 0, \"%q+F used but never defined\", decl);\n-      else\n-\twarning (OPT_Wunused_function, \"%q+F declared %<static%> but never defined\", decl);\n-      /* This symbol is effectively an \"extern\" declaration now.  */\n-      TREE_PUBLIC (decl) = 1;\n-    }\n-\n-  /* Warn about static fns or vars defined but not used.  */\n-  if (((warn_unused_function && TREE_CODE (decl) == FUNCTION_DECL)\n-       || (((warn_unused_variable && ! TREE_READONLY (decl))\n-\t    || (warn_unused_const_variable && TREE_READONLY (decl)))\n-\t   && TREE_CODE (decl) == VAR_DECL))\n-      && ! DECL_IN_SYSTEM_HEADER (decl)\n-      && ! snode->referred_to_p (/*include_self=*/false)\n-      /* This TREE_USED check is needed in addition to referred_to_p\n-\t above, because the `__unused__' attribute is not being\n-\t considered for referred_to_p.  */\n-      && ! TREE_USED (decl)\n-      /* The TREE_USED bit for file-scope decls is kept in the identifier,\n-\t to handle multiple external decls in different scopes.  */\n-      && ! (DECL_NAME (decl) && TREE_USED (DECL_NAME (decl)))\n-      && ! DECL_EXTERNAL (decl)\n-      && ! DECL_ARTIFICIAL (decl)\n-      && ! DECL_ABSTRACT_ORIGIN (decl)\n-      && ! TREE_PUBLIC (decl)\n-      /* A volatile variable might be used in some non-obvious way.  */\n-      && ! TREE_THIS_VOLATILE (decl)\n-      /* Global register variables must be declared to reserve them.  */\n-      && ! (TREE_CODE (decl) == VAR_DECL && DECL_REGISTER (decl))\n-      /* Global ctors and dtors are called by the runtime.  */\n-      && (TREE_CODE (decl) != FUNCTION_DECL\n-\t  || (!DECL_STATIC_CONSTRUCTOR (decl)\n-\t      && !DECL_STATIC_DESTRUCTOR (decl)))\n-      /* Otherwise, ask the language.  */\n-      && lang_hooks.decls.warn_unused_global (decl))\n-    warning_at (DECL_SOURCE_LOCATION (decl),\n-\t\t(TREE_CODE (decl) == FUNCTION_DECL)\n-\t\t? OPT_Wunused_function\n-\t\t: (TREE_READONLY (decl)\n-\t\t   ? OPT_Wunused_const_variable\n-\t\t   : OPT_Wunused_variable),\n-\t\t\"%qD defined but not used\", decl);\n-}\n-\n /* Compile an entire translation unit.  Write a file of assembly\n    output and various debugging dumps.  */\n "}, {"sha": "e613fec5894fe2c81686579064d9b50a47ff71fe", "filename": "gcc/toplev.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ec39494ac756ee9525371d2225f55f18200d8e0/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ec39494ac756ee9525371d2225f55f18200d8e0/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=4ec39494ac756ee9525371d2225f55f18200d8e0", "patch": "@@ -61,7 +61,6 @@ extern void announce_function (tree);\n extern void wrapup_global_declaration_1 (tree);\n extern bool wrapup_global_declaration_2 (tree);\n extern bool wrapup_global_declarations (tree *, int);\n-extern void check_global_declaration (tree);\n \n extern void global_decl_processing (void);\n "}]}