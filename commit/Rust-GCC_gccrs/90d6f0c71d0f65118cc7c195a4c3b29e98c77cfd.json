{"sha": "90d6f0c71d0f65118cc7c195a4c3b29e98c77cfd", "node_id": "C_kwDOANBUbNoAKDkwZDZmMGM3MWQwZjY1MTE4Y2M3YzE5NWE0YzNiMjllOThjNzdjZmQ", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-12-31T15:59:38Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-01-11T22:41:13Z"}, "message": "gfortran: Introduce gfc_type_abi_kind\n\nThe following patch detects the powerpc64le-linux kind == 16 cases\nand for the -mabi=ieeelongdouble case (no matter whether it is the\nconfigured in default or just option used on the command line) uses\n_r17 or _c17 instead of _r16 or _c17 in the library API names.\n\nFrom what I can see, e.g. calls to sin on real(kind = 16) works fine\nwith or without this patch (we call __builtin_sinl and the backend\nuses rs6000_mangle_decl_assembler_name which ensures __sinieee128\nis called).\n\nWhat is clearly still broken is IO, where for\n  real(kind=16) a\n  a = 1.0\n  print *, a\nend\nwe call\n  _gfortran_transfer_real_write (&dt_parm.0, &a, 16);\nfor both -mabi=ibmlongdouble and -mabi=ieeelongdouble\nI don't remember what was the agreement, do we want\n  _gfortran_transfer_real_write (&dt_parm.0, &a, 17);\nfor the ieeelongdouble case, or some new entrypoint for\nthe abi_kind == 17 real/complex IO?\nAlso, what about kind stored in array descriptors?  Shall we use\nthere the abi_kind or kind?\n\nI guess at least before the IO case is solved there is no point\nin checking the testsuite, too many things will be majorly broken...\n\n2021-12-31  Jakub Jelinek  <jakub@redhat.com>\n\n\t* gfortran.h (gfc_real_info): Add abi_kind member.\n\t(gfc_type_abi_kind): Declare.\n\t* trans-types.c (gfc_init_kinds): Initialize abi_kind.\n\t* intrinsic.c (gfc_type_abi_kind): New function.\n\t(conv_name): Use it.\n\t* iresolve.c (resolve_transformational, gfc_resolve_abs,\n\tgfc_resolve_char_achar, gfc_resolve_acos, gfc_resolve_acosh,\n\tgfc_resolve_aimag, gfc_resolve_and, gfc_resolve_aint, gfc_resolve_all,\n\tgfc_resolve_anint, gfc_resolve_any, gfc_resolve_asin,\n\tgfc_resolve_asinh, gfc_resolve_atan, gfc_resolve_atanh,\n\tgfc_resolve_atan2, gfc_resolve_bessel_n2, gfc_resolve_ceiling,\n\tgfc_resolve_cmplx, gfc_resolve_complex, gfc_resolve_cos,\n\tgfc_resolve_cosh, gfc_resolve_count, gfc_resolve_dble,\n\tgfc_resolve_dim, gfc_resolve_dot_product, gfc_resolve_dprod,\n\tgfc_resolve_exp, gfc_resolve_floor, gfc_resolve_hypot,\n\tgfc_resolve_int, gfc_resolve_int2, gfc_resolve_int8, gfc_resolve_long,\n\tgfc_resolve_log, gfc_resolve_log10, gfc_resolve_logical,\n\tgfc_resolve_matmul, gfc_resolve_minmax, gfc_resolve_maxloc,\n\tgfc_resolve_findloc, gfc_resolve_maxval, gfc_resolve_merge,\n\tgfc_resolve_minloc, gfc_resolve_minval, gfc_resolve_mod,\n\tgfc_resolve_modulo, gfc_resolve_nearest, gfc_resolve_or,\n\tgfc_resolve_real, gfc_resolve_realpart, gfc_resolve_reshape,\n\tgfc_resolve_sign, gfc_resolve_sin, gfc_resolve_sinh, gfc_resolve_sqrt,\n\tgfc_resolve_tan, gfc_resolve_tanh, gfc_resolve_transpose,\n\tgfc_resolve_trigd, gfc_resolve_xor, gfc_resolve_random_number):\n\tLikewise.\n\t* trans-decl.c (gfc_build_intrinsic_function_decls): Likewise.", "tree": {"sha": "1a78ea8c0342d492d5c5c28d1f5fdc7267588c97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a78ea8c0342d492d5c5c28d1f5fdc7267588c97"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90d6f0c71d0f65118cc7c195a4c3b29e98c77cfd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90d6f0c71d0f65118cc7c195a4c3b29e98c77cfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90d6f0c71d0f65118cc7c195a4c3b29e98c77cfd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90d6f0c71d0f65118cc7c195a4c3b29e98c77cfd/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23d11a0adc7dc735634d6a47b9efc13367b08155", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23d11a0adc7dc735634d6a47b9efc13367b08155", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23d11a0adc7dc735634d6a47b9efc13367b08155"}], "stats": {"total": 253, "additions": 177, "deletions": 76}, "files": [{"sha": "41ac6c02ae58d84b9130c0132ae3b165707bbca7", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90d6f0c71d0f65118cc7c195a4c3b29e98c77cfd/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90d6f0c71d0f65118cc7c195a4c3b29e98c77cfd/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=90d6f0c71d0f65118cc7c195a4c3b29e98c77cfd", "patch": "@@ -2645,7 +2645,7 @@ extern gfc_logical_info gfc_logical_kinds[];\n typedef struct\n {\n   mpfr_t epsilon, huge, tiny, subnormal;\n-  int kind, radix, digits, min_exponent, max_exponent;\n+  int kind, abi_kind, radix, digits, min_exponent, max_exponent;\n   int range, precision;\n \n   /* The precision of the type as reported by GET_MODE_PRECISION.  */\n@@ -3501,6 +3501,12 @@ void gfc_intrinsic_init_1 (void);\n void gfc_intrinsic_done_1 (void);\n \n char gfc_type_letter (bt, bool logical_equals_int = false);\n+int gfc_type_abi_kind (bt, int);\n+static inline int\n+gfc_type_abi_kind (gfc_typespec *ts)\n+{\n+  return gfc_type_abi_kind (ts->type, ts->kind);\n+}\n gfc_symbol * gfc_get_intrinsic_sub_symbol (const char *);\n gfc_symbol *gfc_get_intrinsic_function_symbol (gfc_expr *);\n gfc_symbol *gfc_find_intrinsic_symbol (gfc_expr *);"}, {"sha": "a7ecdb401ef903d1605e2b95cc4c2369bf4f37d3", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90d6f0c71d0f65118cc7c195a4c3b29e98c77cfd/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90d6f0c71d0f65118cc7c195a4c3b29e98c77cfd/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=90d6f0c71d0f65118cc7c195a4c3b29e98c77cfd", "patch": "@@ -103,6 +103,27 @@ gfc_type_letter (bt type, bool logical_equals_int)\n }\n \n \n+/* Return kind that should be used for ABI purposes in libgfortran\n+   APIs.  Usually the same as ts->kind, except for BT_REAL/BT_COMPLEX\n+   for IEEE 754 quad format kind 16 where it returns 17.  */\n+\n+int\n+gfc_type_abi_kind (bt type, int kind)\n+{\n+  switch (type)\n+    {\n+    case BT_REAL:\n+    case BT_COMPLEX:\n+      if (kind == 16)\n+\tfor (int i = 0; gfc_real_kinds[i].kind != 0; i++)\n+\t  if (gfc_real_kinds[i].kind == kind)\n+\t    return gfc_real_kinds[i].abi_kind;\n+      return kind;\n+    default:\n+      return kind;\n+    }\n+}\n+\n /* Get a symbol for a resolved name. Note, if needed be, the elemental\n    attribute has be added afterwards.  */\n \n@@ -167,8 +188,8 @@ static const char *\n conv_name (gfc_typespec *from, gfc_typespec *to)\n {\n   return gfc_get_string (\"__convert_%c%d_%c%d\",\n-\t\t\t gfc_type_letter (from->type), from->kind,\n-\t\t\t gfc_type_letter (to->type), to->kind);\n+\t\t\t gfc_type_letter (from->type), gfc_type_abi_kind (from),\n+\t\t\t gfc_type_letter (to->type), gfc_type_abi_kind (to));\n }\n \n "}, {"sha": "97ac4ebb77e735524a6ae7838c808be1c79c6112", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 117, "deletions": 68, "changes": 185, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90d6f0c71d0f65118cc7c195a4c3b29e98c77cfd/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90d6f0c71d0f65118cc7c195a4c3b29e98c77cfd/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=90d6f0c71d0f65118cc7c195a4c3b29e98c77cfd", "patch": "@@ -191,7 +191,8 @@ resolve_transformational (const char *name, gfc_expr *f, gfc_expr *array,\n \n   f->value.function.name\n     = gfc_get_string (PREFIX (\"%s%s_%c%d\"), prefix, name,\n-\t\t      gfc_type_letter (array->ts.type), array->ts.kind);\n+\t\t      gfc_type_letter (array->ts.type),\n+\t\t      gfc_type_abi_kind (&array->ts));\n }\n \n \n@@ -206,7 +207,8 @@ gfc_resolve_abs (gfc_expr *f, gfc_expr *a)\n     f->ts.type = BT_REAL;\n \n   f->value.function.name\n-    = gfc_get_string (\"__abs_%c%d\", gfc_type_letter (a->ts.type), a->ts.kind);\n+    = gfc_get_string (\"__abs_%c%d\", gfc_type_letter (a->ts.type),\n+\t\t      gfc_type_abi_kind (&a->ts));\n }\n \n \n@@ -256,7 +258,8 @@ gfc_resolve_char_achar (gfc_expr *f, gfc_expr *x, gfc_expr *kind,\n \n   f->value.function.name\n     = gfc_get_string (\"__%schar_%d_%c%d\", is_achar ? \"a\" : \"\", f->ts.kind,\n-\t\t      gfc_type_letter (x->ts.type), x->ts.kind);\n+\t\t      gfc_type_letter (x->ts.type),\n+\t\t      gfc_type_abi_kind (&x->ts));\n }\n \n \n@@ -272,7 +275,8 @@ gfc_resolve_acos (gfc_expr *f, gfc_expr *x)\n {\n   f->ts = x->ts;\n   f->value.function.name\n-    = gfc_get_string (\"__acos_%c%d\", gfc_type_letter (x->ts.type), x->ts.kind);\n+    = gfc_get_string (\"__acos_%c%d\", gfc_type_letter (x->ts.type),\n+\t\t      gfc_type_abi_kind (&x->ts));\n }\n \n \n@@ -282,7 +286,7 @@ gfc_resolve_acosh (gfc_expr *f, gfc_expr *x)\n   f->ts = x->ts;\n   f->value.function.name\n     = gfc_get_string (\"__acosh_%c%d\", gfc_type_letter (x->ts.type),\n-\t\t      x->ts.kind);\n+\t\t      gfc_type_abi_kind (&x->ts));\n }\n \n \n@@ -293,7 +297,7 @@ gfc_resolve_aimag (gfc_expr *f, gfc_expr *x)\n   f->ts.kind = x->ts.kind;\n   f->value.function.name\n     = gfc_get_string (\"__aimag_%c%d\", gfc_type_letter (x->ts.type),\n-\t\t      x->ts.kind);\n+\t\t      gfc_type_abi_kind (&x->ts));\n }\n \n \n@@ -312,7 +316,8 @@ gfc_resolve_and (gfc_expr *f, gfc_expr *i, gfc_expr *j)\n     }\n \n   f->value.function.name\n-    = gfc_get_string (\"__and_%c%d\", gfc_type_letter (i->ts.type), f->ts.kind);\n+    = gfc_get_string (\"__and_%c%d\", gfc_type_letter (i->ts.type),\n+\t\t      gfc_type_abi_kind (&f->ts));\n }\n \n \n@@ -334,7 +339,8 @@ gfc_resolve_aint (gfc_expr *f, gfc_expr *a, gfc_expr *kind)\n   /* The resolved name is only used for specific intrinsics where\n      the return kind is the same as the arg kind.  */\n   f->value.function.name\n-    = gfc_get_string (\"__aint_%c%d\", gfc_type_letter (a->ts.type), a->ts.kind);\n+    = gfc_get_string (\"__aint_%c%d\", gfc_type_letter (a->ts.type),\n+\t\t      gfc_type_abi_kind (&a->ts));\n }\n \n \n@@ -359,7 +365,7 @@ gfc_resolve_all (gfc_expr *f, gfc_expr *mask, gfc_expr *dim)\n \n   f->value.function.name\n     = gfc_get_string (PREFIX (\"all_%c%d\"), gfc_type_letter (mask->ts.type),\n-\t\t      mask->ts.kind);\n+\t\t      gfc_type_abi_kind (&mask->ts));\n }\n \n \n@@ -383,7 +389,7 @@ gfc_resolve_anint (gfc_expr *f, gfc_expr *a, gfc_expr *kind)\n      the return kind is the same as the arg kind.  */\n   f->value.function.name\n     = gfc_get_string (\"__anint_%c%d\", gfc_type_letter (a->ts.type),\n-\t\t      a->ts.kind);\n+\t\t      gfc_type_abi_kind (&a->ts));\n }\n \n \n@@ -408,7 +414,7 @@ gfc_resolve_any (gfc_expr *f, gfc_expr *mask, gfc_expr *dim)\n \n   f->value.function.name\n     = gfc_get_string (PREFIX (\"any_%c%d\"), gfc_type_letter (mask->ts.type),\n-\t\t      mask->ts.kind);\n+\t\t      gfc_type_abi_kind (&mask->ts));\n }\n \n \n@@ -417,7 +423,8 @@ gfc_resolve_asin (gfc_expr *f, gfc_expr *x)\n {\n   f->ts = x->ts;\n   f->value.function.name\n-    = gfc_get_string (\"__asin_%c%d\", gfc_type_letter (x->ts.type), x->ts.kind);\n+    = gfc_get_string (\"__asin_%c%d\", gfc_type_letter (x->ts.type),\n+\t\t      gfc_type_abi_kind (&x->ts));\n }\n \n void\n@@ -426,15 +433,16 @@ gfc_resolve_asinh (gfc_expr *f, gfc_expr *x)\n   f->ts = x->ts;\n   f->value.function.name\n     = gfc_get_string (\"__asinh_%c%d\", gfc_type_letter (x->ts.type),\n-\t\t      x->ts.kind);\n+\t\t      gfc_type_abi_kind (&x->ts));\n }\n \n void\n gfc_resolve_atan (gfc_expr *f, gfc_expr *x)\n {\n   f->ts = x->ts;\n   f->value.function.name\n-    = gfc_get_string (\"__atan_%c%d\", gfc_type_letter (x->ts.type), x->ts.kind);\n+    = gfc_get_string (\"__atan_%c%d\", gfc_type_letter (x->ts.type),\n+\t\t      gfc_type_abi_kind (&x->ts));\n }\n \n void\n@@ -443,7 +451,7 @@ gfc_resolve_atanh (gfc_expr *f, gfc_expr *x)\n   f->ts = x->ts;\n   f->value.function.name\n     = gfc_get_string (\"__atanh_%c%d\", gfc_type_letter (x->ts.type),\n-\t\t      x->ts.kind);\n+\t\t      gfc_type_abi_kind (&x->ts));\n }\n \n void\n@@ -452,7 +460,7 @@ gfc_resolve_atan2 (gfc_expr *f, gfc_expr *x, gfc_expr *y ATTRIBUTE_UNUSED)\n   f->ts = x->ts;\n   f->value.function.name\n     = gfc_get_string (\"__atan2_%c%d\", gfc_type_letter (x->ts.type),\n-\t\t      x->ts.kind);\n+\t\t      gfc_type_abi_kind (&x->ts));\n }\n \n \n@@ -507,10 +515,10 @@ gfc_resolve_bessel_n2 (gfc_expr *f, gfc_expr *n1, gfc_expr *n2, gfc_expr *x)\n \n   if (f->value.function.isym->id == GFC_ISYM_JN2)\n     f->value.function.name = gfc_get_string (PREFIX (\"bessel_jn_r%d\"),\n-\t\t\t\t\t     f->ts.kind);\n+\t\t\t\t\t     gfc_type_abi_kind (&f->ts));\n   else\n     f->value.function.name = gfc_get_string (PREFIX (\"bessel_yn_r%d\"),\n-\t\t\t\t\t     f->ts.kind);\n+\t\t\t\t\t     gfc_type_abi_kind (&f->ts));\n }\n \n \n@@ -546,7 +554,8 @@ gfc_resolve_ceiling (gfc_expr *f, gfc_expr *a, gfc_expr *kind)\n \t     ? gfc_default_integer_kind : mpz_get_si (kind->value.integer);\n   f->value.function.name\n     = gfc_get_string (\"__ceiling_%d_%c%d\", f->ts.kind,\n-\t\t      gfc_type_letter (a->ts.type), a->ts.kind);\n+\t\t      gfc_type_letter (a->ts.type),\n+\t\t      gfc_type_abi_kind (&a->ts));\n }\n \n \n@@ -618,12 +627,15 @@ gfc_resolve_cmplx (gfc_expr *f, gfc_expr *x, gfc_expr *y, gfc_expr *kind)\n   if (y == NULL)\n     f->value.function.name\n       = gfc_get_string (\"__cmplx0_%d_%c%d\", f->ts.kind,\n-\t\t\tgfc_type_letter (x->ts.type), x->ts.kind);\n+\t\t\tgfc_type_letter (x->ts.type),\n+\t\t\tgfc_type_abi_kind (&x->ts));\n   else\n     f->value.function.name\n       = gfc_get_string (\"__cmplx1_%d_%c%d_%c%d\", f->ts.kind,\n-\t\t\tgfc_type_letter (x->ts.type), x->ts.kind,\n-\t\t\tgfc_type_letter (y->ts.type), y->ts.kind);\n+\t\t\tgfc_type_letter (x->ts.type),\n+\t\t\tgfc_type_abi_kind (&x->ts),\n+\t\t\tgfc_type_letter (y->ts.type),\n+\t\t\tgfc_type_abi_kind (&y->ts));\n }\n \n \n@@ -659,8 +671,10 @@ gfc_resolve_complex (gfc_expr *f, gfc_expr *x, gfc_expr *y)\n   f->ts.kind = kind;\n   f->value.function.name\n     = gfc_get_string (\"__cmplx1_%d_%c%d_%c%d\", f->ts.kind,\n-\t\t      gfc_type_letter (x->ts.type), x->ts.kind,\n-\t\t      gfc_type_letter (y->ts.type), y->ts.kind);\n+\t\t      gfc_type_letter (x->ts.type),\n+\t\t      gfc_type_abi_kind (&x->ts),\n+\t\t      gfc_type_letter (y->ts.type),\n+\t\t      gfc_type_abi_kind (&y->ts));\n }\n \n \n@@ -677,7 +691,8 @@ gfc_resolve_cos (gfc_expr *f, gfc_expr *x)\n {\n   f->ts = x->ts;\n   f->value.function.name\n-    = gfc_get_string (\"__cos_%c%d\", gfc_type_letter (x->ts.type), x->ts.kind);\n+    = gfc_get_string (\"__cos_%c%d\", gfc_type_letter (x->ts.type),\n+\t\t      gfc_type_abi_kind (&x->ts));\n }\n \n \n@@ -686,7 +701,8 @@ gfc_resolve_cosh (gfc_expr *f, gfc_expr *x)\n {\n   f->ts = x->ts;\n   f->value.function.name\n-    = gfc_get_string (\"__cosh_%c%d\", gfc_type_letter (x->ts.type), x->ts.kind);\n+    = gfc_get_string (\"__cosh_%c%d\", gfc_type_letter (x->ts.type),\n+\t\t      gfc_type_abi_kind (&x->ts));\n }\n \n \n@@ -709,7 +725,7 @@ gfc_resolve_count (gfc_expr *f, gfc_expr *mask, gfc_expr *dim, gfc_expr *kind)\n   resolve_mask_arg (mask);\n \n   f->value.function.name\n-    = gfc_get_string (PREFIX (\"count_%d_%c\"), f->ts.kind,\n+    = gfc_get_string (PREFIX (\"count_%d_%c\"), gfc_type_abi_kind (&f->ts),\n \t\t      gfc_type_letter (mask->ts.type));\n }\n \n@@ -810,7 +826,8 @@ gfc_resolve_dble (gfc_expr *f, gfc_expr *a)\n   f->ts.type = BT_REAL;\n   f->ts.kind = gfc_default_double_kind;\n   f->value.function.name\n-    = gfc_get_string (\"__dble_%c%d\", gfc_type_letter (a->ts.type), a->ts.kind);\n+    = gfc_get_string (\"__dble_%c%d\", gfc_type_letter (a->ts.type),\n+\t\t      gfc_type_abi_kind (&a->ts));\n }\n \n \n@@ -832,7 +849,8 @@ gfc_resolve_dim (gfc_expr *f, gfc_expr *a, gfc_expr *p)\n     }\n \n   f->value.function.name\n-    = gfc_get_string (\"__dim_%c%d\", gfc_type_letter (f->ts.type), f->ts.kind);\n+    = gfc_get_string (\"__dim_%c%d\", gfc_type_letter (f->ts.type),\n+\t\t      gfc_type_abi_kind (&f->ts));\n }\n \n \n@@ -850,7 +868,8 @@ gfc_resolve_dot_product (gfc_expr *f, gfc_expr *a, gfc_expr *b)\n   f->ts = temp.ts;\n   f->value.function.name\n     = gfc_get_string (PREFIX (\"dot_product_%c%d\"),\n-\t\t      gfc_type_letter (f->ts.type), f->ts.kind);\n+\t\t      gfc_type_letter (f->ts.type),\n+\t\t      gfc_type_abi_kind (&f->ts));\n }\n \n \n@@ -860,7 +879,8 @@ gfc_resolve_dprod (gfc_expr *f, gfc_expr *a ATTRIBUTE_UNUSED,\n {\n   f->ts.kind = gfc_default_double_kind;\n   f->ts.type = BT_REAL;\n-  f->value.function.name = gfc_get_string (\"__dprod_r%d\", f->ts.kind);\n+  f->value.function.name = gfc_get_string (\"__dprod_r%d\",\n+\t\t\t\t\t   gfc_type_abi_kind (&f->ts));\n }\n \n \n@@ -951,7 +971,8 @@ gfc_resolve_exp (gfc_expr *f, gfc_expr *x)\n {\n   f->ts = x->ts;\n   f->value.function.name\n-    = gfc_get_string (\"__exp_%c%d\", gfc_type_letter (x->ts.type), x->ts.kind);\n+    = gfc_get_string (\"__exp_%c%d\", gfc_type_letter (x->ts.type),\n+\t\t      gfc_type_abi_kind (&x->ts));\n }\n \n \n@@ -1044,7 +1065,8 @@ gfc_resolve_floor (gfc_expr *f, gfc_expr *a, gfc_expr *kind)\n \t     ? gfc_default_integer_kind : mpz_get_si (kind->value.integer);\n   f->value.function.name\n     = gfc_get_string (\"__floor%d_%c%d\", f->ts.kind,\n-\t\t      gfc_type_letter (a->ts.type), a->ts.kind);\n+\t\t      gfc_type_letter (a->ts.type),\n+\t\t      gfc_type_abi_kind (&a->ts));\n }\n \n \n@@ -1135,7 +1157,8 @@ void\n gfc_resolve_hypot (gfc_expr *f, gfc_expr *x, gfc_expr *y ATTRIBUTE_UNUSED)\n {\n   f->ts = x->ts;\n-  f->value.function.name = gfc_get_string (\"__hypot_r%d\", x->ts.kind);\n+  f->value.function.name = gfc_get_string (\"__hypot_r%d\",\n+\t\t\t\t\t   gfc_type_abi_kind (&x->ts));\n }\n \n \n@@ -1311,7 +1334,8 @@ gfc_resolve_int (gfc_expr *f, gfc_expr *a, gfc_expr *kind)\n \t     ? gfc_default_integer_kind : mpz_get_si (kind->value.integer);\n   f->value.function.name\n     = gfc_get_string (\"__int_%d_%c%d\", f->ts.kind,\n-\t\t      gfc_type_letter (a->ts.type), a->ts.kind);\n+\t\t      gfc_type_letter (a->ts.type),\n+\t\t      gfc_type_abi_kind (&a->ts));\n }\n \n \n@@ -1322,7 +1346,8 @@ gfc_resolve_int2 (gfc_expr *f, gfc_expr *a)\n   f->ts.kind = 2;\n   f->value.function.name\n     = gfc_get_string (\"__int_%d_%c%d\", f->ts.kind,\n-\t\t      gfc_type_letter (a->ts.type), a->ts.kind);\n+\t\t      gfc_type_letter (a->ts.type),\n+\t\t      gfc_type_abi_kind (&a->ts));\n }\n \n \n@@ -1333,7 +1358,8 @@ gfc_resolve_int8 (gfc_expr *f, gfc_expr *a)\n   f->ts.kind = 8;\n   f->value.function.name\n     = gfc_get_string (\"__int_%d_%c%d\", f->ts.kind,\n-\t\t      gfc_type_letter (a->ts.type), a->ts.kind);\n+\t\t      gfc_type_letter (a->ts.type),\n+\t\t      gfc_type_abi_kind (&a->ts));\n }\n \n \n@@ -1344,7 +1370,8 @@ gfc_resolve_long (gfc_expr *f, gfc_expr *a)\n   f->ts.kind = 4;\n   f->value.function.name\n     = gfc_get_string (\"__int_%d_%c%d\", f->ts.kind,\n-\t\t      gfc_type_letter (a->ts.type), a->ts.kind);\n+\t\t      gfc_type_letter (a->ts.type),\n+\t\t      gfc_type_abi_kind (&a->ts));\n }\n \n \n@@ -1498,7 +1525,8 @@ gfc_resolve_log (gfc_expr *f, gfc_expr *x)\n {\n   f->ts = x->ts;\n   f->value.function.name\n-    = gfc_get_string (\"__log_%c%d\", gfc_type_letter (x->ts.type), x->ts.kind);\n+    = gfc_get_string (\"__log_%c%d\", gfc_type_letter (x->ts.type),\n+\t\t      gfc_type_abi_kind (&x->ts));\n }\n \n \n@@ -1508,7 +1536,7 @@ gfc_resolve_log10 (gfc_expr *f, gfc_expr *x)\n   f->ts = x->ts;\n   f->value.function.name\n     = gfc_get_string (\"__log10_%c%d\", gfc_type_letter (x->ts.type),\n-\t\t      x->ts.kind);\n+\t\t      gfc_type_abi_kind (&x->ts));\n }\n \n \n@@ -1522,7 +1550,8 @@ gfc_resolve_logical (gfc_expr *f, gfc_expr *a, gfc_expr *kind)\n \n   f->value.function.name\n     = gfc_get_string (\"__logical_%d_%c%d\", f->ts.kind,\n-\t\t      gfc_type_letter (a->ts.type), a->ts.kind);\n+\t\t      gfc_type_letter (a->ts.type),\n+\t\t      gfc_type_abi_kind (&a->ts));\n }\n \n \n@@ -1579,7 +1608,7 @@ gfc_resolve_matmul (gfc_expr *f, gfc_expr *a, gfc_expr *b)\n \n   f->value.function.name\n     = gfc_get_string (PREFIX (\"matmul_%c%d\"), gfc_type_letter (f->ts.type),\n-\t\t      f->ts.kind);\n+\t\t      gfc_type_abi_kind (&f->ts));\n }\n \n \n@@ -1605,7 +1634,8 @@ gfc_resolve_minmax (const char *name, gfc_expr *f, gfc_actual_arglist *args)\n     }\n \n   f->value.function.name\n-    = gfc_get_string (name, gfc_type_letter (f->ts.type), f->ts.kind);\n+    = gfc_get_string (name, gfc_type_letter (f->ts.type),\n+\t\t      gfc_type_abi_kind (&f->ts));\n }\n \n \n@@ -1689,7 +1719,8 @@ gfc_resolve_maxloc (gfc_expr *f, gfc_expr *array, gfc_expr *dim,\n \n   f->value.function.name\n     = gfc_get_string (PREFIX (\"%s%d_%d_%c%d\"), name, d_num, f->ts.kind,\n-\t\t      gfc_type_letter (array->ts.type), array->ts.kind);\n+\t\t      gfc_type_letter (array->ts.type),\n+\t\t      gfc_type_abi_kind (&array->ts));\n \n   if (kind)\n     fkind = mpz_get_si (kind->value.integer);\n@@ -1806,7 +1837,8 @@ gfc_resolve_findloc (gfc_expr *f, gfc_expr *array, gfc_expr *value,\n \n   f->value.function.name\n     = gfc_get_string (PREFIX (\"%s%d_%c%d\"), name, d_num,\n-\t\t      gfc_type_letter (array->ts.type, true), array->ts.kind);\n+\t\t      gfc_type_letter (array->ts.type, true),\n+\t\t      gfc_type_abi_kind (&array->ts));\n \n   /* We only have a single library function, so we need to convert\n      here.  If the function is resolved from within a convert\n@@ -1868,11 +1900,13 @@ gfc_resolve_maxval (gfc_expr *f, gfc_expr *array, gfc_expr *dim,\n   if (array->ts.type != BT_CHARACTER)\n     f->value.function.name\n       = gfc_get_string (PREFIX (\"%s_%c%d\"), name,\n-\t\t\tgfc_type_letter (array->ts.type), array->ts.kind);\n+\t\t\tgfc_type_letter (array->ts.type),\n+\t\t\tgfc_type_abi_kind (&array->ts));\n   else\n     f->value.function.name\n       = gfc_get_string (PREFIX (\"%s%d_%c%d\"), name, f->rank != 0,\n-\t\t\tgfc_type_letter (array->ts.type), array->ts.kind);     \n+\t\t\tgfc_type_letter (array->ts.type),\n+\t\t\tgfc_type_abi_kind (&array->ts));\n }\n \n \n@@ -1926,7 +1960,7 @@ gfc_resolve_merge (gfc_expr *f, gfc_expr *tsource,\n   f->ts = tsource->ts;\n   f->value.function.name\n     = gfc_get_string (\"__merge_%c%d\", gfc_type_letter (tsource->ts.type),\n-\t\t      tsource->ts.kind);\n+\t\t      gfc_type_abi_kind (&tsource->ts));\n }\n \n \n@@ -2017,7 +2051,8 @@ gfc_resolve_minloc (gfc_expr *f, gfc_expr *array, gfc_expr *dim,\n \n   f->value.function.name\n     = gfc_get_string (PREFIX (\"%s%d_%d_%c%d\"), name, d_num, f->ts.kind,\n-\t\t      gfc_type_letter (array->ts.type), array->ts.kind);\n+\t\t      gfc_type_letter (array->ts.type),\n+\t\t      gfc_type_abi_kind (&array->ts));\n \n   if (fkind != f->ts.kind)\n     {\n@@ -2082,11 +2117,13 @@ gfc_resolve_minval (gfc_expr *f, gfc_expr *array, gfc_expr *dim,\n   if (array->ts.type != BT_CHARACTER)\n     f->value.function.name\n       = gfc_get_string (PREFIX (\"%s_%c%d\"), name,\n-\t\t\tgfc_type_letter (array->ts.type), array->ts.kind);\n+\t\t\tgfc_type_letter (array->ts.type),\n+\t\t\tgfc_type_abi_kind (&array->ts));\n   else\n     f->value.function.name\n       = gfc_get_string (PREFIX (\"%s%d_%c%d\"), name, f->rank != 0,\n-\t\t\tgfc_type_letter (array->ts.type), array->ts.kind);     \n+\t\t\tgfc_type_letter (array->ts.type),\n+\t\t\tgfc_type_abi_kind (&array->ts));\n }\n \n \n@@ -2108,7 +2145,8 @@ gfc_resolve_mod (gfc_expr *f, gfc_expr *a, gfc_expr *p)\n     }\n \n   f->value.function.name\n-    = gfc_get_string (\"__mod_%c%d\", gfc_type_letter (f->ts.type), f->ts.kind);\n+    = gfc_get_string (\"__mod_%c%d\", gfc_type_letter (f->ts.type),\n+\t\t      gfc_type_abi_kind (&f->ts));\n }\n \n \n@@ -2131,7 +2169,7 @@ gfc_resolve_modulo (gfc_expr *f, gfc_expr *a, gfc_expr *p)\n \n   f->value.function.name\n     = gfc_get_string (\"__modulo_%c%d\", gfc_type_letter (f->ts.type),\n-\t\t      f->ts.kind);\n+\t\t      gfc_type_abi_kind (&f->ts));\n }\n \n void\n@@ -2143,7 +2181,7 @@ gfc_resolve_nearest (gfc_expr *f, gfc_expr *a, gfc_expr *p)\n   f->ts = a->ts;\n   f->value.function.name\n     = gfc_get_string (\"__nearest_%c%d\", gfc_type_letter (a->ts.type),\n-\t\t      a->ts.kind);\n+\t\t      gfc_type_abi_kind (&a->ts));\n }\n \n void\n@@ -2187,7 +2225,8 @@ gfc_resolve_or (gfc_expr *f, gfc_expr *i, gfc_expr *j)\n     }\n \n   f->value.function.name\n-    = gfc_get_string (\"__or_%c%d\", gfc_type_letter (i->ts.type), f->ts.kind);\n+    = gfc_get_string (\"__or_%c%d\", gfc_type_letter (i->ts.type),\n+\t\t      gfc_type_abi_kind (&f->ts));\n }\n \n \n@@ -2265,7 +2304,8 @@ gfc_resolve_real (gfc_expr *f, gfc_expr *a, gfc_expr *kind)\n \n   f->value.function.name\n     = gfc_get_string (\"__real_%d_%c%d\", f->ts.kind,\n-\t\t      gfc_type_letter (a->ts.type), a->ts.kind);\n+\t\t      gfc_type_letter (a->ts.type),\n+\t\t      gfc_type_abi_kind (&a->ts));\n }\n \n \n@@ -2276,7 +2316,8 @@ gfc_resolve_realpart (gfc_expr *f, gfc_expr *a)\n   f->ts.kind = a->ts.kind;\n   f->value.function.name\n     = gfc_get_string (\"__real_%d_%c%d\", f->ts.kind,\n-\t\t      gfc_type_letter (a->ts.type), a->ts.kind);\n+\t\t      gfc_type_letter (a->ts.type),\n+\t\t      gfc_type_abi_kind (&a->ts));\n }\n \n \n@@ -2361,7 +2402,7 @@ gfc_resolve_reshape (gfc_expr *f, gfc_expr *source, gfc_expr *shape,\n \tf->value.function.name\n \t  = gfc_get_string (PREFIX (\"reshape_%c%d\"),\n \t\t\t    gfc_type_letter (source->ts.type),\n-\t\t\t    source->ts.kind);\n+\t\t\t    gfc_type_abi_kind (&source->ts));\n       else if (source->ts.type == BT_CHARACTER)\n \tf->value.function.name = gfc_get_string (PREFIX (\"reshape_char%d\"),\n \t\t\t\t\t\t kind);\n@@ -2506,7 +2547,8 @@ gfc_resolve_sign (gfc_expr *f, gfc_expr *a, gfc_expr *b ATTRIBUTE_UNUSED)\n {\n   f->ts = a->ts;\n   f->value.function.name\n-    = gfc_get_string (\"__sign_%c%d\", gfc_type_letter (a->ts.type), a->ts.kind);\n+    = gfc_get_string (\"__sign_%c%d\", gfc_type_letter (a->ts.type),\n+\t\t      gfc_type_abi_kind (&a->ts));\n }\n \n \n@@ -2536,7 +2578,8 @@ gfc_resolve_sin (gfc_expr *f, gfc_expr *x)\n {\n   f->ts = x->ts;\n   f->value.function.name\n-    = gfc_get_string (\"__sin_%c%d\", gfc_type_letter (x->ts.type), x->ts.kind);\n+    = gfc_get_string (\"__sin_%c%d\", gfc_type_letter (x->ts.type),\n+\t\t      gfc_type_abi_kind (&x->ts));\n }\n \n \n@@ -2545,7 +2588,8 @@ gfc_resolve_sinh (gfc_expr *f, gfc_expr *x)\n {\n   f->ts = x->ts;\n   f->value.function.name\n-    = gfc_get_string (\"__sinh_%c%d\", gfc_type_letter (x->ts.type), x->ts.kind);\n+    = gfc_get_string (\"__sinh_%c%d\", gfc_type_letter (x->ts.type),\n+\t\t      gfc_type_abi_kind (&x->ts));\n }\n \n \n@@ -2639,7 +2683,8 @@ gfc_resolve_sqrt (gfc_expr *f, gfc_expr *x)\n {\n   f->ts = x->ts;\n   f->value.function.name\n-    = gfc_get_string (\"__sqrt_%c%d\", gfc_type_letter (x->ts.type), x->ts.kind);\n+    = gfc_get_string (\"__sqrt_%c%d\", gfc_type_letter (x->ts.type),\n+\t\t      gfc_type_abi_kind (&x->ts));\n }\n \n \n@@ -2803,7 +2848,8 @@ gfc_resolve_tan (gfc_expr *f, gfc_expr *x)\n {\n   f->ts = x->ts;\n   f->value.function.name\n-    = gfc_get_string (\"__tan_%c%d\", gfc_type_letter (x->ts.type), x->ts.kind);\n+    = gfc_get_string (\"__tan_%c%d\", gfc_type_letter (x->ts.type),\n+\t\t      gfc_type_abi_kind (&x->ts));\n }\n \n \n@@ -2812,7 +2858,8 @@ gfc_resolve_tanh (gfc_expr *f, gfc_expr *x)\n {\n   f->ts = x->ts;\n   f->value.function.name\n-    = gfc_get_string (\"__tanh_%c%d\", gfc_type_letter (x->ts.type), x->ts.kind);\n+    = gfc_get_string (\"__tanh_%c%d\", gfc_type_letter (x->ts.type),\n+\t\t      gfc_type_abi_kind (&x->ts));\n }\n \n \n@@ -3012,7 +3059,7 @@ gfc_resolve_transpose (gfc_expr *f, gfc_expr *matrix)\n \t  f->value.function.name\n \t    = gfc_get_string (PREFIX (\"transpose_%c%d\"),\n \t\t\t      gfc_type_letter (matrix->ts.type),\n-\t\t\t      matrix->ts.kind);\n+\t\t\t      gfc_type_abi_kind (&matrix->ts));\n \t  break;\n \n \tcase BT_INTEGER:\n@@ -3060,7 +3107,8 @@ gfc_resolve_trigd (gfc_expr *f, gfc_expr *x)\n   f->ts = x->ts;\n   f->value.function.name\n     = gfc_get_string (PREFIX (\"%s_%c%d\"), f->value.function.isym->name,\n-\t\t      gfc_type_letter (x->ts.type), x->ts.kind);\n+\t\t      gfc_type_letter (x->ts.type),\n+\t\t      gfc_type_abi_kind (&x->ts));\n }\n \n \n@@ -3188,7 +3236,8 @@ gfc_resolve_xor (gfc_expr *f, gfc_expr *i, gfc_expr *j)\n     }\n \n   f->value.function.name\n-    = gfc_get_string (\"__xor_%c%d\", gfc_type_letter (i->ts.type), f->ts.kind);\n+    = gfc_get_string (\"__xor_%c%d\", gfc_type_letter (i->ts.type),\n+\t\t      gfc_type_abi_kind (&f->ts));\n }\n \n \n@@ -3326,7 +3375,7 @@ gfc_resolve_random_number (gfc_code *c)\n   const char *name;\n   int kind;\n \n-  kind = c->ext.actual->expr->ts.kind;\n+  kind = gfc_type_abi_kind (&c->ext.actual->expr->ts);\n   if (c->ext.actual->expr->rank == 0)\n     name = gfc_get_string (PREFIX (\"random_r%d\"), kind);\n   else"}, {"sha": "08eaa5a966b9eee6fe8ac8ef1dde48227c8c880b", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90d6f0c71d0f65118cc7c195a4c3b29e98c77cfd/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90d6f0c71d0f65118cc7c195a4c3b29e98c77cfd/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=90d6f0c71d0f65118cc7c195a4c3b29e98c77cfd", "patch": "@@ -3602,8 +3602,9 @@ gfc_build_intrinsic_function_decls (void)\n \t    rtype = gfc_get_real_type (rkinds[rkind]);\n \t    if (rtype && itype)\n \t      {\n-\t\tsprintf (name, PREFIX(\"pow_r%d_i%d\"), rkinds[rkind],\n-\t\t\tikinds[ikind]);\n+\t\tsprintf (name, PREFIX(\"pow_r%d_i%d\"),\n+\t\t\t gfc_type_abi_kind (BT_REAL, rkinds[rkind]),\n+\t\t\t ikinds[ikind]);\n \t\tgfor_fndecl_math_powi[rkind][ikind].real =\n \t\t  gfc_build_library_function_decl (get_identifier (name),\n \t\t    rtype, 2, rtype, itype);\n@@ -3614,8 +3615,9 @@ gfc_build_intrinsic_function_decls (void)\n \t    ctype = gfc_get_complex_type (rkinds[rkind]);\n \t    if (ctype && itype)\n \t      {\n-\t\tsprintf (name, PREFIX(\"pow_c%d_i%d\"), rkinds[rkind],\n-\t\t\tikinds[ikind]);\n+\t\tsprintf (name, PREFIX(\"pow_c%d_i%d\"),\n+\t\t\t gfc_type_abi_kind (BT_REAL, rkinds[rkind]),\n+\t\t\t ikinds[ikind]);\n \t\tgfor_fndecl_math_powi[rkind][ikind].cmplx =\n \t\t  gfc_build_library_function_decl (get_identifier (name),\n \t\t    ctype, 2,ctype, itype);"}, {"sha": "147e825bac9b908229fdd97b6833cf1c398faa8a", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90d6f0c71d0f65118cc7c195a4c3b29e98c77cfd/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90d6f0c71d0f65118cc7c195a4c3b29e98c77cfd/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=90d6f0c71d0f65118cc7c195a4c3b29e98c77cfd", "patch": "@@ -363,6 +363,8 @@ gfc_init_kinds (void)\n   int i_index, r_index, kind;\n   bool saw_i4 = false, saw_i8 = false;\n   bool saw_r4 = false, saw_r8 = false, saw_r10 = false, saw_r16 = false;\n+  scalar_mode r16_mode = QImode;\n+  scalar_mode composite_mode = QImode;\n \n   i_index = 0;\n   FOR_EACH_MODE_IN_CLASS (int_mode_iter, MODE_INT)\n@@ -428,6 +430,10 @@ gfc_init_kinds (void)\n       if (!targetm.scalar_mode_supported_p (mode))\n \tcontinue;\n \n+      if (MODE_COMPOSITE_P (mode)\n+\t  && (GET_MODE_PRECISION (mode) + 7) / 8 == 16)\n+\tcomposite_mode = mode;\n+\n       /* Only let float, double, long double and TFmode go through.\n \t Runtime support for others is not provided, so they would be\n \t useless.  */\n@@ -471,14 +477,18 @@ gfc_init_kinds (void)\n       if (kind == 10)\n \tsaw_r10 = true;\n       if (kind == 16)\n-\tsaw_r16 = true;\n+\t{\n+\t  saw_r16 = true;\n+\t  r16_mode = mode;\n+\t}\n \n       /* Careful we don't stumble a weird internal mode.  */\n       gcc_assert (r_index <= 0 || gfc_real_kinds[r_index-1].kind != kind);\n       /* Or have too many modes for the allocated space.  */\n       gcc_assert (r_index != MAX_REAL_KINDS);\n \n       gfc_real_kinds[r_index].kind = kind;\n+      gfc_real_kinds[r_index].abi_kind = kind;\n       gfc_real_kinds[r_index].radix = fmt->b;\n       gfc_real_kinds[r_index].digits = fmt->p;\n       gfc_real_kinds[r_index].min_exponent = fmt->emin;\n@@ -496,6 +506,19 @@ gfc_init_kinds (void)\n       r_index += 1;\n     }\n \n+  /* Detect the powerpc64le-linux case with -mabi=ieeelongdouble, where\n+     the long double type is non-MODE_COMPOSITE_P TFmode but one can use\n+     -mabi=ibmlongdouble too and get MODE_COMPOSITE_P TFmode with the same\n+     precision.  For libgfortran calls pretend the IEEE 754 quad TFmode has\n+     kind 17 rather than 16 and use kind 16 for the IBM extended format\n+     TFmode.  */\n+  if (composite_mode != QImode && saw_r16 && !MODE_COMPOSITE_P (r16_mode))\n+    {\n+      for (int i = 0; i < r_index; ++i)\n+\tif (gfc_real_kinds[i].kind == 16)\n+\t  gfc_real_kinds[i].abi_kind = 17;\n+    }\n+\n   /* Choose the default integer kind.  We choose 4 unless the user directs us\n      otherwise.  Even if the user specified that the default integer kind is 8,\n      the numeric storage size is not 64 bits.  In this case, a warning will be"}]}