{"sha": "b1bbe7328c3d29e8d3f322837c966da663471d8c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjFiYmU3MzI4YzNkMjllOGQzZjMyMjgzN2M5NjZkYTY2MzQ3MWQ4Yw==", "commit": {"author": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "1996-10-24T00:40:58Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "1996-10-24T00:40:58Z"}, "message": "sh.h (CONST_DOUBLE_OK_FOR_LETTER_P): always true for 'F' .\n\n        * sh.h (CONST_DOUBLE_OK_FOR_LETTER_P): always true for 'F' .\n        (LEGITIMATE_CONSTANT_P): accept SFmode and DFmode.\n\nFrom-SVN: r13020", "tree": {"sha": "dbc1f4046f2265b26b47f0d2fb8d488a903e867d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dbc1f4046f2265b26b47f0d2fb8d488a903e867d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1bbe7328c3d29e8d3f322837c966da663471d8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1bbe7328c3d29e8d3f322837c966da663471d8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1bbe7328c3d29e8d3f322837c966da663471d8c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1bbe7328c3d29e8d3f322837c966da663471d8c/comments", "author": null, "committer": null, "parents": [{"sha": "f8d9772e2fc172baf760e9986e4ea4c2c36df42b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8d9772e2fc172baf760e9986e4ea4c2c36df42b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8d9772e2fc172baf760e9986e4ea4c2c36df42b"}], "stats": {"total": 8, "additions": 2, "deletions": 6}, "files": [{"sha": "0d7a5c9c7e0456c8d5594d915c3f0d7745d7d3b7", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1bbe7328c3d29e8d3f322837c966da663471d8c/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1bbe7328c3d29e8d3f322837c966da663471d8c/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=b1bbe7328c3d29e8d3f322837c966da663471d8c", "patch": "@@ -576,7 +576,7 @@ extern enum reg_class reg_class_from_letter[];\n #define CONST_DOUBLE_OK_FOR_LETTER_P(VALUE, C)\t\\\n ((C) == 'G' ? fp_zero_operand (VALUE)\t\t\\\n  : (C) == 'H' ? fp_one_operand (VALUE)\t\t\\\n- : 0)\n+ : (C) == 'F')\n \n /* Given an rtx X being reloaded into a reg required to be\n    in class CLASS, return the class of reg to actually use.\n@@ -907,13 +907,9 @@ extern struct rtx_def *sh_builtin_saveregs ();\n \n /* Nonzero if the constant value X is a legitimate general operand.  */\n \n-/* ??? Should modify this to accept CONST_DOUBLE, and then modify the\n-   constant pool table code to fix loads of CONST_DOUBLEs.  If that doesn't\n-   work well, then we can at least handle simple CONST_DOUBLEs here\n-   such as 0.0.  */\n-\n #define LEGITIMATE_CONSTANT_P(X) \\\n   (GET_CODE (X) != CONST_DOUBLE\t\t\t\t\t\t\\\n+   || GET_MODE (X) == DFmode || GET_MODE (X) == SFmode\t\t\t\\\n    || (TARGET_SH3E && (fp_zero_operand (X) || fp_one_operand (X))))\n \n /* The macros REG_OK_FOR..._P assume that the arg is a REG rtx"}]}