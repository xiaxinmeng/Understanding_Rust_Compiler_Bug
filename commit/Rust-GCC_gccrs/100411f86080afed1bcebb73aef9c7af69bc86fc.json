{"sha": "100411f86080afed1bcebb73aef9c7af69bc86fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTAwNDExZjg2MDgwYWZlZDFiY2ViYjczYWVmOWM3YWY2OWJjODZmYw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2012-10-29T15:48:21Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2012-10-29T15:48:21Z"}, "message": "ipa-inline.c (want_inline_function_called_once_p): Rename to ...\n\n\n\t* ipa-inline.c (want_inline_function_called_once_p): Rename to ...\n\t(want_inline_function_to_all_callers_p): check also functions with\n\tmultiple callers.\n\t(ipa_inline): Handle inlining for size into multiple callers.\n\nFrom-SVN: r192946", "tree": {"sha": "73e8758822cd0bf60525747d729dc643fc112f93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73e8758822cd0bf60525747d729dc643fc112f93"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/100411f86080afed1bcebb73aef9c7af69bc86fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/100411f86080afed1bcebb73aef9c7af69bc86fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/100411f86080afed1bcebb73aef9c7af69bc86fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/100411f86080afed1bcebb73aef9c7af69bc86fc/comments", "author": null, "committer": null, "parents": [{"sha": "8277de3441053e7c440a71823598e43e56da2606", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8277de3441053e7c440a71823598e43e56da2606", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8277de3441053e7c440a71823598e43e56da2606"}], "stats": {"total": 151, "additions": 106, "deletions": 45}, "files": [{"sha": "1c0b052325bf0ce391ae981b23684c54878fbcce", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/100411f86080afed1bcebb73aef9c7af69bc86fc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/100411f86080afed1bcebb73aef9c7af69bc86fc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=100411f86080afed1bcebb73aef9c7af69bc86fc", "patch": "@@ -1,3 +1,10 @@\n+2012-10-29  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa-inline.c (want_inline_function_called_once_p): Rename to ...\n+\t(want_inline_function_to_all_callers_p): check also functions with\n+\tmultiple callers.\n+\t(ipa_inline): Handle inlining for size into multiple callers.\n+\n 2012-10-29  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/53695"}, {"sha": "773220b60cc32f96df281da6dde7e77372f60b64", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 53, "deletions": 45, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/100411f86080afed1bcebb73aef9c7af69bc86fc/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/100411f86080afed1bcebb73aef9c7af69bc86fc/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=100411f86080afed1bcebb73aef9c7af69bc86fc", "patch": "@@ -681,34 +681,41 @@ check_caller_edge (struct cgraph_node *node, void *edge)\n }\n \n \n-/* Decide if NODE is called once inlining it would eliminate need\n-   for the offline copy of function.  */\n+/* Decide if inlining NODE would reduce unit size by eliminating\n+   the offline copy of function.  \n+   When COLD is true the cold calls are considered, too.  */\n \n static bool\n-want_inline_function_called_once_p (struct cgraph_node *node)\n+want_inline_function_to_all_callers_p (struct cgraph_node *node, bool cold)\n {\n    struct cgraph_node *function = cgraph_function_or_thunk_node (node, NULL);\n+   struct cgraph_edge *e;\n+   bool has_hot_call = false;\n+\n+   /* Does it have callers?  */\n+   if (!node->callers)\n+     return false;\n    /* Already inlined?  */\n    if (function->global.inlined_to)\n      return false;\n-   /* Zero or more then one callers?  */\n-   if (!node->callers\n-       || node->callers->next_caller)\n+   if (cgraph_function_or_thunk_node (node, NULL) != node)\n+     return false;\n+   /* Inlining into all callers would increase size?  */\n+   if (estimate_growth (node) > 0)\n      return false;\n    /* Maybe other aliases has more direct calls.  */\n    if (cgraph_for_node_and_aliases (node, check_caller_edge, node->callers, true))\n      return false;\n-   /* Recursive call makes no sense to inline.  */\n-   if (cgraph_edge_recursive_p (node->callers))\n-     return false;\n-   /* External functions are not really in the unit, so inlining\n-      them when called once would just increase the program size.  */\n-   if (DECL_EXTERNAL (function->symbol.decl))\n-     return false;\n-   /* Offline body must be optimized out.  */\n-   if (!cgraph_will_be_removed_from_program_if_no_direct_calls (function))\n-     return false;\n-   if (!can_inline_edge_p (node->callers, true))\n+   /* All inlines must be possible.  */\n+   for (e = node->callers; e; e = e->next_caller)\n+     {\n+       if (!can_inline_edge_p (e, true))\n+         return false;\n+       if (!has_hot_call && cgraph_maybe_hot_edge_p (e))\n+\t has_hot_call = 1;\n+     }\n+\n+   if (!cold && !has_hot_call)\n      return false;\n    return true;\n }\n@@ -1729,14 +1736,16 @@ ipa_inline (void)\n   symtab_remove_unreachable_nodes (true, dump_file);\n   free (order);\n \n-  /* We already perform some inlining of functions called once during\n-     inlining small functions above.  After unreachable nodes are removed,\n-     we still might do a quick check that nothing new is found.  */\n+  /* Inline functions with a property that after inlining into all callers the\n+     code size will shrink because the out-of-line copy is eliminated. \n+     We do this regardless on the callee size as long as function growth limits\n+     are met.  */\n   if (flag_inline_functions_called_once)\n     {\n       int cold;\n       if (dump_file)\n-\tfprintf (dump_file, \"\\nDeciding on functions called once:\\n\");\n+\tfprintf (dump_file,\n+\t\t \"\\nDeciding on functions to be inlined into all callers:\\n\");\n \n       /* Inlining one function called once has good chance of preventing\n \t inlining other function into the same callee.  Ideally we should\n@@ -1757,31 +1766,30 @@ ipa_inline (void)\n \t{\n \t  FOR_EACH_DEFINED_FUNCTION (node)\n \t    {\n-\t      if (want_inline_function_called_once_p (node)\n-\t\t  && (cold\n-\t\t      || cgraph_maybe_hot_edge_p (node->callers)))\n-\t\t{\n-\t\t  struct cgraph_node *caller = node->callers->caller;\n-\n-\t\t  if (dump_file)\n-\t\t    {\n-\t\t      fprintf (dump_file,\n-\t\t\t       \"\\nInlining %s size %i.\\n\",\n-\t\t\t       cgraph_node_name (node),\n-\t\t\t       inline_summary (node)->size);\n+\t      if (want_inline_function_to_all_callers_p (node, cold))\n+\t\twhile (node->callers && !node->global.inlined_to)\n+\t\t  {\n+\t\t    struct cgraph_node *caller = node->callers->caller;\n+\n+\t\t    if (dump_file)\n+\t\t      {\n+\t\t\tfprintf (dump_file,\n+\t\t\t\t \"\\nInlining %s size %i.\\n\",\n+\t\t\t\t cgraph_node_name (node),\n+\t\t\t\t inline_summary (node)->size);\n+\t\t\tfprintf (dump_file,\n+\t\t\t\t \" Called once from %s %i insns.\\n\",\n+\t\t\t\t cgraph_node_name (node->callers->caller),\n+\t\t\t\t inline_summary (node->callers->caller)->size);\n+\t\t      }\n+\n+\t\t    inline_call (node->callers, true, NULL, NULL, true);\n+\t\t    if (dump_file)\n \t\t      fprintf (dump_file,\n-\t\t\t       \" Called once from %s %i insns.\\n\",\n-\t\t\t       cgraph_node_name (node->callers->caller),\n-\t\t\t       inline_summary (node->callers->caller)->size);\n-\t\t    }\n-\n-\t\t  inline_call (node->callers, true, NULL, NULL, true);\n-\t\t  if (dump_file)\n-\t\t    fprintf (dump_file,\n-\t\t\t     \" Inlined into %s which now has %i size\\n\",\n-\t\t\t     cgraph_node_name (caller),\n-\t\t\t     inline_summary (caller)->size);\n-\t\t}\n+\t\t\t       \" Inlined into %s which now has %i size\\n\",\n+\t\t\t       cgraph_node_name (caller),\n+\t\t\t       inline_summary (caller)->size);\n+\t\t  }\n \t    }\n \t}\n     }"}, {"sha": "8878dcc8f6f16fd08933b1a55a66caf5a3961ae3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/100411f86080afed1bcebb73aef9c7af69bc86fc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/100411f86080afed1bcebb73aef9c7af69bc86fc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=100411f86080afed1bcebb73aef9c7af69bc86fc", "patch": "@@ -1,3 +1,7 @@\n+2012-10-29  Jan Hubicka  <jh@suse.cz>\n+\n+\t* gcc.dg/ipa/inline-6.c: New testcase.\n+\n 2012-10-29  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/55106"}, {"sha": "d981bb0064e32a94a2c3ed2c1a71b287217f3d21", "filename": "gcc/testsuite/gcc.dg/ipa/inline-6.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/100411f86080afed1bcebb73aef9c7af69bc86fc/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Finline-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/100411f86080afed1bcebb73aef9c7af69bc86fc/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Finline-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Finline-6.c?ref=100411f86080afed1bcebb73aef9c7af69bc86fc", "patch": "@@ -0,0 +1,42 @@\n+/* Check statements that are eliminated by inlining.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-ipa-inline-details -fno-early-inlining -fno-partial-inlining -fno-ipa-cp\"  } */\n+static t(int a)\n+{\n+  if (a==1)\n+    {\n+      foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo();\n+      foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo();\n+      foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo();\n+      foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo();\n+      foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo();\n+      foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo();\n+      foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo();\n+    }\n+  else if (a==2)\n+    {\n+      bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar();\n+      bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar();\n+      bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar();\n+      bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar();\n+      bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar();\n+      bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar(); bar();\n+    }\n+  else\n+   {\n+      bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr();\n+      bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr();\n+      bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr();\n+      bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr();\n+      bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr();\n+      bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr(); bagr();\n+   }\n+}\n+main()\n+{\n+  t(1);\n+  t(2);\n+} \n+/* Even if function is huge, inlining it will save code.  */\n+/* { dg-final { scan-ipa-dump-times \"Inlined into\" 2 \"inline\"  } } */\n+/* { dg-final { cleanup-ipa-dump \"inline\" } } */"}]}