{"sha": "4002ae566b093586cde4da6790e7c7ed357f2493", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDAwMmFlNTY2YjA5MzU4NmNkZTRkYTY3OTBlN2M3ZWQzNTdmMjQ5Mw==", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2020-12-14T14:25:18Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-04-29T08:00:44Z"}, "message": "[Ada] Consistent wording for permissible-vs-allowed prefix\n\ngcc/ada/\n\n\t* doc/gnat_rm/implementation_defined_attributes.rst: Change all\n\toccurrences of \"permissible prefix\" to \"allowed prefix\", for\n\tconsistency.\n\t* gnat_rm.texi: Regenerate.", "tree": {"sha": "a16bf40b5f1612797d61f927e0e7ccb4e2a60e8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a16bf40b5f1612797d61f927e0e7ccb4e2a60e8a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4002ae566b093586cde4da6790e7c7ed357f2493", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4002ae566b093586cde4da6790e7c7ed357f2493", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4002ae566b093586cde4da6790e7c7ed357f2493", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4002ae566b093586cde4da6790e7c7ed357f2493/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5f38dd83e88a6f2325798cd46a1b5ed5107e2ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5f38dd83e88a6f2325798cd46a1b5ed5107e2ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5f38dd83e88a6f2325798cd46a1b5ed5107e2ce"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "fe33dd9415ef91182fa1746b5b20bffd2ff749d6", "filename": "gcc/ada/doc/gnat_rm/implementation_defined_attributes.rst", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4002ae566b093586cde4da6790e7c7ed357f2493/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4002ae566b093586cde4da6790e7c7ed357f2493/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_attributes.rst?ref=4002ae566b093586cde4da6790e7c7ed357f2493", "patch": "@@ -196,7 +196,7 @@ Attribute Default_Bit_Order\n .. index:: Default_Bit_Order\n \n ``Standard'Default_Bit_Order`` (``Standard`` is the only\n-permissible prefix), provides the value ``System.Default_Bit_Order``\n+allowed prefix), provides the value ``System.Default_Bit_Order``\n as a ``Pos`` value (0 for ``High_Order_First``, 1 for\n ``Low_Order_First``).  This is used to construct the definition of\n ``Default_Bit_Order`` in package ``System``.\n@@ -210,7 +210,7 @@ Attribute Default_Scalar_Storage_Order\n .. index:: Default_Scalar_Storage_Order\n \n ``Standard'Default_Scalar_Storage_Order`` (``Standard`` is the only\n-permissible prefix), provides the current value of the default scalar storage\n+allowed prefix), provides the current value of the default scalar storage\n order (as specified using pragma ``Default_Scalar_Storage_Order``, or\n equal to ``Default_Bit_Order`` if unspecified) as a\n ``System.Bit_Order`` value. This is a static attribute.\n@@ -665,7 +665,7 @@ Attribute Maximum_Alignment\n .. index:: Maximum_Alignment\n \n ``Standard'Maximum_Alignment`` (``Standard`` is the only\n-permissible prefix) provides the maximum useful alignment value for the\n+allowed prefix) provides the maximum useful alignment value for the\n target.  This is a static value that can be used to specify the alignment\n for an object, guaranteeing that it is properly aligned in all\n cases.\n@@ -674,7 +674,7 @@ Attribute Max_Integer_Size\n ==========================\n .. index:: Max_Integer_Size\n \n-``Standard'Max_Integer_Size`` (``Standard`` is the only permissible\n+``Standard'Max_Integer_Size`` (``Standard`` is the only allowed\n prefix) provides the size of the largest supported integer type for\n the target. The result is a static constant.\n \n@@ -1164,7 +1164,7 @@ Attribute Storage_Unit\n ======================\n .. index:: Storage_Unit\n \n-``Standard'Storage_Unit`` (``Standard`` is the only permissible\n+``Standard'Storage_Unit`` (``Standard`` is the only allowed\n prefix) provides the same value as ``System.Storage_Unit``.\n \n Attribute Stub_Type\n@@ -1195,7 +1195,7 @@ Attribute System_Allocator_Alignment\n .. index:: System_Allocator_Alignment\n \n ``Standard'System_Allocator_Alignment`` (``Standard`` is the only\n-permissible prefix) provides the observable guaranted to be honored by\n+allowed prefix) provides the observable guaranted to be honored by\n the system allocator (malloc). This is a static value that can be used\n in user storage pools based on malloc either to reject allocation\n with alignment too large or to enable a realignment circuitry if the\n@@ -1205,7 +1205,7 @@ Attribute Target_Name\n =====================\n .. index:: Target_Name\n \n-``Standard'Target_Name`` (``Standard`` is the only permissible\n+``Standard'Target_Name`` (``Standard`` is the only allowed\n prefix) provides a static string value that identifies the target\n for the current compilation. For GCC implementations, this is the\n standard gcc target name without the terminating slash (for\n@@ -1216,7 +1216,7 @@ Attribute To_Address\n .. index:: To_Address\n \n The ``System'To_Address``\n-(``System`` is the only permissible prefix)\n+(``System`` is the only allowed prefix)\n denotes a function identical to\n ``System.Storage_Elements.To_Address`` except that\n it is a static attribute.  This means that if its argument is\n@@ -1650,7 +1650,7 @@ Attribute Wchar_T_Size\n ======================\n .. index:: Wchar_T_Size\n \n-``Standard'Wchar_T_Size`` (``Standard`` is the only permissible\n+``Standard'Wchar_T_Size`` (``Standard`` is the only allowed\n prefix) provides the size in bits of the C ``wchar_t`` type\n primarily for constructing the definition of this type in\n package ``Interfaces.C``. The result is a static constant.\n@@ -1659,6 +1659,6 @@ Attribute Word_Size\n ===================\n .. index:: Word_Size\n \n-``Standard'Word_Size`` (``Standard`` is the only permissible\n+``Standard'Word_Size`` (``Standard`` is the only allowed\n prefix) provides the value ``System.Word_Size``. The result is\n a static constant."}, {"sha": "9427dccf674e6c83ebb372e836f6b878121d28c6", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4002ae566b093586cde4da6790e7c7ed357f2493/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4002ae566b093586cde4da6790e7c7ed357f2493/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=4002ae566b093586cde4da6790e7c7ed357f2493", "patch": "@@ -21,7 +21,7 @@\n \n @copying\n @quotation\n-GNAT Reference Manual , Dec 11, 2020\n+GNAT Reference Manual , Apr 12, 2021\n \n AdaCore\n \n@@ -10306,7 +10306,7 @@ compatible with older Ada compilers, including notably DEC Ada.\n @geindex Default_Bit_Order\n \n @code{Standard'Default_Bit_Order} (@code{Standard} is the only\n-permissible prefix), provides the value @code{System.Default_Bit_Order}\n+allowed prefix), provides the value @code{System.Default_Bit_Order}\n as a @code{Pos} value (0 for @code{High_Order_First}, 1 for\n @code{Low_Order_First}).  This is used to construct the definition of\n @code{Default_Bit_Order} in package @code{System}.\n@@ -10323,7 +10323,7 @@ as a @code{Pos} value (0 for @code{High_Order_First}, 1 for\n @geindex Default_Scalar_Storage_Order\n \n @code{Standard'Default_Scalar_Storage_Order} (@code{Standard} is the only\n-permissible prefix), provides the current value of the default scalar storage\n+allowed prefix), provides the current value of the default scalar storage\n order (as specified using pragma @code{Default_Scalar_Storage_Order}, or\n equal to @code{Default_Bit_Order} if unspecified) as a\n @code{System.Bit_Order} value. This is a static attribute.\n@@ -10868,7 +10868,7 @@ this attribute.\n @geindex Maximum_Alignment\n \n @code{Standard'Maximum_Alignment} (@code{Standard} is the only\n-permissible prefix) provides the maximum useful alignment value for the\n+allowed prefix) provides the maximum useful alignment value for the\n target.  This is a static value that can be used to specify the alignment\n for an object, guaranteeing that it is properly aligned in all\n cases.\n@@ -10880,7 +10880,7 @@ cases.\n \n @geindex Max_Integer_Size\n \n-@code{Standard'Max_Integer_Size} (@code{Standard} is the only permissible\n+@code{Standard'Max_Integer_Size} (@code{Standard} is the only allowed\n prefix) provides the size of the largest supported integer type for\n the target. The result is a static constant.\n \n@@ -11433,7 +11433,7 @@ with coprime factors (i.e. as an irreducible fraction).\n \n @geindex Storage_Unit\n \n-@code{Standard'Storage_Unit} (@code{Standard} is the only permissible\n+@code{Standard'Storage_Unit} (@code{Standard} is the only allowed\n prefix) provides the same value as @code{System.Storage_Unit}.\n \n @node Attribute Stub_Type,Attribute System_Allocator_Alignment,Attribute Storage_Unit,Implementation Defined Attributes\n@@ -11471,7 +11471,7 @@ an implicit dependency on this unit.\n @geindex System_Allocator_Alignment\n \n @code{Standard'System_Allocator_Alignment} (@code{Standard} is the only\n-permissible prefix) provides the observable guaranted to be honored by\n+allowed prefix) provides the observable guaranted to be honored by\n the system allocator (malloc). This is a static value that can be used\n in user storage pools based on malloc either to reject allocation\n with alignment too large or to enable a realignment circuitry if the\n@@ -11484,7 +11484,7 @@ alignment request is larger than this value.\n \n @geindex Target_Name\n \n-@code{Standard'Target_Name} (@code{Standard} is the only permissible\n+@code{Standard'Target_Name} (@code{Standard} is the only allowed\n prefix) provides a static string value that identifies the target\n for the current compilation. For GCC implementations, this is the\n standard gcc target name without the terminating slash (for\n@@ -11498,7 +11498,7 @@ example, GNAT 5.0 on windows yields \"i586-pc-mingw32msv\").\n @geindex To_Address\n \n The @code{System'To_Address}\n-(@code{System} is the only permissible prefix)\n+(@code{System} is the only allowed prefix)\n denotes a function identical to\n @code{System.Storage_Elements.To_Address} except that\n it is a static attribute.  This means that if its argument is\n@@ -11960,7 +11960,7 @@ but, unlike @code{Size}, may be set for non-first subtypes.\n \n @geindex Wchar_T_Size\n \n-@code{Standard'Wchar_T_Size} (@code{Standard} is the only permissible\n+@code{Standard'Wchar_T_Size} (@code{Standard} is the only allowed\n prefix) provides the size in bits of the C @code{wchar_t} type\n primarily for constructing the definition of this type in\n package @code{Interfaces.C}. The result is a static constant.\n@@ -11972,7 +11972,7 @@ package @code{Interfaces.C}. The result is a static constant.\n \n @geindex Word_Size\n \n-@code{Standard'Word_Size} (@code{Standard} is the only permissible\n+@code{Standard'Word_Size} (@code{Standard} is the only allowed\n prefix) provides the value @code{System.Word_Size}. The result is\n a static constant.\n "}]}