{"sha": "cff001b2e843de422ba2a67b9049b558709a91dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ZmMDAxYjJlODQzZGU0MjJiYTJhNjdiOTA0OWI1NTg3MDlhOTFkZA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-03-07T22:22:35Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-03-07T22:22:35Z"}, "message": "type_traits (is_polymorphic): Don't forget the virtual destructor, thus avoiding warnings.\n\n2005-03-07  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1/type_traits (is_polymorphic): Don't forget\n\tthe virtual destructor, thus avoiding warnings.\n\t* testsuite/testsuite_tr1.h (class AbstractClass,\n\tclass PolymorphicClass): Likewise.\n\n2005-03-07  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/std/std_complex.h (pow(const complex<_Tp>&,\n\tconst complex<_Tp>&)): Dispatch to either __complex_pow(__x.__rep(),\n\t__y.__rep()) or __complex_pow(__x, __y) depending on the macro\n\t_GLIBCXX_USE_C99_COMPLEX.\n\nFrom-SVN: r96048", "tree": {"sha": "d6a10c9c6721acbf04fa940ca023eb13726a902a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6a10c9c6721acbf04fa940ca023eb13726a902a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cff001b2e843de422ba2a67b9049b558709a91dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cff001b2e843de422ba2a67b9049b558709a91dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cff001b2e843de422ba2a67b9049b558709a91dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cff001b2e843de422ba2a67b9049b558709a91dd/comments", "author": null, "committer": null, "parents": [{"sha": "92db3ec9db394735d4c11d477ab29d363243f151", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92db3ec9db394735d4c11d477ab29d363243f151", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92db3ec9db394735d4c11d477ab29d363243f151"}], "stats": {"total": 41, "additions": 35, "deletions": 6}, "files": [{"sha": "48e54511f6b9df2bd54401aa4f642471423f4585", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cff001b2e843de422ba2a67b9049b558709a91dd/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cff001b2e843de422ba2a67b9049b558709a91dd/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=cff001b2e843de422ba2a67b9049b558709a91dd", "patch": "@@ -1,3 +1,17 @@\n+2005-03-07  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1/type_traits (is_polymorphic): Don't forget\n+\tthe virtual destructor, thus avoiding warnings.\n+\t* testsuite/testsuite_tr1.h (class AbstractClass,\n+\tclass PolymorphicClass): Likewise.\n+\n+2005-03-07  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/std/std_complex.h (pow(const complex<_Tp>&,\n+\tconst complex<_Tp>&)): Dispatch to either __complex_pow(__x.__rep(),\n+\t__y.__rep()) or __complex_pow(__x, __y) depending on the macro\n+\t_GLIBCXX_USE_C99_COMPLEX.\n+\n 2005-03-07  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/std/std_fstream.h (basic_fstream<>::open,"}, {"sha": "694acdc41c9e6362d8055d82fc51b08d5be9b32e", "filename": "libstdc++-v3/include/std/std_complex.h", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cff001b2e843de422ba2a67b9049b558709a91dd/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_complex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cff001b2e843de422ba2a67b9049b558709a91dd/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_complex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_complex.h?ref=cff001b2e843de422ba2a67b9049b558709a91dd", "patch": "@@ -966,14 +966,20 @@ namespace std\n   { return __builtin_cpow(__x, __y); }\n \n   inline __complex__ long double\n-  __complex_pow(__complex__ long double& __x, __complex__ long double& __y)\n+  __complex_pow(const __complex__ long double& __x,\n+\t\tconst __complex__ long double& __y)\n   { return __builtin_cpowl(__x, __y); }\n-#endif\n \n+  template<typename _Tp>\n+    inline complex<_Tp>\n+    pow(const complex<_Tp>& __x, const complex<_Tp>& __y)\n+    { return __complex_pow(__x.__rep(), __y.__rep()); }\n+#else\n   template<typename _Tp>\n     inline complex<_Tp>\n     pow(const complex<_Tp>& __x, const complex<_Tp>& __y)\n     { return __complex_pow(__x, __y); }\n+#endif\n \n   template<typename _Tp>\n     inline complex<_Tp>"}, {"sha": "55f585f9f4be02ad98c67b78309a03606a37963a", "filename": "libstdc++-v3/include/tr1/type_traits", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cff001b2e843de422ba2a67b9049b558709a91dd/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cff001b2e843de422ba2a67b9049b558709a91dd/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits?ref=cff001b2e843de422ba2a67b9049b558709a91dd", "patch": "@@ -319,8 +319,11 @@ namespace tr1\n       template<typename _Up>\n         struct __second\n         : public _Up\n-\t{ virtual void __dummy(); };\n-           \n+\t{ \n+\t  virtual void __dummy();\n+\t  virtual ~__second();\n+\t};\n+\n     public:\n       static const bool __value = sizeof(__first<_Tp>) == sizeof(__second<_Tp>);\n     };"}, {"sha": "fa514ca7e16884a5f37d1f5c25508ac72cc6edd5", "filename": "libstdc++-v3/testsuite/testsuite_tr1.h", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cff001b2e843de422ba2a67b9049b558709a91dd/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_tr1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cff001b2e843de422ba2a67b9049b558709a91dd/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_tr1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_tr1.h?ref=cff001b2e843de422ba2a67b9049b558709a91dd", "patch": "@@ -121,10 +121,16 @@ namespace __gnu_test\n   { operator int() const; };\n \n   class AbstractClass\n-  { virtual void rotate(int) = 0; };\n+  { \n+    virtual void rotate(int) = 0;\n+    virtual ~AbstractClass();\n+  };\n \n   class PolymorphicClass\n-  { virtual void rotate(int); };\n+  { \n+    virtual void rotate(int);\n+    virtual ~PolymorphicClass();\n+  };\n \n   class DerivedPolymorphic : public PolymorphicClass { }; \n "}]}