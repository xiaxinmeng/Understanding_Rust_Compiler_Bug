{"sha": "98b41fd4045b7856e7b85dd58d67c600bd909379", "node_id": "C_kwDOANBUbNoAKDk4YjQxZmQ0MDQ1Yjc4NTZlN2I4NWRkNThkNjdjNjAwYmQ5MDkzNzk", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-01-16T08:40:14Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-01-16T08:40:14Z"}, "message": "c, c++: Allow ignoring -Winit-self through pragmas [PR105593]\n\nAs mentioned in the PR, various x86 intrinsics need to return\nan uninitialized vector.  Currently they use self initialization\nto avoid -Wuninitialized warnings, which works fine in C, but\ndoesn't work in C++ where -Winit-self is enabled in -Wall.\nWe don't have an attribute to mark a variable as knowingly\nuninitialized (the uninitialized attribute exists but means\nsomething else, only in the -ftrivial-auto-var-init context),\nand trying to suppress either -Wuninitialized or -Winit-self\ninside of the _mm_undefined_ps etc. intrinsic definitions\ndoesn't work, one needs to currently disable through pragmas\n-Wuninitialized warning at the point where _mm_undefined_ps etc.\nresult is actually used, but that goes against the intent of\nthose intrinsics.\n\nThe -Winit-self warning option actually doesn't do any warning,\nall we do is record a suppression for -Winit-self if !warn_init_self\non the decl definition and later look that up in uninit pass.\n\nThe following patch changes those !warn_init_self tests which\nare true only based on the command line option setting, not based\non GCC diagnostic pragma overrides to\n!warning_enabled_at (DECL_SOURCE_LOCATION (decl), OPT_Winit_self)\nsuch that it takes them into account.\n\n2023-01-16  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/105593\ngcc/c/\n\t* c-parser.cc (c_parser_initializer): Check warning_enabled_at\n\tat the DECL_SOURCE_LOCATION (decl) for OPT_Winit_self instead\n\tof warn_init_self.\ngcc/cp/\n\t* decl.cc (cp_finish_decl): Check warning_enabled_at\n\tat the DECL_SOURCE_LOCATION (decl) for OPT_Winit_self instead\n\tof warn_init_self.\ngcc/testsuite/\n\t* c-c++-common/Winit-self3.c: New test.\n\t* c-c++-common/Winit-self4.c: New test.\n\t* c-c++-common/Winit-self5.c: New test.", "tree": {"sha": "f5994ab32fb6603a3d484310f23236379f30e92f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5994ab32fb6603a3d484310f23236379f30e92f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98b41fd4045b7856e7b85dd58d67c600bd909379", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98b41fd4045b7856e7b85dd58d67c600bd909379", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98b41fd4045b7856e7b85dd58d67c600bd909379", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98b41fd4045b7856e7b85dd58d67c600bd909379/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "074b0c03eabeb8e9c8de813c81bf87a1f88fdb65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/074b0c03eabeb8e9c8de813c81bf87a1f88fdb65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/074b0c03eabeb8e9c8de813c81bf87a1f88fdb65"}], "stats": {"total": 112, "additions": 110, "deletions": 2}, "files": [{"sha": "a6985069932b97237b5329853ecf57bf3aaaa048", "filename": "gcc/c/c-parser.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98b41fd4045b7856e7b85dd58d67c600bd909379/gcc%2Fc%2Fc-parser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98b41fd4045b7856e7b85dd58d67c600bd909379/gcc%2Fc%2Fc-parser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.cc?ref=98b41fd4045b7856e7b85dd58d67c600bd909379", "patch": "@@ -5701,7 +5701,7 @@ c_parser_initializer (c_parser *parser, tree decl)\n \t  && !DECL_EXTERNAL (decl)\n \t  && !TREE_STATIC (decl)\n \t  && ret.value == decl\n-\t  && !warn_init_self)\n+\t  && !warning_enabled_at (DECL_SOURCE_LOCATION (decl), OPT_Winit_self))\n \tsuppress_warning (decl, OPT_Winit_self);\n       if (TREE_CODE (ret.value) != STRING_CST\n \t  && (TREE_CODE (ret.value) != COMPOUND_LITERAL_EXPR"}, {"sha": "6b1c4a2749cc5e55234c0243622cb189bc1c2723", "filename": "gcc/cp/decl.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98b41fd4045b7856e7b85dd58d67c600bd909379/gcc%2Fcp%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98b41fd4045b7856e7b85dd58d67c600bd909379/gcc%2Fcp%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.cc?ref=98b41fd4045b7856e7b85dd58d67c600bd909379", "patch": "@@ -8407,7 +8407,7 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n       if (!DECL_EXTERNAL (decl)\n \t  && !TREE_STATIC (decl)\n \t  && decl == tree_strip_any_location_wrapper (init)\n-\t  && !warn_init_self)\n+\t  && !warning_enabled_at (DECL_SOURCE_LOCATION (decl), OPT_Winit_self))\n \tsuppress_warning (decl, OPT_Winit_self);\n     }\n "}, {"sha": "b83135f193bddd3f88bd7ad32ee23e104baba93c", "filename": "gcc/testsuite/c-c++-common/Winit-self3.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98b41fd4045b7856e7b85dd58d67c600bd909379/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWinit-self3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98b41fd4045b7856e7b85dd58d67c600bd909379/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWinit-self3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWinit-self3.c?ref=98b41fd4045b7856e7b85dd58d67c600bd909379", "patch": "@@ -0,0 +1,36 @@\n+/* PR c++/105593 */\n+/* { dg-do compile } */\n+/* { dg-options \"-W -Wall\" } */\n+\n+void bar (int);\n+\n+static inline int\n+baz (void)\n+{\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Winit-self\"\n+  int u = u;\t\t/* { dg-bogus \"'u' is used uninitialized\" } */\n+#pragma GCC diagnostic pop\n+  return u;\n+}\n+\n+void\n+foo (void)\n+{\n+  int u = baz ();\n+  bar (u);\n+}\n+\n+static inline int\n+qux (void)\n+{\n+  int u = u;\t\t/* { dg-warning \"'u' is used uninitialized\" \"\" { target c++ } } */\n+  return u;\t\t/* { dg-message \"'u' was declared here\" \"\" { target c++ } .-1 } */\n+}\n+\n+void\n+corge (void)\n+{\n+  int u = qux ();\n+  bar (u);\n+}"}, {"sha": "b38b7cc60b5785f0a2e52a9ef83266aa28993956", "filename": "gcc/testsuite/c-c++-common/Winit-self4.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98b41fd4045b7856e7b85dd58d67c600bd909379/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWinit-self4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98b41fd4045b7856e7b85dd58d67c600bd909379/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWinit-self4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWinit-self4.c?ref=98b41fd4045b7856e7b85dd58d67c600bd909379", "patch": "@@ -0,0 +1,36 @@\n+/* PR c++/105593 */\n+/* { dg-do compile } */\n+/* { dg-options \"-W -Wall -Winit-self\" } */\n+\n+void bar (int);\n+\n+static inline int\n+baz (void)\n+{\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Winit-self\"\n+  int u = u;\t\t/* { dg-bogus \"'u' is used uninitialized\" } */\n+#pragma GCC diagnostic pop\n+  return u;\n+}\n+\n+void\n+foo (void)\n+{\n+  int u = baz ();\n+  bar (u);\n+}\n+\n+static inline int\n+qux (void)\n+{\n+  int u = u;\t\t/* { dg-warning \"'u' is used uninitialized\" } */\n+  return u;\t\t/* { dg-message \"'u' was declared here\" \"\" { target *-*-* } .-1 } */\n+}\n+\n+void\n+corge (void)\n+{\n+  int u = qux ();\n+  bar (u);\n+}"}, {"sha": "db2d9a132194c480febe9bc8c40e54c55e874732", "filename": "gcc/testsuite/c-c++-common/Winit-self5.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98b41fd4045b7856e7b85dd58d67c600bd909379/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWinit-self5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98b41fd4045b7856e7b85dd58d67c600bd909379/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWinit-self5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWinit-self5.c?ref=98b41fd4045b7856e7b85dd58d67c600bd909379", "patch": "@@ -0,0 +1,36 @@\n+/* PR c++/105593 */\n+/* { dg-do compile } */\n+/* { dg-options \"-W -Wall -Wno-init-self\" } */\n+\n+void bar (int);\n+\n+static inline int\n+baz (void)\n+{\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Winit-self\"\n+  int u = u;\t\t/* { dg-bogus \"'u' is used uninitialized\" } */\n+#pragma GCC diagnostic pop\n+  return u;\n+}\n+\n+void\n+foo (void)\n+{\n+  int u = baz ();\n+  bar (u);\n+}\n+\n+static inline int\n+qux (void)\n+{\n+  int u = u;\t\t/* { dg-bogus \"'u' is used uninitialized\" } */\n+  return u;\n+}\n+\n+void\n+corge (void)\n+{\n+  int u = qux ();\n+  bar (u);\n+}"}]}