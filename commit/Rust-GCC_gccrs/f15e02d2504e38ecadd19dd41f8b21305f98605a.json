{"sha": "f15e02d2504e38ecadd19dd41f8b21305f98605a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjE1ZTAyZDI1MDRlMzhlY2FkZDE5ZGQ0MWY4YjIxMzA1Zjk4NjA1YQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2006-11-07T18:36:32Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2006-11-07T18:36:32Z"}, "message": "re PR libstdc++/29722 (Linking with libsupc++.a creates link time undefined references)\n\n2006-11-07  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tPR libstdc++/29722\n\t* include/ext/concurrence.h (concurrence_lock_error): New.\n\t(concurrence_unlock_error): New.\n\t(__throw_concurrence_lock_error): New.\n\t(__throw_concurrence_unlock_error): New.\n\t(__mutex): Use functions.\n\t(__recursive_mutex): Same.\n\t* testsuite/abi/cxx_runtime_only_linkage.cc: New.\n\n\t* include/ext/pb_ds/exception.hpp: Keep exception classes defined\n\teven when -fno-exceptions is passed, consistent with other usage.\n\nFrom-SVN: r118564", "tree": {"sha": "ca315b5785762ede5508d18204d0f150489825e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca315b5785762ede5508d18204d0f150489825e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f15e02d2504e38ecadd19dd41f8b21305f98605a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f15e02d2504e38ecadd19dd41f8b21305f98605a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f15e02d2504e38ecadd19dd41f8b21305f98605a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f15e02d2504e38ecadd19dd41f8b21305f98605a/comments", "author": null, "committer": null, "parents": [{"sha": "120b24f7ba504ac2ff8876bae10df5b327586b70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/120b24f7ba504ac2ff8876bae10df5b327586b70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/120b24f7ba504ac2ff8876bae10df5b327586b70"}], "stats": {"total": 97, "additions": 87, "deletions": 10}, "files": [{"sha": "e0ee3438ad00d3c07ef2c79d5727cf5eff5d967e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f15e02d2504e38ecadd19dd41f8b21305f98605a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f15e02d2504e38ecadd19dd41f8b21305f98605a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f15e02d2504e38ecadd19dd41f8b21305f98605a", "patch": "@@ -1,3 +1,17 @@\n+2006-11-07  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tPR libstdc++/29722\n+\t* include/ext/concurrence.h (concurrence_lock_error): New.\n+\t(concurrence_unlock_error): New.\n+\t(__throw_concurrence_lock_error): New.\n+\t(__throw_concurrence_unlock_error): New.\n+\t(__mutex): Use functions.\n+\t(__recursive_mutex): Same.\n+\t* testsuite/abi/cxx_runtime_only_linkage.cc: New.\n+\n+\t* include/ext/pb_ds/exception.hpp: Keep exception classes defined\n+\teven when -fno-exceptions is passed, consistent with other usage.\n+\t\n 2006-11-07  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/ext/pb_ds/exception.hpp (pb_ds): Modify for -fno-exceptions."}, {"sha": "868264ddb533e48f32b061bd5f30cd0f2497ec9e", "filename": "libstdc++-v3/include/ext/concurrence.h", "status": "modified", "additions": 45, "deletions": 4, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f15e02d2504e38ecadd19dd41f8b21305f98605a/libstdc%2B%2B-v3%2Finclude%2Fext%2Fconcurrence.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f15e02d2504e38ecadd19dd41f8b21305f98605a/libstdc%2B%2B-v3%2Finclude%2Fext%2Fconcurrence.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fconcurrence.h?ref=f15e02d2504e38ecadd19dd41f8b21305f98605a", "patch": "@@ -36,6 +36,8 @@\n #ifndef _CONCURRENCE_H\n #define _CONCURRENCE_H 1\n \n+#include <cstdlib>\n+#include <exception>\n #include <bits/gthr.h> \n #include <bits/functexcept.h>\n \n@@ -62,6 +64,45 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n #else\n   _S_single;\n #endif\n+  \n+  // NB: As this is used in libsupc++, need to only depend on\n+  // exception. No stdexception classes, no use of std::string.\n+  class concurrence_lock_error : public std::exception\n+  {\n+  public:\n+    virtual char const*\n+    what() const throw()\n+    { return \"__gnu_cxx::concurrence_lock_error\"; }\n+  };\n+\n+  class concurrence_unlock_error : public std::exception\n+  {\n+  public:\n+    virtual char const*\n+    what() const throw()\n+    { return \"__gnu_cxx::concurrence_unlock_error\"; }\n+  };\n+\n+  // Substitute for concurrence_error object in the case of -fno-exceptions.\n+  inline void\n+  __throw_concurrence_lock_error()\n+  {\n+#if __EXCEPTIONS\n+    throw concurrence_lock_error();\n+#else\n+    std::abort();\n+#endif\n+  }\n+\n+  inline void\n+  __throw_concurrence_unlock_error()\n+  {\n+#if __EXCEPTIONS\n+    throw concurrence_unlock_error();\n+#else\n+    std::abort();\n+#endif\n+  }\n \n   class __mutex \n   {\n@@ -93,7 +134,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       if (__gthread_active_p())\n \t{\n \t  if (__gthread_mutex_lock(&_M_mutex) != 0)\n-\t    std::__throw_runtime_error(__N(\"__mutex::lock\"));\n+\t    __throw_concurrence_lock_error();\n \t}\n #endif\n     }\n@@ -104,7 +145,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       if (__gthread_active_p())\n \t{\n \t  if (__gthread_mutex_unlock(&_M_mutex) != 0)\n-\t    std::__throw_runtime_error(__N(\"__mutex::unlock\"));\n+\t    __throw_concurrence_unlock_error();\n \t}\n #endif\n     }\n@@ -140,7 +181,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       if (__gthread_active_p())\n \t{\n \t  if (__gthread_recursive_mutex_lock(&_M_mutex) != 0)\n-\t    std::__throw_runtime_error(__N(\"__recursive_mutex::lock\"));\n+\t    __throw_concurrence_lock_error();\n \t}\n #endif\n     }\n@@ -151,7 +192,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       if (__gthread_active_p())\n \t{\n \t  if (__gthread_recursive_mutex_unlock(&_M_mutex) != 0)\n-\t    std::__throw_runtime_error(__N(\"__recursive_mutex::unlock\"));\n+\t    __throw_concurrence_unlock_error();\n \t}\n #endif\n     }"}, {"sha": "896ff391810710e0a390131c42f5f5d84e4e65c1", "filename": "libstdc++-v3/include/ext/pb_ds/exception.hpp", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f15e02d2504e38ecadd19dd41f8b21305f98605a/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fexception.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f15e02d2504e38ecadd19dd41f8b21305f98605a/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fexception.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fexception.hpp?ref=f15e02d2504e38ecadd19dd41f8b21305f98605a", "patch": "@@ -51,13 +51,11 @@\n \n namespace pb_ds\n {\n-#if __EXCEPTIONS\n-\n   // Base class for exceptions.\n   struct container_error : public std::logic_error\n   {\n     container_error() \n-    : std::logic_error(__N(\"policy based data structure exception\")) { }\n+    : std::logic_error(__N(\"pb_ds::container_error\")) { }\n   };\n \n   // An entry cannot be inserted into a container object for logical\n@@ -72,6 +70,7 @@ namespace pb_ds\n   // A container cannot be resized.\n   struct resize_error : public container_error { };\n \n+#if __EXCEPTIONS\n   void\n   __throw_container_error(void)\n   { throw container_error(); }\n@@ -87,9 +86,7 @@ namespace pb_ds\n   void\n   __throw_resize_error(void)\n   { throw resize_error(); }\n-\n #else\n-\n   void\n   __throw_container_error(void)\n   { std::abort(); }\n@@ -105,7 +102,6 @@ namespace pb_ds\n   void\n   __throw_resize_error(void)\n   { std::abort(); }\n-\n #endif\n } // namespace pb_ds\n "}, {"sha": "7e6409ba4d0b7ec7b80f3070d0499b4369f63f55", "filename": "libstdc++-v3/testsuite/abi/cxx_runtime_only_linkage.cc", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f15e02d2504e38ecadd19dd41f8b21305f98605a/libstdc%2B%2B-v3%2Ftestsuite%2Fabi%2Fcxx_runtime_only_linkage.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f15e02d2504e38ecadd19dd41f8b21305f98605a/libstdc%2B%2B-v3%2Ftestsuite%2Fabi%2Fcxx_runtime_only_linkage.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fabi%2Fcxx_runtime_only_linkage.cc?ref=f15e02d2504e38ecadd19dd41f8b21305f98605a", "patch": "@@ -0,0 +1,26 @@\n+// { dg-do link }\n+// { dg-options \"-x c -L../libsupc++/.libs -lsupc++\" }\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// Must be able to link C++ apps compiled with gcc and libsupc++.\n+\n+int main()\n+{\n+  return 0;\n+}"}]}