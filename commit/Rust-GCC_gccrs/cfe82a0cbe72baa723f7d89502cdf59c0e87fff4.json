{"sha": "cfe82a0cbe72baa723f7d89502cdf59c0e87fff4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ZlODJhMGNiZTcyYmFhNzIzZjdkODk1MDJjZGY1OWMwZTg3ZmZmNA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-05-07T00:16:33Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-05-07T00:16:33Z"}, "message": "Daily bump.", "tree": {"sha": "80be9d63cf66c8047991b4eabc5d32c20cc5ca93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80be9d63cf66c8047991b4eabc5d32c20cc5ca93"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cfe82a0cbe72baa723f7d89502cdf59c0e87fff4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfe82a0cbe72baa723f7d89502cdf59c0e87fff4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfe82a0cbe72baa723f7d89502cdf59c0e87fff4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfe82a0cbe72baa723f7d89502cdf59c0e87fff4/comments", "author": null, "committer": null, "parents": [{"sha": "8f51cf38bb9628546effe66c070188d10f80b5ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f51cf38bb9628546effe66c070188d10f80b5ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f51cf38bb9628546effe66c070188d10f80b5ca"}], "stats": {"total": 447, "additions": 446, "deletions": 1}, "files": [{"sha": "eb05020f98e764ce2239d70617424d0a0dc128c2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfe82a0cbe72baa723f7d89502cdf59c0e87fff4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfe82a0cbe72baa723f7d89502cdf59c0e87fff4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cfe82a0cbe72baa723f7d89502cdf59c0e87fff4", "patch": "@@ -1,3 +1,117 @@\n+2021-05-06  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* ipa-sra.c (ipa_sra_dump_all_summaries): Dump edge summaries even\n+\twhen there is no function summary.\n+\t(ipa_sra_summarize_function): produce edge summaries even when\n+\tbailing out early.\n+\n+2021-05-06  Tom Tromey  <tom@tromey.com>\n+\n+\t* godump.c (string_hash_eq): Remove.\n+\t(go_finish): Use htab_eq_string.\n+\n+2021-05-06  Tom Tromey  <tom@tromey.com>\n+\n+\t* gengtype-state.c (read_state): Use htab_eq_string.\n+\t(string_eq): Remove.\n+\n+2021-05-06  Tom Tromey  <tom@tromey.com>\n+\n+\t* gensupport.c (htab_eq_string): Remove.\n+\n+2021-05-06  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR ipa/97937\n+\t* debug.h (gcc_debug_hooks): Add set_ignored_loc function pointer.\n+\t* dwarf2out.h (dw_fde_node::ignored_debug): New data item.\n+\t* dbxout.c (dbx_debug_hooks, xcoff_debug_hooks): Add dummy\n+\tset_ignored_loc callbacks.\n+\t* debug.c (do_nothing_debug_hooks): Likewise.\n+\t* vmsdbgout.c (vmsdbg_debug_hooks): Likewise.\n+\t* dwarf2out.c (text_section_used, cold_text_section_used): Remove.\n+\t(in_text_section_p, last_text_label, last_cold_label,\n+\tswitch_text_ranges, switch_cold_ranges): New data items.\n+\t(dwarf2out_note_section_used): Remove.\n+\t(dwarf2out_begin_prologue): Set fde->ignored_debug and\n+\tin_text_section_p.\n+\t(mark_ignored_debug_section): New helper function.\n+\t(dwarf2out_end_epilogue, dwarf2out_switch_text_section): Call\n+\tmark_ignored_debug_section.\n+\t(dwarf2_debug_hooks): Use dwarf2out_set_ignored_loc.\n+\t(dwarf2_lineno_debug_hooks): Use dummy for set_ignored_loc.\n+\t(size_of_aranges): Adjust formula for multi-part text ranges size.\n+\t(output_aranges): Output multi-part text ranges.\n+\t(dwarf2out_set_ignored_loc): New callback function.\n+\t(dwarf2out_finish): Output multi-part text ranges.\n+\t(dwarf2out_c_finalize): Clear new data items.\n+\t* final.c (final_start_function_1): Call set_ignored_loc callback.\n+\t(final_scan_insn_1): Likewise.\n+\t* ggc-page.c (gt_ggc_mx): New helper function.\n+\t* stringpool.c (gt_pch_nx): Likewise.\n+\n+2021-05-06  Richard Biener  <rguenther@suse.de>\n+\n+\t* timevar.def (TV_TREE_INSERT_PHI_NODES): Remove.\n+\t(TV_TREE_SSA_REWRITE_BLOCKS): Likewise.\n+\t(TV_TREE_INTO_SSA): New.\n+\t* tree-into-ssa.c (insert_phi_nodes): Do not account separately.\n+\t(rewrite_blocks): Likewise.\n+\t(pass_data_build_ssa): Account to TV_TREE_INTO_SSA.\n+\n+2021-05-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* tree-ssa-phiopt.c (value_replacement, minmax_replacement,\n+\tabs_replacement, xor_replacement,\n+\tcond_removal_in_popcount_clz_ctz_pattern,\n+\treplace_phi_edge_with_variable): Change type of phi argument from\n+\tgimple * to gphi *.\n+\n+2021-05-06  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-loop-split.c (split_loop): Delay updating SSA form.\n+\tOutput an opt-info message.\n+\t(do_split_loop_on_cond): Likewise.\n+\t(tree_ssa_split_loops): Update SSA form here.\n+\n+2021-05-06  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-inline.c (tree_function_versioning): Fix DECL_BY_REFERENCE\n+\treturn variable removal.\n+\n+2021-05-06  Marius Hillenbrand  <mhillen@linux.ibm.com>\n+\n+\t* config/s390/s390-builtins.def (O_M5, O1_M5, ...): Remove unused macros.\n+\t(s390_vec_permi_s64, s390_vec_permi_b64, s390_vec_permi_u64)\n+\t(s390_vec_permi_dbl, s390_vpdi): Use the O3_U2 type for the immediate\n+\toperand.\n+\t* config/s390/s390.c (s390_const_operand_ok): Remove unused\n+\tvalues.\n+\n+2021-05-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/94589\n+\t* tree-ssa-phiopt.c (tree_ssa_phiopt_worker): Call\n+\tspaceship_replacement.\n+\t(cond_only_block_p, spaceship_replacement): New functions.\n+\n+2021-05-06  Richard Biener  <rguenther@suse.de>\n+\n+\tPR ipa/100373\n+\t* tree-emutls.c (gen_emutls_addr): Pass in whether we're\n+\tdealing with a debug use and only query existing addresses\n+\tif so.\n+\t(lower_emutls_1): Avoid splitting out addresses for debug\n+\tstmts, reset the debug stmt when we fail to find existing\n+\tlowered addresses.\n+\t(lower_emutls_phi_arg): Set wi.stmt.\n+\n+2021-05-06  Christoph Muellner  <cmuellner@gcc.gnu.org>\n+\n+\tPR target/100266\n+\t* config/riscv/riscv.c (riscv_block_move_loop): Use cbranch helper.\n+\t* config/riscv/riscv.md (cbranch<mode>4): Generate helpers.\n+\t(stack_protect_test): Use cbranch helper.\n+\n 2021-05-05  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR target/100402"}, {"sha": "b5beafed7dfabe0288ca6b133e6fe326b74f0aa3", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfe82a0cbe72baa723f7d89502cdf59c0e87fff4/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfe82a0cbe72baa723f7d89502cdf59c0e87fff4/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=cfe82a0cbe72baa723f7d89502cdf59c0e87fff4", "patch": "@@ -1 +1 @@\n-20210506\n+20210507"}, {"sha": "5c867361d05d76c3a355f79e48c143b1af6f72ee", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 196, "deletions": 0, "changes": 196, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfe82a0cbe72baa723f7d89502cdf59c0e87fff4/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfe82a0cbe72baa723f7d89502cdf59c0e87fff4/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=cfe82a0cbe72baa723f7d89502cdf59c0e87fff4", "patch": "@@ -1,3 +1,199 @@\n+2021-05-06  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_disp.adb (Build_Class_Wide_Check): Extending the\n+\tfunctionality of this routine to climb to the ancestors\n+\tsearching for the enclosing overridden dispatching primitive\n+\tthat has a class-wide precondition to generate the check.\n+\n+2021-05-06  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch3.adb (Constraint_Index): Remove redundant problematic\n+\tanalysis.\n+\n+2021-05-06  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_unst.adb (Note_Uplevel_Bound): Exclude\n+\tE_Enumeration_Literal.\n+\n+2021-05-06  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_If_Expression):\n+\tApply_Arithmetic_Overflow_Check will not deal with\n+\tThen/Else_Actions so skip minimizing overflow checks if any\n+\tactions are present.\n+\n+2021-05-06  Boris Yakobowski  <yakobowski@adacore.com>\n+\n+\t* gnat1drv.adb (Adjust_Global_Switches): Simplify logic.\n+\n+2021-05-06  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* libgnat/i-c.ads (bool): New type.\n+\t* libgnat/i-cexten.ads, libgnat/i-cexten__128.ads (bool): Now\n+\ta subtype of Interfaces.C.bool.\n+\t* libgnarl/s-interr__vxworks.adb (Interrupt_Manager): Qualify\n+\tFalse.\n+\t* libgnarl/s-interr.adb, libgnarl/s-interr__hwint.adb,\n+\tlibgnarl/s-tasini.adb, libgnarl/s-tasren.adb,\n+\tlibgnarl/s-tassta.adb, libgnarl/s-tpobmu.adb,\n+\tlibgnarl/s-tpobop.adb, libgnarl/s-tpopmo.adb: Replace\n+\tAssert (False) by Assert (Standard.False).\n+\n+2021-05-06  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* make.adb (Compute_Executable): Document parameter.\n+\n+2021-05-06  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* libgnat/s-fatgen.adb (Scaling): Use single handling of\n+\tunderflow.  Add pragma Annotate.\n+\n+2021-05-06  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* sem_eval.adb (Is_OK_Static_Subtype): Call Is_Static_Subtype,\n+\tremove redundant checks.\n+\n+2021-05-06  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_res.adb (First_Last_Ref): Simplify \"if [condition] then\n+\treturn True\" in \"return [condition]\".\n+\t(Resolve_Range): Remove calls appearing in IF condition from the\n+\tTHEN statements.\n+\n+2021-05-06  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_case.adb (Missing_Choice): Fix typo in comment.\n+\t(Lit_Of): Simplify with Make_Character_Literal.\n+\t(Check_Choices): Remove extra spaces in parameter\n+\tspecifications.\n+\t* sem_case.ads: Same reformatting.\n+\n+2021-05-06  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_aggr.adb (Expand_Array_Aggregate): If the expression in an\n+\tOthers_Clause has not been analyzed because previous analysis of\n+\tthe enclosing aggregate showed the clause to be ineffective i.e.\n+\tcover a null range, analyze it now to detect a possible type\n+\tillegality.\n+\n+2021-05-06  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* libgnat/s-fatgen.adb (Scaling): Fix off-by-one bug for underflow.\n+\n+2021-05-06  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_ch6.adb (Is_Inline_Pragma): Protect against N not being a\n+\tlist member in both branches.\n+\n+2021-05-06  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* libgnat/a-cofove.adb (Insert_Space): Remove hardcoded pragma\n+\tWarnings.\n+\n+2021-05-06  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch4.adb (Analyze_Selected_Component): Remove explicit call\n+\tto Set_Raises_Constraint_Error on statically missing component.\n+\t* sem_eval.adb (Eval_Arithmetic_Op): Likewise for static\n+\tdivisions by integer and real zeros.\n+\t* sem_util.adb (Apply_Compile_Time_Constraint_Error): Call\n+\tSet_Raises_Constraint_Error before exiting early in GNATprove\n+\tmode.\n+\n+2021-05-06  Justin Squirek  <squirek@adacore.com>\n+\n+\t* checks.adb (Make_Discriminant_Constraint_Check): Add check for\n+\tnull when the type being converted is an access type.\n+\n+2021-05-06  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_pakd.adb (Expand_Packed_Eq): Fix handling of PATs.\n+\n+2021-05-06  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* osint.adb (Read_Library_Info_From_Full): Cleanup unused\n+\tinitial value.\n+\n+2021-05-06  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* doc/gnat_rm/implementation_defined_characteristics.rst (3.5.7):\n+\tMention the IEEE standard explicitly.  Use current format names.\n+\tDocument assumed rounding mode and new features of I/O support.\n+\t* gnat_rm.texi: Regenerate.\n+\n+2021-05-06  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* init.c (__gnat_init_float): Use full version on Linux too.\n+\n+2021-05-06  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* libgnat/s-fatgen.adb (Valid): Do a bit comparison with 0.0\n+\twhen denormalized numbers are not supported.\n+\n+2021-05-06  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_attr.adb (Check_Enum_Image): Reword comment; add\n+\tCheck_Enumeration_Maps parameter.  Now this routine combines\n+\tboth referencing enumeration literals and checking restriction\n+\tNo_Enumeration_Maps, if required.\n+\t(Analyze_Attribute): Remove duplicated code and instead call\n+\tCheck_Enum_Image.\n+\n+2021-05-06  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Image_Attribute): Remove redundant\n+\tcondition; add a missing header box.\n+\n+2021-05-06  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* doc/gnat_ugn/building_executable_programs_with_gnat.rst: Add\n+\tmention of underscore and fix grammar error in doc for -gnatd.\n+\t* gnat_ugn.texi: Regenerate.\n+\n+2021-05-06  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* Makefile.rtl (GNATRTL_NONTASKING_OBJS): Add s-exponr, s-exnflt\n+\tand s-exnlfl.\n+\t* exp_ch4.adb (Expand_N_Op_Expon): Use RE_Exn_Float for Short_Float.\n+\t* rtsfind.ads (RTU_Id): Add System_Exn_Flt and System_Exn_LFlt.\n+\t(RE_Id): Adjust entries for RE_Exn_Float and RE_Exn_Long_Float.\n+\t(RE_Unit_Table): Likewise.\n+\t* libgnat/s-exnflt.ads: New file.\n+\t* libgnat/s-exnlfl.ads: Likewise.\n+\t* libgnat/s-exnllf.ads: Change to mere instantiation.\n+\t* libgnat/s-exnllf.adb: Move implementation to...\n+\t* libgnat/s-exponr.ads: New generic unit.\n+\t* libgnat/s-exponr.adb: ...here and also make it generic.\n+\t(Expon): Do the computation in double precision internally.\n+\n+2021-05-06  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* lib-writ.adb, osint.adb, osint.ads: Cleanup.\n+\n+2021-05-06  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch3.adb (Expand_Freeze_Array_Type): Remove excessive\n+\tcondition.\n+\t(Expand_N_Object_Declaration): Likewise.\n+\t(Build_Equivalent_Aggregate): Likewise.\n+\t(Initialization_Warning): Likewise; change another excessive\n+\tcondition into assertion.\n+\t* freeze.adb (Freeze_Entity): Remove excessive condition.\n+\n+2021-05-06  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_res.adb (Resolve_If_Expression): If the context of the\n+\texpression is an indexed_component, resolve the expression and\n+\tits dependent_expressions with the base type of the index, to\n+\tensure that an index check is generated when resolving the\n+\tenclosing indexxed_component, and avoid an improper use of\n+\tdiscriminants out of scope, when the index type is\n+\tdiscriminant-dependent.\n+\n+2021-05-06  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* einfo.ads, exp_prag.adb, exp_util.adb: Fix typos.\n+\n 2021-05-05  Piotr Trojanek  <trojanek@adacore.com>\n \n \t* exp_attr.adb (Expand_N_Attribute_Reference): Fix expansion of"}, {"sha": "042f532f697b557a02ccf3225dcaa2464833bff3", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfe82a0cbe72baa723f7d89502cdf59c0e87fff4/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfe82a0cbe72baa723f7d89502cdf59c0e87fff4/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=cfe82a0cbe72baa723f7d89502cdf59c0e87fff4", "patch": "@@ -1,3 +1,20 @@\n+2021-05-06  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/46691\n+\tPR fortran/99819\n+\t* class.c (gfc_build_class_symbol): Remove the error that\n+\tdisables assumed size class arrays. Class array types that are\n+\tnot deferred shape or assumed rank are given a unique name and\n+\tplaced in the procedure namespace.\n+\t* trans-array.c (gfc_trans_g77_array): Obtain the data pointer\n+\tfor class arrays.\n+\t(gfc_trans_dummy_array_bias): Suppress the runtime error for\n+\textent violations in explicit shape class arrays because it\n+\talways fails.\n+\t* trans-expr.c (gfc_conv_procedure_call): Handle assumed size\n+\tclass actual arguments passed to non-descriptor formal args by\n+\tusing the data pointer, stored as the symbol's backend decl.\n+\n 2021-05-05  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/100274"}, {"sha": "dcd47527afd511f01b6ca15048a9bf508f3333ca", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfe82a0cbe72baa723f7d89502cdf59c0e87fff4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfe82a0cbe72baa723f7d89502cdf59c0e87fff4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cfe82a0cbe72baa723f7d89502cdf59c0e87fff4", "patch": "@@ -1,3 +1,65 @@\n+2021-05-06  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c++/83873\n+\tPR preprocessor/97604\n+\t* g++.dg/cpp1y/digit-sep-neg-2.C,\n+\tg++.dg/cpp1y/digit-sep-pp-number.C: New tests.\n+\t* g++.dg/cpp1y/digit-sep-line-neg.C, g++.dg/cpp1y/digit-sep-neg.C:\n+\tAdjust expected messages.\n+\n+2021-05-06  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* gcc.dg/ipa/ipa-sra-1.c (main): Revert change done by\n+\t05193687dde, make the argv again pointer to an array.\n+\n+2021-05-06  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/opt93.adb: Compile only for LP64 targets.\n+\n+2021-05-06  Robin Dapp  <rdapp@linux.ibm.com>\n+\n+\t* lib/target-supports.exp: Add s390 checks for vect conversions.\n+\n+2021-05-06  Robin Dapp  <rdapp@linux.ibm.com>\n+\n+\t* gcc.dg/vect/pr56541.c: Add vect_floatint_cvt.\n+\n+2021-05-06  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/46691\n+\tPR fortran/99819\n+\t* gfortran.dg/class_dummy_6.f90: New test.\n+\t* gfortran.dg/class_dummy_7.f90: New test.\n+\n+2021-05-06  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\tPR testsuite/100355\n+\t* gcc.c-torture/execute/ieee/cdivchkld.x: New.\n+\n+2021-05-06  Marius Hillenbrand  <mhillen@linux.ibm.com>\n+\n+\t* gcc.target/s390/zvector/imm-range-error-1.c: Fix test for\n+\t__builtin_s390_vpdi.\n+\t* gcc.target/s390/zvector/vec-permi.c: New test for builtin\n+\tvec_permi.\n+\n+2021-05-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/94589\n+\t* gcc.dg/pr94589-1.c: New test.\n+\t* gcc.dg/pr94589-2.c: New test.\n+\t* gcc.dg/pr94589-3.c: New test.\n+\t* gcc.dg/pr94589-4.c: New test.\n+\t* g++.dg/opt/pr94589-1.C: New test.\n+\t* g++.dg/opt/pr94589-2.C: New test.\n+\t* g++.dg/opt/pr94589-3.C: New test.\n+\t* g++.dg/opt/pr94589-4.C: New test.\n+\n+2021-05-06  Richard Biener  <rguenther@suse.de>\n+\n+\tPR ipa/100373\n+\t* gcc.dg/pr100373.c: New testcase.\n+\n 2021-05-05  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc.c-torture/execute/20210505-1.c: New test."}, {"sha": "8fef1f9e60d805b17aff9fa37730636ca29b6154", "filename": "include/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfe82a0cbe72baa723f7d89502cdf59c0e87fff4/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfe82a0cbe72baa723f7d89502cdf59c0e87fff4/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=cfe82a0cbe72baa723f7d89502cdf59c0e87fff4", "patch": "@@ -1,3 +1,7 @@\n+2021-05-06  Tom Tromey  <tom@tromey.com>\n+\n+\t* hashtab.h (htab_eq_string): Declare.\n+\n 2021-03-31  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/88115"}, {"sha": "cb31a7605274c0a10fbbcfdaaebd22c1d490ac38", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfe82a0cbe72baa723f7d89502cdf59c0e87fff4/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfe82a0cbe72baa723f7d89502cdf59c0e87fff4/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=cfe82a0cbe72baa723f7d89502cdf59c0e87fff4", "patch": "@@ -1,3 +1,12 @@\n+2021-05-06  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c++/83873\n+\tPR preprocessor/97604\n+\t* lex.c (lex_number): Reject adjacent digit separators here.  Do\n+\tnot allow digit separators before '.' or an exponent with sign.\n+\t* expr.c (cpp_classify_number): Do not check for adjacent digit\n+\tseparators here.\n+\n 2021-05-03  H.J. Lu  <hjl.tools@gmail.com>\n \n \tPR bootstrap/99703"}, {"sha": "d1dae213fd72a7fe419e63f2fe327886666b6881", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfe82a0cbe72baa723f7d89502cdf59c0e87fff4/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfe82a0cbe72baa723f7d89502cdf59c0e87fff4/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=cfe82a0cbe72baa723f7d89502cdf59c0e87fff4", "patch": "@@ -1,3 +1,7 @@\n+2021-05-06  Tom Tromey  <tom@tromey.com>\n+\n+\t* hashtab.c (htab_eq_string): New function.\n+\n 2021-05-04  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* configure.ac: Make test for variables more robust."}, {"sha": "53164d67778f7a6723c7548cc0dcc6c6539a24b5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfe82a0cbe72baa723f7d89502cdf59c0e87fff4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfe82a0cbe72baa723f7d89502cdf59c0e87fff4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=cfe82a0cbe72baa723f7d89502cdf59c0e87fff4", "patch": "@@ -1,3 +1,42 @@\n+2021-05-06  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/stl_algobase.h (__copy_move, __copy_move_backward):\n+\tImprove static_assert messages.\n+\t* testsuite/25_algorithms/copy/58982.cc: Adjust expected output.\n+\t* testsuite/25_algorithms/copy_n/58982.cc: Likewise.\n+\n+2021-05-06  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/std/ranges (filter_view::_Iterator::base): Make the\n+\tconst& overload unconstrained and return a const reference as\n+\tper LWG 3533.  Make unconditionally noexcept.\n+\t(transform_view::_Iterator::base): Likewise.\n+\t(elements_view::_Iterator::base): Likewise.\n+\n+2021-05-06  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/bits/stl_iterator.h (move_iterator::base): Make the\n+\tconst& overload unconstrained and return a const reference as\n+\tper LWG 3391.  Make unconditionally noexcept.\n+\t(counted_iterator::base): Likewise.\n+\t* testsuite/24_iterators/move_iterator/lwg3391.cc: New test.\n+\t* testsuite/24_iterators/move_iterator/move_only.cc: Adjust\n+\thas_member_base concept to decay-copy the result of base().\n+\n+2021-05-06  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/type_traits (remove_cvref_t): Define in terms of\n+\tremove_cvref.\n+\t* testsuite/20_util/remove_cvref/value.cc: Check alias.\n+\n+2021-05-06  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tRevert:\n+\t2021-05-05  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/charconv (__from_chars_alnum): Pass unsigned\n+\tchar to std::isdigit.\n+\n 2021-05-05  Patrick Palka  <ppalka@redhat.com>\n \n \t* include/bits/ranges_util.h (enable_borrowed_range<subrange>):"}]}