{"sha": "dd2139e7dbe039f0c7c16f10a8d33491c810972b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQyMTM5ZTdkYmUwMzlmMGM3YzE2ZjEwYThkMzM0OTFjODEwOTcyYg==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernd.schmidt@analog.com", "date": "2009-02-13T11:41:22Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2009-02-13T11:41:22Z"}, "message": "bfin.c (find_prev_insn_start): New function.\n\n\t* config/bfin/bfin.c (find_prev_insn_start): New function.\n\t(bfin_optimize_loop): Use it in some cases instead of PREV_INSN.\n\t(find_next_insn_start): Move.\n\nFrom-SVN: r144153", "tree": {"sha": "8f9adb60f904a59396358046da85f05a71cc4af7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f9adb60f904a59396358046da85f05a71cc4af7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd2139e7dbe039f0c7c16f10a8d33491c810972b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd2139e7dbe039f0c7c16f10a8d33491c810972b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd2139e7dbe039f0c7c16f10a8d33491c810972b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd2139e7dbe039f0c7c16f10a8d33491c810972b/comments", "author": null, "committer": null, "parents": [{"sha": "b1c92d54c4f880a15084dfdfa1779d59d9736f81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1c92d54c4f880a15084dfdfa1779d59d9736f81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1c92d54c4f880a15084dfdfa1779d59d9736f81"}], "stats": {"total": 55, "additions": 37, "deletions": 18}, "files": [{"sha": "ee937fc9aea9bd51112f338a3cfd17449ebc4bf0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd2139e7dbe039f0c7c16f10a8d33491c810972b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd2139e7dbe039f0c7c16f10a8d33491c810972b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dd2139e7dbe039f0c7c16f10a8d33491c810972b", "patch": "@@ -3,6 +3,10 @@\n \t* loop-iv.c (implies_p): In the final case, test that operands 0\n \tof the two comparisons match.\n \n+\t* config/bfin/bfin.c (find_prev_insn_start): New function.\n+\t(bfin_optimize_loop): Use it in some cases instead of PREV_INSN.\n+\t(find_next_insn_start): Move.\n+\n 2009-02-13  Richard Guenther  <rguenther@suse.de>\n \n \t* configure.ac: Enable LFS."}, {"sha": "dcfbd1f00338b25a92c55542c8f4dc9ce19f7c25", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 33, "deletions": 18, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd2139e7dbe039f0c7c16f10a8d33491c810972b/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd2139e7dbe039f0c7c16f10a8d33491c810972b/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=dd2139e7dbe039f0c7c16f10a8d33491c810972b", "patch": "@@ -3554,7 +3554,36 @@ bfin_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n \n   return cost;\n }\n+\f\n+/* This function acts like NEXT_INSN, but is aware of three-insn bundles and\n+   skips all subsequent parallel instructions if INSN is the start of such\n+   a group.  */\n+static rtx\n+find_next_insn_start (rtx insn)\n+{\n+  if (GET_MODE (insn) == SImode)\n+    {\n+      while (GET_MODE (insn) != QImode)\n+\tinsn = NEXT_INSN (insn);\n+    }\n+  return NEXT_INSN (insn);\n+}\n \n+/* This function acts like PREV_INSN, but is aware of three-insn bundles and\n+   skips all subsequent parallel instructions if INSN is the start of such\n+   a group.  */\n+static rtx\n+find_prev_insn_start (rtx insn)\n+{\n+  insn = PREV_INSN (insn);\n+  gcc_assert (GET_MODE (insn) != SImode);\n+  if (GET_MODE (insn) == QImode)\n+    {\n+      while (GET_MODE (PREV_INSN (insn)) == SImode)\n+\tinsn = PREV_INSN (insn);\n+    }\n+  return insn;\n+}\n \f\n /* Increment the counter for the number of loop instructions in the\n    current function.  */\n@@ -3932,16 +3961,16 @@ bfin_optimize_loop (loop_info loop)\n      - Returns (RTS, RTN, etc.)  */\n \n   bb = loop->tail;\n-  last_insn = PREV_INSN (loop->loop_end);\n+  last_insn = find_prev_insn_start (loop->loop_end);\n \n   while (1)\n     {\n-      for (; last_insn != PREV_INSN (BB_HEAD (bb));\n-\t   last_insn = PREV_INSN (last_insn))\n+      for (; last_insn != BB_HEAD (bb);\n+\t   last_insn = find_prev_insn_start (last_insn))\n \tif (INSN_P (last_insn))\n \t  break;\n \n-      if (last_insn != PREV_INSN (BB_HEAD (bb)))\n+      if (last_insn != BB_HEAD (bb))\n \tbreak;\n \n       if (single_pred_p (bb)\n@@ -4888,20 +4917,6 @@ trapping_loads_p (rtx insn)\n     return may_trap_p (SET_SRC (single_set (insn)));\n }\n \n-/* This function acts like NEXT_INSN, but is aware of three-insn bundles and\n-   skips all subsequent parallel instructions if INSN is the start of such\n-   a group.  */\n-static rtx\n-find_next_insn_start (rtx insn)\n-{\n-  if (GET_MODE (insn) == SImode)\n-    {\n-      while (GET_MODE (insn) != QImode)\n-\tinsn = NEXT_INSN (insn);\n-    }\n-  return NEXT_INSN (insn);\n-}\n-\n /* Return INSN if it is of TYPE_MCLD.  Alternatively, if INSN is the start of\n    a three-insn bundle, see if one of them is a load and return that if so.\n    Return NULL_RTX if the insn does not contain loads.  */"}]}