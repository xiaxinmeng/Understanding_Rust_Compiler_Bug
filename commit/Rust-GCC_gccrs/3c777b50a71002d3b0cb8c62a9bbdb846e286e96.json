{"sha": "3c777b50a71002d3b0cb8c62a9bbdb846e286e96", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M3NzdiNTBhNzEwMDJkM2IwY2I4YzYyYTliYmRiODQ2ZTI4NmU5Ng==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-20T09:53:11Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-20T09:53:11Z"}, "message": "[multiple changes]\n\n2015-10-20  Thomas Quinot  <quinot@adacore.com>\n\n\t* Makefile.rtl: add the following...\n\t* g-binenv.ads, g-binenv.adb: New unit providing runtime access\n\tto bind time captured values (\"bind environment\")\n\t* init.c: declare new global variable __gl_bind_env_addr.\n\t* bindgen.ads, bindgen.adb (Set_Bind_Env): record a bind\n\tenvironment key=value pair.\n\t(Gen_Bind_Env_String): helper to produce the bind environment data\n\tcalled  in the binder generated file.\n\t(Gen_Output_File_Ada): Call the above (Gen_Adainit): Set\n\t__gl_bind_env_addr accordingly.\n\t* switch-b.adb: Support for command line switch -V (user interface\n\tto set a build environment key=value pair)\n\t* bindusg.adb: Document the above\n\n2015-10-20  Vincent Celier  <celier@adacore.com>\n\n\t* sem_prag.adb (Analyse_Pragma: Pragma Pure): Do not set the\n\tentity as Pure if Debug_Flag_U is set.\n\nFrom-SVN: r229031", "tree": {"sha": "d31771f34536bd99b3f7a1a240d50799a237c1ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d31771f34536bd99b3f7a1a240d50799a237c1ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c777b50a71002d3b0cb8c62a9bbdb846e286e96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c777b50a71002d3b0cb8c62a9bbdb846e286e96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c777b50a71002d3b0cb8c62a9bbdb846e286e96", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c777b50a71002d3b0cb8c62a9bbdb846e286e96/comments", "author": null, "committer": null, "parents": [{"sha": "7188885e569f18885615d4064e393d4c6db77e80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7188885e569f18885615d4064e393d4c6db77e80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7188885e569f18885615d4064e393d4c6db77e80"}], "stats": {"total": 365, "additions": 342, "deletions": 23}, "files": [{"sha": "f3e3d66344b867606c4df9428c8922c15b63867a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c777b50a71002d3b0cb8c62a9bbdb846e286e96/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c777b50a71002d3b0cb8c62a9bbdb846e286e96/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3c777b50a71002d3b0cb8c62a9bbdb846e286e96", "patch": "@@ -1,3 +1,24 @@\n+2015-10-20  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* Makefile.rtl: add the following...\n+\t* g-binenv.ads, g-binenv.adb: New unit providing runtime access\n+\tto bind time captured values (\"bind environment\")\n+\t* init.c: declare new global variable __gl_bind_env_addr.\n+\t* bindgen.ads, bindgen.adb (Set_Bind_Env): record a bind\n+\tenvironment key=value pair.\n+\t(Gen_Bind_Env_String): helper to produce the bind environment data\n+\tcalled  in the binder generated file.\n+\t(Gen_Output_File_Ada): Call the above (Gen_Adainit): Set\n+\t__gl_bind_env_addr accordingly.\n+\t* switch-b.adb: Support for command line switch -V (user interface\n+\tto set a build environment key=value pair)\n+\t* bindusg.adb: Document the above\n+\n+2015-10-20  Vincent Celier  <celier@adacore.com>\n+\n+\t* sem_prag.adb (Analyse_Pragma: Pragma Pure): Do not set the\n+\tentity as Pure if Debug_Flag_U is set.\n+\n 2015-10-20  Bob Duff  <duff@adacore.com>\n \n \t* output.adb (Write_Int): Work with negative numbers in order to avoid"}, {"sha": "5b71295dfa5768499ad8e071370bf4dbd897e641", "filename": "gcc/ada/Makefile.rtl", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c777b50a71002d3b0cb8c62a9bbdb846e286e96/gcc%2Fada%2FMakefile.rtl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c777b50a71002d3b0cb8c62a9bbdb846e286e96/gcc%2Fada%2FMakefile.rtl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.rtl?ref=3c777b50a71002d3b0cb8c62a9bbdb846e286e96", "patch": "@@ -380,6 +380,7 @@ GNATRTL_NONTASKING_OBJS= \\\n   directio$(objext) \\\n   g-arrspl$(objext) \\\n   g-awk$(objext) \\\n+  g-binenv$(objext) \\\n   g-bubsor$(objext) \\\n   g-busora$(objext) \\\n   g-busorg$(objext) \\"}, {"sha": "eb853b506f20df57daedaf89059e04433580094b", "filename": "gcc/ada/bindgen.adb", "status": "modified", "additions": 142, "deletions": 5, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c777b50a71002d3b0cb8c62a9bbdb846e286e96/gcc%2Fada%2Fbindgen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c777b50a71002d3b0cb8c62a9bbdb846e286e96/gcc%2Fada%2Fbindgen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindgen.adb?ref=3c777b50a71002d3b0cb8c62a9bbdb846e286e96", "patch": "@@ -35,6 +35,7 @@ with Osint;    use Osint;\n with Osint.B;  use Osint.B;\n with Output;   use Output;\n with Rident;   use Rident;\n+with Stringt;  use Stringt;\n with Table;    use Table;\n with Targparm; use Targparm;\n with Types;    use Types;\n@@ -43,6 +44,7 @@ with System.OS_Lib;  use System.OS_Lib;\n with System.WCh_Con; use System.WCh_Con;\n \n with GNAT.Heap_Sort_A; use GNAT.Heap_Sort_A;\n+with GNAT.HTable;\n \n package body Bindgen is\n \n@@ -89,6 +91,9 @@ package body Bindgen is\n    Lib_Final_Built : Boolean := False;\n    --  Flag indicating whether the finalize_library rountine has been built\n \n+   Bind_Env_String_Built : Boolean := False;\n+   --  Flag indicating whether a bind environment string has been built\n+\n    CodePeer_Wrapper_Name : constant String := \"call_main_subprogram\";\n    --  For CodePeer, introduce a wrapper subprogram which calls the\n    --  user-defined main subprogram.\n@@ -124,6 +129,22 @@ package body Bindgen is\n      Table_Increment      => 200,\n      Table_Name           => \"PSD_Pragma_Settings\");\n \n+   ----------------------------\n+   -- Bind_Environment Table --\n+   ----------------------------\n+\n+   subtype Header_Num is Int range 0 .. 36;\n+\n+   function Hash (Nam : Name_Id) return Header_Num;\n+\n+   package Bind_Environment is new GNAT.HTable.Simple_HTable\n+     (Header_Num => Header_Num,\n+      Element    => Name_Id,\n+      No_Element => No_Name,\n+      Key        => Name_Id,\n+      Hash       => Hash,\n+      Equal      => \"=\");\n+\n    ----------------------\n    -- Run-Time Globals --\n    ----------------------\n@@ -246,6 +267,9 @@ package body Bindgen is\n    procedure Gen_Adafinal;\n    --  Generate the Adafinal procedure\n \n+   procedure Gen_Bind_Env_String;\n+   --  Generate the bind environment buffer\n+\n    procedure Gen_CodePeer_Wrapper;\n    --  For CodePeer, generate wrapper which calls user-defined main subprogram\n \n@@ -369,6 +393,10 @@ package body Bindgen is\n    --  First writes its argument (using Set_String (S)), then writes out the\n    --  contents of statement buffer up to Last, and reset Last to 0\n \n+   procedure Write_Bind_Line (S : String);\n+   --  Write S (an LF-terminated string) to the binder file (for use with\n+   --  Set_Special_Output).\n+\n    ------------------\n    -- Gen_Adafinal --\n    ------------------\n@@ -594,6 +622,9 @@ package body Bindgen is\n          WBI (\"      Leap_Seconds_Support : Integer;\");\n          WBI (\"      pragma Import (C, Leap_Seconds_Support, \" &\n               \"\"\"__gl_leap_seconds_support\"\");\");\n+         WBI (\"      Bind_Env_Addr : System.Address;\");\n+         WBI (\"      pragma Import (C, Bind_Env_Addr, \" &\n+              \"\"\"__gl_bind_env_addr\"\");\");\n \n          --  Import entry point for elaboration time signal handler\n          --  installation, and indication of if it's been called previously.\n@@ -663,6 +694,8 @@ package body Bindgen is\n                  & \"\"\"__gnat_freeze_dispatching_domains\"\");\");\n          end if;\n \n+         --  Start of processing for Adainit\n+\n          WBI (\"   begin\");\n          WBI (\"      if Is_Elaborated then\");\n          WBI (\"         return;\");\n@@ -793,6 +826,10 @@ package body Bindgen is\n          Set_String (\";\");\n          Write_Statement_Buffer;\n \n+         if Bind_Env_String_Built then\n+            WBI (\"      Bind_Env_Addr := Bind_Env'Address;\");\n+         end if;\n+\n          --  Generate call to Install_Handler\n \n          WBI (\"\");\n@@ -897,6 +934,62 @@ package body Bindgen is\n       WBI (\"\");\n    end Gen_Adainit;\n \n+   -------------------------\n+   -- Gen_Bind_Env_String --\n+   -------------------------\n+\n+   procedure Gen_Bind_Env_String is\n+      KN, VN : Name_Id := No_Name;\n+      Amp    : Character;\n+\n+      procedure Write_Name_With_Len (Nam : Name_Id);\n+      --  Write Nam as a string literal, prefixed with one\n+      --  character encoding Nam's length.\n+\n+      -------------------------\n+      -- Write_Name_With_Len --\n+      -------------------------\n+\n+      procedure Write_Name_With_Len (Nam : Name_Id) is\n+      begin\n+         Get_Name_String (Nam);\n+\n+         Start_String;\n+         Store_String_Char (Character'Val (Name_Len));\n+         Store_String_Chars (Name_Buffer (1 .. Name_Len));\n+\n+         Write_String_Table_Entry (End_String);\n+      end Write_Name_With_Len;\n+\n+   --  Start of processing for Gen_Bind_Env_String\n+\n+   begin\n+      Bind_Environment.Get_First (KN, VN);\n+      if VN = No_Name then\n+         return;\n+      end if;\n+\n+      Set_Special_Output (Write_Bind_Line'Access);\n+\n+      WBI (\"   Bind_Env : aliased constant String :=\");\n+      Amp := ' ';\n+      while VN /= No_Name loop\n+         Write_Str (\"     \" & Amp & ' ');\n+         Write_Name_With_Len (KN);\n+         Write_Str (\" & \");\n+         Write_Name_With_Len (VN);\n+         Write_Eol;\n+\n+         Bind_Environment.Get_Next (KN, VN);\n+         Amp := '&';\n+      end loop;\n+      WBI (\"     & ASCII.NUL;\");\n+\n+      Set_Special_Output (null);\n+\n+      Bind_Env_String_Built := True;\n+   end Gen_Bind_Env_String;\n+\n    --------------------------\n    -- Gen_CodePeer_Wrapper --\n    --------------------------\n@@ -2279,13 +2372,18 @@ package body Bindgen is\n             WBI (\"\");\n          end if;\n \n-         --  The B.1 (39) implementation advice says that the adainit/adafinal\n-         --  routines should be idempotent. Generate a flag to ensure that.\n-         --  This is not needed if we are suppressing the standard library\n-         --  since it would never be referenced.\n-\n          if not Suppress_Standard_Library_On_Target then\n+\n+            --  The B.1(39) implementation advice says that the adainit\n+            --  and adafinal routines should be idempotent. Generate a flag to\n+            --  ensure that. This is not needed if we are suppressing the\n+            --  standard library since it would never be referenced.\n+\n             WBI (\"   Is_Elaborated : Boolean := False;\");\n+\n+            --  Generate bind environment string\n+\n+            Gen_Bind_Env_String;\n          end if;\n \n          WBI (\"\");\n@@ -2656,6 +2754,15 @@ package body Bindgen is\n       return False;\n    end Has_Finalizer;\n \n+   ----------\n+   -- Hash --\n+   ----------\n+\n+   function Hash (Nam : Name_Id) return Header_Num is\n+   begin\n+      return Int (Nam - Names_Low_Bound) rem Header_Num'Last;\n+   end Hash;\n+\n    ----------------------\n    -- Lt_Linker_Option --\n    ----------------------\n@@ -2754,6 +2861,25 @@ package body Bindgen is\n       end loop;\n    end Resolve_Binder_Options;\n \n+   ------------------\n+   -- Set_Bind_Env --\n+   ------------------\n+\n+   procedure Set_Bind_Env (Key, Value : String) is\n+   begin\n+      --  The lengths of Key and Value are stored as single bytes\n+\n+      if Key'Length > 255 then\n+         Osint.Fail (\"bind environment key \"\"\" & Key & \"\"\" too long\");\n+      end if;\n+\n+      if Value'Length > 255 then\n+         Osint.Fail (\"bind environment value \"\"\" & Value & \"\"\" too long\");\n+      end if;\n+\n+      Bind_Environment.Set (Name_Find_Str (Key), Name_Find_Str (Value));\n+   end Set_Bind_Env;\n+\n    -----------------\n    -- Set_Boolean --\n    -----------------\n@@ -2945,6 +3071,17 @@ package body Bindgen is\n       Set_Int (Unum);\n    end Set_Unit_Number;\n \n+   ---------------------\n+   -- Write_Bind_Line --\n+   ---------------------\n+\n+   procedure Write_Bind_Line (S : String) is\n+   begin\n+      --  Need to strip trailing LF from S\n+\n+      WBI (S (S'First .. S'Last - 1));\n+   end Write_Bind_Line;\n+\n    ----------------------------\n    -- Write_Statement_Buffer --\n    ----------------------------"}, {"sha": "2f4cc78c483a012d58ac0ba9c9fa367267d5c7d9", "filename": "gcc/ada/bindgen.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c777b50a71002d3b0cb8c62a9bbdb846e286e96/gcc%2Fada%2Fbindgen.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c777b50a71002d3b0cb8c62a9bbdb846e286e96/gcc%2Fada%2Fbindgen.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindgen.ads?ref=3c777b50a71002d3b0cb8c62a9bbdb846e286e96", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -37,4 +37,8 @@ package Bindgen is\n    procedure Gen_Output_File (Filename : String);\n    --  Filename is the full path name of the binder output file\n \n+   procedure Set_Bind_Env (Key, Value : String);\n+   --  Add (Key, Value) pair to bind environment. These associations\n+   --  are made available at run time using System.Bind_Environment.\n+\n end Bindgen;"}, {"sha": "e5c0e362faacf01c4d7292030172a3ae5efec78b", "filename": "gcc/ada/bindusg.adb", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c777b50a71002d3b0cb8c62a9bbdb846e286e96/gcc%2Fada%2Fbindusg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c777b50a71002d3b0cb8c62a9bbdb846e286e96/gcc%2Fada%2Fbindusg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindusg.adb?ref=3c777b50a71002d3b0cb8c62a9bbdb846e286e96", "patch": "@@ -4,9 +4,9 @@\n --                                                                          --\n --                             B I N D U S G                                --\n --                                                                          --\n---                                B o d y                                   --\n+--                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -228,6 +228,10 @@ package body Bindusg is\n       Write_Line (\"  -v        Verbose mode. Error messages, \" &\n                   \"header, summary output to stdout\");\n \n+      --  Line for -V switch\n+\n+      Write_Line (\"  -Vkey=val Record bind-time variable key \" &\n+                  \"with value val\");\n       --  Line for -w switch\n \n       Write_Line (\"  -wx       Warning mode. (x=s/e for \" &"}, {"sha": "13e414d46fa6b362c1ebe12fa40a216efbf050e0", "filename": "gcc/ada/g-binenv.adb", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c777b50a71002d3b0cb8c62a9bbdb846e286e96/gcc%2Fada%2Fg-binenv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c777b50a71002d3b0cb8c62a9bbdb846e286e96/gcc%2Fada%2Fg-binenv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-binenv.adb?ref=3c777b50a71002d3b0cb8c62a9bbdb846e286e96", "patch": "@@ -0,0 +1,83 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                  GNAT RUN-TIME LIBRARY (GNARL) COMPONENTS                --\n+--                                                                          --\n+--                  G N A T . B I N D _ E N V I R O N M E N T               --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--             Copyright (C) 2015, Free Software Foundation, Inc.           --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNARL was developed by the GNARL team at Florida State University.       --\n+-- Extensive contributions were provided by AdaCore.                        --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with System;\n+\n+package body GNAT.Bind_Environment is\n+\n+   ---------\n+   -- Get --\n+   ---------\n+\n+   function Get (Key : String) return String is\n+      use type System.Address;\n+\n+      Bind_Env_Addr : System.Address;\n+      pragma Import (C, Bind_Env_Addr, \"__gl_bind_env_addr\");\n+      --  Variable provided by init.c/s-init.ads, and initialized by\n+      --  the binder generated file.\n+\n+      Bind_Env : String (Positive);\n+      for Bind_Env'Address use Bind_Env_Addr;\n+      pragma Import (Ada, Bind_Env);\n+      --  Import Bind_Env string from binder file. Note that we import\n+      --  it here as a string with maximum boundaries. The \"real\" end\n+      --  of the string is indicated by a NUL byte.\n+\n+      Index, KLen, VLen : Integer;\n+\n+   begin\n+      if Bind_Env_Addr = System.Null_Address then\n+         return \"\";\n+      end if;\n+\n+      Index := Bind_Env'First;\n+      loop\n+         --  Index points to key length\n+\n+         VLen := 0;\n+         KLen := Character'Pos (Bind_Env (Index));\n+         exit when KLen = 0;\n+\n+         Index := Index + KLen + 1;\n+\n+         --  Index points to value length\n+\n+         VLen := Character'Pos (Bind_Env (Index));\n+         exit when Bind_Env (Index - KLen .. Index - 1) = Key;\n+\n+         Index := Index + VLen + 1;\n+      end loop;\n+\n+      return Bind_Env (Index + 1 .. Index + VLen);\n+   end Get;\n+\n+end GNAT.Bind_Environment;"}, {"sha": "e3c181fafa2ff87bf6b63a5ad91ac8a9e0d7256f", "filename": "gcc/ada/g-binenv.ads", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c777b50a71002d3b0cb8c62a9bbdb846e286e96/gcc%2Fada%2Fg-binenv.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c777b50a71002d3b0cb8c62a9bbdb846e286e96/gcc%2Fada%2Fg-binenv.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-binenv.ads?ref=3c777b50a71002d3b0cb8c62a9bbdb846e286e96", "patch": "@@ -0,0 +1,40 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                  GNAT RUN-TIME LIBRARY (GNARL) COMPONENTS                --\n+--                                                                          --\n+--                  G N A T . B I N D _ E N V I R O N M E N T               --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--             Copyright (C) 2015, Free Software Foundation, Inc.           --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNARL was developed by the GNARL team at Florida State University.       --\n+-- Extensive contributions were provided by AdaCore.                        --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+package GNAT.Bind_Environment is\n+\n+   pragma Pure;\n+\n+   function Get (Key : String) return String;\n+   --  Return the value associated with Key at bind time,\n+   --  or an empty string if not found.\n+\n+end GNAT.Bind_Environment;"}, {"sha": "3a4ec5318e0a7a5ecd853a01bd599a95ae339e1b", "filename": "gcc/ada/gnatbind.adb", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c777b50a71002d3b0cb8c62a9bbdb846e286e96/gcc%2Fada%2Fgnatbind.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c777b50a71002d3b0cb8c62a9bbdb846e286e96/gcc%2Fada%2Fgnatbind.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatbind.adb?ref=3c777b50a71002d3b0cb8c62a9bbdb846e286e96", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -560,7 +560,16 @@ begin\n       Shared_Libgnat := (Shared_Libgnat_Default = SHARED);\n    end;\n \n-   --  Scan the switches and arguments\n+   --  Carry out package initializations. These are initializations which\n+   --  might logically be performed at elaboration time, and we decide to be\n+   --  consistent. Like elaboration, the order in which these calls are made\n+   --  is in some cases important.\n+\n+   Csets.Initialize;\n+   Snames.Initialize;\n+\n+   --  Scan the switches and arguments. Note that Snames must already be\n+   --  initialized (for processing of the -V switch).\n \n    --  First, scan to detect --version and/or --help\n \n@@ -616,14 +625,6 @@ begin\n \n    Osint.Add_Default_Search_Dirs;\n \n-   --  Carry out package initializations. These are initializations which\n-   --  might logically be performed at elaboration time, and we decide to be\n-   --  consistent. Like elaboration, the order in which these calls are made\n-   --  is in some cases important.\n-\n-   Csets.Initialize;\n-   Snames.Initialize;\n-\n    --  Acquire target parameters\n \n    Targparm.Get_Target_Parameters;"}, {"sha": "6f6c9baee7119a3b04a5855b457a97c830be42ed", "filename": "gcc/ada/impunit.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c777b50a71002d3b0cb8c62a9bbdb846e286e96/gcc%2Fada%2Fimpunit.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c777b50a71002d3b0cb8c62a9bbdb846e286e96/gcc%2Fada%2Fimpunit.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fimpunit.adb?ref=3c777b50a71002d3b0cb8c62a9bbdb846e286e96", "patch": "@@ -238,6 +238,7 @@ package body Impunit is\n     (\"g-alvevi\", F),  -- GNAT.Altivec.Vector_Views\n     (\"g-arrspl\", F),  -- GNAT.Array_Split\n     (\"g-awk   \", F),  -- GNAT.AWK\n+    (\"g-binenv\", F),  -- GNAT.Bind_Environment\n     (\"g-boubuf\", F),  -- GNAT.Bounded_Buffers\n     (\"g-boumai\", F),  -- GNAT.Bounded_Mailboxes\n     (\"g-bubsor\", F),  -- GNAT.Bubble_Sort"}, {"sha": "e40487f04b130d80c34211559f4738cffac291ee", "filename": "gcc/ada/init.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c777b50a71002d3b0cb8c62a9bbdb846e286e96/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c777b50a71002d3b0cb8c62a9bbdb846e286e96/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=3c777b50a71002d3b0cb8c62a9bbdb846e286e96", "patch": "@@ -93,7 +93,9 @@ extern void Raise_From_Signal_Handler (struct Exception_Data *, const char *);\n extern void Raise_From_Signal_Handler (struct Exception_Data *, const char *);\n #endif\n \n-/* Global values computed by the binder.  */\n+/* Global values computed by the binder.  Note that these variables are\n+   declared here, not in the binder file, to avoid having unresolved\n+   references in the shared libgnat.  */\n int   __gl_main_priority                 = -1;\n int   __gl_main_cpu                      = -1;\n int   __gl_time_slice_val                = -1;\n@@ -111,6 +113,7 @@ int   __gl_detect_blocking               = 0;\n int   __gl_default_stack_size            = -1;\n int   __gl_leap_seconds_support          = 0;\n int   __gl_canonical_streams             = 0;\n+char *__gl_bind_env_addr                 = NULL;\n \n /* This value is not used anymore, but kept for bootstrapping purpose.  */\n int   __gl_zero_cost_exceptions          = 0;"}, {"sha": "41763de72ecb81555b8762e8e01d5820b9dbeed0", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c777b50a71002d3b0cb8c62a9bbdb846e286e96/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c777b50a71002d3b0cb8c62a9bbdb846e286e96/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=3c777b50a71002d3b0cb8c62a9bbdb846e286e96", "patch": "@@ -18580,9 +18580,12 @@ package body Sem_Prag is\n             --  purposes of legality checks and removal of ignored Ghost code.\n \n             Mark_Pragma_As_Ghost (N, Ent);\n-            Set_Is_Pure (Ent);\n-            Set_Has_Pragma_Pure (Ent);\n-            Set_Suppress_Elaboration_Warnings (Ent);\n+\n+            if not Debug_Flag_U then\n+               Set_Is_Pure (Ent);\n+               Set_Has_Pragma_Pure (Ent);\n+               Set_Suppress_Elaboration_Warnings (Ent);\n+            end if;\n          end Pure;\n \n          -------------------"}, {"sha": "2e58fbc5c29de512047993603bd9aa30cc50b2eb", "filename": "gcc/ada/switch-b.adb", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c777b50a71002d3b0cb8c62a9bbdb846e286e96/gcc%2Fada%2Fswitch-b.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c777b50a71002d3b0cb8c62a9bbdb846e286e96/gcc%2Fada%2Fswitch-b.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-b.adb?ref=3c777b50a71002d3b0cb8c62a9bbdb846e286e96", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2001-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2001-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -23,6 +23,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n+with Bindgen;\n with Debug;  use Debug;\n with Osint;  use Osint;\n with Opt;    use Opt;\n@@ -417,6 +418,26 @@ package body Switch.B is\n             Ptr := Ptr + 1;\n             Verbose_Mode := True;\n \n+         --  Processing for V switch\n+\n+         when 'V' =>\n+            declare\n+               Eq : Integer;\n+            begin\n+               Ptr := Ptr + 1;\n+               Eq := Ptr;\n+               while Eq <= Max and then Switch_Chars (Eq) /= '=' loop\n+                  Eq := Eq + 1;\n+               end loop;\n+               if Eq = Ptr or else Eq = Max then\n+                  Bad_Switch (Switch_Chars);\n+               end if;\n+               Bindgen.Set_Bind_Env\n+                 (Key   => Switch_Chars (Ptr .. Eq - 1),\n+                  Value => Switch_Chars (Eq + 1 .. Max));\n+               Ptr := Max + 1;\n+            end;\n+\n          --  Processing for w switch\n \n          when 'w' =>"}]}