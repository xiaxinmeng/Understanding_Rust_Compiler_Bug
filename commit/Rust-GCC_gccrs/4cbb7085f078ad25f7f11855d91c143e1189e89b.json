{"sha": "4cbb7085f078ad25f7f11855d91c143e1189e89b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGNiYjcwODVmMDc4YWQyNWY3ZjExODU1ZDkxYzE0M2UxMTg5ZTg5Yg==", "commit": {"author": {"name": "Paul A. Clarke", "email": "pc@us.ibm.com", "date": "2018-12-06T22:14:55Z"}, "committer": {"name": "Paul Clarke", "email": "pc@gcc.gnu.org", "date": "2018-12-06T22:14:55Z"}, "message": "[rs6000] Enable x86-compat vector intrinsics testing\n\nThe testsuite tests for the compatibility implementations of x86 vector\nintrinsics for \"powerpc\" had been inadvertently made to PASS\nwithout actually running the test code.\n\nThis patch removes the code which kept the tests from running the actual\ntest code.\n\n2018-12-06  Paul A. Clarke  <pc@us.ibm.com>\n\n[gcc/testsuite]\n\n\tPR target/88316\n\t* gcc.target/powerpc/bmi-check.h: Remove test for\n\t__BUILTIN_CPU_SUPPORTS__, thereby enabling test code to run.\n\t* gcc.target/powerpc/bmi2-check.h: Likewise.\n\t* gcc.target/powerpc/mmx-check.h: Likewise.\n\t* gcc.target/powerpc/sse-check.h: Likewise.\n\t* gcc.target/powerpc/sse2-check.h: Likewise.\n\t* gcc.target/powerpc/sse3-check.h: Likewise.\n\nFrom-SVN: r266870", "tree": {"sha": "557c256ed6fc2cdfc7759bcf70c5869e77a722b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/557c256ed6fc2cdfc7759bcf70c5869e77a722b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4cbb7085f078ad25f7f11855d91c143e1189e89b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cbb7085f078ad25f7f11855d91c143e1189e89b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cbb7085f078ad25f7f11855d91c143e1189e89b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cbb7085f078ad25f7f11855d91c143e1189e89b/comments", "author": {"login": "ThinkOpenly", "id": 12301795, "node_id": "MDQ6VXNlcjEyMzAxNzk1", "avatar_url": "https://avatars.githubusercontent.com/u/12301795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThinkOpenly", "html_url": "https://github.com/ThinkOpenly", "followers_url": "https://api.github.com/users/ThinkOpenly/followers", "following_url": "https://api.github.com/users/ThinkOpenly/following{/other_user}", "gists_url": "https://api.github.com/users/ThinkOpenly/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThinkOpenly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThinkOpenly/subscriptions", "organizations_url": "https://api.github.com/users/ThinkOpenly/orgs", "repos_url": "https://api.github.com/users/ThinkOpenly/repos", "events_url": "https://api.github.com/users/ThinkOpenly/events{/privacy}", "received_events_url": "https://api.github.com/users/ThinkOpenly/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "98e07d5c540a3e094c4e2e0377d530042d2df72f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98e07d5c540a3e094c4e2e0377d530042d2df72f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98e07d5c540a3e094c4e2e0377d530042d2df72f"}], "stats": {"total": 124, "additions": 24, "deletions": 100}, "files": [{"sha": "708c8c00887099382938bcc7bf3b5b6a39aec494", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cbb7085f078ad25f7f11855d91c143e1189e89b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cbb7085f078ad25f7f11855d91c143e1189e89b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4cbb7085f078ad25f7f11855d91c143e1189e89b", "patch": "@@ -1,3 +1,14 @@\n+2018-12-06  Paul A. Clarke  <pc@us.ibm.com>\n+\n+\tPR target/88316\n+\t* gcc.target/powerpc/bmi-check.h: Remove test for\n+\t__BUILTIN_CPU_SUPPORTS__, thereby enabling test code to run.\n+\t* gcc.target/powerpc/bmi2-check.h: Likewise.\n+\t* gcc.target/powerpc/mmx-check.h: Likewise.\n+\t* gcc.target/powerpc/sse-check.h: Likewise.\n+\t* gcc.target/powerpc/sse2-check.h: Likewise.\n+\t* gcc.target/powerpc/sse3-check.h: Likewise.\n+\n 2018-12-06  Paul A. Clarke  <pc@us.ibm.com>\n \n \tPR target/88316"}, {"sha": "907cef788653c260634bdb3dbbfda3c9c56f1c09", "filename": "gcc/testsuite/gcc.target/powerpc/bmi-check.h", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cbb7085f078ad25f7f11855d91c143e1189e89b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cbb7085f078ad25f7f11855d91c143e1189e89b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi-check.h?ref=4cbb7085f078ad25f7f11855d91c143e1189e89b", "patch": "@@ -13,19 +13,9 @@ do_test (void)\n int\n main ()\n {\n-#ifdef __BUILTIN_CPU_SUPPORTS__\n-  /* Need 64-bit for 64-bit longs as single instruction.  */\n-  if ( __builtin_cpu_supports (\"ppc64\") )\n-    {\n-      do_test ();\n+  do_test ();\n #ifdef DEBUG\n-      printf (\"PASSED\\n\");\n+  printf (\"PASSED\\n\");\n #endif\n-    }\n-#ifdef DEBUG\n-  else\n-    printf (\"SKIPPED\\n\");\n-#endif\n-#endif /* __BUILTIN_CPU_SUPPORTS__ */\n   return 0;\n }"}, {"sha": "389593f318c58f3ed26bdf603c97c4b750b6dc7d", "filename": "gcc/testsuite/gcc.target/powerpc/bmi2-check.h", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cbb7085f078ad25f7f11855d91c143e1189e89b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi2-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cbb7085f078ad25f7f11855d91c143e1189e89b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi2-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbmi2-check.h?ref=4cbb7085f078ad25f7f11855d91c143e1189e89b", "patch": "@@ -13,22 +13,10 @@ do_test (void)\n int\n main ()\n {\n-#ifdef __BUILTIN_CPU_SUPPORTS__\n-  /* The BMI2 test for pext test requires the Bit Permute doubleword\n-     (bpermd) instruction added in PowerISA 2.06 along with the VSX\n-     facility.  So we can test for arch_2_06.  */\n-  if ( __builtin_cpu_supports (\"arch_2_06\") )\n-    {\n-      do_test ();\n+  do_test ();\n #ifdef DEBUG\n-      printf (\"PASSED\\n\");\n+  printf (\"PASSED\\n\");\n #endif\n-    }\n-#ifdef DEBUG\n-  else\n-    printf (\"SKIPPED\\n\");\n-#endif\n-#endif /* __BUILTIN_CPU_SUPPORTS__ */\n   return 0;\n }\n "}, {"sha": "3d083805f2041068254eedf2197208a67199afb4", "filename": "gcc/testsuite/gcc.target/powerpc/mmx-check.h", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cbb7085f078ad25f7f11855d91c143e1189e89b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cbb7085f078ad25f7f11855d91c143e1189e89b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-check.h?ref=4cbb7085f078ad25f7f11855d91c143e1189e89b", "patch": "@@ -13,23 +13,9 @@ do_test (void)\n int\n main ()\n   {\n-#ifdef __BUILTIN_CPU_SUPPORTS__\n-    /* Many MMX intrinsics are simpler / faster to implement by\n-       transferring the __m64 (long int) to vector registers for SIMD\n-       operations.  To be efficient we also need the direct register\n-       transfer instructions from POWER8.  So we can test for\n-       arch_2_07.  */\n-    if ( __builtin_cpu_supports (\"arch_2_07\") )\n-      {\n-\tdo_test ();\n+    do_test ();\n #ifdef DEBUG\n-\tprintf (\"PASSED\\n\");\n+    printf (\"PASSED\\n\");\n #endif\n-      }\n-#ifdef DEBUG\n-    else\n-      printf (\"SKIPPED\\n\");\n-#endif\n-#endif /* __BUILTIN_CPU_SUPPORTS__ */\n     return 0;\n   }"}, {"sha": "513417a592b9fb7c3cd7d0391f3db205c40ec57d", "filename": "gcc/testsuite/gcc.target/powerpc/sse-check.h", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cbb7085f078ad25f7f11855d91c143e1189e89b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cbb7085f078ad25f7f11855d91c143e1189e89b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-check.h?ref=4cbb7085f078ad25f7f11855d91c143e1189e89b", "patch": "@@ -1,7 +1,7 @@\n #include <stdlib.h>\n #include \"m128-check.h\"\n \n-#define DEBUG 1\n+// #define DEBUG 1\n \n #define TEST sse_test\n \n@@ -17,25 +17,10 @@ do_test (void)\n int\n main ()\n   {\n-#ifdef __BUILTIN_CPU_SUPPORTS__\n-    /* Most SSE intrinsic operations can be implemented via VMX\n-       instructions, but some operations may be faster / simpler\n-       using the POWER8 VSX instructions.  This is especially true\n-       when we are transferring / converting to / from __m64 types.\n-       The direct register transfer instructions from POWER8 are\n-       especially important.  So we test for arch_2_07.  */\n-    if ( __builtin_cpu_supports (\"arch_2_07\") )\n-      {\n-\tdo_test ();\n+    do_test ();\n #ifdef DEBUG\n-\tprintf (\"PASSED\\n\");\n+    printf (\"PASSED\\n\");\n #endif\n-      }\n-#ifdef DEBUG\n-    else\n-    printf (\"SKIPPED\\n\");\n-#endif\n-#endif /* __BUILTIN_CPU_SUPPORTS__ */\n     return 0;\n   }\n "}, {"sha": "f46ba359406dabbdbd0a47548f2f2489fb0b970c", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-check.h", "status": "modified", "additions": 2, "deletions": 23, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cbb7085f078ad25f7f11855d91c143e1189e89b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cbb7085f078ad25f7f11855d91c143e1189e89b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-check.h?ref=4cbb7085f078ad25f7f11855d91c143e1189e89b", "patch": "@@ -9,8 +9,6 @@\n /* define DEBUG replace abort with printf on error.  */\n //#define DEBUG 1\n \n-#if 1\n-\n #define TEST sse2_test\n \n static void sse2_test (void);\n@@ -25,28 +23,9 @@ do_test (void)\n int\n main ()\n   {\n-#ifdef __BUILTIN_CPU_SUPPORTS__\n-    /* Most SSE2 (vector double) intrinsic operations require VSX\n-       instructions, but some operations may need only VMX\n-       instructions.  This also true for SSE2 scalar doubles as they\n-       imply that \"other half\" of the vector remains unchanged or set\n-       to zeros.  The VSX scalar operations leave ther \"other half\"\n-       undefined, and require additional merge operations.\n-       Some conversions (to/from integer) need the  direct register\n-       transfer instructions from POWER8 for best performance.\n-       So we test for arch_2_07.  */\n-    if ( __builtin_cpu_supports (\"arch_2_07\") )\n-      {\n-\tdo_test ();\n-#ifdef DEBUG\n-\tprintf (\"PASSED\\n\");\n-#endif\n-      }\n+    do_test ();\n #ifdef DEBUG\n-    else\n-    printf (\"SKIPPED\\n\");\n+    printf (\"PASSED\\n\");\n #endif\n-#endif /* __BUILTIN_CPU_SUPPORTS__ */\n     return 0;\n   }\n-#endif"}, {"sha": "df550e800aacbeb8df6df90f5f087950d489088c", "filename": "gcc/testsuite/gcc.target/powerpc/sse3-check.h", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cbb7085f078ad25f7f11855d91c143e1189e89b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse3-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cbb7085f078ad25f7f11855d91c143e1189e89b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse3-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse3-check.h?ref=4cbb7085f078ad25f7f11855d91c143e1189e89b", "patch": "@@ -20,24 +20,9 @@ do_test (void)\n int\n main ()\n {\n-#ifdef __BUILTIN_CPU_SUPPORTS__\n-  /* Most SSE intrinsic operations can be implemented via VMX\n-     instructions, but some operations may be faster / simpler\n-     using the POWER8 VSX instructions.  This is especially true\n-     when we are transferring / converting to / from __m64 types.\n-     The direct register transfer instructions from POWER8 are\n-     especially important.  So we test for arch_2_07.  */\n-  if (__builtin_cpu_supports (\"arch_2_07\"))\n-    {\n-      do_test ();\n+  do_test ();\n #ifdef DEBUG\n-      printf (\"PASSED\\n\");\n+  printf (\"PASSED\\n\");\n #endif\n-    }\n-#ifdef DEBUG\n-  else\n-    printf (\"SKIPPED\\n\");\n-#endif\n-#endif /* __BUILTIN_CPU_SUPPORTS__ */\n   return 0;\n }"}]}