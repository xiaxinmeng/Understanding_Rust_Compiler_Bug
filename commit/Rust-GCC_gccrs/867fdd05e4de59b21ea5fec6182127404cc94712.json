{"sha": "867fdd05e4de59b21ea5fec6182127404cc94712", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODY3ZmRkMDVlNGRlNTliMjFlYTVmZWM2MTgyMTI3NDA0Y2M5NDcxMg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2012-12-18T14:39:49Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-12-18T14:39:49Z"}, "message": "re PR middle-end/54838 (ICE: in merge_latch_edges, at cfgloop.c:678 with -ftracer)\n\n2012-12-18  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/54838\n\t* cfgloopmanip.c (fix_loop_structure): Re-discover latch\n\tedges first and mark loops for removal if no latch edges remain.\n\tProperly re-create LOOPS_HAVE_FALLTHRU_PREHEADERS.\n\t* loop-init.c (loop_optimizer_finalize): Set\n\tLOOPS_MAY_HAVE_MULTIPLE_LATCHES.\n\n\t* g++.dg/torture/pr54838.C: New testcase.\n\nFrom-SVN: r194582", "tree": {"sha": "965e63d5d06c276a59bece27337abea448f54c59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/965e63d5d06c276a59bece27337abea448f54c59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/867fdd05e4de59b21ea5fec6182127404cc94712", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/867fdd05e4de59b21ea5fec6182127404cc94712", "html_url": "https://github.com/Rust-GCC/gccrs/commit/867fdd05e4de59b21ea5fec6182127404cc94712", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/867fdd05e4de59b21ea5fec6182127404cc94712/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0b8ca8fefec7479e91654819be9b77362406b1b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b8ca8fefec7479e91654819be9b77362406b1b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b8ca8fefec7479e91654819be9b77362406b1b5"}], "stats": {"total": 183, "additions": 159, "deletions": 24}, "files": [{"sha": "16bc6664322efc6b4c633de03dc65dcb0b3e16d1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/867fdd05e4de59b21ea5fec6182127404cc94712/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/867fdd05e4de59b21ea5fec6182127404cc94712/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=867fdd05e4de59b21ea5fec6182127404cc94712", "patch": "@@ -1,3 +1,12 @@\n+2012-12-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/54838\n+\t* cfgloopmanip.c (fix_loop_structure): Re-discover latch\n+\tedges first and mark loops for removal if no latch edges remain.\n+\tProperly re-create LOOPS_HAVE_FALLTHRU_PREHEADERS.\n+\t* loop-init.c (loop_optimizer_finalize): Set\n+\tLOOPS_MAY_HAVE_MULTIPLE_LATCHES.\n+\n 2012-12-18  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/55555"}, {"sha": "64f6f6437384c0245e65b65f8456dac162237524", "filename": "gcc/cfgloopmanip.c", "status": "modified", "additions": 42, "deletions": 24, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/867fdd05e4de59b21ea5fec6182127404cc94712/gcc%2Fcfgloopmanip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/867fdd05e4de59b21ea5fec6182127404cc94712/gcc%2Fcfgloopmanip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopmanip.c?ref=867fdd05e4de59b21ea5fec6182127404cc94712", "patch": "@@ -1793,6 +1793,40 @@ fix_loop_structure (bitmap changed_bbs)\n       record_exits = true;\n     }\n \n+  /* First re-compute loop latches.  */\n+  FOR_EACH_LOOP (li, loop, 0)\n+    {\n+      edge_iterator ei;\n+      edge e, first_latch = NULL, latch = NULL;\n+\n+      if (!loop->header)\n+\tcontinue;\n+\n+      FOR_EACH_EDGE (e, ei, loop->header->preds)\n+\tif (dominated_by_p (CDI_DOMINATORS, e->src, loop->header))\n+\t  {\n+\t    if (!first_latch)\n+\t      first_latch = latch = e;\n+\t    else\n+\t      {\n+\t\tlatch = NULL;\n+\t\tbreak;\n+\t      }\n+\t  }\n+      /* If there was no latch, schedule the loop for removal.  */\n+      if (!first_latch)\n+\tloop->header = NULL;\n+      /* If there was a single latch and it belongs to the loop of the\n+\t header, record it.  */\n+      else if (latch\n+\t       && latch->src->loop_father == loop)\n+\tloop->latch = latch->src;\n+      /* Otherwise there are multiple latches which are eventually\n+         disambiguated below.  */\n+      else\n+\tloop->latch = NULL;\n+    }\n+\n   /* Remove the dead loops from structures.  We start from the innermost\n      loops, so that when we remove the loops, we know that the loops inside\n      are preserved, and do not waste time relinking loops that will be\n@@ -1849,34 +1883,18 @@ fix_loop_structure (bitmap changed_bbs)\n \t}\n     }\n \n-  /* Then re-compute the single latch if there is one.  */\n-  FOR_EACH_LOOP (li, loop, 0)\n-    {\n-      edge_iterator ei;\n-      edge e, latch = NULL;\n-      FOR_EACH_EDGE (e, ei, loop->header->preds)\n-\tif (dominated_by_p (CDI_DOMINATORS, e->src, loop->header))\n-\t  {\n-\t    if (!latch)\n-\t      latch = e;\n-\t    else\n-\t      {\n-\t\tlatch = NULL;\n-\t\tbreak;\n-\t      }\n-\t  }\n-      if (latch\n-\t  && latch->src->loop_father == loop)\n-\tloop->latch = latch->src;\n-      else\n-\tloop->latch = NULL;\n-    }\n-\n   if (!loops_state_satisfies_p (LOOPS_MAY_HAVE_MULTIPLE_LATCHES))\n     disambiguate_loops_with_multiple_latches ();\n \n   if (loops_state_satisfies_p (LOOPS_HAVE_PREHEADERS))\n-    create_preheaders (CP_SIMPLE_PREHEADERS);\n+    {\n+      int cp_flags = CP_SIMPLE_PREHEADERS;\n+\n+      if (loops_state_satisfies_p (LOOPS_HAVE_FALLTHRU_PREHEADERS))\n+\tcp_flags |= CP_FALLTHRU_PREHEADERS;\n+\n+      create_preheaders (cp_flags);\n+    }\n \n   if (loops_state_satisfies_p (LOOPS_HAVE_SIMPLE_LATCHES))\n     force_single_succ_latches ();"}, {"sha": "b981762a385ac7733910cd7150d0cff09a6cd75e", "filename": "gcc/loop-init.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/867fdd05e4de59b21ea5fec6182127404cc94712/gcc%2Floop-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/867fdd05e4de59b21ea5fec6182127404cc94712/gcc%2Floop-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-init.c?ref=867fdd05e4de59b21ea5fec6182127404cc94712", "patch": "@@ -133,6 +133,7 @@ loop_optimizer_finalize (void)\n \t\t\t | LOOPS_HAVE_PREHEADERS\n \t\t\t | LOOPS_HAVE_SIMPLE_LATCHES\n \t\t\t | LOOPS_HAVE_FALLTHRU_PREHEADERS);\n+      loops_state_set (LOOPS_MAY_HAVE_MULTIPLE_LATCHES);\n       goto loop_fini_done;\n     }\n "}, {"sha": "dcb4bd943924a71d33899548c4c994b4528fc431", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/867fdd05e4de59b21ea5fec6182127404cc94712/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/867fdd05e4de59b21ea5fec6182127404cc94712/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=867fdd05e4de59b21ea5fec6182127404cc94712", "patch": "@@ -1,3 +1,8 @@\n+2012-12-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/54838\n+\t* g++.dg/torture/pr54838.C: New testcase.\n+\n 2012-12-18  Andreas Schwab  <schwab@linux-m68k.org>\n \n \t* lib/go.exp (go_link_flags): Add libatomic location to flags and"}, {"sha": "6d34d57a486bc5466a4927e793cef35efab1b129", "filename": "gcc/testsuite/g++.dg/torture/pr54838.C", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/867fdd05e4de59b21ea5fec6182127404cc94712/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr54838.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/867fdd05e4de59b21ea5fec6182127404cc94712/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr54838.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr54838.C?ref=867fdd05e4de59b21ea5fec6182127404cc94712", "patch": "@@ -0,0 +1,102 @@\n+// { dg-do compile }\n+// { dg-options \"-ftracer -fno-tree-dce -fno-tree-sra\" }\n+\n+struct bidirectional_iterator_tag\n+{};\n+struct random_access_iterator_tag:bidirectional_iterator_tag\n+{};\n+template < typename _Category, typename, typename _Distance, typename > struct iterator\n+{\n+  typedef _Distance difference_type;\n+};\n+template < typename _Iterator > struct iterator_traits\n+{\n+  typedef typename _Iterator::difference_type difference_type;\n+};\n+template < typename _Tp > struct iterator_traits <_Tp * >\n+{\n+  typedef random_access_iterator_tag iterator_category;\n+  typedef _Tp value_type;\n+  typedef int difference_type;\n+  typedef _Tp reference;\n+};\n+template < typename _Iterator > class reverse_iterator:\n+    public\n+    iterator < typename iterator_traits < _Iterator >::iterator_category,\n+    typename iterator_traits < _Iterator >::value_type,\n+    typename iterator_traits < _Iterator >::difference_type, typename iterator_traits < _Iterator >::reference >\n+{\n+  _Iterator current;\n+public:\n+  typedef _Iterator iterator_type;\n+  reverse_iterator (const reverse_iterator & __x):current (__x.current)\n+  {}\n+  iterator_type base ()\n+    {\n+      return current;\n+    }\n+  reverse_iterator operator++ ()\n+    {\n+      --current;\n+    }\n+};\n+template\n+<\n+typename\n+_Iterator\n+>\n+bool\n+operator\n+==\n+(reverse_iterator < _Iterator > __x, reverse_iterator < _Iterator > __y)\n+{\n+  return __x.base () == __y.base ();\n+}\n+\n+template\n+<\n+typename\n+_Iterator\n+>\n+typename\n+reverse_iterator\n+<\n+_Iterator\n+>::difference_type\n+operator\n+- (reverse_iterator < _Iterator >, reverse_iterator < _Iterator >)\n+{}\n+template\n+<\n+typename\n+_RandomAccessIterator\n+>\n+_RandomAccessIterator\n+__find\n+(_RandomAccessIterator\n+ __first, _RandomAccessIterator __last)\n+{\n+  typename\n+      iterator_traits\n+      <\n+      _RandomAccessIterator\n+      >::difference_type __trip_count (__last - __first);\n+  for (; __trip_count; --__trip_count)\n+    ++__first;\n+  return __last;\n+}\n+typedef reverse_iterator < int* > _ForwardIterator1;\n+_ForwardIterator1\n+search\n+(_ForwardIterator1\n+ __first1,\n+ _ForwardIterator1\n+ __last1)\n+{\n+  for (;;)\n+    {\n+      __first1 = __find (__first1, __last1);\n+      if (__first1 == __last1)\n+\treturn __last1;\n+    }\n+}"}]}