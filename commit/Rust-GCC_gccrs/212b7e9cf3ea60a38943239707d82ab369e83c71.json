{"sha": "212b7e9cf3ea60a38943239707d82ab369e83c71", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjEyYjdlOWNmM2VhNjBhMzg5NDMyMzk3MDdkODJhYjM2OWU4M2M3MQ==", "commit": {"author": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2017-05-10T22:54:07Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2017-05-10T22:54:07Z"}, "message": "re PR target/79027 (fold-const.c:11104:1: internal compiler error: Floating point exception)\n\n\tPR target/79027\n\t* config/pa/pa.c (pa_cannot_change_mode_class): Reject changes to/from\n\tmodes with zero size.  Enhance comment.\n\nFrom-SVN: r247869", "tree": {"sha": "52850484ab8d738441c84b59321edd15bdcf7411", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52850484ab8d738441c84b59321edd15bdcf7411"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/212b7e9cf3ea60a38943239707d82ab369e83c71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/212b7e9cf3ea60a38943239707d82ab369e83c71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/212b7e9cf3ea60a38943239707d82ab369e83c71", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/212b7e9cf3ea60a38943239707d82ab369e83c71/comments", "author": null, "committer": null, "parents": [{"sha": "3aa0a770a4b1368a9f2ccc262f483cc811ca9331", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3aa0a770a4b1368a9f2ccc262f483cc811ca9331", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3aa0a770a4b1368a9f2ccc262f483cc811ca9331"}], "stats": {"total": 26, "additions": 18, "deletions": 8}, "files": [{"sha": "4483f33ed1fed27ea30c8b2c92e681a39dba696b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/212b7e9cf3ea60a38943239707d82ab369e83c71/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/212b7e9cf3ea60a38943239707d82ab369e83c71/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=212b7e9cf3ea60a38943239707d82ab369e83c71", "patch": "@@ -1,3 +1,9 @@\n+2017-05-10  John David Anglin  <danglin@gcc.gnu.org>\n+\n+\tPR target/79027\n+\t* config/pa/pa.c (pa_cannot_change_mode_class): Reject changes to/from\n+\tmodes with zero size.  Enhance comment.\n+\n 2017-05-10  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* config/rs6000/rs6000.c (altivec_init_builtins): Define POWER8"}, {"sha": "874d12d374110cc21934cc9279779e5936e33397", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/212b7e9cf3ea60a38943239707d82ab369e83c71/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/212b7e9cf3ea60a38943239707d82ab369e83c71/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=212b7e9cf3ea60a38943239707d82ab369e83c71", "patch": "@@ -9962,19 +9962,23 @@ pa_cannot_change_mode_class (machine_mode from, machine_mode to,\n   if (from == to)\n     return false;\n \n+  if (GET_MODE_SIZE (from) == GET_MODE_SIZE (to))\n+    return false;\n+\n+  /* Reject changes to/from modes with zero size.  */\n+  if (!GET_MODE_SIZE (from) || !GET_MODE_SIZE (to))\n+    return true;\n+\n   /* Reject changes to/from complex and vector modes.  */\n   if (COMPLEX_MODE_P (from) || VECTOR_MODE_P (from)\n       || COMPLEX_MODE_P (to) || VECTOR_MODE_P (to))\n     return true;\n       \n-  if (GET_MODE_SIZE (from) == GET_MODE_SIZE (to))\n-    return false;\n-\n-  /* There is no way to load QImode or HImode values directly from\n-     memory.  SImode loads to the FP registers are not zero extended.\n-     On the 64-bit target, this conflicts with the definition of\n-     LOAD_EXTEND_OP.  Thus, we can't allow changing between modes\n-     with different sizes in the floating-point registers.  */\n+  /* There is no way to load QImode or HImode values directly from memory\n+     to a FP register.  SImode loads to the FP registers are not zero\n+     extended.  On the 64-bit target, this conflicts with the definition\n+     of LOAD_EXTEND_OP.  Thus, we can't allow changing between modes with\n+     different sizes in the floating-point registers.  */\n   if (MAYBE_FP_REG_CLASS_P (rclass))\n     return true;\n "}]}