{"sha": "b44cf3d94beee1d42e5c2a9f62e2827260999a70", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQ0Y2YzZDk0YmVlZTFkNDJlNWMyYTlmNjJlMjgyNzI2MDk5OWE3MA==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2003-01-26T10:06:57Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2003-01-26T10:06:57Z"}, "message": "fp-bit.h: Define macros for TFmode floating-point constants in IBM-extended TFmode types.\n\n* fp-bit.h: Define macros for TFmode floating-point constants\nin IBM-extended TFmode types.\n(TMODES): Define if __LDBL_MANT_DIG__ has the newly-supported\nwidths.\n* config/fp-bit.c (pack_d, unpack_d): Support IBM-extended\nTFmode type.\n\nFrom-SVN: r61837", "tree": {"sha": "0fb197a487c754a9460e6bc616e52a2e25357687", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0fb197a487c754a9460e6bc616e52a2e25357687"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b44cf3d94beee1d42e5c2a9f62e2827260999a70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b44cf3d94beee1d42e5c2a9f62e2827260999a70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b44cf3d94beee1d42e5c2a9f62e2827260999a70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b44cf3d94beee1d42e5c2a9f62e2827260999a70/comments", "author": null, "committer": null, "parents": [{"sha": "ea976606bee170bd19fa10737586834abc87189a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea976606bee170bd19fa10737586834abc87189a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea976606bee170bd19fa10737586834abc87189a"}], "stats": {"total": 111, "additions": 110, "deletions": 1}, "files": [{"sha": "fa5745c4cf3952fe9f6cff9427c5234b0b72e773", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b44cf3d94beee1d42e5c2a9f62e2827260999a70/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b44cf3d94beee1d42e5c2a9f62e2827260999a70/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b44cf3d94beee1d42e5c2a9f62e2827260999a70", "patch": "@@ -1,5 +1,12 @@\n 2003-01-26  Alexandre Oliva  <aoliva@redhat.com>\n \n+\t* fp-bit.h: Define macros for TFmode floating-point constants\n+\tin IBM-extended TFmode types.\n+\t(TMODES): Define if __LDBL_MANT_DIG__ has the newly-supported\n+\twidths.\n+\t* config/fp-bit.c (pack_d, unpack_d): Support IBM-extended\n+\tTFmode type.\n+\n \t* config/fp-bit.h: Define macros for TFmode floating-point\n \tconstants in IEEE quad TFmode type.  Declare functions according\n \tto L_ macros."}, {"sha": "3e0b843f5050ea39666edc6fc66fba7e2f43e65c", "filename": "gcc/config/fp-bit.c", "status": "modified", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b44cf3d94beee1d42e5c2a9f62e2827260999a70/gcc%2Fconfig%2Ffp-bit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b44cf3d94beee1d42e5c2a9f62e2827260999a70/gcc%2Fconfig%2Ffp-bit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffp-bit.c?ref=b44cf3d94beee1d42e5c2a9f62e2827260999a70", "patch": "@@ -324,9 +324,66 @@ pack_d ( fp_number_type *  src)\n   dst.bits.exp = exp;\n   dst.bits.sign = sign;\n #else\n+# if defined TFLOAT && defined HALFFRACBITS\n+ {\n+   halffractype high, low;\n+\n+   high = (fraction >> (FRACBITS - HALFFRACBITS));\n+   high &= (((fractype)1) << HALFFRACBITS) - 1;\n+   high |= ((fractype) (exp & ((1 << EXPBITS) - 1))) << HALFFRACBITS;\n+   high |= ((fractype) (sign & 1)) << (HALFFRACBITS | EXPBITS);\n+\n+   low = (halffractype)fraction &\n+     ((((halffractype)1) << (FRACBITS - HALFFRACBITS)) - 1);\n+\n+   if (exp == EXPMAX || exp == 0 || low == 0)\n+     low = 0;\n+   else\n+     {\n+       exp -= HALFFRACBITS + 1;\n+\n+       while (exp > 0\n+\t      && low < ((halffractype)1 << HALFFRACBITS))\n+\t {\n+\t   low <<= 1;\n+\t   exp--;\n+\t }\n+\n+       if (exp <= 0)\n+\t {\n+\t   halffractype roundmsb, round;\n+\n+\t   exp = -exp + 1;\n+\n+\t   roundmsb = (1 << (exp - 1));\n+\t   round = low & ((roundmsb << 1) - 1);\n+\n+\t   low >>= exp;\n+\t   exp = 0;\n+\n+\t   if (round > roundmsb || (round == roundmsb && (low & 1)))\n+\t     {\n+\t       low++;\n+\t       if (low >= ((halffractype)1 << HALFFRACBITS))\n+\t\t /* We don't shift left, since it has just become the\n+\t\t    smallest normal number, whose implicit 1 bit is\n+\t\t    now indicated by the non-zero exponent.  */\n+\t\t exp++;\n+\t     }\n+\t }\n+\n+       low &= ((halffractype)1 << HALFFRACBITS) - 1;\n+       low |= ((fractype) (exp & ((1 << EXPBITS) - 1))) << HALFFRACBITS;\n+       low |= ((fractype) (sign & 1)) << (HALFFRACBITS | EXPBITS);\n+     }\n+\n+   dst.value_raw = (((fractype) high) << HALFSHIFT) | low;\n+ }\n+# else\n   dst.value_raw = fraction & ((((fractype)1) << FRACBITS) - (fractype)1);\n   dst.value_raw |= ((fractype) (exp & ((1 << EXPBITS) - 1))) << FRACBITS;\n   dst.value_raw |= ((fractype) (sign & 1)) << (FRACBITS | EXPBITS);\n+# endif\n #endif\n \n #if defined(FLOAT_WORD_ORDER_MISMATCH) && !defined(FLOAT)\n@@ -383,9 +440,42 @@ unpack_d (FLO_union_type * src, fp_number_type * dst)\n   exp = src->bits.exp;\n   sign = src->bits.sign;\n #else\n+# if defined TFLOAT && defined HALFFRACBITS\n+ {\n+   halffractype high, low;\n+   \n+   high = src->value_raw >> HALFSHIFT;\n+   low = src->value_raw & (((fractype)1 << HALFSHIFT) - 1);\n+\n+   fraction = high & ((((fractype)1) << HALFFRACBITS) - 1);\n+   fraction <<= FRACBITS - HALFFRACBITS;\n+   exp = ((int)(high >> HALFFRACBITS)) & ((1 << EXPBITS) - 1);\n+   sign = ((int)(high >> (((HALFFRACBITS + EXPBITS))))) & 1;\n+\n+   if (exp != EXPMAX && exp != 0 && low != 0)\n+     {\n+       int lowexp = ((int)(low >> HALFFRACBITS)) & ((1 << EXPBITS) - 1);\n+       int shift;\n+       fractype xlow;\n+\n+       xlow = low & ((((fractype)1) << HALFFRACBITS) - 1);\n+       if (lowexp)\n+\t xlow |= (((halffractype)1) << HALFFRACBITS);\n+       else\n+\t lowexp = 1;\n+       shift = (FRACBITS - HALFFRACBITS) - (exp - lowexp);\n+       if (shift > 0)\n+\t xlow <<= shift;\n+       else if (shift < 0)\n+\t xlow >>= -shift;\n+       fraction += xlow;\n+     }\n+ }\n+# else\n   fraction = src->value_raw & ((((fractype)1) << FRACBITS) - 1);\n   exp = ((int)(src->value_raw >> FRACBITS)) & ((1 << EXPBITS) - 1);\n   sign = ((int)(src->value_raw >> (FRACBITS + EXPBITS))) & 1;\n+# endif\n #endif\n \n   dst->sign = sign;"}, {"sha": "e9e1e976d879d9f17d51ee6e33dedbe277d01345", "filename": "gcc/config/fp-bit.h", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b44cf3d94beee1d42e5c2a9f62e2827260999a70/gcc%2Fconfig%2Ffp-bit.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b44cf3d94beee1d42e5c2a9f62e2827260999a70/gcc%2Fconfig%2Ffp-bit.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffp-bit.h?ref=b44cf3d94beee1d42e5c2a9f62e2827260999a70", "patch": "@@ -87,7 +87,7 @@ Boston, MA 02111-1307, USA.  */\n #endif\n #endif /* ! FINE_GRAINED_LIBRARIES */\n \n-#if __LDBL_MANT_DIG__ == 113\n+#if __LDBL_MANT_DIG__ == 113 || __LDBL_MANT_DIG__ == 106\n # define TMODES\n #endif\n \n@@ -152,6 +152,18 @@ typedef unsigned int UTItype __attribute__ ((mode (TI)));\n #\tdefine FRACBITS 112\n # endif\n \n+# if __LDBL_MANT_DIG__ == 106 /* IBM extended (double+double) */\n+#\tdefine EXPBITS 11\n+#\tdefine EXPBIAS 1023\n+#\tdefine EXPMAX (0x7ff)\n+#\tdefine QUIET_NAN ((TItype)0x8 << (48 + 64))\n+#\tdefine FRACHIGH  ((TItype)0x8 << 124)\n+#\tdefine FRACHIGH2 ((TItype)0xc << 124)\n+#\tdefine FRACBITS 105\n+#\tdefine HALFFRACBITS 52\n+#\tdefine HALFSHIFT 64\n+# endif\n+\n #\tdefine pack_d __pack_t\n #\tdefine unpack_d __unpack_t\n #\tdefine __fpcmp_parts __fpcmp_parts_t"}]}