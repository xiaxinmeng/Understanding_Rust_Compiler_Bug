{"sha": "9fe2cc05565353eb61325cf3a87f8fc78335d98c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZlMmNjMDU1NjUzNTNlYjYxMzI1Y2YzYTg3ZjhmYzc4MzM1ZDk4Yw==", "commit": {"author": {"name": "Per Bothner", "email": "per@bothner.com", "date": "2002-02-20T19:53:49Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "2002-02-20T19:53:49Z"}, "message": "builtins.c (check_for_builtin): New function.\n\n\n\t* builtins.c (check_for_builtin):  New function.\n\t(build_call_or_builtin):  Remove.\n\t* java-tree.h:  Update accordingly.\n\t* expr.c (expand_invoke):  Use build + check_for_builtin instead\n\tof build_call_or_builtin.\n\t* parse.y (patch_invoke):  Likewise.  This avoids needlessly creating\n\ta new CALL_EXPR node, which means we don't lose the CALL_USING_SUPER\n\tflag (which had caused jcf-write to incorrectly emit invokevirtual).\n\nFrom-SVN: r49909", "tree": {"sha": "ba65439faed48f14d796ca4d44209a8468a5538e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba65439faed48f14d796ca4d44209a8468a5538e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fe2cc05565353eb61325cf3a87f8fc78335d98c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fe2cc05565353eb61325cf3a87f8fc78335d98c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fe2cc05565353eb61325cf3a87f8fc78335d98c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fe2cc05565353eb61325cf3a87f8fc78335d98c/comments", "author": {"login": "PerBothner", "id": 10293361, "node_id": "MDQ6VXNlcjEwMjkzMzYx", "avatar_url": "https://avatars.githubusercontent.com/u/10293361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PerBothner", "html_url": "https://github.com/PerBothner", "followers_url": "https://api.github.com/users/PerBothner/followers", "following_url": "https://api.github.com/users/PerBothner/following{/other_user}", "gists_url": "https://api.github.com/users/PerBothner/gists{/gist_id}", "starred_url": "https://api.github.com/users/PerBothner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PerBothner/subscriptions", "organizations_url": "https://api.github.com/users/PerBothner/orgs", "repos_url": "https://api.github.com/users/PerBothner/repos", "events_url": "https://api.github.com/users/PerBothner/events{/privacy}", "received_events_url": "https://api.github.com/users/PerBothner/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f67e0d112d28a3caf2ea99b67078e6cb8a851fe8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f67e0d112d28a3caf2ea99b67078e6cb8a851fe8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f67e0d112d28a3caf2ea99b67078e6cb8a851fe8"}], "stats": {"total": 61, "additions": 29, "deletions": 32}, "files": [{"sha": "93b052684d6cdbbfc899f9c21c3c55a691b7b558", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fe2cc05565353eb61325cf3a87f8fc78335d98c/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fe2cc05565353eb61325cf3a87f8fc78335d98c/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=9fe2cc05565353eb61325cf3a87f8fc78335d98c", "patch": "@@ -1,3 +1,14 @@\n+2002-02-20  Per Bothner  <per@bothner.com>\n+\n+\t* builtins.c (check_for_builtin):  New function.\n+\t(build_call_or_builtin):  Remove.\n+\t* java-tree.h:  Update accordingly.\n+\t* expr.c (expand_invoke):  Use build + check_for_builtin instead\n+\tof build_call_or_builtin.\n+\t* parse.y (patch_invoke):  Likewise.  This avoids needlessly creating\n+\ta new CALL_EXPR node, which means we don't lose the CALL_USING_SUPER\n+\tflag (which had caused jcf-write to incorrectly emit invokevirtual).\n+\n 2002-02-17  Tom Tromey  <tromey@redhat.com>\n \n \t* java-tree.h (TYPE_STRICTFP): New macro."}, {"sha": "1ac37fb52f0bce5f41e97e97e2c1196ab82a606c", "filename": "gcc/java/builtins.c", "status": "modified", "additions": 10, "deletions": 22, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fe2cc05565353eb61325cf3a87f8fc78335d98c/gcc%2Fjava%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fe2cc05565353eb61325cf3a87f8fc78335d98c/gcc%2Fjava%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fbuiltins.c?ref=9fe2cc05565353eb61325cf3a87f8fc78335d98c", "patch": "@@ -324,42 +324,30 @@ initialize_builtins ()\n #include \"builtins.def\"\n }\n \n-/* Generate a method call.  If the call matches a builtin, return the\n+/* If the call matches a builtin, return the\n    appropriate builtin expression instead.  */\n tree\n-build_call_or_builtin (method, func, method_arguments)\n-     tree method, func, method_arguments;\n+check_for_builtin (method, call)\n+     tree method;\n+     tree call;\n {\n-  tree method_class = DECL_NAME (TYPE_NAME (DECL_CONTEXT (method)));\n-  tree method_name = DECL_NAME (method);\n-  tree method_return_type = TREE_TYPE (TREE_TYPE (method));\n-  tree call = NULL_TREE;\n-\n-  /* Only look if we're generating object code and optimizing.  */\n-  if (! flag_emit_class_files && optimize)\n+  if (! flag_emit_class_files && optimize && TREE_CODE (call) == CALL_EXPR)\n     {\n       int i;\n+      tree method_arguments = TREE_OPERAND (call, 1);\n+      tree method_class = DECL_NAME (TYPE_NAME (DECL_CONTEXT (method)));\n+      tree method_name = DECL_NAME (method);\n+      tree method_return_type = TREE_TYPE (TREE_TYPE (method));\n \n       for (i = 0; java_builtins[i].creator != NULL; ++i)\n \t{\n \t  if (method_class == java_builtins[i].class_name.t\n \t      && method_name == java_builtins[i].method_name.t)\n \t    {\n-\t      call = (*java_builtins[i].creator) (method_return_type,\n+\t      return (*java_builtins[i].creator) (method_return_type,\n \t\t\t\t\t\t  method_arguments);\n-\t      break;\n \t    }\n \t}\n     }\n-\n-  if (call == NULL_TREE)\n-    {\n-      /* Either nothing matched, or the creator function decided not\n-\t to inline.  In either case, emit a call.  */\n-      call = build (CALL_EXPR, method_return_type, func, method_arguments,\n-\t\t    NULL_TREE);\n-      TREE_SIDE_EFFECTS (call) = 1;\n-    }\n-\n   return call;\n }"}, {"sha": "045931079f26b0d79dd8d7adbea9039b0d56be43", "filename": "gcc/java/expr.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fe2cc05565353eb61325cf3a87f8fc78335d98c/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fe2cc05565353eb61325cf3a87f8fc78335d98c/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=9fe2cc05565353eb61325cf3a87f8fc78335d98c", "patch": "@@ -2112,7 +2112,9 @@ expand_invoke (opcode, method_ref_index, nargs)\n     }\n   func = build1 (NOP_EXPR, build_pointer_type (method_type), func);\n \n-  call = build_call_or_builtin (method, func, arg_list);\n+  call = build (CALL_EXPR, TREE_TYPE (method_type), func, arg_list, NULL_TREE);\n+  TREE_SIDE_EFFECTS (call) = 1;\n+  call = check_for_builtin (method, call);\n \n   if (check != NULL_TREE)\n     {"}, {"sha": "8f64ef2e9a485ad71902a487d5faa52a05e9eb03", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fe2cc05565353eb61325cf3a87f8fc78335d98c/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fe2cc05565353eb61325cf3a87f8fc78335d98c/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=9fe2cc05565353eb61325cf3a87f8fc78335d98c", "patch": "@@ -1090,7 +1090,7 @@ extern HOST_WIDE_INT java_array_type_length PARAMS ((tree));\n extern int read_class PARAMS ((tree));\n extern void load_class PARAMS ((tree, int));\n \n-extern tree build_call_or_builtin PARAMS ((tree, tree, tree));\n+extern tree check_for_builtin PARAMS ((tree, tree));\n extern void initialize_builtins PARAMS ((void));\n \n extern tree lookup_name PARAMS ((tree));"}, {"sha": "7b900cdf7ddedd237590b53b81855165963433b7", "filename": "gcc/java/parse.y", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fe2cc05565353eb61325cf3a87f8fc78335d98c/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fe2cc05565353eb61325cf3a87f8fc78335d98c/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=9fe2cc05565353eb61325cf3a87f8fc78335d98c", "patch": "@@ -10692,14 +10692,10 @@ patch_invoke (patch, method, args)\n       func = build1 (NOP_EXPR, build_pointer_type (TREE_TYPE (method)), func);\n     }\n \n-  if (TREE_CODE (patch) == CALL_EXPR)\n-    patch = build_call_or_builtin (method, func, args);\n-  else\n-    {\n-      TREE_TYPE (patch) = TREE_TYPE (TREE_TYPE (method));\n-      TREE_OPERAND (patch, 0) = func;\n-      TREE_OPERAND (patch, 1) = args;\n-    }\n+  TREE_TYPE (patch) = TREE_TYPE (TREE_TYPE (method));\n+  TREE_OPERAND (patch, 0) = func;\n+  TREE_OPERAND (patch, 1) = args;\n+  patch = check_for_builtin (method, patch);\n   original_call = patch;\n \n   /* We're processing a `new TYPE ()' form. New is called and its"}]}