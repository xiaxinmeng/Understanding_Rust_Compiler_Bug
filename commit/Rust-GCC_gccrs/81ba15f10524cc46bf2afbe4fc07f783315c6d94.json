{"sha": "81ba15f10524cc46bf2afbe4fc07f783315c6d94", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODFiYTE1ZjEwNTI0Y2M0NmJmMmFmYmU0ZmMwN2Y3ODMzMTVjNmQ5NA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-12-01T18:53:44Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-12-01T18:53:44Z"}, "message": "Improvements to documentation of gcc_jit_context_release\n\ngcc/jit/ChangeLog:\n\t* docs/examples/tut02-square.c (main): Release the context\n\tearlier, to show that this is possible.  Update error-handling\n\tto avoid a double-release of the context, and to avoid\n\treleasing a NULL result.\n\t* docs/intro/tutorial02.rst: Discuss gcc_jit_context_release.\n\t* docs/topics/functions.rst (GCC_JIT_FUNCTION_EXPORTED): Emphasize\n\t* docs/topics/results.rst (gcc_jit_result): Mention that this\n\tcontrols the lifetimes of machine code functions.\n\t(gcc_jit_result_get_code): Spell out the requirements for this\n\tto succeed, and the lifetime of the result.\n\t(gcc_jit_result_release): Mention that this invalidates any code\n\tthat was obtained from the result.\n\t* docs/_build/texinfo/libgccjit.texi: Regenerate.\n\nFrom-SVN: r218245", "tree": {"sha": "56446588235a20b6aa0e37b8d938ae3c78c7421e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56446588235a20b6aa0e37b8d938ae3c78c7421e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81ba15f10524cc46bf2afbe4fc07f783315c6d94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81ba15f10524cc46bf2afbe4fc07f783315c6d94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81ba15f10524cc46bf2afbe4fc07f783315c6d94", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81ba15f10524cc46bf2afbe4fc07f783315c6d94/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ad1f2178c1843170c80c027f62594dba3c600d69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad1f2178c1843170c80c027f62594dba3c600d69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad1f2178c1843170c80c027f62594dba3c600d69"}], "stats": {"total": 138, "additions": 126, "deletions": 12}, "files": [{"sha": "8a2373582e639df66b34f4511f64f6af6d0e0ed8", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81ba15f10524cc46bf2afbe4fc07f783315c6d94/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81ba15f10524cc46bf2afbe4fc07f783315c6d94/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=81ba15f10524cc46bf2afbe4fc07f783315c6d94", "patch": "@@ -1,3 +1,19 @@\n+2014-12-01  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* docs/examples/tut02-square.c (main): Release the context\n+\tearlier, to show that this is possible.  Update error-handling\n+\tto avoid a double-release of the context, and to avoid\n+\treleasing a NULL result.\n+\t* docs/intro/tutorial02.rst: Discuss gcc_jit_context_release.\n+\t* docs/topics/functions.rst (GCC_JIT_FUNCTION_EXPORTED): Emphasize\n+\t* docs/topics/results.rst (gcc_jit_result): Mention that this\n+\tcontrols the lifetimes of machine code functions.\n+\t(gcc_jit_result_get_code): Spell out the requirements for this\n+\tto succeed, and the lifetime of the result.\n+\t(gcc_jit_result_release): Mention that this invalidates any code\n+\tthat was obtained from the result.\n+\t* docs/_build/texinfo/libgccjit.texi: Regenerate.\n+\n 2014-12-01  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR jit/64018"}, {"sha": "f2e1e636e116f3fd161cfa11ae5eab25eab195d9", "filename": "gcc/jit/docs/_build/texinfo/libgccjit.texi", "status": "modified", "additions": 57, "deletions": 6, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81ba15f10524cc46bf2afbe4fc07f783315c6d94/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81ba15f10524cc46bf2afbe4fc07f783315c6d94/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi?ref=81ba15f10524cc46bf2afbe4fc07f783315c6d94", "patch": "@@ -630,6 +630,14 @@ result = gcc_jit_context_compile (ctxt);\n \n and get a @pxref{16,,gcc_jit_result *}.\n \n+At this point we're done with the context; we can release it:\n+\n+@example\n+gcc_jit_context_release (ctxt);\n+@end example\n+\n+@noindent\n+\n We can now use @pxref{17,,gcc_jit_result_get_code()} to look up a specific\n machine code routine within the result, in this case, the function we\n created above.\n@@ -935,6 +943,10 @@ main (int argc, char **argv)\n       goto error;\n     @}\n \n+  /* We're done with the context; we can release it: */\n+  gcc_jit_context_release (ctxt);\n+  ctxt = NULL;\n+\n   /* Extract the generated code from \"result\".  */\n   void *fn_ptr = gcc_jit_result_get_code (result, \"square\");\n   if (!fn_ptr)\n@@ -948,8 +960,10 @@ main (int argc, char **argv)\n   printf (\"result: %d\", square (5));\n \n  error:\n-  gcc_jit_context_release (ctxt);\n-  gcc_jit_result_release (result);\n+  if (ctxt)\n+    gcc_jit_context_release (ctxt);\n+  if (result)\n+    gcc_jit_result_release (result);\n   return 0;\n @}\n \n@@ -5877,6 +5891,10 @@ values:\n \n Function is defined by the client code and visible\n by name outside of the JIT.\n+\n+This value is required if you want to extract machine code\n+for this function from a @pxref{16,,gcc_jit_result} via\n+@pxref{17,,gcc_jit_result_get_code()}.\n @end deffn\n \n @geindex GCC_JIT_FUNCTION_INTERNAL (C macro)\n@@ -6251,7 +6269,9 @@ file, giving you @emph{something} you can step through in the debugger.\n @anchor{topics/results gcc_jit_result}@anchor{16}\n @deffn {C Type} gcc_jit_result\n \n-A @cite{gcc_jit_result} encapsulates the result of compiling a context.\n+A @cite{gcc_jit_result} encapsulates the result of compiling a context,\n+and the lifetimes of any machine code functions that are\n+returned.\n @end deffn\n \n @geindex gcc_jit_context_compile (C function)\n@@ -6267,8 +6287,38 @@ This calls into GCC and builds the code, returning a\n @deffn {C Function} void *           gcc_jit_result_get_code (gcc_jit_result@w{ }*result, const char@w{ }*funcname)\n \n Locate a given function within the built machine code.\n-This will need to be cast to a function pointer of the\n-correct type before it can be called.\n+\n+Functions are looked up by name.  For this to succeed, a function\n+with a name matching @cite{funcname} must have been created on\n+@cite{result}'s context (or a parent context) via a call to\n+@pxref{11,,gcc_jit_context_new_function()} with @cite{kind}\n+@pxref{ac,,GCC_JIT_FUNCTION_EXPORTED}:\n+\n+@example\n+gcc_jit_context_new_function (ctxt,\n+                              any_location, /* or NULL */\n+                              /* Required for func to be visible to\n+                                 gcc_jit_result_get_code: */\n+                              GCC_JIT_FUNCTION_EXPORTED,\n+                              any_return_type,\n+                              /* Must string-compare equal: */\n+                              funcname,\n+                              /* etc */);\n+@end example\n+\n+@noindent\n+\n+If such a function is not found (or @cite{result} or @cite{funcname} are\n+@code{NULL}), an error message will be emitted on stderr and\n+@code{NULL} will be returned.\n+\n+If the function is found, the result will need to be cast to a\n+function pointer of the correct type before it can be called.\n+\n+Note that the resulting machine code becomes invalid after\n+@pxref{39,,gcc_jit_result_release()} is called on the\n+@cite{gcc_jit_result *}; attempting to call it after that may lead\n+to a segmentation fault.\n @end deffn\n \n @geindex gcc_jit_result_release (C function)\n@@ -6277,7 +6327,8 @@ correct type before it can be called.\n \n Once we're done with the code, this unloads the built .so file.\n This cleans up the result; after calling this, it's no longer\n-valid to use the result.\n+valid to use the result, or any code that was obtained by calling\n+@pxref{17,,gcc_jit_result_get_code()} on it.\n @end deffn\n \n @c Copyright (C) 2014 Free Software Foundation, Inc."}, {"sha": "fea3f1104d52909e53997a25a02a5ad880d1e447", "filename": "gcc/jit/docs/examples/tut02-square.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81ba15f10524cc46bf2afbe4fc07f783315c6d94/gcc%2Fjit%2Fdocs%2Fexamples%2Ftut02-square.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81ba15f10524cc46bf2afbe4fc07f783315c6d94/gcc%2Fjit%2Fdocs%2Fexamples%2Ftut02-square.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Fexamples%2Ftut02-square.c?ref=81ba15f10524cc46bf2afbe4fc07f783315c6d94", "patch": "@@ -88,6 +88,10 @@ main (int argc, char **argv)\n       goto error;\n     }\n \n+  /* We're done with the context; we can release it: */\n+  gcc_jit_context_release (ctxt);\n+  ctxt = NULL;\n+\n   /* Extract the generated code from \"result\".  */\n   void *fn_ptr = gcc_jit_result_get_code (result, \"square\");\n   if (!fn_ptr)\n@@ -101,7 +105,9 @@ main (int argc, char **argv)\n   printf (\"result: %d\", square (5));\n \n  error:\n-  gcc_jit_context_release (ctxt);\n-  gcc_jit_result_release (result);\n+  if (ctxt)\n+    gcc_jit_context_release (ctxt);\n+  if (result)\n+    gcc_jit_result_release (result);\n   return 0;\n }"}, {"sha": "b8d35ae822d7f59533796f6ee604a1af22e02285", "filename": "gcc/jit/docs/intro/tutorial02.rst", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81ba15f10524cc46bf2afbe4fc07f783315c6d94/gcc%2Fjit%2Fdocs%2Fintro%2Ftutorial02.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81ba15f10524cc46bf2afbe4fc07f783315c6d94/gcc%2Fjit%2Fdocs%2Fintro%2Ftutorial02.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Fintro%2Ftutorial02.rst?ref=81ba15f10524cc46bf2afbe4fc07f783315c6d94", "patch": "@@ -192,6 +192,12 @@ OK, we've populated the context.  We can now compile it using\n \n and get a :c:type:`gcc_jit_result *`.\n \n+At this point we're done with the context; we can release it:\n+\n+.. code-block:: c\n+\n+   gcc_jit_context_release (ctxt);\n+\n We can now use :c:func:`gcc_jit_result_get_code` to look up a specific\n machine code routine within the result, in this case, the function we\n created above."}, {"sha": "1795b0c221a3799c6af32c8a12ad502c1c19fa20", "filename": "gcc/jit/docs/topics/functions.rst", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81ba15f10524cc46bf2afbe4fc07f783315c6d94/gcc%2Fjit%2Fdocs%2Ftopics%2Ffunctions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81ba15f10524cc46bf2afbe4fc07f783315c6d94/gcc%2Fjit%2Fdocs%2Ftopics%2Ffunctions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Ftopics%2Ffunctions.rst?ref=81ba15f10524cc46bf2afbe4fc07f783315c6d94", "patch": "@@ -84,6 +84,10 @@ Functions\n          Function is defined by the client code and visible\n          by name outside of the JIT.\n \n+         This value is required if you want to extract machine code\n+         for this function from a :type:`gcc_jit_result` via\n+         :func:`gcc_jit_result_get_code`.\n+\n       .. macro::   GCC_JIT_FUNCTION_INTERNAL\n \n          Function is defined by the client code, but is invisible"}, {"sha": "99044959a21f30bfe2a0b0fba4c1fc87a1e2680e", "filename": "gcc/jit/docs/topics/results.rst", "status": "modified", "additions": 35, "deletions": 4, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81ba15f10524cc46bf2afbe4fc07f783315c6d94/gcc%2Fjit%2Fdocs%2Ftopics%2Fresults.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81ba15f10524cc46bf2afbe4fc07f783315c6d94/gcc%2Fjit%2Fdocs%2Ftopics%2Fresults.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Ftopics%2Fresults.rst?ref=81ba15f10524cc46bf2afbe4fc07f783315c6d94", "patch": "@@ -22,7 +22,9 @@ Compilation results\n \n .. type:: gcc_jit_result\n \n-  A `gcc_jit_result` encapsulates the result of compiling a context.\n+  A `gcc_jit_result` encapsulates the result of compiling a context,\n+  and the lifetimes of any machine code functions that are\n+  returned.\n \n .. function:: gcc_jit_result *\\\n               gcc_jit_context_compile (gcc_jit_context *ctxt)\n@@ -36,13 +38,42 @@ Compilation results\n                                        const char *funcname)\n \n    Locate a given function within the built machine code.\n-   This will need to be cast to a function pointer of the\n-   correct type before it can be called.\n+\n+   Functions are looked up by name.  For this to succeed, a function\n+   with a name matching `funcname` must have been created on\n+   `result`'s context (or a parent context) via a call to\n+   :func:`gcc_jit_context_new_function` with `kind`\n+   :macro:`GCC_JIT_FUNCTION_EXPORTED`:\n+\n+   .. code-block:: c\n+\n+     gcc_jit_context_new_function (ctxt,\n+                                   any_location, /* or NULL */\n+                                   /* Required for func to be visible to\n+                                      gcc_jit_result_get_code: */\n+                                   GCC_JIT_FUNCTION_EXPORTED,\n+                                   any_return_type,\n+                                   /* Must string-compare equal: */\n+                                   funcname,\n+                                   /* etc */);\n+\n+   If such a function is not found (or `result` or `funcname` are\n+   ``NULL``), an error message will be emitted on stderr and\n+   ``NULL`` will be returned.\n+\n+   If the function is found, the result will need to be cast to a\n+   function pointer of the correct type before it can be called.\n+\n+   Note that the resulting machine code becomes invalid after\n+   :func:`gcc_jit_result_release` is called on the\n+   `gcc_jit_result *`; attempting to call it after that may lead\n+   to a segmentation fault.\n \n \n .. function:: void\\\n               gcc_jit_result_release (gcc_jit_result *result)\n \n    Once we're done with the code, this unloads the built .so file.\n    This cleans up the result; after calling this, it's no longer\n-   valid to use the result.\n+   valid to use the result, or any code that was obtained by calling\n+   :func:`gcc_jit_result_get_code` on it."}]}