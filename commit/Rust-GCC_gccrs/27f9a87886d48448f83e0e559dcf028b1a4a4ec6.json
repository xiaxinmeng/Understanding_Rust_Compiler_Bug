{"sha": "27f9a87886d48448f83e0e559dcf028b1a4a4ec6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdmOWE4Nzg4NmQ0ODQ0OGY4M2UwZTU1OWRjZjAyOGIxYTRhNGVjNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-02-26T09:43:28Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-02-26T09:43:28Z"}, "message": "c++: Fix operator() lookup in lambdas [PR95451]\n\nDuring name lookup, name-lookup.c uses:\n            if (!(!iter->type && HIDDEN_TYPE_BINDING_P (iter))\n                && (bool (want & LOOK_want::HIDDEN_LAMBDA)\n                    || !is_lambda_ignored_entity (iter->value))\n                && qualify_lookup (iter->value, want))\n              binding = iter->value;\nUnfortunately as the following testcase shows, this doesn't work in\ngeneric lambdas, where we on the auto b = ... lambda ICE and on the\nauto d = lambda reject it even when it should be valid.  The problem\nis that the binding doesn't have a FUNCTION_DECL with\nLAMBDA_FUNCTION_P for the operator(), but an OVERLOAD with\nTEMPLATE_DECL for such FUNCTION_DECL.\n\nThe following patch fixes that in is_lambda_ignored_entity, other\npossibility would be to do that before calling is_lambda_ignored_entity\nin name-lookup.c.\n\n2021-02-26  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/95451\n\t* lambda.c (is_lambda_ignored_entity): Before checking for\n\tLAMBDA_FUNCTION_P, use OVL_FIRST.  Drop FUNCTION_DECL check.\n\n\t* g++.dg/cpp1y/lambda-generic-95451.C: New test.", "tree": {"sha": "329c66032438ccd1c0067bb64606aa38ac99789b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/329c66032438ccd1c0067bb64606aa38ac99789b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27f9a87886d48448f83e0e559dcf028b1a4a4ec6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27f9a87886d48448f83e0e559dcf028b1a4a4ec6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27f9a87886d48448f83e0e559dcf028b1a4a4ec6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27f9a87886d48448f83e0e559dcf028b1a4a4ec6/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff7a5154460e2830e244c350cc8f7c35913de70e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff7a5154460e2830e244c350cc8f7c35913de70e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff7a5154460e2830e244c350cc8f7c35913de70e"}], "stats": {"total": 38, "additions": 37, "deletions": 1}, "files": [{"sha": "421685cbc2d49f197abdc854371fd06b89f441d0", "filename": "gcc/cp/lambda.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27f9a87886d48448f83e0e559dcf028b1a4a4ec6/gcc%2Fcp%2Flambda.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27f9a87886d48448f83e0e559dcf028b1a4a4ec6/gcc%2Fcp%2Flambda.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flambda.c?ref=27f9a87886d48448f83e0e559dcf028b1a4a4ec6", "patch": "@@ -1352,7 +1352,8 @@ is_lambda_ignored_entity (tree val)\n \n   /* None of the lookups that use qualify_lookup want the op() from the\n      lambda; they want the one from the enclosing class.  */\n-  if (TREE_CODE (val) == FUNCTION_DECL && LAMBDA_FUNCTION_P (val))\n+  val = OVL_FIRST (val);\n+  if (LAMBDA_FUNCTION_P (val))\n     return true;\n \n   return false;"}, {"sha": "1315c01f456f99dc47024cb54ad5a3e1a8fe80bb", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-generic-95451.C", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27f9a87886d48448f83e0e559dcf028b1a4a4ec6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-95451.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27f9a87886d48448f83e0e559dcf028b1a4a4ec6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-95451.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-95451.C?ref=27f9a87886d48448f83e0e559dcf028b1a4a4ec6", "patch": "@@ -0,0 +1,35 @@\n+// PR c++/95451\n+// { dg-do run { target c++14 } }\n+\n+extern \"C\" void abort ();\n+\n+struct A {\n+  template <typename>\n+  void foo ()\n+  {\n+    auto b = [this] (auto) { return operator () (); } (0);\n+    if (b != 3)\n+      abort ();\n+    auto c = [this] (int) { return operator () (); } (0);\n+    if (c != 3)\n+      abort ();\n+  }\n+  void bar ()\n+  {\n+    auto d = [this] (auto) { return operator () (); } (0);\n+    if (d != 3)\n+      abort ();\n+    auto e = [this] (int) { return operator () (); } (0);\n+    if (e != 3)\n+      abort ();\n+  }\n+  int operator () () { return 3; }\n+};\n+\n+int\n+main ()\n+{\n+  A a;\n+  a.foo<void> ();\n+  a.bar ();\n+}"}]}