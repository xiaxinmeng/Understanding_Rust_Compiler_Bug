{"sha": "45528dbfc50eb8c973f7fe076d7031bfb46bde55", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDU1MjhkYmZjNTBlYjhjOTczZjdmZTA3NmQ3MDMxYmZiNDZiZGU1NQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-06-26T08:28:51Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-06-26T08:28:51Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r1292", "tree": {"sha": "3f244a5c8bd70fbf3cbf68f54299be43b32eb5bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f244a5c8bd70fbf3cbf68f54299be43b32eb5bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45528dbfc50eb8c973f7fe076d7031bfb46bde55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45528dbfc50eb8c973f7fe076d7031bfb46bde55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45528dbfc50eb8c973f7fe076d7031bfb46bde55", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45528dbfc50eb8c973f7fe076d7031bfb46bde55/comments", "author": null, "committer": null, "parents": [{"sha": "1512dbbea43e5a22874d4cfd0e1d3dac112a31ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1512dbbea43e5a22874d4cfd0e1d3dac112a31ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1512dbbea43e5a22874d4cfd0e1d3dac112a31ce"}], "stats": {"total": 58, "additions": 33, "deletions": 25}, "files": [{"sha": "0fe844bcf6e155a5211c3d0c7bb3de91f685c3ac", "filename": "gcc/ginclude/va-i860.h", "status": "modified", "additions": 33, "deletions": 25, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45528dbfc50eb8c973f7fe076d7031bfb46bde55/gcc%2Fginclude%2Fva-i860.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45528dbfc50eb8c973f7fe076d7031bfb46bde55/gcc%2Fginclude%2Fva-i860.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fva-i860.h?ref=45528dbfc50eb8c973f7fe076d7031bfb46bde55", "patch": "@@ -3,27 +3,11 @@\n    function __builtin_saveregs is called, GCC moves the call up to the\n    very start of the function.  */\n \n-#if !defined(_STDARG_H)\n-\n-/* varargs support */\n-\n-#define va_alist __builtin_va_alist\n-\n-#define va_dcl\n-\n-#define va_start(pvar) ((pvar) = * (va_list *) __builtin_saveregs ())\n \n-#else /* ANSI stdarg.h */\n-/* Note that CUMULATIVE_ARGS elements are measured in bytes on the i860,\n-   so we divide by 4 to get # of registers.  */\n-#define va_start(pvar, firstarg) \\\n- ((pvar) = *(va_list *) __builtin_saveregs (),\t\t\t\\\n-  (pvar).__ireg_used = __builtin_args_info (0) / 4,\t\t\\\n-  (pvar).__freg_used = __builtin_args_info (1) / 4,\t\t\\\n-  (pvar).__mem_ptr = __builtin_next_arg ())\n-\n-#endif /* !defined(_STDARG_H)  ... varargs support */\n+/* Define __gnuc_va_list.  */\n \n+#ifndef __GNUC_VA_LIST\n+#define __GNUC_VA_LIST\n \n typedef union {\n   float\t\t__freg[8];\n@@ -38,10 +22,6 @@ typedef struct {\n #endif\n } __va_saved_regs;\n \n-#ifndef _VA_LIST\n-#define _VA_LIST\n-#define __GNU_VA_LIST\t/* Field names were properly prefixed with `__'.  */\n-\n typedef struct {\n #if defined(__SVR4__) || defined(__alliant__)\n   unsigned\t__ireg_used;\t/* How many int regs consumed 'til now? */\n@@ -54,10 +34,34 @@ typedef struct {\n   unsigned\t__ireg_used;\t/* How many int regs consumed 'til now? */\n   unsigned\t__freg_used;\t/* How many flt regs consumed 'til now? */\n #endif\n-} va_list;\n+} __gnuc_va_list;\n+#endif /* not __GNUC_VA_LIST */\n \n-#endif /* !defined(_VA_LIST) */\n+/* If this is for internal libc use, don't define anything but\n+   __gnuc_va_list.  */\n+#if defined (_STDARG_H) || defined (_VARARGS_H)\n \n+#if !defined(_STDARG_H)\n+\n+/* varargs support */\n+#define va_alist __builtin_va_alist\n+#define va_dcl\n+#define va_start(pvar) ((pvar) = * (__gnuc_va_list *) __builtin_saveregs ())\n+\n+#else /* STDARG.H */\n+\n+/* ANSI alternative.  */\n+/* Note that CUMULATIVE_ARGS elements are measured in bytes on the i860,\n+   so we divide by 4 to get # of registers.  */\n+#define va_start(pvar, firstarg) \\\n+ ((pvar) = *(__gnuc_va_list *) __builtin_saveregs (),\t\t\t\\\n+  (pvar).__ireg_used = __builtin_args_info (0) / 4,\t\t\\\n+  (pvar).__freg_used = __builtin_args_info (1) / 4,\t\t\\\n+  (pvar).__mem_ptr = __builtin_next_arg ())\n+\n+#endif /* _STDARG_H */\n+\n+void va_end (__gnuc_va_list);\t\t/* Defined in libgcc.a */\n #define va_end(__va)\n \n /* Values returned by __builtin_classify_type.  */\n@@ -97,12 +101,14 @@ enum {\n \n /* Make allowances here for adding 128-bit (long double) floats someday.  */\n \n+#if 0 /* What was this for? */\n #ifndef __GNU_VA_LIST\n #define __ireg_used ireg_used\n #define __freg_used freg_used\n #define __mem_ptr mem_ptr\n #define __reg_base reg_base\n #endif\n+#endif /* 0 */\n \n /* Avoid errors if compiling GCC v2 with GCC v1.  */\n #if __GNUC__ == 1\n@@ -195,3 +201,5 @@ __extension__\t\t\t\t\t\t\t\t\\\n   __rv;\t\t\t\t\t\t\t\t\t\\\n }))\n \n+#endif /* defined (_STDARG_H) || defined (_VARARGS_H) */\n+"}]}