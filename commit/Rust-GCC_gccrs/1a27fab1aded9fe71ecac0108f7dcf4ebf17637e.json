{"sha": "1a27fab1aded9fe71ecac0108f7dcf4ebf17637e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWEyN2ZhYjFhZGVkOWZlNzFlY2FjMDEwOGY3ZGNmNGViZjE3NjM3ZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-01-26T08:46:36Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-01-26T08:46:36Z"}, "message": "re PR target/70465 (Poor code for x87 asm)\n\n\tPR target/70465\n\t* reg-stack.c (emit_swap_insn): Instead of fld a; fld b; fxchg %st(1);\n\temit fld b; fld a; if possible.\n\n\t* gcc.target/i386/pr70465.c: New test.\n\nFrom-SVN: r244921", "tree": {"sha": "e62c3830860aef695c7137e2e8a1f5a8a998734e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e62c3830860aef695c7137e2e8a1f5a8a998734e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a27fab1aded9fe71ecac0108f7dcf4ebf17637e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a27fab1aded9fe71ecac0108f7dcf4ebf17637e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a27fab1aded9fe71ecac0108f7dcf4ebf17637e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a27fab1aded9fe71ecac0108f7dcf4ebf17637e/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e6d55103c3cf917a0305628619784808e1abf096", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6d55103c3cf917a0305628619784808e1abf096", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6d55103c3cf917a0305628619784808e1abf096"}], "stats": {"total": 90, "additions": 90, "deletions": 0}, "files": [{"sha": "9a82c9fb00a7231bec17d47434fe93f2c68fd042", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a27fab1aded9fe71ecac0108f7dcf4ebf17637e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a27fab1aded9fe71ecac0108f7dcf4ebf17637e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1a27fab1aded9fe71ecac0108f7dcf4ebf17637e", "patch": "@@ -1,5 +1,9 @@\n 2017-01-26  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/70465\n+\t* reg-stack.c (emit_swap_insn): Instead of fld a; fld b; fxchg %st(1);\n+\temit fld b; fld a; if possible.\n+\n \t* brig-builtins.def: Update copyright years.\n \t* config/arm/arm_acle_builtins.def: Update copyright years.\n "}, {"sha": "7bf007cea45ef6b2336dd44d47386281626a1987", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a27fab1aded9fe71ecac0108f7dcf4ebf17637e/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a27fab1aded9fe71ecac0108f7dcf4ebf17637e/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=1a27fab1aded9fe71ecac0108f7dcf4ebf17637e", "patch": "@@ -887,6 +887,77 @@ emit_swap_insn (rtx_insn *insn, stack_ptr regstack, rtx reg)\n \t  && REG_P (i1src) && REGNO (i1src) == FIRST_STACK_REG\n \t  && find_regno_note (i1, REG_DEAD, FIRST_STACK_REG) == NULL_RTX)\n \treturn;\n+\n+      /* Instead of\n+\t   fld a\n+\t   fld b\n+\t   fxch %st(1)\n+\t just use\n+\t   fld b\n+\t   fld a\n+         if possible.  */\n+\n+      if (REG_P (i1dest)\n+\t  && REGNO (i1dest) == FIRST_STACK_REG\n+\t  && MEM_P (SET_SRC (i1set))\n+\t  && !side_effects_p (SET_SRC (i1set))\n+\t  && hard_regno == FIRST_STACK_REG + 1\n+\t  && i1 != BB_HEAD (current_block))\n+\t{\n+\t  /* i1 is the last insn that involves stack regs before insn, and\n+\t     is known to be a load without other side-effects, i.e. fld b\n+\t     in the above comment.  */\n+\t  rtx_insn *i2 = NULL;\n+\t  rtx i2set;\n+\t  rtx_insn *tmp = PREV_INSN (i1);\n+\t  rtx_insn *limit = PREV_INSN (BB_HEAD (current_block));\n+\t  /* Find the previous insn involving stack regs, but don't pass a\n+\t     block boundary.  */\n+\t  while (tmp != limit)\n+\t    {\n+\t      if (LABEL_P (tmp)\n+\t\t  || CALL_P (tmp)\n+\t\t  || NOTE_INSN_BASIC_BLOCK_P (tmp)\n+\t\t  || (NONJUMP_INSN_P (tmp)\n+\t\t      && stack_regs_mentioned (tmp)))\n+\t\t{\n+\t\t  i2 = tmp;\n+\t\t  break;\n+\t\t}\n+\t      tmp = PREV_INSN (tmp);\n+\t    }\n+\t  if (i2 != NULL_RTX\n+\t      && (i2set = single_set (i2)) != NULL_RTX)\n+\t    {\n+\t      rtx i2dest = *get_true_reg (&SET_DEST (i2set));\n+\t      /* If the last two insns before insn that involve\n+\t\t stack regs are loads, where the latter (i1)\n+\t\t pushes onto the register stack and thus\n+\t\t moves the value from the first load (i2) from\n+\t\t %st to %st(1), consider swapping them.  */\n+\t      if (REG_P (i2dest)\n+\t\t  && REGNO (i2dest) == FIRST_STACK_REG\n+\t\t  && MEM_P (SET_SRC (i2set))\n+\t\t  /* Ensure i2 doesn't have other side-effects.  */\n+\t\t  && !side_effects_p (SET_SRC (i2set))\n+\t\t  /* And that the two instructions can actually be\n+\t\t     swapped, i.e. there shouldn't be any stores\n+\t\t     in between i2 and i1 that might alias with\n+\t\t     the i1 memory, and the memory address can't\n+\t\t     use registers set in between i2 and i1.  */\n+\t\t  && !modified_between_p (SET_SRC (i1set), i2, i1))\n+\t\t{\n+\t\t  /* Move i1 (fld b above) right before i2 (fld a\n+\t\t     above.  */\n+\t\t  remove_insn (i1);\n+\t\t  SET_PREV_INSN (i1) = NULL_RTX;\n+\t\t  SET_NEXT_INSN (i1) = NULL_RTX;\n+\t\t  set_block_for_insn (i1, NULL);\n+\t\t  emit_insn_before (i1, i2);\n+\t\t  return;\n+\t\t}\n+\t    }\n+\t}\n     }\n \n   /* Avoid emitting the swap if this is the first register stack insn"}, {"sha": "b2d3af0fc95b80373ab2f4ad7bb340e22b0d3a30", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a27fab1aded9fe71ecac0108f7dcf4ebf17637e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a27fab1aded9fe71ecac0108f7dcf4ebf17637e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1a27fab1aded9fe71ecac0108f7dcf4ebf17637e", "patch": "@@ -1,5 +1,8 @@\n 2017-01-26  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/70465\n+\t* gcc.target/i386/pr70465.c: New test.\n+\n \t* brig.dg/dg.exp: Update copyright years.\n \t* lib/brig-dg.exp: Update copyright years.\n \t* lib/brig.exp: Update copyright years."}, {"sha": "2d45e1b53443a40cf3820bf5bcd53a3b1b3fd6de", "filename": "gcc/testsuite/gcc.target/i386/pr70465.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a27fab1aded9fe71ecac0108f7dcf4ebf17637e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70465.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a27fab1aded9fe71ecac0108f7dcf4ebf17637e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70465.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70465.c?ref=1a27fab1aded9fe71ecac0108f7dcf4ebf17637e", "patch": "@@ -0,0 +1,12 @@\n+/* PR target/70465 */\n+/* { dg-do compile { target ia32 } } */\n+/* { dg-options \"-O2 -mfpmath=387 -fomit-frame-pointer\" } */\n+/* { dg-final { scan-assembler-not \"fxch\\t%st.1\" } } */\n+\n+double\n+atan2 (double y, double x)\n+{\n+  double res = 0.0;\n+  asm (\"fpatan\" : \"=t\" (res) : \"u\" (y), \"0\" (x) : \"st(1)\");\n+  return res;\n+}"}]}