{"sha": "00c8e9f61310542dd3948933fab738970303b9d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBjOGU5ZjYxMzEwNTQyZGQzOTQ4OTMzZmFiNzM4OTcwMzAzYjlkMQ==", "commit": {"author": {"name": "Mark Shinwell", "email": "shinwell@codesourcery.com", "date": "2007-01-08T09:25:07Z"}, "committer": {"name": "Mark Shinwell", "email": "shinwell@gcc.gnu.org", "date": "2007-01-08T09:25:07Z"}, "message": "c.opt: Add -flax-vector-conversions.\n\n\tgcc/\n\t* c.opt: Add -flax-vector-conversions.\n\t* c-typeck.c (convert_for_assignment): Pass flag to\n\tvector_types_convertible_p to allow emission of note.\n\t(digest_init): Likewise.\n\t(comptypes_internal): Use vector_types_convertible_p.\n\t* c-opts.c: Handle -flax-vector-conversions.\n\t* c-common.c (flag_lax_vector_conversions): New.\n\t(vector_types_convertible_p): Unless -flax-vector conversions\n\thas been passed, disallow conversions between vectors with\n\tdiffering numbers of subparts and/or element types.  If such\n\ta conversion is disallowed, possibly emit a note on the first\n\toccasion only to inform the user of -flax-vector-conversions.\n\tThe new last argument specifies this.\n\t* c-common.h (flag_lax_vector_conversions): New.\n\t(vector_types_convertible_p): Add extra argument.\n\t* config/i386/i386.c (ix86_init_mmx_sse_builtins): Use\n\tchar_type_node for V*QI type vectors.\n\t* config/rs6000/rs6000-c.c (altivec_overloaded_builtins):\n\tUpdate to satisfy new typechecking rules.\n\t* config/rs6000/altivec.h (vec_cmple): Use vec_cmpge.\n\t* doc/invoke.texi (C Dialect Options): Document\n\t-flax-vector-conversions.\n\n\tgcc/cp/\n\t* call.c (standard_conversion): Pass flag to\n\tvector_types_convertible_p to disallow emission of note.\n\t* typeck.c (convert_for_assignment): Pass flag to\n\tvector_types_convertible_p to allow emission of note.\n\t(ptr_reasonably_similar): Pass flag to vector_types_convertible_p\n\tto disallow emission of note.\n\n\tgcc/testsuite/\n\t* gcc.target/i386/20020531-1.c: Use \"char\" not \"unsigned char\"\n\tin __v8qi typedef.\n\t* gcc.target/powerpc/altivec-vec-merge.c (foo): Add casts.\n\t* gcc.dg/simd-1.c: Update dg-error directives to reflect new\n\tcompiler behaviour.\n\t* gcc.dg/simd-5.c: Likewise.\n\t* gcc.dg/simd-6.c: Likewise.\n\t* g++.dg/conversion/simd1.C: Likewise.\n\t* g++.dg/conversion/simd3.C: Likewise.\n\t* g++.dg/ext/attribute-test-2.C (data): Add \"vs\" member.\n\t(main): Use it.\n\nFrom-SVN: r120572", "tree": {"sha": "3d101600d4d4d5150a485676365aecf8a6e1dbd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d101600d4d4d5150a485676365aecf8a6e1dbd7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00c8e9f61310542dd3948933fab738970303b9d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00c8e9f61310542dd3948933fab738970303b9d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00c8e9f61310542dd3948933fab738970303b9d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00c8e9f61310542dd3948933fab738970303b9d1/comments", "author": null, "committer": null, "parents": [{"sha": "46e3b90f7e326c672c4ecddf5287f603a89d03ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46e3b90f7e326c672c4ecddf5287f603a89d03ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46e3b90f7e326c672c4ecddf5287f603a89d03ef"}], "stats": {"total": 216, "additions": 150, "deletions": 66}, "files": [{"sha": "c5b803bc2adac73f466ebee8f5061cca936ba01c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00c8e9f61310542dd3948933fab738970303b9d1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00c8e9f61310542dd3948933fab738970303b9d1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=00c8e9f61310542dd3948933fab738970303b9d1", "patch": "@@ -1,3 +1,28 @@\n+2007-01-08  Mark Shinwell  <shinwell@codesourcery.com>\n+\n+\t* c.opt: Add -flax-vector-conversions.\n+\t* c-typeck.c (convert_for_assignment): Pass flag to\n+\tvector_types_convertible_p to allow emission of note.\n+\t(digest_init): Likewise.\n+\t* c-opts.c: Handle -flax-vector-conversions.\n+\t* c-common.c (flag_lax_vector_conversions): New.\n+\t(vector_types_convertible_p): Unless -flax-vector conversions\n+\thas been passed, disallow conversions between vectors with\n+\tdiffering numbers of subparts and/or element types.  If such\n+\ta conversion is disallowed, possibly emit a note on the first\n+\toccasion only to inform the user of -flax-vector-conversions.\n+\tThe new last argument specifies this.\n+\t* c-common.h (flag_lax_vector_conversions): New.\n+\t(vector_types_convertible_p): Add extra argument.\n+\t* config/i386/i386.c (ix86_init_mmx_sse_builtins): Use\n+\tchar_type_node for V*QI type vectors.\n+\t* config/rs6000/rs6000-c.c (altivec_overloaded_builtins):\n+\tUpdate to satisfy new typechecking rules.\n+\t* config/rs6000/altivec.h (vec_cmple): Use vec_cmpge, for both\n+\tC and C++ variants.\n+\t* doc/invoke.texi (C Dialect Options): Document\n+\t-flax-vector-conversions.\n+\n 2007-01-08  Mark Shinwell  <shinwell@codesourcery.com>\n \n \tPR tree-optimization/29877"}, {"sha": "ef4c2e86bc5b294c17f75869d7c0afbe2c700d15", "filename": "gcc/c-common.c", "status": "modified", "additions": 38, "deletions": 13, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00c8e9f61310542dd3948933fab738970303b9d1/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00c8e9f61310542dd3948933fab738970303b9d1/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=00c8e9f61310542dd3948933fab738970303b9d1", "patch": "@@ -254,6 +254,10 @@ int flag_short_double;\n \n int flag_short_wchar;\n \n+/* Nonzero means allow implicit conversions between vectors with\n+   differing numbers of subparts and/or differing element types.  */\n+int flag_lax_vector_conversions;\n+\n /* Nonzero means allow Microsoft extensions without warnings or errors.  */\n int flag_ms_extensions;\n \n@@ -1078,19 +1082,40 @@ check_main_parameter_types (tree decl)\n    pedwarn (\"%q+D takes only zero or two arguments\", decl);\n }\n \n- \n-/* Nonzero if vector types T1 and T2 can be converted to each other\n-   without an explicit cast.  */\n-int\n-vector_types_convertible_p (tree t1, tree t2)\n-{\n-  return targetm.vector_opaque_p (t1)\n-\t || targetm.vector_opaque_p (t2)\n-\t || (tree_int_cst_equal (TYPE_SIZE (t1), TYPE_SIZE (t2))\n-\t     && (TREE_CODE (TREE_TYPE (t1)) != REAL_TYPE ||\n-\t\t TYPE_PRECISION (t1) == TYPE_PRECISION (t2))\n-\t     && INTEGRAL_TYPE_P (TREE_TYPE (t1))\n-\t\t== INTEGRAL_TYPE_P (TREE_TYPE (t2)));\n+/* True if vector types T1 and T2 can be converted to each other\n+   without an explicit cast.  If EMIT_LAX_NOTE is true, and T1 and T2\n+   can only be converted with -flax-vector-conversions yet that is not\n+   in effect, emit a note telling the user about that option if such\n+   a note has not previously been emitted.  */\n+bool\n+vector_types_convertible_p (tree t1, tree t2, bool emit_lax_note)\n+{\n+  static bool emitted_lax_note = false;\n+  bool convertible_lax =\n+    targetm.vector_opaque_p (t1)\n+    || targetm.vector_opaque_p (t2)\n+    || (tree_int_cst_equal (TYPE_SIZE (t1), TYPE_SIZE (t2))\n+        && (TREE_CODE (TREE_TYPE (t1)) != REAL_TYPE ||\n+           TYPE_PRECISION (t1) == TYPE_PRECISION (t2))\n+       && INTEGRAL_TYPE_P (TREE_TYPE (t1))\n+          == INTEGRAL_TYPE_P (TREE_TYPE (t2)));\n+\n+  if (!convertible_lax || flag_lax_vector_conversions)\n+    return convertible_lax;\n+\n+  if (TYPE_VECTOR_SUBPARTS (t1) == TYPE_VECTOR_SUBPARTS (t2)\n+      && comptypes (TREE_TYPE (t1), TREE_TYPE (t2)))\n+    return true;\n+\n+  if (emit_lax_note && !emitted_lax_note)\n+    {\n+      emitted_lax_note = true;\n+      inform (\"use -flax-vector-conversions to permit \"\n+              \"conversions between vectors with differing \"\n+              \"element types or numbers of subparts\");\n+    }\n+\n+  return false;\n }\n \n /* Warns if the conversion of EXPR to TYPE may alter a value."}, {"sha": "7b352562ef6e72ad34ed4acb8d6e4bc551edad86", "filename": "gcc/c-common.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00c8e9f61310542dd3948933fab738970303b9d1/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00c8e9f61310542dd3948933fab738970303b9d1/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=00c8e9f61310542dd3948933fab738970303b9d1", "patch": "@@ -392,6 +392,10 @@ extern int flag_short_double;\n \n extern int flag_short_wchar;\n \n+/* Nonzero means allow implicit conversions between vectors with\n+   differing numbers of subparts and/or differing element types.  */\n+extern int flag_lax_vector_conversions;\n+\n /* Nonzero means allow Microsoft extensions without warnings or errors.  */\n extern int flag_ms_extensions;\n \n@@ -801,7 +805,7 @@ extern tree finish_label_address_expr (tree);\n extern tree lookup_label (tree);\n extern tree lookup_name (tree);\n \n-extern int vector_types_convertible_p (tree t1, tree t2);\n+extern bool vector_types_convertible_p (tree t1, tree t2, bool emit_lax_note);\n \n extern rtx c_expand_expr (tree, rtx, enum machine_mode, int, rtx *);\n "}, {"sha": "67adab8cbb78fc8212a7a4606aa08826ad3185ba", "filename": "gcc/c-opts.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00c8e9f61310542dd3948933fab738970303b9d1/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00c8e9f61310542dd3948933fab738970303b9d1/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=00c8e9f61310542dd3948933fab738970303b9d1", "patch": "@@ -705,6 +705,10 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n       flag_implicit_templates = value;\n       break;\n \n+    case OPT_flax_vector_conversions:\n+      flag_lax_vector_conversions = value;\n+      break;\n+\n     case OPT_fms_extensions:\n       flag_ms_extensions = value;\n       break;"}, {"sha": "50db7d4a6ae72fbb56b5b595a181e8d4689f99d9", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00c8e9f61310542dd3948933fab738970303b9d1/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00c8e9f61310542dd3948933fab738970303b9d1/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=00c8e9f61310542dd3948933fab738970303b9d1", "patch": "@@ -3873,7 +3873,7 @@ convert_for_assignment (tree type, tree rhs, enum impl_conv errtype,\n     }\n   /* Some types can interconvert without explicit casts.  */\n   else if (codel == VECTOR_TYPE && coder == VECTOR_TYPE\n-\t   && vector_types_convertible_p (type, TREE_TYPE (rhs)))\n+\t   && vector_types_convertible_p (type, TREE_TYPE (rhs), true))\n     return convert (type, rhs);\n   /* Arithmetic types all interconvert, and enum is treated like int.  */\n   else if ((codel == INTEGER_TYPE || codel == REAL_TYPE\n@@ -4604,7 +4604,7 @@ digest_init (tree type, tree init, bool strict_string, int require_constant)\n      below and handle as a constructor.  */\n   if (code == VECTOR_TYPE\n       && TREE_CODE (TREE_TYPE (inside_init)) == VECTOR_TYPE\n-      && vector_types_convertible_p (TREE_TYPE (inside_init), type)\n+      && vector_types_convertible_p (TREE_TYPE (inside_init), type, true)\n       && TREE_CONSTANT (inside_init))\n     {\n       if (TREE_CODE (inside_init) == VECTOR_CST"}, {"sha": "c5bf9be2e26c4061aeac8489d99ba29afb21660b", "filename": "gcc/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00c8e9f61310542dd3948933fab738970303b9d1/gcc%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00c8e9f61310542dd3948933fab738970303b9d1/gcc%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc.opt?ref=00c8e9f61310542dd3948933fab738970303b9d1", "patch": "@@ -583,6 +583,10 @@ Inject friend functions into enclosing namespace\n flabels-ok\n C++ ObjC++\n \n+flax-vector-conversions\n+C ObjC C++ ObjC++\n+Allow implicit conversions between vectors with differing numbers of subparts and/or differing element types.\n+\n fms-extensions\n C ObjC C++ ObjC++\n Don't warn about uses of Microsoft extensions"}, {"sha": "579b4a32f9480a7b5c8e1b71c180b32909b10828", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00c8e9f61310542dd3948933fab738970303b9d1/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00c8e9f61310542dd3948933fab738970303b9d1/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=00c8e9f61310542dd3948933fab738970303b9d1", "patch": "@@ -15998,7 +15998,7 @@ ix86_init_mmx_sse_builtins (void)\n   const struct builtin_description * d;\n   size_t i;\n \n-  tree V16QI_type_node = build_vector_type_for_mode (intQI_type_node, V16QImode);\n+  tree V16QI_type_node = build_vector_type_for_mode (char_type_node, V16QImode);\n   tree V2SI_type_node = build_vector_type_for_mode (intSI_type_node, V2SImode);\n   tree V2SF_type_node = build_vector_type_for_mode (float_type_node, V2SFmode);\n   tree V2DI_type_node\n@@ -16007,7 +16007,7 @@ ix86_init_mmx_sse_builtins (void)\n   tree V4SF_type_node = build_vector_type_for_mode (float_type_node, V4SFmode);\n   tree V4SI_type_node = build_vector_type_for_mode (intSI_type_node, V4SImode);\n   tree V4HI_type_node = build_vector_type_for_mode (intHI_type_node, V4HImode);\n-  tree V8QI_type_node = build_vector_type_for_mode (intQI_type_node, V8QImode);\n+  tree V8QI_type_node = build_vector_type_for_mode (char_type_node, V8QImode);\n   tree V8HI_type_node = build_vector_type_for_mode (intHI_type_node, V8HImode);\n \n   tree pchar_type_node = build_pointer_type (char_type_node);"}, {"sha": "dc9cb83dd784e8efb456781b81bcf8239b6b2084", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00c8e9f61310542dd3948933fab738970303b9d1/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00c8e9f61310542dd3948933fab738970303b9d1/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=00c8e9f61310542dd3948933fab738970303b9d1", "patch": "@@ -332,7 +332,7 @@ NAME (T a1, U a2) \\\n __altivec_binary_pred(vec_cmplt,\n   __builtin_vec_cmpgt (a2, a1))\n __altivec_binary_pred(vec_cmple,\n-  __builtin_altivec_cmpge (a2, a1))\n+  __builtin_vec_cmpge (a2, a1))\n \n __altivec_scalar_pred(vec_all_in,\n   __builtin_altivec_vcmpbfp_p (__CR6_EQ, a1, a2))\n@@ -402,7 +402,7 @@ __altivec_scalar_pred(vec_any_nle,\n #undef __altivec_binary_pred\n #else\n #define vec_cmplt(a1, a2) __builtin_vec_cmpgt ((a2), (a1))\n-#define vec_cmple(a1, a2) __builtin_altivec_vcmpgefp ((a2), (a1))\n+#define vec_cmple(a1, a2) __builtin_vec_cmpge ((a2), (a1))\n \n #define vec_all_in(a1, a2) __builtin_altivec_vcmpbfp_p (__CR6_EQ, (a1), (a2))\n #define vec_any_out(a1, a2) __builtin_altivec_vcmpbfp_p (__CR6_EQ_REV, (a1), (a2))"}, {"sha": "d8f107505ebb0a7cf34287c749a8a3f2760d9736", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 20, "deletions": 28, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00c8e9f61310542dd3948933fab738970303b9d1/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00c8e9f61310542dd3948933fab738970303b9d1/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=00c8e9f61310542dd3948933fab738970303b9d1", "patch": "@@ -224,47 +224,47 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n   { ALTIVEC_BUILTIN_VEC_UNPACKH, ALTIVEC_BUILTIN_VUPKHSB,\n     RS6000_BTI_V8HI, RS6000_BTI_V16QI, 0, 0 },\n   { ALTIVEC_BUILTIN_VEC_UNPACKH, ALTIVEC_BUILTIN_VUPKHSB,\n-    RS6000_BTI_V8HI, RS6000_BTI_bool_V16QI, 0, 0 },\n+    RS6000_BTI_bool_V8HI, RS6000_BTI_bool_V16QI, 0, 0 },\n   { ALTIVEC_BUILTIN_VEC_UNPACKH, ALTIVEC_BUILTIN_VUPKHSH,\n     RS6000_BTI_V4SI, RS6000_BTI_V8HI, 0, 0 },\n   { ALTIVEC_BUILTIN_VEC_UNPACKH, ALTIVEC_BUILTIN_VUPKHSH,\n-    RS6000_BTI_V4SI, RS6000_BTI_bool_V8HI, 0, 0 },\n+    RS6000_BTI_bool_V4SI, RS6000_BTI_bool_V8HI, 0, 0 },\n   { ALTIVEC_BUILTIN_VEC_UNPACKH, ALTIVEC_BUILTIN_VUPKHPX,\n     RS6000_BTI_unsigned_V4SI, RS6000_BTI_pixel_V8HI, 0, 0 },\n   { ALTIVEC_BUILTIN_VEC_VUPKHSH, ALTIVEC_BUILTIN_VUPKHSH,\n     RS6000_BTI_V4SI, RS6000_BTI_V8HI, 0, 0 },\n   { ALTIVEC_BUILTIN_VEC_VUPKHSH, ALTIVEC_BUILTIN_VUPKHSH,\n-    RS6000_BTI_V4SI, RS6000_BTI_bool_V8HI, 0, 0 },\n+    RS6000_BTI_bool_V4SI, RS6000_BTI_bool_V8HI, 0, 0 },\n   { ALTIVEC_BUILTIN_VEC_VUPKHPX, ALTIVEC_BUILTIN_VUPKHPX,\n     RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V8HI, 0, 0 },\n   { ALTIVEC_BUILTIN_VEC_VUPKHPX, ALTIVEC_BUILTIN_VUPKHPX,\n     RS6000_BTI_unsigned_V4SI, RS6000_BTI_pixel_V8HI, 0, 0 },\n   { ALTIVEC_BUILTIN_VEC_VUPKHSB, ALTIVEC_BUILTIN_VUPKHSB,\n     RS6000_BTI_V8HI, RS6000_BTI_V16QI, 0, 0 },\n   { ALTIVEC_BUILTIN_VEC_VUPKHSB, ALTIVEC_BUILTIN_VUPKHSB,\n-    RS6000_BTI_V8HI, RS6000_BTI_bool_V16QI, 0, 0 },\n+    RS6000_BTI_bool_V8HI, RS6000_BTI_bool_V16QI, 0, 0 },\n   { ALTIVEC_BUILTIN_VEC_UNPACKL, ALTIVEC_BUILTIN_VUPKLSB,\n     RS6000_BTI_V8HI, RS6000_BTI_V16QI, 0, 0 },\n   { ALTIVEC_BUILTIN_VEC_UNPACKL, ALTIVEC_BUILTIN_VUPKLSB,\n-    RS6000_BTI_V8HI, RS6000_BTI_bool_V16QI, 0, 0 },\n+    RS6000_BTI_bool_V8HI, RS6000_BTI_bool_V16QI, 0, 0 },\n   { ALTIVEC_BUILTIN_VEC_UNPACKL, ALTIVEC_BUILTIN_VUPKLPX,\n     RS6000_BTI_unsigned_V4SI, RS6000_BTI_pixel_V8HI, 0, 0 },\n   { ALTIVEC_BUILTIN_VEC_UNPACKL, ALTIVEC_BUILTIN_VUPKLSH,\n     RS6000_BTI_V4SI, RS6000_BTI_V8HI, 0, 0 },\n   { ALTIVEC_BUILTIN_VEC_UNPACKL, ALTIVEC_BUILTIN_VUPKLSH,\n-    RS6000_BTI_V4SI, RS6000_BTI_bool_V8HI, 0, 0 },\n+    RS6000_BTI_bool_V4SI, RS6000_BTI_bool_V8HI, 0, 0 },\n   { ALTIVEC_BUILTIN_VEC_VUPKLPX, ALTIVEC_BUILTIN_VUPKLPX,\n     RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V8HI, 0, 0 },\n   { ALTIVEC_BUILTIN_VEC_VUPKLPX, ALTIVEC_BUILTIN_VUPKLPX,\n     RS6000_BTI_unsigned_V4SI, RS6000_BTI_pixel_V8HI, 0, 0 },\n   { ALTIVEC_BUILTIN_VEC_VUPKLSH, ALTIVEC_BUILTIN_VUPKLSH,\n     RS6000_BTI_V4SI, RS6000_BTI_V8HI, 0, 0 },\n   { ALTIVEC_BUILTIN_VEC_VUPKLSH, ALTIVEC_BUILTIN_VUPKLSH,\n-    RS6000_BTI_V4SI, RS6000_BTI_bool_V8HI, 0, 0 },\n+    RS6000_BTI_bool_V4SI, RS6000_BTI_bool_V8HI, 0, 0 },\n   { ALTIVEC_BUILTIN_VEC_VUPKLSB, ALTIVEC_BUILTIN_VUPKLSB,\n     RS6000_BTI_V8HI, RS6000_BTI_V16QI, 0, 0 },\n   { ALTIVEC_BUILTIN_VEC_VUPKLSB, ALTIVEC_BUILTIN_VUPKLSB,\n-    RS6000_BTI_V8HI, RS6000_BTI_bool_V16QI, 0, 0 },\n+    RS6000_BTI_bool_V8HI, RS6000_BTI_bool_V16QI, 0, 0 },\n \n   /* Binary AltiVec builtins.  */\n   { ALTIVEC_BUILTIN_VEC_ADD, ALTIVEC_BUILTIN_VADDUBM,\n@@ -578,31 +578,23 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n   { ALTIVEC_BUILTIN_VEC_CMPEQ, ALTIVEC_BUILTIN_VCMPEQFP,\n     RS6000_BTI_bool_V4SI, RS6000_BTI_V4SF, RS6000_BTI_V4SF, 0 },\n   { ALTIVEC_BUILTIN_VEC_VCMPEQFP, ALTIVEC_BUILTIN_VCMPEQFP,\n-    RS6000_BTI_V4SI, RS6000_BTI_V4SF, RS6000_BTI_V4SF, 0 },\n-  { ALTIVEC_BUILTIN_VEC_VCMPEQUW, ALTIVEC_BUILTIN_VCMPEQUW,\n-    RS6000_BTI_V4SI, RS6000_BTI_V4SI, RS6000_BTI_V4SI, 0 },\n-  { ALTIVEC_BUILTIN_VEC_VCMPEQUW, ALTIVEC_BUILTIN_VCMPEQUW,\n-    RS6000_BTI_V4SI, RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI, 0 },\n+    RS6000_BTI_bool_V4SI, RS6000_BTI_V4SF, RS6000_BTI_V4SF, 0 },\n+\n   { ALTIVEC_BUILTIN_VEC_VCMPEQUW, ALTIVEC_BUILTIN_VCMPEQUW,\n     RS6000_BTI_bool_V4SI, RS6000_BTI_V4SI, RS6000_BTI_V4SI, 0 },\n   { ALTIVEC_BUILTIN_VEC_VCMPEQUW, ALTIVEC_BUILTIN_VCMPEQUW,\n     RS6000_BTI_bool_V4SI, RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI, 0 },\n-  { ALTIVEC_BUILTIN_VEC_VCMPEQUH, ALTIVEC_BUILTIN_VCMPEQUH,\n-    RS6000_BTI_V8HI, RS6000_BTI_V8HI, RS6000_BTI_V8HI, 0 },\n-  { ALTIVEC_BUILTIN_VEC_VCMPEQUH, ALTIVEC_BUILTIN_VCMPEQUH,\n-    RS6000_BTI_V8HI, RS6000_BTI_unsigned_V8HI, RS6000_BTI_unsigned_V8HI, 0 },\n+\n   { ALTIVEC_BUILTIN_VEC_VCMPEQUH, ALTIVEC_BUILTIN_VCMPEQUH,\n     RS6000_BTI_bool_V8HI, RS6000_BTI_V8HI, RS6000_BTI_V8HI, 0 },\n   { ALTIVEC_BUILTIN_VEC_VCMPEQUH, ALTIVEC_BUILTIN_VCMPEQUH,\n     RS6000_BTI_bool_V8HI, RS6000_BTI_unsigned_V8HI, RS6000_BTI_unsigned_V8HI, 0 },\n-  { ALTIVEC_BUILTIN_VEC_VCMPEQUB, ALTIVEC_BUILTIN_VCMPEQUB,\n-    RS6000_BTI_V16QI, RS6000_BTI_V16QI, RS6000_BTI_V16QI, 0 },\n-  { ALTIVEC_BUILTIN_VEC_VCMPEQUB, ALTIVEC_BUILTIN_VCMPEQUB,\n-    RS6000_BTI_V16QI, RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI, 0 },\n+\n   { ALTIVEC_BUILTIN_VEC_VCMPEQUB, ALTIVEC_BUILTIN_VCMPEQUB,\n     RS6000_BTI_bool_V16QI, RS6000_BTI_V16QI, RS6000_BTI_V16QI, 0 },\n   { ALTIVEC_BUILTIN_VEC_VCMPEQUB, ALTIVEC_BUILTIN_VCMPEQUB,\n     RS6000_BTI_bool_V16QI, RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI, 0 },\n+\n   { ALTIVEC_BUILTIN_VEC_CMPGE, ALTIVEC_BUILTIN_VCMPGEFP,\n     RS6000_BTI_bool_V4SI, RS6000_BTI_V4SF, RS6000_BTI_V4SF, 0 },\n   { ALTIVEC_BUILTIN_VEC_CMPGT, ALTIVEC_BUILTIN_VCMPGTUB,\n@@ -620,29 +612,29 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n   { ALTIVEC_BUILTIN_VEC_CMPGT, ALTIVEC_BUILTIN_VCMPGTFP,\n     RS6000_BTI_bool_V4SI, RS6000_BTI_V4SF, RS6000_BTI_V4SF, 0 },\n   { ALTIVEC_BUILTIN_VEC_VCMPGTFP, ALTIVEC_BUILTIN_VCMPGTFP,\n-    RS6000_BTI_V4SI, RS6000_BTI_V4SF, RS6000_BTI_V4SF, 0 },\n+    RS6000_BTI_bool_V4SI, RS6000_BTI_V4SF, RS6000_BTI_V4SF, 0 },\n   { ALTIVEC_BUILTIN_VEC_VCMPGTSW, ALTIVEC_BUILTIN_VCMPGTSW,\n-    RS6000_BTI_V4SI, RS6000_BTI_V4SI, RS6000_BTI_V4SI, 0 },\n+    RS6000_BTI_bool_V4SI, RS6000_BTI_V4SI, RS6000_BTI_V4SI, 0 },\n   { ALTIVEC_BUILTIN_VEC_VCMPGTSW, ALTIVEC_BUILTIN_VCMPGTSW,\n     RS6000_BTI_bool_V4SI, RS6000_BTI_V4SI, RS6000_BTI_V4SI, 0 },\n   { ALTIVEC_BUILTIN_VEC_VCMPGTUW, ALTIVEC_BUILTIN_VCMPGTUW,\n-    RS6000_BTI_V4SI, RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI, 0 },\n+    RS6000_BTI_bool_V4SI, RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI, 0 },\n   { ALTIVEC_BUILTIN_VEC_VCMPGTUW, ALTIVEC_BUILTIN_VCMPGTUW,\n     RS6000_BTI_bool_V4SI, RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI, 0 },\n   { ALTIVEC_BUILTIN_VEC_VCMPGTSH, ALTIVEC_BUILTIN_VCMPGTSH,\n-    RS6000_BTI_V8HI, RS6000_BTI_V8HI, RS6000_BTI_V8HI, 0 },\n+    RS6000_BTI_bool_V8HI, RS6000_BTI_V8HI, RS6000_BTI_V8HI, 0 },\n   { ALTIVEC_BUILTIN_VEC_VCMPGTSH, ALTIVEC_BUILTIN_VCMPGTSH,\n     RS6000_BTI_bool_V8HI, RS6000_BTI_V8HI, RS6000_BTI_V8HI, 0 },\n   { ALTIVEC_BUILTIN_VEC_VCMPGTUH, ALTIVEC_BUILTIN_VCMPGTUH,\n-    RS6000_BTI_V8HI, RS6000_BTI_unsigned_V8HI, RS6000_BTI_unsigned_V8HI, 0 },\n+    RS6000_BTI_bool_V8HI, RS6000_BTI_unsigned_V8HI, RS6000_BTI_unsigned_V8HI, 0 },\n   { ALTIVEC_BUILTIN_VEC_VCMPGTUH, ALTIVEC_BUILTIN_VCMPGTUH,\n     RS6000_BTI_bool_V8HI, RS6000_BTI_unsigned_V8HI, RS6000_BTI_unsigned_V8HI, 0 },\n   { ALTIVEC_BUILTIN_VEC_VCMPGTSB, ALTIVEC_BUILTIN_VCMPGTSB,\n-    RS6000_BTI_V16QI, RS6000_BTI_V16QI, RS6000_BTI_V16QI, 0 },\n+    RS6000_BTI_bool_V16QI, RS6000_BTI_V16QI, RS6000_BTI_V16QI, 0 },\n   { ALTIVEC_BUILTIN_VEC_VCMPGTSB, ALTIVEC_BUILTIN_VCMPGTSB,\n     RS6000_BTI_bool_V16QI, RS6000_BTI_V16QI, RS6000_BTI_V16QI, 0 },\n   { ALTIVEC_BUILTIN_VEC_VCMPGTUB, ALTIVEC_BUILTIN_VCMPGTUB,\n-    RS6000_BTI_V16QI, RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI, 0 },\n+    RS6000_BTI_bool_V16QI, RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI, 0 },\n   { ALTIVEC_BUILTIN_VEC_VCMPGTUB, ALTIVEC_BUILTIN_VCMPGTUB,\n     RS6000_BTI_bool_V16QI, RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI, 0 },\n   { ALTIVEC_BUILTIN_VEC_CMPLE, ALTIVEC_BUILTIN_VCMPGEFP,"}, {"sha": "a8d9f786e45e2cde828772d65fbb2daac2bda0d3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00c8e9f61310542dd3948933fab738970303b9d1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00c8e9f61310542dd3948933fab738970303b9d1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=00c8e9f61310542dd3948933fab738970303b9d1", "patch": "@@ -1,3 +1,12 @@\n+2007-01-08  Mark Shinwell  <shinwell@codesourcery.com>\n+\n+\t* call.c (standard_conversion): Pass flag to\n+\tvector_types_convertible_p to disallow emission of note.\n+\t* typeck.c (convert_for_assignment): Pass flag to\n+\tvector_types_convertible_p to allow emission of note.\n+\t(ptr_reasonably_similar): Pass flag to vector_types_convertible_p\n+\tto disallow emission of note.\n+\n 2007-01-07  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR c++/28986"}, {"sha": "1cbb4a8f74c89e6e25ca676c5dec9289a077a9f4", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00c8e9f61310542dd3948933fab738970303b9d1/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00c8e9f61310542dd3948933fab738970303b9d1/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=00c8e9f61310542dd3948933fab738970303b9d1", "patch": "@@ -842,7 +842,7 @@ standard_conversion (tree to, tree from, tree expr, bool c_cast_p,\n \tconv->rank = cr_promotion;\n     }\n   else if (fcode == VECTOR_TYPE && tcode == VECTOR_TYPE\n-\t   && vector_types_convertible_p (from, to))\n+\t   && vector_types_convertible_p (from, to, false))\n     return build_conv (ck_std, to, conv);\n   else if (!(flags & LOOKUP_CONSTRUCTOR_CALLABLE)\n \t   && IS_AGGR_TYPE (to) && IS_AGGR_TYPE (from)"}, {"sha": "7c573f663efd4bdece0fb65c9ed6cfce1360e014", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00c8e9f61310542dd3948933fab738970303b9d1/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00c8e9f61310542dd3948933fab738970303b9d1/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=00c8e9f61310542dd3948933fab738970303b9d1", "patch": "@@ -6296,7 +6296,7 @@ convert_for_assignment (tree type, tree rhs,\n   coder = TREE_CODE (rhstype);\n \n   if (TREE_CODE (type) == VECTOR_TYPE && coder == VECTOR_TYPE\n-      && vector_types_convertible_p (type, rhstype))\n+      && vector_types_convertible_p (type, rhstype, true))\n     return convert (type, rhs);\n \n   if (rhs == error_mark_node || rhstype == error_mark_node)\n@@ -6863,7 +6863,7 @@ ptr_reasonably_similar (tree to, tree from)\n \tcontinue;\n \n       if (TREE_CODE (to) == VECTOR_TYPE\n-\t  && vector_types_convertible_p (to, from))\n+\t  && vector_types_convertible_p (to, from, false))\n \treturn 1;\n \n       if (TREE_CODE (to) == INTEGER_TYPE"}, {"sha": "d83f6610bd8f158ba5b50dec6905e10e28e4cfca", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00c8e9f61310542dd3948933fab738970303b9d1/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00c8e9f61310542dd3948933fab738970303b9d1/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=00c8e9f61310542dd3948933fab738970303b9d1", "patch": "@@ -169,7 +169,7 @@ in the following sections.\n -fno-asm  -fno-builtin  -fno-builtin-@var{function} @gol\n -fhosted  -ffreestanding -fopenmp -fms-extensions @gol\n -trigraphs  -no-integrated-cpp  -traditional  -traditional-cpp @gol\n--fallow-single-precision  -fcond-mismatch @gol\n+-fallow-single-precision  -fcond-mismatch -flax-vector-conversions @gol\n -fsigned-bitfields  -fsigned-char @gol\n -funsigned-bitfields  -funsigned-char}\n \n@@ -1381,6 +1381,12 @@ Allow conditional expressions with mismatched types in the second and\n third arguments.  The value of such an expression is void.  This option\n is not supported for C++.\n \n+@item -flax-vector-conversions\n+@opindex flax-vector-conversions\n+Allow implicit conversions between vectors with differing numbers of\n+elements and/or incompatible element types.  This option should not be\n+used for new code.\n+\n @item -funsigned-char\n @opindex funsigned-char\n Let the type @code{char} be unsigned, like @code{unsigned char}."}, {"sha": "80eeb1127599327fc4e974c63753b11fcd0616e1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00c8e9f61310542dd3948933fab738970303b9d1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00c8e9f61310542dd3948933fab738970303b9d1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=00c8e9f61310542dd3948933fab738970303b9d1", "patch": "@@ -1,3 +1,17 @@\n+2007-01-08  Mark Shinwell  <shinwell@codesourcery.com>\n+\n+\t* gcc.target/i386/20020531-1.c: Use \"char\" not \"unsigned char\"\n+\tin __v8qi typedef.\n+\t* gcc.target/powerpc/altivec-vec-merge.c (foo): Add casts.\n+\t* gcc.dg/simd-1.c: Update dg-error directives to reflect new\n+\tcompiler behaviour.\n+\t* gcc.dg/simd-5.c: Likewise.\n+\t* gcc.dg/simd-6.c: Likewise.\n+\t* g++.dg/conversion/simd1.C: Likewise.\n+\t* g++.dg/conversion/simd3.C: Likewise.\n+\t* g++.dg/ext/attribute-test-2.C (data): Add \"vs\" member.\n+\t(main): Use it.\n+\n 2007-01-08  Mark Shinwell  <shinwell@codesourcery.com>\n \n \tPR tree-optimization/29877"}, {"sha": "0a5302d1bdeff70bfe762a34f8a74dc863d5e136", "filename": "gcc/testsuite/g++.dg/conversion/simd1.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00c8e9f61310542dd3948933fab738970303b9d1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fsimd1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00c8e9f61310542dd3948933fab738970303b9d1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fsimd1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fsimd1.C?ref=00c8e9f61310542dd3948933fab738970303b9d1", "patch": "@@ -5,9 +5,9 @@\n \n #define vector __attribute__((vector_size(16)))\n \n-vector signed int vld (int a1, const vector signed int *a2) { return *a2; } /* { dg-error \"near match\" } */\n+vector signed int vld (int a1, const vector signed int *a2) { return *a2; } /* { dg-error \"vld\" } */\n /* { dg-warning \"vector returned by ref\" \"\" { target { powerpc*-*-linux* && ilp32 } }  8 } */\n-vector signed short vld (int a1, const vector signed short *a2) { return *a2; } /* { dg-error \"near match\" } */\n+vector signed short vld (int a1, const vector signed short *a2) { return *a2; } /* { dg-error \"vld\" } */\n \n extern int i;\n extern vector signed short vss;\n@@ -17,7 +17,7 @@ extern const vector signed short *cvssp;\n \n void foo ()\n {\n-  vss = vld(i, vscp);        /* { dg-error \"no match\" } */\n+  vss = vld(i, vscp);        /* { dg-error \"no matching function for call\" } */\n   vss = vld(i, vssp);\n   vss = vld(i, cvssp);\n }"}, {"sha": "cdc2ed68a3babcec9b30d9f1dd674fb94b3b3d3a", "filename": "gcc/testsuite/g++.dg/conversion/simd3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00c8e9f61310542dd3948933fab738970303b9d1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fsimd3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00c8e9f61310542dd3948933fab738970303b9d1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fsimd3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fsimd3.C?ref=00c8e9f61310542dd3948933fab738970303b9d1", "patch": "@@ -10,6 +10,6 @@ unsigned int __attribute__((vector_size(16))) e;\n void foo()\n {\n \tb + d; /* { dg-error \"invalid operands to binary\" } */\n-\td += e;\n+\td += e; /* { dg-error \"use -flax-vector-conversions to permit conversions between vectors with differing element types or numbers of subparts.*cannot convert 'unsigned int __vector__' to 'int __vector__' in assignment\" } */\n \td2 += d;\n }"}, {"sha": "8347cc10c05c25ff4abad48f2969e8e36c002021", "filename": "gcc/testsuite/g++.dg/ext/attribute-test-2.C", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00c8e9f61310542dd3948933fab738970303b9d1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattribute-test-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00c8e9f61310542dd3948933fab738970303b9d1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattribute-test-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattribute-test-2.C?ref=00c8e9f61310542dd3948933fab738970303b9d1", "patch": "@@ -15,8 +15,8 @@ public:\n      return (__attribute__((vector_size(16))) short) vec;\n    }\n \n-   operator __attribute__((vector_size(16))) int (void) {\n-     return (__attribute__((vector_size(16))) int) vec1;\n+   operator __attribute__((vector_size(16))) unsigned int (void) {\n+     return (__attribute__((vector_size(16))) unsigned int) vec1;\n    }\n \n    vector_holder () {\n@@ -30,17 +30,18 @@ public:\n union u {\n               char f[16];\n               vector unsigned int v;\n+              vector short vs;\n } data;\n \n \n vector_holder vh;\n \n int main()\n {\n-  data.v = (__attribute__((vector_size(16))) short) vh;\n+  data.vs = (__attribute__((vector_size(16))) short) vh;\n   if (data.f[0] != 'a' || data.f[15] != 'd')\n     abort(); \n-  data.v = (__attribute__((vector_size(16))) int) vh;\n+  data.v = (__attribute__((vector_size(16))) unsigned int) vh;\n   if (data.f[0] != 'm' || data.f[15] != 'p')\n     abort(); \n "}, {"sha": "08be7805f453731e1d611d1e6f69f20e874199f6", "filename": "gcc/testsuite/gcc.dg/simd-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00c8e9f61310542dd3948933fab738970303b9d1/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00c8e9f61310542dd3948933fab738970303b9d1/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-1.c?ref=00c8e9f61310542dd3948933fab738970303b9d1", "patch": "@@ -32,7 +32,7 @@ hanneke ()\n   e = (typeof (e)) a;\n \n   /* Different signed SIMD assignment.  */\n-  f = a;\n+  f = a; /* { dg-error \"use -flax-vector-conversions to permit conversions between vectors with differing element types or numbers of subparts.*35: error: incompatible types in assignment\" } */\n \n   /* Casted different signed SIMD assignment.  */\n   f = (uv4si) a;"}, {"sha": "37df3709ed1e911bc05b7796b6cfd5cdbe5b7570", "filename": "gcc/testsuite/gcc.dg/simd-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00c8e9f61310542dd3948933fab738970303b9d1/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00c8e9f61310542dd3948933fab738970303b9d1/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-5.c?ref=00c8e9f61310542dd3948933fab738970303b9d1", "patch": "@@ -4,4 +4,4 @@\n /* Ensure that we don't need a typedef to initialize a vector type.  */\n #define vector __attribute__ ((vector_size (8)))\n vector char x = (vector char) {1,2,3,4,5,6,7,8}; /* { dg-bogus \"initializer\" } */\n-vector char y = (vector short) {1,2,3,4}; /* { dg-error \"initializer\" } */\n+vector char y = (vector short) {1,2,3,4}; /* { dg-error \"use -flax-vector-conversions to permit conversions between vectors with differing element types or numbers of subparts.*incompatible types in initialization\" } */"}, {"sha": "a88f13f40c02091a8fd4b3146b47a92696ef0fbf", "filename": "gcc/testsuite/gcc.dg/simd-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00c8e9f61310542dd3948933fab738970303b9d1/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00c8e9f61310542dd3948933fab738970303b9d1/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-6.c?ref=00c8e9f61310542dd3948933fab738970303b9d1", "patch": "@@ -4,4 +4,4 @@\n /* Ensure that we don't need a typedef to initialize a vector type.  */\n #define vector __attribute__ ((vector_size (8)))\n vector char x = (vector char) {1,2,3,4,5,6,7,8}; /* { dg-bogus \"initializer\" } */\n-vector char y = (vector short) {1,2,3,4}; /* { dg-error \"initializer\" } */\n+vector char y = (vector short) {1,2,3,4}; /* { dg-error \"use -flax-vector-conversions to permit conversions between vectors with differing element types or numbers of subparts.*incompatible types in initialization\" } */"}, {"sha": "9ee67b9e664d34e90d5d20983a95ecac8c06d977", "filename": "gcc/testsuite/gcc.target/i386/20020531-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00c8e9f61310542dd3948933fab738970303b9d1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F20020531-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00c8e9f61310542dd3948933fab738970303b9d1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F20020531-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F20020531-1.c?ref=00c8e9f61310542dd3948933fab738970303b9d1", "patch": "@@ -4,7 +4,7 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n /* { dg-options \"-O2 -mmmx\" } */\n \n-typedef unsigned char __v8qi __attribute__ ((vector_size (8)));\n+typedef char __v8qi __attribute__ ((vector_size (8)));\n extern void abort (void);\n extern void exit (int);\n "}, {"sha": "e6027bdeff845a7f26e945bb85fa5e202f92e2a5", "filename": "gcc/testsuite/gcc.target/powerpc/altivec-vec-merge.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00c8e9f61310542dd3948933fab738970303b9d1/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-vec-merge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00c8e9f61310542dd3948933fab738970303b9d1/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-vec-merge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-vec-merge.c?ref=00c8e9f61310542dd3948933fab738970303b9d1", "patch": "@@ -96,7 +96,7 @@ void foo(char *bS, char *bS_edge, int field_MBAFF, int top){\n     v6   = (vector signed short) vec_cmpeq ((vector signed char) v2, (vector signed char) v3);\n   }\n   else  {\n-    v4 = v5 = v6 = vec_nor (v_zero, v_zero);\n+    v4 = v5 = v6 = (vector signed short) vec_nor (v_zero, v_zero);\n   }\n \n   tmp1   = (vector signed short) vec_sl ((vector unsigned char) idx0, v_c1);\n@@ -335,7 +335,7 @@ void foo(char *bS, char *bS_edge, int field_MBAFF, int top){\n     v10  = (vector signed short) vec_cmpeq ((vector signed char) v10, (vector signed char) v11);\n   }\n   else  {\n-    v8 = v9 = v10 = vec_nor (v_zero, v_zero);\n+    v8 = v9 = v10 = (vector signed short) vec_nor (v_zero, v_zero);\n   }\n \n   tmp1   = (vector signed short) vec_sl ((vector unsigned char) idx0, v_c1);"}]}