{"sha": "e8d1ca7d2c344a411779892616c423e157f4aea8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZThkMWNhN2QyYzM0NGE0MTE3Nzk4OTI2MTZjNDIzZTE1N2Y0YWVhOA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-05-05T20:48:51Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-05-05T20:53:35Z"}, "message": "Fix PR target/100402\n\nThis is a regression for 64-bit Windows present from mainline down to the 9\nbranch and introduced by the fix for PR target/99234.  Again SEH, but with\na twist related to the way MinGW implements setjmp/longjmp, which turns out\nto be piggybacked on SEH with recent versions of MinGW, i.e. the longjmp\nperforms a bona-fide unwinding of the stack, because it calls RtlUnwindEx\nwith the second argument initially passed to setjmp, which is the result of\n__builtin_frame_address (0) in the MinGW header file:\n\n  define setjmp(BUF) _setjmp((BUF), __builtin_frame_address (0))\n\nThis means that we directly expose the frame pointer to the SEH machinery\nhere (unlike with regular exception handling where we use an intermediate\nCFA) and thus that we cannot do whatever we want with it.  The old code\nwould leave it unaligned, i.e. not multiple of 16, whereas the new code\naligns it, but this breaks for some reason; at least it appears that a\n.seh_setframe directive with 0 as second argument always works, so the\nfix aligns it this way.\n\ngcc/\n\tPR target/100402\n\t* config/i386/i386.c (ix86_compute_frame_layout): For a SEH target,\n\talways return the establisher frame for __builtin_frame_address (0).\ngcc/testsuite/\n\t* gcc.c-torture/execute/20210505-1.c: New test.", "tree": {"sha": "7d7571c58c0c385fbe2663cd4257a7104458784c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d7571c58c0c385fbe2663cd4257a7104458784c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8d1ca7d2c344a411779892616c423e157f4aea8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8d1ca7d2c344a411779892616c423e157f4aea8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8d1ca7d2c344a411779892616c423e157f4aea8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8d1ca7d2c344a411779892616c423e157f4aea8/comments", "author": null, "committer": null, "parents": [{"sha": "a0b4e09ab0102d9c0a5e6d603a080cb78600c40d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0b4e09ab0102d9c0a5e6d603a080cb78600c40d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0b4e09ab0102d9c0a5e6d603a080cb78600c40d"}], "stats": {"total": 54, "additions": 51, "deletions": 3}, "files": [{"sha": "ecc15358efea03fd03b6bdf6aa4b9b88fcb7b53b", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8d1ca7d2c344a411779892616c423e157f4aea8/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8d1ca7d2c344a411779892616c423e157f4aea8/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=e8d1ca7d2c344a411779892616c423e157f4aea8", "patch": "@@ -6672,12 +6672,29 @@ ix86_compute_frame_layout (void)\n \t area, see the SEH code in config/i386/winnt.c for the rationale.  */\n       frame->hard_frame_pointer_offset = frame->sse_reg_save_offset;\n \n-      /* If we can leave the frame pointer where it is, do so.  Also, return\n+      /* If we can leave the frame pointer where it is, do so; however return\n \t the establisher frame for __builtin_frame_address (0) or else if the\n-\t frame overflows the SEH maximum frame size.  */\n+\t frame overflows the SEH maximum frame size.\n+\n+\t Note that the value returned by __builtin_frame_address (0) is quite\n+\t constrained, because setjmp is piggybacked on the SEH machinery with\n+\t recent versions of MinGW:\n+\n+\t  #    elif defined(__SEH__)\n+\t  #     if defined(__aarch64__) || defined(_ARM64_)\n+\t  #      define setjmp(BUF) _setjmp((BUF), __builtin_sponentry())\n+\t  #     elif (__MINGW_GCC_VERSION < 40702)\n+\t  #      define setjmp(BUF) _setjmp((BUF), mingw_getsp())\n+\t  #     else\n+\t  #      define setjmp(BUF) _setjmp((BUF), __builtin_frame_address (0))\n+\t  #     endif\n+\n+\t and the second argument passed to _setjmp, if not null, is forwarded\n+\t to the TargetFrame parameter of RtlUnwindEx by longjmp (after it has\n+\t built an ExceptionRecord on the fly describing the setjmp buffer).  */\n       const HOST_WIDE_INT diff\n \t= frame->stack_pointer_offset - frame->hard_frame_pointer_offset;\n-      if (diff <= 255)\n+      if (diff <= 255 && !crtl->accesses_prior_frames)\n \t{\n \t  /* The resulting diff will be a multiple of 16 lower than 255,\n \t     i.e. at most 240 as required by the unwind data structure.  */"}, {"sha": "10a2de07921b7a919ea652ddb82c8ef760d91f26", "filename": "gcc/testsuite/gcc.c-torture/execute/20210505-1.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8d1ca7d2c344a411779892616c423e157f4aea8/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20210505-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8d1ca7d2c344a411779892616c423e157f4aea8/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20210505-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20210505-1.c?ref=e8d1ca7d2c344a411779892616c423e157f4aea8", "patch": "@@ -0,0 +1,31 @@\n+/* PR target/100402 */\n+/* Testcase by Hannes Domani <ssbssa@yahoo.de> */\n+\n+/* { dg-require-effective-target indirect_jumps } */\n+\n+#include <setjmp.h>\n+#include <stdbool.h>\n+\n+static jmp_buf buf;\n+static _Bool stop = false;\n+\n+void call_func (void(*func)(void))\n+{\n+  func ();\n+}\n+\n+void func (void)\n+{\n+  stop = true;\n+  longjmp (buf, 1);\n+}\n+\n+int main (void)\n+{\n+  setjmp (buf);\n+\n+  while (!stop)\n+    call_func (func);\n+\n+  return 0;\n+}"}]}