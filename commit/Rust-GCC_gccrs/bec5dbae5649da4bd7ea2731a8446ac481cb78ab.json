{"sha": "bec5dbae5649da4bd7ea2731a8446ac481cb78ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmVjNWRiYWU1NjQ5ZGE0YmQ3ZWEyNzMxYTg0NDZhYzQ4MWNiNzhhYg==", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-01-31T14:47:04Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-02-01T14:13:59Z"}, "message": "testsuite: aarch64: Add tests for vmlXl_high intrinsics\n\nAdd tests for vmlal_high_* and vmlsl_high_* Neon intrinsics. Since\nthese intrinsics are only supported for AArch64, these tests are\nrestricted to only run on AArch64 targets.\n\ngcc/testsuite/ChangeLog:\n\n2021-01-31  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* gcc.target/aarch64/advsimd-intrinsics/vmlXl_high.inc:\n\tNew test template.\n\t* gcc.target/aarch64/advsimd-intrinsics/vmlXl_high_lane.inc:\n\tNew test template.\n\t* gcc.target/aarch64/advsimd-intrinsics/vmlXl_high_laneq.inc:\n\tNew test template.\n\t* gcc.target/aarch64/advsimd-intrinsics/vmlXl_high_n.inc:\n\tNew test.\n\t* gcc.target/aarch64/advsimd-intrinsics/vmlal_high.c:\n\tNew test.\n\t* gcc.target/aarch64/advsimd-intrinsics/vmlal_high_lane.c:\n\tNew test.\n\t* gcc.target/aarch64/advsimd-intrinsics/vmlal_high_laneq.c:\n\tNew test.\n\t* gcc.target/aarch64/advsimd-intrinsics/vmlal_high_n.c:\n\tNew test.\n\t* gcc.target/aarch64/advsimd-intrinsics/vmlsl_high.c:\n\tNew test.\n\t* gcc.target/aarch64/advsimd-intrinsics/vmlsl_high_lane.c:\n\tNew test.\n\t* gcc.target/aarch64/advsimd-intrinsics/vmlsl_high_laneq.c:\n\tNew test.\n\t* gcc.target/aarch64/advsimd-intrinsics/vmlsl_high_n.c:\n\tNew test.", "tree": {"sha": "235d652e38475e5da81d05cfd308cc5e593ddbdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/235d652e38475e5da81d05cfd308cc5e593ddbdd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bec5dbae5649da4bd7ea2731a8446ac481cb78ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bec5dbae5649da4bd7ea2731a8446ac481cb78ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bec5dbae5649da4bd7ea2731a8446ac481cb78ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bec5dbae5649da4bd7ea2731a8446ac481cb78ab/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8db8a004762c08e96c2da223fff71964248e38a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8db8a004762c08e96c2da223fff71964248e38a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8db8a004762c08e96c2da223fff71964248e38a8"}], "stats": {"total": 445, "additions": 445, "deletions": 0}, "files": [{"sha": "7c9ee26b142669c48d27aca6bd11988e948cf52d", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vmlXl_high.inc", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bec5dbae5649da4bd7ea2731a8446ac481cb78ab/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvmlXl_high.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bec5dbae5649da4bd7ea2731a8446ac481cb78ab/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvmlXl_high.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvmlXl_high.inc?ref=bec5dbae5649da4bd7ea2731a8446ac481cb78ab", "patch": "@@ -0,0 +1,89 @@\n+#define FNNAME1(NAME) exec_ ## NAME\n+#define FNNAME(NAME) FNNAME1(NAME)\n+\n+void FNNAME (INSN_NAME) (void)\n+{\n+  /* vector_res = OP(vector, vector3, vector4),\n+     then store the result.  */\n+#define TEST_VMLXL_HIGH1(INSN, T1, T2, W1, W2, N1, N2)\t\t\t       \\\n+  VECT_VAR(vector_res, T1, W1, N1) =\t\t\t\t\t       \\\n+    INSN##_##T2##W2(VECT_VAR(vector, T1, W1, N1),\t\t\t       \\\n+                    VECT_VAR(vector3, T1, W2, N2),\t\t\t       \\\n+                    VECT_VAR(vector4, T1, W2, N2));\t\t\t       \\\n+  vst1q_##T2##W1(VECT_VAR(result, T1, W1, N1), VECT_VAR(vector_res, T1, W1, N1))\n+\n+#define TEST_VMLXL_HIGH(INSN, T1, T2, W1, W2, N1, N2)\t\t\t       \\\n+  TEST_VMLXL_HIGH1(INSN, T1, T2, W1, W2, N1, N2)\n+\n+  DECL_VARIABLE(vector, int, 16, 8);\n+  DECL_VARIABLE(vector3, int, 8, 16);\n+  DECL_VARIABLE(vector4, int, 8, 16);\n+  DECL_VARIABLE(vector_res, int, 16, 8);\n+\n+  DECL_VARIABLE(vector, int, 32, 4);\n+  DECL_VARIABLE(vector3, int, 16, 8);\n+  DECL_VARIABLE(vector4, int, 16, 8);\n+  DECL_VARIABLE(vector_res, int, 32, 4);\n+\n+  DECL_VARIABLE(vector, int, 64, 2);\n+  DECL_VARIABLE(vector3, int, 32, 4);\n+  DECL_VARIABLE(vector4, int, 32, 4);\n+  DECL_VARIABLE(vector_res, int, 64, 2);\n+\n+  DECL_VARIABLE(vector, uint, 16, 8);\n+  DECL_VARIABLE(vector3, uint, 8, 16);\n+  DECL_VARIABLE(vector4, uint, 8, 16);\n+  DECL_VARIABLE(vector_res, uint, 16, 8);\n+\n+  DECL_VARIABLE(vector, uint, 32, 4);\n+  DECL_VARIABLE(vector3, uint, 16, 8);\n+  DECL_VARIABLE(vector4, uint, 16, 8);\n+  DECL_VARIABLE(vector_res, uint, 32, 4);\n+\n+  DECL_VARIABLE(vector, uint, 64, 2);\n+  DECL_VARIABLE(vector3, uint, 32, 4);\n+  DECL_VARIABLE(vector4, uint, 32, 4);\n+  DECL_VARIABLE(vector_res, uint, 64, 2);\n+\n+  clean_results ();\n+\n+  VLOAD(vector, buffer, q, int, s, 16, 8);\n+  VLOAD(vector, buffer, q, int, s, 32, 4);\n+  VLOAD(vector, buffer, q, int, s, 64, 2);\n+  VLOAD(vector, buffer, q, uint, u, 16, 8);\n+  VLOAD(vector, buffer, q, uint, u, 32, 4);\n+  VLOAD(vector, buffer, q, uint, u, 64, 2);\n+\n+  VDUP(vector3, q, int, s, 8, 16, 0x55);\n+  VDUP(vector4, q, int, s, 8, 16, 0xBB);\n+  VDUP(vector3, q, int, s, 16, 8, 0x55);\n+  VDUP(vector4, q, int, s, 16, 8, 0xBB);\n+  VDUP(vector3, q, int, s, 32, 4, 0x55);\n+  VDUP(vector4, q, int, s, 32, 4, 0xBB);\n+  VDUP(vector3, q, uint, u, 8, 16, 0x55);\n+  VDUP(vector4, q, uint, u, 8, 16, 0xBB);\n+  VDUP(vector3, q, uint, u, 16, 8, 0x55);\n+  VDUP(vector4, q, uint, u, 16, 8, 0xBB);\n+  VDUP(vector3, q, uint, u, 32, 4, 0x55);\n+  VDUP(vector4, q, uint, u, 32, 4, 0xBB);\n+\n+  TEST_VMLXL_HIGH(INSN_NAME, int, s, 16, 8, 8, 16);\n+  TEST_VMLXL_HIGH(INSN_NAME, int, s, 32, 16, 4, 8);\n+  TEST_VMLXL_HIGH(INSN_NAME, int, s, 64, 32, 2, 4);\n+  TEST_VMLXL_HIGH(INSN_NAME, uint, u, 16, 8, 8, 16);\n+  TEST_VMLXL_HIGH(INSN_NAME, uint, u, 32, 16, 4, 8);\n+  TEST_VMLXL_HIGH(INSN_NAME, uint, u, 64, 32, 2, 4);\n+\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected, \"\");\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected, \"\");\n+  CHECK(TEST_MSG, int, 64, 2, PRIx64, expected, \"\");\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected, \"\");\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected, \"\");\n+  CHECK(TEST_MSG, uint, 64, 2, PRIx64, expected, \"\");\n+}\n+\n+int main (void)\n+{\n+  FNNAME (INSN_NAME) ();\n+  return 0;\n+}"}, {"sha": "b5728550cc5d04817cf3ec28a19094aeca6ccf4e", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vmlXl_high_lane.inc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bec5dbae5649da4bd7ea2731a8446ac481cb78ab/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvmlXl_high_lane.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bec5dbae5649da4bd7ea2731a8446ac481cb78ab/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvmlXl_high_lane.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvmlXl_high_lane.inc?ref=bec5dbae5649da4bd7ea2731a8446ac481cb78ab", "patch": "@@ -0,0 +1,71 @@\n+#define FNNAME1(NAME) exec_ ## NAME\n+#define FNNAME(NAME) FNNAME1(NAME)\n+\n+void FNNAME (INSN_NAME) (void)\n+{\n+  /* vector_res = vmlxl_high_lane(vector, vector3, vector4, lane),\n+     then store the result.  */\n+#define TEST_VMLXL_HIGH_LANE1(INSN, T1, T2, W1, W2, N1, N2, V)\t\t  \\\n+  VECT_VAR(vector_res, T1, W2, N2) =                                      \\\n+    INSN##_##T2##W1(VECT_VAR(vector, T1, W2, N2),\t\t\t  \\\n+                    VECT_VAR(vector3, T1, W1, N1),\t\t\t  \\\n+                    VECT_VAR(vector4, T1, W1, N2),\t\t\t  \\\n+                    V);\t\t\t\t\t\t\t  \\\n+  vst1q_##T2##W2(VECT_VAR(result, T1, W2, N2),\t\t\t\t  \\\n+\t\t VECT_VAR(vector_res, T1, W2, N2))\n+\n+#define TEST_VMLXL_HIGH_LANE(INSN, T1, T2, W1, W2, N1, N2, V)\t\t  \\\n+  TEST_VMLXL_HIGH_LANE1(INSN, T1, T2, W1, W2, N1, N2, V)\n+\n+  DECL_VARIABLE(vector, int, 32, 4);\n+  DECL_VARIABLE(vector3, int, 16, 8);\n+  DECL_VARIABLE(vector4, int, 16, 4);\n+  DECL_VARIABLE(vector_res, int, 32, 4);\n+\n+  DECL_VARIABLE(vector, int, 64, 2);\n+  DECL_VARIABLE(vector3, int, 32, 4);\n+  DECL_VARIABLE(vector4, int, 32, 2);\n+  DECL_VARIABLE(vector_res, int, 64, 2);\n+\n+  DECL_VARIABLE(vector, uint, 32, 4);\n+  DECL_VARIABLE(vector3, uint, 16, 8);\n+  DECL_VARIABLE(vector4, uint, 16, 4);\n+  DECL_VARIABLE(vector_res, uint, 32, 4);\n+\n+  DECL_VARIABLE(vector, uint, 64, 2);\n+  DECL_VARIABLE(vector3, uint, 32, 4);\n+  DECL_VARIABLE(vector4, uint, 32, 2);\n+  DECL_VARIABLE(vector_res, uint, 64, 2);\n+\n+  clean_results ();\n+\n+  VLOAD(vector, buffer, q, int, s, 32, 4);\n+  VLOAD(vector, buffer, q, int, s, 64, 2);\n+  VLOAD(vector, buffer, q, uint, u, 32, 4);\n+  VLOAD(vector, buffer, q, uint, u, 64, 2);\n+\n+  VDUP(vector3, q, int, s, 16, 8, 0x55);\n+  VDUP(vector4, , int, s, 16, 4, 0xBB);\n+  VDUP(vector3, q, int, s, 32, 4, 0x55);\n+  VDUP(vector4, , int, s, 32, 2, 0xBB);\n+  VDUP(vector3, q, uint, u, 16, 8, 0x55);\n+  VDUP(vector4, , uint, u, 16, 4, 0xBB);\n+  VDUP(vector3, q, uint, u, 32, 4, 0x55);\n+  VDUP(vector4, , uint, u, 32, 2, 0xBB);\n+\n+  TEST_VMLXL_HIGH_LANE(INSN_NAME, int, s, 16, 32, 8, 4, 2);\n+  TEST_VMLXL_HIGH_LANE(INSN_NAME, int, s, 32, 64, 4, 2, 1);\n+  TEST_VMLXL_HIGH_LANE(INSN_NAME, uint, u, 16, 32, 8, 4, 2);\n+  TEST_VMLXL_HIGH_LANE(INSN_NAME, uint, u, 32, 64, 4, 2, 1);\n+\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected, \"\");\n+  CHECK(TEST_MSG, int, 64, 2, PRIx64, expected, \"\");\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected, \"\");\n+  CHECK(TEST_MSG, uint, 64, 2, PRIx64, expected, \"\");\n+}\n+\n+int main (void)\n+{\n+  FNNAME (INSN_NAME) ();\n+  return 0;\n+}"}, {"sha": "d970e19fd76f96cce916f699ca19a4fee9a8d026", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vmlXl_high_laneq.inc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bec5dbae5649da4bd7ea2731a8446ac481cb78ab/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvmlXl_high_laneq.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bec5dbae5649da4bd7ea2731a8446ac481cb78ab/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvmlXl_high_laneq.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvmlXl_high_laneq.inc?ref=bec5dbae5649da4bd7ea2731a8446ac481cb78ab", "patch": "@@ -0,0 +1,71 @@\n+#define FNNAME1(NAME) exec_ ## NAME\n+#define FNNAME(NAME) FNNAME1(NAME)\n+\n+void FNNAME (INSN_NAME) (void)\n+{\n+  /* vector_res = vmlxl_high_laneq(vector, vector3, vector4, lane),\n+     then store the result.  */\n+#define TEST_VMLXL_HIGH_LANEQ1(INSN, T1, T2, W1, W2, N1, N2, V)\t\t  \\\n+  VECT_VAR(vector_res, T1, W2, N2) =                                      \\\n+    INSN##_##T2##W1(VECT_VAR(vector, T1, W2, N2),\t\t\t  \\\n+                    VECT_VAR(vector3, T1, W1, N1),\t\t\t  \\\n+                    VECT_VAR(vector4, T1, W1, N1),\t\t\t  \\\n+                    V);\t\t\t\t\t\t\t  \\\n+  vst1q_##T2##W2(VECT_VAR(result, T1, W2, N2),\t\t\t\t  \\\n+\t\t VECT_VAR(vector_res, T1, W2, N2))\n+\n+#define TEST_VMLXL_HIGH_LANEQ(INSN, T1, T2, W1, W2, N1, N2, V)\t\t  \\\n+  TEST_VMLXL_HIGH_LANEQ1(INSN, T1, T2, W1, W2, N1, N2, V)\n+\n+  DECL_VARIABLE(vector, int, 32, 4);\n+  DECL_VARIABLE(vector3, int, 16, 8);\n+  DECL_VARIABLE(vector4, int, 16, 8);\n+  DECL_VARIABLE(vector_res, int, 32, 4);\n+\n+  DECL_VARIABLE(vector, int, 64, 2);\n+  DECL_VARIABLE(vector3, int, 32, 4);\n+  DECL_VARIABLE(vector4, int, 32, 4);\n+  DECL_VARIABLE(vector_res, int, 64, 2);\n+\n+  DECL_VARIABLE(vector, uint, 32, 4);\n+  DECL_VARIABLE(vector3, uint, 16, 8);\n+  DECL_VARIABLE(vector4, uint, 16, 8);\n+  DECL_VARIABLE(vector_res, uint, 32, 4);\n+\n+  DECL_VARIABLE(vector, uint, 64, 2);\n+  DECL_VARIABLE(vector3, uint, 32, 4);\n+  DECL_VARIABLE(vector4, uint, 32, 4);\n+  DECL_VARIABLE(vector_res, uint, 64, 2);\n+\n+  clean_results ();\n+\n+  VLOAD(vector, buffer, q, int, s, 32, 4);\n+  VLOAD(vector, buffer, q, int, s, 64, 2);\n+  VLOAD(vector, buffer, q, uint, u, 32, 4);\n+  VLOAD(vector, buffer, q, uint, u, 64, 2);\n+\n+  VDUP(vector3, q, int, s, 16, 8, 0x55);\n+  VDUP(vector4, q, int, s, 16, 8, 0xBB);\n+  VDUP(vector3, q, int, s, 32, 4, 0x55);\n+  VDUP(vector4, q, int, s, 32, 4, 0xBB);\n+  VDUP(vector3, q, uint, u, 16, 8, 0x55);\n+  VDUP(vector4, q, uint, u, 16, 8, 0xBB);\n+  VDUP(vector3, q, uint, u, 32, 4, 0x55);\n+  VDUP(vector4, q, uint, u, 32, 4, 0xBB);\n+\n+  TEST_VMLXL_HIGH_LANEQ(INSN_NAME, int, s, 16, 32, 8, 4, 5);\n+  TEST_VMLXL_HIGH_LANEQ(INSN_NAME, int, s, 32, 64, 4, 2, 3);\n+  TEST_VMLXL_HIGH_LANEQ(INSN_NAME, uint, u, 16, 32, 8, 4, 7);\n+  TEST_VMLXL_HIGH_LANEQ(INSN_NAME, uint, u, 32, 64, 4, 2, 1);\n+\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected, \"\");\n+  CHECK(TEST_MSG, int, 64, 2, PRIx64, expected, \"\");\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected, \"\");\n+  CHECK(TEST_MSG, uint, 64, 2, PRIx64, expected, \"\");\n+}\n+\n+int main (void)\n+{\n+  FNNAME (INSN_NAME) ();\n+  return 0;\n+}"}, {"sha": "65b278f137c54cb8d8dce84ebf219af8f4c0dee6", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vmlXl_high_n.inc", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bec5dbae5649da4bd7ea2731a8446ac481cb78ab/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvmlXl_high_n.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bec5dbae5649da4bd7ea2731a8446ac481cb78ab/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvmlXl_high_n.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvmlXl_high_n.inc?ref=bec5dbae5649da4bd7ea2731a8446ac481cb78ab", "patch": "@@ -0,0 +1,62 @@\n+#define FNNAME1(NAME) exec_ ## NAME\n+#define FNNAME(NAME) FNNAME1(NAME)\n+\n+void FNNAME (INSN_NAME) (void)\n+{\n+  /* vector_res = vmlxl_high_n(vector, vector2, val), then store the result. */\n+#define TEST_VMLXL_HIGH_N1(INSN, T1, T2, W1, W2, N1, N2, V)\t\t  \\\n+  VECT_VAR(vector_res, T1, W2, N2) =\t\t\t\t\t  \\\n+    INSN##_##T2##W1(VECT_VAR(vector, T1, W2, N2),\t\t\t  \\\n+\t\t    VECT_VAR(vector2, T1, W1, N1),\t\t\t  \\\n+\t\t    V);\t\t\t\t\t\t\t  \\\n+  vst1q_##T2##W2(VECT_VAR(result, T1, W2, N2),\t\t\t\t  \\\n+\t\t VECT_VAR(vector_res, T1, W2, N2))\n+\n+#define TEST_VMLXL_HIGH_N(INSN, T1, T2, W1, W2, N1, N2, V)\t\t  \\\n+  TEST_VMLXL_HIGH_N1(INSN, T1, T2, W1, W2, N1, N2, V)\n+\n+  DECL_VARIABLE(vector, int, 32, 4);\n+  DECL_VARIABLE(vector2, int, 16, 8);\n+  DECL_VARIABLE(vector_res, int, 32, 4);\n+\n+  DECL_VARIABLE(vector, int, 64, 2);\n+  DECL_VARIABLE(vector2, int, 32, 4);\n+  DECL_VARIABLE(vector_res, int, 64, 2);\n+\n+  DECL_VARIABLE(vector, uint, 32, 4);\n+  DECL_VARIABLE(vector2, uint, 16, 8);\n+  DECL_VARIABLE(vector_res, uint, 32, 4);\n+\n+  DECL_VARIABLE(vector, uint, 64, 2);\n+  DECL_VARIABLE(vector2, uint, 32, 4);\n+  DECL_VARIABLE(vector_res, uint, 64, 2);\n+\n+  clean_results ();\n+\n+  VLOAD(vector, buffer, q, int, s, 32, 4);\n+  VLOAD(vector, buffer, q, int, s, 64, 2);\n+  VLOAD(vector, buffer, q, uint, u, 32, 4);\n+  VLOAD(vector, buffer, q, uint, u, 64, 2);\n+\n+  VDUP(vector2, q, int, s, 16, 8, 0x55);\n+  VDUP(vector2, q, int, s, 32, 4, 0x55);\n+  VDUP(vector2, q, uint, u, 16, 8, 0x55);\n+  VDUP(vector2, q, uint, u, 32, 4, 0x55);\n+\n+  /* Choose multiplier arbitrarily.  */\n+  TEST_VMLXL_HIGH_N(INSN_NAME, int, s, 16, 32, 8, 4, 0x11);\n+  TEST_VMLXL_HIGH_N(INSN_NAME, int, s, 32, 64, 4, 2, 0x22);\n+  TEST_VMLXL_HIGH_N(INSN_NAME, uint, u, 16, 32, 8, 4, 0x33);\n+  TEST_VMLXL_HIGH_N(INSN_NAME, uint, u, 32, 64, 4, 2, 0x33);\n+\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected, \"\");\n+  CHECK(TEST_MSG, int, 64, 2, PRIx64, expected, \"\");\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected, \"\");\n+  CHECK(TEST_MSG, uint, 64, 2, PRIx64, expected, \"\");\n+}\n+\n+int main (void)\n+{\n+  FNNAME (INSN_NAME) ();\n+  return 0;\n+}"}, {"sha": "7fce05bff41c3919b06e5eff91bf37be55372a89", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vmlal_high.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bec5dbae5649da4bd7ea2731a8446ac481cb78ab/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmlal_high.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bec5dbae5649da4bd7ea2731a8446ac481cb78ab/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmlal_high.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmlal_high.c?ref=bec5dbae5649da4bd7ea2731a8446ac481cb78ab", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+#define INSN_NAME vmlal_high\n+#define TEST_MSG \"VMLAL_HIGH\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected, int, 16, 8) [] = { 0xe907, 0xe908, 0xe909, 0xe90a,\n+\t\t\t\t\t   0xe90b, 0xe90c, 0xe90d, 0xe90e };\n+VECT_VAR_DECL(expected, int, 32, 4) [] = { 0x3e07, 0x3e08, 0x3e09, 0x3e0a };\n+VECT_VAR_DECL(expected, int, 64, 2) [] = { 0x3e07, 0x3e08 };\n+VECT_VAR_DECL(expected, uint, 16, 8) [] = { 0x3e07, 0x3e08, 0x3e09, 0x3e0a,\n+\t\t\t\t\t    0x3e0b, 0x3e0c, 0x3e0d, 0x3e0e };\n+VECT_VAR_DECL(expected, uint, 32, 4) [] = { 0x3e07, 0x3e08, 0x3e09, 0x3e0a };\n+VECT_VAR_DECL(expected, uint, 64, 2) [] = { 0x3e07, 0x3e08 };\n+\n+#include \"vmlXl_high.inc\""}, {"sha": "1c904e2d3c8044053df1a2c75253a89a3afb98f0", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vmlal_high_lane.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bec5dbae5649da4bd7ea2731a8446ac481cb78ab/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmlal_high_lane.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bec5dbae5649da4bd7ea2731a8446ac481cb78ab/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmlal_high_lane.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmlal_high_lane.c?ref=bec5dbae5649da4bd7ea2731a8446ac481cb78ab", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+#define INSN_NAME vmlal_high_lane\n+#define TEST_MSG \"VMLAL_HIGH_LANE\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected, int, 32, 4) [] = { 0x3e07, 0x3e08, 0x3e09, 0x3e0a };\n+VECT_VAR_DECL(expected, int, 64, 2) [] = { 0x3e07, 0x3e08 };\n+VECT_VAR_DECL(expected, uint, 32, 4) [] = { 0x3e07, 0x3e08, 0x3e09, 0x3e0a };\n+VECT_VAR_DECL(expected, uint, 64, 2) [] = { 0x3e07, 0x3e08 };\n+\n+#include \"vmlXl_high_lane.inc\""}, {"sha": "b885e75eb149df2c0f1ad3f4d33136da3d625a42", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vmlal_high_laneq.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bec5dbae5649da4bd7ea2731a8446ac481cb78ab/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmlal_high_laneq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bec5dbae5649da4bd7ea2731a8446ac481cb78ab/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmlal_high_laneq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmlal_high_laneq.c?ref=bec5dbae5649da4bd7ea2731a8446ac481cb78ab", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+#define INSN_NAME vmlal_high_laneq\n+#define TEST_MSG \"VMLAL_HIGH_LANEQ\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected, int, 32, 4) [] = { 0x3e07, 0x3e08, 0x3e09, 0x3e0a };\n+VECT_VAR_DECL(expected, int, 64, 2) [] = { 0x3e07, 0x3e08 };\n+VECT_VAR_DECL(expected, uint, 32, 4) [] = { 0x3e07, 0x3e08, 0x3e09, 0x3e0a };\n+VECT_VAR_DECL(expected, uint, 64, 2) [] = { 0x3e07, 0x3e08 };\n+\n+#include \"vmlXl_high_laneq.inc\""}, {"sha": "68dda03862fd6ed9e4a1fd9c6d9a288023a847e3", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vmlal_high_n.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bec5dbae5649da4bd7ea2731a8446ac481cb78ab/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmlal_high_n.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bec5dbae5649da4bd7ea2731a8446ac481cb78ab/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmlal_high_n.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmlal_high_n.c?ref=bec5dbae5649da4bd7ea2731a8446ac481cb78ab", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+#define INSN_NAME vmlal_high_n\n+#define TEST_MSG \"VMLAL_HIGH_N\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected, int, 32, 4) [] = { 0x595, 0x596, 0x597, 0x598 };\n+VECT_VAR_DECL(expected, int, 64, 2) [] = { 0xb3a, 0xb3b };\n+VECT_VAR_DECL(expected, uint, 32, 4) [] = { 0x10df, 0x10e0, 0x10e1, 0x10e2 };\n+VECT_VAR_DECL(expected, uint, 64, 2) [] = { 0x10df, 0x10e0 };\n+\n+#include \"vmlXl_high_n.inc\""}, {"sha": "169b84227ea2e13aaf89bba8f6cd452a81649ac4", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vmlsl_high.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bec5dbae5649da4bd7ea2731a8446ac481cb78ab/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmlsl_high.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bec5dbae5649da4bd7ea2731a8446ac481cb78ab/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmlsl_high.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmlsl_high.c?ref=bec5dbae5649da4bd7ea2731a8446ac481cb78ab", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+#define INSN_NAME vmlsl_high\n+#define TEST_MSG \"VMLSL_HIGH\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected, int, 16, 8) [] = { 0x16d9, 0x16da, 0x16db, 0x16dc,\n+\t\t\t\t\t   0x16dd, 0x16de, 0x16df, 0x16e0 };\n+VECT_VAR_DECL(expected, int, 32, 4) [] = { 0xffffc1d9, 0xffffc1da,\n+\t\t\t\t\t   0xffffc1db, 0xffffc1dc };\n+VECT_VAR_DECL(expected, int, 64, 2) [] = { 0xffffffffffffc1d9,\n+\t\t\t\t\t   0xffffffffffffc1da };\n+VECT_VAR_DECL(expected, uint, 16, 8) [] = { 0xc1d9, 0xc1da, 0xc1db, 0xc1dc,\n+\t\t\t\t\t    0xc1dd, 0xc1de, 0xc1df, 0xc1e0 };\n+VECT_VAR_DECL(expected, uint, 32, 4) [] = { 0xffffc1d9, 0xffffc1da,\n+\t\t\t\t\t    0xffffc1db, 0xffffc1dc };\n+VECT_VAR_DECL(expected, uint, 64, 2) [] = { 0xffffffffffffc1d9,\n+\t\t\t\t\t    0xffffffffffffc1da };\n+\n+#include \"vmlXl_high.inc\""}, {"sha": "babe10a8934785790b136e6dba79ca1d2689807e", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vmlsl_high_lane.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bec5dbae5649da4bd7ea2731a8446ac481cb78ab/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmlsl_high_lane.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bec5dbae5649da4bd7ea2731a8446ac481cb78ab/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmlsl_high_lane.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmlsl_high_lane.c?ref=bec5dbae5649da4bd7ea2731a8446ac481cb78ab", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+#define INSN_NAME vmlsl_high_lane\n+#define TEST_MSG \"VMLSL_HIGH_LANE\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected, int, 32, 4) [] = { 0xffffc1d9, 0xffffc1da,\n+\t\t\t\t\t   0xffffc1db, 0xffffc1dc };\n+VECT_VAR_DECL(expected, int, 64, 2) [] = { 0xffffffffffffc1d9,\n+\t\t\t\t\t   0xffffffffffffc1da };\n+VECT_VAR_DECL(expected, uint, 32, 4) [] = { 0xffffc1d9, 0xffffc1da,\n+\t\t\t\t\t    0xffffc1db, 0xffffc1dc };\n+VECT_VAR_DECL(expected, uint, 64, 2) [] = { 0xffffffffffffc1d9,\n+\t\t\t\t\t    0xffffffffffffc1da };\n+\n+#include \"vmlXl_high_lane.inc\""}, {"sha": "a4f35a389fbfafa01971dbd618b1ad2aa48d82fe", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vmlsl_high_laneq.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bec5dbae5649da4bd7ea2731a8446ac481cb78ab/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmlsl_high_laneq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bec5dbae5649da4bd7ea2731a8446ac481cb78ab/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmlsl_high_laneq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmlsl_high_laneq.c?ref=bec5dbae5649da4bd7ea2731a8446ac481cb78ab", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+#define INSN_NAME vmlsl_high_laneq\n+#define TEST_MSG \"VMLSL_HIGH_LANEQ\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected, int, 32, 4) [] = { 0xffffc1d9, 0xffffc1da,\n+\t\t\t\t\t   0xffffc1db, 0xffffc1dc };\n+VECT_VAR_DECL(expected, int, 64, 2) [] = { 0xffffffffffffc1d9,\n+\t\t\t\t\t   0xffffffffffffc1da };\n+VECT_VAR_DECL(expected, uint, 32, 4) [] = { 0xffffc1d9, 0xffffc1da,\n+\t\t\t\t\t    0xffffc1db, 0xffffc1dc };\n+VECT_VAR_DECL(expected, uint, 64, 2) [] = { 0xffffffffffffc1d9,\n+\t\t\t\t\t    0xffffffffffffc1da };\n+\n+#include \"vmlXl_high_laneq.inc\""}, {"sha": "2b2bd8d372c1cd0f68cbd73ad5238af61da2d331", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vmlsl_high_n.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bec5dbae5649da4bd7ea2731a8446ac481cb78ab/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmlsl_high_n.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bec5dbae5649da4bd7ea2731a8446ac481cb78ab/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmlsl_high_n.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmlsl_high_n.c?ref=bec5dbae5649da4bd7ea2731a8446ac481cb78ab", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+#define INSN_NAME vmlsl_high_n\n+#define TEST_MSG \"VMLSL_HIGH_N\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected, int, 32, 4) [] = { 0xfffffa4b, 0xfffffa4c,\n+\t\t\t\t\t   0xfffffa4d, 0xfffffa4e };\n+VECT_VAR_DECL(expected, int, 64, 2) [] = { 0xfffffffffffff4a6,\n+\t\t\t\t\t   0xfffffffffffff4a7 };\n+VECT_VAR_DECL(expected, uint, 32, 4) [] = { 0xffffef01, 0xffffef02,\n+\t\t\t\t\t    0xffffef03, 0xffffef04 };\n+VECT_VAR_DECL(expected, uint, 64, 2) [] = { 0xffffffffffffef01,\n+\t\t\t\t\t    0xffffffffffffef02 };\n+\n+#include \"vmlXl_high_n.inc\""}]}