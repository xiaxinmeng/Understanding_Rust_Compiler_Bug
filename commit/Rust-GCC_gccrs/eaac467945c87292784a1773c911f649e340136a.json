{"sha": "eaac467945c87292784a1773c911f649e340136a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWFhYzQ2Nzk0NWM4NzI5Mjc4NGExNzczYzkxMWY2NDllMzQwMTM2YQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2004-08-06T11:23:23Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2004-08-06T11:23:23Z"}, "message": "re PR c/13282 (A \"-Wno...\" switch to turn off \"missing initializer\" warnings)\n\n\tPR c/13282\n\t* c.opt (Wmissing-field-initializers): New option.\n\t* c-opts.c (c_common_post_options): Make -Wextra turn it on by default.\n\t* c-typeck.c (pop_init_level): Guard the missing field warning with\n\twarn_missing_field_initializers rather than extra_warnings.\n\t* doc/invoke.texi (-Wmissing-field-initializers): Document, moving\n\tsome of the explanation from...\n\t(-Wextra): ...here.  Say that the missing field warning can be\n\tseperately controlled by -Wmissing-field-initializers.\n\ncp/\n\t* typeck2.c (process_init_constructor): Guard the missing field warning\n\twith warn_missing_field_initializers rather than extra_warnings.\n\ntestsuite/\n\t* gcc.dg/missing-field-init-[12].c: New tests.\n\t* g++.dg/warn/missing-field-init-[12].C: New tests.\n\nFrom-SVN: r85638", "tree": {"sha": "2423669b264154305c8f708c1b78d38c7f40ddd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2423669b264154305c8f708c1b78d38c7f40ddd2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eaac467945c87292784a1773c911f649e340136a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eaac467945c87292784a1773c911f649e340136a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eaac467945c87292784a1773c911f649e340136a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eaac467945c87292784a1773c911f649e340136a/comments", "author": null, "committer": null, "parents": [{"sha": "155cb61615af89497814ef6c2685e2dfd098f2f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/155cb61615af89497814ef6c2685e2dfd098f2f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/155cb61615af89497814ef6c2685e2dfd098f2f7"}], "stats": {"total": 112, "additions": 99, "deletions": 13}, "files": [{"sha": "0c189c61c958a03c7e78b367ae2ae26c2fcd3b45", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaac467945c87292784a1773c911f649e340136a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaac467945c87292784a1773c911f649e340136a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eaac467945c87292784a1773c911f649e340136a", "patch": "@@ -1,3 +1,15 @@\n+2004-08-06  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\tPR c/13282\n+\t* c.opt (Wmissing-field-initializers): New option.\n+\t* c-opts.c (c_common_post_options): Make -Wextra turn it on by default.\n+\t* c-typeck.c (pop_init_level): Guard the missing field warning with\n+\twarn_missing_field_initializers rather than extra_warnings.\n+\t* doc/invoke.texi (-Wmissing-field-initializers): Document, moving\n+\tsome of the explanation from...\n+\t(-Wextra): ...here.  Say that the missing field warning can be\n+\tseperately controlled by -Wmissing-field-initializers.\n+\n 2004-08-06  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* expr.c (expand_expr_real_1) <ENTRY_VALUE_EXPR>: Remove."}, {"sha": "92a6c7273a36cc51a22d3eb4390d3cbd098d365e", "filename": "gcc/c-opts.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaac467945c87292784a1773c911f649e340136a/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaac467945c87292784a1773c911f649e340136a/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=eaac467945c87292784a1773c911f649e340136a", "patch": "@@ -958,10 +958,12 @@ c_common_post_options (const char **pfilename)\n   if (flag_objc_exceptions && !flag_objc_sjlj_exceptions)\n     flag_exceptions = 1;\n \n-  /* -Wextra implies -Wsign-compare, but not if explicitly\n-      overridden.  */\n+  /* -Wextra implies -Wsign-compare and -Wmissing-field-initializers,\n+     but not if explicitly overridden.  */\n   if (warn_sign_compare == -1)\n     warn_sign_compare = extra_warnings;\n+  if (warn_missing_field_initializers == -1)\n+    warn_missing_field_initializers = extra_warnings;\n \n   /* Special format checking options don't work without -Wformat; warn if\n      they are used.  */"}, {"sha": "44b30123c80d30d906aefae80539aa14b0dc6fee", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaac467945c87292784a1773c911f649e340136a/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaac467945c87292784a1773c911f649e340136a/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=eaac467945c87292784a1773c911f649e340136a", "patch": "@@ -4763,7 +4763,7 @@ pop_init_level (int implicit)\n     }\n \n   /* Warn when some struct elements are implicitly initialized to zero.  */\n-  if (extra_warnings\n+  if (warn_missing_field_initializers\n       && constructor_type\n       && TREE_CODE (constructor_type) == RECORD_TYPE\n       && constructor_unfilled_fields)"}, {"sha": "b84c5ba84081be4eaf77c8841bd84a517d40451b", "filename": "gcc/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaac467945c87292784a1773c911f649e340136a/gcc%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaac467945c87292784a1773c911f649e340136a/gcc%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc.opt?ref=eaac467945c87292784a1773c911f649e340136a", "patch": "@@ -294,6 +294,10 @@ Wmissing-declarations\n C ObjC Var(warn_missing_declarations)\n Warn about global functions without previous declarations\n \n+Wmissing-field-initializers\n+C ObjC C++ ObjC++ Var(warn_missing_field_initializers) Init(-1)\n+Warn about missing fields in struct initializers\n+\n Wmissing-format-attribute\n C ObjC C++ ObjC++ Var(warn_missing_format_attribute)\n Warn about functions which might be candidates for format attributes"}, {"sha": "be759c5840db0eea0d0526d5ad76de4338bcd73c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaac467945c87292784a1773c911f649e340136a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaac467945c87292784a1773c911f649e340136a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=eaac467945c87292784a1773c911f649e340136a", "patch": "@@ -1,3 +1,8 @@\n+2004-08-06  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* typeck2.c (process_init_constructor): Guard the missing field warning\n+\twith warn_missing_field_initializers rather than extra_warnings.\n+\n 2004-08-06  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* class.c (instantiate_type) <ENTRY_VALUE_EXPR>: Do not handle."}, {"sha": "87e05efa0924c3107bb1ea60cef57b42ec0db3a8", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaac467945c87292784a1773c911f649e340136a/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaac467945c87292784a1773c911f649e340136a/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=eaac467945c87292784a1773c911f649e340136a", "patch": "@@ -1022,7 +1022,7 @@ process_init_constructor (tree type, tree init, tree* elts)\n \t      next1 = digest_init (TREE_TYPE (field), next1, 0);\n \n \t      /* Warn when some struct elements are implicitly initialized.  */\n-\t      if (extra_warnings\n+\t      if (warn_missing_field_initializers\n \t          && (!init || BRACE_ENCLOSED_INITIALIZER_P (init)))\n \t\twarning (\"missing initializer for member `%D'\", field);\n \t    }\n@@ -1038,7 +1038,7 @@ process_init_constructor (tree type, tree init, tree* elts)\n \n \t      /* Warn when some struct elements are implicitly initialized\n \t\t to zero.  */\n-\t      if (extra_warnings\n+\t      if (warn_missing_field_initializers\n \t          && (!init || BRACE_ENCLOSED_INITIALIZER_P (init)))\n \t\twarning (\"missing initializer for member `%D'\", field);\n "}, {"sha": "154dc976fb29b948e84cf1387e59c28140c34e71", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 27, "deletions": 8, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaac467945c87292784a1773c911f649e340136a/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaac467945c87292784a1773c911f649e340136a/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=eaac467945c87292784a1773c911f649e340136a", "patch": "@@ -222,7 +222,7 @@ in the following sections.\n -Wimport  -Wno-import  -Winit-self  -Winline @gol\n -Wno-invalid-offsetof  -Winvalid-pch @gol\n -Wlarger-than-@var{len}  -Wlong-long @gol\n--Wmain  -Wmissing-braces @gol\n+-Wmain  -Wmissing-braces  -Wmissing-field-initializers @gol\n -Wmissing-format-attribute  -Wmissing-include-dirs @gol\n -Wmissing-noreturn @gol\n -Wno-multichar  -Wnonnull  -Wpacked  -Wpadded @gol\n@@ -2612,13 +2612,8 @@ incorrect result when the signed value is converted to unsigned.\n \n @item\n An aggregate has an initializer which does not initialize all members.\n-For example, the following code would cause such a warning, because\n-@code{x.h} would be implicitly initialized to zero:\n-\n-@smallexample\n-struct s @{ int f, g, h; @};\n-struct s x = @{ 3, 4 @};\n-@end smallexample\n+This warning can be independently controlled by\n+@option{-Wmissing-field-initializers}.\n \n @item\n A function parameter is declared without a type specifier in K&R-style\n@@ -2902,6 +2897,30 @@ Do so even if the definition itself provides a prototype.\n Use this option to detect global functions that are not declared in\n header files.\n \n+@item -Wmissing-field-initializers\n+@opindex Wmissing-field-initializers\n+@opindex W\n+@opindex Wextra\n+Warn if a structure's initializer has some fields missing.  For\n+example, the following code would cause such a warning, because\n+@code{x.h} is implicitly zero:\n+\n+@smallexample\n+struct s @{ int f, g, h; @};\n+struct s x = @{ 3, 4 @};\n+@end smallexample\n+\n+This option does not warn about designated initializers, so the following\n+modification would not trigger a warning:\n+\n+@smallexample\n+struct s @{ int f, g, h; @};\n+struct s x = @{ .f = 3, .g = 4 @};\n+@end smallexample\n+\n+This warning is included in @option{-Wextra}.  To get other @option{-Wextra}\n+warnings without this one, use @samp{-Wextra -Wno-missing-field-initializers}.\n+\n @item -Wmissing-noreturn\n @opindex Wmissing-noreturn\n Warn about functions which might be candidates for attribute @code{noreturn}."}, {"sha": "87d1ddfc440b4a3670b8ec55f937037de76485e8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaac467945c87292784a1773c911f649e340136a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaac467945c87292784a1773c911f649e340136a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=eaac467945c87292784a1773c911f649e340136a", "patch": "@@ -1,3 +1,8 @@\n+2004-08-06  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* gcc.dg/missing-field-init-[12].c: New tests.\n+\t* g++.dg/warn/missing-field-init-[12].C: New tests.\n+\n 2004-08-06  Mark Mitchell  <mark@codesourcery.com>\n \n \t* gcc.dg/enum2.c: New test."}, {"sha": "f28418f0c60647ce38b548cd94484ed712df35e8", "filename": "gcc/testsuite/g++.dg/warn/missing-field-init-1.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaac467945c87292784a1773c911f649e340136a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmissing-field-init-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaac467945c87292784a1773c911f649e340136a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmissing-field-init-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmissing-field-init-1.C?ref=eaac467945c87292784a1773c911f649e340136a", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wextra -Wno-missing-field-initializers\" } */\n+\n+struct s { int a, b, c; };\n+struct s s1 = { 1, 2, 3 };\n+struct s s2 = { 1, 2 }; /* { dg-bogus \"missing initializer\" } */\n+struct s s3[] = { { 1, 2 }, { 4, 5 } }; /* { dg-bogus \"missing initializer\" } */\n+struct s s4[] = { 1, 2, 3, 4, 5 }; /* { dg-bogus \"missing initializer\" } */\n+struct s s5[] = { 1, 2, 3, 4, 5, 6 };"}, {"sha": "7f6ec060f25db5b124ea241068ca4319342d4668", "filename": "gcc/testsuite/g++.dg/warn/missing-field-init-2.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaac467945c87292784a1773c911f649e340136a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmissing-field-init-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaac467945c87292784a1773c911f649e340136a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmissing-field-init-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmissing-field-init-2.C?ref=eaac467945c87292784a1773c911f649e340136a", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wmissing-field-initializers\" } */\n+\n+struct s { int a, b, c; };\n+struct s s1 = { 1, 2, 3 };\n+struct s s2 = { 1, 2 }; /* { dg-warning \"(missing initializer)|(near initialization)\" } */\n+struct s s3[] = { { 1, 2 }, { 4, 5 } }; /* { dg-warning \"(missing initializer)|(near initialization)\" } */\n+struct s s4[] = { 1, 2, 3, 4, 5 }; /* { dg-warning \"(missing initializer)|(near initialization)\" } */\n+struct s s5[] = { 1, 2, 3, 4, 5, 6 };"}, {"sha": "5f32b021f0acf3c8390fd743b826cf34ef7c6225", "filename": "gcc/testsuite/gcc.dg/missing-field-init-1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaac467945c87292784a1773c911f649e340136a/gcc%2Ftestsuite%2Fgcc.dg%2Fmissing-field-init-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaac467945c87292784a1773c911f649e340136a/gcc%2Ftestsuite%2Fgcc.dg%2Fmissing-field-init-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmissing-field-init-1.c?ref=eaac467945c87292784a1773c911f649e340136a", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wextra -Wno-missing-field-initializers -std=c99\" } */\n+\n+struct s { int a, b, c; };\n+struct s s1 = { 1, 2, 3 };\n+struct s s2 = { 1, 2 }; /* { dg-bogus \"missing initializer\" } */\n+struct s s3[] = { { 1, 2 }, { 4, 5 } }; /* { dg-bogus \"missing initializer\" } */\n+struct s s4[] = { 1, 2, 3, 4, 5 }; /* { dg-bogus \"missing initializer\" } */\n+struct s s5[] = { 1, 2, 3, 4, 5, 6 };\n+struct s s6 = { .a = 1 }; /* { dg-bogus \"missing initializer\" } */"}, {"sha": "581eb30d89b306e0bab6b3ca98af2739bf6a20bd", "filename": "gcc/testsuite/gcc.dg/missing-field-init-2.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaac467945c87292784a1773c911f649e340136a/gcc%2Ftestsuite%2Fgcc.dg%2Fmissing-field-init-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaac467945c87292784a1773c911f649e340136a/gcc%2Ftestsuite%2Fgcc.dg%2Fmissing-field-init-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmissing-field-init-2.c?ref=eaac467945c87292784a1773c911f649e340136a", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wmissing-field-initializers -std=c99\" } */\n+\n+struct s { int a, b, c; };\n+struct s s1 = { 1, 2, 3 };\n+struct s s2 = { 1, 2 }; /* { dg-warning \"(missing initializer)|(near initialization)\" } */\n+struct s s3[] = { { 1, 2 }, { 4, 5 } }; /* { dg-warning \"(missing initializer)|(near initialization)\" } */\n+struct s s4[] = { 1, 2, 3, 4, 5 }; /* { dg-warning \"(missing initializer)|(near initialization)\" } */\n+struct s s5[] = { 1, 2, 3, 4, 5, 6 };\n+/* Designated initializers produce no warning.  */\n+struct s s6 = { .a = 1 }; /* { dg-bogus \"missing initializer\" } */"}]}