{"sha": "628169e0d76597fdb0477cc27a23466ebcb408ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjI4MTY5ZTBkNzY1OTdmZGIwNDc3Y2MyN2EyMzQ2NmViY2I0MDhhYg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-04-15T08:21:56Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-04-15T08:21:56Z"}, "message": "tree-ssa-structalias.c (find_func_aliases_for_builtin_call): Add struct function argument and adjust.\n\n2014-04-15  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-structalias.c (find_func_aliases_for_builtin_call):\n\tAdd struct function argument and adjust.\n\t(find_func_aliases_for_call): Likewise.\n\t(find_func_aliases): Likewise.\n\t(find_func_clobbers): Likewise.\n\t(intra_create_variable_infos): Likewise.\n\t(compute_points_to_sets): Likewise.\n\t(ipa_pta_execute): Adjust.  Do not push/pop cfun.\n\nFrom-SVN: r209408", "tree": {"sha": "2b2caa8b2db66bff263e22536f15146db36e9df9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b2caa8b2db66bff263e22536f15146db36e9df9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/628169e0d76597fdb0477cc27a23466ebcb408ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/628169e0d76597fdb0477cc27a23466ebcb408ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/628169e0d76597fdb0477cc27a23466ebcb408ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/628169e0d76597fdb0477cc27a23466ebcb408ab/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d6d215ac5e9c147d5200489a23b96db062aaef8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6d215ac5e9c147d5200489a23b96db062aaef8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6d215ac5e9c147d5200489a23b96db062aaef8f"}], "stats": {"total": 71, "additions": 40, "deletions": 31}, "files": [{"sha": "751c2f7346e72f4ddd3d2ec0c628bbf36df1ebb1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/628169e0d76597fdb0477cc27a23466ebcb408ab/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/628169e0d76597fdb0477cc27a23466ebcb408ab/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=628169e0d76597fdb0477cc27a23466ebcb408ab", "patch": "@@ -1,3 +1,14 @@\n+2014-04-15  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-structalias.c (find_func_aliases_for_builtin_call):\n+\tAdd struct function argument and adjust.\n+\t(find_func_aliases_for_call): Likewise.\n+\t(find_func_aliases): Likewise.\n+\t(find_func_clobbers): Likewise.\n+\t(intra_create_variable_infos): Likewise.\n+\t(compute_points_to_sets): Likewise.\n+\t(ipa_pta_execute): Adjust.  Do not push/pop cfun.\n+\n 2014-04-15  Richard Biener  <rguenther@suse.de>\n \n \t* tree.c (iterative_hash_expr): Use enum tree_code_class"}, {"sha": "70133cfdcbe9c0242dd2d8b33f9f7d6e4e919bac", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 29, "deletions": 31, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/628169e0d76597fdb0477cc27a23466ebcb408ab/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/628169e0d76597fdb0477cc27a23466ebcb408ab/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=628169e0d76597fdb0477cc27a23466ebcb408ab", "patch": "@@ -4136,7 +4136,7 @@ get_fi_for_callee (gimple call)\n    was handled, otherwise false.  */\n \n static bool\n-find_func_aliases_for_builtin_call (gimple t)\n+find_func_aliases_for_builtin_call (struct function *fn, gimple t)\n {\n   tree fndecl = gimple_call_fndecl (t);\n   vec<ce_s> lhsc = vNULL;\n@@ -4450,7 +4450,7 @@ find_func_aliases_for_builtin_call (gimple t)\n \t     and otherwise are just all nonlocal variables.  */\n \t  if (in_ipa_mode)\n \t    {\n-\t      fi = lookup_vi_for_tree (cfun->decl);\n+\t      fi = lookup_vi_for_tree (fn->decl);\n \t      rhs = get_function_part_constraint (fi, ~0);\n \t      rhs.type = ADDRESSOF;\n \t    }\n@@ -4475,7 +4475,7 @@ find_func_aliases_for_builtin_call (gimple t)\n \t{\n \t  fi = NULL;\n \t  if (!in_ipa_mode\n-\t      || !(fi = get_vi_for_tree (cfun->decl)))\n+\t      || !(fi = get_vi_for_tree (fn->decl)))\n \t    make_constraint_from (get_varinfo (escaped_id), anything_id);\n \t  else if (in_ipa_mode\n \t\t   && fi != NULL)\n@@ -4502,7 +4502,7 @@ find_func_aliases_for_builtin_call (gimple t)\n /* Create constraints for the call T.  */\n \n static void\n-find_func_aliases_for_call (gimple t)\n+find_func_aliases_for_call (struct function *fn, gimple t)\n {\n   tree fndecl = gimple_call_fndecl (t);\n   vec<ce_s> lhsc = vNULL;\n@@ -4511,7 +4511,7 @@ find_func_aliases_for_call (gimple t)\n \n   if (fndecl != NULL_TREE\n       && DECL_BUILT_IN (fndecl)\n-      && find_func_aliases_for_builtin_call (t))\n+      && find_func_aliases_for_builtin_call (fn, t))\n     return;\n \n   fi = get_fi_for_callee (t);\n@@ -4621,7 +4621,7 @@ find_func_aliases_for_call (gimple t)\n    when building alias sets and computing alias grouping heuristics.  */\n \n static void\n-find_func_aliases (gimple origt)\n+find_func_aliases (struct function *fn, gimple origt)\n {\n   gimple t = origt;\n   vec<ce_s> lhsc = vNULL;\n@@ -4665,7 +4665,7 @@ find_func_aliases (gimple origt)\n      In non-ipa mode, we need to generate constraints for each\n      pointer passed by address.  */\n   else if (is_gimple_call (t))\n-    find_func_aliases_for_call (t);\n+    find_func_aliases_for_call (fn, t);\n     \n   /* Otherwise, just a regular assignment statement.  Only care about\n      operations with pointer result, others are dealt with as escape\n@@ -4756,7 +4756,7 @@ find_func_aliases (gimple origt)\n     {\n       fi = NULL;\n       if (!in_ipa_mode\n-\t  || !(fi = get_vi_for_tree (cfun->decl)))\n+\t  || !(fi = get_vi_for_tree (fn->decl)))\n \tmake_escape_constraint (gimple_return_retval (t));\n       else if (in_ipa_mode\n \t       && fi != NULL)\n@@ -4859,7 +4859,7 @@ process_ipa_clobber (varinfo_t fi, tree ptr)\n    IPA constraint builder.  */\n \n static void\n-find_func_clobbers (gimple origt)\n+find_func_clobbers (struct function *fn, gimple origt)\n {\n   gimple t = origt;\n   vec<ce_s> lhsc = vNULL;\n@@ -4877,7 +4877,7 @@ find_func_clobbers (gimple origt)\n     return;\n \n   /* We'd better have function information for the current function.  */\n-  fi = lookup_vi_for_tree (cfun->decl);\n+  fi = lookup_vi_for_tree (fn->decl);\n   gcc_assert (fi != NULL);\n \n   /* Account for stores in assignments and calls.  */\n@@ -4889,12 +4889,12 @@ find_func_clobbers (gimple origt)\n       while (handled_component_p (tem))\n \ttem = TREE_OPERAND (tem, 0);\n       if ((DECL_P (tem)\n-\t   && !auto_var_in_fn_p (tem, cfun->decl))\n+\t   && !auto_var_in_fn_p (tem, fn->decl))\n \t  || INDIRECT_REF_P (tem)\n \t  || (TREE_CODE (tem) == MEM_REF\n \t      && !(TREE_CODE (TREE_OPERAND (tem, 0)) == ADDR_EXPR\n \t\t   && auto_var_in_fn_p\n-\t\t        (TREE_OPERAND (TREE_OPERAND (tem, 0), 0), cfun->decl))))\n+\t\t        (TREE_OPERAND (TREE_OPERAND (tem, 0), 0), fn->decl))))\n \t{\n \t  struct constraint_expr lhsc, *rhsp;\n \t  unsigned i;\n@@ -4917,12 +4917,12 @@ find_func_clobbers (gimple origt)\n       while (handled_component_p (tem))\n \ttem = TREE_OPERAND (tem, 0);\n       if ((DECL_P (tem)\n-\t   && !auto_var_in_fn_p (tem, cfun->decl))\n+\t   && !auto_var_in_fn_p (tem, fn->decl))\n \t  || INDIRECT_REF_P (tem)\n \t  || (TREE_CODE (tem) == MEM_REF\n \t      && !(TREE_CODE (TREE_OPERAND (tem, 0)) == ADDR_EXPR\n \t\t   && auto_var_in_fn_p\n-\t\t        (TREE_OPERAND (TREE_OPERAND (tem, 0), 0), cfun->decl))))\n+\t\t        (TREE_OPERAND (TREE_OPERAND (tem, 0), 0), fn->decl))))\n \t{\n \t  struct constraint_expr lhs, *rhsp;\n \t  unsigned i;\n@@ -5846,14 +5846,14 @@ debug_solution_for_var (unsigned int var)\n    function for intraprocedural mode.  */\n \n static void\n-intra_create_variable_infos (void)\n+intra_create_variable_infos (struct function *fn)\n {\n   tree t;\n \n   /* For each incoming pointer argument arg, create the constraint ARG\n      = NONLOCAL or a dummy variable if it is a restrict qualified\n      passed-by-reference argument.  */\n-  for (t = DECL_ARGUMENTS (current_function_decl); t; t = DECL_CHAIN (t))\n+  for (t = DECL_ARGUMENTS (fn->decl); t; t = DECL_CHAIN (t))\n     {\n       varinfo_t p = get_vi_for_tree (t);\n \n@@ -5905,19 +5905,19 @@ intra_create_variable_infos (void)\n     }\n \n   /* Add a constraint for a result decl that is passed by reference.  */\n-  if (DECL_RESULT (cfun->decl)\n-      && DECL_BY_REFERENCE (DECL_RESULT (cfun->decl)))\n+  if (DECL_RESULT (fn->decl)\n+      && DECL_BY_REFERENCE (DECL_RESULT (fn->decl)))\n     {\n-      varinfo_t p, result_vi = get_vi_for_tree (DECL_RESULT (cfun->decl));\n+      varinfo_t p, result_vi = get_vi_for_tree (DECL_RESULT (fn->decl));\n \n       for (p = result_vi; p; p = vi_next (p))\n \tmake_constraint_from (p, nonlocal_id);\n     }\n \n   /* Add a constraint for the incoming static chain parameter.  */\n-  if (cfun->static_chain_decl != NULL_TREE)\n+  if (fn->static_chain_decl != NULL_TREE)\n     {\n-      varinfo_t p, chain_vi = get_vi_for_tree (cfun->static_chain_decl);\n+      varinfo_t p, chain_vi = get_vi_for_tree (fn->static_chain_decl);\n \n       for (p = chain_vi; p; p = vi_next (p))\n \tmake_constraint_from (p, nonlocal_id);\n@@ -6802,7 +6802,7 @@ compute_points_to_sets (void)\n \n   init_alias_vars ();\n \n-  intra_create_variable_infos ();\n+  intra_create_variable_infos (cfun);\n \n   /* Now walk all statements and build the constraint set.  */\n   FOR_EACH_BB_FN (bb, cfun)\n@@ -6814,14 +6814,14 @@ compute_points_to_sets (void)\n \t  gimple phi = gsi_stmt (gsi);\n \n \t  if (! virtual_operand_p (gimple_phi_result (phi)))\n-\t    find_func_aliases (phi);\n+\t    find_func_aliases (cfun, phi);\n \t}\n \n       for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n \t{\n \t  gimple stmt = gsi_stmt (gsi);\n \n-\t  find_func_aliases (stmt);\n+\t  find_func_aliases (cfun, stmt);\n \t}\n     }\n \n@@ -7176,7 +7176,7 @@ ipa_pta_execute (void)\n \t}\n \n       func = DECL_STRUCT_FUNCTION (node->decl);\n-      push_cfun (func);\n+      gcc_assert (cfun == NULL);\n \n       /* For externally visible or attribute used annotated functions use\n \t local constraints for their arguments.\n@@ -7186,7 +7186,7 @@ ipa_pta_execute (void)\n \t  || node->externally_visible\n \t  || node->force_output)\n \t{\n-\t  intra_create_variable_infos ();\n+\t  intra_create_variable_infos (func);\n \n \t  /* We also need to make function return values escape.  Nothing\n \t     escapes by returning from main though.  */\n@@ -7221,20 +7221,18 @@ ipa_pta_execute (void)\n \t      gimple phi = gsi_stmt (gsi);\n \n \t      if (! virtual_operand_p (gimple_phi_result (phi)))\n-\t\tfind_func_aliases (phi);\n+\t\tfind_func_aliases (func, phi);\n \t    }\n \n \t  for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n \t    {\n \t      gimple stmt = gsi_stmt (gsi);\n \n-\t      find_func_aliases (stmt);\n-\t      find_func_clobbers (stmt);\n+\t      find_func_aliases (func, stmt);\n+\t      find_func_clobbers (func, stmt);\n \t    }\n \t}\n \n-      pop_cfun ();\n-\n       if (dump_file)\n \t{\n \t  fprintf (dump_file, \"\\n\");"}]}