{"sha": "b1f16cae7dda8111a41bd351be63c808d593546d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjFmMTZjYWU3ZGRhODExMWE0MWJkMzUxYmU2M2M4MDhkNTkzNTQ2ZA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2019-12-21T16:19:42Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2019-12-21T16:19:42Z"}, "message": "re PR fortran/92753 (ICE in gfc_trans_call, at fortran/trans-stmt.c:392)\n\n2019-12-21 \u00a0Paul Thomas \u00a0<pault@gcc.gnu.org>\n\n\tPR fortran/92753\n\t* expr.c (find_inquiry_ref): Catch INQUIRY_LEN case, where the\n\ttemporary expression has been converted to a constant and make\n\tthe new expression accordingly. Correct the error in INQUIRY_RE\n\tand INQUIRY_IM cases. The original rather than the resolved\n\texpression was being used as the source in mpfr_set.\n\n2019-12-21 \u00a0Paul Thomas \u00a0<pault@gcc.gnu.org>\n\n\tPR fortran/92753\n\t* gfortran.dg/inquiry_type_ref_5.f90 : New test.\n\nFrom-SVN: r279696", "tree": {"sha": "813ec5f2d55660383daf822fe5fb5c5934d93a75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/813ec5f2d55660383daf822fe5fb5c5934d93a75"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1f16cae7dda8111a41bd351be63c808d593546d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1f16cae7dda8111a41bd351be63c808d593546d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1f16cae7dda8111a41bd351be63c808d593546d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1f16cae7dda8111a41bd351be63c808d593546d/comments", "author": null, "committer": null, "parents": [{"sha": "a09ccc22459c565814f79f96586fe4ad083fe4eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a09ccc22459c565814f79f96586fe4ad083fe4eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a09ccc22459c565814f79f96586fe4ad083fe4eb"}], "stats": {"total": 59, "additions": 53, "deletions": 6}, "files": [{"sha": "dee20f6fdee4749afed8729dc035513817663eef", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1f16cae7dda8111a41bd351be63c808d593546d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1f16cae7dda8111a41bd351be63c808d593546d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=b1f16cae7dda8111a41bd351be63c808d593546d", "patch": "@@ -1,3 +1,12 @@\n+2019-12-21 \u00a0Paul Thomas \u00a0<pault@gcc.gnu.org>\n+\n+\tPR fortran/92753\n+\t* expr.c (find_inquiry_ref): Catch INQUIRY_LEN case, where the\n+\ttemporary expression has been converted to a constant and make\n+\tthe new expression accordingly. Correct the error in INQUIRY_RE\n+\tand INQUIRY_IM cases. The original rather than the resolved\n+\texpression was being used as the source in mpfr_set.\n+\n 2019-12-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/91512"}, {"sha": "aea4af08f2d8d3b7b2508e2e699af18c8d94733d", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1f16cae7dda8111a41bd351be63c808d593546d/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1f16cae7dda8111a41bd351be63c808d593546d/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=b1f16cae7dda8111a41bd351be63c808d593546d", "patch": "@@ -1787,11 +1787,15 @@ find_inquiry_ref (gfc_expr *p, gfc_expr **newp)\n \t  if (!gfc_notify_std (GFC_STD_F2003, \"LEN part_ref at %C\"))\n \t    goto cleanup;\n \n-\t  if (!tmp->ts.u.cl->length\n-\t      || tmp->ts.u.cl->length->expr_type != EXPR_CONSTANT)\n+\t  if (tmp->ts.u.cl->length\n+\t      && tmp->ts.u.cl->length->expr_type == EXPR_CONSTANT)\n+\t    *newp = gfc_copy_expr (tmp->ts.u.cl->length);\n+\t  else if (tmp->expr_type == EXPR_CONSTANT)\n+\t    *newp = gfc_get_int_expr (gfc_default_integer_kind,\n+\t\t\t\t      NULL, tmp->value.character.length);\n+\t  else\n \t    goto cleanup;\n \n-\t  *newp = gfc_copy_expr (tmp->ts.u.cl->length);\n \t  break;\n \n \tcase INQUIRY_KIND:\n@@ -1814,7 +1818,7 @@ find_inquiry_ref (gfc_expr *p, gfc_expr **newp)\n \n \t  *newp = gfc_get_constant_expr (BT_REAL, tmp->ts.kind, &tmp->where);\n \t  mpfr_set ((*newp)->value.real,\n-\t\t    mpc_realref (p->value.complex), GFC_RND_MODE);\n+\t\t    mpc_realref (tmp->value.complex), GFC_RND_MODE);\n \t  break;\n \n \tcase INQUIRY_IM:\n@@ -1826,7 +1830,7 @@ find_inquiry_ref (gfc_expr *p, gfc_expr **newp)\n \n \t  *newp = gfc_get_constant_expr (BT_REAL, tmp->ts.kind, &tmp->where);\n \t  mpfr_set ((*newp)->value.real,\n-\t\t    mpc_imagref (p->value.complex), GFC_RND_MODE);\n+\t\t    mpc_imagref (tmp->value.complex), GFC_RND_MODE);\n \t  break;\n \t}\n       tmp = gfc_copy_expr (*newp);"}, {"sha": "1f1dec5c4804bd71304e11bcf801ea3279a04557", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1f16cae7dda8111a41bd351be63c808d593546d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1f16cae7dda8111a41bd351be63c808d593546d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b1f16cae7dda8111a41bd351be63c808d593546d", "patch": "@@ -1,3 +1,8 @@\n+2019-12-21 \u00a0Paul Thomas \u00a0<pault@gcc.gnu.org>\n+\n+\tPR fortran/92753\n+\t* gfortran.dg/inquiry_type_ref_5.f90 : New test.\n+\n 2019-12-21  Martin Jambor  <mjambor@suse.cz>\n \n \tPR ipa/93015\n@@ -37,7 +42,7 @@\n \n 2019-12-20  Stam Markianos-Wright  <stam.markianos-wright@arm.com>\n \n-\t* lib/target-supports.exp \n+\t* lib/target-supports.exp\n \t(check_effective_target_arm_v8_2a_i8mm_ok_nocache): New.\n \t(check_effective_target_arm_v8_2a_i8mm_ok): New.\n \t(add_options_for_arm_v8_2a_i8mm): New."}, {"sha": "b27943ae496fea018164030a5f93e3b7f25144f8", "filename": "gcc/testsuite/gfortran.dg/inquiry_type_ref_5.f90", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1f16cae7dda8111a41bd351be63c808d593546d/gcc%2Ftestsuite%2Fgfortran.dg%2Finquiry_type_ref_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1f16cae7dda8111a41bd351be63c808d593546d/gcc%2Ftestsuite%2Fgfortran.dg%2Finquiry_type_ref_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finquiry_type_ref_5.f90?ref=b1f16cae7dda8111a41bd351be63c808d593546d", "patch": "@@ -0,0 +1,29 @@\n+! { dg-do run }\n+!\n+! Test the fix for pr92753\n+!\n+! Contributed by Gerhardt Steinmetz  <gscfq@t-online.de>\n+!\n+module m\n+   type t\n+      character(3) :: c\n+   end type\n+   type u\n+      complex :: z\n+   end type\n+   type(t), parameter :: x = t ('abc')\n+   integer, parameter :: l = x%c%len           ! Used to ICE\n+\n+   type(u), parameter :: z = u ((42.0,-42.0))\n+end\n+program p\n+   use m\n+   call s (x%c%len)                            !   ditto\n+\n+   if (int (z%z%re) .ne. 42) stop 1            ! Produced wrong code and\n+   if (int (z%z%re) .ne. -int (z%z%im)) stop 2 ! runtime seg fault\n+contains\n+   subroutine s(n)\n+      if (n .ne. l) stop 3\n+   end\n+end"}]}