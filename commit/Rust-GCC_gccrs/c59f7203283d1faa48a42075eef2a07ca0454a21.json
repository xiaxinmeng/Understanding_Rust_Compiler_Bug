{"sha": "c59f7203283d1faa48a42075eef2a07ca0454a21", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzU5ZjcyMDMyODNkMWZhYTQ4YTQyMDc1ZWVmMmEwN2NhMDQ1NGEyMQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2014-07-12T15:34:45Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2014-07-12T15:34:45Z"}, "message": "tree.c (type_in_anonymous_namespace_p): Ignore TREE_PUBLIC on builtin types.\n\n\n\t* tree.c (type_in_anonymous_namespace_p): Ignore TREE_PUBLIC\n\ton builtin types.\n\t* ipa-devirt.c: Include stor-layout.h and intl.h\n\t(odr_subtypes_equivalent_p): New function.\n\t(warn_odr): New function.\n\t(warn_type_mismatch): New function.\n\t(odr_types_equivalent_p): New function.\n\t(add_type_duplicate): Use it.\n\t* common.opt (Wodr): New flag.\n\t* doc/invoke.texi (Wodr): Document new warning.\n\nFrom-SVN: r212481", "tree": {"sha": "1adb11d45425fbb14d0386855458008952151853", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1adb11d45425fbb14d0386855458008952151853"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c59f7203283d1faa48a42075eef2a07ca0454a21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c59f7203283d1faa48a42075eef2a07ca0454a21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c59f7203283d1faa48a42075eef2a07ca0454a21", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c59f7203283d1faa48a42075eef2a07ca0454a21/comments", "author": null, "committer": null, "parents": [{"sha": "3720cb58e82397f33d85e92ef37aa2665b650f55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3720cb58e82397f33d85e92ef37aa2665b650f55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3720cb58e82397f33d85e92ef37aa2665b650f55"}], "stats": {"total": 556, "additions": 534, "deletions": 22}, "files": [{"sha": "1f32bf02ff59c7a0f96b5a589613c9a33868e1f5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c59f7203283d1faa48a42075eef2a07ca0454a21/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c59f7203283d1faa48a42075eef2a07ca0454a21/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c59f7203283d1faa48a42075eef2a07ca0454a21", "patch": "@@ -1,3 +1,16 @@\n+2014-07-12  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* tree.c (type_in_anonymous_namespace_p): Ignore TREE_PUBLIC\n+\ton builtin types.\n+\t* ipa-devirt.c: Include stor-layout.h and intl.h\n+\t(odr_subtypes_equivalent_p): New function.\n+\t(warn_odr): New function.\n+\t(warn_type_mismatch): New function.\n+\t(odr_types_equivalent_p): New function.\n+\t(add_type_duplicate): Use it.\n+\t* common.opt (Wodr): New flag.\n+\t* doc/invoke.texi (Wodr): Document new warning.\n+\n 2014-07-12  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* timevar.def (TV_IPA_LTO_DECL_INIT_IO): Remove."}, {"sha": "a385ee03010ff7ed7135a799374becfe3ea5aed7", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c59f7203283d1faa48a42075eef2a07ca0454a21/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c59f7203283d1faa48a42075eef2a07ca0454a21/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=c59f7203283d1faa48a42075eef2a07ca0454a21", "patch": "@@ -587,6 +587,10 @@ Warn if the loop cannot be optimized due to nontrivial assumptions.\n Wmissing-noreturn\n Common Alias(Wsuggest-attribute=noreturn)\n \n+Wodr\n+Common Warning\n+Warn about some C++ One Definition Rule violations during link time optimization\n+\n Woverflow\n Common Var(warn_overflow) Init(1) Warning\n Warn about overflow in arithmetic expressions"}, {"sha": "4807ffc4f09d94871a8594d398293c222c56d637", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c59f7203283d1faa48a42075eef2a07ca0454a21/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c59f7203283d1faa48a42075eef2a07ca0454a21/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=c59f7203283d1faa48a42075eef2a07ca0454a21", "patch": "@@ -260,7 +260,7 @@ Objective-C and Objective-C++ Dialects}.\n -Wlogical-op -Wlogical-not-parentheses -Wlong-long @gol\n -Wmain -Wmaybe-uninitialized -Wmissing-braces  -Wmissing-field-initializers @gol\n -Wmissing-include-dirs @gol\n--Wno-multichar  -Wnonnull  -Wno-overflow -Wopenmp-simd @gol\n+-Wno-multichar  -Wnonnull  -Wodr  -Wno-overflow  -Wopenmp-simd @gol\n -Woverlength-strings  -Wpacked  -Wpacked-bitfield-compat  -Wpadded @gol\n -Wparentheses  -Wpedantic-ms-format -Wno-pedantic-ms-format @gol\n -Wpointer-arith  -Wno-pointer-to-int-cast @gol\n@@ -4915,6 +4915,12 @@ attribute.\n @opindex Woverflow\n Do not warn about compile-time overflow in constant expressions.\n \n+@opindex Wodr\n+@opindex Wno-odr\n+@opindex Wodr\n+Warn about One Definition Rule violations during link time optimization.\n+Require @option{-flto-odr-type-merging} to be enabled. Enabled by default\n+\n @item -Wopenmp-simd\n @opindex Wopenm-simd\n Warn if the vectorizer cost model overrides the OpenMP or the Cilk Plus"}, {"sha": "1a0837b1a60aafe67157515d46cfeb9499453ac1", "filename": "gcc/ipa-devirt.c", "status": "modified", "additions": 506, "deletions": 21, "changes": 527, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c59f7203283d1faa48a42075eef2a07ca0454a21/gcc%2Fipa-devirt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c59f7203283d1faa48a42075eef2a07ca0454a21/gcc%2Fipa-devirt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-devirt.c?ref=c59f7203283d1faa48a42075eef2a07ca0454a21", "patch": "@@ -130,6 +130,10 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-dfa.h\"\n #include \"demangle.h\"\n #include \"dbgcnt.h\"\n+#include \"stor-layout.h\"\n+#include \"intl.h\"\n+\n+static bool odr_types_equivalent_p (tree, tree, bool, bool *, pointer_set_t *);\n \n static bool odr_violation_reported = false;\n \n@@ -431,6 +435,498 @@ set_type_binfo (tree type, tree binfo)\n       gcc_assert (!TYPE_BINFO (type));\n }\n \n+/* Compare T2 and T2 based on name or structure.  */\n+\n+static bool\n+odr_subtypes_equivalent_p (tree t1, tree t2, pointer_set_t *visited)\n+{\n+  bool an1, an2;\n+\n+  /* This can happen in incomplete types that should be handled earlier.  */\n+  gcc_assert (t1 && t2);\n+\n+  t1 = main_odr_variant (t1);\n+  t2 = main_odr_variant (t2);\n+  if (t1 == t2)\n+    return true;\n+  if (TREE_CODE (t1) != TREE_CODE (t2))\n+    return false;\n+  if ((TYPE_NAME (t1) == NULL_TREE) != (TYPE_NAME (t2) == NULL_TREE))\n+    return false;\n+  if (TYPE_NAME (t1) && DECL_NAME (TYPE_NAME (t1)) != DECL_NAME (TYPE_NAME (t2)))\n+    return false;\n+\n+  /* Anonymous namespace types must match exactly.  */\n+  an1 = type_in_anonymous_namespace_p (t1);\n+  an2 = type_in_anonymous_namespace_p (t2);\n+  if (an1 != an2 || an1)\n+    return false;\n+\n+  /* For types where we can not establish ODR equivalency, recurse and deeply\n+     compare.  */\n+  if (TREE_CODE (t1) != RECORD_TYPE\n+      || !TYPE_BINFO (t1) || !TYPE_BINFO (t2)\n+      || !polymorphic_type_binfo_p (TYPE_BINFO (t1))\n+      || !polymorphic_type_binfo_p (TYPE_BINFO (t2)))\n+    {\n+      /* This should really be a pair hash, but for the moment we do not need\n+\t 100% reliability and it would be better to compare all ODR types so\n+\t recursion here is needed only for component types.  */\n+      if (pointer_set_insert (visited, t1))\n+\treturn true;\n+      return odr_types_equivalent_p (t1, t2, true, NULL, visited);\n+    }\n+  return types_same_for_odr (t1, t2);\n+}\n+\n+/* Output ODR violation warning about T1 and T2 with REASON.\n+   Display location of ST1 and ST2 if REASON speaks about field or\n+   method of the type.\n+   If WARN is false, do nothing. Set WARNED if warning was indeed\n+   output.  */\n+\n+void\n+warn_odr (tree t1, tree t2, tree st1, tree st2,\n+\t  bool warn, bool *warned, const char *reason)\n+{\n+  tree decl2 = TYPE_NAME (t2);\n+\n+  if (!warn)\n+    return;\n+  if (!warning_at (DECL_SOURCE_LOCATION (TYPE_NAME (t1)), OPT_Wodr,\n+\t\t   \"type %qT violates one definition rule\",\n+\t\t   t1))\n+    return;\n+  if (!st1)\n+    ;\n+  else if (TREE_CODE (st1) == FIELD_DECL)\n+    {\n+      inform (DECL_SOURCE_LOCATION (decl2),\n+\t      \"a different type is defined in another translation unit\");\n+      inform (DECL_SOURCE_LOCATION (st1),\n+\t      \"the first difference of corresponding definitions is field %qD\",\n+\t      st1);\n+      decl2 = st2;\n+    }\n+  else if (TREE_CODE (st1) == FUNCTION_DECL)\n+    {\n+      inform (DECL_SOURCE_LOCATION (decl2),\n+\t      \"a different type is defined in another translation unit\");\n+      inform (DECL_SOURCE_LOCATION (st1),\n+\t      \"the first difference of corresponding definitions is method %qD\",\n+\t      st1);\n+      decl2 = st2;\n+    }\n+  else\n+    return;\n+  inform (DECL_SOURCE_LOCATION (decl2), reason);\n+\n+  if (warned)\n+    *warned = true;\n+}\n+\n+/* We already warned about ODR mismatch.  T1 and T2 ought to be equivalent\n+   because they are used on same place in ODR matching types.\n+   They are not; inform the user.  */\n+\n+void\n+warn_types_mismatch (tree t1, tree t2)\n+{\n+  if (!TYPE_NAME (t1) || !TYPE_NAME (t2))\n+    return;\n+  /* In Firefox it is a common bug to have same types but in\n+     different namespaces.  Be a bit more informative on\n+     this.  */\n+  if (TYPE_CONTEXT (t1) && TYPE_CONTEXT (t2)\n+      && (((TREE_CODE (TYPE_CONTEXT (t1)) == NAMESPACE_DECL)\n+\t    != (TREE_CODE (TYPE_CONTEXT (t2)) == NAMESPACE_DECL))\n+\t   || (TREE_CODE (TYPE_CONTEXT (t1)) == NAMESPACE_DECL\n+\t       && (DECL_NAME (TYPE_CONTEXT (t1)) !=\n+\t\t   DECL_NAME (TYPE_CONTEXT (t2))))))\n+    inform (DECL_SOURCE_LOCATION (TYPE_NAME (t1)),\n+\t    \"type %qT should match type %qT but is defined \"\n+\t    \"in different namespace  \",\n+\t    t1, t2);\n+  else\n+    inform (DECL_SOURCE_LOCATION (TYPE_NAME (t1)),\n+\t    \"type %qT should match type %qT\",\n+\t    t1, t2);\n+  inform (DECL_SOURCE_LOCATION (TYPE_NAME (t2)),\n+\t  \"the incompatible type is defined here\");\n+}\n+\n+/* Compare T1 and T2, report ODR violations if WARN is true and set\n+   WARNED to true if anything is reported.  Return true if types match.\n+   If true is returned, the types are also compatible in the sense of\n+   gimple_canonical_types_compatible_p.  */\n+\n+static bool\n+odr_types_equivalent_p (tree t1, tree t2, bool warn, bool *warned, pointer_set_t *visited)\n+{\n+  /* Check first for the obvious case of pointer identity.  */\n+  if (t1 == t2)\n+    return true;\n+  gcc_assert (!type_in_anonymous_namespace_p (t1));\n+  gcc_assert (!type_in_anonymous_namespace_p (t2));\n+\n+  /* Can't be the same type if the types don't have the same code.  */\n+  if (TREE_CODE (t1) != TREE_CODE (t2))\n+    {\n+      warn_odr (t1, t2, NULL, NULL, warn, warned,\n+\t        G_(\"a different type is defined in another translation unit\"));\n+      return false;\n+    }\n+\n+  if (TYPE_QUALS (t1) != TYPE_QUALS (t2))\n+    {\n+      warn_odr (t1, t2, NULL, NULL, warn, warned,\n+\t        G_(\"a type with different qualifiers is defined in another \"\n+\t\t   \"translation unit\"));\n+      return false;\n+    }\n+\n+  if (comp_type_attributes (t1, t2) != 1)\n+    {\n+      warn_odr (t1, t2, NULL, NULL, warn, warned,\n+\t        G_(\"a type with attributes \"\n+\t\t   \"is defined in another translation unit\"));\n+      return false;\n+    }\n+\n+  if (TREE_CODE (t1) == ENUMERAL_TYPE)\n+    {\n+      tree v1, v2;\n+      for (v1 = TYPE_VALUES (t1), v2 = TYPE_VALUES (t2);\n+\t   v1 && v2 ; v1 = TREE_CHAIN (v1), v2 = TREE_CHAIN (v2))\n+\t{\n+\t  if (TREE_PURPOSE (v1) != TREE_PURPOSE (v2))\n+\t    {\n+\t      warn_odr (t1, t2, NULL, NULL, warn, warned,\n+\t\t\tG_(\"an enum with different value name\"\n+\t\t\t   \" is defined in another translation unit\"));\n+\t      return false;\n+\t    }\n+\t  if (TREE_VALUE (v1) != TREE_VALUE (v2)\n+\t      && !operand_equal_p (DECL_INITIAL (TREE_VALUE (v1)),\n+\t\t\t\t   DECL_INITIAL (TREE_VALUE (v2)), 0))\n+\t    {\n+\t      warn_odr (t1, t2, NULL, NULL, warn, warned,\n+\t\t\tG_(\"an enum with different values is defined\"\n+\t\t\t   \" in another translation unit\"));\n+\t      return false;\n+\t    }\n+\t}\n+      if (v1 || v2)\n+\t{\n+\t  warn_odr (t1, t2, NULL, NULL, warn, warned,\n+\t\t    G_(\"an enum with mismatching number of values \"\n+\t\t       \"is defined in another translation unit\"));\n+\t  return false;\n+\t}\n+    }\n+\n+  /* Non-aggregate types can be handled cheaply.  */\n+  if (INTEGRAL_TYPE_P (t1)\n+      || SCALAR_FLOAT_TYPE_P (t1)\n+      || FIXED_POINT_TYPE_P (t1)\n+      || TREE_CODE (t1) == VECTOR_TYPE\n+      || TREE_CODE (t1) == COMPLEX_TYPE\n+      || TREE_CODE (t1) == OFFSET_TYPE\n+      || POINTER_TYPE_P (t1))\n+    {\n+      if (TYPE_PRECISION (t1) != TYPE_PRECISION (t2))\n+\t{\n+\t  warn_odr (t1, t2, NULL, NULL, warn, warned,\n+\t\t    G_(\"a type with different precision is defined \"\n+\t\t       \"in another translation unit\"));\n+\t  return false;\n+\t}\n+      if (TYPE_UNSIGNED (t1) != TYPE_UNSIGNED (t2))\n+\t{\n+\t  warn_odr (t1, t2, NULL, NULL, warn, warned,\n+\t\t    G_(\"a type with different signedness is defined \"\n+\t\t       \"in another translation unit\"));\n+\t  return false;\n+\t}\n+\n+      if (TREE_CODE (t1) == INTEGER_TYPE\n+\t  && TYPE_STRING_FLAG (t1) != TYPE_STRING_FLAG (t2))\n+\t{\n+\t  /* char WRT uint_8?  */\n+\t  warn_odr (t1, t2, NULL, NULL, warn, warned,\n+\t\t    G_(\"a different type is defined in another \"\n+\t\t       \"translation unit\"));\n+\t  return false;\n+\t}\n+\n+      /* For canonical type comparisons we do not want to build SCCs\n+\t so we cannot compare pointed-to types.  But we can, for now,\n+\t require the same pointed-to type kind and match what\n+\t useless_type_conversion_p would do.  */\n+      if (POINTER_TYPE_P (t1))\n+\t{\n+\t  if (TYPE_ADDR_SPACE (TREE_TYPE (t1))\n+\t      != TYPE_ADDR_SPACE (TREE_TYPE (t2)))\n+\t    {\n+\t      warn_odr (t1, t2, NULL, NULL, warn, warned,\n+\t\t\tG_(\"it is defined as a pointer in different address \"\n+\t\t\t   \"space in another translation unit\"));\n+\t      return false;\n+\t    }\n+\n+\t  if (!odr_subtypes_equivalent_p (TREE_TYPE (t1), TREE_TYPE (t2), visited))\n+\t    {\n+\t      warn_odr (t1, t2, NULL, NULL, warn, warned,\n+\t\t\tG_(\"it is defined as a pointer to different type \"\n+\t\t\t   \"in another translation unit\"));\n+\t      if (warn && warned)\n+\t        warn_types_mismatch (TREE_TYPE (t1), TREE_TYPE (t2));\n+\t      return false;\n+\t    }\n+\t}\n+\n+      /* Tail-recurse to components.  */\n+      if ((TREE_CODE (t1) == VECTOR_TYPE || TREE_CODE (t1) == COMPLEX_TYPE)\n+\t  && !odr_subtypes_equivalent_p (TREE_TYPE (t1), TREE_TYPE (t2), visited))\n+\t{\n+\t  /* Probably specific enough.  */\n+\t  warn_odr (t1, t2, NULL, NULL, warn, warned,\n+\t\t    G_(\"a different type is defined \"\n+\t\t       \"in another translation unit\"));\n+\t  if (warn && warned)\n+\t    warn_types_mismatch (TREE_TYPE (t1), TREE_TYPE (t2));\n+\t  return false;\n+\t}\n+\n+      gcc_assert (operand_equal_p (TYPE_SIZE (t1), TYPE_SIZE (t2), 0));\n+      gcc_assert (operand_equal_p (TYPE_SIZE_UNIT (t1),\n+\t\t\t\t   TYPE_SIZE_UNIT (t2), 0));\n+      gcc_assert (TYPE_MODE (t1) == TYPE_MODE (t2));\n+\n+      return true;\n+    }\n+\n+  /* Do type-specific comparisons.  */\n+  switch (TREE_CODE (t1))\n+    {\n+    case ARRAY_TYPE:\n+      {\n+\t/* Array types are the same if the element types are the same and\n+\t   the number of elements are the same.  */\n+\tif (!odr_subtypes_equivalent_p (TREE_TYPE (t1), TREE_TYPE (t2), visited))\n+\t  {\n+\t    warn_odr (t1, t2, NULL, NULL, warn, warned,\n+\t\t      G_(\"a different type is defined in another \"\n+\t\t\t \"translation unit\"));\n+\t    if (warn && warned)\n+\t      warn_types_mismatch (TREE_TYPE (t1), TREE_TYPE (t2));\n+\t  }\n+\tgcc_assert (TYPE_STRING_FLAG (t1) == TYPE_STRING_FLAG (t2));\n+\tgcc_assert (TYPE_NONALIASED_COMPONENT (t1)\n+\t\t    == TYPE_NONALIASED_COMPONENT (t2));\n+\n+\ttree i1 = TYPE_DOMAIN (t1);\n+\ttree i2 = TYPE_DOMAIN (t2);\n+\n+\t/* For an incomplete external array, the type domain can be\n+\t   NULL_TREE.  Check this condition also.  */\n+\tif (i1 == NULL_TREE || i2 == NULL_TREE)\n+\t  return true;\n+\n+\ttree min1 = TYPE_MIN_VALUE (i1);\n+\ttree min2 = TYPE_MIN_VALUE (i2);\n+\ttree max1 = TYPE_MAX_VALUE (i1);\n+\ttree max2 = TYPE_MAX_VALUE (i2);\n+\n+\t/* In C++, minimums should be always 0.  */\n+\tgcc_assert (min1 == min2);\n+\tif (!operand_equal_p (max1, max2, 0))\n+\t  {\n+\t    warn_odr (t1, t2, NULL, NULL, warn, warned,\n+\t\t      G_(\"an array of different size is defined \"\n+\t\t\t \"in another translation unit\"));\n+\t    return false;\n+\t  }\n+\tgcc_assert (operand_equal_p (TYPE_SIZE (t1), TYPE_SIZE (t2), 0));\n+\tgcc_assert (operand_equal_p (TYPE_SIZE_UNIT (t1),\n+\t\t\t\t     TYPE_SIZE_UNIT (t2), 0));\n+      }\n+      return true;\n+\n+    case METHOD_TYPE:\n+    case FUNCTION_TYPE:\n+      /* Function types are the same if the return type and arguments types\n+\t are the same.  */\n+      if (!odr_subtypes_equivalent_p (TREE_TYPE (t1), TREE_TYPE (t2), visited))\n+\t{\n+\t  warn_odr (t1, t2, NULL, NULL, warn, warned,\n+\t\t    G_(\"has different return value \"\n+\t\t       \"in another translation unit\"));\n+\t  if (warn && warned)\n+\t    warn_types_mismatch (TREE_TYPE (t1), TREE_TYPE (t2));\n+\t  return false;\n+\t}\n+\n+      if (TYPE_ARG_TYPES (t1) == TYPE_ARG_TYPES (t2))\n+\treturn true;\n+      else\n+\t{\n+\t  tree parms1, parms2;\n+\n+\t  for (parms1 = TYPE_ARG_TYPES (t1), parms2 = TYPE_ARG_TYPES (t2);\n+\t       parms1 && parms2;\n+\t       parms1 = TREE_CHAIN (parms1), parms2 = TREE_CHAIN (parms2))\n+\t    {\n+\t      if (!odr_subtypes_equivalent_p\n+\t\t     (TREE_VALUE (parms1), TREE_VALUE (parms2), visited))\n+\t\t{\n+\t\t  warn_odr (t1, t2, NULL, NULL, warn, warned,\n+\t\t\t    G_(\"has different parameters in another \"\n+\t\t\t       \"translation unit\"));\n+\t\t  if (warn && warned)\n+\t\t    warn_types_mismatch (TREE_VALUE (parms1),\n+\t\t\t\t\t TREE_VALUE (parms2));\n+\t\t  return false;\n+\t\t}\n+\t    }\n+\n+\t  if (parms1 || parms2)\n+\t    {\n+\t      warn_odr (t1, t2, NULL, NULL, warn, warned,\n+\t\t\tG_(\"has different parameters \"\n+\t\t\t   \"in another translation unit\"));\n+\t      return false;\n+\t    }\n+\n+\t  return true;\n+\t}\n+\n+    case RECORD_TYPE:\n+    case UNION_TYPE:\n+    case QUAL_UNION_TYPE:\n+      {\n+\ttree f1, f2;\n+\n+\t/* For aggregate types, all the fields must be the same.  */\n+\tif (COMPLETE_TYPE_P (t1) && COMPLETE_TYPE_P (t2))\n+\t  {\n+\t    for (f1 = TYPE_FIELDS (t1), f2 = TYPE_FIELDS (t2);\n+\t\t f1 || f2;\n+\t\t f1 = TREE_CHAIN (f1), f2 = TREE_CHAIN (f2))\n+\t      {\n+\t\t/* Skip non-fields.  */\n+\t\twhile (f1 && TREE_CODE (f1) != FIELD_DECL)\n+\t\t  f1 = TREE_CHAIN (f1);\n+\t\twhile (f2 && TREE_CODE (f2) != FIELD_DECL)\n+\t\t  f2 = TREE_CHAIN (f2);\n+\t\tif (!f1 || !f2)\n+\t\t  break;\n+\t\tif (DECL_ARTIFICIAL (f1) != DECL_ARTIFICIAL (f2))\n+\t\t  break;\n+\t\tif (DECL_NAME (f1) != DECL_NAME (f2)\n+\t\t    && !DECL_ARTIFICIAL (f1))\n+\t\t  {\n+\t\t    warn_odr (t1, t2, f1, f2, warn, warned,\n+\t\t\t      G_(\"a field with different name is defined \"\n+\t\t\t\t \"in another translation unit\"));\n+\t\t    return false;\n+\t\t  }\n+\t\tif (!odr_subtypes_equivalent_p (TREE_TYPE (f1), TREE_TYPE (f2), visited))\n+\t\t  {\n+\t\t    /* Do not warn about artificial fields and just go into generic\n+\t\t       field mismatch warning.  */\n+\t\t    if (DECL_ARTIFICIAL (f1))\n+\t\t      break;\n+\n+\t\t    warn_odr (t1, t2, f1, f2, warn, warned,\n+\t\t\t      G_(\"a field of same name but different type \"\n+\t\t\t\t \"is defined in another translation unit\"));\n+\t\t    if (warn && warned)\n+\t\t      warn_types_mismatch (TREE_TYPE (f1), TREE_TYPE (f2));\n+\t\t    return false;\n+\t\t  }\n+\t\tif (!gimple_compare_field_offset (f1, f2))\n+\t\t  {\n+\t\t    /* Do not warn about artificial fields and just go into generic\n+\t\t       field mismatch warning.  */\n+\t\t    if (DECL_ARTIFICIAL (f1))\n+\t\t      break;\n+\t\t    warn_odr (t1, t2, t1, t2, warn, warned,\n+\t\t\t      G_(\"fields has different layout \"\n+\t\t\t\t \"in another translation unit\"));\n+\t\t    return false;\n+\t\t  }\n+\t\tgcc_assert (DECL_NONADDRESSABLE_P (f1)\n+\t\t\t    == DECL_NONADDRESSABLE_P (f2));\n+\t      }\n+\n+\t    /* If one aggregate has more fields than the other, they\n+\t       are not the same.  */\n+\t    if (f1 || f2)\n+\t      {\n+\t\twarn_odr (t1, t2, NULL, NULL, warn, warned,\n+\t\t\t  G_(\"a type with different number of fields \"\n+\t\t\t     \"is defined in another translation unit\"));\n+\t\treturn false;\n+\t      }\n+\t    if ((TYPE_MAIN_VARIANT (t1) == t1 || TYPE_MAIN_VARIANT (t2) == t2)\n+\t\t&& (TYPE_METHODS (TYPE_MAIN_VARIANT (t1))\n+\t\t    != TYPE_METHODS (TYPE_MAIN_VARIANT (t2))))\n+\t      {\n+\t\tfor (f1 = TYPE_METHODS (TYPE_MAIN_VARIANT (t1)),\n+\t\t     f2 = TYPE_METHODS (TYPE_MAIN_VARIANT (t2));\n+\t\t     f1 && f2 ; f1 = DECL_CHAIN (f1), f2 = DECL_CHAIN (f2))\n+\t\t  {\n+\t\t    if (DECL_ASSEMBLER_NAME (f1) != DECL_ASSEMBLER_NAME (f2))\n+\t\t      {\n+\t\t\twarn_odr (t1, t2, f1, f2, warn, warned,\n+\t\t\t\t  G_(\"a different method of same type \"\n+\t\t\t\t     \"is defined in another translation unit\"));\n+\t\t\treturn false;\n+\t\t      }\n+\t\t    if (DECL_VIRTUAL_P (f1) != DECL_VIRTUAL_P (f2))\n+\t\t      {\n+\t\t\twarn_odr (t1, t2, f1, f2, warn, warned,\n+\t\t\t\t  G_(\"s definition that differs by virtual \"\n+\t\t\t\t     \"keyword in another translation unit\"));\n+\t\t\treturn false;\n+\t\t      }\n+\t\t    if (DECL_VINDEX (f1) != DECL_VINDEX (f2))\n+\t\t      {\n+\t\t\twarn_odr (t1, t2, f1, f2, warn, warned,\n+\t\t\t\t  G_(\"virtual table layout differs in another \"\n+\t\t\t\t     \"translation unit\"));\n+\t\t\treturn false;\n+\t\t      }\n+\t\t    if (odr_subtypes_equivalent_p (TREE_TYPE (f1), TREE_TYPE (f2), visited))\n+\t\t      {\n+\t\t\twarn_odr (t1, t2, f1, f2, warn, warned,\n+\t\t\t\t  G_(\"method with incompatible type is defined \"\n+\t\t\t\t     \"in another translation unit\"));\n+\t\t\treturn false;\n+\t\t      }\n+\t\t  }\n+\t\tif (f1 || f2)\n+\t\t  {\n+\t\t    warn_odr (t1, t2, NULL, NULL, warn, warned,\n+\t\t\t      G_(\"a type with different number of methods \"\n+\t\t\t\t \"is defined in another translation unit\"));\n+\t\t    return false;\n+\t\t  }\n+\t      }\n+\t    gcc_assert (operand_equal_p (TYPE_SIZE (t1), TYPE_SIZE (t2), 0));\n+\t    gcc_assert (operand_equal_p (TYPE_SIZE_UNIT (t1),\n+\t\t\t\t\t TYPE_SIZE_UNIT (t2), 0));\n+\t  }\n+\n+\treturn true;\n+      }\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+\n /* TYPE is equivalent to VAL by ODR, but its tree representation differs\n    from VAL->type.  This may happen in LTO where tree merging did not merge\n    all variants of the same type.  It may or may not mean the ODR violation.\n@@ -459,38 +955,31 @@ add_type_duplicate (odr_type val, tree type)\n     {\n       bool merge = true;\n       bool base_mismatch = false;\n-      bool warned = 0;\n       unsigned int i,j;\n+      bool warned = false;\n+      pointer_set_t *visited = pointer_set_create ();\n \n       gcc_assert (in_lto_p);\n       vec_safe_push (val->types, type);\n \n       /* First we compare memory layout.  */\n-      if (!types_compatible_p (val->type, type))\n+      if (!odr_types_equivalent_p (val->type, type, !flag_ltrans && !val->odr_violated,\n+\t\t\t\t   &warned, visited))\n \t{\n \t  merge = false;\n \t  odr_violation_reported = true;\n-\t  if (BINFO_VTABLE (TYPE_BINFO (val->type))\n-\t      && warning_at (DECL_SOURCE_LOCATION (TYPE_NAME (type)), 0,\n-\t\t\t     \"type %qD violates one definition rule  \",\n-\t\t\t     type))\n-\t    {\n-\t      inform (DECL_SOURCE_LOCATION (TYPE_NAME (val->type)),\n-\t\t      \"a type with the same name but different layout is \"\n-\t\t      \"defined in another translation unit\");\n-\t      warned = true;\n-\t    }\n \t  val->odr_violated = true;\n \t  if (cgraph_dump_file)\n \t    {\n-\t      fprintf (cgraph_dump_file, \"ODR violation or merging or ODR type bug?\\n\");\n+\t      fprintf (cgraph_dump_file, \"ODR violation\\n\");\n \t    \n \t      print_node (cgraph_dump_file, \"\", val->type, 0);\n \t      putc ('\\n',cgraph_dump_file);\n \t      print_node (cgraph_dump_file, \"\", type, 0);\n \t      putc ('\\n',cgraph_dump_file);\n \t    }\n \t}\n+      pointer_set_destroy (visited);\n \n       /* Next sanity check that bases are the same.  If not, we will end\n \t up producing wrong answers.  */\n@@ -516,13 +1005,10 @@ add_type_duplicate (odr_type val, tree type)\n \t      merge = false;\n \t      odr_violation_reported = true;\n \n-\t      if (!warned\n-\t\t  && warning_at (DECL_SOURCE_LOCATION (TYPE_NAME (type)), 0,\n-\t\t\t         \"type %qD violates one definition rule  \",\n-\t\t\t         type))\n-\t\tinform (DECL_SOURCE_LOCATION (TYPE_NAME (val->type)),\n-\t\t\t\"a type with the same name but different bases is \"\n-\t\t\t\"defined in another translation unit\");\n+\t      if (!warned && !val->odr_violated)\n+\t\twarn_odr (type, val->type, NULL, NULL, !warned, &warned,\n+\t\t\t  \"a type with the same name but different bases is \"\n+\t\t\t  \"defined in another translation unit\");\n \t      val->odr_violated = true;\n \t      if (cgraph_dump_file)\n \t\t{\n@@ -625,7 +1111,6 @@ get_odr_type (tree type, bool insert)\n     }\n   else\n     {\n-\n       val = ggc_cleared_alloc<odr_type_d> ();\n       val->type = type;\n       val->bases = vNULL;"}, {"sha": "46f896362318048adee2098b3fdf4a4431db33dc", "filename": "gcc/tree.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c59f7203283d1faa48a42075eef2a07ca0454a21/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c59f7203283d1faa48a42075eef2a07ca0454a21/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=c59f7203283d1faa48a42075eef2a07ca0454a21", "patch": "@@ -11864,6 +11864,10 @@ obj_type_ref_class (tree ref)\n bool\n type_in_anonymous_namespace_p (const_tree t)\n {\n+  /* TREE_PUBLIC of TYPE_STUB_DECL may not be properly set for\n+     bulitin types; those have CONTEXT NULL.  */\n+  if (!TYPE_CONTEXT (t))\n+    return false;\n   return (TYPE_STUB_DECL (t) && !TREE_PUBLIC (TYPE_STUB_DECL (t)));\n }\n "}]}