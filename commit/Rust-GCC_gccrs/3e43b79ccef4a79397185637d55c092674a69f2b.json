{"sha": "3e43b79ccef4a79397185637d55c092674a69f2b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U0M2I3OWNjZWY0YTc5Mzk3MTg1NjM3ZDU1YzA5MjY3NGE2OWYyYg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2016-04-12T13:38:46Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2016-04-12T13:38:46Z"}, "message": "Revert r234572 (aka PR testsuite/70577)\n\n\tRevert\n\t2016-03-30  Jan Hubicka  <hubicka@ucw.cz>\n\n\t* tree-ssa-loop-niter.c (idx_infer_loop_bounds): We can't get realistic\n\testimates here.\n\t* tree-ssa-loop-unswitch.c (tree_unswitch_single_loop): Use also\n\tmax_loop_iterations_int.\n\t(tree_unswitch_outer_loop): Likewise.\n\t* tree-ssa-loop-ivopts.c (avg_loop_niter): Likewise.\n\t* tree-vect-loop.c (vect_analyze_loop_2): Likewise.\n\nFrom-SVN: r234902", "tree": {"sha": "86d1b96ecbf5e3ec2f494354552048320d5c8783", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86d1b96ecbf5e3ec2f494354552048320d5c8783"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e43b79ccef4a79397185637d55c092674a69f2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e43b79ccef4a79397185637d55c092674a69f2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e43b79ccef4a79397185637d55c092674a69f2b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e43b79ccef4a79397185637d55c092674a69f2b/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "58d32aeba5a1c7749d8307f73f55e39176186bdb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58d32aeba5a1c7749d8307f73f55e39176186bdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58d32aeba5a1c7749d8307f73f55e39176186bdb"}], "stats": {"total": 34, "additions": 19, "deletions": 15}, "files": [{"sha": "1e9351567162c7b2f1aaccf5a825e150401ee941", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e43b79ccef4a79397185637d55c092674a69f2b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e43b79ccef4a79397185637d55c092674a69f2b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3e43b79ccef4a79397185637d55c092674a69f2b", "patch": "@@ -1,3 +1,16 @@\n+2016-04-12  Martin Liska  <mliska@suse.cz>\n+\n+\tRevert\n+\t2016-03-30  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* tree-ssa-loop-niter.c (idx_infer_loop_bounds): We can't get realistic\n+\testimates here.\n+\t* tree-ssa-loop-unswitch.c (tree_unswitch_single_loop): Use also\n+\tmax_loop_iterations_int.\n+\t(tree_unswitch_outer_loop): Likewise.\n+\t* tree-ssa-loop-ivopts.c (avg_loop_niter): Likewise.\n+\t* tree-vect-loop.c (vect_analyze_loop_2): Likewise.\n+\n 2016-04-12  Tom de Vries  <tom@codesourcery.com>\n \n \tPR tree-optimization/68756"}, {"sha": "a016e9f64c40a3cff4854e6702f30572b47b30cb", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e43b79ccef4a79397185637d55c092674a69f2b/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e43b79ccef4a79397185637d55c092674a69f2b/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=3e43b79ccef4a79397185637d55c092674a69f2b", "patch": "@@ -121,11 +121,7 @@ avg_loop_niter (struct loop *loop)\n {\n   HOST_WIDE_INT niter = estimated_stmt_executions_int (loop);\n   if (niter == -1)\n-    {\n-      niter = max_stmt_executions_int (loop);\n-      if (niter == -1 || niter > AVG_LOOP_NITER (loop))\n-        return AVG_LOOP_NITER (loop);\n-    }\n+    return AVG_LOOP_NITER (loop);\n \n   return niter;\n }"}, {"sha": "81689fc1aa432d710dfaa0ca76fc30ab1f09c609", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e43b79ccef4a79397185637d55c092674a69f2b/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e43b79ccef4a79397185637d55c092674a69f2b/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=3e43b79ccef4a79397185637d55c092674a69f2b", "patch": "@@ -3115,6 +3115,7 @@ idx_infer_loop_bounds (tree base, tree *idx, void *dta)\n   tree low, high, type, next;\n   bool sign, upper = true, at_end = false;\n   struct loop *loop = data->loop;\n+  bool reliable = true;\n \n   if (TREE_CODE (base) != ARRAY_REF)\n     return true;\n@@ -3186,14 +3187,14 @@ idx_infer_loop_bounds (tree base, tree *idx, void *dta)\n       && tree_int_cst_compare (next, high) <= 0)\n     return true;\n \n-  /* If access is not executed on every iteration, we must ensure that overlow\n-     may not make the access valid later.  */\n+  /* If access is not executed on every iteration, we must ensure that overlow may\n+     not make the access valid later.  */\n   if (!dominated_by_p (CDI_DOMINATORS, loop->latch, gimple_bb (data->stmt))\n       && scev_probably_wraps_p (initial_condition_in_loop_num (ev, loop->num),\n \t\t\t\tstep, data->stmt, loop, true))\n-    upper = false;\n+    reliable = false;\n \n-  record_nonwrapping_iv (loop, init, step, data->stmt, low, high, false, upper);\n+  record_nonwrapping_iv (loop, init, step, data->stmt, low, high, reliable, upper);\n   return true;\n }\n "}, {"sha": "dd6fd01256a27998bfb3f3eb9089e4d8597cd380", "filename": "gcc/tree-ssa-loop-unswitch.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e43b79ccef4a79397185637d55c092674a69f2b/gcc%2Ftree-ssa-loop-unswitch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e43b79ccef4a79397185637d55c092674a69f2b/gcc%2Ftree-ssa-loop-unswitch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-unswitch.c?ref=3e43b79ccef4a79397185637d55c092674a69f2b", "patch": "@@ -223,8 +223,6 @@ tree_unswitch_single_loop (struct loop *loop, int num)\n       /* If the loop is not expected to iterate, there is no need\n \t for unswitching.  */\n       iterations = estimated_loop_iterations_int (loop);\n-      if (iterations < 0)\n-        iterations = max_loop_iterations_int (loop);\n       if (iterations >= 0 && iterations <= 1)\n \t{\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n@@ -441,8 +439,6 @@ tree_unswitch_outer_loop (struct loop *loop)\n   /* If the loop is not expected to iterate, there is no need\n       for unswitching.  */\n   iterations = estimated_loop_iterations_int (loop);\n-  if (iterations < 0)\n-    iterations = max_loop_iterations_int (loop);\n   if (iterations >= 0 && iterations <= 1)\n     {\n       if (dump_file && (dump_flags & TDF_DETAILS))"}, {"sha": "d813b86259267a88273c77f99c271ee98ac55af3", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e43b79ccef4a79397185637d55c092674a69f2b/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e43b79ccef4a79397185637d55c092674a69f2b/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=3e43b79ccef4a79397185637d55c092674a69f2b", "patch": "@@ -2063,8 +2063,6 @@ vect_analyze_loop_2 (loop_vec_info loop_vinfo, bool &fatal)\n \n   estimated_niter\n     = estimated_stmt_executions_int (LOOP_VINFO_LOOP (loop_vinfo));\n-  if (estimated_niter != -1)\n-    estimated_niter = max_niter;\n   if (estimated_niter != -1\n       && ((unsigned HOST_WIDE_INT) estimated_niter\n           <= MAX (th, (unsigned)min_profitable_estimate)))"}]}