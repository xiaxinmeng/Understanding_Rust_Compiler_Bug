{"sha": "2f7d18ddd7f99fc8a67f13a2d97c1305bdcd05cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmY3ZDE4ZGRkN2Y5OWZjOGE2N2YxM2EyZDk3YzEzMDViZGNkMDVjYw==", "commit": {"author": {"name": "Charles Baylis", "email": "charles.baylis@linaro.org", "date": "2015-11-11T01:05:16Z"}, "committer": {"name": "Charles Baylis", "email": "cbaylis@gcc.gnu.org", "date": "2015-11-11T01:05:16Z"}, "message": "[ARM] PR63870 Add qualifiers for NEON builtins\n\n2015-11-11  Charles Baylis  <charles.baylis@linaro.org>\n\n\tPR target/63870\n\t* config/arm/arm-builtins.c (enum arm_type_qualifiers): New enumerator\n\tqualifier_struct_load_store_lane_index.\n\t(builtin_arg): New enumerator NEON_ARG_STRUCT_LOAD_STORE_LANE_INDEX.\n\t(arm_expand_neon_args): New parameter. Remove ellipsis. Handle NEON\n\targument qualifiers.\n\t(arm_expand_neon_builtin): Handle new NEON argument qualifier.\n\t* config/arm/arm.h (NEON_ENDIAN_LANE_N): New macro.\n\nFrom-SVN: r230142", "tree": {"sha": "f44120af53567517e2c4a129f2085ac051a15889", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f44120af53567517e2c4a129f2085ac051a15889"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f7d18ddd7f99fc8a67f13a2d97c1305bdcd05cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f7d18ddd7f99fc8a67f13a2d97c1305bdcd05cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f7d18ddd7f99fc8a67f13a2d97c1305bdcd05cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f7d18ddd7f99fc8a67f13a2d97c1305bdcd05cc/comments", "author": null, "committer": null, "parents": [{"sha": "493b929ab8615fc06f9899c7232f927cbd08523a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/493b929ab8615fc06f9899c7232f927cbd08523a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/493b929ab8615fc06f9899c7232f927cbd08523a"}], "stats": {"total": 66, "additions": 48, "deletions": 18}, "files": [{"sha": "90ab5853c088514aa791c672970dc7a37548c4db", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f7d18ddd7f99fc8a67f13a2d97c1305bdcd05cc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f7d18ddd7f99fc8a67f13a2d97c1305bdcd05cc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2f7d18ddd7f99fc8a67f13a2d97c1305bdcd05cc", "patch": "@@ -1,3 +1,14 @@\n+2015-11-11  Charles Baylis  <charles.baylis@linaro.org>\n+\n+\tPR target/63870\n+\t* config/arm/arm-builtins.c (enum arm_type_qualifiers): New enumerator\n+\tqualifier_struct_load_store_lane_index.\n+\t(builtin_arg): New enumerator NEON_ARG_STRUCT_LOAD_STORE_LANE_INDEX.\n+\t(arm_expand_neon_args): New parameter. Remove ellipsis. Handle NEON\n+\targument qualifiers.\n+\t(arm_expand_neon_builtin): Handle new NEON argument qualifier.\n+\t* config/arm/arm.h (NEON_ENDIAN_LANE_N): New macro.\n+\n 2015-11-10  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* config/nvptx/nvptx.opt (moptimize): New flag."}, {"sha": "d0bd777570435ea38794389d033adfa7b42e515d", "filename": "gcc/config/arm/arm-builtins.c", "status": "modified", "additions": 30, "deletions": 18, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f7d18ddd7f99fc8a67f13a2d97c1305bdcd05cc/gcc%2Fconfig%2Farm%2Farm-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f7d18ddd7f99fc8a67f13a2d97c1305bdcd05cc/gcc%2Fconfig%2Farm%2Farm-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-builtins.c?ref=2f7d18ddd7f99fc8a67f13a2d97c1305bdcd05cc", "patch": "@@ -67,7 +67,9 @@ enum arm_type_qualifiers\n   /* Polynomial types.  */\n   qualifier_poly = 0x100,\n   /* Lane indices - must be within range of previous argument = a vector.  */\n-  qualifier_lane_index = 0x200\n+  qualifier_lane_index = 0x200,\n+  /* Lane indices for single lane structure loads and stores.  */\n+  qualifier_struct_load_store_lane_index = 0x400\n };\n \n /*  The qualifier_internal allows generation of a unary builtin from\n@@ -1963,6 +1965,7 @@ typedef enum {\n   NEON_ARG_COPY_TO_REG,\n   NEON_ARG_CONSTANT,\n   NEON_ARG_LANE_INDEX,\n+  NEON_ARG_STRUCT_LOAD_STORE_LANE_INDEX,\n   NEON_ARG_MEMORY,\n   NEON_ARG_STOP\n } builtin_arg;\n@@ -2020,9 +2023,9 @@ neon_dereference_pointer (tree exp, tree type, machine_mode mem_mode,\n /* Expand a Neon builtin.  */\n static rtx\n arm_expand_neon_args (rtx target, machine_mode map_mode, int fcode,\n-\t\t      int icode, int have_retval, tree exp, ...)\n+\t\t      int icode, int have_retval, tree exp,\n+\t\t      builtin_arg *args)\n {\n-  va_list ap;\n   rtx pat;\n   tree arg[SIMD_MAX_BUILTIN_ARGS];\n   rtx op[SIMD_MAX_BUILTIN_ARGS];\n@@ -2037,13 +2040,11 @@ arm_expand_neon_args (rtx target, machine_mode map_mode, int fcode,\n \t  || !(*insn_data[icode].operand[0].predicate) (target, tmode)))\n     target = gen_reg_rtx (tmode);\n \n-  va_start (ap, exp);\n-\n   formals = TYPE_ARG_TYPES (TREE_TYPE (arm_builtin_decls[fcode]));\n \n   for (;;)\n     {\n-      builtin_arg thisarg = (builtin_arg) va_arg (ap, int);\n+      builtin_arg thisarg = args[argc];\n \n       if (thisarg == NEON_ARG_STOP)\n \tbreak;\n@@ -2079,6 +2080,18 @@ arm_expand_neon_args (rtx target, machine_mode map_mode, int fcode,\n \t\top[argc] = copy_to_mode_reg (mode[argc], op[argc]);\n \t      break;\n \n+\t    case NEON_ARG_STRUCT_LOAD_STORE_LANE_INDEX:\n+\t      gcc_assert (argc > 1);\n+\t      if (CONST_INT_P (op[argc]))\n+\t\t{\n+\t\t  neon_lane_bounds (op[argc], 0,\n+\t\t\t\t    GET_MODE_NUNITS (map_mode), exp);\n+\t\t  /* Keep to GCC-vector-extension lane indices in the RTL.  */\n+\t\t  op[argc] =\n+\t\t    GEN_INT (NEON_ENDIAN_LANE_N (map_mode, INTVAL (op[argc])));\n+\t\t}\n+\t      goto constant_arg;\n+\n \t    case NEON_ARG_LANE_INDEX:\n \t      /* Previous argument must be a vector, which this indexes.  */\n \t      gcc_assert (argc > 0);\n@@ -2089,19 +2102,22 @@ arm_expand_neon_args (rtx target, machine_mode map_mode, int fcode,\n \t\t}\n \t      /* Fall through - if the lane index isn't a constant then\n \t\t the next case will error.  */\n+\n \t    case NEON_ARG_CONSTANT:\n+constant_arg:\n \t      if (!(*insn_data[icode].operand[opno].predicate)\n \t\t  (op[argc], mode[argc]))\n-\t\terror_at (EXPR_LOCATION (exp), \"incompatible type for argument %d, \"\n-\t\t       \"expected %<const int%>\", argc + 1);\n+\t\t{\n+\t\t  error (\"%Kargument %d must be a constant immediate\",\n+\t\t\t exp, argc + 1);\n+\t\t  return const0_rtx;\n+\t\t}\n \t      break;\n+\n             case NEON_ARG_MEMORY:\n \t      /* Check if expand failed.  */\n \t      if (op[argc] == const0_rtx)\n-\t      {\n-\t\tva_end (ap);\n \t\treturn 0;\n-\t      }\n \t      gcc_assert (MEM_P (op[argc]));\n \t      PUT_MODE (op[argc], mode[argc]);\n \t      /* ??? arm_neon.h uses the same built-in functions for signed\n@@ -2122,8 +2138,6 @@ arm_expand_neon_args (rtx target, machine_mode map_mode, int fcode,\n \t}\n     }\n \n-  va_end (ap);\n-\n   if (have_retval)\n     switch (argc)\n       {\n@@ -2235,6 +2249,8 @@ arm_expand_neon_builtin (int fcode, tree exp, rtx target)\n \n       if (d->qualifiers[qualifiers_k] & qualifier_lane_index)\n \targs[k] = NEON_ARG_LANE_INDEX;\n+      else if (d->qualifiers[qualifiers_k] & qualifier_struct_load_store_lane_index)\n+\targs[k] = NEON_ARG_STRUCT_LOAD_STORE_LANE_INDEX;\n       else if (d->qualifiers[qualifiers_k] & qualifier_immediate)\n \targs[k] = NEON_ARG_CONSTANT;\n       else if (d->qualifiers[qualifiers_k] & qualifier_maybe_immediate)\n@@ -2260,11 +2276,7 @@ arm_expand_neon_builtin (int fcode, tree exp, rtx target)\n      the function is void, and a 1 if it is not.  */\n   return arm_expand_neon_args\n \t  (target, d->mode, fcode, icode, !is_void, exp,\n-\t   args[1],\n-\t   args[2],\n-\t   args[3],\n-\t   args[4],\n-\t   NEON_ARG_STOP);\n+\t   &args[1]);\n }\n \n /* Expand an expression EXP that calls a built-in function,"}, {"sha": "59034b55f2584d564ff1fa8480e6b5c787a6e124", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f7d18ddd7f99fc8a67f13a2d97c1305bdcd05cc/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f7d18ddd7f99fc8a67f13a2d97c1305bdcd05cc/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=2f7d18ddd7f99fc8a67f13a2d97c1305bdcd05cc", "patch": "@@ -30103,4 +30103,5 @@ arm_sched_fusion_priority (rtx_insn *insn, int max_pri,\n   *pri = tmp;\n   return;\n }\n+\n #include \"gt-arm.h\""}, {"sha": "313fed5b45059b40dd75407fab3258bd4163e828", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f7d18ddd7f99fc8a67f13a2d97c1305bdcd05cc/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f7d18ddd7f99fc8a67f13a2d97c1305bdcd05cc/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=2f7d18ddd7f99fc8a67f13a2d97c1305bdcd05cc", "patch": "@@ -284,6 +284,12 @@ extern void (*arm_lang_output_object_attributes_hook)(void);\n #define TARGET_BPABI false\n #endif\n \n+/* Transform lane numbers on big endian targets. This is used to allow for the\n+   endianness difference between NEON architectural lane numbers and those\n+   used in RTL */\n+#define NEON_ENDIAN_LANE_N(mode, n)  \\\n+  (BYTES_BIG_ENDIAN ? GET_MODE_NUNITS (mode) - 1 - n : n)\n+\n /* Support for a compile-time default CPU, et cetera.  The rules are:\n    --with-arch is ignored if -march or -mcpu are specified.\n    --with-cpu is ignored if -march or -mcpu are specified, and is overridden"}]}