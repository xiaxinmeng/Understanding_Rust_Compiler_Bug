{"sha": "42b304f1ce846092056b7daa32c6288e285420fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDJiMzA0ZjFjZTg0NjA5MjA1NmI3ZGFhMzJjNjI4OGUyODU0MjBmYQ==", "commit": {"author": {"name": "Lee Millward", "email": "lee.millward@codesourcery.com", "date": "2006-07-28T17:01:19Z"}, "committer": {"name": "Lee Millward", "email": "lmillward@gcc.gnu.org", "date": "2006-07-28T17:01:19Z"}, "message": "re PR c++/27668 (ICE with invalid template parameter)\n\n        PR c++/27668\n        PR c++/27962\n        * pt.c (process_template_parm) Store invalid template\n        parameters as error_mark_node in the paramater list.\n        (push_inline_template_parms_recursive): Handle invalid\n        template parameters.\n        (comp_template_parms): Likewise.\n        (check_default_tmpl_arg): Likewise.\n        (coerce_template_template_parms): Likewise.\n        (mangle_class_name_for_template): Likewise.\n        (tsubst_template_parms): Likewise.\n        * error.c (dump_template_argument_list): Likewise.\n\n        * g++.dg/template/crash55.C: New test.\n        * g++.dg/template/nontype16.C: New test.\n        * g++.dg/template/void2.C: Adjust error markers.\n        * g++.dg/template/nontype5.C: Adjust error markers.\n\nFrom-SVN: r115800", "tree": {"sha": "b9d1ed85681b7f931fd356b2dec21c008026518e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9d1ed85681b7f931fd356b2dec21c008026518e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/42b304f1ce846092056b7daa32c6288e285420fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42b304f1ce846092056b7daa32c6288e285420fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42b304f1ce846092056b7daa32c6288e285420fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42b304f1ce846092056b7daa32c6288e285420fa/comments", "author": null, "committer": null, "parents": [{"sha": "8f2cc5b59bd35f2cac909fbe84cb6093be3121e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f2cc5b59bd35f2cac909fbe84cb6093be3121e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f2cc5b59bd35f2cac909fbe84cb6093be3121e5"}], "stats": {"total": 144, "additions": 118, "deletions": 26}, "files": [{"sha": "355332ac26774d54d565aa10a4b8051053535a48", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42b304f1ce846092056b7daa32c6288e285420fa/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42b304f1ce846092056b7daa32c6288e285420fa/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=42b304f1ce846092056b7daa32c6288e285420fa", "patch": "@@ -1,3 +1,18 @@\n+2006-07-28  Lee Millward  <lee.millward@codesourcery.com>\n+\n+        PR c++/27668\n+        PR c++/27962\n+        * pt.c (process_template_parm) Store invalid template\n+        parameters as error_mark_node in the paramater list.\n+        (push_inline_template_parms_recursive): Handle invalid\n+        template parameters.\n+        (comp_template_parms): Likewise.\n+        (check_default_tmpl_arg): Likewise.\n+        (coerce_template_template_parms): Likewise.\n+        (mangle_class_name_for_template): Likewise.\n+        (tsubst_template_parms): Likewise.\n+        * error.c (dump_template_argument_list): Likewise.\n+\t\n 2006-07-28  Kazu Hirata  <kazu@codesourcery.com>\n \n \t* cp-tree.h: Fix a comment typo."}, {"sha": "d6c813da7a7f7409e018f6d0a73718c3a53e91aa", "filename": "gcc/cp/error.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42b304f1ce846092056b7daa32c6288e285420fa/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42b304f1ce846092056b7daa32c6288e285420fa/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=42b304f1ce846092056b7daa32c6288e285420fa", "patch": "@@ -166,8 +166,14 @@ dump_template_argument_list (tree args, int flags)\n static void\n dump_template_parameter (tree parm, int flags)\n {\n-  tree p = TREE_VALUE (parm);\n-  tree a = TREE_PURPOSE (parm);\n+  tree p;\n+  tree a;\n+\n+  if (parm == error_mark_node)\n+   return;\n+\n+  p = TREE_VALUE (parm);\n+  a = TREE_PURPOSE (parm);\n \n   if (TREE_CODE (p) == TYPE_DECL)\n     {"}, {"sha": "5a7bfb8da551d50686c00e7d57bc86bd4fb08721", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 67, "deletions": 22, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42b304f1ce846092056b7daa32c6288e285420fa/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42b304f1ce846092056b7daa32c6288e285420fa/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=42b304f1ce846092056b7daa32c6288e285420fa", "patch": "@@ -336,7 +336,12 @@ push_inline_template_parms_recursive (tree parmlist, int levels)\n \t       NULL);\n   for (i = 0; i < TREE_VEC_LENGTH (parms); ++i)\n     {\n-      tree parm = TREE_VALUE (TREE_VEC_ELT (parms, i));\n+      tree parm;\n+\n+      if (TREE_VEC_ELT (parms, i) == error_mark_node)\n+        continue;\n+\n+      parm = TREE_VALUE (TREE_VEC_ELT (parms, i));\n       gcc_assert (DECL_P (parm));\n \n       switch (TREE_CODE (parm))\n@@ -2204,8 +2209,15 @@ comp_template_parms (tree parms1, tree parms2)\n \n       for (i = 0; i < TREE_VEC_LENGTH (t2); ++i)\n \t{\n-\t  tree parm1 = TREE_VALUE (TREE_VEC_ELT (t1, i));\n-\t  tree parm2 = TREE_VALUE (TREE_VEC_ELT (t2, i));\n+          tree parm1;\n+          tree parm2;\n+\n+          if (TREE_VEC_ELT (t1, i) == error_mark_node\n+              || TREE_VEC_ELT (t2, i) == error_mark_node)\n+            continue;\n+\n+\t  parm1 = TREE_VALUE (TREE_VEC_ELT (t1, i));\n+          parm2 = TREE_VALUE (TREE_VEC_ELT (t2, i));\n \n \t  if (TREE_CODE (parm1) != TREE_CODE (parm2))\n \t    return 0;\n@@ -2362,7 +2374,7 @@ process_template_parm (tree list, tree parm, bool is_non_type)\n       SET_DECL_TEMPLATE_PARM_P (parm);\n \n       if (TREE_TYPE (parm) == error_mark_node)\n-\tTREE_TYPE (parm) = void_type_node;\n+\treturn chainon(list, error_mark_node);\n       else\n       {\n \t/* [temp.param]\n@@ -2371,7 +2383,7 @@ process_template_parm (tree list, tree parm, bool is_non_type)\n \t   ignored when determining its type.  */\n \tTREE_TYPE (parm) = TYPE_MAIN_VARIANT (TREE_TYPE (parm));\n \tif (invalid_nontype_parm_type_p (TREE_TYPE (parm), 1))\n-\t  TREE_TYPE (parm) = void_type_node;\n+\t  return chainon(list, error_mark_node);\n       }\n \n       /* A template parameter is not modifiable.  */\n@@ -2838,6 +2850,10 @@ check_default_tmpl_args (tree decl, tree parms, int is_primary, int is_partial)\n       for (i = 0; i < ntparms; ++i)\n \t{\n \t  tree parm = TREE_VEC_ELT (inner_parms, i);\n+\n+          if (parm == error_mark_node)\n+            continue;\n+\n \t  if (TREE_PURPOSE (parm))\n \t    seen_def_arg_p = 1;\n \t  else if (seen_def_arg_p)\n@@ -2902,18 +2918,23 @@ check_default_tmpl_args (tree decl, tree parms, int is_primary, int is_partial)\n \n       ntparms = TREE_VEC_LENGTH (inner_parms);\n       for (i = 0; i < ntparms; ++i)\n-\tif (TREE_PURPOSE (TREE_VEC_ELT (inner_parms, i)))\n-\t  {\n-\t    if (msg)\n-\t      {\n-\t\terror (msg, decl);\n-\t\tmsg = 0;\n-\t      }\n+        {\n+          if (TREE_VEC_ELT (inner_parms, i) == error_mark_node)\n+            continue;\n \n-\t    /* Clear out the default argument so that we are not\n-\t       confused later.  */\n-\t    TREE_PURPOSE (TREE_VEC_ELT (inner_parms, i)) = NULL_TREE;\n-\t  }\n+\t  if (TREE_PURPOSE (TREE_VEC_ELT (inner_parms, i)))\n+\t    {\n+\t      if (msg)\n+\t        {\n+\t\t  error (msg, decl);\n+\t\t  msg = 0;\n+\t        }\n+\n+\t      /* Clear out the default argument so that we are not\n+\t         confused later.  */\n+\t      TREE_PURPOSE (TREE_VEC_ELT (inner_parms, i)) = NULL_TREE;\n+\t    }\n+        }\n \n       /* At this point, if we're still interested in issuing messages,\n \t they must apply to classes surrounding the object declared.  */\n@@ -3764,6 +3785,9 @@ coerce_template_template_parms (tree parm_parms,\n \n   for (i = 0; i < nparms; ++i)\n     {\n+      if (TREE_VEC_ELT (parm_parms, i) == error_mark_node)\n+        continue;\n+\n       parm = TREE_VALUE (TREE_VEC_ELT (parm_parms, i));\n       arg = TREE_VALUE (TREE_VEC_ELT (arg_parms, i));\n \n@@ -4023,7 +4047,8 @@ coerce_template_parms (tree parms,\n       || (nargs < nparms\n \t  && require_all_args\n \t  && (!use_default_args\n-\t      || !TREE_PURPOSE (TREE_VEC_ELT (parms, nargs)))))\n+\t      || (TREE_VEC_ELT (parms, nargs) != error_mark_node\n+                  && !TREE_PURPOSE (TREE_VEC_ELT (parms, nargs))))))\n     {\n       if (complain & tf_error)\n \t{\n@@ -4046,6 +4071,9 @@ coerce_template_parms (tree parms,\n \n       /* Get the Ith template parameter.  */\n       parm = TREE_VEC_ELT (parms, i);\n+ \n+      if (parm == error_mark_node)\n+        continue;\n \n       /* Calculate the Ith argument.  */\n       if (i < nargs)\n@@ -4146,8 +4174,14 @@ mangle_class_name_for_template (const char* name, tree parms, tree arglist)\n   gcc_assert (nparms == TREE_VEC_LENGTH (arglist));\n   for (i = 0; i < nparms; i++)\n     {\n-      tree parm = TREE_VALUE (TREE_VEC_ELT (parms, i));\n-      tree arg = TREE_VEC_ELT (arglist, i);\n+      tree parm;\n+      tree arg;\n+\n+      if (TREE_VEC_ELT (parms, i) == error_mark_node)\n+        continue;\n+\n+      parm = TREE_VALUE (TREE_VEC_ELT (parms, i));\n+      arg = TREE_VEC_ELT (arglist, i);\n \n       if (i)\n \tccat (',');\n@@ -6053,9 +6087,20 @@ tsubst_template_parms (tree parms, tree args, tsubst_flags_t complain)\n \n       for (i = 0; i < TREE_VEC_LENGTH (new_vec); ++i)\n \t{\n-\t  tree tuple = TREE_VEC_ELT (TREE_VALUE (parms), i);\n-\t  tree default_value = TREE_PURPOSE (tuple);\n-\t  tree parm_decl = TREE_VALUE (tuple);\n+          tree tuple;\n+          tree default_value;\n+          tree parm_decl;\n+\n+          if (parms == error_mark_node)\n+            continue;\n+\n+          tuple = TREE_VEC_ELT (TREE_VALUE (parms), i);\n+\n+          if (tuple == error_mark_node)\n+            continue;\n+\n+          default_value = TREE_PURPOSE (tuple);\n+          parm_decl = TREE_VALUE (tuple);\n \n \t  parm_decl = tsubst (parm_decl, args, complain, NULL_TREE);\n \t  if (TREE_CODE (parm_decl) == PARM_DECL"}, {"sha": "90c9ebf89e32ceb18f2c4cd510d77bfa75e11f42", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42b304f1ce846092056b7daa32c6288e285420fa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42b304f1ce846092056b7daa32c6288e285420fa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=42b304f1ce846092056b7daa32c6288e285420fa", "patch": "@@ -1,3 +1,14 @@\n+2006-07-28  Lee Millward  <lee.millward@codesourcery.com>\n+\n+        PR c++/27668\n+        * g++.dg/template/crash55.C: New test.\n+\n+        PR c++/27962\n+        * g++.dg/template/nontype16.C: New test.\n+\n+        * g++.dg/template/void2.C: Adjust error markers.\n+        * g++.dg/template/nontype5.C: Adjust error markers.\n+\t\n 2006-07-27  Arjan van de Ven <arjan@linux.intel.com>\n \n \t* gcc.target/i386/stack-prot-kernel.c: New test."}, {"sha": "7e15b66ee75b0e28b81bb36233b932989bbeb111", "filename": "gcc/testsuite/g++.dg/template/crash55.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42b304f1ce846092056b7daa32c6288e285420fa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash55.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42b304f1ce846092056b7daa32c6288e285420fa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash55.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash55.C?ref=42b304f1ce846092056b7daa32c6288e285420fa", "patch": "@@ -0,0 +1,6 @@\n+//PR c++/27668\n+\n+template<typename class T, T = T()> // { dg-error \"nested-name-specifier|two or more|valid type\" }\n+struct A {};                        // { dg-error \"definition\"\n+\n+template<int> void foo(A<int>);     // { dg-error \"mismatch|constant\" }"}, {"sha": "36d1e9564a0948a33bbf485132cfe3baa199af74", "filename": "gcc/testsuite/g++.dg/template/nontype16.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42b304f1ce846092056b7daa32c6288e285420fa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42b304f1ce846092056b7daa32c6288e285420fa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype16.C?ref=42b304f1ce846092056b7daa32c6288e285420fa", "patch": "@@ -0,0 +1,9 @@\n+//PR c++/27962\n+\n+template<int> struct A\n+{\n+    template<typename> void foo();\n+};\n+\n+template<> template<struct T> void A<0>::foo() {} // { dg-error \"not a valid type\" }\n+ "}, {"sha": "f7b76259bbc384f6e97afe1c3829e4240eb74ca2", "filename": "gcc/testsuite/g++.dg/template/nontype5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42b304f1ce846092056b7daa32c6288e285420fa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42b304f1ce846092056b7daa32c6288e285420fa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype5.C?ref=42b304f1ce846092056b7daa32c6288e285420fa", "patch": "@@ -11,4 +11,4 @@ template <int> struct A\n     template <B> struct C {};\t// { dg-error \"not a valid type\" }\n };\n \n-A<0> a;\t\t\t\t// { dg-error \"instantiated\" }\n+A<0> a;"}, {"sha": "05a8186e03a511cec57c7ad9a4c074a395262651", "filename": "gcc/testsuite/g++.dg/template/void2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42b304f1ce846092056b7daa32c6288e285420fa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fvoid2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42b304f1ce846092056b7daa32c6288e285420fa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fvoid2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fvoid2.C?ref=42b304f1ce846092056b7daa32c6288e285420fa", "patch": "@@ -6,4 +6,4 @@ template<int> struct A\n   template<void> friend class X;  // { dg-error \"void\" }\n };\n \n-A<0> a;  // { dg-error \"instantiated\" }\n+A<0> a; "}]}