{"sha": "aed773a2c8a20550b32cd223ecc44d87b6676974", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWVkNzczYTJjOGEyMDU1MGIzMmNkMjIzZWNjNDRkODdiNjY3Njk3NA==", "commit": {"author": {"name": "Charles Baylis", "email": "charles.baylis@linaro.org", "date": "2014-07-05T11:58:06Z"}, "committer": {"name": "Charles Baylis", "email": "cbaylis@gcc.gnu.org", "date": "2014-07-05T11:58:06Z"}, "message": "[ARM] PR target/49423\n\n2014-07-05  Charles Baylis  <charles.baylis@linaro.org>\n\n\tPR target/49423\n\t* config/arm/arm-protos.h (arm_legitimate_address_p,\n\tarm_is_constant_pool_ref): Add prototypes.\n\t* config/arm/arm.c (arm_legitimate_address_p): Remove static.\n\t(arm_is_constant_pool_ref) New function.\n\t* config/arm/arm.md (unaligned_loadhis, arm_zero_extendhisi2_v6,\n\tarm_zero_extendqisi2_v6): Use Uh constraint for memory operand.\n\t(arm_extendhisi2, arm_extendhisi2_v6): Use Uh constraint for memory\n\toperand. Remove pool_range and neg_pool_range attributes.\n\t(arm_extendqihi_insn, arm_extendqisi, arm_extendqisi_v6): Remove\n\tpool_range and neg_pool_range attributes.\n\t* config/arm/constraints.md (Uh): New constraint.\n\t(Uq): Don't allow constant pool references.\n\nFrom-SVN: r212303", "tree": {"sha": "40d7c0d5a59e187d1950e5ead77ec0c4dfeac17f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40d7c0d5a59e187d1950e5ead77ec0c4dfeac17f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aed773a2c8a20550b32cd223ecc44d87b6676974", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aed773a2c8a20550b32cd223ecc44d87b6676974", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aed773a2c8a20550b32cd223ecc44d87b6676974", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aed773a2c8a20550b32cd223ecc44d87b6676974/comments", "author": null, "committer": null, "parents": [{"sha": "f19c9da8410cafef058bf59fcb9e1efa085fceaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f19c9da8410cafef058bf59fcb9e1efa085fceaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f19c9da8410cafef058bf59fcb9e1efa085fceaf"}], "stats": {"total": 70, "additions": 47, "deletions": 23}, "files": [{"sha": "d300f6136c0eda46b8827b05958bddaf234f75e2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aed773a2c8a20550b32cd223ecc44d87b6676974/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aed773a2c8a20550b32cd223ecc44d87b6676974/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aed773a2c8a20550b32cd223ecc44d87b6676974", "patch": "@@ -1,3 +1,19 @@\n+2014-07-05  Charles Baylis  <charles.baylis@linaro.org>\n+\n+\tPR target/49423\n+\t* config/arm/arm-protos.h (arm_legitimate_address_p,\n+\tarm_is_constant_pool_ref): Add prototypes.\n+\t* config/arm/arm.c (arm_legitimate_address_p): Remove static.\n+\t(arm_is_constant_pool_ref) New function.\n+\t* config/arm/arm.md (unaligned_loadhis, arm_zero_extendhisi2_v6,\n+\tarm_zero_extendqisi2_v6): Use Uh constraint for memory operand.\n+\t(arm_extendhisi2, arm_extendhisi2_v6): Use Uh constraint for memory\n+\toperand. Remove pool_range and neg_pool_range attributes.\n+\t(arm_extendqihi_insn, arm_extendqisi, arm_extendqisi_v6): Remove\n+\tpool_range and neg_pool_range attributes.\n+\t* config/arm/constraints.md (Uh): New constraint.\n+\t(Uq): Don't allow constant pool references.\n+\n 2014-07-04  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* config/aarch64/aarch64-simd.md (move_lo_quad_internal_<mode>): New."}, {"sha": "be5e72abff9ec383aacf31b70cb04481ec1d5e5b", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aed773a2c8a20550b32cd223ecc44d87b6676974/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aed773a2c8a20550b32cd223ecc44d87b6676974/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=aed773a2c8a20550b32cd223ecc44d87b6676974", "patch": "@@ -56,6 +56,7 @@ extern int arm_split_constant (RTX_CODE, enum machine_mode, rtx,\n extern int legitimate_pic_operand_p (rtx);\n extern rtx legitimize_pic_address (rtx, enum machine_mode, rtx);\n extern rtx legitimize_tls_address (rtx, rtx);\n+extern bool arm_legitimate_address_p (enum machine_mode, rtx, bool);\n extern int arm_legitimate_address_outer_p (enum machine_mode, rtx, RTX_CODE, int);\n extern int thumb_legitimate_offset_p (enum machine_mode, HOST_WIDE_INT);\n extern bool arm_legitimize_reload_address (rtx *, enum machine_mode, int, int,\n@@ -299,4 +300,6 @@ extern void arm_emit_eabi_attribute (const char *, int, int);\n /* Defined in gcc/common/config/arm-common.c.  */\n extern const char *arm_rewrite_selected_cpu (const char *name);\n \n+extern bool arm_is_constant_pool_ref (rtx);\n+\n #endif /* ! GCC_ARM_PROTOS_H */"}, {"sha": "1c9f2876237285d59794e367d9e3cf4be3fead3c", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aed773a2c8a20550b32cd223ecc44d87b6676974/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aed773a2c8a20550b32cd223ecc44d87b6676974/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=aed773a2c8a20550b32cd223ecc44d87b6676974", "patch": "@@ -92,7 +92,6 @@ static rtx arm_legitimize_address (rtx, rtx, enum machine_mode);\n static reg_class_t arm_preferred_reload_class (rtx, reg_class_t);\n static rtx thumb_legitimize_address (rtx, rtx, enum machine_mode);\n inline static int thumb1_index_register_rtx_p (rtx, int);\n-static bool arm_legitimate_address_p (enum machine_mode, rtx, bool);\n static int thumb_far_jump_used_p (void);\n static bool thumb_force_lr_save (void);\n static unsigned arm_size_return_regs (void);\n@@ -31536,4 +31535,13 @@ arm_atomic_assign_expand_fenv (tree *hold, tree *clear, tree *update)\n \t\t\t    reload_fenv, restore_fnenv), update_call);\n }\n \n+/* return TRUE if x is a reference to a value in a constant pool */\n+extern bool\n+arm_is_constant_pool_ref (rtx x)\n+{\n+  return (MEM_P (x)\n+\t  && GET_CODE (XEXP (x, 0)) == SYMBOL_REF\n+\t  && CONSTANT_POOL_ADDRESS_P (XEXP (x, 0)));\n+}\n+\n #include \"gt-arm.h\""}, {"sha": "d6ca79a3c2e30164c1015b37347e23605e6bfffa", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 10, "deletions": 20, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aed773a2c8a20550b32cd223ecc44d87b6676974/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aed773a2c8a20550b32cd223ecc44d87b6676974/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=aed773a2c8a20550b32cd223ecc44d87b6676974", "patch": "@@ -4152,7 +4152,7 @@\n (define_insn \"unaligned_loadhis\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=l,r\")\n \t(sign_extend:SI\n-\t  (unspec:HI [(match_operand:HI 1 \"memory_operand\" \"Uw,m\")]\n+\t  (unspec:HI [(match_operand:HI 1 \"memory_operand\" \"Uw,Uh\")]\n \t\t     UNSPEC_UNALIGNED_LOAD)))]\n   \"unaligned_access && TARGET_32BIT\"\n   \"ldr%(sh%)\\t%0, %1\\t@ unaligned\"\n@@ -4964,7 +4964,7 @@\n \n (define_insn \"*arm_zero_extendhisi2_v6\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n-\t(zero_extend:SI (match_operand:HI 1 \"nonimmediate_operand\" \"r,m\")))]\n+\t(zero_extend:SI (match_operand:HI 1 \"nonimmediate_operand\" \"r,Uh\")))]\n   \"TARGET_ARM && arm_arch6\"\n   \"@\n    uxth%?\\\\t%0, %1\n@@ -5035,7 +5035,7 @@\n \n (define_insn \"*arm_zero_extendqisi2_v6\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n-\t(zero_extend:SI (match_operand:QI 1 \"nonimmediate_operand\" \"r,m\")))]\n+\t(zero_extend:SI (match_operand:QI 1 \"nonimmediate_operand\" \"r,Uh\")))]\n   \"TARGET_ARM && arm_arch6\"\n   \"@\n    uxtb%(%)\\\\t%0, %1\n@@ -5195,31 +5195,27 @@\n \n (define_insn \"*arm_extendhisi2\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n-\t(sign_extend:SI (match_operand:HI 1 \"nonimmediate_operand\" \"r,m\")))]\n+\t(sign_extend:SI (match_operand:HI 1 \"nonimmediate_operand\" \"r,Uh\")))]\n   \"TARGET_ARM && arm_arch4 && !arm_arch6\"\n   \"@\n    #\n    ldr%(sh%)\\\\t%0, %1\"\n   [(set_attr \"length\" \"8,4\")\n    (set_attr \"type\" \"alu_shift_reg,load_byte\")\n-   (set_attr \"predicable\" \"yes\")\n-   (set_attr \"pool_range\" \"*,256\")\n-   (set_attr \"neg_pool_range\" \"*,244\")]\n+   (set_attr \"predicable\" \"yes\")]\n )\n \n ;; ??? Check Thumb-2 pool range\n (define_insn \"*arm_extendhisi2_v6\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n-\t(sign_extend:SI (match_operand:HI 1 \"nonimmediate_operand\" \"r,m\")))]\n+\t(sign_extend:SI (match_operand:HI 1 \"nonimmediate_operand\" \"r,Uh\")))]\n   \"TARGET_32BIT && arm_arch6\"\n   \"@\n    sxth%?\\\\t%0, %1\n    ldr%(sh%)\\\\t%0, %1\"\n   [(set_attr \"type\" \"extend,load_byte\")\n    (set_attr \"predicable\" \"yes\")\n-   (set_attr \"predicable_short_it\" \"no\")\n-   (set_attr \"pool_range\" \"*,256\")\n-   (set_attr \"neg_pool_range\" \"*,244\")]\n+   (set_attr \"predicable_short_it\" \"no\")]\n )\n \n (define_insn \"*arm_extendhisi2addsi\"\n@@ -5262,9 +5258,7 @@\n   \"TARGET_ARM && arm_arch4\"\n   \"ldr%(sb%)\\\\t%0, %1\"\n   [(set_attr \"type\" \"load_byte\")\n-   (set_attr \"predicable\" \"yes\")\n-   (set_attr \"pool_range\" \"256\")\n-   (set_attr \"neg_pool_range\" \"244\")]\n+   (set_attr \"predicable\" \"yes\")]\n )\n \n (define_expand \"extendqisi2\"\n@@ -5304,9 +5298,7 @@\n    ldr%(sb%)\\\\t%0, %1\"\n   [(set_attr \"length\" \"8,4\")\n    (set_attr \"type\" \"alu_shift_reg,load_byte\")\n-   (set_attr \"predicable\" \"yes\")\n-   (set_attr \"pool_range\" \"*,256\")\n-   (set_attr \"neg_pool_range\" \"*,244\")]\n+   (set_attr \"predicable\" \"yes\")]\n )\n \n (define_insn \"*arm_extendqisi_v6\"\n@@ -5318,9 +5310,7 @@\n    sxtb%?\\\\t%0, %1\n    ldr%(sb%)\\\\t%0, %1\"\n   [(set_attr \"type\" \"extend,load_byte\")\n-   (set_attr \"predicable\" \"yes\")\n-   (set_attr \"pool_range\" \"*,256\")\n-   (set_attr \"neg_pool_range\" \"*,244\")]\n+   (set_attr \"predicable\" \"yes\")]\n )\n \n (define_insn \"*arm_extendqisi2addsi\""}, {"sha": "f848664d57db00c3cda380690efdec4b6d03cfac", "filename": "gcc/config/arm/constraints.md", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aed773a2c8a20550b32cd223ecc44d87b6676974/gcc%2Fconfig%2Farm%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aed773a2c8a20550b32cd223ecc44d87b6676974/gcc%2Fconfig%2Farm%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fconstraints.md?ref=aed773a2c8a20550b32cd223ecc44d87b6676974", "patch": "@@ -36,7 +36,7 @@\n ;; in Thumb-2 state: Pj, PJ, Ps, Pt, Pu, Pv, Pw, Px, Py\n \n ;; The following memory constraints have been used:\n-;; in ARM/Thumb-2 state: Q, Ut, Uv, Uy, Un, Um, Us\n+;; in ARM/Thumb-2 state: Q, Uh, Ut, Uv, Uy, Un, Um, Us\n ;; in ARM state: Uq\n ;; in Thumb state: Uu, Uw\n \n@@ -348,6 +348,12 @@\n   An address valid for loading/storing register exclusive\"\n  (match_operand 0 \"mem_noofs_operand\"))\n \n+(define_memory_constraint \"Uh\"\n+ \"@internal\n+  An address suitable for byte and half-word loads which does not point inside a constant pool\"\n+ (and (match_code \"mem\")\n+      (match_test \"arm_legitimate_address_p (GET_MODE (op), XEXP (op, 0), false) && !arm_is_constant_pool_ref (op)\")))\n+\n (define_memory_constraint \"Ut\"\n  \"@internal\n   In ARM/Thumb-2 state an address valid for loading/storing opaque structure\n@@ -394,7 +400,8 @@\n  (and (match_code \"mem\")\n       (match_test \"TARGET_ARM\n \t\t   && arm_legitimate_address_outer_p (GET_MODE (op), XEXP (op, 0),\n-\t\t\t\t\t\t      SIGN_EXTEND, 0)\")))\n+\t\t\t\t\t\t      SIGN_EXTEND, 0)\n+\t\t   && !arm_is_constant_pool_ref (op)\")))\n \n (define_memory_constraint \"Q\"\n  \"@internal"}]}