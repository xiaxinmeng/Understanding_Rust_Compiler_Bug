{"sha": "3c9feefc8d6372d0e24070b53b40c2a36026e798", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M5ZmVlZmM4ZDYzNzJkMGUyNDA3MGI1M2I0MGMyYTM2MDI2ZTc5OA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-05-26T17:19:46Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-05-26T17:19:46Z"}, "message": "Inline and using namespace representation change.\n\n\tgcc/cp/\n\tInline and using namespace representation change.\n\t* cp-tree.h (struct lang_decl_ns): Delete ns_using.  Add usings,\n\tinlinees as vector.\n\t(DECL_NAMESPACE_USING): Adjust.\n\t(DECL_NAMESPACE_INLINEES): New.\n\t* name-lookup.h (struct cp_binding_level): Change usings\n\trepresentation.\n\t* name-lookup.c (name_lookup::do_queue_usings)\n\tname_lookup::queue_usings): Adjust.\n\t(name_lookup::search_namespace, name_lookup::search_usings)\n\tname_lookup::queue_namespace): Adjust.\n\t(name_lookup::adl_namespace_only): Adjust.\n\t(add_using_namespace, push_namespace): Push onto vector.\n\t(pop_namespace): Add timing logic.\n\n\tlibcc1/\n\t* libcp1plugin.cc (plugin_make_namespace_inline): Push onto linees.\n((--This line, and those below, will be ignored--\n\nM    gcc/cp/ChangeLog\nM    gcc/cp/cp-tree.h\nM    gcc/cp/name-lookup.c\nM    gcc/cp/name-lookup.h\nM    libcc1/libcp1plugin.cc\nM    libcc1/ChangeLog\n\nFrom-SVN: r248520", "tree": {"sha": "6a5cd764e175f48eba5d5bc8790e0fb35ffd6e93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a5cd764e175f48eba5d5bc8790e0fb35ffd6e93"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c9feefc8d6372d0e24070b53b40c2a36026e798", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c9feefc8d6372d0e24070b53b40c2a36026e798", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c9feefc8d6372d0e24070b53b40c2a36026e798", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c9feefc8d6372d0e24070b53b40c2a36026e798/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5596d26a5c2df26fc591c8dad0e2bc87ee2f88e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5596d26a5c2df26fc591c8dad0e2bc87ee2f88e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5596d26a5c2df26fc591c8dad0e2bc87ee2f88e2"}], "stats": {"total": 115, "additions": 74, "deletions": 41}, "files": [{"sha": "1890449046f613ce35dc154146b38cc4d474b8c1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c9feefc8d6372d0e24070b53b40c2a36026e798/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c9feefc8d6372d0e24070b53b40c2a36026e798/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3c9feefc8d6372d0e24070b53b40c2a36026e798", "patch": "@@ -1,5 +1,20 @@\n 2017-05-26  Nathan Sidwell  <nathan@acm.org>\n \n+\tInline and using namespace representation change.\n+\t* cp-tree.h (struct lang_decl_ns): Delete ns_using.  Add usings,\n+\tinlinees as vector.\n+\t(DECL_NAMESPACE_USING): Adjust.\n+\t(DECL_NAMESPACE_INLINEES): New.\n+\t* name-lookup.h (struct cp_binding_level): Change usings\n+\trepresentation.\n+\t* name-lookup.c (name_lookup::do_queue_usings,\n+\tname_lookup::queue_usings): Adjust.\n+\t(name_lookup::search_namespace, name_lookup::search_usings,\n+\tname_lookup::queue_namespace): Adjust.\n+\t(name_lookup::adl_namespace_only): Adjust.\n+\t(add_using_namespace, push_namespace): Push onto vector.\n+\t(pop_namespace): Add timing logic.\n+\n \t* call.c (build_operator_new_call): Do namelookup and ADL here.\n \t(build_new_op_1): Likewise.\n \t* name-lookup.h (lookup_function_nonclass): Delete declaration."}, {"sha": "a64e3ddd9890a9e17d120f5f9023f7aaf4104533", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c9feefc8d6372d0e24070b53b40c2a36026e798/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c9feefc8d6372d0e24070b53b40c2a36026e798/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=3c9feefc8d6372d0e24070b53b40c2a36026e798", "patch": "@@ -2546,7 +2546,11 @@ struct GTY(()) lang_decl_fn {\n struct GTY(()) lang_decl_ns {\n   struct lang_decl_base base;\n   cp_binding_level *level;\n-  tree ns_using;\n+\n+  /* using directives and inline children.  These need to be va_gc,\n+     because of PCH.  */\n+  vec<tree, va_gc> *usings;\n+  vec<tree, va_gc> *inlinees;\n };\n \n /* DECL_LANG_SPECIFIC for parameters.  */\n@@ -3133,10 +3137,13 @@ struct GTY(()) lang_decl {\n #define DECL_NAMESPACE_INLINE_P(NODE) \\\n   TREE_LANG_FLAG_0 (NAMESPACE_DECL_CHECK (NODE))\n \n-/* For a NAMESPACE_DECL: the list of using namespace directives\n-   The PURPOSE is the used namespace, the value is the namespace\n-   that is the common ancestor.  */\n-#define DECL_NAMESPACE_USING(NODE) (LANG_DECL_NS_CHECK (NODE)->ns_using)\n+/* In a NAMESPACE_DECL, a vector of using directives.  */\n+#define DECL_NAMESPACE_USING(NODE) \\\n+   (LANG_DECL_NS_CHECK (NODE)->usings)\n+\n+/* In a NAMESPACE_DECL, a vector of inline namespaces.  */\n+#define DECL_NAMESPACE_INLINEES(NODE) \\\n+   (LANG_DECL_NS_CHECK (NODE)->inlinees)\n \n /* In a NAMESPACE_DECL, points to the original namespace if this is\n    a namespace alias.  */"}, {"sha": "dc0387741e7462ef0ce104987f48239f4d17a8c9", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 41, "deletions": 33, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c9feefc8d6372d0e24070b53b40c2a36026e798/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c9feefc8d6372d0e24070b53b40c2a36026e798/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=3c9feefc8d6372d0e24070b53b40c2a36026e798", "patch": "@@ -220,8 +220,10 @@ struct name_lookup\n \n private:\n   using_queue *queue_namespace (using_queue *queue, int depth, tree scope);\n-  using_queue *do_queue_usings (using_queue *queue, int depth, tree usings);\n-  using_queue *queue_usings (using_queue *queue, int depth, tree usings)\n+  using_queue *do_queue_usings (using_queue *queue, int depth,\n+\t\t\t\tvec<tree, va_gc> *usings);\n+  using_queue *queue_usings (using_queue *queue, int depth,\n+\t\t\t     vec<tree, va_gc> *usings)\n   {\n     if (usings)\n       queue = do_queue_usings (queue, depth, usings);\n@@ -496,11 +498,10 @@ name_lookup::search_namespace (tree scope)\n   /* Look in exactly namespace. */\n   bool found = search_namespace_only (scope);\n   \n-  /* Look down into inline namespaces.  */\n-  for (tree inner = NAMESPACE_LEVEL (scope)->namespaces;\n-       inner; inner = TREE_CHAIN (inner))\n-    if (DECL_NAMESPACE_INLINE_P (inner))\n-      found |= search_namespace (inner);\n+  /* Recursively look in its inline children.  */\n+  if (vec<tree, va_gc> *inlinees = DECL_NAMESPACE_INLINEES (scope))\n+    for (unsigned ix = inlinees->length (); ix--;)\n+      found |= search_namespace ((*inlinees)[ix]);\n \n   if (found)\n     mark_found (scope);\n@@ -520,17 +521,14 @@ name_lookup::search_usings (tree scope)\n     return true;\n \n   bool found = false;\n-\n-  /* Look in direct usings.  */\n-  for (tree usings = DECL_NAMESPACE_USING (scope);\n-       usings; usings = TREE_CHAIN (usings))\n-    found |= search_qualified (TREE_PURPOSE (usings), true);\n+  if (vec<tree, va_gc> *usings = DECL_NAMESPACE_USING (scope))\n+    for (unsigned ix = usings->length (); ix--;)\n+      found |= search_qualified ((*usings)[ix], true);\n \n   /* Look in its inline children.  */\n-  for (tree inner = NAMESPACE_LEVEL (scope)->namespaces;\n-       inner; inner = TREE_CHAIN (inner))\n-    if (DECL_NAMESPACE_INLINE_P (inner))\n-      found |= search_usings (inner);\n+  if (vec<tree, va_gc> *inlinees = DECL_NAMESPACE_INLINEES (scope))\n+    for (unsigned ix = inlinees->length (); ix--;)\n+      found |= search_usings ((*inlinees)[ix]);\n \n   if (found)\n     mark_found (scope);\n@@ -580,10 +578,9 @@ name_lookup::queue_namespace (using_queue *queue, int depth, tree scope)\n   vec_safe_push (queue, using_pair (common, scope));\n \n   /* Queue its inline children.  */\n-  for (tree inner = NAMESPACE_LEVEL (scope)->namespaces;\n-       inner; inner = TREE_CHAIN (inner))\n-    if (DECL_NAMESPACE_INLINE_P (inner))\n-      queue = queue_namespace (queue, depth, inner);\n+  if (vec<tree, va_gc> *inlinees = DECL_NAMESPACE_INLINEES (scope))\n+    for (unsigned ix = inlinees->length (); ix--;)\n+      queue = queue_namespace (queue, depth, (*inlinees)[ix]);\n \n   /* Queue its using targets.  */\n   queue = queue_usings (queue, depth, DECL_NAMESPACE_USING (scope));\n@@ -594,10 +591,11 @@ name_lookup::queue_namespace (using_queue *queue, int depth, tree scope)\n /* Add the namespaces in USINGS to the unqualified search queue.  */\n \n name_lookup::using_queue *\n-name_lookup::do_queue_usings (using_queue *queue, int depth, tree usings)\n+name_lookup::do_queue_usings (using_queue *queue, int depth,\n+\t\t\t      vec<tree, va_gc> *usings)\n {\n-  for (; usings; usings = TREE_CHAIN (usings))\n-    queue = queue_namespace (queue, depth, TREE_PURPOSE (usings));\n+  for (unsigned ix = usings->length (); ix--;)\n+    queue = queue_namespace (queue, depth, (*usings)[ix]);\n \n   return queue;\n }\n@@ -686,10 +684,9 @@ name_lookup::adl_namespace_only (tree scope)\n   mark_seen (scope);\n \n   /* Look down into inline namespaces.  */\n-  for (tree inner = NAMESPACE_LEVEL (scope)->namespaces;\n-       inner; inner = TREE_CHAIN (inner))\n-    if (DECL_NAMESPACE_INLINE_P (inner))\n-      adl_namespace_only (inner);\n+  if (vec<tree, va_gc> *inlinees = DECL_NAMESPACE_INLINEES (scope))\n+    for (unsigned ix = inlinees->length (); ix--;)\n+      adl_namespace_only ((*inlinees)[ix]);\n \n   if (cxx_binding *binding = find_namespace_binding (scope, name))\n     add_fns (ovl_skip_hidden (binding->value));\n@@ -5962,13 +5959,14 @@ do_pop_nested_namespace (tree ns)\n    the unqualified search.  */\n \n static void\n-add_using_namespace (tree &usings, tree target)\n+add_using_namespace (vec<tree, va_gc> *&usings, tree target)\n {\n-  for (tree probe = usings; probe; probe = TREE_CHAIN (probe))\n-    if (target == TREE_PURPOSE (probe))\n-      return;\n+  if (usings)\n+    for (unsigned ix = usings->length (); ix--;)\n+      if ((*usings)[ix] == target)\n+\treturn;\n \n-  usings = tree_cons (target, NULL_TREE, usings);\n+  vec_safe_push (usings, target);\n }\n \n /* Tell the debug system of a using directive.  */\n@@ -6142,8 +6140,14 @@ push_namespace (tree name, bool make_inline)\n \t  else if (TREE_PUBLIC (current_namespace))\n \t    TREE_PUBLIC (ns) = 1;\n \n+\t  if (name == anon_identifier || make_inline)\n+\t    emit_debug_info_using_namespace (current_namespace, ns);\n+\n \t  if (make_inline)\n-\t    DECL_NAMESPACE_INLINE_P (ns) = true;\n+\t    {\n+\t      DECL_NAMESPACE_INLINE_P (ns) = true;\n+\t      vec_safe_push (DECL_NAMESPACE_INLINEES (current_namespace), ns);\n+\t    }\n \t}\n     }\n \n@@ -6171,10 +6175,14 @@ push_namespace (tree name, bool make_inline)\n void\n pop_namespace (void)\n {\n+  bool subtime = timevar_cond_start (TV_NAME_LOOKUP);\n+\n   gcc_assert (current_namespace != global_namespace);\n   current_namespace = CP_DECL_CONTEXT (current_namespace);\n   /* The binding level is not popped, as it might be re-opened later.  */\n   leave_scope ();\n+\n+  timevar_cond_stop (TV_NAME_LOOKUP, subtime);\n }\n \n /* External entry points for do_{push_to/pop_from}_top_level.  */"}, {"sha": "96e7128033fc677dede6b1f82833044688ac2786", "filename": "gcc/cp/name-lookup.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c9feefc8d6372d0e24070b53b40c2a36026e798/gcc%2Fcp%2Fname-lookup.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c9feefc8d6372d0e24070b53b40c2a36026e798/gcc%2Fcp%2Fname-lookup.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.h?ref=3c9feefc8d6372d0e24070b53b40c2a36026e798", "patch": "@@ -194,9 +194,9 @@ struct GTY(()) cp_binding_level {\n   /* A list of USING_DECL nodes.  */\n   tree usings;\n \n-  /* A list of used namespaces. PURPOSE is the namespace,\n-      VALUE the common ancestor with this binding_level's namespace.  */\n-  tree using_directives;\n+\n+  /* Using directives.  */\n+  vec<tree, va_gc> *using_directives;\n \n   /* For the binding level corresponding to a class, the entities\n       declared in the class or its base classes.  */"}, {"sha": "14344b8d33fd8a16b0cc497967793ddf033528b5", "filename": "libcc1/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c9feefc8d6372d0e24070b53b40c2a36026e798/libcc1%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c9feefc8d6372d0e24070b53b40c2a36026e798/libcc1%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2FChangeLog?ref=3c9feefc8d6372d0e24070b53b40c2a36026e798", "patch": "@@ -1,5 +1,7 @@\n 2017-05-26  Nathan Sidwell  <nathan@acm.org>\n \n+\t* libcp1plugin.cc (plugin_make_namespace_inline): Push onto linees.\n+\n \t* libcp1plugin.cc (plugin_add_using_namespace): Call\n \tfinish_namespace_using_directive.\n "}, {"sha": "a96ffc0347ebb7409dc3712750d1c3906e7bec3f", "filename": "libcc1/libcp1plugin.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c9feefc8d6372d0e24070b53b40c2a36026e798/libcc1%2Flibcp1plugin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c9feefc8d6372d0e24070b53b40c2a36026e798/libcc1%2Flibcp1plugin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2Flibcp1plugin.cc?ref=3c9feefc8d6372d0e24070b53b40c2a36026e798", "patch": "@@ -934,6 +934,7 @@ plugin_make_namespace_inline (cc1_plugin::connection *)\n     return 0;\n \n   DECL_NAMESPACE_INLINE_P (inline_ns) = true;\n+  vec_safe_push (DECL_NAMESPACE_INLINEES (parent_ns), inline_ns);\n \n   return 1;\n }"}]}