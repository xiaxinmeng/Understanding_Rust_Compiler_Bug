{"sha": "9cb114fd5550eb02dfd6b8db5cb5b8fb72827d53", "node_id": "C_kwDOANBUbNoAKDljYjExNGZkNTU1MGViMDJkZmQ2YjhkYjVjYjViOGZiNzI4MjdkNTM", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-10-19T18:09:51Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-10-21T13:28:23Z"}, "message": "Split --param=evrp-mode into evrp-mode and ranger-debug.\n\nWith Ranger being used in more than EVRP, the debug output should no longer\nbe tied up with the EVRP mode flag.\n\n\t* doc/invoke.texi (ranger-debug): Document.\n\t* flag-types.h (enum ranger_debug): New.\n\t(enum evrp_mode): Remove debug values.\n\t* gimple-range-cache.cc (DEBUG_RANGE_CACHE): Use new debug flag.\n\t* gimple-range-gori.cc (gori_compute::gori_compute): Ditto.\n\t* gimple-range.cc (gimple_ranger::gimple_ranger): Ditto.\n\t* gimple-ssa-evrp.c (hybrid_folder::choose_value): Ditto.\n\t(execute_early_vrp): Use evrp-mode directly.\n\t* params.opt (enum evrp_mode): Remove debug values.\n\t(ranger-debug): New.\n\t(ranger-logical-depth): Relocate to be in alphabetical order.", "tree": {"sha": "ded987d67c37643b269ff48816f835a30fba7822", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ded987d67c37643b269ff48816f835a30fba7822"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9cb114fd5550eb02dfd6b8db5cb5b8fb72827d53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cb114fd5550eb02dfd6b8db5cb5b8fb72827d53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cb114fd5550eb02dfd6b8db5cb5b8fb72827d53", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cb114fd5550eb02dfd6b8db5cb5b8fb72827d53/comments", "author": null, "committer": null, "parents": [{"sha": "bd400db6d3ec167142ace352db00f84d382e33a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd400db6d3ec167142ace352db00f84d382e33a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd400db6d3ec167142ace352db00f84d382e33a8"}], "stats": {"total": 93, "additions": 56, "deletions": 37}, "files": [{"sha": "c66a25fcd692e67196394fd4535771c8af19f96c", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cb114fd5550eb02dfd6b8db5cb5b8fb72827d53/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cb114fd5550eb02dfd6b8db5cb5b8fb72827d53/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=9cb114fd5550eb02dfd6b8db5cb5b8fb72827d53", "patch": "@@ -14510,6 +14510,9 @@ Specifies the mode VRP pass 1 should operate in.\n @item vrp2-mode\n Specifies the mode VRP pass 2 should operate in.\n \n+@item ranger-debug\n+Specifies the type of debug output to be issued for ranges.\n+\n @item evrp-switch-limit\n Specifies the maximum number of switch cases before EVRP ignores a switch.\n "}, {"sha": "a5a637160d72104cd81f6130d485ce652a1dd362", "filename": "gcc/flag-types.h", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cb114fd5550eb02dfd6b8db5cb5b8fb72827d53/gcc%2Fflag-types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cb114fd5550eb02dfd6b8db5cb5b8fb72827d53/gcc%2Fflag-types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflag-types.h?ref=9cb114fd5550eb02dfd6b8db5cb5b8fb72827d53", "patch": "@@ -449,18 +449,24 @@ enum parloops_schedule_type\n   PARLOOPS_SCHEDULE_RUNTIME\n };\n \n+/* Ranger debug mode.  */\n+enum ranger_debug\n+{\n+  RANGER_DEBUG_NONE = 0,\n+  RANGER_DEBUG_TRACE = 1,\n+  RANGER_DEBUG_CACHE = (2 | RANGER_DEBUG_TRACE),\n+  RANGER_DEBUG_GORI = 4,\n+  RANGER_DEBUG_TRACE_GORI = (RANGER_DEBUG_TRACE | RANGER_DEBUG_GORI),\n+  RANGER_DEBUG_ALL = (RANGER_DEBUG_GORI | RANGER_DEBUG_CACHE)\n+};\n+\n /* EVRP mode.  */\n enum evrp_mode\n {\n-  EVRP_MODE_RVRP_ONLY = 0,\n-  EVRP_MODE_EVRP_ONLY = 1,\n-  EVRP_MODE_EVRP_FIRST = 2,\n-  EVRP_MODE_RVRP_FIRST = 3,\n-  EVRP_MODE_TRACE = 4,\n-  EVRP_MODE_CACHE = (8 | EVRP_MODE_TRACE),\n-  EVRP_MODE_GORI = 16,\n-  EVRP_MODE_TRACE_GORI = (EVRP_MODE_TRACE | EVRP_MODE_GORI),\n-  EVRP_MODE_DEBUG = (EVRP_MODE_GORI | EVRP_MODE_CACHE)\n+  EVRP_MODE_RVRP_ONLY,\n+  EVRP_MODE_EVRP_ONLY,\n+  EVRP_MODE_EVRP_FIRST,\n+  EVRP_MODE_RVRP_FIRST\n };\n \n /* VRP modes.  */"}, {"sha": "05010cf15bcc4d6d65f36c9424a41e473b7beb1d", "filename": "gcc/gimple-range-cache.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cb114fd5550eb02dfd6b8db5cb5b8fb72827d53/gcc%2Fgimple-range-cache.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cb114fd5550eb02dfd6b8db5cb5b8fb72827d53/gcc%2Fgimple-range-cache.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-cache.cc?ref=9cb114fd5550eb02dfd6b8db5cb5b8fb72827d53", "patch": "@@ -30,8 +30,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple-range.h\"\n #include \"tree-cfg.h\"\n \n-#define DEBUG_RANGE_CACHE (dump_file && (param_evrp_mode & EVRP_MODE_CACHE) \\\n-\t\t\t\t\t == EVRP_MODE_CACHE)\n+#define DEBUG_RANGE_CACHE (dump_file\t\t\t\t\t\\\n+\t\t\t   && (param_ranger_debug & RANGER_DEBUG_CACHE))\n \n // During contructor, allocate the vector of ssa_names.\n "}, {"sha": "4e45c59387105276e1375625af647caabaf5375f", "filename": "gcc/gimple-range-gori.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cb114fd5550eb02dfd6b8db5cb5b8fb72827d53/gcc%2Fgimple-range-gori.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cb114fd5550eb02dfd6b8db5cb5b8fb72827d53/gcc%2Fgimple-range-gori.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-gori.cc?ref=9cb114fd5550eb02dfd6b8db5cb5b8fb72827d53", "patch": "@@ -644,7 +644,7 @@ gori_compute::gori_compute (int not_executable_flag)\n   // Create a boolean_type true and false range.\n   m_bool_zero = int_range<2> (boolean_false_node, boolean_false_node);\n   m_bool_one = int_range<2> (boolean_true_node, boolean_true_node);\n-  if (dump_file && (param_evrp_mode & EVRP_MODE_GORI))\n+  if (dump_file && (param_ranger_debug & RANGER_DEBUG_GORI))\n     tracer.enable_trace ();\n }\n "}, {"sha": "69cde911c4908245d06b663a6f5118be31b077f0", "filename": "gcc/gimple-range.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cb114fd5550eb02dfd6b8db5cb5b8fb72827d53/gcc%2Fgimple-range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cb114fd5550eb02dfd6b8db5cb5b8fb72827d53/gcc%2Fgimple-range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range.cc?ref=9cb114fd5550eb02dfd6b8db5cb5b8fb72827d53", "patch": "@@ -42,7 +42,7 @@ gimple_ranger::gimple_ranger () :\n {\n   // If the cache has a relation oracle, use it.\n   m_oracle = m_cache.oracle ();\n-  if (dump_file && (param_evrp_mode & EVRP_MODE_TRACE))\n+  if (dump_file && (param_ranger_debug & RANGER_DEBUG_TRACE))\n     tracer.enable_trace ();\n \n   // Ensure the not_executable flag is clear everywhere."}, {"sha": "c3f84050c9e05fd63c52ed31ccef78fc607ce0e5", "filename": "gcc/gimple-ssa-evrp.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cb114fd5550eb02dfd6b8db5cb5b8fb72827d53/gcc%2Fgimple-ssa-evrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cb114fd5550eb02dfd6b8db5cb5b8fb72827d53/gcc%2Fgimple-ssa-evrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-evrp.c?ref=9cb114fd5550eb02dfd6b8db5cb5b8fb72827d53", "patch": "@@ -300,7 +300,7 @@ hybrid_folder::choose_value (tree evrp_val, tree ranger_val)\n     return evrp_val;\n \n   // If values are different, return the first calculated value.\n-  if ((param_evrp_mode & EVRP_MODE_RVRP_FIRST) == EVRP_MODE_RVRP_FIRST)\n+  if (param_evrp_mode == EVRP_MODE_RVRP_FIRST)\n     return ranger_val;\n   return evrp_val;\n }\n@@ -312,7 +312,7 @@ hybrid_folder::choose_value (tree evrp_val, tree ranger_val)\n static unsigned int\n execute_early_vrp ()\n {\n-  if ((param_evrp_mode & EVRP_MODE_RVRP_FIRST) == EVRP_MODE_RVRP_ONLY)\n+  if (param_evrp_mode == EVRP_MODE_RVRP_ONLY)\n     return execute_ranger_vrp (cfun, false);\n \n   /* Ideally this setup code would move into the ctor for the folder\n@@ -325,7 +325,7 @@ execute_early_vrp ()\n   calculate_dominance_info (CDI_DOMINATORS);\n \n   // Only the last 2 bits matter for choosing the folder.\n-  switch (param_evrp_mode & EVRP_MODE_RVRP_FIRST)\n+  switch (param_evrp_mode)\n     {\n     case EVRP_MODE_EVRP_ONLY:\n       {"}, {"sha": "393d52bc66031cc2aafd2e6c49895d6c5719c3fb", "filename": "gcc/params.opt", "status": "modified", "additions": 31, "deletions": 21, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cb114fd5550eb02dfd6b8db5cb5b8fb72827d53/gcc%2Fparams.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cb114fd5550eb02dfd6b8db5cb5b8fb72827d53/gcc%2Fparams.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.opt?ref=9cb114fd5550eb02dfd6b8db5cb5b8fb72827d53", "patch": "@@ -136,7 +136,7 @@ Maximum number of outgoing edges in a switch before EVRP will not process it.\n \n -param=evrp-mode=\n Common Joined Var(param_evrp_mode) Enum(evrp_mode) Init(EVRP_MODE_RVRP_ONLY) Param Optimization\n---param=evrp-mode=[legacy|ranger|legacy-first|ranger-first|trace|gori|cache|tracegori|debug] Specifies the mode Early VRP should operate in.\n+--param=evrp-mode=[legacy|ranger|legacy-first|ranger-first] Specifies the mode Early VRP should operate in.\n \n Enum\n Name(evrp_mode) Type(enum evrp_mode) UnknownError(unknown evrp mode %qs)\n@@ -153,26 +153,6 @@ Enum(evrp_mode) String(legacy-first) Value(EVRP_MODE_EVRP_FIRST)\n EnumValue\n Enum(evrp_mode) String(ranger-first) Value(EVRP_MODE_RVRP_FIRST)\n \n-EnumValue\n-Enum(evrp_mode) String(trace) Value(EVRP_MODE_TRACE)\n-\n-EnumValue\n-Enum(evrp_mode) String(cache) Value(EVRP_MODE_CACHE)\n-\n-EnumValue\n-Enum(evrp_mode) String(gori) Value(EVRP_MODE_GORI)\n-\n-EnumValue\n-Enum(evrp_mode) String(tracegori) Value(EVRP_MODE_TRACE_GORI)\n-\n-EnumValue\n-Enum(evrp_mode) String(debug) Value(EVRP_MODE_DEBUG)\n-\n--param=ranger-logical-depth=\n-Common Joined UInteger Var(param_ranger_logical_depth) Init(6) IntegerRange(1, 999) Param Optimization\n-Maximum depth of logical expression evaluation ranger will look through when\n-evaluating outgoing edge ranges.\n-\n -param=fsm-scale-path-blocks=\n Common Joined UInteger Var(param_fsm_scale_path_blocks) Init(3) IntegerRange(1, 10) Param Optimization\n Scale factor to apply to the number of blocks in a threading path when comparing to the number of (scaled) statements.\n@@ -893,6 +873,36 @@ The minimum constant stride beyond which we should use prefetch hints for.\n Common Joined UInteger Var(param_profile_func_internal_id) IntegerRange(0, 1) Param\n Use internal function id in profile lookup.\n \n+-param=ranger-debug=\n+Common Joined Var(param_ranger_debug) Enum(ranger_debug) Init(RANGER_DEBUG_NONE) Param Optimization\n+--param=ranger-debug=[none|trace|gori|cache|tracegori|all] Specifies the output mode for debugging ranger.\n+\n+Enum\n+Name(ranger_debug) Type(enum ranger_debug) UnknownError(unknown ranger debug mode %qs)\n+\n+EnumValue\n+Enum(ranger_debug) String(none) Value(RANGER_DEBUG_NONE)\n+\n+EnumValue\n+Enum(ranger_debug) String(trace) Value(RANGER_DEBUG_TRACE)\n+\n+EnumValue\n+Enum(ranger_debug) String(cache) Value(RANGER_DEBUG_CACHE)\n+\n+EnumValue\n+Enum(ranger_debug) String(gori) Value(RANGER_DEBUG_GORI)\n+\n+EnumValue\n+Enum(ranger_debug) String(tracegori) Value(RANGER_DEBUG_TRACE_GORI)\n+\n+EnumValue\n+Enum(ranger_debug) String(all) Value(RANGER_DEBUG_ALL)\n+\n+-param=ranger-logical-depth=\n+Common Joined UInteger Var(param_ranger_logical_depth) Init(6) IntegerRange(1, 999) Param Optimization\n+Maximum depth of logical expression evaluation ranger will look through when\n+evaluating outgoing edge ranges.\n+\n -param=rpo-vn-max-loop-depth=\n Common Joined UInteger Var(param_rpo_vn_max_loop_depth) Init(7) IntegerRange(2, 65536) Param Optimization\n Maximum depth of a loop nest to fully value-number optimistically."}]}