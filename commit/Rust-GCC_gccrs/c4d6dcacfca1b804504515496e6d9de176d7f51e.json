{"sha": "c4d6dcacfca1b804504515496e6d9de176d7f51e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzRkNmRjYWNmY2ExYjgwNDUwNDUxNTQ5NmU2ZDlkZTE3NmQ3ZjUxZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-09-01T20:33:06Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-09-01T20:33:06Z"}, "message": "libcpp: Implement C++23 P1949R7 - C++ Identifier Syntax using Unicode Standard Annex 31\n\nThe following patch implements the\nP1949R7 - C++ Identifier Syntax using Unicode Standard Annex 31\npaper.  We already allow UTF-8 characters in the source, so that part\nis already implemented, so IMHO all we need to do is pedwarn instead of\njust warn for the (default) -Wnormalize=nfc (or for -Wnormalize={id,nkfc})\nif the character is not in NFC and to use the unicode XID_Start and\nXID_Continue derived code properties to find out what characters are allowed\n(the standard actually adds U+005F to XID_Start, but we are handling the\nASCII compatible characters differently already and they aren't allowed\nin UCNs in identifiers).  Instead of hardcoding the large tables\nin ucnid.tab, this patch makes makeucnid.c read them from the Unicode\ntables (13.0.0 version at this point).\n\nFor non-pedantic mode, we accept as 2nd+ char in identifiers a union\nof valid characters in all supported modes, but for the 1st char it\nwas actually pedantically requiring that it is not any of the characters\nthat may not appear in the currently chosen standard as the first character.\nThis patch changes it such that also what is allowed at the start of an\nidentifier is a union of characters valid at the start of an identifier\nin any of the pedantic modes.\n\n2021-09-01  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/100977\nlibcpp/\n\t* include/cpplib.h (struct cpp_options): Add cxx23_identifiers.\n\t* charset.c (CXX23, NXX23): New enumerators.\n\t(CID, NFC, NKC, CTX): Renumber.\n\t(ucn_valid_in_identifier): Implement P1949R7 - use CXX23 and\n\tNXX23 flags for cxx23_identifiers.  For start character in\n\tnon-pedantic mode, allow characters that are allowed as start\n\tcharacters in any of the supported language modes, rather than\n\tdisallowing characters allowed only as non-start characters in\n\tcurrent mode but for characters from other language modes allowing\n\tthem even if they are never allowed at start.\n\t* init.c (struct lang_flags): Add cxx23_identifiers.\n\t(lang_defaults): Add cxx23_identifiers column.\n\t(cpp_set_lang): Initialize CPP_OPTION (pfile, cxx23_identifiers).\n\t* lex.c (warn_about_normalization): If cxx23_identifiers, use\n\tcpp_pedwarning_with_line instead of cpp_warning_with_line for\n\t\"is not in NFC\" diagnostics.\n\t* makeucnid.c: Adjust usage comment.\n\t(CXX23, NXX23): New enumerators.\n\t(all_languages): Add CXX23.\n\t(not_NFC, not_NFKC, maybe_not_NFC): Renumber.\n\t(read_derivedcore): New function.\n\t(write_table): Print also CXX23 and NXX23 columns.\n\t(main): Require 5 arguments instead of 4, call read_derivedcore.\n\t* ucnid.h: Regenerated using Unicode 13.0.0 files.\ngcc/testsuite/\n\t* g++.dg/cpp23/normalize1.C: New test.\n\t* g++.dg/cpp23/normalize2.C: New test.\n\t* g++.dg/cpp23/normalize3.C: New test.\n\t* g++.dg/cpp23/normalize4.C: New test.\n\t* g++.dg/cpp23/normalize5.C: New test.\n\t* g++.dg/cpp23/normalize6.C: New test.\n\t* g++.dg/cpp23/normalize7.C: New test.\n\t* g++.dg/cpp23/ucnid-1-utf8.C: New test.\n\t* g++.dg/cpp23/ucnid-2-utf8.C: New test.\n\t* gcc.dg/cpp/ucnid-4.c: Don't expect\n\t\"not valid at the start of an identifier\" errors.\n\t* gcc.dg/cpp/ucnid-4-utf8.c: Likewise.\n\t* gcc.dg/cpp/ucnid-5-utf8.c: New test.", "tree": {"sha": "712611d7a176373d8b0299a25eaf0a7f4e542bce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/712611d7a176373d8b0299a25eaf0a7f4e542bce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4d6dcacfca1b804504515496e6d9de176d7f51e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4d6dcacfca1b804504515496e6d9de176d7f51e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4d6dcacfca1b804504515496e6d9de176d7f51e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4d6dcacfca1b804504515496e6d9de176d7f51e/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "852fdc23a20d07087b5908b57ae7725f435732d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/852fdc23a20d07087b5908b57ae7725f435732d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/852fdc23a20d07087b5908b57ae7725f435732d5"}], "stats": {"total": 5021, "additions": 3221, "deletions": 1800}, "files": [{"sha": "8357ed398fa2cc490bfd5b05f6f849c6d121349d", "filename": "gcc/testsuite/g++.dg/cpp23/normalize1.C", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d6dcacfca1b804504515496e6d9de176d7f51e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fnormalize1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d6dcacfca1b804504515496e6d9de176d7f51e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fnormalize1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fnormalize1.C?ref=c4d6dcacfca1b804504515496e6d9de176d7f51e", "patch": "@@ -0,0 +1,66 @@\n+// { dg-do preprocess { target { c++11 && { ! c++23 } } } }\n+// { dg-options \"\" }\n+\n+\\u00AA\n+\\u00B7\n+\\u0F43  // { dg-warning \"not in NFC\" }\n+a\\u05B8\\u05B9\\u05B9\\u05BBb\n+ a\\u05BB\\u05B9\\u05B8\\u05B9b  // { dg-warning \"not in NFC\" }\n+\\u09CB\n+\\u09C7\\u09BE // { dg-warning \"not in NFC\" }\n+\\u0B4B\n+\\u0B47\\u0B3E // { dg-warning \"not in NFC\" }\n+\\u0BCA\n+\\u0BC6\\u0BBE // { dg-warning \"not in NFC\" }\n+\\u0BCB\n+\\u0BC7\\u0BBE // { dg-warning \"not in NFC\" }\n+\\u0CCA\n+\\u0CC6\\u0CC2 // { dg-warning \"not in NFC\" }\n+\\u0D4A\n+\\u0D46\\u0D3E // { dg-warning \"not in NFC\" }\n+\\u0D4B\n+\\u0D47\\u0D3E // { dg-warning \"not in NFC\" }\n+\n+K\n+\\u212A // { dg-warning \"not in NFC\" }\n+\n+\\u03AC\n+\\u1F71 // { dg-warning \"not in NFC\" }\n+\n+\\uAC00\n+\\u1100\\u1161 // { dg-warning \"not in NFC\" }\n+\\uAC01\n+\\u1100\\u1161\\u11A8 // { dg-warning \"not in NFC\" }\n+\\uAC00\\u11A8 // { dg-warning \"not in NFC\" }\n+\n+\u00aa\n+\u00b7\n+\u0f43  // { dg-warning \"not in NFC\" }\n+a\u05b8\u05b9\u05b9\u05bbb\n+ a\u05bb\u05b9\u05b8\u05b9b  // { dg-warning \"not in NFC\" }\n+\u09cb\n+\u09c7\u09be // { dg-warning \"not in NFC\" }\n+\u0b4b\n+\u0b47\u0b3e // { dg-warning \"not in NFC\" }\n+\u0bca\n+\u0bc6\u0bbe // { dg-warning \"not in NFC\" }\n+\u0bcb\n+\u0bc7\u0bbe // { dg-warning \"not in NFC\" }\n+\u0cca\n+\u0cc6\u0cc2 // { dg-warning \"not in NFC\" }\n+\u0d4a\n+\u0d46\u0d3e // { dg-warning \"not in NFC\" }\n+\u0d4b\n+\u0d47\u0d3e // { dg-warning \"not in NFC\" }\n+\n+K\n+\u212a // { dg-warning \"not in NFC\" }\n+\n+\u03ac\n+\u1f71 // { dg-warning \"not in NFC\" }\n+\n+\uac00\n+\u1100\u1161 // { dg-warning \"not in NFC\" }\n+\uac01\n+\u1100\u1161\u11a8 // { dg-warning \"not in NFC\" }\n+\uac00\u11a8 // { dg-warning \"not in NFC\" }"}, {"sha": "ad14e64863ddec63968baeb2dc70f1adbe2ee40f", "filename": "gcc/testsuite/g++.dg/cpp23/normalize2.C", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d6dcacfca1b804504515496e6d9de176d7f51e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fnormalize2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d6dcacfca1b804504515496e6d9de176d7f51e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fnormalize2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fnormalize2.C?ref=c4d6dcacfca1b804504515496e6d9de176d7f51e", "patch": "@@ -0,0 +1,66 @@\n+// { dg-do preprocess { target { c++23 } } }\n+// { dg-options \"\" }\n+\n+\\u00AA\n+\\u00B7\n+\\u0F43  // { dg-warning \"not in NFC\" }\n+a\\u05B8\\u05B9\\u05B9\\u05BBb\n+ a\\u05BB\\u05B9\\u05B8\\u05B9b  // { dg-warning \"not in NFC\" }\n+\\u09CB\n+\\u09C7\\u09BE // { dg-warning \"not in NFC\" }\n+\\u0B4B\n+\\u0B47\\u0B3E // { dg-warning \"not in NFC\" }\n+\\u0BCA\n+\\u0BC6\\u0BBE // { dg-warning \"not in NFC\" }\n+\\u0BCB\n+\\u0BC7\\u0BBE // { dg-warning \"not in NFC\" }\n+\\u0CCA\n+\\u0CC6\\u0CC2 // { dg-warning \"not in NFC\" }\n+\\u0D4A\n+\\u0D46\\u0D3E // { dg-warning \"not in NFC\" }\n+\\u0D4B\n+\\u0D47\\u0D3E // { dg-warning \"not in NFC\" }\n+\n+K\n+\\u212A // { dg-warning \"not in NFC\" }\n+\n+\\u03AC\n+\\u1F71 // { dg-warning \"not in NFC\" }\n+\n+\\uAC00\n+\\u1100\\u1161 // { dg-warning \"not in NFC\" }\n+\\uAC01\n+\\u1100\\u1161\\u11A8 // { dg-warning \"not in NFC\" }\n+\\uAC00\\u11A8 // { dg-warning \"not in NFC\" }\n+\n+\u00aa\n+\u00b7\n+\u0f43  // { dg-warning \"not in NFC\" }\n+a\u05b8\u05b9\u05b9\u05bbb\n+ a\u05bb\u05b9\u05b8\u05b9b  // { dg-warning \"not in NFC\" }\n+\u09cb\n+\u09c7\u09be // { dg-warning \"not in NFC\" }\n+\u0b4b\n+\u0b47\u0b3e // { dg-warning \"not in NFC\" }\n+\u0bca\n+\u0bc6\u0bbe // { dg-warning \"not in NFC\" }\n+\u0bcb\n+\u0bc7\u0bbe // { dg-warning \"not in NFC\" }\n+\u0cca\n+\u0cc6\u0cc2 // { dg-warning \"not in NFC\" }\n+\u0d4a\n+\u0d46\u0d3e // { dg-warning \"not in NFC\" }\n+\u0d4b\n+\u0d47\u0d3e // { dg-warning \"not in NFC\" }\n+\n+K\n+\u212a // { dg-warning \"not in NFC\" }\n+\n+\u03ac\n+\u1f71 // { dg-warning \"not in NFC\" }\n+\n+\uac00\n+\u1100\u1161 // { dg-warning \"not in NFC\" }\n+\uac01\n+\u1100\u1161\u11a8 // { dg-warning \"not in NFC\" }\n+\uac00\u11a8 // { dg-warning \"not in NFC\" }"}, {"sha": "bf4bb3a1e828733b8231ffae48819e83fa858c16", "filename": "gcc/testsuite/g++.dg/cpp23/normalize3.C", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d6dcacfca1b804504515496e6d9de176d7f51e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fnormalize3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d6dcacfca1b804504515496e6d9de176d7f51e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fnormalize3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fnormalize3.C?ref=c4d6dcacfca1b804504515496e6d9de176d7f51e", "patch": "@@ -0,0 +1,80 @@\n+// { dg-do preprocess { target { c++23 } } }\n+// { dg-options \"-pedantic-errors\" }\n+\n+\\u00AA\n+\\u00B7\t// { dg-error \"is not valid at the start of an identifier\" }\n+\\u0F43  // { dg-error \"not in NFC\" }\n+a\\u05B8\\u05B9\\u05B9\\u05BBb\n+ a\\u05BB\\u05B9\\u05B8\\u05B9b  // { dg-error \"not in NFC\" }\n+\\u09CB\t// { dg-error \"is not valid at the start of an identifier\" }\n+\\u09C7\\u09BE // { dg-error \"not in NFC\" }\n+\t// { dg-error \"is not valid at the start of an identifier\" \"\" { target *-*-* } .-1 }\n+\\u0B4B\t// { dg-error \"is not valid at the start of an identifier\" }\n+\\u0B47\\u0B3E // { dg-error \"not in NFC\" }\n+\t// { dg-error \"is not valid at the start of an identifier\" \"\" { target *-*-* } .-1 }\n+\\u0BCA\t// { dg-error \"is not valid at the start of an identifier\" }\n+\\u0BC6\\u0BBE // { dg-error \"not in NFC\" }\n+\t// { dg-error \"is not valid at the start of an identifier\" \"\" { target *-*-* } .-1 }\n+\\u0BCB\t// { dg-error \"is not valid at the start of an identifier\" }\n+\\u0BC7\\u0BBE // { dg-error \"not in NFC\" }\n+\t// { dg-error \"is not valid at the start of an identifier\" \"\" { target *-*-* } .-1 }\n+\\u0CCA\t// { dg-error \"is not valid at the start of an identifier\" }\n+\\u0CC6\\u0CC2 // { dg-error \"not in NFC\" }\n+\t// { dg-error \"is not valid at the start of an identifier\" \"\" { target *-*-* } .-1 }\n+\\u0D4A\t// { dg-error \"is not valid at the start of an identifier\" }\n+\\u0D46\\u0D3E // { dg-error \"not in NFC\" }\n+\t// { dg-error \"is not valid at the start of an identifier\" \"\" { target *-*-* } .-1 }\n+\\u0D4B\t// { dg-error \"is not valid at the start of an identifier\" }\n+\\u0D47\\u0D3E // { dg-error \"not in NFC\" }\n+\t// { dg-error \"is not valid at the start of an identifier\" \"\" { target *-*-* } .-1 }\n+\n+K\n+\\u212A // { dg-error \"not in NFC\" }\n+\n+\\u03AC\n+\\u1F71 // { dg-error \"not in NFC\" }\n+\n+\\uAC00\n+\\u1100\\u1161 // { dg-error \"not in NFC\" }\n+\\uAC01\n+\\u1100\\u1161\\u11A8 // { dg-error \"not in NFC\" }\n+\\uAC00\\u11A8 // { dg-error \"not in NFC\" }\n+\n+\u00aa\n+\u00b7\t// { dg-error \"is not valid at the start of an identifier\" }\n+\u0f43  // { dg-error \"not in NFC\" }\n+a\u05b8\u05b9\u05b9\u05bbb\n+ a\u05bb\u05b9\u05b8\u05b9b  // { dg-error \"not in NFC\" }\n+\u09cb\t// { dg-error \"is not valid at the start of an identifier\" }\n+\u09c7\u09be // { dg-error \"not in NFC\" }\n+\t// { dg-error \"is not valid at the start of an identifier\" \"\" { target *-*-* } .-1 }\n+\u0b4b\t// { dg-error \"is not valid at the start of an identifier\" }\n+\u0b47\u0b3e // { dg-error \"not in NFC\" }\n+\t// { dg-error \"is not valid at the start of an identifier\" \"\" { target *-*-* } .-1 }\n+\u0bca\t// { dg-error \"is not valid at the start of an identifier\" }\n+\u0bc6\u0bbe // { dg-error \"not in NFC\" }\n+\t// { dg-error \"is not valid at the start of an identifier\" \"\" { target *-*-* } .-1 }\n+\u0bcb\t// { dg-error \"is not valid at the start of an identifier\" }\n+\u0bc7\u0bbe // { dg-error \"not in NFC\" }\n+\t// { dg-error \"is not valid at the start of an identifier\" \"\" { target *-*-* } .-1 }\n+\u0cca\t// { dg-error \"is not valid at the start of an identifier\" }\n+\u0cc6\u0cc2 // { dg-error \"not in NFC\" }\n+\t// { dg-error \"is not valid at the start of an identifier\" \"\" { target *-*-* } .-1 }\n+\u0d4a\t// { dg-error \"is not valid at the start of an identifier\" }\n+\u0d46\u0d3e // { dg-error \"not in NFC\" }\n+\t// { dg-error \"is not valid at the start of an identifier\" \"\" { target *-*-* } .-1 }\n+\u0d4b\t// { dg-error \"is not valid at the start of an identifier\" }\n+\u0d47\u0d3e // { dg-error \"not in NFC\" }\n+\t// { dg-error \"is not valid at the start of an identifier\" \"\" { target *-*-* } .-1 }\n+\n+K\n+\u212a // { dg-error \"not in NFC\" }\n+\n+\u03ac\n+\u1f71 // { dg-error \"not in NFC\" }\n+\n+\uac00\n+\u1100\u1161 // { dg-error \"not in NFC\" }\n+\uac01\n+\u1100\u1161\u11a8 // { dg-error \"not in NFC\" }\n+\uac00\u11a8 // { dg-error \"not in NFC\" }"}, {"sha": "9f83cd76e85490bb01a7491b61d0e4d266faf49a", "filename": "gcc/testsuite/g++.dg/cpp23/normalize4.C", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d6dcacfca1b804504515496e6d9de176d7f51e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fnormalize4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d6dcacfca1b804504515496e6d9de176d7f51e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fnormalize4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fnormalize4.C?ref=c4d6dcacfca1b804504515496e6d9de176d7f51e", "patch": "@@ -0,0 +1,66 @@\n+// { dg-do preprocess { target { c++23 } } }\n+// { dg-options \"\" }\n+\n+\\u00AA\n+x\\u00B7\n+\\u0F43  // { dg-warning \"not in NFC\" }\n+a\\u05B8\\u05B9\\u05B9\\u05BBb\n+ a\\u05BB\\u05B9\\u05B8\\u05B9b  // { dg-warning \"not in NFC\" }\n+x\\u09CB\n+x\\u09C7\\u09BE // { dg-warning \"not in NFC\" }\n+x\\u0B4B\n+x\\u0B47\\u0B3E // { dg-warning \"not in NFC\" }\n+x\\u0BCA\n+x\\u0BC6\\u0BBE // { dg-warning \"not in NFC\" }\n+x\\u0BCB\n+x\\u0BC7\\u0BBE // { dg-warning \"not in NFC\" }\n+x\\u0CCA\n+x\\u0CC6\\u0CC2 // { dg-warning \"not in NFC\" }\n+x\\u0D4A\n+x\\u0D46\\u0D3E // { dg-warning \"not in NFC\" }\n+x\\u0D4B\n+x\\u0D47\\u0D3E // { dg-warning \"not in NFC\" }\n+\n+K\n+\\u212A // { dg-warning \"not in NFC\" }\n+\n+\\u03AC\n+\\u1F71 // { dg-warning \"not in NFC\" }\n+\n+\\uAC00\n+\\u1100\\u1161 // { dg-warning \"not in NFC\" }\n+\\uAC01\n+\\u1100\\u1161\\u11A8 // { dg-warning \"not in NFC\" }\n+\\uAC00\\u11A8 // { dg-warning \"not in NFC\" }\n+\n+\u00aa\n+x\u00b7\n+\u0f43  // { dg-warning \"not in NFC\" }\n+a\u05b8\u05b9\u05b9\u05bbb\n+ a\u05bb\u05b9\u05b8\u05b9b  // { dg-warning \"not in NFC\" }\n+x\u09cb\n+x\u09c7\u09be // { dg-warning \"not in NFC\" }\n+x\u0b4b\n+x\u0b47\u0b3e // { dg-warning \"not in NFC\" }\n+x\u0bca\n+x\u0bc6\u0bbe // { dg-warning \"not in NFC\" }\n+x\u0bcb\n+x\u0bc7\u0bbe // { dg-warning \"not in NFC\" }\n+x\u0cca\n+x\u0cc6\u0cc2 // { dg-warning \"not in NFC\" }\n+x\u0d4a\n+x\u0d46\u0d3e // { dg-warning \"not in NFC\" }\n+x\u0d4b\n+x\u0d47\u0d3e // { dg-warning \"not in NFC\" }\n+\n+K\n+\u212a // { dg-warning \"not in NFC\" }\n+\n+\u03ac\n+\u1f71 // { dg-warning \"not in NFC\" }\n+\n+\uac00\n+\u1100\u1161 // { dg-warning \"not in NFC\" }\n+\uac01\n+\u1100\u1161\u11a8 // { dg-warning \"not in NFC\" }\n+\uac00\u11a8 // { dg-warning \"not in NFC\" }"}, {"sha": "afe339ab5fca93c528710c8640fdad4d6df163a0", "filename": "gcc/testsuite/g++.dg/cpp23/normalize5.C", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d6dcacfca1b804504515496e6d9de176d7f51e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fnormalize5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d6dcacfca1b804504515496e6d9de176d7f51e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fnormalize5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fnormalize5.C?ref=c4d6dcacfca1b804504515496e6d9de176d7f51e", "patch": "@@ -0,0 +1,66 @@\n+// { dg-do preprocess { target { c++23 } } }\n+// { dg-options \"-pedantic-errors\" }\n+\n+\\u00AA\n+x\\u00B7\n+\\u0F43  // { dg-error \"not in NFC\" }\n+a\\u05B8\\u05B9\\u05B9\\u05BBb\n+ a\\u05BB\\u05B9\\u05B8\\u05B9b  // { dg-error \"not in NFC\" }\n+x\\u09CB\n+x\\u09C7\\u09BE // { dg-error \"not in NFC\" }\n+x\\u0B4B\n+x\\u0B47\\u0B3E // { dg-error \"not in NFC\" }\n+x\\u0BCA\n+x\\u0BC6\\u0BBE // { dg-error \"not in NFC\" }\n+x\\u0BCB\n+x\\u0BC7\\u0BBE // { dg-error \"not in NFC\" }\n+x\\u0CCA\n+x\\u0CC6\\u0CC2 // { dg-error \"not in NFC\" }\n+x\\u0D4A\n+x\\u0D46\\u0D3E // { dg-error \"not in NFC\" }\n+x\\u0D4B\n+x\\u0D47\\u0D3E // { dg-error \"not in NFC\" }\n+\n+K\n+\\u212A // { dg-error \"not in NFC\" }\n+\n+\\u03AC\n+\\u1F71 // { dg-error \"not in NFC\" }\n+\n+\\uAC00\n+\\u1100\\u1161 // { dg-error \"not in NFC\" }\n+\\uAC01\n+\\u1100\\u1161\\u11A8 // { dg-error \"not in NFC\" }\n+\\uAC00\\u11A8 // { dg-error \"not in NFC\" }\n+\n+\u00aa\n+x\u00b7\n+\u0f43  // { dg-error \"not in NFC\" }\n+a\u05b8\u05b9\u05b9\u05bbb\n+ a\u05bb\u05b9\u05b8\u05b9b  // { dg-error \"not in NFC\" }\n+x\u09cb\n+x\u09c7\u09be // { dg-error \"not in NFC\" }\n+x\u0b4b\n+x\u0b47\u0b3e // { dg-error \"not in NFC\" }\n+x\u0bca\n+x\u0bc6\u0bbe // { dg-error \"not in NFC\" }\n+x\u0bcb\n+x\u0bc7\u0bbe // { dg-error \"not in NFC\" }\n+x\u0cca\n+x\u0cc6\u0cc2 // { dg-error \"not in NFC\" }\n+x\u0d4a\n+x\u0d46\u0d3e // { dg-error \"not in NFC\" }\n+x\u0d4b\n+x\u0d47\u0d3e // { dg-error \"not in NFC\" }\n+\n+K\n+\u212a // { dg-error \"not in NFC\" }\n+\n+\u03ac\n+\u1f71 // { dg-error \"not in NFC\" }\n+\n+\uac00\n+\u1100\u1161 // { dg-error \"not in NFC\" }\n+\uac01\n+\u1100\u1161\u11a8 // { dg-error \"not in NFC\" }\n+\uac00\u11a8 // { dg-error \"not in NFC\" }"}, {"sha": "4c2b141602884ad551dfff9523428a4840187295", "filename": "gcc/testsuite/g++.dg/cpp23/normalize6.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d6dcacfca1b804504515496e6d9de176d7f51e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fnormalize6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d6dcacfca1b804504515496e6d9de176d7f51e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fnormalize6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fnormalize6.C?ref=c4d6dcacfca1b804504515496e6d9de176d7f51e", "patch": "@@ -0,0 +1,10 @@\n+// P1949R7\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"\" }\n+\n+constexpr int \u00c0 = 1; // U+00C0\n+constexpr int A\u0300 = 2; // U+0041 U+0300 { dg-warning \"is not in NFC\" }\n+constexpr int gv1 = \\u00c0;\n+constexpr int gv2 = A\\u0300; // { dg-warning \"is not in NFC\" }\n+static_assert(gv1 == 1, \"\");\n+static_assert(gv2 == 2, \"\");"}, {"sha": "f639d657b393f9128456afe1810b73b37b4ddb42", "filename": "gcc/testsuite/g++.dg/cpp23/normalize7.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d6dcacfca1b804504515496e6d9de176d7f51e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fnormalize7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d6dcacfca1b804504515496e6d9de176d7f51e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fnormalize7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fnormalize7.C?ref=c4d6dcacfca1b804504515496e6d9de176d7f51e", "patch": "@@ -0,0 +1,12 @@\n+// P1949R7\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-pedantic-errors\" }\n+\n+constexpr int \u00c0 = 1; // U+00C0\n+constexpr int A\u0300 = 2; // U+0041 U+0300 { dg-warning \"is not in NFC\" \"\" { target { ! c++23 } } }\n+// { dg-error \"is not in NFC\" \"\" { target c++23 } .-1 }\n+constexpr int gv1 = \\u00c0;\n+constexpr int gv2 = A\\u0300; // { dg-warning \"is not in NFC\" \"\" { target { ! c++23 } } }\n+// { dg-error \"is not in NFC\" \"\" { target c++23 } .-1 }\n+static_assert(gv1 == 1, \"\");\n+static_assert(gv2 == 2, \"\");"}, {"sha": "61acc82be03f6c3b616f280001ed70001c52e1b7", "filename": "gcc/testsuite/g++.dg/cpp23/ucnid-1-utf8.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d6dcacfca1b804504515496e6d9de176d7f51e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fucnid-1-utf8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d6dcacfca1b804504515496e6d9de176d7f51e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fucnid-1-utf8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fucnid-1-utf8.C?ref=c4d6dcacfca1b804504515496e6d9de176d7f51e", "patch": "@@ -0,0 +1,18 @@\n+// P1949R7\n+// { dg-do compile }\n+// { dg-options \"\" }\n+\n+bool \ud83d\udc77 = true;\n+bool \ud83d\udc77\u200d\u2640 = false;\t// { dg-error \"is not valid in an identifier\" }\n+int \u23f0 = 0;\t// { dg-error \"is not valid in an identifier\" }\n+int \ud83d\udd50 = 0;\n+int \u2620 = 0;\t// { dg-error \"is not valid in an identifier\" }\n+int \ud83d\udc80 = 0;\n+int \u270b = 0;\t// { dg-error \"is not valid in an identifier\" }\n+int \ud83d\udc4a = 0;\n+int \u2708 = 0;\t// { dg-error \"is not valid in an identifier\" }\n+int \ud83d\ude80 = 0;\n+int \u2639 = 0;\t// { dg-error \"is not valid in an identifier\" }\n+int \ud83d\ude00 = 0;\n+struct E {};\n+class \ud83d\udca9 : public E {};"}, {"sha": "6c8aa6a4d242591884ee5b6d8b1cfaffb017b824", "filename": "gcc/testsuite/g++.dg/cpp23/ucnid-2-utf8.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d6dcacfca1b804504515496e6d9de176d7f51e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fucnid-2-utf8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d6dcacfca1b804504515496e6d9de176d7f51e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fucnid-2-utf8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fucnid-2-utf8.C?ref=c4d6dcacfca1b804504515496e6d9de176d7f51e", "patch": "@@ -0,0 +1,18 @@\n+// P1949R7\n+// { dg-do compile }\n+// { dg-options \"-pedantic-errors\" }\n+\n+bool \ud83d\udc77 = true;\t// { dg-error \"is not valid in an identifier\" \"\" { target { c++98_only || c++23 } } }\n+bool \ud83d\udc77\u200d\u2640 = false;\t// { dg-error \"is not valid in an identifier\" }\n+int \u23f0 = 0;\t// { dg-error \"is not valid in an identifier\" }\n+int \ud83d\udd50 = 0;\t// { dg-error \"is not valid in an identifier\" \"\" { target { c++98_only || c++23 } } }\n+int \u2620 = 0;\t// { dg-error \"is not valid in an identifier\" }\n+int \ud83d\udc80 = 0;\t// { dg-error \"is not valid in an identifier\" \"\" { target { c++98_only || c++23 } } }\n+int \u270b = 0;\t// { dg-error \"is not valid in an identifier\" }\n+int \ud83d\udc4a = 0;\t// { dg-error \"is not valid in an identifier\" \"\" { target { c++98_only || c++23 } } }\n+int \u2708 = 0;\t// { dg-error \"is not valid in an identifier\" }\n+int \ud83d\ude80 = 0;\t// { dg-error \"is not valid in an identifier\" \"\" { target { c++98_only || c++23 } } }\n+int \u2639 = 0;\t// { dg-error \"is not valid in an identifier\" }\n+int \ud83d\ude00 = 0;\t// { dg-error \"is not valid in an identifier\" \"\" { target { c++98_only || c++23 } } }\n+struct E {};\n+class \ud83d\udca9 : public E {};\t// { dg-error \"is not valid in an identifier\" \"\" { target { c++98_only || c++23 } } }"}, {"sha": "0a527efe5d94c7b192475475675c659c964341a2", "filename": "gcc/testsuite/gcc.dg/cpp/ucnid-4-utf8.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d6dcacfca1b804504515496e6d9de176d7f51e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-4-utf8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d6dcacfca1b804504515496e6d9de176d7f51e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-4-utf8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-4-utf8.c?ref=c4d6dcacfca1b804504515496e6d9de176d7f51e", "patch": "@@ -9,9 +9,9 @@\n \u00d6\n \u0384\n \n-\u0669 /* { dg-error \"not valid at the start of an identifier\" } */\n+\u0669\n A\u0669\n 0\u00ba\n 0\u0669\n-\u0e59 /* { dg-error \"not valid at the start of an identifier\" } */\n+\u0e59\n A\u0e59"}, {"sha": "dceed66c18f1a8425089298d3f78345ebd7d2dc6", "filename": "gcc/testsuite/gcc.dg/cpp/ucnid-4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d6dcacfca1b804504515496e6d9de176d7f51e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d6dcacfca1b804504515496e6d9de176d7f51e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-4.c?ref=c4d6dcacfca1b804504515496e6d9de176d7f51e", "patch": "@@ -9,9 +9,9 @@\n \\u00D6\n \\u0384\n \n-\\u0669 /* { dg-error \"not valid at the start of an identifier\" } */\n+\\u0669\n A\\u0669\n 0\\u00BA\n 0\\u0669\n-\\u0E59 /* { dg-error \"not valid at the start of an identifier\" } */\n+\\u0E59\n A\\u0E59"}, {"sha": "79767b46c5f1ebd96ee32615445be2ce5d4b1de7", "filename": "gcc/testsuite/gcc.dg/cpp/ucnid-5-utf8.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d6dcacfca1b804504515496e6d9de176d7f51e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-5-utf8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d6dcacfca1b804504515496e6d9de176d7f51e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-5-utf8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-5-utf8.c?ref=c4d6dcacfca1b804504515496e6d9de176d7f51e", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do preprocess } */\n+/* { dg-options \"-std=c99 -pedantic\" } */\n+\n+\u00aa\n+\u00ab /* not a preprocessing error because we lex it into its own token */\n+\u00b6 /* not a preprocessing error because we lex it into its own token */\n+\u00ba\n+\u00c0\n+\u00d6\n+\u0384 /* not a preprocessing error because we lex it into its own token */\n+\n+\u0669 /* { dg-error \"not valid at the start of an identifier\" } */\n+A\u0669\n+0\u00ba\n+0\u0669\n+\u0e59 /* { dg-error \"not valid at the start of an identifier\" } */\n+A\u0e59"}, {"sha": "b84a9740165d274e9ace5cacccb08e65d5195307", "filename": "libcpp/charset.c", "status": "modified", "additions": 34, "deletions": 12, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d6dcacfca1b804504515496e6d9de176d7f51e/libcpp%2Fcharset.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d6dcacfca1b804504515496e6d9de176d7f51e/libcpp%2Fcharset.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fcharset.c?ref=c4d6dcacfca1b804504515496e6d9de176d7f51e", "patch": "@@ -894,14 +894,18 @@ enum {\n   C11 = 8,\n   /* Valid in a C11/C++11 identifier, but not as the first character?  */\n   N11 = 16,\n+  /* Valid in a C++23 identifier?  */\n+  CXX23 = 32,\n+  /* Valid in a C++23 identifier, but not as the first character?  */\n+  NXX23 = 64,\n   /* NFC representation is not valid in an identifier?  */\n-  CID = 32,\n+  CID = 128,\n   /* Might be valid NFC form?  */\n-  NFC = 64,\n+  NFC = 256,\n   /* Might be valid NFKC form?  */\n-  NKC = 128,\n+  NKC = 512,\n   /* Certain preceding characters might make it not valid NFC/NKFC form?  */\n-  CTX = 256\n+  CTX = 1024\n };\n \n struct ucnrange {\n@@ -948,10 +952,12 @@ ucn_valid_in_identifier (cpp_reader *pfile, cppchar_t c,\n   /* When -pedantic, we require the character to have been listed by\n      the standard for the current language.  Otherwise, we accept the\n      union of the acceptable sets for all supported language versions.  */\n-  valid_flags = C99 | CXX | C11;\n+  valid_flags = C99 | CXX | C11 | CXX23;\n   if (CPP_PEDANTIC (pfile))\n     {\n-      if (CPP_OPTION (pfile, c11_identifiers))\n+      if (CPP_OPTION (pfile, cxx23_identifiers))\n+\tvalid_flags = CXX23;\n+      else if (CPP_OPTION (pfile, c11_identifiers))\n \tvalid_flags = C11;\n       else if (CPP_OPTION (pfile, c99))\n \tvalid_flags = C99;\n@@ -960,12 +966,6 @@ ucn_valid_in_identifier (cpp_reader *pfile, cppchar_t c,\n     }\n   if (! (ucnranges[mn].flags & valid_flags))\n       return 0;\n-  if (CPP_OPTION (pfile, c11_identifiers))\n-    invalid_start_flags = N11;\n-  else if (CPP_OPTION (pfile, c99))\n-    invalid_start_flags = N99;\n-  else\n-    invalid_start_flags = 0;\n \n   /* Update NST.  */\n   if (ucnranges[mn].combine != 0 && ucnranges[mn].combine < nst->prev_class)\n@@ -1008,6 +1008,28 @@ ucn_valid_in_identifier (cpp_reader *pfile, cppchar_t c,\n     nst->previous = c;\n   nst->prev_class = ucnranges[mn].combine;\n \n+  if (!CPP_PEDANTIC (pfile))\n+    {\n+      /* If not -pedantic, accept as character that may\n+\t begin an identifier a union of characters allowed\n+\t at that position in each of the character sets.  */\n+      if ((ucnranges[mn].flags & (C99 | N99)) == C99\n+\t  || (ucnranges[mn].flags & CXX) != 0\n+\t  || (ucnranges[mn].flags & (C11 | N11)) == C11\n+\t  || (ucnranges[mn].flags & (CXX23 | NXX23)) == CXX23)\n+\treturn 1;\n+      return 2;\n+    }\n+\n+  if (CPP_OPTION (pfile, cxx23_identifiers))\n+    invalid_start_flags = NXX23;\n+  else if (CPP_OPTION (pfile, c11_identifiers))\n+    invalid_start_flags = N11;\n+  else if (CPP_OPTION (pfile, c99))\n+    invalid_start_flags = N99;\n+  else\n+    invalid_start_flags = 0;\n+\n   /* In C99, UCN digits may not begin identifiers.  In C11 and C++11,\n      UCN combining characters may not begin identifiers.  */\n   if (ucnranges[mn].flags & invalid_start_flags)"}, {"sha": "6e2fcb6b1f206de6b3204ff1e8ef74002d41889a", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d6dcacfca1b804504515496e6d9de176d7f51e/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d6dcacfca1b804504515496e6d9de176d7f51e/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=c4d6dcacfca1b804504515496e6d9de176d7f51e", "patch": "@@ -482,6 +482,10 @@ struct cpp_options\n      in C11 and C++11.  */\n   unsigned char c11_identifiers;\n \n+  /* Nonzero means extended identifiers allow the characters specified\n+     in C++23.  */\n+  unsigned char cxx23_identifiers;\n+\n   /* Nonzero for C++ 2014 Standard binary constants.  */\n   unsigned char binary_constants;\n "}, {"sha": "eda17a6a038ea474599cce293059e418ec1ca227", "filename": "libcpp/init.c", "status": "modified", "additions": 27, "deletions": 25, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d6dcacfca1b804504515496e6d9de176d7f51e/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d6dcacfca1b804504515496e6d9de176d7f51e/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=c4d6dcacfca1b804504515496e6d9de176d7f51e", "patch": "@@ -82,6 +82,7 @@ struct lang_flags\n   char extended_numbers;\n   char extended_identifiers;\n   char c11_identifiers;\n+  char cxx23_identifiers;\n   char std;\n   char digraphs;\n   char uliterals;\n@@ -99,31 +100,31 @@ struct lang_flags\n };\n \n static const struct lang_flags lang_defaults[] =\n-{ /*              c99 c++ xnum xid c11 std digr ulit rlit udlit bincst digsep trig u8chlit vaopt scope dfp szlit elifdef */\n-  /* GNUC89   */  { 0,  0,  1,  0,  0,  0,  1,   0,   0,   0,    0,     0,     0,   0,      1,   1,     0,   0,   0 },\n-  /* GNUC99   */  { 1,  0,  1,  1,  0,  0,  1,   1,   1,   0,    0,     0,     0,   0,      1,   1,     0,   0,   0 },\n-  /* GNUC11   */  { 1,  0,  1,  1,  1,  0,  1,   1,   1,   0,    0,     0,     0,   0,      1,   1,     0,   0,   0 },\n-  /* GNUC17   */  { 1,  0,  1,  1,  1,  0,  1,   1,   1,   0,    0,     0,     0,   0,      1,   1,     0,   0,   0 },\n-  /* GNUC2X   */  { 1,  0,  1,  1,  1,  0,  1,   1,   1,   0,    1,     1,     0,   1,      1,   1,     1,   0,   1 },\n-  /* STDC89   */  { 0,  0,  0,  0,  0,  1,  0,   0,   0,   0,    0,     0,     1,   0,      0,   0,     0,   0,   0 },\n-  /* STDC94   */  { 0,  0,  0,  0,  0,  1,  1,   0,   0,   0,    0,     0,     1,   0,      0,   0,     0,   0,   0 },\n-  /* STDC99   */  { 1,  0,  1,  1,  0,  1,  1,   0,   0,   0,    0,     0,     1,   0,      0,   0,     0,   0,   0 },\n-  /* STDC11   */  { 1,  0,  1,  1,  1,  1,  1,   1,   0,   0,    0,     0,     1,   0,      0,   0,     0,   0,   0 },\n-  /* STDC17   */  { 1,  0,  1,  1,  1,  1,  1,   1,   0,   0,    0,     0,     1,   0,      0,   0,     0,   0,   0 },\n-  /* STDC2X   */  { 1,  0,  1,  1,  1,  1,  1,   1,   0,   0,    1,     1,     1,   1,      0,   1,     1,   0,   1 },\n-  /* GNUCXX   */  { 0,  1,  1,  1,  0,  0,  1,   0,   0,   0,    0,     0,     0,   0,      1,   1,     0,   0,   0 },\n-  /* CXX98    */  { 0,  1,  0,  1,  0,  1,  1,   0,   0,   0,    0,     0,     1,   0,      0,   1,     0,   0,   0 },\n-  /* GNUCXX11 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    0,     0,     0,   0,      1,   1,     0,   0,   0 },\n-  /* CXX11    */  { 1,  1,  0,  1,  1,  1,  1,   1,   1,   1,    0,     0,     1,   0,      0,   1,     0,   0,   0 },\n-  /* GNUCXX14 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0,   0,      1,   1,     0,   0,   0 },\n-  /* CXX14    */  { 1,  1,  0,  1,  1,  1,  1,   1,   1,   1,    1,     1,     1,   0,      0,   1,     0,   0,   0 },\n-  /* GNUCXX17 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0,   0,   0 },\n-  /* CXX17    */  { 1,  1,  1,  1,  1,  1,  1,   1,   1,   1,    1,     1,     0,   1,      0,   1,     0,   0,   0 },\n-  /* GNUCXX20 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0,   0,   0 },\n-  /* CXX20    */  { 1,  1,  1,  1,  1,  1,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0,   0,   0 },\n-  /* GNUCXX23 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0,   1,   0 },\n-  /* CXX23    */  { 1,  1,  1,  1,  1,  1,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0,   1,   0 },\n-  /* ASM      */  { 0,  0,  1,  0,  0,  0,  0,   0,   0,   0,    0,     0,     0,   0,      0,   0,     0,   0,   0 }\n+{ /*              c99 c++ xnum xid c11 c++23 std digr ulit rlit udlit bincst digsep trig u8chlit vaopt scope dfp szlit elifdef */\n+  /* GNUC89   */  { 0,  0,  1,  0,  0,  0,    0,  1,   0,   0,   0,    0,     0,     0,   0,      1,   1,     0,   0,   0 },\n+  /* GNUC99   */  { 1,  0,  1,  1,  0,  0,    0,  1,   1,   1,   0,    0,     0,     0,   0,      1,   1,     0,   0,   0 },\n+  /* GNUC11   */  { 1,  0,  1,  1,  1,  0,    0,  1,   1,   1,   0,    0,     0,     0,   0,      1,   1,     0,   0,   0 },\n+  /* GNUC17   */  { 1,  0,  1,  1,  1,  0,    0,  1,   1,   1,   0,    0,     0,     0,   0,      1,   1,     0,   0,   0 },\n+  /* GNUC2X   */  { 1,  0,  1,  1,  1,  0,    0,  1,   1,   1,   0,    1,     1,     0,   1,      1,   1,     1,   0,   1 },\n+  /* STDC89   */  { 0,  0,  0,  0,  0,  0,    1,  0,   0,   0,   0,    0,     0,     1,   0,      0,   0,     0,   0,   0 },\n+  /* STDC94   */  { 0,  0,  0,  0,  0,  0,    1,  1,   0,   0,   0,    0,     0,     1,   0,      0,   0,     0,   0,   0 },\n+  /* STDC99   */  { 1,  0,  1,  1,  0,  0,    1,  1,   0,   0,   0,    0,     0,     1,   0,      0,   0,     0,   0,   0 },\n+  /* STDC11   */  { 1,  0,  1,  1,  1,  0,    1,  1,   1,   0,   0,    0,     0,     1,   0,      0,   0,     0,   0,   0 },\n+  /* STDC17   */  { 1,  0,  1,  1,  1,  0,    1,  1,   1,   0,   0,    0,     0,     1,   0,      0,   0,     0,   0,   0 },\n+  /* STDC2X   */  { 1,  0,  1,  1,  1,  0,    1,  1,   1,   0,   0,    1,     1,     1,   1,      0,   1,     1,   0,   1 },\n+  /* GNUCXX   */  { 0,  1,  1,  1,  0,  0,    0,  1,   0,   0,   0,    0,     0,     0,   0,      1,   1,     0,   0,   0 },\n+  /* CXX98    */  { 0,  1,  0,  1,  0,  0,    1,  1,   0,   0,   0,    0,     0,     1,   0,      0,   1,     0,   0,   0 },\n+  /* GNUCXX11 */  { 1,  1,  1,  1,  1,  0,    0,  1,   1,   1,   1,    0,     0,     0,   0,      1,   1,     0,   0,   0 },\n+  /* CXX11    */  { 1,  1,  0,  1,  1,  0,    1,  1,   1,   1,   1,    0,     0,     1,   0,      0,   1,     0,   0,   0 },\n+  /* GNUCXX14 */  { 1,  1,  1,  1,  1,  0,    0,  1,   1,   1,   1,    1,     1,     0,   0,      1,   1,     0,   0,   0 },\n+  /* CXX14    */  { 1,  1,  0,  1,  1,  0,    1,  1,   1,   1,   1,    1,     1,     1,   0,      0,   1,     0,   0,   0 },\n+  /* GNUCXX17 */  { 1,  1,  1,  1,  1,  0,    0,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0,   0,   0 },\n+  /* CXX17    */  { 1,  1,  1,  1,  1,  0,    1,  1,   1,   1,   1,    1,     1,     0,   1,      0,   1,     0,   0,   0 },\n+  /* GNUCXX20 */  { 1,  1,  1,  1,  1,  0,    0,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0,   0,   0 },\n+  /* CXX20    */  { 1,  1,  1,  1,  1,  0,    1,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0,   0,   0 },\n+  /* GNUCXX23 */  { 1,  1,  1,  1,  1,  1,    0,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0,   1,   0 },\n+  /* CXX23    */  { 1,  1,  1,  1,  1,  1,    1,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0,   1,   0 },\n+  /* ASM      */  { 0,  0,  1,  0,  0,  0,    0,  0,   0,   0,   0,    0,     0,     0,   0,      0,   0,     0,   0,   0 }\n };\n \n /* Sets internal flags correctly for a given language.  */\n@@ -139,6 +140,7 @@ cpp_set_lang (cpp_reader *pfile, enum c_lang lang)\n   CPP_OPTION (pfile, extended_numbers)\t\t = l->extended_numbers;\n   CPP_OPTION (pfile, extended_identifiers)\t = l->extended_identifiers;\n   CPP_OPTION (pfile, c11_identifiers)\t\t = l->c11_identifiers;\n+  CPP_OPTION (pfile, cxx23_identifiers)\t\t = l->cxx23_identifiers;\n   CPP_OPTION (pfile, std)\t\t\t = l->std;\n   CPP_OPTION (pfile, digraphs)\t\t\t = l->digraphs;\n   CPP_OPTION (pfile, uliterals)\t\t\t = l->uliterals;"}, {"sha": "8e3ef096bbe390ba4d89764810ac1a56c71492e6", "filename": "libcpp/lex.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d6dcacfca1b804504515496e6d9de176d7f51e/libcpp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d6dcacfca1b804504515496e6d9de176d7f51e/libcpp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.c?ref=c4d6dcacfca1b804504515496e6d9de176d7f51e", "patch": "@@ -1306,6 +1306,9 @@ warn_about_normalization (cpp_reader *pfile,\n       if (NORMALIZE_STATE_RESULT (s) == normalized_C)\n \tcpp_warning_with_line (pfile, CPP_W_NORMALIZE, token->src_loc, 0,\n \t\t\t       \"`%.*s' is not in NFKC\", (int) sz, buf);\n+      else if (CPP_OPTION (pfile, cxx23_identifiers))\n+\tcpp_pedwarning_with_line (pfile, CPP_W_NORMALIZE, token->src_loc, 0,\n+\t\t\t\t  \"`%.*s' is not in NFC\", (int) sz, buf);\n       else\n \tcpp_warning_with_line (pfile, CPP_W_NORMALIZE, token->src_loc, 0,\n \t\t\t       \"`%.*s' is not in NFC\", (int) sz, buf);"}, {"sha": "b3a0aabedc2b399668e437eb4cc77f1f9d1bd1c8", "filename": "libcpp/makeucnid.c", "status": "modified", "additions": 80, "deletions": 7, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d6dcacfca1b804504515496e6d9de176d7f51e/libcpp%2Fmakeucnid.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d6dcacfca1b804504515496e6d9de176d7f51e/libcpp%2Fmakeucnid.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmakeucnid.c?ref=c4d6dcacfca1b804504515496e6d9de176d7f51e", "patch": "@@ -17,7 +17,7 @@ along with this program; see the file COPYING3.  If not see\n \n /* Run this program as\n    ./makeucnid ucnid.tab UnicodeData.txt DerivedNormalizationProps.txt \\\n-       > ucnid.h\n+      DerivedCoreProperties.txt > ucnid.h\n */\n \n #include <stdio.h>\n@@ -32,10 +32,12 @@ enum {\n   N99 = 4,\n   C11 = 8,\n   N11 = 16,\n-  all_languages = C99 | CXX | C11,\n-  not_NFC = 32,\n-  not_NFKC = 64,\n-  maybe_not_NFC = 128\n+  CXX23 = 32,\n+  NXX23 = 64,\n+  all_languages = C99 | CXX | C11 | CXX23 | NXX23,\n+  not_NFC = 128,\n+  not_NFKC = 256,\n+  maybe_not_NFC = 512\n };\n \n #define NUM_CODE_POINTS 0x110000\n@@ -241,6 +243,74 @@ read_derived (const char *fname)\n   fclose (f);\n }\n \n+/* Read DerivedCoreProperties.txt and fill in languages version in\n+   flags from the XID_Start and XID_Continue properties.  */\n+\n+static void\n+read_derivedcore (char *fname)\n+{\n+  FILE * f = fopen (fname, \"r\");\n+  \n+  if (!f)\n+    fail (\"opening DerivedCoreProperties.txt\");\n+  for (;;)\n+    {\n+      char line[256];\n+      unsigned long codepoint_start, codepoint_end;\n+      char *l;\n+      int i, j;\n+\n+      if (!fgets (line, sizeof (line), f))\n+\tbreak;\n+      if (line[0] == '#' || line[0] == '\\n' || line[0] == '\\r')\n+\tcontinue;\n+      codepoint_start = strtoul (line, &l, 16);\n+      if (l == line)\n+\tfail (\"parsing DerivedCoreProperties.txt, reading code point\");\n+      if (codepoint_start > MAX_CODE_POINT)\n+\tfail (\"parsing DerivedCoreProperties.txt, code point too large\");\n+      \n+      if (*l == '.' && l[1] == '.')\n+\t{\n+\t  char *l2 = l + 2;\n+\t  codepoint_end = strtoul (l + 2, &l, 16);\n+\t  if (l == l2 || codepoint_end < codepoint_start)\n+\t    fail (\"parsing DerivedCoreProperties.txt, reading code point\");\n+\t  if (codepoint_end > MAX_CODE_POINT)\n+\t    fail (\"parsing DerivedCoreProperties.txt, code point too large\");\n+\t}\n+      else\n+\tcodepoint_end = codepoint_start;\n+\n+      while (*l == ' ')\n+\tl++;\n+      if (*l++ != ';')\n+\tfail (\"parsing DerivedCoreProperties.txt, reading code point\");\n+\n+      while (*l == ' ')\n+\tl++;\n+\n+      if (codepoint_end < 0x80)\n+        continue;\n+\n+      if (strncmp (l, \"XID_Start \", 10) == 0)\n+\t{\n+\t  for (; codepoint_start <= codepoint_end; codepoint_start++)\n+\t    flags[codepoint_start]\n+\t      = (flags[codepoint_start] | CXX23) & ~NXX23;\n+\t}\n+      else if (strncmp (l, \"XID_Continue \", 13) == 0)\n+\t{\n+\t  for (; codepoint_start <= codepoint_end; codepoint_start++)\n+\t    if ((flags[codepoint_start] & CXX23) == 0)\n+\t      flags[codepoint_start] |= CXX23 | NXX23;\n+\t}\n+    }\n+  if (ferror (f))\n+    fail (\"reading DerivedCoreProperties.txt\");\n+  fclose (f);\n+}\n+\n /* Write out the table.\n    The table consists of two words per entry.  The first word is the flags\n    for the unicode code points up to and including the second word.  */\n@@ -261,12 +331,14 @@ write_table (void)\n \t|| really_safe != (decomp[i][0] == 0)\n \t|| combining_value[i] != last_combine)\n       {\n-\tprintf (\"{ %s|%s|%s|%s|%s|%s|%s|%s|%s, %3d, %#06x },\\n\",\n+\tprintf (\"{ %s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s, %3d, %#06x },\\n\",\n \t\tlast_flag & C99 ? \"C99\" : \"  0\",\n \t\tlast_flag & N99 ? \"N99\" : \"  0\",\n \t\tlast_flag & CXX ? \"CXX\" : \"  0\",\n \t\tlast_flag & C11 ? \"C11\" : \"  0\",\n \t\tlast_flag & N11 ? \"N11\" : \"  0\",\n+\t\tlast_flag & CXX23 ? \"CXX23\" : \"    0\",\n+\t\tlast_flag & NXX23 ? \"NXX23\" : \"    0\",\n \t\treally_safe ? \"CID\" : \"  0\",\n \t\tlast_flag & not_NFC ? \"  0\" : \"NFC\",\n \t\tlast_flag & not_NFKC ? \"  0\" : \"NKC\",\n@@ -439,11 +511,12 @@ write_copyright (void)\n int\n main(int argc, char ** argv)\n {\n-  if (argc != 4)\n+  if (argc != 5)\n     fail (\"too few arguments to makeucn\");\n   read_ucnid (argv[1]);\n   read_table (argv[2]);\n   read_derived (argv[3]);\n+  read_derivedcore (argv[4]);\n \n   write_copyright ();\n   write_table ();"}, {"sha": "e7b0ac264a71ad5dcc9da2b7b904aadcfc349365", "filename": "libcpp/ucnid.h", "status": "modified", "additions": 2650, "deletions": 1752, "changes": 4402, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d6dcacfca1b804504515496e6d9de176d7f51e/libcpp%2Fucnid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d6dcacfca1b804504515496e6d9de176d7f51e/libcpp%2Fucnid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fucnid.h?ref=c4d6dcacfca1b804504515496e6d9de176d7f51e"}]}