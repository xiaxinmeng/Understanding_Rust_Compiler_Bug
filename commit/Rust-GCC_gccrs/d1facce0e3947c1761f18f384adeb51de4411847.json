{"sha": "d1facce0e3947c1761f18f384adeb51de4411847", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDFmYWNjZTBlMzk0N2MxNzYxZjE4ZjM4NGFkZWI1MWRlNDQxMTg0Nw==", "commit": {"author": {"name": "Ralf Wildenhues", "email": "Ralf.Wildenhues@gmx.de", "date": "2008-09-13T18:54:58Z"}, "committer": {"name": "Ralf Wildenhues", "email": "rwild@gcc.gnu.org", "date": "2008-09-13T18:54:58Z"}, "message": "cfg.texi: Fix some typos.\n\ngcc/\n\t* doc/cfg.texi: Fix some typos.\n\t* doc/extend.texi: Likewise.\n\t* doc/install.texi: Likewise.\n\t* doc/invoke.texi: Likewise.\n\t* doc/rtl.texi: Likewise.\n\t* doc/tree-ssa.texi: Likewise.\n\nFrom-SVN: r140347", "tree": {"sha": "25d86108a6d1125f07a8d4a7a8590a6644e3e2c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25d86108a6d1125f07a8d4a7a8590a6644e3e2c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1facce0e3947c1761f18f384adeb51de4411847", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1facce0e3947c1761f18f384adeb51de4411847", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1facce0e3947c1761f18f384adeb51de4411847", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1facce0e3947c1761f18f384adeb51de4411847/comments", "author": null, "committer": null, "parents": [{"sha": "42ea03fb16ac9a6d732edd04c9f036fa6f0cf71e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42ea03fb16ac9a6d732edd04c9f036fa6f0cf71e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42ea03fb16ac9a6d732edd04c9f036fa6f0cf71e"}], "stats": {"total": 45, "additions": 27, "deletions": 18}, "files": [{"sha": "1e4ce3ebfd05fb9bd6c3da36246c771332a1b68f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1facce0e3947c1761f18f384adeb51de4411847/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1facce0e3947c1761f18f384adeb51de4411847/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d1facce0e3947c1761f18f384adeb51de4411847", "patch": "@@ -1,3 +1,12 @@\n+2008-09-13  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n+\n+\t* doc/cfg.texi: Fix some typos.\n+\t* doc/extend.texi: Likewise.\n+\t* doc/install.texi: Likewise.\n+\t* doc/invoke.texi: Likewise.\n+\t* doc/rtl.texi: Likewise.\n+\t* doc/tree-ssa.texi: Likewise.\n+\n 2008-09-13  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/30141"}, {"sha": "323f6b516199f47b456c8477a7ebe0f5b4e8f4e5", "filename": "gcc/doc/cfg.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1facce0e3947c1761f18f384adeb51de4411847/gcc%2Fdoc%2Fcfg.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1facce0e3947c1761f18f384adeb51de4411847/gcc%2Fdoc%2Fcfg.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcfg.texi?ref=d1facce0e3947c1761f18f384adeb51de4411847", "patch": "@@ -513,9 +513,9 @@ containing the queried statement.\n When changes need to be applied to a function in its @code{tree}\n representation, @dfn{block statement iterators} should be used.  These\n iterators provide an integrated abstraction of the flow graph and the\n-instruction stream.  Block statement iterators iterators are\n-constructed using the @code{block_stmt_iterator} data structure and\n-several modifier are available, including the following:\n+instruction stream.  Block statement iterators are constructed using\n+the @code{block_stmt_iterator} data structure and several modifier are\n+available, including the following:\n \n @ftable @code\n @item bsi_start"}, {"sha": "da9c1daacdcbcd0eaf5346158ffaa08eae42598c", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1facce0e3947c1761f18f384adeb51de4411847/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1facce0e3947c1761f18f384adeb51de4411847/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=d1facce0e3947c1761f18f384adeb51de4411847", "patch": "@@ -3166,7 +3166,7 @@ declaration without explicit visibility is limited to the visibility\n of its type.\n \n In C++, you can mark member functions and static member variables of a\n-class with the visibility attribute.  This is useful if if you know a\n+class with the visibility attribute.  This is useful if you know a\n particular method or static member variable should only be used from\n one shared object; then you can mark it hidden while the rest of the\n class has default visibility.  Care must be taken to avoid breaking\n@@ -5747,7 +5747,7 @@ backward.  Further, instructions will be issued as necessary to prevent the\n processor from speculating loads across the operation and from queuing stores\n after the operation.\n \n-All of the routines are are described in the Intel documentation to take\n+All of the routines are described in the Intel documentation to take\n ``an optional list of variables protected by the memory barrier''.  It's\n not clear what is meant by that; it could mean that @emph{only} the\n following variables are protected, or it could mean that these variables\n@@ -12925,21 +12925,21 @@ type.  Diagnostic is produced if this requirement is not met.\n \n @item __is_class (type)\n If @code{type} is a cv class type, and not a union type\n-([basic.compound]) the the trait is true, else it is false.\n+([basic.compound]) the trait is true, else it is false.\n \n @item __is_empty (type)\n If @code{__is_class (type)} is false then the trait is false.\n Otherwise @code{type} is considered empty if and only if: @code{type}\n has no non-static data members, or all non-static data members, if\n-any, are bit-fields of lenght 0, and @code{type} has no virtual\n+any, are bit-fields of length 0, and @code{type} has no virtual\n members, and @code{type} has no virtual base classes, and @code{type}\n has no base classes @code{base_type} for which \n @code{__is_empty (base_type)} is false.  Requires: @code{type} shall\n be a complete type, an array type of unknown bound, or is a\n @code{void} type.\n \n @item __is_enum (type)\n-If @code{type} is a cv enumeration type ([basic.compound]) the the trait is \n+If @code{type} is a cv enumeration type ([basic.compound]) the trait is\n true, else it is false.\n \n @item __is_pod (type)\n@@ -12953,7 +12953,7 @@ is true, else it is false.  Requires: @code{type} shall be a complete\n type, an array type of unknown bound, or is a @code{void} type.\n \n @item __is_union (type)\n-If @code{type} is a cv union type ([basic.compound]) the the trait is \n+If @code{type} is a cv union type ([basic.compound]) the trait is\n true, else it is false.\n \n @end table"}, {"sha": "8f054229ebdc80a86cb84aa7783badcde8c5f73a", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1facce0e3947c1761f18f384adeb51de4411847/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1facce0e3947c1761f18f384adeb51de4411847/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=d1facce0e3947c1761f18f384adeb51de4411847", "patch": "@@ -3134,8 +3134,8 @@ with the @option{--with-ld=@dots{}} option.  This overrides the standard\n search for ld.  The two linkers supported on this target require different\n commands.  The default linker is determined during configuration.  As a\n result, it's not possible to switch linkers in the middle of a GCC build.\n-This has been been reported to sometimes occur in unified builds of\n-binutils and GCC@.\n+This has been reported to sometimes occur in unified builds of binutils\n+and GCC@.\n \n GCC 3.0 through 3.2 require binutils 2.11 or above.  GCC 3.3 through\n GCC 4.0 require binutils 2.14 or later."}, {"sha": "eb9ecd555c04a445e48bb6f474fe95b08c6ffe00", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1facce0e3947c1761f18f384adeb51de4411847/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1facce0e3947c1761f18f384adeb51de4411847/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=d1facce0e3947c1761f18f384adeb51de4411847", "patch": "@@ -1522,7 +1522,7 @@ known not to modify global memory.\n With the @option{-fno-builtin-@var{function}} option\n only the built-in function @var{function} is\n disabled.  @var{function} must not begin with @samp{__builtin_}.  If a\n-function is named this is not built-in in this version of GCC, this\n+function is named that is not built-in in this version of GCC, this\n option is ignored.  There is no corresponding\n @option{-fbuiltin-@var{function}} option; if you wish to enable\n built-in functions selectively when using @option{-fno-builtin} or\n@@ -5081,7 +5081,7 @@ Don't forget the trailing @samp{/}.\n @opindex print-sysroot\n Print the target sysroot directory that will be used during\n compilation.  This is the target sysroot specified either at configure\n-time or or using the @option{--sysroot} option, possibly with an extra\n+time or using the @option{--sysroot} option, possibly with an extra\n suffix that depends on compilation options.  If no target sysroot is\n specified, the option prints nothing.\n \n@@ -7084,7 +7084,7 @@ The default value is 90.\n \n @item large-function-insns\n The limit specifying really large functions.  For functions larger than this\n-limit after inlining inlining is constrained by\n+limit after inlining, inlining is constrained by\n @option{--param large-function-growth}.  This parameter is useful primarily\n to avoid extreme compilation time caused by non-linear algorithms used by the\n backend.\n@@ -10931,7 +10931,7 @@ the system libraries and startup modules.\n \n Set 80387 floating-point precision to 32, 64 or 80 bits.  When @option{-mpc32}\n is specified, the significands of results of floating-point operations are\n-rounded to 24 bits (single precision); @option{-mpc64} rounds the the\n+rounded to 24 bits (single precision); @option{-mpc64} rounds the\n significands of results of floating-point operations to 53 bits (double\n precision) and @option{-mpc80} rounds the significands of results of\n floating-point operations to 64 bits (extended double precision), which is"}, {"sha": "148e19ddc9a17bd5a0ff54e23c41ce71e50590e7", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1facce0e3947c1761f18f384adeb51de4411847/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1facce0e3947c1761f18f384adeb51de4411847/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=d1facce0e3947c1761f18f384adeb51de4411847", "patch": "@@ -3703,7 +3703,7 @@ insn-field) goes into the @code{JUMP_LABEL} field and does not have a\n This insn is an branching instruction (either an unconditional jump or\n an indirect jump) which crosses between hot and cold sections, which\n could potentially be very far apart in the executable.  The presence\n-of this note indicates to other optimizations that this this branching\n+of this note indicates to other optimizations that this branching\n instruction should not be ``collapsed'' into a simpler branching\n construct.  It is used when the optimization to partition basic blocks\n into hot and cold sections is turned on."}, {"sha": "ea3d0ab4c595a219380a3cc2d162dcdae48ae257", "filename": "gcc/doc/tree-ssa.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1facce0e3947c1761f18f384adeb51de4411847/gcc%2Fdoc%2Ftree-ssa.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1facce0e3947c1761f18f384adeb51de4411847/gcc%2Fdoc%2Ftree-ssa.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftree-ssa.texi?ref=d1facce0e3947c1761f18f384adeb51de4411847", "patch": "@@ -1045,7 +1045,7 @@ FOR_EACH_PHI_ARG (use_p, phi_stmt, iter, SSA_OP_VIRTUAL_USES)\n FOR_EACH_PHI_ARG (use_p, phi_stmt, iter, SSA_OP_USES)\n   my_code;\n \n-/* Look at every every PHI use.  */\n+/* Look at every PHI use.  */\n FOR_EACH_PHI_ARG (use_p, phi_stmt, iter, SSA_OP_ALL_USES)\n   my_code;\n @end smallexample\n@@ -1131,7 +1131,7 @@ Some useful functions and macros:\n single use of @code{ssa_var}.\n @item   @code{single_imm_use (ssa_var, use_operand_p *ptr, tree *stmt)} :\n Returns true if there is only a single use of @code{ssa_var}, and also returns\n-the use pointer and statement it occurs in in the second and third parameters.\n+the use pointer and statement it occurs in, in the second and third parameters.\n @item   @code{num_imm_uses (ssa_var)} : Returns the number of immediate uses of\n @code{ssa_var}. It is better not to use this if possible since it simply\n utilizes a loop to count the uses."}]}