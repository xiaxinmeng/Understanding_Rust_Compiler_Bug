{"sha": "af9587ff0f261b8810a179a1369ae5a51dae99da", "node_id": "C_kwDOANBUbNoAKGFmOTU4N2ZmMGYyNjFiODgxMGExNzlhMTM2OWFlNWE1MWRhZTk5ZGE", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2022-09-04T19:22:21Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2022-09-04T19:49:01Z"}, "message": "[libsanitizer, Darwin] Fix bootstrap after recent merge.\n\nThe latest merge to libsanitizer includes changes to handle macOS 13+.\nHowever, these changes are incompatible with GCC and so we need to find\nan alternate solution.  To restore bootstrap back this change out until\nthe alternate can be found.", "tree": {"sha": "882b2111622c7b37d6e4c2922d2b3faf177a1a91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/882b2111622c7b37d6e4c2922d2b3faf177a1a91"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af9587ff0f261b8810a179a1369ae5a51dae99da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af9587ff0f261b8810a179a1369ae5a51dae99da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af9587ff0f261b8810a179a1369ae5a51dae99da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af9587ff0f261b8810a179a1369ae5a51dae99da/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8293a9632c46c8f3f9d531c09194aa8738944927", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8293a9632c46c8f3f9d531c09194aa8738944927", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8293a9632c46c8f3f9d531c09194aa8738944927"}], "stats": {"total": 62, "additions": 10, "deletions": 52}, "files": [{"sha": "ba4259acd46ca97ecf37ed401cbe5e6a4a98a95d", "filename": "libsanitizer/sanitizer_common/sanitizer_procmaps_mac.cpp", "status": "modified", "additions": 10, "deletions": 52, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af9587ff0f261b8810a179a1369ae5a51dae99da/libsanitizer%2Fsanitizer_common%2Fsanitizer_procmaps_mac.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af9587ff0f261b8810a179a1369ae5a51dae99da/libsanitizer%2Fsanitizer_common%2Fsanitizer_procmaps_mac.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_procmaps_mac.cpp?ref=af9587ff0f261b8810a179a1369ae5a51dae99da", "patch": "@@ -146,8 +146,13 @@ static bool IsDyldHdr(const mach_header *hdr) {\n // until we hit a Mach header matching dyld instead. These recurse\n // calls are expensive, but the first memory map generation occurs\n // early in the process, when dyld is one of the only images loaded,\n-// so it will be hit after only a few iterations.  These assumptions don't hold\n-// on macOS 13+ anymore (dyld itself has moved into the shared cache).\n+// so it will be hit after only a few iterations.  These assumptions don't\n+// hold on macOS 13+ anymore (dyld itself has moved into the shared cache).\n+\n+// FIXME: Unfortunately, the upstream revised version to deal with macOS 13+\n+// is incompatible with GCC and also uses APIs not available on earlier\n+// systems which we support; backed out for now.\n+\n static mach_header *GetDyldImageHeaderViaVMRegion() {\n   vm_address_t address = 0;\n \n@@ -171,64 +176,17 @@ static mach_header *GetDyldImageHeaderViaVMRegion() {\n   }\n }\n \n-extern \"C\" {\n-struct dyld_shared_cache_dylib_text_info {\n-  uint64_t version;  // current version 2\n-  // following fields all exist in version 1\n-  uint64_t loadAddressUnslid;\n-  uint64_t textSegmentSize;\n-  uuid_t dylibUuid;\n-  const char *path;  // pointer invalid at end of iterations\n-  // following fields all exist in version 2\n-  uint64_t textSegmentOffset;  // offset from start of cache\n-};\n-typedef struct dyld_shared_cache_dylib_text_info\n-    dyld_shared_cache_dylib_text_info;\n-\n-extern bool _dyld_get_shared_cache_uuid(uuid_t uuid);\n-extern const void *_dyld_get_shared_cache_range(size_t *length);\n-extern int dyld_shared_cache_iterate_text(\n-    const uuid_t cacheUuid,\n-    void (^callback)(const dyld_shared_cache_dylib_text_info *info));\n-}  // extern \"C\"\n-\n-static mach_header *GetDyldImageHeaderViaSharedCache() {\n-  uuid_t uuid;\n-  bool hasCache = _dyld_get_shared_cache_uuid(uuid);\n-  if (!hasCache)\n-    return nullptr;\n-\n-  size_t cacheLength;\n-  __block uptr cacheStart = (uptr)_dyld_get_shared_cache_range(&cacheLength);\n-  CHECK(cacheStart && cacheLength);\n-\n-  __block mach_header *dyldHdr = nullptr;\n-  int res = dyld_shared_cache_iterate_text(\n-      uuid, ^(const dyld_shared_cache_dylib_text_info *info) {\n-        CHECK_GE(info->version, 2);\n-        mach_header *hdr =\n-            (mach_header *)(cacheStart + info->textSegmentOffset);\n-        if (IsDyldHdr(hdr))\n-          dyldHdr = hdr;\n-      });\n-  CHECK_EQ(res, 0);\n-\n-  return dyldHdr;\n-}\n-\n const mach_header *get_dyld_hdr() {\n   if (!dyld_hdr) {\n     // On macOS 13+, dyld itself has moved into the shared cache.  Looking it up\n     // via vm_region_recurse_64() causes spins/hangs/crashes.\n+    // FIXME: find a way to do this compatible with GCC.\n     if (GetMacosAlignedVersion() >= MacosVersion(13, 0)) {\n-      dyld_hdr = GetDyldImageHeaderViaSharedCache();\n-      if (!dyld_hdr) {\n         VReport(1,\n-                \"Failed to lookup the dyld image header in the shared cache on \"\n-                \"macOS 13+ (or no shared cache in use).  Falling back to \"\n+                \"looking up the dyld image header in the shared cache on \"\n+                \"macOS 13+ is not yet supported.  Falling back to \"\n                 \"lookup via vm_region_recurse_64().\\n\");\n         dyld_hdr = GetDyldImageHeaderViaVMRegion();\n-      }\n     } else {\n       dyld_hdr = GetDyldImageHeaderViaVMRegion();\n     }"}]}