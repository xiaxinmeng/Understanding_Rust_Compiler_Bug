{"sha": "9f61886eaf5d9cdaaac90ee147e078908d117fdc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWY2MTg4NmVhZjVkOWNkYWFhYzkwZWUxNDdlMDc4OTA4ZDExN2ZkYw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2005-01-18T09:44:13Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-01-18T09:44:13Z"}, "message": "i386.c (ix86_expand_fp_movcc): Remove TARGET_IEEE_FP special case for sse.\n\n        * config/i386/i386.c (ix86_expand_fp_movcc): Remove TARGET_IEEE_FP\n        special case for sse.\n        * config/i386/predicates.md (sse_comparison_operator): Likewise.\n\nFrom-SVN: r93824", "tree": {"sha": "e04f5027c6bcae9cf6d542af67efe90a00a63412", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e04f5027c6bcae9cf6d542af67efe90a00a63412"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f61886eaf5d9cdaaac90ee147e078908d117fdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f61886eaf5d9cdaaac90ee147e078908d117fdc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f61886eaf5d9cdaaac90ee147e078908d117fdc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f61886eaf5d9cdaaac90ee147e078908d117fdc/comments", "author": null, "committer": null, "parents": [{"sha": "16630a2c80c507bd2df089aa0b762ccd10178cfc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16630a2c80c507bd2df089aa0b762ccd10178cfc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16630a2c80c507bd2df089aa0b762ccd10178cfc"}], "stats": {"total": 19, "additions": 11, "deletions": 8}, "files": [{"sha": "ce0259ce972256c88bb10bea09084aad26dc7901", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f61886eaf5d9cdaaac90ee147e078908d117fdc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f61886eaf5d9cdaaac90ee147e078908d117fdc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9f61886eaf5d9cdaaac90ee147e078908d117fdc", "patch": "@@ -1,3 +1,9 @@\n+2005-01-18  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/i386/i386.c (ix86_expand_fp_movcc): Remove TARGET_IEEE_FP\n+\tspecial case for sse.\n+\t* config/i386/predicates.md (sse_comparison_operator): Likewise.\n+\n 2005-01-18  Dorit Naishlos  <dorit@il.ibm.com>\n \n \t* tree-inline.c (estimate_num_insns_1): Added cases for"}, {"sha": "c3aff8e305ef41d9de1d9f79694bc65c96b1db38", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f61886eaf5d9cdaaac90ee147e078908d117fdc/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f61886eaf5d9cdaaac90ee147e078908d117fdc/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=9f61886eaf5d9cdaaac90ee147e078908d117fdc", "patch": "@@ -9764,12 +9764,11 @@ ix86_expand_fp_movcc (rtx operands[])\n       if (cmode != mode)\n \treturn 0;\n \n-      /* Massage condition to satisfy sse_comparison_operator.  In case we\n-\t are in non-ieee mode, try to canonicalize the destination operand\n-\t to be first in the comparison - this helps reload to avoid extra\n-\t moves.  */\n+      /* Massage condition to satisfy sse_comparison_operator.  Try\n+\t to canonicalize the destination operand to be first in the\n+\t comparison - this helps reload to avoid extra moves.  */\n       if (!sse_comparison_operator (operands[1], VOIDmode)\n-\t  || ((COMMUTATIVE_P (operands[1]) || !TARGET_IEEE_FP)\n+\t  || (COMMUTATIVE_P (operands[1])\n \t      && rtx_equal_p (operands[0], cmp_op1)))\n \t{\n \t  tmp = cmp_op0;"}, {"sha": "6e94afcd1fa5f59a4ade5eff009d6b8c0f11e269", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f61886eaf5d9cdaaac90ee147e078908d117fdc/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f61886eaf5d9cdaaac90ee147e078908d117fdc/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=9f61886eaf5d9cdaaac90ee147e078908d117fdc", "patch": "@@ -759,9 +759,7 @@\n ;; predicate.\n \n (define_special_predicate \"sse_comparison_operator\"\n-  (ior (match_code \"eq,lt,le,unordered,ne,unge,ungt,ordered\")\n-       (and (match_code \"uneq,unlt,unle,ltgt,ge,gt\")\n-\t    (match_test \"!TARGET_IEEE_FP\"))))\n+  (match_code \"eq,lt,le,unordered,ne,unge,ungt,ordered\"))\n \n ;; Return 1 if OP is a valid comparison operator in valid mode.\n (define_predicate \"ix86_comparison_operator\""}]}