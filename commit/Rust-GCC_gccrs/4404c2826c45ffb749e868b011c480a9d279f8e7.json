{"sha": "4404c2826c45ffb749e868b011c480a9d279f8e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQwNGMyODI2YzQ1ZmZiNzQ5ZTg2OGIwMTFjNDgwYTlkMjc5ZjhlNw==", "commit": {"author": {"name": "Gary Dismukes", "email": "dismukes@adacore.com", "date": "2015-11-24T09:22:24Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-11-24T09:22:24Z"}, "message": "sem_ch3.adb, [...]: Minor reformatting, rewording, and typo corrections.\n\n2015-11-24  Gary Dismukes  <dismukes@adacore.com>\n\n\t* sem_ch3.adb, sem_type.adb, sem_ch7.adb, sem_ch9.adb, checks.adb,\n\tsem_prag.adb, contracts.adb, g-strhas.ads, sem_ch6.adb: Minor\n\treformatting, rewording, and typo corrections.\n\nFrom-SVN: r230794", "tree": {"sha": "91519daaa4d7213a5ea90cd1cd936d2ca8598580", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91519daaa4d7213a5ea90cd1cd936d2ca8598580"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4404c2826c45ffb749e868b011c480a9d279f8e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4404c2826c45ffb749e868b011c480a9d279f8e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4404c2826c45ffb749e868b011c480a9d279f8e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4404c2826c45ffb749e868b011c480a9d279f8e7/comments", "author": {"login": "dismukes", "id": 50880541, "node_id": "MDQ6VXNlcjUwODgwNTQx", "avatar_url": "https://avatars.githubusercontent.com/u/50880541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dismukes", "html_url": "https://github.com/dismukes", "followers_url": "https://api.github.com/users/dismukes/followers", "following_url": "https://api.github.com/users/dismukes/following{/other_user}", "gists_url": "https://api.github.com/users/dismukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dismukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dismukes/subscriptions", "organizations_url": "https://api.github.com/users/dismukes/orgs", "repos_url": "https://api.github.com/users/dismukes/repos", "events_url": "https://api.github.com/users/dismukes/events{/privacy}", "received_events_url": "https://api.github.com/users/dismukes/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8ab1d9d72cf8cb59186d8af292707eb393e57c3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ab1d9d72cf8cb59186d8af292707eb393e57c3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ab1d9d72cf8cb59186d8af292707eb393e57c3b"}], "stats": {"total": 54, "additions": 30, "deletions": 24}, "files": [{"sha": "a83124f2cc243b616b645491458d5e2434fc20d3", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4404c2826c45ffb749e868b011c480a9d279f8e7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4404c2826c45ffb749e868b011c480a9d279f8e7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4404c2826c45ffb749e868b011c480a9d279f8e7", "patch": "@@ -1,3 +1,9 @@\n+2015-11-24  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_ch3.adb, sem_type.adb, sem_ch7.adb, sem_ch9.adb, checks.adb,\n+\tsem_prag.adb, contracts.adb, g-strhas.ads, sem_ch6.adb: Minor\n+\treformatting, rewording, and typo corrections.\n+\n 2015-11-24  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (gnat_to_gnu_entity) <Concurrent types>: In"}, {"sha": "908837cd01544ca2425135e07ac24fa6f7dac22a", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4404c2826c45ffb749e868b011c480a9d279f8e7/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4404c2826c45ffb749e868b011c480a9d279f8e7/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=4404c2826c45ffb749e868b011c480a9d279f8e7", "patch": "@@ -921,7 +921,7 @@ package body Checks is\n       --    range of x op y is included in the range of type1\n       --    size of type1 is at least twice the result size of op\n \n-      --  then we don't do an overflow check in any case, instead we transform\n+      --  then we don't do an overflow check in any case. Instead, we transform\n       --  the operation so that we end up with:\n \n       --    type1 (type1 (x) op type1 (y))\n@@ -1262,7 +1262,7 @@ package body Checks is\n          --  is replaced with a reference to Rnn.\n \n          --  If our parent is a conversion node then there is no point in\n-         --  generating a conversion to Result_Type, we will let the parent\n+         --  generating a conversion to Result_Type. Instead, we let the parent\n          --  handle this. Note that this special case is not just about\n          --  optimization. Consider\n "}, {"sha": "ebaecc09512d8923c6d87f4e4bb54e204283edab", "filename": "gcc/ada/contracts.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4404c2826c45ffb749e868b011c480a9d279f8e7/gcc%2Fada%2Fcontracts.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4404c2826c45ffb749e868b011c480a9d279f8e7/gcc%2Fada%2Fcontracts.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcontracts.adb?ref=4404c2826c45ffb749e868b011c480a9d279f8e7", "patch": "@@ -58,7 +58,7 @@ package body Contracts is\n    --  Analyze_Previous_Constracts. Analyze the contracts of all constructs in\n    --  the list L. If Freeze_Nod is set, then the analysis stops when the node\n    --  is reached. Freeze_Id is the entity of some related context which caused\n-   --  freezing upto node Freeze_Nod.\n+   --  freezing up to node Freeze_Nod.\n \n    procedure Expand_Subprogram_Contract (Body_Id : Entity_Id);\n    --  Expand the contracts of a subprogram body and its correspoding spec (if\n@@ -1120,7 +1120,7 @@ package body Contracts is\n          Par := Parent (Par);\n       end loop;\n \n-      --  Analyze the contracts of all eligible construct upto the body which\n+      --  Analyze the contracts of all eligible construct up to the body which\n       --  caused the \"freezing\".\n \n       if Is_List_Member (Body_Decl) then"}, {"sha": "c20b678c9faba0e90a9d7362dbebfecfefe4e36d", "filename": "gcc/ada/g-strhas.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4404c2826c45ffb749e868b011c480a9d279f8e7/gcc%2Fada%2Fg-strhas.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4404c2826c45ffb749e868b011c480a9d279f8e7/gcc%2Fada%2Fg-strhas.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-strhas.ads?ref=4404c2826c45ffb749e868b011c480a9d279f8e7", "patch": "@@ -34,7 +34,7 @@\n --  string hash functions in Ada.Containers.\n --\n --  The algorithm used here is not appropriate for applications that require\n---  cryptographically strong hashes, or for application which wish to use very\n+--  cryptographically strong hashes, or for applications that wish to use very\n --  wide hash values as pseudo unique identifiers. In such cases please refer\n --  to GNAT.SHA1 and GNAT.MD5.\n "}, {"sha": "35d2b9810bf89c3b041274267f823e1f11367d03", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4404c2826c45ffb749e868b011c480a9d279f8e7/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4404c2826c45ffb749e868b011c480a9d279f8e7/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=4404c2826c45ffb749e868b011c480a9d279f8e7", "patch": "@@ -2507,9 +2507,9 @@ package body Sem_Ch3 is\n \n             Check_Unused_Body_States (Defining_Entity (Context));\n \n-            --  State refinements are visible upto the end the of the package\n-            --  body declarations. Hide the state refinements from visibility\n-            --  to restore the original state conditions.\n+            --  State refinements are visible up to the end of the package body\n+            --  declarations. Hide the state refinements from visibility to\n+            --  restore the original state conditions.\n \n             Remove_Visible_Refinements (Corresponding_Spec (Context));\n          end if;"}, {"sha": "9474ef57af57cc1f2147260e683ee0bc2aa50f50", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4404c2826c45ffb749e868b011c480a9d279f8e7/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4404c2826c45ffb749e868b011c480a9d279f8e7/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=4404c2826c45ffb749e868b011c480a9d279f8e7", "patch": "@@ -2980,7 +2980,7 @@ package body Sem_Ch6 is\n    begin\n       --  A [generic] subprogram body \"freezes\" the contract of the nearest\n       --  enclosing package body and all other contracts encountered in the\n-      --  same declarative part upto and excluding the subprogram body:\n+      --  same declarative part up to and excluding the subprogram body:\n \n       --    package body Nearest_Enclosing_Package\n       --      with Refined_State => (State => Constit)"}, {"sha": "e182771aef4328ea1d87d3d54a5b7d4e715edaba", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4404c2826c45ffb749e868b011c480a9d279f8e7/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4404c2826c45ffb749e868b011c480a9d279f8e7/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=4404c2826c45ffb749e868b011c480a9d279f8e7", "patch": "@@ -544,7 +544,7 @@ package body Sem_Ch7 is\n    begin\n       --  A [generic] package body \"freezes\" the contract of the nearest\n       --  enclosing package body and all other contracts encountered in the\n-      --  same declarative part upto and excluding the package body:\n+      --  same declarative part up to and excluding the package body:\n \n       --    package body Nearest_Enclosing_Package\n       --      with Refined_State => (State => Constit)"}, {"sha": "bbb801824b17b193f0cc54783480c452d9c8a241", "filename": "gcc/ada/sem_ch9.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4404c2826c45ffb749e868b011c480a9d279f8e7/gcc%2Fada%2Fsem_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4404c2826c45ffb749e868b011c480a9d279f8e7/gcc%2Fada%2Fsem_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch9.adb?ref=4404c2826c45ffb749e868b011c480a9d279f8e7", "patch": "@@ -1194,7 +1194,7 @@ package body Sem_Ch9 is\n    begin\n       --  An entry body \"freezes\" the contract of the nearest enclosing package\n       --  body and all other contracts encountered in the same declarative part\n-      --  upto and excluding the entry body. This ensures that any annotations\n+      --  up to and excluding the entry body. This ensures that any annotations\n       --  referenced by the contract of an entry or subprogram body declared\n       --  within the current protected body are available.\n \n@@ -1769,7 +1769,7 @@ package body Sem_Ch9 is\n    begin\n       --  A protected body \"freezes\" the contract of the nearest enclosing\n       --  package body and all other contracts encountered in the same\n-      --  declarative part upto and excluding the protected body. This ensures\n+      --  declarative part up to and excluding the protected body. This ensures\n       --  that any annotations referenced by the contract of an entry or\n       --  subprogram body declared within the current protected body are\n       --  available.\n@@ -2810,7 +2810,7 @@ package body Sem_Ch9 is\n    begin\n       --  A task body \"freezes\" the contract of the nearest enclosing package\n       --  body and all other contracts encountered in the same declarative part\n-      --  upto and excluding the task body. This ensures that annotations\n+      --  up to and excluding the task body. This ensures that annotations\n       --  referenced by the contract of an entry or subprogram body declared\n       --  within the current protected body are available.\n "}, {"sha": "3c8b6a5fb2aeac619cbb7f15e8b1cf0cf21ccb08", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4404c2826c45ffb749e868b011c480a9d279f8e7/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4404c2826c45ffb749e868b011c480a9d279f8e7/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=4404c2826c45ffb749e868b011c480a9d279f8e7", "patch": "@@ -358,7 +358,7 @@ package body Sem_Prag is\n \n       Others_Seen : Boolean := False;\n       --  This flag is set when an \"others\" choice is encountered. It is used\n-      --  to detect multiple illegal occurences of \"others\".\n+      --  to detect multiple illegal occurrences of \"others\".\n \n       procedure Analyze_Contract_Case (CCase : Node_Id);\n       --  Verify the legality of a single contract case\n@@ -411,7 +411,7 @@ package body Sem_Prag is\n                Preanalyze_Assert_Expression (Case_Guard, Standard_Boolean);\n \n                --  Emit a clarification message when the case guard contains\n-               --  at leat one undefined reference, possibly due to contract\n+               --  at least one undefined reference, possibly due to contract\n                --  \"freezing\".\n \n                if Errors /= Serious_Errors_Detected\n@@ -426,7 +426,7 @@ package body Sem_Prag is\n             Preanalyze_Assert_Expression (Conseq, Standard_Boolean);\n \n             --  Emit a clarification message when the consequence contains\n-            --  at leat one undefined reference, possibly due to contract\n+            --  at least one undefined reference, possibly due to contract\n             --  \"freezing\".\n \n             if Errors /= Serious_Errors_Detected\n@@ -23230,8 +23230,8 @@ package body Sem_Prag is\n       Errors := Serious_Errors_Detected;\n       Preanalyze_Assert_Expression (Expr, Standard_Boolean);\n \n-      --  Emit a clarification message when the expression contains at leat one\n-      --  undefined reference, possibly due to contract \"freezing\".\n+      --  Emit a clarification message when the expression contains at least\n+      --  one undefined reference, possibly due to contract \"freezing\".\n \n       if Errors /= Serious_Errors_Detected\n         and then Present (Freeze_Id)\n@@ -26712,7 +26712,7 @@ package body Sem_Prag is\n    begin\n       Global_Seen := False;\n \n-      --  Process all formal parameters of entries, [generic] subprograms and\n+      --  Process all formal parameters of entries, [generic] subprograms, and\n       --  their bodies.\n \n       if Ekind_In (Subp_Id, E_Entry,\n@@ -26744,7 +26744,7 @@ package body Sem_Prag is\n                Append_New_Elmt (Formal, Subp_Outputs);\n \n                --  Out parameters can act as inputs when the related type is\n-               --  tagged, unconstrained array, unconstrained record or record\n+               --  tagged, unconstrained array, unconstrained record, or record\n                --  with unconstrained components.\n \n                if Ekind (Formal) = E_Out_Parameter"}, {"sha": "f00639e0c480467ecd8d5f9ed5f098d6e1ebfdde", "filename": "gcc/ada/sem_type.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4404c2826c45ffb749e868b011c480a9d279f8e7/gcc%2Fada%2Fsem_type.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4404c2826c45ffb749e868b011c480a9d279f8e7/gcc%2Fada%2Fsem_type.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_type.adb?ref=4404c2826c45ffb749e868b011c480a9d279f8e7", "patch": "@@ -137,7 +137,7 @@ package body Sem_Type is\n    --  entities. We do not introduce explicit versions of primitive operators\n    --  for each type definition. As a result, there is only one entity\n    --  corresponding to predefined addition on all numeric types, etc. The\n-   --  back-end resolves predefined operators according to their type. The\n+   --  back end resolves predefined operators according to their type. The\n    --  visibility of primitive operations then reduces to the visibility of the\n    --  resulting type: (a + b) is a legal interpretation of some primitive\n    --  operator + if the type of the result (which must also be the type of a\n@@ -1223,7 +1223,7 @@ package body Sem_Type is\n \n       elsif From_Limited_With (T1) then\n \n-         --  If the expected type is the non-limited view of a type, the\n+         --  If the expected type is the nonlimited view of a type, the\n          --  expression may have the limited view. If that one in turn is\n          --  incomplete, get full view if available.\n \n@@ -2620,7 +2620,7 @@ package body Sem_Type is\n \n       if Ekind (Target_Typ) = E_Incomplete_Type then\n \n-         --  We must have either a full view or a non-limited view of the type\n+         --  We must have either a full view or a nonlimited view of the type\n          --  to locate the list of ancestors.\n \n          if Present (Full_View (Target_Typ)) then\n@@ -2630,7 +2630,7 @@ package body Sem_Type is\n             Target_Typ := Non_Limited_View (Target_Typ);\n          end if;\n \n-         --  Protect the frontend against previously detected errors\n+         --  Protect the front end against previously detected errors\n \n          if Ekind (Target_Typ) = E_Incomplete_Type then\n             return False;"}]}