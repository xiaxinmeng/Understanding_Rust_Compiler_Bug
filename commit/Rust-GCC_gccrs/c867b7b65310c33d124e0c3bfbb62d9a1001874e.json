{"sha": "c867b7b65310c33d124e0c3bfbb62d9a1001874e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzg2N2I3YjY1MzEwYzMzZDEyNGUwYzNiZmJiNjJkOWExMDAxODc0ZQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2009-04-20T21:55:26Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2009-04-20T21:55:26Z"}, "message": "re PR fortran/39800 (Rejects PRIVATE TYPE as compont of local type declaration)\n\n2009-04-20  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/39800\n\t* resolve.c (is_sym_host_assoc): New function.\n\t(resolve_fl_derived): Call it when checking PRIVATE components\n\tof PUBLIC derived types.  Change gfc_error to a gfc_notify_std\n\twith std=f2003.\n\t(resolve_fl_namelist): Call it twice to check for host\n\tassociation.\n\n2009-04-20  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/39800\n\t* gfortran.dg/private_type_13.f90: New test.\n\t* gfortran.dg/private_type_2.f90: Add option -std=f95.\n\nFrom-SVN: r146457", "tree": {"sha": "12ea6f91abb779d2653ae066d97bedced48be5d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12ea6f91abb779d2653ae066d97bedced48be5d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c867b7b65310c33d124e0c3bfbb62d9a1001874e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c867b7b65310c33d124e0c3bfbb62d9a1001874e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c867b7b65310c33d124e0c3bfbb62d9a1001874e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c867b7b65310c33d124e0c3bfbb62d9a1001874e/comments", "author": null, "committer": null, "parents": [{"sha": "311fa510e6d737db7727ab6f4bd1c5598f2b217c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/311fa510e6d737db7727ab6f4bd1c5598f2b217c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/311fa510e6d737db7727ab6f4bd1c5598f2b217c"}], "stats": {"total": 77, "additions": 70, "deletions": 7}, "files": [{"sha": "d230333bc3c8a886b9a0c4815e1f0050ab77c4ae", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c867b7b65310c33d124e0c3bfbb62d9a1001874e/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c867b7b65310c33d124e0c3bfbb62d9a1001874e/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c867b7b65310c33d124e0c3bfbb62d9a1001874e", "patch": "@@ -1,3 +1,13 @@\n+2009-04-20  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/39800\n+\t* resolve.c (is_sym_host_assoc): New function.\n+\t(resolve_fl_derived): Call it when checking PRIVATE components\n+\tof PUBLIC derived types.  Change gfc_error to a gfc_notify_std\n+\twith std=f2003.\n+\t(resolve_fl_namelist): Call it twice to check for host\n+\tassociation.\n+\n 2009-04-20  Ian Lance Taylor  <iant@google.com>\n \n \t* module.c (import_iso_c_binding_module): Add casts to enum type."}, {"sha": "f21405057d7444288bb81015cdfe6554d23a2637", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c867b7b65310c33d124e0c3bfbb62d9a1001874e/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c867b7b65310c33d124e0c3bfbb62d9a1001874e/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=c867b7b65310c33d124e0c3bfbb62d9a1001874e", "patch": "@@ -83,6 +83,18 @@ gfc_is_formal_arg (void)\n   return formal_arg_flag;\n }\n \n+/* Is the symbol host associated?  */\n+static bool\n+is_sym_host_assoc (gfc_symbol *sym, gfc_namespace *ns)\n+{\n+  for (ns = ns->parent; ns; ns = ns->parent)\n+    {      \n+      if (sym->ns == ns)\n+\treturn true;\n+    }\n+\n+  return false;\n+}\n \n /* Ensure a typespec used is valid; for instance, TYPE(t) is invalid if t is\n    an ABSTRACT derived-type.  If where is not NULL, an error message with that\n@@ -8895,13 +8907,15 @@ resolve_fl_derived (gfc_symbol *sym)\n       if (c->ts.type == BT_DERIVED\n \t  && sym->component_access != ACCESS_PRIVATE\n \t  && gfc_check_access (sym->attr.access, sym->ns->default_access)\n+\t  && !is_sym_host_assoc (c->ts.derived, sym->ns)\n \t  && !c->ts.derived->attr.use_assoc\n \t  && !gfc_check_access (c->ts.derived->attr.access,\n \t\t\t\tc->ts.derived->ns->default_access))\n \t{\n-\t  gfc_error (\"The component '%s' is a PRIVATE type and cannot be \"\n-\t\t     \"a component of '%s', which is PUBLIC at %L\",\n-\t\t     c->name, sym->name, &sym->declared_at);\n+\t  gfc_notify_std (GFC_STD_F2003, \"Fortran 2003: the component '%s' \"\n+\t\t\t  \"is a PRIVATE type and cannot be a component of \"\n+\t\t\t  \"'%s', which is PUBLIC at %L\", c->name,\n+\t\t\t  sym->name, &sym->declared_at);\n \t  return FAILURE;\n \t}\n \n@@ -8989,9 +9003,7 @@ resolve_fl_namelist (gfc_symbol *sym)\n       for (nl = sym->namelist; nl; nl = nl->next)\n \t{\n \t  if (!nl->sym->attr.use_assoc\n-\t      && !(sym->ns->parent == nl->sym->ns)\n-\t      && !(sym->ns->parent\n-\t\t   && sym->ns->parent->parent == nl->sym->ns)\n+\t      && !is_sym_host_assoc (nl->sym, sym->ns)\n \t      && !gfc_check_access(nl->sym->attr.access,\n \t\t\t\tnl->sym->ns->default_access))\n \t    {\n@@ -9013,7 +9025,7 @@ resolve_fl_namelist (gfc_symbol *sym)\n \n \t  /* Types with private components that are defined in the same module.  */\n \t  if (nl->sym->ts.type == BT_DERIVED\n-\t      && !(sym->ns->parent == nl->sym->ts.derived->ns)\n+\t      && !is_sym_host_assoc (nl->sym->ts.derived, sym->ns)\n \t      && !gfc_check_access (nl->sym->ts.derived->attr.private_comp\n \t\t\t\t\t? ACCESS_PRIVATE : ACCESS_UNKNOWN,\n \t\t\t\t\tnl->sym->ns->default_access))"}, {"sha": "a68a44fc425eddad03d08ff04ad8797e909becf8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c867b7b65310c33d124e0c3bfbb62d9a1001874e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c867b7b65310c33d124e0c3bfbb62d9a1001874e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c867b7b65310c33d124e0c3bfbb62d9a1001874e", "patch": "@@ -1,3 +1,9 @@\n+2009-04-20  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/39800\n+\t* gfortran.dg/private_type_13.f90: New test.\n+\t* gfortran.dg/private_type_2.f90: Add option -std=f95.\n+\n 2009-04-20  Le-Chun Wu  <lcwu@google.com>\n \n \tPR c++/39803"}, {"sha": "77c41a44f12ee4cbefc748895674bfb84d770e99", "filename": "gcc/testsuite/gfortran.dg/private_type_13.f90", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c867b7b65310c33d124e0c3bfbb62d9a1001874e/gcc%2Ftestsuite%2Fgfortran.dg%2Fprivate_type_13.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c867b7b65310c33d124e0c3bfbb62d9a1001874e/gcc%2Ftestsuite%2Fgfortran.dg%2Fprivate_type_13.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fprivate_type_13.f90?ref=c867b7b65310c33d124e0c3bfbb62d9a1001874e", "patch": "@@ -0,0 +1,32 @@\n+! { dg-do compile }\n+! Test fix for F95 part of PR39800, in which the host association of the type 't1'\n+! generated an error.\n+!\n+! Reported to clf by Alexei Matveev <Alexei Matveev@gmail.com> and reported by\n+! Tobias Burnus  <burnus@gcc.gnu.org>\n+!\n+module m\n+  implicit none\n+  private\n+\n+  type :: t1\n+    integer :: i\n+  end type\n+\n+  type :: t2\n+    type(t1) :: j\n+  end type\n+\n+  contains\n+\n+    subroutine sub()\n+      implicit none\n+\n+      type :: t3\n+        type(t1) :: j\n+      end type\n+\n+    end subroutine\n+\n+end module\n+! { dg-final { cleanup-modules \"m\" } }"}, {"sha": "cda00cabbc6e259bd5d04568ffe9f91905c8bfd9", "filename": "gcc/testsuite/gfortran.dg/private_type_2.f90", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c867b7b65310c33d124e0c3bfbb62d9a1001874e/gcc%2Ftestsuite%2Fgfortran.dg%2Fprivate_type_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c867b7b65310c33d124e0c3bfbb62d9a1001874e/gcc%2Ftestsuite%2Fgfortran.dg%2Fprivate_type_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fprivate_type_2.f90?ref=c867b7b65310c33d124e0c3bfbb62d9a1001874e", "patch": "@@ -1,8 +1,11 @@\n ! { dg-do compile }\n+! { dg-options \"-std=f95\" }\n ! PR16404 test 6 - If a component of a derived type is of a type declared to\n ! be private, either the derived type definition must contain the PRIVATE\n ! statement, or the derived type must be private.\n ! Modified on 20051105 to test PR24534.\n+! Modified on 20090419 to use -std=f95, since F2003 allows public types\n+! with private components.\n !\n ! Contributed by Joost VandeVondele <jv244@cam.ac.uk>\n MODULE TEST"}]}