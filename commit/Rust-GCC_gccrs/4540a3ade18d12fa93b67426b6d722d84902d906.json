{"sha": "4540a3ade18d12fa93b67426b6d722d84902d906", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDU0MGEzYWRlMThkMTJmYTkzYjY3NDI2YjZkNzIyZDg0OTAyZDkwNg==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@physics.uc.edu", "date": "2005-12-11T06:59:12Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2005-12-11T06:59:12Z"}, "message": "re PR libobjc/25347 (objc_alignof_type gets the wrong alignment for unions (objc_sizeof_type is wrong also too))\n\n2005-12-11  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        PR libobjc/25347\n        * encoding.c (objc_sizeof_type): Don't handle _C_UNION_B special\n        but use the struct layout functions.\n        (objc_alignof_type): Likewise.\n        (objc_layout_structure): Handle _C_UNION_B also.\n        (objc_layout_structure_next_member): Likewise.\n        (objc_layout_finish_structure): Likewise.\n\n2005-12-11  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        PR libobjc/25347\n        * objc.dg/encode-8.m: New test.\n\nFrom-SVN: r108379", "tree": {"sha": "9f61241fd1b0a770954dad72e767c7926af8ce56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f61241fd1b0a770954dad72e767c7926af8ce56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4540a3ade18d12fa93b67426b6d722d84902d906", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4540a3ade18d12fa93b67426b6d722d84902d906", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4540a3ade18d12fa93b67426b6d722d84902d906", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4540a3ade18d12fa93b67426b6d722d84902d906/comments", "author": null, "committer": null, "parents": [{"sha": "153b4898d243846931a06682cd06ce16b826d755", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/153b4898d243846931a06682cd06ce16b826d755", "html_url": "https://github.com/Rust-GCC/gccrs/commit/153b4898d243846931a06682cd06ce16b826d755"}], "stats": {"total": 105, "additions": 62, "deletions": 43}, "files": [{"sha": "21ec14b7fa228d4249c6dccdb0ee93ced8cb2be3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4540a3ade18d12fa93b67426b6d722d84902d906/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4540a3ade18d12fa93b67426b6d722d84902d906/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4540a3ade18d12fa93b67426b6d722d84902d906", "patch": "@@ -1,3 +1,8 @@\n+2005-12-11  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tPR libobjc/25347\n+\t* objc.dg/encode-8.m: New test.\n+\n 2005-12-11  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR libobjc/25346"}, {"sha": "947a92974a275163ace7ca0005722a5eed4e1242", "filename": "gcc/testsuite/objc.dg/encode-8.m", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4540a3ade18d12fa93b67426b6d722d84902d906/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-8.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4540a3ade18d12fa93b67426b6d722d84902d906/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-8.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-8.m?ref=4540a3ade18d12fa93b67426b6d722d84902d906", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-options \"-fgnu-runtime\" } */\n+/* { dg-do run } */\n+\n+#include <objc/encoding.h>\n+#include <stdlib.h>\n+\n+union f\n+{\n+  char i;\n+  double f1;\n+  short t;\n+};\n+\n+union g\n+{\n+  int i;\n+};\n+\n+\n+int main(void)\n+{\n+  if (objc_sizeof_type (@encode (union f)) != sizeof(union f))\n+   abort ();\n+  if (objc_alignof_type (@encode (union f)) != __alignof__(union f))\n+   abort ();\n+  if (objc_sizeof_type (@encode (union g)) != sizeof(union g))\n+   abort ();\n+  if (objc_alignof_type (@encode (union g)) != __alignof__(union g))\n+   abort ();\n+  return 0;\n+}"}, {"sha": "cb124aa3a18a2c24ccf5da1ff5ac009b842ac84e", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4540a3ade18d12fa93b67426b6d722d84902d906/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4540a3ade18d12fa93b67426b6d722d84902d906/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=4540a3ade18d12fa93b67426b6d722d84902d906", "patch": "@@ -1,3 +1,13 @@\n+2005-12-11  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tPR libobjc/25347\n+\t* encoding.c (objc_sizeof_type): Don't handle _C_UNION_B special\n+\tbut use the struct layout functions.\n+\t(objc_alignof_type): Likewise.\n+\t(objc_layout_structure): Handle _C_UNION_B also.\n+\t(objc_layout_structure_next_member): Likewise.\n+\t(objc_layout_finish_structure): Likewise.\n+\n 2005-12-11  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR libobjc/25346"}, {"sha": "1587c07221488540990fc4b2f3c700a95e74571a", "filename": "libobjc/encoding.c", "status": "modified", "additions": 16, "deletions": 43, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4540a3ade18d12fa93b67426b6d722d84902d906/libobjc%2Fencoding.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4540a3ade18d12fa93b67426b6d722d84902d906/libobjc%2Fencoding.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fencoding.c?ref=4540a3ade18d12fa93b67426b6d722d84902d906", "patch": "@@ -222,6 +222,7 @@ objc_sizeof_type (const char *type)\n       return endByte - startByte;\n     }\n \n+  case _C_UNION_B:\n   case _C_STRUCT_B:\n     {\n       struct objc_struct_layout layout;\n@@ -235,25 +236,6 @@ objc_sizeof_type (const char *type)\n       return size;\n     }\n \n-  case _C_UNION_B:\n-    {\n-      int max_size = 0;\n-      while (*type != _C_UNION_E && *type++ != '=')\n-\t/* do nothing */;\n-      while (*type != _C_UNION_E)\n-\t{\n-\t  /* Skip the variable name if any */\n-\t  if (*type == '\"')\n-\t    {\n-\t      for (type++; *type++ != '\"';)\n-\t\t/* do nothing */;\n-\t    }\n-\t  max_size = MAX (max_size, objc_sizeof_type (type));\n-\t  type = objc_skip_typespec (type);\n-\t}\n-      return max_size;\n-    }\n-\n   default:\n     {\n       objc_error (nil, OBJC_ERR_BAD_TYPE, \"unknown type %s\\n\", type);\n@@ -353,6 +335,7 @@ objc_alignof_type (const char *type)\n     return objc_alignof_type (type);\n \n   case _C_STRUCT_B:\n+  case _C_UNION_B:\n     {\n       struct objc_struct_layout layout;\n       unsigned int align;\n@@ -365,25 +348,6 @@ objc_alignof_type (const char *type)\n       return align;\n     }\n \n-  case _C_UNION_B:\n-    {\n-      int maxalign = 0;\n-      while (*type != _C_UNION_E && *type++ != '=')\n-\t/* do nothing */;\n-      while (*type != _C_UNION_E)\n-\t{\n-\t  /* Skip the variable name if any */\n-\t  if (*type == '\"')\n-\t    {\n-\t      for (type++; *type++ != '\"';)\n-\t\t/* do nothing */;\n-\t    }\n-\t  maxalign = MAX (maxalign, objc_alignof_type (type));\n-\t  type = objc_skip_typespec (type);\n-\t}\n-      return maxalign;\n-    }\n-\n   default:\n     {\n       objc_error (nil, OBJC_ERR_BAD_TYPE, \"unknown type %s\\n\", type);\n@@ -762,13 +726,14 @@ objc_layout_structure (const char *type,\n {\n   const char *ntype;\n \n-  if (*type++ != _C_STRUCT_B)\n+  if (*type != _C_UNION_B && *type != _C_STRUCT_B)\n     {\n       objc_error (nil, OBJC_ERR_BAD_TYPE,\n-                 \"record type expected in objc_layout_structure, got %s\\n\",\n+                 \"record (or union) type expected in objc_layout_structure, got %s\\n\",\n                  type);\n     }\n \n+  type ++;\n   layout->original_type = type;\n \n   /* Skip \"<name>=\" if any. Avoid embedded structures and unions. */\n@@ -801,13 +766,17 @@ objc_layout_structure_next_member (struct objc_struct_layout *layout)\n \n   /* The current type without the type qualifiers */\n   const char *type;\n+  BOOL unionp = layout->original_type[-1] == _C_UNION_B;\n \n   /* Add the size of the previous field to the size of the record.  */\n   if (layout->prev_type)\n     {\n       type = objc_skip_type_qualifiers (layout->prev_type);\n+      if (unionp)\n+        layout->record_size = MAX (layout->record_size,\n+\t\t\t\t   objc_sizeof_type (type) * BITS_PER_UNIT);\n \n-      if (*type != _C_BFLD)\n+      else if (*type != _C_BFLD)\n         layout->record_size += objc_sizeof_type (type) * BITS_PER_UNIT;\n       else {\n         /* Get the bitfield's type */\n@@ -823,7 +792,8 @@ objc_layout_structure_next_member (struct objc_struct_layout *layout)\n       }\n     }\n \n-  if (*layout->type == _C_STRUCT_E)\n+  if ((unionp && *layout->type == _C_UNION_E)\n+      || (!unionp && *layout->type == _C_STRUCT_E))\n     return NO;\n \n   /* Skip the variable name if any */\n@@ -923,7 +893,10 @@ void objc_layout_finish_structure (struct objc_struct_layout *layout,\n                                    unsigned int *size,\n                                    unsigned int *align)\n {\n-  if (layout->type && *layout->type == _C_STRUCT_E)\n+  BOOL unionp = layout->original_type[-1] == _C_UNION_B;\n+  if (layout->type\n+      && ((!unionp && *layout->type == _C_STRUCT_E)\n+       \t  || (unionp && *layout->type == _C_UNION_E)))\n     {\n       /* Work out the alignment of the record as one expression and store\n          in the record type.  Round it up to a multiple of the record's"}]}