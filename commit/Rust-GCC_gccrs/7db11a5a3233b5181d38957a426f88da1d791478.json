{"sha": "7db11a5a3233b5181d38957a426f88da1d791478", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2RiMTFhNWEzMjMzYjUxODFkMzg5NTdhNDI2Zjg4ZGExZDc5MTQ3OA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-04-26T06:10:43Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-04-26T06:10:43Z"}, "message": "re PR bootstrap/70704 (AIX bootstrap comparison failure)\n\n\tPR bootstrap/70704\n\t* configure.ac (--enable-stage1-checking): For --disable-checking or\n\timplicit --enable-checking, make sure extra flag matches in between\n\tstage1 and later checking.\n\t* configure: Regenerated.\ngcc/\n\t* configure.ac (--enable-checking): Document extra flag, for\n\tnon-release builds default to --enable-checking=yes,extra.\n\tIf misc checking and extra checking, define CHECKING_P to 2 instead\n\tof 1.\n\t* common.opt (fchecking=): Add.\n\t* doc/invoke.texi (-fchecking=): Document.\n\t* doc/install.texi: Document --enable-checking changes.\n\t* configure: Regenerated.\n\t* config.in: Regenerated.\ngcc/cp/\n\t* pt.c (build_non_dependent_expr): Use flag_checking > 1 instead of\n\tjust flag_checking.\n\nFrom-SVN: r235430", "tree": {"sha": "3ae8d8abe5093326ad45e3a9961718c34e91ccd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ae8d8abe5093326ad45e3a9961718c34e91ccd9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7db11a5a3233b5181d38957a426f88da1d791478", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7db11a5a3233b5181d38957a426f88da1d791478", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7db11a5a3233b5181d38957a426f88da1d791478", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7db11a5a3233b5181d38957a426f88da1d791478/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "513d5d7f553f880388845950cd771edda6e769fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/513d5d7f553f880388845950cd771edda6e769fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/513d5d7f553f880388845950cd771edda6e769fd"}], "stats": {"total": 135, "additions": 94, "deletions": 41}, "files": [{"sha": "6ee632f7eb671f283a0ad2c7e9d51215aa2fd3e2", "filename": "ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7db11a5a3233b5181d38957a426f88da1d791478/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7db11a5a3233b5181d38957a426f88da1d791478/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=7db11a5a3233b5181d38957a426f88da1d791478", "patch": "@@ -1,3 +1,11 @@\n+2016-04-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR bootstrap/70704\n+\t* configure.ac (--enable-stage1-checking): For --disable-checking or\n+\timplicit --enable-checking, make sure extra flag matches in between\n+\tstage1 and later checking.\n+\t* configure: Regenerated.\n+\n 2016-04-22  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \t* .gitattributes: New file."}, {"sha": "d747385ddbf5d2131af13183a220605e4d057e91", "filename": "configure", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7db11a5a3233b5181d38957a426f88da1d791478/configure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7db11a5a3233b5181d38957a426f88da1d791478/configure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure?ref=7db11a5a3233b5181d38957a426f88da1d791478", "patch": "@@ -14850,16 +14850,17 @@ else\n   # For --disable-checking or implicit --enable-checking=release, avoid\n   # setting --enable-checking=gc in the default stage1 checking for LTO\n   # bootstraps.  See PR62077.\n-  stage1_checking=--enable-checking=release,misc,gimple,rtlflag,tree,types\n   case $BUILD_CONFIG in\n     *lto*)\n-      if test \"x$enable_checking\" = x && \\\n-\t test -d ${srcdir}/gcc && \\\n-\t test x\"`cat ${srcdir}/gcc/DEV-PHASE`\" = xexperimental; then\n-\tstage1_checking=--enable-checking=yes,types\n-      fi;;\n-    *) stage1_checking=--enable-checking=yes,types;;\n+      stage1_checking=--enable-checking=release,misc,gimple,rtlflag,tree,types;;\n+    *)\n+      stage1_checking=--enable-checking=yes,types;;\n   esac\n+  if test \"x$enable_checking\" = x && \\\n+     test -d ${srcdir}/gcc && \\\n+     test x\"`cat ${srcdir}/gcc/DEV-PHASE`\" = xexperimental; then\n+    stage1_checking=yes,types,extra\n+  fi\n else\n   stage1_checking=--enable-checking=$enable_checking,types\n fi"}, {"sha": "1652182fd149093386a9dc81ace27d403f4cc4b2", "filename": "configure.ac", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7db11a5a3233b5181d38957a426f88da1d791478/configure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7db11a5a3233b5181d38957a426f88da1d791478/configure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure.ac?ref=7db11a5a3233b5181d38957a426f88da1d791478", "patch": "@@ -3530,16 +3530,17 @@ AC_ARG_ENABLE(stage1-checking,\n   # For --disable-checking or implicit --enable-checking=release, avoid\n   # setting --enable-checking=gc in the default stage1 checking for LTO\n   # bootstraps.  See PR62077.\n-  stage1_checking=--enable-checking=release,misc,gimple,rtlflag,tree,types\n   case $BUILD_CONFIG in\n     *lto*)\n-      if test \"x$enable_checking\" = x && \\\n-\t test -d ${srcdir}/gcc && \\\n-\t test x\"`cat ${srcdir}/gcc/DEV-PHASE`\" = xexperimental; then\n-\tstage1_checking=--enable-checking=yes,types\n-      fi;;\n-    *) stage1_checking=--enable-checking=yes,types;;\n+      stage1_checking=--enable-checking=release,misc,gimple,rtlflag,tree,types;;\n+    *)\n+      stage1_checking=--enable-checking=yes,types;;\n   esac\n+  if test \"x$enable_checking\" = x && \\\n+     test -d ${srcdir}/gcc && \\\n+     test x\"`cat ${srcdir}/gcc/DEV-PHASE`\" = xexperimental; then\n+    stage1_checking=yes,types,extra\n+  fi\n else\n   stage1_checking=--enable-checking=$enable_checking,types\n fi])"}, {"sha": "21ac47206bbcefd8e0c02f376a53789a34c78eaf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7db11a5a3233b5181d38957a426f88da1d791478/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7db11a5a3233b5181d38957a426f88da1d791478/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7db11a5a3233b5181d38957a426f88da1d791478", "patch": "@@ -1,3 +1,16 @@\n+2016-04-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR bootstrap/70704\n+\t* configure.ac (--enable-checking): Document extra flag, for\n+\tnon-release builds default to --enable-checking=yes,extra.\n+\tIf misc checking and extra checking, define CHECKING_P to 2 instead\n+\tof 1.\n+\t* common.opt (fchecking=): Add.\n+\t* doc/invoke.texi (-fchecking=): Document.\n+\t* doc/install.texi: Document --enable-checking changes.\n+\t* configure: Regenerated.\n+\t* config.in: Regenerated.\n+\n 2016-04-25  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (*movxi_internal_avx512f): Use insn type"}, {"sha": "682cb417e3d1883b62587941359880d7374f1f52", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7db11a5a3233b5181d38957a426f88da1d791478/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7db11a5a3233b5181d38957a426f88da1d791478/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=7db11a5a3233b5181d38957a426f88da1d791478", "patch": "@@ -1029,6 +1029,10 @@ fchecking\n Common Var(flag_checking) Init(CHECKING_P)\n Perform internal consistency checkings.\n \n+fchecking=\n+Common Joined RejectNegative UInteger Var(flag_checking)\n+Perform internal consistency checkings.\n+\n fcombine-stack-adjustments\n Common Report Var(flag_combine_stack_adjustments) Optimization\n Looks for opportunities to reduce stack adjustments and stack references."}, {"sha": "bdde25fe12f4b7f23f3eab09ab23800628d01653", "filename": "gcc/config.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7db11a5a3233b5181d38957a426f88da1d791478/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7db11a5a3233b5181d38957a426f88da1d791478/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=7db11a5a3233b5181d38957a426f88da1d791478", "patch": "@@ -31,7 +31,8 @@\n \n \n /* Define to 1 if you want more run-time sanity checks. This one gets a grab\n-   bag of miscellaneous but relatively cheap checks. */\n+   bag of miscellaneous but relatively cheap checks. Define to 2 if you want\n+   also extra run-time checking that might affect code generation. */\n #ifndef USED_FOR_TARGET\n #undef CHECKING_P\n #endif"}, {"sha": "d4d5ddf693112c229f03e8fcd141e0b8dae79cd2", "filename": "gcc/configure", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7db11a5a3233b5181d38957a426f88da1d791478/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7db11a5a3233b5181d38957a426f88da1d791478/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=7db11a5a3233b5181d38957a426f88da1d791478", "patch": "@@ -1596,7 +1596,7 @@ Optional Features:\n                           enable expensive run-time checks. With LIST, enable\n                           only specific categories of checks. Categories are:\n                           yes,no,all,none,release. Flags are:\n-                          assert,df,fold,gc,gcac,gimple,misc,\n+                          assert,df,extra,fold,gc,gcac,gimple,misc,\n                           rtlflag,rtl,runtime,tree,valgrind,types\n   --enable-coverage[=LEVEL]\n                           enable compiler's code coverage collection. Use to\n@@ -7075,7 +7075,7 @@ else\n \n # Determine the default checks.\n if test x$is_release = x ; then\n-  ac_checking_flags=yes\n+  ac_checking_flags=yes,extra\n else\n   ac_checking_flags=release\n fi\n@@ -7087,32 +7087,33 @@ do\n \tcase $check in\n \t# these set all the flags to specific states\n \tyes)\t\tac_assert_checking=1 ; ac_checking=1 ; ac_df_checking= ;\n-\t\t\tac_fold_checking= ; ac_gc_checking=1 ;\n+\t\t\tac_fold_checking= ; ac_gc_checking=1 ; ac_extra_checking= ;\n \t\t\tac_gc_always_collect= ; ac_gimple_checking=1 ; ac_rtl_checking= ;\n \t\t\tac_rtlflag_checking=1 ; ac_runtime_checking=1 ;\n \t\t\tac_tree_checking=1 ; ac_valgrind_checking= ;\n \t\t\tac_types_checking=1 ;;\n \tno|none)\tac_assert_checking= ; ac_checking= ; ac_df_checking= ;\n-\t\t\tac_fold_checking= ; ac_gc_checking= ;\n+\t\t\tac_fold_checking= ; ac_gc_checking= ; ac_extra_checking= ;\n \t\t\tac_gc_always_collect= ; ac_gimple_checking= ; ac_rtl_checking= ;\n \t\t\tac_rtlflag_checking= ; ac_runtime_checking= ;\n \t\t\tac_tree_checking= ; ac_valgrind_checking= ;\n \t\t\tac_types_checking= ;;\n \tall)\t\tac_assert_checking=1 ; ac_checking=1 ; ac_df_checking=1 ;\n-\t\t\tac_fold_checking=1 ; ac_gc_checking=1 ;\n+\t\t\tac_fold_checking=1 ; ac_gc_checking=1 ; ac_extra_checking=1 ;\n \t\t\tac_gc_always_collect=1 ; ac_gimple_checking=1 ; ac_rtl_checking=1 ;\n \t\t\tac_rtlflag_checking=1 ; ac_runtime_checking=1 ;\n \t\t\tac_tree_checking=1 ; ac_valgrind_checking= ;\n \t\t\tac_types_checking=1 ;;\n \trelease)\tac_assert_checking=1 ; ac_checking= ; ac_df_checking= ;\n-\t\t\tac_fold_checking= ; ac_gc_checking= ;\n+\t\t\tac_fold_checking= ; ac_gc_checking= ; ac_extra_checking= ;\n \t\t\tac_gc_always_collect= ; ac_gimple_checking= ; ac_rtl_checking= ;\n \t\t\tac_rtlflag_checking= ; ac_runtime_checking=1 ;\n \t\t\tac_tree_checking= ; ac_valgrind_checking= ;\n \t\t\tac_types_checking= ;;\n \t# these enable particular checks\n \tassert) \tac_assert_checking=1 ;;\n-\tdf)\t \tac_df_checking=1 ;;\n+\tdf)\t\tac_df_checking=1 ;;\n+\textra)\t\tac_extra_checking=1 ;;\n \tfold)\t\tac_fold_checking=1 ;;\n \tgc)\t\tac_gc_checking=1 ;;\n \tgcac)\t\tac_gc_always_collect=1 ;;\n@@ -7131,8 +7132,13 @@ IFS=\"$ac_save_IFS\"\n \n nocommon_flag=\"\"\n if test x$ac_checking != x ; then\n+  if test x$ac_extra_checking != x ; then\n+    ac_checking=2\n+  fi\n \n-$as_echo \"#define CHECKING_P 1\" >>confdefs.h\n+cat >>confdefs.h <<_ACEOF\n+#define CHECKING_P $ac_checking\n+_ACEOF\n \n   nocommon_flag=-fno-common\n else\n@@ -18453,7 +18459,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 18456 \"configure\"\n+#line 18462 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -18559,7 +18565,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 18562 \"configure\"\n+#line 18568 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "0328a2cd024b4185251cfcc2edfb6bf72534be9f", "filename": "gcc/configure.ac", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7db11a5a3233b5181d38957a426f88da1d791478/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7db11a5a3233b5181d38957a426f88da1d791478/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=7db11a5a3233b5181d38957a426f88da1d791478", "patch": "@@ -516,12 +516,12 @@ AC_ARG_ENABLE(checking,\n \t\t[enable expensive run-time checks.  With LIST,\n \t\t enable only specific categories of checks.\n \t\t Categories are: yes,no,all,none,release.\n-\t\t Flags are: assert,df,fold,gc,gcac,gimple,misc,\n+\t\t Flags are: assert,df,extra,fold,gc,gcac,gimple,misc,\n \t\t rtlflag,rtl,runtime,tree,valgrind,types])],\n [ac_checking_flags=\"${enableval}\"],[\n # Determine the default checks.\n if test x$is_release = x ; then\n-  ac_checking_flags=yes\n+  ac_checking_flags=yes,extra\n else\n   ac_checking_flags=release\n fi])\n@@ -531,32 +531,33 @@ do\n \tcase $check in\n \t# these set all the flags to specific states\n \tyes)\t\tac_assert_checking=1 ; ac_checking=1 ; ac_df_checking= ;\n-\t\t\tac_fold_checking= ; ac_gc_checking=1 ;\n+\t\t\tac_fold_checking= ; ac_gc_checking=1 ; ac_extra_checking= ;\n \t\t\tac_gc_always_collect= ; ac_gimple_checking=1 ; ac_rtl_checking= ;\n \t\t\tac_rtlflag_checking=1 ; ac_runtime_checking=1 ;\n \t\t\tac_tree_checking=1 ; ac_valgrind_checking= ;\n \t\t\tac_types_checking=1 ;;\n \tno|none)\tac_assert_checking= ; ac_checking= ; ac_df_checking= ;\n-\t\t\tac_fold_checking= ; ac_gc_checking= ;\n+\t\t\tac_fold_checking= ; ac_gc_checking= ; ac_extra_checking= ;\n \t\t\tac_gc_always_collect= ; ac_gimple_checking= ; ac_rtl_checking= ;\n \t\t\tac_rtlflag_checking= ; ac_runtime_checking= ;\n \t\t\tac_tree_checking= ; ac_valgrind_checking= ;\n \t\t\tac_types_checking= ;;\n \tall)\t\tac_assert_checking=1 ; ac_checking=1 ; ac_df_checking=1 ;\n-\t\t\tac_fold_checking=1 ; ac_gc_checking=1 ;\n+\t\t\tac_fold_checking=1 ; ac_gc_checking=1 ; ac_extra_checking=1 ;\n \t\t\tac_gc_always_collect=1 ; ac_gimple_checking=1 ; ac_rtl_checking=1 ;\n \t\t\tac_rtlflag_checking=1 ; ac_runtime_checking=1 ;\n \t\t\tac_tree_checking=1 ; ac_valgrind_checking= ;\n \t\t\tac_types_checking=1 ;;\n \trelease)\tac_assert_checking=1 ; ac_checking= ; ac_df_checking= ;\n-\t\t\tac_fold_checking= ; ac_gc_checking= ;\n+\t\t\tac_fold_checking= ; ac_gc_checking= ; ac_extra_checking= ;\n \t\t\tac_gc_always_collect= ; ac_gimple_checking= ; ac_rtl_checking= ;\n \t\t\tac_rtlflag_checking= ; ac_runtime_checking=1 ;\n \t\t\tac_tree_checking= ; ac_valgrind_checking= ;\n \t\t\tac_types_checking= ;;\n \t# these enable particular checks\n \tassert) \tac_assert_checking=1 ;;\n-\tdf)\t \tac_df_checking=1 ;;\n+\tdf)\t\tac_df_checking=1 ;;\n+\textra)\t\tac_extra_checking=1 ;;\n \tfold)\t\tac_fold_checking=1 ;;\n \tgc)\t\tac_gc_checking=1 ;;\n \tgcac)\t\tac_gc_always_collect=1 ;;\n@@ -575,9 +576,13 @@ IFS=\"$ac_save_IFS\"\n \n nocommon_flag=\"\"\n if test x$ac_checking != x ; then\n-  AC_DEFINE(CHECKING_P, 1,\n+  if test x$ac_extra_checking != x ; then\n+    ac_checking=2\n+  fi\n+  AC_DEFINE_UNQUOTED(CHECKING_P, $ac_checking,\n [Define to 1 if you want more run-time sanity checks.  This one gets a grab\n-   bag of miscellaneous but relatively cheap checks.])\n+   bag of miscellaneous but relatively cheap checks.  Define to 2 if you want\n+   also extra run-time checking that might affect code generation.])\n   nocommon_flag=-fno-common\n else\n   AC_DEFINE(CHECKING_P, 0)"}, {"sha": "a81ffa0c0e24938adc424d33cbaecac657d23599", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7db11a5a3233b5181d38957a426f88da1d791478/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7db11a5a3233b5181d38957a426f88da1d791478/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7db11a5a3233b5181d38957a426f88da1d791478", "patch": "@@ -1,3 +1,9 @@\n+2016-04-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR bootstrap/70704\n+\t* pt.c (build_non_dependent_expr): Use flag_checking > 1 instead of\n+\tjust flag_checking.\n+\n 2016-04-25  Jason Merrill  <jason@redhat.com>\n \n \t* tree.c (std_attribute_table): New."}, {"sha": "2d033e3771ad67730a11b46952497d1bb5654e13", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7db11a5a3233b5181d38957a426f88da1d791478/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7db11a5a3233b5181d38957a426f88da1d791478/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=7db11a5a3233b5181d38957a426f88da1d791478", "patch": "@@ -23623,8 +23623,10 @@ build_non_dependent_expr (tree expr)\n \n   /* When checking, try to get a constant value for all non-dependent\n      expressions in order to expose bugs in *_dependent_expression_p\n-     and constexpr.  */\n-  if (flag_checking && cxx_dialect >= cxx11\n+     and constexpr.  This can affect code generation, see PR70704, so\n+     only do this for -fchecking=2.  */\n+  if (flag_checking > 1\n+      && cxx_dialect >= cxx11\n       /* Don't do this during nsdmi parsing as it can lead to\n \t unexpected recursive instantiations.  */\n       && !parsing_nsdmi ())"}, {"sha": "e1ca26c9e384257c53bed79ca199bf32b13409df", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7db11a5a3233b5181d38957a426f88da1d791478/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7db11a5a3233b5181d38957a426f88da1d791478/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=7db11a5a3233b5181d38957a426f88da1d791478", "patch": "@@ -1708,7 +1708,7 @@ When you specify this option, the compiler is built to perform internal\n consistency checks of the requested complexity.  This does not change the\n generated code, but adds error checking within the compiler.  This will\n slow down the compiler and may only work properly if you are building\n-the compiler with GCC@.  This is @samp{yes} by default when building\n+the compiler with GCC@.  This is @samp{yes,extra} by default when building\n from SVN or snapshots, but @samp{release} for releases.  The default\n for building the stage1 compiler is @samp{yes}.  More control\n over the checks may be had by specifying @var{list}.  The categories of\n@@ -1717,8 +1717,11 @@ checks available are @samp{yes} (most common checks\n all), @samp{all} (all but @samp{valgrind}), @samp{release} (cheapest\n checks @samp{assert,runtime}) or @samp{none} (same as @samp{no}).\n Individual checks can be enabled with these flags @samp{assert},\n-@samp{df}, @samp{fold}, @samp{gc}, @samp{gcac} @samp{misc}, @samp{rtl},\n-@samp{rtlflag}, @samp{runtime}, @samp{tree}, and @samp{valgrind}.\n+@samp{df}, @samp{fold}, @samp{gc}, @samp{gcac}, @samp{misc}, @samp{rtl},\n+@samp{rtlflag}, @samp{runtime}, @samp{tree}, @samp{extra} and @samp{valgrind}.\n+@samp{extra} adds for @samp{misc} checking extra checks that might affect\n+code generation and should therefore not differ between stage1 and later\n+stages.\n \n The @samp{valgrind} check requires the external @command{valgrind}\n simulator, available from @uref{http://valgrind.org/}.  The"}, {"sha": "0f97e6d912c8415e2452e4b0ab4161f3d31c749b", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7db11a5a3233b5181d38957a426f88da1d791478/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7db11a5a3233b5181d38957a426f88da1d791478/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=7db11a5a3233b5181d38957a426f88da1d791478", "patch": "@@ -501,7 +501,8 @@ Objective-C and Objective-C++ Dialects}.\n @item Developer Options\n @xref{Developer Options,,GCC Developer Options}.\n @gccoptlist{-d@var{letters}  -dumpspecs  -dumpmachine  -dumpversion @gol\n--fchecking -fdbg-cnt-list -fdbg-cnt=@var{counter-value-list} @gol\n+-fchecking -fchecking=@var{n} -fdbg-cnt-list @gol\n+-fdbg-cnt=@var{counter-value-list} @gol\n -fdisable-ipa-@var{pass_name} @gol\n -fdisable-rtl-@var{pass_name} @gol\n -fdisable-rtl-@var{pass-name}=@var{range-list} @gol\n@@ -12368,10 +12369,12 @@ Here are some examples showing uses of these options.\n @end smallexample\n \n @item -fchecking\n+@itemx -fchecking=@var{n}\n @opindex fchecking\n @opindex fno-checking\n Enable internal consistency checking.  The default depends on\n-the compiler configuration.\n+the compiler configuration.  @option{-fchecking=2} enables further\n+internal consistency checking that might affect code generation.\n \n @item -frandom-seed=@var{string}\n @opindex frandom-seed"}]}