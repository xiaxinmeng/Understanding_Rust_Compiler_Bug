{"sha": "fc9c4e5fc50c7fcbd27d6cb3dd372f7da8216954", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM5YzRlNWZjNTBjN2ZjYmQyN2Q2Y2IzZGQzNzJmN2RhODIxNjk1NA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-22T07:52:04Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-22T07:52:04Z"}, "message": "debug: Fix __int128 handling in dwarf2out [PR99562]\n\nThe PR66728 changes broke __int128 handling.\nIt emits wide_int numbers in their minimum unsigned precision\nrather than in their full precision.\nThe problem is then that e.g. the DW_OP_implicit_value path:\n          int_mode = as_a <scalar_int_mode> (mode);\n          loc_result = new_loc_descr (DW_OP_implicit_value,\n                                      GET_MODE_SIZE (int_mode), 0);\n          loc_result->dw_loc_oprnd2.val_class = dw_val_class_wide_int;\n          loc_result->dw_loc_oprnd2.v.val_wide = ggc_alloc<wide_int> ();\n          *loc_result->dw_loc_oprnd2.v.val_wide = rtx_mode_t (rtl, int_mode);\nemits invalid DWARF.  In particular this patch fixes there multiple\noccurences of:\n        .byte   0x9e    # DW_OP_implicit_value\n        .uleb128 0x10\n        .quad   0xffffffffffffffff\n+       .quad   0\n        .quad   .LVL46  # Location list begin address (*.LLST40)\n        .quad   .LFE14  # Location list end address (*.LLST40)\nwhere we said the value has 16 byte size but then only emitted 8 byte value.\nMy understanding is that most of the places that use val_wide expect\nthe precision they chose (the one of the mode they want etc.), the only\nexception is the add_const_value_attribute case where it deals with\nVOIDmode CONST_WIDE_INTs, for that I agree when we don't have a mode\nwe need to fallback to minimum precision (not sure if maximum of\nmin_precision UNSIGNED and SIGNED wouldn't be better, then consumers\nwould know if it is signed or unsigned by looking at the MSB),\nbut that code already computes the precision, just decided to\ncreate the wide_int with much larger precision (e.g. 512 bit\non x86_64).\n\n2021-03-22  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR debug/99562\n\tPR debug/66728\n\t* dwarf2out.c (get_full_len): Use get_precision rather than\n\tmin_precision.\n\t(add_const_value_attribute): Make sure add_AT_wide argument has\n\tprecision prec rather than some very wide one.", "tree": {"sha": "accd7753bcb93032dc07ee86dda564585d518940", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/accd7753bcb93032dc07ee86dda564585d518940"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc9c4e5fc50c7fcbd27d6cb3dd372f7da8216954", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc9c4e5fc50c7fcbd27d6cb3dd372f7da8216954", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc9c4e5fc50c7fcbd27d6cb3dd372f7da8216954", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc9c4e5fc50c7fcbd27d6cb3dd372f7da8216954/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ec7641ee1823a73b560e2ed2518bf728ac9e22e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ec7641ee1823a73b560e2ed2518bf728ac9e22e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ec7641ee1823a73b560e2ed2518bf728ac9e22e"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "395170a47f72f006f3e10aaa767ff6fa6cde14e7", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc9c4e5fc50c7fcbd27d6cb3dd372f7da8216954/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc9c4e5fc50c7fcbd27d6cb3dd372f7da8216954/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=fc9c4e5fc50c7fcbd27d6cb3dd372f7da8216954", "patch": "@@ -385,13 +385,12 @@ dump_struct_debug (tree type, enum debug_info_usage usage,\n #endif\n \n /* Get the number of HOST_WIDE_INTs needed to represent the precision\n-   of the number.  Some constants have a large uniform precision, so\n-   we get the precision needed for the actual value of the number.  */\n+   of the number.  */\n \n static unsigned int\n get_full_len (const wide_int &op)\n {\n-  int prec = wi::min_precision (op, UNSIGNED);\n+  int prec = wi::get_precision (op);\n   return ((prec + HOST_BITS_PER_WIDE_INT - 1)\n \t  / HOST_BITS_PER_WIDE_INT);\n }\n@@ -19741,8 +19740,9 @@ add_const_value_attribute (dw_die_ref die, rtx rtl)\n       {\n \twide_int w1 = rtx_mode_t (rtl, MAX_MODE_INT);\n \tunsigned int prec = MIN (wi::min_precision (w1, UNSIGNED),\n-\t\t\t\t (unsigned int)CONST_WIDE_INT_NUNITS (rtl) * HOST_BITS_PER_WIDE_INT);\n-\twide_int w = wi::zext (w1, prec);\n+\t\t\t\t (unsigned int) CONST_WIDE_INT_NUNITS (rtl)\n+\t\t\t\t * HOST_BITS_PER_WIDE_INT);\n+\twide_int w = wide_int::from (w1, prec, UNSIGNED);\n \tadd_AT_wide (die, DW_AT_const_value, w);\n       }\n       return true;"}]}