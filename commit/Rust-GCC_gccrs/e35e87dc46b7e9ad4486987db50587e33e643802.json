{"sha": "e35e87dc46b7e9ad4486987db50587e33e643802", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTM1ZTg3ZGM0NmI3ZTlhZDQ0ODY5ODdkYjUwNTg3ZTMzZTY0MzgwMg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2013-01-07T18:30:11Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2013-01-07T18:30:11Z"}, "message": "re PR fortran/55763 (Issues with some simpler CLASS(*) programs)\n\n2013-01-07  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/55763\n        * gfortran.h (gfc_check_assign_symbol): Update prototype.\n        * decl.c (add_init_expr_to_sym, do_parm): Update call.\n        * expr.c (gfc_check_assign_symbol): Handle BT_CLASS and\n        improve error location; support components.\n        (gfc_check_pointer_assign): Handle component assignments.\n        * resolve.c (resolve_fl_derived0): Call gfc_check_assign_symbol.\n        (resolve_values): Update call.\n        (resolve_structure_cons): Avoid double diagnostic.\n\n2013-01-07  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/55763\n        * gfortran.dg/pointer_init_2.f90: Update dg-error.\n        * gfortran.dg/pointer_init_7.f90: New.\n\nFrom-SVN: r194990", "tree": {"sha": "3a9480c88f19cd4763bd9faefc109274acf20a90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a9480c88f19cd4763bd9faefc109274acf20a90"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e35e87dc46b7e9ad4486987db50587e33e643802", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e35e87dc46b7e9ad4486987db50587e33e643802", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e35e87dc46b7e9ad4486987db50587e33e643802", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e35e87dc46b7e9ad4486987db50587e33e643802/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7f7162cf5700702acde3db65fbe4cca61dbe1a2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f7162cf5700702acde3db65fbe4cca61dbe1a2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f7162cf5700702acde3db65fbe4cca61dbe1a2f"}], "stats": {"total": 197, "additions": 160, "deletions": 37}, "files": [{"sha": "e245fcb68fe71186e97f51a993ef89cdb3545fed", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e35e87dc46b7e9ad4486987db50587e33e643802/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e35e87dc46b7e9ad4486987db50587e33e643802/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e35e87dc46b7e9ad4486987db50587e33e643802", "patch": "@@ -1,3 +1,15 @@\n+2013-01-07  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/55763\n+\t* gfortran.h (gfc_check_assign_symbol): Update prototype.\n+\t* decl.c (add_init_expr_to_sym, do_parm): Update call.\n+\t* expr.c (gfc_check_assign_symbol): Handle BT_CLASS and\n+\timprove error location; support components.\n+\t(gfc_check_pointer_assign): Handle component assignments.\n+\t* resolve.c (resolve_fl_derived0): Call gfc_check_assign_symbol.\n+\t(resolve_values): Update call.\n+\t(resolve_structure_cons): Avoid double diagnostic.\n+\n 2013-01-07  Tobias Burnus  <burnus@net-b.de>\n \t    Thomas Koenig  <tkoenig@gcc.gnu.org>\n "}, {"sha": "3a36cad3ac828c781ee705fee0ef612a8e9fab1d", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e35e87dc46b7e9ad4486987db50587e33e643802/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e35e87dc46b7e9ad4486987db50587e33e643802/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=e35e87dc46b7e9ad4486987db50587e33e643802", "patch": "@@ -1353,14 +1353,14 @@ add_init_expr_to_sym (const char *name, gfc_expr **initp, locus *var_locus)\n       if (sym->ts.type != BT_DERIVED && init->ts.type != BT_DERIVED\n \t  && sym->ts.type != BT_CLASS && init->ts.type != BT_CLASS\n \t  && !sym->attr.proc_pointer \n-\t  && gfc_check_assign_symbol (sym, init) == FAILURE)\n+\t  && gfc_check_assign_symbol (sym, NULL, init) == FAILURE)\n \treturn FAILURE;\n \n       if (sym->ts.type == BT_CHARACTER && sym->ts.u.cl\n \t    && init->ts.type == BT_CHARACTER)\n \t{\n \t  /* Update symbol character length according initializer.  */\n-\t  if (gfc_check_assign_symbol (sym, init) == FAILURE)\n+\t  if (gfc_check_assign_symbol (sym, NULL, init) == FAILURE)\n \t    return FAILURE;\n \n \t  if (sym->ts.u.cl->length == NULL)\n@@ -6955,7 +6955,7 @@ do_parm (void)\n       goto cleanup;\n     }\n \n-  if (gfc_check_assign_symbol (sym, init) == FAILURE\n+  if (gfc_check_assign_symbol (sym, NULL, init) == FAILURE\n       || gfc_add_flavor (&sym->attr, FL_PARAMETER, sym->name, NULL) == FAILURE)\n     {\n       m = MATCH_ERROR;"}, {"sha": "68079a85b51ab4f2e171ef49e7367953944abf49", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 45, "deletions": 18, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e35e87dc46b7e9ad4486987db50587e33e643802/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e35e87dc46b7e9ad4486987db50587e33e643802/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=e35e87dc46b7e9ad4486987db50587e33e643802", "patch": "@@ -3291,22 +3291,21 @@ gfc_check_assign (gfc_expr *lvalue, gfc_expr *rvalue, int conform)\n gfc_try\n gfc_check_pointer_assign (gfc_expr *lvalue, gfc_expr *rvalue)\n {\n-  symbol_attribute attr;\n+  symbol_attribute attr, lhs_attr;\n   gfc_ref *ref;\n   bool is_pure, is_implicit_pure, rank_remap;\n   int proc_pointer;\n \n-  if (lvalue->symtree->n.sym->ts.type == BT_UNKNOWN\n-      && !lvalue->symtree->n.sym->attr.proc_pointer)\n+  lhs_attr = gfc_expr_attr (lvalue);\n+  if (lvalue->ts.type == BT_UNKNOWN && !lhs_attr.proc_pointer)\n     {\n       gfc_error (\"Pointer assignment target is not a POINTER at %L\",\n \t\t &lvalue->where);\n       return FAILURE;\n     }\n \n-  if (lvalue->symtree->n.sym->attr.flavor == FL_PROCEDURE\n-      && lvalue->symtree->n.sym->attr.use_assoc\n-      && !lvalue->symtree->n.sym->attr.proc_pointer)\n+  if (lhs_attr.flavor == FL_PROCEDURE && lhs_attr.use_assoc\n+      && !lhs_attr.proc_pointer)\n     {\n       gfc_error (\"'%s' in the pointer assignment at %L cannot be an \"\n \t\t \"l-value since it is a procedure\",\n@@ -3735,10 +3734,11 @@ gfc_check_pointer_assign (gfc_expr *lvalue, gfc_expr *rvalue)\n    symbol.  Used for initialization assignments.  */\n \n gfc_try\n-gfc_check_assign_symbol (gfc_symbol *sym, gfc_expr *rvalue)\n+gfc_check_assign_symbol (gfc_symbol *sym, gfc_component *comp, gfc_expr *rvalue)\n {\n   gfc_expr lvalue;\n   gfc_try r;\n+  bool pointer, proc_pointer;\n \n   memset (&lvalue, '\\0', sizeof (gfc_expr));\n \n@@ -3750,9 +3750,27 @@ gfc_check_assign_symbol (gfc_symbol *sym, gfc_expr *rvalue)\n   lvalue.symtree->n.sym = sym;\n   lvalue.where = sym->declared_at;\n \n-  if (sym->attr.pointer || sym->attr.proc_pointer\n-      || (sym->ts.type == BT_CLASS && CLASS_DATA (sym)->attr.class_pointer\n-\t  && rvalue->expr_type == EXPR_NULL))\n+  if (comp)\n+    {\n+      lvalue.ref = gfc_get_ref ();\n+      lvalue.ref->type = REF_COMPONENT;\n+      lvalue.ref->u.c.component = comp;\n+      lvalue.ref->u.c.sym = sym;\n+      lvalue.ts = comp->ts;\n+      lvalue.rank = comp->as ? comp->as->rank : 0;\n+      lvalue.where = comp->loc;\n+      pointer = comp->ts.type == BT_CLASS &&  CLASS_DATA (comp)\n+\t\t? CLASS_DATA (comp)->attr.class_pointer : comp->attr.pointer;\n+      proc_pointer = comp->attr.proc_pointer;\n+    }\n+  else\n+    {\n+      pointer = sym->ts.type == BT_CLASS &&  CLASS_DATA (sym)\n+\t\t? CLASS_DATA (sym)->attr.class_pointer : sym->attr.pointer;\n+      proc_pointer = sym->attr.proc_pointer;\n+    }\n+\n+  if (pointer || proc_pointer)\n     r = gfc_check_pointer_assign (&lvalue, rvalue);\n   else\n     r = gfc_check_assign (&lvalue, rvalue, 1);\n@@ -3762,32 +3780,41 @@ gfc_check_assign_symbol (gfc_symbol *sym, gfc_expr *rvalue)\n   if (r == FAILURE)\n     return r;\n \n-  if (sym->attr.pointer && rvalue->expr_type != EXPR_NULL)\n+  if (pointer && rvalue->expr_type != EXPR_NULL)\n     {\n       /* F08:C461. Additional checks for pointer initialization.  */\n       symbol_attribute attr;\n       attr = gfc_expr_attr (rvalue);\n       if (attr.allocatable)\n \t{\n-\t  gfc_error (\"Pointer initialization target at %C \"\n-\t             \"must not be ALLOCATABLE \");\n+\t  gfc_error (\"Pointer initialization target at %L \"\n+\t             \"must not be ALLOCATABLE\", &rvalue->where);\n \t  return FAILURE;\n \t}\n       if (!attr.target || attr.pointer)\n \t{\n-\t  gfc_error (\"Pointer initialization target at %C \"\n-\t\t     \"must have the TARGET attribute\");\n+\t  gfc_error (\"Pointer initialization target at %L \"\n+\t\t     \"must have the TARGET attribute\", &rvalue->where);\n \t  return FAILURE;\n \t}\n+\n+      if (!attr.save && rvalue->expr_type == EXPR_VARIABLE\n+\t  && rvalue->symtree->n.sym->ns->proc_name\n+\t  && rvalue->symtree->n.sym->ns->proc_name->attr.is_main_program)\n+\t{\n+\t  rvalue->symtree->n.sym->ns->proc_name->attr.save = SAVE_IMPLICIT;\n+\t  attr.save = SAVE_IMPLICIT;\n+\t}\n+\n       if (!attr.save)\n \t{\n-\t  gfc_error (\"Pointer initialization target at %C \"\n-\t\t     \"must have the SAVE attribute\");\n+\t  gfc_error (\"Pointer initialization target at %L \"\n+\t\t     \"must have the SAVE attribute\", &rvalue->where);\n \t  return FAILURE;\n \t}\n     }\n \n-  if (sym->attr.proc_pointer && rvalue->expr_type != EXPR_NULL)\n+  if (proc_pointer && rvalue->expr_type != EXPR_NULL)\n     {\n       /* F08:C1220. Additional checks for procedure pointer initialization.  */\n       symbol_attribute attr = gfc_expr_attr (rvalue);"}, {"sha": "99eeeecdcad19dab4717e61fb4c0ea25fe346271", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e35e87dc46b7e9ad4486987db50587e33e643802/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e35e87dc46b7e9ad4486987db50587e33e643802/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=e35e87dc46b7e9ad4486987db50587e33e643802", "patch": "@@ -2770,7 +2770,7 @@ int gfc_kind_max (gfc_expr *, gfc_expr *);\n gfc_try gfc_check_conformance (gfc_expr *, gfc_expr *, const char *, ...) ATTRIBUTE_PRINTF_3;\n gfc_try gfc_check_assign (gfc_expr *, gfc_expr *, int);\n gfc_try gfc_check_pointer_assign (gfc_expr *, gfc_expr *);\n-gfc_try gfc_check_assign_symbol (gfc_symbol *, gfc_expr *);\n+gfc_try gfc_check_assign_symbol (gfc_symbol *, gfc_component *, gfc_expr *);\n \n bool gfc_has_default_initializer (gfc_symbol *);\n gfc_expr *gfc_default_initializer (gfc_typespec *);"}, {"sha": "99c1996d9a2acf385595a553439321c35273cd4c", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e35e87dc46b7e9ad4486987db50587e33e643802/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e35e87dc46b7e9ad4486987db50587e33e643802/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=e35e87dc46b7e9ad4486987db50587e33e643802", "patch": "@@ -1105,23 +1105,28 @@ resolve_structure_cons (gfc_expr *expr, int init)\n       if (!comp->attr.proc_pointer &&\n \t  !gfc_compare_types (&cons->expr->ts, &comp->ts))\n \t{\n-\t  t = FAILURE;\n \t  if (strcmp (comp->name, \"_extends\") == 0)\n \t    {\n \t      /* Can afford to be brutal with the _extends initializer.\n \t\t The derived type can get lost because it is PRIVATE\n \t\t but it is not usage constrained by the standard.  */\n \t      cons->expr->ts = comp->ts;\n-\t      t = SUCCESS;\n \t    }\n \t  else if (comp->attr.pointer && cons->expr->ts.type != BT_UNKNOWN)\n-\t    gfc_error (\"The element in the structure constructor at %L, \"\n-\t\t       \"for pointer component '%s', is %s but should be %s\",\n-\t\t       &cons->expr->where, comp->name,\n-\t\t       gfc_basic_typename (cons->expr->ts.type),\n-\t\t       gfc_basic_typename (comp->ts.type));\n+\t    {\n+\t      gfc_error (\"The element in the structure constructor at %L, \"\n+\t\t\t \"for pointer component '%s', is %s but should be %s\",\n+\t\t\t &cons->expr->where, comp->name,\n+\t\t\t gfc_basic_typename (cons->expr->ts.type),\n+\t\t\t gfc_basic_typename (comp->ts.type));\n+\t      t = FAILURE;\n+\t    }\n \t  else\n-\t    t = gfc_convert_type (cons->expr, &comp->ts, 1);\n+\t    {\n+\t      gfc_try t2 = gfc_convert_type (cons->expr, &comp->ts, 1);\n+\t      if (t != FAILURE)\n+\t\tt = t2;\n+\t    }\n \t}\n \n       /* For strings, the length of the constructor should be the same as\n@@ -10450,7 +10455,7 @@ resolve_values (gfc_symbol *sym)\n   if (t == FAILURE)\n     return;\n \n-  gfc_check_assign_symbol (sym, sym->value);\n+  gfc_check_assign_symbol (sym, NULL, sym->value);\n }\n \n \n@@ -12874,6 +12879,10 @@ resolve_fl_derived0 (gfc_symbol *sym)\n \t\t\t\t\t   || c->attr.proc_pointer\n \t\t\t\t\t   || c->attr.allocatable)) == FAILURE)\n \treturn FAILURE;\n+\n+      if (c->initializer && !sym->attr.vtype\n+\t  && gfc_check_assign_symbol (sym, c, c->initializer) == FAILURE)\n+\treturn FAILURE;\n     }\n \n   check_defined_assignments (sym);"}, {"sha": "7335c7323007e7413eb0a76f5f7bed080e19eb0f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e35e87dc46b7e9ad4486987db50587e33e643802/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e35e87dc46b7e9ad4486987db50587e33e643802/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e35e87dc46b7e9ad4486987db50587e33e643802", "patch": "@@ -1,3 +1,9 @@\n+2013-01-07  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/55763\n+\t* gfortran.dg/pointer_init_2.f90: Update dg-error.\n+\t* gfortran.dg/pointer_init_7.f90: New.\n+\n 2013-01-07  Richard Biener  <rguenther@suse.de>\n \n \t* gcc.dg/lto/pr55525_0.c (s): Size like char *."}, {"sha": "a280a3e4f989f49cbc179544f60bae808aac67a2", "filename": "gcc/testsuite/gfortran.dg/pointer_init_2.f90", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e35e87dc46b7e9ad4486987db50587e33e643802/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_init_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e35e87dc46b7e9ad4486987db50587e33e643802/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_init_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_init_2.f90?ref=e35e87dc46b7e9ad4486987db50587e33e643802", "patch": "@@ -24,13 +24,26 @@ subroutine sub\n \n   type :: t\n     integer, pointer :: dpc0 => 13  ! { dg-error \"Error in pointer initialization\" }\n-    integer, pointer :: dpc1 => r   ! { dg-error \"is REAL but should be INTEGER\" }\n-    integer, pointer :: dpc2 => v   ! { dg-error \"rank of the element.*does not match\" }\n-    integer, pointer :: dpc3 => i   ! { dg-error \"should be a POINTER or a TARGET\" }\n+  end type t\n+\n+  type t2\n+    integer, pointer :: dpc1 => r   ! { dg-error \"attempted assignment of REAL.4. to INTEGER.4.\" }\n+  end type t2\n+\n+  type t3\n+    integer, pointer :: dpc2 => v   ! { dg-error \"Different ranks in pointer assignment\" }\n+  end type t3\n+\n+  type t4\n+    integer, pointer :: dpc3 => i   ! { dg-error \"Pointer assignment target is neither TARGET nor POINTER\" }\n+  end type t4\n+\n+  type t5\n     integer, pointer :: dpc4 => j   ! { dg-error \"must have the SAVE attribute\" }\n-    integer, pointer :: dpc5 => a   ! { dg-error \"must not be ALLOCATABLE\" }\n-  end type\n+  end type t5\n \n-  type(t) ::u\n+  type t6\n+    integer, pointer :: dpc5 => a   ! { dg-error \"must not be ALLOCATABLE\" }\n+  end type t6\n \n end subroutine"}, {"sha": "dfde6156e66b4fd4ed0aa742ea4aac479bc025ac", "filename": "gcc/testsuite/gfortran.dg/pointer_init_7.f90", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e35e87dc46b7e9ad4486987db50587e33e643802/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_init_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e35e87dc46b7e9ad4486987db50587e33e643802/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_init_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_init_7.f90?ref=e35e87dc46b7e9ad4486987db50587e33e643802", "patch": "@@ -0,0 +1,56 @@\n+! { dg-do compile }\n+!\n+! PR fortran/55763\n+!\n+\n+subroutine sub()\n+  type t\n+    integer :: i\n+  end type t\n+\n+  type(t), target :: tgt\n+  type(t), target, save :: tgt2(2)\n+\n+  type t2a\n+    type(t),  pointer :: cmp1 => tgt   ! { dg-error \"Pointer initialization target at .1. must have the SAVE attribute\" }\n+  end type t2a\n+\n+  type t2b\n+    class(t), pointer :: cmp2 => tgt   ! { dg-error \"Pointer initialization target at .1. must have the SAVE attribute\" }\n+  end type t2b\n+\n+  type t2c\n+    class(t), pointer :: cmp3 => tgt   ! { dg-error \"Pointer initialization target at .1. must have the SAVE attribute\" }\n+  end type t2c\n+\n+  type t2d\n+    integer,  pointer :: cmp4 => tgt%i ! { dg-error \"Pointer initialization target at .1. must have the SAVE attribute\" }\n+  end type t2d\n+\n+  type(t),  pointer :: w => tgt   ! { dg-error \"Pointer initialization target at .1. must have the SAVE attribute\" }\n+  class(t), pointer :: x => tgt   ! { dg-error \"Pointer initialization target at .1. must have the SAVE attribute\" }\n+  class(*), pointer :: y => tgt   ! { dg-error \"Pointer initialization target at .1. must have the SAVE attribute\" }\n+  integer,  pointer :: z => tgt%i ! { dg-error \"Pointer initialization target at .1. must have the SAVE attribute\" }\n+end subroutine\n+\n+program main\n+  type t3\n+    integer :: j\n+  end type t3\n+\n+  type(t3), target :: tgt\n+\n+  type t4\n+    type(t3),  pointer :: cmp1 => tgt   ! OK\n+    class(t3), pointer :: cmp2 => tgt   ! OK\n+    class(t3), pointer :: cmp3 => tgt   ! OK\n+    integer,   pointer :: cmp4 => tgt%j ! OK\n+  end type t4\n+\n+  type(t3), target :: mytarget\n+\n+  type(t3),  pointer :: a => mytarget   ! OK\n+  class(t3), pointer :: b => mytarget   ! OK\n+  class(*),  pointer :: c => mytarget   ! OK\n+  integer,   pointer :: d => mytarget%j ! OK\n+end program main"}]}