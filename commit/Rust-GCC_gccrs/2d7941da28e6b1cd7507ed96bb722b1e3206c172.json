{"sha": "2d7941da28e6b1cd7507ed96bb722b1e3206c172", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQ3OTQxZGEyOGU2YjFjZDc1MDdlZDk2YmI3MjJiMWUzMjA2YzE3Mg==", "commit": {"author": {"name": "Michael Meissner", "email": "Michael Meissner meissner@linux.ibm.com", "date": "2020-05-05T17:39:52Z"}, "committer": {"name": "Michael Meissner", "email": "Michael Meissner meissner@linux.ibm.com", "date": "2020-05-05T17:39:52Z"}, "message": "Patch ieee128-lib-patch009b", "tree": {"sha": "1a4d250c09e8b8404e302464836a2b833797f919", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a4d250c09e8b8404e302464836a2b833797f919"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d7941da28e6b1cd7507ed96bb722b1e3206c172", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d7941da28e6b1cd7507ed96bb722b1e3206c172", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d7941da28e6b1cd7507ed96bb722b1e3206c172", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d7941da28e6b1cd7507ed96bb722b1e3206c172/comments", "author": null, "committer": null, "parents": [{"sha": "914ba0448eb936df1653cffa3ce02e1d14ef720e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/914ba0448eb936df1653cffa3ce02e1d14ef720e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/914ba0448eb936df1653cffa3ce02e1d14ef720e"}], "stats": {"total": 69, "additions": 69, "deletions": 0}, "files": [{"sha": "5711054f3a4371b0c6a72a7f5bd03acd9487014c", "filename": "gcc/ChangeLog.meissner", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d7941da28e6b1cd7507ed96bb722b1e3206c172/gcc%2FChangeLog.meissner", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d7941da28e6b1cd7507ed96bb722b1e3206c172/gcc%2FChangeLog.meissner", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.meissner?ref=2d7941da28e6b1cd7507ed96bb722b1e3206c172", "patch": "@@ -1,3 +1,21 @@\n+2020-05-05  Michael Meissner  <meissner@linux.ibm.com>\n+\n+\t(ieee128-lib-patch009b)\n+\t* config/rs6000/rs6000-builtin.def (scalar_extract_exptf): Add\n+\tlong double versions of the float128 built-in functions.\n+\t(scalar_extract_sigtf): Likewise.\n+\t(scalar_test_neg_tf): Likewise.\n+\t(scalar_insert_exp_tf): Likewise.\n+\t(scalar_insert_exp_tfp): Likewise.\n+\t(scalar_cmp_exp_tf_gt): Likewise.\n+\t(scalar_cmp_exp_tf_lt): Likewise.\n+\t(scalar_cmp_exp_tf_eq): Likewise.\n+\t(scalar_cmp_exp_tf_unordered): Likewise.\n+\t* config/rs6000/rs6000-call.c (altivec_overloaded_builtins): Add\n+\tlong double variants of the float128 built-in functions.\n+\t(rs6000_expand_builtin): Convert some more float128 built-in\n+\tfunctions into supporting long double\n+\n 2020-05-05  Michael Meissner  <meissner@linux.ibm.com>\n \n \t(ieee128-lib-patch007b)"}, {"sha": "e8961f24317217823fb4be8d82f75a60db767548", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d7941da28e6b1cd7507ed96bb722b1e3206c172/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d7941da28e6b1cd7507ed96bb722b1e3206c172/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=2d7941da28e6b1cd7507ed96bb722b1e3206c172", "patch": "@@ -2154,8 +2154,11 @@ BU_P9V_64BIT_VSX_1 (VSESDP,\t\"scalar_extract_sig\",\tCONST,\txsxsigdp)\n \n BU_FLOAT128_HW_VSX_1 (VSEEQP,\t\"scalar_extract_expq\",\tCONST,\txsxexpqp_kf)\n BU_FLOAT128_HW_VSX_1 (VSESQP,\t\"scalar_extract_sigq\",\tCONST,\txsxsigqp_kf)\n+BU_FLOAT128_HW_VSX_1 (VSEETF,\t\"scalar_extract_exptf\",\tCONST,\txsxexpqp_tf)\n+BU_FLOAT128_HW_VSX_1 (VSESTF,\t\"scalar_extract_sigtf\",\tCONST,\txsxsigqp_tf)\n \n BU_FLOAT128_HW_VSX_1 (VSTDCNQP, \"scalar_test_neg_qp\",\tCONST,\txststdcnegqp_kf)\n+BU_FLOAT128_HW_VSX_1 (VSTDCNTF, \"scalar_test_neg_tf\",\tCONST,\txststdcnegqp_tf)\n BU_P9V_VSX_1 (VSTDCNDP,\t\"scalar_test_neg_dp\",\tCONST,\txststdcnegdp)\n BU_P9V_VSX_1 (VSTDCNSP,\t\"scalar_test_neg_sp\",\tCONST,\txststdcnegsp)\n \n@@ -2173,6 +2176,8 @@ BU_P9V_64BIT_VSX_2 (VSIEDPF,\t\"scalar_insert_exp_dp\",\tCONST,\txsiexpdpf)\n \n BU_FLOAT128_HW_VSX_2 (VSIEQP,\t\"scalar_insert_exp_q\",\tCONST,\txsiexpqp_kf)\n BU_FLOAT128_HW_VSX_2 (VSIEQPF,\t\"scalar_insert_exp_qp\",\tCONST,\txsiexpqpf_kf)\n+BU_FLOAT128_HW_VSX_2 (VSIETF,\t\"scalar_insert_exp_tf\",\tCONST,\txsiexpqp_tf)\n+BU_FLOAT128_HW_VSX_2 (VSIETFF,\t\"scalar_insert_exp_tfp\", CONST,\txsiexpqpf_tf)\n \n BU_P9V_VSX_2 (VSCEDPGT,\t\"scalar_cmp_exp_dp_gt\",\tCONST,\txscmpexpdp_gt)\n BU_P9V_VSX_2 (VSCEDPLT,\t\"scalar_cmp_exp_dp_lt\",\tCONST,\txscmpexpdp_lt)\n@@ -2184,7 +2189,13 @@ BU_P9V_VSX_2 (VSCEQPLT,\t\"scalar_cmp_exp_qp_lt\",\tCONST,\txscmpexpqp_lt_kf)\n BU_P9V_VSX_2 (VSCEQPEQ,\t\"scalar_cmp_exp_qp_eq\",\tCONST,\txscmpexpqp_eq_kf)\n BU_P9V_VSX_2 (VSCEQPUO,\t\"scalar_cmp_exp_qp_unordered\",\tCONST,\txscmpexpqp_unordered_kf)\n \n+BU_P9V_VSX_2 (VSCETFGT,\t\"scalar_cmp_exp_tf_gt\",\tCONST,\txscmpexpqp_gt_tf)\n+BU_P9V_VSX_2 (VSCETFLT,\t\"scalar_cmp_exp_tf_lt\",\tCONST,\txscmpexpqp_lt_tf)\n+BU_P9V_VSX_2 (VSCETFEQ,\t\"scalar_cmp_exp_tf_eq\",\tCONST,\txscmpexpqp_eq_tf)\n+BU_P9V_VSX_2 (VSCETFUO,\t\"scalar_cmp_exp_tf_unordered\", CONST, xscmpexpqp_unordered_tf)\n+\n BU_FLOAT128_HW_VSX_2 (VSTDCQP, \"scalar_test_data_class_qp\",\tCONST,\txststdcqp_kf)\n+BU_FLOAT128_HW_VSX_2 (VSTDCTF, \"scalar_test_data_class_tf\",\tCONST,\txststdcqp_tf)\n BU_P9V_VSX_2 (VSTDCDP,\t\"scalar_test_data_class_dp\",\tCONST,\txststdcdp)\n BU_P9V_VSX_2 (VSTDCSP,\t\"scalar_test_data_class_sp\",\tCONST,\txststdcsp)\n "}, {"sha": "d58fd6ba153fc425d83a2b374e87dc628bd01cdb", "filename": "gcc/config/rs6000/rs6000-call.c", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d7941da28e6b1cd7507ed96bb722b1e3206c172/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d7941da28e6b1cd7507ed96bb722b1e3206c172/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.c?ref=2d7941da28e6b1cd7507ed96bb722b1e3206c172", "patch": "@@ -4565,37 +4565,49 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_bool_int, RS6000_BTI_double, RS6000_BTI_INTSI, 0 },\n   { P9V_BUILTIN_VEC_VSTDC, P9V_BUILTIN_VSTDCQP,\n     RS6000_BTI_bool_int, RS6000_BTI_ieee128_float, RS6000_BTI_INTSI, 0 },\n+  { P9V_BUILTIN_VEC_VSTDC, P9V_BUILTIN_VSTDCTF,\n+    RS6000_BTI_bool_int, RS6000_BTI_long_double, RS6000_BTI_INTSI, 0 },\n \n   { P9V_BUILTIN_VEC_VSTDCSP, P9V_BUILTIN_VSTDCSP,\n     RS6000_BTI_bool_int, RS6000_BTI_float, RS6000_BTI_INTSI, 0 },\n   { P9V_BUILTIN_VEC_VSTDCDP, P9V_BUILTIN_VSTDCDP,\n     RS6000_BTI_bool_int, RS6000_BTI_double, RS6000_BTI_INTSI, 0 },\n   { P9V_BUILTIN_VEC_VSTDCQP, P9V_BUILTIN_VSTDCQP,\n     RS6000_BTI_bool_int, RS6000_BTI_ieee128_float, RS6000_BTI_INTSI, 0 },\n+  { P9V_BUILTIN_VEC_VSTDCQP, P9V_BUILTIN_VSTDCTF,\n+    RS6000_BTI_bool_int, RS6000_BTI_long_double, RS6000_BTI_INTSI, 0 },\n \n   { P9V_BUILTIN_VEC_VSTDCN, P9V_BUILTIN_VSTDCNSP,\n     RS6000_BTI_bool_int, RS6000_BTI_float, 0, 0 },\n   { P9V_BUILTIN_VEC_VSTDCN, P9V_BUILTIN_VSTDCNDP,\n     RS6000_BTI_bool_int, RS6000_BTI_double, 0, 0 },\n   { P9V_BUILTIN_VEC_VSTDCN, P9V_BUILTIN_VSTDCNQP,\n     RS6000_BTI_bool_int, RS6000_BTI_ieee128_float, 0, 0 },\n+  { P9V_BUILTIN_VEC_VSTDCN, P9V_BUILTIN_VSTDCNTF,\n+    RS6000_BTI_bool_int, RS6000_BTI_long_double, 0, 0 },\n \n   { P9V_BUILTIN_VEC_VSTDCNSP, P9V_BUILTIN_VSTDCNSP,\n     RS6000_BTI_bool_int, RS6000_BTI_float, 0, 0 },\n   { P9V_BUILTIN_VEC_VSTDCNDP, P9V_BUILTIN_VSTDCNDP,\n     RS6000_BTI_bool_int, RS6000_BTI_double, 0, 0 },\n   { P9V_BUILTIN_VEC_VSTDCNQP, P9V_BUILTIN_VSTDCNQP,\n     RS6000_BTI_bool_int, RS6000_BTI_ieee128_float, 0, 0 },\n+  { P9V_BUILTIN_VEC_VSTDCNQP, P9V_BUILTIN_VSTDCNTF,\n+    RS6000_BTI_bool_int, RS6000_BTI_long_double, 0, 0 },\n \n   { P9V_BUILTIN_VEC_VSEEDP, P9V_BUILTIN_VSEEDP,\n     RS6000_BTI_UINTSI, RS6000_BTI_double, 0, 0 },\n   { P9V_BUILTIN_VEC_VSEEDP, P9V_BUILTIN_VSEEQP,\n     RS6000_BTI_UINTDI, RS6000_BTI_ieee128_float, 0, 0 },\n+  { P9V_BUILTIN_VEC_VSEEDP, P9V_BUILTIN_VSEETF,\n+    RS6000_BTI_UINTDI, RS6000_BTI_long_double, 0, 0 },\n \n   { P9V_BUILTIN_VEC_VSESDP, P9V_BUILTIN_VSESDP,\n     RS6000_BTI_UINTDI, RS6000_BTI_double, 0, 0 },\n   { P9V_BUILTIN_VEC_VSESDP, P9V_BUILTIN_VSESQP,\n     RS6000_BTI_UINTTI, RS6000_BTI_ieee128_float, 0, 0 },\n+  { P9V_BUILTIN_VEC_VSESDP, P9V_BUILTIN_VSESTF,\n+    RS6000_BTI_UINTTI, RS6000_BTI_long_double, 0, 0 },\n \n   { P9V_BUILTIN_VEC_VSIEDP, P9V_BUILTIN_VSIEDP,\n     RS6000_BTI_double, RS6000_BTI_UINTDI, RS6000_BTI_UINTDI, 0 },\n@@ -4604,25 +4616,37 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n \n   { P9V_BUILTIN_VEC_VSIEDP, P9V_BUILTIN_VSIEQP,\n     RS6000_BTI_ieee128_float, RS6000_BTI_UINTTI, RS6000_BTI_UINTDI, 0 },\n+  { P9V_BUILTIN_VEC_VSIEDP, P9V_BUILTIN_VSIETF,\n+    RS6000_BTI_long_double, RS6000_BTI_UINTTI, RS6000_BTI_UINTDI, 0 },\n   { P9V_BUILTIN_VEC_VSIEDP, P9V_BUILTIN_VSIEQPF,\n     RS6000_BTI_ieee128_float, RS6000_BTI_ieee128_float, RS6000_BTI_UINTDI, 0 },\n+  { P9V_BUILTIN_VEC_VSIEDP, P9V_BUILTIN_VSIETFF,\n+    RS6000_BTI_long_double, RS6000_BTI_long_double, RS6000_BTI_UINTDI, 0 },\n \n   { P9V_BUILTIN_VEC_VSCEGT, P9V_BUILTIN_VSCEDPGT,\n     RS6000_BTI_INTSI, RS6000_BTI_double, RS6000_BTI_double, 0 },\n   { P9V_BUILTIN_VEC_VSCEGT, P9V_BUILTIN_VSCEQPGT,\n     RS6000_BTI_INTSI, RS6000_BTI_ieee128_float, RS6000_BTI_ieee128_float, 0 },\n+  { P9V_BUILTIN_VEC_VSCEGT, P9V_BUILTIN_VSCETFGT,\n+    RS6000_BTI_INTSI, RS6000_BTI_long_double, RS6000_BTI_long_double, 0 },\n   { P9V_BUILTIN_VEC_VSCELT, P9V_BUILTIN_VSCEDPLT,\n     RS6000_BTI_INTSI, RS6000_BTI_double, RS6000_BTI_double, 0 },\n   { P9V_BUILTIN_VEC_VSCELT, P9V_BUILTIN_VSCEQPLT,\n     RS6000_BTI_INTSI, RS6000_BTI_ieee128_float, RS6000_BTI_ieee128_float, 0 },\n+  { P9V_BUILTIN_VEC_VSCELT, P9V_BUILTIN_VSCETFLT,\n+    RS6000_BTI_INTSI, RS6000_BTI_long_double, RS6000_BTI_long_double, 0 },\n   { P9V_BUILTIN_VEC_VSCEEQ, P9V_BUILTIN_VSCEDPEQ,\n     RS6000_BTI_INTSI, RS6000_BTI_double, RS6000_BTI_double, 0 },\n   { P9V_BUILTIN_VEC_VSCEEQ, P9V_BUILTIN_VSCEQPEQ,\n     RS6000_BTI_INTSI, RS6000_BTI_ieee128_float, RS6000_BTI_ieee128_float, 0 },\n+  { P9V_BUILTIN_VEC_VSCEEQ, P9V_BUILTIN_VSCETFEQ,\n+    RS6000_BTI_INTSI, RS6000_BTI_long_double, RS6000_BTI_long_double, 0 },\n   { P9V_BUILTIN_VEC_VSCEUO, P9V_BUILTIN_VSCEDPUO,\n     RS6000_BTI_INTSI, RS6000_BTI_double, RS6000_BTI_double, 0 },\n   { P9V_BUILTIN_VEC_VSCEUO, P9V_BUILTIN_VSCEQPUO,\n     RS6000_BTI_INTSI, RS6000_BTI_ieee128_float, RS6000_BTI_ieee128_float, 0 },\n+  { P9V_BUILTIN_VEC_VSCEUO, P9V_BUILTIN_VSCETFUO,\n+    RS6000_BTI_INTSI, RS6000_BTI_long_double, RS6000_BTI_long_double, 0 },\n \n   { P9V_BUILTIN_VEC_XL_LEN_R, P9V_BUILTIN_XL_LEN_R,\n     RS6000_BTI_unsigned_V16QI, ~RS6000_BTI_UINTQI,\n@@ -11560,6 +11584,22 @@ rs6000_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n       case CODE_FOR_xsiexpqp_kf:\ticode = CODE_FOR_xsiexpqp_tf;\tbreak;\n       case CODE_FOR_xsiexpqpf_kf:\ticode = CODE_FOR_xsiexpqpf_tf;\tbreak;\n       case CODE_FOR_xststdcqp_kf:\ticode = CODE_FOR_xststdcqp_tf;\tbreak;\n+\n+      case CODE_FOR_xscmpexpqp_eq_kf:\n+\ticode = CODE_FOR_xscmpexpqp_eq_tf;\n+\tbreak;\n+\n+      case CODE_FOR_xscmpexpqp_lt_kf:\n+\ticode = CODE_FOR_xscmpexpqp_lt_tf;\n+\tbreak;\n+\n+      case CODE_FOR_xscmpexpqp_gt_kf:\n+\ticode = CODE_FOR_xscmpexpqp_gt_tf;\n+\tbreak;\n+\n+      case CODE_FOR_xscmpexpqp_unordered_kf:\n+\ticode = CODE_FOR_xscmpexpqp_unordered_tf;\n+\tbreak;\n       }\n \n   if (TARGET_DEBUG_BUILTIN)"}]}