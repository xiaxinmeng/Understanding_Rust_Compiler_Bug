{"sha": "572c2b17aa1580433f6ea5cf0267a62424fe2020", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTcyYzJiMTdhYTE1ODA0MzNmNmVhNWNmMDI2N2E2MjQyNGZlMjAyMA==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@physics.uc.edu", "date": "2004-01-05T05:47:16Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2004-01-05T05:47:16Z"}, "message": "semantics.c (push_deferring_access_checks): Fix format.\n\n\t* semantics.c (push_deferring_access_checks): Fix format.\n\t(resume_deferring_access_checks): Likewise.\n\t(stop_deferring_access_checks): Likewise.\n\t(pop_deferring_access_checks): Likewise.\n\t(get_deferred_access_checks): Likewise.\n\t(pop_to_parent_deferring_access_checks): Likewise.\n\t(perform_deferred_access_checks): Likewise.\n\t(perform_or_defer_access_check): Likewise.\n\nFrom-SVN: r75415", "tree": {"sha": "bc5cb8c7a6e4b5578d8a5bbf40fb320547d60c6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc5cb8c7a6e4b5578d8a5bbf40fb320547d60c6f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/572c2b17aa1580433f6ea5cf0267a62424fe2020", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/572c2b17aa1580433f6ea5cf0267a62424fe2020", "html_url": "https://github.com/Rust-GCC/gccrs/commit/572c2b17aa1580433f6ea5cf0267a62424fe2020", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/572c2b17aa1580433f6ea5cf0267a62424fe2020/comments", "author": null, "committer": null, "parents": [{"sha": "88401f735c0c4f52b1e597b45c15984f3bebbce1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88401f735c0c4f52b1e597b45c15984f3bebbce1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88401f735c0c4f52b1e597b45c15984f3bebbce1"}], "stats": {"total": 37, "additions": 28, "deletions": 9}, "files": [{"sha": "ad9804e3aebbb261fe58a72f42d1721d01c449d6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/572c2b17aa1580433f6ea5cf0267a62424fe2020/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/572c2b17aa1580433f6ea5cf0267a62424fe2020/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=572c2b17aa1580433f6ea5cf0267a62424fe2020", "patch": "@@ -1,3 +1,14 @@\n+2004-01-04  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\t* semantics.c (push_deferring_access_checks): Fix format.\n+\t(resume_deferring_access_checks): Likewise.\n+\t(stop_deferring_access_checks): Likewise.\n+\t(pop_deferring_access_checks): Likewise.\n+\t(get_deferred_access_checks): Likewise.\n+\t(pop_to_parent_deferring_access_checks): Likewise.\n+\t(perform_deferred_access_checks): Likewise.\n+\t(perform_or_defer_access_check): Likewise.\n+\n 2004-01-04  Richard Henderson  <rth@redhat.com>\n \n \t* call.c (build_over_call): Don't create a save_expr of an"}, {"sha": "00f1a4f2fe9e8b5a6e37f2f41911399754535756", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/572c2b17aa1580433f6ea5cf0267a62424fe2020/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/572c2b17aa1580433f6ea5cf0267a62424fe2020/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=572c2b17aa1580433f6ea5cf0267a62424fe2020", "patch": "@@ -4,7 +4,7 @@\n    and during the instantiation of template functions. \n \n    Copyright (C) 1998, 1999, 2000, 2001, 2002,\n-   2003 Free Software Foundation, Inc.\n+   2003, 2004 Free Software Foundation, Inc.\n    Written by Mark Mitchell (mmitchell@usa.net) based on code found\n    formerly in parse.y and pt.c.  \n \n@@ -136,7 +136,8 @@ static GTY(()) deferred_access *deferred_access_free_list;\n /* Save the current deferred access states and start deferred\n    access checking iff DEFER_P is true.  */\n \n-void push_deferring_access_checks (deferring_kind deferring)\n+void\n+push_deferring_access_checks (deferring_kind deferring)\n {\n   deferred_access *d;\n \n@@ -164,15 +165,17 @@ void push_deferring_access_checks (deferring_kind deferring)\n /* Resume deferring access checks again after we stopped doing\n    this previously.  */\n \n-void resume_deferring_access_checks (void)\n+void\n+resume_deferring_access_checks (void)\n {\n   if (deferred_access_stack->deferring_access_checks_kind == dk_no_deferred)\n     deferred_access_stack->deferring_access_checks_kind = dk_deferred;\n }\n \n /* Stop deferring access checks.  */\n \n-void stop_deferring_access_checks (void)\n+void\n+stop_deferring_access_checks (void)\n {\n   if (deferred_access_stack->deferring_access_checks_kind == dk_deferred)\n     deferred_access_stack->deferring_access_checks_kind = dk_no_deferred;\n@@ -181,7 +184,8 @@ void stop_deferring_access_checks (void)\n /* Discard the current deferred access checks and restore the\n    previous states.  */\n \n-void pop_deferring_access_checks (void)\n+void\n+pop_deferring_access_checks (void)\n {\n   deferred_access *d = deferred_access_stack;\n   deferred_access_stack = d->next;\n@@ -199,7 +203,8 @@ void pop_deferring_access_checks (void)\n    access occurred; the TREE_VALUE is the declaration named.\n    */\n \n-tree get_deferred_access_checks (void)\n+tree\n+get_deferred_access_checks (void)\n {\n   return deferred_access_stack->deferred_access_checks;\n }\n@@ -208,7 +213,8 @@ tree get_deferred_access_checks (void)\n    previous states if we also defer checks previously.\n    Otherwise perform checks now.  */\n \n-void pop_to_parent_deferring_access_checks (void)\n+void\n+pop_to_parent_deferring_access_checks (void)\n {\n   tree deferred_check = get_deferred_access_checks ();\n   deferred_access *d1 = deferred_access_stack;\n@@ -249,7 +255,8 @@ void pop_to_parent_deferring_access_checks (void)\n    We have to perform deferred access of `A::X', first with `A::a',\n    next with `x'.  */\n \n-void perform_deferred_access_checks (void)\n+void\n+perform_deferred_access_checks (void)\n {\n   tree deferred_check;\n   for (deferred_check = deferred_access_stack->deferred_access_checks;\n@@ -263,7 +270,8 @@ void perform_deferred_access_checks (void)\n /* Defer checking the accessibility of DECL, when looked up in\n    BINFO.  */\n \n-void perform_or_defer_access_check (tree binfo, tree decl)\n+void\n+perform_or_defer_access_check (tree binfo, tree decl)\n {\n   tree check;\n "}]}