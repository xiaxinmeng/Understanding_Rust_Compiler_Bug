{"sha": "3cd4577449f2e7af97026a85a3ccd81a27fa9101", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2NkNDU3NzQ0OWYyZTdhZjk3MDI2YTg1YTNjY2Q4MWEyN2ZhOTEwMQ==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2003-01-15T15:51:11Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2003-01-15T15:51:11Z"}, "message": "arm.h (HAVE_PRE_MODIFY_DISP, [...]): Define.\n\n* arm.h (HAVE_PRE_MODIFY_DISP, HAVE_PRE_MODIFY_REG): Define.\n(HAVE_POST_MODIFY_DISP, HAVE_POST_MODIFY_REG): Define.\n(ARM_GO_IF_LEGITIMATE_ADDRESS): Handle pre/post-modify addresses.\n(ARM_PRINT_OPERAND_ADDRESS): Likewise.\n\nFrom-SVN: r61332", "tree": {"sha": "9706c0c89630c69810213062a2d538c40f2048dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9706c0c89630c69810213062a2d538c40f2048dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3cd4577449f2e7af97026a85a3ccd81a27fa9101", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cd4577449f2e7af97026a85a3ccd81a27fa9101", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cd4577449f2e7af97026a85a3ccd81a27fa9101", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cd4577449f2e7af97026a85a3ccd81a27fa9101/comments", "author": null, "committer": null, "parents": [{"sha": "c161ecf7b1363fd310a4a2513e0cc468effccde0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c161ecf7b1363fd310a4a2513e0cc468effccde0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c161ecf7b1363fd310a4a2513e0cc468effccde0"}], "stats": {"total": 309, "additions": 174, "deletions": 135}, "files": [{"sha": "282d7187e65e2124d399708e1e7928a761815365", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd4577449f2e7af97026a85a3ccd81a27fa9101/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd4577449f2e7af97026a85a3ccd81a27fa9101/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3cd4577449f2e7af97026a85a3ccd81a27fa9101", "patch": "@@ -1,3 +1,10 @@\n+2003-01-15  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* arm.h (HAVE_PRE_MODIFY_DISP, HAVE_PRE_MODIFY_REG): Define.\n+\t(HAVE_POST_MODIFY_DISP, HAVE_POST_MODIFY_REG): Define.\n+\t(ARM_GO_IF_LEGITIMATE_ADDRESS): Handle pre/post-modify addresses.\n+\t(ARM_PRINT_OPERAND_ADDRESS): Likewise.\n+\n Wed Jan 15 12:23:21 CET 2003  Jan Hubicka  <jh@suse.cz>\n \n \tPR f/9258"}, {"sha": "14d4d6f8abb1c01578b5339b1977012c85a0cd89", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 167, "deletions": 135, "changes": 302, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd4577449f2e7af97026a85a3ccd81a27fa9101/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd4577449f2e7af97026a85a3ccd81a27fa9101/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=3cd4577449f2e7af97026a85a3ccd81a27fa9101", "patch": "@@ -1760,10 +1760,14 @@ typedef struct\n \n \f\n /* Addressing modes, and classification of registers for them.  */\n-#define HAVE_POST_INCREMENT  1\n-#define HAVE_PRE_INCREMENT   TARGET_ARM\n-#define HAVE_POST_DECREMENT  TARGET_ARM\n-#define HAVE_PRE_DECREMENT   TARGET_ARM\n+#define HAVE_POST_INCREMENT   1\n+#define HAVE_PRE_INCREMENT    TARGET_ARM\n+#define HAVE_POST_DECREMENT   TARGET_ARM\n+#define HAVE_PRE_DECREMENT    TARGET_ARM\n+#define HAVE_PRE_MODIFY_DISP  TARGET_ARM\n+#define HAVE_POST_MODIFY_DISP TARGET_ARM\n+#define HAVE_PRE_MODIFY_REG   TARGET_ARM\n+#define HAVE_POST_MODIFY_REG  TARGET_ARM\n \n /* Macros to check register numbers against specific register classes.  */\n \n@@ -2001,65 +2005,73 @@ typedef struct\n    floating SYMBOL_REF to the constant pool.  Allow REG-only and\n    AUTINC-REG if handling TImode or HImode.  Other symbol refs must be\n    forced though a static cell to ensure addressability.  */\n-#define ARM_GO_IF_LEGITIMATE_ADDRESS(MODE, X, LABEL)\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (ARM_BASE_REGISTER_RTX_P (X))\t\t\t\t\t\\\n-    goto LABEL;\t\t\t\t\t\t\t\t\\\n-  else if ((GET_CODE (X) == POST_INC || GET_CODE (X) == PRE_DEC)\t\\\n-\t   && GET_CODE (XEXP (X, 0)) == REG\t\t\t\t\\\n-\t   && ARM_REG_OK_FOR_BASE_P (XEXP (X, 0)))\t\t\t\\\n-    goto LABEL;\t\t\t\t\t\t\t\t\\\n-  else if (GET_MODE_SIZE (MODE) >= 4 && reload_completed\t\t\\\n-\t   && (GET_CODE (X) == LABEL_REF\t\t\t\t\\\n-\t       || (GET_CODE (X) == CONST\t\t\t\t\\\n-\t\t   && GET_CODE (XEXP ((X), 0)) == PLUS\t\t\t\\\n-\t\t   && GET_CODE (XEXP (XEXP ((X), 0), 0)) == LABEL_REF\t\\\n-\t\t   && GET_CODE (XEXP (XEXP ((X), 0), 1)) == CONST_INT)))\\\n-    goto LABEL;\t\t\t\t\t\t\t\t\\\n-  else if ((MODE) == TImode)\t\t\t\t\t\t\\\n-    ;\t\t\t\t\t\t\t\t\t\\\n-  else if ((MODE) == DImode || (TARGET_SOFT_FLOAT && (MODE) == DFmode))\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      if (GET_CODE (X) == PLUS && ARM_BASE_REGISTER_RTX_P (XEXP (X, 0))\t\\\n-\t  && GET_CODE (XEXP (X, 1)) == CONST_INT)\t\t\t\\\n-\t{\t\t\t\t\t\t\t\t\\\n-\t  HOST_WIDE_INT val = INTVAL (XEXP (X, 1));\t\t\t\\\n-          if (val == 4 || val == -4 || val == -8)\t\t\t\\\n-\t    goto LABEL;\t\t\t\t\t\t\t\\\n-\t}\t\t\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  else if (GET_CODE (X) == PLUS)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      rtx xop0 = XEXP (X, 0);\t\t\t\t\t\t\\\n-      rtx xop1 = XEXP (X, 1);\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-      if (ARM_BASE_REGISTER_RTX_P (xop0))\t\t\t\t\\\n-\tARM_GO_IF_LEGITIMATE_INDEX (MODE, REGNO (xop0), xop1, LABEL);\t\\\n-      else if (ARM_BASE_REGISTER_RTX_P (xop1))\t\t\t\t\\\n-\tARM_GO_IF_LEGITIMATE_INDEX (MODE, REGNO (xop1), xop0, LABEL);\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  /* Reload currently can't handle MINUS, so disable this for now */\t\\\n-  /* else if (GET_CODE (X) == MINUS)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      rtx xop0 = XEXP (X,0);\t\t\t\t\t\t\\\n-      rtx xop1 = XEXP (X,1);\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-      if (ARM_BASE_REGISTER_RTX_P (xop0))\t\t\t\t\\\n-\tARM_GO_IF_LEGITIMATE_INDEX (MODE, -1, xop1, LABEL);\t\t\\\n-    } */\t\t\t\t\t\t\t\t\\\n-  else if (GET_MODE_CLASS (MODE) != MODE_FLOAT\t\t\t\t\\\n-\t   && GET_CODE (X) == SYMBOL_REF\t\t\t\t\\\n-\t   && CONSTANT_POOL_ADDRESS_P (X)\t\t\t\t\\\n-\t   && ! (flag_pic\t\t\t\t\t\t\\\n-\t\t && symbol_mentioned_p (get_pool_constant (X))))\t\\\n-    goto LABEL;\t\t\t\t\t\t\t\t\\\n-  else if ((GET_CODE (X) == PRE_INC || GET_CODE (X) == POST_DEC)\t\\\n-\t   && (GET_MODE_SIZE (MODE) <= 4)\t\t\t\t\\\n-\t   && GET_CODE (XEXP (X, 0)) == REG\t\t\t\t\\\n-\t   && ARM_REG_OK_FOR_BASE_P (XEXP (X, 0)))\t\t\t\\\n-    goto LABEL;\t\t\t\t\t\t\t\t\\\n+#define ARM_GO_IF_LEGITIMATE_ADDRESS(MODE, X, LABEL)\t\t\t \\\n+{\t\t\t\t\t\t\t\t\t \\\n+  if (ARM_BASE_REGISTER_RTX_P (X))\t\t\t\t\t \\\n+    goto LABEL;\t\t\t\t\t\t\t\t \\\n+  else if ((GET_CODE (X) == POST_INC || GET_CODE (X) == PRE_DEC)\t \\\n+\t   && GET_CODE (XEXP (X, 0)) == REG\t\t\t\t \\\n+\t   && ARM_REG_OK_FOR_BASE_P (XEXP (X, 0)))\t\t\t \\\n+    goto LABEL;\t\t\t\t\t\t\t\t \\\n+  else if ((GET_CODE (X) == POST_MODIFY || GET_CODE (X) == PRE_MODIFY)\t \\\n+\t   && GET_MODE_SIZE (MODE) <= 4\t\t\t\t\t \\\n+\t   && GET_CODE (XEXP (X, 0)) == REG\t\t\t\t \\\n+\t   && ARM_REG_OK_FOR_BASE_P (XEXP (X, 0))\t\t\t \\\n+\t   && GET_CODE (XEXP (X, 1)) == PLUS\t\t\t\t \\\n+\t   && XEXP (XEXP (X, 1), 0) == XEXP (X, 0))\t\t\t \\\n+    ARM_GO_IF_LEGITIMATE_INDEX (MODE, REGNO (XEXP (X, 0)), \t\t \\\n+\t\t\t\tXEXP (XEXP (X, 1), 1), LABEL);\t\t \\\n+  else if (GET_MODE_SIZE (MODE) >= 4 && reload_completed\t\t \\\n+\t   && (GET_CODE (X) == LABEL_REF\t\t\t\t \\\n+\t       || (GET_CODE (X) == CONST\t\t\t\t \\\n+\t\t   && GET_CODE (XEXP ((X), 0)) == PLUS\t\t\t \\\n+\t\t   && GET_CODE (XEXP (XEXP ((X), 0), 0)) == LABEL_REF\t \\\n+\t\t   && GET_CODE (XEXP (XEXP ((X), 0), 1)) == CONST_INT))) \\\n+    goto LABEL;\t\t\t\t\t\t\t\t \\\n+  else if ((MODE) == TImode)\t\t\t\t\t\t \\\n+    ;\t\t\t\t\t\t\t\t\t \\\n+  else if ((MODE) == DImode || (TARGET_SOFT_FLOAT && (MODE) == DFmode))\t \\\n+    {\t\t\t\t\t\t\t\t\t \\\n+      if (GET_CODE (X) == PLUS && ARM_BASE_REGISTER_RTX_P (XEXP (X, 0))\t \\\n+\t  && GET_CODE (XEXP (X, 1)) == CONST_INT)\t\t\t \\\n+\t{\t\t\t\t\t\t\t\t \\\n+\t  HOST_WIDE_INT val = INTVAL (XEXP (X, 1));\t\t\t \\\n+          if (val == 4 || val == -4 || val == -8)\t\t\t \\\n+\t    goto LABEL;\t\t\t\t\t\t\t \\\n+\t}\t\t\t\t\t\t\t\t \\\n+    }\t\t\t\t\t\t\t\t\t \\\n+  else if (GET_CODE (X) == PLUS)\t\t\t\t\t \\\n+    {\t\t\t\t\t\t\t\t\t \\\n+      rtx xop0 = XEXP (X, 0);\t\t\t\t\t\t \\\n+      rtx xop1 = XEXP (X, 1);\t\t\t\t\t\t \\\n+\t\t\t\t\t\t\t\t\t \\\n+      if (ARM_BASE_REGISTER_RTX_P (xop0))\t\t\t\t \\\n+\tARM_GO_IF_LEGITIMATE_INDEX (MODE, REGNO (xop0), xop1, LABEL);\t \\\n+      else if (ARM_BASE_REGISTER_RTX_P (xop1))\t\t\t\t \\\n+\tARM_GO_IF_LEGITIMATE_INDEX (MODE, REGNO (xop1), xop0, LABEL);\t \\\n+    }\t\t\t\t\t\t\t\t\t \\\n+  /* Reload currently can't handle MINUS, so disable this for now */\t \\\n+  /* else if (GET_CODE (X) == MINUS)\t\t\t\t\t \\\n+    {\t\t\t\t\t\t\t\t\t \\\n+      rtx xop0 = XEXP (X,0);\t\t\t\t\t\t \\\n+      rtx xop1 = XEXP (X,1);\t\t\t\t\t\t \\\n+\t\t\t\t\t\t\t\t\t \\\n+      if (ARM_BASE_REGISTER_RTX_P (xop0))\t\t\t\t \\\n+\tARM_GO_IF_LEGITIMATE_INDEX (MODE, -1, xop1, LABEL);\t\t \\\n+    } */\t\t\t\t\t\t\t\t \\\n+  else if (GET_MODE_CLASS (MODE) != MODE_FLOAT\t\t\t\t \\\n+\t   && GET_CODE (X) == SYMBOL_REF\t\t\t\t \\\n+\t   && CONSTANT_POOL_ADDRESS_P (X)\t\t\t\t \\\n+\t   && ! (flag_pic\t\t\t\t\t\t \\\n+\t\t && symbol_mentioned_p (get_pool_constant (X))))\t \\\n+    goto LABEL;\t\t\t\t\t\t\t\t \\\n+  else if ((GET_CODE (X) == PRE_INC || GET_CODE (X) == POST_DEC)\t \\\n+\t   && (GET_MODE_SIZE (MODE) <= 4)\t\t\t\t \\\n+\t   && GET_CODE (XEXP (X, 0)) == REG\t\t\t\t \\\n+\t   && ARM_REG_OK_FOR_BASE_P (XEXP (X, 0)))\t\t\t \\\n+    goto LABEL;\t\t\t\t\t\t\t\t \\\n }\n-     \n+\n /* ---------------------thumb version----------------------------------*/     \n #define THUMB_LEGITIMATE_OFFSET(MODE, VAL)\t\t\t\t\\\n   (GET_MODE_SIZE (MODE) == 1 ? ((unsigned HOST_WIDE_INT) (VAL) < 32)\t\\\n@@ -2570,79 +2582,99 @@ extern int making_const_table;\n        : 0))))\n \n /* Output the address of an operand.  */\n-#define ARM_PRINT_OPERAND_ADDRESS(STREAM, X)  \t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-    int is_minus = GET_CODE (X) == MINUS;\t\t\t\\\n-\t\t\t\t\t\t\t\t\\\n-    if (GET_CODE (X) == REG)\t\t\t\t\t\\\n-      asm_fprintf (STREAM, \"[%r, #0]\", REGNO (X));\t\t\\\n-    else if (GET_CODE (X) == PLUS || is_minus)\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\\\n-\trtx base = XEXP (X, 0);\t\t\t\t\t\\\n-\trtx index = XEXP (X, 1);\t\t\t\t\\\n-\tHOST_WIDE_INT offset = 0;\t\t\t\t\\\n-\tif (GET_CODE (base) != REG)\t\t\t\t\\\n-\t  {\t\t\t\t\t\t\t\\\n-\t    /* Ensure that BASE is a register */ \t\t\\\n-            /* (one of them must be). */\t\t\t\\\n-\t    rtx temp = base;\t\t\t\t\t\\\n-\t    base = index;\t\t\t\t\t\\\n-\t    index = temp;\t\t\t\t\t\\\n-\t  }\t\t\t\t\t\t\t\\\n-\tswitch (GET_CODE (index))\t\t\t\t\\\n-\t  {\t\t\t\t\t\t\t\\\n-\t  case CONST_INT:\t\t\t\t\t\\\n-\t    offset = INTVAL (index);\t\t\t\t\\\n-\t    if (is_minus)\t\t\t\t\t\\\n-\t      offset = -offset;\t\t\t\t\t\\\n-\t    asm_fprintf (STREAM, \"[%r, #%d]\", \t\t\t\\\n-\t\t         REGNO (base), offset);\t\t\t\\\n-\t    break;\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\\\n-\t  case REG:\t\t\t\t\t\t\\\n-\t    asm_fprintf (STREAM, \"[%r, %s%r]\", \t\t\t\\\n-\t\t     REGNO (base), is_minus ? \"-\" : \"\",\t\t\\\n-\t\t     REGNO (index));\t\t\t\t\\\n-\t    break;\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\\\n-\t  case MULT:\t\t\t\t\t\t\\\n-\t  case ASHIFTRT:\t\t\t\t\t\\\n-\t  case LSHIFTRT:\t\t\t\t\t\\\n-\t  case ASHIFT:\t\t\t\t\t\t\\\n-\t  case ROTATERT:\t\t\t\t\t\\\n-\t  {\t\t\t\t\t\t\t\\\n-\t    asm_fprintf (STREAM, \"[%r, %s%r\", \t\t\t\\\n-\t\t         REGNO (base), is_minus ? \"-\" : \"\", \t\\\n-                         REGNO (XEXP (index, 0)));\t\t\\\n-\t    arm_print_operand (STREAM, index, 'S');\t\t\\\n-\t    fputs (\"]\", STREAM);\t\t\t\t\\\n-\t    break;\t\t\t\t\t\t\\\n-\t  }\t\t\t\t\t\t\t\\\n-\t    \t\t\t\t\t\t\t\\\n-\t  default:\t\t\t\t\t\t\\\n-\t    abort();\t\t\t\t\t\t\\\n-\t}\t\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t        \\\n-  else if (   GET_CODE (X) == PRE_INC || GET_CODE (X) == POST_INC\\\n-\t   || GET_CODE (X) == PRE_DEC || GET_CODE (X) == POST_DEC)\\\n-    {\t\t\t\t\t\t\t\t\\\n-      extern int output_memory_reference_mode;\t\t\t\\\n-      \t\t\t\t\t\t\t\t\\\n-      if (GET_CODE (XEXP (X, 0)) != REG)\t\t\t\\\n-\tabort ();\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\\\n-      if (GET_CODE (X) == PRE_DEC || GET_CODE (X) == PRE_INC)\t\\\n-\tasm_fprintf (STREAM, \"[%r, #%s%d]!\", \t\t\t\\\n-\t\t     REGNO (XEXP (X, 0)),\t\t\t\\\n-\t\t     GET_CODE (X) == PRE_DEC ? \"-\" : \"\",\t\\\n-\t\t     GET_MODE_SIZE (output_memory_reference_mode));\\\n-      else\t\t\t\t\t\t\t\\\n-\tasm_fprintf (STREAM, \"[%r], #%s%d\", \t\t\t\\\n-\t\t     REGNO (XEXP (X, 0)),\t\t\t\\\n-\t\t     GET_CODE (X) == POST_DEC ? \"-\" : \"\",\t\\\n-\t\t     GET_MODE_SIZE (output_memory_reference_mode));\\\n-    }\t\t\t\t\t\t\t\t\\\n-  else output_addr_const (STREAM, X);\t\t\t\t\\\n+#define ARM_PRINT_OPERAND_ADDRESS(STREAM, X)\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+    int is_minus = GET_CODE (X) == MINUS;\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    if (GET_CODE (X) == REG)\t\t\t\t\t\t\\\n+      asm_fprintf (STREAM, \"[%r, #0]\", REGNO (X));\t\t\t\\\n+    else if (GET_CODE (X) == PLUS || is_minus)\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\trtx base = XEXP (X, 0);\t\t\t\t\t\t\\\n+\trtx index = XEXP (X, 1);\t\t\t\t\t\\\n+\tHOST_WIDE_INT offset = 0;\t\t\t\t\t\\\n+\tif (GET_CODE (base) != REG)\t\t\t\t\t\\\n+\t  {\t\t\t\t\t\t\t\t\\\n+\t    /* Ensure that BASE is a register */\t\t\t\\\n+            /* (one of them must be). */\t\t\t\t\\\n+\t    rtx temp = base;\t\t\t\t\t\t\\\n+\t    base = index;\t\t\t\t\t\t\\\n+\t    index = temp;\t\t\t\t\t\t\\\n+\t  }\t\t\t\t\t\t\t\t\\\n+\tswitch (GET_CODE (index))\t\t\t\t\t\\\n+\t  {\t\t\t\t\t\t\t\t\\\n+\t  case CONST_INT:\t\t\t\t\t\t\\\n+\t    offset = INTVAL (index);\t\t\t\t\t\\\n+\t    if (is_minus)\t\t\t\t\t\t\\\n+\t      offset = -offset;\t\t\t\t\t\t\\\n+\t    asm_fprintf (STREAM, \"[%r, #%d]\",\t\t\t\t\\\n+\t\t         REGNO (base), offset);\t\t\t\t\\\n+\t    break;\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\t  case REG:\t\t\t\t\t\t\t\\\n+\t    asm_fprintf (STREAM, \"[%r, %s%r]\",\t\t\t\t\\\n+\t\t     REGNO (base), is_minus ? \"-\" : \"\",\t\t\t\\\n+\t\t     REGNO (index));\t\t\t\t\t\\\n+\t    break;\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\t  case MULT:\t\t\t\t\t\t\t\\\n+\t  case ASHIFTRT:\t\t\t\t\t\t\\\n+\t  case LSHIFTRT:\t\t\t\t\t\t\\\n+\t  case ASHIFT:\t\t\t\t\t\t\t\\\n+\t  case ROTATERT:\t\t\t\t\t\t\\\n+\t  {\t\t\t\t\t\t\t\t\\\n+\t    asm_fprintf (STREAM, \"[%r, %s%r\",\t\t\t\t\\\n+\t\t         REGNO (base), is_minus ? \"-\" : \"\",\t\t\\\n+                         REGNO (XEXP (index, 0)));\t\t\t\\\n+\t    arm_print_operand (STREAM, index, 'S');\t\t\t\\\n+\t    fputs (\"]\", STREAM);\t\t\t\t\t\\\n+\t    break;\t\t\t\t\t\t\t\\\n+\t  }\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\t  default:\t\t\t\t\t\t\t\\\n+\t    abort();\t\t\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  else if (GET_CODE (X) == PRE_INC || GET_CODE (X) == POST_INC\t\t\\\n+\t   || GET_CODE (X) == PRE_DEC || GET_CODE (X) == POST_DEC)\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      extern enum machine_mode output_memory_reference_mode;\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      if (GET_CODE (XEXP (X, 0)) != REG)\t\t\t\t\\\n+\tabort ();\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      if (GET_CODE (X) == PRE_DEC || GET_CODE (X) == PRE_INC)\t\t\\\n+\tasm_fprintf (STREAM, \"[%r, #%s%d]!\",\t\t\t\t\\\n+\t\t     REGNO (XEXP (X, 0)),\t\t\t\t\\\n+\t\t     GET_CODE (X) == PRE_DEC ? \"-\" : \"\",\t\t\\\n+\t\t     GET_MODE_SIZE (output_memory_reference_mode));\t\\\n+      else\t\t\t\t\t\t\t\t\\\n+\tasm_fprintf (STREAM, \"[%r], #%s%d\",\t\t\t\t\\\n+\t\t     REGNO (XEXP (X, 0)),\t\t\t\t\\\n+\t\t     GET_CODE (X) == POST_DEC ? \"-\" : \"\",\t\t\\\n+\t\t     GET_MODE_SIZE (output_memory_reference_mode));\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  else if (GET_CODE (X) == PRE_MODIFY)\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      asm_fprintf (STREAM, \"[%r, \", REGNO (XEXP (X, 0)));\t\t\\\n+      if (GET_CODE (XEXP (XEXP (X, 1), 1)) == CONST_INT)\t\t\\\n+\tasm_fprintf (STREAM, \"#%d]!\", \t\t\t\t\t\\\n+\t\t     INTVAL (XEXP (XEXP (X, 1), 1)));\t\t\t\\\n+      else\t\t\t\t\t\t\t\t\\\n+\tasm_fprintf (STREAM, \"%r]!\", \t\t\t\t\t\\\n+\t\t     REGNO (XEXP (XEXP (X, 1), 1)));\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  else if (GET_CODE (X) == POST_MODIFY)\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      asm_fprintf (STREAM, \"[%r], \", REGNO (XEXP (X, 0)));\t\t\\\n+      if (GET_CODE (XEXP (XEXP (X, 1), 1)) == CONST_INT)\t\t\\\n+\tasm_fprintf (STREAM, \"#%d\", \t\t\t\t\t\\\n+\t\t     INTVAL (XEXP (XEXP (X, 1), 1)));\t\t\t\\\n+      else\t\t\t\t\t\t\t\t\\\n+\tasm_fprintf (STREAM, \"%r\", \t\t\t\t\t\\\n+\t\t     REGNO (XEXP (XEXP (X, 1), 1)));\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  else output_addr_const (STREAM, X);\t\t\t\t\t\\\n }\n \n #define THUMB_PRINT_OPERAND_ADDRESS(STREAM, X)\t\t\\"}]}