{"sha": "e192ab01d0551cf98e72be093f73bff19f94e98a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTE5MmFiMDFkMDU1MWNmOThlNzJiZTA5M2Y3M2JmZjE5Zjk0ZTk4YQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-12-12T14:31:11Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-12-12T14:31:11Z"}, "message": "type_traits: Implement is_pointer, remove_pointer, and add_pointer; reformat.\n\n2004-12-12  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1/type_traits: Implement is_pointer, remove_pointer,\n\tand add_pointer; reformat.\n\t(_DEFINE_PRIMARY_SPEC_HELPER, _DEFINE_PRIMARY_SPEC): Generalize\n\tand rename to _DEFINE_SPEC_HELPER and _DEFINE_SPEC; update uses.\n\t* testsuite/tr1/4_metaprogramming/pointer_modifications/\n\tadd_pointer.cc: New.\n\t* testsuite/tr1/4_metaprogramming/pointer_modifications/\n\tremove_pointer.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n\tis_pointer/is_pointer.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n\tis_pointer/typedefs.cc: Likewise.\n\n\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n\tis_reference/is_reference.cc: Slightly tweak consistently.\n\nFrom-SVN: r92047", "tree": {"sha": "dd1db8b40d8c0dfbfbb853605dec7c4836bf1907", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd1db8b40d8c0dfbfbb853605dec7c4836bf1907"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e192ab01d0551cf98e72be093f73bff19f94e98a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e192ab01d0551cf98e72be093f73bff19f94e98a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e192ab01d0551cf98e72be093f73bff19f94e98a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e192ab01d0551cf98e72be093f73bff19f94e98a/comments", "author": null, "committer": null, "parents": [{"sha": "8a40280df96372038e7c7030a3eae22ec586f453", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a40280df96372038e7c7030a3eae22ec586f453", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a40280df96372038e7c7030a3eae22ec586f453"}], "stats": {"total": 343, "additions": 257, "deletions": 86}, "files": [{"sha": "b79cee21fd088c0067e8e78230bc3d26d5e2c021", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e192ab01d0551cf98e72be093f73bff19f94e98a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e192ab01d0551cf98e72be093f73bff19f94e98a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e192ab01d0551cf98e72be093f73bff19f94e98a", "patch": "@@ -1,3 +1,21 @@\n+2004-12-12  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1/type_traits: Implement is_pointer, remove_pointer,\n+\tand add_pointer; reformat. \n+\t(_DEFINE_PRIMARY_SPEC_HELPER, _DEFINE_PRIMARY_SPEC): Generalize\n+\tand rename to _DEFINE_SPEC_HELPER and _DEFINE_SPEC; update uses.\n+\t* testsuite/tr1/4_metaprogramming/pointer_modifications/\n+\tadd_pointer.cc: New.\n+\t* testsuite/tr1/4_metaprogramming/pointer_modifications/\n+\tremove_pointer.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n+\tis_pointer/is_pointer.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n+\tis_pointer/typedefs.cc: Likewise.\n+\n+\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n+\tis_reference/is_reference.cc: Slightly tweak consistently.\n+\n 2004-12-11  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/tr1/type_traits: Implement rank."}, {"sha": "6fef185b5b397d0894510dc52cf327cf20ab76b5", "filename": "libstdc++-v3/include/tr1/type_traits", "status": "modified", "additions": 63, "deletions": 79, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e192ab01d0551cf98e72be093f73bff19f94e98a/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e192ab01d0551cf98e72be093f73bff19f94e98a/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits?ref=e192ab01d0551cf98e72be093f73bff19f94e98a", "patch": "@@ -43,49 +43,49 @@ namespace tr1\n     };\n   typedef integral_constant<bool, true>     true_type;\n   typedef integral_constant<bool, false>    false_type;\n-  \n-#define _DEFINE_PRIMARY_SPEC_HELPER(_Primary, _Type)           \\\n-  template<>                                                   \\\n-    struct _Primary<_Type>                                     \\\n-    : public true_type { };                            \n-\n-#define _DEFINE_PRIMARY_SPEC(_Primary, _Type)                  \\\n-  _DEFINE_PRIMARY_SPEC_HELPER(_Primary, _Type)                 \\\n-  _DEFINE_PRIMARY_SPEC_HELPER(_Primary, _Type const)           \\\n-  _DEFINE_PRIMARY_SPEC_HELPER(_Primary, _Type volatile)        \\\n-  _DEFINE_PRIMARY_SPEC_HELPER(_Primary, _Type const volatile)\n-  \n+\n+#define _DEFINE_SPEC_HELPER(_Header, _Spec)                      \\\n+  template _Header                                               \\\n+    struct _Spec                                                 \\\n+    : public true_type { };\n+      \n+#define _DEFINE_SPEC(_Header, _Primary, _Type)                   \\\n+  _DEFINE_SPEC_HELPER(_Header, _Primary<_Type>)                  \\\n+  _DEFINE_SPEC_HELPER(_Header, _Primary<_Type const>)            \\\n+  _DEFINE_SPEC_HELPER(_Header, _Primary<_Type volatile>)         \\\n+  _DEFINE_SPEC_HELPER(_Header, _Primary<_Type const volatile>)\n+\n   /// @brief  primary type categories [4.5.1].\n   template<typename>\n     struct is_void\n     : public false_type { };\n-  _DEFINE_PRIMARY_SPEC(is_void, void)\n+  _DEFINE_SPEC(<>, is_void, void)\n \n   template<typename>\n     struct is_integral\n     : public false_type { };\n-  _DEFINE_PRIMARY_SPEC(is_integral, bool)\n-  _DEFINE_PRIMARY_SPEC(is_integral, char)\n-  _DEFINE_PRIMARY_SPEC(is_integral, signed char)\n-  _DEFINE_PRIMARY_SPEC(is_integral, unsigned char)\n+  _DEFINE_SPEC(<>, is_integral, bool)\n+  _DEFINE_SPEC(<>, is_integral, char)\n+  _DEFINE_SPEC(<>, is_integral, signed char)\n+  _DEFINE_SPEC(<>, is_integral, unsigned char)\n #ifdef _GLIBCXX_USE_WCHAR_T\n-  _DEFINE_PRIMARY_SPEC(is_integral, wchar_t)\n+  _DEFINE_SPEC(<>, is_integral, wchar_t)\n #endif\n-  _DEFINE_PRIMARY_SPEC(is_integral, short)\n-  _DEFINE_PRIMARY_SPEC(is_integral, unsigned short)\n-  _DEFINE_PRIMARY_SPEC(is_integral, int)\n-  _DEFINE_PRIMARY_SPEC(is_integral, unsigned int)\n-  _DEFINE_PRIMARY_SPEC(is_integral, long)\n-  _DEFINE_PRIMARY_SPEC(is_integral, unsigned long)\n-  _DEFINE_PRIMARY_SPEC(is_integral, long long)\n-  _DEFINE_PRIMARY_SPEC(is_integral, unsigned long long)\n+  _DEFINE_SPEC(<>, is_integral, short)\n+  _DEFINE_SPEC(<>, is_integral, unsigned short)\n+  _DEFINE_SPEC(<>, is_integral, int)\n+  _DEFINE_SPEC(<>, is_integral, unsigned int)\n+  _DEFINE_SPEC(<>, is_integral, long)\n+  _DEFINE_SPEC(<>, is_integral, unsigned long)\n+  _DEFINE_SPEC(<>, is_integral, long long)\n+  _DEFINE_SPEC(<>, is_integral, unsigned long long)\n \n   template<typename>\n     struct is_floating_point\n     : public false_type { };\n-  _DEFINE_PRIMARY_SPEC(is_floating_point, float)\n-  _DEFINE_PRIMARY_SPEC(is_floating_point, double)\n-  _DEFINE_PRIMARY_SPEC(is_floating_point, long double)\n+  _DEFINE_SPEC(<>, is_floating_point, float)\n+  _DEFINE_SPEC(<>, is_floating_point, double)\n+  _DEFINE_SPEC(<>, is_floating_point, long double)\n \n   template<typename>\n     struct is_array\n@@ -99,9 +99,11 @@ namespace tr1\n     struct is_array<_Tp[]>\n     : public true_type { };\n   \n-  template<typename _Tp>\n-    struct is_pointer;\n-  \n+  template<typename>\n+    struct is_pointer\n+    : public false_type { };\n+  _DEFINE_SPEC(<typename _Tp>, is_pointer, _Tp*)\n+ \n   template<typename>\n     struct is_reference\n     : public false_type { };\n@@ -128,9 +130,6 @@ namespace tr1\n   template<typename _Tp>\n     struct is_function;\n \n-#undef _DEFINE_PRIMARY_SPEC_HELPER\n-#undef _DEFINE_PRIMARY_SPEC\n-\n   /// @brief  composite type traits [4.5.2].\n   template<typename _Tp>\n     struct is_arithmetic\n@@ -266,27 +265,19 @@ namespace tr1\n   /// @brief  const-volatile modifications [4.7.1].\n   template<typename _Tp>\n     struct remove_const\n-    {\n-      typedef _Tp     type;\n-    };\n+    { typedef _Tp     type; };\n \n   template<typename _Tp>\n     struct remove_const<_Tp const>\n-    {\n-      typedef _Tp     type;\n-    };\n+    { typedef _Tp     type; };\n   \n   template<typename _Tp>\n     struct remove_volatile\n-    {\n-      typedef _Tp     type;\n-    };\n+    { typedef _Tp     type; };\n \n   template<typename _Tp>\n     struct remove_volatile<_Tp volatile>\n-    {\n-      typedef _Tp     type;\n-    };\n+    { typedef _Tp     type; };\n   \n   template<typename _Tp>\n     struct remove_cv\n@@ -307,75 +298,68 @@ namespace tr1\n   /// @brief  reference modifications [4.7.2].\n   template<typename _Tp>\n     struct remove_reference\n-    {\n-      typedef _Tp     type;\n-    };\n+    { typedef _Tp     type; };\n \n   template<typename _Tp>\n     struct remove_reference<_Tp&>\n-    {\n-      typedef _Tp     type;\n-    };\n+    { typedef _Tp     type; };\n   \n   template<typename _Tp>\n     struct add_reference\n-    {\n-      typedef _Tp&    type;\n-    };\n+    { typedef _Tp&    type; };\n \n   template<typename _Tp>\n     struct add_reference<_Tp&>\n-    {\n-      typedef _Tp&    type;\n-    };\n+    { typedef _Tp&    type; };\n \n   /// @brief  array modififications [4.7.3].\n   template<typename _Tp>\n     struct remove_extent\n-    {\n-      typedef _Tp     type;\n-    };\n+    { typedef _Tp     type; };\n \n   template<typename _Tp, std::size_t _Size>\n     struct remove_extent<_Tp[_Size]>\n-    {\n-      typedef _Tp     type;\n-    };\n+    { typedef _Tp     type; };\n \n   template<typename _Tp>\n     struct remove_extent<_Tp[]>\n-    {\n-      typedef _Tp     type;\n-    };\n+    { typedef _Tp     type; };\n \n   template<typename _Tp>\n     struct remove_all_extents\n-    {\n-      typedef _Tp     type;\n-    };\n+    { typedef _Tp     type; };\n \n   template<typename _Tp, std::size_t _Size>\n     struct remove_all_extents<_Tp[_Size]>\n-    {\n-      typedef typename remove_all_extents<_Tp>::type   type;\n-    };\n+    { typedef typename remove_all_extents<_Tp>::type     type; };\n \n   template<typename _Tp>\n     struct remove_all_extents<_Tp[]>\n-    {\n-      typedef typename remove_all_extents<_Tp>::type   type;\n-    };\n+    { typedef typename remove_all_extents<_Tp>::type     type; };\n \n   /// @brief  pointer modifications [4.7.4].\n+#undef _DEFINE_SPEC_HELPER\n+#define _DEFINE_SPEC_HELPER(_Header, _Spec)                      \\\n+  template _Header                                               \\\n+    struct _Spec                                                 \\\n+    { typedef _Tp     type; };\n+\n   template<typename _Tp>\n-    struct remove_pointer;\n+    struct remove_pointer\n+    { typedef _Tp     type; };\n+  _DEFINE_SPEC(<typename _Tp>, remove_pointer, _Tp*)\n   \n   template<typename _Tp>\n-    struct add_pointer;\n+    struct add_pointer\n+    { typedef typename remove_reference<_Tp>::type*     type; };\n \n   /// @brief  other transformations [4.8].\n   template<std::size_t _Len, std::size_t _Align>\n     struct aligned_storage;\n+\n+#undef _DEFINE_SPEC_HELPER\n+#undef _DEFINE_SPEC\n+\n }\n }\n "}, {"sha": "71d1719de9949ee517ebb5a7a5a28c2164711c4a", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/pointer_modifications/add_pointer.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e192ab01d0551cf98e72be093f73bff19f94e98a/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fpointer_modifications%2Fadd_pointer.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e192ab01d0551cf98e72be093f73bff19f94e98a/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fpointer_modifications%2Fadd_pointer.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fpointer_modifications%2Fadd_pointer.cc?ref=e192ab01d0551cf98e72be093f73bff19f94e98a", "patch": "@@ -0,0 +1,46 @@\n+// 2004-12-12  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 4.7.2 Reference modifications\n+\n+#include <tr1/type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::tr1::add_pointer;\n+  using std::tr1::is_same;\n+  using namespace __gnu_test;\n+\n+  VERIFY( (is_same<add_pointer<int>::type, int*>::value) );\n+  VERIFY( (is_same<add_pointer<int*>::type, int**>::value) );\n+  VERIFY( (is_same<add_pointer<const int>::type, const int*>::value) );\n+  VERIFY( (is_same<add_pointer<int&>::type, int*>::value) );\n+  VERIFY( (is_same<add_pointer<ClassType*>::type, ClassType**>::value) );\n+  VERIFY( (is_same<add_pointer<ClassType>::type, ClassType*>::value) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "b3ba25bd324b60f601a45f5edba713001d5f3cc2", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/pointer_modifications/remove_pointer.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e192ab01d0551cf98e72be093f73bff19f94e98a/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fpointer_modifications%2Fremove_pointer.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e192ab01d0551cf98e72be093f73bff19f94e98a/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fpointer_modifications%2Fremove_pointer.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fpointer_modifications%2Fremove_pointer.cc?ref=e192ab01d0551cf98e72be093f73bff19f94e98a", "patch": "@@ -0,0 +1,46 @@\n+// 2004-12-12  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 4.7.2 Reference modifications\n+\n+#include <tr1/type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::tr1::remove_pointer;\n+  using std::tr1::is_same;\n+  using namespace __gnu_test;\n+\n+  VERIFY( (is_same<remove_pointer<int*>::type, int>::value) );\n+  VERIFY( (is_same<remove_pointer<int>::type, int>::value) );\n+  VERIFY( (is_same<remove_pointer<const int*>::type, const int>::value) );\n+  VERIFY( (is_same<remove_pointer<int**>::type, int*>::value) );\n+  VERIFY( (is_same<remove_pointer<ClassType*>::type, ClassType>::value) );\n+  VERIFY( (is_same<remove_pointer<ClassType>::type, ClassType>::value) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "fd9a33a6caca3ced76edd2e42211eac40b54166c", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/primary_type_categories/is_pointer/is_pointer.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e192ab01d0551cf98e72be093f73bff19f94e98a/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_pointer%2Fis_pointer.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e192ab01d0551cf98e72be093f73bff19f94e98a/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_pointer%2Fis_pointer.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_pointer%2Fis_pointer.cc?ref=e192ab01d0551cf98e72be093f73bff19f94e98a", "patch": "@@ -0,0 +1,45 @@\n+// 2004-12-12  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 4.5.1 Primary type categories\n+\n+#include <tr1/type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::tr1::is_pointer;\n+  using namespace __gnu_test;\n+\n+  VERIFY( (test_category<is_pointer, int*>(true)) );\n+  VERIFY( (test_category<is_pointer, ClassType*>(true)) );\n+  VERIFY( (test_category<is_pointer, int(*)(int)>(true)) );\n+\n+  // Sanity check.\n+  VERIFY( (test_category<is_pointer, ClassType>(false)) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "69141b27c1979d567e5086eacb39076d169adc31", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/primary_type_categories/is_pointer/typedefs.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e192ab01d0551cf98e72be093f73bff19f94e98a/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_pointer%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e192ab01d0551cf98e72be093f73bff19f94e98a/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_pointer%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_pointer%2Ftypedefs.cc?ref=e192ab01d0551cf98e72be093f73bff19f94e98a", "patch": "@@ -0,0 +1,36 @@\n+// 2004-12-12  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// \n+// NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n+\n+#include <tr1/type_traits>\n+\n+// { dg-do compile }\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::tr1::is_pointer<int>           test_type;\n+  typedef test_type::value_type               value_type;\n+  typedef test_type::type                     type;\n+  typedef test_type::type::value_type         type_value_type;\n+  typedef test_type::type::type               type_type;\n+}"}, {"sha": "d3c6b95e66b4dfc2869e4a9f19b7812fc0e88c38", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/primary_type_categories/is_reference/is_reference.cc", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e192ab01d0551cf98e72be093f73bff19f94e98a/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_reference%2Fis_reference.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e192ab01d0551cf98e72be093f73bff19f94e98a/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_reference%2Fis_reference.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_reference%2Fis_reference.cc?ref=e192ab01d0551cf98e72be093f73bff19f94e98a", "patch": "@@ -30,13 +30,9 @@ void test01()\n   using std::tr1::is_reference;\n   using namespace __gnu_test;\n \n-  typedef int&           int_ref;\n-  typedef ClassType&     ClassType_ref;\n-  typedef int (&fun_ref) (int);\n-\n-  VERIFY( (test_category<is_reference, int_ref>(true)) );\n-  VERIFY( (test_category<is_reference, ClassType_ref>(true)) );\n-  VERIFY( (test_category<is_reference, fun_ref>(true)) );\n+  VERIFY( (test_category<is_reference, int&>(true)) );\n+  VERIFY( (test_category<is_reference, ClassType&>(true)) );\n+  VERIFY( (test_category<is_reference, int(&)(int)>(true)) );\n \n   // Sanity check.\n   VERIFY( (test_category<is_reference, ClassType>(false)) );"}]}