{"sha": "eb85899d605dcfc4519bf764959d92672f0f0749", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI4NTg5OWQ2MDVkY2ZjNDUxOWJmNzY0OTU5ZDkyNjcyZjBmMDc0OQ==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2020-03-16T15:25:14Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-11T09:53:49Z"}, "message": "[Ada] Additional warnings on overlapping actuals of composite types\n\n2020-06-11  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* sem_warn.adb (Warn_On_Overlapping_Actuals): Simplify code,\n\tremove inner predicate Is_Covered_Formal, preserve warning for\n\ttwo overlapping composite types when only one is writable, and\n\tfor two overlapping and writable elementary types.", "tree": {"sha": "20d38e6295f806fed2727b1db1a6f034b6c299db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20d38e6295f806fed2727b1db1a6f034b6c299db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb85899d605dcfc4519bf764959d92672f0f0749", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb85899d605dcfc4519bf764959d92672f0f0749", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb85899d605dcfc4519bf764959d92672f0f0749", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb85899d605dcfc4519bf764959d92672f0f0749/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4127ebece723b172aeecacbba9b523af98cc646b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4127ebece723b172aeecacbba9b523af98cc646b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4127ebece723b172aeecacbba9b523af98cc646b"}], "stats": {"total": 247, "additions": 138, "deletions": 109}, "files": [{"sha": "9a4a4d05f2f50cb54e7ae54c7fa7996e9aa7ae64", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 138, "deletions": 109, "changes": 247, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb85899d605dcfc4519bf764959d92672f0f0749/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb85899d605dcfc4519bf764959d92672f0f0749/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=eb85899d605dcfc4519bf764959d92672f0f0749", "patch": "@@ -3643,9 +3643,6 @@ package body Sem_Warn is\n    ---------------------------------\n \n    procedure Warn_On_Overlapping_Actuals (Subp : Entity_Id; N : Node_Id) is\n-      function Is_Covered_Formal (Formal : Node_Id) return Boolean;\n-      --  Return True if Formal is covered by the rule\n-\n       function Refer_Same_Object\n         (Act1 : Node_Id;\n          Act2 : Node_Id) return Boolean;\n@@ -3657,19 +3654,6 @@ package body Sem_Warn is\n       --  object_name is known to refer to the same object as the other name\n       --  (RM 6.4.1(6.11/3))\n \n-      -----------------------\n-      -- Is_Covered_Formal --\n-      -----------------------\n-\n-      function Is_Covered_Formal (Formal : Node_Id) return Boolean is\n-      begin\n-         return\n-           Ekind_In (Formal, E_Out_Parameter, E_In_Out_Parameter)\n-             and then (Is_Elementary_Type (Etype (Formal))\n-                        or else Is_Record_Type (Etype (Formal))\n-                        or else Is_Array_Type (Etype (Formal)));\n-      end Is_Covered_Formal;\n-\n       -----------------------\n       -- Refer_Same_Object --\n       -----------------------\n@@ -3759,137 +3743,182 @@ package body Sem_Warn is\n       Form1 := First_Formal (Subp);\n       Act1  := First_Actual (N);\n       while Present (Form1) and then Present (Act1) loop\n-         if Is_Covered_Formal (Form1)\n-            or else not Is_Elementary_Type (Etype (Act1))\n+         if Is_Generic_Type (Etype (Act1)) then\n+            return;\n+         end if;\n+\n+         --  One of the formals must be either (in)-out or composite.\n+         --  The other must be (in)-out.\n+\n+         if Is_Elementary_Type (Etype (Act1))\n+           and then Ekind (Form1) = E_In_Parameter\n          then\n+            null;\n+\n+         else\n             Form2 := First_Formal (Subp);\n             Act2  := First_Actual (N);\n             while Present (Form2) and then Present (Act2) loop\n                if Form1 /= Form2\n-                 and then Is_Covered_Formal (Form2)\n                  and then Refer_Same_Object (Act1, Act2)\n                then\n-                  --  Guard against previous errors\n+                  if Is_Generic_Type (Etype (Act2)) then\n+                     return;\n+                  end if;\n \n-                  if Error_Posted (N)\n-                    or else No (Etype (Act1))\n-                    or else No (Etype (Act2))\n-                  then\n-                     null;\n+                  --  First case : two writable elementary parameters\n+                  --  that overlap.\n \n-                  --  If the actual is a function call in prefix notation,\n-                  --  there is no real overlap.\n+                  if (Is_Elementary_Type (Etype (Form1))\n+                    and then Is_Elementary_Type (Etype (Form2))\n+                    and then Ekind (Form1) /= E_In_Parameter\n+                    and then Ekind (Form2) /= E_In_Parameter)\n \n-                  elsif Nkind (Act2) = N_Function_Call then\n-                     null;\n+                  --  Second case : two composite parameters that overlap,\n+                  --  one of which is writable.\n \n-                  --  If type is not by-copy, assume that aliasing is intended\n+                    or else (Is_Composite_Type (Etype (Form1))\n+                     and then Is_Composite_Type (Etype (Form2))\n+                     and then (Ekind (Form1) /= E_In_Parameter\n+                       or else Ekind (Form2) /= E_In_Parameter))\n \n-                  elsif\n-                    Present (Underlying_Type (Etype (Form1)))\n-                      and then\n-                        (Is_By_Reference_Type (Underlying_Type (Etype (Form1)))\n-                          or else\n-                            Convention (Underlying_Type (Etype (Form1))) =\n-                                              Convention_Ada_Pass_By_Reference)\n-                  then\n-                     null;\n+                  --  Third case : an elementary writable parameter that\n+                  --  overlaps a composite one.\n \n-                  --  Under Ada 2012 we only report warnings on overlapping\n-                  --  arrays and record types if switch is set.\n+                    or else (Is_Elementary_Type (Etype (Form1))\n+                     and then Ekind (Form1) /= E_In_Parameter\n+                     and then Is_Composite_Type (Etype (Form2)))\n \n-                  elsif Ada_Version >= Ada_2012\n-                    and then not Is_Elementary_Type (Etype (Form1))\n-                    and then not Warn_On_Overlap\n+                   or else (Is_Elementary_Type (Etype (Form2))\n+                     and then Ekind (Form2) /= E_In_Parameter\n+                     and then Is_Composite_Type (Etype (Form1)))\n                   then\n-                     null;\n \n-                  --  Here we may need to issue overlap message\n+                  --  Guard against previous errors\n \n-                  else\n-                     Error_Msg_Warn :=\n+                     if Error_Posted (N)\n+                       or else No (Etype (Act1))\n+                       or else No (Etype (Act2))\n+                     then\n+                        null;\n \n-                       --  Overlap checking is an error only in Ada 2012. For\n-                       --  earlier versions of Ada, this is a warning.\n+                     --  If the actual is a function call in prefix notation,\n+                     --  there is no real overlap.\n \n-                       Ada_Version < Ada_2012\n+                     elsif Nkind (Act2) = N_Function_Call then\n+                        null;\n \n-                       --  Overlap is only illegal in Ada 2012 in the case of\n-                       --  elementary types (passed by copy). For other types,\n-                       --  we always have a warning in all Ada versions.\n+                     --  If type is explicitly not by-copy, assume that\n+                     --  aliasing is intended.\n+\n+                     elsif\n+                       Present (Underlying_Type (Etype (Form1)))\n+                         and then\n+                           (Is_By_Reference_Type\n+                             (Underlying_Type (Etype (Form1)))\n+                             or else\n+                               Convention (Underlying_Type (Etype (Form1))) =\n+                                            Convention_Ada_Pass_By_Reference)\n+                     then\n+                        null;\n \n-                       or else not Is_Elementary_Type (Etype (Form1))\n+                     --  Under Ada 2012 we only report warnings on overlapping\n+                     --  arrays and record types if switch is set.\n \n-                       --  debug flag -gnatd.E changes the error to a warning\n-                       --  even in Ada 2012 mode.\n+                     elsif Ada_Version >= Ada_2012\n+                       and then not Is_Elementary_Type (Etype (Form1))\n+                       and then not Warn_On_Overlap\n+                     then\n+                        null;\n \n-                       or else Error_To_Warning\n-                       or else Warn_Only;\n+                     --  Here we may need to issue overlap message\n \n-                     declare\n-                        Act  : Node_Id;\n-                        Form : Entity_Id;\n+                     else\n+                        Error_Msg_Warn :=\n \n-                     begin\n-                        --  Find matching actual\n+                          --  Overlap checking is an error only in Ada 2012.\n+                          --  For earlier versions of Ada, this is a warning.\n \n-                        Act  := First_Actual (N);\n-                        Form := First_Formal (Subp);\n-                        while Act /= Act2 loop\n-                           Next_Formal (Form);\n-                           Next_Actual (Act);\n-                        end loop;\n+                          Ada_Version < Ada_2012\n \n-                        if Is_Elementary_Type (Etype (Act1))\n-                          and then Ekind (Form2) = E_In_Parameter\n-                        then\n-                           null;  --  No real aliasing\n+                          --  Overlap is only illegal in Ada 2012 in the case\n+                          --  of elementary types (passed by copy). For other\n+                          --  types we always have a warning in all versions.\n \n-                        elsif Is_Elementary_Type (Etype (Act2))\n-                          and then Ekind (Form2) = E_In_Parameter\n-                        then\n-                           null;  --  Ditto\n+                          or else not Is_Elementary_Type (Etype (Form1))\n \n-                        --  If the call was written in prefix notation, and\n-                        --  thus its prefix before rewriting was a selected\n-                        --  component, count only visible actuals in the call.\n+                          --  debug flag -gnatd.E changes the error to a\n+                          --  warning even in Ada 2012 mode.\n \n-                        elsif Is_Entity_Name (First_Actual (N))\n-                          and then Nkind (Original_Node (N)) = Nkind (N)\n-                          and then Nkind (Name (Original_Node (N))) =\n-                                                         N_Selected_Component\n-                          and then\n-                            Is_Entity_Name (Prefix (Name (Original_Node (N))))\n-                          and then\n-                            Entity (Prefix (Name (Original_Node (N)))) =\n-                              Entity (First_Actual (N))\n-                        then\n-                           if Act1 = First_Actual (N) then\n-                              Error_Msg_FE\n-                                (\"<<`IN OUT` prefix overlaps with \"\n-                                 & \"actual for&\", Act1, Form);\n+                          or else Error_To_Warning\n+                          or else Warn_Only;\n+\n+                        declare\n+                           Act  : Node_Id;\n+                           Form : Entity_Id;\n+\n+                        begin\n+                           --  Find matching actual\n+\n+                           Act  := First_Actual (N);\n+                           Form := First_Formal (Subp);\n+                           while Act /= Act2 loop\n+                              Next_Formal (Form);\n+                              Next_Actual (Act);\n+                           end loop;\n+\n+                           if Is_Elementary_Type (Etype (Act1))\n+                             and then Ekind (Form2) = E_In_Parameter\n+                           then\n+                              null;  --  No real aliasing\n+\n+                           elsif Is_Elementary_Type (Etype (Act2))\n+                             and then Ekind (Form2) = E_In_Parameter\n+                           then\n+                              null;  --  Ditto\n+\n+                           --  If the call was written in prefix notation, and\n+                           --  thus its prefix before rewriting was a selected\n+                           --  component, count only visible actuals in call.\n+\n+                           elsif Is_Entity_Name (First_Actual (N))\n+                             and then Nkind (Original_Node (N)) = Nkind (N)\n+                             and then Nkind (Name (Original_Node (N))) =\n+                                                           N_Selected_Component\n+                             and then\n+                               Is_Entity_Name\n+                                 (Prefix (Name (Original_Node (N))))\n+                             and then\n+                               Entity (Prefix (Name (Original_Node (N)))) =\n+                                 Entity (First_Actual (N))\n+                           then\n+                              if Act1 = First_Actual (N) then\n+                                 Error_Msg_FE\n+                                   (\"<<`IN OUT` prefix overlaps with \"\n+                                    & \"actual for&\", Act1, Form);\n+\n+                              else\n+                                 --  For greater clarity, give name of formal\n+\n+                                 Error_Msg_Node_2 := Form;\n+                                 Error_Msg_FE\n+                                   (\"<<writable actual for & overlaps with \"\n+                                    & \"actual for&\", Act1, Form);\n+                              end if;\n \n                            else\n                               --  For greater clarity, give name of formal\n \n                               Error_Msg_Node_2 := Form;\n+\n+                              --  This is one of the messages\n+\n                               Error_Msg_FE\n                                 (\"<<writable actual for & overlaps with \"\n-                                 & \"actual for&\", Act1, Form);\n+                                 & \"actual for&\", Act1, Form1);\n                            end if;\n-\n-                        else\n-                           --  For greater clarity, give name of formal\n-\n-                           Error_Msg_Node_2 := Form;\n-\n-                           --  This is one of the messages\n-\n-                           Error_Msg_FE\n-                             (\"<<writable actual for & overlaps with \"\n-                              & \"actual for&\", Act1, Form1);\n-                        end if;\n-                     end;\n+                        end;\n+                     end if;\n                   end if;\n \n                   return;"}]}