{"sha": "d9cdfea55f31e461e54db7039fbc2281824ef527", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDljZGZlYTU1ZjMxZTQ2MWU1NGRiNzAzOWZiYzIyODE4MjRlZjUyNw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-08-30T21:27:36Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-08-30T21:27:36Z"}, "message": "re PR c++/50084 ([C++0x] ICE: decltype + remove_reference + new)\n\n\tPR c++/50084\n\t* cp-tree.h (cp_decl_specifier_seq): Rename user_defined_type_p\n\tto type_definition_p.\n\t* parser.c (cp_parser_set_decl_spec_type): Likewise.\n\t* decl.c (grokdeclarator): Check it.\n\nFrom-SVN: r178340", "tree": {"sha": "2850b461ca153992dde9c8f08603f7d02461e9b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2850b461ca153992dde9c8f08603f7d02461e9b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9cdfea55f31e461e54db7039fbc2281824ef527", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9cdfea55f31e461e54db7039fbc2281824ef527", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9cdfea55f31e461e54db7039fbc2281824ef527", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9cdfea55f31e461e54db7039fbc2281824ef527/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "90677b8d915a4abc6366d38c0470c7cf0438e18c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90677b8d915a4abc6366d38c0470c7cf0438e18c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90677b8d915a4abc6366d38c0470c7cf0438e18c"}], "stats": {"total": 61, "additions": 44, "deletions": 17}, "files": [{"sha": "96ac2377be30e97e5846dfd8b94801b14286859b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9cdfea55f31e461e54db7039fbc2281824ef527/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9cdfea55f31e461e54db7039fbc2281824ef527/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d9cdfea55f31e461e54db7039fbc2281824ef527", "patch": "@@ -1,5 +1,11 @@\n 2011-08-30  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/50084\n+\t* cp-tree.h (cp_decl_specifier_seq): Rename user_defined_type_p\n+\tto type_definition_p.\n+\t* parser.c (cp_parser_set_decl_spec_type): Likewise.\n+\t* decl.c (grokdeclarator): Check it.\n+\n \tPR c++/50089\n \t* semantics.c (finish_id_expression): Use\n \tcurrent_nonlambda_class_type for qualified-ids."}, {"sha": "d18599b0c53292528f92d9bb099691006cbe44de", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9cdfea55f31e461e54db7039fbc2281824ef527/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9cdfea55f31e461e54db7039fbc2281824ef527/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=d9cdfea55f31e461e54db7039fbc2281824ef527", "patch": "@@ -4551,8 +4551,8 @@ typedef struct cp_decl_specifier_seq {\n   /* The storage class specified -- or sc_none if no storage class was\n      explicitly specified.  */\n   cp_storage_class storage_class;\n-  /* True iff TYPE_SPEC indicates a user-defined type.  */\n-  BOOL_BITFIELD user_defined_type_p : 1;\n+  /* True iff TYPE_SPEC defines a class or enum.  */\n+  BOOL_BITFIELD type_definition_p : 1;\n   /* True iff multiple types were (erroneously) specified for this\n      decl-specifier-seq.  */\n   BOOL_BITFIELD multiple_types_p : 1;"}, {"sha": "39a0b0e22fc387f7f2522ceb80da8694da42c35b", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9cdfea55f31e461e54db7039fbc2281824ef527/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9cdfea55f31e461e54db7039fbc2281824ef527/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=d9cdfea55f31e461e54db7039fbc2281824ef527", "patch": "@@ -9643,6 +9643,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t  && TYPE_NAME (type)\n \t  && TREE_CODE (TYPE_NAME (type)) == TYPE_DECL\n \t  && TYPE_ANONYMOUS_P (type)\n+\t  && declspecs->type_definition_p\n \t  && cp_type_quals (type) == TYPE_UNQUALIFIED)\n \t{\n \t  tree t;"}, {"sha": "7d766d130caf4bcdc684eff1947ad20f5debe8d6", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9cdfea55f31e461e54db7039fbc2281824ef527/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9cdfea55f31e461e54db7039fbc2281824ef527/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=d9cdfea55f31e461e54db7039fbc2281824ef527", "patch": "@@ -12577,7 +12577,7 @@ cp_parser_type_specifier (cp_parser* parser,\n \t    cp_parser_set_decl_spec_type (decl_specs,\n \t\t\t\t\t  type_spec,\n \t\t\t\t\t  token->location,\n-\t\t\t\t\t  /*user_defined_p=*/true);\n+\t\t\t\t\t  /*type_definition_p=*/true);\n \t  return type_spec;\n \t}\n       else\n@@ -12606,7 +12606,7 @@ cp_parser_type_specifier (cp_parser* parser,\n \t    cp_parser_set_decl_spec_type (decl_specs,\n \t\t\t\t\t  type_spec,\n \t\t\t\t\t  token->location,\n-\t\t\t\t\t  /*user_defined_p=*/true);\n+\t\t\t\t\t  /*type_definition_p=*/true);\n \t  return type_spec;\n \t}\n \n@@ -12628,7 +12628,7 @@ cp_parser_type_specifier (cp_parser* parser,\n \tcp_parser_set_decl_spec_type (decl_specs,\n \t\t\t\t      type_spec,\n \t\t\t\t      token->location,\n-\t\t\t\t      /*user_defined_p=*/true);\n+\t\t\t\t      /*type_definition_p=*/false);\n       return type_spec;\n \n     case RID_CONST:\n@@ -12821,7 +12821,7 @@ cp_parser_simple_type_specifier (cp_parser* parser,\n       if (decl_specs)\n \tcp_parser_set_decl_spec_type (decl_specs, type,\n \t\t\t\t      token->location,\n-\t\t\t\t      /*user_defined_p=*/true);\n+\t\t\t\t      /*type_definition_p=*/false);\n \n       return type;\n \n@@ -12831,7 +12831,7 @@ cp_parser_simple_type_specifier (cp_parser* parser,\n       if (decl_specs)\n \tcp_parser_set_decl_spec_type (decl_specs, type,\n \t\t\t\t      token->location,\n-\t\t\t\t      /*user_defined_p=*/true);\n+\t\t\t\t      /*type_definition_p=*/false);\n \n       return type;\n \n@@ -12848,7 +12848,7 @@ cp_parser_simple_type_specifier (cp_parser* parser,\n       if (decl_specs)\n \tcp_parser_set_decl_spec_type (decl_specs, type,\n \t\t\t\t      token->location,\n-\t\t\t\t      /*user_defined_p=*/true);\n+\t\t\t\t      /*type_definition_p=*/false);\n       cp_lexer_consume_token (parser->lexer);\n       return type;\n     }\n@@ -12865,7 +12865,7 @@ cp_parser_simple_type_specifier (cp_parser* parser,\n \tcp_parser_set_decl_spec_type (decl_specs,\n \t\t\t\t      type,\n \t\t\t\t      token->location,\n-\t\t\t\t      /*user_defined=*/false);\n+\t\t\t\t      /*type_definition_p=*/false);\n       if (decl_specs)\n \tdecl_specs->any_specifiers_p = true;\n \n@@ -12940,7 +12940,7 @@ cp_parser_simple_type_specifier (cp_parser* parser,\n       if (type && decl_specs)\n \tcp_parser_set_decl_spec_type (decl_specs, type,\n \t\t\t\t      token->location,\n-\t\t\t\t      /*user_defined=*/true);\n+\t\t\t\t      /*type_definition_p=*/false);\n     }\n \n   /* If we didn't get a type-name, issue an error message.  */\n@@ -21004,15 +21004,14 @@ cp_parser_set_storage_class (cp_parser *parser,\n     decl_specs->conflicting_specifiers_p = true;\n }\n \n-/* Update the DECL_SPECS to reflect the TYPE_SPEC.  If USER_DEFINED_P\n-   is true, the type is a user-defined type; otherwise it is a\n-   built-in type specified by a keyword.  */\n+/* Update the DECL_SPECS to reflect the TYPE_SPEC.  If TYPE_DEFINITION_P\n+   is true, the type is a class or enum definition.  */\n \n static void\n cp_parser_set_decl_spec_type (cp_decl_specifier_seq *decl_specs,\n \t\t\t      tree type_spec,\n \t\t\t      location_t location,\n-\t\t\t      bool user_defined_p)\n+\t\t\t      bool type_definition_p)\n {\n   decl_specs->any_specifiers_p = true;\n \n@@ -21022,7 +21021,7 @@ cp_parser_set_decl_spec_type (cp_decl_specifier_seq *decl_specs,\n      declarations so that G++ can work with system headers that are not\n      C++-safe.  */\n   if (decl_specs->specs[(int) ds_typedef]\n-      && !user_defined_p\n+      && !type_definition_p\n       && (type_spec == boolean_type_node\n \t  || type_spec == char16_type_node\n \t  || type_spec == char32_type_node\n@@ -21037,7 +21036,7 @@ cp_parser_set_decl_spec_type (cp_decl_specifier_seq *decl_specs,\n       if (!decl_specs->type)\n \t{\n \t  decl_specs->type = type_spec;\n-\t  decl_specs->user_defined_type_p = false;\n+\t  decl_specs->type_definition_p = false;\n \t  decl_specs->type_location = location;\n \t}\n     }\n@@ -21046,7 +21045,7 @@ cp_parser_set_decl_spec_type (cp_decl_specifier_seq *decl_specs,\n   else\n     {\n       decl_specs->type = type_spec;\n-      decl_specs->user_defined_type_p = user_defined_p;\n+      decl_specs->type_definition_p = type_definition_p;\n       decl_specs->redefined_builtin_type = NULL_TREE;\n       decl_specs->type_location = location;\n     }"}, {"sha": "9ae62abd7ed2d2be5962855bb1fbb7ec19bc1547", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9cdfea55f31e461e54db7039fbc2281824ef527/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9cdfea55f31e461e54db7039fbc2281824ef527/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d9cdfea55f31e461e54db7039fbc2281824ef527", "patch": "@@ -1,5 +1,8 @@\n 2011-08-30  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/50084\n+\t* g++.dg/cpp0x/decltype33.C: New.\n+\n \tPR c++/50089\n \t* g++.dg/cpp0x/lambda/lambda-qualified.C: New.\n "}, {"sha": "d022d166482b7affaf73935c37178cf96e2f136c", "filename": "gcc/testsuite/g++.dg/cpp0x/decltype33.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9cdfea55f31e461e54db7039fbc2281824ef527/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype33.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9cdfea55f31e461e54db7039fbc2281824ef527/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype33.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype33.C?ref=d9cdfea55f31e461e54db7039fbc2281824ef527", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/50084\n+// { dg-options \"-std=c++0x -fno-inline\" }\n+\n+template<typename>   struct remove_reference;\n+template<typename T> struct remove_reference<T&> { typedef T type; };\n+\n+template <class T> void f(T) { }\n+\n+void g()\n+{\n+  struct { } * v = 0;\n+\n+  typedef remove_reference<decltype(*v)>::type at;\n+\n+  // The typedef should't assign the name \"at\" to the struct.\n+  // { dg-final { scan-assembler \"_Z1fIZ1gvEUt_EvT_\" } }\n+  f(at());\n+}"}]}