{"sha": "7e8f3096dc8d41f9bffec4033d42737a758d8e8d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2U4ZjMwOTZkYzhkNDFmOWJmZmVjNDAzM2Q0MjczN2E3NThkOGU4ZA==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@physics.uc.edu", "date": "2003-05-19T07:02:12Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2003-05-19T07:02:12Z"}, "message": "name-lookup.c (free_binding_entry): fix where the GTY markers are.\n\n\t* name-lookup.c (free_binding_entry): fix where the GTY markers are.\n\t(binding_entry_make): Make entry->chain NULL after getting an entry.\n\tfix the spelling of chain in a comment.\n\t(binding_table_free): speed up by having temporary variable.\n\t(binding_table_new): set table->chain to be NULL after allocating\n\ta table.\n\t(cxx_binding_make): use gcc_alloc instead of ggc_alloc_cleared and set\n\tbinding->previous to NULL after getting an binding for speed.\n\nFrom-SVN: r66948", "tree": {"sha": "5c9394428423772469ade05364ed58146be1036f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c9394428423772469ade05364ed58146be1036f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e8f3096dc8d41f9bffec4033d42737a758d8e8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e8f3096dc8d41f9bffec4033d42737a758d8e8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e8f3096dc8d41f9bffec4033d42737a758d8e8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e8f3096dc8d41f9bffec4033d42737a758d8e8d/comments", "author": null, "committer": null, "parents": [{"sha": "1c745a02699797b52f1978dd00ac46b3b149938c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c745a02699797b52f1978dd00ac46b3b149938c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c745a02699797b52f1978dd00ac46b3b149938c"}], "stats": {"total": 29, "additions": 23, "deletions": 6}, "files": [{"sha": "f2acb5c46db7f6a559d5a024fde9ca1e7aa29711", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e8f3096dc8d41f9bffec4033d42737a758d8e8d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e8f3096dc8d41f9bffec4033d42737a758d8e8d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7e8f3096dc8d41f9bffec4033d42737a758d8e8d", "patch": "@@ -1,3 +1,14 @@\n+2003-05-18 Andrew Pinski <pinskia@physics.uc.edu>\n+\n+\t* name-lookup.c (free_binding_entry): fix where the GTY markers are.\n+\t(binding_entry_make): Make entry->chain NULL after getting an entry.\n+\tfix the spelling of chain in a comment.\n+\t(binding_table_free): speed up by having temporary variable.\n+\t(binding_table_new): set table->chain to be NULL after allocating\n+\ta table. \n+\t(cxx_binding_make): use gcc_alloc instead of ggc_alloc_cleared and set\n+\tbinding->previous to NULL after getting an binding for speed.\n+\t\n 2003-05-18  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \t* cp-tree.h (struct lang_type_class): Replace data member tags"}, {"sha": "889d4953a81f5b3e379fd155dc058ffb6a54a1ee", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e8f3096dc8d41f9bffec4033d42737a758d8e8d/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e8f3096dc8d41f9bffec4033d42737a758d8e8d/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=7e8f3096dc8d41f9bffec4033d42737a758d8e8d", "patch": "@@ -34,7 +34,7 @@ Boston, MA 02111-1307, USA.  */\n #define ENTRY_INDEX(HASH, COUNT) (((HASH) >> 3) & ((COUNT) - 1))\n \n /* A free list of \"binding_entry\"s awaiting for re-use.  */\n-static binding_entry GTY((deletable(\"\"))) free_binding_entry;\n+static GTY((deletable(\"\"))) binding_entry free_binding_entry = NULL;\n \n /* Create a binding_entry object for (NAME, TYPE).  */\n static inline binding_entry\n@@ -52,6 +52,7 @@ binding_entry_make (tree name, tree type)\n \n   entry->name = name;\n   entry->type = type;\n+  entry->chain = NULL;\n \n   return entry;\n }\n@@ -72,7 +73,7 @@ struct binding_table_s GTY(())\n   binding_entry * GTY((length (\"%h.chain_count\"))) chain;\n \n   /* The number of chains in this table.  This is the length of the\n-     the member \"chaiin\" considered as an array.  */\n+     the member \"chain\" considered as an array.  */\n   size_t chain_count;\n \n   /* Number of \"binding_entry\"s in this table.  */\n@@ -99,12 +100,15 @@ binding_table_free (binding_table table)\n \n   for (i = 0; i < table->chain_count; ++i)\n     {\n-      while (table->chain[i] != NULL)\n+      binding_entry temp = table->chain[i];\n+      while (temp != NULL)\n         {\n-          binding_entry entry = table->chain[i];\n-          table->chain[i] = entry->chain;\n+          binding_entry entry = temp;\n+          temp = entry->chain;\n+          entry->chain = NULL; // just be sure\n           binding_entry_free (entry);\n         }\n+      table->chain[i] = temp;\n     }\n   table->entry_count = 0;\n }\n@@ -114,6 +118,7 @@ binding_table\n binding_table_new (size_t chain_count)\n {\n   binding_table table = ggc_alloc (sizeof (struct binding_table_s));\n+  table->chain = NULL;\n   binding_table_construct (table, chain_count);\n   return table;\n }\n@@ -277,10 +282,11 @@ cxx_binding_make (tree value, tree type)\n       free_bindings = binding->previous;\n     }\n   else\n-    binding = ggc_alloc_cleared (sizeof (cxx_binding));\n+    binding = ggc_alloc (sizeof (cxx_binding));\n \n   binding->value = value;\n   binding->type = type;\n+  binding->previous = NULL;\n \n   return binding;\n }"}]}