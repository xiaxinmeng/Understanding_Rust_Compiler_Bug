{"sha": "06e28de223648085ab8a265fe5f2b7dafaf22ad4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDZlMjhkZTIyMzY0ODA4NWFiOGEyNjVmZTVmMmI3ZGFmYWYyMmFkNA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2013-12-09T20:09:29Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2013-12-09T20:09:29Z"}, "message": "Eliminate BASIC_BLOCK macro.\n\ngcc/\n\t* basic-block.h (BASIC_BLOCK): Eliminate macro.\n\n\t* alias.c (init_alias_analysis): Eliminate BASIC_BLOCK macro in\n\tfavor of uses of BASIC_BLOCK_FOR_FN, making uses of cfun explicit.\n\t* bt-load.c (compute_defs_uses_and_gen, compute_out, link_btr_uses,\n\tblock_at_edge_of_live_range_p, migrate_btr_defs): Likewise.\n\t* caller-save.c (insert_one_insn): Likewise.\n\t* cfg.c (debug_bb, get_bb_original, get_bb_copy): Likewise.\n\t* cfgexpand.c (add_scope_conflicts): Likewise.\n\t* cfghooks.c (verify_flow_info): Likewise.\n\t* cfgloop.c (flow_loops_find): Likewise.\n\t* cfgrtl.c (rtl_flow_call_edges_add): Likewise.\n\t* config/mips/mips.c (r10k_insert_cache_barriers): Likewise.\n\t* config/s390/s390.c (s390_optimize_nonescaping_tx): Likewise.\n\t* config/spu/spu.c (spu_machine_dependent_reorg): Likewise.\n\t* cse.c (cse_main): Likewise.\n\t* dce.c (fast_dce): Likewise.\n\t* df-core.c (df_set_blocks, df_worklist_propagate_forward,\n\tdf_worklist_propagate_backward, df_worklist_dataflow_doublequeue,\n\tdf_bb_replace, df_dump_region): Likewise.\n\t* df-problems.c (df_rd_bb_local_compute, df_lr_bb_local_compute,\n\tdf_live_bb_local_compute, df_chain_remove_problem)\n\tdf_chain_create_bb, df_word_lr_bb_local_compute, df_note_bb_compute,\n\tdf_md_bb_local_compute, df_md_local_compute,\n\tdf_md_transfer_function): Likewise.\n\t* df-scan.c (df_scan_blocks, df_reorganize_refs_by_reg_by_insn,\n\tdf_reorganize_refs_by_insn, df_bb_refs_collect,\n\tdf_record_entry_block_defs, df_update_entry_block_defs,\n\tdf_record_exit_block_uses): Likewise.\n\t* dominance.c (nearest_common_dominator_for_set): Likewise.\n\t* gcse.c (hoist_code): Likewise.\n\t* graph.c (draw_cfg_nodes_no_loops): Likewise.\n\t* ipa-inline-analysis.c (param_change_prob,\n\testimate_function_body_sizes): Likewise.\n\t* ipa-split.c (dominated_by_forbidden): Likewise.\n\t* loop-unroll.c (apply_opt_in_copies): Likewise.\n\t* lower-subreg.c (decompose_multiword_subregs): Likewise.\n\t* lra-lives.c (lra_create_live_ranges): Likewise.\n\t* predict.c (propagate_freq): Likewise.\n\t* regrename.c (regrename_analyze): Likewise.\n\t* regstat.c (regstat_bb_compute_ri,\n\tregstat_bb_compute_calls_crossed): Likewise.\n\t* resource.c (mark_target_live_regs): Likewise.\n\t* sched-ebb.c (ebb_fix_recovery_cfg): Likewise.\n\t* sched-int.h (EBB_FIRST_BB, EBB_LAST_BB): Likewise.\n\t* sched-rgn.c (debug_region, dump_region_dot, too_large,\n\thaifa_find_rgns, extend_rgns, compute_dom_prob_ps, update_live,\n\tpropagate_deps, sched_is_disabled_for_current_region_p): Likewise.\n\t* sched-vis.c (debug_bb_n_slim): Likewise.\n\t* sel-sched-ir.c (sel_finish_global_and_expr, verify_backedges,\n\tpurge_empty_blocks, sel_remove_loop_preheader): Likewise.\n\t* sel-sched.c (remove_insns_that_need_bookkeeping)\n\t(current_region_empty_p, sel_region_init,\n\tsimplify_changed_insns): Likewise.\n\t* trans-mem.c (execute_tm_mark, execute_tm_edges,\n\ttm_memopt_compute_antic, ipa_tm_scan_irr_function): Likewise.\n\t* tree-cfg.c (make_edges, end_recording_case_labels,\n\tlabel_to_block_fn, gimple_debug_bb, gimple_flow_call_edges_add,\n\tremove_edge_and_dominated_blocks, remove_edge_and_dominated_blocks,\n\tgimple_purge_all_dead_eh_edges,\n\tgimple_purge_all_dead_abnormal_call_edges): Likewise.\n\t* tree-cfgcleanup.c (fixup_noreturn_call,\n\tsplit_bbs_on_noreturn_calls, cleanup_tree_cfg_1): Likewise.\n\t* tree-inline.c (copy_cfg_body, fold_marked_statements): Likewise.\n\t* tree-into-ssa.c (set_livein_block, prune_unused_phi_nodes,\n\tinsert_phi_nodes_for, insert_updated_phi_nodes_for): Likewise.\n\t* tree-ssa-dom.c (tree_ssa_dominator_optimize): Likewise.\n\t* tree-ssa-live.c (live_worklist): Likewise.\n\t* tree-ssa-loop-manip.c (compute_live_loop_exits,\n\tadd_exit_phis_var, find_uses_to_rename, copy_phi_node_args): Likewise.\n\t* tree-ssa-pre.c (compute_antic): Likewise.\n\t* tree-ssa-reassoc.c (update_range_test, optimize_range_tests): Likewise.\n\t* tree-ssa-sink.c (nearest_common_dominator_of_uses): Likewise.\n\t* tree-ssa-tail-merge.c (same_succ_hash, same_succ_def::equal,\n\tsame_succ_flush_bbs, update_worklist, set_cluster,\n\tsame_phi_alternatives, find_clusters_1, apply_clusters,\n\tupdate_debug_stmts): Likewise.\n\t* tree-ssa-threadupdate.c (mark_threaded_blocks,\n\tthread_through_all_blocks): Likewise.\n\t* tree-ssa-uncprop.c (associate_equivalences_with_edges): Likewise.\n\t* tree-vrp.c (find_assert_locations): Likewise.\n\nFrom-SVN: r205822", "tree": {"sha": "e6b69fa7dc795300af712197ffcf54f5e6afbda4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6b69fa7dc795300af712197ffcf54f5e6afbda4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06e28de223648085ab8a265fe5f2b7dafaf22ad4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06e28de223648085ab8a265fe5f2b7dafaf22ad4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06e28de223648085ab8a265fe5f2b7dafaf22ad4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06e28de223648085ab8a265fe5f2b7dafaf22ad4/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "557c4b493bcfbda45babb0752455798328849630", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/557c4b493bcfbda45babb0752455798328849630", "html_url": "https://github.com/Rust-GCC/gccrs/commit/557c4b493bcfbda45babb0752455798328849630"}], "stats": {"total": 453, "additions": 283, "deletions": 170}, "files": [{"sha": "b6ba8e743464131f302bec354565dcd11f7f6f36", "filename": "gcc/ChangeLog", "status": "modified", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=06e28de223648085ab8a265fe5f2b7dafaf22ad4", "patch": "@@ -1,3 +1,87 @@\n+2013-12-09  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* basic-block.h (BASIC_BLOCK): Eliminate macro.\n+\n+\t* alias.c (init_alias_analysis): Eliminate BASIC_BLOCK macro in\n+\tfavor of uses of BASIC_BLOCK_FOR_FN, making uses of cfun explicit.\n+\t* bt-load.c (compute_defs_uses_and_gen, compute_out, link_btr_uses,\n+\tblock_at_edge_of_live_range_p, migrate_btr_defs): Likewise.\n+\t* caller-save.c (insert_one_insn): Likewise.\n+\t* cfg.c (debug_bb, get_bb_original, get_bb_copy): Likewise.\n+\t* cfgexpand.c (add_scope_conflicts): Likewise.\n+\t* cfghooks.c (verify_flow_info): Likewise.\n+\t* cfgloop.c (flow_loops_find): Likewise.\n+\t* cfgrtl.c (rtl_flow_call_edges_add): Likewise.\n+\t* config/mips/mips.c (r10k_insert_cache_barriers): Likewise.\n+\t* config/s390/s390.c (s390_optimize_nonescaping_tx): Likewise.\n+\t* config/spu/spu.c (spu_machine_dependent_reorg): Likewise.\n+\t* cse.c (cse_main): Likewise.\n+\t* dce.c (fast_dce): Likewise.\n+\t* df-core.c (df_set_blocks, df_worklist_propagate_forward,\n+\tdf_worklist_propagate_backward, df_worklist_dataflow_doublequeue,\n+\tdf_bb_replace, df_dump_region): Likewise.\n+\t* df-problems.c (df_rd_bb_local_compute, df_lr_bb_local_compute,\n+\tdf_live_bb_local_compute, df_chain_remove_problem)\n+\tdf_chain_create_bb, df_word_lr_bb_local_compute, df_note_bb_compute,\n+\tdf_md_bb_local_compute, df_md_local_compute,\n+\tdf_md_transfer_function): Likewise.\n+\t* df-scan.c (df_scan_blocks, df_reorganize_refs_by_reg_by_insn,\n+\tdf_reorganize_refs_by_insn, df_bb_refs_collect,\n+\tdf_record_entry_block_defs, df_update_entry_block_defs,\n+\tdf_record_exit_block_uses): Likewise.\n+\t* dominance.c (nearest_common_dominator_for_set): Likewise.\n+\t* gcse.c (hoist_code): Likewise.\n+\t* graph.c (draw_cfg_nodes_no_loops): Likewise.\n+\t* ipa-inline-analysis.c (param_change_prob,\n+\testimate_function_body_sizes): Likewise.\n+\t* ipa-split.c (dominated_by_forbidden): Likewise.\n+\t* loop-unroll.c (apply_opt_in_copies): Likewise.\n+\t* lower-subreg.c (decompose_multiword_subregs): Likewise.\n+\t* lra-lives.c (lra_create_live_ranges): Likewise.\n+\t* predict.c (propagate_freq): Likewise.\n+\t* regrename.c (regrename_analyze): Likewise.\n+\t* regstat.c (regstat_bb_compute_ri,\n+\tregstat_bb_compute_calls_crossed): Likewise.\n+\t* resource.c (mark_target_live_regs): Likewise.\n+\t* sched-ebb.c (ebb_fix_recovery_cfg): Likewise.\n+\t* sched-int.h (EBB_FIRST_BB, EBB_LAST_BB): Likewise.\n+\t* sched-rgn.c (debug_region, dump_region_dot, too_large,\n+\thaifa_find_rgns, extend_rgns, compute_dom_prob_ps, update_live,\n+\tpropagate_deps, sched_is_disabled_for_current_region_p): Likewise.\n+\t* sched-vis.c (debug_bb_n_slim): Likewise.\n+\t* sel-sched-ir.c (sel_finish_global_and_expr, verify_backedges,\n+\tpurge_empty_blocks, sel_remove_loop_preheader): Likewise.\n+\t* sel-sched.c (remove_insns_that_need_bookkeeping)\n+\t(current_region_empty_p, sel_region_init,\n+\tsimplify_changed_insns): Likewise.\n+\t* trans-mem.c (execute_tm_mark, execute_tm_edges,\n+\ttm_memopt_compute_antic, ipa_tm_scan_irr_function): Likewise.\n+\t* tree-cfg.c (make_edges, end_recording_case_labels,\n+\tlabel_to_block_fn, gimple_debug_bb, gimple_flow_call_edges_add,\n+\tremove_edge_and_dominated_blocks, remove_edge_and_dominated_blocks,\n+\tgimple_purge_all_dead_eh_edges,\n+\tgimple_purge_all_dead_abnormal_call_edges): Likewise.\n+\t* tree-cfgcleanup.c (fixup_noreturn_call,\n+\tsplit_bbs_on_noreturn_calls, cleanup_tree_cfg_1): Likewise.\n+\t* tree-inline.c (copy_cfg_body, fold_marked_statements): Likewise.\n+\t* tree-into-ssa.c (set_livein_block, prune_unused_phi_nodes,\n+\tinsert_phi_nodes_for, insert_updated_phi_nodes_for): Likewise.\n+\t* tree-ssa-dom.c (tree_ssa_dominator_optimize): Likewise.\n+\t* tree-ssa-live.c (live_worklist): Likewise.\n+\t* tree-ssa-loop-manip.c (compute_live_loop_exits,\n+\tadd_exit_phis_var, find_uses_to_rename, copy_phi_node_args): Likewise.\n+\t* tree-ssa-pre.c (compute_antic): Likewise.\n+\t* tree-ssa-reassoc.c (update_range_test, optimize_range_tests): Likewise.\n+\t* tree-ssa-sink.c (nearest_common_dominator_of_uses): Likewise.\n+\t* tree-ssa-tail-merge.c (same_succ_hash, same_succ_def::equal,\n+\tsame_succ_flush_bbs, update_worklist, set_cluster,\n+\tsame_phi_alternatives, find_clusters_1, apply_clusters,\n+\tupdate_debug_stmts): Likewise.\n+\t* tree-ssa-threadupdate.c (mark_threaded_blocks,\n+\tthread_through_all_blocks): Likewise.\n+\t* tree-ssa-uncprop.c (associate_equivalences_with_edges): Likewise.\n+\t* tree-vrp.c (find_assert_locations): Likewise.\n+\n 2013-12-09  David Malcolm  <dmalcolm@redhat.com>\n \n \t* basic-block.h (SET_BASIC_BLOCK): Eliminate macro."}, {"sha": "6290c832ddc123fc3099548eb74deb4c60a6047a", "filename": "gcc/alias.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=06e28de223648085ab8a265fe5f2b7dafaf22ad4", "patch": "@@ -2989,7 +2989,7 @@ init_alias_analysis (void)\n       /* Walk the insns adding values to the new_reg_base_value array.  */\n       for (i = 0; i < rpo_cnt; i++)\n \t{\n-\t  basic_block bb = BASIC_BLOCK (rpo[i]);\n+\t  basic_block bb = BASIC_BLOCK_FOR_FN (cfun, rpo[i]);\n \t  FOR_BB_INSNS (bb, insn)\n \t    {\n \t      if (NONDEBUG_INSN_P (insn))"}, {"sha": "3bd011ede5206d960bcf4cf91eeabdc686a3a5c4", "filename": "gcc/basic-block.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=06e28de223648085ab8a265fe5f2b7dafaf22ad4", "patch": "@@ -332,8 +332,6 @@ struct GTY(()) control_flow_graph {\n #define label_to_block_map\t(cfun->cfg->x_label_to_block_map)\n #define profile_status\t\t(cfun->cfg->x_profile_status)\n \n-#define BASIC_BLOCK(N)\t\t((*basic_block_info)[(N)])\n-\n /* For iterating over basic blocks.  */\n #define FOR_BB_BETWEEN(BB, FROM, TO, DIR) \\\n   for (BB = FROM; BB != TO; BB = BB->DIR)"}, {"sha": "bbd0dd8f0ceec5eaed228c385fe83ef7aba18028", "filename": "gcc/bt-load.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Fbt-load.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Fbt-load.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbt-load.c?ref=06e28de223648085ab8a265fe5f2b7dafaf22ad4", "patch": "@@ -460,7 +460,7 @@ compute_defs_uses_and_gen (fibheap_t all_btr_defs, btr_def *def_array,\n   bitmap_vector_clear (bb_gen, last_basic_block);\n   for (i = NUM_FIXED_BLOCKS; i < last_basic_block; i++)\n     {\n-      basic_block bb = BASIC_BLOCK (i);\n+      basic_block bb = BASIC_BLOCK_FOR_FN (cfun, i);\n       int reg;\n       btr_def defs_this_bb = NULL;\n       rtx insn;\n@@ -651,7 +651,7 @@ compute_out (sbitmap *bb_out, sbitmap *bb_gen, sbitmap *bb_kill, int max_uid)\n       changed = 0;\n       for (i = NUM_FIXED_BLOCKS; i < last_basic_block; i++)\n \t{\n-\t  bitmap_union_of_preds (bb_in, bb_out, BASIC_BLOCK (i));\n+\t  bitmap_union_of_preds (bb_in, bb_out, BASIC_BLOCK_FOR_FN (cfun, i));\n \t  changed |= bitmap_ior_and_compl (bb_out[i], bb_gen[i],\n \t\t\t\t\t       bb_in, bb_kill[i]);\n \t}\n@@ -670,11 +670,11 @@ link_btr_uses (btr_def *def_array, btr_user *use_array, sbitmap *bb_out,\n      Count up the number of reaching defs of each use.  */\n   for (i = NUM_FIXED_BLOCKS; i < last_basic_block; i++)\n     {\n-      basic_block bb = BASIC_BLOCK (i);\n+      basic_block bb = BASIC_BLOCK_FOR_FN (cfun, i);\n       rtx insn;\n       rtx last;\n \n-      bitmap_union_of_preds (reaching_defs, bb_out, BASIC_BLOCK (i));\n+      bitmap_union_of_preds (reaching_defs, bb_out, BASIC_BLOCK_FOR_FN (cfun, i));\n       for (insn = BB_HEAD (bb), last = NEXT_INSN (BB_END (bb));\n \t   insn != last;\n \t   insn = NEXT_INSN (insn))\n@@ -814,13 +814,14 @@ build_btr_def_use_webs (fibheap_t all_btr_defs)\n static int\n block_at_edge_of_live_range_p (int bb, btr_def def)\n {\n-  if (def->other_btr_uses_before_def && BASIC_BLOCK (bb) == def->bb)\n+  if (def->other_btr_uses_before_def\n+      && BASIC_BLOCK_FOR_FN (cfun, bb) == def->bb)\n     return 1;\n   else if (def->other_btr_uses_after_use)\n     {\n       btr_user user;\n       for (user = def->uses; user != NULL; user = user->next)\n-\tif (BASIC_BLOCK (bb) == user->bb)\n+\tif (BASIC_BLOCK_FOR_FN (cfun, bb) == user->bb)\n \t  return 1;\n     }\n   return 0;\n@@ -1406,7 +1407,7 @@ migrate_btr_defs (enum reg_class btr_class, int allow_callee_save)\n \n       for (i = NUM_FIXED_BLOCKS; i < last_basic_block; i++)\n \t{\n-\t  basic_block bb = BASIC_BLOCK (i);\n+\t  basic_block bb = BASIC_BLOCK_FOR_FN (cfun, i);\n \t  fprintf (dump_file,\n \t\t   \"Basic block %d: count = \" HOST_WIDEST_INT_PRINT_DEC\n \t\t   \" loop-depth = %d idom = %d\\n\","}, {"sha": "628fc0b3e3ea55a6d7c52c7ec0a69817732a54ff", "filename": "gcc/caller-save.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Fcaller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Fcaller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcaller-save.c?ref=06e28de223648085ab8a265fe5f2b7dafaf22ad4", "patch": "@@ -1414,8 +1414,8 @@ insert_one_insn (struct insn_chain *chain, int before_p, int code, rtx pat)\n \t\t     &new_chain->live_throughout);\n \n       CLEAR_REG_SET (&new_chain->dead_or_set);\n-      if (chain->insn == BB_HEAD (BASIC_BLOCK (chain->block)))\n-\tBB_HEAD (BASIC_BLOCK (chain->block)) = new_chain->insn;\n+      if (chain->insn == BB_HEAD (BASIC_BLOCK_FOR_FN (cfun, chain->block)))\n+\tBB_HEAD (BASIC_BLOCK_FOR_FN (cfun, chain->block)) = new_chain->insn;\n     }\n   else\n     {\n@@ -1434,8 +1434,8 @@ insert_one_insn (struct insn_chain *chain, int before_p, int code, rtx pat)\n       note_stores (PATTERN (chain->insn), add_stored_regs,\n \t\t   &new_chain->live_throughout);\n       CLEAR_REG_SET (&new_chain->dead_or_set);\n-      if (chain->insn == BB_END (BASIC_BLOCK (chain->block)))\n-\tBB_END (BASIC_BLOCK (chain->block)) = new_chain->insn;\n+      if (chain->insn == BB_END (BASIC_BLOCK_FOR_FN (cfun, chain->block)))\n+\tBB_END (BASIC_BLOCK_FOR_FN (cfun, chain->block)) = new_chain->insn;\n     }\n   new_chain->block = chain->block;\n   new_chain->is_caller_save_insn = 1;"}, {"sha": "33373726710a80f05846f3579cd8287a79fe337b", "filename": "gcc/cfg.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Fcfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Fcfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfg.c?ref=06e28de223648085ab8a265fe5f2b7dafaf22ad4", "patch": "@@ -690,7 +690,7 @@ debug_bb (basic_block bb)\n DEBUG_FUNCTION basic_block\n debug_bb_n (int n)\n {\n-  basic_block bb = BASIC_BLOCK (n);\n+  basic_block bb = BASIC_BLOCK_FOR_FN (cfun, n);\n   debug_bb (bb);\n   return bb;\n }\n@@ -1139,7 +1139,7 @@ get_bb_original (basic_block bb)\n   key.index1 = bb->index;\n   entry = bb_original.find (&key);\n   if (entry)\n-    return BASIC_BLOCK (entry->index2);\n+    return BASIC_BLOCK_FOR_FN (cfun, entry->index2);\n   else\n     return NULL;\n }\n@@ -1164,7 +1164,7 @@ get_bb_copy (basic_block bb)\n   key.index1 = bb->index;\n   entry = bb_copy.find (&key);\n   if (entry)\n-    return BASIC_BLOCK (entry->index2);\n+    return BASIC_BLOCK_FOR_FN (cfun, entry->index2);\n   else\n     return NULL;\n }"}, {"sha": "d98ac5bfee4e9a03ce6a3b4b0e88812f5d20205e", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=06e28de223648085ab8a265fe5f2b7dafaf22ad4", "patch": "@@ -512,7 +512,7 @@ add_scope_conflicts (void)\n       for (i = 0; i < n_bbs; i++)\n \t{\n \t  bitmap active;\n-\t  bb = BASIC_BLOCK (rpo[i]);\n+\t  bb = BASIC_BLOCK_FOR_FN (cfun, rpo[i]);\n \t  active = (bitmap)bb->aux;\n \t  add_scope_conflicts_1 (bb, work, false);\n \t  if (bitmap_ior_into (active, work))"}, {"sha": "0cd6af0f01276ae06643891509e56bf8b7d4182e", "filename": "gcc/cfghooks.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Fcfghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Fcfghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfghooks.c?ref=06e28de223648085ab8a265fe5f2b7dafaf22ad4", "patch": "@@ -106,7 +106,7 @@ verify_flow_info (void)\n   FOR_BB_BETWEEN (bb, ENTRY_BLOCK_PTR_FOR_FN (cfun)->next_bb, NULL, next_bb)\n     {\n       if (bb != EXIT_BLOCK_PTR_FOR_FN (cfun)\n-\t  && bb != BASIC_BLOCK (bb->index))\n+\t  && bb != BASIC_BLOCK_FOR_FN (cfun, bb->index))\n \t{\n \t  error (\"bb %d on wrong place\", bb->index);\n \t  err = 1;"}, {"sha": "6245605f596bbd37a227f9fd48b6100144168ebb", "filename": "gcc/cfgloop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Fcfgloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Fcfgloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.c?ref=06e28de223648085ab8a265fe5f2b7dafaf22ad4", "patch": "@@ -439,7 +439,7 @@ flow_loops_find (struct loops *loops)\n   auto_vec<loop_p> larray (loops->larray->length ());\n   for (b = 0; b < n_basic_blocks_for_fn (cfun) - NUM_FIXED_BLOCKS; b++)\n     {\n-      basic_block header = BASIC_BLOCK (rc_order[b]);\n+      basic_block header = BASIC_BLOCK_FOR_FN (cfun, rc_order[b]);\n       if (bb_loop_header_p (header))\n \t{\n \t  struct loop *loop;"}, {"sha": "de110f4bd16b567739d04f0b29e27efd69e9fcf6", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=06e28de223648085ab8a265fe5f2b7dafaf22ad4", "patch": "@@ -4831,7 +4831,7 @@ rtl_flow_call_edges_add (sbitmap blocks)\n \n   for (i = NUM_FIXED_BLOCKS; i < last_bb; i++)\n     {\n-      basic_block bb = BASIC_BLOCK (i);\n+      basic_block bb = BASIC_BLOCK_FOR_FN (cfun, i);\n       rtx insn;\n       rtx prev_insn;\n "}, {"sha": "7903443f84f32a584b944987575f1811237650a1", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=06e28de223648085ab8a265fe5f2b7dafaf22ad4", "patch": "@@ -15079,7 +15079,7 @@ r10k_insert_cache_barriers (void)\n   n = pre_and_rev_post_order_compute (NULL, rev_post_order, false);\n   for (i = 0; i < n; i++)\n     {\n-      bb = BASIC_BLOCK (rev_post_order[i]);\n+      bb = BASIC_BLOCK_FOR_FN (cfun, rev_post_order[i]);\n \n       /* If this block is only reached by unconditional edges, and if the\n \t source of every edge is protected, the beginning of the block is"}, {"sha": "fcd75327e0cf84385d25541f1ba0492303126fec", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=06e28de223648085ab8a265fe5f2b7dafaf22ad4", "patch": "@@ -7982,7 +7982,7 @@ s390_optimize_nonescaping_tx (void)\n \n   for (bb_index = 0; bb_index < n_basic_blocks_for_fn (cfun); bb_index++)\n     {\n-      bb = BASIC_BLOCK (bb_index);\n+      bb = BASIC_BLOCK_FOR_FN (cfun, bb_index);\n \n       if (!bb)\n \tcontinue;"}, {"sha": "a658ee6297c35a9046c769bfce440d85aee97468", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=06e28de223648085ab8a265fe5f2b7dafaf22ad4", "patch": "@@ -2490,7 +2490,7 @@ spu_machine_dependent_reorg (void)\n \n   for (i = n_basic_blocks_for_fn (cfun) - 1; i >= 0; i--)\n     {\n-      bb = BASIC_BLOCK (i);\n+      bb = BASIC_BLOCK_FOR_FN (cfun, i);\n       branch = 0;\n       if (spu_bb_info[i].prop_jump)\n \t{"}, {"sha": "215beb03a20bc237abd4d45051d7c1f0b85d3ed1", "filename": "gcc/cse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=06e28de223648085ab8a265fe5f2b7dafaf22ad4", "patch": "@@ -6564,7 +6564,7 @@ cse_main (rtx f ATTRIBUTE_UNUSED, int nregs)\n \t processed before.  */\n       do\n \t{\n-\t  bb = BASIC_BLOCK (rc_order[i++]);\n+\t  bb = BASIC_BLOCK_FOR_FN (cfun, rc_order[i++]);\n \t}\n       while (bitmap_bit_p (cse_visited_basic_blocks, bb->index)\n \t     && i < n_blocks);"}, {"sha": "07d31f7f8b9a0382f9e44b03658b326c26038469", "filename": "gcc/dce.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Fdce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Fdce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdce.c?ref=06e28de223648085ab8a265fe5f2b7dafaf22ad4", "patch": "@@ -1065,7 +1065,7 @@ fast_dce (bool word_level)\n       for (i = 0; i < n_blocks; i++)\n \t{\n \t  int index = postorder[i];\n-\t  basic_block bb = BASIC_BLOCK (index);\n+\t  basic_block bb = BASIC_BLOCK_FOR_FN (cfun, index);\n \t  bool local_changed;\n \n \t  if (index < NUM_FIXED_BLOCKS)"}, {"sha": "87419c2ecbb5ac15a03277c0f3e591cff93bc680", "filename": "gcc/df-core.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Fdf-core.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Fdf-core.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-core.c?ref=06e28de223648085ab8a265fe5f2b7dafaf22ad4", "patch": "@@ -520,7 +520,7 @@ df_set_blocks (bitmap blocks)\n \n \t\t  EXECUTE_IF_SET_IN_BITMAP (&diff, 0, bb_index, bi)\n \t\t    {\n-\t\t      basic_block bb = BASIC_BLOCK (bb_index);\n+\t\t      basic_block bb = BASIC_BLOCK_FOR_FN (cfun, bb_index);\n \t\t      if (bb)\n \t\t\t{\n \t\t\t  void *bb_info = df_get_bb_info (dflow, bb_index);\n@@ -933,7 +933,7 @@ df_worklist_propagate_forward (struct dataflow *dataflow,\n {\n   edge e;\n   edge_iterator ei;\n-  basic_block bb = BASIC_BLOCK (bb_index);\n+  basic_block bb = BASIC_BLOCK_FOR_FN (cfun, bb_index);\n   bool changed = !age;\n \n   /*  Calculate <conf_op> of incoming edges.  */\n@@ -978,7 +978,7 @@ df_worklist_propagate_backward (struct dataflow *dataflow,\n {\n   edge e;\n   edge_iterator ei;\n-  basic_block bb = BASIC_BLOCK (bb_index);\n+  basic_block bb = BASIC_BLOCK_FOR_FN (cfun, bb_index);\n   bool changed = !age;\n \n   /*  Calculate <conf_op> of incoming edges.  */\n@@ -1067,7 +1067,7 @@ df_worklist_dataflow_doublequeue (struct dataflow *dataflow,\n \n \t  bitmap_clear_bit (pending, index);\n \t  bb_index = blocks_in_postorder[index];\n-\t  bb = BASIC_BLOCK (bb_index);\n+\t  bb = BASIC_BLOCK_FOR_FN (cfun, bb_index);\n \t  prev_age = last_visit_age[index];\n \t  if (dir == DF_FORWARD)\n \t    changed = df_worklist_propagate_forward (dataflow, bb_index,\n@@ -1086,7 +1086,7 @@ df_worklist_dataflow_doublequeue (struct dataflow *dataflow,\n       bitmap_clear (worklist);\n     }\n   for (i = 0; i < n_blocks; i++)\n-    BASIC_BLOCK (blocks_in_postorder[i])->aux = NULL;\n+    BASIC_BLOCK_FOR_FN (cfun, blocks_in_postorder[i])->aux = NULL;\n \n   BITMAP_FREE (worklist);\n   BITMAP_FREE (pending);\n@@ -1631,7 +1631,7 @@ df_bb_replace (int old_index, basic_block new_block)\n     fprintf (dump_file, \"shoving block %d into %d\\n\", new_block_index, old_index);\n \n   gcc_assert (df);\n-  gcc_assert (BASIC_BLOCK (old_index) == NULL);\n+  gcc_assert (BASIC_BLOCK_FOR_FN (cfun, old_index) == NULL);\n \n   for (p = 0; p < df->num_problems_defined; p++)\n     {\n@@ -1647,7 +1647,7 @@ df_bb_replace (int old_index, basic_block new_block)\n   df_clear_bb_dirty (new_block);\n   SET_BASIC_BLOCK_FOR_FN (cfun, old_index, new_block);\n   new_block->index = old_index;\n-  df_set_bb_dirty (BASIC_BLOCK (old_index));\n+  df_set_bb_dirty (BASIC_BLOCK_FOR_FN (cfun, old_index));\n   SET_BASIC_BLOCK_FOR_FN (cfun, new_block_index, NULL);\n }\n \n@@ -1659,7 +1659,7 @@ df_bb_replace (int old_index, basic_block new_block)\n void\n df_bb_delete (int bb_index)\n {\n-  basic_block bb = BASIC_BLOCK (bb_index);\n+  basic_block bb = BASIC_BLOCK_FOR_FN (cfun, bb_index);\n   int i;\n \n   if (!df)\n@@ -2045,7 +2045,7 @@ df_dump_region (FILE *file)\n \n       EXECUTE_IF_SET_IN_BITMAP (df->blocks_to_analyze, 0, bb_index, bi)\n \t{\n-\t  basic_block bb = BASIC_BLOCK (bb_index);\n+\t  basic_block bb = BASIC_BLOCK_FOR_FN (cfun, bb_index);\n \t  dump_bb (file, bb, 0, TDF_DETAILS);\n \t}\n       fprintf (file, \"\\n\");"}, {"sha": "2b42b481040d1accf4ff3d1f4f93ac427864837f", "filename": "gcc/df-problems.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Fdf-problems.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Fdf-problems.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-problems.c?ref=06e28de223648085ab8a265fe5f2b7dafaf22ad4", "patch": "@@ -353,7 +353,7 @@ df_rd_bb_local_compute_process_def (struct df_rd_bb_info *bb_info,\n static void\n df_rd_bb_local_compute (unsigned int bb_index)\n {\n-  basic_block bb = BASIC_BLOCK (bb_index);\n+  basic_block bb = BASIC_BLOCK_FOR_FN (cfun, bb_index);\n   struct df_rd_bb_info *bb_info = df_rd_get_bb_info (bb_index);\n   rtx insn;\n \n@@ -835,7 +835,7 @@ df_lr_reset (bitmap all_blocks)\n static void\n df_lr_bb_local_compute (unsigned int bb_index)\n {\n-  basic_block bb = BASIC_BLOCK (bb_index);\n+  basic_block bb = BASIC_BLOCK_FOR_FN (cfun, bb_index);\n   struct df_lr_bb_info *bb_info = df_lr_get_bb_info (bb_index);\n   rtx insn;\n   df_ref *def_rec;\n@@ -1462,7 +1462,7 @@ df_live_reset (bitmap all_blocks)\n static void\n df_live_bb_local_compute (unsigned int bb_index)\n {\n-  basic_block bb = BASIC_BLOCK (bb_index);\n+  basic_block bb = BASIC_BLOCK_FOR_FN (cfun, bb_index);\n   struct df_live_bb_info *bb_info = df_live_get_bb_info (bb_index);\n   rtx insn;\n   df_ref *def_rec;\n@@ -1987,7 +1987,7 @@ df_chain_remove_problem (void)\n       rtx insn;\n       df_ref *def_rec;\n       df_ref *use_rec;\n-      basic_block bb = BASIC_BLOCK (bb_index);\n+      basic_block bb = BASIC_BLOCK_FOR_FN (cfun, bb_index);\n \n       if (df_chain_problem_p (DF_DU_CHAIN))\n \tfor (def_rec = df_get_artificial_defs (bb->index); *def_rec; def_rec++)\n@@ -2105,7 +2105,7 @@ df_chain_create_bb_process_use (bitmap local_rd,\n static void\n df_chain_create_bb (unsigned int bb_index)\n {\n-  basic_block bb = BASIC_BLOCK (bb_index);\n+  basic_block bb = BASIC_BLOCK_FOR_FN (cfun, bb_index);\n   struct df_rd_bb_info *bb_info = df_rd_get_bb_info (bb_index);\n   rtx insn;\n   bitmap_head cpy;\n@@ -2531,7 +2531,7 @@ df_word_lr_mark_ref (df_ref ref, bool is_set, regset live)\n static void\n df_word_lr_bb_local_compute (unsigned int bb_index)\n {\n-  basic_block bb = BASIC_BLOCK (bb_index);\n+  basic_block bb = BASIC_BLOCK_FOR_FN (cfun, bb_index);\n   struct df_word_lr_bb_info *bb_info = df_word_lr_get_bb_info (bb_index);\n   rtx insn;\n   df_ref *def_rec;\n@@ -3154,7 +3154,7 @@ static void\n df_note_bb_compute (unsigned int bb_index,\n \t\t    bitmap live, bitmap do_not_gen, bitmap artificial_uses)\n {\n-  basic_block bb = BASIC_BLOCK (bb_index);\n+  basic_block bb = BASIC_BLOCK_FOR_FN (cfun, bb_index);\n   rtx insn;\n   df_ref *def_rec;\n   df_ref *use_rec;\n@@ -4271,7 +4271,7 @@ df_md_bb_local_compute_process_def (struct df_md_bb_info *bb_info,\n static void\n df_md_bb_local_compute (unsigned int bb_index)\n {\n-  basic_block bb = BASIC_BLOCK (bb_index);\n+  basic_block bb = BASIC_BLOCK_FOR_FN (cfun, bb_index);\n   struct df_md_bb_info *bb_info = df_md_get_bb_info (bb_index);\n   rtx insn;\n \n@@ -4327,7 +4327,7 @@ df_md_local_compute (bitmap all_blocks)\n       bitmap kill = &df_md_get_bb_info (bb_index)->kill;\n       EXECUTE_IF_SET_IN_BITMAP (&frontiers[bb_index], 0, df_bb_index, bi2)\n \t{\n-\t  basic_block bb = BASIC_BLOCK (df_bb_index);\n+\t  basic_block bb = BASIC_BLOCK_FOR_FN (cfun, df_bb_index);\n \t  if (bitmap_bit_p (all_blocks, df_bb_index))\n \t    bitmap_ior_and_into (&df_md_get_bb_info (df_bb_index)->init, kill,\n \t\t\t\t df_get_live_in (bb));\n@@ -4360,7 +4360,7 @@ df_md_reset (bitmap all_blocks)\n static bool\n df_md_transfer_function (int bb_index)\n {\n-  basic_block bb = BASIC_BLOCK (bb_index);\n+  basic_block bb = BASIC_BLOCK_FOR_FN (cfun, bb_index);\n   struct df_md_bb_info *bb_info = df_md_get_bb_info (bb_index);\n   bitmap in = &bb_info->in;\n   bitmap out = &bb_info->out;"}, {"sha": "5f0ba4aaa7ee270d750ab84f67b4c0f3445ad337", "filename": "gcc/df-scan.c", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Fdf-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Fdf-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-scan.c?ref=06e28de223648085ab8a265fe5f2b7dafaf22ad4", "patch": "@@ -669,8 +669,8 @@ df_scan_blocks (void)\n   df_record_entry_block_defs (df->entry_block_defs);\n   df_get_exit_block_use_set (df->exit_block_uses);\n   df_record_exit_block_uses (df->exit_block_uses);\n-  df_set_bb_dirty (BASIC_BLOCK (ENTRY_BLOCK));\n-  df_set_bb_dirty (BASIC_BLOCK (EXIT_BLOCK));\n+  df_set_bb_dirty (BASIC_BLOCK_FOR_FN (cfun, ENTRY_BLOCK));\n+  df_set_bb_dirty (BASIC_BLOCK_FOR_FN (cfun, EXIT_BLOCK));\n \n   /* Regular blocks */\n   FOR_EACH_BB (bb)\n@@ -1637,7 +1637,7 @@ df_reorganize_refs_by_reg_by_insn (struct df_ref_info *ref_info,\n \n   EXECUTE_IF_SET_IN_BITMAP (df->blocks_to_analyze, 0, bb_index, bi)\n     {\n-      basic_block bb = BASIC_BLOCK (bb_index);\n+      basic_block bb = BASIC_BLOCK_FOR_FN (cfun, bb_index);\n       rtx insn;\n       df_ref *ref_rec;\n \n@@ -1691,7 +1691,7 @@ df_reorganize_refs_by_reg_by_insn (struct df_ref_info *ref_info,\n \n   EXECUTE_IF_SET_IN_BITMAP (df->blocks_to_analyze, 0, bb_index, bi)\n     {\n-      basic_block bb = BASIC_BLOCK (bb_index);\n+      basic_block bb = BASIC_BLOCK_FOR_FN (cfun, bb_index);\n       rtx insn;\n       df_ref *ref_rec;\n \n@@ -1876,7 +1876,9 @@ df_reorganize_refs_by_insn (struct df_ref_info *ref_info,\n \n       EXECUTE_IF_SET_IN_BITMAP (df->blocks_to_analyze, 0, index, bi)\n \t{\n-\t  offset = df_reorganize_refs_by_insn_bb (BASIC_BLOCK (index), offset, ref_info,\n+\t  offset = df_reorganize_refs_by_insn_bb (BASIC_BLOCK_FOR_FN (cfun,\n+\t\t\t\t\t\t\t\t      index),\n+\t\t\t\t\t\t  offset, ref_info,\n \t\t\t\t\t\t  include_defs, include_uses,\n \t\t\t\t\t\t  include_eq_uses);\n \t}\n@@ -3616,7 +3618,7 @@ df_bb_refs_collect (struct df_collection_rec *collection_rec, basic_block bb)\n void\n df_bb_refs_record (int bb_index, bool scan_insns)\n {\n-  basic_block bb = BASIC_BLOCK (bb_index);\n+  basic_block bb = BASIC_BLOCK_FOR_FN (cfun, bb_index);\n   rtx insn;\n   int luid = 0;\n \n@@ -3890,7 +3892,9 @@ df_record_entry_block_defs (bitmap entry_block_defs)\n   df_entry_block_defs_collect (&collection_rec, entry_block_defs);\n \n   /* Process bb_refs chain */\n-  df_refs_add_to_chains (&collection_rec, BASIC_BLOCK (ENTRY_BLOCK), NULL,\n+  df_refs_add_to_chains (&collection_rec,\n+\t\t\t BASIC_BLOCK_FOR_FN (cfun, ENTRY_BLOCK),\n+\t\t\t NULL,\n \t\t\t copy_defs);\n }\n \n@@ -3929,7 +3933,7 @@ df_update_entry_block_defs (void)\n     {\n       df_record_entry_block_defs (&refs);\n       bitmap_copy (df->entry_block_defs, &refs);\n-      df_set_bb_dirty (BASIC_BLOCK (ENTRY_BLOCK));\n+      df_set_bb_dirty (BASIC_BLOCK_FOR_FN (cfun, ENTRY_BLOCK));\n     }\n   bitmap_clear (&refs);\n }\n@@ -4061,7 +4065,9 @@ df_record_exit_block_uses (bitmap exit_block_uses)\n   df_exit_block_uses_collect (&collection_rec, exit_block_uses);\n \n   /* Process bb_refs chain */\n-  df_refs_add_to_chains (&collection_rec, BASIC_BLOCK (EXIT_BLOCK), NULL,\n+  df_refs_add_to_chains (&collection_rec,\n+\t\t\t BASIC_BLOCK_FOR_FN (cfun, EXIT_BLOCK),\n+\t\t\t NULL,\n \t\t\t copy_uses);\n }\n \n@@ -4100,7 +4106,7 @@ df_update_exit_block_uses (void)\n     {\n       df_record_exit_block_uses (&refs);\n       bitmap_copy (df->exit_block_uses,& refs);\n-      df_set_bb_dirty (BASIC_BLOCK (EXIT_BLOCK));\n+      df_set_bb_dirty (BASIC_BLOCK_FOR_FN (cfun, EXIT_BLOCK));\n     }\n   bitmap_clear (&refs);\n }"}, {"sha": "e9d2265e4a8b0ddc15af55091a482a28be784eac", "filename": "gcc/dominance.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Fdominance.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Fdominance.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdominance.c?ref=06e28de223648085ab8a265fe5f2b7dafaf22ad4", "patch": "@@ -884,10 +884,10 @@ nearest_common_dominator_for_set (enum cdi_direction dir, bitmap blocks)\n   basic_block dom;\n \n   first = bitmap_first_set_bit (blocks);\n-  dom = BASIC_BLOCK (first);\n+  dom = BASIC_BLOCK_FOR_FN (cfun, first);\n   EXECUTE_IF_SET_IN_BITMAP (blocks, 0, i, bi)\n-    if (dom != BASIC_BLOCK (i))\n-      dom = nearest_common_dominator (dir, dom, BASIC_BLOCK (i));\n+    if (dom != BASIC_BLOCK_FOR_FN (cfun, i))\n+      dom = nearest_common_dominator (dir, dom, BASIC_BLOCK_FOR_FN (cfun, i));\n \n   return dom;\n }"}, {"sha": "8928c852d00445a3bae019c26e407454c1fbd69c", "filename": "gcc/gcse.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=06e28de223648085ab8a265fe5f2b7dafaf22ad4", "patch": "@@ -3337,7 +3337,7 @@ hoist_code (void)\n \t\t  data->max_reg_pressure[pressure_class] += nregs;\n \t\t  EXECUTE_IF_SET_IN_BITMAP (hoisted_bbs, 0, k, bi)\n \t\t    {\n-\t\t      data = BB_DATA (BASIC_BLOCK (k));\n+\t\t      data = BB_DATA (BASIC_BLOCK_FOR_FN (cfun, k));\n \t\t      data->max_reg_pressure[pressure_class] += nregs;\n \t\t    }\n \t\t}\n@@ -3348,7 +3348,7 @@ hoist_code (void)\n \t\t     hoisted.  */\n \t\t  EXECUTE_IF_SET_IN_BITMAP (hoisted_bbs, 0, k, bi)\n \t\t    {\n-\t\t      data = BB_DATA (BASIC_BLOCK (k));\n+\t\t      data = BB_DATA (BASIC_BLOCK_FOR_FN (cfun, k));\n \t\t      bitmap_copy (data->live_in, data->backup);\n \t\t      data->max_reg_pressure[pressure_class]\n \t\t\t  = data->old_pressure;"}, {"sha": "3f02cabb26ee5b8c456869147bc24c0f944d52c2", "filename": "gcc/graph.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Fgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Fgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraph.c?ref=06e28de223648085ab8a265fe5f2b7dafaf22ad4", "patch": "@@ -164,7 +164,7 @@ draw_cfg_nodes_no_loops (pretty_printer *pp, struct function *fun)\n   for (i = n_basic_blocks_for_fn (fun) - n;\n        i < n_basic_blocks_for_fn (fun); i++)\n     {\n-      basic_block bb = BASIC_BLOCK (rpo[i]);\n+      basic_block bb = BASIC_BLOCK_FOR_FN (cfun, rpo[i]);\n       draw_cfg_node (pp, fun->funcdef_no, bb);\n       bitmap_set_bit (visited, bb->index);\n     }"}, {"sha": "e4ef9d4b5237abac6f647cedfb1313d33c6105db", "filename": "gcc/ipa-inline-analysis.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Fipa-inline-analysis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Fipa-inline-analysis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-analysis.c?ref=06e28de223648085ab8a265fe5f2b7dafaf22ad4", "patch": "@@ -2152,7 +2152,7 @@ param_change_prob (gimple stmt, int i)\n \tmax = 1;\n \n       EXECUTE_IF_SET_IN_BITMAP (info.bb_set, 0, index, bi)\n-\tmax = MIN (max, BASIC_BLOCK (index)->frequency);\n+\tmax = MIN (max, BASIC_BLOCK_FOR_FN (cfun, index)->frequency);\n \n       BITMAP_FREE (info.bb_set);\n       if (max < bb->frequency)\n@@ -2408,7 +2408,7 @@ estimate_function_body_sizes (struct cgraph_node *node, bool early)\n   nblocks = pre_and_rev_post_order_compute (NULL, order, false);\n   for (n = 0; n < nblocks; n++)\n     {\n-      bb = BASIC_BLOCK (order[n]);\n+      bb = BASIC_BLOCK_FOR_FN (cfun, order[n]);\n       freq = compute_call_stmt_bb_frequency (node->decl, bb);\n \n       /* TODO: Obviously predicates can be propagated down across CFG.  */"}, {"sha": "eca86dab14a5c2ba06ba32e8199713276324e40e", "filename": "gcc/ipa-split.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Fipa-split.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Fipa-split.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-split.c?ref=06e28de223648085ab8a265fe5f2b7dafaf22ad4", "patch": "@@ -362,7 +362,8 @@ dominated_by_forbidden (basic_block bb)\n \n   EXECUTE_IF_SET_IN_BITMAP (forbidden_dominators, 1, dom_bb, bi)\n     {\n-      if (dominated_by_p (CDI_DOMINATORS, bb, BASIC_BLOCK (dom_bb)))\n+      if (dominated_by_p (CDI_DOMINATORS, bb,\n+\t\t\t  BASIC_BLOCK_FOR_FN (cfun, dom_bb)))\n \treturn true;\n     }\n "}, {"sha": "9910b4e1b439e4c4608a39f6870f6f04c17b6745", "filename": "gcc/loop-unroll.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Floop-unroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Floop-unroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-unroll.c?ref=06e28de223648085ab8a265fe5f2b7dafaf22ad4", "patch": "@@ -2370,7 +2370,7 @@ apply_opt_in_copies (struct opt_info *opt_info,\n \n   for (i = opt_info->first_new_block; i < (unsigned) last_basic_block; i++)\n     {\n-      bb = BASIC_BLOCK (i);\n+      bb = BASIC_BLOCK_FOR_FN (cfun, i);\n       orig_bb = get_bb_original (bb);\n \n       /* bb->aux holds position in copy sequence initialized by\n@@ -2446,7 +2446,7 @@ apply_opt_in_copies (struct opt_info *opt_info,\n      get_bb_copy (get_bb_original (bb)) == bb.  */\n   for (i = opt_info->first_new_block; i < (unsigned) last_basic_block; i++)\n     {\n-      bb = BASIC_BLOCK (i);\n+      bb = BASIC_BLOCK_FOR_FN (cfun, i);\n       orig_bb = get_bb_original (bb);\n       if (get_bb_copy (orig_bb) != bb)\n \tcontinue;"}, {"sha": "6c9d6229edf5a9c3d7247608b4c065fa9259c929", "filename": "gcc/lower-subreg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Flower-subreg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Flower-subreg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flower-subreg.c?ref=06e28de223648085ab8a265fe5f2b7dafaf22ad4", "patch": "@@ -1647,7 +1647,7 @@ decompose_multiword_subregs (bool decompose_copies)\n \t  rtx insn, end;\n \t  edge fallthru;\n \n-\t  bb = BASIC_BLOCK (i);\n+\t  bb = BASIC_BLOCK_FOR_FN (cfun, i);\n \t  insn = BB_HEAD (bb);\n \t  end = BB_END (bb);\n "}, {"sha": "d2082fe7db4aaae89293e0e862f1933dbeb2b190", "filename": "gcc/lra-lives.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Flra-lives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Flra-lives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-lives.c?ref=06e28de223648085ab8a265fe5f2b7dafaf22ad4", "patch": "@@ -1001,7 +1001,7 @@ lra_create_live_ranges (bool all_p)\n   lra_assert (n_blocks_inverted == n_basic_blocks_for_fn (cfun));\n   for (i = n_blocks_inverted - 1; i >= 0; --i)\n     {\n-      bb = BASIC_BLOCK (post_order_rev_cfg[i]);\n+      bb = BASIC_BLOCK_FOR_FN (cfun, post_order_rev_cfg[i]);\n       if (bb == EXIT_BLOCK_PTR_FOR_FN (cfun) || bb\n \t  == ENTRY_BLOCK_PTR_FOR_FN (cfun))\n \tcontinue;"}, {"sha": "1dec4dc92c7658670d9cc54eb2e991b77691c1ac", "filename": "gcc/predict.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=06e28de223648085ab8a265fe5f2b7dafaf22ad4", "patch": "@@ -2596,7 +2596,7 @@ propagate_freq (basic_block head, bitmap tovisit)\n       edge_iterator ei;\n       int count = 0;\n \n-      bb = BASIC_BLOCK (i);\n+      bb = BASIC_BLOCK_FOR_FN (cfun, i);\n \n       FOR_EACH_EDGE (e, ei, bb->preds)\n \t{"}, {"sha": "ac8b0f30501f8f13a8a70350db469d3fe08f230d", "filename": "gcc/regrename.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Fregrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Fregrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregrename.c?ref=06e28de223648085ab8a265fe5f2b7dafaf22ad4", "patch": "@@ -696,7 +696,7 @@ regrename_analyze (bitmap bb_mask)\n \n   for (i = 0; i < n_bbs; i++)\n     {\n-      basic_block bb1 = BASIC_BLOCK (inverse_postorder[i]);\n+      basic_block bb1 = BASIC_BLOCK_FOR_FN (cfun, inverse_postorder[i]);\n       struct bb_rename_info *this_info;\n       bool success;\n       edge e;"}, {"sha": "48d27c3f86ae20fe06167b3b64232b58fd077b88", "filename": "gcc/regstat.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Fregstat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Fregstat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregstat.c?ref=06e28de223648085ab8a265fe5f2b7dafaf22ad4", "patch": "@@ -120,7 +120,7 @@ regstat_bb_compute_ri (unsigned int bb_index,\n \t\t       bitmap local_live, bitmap local_processed,\n \t\t       int *local_live_last_luid)\n {\n-  basic_block bb = BASIC_BLOCK (bb_index);\n+  basic_block bb = BASIC_BLOCK_FOR_FN (cfun, bb_index);\n   rtx insn;\n   df_ref *def_rec;\n   df_ref *use_rec;\n@@ -440,7 +440,7 @@ regstat_get_setjmp_crosses (void)\n static void\n regstat_bb_compute_calls_crossed (unsigned int bb_index, bitmap live)\n {\n-  basic_block bb = BASIC_BLOCK (bb_index);\n+  basic_block bb = BASIC_BLOCK_FOR_FN (cfun, bb_index);\n   rtx insn;\n   df_ref *def_rec;\n   df_ref *use_rec;"}, {"sha": "3106a0951a285d6047fe50a035ac1c8d561029d2", "filename": "gcc/resource.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Fresource.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Fresource.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fresource.c?ref=06e28de223648085ab8a265fe5f2b7dafaf22ad4", "patch": "@@ -918,7 +918,8 @@ mark_target_live_regs (rtx insns, rtx target, struct resources *res)\n \t information, we can get it from there unless the insn at the\n \t start of the basic block has been deleted.  */\n       if (tinfo && tinfo->block != -1\n-\t  && ! INSN_DELETED_P (BB_HEAD (BASIC_BLOCK (tinfo->block))))\n+\t  && ! INSN_DELETED_P (BB_HEAD (BASIC_BLOCK_FOR_FN (cfun,\n+\t\t\t\t\t\t\t    tinfo->block))))\n \tb = tinfo->block;\n     }\n \n@@ -958,7 +959,7 @@ mark_target_live_regs (rtx insns, rtx target, struct resources *res)\n      to use the LR problem.  Otherwise, we must assume everything is live.  */\n   if (b != -1)\n     {\n-      regset regs_live = DF_LR_IN (BASIC_BLOCK (b));\n+      regset regs_live = DF_LR_IN (BASIC_BLOCK_FOR_FN (cfun, b));\n       rtx start_insn, stop_insn;\n \n       /* Compute hard regs live at start of block.  */\n@@ -967,7 +968,7 @@ mark_target_live_regs (rtx insns, rtx target, struct resources *res)\n       /* Get starting and ending insn, handling the case where each might\n \t be a SEQUENCE.  */\n       start_insn = (b == ENTRY_BLOCK_PTR_FOR_FN (cfun)->next_bb->index ?\n-\t\t    insns : BB_HEAD (BASIC_BLOCK (b)));\n+\t\t    insns : BB_HEAD (BASIC_BLOCK_FOR_FN (cfun, b)));\n       stop_insn = target;\n \n       if (NONJUMP_INSN_P (start_insn)"}, {"sha": "73af0a7ec6f3c483bf910aa19026aa5b08106dc6", "filename": "gcc/sched-ebb.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Fsched-ebb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Fsched-ebb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-ebb.c?ref=06e28de223648085ab8a265fe5f2b7dafaf22ad4", "patch": "@@ -737,7 +737,7 @@ ebb_fix_recovery_cfg (int bbi ATTRIBUTE_UNUSED, int jump_bbi,\n   gcc_assert (last_bb->index != bbi);\n \n   if (jump_bb_nexti == last_bb->index)\n-    last_bb = BASIC_BLOCK (jump_bbi);\n+    last_bb = BASIC_BLOCK_FOR_FN (cfun, jump_bbi);\n }\n \n #endif /* INSN_SCHEDULING */"}, {"sha": "22ece1d0461f86ea821274e969bdb4189e7f5900", "filename": "gcc/sched-int.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Fsched-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Fsched-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-int.h?ref=06e28de223648085ab8a265fe5f2b7dafaf22ad4", "patch": "@@ -1416,8 +1416,9 @@ extern int *containing_rgn;\n /* The mapping from ebb to block.  */\n extern int *ebb_head;\n #define BB_TO_BLOCK(ebb) (rgn_bb_table[ebb_head[ebb]])\n-#define EBB_FIRST_BB(ebb) BASIC_BLOCK (BB_TO_BLOCK (ebb))\n-#define EBB_LAST_BB(ebb) BASIC_BLOCK (rgn_bb_table[ebb_head[ebb + 1] - 1])\n+#define EBB_FIRST_BB(ebb) BASIC_BLOCK_FOR_FN (cfun, BB_TO_BLOCK (ebb))\n+#define EBB_LAST_BB(ebb) \\\n+  BASIC_BLOCK_FOR_FN (cfun, rgn_bb_table[ebb_head[ebb + 1] - 1])\n #define INSN_BB(INSN) (BLOCK_TO_BB (BLOCK_NUM (INSN)))\n \n extern int current_nr_blocks;"}, {"sha": "2d8b939336fd15dd1d6fd25b1551300216e3fef1", "filename": "gcc/sched-rgn.c", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Fsched-rgn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Fsched-rgn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-rgn.c?ref=06e28de223648085ab8a265fe5f2b7dafaf22ad4", "patch": "@@ -401,7 +401,8 @@ debug_region (int rgn)\n \n   for (bb = 0; bb < rgn_table[rgn].rgn_nr_blocks; bb++)\n     {\n-      dump_bb (stderr, BASIC_BLOCK (rgn_bb_table[current_blocks + bb]),\n+      dump_bb (stderr,\n+\t       BASIC_BLOCK_FOR_FN (cfun, rgn_bb_table[current_blocks + bb]),\n \t       0, TDF_SLIM | TDF_BLOCKS);\n       fprintf (stderr, \"\\n\");\n     }\n@@ -440,7 +441,7 @@ dump_region_dot (FILE *f, int rgn)\n       edge e;\n       edge_iterator ei;\n       int src_bb_num = rgn_bb_table[current_blocks + i];\n-      basic_block bb = BASIC_BLOCK (src_bb_num);\n+      basic_block bb = BASIC_BLOCK_FOR_FN (cfun, src_bb_num);\n \n       FOR_EACH_EDGE (e, ei, bb->succs)\n         if (bb_in_region_p (e->dest->index, rgn))\n@@ -554,7 +555,7 @@ too_large (int block, int *num_bbs, int *num_insns)\n {\n   (*num_bbs)++;\n   (*num_insns) += (common_sched_info->estimate_number_of_insns\n-                   (BASIC_BLOCK (block)));\n+                   (BASIC_BLOCK_FOR_FN (cfun, block)));\n \n   return ((*num_bbs > PARAM_VALUE (PARAM_MAX_SCHED_REGION_BLOCKS))\n \t  || (*num_insns > PARAM_VALUE (PARAM_MAX_SCHED_REGION_INSNS)));\n@@ -948,7 +949,8 @@ haifa_find_rgns (void)\n \t\t  edge e;\n \t\t  child = queue[++head];\n \n-\t\t  FOR_EACH_EDGE (e, ei, BASIC_BLOCK (child)->preds)\n+\t\t  FOR_EACH_EDGE (e, ei,\n+\t\t\t\t BASIC_BLOCK_FOR_FN (cfun, child)->preds)\n \t\t    {\n \t\t      node = e->src->index;\n \n@@ -1005,7 +1007,9 @@ haifa_find_rgns (void)\n \t\t\t  CONTAINING_RGN (child) = nr_regions;\n \t\t\t  queue[head] = queue[tail--];\n \n-\t\t\t  FOR_EACH_EDGE (e, ei, BASIC_BLOCK (child)->succs)\n+\t\t\t  FOR_EACH_EDGE (e, ei,\n+\t\t\t\t\t BASIC_BLOCK_FOR_FN (cfun,\n+\t\t\t\t\t\t\t     child)->succs)\n \t\t\t    if (e->dest != EXIT_BLOCK_PTR_FOR_FN (cfun))\n \t\t\t      --degree[e->dest->index];\n \t\t\t}\n@@ -1200,7 +1204,7 @@ extend_rgns (int *degree, int *idxp, sbitmap header, int *loop_hdr)\n \t    {\n \t      int hdr = -1;\n \n-\t      FOR_EACH_EDGE (e, ei, BASIC_BLOCK (bbn)->preds)\n+\t      FOR_EACH_EDGE (e, ei, BASIC_BLOCK_FOR_FN (cfun, bbn)->preds)\n \t\t{\n \t\t  int predn = e->src->index;\n \n@@ -1304,7 +1308,7 @@ extend_rgns (int *degree, int *idxp, sbitmap header, int *loop_hdr)\n \t      CONTAINING_RGN (bbn) = nr_regions;\n \t      BLOCK_TO_BB (bbn) = 0;\n \n-\t      FOR_EACH_EDGE (e, ei, BASIC_BLOCK (bbn)->succs)\n+\t      FOR_EACH_EDGE (e, ei, BASIC_BLOCK_FOR_FN (cfun, bbn)->succs)\n \t\tif (e->dest != EXIT_BLOCK_PTR_FOR_FN (cfun))\n \t\t  degree[e->dest->index]--;\n \n@@ -1361,7 +1365,8 @@ extend_rgns (int *degree, int *idxp, sbitmap header, int *loop_hdr)\n \n \t\t      idx++;\n \n-\t\t      FOR_EACH_EDGE (e, ei, BASIC_BLOCK (succn)->succs)\n+\t\t      FOR_EACH_EDGE (e, ei,\n+\t\t\t\t     BASIC_BLOCK_FOR_FN (cfun, succn)->succs)\n \t\t\tif (e->dest != EXIT_BLOCK_PTR_FOR_FN (cfun))\n \t\t\t  degree[e->dest->index]--;\n \t\t    }\n@@ -1420,7 +1425,8 @@ compute_dom_prob_ps (int bb)\n   /* Initialize dom[bb] to '111..1'.  */\n   bitmap_ones (dom[bb]);\n \n-  FOR_EACH_EDGE (in_edge, in_ei, BASIC_BLOCK (BB_TO_BLOCK (bb))->preds)\n+  FOR_EACH_EDGE (in_edge, in_ei,\n+\t\t BASIC_BLOCK_FOR_FN (cfun, BB_TO_BLOCK (bb))->preds)\n     {\n       int pred_bb;\n       edge out_edge;\n@@ -1838,7 +1844,8 @@ update_live (rtx insn, int src)\n   (bb_from == bb_to\t\t\t\t\t\t\t\\\n    || IS_RGN_ENTRY (bb_from)\t\t\t\t\t\t\\\n    || (bitmap_bit_p (ancestor_edges[bb_to],\t\t\t\t\t\\\n-\t EDGE_TO_BIT (single_pred_edge (BASIC_BLOCK (BB_TO_BLOCK (bb_from)))))))\n+\t EDGE_TO_BIT (single_pred_edge (BASIC_BLOCK_FOR_FN (cfun, \\\n+\t\t\t\t\t\t\t    BB_TO_BLOCK (bb_from)))))))\n \n /* Turns on the fed_by_spec_load flag for insns fed by load_insn.  */\n \n@@ -2655,7 +2662,7 @@ deps_join (struct deps_desc *succ_deps, struct deps_desc *pred_deps)\n static void\n propagate_deps (int bb, struct deps_desc *pred_deps)\n {\n-  basic_block block = BASIC_BLOCK (BB_TO_BLOCK (bb));\n+  basic_block block = BASIC_BLOCK_FOR_FN (cfun, BB_TO_BLOCK (bb));\n   edge_iterator ei;\n   edge e;\n \n@@ -2864,7 +2871,8 @@ sched_is_disabled_for_current_region_p (void)\n   int bb;\n \n   for (bb = 0; bb < current_nr_blocks; bb++)\n-    if (!(BASIC_BLOCK (BB_TO_BLOCK (bb))->flags & BB_DISABLE_SCHEDULE))\n+    if (!(BASIC_BLOCK_FOR_FN (cfun,\n+\t\t\t      BB_TO_BLOCK (bb))->flags & BB_DISABLE_SCHEDULE))\n       return false;\n \n   return true;"}, {"sha": "57b28a0ca48a2512497e821e08f4dff6ae741203", "filename": "gcc/sched-vis.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Fsched-vis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Fsched-vis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-vis.c?ref=06e28de223648085ab8a265fe5f2b7dafaf22ad4", "patch": "@@ -873,7 +873,7 @@ extern void debug_bb_n_slim (int);\n DEBUG_FUNCTION void\n debug_bb_n_slim (int n)\n {\n-  basic_block bb = BASIC_BLOCK (n);\n+  basic_block bb = BASIC_BLOCK_FOR_FN (cfun, n);\n   debug_bb_slim (bb);\n }\n "}, {"sha": "da84ccef60a7552087046e85d42bc7a822609452", "filename": "gcc/sel-sched-ir.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Fsel-sched-ir.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Fsel-sched-ir.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched-ir.c?ref=06e28de223648085ab8a265fe5f2b7dafaf22ad4", "patch": "@@ -3075,7 +3075,7 @@ sel_finish_global_and_expr (void)\n     bbs.create (current_nr_blocks);\n \n     for (i = 0; i < current_nr_blocks; i++)\n-      bbs.quick_push (BASIC_BLOCK (BB_TO_BLOCK (i)));\n+      bbs.quick_push (BASIC_BLOCK_FOR_FN (cfun, BB_TO_BLOCK (i)));\n \n     /* Clear AV_SETs and INSN_EXPRs.  */\n     {\n@@ -3627,7 +3627,7 @@ verify_backedges (void)\n       edge_iterator ei;\n \n       for (i = 0; i < current_nr_blocks; i++)\n-        FOR_EACH_EDGE (e, ei, BASIC_BLOCK (BB_TO_BLOCK (i))->succs)\n+        FOR_EACH_EDGE (e, ei, BASIC_BLOCK_FOR_FN (cfun, BB_TO_BLOCK (i))->succs)\n           if (in_current_region_p (e->dest)\n               && BLOCK_TO_BB (e->dest->index) < i)\n             n++;\n@@ -3897,7 +3897,7 @@ purge_empty_blocks (void)\n   /* Do not attempt to delete the first basic block in the region.  */\n   for (i = 1; i < current_nr_blocks; )\n     {\n-      basic_block b = BASIC_BLOCK (BB_TO_BLOCK (i));\n+      basic_block b = BASIC_BLOCK_FOR_FN (cfun, BB_TO_BLOCK (i));\n \n       if (maybe_tidy_empty_bb (b))\n \tcontinue;\n@@ -6346,7 +6346,7 @@ sel_remove_loop_preheader (void)\n   /* Add blocks that aren't within the current loop to PREHEADER_BLOCKS.  */\n   for (i = 0; i < RGN_NR_BLOCKS (cur_rgn); i++)\n     {\n-      bb = BASIC_BLOCK (BB_TO_BLOCK (i));\n+      bb = BASIC_BLOCK_FOR_FN (cfun, BB_TO_BLOCK (i));\n \n       /* If the basic block belongs to region, but doesn't belong to\n \t corresponding loop, then it should be a preheader.  */"}, {"sha": "3e1fd96840daae29f9806fcbcc676acfda116473", "filename": "gcc/sel-sched.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Fsel-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Fsel-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched.c?ref=06e28de223648085ab8a265fe5f2b7dafaf22ad4", "patch": "@@ -4903,7 +4903,8 @@ remove_insns_that_need_bookkeeping (fence_t fence, av_set_t *av_ptr)\n \t  && (EXPR_SPEC (expr)\n \t      || !EXPR_ORIG_BB_INDEX (expr)\n \t      || !dominated_by_p (CDI_DOMINATORS,\n-\t\t\t\t  BASIC_BLOCK (EXPR_ORIG_BB_INDEX (expr)),\n+\t\t\t\t  BASIC_BLOCK_FOR_FN (cfun,\n+\t\t\t\t\t\t      EXPR_ORIG_BB_INDEX (expr)),\n \t\t\t\t  BLOCK_FOR_INSN (FENCE_INSN (fence)))))\n \t{\n           if (sched_verbose >= 4)\n@@ -6886,7 +6887,7 @@ current_region_empty_p (void)\n {\n   int i;\n   for (i = 0; i < current_nr_blocks; i++)\n-    if (! sel_bb_empty_p (BASIC_BLOCK (BB_TO_BLOCK (i))))\n+    if (! sel_bb_empty_p (BASIC_BLOCK_FOR_FN (cfun, BB_TO_BLOCK (i))))\n       return false;\n \n   return true;\n@@ -6945,7 +6946,7 @@ sel_region_init (int rgn)\n   bbs.create (current_nr_blocks);\n \n   for (i = 0; i < current_nr_blocks; i++)\n-    bbs.quick_push (BASIC_BLOCK (BB_TO_BLOCK (i)));\n+    bbs.quick_push (BASIC_BLOCK_FOR_FN (cfun, BB_TO_BLOCK (i)));\n \n   sel_init_bbs (bbs);\n \n@@ -6980,13 +6981,14 @@ sel_region_init (int rgn)\n      compute_live for the first insn of the loop.  */\n   if (current_loop_nest)\n     {\n-      int header = (sel_is_loop_preheader_p (BASIC_BLOCK (BB_TO_BLOCK (0)))\n-                    ? 1\n-                    : 0);\n+      int header =\n+\t(sel_is_loop_preheader_p (BASIC_BLOCK_FOR_FN (cfun, BB_TO_BLOCK (0)))\n+\t ? 1\n+\t : 0);\n \n       if (current_nr_blocks == header + 1)\n         update_liveness_on_insn\n-          (sel_bb_head (BASIC_BLOCK (BB_TO_BLOCK (header))));\n+          (sel_bb_head (BASIC_BLOCK_FOR_FN (cfun, BB_TO_BLOCK (header))));\n     }\n \n   /* Set hooks so that no newly generated insn will go out unnoticed.  */\n@@ -7024,7 +7026,7 @@ simplify_changed_insns (void)\n \n   for (i = 0; i < current_nr_blocks; i++)\n     {\n-      basic_block bb = BASIC_BLOCK (BB_TO_BLOCK (i));\n+      basic_block bb = BASIC_BLOCK_FOR_FN (cfun, BB_TO_BLOCK (i));\n       rtx insn;\n \n       FOR_BB_INSNS (bb, insn)"}, {"sha": "39715b8824aa80486f88ef05edbf105198d37572", "filename": "gcc/trans-mem.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Ftrans-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Ftrans-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftrans-mem.c?ref=06e28de223648085ab8a265fe5f2b7dafaf22ad4", "patch": "@@ -2993,7 +2993,7 @@ execute_tm_mark (void)\n \t\t  && sub & GTMA_MAY_ENTER_IRREVOCABLE)\n \t\tcontinue;\n \t    }\n-\t  expand_block_tm (r, BASIC_BLOCK (i));\n+\t  expand_block_tm (r, BASIC_BLOCK_FOR_FN (cfun, i));\n \t}\n     }\n \n@@ -3184,7 +3184,7 @@ execute_tm_edges (void)\n \n   FOR_EACH_VEC_ELT (bb_regions, i, r)\n     if (r != NULL)\n-      expand_block_edges (r, BASIC_BLOCK (i));\n+      expand_block_edges (r, BASIC_BLOCK_FOR_FN (cfun, i));\n \n   bb_regions.release ();\n \n@@ -3700,7 +3700,7 @@ tm_memopt_compute_antic (struct tm_region *region,\n       unsigned int i;\n       bitmap_iterator bi;\n       EXECUTE_IF_SET_IN_BITMAP (region->exit_blocks, 0, i, bi)\n-\tBB_VISITED_P (BASIC_BLOCK (i)) = true;\n+\tBB_VISITED_P (BASIC_BLOCK_FOR_FN (cfun, i)) = true;\n     }\n \n   qin = worklist;\n@@ -4572,7 +4572,8 @@ ipa_tm_scan_irr_function (struct cgraph_node *node, bool for_clone)\n       unsigned i;\n \n       EXECUTE_IF_SET_IN_BITMAP (new_irr, 0, i, bmi)\n-\tipa_tm_decrement_clone_counts (BASIC_BLOCK (i), for_clone);\n+\tipa_tm_decrement_clone_counts (BASIC_BLOCK_FOR_FN (cfun, i),\n+\t\t\t\t       for_clone);\n \n       if (old_irr)\n \t{"}, {"sha": "a70673099729ad1c95766b5a21e401fff338b9e5", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=06e28de223648085ab8a265fe5f2b7dafaf22ad4", "patch": "@@ -672,7 +672,8 @@ make_edges (void)\n \n   /* Create an edge from entry to the first block with executable\n      statements in it.  */\n-  make_edge (ENTRY_BLOCK_PTR_FOR_FN (cfun), BASIC_BLOCK (NUM_FIXED_BLOCKS),\n+  make_edge (ENTRY_BLOCK_PTR_FOR_FN (cfun),\n+\t     BASIC_BLOCK_FOR_FN (cfun, NUM_FIXED_BLOCKS),\n \t     EDGE_FALLTHRU);\n \n   /* Traverse the basic block array placing edges.  */\n@@ -943,7 +944,7 @@ end_recording_case_labels (void)\n   edge_to_cases = NULL;\n   EXECUTE_IF_SET_IN_BITMAP (touched_switch_bbs, 0, i, bi)\n     {\n-      basic_block bb = BASIC_BLOCK (i);\n+      basic_block bb = BASIC_BLOCK_FOR_FN (cfun, i);\n       if (bb)\n \t{\n \t  gimple stmt = last_stmt (bb);\n@@ -1027,7 +1028,8 @@ label_to_block_fn (struct function *ifun, tree dest)\n      and undefined variable warnings quite right.  */\n   if (seen_error () && uid < 0)\n     {\n-      gimple_stmt_iterator gsi = gsi_start_bb (BASIC_BLOCK (NUM_FIXED_BLOCKS));\n+      gimple_stmt_iterator gsi =\n+\tgsi_start_bb (BASIC_BLOCK_FOR_FN (cfun, NUM_FIXED_BLOCKS));\n       gimple stmt;\n \n       stmt = gimple_build_label (dest);\n@@ -2082,8 +2084,8 @@ gimple_debug_bb (basic_block bb)\n basic_block\n gimple_debug_bb_n (int n)\n {\n-  gimple_debug_bb (BASIC_BLOCK (n));\n-  return BASIC_BLOCK (n);\n+  gimple_debug_bb (BASIC_BLOCK_FOR_FN (cfun, n));\n+  return BASIC_BLOCK_FOR_FN (cfun, n);\n }\n \n \n@@ -7476,7 +7478,7 @@ gimple_flow_call_edges_add (sbitmap blocks)\n      return or not...  */\n   for (i = 0; i < last_bb; i++)\n     {\n-      basic_block bb = BASIC_BLOCK (i);\n+      basic_block bb = BASIC_BLOCK_FOR_FN (cfun, i);\n       gimple_stmt_iterator gsi;\n       gimple stmt, last_stmt;\n \n@@ -7605,7 +7607,7 @@ remove_edge_and_dominated_blocks (edge e)\n \n       EXECUTE_IF_SET_IN_BITMAP (df, 0, i, bi)\n \t{\n-\t  bb = BASIC_BLOCK (i);\n+\t  bb = BASIC_BLOCK_FOR_FN (cfun, i);\n \t  bitmap_set_bit (df_idom,\n \t\t\t  get_immediate_dominator (CDI_DOMINATORS, bb)->index);\n \t}\n@@ -7643,7 +7645,7 @@ remove_edge_and_dominated_blocks (edge e)\n      the dominance frontier of E.  Therefore, Y belongs to DF_IDOM.  */\n   EXECUTE_IF_SET_IN_BITMAP (df_idom, 0, i, bi)\n     {\n-      bb = BASIC_BLOCK (i);\n+      bb = BASIC_BLOCK_FOR_FN (cfun, i);\n       for (dbb = first_dom_son (CDI_DOMINATORS, bb);\n \t   dbb;\n \t   dbb = next_dom_son (CDI_DOMINATORS, dbb))\n@@ -7696,7 +7698,7 @@ gimple_purge_all_dead_eh_edges (const_bitmap blocks)\n \n   EXECUTE_IF_SET_IN_BITMAP (blocks, 0, i, bi)\n     {\n-      basic_block bb = BASIC_BLOCK (i);\n+      basic_block bb = BASIC_BLOCK_FOR_FN (cfun, i);\n \n       /* Earlier gimple_purge_dead_eh_edges could have removed\n \t this basic block already.  */\n@@ -7753,7 +7755,7 @@ gimple_purge_all_dead_abnormal_call_edges (const_bitmap blocks)\n \n   EXECUTE_IF_SET_IN_BITMAP (blocks, 0, i, bi)\n     {\n-      basic_block bb = BASIC_BLOCK (i);\n+      basic_block bb = BASIC_BLOCK_FOR_FN (cfun, i);\n \n       /* Earlier gimple_purge_dead_abnormal_call_edges could have removed\n \t this basic block already.  */"}, {"sha": "76d97491b2f2d425758d884ce68aa307bbbcb72b", "filename": "gcc/tree-cfgcleanup.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Ftree-cfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Ftree-cfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfgcleanup.c?ref=06e28de223648085ab8a265fe5f2b7dafaf22ad4", "patch": "@@ -551,7 +551,7 @@ fixup_noreturn_call (gimple stmt)\n \t\t  SET_USE (use_p, error_mark_node);\n \t    }\n \t  EXECUTE_IF_SET_IN_BITMAP (blocks, 0, bb_index, bi)\n-\t    delete_basic_block (BASIC_BLOCK (bb_index));\n+\t    delete_basic_block (BASIC_BLOCK_FOR_FN (cfun, bb_index));\n \t  BITMAP_FREE (blocks);\n \t  release_ssa_name (op);\n \t}\n@@ -586,7 +586,7 @@ split_bbs_on_noreturn_calls (void)\n \tif (bb == NULL\n \t    || bb->index < NUM_FIXED_BLOCKS\n \t    || bb->index >= last_basic_block\n-\t    || BASIC_BLOCK (bb->index) != bb\n+\t    || BASIC_BLOCK_FOR_FN (cfun, bb->index) != bb\n \t    || !gimple_call_noreturn_p (stmt))\n \t  continue;\n \n@@ -645,7 +645,7 @@ cleanup_tree_cfg_1 (void)\n   n = last_basic_block;\n   for (i = NUM_FIXED_BLOCKS; i < n; i++)\n     {\n-      bb = BASIC_BLOCK (i);\n+      bb = BASIC_BLOCK_FOR_FN (cfun, i);\n       if (bb)\n \tretval |= cleanup_tree_cfg_bb (bb);\n     }\n@@ -658,7 +658,7 @@ cleanup_tree_cfg_1 (void)\n       if (i < NUM_FIXED_BLOCKS)\n \tcontinue;\n \n-      bb = BASIC_BLOCK (i);\n+      bb = BASIC_BLOCK_FOR_FN (cfun, i);\n       if (!bb)\n \tcontinue;\n "}, {"sha": "1d1bc1eacb1eac7ca9bf4dba780952567bcc249a", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=06e28de223648085ab8a265fe5f2b7dafaf22ad4", "patch": "@@ -2547,12 +2547,13 @@ copy_cfg_body (copy_body_data * id, gcov_type count, int frequency_scale,\n   for (; last < last_basic_block; last++)\n     {\n       if (need_debug_cleanup)\n-\tmaybe_move_debug_stmts_to_successors (id, BASIC_BLOCK (last));\n-      BASIC_BLOCK (last)->aux = NULL;\n+\tmaybe_move_debug_stmts_to_successors (id,\n+\t\t\t\t\t      BASIC_BLOCK_FOR_FN (cfun, last));\n+      BASIC_BLOCK_FOR_FN (cfun, last)->aux = NULL;\n       /* Update call edge destinations.  This can not be done before loop\n \t info is updated, because we may split basic blocks.  */\n       if (id->transform_call_graph_edges == CB_CGE_DUPLICATE)\n-\tredirect_all_calls (id, BASIC_BLOCK (last));\n+\tredirect_all_calls (id, BASIC_BLOCK_FOR_FN (cfun, last));\n     }\n   entry_block_map->aux = NULL;\n   exit_block_map->aux = NULL;\n@@ -4443,11 +4444,11 @@ static void\n fold_marked_statements (int first, struct pointer_set_t *statements)\n {\n   for (; first < n_basic_blocks_for_fn (cfun); first++)\n-    if (BASIC_BLOCK (first))\n+    if (BASIC_BLOCK_FOR_FN (cfun, first))\n       {\n         gimple_stmt_iterator gsi;\n \n-\tfor (gsi = gsi_start_bb (BASIC_BLOCK (first));\n+\tfor (gsi = gsi_start_bb (BASIC_BLOCK_FOR_FN (cfun, first));\n \t     !gsi_end_p (gsi);\n \t     gsi_next (&gsi))\n \t  if (pointer_set_contains (statements, gsi_stmt (gsi)))\n@@ -4473,7 +4474,7 @@ fold_marked_statements (int first, struct pointer_set_t *statements)\n \t\t\t  break;\n \t\t\t}\n \t\t      if (gsi_end_p (i2))\n-\t\t\ti2 = gsi_start_bb (BASIC_BLOCK (first));\n+\t\t\ti2 = gsi_start_bb (BASIC_BLOCK_FOR_FN (cfun, first));\n \t\t      else\n \t\t\tgsi_next (&i2);\n \t\t      while (1)\n@@ -4497,7 +4498,8 @@ fold_marked_statements (int first, struct pointer_set_t *statements)\n \t\t\t\t is mood anyway.  */\n \t\t\t      if (maybe_clean_or_replace_eh_stmt (old_stmt,\n \t\t\t\t\t\t\t\t  new_stmt))\n-\t\t\t\tgimple_purge_dead_eh_edges (BASIC_BLOCK (first));\n+\t\t\t\tgimple_purge_dead_eh_edges (\n+\t\t\t\t  BASIC_BLOCK_FOR_FN (cfun, first));\n \t\t\t      break;\n \t\t\t    }\n \t\t\t  gsi_next (&i2);\n@@ -4517,7 +4519,8 @@ fold_marked_statements (int first, struct pointer_set_t *statements)\n \t\t\t\t\t\t       new_stmt);\n \n \t\t  if (maybe_clean_or_replace_eh_stmt (old_stmt, new_stmt))\n-\t\t    gimple_purge_dead_eh_edges (BASIC_BLOCK (first));\n+\t\t    gimple_purge_dead_eh_edges (BASIC_BLOCK_FOR_FN (cfun,\n+\t\t\t\t\t\t\t\t    first));\n \t\t}\n \t    }\n       }"}, {"sha": "ac1044047d9bf7f9ec5df3bd1fcc6dbb692daca1", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=06e28de223648085ab8a265fe5f2b7dafaf22ad4", "patch": "@@ -558,7 +558,7 @@ set_livein_block (tree var, basic_block bb)\n \n       if (def_block_index == -1\n \t  || ! dominated_by_p (CDI_DOMINATORS, bb,\n-\t                       BASIC_BLOCK (def_block_index)))\n+\t                       BASIC_BLOCK_FOR_FN (cfun, def_block_index)))\n \tinfo->need_phi_state = NEED_PHI_STATE_MAYBE;\n     }\n   else\n@@ -821,7 +821,7 @@ prune_unused_phi_nodes (bitmap phis, bitmap kills, bitmap uses)\n   adef = 1;\n   EXECUTE_IF_SET_IN_BITMAP (to_remove, 0, i, bi)\n     {\n-      def_bb = BASIC_BLOCK (i);\n+      def_bb = BASIC_BLOCK_FOR_FN (cfun, i);\n       defs[adef].bb_index = i;\n       defs[adef].dfs_num = bb_dom_dfs_in (CDI_DOMINATORS, def_bb);\n       defs[adef + 1].bb_index = i;\n@@ -895,7 +895,8 @@ prune_unused_phi_nodes (bitmap phis, bitmap kills, bitmap uses)\n \tp = b;\n       else\n \t{\n-\t  use_bb = get_immediate_dominator (CDI_DOMINATORS, BASIC_BLOCK (b));\n+\t  use_bb = get_immediate_dominator (CDI_DOMINATORS,\n+\t\t\t\t\t    BASIC_BLOCK_FOR_FN (cfun, b));\n \t  p = find_dfsnum_interval (defs, n_defs,\n \t\t\t\t    bb_dom_dfs_in (CDI_DOMINATORS, use_bb));\n \t  if (!bitmap_bit_p (phis, p))\n@@ -907,7 +908,7 @@ prune_unused_phi_nodes (bitmap phis, bitmap kills, bitmap uses)\n \tcontinue;\n \n       /* Add the new uses to the worklist.  */\n-      def_bb = BASIC_BLOCK (p);\n+      def_bb = BASIC_BLOCK_FOR_FN (cfun, p);\n       FOR_EACH_EDGE (e, ei, def_bb->preds)\n \t{\n \t  u = e->src->index;\n@@ -1004,7 +1005,7 @@ insert_phi_nodes_for (tree var, bitmap phi_insertion_points, bool update_p)\n   /* And insert the PHI nodes.  */\n   EXECUTE_IF_SET_IN_BITMAP (phi_insertion_points, 0, bb_index, bi)\n     {\n-      bb = BASIC_BLOCK (bb_index);\n+      bb = BASIC_BLOCK_FOR_FN (cfun, bb_index);\n       if (update_p)\n \tmark_block_for_update (bb);\n \n@@ -3021,8 +3022,9 @@ insert_updated_phi_nodes_for (tree var, bitmap_head *dfs, bitmap blocks,\n \t\t\t\t\t\t    db->def_blocks);\n \t  if (entry != ENTRY_BLOCK_PTR_FOR_FN (cfun))\n \t    EXECUTE_IF_SET_IN_BITMAP (idf, 0, i, bi)\n-\t      if (BASIC_BLOCK (i) != entry\n-\t\t  && dominated_by_p (CDI_DOMINATORS, BASIC_BLOCK (i), entry))\n+\t      if (BASIC_BLOCK_FOR_FN (cfun, i) != entry\n+\t\t  && dominated_by_p (CDI_DOMINATORS,\n+\t\t\t\t     BASIC_BLOCK_FOR_FN (cfun, i), entry))\n \t\tbitmap_set_bit (pruned_idf, i);\n \t}\n       else\n@@ -3054,7 +3056,7 @@ insert_updated_phi_nodes_for (tree var, bitmap_head *dfs, bitmap blocks,\n \t{\n \t  edge e;\n \t  edge_iterator ei;\n-\t  basic_block bb = BASIC_BLOCK (i);\n+\t  basic_block bb = BASIC_BLOCK_FOR_FN (cfun, i);\n \n \t  FOR_EACH_EDGE (e, ei, bb->preds)\n \t    if (e->src->index >= 0)"}, {"sha": "ebdf511a5f673bca8178eebe58a4dc5e2fa3b3e0", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=06e28de223648085ab8a265fe5f2b7dafaf22ad4", "patch": "@@ -902,7 +902,7 @@ tree_ssa_dominator_optimize (void)\n \t iterator.  */\n       EXECUTE_IF_SET_IN_BITMAP (need_eh_cleanup, 0, i, bi)\n \t{\n-\t  basic_block bb = BASIC_BLOCK (i);\n+\t  basic_block bb = BASIC_BLOCK_FOR_FN (cfun, i);\n \t  if (bb == NULL)\n \t    continue;\n \t  while (single_succ_p (bb)"}, {"sha": "5d1a3b9eed14c05feb8c29a6d8d83c481d4eee9b", "filename": "gcc/tree-ssa-live.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Ftree-ssa-live.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Ftree-ssa-live.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.c?ref=06e28de223648085ab8a265fe5f2b7dafaf22ad4", "patch": "@@ -1057,7 +1057,7 @@ live_worklist (tree_live_info_p live)\n   while (live->stack_top != live->work_stack)\n     {\n       b = *--(live->stack_top);\n-      loe_visit_block (live, BASIC_BLOCK (b), visited, tmp);\n+      loe_visit_block (live, BASIC_BLOCK_FOR_FN (cfun, b), visited, tmp);\n     }\n \n   BITMAP_FREE (tmp);"}, {"sha": "de667ad6c86ec5ee508858c35a6cc2abb455c3be", "filename": "gcc/tree-ssa-loop-manip.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Ftree-ssa-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Ftree-ssa-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-manip.c?ref=06e28de223648085ab8a265fe5f2b7dafaf22ad4", "patch": "@@ -202,7 +202,7 @@ compute_live_loop_exits (bitmap live_exits, bitmap use_blocks,\n \n   EXECUTE_IF_SET_IN_BITMAP (use_blocks, 0, i, bi)\n     {\n-      basic_block use_bb = BASIC_BLOCK (i);\n+      basic_block use_bb = BASIC_BLOCK_FOR_FN (cfun, i);\n       struct loop *use_loop = use_bb->loop_father;\n       gcc_checking_assert (def_loop != use_loop\n \t\t\t   && ! flow_loop_nested_p (def_loop, use_loop));\n@@ -325,7 +325,7 @@ add_exit_phis_var (tree var, bitmap use_blocks, bitmap *loop_exits)\n \n   EXECUTE_IF_SET_IN_BITMAP (live_exits, 0, index, bi)\n     {\n-      add_exit_phi (BASIC_BLOCK (index), var);\n+      add_exit_phi (BASIC_BLOCK_FOR_FN (cfun, index), var);\n     }\n \n   BITMAP_FREE (live_exits);\n@@ -461,7 +461,7 @@ find_uses_to_rename (bitmap changed_bbs, bitmap *use_blocks, bitmap need_phis)\n \n   if (changed_bbs)\n     EXECUTE_IF_SET_IN_BITMAP (changed_bbs, 0, index, bi)\n-      find_uses_to_rename_bb (BASIC_BLOCK (index), use_blocks, need_phis);\n+      find_uses_to_rename_bb (BASIC_BLOCK_FOR_FN (cfun, index), use_blocks, need_phis);\n   else\n     FOR_EACH_BB (bb)\n       find_uses_to_rename_bb (bb, use_blocks, need_phis);\n@@ -729,13 +729,13 @@ copy_phi_node_args (unsigned first_new_block)\n   unsigned i;\n \n   for (i = first_new_block; i < (unsigned) last_basic_block; i++)\n-    BASIC_BLOCK (i)->flags |= BB_DUPLICATED;\n+    BASIC_BLOCK_FOR_FN (cfun, i)->flags |= BB_DUPLICATED;\n \n   for (i = first_new_block; i < (unsigned) last_basic_block; i++)\n-    add_phi_args_after_copy_bb (BASIC_BLOCK (i));\n+    add_phi_args_after_copy_bb (BASIC_BLOCK_FOR_FN (cfun, i));\n \n   for (i = first_new_block; i < (unsigned) last_basic_block; i++)\n-    BASIC_BLOCK (i)->flags &= ~BB_DUPLICATED;\n+    BASIC_BLOCK_FOR_FN (cfun, i)->flags &= ~BB_DUPLICATED;\n }\n \n "}, {"sha": "b312e21d49db1d5dfc46311fd393103800b156ea", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=06e28de223648085ab8a265fe5f2b7dafaf22ad4", "patch": "@@ -2486,7 +2486,7 @@ compute_antic (void)\n \t{\n \t  if (bitmap_bit_p (changed_blocks, postorder[i]))\n \t    {\n-\t      basic_block block = BASIC_BLOCK (postorder[i]);\n+\t      basic_block block = BASIC_BLOCK_FOR_FN (cfun, postorder[i]);\n \t      changed |= compute_antic_aux (block,\n \t\t\t\t\t    bitmap_bit_p (has_abnormal_preds,\n \t\t\t\t\t\t      block->index));\n@@ -2515,7 +2515,7 @@ compute_antic (void)\n \t    {\n \t      if (bitmap_bit_p (changed_blocks, postorder[i]))\n \t\t{\n-\t\t  basic_block block = BASIC_BLOCK (postorder[i]);\n+\t\t  basic_block block = BASIC_BLOCK_FOR_FN (cfun, postorder[i]);\n \t\t  changed\n \t\t    |= compute_partial_antic_aux (block,\n \t\t\t\t\t\t  bitmap_bit_p (has_abnormal_preds,"}, {"sha": "077ad8378252e84eec71467eb851200c86a3c518", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=06e28de223648085ab8a265fe5f2b7dafaf22ad4", "patch": "@@ -2028,7 +2028,8 @@ update_range_test (struct range_entry *range, struct range_entry *otherrange,\n {\n   operand_entry_t oe = (*ops)[range->idx];\n   tree op = oe->op;\n-  gimple stmt = op ? SSA_NAME_DEF_STMT (op) : last_stmt (BASIC_BLOCK (oe->id));\n+  gimple stmt = op ? SSA_NAME_DEF_STMT (op) :\n+    last_stmt (BASIC_BLOCK_FOR_FN (cfun, oe->id));\n   location_t loc = gimple_location (stmt);\n   tree optype = op ? TREE_TYPE (op) : boolean_type_node;\n   tree tem = build_range_check (loc, optype, exp, in_p, low, high);\n@@ -2291,7 +2292,8 @@ optimize_range_tests (enum tree_code opcode,\n       oe = (*ops)[i];\n       ranges[i].idx = i;\n       init_range_entry (ranges + i, oe->op,\n-\t\t\toe->op ? NULL : last_stmt (BASIC_BLOCK (oe->id)));\n+\t\t\toe->op ? NULL :\n+\t\t\t  last_stmt (BASIC_BLOCK_FOR_FN (cfun, oe->id)));\n       /* For | invert it now, we will invert it again before emitting\n \t the optimized expression.  */\n       if (opcode == BIT_IOR_EXPR"}, {"sha": "ecc1f6b91df019fe683e7f94576ce0b0ebf0e812", "filename": "gcc/tree-ssa-sink.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Ftree-ssa-sink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Ftree-ssa-sink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sink.c?ref=06e28de223648085ab8a265fe5f2b7dafaf22ad4", "patch": "@@ -182,10 +182,10 @@ nearest_common_dominator_of_uses (gimple stmt, bool *debug_stmts)\n \t  bitmap_set_bit (blocks, useblock->index);\n \t}\n     }\n-  commondom = BASIC_BLOCK (bitmap_first_set_bit (blocks));\n+  commondom = BASIC_BLOCK_FOR_FN (cfun, bitmap_first_set_bit (blocks));\n   EXECUTE_IF_SET_IN_BITMAP (blocks, 0, j, bi)\n     commondom = nearest_common_dominator (CDI_DOMINATORS, commondom,\n-\t\t\t\t\t  BASIC_BLOCK (j));\n+\t\t\t\t\t  BASIC_BLOCK_FOR_FN (cfun, j));\n   BITMAP_FREE (blocks);\n   return commondom;\n }"}, {"sha": "fbcbf781c463028d55878d7d7a2f3bf038df1ec4", "filename": "gcc/tree-ssa-tail-merge.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Ftree-ssa-tail-merge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Ftree-ssa-tail-merge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-tail-merge.c?ref=06e28de223648085ab8a265fe5f2b7dafaf22ad4", "patch": "@@ -454,7 +454,7 @@ same_succ_hash (const_same_succ e)\n   int flags;\n   unsigned int i;\n   unsigned int first = bitmap_first_set_bit (e->bbs);\n-  basic_block bb = BASIC_BLOCK (first);\n+  basic_block bb = BASIC_BLOCK_FOR_FN (cfun, first);\n   int size = 0;\n   gimple_stmt_iterator gsi;\n   gimple stmt;\n@@ -502,8 +502,8 @@ same_succ_hash (const_same_succ e)\n \n   EXECUTE_IF_SET_IN_BITMAP (e->succs, 0, s, bs)\n     {\n-      int n = find_edge (bb, BASIC_BLOCK (s))->dest_idx;\n-      for (gsi = gsi_start_phis (BASIC_BLOCK (s)); !gsi_end_p (gsi);\n+      int n = find_edge (bb, BASIC_BLOCK_FOR_FN (cfun, s))->dest_idx;\n+      for (gsi = gsi_start_phis (BASIC_BLOCK_FOR_FN (cfun, s)); !gsi_end_p (gsi);\n \t   gsi_next (&gsi))\n \t{\n \t  gimple phi = gsi_stmt (gsi);\n@@ -572,8 +572,8 @@ same_succ_def::equal (const value_type *e1, const compare_type *e2)\n   first1 = bitmap_first_set_bit (e1->bbs);\n   first2 = bitmap_first_set_bit (e2->bbs);\n \n-  bb1 = BASIC_BLOCK (first1);\n-  bb2 = BASIC_BLOCK (first2);\n+  bb1 = BASIC_BLOCK_FOR_FN (cfun, first1);\n+  bb2 = BASIC_BLOCK_FOR_FN (cfun, first2);\n \n   if (BB_SIZE (bb1) != BB_SIZE (bb2))\n     return 0;\n@@ -834,7 +834,7 @@ same_succ_flush_bbs (bitmap bbs)\n   bitmap_iterator bi;\n \n   EXECUTE_IF_SET_IN_BITMAP (bbs, 0, i, bi)\n-    same_succ_flush_bb (BASIC_BLOCK (i));\n+    same_succ_flush_bb (BASIC_BLOCK_FOR_FN (cfun, i));\n }\n \n /* Release the last vdef in BB, either normal or phi result.  */\n@@ -887,7 +887,7 @@ update_worklist (void)\n   same = same_succ_alloc ();\n   EXECUTE_IF_SET_IN_BITMAP (deleted_bb_preds, 0, i, bi)\n     {\n-      bb = BASIC_BLOCK (i);\n+      bb = BASIC_BLOCK_FOR_FN (cfun, i);\n       gcc_assert (bb != NULL);\n       find_same_succ_bb (bb, &same);\n       if (same == NULL)\n@@ -1075,7 +1075,7 @@ set_cluster (basic_block bb1, basic_block bb2)\n       merge = BB_CLUSTER (bb1);\n       merge_clusters (merge, old);\n       EXECUTE_IF_SET_IN_BITMAP (old->bbs, 0, i, bi)\n-\tBB_CLUSTER (BASIC_BLOCK (i)) = merge;\n+\tBB_CLUSTER (BASIC_BLOCK_FOR_FN (cfun, i)) = merge;\n       all_clusters[old->index] = NULL;\n       update_rep_bb (merge, old->rep_bb);\n       delete_cluster (old);\n@@ -1320,7 +1320,7 @@ same_phi_alternatives (same_succ same_succ, basic_block bb1, basic_block bb2)\n \n   EXECUTE_IF_SET_IN_BITMAP (same_succ->succs, 0, s, bs)\n     {\n-      succ = BASIC_BLOCK (s);\n+      succ = BASIC_BLOCK_FOR_FN (cfun, s);\n       e1 = find_edge (bb1, succ);\n       e2 = find_edge (bb2, succ);\n       if (e1->flags & EDGE_COMPLEX\n@@ -1406,7 +1406,7 @@ find_clusters_1 (same_succ same_succ)\n \n   EXECUTE_IF_SET_IN_BITMAP (same_succ->bbs, 0, i, bi)\n     {\n-      bb1 = BASIC_BLOCK (i);\n+      bb1 = BASIC_BLOCK_FOR_FN (cfun, i);\n \n       /* TODO: handle blocks with phi-nodes.  We'll have to find corresponding\n \t phi-nodes in bb1 and bb2, with the same alternatives for the same\n@@ -1417,7 +1417,7 @@ find_clusters_1 (same_succ same_succ)\n       nr_comparisons = 0;\n       EXECUTE_IF_SET_IN_BITMAP (same_succ->bbs, i + 1, j, bj)\n \t{\n-\t  bb2 = BASIC_BLOCK (j);\n+\t  bb2 = BASIC_BLOCK_FOR_FN (cfun, j);\n \n \t  if (bb_has_non_vop_phi (bb2))\n \t    continue;\n@@ -1573,7 +1573,7 @@ apply_clusters (void)\n       bitmap_clear_bit (c->bbs, bb2->index);\n       EXECUTE_IF_SET_IN_BITMAP (c->bbs, 0, j, bj)\n \t{\n-\t  bb1 = BASIC_BLOCK (j);\n+\t  bb1 = BASIC_BLOCK_FOR_FN (cfun, j);\n \t  bitmap_clear_bit (update_bbs, bb1->index);\n \n \t  replace_block_by (bb1, bb2);\n@@ -1633,7 +1633,7 @@ update_debug_stmts (void)\n       gimple stmt;\n       gimple_stmt_iterator gsi;\n \n-      bb = BASIC_BLOCK (i);\n+      bb = BASIC_BLOCK_FOR_FN (cfun, i);\n       for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n \t{\n \t  stmt = gsi_stmt (gsi);"}, {"sha": "9289c118b2cfdab943b6348ae9cdbb15db5f7453", "filename": "gcc/tree-ssa-threadupdate.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Ftree-ssa-threadupdate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Ftree-ssa-threadupdate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.c?ref=06e28de223648085ab8a265fe5f2b7dafaf22ad4", "patch": "@@ -1412,7 +1412,7 @@ mark_threaded_blocks (bitmap threaded_blocks)\n     {\n       EXECUTE_IF_SET_IN_BITMAP (tmp, 0, i, bi)\n \t{\n-\t  bb = BASIC_BLOCK (i);\n+\t  bb = BASIC_BLOCK_FOR_FN (cfun, i);\n \t  if (EDGE_COUNT (bb->preds) > 1\n \t      && !redirection_block_p (bb))\n \t    {\n@@ -1442,7 +1442,7 @@ mark_threaded_blocks (bitmap threaded_blocks)\n      by trimming off the end of the jump thread path.  */\n   EXECUTE_IF_SET_IN_BITMAP (tmp, 0, i, bi)\n     {\n-      basic_block bb = BASIC_BLOCK (i);\n+      basic_block bb = BASIC_BLOCK_FOR_FN (cfun, i);\n       FOR_EACH_EDGE (e, ei, bb->preds)\n \t{\n \t  if (e->aux)\n@@ -1512,7 +1512,7 @@ mark_threaded_blocks (bitmap threaded_blocks)\n      we have to iterate on those rather than the threaded_edges vector.  */\n   EXECUTE_IF_SET_IN_BITMAP (tmp, 0, i, bi)\n     {\n-      bb = BASIC_BLOCK (i);\n+      bb = BASIC_BLOCK_FOR_FN (cfun, i);\n       FOR_EACH_EDGE (e, ei, bb->preds)\n \t{\n \t  if (e->aux)\n@@ -1592,7 +1592,7 @@ thread_through_all_blocks (bool may_peel_loop_headers)\n      loop structure.  */\n   EXECUTE_IF_SET_IN_BITMAP (threaded_blocks, 0, i, bi)\n     {\n-      basic_block bb = BASIC_BLOCK (i);\n+      basic_block bb = BASIC_BLOCK_FOR_FN (cfun, i);\n \n       if (EDGE_COUNT (bb->preds) > 0)\n \tretval |= thread_block (bb, true);"}, {"sha": "92652deaf035224ab87a5d2cdb0d52dc1833fafe", "filename": "gcc/tree-ssa-uncprop.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Ftree-ssa-uncprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Ftree-ssa-uncprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-uncprop.c?ref=06e28de223648085ab8a265fe5f2b7dafaf22ad4", "patch": "@@ -214,7 +214,8 @@ associate_equivalences_with_edges (void)\n \t\t      equivalency = XNEW (struct edge_equivalency);\n \t\t      equivalency->rhs = x;\n \t\t      equivalency->lhs = cond;\n-\t\t      find_edge (bb, BASIC_BLOCK (i))->aux = equivalency;\n+\t\t      find_edge (bb, BASIC_BLOCK_FOR_FN (cfun, i))->aux =\n+\t\t\tequivalency;\n \t\t    }\n \t\t}\n \t      free (info);"}, {"sha": "785e72f4b3d15e01d8421cce57b22ee316ce8604", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e28de223648085ab8a265fe5f2b7dafaf22ad4/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=06e28de223648085ab8a265fe5f2b7dafaf22ad4", "patch": "@@ -5975,7 +5975,7 @@ find_assert_locations (void)\n   need_asserts = false;\n   for (i = rpo_cnt - 1; i >= 0; --i)\n     {\n-      basic_block bb = BASIC_BLOCK (rpo[i]);\n+      basic_block bb = BASIC_BLOCK_FOR_FN (cfun, rpo[i]);\n       edge e;\n       edge_iterator ei;\n "}]}