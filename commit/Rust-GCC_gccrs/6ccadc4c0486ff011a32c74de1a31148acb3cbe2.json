{"sha": "6ccadc4c0486ff011a32c74de1a31148acb3cbe2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmNjYWRjNGMwNDg2ZmYwMTFhMzJjNzRkZTFhMzExNDhhY2IzY2JlMg==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-08-30T21:10:44Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-08-30T21:11:48Z"}, "message": "Use get_size_range instead of get_range to obtain range of valid sizes.\n\ngcc/ChangeLog:\n\n\t* builtins.c (access_ref::access_ref): Call get_size_range instead\n\tof get_range.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/Wstringop-overread-3.c: New test.", "tree": {"sha": "83a984530c8523cf8565da5aa1fe8da7a9d20f92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83a984530c8523cf8565da5aa1fe8da7a9d20f92"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ccadc4c0486ff011a32c74de1a31148acb3cbe2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ccadc4c0486ff011a32c74de1a31148acb3cbe2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ccadc4c0486ff011a32c74de1a31148acb3cbe2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ccadc4c0486ff011a32c74de1a31148acb3cbe2/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a240e83ce9d92786ac9a15ab815b58197b85ada2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a240e83ce9d92786ac9a15ab815b58197b85ada2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a240e83ce9d92786ac9a15ab815b58197b85ada2"}], "stats": {"total": 197, "additions": 195, "deletions": 2}, "files": [{"sha": "bc35b071f0261c4d357f03357f9519d86ff58c2c", "filename": "gcc/builtins.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ccadc4c0486ff011a32c74de1a31148acb3cbe2/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ccadc4c0486ff011a32c74de1a31148acb3cbe2/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=6ccadc4c0486ff011a32c74de1a31148acb3cbe2", "patch": "@@ -214,8 +214,13 @@ access_ref::access_ref (tree bound /* = NULL_TREE */,\n   /* When BOUND is nonnull and a range can be extracted from it,\n      set the bounds of the access to reflect both it and MINACCESS.\n      BNDRNG[0] is the size of the minimum access.  */\n-  if (bound && get_range (bound, UNSIGNED, bndrng))\n-    bndrng[0] = bndrng[0] > 0 && minaccess ? 1 : 0;\n+  tree rng[2];\n+  if (bound && get_size_range (bound, rng, true))\n+    {\n+      bndrng[0] = wi::to_offset (rng[0]);\n+      bndrng[1] = wi::to_offset (rng[1]);\n+      bndrng[0] = bndrng[0] > 0 && minaccess ? 1 : 0;\n+    }\n }\n \n /* Return true if NAME starts with __builtin_ or __sync_.  */"}, {"sha": "6c2c6b6a29db6849f7617b199391d27b68b8f243", "filename": "gcc/testsuite/gcc.dg/Wstringop-overread-3.c", "status": "added", "additions": 188, "deletions": 0, "changes": 188, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ccadc4c0486ff011a32c74de1a31148acb3cbe2/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overread-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ccadc4c0486ff011a32c74de1a31148acb3cbe2/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overread-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overread-3.c?ref=6ccadc4c0486ff011a32c74de1a31148acb3cbe2", "patch": "@@ -0,0 +1,188 @@\n+/* Verify that calling strndup and strnlen with an unknown bound isn't\n+   diagnosed regardless of the size of the array and the type of the bound.\n+  { dg-do compile }\n+  { dg-options \"-O -Wall\" } */\n+\n+#define NOIPA __attribute__ ((noipa))\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+extern char* strndup (const char*, size_t);\n+extern size_t strnlen (const char*, size_t);\n+\n+/* TO DO: Passing a zero-length array to any function is almost certainly\n+   a bug and should be diagnosed except perpaphs when the function also\n+   takes a bound and its value is known to be zero.  When this is\n+   implemented this test will need to be adjusted.  */\n+extern char a0[0];\n+\n+extern char a1[1];\n+\n+NOIPA char* strndup_a0_si (short n)\n+{\n+  return strndup (a0, n);\n+}\n+\n+NOIPA char* strndup_a0_i (int n)\n+{\n+  return strndup (a0, n);     // { dg-bogus \"\\\\\\[-Wstringop-overread\" }\n+}\n+\n+NOIPA char* strndup_a0_li (long n)\n+{\n+  return strndup (a0, n);     // { dg-bogus \"\\\\\\[-Wstringop-overread\" }\n+}\n+\n+NOIPA char* strndup_a0_lli (long long n)\n+{\n+  return strndup (a0, n);     // { dg-bogus \"\\\\\\[-Wstringop-overread\" }\n+}\n+\n+\n+NOIPA char* strndup_a0_usi (unsigned short n)\n+{\n+  return strndup (a0, n);\n+}\n+\n+NOIPA char* strndup_a0_ui (unsigned n)\n+{\n+  return strndup (a0, n);     // { dg-bogus \"\\\\\\[-Wstringop-overread\" }\n+}\n+\n+NOIPA char* strndup_a0_uli (unsigned long n)\n+{\n+  return strndup (a0, n);     // { dg-bogus \"\\\\\\[-Wstringop-overread\" }\n+}\n+\n+NOIPA char* strndup_a0_ulli (unsigned long long n)\n+{\n+  return strndup (a0, n);     // { dg-bogus \"\\\\\\[-Wstringop-overread\" }\n+}\n+\n+\n+\n+NOIPA char* strndup_a1_si (short n)\n+{\n+  return strndup (a1, n);\n+}\n+\n+NOIPA char* strndup_a1_i (int n)\n+{\n+  return strndup (a1, n);     // { dg-bogus \"\\\\\\[-Wstringop-overread\" }\n+}\n+\n+NOIPA char* strndup_a1_li (long n)\n+{\n+  return strndup (a1, n);     // { dg-bogus \"\\\\\\[-Wstringop-overread\" }\n+}\n+\n+NOIPA char* strndup_a1_lli (long long n)\n+{\n+  return strndup (a1, n);     // { dg-bogus \"\\\\\\[-Wstringop-overread\" }\n+}\n+\n+\n+NOIPA char* strndup_a1_usi (unsigned short n)\n+{\n+  return strndup (a1, n);\n+}\n+\n+NOIPA char* strndup_a1_ui (unsigned n)\n+{\n+  return strndup (a1, n);     // { dg-bogus \"\\\\\\[-Wstringop-overread\" }\n+}\n+\n+NOIPA char* strndup_a1_uli (unsigned long n)\n+{\n+  return strndup (a1, n);     // { dg-bogus \"\\\\\\[-Wstringop-overread\" }\n+}\n+\n+NOIPA char* strndup_a1_ulli (unsigned long long n)\n+{\n+  return strndup (a1, n);     // { dg-bogus \"\\\\\\[-Wstringop-overread\" }\n+}\n+\n+\n+NOIPA size_t strnlen_a0_si (short n)\n+{\n+  return strnlen (a0, n);\n+}\n+\n+NOIPA size_t strnlen_a0_i (int n)\n+{\n+  return strnlen (a0, n);     // { dg-bogus \"\\\\\\[-Wstringop-overread\" }\n+}\n+\n+NOIPA size_t strnlen_a0_li (long n)\n+{\n+  return strnlen (a0, n);     // { dg-bogus \"\\\\\\[-Wstringop-overread\" }\n+}\n+\n+NOIPA size_t strnlen_a0_lli (long long n)\n+{\n+  return strnlen (a0, n);     // { dg-bogus \"\\\\\\[-Wstringop-overread\" }\n+}\n+\n+\n+NOIPA size_t strnlen_a0_usi (unsigned short n)\n+{\n+  return strnlen (a0, n);\n+}\n+\n+NOIPA size_t strnlen_a0_ui (unsigned n)\n+{\n+  return strnlen (a0, n);     // { dg-bogus \"\\\\\\[-Wstringop-overread\" }\n+}\n+\n+NOIPA size_t strnlen_a0_uli (unsigned long n)\n+{\n+  return strnlen (a0, n);     // { dg-bogus \"\\\\\\[-Wstringop-overread\" }\n+}\n+\n+NOIPA size_t strnlen_a0_ulli (unsigned long long n)\n+{\n+  return strnlen (a0, n);     // { dg-bogus \"\\\\\\[-Wstringop-overread\" }\n+}\n+\n+\n+\n+NOIPA size_t strnlen_a1_si (short n)\n+{\n+  return strnlen (a1, n);\n+}\n+\n+NOIPA size_t strnlen_a1_i (int n)\n+{\n+  return strnlen (a1, n);     // { dg-bogus \"\\\\\\[-Wstringop-overread\" }\n+}\n+\n+NOIPA size_t strnlen_a1_li (long n)\n+{\n+  return strnlen (a1, n);     // { dg-bogus \"\\\\\\[-Wstringop-overread\" }\n+}\n+\n+NOIPA size_t strnlen_a1_lli (long long n)\n+{\n+  return strnlen (a1, n);     // { dg-bogus \"\\\\\\[-Wstringop-overread\" }\n+}\n+\n+\n+NOIPA size_t strnlen_a1_usi (unsigned short n)\n+{\n+  return strnlen (a1, n);\n+}\n+\n+NOIPA size_t strnlen_a1_ui (unsigned n)\n+{\n+  return strnlen (a1, n);     // { dg-bogus \"\\\\\\[-Wstringop-overread\" }\n+}\n+\n+NOIPA size_t strnlen_a1_uli (unsigned long n)\n+{\n+  return strnlen (a1, n);     // { dg-bogus \"\\\\\\[-Wstringop-overread\" }\n+}\n+\n+NOIPA size_t strnlen_a1_ulli (unsigned long long n)\n+{\n+  return strnlen (a1, n);     // { dg-bogus \"\\\\\\[-Wstringop-overread\" }\n+}"}]}