{"sha": "0ab409ed42980a740a408a48ec54d715358933d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGFiNDA5ZWQ0Mjk4MGE3NDBhNDA4YTQ4ZWM1NGQ3MTUzNTg5MzNkOQ==", "commit": {"author": {"name": "Michael Hayes", "email": "mhayes@redhat.com", "date": "2001-01-11T09:13:02Z"}, "committer": {"name": "Michael Hayes", "email": "m.hayes@gcc.gnu.org", "date": "2001-01-11T09:13:02Z"}, "message": "flow.c (flow_call_edges_add): New.\n\n\t* flow.c (flow_call_edges_add): New.\n\t* basic_block.h (flow_call_edges_add): New.\n\nFrom-SVN: r38899", "tree": {"sha": "26948d17a5ada6ec1335c582ada8ab1d0353f991", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26948d17a5ada6ec1335c582ada8ab1d0353f991"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ab409ed42980a740a408a48ec54d715358933d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ab409ed42980a740a408a48ec54d715358933d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ab409ed42980a740a408a48ec54d715358933d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ab409ed42980a740a408a48ec54d715358933d9/comments", "author": null, "committer": null, "parents": [{"sha": "9e96a929d06f9986bd1b273950a80a07c5203068", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e96a929d06f9986bd1b273950a80a07c5203068", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e96a929d06f9986bd1b273950a80a07c5203068"}], "stats": {"total": 75, "additions": 75, "deletions": 0}, "files": [{"sha": "35f1fe0f0902ffc405a9265326e1b05332461130", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ab409ed42980a740a408a48ec54d715358933d9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ab409ed42980a740a408a48ec54d715358933d9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0ab409ed42980a740a408a48ec54d715358933d9", "patch": "@@ -1,3 +1,8 @@\n+2001-01-11  Michael Hayes  <mhayes@redhat.com>\n+\n+\t* flow.c (flow_call_edges_add): New.\n+\t* basic_block.h (flow_call_edges_add): New.\n+\n 2001-01-11  J\"orn Rennecke <amylaar@redhat.com>\n \n \t* reload1.c (move2add_note_store): Update reg_set_luid even if"}, {"sha": "b0175464b3a10aea0d606b6df2277591e10dfe6d", "filename": "gcc/basic-block.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ab409ed42980a740a408a48ec54d715358933d9/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ab409ed42980a740a408a48ec54d715358933d9/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=0ab409ed42980a740a408a48ec54d715358933d9", "patch": "@@ -249,6 +249,7 @@ extern void commit_edge_insertions\tPARAMS ((void));\n extern void remove_fake_edges\t\tPARAMS ((void));\n extern void add_noreturn_fake_exit_edges\tPARAMS ((void));\n extern void connect_infinite_loops_to_exit\tPARAMS ((void));\n+extern int flow_call_edges_add \t\tPARAMS ((sbitmap));\n extern rtx flow_delete_insn\t\tPARAMS ((rtx));\n extern void flow_delete_insn_chain\tPARAMS ((rtx, rtx));\n extern void make_edge\t\t\tPARAMS ((sbitmap *, basic_block,"}, {"sha": "862d40f52148617ef85470ec5491c382c792b66b", "filename": "gcc/flow.c", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ab409ed42980a740a408a48ec54d715358933d9/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ab409ed42980a740a408a48ec54d715358933d9/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=0ab409ed42980a740a408a48ec54d715358933d9", "patch": "@@ -2011,6 +2011,75 @@ commit_edge_insertions ()\n       bb = BASIC_BLOCK (i);\n     }\n }\n+\n+/* Add fake edges to the function exit for any non constant calls in\n+   the bitmap of blocks specified by BLOCKS or to the whole CFG if\n+   BLOCKS is zero.  Return the nuber of blocks that were split.  */\n+\n+int\n+flow_call_edges_add (blocks)\n+     sbitmap blocks;\n+{\n+  int i;\n+  int blocks_split = 0;\n+  int bb_num = 0;\n+  basic_block *bbs;\n+\n+  /* Map bb indicies into basic block pointers since split_block\n+     will renumber the basic blocks.  */\n+\n+  bbs = xmalloc (n_basic_blocks * sizeof (*bbs));\n+\n+  if (! blocks)\n+    {\n+      for (i = 0; i < n_basic_blocks; i++)\n+\tbbs[bb_num++] = BASIC_BLOCK (i);\n+    }\n+  else\n+    {\n+      EXECUTE_IF_SET_IN_SBITMAP (blocks, 0, i, \n+      {\n+\tbbs[bb_num++] = BASIC_BLOCK (i);\n+      });\n+    }\n+\n+\n+  /* Now add fake edges to the function exit for any non constant\n+     calls since there is no way that we can determine if they will\n+     return or not...  */\n+\n+  for (i = 0; i < bb_num; i++)\n+    {\n+      basic_block bb = bbs[i];\n+      rtx insn;\n+      rtx prev_insn;\n+\n+      for (insn = bb->end; ; insn = prev_insn)\n+\t{\n+\t  prev_insn = PREV_INSN (insn);\n+\t  if (GET_CODE (insn) == CALL_INSN && ! CONST_CALL_P (insn))\n+\t    {\n+\t      edge e;\n+\n+\t      /* Note that the following may create a new basic block\n+\t\t and renumber the existing basic blocks.  */\n+\t      e = split_block (bb, insn);\n+\t      if (e)\n+\t\tblocks_split++;\n+\n+\t      make_edge (NULL, bb, EXIT_BLOCK_PTR, EDGE_FAKE);\n+\t    }\n+\t  if (insn == bb->head)\n+\t    break;\n+\t}\n+    }\n+\n+  if (blocks_split)\n+    verify_flow_info ();\n+\n+  free (bbs);\n+  return blocks_split;\n+}\n \f\n /* Delete all unreachable basic blocks.   */\n "}]}