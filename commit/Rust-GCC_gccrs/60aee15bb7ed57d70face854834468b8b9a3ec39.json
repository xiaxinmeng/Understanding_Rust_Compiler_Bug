{"sha": "60aee15bb7ed57d70face854834468b8b9a3ec39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjBhZWUxNWJiN2VkNTdkNzBmYWNlODU0ODM0NDY4YjhiOWEzZWMzOQ==", "commit": {"author": {"name": "Paul A. Clarke", "email": "pc@us.ibm.com", "date": "2021-06-29T14:23:39Z"}, "committer": {"name": "Paul A. Clarke", "email": "pc@us.ibm.com", "date": "2021-07-13T18:50:24Z"}, "message": "rs6000: Add tests for SSE4.1 \"test\" intrinsics\n\nCopy the test for _mm_testz_si128, _mm_testc_si128,\n_mm_testnzc_si128, _mm_test_all_ones, _mm_test_all_zeros,\n_mm_test_mix_ones_zeros from gcc/testsuite/gcc.target/i386.\n\n2021-07-13  Paul A. Clarke  <pc@us.ibm.com>\n\ngcc/testsuite\n\t* gcc.target/powerpc/sse4_1-ptest-1.c: Copy from\n\tgcc/testsuite/gcc.target/i386.", "tree": {"sha": "aebbcc2ad80ae03fe46b1ad1db1fbea07f91d657", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aebbcc2ad80ae03fe46b1ad1db1fbea07f91d657"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60aee15bb7ed57d70face854834468b8b9a3ec39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60aee15bb7ed57d70face854834468b8b9a3ec39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60aee15bb7ed57d70face854834468b8b9a3ec39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60aee15bb7ed57d70face854834468b8b9a3ec39/comments", "author": {"login": "ThinkOpenly", "id": 12301795, "node_id": "MDQ6VXNlcjEyMzAxNzk1", "avatar_url": "https://avatars.githubusercontent.com/u/12301795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThinkOpenly", "html_url": "https://github.com/ThinkOpenly", "followers_url": "https://api.github.com/users/ThinkOpenly/followers", "following_url": "https://api.github.com/users/ThinkOpenly/following{/other_user}", "gists_url": "https://api.github.com/users/ThinkOpenly/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThinkOpenly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThinkOpenly/subscriptions", "organizations_url": "https://api.github.com/users/ThinkOpenly/orgs", "repos_url": "https://api.github.com/users/ThinkOpenly/repos", "events_url": "https://api.github.com/users/ThinkOpenly/events{/privacy}", "received_events_url": "https://api.github.com/users/ThinkOpenly/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThinkOpenly", "id": 12301795, "node_id": "MDQ6VXNlcjEyMzAxNzk1", "avatar_url": "https://avatars.githubusercontent.com/u/12301795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThinkOpenly", "html_url": "https://github.com/ThinkOpenly", "followers_url": "https://api.github.com/users/ThinkOpenly/followers", "following_url": "https://api.github.com/users/ThinkOpenly/following{/other_user}", "gists_url": "https://api.github.com/users/ThinkOpenly/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThinkOpenly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThinkOpenly/subscriptions", "organizations_url": "https://api.github.com/users/ThinkOpenly/orgs", "repos_url": "https://api.github.com/users/ThinkOpenly/repos", "events_url": "https://api.github.com/users/ThinkOpenly/events{/privacy}", "received_events_url": "https://api.github.com/users/ThinkOpenly/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "acd4b9103c1a30c833de4eee31fb69c3ff13cd77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acd4b9103c1a30c833de4eee31fb69c3ff13cd77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acd4b9103c1a30c833de4eee31fb69c3ff13cd77"}], "stats": {"total": 117, "additions": 117, "deletions": 0}, "files": [{"sha": "69d13d57770dff36fc75a5d5bb46ca5b33fd6e17", "filename": "gcc/testsuite/gcc.target/powerpc/sse4_1-ptest-1.c", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60aee15bb7ed57d70face854834468b8b9a3ec39/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-ptest-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60aee15bb7ed57d70face854834468b8b9a3ec39/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-ptest-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-ptest-1.c?ref=60aee15bb7ed57d70face854834468b8b9a3ec39", "patch": "@@ -0,0 +1,117 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target p8vector_hw } */\n+/* { dg-options \"-O2 -mpower8-vector -Wno-psabi\" } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse4_1-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_1_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <smmintrin.h>\n+\n+static int\n+make_ptestz (__m128i m, __m128i v)\n+{\n+  union\n+    {\n+      __m128i x;\n+      unsigned char c[16];\n+    } val, mask;\n+  int i, z;\n+\n+  mask.x = m;\n+  val.x = v;\n+\n+  z = 1;\n+  for (i = 0; i < 16; i++)\n+    if ((mask.c[i] & val.c[i]))\n+      {\n+\tz = 0;\n+\tbreak;\n+      }\n+  return z;\n+}\n+\n+static int\n+make_ptestc (__m128i m, __m128i v)\n+{\n+  union\n+    {\n+      __m128i x;\n+      unsigned char c[16];\n+    } val, mask;\n+  int i, c;\n+\n+  mask.x = m;\n+  val.x = v;\n+\n+  c = 1;\n+  for (i = 0; i < 16; i++)\n+    if ((val.c[i] & ~mask.c[i]))\n+      {\n+\tc = 0;\n+\tbreak;\n+      }\n+  return c;\n+}\n+\n+static void\n+TEST (void)\n+{\n+  union\n+    {\n+      __m128i x;\n+      unsigned int i[4];\n+    } val[4];\n+  int i, j, l;\n+  int res[32];\n+\n+  val[0].i[0] = 0x11111111;\n+  val[0].i[1] = 0x00000000;\n+  val[0].i[2] = 0x00000000;\n+  val[0].i[3] = 0x11111111;\n+    \n+  val[1].i[0] = 0x00000000;\n+  val[1].i[1] = 0x11111111;\n+  val[1].i[2] = 0x11111111;\n+  val[1].i[3] = 0x00000000;\n+\n+  val[2].i[0] = 0;\n+  val[2].i[1] = 0;\n+  val[2].i[2] = 0;\n+  val[2].i[3] = 0;\n+\n+  val[3].i[0] = 0xffffffff;\n+  val[3].i[1] = 0xffffffff;\n+  val[3].i[2] = 0xffffffff;\n+  val[3].i[3] = 0xffffffff;\n+\n+  l = 0;\n+  for(i = 0; i < 4; i++)\n+    for(j = 0; j < 4; j++)\n+      {\n+\tres[l++] = _mm_testz_si128 (val[j].x, val[i].x);\n+\tres[l++] = _mm_testc_si128 (val[j].x, val[i].x);\n+      }\n+\n+  l = 0;\n+  for(i = 0; i < 4; i++)\n+    for(j = 0; j < 4; j++)\n+      {\n+\tif (res[l++] != make_ptestz (val[j].x, val[i].x))\n+\t  abort ();\n+\tif (res[l++] != make_ptestc (val[j].x, val[i].x))\n+\t  abort ();\n+      }\n+\n+  if (res[2] != _mm_testz_si128 (val[1].x, val[0].x))\n+    abort ();\n+\n+  if (res[3] != _mm_testc_si128 (val[1].x, val[0].x))\n+    abort ();\n+}"}]}