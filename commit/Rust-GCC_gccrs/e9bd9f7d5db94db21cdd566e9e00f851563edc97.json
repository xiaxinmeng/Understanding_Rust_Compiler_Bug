{"sha": "e9bd9f7d5db94db21cdd566e9e00f851563edc97", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTliZDlmN2Q1ZGI5NGRiMjFjZGQ1NjZlOWUwMGY4NTE1NjNlZGM5Nw==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-04-07T20:13:52Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-04-07T20:13:52Z"}, "message": "re PR fortran/31293 (Implicit character and array returning functions)\n\n2007-04-07  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/31293\n\t* symbol.c (gfc_check_function_type): New function.\n\t* gfortran.h : Add prototype for previous.\n\t* parse.c (parse_progunit): Call it after parsing specification\n\tstatements.\n\n2007-04-07  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/31293\n\t* gfortran.dg/interface_12.f90: New test.\n\nFrom-SVN: r123641", "tree": {"sha": "4952f685177a36049f5019f89ef57303fb8f5eab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4952f685177a36049f5019f89ef57303fb8f5eab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9bd9f7d5db94db21cdd566e9e00f851563edc97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9bd9f7d5db94db21cdd566e9e00f851563edc97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9bd9f7d5db94db21cdd566e9e00f851563edc97", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9bd9f7d5db94db21cdd566e9e00f851563edc97/comments", "author": null, "committer": null, "parents": [{"sha": "ca178f85a63290092282309bc58d624379f749b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca178f85a63290092282309bc58d624379f749b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca178f85a63290092282309bc58d624379f749b9"}], "stats": {"total": 141, "additions": 140, "deletions": 1}, "files": [{"sha": "e72aa0d7021112ed8eec8a8b2f13d1bdf3796323", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9bd9f7d5db94db21cdd566e9e00f851563edc97/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9bd9f7d5db94db21cdd566e9e00f851563edc97/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e9bd9f7d5db94db21cdd566e9e00f851563edc97", "patch": "@@ -1,3 +1,11 @@\n+2007-04-07  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/31293\n+\t* symbol.c (gfc_check_function_type): New function.\n+\t* gfortran.h : Add prototype for previous.\n+\t* parse.c (parse_progunit): Call it after parsing specification\n+\tstatements.\n+\n 2007-04-05  Paul Thomas  <pault@gcc.gnu.org>\r\n \r\n \tPR fortran/31483\r"}, {"sha": "e9c71cd45ace0f29ff34187cce7f03864c1db402", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9bd9f7d5db94db21cdd566e9e00f851563edc97/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9bd9f7d5db94db21cdd566e9e00f851563edc97/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=e9bd9f7d5db94db21cdd566e9e00f851563edc97", "patch": "@@ -483,7 +483,8 @@ typedef struct\n   /* Variable attributes.  */\n   unsigned allocatable:1, dimension:1, external:1, intrinsic:1,\n     optional:1, pointer:1, save:1, target:1, value:1, volatile_:1,\n-    dummy:1, result:1, assign:1, threadprivate:1, not_always_present:1;\n+    dummy:1, result:1, assign:1, threadprivate:1, not_always_present:1,\n+    implied_index:1;\n \n   unsigned data:1,\t\t/* Symbol is named in a DATA statement.  */\n     protected:1,\t\t/* Symbol has been marked as protected.  */\n@@ -1853,6 +1854,7 @@ void gfc_clear_new_implicit (void);\n try gfc_add_new_implicit_range (int, int);\n try gfc_merge_new_implicit (gfc_typespec *);\n void gfc_set_implicit_none (void);\n+void gfc_check_function_type (gfc_namespace *);\n \n gfc_typespec *gfc_get_default_type (gfc_symbol *, gfc_namespace *);\n try gfc_set_default_type (gfc_symbol *, int, gfc_namespace *);"}, {"sha": "9e47ea416e521417475331455f7c6331fac0523b", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9bd9f7d5db94db21cdd566e9e00f851563edc97/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9bd9f7d5db94db21cdd566e9e00f851563edc97/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=e9bd9f7d5db94db21cdd566e9e00f851563edc97", "patch": "@@ -2915,6 +2915,9 @@ parse_progunit (gfc_statement st)\n       break;\n     }\n \n+  if (gfc_current_state () == COMP_FUNCTION)\n+    gfc_check_function_type (gfc_current_ns);\n+\n loop:\n   for (;;)\n     {"}, {"sha": "ad9959564fac3b862c4913a33d6fb0d35fbe3b95", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9bd9f7d5db94db21cdd566e9e00f851563edc97/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9bd9f7d5db94db21cdd566e9e00f851563edc97/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=e9bd9f7d5db94db21cdd566e9e00f851563edc97", "patch": "@@ -253,6 +253,37 @@ gfc_set_default_type (gfc_symbol * sym, int error_flag, gfc_namespace * ns)\n }\n \n \n+/* This function is called from parse.c(parse_progunit) to check the\n+   type of the function is not implicitly typed in the host namespace\n+   and to implicitly type the function result, if necessary.  */\n+\n+void\n+gfc_check_function_type (gfc_namespace *ns)\n+{\n+  gfc_symbol *proc = ns->proc_name;\n+\n+  if (!proc->attr.contained || proc->result->attr.implicit_type)\n+    return;\n+\n+  if (proc->result->ts.type == BT_UNKNOWN)\n+    {\n+      if (gfc_set_default_type (proc->result, 0, gfc_current_ns)\n+\t\t== SUCCESS)\n+\t{\n+\t  if (proc->result != proc)\n+\t    proc->ts = proc->result->ts;\n+\t}\n+      else\n+\t{\n+\t  gfc_error (\"unable to implicitly type the function result \"\n+\t\t     \"'%s' at %L\", proc->result->name,\n+\t\t     &proc->result->declared_at);\n+\t  proc->result->attr.untyped = 1;\n+\t}\n+    }\n+}\n+\n+\n /******************** Symbol attribute stuff *********************/\n \n /* This is a generic conflict-checker.  We do this to avoid having a"}, {"sha": "2f7fe10d94bbbff23cef96fc7a212b59c3eb5795", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9bd9f7d5db94db21cdd566e9e00f851563edc97/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9bd9f7d5db94db21cdd566e9e00f851563edc97/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e9bd9f7d5db94db21cdd566e9e00f851563edc97", "patch": "@@ -1,3 +1,8 @@\n+2007-04-07  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/31293\n+\t* gfortran.dg/interface_12.f90: New test.\n+\n 2007-04-07  Bruce Korb  <bkorb@gnu.org>\n \n \t* gcc.dg/format/opt-6.c: New test."}, {"sha": "a45817dabb891b0df23dd5d04235371553eafb41", "filename": "gcc/testsuite/gfortran.dg/interface_12.f90", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9bd9f7d5db94db21cdd566e9e00f851563edc97/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_12.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9bd9f7d5db94db21cdd566e9e00f851563edc97/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_12.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_12.f90?ref=e9bd9f7d5db94db21cdd566e9e00f851563edc97", "patch": "@@ -0,0 +1,90 @@\n+! { dg-do run }\n+! Test the fix for PR31293.\n+!\n+! File: interface4.f90\n+! http://home.comcast.net/%7Ekmbtib/Fortran_stuff/interface4.f90\n+! Public domain 2004 James Van Buskirk\n+! Second attempt to actually create function with LEN\n+! given by specification expression via function name,\n+! and SIZE given by specification expression via\n+! result name.\n+\n+! g95 12/18/04: Error: Circular specification in variable 'r'.\n+! ISO/IEC 1539-1:1997(E) section 512.5.2.2:\n+! \"If RESULT is specified, the name of the result variable\n+! of the function is result-name, its characteristics\n+! (12.2.2) are those of the function result, and...\"\n+! Also from the same section:\n+! The type and type parameters (if any) of the result of the\n+! function subprogram may be specified by a type specification\n+! in the FUNCTION statement or by the name of the result variable\n+! appearing in a type statement in the declaration part of the\n+! function subprogram.  It shall not be specified both ways.\"\n+! Also in section 7.1.6.2:\n+! \"A restricted expression is one in which each operation is\n+! intrinsic and each primary is\n+! ...\n+! (7) A reference to an intrinsic function that is\n+! ...\n+!     (c) the character inquiry function LEN,\n+! ...\n+!     and where each primary of the function is\n+! ...\n+!     (b) a variable whose properties inquired about are not\n+!         (i)   dependent on the upper bound of the last\n+!               dimension of an assumed-shape array.\n+!         (ii)  defined by an expression that is not a\n+!               restricted expression\n+!         (iii) definable by an ALLOCATE or pointer\n+!               assignment statement.\"\n+! So I think there is no problem with the specification of\n+! the function result attributes; g95 flunks.\n+\n+! CVF 6.6C3: Error: This name does not have a type, and must\n+! have an explicit type. [R]\n+! Clearly R has a type here: the type and type parameters of\n+! the function result; CVF flunks.\n+\n+! LF95 5.70f: Type parameters or bounds of variable r may\n+! not be inquired.\n+! Again, the type parameters, though not the bounds, of\n+! variable r may in fact be inquired; LF95 flunks.\n+\n+module test1\n+   implicit none\n+   contains\n+      character(f (x)) function test2 (x) result(r)\n+         implicit integer (x)\n+         dimension r(modulo (len (r) - 1, 3) + 1)\n+         integer, intent(in) :: x\n+         interface\n+            pure function f (x)\n+               integer, intent(in) :: x\n+               integer f\n+            end function f\n+         end interface\n+         integer i\n+\n+         do i = 1, len (r)\n+            r(:)(i:i) = achar (mod (i, 32) + iachar ('@'))\n+         end do\n+      end function test2\n+end module test1\n+\n+program test\n+   use test1\n+   implicit none\n+   character(21) :: chr (3)\n+   chr = \"ABCDEFGHIJKLMNOPQRSTU\"\n+\n+   if (len (test2 (10)) .ne. 21) call abort ()\n+   if (any (test2 (10) .ne. chr)) call abort ()\n+end program test\n+\n+pure function f (x)\n+   integer, intent(in) :: x\n+   integer f\n+\n+   f = 2*x+1\n+end function f\n+! { dg-final { cleanup-modules \"test1\" } }"}]}