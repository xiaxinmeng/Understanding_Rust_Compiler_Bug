{"sha": "06c86a4f210c76a157512a2963e6c31302d161cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDZjODZhNGYyMTBjNzZhMTU3NTEyYTI5NjNlNmMzMTMwMmQxNjFjYg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-04-26T20:16:21Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-04-26T20:16:21Z"}, "message": "libstdc++: Fix socket option classes\n\nThis fixes some flaws in the socket option types defined in\nnet::socket_base:\n\n- The constructors were not noexcept.\n- The __sockopt_base<T>::value() member function was present\n  unconditionally (so was defined for socket_base::linger which is\n  incorrect).\n- The __socket_crtp<C, T>::operator=(T) assignment operator was not\n  noexcept, and was hidden in the derived classes.\n\nAlso:\n\n- Use class instead of struct for the socket option types.\n- Define the _S_level and _S_name constants as private.\n- Declare the __socket_crtp base as a friend.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/experimental/bits/net.h (__socket_base): Add\n\tbool template parameter to allow BooleanSocketOption and\n\tIntegerSocketOption to have different __socket_base<int>\n\tbase classes.\n\t(__socket_base<bool>): Adjust base class.\n\t(__socket_base<int>): Add partial specialization.\n\t(__socket_crtp::operator=(_Tp)): Add noexcept-specifier.\n\t* include/experimental/socket (socket_base::broadcast)\n\t(socket_base::debug, socket_base::do_not_route)\n\t(socket_base::keep_alive, socket_base::linger)\n\t(socket_base::out_of_band_inline)\n\t(socket_base::receive_buffer_size)\n\t(socket_base::receive_low_watermark)\n\t(socket_base::reuse_address, socket_base::send_buffer_size)\n\t(socket_base::send_low_watermark): Add using-declaration for\n\t__socket_crtp::operator=(_Tp).\n\t* testsuite/experimental/net/socket/socket_base.cc: Check\n\tproperties of socket option types.", "tree": {"sha": "53e2126bff13e0a82f5f78dbe9018a11831c6bf2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53e2126bff13e0a82f5f78dbe9018a11831c6bf2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06c86a4f210c76a157512a2963e6c31302d161cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06c86a4f210c76a157512a2963e6c31302d161cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06c86a4f210c76a157512a2963e6c31302d161cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06c86a4f210c76a157512a2963e6c31302d161cb/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49adc066729bda093b0658e3926bbf64cd4628b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49adc066729bda093b0658e3926bbf64cd4628b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49adc066729bda093b0658e3926bbf64cd4628b3"}], "stats": {"total": 249, "additions": 228, "deletions": 21}, "files": [{"sha": "3087f8957daee63cb5b21ff273bdad886a3f25d4", "filename": "libstdc++-v3/include/experimental/bits/net.h", "status": "modified", "additions": 26, "deletions": 9, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06c86a4f210c76a157512a2963e6c31302d161cb/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fnet.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06c86a4f210c76a157512a2963e6c31302d161cb/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fnet.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fnet.h?ref=06c86a4f210c76a157512a2963e6c31302d161cb", "patch": "@@ -95,15 +95,20 @@ inline namespace v1\n \n   /// @endcond\n \n-  // Base class for types meeting IntegerSocketOption requirements.\n-  template<typename _Tp>\n+  // Base class for types meeting both GettableSocketOption and\n+  // SettableSocketOption requirements.\n+  // The bool parameter allows __sockopt_base<bool> to have a\n+  // __sockopt_base<int, B> base class (so that its _M_value is an int)\n+  // but to have that be a distinct type from __sockopt_base<int>.\n+  template<typename _Tp, bool = true>\n     struct __sockopt_base\n     {\n       __sockopt_base() = default;\n \n-      explicit __sockopt_base(int __val) : _M_value(__val) { }\n-\n-      int value() const noexcept { return _M_value; }\n+      explicit\n+      __sockopt_base(_Tp __val) noexcept(noexcept(_Tp(std::declval<_Tp&>())))\n+      : _M_value(__val)\n+      { }\n \n       template<typename _Protocol>\n \tvoid*\n@@ -134,24 +139,36 @@ inline namespace v1\n \n   // Base class for types meeting BooleanSocketOption requirements.\n   template<>\n-    struct __sockopt_base<bool> : __sockopt_base<int>\n+    struct __sockopt_base<bool> : __sockopt_base<int, false>\n     {\n       __sockopt_base() = default;\n \n-      explicit __sockopt_base(bool __val) : __sockopt_base<int>(__val) { }\n+      explicit\n+      __sockopt_base(bool __val) noexcept\n+      : __sockopt_base<int, false>(__val)\n+      { }\n \n-      bool value() const noexcept { return __sockopt_base<int>::_M_value; }\n+      bool value() const noexcept { return this->_M_value; }\n       explicit operator bool() const noexcept { return value(); }\n       bool operator!() const noexcept { return !value(); }\n     };\n \n+  // Base class for types meeting IntegerSocketOption requirements.\n+  template<>\n+    struct __sockopt_base<int> : __sockopt_base<int, false>\n+    {\n+      using __sockopt_base<int, false>::__sockopt_base;\n+\n+      int value() const noexcept { return this->_M_value; }\n+    };\n+\n   template<typename _Derived, typename _Tp = int>\n     struct __sockopt_crtp : __sockopt_base<_Tp>\n     {\n       using __sockopt_base<_Tp>::__sockopt_base;\n \n       _Derived&\n-      operator=(_Tp __value)\n+      operator=(_Tp __value) noexcept(noexcept(__value = __value))\n       {\n \t__sockopt_base<_Tp>::_M_value = __value;\n \treturn static_cast<_Derived&>(*this);"}, {"sha": "538dc78e72c3b3899cb2d273aed8c60ca92ebc44", "filename": "libstdc++-v3/include/experimental/socket", "status": "modified", "additions": 55, "deletions": 11, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06c86a4f210c76a157512a2963e6c31302d161cb/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fsocket", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06c86a4f210c76a157512a2963e6c31302d161cb/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fsocket", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fsocket?ref=06c86a4f210c76a157512a2963e6c31302d161cb", "patch": "@@ -138,41 +138,59 @@ inline namespace v1\n   {\n   public:\n #ifdef _GLIBCXX_HAVE_SYS_SOCKET_H\n-    struct broadcast : __sockopt_crtp<broadcast, bool>\n+    class broadcast : public __sockopt_crtp<broadcast, bool>\n     {\n+    public:\n       using __sockopt_crtp::__sockopt_crtp;\n+      using __sockopt_crtp::operator=;\n \n+    private:\n+      friend __sockopt_crtp<broadcast, bool>;\n       static const int _S_level = SOL_SOCKET;\n       static const int _S_name = SO_BROADCAST;\n     };\n \n-    struct debug : __sockopt_crtp<debug, bool>\n+    class debug : public __sockopt_crtp<debug, bool>\n     {\n+    public:\n+      friend __sockopt_crtp<debug, bool>;\n       using __sockopt_crtp::__sockopt_crtp;\n+      using __sockopt_crtp::operator=;\n \n+    private:\n       static const int _S_level = SOL_SOCKET;\n       static const int _S_name = SO_DEBUG;\n     };\n \n-    struct do_not_route : __sockopt_crtp<do_not_route, bool>\n+    class do_not_route : public __sockopt_crtp<do_not_route, bool>\n     {\n+    public:\n       using __sockopt_crtp::__sockopt_crtp;\n+      using __sockopt_crtp::operator=;\n \n+    private:\n+      friend __sockopt_crtp<do_not_route, bool>;\n       static const int _S_level = SOL_SOCKET;\n       static const int _S_name = SO_DONTROUTE;\n     };\n \n-    struct keep_alive : __sockopt_crtp<keep_alive, bool>\n+    class keep_alive : public __sockopt_crtp<keep_alive, bool>\n     {\n+    public:\n       using __sockopt_crtp::__sockopt_crtp;\n+      using __sockopt_crtp::operator=;\n \n+    private:\n+      friend __sockopt_crtp<keep_alive, bool>;\n       static const int _S_level = SOL_SOCKET;\n       static const int _S_name = SO_KEEPALIVE;\n     };\n \n-    struct linger : __sockopt_crtp<linger, ::linger>\n+    class linger : public __sockopt_crtp<linger, ::linger>\n     {\n+    public:\n       using __sockopt_crtp::__sockopt_crtp;\n+      using __sockopt_crtp::operator=;\n \n       linger() noexcept = default;\n \n@@ -198,54 +216,80 @@ inline namespace v1\n       timeout(chrono::seconds __t) noexcept\n       { _M_value.l_linger = __t.count(); }\n \n+    private:\n+      friend __sockopt_crtp<linger, ::linger>;\n       static const int _S_level = SOL_SOCKET;\n       static const int _S_name = SO_LINGER;\n     };\n \n-    struct out_of_band_inline : __sockopt_crtp<out_of_band_inline, bool>\n+    class out_of_band_inline : public __sockopt_crtp<out_of_band_inline, bool>\n     {\n+    public:\n       using __sockopt_crtp::__sockopt_crtp;\n+      using __sockopt_crtp::operator=;\n \n+    private:\n+      friend __sockopt_crtp<out_of_band_inline, bool>;\n       static const int _S_level = SOL_SOCKET;\n       static const int _S_name = SO_OOBINLINE;\n     };\n \n-    struct receive_buffer_size : __sockopt_crtp<receive_buffer_size>\n+    class receive_buffer_size : public __sockopt_crtp<receive_buffer_size>\n     {\n+    public:\n       using __sockopt_crtp::__sockopt_crtp;\n+      using __sockopt_crtp::operator=;\n \n+    private:\n+      friend __sockopt_crtp<receive_buffer_size>;\n       static const int _S_level = SOL_SOCKET;\n       static const int _S_name = SO_RCVBUF;\n     };\n \n-    struct receive_low_watermark : __sockopt_crtp<receive_low_watermark>\n+    class receive_low_watermark : public __sockopt_crtp<receive_low_watermark>\n     {\n+    public:\n       using __sockopt_crtp::__sockopt_crtp;\n+      using __sockopt_crtp::operator=;\n \n+    private:\n+      friend __sockopt_crtp<receive_low_watermark>;\n       static const int _S_level = SOL_SOCKET;\n       static const int _S_name = SO_RCVLOWAT;\n     };\n \n-    struct reuse_address : __sockopt_crtp<reuse_address, bool>\n+    class reuse_address : public __sockopt_crtp<reuse_address, bool>\n     {\n+    public:\n       using __sockopt_crtp::__sockopt_crtp;\n+      using __sockopt_crtp::operator=;\n \n+    private:\n+      friend __sockopt_crtp<reuse_address, bool>;\n       static const int _S_level = SOL_SOCKET;\n       static const int _S_name = SO_REUSEADDR;\n     };\n \n-    struct send_buffer_size : __sockopt_crtp<send_buffer_size>\n+    class send_buffer_size : public __sockopt_crtp<send_buffer_size>\n     {\n+    public:\n       using __sockopt_crtp::__sockopt_crtp;\n+      using __sockopt_crtp::operator=;\n \n+    private:\n+      friend __sockopt_crtp<send_buffer_size>;\n       static const int _S_level = SOL_SOCKET;\n       static const int _S_name = SO_SNDBUF;\n     };\n \n-    struct send_low_watermark : __sockopt_crtp<send_low_watermark>\n+    class send_low_watermark : public __sockopt_crtp<send_low_watermark>\n     {\n+    public:\n       using __sockopt_crtp::__sockopt_crtp;\n+      using __sockopt_crtp::operator=;\n \n+    private:\n+      friend __sockopt_crtp<send_low_watermark>;\n       static const int _S_level = SOL_SOCKET;\n       static const int _S_name = SO_SNDLOWAT;\n     };"}, {"sha": "95cd8151840e36c954a9b328be2dc1bec5a16a89", "filename": "libstdc++-v3/testsuite/experimental/net/socket/socket_base.cc", "status": "modified", "additions": 147, "deletions": 1, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06c86a4f210c76a157512a2963e6c31302d161cb/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Fsocket%2Fsocket_base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06c86a4f210c76a157512a2963e6c31302d161cb/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Fsocket%2Fsocket_base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Fsocket%2Fsocket_base.cc?ref=06c86a4f210c76a157512a2963e6c31302d161cb", "patch": "@@ -15,14 +15,156 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-do compile { target c++14 } }\n+// { dg-do run { target c++14 } }\n \n #include <experimental/socket>\n #include <testsuite_common_types.h>\n+#include <testsuite_hooks.h>\n \n using S = std::experimental::net::socket_base;\n using namespace std;\n \n+// Dummy protocol\n+struct P\n+{\n+  struct endpoint\n+  {\n+    using protocol_type = P;\n+    P protocol() const;\n+  };\n+};\n+\n+static_assert( ! is_default_constructible<S>(), \"\" );\n+static_assert( ! is_destructible<S>(), \"\" );\n+\n+template<typename C, typename T>\n+void check_gettable_sockopt()\n+{\n+  P p;\n+  static_assert( is_same<decltype(declval<const C&>().level(p)), int>(), \"\" );\n+  static_assert( noexcept(declval<const C&>().level(p)), \"\" );\n+\n+  static_assert( is_same<decltype(declval<const C&>().name(p)), int>(), \"\" );\n+  static_assert( noexcept(declval<const C&>().name(p)), \"\" );\n+\n+  static_assert( is_same<decltype(declval<C&>().data(p)), void*>(), \"\" );\n+  static_assert( noexcept(declval<C&>().data(p)), \"\" );\n+\n+  static_assert( is_same<decltype(declval<const C&>().size(p)), size_t>(), \"\" );\n+  static_assert( noexcept(declval<const C&>().size(p)), \"\" );\n+\n+  static_assert( is_same<decltype(declval<C&>().resize(p, 0)), void>(), \"\" );\n+  static_assert( ! noexcept(declval<C&>().resize(p, 0)), \"\" );\n+\n+  C opt;\n+  VERIFY(opt.size(p) == sizeof(T));\n+}\n+\n+template<typename C, typename T>\n+void check_settable_sockopt()\n+{\n+  P p;\n+  static_assert( is_same<decltype(declval<const C&>().level(p)), int>(), \"\" );\n+  static_assert( noexcept(declval<const C&>().level(p)), \"\" );\n+\n+  static_assert( is_same<decltype(declval<const C&>().name(p)), int>(), \"\" );\n+  static_assert( noexcept(declval<const C&>().name(p)), \"\" );\n+\n+  static_assert( is_same<decltype(declval<const C&>().data(p)), const void*>(), \"\" );\n+  static_assert( noexcept(declval<const C&>().data(p)), \"\" );\n+\n+  static_assert( is_same<decltype(declval<C&>().size(p)), size_t>(), \"\" );\n+  static_assert( noexcept(declval<C&>().size(p)), \"\" );\n+\n+  C opt;\n+  VERIFY(opt.size(p) == sizeof(T));\n+}\n+\n+template<typename C, typename T = int>\n+void check_boolean_sockopt()\n+{\n+  check_gettable_sockopt<C, T>();\n+  check_settable_sockopt<C, T>();\n+\n+  static_assert( is_destructible<C>(), \"\" );\n+  static_assert( is_nothrow_default_constructible<C>(), \"\" );\n+  static_assert( is_nothrow_copy_constructible<C>(), \"\" );\n+  static_assert( is_nothrow_copy_assignable<C>(), \"\" );\n+\n+  static_assert( is_nothrow_constructible<C, bool>(), \"\" );\n+  static_assert( is_nothrow_assignable<C&, bool>(), \"\" );\n+\n+  static_assert( is_same<decltype(declval<const C&>().value()), bool>(), \"\" );\n+  static_assert( noexcept(declval<const C&>().value()), \"\" );\n+\n+  static_assert( is_same<decltype(static_cast<bool>(declval<const C&>())), bool>(), \"\" );\n+  static_assert( noexcept(static_cast<bool>(declval<const C&>())), \"\" );\n+\n+  static_assert( is_same<decltype(!declval<const C&>()), bool>(), \"\" );\n+  static_assert( noexcept(!declval<const C&>()), \"\" );\n+}\n+\n+template<typename C, typename T = int>\n+void check_integer_sockopt()\n+{\n+  check_gettable_sockopt<C, T>();\n+  check_settable_sockopt<C, T>();\n+\n+  static_assert( is_destructible<C>(), \"\" );\n+  static_assert( is_nothrow_default_constructible<C>(), \"\" );\n+  static_assert( is_nothrow_copy_constructible<C>(), \"\" );\n+  static_assert( is_nothrow_copy_assignable<C>(), \"\" );\n+\n+  static_assert( is_nothrow_constructible<C, int>(), \"\" );\n+  static_assert( is_nothrow_assignable<C&, int>(), \"\" );\n+\n+  static_assert( is_same<decltype(declval<const C&>().value()), int>(), \"\" );\n+  static_assert( noexcept(declval<const C&>().value()), \"\" );\n+}\n+\n+void test_option_types()\n+{\n+  check_boolean_sockopt<S::broadcast>();\n+\n+  check_boolean_sockopt<S::debug>();\n+\n+  check_boolean_sockopt<S::do_not_route>();\n+\n+  check_boolean_sockopt<S::keep_alive>();\n+\n+  check_gettable_sockopt<S::linger, ::linger>();\n+  check_settable_sockopt<S::linger, ::linger>();\n+  static_assert( is_destructible<S::linger>(), \"\" );\n+  static_assert( is_nothrow_default_constructible<S::linger>(), \"\" );\n+  static_assert( is_nothrow_copy_constructible<S::linger>(), \"\" );\n+  static_assert( is_nothrow_copy_assignable<S::linger>(), \"\" );\n+  static_assert( is_nothrow_constructible<S::linger, bool, chrono::seconds>(), \"\" );\n+\n+  static_assert( is_same<decltype(declval<const S::linger&>().enabled()), bool>(), \"\" );\n+  static_assert( noexcept(declval<const S::linger&>().enabled()), \"\" );\n+\n+  static_assert( is_void<decltype(declval<S::linger&>().enabled(true))>(), \"\" );\n+  static_assert( noexcept(declval<S::linger&>().enabled(true)), \"\" );\n+\n+  static_assert( is_same<decltype(declval<const S::linger&>().timeout()), chrono::seconds>(), \"\" );\n+  static_assert( noexcept(declval<const S::linger&>().timeout()), \"\" );\n+\n+  static_assert( is_void<decltype(declval<S::linger&>().timeout(chrono::seconds()))>(), \"\" );\n+  static_assert( noexcept(declval<S::linger&>().timeout(chrono::seconds())), \"\" );\n+\n+  check_boolean_sockopt<S::out_of_band_inline>();\n+\n+  check_integer_sockopt<S::receive_buffer_size>();\n+\n+  check_integer_sockopt<S::receive_low_watermark>();\n+\n+  check_boolean_sockopt<S::reuse_address>();\n+\n+  check_integer_sockopt<S::send_buffer_size>();\n+\n+  check_integer_sockopt<S::send_low_watermark>();\n+}\n+\n void test_constants()\n {\n   static_assert( is_enum<S::shutdown_type>::value, \"\" );\n@@ -43,3 +185,7 @@ void test_constants()\n   static_assert( is_same<decltype(m), const int*>::value, \"\" );\n }\n \n+int main()\n+{\n+  test_option_types();\n+}"}]}