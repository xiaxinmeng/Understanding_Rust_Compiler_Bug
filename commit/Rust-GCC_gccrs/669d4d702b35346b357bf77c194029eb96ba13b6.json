{"sha": "669d4d702b35346b357bf77c194029eb96ba13b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjY5ZDRkNzAyYjM1MzQ2YjM1N2JmNzdjMTk0MDI5ZWI5NmJhMTNiNg==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-08-14T17:59:03Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-08-14T17:59:03Z"}, "message": "re PR target/52933 (SH Target: Use div0s for integer sign comparisons)\n\n\tPR target/52933\n\t* config/sh/sh.md (cmp_div0s_0, cmp_div0s_1, *cmp_div0s_0,\n\t*cmp_div0s_1, *cbranch_div0s, *movsicc_div0s): New insns.\n\t* config/sh/sh.c (sh_rtx_costs): Handle div0s patterns.\n\n\tPR target/52933\n\t* gcc.target/sh/pr52933-1.c: New.\n\t* gcc.target/sh/pr52933-2.c: New.\n\nFrom-SVN: r190396", "tree": {"sha": "629b7e509bd0dbb34c8e9c2ec44996dc9d68abba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/629b7e509bd0dbb34c8e9c2ec44996dc9d68abba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/669d4d702b35346b357bf77c194029eb96ba13b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/669d4d702b35346b357bf77c194029eb96ba13b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/669d4d702b35346b357bf77c194029eb96ba13b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/669d4d702b35346b357bf77c194029eb96ba13b6/comments", "author": null, "committer": null, "parents": [{"sha": "24c18ad8f18bc0f02ce6c7d85e1f38f7d8760925", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24c18ad8f18bc0f02ce6c7d85e1f38f7d8760925", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24c18ad8f18bc0f02ce6c7d85e1f38f7d8760925"}], "stats": {"total": 340, "additions": 339, "deletions": 1}, "files": [{"sha": "4f3aa1c111c6e49686de62e431354c15481d3e84", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/669d4d702b35346b357bf77c194029eb96ba13b6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/669d4d702b35346b357bf77c194029eb96ba13b6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=669d4d702b35346b357bf77c194029eb96ba13b6", "patch": "@@ -1,3 +1,10 @@\n+2012-08-14  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/52933\n+\t* config/sh/sh.md (cmp_div0s_0, cmp_div0s_1, *cmp_div0s_0,\n+\t*cmp_div0s_1, *cbranch_div0s, *movsicc_div0s): New insns.\n+\t* config/sh/sh.c (sh_rtx_costs): Handle div0s patterns.\n+\n 2012-08-14  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/50751"}, {"sha": "263ea3a0d0243606a3f4ba0a645ba1447f736e3e", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/669d4d702b35346b357bf77c194029eb96ba13b6/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/669d4d702b35346b357bf77c194029eb96ba13b6/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=669d4d702b35346b357bf77c194029eb96ba13b6", "patch": "@@ -3186,9 +3186,33 @@ sh_rtx_costs (rtx x, int code, int outer_code, int opno ATTRIBUTE_UNUSED,\n       *total = COSTS_N_INSNS (multcosts (x));\n       return true;\n \n+    case LT:\n+    case GE:\n+      /* div0s sign comparison.  */\n+      if (GET_CODE (XEXP (x, 0)) == XOR\n+\t  && REG_P ((XEXP (XEXP (x, 0), 0)))\n+\t  && REG_P ((XEXP (XEXP (x, 0), 1)))\n+\t  && satisfies_constraint_Z (XEXP (x, 1)))\n+\t{\n+\t  *total = COSTS_N_INSNS (1);\n+\t  return true;\n+\t}\n+      else\n+\treturn false;\n+\n+    case LSHIFTRT:\n+      /* div0s sign comparison.  */\n+      if (GET_CODE (XEXP (x, 0)) == XOR\n+\t  && REG_P ((XEXP (XEXP (x, 0), 0)))\n+\t  && REG_P ((XEXP (XEXP (x, 0), 1)))\n+\t  && CONST_INT_P (XEXP (x, 1)) && INTVAL (XEXP (x, 1)) == 31)\n+\t{\n+\t  *total = COSTS_N_INSNS (1);\n+\t  return true;\n+\t}\n+      /* Fall through to shiftcosts.  */\n     case ASHIFT:\n     case ASHIFTRT:\n-    case LSHIFTRT:\n       {\n \tint cost = shiftcosts (x);\n \tif (cost < 0)"}, {"sha": "5d6fc84a3a7a82f123dda8094a12efaf9d399aba", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/669d4d702b35346b357bf77c194029eb96ba13b6/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/669d4d702b35346b357bf77c194029eb96ba13b6/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=669d4d702b35346b357bf77c194029eb96ba13b6", "patch": "@@ -801,6 +801,70 @@\n   \"cmp/pl\t%0\"\n    [(set_attr \"type\" \"mt_group\")])\n \n+;; Some integer sign comparison patterns can be realized with the div0s insn.\n+;;\tdiv0s\tRm,Rn\t\tT = (Rm >> 31) ^ (Rn >> 31)\n+(define_insn \"cmp_div0s_0\"\n+  [(set (reg:SI T_REG)\n+\t(lshiftrt:SI (xor:SI (match_operand:SI 0 \"arith_reg_operand\" \"%r\")\n+\t\t\t     (match_operand:SI 1 \"arith_reg_operand\" \"r\"))\n+\t\t     (const_int 31)))]\n+  \"TARGET_SH1\"\n+  \"div0s\t%0,%1\"\n+  [(set_attr \"type\" \"arith\")])\n+\n+(define_insn \"cmp_div0s_1\"\n+  [(set (reg:SI T_REG)\n+\t(lt:SI (xor:SI (match_operand:SI 0 \"arith_reg_operand\" \"%r\")\n+\t\t       (match_operand:SI 1 \"arith_reg_operand\" \"r\"))\n+\t       (const_int 0)))]\n+  \"TARGET_SH1\"\n+  \"div0s\t%0,%1\"\n+  [(set_attr \"type\" \"arith\")])\n+\n+(define_insn_and_split \"*cmp_div0s_0\"\n+  [(set (match_operand:SI 0 \"arith_reg_dest\" \"\")\n+\t(lshiftrt:SI (xor:SI (match_operand:SI 1 \"arith_reg_operand\" \"\")\n+\t\t\t     (match_operand:SI 2 \"arith_reg_operand\" \"\"))\n+\t\t     (const_int 31)))\n+   (clobber (reg:SI T_REG))]\n+  \"TARGET_SH1\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (reg:SI T_REG)\n+\t(lshiftrt:SI (xor:SI (match_dup 1) (match_dup 2)) (const_int 31)))\n+   (set (match_dup 0) (reg:SI T_REG))])\n+\n+(define_insn_and_split \"*cmp_div0s_1\"\n+  [(set (match_operand:SI 0 \"arith_reg_dest\" \"\")\n+\t(ge:SI (xor:SI (match_operand:SI 1 \"arith_reg_operand\" \"\")\n+\t\t       (match_operand:SI 2 \"arith_reg_operand\" \"\"))\n+\t       (const_int 0)))\n+   (clobber (reg:SI T_REG))]\n+  \"TARGET_SH1\"\n+  \"#\"\n+  \"&& can_create_pseudo_p ()\"\n+  [(const_int 0)]\n+;; We have to go through the movnegt expander here which will handle the\n+;; SH2A vs non-SH2A cases.\n+{\n+  emit_insn (gen_cmp_div0s_1 (operands[1], operands[2]));\n+  emit_insn (gen_movnegt (operands[0], get_t_reg_rtx ()));\n+  DONE;\n+})\n+\n+(define_insn_and_split \"*cmp_div0s_1\"\n+  [(set (reg:SI T_REG)\n+\t(ge:SI (xor:SI (match_operand:SI 0 \"arith_reg_operand\" \"\")\n+\t\t       (match_operand:SI 1 \"arith_reg_operand\" \"\"))\n+\t       (const_int 0)))]\n+  \"TARGET_SH1\"\n+  \"#\"\n+  \"&& can_create_pseudo_p ()\"\n+  [(set (reg:SI T_REG) (lt:SI (xor:SI (match_dup 0) (match_dup 1))\n+\t\t\t      (const_int 0)))\n+   (set (reg:SI T_REG) (xor:SI (reg:SI T_REG) (const_int 1)))])\n+\n+\n ;; -------------------------------------------------------------------------\n ;; SImode compare and branch\n ;; -------------------------------------------------------------------------\n@@ -918,6 +982,63 @@\n \t\t\t   (label_ref (match_dup 2))\n \t\t\t   (pc)))])\n \n+;; Compare and branch combine patterns for div0s comparisons.\n+(define_insn_and_split \"*cbranch_div0s\"\n+  [(set (pc)\n+\t(if_then_else (lt (xor:SI (match_operand:SI 0 \"arith_reg_operand\" \"\")\n+\t\t\t\t  (match_operand:SI 1 \"arith_reg_operand\" \"\"))\n+\t\t\t  (const_int 0))\n+\t\t      (label_ref (match_operand 2))\n+\t\t      (pc)))\n+   (clobber (reg:SI T_REG))]\n+  \"TARGET_SH1\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (reg:SI T_REG)\n+\t(lt:SI (xor:SI (match_dup 0) (match_dup 1)) (const_int 0)))\n+   (set (pc)\n+\t(if_then_else (ne (reg:SI T_REG) (const_int 0))\n+\t\t      (label_ref (match_dup 2))\n+\t\t      (pc)))])\n+\n+(define_insn_and_split \"*cbranch_div0s\"\n+  [(set (pc)\n+\t(if_then_else (ge (xor:SI (match_operand:SI 0 \"arith_reg_operand\" \"\")\n+\t\t\t\t  (match_operand:SI 1 \"arith_reg_operand\" \"\"))\n+\t\t\t  (const_int 0))\n+\t\t      (label_ref (match_operand 2))\n+\t\t      (pc)))\n+   (clobber (reg:SI T_REG))]\n+  \"TARGET_SH1\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (reg:SI T_REG)\n+\t(lt:SI (xor:SI (match_dup 0) (match_dup 1)) (const_int 0)))\n+   (set (pc)\n+\t(if_then_else (eq (reg:SI T_REG) (const_int 0))\n+\t\t      (label_ref (match_dup 2))\n+\t\t      (pc)))])\n+\n+;; Conditional move combine pattern for div0s comparisons.\n+;; This is used when TARGET_PRETEND_CMOVE is in effect.\n+(define_insn_and_split \"*movsicc_div0s\"\n+  [(set (match_operand:SI 0 \"arith_reg_dest\" \"\")\n+\t(if_then_else:SI (ge (xor:SI (match_operand:SI 1 \"arith_reg_operand\" \"\")\n+\t\t\t\t     (match_operand:SI 2 \"arith_reg_operand\" \"\"))\n+\t\t\t     (const_int 0))\n+\t\t\t (match_operand:SI 3 \"arith_reg_operand\" \"\")\n+\t\t\t (match_operand:SI 4 \"general_movsrc_operand\" \"\")))\n+   (clobber (reg:SI T_REG))]\n+  \"TARGET_PRETEND_CMOVE\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (reg:SI T_REG) (lt:SI (xor:SI (match_dup 1) (match_dup 2))\n+\t\t\t      (const_int 0)))\n+   (set (match_dup 0)\n+\t(if_then_else (ne (reg:SI T_REG) (const_int 0))\n+\t\t      (match_dup 4)\n+\t\t      (match_dup 3)))])\n+\n ;; -------------------------------------------------------------------------\n ;; SImode unsigned integer comparisons\n ;; -------------------------------------------------------------------------"}, {"sha": "d00816e0246e60e929d19e759ac24b9dfb5e18a2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/669d4d702b35346b357bf77c194029eb96ba13b6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/669d4d702b35346b357bf77c194029eb96ba13b6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=669d4d702b35346b357bf77c194029eb96ba13b6", "patch": "@@ -1,3 +1,9 @@\n+2012-08-14  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/52933\n+\t* gcc.target/sh/pr52933-1.c: New.\n+\t* gcc.target/sh/pr52933-2.c: New.\n+\n 2012-08-14  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/50751"}, {"sha": "037f916f34f776d35ff1748cc47430ddf4244282", "filename": "gcc/testsuite/gcc.target/sh/pr52933-1.c", "status": "added", "additions": 168, "deletions": 0, "changes": 168, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/669d4d702b35346b357bf77c194029eb96ba13b6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52933-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/669d4d702b35346b357bf77c194029eb96ba13b6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52933-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52933-1.c?ref=669d4d702b35346b357bf77c194029eb96ba13b6", "patch": "@@ -0,0 +1,168 @@\n+/* Check that the div0s instruction is used for integer sign comparisons.\n+   Each test case is expected to emit at least one div0s insn.\n+   Problems when combining the div0s comparison result with surrounding\n+   logic usually show up as redundant tst insns.  */\n+/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\" } { \"\" } } */\n+/* { dg-final { scan-assembler-times \"div0s\" 25 } } */\n+/* { dg-final { scan-assembler-not \"tst\" } } */\n+\n+typedef unsigned char bool;\n+\n+int other_func_a (int, int);\n+int other_func_b (int, int);\n+\n+bool\n+test_00 (int a, int b)\n+{\n+  return (a ^ b) >= 0;\n+}\n+\n+bool\n+test_01 (int a, int b)\n+{\n+  return (a ^ b) < 0;\n+}\n+\n+int\n+test_02 (int a, int b, int c, int d)\n+{\n+  if ((a ^ b) < 0)\n+    return other_func_a (a, c);\n+  else\n+    return other_func_b (d, b);\n+}\n+\n+int\n+test_03 (int a, int b, int c, int d)\n+{\n+  if ((a ^ b) >= 0)\n+    return other_func_a (a, c);\n+  else\n+    return other_func_b (d, b);\n+}\n+\n+int\n+test_04 (int a, int b)\n+{\n+  return (a ^ b) >= 0 ? -20 : -40;\n+}\n+\n+bool\n+test_05 (int a, int b)\n+{\n+  return (a ^ b) < 0;\n+}\n+\n+int\n+test_06 (int a, int b)\n+{\n+  return (a ^ b) < 0 ? -20 : -40;\n+}\n+\n+bool\n+test_07 (int a, int b)\n+{\n+  return (a < 0) == (b < 0);\n+}\n+\n+int\n+test_08 (int a, int b)\n+{\n+  return (a < 0) == (b < 0) ? -20 : -40;\n+}\n+\n+bool\n+test_09 (int a, int b)\n+{\n+  return (a < 0) != (b < 0);\n+}\n+\n+int\n+test_10 (int a, int b)\n+{\n+  return (a < 0) != (b < 0) ? -20 : -40;\n+}\n+\n+bool\n+test_11 (int a, int b)\n+{\n+  return (a >= 0) ^ (b < 0);\n+}\n+\n+int\n+test_12 (int a, int b)\n+{\n+  return (a >= 0) ^ (b < 0) ? -20 : -40;\n+}\n+\n+bool\n+test_13 (int a, int b)\n+{\n+  return !((a >= 0) ^ (b < 0));\n+}\n+\n+int\n+test_14 (int a, int b)\n+{\n+  return !((a >= 0) ^ (b < 0)) ? -20 : -40;\n+}\n+\n+bool\n+test_15 (int a, int b)\n+{\n+ return (a & 0x80000000) == (b & 0x80000000);\n+}\n+\n+int\n+test_16 (int a, int b)\n+{\n+  return (a & 0x80000000) == (b & 0x80000000) ? -20 : -40;\n+}\n+\n+bool\n+test_17 (int a, int b)\n+{\n+  return (a & 0x80000000) != (b & 0x80000000);\n+}\n+\n+int\n+test_18 (int a, int b)\n+{\n+  return (a & 0x80000000) != (b & 0x80000000) ? -20 : -40;\n+}\n+\n+int\n+test_19 (unsigned int a, unsigned int b)\n+{\n+  return (a ^ b) >> 31;\n+}\n+\n+int\n+test_20 (unsigned int a, unsigned int b)\n+{\n+  return (a >> 31) ^ (b >> 31);\n+}\n+\n+int\n+test_21 (int a, int b)\n+{\n+  return ((a & 0x80000000) ^ (b & 0x80000000)) >> 31 ? -30 : -10;\n+}\n+\n+int\n+test_22 (int a, int b, int c, int d)\n+{\n+  if ((a < 0) == (b < 0))\n+    return other_func_a (a, b);\n+  else\n+    return other_func_b (c, d);\n+}\n+\n+bool\n+test_23 (int a, int b, int c, int d)\n+{\n+  /* Should emit 2x div0s.  */\n+  return ((a < 0) == (b < 0)) | ((c < 0) == (d < 0));\n+}"}, {"sha": "b0e650bf0a568a1850591d0cbd8e81631db89de0", "filename": "gcc/testsuite/gcc.target/sh/pr52933-2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/669d4d702b35346b357bf77c194029eb96ba13b6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52933-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/669d4d702b35346b357bf77c194029eb96ba13b6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52933-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52933-2.c?ref=669d4d702b35346b357bf77c194029eb96ba13b6", "patch": "@@ -0,0 +1,12 @@\n+/* Check that the div0s instruction is used for integer sign comparisons\n+   when -mpretend-cmove is enabled.\n+   Each test case is expected to emit at least one div0s insn.\n+   Problems when combining the div0s comparison result with surrounding\n+   logic usually show up as redundant tst insns.  */\n+/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-options \"-O2 -mpretend-cmove\" } */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\" } { \"\" } } */\n+/* { dg-final { scan-assembler-times \"div0s\" 25 } } */\n+/* { dg-final { scan-assembler-not \"tst\" } } */\n+\n+#include \"pr52933-1.c\""}]}