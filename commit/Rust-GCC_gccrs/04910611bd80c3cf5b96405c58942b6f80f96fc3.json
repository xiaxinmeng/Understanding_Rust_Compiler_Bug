{"sha": "04910611bd80c3cf5b96405c58942b6f80f96fc3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ5MTA2MTFiZDgwYzNjZjViOTY0MDVjNTg5NDJiNmY4MGY5NmZjMw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard@codesourcery.com", "date": "2007-09-10T15:21:18Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2007-09-10T15:21:18Z"}, "message": "mips.c (mips_global_pointer): Check call_really_used_regs instead of call_used_regs.\n\ngcc/\n\t* config/mips/mips.c (mips_global_pointer): Check\n\tcall_really_used_regs instead of call_used_regs.\n\t(mips_save_reg_p): Likewise.  Save all call-saved registers\n\tif current_function_saves_all_registers.  Fix indentation.\n\tNo longer treat $18 as a special case.\n\t(compute_frame_size): Guard FPR loop with TARGET_HARD_FLOAT.\n\ngcc/testsuite/\n\t* gcc.target/mips/call-saved-1.c: New test.\n\t* gcc.target/mips/call-saved-2.c: Likewise.\n\t* gcc.target/mips/call-saved-3.c: Likewise.\n\t* gcc.target/mips/mips.exp (setup_mips_tests): Set mips_gp64\n\tinstead of mips_mips64.  Set mips_fp64 too.\n\t(is_gp32_flag): Return true for -mips1 and -mips2.\n\t(dg-mips-options): Use mips_gp64 instead of mips_mips64.\n\nFrom-SVN: r128347", "tree": {"sha": "84b52cb4914fe1d57662b286e0ad66d3b56a337f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84b52cb4914fe1d57662b286e0ad66d3b56a337f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04910611bd80c3cf5b96405c58942b6f80f96fc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04910611bd80c3cf5b96405c58942b6f80f96fc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04910611bd80c3cf5b96405c58942b6f80f96fc3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04910611bd80c3cf5b96405c58942b6f80f96fc3/comments", "author": null, "committer": null, "parents": [{"sha": "7d8bed7be6a13f1c25743a1bc45361d9f4f3a662", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d8bed7be6a13f1c25743a1bc45361d9f4f3a662", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d8bed7be6a13f1c25743a1bc45361d9f4f3a662"}], "stats": {"total": 157, "additions": 117, "deletions": 40}, "files": [{"sha": "b5a55a38a35ebc399b2da5f01e55bcbd37a1c735", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04910611bd80c3cf5b96405c58942b6f80f96fc3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04910611bd80c3cf5b96405c58942b6f80f96fc3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=04910611bd80c3cf5b96405c58942b6f80f96fc3", "patch": "@@ -1,3 +1,12 @@\n+2007-09-10  Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* config/mips/mips.c (mips_global_pointer): Check\n+\tcall_really_used_regs instead of call_used_regs.\n+\t(mips_save_reg_p): Likewise.  Save all call-saved registers\n+\tif current_function_saves_all_registers.  Fix indentation.\n+\tNo longer treat $18 as a special case.\n+\t(compute_frame_size): Guard FPR loop with TARGET_HARD_FLOAT.\n+\n 2007-09-10  Richard Sandiford  <richard@codesourcery.com>\n \n \t* config/mips/mips.h (MIPS_ARCH_FLOAT_SPEC): New macro."}, {"sha": "4a180da7468c8ce4a0ee7534f056f5765148c4f4", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 22, "deletions": 33, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04910611bd80c3cf5b96405c58942b6f80f96fc3/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04910611bd80c3cf5b96405c58942b6f80f96fc3/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=04910611bd80c3cf5b96405c58942b6f80f96fc3", "patch": "@@ -6852,7 +6852,7 @@ mips_global_pointer (void)\n   if (TARGET_CALL_SAVED_GP && current_function_is_leaf)\n     for (regno = GP_REG_FIRST; regno <= GP_REG_LAST; regno++)\n       if (!df_regs_ever_live_p (regno)\n-\t  && call_used_regs[regno]\n+\t  && call_really_used_regs[regno]\n \t  && !fixed_regs[regno]\n \t  && regno != PIC_FUNCTION_ADDR_REGNUM)\n \treturn regno;\n@@ -6918,43 +6918,33 @@ mips_save_reg_p (unsigned int regno)\n     return TARGET_CALL_SAVED_GP && cfun->machine->global_pointer == regno;\n \n   /* Check call-saved registers.  */\n-  if (df_regs_ever_live_p (regno) && !call_used_regs[regno])\n+  if ((current_function_saves_all_registers || df_regs_ever_live_p (regno))\n+      && !call_really_used_regs[regno])\n     return true;\n \n- /* Save both registers in an FPR pair if either one is used.  This is\n-    needed for the case when MIN_FPRS_PER_FMT == 1, which allows the odd\n-    register to be used without the even register.  */\n- if (FP_REG_P (regno)\n-     && MAX_FPRS_PER_FMT == 2\n-     && df_regs_ever_live_p (regno + 1)\n-     && !call_used_regs[regno + 1])\n-   return true;\n+  /* Save both registers in an FPR pair if either one is used.  This is\n+     needed for the case when MIN_FPRS_PER_FMT == 1, which allows the odd\n+     register to be used without the even register.  */\n+  if (FP_REG_P (regno)\n+      && MAX_FPRS_PER_FMT == 2\n+      && df_regs_ever_live_p (regno + 1)\n+      && !call_really_used_regs[regno + 1])\n+    return true;\n \n   /* We need to save the old frame pointer before setting up a new one.  */\n   if (regno == HARD_FRAME_POINTER_REGNUM && frame_pointer_needed)\n     return true;\n \n   /* We need to save the incoming return address if it is ever clobbered\n-     within the function.  */\n-  if (regno == GP_REG_FIRST + 31 && df_regs_ever_live_p (regno))\n+     within the function, if __builtin_eh_return is being used to set a\n+     different return address, or if a stub is being used to return a\n+     value in FPRs.  */\n+  if (regno == GP_REG_FIRST + 31\n+      && (df_regs_ever_live_p (regno)\n+\t  || current_function_calls_eh_return\n+\t  || mips16_cfun_returns_in_fpr_p ()))\n     return true;\n \n-  if (TARGET_MIPS16)\n-    {\n-      /* $18 is a special case in mips16 code.  It may be used to call\n-\t a function which returns a floating point value, but it is\n-\t marked in call_used_regs.  */\n-      if (regno == GP_REG_FIRST + 18 && df_regs_ever_live_p (regno))\n-\treturn true;\n-\n-      /* $31 is also a special case.  It will be used to copy a return\n-\t value into the floating point registers if the return value is\n-\t floating point.  */\n-      if (regno == GP_REG_FIRST + 31\n-\t  && mips16_cfun_returns_in_fpr_p ())\n-\treturn true;\n-    }\n-\n   return false;\n }\n \n@@ -7124,16 +7114,15 @@ compute_frame_size (HOST_WIDE_INT size)\n \n   /* This loop must iterate over the same space as its companion in\n      mips_for_each_saved_reg.  */\n-  for (regno = (FP_REG_LAST - MAX_FPRS_PER_FMT + 1);\n-       regno >= FP_REG_FIRST;\n-       regno -= MAX_FPRS_PER_FMT)\n-    {\n+  if (TARGET_HARD_FLOAT)\n+    for (regno = (FP_REG_LAST - MAX_FPRS_PER_FMT + 1);\n+\t regno >= FP_REG_FIRST;\n+\t regno -= MAX_FPRS_PER_FMT)\n       if (mips_save_reg_p (regno))\n \t{\n \t  fp_reg_size += MAX_FPRS_PER_FMT * UNITS_PER_FPREG;\n \t  fmask |= ((1 << MAX_FPRS_PER_FMT) - 1) << (regno - FP_REG_FIRST);\n \t}\n-    }\n \n   gp_reg_rounded = MIPS_STACK_ALIGN (gp_reg_size);\n   total_size += gp_reg_rounded + MIPS_STACK_ALIGN (fp_reg_size);"}, {"sha": "792984e9ae39e6abd805fd98c0be6c09592a1de2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04910611bd80c3cf5b96405c58942b6f80f96fc3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04910611bd80c3cf5b96405c58942b6f80f96fc3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=04910611bd80c3cf5b96405c58942b6f80f96fc3", "patch": "@@ -1,3 +1,13 @@\n+2007-09-10  Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* gcc.target/mips/call-saved-1.c: New test.\n+\t* gcc.target/mips/call-saved-2.c: Likewise.\n+\t* gcc.target/mips/call-saved-3.c: Likewise.\n+\t* gcc.target/mips/mips.exp (setup_mips_tests): Set mips_gp64\n+\tinstead of mips_mips64.  Set mips_fp64 too.\n+\t(is_gp32_flag): Return true for -mips1 and -mips2.\n+\t(dg-mips-options): Use mips_gp64 instead of mips_mips64.\n+\n 2007-09-10  Jakub Jelinek  <jakub@redhat.com>\n \n \t* g++.dg/ext/va-arg-pack-1.C: New test."}, {"sha": "957b0c598bd60353e2411cc7e39f994e3ce58a02", "filename": "gcc/testsuite/gcc.target/mips/call-saved-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04910611bd80c3cf5b96405c58942b6f80f96fc3/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcall-saved-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04910611bd80c3cf5b96405c58942b6f80f96fc3/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcall-saved-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcall-saved-1.c?ref=04910611bd80c3cf5b96405c58942b6f80f96fc3", "patch": "@@ -0,0 +1,20 @@\n+/* Check that we save all call-saved GPRs in a MIPS16 __builtin_eh_return\n+   function.  */\n+/* { dg-mips-options \"-mips2 -mips16 -mno-abicalls\" } */\n+\n+void bar (void);\n+void\n+foo (int x)\n+{\n+  __builtin_unwind_init ();\n+  __builtin_eh_return (x, bar);\n+}\n+/* { dg-final { scan-assembler \"\\\\\\$16\" } } */\n+/* { dg-final { scan-assembler \"\\\\\\$17\" } } */\n+/* { dg-final { scan-assembler \"\\\\\\$18\" } } */\n+/* { dg-final { scan-assembler \"\\\\\\$19\" } } */\n+/* { dg-final { scan-assembler \"\\\\\\$20\" } } */\n+/* { dg-final { scan-assembler \"\\\\\\$21\" } } */\n+/* { dg-final { scan-assembler \"\\\\\\$22\" } } */\n+/* { dg-final { scan-assembler \"\\\\\\$23\" } } */\n+/* { dg-final { scan-assembler \"\\\\\\$(30|fp)\" } } */"}, {"sha": "892889672835fc53b1c8036fd7ec255d853239fd", "filename": "gcc/testsuite/gcc.target/mips/call-saved-2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04910611bd80c3cf5b96405c58942b6f80f96fc3/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcall-saved-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04910611bd80c3cf5b96405c58942b6f80f96fc3/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcall-saved-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcall-saved-2.c?ref=04910611bd80c3cf5b96405c58942b6f80f96fc3", "patch": "@@ -0,0 +1,18 @@\n+/* Check that we save non-MIPS16 GPRs if they are explicitly clobbered.  */\n+/* { dg-mips-options \"-mips2 -mips16 -mno-abicalls -O2\" } */\n+\n+void\n+foo (void)\n+{\n+  asm volatile (\"\" ::: \"$19\", \"$23\", \"$24\", \"$30\");\n+}\n+/* { dg-final { scan-assembler-not \"\\\\\\$16\" } } */\n+/* { dg-final { scan-assembler-not \"\\\\\\$17\" } } */\n+/* { dg-final { scan-assembler-not \"\\\\\\$18\" } } */\n+/* { dg-final { scan-assembler \"\\\\\\$19\" } } */\n+/* { dg-final { scan-assembler-not \"\\\\\\$20\" } } */\n+/* { dg-final { scan-assembler-not \"\\\\\\$21\" } } */\n+/* { dg-final { scan-assembler-not \"\\\\\\$22\" } } */\n+/* { dg-final { scan-assembler \"\\\\\\$23\" } } */\n+/* { dg-final { scan-assembler-not \"\\\\\\$24\" } } */\n+/* { dg-final { scan-assembler \"\\\\\\$(30|fp)\" } } */"}, {"sha": "f1d93793b3c49a184482b17840af2fedb62d24ad", "filename": "gcc/testsuite/gcc.target/mips/call-saved-3.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04910611bd80c3cf5b96405c58942b6f80f96fc3/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcall-saved-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04910611bd80c3cf5b96405c58942b6f80f96fc3/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcall-saved-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcall-saved-3.c?ref=04910611bd80c3cf5b96405c58942b6f80f96fc3", "patch": "@@ -0,0 +1,21 @@\n+/* Check that we save all call-saved GPRs in a MIPS16 __builtin_setjmp\n+   function.  */\n+/* { dg-mips-options \"-mips2 -mips16 -mno-abicalls -O2\" } */\n+\n+void bar (void);\n+extern int buf[];\n+void\n+foo (int x)\n+{\n+  if (__builtin_setjmp (buf) == 0)\n+    bar();\n+}\n+/* { dg-final { scan-assembler \"\\\\\\$16\" } } */\n+/* { dg-final { scan-assembler \"\\\\\\$17\" } } */\n+/* { dg-final { scan-assembler \"\\\\\\$18\" } } */\n+/* { dg-final { scan-assembler \"\\\\\\$19\" } } */\n+/* { dg-final { scan-assembler \"\\\\\\$20\" } } */\n+/* { dg-final { scan-assembler \"\\\\\\$21\" } } */\n+/* { dg-final { scan-assembler \"\\\\\\$22\" } } */\n+/* { dg-final { scan-assembler \"\\\\\\$23\" } } */\n+/* { dg-final { scan-assembler \"\\\\\\$(30|fp)\" } } */"}, {"sha": "c88edc0a5070bf883dd86048eebddfb58fe1cc25", "filename": "gcc/testsuite/gcc.target/mips/mips.exp", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04910611bd80c3cf5b96405c58942b6f80f96fc3/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04910611bd80c3cf5b96405c58942b6f80f96fc3/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp?ref=04910611bd80c3cf5b96405c58942b6f80f96fc3", "patch": "@@ -31,7 +31,8 @@ load_lib gcc-dg.exp\n #    $mips_isa:\t\t the ISA level specified by __mips\n #    $mips_arch:\t the architecture specified by _MIPS_ARCH\n #    $mips_mips16:\t true if MIPS16 mode is selected\n-#    $mips_mips64:\t true if 64-bit output is selected\n+#    $mips_gp64:\t true if 64-bit output is selected\n+#    $mips_fp64:\t true if 64-bit FPRs are selected\n #    $mips_float:\t \"hard\" or \"soft\"\n #\n #    $mips_forced_isa:\t true if the command line uses -march=* or -mips*\n@@ -44,7 +45,8 @@ proc setup_mips_tests {} {\n     global mips_isa\n     global mips_arch\n     global mips_mips16\n-    global mips_mips64\n+    global mips_gp64\n+    global mips_fp64\n     global mips_float\n \n     global mips_forced_isa\n@@ -66,7 +68,10 @@ proc setup_mips_tests {} {\n \tint mips16 = 1;\n \t#endif\n \t#ifdef __mips64\n-\tint mips64 = 1;\n+\tint gp64 = 1;\n+\t#endif\n+\t#if __mips_fpr==64\n+\tint fp64 = 1;\n \t#endif\n \t#ifdef __mips_hard_float\n \tconst char *float = \"hard\";\n@@ -81,7 +86,8 @@ proc setup_mips_tests {} {\n     regexp {isa = ([^;]*)} $output dummy mips_isa\n     regexp {arch = \"([^\"]*)} $output dummy mips_arch\n     set mips_mips16 [regexp {mips16 = 1} $output]\n-    set mips_mips64 [regexp {mips64 = 1} $output]\n+    set mips_gp64 [regexp {gp64 = 1} $output]\n+    set mips_fp64 [regexp {fp64 = 1} $output]\n     regexp {float = \"([^\"]*)} $output dummy mips_float\n \n     set mips_forced_isa [regexp -- {(-mips|-march)} $compiler_flags]\n@@ -96,6 +102,7 @@ proc setup_mips_tests {} {\n proc is_gp32_flag {flag} {\n     switch -glob -- $flag {\n \t-msmartmips -\n+\t-mips[12] -\n \t-march=mips32* -\n \t-mgp32 { return 1 }\n \tdefault { return 0 }\n@@ -149,7 +156,8 @@ proc dg-mips-options {args} {\n     global mips_isa\n     global mips_arch\n     global mips_mips16\n-    global mips_mips64\n+    global mips_gp64\n+    global mips_fp64\n     global mips_float\n \n     global mips_forced_isa\n@@ -164,13 +172,15 @@ proc dg-mips-options {args} {\n \n     # First handle the -mgp* options.  Add an architecture option if necessary.\n     foreach flag $flags {\n-\tif {[is_gp32_flag $flag] && $mips_mips64} {\n+\tif {[is_gp32_flag $flag]\n+\t    && ($mips_gp64\n+\t\t|| ($mips_fp64 && [lsearch $flags -mfp64] < 0)) } {\n \t    if {$mips_forced_abi} {\n \t\tset matches 0\n \t    } else {\n \t\tappend flags \" -mabi=32\"\n \t    }\n-\t} elseif {$flag == \"-mgp64\" && !$mips_mips64} {\n+\t} elseif {$flag == \"-mgp64\" && !$mips_gp64} {\n \t    if {$mips_forced_abi} {\n \t\tset matches 0\n \t    } else {"}]}