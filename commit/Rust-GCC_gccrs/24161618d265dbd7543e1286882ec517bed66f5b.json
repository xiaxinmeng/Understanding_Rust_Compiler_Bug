{"sha": "24161618d265dbd7543e1286882ec517bed66f5b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQxNjE2MThkMjY1ZGJkNzU0M2UxMjg2ODgyZWM1MTdiZWQ2NmY1Yg==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2018-05-28T08:53:54Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-05-28T08:53:54Z"}, "message": "[Ada] Crash on aspect/pragma Linked_Section with -gnatR2\n\nThis patch modifies the output of the representation information related to\naspect or pragma Linker_Section, achieved with compiler switch -gnatR2. The\nvalue of the section argument is now properly retrieved. Previously it was\nassumed that the value is always a N_String_Literal, however the semantics\nof the annotation allow for any static string expression, including a\nreference to a static string.\n\n------------\n-- Source --\n------------\n\n--  linker_sections.ads\n\npackage Linker_Sections is\n   LS_1 : constant String := \"1\";\n   LS_2 : constant String := \"2\" & \"2\";\n   LS_3 : constant String := LS_1 & \"3\";\n   LS_4 : constant String := \"4\" & LS_2;\n\n   Val_1  : Integer with Linker_Section => LS_1;\n   Val_2  : Integer with Linker_Section => LS_2;\n   Val_3  : Integer with Linker_Section => LS_3;\n   Val_4  : Integer with Linker_Section => LS_4;\n   Val_5  : Integer with Linker_Section => LS_1 & \"5\";\n   Val_6  : Integer with Linker_Section => LS_2 & \"6\";\n   Val_7  : Integer with Linker_Section => LS_3 & \"7\";\n   Val_8  : Integer with Linker_Section => LS_4 & \"8\";\n   Val_9  : Integer with Linker_Section => \"9\"  & LS_1;\n   Val_10 : Integer with Linker_Section => \"10\" & LS_2;\n   Val_11 : Integer with Linker_Section => \"11\" & LS_3;\n   Val_12 : Integer with Linker_Section => \"12\" & LS_4;\n\n   Val_13 : Integer; pragma Linker_Section (Val_13, LS_1);\n   Val_14 : Integer; pragma Linker_Section (Val_14, LS_2);\n   Val_15 : Integer; pragma Linker_Section (Val_15, LS_3);\n   Val_16 : Integer; pragma Linker_Section (Val_16, LS_4);\n   Val_17 : Integer; pragma Linker_Section (Val_17, LS_1 & \"5\");\n   Val_18 : Integer; pragma Linker_Section (Val_18, LS_2 & \"6\");\n   Val_19 : Integer; pragma Linker_Section (Val_19, LS_3 & \"7\");\n   Val_20 : Integer; pragma Linker_Section (Val_20, LS_4 & \"8\");\n   Val_21 : Integer; pragma Linker_Section (Val_21, \"9\"  & LS_1);\n   Val_22 : Integer; pragma Linker_Section (Val_22, \"10\" & LS_2);\n   Val_23 : Integer; pragma Linker_Section (Val_23, \"11\" & LS_3);\n   Val_24 : Integer; pragma Linker_Section (Val_24, \"12\" & LS_4);\nend Linker_Sections;\n\n-----------------\n-- Compilation --\n-----------------\n\n$ gcc -c -gnatR2s linker_sections.ads\n\n2018-05-28  Hristian Kirtchev  <kirtchev@adacore.com>\n\ngcc/ada/\n\n\t* repinfo.adb (Expr_Value_S): New routine.\n\t(List_Linker_Section): Properly extract the value of the section\n\targument.\n\nFrom-SVN: r260825", "tree": {"sha": "f4bc58c8dbcffbf24e8715e212c55aacfc97f84f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4bc58c8dbcffbf24e8715e212c55aacfc97f84f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24161618d265dbd7543e1286882ec517bed66f5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24161618d265dbd7543e1286882ec517bed66f5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24161618d265dbd7543e1286882ec517bed66f5b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24161618d265dbd7543e1286882ec517bed66f5b/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f5a9ad2577ddea7a5646040b1d301515d834a8d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5a9ad2577ddea7a5646040b1d301515d834a8d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5a9ad2577ddea7a5646040b1d301515d834a8d1"}], "stats": {"total": 50, "additions": 40, "deletions": 10}, "files": [{"sha": "7a0a60dfb56140e63e051c0dcd91b1015fd4ebcf", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24161618d265dbd7543e1286882ec517bed66f5b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24161618d265dbd7543e1286882ec517bed66f5b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=24161618d265dbd7543e1286882ec517bed66f5b", "patch": "@@ -1,3 +1,9 @@\n+2018-05-28  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* repinfo.adb (Expr_Value_S): New routine.\n+\t(List_Linker_Section): Properly extract the value of the section\n+\targument.\n+\n 2018-05-28  Patrick Bernardi  <bernardi@adacore.com>\n \n \t* doc/gnat_ugn/building_executable_programs_with_gnat.rst: Update the"}, {"sha": "1fa3f4eee8dd13c7af85bc04496f288f1d2ec7a0", "filename": "gcc/ada/repinfo.adb", "status": "modified", "additions": 34, "deletions": 10, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24161618d265dbd7543e1286882ec517bed66f5b/gcc%2Fada%2Frepinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24161618d265dbd7543e1286882ec517bed66f5b/gcc%2Fada%2Frepinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frepinfo.adb?ref=24161618d265dbd7543e1286882ec517bed66f5b", "patch": "@@ -685,23 +685,47 @@ package body Repinfo is\n    -------------------------\n \n    procedure List_Linker_Section (Ent : Entity_Id) is\n-      Arg : Node_Id;\n+      function Expr_Value_S (N : Node_Id) return Node_Id;\n+      --  Returns the folded value of the expression. This function is called\n+      --  in instances where it has already been determined that the expression\n+      --  is static or its value is known at compile time. This version is used\n+      --  for string types and returns the corresponding N_String_Literal node.\n+      --  NOTE: This is an exact copy of Sem_Eval.Expr_Value_S. Licensing stops\n+      --  Repinfo from within Sem_Eval. Once ASIS is removed, and the licenses\n+      --  are modified, Repinfo should be able to rely on Sem_Eval.\n+\n+      ------------------\n+      -- Expr_Value_S --\n+      ------------------\n+\n+      function Expr_Value_S (N : Node_Id) return Node_Id is\n+      begin\n+         if Nkind (N) = N_String_Literal then\n+            return N;\n+         else\n+            pragma Assert (Ekind (Entity (N)) = E_Constant);\n+            return Expr_Value_S (Constant_Value (Entity (N)));\n+         end if;\n+      end Expr_Value_S;\n+\n+      --  Local variables\n+\n+      Args : List_Id;\n+      Sect : Node_Id;\n+\n+   --  Start of processing for List_Linker_Section\n \n    begin\n       if Present (Linker_Section_Pragma (Ent)) then\n+         Args := Pragma_Argument_Associations (Linker_Section_Pragma (Ent));\n+         Sect := Expr_Value_S (Get_Pragma_Arg (Last (Args)));\n+\n          Write_Str (\"pragma Linker_Section (\");\n          List_Name (Ent);\n          Write_Str (\", \"\"\");\n \n-         Arg :=\n-           Last (Pragma_Argument_Associations (Linker_Section_Pragma (Ent)));\n-\n-         if Nkind (Arg) = N_Pragma_Argument_Association then\n-            Arg := Expression (Arg);\n-         end if;\n-\n-         pragma Assert (Nkind (Arg) = N_String_Literal);\n-         String_To_Name_Buffer (Strval (Arg));\n+         pragma Assert (Nkind (Sect) = N_String_Literal);\n+         String_To_Name_Buffer (Strval (Sect));\n          Write_Str (Name_Buffer (1 .. Name_Len));\n          Write_Str (\"\"\");\");\n          Write_Eol;"}]}