{"sha": "51b003476eaf2af216eaacccbdcd4031ce7e2405", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTFiMDAzNDc2ZWFmMmFmMjE2ZWFhY2NjYmRjZDQwMzFjZTdlMjQwNQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-06T00:23:00Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-06T00:23:00Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r1455", "tree": {"sha": "a70e960c1b7a067589d49bbffdde733e16b303d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a70e960c1b7a067589d49bbffdde733e16b303d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/51b003476eaf2af216eaacccbdcd4031ce7e2405", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51b003476eaf2af216eaacccbdcd4031ce7e2405", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51b003476eaf2af216eaacccbdcd4031ce7e2405", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51b003476eaf2af216eaacccbdcd4031ce7e2405/comments", "author": null, "committer": null, "parents": [{"sha": "b7ac21e3582050ff6d0c34c54ee751ae44e51952", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7ac21e3582050ff6d0c34c54ee751ae44e51952", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7ac21e3582050ff6d0c34c54ee751ae44e51952"}], "stats": {"total": 6, "additions": 6, "deletions": 0}, "files": [{"sha": "ff1f772942e917b7251bbae44cd5b7ffd56af4d3", "filename": "gcc/cse.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51b003476eaf2af216eaacccbdcd4031ce7e2405/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51b003476eaf2af216eaacccbdcd4031ce7e2405/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=51b003476eaf2af216eaacccbdcd4031ce7e2405", "patch": "@@ -3404,13 +3404,19 @@ simplify_binary_operation (code, mode, op0, op1)\n \t\treturn plus_constant (op0, INTVAL (op1));\n \t      else if (GET_CODE (op0) == CONST_INT)\n \t\treturn plus_constant (op1, INTVAL (op0));\n+\t      else\n+\t\tbreak;\n+#if 0 /* No good, because this can produce the sum of two relocatable\n+\t symbols, in an assembler instruction.  Most UNIX assemblers can't\n+\t handle that.  */\n \t      else\n \t\treturn gen_rtx (CONST, mode,\n \t\t\t\tgen_rtx (PLUS, mode,\n \t\t\t\t\t GET_CODE (op0) == CONST\n \t\t\t\t\t ? XEXP (op0, 0) : op0,\n \t\t\t\t\t GET_CODE (op1) == CONST\n \t\t\t\t\t ? XEXP (op1, 0) : op1));\n+#endif\n \t    }\n \t  else if (GET_CODE (op1) == CONST_INT\n \t\t   && GET_CODE (op0) == PLUS"}]}