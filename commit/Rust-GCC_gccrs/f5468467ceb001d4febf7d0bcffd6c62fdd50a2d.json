{"sha": "f5468467ceb001d4febf7d0bcffd6c62fdd50a2d", "node_id": "C_kwDOANBUbNoAKGY1NDY4NDY3Y2ViMDAxZDRmZWJmN2QwYmNmZmQ2YzYyZmRkNTBhMmQ", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-11-15T11:02:36Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-11-15T15:45:00Z"}, "message": "asan: update expected format based on ASAN\n\ngcc/testsuite/ChangeLog:\n\n\t* c-c++-common/asan/global-overflow-1.c: Update\n\texpected format.\n\t* c-c++-common/asan/heap-overflow-1.c: Likewise.\n\t* c-c++-common/asan/strlen-overflow-1.c: Likewise.\n\t* c-c++-common/asan/strncpy-overflow-1.c: Likewise.\n\t* c-c++-common/hwasan/heap-overflow.c: Likewise.\n\t* g++.dg/asan/asan_mem_test.cc: Likewise.\n\t* g++.dg/asan/asan_oob_test.cc: Likewise.\n\t* g++.dg/asan/asan_str_test.cc: Likewise.\n\t* g++.dg/asan/asan_test.cc: Likewise.\n\t* g++.dg/asan/large-func-test-1.C: Likewise.", "tree": {"sha": "e9ec477926bd5decf1999abf48392c3f4b10e594", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9ec477926bd5decf1999abf48392c3f4b10e594"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5468467ceb001d4febf7d0bcffd6c62fdd50a2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5468467ceb001d4febf7d0bcffd6c62fdd50a2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5468467ceb001d4febf7d0bcffd6c62fdd50a2d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5468467ceb001d4febf7d0bcffd6c62fdd50a2d/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c7a928859f41bc8ea47d97da5df4aac75bbd5fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c7a928859f41bc8ea47d97da5df4aac75bbd5fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c7a928859f41bc8ea47d97da5df4aac75bbd5fe"}], "stats": {"total": 84, "additions": 42, "deletions": 42}, "files": [{"sha": "b97801da2b7dd781c47a7212236cfdd39c418277", "filename": "gcc/testsuite/c-c++-common/asan/global-overflow-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5468467ceb001d4febf7d0bcffd6c62fdd50a2d/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fglobal-overflow-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5468467ceb001d4febf7d0bcffd6c62fdd50a2d/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fglobal-overflow-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fglobal-overflow-1.c?ref=f5468467ceb001d4febf7d0bcffd6c62fdd50a2d", "patch": "@@ -25,5 +25,5 @@ int main() {\n /* { dg-skip-if \"inaccurate debug info\" { mips*-*-* } { \"*\" } { \"-O0\" } } */\n /* { dg-output \"READ of size 1 at 0x\\[0-9a-f\\]+ thread T0.*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"    #0 0x\\[0-9a-f\\]+ +(in _*main (\\[^\\n\\r]*global-overflow-1.c:20|\\[^\\n\\r]*:0|\\[^\\n\\r]*\\\\+0x\\[0-9a-z\\]*)|\\[(\\])\\[^\\n\\r]*(\\n|\\r\\n|\\r).*\" } */\n-/* { dg-output \"0x\\[0-9a-f\\]+ is located 0 bytes to the right of global variable\" } */\n+/* { dg-output \"0x\\[0-9a-f\\]+ is located 0 bytes after global variable\" } */\n /* { dg-output \".*YYY\\[^\\n\\r]* of size 10\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */"}, {"sha": "7d8744852aef58304a201c39445abd88ee95fc46", "filename": "gcc/testsuite/c-c++-common/asan/heap-overflow-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5468467ceb001d4febf7d0bcffd6c62fdd50a2d/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fheap-overflow-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5468467ceb001d4febf7d0bcffd6c62fdd50a2d/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fheap-overflow-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fheap-overflow-1.c?ref=f5468467ceb001d4febf7d0bcffd6c62fdd50a2d", "patch": "@@ -25,7 +25,7 @@ int main(int argc, char **argv) {\n \n /* { dg-output \"READ of size 1 at 0x\\[0-9a-f\\]+ thread T0.*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"    #0 0x\\[0-9a-f\\]+ +(in _*main (\\[^\\n\\r]*heap-overflow-1.c:21|\\[^\\n\\r]*:0|\\[^\\n\\r]*\\\\+0x\\[0-9a-z\\]*)|\\[(\\]).*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*0x\\[0-9a-f\\]+ is located 0 bytes to the right of 10-byte region\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*0x\\[0-9a-f\\]+ is located 0 bytes after 10-byte region\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*allocated by thread T0 here:\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"    #0 0x\\[0-9a-f\\]+ +(in _*(interceptor_|wrap_|)malloc|\\[(\\])\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"    #1 0x\\[0-9a-f\\]+ +(in _*main (\\[^\\n\\r]*heap-overflow-1.c:19|\\[^\\n\\r]*:0|\\[^\\n\\r]*\\\\+0x\\[0-9a-z\\]*)|\\[(\\])\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */"}, {"sha": "34c20c8ed5070ca836d8bede5697e5f444278d2a", "filename": "gcc/testsuite/c-c++-common/asan/strlen-overflow-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5468467ceb001d4febf7d0bcffd6c62fdd50a2d/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fstrlen-overflow-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5468467ceb001d4febf7d0bcffd6c62fdd50a2d/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fstrlen-overflow-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fstrlen-overflow-1.c?ref=f5468467ceb001d4febf7d0bcffd6c62fdd50a2d", "patch": "@@ -21,4 +21,4 @@ int main () {\n \n /* { dg-output \"READ of size 2 at 0x\\[0-9a-f\\]+ thread T0.*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"    #1 0x\\[0-9a-f\\]+ +(in _*main (\\[^\\n\\r]*strlen-overflow-1.c:19|\\[^\\n\\r]*:0)|\\[(\\]).*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*0x\\[0-9a-f\\]+ is located 0 bytes to the right of global variable\" } */\n+/* { dg-output \"\\[^\\n\\r]*0x\\[0-9a-f\\]+ is located 0 bytes after global variable\" } */"}, {"sha": "834284722f94d77f45d4c410b302da867f1e9c27", "filename": "gcc/testsuite/c-c++-common/asan/strncpy-overflow-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5468467ceb001d4febf7d0bcffd6c62fdd50a2d/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fstrncpy-overflow-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5468467ceb001d4febf7d0bcffd6c62fdd50a2d/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fstrncpy-overflow-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fstrncpy-overflow-1.c?ref=f5468467ceb001d4febf7d0bcffd6c62fdd50a2d", "patch": "@@ -16,7 +16,7 @@ int main(int argc, char **argv) {\n /* { dg-output \"WRITE of size \\[0-9\\]* at 0x\\[0-9a-f\\]+ thread T0\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"    #0 0x\\[0-9a-f\\]+ +(in _*(interceptor_|wrap_|)strncpy|\\[(\\])\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"    #1 0x\\[0-9a-f\\]+ +(in _*main (\\[^\\n\\r]*strncpy-overflow-1.c:12|\\[^\\n\\r]*:0|\\[^\\n\\r]*\\\\+0x\\[0-9a-z\\]*)|\\[(\\]).*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*0x\\[0-9a-f\\]+ is located 0 bytes to the right of 9-byte region\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*0x\\[0-9a-f\\]+ is located 0 bytes after 9-byte region\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*allocated by thread T0 here:\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"    #0 0x\\[0-9a-f\\]+ +(in _*(interceptor_|wrap_|)malloc|\\[(\\])\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"    #1 0x\\[0-9a-f\\]+ +(in _*main (\\[^\\n\\r]*strncpy-overflow-1.c:11|\\[^\\n\\r]*:0|\\[^\\n\\r]*\\\\+0x\\[0-9a-z\\]*)|\\[(\\])\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */"}, {"sha": "a5a37715925416ecfe1d2d196f8dc6fe06856aec", "filename": "gcc/testsuite/c-c++-common/hwasan/heap-overflow.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5468467ceb001d4febf7d0bcffd6c62fdd50a2d/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fhwasan%2Fheap-overflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5468467ceb001d4febf7d0bcffd6c62fdd50a2d/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fhwasan%2Fheap-overflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fhwasan%2Fheap-overflow.c?ref=f5468467ceb001d4febf7d0bcffd6c62fdd50a2d", "patch": "@@ -24,6 +24,6 @@ int main(int argc, char **argv) {\n \n /* { dg-output \"HWAddressSanitizer: tag-mismatch on address 0x\\[0-9a-f\\]*.*\" } */\n /* { dg-output \"READ of size 1 at 0x\\[0-9a-f\\]* tags: \\[\\[:xdigit:\\]\\]\\[\\[:xdigit:\\]\\]/\\[\\[:xdigit:\\]\\]\\[\\[:xdigit:\\]\\].* \\\\(ptr/mem\\\\) in thread T0.*\" } */\n-/* { dg-output \"located 0 bytes to the right of 10-byte region.*\" } */\n+/* { dg-output \"located 0 bytes after 10-byte region.*\" } */\n /* { dg-output \"allocated here:.*\" } */\n /* { dg-output \"#1 0x\\[0-9a-f\\]+ +in _*main \\[^\\n\\r]*heap-overflow.c:18\" } */"}, {"sha": "7f6f3f4c1f824d3fdc492a6488b907af4a6f21fe", "filename": "gcc/testsuite/g++.dg/asan/asan_mem_test.cc", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5468467ceb001d4febf7d0bcffd6c62fdd50a2d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fasan_mem_test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5468467ceb001d4febf7d0bcffd6c62fdd50a2d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fasan_mem_test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fasan_mem_test.cc?ref=f5468467ceb001d4febf7d0bcffd6c62fdd50a2d", "patch": "@@ -31,18 +31,18 @@ void MemSetOOBTestTemplate(size_t length) {\n   MEMSET(array + length, 0, zero);\n   MEMSET(array + length + 1, 0, zero);\n \n-  // try to memset bytes to the right of array\n+  // try to memset bytes after array\n   EXPECT_DEATH(MEMSET(array, 0, size + 1),\n                RightOOBWriteMessage(0));\n   EXPECT_DEATH(MEMSET((char*)(array + length) - 1, element, 6),\n                RightOOBWriteMessage(0));\n   EXPECT_DEATH(MEMSET(array + 1, element, size + sizeof(T)),\n                RightOOBWriteMessage(0));\n-  // whole interval is to the right\n+  // whole interval is after\n   EXPECT_DEATH(MEMSET(array + length + 1, 0, 10),\n                RightOOBWriteMessage(sizeof(T)));\n \n-  // try to memset bytes to the left of array\n+  // try to memset bytes before array\n   EXPECT_DEATH(MEMSET((char*)array - 1, element, size),\n                LeftOOBWriteMessage(1));\n   EXPECT_DEATH(MEMSET((char*)array - 5, 0, 6),\n@@ -52,11 +52,11 @@ void MemSetOOBTestTemplate(size_t length) {\n     EXPECT_DEATH(memset(array - 5, element, size + 5 * sizeof(T)),\n                  LeftOOBWriteMessage(5 * sizeof(T)));\n   }\n-  // whole interval is to the left\n+  // whole interval is before\n   EXPECT_DEATH(MEMSET(array - 2, 0, sizeof(T)),\n                LeftOOBWriteMessage(2 * sizeof(T)));\n \n-  // try to memset bytes both to the left & to the right\n+  // try to memset bytes both before & after\n   EXPECT_DEATH(MEMSET((char*)array - 2, element, size + 4),\n                LeftOOBWriteMessage(2));\n \n@@ -108,7 +108,7 @@ TEST(AddressSanitizer, LargeOOBInMemset) {\n     // fprintf(stderr, \"  large oob memset: %p %p %zd\\n\", x1, x2, size);\n     // Do a memset on x1 with huge out-of-bound access that will end up in x2.\n     EXPECT_DEATH(Ident(memset)(x1, 0, size * 2),\n-                 \"is located 0 bytes to the right\");\n+                 \"is located 0 bytes after\");\n     delete [] x1;\n     delete [] x2;\n     return;\n@@ -137,25 +137,25 @@ void MemTransferOOBTestTemplate(size_t length) {\n   M::transfer(dest, src - 1, zero);\n   M::transfer(dest, src, zero);\n \n-  // try to change mem to the right of dest\n+  // try to change mem after dest\n   EXPECT_DEATH(M::transfer(dest + 1, src, size),\n                RightOOBWriteMessage(0));\n   EXPECT_DEATH(M::transfer((char*)(dest + length) - 1, src, 5),\n                RightOOBWriteMessage(0));\n \n-  // try to change mem to the left of dest\n+  // try to change mem before dest\n   EXPECT_DEATH(M::transfer(dest - 2, src, size),\n                LeftOOBWriteMessage(2 * sizeof(T)));\n   EXPECT_DEATH(M::transfer((char*)dest - 3, src, 4),\n                LeftOOBWriteMessage(3));\n \n-  // try to access mem to the right of src\n+  // try to access mem after src\n   EXPECT_DEATH(M::transfer(dest, src + 2, size),\n                RightOOBReadMessage(0));\n   EXPECT_DEATH(M::transfer(dest, (char*)(src + length) - 3, 6),\n                RightOOBReadMessage(0));\n \n-  // try to access mem to the left of src\n+  // try to access mem before src\n   EXPECT_DEATH(M::transfer(dest, src - 1, size),\n                LeftOOBReadMessage(sizeof(T)));\n   EXPECT_DEATH(M::transfer(dest, (char*)src - 6, 7),"}, {"sha": "05fa7229486de02fca2ca42e2d955f54ff5cf5a8", "filename": "gcc/testsuite/g++.dg/asan/asan_oob_test.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5468467ceb001d4febf7d0bcffd6c62fdd50a2d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fasan_oob_test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5468467ceb001d4febf7d0bcffd6c62fdd50a2d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fasan_oob_test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fasan_oob_test.cc?ref=f5468467ceb001d4febf7d0bcffd6c62fdd50a2d", "patch": "@@ -33,7 +33,7 @@ void OOBTest() {\n   for (int size = sizeof(T); size < 20; size += 5) {\n     for (int i = -5; i < 0; i++) {\n       const char *str =\n-          \"is located.*%d byte.*to the left\";\n+          \"is located.*%d byte.*before\";\n       sprintf(expected_str, str, abs(i));\n       EXPECT_DEATH(oob_test<T>(size, i), expected_str);\n     }\n@@ -43,7 +43,7 @@ void OOBTest() {\n \n     for (int i = size - sizeof(T) + 1; i <= (int)(size + 2 * sizeof(T)); i++) {\n       const char *str =\n-          \"is located.*%d byte.*to the right\";\n+          \"is located.*%d byte.*after\";\n       int off = i >= size ? (i - size) : 0;\n       // we don't catch unaligned partially OOB accesses.\n       if (i % sizeof(T)) continue;\n@@ -53,9 +53,9 @@ void OOBTest() {\n   }\n \n   EXPECT_DEATH(oob_test<T>(kLargeMalloc, -1),\n-          \"is located.*1 byte.*to the left\");\n+          \"is located.*1 byte.*before\");\n   EXPECT_DEATH(oob_test<T>(kLargeMalloc, kLargeMalloc),\n-          \"is located.*0 byte.*to the right\");\n+          \"is located.*0 byte.*after\");\n }\n \n // TODO(glider): the following tests are EXTREMELY slow on Darwin:\n@@ -89,7 +89,7 @@ TEST(AddressSanitizer, OOBRightTest) {\n         } else {\n           int outside_bytes = offset > alloc_size ? (offset - alloc_size) : 0;\n           const char *str =\n-              \"is located.%d *byte.*to the right\";\n+              \"is located.%d *byte.*after\";\n           char expected_str[100];\n           sprintf(expected_str, str, outside_bytes);\n           EXPECT_DEATH(asan_write_sized_aligned(addr, access_size),\n@@ -106,7 +106,7 @@ TEST(AddressSanitizer, LargeOOBRightTest) {\n   for (size_t i = 16; i <= 256; i *= 2) {\n     size_t size = large_power_of_two - i;\n     char *p = Ident(new char[size]);\n-    EXPECT_DEATH(p[size] = 0, \"is located 0 bytes to the right\");\n+    EXPECT_DEATH(p[size] = 0, \"is located 0 bytes after\");\n     delete [] p;\n   }\n }"}, {"sha": "56e136930e406984665abcf29e377ebde39ec971", "filename": "gcc/testsuite/g++.dg/asan/asan_str_test.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5468467ceb001d4febf7d0bcffd6c62fdd50a2d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fasan_str_test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5468467ceb001d4febf7d0bcffd6c62fdd50a2d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fasan_str_test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fasan_str_test.cc?ref=f5468467ceb001d4febf7d0bcffd6c62fdd50a2d", "patch": "@@ -19,7 +19,7 @@ static char global_string[] = \"global\";\n static size_t global_string_length = 6;\n \n // Input to a test is a zero-terminated string str with given length\n-// Accesses to the bytes to the left and to the right of str\n+// Accesses to the bytes to the left and after str\n // are presumed to produce OOB errors\n void StrLenOOBTestTemplate(char *str, size_t length, bool is_global) {\n   // Normal strlen calls\n@@ -30,7 +30,7 @@ void StrLenOOBTestTemplate(char *str, size_t length, bool is_global) {\n   }\n   // Arg of strlen is not malloced, OOB access\n   if (!is_global) {\n-    // We don't insert RedZones to the left of global variables\n+    // We don't insert RedZones before global variables\n     EXPECT_DEATH(Ident(strlen(str - 1)), LeftOOBReadMessage(1));\n     EXPECT_DEATH(Ident(strlen(str - 5)), LeftOOBReadMessage(5));\n   }"}, {"sha": "0d976801cf195cbf7059adad52c74ce932428949", "filename": "gcc/testsuite/g++.dg/asan/asan_test.cc", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5468467ceb001d4febf7d0bcffd6c62fdd50a2d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fasan_test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5468467ceb001d4febf7d0bcffd6c62fdd50a2d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fasan_test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fasan_test.cc?ref=f5468467ceb001d4febf7d0bcffd6c62fdd50a2d", "patch": "@@ -286,7 +286,7 @@ TEST(AddressSanitizer, SignalTest) {\n \n static void TestLargeMalloc(size_t size) {\n   char buff[1024];\n-  sprintf(buff, \"is located 1 bytes to the left of %lu-byte\", (long)size);\n+  sprintf(buff, \"is located 1 bytes before %lu-byte\", (long)size);\n   EXPECT_DEATH(Ident((char*)malloc(size))[-1] = 0, buff);\n }\n \n@@ -301,7 +301,7 @@ TEST(AddressSanitizer, HugeMallocTest) {\n   if (SANITIZER_WORDSIZE != 64 || ASAN_AVOID_EXPENSIVE_TESTS) return;\n   size_t n_megs = 4100;\n   EXPECT_DEATH(Ident((char*)malloc(n_megs << 20))[-1] = 0,\n-               \"is located 1 bytes to the left|\"\n+               \"is located 1 bytes before|\"\n                \"AddressSanitizer failed to allocate\");\n }\n \n@@ -316,9 +316,9 @@ TEST(AddressSanitizer, memalign) {\n   for (int align = 16; align <= (1 << 23); align *= 2) {\n     size_t size = align * 5;\n     EXPECT_DEATH(MemalignRun(align, size, -1),\n-                 \"is located 1 bytes to the left\");\n+                 \"is located 1 bytes before\");\n     EXPECT_DEATH(MemalignRun(align, size, size + 1),\n-                 \"is located 1 bytes to the right\");\n+                 \"is located 1 bytes after\");\n   }\n }\n #endif  // SANITIZER_TEST_HAS_MEMALIGN\n@@ -696,7 +696,7 @@ TEST(AddressSanitizer, Store128Test) {\n   EXPECT_DEATH(_mm_store_si128((__m128i*)p, value_wide),\n                \"WRITE of size 16\");\n   EXPECT_DEATH(_mm_store_si128((__m128i*)p, value_wide),\n-               \"located 0 bytes to the right of 12-byte\");\n+               \"located 0 bytes after 12-byte\");\n   free(a);\n }\n #endif\n@@ -709,7 +709,7 @@ string RightOOBErrorMessage(int oob_distance, bool is_write) {\n #if !GTEST_USES_SIMPLE_RE\n           \"buffer-overflow.*%s.*\"\n #endif\n-          \"located %d bytes to the right\",\n+          \"located %d bytes after\",\n #if !GTEST_USES_SIMPLE_RE\n           is_write ? \"WRITE\" : \"READ\",\n #endif\n@@ -733,7 +733,7 @@ string LeftOOBErrorMessage(int oob_distance, bool is_write) {\n #if !GTEST_USES_SIMPLE_RE\n           ASAN_PCRE_DOTALL \"%s.*\"\n #endif\n-          \"located %d bytes to the left\",\n+          \"located %d bytes before\",\n #if !GTEST_USES_SIMPLE_RE\n           is_write ? \"WRITE\" : \"READ\",\n #endif\n@@ -752,7 +752,7 @@ string LeftOOBReadMessage(int oob_distance) {\n string LeftOOBAccessMessage(int oob_distance) {\n   assert(oob_distance > 0);\n   char expected_str[100];\n-  sprintf(expected_str, \"located %d bytes to the left\", oob_distance);\n+  sprintf(expected_str, \"located %d bytes before\", oob_distance);\n   return string(expected_str);\n }\n \n@@ -774,7 +774,7 @@ char* MallocAndMemsetString(size_t size) {\n   EXPECT_DEATH(READ_N_BYTES,                                             \\\n                ASAN_PCRE_DOTALL                                          \\\n                \"AddressSanitizer: heap-buffer-overflow\"                  \\\n-               \".* is located 0 bytes to the right of 10-byte region\");  \\\n+               \".* is located 0 bytes after 10-byte region\");  \\\n   close(fd);                                                             \\\n   delete [] x;                                                           \\\n \n@@ -976,36 +976,36 @@ TEST(AddressSanitizer, GlobalTest) {\n   glob5[Ident(4)] = 0;\n \n   EXPECT_DEATH(glob5[Ident(5)] = 0,\n-               \"0 bytes to the right of global variable.*glob5.* size 5\");\n+               \"0 bytes after global variable.*glob5.* size 5\");\n   EXPECT_DEATH(glob5[Ident(5+6)] = 0,\n-               \"6 bytes to the right of global variable.*glob5.* size 5\");\n+               \"6 bytes after global variable.*glob5.* size 5\");\n   Ident(static110);  // avoid optimizations\n   static110[Ident(0)] = 0;\n   static110[Ident(109)] = 0;\n   EXPECT_DEATH(static110[Ident(110)] = 0,\n-               \"0 bytes to the right of global variable\");\n+               \"0 bytes after global variable\");\n   EXPECT_DEATH(static110[Ident(110+7)] = 0,\n-               \"7 bytes to the right of global variable\");\n+               \"7 bytes after global variable\");\n \n   Ident(func_static15);  // avoid optimizations\n   func_static15[Ident(0)] = 0;\n   EXPECT_DEATH(func_static15[Ident(15)] = 0,\n-               \"0 bytes to the right of global variable\");\n+               \"0 bytes after global variable\");\n   EXPECT_DEATH(func_static15[Ident(15 + 9)] = 0,\n-               \"9 bytes to the right of global variable\");\n+               \"9 bytes after global variable\");\n \n   Ident(fs1);\n   Ident(fs2);\n   Ident(fs3);\n \n   // We don't create left redzones, so this is not 100% guaranteed to fail.\n   // But most likely will.\n-  EXPECT_DEATH(fs2[Ident(-1)] = 0, \"is located.*of global variable\");\n+  EXPECT_DEATH(fs2[Ident(-1)] = 0, \"is located.*global variable\");\n \n   EXPECT_DEATH(Ident(Ident(ConstGlob)[8]),\n-               \"is located 1 bytes to the right of .*ConstGlob\");\n+               \"is located 1 bytes after .*ConstGlob\");\n   EXPECT_DEATH(Ident(Ident(StaticConstGlob)[5]),\n-               \"is located 2 bytes to the right of .*StaticConstGlob\");\n+               \"is located 2 bytes after .*StaticConstGlob\");\n \n   // call stuff from another file.\n   GlobalsTest(0);"}, {"sha": "a43235ba1cbede4e2094bd4dccdec9aa4876b0f9", "filename": "gcc/testsuite/g++.dg/asan/large-func-test-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5468467ceb001d4febf7d0bcffd6c62fdd50a2d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Flarge-func-test-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5468467ceb001d4febf7d0bcffd6c62fdd50a2d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Flarge-func-test-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Flarge-func-test-1.C?ref=f5468467ceb001d4febf7d0bcffd6c62fdd50a2d", "patch": "@@ -40,7 +40,7 @@ int main() {\n // { dg-output \"0x\\[0-9a-f\\]+ at pc 0x\\[0-9a-f\\]+ bp 0x\\[0-9a-f\\]+ sp 0x\\[0-9a-f\\]+\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" }\n // { dg-output \"\\[^\\n\\r]*READ of size 4 at 0x\\[0-9a-f\\]+ thread T0\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" }\n // { dg-output \"    #0 0x\\[0-9a-f\\]+ +(in \\[^\\n\\r]*LargeFunction\\[^\\n\\r]*(large-func-test-1.C:18|\\[^\\n\\r]*:0|\\[^\\n\\r]*\\\\+0x\\[0-9a-z\\]*)|\\[(\\]).*(\\n|\\r\\n|\\r)\" }\n-// { dg-output \"\\[^\\n\\r]*0x\\[0-9a-f\\]+ is located 44 bytes to the right of 400-byte region.*(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"\\[^\\n\\r]*0x\\[0-9a-f\\]+ is located 44 bytes after 400-byte region.*(\\n|\\r\\n|\\r)\" }\n // { dg-output \"\\[^\\n\\r]*allocated by thread T0 here:\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" }\n // { dg-output \"    #0( 0x\\[0-9a-f\\]+ +(in _*(interceptor_|)malloc|\\[(\\])\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" }\n // { dg-output \"    #1|) 0x\\[0-9a-f\\]+ +(in (operator new|(wrap|)_*_Zn\\[aw\\]\\[mj\\])|\\[(\\])\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" }"}]}