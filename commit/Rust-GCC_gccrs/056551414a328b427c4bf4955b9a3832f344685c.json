{"sha": "056551414a328b427c4bf4955b9a3832f344685c", "node_id": "C_kwDOANBUbNoAKDA1NjU1MTQxNGEzMjhiNDI3YzRiZjQ5NTViOWEzODMyZjM0NDY4NWM", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-11-30T23:32:50Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-12-01T15:00:33Z"}, "message": "libstdc++: Clear RB tree after moving elements [PR103501]\n\nIf the allocator-extended move constructor move-constructs each element\ninto the new container, the contents of the old container are left in\nmoved-from states. We cannot know if those states preserve the\ncontainer's ordering and uniqueness guarantees, so just erase all\nmoved-from elements.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/103501\n\t* include/bits/stl_tree.h (_Rb_tree(_Rb_tree&&, false_type)):\n\tClear container if elements have been moved-from.\n\t* testsuite/23_containers/map/allocator/move_cons.cc: Expect\n\tmoved-from container to be empty.\n\t* testsuite/23_containers/multimap/allocator/move_cons.cc:\n\tLikewise.\n\t* testsuite/23_containers/multiset/allocator/103501.cc: New test.\n\t* testsuite/23_containers/set/allocator/103501.cc: New test.", "tree": {"sha": "d13b6156601699c3c45d360aceea73da5fa4320c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d13b6156601699c3c45d360aceea73da5fa4320c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/056551414a328b427c4bf4955b9a3832f344685c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/056551414a328b427c4bf4955b9a3832f344685c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/056551414a328b427c4bf4955b9a3832f344685c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/056551414a328b427c4bf4955b9a3832f344685c/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74d14778e73dfda365b0ac71478efafd9ad91c2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74d14778e73dfda365b0ac71478efafd9ad91c2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74d14778e73dfda365b0ac71478efafd9ad91c2a"}], "stats": {"total": 74, "additions": 70, "deletions": 4}, "files": [{"sha": "55b8c9c7cb2f72743b592b78b9d66fbb26ea402a", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056551414a328b427c4bf4955b9a3832f344685c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056551414a328b427c4bf4955b9a3832f344685c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=056551414a328b427c4bf4955b9a3832f344685c", "patch": "@@ -1644,9 +1644,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_M_move_data(__x, true_type());\n       else\n \t{\n+\t  constexpr bool __move = !__move_if_noexcept_cond<value_type>::value;\n \t  _Alloc_node __an(*this);\n-\t  _M_root() =\n-\t    _M_copy<!__move_if_noexcept_cond<value_type>::value>(__x, __an);\n+\t  _M_root() = _M_copy<__move>(__x, __an);\n+\t  if _GLIBCXX17_CONSTEXPR (__move)\n+\t    __x.clear();\n \t}\n     }\n "}, {"sha": "b82d35321351d0b50e5f00762ebe266524a60694", "filename": "libstdc++-v3/testsuite/23_containers/map/allocator/move_cons.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056551414a328b427c4bf4955b9a3832f344685c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fallocator%2Fmove_cons.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056551414a328b427c4bf4955b9a3832f344685c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fallocator%2Fmove_cons.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fallocator%2Fmove_cons.cc?ref=056551414a328b427c4bf4955b9a3832f344685c", "patch": "@@ -41,7 +41,7 @@ void test01()\n   VERIFY(1 == v1.get_allocator().get_personality());\n   VERIFY(2 == v2.get_allocator().get_personality());\n \n-  VERIFY( v1[1].empty() );\n+  VERIFY( v1.empty() );\n   VERIFY( v2[1] == str );\n }\n "}, {"sha": "37db0f005d14449f4b950280caf8e9fd61d09af5", "filename": "libstdc++-v3/testsuite/23_containers/multimap/allocator/move_cons.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056551414a328b427c4bf4955b9a3832f344685c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fallocator%2Fmove_cons.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056551414a328b427c4bf4955b9a3832f344685c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fallocator%2Fmove_cons.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fallocator%2Fmove_cons.cc?ref=056551414a328b427c4bf4955b9a3832f344685c", "patch": "@@ -41,7 +41,7 @@ void test01()\n   VERIFY(1 == v1.get_allocator().get_personality());\n   VERIFY(2 == v2.get_allocator().get_personality());\n \n-  VERIFY( v1.begin()->second.empty() );\n+  VERIFY( v1.empty() );\n   VERIFY( v2.begin()->second == str );\n }\n "}, {"sha": "24f657ecebabd39968ed6ae8c80a854b2caa796c", "filename": "libstdc++-v3/testsuite/23_containers/multiset/allocator/103501.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056551414a328b427c4bf4955b9a3832f344685c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fallocator%2F103501.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056551414a328b427c4bf4955b9a3832f344685c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fallocator%2F103501.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fallocator%2F103501.cc?ref=056551414a328b427c4bf4955b9a3832f344685c", "patch": "@@ -0,0 +1,32 @@\n+// { dg-do run { target c++11 } }\n+\n+// PR libstdc++/103501\n+\n+#include <set>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+\n+struct Y\n+{\n+  int i;\n+\n+  Y(int i) : i(i) { }\n+  Y(const Y& y) noexcept : i(y.i) { }\n+  Y(Y&& y) noexcept : i(y.i) { y.i = -y.i; }\n+\n+  bool operator<(const Y& rhs) const { return i < rhs.i; }\n+};\n+\n+int main()\n+{\n+  using Alloc = __gnu_test::uneq_allocator<Y>;\n+  std::multiset<Y, std::less<Y>, Alloc> s1{ {1, 2, 3}, Alloc(1)};\n+  std::multiset<Y, std::less<Y>, Alloc> s2{ std::move(s1), Alloc(2) };\n+  const Y* prev = nullptr;\n+  for (const Y& y : s1)\n+  {\n+    if (prev)\n+      VERIFY( !(y < *prev) );\n+    prev = &y;\n+  }\n+}"}, {"sha": "7267cf9663fb70e92630c67366542c59f1a7bf1d", "filename": "libstdc++-v3/testsuite/23_containers/set/allocator/103501.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056551414a328b427c4bf4955b9a3832f344685c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fallocator%2F103501.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056551414a328b427c4bf4955b9a3832f344685c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fallocator%2F103501.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fallocator%2F103501.cc?ref=056551414a328b427c4bf4955b9a3832f344685c", "patch": "@@ -0,0 +1,32 @@\n+// { dg-do run { target c++11 } }\n+\n+// PR libstdc++/103501\n+\n+#include <set>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+\n+struct X\n+{\n+  int i;\n+\n+  X(int i) : i(i) { }\n+  X(const X& x) noexcept : i(x.i) { }\n+  X(X&& x) noexcept : i(x.i) { x.i = -1; }\n+\n+  bool operator<(const X& rhs) const { return i < rhs.i; }\n+};\n+\n+int main()\n+{\n+  using Alloc = __gnu_test::uneq_allocator<X>;\n+  std::set<X, std::less<X>, Alloc> s1{ {1, 2, 3}, Alloc(1)};\n+  std::set<X, std::less<X>, Alloc> s2{ std::move(s1), Alloc(2) };\n+  const X* prev = nullptr;\n+  for (const X& x : s1)\n+  {\n+    if (prev)\n+      VERIFY( *prev < x );\n+    prev = &x;\n+  }\n+}"}]}