{"sha": "bb29d95124e4238dd2eef64a67e21bdb8f6412a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmIyOWQ5NTEyNGU0MjM4ZGQyZWVmNjRhNjdlMjFiZGI4ZjY0MTJhOA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-11-08T13:54:41Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-11-08T13:54:41Z"}, "message": "tree-cfg.c, [...]: Replace TREE_CHAIN with PHI_CHAIN where appropriate.\n\n\t* tree-cfg.c, tree-if-conv.c, tree-into-ssa.c,\n\ttree-scalar-evolution.c, tree-ssa-loop-im.c,\n\ttree-ssa-loop-ivopts.c, tree-ssa-loop-manip.c, tree-ssa.c,\n\ttree-vectorizer.c: Replace TREE_CHAIN with PHI_CHAIN where\n\tappropriate.\n\nFrom-SVN: r90262", "tree": {"sha": "f672afb273632e5ba2016d698a21cf2e5fcfa318", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f672afb273632e5ba2016d698a21cf2e5fcfa318"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb29d95124e4238dd2eef64a67e21bdb8f6412a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb29d95124e4238dd2eef64a67e21bdb8f6412a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb29d95124e4238dd2eef64a67e21bdb8f6412a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb29d95124e4238dd2eef64a67e21bdb8f6412a8/comments", "author": null, "committer": null, "parents": [{"sha": "1590235e1e2dfc3dc956501830780d1f680085b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1590235e1e2dfc3dc956501830780d1f680085b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1590235e1e2dfc3dc956501830780d1f680085b3"}], "stats": {"total": 78, "additions": 43, "deletions": 35}, "files": [{"sha": "9827936bc104d53b4f2332eaa14c01ec088e67a6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb29d95124e4238dd2eef64a67e21bdb8f6412a8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb29d95124e4238dd2eef64a67e21bdb8f6412a8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bb29d95124e4238dd2eef64a67e21bdb8f6412a8", "patch": "@@ -1,3 +1,11 @@\n+2004-11-08  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* tree-cfg.c, tree-if-conv.c, tree-into-ssa.c,\n+\ttree-scalar-evolution.c, tree-ssa-loop-im.c,\n+\ttree-ssa-loop-ivopts.c, tree-ssa-loop-manip.c, tree-ssa.c,\n+\ttree-vectorizer.c: Replace TREE_CHAIN with PHI_CHAIN where\n+\tappropriate.\n+\n 2004-11-08  Ben Elliston  <bje@au.ibm.com>\n \n \t* cgraph.h (cgraph_calls_p): Remove."}, {"sha": "0e6b55dabcbc5f636cd576c75c23692d3bb5a897", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb29d95124e4238dd2eef64a67e21bdb8f6412a8/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb29d95124e4238dd2eef64a67e21bdb8f6412a8/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=bb29d95124e4238dd2eef64a67e21bdb8f6412a8", "patch": "@@ -4279,7 +4279,7 @@ tree_duplicate_bb (basic_block bb)\n   /* First copy the phi nodes.  We do not copy phi node arguments here,\n      since the edges are not ready yet.  Keep the chain of phi nodes in\n      the same order, so that we can add them later.  */\n-  for (phi = phi_nodes (bb); phi; phi = TREE_CHAIN (phi))\n+  for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n     {\n       mark_for_rewrite (PHI_RESULT (phi));\n       create_phi_node (PHI_RESULT (phi), new_bb);\n@@ -4501,7 +4501,7 @@ rewrite_to_new_ssa_names_bb (basic_block bb, htab_t map)\n     if (e->flags & EDGE_ABNORMAL)\n       break;\n \n-  for (phi = phi_nodes (bb); phi; phi = TREE_CHAIN (phi))\n+  for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n     {\n       rewrite_to_new_ssa_names_def (PHI_RESULT_PTR (phi), phi, map);\n       if (e)\n@@ -4546,7 +4546,7 @@ rewrite_to_new_ssa_names_bb (basic_block bb, htab_t map)\n     }\n \n   FOR_EACH_EDGE (e, ei, bb->succs)\n-    for (phi = phi_nodes (e->dest); phi; phi = TREE_CHAIN (phi))\n+    for (phi = phi_nodes (e->dest); phi; phi = PHI_CHAIN (phi))\n       {\n \trewrite_to_new_ssa_names_use\n \t\t(PHI_ARG_DEF_PTR_FROM_EDGE (phi, e), map);"}, {"sha": "89592f0ce2aafc55229d521fd813e9a1d0844e0b", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb29d95124e4238dd2eef64a67e21bdb8f6412a8/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb29d95124e4238dd2eef64a67e21bdb8f6412a8/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=bb29d95124e4238dd2eef64a67e21bdb8f6412a8", "patch": "@@ -591,7 +591,7 @@ if_convertable_loop_p (struct loop *loop, bool for_vectorizer ATTRIBUTE_UNUSED)\n       /* ??? Check data dependency for vectorizer.  */\n \n       /* What about phi nodes ? */\n-      for (phi = phi_nodes (bb); phi; phi = TREE_CHAIN (phi))\n+      for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n \tif (!if_convertable_phi_p (loop, bb, phi))\n \t  return false;\n "}, {"sha": "3eea96eb1820739974bb6b8f6ba1c871c3837b5b", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb29d95124e4238dd2eef64a67e21bdb8f6412a8/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb29d95124e4238dd2eef64a67e21bdb8f6412a8/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=bb29d95124e4238dd2eef64a67e21bdb8f6412a8", "patch": "@@ -298,7 +298,7 @@ ssa_mark_def_sites_initialize_block (struct dom_walk_data *walk_data,\n \n   sbitmap_zero (kills);\n \n-  for (phi = phi_nodes (bb); phi; phi = TREE_CHAIN (phi))\n+  for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n     {\n       def = PHI_RESULT (phi);\n       def_uid = SSA_NAME_VERSION (def);\n@@ -328,7 +328,7 @@ ssa_mark_phi_uses (struct dom_walk_data *walk_data, basic_block bb)\n       if (e->dest == EXIT_BLOCK_PTR)\n \tcontinue;\n \n-      for (phi = phi_nodes (e->dest); phi; phi = TREE_CHAIN (phi))\n+      for (phi = phi_nodes (e->dest); phi; phi = PHI_CHAIN (phi))\n \t{\n \t  use = PHI_ARG_DEF_FROM_EDGE (phi, e);\n \t  if (TREE_CODE (use) != SSA_NAME)\n@@ -748,7 +748,7 @@ ssa_rewrite_initialize_block (struct dom_walk_data *walk_data, basic_block bb)\n   /* Step 1.  Register new definitions for every PHI node in the block.\n      Conceptually, all the PHI nodes are executed in parallel and each PHI\n      node introduces a new version for the associated variable.  */\n-  for (phi = phi_nodes (bb); phi; phi = TREE_CHAIN (phi))\n+  for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n     {\n       tree result = PHI_RESULT (phi);\n \n@@ -783,7 +783,7 @@ rewrite_add_phi_arguments (struct dom_walk_data *walk_data ATTRIBUTE_UNUSED,\n     {\n       tree phi;\n \n-      for (phi = phi_nodes (e->dest); phi; phi = TREE_CHAIN (phi))\n+      for (phi = phi_nodes (e->dest); phi; phi = PHI_CHAIN (phi))\n \t{\n \t  tree currdef;\n \n@@ -818,7 +818,7 @@ rewrite_virtual_phi_arguments (struct dom_walk_data *walk_data ATTRIBUTE_UNUSED,\n       if (e->dest == EXIT_BLOCK_PTR)\n \tcontinue;\n \n-      for (phi = phi_nodes (e->dest); phi; phi = TREE_CHAIN (phi))\n+      for (phi = phi_nodes (e->dest); phi; phi = PHI_CHAIN (phi))\n \t{\n \t  tree result = PHI_RESULT (phi);\n \t  op = PHI_ARG_DEF_PTR_FROM_EDGE (phi, e);\n@@ -852,7 +852,7 @@ ssa_rewrite_phi_arguments (struct dom_walk_data *walk_data, basic_block bb)\n       if (e->dest == EXIT_BLOCK_PTR)\n \tcontinue;\n \n-      for (phi = phi_nodes (e->dest); phi; phi = TREE_CHAIN (phi))\n+      for (phi = phi_nodes (e->dest); phi; phi = PHI_CHAIN (phi))\n \t{\n \t  op = PHI_ARG_DEF_PTR_FROM_EDGE (phi, e);\n \t  if (TREE_CODE (USE_FROM_PTR (op)) != SSA_NAME)"}, {"sha": "7d97d92dce2ccf0b8a21ba4ffe2f4903a8951183", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb29d95124e4238dd2eef64a67e21bdb8f6412a8/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb29d95124e4238dd2eef64a67e21bdb8f6412a8/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=bb29d95124e4238dd2eef64a67e21bdb8f6412a8", "patch": "@@ -2374,7 +2374,7 @@ analyze_scalar_evolution_for_all_loop_phi_nodes (varray_type exit_conditions)\n       loop = loop_containing_stmt (VARRAY_TREE (exit_conditions, i));\n       bb = loop->header;\n       \n-      for (phi = phi_nodes (bb); phi; phi = TREE_CHAIN (phi))\n+      for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n \tif (is_gimple_reg (PHI_RESULT (phi)))\n \t  {\n \t    chrec = instantiate_parameters "}, {"sha": "d04d095828e4f41c3330c099fcfa007b6fc02ac3", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb29d95124e4238dd2eef64a67e21bdb8f6412a8/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb29d95124e4238dd2eef64a67e21bdb8f6412a8/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=bb29d95124e4238dd2eef64a67e21bdb8f6412a8", "patch": "@@ -1239,7 +1239,7 @@ determine_lsm_loop (struct loop *loop)\n       return;\n     }\n \n-  for (phi = phi_nodes (loop->header); phi; phi = TREE_CHAIN (phi))\n+  for (phi = phi_nodes (loop->header); phi; phi = PHI_CHAIN (phi))\n     determine_lsm_reg (loop, exits, n_exits, PHI_RESULT (phi));\n \n   free (exits);"}, {"sha": "b769c46d8df994abb121b1235144f6ee68c1f7c0", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb29d95124e4238dd2eef64a67e21bdb8f6412a8/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb29d95124e4238dd2eef64a67e21bdb8f6412a8/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=bb29d95124e4238dd2eef64a67e21bdb8f6412a8", "patch": "@@ -805,7 +805,7 @@ find_bivs (struct ivopts_data *data)\n   bool found = false;\n   struct loop *loop = data->current_loop;\n \n-  for (phi = phi_nodes (loop->header); phi; phi = TREE_CHAIN (phi))\n+  for (phi = phi_nodes (loop->header); phi; phi = PHI_CHAIN (phi))\n     {\n       if (SSA_NAME_OCCURS_IN_ABNORMAL_PHI (PHI_RESULT (phi)))\n \tcontinue;\n@@ -848,7 +848,7 @@ mark_bivs (struct ivopts_data *data)\n   struct loop *loop = data->current_loop;\n   basic_block incr_bb;\n \n-  for (phi = phi_nodes (loop->header); phi; phi = TREE_CHAIN (phi))\n+  for (phi = phi_nodes (loop->header); phi; phi = PHI_CHAIN (phi))\n     {\n       iv = get_iv (data, PHI_RESULT (phi));\n       if (!iv)\n@@ -1510,7 +1510,7 @@ find_interesting_uses_outside (struct ivopts_data *data, edge exit)\n {\n   tree phi, def;\n \n-  for (phi = phi_nodes (exit->dest); phi; phi = TREE_CHAIN (phi))\n+  for (phi = phi_nodes (exit->dest); phi; phi = PHI_CHAIN (phi))\n     {\n       def = PHI_ARG_DEF_FROM_EDGE (phi, exit);\n       find_interesting_uses_outer (data, def);\n@@ -1543,7 +1543,7 @@ find_interesting_uses (struct ivopts_data *data)\n \t    && !flow_bb_inside_loop_p (data->current_loop, e->dest))\n \t  find_interesting_uses_outside (data, e);\n \n-      for (phi = phi_nodes (bb); phi; phi = TREE_CHAIN (phi))\n+      for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n \tfind_interesting_uses_stmt (data, phi);\n       for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))\n \tfind_interesting_uses_stmt (data, bsi_stmt (bsi));\n@@ -3415,7 +3415,7 @@ determine_set_costs (struct ivopts_data *data)\n     }\n \n   n = 0;\n-  for (phi = phi_nodes (loop->header); phi; phi = TREE_CHAIN (phi))\n+  for (phi = phi_nodes (loop->header); phi; phi = PHI_CHAIN (phi))\n     {\n       op = PHI_RESULT (phi);\n \n@@ -4169,7 +4169,7 @@ protect_loop_closed_ssa_form_use (edge exit, use_operand_p op_p)\n     return;\n \n   /* Try finding a phi node that copies the value out of the loop.  */\n-  for (phi = phi_nodes (exit->dest); phi; phi = TREE_CHAIN (phi))\n+  for (phi = phi_nodes (exit->dest); phi; phi = PHI_CHAIN (phi))\n     if (PHI_ARG_DEF_FROM_EDGE (phi, exit) == use)\n       break;\n \n@@ -4303,7 +4303,7 @@ rewrite_use_outer (struct ivopts_data *data,\n       if (stmts && name_info (data, tgt)->preserve_biv)\n \treturn;\n \n-      for (phi = phi_nodes (exit->dest); phi; phi = TREE_CHAIN (phi))\n+      for (phi = phi_nodes (exit->dest); phi; phi = PHI_CHAIN (phi))\n \t{\n \t  use_operand_p use_p = PHI_ARG_DEF_PTR_FROM_EDGE (phi, exit);\n "}, {"sha": "56fa002c5a72e71a3b09d99e6e59d2550e64b540", "filename": "gcc/tree-ssa-loop-manip.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb29d95124e4238dd2eef64a67e21bdb8f6412a8/gcc%2Ftree-ssa-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb29d95124e4238dd2eef64a67e21bdb8f6412a8/gcc%2Ftree-ssa-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-manip.c?ref=bb29d95124e4238dd2eef64a67e21bdb8f6412a8", "patch": "@@ -272,7 +272,7 @@ find_uses_to_rename (bitmap *use_blocks)\n \n   FOR_EACH_BB (bb)\n     {\n-      for (phi = phi_nodes (bb); phi; phi = TREE_CHAIN (phi))\n+      for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n \tfor (i = 0; i < (unsigned) PHI_NUM_ARGS (phi); i++)\n \t  find_uses_to_rename_use (PHI_ARG_EDGE (phi, i)->src,\n \t\t\t\t   PHI_ARG_DEF (phi, i), use_blocks);\n@@ -383,7 +383,7 @@ verify_loop_closed_ssa (void)\n \n   FOR_EACH_BB (bb)\n     {\n-      for (phi = phi_nodes (bb); phi; phi = TREE_CHAIN (phi))\n+      for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n \tfor (i = 0; i < (unsigned) PHI_NUM_ARGS (phi); i++)\n \t  check_loop_closed_ssa_use (PHI_ARG_EDGE (phi, i)->src,\n \t\t\t\t     PHI_ARG_DEF (phi, i));\n@@ -404,7 +404,7 @@ split_loop_exit_edge (edge exit)\n   tree phi, new_phi, new_name, name;\n   use_operand_p op_p;\n \n-  for (phi = phi_nodes (dest); phi; phi = TREE_CHAIN (phi))\n+  for (phi = phi_nodes (dest); phi; phi = PHI_CHAIN (phi))\n     {\n       op_p = PHI_ARG_DEF_PTR_FROM_EDGE (phi, EDGE_SUCC (bb, 0));\n \n@@ -567,7 +567,7 @@ set_phi_def_stmts (basic_block bb)\n {\n   tree phi;\n \n-  for (phi = phi_nodes (bb); phi; phi = TREE_CHAIN (phi))\n+  for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n     SSA_NAME_DEF_STMT (PHI_RESULT (phi)) = phi;\n }\n "}, {"sha": "024f8593257c250906d39b1cd761b53d85ca7b38", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb29d95124e4238dd2eef64a67e21bdb8f6412a8/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb29d95124e4238dd2eef64a67e21bdb8f6412a8/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=bb29d95124e4238dd2eef64a67e21bdb8f6412a8", "patch": "@@ -113,7 +113,7 @@ flush_pending_stmts (edge e)\n \n   for (phi = phi_nodes (e->dest), arg = PENDING_STMT (e);\n        phi;\n-       phi = TREE_CHAIN (phi), arg = TREE_CHAIN (arg))\n+       phi = PHI_CHAIN (phi), arg = TREE_CHAIN (arg))\n     {\n       tree def = TREE_VALUE (arg);\n       add_phi_arg (&phi, def, e);\n@@ -1281,7 +1281,7 @@ kill_redundant_phi_nodes (void)\n \n   FOR_EACH_BB (bb)\n     {\n-      for (phi = phi_nodes (bb); phi; phi = TREE_CHAIN (phi))\n+      for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n \t{\n \t  var = PHI_RESULT (phi);\n \t  check_phi_redundancy (phi, eq_to);"}, {"sha": "7c4a24481ee2a9d8309b7cccbe427566ab355f23", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb29d95124e4238dd2eef64a67e21bdb8f6412a8/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb29d95124e4238dd2eef64a67e21bdb8f6412a8/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=bb29d95124e4238dd2eef64a67e21bdb8f6412a8", "patch": "@@ -353,7 +353,7 @@ rename_variables_in_bb (basic_block bb)\n   edge e;\n   edge_iterator ei;\n \n-  for (phi = phi_nodes (bb); phi; phi = TREE_CHAIN (phi))\n+  for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n     rename_def_op (PHI_RESULT_PTR (phi), phi);\n \n   for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))\n@@ -390,7 +390,7 @@ rename_variables_in_bb (basic_block bb)\n     }\n \n   FOR_EACH_EDGE (e, ei, bb->succs)\n-    for (phi = phi_nodes (e->dest); phi; phi = TREE_CHAIN (phi))\n+    for (phi = phi_nodes (e->dest); phi; phi = PHI_CHAIN (phi))\n       rename_use_op (PHI_ARG_DEF_PTR_FROM_EDGE (phi, e));\n }\n \n@@ -449,8 +449,8 @@ copy_phi_nodes (struct loop *loop, struct loop *new_loop,\n   for (phi = phi_nodes (loop->header),\n \t new_phi = phi_nodes (new_loop->header);\n        phi;\n-       phi = TREE_CHAIN (phi),\n-\t new_phi = TREE_CHAIN (new_phi))\n+       phi = PHI_CHAIN (phi),\n+\t new_phi = PHI_CHAIN (new_phi))\n     {\n       new_e = loop_preheader_edge (new_loop);\n       def = PHI_ARG_DEF_FROM_EDGE (phi, e);\n@@ -557,7 +557,7 @@ update_phi_nodes_for_guard (edge guard_true_edge, struct loop * loop)\n {\n   tree phi, phi1;\n \n-  for (phi = phi_nodes (loop->header); phi; phi = TREE_CHAIN (phi))\n+  for (phi = phi_nodes (loop->header); phi; phi = PHI_CHAIN (phi))\n       {\n \ttree new_phi;\n \ttree phi_arg;\n@@ -695,7 +695,7 @@ tree_duplicate_loop_to_edge_cfg (struct loop *loop, struct loops *loops,\n \n   /* Duplicating phi args at exit bbs as coming \n      also from exit of duplicated loop.  */\n-  for (phi = phi_nodes (exit_dest); phi; phi = TREE_CHAIN (phi))\n+  for (phi = phi_nodes (exit_dest); phi; phi = PHI_CHAIN (phi))\n     {\n       phi_arg = PHI_ARG_DEF_FROM_EDGE (phi, loop->exit_edges[0]);\n       if (phi_arg)\n@@ -736,7 +736,7 @@ tree_duplicate_loop_to_edge_cfg (struct loop *loop, struct loops *loops,\n \n       /* We have to add phi args to the loop->header here as coming \n \t from new_exit_e edge.  */\n-      for (phi = phi_nodes (loop->header); phi; phi = TREE_CHAIN (phi))\n+      for (phi = phi_nodes (loop->header); phi; phi = PHI_CHAIN (phi))\n \t{\n \t  phi_arg = PHI_ARG_DEF_FROM_EDGE (phi, entry_e);\n \t  if (phi_arg)\n@@ -2913,7 +2913,7 @@ vect_update_ivs_after_vectorizer (struct loop *loop, tree niters)\n   \n   loop->exit_edges[0] = EDGE_PRED (new_bb, 0);\n   \n-  for (phi = phi_nodes (loop->header); phi; phi = TREE_CHAIN (phi))\n+  for (phi = phi_nodes (loop->header); phi; phi = PHI_CHAIN (phi))\n     {\n       tree access_fn = NULL;\n       tree evolution_part;\n@@ -3731,7 +3731,7 @@ vect_analyze_scalar_cycles (loop_vec_info loop_vinfo)\n   if (vect_debug_details (NULL))\n     fprintf (dump_file, \"\\n<<vect_analyze_scalar_cycles>>\\n\");\n \n-  for (phi = phi_nodes (bb); phi; phi = TREE_CHAIN (phi))\n+  for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n     {\n       tree access_fn = NULL;\n \n@@ -5351,7 +5351,7 @@ vect_analyze_loop_with_symbolic_num_of_iters (tree niters,\n    \n   /* Analyze phi functions of the loop header.  */\n \n-  for (phi = phi_nodes (bb); phi; phi = TREE_CHAIN (phi))\n+  for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n     {\n       tree access_fn = NULL;\n       tree evolution_part;"}]}