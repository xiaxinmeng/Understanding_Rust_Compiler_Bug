{"sha": "7a61c8e37c5675a28e35cf3471ae054891d272e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2E2MWM4ZTM3YzU2NzVhMjhlMzVjZjM0NzFhZTA1NDg5MWQyNzJlNA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-05-12T04:55:43Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-05-12T04:55:43Z"}, "message": "(call_insn_operand): New funcion.\n\nFrom-SVN: r4430", "tree": {"sha": "a01d60ec61c8038b9af9a712e00fb914ef4a40d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a01d60ec61c8038b9af9a712e00fb914ef4a40d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a61c8e37c5675a28e35cf3471ae054891d272e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a61c8e37c5675a28e35cf3471ae054891d272e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a61c8e37c5675a28e35cf3471ae054891d272e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a61c8e37c5675a28e35cf3471ae054891d272e4/comments", "author": null, "committer": null, "parents": [{"sha": "bd96cb7805f5674f8c582908b43a6a98c2b7f72c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd96cb7805f5674f8c582908b43a6a98c2b7f72c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd96cb7805f5674f8c582908b43a6a98c2b7f72c"}], "stats": {"total": 20, "additions": 20, "deletions": 0}, "files": [{"sha": "0652e0878559601e4e178b736d8f19384eb03604", "filename": "gcc/config/i860/i860.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a61c8e37c5675a28e35cf3471ae054891d272e4/gcc%2Fconfig%2Fi860%2Fi860.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a61c8e37c5675a28e35cf3471ae054891d272e4/gcc%2Fconfig%2Fi860%2Fi860.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860.c?ref=7a61c8e37c5675a28e35cf3471ae054891d272e4", "patch": "@@ -468,6 +468,26 @@ logic_int (op, mode)\n {\n   return (GET_CODE (op) == CONST_INT && LOGIC_INT (op));\n }\n+\n+/* Test for a valid operand for a call instruction.\n+   Don't allow the arg pointer register or virtual regs\n+   since they may change into reg + const, which the patterns\n+   can't handle yet.  */\n+\n+int\n+call_insn_operand (op, mode)\n+     rtx op;\n+     enum machine_mode mode;\n+{\n+  if (GET_CODE (op) == MEM\n+      && (CONSTANT_ADDRESS_P (XEXP (op, 0))\n+\t  || (GET_CODE (XEXP (op, 0)) == REG\n+\t      && XEXP (op, 0) != arg_pointer_rtx\n+\t      && !(REGNO (XEXP (op, 0)) >= FIRST_PSEUDO_REGISTER\n+\t\t   && REGNO (XEXP (op, 0)) <= LAST_VIRTUAL_REGISTER))))\n+    return 1;\n+  return 0;\n+}\n \f\n /* Return the best assembler insn template\n    for moving operands[1] into operands[0] as a fullword.  */"}]}