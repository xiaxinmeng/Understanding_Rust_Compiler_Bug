{"sha": "52a7e4c62d3073c03089d5b439000e889923831f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTJhN2U0YzYyZDMwNzNjMDMwODlkNWI0MzkwMDBlODg5OTIzODMxZg==", "commit": {"author": {"name": "Matt Austern", "email": "austern@apple.com", "date": "2005-02-18T23:09:02Z"}, "committer": {"name": "Matt Austern", "email": "austern@gcc.gnu.org", "date": "2005-02-18T23:09:02Z"}, "message": "array_syntax.cc: Fix test case to use assignment instead of ==\n\n\t* testsuite/tr1/6_containers/unordered/insert/array_syntax.cc: Fix\n\ttest case to use assignment instead of ==\n\t* testsuite/tr1/6_containers/unordered/insert/map_range.cc: New test.\n\t* testsuite/tr1/6_containers/unordered/insert/multimap_range.cc: New test.\n\t* testsuite/tr1/6_containers/unordered/insert/multiset_range.cc: New test.\n\t* testsuite/tr1/6_containers/unordered/insert/set_range.cc: New test.\n\nFrom-SVN: r95240", "tree": {"sha": "3c01ce6207fb2da6b1b3f30ab508ffb6354396bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c01ce6207fb2da6b1b3f30ab508ffb6354396bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52a7e4c62d3073c03089d5b439000e889923831f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52a7e4c62d3073c03089d5b439000e889923831f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52a7e4c62d3073c03089d5b439000e889923831f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52a7e4c62d3073c03089d5b439000e889923831f/comments", "author": null, "committer": null, "parents": [{"sha": "a7138657eef7fc75b0bed667e0903c25f8d80ea5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7138657eef7fc75b0bed667e0903c25f8d80ea5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7138657eef7fc75b0bed667e0903c25f8d80ea5"}], "stats": {"total": 364, "additions": 363, "deletions": 1}, "files": [{"sha": "e54c43b3930454a57fbb17e50c254d1d8ef51571", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52a7e4c62d3073c03089d5b439000e889923831f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52a7e4c62d3073c03089d5b439000e889923831f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=52a7e4c62d3073c03089d5b439000e889923831f", "patch": "@@ -1,3 +1,11 @@\n+2005-02-18  Matt Austern  <austern@apple.com>\n+\t* testsuite/tr1/6_containers/unordered/insert/array_syntax.cc: Fix\n+\ttest case to use assignment instead of ==\n+\t* testsuite/tr1/6_containers/unordered/insert/map_range.cc: New test.\n+\t* testsuite/tr1/6_containers/unordered/insert/multimap_range.cc: New test.\n+\t* testsuite/tr1/6_containers/unordered/insert/multiset_range.cc: New test.\n+\t* testsuite/tr1/6_containers/unordered/insert/set_range.cc: New test.\n+\t\n 2005-02-18  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* testsuite/thread/pthread1.cc: Do not invoke pthread_setconcurrency"}, {"sha": "f0e614b35775e9a20eadaf132f6b456725682fdc", "filename": "libstdc++-v3/testsuite/tr1/6_containers/unordered/insert/array_syntax.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52a7e4c62d3073c03089d5b439000e889923831f/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Finsert%2Farray_syntax.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52a7e4c62d3073c03089d5b439000e889923831f/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Finsert%2Farray_syntax.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Finsert%2Farray_syntax.cc?ref=52a7e4c62d3073c03089d5b439000e889923831f", "patch": "@@ -44,7 +44,7 @@ void test01()\n   VERIFY(m.begin()->second == 17);\n   VERIFY(m[\"red\"] == 17);\n \n-  m[\"blue\"] == 9;\n+  m[\"blue\"] = 9;\n   VERIFY(m.size() == 2);\n   VERIFY(m[\"blue\"] == 9);\n "}, {"sha": "7f8645b43c938b513e0235c6a14bb1cee2d4e831", "filename": "libstdc++-v3/testsuite/tr1/6_containers/unordered/insert/map_range.cc", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52a7e4c62d3073c03089d5b439000e889923831f/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Finsert%2Fmap_range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52a7e4c62d3073c03089d5b439000e889923831f/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Finsert%2Fmap_range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Finsert%2Fmap_range.cc?ref=52a7e4c62d3073c03089d5b439000e889923831f", "patch": "@@ -0,0 +1,99 @@\n+// { dg-do run }\n+\n+// 2005-2-17  Matt Austern  <austern@apple.com>\n+//\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 6.3.4.4 unordered_map\n+// range insert\n+\n+#include <string>\n+#include <iterator>\n+#include <algorithm>\n+#include <tr1/unordered_map>\n+#include \"testsuite_hooks.h\"\n+\n+bool test __attribute__((unused)) = true;\n+\n+void test01()\n+{\n+  typedef std::tr1::unordered_map<std::string, int> Map;\n+  typedef std::pair<const std::string, int> Pair;\n+\n+  Map m;\n+  VERIFY(m.empty());\n+\n+  Pair A[5] =\n+    {\n+      Pair(\"red\", 5),\n+      Pair(\"green\", 9),\n+      Pair(\"blue\", 3),\n+      Pair(\"cyan\", 8),\n+      Pair(\"magenta\", 7)\n+    };\n+\n+  m.insert(A+0, A+5);\n+  VERIFY(m.size() == 5);\n+  VERIFY(std::distance(m.begin(), m.end()) == 5);\n+\n+  VERIFY(m[\"red\"] == 5);\n+  VERIFY(m[\"green\"] == 9);\n+  VERIFY(m[\"blue\"] == 3);\n+  VERIFY(m[\"cyan\"] == 8);\n+  VERIFY(m[\"magenta\"] == 7);\n+}\n+\n+void test02()\n+{\n+  typedef std::tr1::unordered_map<std::string, int> Map;\n+  typedef std::pair<const std::string, int> Pair;\n+\n+  Map m;\n+  VERIFY(m.empty());\n+\n+  Pair A[9] =\n+    {\n+      Pair(\"red\", 5),\n+      Pair(\"green\", 9),\n+      Pair(\"red\", 19),\n+      Pair(\"blue\", 3),\n+      Pair(\"blue\", 60),\n+      Pair(\"cyan\", 8),\n+      Pair(\"magenta\", 7),\n+      Pair(\"blue\", 99),\n+      Pair(\"green\", 33)\n+    };\n+\n+  m.insert(A+0, A+9);\n+  VERIFY(m.size() == 5);\n+  VERIFY(std::distance(m.begin(), m.end()) == 5);\n+\n+  VERIFY(m[\"red\"] == 5);\n+  VERIFY(m[\"green\"] == 9);\n+  VERIFY(m[\"blue\"] == 3);\n+  VERIFY(m[\"cyan\"] == 8);\n+  VERIFY(m[\"magenta\"] == 7);\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}, {"sha": "cbc403a5d2e29bc31a20138bb88d0825700ad87d", "filename": "libstdc++-v3/testsuite/tr1/6_containers/unordered/insert/multimap_range.cc", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52a7e4c62d3073c03089d5b439000e889923831f/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Finsert%2Fmultimap_range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52a7e4c62d3073c03089d5b439000e889923831f/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Finsert%2Fmultimap_range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Finsert%2Fmultimap_range.cc?ref=52a7e4c62d3073c03089d5b439000e889923831f", "patch": "@@ -0,0 +1,93 @@\n+// { dg-do run }\n+\n+// 2005-2-17  Matt Austern  <austern@apple.com>\n+//\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 6.3.4.6 unordered_multimap\n+// range insert\n+\n+#include <string>\n+#include <iterator>\n+#include <algorithm>\n+#include <tr1/unordered_map>\n+#include \"testsuite_hooks.h\"\n+\n+bool test __attribute__((unused)) = true;\n+\n+void test01()\n+{\n+  typedef std::tr1::unordered_multimap<std::string, int> Map;\n+  typedef std::pair<const std::string, int> Pair;\n+\n+  Map m;\n+  VERIFY(m.empty());\n+\n+  Pair A[5] =\n+    {\n+      Pair(\"red\", 5),\n+      Pair(\"green\", 9),\n+      Pair(\"blue\", 3),\n+      Pair(\"cyan\", 8),\n+      Pair(\"magenta\", 7)\n+    };\n+\n+  m.insert(A+0, A+5);\n+  VERIFY(m.size() == 5);\n+  VERIFY(std::distance(m.begin(), m.end()) == 5);\n+\n+  for (int i = 0; i < 5; ++i)\n+    VERIFY(std::find(m.begin(), m.end(), A[i]) != m.end());\n+}\n+\n+void test02()\n+{\n+  typedef std::tr1::unordered_multimap<std::string, int> Map;\n+  typedef std::pair<const std::string, int> Pair;\n+\n+  Map m;\n+  VERIFY(m.empty());\n+\n+  Pair A[9] =\n+    {\n+      Pair(\"red\", 5),\n+      Pair(\"green\", 9),\n+      Pair(\"red\", 19),\n+      Pair(\"blue\", 3),\n+      Pair(\"blue\", 60),\n+      Pair(\"cyan\", 8),\n+      Pair(\"magenta\", 7),\n+      Pair(\"blue\", 99),\n+      Pair(\"green\", 33)\n+    };\n+\n+  m.insert(A+0, A+9);\n+  VERIFY(m.size() == 9);\n+  VERIFY(std::distance(m.begin(), m.end()) == 9);\n+\n+  for (int i = 0; i < 9; ++i)\n+    VERIFY(std::find(m.begin(), m.end(), A[i]) != m.end());\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}, {"sha": "d7abc0a3847a93515e9c56fadfff84c3225a9f21", "filename": "libstdc++-v3/testsuite/tr1/6_containers/unordered/insert/multiset_range.cc", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52a7e4c62d3073c03089d5b439000e889923831f/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Finsert%2Fmultiset_range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52a7e4c62d3073c03089d5b439000e889923831f/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Finsert%2Fmultiset_range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Finsert%2Fmultiset_range.cc?ref=52a7e4c62d3073c03089d5b439000e889923831f", "patch": "@@ -0,0 +1,81 @@\n+// { dg-do run }\n+\n+// 2005-2-17  Matt Austern  <austern@apple.com>\n+//\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 6.3.4.5 unordered_multiset\n+// range insert\n+\n+#include <string>\n+#include <iterator>\n+#include <algorithm>\n+#include <tr1/unordered_set>\n+#include \"testsuite_hooks.h\"\n+\n+bool test __attribute__((unused)) = true;\n+\n+void test01()\n+{\n+  typedef std::tr1::unordered_multiset<std::string> Set;\n+  Set s;\n+  VERIFY(s.empty());\n+\n+  const int N = 10;\n+  const std::string A[N] = { \"red\", \"green\", \"blue\", \"violet\", \"cyan\",\n+\t\t\t     \"magenta\", \"yellow\", \"orange\", \"pink\", \"gray\" };\n+\n+  s.insert(A+0, A+N);\n+  VERIFY(s.size() == N);\n+  VERIFY(std::distance(s.begin(), s.end()) == N);\n+\n+  for (int i = 0; i < N; ++i) {\n+    std::string str = A[i];\n+    Set::iterator it = std::find(s.begin(), s.end(), str);\n+    VERIFY(it != s.end());\n+  }\n+}\n+\n+void test02()\n+{\n+  typedef std::tr1::unordered_multiset<int> Set;\n+  Set s;\n+  VERIFY(s.empty());\n+\n+  const int N = 8;\n+  const int A[N] = { 3, 7, 4, 8, 2, 4, 6, 7 };\n+\n+  s.insert(A+0, A+N);\n+  VERIFY(s.size() == N);\n+  VERIFY(std::distance(s.begin(), s.end()) == N);\n+\n+  VERIFY(std::count(s.begin(), s.end(), 2) == 1);\n+  VERIFY(std::count(s.begin(), s.end(), 3) == 1);\n+  VERIFY(std::count(s.begin(), s.end(), 4) == 2);\n+  VERIFY(std::count(s.begin(), s.end(), 6) == 1);\n+  VERIFY(std::count(s.begin(), s.end(), 7) == 2);\n+  VERIFY(std::count(s.begin(), s.end(), 8) == 1);\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}, {"sha": "e67dd4da239d0066225be3ff899658c9beabe9bf", "filename": "libstdc++-v3/testsuite/tr1/6_containers/unordered/insert/set_range.cc", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52a7e4c62d3073c03089d5b439000e889923831f/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Finsert%2Fset_range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52a7e4c62d3073c03089d5b439000e889923831f/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Finsert%2Fset_range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Finsert%2Fset_range.cc?ref=52a7e4c62d3073c03089d5b439000e889923831f", "patch": "@@ -0,0 +1,81 @@\n+// { dg-do run }\n+\n+// 2005-2-17  Matt Austern  <austern@apple.com>\n+//\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 6.3.4.3 unordered_set\n+// range insert\n+\n+#include <string>\n+#include <iterator>\n+#include <algorithm>\n+#include <tr1/unordered_set>\n+#include \"testsuite_hooks.h\"\n+\n+bool test __attribute__((unused)) = true;\n+\n+void test01()\n+{\n+  typedef std::tr1::unordered_set<std::string> Set;\n+  Set s;\n+  VERIFY(s.empty());\n+\n+  const int N = 10;\n+  const std::string A[N] = { \"red\", \"green\", \"blue\", \"violet\", \"cyan\",\n+\t\t\t     \"magenta\", \"yellow\", \"orange\", \"pink\", \"gray\" };\n+\n+  s.insert(A+0, A+N);\n+  VERIFY(s.size() == N);\n+  VERIFY(std::distance(s.begin(), s.end()) == N);\n+\n+  for (int i = 0; i < N; ++i) {\n+    std::string str = A[i];\n+    Set::iterator it = std::find(s.begin(), s.end(), str);\n+    VERIFY(it != s.end());\n+  }\n+}\n+\n+void test02()\n+{\n+  typedef std::tr1::unordered_set<int> Set;\n+  Set s;\n+  VERIFY(s.empty());\n+\n+  const int N = 8;\n+  const int A[N] = { 3, 7, 4, 8, 2, 4, 6, 7 };\n+\n+  s.insert(A+0, A+N);\n+  VERIFY(s.size() == 6);\n+  VERIFY(std::distance(s.begin(), s.end()) == 6);\n+\n+  VERIFY(std::count(s.begin(), s.end(), 2) == 1);\n+  VERIFY(std::count(s.begin(), s.end(), 3) == 1);\n+  VERIFY(std::count(s.begin(), s.end(), 4) == 1);\n+  VERIFY(std::count(s.begin(), s.end(), 6) == 1);\n+  VERIFY(std::count(s.begin(), s.end(), 7) == 1);\n+  VERIFY(std::count(s.begin(), s.end(), 8) == 1);\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}]}