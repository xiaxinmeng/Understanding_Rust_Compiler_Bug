{"sha": "07537fe632cd6e2fcf83954fb85455d118d80c06", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDc1MzdmZTYzMmNkNmUyZmNmODM5NTRmYjg1NDU1ZDExOGQ4MGMwNg==", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2021-03-13T19:47:59Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-06-18T08:36:46Z"}, "message": "[Ada] Ada2020: Special handling of types derived from runtime\n\ngcc/ada/\n\n\t* einfo.ads (Is_Ada_2022_Only): Adding documentation.\n\t* gen_il-fields.ads (Is_Ada_2022_Only): New flag.\n\t* gen_il-gen-gen_entities.adb (Is_Ada_2022_Only): New flag.\n\t* itypes.adb (Create_Null_Excluding_Itype): Inherit\n\tIs_Ada_2022_Only.\n\t* sem_ch3.adb (Check_Abstract_Overriding): Skip reporting error\n\ton Ada 2022 only subprograms that require overriding if we are\n\tnot in Ada 2022 mode.\n\t(Derive_Subprogram): Inherit Is_Ada_2022_Only.\n\t* sem_ch6.adb (Check_Overriding_Indicator): Inherit\n\tIs_Ada_2022_Only.\n\t(New_Overloaded_Entity): Inherit Is_Ada_2022_Only.\n\t* sem_ch7.adb (Declare_Inherited_Private_Subprograms): Inherit\n\tIs_Ada_2022_Only.\n\t(Preserve_Full_Attributes): Inherit Is_Ada_2022_Only.\n\t* sem_disp.adb (Find_Hidden_Overridden_Primitive): Inherit\n\tIs_Ada_2022_Only.\n\t(Override_Dispatching_Operation): Inherit Is_Ada_2022_Only.\n\t* sem_prag.adb (Analyze_Pragma): Allow form with argument for\n\tAda 2022.\n\t* sem_type.adb: (Disambiguate): Deal with Is_Ada_2022_Only\n\t* lib-xref.adb (Generate_Reference): Error on static and\n\tdispatching calls to Ada 2022 subprograms that require\n\toverriding if we are not in Ada 2022 mode; warn on other\n\treferences to Ada 2022 entities when not in Ada 2022 mode.\n\t* sem_ch13.adb (Inherit_Aspects_At_Freeze_Point): Inherit\n\tAda_2020_Only.\n\t* libgnat/a-cdlili.ads (Empty): Adding pragma Ada_2022.\n\t* libgnat/a-cidlli.ads (Empty): Adding pragma Ada_2022.\n\t* libgnat/a-ciorma.ads (Empty): Adding pragma Ada_2022.\n\t* libgnat/a-cobove.ads (Empty): Adding pragma Ada_2022.\n\t* libgnat/a-coorma.ads (Empty): Adding pragma Ada_2022.\n\t(New_Vector): Adding pragma Ada_2022.\n\t(Insert_Vector): Adding pragma Ada_2022.\n\t(Prepend_Vector): Adding pragma Ada_2022.\n\t(Append_Vector): Adding pragma Ada_2022.", "tree": {"sha": "bc9f0d9d55fe25b8be5707f6bf968456701674c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc9f0d9d55fe25b8be5707f6bf968456701674c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07537fe632cd6e2fcf83954fb85455d118d80c06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07537fe632cd6e2fcf83954fb85455d118d80c06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07537fe632cd6e2fcf83954fb85455d118d80c06", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07537fe632cd6e2fcf83954fb85455d118d80c06/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64b5da8f97122de895af1b13c5f5e103717858c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64b5da8f97122de895af1b13c5f5e103717858c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64b5da8f97122de895af1b13c5f5e103717858c6"}], "stats": {"total": 186, "additions": 168, "deletions": 18}, "files": [{"sha": "471056c5441f6b19965b80d748cd75ffd105f43b", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07537fe632cd6e2fcf83954fb85455d118d80c06/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07537fe632cd6e2fcf83954fb85455d118d80c06/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=07537fe632cd6e2fcf83954fb85455d118d80c06", "patch": "@@ -2317,6 +2317,13 @@ package Einfo is\n --       the entity is part of a unit compiled with the normal no-argument form\n --       of pragma Ada_12 or Ada_2012.\n \n+--    Is_Ada_2022_Only\n+--       Defined in all entities, true if a valid pragma Ada_2022 applies to\n+--       the entity which specifically names the entity, indicating that the\n+--       entity is Ada 2022 only. Note that this flag is not set if the entity\n+--       is part of a unit compiled with the normal no-argument form of pragma\n+--       Ada_2022.\n+\n --    Is_Aliased\n --       Defined in all entities. Set for objects and types whose declarations\n --       carry the keyword aliased, and on record components that have the\n@@ -4871,6 +4878,7 @@ package Einfo is\n    --    In_Private_Part\n    --    Is_Ada_2005_Only\n    --    Is_Ada_2012_Only\n+   --    Is_Ada_2022_Only\n    --    Is_Bit_Packed_Array                  (base type only)\n    --    Is_Aliased\n    --    Is_Character_Type"}, {"sha": "2f0df43c6066f6a19577083f325465dc7a86ee7d", "filename": "gcc/ada/gen_il-fields.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07537fe632cd6e2fcf83954fb85455d118d80c06/gcc%2Fada%2Fgen_il-fields.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07537fe632cd6e2fcf83954fb85455d118d80c06/gcc%2Fada%2Fgen_il-fields.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgen_il-fields.ads?ref=07537fe632cd6e2fcf83954fb85455d118d80c06", "patch": "@@ -669,6 +669,7 @@ package Gen_IL.Fields is\n       Is_Actual_Subtype,\n       Is_Ada_2005_Only,\n       Is_Ada_2012_Only,\n+      Is_Ada_2022_Only,\n       Is_Aliased,\n       Is_Asynchronous,\n       Is_Atomic,"}, {"sha": "2e745c2f939f7c4cc08a09c5f9897fd3fd46f5a2", "filename": "gcc/ada/gen_il-gen-gen_entities.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07537fe632cd6e2fcf83954fb85455d118d80c06/gcc%2Fada%2Fgen_il-gen-gen_entities.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07537fe632cd6e2fcf83954fb85455d118d80c06/gcc%2Fada%2Fgen_il-gen-gen_entities.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgen_il-gen-gen_entities.adb?ref=07537fe632cd6e2fcf83954fb85455d118d80c06", "patch": "@@ -119,6 +119,7 @@ begin -- Gen_IL.Gen.Gen_Entities\n         Sm (In_Use, Flag),\n         Sm (Is_Ada_2005_Only, Flag),\n         Sm (Is_Ada_2012_Only, Flag),\n+        Sm (Is_Ada_2022_Only, Flag),\n         Sm (Is_Aliased, Flag),\n         Sm (Is_Atomic, Flag),\n         Sm (Is_Bit_Packed_Array, Flag, Impl_Base_Type_Only),"}, {"sha": "f51b44a44122717e9fbdde0314df288918a4ecb1", "filename": "gcc/ada/itypes.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07537fe632cd6e2fcf83954fb85455d118d80c06/gcc%2Fada%2Fitypes.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07537fe632cd6e2fcf83954fb85455d118d80c06/gcc%2Fada%2Fitypes.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fitypes.adb?ref=07537fe632cd6e2fcf83954fb85455d118d80c06", "patch": "@@ -111,6 +111,7 @@ package body Itypes is\n       Set_Is_Atomic                (I_Typ, Is_Atomic          (T));\n       Set_Is_Ada_2005_Only         (I_Typ, Is_Ada_2005_Only   (T));\n       Set_Is_Ada_2012_Only         (I_Typ, Is_Ada_2012_Only   (T));\n+      Set_Is_Ada_2022_Only         (I_Typ, Is_Ada_2022_Only   (T));\n       Set_Can_Never_Be_Null        (I_Typ);\n \n       return I_Typ;"}, {"sha": "17de8864befb8a441241447b708c7d421127621a", "filename": "gcc/ada/lib-xref.adb", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07537fe632cd6e2fcf83954fb85455d118d80c06/gcc%2Fada%2Flib-xref.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07537fe632cd6e2fcf83954fb85455d118d80c06/gcc%2Fada%2Flib-xref.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.adb?ref=07537fe632cd6e2fcf83954fb85455d118d80c06", "patch": "@@ -703,6 +703,37 @@ package body Lib.Xref is\n          Error_Msg_NE (\"& is only defined in Ada 2012?y?\", N, E);\n       end if;\n \n+      --  Warn if reference to Ada 2022 entity not in Ada 2022 mode. We only\n+      --  detect real explicit references (modifications and references).\n+\n+      if Comes_From_Source (N)\n+        and then Is_Ada_2022_Only (E)\n+        and then not Is_Subprogram (E)\n+        and then Ada_Version < Ada_2022\n+        and then Warn_On_Ada_2022_Compatibility\n+        and then (Typ = 'm' or else Typ = 'r')\n+      then\n+         Error_Msg_NE (\"& is only defined in Ada 2022?y?\", N, E);\n+\n+      --  Error on static and dispatching calls to Ada 2022 subprograms that\n+      --  require overriding if we are not in Ada 2022 mode (since overriding\n+      --  was skipped); warn if the subprogram does not require overriding.\n+\n+      elsif Comes_From_Source (N)\n+        and then Is_Ada_2022_Only (E)\n+        and then Ada_Version < Ada_2022\n+        and then Is_Subprogram (E)\n+        and then (Typ = 'r' or else Typ = 's' or else Typ = 'R')\n+      then\n+         if Requires_Overriding (E) then\n+            Error_Msg_NE\n+              (\"& is only defined in Ada 2022 and requires overriding\", N, E);\n+\n+         elsif Warn_On_Ada_2022_Compatibility then\n+            Error_Msg_NE (\"& is only defined in Ada 2022?y?\", N, E);\n+         end if;\n+      end if;\n+\n       --  Do not generate references if we are within a postcondition sub-\n       --  program, because the reference does not comes from source, and the\n       --  preanalysis of the aspect has already created an entry for the ALI"}, {"sha": "8d2d345b066445d342c06ce1c05ebac29c3acf2a", "filename": "gcc/ada/libgnat/a-cdlili.ads", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07537fe632cd6e2fcf83954fb85455d118d80c06/gcc%2Fada%2Flibgnat%2Fa-cdlili.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07537fe632cd6e2fcf83954fb85455d118d80c06/gcc%2Fada%2Flibgnat%2Fa-cdlili.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cdlili.ads?ref=07537fe632cd6e2fcf83954fb85455d118d80c06", "patch": "@@ -66,7 +66,9 @@ is\n    pragma Preelaborable_Initialization (Cursor);\n \n    Empty_List : constant List;\n+\n    function Empty return List;\n+   pragma Ada_2022 (Empty);\n \n    No_Element : constant Cursor;\n "}, {"sha": "d5c4e45e32bf9a78c7ad41d506d217b26f04d268", "filename": "gcc/ada/libgnat/a-cidlli.ads", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07537fe632cd6e2fcf83954fb85455d118d80c06/gcc%2Fada%2Flibgnat%2Fa-cidlli.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07537fe632cd6e2fcf83954fb85455d118d80c06/gcc%2Fada%2Flibgnat%2Fa-cidlli.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cidlli.ads?ref=07537fe632cd6e2fcf83954fb85455d118d80c06", "patch": "@@ -65,7 +65,9 @@ is\n    pragma Preelaborable_Initialization (Cursor);\n \n    Empty_List : constant List;\n+\n    function Empty return List;\n+   pragma Ada_2022 (Empty);\n \n    No_Element : constant Cursor;\n "}, {"sha": "68e9b93c035881fa8679009059c9226ca3795143", "filename": "gcc/ada/libgnat/a-ciorma.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07537fe632cd6e2fcf83954fb85455d118d80c06/gcc%2Fada%2Flibgnat%2Fa-ciorma.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07537fe632cd6e2fcf83954fb85455d118d80c06/gcc%2Fada%2Flibgnat%2Fa-ciorma.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-ciorma.ads?ref=07537fe632cd6e2fcf83954fb85455d118d80c06", "patch": "@@ -70,6 +70,7 @@ is\n    Empty_Map : constant Map;\n \n    function Empty return Map;\n+   pragma Ada_2022 (Empty);\n \n    No_Element : constant Cursor;\n    function Has_Element (Position : Cursor) return Boolean;"}, {"sha": "eb8072d4018c0c6fd1306befc31b9e0dc4c241ca", "filename": "gcc/ada/libgnat/a-cobove.ads", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07537fe632cd6e2fcf83954fb85455d118d80c06/gcc%2Fada%2Flibgnat%2Fa-cobove.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07537fe632cd6e2fcf83954fb85455d118d80c06/gcc%2Fada%2Flibgnat%2Fa-cobove.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cobove.ads?ref=07537fe632cd6e2fcf83954fb85455d118d80c06", "patch": "@@ -80,12 +80,14 @@ package Ada.Containers.Bounded_Vectors is\n       Ada.Iterator_Interfaces (Cursor, Has_Element);\n \n    function Empty (Capacity : Count_Type := 10) return Vector;\n+   pragma Ada_2022 (Empty);\n \n    overriding function \"=\" (Left, Right : Vector) return Boolean;\n \n    function New_Vector (First, Last : Index_Type) return Vector\n      with Pre => First = Index_Type'First;\n    --  Ada 2022 aggregate operation.\n+   pragma Ada_2022 (New_Vector);\n \n    function To_Vector (Length : Count_Type) return Vector;\n \n@@ -194,6 +196,7 @@ package Ada.Containers.Bounded_Vectors is\n      (Container : in out Vector;\n       Before    : Extended_Index;\n       New_Item  : Vector);\n+   pragma Ada_2022 (Insert_Vector);\n \n    procedure Insert\n      (Container : in out Vector;\n@@ -205,6 +208,7 @@ package Ada.Containers.Bounded_Vectors is\n      (Container : in out Vector;\n       Before    : Cursor;\n       New_Item  : Vector);\n+   pragma Ada_2022 (Insert_Vector);\n \n    procedure Insert\n      (Container : in out Vector;\n@@ -217,6 +221,7 @@ package Ada.Containers.Bounded_Vectors is\n       Before    : Cursor;\n       New_Item  : Vector;\n       Position  : out Cursor);\n+   pragma Ada_2022 (Insert_Vector);\n \n    procedure Insert\n      (Container : in out Vector;\n@@ -258,6 +263,7 @@ package Ada.Containers.Bounded_Vectors is\n    procedure Prepend_Vector\n      (Container : in out Vector;\n       New_Item  : Vector);\n+   pragma Ada_2022 (Prepend_Vector);\n \n    procedure Prepend\n      (Container : in out Vector;\n@@ -272,6 +278,7 @@ package Ada.Containers.Bounded_Vectors is\n    procedure Append_Vector\n      (Container : in out Vector;\n       New_Item  : Vector);\n+   pragma Ada_2022 (Append_Vector);\n \n    procedure Append\n      (Container : in out Vector;"}, {"sha": "5740621c9215a146aa18e2bed5f24d80b36fbf7e", "filename": "gcc/ada/libgnat/a-coorma.ads", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07537fe632cd6e2fcf83954fb85455d118d80c06/gcc%2Fada%2Flibgnat%2Fa-coorma.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07537fe632cd6e2fcf83954fb85455d118d80c06/gcc%2Fada%2Flibgnat%2Fa-coorma.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-coorma.ads?ref=07537fe632cd6e2fcf83954fb85455d118d80c06", "patch": "@@ -67,7 +67,9 @@ is\n    pragma Preelaborable_Initialization (Cursor);\n \n    Empty_Map : constant Map;\n+\n    function Empty return Map;\n+   pragma Ada_2022 (Empty);\n \n    No_Element : constant Cursor;\n "}, {"sha": "35e0b9236abb532f22aaf8fcf70b3055a7c9cf30", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07537fe632cd6e2fcf83954fb85455d118d80c06/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07537fe632cd6e2fcf83954fb85455d118d80c06/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=07537fe632cd6e2fcf83954fb85455d118d80c06", "patch": "@@ -13399,6 +13399,16 @@ package body Sem_Ch13 is\n          Set_Is_Ada_2012_Only (Typ);\n       end if;\n \n+      --  Ada_2022\n+\n+      if not Has_Rep_Item (Typ, Name_Ada_2022, False)\n+        and then Has_Rep_Item (Typ, Name_Ada_2022)\n+        and then Is_Pragma_Or_Corr_Pragma_Present_In_Rep_Item\n+                   (Get_Rep_Item (Typ, Name_Ada_2022))\n+      then\n+         Set_Is_Ada_2022_Only (Typ);\n+      end if;\n+\n       --  Atomic/Shared\n \n       if not Has_Rep_Item (Typ, Name_Atomic, Name_Shared, False)"}, {"sha": "a762a6199f03f095979c249466c6ae8d7cff5097", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07537fe632cd6e2fcf83954fb85455d118d80c06/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07537fe632cd6e2fcf83954fb85455d118d80c06/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=07537fe632cd6e2fcf83954fb85455d118d80c06", "patch": "@@ -10967,6 +10967,15 @@ package body Sem_Ch3 is\n                   then\n                      null;\n \n+                  --  Skip reporting the error on Ada 2022 only subprograms\n+                  --  that require overriding if we are not in Ada 2022 mode.\n+\n+                  elsif Ada_Version < Ada_2022\n+                    and then Requires_Overriding (Subp)\n+                    and then Is_Ada_2022_Only (Ultimate_Alias (Subp))\n+                  then\n+                     null;\n+\n                   else\n                      Error_Msg_NE\n                        (\"type must be declared abstract or & overridden\",\n@@ -16061,6 +16070,8 @@ package body Sem_Ch3 is\n       then\n          Set_Has_Yield_Aspect (New_Subp, Has_Yield_Aspect (Alias (New_Subp)));\n       end if;\n+\n+      Set_Is_Ada_2022_Only (New_Subp, Is_Ada_2022_Only (Parent_Subp));\n    end Derive_Subprogram;\n \n    ------------------------"}, {"sha": "7bca9df72257e8af48b6983a763b8f231f0f9af6", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07537fe632cd6e2fcf83954fb85455d118d80c06/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07537fe632cd6e2fcf83954fb85455d118d80c06/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=07537fe632cd6e2fcf83954fb85455d118d80c06", "patch": "@@ -7271,10 +7271,14 @@ package body Sem_Ch6 is\n                then\n                   Set_Overridden_Operation    (Subp, Alias (Overridden_Subp));\n                   Inherit_Subprogram_Contract (Subp, Alias (Overridden_Subp));\n+                  Set_Is_Ada_2022_Only        (Subp,\n+                    Is_Ada_2022_Only (Alias (Overridden_Subp)));\n \n                else\n                   Set_Overridden_Operation    (Subp, Overridden_Subp);\n                   Inherit_Subprogram_Contract (Subp, Overridden_Subp);\n+                  Set_Is_Ada_2022_Only        (Subp,\n+                    Is_Ada_2022_Only (Overridden_Subp));\n                end if;\n             end if;\n          end if;\n@@ -11888,10 +11892,13 @@ package body Sem_Ch6 is\n                   if Present (Alias (S)) then\n                      Set_Overridden_Operation    (E, Alias (S));\n                      Inherit_Subprogram_Contract (E, Alias (S));\n+                     Set_Is_Ada_2022_Only        (E,\n+                       Is_Ada_2022_Only (Alias (S)));\n \n                   else\n                      Set_Overridden_Operation    (E, S);\n                      Inherit_Subprogram_Contract (E, S);\n+                     Set_Is_Ada_2022_Only        (E, Is_Ada_2022_Only (S));\n                   end if;\n \n                   --  When a dispatching operation overrides an inherited\n@@ -12058,6 +12065,8 @@ package body Sem_Ch6 is\n                   then\n                      Set_Overridden_Operation    (S, Alias (E));\n                      Inherit_Subprogram_Contract (S, Alias (E));\n+                     Set_Is_Ada_2022_Only        (S,\n+                       Is_Ada_2022_Only (Alias (E)));\n \n                   --  Normal case of setting entity as overridden\n \n@@ -12071,6 +12080,7 @@ package body Sem_Ch6 is\n                   elsif not Is_Init_Proc (S) then\n                      Set_Overridden_Operation    (S, E);\n                      Inherit_Subprogram_Contract (S, E);\n+                     Set_Is_Ada_2022_Only        (S, Is_Ada_2022_Only (E));\n                   end if;\n \n                   Check_Overriding_Indicator (S, E, Is_Primitive => True);\n@@ -12099,6 +12109,8 @@ package body Sem_Ch6 is\n                      if Present (Alias (E)) then\n                         Set_Overridden_Operation    (S, Alias (E));\n                         Inherit_Subprogram_Contract (S, Alias (E));\n+                        Set_Is_Ada_2022_Only        (S,\n+                          Is_Ada_2022_Only (Alias (E)));\n                      end if;\n                   end if;\n "}, {"sha": "69ad184948adcbecf6d480d92fc5ed1ad32f593a", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07537fe632cd6e2fcf83954fb85455d118d80c06/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07537fe632cd6e2fcf83954fb85455d118d80c06/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=07537fe632cd6e2fcf83954fb85455d118d80c06", "patch": "@@ -2061,6 +2061,8 @@ package body Sem_Ch7 is\n                            Replace_Elmt (Op_Elmt, New_Op);\n                            Remove_Elmt  (Op_List, Op_Elmt_2);\n                            Set_Overridden_Operation (New_Op, Parent_Subp);\n+                           Set_Is_Ada_2022_Only     (New_Op,\n+                             Is_Ada_2022_Only (Parent_Subp));\n \n                            --  We don't need to inherit its dispatching slot.\n                            --  Set_All_DT_Position has previously ensured that\n@@ -2725,6 +2727,7 @@ package body Sem_Ch7 is\n          Set_Is_Atomic               (Priv, Is_Atomic                  (Full));\n          Set_Is_Ada_2005_Only        (Priv, Is_Ada_2005_Only           (Full));\n          Set_Is_Ada_2012_Only        (Priv, Is_Ada_2012_Only           (Full));\n+         Set_Is_Ada_2022_Only        (Priv, Is_Ada_2022_Only           (Full));\n          Set_Has_Pragma_Unmodified   (Priv, Has_Pragma_Unmodified      (Full));\n          Set_Has_Pragma_Unreferenced (Priv, Has_Pragma_Unreferenced    (Full));\n          Set_Has_Pragma_Unreferenced_Objects"}, {"sha": "903182664bfe464ca6b1925f4950845a68e77922", "filename": "gcc/ada/sem_disp.adb", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07537fe632cd6e2fcf83954fb85455d118d80c06/gcc%2Fada%2Fsem_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07537fe632cd6e2fcf83954fb85455d118d80c06/gcc%2Fada%2Fsem_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.adb?ref=07537fe632cd6e2fcf83954fb85455d118d80c06", "patch": "@@ -2199,6 +2199,8 @@ package body Sem_Disp is\n                      while Present (Elmt) loop\n                         if Node (Elmt) = Orig_Prim then\n                            Set_Overridden_Operation (S, Prim);\n+                           Set_Is_Ada_2022_Only     (S,\n+                             Is_Ada_2022_Only (Prim));\n                            Set_Alias (Prim, Orig_Prim);\n                            return Prim;\n                         end if;\n@@ -2761,6 +2763,7 @@ package body Sem_Disp is\n          Set_Alias (Prev_Op, New_Op);\n          Set_DTC_Entity (Prev_Op, Empty);\n          Set_Has_Controlling_Result (New_Op, Has_Controlling_Result (Prev_Op));\n+         Set_Is_Ada_2022_Only (New_Op, Is_Ada_2022_Only (Prev_Op));\n       end if;\n    end Override_Dispatching_Operation;\n "}, {"sha": "a65864dfa83fde6fe631aabb7396bd176505a65e", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 45, "deletions": 6, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07537fe632cd6e2fcf83954fb85455d118d80c06/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07537fe632cd6e2fcf83954fb85455d118d80c06/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=07537fe632cd6e2fcf83954fb85455d118d80c06", "patch": "@@ -12542,22 +12542,61 @@ package body Sem_Prag is\n          --------------\n \n          --  pragma Ada_2022;\n+         --  pragma Ada_2022 (LOCAL_NAME):\n \n          --  Note: this pragma also has some specific processing in Par.Prag\n          --  because we want to set the Ada 2022 version mode during parsing.\n \n+         --  The one argument form is used for managing the transition from Ada\n+         --  2012 to Ada 2022 in the run-time library. If an entity is marked\n+         --  as Ada_2022 only, then referencing the entity in any pre-Ada_2022\n+         --  mode will generate a warning;for calls to Ada_2022 only primitives\n+         --  that require overriding an error will be reported. In addition, in\n+         --  any pre-Ada_2022 mode, a preference rule is established which does\n+         --  not choose such an entity unless it is unambiguously specified.\n+         --  This avoids extra subprograms marked this way from generating\n+         --  ambiguities in otherwise legal pre-Ada 2022 programs. The one\n+         --  argument form is intended for exclusive use in the GNAT run-time\n+         --  library.\n+\n          when Pragma_Ada_2022 =>\n+         declare\n+            E_Id : Node_Id;\n+\n+         begin\n             GNAT_Pragma;\n \n-            Check_Arg_Count (0);\n+            if Arg_Count = 1 then\n+               Check_Arg_Is_Local_Name (Arg1);\n+               E_Id := Get_Pragma_Arg (Arg1);\n \n-            Check_Valid_Configuration_Pragma;\n+               if Etype (E_Id) = Any_Type then\n+                  return;\n+               end if;\n \n-            --  Now set appropriate Ada mode\n+               Set_Is_Ada_2022_Only (Entity (E_Id));\n+               Record_Rep_Item (Entity (E_Id), N);\n+\n+            else\n+               Check_Arg_Count (0);\n+\n+               --  For Ada_2022 we unconditionally enforce the documented\n+               --  configuration pragma placement, since we do not want to\n+               --  tolerate mixed modes in a unit involving Ada 2022. That\n+               --  would cause real difficulties for those cases where there\n+               --  are incompatibilities between Ada 2012 and Ada 2022. We\n+               --  could allow mixing of Ada 2012 and Ada 2022 but it's not\n+               --  worth it.\n \n-            Ada_Version          := Ada_2022;\n-            Ada_Version_Explicit := Ada_2022;\n-            Ada_Version_Pragma   := N;\n+               Check_Valid_Configuration_Pragma;\n+\n+               --  Now set appropriate Ada mode\n+\n+               Ada_Version          := Ada_2022;\n+               Ada_Version_Explicit := Ada_2022;\n+               Ada_Version_Pragma   := N;\n+            end if;\n+         end;\n \n          -------------------------------------\n          -- Aggregate_Individually_Assign --"}, {"sha": "396f616cbf13ef30c21a823ce7cd3e2dc6d7ec79", "filename": "gcc/ada/sem_type.adb", "status": "modified", "additions": 28, "deletions": 12, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07537fe632cd6e2fcf83954fb85455d118d80c06/gcc%2Fada%2Fsem_type.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07537fe632cd6e2fcf83954fb85455d118d80c06/gcc%2Fada%2Fsem_type.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_type.adb?ref=07537fe632cd6e2fcf83954fb85455d118d80c06", "patch": "@@ -1810,26 +1810,42 @@ package body Sem_Type is\n       It2  := It;\n       Nam2 := It.Nam;\n \n-      --  Check whether one of the entities is an Ada 2005/2012 and we are\n-      --  operating in an earlier mode, in which case we discard the Ada\n-      --  2005/2012 entity, so that we get proper Ada 95 overload resolution.\n+      --  Check whether one of the entities is an Ada 2005/2012/2022 and we\n+      --  are operating in an earlier mode, in which case we discard the Ada\n+      --  2005/2012/2022 entity, so that we get proper Ada 95 overload\n+      --  resolution.\n \n       if Ada_Version < Ada_2005 then\n-         if Is_Ada_2005_Only (Nam1) or else Is_Ada_2012_Only (Nam1) then\n+         if Is_Ada_2005_Only (Nam1)\n+           or else Is_Ada_2012_Only (Nam1)\n+           or else Is_Ada_2022_Only (Nam1)\n+         then\n             return It2;\n-         elsif Is_Ada_2005_Only (Nam2) or else Is_Ada_2012_Only (Nam1) then\n+\n+         elsif Is_Ada_2005_Only (Nam2)\n+           or else Is_Ada_2012_Only (Nam2)\n+           or else Is_Ada_2022_Only (Nam2)\n+         then\n+            return It1;\n+         end if;\n+\n+      --  Check whether one of the entities is an Ada 2012/2022 entity and we\n+      --  are operating in Ada 2005 mode, in which case we discard the Ada 2012\n+      --  Ada 2022 entity, so that we get proper Ada 2005 overload resolution.\n+\n+      elsif Ada_Version = Ada_2005 then\n+         if Is_Ada_2012_Only (Nam1) or else Is_Ada_2022_Only (Nam1) then\n+            return It2;\n+         elsif Is_Ada_2012_Only (Nam2) or else Is_Ada_2022_Only (Nam2) then\n             return It1;\n          end if;\n-      end if;\n \n-      --  Check whether one of the entities is an Ada 2012 entity and we are\n-      --  operating in Ada 2005 mode, in which case we discard the Ada 2012\n-      --  entity, so that we get proper Ada 2005 overload resolution.\n+      --  Ditto for Ada 2012 vs Ada 2022.\n \n-      if Ada_Version = Ada_2005 then\n-         if Is_Ada_2012_Only (Nam1) then\n+      elsif Ada_Version = Ada_2012 then\n+         if Is_Ada_2022_Only (Nam1) then\n             return It2;\n-         elsif Is_Ada_2012_Only (Nam2) then\n+         elsif Is_Ada_2022_Only (Nam2) then\n             return It1;\n          end if;\n       end if;"}]}