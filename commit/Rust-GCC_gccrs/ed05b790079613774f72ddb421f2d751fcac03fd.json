{"sha": "ed05b790079613774f72ddb421f2d751fcac03fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQwNWI3OTAwNzk2MTM3NzRmNzJkZGI0MjFmMmQ3NTFmY2FjMDNmZA==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2015-05-22T10:50:19Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-05-22T10:50:19Z"}, "message": "debug.adb: Update documentation.\n\n2015-05-22  Robert Dewar  <dewar@adacore.com>\n\n\t* debug.adb: Update documentation.\n\t* einfo.ads, einfo.adb (Needs_Typedef): New flag\n\t* exp_unst.adb (Unnest_Subprogram): Mark AREC types as needing\n\ttypedef's in C.\n\t* frontend.adb: Update comments.\n\t* gnat1drv.adb (Adjust_Global_Switches): Set all needed flags\n\tfor -gnatd.V\n\t* opt.ads (Generate_C_Code): New switch.\n\t* osint-c.adb (Write_C_File_Info): Removed, not used\n\t(Write_H_File_Info): Removed, not used\n\t* osint-c.ads (Write_C_File_Info): Removed, not used\n\t(Write_H_File_Info): Removed, not used\n\t* osint.ads (Write_Info): Minor comment updates.\n\t(Output_FD): Moved from private part to public part of spec.\n\t* sem.adb (Semantics): Force expansion on if in Generate_C_Code\n\tmode.\n\t* atree.ads: minor typo in comment.\n\t* sem_prag.adb (Process_Atomic_Independent_Shared_Volatile):\n\tDo not allow VFA on composite object with aliased component.\n\nFrom-SVN: r223546", "tree": {"sha": "1443c116f271fa91e506418a3760bec66ff39650", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1443c116f271fa91e506418a3760bec66ff39650"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed05b790079613774f72ddb421f2d751fcac03fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed05b790079613774f72ddb421f2d751fcac03fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed05b790079613774f72ddb421f2d751fcac03fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed05b790079613774f72ddb421f2d751fcac03fd/comments", "author": null, "committer": null, "parents": [{"sha": "6eb187f6f31be9ba4e80c08110482291a637ddba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eb187f6f31be9ba4e80c08110482291a637ddba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6eb187f6f31be9ba4e80c08110482291a637ddba"}], "stats": {"total": 177, "additions": 133, "deletions": 44}, "files": [{"sha": "e2b22ddcffcf62cbbf56cb0deffca1eab83c2c8b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed05b790079613774f72ddb421f2d751fcac03fd/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed05b790079613774f72ddb421f2d751fcac03fd/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ed05b790079613774f72ddb421f2d751fcac03fd", "patch": "@@ -1,3 +1,25 @@\n+2015-05-22  Robert Dewar  <dewar@adacore.com>\n+\n+\t* debug.adb: Update documentation.\n+\t* einfo.ads, einfo.adb (Needs_Typedef): New flag\n+\t* exp_unst.adb (Unnest_Subprogram): Mark AREC types as needing\n+\ttypedef's in C.\n+\t* frontend.adb: Update comments.\n+\t* gnat1drv.adb (Adjust_Global_Switches): Set all needed flags\n+\tfor -gnatd.V\n+\t* opt.ads (Generate_C_Code): New switch.\n+\t* osint-c.adb (Write_C_File_Info): Removed, not used\n+\t(Write_H_File_Info): Removed, not used\n+\t* osint-c.ads (Write_C_File_Info): Removed, not used\n+\t(Write_H_File_Info): Removed, not used\n+\t* osint.ads (Write_Info): Minor comment updates.\n+\t(Output_FD): Moved from private part to public part of spec.\n+\t* sem.adb (Semantics): Force expansion on if in Generate_C_Code\n+\tmode.\n+\t* atree.ads: minor typo in comment.\n+\t* sem_prag.adb (Process_Atomic_Independent_Shared_Volatile):\n+\tDo not allow VFA on composite object with aliased component.\n+\n 2015-05-22  Arnaud Charlet  <charlet@adacore.com>\n \n \t* osint-c.adb, osint-c.ads (Set_File_Name): Move back to spec."}, {"sha": "7ed476fa8a1101c6a90721243255f7f090eede23", "filename": "gcc/ada/atree.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed05b790079613774f72ddb421f2d751fcac03fd/gcc%2Fada%2Fatree.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed05b790079613774f72ddb421f2d751fcac03fd/gcc%2Fada%2Fatree.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.ads?ref=ed05b790079613774f72ddb421f2d751fcac03fd", "patch": "@@ -4138,7 +4138,7 @@ package Atree is\n          --  These flags are used in the usual manner in Sinfo and Einfo\n \n          Is_Ignored_Ghost_Node : Boolean;\n-         --  Flag denothing whether the node is subject to pragma Ghost with\n+         --  Flag denoting whether the node is subject to pragma Ghost with\n          --  policy Ignore. The name of the flag should be Flag4, however this\n          --  requires changing the names of all remaining 300+ flags.\n "}, {"sha": "d338074726655fc9386edd19670f8a7beb760e79", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed05b790079613774f72ddb421f2d751fcac03fd/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed05b790079613774f72ddb421f2d751fcac03fd/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=ed05b790079613774f72ddb421f2d751fcac03fd", "patch": "@@ -689,11 +689,11 @@ package body Debug is\n    --       the order in which units are walked. This is primarily for use in\n    --       debugging CodePeer mode.\n \n-   --  d.X  A previous version of GNAT allowed indexing aspects to be\n-   --       redefined on derived container types, while the default iterator\n-   --       was inherited from the aprent type. This non-standard extension\n-   --       is preserved temporarily for use by the modelling project under\n-   --       debug flag d.X.\n+   --  d.X  A previous version of GNAT allowed indexing aspects to be redefined\n+   --       on derived container types, while the default iterator was\n+   --       inherited from the aprent type. This non-standard extension is\n+   --       preserved temporarily for use by the modelling project under debug\n+   --       flag d.X.\n \n    --  d.Z  Normally we always enable expansion in configurable run-time mode\n    --       to make sure we get error messages about unsupported features even"}, {"sha": "02433567e3c098ecd94392c1af3f4a285512bf1f", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed05b790079613774f72ddb421f2d751fcac03fd/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed05b790079613774f72ddb421f2d751fcac03fd/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=ed05b790079613774f72ddb421f2d751fcac03fd", "patch": "@@ -592,8 +592,8 @@ package body Einfo is\n    --    Is_Uplevel_Referenced_Entity    Flag283\n    --    Is_Unimplemented                Flag284\n    --    Has_Volatile_Full_Access        Flag285\n+   --    Needs_Typedef                   Flag286\n \n-   --    (unused)                        Flag286\n    --    (unused)                        Flag287\n    --    (unused)                        Flag288\n    --    (unused)                        Flag289\n@@ -2644,6 +2644,12 @@ package body Einfo is\n       return Flag22 (Id);\n    end Needs_No_Actuals;\n \n+   function Needs_Typedef (Id : E) return B is\n+   begin\n+      pragma Assert (Is_Type (Id));\n+      return Flag286 (Id);\n+   end Needs_Typedef;\n+\n    function Never_Set_In_Source (Id : E) return B is\n    begin\n       return Flag115 (Id);\n@@ -5601,6 +5607,12 @@ package body Einfo is\n       Set_Flag22 (Id, V);\n    end Set_Needs_No_Actuals;\n \n+   procedure Set_Needs_Typedef (Id : E; V : B := True) is\n+   begin\n+      pragma Assert (Is_Type (Id));\n+      Set_Flag286 (Id, V);\n+   end Set_Needs_Typedef;\n+\n    procedure Set_Never_Set_In_Source (Id : E; V : B := True) is\n    begin\n       Set_Flag115 (Id, V);\n@@ -8834,6 +8846,7 @@ package body Einfo is\n       W (\"Must_Have_Preelab_Init\",          Flag208 (Id));\n       W (\"Needs_Debug_Info\",                Flag147 (Id));\n       W (\"Needs_No_Actuals\",                Flag22  (Id));\n+      W (\"Needs_Typedef\",                   Flag286 (Id));\n       W (\"Never_Set_In_Source\",             Flag115 (Id));\n       W (\"No_Dynamic_Predicate_On_actual\",  Flag276 (Id));\n       W (\"No_Pool_Assigned\",                Flag131 (Id));"}, {"sha": "5fe5da823597329fe68bbdb625496234faac54b4", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed05b790079613774f72ddb421f2d751fcac03fd/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed05b790079613774f72ddb421f2d751fcac03fd/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=ed05b790079613774f72ddb421f2d751fcac03fd", "patch": "@@ -1405,7 +1405,9 @@ package Einfo is\n \n --    Has_Aliased_Components (Flag135) [implementation base type only]\n --       Defined in array type entities. Indicates that the component type\n---       of the array is aliased.\n+--       of the array is aliased. Should this also be set for records to\n+--       indicate that at least one component is aliased (see processing in\n+--       Sem_Prag.Process_Atomic_Independent_Shared_Volatile???)\n \n --    Has_Alignment_Clause (Flag46)\n --       Defined in all type entities and objects. Indicates if an alignment\n@@ -3348,6 +3350,14 @@ package Einfo is\n --       interpreted as an indexing of the result of the call. It is also\n --       used to resolve various cases of entry calls.\n \n+--    Needs_Typedef (Flag286)\n+--       Defined for all types and subtypes. Set if it is essential to generate\n+--       a typedef when we are generating C code from Cprint. Normally we\n+--       generate typedef's only for source entities, and not for internally\n+--       generated types, but there are cases, notably the AREC types generated\n+--       in Exp_Unst when we are unnesting subprograms where we must generate\n+--       typedef's for non-source types.\n+\n --    Never_Set_In_Source (Flag115)\n --       Defined in all entities, but can be set only for variables and\n --       parameters. This flag is set if the object is never assigned a value\n@@ -5441,6 +5451,7 @@ package Einfo is\n    --    May_Inherit_Delayed_Rep_Aspects     (Flag262)\n    --    Must_Be_On_Byte_Boundary            (Flag183)\n    --    Must_Have_Preelab_Init              (Flag208)\n+   --    Needs_Typedef                       (Flag286)\n    --    Optimize_Alignment_Space            (Flag241)\n    --    Optimize_Alignment_Time             (Flag242)\n    --    Partial_View_Has_Unknown_Discr      (Flag280)\n@@ -6965,6 +6976,7 @@ package Einfo is\n    function Must_Have_Preelab_Init              (Id : E) return B;\n    function Needs_Debug_Info                    (Id : E) return B;\n    function Needs_No_Actuals                    (Id : E) return B;\n+   function Needs_Typedef                       (Id : E) return B;\n    function Never_Set_In_Source                 (Id : E) return B;\n    function Next_Inlined_Subprogram             (Id : E) return E;\n    function No_Dynamic_Predicate_On_Actual      (Id : E) return B;\n@@ -7622,6 +7634,7 @@ package Einfo is\n    procedure Set_Must_Have_Preelab_Init          (Id : E; V : B := True);\n    procedure Set_Needs_Debug_Info                (Id : E; V : B := True);\n    procedure Set_Needs_No_Actuals                (Id : E; V : B := True);\n+   procedure Set_Needs_Typedef                   (Id : E; V : B := True);\n    procedure Set_Never_Set_In_Source             (Id : E; V : B := True);\n    procedure Set_Next_Inlined_Subprogram         (Id : E; V : E);\n    procedure Set_No_Dynamic_Predicate_On_Actual  (Id : E; V : B := True);\n@@ -8433,6 +8446,7 @@ package Einfo is\n    pragma Inline (Must_Have_Preelab_Init);\n    pragma Inline (Needs_Debug_Info);\n    pragma Inline (Needs_No_Actuals);\n+   pragma Inline (Needs_Typedef);\n    pragma Inline (Never_Set_In_Source);\n    pragma Inline (Next_Index);\n    pragma Inline (Next_Inlined_Subprogram);\n@@ -8890,6 +8904,7 @@ package Einfo is\n    pragma Inline (Set_Must_Have_Preelab_Init);\n    pragma Inline (Set_Needs_Debug_Info);\n    pragma Inline (Set_Needs_No_Actuals);\n+   pragma Inline (Set_Needs_Typedef);\n    pragma Inline (Set_Never_Set_In_Source);\n    pragma Inline (Set_Next_Inlined_Subprogram);\n    pragma Inline (Set_No_Dynamic_Predicate_On_Actual);"}, {"sha": "94f2969bf7a0c66e11b96f012e861dbc93661eea", "filename": "gcc/ada/exp_unst.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed05b790079613774f72ddb421f2d751fcac03fd/gcc%2Fada%2Fexp_unst.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed05b790079613774f72ddb421f2d751fcac03fd/gcc%2Fada%2Fexp_unst.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_unst.adb?ref=ed05b790079613774f72ddb421f2d751fcac03fd", "patch": "@@ -1327,6 +1327,11 @@ package body Exp_Unst is\n                      Analyze (Decl_ARECnP,  Suppress => All_Checks);\n                      Pop_Scope;\n \n+                     --  Mark the types as needing typedefs\n+\n+                     Set_Needs_Typedef (STJ.ARECnT);\n+                     Set_Needs_Typedef (STJ.ARECnPT);\n+\n                      --  Next step, for each uplevel referenced entity, add\n                      --  assignment operations to set the component in the\n                      --  activation record."}, {"sha": "b3c85f1f8bce002fbfa17e86f71906995da2cfc7", "filename": "gcc/ada/frontend.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed05b790079613774f72ddb421f2d751fcac03fd/gcc%2Fada%2Ffrontend.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed05b790079613774f72ddb421f2d751fcac03fd/gcc%2Fada%2Ffrontend.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffrontend.adb?ref=ed05b790079613774f72ddb421f2d751fcac03fd", "patch": "@@ -482,8 +482,8 @@ begin\n \n    Sprint.Source_Dump;\n \n-   --  Check again for configuration pragmas that appear in the context of\n-   --  the main unit. These pragmas only affect the main unit, and the\n+   --  Check again for configuration pragmas that appear in the context\n+   --  of the main unit. These pragmas only affect the main unit, and the\n    --  corresponding flag is reset after each call to Semantics, but they\n    --  may affect the generated ali for the unit, and therefore the flag\n    --  must be set properly after compilation. Currently we only check for"}, {"sha": "06d30ffc64511da26f221f6a6c200adeb720e03a", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed05b790079613774f72ddb421f2d751fcac03fd/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed05b790079613774f72ddb421f2d751fcac03fd/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=ed05b790079613774f72ddb421f2d751fcac03fd", "patch": "@@ -142,6 +142,13 @@ procedure Gnat1drv is\n          Modify_Tree_For_C := True;\n       end if;\n \n+      --  Other flags set if we are generating C code\n+\n+      if Debug_Flag_Dot_VV then\n+         Generate_C_Code := True;\n+         Unnest_Subprogram_Mode := True;\n+      end if;\n+\n       --  -gnatd.E sets Error_To_Warning mode, causing selected error messages\n       --  to be treated as warnings instead of errors.\n "}, {"sha": "3a75e36904f7ab41783570dca5f26d8dcc7b9cbc", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed05b790079613774f72ddb421f2d751fcac03fd/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed05b790079613774f72ddb421f2d751fcac03fd/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=ed05b790079613774f72ddb421f2d751fcac03fd", "patch": "@@ -694,6 +694,11 @@ package Opt is\n    --  the name is of the form .xxx, then to name.xxx where name is the source\n    --  file name with extension stripped.\n \n+   Generate_C_Code : Boolean := False;\n+   --  GNAT\n+   --  If True, the Cprint circuitry to generate C code output is activated.\n+   --  Set True by use of -gnatd.V.\n+\n    Generate_CodePeer_Messages : Boolean := False;\n    --  GNAT\n    --  Generate CodePeer messages. Ignored if CodePeer_Mode is false. This is"}, {"sha": "dcbace26fa142787a9521750448b7f0be30f518d", "filename": "gcc/ada/osint-c.adb", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed05b790079613774f72ddb421f2d751fcac03fd/gcc%2Fada%2Fosint-c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed05b790079613774f72ddb421f2d751fcac03fd/gcc%2Fada%2Fosint-c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fosint-c.adb?ref=ed05b790079613774f72ddb421f2d751fcac03fd", "patch": "@@ -517,24 +517,12 @@ package body Osint.C is\n       Tree_Write_Initialize (Output_FD);\n    end Tree_Create;\n \n-   -----------------------\n-   -- Write_C_File_Info --\n-   -----------------------\n-\n-   procedure Write_C_File_Info (Info : String) renames Write_Info;\n-\n    -----------------------\n    -- Write_Debug_Info --\n    -----------------------\n \n    procedure Write_Debug_Info (Info : String) renames Write_Info;\n \n-   -----------------------\n-   -- Write_H_File_Info --\n-   -----------------------\n-\n-   procedure Write_H_File_Info (Info : String) renames Write_Info;\n-\n    ------------------------\n    -- Write_Library_Info --\n    ------------------------"}, {"sha": "afd4e84a346a0cb0d061029d8b0e58c8054a3b53", "filename": "gcc/ada/osint-c.ads", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed05b790079613774f72ddb421f2d751fcac03fd/gcc%2Fada%2Fosint-c.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed05b790079613774f72ddb421f2d751fcac03fd/gcc%2Fada%2Fosint-c.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fosint-c.ads?ref=ed05b790079613774f72ddb421f2d751fcac03fd", "patch": "@@ -108,6 +108,12 @@ package Osint.C is\n    --  Close current debug file created by the most recent call to\n    --  Create_Repinfo_File.\n \n+   procedure Set_File_Name (Ext : String);\n+   --  Sets a default file name from the main compiler source name. Ext is the\n+   --  extension, e.g. \"ali\" for a library information file. The name is in\n+   --  Name_Buffer (with length in Name_Len) on return. This is visible in\n+   --  the spec since it used directly by clients in the .Net case.\n+\n    --------------------------------\n    -- Library Information Output --\n    --------------------------------\n@@ -127,11 +133,6 @@ package Osint.C is\n    --  returned by Next_Main_Source) for appending. This is used to append\n    --  the globals computed in flow analysis in gnatprove mode.\n \n-   procedure Set_File_Name (Ext : String);\n-   --  Sets a default file name from the main compiler source name. Ext is\n-   --  the extension, e.g. \"ali\" for a library information file.\n-   --  The name is in Name_Buffer (with length in Name_Len) on return.\n-\n    procedure Write_Library_Info (Info : String);\n    --  Writes the contents of the referenced string to the library information\n    --  file for the main source file currently being compiled (i.e. the file\n@@ -161,22 +162,15 @@ package Osint.C is\n    --  These routines are used by the compiler when the C translation option\n    --  is activated to write *.c and *.h files to the current object directory.\n    --  Each routine exists in a C and an H form for the two kinds of files.\n-   --  Only one of these files can be written at a time.\n+   --  Only one of these files can be written at a time. Note that the files\n+   --  are written via the Output package routines, using Output_FD.\n \n    procedure Create_C_File;\n    procedure Create_H_File;\n    --  Creates the *.c or *.h file for the source file which is currently\n    --  being compiled (i.e. the file which was most recently returned by\n    --  Next_Main_Source).\n \n-   procedure Write_C_File_Info (Info : String);\n-   procedure Write_H_File_Info (Info : String);\n-   --  Writes the contents of the referenced string to the *.c or *.h file for\n-   --  the main source file currently being compiled (i.e. the file which was\n-   --  most recently opened with a call to Read_Next_File). Info represents\n-   --  a line in the file with a line termination character at the end (which\n-   --  is not present in the info string).\n-\n    procedure Close_C_File;\n    procedure Close_H_File;\n    --  Closes the file created by Create_C_File or Create_H file, flushing any"}, {"sha": "6347e4d413bba4f54720b1c48a6043ad0bb5ab0f", "filename": "gcc/ada/osint.ads", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed05b790079613774f72ddb421f2d751fcac03fd/gcc%2Fada%2Fosint.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed05b790079613774f72ddb421f2d751fcac03fd/gcc%2Fada%2Fosint.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fosint.ads?ref=ed05b790079613774f72ddb421f2d751fcac03fd", "patch": "@@ -52,6 +52,10 @@ package Osint is\n    Project_Include_Path_File : constant String := \"ADA_PRJ_INCLUDE_FILE\";\n    Project_Objects_Path_File : constant String := \"ADA_PRJ_OBJECTS_FILE\";\n \n+   Output_FD : File_Descriptor;\n+   --  File descriptor for current library info, list, tree, C, H, or binder\n+   --  output. Only one of these is open at a time, so we need only one FD.\n+\n    procedure Initialize;\n    --  Initialize internal tables\n \n@@ -692,10 +696,6 @@ private\n    Target_Object_Suffix : constant String := Get_Target_Object_Suffix.all;\n    --  The suffix used for the target object files\n \n-   Output_FD : File_Descriptor;\n-   --  File descriptor for current library info, list, tree, C, H, or binder\n-   --  output. Only one of these is open at a time, so we need only one FD.\n-\n    Output_File_Name : File_Name_Type;\n    --  File_Name_Type for name of open file whose FD is in Output_FD, the name\n    --  stored does not include the trailing NUL character.\n@@ -760,8 +760,7 @@ private\n    --  for this file. This routine merely constructs the name.\n \n    procedure Write_Info (Info : String);\n-   --  Implement Write_Binder_Info, Write_Debug_Info, Write_C_File_Info,\n-   --  Write_H_File_Info, and Write_Library_Info (identical)\n+   --  Implement Write_Binder_Info, Write_Debug_Info, and Write_Library_Info\n \n    procedure Write_With_Check (A : Address; N  : Integer);\n    --  Writes N bytes from buffer starting at address A to file whose FD is"}, {"sha": "0f8f173a5ff078e9fed645efd33bd63c135cbb19", "filename": "gcc/ada/sem.adb", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed05b790079613774f72ddb421f2d751fcac03fd/gcc%2Fada%2Fsem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed05b790079613774f72ddb421f2d751fcac03fd/gcc%2Fada%2Fsem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.adb?ref=ed05b790079613774f72ddb421f2d751fcac03fd", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1440,10 +1440,14 @@ package body Sem is\n \n            (Operating_Mode = Generate_Code\n \n-             --  or if special debug flag -gnatdx is set\n+             --  Or if special debug flag -gnatdx is set\n \n              or else Debug_Flag_X\n \n+             --  Or if we are generating C code\n+\n+             or else Generate_C_Code\n+\n              --  Or if in configuration run-time mode. We do this so we get\n              --  error messages about missing entities in the run-time even\n              --  if we are compiling in -gnatc (no code generation) mode."}, {"sha": "43c130555168994662c4a8db57c8185808cd3048", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed05b790079613774f72ddb421f2d751fcac03fd/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed05b790079613774f72ddb421f2d751fcac03fd/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=ed05b790079613774f72ddb421f2d751fcac03fd", "patch": "@@ -5898,6 +5898,43 @@ package body Sem_Prag is\n               (\"cannot have Volatile_Full_Access and Atomic for same entity\");\n          end if;\n \n+         --  Check for applying VFA to an entity which has volatile component\n+\n+         if Prag_Id = Pragma_Volatile_Full_Access then\n+            declare\n+               Comp         : Entity_Id;\n+               Aliased_Comp : Boolean := False;\n+               --  Set True if aliased component present\n+\n+            begin\n+               if Is_Array_Type (Etype (E)) then\n+                  Aliased_Comp := Has_Aliased_Components (Etype (E));\n+\n+               --  Record case, too bad Has_Aliased_Components is not also\n+               --  set for records, should it be ???\n+\n+               elsif Is_Record_Type (Etype (E)) then\n+                  Comp := First_Component_Or_Discriminant (Etype (E));\n+                  while Present (Comp) loop\n+                     if Is_Aliased (Comp)\n+                       or else Is_Aliased (Etype (Comp))\n+                     then\n+                        Aliased_Comp := True;\n+                        exit;\n+                     end if;\n+\n+                     Next_Component_Or_Discriminant (Comp);\n+                  end loop;\n+               end if;\n+\n+               if Aliased_Comp then\n+                  Error_Pragma\n+                    (\"cannot apply Volatile_Full_Access (aliased component \"\n+                     & \"present)\");\n+               end if;\n+            end;\n+         end if;\n+\n          --  Now check appropriateness of the entity\n \n          if Is_Type (E) then"}]}