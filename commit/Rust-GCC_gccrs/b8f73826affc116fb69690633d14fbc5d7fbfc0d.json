{"sha": "b8f73826affc116fb69690633d14fbc5d7fbfc0d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjhmNzM4MjZhZmZjMTE2ZmI2OTY5MDYzM2QxNGZiYzVkN2ZiZmMwZA==", "commit": {"author": {"name": "Andreas Schwab", "email": "schwab@suse.de", "date": "2001-08-15T16:00:45Z"}, "committer": {"name": "Andreas Schwab", "email": "schwab@gcc.gnu.org", "date": "2001-08-15T16:00:45Z"}, "message": "configure.target (cpu_include_dir): Set to `config/cpu/m68k' for m68k and m680[246]0.\n\n\t* configure.target (cpu_include_dir): Set to `config/cpu/m68k' for\n\tm68k and m680[246]0.\n\t* config/cpu/m68k/bits/atomicity.h: New file.\n\nFrom-SVN: r44925", "tree": {"sha": "a0d27c6b1adfbfa19d0b1f27ad4780d2c3c1dcb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0d27c6b1adfbfa19d0b1f27ad4780d2c3c1dcb2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8f73826affc116fb69690633d14fbc5d7fbfc0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8f73826affc116fb69690633d14fbc5d7fbfc0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8f73826affc116fb69690633d14fbc5d7fbfc0d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8f73826affc116fb69690633d14fbc5d7fbfc0d/comments", "author": {"login": "andreas-schwab", "id": 2175493, "node_id": "MDQ6VXNlcjIxNzU0OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/2175493?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andreas-schwab", "html_url": "https://github.com/andreas-schwab", "followers_url": "https://api.github.com/users/andreas-schwab/followers", "following_url": "https://api.github.com/users/andreas-schwab/following{/other_user}", "gists_url": "https://api.github.com/users/andreas-schwab/gists{/gist_id}", "starred_url": "https://api.github.com/users/andreas-schwab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andreas-schwab/subscriptions", "organizations_url": "https://api.github.com/users/andreas-schwab/orgs", "repos_url": "https://api.github.com/users/andreas-schwab/repos", "events_url": "https://api.github.com/users/andreas-schwab/events{/privacy}", "received_events_url": "https://api.github.com/users/andreas-schwab/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2e0aa8179f4c435211e1e5b3fadb090cf712a9b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e0aa8179f4c435211e1e5b3fadb090cf712a9b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e0aa8179f4c435211e1e5b3fadb090cf712a9b7"}], "stats": {"total": 65, "additions": 65, "deletions": 0}, "files": [{"sha": "84bf38cfed1afe86a51b059a31cee1abdded29ad", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8f73826affc116fb69690633d14fbc5d7fbfc0d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8f73826affc116fb69690633d14fbc5d7fbfc0d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b8f73826affc116fb69690633d14fbc5d7fbfc0d", "patch": "@@ -1,5 +1,9 @@\n 2001-08-15  Andreas Schwab  <schwab@suse.de>\n \n+\t* configure.target (cpu_include_dir): Set to `config/cpu/m68k' for\n+\tm68k and m680[246]0.\n+\t* config/cpu/m68k/bits/atomicity.h: New file.\n+\n \t* include/bits/std_limits.h [__glibcpp_long_double_bits == 96]:\n \tDefine appropriate long double limits for m68k extended floating\n \tpoint."}, {"sha": "1377ee157c98a6f1251fcc80f08d3319b447ec06", "filename": "libstdc++-v3/config/cpu/m68k/bits/atomicity.h", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8f73826affc116fb69690633d14fbc5d7fbfc0d/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fm68k%2Fbits%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8f73826affc116fb69690633d14fbc5d7fbfc0d/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fm68k%2Fbits%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fm68k%2Fbits%2Fatomicity.h?ref=b8f73826affc116fb69690633d14fbc5d7fbfc0d", "patch": "@@ -0,0 +1,61 @@\n+// Low-level functions for atomic operations: m680x0, x >= 2 version -*- C++ -*-\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#ifndef _BITS_ATOMICITY_H\n+#define _BITS_ATOMICITY_H\t1\n+\n+typedef int _Atomic_word;\n+\n+static inline _Atomic_word \n+__attribute__ ((__unused__))\n+__exchange_and_add (volatile _Atomic_word *__mem, int __val)\n+{\n+  register _Atomic_word __result = *__mem;\n+  register _Atomic_word __temp;\n+  __asm__ __volatile__ (\"1: move%.l %0,%1;\"\n+\t\t\t\"   add%.l %2,%1;\"\n+\t\t\t\"   cas%.l %0,%1,%3;\"\n+\t\t\t\"   jbne 1b\"\n+\t\t\t: \"=d\" (__result), \"=&d\" (__temp)\n+\t\t\t: \"d\" (__val), \"m\" (*__mem), \"0\" (__result)\n+\t\t\t: \"memory\");\n+  return __result;\n+}\n+\n+static inline void\n+__attribute__ ((__unused__))\n+__atomic_add (volatile _Atomic_word* __mem, int __val)\n+{\n+  __asm__ __volatile__ (\"add%.l %0,%1\"\n+\t\t\t: : \"id\" (__val), \"m\" (*__mem) : \"memory\");\n+}\n+\n+#endif /* atomicity.h */\n+\n+"}]}