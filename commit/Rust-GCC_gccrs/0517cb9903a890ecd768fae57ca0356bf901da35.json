{"sha": "0517cb9903a890ecd768fae57ca0356bf901da35", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDUxN2NiOTkwM2E4OTBlY2Q3NjhmYWU1N2NhMDM1NmJmOTAxZGEzNQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-10-04T05:06:32Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-10-04T05:06:32Z"}, "message": "[multiple changes]\n\n\n2000-10-02  Steven King  <sxking@uswest.net>\n\n        * mkcshadow: Fixed script to output proper include guard.\n        * bits/char_traits.h: Cleaned up types in char_traits<char> functions.\n        * libio/_G_config.h: Hacked to make work with shadow heraders.\n        * shadow/*: Hacked to make shadow headers work.\n\n2000-10-02  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n\n\tSelf-compile with shadow headers.\n\t* acconfig.h (_GLIBCPP_USE_SHADOW_HEADERS): Define. Eventually,\n\tlike _GLIBCPP_USE_NAMESPACES before it, this macro will die when\n\tit becomes the default way the library is built.\n\t* acinclude.m4 (GLIBCPP_ENABLE_SHADOW): New macro.\n\t* config/gnu-linux/bits/ctype_base.h (ctype_base): Use it.\n\t* config/gnu-linux/ctype.cc (ctype): Use it.\n\n\t* src/localename.cc (locale::_Impl::_M_replace_categories): Remove\n\tcall to assert.\n\t* src/locale.cc: Explicitly cast mbstate_t to void* in calls to\n\tmemset. This should not be necessary, but an ambiguous overload\n\twith it in.\n\n\t* shadow/bits/std_cwchar.h: Fix.\n\t* shadow/wchar.h: Fix.\n\n\t* config/gnu-linux/bits/ctype_base.h (ctype_base): Inject ctype\n\tenums into namespace std:: for ctype_base enum. Other OS types\n\twill have to do this as well.\n\t* config/gnu-linux/ctype.cc (ctype): Inject ctype data into\n\tnamespace std, in particular __ctype_toupper, __ctype_tolower,\n\t__ctype_b.\n\n\t* shadow/iolibio.h: New file.\n\t* shadow/bits/wrap_iolibio.h: New file.\n\t* shadow/libioP.h: New file.\n\t* shadow/bits/wrap_libioP.h: New file.\n\t* shadow/bits/wrap_fcntl.h: New file.\n\t* shadow/fcntl.h: New file.\n\t* shadow/iconv.h: New file. Inject iconv names into the global\n\tnamespace, unmangled for the moment.\n\t* shadow/bits/wrap_iconv.h: New file.\n\t* shadow/unistd.h: Remove. Useless.\n\t* shadow/bits/wrap_unistd.h: Remove.\n\n\t* src/Makefile.am: Take out machine-ansi.h, add fcntl.h unistd.h.\n\t* src/Makefile.in: Regenerate.\n\n\t* config/c_io_libio.h (_IO_codecvt): Change to normal C++ decl.\n\n\t* shadow/libio.h: Fix.\n\t* shadow/bits/wrap_libio.h: Fix.\n\n\t* shadow/bits/std_clocale.h: Remove typedef struct construct,\n\twhich will not compile.\n\t* shadow/bits/std_ctime.h: Same.\n\n\t* shadow/pthread.h: New file. Put pthreads types and functions\n\tinto global scope, which is probably not the correct long-term\n\tsolution but has to be done at the moment before libio wrappers\n\tcan even be started.\n\t* shadow/bits/wrap_pthread.h: New file.\n\n\t* bits/std_ios.h: Formatting tweak.\n\t* shadow/bits/std_cstdio.h: Format. Remove extraneous bits.\n\n\t* acinclude.m4 (GLIBCPP_CHECK_COMPILER_FEATURES): Add -Werror to\n\ttests for compiler features.\n\t* aclocal.m4: Regenerate.\n\t* configure: Regenerate.\n\n\t* config/c_io_libio.cc: Remove fcntl.h include, as SEEK_SET\n\tredefined.\n\t* libio/libioP.h: Comment out fcntl.h include.\n\n\t* shadow/math.h: Add in float and long declarations, as per ISO C9X.\n\n\t* bits/c++config: Define _ISOC99_SOURCE.\n\n\t* acinclude.m4 (GLIBCPP_ENABLE_SHADOW): Add -fno-builtins to\n\tCSHADOWFLAGS, as well as _ISOC99_SOURCE.\n\t* aclocal.m4: Regenerate.\n\t* configure: Regenerate.\n\t* src/Makefile.am (CSHADOW_INCLUDES): Enable, again.\n\t(CSHADOW_INCLUDES): Add -I$(top_srcdir)/std before shadow include dir.\n\t(CXXCOMPILE): Remove $(DEFS), which searches $(top_srcdir) before\n\tstd or shadow directories.\n\t(LTCXXCOMPILE): Same.\n\t(INCLUDES): Add $(top_builddir) before $(top_srcdir).\n\t(AC_CXXFLAGS): Add CSHADOWFLAGS.\n\t* src/Makefile.in: Regenerate.\n\n\t* src/complex.cc (FCT): Change ::name to name.\n\t* src/complexl.cc (FCT): Same. Use _GLIBCPP_USE_LONG_LONG here.\n\t* src/complexf.cc (FCT): Same.\n\n\t* src/complexf.cc: Remove FCT define, as things are properly\n\toverloaded in the std namespace with the shadow headers.\n\t* src/complexl.cc: Same.\n\t* src/complex.cc: Same.\n\nFrom-SVN: r36707", "tree": {"sha": "cb166d845d61908cdc869fcd7da7ed653a187423", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb166d845d61908cdc869fcd7da7ed653a187423"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0517cb9903a890ecd768fae57ca0356bf901da35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0517cb9903a890ecd768fae57ca0356bf901da35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0517cb9903a890ecd768fae57ca0356bf901da35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0517cb9903a890ecd768fae57ca0356bf901da35/comments", "author": null, "committer": null, "parents": [{"sha": "1792c91ce6609556a835b413d34bbc25932f07e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1792c91ce6609556a835b413d34bbc25932f07e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1792c91ce6609556a835b413d34bbc25932f07e0"}], "stats": {"total": 7036, "additions": 3505, "deletions": 3531}, "files": [{"sha": "84d18d06c4847d642617fb3133444651833adac1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0517cb9903a890ecd768fae57ca0356bf901da35", "patch": "@@ -1,3 +1,104 @@\n+2000-10-02  Steven King  <sxking@uswest.net>\n+\n+        * mkcshadow: Fixed script to output proper include guard.\n+        * bits/char_traits.h: Cleaned up types in char_traits<char> functions.\n+        * libio/_G_config.h: Hacked to make work with shadow heraders.\n+        * shadow/*: Hacked to make shadow headers work. \n+\n+2000-10-02  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n+\n+\tSelf-compile with shadow headers.\n+\t* acconfig.h (_GLIBCPP_USE_SHADOW_HEADERS): Define. Eventually,\n+\tlike _GLIBCPP_USE_NAMESPACES before it, this macro will die when\n+\tit becomes the default way the library is built.\n+\t* acinclude.m4 (GLIBCPP_ENABLE_SHADOW): New macro.\n+\t* config/gnu-linux/bits/ctype_base.h (ctype_base): Use it.\n+\t* config/gnu-linux/ctype.cc (ctype): Use it.\n+\t\n+\t* src/localename.cc (locale::_Impl::_M_replace_categories): Remove\n+\tcall to assert.\n+\t* src/locale.cc: Explicitly cast mbstate_t to void* in calls to\n+\tmemset. This should not be necessary, but an ambiguous overload\n+\twith it in.\n+\n+\t* shadow/bits/std_cwchar.h: Fix.\n+\t* shadow/wchar.h: Fix.\n+\n+\t* config/gnu-linux/bits/ctype_base.h (ctype_base): Inject ctype\n+\tenums into namespace std:: for ctype_base enum. Other OS types\n+\twill have to do this as well.\n+\t* config/gnu-linux/ctype.cc (ctype): Inject ctype data into\n+\tnamespace std, in particular __ctype_toupper, __ctype_tolower,\n+\t__ctype_b.\n+\n+\t* shadow/iolibio.h: New file.\n+\t* shadow/bits/wrap_iolibio.h: New file.\n+\t* shadow/libioP.h: New file.\n+\t* shadow/bits/wrap_libioP.h: New file.\n+\t* shadow/bits/wrap_fcntl.h: New file.\n+\t* shadow/fcntl.h: New file.\n+\t* shadow/iconv.h: New file. Inject iconv names into the global\n+\tnamespace, unmangled for the moment.\n+\t* shadow/bits/wrap_iconv.h: New file.\n+\t* shadow/unistd.h: Remove. Useless.\n+\t* shadow/bits/wrap_unistd.h: Remove.\n+\t\n+\t* src/Makefile.am: Take out machine-ansi.h, add fcntl.h unistd.h.\n+\t* src/Makefile.in: Regenerate.\n+\t\n+\t* config/c_io_libio.h (_IO_codecvt): Change to normal C++ decl.\n+\t\n+\t* shadow/libio.h: Fix.\n+\t* shadow/bits/wrap_libio.h: Fix.\n+\n+\t* shadow/bits/std_clocale.h: Remove typedef struct construct,\n+\twhich will not compile.\n+\t* shadow/bits/std_ctime.h: Same.\n+\t\n+\t* shadow/pthread.h: New file. Put pthreads types and functions\n+\tinto global scope, which is probably not the correct long-term\n+\tsolution but has to be done at the moment before libio wrappers\n+\tcan even be started.\n+\t* shadow/bits/wrap_pthread.h: New file.\n+\n+\t* bits/std_ios.h: Formatting tweak.\n+\t* shadow/bits/std_cstdio.h: Format. Remove extraneous bits.\n+\n+\t* acinclude.m4 (GLIBCPP_CHECK_COMPILER_FEATURES): Add -Werror to\n+\ttests for compiler features.\n+\t* aclocal.m4: Regenerate.\n+\t* configure: Regenerate.\n+\t\n+\t* config/c_io_libio.cc: Remove fcntl.h include, as SEEK_SET\n+\tredefined.\n+\t* libio/libioP.h: Comment out fcntl.h include.\n+\n+\t* shadow/math.h: Add in float and long declarations, as per ISO C9X.\n+\n+\t* bits/c++config: Define _ISOC99_SOURCE.\n+\n+\t* acinclude.m4 (GLIBCPP_ENABLE_SHADOW): Add -fno-builtins to\n+\tCSHADOWFLAGS, as well as _ISOC99_SOURCE.\n+\t* aclocal.m4: Regenerate.\n+\t* configure: Regenerate.\n+\t* src/Makefile.am (CSHADOW_INCLUDES): Enable, again.\n+\t(CSHADOW_INCLUDES): Add -I$(top_srcdir)/std before shadow include dir.\n+\t(CXXCOMPILE): Remove $(DEFS), which searches $(top_srcdir) before\n+\tstd or shadow directories.\n+\t(LTCXXCOMPILE): Same.\n+\t(INCLUDES): Add $(top_builddir) before $(top_srcdir).\n+\t(AC_CXXFLAGS): Add CSHADOWFLAGS.\n+\t* src/Makefile.in: Regenerate.\n+\n+\t* src/complex.cc (FCT): Change ::name to name.\n+\t* src/complexl.cc (FCT): Same. Use _GLIBCPP_USE_LONG_LONG here.\n+\t* src/complexf.cc (FCT): Same.\n+\n+\t* src/complexf.cc: Remove FCT define, as things are properly\n+\toverloaded in the std namespace with the shadow headers.\n+\t* src/complexl.cc: Same.\n+\t* src/complex.cc: Same.\n+\t\n 2000-09-25  Phil Edwards  <pme@sources.redhat.com>\n \n \t* docs/documentation.html:  Add link to..."}, {"sha": "30badd911d18f4d7932e2c006a8b4dc56f6423ae", "filename": "libstdc++-v3/acconfig.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Facconfig.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Facconfig.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facconfig.h?ref=0517cb9903a890ecd768fae57ca0356bf901da35", "patch": "@@ -3,6 +3,9 @@\n // Include support for 'long long' and 'unsigned long long'.\n #undef _GLIBCPP_USE_LONG_LONG\n \n+// Include support for shadow headers, ie --enable-cshadow-headers.\n+#undef _GLIBCPP_USE_SHADOW_HEADERS\n+\n // Define if the host has a type mbstate_t defined in\n // wchar.h, as required by 21.1.3.1. Some systems, namely\n // hppa-hp-hpux10.20 do not meet this requirement, and must be worked"}, {"sha": "860490c9c555df6e499e5fc011fc9627bd277048", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=0517cb9903a890ecd768fae57ca0356bf901da35", "patch": "@@ -205,7 +205,7 @@ AC_DEFUN(GLIBCPP_CHECK_COMPILER_FEATURES, [\n \n   # Check for more sophisticated diagnostic control.\n   AC_MSG_CHECKING([for g++ that supports -fdiagnostics-show-location=once])\n-  CXXFLAGS='-fdiagnostics-show-location=once'\n+  CXXFLAGS='-Werror -fdiagnostics-show-location=once'\n   AC_TRY_COMPILE(, [int foo;\n   ], [ac_gabydiags=yes], [ac_gabydiags=no])\n   if test \"$ac_test_CXXFLAGS\" = set; then\n@@ -221,7 +221,7 @@ AC_DEFUN(GLIBCPP_CHECK_COMPILER_FEATURES, [\n \n   # Check for -ffunction-sections -fdata-sections\n   AC_MSG_CHECKING([for g++ that supports -ffunction-sections -fdata-sections])\n-  CXXFLAGS='-ffunction-sections -fdata-sections'\n+  CXXFLAGS='-Werror -ffunction-sections -fdata-sections'\n   AC_TRY_COMPILE(, [int foo;\n   ], [ac_fdsections=yes], [ac_fdsections=no])\n   if test \"$ac_test_CXXFLAGS\" = set; then\n@@ -1446,10 +1446,11 @@ changequote([, ])\n   AC_MSG_RESULT($enable_cshadow_headers)\n \n   dnl Option parsed, now set things appropriately\n-  dnl CSHADOWFLAGS is currently unused, but may be useful in the future.\n+  dnl NB: these things may be duplicated in c++config.h as well.\n   case \"$enable_cshadow_headers\" in\n     yes) \n-\tCSHADOWFLAGS=\"\"\n+\tCSHADOWFLAGS=\"-fno-builtin\"\n+        AC_DEFINE(_GLIBCPP_USE_SHADOW_HEADERS)\n \t;;\n     no)   \n \tCSHADOWFLAGS=\"\""}, {"sha": "e827cce943150518796763941cdc35288f6241a9", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=0517cb9903a890ecd768fae57ca0356bf901da35", "patch": "@@ -217,7 +217,7 @@ AC_DEFUN(GLIBCPP_CHECK_COMPILER_FEATURES, [\n \n   # Check for more sophisticated diagnostic control.\n   AC_MSG_CHECKING([for g++ that supports -fdiagnostics-show-location=once])\n-  CXXFLAGS='-fdiagnostics-show-location=once'\n+  CXXFLAGS='-Werror -fdiagnostics-show-location=once'\n   AC_TRY_COMPILE(, [int foo;\n   ], [ac_gabydiags=yes], [ac_gabydiags=no])\n   if test \"$ac_test_CXXFLAGS\" = set; then\n@@ -233,7 +233,7 @@ AC_DEFUN(GLIBCPP_CHECK_COMPILER_FEATURES, [\n \n   # Check for -ffunction-sections -fdata-sections\n   AC_MSG_CHECKING([for g++ that supports -ffunction-sections -fdata-sections])\n-  CXXFLAGS='-ffunction-sections -fdata-sections'\n+  CXXFLAGS='-Werror -ffunction-sections -fdata-sections'\n   AC_TRY_COMPILE(, [int foo;\n   ], [ac_fdsections=yes], [ac_fdsections=no])\n   if test \"$ac_test_CXXFLAGS\" = set; then\n@@ -1458,10 +1458,11 @@ changequote([, ])\n   AC_MSG_RESULT($enable_cshadow_headers)\n \n   dnl Option parsed, now set things appropriately\n-  dnl CSHADOWFLAGS is currently unused, but may be useful in the future.\n+  dnl NB: these things may be duplicated in c++config.h as well.\n   case \"$enable_cshadow_headers\" in\n     yes) \n-\tCSHADOWFLAGS=\"\"\n+\tCSHADOWFLAGS=\"-fno-builtin\"\n+        AC_DEFINE(_GLIBCPP_USE_SHADOW_HEADERS)\n \t;;\n     no)   \n \tCSHADOWFLAGS=\"\""}, {"sha": "07667353a0441e78cc20e8ce023eaf6aabe2220e", "filename": "libstdc++-v3/bits/c++config", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fbits%2Fc%2B%2Bconfig?ref=0517cb9903a890ecd768fae57ca0356bf901da35", "patch": "@@ -33,10 +33,12 @@\n // The current version of the C++ library in compressed ISO date format.\n #define __GLIBCPP__ 20000911\n \n-// By enabling this, __USE_ISOC99 is also enabled, along with other\n-// bits like POSIX, SVID, X/Open and GNU extensions.\n+// By enabling this, all GNU extensions are enabled.\n #define _GNU_SOURCE 1\n \n+// By enabling this, all ISO C99, ISO C9X functionality is enabled.\n+#define _ISOC99_SOURCE 1\n+\n // This flag controls the error handling in string, and perhaps other\n // bits as time goes on: check out bits/basic_string.h for more\n // info. It also helps alleviate the circular dependency between"}, {"sha": "baab72293c345405b098544d3f4cb12c8c043926", "filename": "libstdc++-v3/bits/char_traits.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fbits%2Fchar_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fbits%2Fchar_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fbits%2Fchar_traits.h?ref=0517cb9903a890ecd768fae57ca0356bf901da35", "patch": "@@ -176,23 +176,23 @@ namespace std {\n \n       static const char_type* \n       find(const char_type* __s, size_t __n, const char_type& __a)\n-      { return static_cast<char*>(memchr(__s, __a, __n)); }\n+      { return static_cast<const char_type*>(memchr(__s, __a, __n)); }\n \n       static char_type* \n       move(char_type* __s1, const char_type* __s2, size_t __n)\n-      { return static_cast<char*>(memmove(__s1, __s2, __n)); }\n+      { return static_cast<char_type*>(memmove(__s1, __s2, __n)); }\n \n       static char_type* \n       copy(char_type* __s1, const char_type* __s2, size_t __n)\n-      {  return static_cast<char*>(memcpy(__s1, __s2, __n)); }\n+      {  return static_cast<char_type*>(memcpy(__s1, __s2, __n)); }\n \n       static char_type* \n       assign(char_type* __s, size_t __n, char_type __a)\n-      { return static_cast<char*>(memset(__s, __a, __n)); }\n+      { return static_cast<char_type*>(memset(__s, __a, __n)); }\n \n       static char_type \n       to_char_type(const int_type& __c)\n-      { return static_cast<char>(__c); }\n+      { return static_cast<char_type>(__c); }\n \n       // To keep both the byte 0xff and the eof symbol 0xffffffff\n       // from ending up as 0xffffffff."}, {"sha": "5c61547bff9e76e291dc90b67f1d6b9a3739914f", "filename": "libstdc++-v3/bits/std_ios.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fbits%2Fstd_ios.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fbits%2Fstd_ios.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fbits%2Fstd_ios.h?ref=0517cb9903a890ecd768fae57ca0356bf901da35", "patch": "@@ -39,7 +39,7 @@\n #include <bits/char_traits.h> \t// For char_traits, streamoff, streamsize, fpos\n #include <bits/stl_string_fwd.h>// For string.\n #include <bits/std_cstdio.h> \t// For SEEK_SET, SEEK_CUR, SEEK_END\n-# include <bits/localefwd.h>\t// For class locale\n+#include <bits/localefwd.h>\t// For class locale\n #include <bits/ios_base.h>\t// For ios_base declarations.\n #include <bits/std_streambuf.h> \n #include <bits/basic_ios.h>"}, {"sha": "8f198800a0161f549ab1707909468f1fdf4b5464", "filename": "libstdc++-v3/bits/std_iosfwd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fbits%2Fstd_iosfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fbits%2Fstd_iosfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fbits%2Fstd_iosfwd.h?ref=0517cb9903a890ecd768fae57ca0356bf901da35", "patch": "@@ -35,7 +35,7 @@\n #define _CPP_IOSFWD 1\n \n #include <bits/c++config.h>\n-#include <bits/std_cwchar.h> //For mbstate_t\n+#include <bits/std_cwchar.h> // For mbstate_t\n \n namespace std {\n "}, {"sha": "0da0713e72723c1be033b5c100348f6a334c25eb", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=0517cb9903a890ecd768fae57ca0356bf901da35", "patch": "@@ -6,6 +6,9 @@\n // Include support for 'long long' and 'unsigned long long'.\n #undef _GLIBCPP_USE_LONG_LONG\n \n+// Include support for shadow headers, ie --enable-cshadow-headers.\n+#undef _GLIBCPP_USE_SHADOW_HEADERS\n+\n // Define if the host has a type mbstate_t defined in\n // wchar.h, as required by 21.1.3.1. Some systems, namely\n // hppa-hp-hpux10.20 do not meet this requirement, and must be worked"}, {"sha": "9712d264ed914de5fb4286f95d02b4d3b4fe76e7", "filename": "libstdc++-v3/config/c_io_libio.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fconfig%2Fc_io_libio.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fconfig%2Fc_io_libio.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fc_io_libio.cc?ref=0517cb9903a890ecd768fae57ca0356bf901da35", "patch": "@@ -33,7 +33,6 @@\n \n #include <bits/basic_file.h>\n #include <libioP.h>\n-#include <fcntl.h> \t\t// Solaris needs for O_* macros\n \n namespace std {\n "}, {"sha": "7a91e84888960f9be65e354078adaa2d9c39f635", "filename": "libstdc++-v3/config/c_io_libio.h", "status": "modified", "additions": 32, "deletions": 33, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fconfig%2Fc_io_libio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fconfig%2Fc_io_libio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fc_io_libio.h?ref=0517cb9903a890ecd768fae57ca0356bf901da35", "patch": "@@ -57,46 +57,45 @@ namespace std {\n   typedef _IO_FILE \t__c_file_type;\n   typedef _IO_wide_data __c_wfile_type;\n \n-  extern \"C\" struct _IO_codecvt __c_libio_codecvt;\n+  extern \"C\" _IO_codecvt __c_libio_codecvt;\n \n // from ios_base.h\n   struct __ios_flags\n- {\n-   typedef short __int_type;\n-\n-   static const __int_type _S_boolalpha =\t_IO_BAD_SEEN;\n-   static const __int_type _S_dec =\t\t_IO_DEC;\n-   static const __int_type _S_fixed = \t\t_IO_FIXED;\n-   static const __int_type _S_hex =\t\t_IO_HEX;\n-   static const __int_type _S_internal = \t_IO_INTERNAL;\n-   static const __int_type _S_left =   \t\t_IO_LEFT;\n-   static const __int_type _S_oct =\t\t_IO_OCT;\n-   static const __int_type _S_right =\t\t_IO_RIGHT;\n-   static const __int_type _S_scientific =\t_IO_SCIENTIFIC;\n-   static const __int_type _S_showbase =       \t_IO_SHOWBASE;\n-   static const __int_type _S_showpoint =\t_IO_SHOWPOINT;\n-   static const __int_type _S_showpos =\t\t_IO_SHOWPOS;\n-   static const __int_type _S_skipws =\t\t_IO_SKIPWS;\n-   static const __int_type _S_unitbuf =\t\t_IO_UNITBUF;\n-   static const __int_type _S_uppercase\t=\t_IO_UPPERCASE;\n-   static const __int_type _S_adjustfield =\t_IO_LEFT \n-   \t\t\t\t\t\t| _IO_RIGHT\n-                                                | _IO_INTERNAL;\n-   static const __int_type _S_basefield =\t_IO_DEC | _IO_OCT | _IO_HEX;\n-   static const __int_type _S_floatfield =\t_IO_SCIENTIFIC | _IO_FIXED;\n+  {\n+    typedef short __int_type;\n+\n+    static const __int_type _S_boolalpha =\t_IO_BAD_SEEN;\n+    static const __int_type _S_dec =\t\t_IO_DEC;\n+    static const __int_type _S_fixed = \t\t_IO_FIXED;\n+    static const __int_type _S_hex =\t\t_IO_HEX;\n+    static const __int_type _S_internal = \t_IO_INTERNAL;\n+    static const __int_type _S_left =          \t_IO_LEFT;\n+    static const __int_type _S_oct =\t\t_IO_OCT;\n+    static const __int_type _S_right =\t\t_IO_RIGHT;\n+    static const __int_type _S_scientific =\t_IO_SCIENTIFIC;\n+    static const __int_type _S_showbase =      \t_IO_SHOWBASE;\n+    static const __int_type _S_showpoint =\t_IO_SHOWPOINT;\n+    static const __int_type _S_showpos =       \t_IO_SHOWPOS;\n+    static const __int_type _S_skipws =\t\t_IO_SKIPWS;\n+    static const __int_type _S_unitbuf =       \t_IO_UNITBUF;\n+    static const __int_type _S_uppercase =\t_IO_UPPERCASE;\n+    static const __int_type _S_adjustfield =\t_IO_LEFT | _IO_RIGHT\n+    \t\t\t\t\t\t| _IO_INTERNAL;\n+    static const __int_type _S_basefield =\t_IO_DEC | _IO_OCT | _IO_HEX;\n+    static const __int_type _S_floatfield =\t_IO_SCIENTIFIC | _IO_FIXED;\n \n     // 27.4.2.1.3  Type ios_base::iostate\n-   static const __int_type _S_badbit =\t\t_IO_BAD_SEEN;\n-   static const __int_type _S_eofbit =\t\t_IO_EOF_SEEN;\n-   static const __int_type _S_failbit =\t\t_IO_ERR_SEEN;\n+    static const __int_type _S_badbit =\t\t_IO_BAD_SEEN;\n+    static const __int_type _S_eofbit =\t\t_IO_EOF_SEEN;\n+    static const __int_type _S_failbit =       \t_IO_ERR_SEEN;\n \n     // 27.4.2.1.4  Type openmode\n-   static const __int_type _S_app =\t\t_IOS_APPEND;\n-   static const __int_type _S_ate =\t\t_IOS_ATEND;\n-   static const __int_type _S_bin =\t\t_IOS_BIN;\n-   static const __int_type _S_in =\t\t_IOS_INPUT;\n-   static const __int_type _S_out =\t\t_IOS_OUTPUT;\n-   static const __int_type _S_trunc =\t\t_IOS_TRUNC;\n+    static const __int_type _S_app =\t\t_IOS_APPEND;\n+    static const __int_type _S_ate =\t\t_IOS_ATEND;\n+    static const __int_type _S_bin =\t\t_IOS_BIN;\n+    static const __int_type _S_in =\t\t_IOS_INPUT;\n+    static const __int_type _S_out =\t\t_IOS_OUTPUT;\n+    static const __int_type _S_trunc =\t\t_IOS_TRUNC;\n   };\n \n }"}, {"sha": "dfd29fbc4da7e20fc4ad19151d236bbb72b7154b", "filename": "libstdc++-v3/config/gnu-linux/bits/ctype_base.h", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fconfig%2Fgnu-linux%2Fbits%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fconfig%2Fgnu-linux%2Fbits%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fgnu-linux%2Fbits%2Fctype_base.h?ref=0517cb9903a890ecd768fae57ca0356bf901da35", "patch": "@@ -1,6 +1,6 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -33,6 +33,20 @@\n   \n // Information as gleaned from /usr/include/ctype.h\n   \n+#if _GLIBCPP_USE_SHADOW_HEADERS\n+  using _C_legacy::_ISspace;\n+  using _C_legacy::_ISprint;\n+  using _C_legacy::_IScntrl;\n+  using _C_legacy::_ISupper;\n+  using _C_legacy::_ISlower;\n+  using _C_legacy::_ISalpha;\n+  using _C_legacy::_ISdigit;\n+  using _C_legacy::_ISpunct;\n+  using _C_legacy::_ISxdigit;\n+  using _C_legacy::_ISalnum;\n+  using _C_legacy::_ISgraph;\n+#endif\n+\n   struct ctype_base\n   {\n     // Non-standard typedefs."}, {"sha": "63032425c702f0dc18d3e5a0a9c95d4dcc908cd2", "filename": "libstdc++-v3/config/gnu-linux/ctype.cc", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fconfig%2Fgnu-linux%2Fctype.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fconfig%2Fgnu-linux%2Fctype.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fgnu-linux%2Fctype.cc?ref=0517cb9903a890ecd768fae57ca0356bf901da35", "patch": "@@ -33,6 +33,12 @@\n   \n // Information as gleaned from /usr/include/ctype.h\n \n+#if _GLIBCPP_USE_SHADOW_HEADERS\n+  using _C_legacy::__ctype_toupper;\n+  using _C_legacy::__ctype_tolower;\n+  using _C_legacy::__ctype_b;\n+#endif\n+\n   ctype<char>::ctype(const mask* __table, bool __del, size_t __refs)\n     : _Ctype_nois<char>(__refs), _M_del(__table != 0 && __del), \n       _M_toupper(__ctype_toupper), _M_tolower(__ctype_tolower),\n@@ -71,3 +77,12 @@\n \n \n \n+\n+\n+\n+\n+\n+\n+\n+\n+"}, {"sha": "f24d63e7394b36bb2b84a91c1cedb17b7cc44a23", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 917, "deletions": 913, "changes": 1830, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=0517cb9903a890ecd768fae57ca0356bf901da35"}, {"sha": "0efe9e044bfe0216794c4f64e2a3057f90b906c1", "filename": "libstdc++-v3/libio/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Flibio%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Flibio%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FChangeLog?ref=0517cb9903a890ecd768fae57ca0356bf901da35", "patch": "@@ -1,3 +1,7 @@\n+2000-09-27  benjamin kosnik  <bkoz@haight.constant.com>\n+\n+\t* libioP.h: Remove fcntl.h include.\n+\n 2000-08-22  Benjamin Kosnik  <bkoz@gnu.org>\n \n \t* iofwide.c (_IO_fwide): Simplify, as nl_langinfo is assumed."}, {"sha": "ba0df297193d895831523b4035e2105eaa09728a", "filename": "libstdc++-v3/libio/Makefile.in", "status": "modified", "additions": 56, "deletions": 56, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FMakefile.in?ref=0517cb9903a890ecd768fae57ca0356bf901da35", "patch": "@@ -170,62 +170,62 @@ CPPFLAGS = @CPPFLAGS@\n LDFLAGS = @LDFLAGS@\n LIBS = @LIBS@\n libio_la_LDFLAGS = \n-@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@@GLIBCPP_NEED_LIBIO_FALSE@libio_la_OBJECTS = \n-@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@libio_la_OBJECTS =  \\\n-@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@iofwide.lo \\\n-@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@iofclose.lo \\\n-@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@iofopen.lo \\\n-@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@stdio.lo\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@libio_la_OBJECTS =  \\\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@filedoalloc.lo \\\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@genops.lo \\\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@fileops.lo \\\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@stdfiles.lo \\\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@c_codecvt.lo \\\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@wfiledoalloc.lo \\\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@wfileops.lo \\\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@wgenops.lo\n-@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@libio_la_OBJECTS =  \\\n-@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@filedoalloc.lo \\\n-@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@genops.lo \\\n-@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@fileops.lo \\\n-@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@stdfiles.lo \\\n-@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@c_codecvt.lo\n-@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@libio_la_OBJECTS =  \\\n-@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@filedoalloc.lo \\\n-@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@genops.lo \\\n-@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@fileops.lo \\\n-@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@stdfiles.lo \\\n-@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@c_codecvt.lo \\\n-@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@iofwide.lo \\\n-@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@iofclose.lo \\\n-@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@iofopen.lo \\\n-@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@stdio.lo\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@@GLIBCPP_NEED_LIBIO_FALSE@libio_la_OBJECTS =  \\\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@@GLIBCPP_NEED_LIBIO_FALSE@wfiledoalloc.lo \\\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@@GLIBCPP_NEED_LIBIO_FALSE@wfileops.lo \\\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@@GLIBCPP_NEED_LIBIO_FALSE@wgenops.lo\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@libio_la_OBJECTS =  \\\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@wfiledoalloc.lo \\\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@wfileops.lo \\\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@wgenops.lo \\\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@iofwide.lo \\\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@iofclose.lo \\\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@iofopen.lo \\\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@stdio.lo\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@libio_la_OBJECTS =  \\\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@filedoalloc.lo \\\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@genops.lo \\\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@fileops.lo \\\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@stdfiles.lo \\\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@c_codecvt.lo \\\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@wfiledoalloc.lo \\\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@wfileops.lo \\\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@wgenops.lo \\\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@iofwide.lo \\\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@iofclose.lo \\\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@iofopen.lo \\\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@stdio.lo\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@libio_la_OBJECTS =  \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@filedoalloc.lo \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@genops.lo \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@fileops.lo \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@stdfiles.lo \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@c_codecvt.lo \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@wfiledoalloc.lo \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@wfileops.lo \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@wgenops.lo \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@iofwide.lo \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@iofclose.lo \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@iofopen.lo \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@stdio.lo\n+@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@libio_la_OBJECTS = \n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@libio_la_OBJECTS =  \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@wfiledoalloc.lo \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@wfileops.lo \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@wgenops.lo\n+@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@libio_la_OBJECTS =  \\\n+@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@filedoalloc.lo \\\n+@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@genops.lo \\\n+@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@fileops.lo \\\n+@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@stdfiles.lo \\\n+@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@c_codecvt.lo\n+@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@libio_la_OBJECTS =  \\\n+@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@iofwide.lo \\\n+@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@iofclose.lo \\\n+@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@iofopen.lo \\\n+@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@stdio.lo\n+@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@libio_la_OBJECTS =  \\\n+@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@filedoalloc.lo \\\n+@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@genops.lo \\\n+@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@fileops.lo \\\n+@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@stdfiles.lo \\\n+@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@c_codecvt.lo \\\n+@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@iofwide.lo \\\n+@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@iofclose.lo \\\n+@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@iofopen.lo \\\n+@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@stdio.lo\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@libio_la_OBJECTS =  \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@wfiledoalloc.lo \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@wfileops.lo \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@wgenops.lo \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@iofwide.lo \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@iofclose.lo \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@iofopen.lo \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@stdio.lo\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@libio_la_OBJECTS =  \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@filedoalloc.lo \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@genops.lo \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@fileops.lo \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@stdfiles.lo \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@c_codecvt.lo \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@wfiledoalloc.lo \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@wfileops.lo \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@wgenops.lo\n CFLAGS = @CFLAGS@\n CCLD = $(CC)\n DIST_COMMON =  ChangeLog Makefile.am Makefile.in"}, {"sha": "36e5feac8bc31a517dcb987bf8dd667909e5e15a", "filename": "libstdc++-v3/libio/_G_config.h", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Flibio%2F_G_config.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Flibio%2F_G_config.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2F_G_config.h?ref=0517cb9903a890ecd768fae57ca0356bf901da35", "patch": "@@ -19,15 +19,6 @@\n #include <bits/std_cstddef.h>\n \n \n-/* For use as part of glibc (native) or as part of libstdc++ (maybe\n-   not glibc) */\n-#if __GLIBC__ < 2 || (__GLIBC__ == 2  && __GLIBC_MINOR__ <= 1)\n-# ifdef _GLIBCPP_USE_WCHAR_T\n-#  include <bits/std_cwchar.h>\n-typedef mbstate_t __mbstate_t;\n-# endif\n-#endif\n-\n #ifndef _WINT_T\n /* Integral type unchanged by default argument promotions that can\n    hold any value corresponding to members of the extended character\n@@ -36,9 +27,22 @@ typedef mbstate_t __mbstate_t;\n # define _WINT_T\n typedef unsigned int wint_t;\n #endif\n-#define __need_mbstate_t\n-#include <bits/std_cwchar.h>\n-#define _G_size_t\tsize_t\n+\n+/* For use as part of glibc (native) or as part of libstdc++ (maybe\n+   not glibc) */\n+#if __GLIBC__ < 2 || (__GLIBC__ == 2  && __GLIBC_MINOR__ <= 1)\n+# ifdef _GLIBCPP_USE_WCHAR_T\n+typedef struct\n+{\n+\tint count;\n+\twint_t value;\n+}__mbstate_t;\n+# endif\n+#endif\n+\n+typedef size_t _G_size_t;\n+\n+\n #if defined _LIBC || defined _GLIBCPP_USE_WCHAR_T\n typedef struct\n {"}, {"sha": "61be4b73b94d9e2c7c19e671ca6f446f2c563464", "filename": "libstdc++-v3/libio/iolibio.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Flibio%2Fiolibio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Flibio%2Fiolibio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2Fiolibio.h?ref=0517cb9903a890ecd768fae57ca0356bf901da35", "patch": "@@ -78,3 +78,5 @@ _IO_FILE *__old_freopen __P ((const char *, const char *, _IO_FILE *));\n #ifdef __cplusplus\n }\n #endif\n+\n+"}, {"sha": "4d4bd4f65f295e8d799ffb113a52dd4fcfb79061", "filename": "libstdc++-v3/mkcshadow", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fmkcshadow", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fmkcshadow", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmkcshadow?ref=0517cb9903a890ecd768fae57ca0356bf901da35", "patch": "@@ -66,8 +66,10 @@ while read header; do\n //       script.  RTFM!\n \n #ifndef  _INCLUDED_CPP_${UPNAME}_\n+# define _INCLUDED_CPP_${UPNAME}_\n \n # ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n+#   pragma GCC system_header\n #   include_next <${header}>\n # else\n \n@@ -76,9 +78,11 @@ while read header; do\n     namespace _C_legacy {\n       extern \"C\" {\n #       define _IN_C_LEGACY_\n+#       pragma GCC system_header\n #       include_next <${header}>\n       } // close extern \"C\"\n     }   // close namespace _C_legacy::\n+# undef _IN_C_LEGACY_\n   \n # endif /* _IN_C_LEGACY_ */\n #endif /* _INCLUDED_CPP_${UPNAME}_ */"}, {"sha": "3507bdf449a5663a590fbc79f4fc1b488effa0a5", "filename": "libstdc++-v3/shadow/assert.h", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Fassert.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Fassert.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fassert.h?ref=0517cb9903a890ecd768fae57ca0356bf901da35", "patch": "@@ -29,7 +29,23 @@\n \n \n // no include guard here.\n-# undef _SHADOW_NAME\n-# define _SHADOW_NAME <cassert>\n-# include <bits/generic_shadow.h>\n-# undef _SHADOW_NAME\n+#ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n+      // get out of the \"legacy\"\n+    } // close extern \"C\"\n+  }   // close namespace _C_legacy::\n+# undef _IN_C_LEGACY_\n+# define _ASSERT_NEED_C_LEGACY_\n+#endif\n+\n+#include <cassert>\n+ \n+  // expose global C names, including non-standard ones, but shadow\n+  //   some names and types with the std:: C++ version.\n+\n+#ifdef _ASSERT_NEED_C_LEGACY_\n+  // dive back into the \"swamp\"\n+  namespace _C_legacy {\n+    extern \"C\" {\n+# define _IN_C_LEGACY_\n+# undef _ASSERT_NEED_C_LEGACY_\n+#endif /* _ASSERT_NEED_C_LEGACY_ */"}, {"sha": "7017de99b27845f1db6a990353c32c52698a5537", "filename": "libstdc++-v3/shadow/bits/std_cassert.h", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cassert.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cassert.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cassert.h?ref=0517cb9903a890ecd768fae57ca0356bf901da35", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- header wrapper.\n \n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -31,13 +31,19 @@\n // ISO C++ 14882: 19.2  Assertions\n //\n \n-// No include guards or wrappers on this header...\n-//\n-//   If <assert.h> sub-includes anything else that \n-//   defines a global used in other headers, we are sunk.\n+#ifndef _CPP_CASSERT\n+#define _CPP_CASSERT 1\n+\n+namespace _C_legacy {\n+  extern \"C\" {\n+#   define _IN_C_LEGACY_\n+#   pragma GCC system_header\n+#   include_next <assert.h>\n+  }\n+} // namespace _C_legacy\n+\n+#undef _IN_C_LEGACY_\n+\n+#endif\n \n-extern \"C\" {\n-# pragma GCC system_header\n-# include_next <assert.h>\n-}\n "}, {"sha": "d164d9c198efe0a98a96f9e53f411a922c96e696", "filename": "libstdc++-v3/shadow/bits/std_cctype.h", "status": "modified", "additions": 87, "deletions": 85, "changes": 172, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cctype.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cctype.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cctype.h?ref=0517cb9903a890ecd768fae57ca0356bf901da35", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- header wrapper.\n \n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -33,30 +33,52 @@\n #ifndef _CPP_CCTYPE\n #define _CPP_CCTYPE 1\n \n-  namespace _C_legacy {\n-    extern \"C\" {\n+namespace _C_legacy {\n+  extern \"C\" {\n #     define _IN_C_LEGACY_\n #     pragma GCC system_header\n #     include_next <ctype.h>\n-    }\n-\n-    inline int _CPP_isalnum_capture(int c) { return isalnum (c); }\n-    inline int _CPP_isalpha_capture(int c) { return isalpha (c); }\n-    inline int _CPP_iscntrl_capture(int c) { return iscntrl (c); }\n-    inline int _CPP_isdigit_capture(int c) { return isdigit (c); }\n-    inline int _CPP_isgraph_capture(int c) { return isgraph (c); }\n-    inline int _CPP_islower_capture(int c) { return islower (c); }\n-    inline int _CPP_isprint_capture(int c) { return isprint (c); }\n-    inline int _CPP_ispunct_capture(int c) { return ispunct (c); }\n-    inline int _CPP_isspace_capture(int c) { return isspace (c); }\n-    inline int _CPP_isupper_capture(int c) { return isupper (c); }\n-    inline int _CPP_isxdigit_capture(int c) { return isxdigit (c); }\n-\n-    inline int _CPP_tolower_capture(int c) { return tolower (c); }\n-    inline int _CPP_toupper_capture(int c) { return toupper (c); }\n-\n-    namespace _C_shadow { }\n-  } // close namespace ::_C_legacy::\n+  }\n+\n+  inline int \n+  _CPP_isalnum_capture(int c) { return isalnum(c); }\n+\n+  inline int \n+  _CPP_isalpha_capture(int c) { return isalpha(c); }\n+\n+  inline int \n+  _CPP_iscntrl_capture(int c) { return iscntrl(c); }\n+\n+  inline int \n+  _CPP_isdigit_capture(int c) { return isdigit(c); }\n+\n+  inline int \n+  _CPP_isgraph_capture(int c) { return isgraph(c); }\n+\n+  inline int \n+  _CPP_islower_capture(int c) { return islower(c); }\n+\n+  inline int \n+  _CPP_isprint_capture(int c) { return isprint(c); }\n+\n+  inline int \n+  _CPP_ispunct_capture(int c) { return ispunct(c); }\n+\n+  inline int \n+  _CPP_isspace_capture(int c) { return isspace(c); }\n+\n+  inline int \n+  _CPP_isupper_capture(int c) { return isupper(c); }\n+\n+  inline int \n+  _CPP_isxdigit_capture(int c) { return isxdigit(c); }\n+\n+  inline int \n+  _CPP_tolower_capture(int c) { return tolower(c); }\n+\n+  inline int \n+  _CPP_toupper_capture(int c) { return toupper(c); }\n+} // namespace _C_legacy\n \n # undef isalnum\n # undef isalpha\n@@ -73,71 +95,51 @@\n # undef tolower\n # undef toupper\n \n-#if 0  /* these might not be necessary any more. 98-09-29 */\n-# undef _U\n-# undef _L\n-# undef _N\n-# undef _S\n-# undef _P\n-# undef _C\n-# undef _B\n-# undef _X\n-#endif\n+namespace std {\n+  inline int \n+  isalnum(int __c) { return _C_legacy::_CPP_isalnum_capture(__c); }\n \n-  namespace _C_legacy {\n-    namespace _C_shadow {\n-    }\n-  }\n-  namespace std {\n-\n-    inline int isalnum(int __c)\n-      { return ::_C_legacy::_CPP_isalnum_capture (__c); }\n-    inline int isalpha (int __c)\n-      { return ::_C_legacy::_CPP_isalpha_capture (__c); }\n-    inline int iscntrl (int __c)\n-      { return ::_C_legacy::_CPP_iscntrl_capture (__c); }\n-    inline int isdigit (int __c)\n-      { return ::_C_legacy::_CPP_isdigit_capture (__c); }\n-    inline int isgraph (int __c)\n-      { return ::_C_legacy::_CPP_isgraph_capture (__c); }\n-    inline int islower (int __c)\n-      { return ::_C_legacy::_CPP_islower_capture (__c); }\n-    inline int isprint (int __c)\n-      { return ::_C_legacy::_CPP_isprint_capture (__c); }\n-    inline int ispunct (int __c)\n-      { return ::_C_legacy::_CPP_ispunct_capture (__c); }\n-    inline int isspace (int __c)\n-      { return ::_C_legacy::_CPP_isspace_capture (__c); }\n-    inline int isupper (int __c)\n-      { return ::_C_legacy::_CPP_isupper_capture (__c); }\n-    inline int isxdigit (int __c)\n-      { return ::_C_legacy::_CPP_isxdigit_capture (__c); }\n-\n-    inline int tolower (int __c)\n-      { return ::_C_legacy::_CPP_tolower_capture (__c); }\n-    inline int toupper (int __c)\n-      { return ::_C_legacy::_CPP_toupper_capture (__c); }\n-\n-  } // close namespace std::\n-  \n-  namespace _C_legacy {\n-    namespace _C_shadow {\n-      using ::std::isalnum;\n-      using ::std::isalpha;\n-      using ::std::iscntrl;\n-      using ::std::isdigit;\n-      using ::std::isgraph;\n-      using ::std::islower;\n-      using ::std::isprint;\n-      using ::std::ispunct;\n-      using ::std::isspace;\n-      using ::std::isupper;\n-      using ::std::isxdigit;\n-      using ::std::tolower;\n-      using ::std::toupper;\n-    }\n-  }\n+  inline int \n+  isalpha(int __c) { return _C_legacy::_CPP_isalpha_capture(__c); }\n+\n+  inline int \n+  iscntrl(int __c) { return _C_legacy::_CPP_iscntrl_capture(__c); }\n+\n+  inline int \n+  isdigit(int __c) { return _C_legacy::_CPP_isdigit_capture(__c); }\n+\n+  inline int \n+  isgraph(int __c) { return _C_legacy::_CPP_isgraph_capture(__c); }\n+\n+  inline int \n+  islower(int __c) { return _C_legacy::_CPP_islower_capture(__c); }\n+\n+  inline int \n+  isprint(int __c) { return _C_legacy::_CPP_isprint_capture(__c); }\n+\n+  inline int \n+  ispunct(int __c) { return _C_legacy::_CPP_ispunct_capture(__c); }\n+\n+  inline int \n+  isspace(int __c) { return _C_legacy::_CPP_isspace_capture(__c); }\n \n+  inline int \n+  isupper(int __c) { return _C_legacy::_CPP_isupper_capture(__c); }\n+\n+  inline int \n+  isxdigit(int __c) { return _C_legacy::_CPP_isxdigit_capture(__c); }\n+\n+  inline int \n+  tolower(int __c) { return _C_legacy::_CPP_tolower_capture(__c); }\n+\n+  inline int \n+  toupper(int __c) { return _C_legacy::_CPP_toupper_capture(__c); }\n+} // namespace std\n+  \n # undef _IN_C_LEGACY_\n \n #endif\n+\n+\n+\n+"}, {"sha": "fb7a73fe64dba59a28d04f33e108c21f01a70d8a", "filename": "libstdc++-v3/shadow/bits/std_cerrno.h", "status": "modified", "additions": 11, "deletions": 21, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cerrno.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cerrno.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cerrno.h?ref=0517cb9903a890ecd768fae57ca0356bf901da35", "patch": "@@ -1,7 +1,6 @@\n // -*- C++ -*- header wrapper.\n \n-\n-//// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -34,33 +33,24 @@\n #ifndef _CPP_CERRNO\n #define _CPP_CERRNO 1\n \n-  namespace _C_legacy {\n-    extern \"C\" {\n+namespace _C_legacy {\n+  extern \"C\" {\n #     define _IN_C_LEGACY_\n #     pragma GCC system_header\n #     include_next <errno.h>\n-    }\n+  }\n \n-    int& _CPP_errno_capture() { return errno; }\n+  //  inline int& \n+  //  _CPP_errno_capture() { return errno; }\n \n-    namespace _C_shadow { }\n-  } // close namespace ::_C_legacy::\n+} // namespace _C_legacy::\n \n #  undef  errno\n-#  define errno ::_C_legacy::_CPP_errno_capture()\n-// # undef EDOM\n-// # undef ERANGE\n+//#  define errno _C_legacy::_CPP_errno_capture()\n \n-  namespace _C_legacy {\n-    namespace _C_shadow {\n-    }\n-  }\n-  namespace std { \n-  } // close namespace std::\n-  namespace _C_legacy {\n-    namespace _C_shadow {\n-    }\n-  }\n+namespace std {\n+  using _C_legacy::errno;\n+}\n \n # undef _IN_C_LEGACY_\n "}, {"sha": "d8885e69c44cb22b472bbaf4945262b4cdb15a4b", "filename": "libstdc++-v3/shadow/bits/std_cfloat.h", "status": "modified", "additions": 10, "deletions": 141, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cfloat.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cfloat.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cfloat.h?ref=0517cb9903a890ecd768fae57ca0356bf901da35", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- header wrapper.\n \n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -34,152 +34,21 @@\n #ifndef _CPP_CFLOAT\n #define _CPP_CFLOAT 1\n \n-#if 0  /* 1998-09-29 */\n-# ifdef __GLIBC__\n-// For GNU libc we must also include this one:\n-#  include <fenv.h>\n-# endif\n-#endif\n-\n-  namespace _C_legacy {\n-    extern \"C\" {\n+namespace _C_legacy {\n+  extern \"C\" {\n #     define _IN_C_LEGACY_\n #     pragma GCC system_header\n #     include_next <float.h>\n-    }\n-\n-    inline int _CPP_FLT_ROUNDS_capture() { return FLT_ROUNDS; }\n-\n-    // FLT_RADIX is OK as-is.\n-    // const int     _CPP_FLT_RADIX_capture() { return FLT_RADIX; }\n- \n-    inline int _CPP_FLT_MANT_DIG_capture() { return FLT_MANT_DIG; }\n-    inline int _CPP_DBL_MANT_DIG_capture() { return DBL_MANT_DIG; }\n-    inline int _CPP_LDBL_MANT_DIG_capture() { return LDBL_MANT_DIG; }\n-\n-    inline int _CPP_FLT_DIG_capture() { return FLT_DIG; }\n-    inline int _CPP_DBL_DIG_capture() { return DBL_DIG; }\n-    inline int _CPP_LDBL_DIG_capture() { return LDBL_DIG; }\n-\n-    inline int _CPP_FLT_MIN_EXP_capture() { return FLT_MIN_EXP; }\n-    inline int _CPP_DBL_MIN_EXP_capture() { return DBL_MIN_EXP; }\n-    inline int _CPP_LDBL_MIN_EXP_capture() { return LDBL_MIN_EXP; }\n-\n-    inline int _CPP_FLT_MIN_10_EXP_capture() { return FLT_MIN_10_EXP; }\n-    inline int _CPP_DBL_MIN_10_EXP_capture() { return DBL_MIN_10_EXP; }\n-    inline int _CPP_LDBL_MIN_10_EXP_capture() { return LDBL_MIN_10_EXP; }\n-\n-    inline int _CPP_FLT_MAX_EXP_capture() { return FLT_MAX_EXP; }\n-    inline int _CPP_DBL_MAX_EXP_capture() { return DBL_MAX_EXP; }\n-    inline int _CPP_LDBL_MAX_EXP_capture() { return LDBL_MAX_EXP; }\n-\n-    inline int _CPP_FLT_MAX_10_EXP_capture() { return FLT_MAX_10_EXP; }\n-    inline int _CPP_DBL_MAX_10_EXP_capture() { return DBL_MAX_10_EXP; }\n-    inline int _CPP_LDBL_MAX_10_EXP_capture() { return LDBL_MAX_10_EXP; }\n-\n-    inline float _CPP_FLT_MAX_capture() { return FLT_MAX; }\n-    inline double _CPP_DBL_MAX_capture() { return DBL_MAX; }\n-    inline long double _CPP_LDBL_MAX_capture() { return LDBL_MAX; }\n-\n-    inline float _CPP_FLT_EPSILON_capture() { return FLT_EPSILON; }\n-    inline double _CPP_DBL_EPSILON_capture() { return DBL_EPSILON; }\n-    inline long double _CPP_LDBL_EPSILON_capture() { return LDBL_EPSILON; }\n-\n-    inline float _CPP_FLT_MIN_capture() { return FLT_MIN; }\n-    inline double _CPP_DBL_MIN_capture() { return DBL_MIN; }\n-    inline long double _CPP_LDBL_MIN_capture() { return LDBL_MIN; }\n-\n-    namespace _C_shadow { }\n-  } // close namespace ::_C_legacy::\n-\n-# undef FLT_ROUNDS\n-# define FLT_ROUNDS ::_C_legacy::_CPP_FLT_ROUNDS_capture() \n-\n-// # undef FLT_RADIX  // OK as-is.\n-\n-# undef FLT_MANT_DIG\n-# define FLT_MANT_DIG ::_C_legacy::_CPP_FLT_MANT_DIG_capture()\n-# undef DBL_MANT_DIG\n-# define DBL_MANT_DIG ::_C_legacy::_CPP_DBL_MANT_DIG_capture()\n-# undef LDBL_MANT_DIG\n-# define LDBL_MANT_DIG ::_C_legacy::_CPP_LDBL_MANT_DIG_capture()\n-\n-# undef FLT_DIG\n-# define FLT_DIG ::_C_legacy::_CPP_FLT_DIG_capture()\n-# undef DBL_DIG\n-# define DBL_DIG ::_C_legacy::_CPP_DBL_DIG_capture()\n-# undef LDBL_DIG\n-# define LDBL_DIG ::_C_legacy::_CPP_LDBL_DIG_capture()\n-\n-# undef FLT_MIN_MIN_DIG\n-# define FLT_MIN_MIN_DIG ::_C_legacy::_CPP_FLT_MIN_MIN_DIG_capture()\n-# undef DBL_MIN_MIN_DIG\n-# define DBL_MIN_MIN_DIG ::_C_legacy::_CPP_DBL_MIN_MIN_DIG_capture()\n-# undef LDBL_MIN_MIN_DIG\n-# define LDBL_MIN_MIN_DIG ::_C_legacy::_CPP_LDBL_MIN_MIN_DIG_capture()\n-\n-# undef FLT_MIN_EXP\n-# define FLT_MIN_EXP ::_C_legacy::_CPP_FLT_MIN_EXP_capture()\n-# undef DBL_MIN_EXP\n-# define DBL_MIN_EXP ::_C_legacy::_CPP_DBL_MIN_EXP_capture()\n-# undef LDBL_MIN_EXP\n-# define LDBL_MIN_EXP ::_C_legacy::_CPP_LDBL_MIN_EXP_capture()\n-\n-# undef FLT_MIN_10_EXP\n-# define FLT_MIN_10_EXP ::_C_legacy::_CPP_FLT_MIN_10_EXP_capture()\n-# undef DBL_MIN_10_EXP\n-# define DBL_MIN_10_EXP _::_C_legacy::CPP_DBL_MIN_10_EXP_capture()\n-# undef LDBL_MIN_10_EXP\n-# define LDBL_MIN_10_EXP ::_C_legacy::_CPP_LDBL_MIN_10_EXP_capture()\n-\n-# undef FLT_MAX_EXP\n-# define FLT_MAX_EXP ::_C_legacy::_CPP_FLT_MAX_EXP_capture()\n-# undef DBL_MAX_EXP\n-# define DBL_MAX_EXP ::_C_legacy::_CPP_DBL_MAX_EXP_capture()\n-# undef LDBL_MAX_EXP\n-# define LDBL_MAX_EXP ::_C_legacy::_CPP_LDBL_MAX_EXP_capture()\n-\n-# undef FLT_MAX_10_EXP\n-# define FLT_MAX_10_EXP ::_C_legacy::_CPP_FLT_MAX_10_EXP_capture()\n-# undef DBL_MAX_10_EXP\n-# define DBL_MAX_10_EXP ::_C_legacy::_CPP_DBL_MAX_10_EXP_capture()\n-# undef LDBL_MAX_10_EXP\n-# define LDBL_MAX_10_EXP ::_C_legacy::_CPP_LDBL_MAX_10_EXP_capture()\n-\n-# undef FLT_MAX\n-# define FLT_MAX ::_C_legacy::_CPP_FLT_MAX_capture()\n-# undef DBL_MAX\n-# define DBL_MAX ::_C_legacy::_CPP_DBL_MAX_capture()\n-# undef LDBL_MAX\n-# define LDBL_MAX ::_C_legacy::_CPP_LDBL_MAX_capture()\n-\n-# undef FLT_EPSILON\n-# define FLT_EPSILON ::_C_legacy::_CPP_FLT_EPSILON_capture()\n-# undef DBL_EPSILON\n-# define DBL_EPSILON ::_C_legacy::_CPP_DBL_EPSILON_capture()\n-# undef LDBL_EPSILON\n-# define LDBL_EPSILON ::_C_legacy::_CPP_LDBL_EPSILON_capture()\n-\n-# undef FLT_MIN\n-# define FLT_MIN ::_C_legacy::_CPP_FLT_MIN_capture()\n-# undef DBL_MIN\n-# define DBL_MIN ::_C_legacy::_CPP_DBL_MIN_capture()\n-# undef LDBL_MIN\n-# define LDBL_MIN ::_C_legacy::_CPP_LDBL_MIN_capture()\n-\n-  namespace _C_legacy {\n-    namespace _C_shadow {\n-    }\n-  }\n-  namespace std {\n-  } // close namespace std::\n-  \n-  namespace _C_legacy {\n-    namespace _C_shadow {\n-    }\n   }\n+} // namespace _C_legacy\n \n # undef _IN_C_LEGACY_\n \n #endif\n \n+\n+\n+\n+\n+\n+"}, {"sha": "d0db90521b062618c2db95f98b64db61815662bc", "filename": "libstdc++-v3/shadow/bits/std_climits.h", "status": "modified", "additions": 14, "deletions": 21, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_climits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_climits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_climits.h?ref=0517cb9903a890ecd768fae57ca0356bf901da35", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- header wrapper.\n \n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -32,33 +32,26 @@\n //\n \n #ifndef _CPP_CLIMITS\n-#define _CPP_CLIMTIS\t1\n+#define _CPP_CLIMTIS 1\n \n-  namespace _C_legacy {\n-    extern \"C\" {\n+namespace _C_legacy {\n+  extern \"C\" {\n #     define _IN_C_LEGACY_\n #     pragma GCC system_header\n #     include_next <limits.h>\n-    }\n-    namespace _C_shadow { }\n-  } // close namespace ::_C_legacy::\n-\n-  // Note: there is not much for this wrapper to do besides hiding \n-  // vendor-extension names and (perhaps) replacing one or other\n-  // macro with a larger value.\n-\n-// #undef MB_LEN_MAX\n-// #define MB_LEN_MAX 16  /* or something */\n-\n-  namespace std {\n-  } // close namespace std::\n-  \n-  namespace _C_legacy {\n-    namespace _C_shadow {\n-    }\n   }\n+} // namespace _C_legacy\n \n # undef _IN_C_LEGACY_\n \n #endif\n \n+\n+\n+\n+\n+\n+\n+\n+\n+"}, {"sha": "86d600e262e96fb29f71e3b63ad4a889f1573683", "filename": "libstdc++-v3/shadow/bits/std_clocale.h", "status": "modified", "additions": 20, "deletions": 59, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_clocale.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_clocale.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_clocale.h?ref=0517cb9903a890ecd768fae57ca0356bf901da35", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- header wrapper.\n \n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -34,76 +34,37 @@\n #ifndef _CPP_CLOCALE\n #define _CPP_CLOCALE     1\n \n-# include <bits/std_cstddef.h> /* pick up NULL */\n+# include <bits/std_cstddef.h> \n \n-  namespace _C_legacy {\n-    extern \"C\" {\n+namespace _C_legacy {\n+  extern \"C\" {\n #     define _IN_C_LEGACY_\n #     pragma GCC system_header\n #     include_next <locale.h>\n-    }\n-\n-    typedef struct lconv _CPP_lconv_capture;\n-    const int _CPP_LC_ALL_capture = LC_ALL;\n-    const int _CPP_LC_COLLATE_capture = LC_COLLATE;\n-    const int _CPP_LC_CTYPE_capture = LC_CTYPE;\n-    const int _CPP_LC_MONETARY_capture = LC_MONETARY;\n-    const int _CPP_LC_NUMERIC_capture = LC_NUMERIC;\n-    const int _CPP_LC_TIME_capture = LC_TIME;\n-#if 0 /* XXX need proper macro guard for this common extension. */\n-    const int _CPP_LC_MESSAGES_capture = LC_MESSAGES;\n-#endif\n-\n-    namespace _C_shadow { }\n-  } // close namespace ::_C_legacy::\n-\n-// #  undef  NULL\n-// #  define NULL 0  /* handled in <cstddef> */\n-#  undef LC_ALL\n-#  define LC_ALL\t::_C_legacy::_CPP_LC_ALL_capture\n-#  undef LC_COLLATE\n-#  define LC_COLLATE\t::_C_legacy::_CPP_LC_COLLATE_capture\n-#  undef LC_CTYPE\n-#  define LC_CTYPE\t::_C_legacy::_CPP_LC_CTYPE_capture\n-#  undef LC_MONETARY\n-#  define LC_MONETARY\t::_C_legacy::_CPP_LC_MONETARY_capture\n-#  undef LC_NUMERIC\n-#  define LC_NUMERIC\t::_C_legacy::_CPP_LC_NUMERIC_capture\n-#  undef LC_TIME\n-#  define LC_TIME\t::_C_legacy::_CPP_LC_TIME_capture\n-#if 0 /* XXX need proper macro guard for this common extension. */\n-#  undef LC_MESSAGES\n-#  define LC_MESSAGES\t::_C_legacy::_CPP_LC_MESSAGES_capture\n-#endif\n+  }\n+\n+  typedef lconv _CPP_lconv_capture;\n+} // namespace _C_legacy\n \n #  undef lconv\n #  undef setlocale\n #  undef localeconv\n \n-  namespace _C_legacy {\n-    namespace _C_shadow {\n-    }\n-  }\n-  namespace std {\n+namespace std {\n+  // Adopt C names into std::\n+  struct lconv : _C_legacy::_CPP_lconv_capture  { };\n \n-    // Adopt C names into std::\n-    using ::_C_legacy::setlocale;  \n+  using _C_legacy::setlocale;  \n+\n+  inline lconv* \n+  localeconv() { return reinterpret_cast<lconv*>(_C_legacy::localeconv()); }\n+} // namespace std\n+\n+# undef _IN_C_LEGACY_\n+\n+#endif \n \n-    // note: still a POD type:\n-    struct lconv  : ::_C_legacy::_CPP_lconv_capture  { };\n \n-    inline lconv* localeconv() \n-      { return reinterpret_cast<lconv*>(::_C_legacy::localeconv()); }\n \n-  } // close namespace std::\n-  \n-  namespace _C_legacy {\n-    namespace _C_shadow {\n-      using ::std::lconv;\n-      using ::std::localeconv;\n-    }\n-  }\n \n-# undef _IN_C_LEGACY_\n \n-#endif /* _CPP_CLOCALE */"}, {"sha": "6113417eae54044298dbe85a84aad0370654179e", "filename": "libstdc++-v3/shadow/bits/std_cmath.h", "status": "modified", "additions": 472, "deletions": 435, "changes": 907, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cmath.h?ref=0517cb9903a890ecd768fae57ca0356bf901da35", "patch": "@@ -36,502 +36,510 @@\n \n # include <bits/c++config.h>\n \n-  namespace _C_legacy {\n-    extern \"C\" {\n+namespace _C_legacy {\n+  extern \"C\" {\n #     define _IN_C_LEGACY_\n #     pragma GCC system_header\n #     include_next <math.h>\n-    }\n-    inline double _CPP_HUGE_VAL_capture()        { return HUGE_VAL; }\n+  }\n \n #if _GLIBCPP_HAVE_ACOSF\n-    inline float _CPP_acos_capture(float __x)\n-      { return acosf(__x); }\n+  inline float \n+  _CPP_acos_capture(float __x) { return acosf(__x); }\n #else\n-    inline float _CPP_acos_capture(float __x)\n-      { return acos(static_cast<double>(__x)); }\n+  inline float \n+  _CPP_acos_capture(float __x) { return acos(static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE_ASINF\n-    inline float _CPP_asin_capture(float __x)\n-      { return asinf(__x); }\n+  inline float \n+  _CPP_asin_capture(float __x) { return asinf(__x); }\n #else\n-    inline float _CPP_asin_capture(float __x)\n-      { return asin(static_cast<double>(__x)); }\n+  inline float \n+  _CPP_asin_capture(float __x) { return asin(static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE_ATANF\n-    inline float _CPP_atan_capture(float __x)\n-      { return atanf(__x); }\n+  inline float \n+  _CPP_atan_capture(float __x) { return atanf(__x); }\n #else\n-    inline float _CPP_atan_capture(float __x)\n-      { return atan(static_cast<double>(__x)); }\n+  inline float \n+  _CPP_atan_capture(float __x) { return atan(static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE_ATAN2F\n-    inline float _CPP_atan2_capture(float __y, float __x)\n-      { return atan2f(__y, __x); }\n+  inline float \n+  _CPP_atan2_capture(float __y, float __x) { return atan2f(__y, __x); }\n #else\n-    inline float _CPP_atan2_capture(float __y, float __x)\n-      { return atan2(static_cast<double>(__y), static_cast<double>(__x)); }\n+  inline float \n+  _CPP_atan2_capture(float __y, float __x) \n+  { return atan2(static_cast<double>(__y), static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE_CEILF\n-    inline float _CPP_ceil_capture(float __x)\n-      { return ceilf(__x); }\n+  inline float \n+  _CPP_ceil_capture(float __x) { return ceilf(__x); }\n #else\n-    inline float _CPP_ceil_capture(float __x)\n-      { return ceil(static_cast<double>(__x)); }\n+  inline float \n+  _CPP_ceil_capture(float __x) { return ceil(static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE___BUILTIN_COSF\n-    inline float _CPP_cos_capture(float __x)\n-      { return __builtin_cosf(__x); }\n+  inline float \n+  _CPP_cos_capture(float __x) { return __builtin_cosf(__x); }\n #elif _GLIBCPP_HAVE_COSF\n-    inline float _CPP_cos_capture(float __x)\n-      { return cosf(__x); }\n+  inline float \n+  _CPP_cos_capture(float __x) { return cosf(__x); }\n #else\n-    inline float _CPP_cos_capture(float __x)\n-      { return cos(static_cast<double>(__x)); }\n+  inline float \n+  _CPP_cos_capture(float __x) { return cos(static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE_COSHF\n-    inline float _CPP_cosh_capture(float __x)\n-      { return coshf(__x); }\n+  inline float \n+  _CPP_cosh_capture(float __x) { return coshf(__x); }\n #else\n-    inline float _CPP_cosh_capture(float __x)\n-      { return cosh(static_cast<double>(__x)); }\n+  inline float \n+  _CPP_cosh_capture(float __x) { return cosh(static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE_EXPF\n-    inline float _CPP_exp_capture(float __x)\n-      { return expf(__x); }\n+  inline float \n+  _CPP_exp_capture(float __x) { return expf(__x); }\n #else\n-    inline float _CPP_exp_capture(float __x)\n-      { return exp(static_cast<double>(__x)); }\n+  inline float \n+  _CPP_exp_capture(float __x) { return exp(static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE___BUILTIN_FABSF\n-    inline float _CPP_fabs_capture(float __x)\n-      { return __builtin_fabsf(__x); }\n+  inline float \n+  _CPP_fabs_capture(float __x) { return __builtin_fabsf(__x); }\n #elif _GLIBCPP_HAVE_FABSF\n-    inline float _CPP_fabs_capture(float __x)\n-      { return fabsf(__x); }\n+  inline float \n+  _CPP_fabs_capture(float __x) { return fabsf(__x); }\n #else\n-    inline float _CPP_fabs_capture(float __x)\n-      { return fabs(static_cast<double>(__x)); }\n+  inline float \n+  _CPP_fabs_capture(float __x) { return fabs(static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE_FLOORF\n-    inline float _CPP_floor_capture(float __x)\n-      { return floorf(__x); }\n+  inline float \n+  _CPP_floor_capture(float __x) { return floorf(__x); }\n #else\n-    inline float _CPP_floor_capture(float __x)\n-      { return floor(static_cast<double>(__x)); }\n+  inline float \n+  _CPP_floor_capture(float __x) { return floor(static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE_FMODFF\n-    inline float _CPP_fmod_capture(float __x, float __y)\n-      { return fmodf(__x, __y); }\n+  inline float \n+  _CPP_fmod_capture(float __x, float __y) { return fmodf(__x, __y); }\n #else\n-    inline float _CPP_fmod_capture(float __x, float __y)\n-      { return fmod(static_cast<double>(__x), static_cast<double>(__y)); }\n+  inline float \n+  _CPP_fmod_capture(float __x, float __y) \n+  { return fmod(static_cast<double>(__x), static_cast<double>(__y)); }\n #endif\n \n #if _GLIBCPP_HAVE_FREXPF\n-    inline float _CPP_frexp_capture(float __x, int* __exp)\n-      { return frexpf(__x, __exp); }\n+  inline float \n+  _CPP_frexp_capture(float __x, int* __exp) { return frexpf(__x, __exp); }\n #else\n-    inline float _CPP_frexp_capture(float __x, int* __exp)\n-      { return frexp(__x, __exp); }\n+  inline float \n+  _CPP_frexp_capture(float __x, int* __exp) { return frexp(__x, __exp); }\n #endif\n \n #if _GLIBCPP_HAVE_LDEXPF\n-    inline float _CPP_ldexp_capture(float __x, int __exp)\n-      { return ldexpf(__x, __exp); }\n+  inline float \n+  _CPP_ldexp_capture(float __x, int __exp) { return ldexpf(__x, __exp); }\n #else\n-    inline float _CPP_ldexp_capture(float __x, int __exp)\n-      { return ldexp(static_cast<double>(__x), __exp); }\n+  inline float \n+  _CPP_ldexp_capture(float __x, int __exp) \n+  { return ldexp(static_cast<double>(__x), __exp); }\n #endif\n \n #if _GLIBCPP_HAVE_LOGF\n-    inline float _CPP_log_capture(float __x)\n-      { return logf(__x); }\n+  inline float \n+  _CPP_log_capture(float __x) { return logf(__x); }\n #else\n-    inline float _CPP_log_capture(float __x)\n-      { return log(static_cast<double>(__x)); }\n+  inline float \n+  _CPP_log_capture(float __x) { return log(static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE_LOG10F\n-    inline float _CPP_log10_capture(float __x)\n-      { return log10f(__x); }\n+  inline float \n+  _CPP_log10_capture(float __x) { return log10f(__x); }\n #else\n-    inline float _CPP_log10_capture(float __x)\n-      { return log10(static_cast<double>(__x)); }\n+  inline float \n+  _CPP_log10_capture(float __x) { return log10(static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE_MODFF\n-    inline float _CPP_modf_capture(float __x, float* __iptr)\n-      { return modff(__x, __iptr); }\n-#else\n-    inline float _CPP_modf_capture(float __x, float* __iptr)\n-    {\n-       double __tmp;\n-       double __res = _C_legacy::modf(static_cast<double>(__x), &__tmp);\n-       *__iptr = static_cast<float> (__tmp);\n-       return __res;\n-    }\n+  inline float \n+  _CPP_modf_capture(float __x, float* __iptr) { return modff(__x, __iptr); }\n+#else\n+  inline float \n+  _CPP_modf_capture(float __x, float* __iptr)\n+  {\n+    double __tmp;\n+    double __res = _C_legacy::modf(static_cast<double>(__x), &__tmp);\n+    *__iptr = static_cast<float> (__tmp);\n+    return __res;\n+  }\n #endif\n-\n+  \n #if _GLIBCPP_HAVE_POWF\n-    inline float _CPP_pow_capture(float __x, float __y)\n-      { return powf(__x, __y); }\n+  inline float \n+  _CPP_pow_capture(float __x, float __y) { return powf(__x, __y); }\n #else\n-    inline float _CPP_pow_capture(float __x, float __y)\n-      { return pow(static_cast<double>(__x), static_cast<double>(__y)); }\n+  inline float \n+  _CPP_pow_capture(float __x, float __y)\n+  { return pow(static_cast<double>(__x), static_cast<double>(__y)); }\n #endif\n \n-    float pow(float, int);\n+  float pow(float, int);\n \n #if _GLIBCPP_HAVE___BUILTIN_SINF\n-    inline float _CPP_sin_capture(float __x)\n-      { return __builtin_sinf(__x); }\n+  inline float \n+  _CPP_sin_capture(float __x) { return __builtin_sinf(__x); }\n #elif _GLIBCPP_HAVE_SINF\n-    inline float _CPP_sin_capture(float __x)\n-      { return sinf(__x); }\n+  inline float \n+  _CPP_sin_capture(float __x) { return sinf(__x); }\n #else\n-    inline float _CPP_sin_capture(float __x)\n-      { return sin(static_cast<double>(__x)); }\n+  inline float \n+  _CPP_sin_capture(float __x) { return sin(static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE_SINHF\n-    inline float _CPP_sinh_capture(float __x)\n-      { return sinhf(__x); }\n+  inline float \n+  _CPP_sinh_capture(float __x) { return sinhf(__x); }\n #else\n-    inline float _CPP_sinh_capture(float __x)\n-      { return sinh(static_cast<double>(__x)); }\n+  inline float \n+  _CPP_sinh_capture(float __x) { return sinh(static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE___BUILTIN_SQRTF\n-    inline float _CPP_sqrt_capture(float __x)\n-      { return __builtin_sqrtf(__x); }\n+  inline float \n+  _CPP_sqrt_capture(float __x) { return __builtin_sqrtf(__x); }\n #elif _GLIBCPP_HAVE_SQRTF\n-    inline float _CPP_sqrt_capture(float __x)\n-      { return sqrtf(__x); }\n+  inline float \n+  _CPP_sqrt_capture(float __x) { return sqrtf(__x); }\n #else\n-    inline float _CPP_sqrt_capture(float __x)\n-      { return sqrt(static_cast<double>(__x)); }\n+  inline float \n+  _CPP_sqrt_capture(float __x) { return sqrt(static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE_TANF\n-    inline float _CPP_tan_capture(float __x)\n-      { return tanf(__x); }\n+  inline float \n+  _CPP_tan_capture(float __x) { return tanf(__x); }\n #else\n-    inline float _CPP_tan_capture(float __x)\n-      { return tan(static_cast<double>(__x)); }\n+  inline float \n+  _CPP_tan_capture(float __x) { return tan(static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE_TANHF\n-    inline float _CPP_tanh_capture(float __x)\n-      { return tanhf(__x); }\n+  inline float \n+  _CPP_tanh_capture(float __x) { return tanhf(__x); }\n #else\n-    inline float _CPP_tanh_capture(float __x)\n-      { return tanh(static_cast<double>(__x)); }\n+  inline float \n+  _CPP_tanh_capture(float __x) { return tanh(static_cast<double>(__x)); }\n #endif\n \n-    //\n-    // double\n-    //\n \n-    inline double _CPP_acos_capture(double __x)\n-      { return acos(__x); }\n+  inline double \n+  _CPP_acos_capture(double __x) { return acos(__x); }\n \n-    inline double _CPP_asin_capture(double __x)\n-      { return asin(__x); }\n+  inline double \n+  _CPP_asin_capture(double __x) { return asin(__x); }\n \n-    inline double _CPP_atan_capture(double __x)\n-      { return atan(__x); }\n+  inline double \n+  _CPP_atan_capture(double __x) { return atan(__x); }\n \n-    inline double _CPP_atan2_capture(double __y, double __x)\n-      { return atan2(__y, __x); }\n+  inline double \n+  _CPP_atan2_capture(double __y, double __x) { return atan2(__y, __x); }\n \n-    inline double _CPP_ceil_capture(double __x)\n-      { return ceil(__x); }\n+  inline double \n+  _CPP_ceil_capture(double __x) { return ceil(__x); }\n \n #if _GLIBCPP_HAVE___BUILTIN_COS\n-    inline double _CPP_cos_capture(double __x)\n-      { return __builtin_cos(__x); }\n+  inline double \n+  _CPP_cos_capture(double __x) { return __builtin_cos(__x); }\n #else\n-    inline double _CPP_cos_capture(double __x)\n-      { return cos(__x); }\n+  inline double \n+  _CPP_cos_capture(double __x) { return cos(__x); }\n #endif\n \n-    inline double _CPP_cosh_capture(double __x)\n-      { return cosh(__x); }\n+  inline double \n+  _CPP_cosh_capture(double __x) { return cosh(__x); }\n \n-    inline double _CPP_exp_capture(double __x)\n-      { return exp(__x); }\n+  inline double \n+  _CPP_exp_capture(double __x) { return exp(__x); }\n \n #if _GLIBCPP_HAVE___BUILTIN_FABS\n-    inline double _CPP_fabs_capture(double __x)\n-      { return __builtin_fabs(__x); }\n+  inline double \n+  _CPP_fabs_capture(double __x) { return __builtin_fabs(__x); }\n #else\n-    inline double _CPP_fabs_capture(double __x)\n-      { return fabs(__x); }\n+  inline double \n+  _CPP_fabs_capture(double __x) { return fabs(__x); }\n #endif\n \n-    inline double _CPP_floor_capture(double __x)\n-      { return floor(__x); }\n+  inline double \n+  _CPP_floor_capture(double __x) { return floor(__x); }\n \n-    inline double _CPP_fmod_capture(double __x, double __y)\n-      { return fmod(__x, __y); }\n+  inline double \n+  _CPP_fmod_capture(double __x, double __y) { return fmod(__x, __y); }\n \n-    inline double _CPP_frexp_capture(double __x, int* __exp)\n-      { return frexp(__x, __exp); }\n+  inline double \n+  _CPP_frexp_capture(double __x, int* __exp) { return frexp(__x, __exp); }\n \n-    inline double _CPP_ldexp_capture(double __x, int __exp)\n-      { return ldexp(__x, __exp); }\n+  inline double \n+  _CPP_ldexp_capture(double __x, int __exp) { return ldexp(__x, __exp); }\n \n-    inline double _CPP_log_capture(double __x)\n-      { return log(__x); }\n+  inline double \n+  _CPP_log_capture(double __x) { return log(__x); }\n \n-    inline double _CPP_log10_capture(double __x)\n-      { return log10(__x); }\n+  inline double \n+  _CPP_log10_capture(double __x) { return log10(__x); }\n \n-    inline double _CPP_modf_capture(double __x, double* __iptr)\n-      { return modf(__x, __iptr); }\n+  inline double \n+  _CPP_modf_capture(double __x, double* __iptr) { return modf(__x, __iptr); }\n \n-    inline double _CPP_pow_capture(double __x, double __y)\n-      { return pow(__x, __y); }\n+  inline double \n+  _CPP_pow_capture(double __x, double __y) { return pow(__x, __y); }\n \n #if _GLIBCPP_HAVE___BUILTIN_SIN\n-    inline double _CPP_sin_capture(double __x)\n-      { return __builtin_sin(__x); }\n+  inline double \n+  _CPP_sin_capture(double __x) { return __builtin_sin(__x); }\n #else\n-    inline double _CPP_sin_capture(double __x)\n-      { return sin(__x); }\n+  inline double \n+  _CPP_sin_capture(double __x) { return sin(__x); }\n #endif\n \n-    inline double _CPP_sinh_capture(double __x)\n-      { return sinh(__x); }\n+  inline double \n+  _CPP_sinh_capture(double __x) { return sinh(__x); }\n \n #if _GLIBCPP_HAVE___BUILTIN_SQRT\n-    inline double _CPP_sqrt_capture(double __x)\n-      { return __builtin_fsqrt(__x); }\n+  inline double \n+  _CPP_sqrt_capture(double __x) { return __builtin_fsqrt(__x); }\n #else\n-    inline double _CPP_sqrt_capture(double __x)\n-      { return sqrt(__x); }\n+  inline double \n+  _CPP_sqrt_capture(double __x) { return sqrt(__x); }\n #endif\n \n-    inline double _CPP_tan_capture(double __x)\n-      { return tan(__x); }\n+  inline double \n+  _CPP_tan_capture(double __x) { return tan(__x); }\n \n-    inline double _CPP_tanh_capture(double __x)\n-      { return tanh(__x); }\n+  inline double \n+  _CPP_tanh_capture(double __x) { return tanh(__x); }\n \n-    //\n-    // long double\n-    //\n \n #if _GLIBCPP_HAVE_ACOSL\n-    inline long double _CPP_acos_capture(long double __x)\n-      { return acosl(__x); }\n+  inline long double \n+  _CPP_acos_capture(long double __x) { return acosl(__x); }\n #else\n-    inline long double _CPP_acos_capture(long double __x)\n-      { return acos(static_cast<double>(__x)); }\n+  inline long double \n+  _CPP_acos_capture(long double __x) { return acos(static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE_ASINL\n-    inline long double _CPP_asin_capture(long double __x)\n-      { return asinl(__x); }\n+  inline long double \n+  _CPP_asin_capture(long double __x) { return asinl(__x); }\n #else\n-    inline long double _CPP_asin_capture(long double __x)\n-      { return asin(static_cast<double>(__x)); }\n+  inline long double \n+  _CPP_asin_capture(long double __x) { return asin(static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE_ATANL\n-    inline long double _CPP_atan_capture(long double __x)\n-      { return atanl(__x); }\n+  inline long double \n+  _CPP_atan_capture(long double __x) { return atanl(__x); }\n #else\n-    inline long double _CPP_atan_capture(long double __x)\n-      { return atan(static_cast<double>(__x)); }\n+  inline long double \n+  _CPP_atan_capture(long double __x) { return atan(static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE_ATAN2L\n-    inline long double _CPP_atan2_capture(long double __y, long double __x)\n-      { return atan2l(__y, __x); }\n+  inline long double \n+  _CPP_atan2_capture(long double __y, long double __x)\n+  { return atan2l(__y, __x); }\n #else\n-    inline long double _CPP_atan2_capture(long double __y, long double __x)\n-      { return atan2(static_cast<double>(__y), static_cast<double>(__x)); }\n+  inline long double \n+  _CPP_atan2_capture(long double __y, long double __x) \n+  { return atan2(static_cast<double>(__y), static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE_CEILL\n-    inline long double _CPP_ceil_capture(long double __x)\n-      { return ceill(__x); }\n+  inline long double \n+  _CPP_ceil_capture(long double __x) { return ceill(__x); }\n #else\n-    inline long double _CPP_ceil_capture(long double __x)\n-      { return ceil(static_cast<double>(__x)); }\n+  inline long double \n+  _CPP_ceil_capture(long double __x) { return ceil(static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE___BUILTIN_COSL\n-    inline long double _CPP_cos_capture(long double __x)\n-      { return __builtin_cosl(__x); }\n+  inline long double \n+  _CPP_cos_capture(long double __x) { return __builtin_cosl(__x); }\n #elif _GLIBCPP_HAVE_COSL\n-    inline long double _CPP_cos_capture(long double __x)\n-      { return cosl(__x); }\n+  inline long double \n+  _CPP_cos_capture(long double __x) { return cosl(__x); }\n #else\n-    inline long double _CPP_cos_capture(long double __x)\n-      { return cos(static_cast<double>(__x)); }\n+  inline long double \n+  _CPP_cos_capture(long double __x) { return cos(static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE_COSHL\n-    inline long double _CPP_cosh_capture(long double __x)\n-      { return coshl(__x); }\n+  inline long double \n+  _CPP_cosh_capture(long double __x) { return coshl(__x); }\n #else\n-    inline long double _CPP_cosh_capture(long double __x)\n-      { return cosh(static_cast<double>(__x)); }\n+  inline long double \n+  _CPP_cosh_capture(long double __x) { return cosh(static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE_EXPL\n-    inline long double _CPP_exp_capture(long double __x)\n-      { return expl(__x); }\n+  inline long double \n+  _CPP_exp_capture(long double __x) { return expl(__x); }\n #else\n-    inline long double _CPP_exp_capture(long double __x)\n-      { return exp(static_cast<double>(__x)); }\n+  inline long double \n+  _CPP_exp_capture(long double __x) { return exp(static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE___BUILTIN_FABSL\n-    inline long double _CPP_fabs_capture(long double __x)\n-      { return __builtin_fabsl(__x); }\n+  inline long double \n+  _CPP_fabs_capture(long double __x) { return __builtin_fabsl(__x); }\n #elif _GLIBCPP_HAVE_FABSL\n-    inline long double _CPP_fabs_capture(long double __x)\n-      { return fabsl(__x); }\n+  inline long double \n+  _CPP_fabs_capture(long double __x) { return fabsl(__x); }\n #else\n-    inline long double _CPP_fabs_capture(long double __x)\n-      { return fabs(static_cast<double>(__x)); }\n+  inline long double \n+  _CPP_fabs_capture(long double __x) { return fabs(static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE_FLOORL\n-    inline long double _CPP_floor_capture(long double __x)\n-      { return floorl(__x); }\n+  inline long double \n+  _CPP_floor_capture(long double __x) { return floorl(__x); }\n #else\n-    inline long double _CPP_floor_capture(long double __x)\n-      { return floor(static_cast<double>(__x)); }\n+  inline long double \n+  _CPP_floor_capture(long double __x) \n+  { return floor(static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE_FMODL\n-    inline long double _CPP_fmod_capture(long double __x, long double __y)\n-      { return fmodl(__x, __y); }\n+  inline long double \n+  _CPP_fmod_capture(long double __x, long double __y) \n+  { return fmodl(__x, __y); }\n #else\n-    inline long double _CPP_fmod_capture(long double __x, long double __y)\n-      { return fmod(static_cast<double>(__x), static_cast<double>(__y)); }\n+  inline long double \n+  _CPP_fmod_capture(long double __x, long double __y)\n+  { return fmod(static_cast<double>(__x), static_cast<double>(__y)); }\n #endif\n \n #if _GLIBCPP_HAVE_FREXPL\n-    inline long double _CPP_frexp_capture(long double __x, int* __exp)\n-      { return frexpl(__x, __exp); }\n+  inline long double \n+  _CPP_frexp_capture(long double __x, int* __exp) \n+  { return frexpl(__x, __exp); }\n #else\n-    inline long double _CPP_frexp_capture(long double __x, int* __exp)\n-      { return frexp(static_cast<double>(__x), __exp); }\n+  inline long double \n+  _CPP_frexp_capture(long double __x, int* __exp)\n+  { return frexp(static_cast<double>(__x), __exp); }\n #endif\n \n #if _GLIBCPP_HAVE_LDEXPL\n-    inline long double _CPP_ldexp_capture(long double __x, int __exp)\n-      { return ldexpl(__x, __exp); }\n+  inline long double \n+  _CPP_ldexp_capture(long double __x, int __exp) { return ldexpl(__x, __exp); }\n #else\n-    inline long double _CPP_ldexp_capture(long double __x, int __exp)\n-      { return ldexp(static_cast<double>(__x), __exp); }\n+  inline long double \n+  _CPP_ldexp_capture(long double __x, int __exp)\n+  { return ldexp(static_cast<double>(__x), __exp); }\n #endif\n \n #if _GLIBCPP_HAVE_LOGL\n-    inline long double _CPP_log_capture(long double __x)\n-      { return logl(__x); }\n+  inline long double \n+  _CPP_log_capture(long double __x) { return logl(__x); }\n #else\n-    inline long double _CPP_log_capture(long double __x)\n-      { return log(static_cast<double>(__x)); }\n+  inline long double \n+  _CPP_log_capture(long double __x) { return log(static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE_LOG10L\n-    inline long double _CPP_log10_capture(long double __x)\n-      { return log10l(__x); }\n+  inline long double \n+  _CPP_log10_capture(long double __x) { return log10l(__x); }\n #else\n-    inline long double _CPP_log10_capture(long double __x)\n-      { return log10(static_cast<double>(__x)); }\n+  inline long double \n+  _CPP_log10_capture(long double __x) \n+  { return log10(static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE_MODFL\n-    inline long double _CPP_modf_capture(long double __x, long double* __iptr)\n-      { return modfl(__x, __iptr); }\n-#else\n-    inline long double _CPP_modf_capture(long double __x, long double* __iptr)\n-    {\n-       double __tmp;\n-       double __res = _C_legacy::modf(static_cast<double>(__x), &__tmp);\n-       *__iptr = static_cast<long double> (__tmp);\n-       return __res;\n-    }\n+  inline long double \n+  _CPP_modf_capture(long double __x, long double* __iptr)\n+  { return modfl(__x, __iptr); }\n+#else\n+  inline long double \n+  _CPP_modf_capture(long double __x, long double* __iptr)\n+  {\n+    double __tmp;\n+    double __res = _C_legacy::modf(static_cast<double>(__x), &__tmp);\n+    *__iptr = static_cast<long double> (__tmp);\n+    return __res;\n+  }\n #endif\n \n #if _GLIBCPP_HAVE_POWL\n-    inline long double _CPP_pow_capture(long double __x, long double __y)\n-      { return powl(__x, __y); }\n+  inline long double \n+  _CPP_pow_capture(long double __x, long double __y) { return powl(__x, __y); }\n #else\n-    inline long double _CPP_pow_capture(long double __x, long double __y)\n-      { return pow(static_cast<double>(__x), static_cast<double>(__y)); }\n+  inline long double \n+  _CPP_pow_capture(long double __x, long double __y)\n+  { return pow(static_cast<double>(__x), static_cast<double>(__y)); }\n #endif\n \n #if _GLIBCPP_HAVE___BUILTIN_SINL\n-    inline long double _CPP_sin_capture(long double __x)\n-      { return __builtin_sinl(__x); }\n+  inline long double \n+  _CPP_sin_capture(long double __x) { return __builtin_sinl(__x); }\n #elif _GLIBCPP_HAVE_SINL\n-    inline long double _CPP_sin_capture(long double __x)\n-      { return sinl(__x); }\n+  inline long double \n+  _CPP_sin_capture(long double __x) { return sinl(__x); }\n #else\n-    inline long double _CPP_sin_capture(long double __x)\n-      { return sin(static_cast<double>(__x)); }\n+  inline long double \n+  _CPP_sin_capture(long double __x) { return sin(static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE_SINHL\n-    inline long double _CPP_sinh_capture(long double __x)\n-      { return sinhl(__x); }\n+  inline long double \n+  _CPP_sinh_capture(long double __x) { return sinhl(__x); }\n #else\n-    inline long double _CPP_sinh_capture(long double __x)\n-      { return sinh(static_cast<double>(__x)); }\n+  inline long double \n+  _CPP_sinh_capture(long double __x) { return sinh(static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE___BUILTIN_SQRTL\n-    inline long double _CPP_sqrt_capture(long double __x)\n-      { return __builtin_sqrtl(__x); }\n+  inline long double \n+  _CPP_sqrt_capture(long double __x) { return __builtin_sqrtl(__x); }\n #elif _GLIBCPP_HAVE_SQRTL\n-    inline long double _CPP_sqrt_capture(long double __x)\n-      { return sqrtl(__x); }\n+  inline long double \n+  _CPP_sqrt_capture(long double __x) { return sqrtl(__x); }\n #else\n-    inline long double _CPP_sqrt_capture(long double __x)\n-      { return sqrt(static_cast<double>(__x)); }\n+  inline long double \n+  _CPP_sqrt_capture(long double __x) { return sqrt(static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE_TANL\n-    inline long double _CPP_tan_capture(long double __x)\n-      { return tanl(__x); }\n+  inline long double \n+  _CPP_tan_capture(long double __x) { return tanl(__x); }\n #else\n-    inline long double _CPP_tan_capture(long double __x)\n-      { return tan(static_cast<double>(__x)); }\n+  inline long double \n+  _CPP_tan_capture(long double __x) { return tan(static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE_TANHL\n-    inline long double _CPP_tanh_capture(long double __x)\n-      { return tanhl(__x); }\n+  inline long double \n+  _CPP_tanh_capture(long double __x) { return tanhl(__x); }\n #else\n-    inline long double _CPP_tanh_capture(long double __x)\n-      { return tanh(static_cast<double>(__x)); }\n+  inline long double \n+  _CPP_tanh_capture(long double __x) { return tanh(static_cast<double>(__x)); }\n #endif\n \n+  namespace _C_shadow { }\n \n-    namespace _C_shadow { }\n-  } // close namespace ::_C_legacy::\n+} // namespace _C_legacy\n \n-# undef HUGE_VAL\n-# define HUGE_VAL ::_C_legacy::_CPP_HUGE_VAL_capture()\n # undef abs\n # undef acos\n # undef asin\n@@ -556,244 +564,273 @@\n # undef tan\n # undef tanh\n \n-  namespace _C_legacy {\n-    namespace _C_shadow {\n-    }\n-  }\n-  namespace std {\n+namespace std {\n+  inline float \n+  abs(float __x) { return _C_legacy::_CPP_fabs_capture(__x); }\n \n-    //\n-    // float\n-    //\n+  inline float \n+  acos(float __x) { return _C_legacy::_CPP_acos_capture(__x); }\n \n-    inline float abs(float __x)\n-      { return ::_C_legacy::_CPP_fabs_capture(__x); }\n+  inline float \n+  asin(float __x) { return _C_legacy::_CPP_asin_capture(__x); }\n \n-    inline float acos(float __x)\n-      { return ::_C_legacy::_CPP_acos_capture(__x); }\n+  inline float \n+  atan(float __x) { return _C_legacy::_CPP_atan_capture(__x); }\n \n-    inline float asin(float __x)\n-      { return ::_C_legacy::_CPP_asin_capture(__x); }\n+  inline float \n+  atan2(float __y, float __x) \n+  { return _C_legacy::_CPP_atan2_capture(__y, __x); }\n \n-    inline float atan(float __x)\n-      { return ::_C_legacy::_CPP_atan_capture(__x); }\n+  inline float \n+  ceil(float __x) { return _C_legacy::_CPP_ceil_capture(__x); }\n \n-    inline float atan2(float __y, float __x)\n-      { return ::_C_legacy::_CPP_atan2_capture(__y, __x); }\n+  inline float \n+  cos(float __x) { return _C_legacy::_CPP_cos_capture(__x); }\n \n-    inline float ceil(float __x)\n-      { return ::_C_legacy::_CPP_ceil_capture(__x); }\n+  inline float \n+  cosh(float __x) { return _C_legacy::_CPP_cosh_capture(__x); }\n \n-    inline float cos(float __x)\n-      { return ::_C_legacy::_CPP_cos_capture(__x); }\n+  inline float \n+  exp(float __x) { return _C_legacy::_CPP_exp_capture(__x); }\n \n-    inline float cosh(float __x)\n-      { return ::_C_legacy::_CPP_cosh_capture(__x); }\n+  inline float \n+  fabs(float __x) { return _C_legacy::_CPP_fabs_capture(__x); }\n \n-    inline float exp(float __x)\n-      { return ::_C_legacy::_CPP_exp_capture(__x); }\n+  inline float \n+  floor(float __x) { return _C_legacy::_CPP_floor_capture(__x); }\n \n-    inline float fabs(float __x)\n-      { return ::_C_legacy::_CPP_fabs_capture(__x); }\n+  inline float \n+  fmod(float __x, float __y) \n+  { return _C_legacy::_CPP_fmod_capture(__x, __y); }\n \n-    inline float floor(float __x)\n-      { return ::_C_legacy::_CPP_floor_capture(__x); }\n+  inline float \n+  frexp(float __x, int* __exp) \n+  { return _C_legacy::_CPP_frexp_capture(__x, __exp); }\n \n-    inline float fmod(float __x, float __y)\n-      { return ::_C_legacy::_CPP_fmod_capture(__x, __y); }\n+  inline float \n+  ldexp(float __x, int __exp)\n+  { return _C_legacy::_CPP_ldexp_capture(__x, __exp); }\n \n-    inline float frexp(float __x, int* __exp)\n-      { return ::_C_legacy::_CPP_frexp_capture(__x, __exp); }\n+  inline float \n+  log(float __x) { return _C_legacy::_CPP_log_capture(__x); }\n \n-    inline float ldexp(float __x, int __exp)\n-      { return ::_C_legacy::_CPP_ldexp_capture(__x, __exp); }\n+  inline float \n+  log10(float __x) { return _C_legacy::_CPP_log10_capture(__x); }\n \n-    inline float log(float __x)\n-      { return ::_C_legacy::_CPP_log_capture(__x); }\n+  inline float \n+  modf(float __x, float* __iptr) \n+  { return _C_legacy::_CPP_modf_capture(__x, __iptr); }\n \n-    inline float log10(float __x)\n-      { return ::_C_legacy::_CPP_log10_capture(__x); }\n+  inline float \n+  pow(float __x, float __y) { return _C_legacy::_CPP_pow_capture(__x, __y); }\n \n-    inline float modf(float __x, float* __iptr)\n-      { return ::_C_legacy::_CPP_modf_capture(__x, __iptr); }\n+  float \n+  pow(float, int);\n \n-    inline float pow(float __x, float __y)\n-      { return ::_C_legacy::_CPP_pow_capture(__x, __y); }\n+  inline float \n+  sin(float __x) { return _C_legacy::_CPP_sin_capture(__x); }\n \n-    float pow(float, int);\n+  inline float \n+  sinh(float __x) { return _C_legacy::_CPP_sinh_capture(__x); }\n \n-    inline float sin(float __x)\n-      { return ::_C_legacy::_CPP_sin_capture(__x); }\n+  inline float \n+  sqrt(float __x) { return _C_legacy::_CPP_sqrt_capture(__x); }\n \n-    inline float sinh(float __x)\n-      { return ::_C_legacy::_CPP_sinh_capture(__x); }\n+  inline float \n+  tan(float __x) { return _C_legacy::_CPP_tan_capture(__x); }\n \n-    inline float sqrt(float __x)\n-      { return ::_C_legacy::_CPP_sqrt_capture(__x); }\n+  inline float \n+  tanh(float __x) { return _C_legacy::_CPP_tanh_capture(__x); }\n \n-    inline float tan(float __x)\n-      { return ::_C_legacy::_CPP_tan_capture(__x); }\n+  inline double \n+  abs(double __x) { return _C_legacy::_CPP_fabs_capture(__x); }\n \n-    inline float tanh(float __x)\n-      { return ::_C_legacy::_CPP_tanh_capture(__x); }\n+  inline double \n+  acos(double __x) { return _C_legacy::_CPP_acos_capture(__x); }\n \n-    //\n-    // double\n-    //\n+  inline double \n+  asin(double __x) { return _C_legacy::_CPP_asin_capture(__x); }\n \n-    inline double abs(double __x)\n-      { return ::_C_legacy::_CPP_fabs_capture(__x); }\n+  inline double \n+  atan(double __x) { return _C_legacy::_CPP_atan_capture(__x); }\n \n-    inline double acos(double __x)\n-      { return ::_C_legacy::_CPP_acos_capture(__x); }\n+  inline double \n+  atan2(double __y, double __x) \n+  { return _C_legacy::_CPP_atan2_capture(__y, __x); }\n \n-    inline double asin(double __x)\n-      { return ::_C_legacy::_CPP_asin_capture(__x); }\n+  inline double \n+  ceil(double __x) { return _C_legacy::_CPP_ceil_capture(__x); }\n \n-    inline double atan(double __x)\n-      { return ::_C_legacy::_CPP_atan_capture(__x); }\n+  inline double \n+  cos(double __x) { return _C_legacy::_CPP_cos_capture(__x); }\n \n-    inline double atan2(double __y, double __x)\n-      { return ::_C_legacy::_CPP_atan2_capture(__y, __x); }\n+  inline double \n+  cosh(double __x) { return _C_legacy::_CPP_cosh_capture(__x); }\n \n-    inline double ceil(double __x)\n-      { return ::_C_legacy::_CPP_ceil_capture(__x); }\n+  inline double \n+  exp(double __x) { return _C_legacy::_CPP_exp_capture(__x); }\n \n-    inline double cos(double __x)\n-      { return ::_C_legacy::_CPP_cos_capture(__x); }\n+  inline double \n+  fabs(double __x) { return _C_legacy::_CPP_fabs_capture(__x); }\n \n-    inline double cosh(double __x)\n-      { return ::_C_legacy::_CPP_cosh_capture(__x); }\n+  inline double \n+  floor(double __x) { return _C_legacy::_CPP_floor_capture(__x); }\n \n-    inline double exp(double __x)\n-      { return ::_C_legacy::_CPP_exp_capture(__x); }\n+  inline double \n+  fmod(double __x, double __y) \n+  { return _C_legacy::_CPP_fmod_capture(__x, __y); }\n \n-    inline double fabs(double __x)\n-      { return ::_C_legacy::_CPP_fabs_capture(__x); }\n+  inline double \n+  frexp(double __x, int* __exp) \n+  { return _C_legacy::_CPP_frexp_capture(__x, __exp); }\n \n-    inline double floor(double __x)\n-      { return ::_C_legacy::_CPP_floor_capture(__x); }\n+  inline double \n+  ldexp(double __x, int __exp)\n+  { return _C_legacy::_CPP_ldexp_capture(__x, __exp); }\n \n-    inline double fmod(double __x, double __y)\n-      { return ::_C_legacy::_CPP_fmod_capture(__x, __y); }\n+  inline double \n+  log(double __x) { return _C_legacy::_CPP_log_capture(__x); }\n \n-    inline double frexp(double __x, int* __exp)\n-      { return ::_C_legacy::_CPP_frexp_capture(__x, __exp); }\n+  inline double \n+  log10(double __x) { return _C_legacy::_CPP_log10_capture(__x); }\n \n-    inline double ldexp(double __x, int __exp)\n-      { return ::_C_legacy::_CPP_ldexp_capture(__x, __exp); }\n+  inline double \n+  modf(double __x, double* __iptr) \n+  { return _C_legacy::_CPP_modf_capture(__x, __iptr); }\n \n-    inline double log(double __x)\n-      { return ::_C_legacy::_CPP_log_capture(__x); }\n+  inline double \n+  pow(double __x, double __y) \n+  { return _C_legacy::_CPP_pow_capture(__x, __y); }\n \n-    inline double log10(double __x)\n-      { return ::_C_legacy::_CPP_log10_capture(__x); }\n+  double \n+  pow(double, int);\n \n-    inline double modf(double __x, double* __iptr)\n-      { return ::_C_legacy::_CPP_modf_capture(__x, __iptr); }\n+  inline double \n+  sin(double __x) { return _C_legacy::_CPP_sin_capture(__x); }\n \n-    inline double pow(double __x, double __y)\n-      { return ::_C_legacy::_CPP_pow_capture(__x, __y); }\n+  inline double \n+  sinh(double __x) { return _C_legacy::_CPP_sinh_capture(__x); }\n \n-    double pow (double, int);\n+  inline double \n+  sqrt(double __x) { return _C_legacy::_CPP_sqrt_capture(__x); }\n \n-    inline double sin(double __x)\n-      { return ::_C_legacy::_CPP_sin_capture(__x); }\n+  inline double \n+  tan(double __x) { return _C_legacy::_CPP_tan_capture(__x); }\n+\n+  inline double \n+  tanh(double __x) { return _C_legacy::_CPP_tanh_capture(__x); }\n+\n+  inline long double \n+  abs(long double __x) { return _C_legacy::_CPP_fabs_capture(__x); }\n+\n+  inline long double \n+  acos(long double __x) { return _C_legacy::_CPP_acos_capture(__x); }\n+\n+  inline long double \n+  asin(long double __x) { return _C_legacy::_CPP_asin_capture(__x); }\n+\n+  inline long double \n+  atan(long double __x) { return _C_legacy::_CPP_atan_capture(__x); }\n+\n+  inline long double \n+  atan2(long double __y, long double __x) \n+  { return _C_legacy::_CPP_atan2_capture(__y, __x); }\n+\n+  inline long double \n+  ceil(long double __x) { return _C_legacy::_CPP_ceil_capture(__x); }\n+\n+  inline long double \n+  cos(long double __x) { return _C_legacy::_CPP_cos_capture(__x); }\n+\n+  inline long double \n+  cosh(long double __x) { return _C_legacy::_CPP_cosh_capture(__x); }\n+\n+  inline long double \n+  exp(long double __x) { return _C_legacy::_CPP_exp_capture(__x); }\n+\n+  inline long double \n+  fabs(long double __x) { return _C_legacy::_CPP_fabs_capture(__x); }\n+\n+  inline long double \n+  floor(long double __x) { return _C_legacy::_CPP_floor_capture(__x); }\n+\n+  inline long double \n+  fmod(long double __x, long double __y) \n+  { return _C_legacy::_CPP_fmod_capture(__x, __y); }\n+\n+  inline long double \n+  frexp(long double __x, int* __exp)\n+  { return _C_legacy::_CPP_frexp_capture(__x, __exp); }\n+\n+  inline long double \n+  ldexp(long double __x, int __exp)\n+  { return _C_legacy::_CPP_ldexp_capture(__x, __exp); }\n+\n+  inline long double \n+  log(long double __x) { return _C_legacy::_CPP_log_capture(__x); }\n+\n+  inline long double \n+  log10(long double __x) { return _C_legacy::_CPP_log10_capture(__x); }\n+\n+  inline long double \n+  modf(long double __x, long double* __iptr) \n+  { return _C_legacy::_CPP_modf_capture(__x, __iptr); }\n+\n+  inline long double \n+  pow(long double __x, long double __y)\n+  { return _C_legacy::_CPP_pow_capture(__x, __y); }\n+\n+  long double \n+  pow(long double, int);\n+\n+  inline long double \n+  sin(long double __x) { return _C_legacy::_CPP_sin_capture(__x); }\n+\n+  inline long double \n+  sinh(long double __x) { return _C_legacy::_CPP_sinh_capture(__x); }\n+\n+  inline long double \n+  sqrt(long double __x) { return _C_legacy::_CPP_sqrt_capture(__x); }\n+\n+  inline long double \n+  tan(long double __x) { return _C_legacy::_CPP_tan_capture(__x); }\n+\n+  inline long double \n+  tanh(long double __x) { return _C_legacy::_CPP_tanh_capture(__x); }\n+} // namespace std\n+\n+# undef _IN_C_LEGACY_\n+\n+#endif\n \n-    inline double sinh(double __x)\n-      { return ::_C_legacy::_CPP_sinh_capture(__x); }\n \n-    inline double sqrt(double __x)\n-      { return ::_C_legacy::_CPP_sqrt_capture(__x); }\n \n-    inline double tan(double __x)\n-      { return ::_C_legacy::_CPP_tan_capture(__x); }\n \n-    inline double tanh(double __x)\n-      { return ::_C_legacy::_CPP_tanh_capture(__x); }\n \n-    //\n-    // long double\n-    //\n-    inline long double abs(long double __x)\n-      { return ::_C_legacy::_CPP_fabs_capture(__x); }\n \n-    inline long double acos(long double __x)\n-      { return ::_C_legacy::_CPP_acos_capture(__x); }\n \n-    inline long double asin(long double __x)\n-      { return ::_C_legacy::_CPP_asin_capture(__x); }\n \n-    inline long double atan(long double __x)\n-      { return ::_C_legacy::_CPP_atan_capture(__x); }\n \n-    inline long double atan2(long double __y, long double __x)\n-      { return ::_C_legacy::_CPP_atan2_capture(__y, __x); }\n \n-    inline long double ceil(long double __x)\n-      { return ::_C_legacy::_CPP_ceil_capture(__x); }\n \n-    inline long double cos(long double __x)\n-      { return ::_C_legacy::_CPP_cos_capture(__x); }\n \n-    inline long double cosh(long double __x)\n-      { return ::_C_legacy::_CPP_cosh_capture(__x); }\n \n-    inline long double exp(long double __x)\n-      { return ::_C_legacy::_CPP_exp_capture(__x); }\n \n-    inline long double fabs(long double __x)\n-      { return ::_C_legacy::_CPP_fabs_capture(__x); }\n \n-    inline long double floor(long double __x)\n-      { return ::_C_legacy::_CPP_floor_capture(__x); }\n \n-    inline long double fmod(long double __x, long double __y)\n-      { return ::_C_legacy::_CPP_fmod_capture(__x, __y); }\n \n-    inline long double frexp(long double __x, int* __exp)\n-      { return ::_C_legacy::_CPP_frexp_capture(__x, __exp); }\n \n-    inline long double ldexp(long double __x, int __exp)\n-      { return ::_C_legacy::_CPP_ldexp_capture(__x, __exp); }\n \n-    inline long double log(long double __x)\n-      { return ::_C_legacy::_CPP_log_capture(__x); }\n \n-    inline long double log10(long double __x)\n-      { return ::_C_legacy::_CPP_log10_capture(__x); }\n \n-    inline long double modf(long double __x, long double* __iptr)\n-      { return ::_C_legacy::_CPP_modf_capture(__x, __iptr); }\n \n-    inline long double pow(long double __x, long double __y)\n-      { return ::_C_legacy::_CPP_pow_capture(__x, __y); }\n \n-    long double pow (long double, int);\n \n-    inline long double sin(long double __x)\n-      { return ::_C_legacy::_CPP_sin_capture(__x); }\n \n-    inline long double sinh(long double __x)\n-      { return ::_C_legacy::_CPP_sinh_capture(__x); }\n \n-    inline long double sqrt(long double __x)\n-      { return ::_C_legacy::_CPP_sqrt_capture(__x); }\n \n-    inline long double tan(long double __x)\n-      { return ::_C_legacy::_CPP_tan_capture(__x); }\n \n-    inline long double tanh(long double __x)\n-      { return ::_C_legacy::_CPP_tanh_capture(__x); }\n \n \n-  } // close namespace std::\n-  \n-  namespace _C_legacy {\n-    namespace _C_shadow {\n-    }\n-  }\n \n-# undef _IN_C_LEGACY_\n \n-#endif"}, {"sha": "21c03d519edbcc9277bb0b6255ad401bc33b856b", "filename": "libstdc++-v3/shadow/bits/std_csetjmp.h", "status": "modified", "additions": 14, "deletions": 26, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_csetjmp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_csetjmp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_csetjmp.h?ref=0517cb9903a890ecd768fae57ca0356bf901da35", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- header wrapper.\n \n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -34,42 +34,30 @@\n #ifndef _CPP_CSETJMP\n #define _CPP_CSETJMP 1\n \n-  namespace _C_legacy {\n-    extern \"C\" {\n+namespace _C_legacy {\n+  extern \"C\" {\n #     define _IN_C_LEGACY_\n #     pragma GCC system_header\n #     include_next <setjmp.h>\n-    }\n-    typedef jmp_buf   _CPP_jmp_buf_capture;\n-    inline int _CPP_setjmp_capture(jmp_buf __jb) { return setjmp(__jb); }\n-\n-    namespace _C_shadow { }\n-  } // close namespace ::_C_legacy::\n+  }\n+  inline int \n+  _CPP_setjmp_capture(jmp_buf __jb) { return setjmp(__jb); }\n+} // namespace _C_legacy\n \n #  undef jmp_buf\n #  undef setjmp\n #  define setjmp(__jb) ::_C_legacy::_CPP_setjmp_capture(__jb)\n #  undef longjmp\n \n-  namespace _C_legacy {\n-    namespace _C_shadow {\n-      typedef ::_C_legacy::_CPP_jmp_buf_capture  jmp_buf;\n-    }\n-  }\n-  namespace std {\n-\n-    // Adopt C names into std::\n-    using ::_C_legacy::_C_shadow::jmp_buf;  \n-    using ::_C_legacy::longjmp;\n-\n-  } // close namespace std::\n+namespace std {\n+  // Adopt C names into std::\n+  using _C_legacy::jmp_buf;\n+  using _C_legacy::longjmp;\n+} // namespace std\n   \n-  namespace _C_legacy {\n-    namespace _C_shadow {\n-    }\n-  }\n-\n # undef _IN_C_LEGACY_\n \n #endif\n \n+\n+"}, {"sha": "71f91260214ec06e908a87cd93c31fd1b5a6a865", "filename": "libstdc++-v3/shadow/bits/std_csignal.h", "status": "modified", "additions": 19, "deletions": 63, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_csignal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_csignal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_csignal.h?ref=0517cb9903a890ecd768fae57ca0356bf901da35", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- header wrapper.\n \n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -34,78 +34,34 @@\n #ifndef _CPP_CSIGNAL\n #define _CPP_CSIGNAL 1\n \n-  namespace _C_legacy {\n-    extern \"C\" {\n+namespace _C_legacy {\n+  extern \"C\" {\n #     define _IN_C_LEGACY_\n+    // XXX\n+#     undef __need_sig_atomic_t\n+#     undef __need_sigset_t\n+\n #     pragma GCC system_header\n #     include_next <signal.h>\n-      typedef void (*_CPP_CSIGFUN_capture)(int);  // a C function pointer\n-      typedef sig_atomic_t _CPP_sig_atomic_t_capture; \n-      const _CPP_CSIGFUN_capture _CPP_SIG_DFL_capture = SIG_DFL;\n-      const _CPP_CSIGFUN_capture _CPP_SIG_ERR_capture = SIG_ERR;\n-      const _CPP_CSIGFUN_capture _CPP_SIG_IGN_capture = SIG_IGN;\n-    }\n-    const int _CPP_SIGABRT_capture = SIGABRT;\n-    const int _CPP_SIGFPE_capture  = SIGFPE;\n-    const int _CPP_SIGILL_capture  = SIGILL;\n-    const int _CPP_SIGINT_capture  = SIGINT;\n-    const int _CPP_SIGSEGV_capture = SIGSEGV;\n-    const int _CPP_SIGTERM_capture = SIGTERM;\n-\n-    namespace _C_shadow { }\n-  } // close namespace ::_C_legacy::\n+  }\n+} // namespace _C_legacy\n \n #  undef sig_atomic_t\n #  undef raise\n #  undef signal\n-#  undef SIG_DFL\n-#  define SIG_DFL \\\n-     reinterpret_cast<void (*)(int)>(::_C_legacy::_CPP_SIG_DFL_capture)\n-#  undef SIG_ERR\n-#  define SIG_ERR \\\n-     reinterpret_cast<void (*)(int)>(::_C_legacy::_CPP_SIG_ERR_capture)\n-#  undef SIG_IGN\n-#  define SIG_IGN \\\n-     reinterpret_cast<void (*)(int)>(::_C_legacy::_CPP_SIG_IGN_capture)\n-#  undef SIGABRT\n-#  define SIGABRT ::_C_legacy::_CPP_SIGABRT_capture\n-#  undef SIGFPE\n-#  define SIGFPE  ::_C_legacy::_CPP_SIGFPE_capture \n-#  undef SIGILL\n-#  define SIGILL  ::_C_legacy::_CPP_SIGILL_capture\n-#  undef SIGINT\n-#  define SIGINT  ::_C_legacy::_CPP_SIGINT_capture\n-#  undef SIGSEGV\n-#  define SIGSEGV ::_C_legacy::_CPP_SIGSEGV_capture\n-#  undef SIGTERM\n-#  define SIGTERM ::_C_legacy::_CPP_SIGTERM_capture\n-\n-  namespace _C_legacy {\n-    namespace _C_shadow {\n-      typedef ::_C_legacy::_CPP_sig_atomic_t_capture sig_atomic_t;\n-    }\n-  }\n-  namespace std {\n \n-    // Adopt C names into std::\n-    using ::_C_legacy::_C_shadow::sig_atomic_t;\n-    using ::_C_legacy::raise;\n-\n-    inline void (*signal(int __sig, void (* __fun)(int)))(int)\n-      { return reinterpret_cast<void (*)(int)>(\n-          ::_C_legacy::signal(__sig,\n-\t    reinterpret_cast< ::_C_legacy::_CPP_CSIGFUN_capture>(__fun)));\n-      }\n-\n-  } // close namespace std::\n+namespace std {\n+  // Adopt C names into std::\n+  using _C_legacy::sig_atomic_t;\n+  using _C_legacy::raise;\n+  using _C_legacy::signal;\n+} // namespace std\n   \n-  namespace _C_legacy {\n-    namespace _C_shadow {\n-      using ::std::signal;\n-    }\n-  }\n-\n # undef _IN_C_LEGACY_\n \n #endif\n \n+\n+\n+\n+"}, {"sha": "eb1b7909e744009f16883ebb55a3dd33ce076c94", "filename": "libstdc++-v3/shadow/bits/std_cstdarg.h", "status": "modified", "additions": 9, "deletions": 55, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cstdarg.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cstdarg.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cstdarg.h?ref=0517cb9903a890ecd768fae57ca0356bf901da35", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- header wrapper.\n \n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -34,65 +34,19 @@\n #ifndef _CPP_CSTDARG\n #define _CPP_CSTDARG 1\n \n-  namespace _C_legacy {\n-    extern \"C\" {\n+namespace _C_legacy {\n+  extern \"C\" {\n #     define _IN_C_LEGACY_\n #     pragma GCC system_header\n #     include_next <stdarg.h>\n-    }\n-    typedef va_list   _CPP_va_list_capture;\n-#   ifdef __GNUC__\n-\n-#   elif\n-      template <class T>\n-        inline void _CPP_va_start_capture(va_list& __val, T& __v) \n-          { va_start(__val, __v); }\n-      template <class T>\n-        inline void _CPP_va_arg_capture(va_list& __val, T& __arg) \n-          { va_start(__val, __arg); }\n-      template <class T>\n-        inline T& _CPP_va_arg_capture(va_list& __val)\n-          { return va_arg(__val, T); }\n-      template <class T>\n-        inline void _CPP_va_end(va_list& __val)\n-          { va_end(__val); }\n-#   endif\n-\n-    // typedef size_t    _CPP_size_t_capture;  // handled in <cstddef>\n-\n-    namespace _C_shadow { }\n-  } // close namespace ::_C_legacy::\n-\n-#  ifdef __GNUC__\n-\n-#    undef va_list\n-     using _C_legacy::__gnuc_va_list;\n-\n-#  elif  /* probably must be tailored for each compiler, as above. */\n-\n-#    undef va_list\n-#    undef va_start\n-#    define va_start(a,b) ::_C_legacy::_CPP_va_start_capture(a,b)\n-#    undef va_arg\n-#    define va_arg(a,b)   ::_C_legacy::_CPP_va_arg_capture<b>(a)\n-#    undef va_end\n-#    define va_end(a)     ::_C_legacy::_CPP_va_end_capture(a)\n+  }\n+} // namespace _C_legacy\n \n-#  endif\n+#  undef va_list\n \n-  namespace _C_legacy {\n-    namespace _C_shadow {\n-      typedef ::_C_legacy::_CPP_va_list_capture va_list;\n-    }\n-  }\n-  namespace std {\n-    using ::_C_legacy::_C_shadow::va_list;  \n-  } // close namespace std::\n-  \n-  namespace _C_legacy {\n-    namespace _C_shadow {\n-    }\n-  }\n+namespace std {\n+  using _C_legacy::va_list;\n+} // namespace std\n \n # undef _IN_C_LEGACY_\n "}, {"sha": "5ebcb61c80846b66e942f40fcedccdd6f8597613", "filename": "libstdc++-v3/shadow/bits/std_cstddef.h", "status": "modified", "additions": 13, "deletions": 31, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cstddef.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cstddef.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cstddef.h?ref=0517cb9903a890ecd768fae57ca0356bf901da35", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- header wrapper.\n \n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -34,45 +34,27 @@\n #ifndef _CPP_CSTDDEF\n #define _CPP_CSTDDEF 1\n \n-  namespace _C_legacy {\n-    extern \"C\" {\n+namespace _C_legacy {\n+  extern \"C\" {\n #     define _IN_C_LEGACY_\n #     pragma GCC system_header\n #     include_next <stddef.h>\n-    }\n-    typedef ptrdiff_t _CPP_ptrdiff_t_capture; \n-    typedef size_t    _CPP_size_t_capture; \n-\n-    namespace _C_shadow { }\n-  } // close namespace ::_C_legacy::\n+  }\n+} // namespace _C_legacy\n \n #  undef ptrdiff_t  \n #  undef size_t  \n-#  undef wchar_t  \n-#  undef  NULL\n-#  define NULL 0 \n-// # undef offsetof\n-\n-  namespace _C_legacy {\n-    namespace _C_shadow {\n-      typedef ::_C_legacy::_CPP_ptrdiff_t_capture  ptrdiff_t;\n-      typedef ::_C_legacy::_CPP_size_t_capture  size_t;\n-    }\n-  }\n-  namespace std {\n-\n-    // Adopt C names into std::\n-    using ::_C_legacy::_C_shadow::ptrdiff_t;  \n-    using ::_C_legacy::_C_shadow::size_t;  \n \n-  } // close namespace std::\n+namespace std {\n+  using _C_legacy::ptrdiff_t;\n+  using _C_legacy::size_t;\n+} // namespace std\n   \n-  namespace _C_legacy {\n-    namespace _C_shadow {\n-    }\n-  }\n-\n # undef _IN_C_LEGACY_\n \n #endif\n \n+\n+\n+\n+"}, {"sha": "db2761281d08d1ffbfe68bd7371e372e8d58a274", "filename": "libstdc++-v3/shadow/bits/std_cstdio.h", "status": "modified", "additions": 171, "deletions": 256, "changes": 427, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cstdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cstdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cstdio.h?ref=0517cb9903a890ecd768fae57ca0356bf901da35", "patch": "@@ -1,5 +1,6 @@\n // -*- C++ -*- header wrapper.\n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -30,85 +31,51 @@\n // ISO C++ 14882: 27.8.2  C Library files\n //\n \n-// XXX problems?  Uses size_t, va_list in interfaces.  \n-//   Maybe <stdio.h> needs a size_t macro defined.  Maybe it \n-//   clobbers va_list.\n-// \n-// Also,\n-//  uses va_start, va_end in implementation of vfprintf and\n-//  vfscanf.  Maybe those shouldn't be inline.\n-\n #ifndef _CPP_CSTDIO\n #define _CPP_CSTDIO 1\n \n-# include <bits/std_cstddef.h>  /* pick up size_t, NULL */\n-# include <bits/std_cstdarg.h>  /* pick up va_list, va_start, va_end */\n+# include <bits/std_cstddef.h>  \n+# include <bits/std_cstdarg.h>  \n \n-  namespace _C_legacy {\n-    extern \"C\" {\n+namespace _C_legacy {\n+  extern \"C\" {\n #     define _IN_C_LEGACY_\n+#     undef __need_FILE\n #     pragma GCC system_header\n #     include_next <stdio.h>\n-    }\n-    // size_t handled in <cstddef>\n-    typedef FILE _CPP_FILE_capture;\n-    typedef fpos_t _CPP_fpos_t_capture;\n-    // NULL done in <stddef.h>\n-    const int _CPP_IOFBF_capture = _IOFBF;\n-    const int _CPP_IOLBF_capture = _IOLBF;\n-    const int _CPP_IONBF_capture = _IONBF;\n-    const int _CPP_BUFSIZ_capture = BUFSIZ;\n-    const int _CPP_EOF_capture = EOF;\n-    const int _CPP_FOPEN_MAX_capture = FOPEN_MAX;\n-    const int _CPP_FILENAME_MAX_capture = FILENAME_MAX;\n-    const int _CPP_L_tmpnam_capture = L_tmpnam;\n-    const int _CPP_SEEK_CUR_capture = SEEK_CUR;\n-    const int _CPP_SEEK_END_capture = SEEK_END;\n-    const int _CPP_SEEK_SET_capture = SEEK_SET;\n-    const int _CPP_TMP_MAX_capture = TMP_MAX;\n-\n-    inline FILE* _CPP_stderr_capture() { return stderr; }\n-    inline FILE* _CPP_stdin_capture()  { return stdin; }\n-    inline FILE* _CPP_stdout_capture() { return stdout; }\n-\n-    inline int _CPP_getc_capture(FILE* __f)        { return getc(__f); }\n-    inline int _CPP_getchar_capture()              { return getchar(); }\n-    inline int _CPP_putc_capture(int __c, FILE* __f) { return putc(__c, __f); }\n-    inline int _CPP_putchar_capture(int __c)       { return putchar(__c); }\n-    inline int _CPP_feof_capture(FILE* __f)        { return feof(__f); }\n-\n-    namespace _C_shadow {\n-    }\n-\n-  } // close namespace ::_C_legacy::\n-\n-// # undef size_t  /* handled in <cstddef> */\n+  }\n+\n+  typedef FILE _CPP_FILE_capture;\n+  typedef fpos_t _CPP_fpos_t_capture;\n+\n+  inline FILE* \n+  _CPP_stderr_capture() { return stderr; }\n+\n+  inline FILE* \n+  _CPP_stdin_capture()  { return stdin; }\n+\n+  inline FILE* \n+  _CPP_stdout_capture() { return stdout; }\n+\n+  inline int \n+  _CPP_getc_capture(FILE* __f) { return getc(__f); }\n+\n+  inline int \n+  _CPP_getchar_capture() { return getchar(); }\n+\n+  inline int \n+  _CPP_putc_capture(int __c, FILE* __f) { return putc(__c, __f); }\n+  \n+  inline int \n+  _CPP_putchar_capture(int __c) { return putchar(__c); }\n+ \n+  inline int \n+  _CPP_feof_capture(FILE* __f) { return feof(__f); }\n+\n+} // namespace _C_legacy\n+\n # undef FILE \n # undef fpos_t \n-# undef _IOFBF\n-# define _IOFBF\t\t::_C_legacy::_CPP__IOFBF_capture\n-# undef _IOLBF\n-# define _IOLBF\t\t::_C_legacy::_CPP__IOLBF_capture\n-# undef _IONBF\t\n-# define _IONBF\t\t::_C_legacy::_CPP__IONBF_capture\n-# undef BUFSIZ\n-# define BUFSIZ\t\t::_C_legacy::_CPP_BUFSIZ_capture\n-# undef EOF\n-# define EOF\t\t::_C_legacy::_CPP_EOF_capture\n-# undef FOPEN_MAX\n-# define FOPEN_MAX\t::_C_legacy::_CPP_FOPEN_MAX_capture\n-# undef FILENAME_MAX\n-# define FILENAME_MAX\t::_C_legacy::_CPP_FILENAME_MAX_capture\n-# undef L_tmpnam\n-# define L_tmpnam\t::_C_legacy::_CPP_L_tmpnam_capture\n-# undef SEEK_CUR\n-# define SEEK_CUR\t::_C_legacy::_CPP_SEEK_CUR_capture\n-# undef SEEK_END\n-# define SEEK_END\t::_C_legacy::_CPP_SEEK_END_capture\n-# undef SEEK_SET\n-# define SEEK_SET\t::_C_legacy::_CPP_SEEK_SET_capture\n-# undef TMP_MAX\n-# define TMP_MAX\t::_C_legacy::_CPP_TMP_MAX_capture\n \n # undef remove\n # undef rename\n@@ -151,216 +118,164 @@\n # undef feof\n # undef ferror\n # undef perror\n-\n-  namespace _C_legacy {\n-    namespace _C_shadow {\n-    }\n+  \n+# undef stderr\n+# define stderr std::_CPP_stderr()\n+# undef stdin\n+# define stdin  std::_CPP_stdin()\n+# undef stdout\n+# define stdout std::_CPP_stdout()\n+\n+namespace std {\n+  struct FILE : _C_legacy::_CPP_FILE_capture { };\n+  struct fpos_t { _C_legacy::_CPP_fpos_t_capture _M_dummy; };\n+\n+  using _C_legacy::remove;\n+  using _C_legacy::rename;\n+  using _C_legacy::tmpnam;\n+  using _C_legacy::printf;\n+  using _C_legacy::scanf;\n+  using _C_legacy::sprintf;\n+  using _C_legacy::sscanf;\n+  using _C_legacy::gets;\n+  using _C_legacy::perror;\n+\n+  inline FILE* \n+  _CPP_stderr()\n+  { return reinterpret_cast<FILE*>(_C_legacy::_CPP_stderr_capture() ); }\n+\n+  inline FILE* \n+  _CPP_stdin()\n+  { return reinterpret_cast<FILE*>(_C_legacy::_CPP_stdin_capture() ); }\n+\n+  inline FILE* \n+  _CPP_stdout()\n+  { return reinterpret_cast<FILE*>(_C_legacy::_CPP_stdout_capture() ); }\n+\n+  inline FILE*\n+  tmpfile() { return reinterpret_cast<FILE*>(_C_legacy::tmpfile()); }\n+\n+  inline int\n+  fclose(FILE* __f) { return _C_legacy::fclose(__f); }\n+\n+  inline int\n+  fflush(FILE* __f) { return _C_legacy::fflush(__f); }\n+\n+  inline FILE*\n+  fopen(char const* __name, char const* __mode) \n+  { return reinterpret_cast<FILE*>(_C_legacy::fopen(__name,__mode)); }\n+\n+  inline FILE*\n+  freopen(char const* __name, char const* __mode, FILE* __f) \n+  { return reinterpret_cast<FILE*>(_C_legacy::freopen(__name,__mode,__f)); }\n+\n+  inline void\n+  setbuf(FILE* __f, char* __buf) \n+  { return _C_legacy::setbuf(__f, __buf); }\n+\n+  inline int\n+  setvbuf(FILE* __f, char* __buf, int __mode, size_t __size) \n+  { return _C_legacy::setvbuf(__f, __buf, __mode, __size); }\n+\n+  inline int\n+  fprintf(FILE* __f, char const* __fmt, ...)\n+  { \n+    va_list __v; \n+    va_start(__v,__fmt); \n+    int __i = _C_legacy::vfprintf(__f, __fmt, __v); \n+    va_end(__v);\n+    return __i; \n   }\n-  namespace std {\n-\n-    // Adopt C names into std::\n-\n-    struct FILE   : ::_C_legacy::_CPP_FILE_capture { };\n-    struct fpos_t { ::_C_legacy::_CPP_fpos_t_capture _M_dummy; };\n-\n-    inline FILE* _CPP_stderr()\n-      { return reinterpret_cast<FILE*>( ::_C_legacy::_CPP_stderr_capture() ); }\n-    inline FILE* _CPP_stdin()\n-      { return reinterpret_cast<FILE*>( ::_C_legacy::_CPP_stdin_capture() ); }\n-    inline FILE* _CPP_stdout()\n-      { return reinterpret_cast<FILE*>( ::_C_legacy::_CPP_stdout_capture() ); }\n \n-    using ::_C_legacy::remove;\n-    using ::_C_legacy::rename;\n-\n-    inline FILE*\n-      tmpfile() { return reinterpret_cast<FILE*>(::_C_legacy::tmpfile()); }\n-\n-    using ::_C_legacy::tmpnam;\n-\n-    inline int\n-      fclose(FILE* __f) { return ::_C_legacy::fclose(__f); }\n-\n-    inline int\n-      fflush(FILE* __f) { return ::_C_legacy::fflush(__f); }\n-\n-    inline FILE*\n-      fopen(char const* __name, char const* __mode) \n-        { return reinterpret_cast<FILE*>(::_C_legacy::fopen(__name,__mode)); }\n-\n-    inline FILE*\n-      freopen(char const* __name, char const* __mode, FILE* __f) \n-        { return reinterpret_cast<FILE*>(\n-\t  ::_C_legacy::freopen(__name,__mode,__f)); }\n-\n-    inline void\n-      setbuf(FILE* __f, char* __buf) \n-        { return ::_C_legacy::setbuf(__f, __buf); }\n-\n-    inline int\n-      setvbuf(FILE* __f, char* __buf, int __mode, size_t __size) \n-        { return ::_C_legacy::setvbuf(__f, __buf, __mode, __size); }\n-\n-    inline int\n-      fprintf(FILE* __f, char const* __fmt, ...)\n-        { va_list __v; va_start(__v,__fmt); \n-          int __i = ::_C_legacy::vfprintf(__f, __fmt, __v); va_end(__v);\n-\t    return __i; }\n-\n-    inline int\n-      fscanf(FILE* __f, char const* __fmt, ...)\n-        { va_list __v; va_start(__v,__fmt); \n-          int __i = ::_C_legacy::vfscanf(__f, __fmt, __v); va_end(__v);\n-\t    return __i; }\n-\n-    using ::_C_legacy::printf;\n-    using ::_C_legacy::scanf;\n-    using ::_C_legacy::sprintf;\n-    using ::_C_legacy::sscanf;\n-\n-    // using ::_C_legacy::vfprintf;\n-    inline int\n-      vfprintf(FILE* __f, char const* __fmt, va_list __v)\n-        { return ::_C_legacy::vfprintf(__f, __fmt, __v); }\n-\n-    inline int\n-      vprintf(char const* __fmt, va_list __v)\n-        { return ::_C_legacy::vprintf(__fmt, __v); }\n-\n-    inline int\n-      vsprintf(char* __buf, char const* __fmt, va_list __v)\n-        { return ::_C_legacy::vsprintf(__buf, __fmt, __v); }\n+  inline int\n+  fscanf(FILE* __f, char const* __fmt, ...)\n+  { \n+    va_list __v; \n+    va_start(__v,__fmt); \n+    int __i = _C_legacy::vfscanf(__f, __fmt, __v); \n+    va_end(__v);\n+    return __i; \n+  }\n \n-    inline int\n-      fgetc(FILE* __f) { return ::_C_legacy::fgetc(__f); }\n+  inline int\n+  vfprintf(FILE* __f, char const* __fmt, va_list __v)\n+  { return _C_legacy::vfprintf(__f, __fmt, __v); }\n \n-    // using ::_C_legacy::fgets;\n-    inline char*\n-      fgets(char* __buf, int __n, FILE* __f) \n-        { return ::_C_legacy::fgets(__buf, __n, __f); }\n+  inline int\n+  vprintf(char const* __fmt, va_list __v)\n+  { return _C_legacy::vprintf(__fmt, __v); }\n \n-    inline int\n-      fputc(int __c, FILE* __f) { return ::_C_legacy::fputc(__c, __f); }\n+  inline int\n+  vsprintf(char* __buf, char const* __fmt, va_list __v)\n+  { return _C_legacy::vsprintf(__buf, __fmt, __v); }\n \n-    inline int\n-      fputs(char const* __s, FILE* __f) \n-        { return ::_C_legacy::fputs(__s, __f); }\n+  inline int\n+  fgetc(FILE* __f) { return _C_legacy::fgetc(__f); }\n \n-    inline int\n-      getc(FILE* __f) { return ::_C_legacy::_CPP_getc_capture(__f); }\n+  inline char*\n+  fgets(char* __buf, int __n, FILE* __f) \n+  { return _C_legacy::fgets(__buf, __n, __f); }\n \n-    inline int\n-      getchar() { return ::_C_legacy::_CPP_getchar_capture(); }\n+  inline int\n+  fputc(int __c, FILE* __f) { return _C_legacy::fputc(__c, __f); }\n \n-    using ::_C_legacy::gets;\n+  inline int\n+  fputs(char const* __s, FILE* __f) \n+  { return _C_legacy::fputs(__s, __f); }\n \n-    inline int\n-      putc(int __c, FILE* __f) \n-        { return ::_C_legacy::_CPP_putc_capture(__c, __f); }\n+  inline int\n+  getc(FILE* __f) { return _C_legacy::_CPP_getc_capture(__f); }\n \n-    inline int\n-      putchar(int __c) { return ::_C_legacy::_CPP_putchar_capture(__c); }\n+  inline int\n+  getchar() { return _C_legacy::_CPP_getchar_capture(); }\n \n-    using ::_C_legacy::puts;\n+  inline int\n+  putc(int __c, FILE* __f) \n+  { return _C_legacy::_CPP_putc_capture(__c, __f); }\n \n-    // using ::_C_legacy::ungetc;\n-    inline int\n-      ungetc(int __c, FILE* __f) { return ::_C_legacy::ungetc(__c, __f); }\n+  inline int\n+  putchar(int __c) { return _C_legacy::_CPP_putchar_capture(__c); }\n \n-    inline size_t\n-      fread(void* __p, size_t __z, size_t __n, FILE* __f)\n-        { return ::_C_legacy::fread(__p,__z,__n,__f); }\n+  using _C_legacy::puts;\n \n-    inline size_t\n-      fwrite(void const* __p, size_t __z, size_t __n, FILE* __f)\n-        { return ::_C_legacy::fwrite(__p,__z,__n,__f); }\n+  inline int\n+  ungetc(int __c, FILE* __f) { return _C_legacy::ungetc(__c, __f); }\n \n-    inline int\n-      fgetpos(FILE* __f, fpos_t* __pos)\n-        { return ::_C_legacy::fgetpos(__f,&__pos->_M_dummy); }\n+  inline size_t\n+  fread(void* __p, size_t __z, size_t __n, FILE* __f)\n+  { return _C_legacy::fread(__p,__z,__n,__f); }\n \n-    inline int\n-      fseek(FILE* __f, long __off, int __how)\n-        { return ::_C_legacy::fseek(__f,__off,__how); }\n+  inline size_t\n+  fwrite(void const* __p, size_t __z, size_t __n, FILE* __f)\n+  { return _C_legacy::fwrite(__p,__z,__n,__f); }\n \n-    inline int\n-      fsetpos(FILE* __f, fpos_t const* __pos)\n-        { return ::_C_legacy::fsetpos(__f,&__pos->_M_dummy); }\n+  inline int\n+  fgetpos(FILE* __f, fpos_t* __pos)\n+  { return _C_legacy::fgetpos(__f,&__pos->_M_dummy); }\n \n-    inline long\n-      ftell(FILE* __f) { return ::_C_legacy::ftell(__f); }\n+  inline int\n+  fseek(FILE* __f, long __off, int __how)\n+  { return _C_legacy::fseek(__f,__off,__how); }\n \n-    inline void\n-      rewind(FILE* __f) { return ::_C_legacy::rewind(__f); }\n+  inline int\n+  fsetpos(FILE* __f, fpos_t const* __pos)\n+  { return _C_legacy::fsetpos(__f,&__pos->_M_dummy); }\n \n-    inline void\n-      clearerr(FILE* __f) { return ::_C_legacy::clearerr(__f); }\n+  inline long\n+  ftell(FILE* __f) { return _C_legacy::ftell(__f); }\n \n-    inline int\n-      feof(FILE* __f) { return ::_C_legacy::_CPP_feof_capture(__f); }\n+  inline void\n+  rewind(FILE* __f) { return _C_legacy::rewind(__f); }\n \n-    inline int\n-      ferror(FILE* __f) { return ::_C_legacy::ferror(__f); }\n+  inline void\n+  clearerr(FILE* __f) { return _C_legacy::clearerr(__f); }\n \n-    using ::_C_legacy::perror;\n+  inline int\n+  feof(FILE* __f) { return _C_legacy::_CPP_feof_capture(__f); }\n \n-  } // close namespace std::\n-  \n-# undef stderr\n-# define stderr ::std::_CPP_stderr()\n-# undef stdin\n-# define stdin  ::std::_CPP_stdin()\n-# undef stdout\n-# define stdout ::std::_CPP_stdout()\n-\n-  namespace _C_legacy {\n-    namespace _C_shadow {\n-      using ::std::FILE;\n-      using ::std::fpos_t;\n-\n-      // using ::std::remove;\n-      // using ::std::rename;\n-      using ::std::tmpfile;\n-      // using ::std::tmpnam;\n-      using ::std::fclose;\n-      using ::std::fflush;\n-      using ::std::fopen;\n-      using ::std::freopen;\n-      using ::std::setbuf;\n-      using ::std::setvbuf;\n-      using ::std::fprintf;\n-      using ::std::fscanf;\n-      // using ::std::printf;\n-      // using ::std::scanf;\n-      // using ::std::sprintf;\n-      // using ::std::sscanf;\n-      using ::std::vfprintf;\n-      using ::std::vprintf;\n-      using ::std::vsprintf;  \n-      using ::std::fgetc;\n-      using ::std::fgets;\n-      using ::std::fputc;\n-      using ::std::fputs;\n-      using ::std::getc;\n-      using ::std::getchar;\n-      // using ::std::gets;\n-      using ::std::putc;\n-      using ::std::putchar;\n-      // using ::std::puts;\n-      using ::std::ungetc;\n-      using ::std::fread;\n-      using ::std::fwrite;\n-      using ::std::fgetpos;\n-      using ::std::fseek;\n-      using ::std::fsetpos;\n-      using ::std::ftell;\n-      using ::std::rewind;\n-      using ::std::clearerr;\n-      using ::std::feof;\n-      using ::std::ferror;\n-      // using ::std::perror;\n-    }\n-  }\n+  inline int\n+  ferror(FILE* __f) { return _C_legacy::ferror(__f); }\n+} // namespace std\n \n # undef _IN_C_LEGACY_\n "}, {"sha": "44a316ec40f5c9954c1eb21a71d989459489217b", "filename": "libstdc++-v3/shadow/bits/std_cstdlib.h", "status": "modified", "additions": 86, "deletions": 140, "changes": 226, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cstdlib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cstdlib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cstdlib.h?ref=0517cb9903a890ecd768fae57ca0356bf901da35", "patch": "@@ -38,7 +38,8 @@\n #ifndef _CPP_CSTDLIB\n #define _CPP_CSTDLIB 1\n \n-# include <bits/std_cstddef.h>  /* pick up NULL, size_t */\n+# include <bits/c++config.h>\n+# include <bits/std_cstddef.h>  \n \n namespace _C_legacy {\n   extern \"C\" {\n@@ -47,36 +48,20 @@ namespace _C_legacy {\n #     include_next <stdlib.h>\n       typedef int (*_C_cmp_fun_ptr)(const void*, const void*);  // C fn ptr\n     }\n-  const int _CPP_EXIT_SUCCESS_capture = int(EXIT_SUCCESS);\n-  const int _CPP_EXIT_FAILURE_capture = int(EXIT_FAILURE);\n-  const int _CPP_RAND_MAX_capture     = int(RAND_MAX);\n-  inline int _CPP_MB_CUR_MAX_capture() { return int(MB_CUR_MAX); }\n-  // typedef size_t  _CPP_size_t_capture;\n-  // typedef wchar_t _CPP_wchar_t_capture;\n+\n   typedef div_t   _CPP_div_t_capture;\n   typedef ldiv_t  _CPP_ldiv_t_capture;\n \n-  namespace _C_shadow { \n-  }\n-} // namespace _C_legacy::\n+# if _GLIBCPP_HAVE_LLDIV_T\n+  typedef lldiv_t  _CPP_lldiv_t_capture;\n+# endif\n+} // namespace _C_legacy\n \n #  undef size_t\n #  undef wchar_t\n #  undef div_t\n #  undef ldiv_t\n \n-// <cstddef>\n-// #  undef  NULL\n-// #  define NULL         0\n-#  undef  EXIT_SUCCESS\n-#  define EXIT_SUCCESS (::_C_legacy::_CPP_EXIT_SUCCESS_capture)\n-#  undef  EXIT_FAILURE\n-#  define EXIT_FAILURE (::_C_legacy::_CPP_EXIT_FAILURE_capture)\n-#  undef  RAND_MAX\n-#  define RAND_MAX     (::_C_legacy::_CPP_RAND_MAX_capture)\n-#  undef  MB_CUR_MAX\n-#  define MB_CUR_MAX   (::_C_legacy::_CPP_MB_CUR_MAX_capture())\n-\n #  undef atof\n #  undef atoi\n #  undef atol\n@@ -110,134 +95,95 @@ namespace _C_legacy {\n #  undef mbstowcs\n #  undef wcstombs\n \n-  namespace _C_legacy {\n-    namespace _C_shadow {\n-      // these come from <cstddef>\n-      // typedef ::_C_legacy::_CPP_size_t_capture  size_t;\n-      // typedef ::_C_legacy::_CPP_wchar_t_capture wchar_t;\n-    }\n-  }\n-  namespace std {\n-\n-    // Adopt C names into std::\n-    // using ::_C_legacy::_C_shadow::size_t;  \n-    // using ::_C_legacy::_C_shadow::wchar_t;\n-\n-    typedef ::_C_legacy::_CPP_div_t_capture _CPP_div_t;\n-    struct div_t  : _CPP_div_t {};\n-    typedef ::_C_legacy::_CPP_ldiv_t_capture _CPP_ldiv_t;\n-    struct ldiv_t : _CPP_ldiv_t {};\n-    // note: div_t and ldiv_t are still POD types \n-\n-    // EXIT_SUCCESS, EXIT_FAILURE, RAND_MAX, MB_CUR_MAX, NULL\n-\n-    using ::_C_legacy::atof;\n-    using ::_C_legacy::atoi;\n-    using ::_C_legacy::atol;\n-    using ::_C_legacy::strtod;\n-    using ::_C_legacy::strtol;\n-    using ::_C_legacy::strtoul;\n-    using ::_C_legacy::rand;\n-    using ::_C_legacy::srand;\n-    using ::_C_legacy::calloc;\n-    using ::_C_legacy::free;\n-    using ::_C_legacy::malloc;\n-    using ::_C_legacy::realloc;\n-    void abort();     // XXX must define this correctly for C++.\n-\n-#define _FUN_OVERLOAD_BUG\n-    // extern \"C\" funs declared void f(int (*)()) overload OK with C++ funs,\n-    //  but not if declared void f(int (*)(void)).\n-\n-#if !defined(__GNUC__) || !defined(_FUN_OVERLOAD_BUG)\n-    using ::_C_legacy::atexit;     // XXX must redefine this one!\n+namespace std {\n+  struct div_t : _C_legacy::_CPP_div_t_capture { };\n+  struct ldiv_t : _C_legacy::_CPP_ldiv_t_capture { };\n+\n+#ifdef _GLIBCPP_USE_LONG_LONG\n+# ifdef _GLIBCPP_HAVE_LLDIV_T\n+  struct lldiv_t : _C_legacy::_CPP_lldiv_t_captur { };\n+# else\n+  struct lldiv_t\n+  {\n+    long long quot;\n+    long long rem;\n+  };\n+# endif\n #endif\n-    int atexit(void (*)());       // XXX must define this.\n-      // More precisely, we need an extern \"C\" atexit() that\n-      //   implements the correct semantics, but hides the link-name\n-      //   atexit found in the C library, and a C++ atexit too.  If\n-      //   C and C++ calling conventions differ, each pointer must\n-      //   be marked to be called using the proper convention.\n \n-    void exit(int __i)   // XXX must define correctly for C++, like atexit().\n-      { ::_C_legacy::exit(__i); }\n+  using _C_legacy::atof;\n+  using _C_legacy::atoi;\n+  using _C_legacy::atol;\n+  using _C_legacy::strtod;\n+  using _C_legacy::strtol;\n+  using _C_legacy::strtoul;\n+  using _C_legacy::rand;\n+  using _C_legacy::srand;\n+  using _C_legacy::calloc;\n+  using _C_legacy::free;\n+  using _C_legacy::malloc;\n+  using _C_legacy::realloc;\n+\n+  using _C_legacy::abort;\n+  using _C_legacy::atexit;\n+  using _C_legacy::exit;\n+  using _C_legacy::bsearch;\n+  using _C_legacy::qsort; \n+\n+  using _C_legacy::getenv;\n+  using _C_legacy::system;\n+  using _C_legacy::mbtowc;\n+  using _C_legacy::wctomb;\n+  using _C_legacy::mbstowcs;\n+  using _C_legacy::wcstombs;\n \n-    using ::_C_legacy::getenv;\n-    using ::_C_legacy::system;\n+#ifdef _GLIBCPP_USE_LONG_LONG\n+  using _C_legacy::strtoll;\n+  using _C_legacy::strtoull;\n+  using _C_legacy::strtof;\n+  using _C_legacy::strtold;\n+#endif\n \n-    // XXX note that the raw conversion between C and C++ function \n-    // pointers may not be portable to some targets; those targets need\n-    // a forwarding function.\n+  using _C_legacy::mblen;\n \n-#if !defined(__GNUC__) || !defined(_FUN_OVERLOAD_BUG)\n-    using ::_C_legacy::bsearch;  // overload\n-#endif\n-    inline void* bsearch(const void* __key, const void* __base, size_t __n, \n-\t\t  size_t __size, int (*__cmp)(const void*, const void*))\n-      { return ::_C_legacy::bsearch(__key,__base,__n,__size,\n-          reinterpret_cast< ::_C_legacy::_C_cmp_fun_ptr>(__cmp)); }  // XXX\n+  inline int \n+  abs(int __x) { return __x >= 0 ? __x : -__x; }\n \n-#if !defined(__GNUC__) || !defined(_FUN_OVERLOAD_BUG)\n-    using ::_C_legacy::qsort;    // overload\n-#endif\n-    inline void qsort(void* __base, size_t __n, size_t __size,\n-\t              int (*__cmp)(const void*, const void*)) \n-      { return ::_C_legacy::qsort(__base,__n,__size,\n-          reinterpret_cast< ::_C_legacy::_C_cmp_fun_ptr>(__cmp)); }  // XXX\n-\n-\n-    inline int abs(int __x) \n-      { return __x >= 0 ? __x : -__x; }\n-    inline div_t div(int __n, int __d)\n-      { div_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }\n-    inline long labs(long __x)\n-      { return __x >= 0 ? __x : -__x; }\n-    inline long abs(long __x)\n-      { return __x >= 0 ? __x : -__x; }\n-    inline ldiv_t ldiv(long __n, long __d)\n-      { ldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }\n-    inline ldiv_t div(long __n, long __d)\n-      { ldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }\n-#ifdef _GLIBCPP_USE_LONG_LONG\n-    inline long long llabs(long long __x)\n-      { return __x >= 0 ? __x : -__x; }\n-    inline long long abs(long long __x)\n-      { return __x >= 0 ? __x : -__x; }\n-    inline lldiv_t lldiv(long long __n, long long __d)\n-      { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }\n-    inline lldiv_t div(long long __n, long long __d)\n-      { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }\n-#endif\n+  inline div_t \n+  div(int __n, int __d)\n+  { div_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }\n \n-    using ::_C_legacy::mblen;\n-    using ::_C_legacy::mbtowc;;\n-    using ::_C_legacy::wctomb;\n-    using ::_C_legacy::mbstowcs;\n-    using ::_C_legacy::wcstombs;\n+  inline long \n+  labs(long __x) { return __x >= 0 ? __x : -__x; }\n+\n+  inline long \n+  abs(long __x) { return __x >= 0 ? __x : -__x; }\n+\n+  inline ldiv_t \n+  ldiv(long __n, long __d)\n+  { ldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }\n+\n+  inline ldiv_t \n+  div(long __n, long __d)\n+  { ldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }\n \n-  } // close namespace std::\n-  \n-  namespace _C_legacy {\n-    namespace _C_shadow {\n-      using ::std::div_t;\n-      using ::std::ldiv_t;\n-\n-      using ::std::abort;\n-      using ::std::atexit;\n-      using ::std::exit;\n-      using ::std::bsearch;\n-      using ::std::qsort;\n-      using ::std::abs;\n-      using ::std::div;\n-      using ::std::labs;\n-      using ::std::ldiv;\n #ifdef _GLIBCPP_USE_LONG_LONG\n-      using ::std::llabs;\n-      using ::std::lldiv;\n-#endif\n-    }\n-  }\n+  inline long long \n+  llabs(long long __x) { return __x >= 0 ? __x : -__x; }\n+\n+  inline long long \n+  abs(long long __x) { return __x >= 0 ? __x : -__x; }\n+\n+  inline lldiv_t \n+  lldiv(long long __n, long long __d)\n+  { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }\n \n+  inline lldiv_t \n+  div(long long __n, long long __d)\n+  { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }\n+#endif\n+} // namespace std\n+  \n # undef _IN_C_LEGACY_\n \n #endif"}, {"sha": "38b9e6b617d7abf20401c783c636be7326485b1a", "filename": "libstdc++-v3/shadow/bits/std_cstring.h", "status": "modified", "additions": 208, "deletions": 167, "changes": 375, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cstring.h?ref=0517cb9903a890ecd768fae57ca0356bf901da35", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- header wrapper.\n \n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -33,77 +33,112 @@\n \n #ifndef _CPP_CSTRING\n #define _CPP_CSTRING 1\n+\n # if defined __GLIBC__ && __GLIBC__ >= 2\n // We must not see the optimized string functions GNU libc defines.\n #  define __NO_STRING_INLINES\n # endif\n \n-# include <bits/std_cstddef.h>  /* pick up size_t, NULL */\n+# include <bits/std_cstddef.h>  \n \n-  namespace _C_legacy {\n-    extern \"C\" {\n+namespace _C_legacy {\n+  extern \"C\" {\n #     define _IN_C_LEGACY_\n #     pragma GCC system_header\n #     include_next <string.h>\n-    }\n-\n-    // size_t\n-    // NULL\n-\n-    // We do inline captures of most of these in case they\n-    // have been optimized with macros.  \n-\n-    inline void* _CPP_memcpy_capture(void* __s1, void const* __s2, size_t __n)\n-      { return memcpy(__s1,__s2,__n); }\n-    inline void* _CPP_memmove_capture(void* __s1, void const* __s2, size_t __n)\n-      { return memmove(__s1,__s2,__n); }\n-    inline void* _CPP_strcpy_capture(char* __s1, char const* __s2)\n-      { return strcpy(__s1,__s2); }\n-    inline char* _CPP_strncpy_capture(char* __s1, char const* __s2, size_t __n)\n-      { return strncpy(__s1,__s2,__n); }\n-    inline char* _CPP_strcat_capture(char* __s1, char const* __s2)\n-      { return strcat(__s1,__s2); }\n-    inline char* _CPP_strncat_capture(char* __s1, char const* __s2, size_t __n)\n-      { return strncat(__s1,__s2,__n); }\n-    inline int _CPP_memcmp_capture(void const* __s1, \n-\t\t\t\t   void const* __s2, size_t __n)\n-      { return memcmp(__s1,__s2,__n); }\n-    inline int _CPP_strcmp_capture(char const* __s1, char const* __s2)\n-      { return strcmp(__s1,__s2); }\n-    inline int _CPP_strcoll_capture(char const* __s1, char const* __s2)\n-      { return strcoll(__s1,__s2); }\n-    inline int _CPP_strncmp_capture(char const* __s1, \n-\t\t                    char const* __s2, size_t __n)\n-      { return strncmp(__s1,__s2,__n); }\n-    inline size_t _CPP_strxfrm_capture(char* __b, char const* __s, size_t __n)\n-      { return strxfrm(__b,__s,__n); }\n-    inline void* _CPP_memchr_capture(void const* __s1, int __c, size_t __n)\n-      { return memchr(__s1,__c,__n); }\n-    inline char* _CPP_strchr_capture(char const* __s1, int __c)\n-      { return strchr(__s1,__c); }\n-    inline size_t _CPP_strcspn_capture(char const* __s1, char const* __s2)\n-      { return strcspn(__s1,__s2); }\n-    inline char* _CPP_strpbrk_capture(char const* __s1, char const* __s2)\n-      { return strpbrk(__s1,__s2); }\n-    inline char* _CPP_strrchr_capture(char const* __s1, int __c)\n-      { return strrchr(__s1,__c); }\n-    inline size_t _CPP_strspn_capture(char const* __s1, char const* __s2)\n-      { return strspn(__s1,__s2); }\n-    inline char* _CPP_strstr_capture(char const* __s1, char const* __s2)\n-      { return strstr(__s1,__s2); }\n-    inline char* _CPP_strtok_capture(char* __s1, char const* __s2)\n-      { return strtok(__s1,__s2); }\n-    inline void* _CPP_memset_capture(void* __s, int __c, size_t __n)\n-      { return memset(__s,__c,__n); }\n-    // inline char* _CPP_strerror_capture(int __num)\n-    //  { return strerror(__num); }\n-    inline size_t _CPP_strlen_capture(char const* __s)\n-      { return strlen(__s); }\n-\n-    namespace _C_shadow { }\n-  } // close namespace ::_C_legacy::\n-\n-// size_t, NULL\n+  }\n+\n+  // We do inline captures of most of these in case they\n+  // have been optimized with macros.  \n+  inline void* \n+  _CPP_memcpy_capture(void* __s1, void const* __s2, size_t __n)\n+  { return memcpy(__s1, __s2, __n); }\n+\n+  inline void* \n+  _CPP_memmove_capture(void* __s1, void const* __s2, size_t __n)\n+  { return memmove(__s1, __s2, __n); }\n+\n+  inline void* \n+  _CPP_strcpy_capture(char* __s1, char const* __s2)\n+  { return strcpy(__s1, __s2); }\n+\n+  inline char* \n+  _CPP_strncpy_capture(char* __s1, char const* __s2, size_t __n)\n+  { return strncpy(__s1, __s2, __n); }\n+\n+  inline char* \n+  _CPP_strcat_capture(char* __s1, char const* __s2)\n+  { return strcat(__s1, __s2); }\n+\n+  inline char* \n+  _CPP_strncat_capture(char* __s1, char const* __s2, size_t __n)\n+  { return strncat(__s1, __s2, __n); }\n+\n+  inline int \n+  _CPP_memcmp_capture(void const* __s1, void const* __s2, size_t __n)\n+  { return memcmp(__s1, __s2, __n); }\n+\n+  inline int \n+  _CPP_strcmp_capture(char const* __s1, char const* __s2)\n+  { return strcmp(__s1, __s2); }\n+\n+  inline int \n+  _CPP_strcoll_capture(char const* __s1, char const* __s2)\n+  { return strcoll(__s1, __s2); }\n+\n+  inline int \n+  _CPP_strncmp_capture(char const* __s1, char const* __s2, size_t __n)\n+  { return strncmp(__s1, __s2, __n); }\n+\n+  inline size_t \n+  _CPP_strxfrm_capture(char* __b, char const* __s, size_t __n)\n+  { return strxfrm(__b, __s, __n); }\n+\n+  inline void* \n+  _CPP_memchr_capture(void const* __s1, int __c, size_t __n)\n+  { return memchr(__s1, __c, __n); }\n+\n+  inline char* \n+  _CPP_strchr_capture(char const* __s1, int __c)\n+  { return strchr(__s1, __c); }\n+\n+  inline size_t \n+  _CPP_strcspn_capture(char const* __s1, char const* __s2)\n+  { return strcspn(__s1, __s2); }\n+\n+  inline char* \n+  _CPP_strpbrk_capture(char const* __s1, char const* __s2)\n+  { return strpbrk(__s1, __s2); }\n+\n+  inline char* \n+  _CPP_strrchr_capture(char const* __s1, int __c)\n+  { return strrchr(__s1, __c); }\n+\n+  inline size_t \n+  _CPP_strspn_capture(char const* __s1, char const* __s2)\n+  { return strspn(__s1, __s2); }\n+\n+  inline char* \n+  _CPP_strstr_capture(char const* __s1, char const* __s2)\n+  { return strstr(__s1, __s2); }\n+\n+  inline char* \n+  _CPP_strtok_capture(char* __s1, char const* __s2)\n+  { return strtok(__s1, __s2); }\n+\n+  inline void* \n+  _CPP_memset_capture(void* __s, int __c, size_t __n)\n+  { return memset(__s, __c, __n); }\n+\n+  // inline char* \n+  // _CPP_strerror_capture(int __num)\n+  // { return strerror(__num); }\n+\n+  inline size_t \n+  _CPP_strlen_capture(char const* __s)\n+  { return strlen(__s); }\n+} // namespace _C_legacy\n+\n # undef memcpy\n # undef memmove\n # undef strcpy\n@@ -127,110 +162,116 @@\n # undef strerror\n # undef strlen\n \n-  namespace _C_legacy {\n-    namespace _C_shadow {\n-    }\n-  }\n-  namespace std {\n-\n-    // Redefine most of these inline.  Note that the \n-    // C++ definition differs from C in some cases.\n-\n-    inline void* memcpy(void* __s1, void const* __s2, size_t __n)\n-      { return ::_C_legacy::_CPP_memcpy_capture(__s1,__s2,__n); }\n-    inline void* memmove(void* __s1, void const* __s2, size_t __n)\n-      { return ::_C_legacy::_CPP_memmove_capture(__s1,__s2,__n); }\n-    inline void* strcpy(char* __s1, char const* __s2)\n-      { return ::_C_legacy::_CPP_strcpy_capture(__s1,__s2); }\n-    inline char* strncpy(char* __s1, char const* __s2, size_t __n)\n-      { return ::_C_legacy::_CPP_strncpy_capture(__s1,__s2,__n); }\n-    inline char* strcat(char* __s1, char const* __s2)\n-      { return ::_C_legacy::_CPP_strcat_capture(__s1,__s2); }\n-    inline char* strncat(char* __s1, char const* __s2, size_t __n)\n-      { return ::_C_legacy::_CPP_strncat_capture(__s1,__s2,__n); }\n-    inline int memcmp(void const* __s1, \n-\t\t      void const* __s2, size_t __n)\n-      { return ::_C_legacy::_CPP_memcmp_capture(__s1,__s2,__n); }\n-    inline int strcmp(char const* __s1, char const* __s2)\n-      { return ::_C_legacy::_CPP_strcmp_capture(__s1,__s2); }\n-    inline int strcoll(char const* __s1, char const* __s2)\n-      { return ::_C_legacy::_CPP_strcoll_capture(__s1,__s2); }\n-    inline int strncmp(char const* __s1, \n-\t\t                    char const* __s2, size_t __n)\n-      { return ::_C_legacy::_CPP_strncmp_capture(__s1,__s2,__n); }\n-    inline size_t strxfrm(char* __b, char const* __s, size_t __n)\n-      { return ::_C_legacy::_CPP_strxfrm_capture(__b,__s,__n); }\n-\n-    inline void const* memchr(void const* __s1, int __c, size_t __n)\n-      { return ::_C_legacy::_CPP_memchr_capture(__s1,__c,__n); }\n-    inline       void* memchr(      void* __s1, int __c, size_t __n)\n-      { return ::_C_legacy::_CPP_memchr_capture(__s1,__c,__n); }\n-\n-    inline char const* strchr(char const* __s1, int __c)\n-      { return ::_C_legacy::_CPP_strchr_capture(__s1,__c); }\n-    inline       char* strchr(      char* __s1, int __c)\n-      { return ::_C_legacy::_CPP_strchr_capture(__s1,__c); }\n-\n-    inline size_t strcspn(char const* __s1, char const* __s2)\n-      { return ::_C_legacy::_CPP_strcspn_capture(__s1,__s2); }\n-\n-    inline char const* strpbrk(char const* __s1, char const* __s2)\n-      { return ::_C_legacy::_CPP_strpbrk_capture(__s1,__s2); }\n-    inline       char* strpbrk(      char* __s1, char const* __s2)\n-      { return ::_C_legacy::_CPP_strpbrk_capture(__s1,__s2); }\n-\n-    inline char const* strrchr(char const* __s1, int __c)\n-      { return ::_C_legacy::_CPP_strrchr_capture(__s1,__c); }\n-    inline       char* strrchr(      char* __s1, int __c)\n-      { return ::_C_legacy::_CPP_strrchr_capture(__s1,__c); }\n-\n-    inline size_t strspn(char const* __s1, char const* __s2)\n-      { return ::_C_legacy::_CPP_strspn_capture(__s1,__s2); }\n-\n-    inline char const* strstr(char const* __s1, char const* __s2)\n-      { return ::_C_legacy::_CPP_strstr_capture(__s1,__s2); }\n-    inline       char* strstr(      char* __s1, char const* __s2)\n-      { return ::_C_legacy::_CPP_strstr_capture(__s1,__s2); }\n-\n-    inline char* strtok(char* __s1, char const* __s2)\n-      { return ::_C_legacy::_CPP_strtok_capture(__s1,__s2); }\n-    inline void* memset(void* __s, int __c, size_t __n)\n-      { return ::_C_legacy::_CPP_memset_capture(__s,__c,__n); }\n-\n-    using ::_C_legacy::strerror;\n-\n-    inline size_t strlen(char const* __s)\n-      { return ::_C_legacy::_CPP_strlen_capture(__s); }\n-\n-  } // close namespace std::\n-  \n-  namespace _C_legacy {\n-    namespace _C_shadow {\n-      // adopt names back into C\n-      using ::std::memcpy;\n-      using ::std::memmove;\n-      using ::std::strcpy;\n-      using ::std::strncpy;\n-      using ::std::strcat;\n-      using ::std::strncat;\n-      using ::std::memcmp;\n-      using ::std::strcmp;\n-      using ::std::strcoll;\n-      using ::std::strncmp;\n-      using ::std::strxfrm;\n-      using ::std::memchr;\n-      using ::std::strchr;\n-      using ::std::strcspn;\n-      using ::std::strpbrk;\n-      using ::std::strrchr;\n-      using ::std::strspn;\n-      using ::std::strstr;\n-      using ::std::strtok;\n-      using ::std::memset;\n-      // using ::std::strerror;\n-      using ::std::strlen;\n-    }\n-  }\n+namespace std {\n+  // Redefine most of these inline.  Note that the \n+  // C++ definition differs from C in some cases.\n+  inline void* \n+  memcpy(void* __s1, void const* __s2, size_t __n)\n+  { return _C_legacy::_CPP_memcpy_capture(__s1, __s2, __n); }\n+\n+  inline void* \n+  memmove(void* __s1, void const* __s2, size_t __n)\n+  { return _C_legacy::_CPP_memmove_capture(__s1, __s2, __n); }\n+\n+  inline void* \n+  strcpy(char* __s1, char const* __s2)\n+  { return _C_legacy::_CPP_strcpy_capture(__s1, __s2); }\n+\n+  inline char* \n+  strncpy(char* __s1, char const* __s2, size_t __n)\n+  { return _C_legacy::_CPP_strncpy_capture(__s1, __s2, __n); }\n+\n+  inline char* \n+  strcat(char* __s1, char const* __s2)\n+  { return _C_legacy::_CPP_strcat_capture(__s1, __s2); }\n+\n+  inline char* \n+  strncat(char* __s1, char const* __s2, size_t __n)\n+  { return _C_legacy::_CPP_strncat_capture(__s1, __s2, __n); }\n+\n+  inline int \n+  memcmp(void const* __s1, void const* __s2, size_t __n)\n+  { return _C_legacy::_CPP_memcmp_capture(__s1, __s2, __n); }\n+\n+  inline int \n+  strcmp(char const* __s1, char const* __s2)\n+  { return _C_legacy::_CPP_strcmp_capture(__s1, __s2); }\n+\n+  inline int \n+  strcoll(char const* __s1, char const* __s2)\n+  { return _C_legacy::_CPP_strcoll_capture(__s1, __s2); }\n+\n+  inline int \n+  strncmp(char const* __s1, char const* __s2, size_t __n)\n+  { return _C_legacy::_CPP_strncmp_capture(__s1, __s2, __n); }\n+\n+  inline size_t \n+  strxfrm(char* __b, char const* __s, size_t __n)\n+  { return _C_legacy::_CPP_strxfrm_capture(__b, __s, __n); }\n+\n+  inline void \n+  const* memchr(void const* __s1, int __c, size_t __n)\n+  { return _C_legacy::_CPP_memchr_capture(__s1, __c, __n); }\n+\n+  inline void* \n+  memchr(void* __s1, int __c, size_t __n)\n+  { return _C_legacy::_CPP_memchr_capture(__s1, __c, __n); }\n+\n+  inline char const* \n+  strchr(char const* __s1, int __c)\n+  { return _C_legacy::_CPP_strchr_capture(__s1, __c); }\n+\n+  inline char*\n+  strchr(char* __s1, int __c)\n+  { return _C_legacy::_CPP_strchr_capture(__s1, __c); }\n+\n+  inline size_t \n+  strcspn(char const* __s1, char const* __s2)\n+  { return _C_legacy::_CPP_strcspn_capture(__s1, __s2); }\n+\n+  inline char const* \n+  strpbrk(char const* __s1, char const* __s2)\n+  { return _C_legacy::_CPP_strpbrk_capture(__s1, __s2); }\n+\n+  inline char* \n+  strpbrk(char* __s1, char const* __s2)\n+  { return _C_legacy::_CPP_strpbrk_capture(__s1, __s2); }\n+\n+  inline char const* \n+  strrchr(char const* __s1, int __c)\n+  { return _C_legacy::_CPP_strrchr_capture(__s1, __c); }\n+\n+  inline char* \n+  strrchr(char* __s1, int __c)\n+  { return _C_legacy::_CPP_strrchr_capture(__s1, __c); }\n+\n+  inline size_t \n+  strspn(char const* __s1, char const* __s2)\n+  { return _C_legacy::_CPP_strspn_capture(__s1, __s2); }\n+\n+  inline char const* \n+  strstr(char const* __s1, char const* __s2)\n+  { return _C_legacy::_CPP_strstr_capture(__s1, __s2); }\n+\n+  inline char* \n+  strstr(char* __s1, char const* __s2)\n+  { return _C_legacy::_CPP_strstr_capture(__s1, __s2); }\n+\n+  inline char* \n+  strtok(char* __s1, char const* __s2)\n+  { return _C_legacy::_CPP_strtok_capture(__s1, __s2); }\n+\n+  inline void* \n+  memset(void* __s, int __c, size_t __n)\n+  { return _C_legacy::_CPP_memset_capture(__s, __c, __n); }\n+\n+  using _C_legacy::strerror;\n+\n+  inline size_t \n+  strlen(char const* __s)\n+  { return _C_legacy::_CPP_strlen_capture(__s); }\n+\n+} // namespace std\n \n # undef _IN_C_LEGACY_\n "}, {"sha": "44709f0238fc9e202454a48c239ae07d15a71a9a", "filename": "libstdc++-v3/shadow/bits/std_ctime.h", "status": "modified", "additions": 50, "deletions": 71, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_ctime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_ctime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_ctime.h?ref=0517cb9903a890ecd768fae57ca0356bf901da35", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- header wrapper.\n \n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -34,30 +34,28 @@\n #ifndef _CPP_CTIME\n #define _CPP_CTIME 1\n \n-# include <bits/std_cstddef.h>  /* pick up size_t, NULL */\n+# include <bits/std_cstddef.h>  \n \n-  namespace _C_legacy {\n-    extern \"C\" {\n+namespace _C_legacy {\n+  extern \"C\" {\n #     define _IN_C_LEGACY_\n #     pragma GCC system_header\n+\n+      // XXX\n+      // glibc 2.1.x time.h is on crack\n+#     undef __need_time_t\n+#     undef __need_clock_t\n+#     undef __need_timespec\n+\n #     include_next <time.h>\n-    }\n-    inline clock_t _CPP_CLOCKS_PER_SEC_capture() \n-      { return CLOCKS_PER_SEC; }\n-    // typedef size_t    _CPP_size_t_capture;  // handled in <cstddef>\n-    typedef clock_t   _CPP_clock_t_capture;\n-    typedef time_t    _CPP_time_t_capture;\n-    typedef struct tm _CPP_tm_capture;\n-\n-    namespace _C_shadow { }\n-  } // close namespace ::_C_legacy::\n-\n-// #  undef  NULL\n-// #  define NULL 0  /* handled in <cstddef> */\n-#  undef  CLOCKS_PER_SEC\n-#  define CLOCKS_PER_SEC (::_C_legacy::_CPP_CLOCKS_PER_SEC_capture())\n-\n-#  undef size_t  /* handled in <cstddef> */\n+  }\n+\n+  typedef clock_t\t_CPP_clock_t_capture;\n+  typedef time_t    \t_CPP_time_t_capture;\n+  typedef tm \t\t_CPP_tm_capture;\n+\n+} // namespace _C_legacy\n+\n #  undef clock_t\n #  undef time_t\n #  undef tm\n@@ -71,57 +69,38 @@\n #  undef localtime\n #  undef strftime\n \n-  namespace _C_legacy {\n-    namespace _C_shadow {\n-      // typedef ::_C_legacy::_CPP_size_t_capture  size_t;\n-      typedef ::_C_legacy::_CPP_clock_t_capture  clock_t;\n-      typedef ::_C_legacy::_CPP_time_t_capture   time_t;\n-    }\n-  }\n-  namespace std {\n-\n-    // Adopt C names into std::\n-    // using ::_C_legacy::_C_shadow::size_t;  \n-    using ::_C_legacy::_C_shadow::clock_t;  \n-    using ::_C_legacy::_C_shadow::time_t;\n-\n-    // note: still a POD type:\n-    struct tm  : ::_C_legacy::_CPP_tm_capture  { };\n-\n-    using ::_C_legacy::clock;\n-    using ::_C_legacy::difftime;\n-    using ::_C_legacy::mktime;\n-    using ::_C_legacy::time;\n-\n-    inline char* asctime(const tm* __tp) \n-      { return ::_C_legacy::asctime(\n-          static_cast< ::_C_legacy::_CPP_tm_capture const*>(__tp)); }\n-\n-    using ::_C_legacy::ctime;\n-\n-    inline tm* gmtime(time_t const* __tp) \n-      { return reinterpret_cast<tm*>(::_C_legacy::gmtime(__tp)); }\n-\n-    inline tm* localtime(const time_t* __tp) \n-      { return reinterpret_cast<tm*>(::_C_legacy::localtime(__tp)); } \n-\n-    inline size_t strftime(char* __buf, size_t __maxsz, \n-                           char const* __fmt, tm const* __tp) \n-      { return ::_C_legacy::strftime(__buf, __maxsz, __fmt,\n-                 static_cast< ::_C_legacy::_CPP_tm_capture const*>(__tp)); }\n-\n-  } // close namespace std::\n+namespace std {\n+\n+  // Adopt C names into std::\n+  typedef _C_legacy::_CPP_clock_t_capture  clock_t;\n+  typedef _C_legacy::_CPP_time_t_capture   time_t;\n+  struct tm : _C_legacy::_CPP_tm_capture  { };\n+\n+  using _C_legacy::clock;\n+  using _C_legacy::difftime;\n+  using _C_legacy::mktime;\n+  using _C_legacy::time;\n+  using _C_legacy::ctime;\n+\n+  inline char* \n+  asctime(const tm* __t) \n+  { return _C_legacy::asctime(static_cast<_C_legacy::_CPP_tm_capture const*>(__t)); }\n+\n+  inline tm* \n+  gmtime(time_t const* __tp) \n+  { return reinterpret_cast<tm*>(_C_legacy::gmtime(__tp)); }\n+\n+  inline tm* \n+  localtime(const time_t* __tp) \n+  { return reinterpret_cast<tm*>(_C_legacy::localtime(__tp)); } \n+    \n+  inline size_t \n+  strftime(char* __buf, size_t __maxsz, char const* __fmt, tm const* __tp) \n+  { return _C_legacy::strftime(__buf, __maxsz, __fmt,\n+\t       \t       static_cast<_C_legacy::_CPP_tm_capture const*>(__tp)); }\n+\n+} // namespace std\n   \n-  namespace _C_legacy {\n-    namespace _C_shadow {\n-      using ::std::tm;\n-      using ::std::asctime;\n-      using ::std::gmtime;\n-      using ::std::localtime;\n-      using ::std::strftime;\n-    }\n-  }\n-\n # undef _IN_C_LEGACY_\n \n #endif"}, {"sha": "829e625eb09dc3979857a1ef069a6a6ebf932a53", "filename": "libstdc++-v3/shadow/bits/std_cwchar.h", "status": "modified", "additions": 195, "deletions": 195, "changes": 390, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cwchar.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cwchar.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cwchar.h?ref=0517cb9903a890ecd768fae57ca0356bf901da35", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- header wrapper.\n \n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -30,252 +30,252 @@\n //\n // ISO C++ 14882: 21\n \n-// XXX: this file still needs hackery for system version dependencies\n-\n #ifndef _CPP_CWCHAR\n # define _CPP_CWCHAR 1\n \n-# include <bits/std_cstddef.h>  /* size_t, NULL */\n-# include <bits/std_cstdio.h>   /* FILE */\n-# include <bits/std_ctime.h>    /* struct tm */\n-# include <bits/std_cstring.h>  /* memset */\n+# include <bits/std_cstdio.h> \n \n-  namespace _C_legacy {\n-    extern \"C\" {\n+namespace _C_legacy {\n+  extern \"C\" {\n #     define _IN_C_LEGACY_\n #     pragma GCC system_header\n #     include_next <wchar.h>\n-    }\n-    // NULL, size_t handled in <cstddef>\n-\n-    // wchar_t\n-    typedef wint_t _CPP_wint_t_capture;\n-    typedef mbstate_t _CPP_mbstate_t_capture;\n-    const wint_t _CPP_WEOF_capture = (wint_t)(WEOF);\n-\n-#if 0 /* XXX glibc-2.0 does not implement these. */\n-    inline wint_t _CPP_getwc_capture(FILE* __f)\n-      { return getwc(__f); }\n-    inline wint_t _CPP_getwchar_capture()\n-      { return getwchar(); }\n-    inline wint_t _CPP_putwc_capture(wint_t __c, FILE* __f)\n-      { return putwc(__c,__f); }\n-    inline wint_t _CPP_putwchar_capture(wint_t __c)\n-      { return putwchar(__c); }\n-#endif\n+  }\n+\n+  typedef wchar_t \t_CPP_wchar_t_capture;\n+  typedef wint_t \t_CPP_wint_t_capture;\n+  typedef mbstate_t \t_CPP_mbstate_t_capture;\n+\n+#if 0\n+  // XXX\n+  inline int \n+  fwprintf(FILE* __stream, const wchar_t* __format, ...); \n+\n+  inline int \n+  fwscanf(FILE* __stream, const wchar_t* __format, ...); \n+\n+  inline int \n+  vfwprintf(FILE* __stream, const wchar_t* __format, va_list __arg); \n+\n+  inline int \n+  vfwscanf(FILE* __stream, const wchar_t* __format, va_list __arg);\n+\n+  inline wint_t \n+  _CPP_fgetwc_capture(FILE* __stream)\n+  { return fgetwc(__stream); }\n \n-    namespace _C_shadow { }\n-  } // close namespace ::_C_legacy::\n+  inline wchar_t*\n+  _CPP_fgetws_capture(wchar_t* __s, int __n, FILE* __stream)\n+  { return fgetws(__s, __n, __stream); }\n+\n+  inline wint_t \n+  _CPP_fputwc_capture(wchar_t __c, FILE* __stream)\n+  { return fputwc(__c, __stream); }\n+\n+  inline int \n+  _CPP_fputws_capture(const wchar_t* __s, FILE* __stream)\n+  { return fputws(__s, __stream); }\n+\n+  inline int \n+  _CPP_fwide_capture(FILE* __stream, int __mode) \n+  { return fwide(__stream, __mode); }\n+\n+  inline wint_t \n+  _CPP_fgetwc_capture(FILE* __stream)\n+  { return fgetwc(__stream); }\n+\n+  inline wint_t \n+  _CPP_putwc_capture(wchar_t __c, FILE* __stream)\n+  { return putwc(__c, __stream); }\n+  \n+  inline wint_t \n+  _CPP_ungetwc_capture(wint_t __c, FILE* __stream)\n+  { return ungetwc(__c, __stream); }\n+#endif\n+} // namespace _C_legacy\n \n-// #  undef size_t  /* handled in <cstddef> */\n # undef wchar_t\n # undef wint_t\n # undef mbstate_t\n-# undef WEOF\n-# define WEOF ::_C_legacy::_CPP_WEOF_capture\n \n-// the following are not in glibc-2.0\n+# undef fwprintf\n+# undef fwscanf\n+# undef swprintf\n+# undef swscanf\n+# undef vfwprintf\n+# undef vfwscanf\n+# undef vswprintf\n+# undef vswscanf\n+# undef vwprintf\n+# undef vwscanf\n+# undef wprintf\n+# undef wscanf\n # undef fgetwc\n # undef fgetws\n # undef fputwc\n # undef fputws\n-# undef ungetwc\n+# undef fwide\n # undef getwc\n # undef getwchar\n # undef putwc\n # undef putwchar\n-# undef wprintf\n-# undef wsprintf\n-# undef wvsprintf\n-# undef wfsprintf\n-# undef wscanf\n-# undef wsscanf\n-# undef wvsscanf\n-# undef wfscanf\n-// XXX etc.\n-\n+# undef ungetwc\n+# undef wcstod\n+# undef wcstof\n+# undef wcstold\n+# undef wcstol\n+# undef wcstoll\n+# undef wcstoul\n+# undef wcstoull\n # undef wcscpy\n+# undef wcsncpy\n # undef wcscat\n-# undef wcscmp\n+# undef wcsncat\n+# undef wcsmp\n # undef wcscoll\n+# undef wcsncmp\n # undef wcsxfrm\n-# undef wcsdup\n # undef wcschr\n # undef wcscspn\n+# undef wcslen\n # undef wcspbrk\n+# undef wcsrchr\n+# undef wcsspn\n # undef wcsstr\n # undef wcstok\n-# undef wcslen\n # undef wmemchr\n # undef wmemcmp\n # undef wmemcpy\n # undef wmemmove\n # undef wmemset\n+# undef wcsftime\n # undef btowc\n # undef wctob\n # undef mbsinit\n+# undef mbrlen\n # undef mbrtowc\n # undef wcrtomb\n-# undef mbrlen\n # undef mbsrtowcs\n # undef wcsrtombs\n-#ifdef __USE_GNU\n-# undef mbsnrtowcs\n-# undef mbsnrtombs\n-# undef wcwidth\n-# undef wcswidth\n-# undef wcscmpy\n-#endif\n-# undef wcstod\n-# undef wcstol\n-# undef wcstoul\n-# undef wcsncat\n-# undef wcsncmp\n-# undef wcsncpy\n-# undef wcsrchr\n-# undef wcsspn\n \n-  // XXX a bunch more names are required under C89 Amendment 1, \n-  // but they are not uniformly implemented.\n-\n-  // XXX the following are not supposed to be defined in <wchar.h>, \n-  //  but Sun does anyway.\n-# undef iswalpha\n-# undef iswupper\n-# undef iswlower\n-# undef iswdigit\n-# undef iswxdigit\n-# undef iswalnum\n-# undef iswspace\n-# undef iswpunct\n-# undef iswprint\n-# undef iswgraph\n-# undef iswcntrl\n-# undef iswctype\n-# undef towlower\n-# undef towupper\n-# undef wctype_t\n-# undef wctype\n-# undef wcspbrk\n-# undef wcswcs\n+namespace std {\n \n-  namespace _C_legacy {\n-    namespace _C_shadow {\n-      typedef ::_C_legacy::_CPP_wint_t_capture wint_t; \n-      // typedef ::_C_legacy::_CPP_wctype_t_capture wctype_t;\n-    }\n-  }\n-  namespace std {\n-\n-    // using ::_C_legacy::wchar_t;\n-    using ::_C_legacy::_C_shadow::wint_t;\n-    // using ::_C_legacy::WEOF;\n-\n-   // XXX this might better be replaced with one unrelated to the C mbstate_t.\n-\n-   struct mbstate_t { \n-     _C_legacy::_CPP_mbstate_t_capture _M_dum; \n-     mbstate_t() { std::memset(&_M_dum,0,sizeof(_M_dum)); }\n-   };\n-\n-#if 0 /* glibc-2.0 does not implement these. */\n-    inline wint_t fgetwc(FILE* __f)\n-      { return ::_C_legacy::fgetwc(__f); }\n-    inline wchar_t* fgetws(wchar_t* __s, int __n, FILE* __f)\n-      { return ::_C_legacy::fgetws(__s,__n,__f); }\n-    inline wint_t fputwc(wint_t __c, FILE* __f)\n-      { return ::_C_legacy::fputwc(__c,__f); }\n-    inline int fputws(const wchar_t* __s, FILE* __f)\n-      { return ::_C_legacy::fputws(__s,__f); }\n-    inline wint_t ungetwc(wint_t __c, FILE* __f)\n-      { return ::_C_legacy::ungetwc(__c,__f); }\n-\n-    inline wint_t getwc(FILE* __f)\n-      { return ::_C_legacy::_CPP_getwc_capture(__f); }\n-    inline wint_t getwchar()\n-      { return ::_C_legacy::_CPP_getwchar_capture(); }\n-    inline wint_t putwc(wint_t __c, FILE* __f)\n-      { return ::_C_legacy::_CPP_putwc_capture(__c,__f); }\n-    inline wint_t putwchar(wint_t __c)\n-      { return ::_C_legacy::_CPP_putwchar_capture(__c); }\n-\n-    // similarly wprintf etc.\n-#endif\n+  typedef _C_legacy::_CPP_wchar_t_capture wchar_t; \n+  typedef _C_legacy::_CPP_wint_t_capture wint_t; \n+  typedef _C_legacy::_CPP_mbstate_t_capture mbstate_t;\n \n-    using ::_C_legacy::wcscpy;\n-    using ::_C_legacy::wcscat;\n-    using ::_C_legacy::wcscmp;\n-    using ::_C_legacy::wcscoll;\n-    using ::_C_legacy::wcsxfrm;\n-    using ::_C_legacy::wcschr;\n-    using ::_C_legacy::wcscspn;\n-    using ::_C_legacy::wcspbrk;\n-    using ::_C_legacy::wcstok;\n-    using ::_C_legacy::wcslen;\n-#ifndef __sun\n-#ifdef __USE_GNU\n-    using ::_C_legacy::wcsdup;\n+#if 0\n+  using _C_legacy::swprintf;\n+  using _C_legacy::swscanf;\n+  using _C_legacy::vswprintf;\n+  using _C_legacy::vswscanf;\n+  using _C_legacy::vwprintf;\n+  using _C_legacy::vwscanf;\n+  using _C_legacy::wprintf;\n+  using _C_legacy::wscanf;\n+  using _C_legacy::getwchar;\n+  using _C_legacy::putwchar;\n #endif\n-    using ::_C_legacy::wcsstr;\n-    using ::_C_legacy::wmemchr;\n-    using ::_C_legacy::wmemcmp;\n-    using ::_C_legacy::wmemcpy;\n-    using ::_C_legacy::wmemmove;\n-    using ::_C_legacy::wmemset;\n-    using ::_C_legacy::btowc;\n-    using ::_C_legacy::wctob;\n-    using ::_C_legacy::mbsinit;\n-    using ::_C_legacy::mbrtowc;\n-    using ::_C_legacy::wcrtomb;\n-    using ::_C_legacy::mbrlen;\n-#endif\n-#ifdef __USE_GNU\n-    using ::_C_legacy::mbsrtowcs;\n-    using ::_C_legacy::wcsrtombs;\n-    using ::_C_legacy::mbsnrtowcs;\n-    using ::_C_legacy::mbsnrtombs;\n-    using ::_C_legacy::wcscmpy\n-    using ::_C_legacy::wcwidth;\n-    using ::_C_legacy::wcswidth;\n+\n+  using _C_legacy::wcstod;\n+  using _C_legacy::wcstof;\n+  using _C_legacy::wcstold;\n+  using _C_legacy::wcstol;\n+  using _C_legacy::wcstoll;\n+  using _C_legacy::wcstoul;\n+  using _C_legacy::wcstoull;\n+  using _C_legacy::wcscpy;\n+  using _C_legacy::wcsncpy;\n+  using _C_legacy::wcscat;\n+  using _C_legacy::wcsncat;\n+\n+#if 0\n+  using _C_legacy::wcsmp;\n #endif\n-    using ::_C_legacy::wcstod;\n-    using ::_C_legacy::wcstol;\n-    using ::_C_legacy::wcstoul;\n-    using ::_C_legacy::wcsncat;\n-    using ::_C_legacy::wcsncmp;\n-    using ::_C_legacy::wcsncpy;\n-    using ::_C_legacy::wcsrchr;\n-    using ::_C_legacy::wcsspn;\n-    // using ::_C_legacy::wcswcs;\n-\n-#if 0  /* not implemented in glibc-2 */\n-    inline size_t wcsftime(wchar_t* __s, size_t __n, \n-\t\t           char const* __fmt, struct tm const* __tmb)\n-      { return ::_C_legacy::wcsftime(__s,__n,__fmt,__tmb); }\n-\n-    using ::_C_legacy::wctype;\n+\n+  using _C_legacy::wcscoll;\n+  using _C_legacy::wcsncmp;\n+  using _C_legacy::wcsxfrm;\n+  using _C_legacy::wcschr;\n+  using _C_legacy::wcscspn;\n+  using _C_legacy::wcslen;\n+  using _C_legacy::wcspbrk;\n+  using _C_legacy::wcsrchr;\n+  using _C_legacy::wcsspn;\n+  using _C_legacy::wcsstr;\n+  using _C_legacy::wcstok;\n+  using _C_legacy::wmemchr;\n+  using _C_legacy::wmemcmp;\n+  using _C_legacy::wmemcpy;\n+  using _C_legacy::wmemmove;\n+  using _C_legacy::wmemset;\n+\n+#if 0\n+  using _C_legacy::wcsftime;\n #endif\n \n-  }\n+  using _C_legacy::btowc;\n+  using _C_legacy::wctob;\n+  using _C_legacy::mbsinit;\n+  using _C_legacy::mbrlen;\n+  using _C_legacy::mbrtowc;\n+  using _C_legacy::wcrtomb;\n+  using _C_legacy::mbsrtowcs;\n+  using _C_legacy::wcsrtombs;\n+\n+#if 0\n+  // XXX\n+  inline int \n+  fwprintf(FILE* __stream, const wchar_t* __format, ...); \n+\n+  inline int \n+  fwscanf(FILE* __stream, const wchar_t* __format, ...); \n+\n+  inline int \n+  vfwprintf(FILE* __stream, const wchar_t* __format, va_list __arg); \n+\n+  inline int \n+  vfwscanf(FILE* __stream, const wchar_t* __format, va_list __arg);\n+\n+  inline wint_t \n+  fgetwc(FILE* __stream)\n+  { return _C_legacy::_CPP_fgetwc_capture(__stream); }\n+\n+  inline wchar_t*\n+  fgetws(wchar_t* __s, int __n, FILE* __stream) \n+  { return _C_legacy::_CPP_fgetws_capture(__s, __n, __stream); }\n+\n+  inline wint_t \n+  fputwc(wchar_t __c, FILE* __stream)\n+  { return _C_legacy::_CPP_fputwc_capture(__c, __stream); }\n+\n+  inline int \n+  fputws(const wchar_t* __s, FILE* __stream)\n+  { return _C_legacy::_CPP_fputws_capture(__s, __stream); }\n+\n+  inline int \n+  fwide(FILE* __stream, int __mode)\n+  { return _C_legacy::_CPP_fwide_capture(__stream, __mode); }\n+\n+  inline wint_t \n+  getwc(FILE* __stream)\n+  { return _C_legacy::_CPP_getwc_capture(__stream); }\n+\n+  inline wint_t \n+  putwc(wchar_t __c, FILE* __stream)\n+  { return _C_legacy::_CPP_putwc_capture(__c, __stream); }\n   \n-  namespace _C_legacy {\n-    namespace _C_shadow {\n-#if 0 /* XXX glibc-2.0 does not implement these. */\n-      using ::std::fgetwc;\n-      using ::std::fgetws;\n-      using ::std::fputwc;\n-      using ::std::fputws;\n-      using ::std::ungetwc;\n-      using ::std::getwc;\n-      using ::std::getwchar;\n-      using ::std::putwc;\n-      using ::std::putwchar;\n-      using ::std::wcsftime;\n-      // XXX also wprintf etc.\n+  inline wint_t \n+  ungetwc(wint_t __c, FILE* __stream)\n+  { return _C_legacy::_CPP_ungetwc_capture(__c, __stream); }\n #endif\n-    }\n-  }\n+}\n \n # undef _IN_C_LEGACY_\n \n #endif\n+\n+\n+\n+\n+"}, {"sha": "1a6a64282fd96976d140ff0ba36c1b0cd1d6cae2", "filename": "libstdc++-v3/shadow/bits/std_cwctype.h", "status": "modified", "additions": 67, "deletions": 56, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cwctype.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cwctype.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cwctype.h?ref=0517cb9903a890ecd768fae57ca0356bf901da35", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- header wrapper.\n \n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -28,36 +28,25 @@\n // the GNU General Public License.\n \n //\n-// ISO C++ 14882: ???\n+// ISO C++ 14882: \n //\n \n-// XXX this is not complete\n-\n #ifndef _CPP_CWCTYPE\n #define _CPP_CWCTYPE 1\n \n-# include <bits/std_cwchar.h>  /* pick up wint_t, WEOF */\n+# include <bits/std_cwchar.h>  \n \n-  namespace _C_legacy {\n-    extern \"C\" {\n+namespace _C_legacy {\n+  extern \"C\" {\n #     define _IN_C_LEGACY_\n #     pragma GCC system_header\n #     include_next <wctype.h>\n-    }\n-    typedef wctype_t _CPP_wctype_t_capture;\n-    typedef wctrans_t _CPP_wctrans_t_capture;\n-\n-    // XXX probably should capture defs of the \"is\" functions.\n+  }\n+} // namespace _C_legacy\n \n-    namespace _C_shadow { }\n-  } // close namespace ::_C_legacy::\n \n-# undef size_t  /* handled in <cstddef> */\n-# undef wchar_t\n-# undef wint_t\n # undef wctype_t\n # undef wctrans_t\n-// # undef WEOF\n # undef iswalpha\n # undef iswupper\n # undef iswlower\n@@ -70,49 +59,71 @@\n # undef iswgraph\n # undef iswcntrl\n # undef iswctype\n+# undef towctrans\n # undef towlower\n # undef towupper\n+# undef wctrans\n+# undef wctype\n \n-// SunOS macros\n-# undef iswascii\n-# undef iscodeset0\n-# undef iscodeset1\n-# undef iscodeset2\n-# undef iscodeset3\n-\n-  namespace _C_legacy {\n-    namespace _C_shadow {\n-      typedef ::_C_legacy::_CPP_wctype_t_capture wctype_t;\n-      typedef ::_C_legacy::_CPP_wctrans_t_capture wctrans_t;\n-    }\n-  }\n-  namespace std {\n-    using ::_C_legacy::_C_shadow::wctype_t;\n-    using ::_C_legacy::_C_shadow::wctrans_t;\n-\n-    // XXX probably should capture these to inlines.\n-    using ::_C_legacy::iswalpha;\n-    using ::_C_legacy::iswupper;\n-    using ::_C_legacy::iswlower;\n-    using ::_C_legacy::iswdigit;\n-    using ::_C_legacy::iswxdigit;\n-    using ::_C_legacy::iswalnum;\n-    using ::_C_legacy::iswspace;\n-    using ::_C_legacy::iswpunct;\n-    using ::_C_legacy::iswprint;\n-    using ::_C_legacy::iswgraph;\n-    using ::_C_legacy::iswcntrl;\n-    using ::_C_legacy::iswctype;\n-    using ::_C_legacy::towlower;\n-    using ::_C_legacy::towupper;\n-\n-  } // close namespace std::\n+namespace std {\n+  using _C_legacy::wctype_t;\n+  using _C_legacy::wctrans_t;\n+\n+  inline int \n+  iswalpha(wint_t __wc) { return _C_legacy::iswalpha(__wc); }\n+\n+  inline int \n+  iswupper(wint_t __wc) { return _C_legacy::iswupper(__wc); }\n+\n+  inline int \n+  iswlower(wint_t __wc) { return _C_legacy::iswlower(__wc); }\n+\n+  inline int \n+  iswdigit(wint_t __wc) { return _C_legacy::iswdigit(__wc); }\n+\n+  inline int \n+  iswxdigit(wint_t __wc) { return _C_legacy::iswxdigit(__wc); }\n+\n+  inline int \n+  iswalnum(wint_t __wc) { return _C_legacy::iswalnum(__wc); }\n+\n+  inline int \n+  iswspace(wint_t __wc) { return _C_legacy::iswspace(__wc); }\n+\n+  inline int \n+  iswpunct(wint_t __wc) { return _C_legacy::iswpunct(__wc); }\n+\n+  inline int \n+  iswprint(wint_t __wc) { return _C_legacy::iswprint(__wc); }\n+\n+  inline int \n+  iswgraph(wint_t __wc) { return _C_legacy::iswgraph(__wc); }\n+\n+  inline int \n+  iswcntrl(wint_t __wc) { return _C_legacy::iswcntrl(__wc); }\n+\n+  inline int \n+  towlower(wint_t __wc) { return _C_legacy::towlower(__wc); }\n+\n+  inline int \n+  towupper(wint_t __wc) { return _C_legacy::towupper(__wc); }\n+\n+  inline int \n+  iswctype(wint_t __wc, wctype_t __desc) \n+  { return _C_legacy::iswctype(__wc, __desc); }\n+\n+  inline wint_t \n+  towctrans(wint_t __wc, wctrans_t __desc)\n+  { return _C_legacy::towctrans (__wc, __desc); }\n   \n-  namespace _C_legacy {\n-    namespace _C_shadow {\n-    }\n-  }\n+  inline wctrans_t \n+  wctrans(const char *__property) { return _C_legacy::wctrans(__property); }\n+\n+  inline wctype_t \n+  wctype(char const* __property) { return _C_legacy::wctype(__property); }\n+} // namespace std\n \n # undef _IN_C_LEGACY_\n \n #endif\n+"}, {"sha": "e5da6e3f382de5c639a1987e34e5af87e6474580", "filename": "libstdc++-v3/shadow/bits/wrap_libio.h", "status": "modified", "additions": 6, "deletions": 27, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fwrap_libio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fwrap_libio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fwrap_libio.h?ref=0517cb9903a890ecd768fae57ca0356bf901da35", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- header wrapper.\n \n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -28,42 +28,21 @@\n // the GNU General Public License.\n \n //\n-// ISO C++ 14882: 20.5  Date and time\n+// ISO C++ 14882: 20.5 Extensions  \n //\n \n-// XXX incomplete\n-\n #ifndef _CPP_WRAP_LIBIO_H\n #define _CPP_WRAP_LIBIO_H 1\n \n-  namespace _C_legacy {\n-    extern \"C\" {\n+namespace _C_legacy {\n+  extern \"C\" {\n #     define _IN_C_LEGACY_\n #     pragma GCC system_header\n #     include_next <libio.h>\n-    }\n-\n-    namespace _C_shadow { }\n-  } // close namespace ::_C_legacy::\n-\n-// #  undef that\n-\n-  namespace _C_legacy {\n-    namespace _C_shadow {\n-      // typedef stuff\n-    }\n   }\n-  namespace std {\n-\n-    // using ::_C_legacy::stuff\n+} // namespace _C_legacy\n \n-  } // close namespace std::\n-  \n-  namespace _C_legacy {\n-    namespace _C_shadow {\n-      // using ::std::stuff\n-    }\n-  }\n+// NB: Don't bring elements from this non-standard header into namespace std.\n \n # undef _IN_C_LEGACY_\n "}, {"sha": "7dcea803ab527ef4d0e9f75e6a1c8a8f1b749fc4", "filename": "libstdc++-v3/shadow/ctype.h", "status": "modified", "additions": 34, "deletions": 21, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Fctype.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Fctype.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fctype.h?ref=0517cb9903a890ecd768fae57ca0356bf901da35", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- header wrapper.\n \n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -28,28 +28,41 @@\n // the GNU General Public License.\n \n \n-\n #ifndef  _INCLUDED_CPP_CTYPE_H_\n-# undef _SHADOW_NAME\n-# define _SHADOW_NAME <cctype>\n-# include <bits/generic_shadow.h>\n-# undef _SHADOW_NAME\n-\n-# ifndef _IN_C_LEGACY_\n-  using ::std::isalnum;\n-  using ::std::isalpha;\n-  using ::std::iscntrl;\n-  using ::std::isdigit;\n-  using ::std::isgraph;\n-  using ::std::islower;\n-  using ::std::isprint;\n-  using ::std::ispunct;\n-  using ::std::isspace;\n-  using ::std::isupper;\n-  using ::std::isxdigit;\n-  using ::std::tolower;\n-  using ::std::toupper;\n # define _INCLUDED_CPP_CTYPE_H_ 1\n+\n+# ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n+      // get out of the \"legacy\"\n+#error ctype.h\n+    } // close extern \"C\"\n+  }   // close namespace _C_legacy::\n+#  undef _IN_C_LEGACY_\n+#  define _CTYPE_NEED_C_LEGACY_\n # endif\n \n+# include <cctype>\n+\n+  // Expose global C names, including non-standard ones, but shadow\n+  // some names and types with the std:: C++ version.\n+  using std::isalnum;\n+  using std::isalpha;\n+  using std::iscntrl;\n+  using std::isdigit;\n+  using std::isgraph;\n+  using std::islower;\n+  using std::isprint;\n+  using std::ispunct;\n+  using std::isspace;\n+  using std::isupper;\n+  using std::isxdigit;\n+  using std::tolower;\n+  using std::toupper;\n+\n+# ifdef _CTYPE_NEED_C_LEGACY_\n+  // dive back into the \"swamp\"\n+  namespace _C_legacy {\n+    extern \"C\" {\n+#  define _IN_C_LEGACY_\n+#  undef _CTYPE_NEED_C_LEGACY_\n+# endif /* _CTYPE_NEED_C_LEGACY_ */\n #endif /* _INCLUDED_CPP_CTYPE_H_ */"}, {"sha": "f2e6aee6701524157b71bbf8eba3063c2266711c", "filename": "libstdc++-v3/shadow/errno.h", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Ferrno.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Ferrno.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Ferrno.h?ref=0517cb9903a890ecd768fae57ca0356bf901da35", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- header wrapper.\n \n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -30,8 +30,26 @@\n \n #ifndef  _INCLUDED_CPP_ERRNO_H_\n # define _INCLUDED_CPP_ERRNO_H_ 1\n-# undef _SHADOW_NAME\n-# define _SHADOW_NAME <cerrno>\n-# include <bits/generic_shadow.h>\n-# undef _SHADOW_NAME\n+\n+# ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n+      // get out of the \"legacy\"\n+    } // close extern \"C\"\n+  }   // close namespace _C_legacy::\n+#  undef _IN_C_LEGACY_\n+#  define _ERRNO_NEED_C_LEGACY_\n+# endif\n+\n+# include <cerrno>\n+\n+  // Expose global C names, including non-standard ones, but shadow\n+  // some names and types with the std:: C++ version.\n+  using std::errno;\n+\n+# ifdef _ERRNO_NEED_C_LEGACY_\n+  // dive back into the \"swamp\"\n+  namespace _C_legacy {\n+    extern \"C\" {\n+#  define _IN_C_LEGACY_\n+#  undef _ERRNO_NEED_C_LEGACY_\n+# endif /* _ERRNO_NEED_C_LEGACY_ */\n #endif /* _INCLUDED_CPP_ERRNO_H_ */"}, {"sha": "f52c5f5c9eb578316b18e6bacf1ac2e4b5a18d31", "filename": "libstdc++-v3/shadow/float.h", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Ffloat.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Ffloat.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Ffloat.h?ref=0517cb9903a890ecd768fae57ca0356bf901da35", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- header wrapper.\n \n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -28,11 +28,27 @@\n // the GNU General Public License.\n \n \n-\n #ifndef  _INCLUDED_CPP_FLOAT_H_\n # define _INCLUDED_CPP_FLOAT_H_ 1\n-# undef _SHADOW_NAME\n-# define _SHADOW_NAME <cfloat>\n-# include <bits/generic_shadow.h>\n-# undef _SHADOW_NAME\n+\n+# ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n+      // get out of the \"legacy\"\n+    } // close extern \"C\"\n+  }   // close namespace _C_legacy::\n+#  undef _IN_C_LEGACY_\n+#  define _FLOAT_NEED_C_LEGACY_\n+# endif\n+\n+# include <cfloat>\n+\n+  // Expose global C names, including non-standard ones, but shadow\n+  // some names and types with the std:: C++ version.\n+\n+# ifdef _FLOAT_NEED_C_LEGACY_\n+  // dive back into the \"swamp\"\n+  namespace _C_legacy {\n+    extern \"C\" {\n+#  define _IN_C_LEGACY_\n+#  undef _FLOAT_NEED_C_LEGACY_\n+# endif /* _FLOAT_NEED_C_LEGACY_ */\n #endif /* _INCLUDED_CPP_FLOAT_H_ */"}, {"sha": "2cafc7d88ebffa154757c6c9ede9e4cf1c9063da", "filename": "libstdc++-v3/shadow/libio.h", "status": "modified", "additions": 46, "deletions": 9, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Flibio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Flibio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Flibio.h?ref=0517cb9903a890ecd768fae57ca0356bf901da35", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- header wrapper.\n \n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// Copyright (C) 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -29,16 +29,53 @@\n \n \n #ifndef  _INCLUDED_CPP_LIBIO_H_\n+# define _INCLUDED_CPP_LIBIO_H_ 1\n \n-# undef _SHADOW_NAME\n-# define _SHADOW_NAME <bits/wrap_libio.h>\n-# include <bits/generic_shadow.h>\n-# undef _SHADOW_NAME\n+# ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n+      // get out of the \"legacy\"\n+    } // close extern \"C\"\n+  }   // close namespace _C_legacy::\n+#  undef _IN_C_LEGACY_\n+#  define _LIBIO_NEED_C_LEGACY_\n+# endif\n \n-# ifndef _IN_C_LEGACY_\n-  // using ::std::stuff\n+# include <bits/wrap_libio.h>\n \n-# define _INCLUDED_CPP_LIBIO_H_ 1\n-# endif\n+  // Expose global C names, including non-standard ones, but shadow\n+  // some names and types with the std:: C++ version.\n+\n+  // NB: Cannot use typedefs here to inject the names as the \"C\" headers\n+  // often include typedefs that include the keyword 'struct'\n+  using _C_legacy::_IO_pos_t;\n+  using _C_legacy::_IO_fpos_t;\n+  using _C_legacy::_IO_fpos64_t;\n+  using _C_legacy::_IO_size_t;\n+  using _C_legacy::_IO_ssize_t;\n+  using _C_legacy::_IO_off_t;\n+  using _C_legacy::_IO_off64_t;\n+  using _C_legacy::_IO_pid_t;\n+  using _C_legacy::_IO_uid_t;\n+  using _C_legacy::_IO_iconv_t;\n+  using _C_legacy::_IO_va_list;\n+  using _C_legacy::_IO_wint_t;\n+  using _C_legacy::_IO_lock_t;\n \n+  using _C_legacy::_IO_marker;\n+  using _C_legacy::_IO_codecvt;\n+  using _C_legacy::_IO_wide_data;\n+  using _C_legacy::_IO_FILE;\n+  using _C_legacy::_IO_cookie_io_functions_t;\n+  using _C_legacy::_IO_cookie_file;\n+\n+# ifdef _LIBIO_NEED_C_LEGACY_\n+  // dive back into the \"swamp\"\n+  namespace _C_legacy {\n+    extern \"C\" {\n+#  define _IN_C_LEGACY_\n+#  undef _LIBIO_NEED_C_LEGACY_\n+# endif /* _LIBIO_NEED_C_LEGACY_ */\n #endif /* _INCLUDED_CPP_LIBIO_H_ */\n+\n+\n+\n+"}, {"sha": "26aa771f2d58860e0aa5866d6102f5aad7e5da75", "filename": "libstdc++-v3/shadow/limits.h", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Flimits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Flimits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Flimits.h?ref=0517cb9903a890ecd768fae57ca0356bf901da35", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- header wrapper.\n \n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -28,11 +28,27 @@\n // the GNU General Public License.\n \n \n-\n #ifndef  _INCLUDED_CPP_LIMITS_H_\n # define _INCLUDED_CPP_LIMITS_H_ 1\n-# undef _SHADOW_NAME\n-# define _SHADOW_NAME <climits>\n-# include <bits/generic_shadow.h>\n-# undef _SHADOW_NAME\n+\n+# ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n+      // get out of the \"legacy\"\n+    } // close extern \"C\"\n+  }   // close namespace _C_legacy::\n+#  undef _IN_C_LEGACY_\n+#  define _LIMITS_NEED_C_LEGACY_\n+# endif\n+\n+# include <climits>\n+\n+  // Expose global C names, including non-standard ones, but shadow\n+  // some names and types with the std:: C++ version.\n+\n+# ifdef _LIMITS_NEED_C_LEGACY_\n+  // dive back into the \"swamp\"\n+  namespace _C_legacy {\n+    extern \"C\" {\n+#  define _IN_C_LEGACY_\n+#  undef _LIMITS_NEED_C_LEGACY_\n+# endif /* _LIMITS_NEED_C_LEGACY_ */\n #endif /* _INCLUDED_CPP_LIMITS_H_ */"}, {"sha": "1d5f529ed896d1d9be2aaca82bf58a41cee6f28f", "filename": "libstdc++-v3/shadow/locale.h", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Flocale.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Flocale.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Flocale.h?ref=0517cb9903a890ecd768fae57ca0356bf901da35", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- header wrapper.\n \n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -28,18 +28,30 @@\n // the GNU General Public License.\n \n \n-\n #ifndef  _INCLUDED_CPP_LOCALE_H_\n-# undef _SHADOW_NAME\n-# define _SHADOW_NAME <clocale>\n-# include <bits/generic_shadow.h>\n-# undef _SHADOW_NAME\n-\n-# ifndef _IN_C_LEGACY_\n-  using ::std::lconv;\n-  using ::std::setlocale;\n-  using ::std::localeconv;\n # define _INCLUDED_CPP_LOCALE_H_ 1\n-# endif\n \n+# ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n+      // get out of the \"legacy\"\n+    } // close extern \"C\"\n+  }   // close namespace _C_legacy::\n+#  undef _IN_C_LEGACY_\n+#  define _LOCALE_NEED_C_LEGACY_\n+#endif\n+\n+# include <clocale>\n+\n+  // Expose global C names, including non-standard ones, but shadow\n+  // some names and types with the std:: C++ version.\n+  using std::lconv;\n+  using std::setlocale;\n+  using std::localeconv;\n+\n+# ifdef _LOCALE_NEED_C_LEGACY_\n+  // dive back into the \"swamp\"\n+  namespace _C_legacy {\n+    extern \"C\" {\n+#  define _IN_C_LEGACY_\n+#  undef _LOCALE_NEED_C_LEGACY_\n+# endif /* _LOCALE_NEED_C_LEGACY_ */\n #endif /* _INCLUDED_CPP_LOCALE_H_ */"}, {"sha": "f2ec04af671b228edf7769e4fc7a64eaca8f0720", "filename": "libstdc++-v3/shadow/math.h", "status": "modified", "additions": 97, "deletions": 29, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Fmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Fmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fmath.h?ref=0517cb9903a890ecd768fae57ca0356bf901da35", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- header wrapper.\n \n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -29,35 +29,103 @@\n \n \n #ifndef  _INCLUDED_CPP_MATH_H_\n-# undef _SHADOW_NAME\n-# define _SHADOW_NAME <cmath>\n-# include <bits/generic_shadow.h>\n-# undef _SHADOW_NAME\n-\n-# ifndef _IN_C_LEGACY_\n-  using ::std::acos;\n-  using ::std::asin;\n-  using ::std::atan;\n-  using ::std::atan2;\n-  using ::std::cos;\n-  using ::std::sin;\n-  using ::std::tan;\n-  using ::std::cosh;\n-  using ::std::sinh;\n-  using ::std::tanh;\n-  using ::std::exp;\n-  using ::std::frexp;\n-  using ::std::ldexp;\n-  using ::std::log;\n-  using ::std::log10;\n-  using ::std::modf;\n-  using ::std::pow;\n-  using ::std::sqrt;\n-  using ::std::ceil;\n-  using ::std::fabs;\n-  using ::std::floor;\n-  using ::std::fmod;\n # define _INCLUDED_CPP_MATH_H_ 1\n+\n+# ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n+      // get out of the \"legacy\"\n+    } // close extern \"C\"\n+  }   // close namespace _C_legacy::\n+#  undef _IN_C_LEGACY_\n+#  define _MATH_NEED_C_LEGACY_\n # endif\n \n+# include <cmath>\n+\n+  // Expose global C names, including non-standard ones, but shadow\n+  // some names and types with the std:: C++ version.\n+  using std::abs;\n+  using std::acos;\n+  using std::asin;\n+  using std::atan;\n+  using std::atan2;\n+  using std::cos;\n+  using std::sin;\n+  using std::tan;\n+  using std::cosh;\n+  using std::sinh;\n+  using std::tanh;\n+  using std::exp;\n+  using std::frexp;\n+  using std::ldexp;\n+  using std::log;\n+  using std::log10;\n+  using std::modf;\n+  using std::pow;\n+  using std::sqrt;\n+  using std::ceil;\n+  using std::fabs;\n+  using std::floor;\n+  using std::fmod;\n+\n+  // From ISO/IEC 9899:1999\n+  using std::absf;\n+  using std::acosf;\n+  using std::asinf;\n+  using std::atanf;\n+  using std::atan2f;\n+  using std::cosf;\n+  using std::sinf;\n+  using std::tanf;\n+  using std::coshf;\n+  using std::sinhf;\n+  using std::tanhf;\n+  using std::expf;\n+  using std::frexpf;\n+  using std::ldexpf;\n+  using std::logf;\n+  using std::log10f;\n+  using std::modff;\n+  using std::powf;\n+  using std::sqrtf;\n+  using std::ceilf;\n+  using std::fabsf;\n+  using std::floorf;\n+  using std::fmodf;\n+\n+  // From ISO/IEC 9899:1999\n+  using std::absl;\n+  using std::acosl;\n+  using std::asinl;\n+  using std::atanl;\n+  using std::atan2l;\n+  using std::cosl;\n+  using std::sinl;\n+  using std::tanl;\n+  using std::coshl;\n+  using std::sinhl;\n+  using std::tanhl;\n+  using std::expl;\n+  using std::frexpl;\n+  using std::ldexpl;\n+  using std::logl;\n+  using std::log10l;\n+  using std::modfl;\n+  using std::powl;\n+  using std::sqrtl;\n+  using std::ceill;\n+  using std::fabsl;\n+  using std::floorl;\n+  using std::fmodl;\n+\n+# ifdef _MATH_NEED_C_LEGACY_\n+  // dive back into the \"swamp\"\n+  namespace _C_legacy {\n+    extern \"C\" {\n+#  define _IN_C_LEGACY_\n+#  undef _MATH_NEED_C_LEGACY_\n+# endif /* _MATH_NEED_C_LEGACY_ */\n #endif /* _INCLUDED_CPP_MATH_H_ */\n+\n+\n+\n+"}, {"sha": "c4061e871dbaa3dd2137066dfaad982bd0c6f489", "filename": "libstdc++-v3/shadow/setjmp.h", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Fsetjmp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Fsetjmp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fsetjmp.h?ref=0517cb9903a890ecd768fae57ca0356bf901da35", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- header wrapper.\n \n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -28,17 +28,29 @@\n // the GNU General Public License.\n \n \n-\n #ifndef  _INCLUDED_CPP_SETJMP_H_\n-# undef _SHADOW_NAME\n-# define _SHADOW_NAME <csetjmp>\n-# include <bits/generic_shadow.h>\n-# undef _SHADOW_NAME\n-\n-# ifndef _IN_C_LEGACY_\n-  using ::std::jmp_buf;\n-  using ::std::longjmp;\n # define _INCLUDED_CPP_SETJMP_H_ 1\n+\n+# ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n+      // get out of the \"legacy\"\n+    } // close extern \"C\"\n+  }   // close namespace _C_legacy::\n+#  undef _IN_C_LEGACY_\n+#  define _SETJMP_NEED_C_LEGACY_\n # endif\n \n+# include <csetjmp>\n+\n+  // Expose global C names, including non-standard ones, but shadow\n+  // some names and types with the std:: C++ version.\n+  using std::jmp_buf;\n+  using std::longjmp;\n+\n+# ifdef _SETJMP_NEED_C_LEGACY_\n+  // dive back into the \"swamp\"\n+  namespace _C_legacy {\n+    extern \"C\" {\n+#  define _IN_C_LEGACY_\n+#  undef _SETJMP_NEED_C_LEGACY_\n+# endif /* _SETJMP_NEED_C_LEGACY_ */\n #endif /* _INCLUDED_CPP_SETJMP_H_ */"}, {"sha": "819ddf22f325f0277f8f08fbd49d929a4d19c125", "filename": "libstdc++-v3/shadow/signal.h", "status": "modified", "additions": 24, "deletions": 11, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Fsignal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Fsignal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fsignal.h?ref=0517cb9903a890ecd768fae57ca0356bf901da35", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- header wrapper.\n \n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -28,18 +28,31 @@\n // the GNU General Public License.\n \n \n-\n #ifndef  _INCLUDED_CPP_SIGNAL_H_\n-# undef _SHADOW_NAME\n-# define _SHADOW_NAME <csignal>\n-# include <bits/generic_shadow.h>\n-# undef _SHADOW_NAME\n-\n-# ifndef _IN_C_LEGACY_\n-  using ::std::sig_atomic_t;\n-  using ::std::raise;\n-  using ::std::signal;\n # define _INCLUDED_CPP_SIGNAL_H_ 1\n+\n+# ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n+      // get out of the \"legacy\"\n+    } // close extern \"C\"\n+  }   // close namespace _C_legacy::\n+#  undef _IN_C_LEGACY_\n+#  define _SIGNAL_NEED_C_LEGACY_\n # endif\n \n+# include <csignal>\n+\n+  // Expose global C names, including non-standard ones, but shadow\n+  // some names and types with the std:: C++ version.\n+  using std::sig_atomic_t;\n+\n+  using std::raise;\n+  using std::signal;\n+\n+# ifdef _SIGNAL_NEED_C_LEGACY_\n+  // dive back into the \"swamp\"\n+  namespace _C_legacy {\n+    extern \"C\" {\n+#  define _IN_C_LEGACY_\n+#  undef _SIGNAL_NEED_C_LEGACY_\n+#  endif /* _SIGNAL_NEED_C_LEGACY_ */\n #endif /* _INCLUDED_CPP_SIGNAL_H_ */"}, {"sha": "cb32feca7d60956f2a2961373f64f17c7b7de81b", "filename": "libstdc++-v3/shadow/stdarg.h", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Fstdarg.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Fstdarg.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fstdarg.h?ref=0517cb9903a890ecd768fae57ca0356bf901da35", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- header wrapper.\n \n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -29,14 +29,27 @@\n \n \n #ifndef  _INCLUDED_CPP_STDARG_H_\n-# undef _SHADOW_NAME\n-# define _SHADOW_NAME <cstdarg>\n-# include <bits/generic_shadow.h>\n-# undef _SHADOW_NAME\n-\n-# ifndef _IN_C_LEGACY_\n-  using ::std::va_list;\n # define _INCLUDED_CPP_STDARG_H_ 1\n+\n+#ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n+      // get out of the \"legacy\"\n+    } // close extern \"C\"\n+  }   // close namespace _C_legacy::\n+#  undef _IN_C_LEGACY_\n+#  define _STDARG_NEED_C_LEGACY_\n # endif\n \n+# include <cstdarg>\n+\n+  // Expose global C names, including non-standard ones, but shadow\n+  // some names and types with the std:: C++ version.\n+  using std::va_list;\n+\n+# ifdef _STDARG_NEED_C_LEGACY_\n+  // dive back into the \"swamp\"\n+  namespace _C_legacy {\n+    extern \"C\" {\n+#  define _IN_C_LEGACY_\n+#  undef _STDARG_NEED_C_LEGACY_\n+# endif /* _STDARG_NEED_C_LEGACY_ */\n #endif /* _INCLUDED_CPP_STDARG_H_ */"}, {"sha": "03d5896779ea32e7e4d9709223d1fbe8d789d070", "filename": "libstdc++-v3/shadow/stddef.h", "status": "modified", "additions": 26, "deletions": 17, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Fstddef.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Fstddef.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fstddef.h?ref=0517cb9903a890ecd768fae57ca0356bf901da35", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- header wrapper.\n \n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -29,23 +29,32 @@\n \n \n #ifndef  _INCLUDED_CPP_STDDEF_H_\n-\n-// turn off glibc weirdness.  other libs have similar foolishness.\n-#undef __need_wchar_t\n-#undef __need_size_t\n-#undef __need_ptrdiff_t\n-#undef __need_NULL\n-#undef __need_wint_t\n-\n-# undef _SHADOW_NAME\n-# define _SHADOW_NAME <cstddef>\n-# include <bits/generic_shadow.h>\n-# undef _SHADOW_NAME\n-\n-# ifndef _IN_C_LEGACY_\n-  using ::std::ptrdiff_t;\n-  using ::std::size_t;\n # define _INCLUDED_CPP_STDDEF_H_ 1\n+\n+# ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n+      // get out of the \"legacy\"\n+    } // close extern \"C\"\n+  }   // close namespace _C_legacy::\n+#  undef _IN_C_LEGACY_\n+#  define _STDDEF_NEED_C_LEGACY_\n # endif\n \n+# include <cstddef>\n+\n+  // Expose global C names, including non-standard ones, but shadow\n+  // some names and types with the std:: C++ version.\n+  using std::ptrdiff_t;\n+  using std::size_t;\n+\n+# ifdef _STDDEF_NEED_C_LEGACY_\n+  // dive back into the \"swamp\"\n+  namespace _C_legacy {\n+    extern \"C\" {\n+#  define _IN_C_LEGACY_\n+#  undef _STDDEF_NEED_C_LEGACY_\n+# endif /* _STDDEF_NEED_C_LEGACY_ */\n #endif /* _INCLUDED_CPP_STDDEF_H_ */\n+\n+\n+\n+"}, {"sha": "c3a43b736c2dc14aa61b42b1c361373716f3aa1a", "filename": "libstdc++-v3/shadow/stdio.h", "status": "modified", "additions": 64, "deletions": 51, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Fstdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Fstdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fstdio.h?ref=0517cb9903a890ecd768fae57ca0356bf901da35", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- header wrapper.\n \n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -27,58 +27,71 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-\n #ifndef  _INCLUDED_CPP_STDIO_H_\n-# undef _SHADOW_NAME\n-# define _SHADOW_NAME <cstdio>\n-# include <bits/generic_shadow.h>\n-# undef _SHADOW_NAME\n-\n-# ifndef _IN_C_LEGACY_\n-  using ::std::size_t;\n-  using ::std::fpos_t; \n-  using ::std::remove;\n-  using ::std::rename;\n-  using ::std::tmpfile;\n-  using ::std::tmpnam;\n-  using ::std::fclose;\n-  using ::std::fflush;\n-  using ::std::fopen;\n-  using ::std::freopen;\n-  using ::std::setbuf;\n-  using ::std::setvbuf;\n-  using ::std::fprintf;\n-  using ::std::fscanf;\n-  using ::std::printf;\n-  using ::std::scanf;\n-  using ::std::sprintf;\n-  using ::std::sscanf;\n-  using ::std::vfprintf;\n-  using ::std::vprintf;\n-  using ::std::vsprintf;\n-  using ::std::fgetc;\n-  using ::std::fgets;\n-  using ::std::fputc;\n-  using ::std::fputs;\n-  using ::std::getc;\n-  using ::std::getchar;\n-  using ::std::gets;\n-  using ::std::putc;\n-  using ::std::putchar;\n-  using ::std::puts;\n-  using ::std::ungetc;\n-  using ::std::fread;\n-  using ::std::fwrite;\n-  using ::std::fgetpos;\n-  using ::std::fseek;\n-  using ::std::fsetpos;\n-  using ::std::ftell;\n-  using ::std::rewind;\n-  using ::std::clearerr;\n-  using ::std::feof;\n-  using ::std::ferror;\n-  using ::std::perror;\n # define _INCLUDED_CPP_STDIO_H_ 1\n+\n+# ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n+      // get out of the \"legacy\"\n+    } // close extern \"C\"\n+  }   // close namespace _C_legacy::\n+#  undef _IN_C_LEGACY_\n+#  define _STDIO_NEED_C_LEGACY_\n # endif\n \n+# include <cstdio>\n+\n+  // Expose global C names, including non-standard ones, but shadow\n+  // some names and types with the std:: C++ version.\n+  using std::FILE;\n+  using std::fpos_t; \n+\n+  using std::remove;\n+  using std::rename;\n+  using std::tmpfile;\n+  using std::tmpnam;\n+  using std::fclose;\n+  using std::fflush;\n+  using std::fopen;\n+  using std::freopen;\n+  using std::setbuf;\n+  using std::setvbuf;\n+  using std::fprintf;\n+  using std::fscanf;\n+  using std::printf;\n+  using std::scanf;\n+  using std::sprintf;\n+  using std::sscanf;\n+  using std::vfprintf;\n+  using std::vprintf;\n+  using std::vsprintf;\n+  using std::fgetc;\n+  using std::fgets;\n+  using std::fputc;\n+  using std::fputs;\n+  using std::getc;\n+  using std::getchar;\n+  using std::gets;\n+  using std::putc;\n+  using std::putchar;\n+  using std::puts;\n+  using std::ungetc;\n+  using std::fread;\n+  using std::fwrite;\n+  using std::fgetpos;\n+  using std::fseek;\n+  using std::fsetpos;\n+  using std::ftell;\n+  using std::rewind;\n+  using std::clearerr;\n+  using std::feof;\n+  using std::ferror;\n+  using std::perror;\n+\n+# ifdef _STDIO_NEED_C_LEGACY_\n+  // dive back into the \"swamp\"\n+  namespace _C_legacy {\n+    extern \"C\" {\n+#  define _IN_C_LEGACY_\n+#  undef _STDIO_NEED_C_LEGACY_\n+# endif /* _STDIO_NEED_C_LEGACY_ */\n #endif /* _INCLUDED_CPP_STDIO_H_ */"}, {"sha": "bc5dcc96743f8980d45340fd2904074b484f7ea7", "filename": "libstdc++-v3/shadow/stdlib.h", "status": "modified", "additions": 61, "deletions": 38, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Fstdlib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Fstdlib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fstdlib.h?ref=0517cb9903a890ecd768fae57ca0356bf901da35", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- header wrapper.\n \n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -29,44 +29,67 @@\n \n \n #ifndef  _INCLUDED_CPP_STDLIB_H_\n-# undef _SHADOW_NAME\n-# define _SHADOW_NAME <cstdlib>\n-# include <bits/generic_shadow.h>\n-# undef _SHADOW_NAME\n-\n-# ifndef _IN_C_LEGACY_\n-  using ::std::size_t;\n-  using ::std::div_t;\n-  using ::std::ldiv_t;\n-  using ::std::atof;\n-  using ::std::atoi;\n-  using ::std::atol;\n-  using ::std::strtod;\n-  using ::std::strtol;\n-  using ::std::strtoul;\n-  using ::std::rand;\n-  using ::std::srand;\n-  using ::std::calloc;\n-  using ::std::free;\n-  using ::std::malloc;\n-  using ::std::realloc;\n-  using ::std::abort;\n-  using ::std::atexit;\n-  using ::std::exit;\n-  using ::std::getenv;\n-  using ::std::system;\n-  using ::std::bsearch;\n-  using ::std::qsort;\n-  using ::std::abs;\n-  using ::std::div;\n-  using ::std::labs;\n-  using ::std::ldiv;\n-  using ::std::mblen;\n-  using ::std::mbtowc;\n-  using ::std::wctomb;\n-  using ::std::mbstowcs;\n-  using ::std::wcstombs;\n # define _INCLUDED_CPP_STDLIB_H_ 1\n+\n+# ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n+      // get out of the \"legacy\"\n+    } // close extern \"C\"\n+  }   // close namespace _C_legacy::\n+#  undef _IN_C_LEGACY_\n+#  define _STDLIB_NEED_C_LEGACY_\n # endif\n \n+# include <cstdlib>\n+\n+  // Expose global C names, including non-standard ones, but shadow\n+  // some names and types with the std:: C++ version.\n+  using std::div_t;\n+  using std::ldiv_t;\n+#ifdef _GLIBCPP_USE_LONG_LONG\n+  using std::lldiv_t;\n+#endif\n+\n+  using std::abort;\n+  using std::abs;\n+  using std::atexit;\n+  using std::atof;\n+  using std::atoi;\n+  using std::atol;\n+  using std::bsearch;\n+  using std::calloc;\n+  using std::div;\n+  using std::exit;\n+  using std::free;\n+  using std::getenv;\n+  using std::labs;\n+  using std::ldiv;\n+  using std::malloc;\n+  using std::mblen;\n+  using std::mbstowcs;\n+  using std::mbtowc;\n+  using std::qsort;\n+  using std::rand;\n+  using std::realloc;\n+  using std::srand;\n+  using std::strtod;\n+  using std::strtol;\n+  using std::strtoul;\n+  using std::system;\n+  using std::wcstombs;\n+  using std::wctomb;\n+\n+#ifdef _GLIBCPP_USE_LONG_LONG\n+  using std::strtoll;\n+  using std::strtoull;\n+  using std::strtof;\n+  using std::strtold;\n+#endif\n+\n+# ifdef _STDLIB_NEED_C_LEGACY_\n+  // dive back into the \"swamp\"\n+  namespace _C_legacy {\n+    extern \"C\" {\n+#  define _IN_C_LEGACY_\n+#  undef _STDLIB_NEED_C_LEGACY_\n+# endif /* _STDLIB_NEED_C__LEGACY_ */\n #endif /* _INCLUDED_CPP_STDLIB_H_ */"}, {"sha": "6f9e6cc6372e8b53172ed1fc12f432e79213abe3", "filename": "libstdc++-v3/shadow/string.h", "status": "modified", "additions": 42, "deletions": 29, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Fstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Fstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fstring.h?ref=0517cb9903a890ecd768fae57ca0356bf901da35", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- header wrapper.\n \n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -29,35 +29,48 @@\n \n \n #ifndef  _INCLUDED_CPP_STRING_H_\n-# undef _SHADOW_NAME\n-# define _SHADOW_NAME <cstring>\n-# include <bits/generic_shadow.h>\n-# undef _SHADOW_NAME\n-\n-# ifndef _IN_C_LEGACY_\n-  using ::std::memcpy;\n-  using ::std::memmove;\n-  using ::std::strcpy;\n-  using ::std::strncpy;\n-  using ::std::strcat;\n-  using ::std::strncat;\n-  using ::std::memcmp;\n-  using ::std::strcmp;\n-  using ::std::strcoll;\n-  using ::std::strncmp;\n-  using ::std::strxfrm;\n-  using ::std::memchr;\n-  using ::std::strchr;\n-  using ::std::strcspn;\n-  using ::std::strpbrk;\n-  using ::std::strrchr;\n-  using ::std::strspn;\n-  using ::std::strstr;\n-  using ::std::strtok;\n-  using ::std::memset;\n-  using ::std::strerror;\n-  using ::std::strlen;\n # define _INCLUDED_CPP_STRING_H_ 1\n+\n+# ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n+      // get out of the \"legacy\"\n+    } // close extern \"C\"\n+  }   // close namespace _C_legacy::\n+#  undef _IN_C_LEGACY_\n+#  define _STRING_NEED_C_LEGACY_\n # endif\n \n+# include <cstring>\n+\n+  // Expose global C names, including non-standard ones, but shadow\n+  // some names and types with the std:: C++ version.\n+  using std::memcpy;\n+  using std::memmove;\n+  using std::strcpy;\n+  using std::strncpy;\n+  using std::strcat;\n+  using std::strncat;\n+  using std::memcmp;\n+  using std::strcmp;\n+  using std::strcoll;\n+  using std::strncmp;\n+  using std::strxfrm;\n+  using std::memchr;\n+  using std::strchr;\n+  using std::strcspn;\n+  using std::strpbrk;\n+  using std::strrchr;\n+  using std::strspn;\n+  using std::strstr;\n+  using std::strtok;\n+  using std::memset;\n+  using std::strerror;\n+  using std::strlen;\n+\n+# ifdef _STRING_NEED_C_LEGACY_\n+  // dive back into the \"swamp\"\n+  namespace _C_legacy {\n+    extern \"C\" {\n+#  define _IN_C_LEGACY_\n+#  undef _STRING_NEED_C_LEGACY_\n+# endif /* _STRING_NEED_C_LEGACY_ */\n #endif /* _INCLUDED_CPP_STRING_H_ */"}, {"sha": "31064aaa135187a98d64b1cbdb8d63d8368c0405", "filename": "libstdc++-v3/shadow/time.h", "status": "modified", "additions": 33, "deletions": 26, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Ftime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Ftime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Ftime.h?ref=0517cb9903a890ecd768fae57ca0356bf901da35", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- header wrapper.\n \n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -29,32 +29,39 @@\n \n \n #ifndef  _INCLUDED_CPP_TIME_H_\n-\n-// turn off glibc-2.0 weirdness. Other systems define similar foolishness\n-#undef __need_time_t\n-#undef __need_clock_t\n-#undef __need_timespec\n-\n-# undef _SHADOW_NAME\n-# define _SHADOW_NAME <ctime>\n-# include <bits/generic_shadow.h>\n-# undef _SHADOW_NAME\n-\n-# ifndef _IN_C_LEGACY_\n-  using ::std::size_t;  /* handled in <cstddef> */\n-  using ::std::clock_t;\n-  using ::std::time_t;\n-  using ::std::tm;\n-  using ::std::clock;\n-  using ::std::difftime;\n-  using ::std::mktime;\n-  using ::std::time;\n-  using ::std::asctime;\n-  using ::std::ctime;\n-  using ::std::gmtime;\n-  using ::std::localtime;\n-  using ::std::strftime;\n # define _INCLUDED_CPP_TIME_H_ 1\n+\n+# ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n+      // get out of the \"legacy\"\n+    } // close extern \"C\"\n+  }   // close namespace _C_legacy::\n+#  undef _IN_C_LEGACY_\n+#  define _TIME_NEED_C_LEGACY_\n # endif\n \n+# include <ctime>\n+ \n+  // Expose global C names, including non-standard ones, but shadow\n+  // some names and types with the std:: C++ version.\n+  using std::clock_t;\n+  using std::time_t;\n+  using std::tm;\n+\n+  using std::clock;\n+  using std::difftime;\n+  using std::mktime;\n+  using std::time;\n+  using std::asctime;\n+  using std::ctime;\n+  using std::gmtime;\n+  using std::localtime;\n+  using std::strftime;\n+\n+# ifdef _TIME_NEED_C_LEGACY_\n+  // dive back into the \"swamp\"\n+  namespace _C_legacy {\n+    extern \"C\" {\n+#  define _IN_C_LEGACY_\n+#  undef _TIME_NEED_C_LEGACY_\n+# endif /* _TIME_NEED_C_LEGACY_ */\n #endif /* _INCLUDED_CPP_TIME_H_ */"}, {"sha": "efabb1519a5b85011ec829ba81b03c9eca80d2d7", "filename": "libstdc++-v3/shadow/wchar.h", "status": "modified", "additions": 98, "deletions": 78, "changes": 176, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Fwchar.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Fwchar.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fwchar.h?ref=0517cb9903a890ecd768fae57ca0356bf901da35", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- header wrapper.\n \n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -29,83 +29,103 @@\n \n \n #ifndef  _INCLUDED_CPP_WCHAR_H_\n-# undef _SHADOW_NAME\n-# define _SHADOW_NAME <cwchar>\n-# include <bits/generic_shadow.h>\n-# undef _SHADOW_NAME\n-\n-# ifndef _IN_C_LEGACY_\n-  using ::std::size_t;  /* handled in <cstddef> */\n-  using ::std::wint_t;\n-  using ::std::mbstate_t;\n-\n-# if 0  /* glibc-2.0 doesn't define these */\n-  using ::std::fgetwc;\n-  using ::std::fgetws;\n-  using ::std::fputwc;\n-  using ::std::fputws;\n-  using ::std::ungetwc;\n-  using ::std::getwc;\n-  using ::std::getwchar;\n-  using ::std::putwc;\n-  using ::std::putwchar;\n-  using ::std::wprintf;\n-  using ::std::wsprintf;\n-  using ::std::wvsprintf;\n-  using ::std::wfsprintf;\n-  using ::std::wscanf;\n-  using ::std::wsscanf;\n-  using ::std::wvsscanf;\n-  using ::std::wfscanf;\n-    // XXX etc.\n-  using ::std::wcsftime;\n-# endif \n-\n-  using ::std::wcscpy;\n-  using ::std::wcscat;\n-  using ::std::wcscmp;\n-  using ::std::wcscoll;\n-  using ::std::wcsxfrm;\n-# ifdef __USE_GNU\n-  using ::std::wcsdup;\n-# endif\n-  using ::std::wcschr;\n-  using ::std::wcscspn;\n-  using ::std::wcspbrk;\n-  using ::std::wcsstr;\n-  using ::std::wcstok;\n-  using ::std::wcslen;\n-# ifndef __sun\n-    using ::std::wmemchr;\n-    using ::std::wmemcmp;\n-    using ::std::wmemcpy;\n-    using ::std::wmemmove;\n-    using ::std::wmemset;\n-    using ::std::btowc;\n-    using ::std::wctob;\n-    using ::std::mbsinit;\n-    using ::std::mbrtowc;\n-    using ::std::wcrtomb;\n-    using ::std::mbrlen;\n-# endif\n-# ifdef __USE_GNU\n-    using ::std::mbsrtowcs;\n-    using ::std::wcsrtombs;\n-    using ::std::mbsnrtowcs;\n-    using ::std::mbsnrtombs;\n-    using ::std::wcwidth;\n-    using ::std::wcswidth;\n-    using ::std::wcscmpy;\n-# endif\n-  using ::std::wcstod;\n-  using ::std::wcstol;\n-  using ::std::wcstoul;\n-  using ::std::wcsncat;\n-  using ::std::wcsncmp;\n-  using ::std::wcsncpy;\n-  using ::std::wcsrchr;\n-  using ::std::wcsspn;\n # define _INCLUDED_CPP_WCHAR_H_ 1\n-# endif /* _IN_C_LEGACY_ */\n \n+# ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n+      // get out of the \"legacy\"\n+    } // close extern \"C\"\n+  }   // close namespace _C_legacy::\n+#  undef _IN_C_LEGACY_  /* sub-included by a C header */\n+#  define _WCHAR_NEED_C_LEGACY_\n+# endif\n+\n+# include <cwchar>\n+\n+  // Expose global C names, including non-standard ones, but shadow\n+  // some names and types with the std:: C++ version.\n+  using std::wchar_t;\n+  using std::wint_t;\n+  using std::mbstate_t;\n+\n+#if 0\n+  using std::fwprintf;\n+  using std::fwscanf;\n+  using std::swprintf;\n+  using std::swscanf;\n+  using std::vfwprintf;\n+  using std::vfwscanf;\n+  using std::vswprintf;\n+  using std::vswscanf;\n+  using std::vwprintf;\n+  using std::vwscanf;\n+  using std::wprintf;\n+  using std::wscanf;\n+  using std::fgetwc;\n+  using std::fgetws;\n+  using std::fputwc;\n+  using std::fputws;\n+  using std::fwide;\n+  using std::getwc;\n+  using std::getwchar;\n+  using std::putwc;\n+  using std::putwchar;\n+  using std::ungetwc;\n+#endif\n+\n+  using std::wcstod;\n+  using std::wcstof;\n+  using std::wcstold;\n+  using std::wcstol;\n+  using std::wcstoll;\n+  using std::wcstoul;\n+  using std::wcstoull;\n+  using std::wcscpy;\n+  using std::wcsncpy;\n+  using std::wcscat;\n+  using std::wcsncat;\n+\n+#if 0\n+  using std::wcsmp;\n+#endif\n+\n+  using std::wcscoll;\n+  using std::wcsncmp;\n+  using std::wcsxfrm;\n+  using std::wcschr;\n+  using std::wcscspn;\n+  using std::wcslen;\n+  using std::wcspbrk;\n+  using std::wcsrchr;\n+  using std::wcsspn;\n+  using std::wcsstr;\n+  using std::wcstok;\n+  using std::wmemchr;\n+  using std::wmemcmp;\n+  using std::wmemcpy;\n+  using std::wmemmove;\n+  using std::wmemset;\n+\n+#if 0\n+  using std::wcsftime;\n+#endif\n+\n+  using std::btowc;\n+  using std::wctob;\n+  using std::mbsinit;\n+  using std::mbrlen;\n+  using std::mbrtowc;\n+  using std::wcrtomb;\n+  using std::mbsrtowcs;\n+  using std::wcsrtombs;\n+\n+# ifdef _WCHAR_NEED_C_LEGACY_\n+  // dive back into the \"swamp\"\n+  namespace _C_legacy {\n+    extern \"C\" {\n+#  define _IN_C_LEGACY_\n+#  undef _WCHAR_NEED_C_LEGACY_\n+# endif /* _WCHAR_NEED_C_LEGACY_ */\n #endif /* _INCLUDED_CPP_WCHAR_H_ */\n+\n+\n+"}, {"sha": "cae1aff43e14caecac6184781dc9e73e306a0265", "filename": "libstdc++-v3/shadow/wctype.h", "status": "modified", "additions": 41, "deletions": 26, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Fwctype.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fshadow%2Fwctype.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fwctype.h?ref=0517cb9903a890ecd768fae57ca0356bf901da35", "patch": "@@ -1,7 +1,6 @@\n // -*- C++ -*- header wrapper.\n \n-\n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -28,32 +27,48 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n+\n #ifndef  _INCLUDED_CPP_CWCTYPE_H_\n-# undef _SHADOW_NAME\n-# define _SHADOW_NAME <cwctype>\n-# include <bits/generic_shadow.h>\n-# undef _SHADOW_NAME\n-\n-# ifndef _IN_C_LEGACY_\n-  using ::std::size_t; \n-  using ::std::wint_t;\n-  using ::std::wctype_t;\n-  using ::std::wctrans_t;\n-  using ::std::iswalpha;\n-  using ::std::iswupper;\n-  using ::std::iswlower;\n-  using ::std::iswdigit;\n-  using ::std::iswxdigit;\n-  using ::std::iswalnum;\n-  using ::std::iswspace;\n-  using ::std::iswpunct;\n-  using ::std::iswprint;\n-  using ::std::iswgraph;\n-  using ::std::iswcntrl;\n-  using ::std::iswctype;\n-  using ::std::towlower;\n-  using ::std::towupper;\n # define _INCLUDED_CPP_CWCTYPE_H_ 1\n+\n+# ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n+      // get out of the \"legacy\"\n+    } // close extern \"C\"\n+  }   // close namespace _C_legacy::\n+#  undef _IN_C_LEGACY_\n+#  define _CWCHAR_NEED_C_LEGACY_\n # endif\n \n+# include <cwctype>\n+\n+  // Expose global C names, including non-standard ones, but shadow\n+  // some names and types with the std:: C++ version.\n+  using std::wint_t;\n+  using std::wctype_t;\n+  using std::wctrans_t;\n+  using std::iswalpha;\n+  using std::iswupper;\n+  using std::iswlower;\n+  using std::iswdigit;\n+  using std::iswxdigit;\n+  using std::iswalnum;\n+  using std::iswspace;\n+  using std::iswpunct;\n+  using std::iswprint;\n+  using std::iswgraph;\n+  using std::iswcntrl;\n+  using std::iswctype;\n+  using std::towctrans;\n+  using std::towlower;\n+  using std::towupper;\n+  using std::wctrans;\n+  using std::wctype;\n+\n+# ifdef _CWCHAR_NEED_C_LEGACY_\n+  // dive back into the \"swamp\"\n+  namespace _C_legacy {\n+    extern \"C\" {\n+#  define _IN_C_LEGACY_\n+#  undef _CWCHAR_NEED_C_LEGACY_\n+# endif /* _CWCHAR_NEED_C_LEGACY_ */\n #endif /* _INCLUDED_CPP_CWCTYPE_H_ */"}, {"sha": "fa8527ca15ff9f7f0660aaf1d67fac7b504a1491", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=0517cb9903a890ecd768fae57ca0356bf901da35", "patch": "@@ -21,7 +21,7 @@\n ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n ## USA.\n \n-## $Id: Makefile.am,v 1.29 2000/08/22 17:22:38 bkoz Exp $\n+## $Id: Makefile.am,v 1.30 2000/09/14 19:44:03 bkoz Exp $\n \n AUTOMAKE_OPTIONS = 1.3 gnits\n MAINT_CHARSET = latin1\n@@ -48,7 +48,7 @@ EXTRA_LTLIBRARIES = libinst-string.la libinst-wstring.la\n # NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n AC_CXXFLAGS = \\\n \t$(WERROR) @WFMT_FLAGS@ @CPU_FLAGS@ @EXTRA_CXX_FLAGS@ \\\n-\t@SECTION_FLAGS@ @DEBUG_FLAGS@ \n+\t@SECTION_FLAGS@ @CSHADOWFLAGS@ @DEBUG_FLAGS@ \n \n # Need to manually set this option because AC_CXXFLAGS has to be at\n # the end of the compile line so that -O2 can be overridden as the\n@@ -70,9 +70,10 @@ LIBIO_INCLUDES = -I$(top_srcdir)/libio\n endif\n \n if GLIBCPP_USE_CSHADOW\n-CSHADOW_INCLUDES = \n #CSHADOW_INCLUDES = \\\n-#\t@CSHADOWFLAGS@ -I$(top_srcdir)/shadow -I$(top_builddir)/cshadow\n+#\t-I$(top_srcdir)/std -I$(top_srcdir)/shadow -I$(top_builddir)/cshadow\n+CSHADOW_INCLUDES = \\\n+\t-I$(top_srcdir)/std -I$(top_srcdir)/shadow \n else\n CSHADOW_INCLUDES =\n endif\n@@ -82,17 +83,20 @@ CONFIG_INCLUDES = \\\n \t-I$(top_srcdir)/@ctype_include_dir@\n \n INCLUDES = \\\n-\t-D_GNU_SOURCE -nostdinc++ $(CSHADOW_INCLUDES) -I$(top_srcdir) \\\n-\t $(LIBIO_INCLUDES) $(CONFIG_INCLUDES) $(TOPLEVEL_INCLUDES)\t\n+\t-D_GNU_SOURCE -D_ISOC99_SOURCE -nostdinc++ $(CSHADOW_INCLUDES) \\\n+\t-I$(top_builddir) -I$(top_srcdir) \\\n+\t $(CONFIG_INCLUDES) $(LIBIO_INCLUDES) $(TOPLEVEL_INCLUDES)\t\n \n \n-# Need to explicitly set this so that AM_CXXFLAGS is last. (That way,\n+# Need to explicitly set this so that AM_CXXFLAGS is last. In\n+# addition, we don't use $(DEFS), which tries to set $(top_srcdir) as\n+# an include diretory, which screws up shadow headers. (That way,\n # things like -O2 passed down from the toplevel can be overridden by\n # --enable-debug.)\n-CXXCOMPILE = $(CXX) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \\\n+CXXCOMPILE = $(CXX) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \\\n \t     $(CXXFLAGS) $(AM_CXXFLAGS) \n \n-LTCXXCOMPILE = $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(INCLUDES) \\\n+LTCXXCOMPILE = $(LIBTOOL) --mode=compile $(CXX) $(INCLUDES) \\\n \t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n \n # We have a problem when building the shared libstdc++ object if the\n@@ -246,7 +250,7 @@ $(libstdc___la_OBJECTS): $(CSHADOW_H)\n $(top_builddir)/stamp-cshadow: $(top_srcdir)/mkinclosure \\\n                                $(top_srcdir)/mkcshadow\n \t$(top_srcdir)/mkinclosure \\\n-\t\"-I $(top_builddir)/../../gcc/include -I /usr/include -G machine/ansi.h\" | $(top_srcdir)/mkcshadow;\n+\t\"-I $(top_builddir)/../../gcc/include -I /usr/include -G fcntl.h unistd.h\" | $(top_srcdir)/mkcshadow;\n \trm -f  $(top_builddir)/stamp-cshadow \n \techo \"done\" > $(top_builddir)/stamp-cshadow \n "}, {"sha": "572033ad16de69969f48084eee1cd464981a6113", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=0517cb9903a890ecd768fae57ca0356bf901da35", "patch": "@@ -124,7 +124,7 @@ EXTRA_LTLIBRARIES = libinst-string.la libinst-wstring.la\n # These bits are all figured out from configure. Look in acinclude.m4\n # or configure.in to see how they are set.\n # NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n-AC_CXXFLAGS =  \t$(WERROR) @WFMT_FLAGS@ @CPU_FLAGS@ @EXTRA_CXX_FLAGS@ \t@SECTION_FLAGS@ @DEBUG_FLAGS@ \n+AC_CXXFLAGS =  \t$(WERROR) @WFMT_FLAGS@ @CPU_FLAGS@ @EXTRA_CXX_FLAGS@ \t@SECTION_FLAGS@ @CSHADOWFLAGS@ @DEBUG_FLAGS@ \n \n \n # Need to manually set this option because AC_CXXFLAGS has to be at\n@@ -137,24 +137,24 @@ AM_CXXFLAGS =  \t-fno-implicit-templates $(OPTIMIZE_CXXFLAGS) \t-Wall -Wno-format\n TOPLEVEL_INCLUDES = -I$(includedir)\n @GLIBCPP_NEED_LIBIO_TRUE@LIBIO_INCLUDES = \t-I$(top_builddir)/libio -I$(top_srcdir)/libio \n @GLIBCPP_NEED_LIBIO_FALSE@LIBIO_INCLUDES = -I$(top_srcdir)/libio\n-#CSHADOW_INCLUDES = \\\n-#\t@CSHADOWFLAGS@ -I$(top_srcdir)/shadow -I$(top_builddir)/cshadow\n-@GLIBCPP_USE_CSHADOW_TRUE@CSHADOW_INCLUDES = \n+@GLIBCPP_USE_CSHADOW_TRUE@CSHADOW_INCLUDES = \t-I$(top_srcdir)/std -I$(top_srcdir)/shadow \n @GLIBCPP_USE_CSHADOW_FALSE@CSHADOW_INCLUDES = \n \n CONFIG_INCLUDES =  \t-I$(top_srcdir)/@cpu_include_dir@ \t-I$(top_srcdir)/@ctype_include_dir@\n \n \n-INCLUDES =  \t-D_GNU_SOURCE -nostdinc++ $(CSHADOW_INCLUDES) -I$(top_srcdir) \t $(LIBIO_INCLUDES) $(CONFIG_INCLUDES) $(TOPLEVEL_INCLUDES)\t\n+INCLUDES =  \t-D_GNU_SOURCE -D_ISOC99_SOURCE -nostdinc++ $(CSHADOW_INCLUDES) \t-I$(top_builddir) -I$(top_srcdir) \t $(CONFIG_INCLUDES) $(LIBIO_INCLUDES) $(TOPLEVEL_INCLUDES)\t\n \n \n-# Need to explicitly set this so that AM_CXXFLAGS is last. (That way,\n+# Need to explicitly set this so that AM_CXXFLAGS is last. In\n+# addition, we don't use $(DEFS), which tries to set $(top_srcdir) as\n+# an include diretory, which screws up shadow headers. (That way,\n # things like -O2 passed down from the toplevel can be overridden by\n # --enable-debug.)\n-CXXCOMPILE = $(CXX) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \t     $(CXXFLAGS) $(AM_CXXFLAGS) \n+CXXCOMPILE = $(CXX) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \t     $(CXXFLAGS) $(AM_CXXFLAGS) \n \n \n-LTCXXCOMPILE = $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(INCLUDES) \t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n+LTCXXCOMPILE = $(LIBTOOL) --mode=compile $(CXX) $(INCLUDES) \t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n \n \n # We have a problem when building the shared libstdc++ object if the\n@@ -457,7 +457,7 @@ $(libstdc___la_OBJECTS): $(CSHADOW_H)\n $(top_builddir)/stamp-cshadow: $(top_srcdir)/mkinclosure \\\n                                $(top_srcdir)/mkcshadow\n \t$(top_srcdir)/mkinclosure \\\n-\t\"-I $(top_builddir)/../../gcc/include -I /usr/include -G machine/ansi.h\" | $(top_srcdir)/mkcshadow;\n+\t\"-I $(top_builddir)/../../gcc/include -I /usr/include -G fcntl.h unistd.h\" | $(top_srcdir)/mkcshadow;\n \trm -f  $(top_builddir)/stamp-cshadow \n \techo \"done\" > $(top_builddir)/stamp-cshadow \n "}, {"sha": "f9f64196199794349dcd25a47ac20f26e75e1224", "filename": "libstdc++-v3/src/complex.cc", "status": "modified", "additions": 102, "deletions": 226, "changes": 328, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fsrc%2Fcomplex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fsrc%2Fcomplex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcomplex.cc?ref=0517cb9903a890ecd768fae57ca0356bf901da35", "patch": "@@ -36,239 +36,115 @@\n \n #ifndef FLT\n # define FLT double\n-# define FCT(name) ::name\n #endif\n \n+// This file often breaks due to compiler bugs. May need to put in guards, ie:\n+// #if defined(_GLIBCPP_BUGGY_FLOAT_COMPLEX) \n+// and\n+// #if defined(_GLIBCPP_FLOAT_SPECIALIZATION)\n+\n namespace std\n {\n-    \n-    template<>\n-    FLT\n-    abs(const complex<FLT>& __x)\n-    { return FCT(cabs)(__x._M_value); }\n-\n-    template<>\n-    FLT\n-    arg(const complex<FLT>& __x)\n-    { return FCT(carg)(__x._M_value); }\n-\n-    template<>\n-    complex<FLT>\n-    polar(const FLT& __rho, const FLT& __theta)\n-    {\n-#if defined _G_HAVE_SINCOS && !defined __osf__\n-      // Although sincos does exist on OSF3.2 and OSF4.0 we cannot use it\n-      // since the necessary types are not defined in the headers.\n-      FLT __sinx, __cosx;\n-      FCT(sincos)(__theta, &__sinx, &__cosx);\n-      return complex<FLT>(__rho * __cosx, __rho * __sinx);\n-#else\n-#if defined(_GLIBCPP_BUGGY_FLOAT_COMPLEX) \\\n-      && defined(_GLIBCPP_FLOAT_SPECIALIZATION)\n-      complex<FLT> __tmpf(__rho * FCT(cos)(__theta),\n-                         __rho * FCT(sin)(__theta));\n-      return __tmpf;\n-#else\n-       return complex<FLT>(__rho * FCT(cos)(__theta),\n-                          __rho * FCT(sin)(__theta));\n-#endif\n-#endif\n-    }\n-\n-    template<>\n-    complex<FLT>\n-    cos(const complex<FLT>& __x)\n-#if defined(_GLIBCPP_BUGGY_FLOAT_COMPLEX) \\\n-      && defined(_GLIBCPP_FLOAT_SPECIALIZATION)\n-    {\n-      complex<FLT> __tmpf(FCT(ccos)(__x._M_value));\n-      return __tmpf;\n-    }\n-#else\n-    { return complex<FLT>(FCT(ccos)(__x._M_value)); }\n-#endif\n-\n-    template<>\n-    complex<FLT>\n-    cosh(const complex<FLT>& __x)\n-#if defined(_GLIBCPP_BUGGY_FLOAT_COMPLEX) \\\n-      && defined(_GLIBCPP_FLOAT_SPECIALIZATION)\n-    {\n-      complex<FLT> __tmpf(FCT(ccosh)(__x._M_value));\n-      return __tmpf;\n-    }\n-#else\n-    { return complex<FLT>(FCT(ccosh)(__x._M_value)); }\n-#endif\n-\n-    template<>\n-    complex<FLT>\n-    exp(const complex<FLT>& __x)\n-#if defined(_GLIBCPP_BUGGY_FLOAT_COMPLEX) \\\n-      && defined(_GLIBCPP_FLOAT_SPECIALIZATION)\n-    {\n-      complex<FLT> __tmpf(FCT(cexp)(__x._M_value));\n-      return __tmpf;\n-    }\n-#else\n-    { return complex<FLT>(FCT(cexp)(__x._M_value)); }\n-#endif\n-\n-    template<>\n-    complex<FLT>\n-    log(const complex<FLT>& __x)\n-#if defined(_GLIBCPP_BUGGY_FLOAT_COMPLEX) \\\n-      && defined(_GLIBCPP_FLOAT_SPECIALIZATION)\n-    {\n-      complex<FLT> __tmpf(FCT(c_log)(__x._M_value));\n-      return __tmpf;\n-    }\n-#else\n-    { return complex<FLT>(FCT(c_log)(__x._M_value)); }\n-#endif\n-\n-    template<>\n-    complex<FLT>\n-    log10(const complex<FLT>& __x)\n-#if defined(_GLIBCPP_BUGGY_FLOAT_COMPLEX) \\\n-      && defined(_GLIBCPP_FLOAT_SPECIALIZATION)\n-    {\n-      complex<FLT> __tmpf(FCT(clog10)(__x._M_value));\n-      return __tmpf;\n-    }\n-#else\n-    { return complex<FLT>(FCT(clog10)(__x._M_value)); }\n-#endif\n-\n-    template<>\n-    complex<FLT>\n-    pow(const complex<FLT>& __x, int __n)\n-#if defined(_GLIBCPP_BUGGY_FLOAT_COMPLEX) \\\n-      && defined(_GLIBCPP_FLOAT_SPECIALIZATION)\n-    {\n-      complex<FLT> __tmpf(FCT(cexp) (__n * FCT(c_log)(__x._M_value)));\n-      return __tmpf;\n-    }\n-#else\n-    { return complex<FLT>(FCT(cexp) (__n * FCT(c_log)(__x._M_value))); }\n-#endif\n-\n-\n-    template<>\n-    complex<FLT>\n-    pow(const complex<FLT>& __x, const FLT& __y)\n-#if defined(_GLIBCPP_BUGGY_FLOAT_COMPLEX) \\\n-      && defined(_GLIBCPP_FLOAT_SPECIALIZATION)\n-    {\n-      complex<FLT> __tmpf(FCT(cexp) (__y * FCT(c_log)(__x._M_value)));\n-      return __tmpf;\n-    }\n-#else\n-    { return complex<FLT>(FCT(cexp) (__y * FCT(c_log)(__x._M_value))); }\n-#endif\n-\n-    template<>\n-    complex<FLT>\n-    pow(const complex<FLT>& __x, const complex<FLT>& __y)\n-#if defined(_GLIBCPP_BUGGY_FLOAT_COMPLEX) \\\n-      && defined(_GLIBCPP_FLOAT_SPECIALIZATION)\n-    {\n-      complex<FLT> __tmpf(FCT(cpow)(__x._M_value, __y._M_value));\n-      return __tmpf;\n-    }\n-#else\n-    { return complex<FLT>(FCT(cpow)(__x._M_value, __y._M_value)); }\n-#endif\n-\n-    template<>\n-    complex<FLT>\n-    pow(const FLT& __x, const complex<FLT>& __y)\n-#if defined(_GLIBCPP_BUGGY_FLOAT_COMPLEX) \\\n-      && defined(_GLIBCPP_FLOAT_SPECIALIZATION)\n-    {\n-      complex<FLT> __tmpf(FCT(cexp)(__y._M_value * FCT(log)(__x)));\n-      return __tmpf;\n-    }\n-#else\n-    { return complex<FLT>(FCT(cexp)(__y._M_value * FCT(log)(__x))); }\n-#endif\n-\n-    template<>\n-    complex<FLT>\n-    sin(const complex<FLT>& __x)\n-#if defined(_GLIBCPP_BUGGY_FLOAT_COMPLEX) \\\n-      && defined(_GLIBCPP_FLOAT_SPECIALIZATION)\n-    {\n-      complex<FLT> __tmpf(FCT(csin)(__x._M_value));\n-      return __tmpf;\n-    }\n-#else\n-    { return complex<FLT>(FCT(csin)(__x._M_value)); }\n-#endif\n-\n-    template<>\n-    complex<FLT>\n-    sinh(const complex<FLT>& __x)\n-#if defined(_GLIBCPP_BUGGY_FLOAT_COMPLEX) \\\n-      && defined(_GLIBCPP_FLOAT_SPECIALIZATION)\n-    {\n-      complex<FLT> __tmpf(FCT(csinh)(__x._M_value));\n-      return __tmpf;\n-    }\n-#else\n-    { return complex<FLT>(FCT(csinh)(__x._M_value)); }\n-#endif\n-\n-    template<>\n-    complex<FLT>\n-    sqrt(const complex<FLT>& __x)\n-#if defined(_GLIBCPP_BUGGY_FLOAT_COMPLEX) \\\n-      && defined(_GLIBCPP_FLOAT_SPECIALIZATION)\n-    {\n-      complex<FLT> __tmpf(FCT(csqrt)(__x._M_value));\n-      return __tmpf;\n-    }\n-#else\n-    { return complex<FLT>(FCT(csqrt)(__x._M_value)); }\n-#endif\n-\n-    template<>\n-    complex<FLT>\n-    tan(const complex<FLT>& __x)\n-#if defined(_GLIBCPP_BUGGY_FLOAT_COMPLEX) \\\n-      && defined(_GLIBCPP_FLOAT_SPECIALIZATION)\n-    {\n-      complex<FLT> __tmpf(FCT(ctan)(__x._M_value));\n-      return __tmpf;\n-    }\n-#else\n-     { return complex<FLT>(FCT(ctan)(__x._M_value)); }\n-#endif\n-\n-    template<>\n-    complex<FLT>\n-    tanh(const complex<FLT>& __x)\n-#if defined(_GLIBCPP_BUGGY_FLOAT_COMPLEX) \\\n-      && defined(_GLIBCPP_FLOAT_SPECIALIZATION)\n-    {\n-      complex<FLT> __tmpf(FCT(ctanh)(__x._M_value));\n-      return __tmpf;\n-    }\n-#else\n-     { return complex<FLT>(FCT(ctanh)(__x._M_value)); }\n-#endif\n-    \n+  template<>\n+  FLT\n+  abs(const complex<FLT>& __x)\n+  { return cabs(__x._M_value); }\n+\n+  template<>\n+  FLT\n+  arg(const complex<FLT>& __x)\n+  { return carg(__x._M_value); }\n+\n+  template<>\n+  complex<FLT>\n+  polar(const FLT& __rho, const FLT& __theta)\n+  {\n+#if 0\n+// XXX\n+// defined(_GLIBCPP_HAVE_SINCOS) && !defined(__osf__)\n+    // Although sincos does exist on OSF3.2 and OSF4.0 we cannot use it\n+    // since the necessary types are not defined in the headers.\n+    FLT __sinx, __cosx;\n+    sincos(__theta, &__sinx, &__cosx);\n+    return complex<FLT>(__rho * __cosx, __rho * __sinx);\n+#else\n+    return complex<FLT>(__rho * cos(__theta), __rho * sin(__theta));\n+#endif\n+  }\n+\n+  template<>\n+  complex<FLT>\n+  cos(const complex<FLT>& __x)\n+  { return complex<FLT>(ccos(__x._M_value)); }\n+\n+  template<>\n+  complex<FLT>\n+  cosh(const complex<FLT>& __x)\n+  { return complex<FLT>(ccosh(__x._M_value)); }\n+\n+  template<>\n+  complex<FLT>\n+  exp(const complex<FLT>& __x)\n+  { return complex<FLT>(cexp(__x._M_value)); }\n+\n+  template<>\n+  complex<FLT>\n+  log(const complex<FLT>& __x)\n+  { return complex<FLT>(c_log(__x._M_value)); }\n+\n+  template<>\n+  complex<FLT>\n+  log10(const complex<FLT>& __x)\n+  { return complex<FLT>(clog10(__x._M_value)); }\n+  \n+  template<>\n+  complex<FLT>\n+  pow(const complex<FLT>& __x, int __n)\n+  { return complex<FLT>(cexp(__n * c_log(__x._M_value))); }\n+\n+  template<>\n+  complex<FLT>\n+  pow(const complex<FLT>& __x, const FLT& __y)\n+  { return complex<FLT>(cexp(__y * c_log(__x._M_value))); }\n+\n+  template<>\n+  complex<FLT>\n+  pow(const complex<FLT>& __x, const complex<FLT>& __y)\n+  { return complex<FLT>(cpow(__x._M_value, __y._M_value)); }\n+\n+  template<>\n+  complex<FLT>\n+  pow(const FLT& __x, const complex<FLT>& __y)\n+  { return complex<FLT>(cexp(__y._M_value * log(__x))); }\n+\n+  template<>\n+  complex<FLT>\n+  sin(const complex<FLT>& __x)\n+  { return complex<FLT>(csin(__x._M_value)); }\n+\n+  template<>\n+  complex<FLT>\n+  sinh(const complex<FLT>& __x)\n+  { return complex<FLT>(csinh(__x._M_value)); }\n+  \n+  template<>\n+  complex<FLT>\n+  sqrt(const complex<FLT>& __x)\n+  { return complex<FLT>(csqrt(__x._M_value)); }\n+  \n+  template<>\n+  complex<FLT>\n+  tan(const complex<FLT>& __x)\n+  { return complex<FLT>(ctan(__x._M_value)); }\n+  \n+  template<>\n+  complex<FLT>\n+  tanh(const complex<FLT>& __x)\n+  { return complex<FLT>(ctanh(__x._M_value)); }\n+  \n } // namespace std\n \n \n \n \n \n-\n-\n-\n-\n-\n-\n-\n-"}, {"sha": "7831d7e7f6c57c5b9877de825aff651a8b830d3e", "filename": "libstdc++-v3/src/complexf.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fsrc%2Fcomplexf.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fsrc%2Fcomplexf.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcomplexf.cc?ref=0517cb9903a890ecd768fae57ca0356bf901da35", "patch": "@@ -1,5 +1,4 @@\n #define FLT float\n-#define FCT(name) ::name##f\n // Used in complex.cc to work around GCC's buggy __complex__ float support.\n #define _GLIBCPP_FLOAT_SPECIALIZATION 1\n #include \"complex.cc\""}, {"sha": "0cfab1c391083d71ba42f8ce0eafd712aa17541c", "filename": "libstdc++-v3/src/complexl.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fsrc%2Fcomplexl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fsrc%2Fcomplexl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcomplexl.cc?ref=0517cb9903a890ecd768fae57ca0356bf901da35", "patch": "@@ -1,8 +1,7 @@\n #include <bits/c++config.h>\n-#ifdef _GLIBCPP_HAVE_SINL\n+#ifdef _GLIBCPP_USE_LONG_LONG\n /* We compile these functions only when we have the long double functions\n    available.  */\n #define FLT long double\n-#define FCT(name) ::name##l\n #include \"complex.cc\"\n #endif"}, {"sha": "ae56bdbb0407813e7d00d26e5fc7b3fa974e7ac1", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=0517cb9903a890ecd768fae57ca0356bf901da35", "patch": "@@ -38,7 +38,7 @@\n #include <bits/std_vector.h>\n #include <bits/std_memory.h>      // for auto_ptr\n #ifdef _GLIBCPP_USE_WCHAR_T  \n-  #include <bits/std_cwctype.h>     // for towupper, etc.\n+# include <bits/std_cwctype.h>     // for towupper, etc.\n #endif\n \n namespace std {\n@@ -952,7 +952,7 @@ namespace std {\n   do_widen(const char* __low, const char* __high, wchar_t* __dest) const\n   {\n     mbstate_t __state;\n-    memset(&__state, 0, sizeof(mbstate_t));\n+    memset(static_cast<void*>(&__state), 0, sizeof(mbstate_t));\n     mbsrtowcs(__dest, &__low, __high - __low, &__state);\n     return __high;\n   }\n@@ -971,7 +971,7 @@ namespace std {\n \t    char* __dest) const\n   {\n     mbstate_t __state;\n-    memset(&__state, 0, sizeof(mbstate_t));\n+    memset(static_cast<void*>(&__state), 0, sizeof(mbstate_t));\n     size_t __len = __high - __low;\n     size_t __conv = wcsrtombs(__dest, &__low, __len, &__state);\n     if (__conv == __len)"}, {"sha": "8205be07b44c4f61ae51646796c0fd224bd5d061", "filename": "libstdc++-v3/src/localename.cc", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0517cb9903a890ecd768fae57ca0356bf901da35/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc?ref=0517cb9903a890ecd768fae57ca0356bf901da35", "patch": "@@ -29,7 +29,6 @@\n #include <bits/std_clocale.h>\n #include <bits/std_locale.h>\n #include <bits/std_cstring.h>\n-#include <bits/std_cassert.h>\n #include <bits/std_vector.h>\n #include <bits/std_stdexcept.h>\n \n@@ -167,8 +166,6 @@ namespace std {\n   locale::_Impl::\n   _M_replace_categories(const _Impl* __other, category __cat)\n   {\n-    assert((__cat & locale::all) && !(__cat & ~locale::all));\n-    \n     unsigned int __mask = locale::all & -static_cast<unsigned int>(locale::all);\n     for (unsigned int __ix = 0; (-__mask & __cat) != 0; ++__ix, (__mask <<= 1))\n       {"}]}