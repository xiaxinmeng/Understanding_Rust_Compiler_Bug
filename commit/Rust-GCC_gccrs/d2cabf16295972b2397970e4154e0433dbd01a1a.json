{"sha": "d2cabf16295972b2397970e4154e0433dbd01a1a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDJjYWJmMTYyOTU5NzJiMjM5Nzk3MGU0MTU0ZTA0MzNkYmQwMWExYQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1998-06-30T11:10:55Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1998-06-30T11:10:55Z"}, "message": "Add the ability to GCC_NEED_DECLARATION{S} for looking in arbitrary header...\n\nAdd the ability to GCC_NEED_DECLARATION{S} for looking in arbitrary\nheader files when searching for function declarations.  Use this\nfunctionality to check for getrlimit/setrlimit.\n        * aclocal.m4 (GCC_NEED_DECLARATION): Accept an optional second\n        argument, which is typically preprocessor code used to draw in\n        additional header files when looking for a function declaration.\n        (GCC_NEED_DECLARATIONS): Likewise.\n        * configure.in (GCC_NEED_DECLARATIONS): Add checks for getrlimit\n        and setrlimit, search for them in sys/resource.h.\n        * acconfig.h: Add stubs for NEED_DECLARATION_GETRLIMIT and\n        NEED_DECLARATION_SETRLIMIT.\n        * system.h: Prototype getrlimit/setrlimit if necessary.\n\nFrom-SVN: r20831", "tree": {"sha": "6a1d94fc07040fc795481149a70a21bbded1f9e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a1d94fc07040fc795481149a70a21bbded1f9e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2cabf16295972b2397970e4154e0433dbd01a1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2cabf16295972b2397970e4154e0433dbd01a1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2cabf16295972b2397970e4154e0433dbd01a1a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2cabf16295972b2397970e4154e0433dbd01a1a/comments", "author": null, "committer": null, "parents": [{"sha": "70198e3dd05040e173ecac2f997e9ef7d9e868ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70198e3dd05040e173ecac2f997e9ef7d9e868ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70198e3dd05040e173ecac2f997e9ef7d9e868ad"}], "stats": {"total": 137, "additions": 130, "deletions": 7}, "files": [{"sha": "913f9040e1050755140c263b4197fcc40c63624c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2cabf16295972b2397970e4154e0433dbd01a1a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2cabf16295972b2397970e4154e0433dbd01a1a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d2cabf16295972b2397970e4154e0433dbd01a1a", "patch": "@@ -1,3 +1,18 @@\n+Tue Jun 30 14:03:34 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* aclocal.m4 (GCC_NEED_DECLARATION): Accept an optional second\n+\targument, which is typically preprocessor code used to draw in\n+\tadditional header files when looking for a function declaration.\n+\t(GCC_NEED_DECLARATIONS): Likewise.\n+\n+\t* configure.in (GCC_NEED_DECLARATIONS): Add checks for getrlimit\n+\tand setrlimit, search for them in sys/resource.h.\n+\n+\t* acconfig.h: Add stubs for NEED_DECLARATION_GETRLIMIT and\n+\tNEED_DECLARATION_SETRLIMIT.\n+\n+\t* system.h: Prototype getrlimit/setrlimit if necessary.\n+\n Tue Jun 30 10:54:48 1998  Mark Mitchell  <mark@markmitchell.com>\n \n \t* rtl.texi: Don't say that RTX_INTEGRATED_P is unused."}, {"sha": "74d378ea83b5f3aa2cb97d8c2305ac2b21c1da2e", "filename": "gcc/acconfig.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2cabf16295972b2397970e4154e0433dbd01a1a/gcc%2Facconfig.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2cabf16295972b2397970e4154e0433dbd01a1a/gcc%2Facconfig.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Facconfig.h?ref=d2cabf16295972b2397970e4154e0433dbd01a1a", "patch": "@@ -65,6 +65,12 @@\n /* Whether getwd must be declared even if <unistd.h> is included.  */\n #undef NEED_DECLARATION_GETWD\n \n+/* Whether getrlimit must be declared even if <sys/resource.h> is included.  */\n+#undef NEED_DECLARATION_GETRLIMIT\n+\n+/* Whether setrlimit must be declared even if <sys/resource.h> is included.  */\n+#undef NEED_DECLARATION_SETRLIMIT\n+\n /* Define if you want expensive run-time checks. */\n #undef ENABLE_CHECKING\n @TOP@"}, {"sha": "fea020129d2c793e121a24f9eafcc8c87df33fd7", "filename": "gcc/aclocal.m4", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2cabf16295972b2397970e4154e0433dbd01a1a/gcc%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2cabf16295972b2397970e4154e0433dbd01a1a/gcc%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Faclocal.m4?ref=d2cabf16295972b2397970e4154e0433dbd01a1a", "patch": "@@ -1,4 +1,5 @@\n dnl See whether we need a declaration for a function.\n+dnl GCC_NEED_DECLARATION(FUNCTION [, EXTRA-HEADER-FILES])\n AC_DEFUN(GCC_NEED_DECLARATION,\n [AC_MSG_CHECKING([whether $1 must be declared])\n AC_CACHE_VAL(gcc_cv_decl_needed_$1,\n@@ -22,7 +23,8 @@ AC_CACHE_VAL(gcc_cv_decl_needed_$1,\n #endif\n #ifndef HAVE_INDEX\n #define index strchr\n-#endif],\n+#endif\n+$2],\n [char *(*pfn) = (char *(*)) $1],\n eval \"gcc_cv_decl_needed_$1=no\", eval \"gcc_cv_decl_needed_$1=yes\")])\n if eval \"test \\\"`echo '$gcc_cv_decl_needed_'$1`\\\" = yes\"; then\n@@ -35,10 +37,11 @@ fi\n ])dnl\n \n dnl Check multiple functions to see whether each needs a declaration.\n+dnl GCC_NEED_DECLARATIONS(FUNCTION... [, EXTRA-HEADER-FILES])\n AC_DEFUN(GCC_NEED_DECLARATIONS,\n [for ac_func in $1\n do\n-GCC_NEED_DECLARATION($ac_func)\n+GCC_NEED_DECLARATION($ac_func, $2)\n done\n ])\n "}, {"sha": "5cb748a0430ec2494993acaddf965579ca5783ab", "filename": "gcc/config.in", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2cabf16295972b2397970e4154e0433dbd01a1a/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2cabf16295972b2397970e4154e0433dbd01a1a/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=d2cabf16295972b2397970e4154e0433dbd01a1a", "patch": "@@ -66,6 +66,15 @@\n /* Whether getwd must be declared even if <unistd.h> is included.  */\n #undef NEED_DECLARATION_GETWD\n \n+/* Whether getrlimit must be declared even if <sys/resource.h> is included.  */\n+#undef NEED_DECLARATION_GETRLIMIT\n+\n+/* Whether setrlimit must be declared even if <sys/resource.h> is included.  */\n+#undef NEED_DECLARATION_SETRLIMIT\n+\n+/* Define if you want expensive run-time checks. */\n+#undef ENABLE_CHECKING\n+\n /* Define if you don't have vprintf but do have _doprnt.  */\n #undef HAVE_DOPRNT\n "}, {"sha": "e59c70d27e03bbf97852dcb371c9a52adfadedb0", "filename": "gcc/configure", "status": "modified", "additions": 72, "deletions": 5, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2cabf16295972b2397970e4154e0433dbd01a1a/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2cabf16295972b2397970e4154e0433dbd01a1a/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=d2cabf16295972b2397970e4154e0433dbd01a1a", "patch": "@@ -1976,11 +1976,78 @@ else\n #ifndef HAVE_INDEX\n #define index strchr\n #endif\n+\n+int main() {\n+char *(*pfn) = (char *(*)) $ac_func\n+; return 0; }\n+EOF\n+if { (eval echo configure:1985: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+  rm -rf conftest*\n+  eval \"gcc_cv_decl_needed_$ac_func=no\"\n+else\n+  echo \"configure: failed program was:\" >&5\n+  cat conftest.$ac_ext >&5\n+  rm -rf conftest*\n+  eval \"gcc_cv_decl_needed_$ac_func=yes\"\n+fi\n+rm -f conftest*\n+fi\n+\n+if eval \"test \\\"`echo '$gcc_cv_decl_needed_'$ac_func`\\\" = yes\"; then\n+  echo \"$ac_t\"\"yes\" 1>&6\n+  gcc_tr_decl=NEED_DECLARATION_`echo $ac_func | tr 'abcdefghijklmnopqrstuvwxyz' 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'`\n+  cat >> confdefs.h <<EOF\n+#define $gcc_tr_decl 1\n+EOF\n+\n+else\n+  echo \"$ac_t\"\"no\" 1>&6\n+fi\n+\n+done\n+\n+\n+for ac_func in getrlimit setrlimit\n+do\n+echo $ac_n \"checking whether $ac_func must be declared\"\"... $ac_c\" 1>&6\n+echo \"configure:2014: checking whether $ac_func must be declared\" >&5\n+if eval \"test \\\"`echo '$''{'gcc_cv_decl_needed_$ac_func'+set}'`\\\" = set\"; then\n+  echo $ac_n \"(cached) $ac_c\" 1>&6\n+else\n+  cat > conftest.$ac_ext <<EOF\n+#line 2019 \"configure\"\n+#include \"confdefs.h\"\n+\n+#include <stdio.h>\n+#ifdef HAVE_STRING_H\n+#include <string.h>\n+#else\n+#ifdef HAVE_STRINGS_H\n+#include <strings.h>\n+#endif\n+#endif\n+#ifdef HAVE_STDLIB_H\n+#include <stdlib.h>\n+#endif\n+#ifdef HAVE_UNISTD_H\n+#include <unistd.h>\n+#endif\n+#ifndef HAVE_RINDEX\n+#define rindex strrchr\n+#endif\n+#ifndef HAVE_INDEX\n+#define index strchr\n+#endif\n+#include <sys/types.h>\n+#ifdef HAVE_SYS_RESOURCE_H\n+#include <sys/resource.h>\n+#endif\n+\n int main() {\n char *(*pfn) = (char *(*)) $ac_func\n ; return 0; }\n EOF\n-if { (eval echo configure:1984: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:2051: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   eval \"gcc_cv_decl_needed_$ac_func=no\"\n else\n@@ -2007,12 +2074,12 @@ done\n \n \n echo $ac_n \"checking for sys_siglist declaration in signal.h or unistd.h\"\"... $ac_c\" 1>&6\n-echo \"configure:2011: checking for sys_siglist declaration in signal.h or unistd.h\" >&5\n+echo \"configure:2078: checking for sys_siglist declaration in signal.h or unistd.h\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_decl_sys_siglist'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 2016 \"configure\"\n+#line 2083 \"configure\"\n #include \"confdefs.h\"\n #include <sys/types.h>\n #include <signal.h>\n@@ -2024,7 +2091,7 @@ int main() {\n char *msg = *(sys_siglist + 1);\n ; return 0; }\n EOF\n-if { (eval echo configure:2028: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:2095: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   ac_cv_decl_sys_siglist=yes\n else\n@@ -5147,7 +5214,7 @@ fi\n \n # Figure out what assembler alignment features are present.\n echo $ac_n \"checking assembler alignment features\"\"... $ac_c\" 1>&6\n-echo \"configure:5151: checking assembler alignment features\" >&5\n+echo \"configure:5218: checking assembler alignment features\" >&5\n gcc_cv_as=\n gcc_cv_as_alignment_features=\n if [ -x as$host_exeext ]; then"}, {"sha": "9a6ed54d6c630456242c45282cceaebbd7217f3b", "filename": "gcc/configure.in", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2cabf16295972b2397970e4154e0433dbd01a1a/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2cabf16295972b2397970e4154e0433dbd01a1a/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=d2cabf16295972b2397970e4154e0433dbd01a1a", "patch": "@@ -199,6 +199,13 @@ GCC_FUNC_PRINTF_PTR\n GCC_NEED_DECLARATIONS(malloc realloc calloc free bcopy bzero bcmp \\\n \tindex rindex getenv atol sbrk abort atof strerror getcwd getwd)\n \n+GCC_NEED_DECLARATIONS(getrlimit setrlimit, [\n+#include <sys/types.h>\n+#ifdef HAVE_SYS_RESOURCE_H\n+#include <sys/resource.h>\n+#endif\n+])\n+\n AC_DECL_SYS_SIGLIST\n \n # File extensions"}, {"sha": "27b1fee6bdfab93a7c3b71d7e849c382f3032715", "filename": "gcc/system.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2cabf16295972b2397970e4154e0433dbd01a1a/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2cabf16295972b2397970e4154e0433dbd01a1a/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=d2cabf16295972b2397970e4154e0433dbd01a1a", "patch": "@@ -235,6 +235,22 @@ extern int sys_nerr;\n extern char *sys_errlist[];\n #endif /* HAVE_STRERROR */\n \n+#ifdef HAVE_GETRLIMIT\n+# ifdef NEED_DECLARATION_GETRLIMIT\n+#  ifndef getrlimit\n+extern int getrlimit ();\n+#  endif\n+# endif\n+#endif\n+\n+#ifdef HAVE_SETRLIMIT\n+# ifdef NEED_DECLARATION_SETRLIMIT\n+#  ifndef setrlimit\n+extern int setrlimit ();\n+#  endif\n+# endif\n+#endif\n+\n /* HAVE_VOLATILE only refers to the stage1 compiler.  We also check\n    __STDC__ and assume gcc sets it and has volatile in stage >=2. */\n #if !defined(HAVE_VOLATILE) && !defined(__STDC__) && !defined(volatile)"}]}