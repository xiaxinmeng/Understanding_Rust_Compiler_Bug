{"sha": "b0832fe1f38ce3553cb4d3b91b4821565c9d0d36", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjA4MzJmZTFmMzhjZTM1NTNjYjRkM2I5MWI0ODIxNTY1YzlkMGQzNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2002-01-04T21:03:20Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2002-01-04T21:03:20Z"}, "message": "tree.h (expand_expr_stmt_value): Add maybe_last argument.\n\n\t* tree.h (expand_expr_stmt_value): Add maybe_last argument.\n\t* c-common.h (genrtl_expr_stmt_value): Likewise.\n\t* stmt.c (expand_expr_stmt): Pass 1 as maybe_last.\n\t(expand_expr_stmt_value): Add maybe_last argument.\n\tDon't warn about statement with no effect if it is the last statement\n\tin expression statement.\n\t* c-semantics.c (genrtl_expr_stmt): Pass 1 as maybe_last.\n\t(genrtl_expr_stmt_value): Add maybe_last argument, pass it down to\n\texpand_expr_stmt_value.\n\t(expand_stmt) [EXPR_STMT]: Pass 1 as maybe_last to\n\tgenrtl_expr_stmt_value if t is the last EXPR_STMT in its scope.\n\t* expr.c (expand_expr) [LABELED_BLOCK_EXPR, LOOP_EXPR]: Pass 1\n\tas maybe_last to expand_expr_stmt_value.\n\n\t* gcc.dg/20020104-1.c: New test.\n\nFrom-SVN: r48541", "tree": {"sha": "39b333f5be357db96e4a98270b060aeefbef3de7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39b333f5be357db96e4a98270b060aeefbef3de7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0832fe1f38ce3553cb4d3b91b4821565c9d0d36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0832fe1f38ce3553cb4d3b91b4821565c9d0d36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0832fe1f38ce3553cb4d3b91b4821565c9d0d36", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0832fe1f38ce3553cb4d3b91b4821565c9d0d36/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "81550d0e5fea4bf706390c9cd84b14d6f8d8fe3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81550d0e5fea4bf706390c9cd84b14d6f8d8fe3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81550d0e5fea4bf706390c9cd84b14d6f8d8fe3e"}], "stats": {"total": 79, "additions": 64, "deletions": 15}, "files": [{"sha": "ad2c5eff834c2c70c51069fc5da26331953b4d21", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0832fe1f38ce3553cb4d3b91b4821565c9d0d36/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0832fe1f38ce3553cb4d3b91b4821565c9d0d36/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b0832fe1f38ce3553cb4d3b91b4821565c9d0d36", "patch": "@@ -1,3 +1,19 @@\n+2002-01-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* tree.h (expand_expr_stmt_value): Add maybe_last argument.\n+\t* c-common.h (genrtl_expr_stmt_value): Likewise.\n+\t* stmt.c (expand_expr_stmt): Pass 1 as maybe_last.\n+\t(expand_expr_stmt_value): Add maybe_last argument.\n+\tDon't warn about statement with no effect if it is the last statement\n+\tin expression statement.\n+\t* c-semantics.c (genrtl_expr_stmt): Pass 1 as maybe_last.\n+\t(genrtl_expr_stmt_value): Add maybe_last argument, pass it down to\n+\texpand_expr_stmt_value.\n+\t(expand_stmt) [EXPR_STMT]: Pass 1 as maybe_last to\n+\tgenrtl_expr_stmt_value if t is the last EXPR_STMT in its scope.\n+\t* expr.c (expand_expr) [LABELED_BLOCK_EXPR, LOOP_EXPR]: Pass 1\n+\tas maybe_last to expand_expr_stmt_value.\n+\n Fri Jan  4 11:45:05 2002  Jeffrey A Law  (law@redhat.com)\n \n         * c-common.c (c_expand_start_cond): Expect the IF_STMT node to"}, {"sha": "873021bc2db21d15bf255a8b52fc657e8a7cb028", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0832fe1f38ce3553cb4d3b91b4821565c9d0d36/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0832fe1f38ce3553cb4d3b91b4821565c9d0d36/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=b0832fe1f38ce3553cb4d3b91b4821565c9d0d36", "patch": "@@ -721,7 +721,7 @@ extern void add_c_tree_codes\t\t        PARAMS ((void));\n extern void genrtl_do_pushlevel                 PARAMS ((void));\n extern void genrtl_goto_stmt                    PARAMS ((tree));\n extern void genrtl_expr_stmt                    PARAMS ((tree));\n-extern void genrtl_expr_stmt_value              PARAMS ((tree, int));\n+extern void genrtl_expr_stmt_value              PARAMS ((tree, int, int));\n extern void genrtl_decl_stmt                    PARAMS ((tree));\n extern void genrtl_if_stmt                      PARAMS ((tree));\n extern void genrtl_while_stmt                   PARAMS ((tree));"}, {"sha": "4bab4d3aaa6043fb9bac29a95ba44b9d89ae09f0", "filename": "gcc/c-semantics.c", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0832fe1f38ce3553cb4d3b91b4821565c9d0d36/gcc%2Fc-semantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0832fe1f38ce3553cb4d3b91b4821565c9d0d36/gcc%2Fc-semantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-semantics.c?ref=b0832fe1f38ce3553cb4d3b91b4821565c9d0d36", "patch": "@@ -313,18 +313,20 @@ void\n genrtl_expr_stmt (expr)\n      tree expr;\n {\n-  genrtl_expr_stmt_value (expr, -1);\n+  genrtl_expr_stmt_value (expr, -1, 1);\n }\n \n /* Generate the RTL for EXPR, which is an EXPR_STMT.  WANT_VALUE tells\n    whether to (1) save the value of the expression, (0) discard it or\n    (-1) use expr_stmts_for_value to tell.  The use of -1 is\n-   deprecated, and retained only for backward compatibility.  */\n+   deprecated, and retained only for backward compatibility.\n+   MAYBE_LAST is non-zero if this EXPR_STMT might be the last statement\n+   in expression statement.  */\n \n void \n-genrtl_expr_stmt_value (expr, want_value)\n+genrtl_expr_stmt_value (expr, want_value, maybe_last)\n      tree expr;\n-     int want_value;\n+     int want_value, maybe_last;\n {\n   if (expr != NULL_TREE)\n     {\n@@ -334,7 +336,7 @@ genrtl_expr_stmt_value (expr, want_value)\n \texpand_start_target_temps ();\n       \n       if (expr != error_mark_node)\n-\texpand_expr_stmt_value (expr, want_value);\n+\texpand_expr_stmt_value (expr, want_value, maybe_last);\n       \n       if (stmts_are_full_exprs_p ())\n \texpand_end_target_temps ();\n@@ -763,7 +765,10 @@ expand_stmt (t)\n \t  break;\n \n \tcase EXPR_STMT:\n-\t  genrtl_expr_stmt_value (EXPR_STMT_EXPR (t), TREE_ADDRESSABLE (t));\n+\t  genrtl_expr_stmt_value (EXPR_STMT_EXPR (t), TREE_ADDRESSABLE (t),\n+\t\t\t\t  TREE_CHAIN (t) == NULL\n+\t\t\t\t  || (TREE_CODE (TREE_CHAIN (t)) == SCOPE_STMT\n+\t\t\t\t      && TREE_CHAIN (TREE_CHAIN (t)) == NULL));\n \t  break;\n \n \tcase DECL_STMT:"}, {"sha": "04d801de76ff0e976d917c442e9a93354bb26ade", "filename": "gcc/expr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0832fe1f38ce3553cb4d3b91b4821565c9d0d36/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0832fe1f38ce3553cb4d3b91b4821565c9d0d36/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=b0832fe1f38ce3553cb4d3b91b4821565c9d0d36", "patch": "@@ -6453,7 +6453,7 @@ expand_expr (exp, target, tmode, modifier)\n \n     case LABELED_BLOCK_EXPR:\n       if (LABELED_BLOCK_BODY (exp))\n-\texpand_expr_stmt_value (LABELED_BLOCK_BODY (exp), 0);\n+\texpand_expr_stmt_value (LABELED_BLOCK_BODY (exp), 0, 1);\n       /* Should perhaps use expand_label, but this is simpler and safer.  */\n       do_pending_stack_adjust ();\n       emit_label (label_rtx (LABELED_BLOCK_LABEL (exp)));\n@@ -6468,7 +6468,7 @@ expand_expr (exp, target, tmode, modifier)\n     case LOOP_EXPR:\n       push_temp_slots ();\n       expand_start_loop (1);\n-      expand_expr_stmt_value (TREE_OPERAND (exp, 0), 0);\n+      expand_expr_stmt_value (TREE_OPERAND (exp, 0), 0, 1);\n       expand_end_loop ();\n       pop_temp_slots ();\n "}, {"sha": "6933599a89e44bd311e69ab4c702e8b046d0c695", "filename": "gcc/stmt.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0832fe1f38ce3553cb4d3b91b4821565c9d0d36/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0832fe1f38ce3553cb4d3b91b4821565c9d0d36/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=b0832fe1f38ce3553cb4d3b91b4821565c9d0d36", "patch": "@@ -2190,7 +2190,7 @@ void\n expand_expr_stmt (exp)\n      tree exp;\n {\n-  expand_expr_stmt_value (exp, -1);\n+  expand_expr_stmt_value (exp, -1, 1);\n }\n \n /* Generate RTL to evaluate the expression EXP.  WANT_VALUE tells\n@@ -2199,9 +2199,9 @@ expand_expr_stmt (exp)\n    deprecated, and retained only for backward compatibility.  */\n \n void\n-expand_expr_stmt_value (exp, want_value)\n+expand_expr_stmt_value (exp, want_value, maybe_last)\n      tree exp;\n-     int want_value;\n+     int want_value, maybe_last;\n {\n   rtx value;\n   tree type;\n@@ -2211,8 +2211,10 @@ expand_expr_stmt_value (exp, want_value)\n \n   /* If -W, warn about statements with no side effects,\n      except for an explicit cast to void (e.g. for assert()), and\n-     except inside a ({...}) where they may be useful.  */\n-  if (! want_value && exp != error_mark_node)\n+     except for last statement in ({...}) where they may be useful.  */\n+  if (! want_value\n+      && (expr_stmts_for_value == 0 || ! maybe_last)\n+      && exp != error_mark_node)\n     {\n       if (! TREE_SIDE_EFFECTS (exp))\n \t{"}, {"sha": "657035c2845d920f765d087cf85250bcfca639df", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0832fe1f38ce3553cb4d3b91b4821565c9d0d36/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0832fe1f38ce3553cb4d3b91b4821565c9d0d36/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b0832fe1f38ce3553cb4d3b91b4821565c9d0d36", "patch": "@@ -1,3 +1,7 @@\n+2002-01-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.dg/20020104-1.c: New test.\n+\n 2002-01-04  Hans-Peter Nilsson  <hp@bitrange.com>\n \n \t* gcc.dg/20020103-1.c: Fix typo in target selector."}, {"sha": "be36a7427ae1536f628b44f6529b79f150237df4", "filename": "gcc/testsuite/gcc.dg/20020104-1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0832fe1f38ce3553cb4d3b91b4821565c9d0d36/gcc%2Ftestsuite%2Fgcc.dg%2F20020104-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0832fe1f38ce3553cb4d3b91b4821565c9d0d36/gcc%2Ftestsuite%2Fgcc.dg%2F20020104-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20020104-1.c?ref=b0832fe1f38ce3553cb4d3b91b4821565c9d0d36", "patch": "@@ -0,0 +1,22 @@\n+/* Test whether statement with no effect warnings are not given for last\n+   statements inside of statement expression.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O -Wall\" } */\n+\n+void bar (char *p, char *q);\n+\n+int main()\n+{\n+  char foo [32], *p;\n+\n+  ({\n+    void *s = (foo);\n+    __builtin_memset (s, '\\0', sizeof (foo));\n+    s; /* { dg-warning \"no effect\" \"statement with no effect warning\" } */\n+    s; /* { dg-bogus \"no effect\" \"bogus statement with no effect warning\" } */\n+  });\n+  p = foo;\n+  p;   /* { dg-warning \"no effect\" \"statement with no effect warning\" } */\n+  bar (foo, p);\n+  return 0;\n+}"}, {"sha": "642b55543892e54353a82de7f864bd486a71cde0", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0832fe1f38ce3553cb4d3b91b4821565c9d0d36/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0832fe1f38ce3553cb4d3b91b4821565c9d0d36/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=b0832fe1f38ce3553cb4d3b91b4821565c9d0d36", "patch": "@@ -2720,7 +2720,7 @@ extern void expand_fixups\t\t\tPARAMS ((rtx));\n extern tree expand_start_stmt_expr\t\tPARAMS ((void));\n extern tree expand_end_stmt_expr\t\tPARAMS ((tree));\n extern void expand_expr_stmt\t\t\tPARAMS ((tree));\n-extern void expand_expr_stmt_value\t\tPARAMS ((tree, int));\n+extern void expand_expr_stmt_value\t\tPARAMS ((tree, int, int));\n extern int warn_if_unused_value\t\t\tPARAMS ((tree));\n extern void expand_decl_init\t\t\tPARAMS ((tree));\n extern void clear_last_expr\t\t\tPARAMS ((void));"}]}