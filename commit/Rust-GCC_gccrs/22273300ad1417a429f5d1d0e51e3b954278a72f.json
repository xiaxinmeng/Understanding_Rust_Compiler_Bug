{"sha": "22273300ad1417a429f5d1d0e51e3b954278a72f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjIyNzMzMDBhZDE0MTdhNDI5ZjVkMWQwZTUxZTNiOTU0Mjc4YTcyZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2002-02-21T21:11:08Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2002-02-21T21:11:08Z"}, "message": "re PR c++/4574 (Internal compiler error in `expand_and', at expmed.c:4055)\n\n\tPR c++/4574\n\t* expr.h (expand_and): Add mode argument.\n\t* expmed.c (expand_and): Add mode argument.\n\t(expand_mult_highpart_adjust, emit_store_flag): Adjust callers.\n\t* expr.c (store_field, expand_expr, do_store_flag): Likewise.\n\t* except.c (expand_builtin_extract_return_addr): Likewise.\n\t* config/alpha/alpha.c (alpha_initialize_trampoline): Likewise.\n\t* config/sparc/sparc.c (sparc_initialize_trampoline): Likewise.\n\t* config/c4x/c4x.h (INITIALIZE_TRAMPOLINE): Likewise.\n\tUse GEN_INT (x) instead of gen_rtx (CONST_INT, VOIDmode, x).\n\t* config/c4x/c4x.md: Use GEN_INT (x) instead of\n\tgen_rtx (CONST_INT, VOIDmode, x).\n\n\t* gcc.dg/20020220-1.c: New test.\n\nFrom-SVN: r49938", "tree": {"sha": "53af922ab93c931646d1f9c027ff95539927bd5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53af922ab93c931646d1f9c027ff95539927bd5e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22273300ad1417a429f5d1d0e51e3b954278a72f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22273300ad1417a429f5d1d0e51e3b954278a72f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22273300ad1417a429f5d1d0e51e3b954278a72f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22273300ad1417a429f5d1d0e51e3b954278a72f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7133e9921a9cfd599637a1d539b206b21e79545d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7133e9921a9cfd599637a1d539b206b21e79545d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7133e9921a9cfd599637a1d539b206b21e79545d"}], "stats": {"total": 146, "additions": 84, "deletions": 62}, "files": [{"sha": "2805d63dfc4afec01988dc3f7605a5aa6d74312d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22273300ad1417a429f5d1d0e51e3b954278a72f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22273300ad1417a429f5d1d0e51e3b954278a72f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=22273300ad1417a429f5d1d0e51e3b954278a72f", "patch": "@@ -1,3 +1,18 @@\n+2002-02-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/4574\n+\t* expr.h (expand_and): Add mode argument.\n+\t* expmed.c (expand_and): Add mode argument.\n+\t(expand_mult_highpart_adjust, emit_store_flag): Adjust callers.\n+\t* expr.c (store_field, expand_expr, do_store_flag): Likewise.\n+\t* except.c (expand_builtin_extract_return_addr): Likewise.\n+\t* config/alpha/alpha.c (alpha_initialize_trampoline): Likewise.\n+\t* config/sparc/sparc.c (sparc_initialize_trampoline): Likewise.\n+\t* config/c4x/c4x.h (INITIALIZE_TRAMPOLINE): Likewise.\n+\tUse GEN_INT (x) instead of gen_rtx (CONST_INT, VOIDmode, x).\n+\t* config/c4x/c4x.md: Use GEN_INT (x) instead of\n+\tgen_rtx (CONST_INT, VOIDmode, x).\n+\n 2002-02-21  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/4697:"}, {"sha": "69f7870eeb17f5577a740d849b09e27c58578300", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22273300ad1417a429f5d1d0e51e3b954278a72f/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22273300ad1417a429f5d1d0e51e3b954278a72f/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=22273300ad1417a429f5d1d0e51e3b954278a72f", "patch": "@@ -5503,12 +5503,13 @@ alpha_initialize_trampoline (tramp, fnaddr, cxt, fnofs, cxtofs, jmpofs)\n \t\t\t   OPTAB_WIDEN);\n       temp = expand_shift (RSHIFT_EXPR, Pmode, temp,\n \t\t           build_int_2 (2, 0), NULL_RTX, 1);\n-      temp = expand_and (gen_lowpart (SImode, temp), GEN_INT (0x3fff), 0);\n+      temp = expand_and (SImode, gen_lowpart (SImode, temp),\n+\t\t\t GEN_INT (0x3fff), 0);\n \n       /* Merge in the hint.  */\n       addr = memory_address (SImode, plus_constant (tramp, jmpofs));\n       temp1 = force_reg (SImode, gen_rtx_MEM (SImode, addr));\n-      temp1 = expand_and (temp1, GEN_INT (0xffffc000), NULL_RTX);\n+      temp1 = expand_and (SImode, temp1, GEN_INT (0xffffc000), NULL_RTX);\n       temp1 = expand_binop (SImode, ior_optab, temp1, temp, temp1, 1,\n \t\t\t    OPTAB_WIDEN);\n       emit_move_insn (gen_rtx_MEM (SImode, addr), temp1);"}, {"sha": "5ae16ab3306490d234ad22e236058373148670d0", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22273300ad1417a429f5d1d0e51e3b954278a72f/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22273300ad1417a429f5d1d0e51e3b954278a72f/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=22273300ad1417a429f5d1d0e51e3b954278a72f", "patch": "@@ -2169,32 +2169,26 @@ do { fprintf (asm_out_file, \"\\t.sdef\\t\");\t\t\\\n       tmp1 = expand_shift (RSHIFT_EXPR, QImode, FNADDR,\t\t\t\\\n \t\t\t   size_int (16), 0, 1);\t\t\t\\\n       tmp2 = expand_shift (LSHIFT_EXPR, QImode,\t\t\t\t\\\n-\t\t\t   gen_rtx (CONST_INT, VOIDmode, 0x5069),\t\\\n-\t\t\t   size_int (16), 0, 1);\t\t\t\\\n+\t\t\t   GEN_INT (0x5069), size_int (16), 0, 1);\t\\\n       emit_insn (gen_iorqi3 (tmp1, tmp1, tmp2));\t\t\t\\\n       emit_move_insn (gen_rtx (MEM, QImode,\t\t\t\t\\\n \t\t\t       plus_constant (tramp, 0)), tmp1);\t\\\n-      tmp1 = expand_and (FNADDR, gen_rtx (CONST_INT, VOIDmode,\t\t\\\n-\t\t\t\t\t  0xffff), 0);\t\t\t\\\n+      tmp1 = expand_and (QImode, FNADDR, GEN_INT (0xffff), 0);\t\t\\\n       tmp2 = expand_shift (LSHIFT_EXPR, QImode,\t\t\t\t\\\n-\t\t\t   gen_rtx (CONST_INT, VOIDmode, 0x1069),\t\\\n-\t\t\t   size_int (16), 0, 1);\t\t\t\\\n+\t\t\t   GEN_INT (0x1069), size_int (16), 0, 1);\t\\\n       emit_insn (gen_iorqi3 (tmp1, tmp1, tmp2));\t\t\t\\\n       emit_move_insn (gen_rtx (MEM, QImode,\t\t\t\t\\\n \t\t\t       plus_constant (tramp, 2)), tmp1);\t\\\n       tmp1 = expand_shift (RSHIFT_EXPR, QImode, CXT,\t\t\t\\\n \t\t\t   size_int (16), 0, 1);\t\t\t\\\n       tmp2 = expand_shift (LSHIFT_EXPR, QImode,\t\t\t\t\\\n-\t\t\t   gen_rtx (CONST_INT, VOIDmode, 0x5068),\t\\\n-\t\t\t   size_int (16), 0, 1);\t\t\t\\\n+\t\t\t   GEN_INT (0x5068), size_int (16), 0, 1);\t\\\n       emit_insn (gen_iorqi3 (tmp1, tmp1, tmp2));\t\t\t\\\n       emit_move_insn (gen_rtx (MEM, QImode,\t\t\t\t\\\n \t\t\t       plus_constant (tramp, 3)), tmp1);\t\\\n-      tmp1 = expand_and (CXT, gen_rtx (CONST_INT, VOIDmode,\t\t\\\n-\t\t\t\t       0xffff), 0);\t\t\t\\\n+      tmp1 = expand_and (QImode, CXT, GEN_INT (0xffff), 0);\t\t\\\n       tmp2 = expand_shift (LSHIFT_EXPR, QImode,\t\t\t\t\\\n-\t\t\t   gen_rtx (CONST_INT, VOIDmode, 0x1068),\t\\\n-\t\t\t   size_int (16), 0, 1);\t\t\t\\\n+\t\t\t   GEN_INT (0x1068), size_int (16), 0, 1);\t\\\n       emit_insn (gen_iorqi3 (tmp1, tmp1, tmp2));\t\t\t\\\n       emit_move_insn (gen_rtx (MEM, QImode,\t\t\t\t\\\n \t\t\t       plus_constant (tramp, 6)), tmp1);\t\\"}, {"sha": "242ed154cfe8309322af82b4e65da45bad97e9ce", "filename": "gcc/config/c4x/c4x.md", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22273300ad1417a429f5d1d0e51e3b954278a72f/gcc%2Fconfig%2Fc4x%2Fc4x.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22273300ad1417a429f5d1d0e51e3b954278a72f/gcc%2Fconfig%2Fc4x%2Fc4x.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.md?ref=22273300ad1417a429f5d1d0e51e3b954278a72f", "patch": "@@ -984,8 +984,8 @@\n    (set (match_dup 0) (ior:QI (match_dup 0) (match_dup 3)))]\n   \"\n {\n-   operands[2] = gen_rtx (CONST_INT, VOIDmode, INTVAL (operands[1]) & ~0xffff);\n-   operands[3] = gen_rtx (CONST_INT, VOIDmode, INTVAL (operands[1]) & 0xffff);\n+   operands[2] = GEN_INT (INTVAL (operands[1]) & ~0xffff);\n+   operands[3] = GEN_INT (INTVAL (operands[1]) & 0xffff);\n }\")\n \n (define_split\n@@ -1000,8 +1000,8 @@\n    (set (match_dup 0) (ior:QI (match_dup 0) (match_dup 3)))]\n   \"\n {\n-   operands[2] = gen_rtx (CONST_INT, VOIDmode, INTVAL (operands[1]) & ~0xffff);\n-   operands[3] = gen_rtx (CONST_INT, VOIDmode, INTVAL (operands[1]) & 0xffff);\n+   operands[2] = GEN_INT (INTVAL (operands[1]) & ~0xffff);\n+   operands[3] = GEN_INT (INTVAL (operands[1]) & 0xffff);\n }\")\n \n (define_split\n@@ -1022,8 +1022,8 @@\n    operands[2] = gen_rtx (CONST_INT, VOIDmode,\n \t\t\t  (((INTVAL (operands[1]) >> 16) & 0xffff)\n \t\t\t   - 0x8000) ^ ~0x7fff);\n-   operands[3] = gen_rtx (CONST_INT, VOIDmode, INTVAL (operands[1]) & 0xffff);\n-   operands[4] = gen_rtx (CONST_INT, VOIDmode, 16);\n+   operands[3] = GEN_INT (INTVAL (operands[1]) & 0xffff);\n+   operands[4] = GEN_INT (16);\n }\")\n \n (define_split\n@@ -1043,8 +1043,8 @@\n    operands[2] = gen_rtx (CONST_INT, VOIDmode,\n \t\t\t  (((INTVAL (operands[1]) >> 16) & 0xffff)\n \t\t\t   - 0x8000) ^ ~0x7fff);\n-   operands[3] = gen_rtx (CONST_INT, VOIDmode, INTVAL (operands[1]) & 0xffff);\n-   operands[4] = gen_rtx (CONST_INT, VOIDmode, 16);\n+   operands[3] = GEN_INT (INTVAL (operands[1]) & 0xffff);\n+   operands[4] = GEN_INT (16);\n }\")\n \n (define_split\n@@ -1063,10 +1063,9 @@\n    /* Generate two's complement value of MSBs.  */\n    int shift = c4x_shiftable_constant (operands[1]);\n \n-   operands[2] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t  (((INTVAL (operands[1]) >> shift) & 0xffff)\n+   operands[2] = GEN_INT ((((INTVAL (operands[1]) >> shift) & 0xffff)\n \t\t\t   - 0x8000) ^ ~0x7fff);\n-   operands[3] = gen_rtx (CONST_INT, VOIDmode, shift);\n+   operands[3] = GEN_INT (shift);\n }\")\n \n (define_split\n@@ -1084,10 +1083,9 @@\n    /* Generate two's complement value of MSBs.  */\n    int shift = c4x_shiftable_constant (operands[1]);\n \n-   operands[2] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t  (((INTVAL (operands[1]) >> shift) & 0xffff)\n-\t\t\t   - 0x8000) ^ ~0x7fff);\n-   operands[3] = gen_rtx (CONST_INT, VOIDmode, shift);\n+   operands[2] = GEN_INT ((((INTVAL (operands[1]) >> shift) & 0xffff)\n+\t\t\t    - 0x8000) ^ ~0x7fff);\n+   operands[3] = GEN_INT (shift);\n }\")\n \n (define_split"}, {"sha": "928489e9083761402eea394f7e83f37c453c1345", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22273300ad1417a429f5d1d0e51e3b954278a72f/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22273300ad1417a429f5d1d0e51e3b954278a72f/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=22273300ad1417a429f5d1d0e51e3b954278a72f", "patch": "@@ -6292,13 +6292,15 @@ sparc_initialize_trampoline (tramp, fnaddr, cxt)\n \n   emit_move_insn (gen_rtx_MEM (SImode, plus_constant (tramp, 8)),\n \t\t  expand_binop (SImode, ior_optab,\n-\t\t\t\texpand_and (fnaddr, GEN_INT (0x3ff), NULL_RTX),\n+\t\t\t\texpand_and (SImode, fnaddr, GEN_INT (0x3ff),\n+\t\t\t\t\t    NULL_RTX),\n \t\t\t\tGEN_INT (0x81c06000),\n \t\t\t\tNULL_RTX, 1, OPTAB_DIRECT));\n \n   emit_move_insn (gen_rtx_MEM (SImode, plus_constant (tramp, 12)),\n \t\t  expand_binop (SImode, ior_optab,\n-\t\t\t\texpand_and (cxt, GEN_INT (0x3ff), NULL_RTX),\n+\t\t\t\texpand_and (SImode, cxt, GEN_INT (0x3ff),\n+\t\t\t\t\t    NULL_RTX),\n \t\t\t\tGEN_INT (0x8410a000),\n \t\t\t\tNULL_RTX, 1, OPTAB_DIRECT));\n "}, {"sha": "939610ffc1f54bbc510d79db32268d5e0d92e215", "filename": "gcc/except.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22273300ad1417a429f5d1d0e51e3b954278a72f/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22273300ad1417a429f5d1d0e51e3b954278a72f/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=22273300ad1417a429f5d1d0e51e3b954278a72f", "patch": "@@ -3088,7 +3088,7 @@ expand_builtin_extract_return_addr (addr_tree)\n \n   /* First mask out any unwanted bits.  */\n #ifdef MASK_RETURN_ADDR\n-  expand_and (addr, MASK_RETURN_ADDR, addr);\n+  expand_and (Pmode, addr, MASK_RETURN_ADDR, addr);\n #endif\n \n   /* Then adjust to find the real return address.  */"}, {"sha": "11304618aa13dfb88a9d2268ec781e2b700271d1", "filename": "gcc/expmed.c", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22273300ad1417a429f5d1d0e51e3b954278a72f/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22273300ad1417a429f5d1d0e51e3b954278a72f/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=22273300ad1417a429f5d1d0e51e3b954278a72f", "patch": "@@ -2717,15 +2717,15 @@ expand_mult_highpart_adjust (mode, adj_operand, op0, op1, target, unsignedp)\n   tem = expand_shift (RSHIFT_EXPR, mode, op0,\n \t\t      build_int_2 (GET_MODE_BITSIZE (mode) - 1, 0),\n \t\t      NULL_RTX, 0);\n-  tem = expand_and (tem, op1, NULL_RTX);\n+  tem = expand_and (mode, tem, op1, NULL_RTX);\n   adj_operand\n     = force_operand (gen_rtx_fmt_ee (adj_code, mode, adj_operand, tem),\n \t\t     adj_operand);\n \n   tem = expand_shift (RSHIFT_EXPR, mode, op1,\n \t\t      build_int_2 (GET_MODE_BITSIZE (mode) - 1, 0),\n \t\t      NULL_RTX, 0);\n-  tem = expand_and (tem, op0, NULL_RTX);\n+  tem = expand_and (mode, tem, op0, NULL_RTX);\n   target = force_operand (gen_rtx_fmt_ee (adj_code, mode, adj_operand, tem),\n \t\t\t  target);\n \n@@ -4159,23 +4159,16 @@ expand_mult_add (x, target, mult, add, mode, unsignedp)\n    If TARGET is 0, a pseudo-register or constant is returned.  */\n \n rtx\n-expand_and (op0, op1, target)\n+expand_and (mode, op0, op1, target)\n+     enum machine_mode mode;\n      rtx op0, op1, target;\n {\n-  enum machine_mode mode = VOIDmode;\n-  rtx tem;\n-\n-  if (GET_MODE (op0) != VOIDmode)\n-    mode = GET_MODE (op0);\n-  else if (GET_MODE (op1) != VOIDmode)\n-    mode = GET_MODE (op1);\n+  rtx tem = 0;\n \n-  if (mode != VOIDmode)\n+  if (GET_MODE (op0) == VOIDmode && GET_MODE (op1) == VOIDmode)\n+    tem = simplify_binary_operation (AND, mode, op0, op1);\n+  if (tem == 0)\n     tem = expand_binop (mode, and_optab, op0, op1, target, 0, OPTAB_LIB_WIDEN);\n-  else if (GET_CODE (op0) == CONST_INT && GET_CODE (op1) == CONST_INT)\n-    tem = GEN_INT (INTVAL (op0) & INTVAL (op1));\n-  else\n-    abort ();\n \n   if (target == 0)\n     target = tem;\n@@ -4433,7 +4426,7 @@ emit_store_flag (target, code, op0, op1, mode, unsignedp, normalizep)\n \t\t\t\tsubtarget, normalizep == 1);\n \t  else if (STORE_FLAG_VALUE & 1)\n \t    {\n-\t      op0 = expand_and (op0, const1_rtx, subtarget);\n+\t      op0 = expand_and (compare_mode, op0, const1_rtx, subtarget);\n \t      if (normalizep == -1)\n \t\top0 = expand_unop (compare_mode, neg_optab, op0, op0, 0);\n \t    }"}, {"sha": "a903b14ebb9b503bb98ad43e175bfa8bb0c3de7c", "filename": "gcc/expr.c", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22273300ad1417a429f5d1d0e51e3b954278a72f/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22273300ad1417a429f5d1d0e51e3b954278a72f/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=22273300ad1417a429f5d1d0e51e3b954278a72f", "patch": "@@ -5143,18 +5143,16 @@ store_field (target, bitsize, bitpos, mode, exp, value_mode, unsignedp, type,\n \t      tree count;\n \t      enum machine_mode tmode;\n \n-\t      if (unsignedp)\n-\t\treturn expand_and (temp,\n-\t\t\t\t   GEN_INT\n-\t\t\t\t   (trunc_int_for_mode\n-\t\t\t\t    (width_mask,\n-\t\t\t\t     GET_MODE (temp) == VOIDmode\n-\t\t\t\t     ? value_mode\n-\t\t\t\t     : GET_MODE (temp))), NULL_RTX);\n-\n \t      tmode = GET_MODE (temp);\n \t      if (tmode == VOIDmode)\n \t\ttmode = value_mode;\n+\n+\t      if (unsignedp)\n+\t\treturn expand_and (tmode, temp,\n+\t\t\t\t   GEN_INT (trunc_int_for_mode (width_mask,\n+\t\t\t\t\t\t\t\ttmode)),\n+\t\t\t\t   NULL_RTX);\n+\n \t      count = build_int_2 (GET_MODE_BITSIZE (tmode) - bitsize, 0);\n \t      temp = expand_shift (LSHIFT_EXPR, tmode, temp, count, 0, 0);\n \t      return expand_shift (RSHIFT_EXPR, tmode, temp, count, 0, 0);\n@@ -6785,16 +6783,16 @@ expand_expr (exp, target, tmode, modifier)\n \t\t  {\n \t\t    HOST_WIDE_INT bitsize\n \t\t      = TREE_INT_CST_LOW (DECL_SIZE (TREE_PURPOSE (elt)));\n+\t\t    enum machine_mode imode\n+\t\t      = TYPE_MODE (TREE_TYPE (TREE_PURPOSE (elt)));\n \n \t\t    if (TREE_UNSIGNED (TREE_TYPE (TREE_PURPOSE (elt))))\n \t\t      {\n \t\t\top1 = GEN_INT (((HOST_WIDE_INT) 1 << bitsize) - 1);\n-\t\t\top0 = expand_and (op0, op1, target);\n+\t\t\top0 = expand_and (imode, op0, op1, target);\n \t\t      }\n \t\t    else\n \t\t      {\n-\t\t\tenum machine_mode imode\n-\t\t\t  = TYPE_MODE (TREE_TYPE (TREE_PURPOSE (elt)));\n \t\t\ttree count\n \t\t\t  = build_int_2 (GET_MODE_BITSIZE (imode) - bitsize,\n \t\t\t\t\t 0);\n@@ -10222,7 +10220,7 @@ do_store_flag (exp, target, mode, only_cheap)\n \n       /* Put the AND last so it can combine with more things.  */\n       if (bitnum != TYPE_PRECISION (type) - 1)\n-\top0 = expand_and (op0, const1_rtx, subtarget);\n+\top0 = expand_and (mode, op0, const1_rtx, subtarget);\n \n       return op0;\n     }"}, {"sha": "17f09b19a812a015303a20ebbd120bb5e4bc086c", "filename": "gcc/expr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22273300ad1417a429f5d1d0e51e3b954278a72f/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22273300ad1417a429f5d1d0e51e3b954278a72f/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=22273300ad1417a429f5d1d0e51e3b954278a72f", "patch": "@@ -309,7 +309,7 @@ int can_conditionally_move_p PARAMS ((enum machine_mode mode));\n extern rtx negate_rtx PARAMS ((enum machine_mode, rtx));\n \n /* Expand a logical AND operation.  */\n-extern rtx expand_and PARAMS ((rtx, rtx, rtx));\n+extern rtx expand_and PARAMS ((enum machine_mode, rtx, rtx, rtx));\n \n /* Emit a store-flag operation.  */\n extern rtx emit_store_flag PARAMS ((rtx, enum rtx_code, rtx, rtx,"}, {"sha": "e778ef4a6985f99ab90fbf5f99571ee01fec9426", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22273300ad1417a429f5d1d0e51e3b954278a72f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22273300ad1417a429f5d1d0e51e3b954278a72f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=22273300ad1417a429f5d1d0e51e3b954278a72f", "patch": "@@ -1,5 +1,7 @@\n 2002-02-21  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* gcc.dg/20020220-1.c: New test.\n+\n \t* gcc.dg/20020220-2.c: New test.\n \n 2002-02-20  Alexandre Oliva  <aoliva@redhat.com>"}, {"sha": "aa948aa15e9fa4469325d6e54ba7906071c10bd3", "filename": "gcc/testsuite/gcc.dg/20020220-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22273300ad1417a429f5d1d0e51e3b954278a72f/gcc%2Ftestsuite%2Fgcc.dg%2F20020220-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22273300ad1417a429f5d1d0e51e3b954278a72f/gcc%2Ftestsuite%2Fgcc.dg%2F20020220-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20020220-1.c?ref=22273300ad1417a429f5d1d0e51e3b954278a72f", "patch": "@@ -0,0 +1,19 @@\n+/* PR c++/4574\n+   This testcase ICEd because expand_and did not handle VOIDmode\n+   CONST_DOUBLE arguments.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-w\" } */\n+\n+struct A {\n+  unsigned long long b : 8;\n+  unsigned long long c : 18;\n+};\n+\n+int main()\n+{\n+  struct A a;\n+  long long l;\n+\n+  l = a.c = 0x123456789aULL;\n+  return 0;\n+}"}]}