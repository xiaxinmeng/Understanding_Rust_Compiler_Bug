{"sha": "8c9b385288609fa4af9df746464b26130c9034b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGM5YjM4NTI4ODYwOWZhNGFmOWRmNzQ2NDY0YjI2MTMwYzkwMzRiMQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-11-29T12:32:57Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-11-29T12:32:57Z"}, "message": "PR libstdc++/88119 use alignof in std::alignment_of, not __alignof__\n\nNow that __alignof__ and alignof sometimes disagree it matters which one\nwe use. The standard says that std::alignment_of<T>::value equals\nalignof(T), so we need to use that.\n\nChange the only uses of alignment_of to use __alignof__ to avoid a\nchange in alignment.\n\n\tPR libstdc++/88119\n\t* include/ext/aligned_buffer.h (__aligned_membuf): Add comment.\n\t(__aligned_buffer): Use __alignof__ instead of std::alignment_of.\n\t* include/std/type_traits (alignment_of): Use alignof instead of\n\t__alignof__.\n\t* testsuite/20_util/alignment_of/value.cc: Fix test to check values\n\tmatch alignof not __alignof__, as required by the standard.\n\nFrom-SVN: r266613", "tree": {"sha": "a9708881adbc46a1ebb865004599bd1243140bb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9708881adbc46a1ebb865004599bd1243140bb6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c9b385288609fa4af9df746464b26130c9034b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c9b385288609fa4af9df746464b26130c9034b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c9b385288609fa4af9df746464b26130c9034b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c9b385288609fa4af9df746464b26130c9034b1/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "479db22783ba162939d607c2a5da5332c09064e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/479db22783ba162939d607c2a5da5332c09064e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/479db22783ba162939d607c2a5da5332c09064e0"}], "stats": {"total": 43, "additions": 29, "deletions": 14}, "files": [{"sha": "553be512ec585d291534a1a7236ca1a0e5c57b17", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c9b385288609fa4af9df746464b26130c9034b1/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c9b385288609fa4af9df746464b26130c9034b1/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8c9b385288609fa4af9df746464b26130c9034b1", "patch": "@@ -1,5 +1,13 @@\n 2018-11-29  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/88119\n+\t* include/ext/aligned_buffer.h (__aligned_membuf): Add comment.\n+\t(__aligned_buffer): Use __alignof__ instead of std::alignment_of.\n+\t* include/std/type_traits (alignment_of): Use alignof instead of\n+\t__alignof__.\n+\t* testsuite/20_util/alignment_of/value.cc: Fix test to check values\n+\tmatch alignof not __alignof__, as required by the standard.\n+\n \tPR libstdc++/86910\n \tPR libstdc++/87846\n \t* src/filesystem/ops.cc (experimental::create_directories): Report"}, {"sha": "2fc8f12e62d6679dbbb5d928eb745dbfd97430fb", "filename": "libstdc++-v3/include/ext/aligned_buffer.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c9b385288609fa4af9df746464b26130c9034b1/libstdc%2B%2B-v3%2Finclude%2Fext%2Faligned_buffer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c9b385288609fa4af9df746464b26130c9034b1/libstdc%2B%2B-v3%2Finclude%2Fext%2Faligned_buffer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Faligned_buffer.h?ref=8c9b385288609fa4af9df746464b26130c9034b1", "patch": "@@ -49,6 +49,8 @@ namespace __gnu_cxx\n       // Target macro ADJUST_FIELD_ALIGN can produce different alignment for\n       // types when used as class members. __aligned_membuf is intended\n       // for use as a class member, so align the buffer as for a class member.\n+      // Since GCC 8 we could just use alignof(_Tp) instead, but older\n+      // versions of non-GNU compilers might still need this trick.\n       struct _Tp2 { _Tp _M_t; };\n \n       alignas(__alignof__(_Tp2::_M_t)) unsigned char _M_storage[sizeof(_Tp)];\n@@ -86,11 +88,10 @@ namespace __gnu_cxx\n   // This type is still used to avoid an ABI change.\n   template<typename _Tp>\n     struct __aligned_buffer\n-    : std::aligned_storage<sizeof(_Tp), std::alignment_of<_Tp>::value>\n+    : std::aligned_storage<sizeof(_Tp), __alignof__(_Tp)>\n     {\n       typename\n-\tstd::aligned_storage<sizeof(_Tp), std::alignment_of<_Tp>::value>::type\n-\t_M_storage;\n+\tstd::aligned_storage<sizeof(_Tp), __alignof__(_Tp)>::type _M_storage;\n \n       __aligned_buffer() = default;\n "}, {"sha": "727a5451c56a2cf2bbbe0f32c965ee7ff0ef0794", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c9b385288609fa4af9df746464b26130c9034b1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c9b385288609fa4af9df746464b26130c9034b1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=8c9b385288609fa4af9df746464b26130c9034b1", "patch": "@@ -1286,7 +1286,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// alignment_of\n   template<typename _Tp>\n     struct alignment_of\n-    : public integral_constant<std::size_t, __alignof__(_Tp)> { };\n+    : public integral_constant<std::size_t, alignof(_Tp)> { };\n \n   /// rank\n   template<typename>"}, {"sha": "f73008daabdcfb021d0c89233502b3ed4e87f5f2", "filename": "libstdc++-v3/testsuite/20_util/alignment_of/value.cc", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c9b385288609fa4af9df746464b26130c9034b1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Falignment_of%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c9b385288609fa4af9df746464b26130c9034b1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Falignment_of%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Falignment_of%2Fvalue.cc?ref=8c9b385288609fa4af9df746464b26130c9034b1", "patch": "@@ -20,16 +20,22 @@\n #include <type_traits>\n #include <testsuite_tr1.h>\n \n-void test01()\n+template<typename T>\n+constexpr bool test()\n {\n-  using std::alignment_of;\n-  using namespace __gnu_test;\n+  return __gnu_test::test_property<std::alignment_of, T>(alignof(T));\n+}\n \n-  static_assert(test_property<alignment_of, char>(__alignof__(char)), \"\");\n-  static_assert(test_property<alignment_of, short>(__alignof__(short)), \"\");\n-  static_assert(test_property<alignment_of, int>(__alignof__(int)), \"\");\n-  static_assert(test_property<alignment_of, double>(__alignof__(double)), \"\");\n-  static_assert(test_property<alignment_of, int[4]>(__alignof__(int[4])), \"\");\n-  static_assert(test_property<alignment_of,\n-\t\tClassType>(__alignof__(ClassType)), \"\");\n+void test01()\n+{\n+  static_assert(test<char>(), \"\");\n+  static_assert(test<short>(), \"\");\n+  static_assert(test<int>(), \"\");\n+  static_assert(test<long>(), \"\");\n+  static_assert(test<long long>(), \"\");\n+  static_assert(test<float>(), \"\");\n+  static_assert(test<double>(), \"\");\n+  static_assert(test<long double>(), \"\");\n+  static_assert(test<int[4]>(), \"\");\n+  static_assert(test<__gnu_test::ClassType>(), \"\");\n }"}]}