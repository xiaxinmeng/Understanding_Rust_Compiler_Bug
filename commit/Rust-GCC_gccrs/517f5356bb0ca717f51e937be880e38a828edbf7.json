{"sha": "517f5356bb0ca717f51e937be880e38a828edbf7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTE3ZjUzNTZiYjBjYTcxN2Y1MWU5MzdiZTg4MGUzOGE4MjhlZGJmNw==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-03-18T23:28:14Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-03-26T22:46:08Z"}, "message": "c++: DR1710, template keyword in a typename-specifier [PR94057]\n\nConsider\n\n  template <typename T> class A {\n    template <typename U> class B {\n      void fn(typename A<T>::B<U>);\n    };\n  };\n\nwhich is rejected with\nerror: 'typename A<T>::B' names 'template<class T> template<class U> class A<T>::B', which is not a type\nwhereas clang/icc/msvc accept it.\n\n\"typename A<T>::B<U>\" is a typename-specifier.  Sadly, our comments\ndon't mention it anywhere, because the typename-specifier wasn't in C++11;\nit was only added to the language in N1376.  Instead, we handle it as\nan elaborated-type-specifier (not a problem thus far).   So we get to\ncp_parser_nested_name_specifier_opt which has a loop that breaks if we\ndon't see a < or ::, but that means we can -- tentatively -- parse even\nB<U> which is not a nested-name-specifier (it doesn't end with a ::).\n\nI think this should compile because [temp.names]/4 says: \"In a qualified-id\nused as the name in a typename-specifier, elaborated-type-specifier,\nusing-declaration, or class-or-decltype, an optional keyword template\nappearing at the top level is ignored.\", added in DR 1710.  Also see\nDR 1812.\n\nThis issue on its own is not a significant problem or a regression.\nHowever, in C++20, the typename here becomes optional, and so this test\nis rejected in C++20, but accepted in C++17:\n\n  template <typename T> class A {\n    template <typename U> class B {\n      void fn(A<T>::B<U>);\n    };\n  };\n\nHere we morph A<T>::B<U> into a typename-specifier, but that happens\nin cp_parser_simple_type_specifier and we never handle it as above.\nTo fake the template keyword I'm afraid we need to use cp_parser_template_id\nwith template_keyword_p=true as in the patch below.  The tricky thing\nis to avoid breaking concepts.\n\nTo handle DR 1710, I made cp_parser_nested_name_specifier_opt assume that\nwhen we're naming a type, the template keyword is present, too.  That\nrevealed a bug: DR 1710 also says that the template keyword can be followed\nby an alias template, but we weren't prepared to handle that.  alias-decl?.C\nexercise this.\n\ngcc/cp:\n\n\tDR 1710\n\tPR c++/94057 - template keyword in a typename-specifier.\n\t* parser.c (check_template_keyword_in_nested_name_spec): New.\n\t(cp_parser_nested_name_specifier_opt): Implement DR1710, optional\n\t'template'.  Call check_template_keyword_in_nested_name_spec.\n\t(cp_parser_simple_type_specifier): Assume that a <\n\tfollowing a qualified-id in a typename-specifier begins\n\ta template argument list.\n\ngcc/testsuite:\n\n\tDR 1710\n\tPR c++/94057 - template keyword in a typename-specifier.\n\t* g++.dg/cpp1y/alias-decl1.C: New test.\n\t* g++.dg/cpp1y/alias-decl2.C: New test.\n\t* g++.dg/cpp1y/alias-decl3.C: New test.\n\t* g++.dg/parse/missing-template1.C: Update dg-error.\n\t* g++.dg/parse/template3.C: Likewise.\n\t* g++.dg/template/error4.C: Likewise.\n\t* g++.dg/template/meminit2.C: Likewise.\n\t* g++.dg/template/dependent-name5.C: Likewise.\n\t* g++.dg/template/dependent-name7.C: New test.\n\t* g++.dg/template/dependent-name8.C: New test.\n\t* g++.dg/template/dependent-name9.C: New test.\n\t* g++.dg/template/dependent-name10.C: New test.\n\t* g++.dg/template/dependent-name11.C: New test.\n\t* g++.dg/template/dependent-name12.C: New test.\n\t* g++.dg/template/dependent-name13.C: New test.\n\t* g++.dg/template/dr1794.C: New test.\n\t* g++.dg/template/dr314.C: New test.\n\t* g++.dg/template/dr1710.C: New test.\n\t* g++.dg/template/dr1710-2.C: New test.\n\t* g++.old-deja/g++.pt/crash38.C: Update dg-error.", "tree": {"sha": "f8e21eca8acb04284c48d44bc81f7f6f02757fea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8e21eca8acb04284c48d44bc81f7f6f02757fea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/517f5356bb0ca717f51e937be880e38a828edbf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/517f5356bb0ca717f51e937be880e38a828edbf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/517f5356bb0ca717f51e937be880e38a828edbf7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/517f5356bb0ca717f51e937be880e38a828edbf7/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d85947d23ab6a9b9975b2e0590db9308c5c1b07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d85947d23ab6a9b9975b2e0590db9308c5c1b07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d85947d23ab6a9b9975b2e0590db9308c5c1b07"}], "stats": {"total": 288, "additions": 257, "deletions": 31}, "files": [{"sha": "7d1161fd1c115bbe7c99b6334d66218d7fdb6d74", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517f5356bb0ca717f51e937be880e38a828edbf7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517f5356bb0ca717f51e937be880e38a828edbf7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=517f5356bb0ca717f51e937be880e38a828edbf7", "patch": "@@ -1,3 +1,14 @@\n+2020-03-26  Marek Polacek  <polacek@redhat.com>\n+\n+\tDR 1710\n+\tPR c++/94057 - template keyword in a typename-specifier.\n+\t* parser.c (check_template_keyword_in_nested_name_spec): New.\n+\t(cp_parser_nested_name_specifier_opt): Implement DR1710, optional\n+\t'template'.  Call check_template_keyword_in_nested_name_spec.\n+\t(cp_parser_simple_type_specifier): Assume that a <\n+\tfollowing a qualified-id in a typename-specifier begins\n+\ta template argument list.\n+\n 2020-03-26  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* coroutines.cc (coro_init_identifiers): Initialize an identifier"}, {"sha": "753b3148ab31a038c50ac6cbffcb47c77135afed", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 66, "deletions": 13, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517f5356bb0ca717f51e937be880e38a828edbf7/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517f5356bb0ca717f51e937be880e38a828edbf7/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=517f5356bb0ca717f51e937be880e38a828edbf7", "patch": "@@ -6266,6 +6266,32 @@ cp_parser_unqualified_id (cp_parser* parser,\n     }\n }\n \n+/* Check [temp.names]/5: A name prefixed by the keyword template shall\n+   be a template-id or the name shall refer to a class template or an\n+   alias template.  */\n+\n+static void\n+check_template_keyword_in_nested_name_spec (tree name)\n+{\n+  if (CLASS_TYPE_P (name)\n+      && ((CLASSTYPE_USE_TEMPLATE (name)\n+\t   && PRIMARY_TEMPLATE_P (CLASSTYPE_TI_TEMPLATE (name)))\n+\t  || CLASSTYPE_IS_TEMPLATE (name)))\n+    return;\n+\n+  if (TREE_CODE (name) == TYPENAME_TYPE\n+      && TREE_CODE (TYPENAME_TYPE_FULLNAME (name)) == TEMPLATE_ID_EXPR)\n+    return;\n+  /* Alias templates are also OK.  */\n+  else if (alias_template_specialization_p (name, nt_opaque))\n+    return;\n+\n+  permerror (input_location, TYPE_P (name)\n+\t     ? G_(\"%qT is not a template\")\n+\t     : G_(\"%qD is not a template\"),\n+\t     name);\n+}\n+\n /* Parse an (optional) nested-name-specifier.\n \n    nested-name-specifier: [C++98]\n@@ -6389,7 +6415,17 @@ cp_parser_nested_name_specifier_opt (cp_parser *parser,\n       /* Look for the optional `template' keyword, if this isn't the\n \t first time through the loop.  */\n       if (success)\n-\ttemplate_keyword_p = cp_parser_optional_template_keyword (parser);\n+\t{\n+\t  template_keyword_p = cp_parser_optional_template_keyword (parser);\n+\t  /* DR1710: \"In a qualified-id used as the name in\n+\t     a typename-specifier, elaborated-type-specifier, using-declaration,\n+\t     or class-or-decltype, an optional keyword template appearing at\n+\t     the top level is ignored.\"  */\n+\t  if (!template_keyword_p\n+\t      && typename_keyword_p\n+\t      && cp_parser_nth_token_starts_template_argument_list_p (parser, 2))\n+\t    template_keyword_p = true;\n+\t}\n \n       /* Save the old scope since the name lookup we are about to do\n \t might destroy it.  */\n@@ -6580,18 +6616,8 @@ cp_parser_nested_name_specifier_opt (cp_parser *parser,\n       if (TREE_CODE (new_scope) == TYPE_DECL)\n \tnew_scope = TREE_TYPE (new_scope);\n       /* Uses of \"template\" must be followed by actual templates.  */\n-      if (template_keyword_p\n-\t  && !(CLASS_TYPE_P (new_scope)\n-\t       && ((CLASSTYPE_USE_TEMPLATE (new_scope)\n-\t\t    && PRIMARY_TEMPLATE_P (CLASSTYPE_TI_TEMPLATE (new_scope)))\n-\t\t   || CLASSTYPE_IS_TEMPLATE (new_scope)))\n-\t  && !(TREE_CODE (new_scope) == TYPENAME_TYPE\n-\t       && (TREE_CODE (TYPENAME_TYPE_FULLNAME (new_scope))\n-\t\t   == TEMPLATE_ID_EXPR)))\n-\tpermerror (input_location, TYPE_P (new_scope)\n-\t\t   ? G_(\"%qT is not a template\")\n-\t\t   : G_(\"%qD is not a template\"),\n-\t\t   new_scope);\n+      if (template_keyword_p)\n+\tcheck_template_keyword_in_nested_name_spec (new_scope);\n       /* If it is a class scope, try to complete it; we are about to\n \t be looking up names inside the class.  */\n       if (TYPE_P (new_scope)\n@@ -18120,6 +18146,33 @@ cp_parser_simple_type_specifier (cp_parser* parser,\n \t\t}\n \t    }\n \t}\n+      /* DR 1812: A < following a qualified-id in a typename-specifier\n+\t could safely be assumed to begin a template argument list, so\n+\t the template keyword should be optional.  */\n+      else if (parser->scope\n+\t       && qualified_p\n+\t       && typename_p\n+\t       && cp_lexer_next_token_is (parser->lexer, CPP_TEMPLATE_ID))\n+\t{\n+\t  cp_parser_parse_tentatively (parser);\n+\n+\t  type = cp_parser_template_id (parser,\n+\t\t\t\t\t/*template_keyword_p=*/true,\n+\t\t\t\t\t/*check_dependency_p=*/true,\n+\t\t\t\t\tnone_type,\n+\t\t\t\t\t/*is_declaration=*/false);\n+\t  /* This is handled below, so back off.  */\n+\t  if (type && concept_check_p (type))\n+\t    cp_parser_simulate_error (parser);\n+\n+\t  if (!cp_parser_parse_definitely (parser))\n+\t    type = NULL_TREE;\n+\t  else if (TREE_CODE (type) == TEMPLATE_ID_EXPR)\n+\t    type = make_typename_type (parser->scope, type, typename_type,\n+\t\t\t\t       /*complain=*/tf_error);\n+\t  else if (TREE_CODE (type) != TYPE_DECL)\n+\t    type = NULL_TREE;\n+\t}\n \n       /* Otherwise, look for a type-name.  */\n       if (!type)"}, {"sha": "45b19d5061e043d0d049be750ccbdc16480deca0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517f5356bb0ca717f51e937be880e38a828edbf7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517f5356bb0ca717f51e937be880e38a828edbf7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=517f5356bb0ca717f51e937be880e38a828edbf7", "patch": "@@ -1,3 +1,28 @@\n+2020-03-26  Marek Polacek  <polacek@redhat.com>\n+\n+\tDR 1710\n+\tPR c++/94057 - template keyword in a typename-specifier.\n+\t* g++.dg/cpp1y/alias-decl1.C: New test.\n+\t* g++.dg/cpp1y/alias-decl2.C: New test.\n+\t* g++.dg/cpp1y/alias-decl3.C: New test.\n+\t* g++.dg/parse/missing-template1.C: Update dg-error.\n+\t* g++.dg/parse/template3.C: Likewise.\n+\t* g++.dg/template/error4.C: Likewise.\n+\t* g++.dg/template/meminit2.C: Likewise.\n+\t* g++.dg/template/dependent-name5.C: Likewise.\n+\t* g++.dg/template/dependent-name7.C: New test.\n+\t* g++.dg/template/dependent-name8.C: New test.\n+\t* g++.dg/template/dependent-name9.C: New test.\n+\t* g++.dg/template/dependent-name10.C: New test.\n+\t* g++.dg/template/dependent-name11.C: New test.\n+\t* g++.dg/template/dependent-name12.C: New test.\n+\t* g++.dg/template/dependent-name13.C: New test.\n+\t* g++.dg/template/dr1794.C: New test.\n+\t* g++.dg/template/dr314.C: New test.\n+\t* g++.dg/template/dr1710.C: New test.\n+\t* g++.dg/template/dr1710-2.C: New test.\n+\t* g++.old-deja/g++.pt/crash38.C: Update dg-error.\n+\n 2020-03-26  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* g++.dg/coroutines/torture/co-ret-09-bool-await-susp.C: Amend"}, {"sha": "e5397e71bd6f56ac01c96c954a7443a483d4721d", "filename": "gcc/testsuite/g++.dg/cpp1y/alias-decl1.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517f5356bb0ca717f51e937be880e38a828edbf7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Falias-decl1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517f5356bb0ca717f51e937be880e38a828edbf7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Falias-decl1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Falias-decl1.C?ref=517f5356bb0ca717f51e937be880e38a828edbf7", "patch": "@@ -0,0 +1,9 @@\n+// DR 1710 - Missing template keyword in class-or-decltype\n+// { dg-do compile { target c++14 } }\n+\n+template <int> struct S {\n+  template <int> struct A;\n+  template <int N> using U = typename A<N>::foo;\n+};\n+template <typename T> typename S<1>::U<T::foo>::type a;\n+template <typename T> typename S<1>::template U<T::foo>::type a2;"}, {"sha": "f42b425a30bc6db06c8c0282e73d9d30947e07b5", "filename": "gcc/testsuite/g++.dg/cpp1y/alias-decl2.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517f5356bb0ca717f51e937be880e38a828edbf7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Falias-decl2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517f5356bb0ca717f51e937be880e38a828edbf7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Falias-decl2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Falias-decl2.C?ref=517f5356bb0ca717f51e937be880e38a828edbf7", "patch": "@@ -0,0 +1,8 @@\n+// DR 1710 - Missing template keyword in class-or-decltype\n+// { dg-do compile { target c++14 } }\n+\n+template <typename T> struct S {\n+  template <typename TT>\n+  using U = TT;\n+};\n+template <typename T> typename S<int>::template U<T>::type foo;"}, {"sha": "b950b20b5d86a52fbdfe955a5bf2dd8deee01ed9", "filename": "gcc/testsuite/g++.dg/cpp1y/alias-decl3.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517f5356bb0ca717f51e937be880e38a828edbf7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Falias-decl3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517f5356bb0ca717f51e937be880e38a828edbf7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Falias-decl3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Falias-decl3.C?ref=517f5356bb0ca717f51e937be880e38a828edbf7", "patch": "@@ -0,0 +1,9 @@\n+// DR 1710 - Missing template keyword in class-or-decltype\n+// { dg-do compile { target c++14 } }\n+\n+template <typename T> struct S {\n+  template<typename TT> struct A { };\n+  typedef A<int> type;\n+};\n+template <typename T> typename S<int>::template A<int> foo;\n+template <typename T> typename S<int>::template type foo2; // { dg-error \"expected template-id\" }"}, {"sha": "19c1433d09f8960a545acacb402444c3a3ca94c2", "filename": "gcc/testsuite/g++.dg/parse/missing-template1.C", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517f5356bb0ca717f51e937be880e38a828edbf7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fmissing-template1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517f5356bb0ca717f51e937be880e38a828edbf7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fmissing-template1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fmissing-template1.C?ref=517f5356bb0ca717f51e937be880e38a828edbf7", "patch": "@@ -12,9 +12,7 @@ template <typename T> struct A\n \n template <typename T> void foo()\n {\n-    typedef typename A<T>::B<T>::X Y; // { dg-error \"non-template\" \"non\" }\n-    // { dg-error \"not declare\" \"decl\" { target *-*-* } .-1 }\n-    // { dg-message \"note\" \"note\" { target *-*-* } .-2 }\n+    typedef typename A<T>::B<T>::X Y;\n }\n \n void bar()"}, {"sha": "8da8a48a3c31fb889f7c632f54f28c65b219311f", "filename": "gcc/testsuite/g++.dg/parse/template3.C", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517f5356bb0ca717f51e937be880e38a828edbf7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftemplate3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517f5356bb0ca717f51e937be880e38a828edbf7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftemplate3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftemplate3.C?ref=517f5356bb0ca717f51e937be880e38a828edbf7", "patch": "@@ -13,7 +13,4 @@ struct X : Outer<b>::template Inner<T>\n {};\n \n template <bool b, typename T>\n-struct Y : Outer<b>::Inner<T> {}; // { dg-error \"used as template\" \"temp\" }\n-// { dg-error \"expected\" \"exp\" { target *-*-* } .-1 }\n-// { dg-message \"note\" \"note\" { target *-*-* } .-2 }\n-\n+struct Y : Outer<b>::Inner<T> {};"}, {"sha": "18e024f7e6d8162c27a3a31691002ab7a5362efb", "filename": "gcc/testsuite/g++.dg/template/dependent-name10.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517f5356bb0ca717f51e937be880e38a828edbf7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-name10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517f5356bb0ca717f51e937be880e38a828edbf7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-name10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-name10.C?ref=517f5356bb0ca717f51e937be880e38a828edbf7", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/94057 - template keyword in a typename-specifier.\n+// { dg-do compile { target c++11 } }\n+\n+template<typename T> struct A {\n+  template<typename U> struct B {\n+    typedef int TT;\n+    typedef int TT2;\n+    typedef int TT3;\n+    typedef int TT4;\n+  };\n+};\n+\n+struct X : A<int>::B<int> {\n+  using A<int>::template B<int>::TT;\n+  using typename A<int>::template B<int>::TT2;\n+  using A<int>::B<int>::TT3;\n+  using typename A<int>::B<int>::TT4;\n+};"}, {"sha": "687a9bd5df5101410ee96888b25b8be787b7992b", "filename": "gcc/testsuite/g++.dg/template/dependent-name11.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517f5356bb0ca717f51e937be880e38a828edbf7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-name11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517f5356bb0ca717f51e937be880e38a828edbf7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-name11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-name11.C?ref=517f5356bb0ca717f51e937be880e38a828edbf7", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/94057 - template keyword in a typename-specifier.\n+// { dg-do compile { target c++11 } }\n+\n+template<typename T> struct A {\n+  template<typename U>\n+  struct W { };\n+};\n+\n+void\n+g ()\n+{\n+  // class-key nested-name-specifier template[opt] simple-template-id\n+  struct A<int>::W<int> w;\n+  struct A<int>::template W<int> w2;\n+}"}, {"sha": "7ee94e7457d91593eb324a7af33ffcf46cb3921e", "filename": "gcc/testsuite/g++.dg/template/dependent-name12.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517f5356bb0ca717f51e937be880e38a828edbf7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-name12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517f5356bb0ca717f51e937be880e38a828edbf7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-name12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-name12.C?ref=517f5356bb0ca717f51e937be880e38a828edbf7", "patch": "@@ -0,0 +1,7 @@\n+// PR c++/94057 - template keyword in a typename-specifier.\n+\n+template <bool> struct A;\n+template <typename, typename> struct B;\n+template <typename T, typename U, typename V> struct B<T U::*, V> {\n+  typename A<V::x>::type::type t;\n+};"}, {"sha": "1e9711686572cdc0d31a9990049b94bcf2046d41", "filename": "gcc/testsuite/g++.dg/template/dependent-name13.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517f5356bb0ca717f51e937be880e38a828edbf7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-name13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517f5356bb0ca717f51e937be880e38a828edbf7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-name13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-name13.C?ref=517f5356bb0ca717f51e937be880e38a828edbf7", "patch": "@@ -0,0 +1,8 @@\n+// DR 1710 - Missing template keyword in class-or-decltype\n+\n+template<typename T> struct S {\n+  void fn(typename T::template B<int>::template C<int>);\n+  void fn2(typename T::B<int>::template C<int>);\n+  void fn3(typename T::template B<int>::C<int>);\n+  void fn4(typename T::B<int>::C<int>);\n+};"}, {"sha": "15c1acb03476b4717eceba89638178db5a495803", "filename": "gcc/testsuite/g++.dg/template/dependent-name5.C", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517f5356bb0ca717f51e937be880e38a828edbf7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-name5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517f5356bb0ca717f51e937be880e38a828edbf7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-name5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-name5.C?ref=517f5356bb0ca717f51e937be880e38a828edbf7", "patch": "@@ -22,9 +22,7 @@ struct A\n \n   typedef N<int>       type6;\n   typedef A::N<int>    type7;\n-// { dg-error \"\" \"\" { target c++2a } .-1 }\n   typedef A<T>::N<int> type8;\n-// { dg-error \"\" \"\" { target c++2a } .-1 }\n   typedef A<T*>::template N<int> type9;  // { dg-error \"\" \"\" { target c++17_down } }\n   typedef typename A<T*>::template N<int> type10;\n "}, {"sha": "3dfa42d2df01cfab482c2ed5f53c674f196c9b58", "filename": "gcc/testsuite/g++.dg/template/dependent-name7.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517f5356bb0ca717f51e937be880e38a828edbf7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-name7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517f5356bb0ca717f51e937be880e38a828edbf7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-name7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-name7.C?ref=517f5356bb0ca717f51e937be880e38a828edbf7", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/94057 - template keyword in a typename-specifier.\n+// { dg-do compile }\n+\n+template<typename T> struct A {\n+  template<typename U> struct B {\n+    B(A<T>::B<U>&);\n+    void fn(A<T>::B<U>);\n+  };\n+};"}, {"sha": "ad9e44f9b8509fa90a8f8324f2f59fcdfdbdcb95", "filename": "gcc/testsuite/g++.dg/template/dependent-name8.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517f5356bb0ca717f51e937be880e38a828edbf7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-name8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517f5356bb0ca717f51e937be880e38a828edbf7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-name8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-name8.C?ref=517f5356bb0ca717f51e937be880e38a828edbf7", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/94057 - template keyword in a typename-specifier.\n+// { dg-do compile }\n+\n+template<typename T> struct A {\n+  template<typename U> struct B {\n+    B(typename A<T>::B<U>&);\n+    void fn(typename A<T>::B<U>);\n+  };\n+};"}, {"sha": "6dfdbc176c1bbbe988c46472ed1927af90444f26", "filename": "gcc/testsuite/g++.dg/template/dependent-name9.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517f5356bb0ca717f51e937be880e38a828edbf7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-name9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517f5356bb0ca717f51e937be880e38a828edbf7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-name9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-name9.C?ref=517f5356bb0ca717f51e937be880e38a828edbf7", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/94057 - template keyword in a typename-specifier.\n+// { dg-do compile }\n+\n+template<typename T> struct A {\n+  template<typename U> struct B {\n+    B(typename A<T>::template B<U>&);\n+    void fn(typename A<T>::template B<U>);\n+  };\n+};"}, {"sha": "99d49b746b298bd34728f3e050074a084f02c5d2", "filename": "gcc/testsuite/g++.dg/template/dr1710-2.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517f5356bb0ca717f51e937be880e38a828edbf7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdr1710-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517f5356bb0ca717f51e937be880e38a828edbf7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdr1710-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdr1710-2.C?ref=517f5356bb0ca717f51e937be880e38a828edbf7", "patch": "@@ -0,0 +1,10 @@\n+// DR 1710 - Missing template keyword in class-or-decltype\n+// { dg-do compile }\n+\n+template<typename T> struct A {\n+  template<typename U> struct B {\n+  };\n+};\n+\n+template<typename T> struct D : A<int>::B<int> {};\n+template<typename T> struct D2 : A<int>::template B<int> {};"}, {"sha": "c945977971f33b0d0a2de934fa690176882c3f88", "filename": "gcc/testsuite/g++.dg/template/dr1710.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517f5356bb0ca717f51e937be880e38a828edbf7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdr1710.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517f5356bb0ca717f51e937be880e38a828edbf7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdr1710.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdr1710.C?ref=517f5356bb0ca717f51e937be880e38a828edbf7", "patch": "@@ -0,0 +1,9 @@\n+// DR 1710 - Missing template keyword in class-or-decltype\n+// { dg-do compile }\n+\n+template<typename T> struct D : T::template B<int>::template C<int> {};\n+template<typename T> struct D2 : T::B<int>::template C<int> {};\n+template<typename T> struct D3 : T::template B<int>::C<int> {};\n+template<typename T> struct D4 : T::B<int>::C<int> {};\n+template<typename T> struct D5 : T::template B<int>::type::type {};\n+template<typename T> struct D6 : T::B<int>::type::type {};"}, {"sha": "f629d7d0b983c5244fd4f3a04cad877403264f99", "filename": "gcc/testsuite/g++.dg/template/dr1794.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517f5356bb0ca717f51e937be880e38a828edbf7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdr1794.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517f5356bb0ca717f51e937be880e38a828edbf7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdr1794.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdr1794.C?ref=517f5356bb0ca717f51e937be880e38a828edbf7", "patch": "@@ -0,0 +1,14 @@\n+// DR 1794 - template keyword and alias templates.\n+// { dg-do compile { target c++11 } }\n+\n+template<template<typename> class Template>\n+struct Internal {\n+  template<typename Arg>\n+  using Bind = Template<Arg>;\n+};\n+\n+template<template<typename> class Template, typename Arg>\n+using Instantiate = Template<Arg>;\n+\n+template<template<typename> class Template, typename Argument>\n+using Bind = Instantiate<Internal<Template>::template Bind, Argument>;"}, {"sha": "7c0d8ac592f18ff9f6809bffefb72a258391bdca", "filename": "gcc/testsuite/g++.dg/template/dr314.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517f5356bb0ca717f51e937be880e38a828edbf7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdr314.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517f5356bb0ca717f51e937be880e38a828edbf7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdr314.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdr314.C?ref=517f5356bb0ca717f51e937be880e38a828edbf7", "patch": "@@ -0,0 +1,15 @@\n+// DR 314 - template in base class specifier.\n+\n+template <typename T>\n+struct A {\n+  template <typename U>\n+  struct B {};\n+};\n+\n+template <typename T>\n+struct C : public A<T>::template B<T> {\n+};\n+\n+template <typename T>\n+struct C2 : public A<int>::B<T> {\n+};"}, {"sha": "a5030f06c98925706054c09fcea8ef34f8222ece", "filename": "gcc/testsuite/g++.dg/template/error4.C", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517f5356bb0ca717f51e937be880e38a828edbf7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517f5356bb0ca717f51e937be880e38a828edbf7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror4.C?ref=517f5356bb0ca717f51e937be880e38a828edbf7", "patch": "@@ -5,5 +5,4 @@ template<class T> struct C1\n };\n \n template<class T, class U>\n-void foo(typename C1<T>::C2<U>::Type *) { } // { dg-error \"template\" \"error \" }\n-// { dg-message \"note\" \"note\" { target *-*-* } .-1 }\n+void foo(typename C1<T>::C2<U>::Type *) { }"}, {"sha": "6a56a806746ea05eea7eb58db092aaa2e4f3c1ab", "filename": "gcc/testsuite/g++.dg/template/meminit2.C", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517f5356bb0ca717f51e937be880e38a828edbf7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmeminit2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517f5356bb0ca717f51e937be880e38a828edbf7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmeminit2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmeminit2.C?ref=517f5356bb0ca717f51e937be880e38a828edbf7", "patch": "@@ -14,8 +14,6 @@ struct A : typename O<T>::template I<int> {   // { dg-error \"keyword 'typename'\n \n template <typename T> \n struct B : O<T>::template I<int> {\n-  B() :    O<T>::I<int>()   // { dg-error \"used as template|it is a template\" }\n+  B() :    O<T>::I<int>()\n   {}\n };\n-\n-// { dg-bogus \"end of input\" \"bogus token skipping in the parser\" { xfail *-*-* } 17 }"}, {"sha": "60cd5e3f44e41b711dbad8f4ceaa3a56acf18c2f", "filename": "gcc/testsuite/g++.old-deja/g++.pt/crash38.C", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517f5356bb0ca717f51e937be880e38a828edbf7/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash38.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517f5356bb0ca717f51e937be880e38a828edbf7/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash38.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash38.C?ref=517f5356bb0ca717f51e937be880e38a828edbf7", "patch": "@@ -3,10 +3,8 @@\n \n template <class T>\n struct S {\n-  typedef typename T::Y<T>::Z X; // { dg-error \"non-template\" \"non-template\" } No Y in A\n-// { dg-message \"note\" \"note\" { target *-*-* } .-1 }\n-// { dg-error \"does not declare\" \"not declare\" { target *-*-* } .-2 }\n-  X x; // { dg-error \"does not name a type\" } No Y in A\n+  typedef typename T::Y<T>::Z X; // { dg-error \"not a class template\" } No Y in A\n+  X x;\n };\n \n struct A {"}]}