{"sha": "ce19a4822794992097deab96bf15bf78ff481ea1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2UxOWE0ODIyNzk0OTkyMDk3ZGVhYjk2YmYxNWJmNzhmZjQ4MWVhMQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-11-29T14:47:20Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-11-29T14:47:20Z"}, "message": "Improve tree-vect-patterns.c handling of boolean comparisons\n\nvect_recog_bool_pattern assumed that a comparison between two booleans\nshould always become a comparison of vector mask types (implemented as an\nXOR_EXPR).  But if the booleans in question are generated as data values\n(e.g. because they're loaded directly from memory), we should treat them\nlike ordinary integers instead, just as we do for boolean logic ops whose\noperands are loaded from memory.  vect_get_mask_type_for_stmt already\nhandled this case:\n\n      /* We may compare boolean value loaded as vector of integers.\n\t Fix mask_type in such case.  */\n      if (mask_type\n\t  && !VECTOR_BOOLEAN_TYPE_P (mask_type)\n\t  && gimple_code (stmt) == GIMPLE_ASSIGN\n\t  && TREE_CODE_CLASS (gimple_assign_rhs_code (stmt)) == tcc_comparison)\n\tmask_type = truth_type_for (mask_type);\n\nand not handling it here complicated later patches.\n\nThe initial list of targets for vect_bool_cmp is deliberately conservative.\n\n2019-11-29  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* doc/sourcebuild.texi (vect_bool_cmp): Document.\n\t* tree-vect-patterns.c (search_type_for_mask_1): If neither\n\toperand to a boolean comparison is a natural vector mask,\n\thandle both operands like normal integers instead.\n\ngcc/testsuite/\n\t* gcc.dg/vect/vect-bool-cmp-2.c: New test.\n\t* lib/target-supports.exp (check_effective_target_vect_bool_cmp): New\n\teffective target procedure.\n\nFrom-SVN: r278847", "tree": {"sha": "00093167689e7899ae3168a0fbc8f61e557973ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/00093167689e7899ae3168a0fbc8f61e557973ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce19a4822794992097deab96bf15bf78ff481ea1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce19a4822794992097deab96bf15bf78ff481ea1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce19a4822794992097deab96bf15bf78ff481ea1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce19a4822794992097deab96bf15bf78ff481ea1/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9d50a6a78509b42b3c2b2264da1a0d2c4b151d66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d50a6a78509b42b3c2b2264da1a0d2c4b151d66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d50a6a78509b42b3c2b2264da1a0d2c4b151d66"}], "stats": {"total": 40, "additions": 39, "deletions": 1}, "files": [{"sha": "92c7622e30b760381cb5cbc00d8fc8fce1cec4e0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce19a4822794992097deab96bf15bf78ff481ea1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce19a4822794992097deab96bf15bf78ff481ea1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ce19a4822794992097deab96bf15bf78ff481ea1", "patch": "@@ -1,3 +1,10 @@\n+2019-11-29  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* doc/sourcebuild.texi (vect_bool_cmp): Document.\n+\t* tree-vect-patterns.c (search_type_for_mask_1): If neither\n+\toperand to a boolean comparison is a natural vector mask,\n+\thandle both operands like normal integers instead.\n+\n 2019-11-29  Richard Biener  <rguenther@suse.de>\n \n \t* tree-ssa-sccvn.c (vn_walk_cb_data::push_partial_def): Bail"}, {"sha": "3950c82c685d55cb8aada0465b5337555fafbd92", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce19a4822794992097deab96bf15bf78ff481ea1/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce19a4822794992097deab96bf15bf78ff481ea1/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=ce19a4822794992097deab96bf15bf78ff481ea1", "patch": "@@ -1522,6 +1522,10 @@ Target does not support a vector add instruction on @code{int}.\n @item vect_no_bitwise\n Target does not support vector bitwise instructions.\n \n+@item vect_bool_cmp\n+Target supports comparison of @code{bool} vectors for at least one\n+vector length.\n+\n @item vect_char_add\n Target supports addition of @code{char} vectors for at least one\n vector length."}, {"sha": "8c06ec3318dafe239343bc09474bc09cc9874b82", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce19a4822794992097deab96bf15bf78ff481ea1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce19a4822794992097deab96bf15bf78ff481ea1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ce19a4822794992097deab96bf15bf78ff481ea1", "patch": "@@ -1,3 +1,9 @@\n+2019-11-29  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.dg/vect/vect-bool-cmp-2.c: New test.\n+\t* lib/target-supports.exp (check_effective_target_vect_bool_cmp): New\n+\teffective target procedure.\n+\n 2019-11-29 Tobias Burnus  <tobias@codesourcery.com>\n \n \t* fortran.dg/goacc/common-block-3.f90: Check that unused common-block"}, {"sha": "1fb57ff945e73e43182c399410c00ebc8d7e7d59", "filename": "gcc/testsuite/gcc.dg/vect/vect-bool-cmp-2.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce19a4822794992097deab96bf15bf78ff481ea1/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bool-cmp-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce19a4822794992097deab96bf15bf78ff481ea1/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bool-cmp-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bool-cmp-2.c?ref=ce19a4822794992097deab96bf15bf78ff481ea1", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+\n+void\n+f (_Bool *restrict x, _Bool *restrict y)\n+{\n+  for (int i = 0; i < 128; ++i)\n+    x[i] = x[i] == y[i];\n+}\n+\n+/* { dg-final { scan-tree-dump \"loop vectorized\" \"vect\" { target vect_bool_cmp } } } */"}, {"sha": "8f25d3312701ba03ab6abcfed4f1722d766bbb0d", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce19a4822794992097deab96bf15bf78ff481ea1/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce19a4822794992097deab96bf15bf78ff481ea1/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=ce19a4822794992097deab96bf15bf78ff481ea1", "patch": "@@ -5749,6 +5749,16 @@ proc check_effective_target_vect_bswap { } {\n \t     || [istarget amdgcn-*-*] }}]\n }\n \n+# Return 1 if the target supports comparison of bool vectors for at\n+# least one vector length.\n+\n+proc check_effective_target_vect_bool_cmp { } {\n+    return [check_cached_effective_target_indexed vect_bool_cmp {\n+      expr { [istarget i?86-*-*] || [istarget x86_64-*-*]\n+\t     || [istarget aarch64*-*-*]\n+\t     || [is-effective-target arm_neon] }}]\n+}\n+\n # Return 1 if the target supports addition of char vectors for at least\n # one vector length.\n "}, {"sha": "6985214d4358ef1c75b7796cf7054c9f5008977b", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce19a4822794992097deab96bf15bf78ff481ea1/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce19a4822794992097deab96bf15bf78ff481ea1/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=ce19a4822794992097deab96bf15bf78ff481ea1", "patch": "@@ -3944,7 +3944,8 @@ search_type_for_mask_1 (tree var, vec_info *vinfo,\n \t\t\t\t\t     vinfo, cache);\n \t      if (!res || (res2 && TYPE_PRECISION (res) > TYPE_PRECISION (res2)))\n \t\tres = res2;\n-\t      break;\n+\t      if (res)\n+\t\tbreak;\n \t    }\n \n \t  comp_vectype = get_vectype_for_scalar_type (vinfo, TREE_TYPE (rhs1));"}]}