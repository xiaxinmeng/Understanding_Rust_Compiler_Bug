{"sha": "5262c72ad4f6c5895f1318935dfa8980050ce784", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTI2MmM3MmFkNGY2YzU4OTVmMTMxODkzNWRmYTg5ODAwNTBjZTc4NA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2010-12-14T23:27:17Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2010-12-14T23:27:17Z"}, "message": "re PR libstdc++/45133 ([c++0x] std::future will crash with NULL deref if get() is called twice)\n\n2010-12-14  Jonathan Wakely  <jwakely.gcc@gmail.com>\n\n\tPR libstdc++/45133\n\t* include/std/future (__basic_future::wait): Throw if not valid.\n\t(__basic_future::wait_for): Likewise.\n\t(__basic_future::wait_until): Likewise.\n\t(__basic_future::_M_get_result): Likewise.\n\t* testsuite/30_threads/future/members/45133.cc: New.\n\t* testsuite/30_threads/shared_future/members/45133.cc: New.\n\nFrom-SVN: r167823", "tree": {"sha": "acbd413506b308a516f39c0b59d371c06d8bceb1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/acbd413506b308a516f39c0b59d371c06d8bceb1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5262c72ad4f6c5895f1318935dfa8980050ce784", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5262c72ad4f6c5895f1318935dfa8980050ce784", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5262c72ad4f6c5895f1318935dfa8980050ce784", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5262c72ad4f6c5895f1318935dfa8980050ce784/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ba58d4f041bce790343516de7d4a17378f19856", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ba58d4f041bce790343516de7d4a17378f19856", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ba58d4f041bce790343516de7d4a17378f19856"}], "stats": {"total": 217, "additions": 214, "deletions": 3}, "files": [{"sha": "640cf6f2ce7ec8013f1d46a3573d4af39cc95c28", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5262c72ad4f6c5895f1318935dfa8980050ce784/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5262c72ad4f6c5895f1318935dfa8980050ce784/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5262c72ad4f6c5895f1318935dfa8980050ce784", "patch": "@@ -1,3 +1,13 @@\n+2010-12-14  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\tPR libstdc++/45133\n+\t* include/std/future (__basic_future::wait): Throw if not valid.\n+\t(__basic_future::wait_for): Likewise.\n+\t(__basic_future::wait_until): Likewise.\n+\t(__basic_future::_M_get_result): Likewise.\n+\t* testsuite/30_threads/future/members/45133.cc: New.\n+\t* testsuite/30_threads/shared_future/members/45133.cc: New.\n+\n 2010-12-14  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \tPR libstdc++/46910"}, {"sha": "6fc3cf0a80483df9f642e30a49ae9c3a8f3cc816", "filename": "libstdc++-v3/include/std/future", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5262c72ad4f6c5895f1318935dfa8980050ce784/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5262c72ad4f6c5895f1318935dfa8980050ce784/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture?ref=5262c72ad4f6c5895f1318935dfa8980050ce784", "patch": "@@ -508,23 +508,34 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       valid() const { return static_cast<bool>(_M_state); }\n \n       void \n-      wait() const { _M_state->wait(); }\n+      wait() const\n+      {\n+        _State::_S_check(_M_state);\n+        _M_state->wait();\n+      }\n \n       template<typename _Rep, typename _Period>\n         bool\n         wait_for(const chrono::duration<_Rep, _Period>& __rel) const\n-        { return _M_state->wait_for(__rel); }\n+        {\n+          _State::_S_check(_M_state);\n+          return _M_state->wait_for(__rel);\n+        }\n \n       template<typename _Clock, typename _Duration>\n         bool\n         wait_until(const chrono::time_point<_Clock, _Duration>& __abs) const\n-        { return _M_state->wait_until(__abs); }\n+        {\n+          _State::_S_check(_M_state);\n+          return _M_state->wait_until(__abs);\n+        }\n \n     protected:\n       /// Wait for the state to be ready and rethrow any stored exception\n       __result_type\n       _M_get_result()\n       {\n+        _State::_S_check(_M_state);\n         _Result_base& __res = _M_state->wait();\n         if (!(__res._M_error == 0))\n           rethrow_exception(__res._M_error);"}, {"sha": "a4e4551d8955bff07b4d291cd8729d72ed74ebbc", "filename": "libstdc++-v3/testsuite/30_threads/future/members/45133.cc", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5262c72ad4f6c5895f1318935dfa8980050ce784/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ffuture%2Fmembers%2F45133.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5262c72ad4f6c5895f1318935dfa8980050ce784/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ffuture%2Fmembers%2F45133.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ffuture%2Fmembers%2F45133.cc?ref=5262c72ad4f6c5895f1318935dfa8980050ce784", "patch": "@@ -0,0 +1,100 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2010 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 30.6.6 Class template future [futures.unique_future]\n+\n+#include <future>\n+#include <testsuite_hooks.h>\n+\n+// This test verifies behaviour which is encouraged by a non-normative note,\n+// but not required.\n+ \n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::promise<int> p;\n+  std::future<int> f = p.get_future();\n+  p.set_value(0);\n+  f.get();\n+  try\n+  {\n+    f.get();\n+    VERIFY( false );\n+  }\n+  catch (std::future_error& e)\n+  {\n+    VERIFY( e.code() == std::future_errc::no_state );\n+  }\n+}\n+\n+void\n+test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::promise<int&> p;\n+  std::future<int&> f = p.get_future();\n+  int i = 0;\n+  p.set_value(i);\n+  f.get();\n+  try\n+  {\n+    f.get();\n+    VERIFY( false );\n+  }\n+  catch (std::future_error& e)\n+  {\n+    VERIFY( e.code() == std::future_errc::no_state );\n+  }\n+}\n+\n+void\n+test03()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::promise<void> p;\n+  std::future<void> f = p.get_future();\n+  p.set_value();\n+  f.get();\n+  try\n+  {\n+    f.get();\n+    VERIFY( false );\n+  }\n+  catch (std::future_error& e)\n+  {\n+    VERIFY( e.code() == std::future_errc::no_state );\n+  }\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+\n+  return 0;\n+}\n+"}, {"sha": "d71097fb1d60774c946991ac242f3eef21b433a3", "filename": "libstdc++-v3/testsuite/30_threads/shared_future/members/45133.cc", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5262c72ad4f6c5895f1318935dfa8980050ce784/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fmembers%2F45133.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5262c72ad4f6c5895f1318935dfa8980050ce784/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fmembers%2F45133.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fmembers%2F45133.cc?ref=5262c72ad4f6c5895f1318935dfa8980050ce784", "patch": "@@ -0,0 +1,90 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2010 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 30.6.7 Class template shared_future [futures.shared_future]\n+\n+#include <future>\n+#include <testsuite_hooks.h>\n+\n+// This test verifies behaviour which is encouraged by a non-normative note,\n+// but not required.\n+ \n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::shared_future<int> f;\n+  try\n+  {\n+    f.get();\n+    VERIFY( false );\n+  }\n+  catch (std::future_error& e)\n+  {\n+    VERIFY( e.code() == std::future_errc::no_state );\n+  }\n+}\n+\n+void\n+test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::shared_future<int&> f;\n+  try\n+  {\n+    f.get();\n+    VERIFY( false );\n+  }\n+  catch (std::future_error& e)\n+  {\n+    VERIFY( e.code() == std::future_errc::no_state );\n+  }\n+}\n+\n+void\n+test03()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::shared_future<void> f;\n+  try\n+  {\n+    f.get();\n+    VERIFY( false );\n+  }\n+  catch (std::future_error& e)\n+  {\n+    VERIFY( e.code() == std::future_errc::no_state );\n+  }\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+\n+  return 0;\n+}\n+"}]}