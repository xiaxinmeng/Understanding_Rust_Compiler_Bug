{"sha": "0752c75536e92212ac71c4a44bbc7a18bd7e0315", "node_id": "C_kwDOANBUbNoAKDA3NTJjNzU1MzZlOTIyMTJhYzcxYzRhNDRiYmM3YTE4YmQ3ZTAzMTU", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-01-11T12:30:44Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-01-11T12:30:44Z"}, "message": "Recognize MULT_HIGHPART_EXPR in tree-ssa-math-opts pass.\n\nThis is the third iteration of a patch to perceive MULT_HIGHPART_EXPR\nin the middle-end.  As they say \"the third time's a charm\".  The first\nversion implemented this in match.pd, which was considered too early.\nhttps://gcc.gnu.org/pipermail/gcc-patches/2020-August/551316.html\nThe second version attempted to do this during RTL expansion, and was\nconsidered to be too late in the middle-end.\nhttps://gcc.gnu.org/pipermail/gcc-patches/2021-August/576922.html\nhttps://gcc.gnu.org/pipermail/gcc-patches/2021-August/576923.html\n\nThis latest version incorporates Richard Biener's feedback/suggestion\nto perceive MULT_HIGHPART_EXPR in one of the \"instruction selection\npasses\", specifically tree-ssa-math-opts, where the recognition of\nhighpart multiplications takes place in the same pass as widening\nmultiplications.\n\nWith each rewrite, the patch is also getting more aggressive in the\nset of widening multiplications that it recognizes as highpart multiplies.\nCurrently any widening multiplication followed by a right shift (either\nsigned or unsigned) by a bit count sufficient to eliminate the lowpart\nis recognized.  The result of this shift doesn't need to be truncated.\nAs previously, this patch confirms the target provides a suitable\noptab before introducing the MULT_HIGHPART_EXPR.  This is the reason\nthe testcase is restricted to x86_64, as this pass doesn't do anything\non some platforms, but x86_64 should be sufficient to confirm that the\npass is working/continues to work.\n\n2022-01-11  Roger Sayle  <roger@nextmovesoftware.com>\n\t    Richard Biener  <rguenther@suse.de>\n\ngcc/ChangeLog\n\t* tree-ssa-math-opts.c (struct widen_mul_stats): Add a\n\thighpart_mults_inserted field.\n\t(convert_mult_to_highpart): New function to convert right shift\n\tof a widening multiply into a MULT_HIGHPART_EXPR.\n\t(math_opts_dom_walker::after_dom_children) [RSHIFT_EXPR]:\n\tCall new convert_mult_to_highpart function.\n\t(pass_optimize_widening_mul::execute): Add a statistics counter\n\tfor tracking \"highpart multiplications inserted\" events.\n\ngcc/testsuite/ChangeLog\n\t* gcc.target/i386/mult-highpart.c: New test case.", "tree": {"sha": "30bd2c75c3b0be568acc0012501742138e3d6398", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30bd2c75c3b0be568acc0012501742138e3d6398"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0752c75536e92212ac71c4a44bbc7a18bd7e0315", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0752c75536e92212ac71c4a44bbc7a18bd7e0315", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0752c75536e92212ac71c4a44bbc7a18bd7e0315", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0752c75536e92212ac71c4a44bbc7a18bd7e0315/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19d81fda48f30c4fc11c8912749351acd9159c17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19d81fda48f30c4fc11c8912749351acd9159c17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19d81fda48f30c4fc11c8912749351acd9159c17"}], "stats": {"total": 265, "additions": 264, "deletions": 1}, "files": [{"sha": "efde31169ce5872ba3cf0374966a8b23d9346a0d", "filename": "gcc/testsuite/gcc.target/i386/mult-highpart.c", "status": "added", "additions": 167, "deletions": 0, "changes": 167, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0752c75536e92212ac71c4a44bbc7a18bd7e0315/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmult-highpart.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0752c75536e92212ac71c4a44bbc7a18bd7e0315/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmult-highpart.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmult-highpart.c?ref=0752c75536e92212ac71c4a44bbc7a18bd7e0315", "patch": "@@ -0,0 +1,167 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2 -Wno-long-long -fdump-tree-optimized\" } */\n+\n+typedef unsigned int __attribute ((mode(TI))) uti_t;\n+typedef int __attribute ((mode(TI))) ti_t;\n+\n+long long stest1(long long x, long long y)\n+{\n+  return ((ti_t)x * (ti_t)y) >> 64;\n+}\n+\n+long long stest2(long long x)\n+{\n+  return ((ti_t)x * 19065) >> 64;\n+}\n+\n+long long stest3(long long x, long long y)\n+{\n+  return (uti_t)((ti_t)x * (ti_t)y) >> 64;\n+}\n+\n+long long stest4(long long x)\n+{\n+  return (uti_t)((ti_t)x * 19065) >> 64;\n+}\n+\n+ti_t stest5(long long x, long long y)\n+{\n+  return ((ti_t)x * (ti_t)y) >> 64;\n+}\n+\n+ti_t stest6(long long x)\n+{\n+  return ((ti_t)x * 19065) >> 64;\n+}\n+\n+uti_t stest7(long long x, long long y)\n+{\n+  return (uti_t)((ti_t)x * (ti_t)y) >>64;\n+}\n+\n+uti_t stest8(long long x)\n+{\n+  return (uti_t)((ti_t)x * 19065) >> 64;\n+}\n+\n+long long stest9(long long x, long long y)\n+{\n+  return ((ti_t)x * (ti_t)y) >> 72;\n+}\n+\n+long long stest10(long long x)\n+{\n+  return ((ti_t)x * 19065) >> 72;\n+}\n+\n+long long stest11(long long x, long long y)\n+{\n+  return (uti_t)((ti_t)x * (ti_t)y) >> 72;\n+}\n+\n+long long stest12(long long x)\n+{\n+  return (uti_t)((ti_t)x * 19065) >> 72;\n+}\n+\n+ti_t stest13(long long x, long long y)\n+{\n+  return ((ti_t)x * (ti_t)y) >> 72;\n+}\n+\n+ti_t stest14(long long x)\n+{\n+  return ((ti_t)x * 19065) >> 72;\n+}\n+\n+uti_t stest15(long long x, long long y)\n+{\n+  return (uti_t)((ti_t)x * (ti_t)y) >> 72;\n+}\n+\n+uti_t stest16(long long x)\n+{\n+  return (uti_t)((ti_t)x * 19065) >> 72;\n+}\n+\n+unsigned long long utest1(unsigned long long x, unsigned long long y)\n+{\n+  return ((uti_t)x * (uti_t)y) >> 64;\n+}\n+\n+unsigned long long utest2(unsigned long long x)\n+{\n+  return ((uti_t)x * 19065) >> 64;\n+}\n+\n+unsigned long long utest3(unsigned long long x, unsigned long long y)\n+{\n+  return (ti_t)((uti_t)x * (uti_t)y) >> 64;\n+}\n+\n+unsigned long long utest4(unsigned long long x)\n+{\n+  return (ti_t)((uti_t)x * 19065) >> 64;\n+}\n+\n+uti_t utest5(unsigned long long x, unsigned long long y)\n+{\n+  return ((uti_t)x * (uti_t)y) >> 64;\n+}\n+\n+uti_t utest6(unsigned long long x)\n+{\n+  return ((uti_t)x * 19065) >> 64;\n+}\n+\n+ti_t utest7(unsigned long long x, unsigned long long y)\n+{\n+  return (ti_t)((uti_t)x * (uti_t)y) >>64;\n+}\n+\n+ti_t utest8(long long x)\n+{\n+  return (uti_t)((ti_t)x * 19065) >> 64;\n+}\n+\n+unsigned long long utest9(unsigned long long x, unsigned long long y)\n+{\n+  return ((uti_t)x * (uti_t)y) >> 72;\n+}\n+\n+unsigned long long utest10(unsigned long long x)\n+{\n+  return ((uti_t)x * 19065) >> 72;\n+}\n+\n+unsigned long long utest11(unsigned long long x, unsigned long long y)\n+{\n+  return (ti_t)((uti_t)x * (uti_t)y) >> 72;\n+}\n+\n+unsigned long long utest12(unsigned long long x)\n+{\n+  return (ti_t)((uti_t)x * 19065) >> 72;\n+}\n+\n+uti_t utest13(unsigned long long x, unsigned long long y)\n+{\n+  return ((uti_t)x * (uti_t)y) >> 72;\n+}\n+\n+uti_t utest14(unsigned long long x)\n+{\n+  return ((uti_t)x * 19065) >> 72;\n+}\n+\n+ti_t utest15(unsigned long long x, unsigned long long y)\n+{\n+  return (ti_t)((uti_t)x * (uti_t)y) >> 72;\n+}\n+\n+ti_t utest16(unsigned long long x)\n+{\n+  return (ti_t)((uti_t)x * 19065) >> 72;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \" h\\\\* \" 32 \"optimized\" } } */"}, {"sha": "1b6a57b8a77e8e75f3ffeda47c39ff42451e6e26", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 97, "deletions": 1, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0752c75536e92212ac71c4a44bbc7a18bd7e0315/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0752c75536e92212ac71c4a44bbc7a18bd7e0315/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=0752c75536e92212ac71c4a44bbc7a18bd7e0315", "patch": "@@ -207,6 +207,9 @@ static struct\n \n   /* Number of divmod calls inserted.  */\n   int divmod_calls_inserted;\n+\n+  /* Number of highpart multiplication ops inserted.  */\n+  int highpart_mults_inserted;\n } widen_mul_stats;\n \n /* The instance of \"struct occurrence\" representing the highest\n@@ -4548,9 +4551,96 @@ convert_to_divmod (gassign *stmt)\n   return true; \n }    \n \n+/* Process a single gimple assignment STMT, which has a RSHIFT_EXPR as\n+   its rhs, and try to convert it into a MULT_HIGHPART_EXPR.  The return\n+   value is true iff we converted the statement.  */\n+\n+static bool\n+convert_mult_to_highpart (gassign *stmt, gimple_stmt_iterator *gsi)\n+{\n+  tree lhs = gimple_assign_lhs (stmt);\n+  tree stype = TREE_TYPE (lhs);\n+  tree sarg0 = gimple_assign_rhs1 (stmt);\n+  tree sarg1 = gimple_assign_rhs2 (stmt);\n+\n+  if (TREE_CODE (stype) != INTEGER_TYPE\n+      || TREE_CODE (sarg1) != INTEGER_CST\n+      || TREE_CODE (sarg0) != SSA_NAME\n+      || !tree_fits_uhwi_p (sarg1)\n+      || !has_single_use (sarg0))\n+    return false;\n+\n+  gassign *def = dyn_cast <gassign *> (SSA_NAME_DEF_STMT (sarg0));\n+  if (!def)\n+    return false;\n+\n+  enum tree_code mcode = gimple_assign_rhs_code (def);\n+  if (mcode == NOP_EXPR)\n+    {\n+      tree tmp = gimple_assign_rhs1 (def);\n+      if (TREE_CODE (tmp) != SSA_NAME || !has_single_use (tmp))\n+\treturn false;\n+      def = dyn_cast <gassign *> (SSA_NAME_DEF_STMT (tmp));\n+      if (!def)\n+\treturn false;\n+      mcode = gimple_assign_rhs_code (def);\n+    }\n+\n+  if (mcode != WIDEN_MULT_EXPR\n+      || gimple_bb (def) != gimple_bb (stmt))\n+    return false;\n+  tree mtype = TREE_TYPE (gimple_assign_lhs (def));\n+  if (TREE_CODE (mtype) != INTEGER_TYPE\n+      || TYPE_PRECISION (mtype) != TYPE_PRECISION (stype))\n+    return false;\n+\n+  tree mop1 = gimple_assign_rhs1 (def);\n+  tree mop2 = gimple_assign_rhs2 (def);\n+  tree optype = TREE_TYPE (mop1);\n+  bool unsignedp = TYPE_UNSIGNED (optype);\n+  unsigned int prec = TYPE_PRECISION (optype);\n+\n+  if (unsignedp != TYPE_UNSIGNED (mtype)\n+      || TYPE_PRECISION (mtype) != 2 * prec)\n+    return false;\n+\n+  unsigned HOST_WIDE_INT bits = tree_to_uhwi (sarg1);\n+  if (bits < prec || bits >= 2 * prec)\n+    return false;\n+\n+  machine_mode mode = TYPE_MODE (optype);\n+  optab tab = unsignedp ? umul_highpart_optab : smul_highpart_optab;\n+  if (optab_handler (tab, mode) == CODE_FOR_nothing)\n+    return false;\n+\n+  location_t loc = gimple_location (stmt);\n+  tree highpart1 = build_and_insert_binop (gsi, loc, \"highparttmp\",\n+\t\t\t\t\t   MULT_HIGHPART_EXPR, mop1, mop2);\n+  tree highpart2 = highpart1;\n+  tree ntype = optype;\n+\n+  if (TYPE_UNSIGNED (stype) != TYPE_UNSIGNED (optype))\n+    {\n+      ntype = TYPE_UNSIGNED (stype) ? unsigned_type_for (optype)\n+\t\t\t\t    : signed_type_for (optype);\n+      highpart2 = build_and_insert_cast (gsi, loc, ntype, highpart1);\n+    }\n+  if (bits > prec)\n+    highpart2 = build_and_insert_binop (gsi, loc, \"highparttmp\",\n+\t\t\t\t\tRSHIFT_EXPR, highpart2, \n+\t\t\t\t\tbuild_int_cst (ntype, bits - prec));\n+\n+  gassign *new_stmt = gimple_build_assign (lhs, NOP_EXPR, highpart2);\n+  gsi_replace (gsi, new_stmt, true);\n+\n+  widen_mul_stats.highpart_mults_inserted++;\n+  return true;\n+}\n+\n+\n /* Find integer multiplications where the operands are extended from\n    smaller types, and replace the MULT_EXPR with a WIDEN_MULT_EXPR\n-   where appropriate.  */\n+   or MULT_HIGHPART_EXPR where appropriate.  */\n \n namespace {\n \n@@ -4656,6 +4746,10 @@ math_opts_dom_walker::after_dom_children (basic_block bb)\n \t      convert_to_divmod (as_a<gassign *> (stmt));\n \t      break;\n \n+\t    case RSHIFT_EXPR:\n+\t      convert_mult_to_highpart (as_a<gassign *> (stmt), &gsi);\n+\t      break;\n+\n \t    default:;\n \t    }\n \t}\n@@ -4738,6 +4832,8 @@ pass_optimize_widening_mul::execute (function *fun)\n \t\t\t    widen_mul_stats.fmas_inserted);\n   statistics_counter_event (fun, \"divmod calls inserted\",\n \t\t\t    widen_mul_stats.divmod_calls_inserted);\n+  statistics_counter_event (fun, \"highpart multiplications inserted\",\n+\t\t\t    widen_mul_stats.highpart_mults_inserted);\n \n   return cfg_changed ? TODO_cleanup_cfg : 0;\n }"}]}