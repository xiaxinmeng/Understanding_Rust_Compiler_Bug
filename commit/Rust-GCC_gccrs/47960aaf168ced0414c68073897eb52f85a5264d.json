{"sha": "47960aaf168ced0414c68073897eb52f85a5264d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDc5NjBhYWYxNjhjZWQwNDE0YzY4MDczODk3ZWI1MmY4NWE1MjY0ZA==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2008-10-31T22:00:37Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2008-10-31T22:00:37Z"}, "message": "expr.c (struct op): Add location.\n\n2008-10-31  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\nlibcpp/\n\t* expr.c (struct op): Add location.\n\t(_cpp_parse_expr): Propagate locations throught the stack\n\tof expressions.\n\t(reduce): Likewise.\n\t(check_promotion): Use explicit location in errors.\n\t\ntestsuite/\n\t* gcc.dg/cpp/Wsignprom.c: Add column numbers.\n\t* gcc.dg/cpp/if-mpar.c: Likewise.\n\nFrom-SVN: r141503", "tree": {"sha": "5b6ba852d83328ae9e0bff7601449464f2f69da2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b6ba852d83328ae9e0bff7601449464f2f69da2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47960aaf168ced0414c68073897eb52f85a5264d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47960aaf168ced0414c68073897eb52f85a5264d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47960aaf168ced0414c68073897eb52f85a5264d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47960aaf168ced0414c68073897eb52f85a5264d/comments", "author": null, "committer": null, "parents": [{"sha": "4f48b9c1a5fa185bf85768d4748de3077d503a53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f48b9c1a5fa185bf85768d4748de3077d503a53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f48b9c1a5fa185bf85768d4748de3077d503a53"}], "stats": {"total": 78, "additions": 58, "deletions": 20}, "files": [{"sha": "9051361982e19179598e192eb3906238d8e74994", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47960aaf168ced0414c68073897eb52f85a5264d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47960aaf168ced0414c68073897eb52f85a5264d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=47960aaf168ced0414c68073897eb52f85a5264d", "patch": "@@ -1,3 +1,8 @@\n+2008-10-31  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\t* gcc.dg/cpp/Wsignprom.c: Add column numbers.\n+\t* gcc.dg/cpp/if-mpar.c: Likewise.\n+\n 2008-10-31  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/37967"}, {"sha": "7cdbccb3cac978ab3def02608ef9c6d5af12df41", "filename": "gcc/testsuite/gcc.dg/cpp/Wsignprom.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47960aaf168ced0414c68073897eb52f85a5264d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2FWsignprom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47960aaf168ced0414c68073897eb52f85a5264d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2FWsignprom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2FWsignprom.c?ref=47960aaf168ced0414c68073897eb52f85a5264d", "patch": "@@ -1,26 +1,26 @@\n /* { dg-do preprocess } */\n-/* { dg-options \"-Wall\" } */\n+/* { dg-options \"-Wall -fshow-column\" } */\n \n /* Test that -Wall emits the warnings about integer promotion changing\n    the sign of an operand.  */\n \n-#if -1 > 0U  /* { dg-warning \"changes sign when promoted\" } */\n+#if -1 > 0U  /* { dg-warning \"5:changes sign when promoted\" } */\n #endif\n \n-#if 0U + -1  /* { dg-warning \"changes sign when promoted\" } */\n+#if 0U + -1  /* { dg-warning \"10:changes sign when promoted\" } */\n #endif\n \n-#if 0U * -1  /* { dg-warning \"changes sign when promoted\" } */\n+#if 0U * -1  /* { dg-warning \"10:changes sign when promoted\" } */\n #endif\n \n-#if 1U / -2  /* { dg-warning \"changes sign when promoted\" } */\n+#if 1U / -2  /* { dg-warning \"10:changes sign when promoted\" } */\n #endif\n \n-#if -1 % 1U  /* { dg-warning \"changes sign when promoted\" } */\n+#if -1 % 1U  /* { dg-warning \"5:changes sign when promoted\" } */\n #endif\n \n-#if 1 ? 0U : -1  /* { dg-warning \"changes sign when promoted\" } */\n+#if 1 ? 0U : -1  /* { dg-warning \"14:changes sign when promoted\" } */\n #endif\n \n-#if 1 ? -1 : 0U  /* { dg-warning \"changes sign when promoted\" } */\n+#if 1 ? -1 : 0U  /* { dg-warning \"9:changes sign when promoted\" } */\n #endif"}, {"sha": "633cefcb44202ea30bad52fe66bebc0e4e507232", "filename": "gcc/testsuite/gcc.dg/cpp/if-mpar.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47960aaf168ced0414c68073897eb52f85a5264d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fif-mpar.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47960aaf168ced0414c68073897eb52f85a5264d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fif-mpar.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fif-mpar.c?ref=47960aaf168ced0414c68073897eb52f85a5264d", "patch": "@@ -4,21 +4,27 @@\n    missing parenthesis message.  */\n \n /* { dg-do preprocess } */\n+/* { dg-options \"-fshow-column\" } */\n+#if (1          /* { dg-error \"5:missing '\\\\)'\" \"missing ')' no. 1\" } */\n+#endif\n+\n+#if 2 * (3 + 4\t/* { dg-error \"9:missing '\\\\)'\" \"missing ')' no. 2\" } */\n+#endif\n \n-#if (1          /* { dg-error \"missing '\\\\)'\" \"missing ')' no. 1\" } */\n+#if (2))\t/* { dg-error \"8:missing '\\\\('\" \"missing '(' no. 1\" } */\n #endif\n \n-#if 2 * (3 + 4\t/* { dg-error \"missing '\\\\)'\" \"missing ')' no. 2\" } */\n+#if )\t\t/* { dg-error \"5:missing '\\\\('\" \"missing '(' no. 2\" } */\n #endif\n \n-#if (2))\t/* { dg-error \"missing '\\\\('\" \"missing '(' no. 1\" } */\n+#if 4)\t\t/* { dg-error \"6:missing '\\\\('\" \"missing '(' no. 3\" } */\n #endif\n \n-#if )\t\t/* { dg-error \"missing '\\\\('\" \"missing '(' no. 2\" } */\n+#if (\t\t/* { dg-error \"5:missing '\\\\)'\" \"missing ')' no. 3\" } */\n #endif\n \n-#if 4)\t\t/* { dg-error \"missing '\\\\('\" \"missing '(' no. 3\" } */\n+#if ((2 + 3) + 5 /* { dg-error \"5:missing '\\\\)'\" \"missing ')' no. 3\" } */\n #endif\n \n-#if (\t\t/* { dg-error \"missing '\\\\)'\" \"missing ')' no. 3\" } */\n+#if ((2 + 3 + 5 /* { dg-error \"6:missing '\\\\)'\" \"missing ')' no. 3\" } */\n #endif"}, {"sha": "1d0d28c7b4eb3e2a239e0b6e542ae8e2de1966d2", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47960aaf168ced0414c68073897eb52f85a5264d/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47960aaf168ced0414c68073897eb52f85a5264d/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=47960aaf168ced0414c68073897eb52f85a5264d", "patch": "@@ -1,3 +1,11 @@\n+2008-10-31  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\t* expr.c (struct op): Add location.\n+\t(_cpp_parse_expr): Propagate locations throught the stack\n+\tof expressions.\n+\t(reduce): Likewise.\n+\t(check_promotion): Use explicit location in errors.\n+\n 2008-10-05  Matthew Gingell  <gingell@adacore.com>\n \t    Arnaud Charlet  <charlet@adacore.com>\n "}, {"sha": "591308b3619a5f236e38446ec304a40d07db4a4b", "filename": "libcpp/expr.c", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47960aaf168ced0414c68073897eb52f85a5264d/libcpp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47960aaf168ced0414c68073897eb52f85a5264d/libcpp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fexpr.c?ref=47960aaf168ced0414c68073897eb52f85a5264d", "patch": "@@ -32,6 +32,7 @@ struct op\n {\n   const cpp_token *token;\t/* The token forming op (for diagnostics).  */\n   cpp_num value;\t\t/* The value logically \"right\" of op.  */\n+  source_location loc;          /* The location of this value.         */\n   enum cpp_ttype op;\n };\n \n@@ -875,6 +876,7 @@ _cpp_parse_expr (cpp_reader *pfile, bool is_if)\n       lex_count++;\n       op.token = cpp_get_token (pfile);\n       op.op = op.token->type;\n+      op.loc = op.token->src_loc;\n \n       switch (op.op)\n \t{\n@@ -978,6 +980,7 @@ _cpp_parse_expr (cpp_reader *pfile, bool is_if)\n \n       top->op = op.op;\n       top->token = op.token;\n+      top->loc = op.token->src_loc;\n     }\n \n   /* The controlling macro expression is only valid if we called lex 3\n@@ -1031,6 +1034,7 @@ reduce (cpp_reader *pfile, struct op *top, enum cpp_ttype op)\n \tcase CPP_NOT:\n \tcase CPP_COMPL:\n \t  top[-1].value = num_unary_op (pfile, top->value, top->op);\n+\t  top[-1].loc = top->loc;\n \t  break;\n \n \tcase CPP_PLUS:\n@@ -1040,6 +1044,7 @@ reduce (cpp_reader *pfile, struct op *top, enum cpp_ttype op)\n \tcase CPP_COMMA:\n \t  top[-1].value = num_binary_op (pfile, top[-1].value,\n \t\t\t\t\t top->value, top->op);\n+\t  top[-1].loc = top->loc;\n \t  break;\n \n \tcase CPP_GREATER:\n@@ -1048,29 +1053,34 @@ reduce (cpp_reader *pfile, struct op *top, enum cpp_ttype op)\n \tcase CPP_LESS_EQ:\n \t  top[-1].value\n \t    = num_inequality_op (pfile, top[-1].value, top->value, top->op);\n+\t  top[-1].loc = top->loc;\n \t  break;\n \n \tcase CPP_EQ_EQ:\n \tcase CPP_NOT_EQ:\n \t  top[-1].value\n \t    = num_equality_op (pfile, top[-1].value, top->value, top->op);\n+\t  top[-1].loc = top->loc;\n \t  break;\n \n \tcase CPP_AND:\n \tcase CPP_OR:\n \tcase CPP_XOR:\n \t  top[-1].value\n \t    = num_bitwise_op (pfile, top[-1].value, top->value, top->op);\n+\t  top[-1].loc = top->loc;\n \t  break;\n \n \tcase CPP_MULT:\n \t  top[-1].value = num_mul (pfile, top[-1].value, top->value);\n+\t  top[-1].loc = top->loc;\n \t  break;\n \n \tcase CPP_DIV:\n \tcase CPP_MOD:\n \t  top[-1].value = num_div_op (pfile, top[-1].value,\n \t\t\t\t      top->value, top->op);\n+\t  top[-1].loc = top->loc;\n \t  break;\n \n \tcase CPP_OR_OR:\n@@ -1082,6 +1092,7 @@ reduce (cpp_reader *pfile, struct op *top, enum cpp_ttype op)\n \t  top->value.high = 0;\n \t  top->value.unsignedp = false;\n \t  top->value.overflow = false;\n+\t  top->loc = top[1].loc;\n \t  continue;\n \n \tcase CPP_AND_AND:\n@@ -1093,16 +1104,20 @@ reduce (cpp_reader *pfile, struct op *top, enum cpp_ttype op)\n \t  top->value.high = 0;\n \t  top->value.unsignedp = false;\n \t  top->value.overflow = false;\n+\t  top->loc = top[1].loc;\n \t  continue;\n \n \tcase CPP_OPEN_PAREN:\n \t  if (op != CPP_CLOSE_PAREN)\n \t    {\n-\t      cpp_error (pfile, CPP_DL_ERROR, \"missing ')' in expression\");\n+\t      cpp_error_with_line (pfile, CPP_DL_ERROR, \n+\t\t\t\t   top->token->src_loc,\n+\t\t\t\t   0, \"missing ')' in expression\");\n \t      return 0;\n \t    }\n \t  top--;\n \t  top->value = top[1].value;\n+\t  top->loc = top[1].loc;\n \t  return top;\n \n \tcase CPP_COLON:\n@@ -1111,9 +1126,13 @@ reduce (cpp_reader *pfile, struct op *top, enum cpp_ttype op)\n \t    {\n \t      pfile->state.skip_eval--;\n \t      top->value = top[1].value;\n+\t      top->loc = top[1].loc;\n \t    }\n \t  else\n-\t    top->value = top[2].value;\n+\t    {\n+\t      top->value = top[2].value;\n+\t      top->loc = top[2].loc;\n+\t    }\n \t  top->value.unsignedp = (top[1].value.unsignedp\n \t\t\t\t  || top[2].value.unsignedp);\n \t  continue;\n@@ -1168,12 +1187,12 @@ check_promotion (cpp_reader *pfile, const struct op *op)\n   if (op->value.unsignedp)\n     {\n       if (!num_positive (op[-1].value, CPP_OPTION (pfile, precision)))\n-\tcpp_error (pfile, CPP_DL_WARNING,\n-\t\t   \"the left operand of \\\"%s\\\" changes sign when promoted\",\n-\t\t   cpp_token_as_text (pfile, op->token));\n+\tcpp_error_with_line (pfile, CPP_DL_WARNING, op[-1].loc, 0,\n+\t\t\t     \"the left operand of \\\"%s\\\" changes sign when promoted\",\n+\t\t\t     cpp_token_as_text (pfile, op->token));\n     }\n   else if (!num_positive (op->value, CPP_OPTION (pfile, precision)))\n-    cpp_error (pfile, CPP_DL_WARNING,\n+    cpp_error_with_line (pfile, CPP_DL_WARNING, op->loc, 0,\n \t       \"the right operand of \\\"%s\\\" changes sign when promoted\",\n \t       cpp_token_as_text (pfile, op->token));\n }"}]}