{"sha": "6b2740946d26ffde7e1318f24bae00443ece387d", "node_id": "C_kwDOANBUbNoAKDZiMjc0MDk0NmQyNmZmZGU3ZTEzMThmMjRiYWUwMDQ0M2VjZTM4N2Q", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2023-03-22T20:48:27Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2023-03-22T20:48:40Z"}, "message": "testsuite: always use UTF-8 in scan-sarif-file[-not] [PR105959]\n\nc-c++-common/diagnostic-format-sarif-file-4.c is a test case for\nquoting non-ASCII source code in a SARIF diagnostic log.\n\nThe SARIF standard mandates that .sarif files are UTF-8 encoded.\n\nPR testsuite/105959 notes that the test case fails when the system\nencoding is not UTF-8, such as when the \"make\" invocation is prefixed\nwith LC_ALL=C, whereas it works with in a UTF-8-locale.\n\nThe root cause is that dg-scan opens the file for reading using the\n\"system\" encoding; I believe it is falling back to treating all files as\neffectively ISO 8859-1 in a non-UTF-8 locale.\n\nThis patch fixes things by adding a mechanism to dg-scan to allow\ncallers to (optionally) specify an encoding to use when reading the\nfile, and updating scan-sarif-file (and the -not variant) to always\nuse UTF-8 when calling dg-scan, fixing the test case with LC_ALL=C.\n\ngcc/testsuite/ChangeLog:\n\tPR testsuite/105959\n\t* gcc.dg-selftests/dg-final.exp\n\t(dg_final_directive_check_num_args): Update expected maximum\n\tnumber of args for the various directives using dg-scan.\n\t* lib/scanasm.exp (append_encoding_arg): New procedure.\n\t(dg-scan): Add optional 3rd argument: the encoding to use when\n\treading from the file.\n\t* lib/scansarif.exp (scan-sarif-file): Treat the file as UTF-8\n\tencoded when reading it.\n\t(scan-sarif-file-not): Likewise.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "43375f753ef75417a89df2d0b924049e2f220dbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43375f753ef75417a89df2d0b924049e2f220dbc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b2740946d26ffde7e1318f24bae00443ece387d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b2740946d26ffde7e1318f24bae00443ece387d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b2740946d26ffde7e1318f24bae00443ece387d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b2740946d26ffde7e1318f24bae00443ece387d/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3af2b64ab9e3d16b3b8d30b9e2e4b9755b807f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3af2b64ab9e3d16b3b8d30b9e2e4b9755b807f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3af2b64ab9e3d16b3b8d30b9e2e4b9755b807f9"}], "stats": {"total": 57, "additions": 43, "deletions": 14}, "files": [{"sha": "e34f29ab13a3b35cd8142c624b4715f1eaff03ca", "filename": "gcc/testsuite/gcc.dg-selftests/dg-final.exp", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b2740946d26ffde7e1318f24bae00443ece387d/gcc%2Ftestsuite%2Fgcc.dg-selftests%2Fdg-final.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b2740946d26ffde7e1318f24bae00443ece387d/gcc%2Ftestsuite%2Fgcc.dg-selftests%2Fdg-final.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg-selftests%2Fdg-final.exp?ref=6b2740946d26ffde7e1318f24bae00443ece387d", "patch": "@@ -104,17 +104,17 @@ proc dg_final_directive_check_num_args {} {\n \n     global testname_with_flags\n     set testname_with_flags \"test.c\"\n-    verify_args scan-assembler 1 2\n-    verify_args scan-assembler-not 1 2\n-    verify_args scan-hidden 1 2\n-    verify_args scan-not-hidden 1 2\n-    verify_args scan-file 2 3\n-    verify_args scan-file-not 2 3\n-    verify_args scan-stack-usage 1 2\n-    verify_args scan-stack-usage-not 1 2\n-    verify_args scan-ada-spec 1 2\n-    verify_args scan-ada-spec-not 1 2\n-    verify_args scan-lto-assembler 1 2\n+    verify_args scan-assembler 1 3\n+    verify_args scan-assembler-not 1 3\n+    verify_args scan-hidden 1 3\n+    verify_args scan-not-hidden 1 3\n+    verify_args scan-file 2 4\n+    verify_args scan-file-not 2 5\n+    verify_args scan-stack-usage 1 3\n+    verify_args scan-stack-usage-not 1 3\n+    verify_args scan-ada-spec 1 3\n+    verify_args scan-ada-spec-not 1 3\n+    verify_args scan-lto-assembler 1 3\n     unset testname_with_flags\n }\n "}, {"sha": "fb53544d40c71101a2f979006c1fc42a016e7f59", "filename": "gcc/testsuite/lib/scanasm.exp", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b2740946d26ffde7e1318f24bae00443ece387d/gcc%2Ftestsuite%2Flib%2Fscanasm.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b2740946d26ffde7e1318f24bae00443ece387d/gcc%2Ftestsuite%2Flib%2Fscanasm.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fscanasm.exp?ref=6b2740946d26ffde7e1318f24bae00443ece387d", "patch": "@@ -24,19 +24,33 @@ proc make_pattern_printable { pattern } {\n     return [string map {\\t \\\\t \\n \\\\n \\r \\\\r \\\\ \\\\\\\\} $pattern]\n }\n \n+# Append to ARGS to make it suitable for use by dg-scan to indicate\n+# that encoding ENC should be used when reading from the file.\n+\n+proc append_encoding_arg { args enc } {\n+    if { [llength $args] < 2 } {\n+\t# Add target selector.\n+\tlappend args { target \"*-*-*\" }\n+    }\n+    # Add encoding ENC.\n+    lappend args $enc\n+    return $args\n+}\n+\n # Scan the OUTPUT_FILE for a pattern.  If it is present and POSITIVE\n # is non-zero, or it is not present and POSITIVE is zero, the test\n # passes.  The ORIG_ARGS is the list of arguments provided by dg-final\n # to scan-assembler.  The first element in ORIG_ARGS is the regular\n # expression to look for in the file.  The second element, if present,\n-# is a DejaGNU target selector.\n+# is a DejaGNU target selector.  The third element, if present, is the\n+# encoding to use when reading from the file.\n \n proc dg-scan { name positive testcase output_file orig_args } {\n     if { [llength $orig_args] < 1 } {\n \terror \"$name: too few arguments\"\n         return\n     }\n-    if { [llength $orig_args] > 2 } {\n+    if { [llength $orig_args] > 3 } {\n \terror \"$name: too many arguments\"\n \treturn\n     }\n@@ -59,6 +73,10 @@ proc dg-scan { name positive testcase output_file orig_args } {\n \treturn\n     }\n     set fd [open $output_file r]\n+    if { [llength $orig_args] >= 3 } {\n+\tset file_encoding [lindex $orig_args 2]\n+\tfconfigure $fd -encoding $file_encoding\n+    }\n     set text [read $fd]\n     close $fd\n "}, {"sha": "05524aa6e7a0c8ad74bee739206db243e2ab788f", "filename": "gcc/testsuite/lib/scansarif.exp", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b2740946d26ffde7e1318f24bae00443ece387d/gcc%2Ftestsuite%2Flib%2Fscansarif.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b2740946d26ffde7e1318f24bae00443ece387d/gcc%2Ftestsuite%2Flib%2Fscansarif.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fscansarif.exp?ref=6b2740946d26ffde7e1318f24bae00443ece387d", "patch": "@@ -17,7 +17,10 @@\n # Various utilities for scanning SARIF output, used by gcc-dg.exp and\n # g++-dg.exp.\n #\n-# This is largely borrowed from scanasm.exp.\n+# This is largely borrowed from scanasm.exp, but tweaked to force Tcl\n+# to treat the file as UTF-8: section 3.1 of SARIF 2.1.0\n+# (\"File Format\" > \"General\") specifies: \"A SARIF log file SHALL be\n+# encoded in UTF-8 [RFC3629])\".\n \n # Look for a pattern in the .sarif file produced by the compiler.  See\n # dg-scan for details.\n@@ -27,6 +30,10 @@ proc scan-sarif-file { args } {\n     # The name might include a list of options; extract the file name.\n     set filename [lindex $testcase 0]\n     set output_file \"[file tail $filename].sarif\"\n+\n+    # Treat the file as UTF-8 encoded when reading it.\n+    set args [append_encoding_arg $args \"utf-8\"]\n+\n     dg-scan \"scan-sarif-file\" 1 $testcase $output_file $args\n }\n \n@@ -38,5 +45,9 @@ proc scan-sarif-file-not { args } {\n     # The name might include a list of options; extract the file name.\n     set filename [lindex $testcase 0]\n     set output_file \"[file tail $filename].sarif\"\n+\n+    # Treat the file as UTF-8 encoded when reading it.\n+    set args [append_encoding_arg $args \"utf-8\"]\n+\n     dg-scan \"scan-sarif-file-not\" 0 $testcase $output_file $args\n }"}]}