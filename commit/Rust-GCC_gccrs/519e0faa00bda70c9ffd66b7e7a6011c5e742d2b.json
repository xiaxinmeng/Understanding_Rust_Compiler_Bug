{"sha": "519e0faa00bda70c9ffd66b7e7a6011c5e742d2b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTE5ZTBmYWEwMGJkYTcwYzlmZmQ2NmI3ZTdhNjAxMWM1ZTc0MmQyYg==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2016-12-05T13:19:34Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2016-12-05T13:19:34Z"}, "message": "match.pd: Simplify X ? C : 0 where C is a power of 2 and X tests a single bit.\n\ngcc:\n* match.pd: Simplify X ? C : 0 where C is a power of 2 and\nX tests a single bit.\n\ngcc/testsuite:\n* gcc.dg/fold-and-lshift.c, gcc.dg/fold-and-rshift-1.c,\ngcc.dg/fold-and-rshift-2.c: New testcases.\n\nFrom-SVN: r243255", "tree": {"sha": "b2b3238a915ab7d938a1ee24f4bf5be5561f10a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2b3238a915ab7d938a1ee24f4bf5be5561f10a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/519e0faa00bda70c9ffd66b7e7a6011c5e742d2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/519e0faa00bda70c9ffd66b7e7a6011c5e742d2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/519e0faa00bda70c9ffd66b7e7a6011c5e742d2b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/519e0faa00bda70c9ffd66b7e7a6011c5e742d2b/comments", "author": null, "committer": null, "parents": [{"sha": "d0ea9f0aa270f9791df42eb409e90c718575ad9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0ea9f0aa270f9791df42eb409e90c718575ad9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0ea9f0aa270f9791df42eb409e90c718575ad9a"}], "stats": {"total": 135, "additions": 134, "deletions": 1}, "files": [{"sha": "2ba03023cb075d011684eba4dec446baa4ab456a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/519e0faa00bda70c9ffd66b7e7a6011c5e742d2b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/519e0faa00bda70c9ffd66b7e7a6011c5e742d2b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=519e0faa00bda70c9ffd66b7e7a6011c5e742d2b", "patch": "@@ -1,3 +1,8 @@\n+2016-12-05  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* match.pd: Simplify X ? C : 0 where C is a power of 2 and\n+\tX tests a single bit.\n+\n 2016-12-05  Nathan Sidwell  <nathan@acm.org>\n \n \t* diagnostic.c (diagnostic_check_max_errors): New, broken out of ...\n@@ -25,7 +30,7 @@\n \t* config/arc/arc.md (ls_gd_load): Remove unused pattern.\n \t(tls_gd_dispatch): Likewise.\n \n-2016-12-025  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+2016-12-05  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \n \t* config/arm/arm.c (TARGET_ASM_INIT_SECTIONS): Fix wrong undef\n \tlocation."}, {"sha": "1fe003ba1582cf26df710915d164aa7b5dbd71c2", "filename": "gcc/match.pd", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/519e0faa00bda70c9ffd66b7e7a6011c5e742d2b/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/519e0faa00bda70c9ffd66b7e7a6011c5e742d2b/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=519e0faa00bda70c9ffd66b7e7a6011c5e742d2b", "patch": "@@ -2737,6 +2737,21 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n   (cmp (bit_and@2 @0 integer_pow2p@1) @1)\n   (icmp @2 { build_zero_cst (TREE_TYPE (@0)); })))\n  \n+/* If we have (A & C) != 0 ? D : 0 where C and D are powers of 2,\n+   convert this into a shift followed by ANDing with D.  */\n+(simplify\n+ (cond\n+  (ne (bit_and @0 integer_pow2p@1) integer_zerop)\n+  integer_pow2p@2 integer_zerop)\n+ (with {\n+    int shift = wi::exact_log2 (@2) - wi::exact_log2 (@1);\n+  }\n+  (if (shift > 0)\n+   (bit_and\n+    (lshift (convert @0) { build_int_cst (integer_type_node, shift); }) @2)\n+   (bit_and\n+    (convert (rshift @0 { build_int_cst (integer_type_node, -shift); })) @2))))\n+\n /* If we have (A & C) != 0 where C is the sign bit of A, convert\n    this into A < 0.  Similarly for (A & C) == 0 into A >= 0.  */\n (for cmp (eq ne)\n@@ -2751,6 +2766,19 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n    (with { tree stype = signed_type_for (TREE_TYPE (@0)); }\n     (ncmp (convert:stype @0) { build_zero_cst (stype); })))))\n \n+/* If we have A < 0 ? C : 0 where C is a power of 2, convert\n+   this into a right shift followed by ANDing with C.  */\n+(simplify\n+ (cond\n+  (lt @0 integer_zerop)\n+  integer_pow2p@1 integer_zerop)\n+ (with {\n+    int shift = element_precision (@0) - wi::exact_log2 (@1) - 1;\n+  }\n+  (bit_and\n+   (convert (rshift @0 { build_int_cst (integer_type_node, shift); }))\n+   @1)))\n+\n /* When the addresses are not directly of decls compare base and offset.\n    This implements some remaining parts of fold_comparison address\n    comparisons but still no complete part of it.  Still it is good"}, {"sha": "d9edb52d3b2430aa78a1f08834c6de2d57305227", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/519e0faa00bda70c9ffd66b7e7a6011c5e742d2b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/519e0faa00bda70c9ffd66b7e7a6011c5e742d2b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=519e0faa00bda70c9ffd66b7e7a6011c5e742d2b", "patch": "@@ -1,3 +1,8 @@\n+2016-12-05  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* gcc.dg/fold-and-lshift.c, gcc.dg/fold-and-rshift-1.c,\n+\tgcc.dg/fold-and-rshift-2.c: New testcases.\n+\n 2016-12-05  Nathan Sidwell  <nathan@acm.org>\n \n \t* c-c++-common/fmax_errors.c: Check notes after last error are"}, {"sha": "2905095ff743eb6a9f10b429fe23cdc86fc09539", "filename": "gcc/testsuite/gcc.dg/fold-and-lshift.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/519e0faa00bda70c9ffd66b7e7a6011c5e742d2b/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-and-lshift.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/519e0faa00bda70c9ffd66b7e7a6011c5e742d2b/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-and-lshift.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-and-lshift.c?ref=519e0faa00bda70c9ffd66b7e7a6011c5e742d2b", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do compile } */\r\n+/* { dg-options \"-O -fdump-tree-original\" } */\r\n+\r\n+int f(int x)\r\n+{\r\n+\treturn (x << 2) & 128;\r\n+}\r\n+\r\n+int g(int x)\r\n+{\r\n+\treturn !!(x & 32) << 7;\r\n+}\r\n+\r\n+int h(int x)\r\n+{\r\n+\treturn ((x >> 5) & 1) << 7;\r\n+}\r\n+\r\n+int i(int x)\r\n+{\r\n+\treturn (x & 32) >> 5 << 7;\r\n+}\r\n+\r\n+int j(int x)\r\n+{\r\n+\treturn ((x >> 5) & 1) ? 128 : 0;\r\n+}\r\n+\r\n+int k(int x)\r\n+{\r\n+\treturn (x & 32) ? 128 : 0;\r\n+}\r\n+\r\n+/* { dg-final { scan-tree-dump-not \" \\\\? \" \"original\" } } */\r\n+/* { dg-final { scan-assembler-not \"sarl\" { target i?86-*-* x86_64-*-* } } }\" */\r"}, {"sha": "11c13d582eb6fc7c46b0b3aacc9a7a4be1ad8521", "filename": "gcc/testsuite/gcc.dg/fold-and-rshift-1.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/519e0faa00bda70c9ffd66b7e7a6011c5e742d2b/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-and-rshift-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/519e0faa00bda70c9ffd66b7e7a6011c5e742d2b/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-and-rshift-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-and-rshift-1.c?ref=519e0faa00bda70c9ffd66b7e7a6011c5e742d2b", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do compile } */\r\n+/* { dg-options \"-O -fdump-tree-original\" } */\r\n+\r\n+int f(int x)\r\n+{\r\n+\treturn (x >> 2) & 128;\r\n+}\r\n+\r\n+int g(int x)\r\n+{\r\n+\treturn !!(x & 512) << 7;\r\n+}\r\n+\r\n+int h(int x)\r\n+{\r\n+\treturn ((x >> 9) & 1) << 7;\r\n+}\r\n+\r\n+int i(int x)\r\n+{\r\n+\treturn (x & 512) >> 9 << 7;\r\n+}\r\n+\r\n+int j(int x)\r\n+{\r\n+\treturn ((x >> 9) & 1) ? 128 : 0;\r\n+}\r\n+\r\n+int k(int x)\r\n+{\r\n+\treturn (x & 512) ? 128 : 0;\r\n+}\r\n+\r\n+/* { dg-final { scan-tree-dump-not \" \\\\? \" \"original\" } } */\r\n+/* { dg-final { scan-assembler-not \"sall\" { target i?86-*-* x86_64-*-* } } }\" */\r"}, {"sha": "f88d48dc34a26cbd8f422675269658f6155a0963", "filename": "gcc/testsuite/gcc.dg/fold-and-rshift-2.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/519e0faa00bda70c9ffd66b7e7a6011c5e742d2b/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-and-rshift-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/519e0faa00bda70c9ffd66b7e7a6011c5e742d2b/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-and-rshift-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-and-rshift-2.c?ref=519e0faa00bda70c9ffd66b7e7a6011c5e742d2b", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\r\n+/* { dg-options \"-O -fdump-tree-original\" } */\r\n+\r\n+unsigned f(unsigned x)\r\n+{\r\n+\treturn (x >> 29) & 32;\r\n+}\r\n+\r\n+unsigned g(unsigned x)\r\n+{\r\n+\treturn !!(x & 0x80000000) << 5;\r\n+}\r\n+\r\n+unsigned j(unsigned x)\r\n+{\r\n+\treturn ((x >> 31) & 1) ? 32 : 0;\r\n+}\r\n+\r\n+unsigned k(unsigned x)\r\n+{\r\n+\treturn (x & 0x80000000) ? 32 : 0;\r\n+}\r\n+\r\n+/* { dg-final { scan-tree-dump-not \" \\\\? \" \"original\" } } */\r\n+/* { dg-final { scan-assembler-not \"sall\" { target i?86-*-* x86_64-*-* } } }\" */\r"}]}