{"sha": "06e3b913b388b770222e5467069c5d98872760a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDZlM2I5MTNiMzg4Yjc3MDIyMmU1NDY3MDY5YzVkOTg4NzI3NjBhMA==", "commit": {"author": {"name": "Bryce McKinlay", "email": "bryce@albatross.co.nz", "date": "2001-02-15T06:43:00Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2001-02-15T06:43:00Z"}, "message": "AbstractSequentialList.java: Synchronize with Classpath.\n\n        * java/util/AbstractSequentialList.java: Synchronize with Classpath.\n        * java/util/Collection.java: Likewise.\n        * java/util/Comparator.java: Likewise.\n        * java/util/Dictionary.java: Likewise.\n        * java/util/Iterator.java: Likewise.\n        * java/util/ListIterator.java: Likewise.\n        * java/util/Map.java: Likewise.\n        * java/util/Set.java: Likewise.\n\nFrom-SVN: r39708", "tree": {"sha": "946703e523387eb8a2f5650a54a1e9a6302d6de0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/946703e523387eb8a2f5650a54a1e9a6302d6de0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06e3b913b388b770222e5467069c5d98872760a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06e3b913b388b770222e5467069c5d98872760a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06e3b913b388b770222e5467069c5d98872760a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06e3b913b388b770222e5467069c5d98872760a0/comments", "author": null, "committer": null, "parents": [{"sha": "a6845c56c4b7b6e6ca66c87530c2dcb4eebbc2c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6845c56c4b7b6e6ca66c87530c2dcb4eebbc2c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6845c56c4b7b6e6ca66c87530c2dcb4eebbc2c4"}], "stats": {"total": 711, "additions": 585, "deletions": 126}, "files": [{"sha": "bb56489a5725f9b37ca95fa1d5a46a1d732cc98f", "filename": "libjava/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e3b913b388b770222e5467069c5d98872760a0/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e3b913b388b770222e5467069c5d98872760a0/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=06e3b913b388b770222e5467069c5d98872760a0", "patch": "@@ -10,6 +10,15 @@\n \tRectangle.clone(), not Object.clone().\n \n \t* java/util/HashSet.java (clone): Remove try/catch.\n+\t\n+\t* java/util/AbstractSequentialList.java: Synchronize with Classpath.\n+\t* java/util/Collection.java: Likewise.\n+\t* java/util/Comparator.java: Likewise.\n+\t* java/util/Dictionary.java: Likewise.\n+\t* java/util/Iterator.java: Likewise.\n+\t* java/util/ListIterator.java: Likewise.\n+\t* java/util/Map.java: Likewise.\n+\t* java/util/Set.java: Likewise.\n \n 2001-02-14  Bryce McKinlay  <bryce@albatross.co.nz>\n "}, {"sha": "81481be0466258f22a60589486fa96c0003386bd", "filename": "libjava/java/util/AbstractSequentialList.java", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e3b913b388b770222e5467069c5d98872760a0/libjava%2Fjava%2Futil%2FAbstractSequentialList.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e3b913b388b770222e5467069c5d98872760a0/libjava%2Fjava%2Futil%2FAbstractSequentialList.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FAbstractSequentialList.java?ref=06e3b913b388b770222e5467069c5d98872760a0", "patch": "@@ -38,7 +38,6 @@\n  */\n public abstract class AbstractSequentialList extends AbstractList\n {\n-\n   /**\n    * Returns a ListIterator over the list, starting from position index.\n    * Subclasses must provide an implementation of this method."}, {"sha": "b7dbb69b1f78937de16cc273b841a5af71b8f12a", "filename": "libjava/java/util/Collection.java", "status": "modified", "additions": 226, "deletions": 27, "changes": 253, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e3b913b388b770222e5467069c5d98872760a0/libjava%2Fjava%2Futil%2FCollection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e3b913b388b770222e5467069c5d98872760a0/libjava%2Fjava%2Futil%2FCollection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FCollection.java?ref=06e3b913b388b770222e5467069c5d98872760a0", "patch": "@@ -1,37 +1,236 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* Collection.java -- Interface that represents a collection of objects\n+   Copyright (C) 1998 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n+// TO DO:\n+// ~ Maybe some more @see clauses would be helpful.\n \n package java.util;\n \n /**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date March 16, 2000.\n- */\n-/* Written using on-line Java Platform 1.2 API Specification.\n- * Status:  Believed complete and correct.\n+ * Interface that represents a collection of objects. This interface is the\n+ * root of the collection hierarchy, and does not provide any guarantees about\n+ * the order of its elements or whether or not duplicate elements are\n+ * permitted.\n+ * <p>\n+ * All methods of this interface that are defined to modify the collection are\n+ * defined as <dfn>optional</dfn>. An optional operation may throw an\n+ * UnsupportedOperationException if the data backing this collection does not\n+ * support such a modification. This may mean that the data structure is\n+ * immutable, or that it is read-only but may change (\"unmodifiable\"), or\n+ * that it is modifiable but of fixed size (such as an array), or any number\n+ * of other combinations.\n+ * <p>\n+ * A class that wishes to implement this interface should consider subclassing\n+ * AbstractCollection, which provides basic implementations of most of the\n+ * methods of this interface. Classes that are prepared to make guarantees\n+ * about ordering or about absence of duplicate elements should consider\n+ * implementing List or Set respectively, both of which are subinterfaces of\n+ * Collection.\n+ * <p>\n+ * A general-purpose implementation of the Collection interface should in most\n+ * cases provide at least two constructors: One which takes no arguments and\n+ * creates an empty collection, and one which takes a Collection as an argument\n+ * and returns a collection containing the same elements (that is, creates a\n+ * copy of the argument using its own implementation).\n+ *\n+ * @see java.util.List\n+ * @see java.util.Set\n+ * @see java.util.AbstractCollection\n  */\n-\n-// JDK1.2\n public interface Collection\n {\n-  public int size();\n-  public boolean isEmpty();\n-  public boolean contains(Object o);\n-  public Iterator iterator();\n-  public Object[] toArray();\n-  public Object[] toArray(Object[] a);\n-  public boolean add(Object o);\n-  public boolean remove(Object o);\n-  public boolean containsAll(Collection c);\n-  public boolean addAll(Collection c);\n-  public boolean removeAll(Collection c);\n-  public boolean retainAll(Collection c);\n-  public void clear();\n-  public boolean equals(Object o);\n-  public int hashCode();\n+  /**\n+   * Add an element to this collection.\n+   *\n+   * @param o the object to add.\n+   * @returns true if the collection was modified as a result of this action.\n+   * @exception UnsupportedOperationException if this collection does not\n+   *   support the add operation.\n+   * @exception ClassCastException if o cannot be added to this collection due\n+   *   to its type.\n+   * @exception IllegalArgumentException if o cannot be added to this\n+   *   collection for some other reason.\n+   */\n+  boolean add(Object o);\n+\n+  /**\n+   * Add the contents of a given collection to this collection.\n+   *\n+   * @param c the collection to add.\n+   * @returns true if the collection was modified as a result of this action.\n+   * @exception UnsupportedOperationException if this collection does not\n+   *   support the addAll operation.\n+   * @exception ClassCastException if some element of c cannot be added to this\n+   *   collection due to its type.\n+   * @exception IllegalArgumentException if some element of c cannot be added\n+   *   to this collection for some other reason.\n+   */\n+  boolean addAll(Collection c);\n+\n+  /**\n+   * Clear the collection, such that a subsequent call to isEmpty() would\n+   * return true.\n+   *\n+   * @exception UnsupportedOperationException if this collection does not\n+   *   support the clear operation.\n+   */\n+  void clear();\n+\n+  /**\n+   * Test whether this collection contains a given object as one of its\n+   * elements.\n+   *\n+   * @param o the element to look for.\n+   * @returns true if this collection contains at least one element e such that\n+   *   <code>o == null ? e == null : o.equals(e)</code>.\n+   */\n+  boolean contains(Object o);\n+\n+  /**\n+   * Test whether this collection contains every element in a given collection.\n+   *\n+   * @param c the collection to test for.\n+   * @returns true if for every element o in c, contains(o) would return true.\n+   */\n+  boolean containsAll(Collection c);\n+\n+  /**\n+   * Test whether this collection is equal to some object. The Collection\n+   * interface does not explicitly require any behaviour from this method, and\n+   * it may be left to the default implementation provided by Object. The Set\n+   * and List interfaces do, however, require specific behaviour from this\n+   * method.\n+   * <p>\n+   * If an implementation of Collection, which is not also an implementation of\n+   * Set or List, should choose to implement this method, it should take care\n+   * to obey the contract of the equals method of Object. In particular, care\n+   * should be taken to return false when o is a Set or a List, in order to\n+   * preserve the symmetry of the relation.\n+   *\n+   * @param o the object to compare to this collection.\n+   * @returns true if the o is equal to this collection.\n+   */\n+  boolean equals(Object o);\n+\n+  /**\n+   * Obtain a hash code for this collection. The Collection interface does not\n+   * explicitly require any behaviour from this method, and it may be left to\n+   * the default implementation provided by Object. The Set and List interfaces\n+   * do, however, require specific behaviour from this method.\n+   * <p>\n+   * If an implementation of Collection, which is not also an implementation of\n+   * Set or List, should choose to implement this method, it should take care\n+   * to obey the contract of the hashCode method of Object. Note that this\n+   * method renders it impossible to correctly implement both Set and List, as\n+   * the required implementations are mutually exclusive.\n+   *\n+   * @returns a hash code for this collection.\n+   */\n+  int hashCode();\n+\n+  /**\n+   * Test whether this collection is empty, that is, if size() == 0.\n+   *\n+   * @returns true if this collection contains no elements.\n+   */\n+  boolean isEmpty();\n+\n+  /**\n+   * Obtain an Iterator over this collection.\n+   *\n+   * @returns an Iterator over the elements of this collection, in any order.\n+   */\n+  Iterator iterator();\n+\n+  /**\n+   * Remove a single occurrence of an object from this collection. That is,\n+   * remove an element e, if one exists, such that <code>o == null ? e == null\n+   *   : o.equals(e)</code>.\n+   *\n+   * @param o the object to remove.\n+   * @returns true if the collection changed as a result of this call, that is,\n+   *   if the collection contained at least one occurrence of o.\n+   * @exception UnsupportedOperationException if this collection does not\n+   *   support the remove operation.\n+   */\n+  boolean remove(Object o);\n+\n+  /**\n+   * Remove all elements of a given collection from this collection. That is,\n+   * remove every element e such that c.contains(e).\n+   *\n+   * @returns true if this collection was modified as a result of this call.\n+   * @exception UnsupportedOperationException if this collection does not\n+   *   support the removeAll operation.\n+   */\n+  boolean removeAll(Collection c);\n+\n+  /**\n+   * Remove all elements of this collection that are not contained in a given\n+   * collection. That is, remove every element e such that !c.contains(e).\n+   *\n+   * @returns true if this collection was modified as a result of this call.\n+   * @exception UnsupportedOperationException if this collection does not\n+   *   support the retainAll operation.\n+   */\n+  boolean retainAll(Collection c);\n+\n+  /**\n+   * Get the number of elements in this collection.\n+   *\n+   * @returns the number of elements in the collection.\n+   */\n+  int size();\n+\n+  /**\n+   * Copy the current contents of this collection into an array.\n+   *\n+   * @returns an array of type Object[] and length equal to the size of this\n+   *   collection, containing the elements currently in this collection, in\n+   *   any order.\n+   */\n+  Object[] toArray();\n+\n+  /**\n+   * Copy the current contents of this collection into an array. If the array\n+   * passed as an argument has length less than the size of this collection, an\n+   * array of the same run-time type as a, and length equal to the size of this\n+   * collection, is allocated using Reflection. Otherwise, a itself is used.\n+   * The elements of this collection are copied into it, and if there is space\n+   * in the array, the following element is set to null. The resultant array is\n+   * returned.\n+   * Note: The fact that the following element is set to null is only useful\n+   * if it is known that this collection does not contain any null elements.\n+   *\n+   * @param a the array to copy this collection into.\n+   * @returns an array containing the elements currently in this collection, in\n+   *   any order.\n+   * @exception ArrayStoreException if the type of any element of the\n+   *   collection is not a subtype of the element type of a.\n+   */\n+  Object[] toArray(Object[] a);\n }"}, {"sha": "4b09e0fdab0d1c50d955fa0cb032e1231a20a0ef", "filename": "libjava/java/util/Comparator.java", "status": "modified", "additions": 54, "deletions": 14, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e3b913b388b770222e5467069c5d98872760a0/libjava%2Fjava%2Futil%2FComparator.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e3b913b388b770222e5467069c5d98872760a0/libjava%2Fjava%2Futil%2FComparator.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FComparator.java?ref=06e3b913b388b770222e5467069c5d98872760a0", "patch": "@@ -1,24 +1,64 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* Comparator.java -- Interface for objects that specify an ordering\n+   Copyright (C) 1998 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.util;\n \n /**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date March 16, 2000.\n- */\n-/* Written using on-line Java Platform 1.2 API Specification.\n- * Status:  Believed complete and correct.\n+ * Interface for objects that specify an ordering between objects. The ordering\n+ * can be <EM>total</EM>, such that two objects only compare equal if they are\n+ * equal by the equals method, or <EM>partial</EM> such that this is not\n+ * necessarily true. For example, a case-sensitive dictionary order comparison\n+ * of Strings is total, but if it is case-insensitive it is partial, because\n+ * \"abc\" and \"ABC\" compare as equal even though \"abc\".equals(\"ABC\") returns\n+ * false.\n+ * <P>\n+ * In general, Comparators should be Serializable, because when they are passed\n+ * to Serializable data structures such as SortedMap or SortedSet, the entire\n+ * data structure will only serialize correctly if the comparator is\n+ * Serializable.\n  */\n-\n-// JDK1.2\n public interface Comparator\n {\n-  public int compare(Object o1, Object o2);\n-  public boolean equals(Object obj);\n+  /**\n+   * Return an integer that is negative, zero or positive depending on whether\n+   * the first argument is less than, equal to or greater than the second\n+   * according to this ordering. This method should obey the following contract:\n+   * <UL>\n+   *   <LI>if compare(a, b) &lt; 0 then compare(b, a) &gt; 0</LI>\n+   *   <LI>if compare(a, b) throws an exception, so does compare(b, a)</LI>\n+   *   <LI>if compare(a, b) &lt; 0 and compare(b, c) &lt; 0 then compare(a, c)\n+   *       &lt; 0</LI>\n+   *   <LI>if a.equals(b) or both a and b are null, then compare(a, b) == 0.\n+   *       The converse need not be true, but if it is, this Comparator\n+   *       specifies a <EM>total</EM> ordering.</LI>\n+   * </UL>\n+   *\n+   * @throws ClassCastException if the elements are not of types that can be\n+   *   compared by this ordering.\n+   */\n+  int compare(Object o1, Object o2);\n }"}, {"sha": "3319c9cde575d527e527f11d8a5425e81818bd0c", "filename": "libjava/java/util/Dictionary.java", "status": "modified", "additions": 73, "deletions": 22, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e3b913b388b770222e5467069c5d98872760a0/libjava%2Fjava%2Futil%2FDictionary.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e3b913b388b770222e5467069c5d98872760a0/libjava%2Fjava%2Futil%2FDictionary.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FDictionary.java?ref=06e3b913b388b770222e5467069c5d98872760a0", "patch": "@@ -1,34 +1,85 @@\n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* Dictionary.java -- an abstract (and essentially worthless) \n+   class which is Hashtable's superclass\n+   Copyright (C) 1998 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.util;\n- \n+\n /**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date August 31, 1998.\n- */\n-/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n- * \"The Java Language Specification\", ISBN 0-201-63451-1\n- * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct\n- */\n- \n-/* The JDK 1.2 beta doc indicates that Dictionary is obsolete and that the\n- * new java.util.Map interface should be used instead.\n+ * A Dictionary maps keys to values; <i>how</i> it does that is\n+ * implementation-specific.\n+ * \n+ * This is an abstract class which has really gone by the wayside.\n+ * People at Javasoft are probably embarrassed by it.  At this point,\n+ * it might as well be an interface rather than a class, but it remains\n+ * this poor, laugable skeleton for the sake of backwards compatibility.\n+ * At any rate, this was what came before the <pre>Map</pre> interface \n+ * in the Collections framework.\n+ *\n+ * @author      Jon Zeppieri\n+ * @version     $Revision: 1.4 $\n+ * @modified    $Id: Dictionary.java,v 1.4 2000/10/26 10:19:00 bryce Exp $\n  */\n-public abstract class Dictionary\n+public abstract class Dictionary extends Object\n {\n+  /** returns an Enumeration of the values in this Dictionary */\n   public abstract Enumeration elements();\n-  public abstract Object get(Object key) throws NullPointerException;\n+\n+  /** \n+   * returns the value associated with the supplied key, or null\n+   * if no such value exists\n+   *\n+   * @param    key      the key to use to fetch the value\n+   */\n+  public abstract Object get(Object key);\n+\n+  /** returns true IFF there are no elements in this Dictionary (size() == 0) */\n   public abstract boolean isEmpty();\n+\n+  /** returns an Enumeration of the keys in this Dictionary */\n   public abstract Enumeration keys();\n-  public abstract Object put(Object key, Object elem)\n-\t\t\t   throws NullPointerException;\n-  public abstract Object remove(Object key) throws NullPointerException;\n+\n+  /**\n+   * inserts a new value into this Dictionary, located by the\n+   * supllied key; note: Dictionary's subclasses (all 1 of them)\n+   * do not support null keys or values (I can only assume this\n+   * would have been more general) \n+   *\n+   * @param      key      the key which locates the value\n+   * @param      value    the value to put into the Dictionary\n+   */\n+  public abstract Object put(Object key, Object value);\n+\n+  /**\n+   * removes fro the Dictionary the value located by the given key\n+   *\n+   * @param       key      the key used to locate the value to be removed\n+   */\n+  public abstract Object remove(Object key);\n+\n+  /** returns the number of values currently in this Dictionary */\n   public abstract int size();\n }"}, {"sha": "92620f8c0ac8d92c12850f87af3056bc63ba9783", "filename": "libjava/java/util/Iterator.java", "status": "modified", "additions": 58, "deletions": 15, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e3b913b388b770222e5467069c5d98872760a0/libjava%2Fjava%2Futil%2FIterator.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e3b913b388b770222e5467069c5d98872760a0/libjava%2Fjava%2Futil%2FIterator.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FIterator.java?ref=06e3b913b388b770222e5467069c5d98872760a0", "patch": "@@ -1,25 +1,68 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* Iterator.java -- Interface for iterating over collections\n+   Copyright (C) 1998 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.util;\n \n /**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date March 16, 2000.\n+ * An object which iterates over a collection. An Iterator is used to return the\n+ * items once only, in sequence, by successive calls to the next method. It is\n+ * also possible to remove elements from the underlying collection by using the\n+ * optional remove method. Iterator is intended as a replacement for the\n+ * Enumeration interface of previous versions of Java, which did not have the\n+ * remove method and had less conveniently named methods.\n  */\n-/* Written using on-line Java Platform 1.2 API Specification.\n- * Status:  Believed complete and correct.\n- */\n-\n-// JDK1.2\n public interface Iterator\n {\n-  public boolean hasNext();\n-  public Object next();\n-  public void remove();\n+  /**\n+   * Tests whether there are elements remaining in the collection.\n+   *\n+   * @return true if there is at least one more element in the collection,\n+   *   that is, if the next call to next will not throw NoSuchElementException.\n+   */\n+  boolean hasNext();\n+\n+  /**\n+   * Obtain the next element in the collection.\n+   *\n+   * @return the next element in the collection\n+   * @exception NoSuchElementException if there are no more elements\n+   */\n+  Object next();\n+\n+  /**\n+   * Remove from the underlying collection the last element returned by next.\n+   * This method can be called only once after each call to next. It does not\n+   * affect what will be returned by subsequent calls to next. This operation is\n+   * optional, it may throw an UnsupportedOperationException.\n+   *\n+   * @exception IllegalStateException if next has not yet been called or remove\n+   *   has already been called since the last call to next.\n+   * @exception UnsupportedOperationException if this Iterator does not support\n+   *   the remove operation.\n+   */\n+  void remove();\n }"}, {"sha": "8a8d2c74e9d048effc328a0a42fc1fc210f1f1c6", "filename": "libjava/java/util/ListIterator.java", "status": "modified", "additions": 137, "deletions": 21, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e3b913b388b770222e5467069c5d98872760a0/libjava%2Fjava%2Futil%2FListIterator.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e3b913b388b770222e5467069c5d98872760a0/libjava%2Fjava%2Futil%2FListIterator.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FListIterator.java?ref=06e3b913b388b770222e5467069c5d98872760a0", "patch": "@@ -1,31 +1,147 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* ListIterator.java -- Extended Iterator for iterating over ordered lists\n+   Copyright (C) 1998, 1999 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.util;\n \n /**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date March 16, 2000.\n+ * An extended version of Iterator to support the extra features of Lists. The\n+ * elements may be accessed in forward or reverse order, elements may be\n+ * replaced as well as removed, and new elements may be inserted, during the\n+ * traversal of the list.\n  */\n-/* Written using on-line Java Platform 1.2 API Specification.\n- * Status:  Believed complete and correct.\n- */\n-\n-// JDK1.2\n public interface ListIterator extends Iterator\n {\n-  public boolean hasNext();\n-  public Object next();\n-  public boolean hasPrevious();\n-  public Object previous();\n-  public int nextIndex();\n-  public int previousIndex();\n-  public void remove();\n-  public void set(Object o);\n-  public void add(Object o);\n+  /**\n+   * Tests whether there are elements remaining in the list in the forward\n+   * direction.\n+   *\n+   * @return true if there is at least one more element in the list in the\n+   *   forward direction, that is, if the next call to next will not throw\n+   *   NoSuchElementException.\n+   */\n+  boolean hasNext();\n+\n+  /**\n+   * Tests whether there are elements remaining in the list in the reverse\n+   * direction.\n+   *\n+   * @return true if there is at least one more element in the list in the\n+   *   reverse direction, that is, if the next call to previous will not throw\n+   *   NoSuchElementException.\n+   */\n+  boolean hasPrevious();\n+\n+  /**\n+   * Obtain the next element in the list in the forward direction. Repeated\n+   * calls to next may be used to iterate over the entire list, or calls to next\n+   * and previous may be used together to go forwards and backwards. Alternating\n+   * calls to next and previous will return the same element.\n+   *\n+   * @return the next element in the list in the forward direction\n+   * @exception NoSuchElementException if there are no more elements\n+   */\n+  Object next();\n+\n+  /**\n+   * Obtain the next element in the list in the reverse direction. Repeated\n+   * calls to previous may be used to iterate backwards over the entire list, or\n+   * calls to next and previous may be used together to go forwards and\n+   * backwards. Alternating calls to next and previous will return the same\n+   * element.\n+   *\n+   * @return the next element in the list in the reverse direction\n+   * @exception NoSuchElementException if there are no more elements\n+   */\n+  Object previous();\n+\n+  /**\n+   * Find the index of the element that would be returned by a call to next.\n+   *\n+   * @return the index of the element that would be returned by a call to next,\n+   *   or list.size() if the iterator is at the end of the list.\n+   */\n+  int nextIndex();\n+\n+  /**\n+   * Find the index of the element that would be returned by a call to previous.\n+   *\n+   * @return the index of the element that would be returned by a call to\n+   *   previous, or -1 if the iterator is at the beginning of the list.\n+   */\n+  int previousIndex();\n+\n+  /**\n+   * Insert an element into the list at the current position of the iterator.\n+   * The element is inserted in between the element that would be returned by\n+   * previous and the element that would be returned by next. After the\n+   * insertion, a subsequent call to next is unaffected, but a call to\n+   * previous returns the item that was added. This operation is optional, it\n+   * may throw an UnsupportedOperationException.\n+   *\n+   * @param o the object to insert into the list\n+   * @exception ClassCastException the object is of a type which cannot be added\n+   *   to this list\n+   * @exception IllegalArgumentException some other aspect of the object stops\n+   *   it being added to this list\n+   * @exception UnsupportedOperationException if this ListIterator does not\n+   *   support the add operation\n+   */\n+  void add(Object o);\n+\n+  /**\n+   * Remove from the list the element last returned by a call to next or\n+   * previous. This method may only be called if neither add nor remove have\n+   * been called since the last call to next or previous. This operation is\n+   * optional, it may throw an UnsupportedOperationException.\n+   *\n+   * @exception IllegalStateException if neither next or previous have been\n+   *   called, or if add or remove has been called since the last call to next\n+   *   or previous.\n+   * @exception UnsupportedOperationException if this ListIterator does not\n+   *   support the remove operation.\n+   */\n+  void remove();\n+\n+  /**\n+   * Replace the element last returned by a call to next or previous with a\n+   * given object. This method may only be called if neither add nor remove have\n+   * been called since the last call to next or previous. This operation is\n+   * optional, it may throw an UnsupportedOperationException.\n+   *\n+   * @param o the object to replace the element with\n+   * @exception ClassCastException the object is of a type which cannot be added\n+   *   to this list\n+   * @exception IllegalArgumentException some other aspect of the object stops\n+   *   it being added to this list\n+   * @exception IllegalStateException if neither next or previous have been\n+   *   called, or if add or remove has been called since the last call to next\n+   *   or previous.\n+   * @exception UnsupportedOperationException if this ListIterator does not\n+   *   support the set operation.\n+   */\n+  void set(Object o);\n }"}, {"sha": "b1d4326971133cf9c0db082731c9eee537973733", "filename": "libjava/java/util/Map.java", "status": "modified", "additions": 24, "deletions": 23, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e3b913b388b770222e5467069c5d98872760a0/libjava%2Fjava%2Futil%2FMap.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e3b913b388b770222e5467069c5d98872760a0/libjava%2Fjava%2Futil%2FMap.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FMap.java?ref=06e3b913b388b770222e5467069c5d98872760a0", "patch": "@@ -7,7 +7,7 @@\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -30,28 +30,29 @@\n \n package java.util;\n \n-public interface Map \n+public interface Map\n {\n-    public void clear();\n-    public boolean containsKey(Object key);\n-    public boolean containsValue(Object value);\n-    public Set entrySet();\n-    public boolean equals(Object o);\n-    public Object get(Object key);\n-    public Object put(Object key, Object value);\n+  public void clear();\n+  public boolean containsKey(Object key);\n+  public boolean containsValue(Object value);\n+  public Set entrySet();\n+  public boolean equals(Object o);\n+  public Object get(Object key);\n+  public Object put(Object key, Object value);\n+  public int hashCode();\n+  public boolean isEmpty();\n+  public Set keySet();\n+  public void putAll(Map m);\n+  public Object remove(Object o);\n+  public int size();\n+  public Collection values();\n+\n+  public static interface Entry\n+  {\n+    public Object getKey();\n+    public Object getValue();\n+    public Object setValue(Object value);\n     public int hashCode();\n-    public boolean isEmpty();\n-    public Set keySet();\n-    public void putAll(Map m);\n-    public Object remove(Object o);\n-    public int size();\n-    public Collection values();\n-    \n-    public static interface Entry {\n-\tpublic Object getKey();\n-\tpublic Object getValue();\n-\tpublic Object setValue(Object value);\n-\tpublic int hashCode();\n-\tpublic boolean equals(Object o);\n-    }\n+    public boolean equals(Object o);\n+  }\n }"}, {"sha": "3c8c09be3d3f321885ec0fa3720c8d5f3ce7d66c", "filename": "libjava/java/util/Set.java", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e3b913b388b770222e5467069c5d98872760a0/libjava%2Fjava%2Futil%2FSet.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e3b913b388b770222e5467069c5d98872760a0/libjava%2Fjava%2Futil%2FSet.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FSet.java?ref=06e3b913b388b770222e5467069c5d98872760a0", "patch": "@@ -1,13 +1,13 @@\n /* Set.java -- A collection that prohibits duplicates\n-   Copyright (C) 1998, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1998 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -30,7 +30,8 @@\n \n package java.util;\n \n-public interface Set extends Collection {\n+public interface Set extends Collection\n+{\n   boolean add(Object o);\n   boolean addAll(Collection c);\n   void clear();"}]}