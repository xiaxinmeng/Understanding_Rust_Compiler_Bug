{"sha": "cbc43ae091a468f438f851e454ac4454bb89f476", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2JjNDNhZTA5MWE0NjhmNDM4Zjg1MWU0NTRhYzQ0NTRiYjg5ZjQ3Ng==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@airs.com", "date": "2005-10-04T18:06:19Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2005-10-04T18:06:19Z"}, "message": "re PR preprocessor/13726 (cpp -C -dI loses comments on same line as #include directives)\n\nlibcpp/\n\tPR preprocessor/13726\n\t* directives.c (check_eol_return_comments): New static function.\n\t(parse_include): Add buf parameter.  Change all callers.\n\t(do_include_common): If not discard comments, turn on\n\tsave_comments.  Pass collected comments to include callback.\n\t* include/cpplib.h (struct cpp_callbacks): Add new parameter to\n\tinclude callback: cpp_token list.\ngcc/\n\tPR preprocessor/13726\n\t* c-ppoutput.c (cb_include): Add comments parameter, and print out\n\tany comments passed in.\ngcc/testsuite/\n\tPR preprocessor/13726\n\t* gcc.dg/cpp/cmdlne-dI-C.c: New test.\n\t* gcc.dg/cpp/cmdlne-dI-C.h: New file.\n\nFrom-SVN: r104951", "tree": {"sha": "545ffe9bc98a6d6ff50b698d701fdeaba1622b1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/545ffe9bc98a6d6ff50b698d701fdeaba1622b1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cbc43ae091a468f438f851e454ac4454bb89f476", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbc43ae091a468f438f851e454ac4454bb89f476", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbc43ae091a468f438f851e454ac4454bb89f476", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbc43ae091a468f438f851e454ac4454bb89f476/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "44d251729691376ab96450f3b8e580a87c055b95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44d251729691376ab96450f3b8e580a87c055b95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44d251729691376ab96450f3b8e580a87c055b95"}], "stats": {"total": 139, "additions": 125, "deletions": 14}, "files": [{"sha": "c3723cd3c6f8dfd30ae916e2ee1642d00b920b15", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbc43ae091a468f438f851e454ac4454bb89f476/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbc43ae091a468f438f851e454ac4454bb89f476/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cbc43ae091a468f438f851e454ac4454bb89f476", "patch": "@@ -1,3 +1,9 @@\n+2005-10-04  Ian Lance Taylor  <ian@airs.com>\n+\n+\tPR preprocessor/13726\n+\t* c-ppoutput.c (cb_include): Add comments parameter, and print out\n+\tany comments passed in.\n+\n 2005-10-04  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* tree.c (annotate_with_file_line): Fix typo."}, {"sha": "692ea7a4d756dd7d7c5901a4cfcea58f9e3226f2", "filename": "gcc/c-ppoutput.c", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbc43ae091a468f438f851e454ac4454bb89f476/gcc%2Fc-ppoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbc43ae091a468f438f851e454ac4454bb89f476/gcc%2Fc-ppoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-ppoutput.c?ref=cbc43ae091a468f438f851e454ac4454bb89f476", "patch": "@@ -54,7 +54,7 @@ static void cb_line_change (cpp_reader *, const cpp_token *, int);\n static void cb_define (cpp_reader *, source_location, cpp_hashnode *);\n static void cb_undef (cpp_reader *, source_location, cpp_hashnode *);\n static void cb_include (cpp_reader *, source_location, const unsigned char *,\n-\t\t\tconst char *, int);\n+\t\t\tconst char *, int, const cpp_token **);\n static void cb_ident (cpp_reader *, source_location, const cpp_string *);\n static void cb_def_pragma (cpp_reader *, source_location);\n static void cb_read_pch (cpp_reader *pfile, const char *name,\n@@ -336,13 +336,27 @@ cb_undef (cpp_reader *pfile ATTRIBUTE_UNUSED, source_location line,\n \n static void\n cb_include (cpp_reader *pfile ATTRIBUTE_UNUSED, source_location line,\n-\t    const unsigned char *dir, const char *header, int angle_brackets)\n+\t    const unsigned char *dir, const char *header, int angle_brackets,\n+\t    const cpp_token **comments)\n {\n   maybe_print_line (line);\n   if (angle_brackets)\n-    fprintf (print.outf, \"#%s <%s>\\n\", dir, header);\n+    fprintf (print.outf, \"#%s <%s>\", dir, header);\n   else\n-    fprintf (print.outf, \"#%s \\\"%s\\\"\\n\", dir, header);\n+    fprintf (print.outf, \"#%s \\\"%s\\\"\", dir, header);\n+\n+  if (comments != NULL)\n+    {\n+      while (*comments != NULL)\n+\t{\n+\t  if ((*comments)->flags & PREV_WHITE)\n+\t    putc (' ', print.outf);\n+\t  cpp_output_token (*comments, print.outf);\n+\t  ++comments;\n+\t}\n+    }\n+\n+  putc ('\\n', print.outf);\n   print.src_line++;\n }\n "}, {"sha": "a397ea946261cc924b1cd24cdb294ab91ee89210", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbc43ae091a468f438f851e454ac4454bb89f476/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbc43ae091a468f438f851e454ac4454bb89f476/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cbc43ae091a468f438f851e454ac4454bb89f476", "patch": "@@ -1,3 +1,9 @@\n+2005-10-04  Ian Lance Taylor  <ian@airs.com>\n+\n+\tPR preprocessor/13726\n+\t* gcc.dg/cpp/cmdlne-dI-C.c: New test.\n+\t* gcc.dg/cpp/cmdlne-dI-C.h: New file.\n+\n 2005-10-04  Richard Guenther  <rguenther@suse.de>\n \n \tPR c/23576"}, {"sha": "6b4bfee2288c999b0441d93bb7889feef3f724dd", "filename": "gcc/testsuite/gcc.dg/cpp/cmdlne-dI-C.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbc43ae091a468f438f851e454ac4454bb89f476/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dI-C.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbc43ae091a468f438f851e454ac4454bb89f476/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dI-C.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dI-C.c?ref=cbc43ae091a468f438f851e454ac4454bb89f476", "patch": "@@ -0,0 +1,11 @@\n+/* Copyright (C) 2005 Free Software Foundation, Inc.  */\n+/* PR 13726 */\n+\n+/* { dg-do preprocess } */\n+/* { dg-options \"-dI -C\" } */\n+\n+#include \"cmdlne-dI-C.h\" /* #include comment */\n+/* comment 2 */\n+\n+/* { dg-final { scan-file cmdlne-dI-C.i \"#include c+omment\" } } */\n+/* { dg-final { scan-file cmdlne-dI-C.i \"header file c+omment\" } } */"}, {"sha": "5021488e4b7f85e5fb96ec948fc180fe0b6524a5", "filename": "gcc/testsuite/gcc.dg/cpp/cmdlne-dI-C.h", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbc43ae091a468f438f851e454ac4454bb89f476/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dI-C.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbc43ae091a468f438f851e454ac4454bb89f476/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dI-C.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dI-C.h?ref=cbc43ae091a468f438f851e454ac4454bb89f476", "patch": "@@ -0,0 +1 @@\n+/* header file comment */"}, {"sha": "731b1c69b368216a8a4dfca5e3e93b1a0b6e7fc2", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbc43ae091a468f438f851e454ac4454bb89f476/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbc43ae091a468f438f851e454ac4454bb89f476/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=cbc43ae091a468f438f851e454ac4454bb89f476", "patch": "@@ -1,3 +1,13 @@\n+2005-10-04  Ian Lance Taylor  <ian@airs.com>\n+\n+\tPR preprocessor/13726\n+\t* directives.c (check_eol_return_comments): New static function.\n+\t(parse_include): Add buf parameter.  Change all callers.\n+\t(do_include_common): If not discard comments, turn on\n+\tsave_comments.  Pass collected comments to include callback.\n+\t* include/cpplib.h (struct cpp_callbacks): Add new parameter to\n+\tinclude callback: cpp_token list.\n+\n 2005-09-20  Joseph S. Myers  <joseph@codesourcery.com>\n \n \t* include/cpplib.h (struct cpp_options): Add extended_identifiers."}, {"sha": "7159f07a688689b3255a7cbcdc9ebda798bad71c", "filename": "libcpp/directives.c", "status": "modified", "additions": 72, "deletions": 9, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbc43ae091a468f438f851e454ac4454bb89f476/libcpp%2Fdirectives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbc43ae091a468f438f851e454ac4454bb89f476/libcpp%2Fdirectives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fdirectives.c?ref=cbc43ae091a468f438f851e454ac4454bb89f476", "patch": "@@ -95,7 +95,7 @@ static void end_directive (cpp_reader *, int);\n static void directive_diagnostics (cpp_reader *, const directive *, int);\n static void run_directive (cpp_reader *, int, const char *, size_t);\n static char *glue_header_name (cpp_reader *);\n-static const char *parse_include (cpp_reader *, int *);\n+static const char *parse_include (cpp_reader *, int *, const cpp_token ***);\n static void push_conditional (cpp_reader *, int, int, const cpp_hashnode *);\n static unsigned int read_flag (cpp_reader *, unsigned int);\n static int strtoul_for_line (const uchar *, unsigned int, unsigned long *);\n@@ -220,6 +220,46 @@ check_eol (cpp_reader *pfile)\n \t       pfile->directive->name);\n }\n \n+/* Ensure there are no stray tokens other than comments at the end of\n+   a directive, and gather the comments.  */\n+static const cpp_token **\n+check_eol_return_comments (cpp_reader *pfile)\n+{\n+  size_t c;\n+  size_t capacity = 8;\n+  const cpp_token **buf;\n+\n+  buf = XNEWVEC (const cpp_token *, capacity);\n+  c = 0;\n+  if (! SEEN_EOL ())\n+    {\n+      while (1)\n+\t{\n+\t  const cpp_token *tok;\n+\n+\t  tok = _cpp_lex_token (pfile);\n+\t  if (tok->type == CPP_EOF)\n+\t    break;\n+\t  if (tok->type != CPP_COMMENT)\n+\t    cpp_error (pfile, CPP_DL_PEDWARN,\n+\t\t       \"extra tokens at end of #%s directive\",\n+\t\t       pfile->directive->name);\n+\t  else\n+\t    {\n+\t      if (c + 1 >= capacity)\n+\t\t{\n+\t\t  capacity *= 2;\n+\t\t  buf = XRESIZEVEC (const cpp_token *, buf, capacity);\n+\t\t}\n+\t      buf[c] = tok;\n+\t      ++c;\n+\t    }\n+\t}\n+    }\n+  buf[c] = NULL;\n+  return buf;\n+}\n+\n /* Called when entering a directive, _Pragma or command-line directive.  */\n static void\n start_directive (cpp_reader *pfile)\n@@ -624,7 +664,8 @@ glue_header_name (cpp_reader *pfile)\n    #pragma dependency.  The string is malloced and the caller should\n    free it.  Returns NULL on error.  */\n static const char *\n-parse_include (cpp_reader *pfile, int *pangle_brackets)\n+parse_include (cpp_reader *pfile, int *pangle_brackets,\n+\t       const cpp_token ***buf)\n {\n   char *fname;\n   const cpp_token *header;\n@@ -657,7 +698,15 @@ parse_include (cpp_reader *pfile, int *pangle_brackets)\n       return NULL;\n     }\n \n-  check_eol (pfile);\n+  if (buf == NULL || CPP_OPTION (pfile, discard_comments))\n+    check_eol (pfile);\n+  else\n+    {\n+      /* If we are not discarding comments, then gather them while\n+\t doing the eol check.  */\n+      *buf = check_eol_return_comments (pfile);\n+    }\n+\n   return fname;\n }\n \n@@ -667,16 +716,27 @@ do_include_common (cpp_reader *pfile, enum include_type type)\n {\n   const char *fname;\n   int angle_brackets;\n+  const cpp_token **buf = NULL;\n \n-  fname = parse_include (pfile, &angle_brackets);\n+  /* Re-enable saving of comments if requested, so that the include\n+     callback can dump comments which follow #include.  */\n+  pfile->state.save_comments = ! CPP_OPTION (pfile, discard_comments);\n+\n+  fname = parse_include (pfile, &angle_brackets, &buf);\n   if (!fname)\n-    return;\n+    {\n+      if (buf)\n+\tXDELETEVEC (buf);\n+      return;\n+    }\n \n   if (!*fname)\n   {\n     cpp_error (pfile, CPP_DL_ERROR, \"empty filename in #%s\",\n                pfile->directive->name);\n-    free ((void *) fname);\n+    XDELETEVEC (fname);\n+    if (buf)\n+      XDELETEVEC (buf);\n     return;\n   }\n \n@@ -690,12 +750,15 @@ do_include_common (cpp_reader *pfile, enum include_type type)\n \n       if (pfile->cb.include)\n \tpfile->cb.include (pfile, pfile->directive_line,\n-\t\t\t   pfile->directive->name, fname, angle_brackets);\n+\t\t\t   pfile->directive->name, fname, angle_brackets,\n+\t\t\t   buf);\n \n       _cpp_stack_include (pfile, fname, angle_brackets, type);\n     }\n \n-  free ((void *) fname);\n+  XDELETEVEC (fname);\n+  if (buf)\n+    XDELETEVEC (buf);\n }\n \n static void\n@@ -1322,7 +1385,7 @@ do_pragma_dependency (cpp_reader *pfile)\n   const char *fname;\n   int angle_brackets, ordering;\n \n-  fname = parse_include (pfile, &angle_brackets);\n+  fname = parse_include (pfile, &angle_brackets, NULL);\n   if (!fname)\n     return;\n "}, {"sha": "3c4d0d6cb5b452e5ab43424592ddd8425a70b0c1", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbc43ae091a468f438f851e454ac4454bb89f476/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbc43ae091a468f438f851e454ac4454bb89f476/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=cbc43ae091a468f438f851e454ac4454bb89f476", "patch": "@@ -459,7 +459,7 @@ struct cpp_callbacks\n \n   void (*dir_change) (cpp_reader *, const char *);\n   void (*include) (cpp_reader *, unsigned int, const unsigned char *,\n-\t\t   const char *, int);\n+\t\t   const char *, int, const cpp_token **);\n   void (*define) (cpp_reader *, unsigned int, cpp_hashnode *);\n   void (*undef) (cpp_reader *, unsigned int, cpp_hashnode *);\n   void (*ident) (cpp_reader *, unsigned int, const cpp_string *);"}]}