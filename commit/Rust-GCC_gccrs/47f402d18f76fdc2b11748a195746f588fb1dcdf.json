{"sha": "47f402d18f76fdc2b11748a195746f588fb1dcdf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdmNDAyZDE4Zjc2ZmRjMmIxMTc0OGExOTU3NDZmNTg4ZmIxZGNkZg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-04-21T08:44:25Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-04-21T08:44:25Z"}, "message": "alpha.md (tune): Add cast to enum attr_tune.\n\n\t* config/alpha/alpha.md (tune): Add cast to enum attr_tune.\n\nFrom-SVN: r146484", "tree": {"sha": "43facf29c0e82a1310f7c8350a496393eca3d57a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43facf29c0e82a1310f7c8350a496393eca3d57a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47f402d18f76fdc2b11748a195746f588fb1dcdf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47f402d18f76fdc2b11748a195746f588fb1dcdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47f402d18f76fdc2b11748a195746f588fb1dcdf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47f402d18f76fdc2b11748a195746f588fb1dcdf/comments", "author": null, "committer": null, "parents": [{"sha": "1e4ae551ddb8ba1e02e3dd50bc55381d313fed8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e4ae551ddb8ba1e02e3dd50bc55381d313fed8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e4ae551ddb8ba1e02e3dd50bc55381d313fed8e"}], "stats": {"total": 87, "additions": 36, "deletions": 51}, "files": [{"sha": "930937f2972d3f996eca9a1fdbaeb3b890eb0e93", "filename": "gcc/ChangeLog", "status": "modified", "additions": 35, "deletions": 50, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47f402d18f76fdc2b11748a195746f588fb1dcdf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47f402d18f76fdc2b11748a195746f588fb1dcdf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=47f402d18f76fdc2b11748a195746f588fb1dcdf", "patch": "@@ -1,3 +1,7 @@\n+2009-04-21  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/alpha/alpha.md (tune): Add cast to enum attr_tune.\n+\n 2009-04-21  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \tPR 16202\n@@ -36,23 +40,19 @@\n 2009-04-20  Ian Lance Taylor  <iant@google.com>\n \n \tFix enum conversions which are invalid in C++:\n-\t* auto-inc-dec.c (attempt_change): Change 0 to SET in function\n-\tcall.\n-\t* calls.c (store_one_arg): Change 0 to EXPAND_NORMAL in function\n-\tcall.\n+\t* auto-inc-dec.c (attempt_change): Change 0 to SET in function call.\n+\t* calls.c (store_one_arg): Change 0 to EXPAND_NORMAL in function call.\n \t* cse.c (hash_rtx_cb): Change 0 to VOIDmode in function call.\n \t* dbgcnt.c (dbg_cnt_set_limit_by_name): Add cast to enum type.\n-\t* dbxout.c (dbxout_symbol): Change 0 to VOIDmode in function\n-\tcall.\n+\t* dbxout.c (dbxout_symbol): Change 0 to VOIDmode in function call.\n \t(dbxout_parms): Likewise.\n-\t* df-core.c (df_set_flags): Change changeable_flags parameter to\n-\tint.\n+\t* df-core.c (df_set_flags): Change changeable_flags parameter to int.\n \t(df_clear_flags): Likewise.\n \t* df-problems.c (df_rd_bb_local_compute_process_def): Change\n \ttop_flag parameter to int.\n \t(df_chain_create_bb_process_use): Likewise.\n-\t(df_chain_add_problem): Change chain_flags parameter to unsigned\n-\tint.  Remove cast.\n+\t(df_chain_add_problem): Change chain_flags parameter to unsigned int.\n+\tRemove cast.\n \t* df-scan.c (df_ref_create): Change ref_flags parameter to int.\n \t(df_ref_create_structure, df_def_record_1): Likewise.\n \t(df_defs_record, df_uses_record, df_get_call_refs): Likewise.\n@@ -69,14 +69,12 @@\n \t(loc_descriptor_from_tree_1): Change first_op and second_op to\n \tenum dwarf_location_atom.  Add cast to enum type.\n \t* expmed.c (init_expmed): Change 0 to SET in function call.\n-\t* expr.c (init_expr_target): Change 0 to VOIDmode in function\n-\tcall.\n+\t* expr.c (init_expr_target): Change 0 to VOIDmode in function call.\n \t(expand_expr_real_1): Change 0 to EXPAND_NORMAL in function call.\n \t(do_store_flag): Likewise.\n \t* fixed-value.h (struct fixed_value): Change mode to enum\n \tmachine_mode.\n-\t* function.c (assign_parms): Change 0 to VOIDmode in function\n-\tcall.\n+\t* function.c (assign_parms): Change 0 to VOIDmode in function call.\n \t* genautomata.c (insert_automaton_decl): Change 1 to INSERT in\n \tfunction call.\n \t(insert_insn_decl, insert_decl, insert_state): Likewise.\n@@ -88,21 +86,18 @@\n \t(gimple_build_call_1, gimple_build_label): Likewise.\n \t(gimple_build_goto, gimple_build_asm_1): Likewise.\n \t(gimple_build_switch_1, gimple_build_cdt): Likewise.\n-\t* gimple.h (GIMPLE_CHECK): Change 0 to ERROR_MARK in function\n-\tcall.\n+\t* gimple.h (GIMPLE_CHECK): Change 0 to ERROR_MARK in function call.\n \t(enum fallback): Rename from enum fallback_t.\n \t(fallback_t): Typedef as int.\n \t* gimple-low.c (lower_builtin_setjmp): Change TSI_SAME_STMT to\n \tGSI_SAME_STMT in function call.\n \t* ira.c (setup_class_subset_and_memory_move_costs): Add casts to\n \tenum type.\n \t(setup_reg_class_relations): Likewise.\n-\t(setup_reg_class_nregs): Change cl to int.  Add casts to enum\n-\ttype.\n+\t(setup_reg_class_nregs): Change cl to int.  Add casts to enum type.\n \t(setup_prohibited_class_mode_regs): Add cast to enum type.\n \t(setup_prohibited_mode_move_regs): Likewise.\n-\t* ira-costs.c (record_reg_classes): Change rclass to enum\n-\treg_class.\n+\t* ira-costs.c (record_reg_classes): Change rclass to enum reg_class.\n \t(record_address_regs): Change i to enum reg_class.\n \t* lists.c (alloc_EXPR_LIST): Add cast to enum type.\n \t* machmode.h (GET_MODE_CLASS): Cast value to enum mode_class.\n@@ -119,8 +114,7 @@\n \t(combine_predictions_for_bb): Likewise.\n \t(build_predict_expr): Change assignment to PREDICT_EXPR_OUTCOME to\n \tuse SET_PREDICT_EXPR_OUTCOME.\n-\t* real.c (real_arithmetic): Change icode to code in function\n-\tcall.\n+\t* real.c (real_arithmetic): Change icode to code in function call.\n \t* reginfo.c (init_move_cost): Add casts to enum type.\n \t(init_reg_sets_1, init_fake_stack_mems): Likewise.\n \t* regmove.c (regclass_compatible_p): Change class0 and class1 to\n@@ -139,8 +133,7 @@\n \tto enum type in function call.\n \t* tree.h (PREDICT_EXPR_OUTCOME): Add cast to enum type.\n \t(SET_PREDICT_EXPR_OUTCOME): Define.\n-\t* tree-dump.c (get_dump_file_info): Change phase parameter to\n-\tint.\n+\t* tree-dump.c (get_dump_file_info): Change phase parameter to int.\n \t(get_dump_file_name, dump_begin, dump_enabled_p): Likewise.\n \t(dump_initialized_p, dump_flag_name, dump_end): Likewise.\n \t(dump_function): Likewise.\n@@ -208,15 +201,13 @@\n \t(s390_expand_setmem, s390_expand_cmpmem): Likewise.\n \t(save_gprs): Use add_reg_note.\n \t(s390_emit_prologue): Likewise.\n-\t(s390_expand_builtin): Change 0 to EXPAND_NORMAL in function\n-\tcall.\n+\t(s390_expand_builtin): Change 0 to EXPAND_NORMAL in function call.\n \t* config/sparc/sparc.c (sparc_expand_prologue): Use add_reg_note.\n \t(sparc_fold_builtin): Add cast to enum type.\n \t* config/spu/spu.c (spu_emit_branch_or_set): Change ior_code to\n \tenum insn_code.\n \t(spu_expand_prologue): Use add_reg_note.\n-\t(expand_builtin_args): Change 0 to EXPAND_NORMAL in function\n-\tcall.\n+\t(expand_builtin_args): Change 0 to EXPAND_NORMAL in function call.\n \n 2009-04-20  Ian Lance Taylor  <iant@google.com>\n \n@@ -235,8 +226,7 @@\n \tbuild_function_call.\n \t(convert_arguments): Remove nargs and argarray parameters.  Change\n \tvalues to a VEC.  Add origtypes parameter.\n-\t(build_modify_expr): Add rhs_origtype parameter.  Change all\n-\tcallers.\n+\t(build_modify_expr): Add rhs_origtype parameter.  Change all callers.\n \t(convert_for_assignment): Add origtype parameter.  Change all\n \tcallers.  If warn_cxx_compat, check for conversion to an enum\n \ttype when calling a function.\n@@ -253,11 +243,9 @@\n \t* c-common.c (sync_resolve_size): Change params to VEC *.  Change\n \tcaller.\n \t(sync_resolve_params): Likewise.\n-\t(sync_resolve_return): Change params to first_param.  Change\n-\tcaller.\n+\t(sync_resolve_return): Change params to first_param.  Change caller.\n \t(resolve_overloaded_builtins): Change params to VEC *.  Change\n-\tcallers.   Save first parameter around call to\n-\tbuild_function_call_vec.\n+\tcallers.  Save first parameter around call to build_function_call_vec.\n \t* c-decl.c (finish_decl): Add origtype parameter.  Change all\n \tcallers.  Call build_function_call_vec rather than\n \tbuild_function_call for cleanup.\n@@ -276,8 +264,7 @@\n \tfnargs parameter to have type void *, and to be a pointer to a\n \tVEC.  Call build_function_call_vec instead of\n \tbuild_function_call.\n-\t* config/spu/spu-protos.h (spu_expand_builtin): Update\n-\tdeclaration.\n+\t* config/spu/spu-protos.h (spu_expand_builtin): Update declaration.\n \n 2009-04-20  Joey Ye  <joey.ye@intel.com>\n \t    Xuepeng Guo <xuepeng.guo@intel.com>\n@@ -346,8 +333,9 @@\n \n \tPR tree-optimization/39675\n \t* tree-vect-loop.c (vect_transform_loop): Remove currently redundant \n-\tcheck of the return code of vect_schedule_slp. Check that stmt_vec_info\n-\tstill exists for the statement, before checking its vectorization type.\n+\tcheck of the return code of vect_schedule_slp. Check that\n+\tstmt_vec_info still exists for the statement, before checking its\n+\tvectorization type.\n \n 2009-04-20  Michael Matz  <matz@suse.de>\n \n@@ -391,7 +379,8 @@\n \n 2009-04-19  Jan Hubicka  <jh@suse.cz>\n \n-\t* cgraph.c (cgraph_create_edge, cgraph_set_call_stmt): Set proper cfun.\n+\t* cgraph.c (cgraph_create_edge, cgraph_set_call_stmt): Set proper\n+\tcfun.\n \t(dump_cgraph_node): Dump can throw external flag.\n \t* ipa-pure-const.c (propagate): Fix propagation of nothrow flags.\n \n@@ -533,8 +522,7 @@\n \n 2009-04-17  Diego Novillo  <dnovillo@google.com>\n \n-\t* omp-low.c (create_omp_child_function): Set DECL_CONTEXT\n-\tfor DECL.\n+\t* omp-low.c (create_omp_child_function): Set DECL_CONTEXT for DECL.\n \t* cgraphunit.c (cgraph_build_static_cdtor): Likewise.\n \t* tree-dfa.c (find_referenced_vars_in): Factor out of ...\n \t(find_vars_r): ... here.\n@@ -551,13 +539,11 @@\n \n 2009-04-17  Diego Novillo  <dnovillo@google.com>\n \n-\t* tree-pretty-print.c (dump_generic_node): Add break\n-\tafter TREE_BINFO handler.\n-\tHandle COMPLEX_TYPE, REAL_TYPE and FIXED_POINT_TYPE\n-\tHandle NULL TREE_TYPEs.\n-\tHandle METHOD_TYPE and FUNCTION_TYPE together.\n-\tCall print_struct_decl when printing structures and\n-\tTDF_SLIM is not given.\n+\t* tree-pretty-print.c (dump_generic_node): Add break after\n+\tTREE_BINFO handler.  Handle COMPLEX_TYPE, REAL_TYPE and\n+\tFIXED_POINT_TYPE.  Handle NULL TREE_TYPEs.  Handle METHOD_TYPE and\n+\tFUNCTION_TYPE together.  Call print_struct_decl when printing\n+\tstructures and TDF_SLIM is not given.\n \t(print_struct_decl): Fix logic for detecting recursion.\n \n 2009-04-17  Rafael Avila de Espindola  <espindola@google.com>\n@@ -599,8 +585,7 @@\n \n 2009-04-17  Richard Guenther  <rguenther@suse.de>\n \n-\t* tree-ssa-forwprop.c (get_prop_dest_stmt): Clean up\n-\ttuplification.\n+\t* tree-ssa-forwprop.c (get_prop_dest_stmt): Clean up tuplification.\n \t(get_prop_source_stmt): Likewise.\n \t(can_propagate_from): Likewise.\n "}, {"sha": "c4523860bf3d38bbc7577c3c4bec801b0b1fb0b9", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47f402d18f76fdc2b11748a195746f588fb1dcdf/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47f402d18f76fdc2b11748a195746f588fb1dcdf/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=47f402d18f76fdc2b11748a195746f588fb1dcdf", "patch": "@@ -107,7 +107,7 @@\n ;; enumeration in alpha.h.\n \n (define_attr \"tune\" \"ev4,ev5,ev6\"\n-  (const (symbol_ref \"alpha_tune\")))\n+  (const (symbol_ref \"((enum attr_tune) alpha_tune)\")))\n \n ;; Define an insn type attribute.  This is used in function unit delay\n ;; computations, among other purposes.  For the most part, we use the names"}]}