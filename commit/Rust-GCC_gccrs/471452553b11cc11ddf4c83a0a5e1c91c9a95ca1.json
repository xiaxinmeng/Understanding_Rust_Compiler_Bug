{"sha": "471452553b11cc11ddf4c83a0a5e1c91c9a95ca1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDcxNDUyNTUzYjExY2MxMWRkZjRjODNhMGE1ZTFjOTFjOWE5NWNhMQ==", "commit": {"author": {"name": "Alexander Ivchenko", "email": "alexander.ivchenko@intel.com", "date": "2014-09-23T07:19:00Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2014-09-23T07:19:00Z"}, "message": "AVX-512. Add rest of vunpck[lh]ps.\n\ngcc/\n\t* config/i386/sse.md\n\t(define_insn \"avx_unpckhps256<mask_name>\"): Add masking.\n\t(define_insn \"vec_interleave_highv4sf<mask_name>\"): Ditto.\n\t(define_insn \"avx_unpcklps256<mask_name>\"): Ditto.\n\t(define_insn \"unpcklps128_mask\"): New.\n\n\nCo-Authored-By: Andrey Turetskiy <andrey.turetskiy@intel.com>\nCo-Authored-By: Anna Tikhonova <anna.tikhonova@intel.com>\nCo-Authored-By: Ilya Tocar <ilya.tocar@intel.com>\nCo-Authored-By: Ilya Verbin <ilya.verbin@intel.com>\nCo-Authored-By: Kirill Yukhin <kirill.yukhin@intel.com>\nCo-Authored-By: Maxim Kuznetsov <maxim.kuznetsov@intel.com>\nCo-Authored-By: Michael Zolotukhin <michael.v.zolotukhin@intel.com>\n\nFrom-SVN: r215494", "tree": {"sha": "4cc5b8d494e9e122e944041d466c1337777387df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4cc5b8d494e9e122e944041d466c1337777387df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/471452553b11cc11ddf4c83a0a5e1c91c9a95ca1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/471452553b11cc11ddf4c83a0a5e1c91c9a95ca1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/471452553b11cc11ddf4c83a0a5e1c91c9a95ca1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/471452553b11cc11ddf4c83a0a5e1c91c9a95ca1/comments", "author": null, "committer": null, "parents": [{"sha": "8fd83a546b82e2ab3f7db5d470f3f3f1adcf972a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fd83a546b82e2ab3f7db5d470f3f3f1adcf972a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fd83a546b82e2ab3f7db5d470f3f3f1adcf972a"}], "stats": {"total": 68, "additions": 50, "deletions": 18}, "files": [{"sha": "2ae3caaf464ef1a7d14eba3ebe376c5670a4a147", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/471452553b11cc11ddf4c83a0a5e1c91c9a95ca1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/471452553b11cc11ddf4c83a0a5e1c91c9a95ca1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=471452553b11cc11ddf4c83a0a5e1c91c9a95ca1", "patch": "@@ -1,3 +1,18 @@\n+2014-09-23  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n+\t    Anna Tikhonova  <anna.tikhonova@intel.com>\n+\t    Ilya Tocar  <ilya.tocar@intel.com>\n+\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\t    Kirill Yukhin  <kirill.yukhin@intel.com>\n+\t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n+\n+\t* config/i386/sse.md\n+\t(define_insn \"avx_unpckhps256<mask_name>\"): Add masking.\n+\t(define_insn \"vec_interleave_highv4sf<mask_name>\"): Ditto.\n+\t(define_insn \"avx_unpcklps256<mask_name>\"): Ditto.\n+\t(define_insn \"unpcklps128_mask\"): New.\n+\n 2014-09-23  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n \t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n \t    Anna Tikhonova  <anna.tikhonova@intel.com>"}, {"sha": "295f11af51a5f9042eafb81d7f325e84dfa79751", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 35, "deletions": 18, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/471452553b11cc11ddf4c83a0a5e1c91c9a95ca1/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/471452553b11cc11ddf4c83a0a5e1c91c9a95ca1/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=471452553b11cc11ddf4c83a0a5e1c91c9a95ca1", "patch": "@@ -5525,18 +5525,18 @@\n    (set_attr \"mode\" \"V16SF\")])\n \n ;; Recall that the 256-bit unpck insns only shuffle within their lanes.\n-(define_insn \"avx_unpckhps256\"\n-  [(set (match_operand:V8SF 0 \"register_operand\" \"=x\")\n+(define_insn \"avx_unpckhps256<mask_name>\"\n+  [(set (match_operand:V8SF 0 \"register_operand\" \"=v\")\n \t(vec_select:V8SF\n \t  (vec_concat:V16SF\n-\t    (match_operand:V8SF 1 \"register_operand\" \"x\")\n-\t    (match_operand:V8SF 2 \"nonimmediate_operand\" \"xm\"))\n+\t    (match_operand:V8SF 1 \"register_operand\" \"v\")\n+\t    (match_operand:V8SF 2 \"nonimmediate_operand\" \"vm\"))\n \t  (parallel [(const_int 2) (const_int 10)\n \t\t     (const_int 3) (const_int 11)\n \t\t     (const_int 6) (const_int 14)\n \t\t     (const_int 7) (const_int 15)])))]\n-  \"TARGET_AVX\"\n-  \"vunpckhps\\t{%2, %1, %0|%0, %1, %2}\"\n+  \"TARGET_AVX && <mask_avx512vl_condition>\"\n+  \"vunpckhps\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"V8SF\")])\n@@ -5575,18 +5575,18 @@\n   operands[4] = gen_reg_rtx (V8SFmode);\n })\n \n-(define_insn \"vec_interleave_highv4sf\"\n-  [(set (match_operand:V4SF 0 \"register_operand\" \"=x,x\")\n+(define_insn \"vec_interleave_highv4sf<mask_name>\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=x,v\")\n \t(vec_select:V4SF\n \t  (vec_concat:V8SF\n-\t    (match_operand:V4SF 1 \"register_operand\" \"0,x\")\n-\t    (match_operand:V4SF 2 \"nonimmediate_operand\" \"xm,xm\"))\n+\t    (match_operand:V4SF 1 \"register_operand\" \"0,v\")\n+\t    (match_operand:V4SF 2 \"nonimmediate_operand\" \"xm,vm\"))\n \t  (parallel [(const_int 2) (const_int 6)\n \t\t     (const_int 3) (const_int 7)])))]\n-  \"TARGET_SSE\"\n+  \"TARGET_SSE && <mask_avx512vl_condition>\"\n   \"@\n    unpckhps\\t{%2, %0|%0, %2}\n-   vunpckhps\\t{%2, %1, %0|%0, %1, %2}\"\n+   vunpckhps\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"sselog\")\n    (set_attr \"prefix\" \"orig,vex\")\n@@ -5613,22 +5613,39 @@\n    (set_attr \"mode\" \"V16SF\")])\n \n ;; Recall that the 256-bit unpck insns only shuffle within their lanes.\n-(define_insn \"avx_unpcklps256\"\n-  [(set (match_operand:V8SF 0 \"register_operand\" \"=x\")\n+(define_insn \"avx_unpcklps256<mask_name>\"\n+  [(set (match_operand:V8SF 0 \"register_operand\" \"=v\")\n \t(vec_select:V8SF\n \t  (vec_concat:V16SF\n-\t    (match_operand:V8SF 1 \"register_operand\" \"x\")\n-\t    (match_operand:V8SF 2 \"nonimmediate_operand\" \"xm\"))\n+\t    (match_operand:V8SF 1 \"register_operand\" \"v\")\n+\t    (match_operand:V8SF 2 \"nonimmediate_operand\" \"vm\"))\n \t  (parallel [(const_int 0) (const_int 8)\n \t\t     (const_int 1) (const_int 9)\n \t\t     (const_int 4) (const_int 12)\n \t\t     (const_int 5) (const_int 13)])))]\n-  \"TARGET_AVX\"\n-  \"vunpcklps\\t{%2, %1, %0|%0, %1, %2}\"\n+  \"TARGET_AVX && <mask_avx512vl_condition>\"\n+  \"vunpcklps\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"V8SF\")])\n \n+(define_insn \"unpcklps128_mask\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=v\")\n+\t(vec_merge:V4SF\n+\t  (vec_select:V4SF\n+\t    (vec_concat:V8SF\n+\t      (match_operand:V4SF 1 \"register_operand\" \"v\")\n+\t      (match_operand:V4SF 2 \"nonimmediate_operand\" \"vm\"))\n+\t    (parallel [(const_int 0) (const_int 4)\n+\t\t      (const_int 1) (const_int 5)]))\n+\t  (match_operand:V4SF 3 \"vector_move_operand\" \"0C\")\n+\t  (match_operand:QI 4 \"register_operand\" \"Yk\")))]\n+  \"TARGET_AVX512VL\"\n+  \"vunpcklps\\t{%2, %1, %0%{%4%}%N3|%0%{%4%}%N3, %1, %2}\"\n+  [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"V4SF\")])\n+\n (define_expand \"vec_interleave_lowv8sf\"\n   [(set (match_dup 3)\n \t(vec_select:V8SF"}]}