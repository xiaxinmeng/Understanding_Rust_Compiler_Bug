{"sha": "376d6b8c6a89846b2015033c25f9a9807ef675a9", "node_id": "C_kwDOANBUbNoAKDM3NmQ2YjhjNmE4OTg0NmIyMDE1MDMzYzI1ZjlhOTgwN2VmNjc1YTk", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-12-24T00:17:19Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-12-24T00:17:19Z"}, "message": "Daily bump.", "tree": {"sha": "0e634d5fdcfd20f783444b26d97a7fe2fd8eb234", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e634d5fdcfd20f783444b26d97a7fe2fd8eb234"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/376d6b8c6a89846b2015033c25f9a9807ef675a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/376d6b8c6a89846b2015033c25f9a9807ef675a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/376d6b8c6a89846b2015033c25f9a9807ef675a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/376d6b8c6a89846b2015033c25f9a9807ef675a9/comments", "author": null, "committer": null, "parents": [{"sha": "9149a5b7e0a66b7b94d5b7db3194a975d18dea2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9149a5b7e0a66b7b94d5b7db3194a975d18dea2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9149a5b7e0a66b7b94d5b7db3194a975d18dea2f"}], "stats": {"total": 465, "additions": 464, "deletions": 1}, "files": [{"sha": "3b639f40d7d719a459ca5b7151f5f0209d22f58e", "filename": "contrib/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/376d6b8c6a89846b2015033c25f9a9807ef675a9/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/376d6b8c6a89846b2015033c25f9a9807ef675a9/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=376d6b8c6a89846b2015033c25f9a9807ef675a9", "patch": "@@ -1,3 +1,7 @@\n+2022-12-23  Arsen Arsenovi\u0107  <arsen@aarsen.me>\n+\n+\t* dg-out-generator.pl: New file.\n+\n 2022-12-21  Martin Liska  <mliska@suse.cz>\n \n \t* filter-clang-warnings.py: Simplify."}, {"sha": "0f66262a5c5cc1ca767227ae59799075333b940c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 184, "deletions": 0, "changes": 184, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/376d6b8c6a89846b2015033c25f9a9807ef675a9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/376d6b8c6a89846b2015033c25f9a9807ef675a9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=376d6b8c6a89846b2015033c25f9a9807ef675a9", "patch": "@@ -1,3 +1,187 @@\n+2022-12-23  Jakub Jelinek  <jakub@redhat.com>\n+\t    Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* tree-ssa-phiopt.cc (value_replacement): Instead of resetting\n+\tphires range info, union it with carg.\n+\n+2022-12-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/108068\n+\t* tree.h (real_maybe_zerop): Declare.\n+\t* tree.cc (real_maybe_zerop): Define.\n+\t* tree-ssa-dom.cc (record_edge_info): Use it instead of\n+\treal_zerop or TREE_CODE (op1) == SSA_NAME || real_zerop.  Always set\n+\tcan_infer_simple_equiv to false for decimal floating point types.\n+\n+2022-12-23  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR target/107548\n+\t* config/i386/i386-features.cc (scalar_chain::add_insn): The\n+\toperands of a VEC_SELECT don't need to added to the scalar chain.\n+\t(general_scalar_chain::compute_convert_gain) <case VEC_SELECT>:\n+\tProvide gains for performing STV on a VEC_SELECT.\n+\t(general_scalar_chain::convert_insn): Convert VEC_SELECT to pshufd,\n+\tpsrldq or no-op.\n+\t(general_scalar_to_vector_candidate_p): Handle VEC_SELECT of a\n+\tsingle element from a vector register to a scalar register.\n+\n+2022-12-23  H.J. Lu  <hjl.tools@gmail.com>\n+\t    Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR target/106933\n+\tPR target/106959\n+\t* config/i386/i386-features.cc (single_def_chain_p): New predicate\n+\tfunction to check that a pseudo's use-def chain is in SSA form.\n+\t(timode_scalar_to_vector_candidate_p): Check that TImode regs that\n+\tare SET_DEST or SET_SRC of an insn match/are single_def_chain_p.\n+\n+2022-12-23  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/vector.md: Fix contraints.\n+\n+2022-12-23  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/riscv-protos.h (get_avl_type_rtx): New function.\n+\t* config/riscv/riscv-v.cc (get_avl_type_rtx): Ditto.\n+\t* config/riscv/riscv-vector-builtins-bases.cc (class loadstore): New\n+\tclass.\n+\t(BASE): Ditto.\n+\t* config/riscv/riscv-vector-builtins-bases.h: Ditto.\n+\t* config/riscv/riscv-vector-builtins-functions.def (vle): Ditto.\n+\t(vse): Ditto.\n+\t* config/riscv/riscv-vector-builtins-shapes.cc (build_one): Ditto.\n+\t(struct loadstore_def): Ditto.\n+\t(SHAPE): Ditto.\n+\t* config/riscv/riscv-vector-builtins-shapes.h: Ditto.\n+\t* config/riscv/riscv-vector-builtins-types.def (DEF_RVV_U_OPS): New\n+\tmacro.\n+\t(DEF_RVV_F_OPS): Ditto.\n+\t(vuint8mf8_t): Add corresponding mask type.\n+\t(vuint8mf4_t): Ditto.\n+\t(vuint8mf2_t): Ditto.\n+\t(vuint8m1_t): Ditto.\n+\t(vuint8m2_t): Ditto.\n+\t(vuint8m4_t): Ditto.\n+\t(vuint8m8_t): Ditto.\n+\t(vuint16mf4_t): Ditto.\n+\t(vuint16mf2_t): Ditto.\n+\t(vuint16m1_t): Ditto.\n+\t(vuint16m2_t): Ditto.\n+\t(vuint16m4_t): Ditto.\n+\t(vuint16m8_t): Ditto.\n+\t(vuint32mf2_t): Ditto.\n+\t(vuint32m1_t): Ditto.\n+\t(vuint32m2_t): Ditto.\n+\t(vuint32m4_t): Ditto.\n+\t(vuint32m8_t): Ditto.\n+\t(vuint64m1_t): Ditto.\n+\t(vuint64m2_t): Ditto.\n+\t(vuint64m4_t): Ditto.\n+\t(vuint64m8_t): Ditto.\n+\t(vfloat32mf2_t): Ditto.\n+\t(vfloat32m1_t): Ditto.\n+\t(vfloat32m2_t): Ditto.\n+\t(vfloat32m4_t): Ditto.\n+\t(vfloat32m8_t): Ditto.\n+\t(vfloat64m1_t): Ditto.\n+\t(vfloat64m2_t): Ditto.\n+\t(vfloat64m4_t): Ditto.\n+\t(vfloat64m8_t): Ditto.\n+\t* config/riscv/riscv-vector-builtins.cc (DEF_RVV_TYPE): Adjust for new\n+\tmacro.\n+\t(DEF_RVV_I_OPS): Ditto.\n+\t(DEF_RVV_U_OPS): New macro.\n+\t(DEF_RVV_F_OPS): New macro.\n+\t(use_real_mask_p): New function.\n+\t(use_real_merge_p): Ditto.\n+\t(get_tail_policy_for_pred): Ditto.\n+\t(get_mask_policy_for_pred): Ditto.\n+\t(function_builder::apply_predication): Ditto.\n+\t(function_builder::append_base_name): Ditto.\n+\t(function_builder::append_sew): Ditto.\n+\t(function_expander::add_vundef_operand): Ditto.\n+\t(function_expander::add_mem_operand): Ditto.\n+\t(function_expander::use_contiguous_load_insn): Ditto.\n+\t(function_expander::use_contiguous_store_insn): Ditto.\n+\t* config/riscv/riscv-vector-builtins.def (DEF_RVV_TYPE): Adjust for\n+\tadding mask type.\n+\t(vbool64_t): Ditto.\n+\t(vbool32_t): Ditto.\n+\t(vbool16_t): Ditto.\n+\t(vbool8_t): Ditto.\n+\t(vbool4_t): Ditto.\n+\t(vbool2_t): Ditto.\n+\t(vbool1_t): Ditto.\n+\t(vint8mf8_t): Ditto.\n+\t(vint8mf4_t): Ditto.\n+\t(vint8mf2_t): Ditto.\n+\t(vint8m1_t): Ditto.\n+\t(vint8m2_t): Ditto.\n+\t(vint8m4_t): Ditto.\n+\t(vint8m8_t): Ditto.\n+\t(vint16mf4_t): Ditto.\n+\t(vint16mf2_t): Ditto.\n+\t(vint16m1_t): Ditto.\n+\t(vint16m2_t): Ditto.\n+\t(vint16m4_t): Ditto.\n+\t(vint16m8_t): Ditto.\n+\t(vint32mf2_t): Ditto.\n+\t(vint32m1_t): Ditto.\n+\t(vint32m2_t): Ditto.\n+\t(vint32m4_t): Ditto.\n+\t(vint32m8_t): Ditto.\n+\t(vint64m1_t): Ditto.\n+\t(vint64m2_t): Ditto.\n+\t(vint64m4_t): Ditto.\n+\t(vint64m8_t): Ditto.\n+\t(vfloat32mf2_t): Ditto.\n+\t(vfloat32m1_t): Ditto.\n+\t(vfloat32m2_t): Ditto.\n+\t(vfloat32m4_t): Ditto.\n+\t(vfloat32m8_t): Ditto.\n+\t(vfloat64m1_t): Ditto.\n+\t(vfloat64m4_t): Ditto.\n+\t* config/riscv/riscv-vector-builtins.h\n+\t(function_expander::add_output_operand): New function.\n+\t(function_expander::add_all_one_mask_operand): Ditto.\n+\t(function_expander::add_fixed_operand): Ditto.\n+\t(function_expander::vector_mode): Ditto.\n+\t(function_base::apply_vl_p): Ditto.\n+\t(function_base::can_be_overloaded_p): Ditto.\n+\t* config/riscv/riscv-vsetvl.cc (get_vl): Remove restrict of supporting\n+\tAVL is not VLMAX.\n+\t* config/riscv/t-riscv: Add include file.\n+\n+2022-12-23  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/riscv-vector-builtins-shapes.cc (struct vsetvl_def): Add\n+\t\"__riscv_\" prefix.\n+\n+2022-12-23  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/riscv-vector-builtins-bases.cc: Change it to no side effects.\n+\t* config/riscv/vector.md (@vsetvl<mode>_no_side_effects): New pattern.\n+\n+2022-12-23  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/riscv-vector-builtins-bases.cc: Remove side effects.\n+\n+2022-12-23  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/riscv-vsetvl.cc (anticipatable_occurrence_p): Fix\n+\tincorrect annotations.\n+\t(available_occurrence_p): Ditto.\n+\t(backward_propagate_worthwhile_p): Ditto.\n+\t(can_backward_propagate_p): Ditto.\n+\n+2022-12-23  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/riscv-vsetvl.cc (vlmax_avl_insn_p): Fix multi-line\n+\tconditional.\n+\t(vsetvl_insn_p): Ditto.\n+\t(same_bb_and_before_p): Ditto.\n+\t(same_bb_and_after_or_equal_p): Ditto.\n+\n 2022-12-22  Andrew Carlotti  <andrew.carlotti@arm.com>\n \n \t* doc/md.texi: Move example code remark next to it's code block."}, {"sha": "84446d7ccd5d4c32eee5b929f6201d220e23ab7f", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/376d6b8c6a89846b2015033c25f9a9807ef675a9/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/376d6b8c6a89846b2015033c25f9a9807ef675a9/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=376d6b8c6a89846b2015033c25f9a9807ef675a9", "patch": "@@ -1 +1 @@\n-20221223\n+20221224"}, {"sha": "a8245283705329cfc13856a463c00adda9901489", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/376d6b8c6a89846b2015033c25f9a9807ef675a9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/376d6b8c6a89846b2015033c25f9a9807ef675a9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=376d6b8c6a89846b2015033c25f9a9807ef675a9", "patch": "@@ -1,3 +1,29 @@\n+2022-12-23  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/108116\n+\t* constexpr.cc (maybe_constant_value): Clear\n+\tprocessing_template_decl before calling break_out_target_exprs.\n+\t* init.cc (get_nsdmi): Likewise.\n+\t* tree.cc (break_out_target_exprs): Assert processing_template_decl\n+\tis cleared.\n+\n+2022-12-23  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/107853\n+\t* constraint.cc (maybe_substitute_reqs_for): Substitute into\n+\tthe template-head requirements of a template friend using only\n+\tits outer arguments via outer_template_args.\n+\t* cp-tree.h (outer_template_args): Declare.\n+\t* pt.cc (outer_template_args): Define, factored out and\n+\tgeneralized from ...\n+\t(ctor_deduction_guides_for): ... here.\n+\n+2022-12-23  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* g++spec.cc (lang_specific_driver): Preserve -static-libstdc++ in\n+\tthe driver command line for targets without -Bstatic/dynamic support\n+\tin their static linker.\n+\n 2022-12-21  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/108180"}, {"sha": "f94382b9a5db259c4907c78d378b0b3ccad658d2", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/376d6b8c6a89846b2015033c25f9a9807ef675a9/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/376d6b8c6a89846b2015033c25f9a9807ef675a9/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=376d6b8c6a89846b2015033c25f9a9807ef675a9", "patch": "@@ -1,3 +1,21 @@\n+2022-12-23  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/108131\n+\t* array.cc (match_array_element_spec): Avoid too early simplification\n+\tof matched array element specs that can lead to a misinterpretation\n+\twhen used as array bounds in array declarations.\n+\n+2022-12-23  Julian Brown  <julian@codesourcery.com>\n+\n+\t* dump-parse-tree.cc (show_attr): Fix OMP-UDR-ARTIFICIAL-VAR typo.\n+\t* trans-openmp.cc (gfc_trans_omp_array_section): Replace stray unicode\n+\tm-dash character with hyphen.\n+\n+2022-12-23  Steve Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/106731\n+\t* trans-array.cc (gfc_trans_auto_array_allocation): Remove gcc_assert (!TREE_STATIC()).\n+\n 2022-12-22  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/69604"}, {"sha": "ce952898403a94b9e67a8991847f2976d493658a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/376d6b8c6a89846b2015033c25f9a9807ef675a9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/376d6b8c6a89846b2015033c25f9a9807ef675a9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=376d6b8c6a89846b2015033c25f9a9807ef675a9", "patch": "@@ -1,3 +1,96 @@\n+2022-12-23  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/108131\n+\t* gfortran.dg/pr103505.f90: Adjust expected patterns.\n+\t* gfortran.dg/pr108131.f90: New test.\n+\n+2022-12-23  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/108116\n+\t* g++.dg/cpp0x/nsdmi-template24.C: New test.\n+\n+2022-12-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/108068\n+\t* gcc.dg/dfp/pr108068.c: New test.\n+\n+2022-12-23  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/107853\n+\t* g++.dg/cpp2a/concepts-friend12.C: New test.\n+\t* g++.dg/cpp2a/concepts-friend13.C: New test.\n+\n+2022-12-23  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR target/107548\n+\t* gcc.target/i386/pr107548-1.c: New test V4SI case.\n+\t* gcc.target/i386/pr107548-2.c: New test V2DI case.\n+\n+2022-12-23  H.J. Lu  <hjl.tools@gmail.com>\n+\t    Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR target/106933\n+\tPR target/106959\n+\t* gcc.target/i386/pr106933-1.c: New test case.\n+\t* gcc.target/i386/pr106933-2.c: Likewise.\n+\t* gcc.target/i386/pr106959-1.c: Likewise.\n+\t* gcc.target/i386/pr106959-2.c: Likewise.\n+\t* gcc.target/i386/pr106959-3.c: Likewise.\n+\n+2022-12-23  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* gcc.target/riscv/rvv/base/vle-constraint-1.c: New test.\n+\n+2022-12-23  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* gcc.target/riscv/rvv/base/vsetvl-1.c: Add \"__riscv_\" prefix.\n+\n+2022-12-23  Steve Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/106731\n+\t* gfortran.dg/pr106731.f90: New test.\n+\n+2022-12-23  Arsen Arsenovi\u0107  <arsen@aarsen.me>\n+\t    Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* g++.dg/contracts/contracts-access1.C: Convert to new default\n+\tviolation handler.\n+\t* g++.dg/contracts/contracts-assume2.C: Ditto.\n+\t* g++.dg/contracts/contracts-config1.C: Ditto.\n+\t* g++.dg/contracts/contracts-constexpr1.C: Ditto.\n+\t* g++.dg/contracts/contracts-ctor-dtor1.C: Ditto.\n+\t* g++.dg/contracts/contracts-deduced2.C: Ditto.\n+\t* g++.dg/contracts/contracts-friend1.C: Ditto.\n+\t* g++.dg/contracts/contracts-multiline1.C: Ditto.\n+\t* g++.dg/contracts/contracts-post3.C: Ditto.\n+\t* g++.dg/contracts/contracts-pre10.C: Ditto.\n+\t* g++.dg/contracts/contracts-pre2.C: Ditto.\n+\t* g++.dg/contracts/contracts-pre2a2.C: Ditto.\n+\t* g++.dg/contracts/contracts-pre3.C: Ditto.\n+\t* g++.dg/contracts/contracts-pre4.C: Ditto.\n+\t* g++.dg/contracts/contracts-pre5.C: Ditto.\n+\t* g++.dg/contracts/contracts-pre7.C: Ditto.\n+\t* g++.dg/contracts/contracts-pre9.C: Ditto.\n+\t* g++.dg/contracts/contracts-redecl3.C: Ditto.\n+\t* g++.dg/contracts/contracts-redecl4.C: Ditto.\n+\t* g++.dg/contracts/contracts-redecl6.C: Ditto.\n+\t* g++.dg/contracts/contracts-redecl7.C: Ditto.\n+\t* g++.dg/contracts/contracts-tmpl-spec1.C: Ditto.\n+\t* g++.dg/contracts/contracts-tmpl-spec2.C: Ditto.\n+\t* g++.dg/contracts/contracts-tmpl-spec3.C: Ditto.\n+\t* g++.dg/contracts/contracts10.C: Ditto.\n+\t* g++.dg/contracts/contracts14.C: Ditto.\n+\t* g++.dg/contracts/contracts15.C: Ditto.\n+\t* g++.dg/contracts/contracts16.C: Ditto.\n+\t* g++.dg/contracts/contracts17.C: Ditto.\n+\t* g++.dg/contracts/contracts19.C: Ditto.\n+\t* g++.dg/contracts/contracts25.C: Ditto.\n+\t* g++.dg/contracts/contracts3.C: Ditto.\n+\t* g++.dg/contracts/contracts35.C: Ditto.\n+\t* g++.dg/contracts/contracts5.C: Ditto.\n+\t* g++.dg/contracts/contracts7.C: Ditto.\n+\t* g++.dg/contracts/contracts9.C: Ditto.\n+\n 2022-12-22  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/coroutines/coro.h: #include <stdio.h> instead of"}, {"sha": "13f4a6f6926430ed5335800e12ca837c16c2a632", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/376d6b8c6a89846b2015033c25f9a9807ef675a9/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/376d6b8c6a89846b2015033c25f9a9807ef675a9/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=376d6b8c6a89846b2015033c25f9a9807ef675a9", "patch": "@@ -1,3 +1,100 @@\n+2022-12-23  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* config.host (i[34567]86-*-mingw*): Add thread fragment after EH one\n+\tas well as new i386/t-slibgcc-mingw fragment.\n+\t(x86_64-*-mingw*): Likewise.\n+\t* config/i386/gthr-win32.h: If _WIN32_WINNT is at least 0x0600, define\n+\tboth __GTHREAD_HAS_COND and __GTHREADS_CXX0X to 1.\n+\tError out if _GTHREAD_USE_MUTEX_TIMEDLOCK is 1.\n+\tInclude stdlib.h instead of errno.h and do not include _mingw.h.\n+\t(CONST_CAST2): Add specific definition for C++.\n+\t(ATTRIBUTE_UNUSED): New macro.\n+\t(__UNUSED_PARAM): Delete.\n+\tDefine WIN32_LEAN_AND_MEAN before including windows.h.\n+\t(__gthread_objc_data_tls): Use TLS_OUT_OF_INDEXES instead of (DWORD)-1.\n+\t(__gthread_objc_init_thread_system): Likewise.\n+\t(__gthread_objc_thread_get_data): Minor tweak.\n+\t(__gthread_objc_condition_allocate): Use ATTRIBUTE_UNUSED.\n+\t(__gthread_objc_condition_deallocate): Likewise.\n+\t(__gthread_objc_condition_wait): Likewise.\n+\t(__gthread_objc_condition_broadcast): Likewise.\n+\t(__gthread_objc_condition_signal): Likewise.\n+\tInclude sys/time.h.\n+\t(__gthr_win32_DWORD): New typedef.\n+\t(__gthr_win32_HANDLE): Likewise.\n+\t(__gthr_win32_CRITICAL_SECTION): Likewise.\n+\t(__gthr_win32_CONDITION_VARIABLE): Likewise.\n+\t(__gthread_t): Adjust.\n+\t(__gthread_key_t): Likewise.\n+\t(__gthread_mutex_t): Likewise.\n+\t(__gthread_recursive_mutex_t): Likewise.\n+\t(__gthread_cond_t): New typedef.\n+\t(__gthread_time_t): Likewise.\n+\t(__GTHREAD_MUTEX_INIT_DEFAULT): Delete.\n+\t(__GTHREAD_RECURSIVE_MUTEX_INIT_DEFAULT): Likewise.\n+\t(__GTHREAD_COND_INIT_FUNCTION): Define.\n+\t(__GTHREAD_TIME_INIT): Likewise.\n+\t(__gthr_i486_lock_cmp_xchg): Delete.\n+\t(__gthr_win32_create): Declare.\n+\t(__gthr_win32_join): Likewise.\n+\t(__gthr_win32_self): Likewise.\n+\t(__gthr_win32_detach): Likewise.\n+\t(__gthr_win32_equal): Likewise.\n+\t(__gthr_win32_yield): Likewise.\n+\t(__gthr_win32_mutex_destroy): Likewise.\n+\t(__gthr_win32_cond_init_function): Likewise if __GTHREADS_HAS_COND is 1.\n+\t(__gthr_win32_cond_broadcast): Likewise.\n+\t(__gthr_win32_cond_signal): Likewise.\n+\t(__gthr_win32_cond_wait): Likewise.\n+\t(__gthr_win32_cond_timedwait): Likewise.\n+\t(__gthr_win32_recursive_mutex_init_function): Delete.\n+\t(__gthr_win32_recursive_mutex_lock): Likewise.\n+\t(__gthr_win32_recursive_mutex_unlock): Likewise.\n+\t(__gthr_win32_recursive_mutex_destroy): Likewise.\n+\t(__gthread_create): New inline function.\n+\t(__gthread_join): Likewise.\n+\t(__gthread_self): Likewise.\n+\t(__gthread_detach): Likewise.\n+\t(__gthread_equal): Likewise.\n+\t(__gthread_yield): Likewise.\n+\t(__gthread_cond_init_function): Likewise if __GTHREADS_HAS_COND is 1.\n+\t(__gthread_cond_broadcast): Likewise.\n+\t(__gthread_cond_signal): Likewise.\n+\t(__gthread_cond_wait): Likewise.\n+\t(__gthread_cond_timedwait): Likewise.\n+\t(__GTHREAD_WIN32_INLINE): New macro.\n+\t(__GTHREAD_WIN32_COND_INLINE): Likewise.\n+\t(__GTHREAD_WIN32_ACTIVE_P): Likewise.\n+\tDefine WIN32_LEAN_AND_MEAN before including windows.h.\n+\t(__gthread_once): Minor tweaks.\n+\t(__gthread_key_create): Use ATTRIBUTE_UNUSED and TLS_OUT_OF_INDEXES.\n+\t(__gthread_key_delete): Minor tweak.\n+\t(__gthread_getspecific): Likewise.\n+\t(__gthread_setspecific): Likewise.\n+\t(__gthread_mutex_init_function): Reimplement.\n+\t(__gthread_mutex_destroy): Likewise.\n+\t(__gthread_mutex_lock): Likewise.\n+\t(__gthread_mutex_trylock): Likewise.\n+\t(__gthread_mutex_unlock): Likewise.\n+\t(__gthr_win32_abs_to_rel_time): Declare.\n+\t(__gthread_recursive_mutex_init_function): Reimplement.\n+\t(__gthread_recursive_mutex_destroy): Likewise.\n+\t(__gthread_recursive_mutex_lock): Likewise.\n+\t(__gthread_recursive_mutex_trylock): Likewise.\n+\t(__gthread_recursive_mutex_unlock): Likewise.\n+\t(__gthread_cond_destroy): New inline function.\n+\t(__gthread_cond_wait_recursive): Likewise.\n+\t* config/i386/gthr-win32.c: Delete everything.\n+\tInclude gthr-win32.h to get the out-of-line version of inline routines.\n+\tAdd compile-time checks for the local version of the Win32 types.\n+\t* config/i386/gthr-win32-cond.c: New file.\n+\t* config/i386/gthr-win32-thread.c: Likewise.\n+\t* config/i386/t-gthr-win32: Add config/i386/gthr-win32-thread.c to the\n+\tEH part, config/i386/gthr-win32-cond.c and config/i386/gthr-win32.c to\n+\tthe static version of libgcc.\n+\t* config/i386/t-slibgcc-mingw: New file.\n+\t* config/i386/libgcc-mingw.ver: Likewise.\n+\n 2022-12-16  Thomas Neumann  <tneumann@users.sourceforge.net>\n \n \t* unwind-dw2-fde.c: Initialize fde object lazily when"}, {"sha": "260b6337630e415d64be8fcc1c8cde9e070f5076", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/376d6b8c6a89846b2015033c25f9a9807ef675a9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/376d6b8c6a89846b2015033c25f9a9807ef675a9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=376d6b8c6a89846b2015033c25f9a9807ef675a9", "patch": "@@ -1,3 +1,44 @@\n+2022-12-23  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* acinclude.m4 (GLIBCXX_EXPORT_FLAGS): Substitute CPPFLAGS.\n+\t(GLIBCXX_ENABLE_LIBSTDCXX_TIME): Set ac_has_sched_yield and\n+\tac_has_win32_sleep to yes for MinGW.  Change HAVE_WIN32_SLEEP\n+\tinto _GLIBCXX_USE_WIN32_SLEEP.\n+\t(GLIBCXX_CHECK_GTHREADS): Add _WIN32_THREADS to compilation flags for\n+\tWin32 threads and force _GTHREAD_USE_MUTEX_TIMEDLOCK to 0 for them.\n+\tAdd -D_WIN32_WINNT=0x0600 to compilation flags if yes was configured\n+\tand add it to CPPFLAGS on success.\n+\t* config.h.in: Regenerate.\n+\t* configure: Likewise.\n+\t* config/os/mingw32-w64/os_defines.h (_GLIBCXX_USE_GET_NPROCS_WIN32):\n+\tDefine to 1.\n+\t* config/os/mingw32/os_defines.h (_GLIBCXX_USE_GET_NPROCS_WIN32): Ditto\n+\t* src/c++11/thread.cc (get_nprocs): Provide Win32 implementation if\n+\t_GLIBCXX_USE_GET_NPROCS_WIN32 is defined.  Replace HAVE_WIN32_SLEEP\n+\twith USE_WIN32_SLEEP.\n+\t* testsuite/19_diagnostics/headers/system_error/errc_std_c++0x.cc: Add\n+\tmissing conditional compilation.\n+\t* testsuite/lib/libstdc++.exp (check_v3_target_sleep): Add support for\n+\t_GLIBCXX_USE_WIN32_SLEEP.\n+\t(check_v3_target_nprocs): Likewise for _GLIBCXX_USE_GET_NPROCS_WIN32.\n+\n+2022-12-23  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* src/c++20/tzdb.cc [__APPLE__] (zoneinfo_dir_override): Add\n+\tdefinition.\n+\n+2022-12-23  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* src/c++20/tzdb.cc: Remove static_assert.\n+\n+2022-12-23  Arsen Arsenovi\u0107  <arsen@aarsen.me>\n+\t    Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/107792\n+\tPR libstdc++/107778\n+\t* src/experimental/contract.cc (handle_contract_violation): Make\n+\toutput more readable.\n+\n 2022-12-22  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/105730"}]}