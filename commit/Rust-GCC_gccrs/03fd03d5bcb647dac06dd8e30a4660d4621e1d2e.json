{"sha": "03fd03d5bcb647dac06dd8e30a4660d4621e1d2e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDNmZDAzZDViY2I2NDdkYWMwNmRkOGUzMGE0NjYwZDQ2MjFlMWQyZQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-04-18T11:33:51Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-04-18T11:33:51Z"}, "message": "re PR tree-optimization/44688 (Excessive code-size growth at -O3)\n\n2012-04-18  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/44688\n\t* cfgloop.h (record_niter_bound): Declare.\n\t* tree-ssa-loop-niter.c (record_niter_bound): Export.\n\tUpdate the estimation with the upper bound here...\n\t(estimate_numbers_of_iterations_loop): ... instead of here.\n\tDo not forcefully reset a recorded upper bound.\n\t* tree-vect-loop-manip.c (vect_do_peeling_for_alignment):\n\tRecord the maximum number of loop iterations of the\n\tprologue loop.\n\nFrom-SVN: r186566", "tree": {"sha": "d299681460344c4e494414f353c180e1a1bad1d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d299681460344c4e494414f353c180e1a1bad1d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03fd03d5bcb647dac06dd8e30a4660d4621e1d2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03fd03d5bcb647dac06dd8e30a4660d4621e1d2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03fd03d5bcb647dac06dd8e30a4660d4621e1d2e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03fd03d5bcb647dac06dd8e30a4660d4621e1d2e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "89fcabafa13d82c44c87b745d08de04386c5b15f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89fcabafa13d82c44c87b745d08de04386c5b15f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89fcabafa13d82c44c87b745d08de04386c5b15f"}], "stats": {"total": 44, "additions": 32, "deletions": 12}, "files": [{"sha": "0bd86f3d2b29b631bebae6ab3c7933a99bb39b2a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03fd03d5bcb647dac06dd8e30a4660d4621e1d2e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03fd03d5bcb647dac06dd8e30a4660d4621e1d2e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=03fd03d5bcb647dac06dd8e30a4660d4621e1d2e", "patch": "@@ -1,3 +1,15 @@\n+2012-04-18  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/44688\n+\t* cfgloop.h (record_niter_bound): Declare.\n+\t* tree-ssa-loop-niter.c (record_niter_bound): Export.\n+\tUpdate the estimation with the upper bound here...\n+\t(estimate_numbers_of_iterations_loop): ... instead of here.\n+\tDo not forcefully reset a recorded upper bound.\n+\t* tree-vect-loop-manip.c (vect_do_peeling_for_alignment):\n+\tRecord the maximum number of loop iterations of the\n+\tprologue loop.\n+\n 2012-04-18  Jan Hubicka  <jh@suse.cz>\n \n \t* lto-symtab.c (lto_cgraph_replace_node): Update."}, {"sha": "b3c862cb12e10aa58904d0202367944b326007d8", "filename": "gcc/cfgloop.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03fd03d5bcb647dac06dd8e30a4660d4621e1d2e/gcc%2Fcfgloop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03fd03d5bcb647dac06dd8e30a4660d4621e1d2e/gcc%2Fcfgloop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.h?ref=03fd03d5bcb647dac06dd8e30a4660d4621e1d2e", "patch": "@@ -279,6 +279,7 @@ extern unsigned expected_loop_iterations (const struct loop *);\n extern rtx doloop_condition_get (rtx);\n \n void estimate_numbers_of_iterations_loop (struct loop *);\n+void record_niter_bound (struct loop *, double_int, bool, bool);\n bool estimated_loop_iterations (struct loop *, double_int *);\n bool max_loop_iterations (struct loop *, double_int *);\n HOST_WIDE_INT estimated_loop_iterations_int (struct loop *);"}, {"sha": "8d99408d54ba0dfb104b159246ce913ca8a13216", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03fd03d5bcb647dac06dd8e30a4660d4621e1d2e/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03fd03d5bcb647dac06dd8e30a4660d4621e1d2e/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=03fd03d5bcb647dac06dd8e30a4660d4621e1d2e", "patch": "@@ -2494,12 +2494,12 @@ derive_constant_upper_bound_ops (tree type, tree op0,\n    of iterations.  UPPER is true if we are sure the loop iterates at most\n    I_BOUND times.  */\n \n-static void\n+void\n record_niter_bound (struct loop *loop, double_int i_bound, bool realistic,\n \t\t    bool upper)\n {\n-  /* Update the bounds only when there is no previous estimation, or when the current\n-     estimation is smaller.  */\n+  /* Update the bounds only when there is no previous estimation, or when the\n+     current estimation is smaller.  */\n   if (upper\n       && (!loop->any_upper_bound\n \t  || double_int_ucmp (i_bound, loop->nb_iterations_upper_bound) < 0))\n@@ -2514,6 +2514,14 @@ record_niter_bound (struct loop *loop, double_int i_bound, bool realistic,\n       loop->any_estimate = true;\n       loop->nb_iterations_estimate = i_bound;\n     }\n+\n+  /* If an upper bound is smaller than the realistic estimate of the\n+     number of iterations, use the upper bound instead.  */\n+  if (loop->any_upper_bound\n+      && loop->any_estimate\n+      && double_int_ucmp (loop->nb_iterations_upper_bound,\n+\t\t\t  loop->nb_iterations_estimate) < 0)\n+    loop->nb_iterations_estimate = loop->nb_iterations_upper_bound;\n }\n \n /* Records that AT_STMT is executed at most BOUND + 1 times in LOOP.  IS_EXIT\n@@ -2962,8 +2970,9 @@ estimate_numbers_of_iterations_loop (struct loop *loop)\n   /* Give up if we already have tried to compute an estimation.  */\n   if (loop->estimate_state != EST_NOT_COMPUTED)\n     return;\n+\n   loop->estimate_state = EST_AVAILABLE;\n-  loop->any_upper_bound = false;\n+  /* Force estimate compuation but leave any existing upper bound in place.  */\n   loop->any_estimate = false;\n \n   exits = get_loop_exit_edges (loop);\n@@ -2994,14 +3003,6 @@ estimate_numbers_of_iterations_loop (struct loop *loop)\n       bound = gcov_type_to_double_int (nit);\n       record_niter_bound (loop, bound, true, false);\n     }\n-\n-  /* If an upper bound is smaller than the realistic estimate of the\n-     number of iterations, use the upper bound instead.  */\n-  if (loop->any_upper_bound\n-      && loop->any_estimate\n-      && double_int_ucmp (loop->nb_iterations_upper_bound,\n-\t\t\t  loop->nb_iterations_estimate) < 0)\n-    loop->nb_iterations_estimate = loop->nb_iterations_upper_bound;\n }\n \n /* Sets NIT to the estimated number of executions of the latch of the"}, {"sha": "18eef98fc45a25b5b0b02a0c7cce2df33b4aa539", "filename": "gcc/tree-vect-loop-manip.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03fd03d5bcb647dac06dd8e30a4660d4621e1d2e/gcc%2Ftree-vect-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03fd03d5bcb647dac06dd8e30a4660d4621e1d2e/gcc%2Ftree-vect-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop-manip.c?ref=03fd03d5bcb647dac06dd8e30a4660d4621e1d2e", "patch": "@@ -2167,6 +2167,7 @@ vect_do_peeling_for_alignment (loop_vec_info loop_vinfo)\n   struct loop *new_loop;\n   unsigned int th = 0;\n   int min_profitable_iters;\n+  int max_iter;\n \n   if (vect_print_dump_info (REPORT_DETAILS))\n     fprintf (vect_dump, \"=== vect_do_peeling_for_alignment ===\");\n@@ -2192,6 +2193,11 @@ vect_do_peeling_for_alignment (loop_vec_info loop_vinfo)\n #ifdef ENABLE_CHECKING\n   slpeel_verify_cfg_after_peeling (new_loop, loop);\n #endif\n+  max_iter = MAX (LOOP_VINFO_VECT_FACTOR (loop_vinfo) - 1, (int) th);\n+  record_niter_bound (new_loop, shwi_to_double_int (max_iter), false, true);\n+  if (dump_file && (dump_flags & TDF_DETAILS))\n+    fprintf (dump_file, \"Setting upper bound of nb iterations for prologue \"\n+\t     \"loop to %d\\n\", max_iter);\n \n   /* Update number of times loop executes.  */\n   n_iters = LOOP_VINFO_NITERS (loop_vinfo);"}]}