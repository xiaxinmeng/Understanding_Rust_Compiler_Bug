{"sha": "8d18c628dde98c3706cdce5a4badf9ebfe8173e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQxOGM2MjhkZGU5OGMzNzA2Y2RjZTVhNGJhZGY5ZWJmZTgxNzNlNQ==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "dvorakz@suse.cz", "date": "2005-05-17T19:41:38Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2005-05-17T19:41:38Z"}, "message": "ggc-page.c (ggc_alloc_stat): Record amount of memory allocated.\n\n\t* ggc-page.c (ggc_alloc_stat): Record amount of memory allocated.\n\t* ggc-zone.c (ggc_alloc_zone_1): Ditto.\n\t* timevar.c (timevar_ggc_mem_total): New variable.\n\t(GGC_MEM_BOUND): New constant.\n\t(get_time): Record ggc memory status.\n\t(timevar_accumulate): Accumulate amount of ggc memory.\n\t(timevar_print): Print consumption of ggc memory.\n\t* timevar.def (TV_FIND_REFERENCED_VARS, TV_TREE_REDPHI,\n\tTV_TREE_LOOP_BOUNDS, TV_TREE_LOOP_IVCANON, TV_TREE_VECTORIZATION,\n\tTV_TREE_LINEAR_TRANSFORM): Shorten strings to fit in 22 characters.\n\t* timevar.h (struct timevar_time_def): Add ggc_mem field.\n\t(timevar_ggc_mem_total): Declare.\n\nFrom-SVN: r99848", "tree": {"sha": "512365504e48b610718f9943598dee4de12ad4ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/512365504e48b610718f9943598dee4de12ad4ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d18c628dde98c3706cdce5a4badf9ebfe8173e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d18c628dde98c3706cdce5a4badf9ebfe8173e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d18c628dde98c3706cdce5a4badf9ebfe8173e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d18c628dde98c3706cdce5a4badf9ebfe8173e5/comments", "author": null, "committer": null, "parents": [{"sha": "9caf90a8ea7640c4e869a9d0d3f51bc80a329fa0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9caf90a8ea7640c4e869a9d0d3f51bc80a329fa0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9caf90a8ea7640c4e869a9d0d3f51bc80a329fa0"}], "stats": {"total": 63, "additions": 54, "deletions": 9}, "files": [{"sha": "23086faad7ae769d35631892ba86d2c8bf325540", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d18c628dde98c3706cdce5a4badf9ebfe8173e5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d18c628dde98c3706cdce5a4badf9ebfe8173e5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8d18c628dde98c3706cdce5a4badf9ebfe8173e5", "patch": "@@ -1,3 +1,18 @@\n+2005-05-17  Zdenek Dvorak  <dvorakz@suse.cz>\n+\n+\t* ggc-page.c (ggc_alloc_stat): Record amount of memory allocated.\n+\t* ggc-zone.c (ggc_alloc_zone_1): Ditto.\n+\t* timevar.c (timevar_ggc_mem_total): New variable.\n+\t(GGC_MEM_BOUND): New constant.\n+\t(get_time): Record ggc memory status.\n+\t(timevar_accumulate): Accumulate amount of ggc memory.\n+\t(timevar_print): Print consumption of ggc memory.\n+\t* timevar.def (TV_FIND_REFERENCED_VARS, TV_TREE_REDPHI,\n+\tTV_TREE_LOOP_BOUNDS, TV_TREE_LOOP_IVCANON, TV_TREE_VECTORIZATION,\n+\tTV_TREE_LINEAR_TRANSFORM): Shorten strings to fit in 22 characters.\n+\t* timevar.h (struct timevar_time_def): Add ggc_mem field.\n+\t(timevar_ggc_mem_total): Declare.\n+\n 2005-05-17  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* tree-into-ssa.c (update_ssa): Clean up by shortening the"}, {"sha": "15f22c9f7f4051ca8f75fd31f58564e534943b36", "filename": "gcc/ggc-page.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d18c628dde98c3706cdce5a4badf9ebfe8173e5/gcc%2Fggc-page.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d18c628dde98c3706cdce5a4badf9ebfe8173e5/gcc%2Fggc-page.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-page.c?ref=8d18c628dde98c3706cdce5a4badf9ebfe8173e5", "patch": "@@ -1203,6 +1203,9 @@ ggc_alloc_stat (size_t size MEM_STAT_DECL)\n      information is used in deciding when to collect.  */\n   G.allocated += object_size;\n \n+  /* For timevar statistics.  */\n+  timevar_ggc_mem_total += object_size;\n+\n #ifdef GATHER_STATISTICS\n   {\n     size_t overhead = object_size - size;"}, {"sha": "e3c72679d516cbcafc42ffd0f78518483e113252", "filename": "gcc/ggc-zone.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d18c628dde98c3706cdce5a4badf9ebfe8173e5/gcc%2Fggc-zone.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d18c628dde98c3706cdce5a4badf9ebfe8173e5/gcc%2Fggc-zone.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-zone.c?ref=8d18c628dde98c3706cdce5a4badf9ebfe8173e5", "patch": "@@ -1228,6 +1228,8 @@ ggc_alloc_zone_stat (size_t orig_size, struct alloc_zone *zone\n   /* Keep track of how many bytes are being allocated.  This\n      information is used in deciding when to collect.  */\n   zone->allocated += size;\n+  \n+  timevar_ggc_mem_total += (size + CHUNK_OVERHEAD);\n \n #ifdef GATHER_STATISTICS\n   ggc_record_overhead (orig_size, size - orig_size, result PASS_MEM_STAT);"}, {"sha": "589b59cf820be39e63546ff497b25a668c7be055", "filename": "gcc/timevar.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d18c628dde98c3706cdce5a4badf9ebfe8173e5/gcc%2Ftimevar.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d18c628dde98c3706cdce5a4badf9ebfe8173e5/gcc%2Ftimevar.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftimevar.c?ref=8d18c628dde98c3706cdce5a4badf9ebfe8173e5", "patch": "@@ -115,6 +115,15 @@ static double clocks_to_msec;\n \n bool timevar_enable;\n \n+/* Total amount of memory allocated by garbage collector.  */\n+\n+size_t timevar_ggc_mem_total;\n+\n+/* The amount of memory that will cause us to report the timevar even\n+   if the time spent is not significant.  */\n+\n+#define GGC_MEM_BOUND (1 << 20)\n+\n /* See timevar.h for an explanation of timing variables.  */\n \n /* A timing variable.  */\n@@ -183,6 +192,7 @@ get_time (struct timevar_time_def *now)\n   now->user = 0;\n   now->sys  = 0;\n   now->wall = 0;\n+  now->ggc_mem = timevar_ggc_mem_total;\n \n   if (!timevar_enable)\n     return;\n@@ -216,6 +226,7 @@ timevar_accumulate (struct timevar_time_def *timer,\n   timer->user += stop_time->user - start_time->user;\n   timer->sys += stop_time->sys - start_time->sys;\n   timer->wall += stop_time->wall - start_time->wall;\n+  timer->ggc_mem += stop_time->ggc_mem - start_time->ggc_mem;\n }\n \n /* Initialize timing variables.  */\n@@ -417,7 +428,8 @@ timevar_print (FILE *fp)\n          zeroes.  */\n       if (tv->elapsed.user < tiny\n \t  && tv->elapsed.sys < tiny\n-\t  && tv->elapsed.wall < tiny)\n+\t  && tv->elapsed.wall < tiny\n+\t  && tv->elapsed.ggc_mem < GGC_MEM_BOUND)\n \tcontinue;\n \n       /* The timing variable name.  */\n@@ -444,6 +456,13 @@ timevar_print (FILE *fp)\n \t       (total->wall == 0 ? 0 : tv->elapsed.wall / total->wall) * 100);\n #endif /* HAVE_WALL_TIME */\n \n+      /* Print the amount of ggc memory allocated.  */\n+      fprintf (fp, \"%8u kB (%2.0f%%) ggc\",\n+\t       (unsigned) (tv->elapsed.ggc_mem >> 10),\n+\t       (total->ggc_mem == 0\n+\t\t? 0\n+\t\t: (float) tv->elapsed.ggc_mem / total->ggc_mem) * 100);\n+\n       putc ('\\n', fp);\n     }\n \n@@ -456,8 +475,9 @@ timevar_print (FILE *fp)\n   fprintf (fp, \"%7.2f          \", total->sys);\n #endif\n #ifdef HAVE_WALL_TIME\n-  fprintf (fp, \"%7.2f\\n\", total->wall);\n+  fprintf (fp, \"%7.2f           \", total->wall);\n #endif\n+  fprintf (fp, \"%8u kB\\n\", (unsigned) (total->ggc_mem >> 10));\n \n #ifdef ENABLE_CHECKING\n   fprintf (fp, \"Extra diagnostic checks enabled; compiler may run slowly.\\n\");"}, {"sha": "d7bed9297ee48dca7ebfd2014c46d00a7c151228", "filename": "gcc/timevar.def", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d18c628dde98c3706cdce5a4badf9ebfe8173e5/gcc%2Ftimevar.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d18c628dde98c3706cdce5a4badf9ebfe8173e5/gcc%2Ftimevar.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftimevar.def?ref=8d18c628dde98c3706cdce5a4badf9ebfe8173e5", "patch": "@@ -67,8 +67,8 @@ DEFTIMEVAR (TV_TREE_CFG\t\t     , \"tree CFG construction\")\n DEFTIMEVAR (TV_TREE_CLEANUP_CFG\t     , \"tree CFG cleanup\")\n DEFTIMEVAR (TV_TREE_VRP              , \"tree VRP\")\n DEFTIMEVAR (TV_TREE_COPY_PROP        , \"tree copy propagation\")\n-DEFTIMEVAR (TV_TREE_STORE_COPY_PROP  , \"tree store copy propagation\")\n-DEFTIMEVAR (TV_FIND_REFERENCED_VARS  , \"tree find referenced vars\")\n+DEFTIMEVAR (TV_TREE_STORE_COPY_PROP  , \"tree store copy prop\")\n+DEFTIMEVAR (TV_FIND_REFERENCED_VARS  , \"tree find ref. vars\")\n DEFTIMEVAR (TV_TREE_PTA\t\t     , \"tree PTA\")\n DEFTIMEVAR (TV_TREE_MAY_ALIAS        , \"tree alias analysis\")\n DEFTIMEVAR (TV_TREE_INSERT_PHI_NODES , \"tree PHI insertion\")\n@@ -82,7 +82,7 @@ DEFTIMEVAR (TV_TREE_STORE_CCP\t     , \"tree STORE-CCP\")\n DEFTIMEVAR (TV_TREE_CCP\t\t     , \"tree CCP\")\n DEFTIMEVAR (TV_TREE_SPLIT_EDGES      , \"tree split crit edges\")\n DEFTIMEVAR (TV_TREE_PRE\t\t     , \"tree PRE\")\n-DEFTIMEVAR (TV_TREE_REDPHI\t     , \"tree remove redundant PHIs\")\n+DEFTIMEVAR (TV_TREE_REDPHI\t     , \"tree redundant PHIs\")\n DEFTIMEVAR (TV_TREE_FRE\t\t     , \"tree FRE\")\n DEFTIMEVAR (TV_TREE_SINK             , \"tree code sinking\")\n DEFTIMEVAR (TV_TREE_PHIOPT\t     , \"tree linearize phis\")\n@@ -92,13 +92,13 @@ DEFTIMEVAR (TV_TREE_CD_DCE\t     , \"tree aggressive DCE\")\n DEFTIMEVAR (TV_TREE_DSE\t\t     , \"tree DSE\")\n DEFTIMEVAR (TV_TREE_MERGE_PHI\t     , \"PHI merge\")\n DEFTIMEVAR (TV_TREE_LOOP\t     , \"tree loop optimization\")\n-DEFTIMEVAR (TV_TREE_LOOP_BOUNDS\t     , \"tree record loop bounds\")\n+DEFTIMEVAR (TV_TREE_LOOP_BOUNDS\t     , \"tree loop bounds\")\n DEFTIMEVAR (TV_LIM                   , \"loop invariant motion\")\n-DEFTIMEVAR (TV_TREE_LOOP_IVCANON     , \"tree canonical iv creation\")\n+DEFTIMEVAR (TV_TREE_LOOP_IVCANON     , \"tree canonical iv\")\n DEFTIMEVAR (TV_TREE_LOOP_UNSWITCH    , \"tree loop unswitching\")\n DEFTIMEVAR (TV_COMPLETE_UNROLL       , \"complete unrolling\")\n-DEFTIMEVAR (TV_TREE_VECTORIZATION    , \"tree loop vectorization\")\n-DEFTIMEVAR (TV_TREE_LINEAR_TRANSFORM , \"tree loop linear transforms\")\n+DEFTIMEVAR (TV_TREE_VECTORIZATION    , \"tree vectorization\")\n+DEFTIMEVAR (TV_TREE_LINEAR_TRANSFORM , \"tree loop linear\")\n DEFTIMEVAR (TV_TREE_LOOP_IVOPTS\t     , \"tree iv optimization\")\n DEFTIMEVAR (TV_TREE_LOOP_INIT\t     , \"tree loop init\")\n DEFTIMEVAR (TV_TREE_LOOP_FINI\t     , \"tree loop fini\")"}, {"sha": "f62f76e6383822765355aba97f5d079b0077666b", "filename": "gcc/timevar.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d18c628dde98c3706cdce5a4badf9ebfe8173e5/gcc%2Ftimevar.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d18c628dde98c3706cdce5a4badf9ebfe8173e5/gcc%2Ftimevar.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftimevar.h?ref=8d18c628dde98c3706cdce5a4badf9ebfe8173e5", "patch": "@@ -61,6 +61,9 @@ struct timevar_time_def\n \n   /* Wall clock time.  */\n   double wall;\n+\n+  /* Garbage collector memory.  */\n+  unsigned ggc_mem;\n };\n \n /* An enumeration of timing variable identifiers.  Constructed from\n@@ -93,4 +96,6 @@ extern void print_time (const char *, long);\n \n extern bool timevar_enable;\n \n+extern size_t timevar_ggc_mem_total;\n+\n #endif /* ! GCC_TIMEVAR_H */"}]}