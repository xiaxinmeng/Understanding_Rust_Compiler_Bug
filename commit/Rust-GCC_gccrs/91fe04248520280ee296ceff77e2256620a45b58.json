{"sha": "91fe04248520280ee296ceff77e2256620a45b58", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTFmZTA0MjQ4NTIwMjgwZWUyOTZjZWZmNzdlMjI1NjYyMGE0NWI1OA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2007-09-21T09:36:52Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2007-09-21T09:36:52Z"}, "message": "re PR tree-optimization/33508 (tree struct aliasing goes into a loop marking call clobbers.)\n\n2007-09-21  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/33508\n\t* tree-ssa-alias.c (mark_aliases_call_clobbered): Avoid\n\tquadratic loop by keeping a bitmap of variables we have\n\tto clobber all subvariables for.\n\t(set_initial_properties): Likewise.\n\nFrom-SVN: r128645", "tree": {"sha": "ded2d3ed13b302faa9def0b2fd68176fe345829b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ded2d3ed13b302faa9def0b2fd68176fe345829b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91fe04248520280ee296ceff77e2256620a45b58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91fe04248520280ee296ceff77e2256620a45b58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91fe04248520280ee296ceff77e2256620a45b58", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91fe04248520280ee296ceff77e2256620a45b58/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6eed4bbf1d6baa806185ce34d3ea839f6ef9bef1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eed4bbf1d6baa806185ce34d3ea839f6ef9bef1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6eed4bbf1d6baa806185ce34d3ea839f6ef9bef1"}], "stats": {"total": 58, "additions": 44, "deletions": 14}, "files": [{"sha": "9a192e602503681d271b3a930f1f3b8fb0517dcf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91fe04248520280ee296ceff77e2256620a45b58/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91fe04248520280ee296ceff77e2256620a45b58/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=91fe04248520280ee296ceff77e2256620a45b58", "patch": "@@ -1,3 +1,11 @@\n+2007-09-21  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/33508\n+\t* tree-ssa-alias.c (mark_aliases_call_clobbered): Avoid\n+\tquadratic loop by keeping a bitmap of variables we have\n+\tto clobber all subvariables for.\n+\t(set_initial_properties): Likewise.\n+\n 2007-09-21  Richard Sandiford  <rsandifo@nildram.co.uk>\n \n \t* config/mips/t-sde (TARGET_LIBGCC2_CFLAGS): Delete."}, {"sha": "1ff3821ed5ac59e72a8de1a5c663300449343103", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 36, "deletions": 14, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91fe04248520280ee296ceff77e2256620a45b58/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91fe04248520280ee296ceff77e2256620a45b58/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=91fe04248520280ee296ceff77e2256620a45b58", "patch": "@@ -364,7 +364,7 @@ add_to_worklist (tree alias, VEC (tree, heap) **worklist,\n static void\n mark_aliases_call_clobbered (tree tag, VEC (tree, heap) **worklist,\n \t\t\t     VEC (int, heap) **worklist2,\n-\t\t\t     bitmap on_worklist)\n+\t\t\t     bitmap on_worklist, bitmap queued)\n {\n   bitmap aliases;\n   bitmap_iterator bi;\n@@ -387,20 +387,26 @@ mark_aliases_call_clobbered (tree tag, VEC (tree, heap) **worklist,\n \t in order to allow C/C++ tricks that involve\n \t pointer arithmetic to work.  */\n       if (TREE_CODE (entry) == STRUCT_FIELD_TAG)\n-\t{\n-\t  subvar_t svars;\n-\t  svars = get_subvars_for_var (SFT_PARENT_VAR (entry));\n-\t  for (; svars; svars = svars->next)\n-\t    if (!unmodifiable_var_p (entry))\n-\t      mark_call_clobbered (svars->var, ta->escape_mask);\n-\t}\n+\tbitmap_set_bit (queued, DECL_UID (SFT_PARENT_VAR (entry)));\n       else if (!unmodifiable_var_p (entry))\n \t{\n \t  add_to_worklist (entry, worklist, worklist2, ta->escape_mask,\n \t\t\t   on_worklist);\n \t  mark_call_clobbered (entry, ta->escape_mask);\n \t}\n     }\n+  if (!bitmap_empty_p (queued))\n+    {\n+      EXECUTE_IF_SET_IN_BITMAP (queued, 0, i, bi)\n+\t{\n+\t  subvar_t svars;\n+\t  svars = get_subvars_for_var (referenced_var (i));\n+\t  for (; svars; svars = svars->next)\n+\t    if (!unmodifiable_var_p (svars->var))\n+\t       mark_call_clobbered (svars->var, ta->escape_mask);\n+\t}\n+      bitmap_clear (queued);\n+    }\n }\n \n /* Tags containing global vars need to be marked as global.\n@@ -508,6 +514,11 @@ set_initial_properties (struct alias_info *ai)\n   referenced_var_iterator rvi;\n   tree var;\n   tree ptr;\n+  bitmap queued;\n+\n+  /* Temporary bitmap to avoid quadratic behavior in marking\n+     call clobbers.  */\n+  queued = BITMAP_ALLOC (&alias_bitmap_obstack);\n \n   FOR_EACH_REFERENCED_VAR (var, rvi)\n     {\n@@ -557,15 +568,22 @@ set_initial_properties (struct alias_info *ai)\n \t\t     in order to allow C/C++ tricks that involve\n \t\t     pointer arithmetic to work.  */\n \t\t  if (TREE_CODE (alias) == STRUCT_FIELD_TAG)\n+\t\t    bitmap_set_bit (queued, DECL_UID (SFT_PARENT_VAR (alias)));\n+\t\t  else if (!unmodifiable_var_p (alias))\n+\t\t    mark_call_clobbered (alias, pi->escape_mask);\n+\t\t}\n+\t      /* Process variables we need to clobber all parts of.  */\n+\t      if (!bitmap_empty_p (queued))\n+\t\t{\n+\t\t  EXECUTE_IF_SET_IN_BITMAP (queued, 0, j, bi)\n \t\t    {\n \t\t      subvar_t svars;\n-\t\t      svars = get_subvars_for_var (SFT_PARENT_VAR (alias));\n+\t\t      svars = get_subvars_for_var (referenced_var (j));\n \t\t      for (; svars; svars = svars->next)\n-\t\t\tif (!unmodifiable_var_p (alias))\n+\t\t\tif (!unmodifiable_var_p (svars->var))\n \t\t\t  mark_call_clobbered (svars->var, pi->escape_mask);\n \t\t    }\n-\t\t  else if (!unmodifiable_var_p (alias))\n-\t\t    mark_call_clobbered (alias, pi->escape_mask);\n+\t\t  bitmap_clear (queued);\n \t\t}\n \t    }\n \t}\n@@ -600,6 +618,8 @@ set_initial_properties (struct alias_info *ai)\n \t  MTAG_GLOBAL (tag) = true;\n \t}\n     }\n+\n+  BITMAP_FREE (queued);\n }\n \n /* Compute which variables need to be marked call clobbered because\n@@ -611,10 +631,11 @@ compute_call_clobbered (struct alias_info *ai)\n {\n   VEC (tree, heap) *worklist = NULL;\n   VEC (int,heap) *worklist2 = NULL;\n-  bitmap on_worklist;\n+  bitmap on_worklist, queued;\n \n   timevar_push (TV_CALL_CLOBBER);\n   on_worklist = BITMAP_ALLOC (NULL);\n+  queued = BITMAP_ALLOC (NULL);\n     \n   set_initial_properties (ai);\n   init_transitive_clobber_worklist (&worklist, &worklist2, on_worklist);\n@@ -626,11 +647,12 @@ compute_call_clobbered (struct alias_info *ai)\n       bitmap_clear_bit (on_worklist, DECL_UID (curr));\n       mark_call_clobbered (curr, reason);\n       mark_aliases_call_clobbered (curr, &worklist, &worklist2,\n-\t\t\t\t   on_worklist);\n+\t\t\t\t   on_worklist, queued);\n     }\n   VEC_free (tree, heap, worklist);\n   VEC_free (int, heap, worklist2);\n   BITMAP_FREE (on_worklist);\n+  BITMAP_FREE (queued);\n   compute_tag_properties ();\n   timevar_pop (TV_CALL_CLOBBER);\n }"}]}