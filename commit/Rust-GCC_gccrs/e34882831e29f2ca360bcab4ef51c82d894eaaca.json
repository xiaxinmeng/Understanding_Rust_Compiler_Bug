{"sha": "e34882831e29f2ca360bcab4ef51c82d894eaaca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTM0ODgyODMxZTI5ZjJjYTM2MGJjYWI0ZWY1MWM4MmQ4OTRlYWFjYQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-09-01T11:39:55Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-09-01T11:39:55Z"}, "message": "tree-vrp.c (adjust_range_with_scev): Use number of iteration estimate.\n\n2010-09-01  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-vrp.c (adjust_range_with_scev): Use number of iteration\n\testimate.\n\t(vrp_visit_phi_node): Delay using SCEV till we balloon the\n\trange.\n\t(execute_vrp): Compute number of iteration estimates.\n\t* cfgloop.h (estimate_numbers_of_iterations_loop): Adjust prototype.\n\t* tree-flow.h (estimate_numbers_of_iterations): Likewise.\n\t* tree-data-ref.c (estimated_loop_iterations): Adjust.\n\t* tree-ssa-loop-niter.c (estimate_numbers_of_iterations_loop):\n\tInfer loop bounds from undefined behavior based on a new\n\tparameter.\n\t(estimate_numbers_of_iterations): Likewise.\n\t(scev_probably_wraps_p): Adjust.\n\t* tree-ssa-loop.c (tree_ssa_loop_bounds): Likewise.\n\n\t* gcc.dg/vect/vect-outer-fir.c: Adjust.\n\t* gcc.dg/tree-ssa/vrp54.c: New testcase.\n\t* gcc.c-torture/execute/20100827-1.c: Likewise.\n\nFrom-SVN: r163724", "tree": {"sha": "fb95bfb5f51d55210e47b9d172c749cf48f7008e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb95bfb5f51d55210e47b9d172c749cf48f7008e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e34882831e29f2ca360bcab4ef51c82d894eaaca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e34882831e29f2ca360bcab4ef51c82d894eaaca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e34882831e29f2ca360bcab4ef51c82d894eaaca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e34882831e29f2ca360bcab4ef51c82d894eaaca/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "eacbdaaac11b43b389ed33dfb8d2390d5ca02bde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eacbdaaac11b43b389ed33dfb8d2390d5ca02bde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eacbdaaac11b43b389ed33dfb8d2390d5ca02bde"}], "stats": {"total": 301, "additions": 202, "deletions": 99}, "files": [{"sha": "2afb420dc6568dd48a5d19de6beb9498c9608276", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e34882831e29f2ca360bcab4ef51c82d894eaaca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e34882831e29f2ca360bcab4ef51c82d894eaaca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e34882831e29f2ca360bcab4ef51c82d894eaaca", "patch": "@@ -1,3 +1,20 @@\n+2010-09-01  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-vrp.c (adjust_range_with_scev): Use number of iteration\n+\testimate.\n+\t(vrp_visit_phi_node): Delay using SCEV till we balloon the\n+\trange.\n+\t(execute_vrp): Compute number of iteration estimates.\n+\t* cfgloop.h (estimate_numbers_of_iterations_loop): Adjust prototype.\n+\t* tree-flow.h (estimate_numbers_of_iterations): Likewise.\n+\t* tree-data-ref.c (estimated_loop_iterations): Adjust.\n+\t* tree-ssa-loop-niter.c (estimate_numbers_of_iterations_loop):\n+\tInfer loop bounds from undefined behavior based on a new\n+\tparameter.\n+\t(estimate_numbers_of_iterations): Likewise.\n+\t(scev_probably_wraps_p): Adjust.\n+\t* tree-ssa-loop.c (tree_ssa_loop_bounds): Likewise.\n+\n 2010-09-01  Nick Clifton  <nickc@redhat.com>\n \n \t* config/stormy16/stormy16.c: Use REG_P, MEM_P and CONST_INT_P"}, {"sha": "bf2614e136ff3c1024e78dadc897148343183218", "filename": "gcc/cfgloop.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e34882831e29f2ca360bcab4ef51c82d894eaaca/gcc%2Fcfgloop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e34882831e29f2ca360bcab4ef51c82d894eaaca/gcc%2Fcfgloop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.h?ref=e34882831e29f2ca360bcab4ef51c82d894eaaca", "patch": "@@ -276,7 +276,7 @@ gcov_type expected_loop_iterations_unbounded (const struct loop *);\n extern unsigned expected_loop_iterations (const struct loop *);\n extern rtx doloop_condition_get (rtx);\n \n-void estimate_numbers_of_iterations_loop (struct loop *);\n+void estimate_numbers_of_iterations_loop (struct loop *, bool);\n HOST_WIDE_INT estimated_loop_iterations_int (struct loop *, bool);\n bool estimated_loop_iterations (struct loop *, bool, double_int *);\n "}, {"sha": "67f5a20cfa091e36816d9254b9bfe2ee1a1e53ab", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e34882831e29f2ca360bcab4ef51c82d894eaaca/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e34882831e29f2ca360bcab4ef51c82d894eaaca/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e34882831e29f2ca360bcab4ef51c82d894eaaca", "patch": "@@ -1,3 +1,9 @@\n+2010-09-01  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.dg/vect/vect-outer-fir.c: Adjust.\n+\t* gcc.dg/tree-ssa/vrp54.c: New testcase.\n+\t* gcc.c-torture/execute/20100827-1.c: Likewise.\n+\n 2010-09-01  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \t* gfortran.dg/execute_command_line_1.f90: New test."}, {"sha": "8a531b99bb19dc40e9ea88d34903df4ae1b9d8f5", "filename": "gcc/testsuite/gcc.c-torture/execute/20100827-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e34882831e29f2ca360bcab4ef51c82d894eaaca/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20100827-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e34882831e29f2ca360bcab4ef51c82d894eaaca/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20100827-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20100827-1.c?ref=e34882831e29f2ca360bcab4ef51c82d894eaaca", "patch": "@@ -0,0 +1,23 @@\n+extern void abort (void);\n+int __attribute__((noinline,noclone))\n+foo (char *p)\n+{\n+  int h = 0;\n+  do\n+    {\n+      if (*p == '\\0')\n+\tbreak;\n+      ++h;\n+      if (p == 0)\n+\tabort ();\n+      ++p;\n+    }\n+  while (1);\n+  return h;\n+}\n+int main()\n+{\n+  if (foo(\"a\") != 1)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "6e8da77581b9aab2d973becd9880b51c612fb34b", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp54.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e34882831e29f2ca360bcab4ef51c82d894eaaca/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp54.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e34882831e29f2ca360bcab4ef51c82d894eaaca/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp54.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp54.c?ref=e34882831e29f2ca360bcab4ef51c82d894eaaca", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1\" } */\n+\n+extern void link_error (void);\n+void foo (void)\n+{\n+  int j = 256;\n+  do\n+    {\n+      if (j < 0 || j > 256)\n+\tlink_error ();\n+      j--;\n+    }\n+  while (j >= 0);\n+  if (j != -1)\n+    link_error ();\n+}\n+extern void link_error (void);\n+void bar (void)\n+{\n+  int j = 0;\n+  do\n+    {\n+      if (j < 0 || j > 256)\n+\tlink_error ();\n+      j++;\n+    }\n+  while (j <= 256);\n+  if (j != 257)\n+    link_error ();\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"link_error\" \"vrp1\" } } */\n+/* { dg-final { cleanup-tree-dump \"vrp1\" } } */"}, {"sha": "af787b96a33691d15e3cc570925f6ede80f84a28", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-fir.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e34882831e29f2ca360bcab4ef51c82d894eaaca/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-fir.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e34882831e29f2ca360bcab4ef51c82d894eaaca/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-fir.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-fir.c?ref=e34882831e29f2ca360bcab4ef51c82d894eaaca", "patch": "@@ -11,10 +11,6 @@ float out[N];\n float fir_out[N];\n \n /* Should be vectorized. Fixed misaligment in the inner-loop.  */\n-/* Currently not vectorized because we get too many BBs in the inner-loop,\n-   because the compiler doesn't realize that the inner-loop executes at\n-   least once (cause k<4), and so there's no need to create a guard code\n-   to skip the inner-loop in case it doesn't execute.  */\n __attribute__ ((noinline))\n void foo (){\n  int i,j,k;\n@@ -74,6 +70,5 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 2 \"vect\" { xfail *-*-* } } } */\n-/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 1 \"vect\" { xfail vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 2 \"vect\" { xfail vect_no_align } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "ee181a6972052aa5c482ee656476413a7aa34c45", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e34882831e29f2ca360bcab4ef51c82d894eaaca/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e34882831e29f2ca360bcab4ef51c82d894eaaca/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=e34882831e29f2ca360bcab4ef51c82d894eaaca", "patch": "@@ -1716,7 +1716,7 @@ bool\n estimated_loop_iterations (struct loop *loop, bool conservative,\n \t\t\t   double_int *nit)\n {\n-  estimate_numbers_of_iterations_loop (loop);\n+  estimate_numbers_of_iterations_loop (loop, true);\n   if (conservative)\n     {\n       if (!loop->any_upper_bound)"}, {"sha": "6b16234136c04022198b3a2ef353e272b2e6225d", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e34882831e29f2ca360bcab4ef51c82d894eaaca/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e34882831e29f2ca360bcab4ef51c82d894eaaca/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=e34882831e29f2ca360bcab4ef51c82d894eaaca", "patch": "@@ -684,7 +684,7 @@ bool number_of_iterations_exit (struct loop *, edge,\n tree find_loop_niter (struct loop *, edge *);\n tree loop_niter_by_eval (struct loop *, edge);\n tree find_loop_niter_by_eval (struct loop *, edge *);\n-void estimate_numbers_of_iterations (void);\n+void estimate_numbers_of_iterations (bool);\n bool array_at_struct_end_p (tree);\n bool scev_probably_wraps_p (tree, tree, gimple, struct loop *, bool);\n bool convert_affine_scev (struct loop *, tree, tree *, tree *, gimple, bool);"}, {"sha": "94d150d824642860075a89de8bd1200887e3d04a", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e34882831e29f2ca360bcab4ef51c82d894eaaca/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e34882831e29f2ca360bcab4ef51c82d894eaaca/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=e34882831e29f2ca360bcab4ef51c82d894eaaca", "patch": "@@ -2933,10 +2933,11 @@ gcov_type_to_double_int (gcov_type val)\n   return ret;\n }\n \n-/* Records estimates on numbers of iterations of LOOP.  */\n+/* Records estimates on numbers of iterations of LOOP.  If USE_UNDEFINED_P\n+   is true also use estimates derived from undefined behavior.  */\n \n void\n-estimate_numbers_of_iterations_loop (struct loop *loop)\n+estimate_numbers_of_iterations_loop (struct loop *loop, bool use_undefined_p)\n {\n   VEC (edge, heap) *exits;\n   tree niter, type;\n@@ -2970,7 +2971,8 @@ estimate_numbers_of_iterations_loop (struct loop *loop)\n     }\n   VEC_free (edge, heap, exits);\n \n-  infer_loop_bounds_from_undefined (loop);\n+  if (use_undefined_p)\n+    infer_loop_bounds_from_undefined (loop);\n \n   /* If we have a measured profile, use it to estimate the number of\n      iterations.  */\n@@ -2993,7 +2995,7 @@ estimate_numbers_of_iterations_loop (struct loop *loop)\n /* Records estimates on numbers of iterations of loops.  */\n \n void\n-estimate_numbers_of_iterations (void)\n+estimate_numbers_of_iterations (bool use_undefined_p)\n {\n   loop_iterator li;\n   struct loop *loop;\n@@ -3004,7 +3006,7 @@ estimate_numbers_of_iterations (void)\n \n   FOR_EACH_LOOP (li, loop, 0)\n     {\n-      estimate_numbers_of_iterations_loop (loop);\n+      estimate_numbers_of_iterations_loop (loop, use_undefined_p);\n     }\n \n   fold_undefer_and_ignore_overflow_warnings ();\n@@ -3200,7 +3202,7 @@ scev_probably_wraps_p (tree base, tree step,\n \n   valid_niter = fold_build2 (FLOOR_DIV_EXPR, unsigned_type, delta, step_abs);\n \n-  estimate_numbers_of_iterations_loop (loop);\n+  estimate_numbers_of_iterations_loop (loop, true);\n   for (bound = loop->bounds; bound; bound = bound->next)\n     {\n       if (n_of_executions_at_most (at_stmt, bound, valid_niter))"}, {"sha": "a62098a399bc2bbde311acaeedaff330e70a4d60", "filename": "gcc/tree-ssa-loop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e34882831e29f2ca360bcab4ef51c82d894eaaca/gcc%2Ftree-ssa-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e34882831e29f2ca360bcab4ef51c82d894eaaca/gcc%2Ftree-ssa-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop.c?ref=e34882831e29f2ca360bcab4ef51c82d894eaaca", "patch": "@@ -458,7 +458,7 @@ tree_ssa_loop_bounds (void)\n   if (number_of_loops () <= 1)\n     return 0;\n \n-  estimate_numbers_of_iterations ();\n+  estimate_numbers_of_iterations (true);\n   scev_reset ();\n   return 0;\n }"}, {"sha": "c005c53c9023b5efa79e2cdf640d5f37bfc953c5", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 109, "deletions": 83, "changes": 192, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e34882831e29f2ca360bcab4ef51c82d894eaaca/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e34882831e29f2ca360bcab4ef51c82d894eaaca/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=e34882831e29f2ca360bcab4ef51c82d894eaaca", "patch": "@@ -3382,6 +3382,38 @@ adjust_range_with_scev (value_range_t *vr, struct loop *loop,\n   else\n     tmax = TYPE_MAX_VALUE (type);\n \n+  /* Try to use estimated number of iterations for the loop to constrain the\n+     final value in the evolution.\n+     We are interested in the number of executions of the latch, while\n+     nb_iterations_upper_bound includes the last execution of the exit test.  */\n+  if (TREE_CODE (step) == INTEGER_CST\n+      && loop->any_upper_bound\n+      && !double_int_zero_p (loop->nb_iterations_upper_bound)\n+      && is_gimple_val (init)\n+      && (TREE_CODE (init) != SSA_NAME\n+\t  || get_value_range (init)->type == VR_RANGE))\n+    {\n+      value_range_t maxvr = { VR_UNDEFINED, NULL_TREE, NULL_TREE, NULL };\n+      double_int dtmp;\n+      dtmp = double_int_mul (tree_to_double_int (step),\n+\t\t\t     double_int_sub (loop->nb_iterations_upper_bound,\n+\t\t\t\t\t     double_int_one));\n+      tem = double_int_to_tree (TREE_TYPE (init), dtmp);\n+      /* If the multiplication overflowed we can't do a meaningful\n+\t adjustment.  */\n+      if (double_int_equal_p (dtmp, tree_to_double_int (tem)))\n+\t{\n+\t  extract_range_from_binary_expr (&maxvr, PLUS_EXPR,\n+\t\t\t\t\t  TREE_TYPE (init), init, tem);\n+\t  /* Likewise if the addition did.  */\n+\t  if (maxvr.type == VR_RANGE)\n+\t    {\n+\t      tmin = maxvr.min;\n+\t      tmax = maxvr.max;\n+\t    }\n+\t}\n+    }\n+\n   if (vr->type == VR_VARYING || vr->type == VR_UNDEFINED)\n     {\n       min = tmin;\n@@ -3414,40 +3446,35 @@ adjust_range_with_scev (value_range_t *vr, struct loop *loop,\n \t  /* INIT is the maximum value.  If INIT is lower than VR->MAX\n \t     but no smaller than VR->MIN, set VR->MAX to INIT.  */\n \t  if (compare_values (init, max) == -1)\n-\t    {\n-\t      max = init;\n-\n-\t      /* If we just created an invalid range with the minimum\n-\t\t greater than the maximum, we fail conservatively.\n-\t\t This should happen only in unreachable\n-\t\t parts of code, or for invalid programs.  */\n-\t      if (compare_values (min, max) == 1)\n-\t\treturn;\n-\t    }\n+\t    max = init;\n \n \t  /* According to the loop information, the variable does not\n \t     overflow.  If we think it does, probably because of an\n \t     overflow due to arithmetic on a different INF value,\n \t     reset now.  */\n-\t  if (is_negative_overflow_infinity (min))\n+\t  if (is_negative_overflow_infinity (min)\n+\t      || compare_values (min, tmin) == -1)\n \t    min = tmin;\n+\n \t}\n       else\n \t{\n \t  /* If INIT is bigger than VR->MIN, set VR->MIN to INIT.  */\n \t  if (compare_values (init, min) == 1)\n-\t    {\n-\t      min = init;\n-\n-\t      /* Again, avoid creating invalid range by failing.  */\n-\t      if (compare_values (min, max) == 1)\n-\t\treturn;\n-\t    }\n+\t    min = init;\n \n-\t  if (is_positive_overflow_infinity (max))\n+\t  if (is_positive_overflow_infinity (max)\n+\t      || compare_values (tmax, max) == -1)\n \t    max = tmax;\n \t}\n \n+      /* If we just created an invalid range with the minimum\n+\t greater than the maximum, we fail conservatively.\n+\t This should happen only in unreachable\n+\t parts of code, or for invalid programs.  */\n+      if (compare_values (min, max) == 1)\n+\treturn;\n+\n       set_value_range (vr, VR_RANGE, min, max, vr->equiv);\n     }\n }\n@@ -6509,8 +6536,6 @@ vrp_visit_phi_node (gimple phi)\n   int edges, old_edges;\n   struct loop *l;\n \n-  copy_value_range (&vr_result, lhs_vr);\n-\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fprintf (dump_file, \"\\nVisiting PHI node: \");\n@@ -6571,13 +6596,6 @@ vrp_visit_phi_node (gimple phi)\n \t}\n     }\n \n-  /* If this is a loop PHI node SCEV may known more about its\n-     value-range.  */\n-  if (current_loops\n-      && (l = loop_containing_stmt (phi))\n-      && l->header == gimple_bb (phi))\n-    adjust_range_with_scev (&vr_result, l, phi, lhs);\n-\n   if (vr_result.type == VR_VARYING)\n     goto varying;\n \n@@ -6589,61 +6607,63 @@ vrp_visit_phi_node (gimple phi)\n      previous one.  We don't do this if we have seen a new executable\n      edge; this helps us avoid an overflow infinity for conditionals\n      which are not in a loop.  */\n-  if (lhs_vr->type == VR_RANGE && vr_result.type == VR_RANGE\n-      && edges <= old_edges)\n-    {\n-      if (!POINTER_TYPE_P (TREE_TYPE (lhs)))\n-\t{\n-\t  int cmp_min = compare_values (lhs_vr->min, vr_result.min);\n-\t  int cmp_max = compare_values (lhs_vr->max, vr_result.max);\n-\n-\t  /* If the new minimum is smaller or larger than the previous\n-\t     one, go all the way to -INF.  In the first case, to avoid\n-\t     iterating millions of times to reach -INF, and in the\n-\t     other case to avoid infinite bouncing between different\n-\t     minimums.  */\n-\t  if (cmp_min > 0 || cmp_min < 0)\n-\t    {\n-\t      /* If we will end up with a (-INF, +INF) range, set it to\n-\t\t VARYING.  Same if the previous max value was invalid for\n-\t\t the type and we'd end up with vr_result.min > vr_result.max.  */\n-\t      if (vrp_val_is_max (vr_result.max)\n-\t\t  || compare_values (TYPE_MIN_VALUE (TREE_TYPE (vr_result.min)),\n-\t\t\t\t     vr_result.max) > 0)\n-\t\tgoto varying;\n-\n-\t      if (!needs_overflow_infinity (TREE_TYPE (vr_result.min))\n-\t\t  || !vrp_var_may_overflow (lhs, phi))\n-\t\tvr_result.min = TYPE_MIN_VALUE (TREE_TYPE (vr_result.min));\n-\t      else if (supports_overflow_infinity (TREE_TYPE (vr_result.min)))\n-\t\tvr_result.min =\n-\t\t  negative_overflow_infinity (TREE_TYPE (vr_result.min));\n-\t      else\n-\t\tgoto varying;\n-\t    }\n-\n-\t  /* Similarly, if the new maximum is smaller or larger than\n-\t     the previous one, go all the way to +INF.  */\n-\t  if (cmp_max < 0 || cmp_max > 0)\n-\t    {\n-\t      /* If we will end up with a (-INF, +INF) range, set it to\n-\t\t VARYING.  Same if the previous min value was invalid for\n-\t\t the type and we'd end up with vr_result.max < vr_result.min.  */\n-\t      if (vrp_val_is_min (vr_result.min)\n-\t\t  || compare_values (TYPE_MAX_VALUE (TREE_TYPE (vr_result.max)),\n-\t\t\t\t     vr_result.min) < 0)\n-\t\tgoto varying;\n-\n-\t      if (!needs_overflow_infinity (TREE_TYPE (vr_result.max))\n-\t\t  || !vrp_var_may_overflow (lhs, phi))\n-\t\tvr_result.max = TYPE_MAX_VALUE (TREE_TYPE (vr_result.max));\n-\t      else if (supports_overflow_infinity (TREE_TYPE (vr_result.max)))\n-\t\tvr_result.max =\n-\t\t  positive_overflow_infinity (TREE_TYPE (vr_result.max));\n-\t      else\n-\t\tgoto varying;\n-\t    }\n-\t}\n+  if (edges > 0\n+      && edges == old_edges)\n+    {\n+      int cmp_min = compare_values (lhs_vr->min, vr_result.min);\n+      int cmp_max = compare_values (lhs_vr->max, vr_result.max);\n+\n+      /* For non VR_RANGE or for pointers fall back to varying if\n+\t the range changed.  */\n+      if ((lhs_vr->type != VR_RANGE || vr_result.type != VR_RANGE\n+\t   || POINTER_TYPE_P (TREE_TYPE (lhs)))\n+\t  && (cmp_min != 0 || cmp_max != 0))\n+\tgoto varying;\n+\n+      /* If the new minimum is smaller or larger than the previous\n+\t one, go all the way to -INF.  In the first case, to avoid\n+\t iterating millions of times to reach -INF, and in the\n+\t other case to avoid infinite bouncing between different\n+\t minimums.  */\n+      if (cmp_min > 0 || cmp_min < 0)\n+\t{\n+\t  if (!needs_overflow_infinity (TREE_TYPE (vr_result.min))\n+\t      || !vrp_var_may_overflow (lhs, phi))\n+\t    vr_result.min = TYPE_MIN_VALUE (TREE_TYPE (vr_result.min));\n+\t  else if (supports_overflow_infinity (TREE_TYPE (vr_result.min)))\n+\t    vr_result.min =\n+\t\tnegative_overflow_infinity (TREE_TYPE (vr_result.min));\n+\t}\n+\n+      /* Similarly, if the new maximum is smaller or larger than\n+\t the previous one, go all the way to +INF.  */\n+      if (cmp_max < 0 || cmp_max > 0)\n+\t{\n+\t  if (!needs_overflow_infinity (TREE_TYPE (vr_result.max))\n+\t      || !vrp_var_may_overflow (lhs, phi))\n+\t    vr_result.max = TYPE_MAX_VALUE (TREE_TYPE (vr_result.max));\n+\t  else if (supports_overflow_infinity (TREE_TYPE (vr_result.max)))\n+\t    vr_result.max =\n+\t\tpositive_overflow_infinity (TREE_TYPE (vr_result.max));\n+\t}\n+\n+      /* If we dropped either bound to +-INF then if this is a loop\n+\t PHI node SCEV may known more about its value-range.  */\n+      if ((cmp_min > 0 || cmp_min < 0\n+\t   || cmp_max < 0 || cmp_max > 0)\n+\t  && current_loops\n+\t  && (l = loop_containing_stmt (phi))\n+\t  && l->header == gimple_bb (phi))\n+\tadjust_range_with_scev (&vr_result, l, phi, lhs);\n+\n+      /* If we will end up with a (-INF, +INF) range, set it to\n+\t VARYING.  Same if the previous max value was invalid for\n+\t the type and we end up with vr_result.min > vr_result.max.  */\n+      if ((vrp_val_is_max (vr_result.max)\n+\t   && vrp_val_is_min (vr_result.min))\n+\t  || compare_values (vr_result.min,\n+\t\t\t     vr_result.max) > 0)\n+\tgoto varying;\n     }\n \n   /* If the new range is different than the previous value, keep\n@@ -7650,6 +7670,12 @@ execute_vrp (void)\n   rewrite_into_loop_closed_ssa (NULL, TODO_update_ssa);\n   scev_initialize ();\n \n+  /* Estimate number of iterations - but do not use undefined behavior\n+     for this.  We can't do this lazily as other functions may compute\n+     this using undefined behavior.  */\n+  free_numbers_of_iterations_estimates ();\n+  estimate_numbers_of_iterations (false);\n+\n   insert_range_assertions ();\n \n   to_remove_edges = VEC_alloc (edge, heap, 10);"}]}