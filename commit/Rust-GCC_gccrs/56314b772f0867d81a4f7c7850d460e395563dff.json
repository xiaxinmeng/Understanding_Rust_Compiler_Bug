{"sha": "56314b772f0867d81a4f7c7850d460e395563dff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTYzMTRiNzcyZjA4NjdkODFhNGY3Yzc4NTBkNDYwZTM5NTU2M2RmZg==", "commit": {"author": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2019-01-12T22:18:50Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2019-01-12T22:18:50Z"}, "message": "[nvptx] Force vl32 if calling vector-partitionable routines -- test-cases\n\nAdd test-cases for \"[nvptx] Force vl32 if calling vector-partitionable\nroutines\".\n\n2019-01-12  Tom de Vries  <tdevries@suse.de>\n\n\tPR target/85486\n\t* testsuite/libgomp.oacc-c-c++-common/pr85486-3.c: New test.\n\t* testsuite/libgomp.oacc-c-c++-common/pr85486.c: New test.\n\nFrom-SVN: r267894", "tree": {"sha": "9b4715179512b33715e8b3032df05c45e5eb0ce8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b4715179512b33715e8b3032df05c45e5eb0ce8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56314b772f0867d81a4f7c7850d460e395563dff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56314b772f0867d81a4f7c7850d460e395563dff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56314b772f0867d81a4f7c7850d460e395563dff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56314b772f0867d81a4f7c7850d460e395563dff/comments", "author": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b39e4366a2d561e69d2d529fd4f910374191c8b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b39e4366a2d561e69d2d529fd4f910374191c8b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b39e4366a2d561e69d2d529fd4f910374191c8b9"}], "stats": {"total": 111, "additions": 111, "deletions": 0}, "files": [{"sha": "e6b1460917165fa6d2934a0508f917bb33099649", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56314b772f0867d81a4f7c7850d460e395563dff/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56314b772f0867d81a4f7c7850d460e395563dff/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=56314b772f0867d81a4f7c7850d460e395563dff", "patch": "@@ -1,3 +1,9 @@\n+2019-01-12  Tom de Vries  <tdevries@suse.de>\n+\n+\tPR target/85486\n+\t* testsuite/libgomp.oacc-c-c++-common/pr85486-3.c: New test.\n+\t* testsuite/libgomp.oacc-c-c++-common/pr85486.c: New test.\n+\n 2019-01-12  Tom de Vries  <tdevries@suse.de>\n \n \tPR target/85381"}, {"sha": "a959b90c29ad99db0790a2bfd39120d927e7114a", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/pr85486-3.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56314b772f0867d81a4f7c7850d460e395563dff/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr85486-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56314b772f0867d81a4f7c7850d460e395563dff/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr85486-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr85486-3.c?ref=56314b772f0867d81a4f7c7850d460e395563dff", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run { target openacc_nvidia_accel_selected } } */\n+/* { dg-set-target-env-var \"GOMP_OPENACC_DIM\" \"::128\" } */\n+\n+/* Minimized from ref-1.C.  */\n+\n+#include <stdio.h>\n+\n+#pragma acc routine vector\n+void __attribute__((noinline, noclone))\n+Vector (int *ptr, int n, const int inc)\n+{\n+  #pragma acc loop vector\n+  for (unsigned ix = 0; ix < n; ix++)\n+    ptr[ix] += inc;\n+}\n+\n+int\n+main (void)\n+{\n+  const int n = 32, m=32;\n+\n+  int ary[m][n];\n+  unsigned ix,  iy;\n+\n+  for (ix = m; ix--;)\n+    for (iy = n; iy--;)\n+      ary[ix][iy] = (1 << 16) + (ix << 8) + iy;\n+\n+  int err = 0;\n+\n+#pragma acc parallel copy (ary)\n+  {\n+    Vector (&ary[0][0], m * n, (1 << 24) - (1 << 16));\n+  }\n+\n+  for (ix = m; ix--;)\n+    for (iy = n; iy--;)\n+      if (ary[ix][iy] != ((1 << 24) + (ix << 8) + iy))\n+\t{\n+\t  printf (\"ary[%u][%u] = %x expected %x\\n\",\n+\t\t  ix, iy, ary[ix][iy], ((1 << 24) + (ix << 8) + iy));\n+\t  err++;\n+\t}\n+\n+  if (err)\n+    {\n+      printf (\"%d failed\\n\", err);\n+      return 1;\n+    }\n+\n+  return 0;\n+}\n+\n+/* { dg-prune-output \"using vector_length \\\\(32\\\\), ignoring runtime setting\" } */"}, {"sha": "99c08059d37c699b0633779c7a3e6c3fbeb09bf3", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/pr85486.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56314b772f0867d81a4f7c7850d460e395563dff/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr85486.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56314b772f0867d81a4f7c7850d460e395563dff/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr85486.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr85486.c?ref=56314b772f0867d81a4f7c7850d460e395563dff", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do run { target openacc_nvidia_accel_selected } } */\n+\n+/* Minimized from ref-1.C.  */\n+\n+#include <stdio.h>\n+\n+#pragma acc routine vector\n+void __attribute__((noinline, noclone))\n+Vector (int *ptr, int n, const int inc)\n+{\n+  #pragma acc loop vector\n+  for (unsigned ix = 0; ix < n; ix++)\n+    ptr[ix] += inc;\n+}\n+\n+int\n+main (void)\n+{\n+  const int n = 32, m=32;\n+\n+  int ary[m][n];\n+  unsigned ix,  iy;\n+\n+  for (ix = m; ix--;)\n+    for (iy = n; iy--;)\n+      ary[ix][iy] = (1 << 16) + (ix << 8) + iy;\n+\n+  int err = 0;\n+\n+#pragma acc parallel copy (ary) vector_length (128) /* { dg-warning \"using vector_length \\\\(32\\\\) due to call to vector-partitionable routine, ignoring 128\" } */\n+  {\n+    Vector (&ary[0][0], m * n, (1 << 24) - (1 << 16));\n+  }\n+\n+  for (ix = m; ix--;)\n+    for (iy = n; iy--;)\n+      if (ary[ix][iy] != ((1 << 24) + (ix << 8) + iy))\n+\t{\n+\t  printf (\"ary[%u][%u] = %x expected %x\\n\",\n+\t\t  ix, iy, ary[ix][iy], ((1 << 24) + (ix << 8) + iy));\n+\t  err++;\n+\t}\n+\n+  if (err)\n+    {\n+      printf (\"%d failed\\n\", err);\n+      return 1;\n+    }\n+\n+  return 0;\n+}"}]}