{"sha": "841cc7daf3e285036b0468ce9eb28695a8080e98", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQxY2M3ZGFmM2UyODUwMzZiMDQ2OGNlOWViMjg2OTVhODA4MGU5OA==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@apple.com", "date": "2007-05-08T01:31:24Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "2007-05-08T01:31:24Z"}, "message": "invoke.texi (Warning Options): Document that -Wempty-body also checks for and while statements in C++.\n\n\t* doc/invoke.texi (Warning Options): Document that -Wempty-body\n\talso checks for and while statements in C++.\n\ncp:\n\t* parser.c (check_empty_body): Add.\n\t(cp_parser_iteration_statement): Add call to check_empty_body.\n\ntestsuite:\n\t* g++.old-deja/g++.mike/empty.C: Add.\n\nFrom-SVN: r124534", "tree": {"sha": "37e00df220b8ab9eb5ac7e99af6a2be48f9819c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37e00df220b8ab9eb5ac7e99af6a2be48f9819c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/841cc7daf3e285036b0468ce9eb28695a8080e98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/841cc7daf3e285036b0468ce9eb28695a8080e98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/841cc7daf3e285036b0468ce9eb28695a8080e98", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/841cc7daf3e285036b0468ce9eb28695a8080e98/comments", "author": null, "committer": null, "parents": [{"sha": "79d37e4574ed6ca0c6fbd189b62f84cb8e90450a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79d37e4574ed6ca0c6fbd189b62f84cb8e90450a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79d37e4574ed6ca0c6fbd189b62f84cb8e90450a"}], "stats": {"total": 97, "additions": 95, "deletions": 2}, "files": [{"sha": "22b09d4fc5fe517805ec9d2fed64b0e1d4d74e4c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/841cc7daf3e285036b0468ce9eb28695a8080e98/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/841cc7daf3e285036b0468ce9eb28695a8080e98/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=841cc7daf3e285036b0468ce9eb28695a8080e98", "patch": "@@ -1,3 +1,8 @@\n+2007-05-07  Mike Stump  <mrs@apple.com>\n+\n+\t* doc/invoke.texi (Warning Options): Document that -Wempty-body\n+\talso checks for and while statements in C++.\n+\n 2007-05-07  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* gcc.c (at_file_supplied): New variable."}, {"sha": "e0286ff6505f3ad042beb5721656ebd76e71ef3a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/841cc7daf3e285036b0468ce9eb28695a8080e98/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/841cc7daf3e285036b0468ce9eb28695a8080e98/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=841cc7daf3e285036b0468ce9eb28695a8080e98", "patch": "@@ -1,3 +1,8 @@\n+2007-05-07  Mike Stump  <mrs@apple.com>\n+\n+\t* parser.c (check_empty_body): Add.\n+\t(cp_parser_iteration_statement): Add call to check_empty_body.\n+\n 2007-05-05  Geoffrey Keating  <geoffk@apple.com>\n \n \tPR 31775"}, {"sha": "4599aca0166aa91acee1e6a47b41ab971c16838f", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/841cc7daf3e285036b0468ce9eb28695a8080e98/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/841cc7daf3e285036b0468ce9eb28695a8080e98/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=841cc7daf3e285036b0468ce9eb28695a8080e98", "patch": "@@ -7065,6 +7065,51 @@ cp_parser_condition (cp_parser* parser)\n   return cp_parser_expression (parser, /*cast_p=*/false);\n }\n \n+/* We check for a ) immediately followed by ; with no whitespacing\n+   between.  This is used to issue a warning for:\n+\n+     while (...);\n+\n+   and:\n+\n+     for (...);\n+\n+   as the semicolon is probably extraneous.\n+\n+   On parse errors, the next token might not be a ), so do nothing in\n+   that case. */\n+\n+static void\n+check_empty_body (cp_parser* parser, const char* type)\n+{\n+  cp_token *token;\n+  cp_token *close_paren;\n+  expanded_location close_loc;\n+  expanded_location semi_loc;\n+  \n+  close_paren = cp_lexer_peek_token (parser->lexer);\n+  if (close_paren->type != CPP_CLOSE_PAREN)\n+    return;\n+\n+  close_loc = expand_location (close_paren->location);\n+  token = cp_lexer_peek_nth_token (parser->lexer, 2);\n+\n+  if (token->type != CPP_SEMICOLON\n+      || (token->flags & PREV_WHITE))\n+    return;\n+\n+  semi_loc =  expand_location (token->location);\n+  if (close_loc.line == semi_loc.line\n+#ifdef USE_MAPPED_LOCATION\n+      && close_loc.column+1 == semi_loc.column\n+#endif\n+      )\n+    warning (OPT_Wempty_body,\n+\t     \"suggest a space before %<;%> or explicit braces around empty \"\n+\t     \"body in %<%s%> statement\",\n+\t     type);\n+}\n+\n /* Parse an iteration-statement.\n \n    iteration-statement:\n@@ -7107,6 +7152,7 @@ cp_parser_iteration_statement (cp_parser* parser)\n \t/* Parse the condition.  */\n \tcondition = cp_parser_condition (parser);\n \tfinish_while_stmt_cond (condition, statement);\n+\tcheck_empty_body (parser, \"while\");\n \t/* Look for the `)'.  */\n \tcp_parser_require (parser, CPP_CLOSE_PAREN, \"`)'\");\n \t/* Parse the dependent statement.  */\n@@ -7168,6 +7214,7 @@ cp_parser_iteration_statement (cp_parser* parser)\n \tif (cp_lexer_next_token_is_not (parser->lexer, CPP_CLOSE_PAREN))\n \t  expression = cp_parser_expression (parser, /*cast_p=*/false);\n \tfinish_for_expr (expression, statement);\n+\tcheck_empty_body (parser, \"for\");\n \t/* Look for the `)'.  */\n \tcp_parser_require (parser, CPP_CLOSE_PAREN, \"`)'\");\n "}, {"sha": "552e3b731b03a5dc6e86ef7c52734c6f4674c50e", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/841cc7daf3e285036b0468ce9eb28695a8080e98/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/841cc7daf3e285036b0468ce9eb28695a8080e98/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=841cc7daf3e285036b0468ce9eb28695a8080e98", "patch": "@@ -3157,6 +3157,11 @@ An empty body occurs in an @samp{if}, @samp{else} or\n @samp{do while} statement. This warning can be independently\n controlled by @option{-Wempty-body}.\n \n+@item @r{(C++ only)}\n+An empty body occurs in a @samp{while} or @samp{for} statement with no\n+whitespacing before the semicolon. This warning can be independently\n+controlled by @option{-Wempty-body}.\n+\n @item\n A pointer is compared against integer zero with @samp{<}, @samp{<=},\n @samp{>}, or @samp{>=}.\n@@ -3421,8 +3426,10 @@ to them.\n \n @item -Wempty-body\n @opindex Wempty-body\n-An empty body occurs in an @samp{if}, @samp{else} or @samp{do while}\n-statement.  This warning is also enabled by @option{-Wextra}.\n+Warn if an empty body occurs in an @samp{if}, @samp{else} or @samp{do\n+while} statement.  Additionally, in C++, warn when an empty body occurs\n+in a @samp{while} or @samp{for} statement with no whitespacing before\n+the semicolon.  This warning is also enabled by @option{-Wextra}.\n \n @item -Wsign-compare\n @opindex Wsign-compare"}, {"sha": "6b6f3953b34849538eb96fd745c373e17b0e61a6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/841cc7daf3e285036b0468ce9eb28695a8080e98/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/841cc7daf3e285036b0468ce9eb28695a8080e98/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=841cc7daf3e285036b0468ce9eb28695a8080e98", "patch": "@@ -1,3 +1,7 @@\n+2007-05-07  Mike Stump  <mrs@apple.com>\n+\n+\t* g++.old-deja/g++.mike/empty.C: Add.\n+\n 2007-05-07  Eric Christopher  <echristo@apple.com>\n \n \t* gcc.dg/invalid-call-1.c: Fix options for 32-bit x86."}, {"sha": "d69f3ad62433fda5483be6d05e260098cb3a75f1", "filename": "gcc/testsuite/g++.old-deja/g++.mike/empty.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/841cc7daf3e285036b0468ce9eb28695a8080e98/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fempty.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/841cc7daf3e285036b0468ce9eb28695a8080e98/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fempty.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fempty.C?ref=841cc7daf3e285036b0468ce9eb28695a8080e98", "patch": "@@ -0,0 +1,25 @@\n+// { dg-options \"-W\" }\n+\n+#define NOPE\n+\n+void foo() {\n+  while (1); /* { dg-error \"suggest a space before \" } */\n+    {\n+    }\n+  for (;;); /* { dg-error \"suggest a space before \" } */\n+    {\n+    }\n+  while (1)\n+    ;\n+  for (;;)\n+    ;\n+  while (1) ;\n+  for (;;) ;\n+  /* These two work when using mapped locations */\n+  while (1) NOPE; /* { dg-bogus \"suggest a space before \" \"suggest\" { xfail *-*-* } } */\n+  for (;;) NOPE; /* { dg-bogus \"suggest a space before \" \"suggest\" { xfail *-*-* } } */\n+  while (1)\n+    NOPE;\n+  for (;;)\n+    NOPE;\n+}"}]}