{"sha": "820ac79e8448ad6c631e1387ba51a93dcf2b4e89", "node_id": "C_kwDOANBUbNoAKDgyMGFjNzllODQ0OGFkNmM2MzFlMTM4N2JhNTFhOTNkY2YyYjRlODk", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2022-01-11T18:23:15Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2022-01-11T18:23:58Z"}, "message": "i386: Introduce V2QImode vector cmove for -msse4.1 [PR103861]\n\nThis patch also moves V2HI and V4QImode vector conditional moves\nto SSE4.1 targets.  Vector cmoves are implemented with SSE logic functions\nwithout -msse4.1, and they are hardly worthwile for narrow vector modes.\nMore important, we would like to keep vector logic functions for GPR\nregisters, and the current RTX description of 32-bit vector modes logic\ninsns does not include the necessary CC reg clobber.  Solve these issues by\nrestricting vector cmove insns for these modes to -msse4.1, where logic\ninstructions are avoided, and pblend insn is used instead.\n\nA follow-up patch will add clobbers and necessary splits to 32-bit\nvector mode logic insns, and in a future patch, ix86_sse_movcc will be\nimproved to use expand_simple_{unop,binop} to emit logic insns, allowing\nus to re-enable 16-bit and 32-bit narrow vector cmoves for -msse2.\n\n2022-01-11  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/ChangeLog:\n\n\tPR target/103861\n\t* config/i386/mmx.md (vcond<mode><mode>):\n\tUse VI_16_32 mode iterator.  Enable for TARGET_SSE4_1.\n\t(vcondu<mode><mode>): Ditto.\n\t(vcond_mask_<mode><mode>): Ditto.\n\t(mmx_pblendvb_v8qi): Rename from mmx_pblendvb64.\n\t(mmx_pblendvb_<mode>): Rename from mmx_pblendvb32.\n\tUse VI_16_32 mode iterator.\n\t* config/i386/i386-expand.c (ix86_expand_sse_movcc):\n\tUpdate for rename.  Handle V2QImode.\n\t(expand_vec_perm_blend): Update for rename.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/103861\n\t* g++.target/i386/pr100637-1b.C (dg-options):\n\tUse -msse4 instead of -msse2.\n\t* g++.target/i386/pr100637-1w.C (dg-options): Ditto.\n\t* g++.target/i386/pr103861-1.C: New test.\n\t* gcc.target/i386/pr100637-4b.c (dg-options):\n\tUse -msse4 instead of -msse2.\n\t* gcc.target/i386/pr103861-4.c: New test.", "tree": {"sha": "3470cc29a067fdd8e68c257e8c7d99335f7e7a8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3470cc29a067fdd8e68c257e8c7d99335f7e7a8a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/820ac79e8448ad6c631e1387ba51a93dcf2b4e89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/820ac79e8448ad6c631e1387ba51a93dcf2b4e89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/820ac79e8448ad6c631e1387ba51a93dcf2b4e89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/820ac79e8448ad6c631e1387ba51a93dcf2b4e89/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef9462581076218d2370fabb09c39d2c83814b9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef9462581076218d2370fabb09c39d2c83814b9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef9462581076218d2370fabb09c39d2c83814b9a"}], "stats": {"total": 112, "additions": 78, "deletions": 34}, "files": [{"sha": "8b1266fb9f174b70770996b5642acddf616064aa", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/820ac79e8448ad6c631e1387ba51a93dcf2b4e89/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/820ac79e8448ad6c631e1387ba51a93dcf2b4e89/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=820ac79e8448ad6c631e1387ba51a93dcf2b4e89", "patch": "@@ -3899,7 +3899,7 @@ ix86_expand_sse_movcc (rtx dest, rtx cmp, rtx op_true, rtx op_false)\n \t{\n \t  op_true = force_reg (mode, op_true);\n \n-\t  gen = gen_mmx_pblendvb64;\n+\t  gen = gen_mmx_pblendvb_v8qi;\n \t  if (mode != V8QImode)\n \t    d = gen_reg_rtx (V8QImode);\n \t  op_false = gen_lowpart (V8QImode, op_false);\n@@ -3913,14 +3913,22 @@ ix86_expand_sse_movcc (rtx dest, rtx cmp, rtx op_true, rtx op_false)\n \t{\n \t  op_true = force_reg (mode, op_true);\n \n-\t  gen = gen_mmx_pblendvb32;\n+\t  gen = gen_mmx_pblendvb_v4qi;\n \t  if (mode != V4QImode)\n \t    d = gen_reg_rtx (V4QImode);\n \t  op_false = gen_lowpart (V4QImode, op_false);\n \t  op_true = gen_lowpart (V4QImode, op_true);\n \t  cmp = gen_lowpart (V4QImode, cmp);\n \t}\n       break;\n+    case E_V2QImode:\n+      if (TARGET_SSE4_1)\n+\t{\n+\t  op_true = force_reg (mode, op_true);\n+\n+\t  gen = gen_mmx_pblendvb_v2qi;\n+\t}\n+      break;\n     case E_V16QImode:\n     case E_V8HImode:\n     case E_V8HFmode:\n@@ -18462,9 +18470,9 @@ expand_vec_perm_blend (struct expand_vec_perm_d *d)\n \t    vperm = force_reg (vmode, vperm);\n \n \t    if (GET_MODE_SIZE (vmode) == 4)\n-\t      emit_insn (gen_mmx_pblendvb32 (target, op0, op1, vperm));\n+\t      emit_insn (gen_mmx_pblendvb_v4qi (target, op0, op1, vperm));\n \t    else if (GET_MODE_SIZE (vmode) == 8)\n-\t      emit_insn (gen_mmx_pblendvb64 (target, op0, op1, vperm));\n+\t      emit_insn (gen_mmx_pblendvb_v8qi (target, op0, op1, vperm));\n \t    else if (GET_MODE_SIZE (vmode) == 16)\n \t      emit_insn (gen_sse4_1_pblendvb (target, op0, op1, vperm));\n \t    else"}, {"sha": "fa67278e003d8bca69def67b7b36d58cd2854a32", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/820ac79e8448ad6c631e1387ba51a93dcf2b4e89/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/820ac79e8448ad6c631e1387ba51a93dcf2b4e89/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=820ac79e8448ad6c631e1387ba51a93dcf2b4e89", "patch": "@@ -2580,14 +2580,14 @@\n })\n \n (define_expand \"vcond<mode><mode>\"\n-  [(set (match_operand:VI_32 0 \"register_operand\")\n-\t(if_then_else:VI_32\n+  [(set (match_operand:VI_16_32 0 \"register_operand\")\n+\t(if_then_else:VI_16_32\n \t  (match_operator 3 \"\"\n-\t    [(match_operand:VI_32 4 \"register_operand\")\n-\t     (match_operand:VI_32 5 \"register_operand\")])\n-\t  (match_operand:VI_32 1)\n-\t  (match_operand:VI_32 2)))]\n-  \"TARGET_SSE2\"\n+\t    [(match_operand:VI_16_32 4 \"register_operand\")\n+\t     (match_operand:VI_16_32 5 \"register_operand\")])\n+\t  (match_operand:VI_16_32 1)\n+\t  (match_operand:VI_16_32 2)))]\n+  \"TARGET_SSE4_1\"\n {\n   bool ok = ix86_expand_int_vcond (operands);\n   gcc_assert (ok);\n@@ -2612,14 +2612,14 @@\n })\n \n (define_expand \"vcondu<mode><mode>\"\n-  [(set (match_operand:VI_32 0 \"register_operand\")\n-\t(if_then_else:VI_32\n+  [(set (match_operand:VI_16_32 0 \"register_operand\")\n+\t(if_then_else:VI_16_32\n \t  (match_operator 3 \"\"\n-\t    [(match_operand:VI_32 4 \"register_operand\")\n-\t     (match_operand:VI_32 5 \"register_operand\")])\n-\t  (match_operand:VI_32 1)\n-\t  (match_operand:VI_32 2)))]\n-  \"TARGET_SSE2\"\n+\t    [(match_operand:VI_16_32 4 \"register_operand\")\n+\t     (match_operand:VI_16_32 5 \"register_operand\")])\n+\t  (match_operand:VI_16_32 1)\n+\t  (match_operand:VI_16_32 2)))]\n+  \"TARGET_SSE4_1\"\n {\n   bool ok = ix86_expand_int_vcond (operands);\n   gcc_assert (ok);\n@@ -2640,19 +2640,19 @@\n })\n \n (define_expand \"vcond_mask_<mode><mode>\"\n-  [(set (match_operand:VI_32 0 \"register_operand\")\n-\t(vec_merge:VI_32\n-\t  (match_operand:VI_32 1 \"register_operand\")\n-\t  (match_operand:VI_32 2 \"register_operand\")\n-\t  (match_operand:VI_32 3 \"register_operand\")))]\n-  \"TARGET_SSE2\"\n+  [(set (match_operand:VI_16_32 0 \"register_operand\")\n+\t(vec_merge:VI_16_32\n+\t  (match_operand:VI_16_32 1 \"register_operand\")\n+\t  (match_operand:VI_16_32 2 \"register_operand\")\n+\t  (match_operand:VI_16_32 3 \"register_operand\")))]\n+  \"TARGET_SSE4_1\"\n {\n   ix86_expand_sse_movcc (operands[0], operands[3],\n \t\t\t operands[1], operands[2]);\n   DONE;\n })\n \n-(define_insn \"mmx_pblendvb64\"\n+(define_insn \"mmx_pblendvb_v8qi\"\n   [(set (match_operand:V8QI 0 \"register_operand\" \"=Yr,*x,x\")\n \t(unspec:V8QI\n \t  [(match_operand:V8QI 1 \"register_operand\" \"0,0,x\")\n@@ -2672,12 +2672,12 @@\n    (set_attr \"btver2_decode\" \"vector\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"mmx_pblendvb32\"\n-  [(set (match_operand:V4QI 0 \"register_operand\" \"=Yr,*x,x\")\n-\t(unspec:V4QI\n-\t  [(match_operand:V4QI 1 \"register_operand\" \"0,0,x\")\n-\t   (match_operand:V4QI 2 \"register_operand\" \"Yr,*x,x\")\n-\t   (match_operand:V4QI 3 \"register_operand\" \"Yz,Yz,x\")]\n+(define_insn \"mmx_pblendvb_<mode>\"\n+  [(set (match_operand:VI_16_32 0 \"register_operand\" \"=Yr,*x,x\")\n+\t(unspec:VI_16_32\n+\t  [(match_operand:VI_16_32 1 \"register_operand\" \"0,0,x\")\n+\t   (match_operand:VI_16_32 2 \"register_operand\" \"Yr,*x,x\")\n+\t   (match_operand:VI_16_32 3 \"register_operand\" \"Yz,Yz,x\")]\n \t  UNSPEC_BLENDV))]\n   \"TARGET_SSE4_1\"\n   \"@"}, {"sha": "d602ac08b4d7dcfa5157b60cb5000fd49d2ae540", "filename": "gcc/testsuite/g++.target/i386/pr100637-1b.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/820ac79e8448ad6c631e1387ba51a93dcf2b4e89/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr100637-1b.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/820ac79e8448ad6c631e1387ba51a93dcf2b4e89/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr100637-1b.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr100637-1b.C?ref=820ac79e8448ad6c631e1387ba51a93dcf2b4e89", "patch": "@@ -1,6 +1,6 @@\n /* PR target/100637 */\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -msse2\" } */\n+/* { dg-options \"-O2 -msse4\" } */\n \n typedef unsigned char __attribute__((__vector_size__ (4))) __v4qu;\n typedef char __attribute__((__vector_size__ (4))) __v4qi;"}, {"sha": "c60564548978b293c423b80fbcddd11bf2e74c11", "filename": "gcc/testsuite/g++.target/i386/pr100637-1w.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/820ac79e8448ad6c631e1387ba51a93dcf2b4e89/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr100637-1w.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/820ac79e8448ad6c631e1387ba51a93dcf2b4e89/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr100637-1w.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr100637-1w.C?ref=820ac79e8448ad6c631e1387ba51a93dcf2b4e89", "patch": "@@ -1,6 +1,6 @@\n /* PR target/100637 */\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -msse2\" } */\n+/* { dg-options \"-O2 -msse4\" } */\n \n typedef unsigned short __attribute__((__vector_size__ (4))) __v2hu;\n typedef short __attribute__((__vector_size__ (4))) __v2hi;"}, {"sha": "940c939e04fc2bef0c515a45c5adaab5c65f39f1", "filename": "gcc/testsuite/g++.target/i386/pr103861-1.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/820ac79e8448ad6c631e1387ba51a93dcf2b4e89/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103861-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/820ac79e8448ad6c631e1387ba51a93dcf2b4e89/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103861-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103861-1.C?ref=820ac79e8448ad6c631e1387ba51a93dcf2b4e89", "patch": "@@ -0,0 +1,17 @@\n+/* PR target/103861 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse4\" } */\n+\n+typedef unsigned char __attribute__((__vector_size__ (2))) __v2qu;\n+typedef char __attribute__((__vector_size__ (2))) __v2qi;\n+\n+__v2qu au, bu;\n+__v2qi as, bs;\n+\n+__v2qu uu (__v2qu a, __v2qu b) { return (a > b) ? au : bu; }\n+__v2qu us (__v2qi a, __v2qi b) { return (a > b) ? au : bu; }\n+__v2qi su (__v2qu a, __v2qu b) { return (a > b) ? as : bs; }\n+__v2qi ss (__v2qi a, __v2qi b) { return (a > b) ? as : bs; }\n+\n+/* { dg-final { scan-assembler-times \"pcmpeqb\" 2 } } */\n+/* { dg-final { scan-assembler-times \"pcmpgtb\" 2 } } */"}, {"sha": "add4506e4c1f0766653efd1c42b5ea0385cd301c", "filename": "gcc/testsuite/gcc.target/i386/pr100637-4b.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/820ac79e8448ad6c631e1387ba51a93dcf2b4e89/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100637-4b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/820ac79e8448ad6c631e1387ba51a93dcf2b4e89/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100637-4b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100637-4b.c?ref=820ac79e8448ad6c631e1387ba51a93dcf2b4e89", "patch": "@@ -1,6 +1,6 @@\n /* PR target/100637 */\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -ftree-vectorize -msse2\" } */\n+/* { dg-options \"-O2 -ftree-vectorize -msse4\" } */\n \n typedef char T;\n "}, {"sha": "54c1859b0279a7317c9ab7ae3e712acbc3b56821", "filename": "gcc/testsuite/gcc.target/i386/pr103861-4.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/820ac79e8448ad6c631e1387ba51a93dcf2b4e89/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103861-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/820ac79e8448ad6c631e1387ba51a93dcf2b4e89/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103861-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103861-4.c?ref=820ac79e8448ad6c631e1387ba51a93dcf2b4e89", "patch": "@@ -0,0 +1,19 @@\n+/* PR target/100637 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -msse4\" } */\n+\n+typedef char T;\n+\n+#define M 2\n+\n+extern T a[M], b[M], s1[M], s2[M], r[M];\n+\n+void foo (void)\n+{\n+  int j;\n+\n+  for (j = 0; j < M; j++)\n+    r[j] = (a[j] < b[j]) ? s1[j] : s2[j];\n+}\n+\n+/* { dg-final { scan-assembler \"pcmpgtb\" { xfail *-*-* } } } */"}]}