{"sha": "04373f9288435fa2980dda99ad988fa5ce99331a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQzNzNmOTI4ODQzNWZhMjk4MGRkYTk5YWQ5ODhmYTVjZTk5MzMxYQ==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2019-11-04T22:57:51Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2019-11-04T22:57:51Z"}, "message": "Do not special case pointers in value_range_base::set.\n\nFrom-SVN: r277799", "tree": {"sha": "a7c533a9ffa2837a5f645618a09da4ef6920be25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7c533a9ffa2837a5f645618a09da4ef6920be25"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04373f9288435fa2980dda99ad988fa5ce99331a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04373f9288435fa2980dda99ad988fa5ce99331a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04373f9288435fa2980dda99ad988fa5ce99331a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04373f9288435fa2980dda99ad988fa5ce99331a/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1dee89967b74196012a4b177fed0ccce3a520706", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dee89967b74196012a4b177fed0ccce3a520706", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1dee89967b74196012a4b177fed0ccce3a520706"}], "stats": {"total": 15, "additions": 7, "deletions": 8}, "files": [{"sha": "254b3950a8e0b27320f2f84ead5ad624c498baee", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04373f9288435fa2980dda99ad988fa5ce99331a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04373f9288435fa2980dda99ad988fa5ce99331a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=04373f9288435fa2980dda99ad988fa5ce99331a", "patch": "@@ -1,3 +1,7 @@\n+2019-11-04  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* tree-vrp.c (value_range_base::set): Do not special case pointers.\n+\n 2019-11-04  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* config/gcn/gcn.c (gcn_omp_device_kind_arch_isa): New function."}, {"sha": "452895bfc2481c31654460a57886f2a69dae4f5d", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04373f9288435fa2980dda99ad988fa5ce99331a/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04373f9288435fa2980dda99ad988fa5ce99331a/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=04373f9288435fa2980dda99ad988fa5ce99331a", "patch": "@@ -793,10 +793,8 @@ value_range_base::set (enum value_range_kind kind, tree min, tree max)\n     {\n       /* For -fstrict-enums we may receive out-of-range ranges so consider\n          values < -INF and values > INF as -INF/INF as well.  */\n-      bool is_min = (INTEGRAL_TYPE_P (type)\n-\t\t     && tree_int_cst_compare (min, TYPE_MIN_VALUE (type)) <= 0);\n-      bool is_max = (INTEGRAL_TYPE_P (type)\n-\t\t     && tree_int_cst_compare (max, TYPE_MAX_VALUE (type)) >= 0);\n+      bool is_min = vrp_val_is_min (min);\n+      bool is_max = vrp_val_is_max (max);\n \n       if (is_min && is_max)\n \t{\n@@ -816,10 +814,7 @@ value_range_base::set (enum value_range_kind kind, tree min, tree max)\n \t    min = max = vrp_val_min (TREE_TYPE (min));\n \t  kind = VR_RANGE;\n \t}\n-      else if (is_min\n-\t       /* Allow non-zero pointers to be normalized to [1,MAX].  */\n-\t       || (POINTER_TYPE_P (TREE_TYPE (min))\n-\t\t   && integer_zerop (min)))\n+      else if (is_min)\n         {\n \t  tree one = build_int_cst (TREE_TYPE (max), 1);\n \t  min = int_const_binop (PLUS_EXPR, max, one);"}]}