{"sha": "931f434a72bdc01b58dfc88264e36abd86b19c3d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTMxZjQzNGE3MmJkYzAxYjU4ZGZjODgyNjRlMzZhYmQ4NmIxOWMzZA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2016-02-10T18:30:27Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2016-02-10T18:30:27Z"}, "message": "re PR go/66904 (cmd/go: \"#cgo pkg-config:\" comments do not work with gccgo)\n\n\tPR go/66904\n    cmd/go: fix \"#cgo pkg-config:\" comments with gccgo\n    \n    Copy of https://golang.org/cl/18790 by Michael Hudson-Doyle.\n    \n    The unique difficulty of #cgo pkg-config is that the linker flags are recorded\n    when the package is compiled but (obviously) must be used when the package is\n    linked into an executable -- so the flags need to be stored on disk somewhere.\n    As it happens cgo already writes out a _cgo_flags file: nothing uses it\n    currently, but this change adds it to the lib$pkg.a file when compiling a\n    package, reads it out when linking (and passes a version of the .a file with\n    _cgo_flags stripped out of it to the linker). It's all fairly ugly but it works\n    and I can't really think of any way of reducing the essential level of\n    ugliness.\n    \n    Update golang/go#11739.\n    GCC PR 66904.\n\n    Reviewed-on: https://go-review.googlesource.com/19431\n\nFrom-SVN: r233290", "tree": {"sha": "386d8d63867ca51e9229c2f90dff88b83421574f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/386d8d63867ca51e9229c2f90dff88b83421574f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/931f434a72bdc01b58dfc88264e36abd86b19c3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/931f434a72bdc01b58dfc88264e36abd86b19c3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/931f434a72bdc01b58dfc88264e36abd86b19c3d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/931f434a72bdc01b58dfc88264e36abd86b19c3d/comments", "author": null, "committer": null, "parents": [{"sha": "e03dd76578bb5e8b6d5ba2a2628d349bd5c822bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e03dd76578bb5e8b6d5ba2a2628d349bd5c822bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e03dd76578bb5e8b6d5ba2a2628d349bd5c822bf"}], "stats": {"total": 84, "additions": 80, "deletions": 4}, "files": [{"sha": "fee516838cb21676b11632dfb65dddba3af29d63", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/931f434a72bdc01b58dfc88264e36abd86b19c3d/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/931f434a72bdc01b58dfc88264e36abd86b19c3d/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=931f434a72bdc01b58dfc88264e36abd86b19c3d", "patch": "@@ -1,4 +1,4 @@\n-4cec4c5db5b054c5536ec5c50ee7aebec83563bc\n+28a9dfbc3cda0bf7fd4f3fb1506c547f6cdf41a5\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "1b9a3e714d78c6477846cedaef338c0f623bfd5d", "filename": "libgo/go/cmd/go/build.go", "status": "modified", "additions": 79, "deletions": 3, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/931f434a72bdc01b58dfc88264e36abd86b19c3d/libgo%2Fgo%2Fcmd%2Fgo%2Fbuild.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/931f434a72bdc01b58dfc88264e36abd86b19c3d/libgo%2Fgo%2Fcmd%2Fgo%2Fbuild.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Fbuild.go?ref=931f434a72bdc01b58dfc88264e36abd86b19c3d", "patch": "@@ -1445,6 +1445,9 @@ func (b *builder) build(a *action) (err error) {\n \t\tif err != nil {\n \t\t\treturn err\n \t\t}\n+\t\tif _, ok := buildToolchain.(gccgoToolchain); ok {\n+\t\t\tcgoObjects = append(cgoObjects, filepath.Join(a.objdir, \"_cgo_flags\"))\n+\t\t}\n \t\tcgoObjects = append(cgoObjects, outObj...)\n \t\tgofiles = append(gofiles, outGo...)\n \t}\n@@ -2620,12 +2623,64 @@ func (tools gccgoToolchain) ld(b *builder, root *action, out string, allactions\n \tcxx := len(root.p.CXXFiles) > 0 || len(root.p.SwigCXXFiles) > 0\n \tobjc := len(root.p.MFiles) > 0\n \n+\treadCgoFlags := func(flagsFile string) error {\n+\t\tflags, err := ioutil.ReadFile(flagsFile)\n+\t\tif err != nil {\n+\t\t\treturn err\n+\t\t}\n+\t\tfor _, line := range strings.Split(string(flags), \"\\n\") {\n+\t\t\tif strings.HasPrefix(line, \"_CGO_LDFLAGS=\") {\n+\t\t\t\tcgoldflags = append(cgoldflags, strings.Fields(line[13:])...)\n+\t\t\t}\n+\t\t}\n+\t\treturn nil\n+\t}\n+\n+\treadAndRemoveCgoFlags := func(archive string) (string, error) {\n+\t\tnewa, err := ioutil.TempFile(b.work, filepath.Base(archive))\n+\t\tif err != nil {\n+\t\t\treturn \"\", err\n+\t\t}\n+\t\tolda, err := os.Open(archive)\n+\t\tif err != nil {\n+\t\t\treturn \"\", err\n+\t\t}\n+\t\t_, err = io.Copy(newa, olda)\n+\t\tif err != nil {\n+\t\t\treturn \"\", err\n+\t\t}\n+\t\terr = olda.Close()\n+\t\tif err != nil {\n+\t\t\treturn \"\", err\n+\t\t}\n+\t\terr = newa.Close()\n+\t\tif err != nil {\n+\t\t\treturn \"\", err\n+\t\t}\n+\n+\t\tnewarchive := newa.Name()\n+\t\terr = b.run(b.work, root.p.ImportPath, nil, \"ar\", \"x\", newarchive, \"_cgo_flags\")\n+\t\tif err != nil {\n+\t\t\treturn \"\", err\n+\t\t}\n+\t\terr = b.run(\".\", root.p.ImportPath, nil, \"ar\", \"d\", newarchive, \"_cgo_flags\")\n+\t\tif err != nil {\n+\t\t\treturn \"\", err\n+\t\t}\n+\t\terr = readCgoFlags(filepath.Join(b.work, \"_cgo_flags\"))\n+\t\tif err != nil {\n+\t\t\treturn \"\", err\n+\t\t}\n+\t\treturn newarchive, nil\n+\t}\n+\n \tactionsSeen := make(map[*action]bool)\n \t// Make a pre-order depth-first traversal of the action graph, taking note of\n \t// whether a shared library action has been seen on the way to an action (the\n \t// construction of the graph means that if any path to a node passes through\n \t// a shared library action, they all do).\n \tvar walk func(a *action, seenShlib bool)\n+\tvar err error\n \twalk = func(a *action, seenShlib bool) {\n \t\tif actionsSeen[a] {\n \t\t\treturn\n@@ -2644,16 +2699,23 @@ func (tools gccgoToolchain) ld(b *builder, root *action, out string, allactions\n \t\t\t// doesn't work.\n \t\t\tif !apackagesSeen[a.p] {\n \t\t\t\tapackagesSeen[a.p] = true\n+\t\t\t\ttarget := a.target\n+\t\t\t\tif len(a.p.CgoFiles) > 0 {\n+\t\t\t\t\ttarget, err = readAndRemoveCgoFlags(target)\n+\t\t\t\t\tif err != nil {\n+\t\t\t\t\t\treturn\n+\t\t\t\t\t}\n+\t\t\t\t}\n \t\t\t\tif a.p.fake && a.p.external {\n \t\t\t\t\t// external _tests, if present must come before\n \t\t\t\t\t// internal _tests. Store these on a separate list\n \t\t\t\t\t// and place them at the head after this loop.\n-\t\t\t\t\txfiles = append(xfiles, a.target)\n+\t\t\t\t\txfiles = append(xfiles, target)\n \t\t\t\t} else if a.p.fake {\n \t\t\t\t\t// move _test files to the top of the link order\n-\t\t\t\t\tafiles = append([]string{a.target}, afiles...)\n+\t\t\t\t\tafiles = append([]string{target}, afiles...)\n \t\t\t\t} else {\n-\t\t\t\t\tafiles = append(afiles, a.target)\n+\t\t\t\t\tafiles = append(afiles, target)\n \t\t\t\t}\n \t\t\t}\n \t\t}\n@@ -2663,10 +2725,16 @@ func (tools gccgoToolchain) ld(b *builder, root *action, out string, allactions\n \t\t}\n \t\tfor _, a1 := range a.deps {\n \t\t\twalk(a1, seenShlib)\n+\t\t\tif err != nil {\n+\t\t\t\treturn\n+\t\t\t}\n \t\t}\n \t}\n \tfor _, a1 := range root.deps {\n \t\twalk(a1, false)\n+\t\tif err != nil {\n+\t\t\treturn err\n+\t\t}\n \t}\n \tafiles = append(xfiles, afiles...)\n \n@@ -2695,6 +2763,14 @@ func (tools gccgoToolchain) ld(b *builder, root *action, out string, allactions\n \t\t}\n \t}\n \n+\tfor i, o := range ofiles {\n+\t\tif filepath.Base(o) == \"_cgo_flags\" {\n+\t\t\treadCgoFlags(o)\n+\t\t\tofiles = append(ofiles[:i], ofiles[i+1:]...)\n+\t\t\tbreak\n+\t\t}\n+\t}\n+\n \tldflags = append(ldflags, \"-Wl,--whole-archive\")\n \tldflags = append(ldflags, afiles...)\n \tldflags = append(ldflags, \"-Wl,--no-whole-archive\")"}]}