{"sha": "a14598bf86f6950012e3d68cff14fcceec566ef7", "node_id": "C_kwDOANBUbNoAKGExNDU5OGJmODZmNjk1MDAxMmUzZDY4Y2ZmMTRmY2NlZWM1NjZlZjc", "commit": {"author": {"name": "Haochen Jiang", "email": "haochen.jiang@intel.com", "date": "2022-11-08T02:58:36Z"}, "committer": {"name": "Haochen Jiang", "email": "haochen.jiang@intel.com", "date": "2022-11-08T02:59:48Z"}, "message": "Add m_CORE_ATOM for atom cores\n\ngcc/ChangeLog:\n\n\t* config/i386/i386-options.cc (m_CORE_ATOM): New.\n\t* config/i386/x86-tune.def\n\t(X86_TUNE_SCHEDULE): Initial tune for CORE_ATOM.\n\t(X86_TUNE_PARTIAL_REG_DEPENDENCY): Ditto.\n\t(X86_TUNE_SSE_PARTIAL_REG_DEPENDENCY): Ditto.\n\t(X86_TUNE_SSE_PARTIAL_REG_FP_CONVERTS_DEPENDENCY): Ditto.\n\t(X86_TUNE_SSE_PARTIAL_REG_CONVERTS_DEPENDENCY): Ditto.\n\t(X86_TUNE_DEST_FALSE_DEP_FOR_GLC): Ditto.\n\t(X86_TUNE_MEMORY_MISMATCH_STALL): Ditto.\n\t(X86_TUNE_USE_LEAVE): Ditto.\n\t(X86_TUNE_PUSH_MEMORY): Ditto.\n\t(X86_TUNE_USE_INCDEC): Ditto.\n\t(X86_TUNE_INTEGER_DFMODE_MOVES): Ditto.\n\t(X86_TUNE_PREFER_KNOWN_REP_MOVSB_STOSB): Ditto.\n\t(X86_TUNE_MISALIGNED_MOVE_STRING_PRO_EPILOGUES): Ditto.\n\t(X86_TUNE_USE_SAHF): Ditto.\n\t(X86_TUNE_USE_BT): Ditto.\n\t(X86_TUNE_AVOID_FALSE_DEP_FOR_BMI): Ditto.\n\t(X86_TUNE_ONE_IF_CONV_INSN): Ditto.\n\t(X86_TUNE_AVOID_MFENCE): Ditto.\n\t(X86_TUNE_USE_SIMODE_FIOP): Ditto.\n\t(X86_TUNE_EXT_80387_CONSTANTS): Ditto.\n\t(X86_TUNE_SSE_UNALIGNED_LOAD_OPTIMAL): Ditto.\n\t(X86_TUNE_SSE_UNALIGNED_STORE_OPTIMAL): Ditto.\n\t(X86_TUNE_SSE_TYPELESS_STORES): Ditto.\n\t(X86_TUNE_SSE_LOAD0_BY_PXOR): Ditto.\n\t(X86_TUNE_AVOID_4BYTE_PREFIXES): Ditto.\n\t(X86_TUNE_USE_GATHER_2PARTS): Ditto.\n\t(X86_TUNE_USE_GATHER_4PARTS): Ditto.\n\t(X86_TUNE_USE_GATHER): Ditto.", "tree": {"sha": "79538988c5affa122199255e2990ff237fac0d07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79538988c5affa122199255e2990ff237fac0d07"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a14598bf86f6950012e3d68cff14fcceec566ef7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a14598bf86f6950012e3d68cff14fcceec566ef7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a14598bf86f6950012e3d68cff14fcceec566ef7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a14598bf86f6950012e3d68cff14fcceec566ef7/comments", "author": {"login": "jianghc724", "id": 10798680, "node_id": "MDQ6VXNlcjEwNzk4Njgw", "avatar_url": "https://avatars.githubusercontent.com/u/10798680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jianghc724", "html_url": "https://github.com/jianghc724", "followers_url": "https://api.github.com/users/jianghc724/followers", "following_url": "https://api.github.com/users/jianghc724/following{/other_user}", "gists_url": "https://api.github.com/users/jianghc724/gists{/gist_id}", "starred_url": "https://api.github.com/users/jianghc724/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jianghc724/subscriptions", "organizations_url": "https://api.github.com/users/jianghc724/orgs", "repos_url": "https://api.github.com/users/jianghc724/repos", "events_url": "https://api.github.com/users/jianghc724/events{/privacy}", "received_events_url": "https://api.github.com/users/jianghc724/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jianghc724", "id": 10798680, "node_id": "MDQ6VXNlcjEwNzk4Njgw", "avatar_url": "https://avatars.githubusercontent.com/u/10798680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jianghc724", "html_url": "https://github.com/jianghc724", "followers_url": "https://api.github.com/users/jianghc724/followers", "following_url": "https://api.github.com/users/jianghc724/following{/other_user}", "gists_url": "https://api.github.com/users/jianghc724/gists{/gist_id}", "starred_url": "https://api.github.com/users/jianghc724/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jianghc724/subscriptions", "organizations_url": "https://api.github.com/users/jianghc724/orgs", "repos_url": "https://api.github.com/users/jianghc724/repos", "events_url": "https://api.github.com/users/jianghc724/events{/privacy}", "received_events_url": "https://api.github.com/users/jianghc724/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d2d04cda493fb55ff47b042010943ce2e04cab2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d2d04cda493fb55ff47b042010943ce2e04cab2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d2d04cda493fb55ff47b042010943ce2e04cab2"}], "stats": {"total": 72, "additions": 41, "deletions": 31}, "files": [{"sha": "e5c77f3a84d65c0fbcff8530a5e94b2fbf8cb1f7", "filename": "gcc/config/i386/i386-options.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a14598bf86f6950012e3d68cff14fcceec566ef7/gcc%2Fconfig%2Fi386%2Fi386-options.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a14598bf86f6950012e3d68cff14fcceec566ef7/gcc%2Fconfig%2Fi386%2Fi386-options.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-options.cc?ref=a14598bf86f6950012e3d68cff14fcceec566ef7", "patch": "@@ -139,6 +139,7 @@ along with GCC; see the file COPYING3.  If not see\n #define m_TREMONT (HOST_WIDE_INT_1U<<PROCESSOR_TREMONT)\n #define m_SIERRAFOREST (HOST_WIDE_INT_1U<<PROCESSOR_SIERRAFOREST)\n #define m_GRANDRIDGE (HOST_WIDE_INT_1U<<PROCESSOR_GRANDRIDGE)\n+#define m_CORE_ATOM (m_SIERRAFOREST | m_GRANDRIDGE)\n #define m_INTEL (HOST_WIDE_INT_1U<<PROCESSOR_INTEL)\n \n #define m_LUJIAZUI (HOST_WIDE_INT_1U<<PROCESSOR_LUJIAZUI)"}, {"sha": "58e29e7806a55929efbe92b67c8174eeb24f1911", "filename": "gcc/config/i386/x86-tune.def", "status": "modified", "additions": 40, "deletions": 31, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a14598bf86f6950012e3d68cff14fcceec566ef7/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a14598bf86f6950012e3d68cff14fcceec566ef7/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune.def?ref=a14598bf86f6950012e3d68cff14fcceec566ef7", "patch": "@@ -42,7 +42,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n DEF_TUNE (X86_TUNE_SCHEDULE, \"schedule\",\n           m_PENT | m_LAKEMONT | m_PPRO | m_CORE_ALL | m_BONNELL | m_SILVERMONT\n \t  | m_INTEL | m_KNL | m_KNM | m_K6_GEODE | m_AMD_MULTIPLE | m_LUJIAZUI\n-     | m_GOLDMONT | m_GOLDMONT_PLUS | m_TREMONT | m_ALDERLAKE | m_GENERIC)\n+\t  | m_GOLDMONT | m_GOLDMONT_PLUS | m_TREMONT | m_ALDERLAKE | m_CORE_ATOM\n+\t  | m_GENERIC)\n \n /* X86_TUNE_PARTIAL_REG_DEPENDENCY: Enable more register renaming\n    on modern chips.  Prefer stores affecting whole integer register\n@@ -52,7 +53,7 @@ DEF_TUNE (X86_TUNE_PARTIAL_REG_DEPENDENCY, \"partial_reg_dependency\",\n           m_P4_NOCONA | m_CORE2 | m_NEHALEM  | m_SANDYBRIDGE | m_CORE_AVX2\n \t  | m_BONNELL | m_SILVERMONT | m_GOLDMONT | m_GOLDMONT_PLUS | m_INTEL\n \t  | m_KNL | m_KNM | m_AMD_MULTIPLE | m_LUJIAZUI | m_TREMONT\n-\t  | m_ALDERLAKE | m_GENERIC)\n+\t  | m_ALDERLAKE | m_CORE_ATOM | m_GENERIC)\n \n /* X86_TUNE_SSE_PARTIAL_REG_DEPENDENCY: This knob promotes all store\n    destinations to be 128bit to allow register renaming on 128bit SSE units,\n@@ -63,28 +64,31 @@ DEF_TUNE (X86_TUNE_PARTIAL_REG_DEPENDENCY, \"partial_reg_dependency\",\n DEF_TUNE (X86_TUNE_SSE_PARTIAL_REG_DEPENDENCY, \"sse_partial_reg_dependency\",\n           m_PPRO | m_P4_NOCONA | m_CORE_ALL | m_BONNELL | m_AMDFAM10\n \t  | m_BDVER | m_ZNVER | m_LUJIAZUI | m_TREMONT | m_ALDERLAKE\n-\t  | m_GENERIC)\n+\t  | m_CORE_ATOM | m_GENERIC)\n \n /* X86_TUNE_SSE_PARTIAL_REG_FP_CONVERTS_DEPENDENCY: This knob avoids\n    partial write to the destination in scalar SSE conversion from FP\n    to FP.  */\n DEF_TUNE (X86_TUNE_SSE_PARTIAL_REG_FP_CONVERTS_DEPENDENCY,\n \t  \"sse_partial_reg_fp_converts_dependency\",\n \t  m_PPRO | m_P4_NOCONA | m_CORE_ALL | m_BONNELL | m_AMDFAM10\n-\t  | m_BDVER | m_ZNVER | m_LUJIAZUI | m_ALDERLAKE | m_GENERIC)\n+\t  | m_BDVER | m_ZNVER | m_LUJIAZUI | m_ALDERLAKE | m_CORE_ATOM\n+\t  | m_GENERIC)\n \n /* X86_TUNE_SSE_PARTIAL_REG_CONVERTS_DEPENDENCY: This knob avoids partial\n    write to the destination in scalar SSE conversion from integer to FP.  */\n DEF_TUNE (X86_TUNE_SSE_PARTIAL_REG_CONVERTS_DEPENDENCY,\n \t  \"sse_partial_reg_converts_dependency\",\n \t  m_PPRO | m_P4_NOCONA | m_CORE_ALL | m_BONNELL | m_AMDFAM10\n-\t  | m_BDVER | m_ZNVER | m_LUJIAZUI | m_ALDERLAKE | m_GENERIC)\n+\t  | m_BDVER | m_ZNVER | m_LUJIAZUI | m_ALDERLAKE | m_CORE_ATOM\n+\t  | m_GENERIC)\n \n /* X86_TUNE_DEST_FALSE_DEP_FOR_GLC: This knob inserts zero-idiom before\n    several insns to break false dependency on the dest register for GLC\n    micro-architecture.  */\n DEF_TUNE (X86_TUNE_DEST_FALSE_DEP_FOR_GLC,\n-\t  \"dest_false_dep_for_glc\", m_SAPPHIRERAPIDS | m_ALDERLAKE)\n+\t  \"dest_false_dep_for_glc\", m_SAPPHIRERAPIDS | m_ALDERLAKE\n+\t  | m_CORE_ATOM)\n \n /* X86_TUNE_SSE_SPLIT_REGS: Set for machines where the type and dependencies\n    are resolved on SSE register parts instead of whole registers, so we may\n@@ -110,14 +114,14 @@ DEF_TUNE (X86_TUNE_MOVX, \"movx\",\n           m_PPRO | m_P4_NOCONA | m_CORE2 | m_NEHALEM  | m_SANDYBRIDGE\n \t  | m_BONNELL | m_SILVERMONT | m_GOLDMONT | m_KNL | m_KNM | m_INTEL\n \t  | m_GOLDMONT_PLUS | m_GEODE | m_AMD_MULTIPLE | m_LUJIAZUI\n-\t  | m_CORE_AVX2 | m_TREMONT | m_ALDERLAKE | m_GENERIC)\n+\t  | m_CORE_AVX2 | m_TREMONT | m_ALDERLAKE | m_CORE_ATOM | m_GENERIC)\n \n /* X86_TUNE_MEMORY_MISMATCH_STALL: Avoid partial stores that are followed by\n    full sized loads.  */\n DEF_TUNE (X86_TUNE_MEMORY_MISMATCH_STALL, \"memory_mismatch_stall\",\n           m_P4_NOCONA | m_CORE_ALL | m_BONNELL | m_SILVERMONT | m_INTEL\n \t  | m_KNL | m_KNM | m_GOLDMONT | m_GOLDMONT_PLUS | m_AMD_MULTIPLE\n-\t  | m_LUJIAZUI | m_TREMONT | m_ALDERLAKE | m_GENERIC)\n+\t  | m_LUJIAZUI | m_TREMONT | m_ALDERLAKE | m_CORE_ATOM | m_GENERIC)\n \n /* X86_TUNE_FUSE_CMP_AND_BRANCH_32: Fuse compare with a subsequent\n    conditional jump instruction for 32 bit TARGET.  */\n@@ -173,14 +177,14 @@ DEF_TUNE (X86_TUNE_EPILOGUE_USING_MOVE, \"epilogue_using_move\",\n /* X86_TUNE_USE_LEAVE: Use \"leave\" instruction in epilogues where it fits.  */\n DEF_TUNE (X86_TUNE_USE_LEAVE, \"use_leave\",\n \t  m_386 | m_CORE_ALL | m_K6_GEODE | m_AMD_MULTIPLE | m_LUJIAZUI\n-\t  | m_TREMONT | m_ALDERLAKE | m_GENERIC)\n+\t  | m_TREMONT | m_ALDERLAKE | m_CORE_ATOM | m_GENERIC)\n \n /* X86_TUNE_PUSH_MEMORY: Enable generation of \"push mem\" instructions.\n    Some chips, like 486 and Pentium works faster with separate load\n    and push instructions.  */\n DEF_TUNE (X86_TUNE_PUSH_MEMORY, \"push_memory\",\n           m_386 | m_P4_NOCONA | m_CORE_ALL | m_K6_GEODE | m_AMD_MULTIPLE\n-\t  | m_LUJIAZUI | m_TREMONT | m_ALDERLAKE | m_GENERIC)\n+\t  | m_LUJIAZUI | m_TREMONT | m_ALDERLAKE | m_CORE_ATOM | m_GENERIC)\n \n /* X86_TUNE_SINGLE_PUSH: Enable if single push insn is preferred\n    over esp subtraction.  */\n@@ -250,15 +254,16 @@ DEF_TUNE (X86_TUNE_READ_MODIFY, \"read_modify\", ~(m_PENT | m_LAKEMONT | m_PPRO))\n DEF_TUNE (X86_TUNE_USE_INCDEC, \"use_incdec\",\n           ~(m_P4_NOCONA | m_CORE2 | m_NEHALEM  | m_SANDYBRIDGE\n \t    | m_BONNELL | m_SILVERMONT | m_INTEL |  m_KNL | m_KNM | m_GOLDMONT\n-\t    | m_GOLDMONT_PLUS | m_TREMONT | m_ALDERLAKE | m_LUJIAZUI\n-\t    | m_GENERIC))\n+\t    | m_GOLDMONT_PLUS | m_TREMONT | m_ALDERLAKE | m_CORE_ATOM\n+\t    | m_LUJIAZUI | m_GENERIC))\n \n /* X86_TUNE_INTEGER_DFMODE_MOVES: Enable if integer moves are preferred\n    for DFmode copies */\n DEF_TUNE (X86_TUNE_INTEGER_DFMODE_MOVES, \"integer_dfmode_moves\",\n           ~(m_PPRO | m_P4_NOCONA | m_CORE_ALL | m_BONNELL | m_SILVERMONT\n \t    | m_KNL | m_KNM | m_INTEL | m_GEODE | m_AMD_MULTIPLE | m_LUJIAZUI\n-\t    | m_GOLDMONT | m_GOLDMONT_PLUS | m_TREMONT | m_ALDERLAKE | m_GENERIC))\n+\t    | m_GOLDMONT | m_GOLDMONT_PLUS | m_TREMONT | m_ALDERLAKE\n+\t    | m_CORE_ATOM | m_GENERIC))\n \n /* X86_TUNE_OPT_AGU: Optimize for Address Generation Unit. This flag\n    will impact LEA instruction selection. */\n@@ -296,7 +301,8 @@ DEF_TUNE (X86_TUNE_SINGLE_STRINGOP, \"single_stringop\", m_386 | m_P4_NOCONA)\n    move/set sequences of bytes with known size.  */\n DEF_TUNE (X86_TUNE_PREFER_KNOWN_REP_MOVSB_STOSB,\n \t  \"prefer_known_rep_movsb_stosb\",\n-\t  m_SKYLAKE | m_ALDERLAKE | m_TREMONT | m_CORE_AVX512 | m_LUJIAZUI)\n+\t  m_SKYLAKE | m_ALDERLAKE | m_CORE_ATOM | m_TREMONT | m_CORE_AVX512\n+\t  | m_LUJIAZUI)\n \n /* X86_TUNE_MISALIGNED_MOVE_STRING_PRO_EPILOGUES: Enable generation of\n    compact prologues and epilogues by issuing a misaligned moves.  This\n@@ -306,14 +312,14 @@ DEF_TUNE (X86_TUNE_PREFER_KNOWN_REP_MOVSB_STOSB,\n DEF_TUNE (X86_TUNE_MISALIGNED_MOVE_STRING_PRO_EPILOGUES,\n \t  \"misaligned_move_string_pro_epilogues\",\n \t  m_386 | m_486 | m_CORE_ALL | m_AMD_MULTIPLE | m_LUJIAZUI | m_TREMONT\n-\t  | m_ALDERLAKE | m_GENERIC)\n+\t  | m_ALDERLAKE | m_CORE_ATOM | m_GENERIC)\n \n /* X86_TUNE_USE_SAHF: Controls use of SAHF.  */\n DEF_TUNE (X86_TUNE_USE_SAHF, \"use_sahf\",\n           m_PPRO | m_P4_NOCONA | m_CORE_ALL | m_BONNELL | m_SILVERMONT\n \t  | m_KNL | m_KNM | m_INTEL | m_K6_GEODE | m_K8 | m_AMDFAM10 | m_BDVER\n \t  | m_BTVER | m_ZNVER | m_LUJIAZUI | m_GOLDMONT | m_GOLDMONT_PLUS\n-\t  | m_TREMONT | m_ALDERLAKE | m_GENERIC)\n+\t  | m_TREMONT | m_ALDERLAKE | m_CORE_ATOM | m_GENERIC)\n \n /* X86_TUNE_USE_CLTD: Controls use of CLTD and CTQO instructions.  */\n DEF_TUNE (X86_TUNE_USE_CLTD, \"use_cltd\",\n@@ -324,13 +330,13 @@ DEF_TUNE (X86_TUNE_USE_CLTD, \"use_cltd\",\n DEF_TUNE (X86_TUNE_USE_BT, \"use_bt\",\n           m_CORE_ALL | m_BONNELL | m_SILVERMONT | m_KNL | m_KNM | m_INTEL\n \t  | m_LAKEMONT | m_AMD_MULTIPLE | m_LUJIAZUI | m_GOLDMONT\n-\t  | m_GOLDMONT_PLUS | m_TREMONT | m_ALDERLAKE | m_GENERIC)\n+\t  | m_GOLDMONT_PLUS | m_TREMONT | m_ALDERLAKE | m_CORE_ATOM | m_GENERIC)\n \n /* X86_TUNE_AVOID_FALSE_DEP_FOR_BMI: Avoid false dependency\n    for bit-manipulation instructions.  */\n DEF_TUNE (X86_TUNE_AVOID_FALSE_DEP_FOR_BMI, \"avoid_false_dep_for_bmi\",\n-\t  m_SANDYBRIDGE | m_CORE_AVX2 | m_TREMONT | m_ALDERLAKE | m_LUJIAZUI\n-     | m_GENERIC)\n+\t  m_SANDYBRIDGE | m_CORE_AVX2 | m_TREMONT | m_ALDERLAKE | m_CORE_ATOM\n+\t  | m_LUJIAZUI | m_GENERIC)\n \n /* X86_TUNE_ADJUST_UNROLL: This enables adjusting the unroll factor based\n    on hardware capabilities. Bdver3 hardware has a loop buffer which makes\n@@ -342,12 +348,13 @@ DEF_TUNE (X86_TUNE_ADJUST_UNROLL, \"adjust_unroll_factor\", m_BDVER3 | m_BDVER4)\n    if-converted sequence to one.  */\n DEF_TUNE (X86_TUNE_ONE_IF_CONV_INSN, \"one_if_conv_insn\",\n \t  m_SILVERMONT | m_KNL | m_KNM | m_INTEL | m_CORE_ALL | m_GOLDMONT\n-\t  | m_GOLDMONT_PLUS | m_TREMONT | m_ALDERLAKE | m_LUJIAZUI | m_GENERIC)\n+\t  | m_GOLDMONT_PLUS | m_TREMONT | m_ALDERLAKE | m_CORE_ATOM | m_LUJIAZUI\n+\t  | m_GENERIC)\n \n /* X86_TUNE_AVOID_MFENCE: Use lock prefixed instructions instead of mfence.  */\n DEF_TUNE (X86_TUNE_AVOID_MFENCE, \"avoid_mfence\",\n \t m_CORE_ALL | m_BDVER | m_ZNVER | m_LUJIAZUI | m_TREMONT | m_ALDERLAKE\n-    | m_GENERIC)\n+\t | m_CORE_ATOM | m_GENERIC)\n \n /* X86_TUNE_EXPAND_ABS: This enables a new abs pattern by\n    generating instructions for abs (x) = (((signed) x >> (W-1) ^ x) -\n@@ -372,7 +379,7 @@ DEF_TUNE (X86_TUNE_USE_SIMODE_FIOP, \"use_simode_fiop\",\n           ~(m_PENT | m_LAKEMONT | m_PPRO | m_CORE_ALL | m_BONNELL\n \t    | m_SILVERMONT | m_KNL | m_KNM | m_INTEL | m_AMD_MULTIPLE\n \t    | m_LUJIAZUI | m_GOLDMONT | m_GOLDMONT_PLUS | m_TREMONT\n-\t    | m_ALDERLAKE | m_GENERIC))\n+\t    | m_ALDERLAKE | m_CORE_ATOM | m_GENERIC))\n \n /* X86_TUNE_USE_FFREEP: Use freep instruction instead of fstp.  */\n DEF_TUNE (X86_TUNE_USE_FFREEP, \"use_ffreep\", m_AMD_MULTIPLE | m_LUJIAZUI)\n@@ -381,7 +388,8 @@ DEF_TUNE (X86_TUNE_USE_FFREEP, \"use_ffreep\", m_AMD_MULTIPLE | m_LUJIAZUI)\n DEF_TUNE (X86_TUNE_EXT_80387_CONSTANTS, \"ext_80387_constants\",\n           m_PPRO | m_P4_NOCONA | m_CORE_ALL | m_BONNELL | m_SILVERMONT\n \t  | m_KNL | m_KNM | m_INTEL | m_K6_GEODE | m_ATHLON_K8 | m_LUJIAZUI\n-\t  | m_GOLDMONT | m_GOLDMONT_PLUS | m_TREMONT | m_ALDERLAKE | m_GENERIC)\n+\t  | m_GOLDMONT | m_GOLDMONT_PLUS | m_TREMONT | m_ALDERLAKE | m_CORE_ATOM\n+\t  | m_GENERIC)\n \n /*****************************************************************************/\n /* SSE instruction selection tuning                                          */\n@@ -397,14 +405,15 @@ DEF_TUNE (X86_TUNE_GENERAL_REGS_SSE_SPILL, \"general_regs_sse_spill\",\n DEF_TUNE (X86_TUNE_SSE_UNALIGNED_LOAD_OPTIMAL, \"sse_unaligned_load_optimal\",\n \t  m_NEHALEM | m_SANDYBRIDGE | m_CORE_AVX2 | m_SILVERMONT | m_KNL | m_KNM\n \t  | m_INTEL | m_GOLDMONT | m_GOLDMONT_PLUS | m_TREMONT | m_ALDERLAKE\n-\t  | m_AMDFAM10 | m_BDVER | m_BTVER | m_ZNVER | m_LUJIAZUI | m_GENERIC)\n+\t  | m_CORE_ATOM | m_AMDFAM10 | m_BDVER | m_BTVER | m_ZNVER | m_LUJIAZUI\n+\t  | m_GENERIC)\n \n /* X86_TUNE_SSE_UNALIGNED_STORE_OPTIMAL: Use movups for misaligned stores\n    instead of a sequence loading registers by parts.  */\n DEF_TUNE (X86_TUNE_SSE_UNALIGNED_STORE_OPTIMAL, \"sse_unaligned_store_optimal\",\n \t  m_NEHALEM | m_SANDYBRIDGE | m_CORE_AVX2 | m_SILVERMONT | m_KNL | m_KNM\n \t  | m_INTEL | m_GOLDMONT | m_GOLDMONT_PLUS | m_TREMONT | m_ALDERLAKE\n-\t  | m_BDVER | m_ZNVER | m_LUJIAZUI | m_GENERIC)\n+\t  | m_CORE_ATOM | m_BDVER | m_ZNVER | m_LUJIAZUI | m_GENERIC)\n \n /* X86_TUNE_SSE_PACKED_SINGLE_INSN_OPTIMAL: Use packed single\n    precision 128bit instructions instead of double where possible.   */\n@@ -414,13 +423,13 @@ DEF_TUNE (X86_TUNE_SSE_PACKED_SINGLE_INSN_OPTIMAL, \"sse_packed_single_insn_optim\n /* X86_TUNE_SSE_TYPELESS_STORES: Always movaps/movups for 128bit stores.   */\n DEF_TUNE (X86_TUNE_SSE_TYPELESS_STORES, \"sse_typeless_stores\",\n \t  m_AMD_MULTIPLE | m_LUJIAZUI | m_CORE_ALL | m_TREMONT | m_ALDERLAKE\n-\t  | m_GENERIC)\n+\t  | m_CORE_ATOM | m_GENERIC)\n \n /* X86_TUNE_SSE_LOAD0_BY_PXOR: Always use pxor to load0 as opposed to\n    xorps/xorpd and other variants.  */\n DEF_TUNE (X86_TUNE_SSE_LOAD0_BY_PXOR, \"sse_load0_by_pxor\",\n \t  m_PPRO | m_P4_NOCONA | m_CORE_ALL | m_BDVER | m_BTVER | m_ZNVER\n-\t  | m_LUJIAZUI | m_TREMONT | m_ALDERLAKE | m_GENERIC)\n+\t  | m_LUJIAZUI | m_TREMONT | m_ALDERLAKE | m_CORE_ATOM | m_GENERIC)\n \n /* X86_TUNE_INTER_UNIT_MOVES_TO_VEC: Enable moves in from integer\n    to SSE registers.  If disabled, the moves will be done by storing\n@@ -467,22 +476,22 @@ DEF_TUNE (X86_TUNE_SLOW_PSHUFB, \"slow_pshufb\",\n /* X86_TUNE_AVOID_4BYTE_PREFIXES: Avoid instructions requiring 4+ bytes of prefixes.  */\n DEF_TUNE (X86_TUNE_AVOID_4BYTE_PREFIXES, \"avoid_4byte_prefixes\",\n \t  m_SILVERMONT | m_GOLDMONT | m_GOLDMONT_PLUS | m_TREMONT | m_ALDERLAKE\n-\t  | m_INTEL)\n+\t  | m_CORE_ATOM | m_INTEL)\n \n /* X86_TUNE_USE_GATHER_2PARTS: Use gather instructions for vectors with 2\n    elements.  */\n DEF_TUNE (X86_TUNE_USE_GATHER_2PARTS, \"use_gather_2parts\",\n-\t  ~(m_ZNVER1 | m_ZNVER2 | m_ZNVER3 | m_ALDERLAKE | m_GENERIC))\n+\t  ~(m_ZNVER1 | m_ZNVER2 | m_ZNVER3 | m_ALDERLAKE | m_CORE_ATOM | m_GENERIC))\n \n /* X86_TUNE_USE_GATHER_4PARTS: Use gather instructions for vectors with 4\n    elements.  */\n DEF_TUNE (X86_TUNE_USE_GATHER_4PARTS, \"use_gather_4parts\",\n-\t  ~(m_ZNVER1 | m_ZNVER2 | m_ZNVER3 | m_ALDERLAKE | m_GENERIC))\n+\t  ~(m_ZNVER1 | m_ZNVER2 | m_ZNVER3 | m_ALDERLAKE | m_CORE_ATOM | m_GENERIC))\n \n /* X86_TUNE_USE_GATHER: Use gather instructions for vectors with 8 or more\n    elements.  */\n DEF_TUNE (X86_TUNE_USE_GATHER, \"use_gather\",\n-\t  ~(m_ZNVER1 | m_ZNVER2 | m_ALDERLAKE | m_GENERIC))\n+\t  ~(m_ZNVER1 | m_ZNVER2 | m_ALDERLAKE | m_CORE_ATOM | m_GENERIC))\n \n /* X86_TUNE_AVOID_128FMA_CHAINS: Avoid creating loops with tight 128bit or\n    smaller FMA chain.  */"}]}