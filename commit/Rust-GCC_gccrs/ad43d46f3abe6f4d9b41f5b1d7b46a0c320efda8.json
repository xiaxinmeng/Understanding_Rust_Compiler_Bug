{"sha": "ad43d46f3abe6f4d9b41f5b1d7b46a0c320efda8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQ0M2Q0NmYzYWJlNmY0ZDliNDFmNWIxZDdiNDZhMGMzMjBlZmRhOA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2001-09-24T22:38:22Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2001-09-24T22:38:22Z"}, "message": "libiberty.h (reconcat): New function.\n\ninclude:\n\t* libiberty.h (reconcat): New function.\n\nlibiberty:\n\t* concat.c (reconcat): New function.\n\ngcc:\n\t* c-aux-info.c (affix_data_type): Use ATTRIBUTE_MALLOC.  Avoid\n\tleak by passing malloc'ed pointer to reconcat, not concat.\n\nFrom-SVN: r45789", "tree": {"sha": "7ec3b888341991cdf8a157f5d87a6dea617363e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ec3b888341991cdf8a157f5d87a6dea617363e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad43d46f3abe6f4d9b41f5b1d7b46a0c320efda8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad43d46f3abe6f4d9b41f5b1d7b46a0c320efda8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad43d46f3abe6f4d9b41f5b1d7b46a0c320efda8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad43d46f3abe6f4d9b41f5b1d7b46a0c320efda8/comments", "author": null, "committer": null, "parents": [{"sha": "b6fc711089add2bbefb23eecea0eccb3423e9960", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6fc711089add2bbefb23eecea0eccb3423e9960", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6fc711089add2bbefb23eecea0eccb3423e9960"}], "stats": {"total": 52, "additions": 50, "deletions": 2}, "files": [{"sha": "66792a3df58340bca7dd8b486bf953dcf2a06414", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad43d46f3abe6f4d9b41f5b1d7b46a0c320efda8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad43d46f3abe6f4d9b41f5b1d7b46a0c320efda8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ad43d46f3abe6f4d9b41f5b1d7b46a0c320efda8", "patch": "@@ -1,3 +1,8 @@\n+2001-09-24  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* c-aux-info.c (affix_data_type): Use ATTRIBUTE_MALLOC.  Avoid\n+\tleak by passing malloc'ed pointer to reconcat, not concat.\n+\n 2001-09-24  DJ Delorie  <dj@redhat.com>\n \n \t* varasm.c (array_size_for_constructor): Handle STRING_CSTs also."}, {"sha": "67ecae6cea174265fc4e0eb0cb9e632b447c7922", "filename": "gcc/c-aux-info.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad43d46f3abe6f4d9b41f5b1d7b46a0c320efda8/gcc%2Fc-aux-info.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad43d46f3abe6f4d9b41f5b1d7b46a0c320efda8/gcc%2Fc-aux-info.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-aux-info.c?ref=ad43d46f3abe6f4d9b41f5b1d7b46a0c320efda8", "patch": "@@ -39,7 +39,7 @@ typedef enum formals_style_enum formals_style;\n \n static const char *data_type;\n \n-static char *affix_data_type\t\tPARAMS ((const char *));\n+static char *affix_data_type\t\tPARAMS ((const char *)) ATTRIBUTE_MALLOC;\n static const char *gen_formal_list_for_type PARAMS ((tree, formals_style));\n static int   deserves_ellipsis\t\tPARAMS ((tree));\n static const char *gen_formal_list_for_func_def PARAMS ((tree, formals_style));\n@@ -96,7 +96,8 @@ affix_data_type (param)\n   *p = '\\0';\n   qualifiers_then_data_type = concat (type_or_decl, data_type, NULL);\n   *p = saved;\n-  return concat (qualifiers_then_data_type, \" \", p, NULL);\n+  return reconcat (qualifiers_then_data_type,\n+\t\t   qualifiers_then_data_type, \" \", p, NULL);\n }\n \n /* Given a tree node which represents some \"function type\", generate the"}, {"sha": "b44671a39d08117481cb2644afa2ff3acb6cc241", "filename": "include/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad43d46f3abe6f4d9b41f5b1d7b46a0c320efda8/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad43d46f3abe6f4d9b41f5b1d7b46a0c320efda8/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=ad43d46f3abe6f4d9b41f5b1d7b46a0c320efda8", "patch": "@@ -1,3 +1,7 @@\n+2001-09-24  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* libiberty.h (reconcat): New function.\n+\n 2001-09-18  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* libiberty.h (concat, concat_length, concat_copy, concat_copy2,"}, {"sha": "315d3106c4b52b19eed34a9773e32ef18241db01", "filename": "include/libiberty.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad43d46f3abe6f4d9b41f5b1d7b46a0c320efda8/include%2Flibiberty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad43d46f3abe6f4d9b41f5b1d7b46a0c320efda8/include%2Flibiberty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Flibiberty.h?ref=ad43d46f3abe6f4d9b41f5b1d7b46a0c320efda8", "patch": "@@ -91,6 +91,15 @@ extern const char *lbasename PARAMS ((const char *));\n \n extern char *concat PARAMS ((const char *, ...)) ATTRIBUTE_MALLOC;\n \n+/* Concatenate an arbitrary number of strings.  You must pass NULL as\n+   the last argument of this function, to terminate the list of\n+   strings.  Allocates memory using xmalloc.  The first argument is\n+   not one of the strings to be concatenated, but if not NULL is a\n+   pointer to be freed after the new string is created, similar to the\n+   way xrealloc works.  */\n+\n+extern char *reconcat PARAMS ((char *, const char *, ...)) ATTRIBUTE_MALLOC;\n+\n /* Determine the length of concatenating an arbitrary number of\n    strings.  You must pass NULL as the last argument of this function,\n    to terminate the list of strings.  */"}, {"sha": "1c641169f3094bad67c870ed00f3acf1ae398527", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad43d46f3abe6f4d9b41f5b1d7b46a0c320efda8/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad43d46f3abe6f4d9b41f5b1d7b46a0c320efda8/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=ad43d46f3abe6f4d9b41f5b1d7b46a0c320efda8", "patch": "@@ -1,3 +1,7 @@\n+2001-09-24  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* concat.c (reconcat): New function.\n+\n 2001-09-17  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* concat.c (vconcat_length, vconcat_copy, concat_length,"}, {"sha": "136e8be866ebee04f7cf2e0536708d332b910778", "filename": "libiberty/concat.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad43d46f3abe6f4d9b41f5b1d7b46a0c320efda8/libiberty%2Fconcat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad43d46f3abe6f4d9b41f5b1d7b46a0c320efda8/libiberty%2Fconcat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconcat.c?ref=ad43d46f3abe6f4d9b41f5b1d7b46a0c320efda8", "patch": "@@ -171,6 +171,31 @@ concat VPARAMS ((const char *first, ...))\n   return newstr;\n }\n \n+char *\n+reconcat VPARAMS ((char *optr, const char *first, ...))\n+{\n+  char *newstr;\n+\n+  /* First compute the size of the result and get sufficient memory.  */\n+  VA_OPEN (args, first);\n+  VA_FIXEDARG (args, char *, optr);\n+  VA_FIXEDARG (args, const char *, first);\n+  newstr = (char *) xmalloc (vconcat_length (first, args) + 1);\n+  VA_CLOSE (args);\n+\n+  /* Now copy the individual pieces to the result string. */\n+  VA_OPEN (args, first);\n+  VA_FIXEDARG (args, char *, optr);\n+  VA_FIXEDARG (args, const char *, first);\n+  vconcat_copy (newstr, first, args);\n+  VA_CLOSE (args);\n+\n+  if (optr)\n+    free (optr);\n+\n+  return newstr;\n+}\n+\n #ifdef MAIN\n #define NULLP (char *)0\n "}]}