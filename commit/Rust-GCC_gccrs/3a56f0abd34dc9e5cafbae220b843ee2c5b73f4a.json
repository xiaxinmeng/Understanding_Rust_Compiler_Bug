{"sha": "3a56f0abd34dc9e5cafbae220b843ee2c5b73f4a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2E1NmYwYWJkMzRkYzllNWNhZmJhZTIyMGI4NDNlZTJjNWI3M2Y0YQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1998-04-17T00:26:13Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-04-17T00:26:13Z"}, "message": "decl.c (duplicate_decls): Fix check for when it's safe to free the new decl.\n\n\t* decl.c (duplicate_decls): Fix check for when it's safe to free\n\tthe new decl.\n\t* pt.c (mangle_class_name_for_template): Don't pass a typedef type\n\tto type_as_string.\n\tFrom Mark Mitchell:\n\t(unify): Use comptypes to compare type args.\n\nFrom-SVN: r19252", "tree": {"sha": "81efd47d1e3126e525d2882ec155781cd81f24d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81efd47d1e3126e525d2882ec155781cd81f24d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a56f0abd34dc9e5cafbae220b843ee2c5b73f4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a56f0abd34dc9e5cafbae220b843ee2c5b73f4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a56f0abd34dc9e5cafbae220b843ee2c5b73f4a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a56f0abd34dc9e5cafbae220b843ee2c5b73f4a/comments", "author": null, "committer": null, "parents": [{"sha": "e009aaf31fe0817ed9935c668817b2b83e141ba4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e009aaf31fe0817ed9935c668817b2b83e141ba4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e009aaf31fe0817ed9935c668817b2b83e141ba4"}], "stats": {"total": 43, "additions": 36, "deletions": 7}, "files": [{"sha": "94e4029c0cafa7c0d7ed68306045dce183c1a6e7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a56f0abd34dc9e5cafbae220b843ee2c5b73f4a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a56f0abd34dc9e5cafbae220b843ee2c5b73f4a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3a56f0abd34dc9e5cafbae220b843ee2c5b73f4a", "patch": "@@ -1,3 +1,13 @@\n+Fri Apr 17 00:24:22 1998  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* decl.c (duplicate_decls): Fix check for when it's safe to free\n+\tthe new decl.\n+\n+\t* pt.c (mangle_class_name_for_template): Don't pass a typedef type\n+\tto type_as_string.\n+\tFrom Mark Mitchell:\n+\t(unify): Use comptypes to compare type args.\n+\n Thu Apr 16 17:47:30 1998  Jeffrey A Law  (law@cygnus.com)\n \n \t* pt.c (build_template_parm_index): Add prototype."}, {"sha": "8f5b90c41accb148d01a4b18439f756a6ea6c89c", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a56f0abd34dc9e5cafbae220b843ee2c5b73f4a/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a56f0abd34dc9e5cafbae220b843ee2c5b73f4a/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=3a56f0abd34dc9e5cafbae220b843ee2c5b73f4a", "patch": "@@ -3088,9 +3088,12 @@ duplicate_decls (newdecl, olddecl)\n \t      TREE_VALUE (decls) = olddecl;\n \t}\n \n-      if ((char *)newdecl + ROUND (function_size)\n-\t  + ROUND (sizeof (struct lang_decl))\n-\t  == obstack_next_free (&permanent_obstack))\n+      if (((char *)newdecl + ROUND (function_size) == (char *)nl\n+\t   && ((char *)newdecl + ROUND (function_size)\n+\t       + ROUND (sizeof (struct lang_decl))\n+\t       == obstack_next_free (&permanent_obstack)))\n+\t  || ((char *)newdecl + ROUND (function_size)\n+\t      == obstack_next_free (&permanent_obstack)))\n \t{\n \t  DECL_MAIN_VARIANT (newdecl) = olddecl;\n \t  DECL_LANG_SPECIFIC (olddecl) = ol;"}, {"sha": "6fce6bb1fea5d1ce06e67516bcc8c2c06a0a895c", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a56f0abd34dc9e5cafbae220b843ee2c5b73f4a/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a56f0abd34dc9e5cafbae220b843ee2c5b73f4a/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=3a56f0abd34dc9e5cafbae220b843ee2c5b73f4a", "patch": "@@ -2546,9 +2546,15 @@ mangle_class_name_for_template (name, parms, arglist, ctx)\n       char* s;\n \n       if (TREE_CODE (ctx) == FUNCTION_DECL)\n-\ts = fndecl_as_string(ctx, 0);\n+\ts = fndecl_as_string (ctx, 0);\n       else if (TREE_CODE_CLASS (TREE_CODE (ctx)) == 't')\n-\ts = type_as_string(ctx, 0);\n+\t{\n+\t  /* We can't use a typedef type name here.  */\n+\t  ctx = build_type_variant (TYPE_MAIN_VARIANT (ctx),\n+\t\t\t\t    TYPE_READONLY (ctx),\n+\t\t\t\t    TYPE_VOLATILE (ctx));\n+\t  s = type_as_string (ctx, 0);\n+\t}\n       else\n \tmy_friendly_abort (0);\n       cat (s);\n@@ -2566,6 +2572,12 @@ mangle_class_name_for_template (name, parms, arglist, ctx)\n       if (i)\n \tccat (',');\n \n+      /* We can't use a typedef type name here.  */\n+      if (TREE_CODE_CLASS (TREE_CODE (arg)) == 't')\n+\targ = build_type_variant (TYPE_MAIN_VARIANT (arg),\n+\t\t\t\t  TYPE_READONLY (arg),\n+\t\t\t\t  TYPE_VOLATILE (arg));\n+\n       if (TREE_CODE (parm) == TYPE_DECL)\n \t{\n \t  cat (type_as_string (arg, 0));\n@@ -5627,7 +5639,9 @@ unify (tparms, targs, ntparms, parm, arg, strict, explicit_mask)\n       }\n #endif\n       /* Simple cases: Value already set, does match or doesn't.  */\n-      if (targ == arg || (targ && explicit_mask && explicit_mask[idx]))\n+      if (targ != NULL_TREE \n+\t  && (comptypes (targ, arg, 1)\n+\t      || (explicit_mask && explicit_mask[idx])))\n \treturn 0;\n       else if (targ)\n \treturn 1;\n@@ -5697,7 +5711,9 @@ unify (tparms, targs, ntparms, parm, arg, strict, explicit_mask)\n \t}\n \n       /* Simple cases: Value already set, does match or doesn't.  */\n-      if (targ == arg || (targ && explicit_mask && explicit_mask[idx]))\n+      if (targ != NULL_TREE \n+\t  && (comptypes (targ, arg, 1)\n+\t      || (explicit_mask && explicit_mask[idx])))\n \treturn 0;\n       else if (targ)\n \treturn 1;"}]}