{"sha": "25e15acf8cf0b7dc54367cb491c5f2d772199efb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjVlMTVhY2Y4Y2YwYjdkYzU0MzY3Y2I0OTFjNWYyZDc3MjE5OWVmYg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-01-11T17:41:49Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-01-11T17:41:49Z"}, "message": "compiler: mark generated struct/array types as incomparable\n    \n    The recent change to generate type functions for more types with\n    identity comparisons caused us to generate some unnecessary functions,\n    and even caused a compiler crash on Solaris due to phase ordering.\n    Avoid this by marking all generated and uncompared struct and array\n    types as incomparable, so that we don't try to generate type functions\n    for them.\n    \n    Reviewed-on: https://go-review.googlesource.com/35110\n\nFrom-SVN: r244327", "tree": {"sha": "ed212265fa0780da97cfbad866130dd3b5343609", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed212265fa0780da97cfbad866130dd3b5343609"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25e15acf8cf0b7dc54367cb491c5f2d772199efb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25e15acf8cf0b7dc54367cb491c5f2d772199efb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25e15acf8cf0b7dc54367cb491c5f2d772199efb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25e15acf8cf0b7dc54367cb491c5f2d772199efb/comments", "author": null, "committer": null, "parents": [{"sha": "bf5fbf465dee3a30588bc9e6895d50a6f4ca59c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf5fbf465dee3a30588bc9e6895d50a6f4ca59c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf5fbf465dee3a30588bc9e6895d50a6f4ca59c5"}], "stats": {"total": 73, "additions": 56, "deletions": 17}, "files": [{"sha": "457bba8879d18cb6288387ba1836cde8c198f7a7", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25e15acf8cf0b7dc54367cb491c5f2d772199efb/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25e15acf8cf0b7dc54367cb491c5f2d772199efb/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=25e15acf8cf0b7dc54367cb491c5f2d772199efb", "patch": "@@ -1,4 +1,4 @@\n-d3725d876496f2cca3d6ce538e98b58c85d90bfb\n+6be46149636c3533389e62c6dc76f0a7ff461080\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "473a7788a12261fa15526cb939531a539d8e1148", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25e15acf8cf0b7dc54367cb491c5f2d772199efb/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25e15acf8cf0b7dc54367cb491c5f2d772199efb/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=25e15acf8cf0b7dc54367cb491c5f2d772199efb", "patch": "@@ -6741,8 +6741,9 @@ Bound_method_expression::create_thunk(Gogo* gogo, const Method* method,\n   sfl->push_back(Struct_field(Typed_identifier(\"val.1\",\n \t\t\t\t\t       orig_fntype->receiver()->type(),\n \t\t\t\t\t       loc)));\n-  Type* closure_type = Type::make_struct_type(sfl, loc);\n-  closure_type = Type::make_pointer_type(closure_type);\n+  Struct_type* st = Type::make_struct_type(sfl, loc);\n+  st->set_is_struct_incomparable();\n+  Type* closure_type = Type::make_pointer_type(st);\n \n   Function_type* new_fntype = orig_fntype->copy_with_names();\n \n@@ -6896,6 +6897,7 @@ Bound_method_expression::do_flatten(Gogo* gogo, Named_object*,\n \t\t\t\t\t\t  loc)));\n   fields->push_back(Struct_field(Typed_identifier(\"val.1\", val->type(), loc)));\n   Struct_type* st = Type::make_struct_type(fields, loc);\n+  st->set_is_struct_incomparable();\n \n   Expression_list* vals = new Expression_list();\n   vals->push_back(Expression::make_func_code_reference(thunk, loc));\n@@ -9683,6 +9685,7 @@ Call_expression::do_flatten(Gogo* gogo, Named_object*,\n         }\n \n       Struct_type* st = Type::make_struct_type(sfl, loc);\n+      st->set_is_struct_incomparable();\n       this->call_temp_ = Statement::make_temporary(st, NULL, loc);\n       inserter->insert(this->call_temp_);\n     }\n@@ -11565,7 +11568,8 @@ Field_reference_expression::do_lower(Gogo* gogo, Named_object* function,\n   Expression* length_expr = Expression::make_integer_ul(s.length(), NULL, loc);\n \n   Type* byte_type = gogo->lookup_global(\"byte\")->type_value();\n-  Type* array_type = Type::make_array_type(byte_type, length_expr);\n+  Array_type* array_type = Type::make_array_type(byte_type, length_expr);\n+  array_type->set_is_array_incomparable();\n \n   Expression_list* bytes = new Expression_list();\n   for (std::string::const_iterator p = s.begin(); p != s.end(); p++)\n@@ -11843,8 +11847,9 @@ Interface_field_reference_expression::create_thunk(Gogo* gogo,\n   Type* vt = Type::make_pointer_type(Type::make_void_type());\n   sfl->push_back(Struct_field(Typed_identifier(\"fn.0\", vt, loc)));\n   sfl->push_back(Struct_field(Typed_identifier(\"val.1\", type, loc)));\n-  Type* closure_type = Type::make_struct_type(sfl, loc);\n-  closure_type = Type::make_pointer_type(closure_type);\n+  Struct_type* st = Type::make_struct_type(sfl, loc);\n+  st->set_is_struct_incomparable();\n+  Type* closure_type = Type::make_pointer_type(st);\n \n   Function_type* new_fntype = orig_fntype->copy_with_names();\n \n@@ -11943,6 +11948,7 @@ Interface_field_reference_expression::do_get_backend(Translate_context* context)\n \t\t\t\t\t\t  this->expr_->type(),\n \t\t\t\t\t\t  loc)));\n   Struct_type* st = Type::make_struct_type(fields, loc);\n+  st->set_is_struct_incomparable();\n \n   Expression_list* vals = new Expression_list();\n   vals->push_back(Expression::make_func_code_reference(thunk, loc));\n@@ -12930,7 +12936,9 @@ Slice_construction_expression::Slice_construction_expression(\n   Type* int_type = Type::lookup_integer_type(\"int\");\n   length = Expression::make_integer_ul(lenval, int_type, location);\n   Type* element_type = type->array_type()->element_type();\n-  this->valtype_ = Type::make_array_type(element_type, length);\n+  Array_type* array_type = Type::make_array_type(element_type, length);\n+  array_type->set_is_array_incomparable();\n+  this->valtype_ = array_type;\n }\n \n // Traversal.\n@@ -13161,8 +13169,9 @@ Map_construction_expression::do_flatten(Gogo* gogo, Named_object*,\n         }\n \n       Expression* element_count = Expression::make_integer_ul(i, NULL, loc);\n-      Type* ctor_type =\n+      Array_type* ctor_type =\n           Type::make_array_type(this->element_type_, element_count);\n+      ctor_type->set_is_array_incomparable();\n       Expression* constructor =\n           new Fixed_array_construction_expression(ctor_type, NULL,\n                                                   value_pairs, loc);\n@@ -14863,7 +14872,9 @@ Interface_info_expression::do_type()\n             sfl->push_back(Struct_field(Typed_identifier(fname, mft, loc)));\n           }\n \n-        Pointer_type *pt = Type::make_pointer_type(Type::make_struct_type(sfl, loc));\n+\tStruct_type* st = Type::make_struct_type(sfl, loc);\n+\tst->set_is_struct_incomparable();\n+\tPointer_type *pt = Type::make_pointer_type(st);\n         result_types[itype] = pt;\n         return pt;\n       }\n@@ -15097,7 +15108,9 @@ Interface_mtable_expression::do_type()\n        p != interface_methods->end();\n        ++p)\n     sfl->push_back(Struct_field(*p));\n-  this->method_table_type_ = Type::make_struct_type(sfl, this->location());\n+  Struct_type* st = Type::make_struct_type(sfl, this->location());\n+  st->set_is_struct_incomparable();\n+  this->method_table_type_ = st;\n   return this->method_table_type_;\n }\n "}, {"sha": "ffe51b35d0974f3a992515e56899c19665c36e96", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25e15acf8cf0b7dc54367cb491c5f2d772199efb/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25e15acf8cf0b7dc54367cb491c5f2d772199efb/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=25e15acf8cf0b7dc54367cb491c5f2d772199efb", "patch": "@@ -744,6 +744,7 @@ Gogo::register_gc_vars(const std::vector<Named_object*>& var_gc,\n   Expression* length = Expression::make_integer_ul(roots_len, NULL,\n                                                    builtin_loc);\n   Array_type* root_array_type = Type::make_array_type(root_type, length);\n+  root_array_type->set_is_array_incomparable();\n   Type* ptdt = Type::make_type_descriptor_ptr_type();\n   Struct_type* root_list_type =\n       Type::make_builtin_struct_type(2,\n@@ -4833,7 +4834,8 @@ Function::closure_var()\n       // we find them.\n       Location loc = this->type_->location();\n       Struct_field_list* sfl = new Struct_field_list;\n-      Type* struct_type = Type::make_struct_type(sfl, loc);\n+      Struct_type* struct_type = Type::make_struct_type(sfl, loc);\n+      struct_type->set_is_struct_incomparable();\n       Variable* var = new Variable(Type::make_pointer_type(struct_type),\n \t\t\t\t   NULL, false, false, false, loc);\n       var->set_is_used();"}, {"sha": "a92144980222e9d9540f19ff55c1757b3ef855c5", "filename": "gcc/go/gofrontend/runtime.cc", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25e15acf8cf0b7dc54367cb491c5f2d772199efb/gcc%2Fgo%2Fgofrontend%2Fruntime.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25e15acf8cf0b7dc54367cb491c5f2d772199efb/gcc%2Fgo%2Fgofrontend%2Fruntime.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fruntime.cc?ref=25e15acf8cf0b7dc54367cb491c5f2d772199efb", "patch": "@@ -190,27 +190,47 @@ runtime_function_type(Runtime_function_type bft)\n \t  break;\n \n \tcase RFT_ARRAY2STRING:\n-\t  t = Type::make_array_type(Type::make_string_type(),\n+\t  {\n+\t    Array_type* at =\n+\t      Type::make_array_type(Type::make_string_type(),\n \t\t\t\t    Expression::make_integer_ul(2, NULL,\n \t\t\t\t\t\t\t\tbloc));\n+\t    at->set_is_array_incomparable();\n+\t    t = at;\n+\t  }\n \t  break;\n \n \tcase RFT_ARRAY3STRING:\n-\t  t = Type::make_array_type(Type::make_string_type(),\n+\t  {\n+\t    Array_type* at =\n+\t      Type::make_array_type(Type::make_string_type(),\n \t\t\t\t    Expression::make_integer_ul(3, NULL,\n \t\t\t\t\t\t\t\tbloc));\n+\t    at->set_is_array_incomparable();\n+\t    t = at;\n+\t  }\n \t  break;\n \n \tcase RFT_ARRAY4STRING:\n-\t  t = Type::make_array_type(Type::make_string_type(),\n+\t  {\n+\t    Array_type* at =\n+\t      Type::make_array_type(Type::make_string_type(),\n \t\t\t\t    Expression::make_integer_ul(4, NULL,\n \t\t\t\t\t\t\t\tbloc));\n+\t    at->set_is_array_incomparable();\n+\t    t = at;\n+\t  }\n \t  break;\n \n \tcase RFT_ARRAY5STRING:\n-\t  t = Type::make_array_type(Type::make_string_type(),\n+\t  {\n+\t    Array_type* at =\n+\t      Type::make_array_type(Type::make_string_type(),\n \t\t\t\t    Expression::make_integer_ul(5, NULL,\n \t\t\t\t\t\t\t\tbloc));\n+\t    at->set_is_array_incomparable();\n+\t    t = at;\n+\t  }\n \t  break;\n \t}\n "}, {"sha": "ace23d0c27b12a2a1d7bef71680061eaeace9523", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25e15acf8cf0b7dc54367cb491c5f2d772199efb/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25e15acf8cf0b7dc54367cb491c5f2d772199efb/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=25e15acf8cf0b7dc54367cb491c5f2d772199efb", "patch": "@@ -2500,6 +2500,7 @@ Type::gc_symbol_constructor(Gogo* gogo)\n   Expression* len = Expression::make_integer_ul(vals->size(), NULL,\n \t\t\t\t\t\tbloc);\n   Array_type* gc_symbol_type = Type::make_array_type(uintptr_t, len);\n+  gc_symbol_type->set_is_array_incomparable();\n   return Expression::make_array_composite_literal(gc_symbol_type, vals, bloc);\n }\n \n@@ -4037,6 +4038,7 @@ Function_type::get_backend_fntype(Gogo* gogo)\n \t\t    }\n \t\t  Struct_type* st = Type::make_struct_type(sfl,\n \t\t\t\t\t\t\t   this->location());\n+\t\t  st->set_is_struct_incomparable();\n \t\t  ins.first->second = st->get_backend(gogo);\n \t\t}\n \t      bresult_struct = ins.first->second;\n@@ -7209,7 +7211,8 @@ Map_type::fat_zero_value(Gogo* gogo)\n       // The final type will be set in backend_zero_value.\n       Type* uint8_type = Type::lookup_integer_type(\"uint8\");\n       Expression* size = Expression::make_integer_ul(0, NULL, bloc);\n-      Type* array_type = Type::make_array_type(uint8_type, size);\n+      Array_type* array_type = Type::make_array_type(uint8_type, size);\n+      array_type->set_is_array_incomparable();\n       Variable* var = new Variable(array_type, NULL, true, false, false, bloc);\n       Map_type::zero_value = Named_object::make_variable(\"go$zerovalue\", NULL,\n \t\t\t\t\t\t\t var);\n@@ -7619,7 +7622,8 @@ Map_type::bucket_type(Gogo* gogo, int64_t keysize, int64_t valsize)\n \n       Expression* pad_expr = Expression::make_integer_ul(pad, NULL,\n \t\t\t\t\t\t\t this->location_);\n-      Type* pad_type = Type::make_array_type(uint8_type, pad_expr);\n+      Array_type* pad_type = Type::make_array_type(uint8_type, pad_expr);\n+      pad_type->set_is_array_incomparable();\n \n       ret = make_builtin_struct_type(5,\n \t\t\t\t     \"topbits\", topbits_type,"}]}