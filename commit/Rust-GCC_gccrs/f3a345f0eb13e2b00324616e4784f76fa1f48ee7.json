{"sha": "f3a345f0eb13e2b00324616e4784f76fa1f48ee7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjNhMzQ1ZjBlYjEzZTJiMDAzMjQ2MTZlNDc4NGY3NmZhMWY0OGVlNw==", "commit": {"author": {"name": "Thomas Young", "email": "wenzhang5800@gmail.com", "date": "2021-07-09T01:09:26Z"}, "committer": {"name": "Thomas Young", "email": "wenzhang5800@gmail.com", "date": "2021-07-09T01:09:26Z"}, "message": "revert visit_path_segment return type to bool", "tree": {"sha": "59c7c34485feb0eb0325f949853f526518880c55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59c7c34485feb0eb0325f949853f526518880c55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3a345f0eb13e2b00324616e4784f76fa1f48ee7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3a345f0eb13e2b00324616e4784f76fa1f48ee7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3a345f0eb13e2b00324616e4784f76fa1f48ee7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3a345f0eb13e2b00324616e4784f76fa1f48ee7/comments", "author": {"login": "thomasyonug", "id": 17464490, "node_id": "MDQ6VXNlcjE3NDY0NDkw", "avatar_url": "https://avatars.githubusercontent.com/u/17464490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomasyonug", "html_url": "https://github.com/thomasyonug", "followers_url": "https://api.github.com/users/thomasyonug/followers", "following_url": "https://api.github.com/users/thomasyonug/following{/other_user}", "gists_url": "https://api.github.com/users/thomasyonug/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomasyonug/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomasyonug/subscriptions", "organizations_url": "https://api.github.com/users/thomasyonug/orgs", "repos_url": "https://api.github.com/users/thomasyonug/repos", "events_url": "https://api.github.com/users/thomasyonug/events{/privacy}", "received_events_url": "https://api.github.com/users/thomasyonug/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thomasyonug", "id": 17464490, "node_id": "MDQ6VXNlcjE3NDY0NDkw", "avatar_url": "https://avatars.githubusercontent.com/u/17464490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomasyonug", "html_url": "https://github.com/thomasyonug", "followers_url": "https://api.github.com/users/thomasyonug/followers", "following_url": "https://api.github.com/users/thomasyonug/following{/other_user}", "gists_url": "https://api.github.com/users/thomasyonug/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomasyonug/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomasyonug/subscriptions", "organizations_url": "https://api.github.com/users/thomasyonug/orgs", "repos_url": "https://api.github.com/users/thomasyonug/repos", "events_url": "https://api.github.com/users/thomasyonug/events{/privacy}", "received_events_url": "https://api.github.com/users/thomasyonug/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e750295b6078c2c638822a4c32339301579bb05e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e750295b6078c2c638822a4c32339301579bb05e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e750295b6078c2c638822a4c32339301579bb05e"}], "stats": {"total": 34, "additions": 16, "deletions": 18}, "files": [{"sha": "f251b6325b679ba75ca37500a4550578500ae316", "filename": "gcc/rust/lint/rust-lint-marklive.cc", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3a345f0eb13e2b00324616e4784f76fa1f48ee7/gcc%2Frust%2Flint%2Frust-lint-marklive.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3a345f0eb13e2b00324616e4784f76fa1f48ee7/gcc%2Frust%2Flint%2Frust-lint-marklive.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flint%2Frust-lint-marklive.cc?ref=f3a345f0eb13e2b00324616e4784f76fa1f48ee7", "patch": "@@ -92,8 +92,7 @@ void\n MarkLive::visit (HIR::PathInExpression &expr)\n {\n   expr.iterate_path_segments ([&] (HIR::PathExprSegment &seg) -> bool {\n-    visit_path_segment (seg);\n-    return true;\n+    return visit_path_segment (seg);\n   });\n }\n \n@@ -114,14 +113,13 @@ MarkLive::visit (HIR::MethodCallExpr &expr)\n \n   // node back to HIR\n   HirId ref;\n-  bool ret\n-    = mappings->lookup_node_to_hir (expr.get_mappings ().get_crate_num (),\n-\t\t\t\t    ref_node_id, &ref);\n-  rust_assert (ret);\n+  bool ok = mappings->lookup_node_to_hir (expr.get_mappings ().get_crate_num (),\n+\t\t\t\t\t  ref_node_id, &ref);\n+  rust_assert (ok);\n   mark_hir_id (ref);\n }\n \n-void\n+bool\n MarkLive::visit_path_segment (HIR::PathExprSegment seg)\n {\n   NodeId ast_node_id = seg.get_mappings ().get_nodeid ();\n@@ -136,13 +134,14 @@ MarkLive::visit_path_segment (HIR::PathExprSegment seg)\n     }\n   else if (!resolver->lookup_resolved_type (ast_node_id, &ref_node_id))\n     {\n-      return;\n+      return false;\n     }\n   HirId ref;\n-  bool ret = mappings->lookup_node_to_hir (seg.get_mappings ().get_crate_num (),\n-\t\t\t\t\t   ref_node_id, &ref);\n-  rust_assert (ret);\n+  bool ok = mappings->lookup_node_to_hir (seg.get_mappings ().get_crate_num (),\n+\t\t\t\t\t  ref_node_id, &ref);\n+  rust_assert (ok);\n   mark_hir_id (ref);\n+  return true;\n }\n \n void\n@@ -195,10 +194,9 @@ MarkLive::visit (HIR::IdentifierExpr &expr)\n \n   // node back to HIR\n   HirId ref;\n-  bool ret\n-    = mappings->lookup_node_to_hir (expr.get_mappings ().get_crate_num (),\n-\t\t\t\t    ref_node_id, &ref);\n-  rust_assert (ret);\n+  bool ok = mappings->lookup_node_to_hir (expr.get_mappings ().get_crate_num (),\n+\t\t\t\t\t  ref_node_id, &ref);\n+  rust_assert (ok);\n   mark_hir_id (ref);\n }\n \n@@ -209,10 +207,10 @@ MarkLive::visit (HIR::TypeAlias &alias)\n   resolver->lookup_resolved_type (\n     alias.get_type_aliased ()->get_mappings ().get_nodeid (), &ast_node_id);\n   HirId hir_id;\n-  bool ret\n+  bool ok\n     = mappings->lookup_node_to_hir (alias.get_mappings ().get_crate_num (),\n \t\t\t\t    ast_node_id, &hir_id);\n-  rust_assert (ret);\n+  rust_assert (ok);\n   mark_hir_id (hir_id);\n }\n "}, {"sha": "e6ca4aed185fbbeebbb3829aef833c10fdce1afc", "filename": "gcc/rust/lint/rust-lint-marklive.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3a345f0eb13e2b00324616e4784f76fa1f48ee7/gcc%2Frust%2Flint%2Frust-lint-marklive.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3a345f0eb13e2b00324616e4784f76fa1f48ee7/gcc%2Frust%2Flint%2Frust-lint-marklive.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flint%2Frust-lint-marklive.h?ref=f3a345f0eb13e2b00324616e4784f76fa1f48ee7", "patch": "@@ -266,7 +266,7 @@ class MarkLive : public MarkLiveBase\n       tyctx (Resolver::TypeCheckContext::get ()){};\n \n   void mark_hir_id (HirId);\n-  void visit_path_segment (HIR::PathExprSegment);\n+  bool visit_path_segment (HIR::PathExprSegment);\n   void find_ref_node_id (NodeId ast_node_id, NodeId &ref_node_id,\n \t\t\t Location locus, const std::string &node_name);\n };"}]}