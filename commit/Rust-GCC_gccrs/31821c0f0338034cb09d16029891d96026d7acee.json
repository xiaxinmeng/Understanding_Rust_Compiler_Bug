{"sha": "31821c0f0338034cb09d16029891d96026d7acee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzE4MjFjMGYwMzM4MDM0Y2IwOWQxNjAyOTg5MWQ5NjAyNmQ3YWNlZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-07-09T10:41:16Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-07-09T10:41:16Z"}, "message": "[multiple changes]\n\n2012-07-09  Tristan Gingold  <gingold@adacore.com>\n\n\t* raise-gcc.c (db_indent): Simplify style, improve comments.\n\tRemove !IN_RTS part (dead).\n\n2012-07-09  Robert Dewar  <dewar@adacore.com>\n\n\t* usage.adb: Minor change to format of -gnatn line.\n\n2012-07-09  Tristan Gingold  <gingold@adacore.com>\n\n\t* a-exexpr-gcc.adb: Reorder routine.\n\nFrom-SVN: r189368", "tree": {"sha": "c3d4c712285a58a010546fd5c8e1242a2d990735", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3d4c712285a58a010546fd5c8e1242a2d990735"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31821c0f0338034cb09d16029891d96026d7acee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31821c0f0338034cb09d16029891d96026d7acee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31821c0f0338034cb09d16029891d96026d7acee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31821c0f0338034cb09d16029891d96026d7acee/comments", "author": null, "committer": null, "parents": [{"sha": "21791d978bc82abe024f14e89daa8b294640e634", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21791d978bc82abe024f14e89daa8b294640e634", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21791d978bc82abe024f14e89daa8b294640e634"}], "stats": {"total": 146, "additions": 51, "deletions": 95}, "files": [{"sha": "9784e2ae8701cbdb8b387e259ff4f6e17832e568", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31821c0f0338034cb09d16029891d96026d7acee/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31821c0f0338034cb09d16029891d96026d7acee/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=31821c0f0338034cb09d16029891d96026d7acee", "patch": "@@ -1,3 +1,16 @@\n+2012-07-09  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* raise-gcc.c (db_indent): Simplify style, improve comments.\n+\tRemove !IN_RTS part (dead).\n+\n+2012-07-09  Robert Dewar  <dewar@adacore.com>\n+\n+\t* usage.adb: Minor change to format of -gnatn line.\n+\n+2012-07-09  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* a-exexpr-gcc.adb: Reorder routine.\n+\n 2012-07-09  Vincent Celier  <celier@adacore.com>\n \n \t* lib-writ.ads: Add documentation for the Z lines (implicitly"}, {"sha": "4d651d5ee55df64545f996f9e5615bed4dd4dc62", "filename": "gcc/ada/a-exexpr-gcc.adb", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31821c0f0338034cb09d16029891d96026d7acee/gcc%2Fada%2Fa-exexpr-gcc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31821c0f0338034cb09d16029891d96026d7acee/gcc%2Fada%2Fa-exexpr-gcc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-exexpr-gcc.adb?ref=31821c0f0338034cb09d16029891d96026d7acee", "patch": "@@ -455,18 +455,6 @@ package body Exception_Propagation is\n       Unhandled_Except_Handler (GCC_Exception);\n    end Propagate_GCC_Exception;\n \n-   ------------------------------\n-   -- Unhandled_Except_Handler --\n-   ------------------------------\n-\n-   procedure Unhandled_Except_Handler\n-     (GCC_Exception : not null GCC_Exception_Access)\n-   is\n-   begin\n-      Setup_Current_Excep (GCC_Exception);\n-      Unhandled_Exception_Terminate;\n-   end Unhandled_Except_Handler;\n-\n    -------------------------\n    -- Propagate_Exception --\n    -------------------------\n@@ -517,6 +505,18 @@ package body Exception_Propagation is\n       Propagate_GCC_Exception (To_GCC_Exception (GCC_Exception));\n    end Propagate_Exception;\n \n+   ------------------------------\n+   -- Unhandled_Except_Handler --\n+   ------------------------------\n+\n+   procedure Unhandled_Except_Handler\n+     (GCC_Exception : not null GCC_Exception_Access)\n+   is\n+   begin\n+      Setup_Current_Excep (GCC_Exception);\n+      Unhandled_Exception_Terminate;\n+   end Unhandled_Except_Handler;\n+\n    -------------\n    -- EID_For --\n    -------------"}, {"sha": "53a56e1d04b49ed87d802db2b3dffba53134d6e8", "filename": "gcc/ada/raise-gcc.c", "status": "modified", "additions": 24, "deletions": 81, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31821c0f0338034cb09d16029891d96026d7acee/gcc%2Fada%2Fraise-gcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31821c0f0338034cb09d16029891d96026d7acee/gcc%2Fada%2Fraise-gcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fraise-gcc.c?ref=31821c0f0338034cb09d16029891d96026d7acee", "patch": "@@ -32,18 +32,17 @@\n /* Code related to the integration of the GCC mechanism for exception\n    handling.  */\n \n-#ifdef IN_RTS\n+#ifndef IN_RTS\n+#error \"RTS unit only\"\n+#endif\n+\n #include \"tconfig.h\"\n #include \"tsystem.h\"\n #include <sys/stat.h>\n #include <stdarg.h>\n typedef char bool;\n # define true 1\n # define false 0\n-#else\n-#include \"config.h\"\n-#include \"system.h\"\n-#endif\n \n #include \"adaint.h\"\n #include \"raise.h\"\n@@ -56,37 +55,21 @@ typedef char bool;\n #endif\n #endif\n \n+#if defined (__hpux__) && defined (USE_LIBUNWIND_EXCEPTIONS)\n+/* HP-UX B.11.31 ia64 libunwind doesn't have _Unwind_GetIPInfo. */\n+#undef HAVE_GETIPINFO\n+#endif\n+\n /* The names of a couple of \"standard\" routines for unwinding/propagation\n    actually vary depending on the underlying GCC scheme for exception handling\n    (SJLJ or DWARF). We need a consistently named interface to import from\n-   a-except, so wrappers are defined here.\n-\n-   Besides, even though the compiler is never setup to use the GCC propagation\n-   circuitry, it still relies on exceptions internally and part of the sources\n-   to handle to exceptions are shared with the run-time library.  We need\n-   dummy definitions for the wrappers to satisfy the linker in this case.\n-\n-   The types to be used by those wrappers in the run-time library are target\n-   types exported by unwind.h.  We used to piggyback on them for the compiler\n-   stubs, but there is no guarantee that unwind.h is always in sight so we\n-   define our own set below.  These are dummy types as the wrappers are never\n-   called in the compiler case.  */\n-\n-#ifdef IN_RTS\n+   a-except, so wrappers are defined here.  */\n \n #include \"unwind.h\"\n \n typedef struct _Unwind_Context _Unwind_Context;\n typedef struct _Unwind_Exception _Unwind_Exception;\n \n-#else\n-\n-typedef void _Unwind_Context;\n-typedef void _Unwind_Exception;\n-typedef int  _Unwind_Reason_Code;\n-\n-#endif\n-\n _Unwind_Reason_Code\n __gnat_Unwind_RaiseException (_Unwind_Exception *);\n \n@@ -95,8 +78,6 @@ __gnat_Unwind_ForcedUnwind (_Unwind_Exception *, void *, void *);\n \n extern void __gnat_setup_current_excep (_Unwind_Exception *);\n \n-#ifdef IN_RTS   /* For eh personality routine */\n-\n #include \"dwarf2.h\"\n #include \"unwind-dw2-fde.h\"\n #include \"unwind-pe.h\"\n@@ -164,31 +145,19 @@ db_indent (int requests)\n   static int current_indentation_level = 0;\n \n   if (requests & DB_INDENT_RESET)\n-    {\n-      current_indentation_level = 0;\n-    }\n+    current_indentation_level = 0;\n \n   if (requests & DB_INDENT_INCREASE)\n-    {\n-      current_indentation_level ++;\n-    }\n+    current_indentation_level ++;\n \n   if (requests & DB_INDENT_DECREASE)\n-    {\n-      current_indentation_level --;\n-    }\n+    current_indentation_level --;\n \n   if (requests & DB_INDENT_NEWLINE)\n-    {\n-      fprintf (stderr, \"\\n\");\n-    }\n+    fprintf (stderr, \"\\n\");\n \n   if (requests & DB_INDENT_OUTPUT)\n-    {\n-      fprintf (stderr, \"%*s\",\n-\t       current_indentation_level * DB_INDENT_UNIT, \" \");\n-    }\n-\n+    fprintf (stderr, \"%*s\", current_indentation_level * DB_INDENT_UNIT, \" \");\n }\n \n static void ATTRIBUTE_PRINTF_2\n@@ -264,7 +233,8 @@ db_phases (int phases)\n \n    This table contains lists (called action chains) of possible actions\n    associated with call-site entries described in the call-site [] table.\n-   There is at most one action list per call-site entry.\n+   There is at most one action list per call-site entry.  It is SLEB128\n+   encoded.\n \n    A null action-filter indicates a cleanup.\n \n@@ -278,22 +248,19 @@ db_phases (int phases)\n                       data to retrieve, which is only relevant for C++\n \t\t      and should never show up for Ada.\n \n-   next-action indexes the next entry in the list. 0 indicates there is\n-   no other entry.\n+   next-action points to the next entry in the list using a relative byte\n+   index. 0 indicates there is no other entry.\n \n    ttypes []\n    ---------------\n    * ttype-value *\n    ---------------\n \n-   A null value indicates a catch-all handler in C++, and an \"others\"\n-   handler in Ada.\n+   A null value indicates a catch-all handler.  (Not used by Ada)\n \n    Non null values are used to match the exception being propagated:\n    In C++ this is a pointer to some rtti data, while in Ada this is an\n-   exception id.\n-\n-   The special id value 1 indicates an \"all_others\" handler.\n+   exception id (with a fake id for others).\n \n    For C++, this table is actually also used to store \"exception\n    specification\" data. The differentiation between the two kinds\n@@ -339,9 +306,9 @@ db_phases (int phases)\n \t\t +=====================+     |  the actual base.\n \t\t |     ttype-value     |     |\n     +============+=====================+     |\n-    |            |  0 => \"others\"      |     |\n-    |    ...     |  1 => \"all others\"  | <---+\n-    |            |  X => exception id  |\n+    |            |        ...          |     |\n+    |    ...     |     exception id    | <---+\n+    |            |        ...          |\n     |  handlers\t +---------------------+\n     |            |        ...          |\n     |    ...     |        ...          |\n@@ -1224,27 +1191,3 @@ __gnat_personality_seh0 (PEXCEPTION_RECORD ms_exc, void *this_frame,\n \t\t\t\tms_disp, __gnat_personality_imp);\n }\n #endif /* SEH */\n-#else\n-/* ! IN_RTS  */\n-\n-/* Define the corresponding stubs for the compiler.  */\n-\n-/* We don't want fancy_abort here.  */\n-#undef abort\n-\n-_Unwind_Reason_Code\n-__gnat_Unwind_RaiseException (_Unwind_Exception *e ATTRIBUTE_UNUSED)\n-{\n-  abort ();\n-}\n-\n-\n-_Unwind_Reason_Code\n-__gnat_Unwind_ForcedUnwind (_Unwind_Exception *e ATTRIBUTE_UNUSED,\n-                            void * handler ATTRIBUTE_UNUSED,\n-                            void * argument ATTRIBUTE_UNUSED)\n-{\n-  abort ();\n-}\n-\n-#endif /* IN_RTS */"}, {"sha": "59a5899a658674d009abb9d7e3a3dda55253029c", "filename": "gcc/ada/usage.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31821c0f0338034cb09d16029891d96026d7acee/gcc%2Fada%2Fusage.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31821c0f0338034cb09d16029891d96026d7acee/gcc%2Fada%2Fusage.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fusage.adb?ref=31821c0f0338034cb09d16029891d96026d7acee", "patch": "@@ -298,8 +298,8 @@ begin\n \n    --  Line for -gnatn switch\n \n-   Write_Switch_Char (\"n[1|2]\");\n-   Write_Line (\"Enable pragma Inline (both within and across units)\");\n+   Write_Switch_Char (\"n[?]\");\n+   Write_Line (\"Enable pragma Inline (both within and across units, ?=1/2)\");\n \n    --  Line for -gnatN switch\n "}]}