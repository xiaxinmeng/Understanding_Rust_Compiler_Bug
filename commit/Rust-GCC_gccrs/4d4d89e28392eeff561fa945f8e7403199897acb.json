{"sha": "4d4d89e28392eeff561fa945f8e7403199897acb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQ0ZDg5ZTI4MzkyZWVmZjU2MWZhOTQ1ZjhlNzQwMzE5OTg5N2FjYg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2002-05-29T14:20:40Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-05-29T14:20:40Z"}, "message": "h8300-protos.h: Remove the prototype for o_operand.\n\n\t* config/h8300/h8300-protos.h: Remove the prototype for\n\to_operand.\n\tAdd prototypes for single_one_operand and single_zero_operand.\n\t* config/h8300/h8300.c (o_operand): Remove.\n\t(single_one_operand): New.\n\t(single_zero_operand): Likewise.\n\t(print_operand): For 'V' operand, and the operand with 0xff.\n\tFor 'V' and 'W' operands, do not and the bit position with 7.\n\t* config/h8300/h8300.md (various anonymous patterns): Replace\n\tuse of exact_log2 with single_one_operand/single_zero_operand.\n\nFrom-SVN: r53994", "tree": {"sha": "c95dfc89a53c8bd88c74c797b7f54daf5301b373", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c95dfc89a53c8bd88c74c797b7f54daf5301b373"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d4d89e28392eeff561fa945f8e7403199897acb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d4d89e28392eeff561fa945f8e7403199897acb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d4d89e28392eeff561fa945f8e7403199897acb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d4d89e28392eeff561fa945f8e7403199897acb/comments", "author": null, "committer": null, "parents": [{"sha": "abd6ddecb5724117c0ea2108a5cd42ab405ab288", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abd6ddecb5724117c0ea2108a5cd42ab405ab288", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abd6ddecb5724117c0ea2108a5cd42ab405ab288"}], "stats": {"total": 120, "additions": 72, "deletions": 48}, "files": [{"sha": "c1d0a26e81256025818723b0d7142312c29489d6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d4d89e28392eeff561fa945f8e7403199897acb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d4d89e28392eeff561fa945f8e7403199897acb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4d4d89e28392eeff561fa945f8e7403199897acb", "patch": "@@ -1,3 +1,16 @@\n+2002-05-29  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/h8300/h8300-protos.h: Remove the prototype for\n+\to_operand.\n+\tAdd prototypes for single_one_operand and single_zero_operand.\n+\t* config/h8300/h8300.c (o_operand): Remove.\n+\t(single_one_operand): New.\n+\t(single_zero_operand): Likewise.\n+\t(print_operand): For 'V' operand, and the operand with 0xff.\n+\tFor 'V' and 'W' operands, do not and the bit position with 7.\n+\t* config/h8300/h8300.md (various anonymous patterns): Replace\n+\tuse of exact_log2 with single_one_operand/single_zero_operand.\n+\n 2002-05-29  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* config/s390/linux.h (MD_FALLBACK_FRAME_STATE_FOR): New."}, {"sha": "d02c082f8be3494fa5cf9cf206996c3ab76dd51e", "filename": "gcc/config/h8300/h8300-protos.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d4d89e28392eeff561fa945f8e7403199897acb/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d4d89e28392eeff561fa945f8e7403199897acb/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h?ref=4d4d89e28392eeff561fa945f8e7403199897acb", "patch": "@@ -48,7 +48,8 @@ extern void split_adds_subs PARAMS ((enum machine_mode, rtx[]));\n \n extern int general_operand_src PARAMS ((rtx, enum machine_mode));\n extern int general_operand_dst PARAMS ((rtx, enum machine_mode));\n-extern int o_operand PARAMS ((rtx, enum machine_mode));\n+extern int single_one_operand PARAMS ((rtx, enum machine_mode));\n+extern int single_zero_operand PARAMS ((rtx, enum machine_mode));\n extern int call_insn_operand PARAMS ((rtx, enum machine_mode));\n extern int two_insn_adds_subs_operand PARAMS ((rtx, enum machine_mode));\n extern int small_call_insn_operand PARAMS ((rtx, enum machine_mode));"}, {"sha": "0258c68a9be808146eefaab80e478fade98aab45", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 42, "deletions": 7, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d4d89e28392eeff561fa945f8e7403199897acb/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d4d89e28392eeff561fa945f8e7403199897acb/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=4d4d89e28392eeff561fa945f8e7403199897acb", "patch": "@@ -569,15 +569,50 @@ general_operand_dst (op, mode)\n   return general_operand (op, mode);\n }\n \n-/* Return true if OP is a const valid for a bit clear instruction.  */\n+/* Return true if OP is a constant that contains only one 1 in its\n+   binary representation.  */\n \n int\n-o_operand (operand, mode)\n+single_one_operand (operand, mode)\n      rtx operand;\n      enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n-  return (GET_CODE (operand) == CONST_INT\n-\t  && CONST_OK_FOR_O (INTVAL (operand)));\n+  if (GET_CODE (operand) == CONST_INT)\n+    {\n+      /* We really need to do this masking because 0x80 in QImode is\n+\t represented as -128 for example.  */\n+      unsigned HOST_WIDE_INT mask =\n+\t((unsigned HOST_WIDE_INT) 1 << GET_MODE_BITSIZE (mode)) - 1;\n+      unsigned HOST_WIDE_INT value = INTVAL (operand);\n+\n+      if (exact_log2 (value & mask) >= 0)\n+\treturn 1;\n+    }\n+\n+  return 0;\n+}\n+\n+/* Return true if OP is a constant that contains only one 0 in its\n+   binary representation.  */\n+\n+int\n+single_zero_operand (operand, mode)\n+     rtx operand;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n+{\n+  if (GET_CODE (operand) == CONST_INT)\n+    {\n+      /* We really need to do this masking because 0x80 in QImode is\n+\t represented as -128 for example.  */\n+      unsigned HOST_WIDE_INT mask =\n+\t((unsigned HOST_WIDE_INT) 1 << GET_MODE_BITSIZE (mode)) - 1;\n+      unsigned HOST_WIDE_INT value = INTVAL (operand);\n+\n+      if (exact_log2 (~value & mask) >= 0)\n+\treturn 1;\n+    }\n+\n+  return 0;\n }\n \n /* Return true if OP is a valid call operand.  */\n@@ -1030,16 +1065,16 @@ print_operand (file, x, code)\n \tgoto def;\n       break;\n     case 'V':\n-      bitint = exact_log2 (INTVAL (x));\n+      bitint = exact_log2 (INTVAL (x) & 0xff);\n       if (bitint == -1)\n \tabort ();\n-      fprintf (file, \"#%d\", bitint & 7);\n+      fprintf (file, \"#%d\", bitint);\n       break;\n     case 'W':\n       bitint = exact_log2 ((~INTVAL (x)) & 0xff);\n       if (bitint == -1)\n \tabort ();\n-      fprintf (file, \"#%d\", bitint & 7);\n+      fprintf (file, \"#%d\", bitint);\n       break;\n     case 'R':\n     case 'X':"}, {"sha": "6ae6d6f01e681e7a8a253a30ca92a22b058111ed", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 15, "deletions": 40, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d4d89e28392eeff561fa945f8e7403199897acb/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d4d89e28392eeff561fa945f8e7403199897acb/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=4d4d89e28392eeff561fa945f8e7403199897acb", "patch": "@@ -1007,7 +1007,8 @@\n   [(set (match_operand:QI 0 \"bit_operand\" \"=r,U\")\n \t(and:QI (match_operand:QI 1 \"bit_operand\" \"%0,0\")\n \t\t(match_operand:QI 2 \"nonmemory_operand\" \"rn,O\")))]\n-  \"register_operand (operands[0], QImode) || o_operand (operands[2], QImode)\"\n+  \"register_operand (operands[0], QImode)\n+   || single_zero_operand (operands[2], QImode)\"\n   \"@\n    and\t%X2,%X0\n    bclr\t%W2,%R0\"\n@@ -1036,23 +1037,19 @@\n (define_insn \"*andorqi3\"\n   [(set (match_operand:QI 0 \"register_operand\" \"=r\")\n \t(ior:QI (and:QI (match_operand:QI 2 \"register_operand\" \"r\")\n-\t\t\t(match_operand:QI 3 \"const_int_operand\" \"n\"))\n+\t\t\t(match_operand:QI 3 \"single_one_operand\" \"n\"))\n \t\t(match_operand:QI 1 \"register_operand\" \"0\")))]\n-  \"exact_log2 (INTVAL (operands[3]) & 0xff) != -1\"\n-  \"*\n-{\n-  operands[3] = GEN_INT (INTVAL (operands[3]) & 0xff);\n-  return \\\"bld\\\\t%V3,%X2\\;bst\\\\t%V3,%X0\\\";\n-}\"\n+  \"\"\n+  \"bld\\\\t%V3,%X2\\;bst\\\\t%V3,%X0\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"cc\" \"clobber\")])\n \n (define_insn \"*andorhi3\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n \t(ior:HI (and:HI (match_operand:HI 2 \"register_operand\" \"r\")\n-\t\t\t(match_operand:HI 3 \"const_int_operand\" \"n\"))\n+\t\t\t(match_operand:HI 3 \"single_one_operand\" \"n\"))\n \t(match_operand:HI 1 \"register_operand\" \"0\")))]\n-  \"exact_log2 (INTVAL (operands[3]) & 0xffff) != -1\"\n+  \"\"\n   \"*\n {\n   operands[3] = GEN_INT (INTVAL (operands[3]) & 0xffff);\n@@ -1082,21 +1079,10 @@\n \t(ior:QI (match_operand:QI 1 \"bit_operand\" \"%0,0\")\n \t\t(match_operand:QI 2 \"nonmemory_operand\" \"rn,n\")))]\n   \"register_operand (operands[0], QImode)\n-   || (GET_CODE (operands[2]) == CONST_INT\n-       && exact_log2 (INTVAL (operands[2]) & 0xff) != -1)\"\n-  \"*\n-{\n-  switch (which_alternative)\n-    {\n-    case 0:\n-      return \\\"or\\t%X2,%X0\\\";\n-    case 1:\n-      operands[2] = GEN_INT (INTVAL (operands[2]) & 0xff);\n-      return \\\"bset\\t%V2,%R0\\\";\n-    default:\n-      abort ();\n-    }\n-}\"\n+   || single_one_operand (operands[2], QImode)\"\n+  \"@\n+   or\\\\t%X2,%X0\n+   bset\\\\t%V2,%R0\"\n   [(set_attr \"length\" \"2,8\")\n    (set_attr \"adjust_length\" \"no\")\n    (set_attr \"cc\" \"set_znv,none_0hit\")])\n@@ -1135,21 +1121,10 @@\n \t(xor:QI (match_operand:QI 1 \"bit_operand\" \"%0,0\")\n \t\t(match_operand:QI 2 \"nonmemory_operand\" \"rn,n\")))]\n   \"register_operand (operands[0], QImode)\n-   || (GET_CODE (operands[2]) == CONST_INT\n-       && exact_log2 (INTVAL (operands[2]) & 0xff) != -1)\"\n-  \"*\n-{\n-  switch (which_alternative)\n-    {\n-    case 0:\n-      return \\\"xor\\t%X2,%X0\\\";\n-    case 1:\n-      operands[2] = GEN_INT (INTVAL (operands[2]) & 0xff);\n-      return \\\"bnot\\t%V2,%R0\\\";\n-    default:\n-      abort ();\n-    }\n-}\"\n+   || single_one_operand (operands[2], QImode)\"\n+  \"@\n+   xor\\\\t%X2,%X0\n+   bnot\\\\t%V2,%R0\"\n   [(set_attr \"length\" \"2,8\")\n    (set_attr \"adjust_length\" \"no\")\n    (set_attr \"cc\" \"set_znv,none_0hit\")])"}]}