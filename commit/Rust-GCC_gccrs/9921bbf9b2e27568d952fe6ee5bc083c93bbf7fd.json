{"sha": "9921bbf9b2e27568d952fe6ee5bc083c93bbf7fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTkyMWJiZjliMmUyNzU2OGQ5NTJmZTZlZTViYzA4M2M5M2JiZjdmZA==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2020-02-12T18:19:25Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2020-02-12T18:19:25Z"}, "message": "[AArch64] Improve popcount expansion\n\nThe popcount expansion uses umov to extend the result and move it back\nto the integer register file.  If we model ADDV as a zero-extending\noperation, fmov can be used to move back to the integer side. This\nresults in a ~0.5% speedup on deepsjeng on Cortex-A57.\n\nA typical __builtin_popcount expansion is now:\n\n\tfmov\ts0, w0\n\tcnt\tv0.8b, v0.8b\n\taddv\tb0, v0.8b\n\tfmov\tw0, s0\n\ngcc/\n\t* config/aarch64/aarch64-simd.md\n\t(aarch64_zero_extend<GPI:mode>_reduc_plus_<VDQV_E:mode>): New pattern.\n\t* config/aarch64/aarch64.md (popcount<mode>2): Use it instead of\n\tgenerating separate ADDV and zero_extend patterns.\n\t* config/aarch64/iterators.md (VDQV_E): New iterator.\n\ntestsuite/\n\t* gcc.target/aarch64/popcnt2.c: New test.", "tree": {"sha": "c475f27f25b512752a4c5904a3aaf3c584047a2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c475f27f25b512752a4c5904a3aaf3c584047a2f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9921bbf9b2e27568d952fe6ee5bc083c93bbf7fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9921bbf9b2e27568d952fe6ee5bc083c93bbf7fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9921bbf9b2e27568d952fe6ee5bc083c93bbf7fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9921bbf9b2e27568d952fe6ee5bc083c93bbf7fd/comments", "author": null, "committer": null, "parents": [{"sha": "e5cc04a73a3e212114ca9725911eaaa66d32303c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5cc04a73a3e212114ca9725911eaaa66d32303c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5cc04a73a3e212114ca9725911eaaa66d32303c"}], "stats": {"total": 51, "additions": 48, "deletions": 3}, "files": [{"sha": "36e75b35fb895f9f1b8f3045dc5fe1e700c33c3d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9921bbf9b2e27568d952fe6ee5bc083c93bbf7fd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9921bbf9b2e27568d952fe6ee5bc083c93bbf7fd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9921bbf9b2e27568d952fe6ee5bc083c93bbf7fd", "patch": "@@ -1,3 +1,11 @@\n+2020-02-12  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md\n+\t(aarch64_zero_extend<GPI:mode>_reduc_plus_<VDQV_E:mode>): New pattern.\n+\t* config/aarch64/aarch64.md (popcount<mode>2): Use it instead of\n+\tgenerating separate ADDV and zero_extend patterns.\n+\t* config/aarch64/iterators.md (VDQV_E): New iterator.\n+\n 2020-02-12  Jeff Law  <law@redhat.com>\n \n \t* config/h8300/h8300.md (cpymemsi, movmd): Remove dead patterns,"}, {"sha": "33d705a76ef7348488b57f82d38022b09bc0f60a", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9921bbf9b2e27568d952fe6ee5bc083c93bbf7fd/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9921bbf9b2e27568d952fe6ee5bc083c93bbf7fd/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=9921bbf9b2e27568d952fe6ee5bc083c93bbf7fd", "patch": "@@ -2474,6 +2474,17 @@\n   [(set_attr \"type\" \"neon_reduc_add<q>\")]\n )\n \n+;; ADDV with result zero-extended to SI/DImode (for popcount).\n+(define_insn \"aarch64_zero_extend<GPI:mode>_reduc_plus_<VDQV_E:mode>\"\n+ [(set (match_operand:GPI 0 \"register_operand\" \"=w\")\n+       (zero_extend:GPI\n+\t(unspec:<VDQV_E:VEL> [(match_operand:VDQV_E 1 \"register_operand\" \"w\")]\n+\t\t\t     UNSPEC_ADDV)))]\n+ \"TARGET_SIMD\"\n+ \"add<VDQV_E:vp>\\\\t%<VDQV_E:Vetype>0, %1.<VDQV_E:Vtype>\"\n+  [(set_attr \"type\" \"neon_reduc_add<VDQV_E:q>\")]\n+)\n+\n (define_insn \"aarch64_reduc_plus_internalv2si\"\n  [(set (match_operand:V2SI 0 \"register_operand\" \"=w\")\n        (unspec:V2SI [(match_operand:V2SI 1 \"register_operand\" \"w\")]"}, {"sha": "7ad4e918578bae5734647af700c23224261f2504", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9921bbf9b2e27568d952fe6ee5bc083c93bbf7fd/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9921bbf9b2e27568d952fe6ee5bc083c93bbf7fd/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=9921bbf9b2e27568d952fe6ee5bc083c93bbf7fd", "patch": "@@ -4848,7 +4848,6 @@\n {\n   rtx v = gen_reg_rtx (V8QImode);\n   rtx v1 = gen_reg_rtx (V8QImode);\n-  rtx r = gen_reg_rtx (QImode);\n   rtx in = operands[1];\n   rtx out = operands[0];\n   if(<MODE>mode == SImode)\n@@ -4862,8 +4861,7 @@\n     }\n   emit_move_insn (v, gen_lowpart (V8QImode, in));\n   emit_insn (gen_popcountv8qi2 (v1, v));\n-  emit_insn (gen_reduc_plus_scal_v8qi (r, v1));\n-  emit_insn (gen_zero_extendqi<mode>2 (out, r));\n+  emit_insn (gen_aarch64_zero_extend<mode>_reduc_plus_v8qi (out, v1));\n   DONE;\n })\n "}, {"sha": "d17d79a30daee3161a2d92b0339c1f1efa50505d", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9921bbf9b2e27568d952fe6ee5bc083c93bbf7fd/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9921bbf9b2e27568d952fe6ee5bc083c93bbf7fd/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=9921bbf9b2e27568d952fe6ee5bc083c93bbf7fd", "patch": "@@ -208,6 +208,9 @@\n ;; Advanced SIMD modes (except V2DI) for Integer reduction across lanes.\n (define_mode_iterator VDQV_S [V8QI V16QI V4HI V8HI V4SI])\n \n+;; Advanced SIMD modes for Integer reduction across lanes (zero/sign extended).\n+(define_mode_iterator VDQV_E [V8QI V16QI V4HI V8HI])\n+\n ;; All double integer narrow-able modes.\n (define_mode_iterator VDN [V4HI V2SI DI])\n "}, {"sha": "18d643485d6449c4e264fb8848eb1f4ce1742829", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9921bbf9b2e27568d952fe6ee5bc083c93bbf7fd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9921bbf9b2e27568d952fe6ee5bc083c93bbf7fd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9921bbf9b2e27568d952fe6ee5bc083c93bbf7fd", "patch": "@@ -1,3 +1,7 @@\n+2020-02-12  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* gcc.target/aarch64/popcnt2.c: New test.\n+\n 2020-02-12  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/88819"}, {"sha": "e321858afa4d6ecb6fc7348f39f6e5c6c0c46147", "filename": "gcc/testsuite/gcc.target/aarch64/popcnt2.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9921bbf9b2e27568d952fe6ee5bc083c93bbf7fd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpopcnt2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9921bbf9b2e27568d952fe6ee5bc083c93bbf7fd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpopcnt2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpopcnt2.c?ref=9921bbf9b2e27568d952fe6ee5bc083c93bbf7fd", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+unsigned\n+foo (int x)\n+{\n+  return __builtin_popcount (x);\n+}\n+\n+unsigned long\n+foo1 (int x)\n+{\n+  return __builtin_popcount (x);\n+}\n+\n+/* { dg-final { scan-assembler-not {popcount} } } */\n+/* { dg-final { scan-assembler-times {cnt\\t} 2 } } */\n+/* { dg-final { scan-assembler-times {fmov} 4 } } */\n+/* { dg-final { scan-assembler-not {umov} } } */\n+/* { dg-final { scan-assembler-not {uxtw} } } */\n+/* { dg-final { scan-assembler-not {sxtw} } } */"}]}