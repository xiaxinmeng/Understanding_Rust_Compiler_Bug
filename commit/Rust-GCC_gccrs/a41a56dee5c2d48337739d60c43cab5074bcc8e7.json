{"sha": "a41a56dee5c2d48337739d60c43cab5074bcc8e7", "node_id": "C_kwDOANBUbNoAKGE0MWE1NmRlZTVjMmQ0ODMzNzczOWQ2MGM0M2NhYjUwNzRiY2M4ZTc", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-02-24T21:28:11Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-02-28T09:49:11Z"}, "message": "libstdc++: Add likely/unlikely attributes to <codecvt> implementation\n\nFor the common case of converting valid text this improves performance\nsignificantly.\n\nlibstdc++-v3/ChangeLog:\n\n\t* src/c++11/codecvt.cc: Add [[likely]] and [[unlikely]]\n\tattributes.", "tree": {"sha": "466731623cafe17f500f0c240bc042da9984c228", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/466731623cafe17f500f0c240bc042da9984c228"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a41a56dee5c2d48337739d60c43cab5074bcc8e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a41a56dee5c2d48337739d60c43cab5074bcc8e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a41a56dee5c2d48337739d60c43cab5074bcc8e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a41a56dee5c2d48337739d60c43cab5074bcc8e7/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1375d975d9b14c65255e17fdfe0f2908936f312", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1375d975d9b14c65255e17fdfe0f2908936f312", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1375d975d9b14c65255e17fdfe0f2908936f312"}], "stats": {"total": 92, "additions": 46, "deletions": 46}, "files": [{"sha": "02f05752de84139a7eb7c3d40946b61f4c0334cf", "filename": "libstdc++-v3/src/c++11/codecvt.cc", "status": "modified", "additions": 46, "deletions": 46, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a41a56dee5c2d48337739d60c43cab5074bcc8e7/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcodecvt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a41a56dee5c2d48337739d60c43cab5074bcc8e7/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcodecvt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcodecvt.cc?ref=a41a56dee5c2d48337739d60c43cab5074bcc8e7", "patch": "@@ -256,19 +256,19 @@ namespace\n       return incomplete_mb_character;\n     char32_t c1 = (unsigned char) from[0];\n     // https://en.wikipedia.org/wiki/UTF-8#Sample_code\n-    if (c1 < 0x80)\n+    if (c1 < 0x80) [[likely]]\n     {\n       ++from;\n       return c1;\n     }\n-    else if (c1 < 0xC2) // continuation or overlong 2-byte sequence\n+    else if (c1 < 0xC2) [[unlikely]] // continuation or overlong 2-byte sequence\n       return invalid_mb_sequence;\n     else if (c1 < 0xE0) // 2-byte sequence\n     {\n-      if (avail < 2)\n+      if (avail < 2) [[unlikely]]\n \treturn incomplete_mb_character;\n       char32_t c2 = (unsigned char) from[1];\n-      if ((c2 & 0xC0) != 0x80)\n+      if ((c2 & 0xC0) != 0x80) [[unlikely]]\n \treturn invalid_mb_sequence;\n       char32_t c = (c1 << 6) + c2 - 0x3080;\n       if (c <= maxcode)\n@@ -277,17 +277,17 @@ namespace\n     }\n     else if (c1 < 0xF0) // 3-byte sequence\n     {\n-      if (avail < 2)\n+      if (avail < 2) [[unlikely]]\n \treturn incomplete_mb_character;\n       char32_t c2 = (unsigned char) from[1];\n-      if ((c2 & 0xC0) != 0x80)\n+      if ((c2 & 0xC0) != 0x80) [[unlikely]]\n \treturn invalid_mb_sequence;\n-      if (c1 == 0xE0 && c2 < 0xA0) // overlong\n+      if (c1 == 0xE0 && c2 < 0xA0) [[unlikely]] // overlong\n \treturn invalid_mb_sequence;\n-      if (avail < 3)\n+      if (avail < 3) [[unlikely]]\n \treturn incomplete_mb_character;\n       char32_t c3 = (unsigned char) from[2];\n-      if ((c3 & 0xC0) != 0x80)\n+      if ((c3 & 0xC0) != 0x80) [[unlikely]]\n \treturn invalid_mb_sequence;\n       char32_t c = (c1 << 12) + (c2 << 6) + c3 - 0xE2080;\n       if (c <= maxcode)\n@@ -296,31 +296,31 @@ namespace\n     }\n     else if (c1 < 0xF5 && maxcode > 0xFFFF) // 4-byte sequence\n     {\n-      if (avail < 2)\n+      if (avail < 2) [[unlikely]]\n \treturn incomplete_mb_character;\n       char32_t c2 = (unsigned char) from[1];\n-      if ((c2 & 0xC0) != 0x80)\n+      if ((c2 & 0xC0) != 0x80) [[unlikely]]\n \treturn invalid_mb_sequence;\n-      if (c1 == 0xF0 && c2 < 0x90) // overlong\n+      if (c1 == 0xF0 && c2 < 0x90) [[unlikely]] // overlong\n \treturn invalid_mb_sequence;\n-      if (c1 == 0xF4 && c2 >= 0x90) // > U+10FFFF\n+      if (c1 == 0xF4 && c2 >= 0x90) [[unlikely]] // > U+10FFFF\n \treturn invalid_mb_sequence;\n-      if (avail < 3)\n+      if (avail < 3) [[unlikely]]\n \treturn incomplete_mb_character;\n       char32_t c3 = (unsigned char) from[2];\n-      if ((c3 & 0xC0) != 0x80)\n+      if ((c3 & 0xC0) != 0x80) [[unlikely]]\n \treturn invalid_mb_sequence;\n-      if (avail < 4)\n+      if (avail < 4) [[unlikely]]\n \treturn incomplete_mb_character;\n       char32_t c4 = (unsigned char) from[3];\n-      if ((c4 & 0xC0) != 0x80)\n+      if ((c4 & 0xC0) != 0x80) [[unlikely]]\n \treturn invalid_mb_sequence;\n       char32_t c = (c1 << 18) + (c2 << 12) + (c3 << 6) + c4 - 0x3C82080;\n       if (c <= maxcode)\n \tfrom += 4;\n       return c;\n     }\n-    else // > U+10FFFF\n+    else [[unlikely]] // > U+10FFFF\n       return invalid_mb_sequence;\n   }\n \n@@ -330,35 +330,35 @@ namespace\n   {\n     if (code_point < 0x80)\n       {\n-\tif (to.size() < 1)\n+\tif (to.size() < 1) [[unlikely]]\n \t  return false;\n \tto = code_point;\n       }\n     else if (code_point <= 0x7FF)\n       {\n-\tif (to.size() < 2)\n+\tif (to.size() < 2) [[unlikely]]\n \t  return false;\n \tto = (code_point >> 6) + 0xC0;\n \tto = (code_point & 0x3F) + 0x80;\n       }\n     else if (code_point <= 0xFFFF)\n       {\n-\tif (to.size() < 3)\n+\tif (to.size() < 3) [[unlikely]]\n \t  return false;\n \tto = (code_point >> 12) + 0xE0;\n \tto = ((code_point >> 6) & 0x3F) + 0x80;\n \tto = (code_point & 0x3F) + 0x80;\n       }\n     else if (code_point <= 0x10FFFF)\n       {\n-\tif (to.size() < 4)\n+\tif (to.size() < 4) [[unlikely]]\n \t  return false;\n \tto = (code_point >> 18) + 0xF0;\n \tto = ((code_point >> 12) & 0x3F) + 0x80;\n \tto = ((code_point >> 6) & 0x3F) + 0x80;\n \tto = (code_point & 0x3F) + 0x80;\n       }\n-    else\n+    else [[unlikely]]\n       return false;\n     return true;\n   }\n@@ -403,24 +403,24 @@ namespace\n \t\t\t  unsigned long maxcode, codecvt_mode mode)\n     {\n       const size_t avail = from.size();\n-      if (avail == 0)\n+      if (avail == 0) [[unlikely]]\n \treturn incomplete_mb_character;\n       int inc = 1;\n       char32_t c = adjust_byte_order(from[0], mode);\n       if (is_high_surrogate(c))\n \t{\n-\t  if (avail < 2)\n+\t  if (avail < 2) [[unlikely]]\n \t    return incomplete_mb_character;\n \t  const char16_t c2 = adjust_byte_order(from[1], mode);\n-\t  if (is_low_surrogate(c2))\n+\t  if (is_low_surrogate(c2)) [[likely]]\n \t    {\n \t      c = surrogate_pair_to_code_point(c, c2);\n \t      inc = 2;\n \t    }\n \t  else\n \t    return invalid_mb_sequence;\n \t}\n-      else if (is_low_surrogate(c))\n+      else if (is_low_surrogate(c)) [[unlikely]]\n \treturn invalid_mb_sequence;\n       if (c <= maxcode)\n \tfrom += inc;\n@@ -464,9 +464,9 @@ namespace\n     while (from.size() && to.size())\n       {\n \tconst char32_t codepoint = read_utf8_code_point(from, maxcode);\n-\tif (codepoint == incomplete_mb_character)\n+\tif (codepoint == incomplete_mb_character) [[unlikely]]\n \t  return codecvt_base::partial;\n-\tif (codepoint > maxcode)\n+\tif (codepoint > maxcode) [[unlikely]]\n \t  return codecvt_base::error;\n \tto = codepoint;\n       }\n@@ -479,14 +479,14 @@ namespace\n   ucs4_out(range<const char32_t>& from, range<C>& to,\n            unsigned long maxcode = max_code_point, codecvt_mode mode = {})\n   {\n-    if (!write_utf8_bom(to, mode))\n+    if (!write_utf8_bom(to, mode)) [[unlikely]]\n       return codecvt_base::partial;\n     while (from.size())\n       {\n \tconst char32_t c = from[0];\n-\tif (c > maxcode)\n+\tif (c > maxcode) [[unlikely]]\n \t  return codecvt_base::error;\n-\tif (!write_utf8_code_point(to, c))\n+\tif (!write_utf8_code_point(to, c)) [[unlikely]]\n \t  return codecvt_base::partial;\n \t++from;\n       }\n@@ -502,9 +502,9 @@ namespace\n     while (from.size() && to.size())\n       {\n \tconst char32_t codepoint = read_utf16_code_point(from, maxcode, mode);\n-\tif (codepoint == incomplete_mb_character)\n+\tif (codepoint == incomplete_mb_character) [[unlikely]]\n \t  return codecvt_base::partial;\n-\tif (codepoint > maxcode)\n+\tif (codepoint > maxcode) [[unlikely]]\n \t  return codecvt_base::error;\n \tto = codepoint;\n       }\n@@ -516,14 +516,14 @@ namespace\n   ucs4_out(range<const char32_t>& from, range<char16_t, false>& to,\n            unsigned long maxcode = max_code_point, codecvt_mode mode = {})\n   {\n-    if (!write_utf16_bom(to, mode))\n+    if (!write_utf16_bom(to, mode)) [[unlikely]]\n       return codecvt_base::partial;\n     while (from.size())\n       {\n \tconst char32_t c = from[0];\n-\tif (c > maxcode)\n+\tif (c > maxcode) [[unlikely]]\n \t  return codecvt_base::error;\n-\tif (!write_utf16_code_point(to, c, mode))\n+\tif (!write_utf16_code_point(to, c, mode)) [[unlikely]]\n \t  return codecvt_base::partial;\n \t++from;\n       }\n@@ -544,11 +544,11 @@ namespace\n       {\n \tauto orig = from;\n \tconst char32_t codepoint = read_utf8_code_point(from, maxcode);\n-\tif (codepoint == incomplete_mb_character)\n+\tif (codepoint == incomplete_mb_character) [[unlikely]]\n \t  return codecvt_base::partial;\n \tif (codepoint > maxcode)\n \t  return codecvt_base::error;\n-\tif (!write_utf16_code_point(to, codepoint, mode))\n+\tif (!write_utf16_code_point(to, codepoint, mode)) [[unlikely]]\n \t  {\n \t    from = orig; // rewind to previous position\n \t    return codecvt_base::partial;\n@@ -564,34 +564,34 @@ namespace\n \t    unsigned long maxcode = max_code_point, codecvt_mode mode = {},\n \t    surrogates s = surrogates::allowed)\n   {\n-    if (!write_utf8_bom(to, mode))\n+    if (!write_utf8_bom(to, mode)) [[unlikely]]\n       return codecvt_base::partial;\n     while (from.size())\n       {\n \tchar32_t c = from[0];\n \tint inc = 1;\n \tif (is_high_surrogate(c))\n \t  {\n-\t    if (s == surrogates::disallowed)\n+\t    if (s == surrogates::disallowed) [[unlikely]]\n \t      return codecvt_base::error; // No surrogates in UCS-2\n \n-\t    if (from.size() < 2)\n+\t    if (from.size() < 2) [[unlikely]]\n \t      return codecvt_base::partial; // stop converting at this point\n \n \t    const char32_t c2 = from[1];\n-\t    if (is_low_surrogate(c2))\n+\t    if (is_low_surrogate(c2)) [[likely]]\n \t      {\n \t\tc = surrogate_pair_to_code_point(c, c2);\n \t\tinc = 2;\n \t      }\n \t    else\n \t      return codecvt_base::error;\n \t  }\n-\telse if (is_low_surrogate(c))\n+\telse if (is_low_surrogate(c)) [[unlikely]]\n \t  return codecvt_base::error;\n-\tif (c > maxcode)\n+\tif (c > maxcode) [[unlikely]]\n \t  return codecvt_base::error;\n-\tif (!write_utf8_code_point(to, c))\n+\tif (!write_utf8_code_point(to, c)) [[unlikely]]\n \t  return codecvt_base::partial;\n \tfrom += inc;\n       }"}]}