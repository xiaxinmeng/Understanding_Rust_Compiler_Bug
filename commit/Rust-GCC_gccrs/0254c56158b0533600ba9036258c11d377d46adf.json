{"sha": "0254c56158b0533600ba9036258c11d377d46adf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDI1NGM1NjE1OGIwNTMzNjAwYmE5MDM2MjU4YzExZDM3N2Q0NmFkZg==", "commit": {"author": {"name": "John Carr", "email": "jfc@mit.edu", "date": "1998-06-10T06:00:50Z"}, "committer": {"name": "John Carr", "email": "jfc@gcc.gnu.org", "date": "1998-06-10T06:00:50Z"}, "message": "reload1.c (reload_cse_simplify_operands): Do not call gen_rtx_REG for each alternative.\n\nWed Jun 10 08:56:27 1998  John Carr  <jfc@mit.edu>\n\t* reload1.c (reload_cse_simplify_operands): Do not call gen_rtx_REG\n\tfor each alternative.  Do not replace a CONST_INT with a REG unless\n\tthe reg is cheaper.\n\nFrom-SVN: r20402", "tree": {"sha": "c2e4c3d9047c45c102dda90162c826873df79eed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2e4c3d9047c45c102dda90162c826873df79eed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0254c56158b0533600ba9036258c11d377d46adf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0254c56158b0533600ba9036258c11d377d46adf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0254c56158b0533600ba9036258c11d377d46adf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0254c56158b0533600ba9036258c11d377d46adf/comments", "author": {"login": "VoxSciurorum", "id": 60116679, "node_id": "MDQ6VXNlcjYwMTE2Njc5", "avatar_url": "https://avatars.githubusercontent.com/u/60116679?v=4", "gravatar_id": "", "url": "https://api.github.com/users/VoxSciurorum", "html_url": "https://github.com/VoxSciurorum", "followers_url": "https://api.github.com/users/VoxSciurorum/followers", "following_url": "https://api.github.com/users/VoxSciurorum/following{/other_user}", "gists_url": "https://api.github.com/users/VoxSciurorum/gists{/gist_id}", "starred_url": "https://api.github.com/users/VoxSciurorum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/VoxSciurorum/subscriptions", "organizations_url": "https://api.github.com/users/VoxSciurorum/orgs", "repos_url": "https://api.github.com/users/VoxSciurorum/repos", "events_url": "https://api.github.com/users/VoxSciurorum/events{/privacy}", "received_events_url": "https://api.github.com/users/VoxSciurorum/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "71e89f27cd7276f25b80a24edafa66a25ccf2e99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71e89f27cd7276f25b80a24edafa66a25ccf2e99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71e89f27cd7276f25b80a24edafa66a25ccf2e99"}], "stats": {"total": 23, "additions": 20, "deletions": 3}, "files": [{"sha": "4376465c9aae8b1e501608b9f2633d2e88a9ca2a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0254c56158b0533600ba9036258c11d377d46adf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0254c56158b0533600ba9036258c11d377d46adf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0254c56158b0533600ba9036258c11d377d46adf", "patch": "@@ -1,3 +1,9 @@\n+Wed Jun 10 08:56:27 1998  John Carr  <jfc@mit.edu>\n+\n+\t* reload1.c (reload_cse_simplify_operands): Do not call gen_rtx_REG\n+\tfor each alternative.  Do not replace a CONST_INT with a REG unless\n+\tthe reg is cheaper.\n+\n Wed Jun 10 02:11:55 1998  Jeffrey A Law  (law@cygnus.com)\n \n \t* reload.c (find_reloads_toplev): Use gen_lowpart common to convert"}, {"sha": "23ad43933e9b60ca775e29ad3b8e3293ef767787", "filename": "gcc/reload1.c", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0254c56158b0533600ba9036258c11d377d46adf/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0254c56158b0533600ba9036258c11d377d46adf/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=0254c56158b0533600ba9036258c11d377d46adf", "patch": "@@ -8481,6 +8481,11 @@ reload_cse_simplify_set (set, insn)\n       && MEMORY_MOVE_COST (GET_MODE (src), dclass, 1) < 2)\n     return 0;\n \n+  /* If the constant is cheaper than a register, don't change it.  */\n+  if (CONSTANT_P (src)\n+      && rtx_cost (src, SET) < 2)\n+    return 0;\n+\n   dest_mode = GET_MODE (SET_DEST (set));\n   for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n     {\n@@ -8542,6 +8547,7 @@ reload_cse_simplify_operands (insn)\n   int *op_alt_regno[MAX_RECOG_OPERANDS];\n   /* Array of alternatives, sorted in order of decreasing desirability.  */\n   int *alternative_order;\n+  rtx reg = gen_rtx_REG (VOIDmode, -1);\n   \n   /* Find out some information about this insn.  */\n   insn_code_number = recog_memoized (insn);\n@@ -8608,6 +8614,9 @@ reload_cse_simplify_operands (insn)\n \t  if (! reload_cse_regno_equal_p (regno, recog_operand[i], mode))\n \t    continue;\n \n+\t  REGNO (reg) = regno;\n+\t  PUT_MODE (reg, mode);\n+\n \t  /* We found a register equal to this operand.  Now look for all\n \t     alternatives that can accept this register and have not been\n \t     assigned a register they can use yet.  */\n@@ -8647,10 +8656,12 @@ reload_cse_simplify_operands (insn)\n \t\tcase ',': case '\\0':\n \t\t  /* See if REGNO fits this alternative, and set it up as the\n \t\t     replacement register if we don't have one for this\n-\t\t     alternative yet.  */\n+\t\t     alternative yet and the operand being replaced is not\n+\t\t     a cheap CONST_INT. */\n \t\t  if (op_alt_regno[i][j] == -1\n-\t\t      && reg_fits_class_p (gen_rtx_REG (mode, regno), class,\n-\t\t\t\t\t   0, mode))\n+\t\t      && reg_fits_class_p (reg, class, 0, mode)\n+\t\t      && (GET_CODE (recog_operand[i]) != CONST_INT\n+\t\t\t  || rtx_cost (recog_operand[i], SET) > rtx_cost (reg, SET)))\n \t\t    {\n \t\t      alternative_nregs[j]++;\n \t\t      op_alt_regno[i][j] = regno;"}]}