{"sha": "db430f6a2a5997bed3109eff088c4e86020378d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGI0MzBmNmEyYTU5OTdiZWQzMTA5ZWZmMDg4YzRlODYwMjAzNzhkMA==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2007-07-03T16:50:05Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2007-07-03T16:50:05Z"}, "message": "Fortran frontend:\n\n2007-07-03  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\t* trans-decl.c (gfc_build_builtin_function_decls): Mark\n\tinternal_realloc as a malloc function.\n\nlibgfortran:\n\n2007-07-03  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\t* libgfortran.h: Mark internal_malloc_size as a malloc function.\n\t* runtime/memory.c (internal_realloc_size): Remove.\n\t(internal_realloc): Call realloc directly instead of\n\tinternal_realloc_size.\n\t(allocate_size): Remove.\n\t(allocate): Call malloc directly instead of allocate_size, mark as\n\tmalloc function.\n\nFrom-SVN: r126264", "tree": {"sha": "030df243de19137f076b9781c368c93c9546558d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/030df243de19137f076b9781c368c93c9546558d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db430f6a2a5997bed3109eff088c4e86020378d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db430f6a2a5997bed3109eff088c4e86020378d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db430f6a2a5997bed3109eff088c4e86020378d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db430f6a2a5997bed3109eff088c4e86020378d0/comments", "author": null, "committer": null, "parents": [{"sha": "66965e909473fef6462b537cdc4010b79d86159e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66965e909473fef6462b537cdc4010b79d86159e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66965e909473fef6462b537cdc4010b79d86159e"}], "stats": {"total": 92, "additions": 45, "deletions": 47}, "files": [{"sha": "1ee186203bf71bccee628a78f22f4671c13a44ee", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db430f6a2a5997bed3109eff088c4e86020378d0/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db430f6a2a5997bed3109eff088c4e86020378d0/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=db430f6a2a5997bed3109eff088c4e86020378d0", "patch": "@@ -1,3 +1,8 @@\n+2007-07-03  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\t* trans-decl.c (gfc_build_builtin_function_decls): Mark\n+\tinternal_realloc as a malloc function.\n+\n 2007-07-03  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/20888"}, {"sha": "06842f30af82f60138ca7d00be632b8d535f713e", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db430f6a2a5997bed3109eff088c4e86020378d0/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db430f6a2a5997bed3109eff088c4e86020378d0/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=db430f6a2a5997bed3109eff088c4e86020378d0", "patch": "@@ -2276,6 +2276,7 @@ gfc_build_builtin_function_decls (void)\n \t\t\t\t     (PREFIX(\"internal_realloc\")),\n \t\t\t\t     pvoid_type_node, 2, pvoid_type_node,\n \t\t\t\t     gfc_index_int_type_node);\n+  DECL_IS_MALLOC (gfor_fndecl_internal_realloc) = 1;\n \n   gfor_fndecl_allocate =\n     gfc_build_library_function_decl (get_identifier (PREFIX(\"allocate\")),"}, {"sha": "631e2a5da6426c62d7d485a78d822a142cd5f098", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db430f6a2a5997bed3109eff088c4e86020378d0/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db430f6a2a5997bed3109eff088c4e86020378d0/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=db430f6a2a5997bed3109eff088c4e86020378d0", "patch": "@@ -1,3 +1,13 @@\n+2007-07-03  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\t* libgfortran.h: Mark internal_malloc_size as a malloc function.\n+\t* runtime/memory.c (internal_realloc_size): Remove.\n+\t(internal_realloc): Call realloc directly instead of\n+\tinternal_realloc_size.\n+\t(allocate_size): Remove.\n+\t(allocate): Call malloc directly instead of allocate_size, mark as\n+\tmalloc function.\n+\n 2007-07-02  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tRestore collateral damage from ISO C Binding merge."}, {"sha": "8a86f41785d666d78ce1e073b9ccd1d6acf1c482", "filename": "libgfortran/libgfortran.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db430f6a2a5997bed3109eff088c4e86020378d0/libgfortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db430f6a2a5997bed3109eff088c4e86020378d0/libgfortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Flibgfortran.h?ref=db430f6a2a5997bed3109eff088c4e86020378d0", "patch": "@@ -634,7 +634,7 @@ internal_proto(get_mem);\n extern void free_mem (void *);\n internal_proto(free_mem);\n \n-extern void *internal_malloc_size (size_t);\n+extern void *internal_malloc_size (size_t) __attribute__ ((malloc));\n internal_proto(internal_malloc_size);\n \n /* environ.c */"}, {"sha": "f1991cda324a8f945fba1ceb9ca6c7ba75188b44", "filename": "libgfortran/runtime/memory.c", "status": "modified", "additions": 28, "deletions": 46, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db430f6a2a5997bed3109eff088c4e86020378d0/libgfortran%2Fruntime%2Fmemory.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db430f6a2a5997bed3109eff088c4e86020378d0/libgfortran%2Fruntime%2Fmemory.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fmemory.c?ref=db430f6a2a5997bed3109eff088c4e86020378d0", "patch": "@@ -82,26 +82,6 @@ internal_malloc_size (size_t size)\n    Allocate a new block if MEM is zero, and free the block if\n    SIZE is 0.  */\n \n-static void *\n-internal_realloc_size (void *mem, size_t size)\n-{\n-  if (size == 0)\n-    {\n-      if (mem)\n-\tfree (mem);\n-      return NULL;\n-    }\n-\n-  if (mem == 0)\n-    return get_mem (size);\n-\n-  mem = realloc (mem, size);\n-  if (!mem)\n-    os_error (\"Out of memory.\");\n-\n-  return mem;\n-}\n-\n extern void *internal_realloc (void *, index_type);\n export_proto(internal_realloc);\n \n@@ -113,41 +93,28 @@ internal_realloc (void *mem, index_type size)\n   if (size < 0)\n     runtime_error (\"Attempt to allocate a negative amount of memory.\");\n #endif\n-  return internal_realloc_size (mem, (size_t) size);\n+  mem = realloc (mem, size);\n+  if (!mem && size != 0)\n+    os_error (\"Out of memory.\");\n+  \n+  if (size == 0)\n+      return NULL;\n+\n+  return mem;\n }\n \n+\n /* User-allocate, one call for each member of the alloc-list of an\n    ALLOCATE statement. */\n \n-static void *\n-allocate_size (size_t size, GFC_INTEGER_4 * stat)\n-{\n-  void *newmem;\n-\n-  newmem = malloc (size ? size : 1);\n-  if (!newmem)\n-    {\n-      if (stat)\n-\t{\n-\t  *stat = ERROR_ALLOCATION;\n-\t  return newmem;\n-\t}\n-      else\n-\truntime_error (\"ALLOCATE: Out of memory.\");\n-    }\n-\n-  if (stat)\n-    *stat = 0;\n-\n-  return newmem;\n-}\n-\n-extern void *allocate (index_type, GFC_INTEGER_4 *);\n+extern void *allocate (index_type, GFC_INTEGER_4 *) __attribute__ ((malloc));\n export_proto(allocate);\n \n void *\n allocate (index_type size, GFC_INTEGER_4 * stat)\n {\n+  void *newmem;\n+\n #ifdef GFC_CHECK_MEMORY\n   /* The only time this can happen is the size computed by the\n      frontend wraps around.  */\n@@ -163,7 +130,22 @@ allocate (index_type size, GFC_INTEGER_4 * stat)\n \t\t       \"Possible integer overflow\");\n     }\n #endif\n-  return allocate_size ((size_t) size, stat);\n+  newmem = malloc (size ? size : 1);\n+  if (!newmem)\n+    {\n+      if (stat)\n+\t{\n+\t  *stat = ERROR_ALLOCATION;\n+\t  return newmem;\n+\t}\n+      else\n+\truntime_error (\"ALLOCATE: Out of memory.\");\n+    }\n+\n+  if (stat)\n+    *stat = 0;\n+\n+  return newmem;\n }\n \n /* Function to call in an ALLOCATE statement when the argument is an"}]}