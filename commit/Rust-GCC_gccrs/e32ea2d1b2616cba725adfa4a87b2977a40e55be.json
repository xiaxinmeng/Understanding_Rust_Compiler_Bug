{"sha": "e32ea2d1b2616cba725adfa4a87b2977a40e55be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTMyZWEyZDFiMjYxNmNiYTcyNWFkZmE0YTg3YjI5NzdhNDBlNTViZQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2011-12-22T21:28:40Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2011-12-22T21:28:40Z"}, "message": "tm.texi.in (TARGET_PREPARE_PCH_SAVE): New hook.\n\ngcc/\n\t* doc/tm.texi.in (TARGET_PREPARE_PCH_SAVE): New hook.\n\t* doc/tm.texi: Regenerate.\n\t* target.def (prepare_pch_save): New hook.\n\t* c-family/c-pch.c (c_common_write_pch): Call it.\n\t* config/mips/mips.c (was_mips16_pch_p): Delete.\n\t(mips_set_mips16_mode): Don't refer to was_mips16_pch_p.\n\t(mips_prepare_pch_save): New function.\n\t(TARGET_PREPARE_PCH_SAVE): Define.\n\nFrom-SVN: r182640", "tree": {"sha": "86c95c2ba1ad59a3914d1b821fdd7358f55e43ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86c95c2ba1ad59a3914d1b821fdd7358f55e43ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e32ea2d1b2616cba725adfa4a87b2977a40e55be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e32ea2d1b2616cba725adfa4a87b2977a40e55be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e32ea2d1b2616cba725adfa4a87b2977a40e55be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e32ea2d1b2616cba725adfa4a87b2977a40e55be/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dcf3062542089393814c0dbda875ec6a30a6b0b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcf3062542089393814c0dbda875ec6a30a6b0b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcf3062542089393814c0dbda875ec6a30a6b0b0"}], "stats": {"total": 74, "additions": 64, "deletions": 10}, "files": [{"sha": "711e39a8b07dfa0ab35cd737b1d35d6c1e377617", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e32ea2d1b2616cba725adfa4a87b2977a40e55be/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e32ea2d1b2616cba725adfa4a87b2977a40e55be/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e32ea2d1b2616cba725adfa4a87b2977a40e55be", "patch": "@@ -1,3 +1,14 @@\n+2011-12-22  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* doc/tm.texi.in (TARGET_PREPARE_PCH_SAVE): New hook.\n+\t* doc/tm.texi: Regenerate.\n+\t* target.def (prepare_pch_save): New hook.\n+\t* c-family/c-pch.c (c_common_write_pch): Call it.\n+\t* config/mips/mips.c (was_mips16_pch_p): Delete.\n+\t(mips_set_mips16_mode): Don't refer to was_mips16_pch_p.\n+\t(mips_prepare_pch_save): New function.\n+\t(TARGET_PREPARE_PCH_SAVE): Define.\n+\n 2011-12-22  Aldy Hernandez  <aldyh@redhat.com>\n \n \tPR middle-end/51212"}, {"sha": "8d34e0949d536525d900c4880647f81e70b05a21", "filename": "gcc/c-family/c-pch.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e32ea2d1b2616cba725adfa4a87b2977a40e55be/gcc%2Fc-family%2Fc-pch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e32ea2d1b2616cba725adfa4a87b2977a40e55be/gcc%2Fc-family%2Fc-pch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pch.c?ref=e32ea2d1b2616cba725adfa4a87b2977a40e55be", "patch": "@@ -180,6 +180,8 @@ c_common_write_pch (void)\n \n   timevar_push (TV_PCH_SAVE);\n \n+  targetm.prepare_pch_save ();\n+\n   (*debug_hooks->handle_pch) (1);\n \n   cpp_write_pch_deps (parse_in, pch_outfile);"}, {"sha": "cf908f6abbe8f7fa1ff9f4cc98f8519b6c87d7c8", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 33, "deletions": 10, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e32ea2d1b2616cba725adfa4a87b2977a40e55be/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e32ea2d1b2616cba725adfa4a87b2977a40e55be/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=e32ea2d1b2616cba725adfa4a87b2977a40e55be", "patch": "@@ -15208,23 +15208,16 @@ mips_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n }\n \f\n /* The last argument passed to mips_set_mips16_mode, or negative if the\n-   function hasn't been called yet.\n-\n-   There are two copies of this information.  One is saved and restored\n-   by the PCH process while the other is specific to this compiler\n-   invocation.  The information calculated by mips_set_mips16_mode\n-   is invalid unless the two variables are the same.  */\n+   function hasn't been called yet.  */\n static int was_mips16_p = -1;\n-static GTY(()) int was_mips16_pch_p = -1;\n \n /* Set up the target-dependent global state so that it matches the\n    current function's ISA mode.  */\n \n static void\n mips_set_mips16_mode (int mips16_p)\n {\n-  if (mips16_p == was_mips16_p\n-      && mips16_p == was_mips16_pch_p)\n+  if (mips16_p == was_mips16_p)\n     return;\n \n   /* Restore base settings of various flags.  */\n@@ -15321,7 +15314,6 @@ mips_set_mips16_mode (int mips16_p)\n     restore_target_globals (&default_target_globals);\n \n   was_mips16_p = mips16_p;\n-  was_mips16_pch_p = mips16_p;\n }\n \n /* Implement TARGET_SET_CURRENT_FUNCTION.  Decide whether the current\n@@ -16336,6 +16328,34 @@ mips_shift_truncation_mask (enum machine_mode mode)\n   return GET_MODE_BITSIZE (mode) - 1;\n }\n \n+/* Implement TARGET_PREPARE_PCH_SAVE.  */\n+\n+static void\n+mips_prepare_pch_save (void)\n+{\n+  /* We are called in a context where the current MIPS16 vs. non-MIPS16\n+     setting should be irrelevant.  The question then is: which setting\n+     makes most sense at load time?\n+\n+     The PCH is loaded before the first token is read.  We should never\n+     have switched into MIPS16 mode by that point, and thus should not\n+     have populated mips16_globals.  Nor can we load the entire contents\n+     of mips16_globals from the PCH file, because mips16_globals contains\n+     a combination of GGC and non-GGC data.\n+\n+     There is therefore no point in trying save the GGC part of\n+     mips16_globals to the PCH file, or to preserve MIPS16ness across\n+     the PCH save and load.  The loading compiler would not have access\n+     to the non-GGC parts of mips16_globals (either from the PCH file,\n+     or from a copy that the loading compiler generated itself) and would\n+     have to call target_reinit anyway.\n+\n+     It therefore seems best to switch back to non-MIPS16 mode at\n+     save time, and to ensure that mips16_globals remains null after\n+     a PCH load.  */\n+  mips_set_mips16_mode (false);\n+  mips16_globals = 0;\n+}\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ASM_ALIGNED_HI_OP\n@@ -16555,6 +16575,9 @@ mips_shift_truncation_mask (enum machine_mode mode)\n #undef TARGET_SHIFT_TRUNCATION_MASK\n #define TARGET_SHIFT_TRUNCATION_MASK mips_shift_truncation_mask\n \n+#undef TARGET_PREPARE_PCH_SAVE\n+#define TARGET_PREPARE_PCH_SAVE mips_prepare_pch_save\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n #include \"gt-mips.h\""}, {"sha": "6d41cee8975e1def45094ee8eb62e1d162cd4c95", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e32ea2d1b2616cba725adfa4a87b2977a40e55be/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e32ea2d1b2616cba725adfa4a87b2977a40e55be/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=e32ea2d1b2616cba725adfa4a87b2977a40e55be", "patch": "@@ -10079,6 +10079,13 @@ of @code{target_flags}.  @var{pch_flags} specifies the value that\n value is the same as for @code{TARGET_PCH_VALID_P}.\n @end deftypefn\n \n+@deftypefn {Target Hook} void TARGET_PREPARE_PCH_SAVE (void)\n+Called before writing out a PCH file.  If the target has some\n+garbage-collected data that needs to be in a particular state on PCH loads,\n+it can use this hook to enforce that state.  Very few targets need\n+to do anything here.\n+@end deftypefn\n+\n @node C++ ABI\n @section C++ ABI parameters\n @cindex parameters, c++ abi"}, {"sha": "396f244bbc8a0f95e05023b3c9a14f6b2f94a2bb", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e32ea2d1b2616cba725adfa4a87b2977a40e55be/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e32ea2d1b2616cba725adfa4a87b2977a40e55be/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=e32ea2d1b2616cba725adfa4a87b2977a40e55be", "patch": "@@ -9974,6 +9974,8 @@ of @code{target_flags}.  @var{pch_flags} specifies the value that\n value is the same as for @code{TARGET_PCH_VALID_P}.\n @end deftypefn\n \n+@hook TARGET_PREPARE_PCH_SAVE\n+\n @node C++ ABI\n @section C++ ABI parameters\n @cindex parameters, c++ abi"}, {"sha": "b68673c8159c8bbb06790e06618ce370738ec0b5", "filename": "gcc/target.def", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e32ea2d1b2616cba725adfa4a87b2977a40e55be/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e32ea2d1b2616cba725adfa4a87b2977a40e55be/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=e32ea2d1b2616cba725adfa4a87b2977a40e55be", "patch": "@@ -1819,6 +1819,15 @@ DEFHOOK\n  const char *, (const void *data, size_t sz),\n  default_pch_valid_p)\n \n+DEFHOOK\n+(prepare_pch_save,\n+ \"Called before writing out a PCH file.  If the target has some\\n\\\n+garbage-collected data that needs to be in a particular state on PCH loads,\\n\\\n+it can use this hook to enforce that state.  Very few targets need\\n\\\n+to do anything here.\",\n+ void, (void),\n+ hook_void_void)\n+\n /* If nonnull, this function checks whether a PCH file with the\n    given set of target flags can be used.  It returns NULL if so,\n    otherwise it returns an error message.  */"}]}