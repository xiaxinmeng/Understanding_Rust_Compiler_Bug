{"sha": "8b334f7b0967171297c275cd9c922a84508c3440", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGIzMzRmN2IwOTY3MTcxMjk3YzI3NWNkOWM5MjJhODQ1MDhjMzQ0MA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2009-07-29T20:35:40Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2009-07-29T20:35:40Z"}, "message": "re PR c++/14912 (Do not print default template arguments in error messages)\n\n\tPR c++/14912\n\t* cp-tree.h (enum tsubst_flags): Add tf_no_class_instantiations.\n\t* error.c (count_non_default_template_args): Pass it.\n\t* pt.c (tsubst) [TYPENAME_TYPE]: Don't complete type if it's set.\n\nFrom-SVN: r150223", "tree": {"sha": "8967d064fe0fb79f53b568377a57adbd38c20fd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8967d064fe0fb79f53b568377a57adbd38c20fd3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b334f7b0967171297c275cd9c922a84508c3440", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b334f7b0967171297c275cd9c922a84508c3440", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b334f7b0967171297c275cd9c922a84508c3440", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b334f7b0967171297c275cd9c922a84508c3440/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9e34da8b076782c692a7e4fa6587fd19764d9b2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e34da8b076782c692a7e4fa6587fd19764d9b2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e34da8b076782c692a7e4fa6587fd19764d9b2d"}], "stats": {"total": 41, "additions": 39, "deletions": 2}, "files": [{"sha": "c52c6da89e1d4ed155f7db0f7ae4fb2b4763a8b8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b334f7b0967171297c275cd9c922a84508c3440/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b334f7b0967171297c275cd9c922a84508c3440/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8b334f7b0967171297c275cd9c922a84508c3440", "patch": "@@ -1,3 +1,10 @@\n+2009-07-29  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/14912\n+\t* cp-tree.h (enum tsubst_flags): Add tf_no_class_instantiations.\n+\t* error.c (count_non_default_template_args): Pass it.\n+\t* pt.c (tsubst) [TYPENAME_TYPE]: Don't complete type if it's set.\n+\n 2009-07-29  Richard Guenther  <rguenther@suse.de>\n \n \tPR c++/40834"}, {"sha": "dcad934878863fd7be0330c49cbb5f41dabf7eeb", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b334f7b0967171297c275cd9c922a84508c3440/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b334f7b0967171297c275cd9c922a84508c3440/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=8b334f7b0967171297c275cd9c922a84508c3440", "patch": "@@ -3616,6 +3616,8 @@ enum tsubst_flags {\n \t\t\t\t    conversion.  */\n   tf_no_access_control = 1 << 7, /* Do not perform access checks, even\n \t\t\t\t    when issuing other errors.   */\n+  /* Do not instantiate classes (used by count_non_default_template_args). */\n+  tf_no_class_instantiations = 1 << 8,\n   /* Convenient substitution flags combinations.  */\n   tf_warning_or_error = tf_warning | tf_error\n };"}, {"sha": "25a05801622cd3e9be7fd46a10ea1f08a5877792", "filename": "gcc/cp/error.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b334f7b0967171297c275cd9c922a84508c3440/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b334f7b0967171297c275cd9c922a84508c3440/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=8b334f7b0967171297c275cd9c922a84508c3440", "patch": "@@ -182,7 +182,10 @@ count_non_default_template_args (tree args, tree params)\n       if (uses_template_parms (def))\n \t{\n \t  ++processing_template_decl;\n-\t  def = tsubst_copy_and_build (def, args, tf_none, NULL_TREE, false, true);\n+\t  /* This speculative substitution must not cause any classes to be\n+\t     instantiated that otherwise wouldn't be.  */\n+\t  def = tsubst_copy_and_build (def, args, tf_no_class_instantiations,\n+\t\t\t\t       NULL_TREE, false, true);\n \t  --processing_template_decl;\n \t}\n       if (!cp_tree_equal (TREE_VEC_ELT (inner_args, last), def))"}, {"sha": "ed45324b9ab6a905b2e7cb96eef0bb8f3cdc3fc1", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b334f7b0967171297c275cd9c922a84508c3440/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b334f7b0967171297c275cd9c922a84508c3440/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=8b334f7b0967171297c275cd9c922a84508c3440", "patch": "@@ -9890,7 +9890,8 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t       But, such constructs have already been resolved by this\n \t       point, so here CTX really should have complete type, unless\n \t       it's a partial instantiation.  */\n-\t    ctx = complete_type (ctx);\n+\t    if (!(complain & tf_no_class_instantiations))\n+\t      ctx = complete_type (ctx);\n \t    if (!COMPLETE_TYPE_P (ctx))\n \t      {\n \t\tif (complain & tf_error)"}, {"sha": "e3b61034dc946ac7403c4baeb5d7fbafb0e09610", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b334f7b0967171297c275cd9c922a84508c3440/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b334f7b0967171297c275cd9c922a84508c3440/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8b334f7b0967171297c275cd9c922a84508c3440", "patch": "@@ -1,3 +1,8 @@\n+2009-07-29  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/14912\n+\t* g++.dg/template/defarg13.C: New.\n+\n 2009-07-29  Richard Guenther  <rguenther@suse.de>\n \n \tPR c++/40834"}, {"sha": "ba2980bfaeaab12fc029cd07817cefac39318ac4", "filename": "gcc/testsuite/g++.dg/template/defarg13.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b334f7b0967171297c275cd9c922a84508c3440/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdefarg13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b334f7b0967171297c275cd9c922a84508c3440/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdefarg13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdefarg13.C?ref=8b334f7b0967171297c275cd9c922a84508c3440", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/14912\n+// Bug: We were instantiating A<B> in order to compare it to the matching\n+// argument for C<B,B>, which fails.\n+\n+template <class T>\n+struct A\n+{\n+  typedef typename T::F F;\n+};\n+\n+struct B { };\n+\n+template <class T, class U = typename A<T>::F >\n+struct C\n+{\n+  typename T::F f;\t\t// { dg-error \"no type\" }\n+};\n+\n+C<B, B> c;\t\t\t// { dg-message \"instantiated\" }"}]}