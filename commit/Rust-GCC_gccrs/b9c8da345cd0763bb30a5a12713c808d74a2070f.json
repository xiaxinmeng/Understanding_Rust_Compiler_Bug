{"sha": "b9c8da345cd0763bb30a5a12713c808d74a2070f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjljOGRhMzQ1Y2QwNzYzYmIzMGE1YTEyNzEzYzgwOGQ3NGEyMDcwZg==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@redhat.com", "date": "2012-04-30T11:43:57Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2012-04-30T11:43:57Z"}, "message": "Add -Wvarargs option\n\nSeveral warnings related to questionable usage cases of variadic\nfunction related macros (like va_start) could not be controlled by any\nwarning-related macro.  Fixed thus, by introducing the -Wvarargs\noption.\n\nTested on x86_64-unknown-linux-gnu against trunk.\n\ngcc/c-family/\n\n\t* c.opt (Wvarargs):  Define new option.\n\ngcc/\n\t* builtins.c (fold_builtin_next_arg):  Use OPT_Wvarargs as an\n\targument for the various warning_at calls.\n\ngcc/doc/\n\n\t* invoke.texi: Update the documentation.\n\ngcc/testsuite/\n\n\t* c-c++-common/Wvarargs.c: New test case.\n\t* c-c++-common/Wvarargs-2.c: Likewise.\n\nFrom-SVN: r186978", "tree": {"sha": "e79bab429f035c8a49182501433c80c03c767993", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e79bab429f035c8a49182501433c80c03c767993"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9c8da345cd0763bb30a5a12713c808d74a2070f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9c8da345cd0763bb30a5a12713c808d74a2070f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9c8da345cd0763bb30a5a12713c808d74a2070f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9c8da345cd0763bb30a5a12713c808d74a2070f/comments", "author": null, "committer": null, "parents": [{"sha": "51fce2d3968d485cc72fb22740e82d0c31ce9ae9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51fce2d3968d485cc72fb22740e82d0c31ce9ae9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51fce2d3968d485cc72fb22740e82d0c31ce9ae9"}], "stats": {"total": 124, "additions": 120, "deletions": 4}, "files": [{"sha": "264c997e4a196b51b23d9cdf33e8464016f1a533", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9c8da345cd0763bb30a5a12713c808d74a2070f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9c8da345cd0763bb30a5a12713c808d74a2070f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b9c8da345cd0763bb30a5a12713c808d74a2070f", "patch": "@@ -1,3 +1,10 @@\n+2012-04-30  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tAdd -Wvarargs option\n+\t* builtins.c (fold_builtin_next_arg):  Use OPT_Wvarargs as an\n+    \targument for the various warning_at calls.\n+\t* docs/invoke.texi: Update the documentation.\n+\n 2012-04-30  Dodji Seketeli  <dodji@redhat.com>\n \n \tSwitch -ftrack-macro-expansion=2 on by default."}, {"sha": "41a052b1d8fa55781fa36a902f1f71cb1c5ba491", "filename": "gcc/builtins.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9c8da345cd0763bb30a5a12713c808d74a2070f/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9c8da345cd0763bb30a5a12713c808d74a2070f/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=b9c8da345cd0763bb30a5a12713c808d74a2070f", "patch": "@@ -12127,8 +12127,8 @@ fold_builtin_next_arg (tree exp, bool va_start_p)\n \t  /* Evidently an out of date version of <stdarg.h>; can't validate\n \t     va_start's second argument, but can still work as intended.  */\n \t  warning_at (current_location,\n-\t\t      0,\n-\t\t      \"%<__builtin_next_arg%> called without an argument\");\n+\t\t      OPT_Wvarargs,\n+\t\t   \"%<__builtin_next_arg%> called without an argument\");\n \t  return true;\n \t}\n       else if (nargs > 1)\n@@ -12164,7 +12164,7 @@ fold_builtin_next_arg (tree exp, bool va_start_p)\n \t     argument so that we will get wrong-code because of\n \t     it.  */\n \t  warning_at (current_location,\n-\t\t      0,\n+\t\t      OPT_Wvarargs,\n \t\t      \"second parameter of %<va_start%> not last named argument\");\n \t}\n \n@@ -12177,7 +12177,7 @@ fold_builtin_next_arg (tree exp, bool va_start_p)\n       else if (DECL_REGISTER (arg))\n \t{\n \t  warning_at (current_location,\n-\t\t      0,\n+\t\t      OPT_Wvarargs,\n \t\t      \"undefined behaviour when second parameter of \"\n \t\t      \"%<va_start%> is declared with %<register%> storage\");\n \t}"}, {"sha": "9f62db21b6d333a8e04358a852c6fb28622579d1", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9c8da345cd0763bb30a5a12713c808d74a2070f/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9c8da345cd0763bb30a5a12713c808d74a2070f/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=b9c8da345cd0763bb30a5a12713c808d74a2070f", "patch": "@@ -1,3 +1,8 @@\n+2012-04-30  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tAdd -Wvarargs option\n+\t* c.opt (Wvarargs):  Define new option.\n+\n 2012-04-30  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \t* c-common.c (check_function_arguments): Replace"}, {"sha": "d2cf6ee6caae6c521dc309018581a087fac8a93b", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9c8da345cd0763bb30a5a12713c808d74a2070f/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9c8da345cd0763bb30a5a12713c808d74a2070f/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=b9c8da345cd0763bb30a5a12713c808d74a2070f", "patch": "@@ -689,6 +689,10 @@ Wvariadic-macros\n C ObjC C++ ObjC++ Warning\n Do not warn about using variadic macros when -pedantic\n \n+Wvarargs\n+C ObjC C++ ObjC++ Warning Var(warn_varargs) Init(1)\n+Warn about questionable usage of the macros used to retrieve variable arguments\n+\n Wvla\n C ObjC C++ ObjC++ Var(warn_vla) Init(-1) Warning\n Warn if a variable length array is used"}, {"sha": "a7efaa7e021be6686be01c150aaf68524e8bfaa0", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9c8da345cd0763bb30a5a12713c808d74a2070f/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9c8da345cd0763bb30a5a12713c808d74a2070f/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=b9c8da345cd0763bb30a5a12713c808d74a2070f", "patch": "@@ -4663,6 +4663,13 @@ Warn if variadic macros are used in pedantic ISO C90 mode, or the GNU\n alternate syntax when in pedantic ISO C99 mode.  This is default.\n To inhibit the warning messages, use @option{-Wno-variadic-macros}.\n \n+@item -Wvarargs\n+@opindex Wvarargs\n+@opindex Wno-varargs\n+Warn upon questionable usage of the macros used to handle variable\n+arguments like @samp{va_start}.  This is default.  To inhibit the\n+warning messages, use @option{-Wno-varargs}.\n+\n @item -Wvector-operation-performance\n @opindex Wvector-operation-performance\n @opindex Wno-vector-operation-performance"}, {"sha": "f5cfe3710abd1a0ed609ace212c6d7144ae88cff", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9c8da345cd0763bb30a5a12713c808d74a2070f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9c8da345cd0763bb30a5a12713c808d74a2070f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b9c8da345cd0763bb30a5a12713c808d74a2070f", "patch": "@@ -1,3 +1,9 @@\n+2012-04-30  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tAdd -Wvarargs option\n+\t* c-c++-common/Wvarargs.c: New test case.\n+\t* c-c++-common/Wvarargs-2.c: Likewise.\n+\n 2012-04-30  Dodji Seketeli  <dodji@redhat.com>\n \n \tAdjust relevant test cases wrt -ftrack-macro-expansion=[0|2]"}, {"sha": "a2e031f91403a2f98dcbca582b42355debcb1d89", "filename": "gcc/testsuite/c-c++-common/Wvarargs-2.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9c8da345cd0763bb30a5a12713c808d74a2070f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWvarargs-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9c8da345cd0763bb30a5a12713c808d74a2070f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWvarargs-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWvarargs-2.c?ref=b9c8da345cd0763bb30a5a12713c808d74a2070f", "patch": "@@ -0,0 +1,33 @@\n+/*\n+   { dg-options \"-Wno-varargs\" }\n+   { dg-do compile }\n+ */\n+\n+#include <stdarg.h>\n+\n+void\n+err (int a)\n+{\n+  va_list vp;\n+  va_start (vp, a); // { dg-error \"used in function with fixed args\" }\n+}\n+\n+void\n+foo0 (int a, int b, ...)\n+{\n+    va_list vp;\n+    /* 'a' is not the last argument of the enclosing function, but\n+       don't warn because we are ignoring -Wvarargs.  */\n+    va_start (vp, a);\n+    va_end (vp);\n+}\n+\n+void\n+foo1 (int a, register int b, ...)\n+{\n+    va_list vp;\n+    /* 'b' is declared with register storage, but don't warn\n+       because we are ignoring -Wvarargs.  */\n+    va_start (vp, b);\n+    va_end (vp);\n+}"}, {"sha": "408f427b5c458221df63634a1d066e4d4effef9c", "filename": "gcc/testsuite/c-c++-common/Wvarargs.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9c8da345cd0763bb30a5a12713c808d74a2070f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWvarargs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9c8da345cd0763bb30a5a12713c808d74a2070f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWvarargs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWvarargs.c?ref=b9c8da345cd0763bb30a5a12713c808d74a2070f", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do compile } */\n+\n+#include <stdarg.h>\n+\n+void\n+err (int a)\n+{\n+  va_list vp;\n+  va_start (vp, a); // { dg-error \"used in function with fixed args\" }\n+}\n+\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wvarargs\"\n+\n+void\n+foo0 (int a, int b, ...)\n+{\n+    va_list vp;\n+    /* 'a' is not the last argument of the enclosing function, but\n+       don't warn because we are ignoring -Wvarargs.  */\n+    va_start (vp, a);\n+    va_end (vp);\n+}\n+\n+void\n+foo1 (int a, register int b, ...)\n+{\n+    va_list vp;\n+    /* 'b' is declared with register storage, but don't warn\n+       because we are ignoring -Wvarargs.  */\n+    va_start (vp, b);\n+    va_end (vp);\n+}\n+\n+#pragma GCC diagnostic pop\n+\n+void\n+foo2 (int a, int b, ...)\n+{\n+    va_list vp;\n+    /* 'a' is not the last argument of the enclosing function, so\n+       warn.  */\n+    va_start (vp, a); /* { dg-warning \"second parameter\" } */\n+    va_end (vp);\n+}\n+\n+void\n+foo3 (int a, register int b, ...)\n+{\n+    va_list vp;\n+    /* 'b' is declared with register storage, so warn.  */\n+    va_start (vp, b); /* { dg-warning \"undefined behaviour\" } */\n+    va_end (vp);\n+}"}]}