{"sha": "d9c77712d5b14e131210303ffbef49096ae613d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDljNzc3MTJkNWIxNGUxMzEyMTAzMDNmZmJlZjQ5MDk2YWU2MTNkMQ==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2011-06-08T12:16:15Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2011-06-08T12:16:15Z"}, "message": "tree-sra.c (mark_rw_status): Removed.\n\n2011-06-08  Martin Jambor  <mjambor@suse.cz>\n\n\t* tree-sra.c (mark_rw_status): Removed.\n\t(analyze_access_subtree): New parameter parent instead of\n\tmark_read and mark_write, propagate from that.\n\nFrom-SVN: r174806", "tree": {"sha": "f181c999f87d687e218d4cff08ad1561226b7504", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f181c999f87d687e218d4cff08ad1561226b7504"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9c77712d5b14e131210303ffbef49096ae613d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9c77712d5b14e131210303ffbef49096ae613d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9c77712d5b14e131210303ffbef49096ae613d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9c77712d5b14e131210303ffbef49096ae613d1/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "545dc5e3245fe4abf8c738424d293988e8c67b8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/545dc5e3245fe4abf8c738424d293988e8c67b8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/545dc5e3245fe4abf8c738424d293988e8c67b8c"}], "stats": {"total": 51, "additions": 20, "deletions": 31}, "files": [{"sha": "024f6b6b0d2688b6f1ee03b6cb1c4d81824f4da4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9c77712d5b14e131210303ffbef49096ae613d1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9c77712d5b14e131210303ffbef49096ae613d1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d9c77712d5b14e131210303ffbef49096ae613d1", "patch": "@@ -1,3 +1,9 @@\n+2011-06-08  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* tree-sra.c (mark_rw_status): Removed.\n+\t(analyze_access_subtree): New parameter parent instead of\n+\tmark_read and mark_write, propagate from that.\n+\n 2011-06-08  Julian Brown  <julian@codesourcery.com>\n \n \t* config/arm/arm.c (arm_libcall_uses_aapcs_base): Use correct ABI"}, {"sha": "47d44719d923ee228627dbe5d13d144a219dad97", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 14, "deletions": 31, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9c77712d5b14e131210303ffbef49096ae613d1/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9c77712d5b14e131210303ffbef49096ae613d1/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=d9c77712d5b14e131210303ffbef49096ae613d1", "patch": "@@ -1864,8 +1864,6 @@ expr_with_var_bounded_array_refs_p (tree expr)\n   return false;\n }\n \n-enum mark_rw_status { SRA_MRRW_NOTHING, SRA_MRRW_DIRECT, SRA_MRRW_ASSIGN};\n-\n /* Analyze the subtree of accesses rooted in ROOT, scheduling replacements when\n    both seeming beneficial and when ALLOW_REPLACEMENTS allows it.  Also set all\n    sorts of access flags appropriately along the way, notably always set\n@@ -1905,39 +1903,26 @@ enum mark_rw_status { SRA_MRRW_NOTHING, SRA_MRRW_DIRECT, SRA_MRRW_ASSIGN};\n    1\t1\t1\t1\tYes\t\tAny of the above yeses  */\n \n static bool\n-analyze_access_subtree (struct access *root, bool allow_replacements,\n-\t\t\tenum mark_rw_status mark_read,\n-\t\t\tenum mark_rw_status mark_write)\n+analyze_access_subtree (struct access *root, struct access *parent,\n+\t\t\tbool allow_replacements)\n {\n   struct access *child;\n   HOST_WIDE_INT limit = root->offset + root->size;\n   HOST_WIDE_INT covered_to = root->offset;\n   bool scalar = is_gimple_reg_type (root->type);\n   bool hole = false, sth_created = false;\n \n-  if (root->grp_assignment_read)\n-    mark_read = SRA_MRRW_ASSIGN;\n-  else if (mark_read == SRA_MRRW_ASSIGN)\n-    {\n-      root->grp_read = 1;\n-      root->grp_assignment_read = 1;\n-    }\n-  else if (mark_read == SRA_MRRW_DIRECT)\n-    root->grp_read = 1;\n-  else if (root->grp_read)\n-    mark_read = SRA_MRRW_DIRECT;\n-\n-  if (root->grp_assignment_write)\n-    mark_write = SRA_MRRW_ASSIGN;\n-  else if (mark_write == SRA_MRRW_ASSIGN)\n+  if (parent)\n     {\n-      root->grp_write = 1;\n-      root->grp_assignment_write = 1;\n+      if (parent->grp_read)\n+\troot->grp_read = 1;\n+      if (parent->grp_assignment_read)\n+\troot->grp_assignment_read = 1;\n+      if (parent->grp_write)\n+\troot->grp_write = 1;\n+      if (parent->grp_assignment_write)\n+\troot->grp_assignment_write = 1;\n     }\n-  else if (mark_write == SRA_MRRW_DIRECT)\n-    root->grp_write = 1;\n-  else if (root->grp_write)\n-    mark_write = SRA_MRRW_DIRECT;\n \n   if (root->grp_unscalarizable_region)\n     allow_replacements = false;\n@@ -1952,9 +1937,8 @@ analyze_access_subtree (struct access *root, bool allow_replacements,\n       else\n \tcovered_to += child->size;\n \n-      sth_created |= analyze_access_subtree (child,\n-\t\t\t\t\t     allow_replacements && !scalar,\n-\t\t\t\t\t     mark_read, mark_write);\n+      sth_created |= analyze_access_subtree (child, root,\n+\t\t\t\t\t     allow_replacements && !scalar);\n \n       root->grp_unscalarized_data |= child->grp_unscalarized_data;\n       hole |= !child->grp_covered;\n@@ -2002,8 +1986,7 @@ analyze_access_trees (struct access *access)\n \n   while (access)\n     {\n-      if (analyze_access_subtree (access, true,\n-\t\t\t\t  SRA_MRRW_NOTHING, SRA_MRRW_NOTHING))\n+      if (analyze_access_subtree (access, NULL, true))\n \tret = true;\n       access = access->next_grp;\n     }"}]}