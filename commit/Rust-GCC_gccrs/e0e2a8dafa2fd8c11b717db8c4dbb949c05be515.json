{"sha": "e0e2a8dafa2fd8c11b717db8c4dbb949c05be515", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBlMmE4ZGFmYTJmZDhjMTFiNzE3ZGI4YzRkYmI5NDljMDViZTUxNQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-02-10T13:11:46Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-02-10T13:11:46Z"}, "message": "Use PROTO for varargs functions.\n\nIf __STDC__, include gstdarg and use ANSI form of varargs.\n\nFrom-SVN: r6517", "tree": {"sha": "e2ac540d2a96d0ac3fed928d0880ba8eae812ea6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2ac540d2a96d0ac3fed928d0880ba8eae812ea6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0e2a8dafa2fd8c11b717db8c4dbb949c05be515", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0e2a8dafa2fd8c11b717db8c4dbb949c05be515", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0e2a8dafa2fd8c11b717db8c4dbb949c05be515", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0e2a8dafa2fd8c11b717db8c4dbb949c05be515/comments", "author": null, "committer": null, "parents": [{"sha": "81a1533366e9d135cc939cf27829355700b23deb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81a1533366e9d135cc939cf27829355700b23deb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81a1533366e9d135cc939cf27829355700b23deb"}], "stats": {"total": 263, "additions": 177, "deletions": 86}, "files": [{"sha": "aaf9bcfe930e2848532462c337287a92eed65ee7", "filename": "gcc/mips-tfile.c", "status": "modified", "additions": 33, "deletions": 15, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e2a8dafa2fd8c11b717db8c4dbb949c05be515/gcc%2Fmips-tfile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e2a8dafa2fd8c11b717db8c4dbb949c05be515/gcc%2Fmips-tfile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmips-tfile.c?ref=e0e2a8dafa2fd8c11b717db8c4dbb949c05be515", "patch": "@@ -2,9 +2,9 @@\n    contain debugging information specified by the GNU compiler\n    in the form of comments (the mips assembler does not support\n    assembly access to debug information).\n-   Contributed by:  Michael Meissner, meissner@osf.org\n-   Copyright (C) 1991, 1993 Free Software Foundation, Inc.\n-\n+   Copyright (C) 1991, 1993, 1994 Free Software Foundation, Inc.\n+   Contributed by Michael Meissner, meissner@osf.org\n+   \n This file is part of GNU CC.\n \n GNU CC is free software; you can redistribute it and/or modify\n@@ -598,7 +598,11 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n */\n \f\n \n+#ifdef __STDC__\n+#include \"gstdarg.h\"\n+#else\n #include \"gvarargs.h\"\n+#endif\n #include \"config.h\"\n #include <stdio.h>\n \n@@ -614,6 +618,8 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n typedef void *PTR_T;\n typedef const void *CPTR_T;\n #define __proto(x) x\n+#define VPROTO(ARGS)            ARGS\n+#define VA_START(va_list,var)  va_start(va_list,var)\n #else\n \n #if defined(_STDIO_H_) || defined(__STDIO_H__)\t\t/* Ultrix 4.0, SGI */\n@@ -627,6 +633,8 @@ typedef char *CPTR_T;\n \n #define __proto(x) ()\n #define const\n+#define VPROTO(ARGS)            (va_alist) va_dcl\n+#define VA_START(va_list,var)  va_start(va_list)\n #endif\n \n /* Do to size_t being defined in sys/types.h and different\n@@ -656,8 +664,8 @@ extern PTR_T\txcalloc\t\t__proto((Size_t, Size_t));\n extern PTR_T\txrealloc\t__proto((PTR_T, Size_t));\n extern void\txfree\t\t__proto((PTR_T));\n \n-extern void\tfatal();\t/* can't use prototypes here */\n-extern void\terror();\n+extern void\tfatal\t\t__proto((char *format, ...));\n+extern void\terror\t\t__proto((char *format, ...));\n \n \f\n #ifndef MIPS_DEBUGGING_INFO\n@@ -5533,19 +5541,24 @@ free_thead (ptr)\n \n /*VARARGS*/\n void\n-fatal (va_alist)\n-     va_dcl\n+fatal VPROTO((char *format, ...))\n {\n-  va_list ap;\n+#ifndef __STDC__\n   char *format;\n+#endif\n+  va_list ap;\n+\n+  VA_START (ap, format);\n+\n+#ifndef __STDC__\n+  format = va_arg (ap, char*);\n+#endif\n \n   if (line_number > 0)\n     fprintf (stderr, \"%s, %s:%ld \", progname, input_name, line_number);\n   else\n     fprintf (stderr, \"%s:\", progname);\n \n-  va_start(ap);\n-  format = va_arg (ap, char *);\n   vfprintf (stderr, format, ap);\n   va_end (ap);\n   fprintf (stderr, \"\\n\");\n@@ -5558,19 +5571,24 @@ fatal (va_alist)\n \n /*VARARGS*/\n void\n-error (va_alist) \n-     va_dcl\n+error VPROTO((char *format, ...))\n {\n-  va_list ap;\n+#ifndef __STDC__\n   char *format;\n+#endif\n+  va_list ap;\n+\n+  VA_START (ap, format);\n+\n+#ifndef __STDC__\n+  format = va_arg (ap, char*);\n+#endif\n \n   if (line_number > 0)\n     fprintf (stderr, \"%s, %s:%ld \", progname, input_name, line_number);\n   else\n     fprintf (stderr, \"%s:\", progname);\n \n-  va_start(ap);\n-  format = va_arg (ap, char *);\n   vfprintf (stderr, format, ap);\n   fprintf (stderr, \"\\n\");\n   if (line_number > 0)"}, {"sha": "639326dd7515980a12468433aa78f9bb3c6548b6", "filename": "gcc/toplev.c", "status": "modified", "additions": 144, "deletions": 71, "changes": 215, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e2a8dafa2fd8c11b717db8c4dbb949c05be515/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e2a8dafa2fd8c11b717db8c4dbb949c05be515/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=e0e2a8dafa2fd8c11b717db8c4dbb949c05be515", "patch": "@@ -24,7 +24,11 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n    Error messages and low-level interface to malloc also handled here.  */\n \n #include \"config.h\"\n+#ifdef __STDC__\n+#include \"gstdarg.h\"\n+#else\n #include \"gvarargs.h\"\n+#endif\n #include <stdio.h>\n #include <signal.h>\n #include <setjmp.h>\n@@ -106,8 +110,20 @@ extern void dump_sched_info ();\n extern void dump_local_alloc ();\n \n void rest_of_decl_compilation ();\n-void error ();\n-void error_with_file_and_line ();\n+void error_with_file_and_line PROTO((char *file, int line, char *s, ...));\n+void error_with_decl PROTO((tree decl, char *s, ...));\n+void error_for_asm PROTO((rtx insn, char *s, ...));\n+void error PROTO((char *s, ...));\n+void fatal PROTO((char *s, ...));\n+void warning_with_file_and_line PROTO((char *file, int line, char *s, ...));\n+void warning_with_decl PROTO((tree decl, char *s, ...));\n+void warning_for_asm PROTO((rtx insn, char *s, ...));\n+void warning PROTO((char *s, ...));\n+void pedwarn PROTO((char *s, ...));\n+void pedwarn_with_decl PROTO((tree decl, char *s, ...));\n+void pedwarn_with_file_and_line PROTO((char *file, int line, char *s, ...));\n+void sorry PROTO((char *s, ...));\n+void really_sorry PROTO((char *s, ...));\n void fancy_abort ();\n #ifndef abort\n void abort ();\n@@ -1182,19 +1198,23 @@ v_error_with_file_and_line (file, line, s, ap)\n }\n \n void\n-error_with_file_and_line (va_alist)\n-     va_dcl\n-     /* (char *file, int line, char *s, ...) */\n+error_with_file_and_line VPROTO((char *file, int line, char *s, ...))\n {\n-  va_list ap;\n+#ifndef __STDC__\n   char *file;\n   int line;\n   char *s;\n+#endif\n+  va_list ap;\n+\n+  VA_START (ap, s);\n \n-  va_start (ap);\n+#ifndef __STDC__\n   file = va_arg (ap, char *);\n   line = va_arg (ap, int);\n   s = va_arg (ap, char *);\n+#endif\n+\n   v_error_with_file_and_line (file, line, s, ap);\n   va_end (ap);\n }\n@@ -1215,17 +1235,21 @@ v_error_with_decl (decl, s, ap)\n }\n \n void\n-error_with_decl (va_alist)\n-     va_dcl\n-     /* (tree decl, char *s, ...) */\n+error_with_decl VPROTO((tree decl, char *s, ...))\n {\n-  va_list ap;\n+#ifndef __STDC__\n   tree decl;\n   char *s;\n+#endif\n+  va_list ap;\n \n-  va_start (ap);\n+  VA_START (ap, s);\n+\n+#ifndef __STDC__\n   decl = va_arg (ap, tree);\n   s = va_arg (ap, char *);\n+#endif\n+\n   v_error_with_decl (decl, s, ap);\n   va_end (ap);\n }\n@@ -1250,17 +1274,21 @@ v_error_for_asm (insn, s, ap)\n }\n \n void\n-error_for_asm (va_alist)\n-     va_dcl\n-     /* (rtx insn, char *s, ...) */\n+error_for_asm VPROTO((rtx insn, char *s, ...))\n {\n-  va_list ap;\n+#ifndef __STDC__\n   rtx insn;\n   char *s;\n+#endif\n+  va_list ap;\n \n-  va_start (ap);\n+  VA_START (ap, s);\n+\n+#ifndef __STDC__\n   insn = va_arg (ap, rtx);\n   s = va_arg (ap, char *);\n+#endif\n+\n   v_error_for_asm (insn, s, ap);\n   va_end (ap);\n }\n@@ -1276,15 +1304,19 @@ verror (s, ap)\n }\n \n void\n-error (va_alist)\n-     va_dcl\n-     /* (char *s, ...) */\n+error VPROTO((char *s, ...))\n {\n-  va_list ap;\n+#ifndef __STDC__\n   char *s;\n+#endif\n+  va_list ap;\n+\n+  VA_START (ap, s);\n \n-  va_start (ap);\n+#ifndef __STDC__\n   s = va_arg (ap, char *);\n+#endif\n+\n   verror (s, ap);\n   va_end (ap);\n }\n@@ -1301,15 +1333,19 @@ vfatal (s, ap)\n }\n \n void\n-fatal (va_alist)\n-     va_dcl\n-     /* (char *s, ...) */\n+fatal VPROTO((char *s, ...))\n {\n-  va_list ap;\n+#ifndef __STDC__\n   char *s;\n+#endif\n+  va_list ap;\n+\n+  VA_START (ap, s);\n \n-  va_start (ap);\n+#ifndef __STDC__\n   s = va_arg (ap, char *);\n+#endif\n+\n   vfatal (s, ap);\n   va_end (ap);\n }\n@@ -1331,19 +1367,23 @@ v_warning_with_file_and_line (file, line, s, ap)\n }\n \n void\n-warning_with_file_and_line (va_alist)\n-     va_dcl\n-     /* (char *file, int line, char *s, ...) */\n+warning_with_file_and_line VPROTO((char *file, int line, char *s, ...))\n {\n-  va_list ap;\n+#ifndef __STDC__\n   char *file;\n   int line;\n   char *s;\n+#endif\n+  va_list ap;\n+\n+  VA_START (ap, s);\n \n-  va_start (ap);\n+#ifndef __STDC__\n   file = va_arg (ap, char *);\n   line = va_arg (ap, int);\n   s = va_arg (ap, char *);\n+#endif\n+\n   v_warning_with_file_and_line (file, line, s, ap);\n   va_end (ap);\n }\n@@ -1366,17 +1406,21 @@ v_warning_with_decl (decl, s, ap)\n }\n \n void\n-warning_with_decl (va_alist)\n-     va_dcl\n-     /* (tree decl, char *s, ...) */\n+warning_with_decl VPROTO((tree decl, char *s, ...))\n {\n-  va_list ap;\n+#ifndef __STDC__\n   tree decl;\n   char *s;\n+#endif\n+  va_list ap;\n \n-  va_start (ap);\n+  VA_START (ap, s);\n+\n+#ifndef __STDC__\n   decl = va_arg (ap, tree);\n   s = va_arg (ap, char *);\n+#endif\n+\n   v_warning_with_decl (decl, s, ap);\n   va_end (ap);\n }\n@@ -1403,17 +1447,21 @@ v_warning_for_asm (insn, s, ap)\n }\n \n void\n-warning_for_asm (va_alist)\n-     va_dcl\n-     /* (rtx insn, char *s, ...) */\n+warning_for_asm VPROTO((rtx insn, char *s, ...))\n {\n-  va_list ap;\n+#ifndef __STDC__\n   rtx insn;\n   char *s;\n+#endif\n+  va_list ap;\n+\n+  VA_START (ap, s);\n \n-  va_start (ap);\n+#ifndef __STDC__\n   insn = va_arg (ap, rtx);\n   s = va_arg (ap, char *);\n+#endif\n+\n   v_warning_for_asm (insn, s, ap);\n   va_end (ap);\n }\n@@ -1429,14 +1477,19 @@ vwarning (s, ap)\n }\n \n void\n-warning (va_alist)\n-     va_dcl\n+warning VPROTO((char *s, ...))\n {\n-  va_list ap;\n+#ifndef __STDC__\n   char *s;\n+#endif\n+  va_list ap;\n+\n+  VA_START (ap, s);\n \n-  va_start (ap);\n+#ifndef __STDC__\n   s = va_arg (ap, char *);\n+#endif\n+\n   vwarning (s, ap);\n   va_end (ap);\n }\n@@ -1456,15 +1509,19 @@ vpedwarn (s, ap)\n }\n \n void\n-pedwarn (va_alist)\n-     va_dcl\n-     /* (char *s, ...) */\n+pedwarn VPROTO((char *s, ...))\n {\n-  va_list ap;\n+#ifndef __STDC__\n   char *s;\n+#endif\n+  va_list ap;\n+\n+  VA_START (ap, s);\n \n-  va_start (ap);\n+#ifndef __STDC__\n   s = va_arg (ap, char *);\n+#endif\n+\n   vpedwarn (s, ap);\n   va_end (ap);\n }\n@@ -1482,17 +1539,21 @@ v_pedwarn_with_decl (decl, s, ap)\n }\n \n void\n-pedwarn_with_decl (va_alist)\n-     va_dcl\n-     /* (tree decl, char *s, ...) */\n+pedwarn_with_decl VPROTO((tree decl, char *s, ...))\n {\n-  va_list ap;\n+#ifndef __STDC__\n   tree decl;\n   char *s;\n+#endif\n+  va_list ap;\n \n-  va_start (ap);\n+  VA_START (ap, s);\n+\n+#ifndef __STDC__\n   decl = va_arg (ap, tree);\n   s = va_arg (ap, char *);\n+#endif\n+\n   v_pedwarn_with_decl (decl, s, ap);\n   va_end (ap);\n }\n@@ -1511,19 +1572,23 @@ v_pedwarn_with_file_and_line (file, line, s, ap)\n }\n \n void\n-pedwarn_with_file_and_line (va_alist)\n-     va_dcl\n-     /* (char *file, int line, char *s, ...) */\n+pedwarn_with_file_and_line VPROTO((char *file, int line, char *s, ...))\n {\n-  va_list ap;\n+#ifndef __STDC__\n   char *file;\n   int line;\n   char *s;\n+#endif\n+  va_list ap;\n \n-  va_start (ap);\n+  VA_START (ap, s);\n+\n+#ifndef __STDC__\n   file = va_arg (ap, char *);\n   line = va_arg (ap, int);\n   s = va_arg (ap, char *);\n+#endif\n+\n   v_pedwarn_with_file_and_line (file, line, s, ap);\n   va_end (ap);\n }\n@@ -1545,15 +1610,19 @@ vsorry (s, ap)\n }\n \n void\n-sorry (va_alist)\n-     va_dcl\n-     /* (char *s, ...) */\n+sorry VPROTO((char *s, ...))\n {\n-  va_list ap;\n+#ifndef __STDC__\n   char *s;\n+#endif\n+  va_list ap;\n+\n+  VA_START (ap, s);\n \n-  va_start (ap);\n+#ifndef __STDC__\n   s = va_arg (ap, char *);\n+#endif\n+\n   vsorry (s, ap);\n   va_end (ap);\n }\n@@ -1575,15 +1644,19 @@ v_really_sorry (s, ap)\n }\n \n void\n-really_sorry (va_alist)\n-     va_dcl\n-     /* (char *s, ...) */\n+really_sorry VPROTO((char *s, ...))\n {\n-  va_list ap;\n+#ifndef __STDC__\n   char *s;\n+#endif\n+  va_list ap;\n+\n+  VA_START (ap, s);\n \n-  va_start (ap);\n+#ifndef __STDC__\n   s = va_arg (ap, char *);\n+#endif\n+\n   v_really_sorry (s, ap);\n   va_end (ap);\n }"}]}