{"sha": "acbdd83d73ce56d1367581e1cbd78f85e9b4b0bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNiZGQ4M2Q3M2NlNTZkMTM2NzU4MWUxY2JkNzhmODVlOWI0YjBiZg==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2018-12-11T11:09:36Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-12-11T11:09:36Z"}, "message": "[Ada] Update gnatmetric documentation for the Libadalang-based version\n\n2018-12-11  Bob Duff  <duff@adacore.com>\n\ngcc/ada/\n\n\t* doc/gnat_ugn/gnat_utility_programs.rst: Update gnatmetric\n\tdocumentation for the Libadalang-based version.\n\nFrom-SVN: r266983", "tree": {"sha": "e36f0843d335d694d11d309b803fcd0cd112f010", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e36f0843d335d694d11d309b803fcd0cd112f010"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/acbdd83d73ce56d1367581e1cbd78f85e9b4b0bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acbdd83d73ce56d1367581e1cbd78f85e9b4b0bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acbdd83d73ce56d1367581e1cbd78f85e9b4b0bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acbdd83d73ce56d1367581e1cbd78f85e9b4b0bf/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9f51b8557977e3a48a4ac39eabc9760241b338ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f51b8557977e3a48a4ac39eabc9760241b338ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f51b8557977e3a48a4ac39eabc9760241b338ad"}], "stats": {"total": 397, "additions": 216, "deletions": 181}, "files": [{"sha": "c162caca9bddda0c7f333eb4e8e9c6bf0a2ad6b9", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acbdd83d73ce56d1367581e1cbd78f85e9b4b0bf/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acbdd83d73ce56d1367581e1cbd78f85e9b4b0bf/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=acbdd83d73ce56d1367581e1cbd78f85e9b4b0bf", "patch": "@@ -1,3 +1,8 @@\n+2018-12-11  Bob Duff  <duff@adacore.com>\n+\n+\t* doc/gnat_ugn/gnat_utility_programs.rst: Update gnatmetric\n+\tdocumentation for the Libadalang-based version.\n+\n 2018-12-11  Javier Miranda  <miranda@adacore.com>\n \n \t* exp_aggr.adb (In_Object_Declaration): Removed."}, {"sha": "17ce45a4543fbcf663ed8632dbac3b79ac77685a", "filename": "gcc/ada/doc/gnat_ugn/gnat_utility_programs.rst", "status": "modified", "additions": 211, "deletions": 181, "changes": 392, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acbdd83d73ce56d1367581e1cbd78f85e9b4b0bf/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_utility_programs.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acbdd83d73ce56d1367581e1cbd78f85e9b4b0bf/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_utility_programs.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_utility_programs.rst?ref=acbdd83d73ce56d1367581e1cbd78f85e9b4b0bf", "patch": "@@ -1797,7 +1797,10 @@ Alternatively, you may run the script using the following command line:\n   .. index:: ! gnatmetric\n   .. index:: Metric tool\n \n-  The ``gnatmetric`` tool is an ASIS-based utility\n+  This documentation is for the new libadalang-based version\n+  of ``gnatmetric``, which replaces the ASIS-based version.\n+\n+  The ``gnatmetric`` tool is a utility\n   for computing various program metrics.\n   It takes an Ada source file as input and generates a file containing the\n   metrics data as output. Various switches control which\n@@ -1808,26 +1811,11 @@ Alternatively, you may run the script using the following command line:\n   the project-related switches).  The project file package that can specify\n   ``gnatmetric`` switches is named ``Metrics``.\n \n-  To compute program metrics, ``gnatmetric`` invokes the Ada\n-  compiler and generates and uses the ASIS tree for the input source;\n-  thus the input must be legal Ada code, and the tool should have all the\n-  information needed to compile the input source. To provide this information,\n-  you may specify as a tool parameter the project file the input source belongs to.\n-  Another possibility is to specify the source search\n-  path and needed configuration files in :switch:`-cargs` section of ``gnatmetric``\n-  call, see the description of the ``gnatmetric`` switches below.\n-\n-  If the set of sources to be processed by ``gnatmetric`` contains sources with\n-  preprocessing directives\n-  then the needed options should be provided to run preprocessor as a part of\n-  the ``gnatmetric`` call, and the computed metrics\n-  will correspond to preprocessed sources.\n-\n   The ``gnatmetric`` command has the form\n \n     ::\n \n-       $ gnatmetric [ switches ] { filename } [ -cargs gcc_switches ]\n+       $ gnatmetric [ switches ] { filename }\n \n   where:\n \n@@ -1839,18 +1827,10 @@ Alternatively, you may run the script using the following command line:\n     the file name may contain path information.\n     If no ``filename`` is supplied, then the ``switches`` list must contain\n     at least one\n-    :switch:`-files` switch (see :ref:`Other_gnatmetric_Switches`).\n-    Including both a :switch:`-files` switch and one or more\n+    :switch:`--files` switch (see :ref:`Other_gnatmetric_Switches`).\n+    Including both a :switch:`--files` switch and one or more\n     ``filename`` arguments is permitted.\n \n-  * ``gcc_switches`` is a list of switches for\n-    ``gcc``. They will be passed on to all compiler invocations made by\n-    ``gnatmetric`` to generate the ASIS trees. Here you can provide\n-    :switch:`-I` switches to form the source search path,\n-    and use the :switch:`-gnatec` switch to set the configuration file,\n-    use the :switch:`-gnat05` switch if sources should be compiled in\n-    Ada 2005 mode etc.\n-\n   The following subsections describe the various switches accepted by\n   ``gnatmetric``, organized by category.\n \n@@ -1877,76 +1857,76 @@ Alternatively, you may run the script using the following command line:\n   directory as where the source file is located. If ``gnatmetric`` has a\n   project  file as its parameter, it places all the generated files in the\n   object directory of the project (or in the project source directory if the\n-  project does not define an objects directory), if :switch:`--subdirs` option\n+  project does not define an object directory). If :switch:`--subdirs` option\n   is specified, the files are placed in the subrirectory of this directory\n   specified by this option.\n \n   All the output information generated in XML format is placed in a single\n   file. By default the name of this file is :file:`metrix.xml`.\n   If not otherwise specified and if no project file is specified\n-  as ``gnatmetric`` option  this file is placed in the\n+  as ``gnatmetric`` option this file is placed in the\n   current directory.\n \n   Some of the computed metrics are summed over the units passed to\n   ``gnatmetric``; for example, the total number of lines of code.\n   By default this information is sent to :file:`stdout`, but a file\n-  can be specified with the :switch:`-og` switch.\n+  can be specified with the :switch:`--global-file-name` switch.\n \n   The following switches control the ``gnatmetric`` output:\n \n-  .. index:: -x (gnatmetric)\n+  .. index:: --generate-xml-output (gnatmetric)\n \n-  :switch:`-x`\n-    Generate the XML output\n+  :switch:`--generate-xml-output`\n+    Generate XML output.\n \n-  .. index:: -xs (gnatmetric)\n+  .. index:: --generate-xml-schema (gnatmetric)\n \n-  :switch:`-xs`\n-    Generate the XML output and the XML schema file that describes the structure\n-    of the XML metric report, this schema is assigned to the XML file. The schema\n+  :switch:`--generate-xml-schema`\n+    Generate XML output and an XML schema file that describes the structure\n+    of the XML metric report. This schema is assigned to the XML file. The schema\n     file has the same name as the XML output file with :file:`.xml` suffix replaced\n-    with :file:`.xsd`\n+    with :file:`.xsd`.\n \n-  .. index:: -nt (gnatmetric)\n+  .. index:: --no-text-output (gnatmetric)\n \n \n-  :switch:`-nt`\n-    Do not generate the output in text form (implies :switch:`-x`)\n+  :switch:`--no-text-output`\n+    Do not generate the output in text form (implies :switch:`-x`).\n \n-  .. index:: -d (gnatmetric)\n+  .. index:: --output-dir (gnatmetric)\n \n \n-  :switch:`-d {output_dir}`\n-    Put text files with detailed metrics into ``output_dir``\n+  :switch:`--output-dir={output_dir}`\n+    Put text files with detailed metrics into ``output_dir``.\n \n-  .. index:: -o (gnatmetric)\n+  .. index:: --output-suffix (gnatmetric)\n \n \n-  :switch:`-o {file_suffix}`\n+  :switch:`--output-suffix={file_suffix}`\n     Use ``file_suffix``, instead of :file:`.metrix`\n     in the name of the output file.\n \n-  .. index:: -og (gnatmetric)\n+  .. index:: --global-file-name (gnatmetric)\n \n+  :switch:`--global-file-name={file_name}`\n+    Put global metrics into ``file_name``.\n \n-  :switch:`-og {file_name}`\n-    Put global metrics into ``file_name``\n+  .. index:: --xml-file-name (gnatmetric)\n \n-  .. index:: -ox (gnatmetric)\n-\n-\n-  :switch:`-ox {file_name}`\n-    Put the XML output into ``file_name`` (also implies :switch:`-x`)\n \n-  .. index:: -sfn (gnatmetric)\n+  :switch:`--xml-file-name={file_name}`\n+    Put the XML output into ``file_name``\n+    (also implies :switch:`--generate-xml-output`).\n \n+  .. index:: --short-file-names (gnatmetric)\n \n-  :switch:`-sfn`\n+  :switch:`--short-file-names`\n     Use 'short' source file names in the output.  (The ``gnatmetric``\n-    output includes the name(s) of the Ada source file(s) from which the metrics\n-    are computed.  By default each name includes the absolute path. The\n-    :switch:`-sfn` switch causes ``gnatmetric``\n-    to exclude all directory information from the file names that are output.)\n+    output includes the name(s) of the Ada source file(s) from which the\n+    metrics are computed.  By default each name includes the absolute\n+    path. The :switch:`--short-file-names` switch causes ``gnatmetric``\n+    to exclude all directory information from the file names that are\n+    output.)\n \n \n   .. index:: Disable Metrics For Local Units in gnatmetric\n@@ -1988,11 +1968,11 @@ Alternatively, you may run the script using the following command line:\n   obtained via the following switch:\n \n \n-  .. index:: -nolocal (gnatmetric)\n+  .. index:: --no-local-metrics (gnatmetric)\n \n \n-  :switch:`-nolocal`\n-    Do not compute detailed metrics for eligible local program units\n+  :switch:`--no-local-metrics`\n+    Do not compute detailed metrics for eligible local program units.\n \n \n   .. _Specifying_a_set_of_metrics_to_compute:\n@@ -2002,10 +1982,9 @@ Alternatively, you may run the script using the following command line:\n \n   By default all the metrics are computed and reported. The switches\n   described in this subsection allow you to control, on an individual\n-  basis, whether metrics are computed and\n-  reported. If at least one positive metric\n-  switch is specified (that is, a switch that defines that a given\n-  metric or set of metrics is to be computed), then only\n+  basis, whether metrics are computed and reported. If at least one\n+  positive metric switch is specified (that is, a switch that defines\n+  that a given metric or set of metrics is to be computed), then only\n   explicitly specified metrics are reported.\n \n   .. _Line_Metrics_Control:\n@@ -2015,32 +1994,33 @@ Alternatively, you may run the script using the following command line:\n \n   .. index:: Line metrics control in gnatmetric\n \n-  For any (legal) source file, and for each of its\n-  eligible local program units, ``gnatmetric`` computes the following\n-  metrics:\n+  For each source file, and for each of its eligible local program\n+  units, ``gnatmetric`` computes the following metrics:\n \n   * the total number of lines;\n \n-  * the total number of code lines (i.e., non-blank lines that are not comments)\n+  * the total number of code lines (i.e., non-blank lines that are not\n+    comments)\n \n   * the number of comment lines\n \n   * the number of code lines containing end-of-line comments;\n \n-  * the comment percentage: the ratio between the number of lines that contain\n-    comments and the number of all non-blank lines, expressed as a percentage;\n+  * the comment percentage: the ratio between the number of lines that\n+    contain comments and the number of all non-blank lines, expressed as\n+    a percentage\n \n-  * the number of empty lines and lines containing only space characters and/or\n-    format effectors (blank lines)\n+  * the number of empty lines and lines containing only space characters\n+    and/or format effectors (blank lines)\n \n-  * the average number of code lines in subprogram bodies, task bodies, entry\n-    bodies and statement sequences in package bodies (this metric is only computed\n-    across the whole set of the analyzed units)\n+  * the average number of code lines in subprogram bodies, task bodies,\n+    entry bodies and statement sequences in package bodies (this metric\n+    is only computed across the whole set of the analyzed units)\n \n-  ``gnatmetric`` sums the values of the line metrics for all the\n-  files being processed and then generates the cumulative results. The tool\n-  also computes for all the files being processed the average number of code\n-  lines in bodies.\n+  ``gnatmetric`` sums the values of the line metrics for all the files\n+  being processed and then generates the cumulative results. The tool\n+  also computes for all the files being processed the average number of\n+  code lines in bodies.\n \n   You can use the following switches to select the specific line metrics\n   to be computed and reported.\n@@ -2109,9 +2089,10 @@ Alternatively, you may run the script using the following command line:\n \n \n   :switch:`--lines-average`\n-    Report the average number of code lines in subprogram bodies, task bodies,\n-    entry bodies and statement sequences in package bodies. The metric is computed\n-    and reported for the whole set of processed Ada sources only.\n+    Report the average number of code lines in subprogram bodies, task\n+    bodies, entry bodies and statement sequences in package bodies. The\n+    metric is computed and reported for the whole set of processed Ada\n+    sources only.\n \n \n   :switch:`--no-lines-average`\n@@ -2130,79 +2111,78 @@ Alternatively, you may run the script using the following command line:\n   outermost unit and for each eligible local unit:\n \n   * *LSLOC ('Logical Source Lines Of Code')*\n-      The total number of declarations and the total number of statements. Note\n-      that the definition of declarations is the one given in the reference\n-      manual:\n-\n-        \"Each of the following is defined to be a declaration: any basic_declaration;\n-        an enumeration_literal_specification; a discriminant_specification;\n-        a component_declaration; a loop_parameter_specification; a\n-        parameter_specification; a subprogram_body; an entry_declaration;\n-        an entry_index_specification; a choice_parameter_specification;\n-        a generic_formal_parameter_declaration.\"\n+      The total number of declarations and the total number of\n+      statements. Note that the definition of declarations is the one\n+      given in the reference manual:\n \n-      This means for example that each enumeration literal adds one to the count,\n-      as well as each subprogram parameter.\n+        \"Each of the following is defined to be a declaration: any\n+        basic_declaration; an enumeration_literal_specification; a\n+        discriminant_specification; a component_declaration; a\n+        loop_parameter_specification; a parameter_specification; a\n+        subprogram_body; an entry_declaration; an\n+        entry_index_specification; a choice_parameter_specification; a\n+        generic_formal_parameter_declaration.\"\n \n-      Thus the results from this metric will be significantly greater than might\n-      be expected from a naive view of counting semicolons.\n+      This means for example that each enumeration literal adds one to\n+      the count, as well as each subprogram parameter.\n \n   * *Maximal static nesting level of inner program units*\n       According to :title:`Ada Reference Manual`, 10.1(1):\n \n-        \"A program unit is either a package, a task unit, a protected unit, a\n-        protected entry, a generic unit, or an explicitly declared subprogram other\n-        than an enumeration literal.\"\n+        \"A program unit is either a package, a task unit, a protected\n+        unit, a protected entry, a generic unit, or an explicitly\n+        declared subprogram other than an enumeration literal.\"\n \n   * *Maximal nesting level of composite syntactic constructs*\n-      This corresponds to the notion of the\n-      maximum nesting level in the GNAT built-in style checks\n-      (see :ref:`Style_Checking`)\n+      This corresponds to the notion of the maximum nesting level in the\n+      GNAT built-in style checks (see :ref:`Style_Checking`).\n \n   * *Number of formal parameters*\n-      Number of formal parameters of a subprogram; if a subprogram does have\n-      parameters, then numbers of \"in\", \"out\" and \"in out\" parameters are also\n-      reported. This metric is reported for subprogram specifications and for\n-      subprogram instantiations. For subprogram bodies, expression functions\n-      and null procedures this metric is reported if the construct acts as a\n-      subprogram declaration but is not a completion of previous declaration.\n-      This metric is not reported for generic and formal subprograms.\n-\n-  For the outermost unit in the file, ``gnatmetric`` additionally computes\n-  the following metrics:\n+      Number of formal parameters of a subprogram; if a subprogram does\n+      have parameters, then numbers of \"in\", \"out\" and \"in out\"\n+      parameters are also reported. This metric is reported for\n+      subprogram specifications and for subprogram instantiations. For\n+      subprogram bodies, expression functions and null procedures this\n+      metric is reported if the construct acts as a subprogram\n+      declaration but is not a completion of previous declaration. This\n+      metric is not reported for generic and formal subprograms.\n+\n+  For the outermost unit in the file, ``gnatmetric`` additionally\n+  computes the following metrics:\n \n   * *Public subprograms*\n-      This metric is computed for package specs. It is the\n-      number of subprograms and generic subprograms declared in the visible\n-      part (including the visible part of nested packages, protected objects, and\n-      protected types).\n+      This metric is computed for package specs. It is the number of\n+      subprograms and generic subprograms declared in the visible part\n+      (including the visible part of nested packages, protected objects,\n+      and protected types).\n \n \n   * *All subprograms*\n-      This metric is computed for bodies and subunits. The\n-      metric is equal to a total number of subprogram bodies in the compilation\n+      This metric is computed for bodies and subunits. The metric is\n+      equal to a total number of subprogram bodies in the compilation\n       unit.\n-      Neither generic instantiations nor renamings-as-a-body nor body stubs\n-      are counted. Any subprogram body is counted, independently of its nesting\n-      level and enclosing constructs. Generic bodies and bodies of protected\n-      subprograms are counted in the same way as 'usual' subprogram bodies.\n+      Neither generic instantiations nor renamings-as-a-body nor body\n+      stubs are counted. Any subprogram body is counted, independently\n+      of its nesting level and enclosing constructs. Generic bodies and\n+      bodies of protected subprograms are counted in the same way as\n+      'usual' subprogram bodies.\n \n \n   * *Public types*\n-      This metric is computed for package specs and\n-      generic package declarations. It is the total number of types\n-      that can be referenced from outside this compilation unit, plus the\n-      number of types from all the visible parts of all the visible generic\n-      packages. Generic formal types are not counted.  Only types, not subtypes,\n-      are included.\n+      This metric is computed for package specs and generic package\n+      declarations. It is the total number of types that can be\n+      referenced from outside this compilation unit, plus the number of\n+      types from all the visible parts of all the visible generic\n+      packages. Generic formal types are not counted.  Only types, not\n+      subtypes, are included.\n \n       Along with the total number of public types, the following\n       types are counted and reported separately:\n \n       * *Abstract types*\n \n-      * *Root tagged types^ (abstract, non-abstract, private, non-private). Type\n-        extensions are *not* counted\n+      * *Root tagged types^ (abstract, non-abstract, private,\n+        non-private). Type extensions are *not* counted\n \n       * *Private types* (including private extensions)\n \n@@ -2211,16 +2191,16 @@ Alternatively, you may run the script using the following command line:\n       * *Protected types*\n \n   * *All types*\n-      This metric is computed for any compilation unit. It is equal to the total\n-      number of the declarations of different types given in the compilation unit.\n-      The private and the corresponding full type declaration are counted as one\n-      type declaration. Incomplete type declarations and generic formal types\n-      are not counted.\n+      This metric is computed for any compilation unit. It is equal to\n+      the total number of the declarations of different types given in\n+      the compilation unit.  The private and the corresponding full type\n+      declaration are counted as one type declaration. Incomplete type\n+      declarations and generic formal types are not counted.\n       No distinction is made among different kinds of types (abstract,\n       private etc.); the total number of types is computed and reported.\n \n-  By default, all the syntax metrics are computed and reported. You can use the\n-  following switches to select specific syntax metrics.\n+  By default, all the syntax metrics are computed and reported. You can\n+  use the following switches to select specific syntax metrics.\n \n \n   .. index:: --syntax (gnatmetric)\n@@ -2313,10 +2293,10 @@ Alternatively, you may run the script using the following command line:\n \n   .. index:: Complexity metrics control in gnatmetric\n \n-  For a program unit that is an executable body (a subprogram body (including\n-  generic bodies), task body, entry body or a package body containing\n-  its own statement sequence) ``gnatmetric`` computes the following\n-  complexity metrics:\n+  For a program unit that is an executable body (a subprogram body\n+  (including generic bodies), task body, entry body or a package body\n+  containing its own statement sequence) ``gnatmetric`` computes the\n+  following complexity metrics:\n \n   * McCabe cyclomatic complexity;\n \n@@ -2329,17 +2309,19 @@ Alternatively, you may run the script using the following command line:\n   The McCabe cyclomatic complexity metric is defined\n   in `http://www.mccabe.com/pdf/mccabe-nist235r.pdf <http://www.mccabe.com/pdf/mccabe-nist235r.pdf>`_\n \n-  According to McCabe, both control statements and short-circuit control forms\n-  should be taken into account when computing cyclomatic complexity.\n-  For Ada 2012 we have also take into account conditional expressions\n-  and quantified expressions. For each body, we compute three metric values:\n+  According to McCabe, both control statements and short-circuit control\n+  forms should be taken into account when computing cyclomatic\n+  complexity.  For Ada 2012 we have also take into account conditional\n+  expressions and quantified expressions. For each body, we compute\n+  three metric values:\n \n   * the complexity introduced by control\n     statements only, without taking into account short-circuit forms\n     (referred as ``statement complexity`` in ``gnatmetric`` output),\n \n   * the complexity introduced by short-circuit control forms only\n-    (referred as ``expression complexity`` in ``gnatmetric`` output), and\n+    (referred as ``expression complexity`` in ``gnatmetric`` output),\n+    and\n \n   * the total\n     cyclomatic complexity, which is the sum of these two values\n@@ -2387,7 +2369,7 @@ Alternatively, you may run the script using the following command line:\n   the following switches:\n \n \n-  .. index:: -complexity (gnatmetric)\n+  .. index:: --complexity (gnatmetric)\n   .. index:: --no-complexity (gnatmetric)\n \n \n@@ -2434,10 +2416,10 @@ Alternatively, you may run the script using the following command line:\n     Do not report the average McCabe Cyclomatic Complexity for all the subprogram\n     bodies, task bodies, entry bodies and statement sequences in package bodies\n \n-  .. index:: -ne (gnatmetric)\n+  .. index:: --no-treat-exit-as-goto (gnatmetric)\n \n \n-  :switch:`-ne`\n+  :switch:`--no-treat-exit-as-goto`\n     Do not consider ``exit`` statements as ``goto``\\ s when\n     computing Essential Complexity\n \n@@ -2753,18 +2735,9 @@ Alternatively, you may run the script using the following command line:\n     tool argument r if :switch:`--no_objects_dir` is specified.\n \n \n-  .. index:: --no_objects_dir (gnatmetric)\n+  .. index:: --files (gnatmetric)\n \n-  :switch:`--no_objects_dir`\n-    Place all the result files into the current directory instead of\n-    project objects directory. This corresponds to the ``gnatcheck``\n-    behavior when it is called with the project file from the\n-    GNAT driver. Has no effect if no project is specified.\n-\n-\n-  .. index:: -files (gnatmetric)\n-\n-  :switch:`-files {filename}`\n+  :switch:`--files={file}`\n     Take as arguments the files listed in text file ``file``.\n     Text file ``file`` may contain empty lines that are ignored.\n     Each nonempty line should contain the name of an existing file.\n@@ -2776,32 +2749,18 @@ Alternatively, you may run the script using the following command line:\n   :switch:`--ignore={filename}`\n     Do not process the sources listed in a specified file.\n \n-  .. index:: -j (gnatmetric)\n-\n-  :switch:`-j{n}`\n-    Use ``n`` processes to carry out the tree creations (internal representations\n-    of the argument sources). On a multiprocessor machine this speeds up processing\n-    of big sets of argument sources. If ``n`` is 0, then the maximum number of\n-    parallel tree creations is the number of core processors on the platform.\n \n-  .. index:: -t (gnatmetric)\n+  .. index:: --verbose (gnatmetric)\n \n-\n-  :switch:`-t`\n-    Print out execution time.\n-\n-\n-  .. index:: -v (gnatmetric)\n-\n-  :switch:`-v`\n+  :switch:`--verbose`\n     Verbose mode;\n     ``gnatmetric`` generates version information and then\n     a trace of sources being processed.\n \n \n-  .. index:: -q (gnatmetric)\n+  .. index:: --quiet (gnatmetric)\n \n-  :switch:`-q`\n+  :switch:`--quiet`\n     Quiet mode.\n \n   If a project file is specified and no argument source is explicitly\n@@ -2810,6 +2769,77 @@ Alternatively, you may run the script using the following command line:\n   all the immediate units of the argument project.\n \n \n+  Legacy Switches\n+  ^^^^^^^^^^^^^^^\n+\n+  Some switches have a short form, mostly for legacy reasons,\n+  as shown below.\n+\n+  .. index:: -x (gnatmetric)\n+\n+  :switch:`-x`\n+    :switch:`--generate-xml-output`\n+\n+  .. index:: -xs (gnatmetric)\n+\n+  :switch:`-xs`\n+    :switch:`--generate-xml-schema`\n+\n+  .. index:: -nt (gnatmetric)\n+\n+  :switch:`-nt`\n+    :switch:`--no-text-output`\n+\n+  .. index:: -d (gnatmetric)\n+\n+  :switch:`-d {output-dir}`\n+    :switch:`--output-dir`\n+\n+  .. index:: -o (gnatmetric)\n+\n+  :switch:`-o {file-suffix}`\n+    :switch:`--output-suffix`\n+\n+  .. index:: -og (gnatmetric)\n+\n+  :switch:`-og {file-name}`\n+    :switch:`--global-file-name`\n+\n+  .. index:: -ox (gnatmetric)\n+\n+  :switch:`-ox {file-name}`\n+    :switch:`--xml-file-name`\n+\n+  .. index:: -sfn (gnatmetric)\n+\n+  :switch:`-sfn`\n+    :switch:`--short-file-names`\n+\n+  .. index:: -nolocal (gnatmetric)\n+\n+  :switch:`-nolocal`\n+    :switch:`--no-local-metrics`\n+\n+  .. index:: -ne (gnatmetric)\n+\n+  :switch:`-ne`\n+    :switch:`--no-treat-exit-as-goto`\n+\n+  .. index:: -files (gnatmetric)\n+\n+  :switch:`-files {filename}`\n+    :switch:`--files`\n+\n+  .. index:: -v (gnatmetric)\n+\n+  :switch:`-v`\n+    :switch:`--verbose`\n+\n+  .. index:: -q (gnatmetric)\n+\n+  :switch:`-q`\n+    :switch:`--quiet`\n+\n .. only:: PRO or GPL\n \n    .. _The_GNAT_Pretty_Printer_gnatpp:"}]}