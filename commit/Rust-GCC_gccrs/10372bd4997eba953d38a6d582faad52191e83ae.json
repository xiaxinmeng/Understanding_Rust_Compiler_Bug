{"sha": "10372bd4997eba953d38a6d582faad52191e83ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTAzNzJiZDQ5OTdlYmE5NTNkMzhhNmQ1ODJmYWFkNTIxOTFlODNhZQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2007-10-12T08:42:13Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2007-10-12T08:42:13Z"}, "message": "re PR middle-end/26198 (Unfolded comparison after cfg_cleanup)\n\n2007-10-12  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/26198\n\t* tree-ssa-forwprop.c (can_propagate_from): Do not propagate from\n\ta rhs with side-effects or which is a load.\n\t(forward_propagate_into_cond): Also try combining both operands.\n\n\t* gcc.dg/tree-ssa/forwprop-3.c: New testcase.\n\t* gcc.c-torture/execute/20071011-1.c: Likewise.\n\t* gcc.dg/tree-ssa/ssa-pre-9.c: Adjust.\n\nFrom-SVN: r129256", "tree": {"sha": "f8336d7e5dd6093801511dfd43a58da560108cd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8336d7e5dd6093801511dfd43a58da560108cd7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10372bd4997eba953d38a6d582faad52191e83ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10372bd4997eba953d38a6d582faad52191e83ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10372bd4997eba953d38a6d582faad52191e83ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10372bd4997eba953d38a6d582faad52191e83ae/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6d3bf8498df74204a3cb0a74481634313d892fd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d3bf8498df74204a3cb0a74481634313d892fd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d3bf8498df74204a3cb0a74481634313d892fd6"}], "stats": {"total": 85, "additions": 76, "deletions": 9}, "files": [{"sha": "9abace31683d90ee6afb42ba6cf7adb8cad28cf7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10372bd4997eba953d38a6d582faad52191e83ae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10372bd4997eba953d38a6d582faad52191e83ae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=10372bd4997eba953d38a6d582faad52191e83ae", "patch": "@@ -1,3 +1,10 @@\n+2007-10-12  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/26198\n+\t* tree-ssa-forwprop.c (can_propagate_from): Do not propagate from\n+\ta rhs with side-effects or which is a load.\n+\t(forward_propagate_into_cond): Also try combining both operands.\n+\n 2007-10-12  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR tree-optimization/33742"}, {"sha": "97d93ea5ef1527caeb1c7340cff99d722dcb3fee", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10372bd4997eba953d38a6d582faad52191e83ae/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10372bd4997eba953d38a6d582faad52191e83ae/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=10372bd4997eba953d38a6d582faad52191e83ae", "patch": "@@ -1,3 +1,10 @@\n+2007-10-12  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/26198\n+\t* gcc.dg/tree-ssa/forwprop-3.c: New testcase.\n+\t* gcc.c-torture/execute/20071011-1.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-pre-9.c: Adjust.\n+\n 2007-10-12  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR tree-optimization/33742"}, {"sha": "631658540b382c0a884bb969febdf793a607c398", "filename": "gcc/testsuite/gcc.c-torture/execute/20071011-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10372bd4997eba953d38a6d582faad52191e83ae/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20071011-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10372bd4997eba953d38a6d582faad52191e83ae/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20071011-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20071011-1.c?ref=10372bd4997eba953d38a6d582faad52191e83ae", "patch": "@@ -0,0 +1,19 @@\n+extern void abort(void);\n+void foo(int *p)\n+{\n+  int x;\n+  int y;\n+  x = *p;\n+  *p = 0;\n+  y = *p;\n+  if (x != y)\n+    return;\n+  abort ();\n+}\n+\n+int main()\n+{\n+  int a = 1;\n+  foo(&a);\n+  return 0;\n+}"}, {"sha": "0d26b8d9cf3ac71df6beff445b71f76124f42474", "filename": "gcc/testsuite/gcc.dg/tree-ssa/forwprop-3.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10372bd4997eba953d38a6d582faad52191e83ae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10372bd4997eba953d38a6d582faad52191e83ae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-3.c?ref=10372bd4997eba953d38a6d582faad52191e83ae", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-forwprop1\" } */\n+\n+struct bar {\n+  int a[2];\n+};\n+\n+int foo(struct bar *x)\n+{\n+  int *p = &x->a[0];\n+  int *q = &x->a[1];\n+  if (p < q)\n+    return 1;\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"Replaced .p_. < q_.. with .1.\" \"forwprop1\" } } */\n+/* { dg-final { cleanup-tree-dump \"forwprop1\" } } */"}, {"sha": "30d968b7c536f927000d6b116354948bb685170b", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-pre-9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10372bd4997eba953d38a6d582faad52191e83ae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10372bd4997eba953d38a6d582faad52191e83ae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-9.c?ref=10372bd4997eba953d38a6d582faad52191e83ae", "patch": "@@ -9,5 +9,5 @@ foo (unsigned long a)\n     return 1;\n   return 0;\n }\n-/* { dg-final { scan-tree-dump-times \"Eliminated: 1\" 1 \"fre\"} } */\n+/* { dg-final { scan-tree-dump-times \"return 0;\" 0 \"fre\"} } */\n /* { dg-final { cleanup-tree-dump \"fre\" } } */"}, {"sha": "b92a9f13f48662f23edce7ef8adda93d3339ab0f", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10372bd4997eba953d38a6d582faad52191e83ae/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10372bd4997eba953d38a6d582faad52191e83ae/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=10372bd4997eba953d38a6d582faad52191e83ae", "patch": "@@ -237,6 +237,14 @@ can_propagate_from (tree def_stmt)\n {\n   tree rhs = GIMPLE_STMT_OPERAND (def_stmt, 1);\n \n+  /* If the rhs has side-effects we cannot propagate from it.  */\n+  if (TREE_SIDE_EFFECTS (rhs))\n+    return false;\n+\n+  /* If the rhs is a load we cannot propagate from it.  */\n+  if (REFERENCE_CLASS_P (rhs))\n+    return false;\n+\n   /* We cannot propagate ssa names that occur in abnormal phi nodes.  */\n   switch (TREE_CODE_LENGTH (TREE_CODE (rhs)))\n     {\n@@ -351,7 +359,7 @@ forward_propagate_into_cond (tree cond_expr, tree stmt)\n   do {\n     tree tmp = NULL_TREE;\n     tree cond = COND_EXPR_COND (cond_expr);\n-    tree name, def_stmt, rhs;\n+    tree name, def_stmt, rhs0 = NULL_TREE, rhs1 = NULL_TREE;\n     bool single_use_p;\n \n     /* We can do tree combining on SSA_NAME and comparison expressions.  */\n@@ -366,9 +374,9 @@ forward_propagate_into_cond (tree cond_expr, tree stmt)\n \t    && can_propagate_from (def_stmt))\n \t  {\n \t    tree op1 = TREE_OPERAND (cond, 1);\n-\t    rhs = GIMPLE_STMT_OPERAND (def_stmt, 1);\n+\t    rhs0 = GIMPLE_STMT_OPERAND (def_stmt, 1);\n \t    tmp = combine_cond_expr_cond (TREE_CODE (cond), boolean_type_node,\n-\t\t\t\t          fold_convert (TREE_TYPE (op1), rhs),\n+\t\t\t\t          fold_convert (TREE_TYPE (op1), rhs0),\n \t\t\t\t          op1, !single_use_p);\n \t  }\n \t/* If that wasn't successful, try the second operand.  */\n@@ -382,12 +390,20 @@ forward_propagate_into_cond (tree cond_expr, tree stmt)\n \t        || !can_propagate_from (def_stmt))\n \t      return did_something;\n \n-\t    rhs = GIMPLE_STMT_OPERAND (def_stmt, 1);\n+\t    rhs1 = GIMPLE_STMT_OPERAND (def_stmt, 1);\n \t    tmp = combine_cond_expr_cond (TREE_CODE (cond), boolean_type_node,\n \t\t\t\t\t  op0,\n-\t\t\t\t          fold_convert (TREE_TYPE (op0), rhs),\n+\t\t\t\t          fold_convert (TREE_TYPE (op0), rhs1),\n \t\t\t\t\t  !single_use_p);\n \t  }\n+\t/* If that wasn't successful either, try both operands.  */\n+\tif (tmp == NULL_TREE\n+\t    && rhs0 != NULL_TREE\n+\t    && rhs1 != NULL_TREE)\n+\t  tmp = combine_cond_expr_cond (TREE_CODE (cond), boolean_type_node,\n+\t\t\t\t\trhs0,\n+\t\t\t\t        fold_convert (TREE_TYPE (rhs0), rhs1),\n+\t\t\t\t\t!single_use_p);\n       }\n     else if (TREE_CODE (cond) == SSA_NAME)\n       {\n@@ -397,9 +413,9 @@ forward_propagate_into_cond (tree cond_expr, tree stmt)\n \t    || !can_propagate_from (def_stmt))\n \t  return did_something;\n \n-\trhs = GIMPLE_STMT_OPERAND (def_stmt, 1);\n-\ttmp = combine_cond_expr_cond (NE_EXPR, boolean_type_node, rhs,\n-\t\t\t\t      build_int_cst (TREE_TYPE (rhs), 0),\n+\trhs0 = GIMPLE_STMT_OPERAND (def_stmt, 1);\n+\ttmp = combine_cond_expr_cond (NE_EXPR, boolean_type_node, rhs0,\n+\t\t\t\t      build_int_cst (TREE_TYPE (rhs0), 0),\n \t\t\t\t      false);\n       }\n "}]}