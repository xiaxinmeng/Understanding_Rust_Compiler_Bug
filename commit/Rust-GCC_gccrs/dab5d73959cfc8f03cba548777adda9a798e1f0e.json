{"sha": "dab5d73959cfc8f03cba548777adda9a798e1f0e", "node_id": "C_kwDOANBUbNoAKGRhYjVkNzM5NTljZmM4ZjAzY2JhNTQ4Nzc3YWRkYTlhNzk4ZTFmMGU", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2022-11-09T15:58:15Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2022-11-11T15:07:50Z"}, "message": "process transitive inferred ranges in pre_fold_stmt.\n\nThe subst_and_fold engine can perform some folding activity before\ncalling fold_stmt, so do this work in pre_fold_stmt instead.\n\n\t* tree-vrp.cc (rvrp_folder::rvrp_folder): Init m_last_bb_stmt.\n\t(rvrp_folder::pre_fold_bb): Set m_last_bb_stmt.\n\t(rvrp_folder::pre_fold_stmt): Check for transitive inferred ranges.\n\t(rvrp_folder::fold_stmt): Check in pre_fold_stmt instead.", "tree": {"sha": "236cc905e8c2c4036b40b8a3a36e85253676d42f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/236cc905e8c2c4036b40b8a3a36e85253676d42f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dab5d73959cfc8f03cba548777adda9a798e1f0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dab5d73959cfc8f03cba548777adda9a798e1f0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dab5d73959cfc8f03cba548777adda9a798e1f0e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dab5d73959cfc8f03cba548777adda9a798e1f0e/comments", "author": null, "committer": null, "parents": [{"sha": "ca1db2725a3232b2e15eaa1bd7fbe33927843476", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca1db2725a3232b2e15eaa1bd7fbe33927843476", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca1db2725a3232b2e15eaa1bd7fbe33927843476"}], "stats": {"total": 16, "additions": 7, "deletions": 9}, "files": [{"sha": "a474d9d11e5cbeaf7743c58a72b928a739b9c044", "filename": "gcc/tree-vrp.cc", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dab5d73959cfc8f03cba548777adda9a798e1f0e/gcc%2Ftree-vrp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dab5d73959cfc8f03cba548777adda9a798e1f0e/gcc%2Ftree-vrp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.cc?ref=dab5d73959cfc8f03cba548777adda9a798e1f0e", "patch": "@@ -4442,6 +4442,7 @@ class rvrp_folder : public substitute_and_fold_engine\n   {\n     m_ranger = r;\n     m_pta = new pointer_equiv_analyzer (m_ranger);\n+    m_last_bb_stmt = NULL;\n   }\n \n   ~rvrp_folder ()\n@@ -4485,6 +4486,7 @@ class rvrp_folder : public substitute_and_fold_engine\n     for (gphi_iterator gsi = gsi_start_phis (bb); !gsi_end_p (gsi);\n \t gsi_next (&gsi))\n       m_ranger->register_inferred_ranges (gsi.phi ());\n+    m_last_bb_stmt = last_stmt (bb);\n   }\n \n   void post_fold_bb (basic_block bb) override\n@@ -4497,19 +4499,14 @@ class rvrp_folder : public substitute_and_fold_engine\n   void pre_fold_stmt (gimple *stmt) override\n   {\n     m_pta->visit_stmt (stmt);\n+    // If this is the last stmt and there are inferred ranges, reparse the\n+    // block for transitive inferred ranges that occur earlier in the block.\n+    if (stmt == m_last_bb_stmt)\n+      m_ranger->register_transitive_inferred_ranges (gimple_bb (stmt));\n   }\n \n   bool fold_stmt (gimple_stmt_iterator *gsi) override\n   {\n-    gimple *s = gsi_stmt (*gsi);\n-    // If this is a block ending condition, and there are inferred ranges,\n-    // reparse the block to see if there are any transitive inferred ranges.\n-    if (is_a<gcond *> (s))\n-      {\n-\tbasic_block bb = gimple_bb (s);\n-\tif (bb && s == gimple_outgoing_range_stmt_p (bb))\n-\t  m_ranger->register_transitive_inferred_ranges (bb);\n-      }\n     bool ret = m_simplifier.simplify (gsi);\n     if (!ret)\n       ret = m_ranger->fold_stmt (gsi, follow_single_use_edges);\n@@ -4523,6 +4520,7 @@ class rvrp_folder : public substitute_and_fold_engine\n   gimple_ranger *m_ranger;\n   simplify_using_ranges m_simplifier;\n   pointer_equiv_analyzer *m_pta;\n+  gimple *m_last_bb_stmt;\n };\n \n /* Main entry point for a VRP pass using just ranger. This can be called"}]}