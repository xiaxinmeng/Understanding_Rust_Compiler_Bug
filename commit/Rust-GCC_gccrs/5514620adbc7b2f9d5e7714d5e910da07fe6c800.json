{"sha": "5514620adbc7b2f9d5e7714d5e910da07fe6c800", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTUxNDYyMGFkYmM3YjJmOWQ1ZTc3MTRkNWU5MTBkYTA3ZmU2YzgwMA==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@apple.com", "date": "2004-09-02T22:38:18Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2004-09-02T22:38:18Z"}, "message": "rs6000.c (expand_block_clear): Use vector instructions if available.\n\n\t* config/rs6000/rs6000.c (expand_block_clear): Use vector\n\tinstructions if available.\n\t(expand_block_move): Likewise.\n\nFrom-SVN: r86996", "tree": {"sha": "799a0795138fb79e938ceb80a461d68bfb419ccc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/799a0795138fb79e938ceb80a461d68bfb419ccc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5514620adbc7b2f9d5e7714d5e910da07fe6c800", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5514620adbc7b2f9d5e7714d5e910da07fe6c800", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5514620adbc7b2f9d5e7714d5e910da07fe6c800", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5514620adbc7b2f9d5e7714d5e910da07fe6c800/comments", "author": {"login": "geoffk01", "id": 31905243, "node_id": "MDQ6VXNlcjMxOTA1MjQz", "avatar_url": "https://avatars.githubusercontent.com/u/31905243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk01", "html_url": "https://github.com/geoffk01", "followers_url": "https://api.github.com/users/geoffk01/followers", "following_url": "https://api.github.com/users/geoffk01/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk01/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk01/subscriptions", "organizations_url": "https://api.github.com/users/geoffk01/orgs", "repos_url": "https://api.github.com/users/geoffk01/repos", "events_url": "https://api.github.com/users/geoffk01/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk01/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "02f14c3856c17b3e65c2c791b3830386daabc2e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02f14c3856c17b3e65c2c791b3830386daabc2e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02f14c3856c17b3e65c2c791b3830386daabc2e7"}], "stats": {"total": 89, "additions": 70, "deletions": 19}, "files": [{"sha": "49855d6f2a2d44e7271deec069d87f9695d5637d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5514620adbc7b2f9d5e7714d5e910da07fe6c800/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5514620adbc7b2f9d5e7714d5e910da07fe6c800/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5514620adbc7b2f9d5e7714d5e910da07fe6c800", "patch": "@@ -1,3 +1,9 @@\n+2004-09-02  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* config/rs6000/rs6000.c (expand_block_clear): Use vector\n+\tinstructions if available.\n+\t(expand_block_move): Likewise.\n+\n 2004-09-03  Jan Hubicka  <jh@suse.cz>\n \n \t* rtl.def (RANGE_INFO, RANGE_REG, RANGE_VAR, RANGE_LIVE): Kill."}, {"sha": "335dbe3d16e85dcfba4faf4f8d41a2627dd66b8b", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 38, "deletions": 19, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5514620adbc7b2f9d5e7714d5e910da07fe6c800/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5514620adbc7b2f9d5e7714d5e910da07fe6c800/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=5514620adbc7b2f9d5e7714d5e910da07fe6c800", "patch": "@@ -8319,11 +8319,12 @@ expand_block_clear (rtx operands[])\n   rtx orig_dest = operands[0];\n   rtx bytes_rtx\t= operands[1];\n   rtx align_rtx = operands[2];\n-  int constp\t= (GET_CODE (bytes_rtx) == CONST_INT);\n-  int align;\n-  int bytes;\n+  bool constp\t= (GET_CODE (bytes_rtx) == CONST_INT);\n+  HOST_WIDE_INT align;\n+  HOST_WIDE_INT bytes;\n   int offset;\n   int clear_bytes;\n+  int clear_step;\n \n   /* If this is not a fixed size move, just call memcpy */\n   if (! constp)\n@@ -8339,49 +8340,59 @@ expand_block_clear (rtx operands[])\n   if (bytes <= 0)\n     return 1;\n \n-  if (bytes > (TARGET_POWERPC64 && align >= 32 ? 64 : 32))\n-    return 0;\n+  /* Use the builtin memset after a point, to avoid huge code bloat.\n+     When optimize_size, avoid any significant code bloat; calling\n+     memset is about 4 instructions, so allow for one instruction to\n+     load zero and three to do clearing.  */\n+  if (TARGET_ALTIVEC && align >= 128)\n+    clear_step = 16;\n+  else if (TARGET_POWERPC64 && align >= 32)\n+    clear_step = 8;\n+  else\n+    clear_step = 4;\n \n-  if (optimize_size && bytes > 16)\n+  if (optimize_size && bytes > 3 * clear_step)\n+    return 0;\n+  if (! optimize_size && bytes > 8 * clear_step)\n     return 0;\n \n   for (offset = 0; bytes > 0; offset += clear_bytes, bytes -= clear_bytes)\n     {\n-      rtx (*mov) (rtx, rtx);\n       enum machine_mode mode = BLKmode;\n       rtx dest;\n \n-      if (bytes >= 8 && TARGET_POWERPC64\n-\t       /* 64-bit loads and stores require word-aligned\n-\t\t  displacements.  */\n-\t       && (align >= 64 || (!STRICT_ALIGNMENT && align >= 32)))\n+      if (bytes >= 16 && TARGET_ALTIVEC && align >= 128)\n+\t{\n+\t  clear_bytes = 16;\n+\t  mode = V4SImode;\n+\t}\n+      else if (bytes >= 8 && TARGET_POWERPC64\n+\t  /* 64-bit loads and stores require word-aligned\n+\t     displacements.  */\n+\t  && (align >= 64 || (!STRICT_ALIGNMENT && align >= 32)))\n \t{\n \t  clear_bytes = 8;\n \t  mode = DImode;\n-\t  mov = gen_movdi;\n \t}\n-      else if (bytes >= 4 && !STRICT_ALIGNMENT)\n+      else if (bytes >= 4 && (align >= 32 || !STRICT_ALIGNMENT))\n \t{\t\t\t/* move 4 bytes */\n \t  clear_bytes = 4;\n \t  mode = SImode;\n-\t  mov = gen_movsi;\n \t}\n-      else if (bytes == 2 && !STRICT_ALIGNMENT)\n+      else if (bytes == 2 && (align >= 16 || !STRICT_ALIGNMENT))\n \t{\t\t\t/* move 2 bytes */\n \t  clear_bytes = 2;\n \t  mode = HImode;\n-\t  mov = gen_movhi;\n \t}\n       else /* move 1 byte at a time */\n \t{\n \t  clear_bytes = 1;\n \t  mode = QImode;\n-\t  mov = gen_movqi;\n \t}\n \n       dest = adjust_address (orig_dest, mode, offset);\n \n-      emit_insn ((*mov) (dest, const0_rtx));\n+      emit_move_insn (dest, CONST0_RTX (mode));\n     }\n \n   return 1;\n@@ -8441,7 +8452,15 @@ expand_block_move (rtx operands[])\n       enum machine_mode mode = BLKmode;\n       rtx src, dest;\n \n-      if (TARGET_STRING\n+      /* Altivec first, since it will be faster than a string move\n+\t when it applies, and usually not significantly larger.  */\n+      if (TARGET_ALTIVEC && bytes >= 16 && align >= 128)\n+\t{\n+\t  move_bytes = 16;\n+\t  mode = V4SImode;\n+\t  gen_func.mov = gen_movv4si;\n+\t}\n+      else if (TARGET_STRING\n \t  && bytes > 24\t\t/* move up to 32 bytes at a time */\n \t  && ! fixed_regs[5]\n \t  && ! fixed_regs[6]"}, {"sha": "df9b8065f75d97bf520537e8468bdaa99cb9b230", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5514620adbc7b2f9d5e7714d5e910da07fe6c800/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5514620adbc7b2f9d5e7714d5e910da07fe6c800/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5514620adbc7b2f9d5e7714d5e910da07fe6c800", "patch": "@@ -1,3 +1,8 @@\n+2004-09-02  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* gcc.dg/ppc-vector-memcpy.c: New.\n+\t* gcc.dg/ppc-vector-memset.c: New.\n+\n 2004-09-02  Chao-ying Fu  <fu@mips.com>\n \n \t* gcc.target/mips/mips-3d-1.c: New test."}, {"sha": "b6b9e000124b07dc7475f03cf172e55e65589672", "filename": "gcc/testsuite/gcc.dg/ppc-vector-memcpy.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5514620adbc7b2f9d5e7714d5e910da07fe6c800/gcc%2Ftestsuite%2Fgcc.dg%2Fppc-vector-memcpy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5514620adbc7b2f9d5e7714d5e910da07fe6c800/gcc%2Ftestsuite%2Fgcc.dg%2Fppc-vector-memcpy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fppc-vector-memcpy.c?ref=5514620adbc7b2f9d5e7714d5e910da07fe6c800", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile { target powerpc*-*-* } } */\n+/* { dg-options \"-O -maltivec\" } */\n+/* { dg-final { scan-assembler \"lvx\" } } */\n+\n+void foo(void)\n+{\n+  int x[8] __attribute__((aligned(128))) = { 1 };\n+  bar (x);\n+}"}, {"sha": "615a025f0d08287ca728ecf3abcfe79e3c95831e", "filename": "gcc/testsuite/gcc.dg/ppc-vector-memset.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5514620adbc7b2f9d5e7714d5e910da07fe6c800/gcc%2Ftestsuite%2Fgcc.dg%2Fppc-vector-memset.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5514620adbc7b2f9d5e7714d5e910da07fe6c800/gcc%2Ftestsuite%2Fgcc.dg%2Fppc-vector-memset.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fppc-vector-memset.c?ref=5514620adbc7b2f9d5e7714d5e910da07fe6c800", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile { target powerpc*-*-* } } */\n+/* { dg-options \"-O -maltivec\" } */\n+/* { dg-final { scan-assembler \"stvx\" } } */\n+\n+#include <string.h>\n+\n+void foo(void)\n+{\n+  int x[8] __attribute__((aligned(128)));\n+  memset (x, 0, sizeof (x));\n+  bar (x);\n+}"}]}