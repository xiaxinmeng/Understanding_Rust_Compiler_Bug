{"sha": "ea51fba504d05e94f7ac97e7f278652d684418b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWE1MWZiYTUwNGQwNWU5NGY3YWM5N2U3ZjI3ODY1MmQ2ODQ0MThiMg==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-09-28T15:55:21Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-09-28T15:55:21Z"}, "message": "libstdc++: Add test that tracks range adaptors' sizes\n\nlibstdc++-v3/ChangeLog:\n\n\t* testsuite/std/ranges/adaptors/sizeof.cc: New test.", "tree": {"sha": "e42c147a47a09456b5b8b3417d7cfab8fc5616b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e42c147a47a09456b5b8b3417d7cfab8fc5616b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea51fba504d05e94f7ac97e7f278652d684418b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea51fba504d05e94f7ac97e7f278652d684418b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea51fba504d05e94f7ac97e7f278652d684418b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea51fba504d05e94f7ac97e7f278652d684418b2/comments", "author": null, "committer": null, "parents": [{"sha": "620db4ca608987ed3e386fad2fd80fa3886e8154", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/620db4ca608987ed3e386fad2fd80fa3886e8154", "html_url": "https://github.com/Rust-GCC/gccrs/commit/620db4ca608987ed3e386fad2fd80fa3886e8154"}], "stats": {"total": 52, "additions": 52, "deletions": 0}, "files": [{"sha": "2182981b7a2980abe7b808db31c0a9fa12323047", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/sizeof.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea51fba504d05e94f7ac97e7f278652d684418b2/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fsizeof.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea51fba504d05e94f7ac97e7f278652d684418b2/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fsizeof.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fsizeof.cc?ref=ea51fba504d05e94f7ac97e7f278652d684418b2", "patch": "@@ -0,0 +1,52 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <ranges>\n+#include <string_view>\n+\n+namespace ranges = std::ranges;\n+\n+auto pred_f(int x) { return x%2 == 0; };\n+auto pred_l = [] (int x) { return x%2 == 0; };\n+\n+auto func_f(int x) { return x*x; }\n+auto func_l = [] (int x) { return x*x; };\n+\n+using V = ranges::subrange<int*, int*>;\n+constexpr auto ptr = sizeof(int*);\n+static_assert(sizeof(V) == 2*ptr);\n+\n+static_assert(sizeof(ranges::take_view<V>) == 4*ptr);\n+static_assert(sizeof(ranges::drop_view<V>) == 4*ptr);\n+\n+static_assert(sizeof(ranges::filter_view<V, decltype(&pred_f)>) == 5*ptr);\n+static_assert(sizeof(ranges::take_while_view<V, decltype(&pred_f)>) == 4*ptr);\n+static_assert(sizeof(ranges::drop_while_view<V, decltype(&pred_f)>) == 5*ptr);\n+static_assert(sizeof(ranges::transform_view<V, decltype(&func_f)>) == 4*ptr);\n+\n+static_assert(sizeof(ranges::filter_view<V, decltype(pred_l)>) == 4*ptr);\n+static_assert(sizeof(ranges::take_while_view<V, decltype(pred_l)>) == 3*ptr);\n+static_assert(sizeof(ranges::drop_while_view<V, decltype(pred_l)>) == 4*ptr);\n+static_assert(sizeof(ranges::transform_view<V, decltype(func_l)>) == 3*ptr);\n+\n+static_assert(sizeof(ranges::split_view<V, std::string_view>) == 5*ptr);\n+\n+static_assert\n+ (sizeof(ranges::reverse_view<ranges::filter_view<V, decltype(pred_l)>>) == 5*ptr);"}]}