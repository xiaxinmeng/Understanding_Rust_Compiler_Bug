{"sha": "870f6866c96a38d30503d730ca3e9c3a5c320e32", "node_id": "C_kwDOANBUbNoAKDg3MGY2ODY2Yzk2YTM4ZDMwNTAzZDczMGNhM2U5YzNhNWMzMjBlMzI", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2022-06-22T02:10:58Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gnu.org", "date": "2022-06-22T02:10:58Z"}, "message": "testsuite: outputs.exp: test for skip_atsave more thoroughly\n\nThe presence of -I or -L flags in link command lines changes the\ndriver's, and thus the linker's behavior, WRT naming files with\ncommand-line options.  With such flags, the driver creates .args.0 and\n.args.1 files, whereas without them it's the linker (collect2, really)\nthat creates .ld1_args.\n\nI've hit some fails on a target system that doesn't have -I or -L\nflags in the board config file, but it does add some of them\nimplicitly with configured-in driver self specs.  Alas, the test in\noutputs.exp doesn't catch that, so we proceed to run rather than\nskip_atsave tests.\n\nI've reworked the outest procedure to allow dry runs and to return\nwould-have-been pass/fail results as lists, so we can now test whether\ncertain files are created and use that to configure the actual test\nruns.\n\n\nfor  gcc/testsuite/ChangeLog\n\n\t* gcc.misc-tests/outputs.exp (outest): Introduce quiet mode,\n\tcreate and return lists of passes and fails.  Use it to catch\n\tskip_atsave cases where -L flags are implicitly added by\n\tdriver self specs.", "tree": {"sha": "9b6a4f98ac1782987180840c616eff857a668cfe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b6a4f98ac1782987180840c616eff857a668cfe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/870f6866c96a38d30503d730ca3e9c3a5c320e32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/870f6866c96a38d30503d730ca3e9c3a5c320e32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/870f6866c96a38d30503d730ca3e9c3a5c320e32", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/870f6866c96a38d30503d730ca3e9c3a5c320e32/comments", "author": null, "committer": null, "parents": [{"sha": "614db2317e6519db9c77523498f5f14b860818d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/614db2317e6519db9c77523498f5f14b860818d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/614db2317e6519db9c77523498f5f14b860818d2"}], "stats": {"total": 49, "additions": 42, "deletions": 7}, "files": [{"sha": "a63ce66693b976c35eee699c5c51fda79558080c", "filename": "gcc/testsuite/gcc.misc-tests/outputs.exp", "status": "modified", "additions": 42, "deletions": 7, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/870f6866c96a38d30503d730ca3e9c3a5c320e32/gcc%2Ftestsuite%2Fgcc.misc-tests%2Foutputs.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/870f6866c96a38d30503d730ca3e9c3a5c320e32/gcc%2Ftestsuite%2Fgcc.misc-tests%2Foutputs.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.misc-tests%2Foutputs.exp?ref=870f6866c96a38d30503d730ca3e9c3a5c320e32", "patch": "@@ -116,8 +116,23 @@ if [info exists env(MAKEFLAGS)] {\n # it weren't for\n # https://core.tcl-lang.org/tcl/tktview?name=5bbd044812), but .{i,s,o}\n # and .[iso] will pass even if only the .o is present.\n+\n+# Return a list containing two lists, the first naming the passes, the\n+# second naming the fails.  If test ends with a question mark, the\n+# test is taken as a preparatory test or cleanup, and no pass or fail\n+# results will be logged, though the lists will still be built and\n+# returned.\n array unset outests *\n proc outest { test sources opts dirs outputs } {\n+    if { [string index $test end] == \"?\" } {\n+\tset quiet 1\n+    } else {\n+\tset quiet 0\n+    }\n+\n+    set passes {}\n+    set fails {}\n+\n     global b srcdir subdir\n     global outests\n \n@@ -182,15 +197,15 @@ proc outest { test sources opts dirs outputs } {\n \t\tset o \"$og\"\n \t    }\n \t    if { [file exists $d$o] } then {\n-\t\tpass \"$test: $d$o\"\n+\t\tlappend passes \"$d$o\"\n \t\tfile delete $d$o\n \t    } else {\n \t        set ogl [glob -nocomplain -path $d -- $o]\n \t\tif { $ogl != {} } {\n-\t\t    pass \"$test: $d$o\"\n+\t\t    lappend passes \"$d$o\"\n \t\t    file delete $ogl\n \t\t} else {\n-\t\t    fail \"$test: $d$o\"\n+\t\t    lappend fails \"$d$o\"\n \t\t}\n \t    }\n \t}\n@@ -219,17 +234,27 @@ proc outest { test sources opts dirs outputs } {\n     }\n \n     if { [llength $outb] == 0 } then {\n-\tpass \"$test: extra\"\n+\tlappend passes \"extra\"\n     } else {\n-\tfail \"$test: extra\\n$outb\"\n+\tlappend fails \"extra\\n$outb\"\n     }\n \n     if { [string equal \"$gcc_output\" \"\"] } then {\n-\tpass \"$test: std out\"\n+\tlappend passes \"std out\"\n     } else {\n-\tfail \"$test: std out\\n$gcc_output\"\n+\tlappend fails \"std out\\n$gcc_output\"\n     }\n \n+    if !$quiet {\n+\tforeach p $passes {\n+\t    pass \"$test: $p\"\n+\t}\n+\tforeach f $fails {\n+\t    fail \"$test: $f\"\n+\t}\n+    }\n+\n+    return [list $passes $fails]\n }\n \n set sing {-0.c}\n@@ -279,6 +304,16 @@ if { \"$aout\" != \"\" } then {\n     set oaout \"-o $aout\"\n }\n \n+# Sometimes the -I or -L flags that cause the compiler driver to save\n+# .args.[01], instead of leaving it for the linker to save .ld1_args,\n+# is hiding in driver self specs.\n+if !$skip_atsave {\n+    set atsave_test_out [outest \"$b-skip-atsave?\" $sing \"@/dev/null -o $b.exe -save-temps\" {} {{.args.1}}]\n+    if { [lindex [lindex $atsave_test_out 0] 0] == \"$b.args.1\" } {\n+\tset skip_atsave 1\n+    }\n+}\n+\n # Driver-chosen outputs.\n outest \"$b-1 asm default 1\" $sing \"-S\" {} {{-0.s}}\n outest \"$b-2 asm default 2\" $mult \"-S\" {} {{-1.s -2.s}}"}]}