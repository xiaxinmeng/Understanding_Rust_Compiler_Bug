{"sha": "97c2a83f6cb8fbfd08366b070392fc51e307445b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTdjMmE4M2Y2Y2I4ZmJmZDA4MzY2YjA3MDM5MmZjNTFlMzA3NDQ1Yg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-01-14T01:17:50Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-01-14T01:17:50Z"}, "message": "Remove use of function prototypes.\n\nFrom-SVN: r8749", "tree": {"sha": "2ea03eba783a630dab37b5377e2df0094d61e0b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ea03eba783a630dab37b5377e2df0094d61e0b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97c2a83f6cb8fbfd08366b070392fc51e307445b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97c2a83f6cb8fbfd08366b070392fc51e307445b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97c2a83f6cb8fbfd08366b070392fc51e307445b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97c2a83f6cb8fbfd08366b070392fc51e307445b/comments", "author": null, "committer": null, "parents": [{"sha": "e72260ea6fd96f40f990da44e94d60956f56bc91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e72260ea6fd96f40f990da44e94d60956f56bc91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e72260ea6fd96f40f990da44e94d60956f56bc91"}], "stats": {"total": 35, "additions": 24, "deletions": 11}, "files": [{"sha": "0bedbebbd8ea8725e249f295e67e70194db256e9", "filename": "gcc/config/1750a/1750a.c", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97c2a83f6cb8fbfd08366b070392fc51e307445b/gcc%2Fconfig%2F1750a%2F1750a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97c2a83f6cb8fbfd08366b070392fc51e307445b/gcc%2Fconfig%2F1750a%2F1750a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2F1750a%2F1750a.c?ref=97c2a83f6cb8fbfd08366b070392fc51e307445b", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines for insn-output.c for MIL-STD-1750.\n-   Copyright (C) 1994 Free Software Foundation, Inc.\n+   Copyright (C) 1994, 1995 Free Software Foundation, Inc.\n    Contributed by O.M.Kellogg, DASA (okellogg@salyko.cube.net).\n \n This file is part of GNU CC.\n@@ -21,6 +21,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #ifndef FILE\n #include <stdio.h>\n #endif\n+#include <string.h>\n \n #define __datalbl\n #include \"config.h\"\n@@ -195,7 +196,8 @@ float_label (code, value)\n \n \n char *\n-movcnt_regno_adjust (rtx * op)\n+movcnt_regno_adjust (op)\n+     rtx *op;\n {\n   static char outstr[40];\n   int cntreg = REGNO (op[2]), cntreg_1750 = REGNO (op[0]) + 1;\n@@ -216,7 +218,9 @@ movcnt_regno_adjust (rtx * op)\n }\n \n char *\n-mod_regno_adjust (char *instr, rtx * op)\n+mod_regno_adjust (instr, op)\n+     char *instr;\n+     rtx *op;\n {\n   static char outstr[40];\n   char *r = (!strncmp (instr, \"dvr\", 3) ? \"r\" : \"\");\n@@ -235,7 +239,8 @@ mod_regno_adjust (char *instr, rtx * op)\n    Check if op is a valid memory operand for 1750A arith./logic (non-move)\n    instructions. */\n int\n-memop_valid (register rtx op)\n+memop_valid (op)\n+     rtx op;\n {\n   if (GET_MODE (op) != Pmode && GET_MODE (op) != VOIDmode)\n     return 0;\n@@ -267,7 +272,9 @@ memop_valid (register rtx op)\n \n /* extra predicate for recog: */\n int\n-nonindirect_operand (register rtx op, enum machine_mode mode)\n+nonindirect_operand (op, mode)\n+     rtx op;\n+     enum machine_mode mode;\n {\n   int retval;\n \n@@ -287,7 +294,9 @@ nonindirect_operand (register rtx op, enum machine_mode mode)\n \n /* predicate for the STC instruction: */\n int\n-small_nonneg_const (register rtx op, enum machine_mode mode)\n+small_nonneg_const (op, mode)\n+     rtx op;\n+     enum machine_mode mode;\n {\n   if (GET_CODE (op) == CONST_INT && INTVAL (op) >= 0 && INTVAL (op) <= 15)\n     return 1;\n@@ -298,7 +307,8 @@ small_nonneg_const (register rtx op, enum machine_mode mode)\n    or as a \"Branch Conditional\": */\n \n int\n-find_jmplbl (int labelnum)\n+find_jmplbl (labelnum)\n+     int labelnum;\n {\n   int i, found = 0;\n \n@@ -314,7 +324,9 @@ find_jmplbl (int labelnum)\n }\n \n char *\n-branch_or_jump (char *condition, int targetlabel_number)\n+branch_or_jump (condition, targetlabel_number)\n+     char *condition;\n+     int targetlabel_number;\n {\n   static char buf[30];\n   int index;"}, {"sha": "4f58560d4e13335068d80c22083af56d91c0841e", "filename": "gcc/config/1750a/1750a.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97c2a83f6cb8fbfd08366b070392fc51e307445b/gcc%2Fconfig%2F1750a%2F1750a.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97c2a83f6cb8fbfd08366b070392fc51e307445b/gcc%2Fconfig%2F1750a%2F1750a.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2F1750a%2F1750a.h?ref=97c2a83f6cb8fbfd08366b070392fc51e307445b", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler.\n-   Copyright (C) 1994 Free Software Foundation, Inc.\n+   Copyright (C) 1994, 1995 Free Software Foundation, Inc.\n    Contributed by O.M.Kellogg, DASA (okellogg@salyko.cube.net).\n \n This file is part of GNU CC.\n@@ -934,9 +934,10 @@ enum reg_class { NO_REGS, INDEX_REGS, BASE_REGS, ALL_REGS, LIM_REG_CLASSES };\n     void const_section()\t\t\t\t\\\n     {\t\t\t\t\t\t\t\\\n \tfprintf(asm_out_file,\"\\tkonst\\n\");\t\t\\\n-\tcurrent_section = Konst;\t\t\t\t\\\n+\tcurrent_section = Konst;\t\t\t\\\n     }\t\t\t\t\t\t\t\\\n-    check_section(enum section sect)\t\t\t\\\n+    check_section(sect)\t\t\t\\\n+        enum section sect;\t\t\t\t\\\n     {\t\t\t\t\t\t\t\\\n         if (current_section != sect) {\t\t\t\\\n \t    fprintf(asm_out_file,\"\\t%s\\n\",sectname[(int)sect]); \\"}]}