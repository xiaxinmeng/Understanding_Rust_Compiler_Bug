{"sha": "20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjBmMjY1M2VmMGY3ZjJkMzNlYzNlNWNlMzg5YWI3MmQ0MjE2ZWMyYQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2009-10-26T19:07:14Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2009-10-26T19:07:14Z"}, "message": "PR c++/38796, Core issue 906\n\n\tPR c++/38796, Core issue 906\ngcc/cp\n\t* cp-tree.h (DECL_DEFAULTED_OUTSIDE_CLASS_P): New.\n\t(DECL_DEFAULTED_IN_CLASS_P): New.\n\t* class.c (user_provided_p): Non-static.\n\t(check_methods): Use it.\n\t(check_bases_and_members): Check defaulted fns.\n\t(defaultable_fn_p): Move and rename to...\n\t* method.c (defaultable_fn_check): ...this.\n\t(defaulted_late_check): New.\n\t* pt.c (tsubst_decl): Call it.\n\t* decl2.c (grokfield): Adjust.\n\t* decl.c (cp_finish_decl): Adjust.\n\t(grok_special_member_properties): Use user_provided_p.\nlibstdc++-v3\n\t* include/std/future (~Future_result_base): Default outside class\n\tbody.\n\t* include/std/system_error (error_category()): Likewise.\n\t* libsupc++/nested_exception.h (nested_exception): Remove\n\texception specifications from defaulted methods.\n\nFrom-SVN: r153565", "tree": {"sha": "3a188f1a76fba7e0480a3fadf8f3fd90b1751852", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a188f1a76fba7e0480a3fadf8f3fd90b1751852"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f96d6fd02e10a4f266c5c459461562887cbf0c6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f96d6fd02e10a4f266c5c459461562887cbf0c6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f96d6fd02e10a4f266c5c459461562887cbf0c6a"}], "stats": {"total": 305, "additions": 239, "deletions": 66}, "files": [{"sha": "50212a9357f27c9c5f6fb1d1837da7a3b99cfd7a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a", "patch": "@@ -1,3 +1,19 @@\n+2009-10-26  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/38796, Core issue 906\n+\t* cp-tree.h (DECL_DEFAULTED_OUTSIDE_CLASS_P): New.\n+\t(DECL_DEFAULTED_IN_CLASS_P): New.\n+\t* class.c (user_provided_p): Non-static.\n+\t(check_methods): Use it.\n+\t(check_bases_and_members): Check defaulted fns.\n+\t(defaultable_fn_p): Move and rename to...\n+\t* method.c (defaultable_fn_check): ...this.\n+\t(defaulted_late_check): New.\n+\t* pt.c (tsubst_decl): Call it.\n+\t* decl2.c (grokfield): Adjust.\n+\t* decl.c (cp_finish_decl): Adjust.\n+\t(grok_special_member_properties): Use user_provided_p.\n+\n 2009-10-26  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR c++/41785"}, {"sha": "d737bdf705515a5abf06aa81ddbf1295f9bf00c6", "filename": "gcc/cp/class.c", "status": "modified", "additions": 31, "deletions": 30, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a", "patch": "@@ -3843,7 +3843,7 @@ check_methods (tree t)\n \t    VEC_safe_push (tree, gc, CLASSTYPE_PURE_VIRTUALS (t), x);\n \t}\n       /* All user-provided destructors are non-trivial.  */\n-      if (DECL_DESTRUCTOR_P (x) && !DECL_DEFAULTED_FN (x))\n+      if (DECL_DESTRUCTOR_P (x) && user_provided_p (x))\n \tTYPE_HAS_NONTRIVIAL_DESTRUCTOR (t) = 1;\n     }\n }\n@@ -4174,17 +4174,17 @@ type_has_user_nondefault_constructor (tree t)\n }\n \n /* Returns true iff FN is a user-provided function, i.e. user-declared\n-   and not defaulted at its first declaration.  */\n+   and not defaulted at its first declaration; or explicit, private,\n+   protected, or non-const.  */\n \n-static bool\n+bool\n user_provided_p (tree fn)\n {\n   if (TREE_CODE (fn) == TEMPLATE_DECL)\n     return true;\n   else\n     return (!DECL_ARTIFICIAL (fn)\n-\t    && !(DECL_DEFAULTED_FN (fn)\n-\t\t && DECL_INITIALIZED_IN_CLASS_P (fn)));\n+\t    && !DECL_DEFAULTED_IN_CLASS_P (fn));\n }\n \n /* Returns true iff class T has a user-provided constructor.  */\n@@ -4238,31 +4238,6 @@ type_has_user_provided_default_constructor (tree t)\n   return false;\n }\n \n-/* Returns true if FN can be explicitly defaulted.  */\n-\n-bool\n-defaultable_fn_p (tree fn)\n-{\n-  if (DECL_CONSTRUCTOR_P (fn))\n-    {\n-      if (FUNCTION_FIRST_USER_PARMTYPE (fn) == void_list_node)\n-\treturn true;\n-      else if (copy_fn_p (fn) > 0\n-\t       && (TREE_CHAIN (FUNCTION_FIRST_USER_PARMTYPE (fn))\n-\t\t   == void_list_node))\n-\treturn true;\n-      else\n-\treturn false;\n-    }\n-  else if (DECL_DESTRUCTOR_P (fn))\n-    return true;\n-  else if (DECL_ASSIGNMENT_OPERATOR_P (fn)\n-\t   && DECL_OVERLOADED_OPERATOR_P (fn) == NOP_EXPR)\n-    return copy_fn_p (fn);\n-  else\n-    return false;\n-}\n-\n /* Remove all zero-width bit-fields from T.  */\n \n static void\n@@ -4356,6 +4331,7 @@ check_bases_and_members (tree t)\n   tree access_decls;\n   bool saved_complex_asn_ref;\n   bool saved_nontrivial_dtor;\n+  tree fn;\n \n   /* By default, we use const reference arguments and generate default\n      constructors.  */\n@@ -4453,6 +4429,31 @@ check_bases_and_members (tree t)\n \t\t\t\t   cant_have_const_ctor,\n \t\t\t\t   no_const_asn_ref);\n \n+  /* Check defaulted declarations here so we have cant_have_const_ctor\n+     and don't need to worry about clones.  */\n+  for (fn = TYPE_METHODS (t); fn; fn = TREE_CHAIN (fn))\n+    if (DECL_DEFAULTED_IN_CLASS_P (fn))\n+      {\n+\tint copy = copy_fn_p (fn);\n+\tif (copy > 0)\n+\t  {\n+\t    bool imp_const_p\n+\t      = (DECL_CONSTRUCTOR_P (fn) ? !cant_have_const_ctor\n+\t\t : !no_const_asn_ref);\n+\t    bool fn_const_p = (copy == 2);\n+\n+\t    if (fn_const_p && !imp_const_p)\n+\t      /* If the function is defaulted outside the class, we just\n+\t\t give the synthesis error.  */\n+\t      error (\"%q+D declared to take const reference, but implicit \"\n+\t\t     \"declaration would take non-const\", fn);\n+\t    else if (imp_const_p && !fn_const_p)\n+\t      error (\"%q+D declared to take non-const reference cannot be \"\n+\t\t     \"defaulted in the class body\", fn);\n+\t  }\n+\tdefaulted_late_check (fn);\n+      }\n+\n   if (LAMBDA_TYPE_P (t))\n     {\n       /* \"The closure type associated with a lambda-expression has a deleted"}, {"sha": "ea28e9fadaaaccc1da39a088b6deac77fecd13ba", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a", "patch": "@@ -2815,10 +2815,18 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n #define DECL_DELETED_FN(DECL) \\\n   (DECL_LANG_SPECIFIC (FUNCTION_DECL_CHECK (DECL))->u.base.threadprivate_or_deleted_p)\n \n-/* Nonzero if DECL was declared with '= default'.  */\n+/* Nonzero if DECL was declared with '= default' (maybe implicitly).  */\n #define DECL_DEFAULTED_FN(DECL) \\\n   (LANG_DECL_FN_CHECK (DECL)->defaulted_p)\n \n+/* Nonzero if DECL is explicitly defaulted in the class body.  */\n+#define DECL_DEFAULTED_IN_CLASS_P(DECL)\t\t\t\t\t\\\n+  (DECL_DEFAULTED_FN (DECL) && DECL_INITIALIZED_IN_CLASS_P (DECL))\n+/* Nonzero if DECL was defaulted outside the class body.  */\n+#define DECL_DEFAULTED_OUTSIDE_CLASS_P(DECL)\t\t\t\t\\\n+  (DECL_DEFAULTED_FN (DECL)\t\t\t\t\t\t\\\n+   && !(DECL_ARTIFICIAL (DECL) || DECL_INITIALIZED_IN_CLASS_P (DECL)))\n+\n /* Record whether a typedef for type `int' was actually `signed int'.  */\n #define C_TYPEDEF_EXPLICITLY_SIGNED(EXP) DECL_LANG_FLAG_1 (EXP)\n \n@@ -4483,9 +4491,11 @@ extern void check_for_override\t\t\t(tree, tree);\n extern void push_class_stack\t\t\t(void);\n extern void pop_class_stack\t\t\t(void);\n extern bool type_has_user_nondefault_constructor (tree);\n+extern bool user_provided_p\t\t\t(tree);\n extern bool type_has_user_provided_constructor  (tree);\n extern bool type_has_user_provided_default_constructor (tree);\n-extern bool defaultable_fn_p\t\t\t(tree);\n+extern void defaulted_late_check\t\t(tree);\n+extern bool defaultable_fn_check\t\t(tree);\n extern void fixup_type_variants\t\t\t(tree);\n extern tree* decl_cloned_function_p\t\t(const_tree, bool);\n extern void clone_function_decl\t\t\t(tree, int);"}, {"sha": "ead3f335c8a561f4621a7a0c8d7c799a1ee5a6ad", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 8, "deletions": 20, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a", "patch": "@@ -5603,17 +5603,10 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n \t}\n       else if (init == ridpointers[(int)RID_DEFAULT])\n \t{\n-\t  if (!defaultable_fn_p (decl))\n-\t    {\n-\t      error (\"%qD cannot be defaulted\", decl);\n-\t      DECL_INITIAL (decl) = NULL_TREE;\n-\t    }\n+\t  if (defaultable_fn_check (decl))\n+\t    DECL_DEFAULTED_FN (decl) = 1;\n \t  else\n-\t    {\n-\t      DECL_DEFAULTED_FN (decl) = 1;\n-\t      FOR_EACH_CLONE (clone, decl)\n-\t\tDECL_DEFAULTED_FN (clone) = 1;\n-\t    }\n+\t    DECL_INITIAL (decl) = NULL_TREE;\n \t}\n     }\n     \n@@ -9866,9 +9859,9 @@ grokparms (tree parmlist, tree *parms)\n    0  if D is not a copy constructor or copy assignment\n       operator.\n    1  if D is a copy constructor or copy assignment operator whose\n-      first parameter is a reference to const qualified T.\n-   2  if D is a copy constructor or copy assignment operator whose\n       first parameter is a reference to non-const qualified T.\n+   2  if D is a copy constructor or copy assignment operator whose\n+      first parameter is a reference to const qualified T.\n \n    This function can be used as a predicate. Positive values indicate\n    a copy constructor and nonzero values indicate a copy assignment\n@@ -9977,10 +9970,6 @@ move_fn_p (const_tree d)\n \n /* Remember any special properties of member function DECL.  */\n \n-#define DECL_DEFAULTED_IN_CLASS_P(DECL)\t\t\t\t\t\\\n- (DECL_DEFAULTED_FN (DECL)\t\t\t\t\t\t\\\n-  && (DECL_ARTIFICIAL (DECL) || DECL_INITIALIZED_IN_CLASS_P (DECL)))\n-\n void\n grok_special_member_properties (tree decl)\n {\n@@ -10007,16 +9996,15 @@ grok_special_member_properties (tree decl)\n \t     are no other parameters or else all other parameters have\n \t     default arguments.  */\n \t  TYPE_HAS_INIT_REF (class_type) = 1;\n-\t  if (!DECL_DEFAULTED_IN_CLASS_P (decl))\n+\t  if (user_provided_p (decl))\n \t    TYPE_HAS_COMPLEX_INIT_REF (class_type) = 1;\n \t  if (ctor > 1)\n \t    TYPE_HAS_CONST_INIT_REF (class_type) = 1;\n \t}\n       else if (sufficient_parms_p (FUNCTION_FIRST_USER_PARMTYPE (decl)))\n \t{\n \t  TYPE_HAS_DEFAULT_CONSTRUCTOR (class_type) = 1;\n-\t  if (TREE_CODE (decl) == TEMPLATE_DECL\n-\t      || !DECL_DEFAULTED_IN_CLASS_P (decl))\n+\t  if (user_provided_p (decl))\n \t    TYPE_HAS_COMPLEX_DFLT (class_type) = 1;\n \t}\n       else if (is_list_ctor (decl))\n@@ -10035,7 +10023,7 @@ grok_special_member_properties (tree decl)\n       if (assop)\n \t{\n \t  TYPE_HAS_ASSIGN_REF (class_type) = 1;\n-\t  if (!DECL_DEFAULTED_IN_CLASS_P (decl))\n+\t  if (user_provided_p (decl))\n \t    TYPE_HAS_COMPLEX_ASSIGN_REF (class_type) = 1;\n \t  if (assop != 1)\n \t    TYPE_HAS_CONST_ASSIGN_REF (class_type) = 1;"}, {"sha": "592ee086961568a4c12234e0edaaa4144df5d4f1", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a", "patch": "@@ -862,9 +862,7 @@ grokfield (const cp_declarator *declarator,\n \t    }\n \t  else if (init == ridpointers[(int)RID_DEFAULT])\n \t    {\n-\t      if (!defaultable_fn_p (value))\n-\t\terror (\"%qD cannot be defaulted\", value);\n-\t      else\n+\t      if (defaultable_fn_check (value))\n \t\t{\n \t\t  DECL_DEFAULTED_FN (value) = 1;\n \t\t  DECL_INITIALIZED_IN_CLASS_P (value) = 1;"}, {"sha": "266406c7cd0f8d94a4c499df9a89cc1c0e2d2559", "filename": "gcc/cp/method.c", "status": "modified", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a", "patch": "@@ -1130,6 +1130,88 @@ implicitly_declare_fn (special_function_kind kind, tree type, bool const_p)\n   return fn;\n }\n \n+/* Gives any errors about defaulted functions which need to be deferred\n+   until the containing class is complete.  */\n+\n+void\n+defaulted_late_check (tree fn)\n+{\n+  /* Complain about invalid signature for defaulted fn.  */\n+  tree ctx = DECL_CONTEXT (fn);\n+  special_function_kind kind = special_function_p (fn);\n+  bool fn_const_p = (copy_fn_p (fn) == 2);\n+  tree implicit_fn = implicitly_declare_fn (kind, ctx, fn_const_p);\n+\n+  if (!same_type_p (TREE_TYPE (TREE_TYPE (fn)),\n+\t\t    TREE_TYPE (TREE_TYPE (implicit_fn)))\n+      || !compparms (TYPE_ARG_TYPES (TREE_TYPE (fn)),\n+\t\t     TYPE_ARG_TYPES (TREE_TYPE (implicit_fn))))\n+    {\n+      error (\"defaulted declaration %q+D\", fn);\n+      error_at (DECL_SOURCE_LOCATION (fn),\n+\t\t\"does not match expected signature %qD\", implicit_fn);\n+    }\n+}\n+\n+/* Returns true iff FN can be explicitly defaulted, and gives any\n+   errors if defaulting FN is ill-formed.  */\n+\n+bool\n+defaultable_fn_check (tree fn)\n+{\n+  special_function_kind kind = sfk_none;\n+\n+  if (DECL_CONSTRUCTOR_P (fn))\n+    {\n+      if (FUNCTION_FIRST_USER_PARMTYPE (fn) == void_list_node)\n+\tkind = sfk_constructor;\n+      else if (copy_fn_p (fn) > 0\n+\t       && (TREE_CHAIN (FUNCTION_FIRST_USER_PARMTYPE (fn))\n+\t\t   == void_list_node))\n+\tkind = sfk_copy_constructor;\n+      else if (move_fn_p (fn))\n+\tkind = sfk_move_constructor;\n+    }\n+  else if (DECL_DESTRUCTOR_P (fn))\n+    kind = sfk_destructor;\n+  else if (DECL_ASSIGNMENT_OPERATOR_P (fn)\n+\t   && DECL_OVERLOADED_OPERATOR_P (fn) == NOP_EXPR\n+\t   && copy_fn_p (fn))\n+    kind = sfk_assignment_operator;\n+\n+  if (kind == sfk_none)\n+    {\n+      error (\"%qD cannot be defaulted\", fn);\n+      return false;\n+    }\n+  else\n+    {\n+      tree t = FUNCTION_FIRST_USER_PARMTYPE (fn);\n+      for (; t && t != void_list_node; t = TREE_CHAIN (t))\n+\tif (TREE_PURPOSE (t))\n+\t  {\n+\t    error (\"defaulted function %q+D with default argument\", fn);\n+\t    break;\n+\t  }\n+      if (TYPE_BEING_DEFINED (DECL_CONTEXT (fn)))\n+\t{\n+\t  if (DECL_NONCONVERTING_P (fn))\n+\t    error (\"%qD declared explicit cannot be defaulted in the class \"\n+\t\t   \"body\", fn);\n+\t  if (current_access_specifier != access_public_node)\n+\t    error (\"%qD declared with non-public access cannot be defaulted \"\n+\t\t   \"in the class body\", fn);\n+\t  if (TYPE_RAISES_EXCEPTIONS (TREE_TYPE (fn)))\n+\t    error (\"function %q+D defaulted on its first declaration \"\n+\t\t   \"must not have an exception-specification\", fn);\n+\t}\n+      else if (!processing_template_decl)\n+\tdefaulted_late_check (fn);\n+\n+      return true;\n+    }\n+}\n+\n /* Add an implicit declaration to TYPE for the kind of function\n    indicated by SFK.  Return the FUNCTION_DECL for the new implicit\n    declaration.  */"}, {"sha": "f4806828cc47c8d990b9becfef3d10a2ba766f3b", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a", "patch": "@@ -8848,6 +8848,9 @@ tsubst_decl (tree t, tree args, tsubst_flags_t complain)\n \t      = remove_attribute (\"visibility\", DECL_ATTRIBUTES (r));\n \t  }\n \tdetermine_visibility (r);\n+\tif (DECL_DEFAULTED_OUTSIDE_CLASS_P (r)\n+\t    && !processing_template_decl)\n+\t  defaulted_late_check (r);\n \n \tapply_late_template_attributes (&r, DECL_ATTRIBUTES (r), 0,\n \t\t\t\t\targs, complain, in_decl);"}, {"sha": "0556d765f70760491d37804f7e07a54b36c70860", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a", "patch": "@@ -1,3 +1,9 @@\n+2009-10-26  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/38796\n+\t* g++.dg/cpp0x/defaulted15.C: New.\n+\t* g++.dg/cpp0x/defaulted16.C: New.\n+\n 2009-10-26  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR c++/41785"}, {"sha": "092b5605901be3668fa5803838619bd6f977cccf", "filename": "gcc/testsuite/g++.dg/cpp0x/defaulted15.C", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted15.C?ref=20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a", "patch": "@@ -0,0 +1,43 @@\n+// PR c++/38796\n+// { dg-options -std=c++0x }\n+\n+struct A\n+{\n+  A (int);\n+  A (const A& = 1) = default;\t// { dg-error \"default argument\" }\n+  void operator= (const A&) = default; // { dg-error \"defaulted|match\" }\n+};\n+\n+struct B\n+{\n+private:\n+  B() = default;\t\t// { dg-error \"access\" }\n+};\n+\n+struct C\n+{\n+protected:\n+  ~C() = default;\t\t// { dg-error \"access\" }\n+};\n+\n+struct D\n+{\n+private:\n+  D& operator= (const D&) = default; // { dg-error \"access\" }\n+};\n+\n+struct E\n+{\n+  explicit E (const E&) = default; // { dg-error \"explicit\" }\n+};\n+\n+struct F\n+{\n+  F(F&) = default;\t\t// { dg-error \"non-const\" }\n+};\n+\n+struct G: public F\n+{\n+  // Can't be const because F copy ctor isn't.\n+  G(const G&) = default;\t// { dg-error \"const\" }\n+};"}, {"sha": "741b43de27d547f07b5fb0e406adc39ded4c1ab3", "filename": "gcc/testsuite/g++.dg/cpp0x/defaulted16.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted16.C?ref=20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a", "patch": "@@ -0,0 +1,13 @@\n+// Test that non-inline default causes the function to be defined even if\n+// it isn't used.\n+\n+// { dg-options -std=c++0x }\n+// { dg-final { scan-assembler \"_ZN1AC1Ev\" } }\n+\n+struct A\n+{\n+  A();\n+};\n+\n+A::A() = default;\n+"}, {"sha": "3e29ea50f1e92cf97ad0d174967106823f69470a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a", "patch": "@@ -1,3 +1,12 @@\n+2009-10-26  Jason Merrill  <jason@redhat.com>\n+\n+\tCore issue 906\n+\t* include/std/future (~Future_result_base): Default outside class\n+\tbody.\n+\t* include/std/system_error (error_category()): Likewise.\n+\t* libsupc++/nested_exception.h (nested_exception): Remove\n+\texception specifications from defaulted methods.\n+\n 009-10-20  Paolo Carlini  <paolo.carlini@oracle.com>\n \n         PR libstdc++/41773"}, {"sha": "00f5c48bcfd87b4234936e42f2a4dd4a7679696c", "filename": "libstdc++-v3/include/std/future", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture?ref=20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a", "patch": "@@ -130,9 +130,11 @@ namespace std\n     };\n \n   protected:\n-    ~_Future_result_base() = default;\n+    ~_Future_result_base();\n   };\n \n+  inline _Future_result_base::~_Future_result_base() = default;\n+\n   // TODO: use template alias when available\n   /*\n    template<typename _Res>"}, {"sha": "864741129a9d0986e70365c8fac3976745113b24", "filename": "libstdc++-v3/include/std/system_error", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error?ref=20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a", "patch": "@@ -64,7 +64,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   class error_category\n   {\n   protected:\n-    error_category() = default;\n+    error_category();\n \n   public:\n     virtual ~error_category() { }\n@@ -100,6 +100,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     { return this != &__other; }\n   };\n \n+  inline error_category::error_category() = default;\n+\n   // DR 890.\n   _GLIBCXX_CONST const error_category& system_category() throw ();\n   _GLIBCXX_CONST const error_category& generic_category() throw ();"}, {"sha": "d4e1347114b6d62ec016b10ac4c8ec71d72847a5", "filename": "libstdc++-v3/libsupc++/nested_exception.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnested_exception.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnested_exception.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnested_exception.h?ref=20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a", "patch": "@@ -57,9 +57,9 @@ namespace std\n   public:\n     nested_exception() throw() : _M_ptr(current_exception()) { }\n \n-    nested_exception(const nested_exception&) throw() = default;\n+    nested_exception(const nested_exception&) = default;\n \n-    nested_exception& operator=(const nested_exception&) throw() = default;\n+    nested_exception& operator=(const nested_exception&) = default;\n \n     virtual ~nested_exception() = default;\n "}, {"sha": "588a27e0ddec7feb65907e5f73ec466f5bd4dd04", "filename": "libstdc++-v3/testsuite/30_threads/packaged_task/cons/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2Fassign_neg.cc?ref=20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a", "patch": "@@ -33,4 +33,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 32 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 862 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 864 }"}, {"sha": "d0d0622cf591bfdac17c910b9c314f308f342cbb", "filename": "libstdc++-v3/testsuite/30_threads/packaged_task/cons/copy_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2Fcopy_neg.cc?ref=20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a", "patch": "@@ -32,4 +32,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 31 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 861 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 863 }"}, {"sha": "b97d3ba896edbe97bf14332752ebaa6739dc3ed5", "filename": "libstdc++-v3/testsuite/30_threads/promise/cons/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fcons%2Fassign_neg.cc?ref=20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a", "patch": "@@ -33,4 +33,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 32 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 588 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 590 }"}, {"sha": "f94cffb09f3db6c6fd468125237b69b185c18372", "filename": "libstdc++-v3/testsuite/30_threads/promise/cons/copy_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fcons%2Fcopy_neg.cc?ref=20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a", "patch": "@@ -32,4 +32,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 31 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 572 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 574 }"}, {"sha": "61563e3e3ab681ef0d71d451904fa1823fda8291", "filename": "libstdc++-v3/testsuite/30_threads/shared_future/cons/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fcons%2Fassign_neg.cc?ref=20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a", "patch": "@@ -35,4 +35,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 34 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 481 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 483 }"}, {"sha": "9783124d2cb40568d2b7476cd04497d48ea7448f", "filename": "libstdc++-v3/testsuite/30_threads/unique_future/cons/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_future%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_future%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_future%2Fcons%2Fassign_neg.cc?ref=20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a", "patch": "@@ -35,4 +35,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 34 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 401 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 403 }"}, {"sha": "4b5989975225e8d3ccced34ddcac6b724699b7a7", "filename": "libstdc++-v3/testsuite/30_threads/unique_future/cons/copy_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_future%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_future%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_future%2Fcons%2Fcopy_neg.cc?ref=20f2653ef0f7f2d33ec3e5ce389ab72d4216ec2a", "patch": "@@ -34,4 +34,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 33 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 400 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 402 }"}]}