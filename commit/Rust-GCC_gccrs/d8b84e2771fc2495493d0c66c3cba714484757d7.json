{"sha": "d8b84e2771fc2495493d0c66c3cba714484757d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhiODRlMjc3MWZjMjQ5NTQ5M2QwYzY2YzNjYmE3MTQ0ODQ3NTdkNw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-03-12T16:07:20Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-03-12T17:52:07Z"}, "message": "Fix memory constraint bug in SPARC back-end\n\nIt's a bug exposed by the recent LRA changes, whereby the T constraint\nfails to behave properly when LRA is enabled (unlike when reload is\nenabled).  The patch also gets rid of the awkward W constraint, which\nis strictly equivalent to m in 64-bit mode and, as a result, renames\nthe w constraint into W.\n\ngcc/\n\tPR target/99422\n\t* config/sparc/constraints.md (w): Rename to...\n\t(W): ... this and ditch previous implementation.\n\t* config/sparc/sparc.md (*movdi_insn_sp64): Replace W with m.\n\t(*movdf_insn_sp64): Likewise.\n\t(*mov<VM64:mode>_insn_sp64): Likewise.\n\t* config/sparc/sync.md (*atomic_compare_and_swap<mode>_1): Replace\n\tw with W.\n\t(atomic_compare_and_swap_leon3_1): Likewise.\n\t(*atomic_compare_and_swapdi_v8plus): Likewise.\n\t* config/sparc/sparc.c (memory_ok_for_ldd): Remove useless test on\n\tarchitecture and add missing address validity check during LRA.", "tree": {"sha": "5f1bd91bcea4c1afdc7e6e4b07338429107de081", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f1bd91bcea4c1afdc7e6e4b07338429107de081"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8b84e2771fc2495493d0c66c3cba714484757d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8b84e2771fc2495493d0c66c3cba714484757d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8b84e2771fc2495493d0c66c3cba714484757d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8b84e2771fc2495493d0c66c3cba714484757d7/comments", "author": null, "committer": null, "parents": [{"sha": "d0655763483008a421608d059cf26c93077621a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0655763483008a421608d059cf26c93077621a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0655763483008a421608d059cf26c93077621a9"}], "stats": {"total": 36, "additions": 16, "deletions": 20}, "files": [{"sha": "7ddf014596ddfd7c701a07d345b3f8e3879d2d37", "filename": "gcc/config/sparc/constraints.md", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8b84e2771fc2495493d0c66c3cba714484757d7/gcc%2Fconfig%2Fsparc%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8b84e2771fc2495493d0c66c3cba714484757d7/gcc%2Fconfig%2Fsparc%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fconstraints.md?ref=d8b84e2771fc2495493d0c66c3cba714484757d7", "patch": "@@ -19,7 +19,7 @@\n \n ;;; Unused letters:\n ;;;     B\n-;;;    a        jkl        uv xyz\n+;;;    a        jkl        uvwxyz\n \n \n ;; Register constraints\n@@ -190,14 +190,7 @@\n       (match_test \"TARGET_ARCH32\")\n       (match_test \"register_ok_for_ldd (op)\")))\n \n-;; Equivalent to 'T' but in 64-bit mode without alignment requirement\n (define_memory_constraint \"W\"\n- \"Memory reference for 'e' constraint floating-point register\"\n- (and (match_code \"mem\")\n-      (match_test \"TARGET_ARCH64\")\n-      (match_test \"memory_ok_for_ldd (op)\")))\n-\n-(define_memory_constraint \"w\"\n   \"A memory with only a base register\"\n   (match_operand 0 \"mem_noofs_operand\"))\n "}, {"sha": "42ba415255c90abecb63e155b5575b2de2a976f3", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8b84e2771fc2495493d0c66c3cba714484757d7/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8b84e2771fc2495493d0c66c3cba714484757d7/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=d8b84e2771fc2495493d0c66c3cba714484757d7", "patch": "@@ -9223,14 +9223,17 @@ register_ok_for_ldd (rtx reg)\n int\n memory_ok_for_ldd (rtx op)\n {\n-  /* In 64-bit mode, we assume that the address is word-aligned.  */\n-  if (TARGET_ARCH32 && !mem_min_alignment (op, 8))\n+  if (!mem_min_alignment (op, 8))\n     return 0;\n \n-  if (! can_create_pseudo_p ()\n+  /* We need to perform the job of a memory constraint.  */\n+  if ((reload_in_progress || reload_completed)\n       && !strict_memory_address_p (Pmode, XEXP (op, 0)))\n     return 0;\n \n+  if (lra_in_progress && !memory_address_p (Pmode, XEXP (op, 0)))\n+    return 0;\n+\n   return 1;\n }\n \f"}, {"sha": "c5d369626cc5232e7e1da7fbb271c24f16f8b84e", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8b84e2771fc2495493d0c66c3cba714484757d7/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8b84e2771fc2495493d0c66c3cba714484757d7/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=d8b84e2771fc2495493d0c66c3cba714484757d7", "patch": "@@ -1869,8 +1869,8 @@ visl\")\n    (set_attr \"lra\" \"*,*,disabled,disabled,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*\")])\n \n (define_insn \"*movdi_insn_sp64\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,r,r, m, r,*e,?*e,?*e,  W,b,b\")\n-        (match_operand:DI 1 \"input_operand\"        \"rI,N,m,rJ,*e, r, *e,  W,?*e,J,P\"))]\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,r,r, m, r,*e,?*e,?*e,  m,b,b\")\n+        (match_operand:DI 1 \"input_operand\"        \"rI,N,m,rJ,*e, r, *e,  m,?*e,J,P\"))]\n   \"TARGET_ARCH64\n    && (register_operand (operands[0], DImode)\n        || register_or_zero_or_all_ones_operand (operands[1], DImode))\"\n@@ -2498,8 +2498,8 @@ visl\")\n    (set_attr \"lra\" \"*,*,*,*,*,*,*,*,*,*,disabled,disabled,*,*,*,*,*\")])\n \n (define_insn \"*movdf_insn_sp64\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=b,b,e,*r, e,  e,W, *r,*r,  m,*r\")\n-\t(match_operand:DF 1 \"input_operand\"         \"G,C,e, e,*r,W#F,e,*rG, m,*rG, F\"))]\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=b,b,e,*r, e,  e,m, *r,*r,  m,*r\")\n+\t(match_operand:DF 1 \"input_operand\"         \"G,C,e, e,*r,m#F,e,*rG, m,*rG, F\"))]\n   \"TARGET_ARCH64\n    && (register_operand (operands[0], DFmode)\n        || register_or_zero_or_all_ones_operand (operands[1], DFmode))\"\n@@ -8467,8 +8467,8 @@ visl\")\n    (set_attr \"cpu_feature\" \"vis,vis,vis,*,*,*,*,*,*,vis3,vis3\")])\n \n (define_insn \"*mov<VM64:mode>_insn_sp64\"\n-  [(set (match_operand:VM64 0 \"nonimmediate_operand\" \"=e,e,e,e,W,m,*r, m,*r, e,*r\")\n-\t(match_operand:VM64 1 \"input_operand\"         \"Y,Z,e,W,e,Y, m,*r, e,*r,*r\"))]\n+  [(set (match_operand:VM64 0 \"nonimmediate_operand\" \"=e,e,e,e,m,m,*r, m,*r, e,*r\")\n+\t(match_operand:VM64 1 \"input_operand\"         \"Y,Z,e,m,e,Y, m,*r, e,*r,*r\"))]\n   \"TARGET_VIS\n    && TARGET_ARCH64\n    && (register_operand (operands[0], <VM64:MODE>mode)"}, {"sha": "c0a20ef8937009e3a69c1276c4dd35ced110f3ef", "filename": "gcc/config/sparc/sync.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8b84e2771fc2495493d0c66c3cba714484757d7/gcc%2Fconfig%2Fsparc%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8b84e2771fc2495493d0c66c3cba714484757d7/gcc%2Fconfig%2Fsparc%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsync.md?ref=d8b84e2771fc2495493d0c66c3cba714484757d7", "patch": "@@ -202,7 +202,7 @@\n \n (define_insn \"*atomic_compare_and_swap<mode>_1\"\n   [(set (match_operand:I48MODE 0 \"register_operand\" \"=r\")\n-\t(match_operand:I48MODE 1 \"mem_noofs_operand\" \"+w\"))\n+\t(match_operand:I48MODE 1 \"mem_noofs_operand\" \"+W\"))\n    (set (match_dup 1)\n \t(unspec_volatile:I48MODE\n \t  [(match_operand:I48MODE 2 \"register_operand\" \"r\")\n@@ -214,7 +214,7 @@\n \n (define_insn \"atomic_compare_and_swap_leon3_1\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(match_operand:SI 1 \"mem_noofs_operand\" \"+w\"))\n+\t(match_operand:SI 1 \"mem_noofs_operand\" \"+W\"))\n    (set (match_dup 1)\n \t(unspec_volatile:SI\n \t  [(match_operand:SI 2 \"register_operand\" \"r\")\n@@ -235,7 +235,7 @@\n \n (define_insn \"*atomic_compare_and_swapdi_v8plus\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=h\")\n-\t(match_operand:DI 1 \"mem_noofs_operand\" \"+w\"))\n+\t(match_operand:DI 1 \"mem_noofs_operand\" \"+W\"))\n    (set (match_dup 1)\n \t(unspec_volatile:DI\n \t  [(match_operand:DI 2 \"register_operand\" \"h\")"}]}