{"sha": "17796a89ab87760cdd2fb9a6ecfd404fac0215ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTc3OTZhODlhYjg3NzYwY2RkMmZiOWE2ZWNmZDQwNGZhYzAyMTVlZQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-10-09T12:57:30Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-10-09T12:57:30Z"}, "message": "optabs.c (prepare_float_lib_cmp): Always attach a REG_EQUAL note to the comparison...\n\n\n\t* optabs.c (prepare_float_lib_cmp): Always attach a REG_EQUAL note\n\tto the comparison, as emit_libcall_block calls copy_rtx on equiv.\n\nFrom-SVN: r72262", "tree": {"sha": "8c7f2e409df6077a4e0092ab2a2a5e70be3ef092", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c7f2e409df6077a4e0092ab2a2a5e70be3ef092"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17796a89ab87760cdd2fb9a6ecfd404fac0215ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17796a89ab87760cdd2fb9a6ecfd404fac0215ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17796a89ab87760cdd2fb9a6ecfd404fac0215ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17796a89ab87760cdd2fb9a6ecfd404fac0215ee/comments", "author": null, "committer": null, "parents": [{"sha": "569fa502d175107e774a81965253debe8d9de94b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/569fa502d175107e774a81965253debe8d9de94b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/569fa502d175107e774a81965253debe8d9de94b"}], "stats": {"total": 113, "additions": 55, "deletions": 58}, "files": [{"sha": "f9f4321b5c90d80c0e14f4ed1d0be0528e803929", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17796a89ab87760cdd2fb9a6ecfd404fac0215ee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17796a89ab87760cdd2fb9a6ecfd404fac0215ee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=17796a89ab87760cdd2fb9a6ecfd404fac0215ee", "patch": "@@ -1,3 +1,8 @@\n+2003-10-09  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* optabs.c (prepare_float_lib_cmp): Always attach a REG_EQUAL note\n+\tto the comparison, as emit_libcall_block calls copy_rtx on equiv.\n+\n 2003-10-09  Dorit Naishlos  <dorit@il.ibm.com>\n \n \t* haifa-sched.c (ok_for_early_schedule): New function."}, {"sha": "e29c92af1e8e73f9049a7fdc3bdb0857aa955289", "filename": "gcc/optabs.c", "status": "modified", "additions": 50, "deletions": 58, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17796a89ab87760cdd2fb9a6ecfd404fac0215ee/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17796a89ab87760cdd2fb9a6ecfd404fac0215ee/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=17796a89ab87760cdd2fb9a6ecfd404fac0215ee", "patch": "@@ -3871,70 +3871,62 @@ prepare_float_lib_cmp (rtx *px, rtx *py, enum rtx_code *pcomparison,\n       y = convert_to_mode (mode, y, 0);\n     }\n \n-  /* If we're optimizing attach a REG_EQUAL note describing the semantics\n-     of the libcall to the RTL.  The allows the RTL optimizers to delete\n-     the libcall if the condition can be determined at compile-time.  */\n-  if (optimize\n-      && ! side_effects_p (x)\n-      && ! side_effects_p (y))\n+  /* Attach a REG_EQUAL note describing the semantics of the libcall to\n+     the RTL.  The allows the RTL optimizers to delete the libcall if the\n+     condition can be determined at compile-time.  */\n+  if (comparison == UNORDERED)\n     {\n-      if (comparison == UNORDERED)\n-\t{\n-\t  rtx temp = simplify_gen_relational (NE, word_mode, mode, x, x);\n-\t  equiv = simplify_gen_relational (NE, word_mode, mode, y, y);\n-\t  equiv = simplify_gen_ternary (IF_THEN_ELSE, word_mode, word_mode,\n-\t\t\t\t\ttemp, const_true_rtx, equiv);\n-\t}\n-      else\n+      rtx temp = simplify_gen_relational (NE, word_mode, mode, x, x);\n+      equiv = simplify_gen_relational (NE, word_mode, mode, y, y);\n+      equiv = simplify_gen_ternary (IF_THEN_ELSE, word_mode, word_mode,\n+\t\t\t\t    temp, const_true_rtx, equiv);\n+    }\n+  else\n+    {\n+      equiv = simplify_gen_relational (comparison, word_mode, mode, x, y);\n+      if (! FLOAT_LIB_COMPARE_RETURNS_BOOL (mode, comparison))\n \t{\n-\t  equiv = simplify_gen_relational (comparison, word_mode, mode, x, y);\n-\t  if (! FLOAT_LIB_COMPARE_RETURNS_BOOL (mode, comparison))\n-\t    {\n-\t      rtx true_rtx, false_rtx;\n-\n-\t      switch (comparison)\n-\t\t{\n-\t\tcase EQ:\n-\t\t  true_rtx = const0_rtx;\n-\t\t  false_rtx = const_true_rtx;\n-\t\t  break;\n+\t  rtx true_rtx, false_rtx;\n \n-\t\tcase NE:\n-\t\t  true_rtx = const_true_rtx;\n-\t\t  false_rtx = const0_rtx;\n-\t\t  break;\n-\n-\t\tcase GT:\n-\t\t  true_rtx = const1_rtx;\n-\t\t  false_rtx = const0_rtx;\n-\t\t  break;\n-\n-\t\tcase GE:\n-\t\t  true_rtx = const0_rtx;\n-\t\t  false_rtx = constm1_rtx;\n-\t\t  break;\n-\n-\t\tcase LT:\n-\t\t  true_rtx = constm1_rtx;\n-\t\t  false_rtx = const0_rtx;\n-\t\t  break;\n-\n-\t\tcase LE:\n-\t\t  true_rtx = const0_rtx;\n-\t\t  false_rtx = const1_rtx;\n-\t\t  break;\n-\n-\t\tdefault:\n-\t\t  abort ();\n-\t\t}\n-\t      equiv = simplify_gen_ternary (IF_THEN_ELSE, word_mode,\n-\t\t\t\t\t    word_mode, equiv,\n-\t\t\t\t\t    true_rtx, false_rtx);\n+\t  switch (comparison)\n+\t    {\n+\t    case EQ:\n+\t      true_rtx = const0_rtx;\n+\t      false_rtx = const_true_rtx;\n+\t      break;\n+\n+\t    case NE:\n+\t      true_rtx = const_true_rtx;\n+\t      false_rtx = const0_rtx;\n+\t      break;\n+\n+\t    case GT:\n+\t      true_rtx = const1_rtx;\n+\t      false_rtx = const0_rtx;\n+\t      break;\n+\n+\t    case GE:\n+\t      true_rtx = const0_rtx;\n+\t      false_rtx = constm1_rtx;\n+\t      break;\n+\n+\t    case LT:\n+\t      true_rtx = constm1_rtx;\n+\t      false_rtx = const0_rtx;\n+\t      break;\n+\n+\t    case LE:\n+\t      true_rtx = const0_rtx;\n+\t      false_rtx = const1_rtx;\n+\t      break;\n+\n+\t    default:\n+\t      abort ();\n \t    }\n+\t  equiv = simplify_gen_ternary (IF_THEN_ELSE, word_mode, word_mode,\n+\t\t\t\t\tequiv, true_rtx, false_rtx);\n \t}\n     }\n-  else\n-    equiv = NULL_RTX;\n \n   start_sequence ();\n   value = emit_library_call_value (libfunc, NULL_RTX, LCT_CONST,"}]}