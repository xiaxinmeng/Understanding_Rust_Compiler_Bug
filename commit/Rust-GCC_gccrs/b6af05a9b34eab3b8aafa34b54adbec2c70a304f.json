{"sha": "b6af05a9b34eab3b8aafa34b54adbec2c70a304f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZhZjA1YTliMzRlYWIzYjhhYWZhMzRiNTRhZGJlYzJjNzBhMzA0Zg==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2013-05-31T09:29:41Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2013-05-31T09:29:41Z"}, "message": "re PR target/56315 (ARM: Improve use of 64-bit constants in logical operations)\n\ngcc/\n2013-05-31  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n\n\tPR target/56315\n\t* config/arm/arm.c (const_ok_for_dimode_op): Handle IOR.\n\t* config/arm/arm.md (*iordi3_insn): Change to insn_and_split.\n\t* config/arm/neon.md (iordi3_neon): Remove.\n\t(neon_vorr<mode>): Generate iordi3 instead of iordi3_neon.\n\t* config/arm/predicates.md (imm_for_neon_logic_operand):\n\tMove to earlier in the file.\n\t(neon_logic_op2): Likewise.\n\t(arm_iordi_operand_neon): New predicate.\n\t\ngcc/testsuite/\n2013-05-31  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n\n\tPR target/56315\n\t* gcc.target/arm/iordi3-opt.c: New test.\n\nFrom-SVN: r199527", "tree": {"sha": "4bb66cfa14474b935cb3c2212d06af921d6c1f24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4bb66cfa14474b935cb3c2212d06af921d6c1f24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6af05a9b34eab3b8aafa34b54adbec2c70a304f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6af05a9b34eab3b8aafa34b54adbec2c70a304f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6af05a9b34eab3b8aafa34b54adbec2c70a304f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6af05a9b34eab3b8aafa34b54adbec2c70a304f/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f800c166104121e785d57933fe1412101b0496d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f800c166104121e785d57933fe1412101b0496d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f800c166104121e785d57933fe1412101b0496d0"}], "stats": {"total": 129, "additions": 86, "deletions": 43}, "files": [{"sha": "ff9f38c467212f1cc5de91a0a9d7155b827cfa5d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6af05a9b34eab3b8aafa34b54adbec2c70a304f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6af05a9b34eab3b8aafa34b54adbec2c70a304f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b6af05a9b34eab3b8aafa34b54adbec2c70a304f", "patch": "@@ -1,3 +1,15 @@\n+2013-05-31  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/56315\n+\t* config/arm/arm.c (const_ok_for_dimode_op): Handle IOR.\n+\t* config/arm/arm.md (*iordi3_insn): Change to insn_and_split.\n+\t* config/arm/neon.md (iordi3_neon): Remove.\n+\t(neon_vorr<mode>): Generate iordi3 instead of iordi3_neon.\n+\t* config/arm/predicates.md (imm_for_neon_logic_operand):\n+\tMove to earlier in the file.\n+\t(neon_logic_op2): Likewise.\n+\t(arm_iordi_operand_neon): New predicate.\n+\n 2013-05-31  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/57478"}, {"sha": "42f52c7082f20a802877e572c9e3d98f568cf240", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6af05a9b34eab3b8aafa34b54adbec2c70a304f/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6af05a9b34eab3b8aafa34b54adbec2c70a304f/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=b6af05a9b34eab3b8aafa34b54adbec2c70a304f", "patch": "@@ -2677,6 +2677,7 @@ const_ok_for_dimode_op (HOST_WIDE_INT i, enum rtx_code code)\n   switch (code)\n     {\n     case AND:\n+    case IOR:\n       return (const_ok_for_op (hi_val, code) || hi_val == 0xFFFFFFFF)\n               && (const_ok_for_op (lo_val, code) || lo_val == 0xFFFFFFFF);\n     case PLUS:"}, {"sha": "466baa8454a8c6f8e56a9d6aaa9f0dce9d2c4591", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 41, "deletions": 8, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6af05a9b34eab3b8aafa34b54adbec2c70a304f/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6af05a9b34eab3b8aafa34b54adbec2c70a304f/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=b6af05a9b34eab3b8aafa34b54adbec2c70a304f", "patch": "@@ -2997,14 +2997,47 @@\n   \"\"\n )\n \n-(define_insn \"*iordi3_insn\"\n-  [(set (match_operand:DI         0 \"s_register_operand\" \"=&r,&r\")\n-\t(ior:DI (match_operand:DI 1 \"s_register_operand\"  \"%0,r\")\n-\t\t(match_operand:DI 2 \"s_register_operand\"   \"r,r\")))]\n-  \"TARGET_32BIT && !TARGET_IWMMXT && !TARGET_NEON\"\n-  \"#\"\n-  [(set_attr \"length\" \"8\")\n-   (set_attr \"predicable\" \"yes\")]\n+(define_insn_and_split \"*iordi3_insn\"\n+  [(set (match_operand:DI         0 \"s_register_operand\"     \"=w,w ,&r,&r,&r,&r,?w,?w\")\n+\t(ior:DI (match_operand:DI 1 \"s_register_operand\"     \"%w,0 ,0 ,r ,0 ,r ,w ,0\")\n+\t\t(match_operand:DI 2 \"arm_iordi_operand_neon\" \"w ,Dl,r ,r ,De,De,w ,Dl\")))]\n+  \"TARGET_32BIT && !TARGET_IWMMXT\"\n+  {\n+  switch (which_alternative)\n+    {\n+    case 0: /* fall through */\n+    case 6: return \"vorr\\t%P0, %P1, %P2\";\n+    case 1: /* fall through */\n+    case 7: return neon_output_logic_immediate (\"vorr\", &operands[2],\n+\t\t     DImode, 0, VALID_NEON_QREG_MODE (DImode));\n+    case 2:\n+    case 3:\n+    case 4:\n+    case 5:\n+      return \"#\";\n+    default: gcc_unreachable ();\n+    }\n+  }\n+  \"TARGET_32BIT && !TARGET_IWMMXT && reload_completed\n+   && !(IS_VFP_REGNUM (REGNO (operands[0])))\"\n+  [(set (match_dup 3) (match_dup 4))\n+   (set (match_dup 5) (match_dup 6))]\n+  \"\n+  {\n+    operands[3] = gen_lowpart (SImode, operands[0]);\n+    operands[5] = gen_highpart (SImode, operands[0]);\n+\n+    operands[4] = simplify_gen_binary (IOR, SImode,\n+                                           gen_lowpart (SImode, operands[1]),\n+                                           gen_lowpart (SImode, operands[2]));\n+    operands[6] = simplify_gen_binary (IOR, SImode,\n+                                           gen_highpart (SImode, operands[1]),\n+                                           gen_highpart_mode (SImode, DImode, operands[2]));\n+\n+  }\"\n+  [(set_attr \"neon_type\" \"neon_int_1,neon_int_1,*,*,*,*,neon_int_1,neon_int_1\")\n+   (set_attr \"length\" \"*,*,8,8,8,8,8,8\")\n+   (set_attr \"arch\" \"neon_for_64bits,neon_for_64bits,*,*,*,*,avoid_neon_for_64bits,avoid_neon_for_64bits\")]\n )\n \n (define_insn \"*iordi_zesidi_di\""}, {"sha": "1697008531e1ab4f995f2f531d15aac4b3542c57", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6af05a9b34eab3b8aafa34b54adbec2c70a304f/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6af05a9b34eab3b8aafa34b54adbec2c70a304f/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=b6af05a9b34eab3b8aafa34b54adbec2c70a304f", "patch": "@@ -679,29 +679,6 @@\n   [(set_attr \"neon_type\" \"neon_int_1\")]\n )\n \n-(define_insn \"iordi3_neon\"\n-  [(set (match_operand:DI 0 \"s_register_operand\" \"=w,w,?&r,?&r,?w,?w\")\n-        (ior:DI (match_operand:DI 1 \"s_register_operand\" \"%w,0,0,r,w,0\")\n-\t\t(match_operand:DI 2 \"neon_logic_op2\" \"w,Dl,r,r,w,Dl\")))]\n-  \"TARGET_NEON\"\n-{\n-  switch (which_alternative)\n-    {\n-    case 0: /* fall through */\n-    case 4: return \"vorr\\t%P0, %P1, %P2\";\n-    case 1: /* fall through */\n-    case 5: return neon_output_logic_immediate (\"vorr\", &operands[2],\n-\t\t     DImode, 0, VALID_NEON_QREG_MODE (DImode));\n-    case 2: return \"#\";\n-    case 3: return \"#\";\n-    default: gcc_unreachable ();\n-    }\n-}\n-  [(set_attr \"neon_type\" \"neon_int_1,neon_int_1,*,*,neon_int_1,neon_int_1\")\n-   (set_attr \"length\" \"*,*,8,8,*,*\")\n-   (set_attr \"arch\" \"neon_for_64bits,neon_for_64bits,*,*,avoid_neon_for_64bits,avoid_neon_for_64bits\")]\n-)\n-\n ;; The concrete forms of the Neon immediate-logic instructions are vbic and\n ;; vorr. We support the pseudo-instruction vand instead, because that\n ;; corresponds to the canonical form the middle-end expects to use for\n@@ -5617,7 +5594,7 @@\n    (match_operand:SI 3 \"immediate_operand\" \"\")]\n   \"TARGET_NEON\"\n {\n-  emit_insn (gen_ior<mode>3<V_suf64> (operands[0], operands[1], operands[2]));\n+  emit_insn (gen_ior<mode>3 (operands[0], operands[1], operands[2]));\n   DONE;\n })\n "}, {"sha": "3cec56901934e2accbcbeccaf0a6a48813369e59", "filename": "gcc/config/arm/predicates.md", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6af05a9b34eab3b8aafa34b54adbec2c70a304f/gcc%2Fconfig%2Farm%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6af05a9b34eab3b8aafa34b54adbec2c70a304f/gcc%2Fconfig%2Farm%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpredicates.md?ref=b6af05a9b34eab3b8aafa34b54adbec2c70a304f", "patch": "@@ -42,6 +42,17 @@\n   (ior (match_operand 0 \"imm_for_neon_inv_logic_operand\")\n        (match_operand 0 \"s_register_operand\")))\n \n+(define_predicate \"imm_for_neon_logic_operand\"\n+  (match_code \"const_vector\")\n+{\n+  return (TARGET_NEON\n+          && neon_immediate_valid_for_logic (op, mode, 0, NULL, NULL));\n+})\n+\n+(define_predicate \"neon_logic_op2\"\n+  (ior (match_operand 0 \"imm_for_neon_logic_operand\")\n+       (match_operand 0 \"s_register_operand\")))\n+\n ;; Any hard register.\n (define_predicate \"arm_hard_register_operand\"\n   (match_code \"reg\")\n@@ -162,6 +173,12 @@\n \t    (match_test \"const_ok_for_dimode_op (INTVAL (op), AND)\"))\n        (match_operand 0 \"neon_inv_logic_op2\")))\n \n+(define_predicate \"arm_iordi_operand_neon\"\n+  (ior (match_operand 0 \"s_register_operand\")\n+       (and (match_code \"const_int\")\n+\t    (match_test \"const_ok_for_dimode_op (INTVAL (op), IOR)\"))\n+       (match_operand 0 \"neon_logic_op2\")))\n+\n (define_predicate \"arm_adddi_operand\"\n   (ior (match_operand 0 \"s_register_operand\")\n        (and (match_code \"const_int\")\n@@ -535,17 +552,6 @@\n   (ior (match_operand 0 \"s_register_operand\")\n        (match_operand 0 \"imm_for_neon_rshift_operand\")))\n \n-(define_predicate \"imm_for_neon_logic_operand\"\n-  (match_code \"const_vector\")\n-{\n-  return (TARGET_NEON\n-          && neon_immediate_valid_for_logic (op, mode, 0, NULL, NULL));\n-})\n-\n-(define_predicate \"neon_logic_op2\"\n-  (ior (match_operand 0 \"imm_for_neon_logic_operand\")\n-       (match_operand 0 \"s_register_operand\")))\n-\n ;; Predicates for named expanders that overlap multiple ISAs.\n \n (define_predicate \"cmpdi_operand\""}, {"sha": "fd4ebbb1969f1a9a0ef4d90c3e76674dfe41964a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6af05a9b34eab3b8aafa34b54adbec2c70a304f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6af05a9b34eab3b8aafa34b54adbec2c70a304f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b6af05a9b34eab3b8aafa34b54adbec2c70a304f", "patch": "@@ -1,3 +1,8 @@\n+2013-05-31  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/56315\n+\t* gcc.target/arm/iordi3-opt.c: New test.\n+\n 2013-05-31  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/54190"}, {"sha": "b3f465b74920bf2514fdf652689194f6796e9c73", "filename": "gcc/testsuite/gcc.target/arm/iordi3-opt.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6af05a9b34eab3b8aafa34b54adbec2c70a304f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fiordi3-opt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6af05a9b34eab3b8aafa34b54adbec2c70a304f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fiordi3-opt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fiordi3-opt.c?ref=b6af05a9b34eab3b8aafa34b54adbec2c70a304f", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1\" } */\n+\n+unsigned long long or64 (unsigned long long input)\n+{\n+    return input | 0x200000004ULL;\n+}\n+\n+/* { dg-final { scan-assembler-not \"mov\\[\\\\t \\]+.+,\\[\\\\t \\]*.+\" } } */"}]}