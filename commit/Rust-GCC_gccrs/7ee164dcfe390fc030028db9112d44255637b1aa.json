{"sha": "7ee164dcfe390fc030028db9112d44255637b1aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2VlMTY0ZGNmZTM5MGZjMDMwMDI4ZGI5MTEyZDQ0MjU1NjM3YjFhYQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-02-18T11:28:26Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-02-18T13:38:33Z"}, "message": "middle-end/99122 - Issues with VLA parameter inlining\n\nThe following instructs IPA not to inline calls with VLA parameters\nand adjusts inlining not to create invalid view-converted VLA\nparameters on mismatch and makes the error_mark paths with debug\nstmts actually work.\n\nThe first part avoids the ICEs with the testcases already.\n\n2021-02-18  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/99122\n\t* ipa-fnsummary.c (analyze_function_body): Set\n\tCIF_FUNCTION_NOT_INLINABLE for VLA parameter calls.\n\t* tree-inline.c (insert_init_debug_bind): Pass NULL for\n\terror_mark_node values.\n\t(force_value_to_type): Do not build V_C_Es for WITH_SIZE_EXPR\n\tvalues.\n\t(setup_one_parameter): Delay force_value_to_type until when\n\tit's needed.\n\n\t* gcc.dg/pr99122-1.c: New testcase.\n\t* gcc.dg/pr99122-2.c: Likewise.", "tree": {"sha": "977394736d876959c959abe07ea5c81028e6b03b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/977394736d876959c959abe07ea5c81028e6b03b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ee164dcfe390fc030028db9112d44255637b1aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ee164dcfe390fc030028db9112d44255637b1aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ee164dcfe390fc030028db9112d44255637b1aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ee164dcfe390fc030028db9112d44255637b1aa/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2ef38b1f94dd108046e702ad46dcd8e9b34625e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2ef38b1f94dd108046e702ad46dcd8e9b34625e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2ef38b1f94dd108046e702ad46dcd8e9b34625e"}], "stats": {"total": 63, "additions": 54, "deletions": 9}, "files": [{"sha": "c3a25c52214ea5b3e2e8e33fc53d706a4529a6cf", "filename": "gcc/ipa-fnsummary.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ee164dcfe390fc030028db9112d44255637b1aa/gcc%2Fipa-fnsummary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ee164dcfe390fc030028db9112d44255637b1aa/gcc%2Fipa-fnsummary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-fnsummary.c?ref=7ee164dcfe390fc030028db9112d44255637b1aa", "patch": "@@ -2775,7 +2775,13 @@ analyze_function_body (struct cgraph_node *node, bool early)\n \t\t\t     (gimple_call_arg (stmt, i));\n \t\t    }\n \t\t}\n-\n+\t      /* We cannot setup VLA parameters during inlining.  */\n+\t      for (unsigned int i = 0; i < gimple_call_num_args (stmt); ++i)\n+\t\tif (TREE_CODE (gimple_call_arg (stmt, i)) == WITH_SIZE_EXPR)\n+\t\t  {\n+\t\t    edge->inline_failed = CIF_FUNCTION_NOT_INLINABLE;\n+\t\t    break;\n+\t\t  }\n \t      es->call_stmt_size = this_size;\n \t      es->call_stmt_time = this_time;\n \t      es->loop_depth = bb_loop_depth (bb);"}, {"sha": "5dfc0a85ad41aa205a5e4a8a176a0a7e86add140", "filename": "gcc/testsuite/gcc.dg/pr99122-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ee164dcfe390fc030028db9112d44255637b1aa/gcc%2Ftestsuite%2Fgcc.dg%2Fpr99122-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ee164dcfe390fc030028db9112d44255637b1aa/gcc%2Ftestsuite%2Fgcc.dg%2Fpr99122-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr99122-1.c?ref=7ee164dcfe390fc030028db9112d44255637b1aa", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -g -w\" } */\n+\n+void f ()\n+{\n+  int n = 5;\n+  struct { char a[n]; } x;\n+  g (x, x);\n+}\n+int g (double x, double y)\n+{\n+  return __builtin_isgreater (x, y);\n+}"}, {"sha": "2b1054282332a79be3102271b9045213cc88dfd5", "filename": "gcc/testsuite/gcc.dg/pr99122-2.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ee164dcfe390fc030028db9112d44255637b1aa/gcc%2Ftestsuite%2Fgcc.dg%2Fpr99122-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ee164dcfe390fc030028db9112d44255637b1aa/gcc%2Ftestsuite%2Fgcc.dg%2Fpr99122-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr99122-2.c?ref=7ee164dcfe390fc030028db9112d44255637b1aa", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -g -w\" } */\n+\n+static int foo ();\n+\n+int\n+bar (int n)\n+{\n+  struct S { char a[n]; } x;\n+  __builtin_memset (x.a, 0, n);\n+  return foo (n, x);\n+}\n+\n+static inline int\n+foo (int n, struct T { char a[n]; } b)\n+{\n+  int r = 0, i;\n+  for (i = 0; i < n; i++)\n+    r += b.a[i];\n+  return r;\n+}"}, {"sha": "01a08cf27be767fae1493af7654515d31c745d7b", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ee164dcfe390fc030028db9112d44255637b1aa/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ee164dcfe390fc030028db9112d44255637b1aa/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=7ee164dcfe390fc030028db9112d44255637b1aa", "patch": "@@ -3352,7 +3352,10 @@ insert_init_debug_bind (copy_body_data *id,\n \tbase_stmt = gsi_stmt (gsi);\n     }\n \n-  note = gimple_build_debug_bind (tracked_var, unshare_expr (value), base_stmt);\n+  note = gimple_build_debug_bind (tracked_var,\n+\t\t\t\t  value == error_mark_node\n+\t\t\t\t  ? NULL_TREE : unshare_expr (value),\n+\t\t\t\t  base_stmt);\n \n   if (bb)\n     {\n@@ -3418,7 +3421,9 @@ force_value_to_type (tree type, tree value)\n      Still if we end up with truly mismatched types here, fall back\n      to using a VIEW_CONVERT_EXPR or a literal zero to not leak invalid\n      GIMPLE to the following passes.  */\n-  if (!is_gimple_reg_type (TREE_TYPE (value))\n+  if (TREE_CODE (value) == WITH_SIZE_EXPR)\n+    return error_mark_node;\n+  else if (!is_gimple_reg_type (TREE_TYPE (value))\n \t   || TYPE_SIZE (type) == TYPE_SIZE (TREE_TYPE (value)))\n     return fold_build1 (VIEW_CONVERT_EXPR, type, value);\n   else\n@@ -3434,15 +3439,9 @@ setup_one_parameter (copy_body_data *id, tree p, tree value, tree fn,\n {\n   gimple *init_stmt = NULL;\n   tree var;\n-  tree rhs = value;\n   tree def = (gimple_in_ssa_p (cfun)\n \t      ? ssa_default_def (id->src_cfun, p) : NULL);\n \n-  if (value\n-      && value != error_mark_node\n-      && !useless_type_conversion_p (TREE_TYPE (p), TREE_TYPE (value)))\n-    rhs = force_value_to_type (TREE_TYPE (p), value);\n-\n   /* Make an equivalent VAR_DECL.  Note that we must NOT remap the type\n      here since the type of this decl must be visible to the calling\n      function.  */\n@@ -3501,6 +3500,12 @@ setup_one_parameter (copy_body_data *id, tree p, tree value, tree fn,\n   if (TYPE_NEEDS_CONSTRUCTING (TREE_TYPE (p)))\n     TREE_READONLY (var) = 0;\n \n+  tree rhs = value;\n+  if (value\n+      && value != error_mark_node\n+      && !useless_type_conversion_p (TREE_TYPE (p), TREE_TYPE (value)))\n+    rhs = force_value_to_type (TREE_TYPE (p), value);\n+\n   /* If there is no setup required and we are in SSA, take the easy route\n      replacing all SSA names representing the function parameter by the\n      SSA name passed to function."}]}