{"sha": "1018b4c3565d3c892addfc349b00b3519308211e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTAxOGI0YzM1NjVkM2M4OTJhZGRmYzM0OWIwMGIzNTE5MzA4MjExZQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@nildram.co.uk", "date": "2007-09-22T08:26:50Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2007-09-22T08:26:50Z"}, "message": "target-supports.exp (check_cached_effective_target): New procedure.\n\ngcc/testsuite/\n\t* lib/target-supports.exp (check_cached_effective_target): New\n\tprocedure.\n\t(check_no_compiler_messages, check_no_messages_and_pattern): Use it.\n\t(check_effective_target_c99_runtime): New procedure.\n\t* gcc.dg/builtins-20.c (test3f): Wrap cargf check in HAVE_C99_RUNTIME.\n\t(test3l): Likewise cargl.\n\t* gcc.dg/builtins-59.c: Require c99_runtime.\n\t* gcc.dg/builtins-61.c: Likewise.\n\t* gcc.dg/builtins-62.c: Likewise.\n\nFrom-SVN: r128664", "tree": {"sha": "24108520810ea2907302064e54bef5f33f634077", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24108520810ea2907302064e54bef5f33f634077"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1018b4c3565d3c892addfc349b00b3519308211e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1018b4c3565d3c892addfc349b00b3519308211e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1018b4c3565d3c892addfc349b00b3519308211e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1018b4c3565d3c892addfc349b00b3519308211e/comments", "author": null, "committer": null, "parents": [{"sha": "db9a0df07fc938a874309c5af28895bc347c0673", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db9a0df07fc938a874309c5af28895bc347c0673", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db9a0df07fc938a874309c5af28895bc347c0673"}], "stats": {"total": 92, "additions": 64, "deletions": 28}, "files": [{"sha": "710d8df6ee3b32be6cb0b89580812937951e603d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1018b4c3565d3c892addfc349b00b3519308211e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1018b4c3565d3c892addfc349b00b3519308211e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1018b4c3565d3c892addfc349b00b3519308211e", "patch": "@@ -1,3 +1,15 @@\n+2007-09-22  Richard Sandiford  <rsandifo@nildram.co.uk>\n+\n+\t* lib/target-supports.exp (check_cached_effective_target): New\n+\tprocedure.\n+\t(check_no_compiler_messages, check_no_messages_and_pattern): Use it.\n+\t(check_effective_target_c99_runtime): New procedure.\n+\t* gcc.dg/builtins-20.c (test3f): Wrap cargf check in HAVE_C99_RUNTIME.\n+\t(test3l): Likewise cargl.\n+\t* gcc.dg/builtins-59.c: Require c99_runtime.\n+\t* gcc.dg/builtins-61.c: Likewise.\n+\t* gcc.dg/builtins-62.c: Likewise.\n+\n 2007-09-22  Richard Sandiford  <rsandifo@nildram.co.uk>\n \n \t* lib/target-supports.exp (add_options_for_c99_runtime): New procedure."}, {"sha": "43aa71b271a23115563200c0b60cb6dc2ba571cd", "filename": "gcc/testsuite/gcc.dg/builtins-20.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1018b4c3565d3c892addfc349b00b3519308211e/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1018b4c3565d3c892addfc349b00b3519308211e/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-20.c?ref=1018b4c3565d3c892addfc349b00b3519308211e", "patch": "@@ -449,9 +449,6 @@ void test2f(float x, float y)\n \n void test3f(__complex__ float x, __complex__ float y, int i)\n {\n-  if (cargf(x) != atan2f(__imag__ x, __real__ x))\n-    link_error ();\n-\n   if (ccosf(x) != ccosf(-x))\n     link_error();\n \n@@ -502,6 +499,11 @@ void test3f(__complex__ float x, __complex__ float y, int i)\n \n   if (ctanf(~(x/y)) != -ctanf(~(x/-y)))\n     link_error();\n+\n+#ifdef HAVE_C99_RUNTIME\n+  if (cargf(x) != atan2f(__imag__ x, __real__ x))\n+    link_error ();\n+#endif\n }\n \n void test1l(long double x)\n@@ -674,9 +676,6 @@ void test2l(long double x, long double y)\n \n void test3l(__complex__ long double x, __complex__ long double y, int i)\n {\n-  if (cargl(x) != atan2l(__imag__ x, __real__ x))\n-    link_error ();\n-\n   if (ccosl(x) != ccosl(-x))\n     link_error();\n \n@@ -727,6 +726,11 @@ void test3l(__complex__ long double x, __complex__ long double y, int i)\n \n   if (ctanl(~(x/y)) != -ctanl(~(x/-y)))\n     link_error();\n+\n+#ifdef HAVE_C99_RUNTIME\n+  if (cargl(x) != atan2l(__imag__ x, __real__ x))\n+    link_error ();\n+#endif\n }\n \n int main()"}, {"sha": "b940d39ed60ea131069298dd67e7bb644085c1fd", "filename": "gcc/testsuite/gcc.dg/builtins-59.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1018b4c3565d3c892addfc349b00b3519308211e/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-59.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1018b4c3565d3c892addfc349b00b3519308211e/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-59.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-59.c?ref=1018b4c3565d3c892addfc349b00b3519308211e", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-fdump-tree-gimple\" } */\n+/* { dg-require-effective-target c99_runtime } */\n \n double test (double x)\n {"}, {"sha": "dff163ff112e5d724af02865c1ad2bd6036c5e7a", "filename": "gcc/testsuite/gcc.dg/builtins-61.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1018b4c3565d3c892addfc349b00b3519308211e/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-61.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1018b4c3565d3c892addfc349b00b3519308211e/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-61.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-61.c?ref=1018b4c3565d3c892addfc349b00b3519308211e", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O -ffast-math -fdump-tree-optimized\" } */\n+/* { dg-require-effective-target c99_runtime } */\n \n double test1 (double x)\n {"}, {"sha": "db62696938e39dcfa47751257fe138b04e3ae8ee", "filename": "gcc/testsuite/gcc.dg/builtins-62.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1018b4c3565d3c892addfc349b00b3519308211e/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-62.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1018b4c3565d3c892addfc349b00b3519308211e/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-62.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-62.c?ref=1018b4c3565d3c892addfc349b00b3519308211e", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O -ffinite-math-only -fdump-tree-optimized\" } */\n+/* { dg-require-effective-target c99_runtime } */\n \n double test1 (double x)\n {"}, {"sha": "7c6aef09b8186eef3c5ef05a03b0fa5a45b352f7", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 39, "deletions": 22, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1018b4c3565d3c892addfc349b00b3519308211e/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1018b4c3565d3c892addfc349b00b3519308211e/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=1018b4c3565d3c892addfc349b00b3519308211e", "patch": "@@ -87,43 +87,41 @@ proc current_target_name { } {\n }\n \n # Implement an effective-target check for property PROP by invoking\n-# the compiler and seeing if it prints any messages.  Assume that the\n-# property holds if the compiler doesn't print anything.  The other\n-# arguments are as for get_compiler_messages, starting with TYPE.\n-proc check_no_compiler_messages {prop args} {\n+# the Tcl command ARGS and seeing if it returns true.\n+\n+proc check_cached_effective_target { prop args } {\n     global et_cache\n \n     set target [current_target_name]\n     if {![info exists et_cache($prop,target)]\n \t|| $et_cache($prop,target) != $target} {\n-\tverbose \"check_no_compiler_messages $prop: compiling source for $target\" 2\n+\tverbose \"check_cached_effective_target $prop: checking $target\" 2\n \tset et_cache($prop,target) $target\n-\tset et_cache($prop,value) \\\n-\t    [string match \"\" [eval get_compiler_messages $prop 0 $args]]\n+\tset et_cache($prop,value) [uplevel eval $args]\n     }\n     set value $et_cache($prop,value)\n-    verbose \"check_no_compiler_messages $prop: returning $value for $target\" 2\n+    verbose \"check_cached_effective_target $prop: returning $value for $target\" 2\n     return $value\n }\n \n+# Implement an effective-target check for property PROP by invoking\n+# the compiler and seeing if it prints any messages.  Assume that the\n+# property holds if the compiler doesn't print anything.  The other\n+# arguments are as for get_compiler_messages, starting with TYPE.\n+proc check_no_compiler_messages {prop args} {\n+    return [check_cached_effective_target $prop {\n+\tstring match \"\" [eval get_compiler_messages $prop 0 $args]\n+    }]\n+}\n+\n # Similar to check_no_compiler_messages, but also verify that the regular\n # expression PATTERN matches the compiler's output.\n proc check_no_messages_and_pattern {prop pattern args} {\n-    global et_cache\n-\n-    set target [current_target_name]\n-    if {![info exists et_cache($prop,target)]\n-\t|| $et_cache($prop,target) != $target} {\n-\tverbose \"check_no_messages_and_pattern $prop: compiling source for $target\" 2\n-\tset et_cache($prop,target) $target\n+    return [check_cached_effective_target $prop {\n \tset results [eval get_compiler_messages $prop 1 $args]\n-\tset et_cache($prop,value) \\\n-\t    [expr [string match \"\" [lindex $results 0]] \\\n-\t\t && [regexp $pattern [lindex $results 1]]]\n-    }\n-    set value $et_cache($prop,value)\n-    verbose \"check_no_messages_and_pattern $prop: returning $value for $target\" 2\n-    return $value\n+\texpr { [string match \"\" [lindex $results 0]]\n+\t       && [regexp $pattern [lindex $results 1]] }\n+    }]\n }\n \n ###############################\n@@ -2574,3 +2572,22 @@ proc add_options_for_c99_runtime { flags } {\n     }\n     return $flags\n }\n+\n+# Return 1 if the target provides a full C99 runtime.\n+\n+proc check_effective_target_c99_runtime { } {\n+    return [check_cached_effective_target c99_runtime {\n+\tglobal srcdir\n+\n+\tset file [open \"$srcdir/gcc.dg/builtins-config.h\"]\n+\tset contents [read $file]\n+\tclose $file\n+\tappend contents {\n+\t    #ifndef HAVE_C99_RUNTIME\n+\t    #error FOO\n+\t    #endif\n+\t}\n+\tstring match \"\" [get_compiler_messages c99_runtime 0 assembly \\\n+\t\t\t     $contents [add_options_for_c99_runtime \"\"]]\n+    }]\n+}"}]}