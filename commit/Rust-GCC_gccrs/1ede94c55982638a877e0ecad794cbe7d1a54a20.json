{"sha": "1ede94c55982638a877e0ecad794cbe7d1a54a20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWVkZTk0YzU1OTgyNjM4YTg3N2UwZWNhZDc5NGNiZTdkMWE1NGEyMA==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2015-02-17T21:57:53Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2015-02-17T21:57:53Z"}, "message": "ipa-visibility.c (function_and_variable_visibility): Only check locality if node is not already local.\n\n\t* ipa-visibility.c (function_and_variable_visibility): Only\n\tcheck locality if node is not already local.\n\t* ipa-inline.c (want_inline_function_to_all_callers_p): Use\n\tcall_for_symbol_and_aliases instead of\n\tcall_for_symbol_thunks_and_aliases.\n\t(ipa_inline): Likewise.\n\t* cgraph.c (cgraph_node::call_for_symbol_thunks_and_aliases):\n\tfirst walk aliases.\n\t* ipa.c (symbol_table::remove_unreachable_nodes): Use\n\tcall_for_symbol_and_aliases.\n\t* ipa-profile.c (ipa_propagate_frequency_data): Add function_symbol.\n\t(ipa_propagate_frequency_1): Use it; use opt_for_fn\n\t(ipa_propagate_frequency): Update.\n\t(ipa_profile): Add opt_for_fn gueards.\n\nFrom-SVN: r220775", "tree": {"sha": "e091500afee952a95172cae6c16c788f2e6b15d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e091500afee952a95172cae6c16c788f2e6b15d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ede94c55982638a877e0ecad794cbe7d1a54a20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ede94c55982638a877e0ecad794cbe7d1a54a20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ede94c55982638a877e0ecad794cbe7d1a54a20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ede94c55982638a877e0ecad794cbe7d1a54a20/comments", "author": null, "committer": null, "parents": [{"sha": "f05911fb07ef21bd158da44d8618b7be84f11b21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f05911fb07ef21bd158da44d8618b7be84f11b21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f05911fb07ef21bd158da44d8618b7be84f11b21"}], "stats": {"total": 77, "additions": 53, "deletions": 24}, "files": [{"sha": "3cbcc15956399775f003024efa79a4f646d7fb5c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ede94c55982638a877e0ecad794cbe7d1a54a20/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ede94c55982638a877e0ecad794cbe7d1a54a20/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1ede94c55982638a877e0ecad794cbe7d1a54a20", "patch": "@@ -1,3 +1,20 @@\n+2015-02-17  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-visibility.c (function_and_variable_visibility): Only\n+\tcheck locality if node is not already local.\n+\t* ipa-inline.c (want_inline_function_to_all_callers_p): Use\n+\tcall_for_symbol_and_aliases instead of\n+\tcall_for_symbol_thunks_and_aliases.\n+\t(ipa_inline): Likewise.\n+\t* cgraph.c (cgraph_node::call_for_symbol_thunks_and_aliases):\n+\tfirst walk aliases.\n+\t* ipa.c (symbol_table::remove_unreachable_nodes): Use\n+\tcall_for_symbol_and_aliases.\n+\t* ipa-profile.c (ipa_propagate_frequency_data): Add function_symbol.\n+\t(ipa_propagate_frequency_1): Use it; use opt_for_fn\n+\t(ipa_propagate_frequency): Update.\n+\t(ipa_profile): Add opt_for_fn gueards.\n+\n 2015-02-17  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \t* config/sh/sh.opt (mcbranch-force-delay-slot): New option."}, {"sha": "1ad08dc7631edb98de766a22ff52f4260ce83dac", "filename": "gcc/cgraph.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ede94c55982638a877e0ecad794cbe7d1a54a20/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ede94c55982638a877e0ecad794cbe7d1a54a20/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=1ede94c55982638a877e0ecad794cbe7d1a54a20", "patch": "@@ -2191,6 +2191,16 @@ cgraph_node::call_for_symbol_thunks_and_aliases (bool (*callback)\n \n   if (callback (this, data))\n     return true;\n+  FOR_EACH_ALIAS (this, ref)\n+    {\n+      cgraph_node *alias = dyn_cast <cgraph_node *> (ref->referring);\n+      if (include_overwritable\n+\t  || alias->get_availability () > AVAIL_INTERPOSABLE)\n+\tif (alias->call_for_symbol_thunks_and_aliases (callback, data,\n+\t\t\t\t\t\t     include_overwritable,\n+\t\t\t\t\t\t     exclude_virtual_thunks))\n+\t  return true;\n+    }\n   for (e = callers; e; e = e->next_caller)\n     if (e->caller->thunk.thunk_p\n \t&& (include_overwritable\n@@ -2202,16 +2212,6 @@ cgraph_node::call_for_symbol_thunks_and_aliases (bool (*callback)\n \t\t\t\t\t\t       exclude_virtual_thunks))\n \treturn true;\n \n-  FOR_EACH_ALIAS (this, ref)\n-    {\n-      cgraph_node *alias = dyn_cast <cgraph_node *> (ref->referring);\n-      if (include_overwritable\n-\t  || alias->get_availability () > AVAIL_INTERPOSABLE)\n-\tif (alias->call_for_symbol_thunks_and_aliases (callback, data,\n-\t\t\t\t\t\t     include_overwritable,\n-\t\t\t\t\t\t     exclude_virtual_thunks))\n-\t  return true;\n-    }\n   return false;\n }\n "}, {"sha": "025f7fc5f6b19733c5c3ba69d1e75a5f230c8aa6", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ede94c55982638a877e0ecad794cbe7d1a54a20/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ede94c55982638a877e0ecad794cbe7d1a54a20/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=1ede94c55982638a877e0ecad794cbe7d1a54a20", "patch": "@@ -975,14 +975,14 @@ want_inline_function_to_all_callers_p (struct cgraph_node *node, bool cold)\n   if (node->global.inlined_to)\n     return false;\n   /* Does it have callers?  */\n-  if (!node->call_for_symbol_thunks_and_aliases (has_caller_p, NULL, true))\n+  if (!node->call_for_symbol_and_aliases (has_caller_p, NULL, true))\n     return false;\n   /* Inlining into all callers would increase size?  */\n   if (estimate_growth (node) > 0)\n     return false;\n   /* All inlines must be possible.  */\n-  if (node->call_for_symbol_thunks_and_aliases (check_callers, &has_hot_call,\n-\t\t\t\t\t\ttrue))\n+  if (node->call_for_symbol_and_aliases (check_callers, &has_hot_call,\n+\t\t\t\t\t true))\n     return false;\n   if (!cold && !has_hot_call)\n     return false;\n@@ -2359,9 +2359,9 @@ ipa_inline (void)\n \t  if (want_inline_function_to_all_callers_p (node, cold))\n \t    {\n \t      int num_calls = 0;\n-\t      node->call_for_symbol_thunks_and_aliases (sum_callers, &num_calls,\n-\t\t\t\t\t\t      true);\n-\t      while (node->call_for_symbol_thunks_and_aliases\n+\t      node->call_for_symbol_and_aliases (sum_callers, &num_calls,\n+\t\t\t\t\t\t true);\n+\t      while (node->call_for_symbol_and_aliases\n \t\t       (inline_to_all_callers, &num_calls, true))\n \t\t;\n \t      remove_functions = true;"}, {"sha": "09298778452ddd94a4ff1fd42c5554f950febbee", "filename": "gcc/ipa-profile.c", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ede94c55982638a877e0ecad794cbe7d1a54a20/gcc%2Fipa-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ede94c55982638a877e0ecad794cbe7d1a54a20/gcc%2Fipa-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-profile.c?ref=1ede94c55982638a877e0ecad794cbe7d1a54a20", "patch": "@@ -322,6 +322,7 @@ ipa_profile_read_summary (void)\n \n struct ipa_propagate_frequency_data\n {\n+  cgraph_node *function_symbol;\n   bool maybe_unlikely_executed;\n   bool maybe_executed_once;\n   bool only_called_at_startup;\n@@ -342,7 +343,7 @@ ipa_propagate_frequency_1 (struct cgraph_node *node, void *data)\n \t        || d->only_called_at_startup || d->only_called_at_exit);\n        edge = edge->next_caller)\n     {\n-      if (edge->caller != node)\n+      if (edge->caller != d->function_symbol)\n \t{\n           d->only_called_at_startup &= edge->caller->only_called_at_startup;\n \t  /* It makes sense to put main() together with the static constructors.\n@@ -358,7 +359,11 @@ ipa_propagate_frequency_1 (struct cgraph_node *node, void *data)\n \t errors can make us to push function into unlikely section even when\n \t it is executed by the train run.  Transfer the function only if all\n \t callers are unlikely executed.  */\n-      if (profile_info && flag_branch_probabilities\n+      if (profile_info\n+\t  && opt_for_fn (d->function_symbol->decl, flag_branch_probabilities)\n+\t  /* Thunks are not profiled.  This is more or less implementation\n+\t     bug.  */\n+\t  && !d->function_symbol->thunk.thunk_p\n \t  && (edge->caller->frequency != NODE_FREQUENCY_UNLIKELY_EXECUTED\n \t      || (edge->caller->global.inlined_to\n \t\t  && edge->caller->global.inlined_to->frequency\n@@ -418,7 +423,7 @@ contains_hot_call_p (struct cgraph_node *node)\n bool\n ipa_propagate_frequency (struct cgraph_node *node)\n {\n-  struct ipa_propagate_frequency_data d = {true, true, true, true};\n+  struct ipa_propagate_frequency_data d = {node, true, true, true, true};\n   bool changed = false;\n \n   /* We can not propagate anything useful about externally visible functions\n@@ -432,8 +437,8 @@ ipa_propagate_frequency (struct cgraph_node *node)\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     fprintf (dump_file, \"Processing frequency %s\\n\", node->name ());\n \n-  node->call_for_symbol_thunks_and_aliases (ipa_propagate_frequency_1, &d,\n-\t\t\t\t\t    true);\n+  node->call_for_symbol_and_aliases (ipa_propagate_frequency_1, &d,\n+\t\t\t\t     true);\n \n   if ((d.only_called_at_startup && !d.only_called_at_exit)\n       && !node->only_called_at_startup)\n@@ -597,6 +602,9 @@ ipa_profile (void)\n     {\n       bool update = false;\n \n+      if (!opt_for_fn (n->decl, flag_ipa_profile))\n+\tcontinue;\n+\n       for (e = n->indirect_calls; e; e = e->next_callee)\n \t{\n \t  if (n->count)\n@@ -697,7 +705,9 @@ ipa_profile (void)\n   order_pos = ipa_reverse_postorder (order);\n   for (i = order_pos - 1; i >= 0; i--)\n     {\n-      if (order[i]->local.local && ipa_propagate_frequency (order[i]))\n+      if (order[i]->local.local\n+\t  && opt_for_fn (order[i]->decl, flag_ipa_profile)\n+\t  && ipa_propagate_frequency (order[i]))\n \t{\n \t  for (e = order[i]->callees; e; e = e->next_callee)\n \t    if (e->callee->local.local && !e->callee->aux)\n@@ -714,7 +724,9 @@ ipa_profile (void)\n       something_changed = false;\n       for (i = order_pos - 1; i >= 0; i--)\n \t{\n-\t  if (order[i]->aux && ipa_propagate_frequency (order[i]))\n+\t  if (order[i]->aux\n+\t      && opt_for_fn (order[i]->decl, flag_ipa_profile)\n+\t      && ipa_propagate_frequency (order[i]))\n \t    {\n \t      for (e = order[i]->callees; e; e = e->next_callee)\n \t\tif (e->callee->local.local && !e->callee->aux)"}, {"sha": "b3752de5e1b9c537a309e5ad43ef27d775d1e729", "filename": "gcc/ipa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ede94c55982638a877e0ecad794cbe7d1a54a20/gcc%2Fipa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ede94c55982638a877e0ecad794cbe7d1a54a20/gcc%2Fipa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa.c?ref=1ede94c55982638a877e0ecad794cbe7d1a54a20", "patch": "@@ -661,7 +661,7 @@ symbol_table::remove_unreachable_nodes (FILE *file)\n     if (node->address_taken\n \t&& !node->used_from_other_partition)\n       {\n-\tif (!node->call_for_symbol_thunks_and_aliases\n+\tif (!node->call_for_symbol_and_aliases\n \t    (has_addr_references_p, NULL, true)\n \t    && (!node->instrumentation_clone\n \t\t|| !node->instrumented_version"}]}