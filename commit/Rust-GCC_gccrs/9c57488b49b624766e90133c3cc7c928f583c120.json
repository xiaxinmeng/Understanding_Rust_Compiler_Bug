{"sha": "9c57488b49b624766e90133c3cc7c928f583c120", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM1NzQ4OGI0OWI2MjQ3NjZlOTAxMzNjM2NjN2M5MjhmNTgzYzEyMA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-01-16T14:42:55Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-01-16T14:42:55Z"}, "message": "(HOST_BITS_PER_WIDE_INT, HOST_WIDE_INT): Remove.\n\n(parse_escape, parse_c_expression, eval_if_expression):\nChange return type to `long'; all callers changed.\n(pcfinclude): Use `int', not HOST_WIDE_INT; any integral type will do.\n\nFrom-SVN: r11025", "tree": {"sha": "3b43e3278d94f8b6c11d80bf3369c0c320fcf60b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b43e3278d94f8b6c11d80bf3369c0c320fcf60b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c57488b49b624766e90133c3cc7c928f583c120", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c57488b49b624766e90133c3cc7c928f583c120", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c57488b49b624766e90133c3cc7c928f583c120", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c57488b49b624766e90133c3cc7c928f583c120/comments", "author": null, "committer": null, "parents": [{"sha": "da51a4782bacca6fc41eac7695ce687deb797b8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da51a4782bacca6fc41eac7695ce687deb797b8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da51a4782bacca6fc41eac7695ce687deb797b8e"}], "stats": {"total": 36, "additions": 11, "deletions": 25}, "files": [{"sha": "1c9abfccf0858f7f8c2bddd04eb7d4e550ec39d8", "filename": "gcc/cccp.c", "status": "modified", "additions": 11, "deletions": 25, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c57488b49b624766e90133c3cc7c928f583c120/gcc%2Fcccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c57488b49b624766e90133c3cc7c928f583c120/gcc%2Fcccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcccp.c?ref=9c57488b49b624766e90133c3cc7c928f583c120", "patch": "@@ -263,20 +263,6 @@ static void hack_vms_include_specification ();\n #define MIN(X,Y) ((X) < (Y) ? (X) : (Y))\n #define MAX(X,Y) ((X) > (Y) ? (X) : (Y))\n \n-/* Find the largest host integer type and set its size and type.  */\n-\n-#ifndef HOST_BITS_PER_WIDE_INT\n-\n-#if HOST_BITS_PER_LONG > HOST_BITS_PER_INT\n-#define HOST_BITS_PER_WIDE_INT HOST_BITS_PER_LONG\n-#define HOST_WIDE_INT long\n-#else\n-#define HOST_BITS_PER_WIDE_INT HOST_BITS_PER_INT\n-#define HOST_WIDE_INT int\n-#endif\n-\n-#endif\n-\n #ifndef S_ISREG\n #define S_ISREG(m) (((m) & S_IFMT) == S_IFREG)\n #endif\n@@ -332,8 +318,8 @@ char *strerror ();\n #else\t/* VMS */\n char *strerror (int,...);\n #endif\n-int parse_escape PROTO((char **));\n-HOST_WIDE_INT parse_c_expression PROTO((char *));\n+long parse_escape PROTO((char **, long));\n+long parse_c_expression PROTO((char *));\n \n #ifndef errno\n extern int errno;\n@@ -1147,7 +1133,7 @@ static void delete_assertion PROTO((ASSERTION_HASHNODE *));\n \n static void do_once PROTO((void));\n \n-static HOST_WIDE_INT eval_if_expression PROTO((U_CHAR *, int));\n+static long eval_if_expression PROTO((U_CHAR *, int));\n static void conditional_skip PROTO((FILE_BUF *, int, enum node_type, U_CHAR *, FILE_BUF *));\n static void skip_if_group PROTO((FILE_BUF *, int, FILE_BUF *));\n static void validate_else PROTO((U_CHAR *));\n@@ -5271,12 +5257,12 @@ pcfinclude (buf, limit, name, op)\n \n     /* First skip to a longword boundary */\n     /* ??? Why a 4-byte boundary?  On all machines? */\n-    /* NOTE: This works correctly even if HOST_WIDE_INT\n+    /* NOTE: This works correctly even if int\n        is narrower than a pointer.\n        Do not try risky measures here to get another type to use!\n        Do not include stddef.h--it will fail!  */\n-    if ((HOST_WIDE_INT) cp & 3)\n-      cp += 4 - ((HOST_WIDE_INT) cp & 3);\n+    if ((int) cp & 3)\n+      cp += 4 - ((int) cp & 3);\n     \n     /* Now get the string. */\n     str = (STRINGDEF *) (GENERIC_PTR) cp;\n@@ -6584,7 +6570,7 @@ do_line (buf, limit, op, keyword)\n       case '\\\\':\n \t{\n \t  char *bpc = (char *) bp;\n-\t  int c = parse_escape (&bpc);\n+\t  long c = parse_escape (&bpc, (long) (U_CHAR) (-1));\n \t  bp = (U_CHAR *) bpc;\n \t  if (c < 0)\n \t    p--;\n@@ -6906,7 +6892,7 @@ do_if (buf, limit, op, keyword)\n      FILE_BUF *op;\n      struct directive *keyword;\n {\n-  HOST_WIDE_INT value;\n+  long value;\n   FILE_BUF *ip = &instack[indepth];\n \n   value = eval_if_expression (buf, limit - buf);\n@@ -6925,7 +6911,7 @@ do_elif (buf, limit, op, keyword)\n      FILE_BUF *op;\n      struct directive *keyword;\n {\n-  HOST_WIDE_INT value;\n+  long value;\n   FILE_BUF *ip = &instack[indepth];\n \n   if (if_stack == instack[indepth].if_stack) {\n@@ -6961,14 +6947,14 @@ do_elif (buf, limit, op, keyword)\n  * evaluate a #if expression in BUF, of length LENGTH,\n  * then parse the result as a C expression and return the value as an int.\n  */\n-static HOST_WIDE_INT\n+static long\n eval_if_expression (buf, length)\n      U_CHAR *buf;\n      int length;\n {\n   FILE_BUF temp_obuf;\n   HASHNODE *save_defined;\n-  HOST_WIDE_INT value;\n+  long value;\n \n   save_defined = install ((U_CHAR *) \"defined\", -1, T_SPEC_DEFINED,\n \t\t\t  NULL_PTR, -1);"}]}