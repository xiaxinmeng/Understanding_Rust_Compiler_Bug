{"sha": "72be20e20299ec57b4bc9ba03d5b7d6bf10e97cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzJiZTIwZTIwMjk5ZWM1N2I0YmM5YmEwM2Q1YjdkNmJmMTBlOTdjYw==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-08-13T00:16:43Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-08-13T00:16:43Z"}, "message": "Daily bump.", "tree": {"sha": "c5caa9f77c43ee22e29d7b945f94bc5f676de836", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5caa9f77c43ee22e29d7b945f94bc5f676de836"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72be20e20299ec57b4bc9ba03d5b7d6bf10e97cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72be20e20299ec57b4bc9ba03d5b7d6bf10e97cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72be20e20299ec57b4bc9ba03d5b7d6bf10e97cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72be20e20299ec57b4bc9ba03d5b7d6bf10e97cc/comments", "author": null, "committer": null, "parents": [{"sha": "0ace3d4d0afe6cbe84f39e00aa9051bf4187fddc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ace3d4d0afe6cbe84f39e00aa9051bf4187fddc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ace3d4d0afe6cbe84f39e00aa9051bf4187fddc"}], "stats": {"total": 451, "additions": 450, "deletions": 1}, "files": [{"sha": "f26544f85bcb6457d905ccc3412a45a8c0628f92", "filename": "gcc/ChangeLog", "status": "modified", "additions": 145, "deletions": 0, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72be20e20299ec57b4bc9ba03d5b7d6bf10e97cc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72be20e20299ec57b4bc9ba03d5b7d6bf10e97cc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=72be20e20299ec57b4bc9ba03d5b7d6bf10e97cc", "patch": "@@ -1,3 +1,148 @@\n+2021-08-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* tree.def (OMP_MASKED): New tree code.\n+\t* tree-core.h (enum omp_clause_code): Add OMP_CLAUSE_FILTER.\n+\t* tree.h (OMP_MASKED_BODY, OMP_MASKED_CLAUSES, OMP_MASKED_COMBINED,\n+\tOMP_CLAUSE_FILTER_EXPR): Define.\n+\t* tree.c (omp_clause_num_ops): Add OMP_CLAUSE_FILTER entry.\n+\t(omp_clause_code_name): Likewise.\n+\t(walk_tree_1): Handle OMP_CLAUSE_FILTER.\n+\t* tree-nested.c (convert_nonlocal_omp_clauses,\n+\tconvert_local_omp_clauses): Handle OMP_CLAUSE_FILTER.\n+\t(convert_nonlocal_reference_stmt, convert_local_reference_stmt,\n+\tconvert_gimple_call): Handle GIMPLE_OMP_MASTER.\n+\t* tree-pretty-print.c (dump_omp_clause): Handle OMP_CLAUSE_FILTER.\n+\t(dump_generic_node): Handle OMP_MASTER.\n+\t* gimple.def (GIMPLE_OMP_MASKED): New gimple code.\n+\t* gimple.c (gimple_build_omp_masked): New function.\n+\t(gimple_copy): Handle GIMPLE_OMP_MASKED.\n+\t* gimple.h (gimple_build_omp_masked): Declare.\n+\t(gimple_has_substatements): Handle GIMPLE_OMP_MASKED.\n+\t(gimple_omp_masked_clauses, gimple_omp_masked_clauses_ptr,\n+\tgimple_omp_masked_set_clauses): New inline functions.\n+\t(CASE_GIMPLE_OMP): Add GIMPLE_OMP_MASKED.\n+\t* gimple-pretty-print.c (dump_gimple_omp_masked): New function.\n+\t(pp_gimple_stmt_1): Handle GIMPLE_OMP_MASKED.\n+\t* gimple-walk.c (walk_gimple_stmt): Likewise.\n+\t* gimple-low.c (lower_stmt): Likewise.\n+\t* gimplify.c (is_gimple_stmt): Handle OMP_MASTER.\n+\t(gimplify_scan_omp_clauses): Handle OMP_CLAUSE_FILTER.  For clauses\n+\tthat take one expression rather than decl or constant, force\n+\tgimplification of that into a SSA_NAME or temporary unless min\n+\tinvariant.\n+\t(gimplify_adjust_omp_clauses): Handle OMP_CLAUSE_FILTER.\n+\t(gimplify_expr): Handle OMP_MASKED.\n+\t* tree-inline.c (remap_gimple_stmt): Handle GIMPLE_OMP_MASKED.\n+\t(estimate_num_insns): Likewise.\n+\t* omp-low.c (scan_sharing_clauses): Handle OMP_CLAUSE_FILTER.\n+\t(check_omp_nesting_restrictions): Handle GIMPLE_OMP_MASKED.  Adjust\n+\tdiagnostics for existence of masked construct.\n+\t(scan_omp_1_stmt, lower_omp_master, lower_omp_1, diagnose_sb_1,\n+\tdiagnose_sb_2): Handle GIMPLE_OMP_MASKED.\n+\t* omp-expand.c (expand_omp_synch, expand_omp, omp_make_gimple_edges):\n+\tLikewise.\n+\n+2021-08-12  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/98309\n+\t* config/i386/i386.md (avx512f_scalef<mode>2): New insn pattern.\n+\t(ldexp<mode>3): Use avx512f_scalef<mode>2.\n+\t(UNSPEC_SCALEF): Move from ...\n+\t* config/i386/sse.md (UNSPEC_SCALEF): ... here.\n+\n+2021-08-12  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-split.c (consider_split): Fix condition testing void functions.\n+\n+2021-08-12  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* doc/invoke.texi: Remove docs for threader-mode param.\n+\t* flag-types.h (enum threader_mode): Remove.\n+\t* params.opt: Remove threader-mode param.\n+\t* tree-ssa-threadbackward.c (class back_threader): Remove\n+\tpath_is_unreachable_p.\n+\tMake find_paths private.\n+\tAdd maybe_thread and thread_through_all_blocks.\n+\tRemove reference marker for m_registry.\n+\tRemove reference marker for m_profit.\n+\t(back_threader::back_threader): Adjust for registry and profit not\n+\tbeing references.\n+\t(dump_path): Move down.\n+\t(debug): Move down.\n+\t(class thread_jumps): Remove.\n+\t(class back_threader_registry): Remove m_all_paths.\n+\tRemove destructor.\n+\t(thread_jumps::thread_through_all_blocks): Move to back_threader\n+\tclass.\n+\t(fsm_find_thread_path): Remove\n+\t(back_threader::maybe_thread): New.\n+\t(back_threader::thread_through_all_blocks): Move from\n+\tthread_jumps.\n+\t(back_threader_registry::back_threader_registry): Remove\n+\tm_all_paths.\n+\t(back_threader_registry::~back_threader_registry): Remove.\n+\t(thread_jumps::find_taken_edge): Remove.\n+\t(thread_jumps::check_subpath_and_update_thread_path): Remove.\n+\t(thread_jumps::maybe_register_path): Remove.\n+\t(thread_jumps::handle_phi): Remove.\n+\t(handle_assignment_p): Remove.\n+\t(thread_jumps::handle_assignment): Remove.\n+\t(thread_jumps::fsm_find_control_statement_thread_paths): Remove.\n+\t(thread_jumps::find_jump_threads_backwards): Remove.\n+\t(thread_jumps::find_jump_threads_backwards_with_ranger): Remove.\n+\t(try_thread_blocks): Rename find_jump_threads_backwards to\n+\tmaybe_thread.\n+\t(pass_early_thread_jumps::execute): Same.\n+\n+2021-08-12  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* tree-core.h (omp_clause_proc_bind_kind): Add\n+\tOMP_CLAUSE_PROC_BIND_PRIMARY.\n+\t* tree-pretty-print.c (dump_omp_clause): Add TODO comment to\n+\tchange 'master' to 'primary' in proc_bind for OpenMP 5.1.\n+\n+2021-08-12  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* common/config/arc/arc-common.c (arc_option_init_struct): Remove\n+\tfno-common reference.\n+\t* config/arc/arc.c (arc_override_options): Remove overriding of\n+\tflag_no_common.\n+\n+2021-08-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/101860\n+\t* config/i386/i386-expand.c (ix86_expand_vec_one_operand_perm_avx512):\n+\tIf d->testing_p, return true after performing checks instead of\n+\tactually expanding the insn.\n+\t(expand_vec_perm_broadcast_1): Handle V32HImode - assert\n+\t!TARGET_AVX512BW and return false.\n+\n+2021-08-12  Eric Botcazou  <ebotcazou@gcc.gnu.org>\n+\n+\t* configure.ac (PE linker --disable-dynamicbase support): New check.\n+\t* configure: Regenerate.\n+\t* config.in: Likewise.\n+\t* config/i386/mingw32.h (LINK_SPEC_DISABLE_DYNAMICBASE): New define.\n+\t(LINK_SPEC): Use it.\n+\t* config/i386/mingw-w64.h (LINK_SPEC_DISABLE_DYNAMICBASE): Likewise.\n+\t(LINK_SPEC): Likewise.\n+\n+2021-08-12  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/101846\n+\t* config/i386/sse.md (*avx2_zero_extendv16qiv16hi2_2): New\n+\tpost_reload define_insn_and_split.\n+\t(*avx512bw_zero_extendv32qiv32hi2_2): Ditto.\n+\t(*sse4_1_zero_extendv8qiv8hi2_4): Ditto.\n+\t(*avx512f_zero_extendv16hiv16si2_2): Ditto.\n+\t(*avx2_zero_extendv8hiv8si2_2): Ditto.\n+\t(*sse4_1_zero_extendv4hiv4si2_4): Ditto.\n+\t(*avx512f_zero_extendv8siv8di2_2): Ditto.\n+\t(*avx2_zero_extendv4siv4di2_2): Ditto.\n+\t(*sse4_1_zero_extendv2siv2di2_4): Ditto.\n+\t(VI248_256, VI248_512, VI148_512, VI148_256, VI148_128): New\n+\tmode iterator.\n+\n 2021-08-11  Bill Schmidt  <wschmidt@linux.ibm.com>\n \n \t* config/rs6000/rs6000-builtin-new.def: Add always, power5, and"}, {"sha": "3f3eb1e2d2730b4dbf543ce171720e6bc0fb7fde", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72be20e20299ec57b4bc9ba03d5b7d6bf10e97cc/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72be20e20299ec57b4bc9ba03d5b7d6bf10e97cc/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=72be20e20299ec57b4bc9ba03d5b7d6bf10e97cc", "patch": "@@ -1 +1 @@\n-20210812\n+20210813"}, {"sha": "9d0868dd24d862364893281f6127ef82b1d2ce5e", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72be20e20299ec57b4bc9ba03d5b7d6bf10e97cc/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72be20e20299ec57b4bc9ba03d5b7d6bf10e97cc/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=72be20e20299ec57b4bc9ba03d5b7d6bf10e97cc", "patch": "@@ -1,3 +1,14 @@\n+2021-08-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-pragma.h (enum pragma_kind): Add PRAGMA_OMP_MASKED.\n+\t(enum pragma_omp_clause): Add PRAGMA_OMP_CLAUSE_FILTER.\n+\t* c-pragma.c (omp_pragmas_simd): Add masked construct.\n+\t* c-common.h (enum c_omp_clause_split): Add C_OMP_CLAUSE_SPLIT_MASKED\n+\tenumerator.\n+\t(c_finish_omp_masked): Declare.\n+\t* c-omp.c (c_finish_omp_masked): New function.\n+\t(c_omp_split_clauses): Handle combined masked constructs.\n+\n 2021-07-30  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/101539"}, {"sha": "ab61ac0a3847cfab15601a78d852dbec00114226", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72be20e20299ec57b4bc9ba03d5b7d6bf10e97cc/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72be20e20299ec57b4bc9ba03d5b7d6bf10e97cc/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=72be20e20299ec57b4bc9ba03d5b7d6bf10e97cc", "patch": "@@ -1,3 +1,26 @@\n+2021-08-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-parser.c (c_parser_omp_clause_name): Parse filter clause name.\n+\t(c_parser_omp_clause_filter): New function.\n+\t(c_parser_omp_all_clauses): Handle PRAGMA_OMP_CLAUSE_FILTER.\n+\t(OMP_MASKED_CLAUSE_MASK): Define.\n+\t(c_parser_omp_masked): New function.\n+\t(c_parser_omp_parallel): Handle parallel masked.\n+\t(c_parser_omp_construct): Handle PRAGMA_OMP_MASKED.\n+\t* c-typeck.c (c_finish_omp_clauses): Handle OMP_CLAUSE_FILTER.\n+\n+2021-08-12  Martin Uecker  <muecker@gwdg.de>\n+\n+\tPR c/101838\n+\tPR c/29970\n+\t* c-typeck.c (c_expr_sizeof_type): Evaluate\n+\tsize expressions for structs of variable size.\n+\n+2021-08-12  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* c-parser.c (c_parser_omp_clause_proc_bind): Accept\n+\t'primary' as alias for 'master'.\n+\n 2021-08-10  Martin Uecker  <muecker@gwdg.de>\n \n \tPR c/29970"}, {"sha": "7a4a7077ea92b06d251834202ae96c8f8e91bd0a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72be20e20299ec57b4bc9ba03d5b7d6bf10e97cc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72be20e20299ec57b4bc9ba03d5b7d6bf10e97cc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=72be20e20299ec57b4bc9ba03d5b7d6bf10e97cc", "patch": "@@ -1,3 +1,84 @@\n+2021-08-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* parser.c (cp_parser_omp_clause_name): Parse filter clause name.\n+\t(cp_parser_omp_clause_filter): New function.\n+\t(cp_parser_omp_all_clauses): Handle PRAGMA_OMP_CLAUSE_FILTER.\n+\t(OMP_MASKED_CLAUSE_MASK): Define.\n+\t(cp_parser_omp_masked): New function.\n+\t(cp_parser_omp_parallel): Handle parallel masked.\n+\t(cp_parser_omp_construct, cp_parser_pragma): Handle PRAGMA_OMP_MASKED.\n+\t* semantics.c (finish_omp_clauses): Handle OMP_CLAUSE_FILTER.\n+\t* pt.c (tsubst_omp_clauses): Likewise.\n+\t(tsubst_expr): Handle OMP_MASKED.\n+\n+2021-08-12  Sergei Trofimovich  <siarheit@google.com>\n+\n+\tPR c++/101219\n+\t* pt.c (tsubst_copy_and_build): Use build_ptrmemfunc_access_expr\n+\tto construct ptrmemfunc expression instantiation.\n+\n+2021-08-12  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* parser.c (cp_parser_omp_clause_proc_bind): Accept\n+\t'primary' as alias for 'master'.\n+\n+2021-08-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* cp-tree.h (omp_declare_target_attr): New type.\n+\t(struct saved_scope): Change type of omp_declare_target_attribute\n+\tfrom int to vec<omp_declare_target_attr, va_gc> * and move it.\n+\t* parser.c (cp_parser_omp_declare_target): Instead of\n+\tincrementing scope_chain->omp_declare_target_attribute, push\n+\ta struct containing parser->lexer->in_omp_attribute_pragma to\n+\tthe vector.\n+\t(cp_parser_omp_end_declare_target): Instead of decrementing\n+\tscope_chain->omp_declare_target_attribute, pop a structure\n+\tfrom it.  Diagnose mismatching declare target vs.\n+\tend declare target syntax.\n+\t* semantics.c (finish_translation_unit): Use vec_safe_length\n+\tand vec_safe_truncate on scope_chain->omp_declare_target_attributes.\n+\t* decl2.c (cplus_decl_attributes): Use vec_safe_length\n+\ton scope_chain->omp_declare_target_attributes.\n+\n+2021-08-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* parser.c (cp_parser_lambda_body): Add temp overrides\n+\tfor parser->{omp_declare_simd,oacc_routine,omp_attrs_forbidden_p}.\n+\t(cp_parser_statement): Restore parser->omp_attrs_forbidden_p for\n+\tcp_parser_declaration_statement.\n+\t(cp_parser_default_argument): Add temp override for\n+\tparser->omp_attrs_forbidden_p.\n+\t(cp_parser_late_parsing_omp_declare_simd): Diagnose declare simd\n+\tor declare variant in attribute syntax on a declaration immediately\n+\tfollowing an OpenMP construct in pragma syntax.\n+\n+2021-08-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/94162\n+\t* method.c (cat_tag_for): Return cc_last for !CLASS_TYPE_P\n+\tor for classes not in std namespace.\n+\n+2021-08-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* name-lookup.c (finish_using_directive): Diagnose omp::directive\n+\tor omp::sequence attributes on using-directive.\n+\n+2021-08-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* parser.c (cp_parser_block_declaration): Call\n+\tcp_parser_using_directive for C++11 attributes followed by\n+\tusing namespace tokens.\n+\t(cp_parser_using_directive): Parse C++11 attributes at the start\n+\tof the directive rather than at the end, only parse GNU attributes\n+\tat the end.\n+\n+2021-08-12  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/101663\n+\t* constexpr.c (cxx_eval_store_expression): Handle the lval=true\n+\tcase in the early exit code path for empty stores with mismatched\n+\ttypes.\n+\n 2021-08-11  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/101725"}, {"sha": "7e1db26fa8a1f879a9d69e40666f288c1b6cc957", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72be20e20299ec57b4bc9ba03d5b7d6bf10e97cc/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72be20e20299ec57b4bc9ba03d5b7d6bf10e97cc/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=72be20e20299ec57b4bc9ba03d5b7d6bf10e97cc", "patch": "@@ -1,3 +1,15 @@\n+2021-08-12  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.h (gfc_omp_proc_bind_kind): Add OMP_PROC_BIND_PRIMARY.\n+\t* dump-parse-tree.c (show_omp_clauses): Add TODO comment to\n+\tchange 'master' to 'primary' in proc_bind for OpenMP 5.1.\n+\t* intrinsic.texi (OMP_LIB): Mention OpenMP 5.1; add\n+\tomp_proc_bind_primary.\n+\t* openmp.c (gfc_match_omp_clauses): Accept\n+\t'primary' as alias for 'master'.\n+\t* trans-openmp.c (gfc_trans_omp_clauses): Handle\n+\tOMP_PROC_BIND_PRIMARY.\n+\n 2021-08-11  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* iso-c-binding.def (c_float128, c_float128_complex): Check"}, {"sha": "6ee775a9c09efa2e5c10149f87afb0bab4bebf18", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72be20e20299ec57b4bc9ba03d5b7d6bf10e97cc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72be20e20299ec57b4bc9ba03d5b7d6bf10e97cc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=72be20e20299ec57b4bc9ba03d5b7d6bf10e97cc", "patch": "@@ -1,3 +1,122 @@\n+2021-08-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-c++-common/gomp/clauses-1.c (bar): Add tests for combined masked\n+\tconstructs with clauses.\n+\t* c-c++-common/gomp/clauses-5.c (foo): Add testcase for filter clause.\n+\t* c-c++-common/gomp/clause-dups-1.c (f1): Likewise.\n+\t* c-c++-common/gomp/masked-1.c: New test.\n+\t* c-c++-common/gomp/masked-2.c: New test.\n+\t* c-c++-common/gomp/masked-combined-1.c: New test.\n+\t* c-c++-common/gomp/masked-combined-2.c: New test.\n+\t* c-c++-common/goacc/uninit-if-clause.c: Remove xfails.\n+\t* g++.dg/gomp/block-11.C: New test.\n+\t* g++.dg/gomp/tpl-masked-1.C: New test.\n+\t* g++.dg/gomp/attrs-1.C (bar): Add tests for masked construct and\n+\tcombined masked constructs with clauses in attribute syntax.\n+\t* g++.dg/gomp/attrs-2.C (bar): Likewise.\n+\t* gcc.dg/gomp/nesting-1.c (f1, f2): Add tests for masked construct\n+\tnesting.\n+\t* gfortran.dg/goacc/host_data-tree.f95: Allow also SSA_NAMEs in if\n+\tclause.\n+\t* gfortran.dg/goacc/kernels-tree.f95: Likewise.\n+\n+2021-08-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR preprocessor/101638\n+\t* gcc.dg/cpp/pr101638.c: New test.\n+\n+2021-08-12  Michael Meissner  <meissner@linux.ibm.com>\n+\n+\t* gcc.target/powerpc/fold-vec-load-builtin_vec_xl-char.c: Fix\n+\ttypo in regular expression.\n+\t* gcc.target/powerpc/fold-vec-load-builtin_vec_xl-double.c:\n+\tLikewise.\n+\t* gcc.target/powerpc/fold-vec-load-builtin_vec_xl-float.c:\n+\tLikewise.\n+\t* gcc.target/powerpc/fold-vec-load-builtin_vec_xl-int.c:\n+\tLikewise.\n+\t* gcc.target/powerpc/fold-vec-load-builtin_vec_xl-longlong.c:\n+\tLikewise.\n+\t* gcc.target/powerpc/fold-vec-load-builtin_vec_xl-short.c:\n+\tLikewise.\n+\n+2021-08-12  Sergei Trofimovich  <siarheit@google.com>\n+\n+\tPR c++/101219\n+\t* g++.dg/warn/pr101219.C: New test.\n+\n+2021-08-12  Martin Uecker  <muecker@gwdg.de>\n+\n+\tPR c/101838\n+\t* gcc.dg/vla-stexp-2.c: New test.\n+\n+2021-08-12  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-7.c: Remove call into the legacy\n+\tcode and adjust for ranger threader.\n+\n+2021-08-12  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* c-c++-common/gomp/pr61486-2.c: Duplicate one proc_bind(master)\n+\ttestcase and test proc_bind(primary) instead.\n+\t* gfortran.dg/gomp/affinity-1.f90: Likewise.\n+\n+2021-08-12  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* gfortran.dg/PR82376.f90: Robustify match.\n+\n+2021-08-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/101860\n+\t* gcc.target/i386/avx512f-pr101860.c: New test.\n+\n+2021-08-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* g++.dg/gomp/attrs-12.C: New test.\n+\n+2021-08-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* g++.dg/gomp/attrs-11.C: Add new tests.\n+\n+2021-08-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/99429\n+\tPR c++/94162\n+\t* g++.dg/cpp2a/spaceship-synth11.C: New test.\n+\t* g++.dg/cpp2a/spaceship-synth-neg6.C: New test.\n+\n+2021-08-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* g++.dg/gomp/attrs-11.C: Adjust expected diagnostics.\n+\n+2021-08-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* g++.dg/lookup/strong-using.C: Add test using [[gnu::strong]]\n+\tas well.\n+\t* g++.dg/lookup/strong-using2.C: Likewise.\n+\t* g++.dg/cpp0x/gen-attrs-58.C: Move alignas(int) before\n+\tusing namespace.\n+\t* g++.dg/cpp0x/gen-attrs-59.C: Move alignas(X) before\n+\tusing namespace, add tests for alignas before semicolon.\n+\t* g++.dg/cpp0x/gen-attrs-76.C: Remove xfails.  Add test for\n+\tC++11 attributes on using directive before semicolon.\n+\n+2021-08-12  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/101846\n+\t* gcc.target/i386/pr101846-1.c: New test.\n+\n+2021-08-12  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/101663\n+\t* g++.dg/cpp2a/construct_at.h: New convenience header file that\n+\tdefines minimal implementations of std::construct_at/destroy_at,\n+\tsplit out from ...\n+\t* g++.dg/cpp2a/constexpr-new5.C: ... here.\n+\t* g++.dg/cpp2a/constexpr-new6.C: Use the header.\n+\t* g++.dg/cpp2a/constexpr-new14.C: Likewise.\n+\t* g++.dg/cpp2a/constexpr-new20.C: New test.\n+\n 2021-08-11  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/101725"}, {"sha": "38f7d7c6e169db7d02d11c1103dad7703da317dd", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72be20e20299ec57b4bc9ba03d5b7d6bf10e97cc/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72be20e20299ec57b4bc9ba03d5b7d6bf10e97cc/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=72be20e20299ec57b4bc9ba03d5b7d6bf10e97cc", "patch": "@@ -1,3 +1,9 @@\n+2021-08-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR preprocessor/101638\n+\t* macro.c (cpp_sys_macro_p): Return true instead of\n+\tcrashing on builtin macros.\n+\n 2021-08-05  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/100977"}, {"sha": "3d3b353f049e4dab478309deb89fe9ae52523ff9", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72be20e20299ec57b4bc9ba03d5b7d6bf10e97cc/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72be20e20299ec57b4bc9ba03d5b7d6bf10e97cc/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=72be20e20299ec57b4bc9ba03d5b7d6bf10e97cc", "patch": "@@ -1,3 +1,27 @@\n+2021-08-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* testsuite/libgomp.c-c++-common/masked-1.c: New test.\n+\n+2021-08-12  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* env.c (parse_bind_var): Accept 'primary' as alias for\n+\t'master'.\n+\t(omp_display_env): Add TODO comment to\n+\tchange 'master' to 'primary' in proc_bind for OpenMP 5.1.\n+\t* libgomp.texi: Change 'master thread' to 'primary thread'\n+\tin line with OpenMP 5.1.\n+\t(omp_get_proc_bind): Add omp_proc_bind_primary and note that\n+\tomp_proc_bind_master is an alias of it.\n+\t(OMP_PROC_BIND): Mention 'PRIMARY'.\n+\t* omp.h.in (__GOMP_DEPRECATED_5_1): Define.\n+\t(omp_proc_bind_primary): Add.\n+\t(omp_proc_bind_master): Deprecate for OpenMP 5.1.\n+\t* omp_lib.f90.in (omp_proc_bind_primary): Add.\n+\t(omp_proc_bind_master): Deprecate for OpenMP 5.1.\n+\t* omp_lib.h.in (omp_proc_bind_primary): Add.\n+\t* testsuite/libgomp.c/affinity-1.c: Check that\n+\t'primary' works and is identical to 'master'.\n+\n 2021-08-09  Julian Brown  <julian@codesourcery.com>\n \t    Kwok Cheung Yeung  <kcy@codesourcery.com>\n \t    Thomas Schwinge  <thomas@codesourcery.com>"}, {"sha": "9c5b2d53c3137b6a1e6b9bf008b6128fe850562d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72be20e20299ec57b4bc9ba03d5b7d6bf10e97cc/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72be20e20299ec57b4bc9ba03d5b7d6bf10e97cc/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=72be20e20299ec57b4bc9ba03d5b7d6bf10e97cc", "patch": "@@ -1,3 +1,31 @@\n+2021-08-12  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/101870\n+\t* include/c_global/cmath (hypot): Use __promoted_t.\n+\t(lerp): Add new overload accepting any arithmetic types.\n+\t* include/ext/type_traits.h (__promoted_t): New alias template.\n+\t* testsuite/26_numerics/lerp.cc: Moved to...\n+\t* testsuite/26_numerics/lerp/1.cc: ...here.\n+\t* testsuite/26_numerics/lerp/constexpr.cc: New test.\n+\t* testsuite/26_numerics/lerp/version.cc: New test.\n+\n+2021-08-12  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/26_numerics/lerp.cc: Add header name to #error.\n+\t* testsuite/26_numerics/midpoint/integral.cc: Likewise.\n+\t* testsuite/26_numerics/midpoint/version.cc: New test.\n+\n+2021-08-12  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/experimental/random (experimental::randint): Add\n+\tnodiscard attribute.\n+\n+2021-08-12  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* src/c++98/locale_init.cc: Require C++11.\n+\t* src/c++98/localename.cc: Likewise.\n+\t* src/c++98/misc-inst.cc: Require C++98.\n+\n 2021-08-11  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/101866"}]}