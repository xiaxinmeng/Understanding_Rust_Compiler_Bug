{"sha": "9eb8c09fdae1c41a03d30a1a386dafbf25cb1b82", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWViOGMwOWZkYWUxYzQxYTAzZDMwYTFhMzg2ZGFmYmYyNWNiMWI4Mg==", "commit": {"author": {"name": "Kirill Yukhin", "email": "kirill.yukhin@intel.com", "date": "2013-12-05T07:54:43Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2013-12-05T07:54:43Z"}, "message": "ia64.md (prologue_allocate_stack): Block auto- generation of predicated version.\n\nChangeLog/\n\n        * config/ia64/ia64.md (prologue_allocate_stack): Block auto-\n        generation of predicated version.\n        (epilogue_deallocate_stack): Ditto.\n        (prologue_allocate_stack_pr): Add explicit predicated version.\n        (epilogue_deallocate_stack_pr): Ditto.\n        * config/ia64/ia64.c (ia64_single_set): Use explicit versions.\n\ntestsuite/ChangeLog/\n\n        * gcc.target/ia64/pr52731.c: New.\n\nFrom-SVN: r205692", "tree": {"sha": "f2a3ad74f18acbd28a6bbdac16e49a625925e59c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2a3ad74f18acbd28a6bbdac16e49a625925e59c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9eb8c09fdae1c41a03d30a1a386dafbf25cb1b82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9eb8c09fdae1c41a03d30a1a386dafbf25cb1b82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9eb8c09fdae1c41a03d30a1a386dafbf25cb1b82", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9eb8c09fdae1c41a03d30a1a386dafbf25cb1b82/comments", "author": null, "committer": null, "parents": [{"sha": "c012dc48c02e9cfc761e09810a78e3eee2cc7579", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c012dc48c02e9cfc761e09810a78e3eee2cc7579", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c012dc48c02e9cfc761e09810a78e3eee2cc7579"}], "stats": {"total": 75, "additions": 73, "deletions": 2}, "files": [{"sha": "ffbd2948fde82c1f5aa218037cfa84d08c471fd7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eb8c09fdae1c41a03d30a1a386dafbf25cb1b82/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eb8c09fdae1c41a03d30a1a386dafbf25cb1b82/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9eb8c09fdae1c41a03d30a1a386dafbf25cb1b82", "patch": "@@ -1,3 +1,12 @@\n+2013-12-05  Kirill Yukhin  <kirill.yukhin@intel.com>\n+\n+\t* config/ia64/ia64.md (prologue_allocate_stack): Block auto-\n+\tgeneration of predicated version.\n+\t(epilogue_deallocate_stack): Ditto.\n+\t(prologue_allocate_stack_pr): Add explicit predicated version.\n+\t(epilogue_deallocate_stack_pr): Ditto.\n+\t* config/ia64/ia64.c (ia64_single_set): Use explicit version.\n+\n 2013-12-05  Alan Modra  <amodra@gmail.com>\n \n \t* configure.ac (BUILD_CXXFLAGS) Don't use ALL_CXXFLAGS for"}, {"sha": "8f305c1153cb10ecc7721075d36bf30f48a26012", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eb8c09fdae1c41a03d30a1a386dafbf25cb1b82/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eb8c09fdae1c41a03d30a1a386dafbf25cb1b82/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=9eb8c09fdae1c41a03d30a1a386dafbf25cb1b82", "patch": "@@ -7159,7 +7159,9 @@ ia64_single_set (rtx insn)\n   switch (recog_memoized (insn))\n     {\n     case CODE_FOR_prologue_allocate_stack:\n+    case CODE_FOR_prologue_allocate_stack_pr:\n     case CODE_FOR_epilogue_deallocate_stack:\n+    case CODE_FOR_epilogue_deallocate_stack_pr:\n       ret = XVECEXP (x, 0, 0);\n       break;\n "}, {"sha": "bc4e8cbfd1b270f6bc781cd6b8129434affbccb4", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 39, "deletions": 2, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eb8c09fdae1c41a03d30a1a386dafbf25cb1b82/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eb8c09fdae1c41a03d30a1a386dafbf25cb1b82/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=9eb8c09fdae1c41a03d30a1a386dafbf25cb1b82", "patch": "@@ -4652,6 +4652,8 @@\n \n ;; This prevents the scheduler from moving the SP decrement past FP-relative\n ;; stack accesses.  This is the same as adddi3 plus the extra set.\n+;; Explicit predicated version of insn needed to check by CODE_FOR_\n+;; in ia64_single_set, where despite of 2 sets this define_insn should be OK.\n \n (define_insn \"prologue_allocate_stack\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r,r\")\n@@ -4664,18 +4666,53 @@\n    add %0 = %1, %2\n    adds %0 = %2, %1\n    addl %0 = %2, %1\"\n-  [(set_attr \"itanium_class\" \"ialu\")])\n+  [(set_attr \"itanium_class\" \"ialu\")\n+   (set_attr \"predicable\" \"no\")])\n+\n+(define_insn \"prologue_allocate_stack_pr\"\n+  [(cond_exec (match_operator 0 (\"predicate_operator\")\n+\t\t [(match_operand:BI 1 (\"register_operand\") (\"c,c,c\"))\n+\t\t  (const_int 0)])\n+\t      (parallel\n+\t         [(set (match_operand:DI 2 \"register_operand\" \"=r,r,r\")\n+\t\t       (plus:DI (match_operand:DI 3 \"register_operand\" \"%r,r,a\")\n+\t\t\t\t(match_operand:DI 4 \"gr_reg_or_22bit_operand\" \"r,I,J\")))\n+\t\t  (set (match_operand:DI 5 \"register_operand\" \"+r,r,r\")\n+\t\t       (match_dup 5))]))]\n+  \"\"\n+  \"@\n+   (%J0) add %2 = %3, %4\n+   (%J0) adds %2 = %3, %4\n+   (%J0) addl %2 = %3, %4\"\n+  [(set_attr \"itanium_class\" \"ialu\")\n+   (set_attr \"predicable\" \"no\")])\n \n ;; This prevents the scheduler from moving the SP restore past FP-relative\n ;; stack accesses.  This is similar to movdi plus the extra set.\n+;; Explicit predicated version of insn needed to check by CODE_FOR_\n+;; in ia64_single_set, where despite of 2 sets this define_insn should be OK.\n \n (define_insn \"epilogue_deallocate_stack\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(match_operand:DI 1 \"register_operand\" \"+r\"))\n    (set (match_dup 1) (match_dup 1))]\n   \"\"\n   \"mov %0 = %1\"\n-  [(set_attr \"itanium_class\" \"ialu\")])\n+  [(set_attr \"itanium_class\" \"ialu\")\n+   (set_attr \"predicable\" \"no\")])\n+\n+(define_insn \"epilogue_deallocate_stack_pr\"\n+  [(cond_exec (match_operator 0 (\"predicate_operator\")\n+\t\t [(match_operand:BI 1 (\"register_operand\") (\"c\"))\n+\t\t  (const_int 0)])\n+\t      (parallel\n+\t         [(set (match_operand:DI 2 \"register_operand\" \"=r\")\n+\t\t       (match_operand:DI 3 \"register_operand\" \"+r\"))\n+\t\t  (set (match_dup 3) (match_dup 3))]))]\n+  \"\"\n+  \"(%J0) mov %2 = %3\"\n+  [(set_attr \"itanium_class\" \"ialu\")\n+   (set_attr \"predicable\" \"no\")])\n \n ;; As USE insns aren't meaningful after reload, this is used instead\n ;; to prevent deleting instructions setting registers for EH handling"}, {"sha": "07d071f6abc8d8b7f19e939bfe29812b58b34f59", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eb8c09fdae1c41a03d30a1a386dafbf25cb1b82/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eb8c09fdae1c41a03d30a1a386dafbf25cb1b82/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9eb8c09fdae1c41a03d30a1a386dafbf25cb1b82", "patch": "@@ -1,3 +1,7 @@\n+2013-12-05  Kirill Yukhin  <kirill.yukhin@intel.com>\n+\n+\t* gcc.target/ia64/pr52731.c: New.\n+\n 2013-12-04  Jeff Law  <law@redhat.com>\n \n \t* gcc.dg/pr38984.c: Use -fno-isolate-erroneous-paths-dereference."}, {"sha": "50ef1d78d757dcde36c7a0b5a77385b46049ef12", "filename": "gcc/testsuite/gcc.target/ia64/pr52731.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eb8c09fdae1c41a03d30a1a386dafbf25cb1b82/gcc%2Ftestsuite%2Fgcc.target%2Fia64%2Fpr52731.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eb8c09fdae1c41a03d30a1a386dafbf25cb1b82/gcc%2Ftestsuite%2Fgcc.target%2Fia64%2Fpr52731.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fia64%2Fpr52731.c?ref=9eb8c09fdae1c41a03d30a1a386dafbf25cb1b82", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile { target ia64-*-* } } */\n+/* { dg-options \"-O2\" } */\n+\n+char* area;\n+long int area_size;\n+char* base;\n+\n+void fun(unsigned long int addr)\n+{\n+  unsigned long int size32 = (addr + 4096 - 1) & ~(4096 - 1);\n+  unsigned long int size = size32 * sizeof(unsigned int);\n+\n+  if (size > 0) {\n+    size = (size + 1) & ~(1);\n+  }\n+\n+  area_size = size;\n+  area = base + size;\n+}"}]}