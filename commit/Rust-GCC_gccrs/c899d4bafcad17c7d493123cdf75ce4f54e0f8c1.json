{"sha": "c899d4bafcad17c7d493123cdf75ce4f54e0f8c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzg5OWQ0YmFmY2FkMTdjN2Q0OTMxMjNjZGY3NWNlNGY1NGUwZjhjMQ==", "commit": {"author": {"name": "Patrick Bernardi", "email": "bernardi@adacore.com", "date": "2018-12-03T15:49:06Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-12-03T15:49:06Z"}, "message": "[Ada] A task not executing an entry call consumes an Entry_Call slot\n\nThis patch resolves the issue where the ATC Level of a task's first\nEntry_Call slot corresponds to a task not currently making an entry\ncall. Consequently, the first slot is never used to record an entry\ncall. To resolve this, the ATC Level of a such a task is now one less\nthan the first index of the Entry_Call array (and as result, the ATC\nlevel corresponding to a completed task is now two less than the first\nindex of this array).\n\nTo aid the maintainability of code using ATC levels new constants are\nintroduced to represent key ATC nesting levels and comments are\nintroduce for the ATC level definitions.\n\nAs a result of this change, the GNAT Extended Ravenscar Profile now\nworks with the full runtime. The restricted runtime had assumed that the\nfirst Entry_Call slot would be the only slot used for entry calls and\nwould only initialise this slot (and\nSystem.Tasking.Protected_Objects.Single_Entry was coded this way).\nHowever, Extended Ravenscar uses the native implementation of\nSystem.Tasking.Protected_Objects where this assumption doesn't hold\nuntil the implementation of this patch. Aside from enabling an extra\nnested level, this is main functional change of this patch.\n\nThe following should compile and execute quietly:\n\ngprbuild -q main.adb\n./main\n\n-- main.adb\n\npragma Profile (GNAT_Extended_Ravenscar);\npragma Partition_Elaboration_Policy (Sequential);\n\nwith Tasks;\nwith GNAT.OS_Lib;\nwith Ada.Synchronous_Task_Control;\n\nprocedure Main is\n   pragma Priority (30);\nbegin\n   Ada.Synchronous_Task_Control.Suspend_Until_True (Tasks.A_SO);\n   Ada.Synchronous_Task_Control.Suspend_Until_True (Tasks.B_SO);\n\n   GNAT.OS_Lib.OS_Exit (0);\nend Main;\n\n-- tasks.ads\n\nwith Ada.Synchronous_Task_Control;\n\npackage Tasks is\n   A_SO : Ada.Synchronous_Task_Control.Suspension_Object;\n   B_SO : Ada.Synchronous_Task_Control.Suspension_Object;\n\n   task A with Priority => 25;\n   task B with Priority => 20;\nend Tasks;\n\n--  tasks.adb\n\nwith Obj;\n\npackage body Tasks is\n\n   task body A is\n   begin\n      for J in 1 .. 5 loop\n         Obj.PO.Wait;\n      end loop;\n      Ada.Synchronous_Task_Control.Set_True (Tasks.A_SO);\n   end A;\n\n   task body B is\n   begin\n      for J in 1 .. 5 loop\n         Obj.PO.Put;\n      end loop;\n      Ada.Synchronous_Task_Control.Set_True (Tasks.B_SO);\n   end B;\nend Tasks;\n\n-- obj.ads\n\npackage Obj is\n   protected type PT is\n      pragma Priority (30);\n      entry Put;\n      entry Wait;\n   private\n      Wait_Ready : Boolean := False;\n      Put_Ready  : Boolean := True;\n   end PT;\n\n   PO : PT;\nend Obj;\n\n-- obj.adb\n\npackage body Obj is\n   protected body PT is\n      entry Put when Put_Ready is\n      begin\n         Wait_Ready := True;\n         Put_Ready  := False;\n      end Put;\n\n      entry Wait when Wait_Ready is\n      begin\n         Wait_Ready := False;\n         Put_Ready  := True;\n      end Wait;\n   end PT;\nend Obj;\n\n2018-12-03  Patrick Bernardi  <bernardi@adacore.com>\n\ngcc/ada/\n\n\t* libgnarl/s-taskin.ads (ATC_Level_Base): Redefine to span from\n\t-1 to Max_ATC_Nesting so that 0 represents no ATC nesting and -1\n\trepresented a completed task. To increase readability, new\n\tconstants are introduced to represent key ATC nesting levels.\n\tConsequently, Level_No_Pending_Abort replaces\n\tATC_Level_Infinity.  ATC_Level related definitions now\n\tdocumented.\n\t(Ada_Task_Control_Block): The default initialization of\n\tcomponents ATC_Nesting_Level and Pending_ATC_Level now use new\n\tATC_Level_Base constants.  Comments improved\n\t* libgnarl/s-taskin.adb (Initialize): Improve the initialisation\n\tof the first element of the Entry_Calls array to facilitate\n\tbetter maintenance.\n\t* libgnarl/s-taasde.ads: Update comment.\n\t* libgnarl/s-taasde.adb, libgnarl/s-taenca.adb,\n\tlibgnarl/s-tasren.adb, libgnarl/s-tassta.adb,\n\tlibgnarl/s-tasuti.ads, libgnarl/s-tasuti.adb: Use new\n\tATC_Level_Base constants.\n\t* libgnarl/s-tarest.adb (Create_Restricted_Task): Improve the\n\tinitialisation of the first element of the task's Entry_Calls\n\tarray to facilitate better maintenance.\n\t* libgnarl/s-tasini.ads (Locked_Abort_To_Level): Update\n\tsignature to accept ATC_Level_Base.\n\t* libgnarl/s-tasini.adb (Locked_Abort_To_Level): Update\n\tsignature to accept ATC_Level_Base.  Use new ATC_Level_Base\n\tconstants and only modify the aborting task's Entry_Calls array\n\tif any entry call is happening.\n\t* libgnarl/s-tposen.adb (Protected_Single_Entry_Call): Reference\n\tthe first element of the task's Entry_Calls array via 'First\n\tattribute to facilitate better maintenance.\n\nFrom-SVN: r266752", "tree": {"sha": "8a4864a021b95381c85284c98b0bc446a311abe9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a4864a021b95381c85284c98b0bc446a311abe9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c899d4bafcad17c7d493123cdf75ce4f54e0f8c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c899d4bafcad17c7d493123cdf75ce4f54e0f8c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c899d4bafcad17c7d493123cdf75ce4f54e0f8c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c899d4bafcad17c7d493123cdf75ce4f54e0f8c1/comments", "author": {"login": "burratoo", "id": 23646118, "node_id": "MDQ6VXNlcjIzNjQ2MTE4", "avatar_url": "https://avatars.githubusercontent.com/u/23646118?v=4", "gravatar_id": "", "url": "https://api.github.com/users/burratoo", "html_url": "https://github.com/burratoo", "followers_url": "https://api.github.com/users/burratoo/followers", "following_url": "https://api.github.com/users/burratoo/following{/other_user}", "gists_url": "https://api.github.com/users/burratoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/burratoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/burratoo/subscriptions", "organizations_url": "https://api.github.com/users/burratoo/orgs", "repos_url": "https://api.github.com/users/burratoo/repos", "events_url": "https://api.github.com/users/burratoo/events{/privacy}", "received_events_url": "https://api.github.com/users/burratoo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ba301a3b6633691e09e7ea58a2c1fe559203ad8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba301a3b6633691e09e7ea58a2c1fe559203ad8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba301a3b6633691e09e7ea58a2c1fe559203ad8a"}], "stats": {"total": 187, "additions": 135, "deletions": 52}, "files": [{"sha": "dae657493a095821c4c44f6de0e6a888d7879fda", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c899d4bafcad17c7d493123cdf75ce4f54e0f8c1/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c899d4bafcad17c7d493123cdf75ce4f54e0f8c1/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c899d4bafcad17c7d493123cdf75ce4f54e0f8c1", "patch": "@@ -1,3 +1,36 @@\n+2018-12-03  Patrick Bernardi  <bernardi@adacore.com>\n+\n+\t* libgnarl/s-taskin.ads (ATC_Level_Base): Redefine to span from\n+\t-1 to Max_ATC_Nesting so that 0 represents no ATC nesting and -1\n+\trepresented a completed task. To increase readability, new\n+\tconstants are introduced to represent key ATC nesting levels.\n+\tConsequently, Level_No_Pending_Abort replaces\n+\tATC_Level_Infinity.  ATC_Level related definitions now\n+\tdocumented.\n+\t(Ada_Task_Control_Block): The default initialization of\n+\tcomponents ATC_Nesting_Level and Pending_ATC_Level now use new\n+\tATC_Level_Base constants.  Comments improved\n+\t* libgnarl/s-taskin.adb (Initialize): Improve the initialisation\n+\tof the first element of the Entry_Calls array to facilitate\n+\tbetter maintenance.\n+\t* libgnarl/s-taasde.ads: Update comment.\n+\t* libgnarl/s-taasde.adb, libgnarl/s-taenca.adb,\n+\tlibgnarl/s-tasren.adb, libgnarl/s-tassta.adb,\n+\tlibgnarl/s-tasuti.ads, libgnarl/s-tasuti.adb: Use new\n+\tATC_Level_Base constants.\n+\t* libgnarl/s-tarest.adb (Create_Restricted_Task): Improve the\n+\tinitialisation of the first element of the task's Entry_Calls\n+\tarray to facilitate better maintenance.\n+\t* libgnarl/s-tasini.ads (Locked_Abort_To_Level): Update\n+\tsignature to accept ATC_Level_Base.\n+\t* libgnarl/s-tasini.adb (Locked_Abort_To_Level): Update\n+\tsignature to accept ATC_Level_Base.  Use new ATC_Level_Base\n+\tconstants and only modify the aborting task's Entry_Calls array\n+\tif any entry call is happening.\n+\t* libgnarl/s-tposen.adb (Protected_Single_Entry_Call): Reference\n+\tthe first element of the task's Entry_Calls array via 'First\n+\tattribute to facilitate better maintenance.\n+\n 2018-12-03  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* einfo.adb (Write_Entity_Info): Don't take Scope of Standard"}, {"sha": "4f5b3e48185b4849fb8c7bc82754b83c88ad70ab", "filename": "gcc/ada/libgnarl/s-taasde.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c899d4bafcad17c7d493123cdf75ce4f54e0f8c1/gcc%2Fada%2Flibgnarl%2Fs-taasde.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c899d4bafcad17c7d493123cdf75ce4f54e0f8c1/gcc%2Fada%2Flibgnarl%2Fs-taasde.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-taasde.adb?ref=c899d4bafcad17c7d493123cdf75ce4f54e0f8c1", "patch": "@@ -96,6 +96,7 @@ package body System.Tasking.Async_Delays is\n    --  for an async. select statement with delay statement as trigger. The\n    --  effect should be to remove the delay from the timer queue, and exit one\n    --  ATC nesting level.\n+\n    --  The usage and logic are similar to Cancel_Protected_Entry_Call, but\n    --  simplified because this is not a true entry call.\n \n@@ -104,18 +105,17 @@ package body System.Tasking.Async_Delays is\n       Dsucc : Delay_Block_Access;\n \n    begin\n-      --  Note that we mark the delay as being cancelled\n-      --  using a level value that is reserved.\n-\n-      --  make this operation idempotent\n+      --  A delay block level of Level_No_Pending_Abort indicates the delay\n+      --  has been cancelled. If the delay has already been canceled, there is\n+      --  nothing more to be done.\n \n-      if D.Level = ATC_Level_Infinity then\n+      if D.Level = Level_No_Pending_Abort then\n          return;\n       end if;\n \n-      D.Level := ATC_Level_Infinity;\n+      D.Level := Level_No_Pending_Abort;\n \n-      --  remove self from timer queue\n+      --  Remove self from timer queue\n \n       STI.Defer_Abort_Nestable (D.Self_Id);\n "}, {"sha": "22e1ca07516706c12b0de10ed8e7b8f613fa38b5", "filename": "gcc/ada/libgnarl/s-taasde.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c899d4bafcad17c7d493123cdf75ce4f54e0f8c1/gcc%2Fada%2Flibgnarl%2Fs-taasde.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c899d4bafcad17c7d493123cdf75ce4f54e0f8c1/gcc%2Fada%2Flibgnarl%2Fs-taasde.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-taasde.ads?ref=c899d4bafcad17c7d493123cdf75ce4f54e0f8c1", "patch": "@@ -120,8 +120,8 @@ private\n       Level : ATC_Level_Base;\n       --  Normally Level is the ATC nesting level of the asynchronous select\n       --  statement to which this delay belongs, but after a call has been\n-      --  dequeued we set it to ATC_Level_Infinity so that the Cancel operation\n-      --  can detect repeated calls, and act idempotently.\n+      --  dequeued we set it to Level_No_Pending_Abort so that the Cancel\n+      --  operation can detect repeated calls, and act idempotently.\n \n       Resume_Time : Duration;\n       --  The absolute wake up time, represented as Duration"}, {"sha": "965bd1d531e173c5c04644ceff2622bcdb55012e", "filename": "gcc/ada/libgnarl/s-taenca.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c899d4bafcad17c7d493123cdf75ce4f54e0f8c1/gcc%2Fada%2Flibgnarl%2Fs-taenca.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c899d4bafcad17c7d493123cdf75ce4f54e0f8c1/gcc%2Fada%2Flibgnarl%2Fs-taenca.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-taenca.adb?ref=c899d4bafcad17c7d493123cdf75ce4f54e0f8c1", "patch": "@@ -615,7 +615,7 @@ package body System.Tasking.Entry_Calls is\n       Call    : Entry_Call_Link)\n    is\n    begin\n-      pragma Assert (Self_ID.ATC_Nesting_Level > 0);\n+      pragma Assert (Self_ID.ATC_Nesting_Level > Level_No_ATC_Occuring);\n       pragma Assert (Call.Mode = Asynchronous_Call);\n \n       STPO.Write_Lock (Self_ID);"}, {"sha": "1966a9163d835535af43828503145f6b8e5307e0", "filename": "gcc/ada/libgnarl/s-tarest.adb", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c899d4bafcad17c7d493123cdf75ce4f54e0f8c1/gcc%2Fada%2Flibgnarl%2Fs-tarest.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c899d4bafcad17c7d493123cdf75ce4f54e0f8c1/gcc%2Fada%2Flibgnarl%2Fs-tarest.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-tarest.adb?ref=c899d4bafcad17c7d493123cdf75ce4f54e0f8c1", "patch": "@@ -562,7 +562,16 @@ package body System.Tasking.Restricted.Stages is\n          raise Program_Error;\n       end if;\n \n-      Created_Task.Entry_Calls (1).Self := Created_Task;\n+      --  Only the first element of the Entry_Calls array is used when the\n+      --  Ravenscar Profile is active as no asynchronous transfer of control\n+      --  is allowed.\n+\n+      Created_Task.Entry_Calls (Created_Task.Entry_Calls'First) :=\n+        (Self   => Created_Task,\n+         Level  => Created_Task.Entry_Calls'First,\n+         others => <>);\n+\n+      --  Set task name\n \n       Len :=\n         Integer'Min (Created_Task.Common.Task_Image'Length, Task_Image'Length);"}, {"sha": "2164c19d53712f931077006176afc2e9fa5d1f35", "filename": "gcc/ada/libgnarl/s-tasini.adb", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c899d4bafcad17c7d493123cdf75ce4f54e0f8c1/gcc%2Fada%2Flibgnarl%2Fs-tasini.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c899d4bafcad17c7d493123cdf75ce4f54e0f8c1/gcc%2Fada%2Flibgnarl%2Fs-tasini.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-tasini.adb?ref=c899d4bafcad17c7d493123cdf75ce4f54e0f8c1", "patch": "@@ -426,7 +426,7 @@ package body System.Tasking.Initialization is\n    procedure Locked_Abort_To_Level\n      (Self_ID : Task_Id;\n       T       : Task_Id;\n-      L       : ATC_Level)\n+      L       : ATC_Level_Base)\n    is\n    begin\n       if not T.Aborting and then T /= Self_ID then\n@@ -440,11 +440,13 @@ package body System.Tasking.Initialization is\n             when Activating\n                | Runnable\n             =>\n-               --  This is needed to cancel an asynchronous protected entry\n-               --  call during a requeue with abort.\n+               if T.ATC_Nesting_Level > Level_No_ATC_Occuring then\n+                  --  This scenario occurs when an asynchronous protected entry\n+                  --  call is canceld during a requeue with abort.\n \n-               T.Entry_Calls\n-                 (T.ATC_Nesting_Level).Cancellation_Attempted := True;\n+                  T.Entry_Calls\n+                    (T.ATC_Nesting_Level).Cancellation_Attempted := True;\n+               end if;\n \n             when Interrupt_Server_Blocked_On_Event_Flag =>\n                null;\n@@ -465,6 +467,8 @@ package body System.Tasking.Initialization is\n                Wakeup (T, T.Common.State);\n \n             when Entry_Caller_Sleep  =>\n+               pragma Assert (T.ATC_Nesting_Level > Level_No_ATC_Occuring);\n+\n                T.Entry_Calls\n                  (T.ATC_Nesting_Level).Cancellation_Attempted := True;\n                Wakeup (T, T.Common.State);\n@@ -482,7 +486,7 @@ package body System.Tasking.Initialization is\n          T.Pending_ATC_Level := L;\n          T.Pending_Action := True;\n \n-         if L = 0 then\n+         if L = Level_Completed_Task then\n             T.Callable := False;\n          end if;\n "}, {"sha": "6bd865c87860d3cde35ad988be72c920405146e2", "filename": "gcc/ada/libgnarl/s-tasini.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c899d4bafcad17c7d493123cdf75ce4f54e0f8c1/gcc%2Fada%2Flibgnarl%2Fs-tasini.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c899d4bafcad17c7d493123cdf75ce4f54e0f8c1/gcc%2Fada%2Flibgnarl%2Fs-tasini.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-tasini.ads?ref=c899d4bafcad17c7d493123cdf75ce4f54e0f8c1", "patch": "@@ -171,7 +171,7 @@ package System.Tasking.Initialization is\n    procedure Locked_Abort_To_Level\n      (Self_ID : Task_Id;\n       T       : Task_Id;\n-      L       : ATC_Level);\n+      L       : ATC_Level_Base);\n    pragma Inline (Locked_Abort_To_Level);\n    --  Abort a task to a specified ATC level. Call this only with T locked\n "}, {"sha": "d86a2b8ebc4f5e5d1ab7d85b4941f26d84302a64", "filename": "gcc/ada/libgnarl/s-taskin.adb", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c899d4bafcad17c7d493123cdf75ce4f54e0f8c1/gcc%2Fada%2Flibgnarl%2Fs-taskin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c899d4bafcad17c7d493123cdf75ce4f54e0f8c1/gcc%2Fada%2Flibgnarl%2Fs-taskin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-taskin.adb?ref=c899d4bafcad17c7d493123cdf75ce4f54e0f8c1", "patch": "@@ -267,9 +267,12 @@ package body System.Tasking is\n            Dispatching_Domain_Tasks (Base_CPU) + 1;\n       end if;\n \n-      --  Only initialize the first element since others are not relevant\n-      --  in ravenscar mode. Rest of the initialization is done in Init_RTS.\n+      --  The full initialization of the environment task's Entry_Calls array\n+      --  is deferred to Init_RTS because only the first element of the array\n+      --  is used by the restricted Ravenscar runtime.\n+\n+      T.Entry_Calls (T.Entry_Calls'First).Self := T;\n+      T.Entry_Calls (T.Entry_Calls'First).Level := T.Entry_Calls'First;\n \n-      T.Entry_Calls (1).Self := T;\n    end Initialize;\n end System.Tasking;"}, {"sha": "1bc33d17b92a6610724a576e2dbbd72d2654cc18", "filename": "gcc/ada/libgnarl/s-taskin.ads", "status": "modified", "additions": 36, "deletions": 13, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c899d4bafcad17c7d493123cdf75ce4f54e0f8c1/gcc%2Fada%2Flibgnarl%2Fs-taskin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c899d4bafcad17c7d493123cdf75ce4f54e0f8c1/gcc%2Fada%2Flibgnarl%2Fs-taskin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-taskin.ads?ref=c899d4bafcad17c7d493123cdf75ce4f54e0f8c1", "patch": "@@ -565,7 +565,8 @@ package System.Tasking is\n       --\n       --  Protection: Self.L. Self will modify this field when Self.Accepting\n       --  is False, and will not need the mutex to do so. Once a task sets\n-      --  Pending_ATC_Level = 0, no other task can access this field.\n+      --  Pending_ATC_Level = Level_Completed_Task, no other task can access\n+      --  this field.\n \n       LL : aliased Task_Primitives.Private_Data;\n       --  Control block used by the underlying low-level tasking service\n@@ -814,14 +815,32 @@ package System.Tasking is\n    -----------------------------------\n \n    Max_ATC_Nesting : constant Natural := 20;\n+   --  The maximum number of nested asynchronous select statements supported\n+   --  by the runtime.\n \n-   subtype ATC_Level_Base is Integer range 0 .. Max_ATC_Nesting;\n+   subtype ATC_Level_Base is Integer range -1 .. Max_ATC_Nesting;\n+   --  Indicates the number of nested asynchronous task control statements\n+   --  or entries a task is in.\n \n-   ATC_Level_Infinity : constant ATC_Level_Base := ATC_Level_Base'Last;\n+   Level_Completed_Task : constant ATC_Level_Base := -1;\n+   --  ATC_Level of a task that has \"completed\". A task reaches the completed\n+   --  state after an abort, exception propagation, or normal exit.\n \n-   subtype ATC_Level is ATC_Level_Base range 0 .. ATC_Level_Base'Last - 1;\n+   Level_No_ATC_Occuring : constant ATC_Level_Base := 0;\n+   --  ATC_Level of a task not executing a entry call or an asynchronous\n+   --  select statement.\n \n-   subtype ATC_Level_Index is ATC_Level range 1 .. ATC_Level'Last;\n+   Level_No_Pending_Abort : constant ATC_Level_Base := ATC_Level_Base'Last;\n+   --  ATC_Level when there is no pending abort\n+\n+   subtype ATC_Level is ATC_Level_Base range\n+     Level_No_ATC_Occuring .. Level_No_Pending_Abort - 1;\n+   --  Nested ATC_Levels valid during the execution of a task\n+\n+   subtype ATC_Level_Index is ATC_Level range\n+     Level_No_ATC_Occuring + 1 .. ATC_Level'Last;\n+   --  ATC_Levels valid when a task is executing an entry call or asynchronous\n+   --  task control statements.\n \n    ----------------------------------\n    -- Entry_Call_Record definition --\n@@ -1082,7 +1101,7 @@ package System.Tasking is\n \n       --  Beginning of counts\n \n-      ATC_Nesting_Level : ATC_Level := 1;\n+      ATC_Nesting_Level : ATC_Level := Level_No_ATC_Occuring;\n       --  The dynamic level of ATC nesting (currently executing nested\n       --  asynchronous select statements) in this task.\n \n@@ -1102,13 +1121,17 @@ package System.Tasking is\n \n       --  Protection: Only updated by Self; access assumed to be atomic\n \n-      Pending_ATC_Level : ATC_Level_Base := ATC_Level_Infinity;\n-      --  The ATC level to which this task is currently being aborted. If the\n-      --  value is zero, the entire task has \"completed\". That may be via\n-      --  abort, exception propagation, or normal exit. If the value is\n-      --  ATC_Level_Infinity, the task is not being aborted to any level. If\n-      --  the value is positive, the task has not completed. This should ONLY\n-      --  be modified by Abort_To_Level and Exit_One_ATC_Level.\n+      Pending_ATC_Level : ATC_Level_Base := Level_No_Pending_Abort;\n+      --  Indicates the ATC level to which this task is currently being\n+      --  aborted. Two special values exist:\n+      --\n+      --    * Level_Completed_Task: the task has completed.\n+      --\n+      --    * Level_No_Pending_Abort: the task is not being aborted to any\n+      --                              level.\n+      --\n+      --  All other values indicate the task has not completed. This should\n+      --  ONLY be modified by Abort_To_Level and Exit_One_ATC_Level.\n       --\n       --  Protection: Self.L\n "}, {"sha": "5ce200a9495daa6870881eab70b9e3303ba5bab5", "filename": "gcc/ada/libgnarl/s-tasren.adb", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c899d4bafcad17c7d493123cdf75ce4f54e0f8c1/gcc%2Fada%2Flibgnarl%2Fs-tasren.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c899d4bafcad17c7d493123cdf75ce4f54e0f8c1/gcc%2Fada%2Flibgnarl%2Fs-tasren.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-tasren.adb?ref=c899d4bafcad17c7d493123cdf75ce4f54e0f8c1", "patch": "@@ -163,7 +163,7 @@ package body System.Tasking.Rendezvous is\n       STPO.Write_Lock (Self_Id);\n \n       if not Self_Id.Callable then\n-         pragma Assert (Self_Id.Pending_ATC_Level = 0);\n+         pragma Assert (Self_Id.Pending_ATC_Level = Level_Completed_Task);\n \n          pragma Assert (Self_Id.Pending_Action);\n \n@@ -205,6 +205,9 @@ package body System.Tasking.Rendezvous is\n \n          if Self_Id.Common.Call /= null then\n             Caller := Self_Id.Common.Call.Self;\n+\n+            pragma Assert (Caller.ATC_Nesting_Level > Level_No_ATC_Occuring);\n+\n             Uninterpreted_Data :=\n               Caller.Entry_Calls (Caller.ATC_Nesting_Level).Uninterpreted_Data;\n          else\n@@ -247,7 +250,7 @@ package body System.Tasking.Rendezvous is\n       STPO.Write_Lock (Self_Id);\n \n       if not Self_Id.Callable then\n-         pragma Assert (Self_Id.Pending_ATC_Level = 0);\n+         pragma Assert (Self_Id.Pending_ATC_Level = Level_Completed_Task);\n \n          pragma Assert (Self_Id.Pending_Action);\n \n@@ -738,7 +741,7 @@ package body System.Tasking.Rendezvous is\n       STPO.Write_Lock (Self_Id);\n \n       if not Self_Id.Callable then\n-         pragma Assert (Self_Id.Pending_ATC_Level = 0);\n+         pragma Assert (Self_Id.Pending_ATC_Level = Level_Completed_Task);\n \n          pragma Assert (Self_Id.Pending_Action);\n \n@@ -893,7 +896,8 @@ package body System.Tasking.Rendezvous is\n                --  we do not need to cancel the terminate alternative. The\n                --  cleanup will be done in Complete_Master.\n \n-               pragma Assert (Self_Id.Pending_ATC_Level = 0);\n+               pragma Assert\n+                  (Self_Id.Pending_ATC_Level = Level_Completed_Task);\n                pragma Assert (Self_Id.Awake_Count = 0);\n \n                STPO.Unlock (Self_Id);\n@@ -1395,7 +1399,7 @@ package body System.Tasking.Rendezvous is\n       STPO.Write_Lock (Self_Id);\n \n       if not Self_Id.Callable then\n-         pragma Assert (Self_Id.Pending_ATC_Level = 0);\n+         pragma Assert (Self_Id.Pending_ATC_Level = Level_Completed_Task);\n \n          pragma Assert (Self_Id.Pending_Action);\n "}, {"sha": "b48f2384a65289918250e04fa8b31f2c6c473a55", "filename": "gcc/ada/libgnarl/s-tassta.adb", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c899d4bafcad17c7d493123cdf75ce4f54e0f8c1/gcc%2Fada%2Flibgnarl%2Fs-tassta.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c899d4bafcad17c7d493123cdf75ce4f54e0f8c1/gcc%2Fada%2Flibgnarl%2Fs-tassta.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-tassta.adb?ref=c899d4bafcad17c7d493123cdf75ce4f54e0f8c1", "patch": "@@ -588,7 +588,7 @@ package body System.Tasking.Stages is\n       --  give up on creating this task, and simply return.\n \n       if not Self_ID.Callable then\n-         pragma Assert (Self_ID.Pending_ATC_Level = 0);\n+         pragma Assert (Self_ID.Pending_ATC_Level = Level_Completed_Task);\n          pragma Assert (Self_ID.Pending_Action);\n          pragma Assert\n            (Chain.T_ID = null or else Chain.T_ID.Common.State = Unactivated);\n@@ -1553,7 +1553,9 @@ package body System.Tasking.Stages is\n       --  for the task completion is an abort, we do not raise an exception.\n       --  See RM 9.2(5).\n \n-      if not Self_ID.Callable and then Self_ID.Pending_ATC_Level /= 0 then\n+      if not Self_ID.Callable\n+        and then Self_ID.Pending_ATC_Level /= Level_Completed_Task\n+      then\n          Activator.Common.Activation_Failed := True;\n       end if;\n \n@@ -1980,7 +1982,7 @@ package body System.Tasking.Stages is\n            Self_ID.Master_Of_Task .. Self_ID.Master_Of_Task + 3);\n       pragma Assert (Self_ID.Common.Wait_Count = 0);\n       pragma Assert (Self_ID.Open_Accepts = null);\n-      pragma Assert (Self_ID.ATC_Nesting_Level = 1);\n+      pragma Assert (Self_ID.ATC_Nesting_Level = Level_No_ATC_Occuring);\n \n       pragma Debug (Debug.Trace (Self_ID, \"V_Complete_Task\", 'C'));\n "}, {"sha": "f3708fde71000060ef7d4ca519edf901d5714aeb", "filename": "gcc/ada/libgnarl/s-tasuti.adb", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c899d4bafcad17c7d493123cdf75ce4f54e0f8c1/gcc%2Fada%2Flibgnarl%2Fs-tasuti.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c899d4bafcad17c7d493123cdf75ce4f54e0f8c1/gcc%2Fada%2Flibgnarl%2Fs-tasuti.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-tasuti.adb?ref=c899d4bafcad17c7d493123cdf75ce4f54e0f8c1", "patch": "@@ -56,7 +56,8 @@ package body System.Tasking.Utilities is\n    -- Abort_One_Task --\n    --------------------\n \n-   --  Similar to Locked_Abort_To_Level (Self_ID, T, 0), but:\n+   --  Similar to Locked_Abort_To_Level (Self_ID, T, Level_Completed_Task),\n+   --  but:\n    --    (1) caller should be holding no locks except RTS_Lock when Single_Lock\n    --    (2) may be called for tasks that have not yet been activated\n    --    (3) always aborts whole task\n@@ -72,7 +73,8 @@ package body System.Tasking.Utilities is\n          Cancel_Queued_Entry_Calls (T);\n \n       elsif T.Common.State /= Terminated then\n-         Initialization.Locked_Abort_To_Level (Self_ID, T, 0);\n+         Initialization.Locked_Abort_To_Level\n+           (Self_ID, T, Level_Completed_Task);\n       end if;\n \n       Unlock (T);\n@@ -123,11 +125,11 @@ package body System.Tasking.Utilities is\n       C := All_Tasks_List;\n \n       while C /= null loop\n-         if C.Pending_ATC_Level > 0 then\n+         if C.Pending_ATC_Level > Level_Completed_Task then\n             P := C.Common.Parent;\n \n             while P /= null loop\n-               if P.Pending_ATC_Level = 0 then\n+               if P.Pending_ATC_Level = Level_Completed_Task then\n                   Abort_One_Task (Self_Id, C);\n                   exit;\n                end if;\n@@ -204,23 +206,24 @@ package body System.Tasking.Utilities is\n \n    procedure Exit_One_ATC_Level (Self_ID : Task_Id) is\n    begin\n+      pragma Assert (Self_ID.ATC_Nesting_Level > Level_No_ATC_Occuring);\n+\n       Self_ID.ATC_Nesting_Level := Self_ID.ATC_Nesting_Level - 1;\n \n       pragma Debug\n         (Debug.Trace (Self_ID, \"EOAL: exited to ATC level: \" &\n          ATC_Level'Image (Self_ID.ATC_Nesting_Level), 'A'));\n \n-      pragma Assert (Self_ID.ATC_Nesting_Level >= 1);\n+      if Self_ID.Pending_ATC_Level < Level_No_Pending_Abort then\n \n-      if Self_ID.Pending_ATC_Level < ATC_Level_Infinity then\n          if Self_ID.Pending_ATC_Level = Self_ID.ATC_Nesting_Level then\n-            Self_ID.Pending_ATC_Level := ATC_Level_Infinity;\n+            Self_ID.Pending_ATC_Level := Level_No_Pending_Abort;\n             Self_ID.Aborting := False;\n          else\n             --  Force the next Undefer_Abort to re-raise Abort_Signal\n \n             pragma Assert\n-             (Self_ID.Pending_ATC_Level < Self_ID.ATC_Nesting_Level);\n+              (Self_ID.Pending_ATC_Level < Self_ID.ATC_Nesting_Level);\n \n             if Self_ID.Aborting then\n                Self_ID.ATC_Hack := True;"}, {"sha": "72d1ccc0dc313b916e87461cbe5dafd2cbbd5735", "filename": "gcc/ada/libgnarl/s-tasuti.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c899d4bafcad17c7d493123cdf75ce4f54e0f8c1/gcc%2Fada%2Flibgnarl%2Fs-tasuti.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c899d4bafcad17c7d493123cdf75ce4f54e0f8c1/gcc%2Fada%2Flibgnarl%2Fs-tasuti.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-tasuti.ads?ref=c899d4bafcad17c7d493123cdf75ce4f54e0f8c1", "patch": "@@ -111,7 +111,8 @@ package System.Tasking.Utilities is\n    --  The effect is to exit one level of ATC nesting.\n \n    procedure Abort_One_Task (Self_ID : Task_Id; T : Task_Id);\n-   --  Similar to Locked_Abort_To_Level (Self_ID, T, 0), but:\n+   --  Similar to Locked_Abort_To_Level (Self_ID, T, Level_Completed_Task),\n+   --  but:\n    --    (1) caller should be holding no locks\n    --    (2) may be called for tasks that have not yet been activated\n    --    (3) always aborts whole task"}, {"sha": "bb74751065939877d8a996525aaac90af00d6eb1", "filename": "gcc/ada/libgnarl/s-tposen.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c899d4bafcad17c7d493123cdf75ce4f54e0f8c1/gcc%2Fada%2Flibgnarl%2Fs-tposen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c899d4bafcad17c7d493123cdf75ce4f54e0f8c1/gcc%2Fada%2Flibgnarl%2Fs-tposen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-tposen.adb?ref=c899d4bafcad17c7d493123cdf75ce4f54e0f8c1", "patch": "@@ -341,7 +341,8 @@ package body System.Tasking.Protected_Objects.Single_Entry is\n       Uninterpreted_Data : System.Address)\n    is\n       Self_Id    : constant Task_Id := STPO.Self;\n-      Entry_Call : Entry_Call_Record renames Self_Id.Entry_Calls (1);\n+      Entry_Call : Entry_Call_Record renames\n+        Self_Id.Entry_Calls (Self_Id.Entry_Calls'First);\n    begin\n       --  If pragma Detect_Blocking is active then Program_Error must be\n       --  raised if this potentially blocking operation is called from a"}]}