{"sha": "2fdb5a23a3a65f949de21bdc3256a72029fd290d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmZkYjVhMjNhM2E2NWY5NDlkZTIxYmRjMzI1NmE3MjAyOWZkMjkwZA==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2018-04-13T08:51:47Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2018-04-13T08:51:47Z"}, "message": "re PR target/71991 (Inconsistency for __attribute__ ((__always_inline__)) among LTO and non-LTO compilation)\n\n\n\tPR lto/71991\n\t* config/i386/i386.c (ix86_can_inline_p): Allow safe transitions for\n\talways inline.\n\t* gcc.target/i386/pr71991.c: New testcase.\n\nFrom-SVN: r259367", "tree": {"sha": "c91a56ebf185ae872ccb52b68b6ff7a9d7d0594f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c91a56ebf185ae872ccb52b68b6ff7a9d7d0594f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2fdb5a23a3a65f949de21bdc3256a72029fd290d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fdb5a23a3a65f949de21bdc3256a72029fd290d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fdb5a23a3a65f949de21bdc3256a72029fd290d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fdb5a23a3a65f949de21bdc3256a72029fd290d/comments", "author": null, "committer": null, "parents": [{"sha": "fdd332545cacd845162103bf9855c4605be73584", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdd332545cacd845162103bf9855c4605be73584", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdd332545cacd845162103bf9855c4605be73584"}], "stats": {"total": 48, "additions": 45, "deletions": 3}, "files": [{"sha": "bc3a749d7b753c7d0b411e187c4a72bbbccf19ab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fdb5a23a3a65f949de21bdc3256a72029fd290d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fdb5a23a3a65f949de21bdc3256a72029fd290d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2fdb5a23a3a65f949de21bdc3256a72029fd290d", "patch": "@@ -1,3 +1,9 @@\n+2018-04-13  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR lto/71991\n+\t* config/i386/i386.c (ix86_can_inline_p): Allow safe transitions for\n+\talways inline.\n+\n 2018-04-13  Martin Liska  <mliska@suse.cz>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "99ac84e9ed4c4a4df3f2e1751414bdf5a22433a0", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fdb5a23a3a65f949de21bdc3256a72029fd290d/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fdb5a23a3a65f949de21bdc3256a72029fd290d/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=2fdb5a23a3a65f949de21bdc3256a72029fd290d", "patch": "@@ -5766,6 +5766,19 @@ ix86_can_inline_p (tree caller, tree callee)\n {\n   tree caller_tree = DECL_FUNCTION_SPECIFIC_TARGET (caller);\n   tree callee_tree = DECL_FUNCTION_SPECIFIC_TARGET (callee);\n+\n+  /* Changes of those flags can be tolerated for always inlines. Lets hope\n+     user knows what he is doing.  */\n+  const unsigned HOST_WIDE_INT always_inline_safe_mask\n+\t = (MASK_USE_8BIT_IDIV | MASK_ACCUMULATE_OUTGOING_ARGS\n+\t    | MASK_NO_ALIGN_STRINGOPS | MASK_AVX256_SPLIT_UNALIGNED_LOAD\n+\t    | MASK_AVX256_SPLIT_UNALIGNED_STORE | MASK_CLD\n+\t    | MASK_NO_FANCY_MATH_387 | MASK_IEEE_FP | MASK_INLINE_ALL_STRINGOPS\n+\t    | MASK_INLINE_STRINGOPS_DYNAMICALLY | MASK_RECIP | MASK_STACK_PROBE\n+\t    | MASK_STV | MASK_TLS_DIRECT_SEG_REFS | MASK_VZEROUPPER\n+\t    | MASK_NO_PUSH_ARGS | MASK_OMIT_LEAF_FRAME_POINTER);\n+\n+\n   if (!callee_tree)\n     callee_tree = target_option_default_node;\n   if (!caller_tree)\n@@ -5776,6 +5789,10 @@ ix86_can_inline_p (tree caller, tree callee)\n   struct cl_target_option *caller_opts = TREE_TARGET_OPTION (caller_tree);\n   struct cl_target_option *callee_opts = TREE_TARGET_OPTION (callee_tree);\n   bool ret = false;\n+  bool always_inline =\n+     (DECL_DISREGARD_INLINE_LIMITS (callee)\n+      && lookup_attribute (\"always_inline\",\n+\t\t\t   DECL_ATTRIBUTES (callee)));\n \n   /* Callee's isa options should be a subset of the caller's, i.e. a SSE4\n      function can inline a SSE2 function but a SSE2 function can't inline\n@@ -5787,14 +5804,17 @@ ix86_can_inline_p (tree caller, tree callee)\n     ret = false;\n \n   /* See if we have the same non-isa options.  */\n-  else if (caller_opts->x_target_flags != callee_opts->x_target_flags)\n+  else if ((!always_inline\n+\t    && caller_opts->x_target_flags != callee_opts->x_target_flags)\n+\t   || (caller_opts->x_target_flags & ~always_inline_safe_mask)\n+\t       != (callee_opts->x_target_flags & ~always_inline_safe_mask))\n     ret = false;\n \n   /* See if arch, tune, etc. are the same.  */\n   else if (caller_opts->arch != callee_opts->arch)\n     ret = false;\n \n-  else if (caller_opts->tune != callee_opts->tune)\n+  else if (!always_inline && caller_opts->tune != callee_opts->tune)\n     ret = false;\n \n   else if (caller_opts->x_ix86_fpmath != callee_opts->x_ix86_fpmath\n@@ -5807,7 +5827,8 @@ ix86_can_inline_p (tree caller, tree callee)\n \t       (cgraph_node::get (callee))->fp_expressions))\n     ret = false;\n \n-  else if (caller_opts->branch_cost != callee_opts->branch_cost)\n+  else if (!always_inline\n+\t   && caller_opts->branch_cost != callee_opts->branch_cost)\n     ret = false;\n \n   else"}, {"sha": "20b3d2c13f72b672a506948d032dc8a1da9bc8d8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fdb5a23a3a65f949de21bdc3256a72029fd290d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fdb5a23a3a65f949de21bdc3256a72029fd290d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2fdb5a23a3a65f949de21bdc3256a72029fd290d", "patch": "@@ -1,3 +1,8 @@\n+2018-04-13  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR lto/71991\n+\t* gcc.target/i386/pr71991.c: New testcase.\n+\n 2018-04-13  Martin Liska  <mliska@suse.cz>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "9d70a1cb5fcb41b2daf38097b26bd13282e92aeb", "filename": "gcc/testsuite/gcc.target/i386/pr71991.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fdb5a23a3a65f949de21bdc3256a72029fd290d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr71991.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fdb5a23a3a65f949de21bdc3256a72029fd290d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr71991.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr71991.c?ref=2fdb5a23a3a65f949de21bdc3256a72029fd290d", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+static inline __attribute__ ((__always_inline__)) int fn1 () { return 0; }\n+static __attribute__ ((target (\"inline-all-stringops\"))) int fn2 () { fn1 (); }\n+\n+int main()\n+{\n+  fn2();\n+}\n+"}]}