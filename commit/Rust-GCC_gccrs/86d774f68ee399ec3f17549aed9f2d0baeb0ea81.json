{"sha": "86d774f68ee399ec3f17549aed9f2d0baeb0ea81", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODZkNzc0ZjY4ZWUzOTllYzNmMTc1NDlhZWQ5ZjJkMGJhZWIwZWE4MQ==", "commit": {"author": {"name": "Dmitriy Anisimkov", "email": "anisimko@adacore.com", "date": "2020-09-16T12:33:51Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-10-26T08:59:08Z"}, "message": "[Ada] Fix Accept_Socket and Connect_Socket timeout support\n\ngcc/ada/\n\n\t* libgnat/g-socket.adb (Wait_On_Socket): Boolean parameter\n\tFor_Read changed to Event parameter of type\n\tGNAT.Sockets.Poll.Wait_Event_Set.  Implementation is simplified\n\tand based on call to GNAT.Sockets.Poll.Wait now.", "tree": {"sha": "f9f5817965cd82486ee946597b3fda1fe2efb0e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9f5817965cd82486ee946597b3fda1fe2efb0e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/86d774f68ee399ec3f17549aed9f2d0baeb0ea81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86d774f68ee399ec3f17549aed9f2d0baeb0ea81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86d774f68ee399ec3f17549aed9f2d0baeb0ea81", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86d774f68ee399ec3f17549aed9f2d0baeb0ea81/comments", "author": {"login": "anisimkov", "id": 15864134, "node_id": "MDQ6VXNlcjE1ODY0MTM0", "avatar_url": "https://avatars.githubusercontent.com/u/15864134?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anisimkov", "html_url": "https://github.com/anisimkov", "followers_url": "https://api.github.com/users/anisimkov/followers", "following_url": "https://api.github.com/users/anisimkov/following{/other_user}", "gists_url": "https://api.github.com/users/anisimkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/anisimkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anisimkov/subscriptions", "organizations_url": "https://api.github.com/users/anisimkov/orgs", "repos_url": "https://api.github.com/users/anisimkov/repos", "events_url": "https://api.github.com/users/anisimkov/events{/privacy}", "received_events_url": "https://api.github.com/users/anisimkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0481cf5fcfa5c3deb21f6ebfbdf598ea3562732", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0481cf5fcfa5c3deb21f6ebfbdf598ea3562732", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0481cf5fcfa5c3deb21f6ebfbdf598ea3562732"}], "stats": {"total": 75, "additions": 25, "deletions": 50}, "files": [{"sha": "a4e9fd19725f936237b4f05ad16f6b6ea1a513ef", "filename": "gcc/ada/libgnat/g-socket.adb", "status": "modified", "additions": 25, "deletions": 50, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86d774f68ee399ec3f17549aed9f2d0baeb0ea81/gcc%2Fada%2Flibgnat%2Fg-socket.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86d774f68ee399ec3f17549aed9f2d0baeb0ea81/gcc%2Fada%2Flibgnat%2Fg-socket.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fg-socket.adb?ref=86d774f68ee399ec3f17549aed9f2d0baeb0ea81", "patch": "@@ -42,6 +42,8 @@ with GNAT.Sockets.Linker_Options;\n pragma Warnings (Off, GNAT.Sockets.Linker_Options);\n --  Need to include pragma Linker_Options which is platform dependent\n \n+with GNAT.Sockets.Poll;\n+\n with System;               use System;\n with System.Communication; use System.Communication;\n with System.CRTL;          use System.CRTL;\n@@ -252,15 +254,13 @@ package body GNAT.Sockets is\n \n    procedure Wait_On_Socket\n      (Socket   : Socket_Type;\n-      For_Read : Boolean;\n+      Event    : Poll.Wait_Event_Set;\n       Timeout  : Selector_Duration;\n       Selector : access Selector_Type := null;\n       Status   : out Selector_Status);\n    --  Common code for variants of socket operations supporting a timeout:\n-   --  block in Check_Selector on Socket for at most the indicated timeout.\n-   --  If For_Read is True, Socket is added to the read set for this call, else\n-   --  it is added to the write set. If no selector is provided, a local one is\n-   --  created for this call and destroyed prior to returning.\n+   --  block in Poll.Wait on Socket for at most the indicated timeout.\n+   --  Event parameter defines what the Poll.Wait is waiting for.\n \n    type Sockets_Library_Controller is new Ada.Finalization.Limited_Controlled\n      with null record;\n@@ -371,11 +371,11 @@ package body GNAT.Sockets is\n       --  Wait for socket to become available for reading\n \n       Wait_On_Socket\n-        (Socket    => Server,\n-         For_Read  => True,\n-         Timeout   => Timeout,\n-         Selector  => Selector,\n-         Status    => Status);\n+        (Socket   => Server,\n+         Event    => Poll.Input_Event,\n+         Timeout  => Timeout,\n+         Selector => Selector,\n+         Status   => Status);\n \n       --  Accept connection if available\n \n@@ -729,7 +729,7 @@ package body GNAT.Sockets is\n       else\n          Wait_On_Socket\n            (Socket   => Socket,\n-            For_Read => False,\n+            Event    => Poll.Output_Event,\n             Timeout  => Timeout,\n             Selector => Selector,\n             Status   => Status);\n@@ -2016,57 +2016,32 @@ package body GNAT.Sockets is\n \n    procedure Wait_On_Socket\n      (Socket   : Socket_Type;\n-      For_Read : Boolean;\n+      Event    : Poll.Wait_Event_Set;\n       Timeout  : Selector_Duration;\n       Selector : access Selector_Type := null;\n       Status   : out Selector_Status)\n    is\n-      type Local_Selector_Access is access Selector_Type;\n-      for Local_Selector_Access'Storage_Size use Selector_Type'Size;\n-\n-      procedure Unchecked_Free is new Ada.Unchecked_Deallocation\n-        (Selector_Type, Local_Selector_Access);\n+      Fd_Set : Poll.Set := Poll.To_Set (Socket, Event, 2);\n+      --  Socket itself and second place for signaling socket if necessary\n \n-      Local_S : Local_Selector_Access;\n-      S       : Selector_Access;\n-      --  Selector to use for waiting\n-\n-      R_Fd_Set : Socket_Set_Type;\n-      W_Fd_Set : Socket_Set_Type;\n+      Count : Natural;\n+      Index : Natural := 0;\n \n    begin\n-      --  Create selector if not provided by the user\n-\n-      if Selector = null then\n-         Local_S := new Selector_Type;\n-         S := Local_S.all'Unchecked_Access;\n-         Create_Selector (S.all);\n+      --  Add signaling socket if selector defined\n \n-      else\n-         S := Selector.all'Access;\n+      if Selector /= null then\n+         Poll.Append (Fd_Set, Selector.R_Sig_Socket, Poll.Input_Event);\n       end if;\n \n-      if For_Read then\n-         Set (R_Fd_Set, Socket);\n-      else\n-         Set (W_Fd_Set, Socket);\n-      end if;\n+      Poll.Wait (Fd_Set, Timeout, Count);\n \n-      Check_Selector (S.all, R_Fd_Set, W_Fd_Set, Status, Timeout);\n-\n-      if Selector = null then\n-         Close_Selector (S.all);\n-         Unchecked_Free (Local_S);\n+      if Count = 0 then\n+         Status := Expired;\n+      else\n+         Poll.Next (Fd_Set, Index);\n+         Status := (if Index = 1 then Completed else Aborted);\n       end if;\n-\n-   exception\n-      when others =>\n-         Status := Completed;\n-\n-         if Selector = null then\n-            Close_Selector (S.all);\n-            Unchecked_Free (Local_S);\n-         end if;\n    end Wait_On_Socket;\n \n    -----------------"}]}