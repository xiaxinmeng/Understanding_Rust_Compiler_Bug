{"sha": "f6897b10e150a880ffa7df29d7a2305804a58028", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjY4OTdiMTBlMTUwYTg4MGZmYTdkZjI5ZDdhMjMwNTgwNGE1ODAyOA==", "commit": {"author": {"name": "Stan Shebs", "email": "shebs@apple.com", "date": "2001-07-07T01:07:22Z"}, "committer": {"name": "Stan Shebs", "email": "shebs@gcc.gnu.org", "date": "2001-07-07T01:07:22Z"}, "message": "target.h (targetm): Rename global from \"target\", so as not to conflict with local variables.\n\n        * target.h (targetm): Rename global from \"target\", so as not to\n        conflict with local variables.\n        * c-decl.c: Ditto.\n        * c-typeck.c: Ditto.\n        * final.c: Ditto.\n        * tree.c: Ditto.\n        * cp/decl.c: Ditto.\n        * cp/decl2.c: Ditto.\n        * cp/typeck.c: Ditto.\n        * 1750a/1750a.c: Ditto.\n        * a29k/a29k.c: Ditto.\n        * arc/arc.c: Ditto.\n        * arm/arm.c: Ditto.\n        * avr/avr.c: Ditto.\n        * clipper/clipper.c: Ditto.\n        * convex/convex.c: Ditto.\n        * d30v/d30v.c: Ditto.\n        * dsp16xx/dsp16xx.c: Ditto.\n        * elxsi/elxsi.c: Ditto.\n        * fr30/fr30.c: Ditto.\n        * h8300/h8300.c: Ditto.\n        * i370/i370.c: Ditto.\n        * i386/i386.c: Ditto.\n        * i860/i860.c: Ditto.\n        * i960/i960.c: Ditto.\n        * ia64/ia64.c: Ditto.\n        * m32r/m32r.c: Ditto.\n        * m68hc11/m68hc11.c: Ditto.\n        * m68k/m68k.c: Ditto.\n        * m88k/m88k.c: Ditto.\n        * mips/mips.c: Ditto.\n        * ns32k/ns32k.c: Ditto.\n        * pa/pa.c: Ditto.\n        * pdp11/pdp11.c: Ditto.\n        * romp/romp.c: Ditto.\n        * rs6000/rs6000.c: Ditto.\n        * sh/sh.c: Ditto.\n        * sparc/sparc.c: Ditto.\n        * vax/vax.c: Ditto.\n        * we32k/we32k.c: Ditto.\n        * doc/tm.texi: Update the manual to match.\n\nFrom-SVN: r43831", "tree": {"sha": "ef8e84e2bb302fc01ff8f0c9701e00ecd440d691", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef8e84e2bb302fc01ff8f0c9701e00ecd440d691"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6897b10e150a880ffa7df29d7a2305804a58028", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6897b10e150a880ffa7df29d7a2305804a58028", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6897b10e150a880ffa7df29d7a2305804a58028", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6897b10e150a880ffa7df29d7a2305804a58028/comments", "author": null, "committer": null, "parents": [{"sha": "84fc8b47f39bdb9b21dbb2eacb85197920bb9f5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84fc8b47f39bdb9b21dbb2eacb85197920bb9f5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84fc8b47f39bdb9b21dbb2eacb85197920bb9f5b"}], "stats": {"total": 182, "additions": 113, "deletions": 69}, "files": [{"sha": "933f4b848ad95248f7b19fa4740a088c712096b0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f6897b10e150a880ffa7df29d7a2305804a58028", "patch": "@@ -1,3 +1,47 @@\n+2001-07-06  Stan Shebs  <shebs@apple.com>\n+\n+\t* target.h (targetm): Rename global from \"target\", so as not to\n+\tconflict with local variables.\n+\t* c-decl.c: Ditto.\n+\t* c-typeck.c: Ditto.\n+\t* final.c: Ditto.\n+\t* tree.c: Ditto.\n+\t* cp/decl.c: Ditto.\n+\t* cp/decl2.c: Ditto.\n+\t* cp/typeck.c: Ditto.\n+\t* 1750a/1750a.c: Ditto.\n+\t* a29k/a29k.c: Ditto.\n+\t* arc/arc.c: Ditto.\n+\t* arm/arm.c: Ditto.\n+\t* avr/avr.c: Ditto.\n+\t* clipper/clipper.c: Ditto.\n+\t* convex/convex.c: Ditto.\n+\t* d30v/d30v.c: Ditto.\n+\t* dsp16xx/dsp16xx.c: Ditto.\n+\t* elxsi/elxsi.c: Ditto.\n+\t* fr30/fr30.c: Ditto.\n+\t* h8300/h8300.c: Ditto.\n+\t* i370/i370.c: Ditto.\n+\t* i386/i386.c: Ditto.\n+\t* i860/i860.c: Ditto.\n+\t* i960/i960.c: Ditto.\n+\t* ia64/ia64.c: Ditto.\n+\t* m32r/m32r.c: Ditto.\n+\t* m68hc11/m68hc11.c: Ditto.\n+\t* m68k/m68k.c: Ditto.\n+\t* m88k/m88k.c: Ditto.\n+\t* mips/mips.c: Ditto.\n+\t* ns32k/ns32k.c: Ditto.\n+\t* pa/pa.c: Ditto.\n+\t* pdp11/pdp11.c: Ditto.\n+\t* romp/romp.c: Ditto.\n+\t* rs6000/rs6000.c: Ditto.\n+\t* sh/sh.c: Ditto.\n+\t* sparc/sparc.c: Ditto.\n+\t* vax/vax.c: Ditto.\n+\t* we32k/we32k.c: Ditto.\n+\t* doc/tm.texi: Update the manual to match.\n+\n 2001-07-06  Richard Henderson  <rth@redhat.com>\n \n \t* except.h (MUST_USE_SJLJ_EXCEPTIONS): Examine the value of"}, {"sha": "deb47d174a6e4fb154d5894f0426e6d9d3e21812", "filename": "gcc/c-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=f6897b10e150a880ffa7df29d7a2305804a58028", "patch": "@@ -1404,7 +1404,7 @@ duplicate_decls (newdecl, olddecl, different_binding_level)\n \n   if (DECL_P (olddecl))\n     DECL_MACHINE_ATTRIBUTES (newdecl)\n-      = (*target.merge_decl_attributes) (olddecl, newdecl);\n+      = (*targetm.merge_decl_attributes) (olddecl, newdecl);\n \n   if (TREE_CODE (newtype) == ERROR_MARK\n       || TREE_CODE (oldtype) == ERROR_MARK)"}, {"sha": "9e50c37da69f4a95abeec5e332f9663140848ae5", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=f6897b10e150a880ffa7df29d7a2305804a58028", "patch": "@@ -206,7 +206,7 @@ common_type (t1, t2)\n     return t1;\n \n   /* Merge the attributes.  */\n-  attributes = (*target.merge_type_attributes) (t1, t2);\n+  attributes = (*targetm.merge_type_attributes) (t1, t2);\n \n   /* Treat an enum type as the unsigned integer type of the same width.  */\n \n@@ -484,7 +484,7 @@ comptypes (type1, type2)\n     return 1;\n \n   /* 1 if no need for warning yet, 2 if warning cause has been seen.  */\n-  if (! (attrval = (*target.comp_type_attributes) (t1, t2)))\n+  if (! (attrval = (*targetm.comp_type_attributes) (t1, t2)))\n      return 0;\n \n   /* 1 if no need for warning yet, 2 if warning cause has been seen.  */"}, {"sha": "c1412bfb034132940f963f1124a881fa67d53961", "filename": "gcc/config/1750a/1750a.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2F1750a%2F1750a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2F1750a%2F1750a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2F1750a%2F1750a.c?ref=f6897b10e150a880ffa7df29d7a2305804a58028", "patch": "@@ -56,7 +56,7 @@ static void output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n #undef TARGET_ASM_FUNCTION_EPILOGUE\n #define TARGET_ASM_FUNCTION_EPILOGUE output_function_epilogue\n \n-struct gcc_target target = TARGET_INITIALIZER;\n+struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Generate the assembly code for function entry.  FILE is a stdio\n    stream to output the code to.  SIZE is an int: how many units of"}, {"sha": "896f162fb7b918fd54ced6123accd35654f7f786", "filename": "gcc/config/a29k/a29k.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Fa29k%2Fa29k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Fa29k%2Fa29k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fa29k%2Fa29k.c?ref=f6897b10e150a880ffa7df29d7a2305804a58028", "patch": "@@ -100,7 +100,7 @@ int a29k_compare_fp_p;\n #undef TARGET_ASM_FUNCTION_EPILOGUE\n #define TARGET_ASM_FUNCTION_EPILOGUE output_function_epilogue\n \n-struct gcc_target target = TARGET_INITIALIZER;\n+struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Returns 1 if OP is a 8-bit constant. */\n "}, {"sha": "d90aec9e7fb2f91f0e7bba2e7f5d88f61b2f45f8", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=f6897b10e150a880ffa7df29d7a2305804a58028", "patch": "@@ -148,7 +148,7 @@ static rtx alpha_emit_xfloating_compare\n \f\n /* Initialize the GCC target structure.  */\n \n-struct gcc_target target = TARGET_INITIALIZER;\n+struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Parse target option strings. */\n "}, {"sha": "7e309f892cc6460e333c32125f4875c532540077", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=f6897b10e150a880ffa7df29d7a2305804a58028", "patch": "@@ -99,7 +99,7 @@ static void arc_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n #undef TARGET_VALID_DECL_ATTRIBUTE\n #define TARGET_VALID_DECL_ATTRIBUTE arc_valid_decl_attribute\n \n-struct gcc_target target = TARGET_INITIALIZER;\n+struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Called by OVERRIDE_OPTIONS to initialize various things.  */\n "}, {"sha": "48f0c5fb33db22c1ddbbc552182d21881287893f", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=f6897b10e150a880ffa7df29d7a2305804a58028", "patch": "@@ -148,7 +148,7 @@ static void\t arm_set_default_type_attributes\tPARAMS ((tree));\n #undef TARGET_SET_DEFAULT_TYPE_ATTRIBUTES\n #define TARGET_SET_DEFAULT_TYPE_ATTRIBUTES arm_set_default_type_attributes\n \n-struct gcc_target target = TARGET_INITIALIZER;\n+struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Obstack for minipool constant handling.  */\n static struct obstack minipool_obstack;"}, {"sha": "303be94a88d4a9e79e50ad55a5c5932cb5d2934c", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=f6897b10e150a880ffa7df29d7a2305804a58028", "patch": "@@ -183,7 +183,7 @@ int avr_case_values_threshold = 30000;\n #undef TARGET_VALID_TYPE_ATTRIBUTE\n #define TARGET_VALID_TYPE_ATTRIBUTE avr_valid_type_attribute\n \n-struct gcc_target target = TARGET_INITIALIZER;\n+struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n void\n avr_override_options ()"}, {"sha": "6f75aa8709b619eae4ef5b51a03838b8c92c292a", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=f6897b10e150a880ffa7df29d7a2305804a58028", "patch": "@@ -195,7 +195,7 @@ static int c4x_valid_type_attribute_p PARAMS ((tree, tree, tree, tree));\n #undef TARGET_VALID_TYPE_ATTRIBUTE\n #define TARGET_VALID_TYPE_ATTRIBUTE c4x_valid_type_attribute_p\n \n-struct gcc_target target = TARGET_INITIALIZER;\n+struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Called to register all of our global variables with the garbage\n    collector.  */"}, {"sha": "76320ff2076271c4ebbc4c0ad89bd70d9fcaf8ec", "filename": "gcc/config/clipper/clipper.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Fclipper%2Fclipper.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Fclipper%2Fclipper.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fclipper%2Fclipper.c?ref=f6897b10e150a880ffa7df29d7a2305804a58028", "patch": "@@ -55,7 +55,7 @@ static int frame_size;\n #undef TARGET_ASM_FUNCTION_EPILOGUE\n #define TARGET_ASM_FUNCTION_EPILOGUE clipper_output_function_epilogue\n \n-struct gcc_target target = TARGET_INITIALIZER;\n+struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Compute size of a clipper stack frame where 'lsize' is the required\n    space for local variables.  */"}, {"sha": "a0e0987b88e700227a0e9d40a4a8e091bb9c8d5b", "filename": "gcc/config/convex/convex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Fconvex%2Fconvex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Fconvex%2Fconvex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fconvex%2Fconvex.c?ref=f6897b10e150a880ffa7df29d7a2305804a58028", "patch": "@@ -73,7 +73,7 @@ static void convex_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n #undef TARGET_ASM_FUNCTION_EPILOGUE\n #define TARGET_ASM_FUNCTION_EPILOGUE convex_output_function_epilogue\n \n-struct gcc_target target = TARGET_INITIALIZER;\n+struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Generate the assembly code for function entry.  FILE is a stdio\n    stream to output the code to.  SIZE is an int: how many units of"}, {"sha": "b0709e82f866c62039eb72269b510a8840aedf48", "filename": "gcc/config/d30v/d30v.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Fd30v%2Fd30v.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Fd30v%2Fd30v.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v.c?ref=f6897b10e150a880ffa7df29d7a2305804a58028", "patch": "@@ -87,7 +87,7 @@ enum reg_class reg_class_from_letter[256];\n #undef TARGET_ASM_FUNCTION_EPILOGUE\n #define TARGET_ASM_FUNCTION_EPILOGUE d30v_output_function_epilogue\n \n-struct gcc_target target = TARGET_INITIALIZER;\n+struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Sometimes certain combinations of command options do not make\n    sense on a particular target machine.  You can define a macro"}, {"sha": "32402623ff4e27550a67172d33da056b9840996c", "filename": "gcc/config/dsp16xx/dsp16xx.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.c?ref=f6897b10e150a880ffa7df29d7a2305804a58028", "patch": "@@ -155,7 +155,7 @@ static void dsp16xx_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n #undef TARGET_ASM_FUNCTION_EPILOGUE\n #define TARGET_ASM_FUNCTION_EPILOGUE dsp16xx_output_function_epilogue\n \n-struct gcc_target target = TARGET_INITIALIZER;\n+struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n int \n hard_regno_mode_ok (regno, mode)"}, {"sha": "0a0e77bf6bf782e43f28952bebd9cb36358c2270", "filename": "gcc/config/elxsi/elxsi.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Felxsi%2Felxsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Felxsi%2Felxsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Felxsi%2Felxsi.c?ref=f6897b10e150a880ffa7df29d7a2305804a58028", "patch": "@@ -47,7 +47,7 @@ static void elxsi_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n #undef TARGET_ASM_FUNCTION_EPILOGUE\n #define TARGET_ASM_FUNCTION_EPILOGUE elxsi_output_function_epilogue\n \n-struct gcc_target target = TARGET_INITIALIZER;\n+struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Generate the assembly code for function entry.  FILE is a stdio\n    stream to output the code to.  SIZE is an int: how many units of"}, {"sha": "3adcb09fb7ae170745a81ccd88127c063a93711c", "filename": "gcc/config/fr30/fr30.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Ffr30%2Ffr30.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Ffr30%2Ffr30.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.c?ref=f6897b10e150a880ffa7df29d7a2305804a58028", "patch": "@@ -139,7 +139,7 @@ static struct fr30_frame_info \tzero_frame_info;\n \f\n /* Initialize the GCC target structure.  */\n \n-struct gcc_target target = TARGET_INITIALIZER;\n+struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Returns the number of bytes offset between FROM_REG and TO_REG\n    for the current function.  As a side effect it fills in the "}, {"sha": "0d22818f2f8b94bfca3831f60b6617def6d4f4d6", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=f6897b10e150a880ffa7df29d7a2305804a58028", "patch": "@@ -105,7 +105,7 @@ const char *h8_push_op, *h8_pop_op, *h8_mov_op;\n #undef TARGET_ASM_FUNCTION_EPILOGUE\n #define TARGET_ASM_FUNCTION_EPILOGUE h8300_output_function_epilogue\n \n-struct gcc_target target = TARGET_INITIALIZER;\n+struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Initialize various cpu specific globals at start up.  */\n "}, {"sha": "8dd229f268d6d2eceb00658fd50561c46c503596", "filename": "gcc/config/i370/i370.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Fi370%2Fi370.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Fi370%2Fi370.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fi370.c?ref=f6897b10e150a880ffa7df29d7a2305804a58028", "patch": "@@ -294,7 +294,7 @@ static const unsigned char ebcasc[256] =\n #undef TARGET_ASM_FUNCTION_EPILOGUE\n #define TARGET_ASM_FUNCTION_EPILOGUE i370_output_function_epilogue\n \n-struct gcc_target target = TARGET_INITIALIZER;\n+struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Map characters from one character set to another.\n    C is the character to be translated.  */"}, {"sha": "69aab1a18fea53293c659ad7a7c46788fba34507", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=f6897b10e150a880ffa7df29d7a2305804a58028", "patch": "@@ -631,7 +631,7 @@ static int ix86_comp_type_attributes PARAMS ((tree, tree));\n #  define TARGET_ASM_FUNCTION_PROLOGUE ix86_osf_output_function_prologue\n #endif\n \n-struct gcc_target target = TARGET_INITIALIZER;\n+struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Sometimes certain combinations of command options do not make\n    sense on a particular target machine.  You can define a macro"}, {"sha": "ead357ac24cec5cc5933e365e4866b1a3bc5821d", "filename": "gcc/config/i860/i860.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Fi860%2Fi860.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Fi860%2Fi860.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860.c?ref=f6897b10e150a880ffa7df29d7a2305804a58028", "patch": "@@ -70,7 +70,7 @@ rtx i860_compare_op0, i860_compare_op1;\n #undef TARGET_ASM_FUNCTION_EPILOGUE\n #define TARGET_ASM_FUNCTION_EPILOGUE i860_output_function_epilogue\n \n-struct gcc_target target = TARGET_INITIALIZER;\n+struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Return non-zero if this pattern, can be evaluated safely, even if it\n    was not asked for.  */"}, {"sha": "7cdb5aa41ff0d4ed8d356e3030d08cdd24f78f19", "filename": "gcc/config/i960/i960.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Fi960%2Fi960.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Fi960%2Fi960.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.c?ref=f6897b10e150a880ffa7df29d7a2305804a58028", "patch": "@@ -98,7 +98,7 @@ static int ret_label = 0;\n #undef TARGET_ASM_FUNCTION_EPILOGUE\n #define TARGET_ASM_FUNCTION_EPILOGUE i960_output_function_epilogue\n \n-struct gcc_target target = TARGET_INITIALIZER;\n+struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Initialize variables before compiling any files.  */\n "}, {"sha": "2588612ca7e2343e7e1e73948fd66c31281522ea", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=f6897b10e150a880ffa7df29d7a2305804a58028", "patch": "@@ -149,7 +149,7 @@ static void ia64_function_epilogue PARAMS((FILE *, HOST_WIDE_INT));\n #undef TARGET_ASM_FUNCTION_EPILOGUE\n #define TARGET_ASM_FUNCTION_EPILOGUE ia64_output_function_epilogue\n \n-struct gcc_target target = TARGET_INITIALIZER;\n+struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Return 1 if OP is a valid operand for the MEM of a CALL insn.  */\n "}, {"sha": "006e7beb127048bd3f3795583a4bd7b40d287463", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=f6897b10e150a880ffa7df29d7a2305804a58028", "patch": "@@ -76,7 +76,7 @@ static void  m32r_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n #undef TARGET_ASM_FUNCTION_EPILOGUE\n #define TARGET_ASM_FUNCTION_EPILOGUE m32r_output_function_epilogue\n \n-struct gcc_target target = TARGET_INITIALIZER;\n+struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Called by OVERRIDE_OPTIONS to initialize various things.  */\n "}, {"sha": "201910956a5a5bd13daf6b6938e478e7a5cb5a20", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=f6897b10e150a880ffa7df29d7a2305804a58028", "patch": "@@ -213,7 +213,7 @@ static int nb_soft_regs;\n #undef TARGET_ASM_FUNCTION_EPILOGUE\n #define TARGET_ASM_FUNCTION_EPILOGUE m68hc11_output_function_epilogue\n \n-struct gcc_target target = TARGET_INITIALIZER;\n+struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n int\n m68hc11_override_options ()"}, {"sha": "ffe7ed922630327fc45aaa97c239e841e59669c9", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=f6897b10e150a880ffa7df29d7a2305804a58028", "patch": "@@ -86,7 +86,7 @@ int m68k_last_compare_had_fp_operands;\n #undef TARGET_ASM_FUNCTION_EPILOGUE\n #define TARGET_ASM_FUNCTION_EPILOGUE m68k_output_function_epilogue\n \n-struct gcc_target target = TARGET_INITIALIZER;\n+struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Sometimes certain combinations of command options do not make\n    sense on a particular target machine.  You can define a macro"}, {"sha": "80867f2df068ba109e930280697c93dccea6f0db", "filename": "gcc/config/m88k/m88k.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Fm88k%2Fm88k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Fm88k%2Fm88k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.c?ref=f6897b10e150a880ffa7df29d7a2305804a58028", "patch": "@@ -72,7 +72,7 @@ static void m88k_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n #undef TARGET_ASM_FUNCTION_EPILOGUE\n #define TARGET_ASM_FUNCTION_EPILOGUE m88k_output_function_epilogue\n \n-struct gcc_target target = TARGET_INITIALIZER;\n+struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Determine what instructions are needed to manufacture the integer VALUE\n    in the given MODE.  */"}, {"sha": "e1f0f3382e4e9927648457267b003807d8d6aae1", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=f6897b10e150a880ffa7df29d7a2305804a58028", "patch": "@@ -142,7 +142,7 @@ static int        mcore_valid_decl_attribute   PARAMS ((tree, tree,\n #undef TARGET_VALID_DECL_ATTRIBUTE\n #define TARGET_VALID_DECL_ATTRIBUTE mcore_valid_decl_attribute\n \n-struct gcc_target target = TARGET_INITIALIZER;\n+struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Adjust the stack and return the number of bytes taken to do it.  */\n static void"}, {"sha": "e07f246b5cbf78ca77c784d59119a5f97345e362", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=f6897b10e150a880ffa7df29d7a2305804a58028", "patch": "@@ -446,7 +446,7 @@ enum reg_class mips_char_to_class[256] =\n #undef TARGET_ASM_FUNCTION_EPILOGUE\n #define TARGET_ASM_FUNCTION_EPILOGUE mips_output_function_epilogue\n \n-struct gcc_target target = TARGET_INITIALIZER;\n+struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Return truth value of whether OP can be used as an operands\n    where a register or 16 bit unsigned integer is needed.  */"}, {"sha": "45432ac2a2c764c5655661b9692ba923250e22fb", "filename": "gcc/config/mn10200/mn10200.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Fmn10200%2Fmn10200.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Fmn10200%2Fmn10200.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10200%2Fmn10200.c?ref=f6897b10e150a880ffa7df29d7a2305804a58028", "patch": "@@ -68,7 +68,7 @@ static int out_of_line_epilogue;\n \f\n /* Initialize the GCC target structure.  */\n \n-struct gcc_target target = TARGET_INITIALIZER;\n+struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Indicate this file was compiled by gcc and what optimization\n    level was used.  */"}, {"sha": "decbe6d5bf4803281f978277693862dbb6ae235a", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=f6897b10e150a880ffa7df29d7a2305804a58028", "patch": "@@ -53,7 +53,7 @@ Boston, MA 02111-1307, USA.  */\n \f\n /* Initialize the GCC target structure.  */\n \n-struct gcc_target target = TARGET_INITIALIZER;\n+struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n void\n asm_file_start (file)"}, {"sha": "9ad3b0cb495036006e8a886db10f202b0c767dd0", "filename": "gcc/config/ns32k/ns32k.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Fns32k%2Fns32k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Fns32k%2Fns32k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.c?ref=f6897b10e150a880ffa7df29d7a2305804a58028", "patch": "@@ -77,7 +77,7 @@ static void ns32k_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n #undef TARGET_ASM_FUNCTION_EPILOGUE\n #define TARGET_ASM_FUNCTION_EPILOGUE ns32k_output_function_epilogue\n \n-struct gcc_target target = TARGET_INITIALIZER;\n+struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Generate the assembly code for function entry.  FILE is a stdio\n    stream to output the code to.  SIZE is an int: how many units of"}, {"sha": "36aad1b5b7a33473229bbb94ed764516dcd3b4bf", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=f6897b10e150a880ffa7df29d7a2305804a58028", "patch": "@@ -116,7 +116,7 @@ int n_deferred_plabels = 0;\n #undef TARGET_ASM_FUNCTION_EPILOGUE\n #define TARGET_ASM_FUNCTION_EPILOGUE pa_output_function_epilogue\n \n-struct gcc_target target = TARGET_INITIALIZER;\n+struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n void\n override_options ()"}, {"sha": "97d23fead5d725e67aac7b46911f66e5abd94be4", "filename": "gcc/config/pdp11/pdp11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.c?ref=f6897b10e150a880ffa7df29d7a2305804a58028", "patch": "@@ -61,7 +61,7 @@ static void pdp11_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n #undef TARGET_ASM_FUNCTION_EPILOGUE\n #define TARGET_ASM_FUNCTION_EPILOGUE pdp11_output_function_epilogue\n \n-struct gcc_target target = TARGET_INITIALIZER;\n+struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Nonzero if OP is a valid second operand for an arithmetic insn.  */\n "}, {"sha": "02ef9a25acf6cbabd7c9a4fb1f5014cb82192767", "filename": "gcc/config/pj/pj.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Fpj%2Fpj.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Fpj%2Fpj.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpj%2Fpj.c?ref=f6897b10e150a880ffa7df29d7a2305804a58028", "patch": "@@ -127,7 +127,7 @@ int pj_stuff_on_line;\n \f\n /* Initialize the GCC target structure.  */\n \n-struct gcc_target target = TARGET_INITIALIZER;\n+struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* printf to the asm_out_file, with special format control characters\n    for decoding operands.  "}, {"sha": "27a17061f9860680045bc3ec3d446fcd3b2ddb21", "filename": "gcc/config/romp/romp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Fromp%2Fromp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Fromp%2Fromp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fromp%2Fromp.c?ref=f6897b10e150a880ffa7df29d7a2305804a58028", "patch": "@@ -59,7 +59,7 @@ static void romp_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n #undef TARGET_ASM_FUNCTION_EPILOGUE\n #define TARGET_ASM_FUNCTION_EPILOGUE romp_output_function_epilogue\n \n-struct gcc_target target = TARGET_INITIALIZER;\n+struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Return 1 if the insn using CC0 set by INSN does not contain\n    any unsigned tests applied to the condition codes."}, {"sha": "21c9f1810e2bd282d62298829368f2e1d472703a", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=f6897b10e150a880ffa7df29d7a2305804a58028", "patch": "@@ -175,7 +175,7 @@ static char alt_reg_names[][8] =\n #undef TARGET_ASM_FUNCTION_EPILOGUE\n #define TARGET_ASM_FUNCTION_EPILOGUE rs6000_output_function_epilogue\n \n-struct gcc_target target = TARGET_INITIALIZER;\n+struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Override command line options.  Mostly we process the processor\n    type and sometimes adjust other TARGET_ options.  */"}, {"sha": "db8de6574cca40089df2d14eb378c6190619156e", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=f6897b10e150a880ffa7df29d7a2305804a58028", "patch": "@@ -163,7 +163,7 @@ static void sh_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n #undef TARGET_ASM_FUNCTION_EPILOGUE\n #define TARGET_ASM_FUNCTION_EPILOGUE sh_output_function_epilogue\n \n-struct gcc_target target = TARGET_INITIALIZER;\n+struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Print the operand address in x to the stream.  */\n "}, {"sha": "197242d1081586cee589fff300e0dcd64753557c", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=f6897b10e150a880ffa7df29d7a2305804a58028", "patch": "@@ -192,7 +192,7 @@ enum processor_type sparc_cpu;\n #undef TARGET_ASM_FUNCTION_EPILOGUE\n #define TARGET_ASM_FUNCTION_EPILOGUE sparc_output_function_epilogue\n \n-struct gcc_target target = TARGET_INITIALIZER;\n+struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Validate and override various options, and do some machine dependent\n    initialization.  */"}, {"sha": "10f33e20ecea28ac9a83baa9b010ff9cb50046c4", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=f6897b10e150a880ffa7df29d7a2305804a58028", "patch": "@@ -86,7 +86,7 @@ static int v850_interrupt_p = FALSE;\n #undef TARGET_VALID_DECL_ATTRIBUTE\n #define TARGET_VALID_DECL_ATTRIBUTE v850_valid_decl_attribute\n \n-struct gcc_target target = TARGET_INITIALIZER;\n+struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Sometimes certain combinations of command options do not make\n    sense on a particular target machine.  You can define a macro"}, {"sha": "57f14e80a72fc3cca27cff1216000983e15ae6f1", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=f6897b10e150a880ffa7df29d7a2305804a58028", "patch": "@@ -42,7 +42,7 @@ static void vax_output_function_prologue PARAMS ((FILE *, HOST_WIDE_INT));\n #undef TARGET_ASM_FUNCTION_PROLOGUE\n #define TARGET_ASM_FUNCTION_PROLOGUE vax_output_function_prologue\n \n-struct gcc_target target = TARGET_INITIALIZER;\n+struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Generate the assembly code for function entry.  FILE is a stdio\n    stream to output the code to.  SIZE is an int: how many units of"}, {"sha": "462b598862d7ce132cf72b5b44022cff8cf2b55a", "filename": "gcc/config/we32k/we32k.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Fwe32k%2Fwe32k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fconfig%2Fwe32k%2Fwe32k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fwe32k%2Fwe32k.c?ref=f6897b10e150a880ffa7df29d7a2305804a58028", "patch": "@@ -44,7 +44,7 @@ static void we32k_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n #undef TARGET_ASM_FUNCTION_EPILOGUE\n #define TARGET_ASM_FUNCTION_EPILOGUE we32k_output_function_epilogue\n \n-struct gcc_target target = TARGET_INITIALIZER;\n+struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Generate the assembly code for function entry.  FILE is a stdio\n    stream to output the code to.  SIZE is an int: how many units of"}, {"sha": "f6edc2cf3c91c711e9887258ea385f00adfd2ace", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=f6897b10e150a880ffa7df29d7a2305804a58028", "patch": "@@ -3484,7 +3484,7 @@ duplicate_decls (newdecl, olddecl)\n   /* Copy all the DECL_... slots specified in the new decl\n      except for any that we copy here from the old type.  */\n   DECL_MACHINE_ATTRIBUTES (newdecl)\n-    = (*target.merge_decl_attributes) (olddecl, newdecl);\n+    = (*targetm.merge_decl_attributes) (olddecl, newdecl);\n \n   if (TREE_CODE (newdecl) == TEMPLATE_DECL)\n     {"}, {"sha": "5b0abfcd738ae9b8d3edd4c9ce1777887e1e0375", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=f6897b10e150a880ffa7df29d7a2305804a58028", "patch": "@@ -2456,16 +2456,16 @@ import_export_class (ctype)\n   if (CLASSTYPE_INTERFACE_ONLY (ctype))\n     return;\n \n-  if ((*target.valid_type_attribute) (ctype,\n-\t\t\t\t      TYPE_ATTRIBUTES (ctype),\n-\t\t\t\t      get_identifier (\"dllimport\"),\n-\t\t\t\t      NULL_TREE)\n+  if ((*targetm.valid_type_attribute) (ctype,\n+\t\t\t\t       TYPE_ATTRIBUTES (ctype),\n+\t\t\t\t       get_identifier (\"dllimport\"),\n+\t\t\t\t       NULL_TREE)\n       && lookup_attribute (\"dllimport\", TYPE_ATTRIBUTES (ctype)))\n     import_export = -1;\n-  else if ((*target.valid_type_attribute) (ctype,\n-\t\t\t\t\t   TYPE_ATTRIBUTES (ctype),\n-\t\t\t\t\t   get_identifier (\"dllexport\"),\n-\t\t\t\t\t   NULL_TREE)\n+  else if ((*targetm.valid_type_attribute) (ctype,\n+\t\t\t\t\t    TYPE_ATTRIBUTES (ctype),\n+\t\t\t\t\t    get_identifier (\"dllexport\"),\n+\t\t\t\t\t    NULL_TREE)\n \t   && lookup_attribute (\"dllexport\", TYPE_ATTRIBUTES (ctype)))\n     import_export = 1;\n "}, {"sha": "1cf76e5980ae3345bcc58c158636914c39f9c21d", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=f6897b10e150a880ffa7df29d7a2305804a58028", "patch": "@@ -212,7 +212,7 @@ qualify_type_recursive (t1, t2)\n       tree b1;\n       int type_quals;\n       tree tgt;\n-      tree attributes = (*target.merge_type_attributes) (t1, t2);\n+      tree attributes = (*targetm.merge_type_attributes) (t1, t2);\n \n       if (TREE_CODE (tt1) == OFFSET_TYPE)\n \t{\n@@ -343,7 +343,7 @@ type_after_usual_arithmetic_conversions (t1, t2)\n \n   /* In what follows, we slightly generalize the rules given in [expr]\n      so as to deal with `long long'.  First, merge the attributes.  */\n-  attributes = (*target.merge_type_attributes) (t1, t2);\n+  attributes = (*targetm.merge_type_attributes) (t1, t2);\n \n   /* If only one is real, use it as the result.  */\n   if (code1 == REAL_TYPE && code2 != REAL_TYPE)\n@@ -549,7 +549,7 @@ common_type (t1, t2)\n     return type_after_usual_arithmetic_conversions (t1, t2);\n \n   /* Merge the attributes.  */\n-  attributes = (*target.merge_type_attributes) (t1, t2);\n+  attributes = (*targetm.merge_type_attributes) (t1, t2);\n \n   /* Treat an enum type as the unsigned integer type of the same width.  */\n \n@@ -999,7 +999,7 @@ comptypes (t1, t2, strict)\n   if (strict & COMPARE_NO_ATTRIBUTES)\n     attrval = 1;\n   /* 1 if no need for warning yet, 2 if warning cause has been seen.  */\n-  else if (! (attrval = (*target.comp_type_attributes) (t1, t2)))\n+  else if (! (attrval = (*targetm.comp_type_attributes) (t1, t2)))\n      return 0;\n \n   /* 1 if no need for warning yet, 2 if warning cause has been seen.  */"}, {"sha": "b76b040938a4dbe871c9e69ae88a82387d3b8676", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=f6897b10e150a880ffa7df29d7a2305804a58028", "patch": "@@ -55,8 +55,8 @@ through the macros defined in the @file{.h} file.\n @cindex target hooks\n @cindex target functions\n \n-@deftypevar {struct gcc_target} target\n-The target @file{.c} file must define the global @code{target} variable\n+@deftypevar {struct gcc_target} targetm\n+The target @file{.c} file must define the global @code{targetm} variable\n which contains pointers to functions and data relating to the target\n machine.  The variable is declared in @file{target.h};\n @file{target-def.h} defines the macro @code{TARGET_INITIALIZER} which is\n@@ -72,7 +72,7 @@ macros for which the default definition is inappropriate.  For example:\n #undef TARGET_VALID_TYPE_ATTRIBUTE\n #define TARGET_VALID_TYPE_ATTRIBUTE @var{machine}_valid_type_attribute_p\n \n-struct gcc_target target = TARGET_INITIALIZER;\n+struct gcc_target targetm = TARGET_INITIALIZER;\n @end smallexample\n @end deftypevar\n "}, {"sha": "7509fbe0eff558c322b34ab56cbdc84ba3c4facd", "filename": "gcc/final.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=f6897b10e150a880ffa7df29d7a2305804a58028", "patch": "@@ -1630,7 +1630,7 @@ final_start_function (first, file, optimize)\n     }\n \n   /* First output the function prologue: code to set up the stack frame.  */\n-  (*target.asm_out.function_prologue) (file, get_frame_size ());\n+  (*targetm.asm_out.function_prologue) (file, get_frame_size ());\n \n   /* If the machine represents the prologue as RTL, the profiling code must\n      be emitted when NOTE_INSN_PROLOGUE_END is scanned.  */\n@@ -1773,7 +1773,7 @@ final_end_function (first, file, optimize)\n \n   /* Finally, output the function epilogue:\n      code to restore the stack frame and return to the caller.  */\n-  (*target.asm_out.function_epilogue) (file, get_frame_size ());\n+  (*targetm.asm_out.function_epilogue) (file, get_frame_size ());\n \n #ifdef SDB_DEBUGGING_INFO\n   if (write_symbols == SDB_DEBUG)"}, {"sha": "11d0a0e08c4df3859f03ea2eb3064c8c9224b3cd", "filename": "gcc/target.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=f6897b10e150a880ffa7df29d7a2305804a58028", "patch": "@@ -33,9 +33,9 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n    includes target.h and target-def.h, and overrides any inappropriate\n    defaults by undefining the relevant macro and defining a suitable\n    replacement.  That file should then contain the definition of\n-   \"target\" like so:\n+   \"targetm\" like so:\n \n-   struct gcc_target target = TARGET_INITIALIZER;\n+   struct gcc_target targetm = TARGET_INITIALIZER;\n \n    Doing things this way allows us to bring together everything that\n    defines a target to GCC.  By supplying a default that is\n@@ -83,4 +83,4 @@ struct gcc_target\n   void (* set_default_type_attributes) PARAMS ((tree type));\n };\n \n-extern struct gcc_target target;\n+extern struct gcc_target targetm;"}, {"sha": "a48724b45d825acf4e72869f17389d1f289ab025", "filename": "gcc/tree.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6897b10e150a880ffa7df29d7a2305804a58028/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=f6897b10e150a880ffa7df29d7a2305804a58028", "patch": "@@ -435,7 +435,7 @@ make_node (code)\n \n       /* Default to no attributes for type, but let target change that.  */\n       TYPE_ATTRIBUTES (t) = NULL_TREE;\n-      (*target.set_default_type_attributes) (t);\n+      (*targetm.set_default_type_attributes) (t);\n \n       /* We have not yet computed the alias set for this type.  */\n       TYPE_ALIAS_SET (t) = -1;\n@@ -2759,8 +2759,8 @@ valid_machine_attribute (attr_name, attr_args, decl, type)\n     {\n       tree decl_attrs = DECL_MACHINE_ATTRIBUTES (decl);\n \n-      if ((*target.valid_decl_attribute) (decl, decl_attrs, attr_name,\n-\t\t\t\t\t  attr_args))\n+      if ((*targetm.valid_decl_attribute) (decl, decl_attrs, attr_name,\n+\t\t\t\t\t   attr_args))\n \t{\n \t  tree attr = lookup_attribute (IDENTIFIER_POINTER (attr_name),\n \t\t\t\t\tdecl_attrs);\n@@ -2783,8 +2783,8 @@ valid_machine_attribute (attr_name, attr_args, decl, type)\n     }\n \n   type_attrs = TYPE_ATTRIBUTES (type);\n-  if ((*target.valid_type_attribute) (type, type_attrs, attr_name,\n-\t\t\t\t      attr_args))\n+  if ((*targetm.valid_type_attribute) (type, type_attrs, attr_name,\n+\t\t\t\t       attr_args))\n     {\n       tree attr = lookup_attribute (IDENTIFIER_POINTER (attr_name),\n \t\t\t\t    type_attrs);\n@@ -2818,8 +2818,8 @@ valid_machine_attribute (attr_name, attr_args, decl, type)\n      by putting the attribute on the function type.  */\n   else if (POINTER_TYPE_P (type)\n \t   && TREE_CODE (TREE_TYPE (type)) == FUNCTION_TYPE\n-\t   && (*target.valid_type_attribute) (TREE_TYPE (type), type_attrs,\n-\t\t\t\t\t      attr_name, attr_args))\n+\t   && (*targetm.valid_type_attribute) (TREE_TYPE (type), type_attrs,\n+\t\t\t\t\t       attr_name, attr_args))\n     {\n       tree inner_type = TREE_TYPE (type);\n       tree inner_attrs = TYPE_ATTRIBUTES (inner_type);"}]}