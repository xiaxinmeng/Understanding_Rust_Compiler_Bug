{"sha": "4a2ab19287e25d3c883e3b0e5825317159fc752a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGEyYWIxOTI4N2UyNWQzYzg4M2UzYjBlNTgyNTMxNzE1OWZjNzUyYQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2005-12-26T23:00:18Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-12-26T23:00:18Z"}, "message": "re PR middle-end/25125 ((short) ((int)(unsigned short) + (int)) is done in the wrong type)\n\ngcc/\n\tPR tree-optimization/25125\n\t* convert.c (convert_to_integer): Don't narrow the type of a\n\tPLUX_EXPR or MINUS_EXPR if !flag_wrapv and the unwidened type\n\tis signed.\n\ngcc/testsuite/\n\tPR tree-optimization/25125\n\t* gcc.dg/vect/vect-7.c, gcc.dg/vect/vect-reduc-2char.c,\n\tgcc.dg/vect/vect-reduc-2short.c: XFAIL.\n\t* gcc.c-torture/execute/pr25125.c: New.\n\nFrom-SVN: r109065", "tree": {"sha": "71fa7e22af360fe7beb5c11eb309505bf13890ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71fa7e22af360fe7beb5c11eb309505bf13890ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a2ab19287e25d3c883e3b0e5825317159fc752a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a2ab19287e25d3c883e3b0e5825317159fc752a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a2ab19287e25d3c883e3b0e5825317159fc752a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a2ab19287e25d3c883e3b0e5825317159fc752a/comments", "author": null, "committer": null, "parents": [{"sha": "01a097e8ec830c49674e24862d16e101c43c8932", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01a097e8ec830c49674e24862d16e101c43c8932", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01a097e8ec830c49674e24862d16e101c43c8932"}], "stats": {"total": 59, "additions": 55, "deletions": 4}, "files": [{"sha": "4695cc75aa62d505f96ddade4403759c757dbd54", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a2ab19287e25d3c883e3b0e5825317159fc752a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a2ab19287e25d3c883e3b0e5825317159fc752a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4a2ab19287e25d3c883e3b0e5825317159fc752a", "patch": "@@ -1,3 +1,10 @@\n+2005-12-26  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\tPR tree-optimization/25125\n+\t* convert.c (convert_to_integer): Don't narrow the type of a\n+\tPLUX_EXPR or MINUS_EXPR if !flag_wrapv and the unwidened type\n+\tis signed.\n+\n 2005-12-26  Graham Stott  <graham.stott@btinternet.com>\n \n \tPR middle-end/25568"}, {"sha": "805c6f5c7898508dec604d8bbe1e0f4f37589e2d", "filename": "gcc/convert.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a2ab19287e25d3c883e3b0e5825317159fc752a/gcc%2Fconvert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a2ab19287e25d3c883e3b0e5825317159fc752a/gcc%2Fconvert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconvert.c?ref=4a2ab19287e25d3c883e3b0e5825317159fc752a", "patch": "@@ -628,7 +628,17 @@ convert_to_integer (tree type, tree expr)\n \t\t\t\t|| ex_form == RSHIFT_EXPR\n \t\t\t\t|| ex_form == LROTATE_EXPR\n \t\t\t\t|| ex_form == RROTATE_EXPR))\n-\t\t\t|| ex_form == LSHIFT_EXPR)\n+\t\t\t|| ex_form == LSHIFT_EXPR\n+\t\t\t/* If we have !flag_wrapv, and either ARG0 or\n+\t\t\t   ARG1 is of a signed type, we have to do\n+\t\t\t   PLUS_EXPR or MINUS_EXPR in an unsigned\n+\t\t\t   type.  Otherwise, we would introduce\n+\t\t\t   signed-overflow undefinedness.  */\n+\t\t\t|| (!flag_wrapv\n+\t\t\t    && (ex_form == PLUS_EXPR\n+\t\t\t\t|| ex_form == MINUS_EXPR)\n+\t\t\t    && (!TYPE_UNSIGNED (TREE_TYPE (arg0))\n+\t\t\t\t|| !TYPE_UNSIGNED (TREE_TYPE (arg1)))))\n \t\t      typex = lang_hooks.types.unsigned_type (typex);\n \t\t    else\n \t\t      typex = lang_hooks.types.signed_type (typex);"}, {"sha": "6a442180cc5560cb0791ba21e52d0f2baec0b65e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a2ab19287e25d3c883e3b0e5825317159fc752a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a2ab19287e25d3c883e3b0e5825317159fc752a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4a2ab19287e25d3c883e3b0e5825317159fc752a", "patch": "@@ -1,3 +1,10 @@\n+2005-12-26  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\tPR tree-optimization/25125\n+\t* gcc.dg/vect/vect-7.c, gcc.dg/vect/vect-reduc-2char.c,\n+\tgcc.dg/vect/vect-reduc-2short.c: XFAIL.\n+\t* gcc.c-torture/execute/pr25125.c: New.\n+\n 2005-12-24  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/25029"}, {"sha": "f08ebe74a4862bf5a71b013db3756d3ba881cbcf", "filename": "gcc/testsuite/gcc.c-torture/execute/pr25125.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a2ab19287e25d3c883e3b0e5825317159fc752a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr25125.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a2ab19287e25d3c883e3b0e5825317159fc752a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr25125.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr25125.c?ref=4a2ab19287e25d3c883e3b0e5825317159fc752a", "patch": "@@ -0,0 +1,27 @@\n+extern void exit (int);\n+extern void abort (void);\n+extern unsigned short f (short a) __attribute__((__noinline__));\n+\n+unsigned short\n+f (short a)\n+{\n+  short b;\n+\n+  if (a > 0)\n+    return 0;\n+  b = ((int) a) + - (int) 32768;\n+  return b;\n+}\n+\n+int\n+main (void)\n+{\n+  if (sizeof (short) < 2\n+      || sizeof (short) >= sizeof (int))\n+    exit (0);\n+\n+  if (f (-32767) != 1)\n+    abort ();\n+\n+  exit (0);\n+}"}, {"sha": "10cff365cb977c5eac8ddd72026af8151867996f", "filename": "gcc/testsuite/gcc.dg/vect/vect-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a2ab19287e25d3c883e3b0e5825317159fc752a/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a2ab19287e25d3c883e3b0e5825317159fc752a/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-7.c?ref=4a2ab19287e25d3c883e3b0e5825317159fc752a", "patch": "@@ -46,6 +46,6 @@ int main (void)\n }\n \n /* Fails for 32-bit targets that don't vectorize PLUS.  */\n-/* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" { xfail *-*-* } } } */\n /* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "e664fda96601ddc14cd199aaf2f92d1fba20bba6", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-2char.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a2ab19287e25d3c883e3b0e5825317159fc752a/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-2char.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a2ab19287e25d3c883e3b0e5825317159fc752a/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-2char.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-2char.c?ref=4a2ab19287e25d3c883e3b0e5825317159fc752a", "patch": "@@ -45,5 +45,5 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" { xfail vect_no_int_max } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" { xfail *-*-* } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "9f312fbc3f53ee402a274de4b98ed605bf54d732", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-2short.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a2ab19287e25d3c883e3b0e5825317159fc752a/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-2short.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a2ab19287e25d3c883e3b0e5825317159fc752a/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-2short.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-2short.c?ref=4a2ab19287e25d3c883e3b0e5825317159fc752a", "patch": "@@ -44,5 +44,5 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" { xfail vect_no_int_max } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" { xfail *-*-* } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}]}