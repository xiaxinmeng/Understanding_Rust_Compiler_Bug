{"sha": "602ea4d30716a6c72c6ee7fc8207a87e58a40d80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjAyZWE0ZDMwNzE2YTZjNzJjNmVlN2ZjODIwN2E4N2U1OGE0MGQ4MA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2006-01-27T19:59:49Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2006-01-27T19:59:49Z"}, "message": "[multiple changes]\n\n2006-01-27  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/25864\n\t* libgcc-std.ver: Add GCC_4.1.0 symbol version.\n\t* config/rs6000/t-linux64 (TARGET_LIBGCC2_CFLAGS): Only append\n\t-mno-minimal-toc to previous content.\n\t(bispecs): Remove goal.\n\t* config/rs6000/ppc64-fp.c: Define TMODES before including fp-bit.h.\n\t* config/rs6000/darwin-ldouble.c: Don't provide _xlq*@GCC_3.4\n\tcompatibility aliases on powerpc-*-*gnu*.\n\t* config/rs6000/libgcc-ppc-glibc.ver: New file.\n\t* config/rs6000/t-ppccomm (SHLIB_MAPFILES): Append\n\tlibgcc-ppc-glibc.ver on powerpc*-*-*gnu*.\n\t(TARGET_LIBGCC2_CFLAGS): Append -specs=ldblspecs.\n\t(ldblspecs): New goal.\n\t* config/rs6000/t-linux64 (SHLIB_MAPFILES): Removed.\n\t* mklibgcc.in: If $TPBIT is empty, don't compile _sf_to_tf and\n\t_df_to_tf.\n\t* config/fp-bit.h (TMODES): Don't define if none of TFLOAT,\n\tL_sf_to_tf or L_df_to_tf is defined.\n\n2006-01-27  David Edelsohn  <edelsohn@gnu.org>\n\t    Alan Modra  <amodra@bigpond.net.au>\n\n\tPR target/25864\n\t* config/rs6000/linux.h (POWERPC_LINUX): Define.\n\t* config/rs6000/linux64.h (POWERPC_LINUX): Define.\n\t* config/rs6000/darwin-ldouble.c: Build on 32-bit PowerPC.\n\t* config/rs6000/darwin.h (TARGET_IEEEQUAD): Define to zero.\n\t* config/rs6000/aix.h (TARGET_IEEEQUAD): Define to zero.\n\t* config/rs6000/rs6000.c (rs6000_ieeequad): New variable.\n\t(rs6000_override_options): Initialize rs6000_ieeequad.\n\tInitialize TFmode format to ibm_extended_format if not\n\tTARGET_IEEEQUAD.\n\t(rs6000_handle_option): Accept -mabi= ibmlongdouble and\n\tieeelongdouble.\n\t(rs6000_emit_move): Move !TARGET_IEEEQUAD as two parts.\n\t(rs6000_return_in_memory): Only return IEEEQUAD in memory.\n\t(function_arg_advance): IBM long double passed in two FPRs, not\n\tsplit.\n\t(function_arg): IBM long double passed in FPRs.\n\t(rs6000_pass_by_reference): Only IEEEQUAD passed by reference.\n\t(rs6000_gimplify_va_arg): IBM long double passed in two FPRs.\n\tOnly multireg GPR aligned.\n\t(rs6000_init_libfuncs): Enable IBM long double functions if not\n\tIEEEQUAD.\n\t(rs6000_generate_compare): Use IBM long double compare if not\n\tTARGET_IEEEQUAD.\n\t* config/rs6000/rs6000.h (rs6000_ieeequad): Declare.\n\t(TARGET_IEEEQUAD): Define.\n\t(CANNOT_CHANGE_MODE_CLASS): Any mode larger than doubleword if\n\tnot TARGET_IEEEQUAD.\n\t* config/rs6000/rs6000.md: Enable TFmode patterns if\n\t!TARGET_IEEEQUAD.\n\t* config/rs6000/t-ppccomm (LIB2FUNCS_EXTRA): Add darwin-ldouble.c.\n\t* config/rs6000/svr4.h (SUBTARGET_OVERRIDE_OPTIONS): -msoft-float\n\tand -mlong-double-128 are incompatible.\n\t* doc/invoke.texi (-mabi): Collect options together.  Add\n\tibmlongdouble and ieeelongdouble.\n\nFrom-SVN: r110303", "tree": {"sha": "f8ce337caaf6de64c8851c52894637502cb77c32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8ce337caaf6de64c8851c52894637502cb77c32"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/602ea4d30716a6c72c6ee7fc8207a87e58a40d80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/602ea4d30716a6c72c6ee7fc8207a87e58a40d80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/602ea4d30716a6c72c6ee7fc8207a87e58a40d80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/602ea4d30716a6c72c6ee7fc8207a87e58a40d80/comments", "author": null, "committer": null, "parents": [{"sha": "091c9413bb5e21d619ff38e5a5dcea2e78e0ae42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/091c9413bb5e21d619ff38e5a5dcea2e78e0ae42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/091c9413bb5e21d619ff38e5a5dcea2e78e0ae42"}], "stats": {"total": 364, "additions": 261, "deletions": 103}, "files": [{"sha": "7d4e319322f55c880ae077863c7e3472aa30f314", "filename": "gcc/ChangeLog", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/602ea4d30716a6c72c6ee7fc8207a87e58a40d80/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/602ea4d30716a6c72c6ee7fc8207a87e58a40d80/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=602ea4d30716a6c72c6ee7fc8207a87e58a40d80", "patch": "@@ -1,3 +1,63 @@\n+2006-01-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/25864\n+\t* libgcc-std.ver: Add GCC_4.1.0 symbol version.\n+\t* config/rs6000/t-linux64 (TARGET_LIBGCC2_CFLAGS): Only append\n+\t-mno-minimal-toc to previous content.\n+\t(bispecs): Remove goal.\n+\t* config/rs6000/ppc64-fp.c: Define TMODES before including fp-bit.h.\n+\t* config/rs6000/darwin-ldouble.c: Don't provide _xlq*@GCC_3.4\n+\tcompatibility aliases on powerpc-*-*gnu*.\n+\t* config/rs6000/libgcc-ppc-glibc.ver: New file.\n+\t* config/rs6000/t-ppccomm (SHLIB_MAPFILES): Append\n+\tlibgcc-ppc-glibc.ver on powerpc*-*-*gnu*.\n+\t(TARGET_LIBGCC2_CFLAGS): Append -specs=ldblspecs.\n+\t(ldblspecs): New goal.\n+\t* config/rs6000/t-linux64 (SHLIB_MAPFILES): Removed.\n+\t* mklibgcc.in: If $TPBIT is empty, don't compile _sf_to_tf and\n+\t_df_to_tf.\n+\t* config/fp-bit.h (TMODES): Don't define if none of TFLOAT,\n+\tL_sf_to_tf or L_df_to_tf is defined.\n+\n+2006-01-27  David Edelsohn  <edelsohn@gnu.org>\n+\t    Alan Modra  <amodra@bigpond.net.au>\n+\n+\tPR target/25864\n+\t* config/rs6000/linux.h (POWERPC_LINUX): Define.\n+\t* config/rs6000/linux64.h (POWERPC_LINUX): Define.\n+\t* config/rs6000/darwin-ldouble.c: Build on 32-bit PowerPC.\n+\t* config/rs6000/darwin.h (TARGET_IEEEQUAD): Define to zero.\n+\t* config/rs6000/aix.h (TARGET_IEEEQUAD): Define to zero.\n+\t* config/rs6000/rs6000.c (rs6000_ieeequad): New variable.\n+\t(rs6000_override_options): Initialize rs6000_ieeequad.\n+\tInitialize TFmode format to ibm_extended_format if not\n+\tTARGET_IEEEQUAD.\n+\t(rs6000_handle_option): Accept -mabi= ibmlongdouble and\n+\tieeelongdouble.\n+\t(rs6000_emit_move): Move !TARGET_IEEEQUAD as two parts.\n+\t(rs6000_return_in_memory): Only return IEEEQUAD in memory.\n+\t(function_arg_advance): IBM long double passed in two FPRs, not\n+\tsplit.\n+\t(function_arg): IBM long double passed in FPRs.\n+\t(rs6000_pass_by_reference): Only IEEEQUAD passed by reference.\n+\t(rs6000_gimplify_va_arg): IBM long double passed in two FPRs.\n+\tOnly multireg GPR aligned.\n+\t(rs6000_init_libfuncs): Enable IBM long double functions if not\n+\tIEEEQUAD.\n+\t(rs6000_generate_compare): Use IBM long double compare if not\n+\tTARGET_IEEEQUAD.\n+\t* config/rs6000/rs6000.h (rs6000_ieeequad): Declare.\n+\t(TARGET_IEEEQUAD): Define.\n+\t(CANNOT_CHANGE_MODE_CLASS): Any mode larger than doubleword if\n+\tnot TARGET_IEEEQUAD.\n+\t* config/rs6000/rs6000.md: Enable TFmode patterns if\n+\t!TARGET_IEEEQUAD.\n+\t* config/rs6000/t-ppccomm (LIB2FUNCS_EXTRA): Add darwin-ldouble.c.\n+\t* config/rs6000/svr4.h (SUBTARGET_OVERRIDE_OPTIONS): -msoft-float\n+\tand -mlong-double-128 are incompatible.\n+\t* doc/invoke.texi (-mabi): Collect options together.  Add\n+\tibmlongdouble and ieeelongdouble.\n+\n 2006-01-27  Richard Sandiford  <richard@codesourcery.com>\n \n \t* doc/rtl.texi (SYMBOL_REF_DATA): Adjust documentation for new"}, {"sha": "5ee0279a3932e04c678fa77106610bf860b70acf", "filename": "gcc/config/fp-bit.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/602ea4d30716a6c72c6ee7fc8207a87e58a40d80/gcc%2Fconfig%2Ffp-bit.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/602ea4d30716a6c72c6ee7fc8207a87e58a40d80/gcc%2Fconfig%2Ffp-bit.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffp-bit.h?ref=602ea4d30716a6c72c6ee7fc8207a87e58a40d80", "patch": "@@ -1,5 +1,5 @@\n /* Header file for fp-bit.c.  */\n-/* Copyright (C) 2000, 2002, 2003 Free Software Foundation, Inc.\n+/* Copyright (C) 2000, 2002, 2003, 2006 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -89,7 +89,9 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #endif /* ! FINE_GRAINED_LIBRARIES */\n \n #if __LDBL_MANT_DIG__ == 113 || __LDBL_MANT_DIG__ == 106\n-# define TMODES\n+# if defined(TFLOAT) || defined(L_sf_to_tf) || defined(L_df_to_tf)\n+#  define TMODES\n+# endif\n #endif\n \n typedef float SFtype __attribute__ ((mode (SF)));"}, {"sha": "57f487664a97c283a145fc162dc3bac97dc2bbaa", "filename": "gcc/config/rs6000/aix.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/602ea4d30716a6c72c6ee7fc8207a87e58a40d80/gcc%2Fconfig%2Frs6000%2Faix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/602ea4d30716a6c72c6ee7fc8207a87e58a40d80/gcc%2Fconfig%2Frs6000%2Faix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix.h?ref=602ea4d30716a6c72c6ee7fc8207a87e58a40d80", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler,\n    for IBM RS/6000 POWER running AIX.\n-   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005\n+   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006\n    Free Software Foundation, Inc.\n \n    This file is part of GCC.\n@@ -42,6 +42,8 @@\n #define TARGET_ALTIVEC 0\n #undef  TARGET_ALTIVEC_ABI\n #define TARGET_ALTIVEC_ABI 0\n+#undef  TARGET_IEEEQUAD\n+#define TARGET_IEEEQUAD 0\n \n /* The AIX linker will discard static constructors in object files before\n    collect has a chance to see them, so scan the object files directly.  */"}, {"sha": "11df6494f74119e9c18a0cc29790a356af9df555", "filename": "gcc/config/rs6000/darwin-ldouble.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/602ea4d30716a6c72c6ee7fc8207a87e58a40d80/gcc%2Fconfig%2Frs6000%2Fdarwin-ldouble.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/602ea4d30716a6c72c6ee7fc8207a87e58a40d80/gcc%2Fconfig%2Frs6000%2Fdarwin-ldouble.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin-ldouble.c?ref=602ea4d30716a6c72c6ee7fc8207a87e58a40d80", "patch": "@@ -1,5 +1,6 @@\n /* 128-bit long double support routines for Darwin.\n-   Copyright (C) 1993, 2003, 2004, 2005 Free Software Foundation, Inc.\n+   Copyright (C) 1993, 2003, 2004, 2005, 2006\n+   Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -48,7 +49,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n \n    This code currently assumes big-endian.  */\n \n-#if !_SOFT_FLOAT && (defined (__MACH__) || defined (__powerpc64__) || defined (_AIX))\n+#if !_SOFT_FLOAT && (defined (__MACH__) || defined (__powerpc64__) || defined (__powerpc__) || defined (_AIX))\n \n #define fabs(x) __builtin_fabs(x)\n #define isless(x, y) __builtin_isless (x, y)\n@@ -67,7 +68,8 @@ extern long double __gcc_qsub (double, double, double, double);\n extern long double __gcc_qmul (double, double, double, double);\n extern long double __gcc_qdiv (double, double, double, double);\n \n-#if defined __ELF__ && defined SHARED\n+#if defined __ELF__ && defined SHARED \\\n+    && (defined __powerpc64__ || !(defined __linux__ || defined __gnu_hurd__))\n /* Provide definitions of the old symbol names to satisfy apps and\n    shared libs built against an older libgcc.  To access the _xlq\n    symbols an explicit version reference is needed, so these won't"}, {"sha": "950202a9f5767f691344abe294972b1b27043830", "filename": "gcc/config/rs6000/darwin.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/602ea4d30716a6c72c6ee7fc8207a87e58a40d80/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/602ea4d30716a6c72c6ee7fc8207a87e58a40d80/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.h?ref=602ea4d30716a6c72c6ee7fc8207a87e58a40d80", "patch": "@@ -1,5 +1,5 @@\n /* Target definitions for PowerPC running Darwin (Mac OS X).\n-   Copyright (C) 1997, 2000, 2001, 2003, 2004, 2005\n+   Copyright (C) 1997, 2000, 2001, 2003, 2004, 2005, 2006\n    Free Software Foundation, Inc.\n    Contributed by Apple Computer Inc.\n \n@@ -311,6 +311,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n /* Darwin only runs on PowerPC, so short-circuit POWER patterns.  */\n #undef  TARGET_POWER\n #define TARGET_POWER 0\n+#undef  TARGET_IEEEQUAD\n+#define TARGET_IEEEQUAD 0\n \n /* Since Darwin doesn't do TOCs, stub this out.  */\n "}, {"sha": "988ed76aa8e9452f41388830ccfe9f48b5aafbac", "filename": "gcc/config/rs6000/libgcc-ppc-glibc.ver", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/602ea4d30716a6c72c6ee7fc8207a87e58a40d80/gcc%2Fconfig%2Frs6000%2Flibgcc-ppc-glibc.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/602ea4d30716a6c72c6ee7fc8207a87e58a40d80/gcc%2Fconfig%2Frs6000%2Flibgcc-ppc-glibc.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flibgcc-ppc-glibc.ver?ref=602ea4d30716a6c72c6ee7fc8207a87e58a40d80", "patch": "@@ -0,0 +1,31 @@\n+%ifndef _SOFT_FLOAT\n+%ifndef __powerpc64__\n+%exclude {\n+  __multc3\n+  __divtc3\n+  __powitf2\n+  __fixtfdi\n+  __fixunstfdi\n+  __floatditf\n+}\n+\n+GCC_4.1.0 {\n+  # long double support\n+  __multc3\n+  __divtc3\n+  __powitf2\n+  __fixtfdi\n+  __fixunstfdi\n+  __floatditf\n+\n+%else\n+GCC_3.4.4 {\n+%endif\n+\n+  # long double support\n+  __gcc_qadd\n+  __gcc_qsub\n+  __gcc_qmul\n+  __gcc_qdiv\n+}\n+%endif"}, {"sha": "74aeb2cf5ee9ac60e461fdb8d5f0560d065de562", "filename": "gcc/config/rs6000/linux.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/602ea4d30716a6c72c6ee7fc8207a87e58a40d80/gcc%2Fconfig%2Frs6000%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/602ea4d30716a6c72c6ee7fc8207a87e58a40d80/gcc%2Fconfig%2Frs6000%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux.h?ref=602ea4d30716a6c72c6ee7fc8207a87e58a40d80", "patch": "@@ -1,7 +1,7 @@\n /* Definitions of target machine for GNU compiler,\n    for PowerPC machines running Linux.\n-   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n-   Free Software Foundation, Inc.\n+   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,\n+   2004, 2005, 2006 Free Software Foundation, Inc.\n    Contributed by Michael Meissner (meissner@cygnus.com).\n \n    This file is part of GCC.\n@@ -118,3 +118,5 @@\n /* ppc32 glibc provides __stack_chk_guard in -0x7008(2).  */\n #define TARGET_THREAD_SSP_OFFSET\t-0x7008\n #endif\n+\n+#define POWERPC_LINUX"}, {"sha": "c95df9dfe71507dbf850f60cd5ec4ecacb480023", "filename": "gcc/config/rs6000/linux64.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/602ea4d30716a6c72c6ee7fc8207a87e58a40d80/gcc%2Fconfig%2Frs6000%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/602ea4d30716a6c72c6ee7fc8207a87e58a40d80/gcc%2Fconfig%2Frs6000%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux64.h?ref=602ea4d30716a6c72c6ee7fc8207a87e58a40d80", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler,\n    for 64 bit PowerPC linux.\n-   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005\n+   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006\n    Free Software Foundation, Inc.\n \n    This file is part of GCC.\n@@ -567,3 +567,5 @@ while (0)\n    ppc64 glibc provides it at -0x7010(13).  */\n #define TARGET_THREAD_SSP_OFFSET\t(TARGET_64BIT ? -0x7010 : -0x7008)\n #endif\n+\n+#define POWERPC_LINUX"}, {"sha": "efa99b60df68cbf55cd875bbf2d425cbc171426b", "filename": "gcc/config/rs6000/ppc64-fp.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/602ea4d30716a6c72c6ee7fc8207a87e58a40d80/gcc%2Fconfig%2Frs6000%2Fppc64-fp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/602ea4d30716a6c72c6ee7fc8207a87e58a40d80/gcc%2Fconfig%2Frs6000%2Fppc64-fp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fppc64-fp.c?ref=602ea4d30716a6c72c6ee7fc8207a87e58a40d80", "patch": "@@ -2,7 +2,7 @@\n    libgcc2.c with macros expanded to force the use of specific types.\n  \n    Copyright (C) 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,\n-   2000, 2001, 2002, 2003, 2004  Free Software Foundation, Inc.\n+   2000, 2001, 2002, 2003, 2004, 2006  Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -31,6 +31,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n 02110-1301, USA.  */\n \n #if defined(__powerpc64__)\n+#define TMODES\n #include \"config/fp-bit.h\"\n \n extern DItype __fixtfdi (TFtype);"}, {"sha": "a2c314bd5ea86b8ae5748d8c8db673b46bce4d90", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 65, "deletions": 42, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/602ea4d30716a6c72c6ee7fc8207a87e58a40d80/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/602ea4d30716a6c72c6ee7fc8207a87e58a40d80/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=602ea4d30716a6c72c6ee7fc8207a87e58a40d80", "patch": "@@ -155,10 +155,13 @@ enum rs6000_nop_insertion rs6000_sched_insert_nops;\n /* Support targetm.vectorize.builtin_mask_for_load.  */\n static GTY(()) tree altivec_builtin_mask_for_load;\n \n-/* Size of long double */\n+/* Size of long double.  */\n int rs6000_long_double_type_size;\n \n-/* Whether -mabi=altivec has appeared */\n+/* IEEE quad extended precision long double. */\n+int rs6000_ieeequad;\n+\n+/* Whether -mabi=altivec has appeared.  */\n int rs6000_altivec_abi;\n \n /* Nonzero if we want SPE ABI extensions.  */\n@@ -1297,6 +1300,11 @@ rs6000_override_options (const char *default_cpu)\n   if (!rs6000_explicit_options.long_double)\n     rs6000_long_double_type_size = RS6000_DEFAULT_LONG_DOUBLE_SIZE;\n \n+#ifndef POWERPC_LINUX\n+  if (!rs6000_explicit_options.abi)\n+    rs6000_ieeequad = 1;\n+#endif\n+\n   /* Set Altivec ABI as default for powerpc64 linux.  */\n   if (TARGET_ELF && TARGET_64BIT)\n     {\n@@ -1410,8 +1418,7 @@ rs6000_override_options (const char *default_cpu)\n   if (!rs6000_explicit_options.aix_struct_ret)\n     aix_struct_return = (DEFAULT_ABI != ABI_V4 || DRAFT_V4_STRUCT_RET);\n \n-  if (TARGET_LONG_DOUBLE_128\n-      && (DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_DARWIN))\n+  if (TARGET_LONG_DOUBLE_128 && !TARGET_IEEEQUAD)\n     REAL_MODE_FORMAT (TFmode) = &ibm_extended_format;\n \n   if (TARGET_TOC)\n@@ -1780,6 +1787,17 @@ rs6000_handle_option (size_t code, const char *arg, int value)\n \t  warning (0, \"Using old darwin ABI\");\n \t}\n \n+      else if (! strcmp (arg, \"ibmlongdouble\"))\n+\t{\n+\t  rs6000_ieeequad = 0;\n+\t  warning (0, \"Using IBM extended precision long double\");\n+\t}\n+      else if (! strcmp (arg, \"ieeelongdouble\"))\n+\t{\n+\t  rs6000_ieeequad = 1;\n+\t  warning (0, \"Using IEEE extended precision long double\");\n+\t}\n+\n       else\n \t{\n \t  error (\"unknown ABI specified: '%s'\", arg);\n@@ -3902,7 +3920,7 @@ rs6000_emit_move (rtx dest, rtx source, enum machine_mode mode)\n \n   /* 128-bit constant floating-point values on Darwin should really be\n      loaded as two parts.  */\n-  if ((DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_DARWIN)\n+  if (!TARGET_IEEEQUAD\n       && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_LONG_DOUBLE_128\n       && mode == TFmode && GET_CODE (operands[1]) == CONST_DOUBLE)\n     {\n@@ -4227,7 +4245,7 @@ rs6000_return_in_memory (tree type, tree fntype ATTRIBUTE_UNUSED)\n       return true;\n     }\n \n-  if (DEFAULT_ABI == ABI_V4 && TYPE_MODE (type) == TFmode)\n+  if (DEFAULT_ABI == ABI_V4 && TARGET_IEEEQUAD && TYPE_MODE (type) == TFmode)\n     return true;\n \n   return false;\n@@ -4614,13 +4632,15 @@ function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n   else if (DEFAULT_ABI == ABI_V4)\n     {\n       if (TARGET_HARD_FLOAT && TARGET_FPRS\n-\t  && (mode == SFmode || mode == DFmode))\n+\t  && (mode == SFmode || mode == DFmode\n+\t      || (mode == TFmode && !TARGET_IEEEQUAD)))\n \t{\n-\t  if (cum->fregno <= FP_ARG_V4_MAX_REG)\n-\t    cum->fregno++;\n+\t  if (cum->fregno + (mode == TFmode ? 1 : 0) <= FP_ARG_V4_MAX_REG)\n+\t    cum->fregno += (GET_MODE_SIZE (mode) + 7) >> 3;\n \t  else\n \t    {\n-\t      if (mode == DFmode)\n+\t      cum->fregno = FP_ARG_V4_MAX_REG + 1;\n+\t      if (mode == DFmode || mode == TFmode)\n \t\tcum->words += cum->words & 1;\n \t      cum->words += rs6000_arg_size (mode, type);\n \t    }\n@@ -5146,9 +5166,10 @@ function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n   else if (abi == ABI_V4)\n     {\n       if (TARGET_HARD_FLOAT && TARGET_FPRS\n-\t  && (mode == SFmode || mode == DFmode))\n+\t  && (mode == SFmode || mode == DFmode\n+\t      || (mode == TFmode && !TARGET_IEEEQUAD)))\n \t{\n-\t  if (cum->fregno <= FP_ARG_V4_MAX_REG)\n+\t  if (cum->fregno + (mode == TFmode ? 1 : 0) <= FP_ARG_V4_MAX_REG)\n \t    return gen_rtx_REG (mode, cum->fregno);\n \t  else\n \t    return NULL_RTX;\n@@ -5351,7 +5372,7 @@ rs6000_pass_by_reference (CUMULATIVE_ARGS *cum ATTRIBUTE_UNUSED,\n \t\t\t  enum machine_mode mode, tree type,\n \t\t\t  bool named ATTRIBUTE_UNUSED)\n {\n-  if (DEFAULT_ABI == ABI_V4 && mode == TFmode)\n+  if (DEFAULT_ABI == ABI_V4 && TARGET_IEEEQUAD && mode == TFmode)\n     {\n       if (TARGET_DEBUG_ARG)\n \tfprintf (stderr, \"function_arg_pass_by_reference: V4 long double\\n\");\n@@ -5802,14 +5823,16 @@ rs6000_gimplify_va_arg (tree valist, tree type, tree *pre_p, tree *post_p)\n   align = 1;\n \n   if (TARGET_HARD_FLOAT && TARGET_FPRS\n-      && (TYPE_MODE (type) == SFmode || TYPE_MODE (type) == DFmode))\n+      && (TYPE_MODE (type) == SFmode\n+\t  || TYPE_MODE (type) == DFmode\n+\t  || TYPE_MODE (type) == TFmode))\n     {\n       /* FP args go in FP registers, if present.  */\n       reg = fpr;\n-      n_reg = 1;\n+      n_reg = (size + 7) / 8;\n       sav_ofs = 8*4;\n       sav_scale = 8;\n-      if (TYPE_MODE (type) == DFmode)\n+      if (TYPE_MODE (type) != SFmode)\n \talign = 8;\n     }\n   else\n@@ -5841,7 +5864,7 @@ rs6000_gimplify_va_arg (tree valist, tree type, tree *pre_p, tree *post_p)\n \t As are any other 2 gpr item such as complex int due to a\n \t historical mistake.  */\n       u = reg;\n-      if (n_reg == 2)\n+      if (n_reg == 2 && reg == gpr)\n \t{\n \t  u = build2 (BIT_AND_EXPR, TREE_TYPE (reg), reg,\n \t\t     size_int (n_reg - 1));\n@@ -9047,33 +9070,32 @@ rs6000_init_libfuncs (void)\n   if (!TARGET_HARD_FLOAT)\n     return;\n \n-  if (DEFAULT_ABI != ABI_V4)\n+  if (DEFAULT_ABI != ABI_V4 && TARGET_XCOFF\n+      && !TARGET_POWER2 && !TARGET_POWERPC)\n     {\n-      if (TARGET_XCOFF && ! TARGET_POWER2 && ! TARGET_POWERPC)\n-\t{\n-\t  /* AIX library routines for float->int conversion.  */\n-\t  set_conv_libfunc (sfix_optab, SImode, DFmode, \"__itrunc\");\n-\t  set_conv_libfunc (ufix_optab, SImode, DFmode, \"__uitrunc\");\n-\t  set_conv_libfunc (sfix_optab, SImode, TFmode, \"_qitrunc\");\n-\t  set_conv_libfunc (ufix_optab, SImode, TFmode, \"_quitrunc\");\n-\t}\n+      /* AIX library routines for float->int conversion.  */\n+      set_conv_libfunc (sfix_optab, SImode, DFmode, \"__itrunc\");\n+      set_conv_libfunc (ufix_optab, SImode, DFmode, \"__uitrunc\");\n+      set_conv_libfunc (sfix_optab, SImode, TFmode, \"_qitrunc\");\n+      set_conv_libfunc (ufix_optab, SImode, TFmode, \"_quitrunc\");\n+    }\n \n+  if (!TARGET_IEEEQUAD)\n       /* AIX/Darwin/64-bit Linux quad floating point routines.  */\n-      if (!TARGET_XL_COMPAT)\n-\t{\n-\t  set_optab_libfunc (add_optab, TFmode, \"__gcc_qadd\");\n-\t  set_optab_libfunc (sub_optab, TFmode, \"__gcc_qsub\");\n-\t  set_optab_libfunc (smul_optab, TFmode, \"__gcc_qmul\");\n-\t  set_optab_libfunc (sdiv_optab, TFmode, \"__gcc_qdiv\");\n-\t}\n-      else\n-\t{\n-\t  set_optab_libfunc (add_optab, TFmode, \"_xlqadd\");\n-\t  set_optab_libfunc (sub_optab, TFmode, \"_xlqsub\");\n-\t  set_optab_libfunc (smul_optab, TFmode, \"_xlqmul\");\n-\t  set_optab_libfunc (sdiv_optab, TFmode, \"_xlqdiv\");\n-\t}\n-    }\n+    if (!TARGET_XL_COMPAT)\n+      {\n+\tset_optab_libfunc (add_optab, TFmode, \"__gcc_qadd\");\n+\tset_optab_libfunc (sub_optab, TFmode, \"__gcc_qsub\");\n+\tset_optab_libfunc (smul_optab, TFmode, \"__gcc_qmul\");\n+\tset_optab_libfunc (sdiv_optab, TFmode, \"__gcc_qdiv\");\n+      }\n+    else\n+      {\n+\tset_optab_libfunc (add_optab, TFmode, \"_xlqadd\");\n+\tset_optab_libfunc (sub_optab, TFmode, \"_xlqsub\");\n+\tset_optab_libfunc (smul_optab, TFmode, \"_xlqmul\");\n+\tset_optab_libfunc (sdiv_optab, TFmode, \"_xlqdiv\");\n+      }\n   else\n     {\n       /* 32-bit SVR4 quad floating point routines.  */\n@@ -11108,7 +11130,7 @@ rs6000_generate_compare (enum rtx_code code)\n \t CLOBBERs to match cmptf_internal2 pattern.  */\n       if (comp_mode == CCFPmode && TARGET_XL_COMPAT\n \t  && GET_MODE (rs6000_compare_op0) == TFmode\n-\t  && (DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_DARWIN)\n+\t  && !TARGET_IEEEQUAD\n \t  && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_LONG_DOUBLE_128)\n \temit_insn (gen_rtx_PARALLEL (VOIDmode,\n \t  gen_rtvec (9,\n@@ -19027,6 +19049,7 @@ rs6000_function_value (tree valtype, tree func ATTRIBUTE_UNUSED)\n \t\t\t\t\t\t   GP_ARG_RETURN + 3),\n \t\t\t\t      GEN_INT (12))));\n     }\n+\n   if ((INTEGRAL_TYPE_P (valtype)\n        && TYPE_PRECISION (valtype) < BITS_PER_WORD)\n       || POINTER_TYPE_P (valtype))"}, {"sha": "bfa7074247edfdc190029c506dd8b6bb61e6b9ce", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/602ea4d30716a6c72c6ee7fc8207a87e58a40d80/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/602ea4d30716a6c72c6ee7fc8207a87e58a40d80/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=602ea4d30716a6c72c6ee7fc8207a87e58a40d80", "patch": "@@ -1,6 +1,7 @@\n /* Definitions of target machine for GNU compiler, for IBM RS/6000.\n    Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,\n-   2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+   2000, 2001, 2002, 2003, 2004, 2005, 2006\n+   Free Software Foundation, Inc.\n    Contributed by Richard Kenner (kenner@vlsi1.ultra.nyu.edu)\n \n    This file is part of GCC.\n@@ -291,6 +292,7 @@ extern const char *rs6000_traceback_name; /* Type of traceback table.  */\n /* These are separate from target_flags because we've run out of bits\n    there.  */\n extern int rs6000_long_double_type_size;\n+extern int rs6000_ieeequad;\n extern int rs6000_altivec_abi;\n extern int rs6000_spe_abi;\n extern int rs6000_float_gprs;\n@@ -316,6 +318,7 @@ extern enum rs6000_nop_insertion rs6000_sched_insert_nops;\n #endif\n \n #define TARGET_LONG_DOUBLE_128 (rs6000_long_double_type_size == 128)\n+#define TARGET_IEEEQUAD rs6000_ieeequad\n #define TARGET_ALTIVEC_ABI rs6000_altivec_abi\n \n #define TARGET_SPE_ABI 0\n@@ -1214,8 +1217,8 @@ enum reg_class\n /* Return a class of registers that cannot change FROM mode to TO mode.  */\n \n #define CANNOT_CHANGE_MODE_CLASS(FROM, TO, CLASS)\t\t\t  \\\n-  (((DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_DARWIN)\t\t  \\\n-    && GET_MODE_SIZE (FROM) >= 8 && GET_MODE_SIZE (TO) >= 8)\t\t  \\\n+  (!TARGET_IEEEQUAD\t\t\t\t\t\t\t  \\\n+   && GET_MODE_SIZE (FROM) >= 8 && GET_MODE_SIZE (TO) >= 8\t\t  \\\n    ? 0\t\t\t\t\t\t\t\t\t  \\\n    : GET_MODE_SIZE (FROM) != GET_MODE_SIZE (TO)\t\t\t\t  \\\n    ? reg_classes_intersect_p (FLOAT_REGS, CLASS)\t\t\t  \\"}, {"sha": "2dabd8996fcaacf5778c7d7ee8f754abe6b0bb5b", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/602ea4d30716a6c72c6ee7fc8207a87e58a40d80/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/602ea4d30716a6c72c6ee7fc8207a87e58a40d80/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=602ea4d30716a6c72c6ee7fc8207a87e58a40d80", "patch": "@@ -1,6 +1,7 @@\n ;; Machine description for IBM RISC System 6000 (POWER) for GNU C compiler\n ;; Copyright (C) 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-;; 1999, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+;; 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n+;; Free Software Foundation, Inc.\n ;; Contributed by Richard Kenner (kenner@vlsi1.ultra.nyu.edu)\n \n ;; This file is part of GCC.\n@@ -151,7 +152,7 @@\n ; Any hardware-supported floating-point mode\n (define_mode_macro FP [(SF \"TARGET_HARD_FLOAT\")\n   (DF \"TARGET_HARD_FLOAT && (TARGET_FPRS || TARGET_E500_DOUBLE)\")\n-  (TF \"(DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_DARWIN)\n+  (TF \"!TARGET_IEEEQUAD\n    && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_LONG_DOUBLE_128\")])\n \n ; Various instructions that come in SI and DI forms.\n@@ -8249,7 +8250,7 @@\n (define_expand \"movtf\"\n   [(set (match_operand:TF 0 \"general_operand\" \"\")\n \t(match_operand:TF 1 \"any_operand\" \"\"))]\n-  \"(DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_DARWIN)\n+  \"!TARGET_IEEEQUAD\n    && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_LONG_DOUBLE_128\"\n   \"{ rs6000_emit_move (operands[0], operands[1], TFmode); DONE; }\")\n \n@@ -8259,7 +8260,7 @@\n (define_insn_and_split \"*movtf_internal\"\n   [(set (match_operand:TF 0 \"nonimmediate_operand\" \"=o,f,f,r,Y,r\")\n \t(match_operand:TF 1 \"input_operand\"         \"f,o,f,YGHF,r,r\"))]\n-  \"(DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_DARWIN)\n+  \"!TARGET_IEEEQUAD\n    && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_LONG_DOUBLE_128\n    && (gpc_reg_operand (operands[0], TFmode)\n        || gpc_reg_operand (operands[1], TFmode))\"\n@@ -8273,7 +8274,7 @@\n   [(parallel [(set (match_operand:TF 0 \"nonimmediate_operand\" \"\")\n \t\t   (float_extend:TF (match_operand:DF 1 \"input_operand\" \"\")))\n \t      (use (match_dup 2))])]\n-  \"(DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_DARWIN)\n+  \"!TARGET_IEEEQUAD\n    && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_LONG_DOUBLE_128\"\n {\n   operands[2] = CONST0_RTX (DFmode);\n@@ -8283,7 +8284,7 @@\n   [(set (match_operand:TF 0 \"nonimmediate_operand\" \"=o,f,&f,r\")\n        (float_extend:TF (match_operand:DF 1 \"input_operand\" \"fr,mf,mf,rmGHF\")))\n    (use (match_operand:DF 2 \"zero_reg_mem_operand\" \"rf,m,f,n\"))]\n-  \"(DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_DARWIN)\n+  \"!TARGET_IEEEQUAD\n    && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_LONG_DOUBLE_128\"\n   \"#\"\n   \"&& reload_completed\"\n@@ -8301,7 +8302,7 @@\n (define_expand \"extendsftf2\"\n   [(set (match_operand:TF 0 \"nonimmediate_operand\" \"\")\n \t(float_extend:TF (match_operand:SF 1 \"gpc_reg_operand\" \"\")))]\n-  \"(DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_DARWIN)\n+  \"!TARGET_IEEEQUAD\n    && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_LONG_DOUBLE_128\"\n {\n   rtx tmp = gen_reg_rtx (DFmode);\n@@ -8313,14 +8314,14 @@\n (define_expand \"trunctfdf2\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"\")\n \t(float_truncate:DF (match_operand:TF 1 \"gpc_reg_operand\" \"\")))]\n-  \"(DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_DARWIN)\n+  \"!TARGET_IEEEQUAD\n    && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_LONG_DOUBLE_128\"\n   \"\")\n \n (define_insn_and_split \"trunctfdf2_internal1\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f,?f\")\n \t(float_truncate:DF (match_operand:TF 1 \"gpc_reg_operand\" \"0,f\")))]\n-  \"(DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_DARWIN) && !TARGET_XL_COMPAT\n+  \"!TARGET_IEEEQUAD && !TARGET_XL_COMPAT\n    && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_LONG_DOUBLE_128\"\n   \"@\n    #\n@@ -8336,7 +8337,7 @@\n (define_insn \"trunctfdf2_internal2\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(float_truncate:DF (match_operand:TF 1 \"gpc_reg_operand\" \"f\")))]\n-  \"(DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_DARWIN) && TARGET_XL_COMPAT\n+  \"!TARGET_IEEEQUAD && TARGET_XL_COMPAT\n    && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_LONG_DOUBLE_128\"\n   \"fadd %0,%1,%L1\"\n   [(set_attr \"type\" \"fp\")])\n@@ -8345,7 +8346,7 @@\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(float_truncate:SF (match_operand:TF 1 \"gpc_reg_operand\" \"f\")))\n    (clobber (match_scratch:DF 2 \"=f\"))]\n-  \"(DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_DARWIN)\n+  \"!TARGET_IEEEQUAD\n    && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_LONG_DOUBLE_128\"\n   \"#\"\n   \"&& reload_completed\"\n@@ -8358,7 +8359,7 @@\n (define_expand \"floatsitf2\"\n   [(set (match_operand:TF 0 \"gpc_reg_operand\" \"=f\")\n         (float:TF (match_operand:SI 1 \"gpc_reg_operand\" \"r\")))]\n-  \"(DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_DARWIN)\n+  \"!TARGET_IEEEQUAD\n    && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_LONG_DOUBLE_128\"\n {\n   rtx tmp = gen_reg_rtx (DFmode);\n@@ -8386,7 +8387,7 @@\n \t      (clobber (match_dup 3))\n \t      (clobber (match_dup 4))\n \t      (clobber (match_dup 5))])]\n-  \"(DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_DARWIN)\n+  \"!TARGET_IEEEQUAD\n    && (TARGET_POWER2 || TARGET_POWERPC)\n    && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_LONG_DOUBLE_128\"\n {\n@@ -8403,7 +8404,7 @@\n    (clobber (match_operand:DF 3 \"gpc_reg_operand\" \"=&f\"))\n    (clobber (match_operand:DI 4 \"gpc_reg_operand\" \"=f\"))\n    (clobber (match_operand:DI 5 \"memory_operand\" \"=o\"))]\n-  \"(DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_DARWIN)\n+  \"!TARGET_IEEEQUAD\n    && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_LONG_DOUBLE_128\"\n   \"#\"\n   \"&& (!no_new_pseudos || offsettable_nonstrict_memref_p (operands[5]))\"\n@@ -8424,7 +8425,7 @@\n (define_insn \"negtf2\"\n   [(set (match_operand:TF 0 \"gpc_reg_operand\" \"=f\")\n \t(neg:TF (match_operand:TF 1 \"gpc_reg_operand\" \"f\")))]\n-  \"(DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_DARWIN)\n+  \"!TARGET_IEEEQUAD\n    && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_LONG_DOUBLE_128\"\n   \"*\n {\n@@ -8439,7 +8440,7 @@\n (define_expand \"abstf2\"\n   [(set (match_operand:TF 0 \"gpc_reg_operand\" \"=f\")\n \t(abs:TF (match_operand:TF 1 \"gpc_reg_operand\" \"f\")))]\n-  \"(DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_DARWIN)\n+  \"!TARGET_IEEEQUAD\n    && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_LONG_DOUBLE_128\"\n   \"\n {\n@@ -8459,7 +8460,7 @@\n \t\t\t   (label_ref (match_operand 2 \"\" \"\"))\n \t\t\t   (pc)))\n    (set (match_dup 6) (neg:DF (match_dup 6)))]\n-  \"(DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_DARWIN)\n+  \"!TARGET_IEEEQUAD\n    && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_LONG_DOUBLE_128\"\n   \"\n {\n@@ -11398,7 +11399,7 @@\n   [(set (match_operand:CCFP 0 \"cc_reg_operand\" \"=y\")\n \t(compare:CCFP (match_operand:TF 1 \"gpc_reg_operand\" \"f\")\n \t\t      (match_operand:TF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"(DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_DARWIN) && !TARGET_XL_COMPAT\n+  \"!TARGET_IEEEQUAD && !TARGET_XL_COMPAT\n    && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_LONG_DOUBLE_128\"\n   \"fcmpu %0,%1,%2\\;bne %0,$+8\\;fcmpu %0,%L1,%L2\"\n   [(set_attr \"type\" \"fpcompare\")\n@@ -11416,7 +11417,7 @@\n     (clobber (match_scratch:DF 8 \"=f\"))\n     (clobber (match_scratch:DF 9 \"=f\"))\n     (clobber (match_scratch:DF 10 \"=f\"))]\n-  \"(DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_DARWIN) && TARGET_XL_COMPAT\n+  \"!TARGET_IEEEQUAD && TARGET_XL_COMPAT\n    && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_LONG_DOUBLE_128\"\n   \"#\"\n   \"&& reload_completed\""}, {"sha": "2ed454aeebf4b32d8e3dcd0c756f222c1fe5ab9b", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/602ea4d30716a6c72c6ee7fc8207a87e58a40d80/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/602ea4d30716a6c72c6ee7fc8207a87e58a40d80/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=602ea4d30716a6c72c6ee7fc8207a87e58a40d80", "patch": "@@ -1,6 +1,6 @@\n /* Target definitions for GNU compiler for PowerPC running System V.4\n    Copyright (C) 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,\n-   2004, 2005 Free Software Foundation, Inc.\n+   2004, 2005, 2006 Free Software Foundation, Inc.\n    Contributed by Cygnus Support.\n \n    This file is part of GCC.\n@@ -215,6 +215,13 @@ do {\t\t\t\t\t\t\t\t\t\\\n       error (\"-msecure-plt not supported by your assembler\");\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n+  if (TARGET_SOFT_FLOAT && TARGET_LONG_DOUBLE_128)\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      rs6000_long_double_type_size = 64;\t\t\t\t\\\n+      if (rs6000_explicit_options.long_double)\t\t\t\t\\\n+\twarning (0, \"soft-float and long-double-128 are incompatible\");\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n   /* Treat -fPIC the same as -mrelocatable.  */\t\t\t\t\\\n   if (flag_pic > 1 && DEFAULT_ABI != ABI_AIX)\t\t\t\t\\\n     target_flags |= MASK_RELOCATABLE | MASK_MINIMAL_TOC | MASK_NO_FP_IN_TOC; \\"}, {"sha": "2c30a89892fb45d5672ab1f53b4817cc419ed27f", "filename": "gcc/config/rs6000/t-linux64", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/602ea4d30716a6c72c6ee7fc8207a87e58a40d80/gcc%2Fconfig%2Frs6000%2Ft-linux64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/602ea4d30716a6c72c6ee7fc8207a87e58a40d80/gcc%2Fconfig%2Frs6000%2Ft-linux64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-linux64?ref=602ea4d30716a6c72c6ee7fc8207a87e58a40d80", "patch": "@@ -4,9 +4,7 @@\n LIB2FUNCS_EXTRA = tramp.S $(srcdir)/config/rs6000/ppc64-fp.c \\\n \t$(srcdir)/config/rs6000/darwin-ldouble.c\n \n-TARGET_LIBGCC2_CFLAGS = -mno-minimal-toc -fPIC -specs=bispecs\n-\n-SHLIB_MAPFILES += $(srcdir)/config/rs6000/libgcc-ppc64.ver\n+TARGET_LIBGCC2_CFLAGS += -mno-minimal-toc\n \n MULTILIB_OPTIONS        = m64/m32 msoft-float\n MULTILIB_DIRNAMES       = 64 32 nof\n@@ -32,13 +30,3 @@ fp-bit32.c: $(srcdir)/config/fp-bit.c\n \t  echo '#define FLOAT'; \\\n \t  cat $(srcdir)/config/fp-bit.c; \\\n \t  echo '#endif' ) > fp-bit32.c\n-\n-# Hack to use -mlong-double-128 just for compiling 64 bit libgcc\n-mklibgcc: bispecs\n-\n-bispecs: specs\n-\tif [ x`$(GCC_FOR_TARGET) -print-multi-os-directory` = x../lib ]; then \\\n-\t  sed -e '/cc1_options/{ n; s/$$/ %{m64:-mlong-double-128}/; }' < specs > $@; \\\n-\telse \\\n-\t  sed -e '/cc1_options/{ n; s/$$/ %{!m32:-mlong-double-128}/; }' < specs > $@; \\\n-\tfi"}, {"sha": "e58dfe5f68738ab30d04ab282145dc3a8c0650ca", "filename": "gcc/config/rs6000/t-ppccomm", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/602ea4d30716a6c72c6ee7fc8207a87e58a40d80/gcc%2Fconfig%2Frs6000%2Ft-ppccomm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/602ea4d30716a6c72c6ee7fc8207a87e58a40d80/gcc%2Fconfig%2Frs6000%2Ft-ppccomm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-ppccomm?ref=602ea4d30716a6c72c6ee7fc8207a87e58a40d80", "patch": "@@ -1,6 +1,6 @@\n # Common support for PowerPC ELF targets (both EABI and SVR4).\n \n-LIB2FUNCS_EXTRA = tramp.S\n+LIB2FUNCS_EXTRA = tramp.S $(srcdir)/config/rs6000/darwin-ldouble.c\n \n # This one can't end up in shared libgcc\n LIB2FUNCS_STATIC_EXTRA = eabi.S\n@@ -11,6 +11,18 @@ eabi.S: $(srcdir)/config/rs6000/eabi.asm\n tramp.S: $(srcdir)/config/rs6000/tramp.asm\n \tcat $(srcdir)/config/rs6000/tramp.asm > tramp.S\n \n+ifneq (,$findstring gnu,$(target))\n+TARGET_LIBGCC2_CFLAGS += -specs=ldblspecs\n+\n+SHLIB_MAPFILES += $(srcdir)/config/rs6000/libgcc-ppc-glibc.ver\n+\n+# Hack to use -mlong-double-128 only when not compiling nof libgcc\n+mklibgcc: ldblspecs\n+\n+ldblspecs: specs\n+\tsed -e '/cc1_options/{ n; s/$$/ %{!msoft-float:-mlong-double-128}/; }' < specs > $@\n+endif\n+\n # Switch synonyms\n MULTILIB_MATCHES_ENDIAN\t= mlittle=mlittle-endian mbig=mbig-endian\n MULTILIB_MATCHES_SYSV\t= mcall-sysv=mcall-sysv-eabi mcall-sysv=mcall-sysv-noeabi mcall-sysv=mcall-linux mcall-sysv=mcall-netbsd"}, {"sha": "8301a0a727537fc26145e52b4c2d9a60d2b5bb62", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/602ea4d30716a6c72c6ee7fc8207a87e58a40d80/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/602ea4d30716a6c72c6ee7fc8207a87e58a40d80/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=602ea4d30716a6c72c6ee7fc8207a87e58a40d80", "patch": "@@ -11118,16 +11118,6 @@ enhancements.\n @opindex mno-vrsave\n Generate VRSAVE instructions when generating AltiVec code.\n \n-@item -mabi=spe\n-@opindex mabi=spe\n-Extend the current ABI with SPE ABI extensions.  This does not change\n-the default ABI, instead it adds the SPE ABI extensions to the current\n-ABI@.\n-\n-@item -mabi=no-spe\n-@opindex mabi=no-spe\n-Disable Booke SPE ABI extensions for the current ABI@.\n-\n @item -msecure-plt\n @opindex msecure-plt\n Generate code that allows ld and ld.so to build executables and shared\n@@ -11490,7 +11480,27 @@ SVR4 ABI)@.\n @opindex mabi\n Extend the current ABI with a particular extension, or remove such extension.\n Valid values are @var{altivec}, @var{no-altivec}, @var{spe},\n-@var{no-spe}@.\n+@var{no-spe}, @var{ibmlongdouble}, @var{ieeelongdouble}@.\n+\n+@item -mabi=spe\n+@opindex mabi=spe\n+Extend the current ABI with SPE ABI extensions.  This does not change\n+the default ABI, instead it adds the SPE ABI extensions to the current\n+ABI@.\n+\n+@item -mabi=no-spe\n+@opindex mabi=no-spe\n+Disable Booke SPE ABI extensions for the current ABI@.\n+\n+@item -mabi=ibmlongdouble\n+@opindex mabi=ibmlongdouble\n+Change the current ABI to use IBM extended precision long double.\n+This is a PowerPC 32-bit SYSV ABI option.\n+\n+@item -mabi=ieeelongdouble\n+@opindex mabi=ieeelongdouble\n+Change the current ABI to use IEEE extended precision long double.\n+This is a PowerPC 32-bit Linux ABI option.\n \n @item -mprototype\n @itemx -mno-prototype"}, {"sha": "cb2e7fe40d819b6c1d040de26dae17206dcbad87", "filename": "gcc/libgcc-std.ver", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/602ea4d30716a6c72c6ee7fc8207a87e58a40d80/gcc%2Flibgcc-std.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/602ea4d30716a6c72c6ee7fc8207a87e58a40d80/gcc%2Flibgcc-std.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc-std.ver?ref=602ea4d30716a6c72c6ee7fc8207a87e58a40d80", "patch": "@@ -253,7 +253,11 @@ GCC_4.0.0 {\n   __multc3\n }\n \n-%inherit GCC_4.2.0 GCC_4.0.0\n+%inherit GCC_4.1.0 GCC_4.0.0\n+GCC_4.1.0 {\n+}\n+\n+%inherit GCC_4.2.0 GCC_4.1.0\n GCC_4.2.0 {\n   # unsigned-to-floating conversions\n   __floatunsisf"}, {"sha": "88e0df029cbba6fc6b4dfad6ee18f0abb479f323", "filename": "gcc/mklibgcc.in", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/602ea4d30716a6c72c6ee7fc8207a87e58a40d80/gcc%2Fmklibgcc.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/602ea4d30716a6c72c6ee7fc8207a87e58a40d80/gcc%2Fmklibgcc.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmklibgcc.in?ref=602ea4d30716a6c72c6ee7fc8207a87e58a40d80", "patch": "@@ -1,6 +1,7 @@\n #!/bin/sh\n # Construct makefile for libgcc.\n-#   Copyright (C) 2000, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+#   Copyright (C) 2000, 2002, 2003, 2004, 2005, 2006\n+#   Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n \n@@ -332,6 +333,11 @@ for ml in $MULTILIBS; do\n \n       if [ \"$fpbit\" ] ; then\n \t  for name in $fpfuncs; do\n+\t      case \"$name\" in\n+\t\t# _sf_to_tf and _df_to_tf require tp-bit.c\n+\t\t# being compiled in.\n+\t\t_[sd]f_to_tf) [ -z \"$TPBIT\" ] && continue;;\n+\t      esac\n \t      if [ \"$libgcc_s_so\" ]; then\n \t\t  out=\"libgcc/${dir}/${name}${objext}\"\n \t\t  outS=\"libgcc/${dir}/${name}_s${objext}\""}]}