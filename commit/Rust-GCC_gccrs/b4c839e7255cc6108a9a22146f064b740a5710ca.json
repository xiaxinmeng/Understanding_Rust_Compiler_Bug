{"sha": "b4c839e7255cc6108a9a22146f064b740a5710ca", "node_id": "C_kwDOANBUbNoAKGI0YzgzOWU3MjU1Y2M2MTA4YTlhMjIxNDZmMDY0Yjc0MGE1NzEwY2E", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-11-13T20:59:12Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-11-14T08:35:05Z"}, "message": "Revert \"sphinx: use proper lexers for target macros\"\n\nThis reverts commit c0eb1a3b7c944dd7cd5a4056a817a25aa8ce2569.", "tree": {"sha": "ed9cd27c9879e1308236cce2a7d8fdfa19281237", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed9cd27c9879e1308236cce2a7d8fdfa19281237"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4c839e7255cc6108a9a22146f064b740a5710ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4c839e7255cc6108a9a22146f064b740a5710ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4c839e7255cc6108a9a22146f064b740a5710ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4c839e7255cc6108a9a22146f064b740a5710ca/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b779e6bf0b7cf03a96bc68a31be7d39ca383f645", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b779e6bf0b7cf03a96bc68a31be7d39ca383f645", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b779e6bf0b7cf03a96bc68a31be7d39ca383f645"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "17fc9e1b0aaefde4c70d45b039b556d10a87d128", "filename": "gcc/doc/gccint/target-macros/tm.rst.in", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4c839e7255cc6108a9a22146f064b740a5710ca/gcc%2Fdoc%2Fgccint%2Ftarget-macros%2Ftm.rst.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4c839e7255cc6108a9a22146f064b740a5710ca/gcc%2Fdoc%2Fgccint%2Ftarget-macros%2Ftm.rst.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgccint%2Ftarget-macros%2Ftm.rst.in?ref=b4c839e7255cc6108a9a22146f064b740a5710ca", "patch": "@@ -1332,7 +1332,7 @@\n   \n   Given below example:\n   \n-  .. code-block:: gas\n+  .. code-block:: c++\n   \n         ldr r10, [r1, 4]\n         add r4, r4, r10\n@@ -1349,7 +1349,7 @@\n   this scheduling fusion pass works.  This hook calculates priority for each\n   instruction based on its fustion type, like:\n   \n-  .. code-block:: gas\n+  .. code-block:: c++\n   \n         ldr r10, [r1, 4]  ; fusion_pri=99,  pri=96\n         add r4, r4, r10   ; fusion_pri=100, pri=100\n@@ -1364,7 +1364,7 @@\n   to the priorities.  As a result, instructions of same fusion type will be\n   pushed together in instruction flow, like:\n   \n-  .. code-block:: gas\n+  .. code-block:: c++\n   \n         ldr r11, [r1, 0]\n         ldr r10, [r1, 4]\n@@ -3876,13 +3876,13 @@\n   contain UNSPECs or UNSPEC_VOLATILEs.  The DWARF 2 call frame debugging\n   info engine will invoke it on insns of the form\n   \n-  .. code-block::\n+  .. code-block:: c++\n   \n     (set (reg) (unspec [...] UNSPEC_INDEX))\n   \n   and\n   \n-  .. code-block::\n+  .. code-block:: c++\n   \n     (set (reg) (unspec_volatile [...] UNSPECV_INDEX)).\n   \n@@ -3900,7 +3900,7 @@\n   register :samp:`{R}` and set :samp:`*{factor}` and :samp:`*{offset}` such\n   that the value of the indeterminate is:\n   \n-  .. code-block::\n+  .. code-block:: c++\n   \n     value_of(R) / factor - offset\n   "}, {"sha": "7751b7fe7b14019756d31db32f567b7ae08e2577", "filename": "gcc/target.def", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4c839e7255cc6108a9a22146f064b740a5710ca/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4c839e7255cc6108a9a22146f064b740a5710ca/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=b4c839e7255cc6108a9a22146f064b740a5710ca", "patch": "@@ -1552,7 +1552,7 @@ instructions.\\n\\\n \\n\\\n Given below example:\\n\\\n \\n\\\n-.. code-block:: gas\\n\\\n+.. code-block:: c++\\n\\\n \\n\\\n       ldr r10, [r1, 4]\\n\\\n       add r4, r4, r10\\n\\\n@@ -1569,7 +1569,7 @@ loads are actually next to each other in instruction flow.  That's where\\n\\\n this scheduling fusion pass works.  This hook calculates priority for each\\n\\\n instruction based on its fustion type, like:\\n\\\n \\n\\\n-.. code-block:: gas\\n\\\n+.. code-block:: c++\\n\\\n \\n\\\n       ldr r10, [r1, 4]  ; fusion_pri=99,  pri=96\\n\\\n       add r4, r4, r10   ; fusion_pri=100, pri=100\\n\\\n@@ -1584,7 +1584,7 @@ Scheduling fusion pass then sorts all ready to issue instructions according\\n\\\n to the priorities.  As a result, instructions of same fusion type will be\\n\\\n pushed together in instruction flow, like:\\n\\\n \\n\\\n-.. code-block:: gas\\n\\\n+.. code-block:: c++\\n\\\n \\n\\\n       ldr r11, [r1, 0]\\n\\\n       ldr r10, [r1, 4]\\n\\\n@@ -4262,13 +4262,13 @@ DEFHOOK\n contain UNSPECs or UNSPEC_VOLATILEs.  The DWARF 2 call frame debugging\\n\\\n info engine will invoke it on insns of the form\\n\\\n \\n\\\n-.. code-block::\\n\\\n+.. code-block:: c++\\n\\\n \\n\\\n   (set (reg) (unspec [...] UNSPEC_INDEX))\\n\\\n \\n\\\n and\\n\\\n \\n\\\n-.. code-block::\\n\\\n+.. code-block:: c++\\n\\\n \\n\\\n   (set (reg) (unspec_volatile [...] UNSPECV_INDEX)).\\n\\\n \\n\\\n@@ -4284,7 +4284,7 @@ expression, with :samp:`{i}` counting from 1.  Return the number of a DWARF\\n\\\n register :samp:`{R}` and set :samp:`*{factor}` and :samp:`*{offset}` such\\n\\\n that the value of the indeterminate is:\\n\\\n \\n\\\n-.. code-block::\\n\\\n+.. code-block:: c++\\n\\\n \\n\\\n   value_of(R) / factor - offset\\n\\\n \\n\\"}]}