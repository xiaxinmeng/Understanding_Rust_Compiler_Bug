{"sha": "d2937a2e3f9d5e3e69f7ef71da685f6583ebf924", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDI5MzdhMmUzZjlkNWUzZTY5ZjdlZjcxZGE2ODVmNjU4M2ViZjkyNA==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2014-08-05T10:43:41Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2014-08-05T10:43:41Z"}, "message": "[AArch64] Implement some saturating math NEON intrinsics.\n\n\t* config/aarch64/aarch64-simd.md (aarch64_sqdmulh_laneq<mode>):\n\tUse VSDQ_HSI mode iterator.\n\t(aarch64_sqrdmulh_laneq<mode>): Likewise.\n\t(aarch64_sq<r>dmulh_laneq<mode>_internal): New define_insn.\n\t* config/aarch64/aarch64-simd-builtins.def (sqdmulh_laneq):\n\tUse BUILTIN_VDQHS macro.\n\t(sqrdmulh_laneq): Likewise.\n\t* config/aarch64/arm_neon.h (vqdmlalh_laneq_s16): New intrinsic.\n\t(vqdmlals_laneq_s32): Likewise.\n\t(vqdmlslh_laneq_s16): Likewise.\n\t(vqdmlsls_laneq_s32): Likewise.\n\t(vqdmulhh_laneq_s16): Likewise.\n\t(vqdmulhs_laneq_s32): Likewise.\n\t(vqrdmulhh_laneq_s16): Likewise.\n\t(vqrdmulhs_laneq_s32): Likewise.\n\n\t* gcc.target/aarch64/simd/vqdmlalh_laneq_s16_1.c: New test.\n\t* gcc.target/aarch64/simd/vqdmlals_laneq_s32_1.c: Likewise.\n\t* gcc.target/aarch64/simd/vqdmlslh_laneq_s16_1.c: Likewise.\n\t* gcc.target/aarch64/simd/vqdmlsls_laneq_s32_1.c: Likewise.\n\t* gcc.target/aarch64/simd/vqdmulhh_laneq_s16_1.c: Likewise.\n\t* gcc.target/aarch64/simd/vqdmulhs_laneq_s32_1.c: Likewise.\n\t* gcc.target/aarch64/simd/vqrdmulhh_laneq_s16_1.c: Likewise.\n\t* gcc.target/aarch64/simd/vqrdmulhs_laneq_s32_1.c: Likewise.\n\nFrom-SVN: r213635", "tree": {"sha": "f116d70f28b2289a3fedd91d0399dd25e0d7f8a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f116d70f28b2289a3fedd91d0399dd25e0d7f8a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2937a2e3f9d5e3e69f7ef71da685f6583ebf924", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2937a2e3f9d5e3e69f7ef71da685f6583ebf924", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2937a2e3f9d5e3e69f7ef71da685f6583ebf924", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2937a2e3f9d5e3e69f7ef71da685f6583ebf924/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ada5287e5505e44f570ae5c548afd5db221a5671", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ada5287e5505e44f570ae5c548afd5db221a5671", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ada5287e5505e44f570ae5c548afd5db221a5671"}], "stats": {"total": 375, "additions": 369, "deletions": 6}, "files": [{"sha": "491ff3870bba25f781599760eb123d4aa65a8ec5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2937a2e3f9d5e3e69f7ef71da685f6583ebf924/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2937a2e3f9d5e3e69f7ef71da685f6583ebf924/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d2937a2e3f9d5e3e69f7ef71da685f6583ebf924", "patch": "@@ -1,3 +1,21 @@\n+2014-08-05  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (aarch64_sqdmulh_laneq<mode>):\n+\tUse VSDQ_HSI mode iterator.\n+\t(aarch64_sqrdmulh_laneq<mode>): Likewise.\n+\t(aarch64_sq<r>dmulh_laneq<mode>_internal): New define_insn.\n+\t* config/aarch64/aarch64-simd-builtins.def (sqdmulh_laneq):\n+\tUse BUILTIN_VDQHS macro.\n+\t(sqrdmulh_laneq): Likewise.\n+\t* config/aarch64/arm_neon.h (vqdmlalh_laneq_s16): New intrinsic.\n+\t(vqdmlals_laneq_s32): Likewise.\n+\t(vqdmlslh_laneq_s16): Likewise.\n+\t(vqdmlsls_laneq_s32): Likewise.\n+\t(vqdmulhh_laneq_s16): Likewise.\n+\t(vqdmulhs_laneq_s32): Likewise.\n+\t(vqrdmulhh_laneq_s16): Likewise.\n+\t(vqrdmulhs_laneq_s32): Likewise.\n+\n 2014-08-05  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/aarch64/arm_neon.h (vmul_f64): New intrinsic."}, {"sha": "4f3bd12c8447e7125dfeba3f06536cdf9acc2440", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2937a2e3f9d5e3e69f7ef71da685f6583ebf924/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2937a2e3f9d5e3e69f7ef71da685f6583ebf924/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=d2937a2e3f9d5e3e69f7ef71da685f6583ebf924", "patch": "@@ -189,9 +189,9 @@\n   BUILTIN_VSDQ_HSI (BINOP, sqrdmulh, 0)\n   /* Implemented by aarch64_sq<r>dmulh_lane<q><mode>.  */\n   BUILTIN_VDQHS (TERNOP, sqdmulh_lane, 0)\n-  BUILTIN_VDQHS (TERNOP, sqdmulh_laneq, 0)\n+  BUILTIN_VSDQ_HSI (TERNOP, sqdmulh_laneq, 0)\n   BUILTIN_VDQHS (TERNOP, sqrdmulh_lane, 0)\n-  BUILTIN_VDQHS (TERNOP, sqrdmulh_laneq, 0)\n+  BUILTIN_VSDQ_HSI (TERNOP, sqrdmulh_laneq, 0)\n   BUILTIN_SD_HSI (TERNOP, sqdmulh_lane, 0)\n   BUILTIN_SD_HSI (TERNOP, sqrdmulh_lane, 0)\n "}, {"sha": "f5fa4aebe4cafe1430b31ca3a89ec5f3698d23bd", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2937a2e3f9d5e3e69f7ef71da685f6583ebf924/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2937a2e3f9d5e3e69f7ef71da685f6583ebf924/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=d2937a2e3f9d5e3e69f7ef71da685f6583ebf924", "patch": "@@ -2793,8 +2793,8 @@\n )\n \n (define_expand \"aarch64_sqdmulh_laneq<mode>\"\n-  [(match_operand:VDQHS 0 \"register_operand\" \"\")\n-   (match_operand:VDQHS 1 \"register_operand\" \"\")\n+  [(match_operand:VSDQ_HSI 0 \"register_operand\" \"\")\n+   (match_operand:VSDQ_HSI 1 \"register_operand\" \"\")\n    (match_operand:<VCONQ> 2 \"register_operand\" \"\")\n    (match_operand:SI 3 \"immediate_operand\" \"\")]\n   \"TARGET_SIMD\"\n@@ -2810,8 +2810,8 @@\n )\n \n (define_expand \"aarch64_sqrdmulh_laneq<mode>\"\n-  [(match_operand:VDQHS 0 \"register_operand\" \"\")\n-   (match_operand:VDQHS 1 \"register_operand\" \"\")\n+  [(match_operand:VSDQ_HSI 0 \"register_operand\" \"\")\n+   (match_operand:VSDQ_HSI 1 \"register_operand\" \"\")\n    (match_operand:<VCONQ> 2 \"register_operand\" \"\")\n    (match_operand:SI 3 \"immediate_operand\" \"\")]\n   \"TARGET_SIMD\"\n@@ -2890,6 +2890,21 @@\n   [(set_attr \"type\" \"neon_sat_mul_<Vetype>_scalar<q>\")]\n )\n \n+(define_insn \"aarch64_sq<r>dmulh_laneq<mode>_internal\"\n+  [(set (match_operand:SD_HSI 0 \"register_operand\" \"=w\")\n+        (unspec:SD_HSI\n+\t  [(match_operand:SD_HSI 1 \"register_operand\" \"w\")\n+           (vec_select:<VEL>\n+             (match_operand:<VCONQ> 2 \"register_operand\" \"<vwx>\")\n+             (parallel [(match_operand:SI 3 \"immediate_operand\" \"i\")]))]\n+\t VQDMULH))]\n+  \"TARGET_SIMD\"\n+  \"*\n+   operands[3] = GEN_INT (ENDIAN_LANE_N (<VCONQ>mode, INTVAL (operands[3])));\n+   return \\\"sq<r>dmulh\\\\t%<v>0, %<v>1, %2.<v>[%3]\\\";\"\n+  [(set_attr \"type\" \"neon_sat_mul_<Vetype>_scalar<q>\")]\n+)\n+\n ;; vqdml[sa]l\n \n (define_insn \"aarch64_sqdml<SBINQOPS:as>l<mode>\""}, {"sha": "1289ce170fd10f40fa541192fee14051d21bbcca", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2937a2e3f9d5e3e69f7ef71da685f6583ebf924/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2937a2e3f9d5e3e69f7ef71da685f6583ebf924/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=d2937a2e3f9d5e3e69f7ef71da685f6583ebf924", "patch": "@@ -19445,6 +19445,12 @@ vqdmlalh_lane_s16 (int32x1_t __a, int16x1_t __b, int16x4_t __c, const int __d)\n   return __builtin_aarch64_sqdmlal_lanehi (__a, __b, __c, __d);\n }\n \n+__extension__ static __inline int32_t __attribute__ ((__always_inline__))\n+vqdmlalh_laneq_s16 (int32_t __a, int16_t __b, int16x8_t __c, const int __d)\n+{\n+  return __builtin_aarch64_sqdmlal_laneqhi (__a, __b, __c, __d);\n+}\n+\n __extension__ static __inline int64_t __attribute__ ((__always_inline__))\n vqdmlals_s32 (int64_t __a, int32x1_t __b, int32x1_t __c)\n {\n@@ -19458,6 +19464,12 @@ vqdmlals_lane_s32 (int64x1_t __a, int32x1_t __b, int32x2_t __c, const int __d)\n       {__builtin_aarch64_sqdmlal_lanesi (__a[0], __b, __c, __d)};\n }\n \n+__extension__ static __inline int64_t __attribute__ ((__always_inline__))\n+vqdmlals_laneq_s32 (int64_t __a, int32_t __b, int32x4_t __c, const int __d)\n+{\n+  return __builtin_aarch64_sqdmlal_laneqsi (__a, __b, __c, __d);\n+}\n+\n /* vqdmlsl */\n \n __extension__ static __inline int32x4_t __attribute__ ((__always_inline__))\n@@ -19572,6 +19584,12 @@ vqdmlslh_lane_s16 (int32x1_t __a, int16x1_t __b, int16x4_t __c, const int __d)\n   return __builtin_aarch64_sqdmlsl_lanehi (__a, __b, __c, __d);\n }\n \n+__extension__ static __inline int32_t __attribute__ ((__always_inline__))\n+vqdmlslh_laneq_s16 (int32_t __a, int16_t __b, int16x8_t __c, const int __d)\n+{\n+  return __builtin_aarch64_sqdmlsl_laneqhi (__a, __b, __c, __d);\n+}\n+\n __extension__ static __inline int64_t __attribute__ ((__always_inline__))\n vqdmlsls_s32 (int64_t __a, int32x1_t __b, int32x1_t __c)\n {\n@@ -19584,6 +19602,12 @@ vqdmlsls_lane_s32 (int64x1_t __a, int32x1_t __b, int32x2_t __c, const int __d)\n   return (int64x1_t) {__builtin_aarch64_sqdmlsl_lanesi (__a[0], __b, __c, __d)};\n }\n \n+__extension__ static __inline int64_t __attribute__ ((__always_inline__))\n+vqdmlsls_laneq_s32 (int64_t __a, int32_t __b, int32x4_t __c, const int __d)\n+{\n+  return __builtin_aarch64_sqdmlsl_laneqsi (__a, __b, __c, __d);\n+}\n+\n /* vqdmulh */\n \n __extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n@@ -19622,6 +19646,12 @@ vqdmulhh_lane_s16 (int16x1_t __a, int16x4_t __b, const int __c)\n   return __builtin_aarch64_sqdmulh_lanehi (__a, __b, __c);\n }\n \n+__extension__ static __inline int16_t __attribute__ ((__always_inline__))\n+vqdmulhh_laneq_s16 (int16_t __a, int16x8_t __b, const int __c)\n+{\n+  return __builtin_aarch64_sqdmulh_laneqhi (__a, __b, __c);\n+}\n+\n __extension__ static __inline int32x1_t __attribute__ ((__always_inline__))\n vqdmulhs_s32 (int32x1_t __a, int32x1_t __b)\n {\n@@ -19634,6 +19664,12 @@ vqdmulhs_lane_s32 (int32x1_t __a, int32x2_t __b, const int __c)\n   return __builtin_aarch64_sqdmulh_lanesi (__a, __b, __c);\n }\n \n+__extension__ static __inline int32_t __attribute__ ((__always_inline__))\n+vqdmulhs_laneq_s32 (int32_t __a, int32x4_t __b, const int __c)\n+{\n+  return __builtin_aarch64_sqdmulh_laneqsi (__a, __b, __c);\n+}\n+\n /* vqdmull */\n \n __extension__ static __inline int32x4_t __attribute__ ((__always_inline__))\n@@ -19938,6 +19974,12 @@ vqrdmulhh_lane_s16 (int16x1_t __a, int16x4_t __b, const int __c)\n   return __builtin_aarch64_sqrdmulh_lanehi (__a, __b, __c);\n }\n \n+__extension__ static __inline int16_t __attribute__ ((__always_inline__))\n+vqrdmulhh_laneq_s16 (int16_t __a, int16x8_t __b, const int __c)\n+{\n+  return __builtin_aarch64_sqrdmulh_laneqhi (__a, __b, __c);\n+}\n+\n __extension__ static __inline int32x1_t __attribute__ ((__always_inline__))\n vqrdmulhs_s32 (int32x1_t __a, int32x1_t __b)\n {\n@@ -19950,6 +19992,12 @@ vqrdmulhs_lane_s32 (int32x1_t __a, int32x2_t __b, const int __c)\n   return __builtin_aarch64_sqrdmulh_lanesi (__a, __b, __c);\n }\n \n+__extension__ static __inline int32_t __attribute__ ((__always_inline__))\n+vqrdmulhs_laneq_s32 (int32_t __a, int32x4_t __b, const int __c)\n+{\n+  return __builtin_aarch64_sqrdmulh_laneqsi (__a, __b, __c);\n+}\n+\n /* vqrshl */\n \n __extension__ static __inline int8x8_t __attribute__ ((__always_inline__))"}, {"sha": "b218b0bda59f02826aec357823f17a36727a99dc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2937a2e3f9d5e3e69f7ef71da685f6583ebf924/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2937a2e3f9d5e3e69f7ef71da685f6583ebf924/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d2937a2e3f9d5e3e69f7ef71da685f6583ebf924", "patch": "@@ -1,3 +1,14 @@\n+2014-08-05  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/simd/vqdmlalh_laneq_s16_1.c: New test.\n+\t* gcc.target/aarch64/simd/vqdmlals_laneq_s32_1.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqdmlslh_laneq_s16_1.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqdmlsls_laneq_s32_1.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqdmulhh_laneq_s16_1.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqdmulhs_laneq_s32_1.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqrdmulhh_laneq_s16_1.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqrdmulhs_laneq_s32_1.c: Likewise.\n+\n 2014-08-05  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* gcc.target/aarch64/simd/vmul_f64_1.c: New test."}, {"sha": "7178e282f559bfb393a94de266f897c7bbff1bd2", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmlalh_laneq_s16_1.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2937a2e3f9d5e3e69f7ef71da685f6583ebf924/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlalh_laneq_s16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2937a2e3f9d5e3e69f7ef71da685f6583ebf924/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlalh_laneq_s16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlalh_laneq_s16_1.c?ref=d2937a2e3f9d5e3e69f7ef71da685f6583ebf924", "patch": "@@ -0,0 +1,35 @@\n+/* Test the vqdmlalh_laneq_s16 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+\n+extern void abort (void);\n+\n+int\n+main (void)\n+{\n+  int32_t arg1;\n+  int16_t arg2;\n+  int16x8_t arg3;\n+  int32_t actual;\n+  int32_t expected;\n+\n+  arg1 = 0x80000000;\n+  arg2 = -24497;\n+  arg3 = vcombine_s16 (vcreate_s16 (0x008a80007fff7fffULL),\n+                       vcreate_s16 (0xfffffa797fff8000ULL));\n+\n+  actual = vqdmlalh_laneq_s16 (arg1, arg2, arg3, 7);\n+  expected = -2147434654;\n+\n+  if (expected != actual)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+\n+/* { dg-final { scan-assembler-times \"sqdmlal\\[ \\t\\]+\\[sS\\]\\[0-9\\]+, ?\\[hH\\]\\[0-9\\]+, ?\\[vV\\]\\[0-9\\]+\\.\\[hH\\]\\\\\\[7\\\\\\]\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "7c508e14f0c498e896cd3f18ab0460fc2d5da2d2", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmlals_laneq_s32_1.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2937a2e3f9d5e3e69f7ef71da685f6583ebf924/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlals_laneq_s32_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2937a2e3f9d5e3e69f7ef71da685f6583ebf924/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlals_laneq_s32_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlals_laneq_s32_1.c?ref=d2937a2e3f9d5e3e69f7ef71da685f6583ebf924", "patch": "@@ -0,0 +1,35 @@\n+/* Test the vqdmlals_laneq_s32 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+\n+extern void abort (void);\n+\n+int\n+main (void)\n+{\n+  int64_t arg1;\n+  int32_t arg2;\n+  int32x4_t arg3;\n+  int64_t actual;\n+  int64_t expected;\n+\n+  arg1 = -9223182289494545592LL;\n+  arg2 = 32768;\n+  arg3 = vcombine_s32 (vcreate_s32 (0xffff7fff8000ffffULL),\n+                       vcreate_s32 (0x80000000ffff0000ULL));\n+\n+  actual = vqdmlals_laneq_s32 (arg1, arg2, arg3, 3);\n+  expected = -9223323026982900920LL;\n+\n+  if (expected != actual)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+\n+/* { dg-final { scan-assembler-times \"sqdmlal\\[ \\t\\]+\\[dD\\]\\[0-9\\]+, ?\\[sS\\]\\[0-9\\]+, ?\\[vV\\]\\[0-9\\]+\\.\\[sS\\]\\\\\\[3\\\\\\]\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "46201e8c86dcf0078b50da3843e8fb41ce6899e9", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmlslh_laneq_s16_1.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2937a2e3f9d5e3e69f7ef71da685f6583ebf924/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlslh_laneq_s16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2937a2e3f9d5e3e69f7ef71da685f6583ebf924/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlslh_laneq_s16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlslh_laneq_s16_1.c?ref=d2937a2e3f9d5e3e69f7ef71da685f6583ebf924", "patch": "@@ -0,0 +1,35 @@\n+/* Test the vqdmlslh_laneq_s16 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+\n+extern void abort (void);\n+\n+int\n+main (void)\n+{\n+  int32_t arg1;\n+  int16_t arg2;\n+  int16x8_t arg3;\n+  int32_t actual;\n+  int32_t expected;\n+\n+  arg1 = -2147450881;\n+  arg2 = 32767;\n+  arg3 = vcombine_s16 (vcreate_s16 (0x359d7fff00007fffULL),\n+                       vcreate_s16 (0xe678ffff00008000ULL));\n+\n+  actual = vqdmlslh_laneq_s16 (arg1, arg2, arg3, 4);\n+  expected = -32769;\n+\n+  if (expected != actual)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+\n+/* { dg-final { scan-assembler-times \"sqdmlsl\\[ \\t\\]+\\[sS\\]\\[0-9\\]+, ?\\[hH\\]\\[0-9\\]+, ?\\[vV\\]\\[0-9\\]+\\.\\[hH\\]\\\\\\[4\\\\\\]\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "8644ac65984f0d45b78ca876dda7feab88042e11", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmlsls_laneq_s32_1.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2937a2e3f9d5e3e69f7ef71da685f6583ebf924/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlsls_laneq_s32_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2937a2e3f9d5e3e69f7ef71da685f6583ebf924/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlsls_laneq_s32_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlsls_laneq_s32_1.c?ref=d2937a2e3f9d5e3e69f7ef71da685f6583ebf924", "patch": "@@ -0,0 +1,35 @@\n+/* Test the vqdmlsls_laneq_s32 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+\n+extern void abort (void);\n+\n+int\n+main (void)\n+{\n+  int64_t arg1;\n+  int32_t arg2;\n+  int32x4_t arg3;\n+  int64_t actual;\n+  int64_t expected;\n+\n+  arg1 = 140733193453567LL;\n+  arg2 = 25544;\n+  arg3 = vcombine_s32 (vcreate_s32 (0x417b8000ffff8397LL),\n+                       vcreate_s32 (0x7fffffff58488000LL));\n+\n+\n+  actual = vqdmlsls_laneq_s32 (arg1, arg2, arg3, 3);\n+  expected = 31022548895631LL;\n+\n+  if (expected != actual)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-times \"sqdmlsl\\[ \\t\\]+\\[dD\\]\\[0-9\\]+, ?\\[sS\\]\\[0-9\\]+, ?\\[vV\\]\\[0-9\\]+\\.\\[sS\\]\\\\\\[3\\\\\\]\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "0e722542cded53f1699f5745a530e276175e45e9", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmulhh_laneq_s16_1.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2937a2e3f9d5e3e69f7ef71da685f6583ebf924/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulhh_laneq_s16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2937a2e3f9d5e3e69f7ef71da685f6583ebf924/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulhh_laneq_s16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulhh_laneq_s16_1.c?ref=d2937a2e3f9d5e3e69f7ef71da685f6583ebf924", "patch": "@@ -0,0 +1,33 @@\n+/* Test the vqdmulhh_laneq_s16 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+\n+extern void abort (void);\n+\n+int\n+main (void)\n+{\n+  int16_t arg1;\n+  int16x8_t arg2;\n+  int16_t actual;\n+  int16_t expected;\n+\n+  arg1 = 268;\n+  arg2 = vcombine_s16 (vcreate_s16 (0xffffffff00000000ULL),\n+                       vcreate_s16 (0x0000800018410000ULL));\n+\n+  actual = vqdmulhh_laneq_s16 (arg1, arg2, 7);\n+  expected = 0;\n+\n+  if (expected != actual)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+\n+/* { dg-final { scan-assembler-times \"sqdmulh\\[ \\t\\]+\\[hH\\]\\[0-9\\]+, ?\\[hH\\]\\[0-9\\]+, ?\\[vV\\]\\[0-9\\]+\\.\\[hH\\]\\\\\\[7\\\\\\]\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "0c75c5adb75831bf3b1719e609b1411dc48f348c", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmulhs_laneq_s32_1.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2937a2e3f9d5e3e69f7ef71da685f6583ebf924/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulhs_laneq_s32_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2937a2e3f9d5e3e69f7ef71da685f6583ebf924/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulhs_laneq_s32_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulhs_laneq_s32_1.c?ref=d2937a2e3f9d5e3e69f7ef71da685f6583ebf924", "patch": "@@ -0,0 +1,33 @@\n+/* Test the vqdmulhs_laneq_s32 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+\n+extern void abort (void);\n+\n+int\n+main (void)\n+{\n+  int32_t arg1;\n+  int32x4_t arg2;\n+  int32_t actual;\n+  int32_t expected;\n+\n+  arg1 = 0x80000000;\n+  arg2 = vcombine_s32 (vcreate_s32 (0x950dffffc4f40000ULL),\n+                       vcreate_s32 (0x7fff8000274a8000ULL));\n+\n+  actual = vqdmulhs_laneq_s32 (arg1, arg2, 3);\n+  expected = -2147450880;\n+\n+  if (expected != actual)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+\n+/* { dg-final { scan-assembler-times \"sqdmulh\\[ \\t\\]+\\[sS\\]\\[0-9\\]+, ?\\[sS\\]\\[0-9\\]+, ?\\[vV\\]\\[0-9\\]+\\.\\[sS\\]\\\\\\[3\\\\\\]\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "3c2a074ece005279584a44213aef50b19e6a2869", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqrdmulhh_laneq_s16_1.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2937a2e3f9d5e3e69f7ef71da685f6583ebf924/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulhh_laneq_s16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2937a2e3f9d5e3e69f7ef71da685f6583ebf924/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulhh_laneq_s16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulhh_laneq_s16_1.c?ref=d2937a2e3f9d5e3e69f7ef71da685f6583ebf924", "patch": "@@ -0,0 +1,33 @@\n+/* Test the vqrdmulhh_laneq_s16 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+\n+extern void abort (void);\n+\n+int\n+main (void)\n+{\n+  int16_t arg1;\n+  int16x8_t arg2;\n+  int16_t actual;\n+  int16_t expected;\n+\n+  arg1 = 0;\n+  arg2 = vcombine_s16 (vcreate_s16 (0x7fffffffa7908000ULL),\n+                       vcreate_s16 (0x8000d2607fff0000ULL));\n+\n+  actual = vqrdmulhh_laneq_s16 (arg1, arg2, 7);\n+  expected = 0;\n+\n+  if (expected != actual)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+\n+/* { dg-final { scan-assembler-times \"sqrdmulh\\[ \\t\\]+\\[hH\\]\\[0-9\\]+, ?\\[hH\\]\\[0-9\\]+, ?\\[vV\\]\\[0-9\\]+\\.\\[hH\\]\\\\\\[7\\\\\\]\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "7e66213de09a605642f4b71963b7a953812b98d5", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqrdmulhs_laneq_s32_1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2937a2e3f9d5e3e69f7ef71da685f6583ebf924/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulhs_laneq_s32_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2937a2e3f9d5e3e69f7ef71da685f6583ebf924/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulhs_laneq_s32_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulhs_laneq_s32_1.c?ref=d2937a2e3f9d5e3e69f7ef71da685f6583ebf924", "patch": "@@ -0,0 +1,32 @@\n+/* Test the vqrdmulhs_laneq_s32 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+\n+extern void abort (void);\n+\n+int\n+main (void)\n+{\n+  int32_t arg1;\n+  int32x4_t arg2;\n+  int32_t actual;\n+  int32_t expected;\n+\n+  arg1 = 32768;\n+  arg2 = vcombine_s32 (vcreate_s32 (0x8000ffffffffcd5bULL),\n+                       vcreate_s32 (0x7fffffffffffffffULL));\n+\n+  actual = vqrdmulhs_laneq_s32 (arg1, arg2, 3);\n+  expected = 32768;\n+\n+  if (expected != actual)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-times \"sqrdmulh\\[ \\t\\]+\\[sS\\]\\[0-9\\]+, ?\\[sS\\]\\[0-9\\]+, ?\\[vV\\]\\[0-9\\]+\\.\\[sS\\]\\\\\\[3\\\\\\]\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}]}