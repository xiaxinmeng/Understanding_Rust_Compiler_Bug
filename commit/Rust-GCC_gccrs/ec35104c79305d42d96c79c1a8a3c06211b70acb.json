{"sha": "ec35104c79305d42d96c79c1a8a3c06211b70acb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWMzNTEwNGM3OTMwNWQ0MmQ5NmM3OWMxYThhM2MwNjIxMWI3MGFjYg==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1998-08-18T18:29:40Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-08-18T18:29:40Z"}, "message": "combine.c (can_combine_p): Allow combining insns with REG_RETVAL notes.\n\n\t* combine.c (can_combine_p): Allow combining insns with REG_RETVAL\n\tnotes.\n\t(try_combine): Allow combining insns with REG_LIBCALL notes.\n\nFrom-SVN: r21833", "tree": {"sha": "5aed366b6918755d29ab59bf170407c3b2b93ac5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5aed366b6918755d29ab59bf170407c3b2b93ac5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec35104c79305d42d96c79c1a8a3c06211b70acb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec35104c79305d42d96c79c1a8a3c06211b70acb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec35104c79305d42d96c79c1a8a3c06211b70acb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec35104c79305d42d96c79c1a8a3c06211b70acb/comments", "author": null, "committer": null, "parents": [{"sha": "e958d4576a5d91454cf9368be3a3444e7efbdb0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e958d4576a5d91454cf9368be3a3444e7efbdb0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e958d4576a5d91454cf9368be3a3444e7efbdb0a"}], "stats": {"total": 17, "additions": 16, "deletions": 1}, "files": [{"sha": "02b3a5fe1136acb1271246d2d67363c9c7d74ed9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec35104c79305d42d96c79c1a8a3c06211b70acb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec35104c79305d42d96c79c1a8a3c06211b70acb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ec35104c79305d42d96c79c1a8a3c06211b70acb", "patch": "@@ -5,6 +5,10 @@ Tue Aug 18 12:40:27 1998  Richard Henderson  <rth@cygnus.com>\n \n Tue Aug 18 10:33:30 1998  Jeffrey A Law  (law@cygnus.com)\n \n+\t* combine.c (can_combine_p): Allow combining insns with REG_RETVAL\n+\tnotes.\n+\t(try_combine): Allow combining insns with REG_LIBCALL notes.\n+\n \t* expr.c (emit_block_move): Do not call memcpy as a libcall\n \tinstead build up a CALL_EXPR and call it like any other\n \tfunction."}, {"sha": "5c050f2a9baaff104b9f053f3464029c9de2bee6", "filename": "gcc/combine.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec35104c79305d42d96c79c1a8a3c06211b70acb/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec35104c79305d42d96c79c1a8a3c06211b70acb/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=ec35104c79305d42d96c79c1a8a3c06211b70acb", "patch": "@@ -958,8 +958,14 @@ can_combine_p (insn, i3, pred, succ, pdest, psrc)\n       /* Don't substitute into an incremented register.  */\n       || FIND_REG_INC_NOTE (i3, dest)\n       || (succ && FIND_REG_INC_NOTE (succ, dest))\n+#if 0\n       /* Don't combine the end of a libcall into anything.  */\n+      /* ??? This gives worse code, and appears to be unnecessary, since no\n+\t pass after flow uses REG_LIBCALL/REG_RETVAL notes.  Local-alloc does\n+\t use REG_RETVAL notes for noconflict blocks, but other code here\n+\t makes sure that those insns don't disappear.  */\n       || find_reg_note (insn, REG_RETVAL, NULL_RTX)\n+#endif\n       /* Make sure that DEST is not used after SUCC but before I3.  */\n       || (succ && ! all_adjacent\n \t  && reg_used_between_p (dest, succ, i3))\n@@ -1371,7 +1377,12 @@ try_combine (i3, i2, i1)\n   if (GET_RTX_CLASS (GET_CODE (i3)) != 'i'\n       || GET_RTX_CLASS (GET_CODE (i2)) != 'i'\n       || (i1 && GET_RTX_CLASS (GET_CODE (i1)) != 'i')\n-      || find_reg_note (i3, REG_LIBCALL, NULL_RTX))\n+#if 0\n+      /* ??? This gives worse code, and appears to be unnecessary, since no\n+\t pass after flow uses REG_LIBCALL/REG_RETVAL notes.  */\n+      || find_reg_note (i3, REG_LIBCALL, NULL_RTX)\n+#endif\n+)\n     return 0;\n \n   combine_attempts++;"}]}