{"sha": "3274deff9fbb7530ef76ba973070d696696d20ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzI3NGRlZmY5ZmJiNzUzMGVmNzZiYTk3MzA3MGQ2OTY2OTZkMjBlYw==", "commit": {"author": {"name": "James E Wilson", "email": "wilson@specifixinc.com", "date": "2004-09-10T03:51:40Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2004-09-10T03:51:40Z"}, "message": "Fix ICE on invalid input, and eliminate confusing error message.\n\n* c-typeck.c (convert_for_assignment): Check that rhs has VECTOR_TYPE\nbefore calling vector_types_convertible_p.\n(digest_init): Check that inside_init has VECTOR_TYPE before calling\nvector_types_convertible_p.  Don't give another error if\nconvert_for_assignment returns error_mark_node.\n\nFrom-SVN: r87273", "tree": {"sha": "1c4bb669ecba87bd3145ccb5f02df805439797e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c4bb669ecba87bd3145ccb5f02df805439797e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3274deff9fbb7530ef76ba973070d696696d20ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3274deff9fbb7530ef76ba973070d696696d20ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3274deff9fbb7530ef76ba973070d696696d20ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3274deff9fbb7530ef76ba973070d696696d20ec/comments", "author": null, "committer": null, "parents": [{"sha": "049e524f68be57df307f11ea9d3d28afdc37d7c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/049e524f68be57df307f11ea9d3d28afdc37d7c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/049e524f68be57df307f11ea9d3d28afdc37d7c3"}], "stats": {"total": 24, "additions": 22, "deletions": 2}, "files": [{"sha": "1b7f10751dc60bd76064d80fd4a3cd9f8ea24a4a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3274deff9fbb7530ef76ba973070d696696d20ec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3274deff9fbb7530ef76ba973070d696696d20ec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3274deff9fbb7530ef76ba973070d696696d20ec", "patch": "@@ -1,3 +1,11 @@\n+2004-09-09  James E Wilson  <wilson@specifixinc.com>\n+\n+\t* c-typeck.c (convert_for_assignment): Check that rhs has VECTOR_TYPE\n+\tbefore calling vector_types_convertible_p.\n+\t(digest_init): Check that inside_init has VECTOR_TYPE before calling\n+\tvector_types_convertible_p.  Don't give another error if\n+\tconvert_for_assignment returns error_mark_node.\n+\n 2004-09-09  Roger Sayle  <roger@eyesopen.com>\n \n \tPR middle-end/17055"}, {"sha": "a815e2f1193849dc69e21c0537e35f20d08628c2", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3274deff9fbb7530ef76ba973070d696696d20ec/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3274deff9fbb7530ef76ba973070d696696d20ec/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=3274deff9fbb7530ef76ba973070d696696d20ec", "patch": "@@ -3407,7 +3407,7 @@ convert_for_assignment (tree type, tree rhs, const char *errtype,\n       return rhs;\n     }\n   /* Some types can interconvert without explicit casts.  */\n-  else if (codel == VECTOR_TYPE\n+  else if (codel == VECTOR_TYPE && coder == VECTOR_TYPE\n            && vector_types_convertible_p (type, TREE_TYPE (rhs)))\n     return convert (type, rhs);\n   /* Arithmetic types all interconvert, and enum is treated like int.  */\n@@ -4082,6 +4082,7 @@ digest_init (tree type, tree init, bool strict_string, int require_constant)\n      vector constructor is not constant (e.g. {1,2,3,foo()}) then punt\n      below and handle as a constructor.  */\n     if (code == VECTOR_TYPE\n+\t&& TREE_CODE (TREE_TYPE (inside_init)) == VECTOR_TYPE\n         && vector_types_convertible_p (TREE_TYPE (inside_init), type)\n         && TREE_CONSTANT (inside_init))\n       {\n@@ -4188,7 +4189,10 @@ digest_init (tree type, tree init, bool strict_string, int require_constant)\n \t= convert_for_assignment (type, init, _(\"initialization\"),\n \t\t\t\t  NULL_TREE, NULL_TREE, 0);\n \n-      if (require_constant && ! TREE_CONSTANT (inside_init))\n+      /* Check to see if we have already given an error message.  */\n+      if (inside_init == error_mark_node)\n+\t;\n+      else if (require_constant && ! TREE_CONSTANT (inside_init))\n \t{\n \t  error_init (\"initializer element is not constant\");\n \t  inside_init = error_mark_node;"}, {"sha": "1dbc50a01d5eaed1e6a520605bdd3c008a9e4885", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3274deff9fbb7530ef76ba973070d696696d20ec/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3274deff9fbb7530ef76ba973070d696696d20ec/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3274deff9fbb7530ef76ba973070d696696d20ec", "patch": "@@ -1,3 +1,7 @@\n+2004-09-09  James E Wilson  <wilson@specifixinc.com>\n+\n+\t* gcc.dg/init-vec-1.c: New test.\n+\n 2004-09-09  Roger Sayle  <roger@eyesopen.com>\n \n \tPR middle-end/17055"}, {"sha": "9921b16a91ec9600f3ceb1b70c6eae93478920f3", "filename": "gcc/testsuite/gcc.dg/init-vec-1.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3274deff9fbb7530ef76ba973070d696696d20ec/gcc%2Ftestsuite%2Fgcc.dg%2Finit-vec-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3274deff9fbb7530ef76ba973070d696696d20ec/gcc%2Ftestsuite%2Fgcc.dg%2Finit-vec-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finit-vec-1.c?ref=3274deff9fbb7530ef76ba973070d696696d20ec", "patch": "@@ -0,0 +1,4 @@\n+/* Don't ICE or emit spurious errors when init a vector with a scalar.  */\n+/* { dg-do compile } */\n+typedef float v2sf __attribute__ ((vector_size (8)));\n+v2sf a = 0.0;  /* { dg-error \"incompatible types\" } */"}]}