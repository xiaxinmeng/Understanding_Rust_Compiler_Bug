{"sha": "50554999f23127a962ef17f1ea06961a09811f75", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTA1NTQ5OTlmMjMxMjdhOTYyZWYxN2YxZWEwNjk2MWEwOTgxMWY3NQ==", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2020-01-16T17:50:05Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-05T12:17:47Z"}, "message": "[Ada] Simplify iteration over components\n\n2020-06-05  Piotr Trojanek  <trojanek@adacore.com>\n\ngcc/ada/\n\n\t* einfo.adb: Minor reformatting.\n\t* sem_util.adb (Has_Full_Default_Initialization,\n\tIs_Partially_Initialized_Type, Caller_Known_Size_Record,\n\tLarge_Max_Size_Mutable): Iterate with\n\tFirst_Component/Next_Component; rename Ent to Comp.", "tree": {"sha": "27d7f93449e9daba4f8ede0945bcff3206b3d461", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27d7f93449e9daba4f8ede0945bcff3206b3d461"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50554999f23127a962ef17f1ea06961a09811f75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50554999f23127a962ef17f1ea06961a09811f75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50554999f23127a962ef17f1ea06961a09811f75", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50554999f23127a962ef17f1ea06961a09811f75/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7d193178f7b3a7747849d4f8574091bc2d4a7f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7d193178f7b3a7747849d4f8574091bc2d4a7f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7d193178f7b3a7747849d4f8574091bc2d4a7f8"}], "stats": {"total": 141, "additions": 67, "deletions": 74}, "files": [{"sha": "cbcf9e3ff7428120bbd91281b7cba0eb49d27d9d", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50554999f23127a962ef17f1ea06961a09811f75/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50554999f23127a962ef17f1ea06961a09811f75/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=50554999f23127a962ef17f1ea06961a09811f75", "patch": "@@ -9599,7 +9599,7 @@ package body Einfo is\n             return Empty;\n          end if;\n \n-      --  For non-incomplete, non-private types, return the type itself Also\n+      --  For non-incomplete, non-private types, return the type itself. Also\n       --  for entities that are not types at all return the entity itself.\n \n       else"}, {"sha": "788704ae23b35462051c938af6cc9bc75a5957a9", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 66, "deletions": 73, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50554999f23127a962ef17f1ea06961a09811f75/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50554999f23127a962ef17f1ea06961a09811f75/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=50554999f23127a962ef17f1ea06961a09811f75", "patch": "@@ -11288,17 +11288,16 @@ package body Sem_Util is\n          --  Inspect all entities defined in the scope of the type, looking for\n          --  uninitialized components.\n \n-         Comp := First_Entity (Typ);\n+         Comp := First_Component (Typ);\n          while Present (Comp) loop\n-            if Ekind (Comp) = E_Component\n-              and then Comes_From_Source (Comp)\n+            if Comes_From_Source (Comp)\n               and then No (Expression (Parent (Comp)))\n               and then not Has_Full_Default_Initialization (Etype (Comp))\n             then\n                return False;\n             end if;\n \n-            Next_Entity (Comp);\n+            Next_Component (Comp);\n          end loop;\n \n          --  Ensure that the parent type of a type extension is fully default\n@@ -16966,7 +16965,7 @@ package body Sem_Util is\n \n          else\n             declare\n-               Ent : Entity_Id;\n+               Comp : Entity_Id;\n \n                Component_Present : Boolean := False;\n                --  Set True if at least one component is present. If no\n@@ -16976,30 +16975,28 @@ package body Sem_Util is\n             begin\n                --  Loop through components\n \n-               Ent := First_Entity (Typ);\n-               while Present (Ent) loop\n-                  if Ekind (Ent) = E_Component then\n-                     Component_Present := True;\n+               Comp := First_Component (Typ);\n+               while Present (Comp) loop\n+                  Component_Present := True;\n \n-                     --  If a component has an initialization expression then\n-                     --  the enclosing record type is partially initialized\n+                  --  If a component has an initialization expression then the\n+                  --  enclosing record type is partially initialized\n \n-                     if Present (Parent (Ent))\n-                       and then Present (Expression (Parent (Ent)))\n-                     then\n-                        return True;\n+                  if Present (Parent (Comp))\n+                    and then Present (Expression (Parent (Comp)))\n+                  then\n+                     return True;\n \n-                     --  If a component is of a type which is itself partially\n-                     --  initialized, then the enclosing record type is also.\n+                  --  If a component is of a type which is itself partially\n+                  --  initialized, then the enclosing record type is also.\n \n-                     elsif Is_Partially_Initialized_Type\n-                             (Etype (Ent), Include_Implicit)\n-                     then\n-                        return True;\n-                     end if;\n+                  elsif Is_Partially_Initialized_Type\n+                          (Etype (Comp), Include_Implicit)\n+                  then\n+                     return True;\n                   end if;\n \n-                  Next_Entity (Ent);\n+                  Next_Component (Comp);\n                end loop;\n \n                --  No initialized components found. If we found any components\n@@ -22067,36 +22064,34 @@ package body Sem_Util is\n             Comp : Entity_Id;\n \n          begin\n-            Comp := First_Entity (Typ);\n+            Comp := First_Component (Typ);\n             while Present (Comp) loop\n \n                --  Only look at E_Component entities. No need to look at\n                --  E_Discriminant entities, and we must ignore internal\n                --  subtypes generated for constrained components.\n \n-               if Ekind (Comp) = E_Component then\n-                  declare\n-                     Comp_Type : constant Entity_Id :=\n-                                   Underlying_Type (Etype (Comp));\n+               declare\n+                  Comp_Type : constant Entity_Id :=\n+                                Underlying_Type (Etype (Comp));\n \n-                  begin\n-                     if Is_Record_Type (Comp_Type)\n-                           or else\n-                        Is_Protected_Type (Comp_Type)\n-                     then\n-                        if not Caller_Known_Size_Record (Comp_Type) then\n-                           return False;\n-                        end if;\n+               begin\n+                  if Is_Record_Type (Comp_Type)\n+                        or else\n+                     Is_Protected_Type (Comp_Type)\n+                  then\n+                     if not Caller_Known_Size_Record (Comp_Type) then\n+                        return False;\n+                     end if;\n \n-                     elsif Is_Array_Type (Comp_Type) then\n-                        if Size_Depends_On_Discriminant (Comp_Type) then\n-                           return False;\n-                        end if;\n+                  elsif Is_Array_Type (Comp_Type) then\n+                     if Size_Depends_On_Discriminant (Comp_Type) then\n+                        return False;\n                      end if;\n-                  end;\n-               end if;\n+                  end if;\n+               end;\n \n-               Next_Entity (Comp);\n+               Next_Component (Comp);\n             end loop;\n          end;\n \n@@ -22143,41 +22138,39 @@ package body Sem_Util is\n                Comp : Entity_Id;\n \n             begin\n-               Comp := First_Entity (Typ);\n+               Comp := First_Component (Typ);\n                while Present (Comp) loop\n-                  if Ekind (Comp) = E_Component then\n-                     declare\n-                        Comp_Type : constant Entity_Id :=\n-                                      Underlying_Type (Etype (Comp));\n+                  declare\n+                     Comp_Type : constant Entity_Id :=\n+                                   Underlying_Type (Etype (Comp));\n \n-                        Hi   : Node_Id;\n-                        Indx : Node_Id;\n-                        Ityp : Entity_Id;\n+                     Hi   : Node_Id;\n+                     Indx : Node_Id;\n+                     Ityp : Entity_Id;\n \n-                     begin\n-                        if Is_Array_Type (Comp_Type) then\n-                           Indx := First_Index (Comp_Type);\n-\n-                           while Present (Indx) loop\n-                              Ityp := Etype (Indx);\n-                              Hi := Type_High_Bound (Ityp);\n-\n-                              if Nkind (Hi) = N_Identifier\n-                                and then Ekind (Entity (Hi)) = E_Discriminant\n-                                and then Is_Large_Discrete_Type (Ityp)\n-                                and then Is_Large_Discrete_Type\n-                                           (Etype (Entity (Hi)))\n-                              then\n-                                 return True;\n-                              end if;\n+                  begin\n+                     if Is_Array_Type (Comp_Type) then\n+                        Indx := First_Index (Comp_Type);\n+\n+                        while Present (Indx) loop\n+                           Ityp := Etype (Indx);\n+                           Hi := Type_High_Bound (Ityp);\n+\n+                           if Nkind (Hi) = N_Identifier\n+                             and then Ekind (Entity (Hi)) = E_Discriminant\n+                             and then Is_Large_Discrete_Type (Ityp)\n+                             and then Is_Large_Discrete_Type\n+                                        (Etype (Entity (Hi)))\n+                           then\n+                              return True;\n+                           end if;\n \n-                              Next_Index (Indx);\n-                           end loop;\n-                        end if;\n-                     end;\n-                  end if;\n+                           Next_Index (Indx);\n+                        end loop;\n+                     end if;\n+                  end;\n \n-                  Next_Entity (Comp);\n+                  Next_Component (Comp);\n                end loop;\n             end;\n          end if;"}]}