{"sha": "7bdb32b97ef4687f7cbaad717130a78aa2a86a2b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2JkYjMyYjk3ZWY0Njg3ZjdjYmFhZDcxNzEzMGE3OGFhMmE4NmEyYg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-01-10T23:48:03Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-01-10T23:48:03Z"}, "message": "Makefile.in (optabs.o): Depend on real.h\n\n\t* Makefile.in (optabs.o): Depend on real.h\n\t(resource.o): Depend on insn-attr.h\n\n\t* builtins.c (result_vector): Wrap prototype in macro conditions\n\tgoverning definition and use.\n\n\t* c-common.c: Include tm_p.h.\n\n\t* c-lex.c: Likewise.\n\n\t* elfos.h: Constify a char*.\n\n\t* final.c (align_fuzz): Wrap prototype in macro HAVE_ATTR_length.\n\t(get_attr_length, shorten_branches, profile_after_prologue): Mark\n\tparameter with ATTRIBUTE_UNUSED.\n\n\t* fold-const.c (exact_real_inverse): Wrap variable `i' in\n\tCHECK_FLOAT_VALUE.\n\n\t* haifa-sched.c (schedule_insns): Mark parameter with\n\tATTRIBUTE_UNUSED.\n\n\t* optabs.c: Include real.h.\n\n\t* real.h (ereal_atof): Add prototype arguments.\n\n\t* resource.c: Include insn-attr.h.\n\n\t* sdbout.c (sdbout_queue_anonymous_type,\n\tsdbout_dequeue_anonymous_types): Wrap in macro\n\tSDB_ALLOW_FORWARD_REFERENCES.\n\t(sdbout_init, sdbout_start_new_source_file): Mark parameter with\n\tATTRIBUTE_UNUSED.\n\n\t* stmt.c (expand_return): Wrap variable `op0' in macro HAVE_return.\n\n\t* stupid.c: Include tm_p.h.\n\n\t* tree.c (real_value_from_int_cst): Mark parameter with\n\tATTRIBUTE_UNUSED.\n\ncp:\n\t* lex.c: Include tm_p.h.\n\nch:\n\t* lex.c: Include tm_p.h.\n\nFrom-SVN: r31308", "tree": {"sha": "a7172a6e33e902401e82daf343d887ad9029d032", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7172a6e33e902401e82daf343d887ad9029d032"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7bdb32b97ef4687f7cbaad717130a78aa2a86a2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bdb32b97ef4687f7cbaad717130a78aa2a86a2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bdb32b97ef4687f7cbaad717130a78aa2a86a2b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bdb32b97ef4687f7cbaad717130a78aa2a86a2b/comments", "author": null, "committer": null, "parents": [{"sha": "3d2cfac61b57d399e5d452b5e7911c8b55c42088", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d2cfac61b57d399e5d452b5e7911c8b55c42088", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d2cfac61b57d399e5d452b5e7911c8b55c42088"}], "stats": {"total": 95, "additions": 82, "deletions": 13}, "files": [{"sha": "3ec9803993f6a746ce12b4f01fb5664cc0051efc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bdb32b97ef4687f7cbaad717130a78aa2a86a2b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bdb32b97ef4687f7cbaad717130a78aa2a86a2b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7bdb32b97ef4687f7cbaad717130a78aa2a86a2b", "patch": "@@ -1,3 +1,46 @@\n+2000-01-10  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* Makefile.in (optabs.o): Depend on real.h\n+\t(resource.o): Depend on insn-attr.h\n+\n+\t* builtins.c (result_vector): Wrap prototype in macro conditions\n+\tgoverning definition and use.\n+\n+\t* c-common.c: Include tm_p.h.\n+\n+\t* c-lex.c: Likewise.\n+\n+\t* elfos.h: Constify a char*.\n+\n+\t* final.c (align_fuzz): Wrap prototype in macro HAVE_ATTR_length.\n+\t(get_attr_length, shorten_branches, profile_after_prologue): Mark\n+\tparameter with ATTRIBUTE_UNUSED.\n+\n+\t* fold-const.c (exact_real_inverse): Wrap variable `i' in\n+\tCHECK_FLOAT_VALUE.\n+\n+\t* haifa-sched.c (schedule_insns): Mark parameter with\n+\tATTRIBUTE_UNUSED.\n+\n+\t* optabs.c: Include real.h.\n+\n+\t* real.h (ereal_atof): Add prototype arguments.\n+\n+\t* resource.c: Include insn-attr.h.\n+\n+\t* sdbout.c (sdbout_queue_anonymous_type,\n+\tsdbout_dequeue_anonymous_types): Wrap in macro\n+\tSDB_ALLOW_FORWARD_REFERENCES.\n+\t(sdbout_init, sdbout_start_new_source_file): Mark parameter with\n+\tATTRIBUTE_UNUSED.\n+\n+\t* stmt.c (expand_return): Wrap variable `op0' in macro HAVE_return.\n+\n+\t* stupid.c: Include tm_p.h.\n+\n+\t* tree.c (real_value_from_int_cst): Mark parameter with\n+\tATTRIBUTE_UNUSED.\n+\n 2000-01-10  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* i960-protos.h: New file."}, {"sha": "f49b65fd6593ffbb0de007ca534203862b5c97f7", "filename": "gcc/Makefile.in", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bdb32b97ef4687f7cbaad717130a78aa2a86a2b/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bdb32b97ef4687f7cbaad717130a78aa2a86a2b/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=7bdb32b97ef4687f7cbaad717130a78aa2a86a2b", "patch": "@@ -1514,7 +1514,7 @@ explow.o : explow.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) flags.h \\\n    insn-codes.h toplev.h function.h\n optabs.o : optabs.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) flags.h  \\\n    insn-flags.h insn-config.h insn-codes.h $(EXPR_H) $(RECOG_H) reload.h \\\n-   toplev.h ggc.h\n+   toplev.h ggc.h real.h\n dbxout.o : dbxout.c $(CONFIG_H) system.h $(TREE_H) $(RTL_H) flags.h $(REGS_H) \\\n    insn-config.h reload.h gstab.h xcoffout.h defaults.h output.h dbxout.h \\\n    toplev.h gcc.h\n@@ -1552,7 +1552,8 @@ gcse.o : gcse.c $(CONFIG_H) system.h $(RTL_H) $(REGS_H) hard-reg-set.h \\\n    flags.h real.h insn-config.h $(RECOG_H) $(EXPR_H) $(BASIC_BLOCK_H) \\\n    function.h output.h toplev.h\n resource.o : resource.c $(CONFIG_H) $(RTL_H) hard-reg-set.h system.h \\\n-   $(BASIC_BLOCK_H) $(REGS_H) flags.h output.h resource.h function.h toplev.h\n+   $(BASIC_BLOCK_H) $(REGS_H) flags.h output.h resource.h function.h toplev.h \\\n+   insn-attr.h\n lcm.o : lcm.c $(CONFIG_H) system.h $(RTL_H) $(REGS_H) hard-reg-set.h flags.h \\\n    real.h insn-config.h $(RECOG_H) $(EXPR_H) $(BASIC_BLOCK_H)\n profile.o : profile.c $(CONFIG_H) system.h $(RTL_H) flags.h insn-flags.h \\"}, {"sha": "eae9346f244262f56fa841eba5fdc3be63ba2127", "filename": "gcc/builtins.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bdb32b97ef4687f7cbaad717130a78aa2a86a2b/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bdb32b97ef4687f7cbaad717130a78aa2a86a2b/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=7bdb32b97ef4687f7cbaad717130a78aa2a86a2b", "patch": "@@ -58,7 +58,9 @@ static tree c_strlen\t\t\tPROTO((tree));\n static rtx get_memory_rtx\t\tPROTO((tree));\n static int apply_args_size\t\tPROTO((void));\n static int apply_result_size\t\tPROTO((void));\n+#if defined (HAVE_untyped_call) || defined (HAVE_untyped_return)\n static rtx result_vector\t\tPROTO((int, rtx));\n+#endif\n static rtx expand_builtin_apply_args\tPROTO((void));\n static rtx expand_builtin_apply_args_1\tPROTO((void));\n static rtx expand_builtin_apply\t\tPROTO((rtx, rtx, rtx));"}, {"sha": "988ed50d360c33204daa710989a224a65fab722f", "filename": "gcc/c-common.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bdb32b97ef4687f7cbaad717130a78aa2a86a2b/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bdb32b97ef4687f7cbaad717130a78aa2a86a2b/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=7bdb32b97ef4687f7cbaad717130a78aa2a86a2b", "patch": "@@ -30,6 +30,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"c-pragma.h\"\n #include \"rtl.h\"\n #include \"ggc.h\"\n+#include \"tm_p.h\"\n \n #if USE_CPPLIB\n #include \"cpplib.h\""}, {"sha": "905310d4f9a9684855612a5eb90f83c31d41cd6e", "filename": "gcc/c-lex.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bdb32b97ef4687f7cbaad717130a78aa2a86a2b/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bdb32b97ef4687f7cbaad717130a78aa2a86a2b/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=7bdb32b97ef4687f7cbaad717130a78aa2a86a2b", "patch": "@@ -33,6 +33,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"toplev.h\"\n #include \"intl.h\"\n #include \"ggc.h\"\n+#include \"tm_p.h\"\n \n /* MULTIBYTE_CHARS support only works for native compilers.\n    ??? Ideally what we want is to model widechar support after"}, {"sha": "b88227f545667d03ed5b0c0106330579f64e6273", "filename": "gcc/ch/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bdb32b97ef4687f7cbaad717130a78aa2a86a2b/gcc%2Fch%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bdb32b97ef4687f7cbaad717130a78aa2a86a2b/gcc%2Fch%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2FChangeLog?ref=7bdb32b97ef4687f7cbaad717130a78aa2a86a2b", "patch": "@@ -1,3 +1,7 @@\n+2000-01-10  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* lex.c: Include tm_p.h.\n+\n 2000-01-04  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* actions.c (update_else_range_for_int_const): Initialize"}, {"sha": "c48e1856e8e66d0f03422fb9ce9755142d6c4afc", "filename": "gcc/ch/lex.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bdb32b97ef4687f7cbaad717130a78aa2a86a2b/gcc%2Fch%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bdb32b97ef4687f7cbaad717130a78aa2a86a2b/gcc%2Fch%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Flex.c?ref=7bdb32b97ef4687f7cbaad717130a78aa2a86a2b", "patch": "@@ -32,6 +32,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"parse.h\"\n #include \"obstack.h\"\n #include \"toplev.h\"\n+#include \"tm_p.h\"\n \n #ifdef DWARF_DEBUGGING_INFO\n #include \"dwarfout.h\""}, {"sha": "8476c2bff2aefe70a0ed102b84ab291226349f9b", "filename": "gcc/config/elfos.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bdb32b97ef4687f7cbaad717130a78aa2a86a2b/gcc%2Fconfig%2Felfos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bdb32b97ef4687f7cbaad717130a78aa2a86a2b/gcc%2Fconfig%2Felfos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Felfos.h?ref=7bdb32b97ef4687f7cbaad717130a78aa2a86a2b", "patch": "@@ -356,10 +356,10 @@ dtors_section ()\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n       int len;\t\t\t\t\t\t\t\\\n       int sec;\t\t\t\t\t\t\t\\\n-      char *name;\t\t\t\t\t\t\\\n+      const char *name;\t\t\t\t\t\t\\\n       char *string;\t\t\t\t\t\t\\\n-      char *prefix;\t\t\t\t\t\t\\\n-      static char *prefixes[4][2] =\t\t\t\t\\\n+      const char *prefix;\t\t\t\t\t\\\n+      static const char *prefixes[4][2] =\t\t\t\\\n       {\t\t\t\t\t\t\t\t\\\n \t{ \".text.\",   \".gnu.linkonce.t.\" },\t\t\t\\\n \t{ \".rodata.\", \".gnu.linkonce.r.\" },\t\t\t\\"}, {"sha": "8778233ccb3f7445817201c91fa45688391ae706", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bdb32b97ef4687f7cbaad717130a78aa2a86a2b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bdb32b97ef4687f7cbaad717130a78aa2a86a2b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7bdb32b97ef4687f7cbaad717130a78aa2a86a2b", "patch": "@@ -1,3 +1,7 @@\n+2000-01-10  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* lex.c: Include tm_p.h.\n+\n 2000-01-07  Nathan Sidwell  <sidwell@codesourcery.com>\n \n \t* lang-specs.h (__GXX_ABI_VERSION): New preprocessor macro."}, {"sha": "237feb2418e217f148ad2a2f0441a50aa4b9975a", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bdb32b97ef4687f7cbaad717130a78aa2a86a2b/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bdb32b97ef4687f7cbaad717130a78aa2a86a2b/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=7bdb32b97ef4687f7cbaad717130a78aa2a86a2b", "patch": "@@ -38,6 +38,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"toplev.h\"\n #include \"output.h\"\n #include \"ggc.h\"\n+#include \"tm_p.h\"\n \n #ifdef MULTIBYTE_CHARS\n #include \"mbchar.h\""}, {"sha": "32039af1404814bf65dc04795edf411595eb8ed6", "filename": "gcc/final.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bdb32b97ef4687f7cbaad717130a78aa2a86a2b/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bdb32b97ef4687f7cbaad717130a78aa2a86a2b/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=7bdb32b97ef4687f7cbaad717130a78aa2a86a2b", "patch": "@@ -309,7 +309,9 @@ static int alter_cond\t\tPROTO((rtx));\n #ifndef ADDR_VEC_ALIGN\n static int final_addr_vec_align PROTO ((rtx));\n #endif\n+#ifdef HAVE_ATTR_length\n static int align_fuzz\t\tPROTO ((rtx, rtx, int, unsigned));\n+#endif\n \f\n /* Initialize data in final at the beginning of a compilation.  */\n \n@@ -699,7 +701,7 @@ init_insn_lengths ()\n \n int\n get_attr_length (insn)\n-     rtx insn;\n+     rtx insn ATTRIBUTE_UNUSED;\n {\n #ifdef HAVE_ATTR_length\n   rtx body;\n@@ -980,7 +982,7 @@ insn_current_reference_address (branch)\n \n void\n shorten_branches (first)\n-     rtx first;\n+     rtx first ATTRIBUTE_UNUSED;\n {\n   rtx insn;\n   int max_uid;\n@@ -1694,7 +1696,7 @@ final_start_function (first, file, optimize)\n \n static void\n profile_after_prologue (file)\n-     FILE *file;\n+     FILE *file ATTRIBUTE_UNUSED;\n {\n #ifdef FUNCTION_BLOCK_PROFILER\n   if (profile_block_flag)"}, {"sha": "6268e3cc5e9cb4eaccefca545438381cc3c9c4d5", "filename": "gcc/fold-const.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bdb32b97ef4687f7cbaad717130a78aa2a86a2b/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bdb32b97ef4687f7cbaad717130a78aa2a86a2b/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=7bdb32b97ef4687f7cbaad717130a78aa2a86a2b", "patch": "@@ -914,7 +914,9 @@ exact_real_inverse (mode, r)\n       double d;\n       unsigned short i[4];\n     }x, t, y;\n+#ifdef CHECK_FLOAT_VALUE\n   int i;\n+#endif\n \n   /* Usually disable if bounds checks are not reliable.  */\n   if ((HOST_FLOAT_FORMAT != TARGET_FLOAT_FORMAT) && !flag_pretend_float)"}, {"sha": "727fd65c8971908b9f5942140e61fe01b1272fab", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bdb32b97ef4687f7cbaad717130a78aa2a86a2b/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bdb32b97ef4687f7cbaad717130a78aa2a86a2b/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=7bdb32b97ef4687f7cbaad717130a78aa2a86a2b", "patch": "@@ -945,7 +945,7 @@ remove_dependence (insn, elem)\n #ifndef INSN_SCHEDULING\n void\n schedule_insns (dump_file)\n-     FILE *dump_file;\n+     FILE *dump_file ATTRIBUTE_UNUSED;\n {\n }\n #else"}, {"sha": "bb7c822ffd28d9db257ba998a5c46d07d505443b", "filename": "gcc/optabs.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bdb32b97ef4687f7cbaad717130a78aa2a86a2b/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bdb32b97ef4687f7cbaad717130a78aa2a86a2b/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=7bdb32b97ef4687f7cbaad717130a78aa2a86a2b", "patch": "@@ -37,6 +37,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"recog.h\"\n #include \"reload.h\"\n #include \"ggc.h\"\n+#include \"real.h\"\n \n /* Each optab contains info on how this target machine\n    can perform a particular operation"}, {"sha": "478762f36c7b404d5dbcbe9ea1b9ac19d2cf90cf", "filename": "gcc/real.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bdb32b97ef4687f7cbaad717130a78aa2a86a2b/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bdb32b97ef4687f7cbaad717130a78aa2a86a2b/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=7bdb32b97ef4687f7cbaad717130a78aa2a86a2b", "patch": "@@ -357,7 +357,7 @@ extern double ldexp ();\n #ifndef REAL_VALUE_ATOF\n #if 1\n /* Use real.c to convert decimal numbers to binary, ... */\n-REAL_VALUE_TYPE ereal_atof ();\n+extern REAL_VALUE_TYPE ereal_atof PROTO((const char *, enum machine_mode));\n #define REAL_VALUE_ATOF(x, s) ereal_atof (x, s)\n /* Could use ereal_atof here for hexadecimal floats too, but real_hex_to_f\n    is OK and it uses faster native fp arithmetic.  */"}, {"sha": "d89ff505e4a56f1e08715202a36260230d7f781e", "filename": "gcc/resource.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bdb32b97ef4687f7cbaad717130a78aa2a86a2b/gcc%2Fresource.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bdb32b97ef4687f7cbaad717130a78aa2a86a2b/gcc%2Fresource.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fresource.c?ref=7bdb32b97ef4687f7cbaad717130a78aa2a86a2b", "patch": "@@ -30,6 +30,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"flags.h\"\n #include \"output.h\"\n #include \"resource.h\"\n+#include \"insn-attr.h\"\n \n /* This structure is used to record liveness information at the targets or\n    fallthrough insns of branches.  We will most likely need the information"}, {"sha": "ea33e8d80d0911b6cdf505420a9587862c3b55d7", "filename": "gcc/sdbout.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bdb32b97ef4687f7cbaad717130a78aa2a86a2b/gcc%2Fsdbout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bdb32b97ef4687f7cbaad717130a78aa2a86a2b/gcc%2Fsdbout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.c?ref=7bdb32b97ef4687f7cbaad717130a78aa2a86a2b", "patch": "@@ -111,8 +111,10 @@ static void sdbout_record_type_name\tPROTO((tree));\n static int plain_type_1\t\t\tPROTO((tree, int));\n static void sdbout_block\t\tPROTO((tree));\n static void sdbout_syms\t\t\tPROTO((tree));\n+#ifdef SDB_ALLOW_FORWARD_REFERENCES\n static void sdbout_queue_anonymous_type\tPROTO((tree));\n static void sdbout_dequeue_anonymous_types PROTO((void));\n+#endif\n static void sdbout_type\t\t\tPROTO((tree));\n static void sdbout_field_types\t\tPROTO((tree));\n static void sdbout_one_type\t\tPROTO((tree));\n@@ -337,7 +339,7 @@ static struct sdb_file *current_file;\n void\n sdbout_init (asm_file, input_file_name, syms)\n      FILE *asm_file ATTRIBUTE_UNUSED;\n-     char *input_file_name;\n+     char *input_file_name ATTRIBUTE_UNUSED;\n      tree syms ATTRIBUTE_UNUSED;\n {\n #ifdef MIPS_DEBUGGING_INFO\n@@ -1650,7 +1652,7 @@ sdbout_label (insn)\n \n void\n sdbout_start_new_source_file (filename)\n-     char *filename;\n+     char *filename ATTRIBUTE_UNUSED;\n {\n #ifdef MIPS_DEBUGGING_INFO\n   struct sdb_file *n = (struct sdb_file *) xmalloc (sizeof *n);"}, {"sha": "f0c46c4094fd6176db4d29cb1d94e5c088d11d21", "filename": "gcc/stmt.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bdb32b97ef4687f7cbaad717130a78aa2a86a2b/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bdb32b97ef4687f7cbaad717130a78aa2a86a2b/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=7bdb32b97ef4687f7cbaad717130a78aa2a86a2b", "patch": "@@ -2794,7 +2794,9 @@ expand_return (retval)\n   rtx last_insn = 0;\n   rtx result_rtl = DECL_RTL (DECL_RESULT (current_function_decl));\n   register rtx val = 0;\n+#ifdef HAVE_return\n   register rtx op0;\n+#endif\n   tree retval_rhs;\n   int cleanups;\n "}, {"sha": "b1979455c2ba5b6d7a41ef1e4b3e237f7a447363", "filename": "gcc/stupid.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bdb32b97ef4687f7cbaad717130a78aa2a86a2b/gcc%2Fstupid.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bdb32b97ef4687f7cbaad717130a78aa2a86a2b/gcc%2Fstupid.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstupid.c?ref=7bdb32b97ef4687f7cbaad717130a78aa2a86a2b", "patch": "@@ -54,6 +54,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"reload.h\"\n #include \"flags.h\"\n #include \"toplev.h\"\n+#include \"tm_p.h\"\n \f\n /* Vector mapping INSN_UIDs to suids.\n    The suids are like uids but increase monotonically always."}, {"sha": "d46bfa6b1153c673c25238ff79346653007605c9", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bdb32b97ef4687f7cbaad717130a78aa2a86a2b/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bdb32b97ef4687f7cbaad717130a78aa2a86a2b/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=7bdb32b97ef4687f7cbaad717130a78aa2a86a2b", "patch": "@@ -1420,7 +1420,7 @@ build_real (type, d)\n \n REAL_VALUE_TYPE\n real_value_from_int_cst (type, i)\n-     tree type, i;\n+     tree type ATTRIBUTE_UNUSED, i;\n {\n   REAL_VALUE_TYPE d;\n "}]}