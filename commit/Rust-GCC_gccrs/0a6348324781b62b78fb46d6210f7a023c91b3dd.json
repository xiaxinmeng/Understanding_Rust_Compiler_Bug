{"sha": "0a6348324781b62b78fb46d6210f7a023c91b3dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGE2MzQ4MzI0NzgxYjYyYjc4ZmI0NmQ2MjEwZjdhMDIzYzkxYjNkZA==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@st.com", "date": "2005-03-02T22:02:32Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2005-03-02T22:02:32Z"}, "message": "recog.c (verify_changes, [...]): New functions, broken out of apply_change_group.\n\n\t* recog.c (verify_changes, confirm_change_group): New functions,\n\tbroken out of apply_change_group.\n\t(apply_change_group): Use them.\n\t* recog.h (verify_change, confirm_change_group): Declare.\n\t* rtl.h (redirect_jump_2): Declare.\n\t* jump.c (redirect_exp, invert_exp): Delete.\n\t(invert_exp_1): Take second parameter.  Return value.  Changed caller.\n\t(redirect_jump_2): New function, broken out of redirect_jump.\n\t(redirect_jump): Use redirect_jump_1 and redirect_jump_2.\n\t(invert_jump): Use invert_jump_1 and redirect_jump_2.\n\t* ifcvt.c (dead_or_predicable): Use redirect_jump_2.\n\nFrom-SVN: r95813", "tree": {"sha": "2e930d7443fe4dbacbd3f498df67cff02962fe05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e930d7443fe4dbacbd3f498df67cff02962fe05"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a6348324781b62b78fb46d6210f7a023c91b3dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a6348324781b62b78fb46d6210f7a023c91b3dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a6348324781b62b78fb46d6210f7a023c91b3dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a6348324781b62b78fb46d6210f7a023c91b3dd/comments", "author": null, "committer": null, "parents": [{"sha": "7df74013f138db3ed797e9be6759c644ba7364c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7df74013f138db3ed797e9be6759c644ba7364c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7df74013f138db3ed797e9be6759c644ba7364c3"}], "stats": {"total": 206, "additions": 93, "deletions": 113}, "files": [{"sha": "8e4d6dc15a6695d3aec66378867a9b37c9fac2bf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a6348324781b62b78fb46d6210f7a023c91b3dd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a6348324781b62b78fb46d6210f7a023c91b3dd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0a6348324781b62b78fb46d6210f7a023c91b3dd", "patch": "@@ -1,3 +1,17 @@\n+2005-03-02  J\"orn Rennecke <joern.rennecke@st.com>\n+\n+\t* recog.c (verify_changes, confirm_change_group): New functions,\n+\tbroken out of apply_change_group.\n+\t(apply_change_group): Use them.\n+\t* recog.h (verify_change, confirm_change_group): Declare.\n+\t* rtl.h (redirect_jump_2): Declare.\n+\t* jump.c (redirect_exp, invert_exp): Delete.\n+\t(invert_exp_1): Take second parameter.  Return value.  Changed caller.\n+\t(redirect_jump_2): New function, broken out of redirect_jump.\n+\t(redirect_jump): Use redirect_jump_1 and redirect_jump_2.\n+\t(invert_jump): Use invert_jump_1 and redirect_jump_2.\n+\t* ifcvt.c (dead_or_predicable): Use redirect_jump_2.\n+\n 2005-03-02  Geoffrey Keating  <geoffk@apple.com>\n \n \t* varasm.c (named_section): Use xstrdup rather than doing it by"}, {"sha": "996e8cd4364b5d12fbc4ca5e9b4e3fda7ffab7d5", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a6348324781b62b78fb46d6210f7a023c91b3dd/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a6348324781b62b78fb46d6210f7a023c91b3dd/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=0a6348324781b62b78fb46d6210f7a023c91b3dd", "patch": "@@ -3258,13 +3258,7 @@ dead_or_predicable (basic_block test_bb, basic_block merge_bb,\n \n   if (other_bb != new_dest)\n     {\n-      if (old_dest)\n-\tLABEL_NUSES (old_dest) -= 1;\n-      if (new_label)\n-\tLABEL_NUSES (new_label) += 1;\n-      JUMP_LABEL (jump) = new_label;\n-      if (reversep)\n-\tinvert_br_probabilities (jump);\n+      redirect_jump_2 (jump, old_dest, new_label, -1, reversep);\n \n       redirect_edge_succ (BRANCH_EDGE (test_bb), new_dest);\n       if (reversep)"}, {"sha": "4af8b5a5a10ecec62e944d51d954b6ec9b0b1b9e", "filename": "gcc/jump.c", "status": "modified", "additions": 41, "deletions": 94, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a6348324781b62b78fb46d6210f7a023c91b3dd/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a6348324781b62b78fb46d6210f7a023c91b3dd/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=0a6348324781b62b78fb46d6210f7a023c91b3dd", "patch": "@@ -67,9 +67,7 @@ static void init_label_info (rtx);\n static void mark_all_labels (rtx);\n static void delete_computation (rtx);\n static void redirect_exp_1 (rtx *, rtx, rtx, rtx);\n-static int redirect_exp (rtx, rtx, rtx);\n-static void invert_exp_1 (rtx);\n-static int invert_exp (rtx);\n+static int invert_exp_1 (rtx, rtx);\n static int returnjump_p_1 (rtx *, void *);\n static void delete_prior_computation (rtx, rtx);\n \f\n@@ -1570,25 +1568,6 @@ redirect_exp_1 (rtx *loc, rtx olabel, rtx nlabel, rtx insn)\n     }\n }\n \n-/* Similar, but apply the change group and report success or failure.  */\n-\n-static int\n-redirect_exp (rtx olabel, rtx nlabel, rtx insn)\n-{\n-  rtx *loc;\n-\n-  if (GET_CODE (PATTERN (insn)) == PARALLEL)\n-    loc = &XVECEXP (PATTERN (insn), 0, 0);\n-  else\n-    loc = &PATTERN (insn);\n-\n-  redirect_exp_1 (loc, olabel, nlabel, insn);\n-  if (num_validated_changes () == 0)\n-    return 0;\n-\n-  return apply_change_group ();\n-}\n-\n /* Make JUMP go to NLABEL instead of where it jumps now.  Accrue\n    the modifications into the change group.  Return false if we did\n    not see how to do that.  */\n@@ -1622,71 +1601,67 @@ int\n redirect_jump (rtx jump, rtx nlabel, int delete_unused)\n {\n   rtx olabel = JUMP_LABEL (jump);\n-  rtx note;\n \n   if (nlabel == olabel)\n     return 1;\n \n-  if (! redirect_exp (olabel, nlabel, jump))\n+  if (! redirect_jump_1 (jump, nlabel) || ! apply_change_group ())\n     return 0;\n \n+  redirect_jump_2 (jump, olabel, nlabel, delete_unused, 0);\n+  return 1;\n+}\n+\n+/* Fix up JUMP_LABEL and label ref counts after OLABEL has been replaced with\n+   NLABEL in JUMP.  If DELETE_UNUSED is non-negative, copy a\n+   NOTE_INSN_FUNCTION_END found after OLABEL to the place after NLABEL.\n+   If DELETE_UNUSED is positive, delete related insn to OLABEL if its ref\n+   count has dropped to zero.  */\n+void\n+redirect_jump_2 (rtx jump, rtx olabel, rtx nlabel, int delete_unused,\n+\t\t int invert)\n+{\n+  rtx note;\n+\n   JUMP_LABEL (jump) = nlabel;\n   if (nlabel)\n     ++LABEL_NUSES (nlabel);\n \n   /* Update labels in any REG_EQUAL note.  */\n   if ((note = find_reg_note (jump, REG_EQUAL, NULL_RTX)) != NULL_RTX)\n     {\n-      if (nlabel && olabel)\n+      if (!nlabel || (invert && !invert_exp_1 (XEXP (note, 0), jump)))\n+\tremove_note (jump, note);\n+      else\n \t{\n-\t  rtx dest = XEXP (note, 0);\n-\n-\t  if (GET_CODE (dest) == IF_THEN_ELSE)\n-\t    {\n-\t      if (GET_CODE (XEXP (dest, 1)) == LABEL_REF\n-\t\t  && XEXP (XEXP (dest, 1), 0) == olabel)\n-\t\tXEXP (XEXP (dest, 1), 0) = nlabel;\n-\t      if (GET_CODE (XEXP (dest, 2)) == LABEL_REF\n-\t\t  && XEXP (XEXP (dest, 2), 0) == olabel)\n-\t\tXEXP (XEXP (dest, 2), 0) = nlabel;\n-\t    }\n-\t  else\n-\t    remove_note (jump, note);\n+\t  redirect_exp_1 (&XEXP (note, 0), olabel, nlabel, jump);\n+\t  confirm_change_group ();\n \t}\n-      else\n-        remove_note (jump, note);\n     }\n \n   /* If we're eliding the jump over exception cleanups at the end of a\n      function, move the function end note so that -Wreturn-type works.  */\n   if (olabel && nlabel\n       && NEXT_INSN (olabel)\n       && NOTE_P (NEXT_INSN (olabel))\n-      && NOTE_LINE_NUMBER (NEXT_INSN (olabel)) == NOTE_INSN_FUNCTION_END)\n+      && NOTE_LINE_NUMBER (NEXT_INSN (olabel)) == NOTE_INSN_FUNCTION_END\n+      && delete_unused >= 0)\n     emit_note_after (NOTE_INSN_FUNCTION_END, nlabel);\n \n-  if (olabel && --LABEL_NUSES (olabel) == 0 && delete_unused\n+  if (olabel && --LABEL_NUSES (olabel) == 0 && delete_unused > 0\n       /* Undefined labels will remain outside the insn stream.  */\n       && INSN_UID (olabel))\n     delete_related_insns (olabel);\n-\n-  return 1;\n+  if (invert)\n+    invert_br_probabilities (jump);\n }\n \n-/* Invert the jump condition of rtx X contained in jump insn, INSN.\n-   Accrue the modifications into the change group.  */\n-\n-static void\n-invert_exp_1 (rtx insn)\n+/* Invert the jump condition X contained in jump insn INSN.  Accrue the\n+   modifications into the change group.  Return nonzero for success.  */\n+static int\n+invert_exp_1 (rtx x, rtx insn)\n {\n-  RTX_CODE code;\n-  rtx x = pc_set (insn);\n-\n-  if (!x)\n-    abort ();\n-  x = SET_SRC (x);\n-\n-  code = GET_CODE (x);\n+  RTX_CODE code = GET_CODE (x);\n \n   if (code == IF_THEN_ELSE)\n     {\n@@ -1708,30 +1683,16 @@ invert_exp_1 (rtx insn)\n \t\t\t\t\t   GET_MODE (comp), XEXP (comp, 0),\n \t\t\t\t\t   XEXP (comp, 1)),\n \t\t\t   1);\n-\t  return;\n+\t  return 1;\n \t}\n \n       tem = XEXP (x, 1);\n       validate_change (insn, &XEXP (x, 1), XEXP (x, 2), 1);\n       validate_change (insn, &XEXP (x, 2), tem, 1);\n+      return 1;\n     }\n   else\n-    abort ();\n-}\n-\n-/* Invert the jump condition of conditional jump insn, INSN.\n-\n-   Return 1 if we can do so, 0 if we cannot find a way to do so that\n-   matches a pattern.  */\n-\n-static int\n-invert_exp (rtx insn)\n-{\n-  invert_exp_1 (insn);\n-  if (num_validated_changes () == 0)\n     return 0;\n-\n-  return apply_change_group ();\n }\n \n /* Invert the condition of the jump JUMP, and make it jump to label\n@@ -1742,10 +1703,12 @@ invert_exp (rtx insn)\n int\n invert_jump_1 (rtx jump, rtx nlabel)\n {\n+  rtx x = pc_set (jump);\n   int ochanges;\n \n   ochanges = num_validated_changes ();\n-  invert_exp_1 (jump);\n+  if (!x || !invert_exp_1 (SET_SRC (x), jump))\n+    abort ();\n   if (num_validated_changes () == ochanges)\n     return 0;\n \n@@ -1758,30 +1721,14 @@ invert_jump_1 (rtx jump, rtx nlabel)\n int\n invert_jump (rtx jump, rtx nlabel, int delete_unused)\n {\n-  /* We have to either invert the condition and change the label or\n-     do neither.  Either operation could fail.  We first try to invert\n-     the jump. If that succeeds, we try changing the label.  If that fails,\n-     we invert the jump back to what it was.  */\n-\n-  if (! invert_exp (jump))\n-    return 0;\n+  rtx olabel = JUMP_LABEL (jump);\n \n-  if (redirect_jump (jump, nlabel, delete_unused))\n+  if (invert_jump_1 (jump, nlabel) && apply_change_group ())\n     {\n-      /* Remove REG_EQUAL note if we have one.  */\n-      rtx note = find_reg_note (jump, REG_EQUAL, NULL_RTX);\n-      if (note)\n-\tremove_note (jump, note);\n-\n-      invert_br_probabilities (jump);\n-\n+      redirect_jump_2 (jump, olabel, nlabel, delete_unused, 1);\n       return 1;\n     }\n-\n-  if (! invert_exp (jump))\n-    /* This should just be putting it back the way it was.  */\n-    abort ();\n-\n+  cancel_changes (0);\n   return 0;\n }\n "}, {"sha": "224df47cf8caf74a2891e39e687d3142c94ca9dd", "filename": "gcc/recog.c", "status": "modified", "additions": 34, "deletions": 12, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a6348324781b62b78fb46d6210f7a023c91b3dd/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a6348324781b62b78fb46d6210f7a023c91b3dd/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=0a6348324781b62b78fb46d6210f7a023c91b3dd", "patch": "@@ -294,11 +294,11 @@ num_changes_pending (void)\n   return num_changes;\n }\n \n-/* Apply a group of changes previously issued with `validate_change'.\n+/* Tentatively apply the changes numbered NUM and up.\n    Return 1 if all changes are valid, zero otherwise.  */\n \n int\n-apply_change_group (void)\n+verify_changes (int num)\n {\n   int i;\n   rtx last_validated = NULL_RTX;\n@@ -312,7 +312,7 @@ apply_change_group (void)\n      we also require that the operands meet the constraints for\n      the insn.  */\n \n-  for (i = 0; i < num_changes; i++)\n+  for (i = num; i < num_changes; i++)\n     {\n       rtx object = changes[i].object;\n \n@@ -376,17 +376,38 @@ apply_change_group (void)\n       last_validated = object;\n     }\n \n-  if (i == num_changes)\n-    {\n-      basic_block bb;\n+  return (i == num_changes);\n+}\n \n-      for (i = 0; i < num_changes; i++)\n-\tif (changes[i].object\n-\t    && INSN_P (changes[i].object)\n-\t    && (bb = BLOCK_FOR_INSN (changes[i].object)))\n-\t  bb->flags |= BB_DIRTY;\n+/* A group of changes has previously been issued with validate_change and\n+   verified with verify_changes.  Update the BB_DIRTY flags of the affected\n+   blocks, and clear num_changes.  */\n \n-      num_changes = 0;\n+void\n+confirm_change_group (void)\n+{\n+  int i;\n+  basic_block bb;\n+\n+  for (i = 0; i < num_changes; i++)\n+    if (changes[i].object\n+\t&& INSN_P (changes[i].object)\n+\t&& (bb = BLOCK_FOR_INSN (changes[i].object)))\n+      bb->flags |= BB_DIRTY;\n+\n+  num_changes = 0;\n+}\n+\n+/* Apply a group of changes previously issued with `validate_change'.\n+   If all changes are valid, call confirm_change_group and return 1,\n+   otherwise, call cancel_changes and return 0.  */\n+\n+int\n+apply_change_group (void)\n+{\n+  if (verify_changes (0))\n+    {\n+      confirm_change_group ();\n       return 1;\n     }\n   else\n@@ -396,6 +417,7 @@ apply_change_group (void)\n     }\n }\n \n+\n /* Return the number of changes so far in the current group.  */\n \n int"}, {"sha": "d4ded6cccc0927d2fa2c632a8b993450bfda6b50", "filename": "gcc/recog.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a6348324781b62b78fb46d6210f7a023c91b3dd/gcc%2Frecog.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a6348324781b62b78fb46d6210f7a023c91b3dd/gcc%2Frecog.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.h?ref=0a6348324781b62b78fb46d6210f7a023c91b3dd", "patch": "@@ -75,6 +75,8 @@ extern int check_asm_operands (rtx);\n extern int asm_operand_ok (rtx, const char *);\n extern int validate_change (rtx, rtx *, rtx, int);\n extern int insn_invalid_p (rtx);\n+extern int verify_changes (int);\n+extern void confirm_change_group (void);\n extern int apply_change_group (void);\n extern int num_validated_changes (void);\n extern void cancel_changes (int);"}, {"sha": "1968c88d34febc732a76dae4b0a9758e38bbdb5c", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a6348324781b62b78fb46d6210f7a023c91b3dd/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a6348324781b62b78fb46d6210f7a023c91b3dd/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=0a6348324781b62b78fb46d6210f7a023c91b3dd", "patch": "@@ -1912,6 +1912,7 @@ extern int rtx_renumbered_equal_p (rtx, rtx);\n extern int true_regnum (rtx);\n extern unsigned int reg_or_subregno (rtx);\n extern int redirect_jump_1 (rtx, rtx);\n+extern void redirect_jump_2 (rtx, rtx, rtx, int, int);\n extern int redirect_jump (rtx, rtx, int);\n extern void rebuild_jump_labels (rtx);\n extern enum rtx_code reversed_comparison_code (rtx, rtx);"}]}