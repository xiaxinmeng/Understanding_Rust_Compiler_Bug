{"sha": "b1c0d18515f6899bc8362d9dc861021c929127f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjFjMGQxODUxNWY2ODk5YmM4MzYyZDlkYzg2MTAyMWM5MjkxMjdmOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-08-14T14:44:55Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2019-08-14T14:44:55Z"}, "message": "PR c++/91391 - bogus -Wcomma-subscript warning.\n\n\t* parser.c (cp_parser_postfix_open_square_expression): Don't warn about\n\ta deprecated comma here.  Pass warn_comma_subscript down to\n\tcp_parser_expression.\n\t(cp_parser_expression): New bool parameter.  Warn about uses of a comma\n\toperator within a subscripting expression.\n\t(cp_parser_skip_to_closing_square_bracket): Revert to pre-r274121 state.\n\t(cp_parser_skip_to_closing_square_bracket_1): Remove.\n\n\t* g++.dg/cpp2a/comma5.C: New test.\n\nCo-Authored-By: Marek Polacek <polacek@redhat.com>\n\nFrom-SVN: r274483", "tree": {"sha": "a50b2b2ea91c4a1cde4a763749c70905def3adfb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a50b2b2ea91c4a1cde4a763749c70905def3adfb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1c0d18515f6899bc8362d9dc861021c929127f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1c0d18515f6899bc8362d9dc861021c929127f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1c0d18515f6899bc8362d9dc861021c929127f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1c0d18515f6899bc8362d9dc861021c929127f9/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f0033821c1c9ba386a1983499a666d5759cdd943", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0033821c1c9ba386a1983499a666d5759cdd943", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0033821c1c9ba386a1983499a666d5759cdd943"}], "stats": {"total": 137, "additions": 63, "deletions": 74}, "files": [{"sha": "8fee0458fe9e5ab6fbdee50ca31044809d4f205f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1c0d18515f6899bc8362d9dc861021c929127f9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1c0d18515f6899bc8362d9dc861021c929127f9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b1c0d18515f6899bc8362d9dc861021c929127f9", "patch": "@@ -1,3 +1,15 @@\n+2019-08-14  Jakub Jelinek  <jakub@redhat.com>\n+\t    Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/91391 - bogus -Wcomma-subscript warning.\n+\t* parser.c (cp_parser_postfix_open_square_expression): Don't warn about\n+\ta deprecated comma here.  Pass warn_comma_subscript down to\n+\tcp_parser_expression.\n+\t(cp_parser_expression): New bool parameter.  Warn about uses of a comma\n+\toperator within a subscripting expression.\n+\t(cp_parser_skip_to_closing_square_bracket): Revert to pre-r274121 state.\n+\t(cp_parser_skip_to_closing_square_bracket_1): Remove.\n+\n 2019-08-14  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* name-lookup.c (get_std_name_hint): Add more entries."}, {"sha": "dbbfe1dbc2f6a56c9f6079cf72676611c37e1b47", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 24, "deletions": 74, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1c0d18515f6899bc8362d9dc861021c929127f9/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1c0d18515f6899bc8362d9dc861021c929127f9/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=b1c0d18515f6899bc8362d9dc861021c929127f9", "patch": "@@ -2102,7 +2102,7 @@ static cp_expr cp_parser_assignment_expression\n static enum tree_code cp_parser_assignment_operator_opt\n   (cp_parser *);\n static cp_expr cp_parser_expression\n-  (cp_parser *, cp_id_kind * = NULL, bool = false, bool = false);\n+  (cp_parser *, cp_id_kind * = NULL, bool = false, bool = false, bool = false);\n static cp_expr cp_parser_constant_expression\n   (cp_parser *, bool = false, bool * = NULL, bool = false);\n static cp_expr cp_parser_builtin_offsetof\n@@ -2669,8 +2669,6 @@ static bool cp_parser_init_statement_p\n   (cp_parser *);\n static bool cp_parser_skip_to_closing_square_bracket\n   (cp_parser *);\n-static int cp_parser_skip_to_closing_square_bracket_1\n-  (cp_parser *, enum cpp_ttype);\n \n /* Concept-related syntactic transformations */\n \n@@ -7524,33 +7522,9 @@ cp_parser_postfix_open_square_expression (cp_parser *parser,\n \t  index = cp_parser_braced_list (parser, &expr_nonconst_p);\n \t}\n       else\n-\t{\n-\t  /* [depr.comma.subscript]: A comma expression appearing as\n-\t     the expr-or-braced-init-list of a subscripting expression\n-\t     is deprecated.  A parenthesized comma expression is not\n-\t     deprecated.  */\n-\t  if (warn_comma_subscript)\n-\t    {\n-\t      /* Save tokens so that we can put them back.  */\n-\t      cp_lexer_save_tokens (parser->lexer);\n-\n-\t      /* Look for ',' that is not nested in () or {}.  */\n-\t      if (cp_parser_skip_to_closing_square_bracket_1 (parser,\n-\t\t\t\t\t\t\t      CPP_COMMA) == -1)\n-\t\t{\n-\t\t  auto_diagnostic_group d;\n-\t\t  warning_at (cp_lexer_peek_token (parser->lexer)->location,\n-\t\t\t      OPT_Wcomma_subscript,\n-\t\t\t      \"top-level comma expression in array subscript \"\n-\t\t\t      \"is deprecated\");\n-\t\t}\n-\n-\t      /* Roll back the tokens we skipped.  */\n-\t      cp_lexer_rollback_tokens (parser->lexer);\n-\t    }\n-\n-\t  index = cp_parser_expression (parser);\n-\t}\n+\tindex = cp_parser_expression (parser, NULL, /*cast_p=*/false,\n+\t\t\t\t      /*decltype_p=*/false,\n+\t\t\t\t      /*warn_comma_p=*/warn_comma_subscript);\n     }\n \n   parser->greater_than_is_operator_p = saved_greater_than_is_operator_p;\n@@ -9932,12 +9906,13 @@ cp_parser_assignment_operator_opt (cp_parser* parser)\n    CAST_P is true if this expression is the target of a cast.\n    DECLTYPE_P is true if this expression is the immediate operand of decltype,\n      except possibly parenthesized or on the RHS of a comma (N3276).\n+   WARN_COMMA_P is true if a comma should be diagnosed.\n \n    Returns a representation of the expression.  */\n \n static cp_expr\n cp_parser_expression (cp_parser* parser, cp_id_kind * pidk,\n-\t\t      bool cast_p, bool decltype_p)\n+\t\t      bool cast_p, bool decltype_p, bool warn_comma_p)\n {\n   cp_expr expression = NULL_TREE;\n   location_t loc = UNKNOWN_LOCATION;\n@@ -9984,6 +9959,17 @@ cp_parser_expression (cp_parser* parser, cp_id_kind * pidk,\n \tbreak;\n       /* Consume the `,'.  */\n       loc = cp_lexer_peek_token (parser->lexer)->location;\n+      if (warn_comma_p)\n+\t{\n+\t  /* [depr.comma.subscript]: A comma expression appearing as\n+\t     the expr-or-braced-init-list of a subscripting expression\n+\t     is deprecated.  A parenthesized comma expression is not\n+\t     deprecated.  */\n+\t  warning_at (loc, OPT_Wcomma_subscript,\n+\t\t      \"top-level comma expression in array subscript \"\n+\t\t      \"is deprecated\");\n+\t  warn_comma_p = false;\n+\t}\n       cp_lexer_consume_token (parser->lexer);\n       /* A comma operator cannot appear in a constant-expression.  */\n       if (cp_parser_non_integral_constant_expression (parser, NIC_COMMA))\n@@ -22888,25 +22874,16 @@ cp_parser_braced_list (cp_parser* parser, bool* non_constant_p)\n }\n \n /* Consume tokens up to, and including, the next non-nested closing `]'.\n-   Returns 1 iff we found a closing `]'.  Returns -1 if OR_TTYPE is not\n-   CPP_EOF and we found an unnested token of that type.  */\n+   Returns true iff we found a closing `]'.  */\n \n-static int\n-cp_parser_skip_to_closing_square_bracket_1 (cp_parser *parser,\n-\t\t\t\t\t    enum cpp_ttype or_ttype)\n+static bool\n+cp_parser_skip_to_closing_square_bracket (cp_parser *parser)\n {\n   unsigned square_depth = 0;\n-  unsigned paren_depth = 0;\n-  unsigned brace_depth = 0;\n \n   while (true)\n     {\n-      cp_token *token = cp_lexer_peek_token (parser->lexer);\n-\n-      /* Have we found what we're looking for before the closing square?  */\n-      if (token->type == or_ttype && or_ttype != CPP_EOF\n-\t  && brace_depth == 0 && paren_depth == 0 && square_depth == 0)\n-\treturn -1;\n+      cp_token * token = cp_lexer_peek_token (parser->lexer);\n \n       switch (token->type)\n \t{\n@@ -22916,38 +22893,20 @@ cp_parser_skip_to_closing_square_bracket_1 (cp_parser *parser,\n \t  /* FALLTHRU */\n \tcase CPP_EOF:\n \t  /* If we've run out of tokens, then there is no closing `]'.  */\n-\t  return 0;\n+\t  return false;\n \n         case CPP_OPEN_SQUARE:\n           ++square_depth;\n           break;\n \n         case CPP_CLOSE_SQUARE:\n-\t  if (square_depth-- == 0)\n+\t  if (!square_depth--)\n \t    {\n \t      cp_lexer_consume_token (parser->lexer);\n-\t      return 1;\n+\t      return true;\n \t    }\n \t  break;\n \n-\tcase CPP_OPEN_BRACE:\n-\t  ++brace_depth;\n-\t  break;\n-\n-\tcase CPP_CLOSE_BRACE:\n-\t  if (brace_depth-- == 0)\n-\t    return 0;\n-\t  break;\n-\n-\tcase CPP_OPEN_PAREN:\n-\t  ++paren_depth;\n-\t  break;\n-\n-\tcase CPP_CLOSE_PAREN:\n-\t  if (paren_depth-- == 0)\n-\t    return 0;\n-\t  break;\n-\n \tdefault:\n \t  break;\n \t}\n@@ -22957,15 +22916,6 @@ cp_parser_skip_to_closing_square_bracket_1 (cp_parser *parser,\n     }\n }\n \n-/* Consume tokens up to, and including, the next non-nested closing `]'.\n-   Returns true iff we found a closing `]'.  */\n-\n-static bool\n-cp_parser_skip_to_closing_square_bracket (cp_parser *parser)\n-{\n-  return cp_parser_skip_to_closing_square_bracket_1 (parser, CPP_EOF) == 1;\n-}\n-\n /* Return true if we are looking at an array-designator, false otherwise.  */\n \n static bool"}, {"sha": "db9cba6532f55bf9ac9d9a330e2f316a9216e5aa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1c0d18515f6899bc8362d9dc861021c929127f9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1c0d18515f6899bc8362d9dc861021c929127f9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b1c0d18515f6899bc8362d9dc861021c929127f9", "patch": "@@ -1,3 +1,9 @@\n+2019-08-14  Jakub Jelinek  <jakub@redhat.com>\n+\t    Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/91391 - bogus -Wcomma-subscript warning.\n+\t* g++.dg/cpp2a/comma5.C: New test.\n+\n 2019-08-14  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* lib/target-supports.exp (check_effective_target_noinit): New"}, {"sha": "68d19c09ccf58d7bc9335590251c094b8259ae42", "filename": "gcc/testsuite/g++.dg/cpp2a/comma5.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1c0d18515f6899bc8362d9dc861021c929127f9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fcomma5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1c0d18515f6899bc8362d9dc861021c929127f9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fcomma5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fcomma5.C?ref=b1c0d18515f6899bc8362d9dc861021c929127f9", "patch": "@@ -0,0 +1,21 @@\n+// PR c++/91391 - bogus -Wcomma-subscript warning.\n+// { dg-do compile { target c++2a } }\n+\n+template<typename T, typename U>\n+int foo(T t, U u) { return t + u; }\n+\n+void\n+fn (int *a, int b, int c)\n+{\n+  a[foo<int, int>(1, 2)];\n+  a[foo<int, int>(1, 2), foo<int, int>(3, 4)]; // { dg-warning \"24:top-level comma expression in array subscript is deprecated\" }\n+\n+  a[b < c, b < c]; // { dg-warning \"top-level comma expression in array subscript is deprecated\" }\n+  a[b < c, b > c]; // { dg-warning \"top-level comma expression in array subscript is deprecated\" }\n+  a[b > c, b > c]; // { dg-warning \"top-level comma expression in array subscript is deprecated\" }\n+  a[b > c, b < c]; // { dg-warning \"top-level comma expression in array subscript is deprecated\" }\n+  a[(b < c, b < c)];\n+  a[(b < c, b > c)];\n+  a[b << c, b << c]; // { dg-warning \"top-level comma expression in array subscript is deprecated\" }\n+  a[(b << c, b << c)]; \n+}"}]}