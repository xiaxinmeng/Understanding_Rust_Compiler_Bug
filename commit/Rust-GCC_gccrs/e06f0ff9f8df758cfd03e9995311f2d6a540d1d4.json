{"sha": "e06f0ff9f8df758cfd03e9995311f2d6a540d1d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA2ZjBmZjlmOGRmNzU4Y2ZkMDNlOTk5NTMxMWYyZDZhNTQwZDFkNA==", "commit": {"author": {"name": "Andrew Pinski", "email": "Andrew.Pinski@playstation.sony.com", "date": "2008-05-05T16:10:43Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2008-05-05T16:10:43Z"}, "message": "tree-ssa-forwprop.c (forward_propagate_addr_expr_1): If we have the same size types for...\n\n2008-05-05  Andrew Pinski  <Andrew.Pinski@playstation.sony.com>\n\n        * tree-ssa-forwprop.c (forward_propagate_addr_expr_1): If we have the\n        same size types for the indirect reference on the rhs, then create a VCE.\n\n2008-05-05  Andrew Pinski  <andrew.pinski@playstation.sony.com>\n\n        * gcc.dg/tree-ssa/forwprop-5.c: New testcase.\n        * gcc.dg/tree-ssa/forwprop-6.c: New testcase.\n        * gcc.dg/tree-ssa/forwprop-7.c: New testcase.\n        * gcc.dg/tree-ssa/forwprop-8.c: New testcase.\n        * gcc.dg/tree-ssa/forwprop-9.c: New testcase.\n\nFrom-SVN: r134947", "tree": {"sha": "1e8cf7783e4d709556387f45a18b0e829df63986", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e8cf7783e4d709556387f45a18b0e829df63986"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e06f0ff9f8df758cfd03e9995311f2d6a540d1d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e06f0ff9f8df758cfd03e9995311f2d6a540d1d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e06f0ff9f8df758cfd03e9995311f2d6a540d1d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e06f0ff9f8df758cfd03e9995311f2d6a540d1d4/comments", "author": null, "committer": null, "parents": [{"sha": "8c32cbc9216667838c44092195f782b9e2ccd2ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c32cbc9216667838c44092195f782b9e2ccd2ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c32cbc9216667838c44092195f782b9e2ccd2ee"}], "stats": {"total": 137, "additions": 137, "deletions": 0}, "files": [{"sha": "41cc67209d13b99816ab63935edef8500040a64c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e06f0ff9f8df758cfd03e9995311f2d6a540d1d4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e06f0ff9f8df758cfd03e9995311f2d6a540d1d4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e06f0ff9f8df758cfd03e9995311f2d6a540d1d4", "patch": "@@ -1,3 +1,8 @@\n+2008-05-05  Andrew Pinski  <Andrew.Pinski@playstation.sony.com>\n+\n+\t* tree-ssa-forwprop.c (forward_propagate_addr_expr_1): If we have the\n+\tsame size types for the indirect reference on the rhs, then create a VCE.\n+\n 2008-05-05  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md"}, {"sha": "06f68c5a374ecbff5858c5db41dfd6009a24f7f9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e06f0ff9f8df758cfd03e9995311f2d6a540d1d4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e06f0ff9f8df758cfd03e9995311f2d6a540d1d4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e06f0ff9f8df758cfd03e9995311f2d6a540d1d4", "patch": "@@ -1,3 +1,11 @@\n+2008-05-05  Andrew Pinski  <andrew.pinski@playstation.sony.com>\n+\n+\t* gcc.dg/tree-ssa/forwprop-5.c: New testcase.\n+\t* gcc.dg/tree-ssa/forwprop-6.c: New testcase.\n+\t* gcc.dg/tree-ssa/forwprop-7.c: New testcase.\n+\t* gcc.dg/tree-ssa/forwprop-8.c: New testcase.\n+\t* gcc.dg/tree-ssa/forwprop-9.c: New testcase.\n+\n 2008-05-05  Ira Rosen  <irar@il.ibm.com>\n \n \tPR tree-optimization/36119"}, {"sha": "710bc5dd1144b6c82db7d2eb6ebcd33ba6b656a6", "filename": "gcc/testsuite/gcc.dg/tree-ssa/forwprop-5.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e06f0ff9f8df758cfd03e9995311f2d6a540d1d4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e06f0ff9f8df758cfd03e9995311f2d6a540d1d4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-5.c?ref=e06f0ff9f8df758cfd03e9995311f2d6a540d1d4", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fdump-tree-forwprop1 -w\" } */\n+\n+#define vector __attribute__((vector_size(16) ))\n+struct VecClass\n+{\n+  vector float v;\n+};\n+\n+vector float foo( vector float v )\n+{\n+    vector float x = v;\n+    x = x + x;\n+    struct VecClass y = *(struct VecClass*)&x;\n+    return y.v;\n+}\n+\n+/* We should be able to convert the cast to a VCE in forwprop1. */\n+/* { dg-final { scan-tree-dump-times \"VIEW_CONVERT_EXPR\" 1 \"forwprop1\"} } */\n+/* { dg-final { cleanup-tree-dump \"forwprop1\" } } */\n+"}, {"sha": "7df9f45ab1749040d3fe0e952dc180fa97aba347", "filename": "gcc/testsuite/gcc.dg/tree-ssa/forwprop-6.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e06f0ff9f8df758cfd03e9995311f2d6a540d1d4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e06f0ff9f8df758cfd03e9995311f2d6a540d1d4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-6.c?ref=e06f0ff9f8df758cfd03e9995311f2d6a540d1d4", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-forwprop1 -W -Wall\" } */\n+\n+\n+int b;\n+void f(void)\n+{\n+  float a;\n+  a = 1;\n+  b = *(int*)&a; /* { dg-warning \"aliasing\" } */\n+}\n+\n+/* We should be able to convert the cast to a VCE in forwprop1,\n+   even if there is an aliasing violation. */\n+/* { dg-final { scan-tree-dump-times \"VIEW_CONVERT_EXPR\" 1 \"forwprop1\"} } */\n+/* { dg-final { cleanup-tree-dump \"forwprop1\" } } */"}, {"sha": "6b894b5b7c6dcf05b1ad3ef53b35d75a902aa2c0", "filename": "gcc/testsuite/gcc.dg/tree-ssa/forwprop-7.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e06f0ff9f8df758cfd03e9995311f2d6a540d1d4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e06f0ff9f8df758cfd03e9995311f2d6a540d1d4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-7.c?ref=e06f0ff9f8df758cfd03e9995311f2d6a540d1d4", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fdump-tree-forwprop1 -W -Wall\" } */\n+\n+int i;\n+int foo(void)\n+{\n+  volatile int *p = (volatile int *)&i;\n+  return *p + *p;\n+}\n+\n+/* We should not convert the cast to a VCE in forwprop1 as we have a volatile reference.  */\n+/* { dg-final { scan-tree-dump-times \"VIEW_CONVERT_EXPR\" 0 \"forwprop1\"} } */\n+/* { dg-final { scan-tree-dump-times \"volatile int\" 2 \"forwprop1\"} } */\n+/* { dg-final { cleanup-tree-dump \"forwprop1\" } } */"}, {"sha": "4e0751f81199ac7cea4c19335cd5b59c08c1bc8a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/forwprop-8.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e06f0ff9f8df758cfd03e9995311f2d6a540d1d4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e06f0ff9f8df758cfd03e9995311f2d6a540d1d4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-8.c?ref=e06f0ff9f8df758cfd03e9995311f2d6a540d1d4", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fdump-tree-forwprop1 -W -Wall\" } */\n+\n+\n+struct X { int a[5]; };\n+int foo(struct X *q)\n+{\n+  int (*pointer)[5] = &q->a;\n+  return (*pointer)[0];\n+}\n+\n+\n+/* We should have propragated &q->a into (*pointer).  */\n+/* { dg-final { scan-tree-dump-times \"pointer\" 0 \"forwprop1\"} } */\n+/* { dg-final { scan-tree-dump \"->a\\\\\\[0\\\\\\]\" \"forwprop1\" } } */\n+/* { dg-final { cleanup-tree-dump \"forwprop1\" } } */"}, {"sha": "70630d01a3432872cfd20cb1cc8fd24fac808c20", "filename": "gcc/testsuite/gcc.dg/tree-ssa/forwprop-9.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e06f0ff9f8df758cfd03e9995311f2d6a540d1d4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e06f0ff9f8df758cfd03e9995311f2d6a540d1d4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-9.c?ref=e06f0ff9f8df758cfd03e9995311f2d6a540d1d4", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fdump-tree-final_cleanup -W -Wall -fno-early-inlining\" } */\n+\n+\n+int b;\n+unsigned a;\n+static inline int *g(void)\n+{\n+  a = 1;\n+  return (int*)&a;\n+}\n+void f(void)\n+{\n+   b = *g(); \n+}\n+/* We should have converted the assignments to two = 1. */\n+/* { dg-final { scan-tree-dump-times \" = 1\" 2 \"final_cleanup\"} } */\n+/* { dg-final { cleanup-tree-dump \"final_cleanup\" } } */"}, {"sha": "9fbf58d853df9f50011fa170dd468850b2146339", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e06f0ff9f8df758cfd03e9995311f2d6a540d1d4/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e06f0ff9f8df758cfd03e9995311f2d6a540d1d4/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=e06f0ff9f8df758cfd03e9995311f2d6a540d1d4", "patch": "@@ -123,6 +123,14 @@ along with GCC; see the file COPYING3.  If not see\n \n      res = x->y->z;\n \n+   Or\n+     ptr = (type1*)&type2var;\n+     res = *ptr\n+\n+   Will get turned into (if type1 and type2 are the same size\n+   and neither have volatile on them):\n+     res = VIEW_CONVERT_EXPR<type1>(type2var)\n+\n    Or\n \n      ptr = &x[0];\n@@ -642,6 +650,37 @@ forward_propagate_addr_expr_1 (tree name, tree def_rhs, tree use_stmt,\n       return true;\n     }\n \n+  /* Now see if the RHS node is an INDIRECT_REF using NAME.  If so, \n+     propagate the ADDR_EXPR into the use of NAME and try to\n+     create a VCE and fold the result.  */\n+  if (TREE_CODE (rhs) == INDIRECT_REF\n+      && TREE_OPERAND (rhs, 0) == name\n+      && TYPE_SIZE (TREE_TYPE (rhs))\n+      && TYPE_SIZE (TREE_TYPE (TREE_OPERAND (def_rhs, 0)))\n+      /* We should not convert volatile loads to non volatile loads. */\n+      && !TYPE_VOLATILE (TREE_TYPE (rhs))\n+      && !TYPE_VOLATILE (TREE_TYPE (TREE_OPERAND (def_rhs, 0)))\n+      && operand_equal_p (TYPE_SIZE (TREE_TYPE (rhs)),\n+\t\t\t  TYPE_SIZE (TREE_TYPE (TREE_OPERAND (def_rhs, 0))), 0)) \n+   {\n+      bool res = true;\n+      tree new_rhs = unshare_expr (TREE_OPERAND (def_rhs, 0));\n+      new_rhs = fold_build1 (VIEW_CONVERT_EXPR, TREE_TYPE (rhs), new_rhs);\n+      /* If we have folded the VCE, then we have to create a new statement.  */\n+      if (TREE_CODE (new_rhs) != VIEW_CONVERT_EXPR)\n+\t{\n+\t  block_stmt_iterator bsi = bsi_for_stmt (use_stmt);\n+\t  new_rhs = force_gimple_operand_bsi (&bsi, new_rhs, true, NULL, true, BSI_SAME_STMT);\n+\t  /* As we change the deference to a SSA_NAME, we need to return false to make sure that\n+\t     the statement does not get removed.  */\n+\t  res = false;\n+\t}\n+      *rhsp = new_rhs;\n+      fold_stmt_inplace (use_stmt);\n+      tidy_after_forward_propagate_addr (use_stmt);\n+      return res;\n+   }\n+\n   /* If the use of the ADDR_EXPR is not a POINTER_PLUS_EXPR, there\n      is nothing to do. */\n   if (TREE_CODE (rhs) != POINTER_PLUS_EXPR"}]}