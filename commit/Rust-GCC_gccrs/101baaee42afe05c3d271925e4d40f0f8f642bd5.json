{"sha": "101baaee42afe05c3d271925e4d40f0f8f642bd5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTAxYmFhZWU0MmFmZTA1YzNkMjcxOTI1ZTRkNDBmMGY4ZjY0MmJkNQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2020-02-06T12:27:45Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2020-02-06T12:27:45Z"}, "message": "[Testsuite] \u2013 More fixes for remote execution: check_gc_sections_available, \u2026\n\n\t* gcc.target/arm/multilib.exp (multilib_config): Pass flags to\n\t\u2026_target_compile as (additional_flags=) option and not as source\n\tfilename to make it work with remote execution.\n\t* lib/target-supports.exp (check_runtime, check_gc_sections_available,\n\tcheck_effective_target_gas, check_effective_target_gld): Likewise.", "tree": {"sha": "e438f4f68273ad1ba0734a9c076f002221e3bcbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e438f4f68273ad1ba0734a9c076f002221e3bcbd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/101baaee42afe05c3d271925e4d40f0f8f642bd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/101baaee42afe05c3d271925e4d40f0f8f642bd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/101baaee42afe05c3d271925e4d40f0f8f642bd5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/101baaee42afe05c3d271925e4d40f0f8f642bd5/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1aa7705d59e56191c2ccc5594983d8fa0832718", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1aa7705d59e56191c2ccc5594983d8fa0832718", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1aa7705d59e56191c2ccc5594983d8fa0832718"}], "stats": {"total": 23, "additions": 18, "deletions": 5}, "files": [{"sha": "d0955e039b51c99391460d7d71eac4d8b5a8e468", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/101baaee42afe05c3d271925e4d40f0f8f642bd5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/101baaee42afe05c3d271925e4d40f0f8f642bd5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=101baaee42afe05c3d271925e4d40f0f8f642bd5", "patch": "@@ -1,3 +1,11 @@\n+2020-02-06  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gcc.target/arm/multilib.exp (multilib_config): Pass flags to\n+\t\u2026_target_compile as (additional_flags=) option and not as source\n+\tfilename to make it work with remote execution.\n+\t* lib/target-supports.exp (check_runtime, check_gc_sections_available,\n+\tcheck_effective_target_gas, check_effective_target_gld): Likewise.\n+\n 2020-02-06  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/93594"}, {"sha": "17111ee52579142db57157ba1912154cb03cf58e", "filename": "gcc/testsuite/gcc.target/arm/multilib.exp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/101baaee42afe05c3d271925e4d40f0f8f642bd5/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmultilib.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/101baaee42afe05c3d271925e4d40f0f8f642bd5/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmultilib.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmultilib.exp?ref=101baaee42afe05c3d271925e4d40f0f8f642bd5", "patch": "@@ -40,7 +40,8 @@ proc multilib_config {profile} {\n proc check_multi_dir { gcc_opts multi_dir } {\n     global tool\n \n-    set gcc_output [${tool}_target_compile \"--print-multi-directory $gcc_opts\" \"\" \"none\" \"\"]\n+    set options [list \"additional_flags=[concat \"--print-multi-directory\" [gcc_opts]]\"]\n+    set gcc_output [${tool}_target_compile \"\" \"\" \"none\" $options]\n     if { [string match \"$multi_dir\\n\" $gcc_output] } {\n \tpass \"multilibdir $gcc_opts $multi_dir\"\n     } else {"}, {"sha": "d3b2798df3e8779730566ad13755237e21fa5ecf", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/101baaee42afe05c3d271925e4d40f0f8f642bd5/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/101baaee42afe05c3d271925e4d40f0f8f642bd5/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=101baaee42afe05c3d271925e4d40f0f8f642bd5", "patch": "@@ -260,7 +260,8 @@ proc check_runtime {prop args} {\n proc check_configured_with { pattern } {\n     global tool\n \n-    set gcc_output [${tool}_target_compile \"-v\" \"\" \"none\" \"\"]\n+    set options [list \"additional_flags=-v\"]\n+    set gcc_output [${tool}_target_compile \"\" \"\" \"none\" $options]\n     if { [ regexp \"Configured with: \\[^\\n\\]*$pattern\" $gcc_output ] } {\n         verbose \"Matched: $pattern\" 2\n         return 1\n@@ -504,7 +505,8 @@ proc check_gc_sections_available { } {\n \t}\n \n \t# Check if the ld used by gcc supports --gc-sections.\n-\tset gcc_ld [lindex [${tool}_target_compile \"-print-prog-name=ld\" \"\" \"none\" \"\"] 0]\n+\tset options [list \"additional_flags=-print-prog-name=ld\"]\n+\tset gcc_ld [lindex [${tool}_target_compile \"\" \"\" \"none\" $options] 0]\n \tset ld_output [remote_exec host \"$gcc_ld\" \"--help\"]\n \tif { [ string first \"--gc-sections\" $ld_output ] >= 0 } {\n \t    return 1\n@@ -8566,7 +8568,8 @@ proc check_effective_target_gas { } {\n \n     if {![info exists use_gas_saved]} {\n \t# Check if the as used by gcc is GNU as.\n-\tset gcc_as [lindex [${tool}_target_compile \"-print-prog-name=as\" \"\" \"none\" \"\"] 0]\n+\tset options [list \"additional_flags=-print-prog-name=as\"]\n+\tset gcc_as [lindex [${tool}_target_compile \"\" \"\" \"none\" $options] 0]\n \t# Provide /dev/null as input, otherwise gas times out reading from\n \t# stdin.\n \tset status [remote_exec host \"$gcc_as\" \"-v /dev/null\"]\n@@ -8588,7 +8591,8 @@ proc check_effective_target_gld { } {\n \n     if {![info exists use_gld_saved]} {\n \t# Check if the ld used by gcc is GNU ld.\n-\tset gcc_ld [lindex [${tool}_target_compile \"-print-prog-name=ld\" \"\" \"none\" \"\"] 0]\n+\tset options [list \"additional_flags=-print-prog-name=ld\"]\n+\tset gcc_ld [lindex [${tool}_target_compile \"\" \"\" \"none\" $options] 0]\n \tset status [remote_exec host \"$gcc_ld\" \"--version\"]\n \tset ld_output [lindex $status 1]\n \tif { [ string first \"GNU\" $ld_output ] >= 0 } {"}]}