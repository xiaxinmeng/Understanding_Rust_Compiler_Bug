{"sha": "143dc6466fdd9329728939f786d6df5f3d528469", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQzZGM2NDY2ZmRkOTMyOTcyODkzOWY3ODZkNmRmNWYzZDUyODQ2OQ==", "commit": {"author": {"name": "Kresten Krab Thorup", "email": "krab@gcc.gnu.org", "date": "1993-04-13T12:57:23Z"}, "committer": {"name": "Kresten Krab Thorup", "email": "krab@gcc.gnu.org", "date": "1993-04-13T12:57:23Z"}, "message": "(-Wprotocol): added\n\n(-Wprotocol): added\n(flag_warn_protocol): New variable\n(check_methods_accessible): New function\n(check_protocol): Use check_methods or check_methods_accessible\ndepending on flag_warn_protocol to check protocol conformance.\n\n(start_class): For class implementations Assign\nSUPER_CLASS_NAME from interface specification if not present.\n\nFrom-SVN: r4121", "tree": {"sha": "7c8c8638e305e75642d3fb402b418388ce14dd1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c8c8638e305e75642d3fb402b418388ce14dd1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/143dc6466fdd9329728939f786d6df5f3d528469", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/143dc6466fdd9329728939f786d6df5f3d528469", "html_url": "https://github.com/Rust-GCC/gccrs/commit/143dc6466fdd9329728939f786d6df5f3d528469", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/143dc6466fdd9329728939f786d6df5f3d528469/comments", "author": null, "committer": null, "parents": [{"sha": "b800a01b95049599d3b476f1154dafa53e432520", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b800a01b95049599d3b476f1154dafa53e432520", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b800a01b95049599d3b476f1154dafa53e432520"}], "stats": {"total": 101, "additions": 94, "deletions": 7}, "files": [{"sha": "eb2e98cb37fb33ccaf290ca3f7906f61371efc06", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 94, "deletions": 7, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/143dc6466fdd9329728939f786d6df5f3d528469/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/143dc6466fdd9329728939f786d6df5f3d528469/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=143dc6466fdd9329728939f786d6df5f3d528469", "patch": "@@ -445,6 +445,12 @@ FILE *gen_declaration_file;\n \n int warn_selector = 0;\n \n+/* Warn if methods required by a protocol are not implemented in the \n+   class adopting it.  When turned off, methods inherited to that\n+   class are also considered implemented */\n+\n+int flag_warn_protocol = 1;\n+\n /* tells \"encode_pointer/encode_aggregate\" whether we are generating\n    type descriptors for instance variables (as opposed to methods).\n    Type descriptors for instance variables contain more information\n@@ -533,6 +539,10 @@ lang_decode_option (p)\n     warn_selector = 1;\n   else if (!strcmp (p, \"-Wno-selector\"))\n     warn_selector = 0;\n+  else if (!strcmp (p, \"-Wprotocol\"))\n+    flag_warn_protocol = 1;\n+  else if (!strcmp (p, \"-Wno-protocol\"))\n+    flag_warn_protocol = 0;\n   else if (!strcmp (p, \"-fgnu-runtime\"))\n     flag_next_runtime = 0;\n   else if (!strcmp (p, \"-fno-next-runtime\"))\n@@ -5280,6 +5290,69 @@ tree protocol;\n    return 1;\n }\n \n+/* Make sure all methods in CHAIN are accessible as MTYPE methods in \n+   CONTEXT.  This is one of two mechanisms to check protocol integrity\n+*/\n+\n+static int\n+check_methods_accessible (chain, context, mtype)\n+     tree chain;\n+     tree context; /* implementation_context */\n+     int mtype;\n+{\n+  int first = 1;\n+  tree list;\n+\n+  while (chain)\n+    {\n+      while (context)\n+\t{\n+\t  if (mtype == '+')\n+\t    list = CLASS_CLS_METHODS (context);\n+\t  else\n+\t    list = CLASS_NST_METHODS (context);\n+\n+\t  if (lookup_method (list, chain))\n+\t      break; \n+\n+\t  else if (TREE_CODE (context) == CLASS_IMPLEMENTATION_TYPE) \n+\t    context = (CLASS_SUPER_NAME (context) \n+\t\t       ? lookup_interface (CLASS_SUPER_NAME (context))\n+\t\t       : NULL_TREE);\n+\n+\t  else if (TREE_CODE (context) == CATEGORY_IMPLEMENTATION_TYPE)\n+\t    context = (CLASS_NAME (context) \n+\t\t       ? lookup_interface (CLASS_NAME (context))\n+\t\t       : NULL_TREE);\n+\t  else\n+\t    abort ();\n+\t}\n+\n+      if (context == NULL_TREE)\n+\t{\n+\t  if (first)\n+\t    {\n+\t      if (TREE_CODE (implementation_context)\n+\t\t  == CLASS_IMPLEMENTATION_TYPE)\n+\t\twarning (\"incomplete implementation of class `%s'\",\n+\t\t\t IDENTIFIER_POINTER\n+\t\t\t   (CLASS_NAME (implementation_context)));\n+\t      else if (TREE_CODE (implementation_context)\n+\t\t       == CATEGORY_IMPLEMENTATION_TYPE)\n+\t\twarning (\"incomplete implementation of category `%s'\",\n+\t\t\t IDENTIFIER_POINTER\n+\t\t\t   (CLASS_SUPER_NAME (implementation_context)));\n+\t      first = 0;\n+\t    }\n+\t  warning (\"method definition for `%c%s' not found\",\n+\t\t   mtype, IDENTIFIER_POINTER (METHOD_SEL_NAME (chain)));\n+\t}\n+\n+      chain = TREE_CHAIN (chain); /* next method... */\n+    }\n+    return first;\n+}\n+\n static void\n check_protocols (proto_list, type, name)\n      tree proto_list;\n@@ -5293,14 +5366,23 @@ check_protocols (proto_list, type, name)\n       if (TREE_CODE (p) == PROTOCOL_INTERFACE_TYPE)\n \t{\n \t  int f1, f2;\n-\n+\t  \n \t  /* Ensure that all protocols have bodies! */\n-\t  f1 = check_methods (PROTOCOL_CLS_METHODS (p),\n-\t\t    CLASS_CLS_METHODS (implementation_context),\n-\t\t    '+');\n-\t  f2 = check_methods (PROTOCOL_NST_METHODS (p),\n-\t\t    CLASS_NST_METHODS (implementation_context),\n-\t\t    '-');\n+\t  if (flag_warn_protocol) {\n+\t    f1 = check_methods (PROTOCOL_CLS_METHODS (p),\n+\t\t\t\tCLASS_CLS_METHODS (implementation_context),\n+\t\t\t\t'+');\n+\t    f2 = check_methods (PROTOCOL_NST_METHODS (p),\n+\t\t\t\tCLASS_NST_METHODS (implementation_context),\n+\t\t\t\t'-');\n+\t  } else {\n+\t    f1 = check_methods_accessible (PROTOCOL_CLS_METHODS (p),\n+\t\t\t\t\t   implementation_context,\n+\t\t\t\t\t   '+');\n+\t    f2 = check_methods_accessible (PROTOCOL_NST_METHODS (p),\n+\t\t\t\t\t   implementation_context,\n+\t\t\t\t\t   '-');\n+\t  }\n \n \t  if (!f1 || !f2)\n \t    warning (\"%s `%s' does not fully implement the `%s' protocol\",\n@@ -5411,6 +5493,11 @@ start_class (code, class_name, super_name, protocol_list)\n \t\t IDENTIFIER_POINTER (super_name));\n \t  error (\"previous declaration of `%s'\", name);\n         }\n+      else if (! super_name)\n+\t{\n+\t  CLASS_SUPER_NAME (implementation_context) \n+\t    = CLASS_SUPER_NAME (implementation_template);\n+\t}\n     }\n   else if (code == CLASS_INTERFACE_TYPE)\n     {"}]}