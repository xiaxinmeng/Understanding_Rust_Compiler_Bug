{"sha": "ba49275257912a32b155821a257024b7a6f1f0c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmE0OTI3NTI1NzkxMmEzMmIxNTU4MjFhMjU3MDI0YjdhNmYxZjBjMQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-10-15T21:13:24Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-10-15T21:13:24Z"}, "message": "i386.md (*movdfcc_1_rex64): Correct mode attribute.\n\n\t* config/i386/i386.md (*movdfcc_1_rex64): Correct mode attribute.\n\t(*movdfcc_1): ditto.\n\nFrom-SVN: r165520", "tree": {"sha": "6df758a1989fa3bd3aa6ab602fd1d0bfb21966cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6df758a1989fa3bd3aa6ab602fd1d0bfb21966cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba49275257912a32b155821a257024b7a6f1f0c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba49275257912a32b155821a257024b7a6f1f0c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba49275257912a32b155821a257024b7a6f1f0c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba49275257912a32b155821a257024b7a6f1f0c1/comments", "author": null, "committer": null, "parents": [{"sha": "7e4aae92f2dab0434634b62934df54c2bddc343c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e4aae92f2dab0434634b62934df54c2bddc343c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e4aae92f2dab0434634b62934df54c2bddc343c"}], "stats": {"total": 138, "additions": 65, "deletions": 73}, "files": [{"sha": "0d3d9b26ef3905b0c5754df3429085fc8281d7bf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 31, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba49275257912a32b155821a257024b7a6f1f0c1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba49275257912a32b155821a257024b7a6f1f0c1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ba49275257912a32b155821a257024b7a6f1f0c1", "patch": "@@ -1,3 +1,8 @@\n+2010-10-15  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*movdfcc_1_rex64): Correct mode attribute.\n+\t(*movdfcc_1): ditto.\n+\n 2010-10-15  Joseph Myers  <joseph@codesourcery.com>\n \n \t* target.def (target_option.init_struct): New hook.\n@@ -154,8 +159,7 @@\n 2010-10-15  Richard Guenther  <rguenther@suse.de>\n \n \tPR lto/45957\n-\t* tree.c (free_lang_data_in_decl): Do not clear DECL_INITIAL\n-\tof vars.\n+\t* tree.c (free_lang_data_in_decl): Do not clear DECL_INITIAL of vars.\n \n 2010-10-15  Chung-Lin Tang  <cltang@codesourcery.com>\n \n@@ -178,12 +182,12 @@\n \t* cgraph.h (cgraph node): Enable former_clone_of unconditinally.\n \t* cgraphunit.c (verify_cgraph_node, cgraph_materialize_clone): Handle\n \tformer_clone_of unconditionally.\n-\t\n+\n 2010-10-14  Iain Sandoe  <iains@gcc.gnu.org>\n \n-\tmerge from FSF apple 'trunk' branch. \n+\tmerge from FSF apple 'trunk' branch.\n \t2006 Fariborz Jahanian <fjahanian@apple.com>\n-\t\n+\n \tRadars 4436866, 4505126, 4506903, 4517826\n \t* c-parser.c (c_parser, objc_property_attr_context) New flag.\n \t(c_lex_one_token): Handle property attributes.\n@@ -199,8 +203,7 @@\n 2010-10-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/46008\n-\t* tree-if-conv.c (predicate_bbs): Try to canonicalize c2\n-\tif possible.\n+\t* tree-if-conv.c (predicate_bbs): Try to canonicalize c2 if possible.\n \n 2010-10-14  Richard Guenther  <rguenther@suse.de>\n \n@@ -241,8 +244,8 @@\n \t(lang_bitmap, struct outf, outf_p, header_file, oprintf)\n \t(get_output_file_with_visibility, srcdir, srcdir_len, do_dump):\n \tMoved from gengtype.c to here.\n-\t(do_debug, read_state_filename, write_state_filename): New\n-\tvariables. (DBGPRINTF, DBGPRINT_COUNT_TYPE): New macros.\n+\t(do_debug, read_state_filename, write_state_filename): New variables.\n+\t(DBGPRINTF, DBGPRINT_COUNT_TYPE): New macros.\n \n \t* Makefile.in:\n \t(REVISION): Always defined.\n@@ -270,8 +273,7 @@\n \n 2010-10-14  Nathan Froyd  <froydnj@codesourcery.com>\n \n-\t* config.gcc (arm*-*-linux-*eabi) <tm_file>: Add bpabi.h from\n-\tlibgcc.\n+\t* config.gcc (arm*-*-linux-*eabi) <tm_file>: Add bpabi.h from libgcc.\n \t(arm*-*-uclinux*eabi) <tm_file>: Likewise.\n \t(arm*-*-eabi*) <tm_file>: Likewise.\n \t(frv-*-elf) <tm_file>: Add frv-abi.h from libgcc.\n@@ -289,8 +291,7 @@\n \t(gen_type_die_with_usage): Likewise.\n \t* sdbout.c (plain_type_1): Likewise.\n \t* tree.c (build_int_cst_wide): Likewise.\n-\t* gimple.c (gimple_types_compatible_p_1): NULLPTR_TYPE types\n-\tare equal.\n+\t* gimple.c (gimple_types_compatible_p_1): NULLPTR_TYPE types are equal.\n \n 2010-10-14  Joseph Myers  <joseph@codesourcery.com>\n \n@@ -329,8 +330,7 @@\n \tmaybe_set_param_value.\n \t* opts.c (handle_param): Take opts and opts_set parameters.\n \tUpdate call to set_param_value.\n-\t(initial_min_crossjump_insns,\n-\tinitial_max_fields_for_field_sensitive,\n+\t(initial_min_crossjump_insns, initial_max_fields_for_field_sensitive,\n \tinitial_loop_invariant_max_bbs_in_loop): Remove.\n \t(init_options_once): Don't set them.\n \t(init_options_struct): Initialize parameters structures.\n@@ -339,8 +339,7 @@\n \t(finish_options): Update calls to maybe_set_param_value.\n \t(common_handle_option): Update calls to handle_param and\n \tset_param_value.\n-\t* toplev.c (DEFPARAM): Update definition for changes to\n-\tparam_info.\n+\t* toplev.c (DEFPARAM): Update definition for changes to param_info.\n \t(general_init): Call finish_params.\n \n 2010-10-14  Nick Clifton  <nickc@redhat.com>\n@@ -351,8 +350,7 @@\n \t(FIXED_REGISTERS, CALL_USED_REGISTERS): Update with CC_REG.\n \t(HARD_REGNO_MODE_OK): Call mn10300_hard_regno_mode_ok.\n \t(MODES_TIEABLE): Call mn10300_modes_tieable.\n-\t(REG_CLASS_NAMES, REG_CLASS_CONTENTS, REGNO_REG_CLASS): Add\n-\tCC_REGS.\n+\t(REG_CLASS_NAMES, REG_CLASS_CONTENTS, REGNO_REG_CLASS): Add CC_REGS.\n \t(LEGITIMATE_CONSTANT_P): Call mn10300_legitimate_constant_p.\n \t(CC_OVERFLOW_UNUSABLE, CC_NO_CARRY, NOTICE_UPDATE_CC)\n \t(SELECT_CC_MODE, REVERSIBLE_CC_MODE): Delete.\n@@ -423,7 +421,7 @@\n \tcalled through for_each_rtx.\n \t(set_live_p): Adjust caller.\n \t(insn_live_p): Don't reset DEBUG_INSNs here.\n-\t(struct dead_debug_insn_data): New data. \n+\t(struct dead_debug_insn_data): New data.\n \t(count_stores, is_dead_debug_insn, replace_dead_reg): New functions.\n \t(delete_trivially_dead_insns): If there is just one setter for the\n \tdead reg that is referenced by some DEBUG_INSNs, create a DEBUG_EXPR\n@@ -472,7 +470,7 @@\n \t* config/i386/i386.c (ix86_builtins): Add\n \tIX86_BUILTIN_CPYSGNPS256 and IX86_BUILTIN_CPYSGNPD256.\n \t(bdesc_args): Likewise.\n-\t(ix86_builtin_vectorized_function): Support \n+\t(ix86_builtin_vectorized_function): Support\n \tIX86_BUILTIN_CPYSGNPS256, IX86_BUILTIN_CPYSGNPD256,\n \tIX86_BUILTIN_SQRTPD256, IX86_BUILTIN_SQRTPS_NR256,\n \tand IX86_BUILTIN_CVTPS2DQ256.\n@@ -599,8 +597,7 @@\n \n 2010-10-12  Nathan Froyd  <froydnj@codesourcery.com>\n \n-\t* libgcc2.h: Use __SIZEOF_DOUBLE__ instead of\n-\tLIBGCC2_DOUBLE_TYPE_SIZE.\n+\t* libgcc2.h: Use __SIZEOF_DOUBLE__ instead of LIBGCC2_DOUBLE_TYPE_SIZE.\n \t(LIBGCC2_DOUBLE_TYPE_SIZE): Delete.\n \t* config/fixed-bit.h: Likewise.\n \t* config/rx/rx.h (LIBGCC2_DOUBLE_TYPE_SIZE): Delete.\n@@ -624,14 +621,12 @@\n \t* config/arm/arm.h (ARM_EXPAND_ALIGNMENT): Rename from\n \tDATA_ALIGNMENT and add COND parameter. Update comments above.\n \t(DATA_ALIGNMENT): Use ARM_EXPAND_ALIGNMENT, with !optimize_size.\n-\t(LOCAL_ALIGNMENT): Use ARM_EXPAND_ALIGNMENT, with\n-\t!flag_conserve_stack.\n+\t(LOCAL_ALIGNMENT): Use ARM_EXPAND_ALIGNMENT, with !flag_conserve_stack.\n \n 2010-10-12  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR bootstrap/45958\n-\t* exec-tool.in: Support '-plugin' as the second option to the\n-\tlinker.\n+\t* exec-tool.in: Support '-plugin' as the second option to the linker.\n \n 2010-10-12  Richard Henderson  <rth@redhat.com>\n \n@@ -671,8 +666,8 @@\n \t(enum debug_info_type, enum debug_info_level, enum\n \tdebug_info_usage, enum symbol_visibility, struct visibility_flags,\n \tenum ira_algorithm, enum ira_region, enum excess_precision, enum\n-\tgraph_dump_types, enum stack_check_type, enum\n-\twarn_strict_overflow_code): Move to flag-types.h\n+\tgraph_dump_types, enum stack_check_type,\n+\tenum warn_strict_overflow_code): Move to flag-types.h\n \t* opth-gen.awk: Include flag-types.h in options.h.\n \n 2010-10-12  Jakub Jelinek  <jakub@redhat.com>\n@@ -685,8 +680,7 @@\n \t(iterative_hash_rtx): New prototype.\n \t* rtl.c (iterative_hash_rtx): New function.\n \t* dwarf2out.c (dw_loc_list_node): Add hash and emitted fields.\n-\t(output_loc_list): Return immediately if emitted is set,\n-\tset it.\n+\t(output_loc_list): Return immediately if emitted is set, set it.\n \t(hash_loc_operands, hash_locs, hash_loc_list,\n \tcompare_loc_operands, compare_locs, loc_list_hash, loc_list_eq,\n \toptimize_location_lists_1, optimize_location_lists): New function."}, {"sha": "0d3856efbeae27f588bb52ea8cfe12b41b21ee0e", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba49275257912a32b155821a257024b7a6f1f0c1/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba49275257912a32b155821a257024b7a6f1f0c1/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=ba49275257912a32b155821a257024b7a6f1f0c1", "patch": "@@ -15945,21 +15945,34 @@\n    || (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\"\n   \"if (ix86_expand_fp_movcc (operands)) DONE; else FAIL;\")\n \n-(define_insn \"*movsfcc_1_387\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f,f,r,r\")\n-\t(if_then_else:SF (match_operator 1 \"fcmov_comparison_operator\"\n+(define_insn \"*movxfcc_1\"\n+  [(set (match_operand:XF 0 \"register_operand\" \"=f,f\")\n+\t(if_then_else:XF (match_operator 1 \"fcmov_comparison_operator\"\n \t\t\t\t[(reg FLAGS_REG) (const_int 0)])\n-\t\t      (match_operand:SF 2 \"nonimmediate_operand\" \"f,0,rm,0\")\n-\t\t      (match_operand:SF 3 \"nonimmediate_operand\" \"0,f,0,rm\")))]\n-  \"TARGET_80387 && TARGET_CMOVE\n+\t\t      (match_operand:XF 2 \"register_operand\" \"f,0\")\n+\t\t      (match_operand:XF 3 \"register_operand\" \"0,f\")))]\n+  \"TARGET_80387 && TARGET_CMOVE\"\n+  \"@\n+   fcmov%F1\\t{%2, %0|%0, %2}\n+   fcmov%f1\\t{%3, %0|%0, %3}\"\n+  [(set_attr \"type\" \"fcmov\")\n+   (set_attr \"mode\" \"XF\")])\n+\n+(define_insn \"*movdfcc_1_rex64\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f,f,r,r\")\n+\t(if_then_else:DF (match_operator 1 \"fcmov_comparison_operator\"\n+\t\t\t\t[(reg FLAGS_REG) (const_int 0)])\n+\t\t      (match_operand:DF 2 \"nonimmediate_operand\" \"f,0,rm,0\")\n+\t\t      (match_operand:DF 3 \"nonimmediate_operand\" \"0,f,0,rm\")))]\n+  \"TARGET_64BIT && TARGET_80387 && TARGET_CMOVE\n    && !(MEM_P (operands[2]) && MEM_P (operands[3]))\"\n   \"@\n    fcmov%F1\\t{%2, %0|%0, %2}\n    fcmov%f1\\t{%3, %0|%0, %3}\n    cmov%O2%C1\\t{%2, %0|%0, %2}\n    cmov%O2%c1\\t{%3, %0|%0, %3}\"\n   [(set_attr \"type\" \"fcmov,fcmov,icmov,icmov\")\n-   (set_attr \"mode\" \"SF,SF,SI,SI\")])\n+   (set_attr \"mode\" \"DF,DF,DI,DI\")])\n \n (define_insn \"*movdfcc_1\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f,f,&r,&r\")\n@@ -15975,23 +15988,7 @@\n    #\n    #\"\n   [(set_attr \"type\" \"fcmov,fcmov,multi,multi\")\n-   (set_attr \"mode\" \"DF\")])\n-\n-(define_insn \"*movdfcc_1_rex64\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f,f,r,r\")\n-\t(if_then_else:DF (match_operator 1 \"fcmov_comparison_operator\"\n-\t\t\t\t[(reg FLAGS_REG) (const_int 0)])\n-\t\t      (match_operand:DF 2 \"nonimmediate_operand\" \"f,0,rm,0\")\n-\t\t      (match_operand:DF 3 \"nonimmediate_operand\" \"0,f,0,rm\")))]\n-  \"TARGET_64BIT && TARGET_80387 && TARGET_CMOVE\n-   && !(MEM_P (operands[2]) && MEM_P (operands[3]))\"\n-  \"@\n-   fcmov%F1\\t{%2, %0|%0, %2}\n-   fcmov%f1\\t{%3, %0|%0, %3}\n-   cmov%O2%C1\\t{%2, %0|%0, %2}\n-   cmov%O2%c1\\t{%3, %0|%0, %3}\"\n-  [(set_attr \"type\" \"fcmov,fcmov,icmov,icmov\")\n-   (set_attr \"mode\" \"DF\")])\n+   (set_attr \"mode\" \"DF,DF,DI,DI\")])\n \n (define_split\n   [(set (match_operand:DF 0 \"register_and_not_any_fp_reg_operand\" \"\")\n@@ -16014,18 +16011,21 @@\n   split_double_mode (DImode, &operands[0], 1, &operands[2], &operands[3]);\n })\n \n-(define_insn \"*movxfcc_1\"\n-  [(set (match_operand:XF 0 \"register_operand\" \"=f,f\")\n-\t(if_then_else:XF (match_operator 1 \"fcmov_comparison_operator\"\n+(define_insn \"*movsfcc_1_387\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f,f,r,r\")\n+\t(if_then_else:SF (match_operator 1 \"fcmov_comparison_operator\"\n \t\t\t\t[(reg FLAGS_REG) (const_int 0)])\n-\t\t      (match_operand:XF 2 \"register_operand\" \"f,0\")\n-\t\t      (match_operand:XF 3 \"register_operand\" \"0,f\")))]\n-  \"TARGET_80387 && TARGET_CMOVE\"\n+\t\t      (match_operand:SF 2 \"nonimmediate_operand\" \"f,0,rm,0\")\n+\t\t      (match_operand:SF 3 \"nonimmediate_operand\" \"0,f,0,rm\")))]\n+  \"TARGET_80387 && TARGET_CMOVE\n+   && !(MEM_P (operands[2]) && MEM_P (operands[3]))\"\n   \"@\n    fcmov%F1\\t{%2, %0|%0, %2}\n-   fcmov%f1\\t{%3, %0|%0, %3}\"\n-  [(set_attr \"type\" \"fcmov\")\n-   (set_attr \"mode\" \"XF\")])\n+   fcmov%f1\\t{%3, %0|%0, %3}\n+   cmov%O2%C1\\t{%2, %0|%0, %2}\n+   cmov%O2%c1\\t{%3, %0|%0, %3}\"\n+  [(set_attr \"type\" \"fcmov,fcmov,icmov,icmov\")\n+   (set_attr \"mode\" \"SF,SF,SI,SI\")])\n \n ;; All moves in XOP pcmov instructions are 128 bits and hence we restrict\n ;; the scalar versions to have only XMM registers as operands."}, {"sha": "c61580225f3f5f983af8c220770faf1de23291e4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba49275257912a32b155821a257024b7a6f1f0c1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba49275257912a32b155821a257024b7a6f1f0c1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ba49275257912a32b155821a257024b7a6f1f0c1", "patch": "@@ -30,8 +30,8 @@\n \n 2010-10-15  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n-       * g++.dg/torture/stackalign/eh-vararg-2.C: Fix dg-options for\n-       arm-eabi targets.\n+\t* g++.dg/torture/stackalign/eh-vararg-2.C: Fix dg-options for\n+\tarm-eabi targets.\n \n 2010-10-15  Chung-Lin Tang  <cltang@codesourcery.com>\n \n@@ -65,9 +65,9 @@\n \t* obj-c++.dg/property/fsf-property-method-access.mm: New.\n \t* obj-c++.dg/property/fsf-property-named-ivar.mm: New.\n \n-\tmerge from FSF apple 'trunk' branch. \n+\tmerge from FSF apple 'trunk' branch.\n \t2006 Fariborz Jahanian <fjahanian@apple.com>\n-\t\n+\n \tRadars 4436866, 4505126, 4506903, 4517826\n \t* objc.dg/property/property-1.m: New.\n \t* objc.dg/property/property-2.m: New.\n@@ -145,13 +145,11 @@\n 2010-10-14  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR middle-end/46011\n-\t* gcc.target/i386/vectorize4-avx.c: Scan 256bit AVX register\n-\tand xfail.\n+\t* gcc.target/i386/vectorize4-avx.c: Scan 256bit AVX register and xfail.\n \n 2010-10-14  H.J. Lu  <hongjiu.lu@intel.com>\n \n-\t* gcc.target/i386/recip-vec-sqrtf-avx.c: Scan 256bit AVX\n-\tregister.\n+\t* gcc.target/i386/recip-vec-sqrtf-avx.c: Scan 256bit AVX register.\n \t* gcc.target/i386/recip-vec-divf-avx.c: Likewise.\n \n 2010-10-14  Andrey Belevantsev  <abel@ispras.ru>\n@@ -291,7 +289,7 @@\n 2010-10-11  Nick Clifton  <nickc@redhat.com>\n \n \t* gcc.c-torture/compile/pr44197.c: Require visibility support.\n-        Allow for a user label prefix.\n+\tAllow for a user label prefix.\n \n 2010-10-10  Richard Guenther  <rguenther@suse.de>\n "}]}