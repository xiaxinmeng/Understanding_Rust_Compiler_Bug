{"sha": "5345cf689ed92391b912bfc6baa49b18c91e671f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTM0NWNmNjg5ZWQ5MjM5MWI5MTJiZmM2YmFhNDliMThjOTFlNjcxZg==", "commit": {"author": {"name": "Trevor Smigiel", "email": "Trevor_Smigiel@playstation.sony.com", "date": "2009-04-27T18:48:59Z"}, "committer": {"name": "Trevor Smigiel", "email": "tsmigiel@gcc.gnu.org", "date": "2009-04-27T18:48:59Z"}, "message": "Allow non-constant arguments to conversion intrinsics.\n\n\t* spu-protos.h (exp2_immediate_p, spu_gen_exp2): Declare.\n\t* predicates.md (spu_inv_exp2_operand, spu_exp2_operand): New.\n\t* spu.c (print_operand): Handle 'v' and 'w'.\n\t(exp2_immediate_p, spu_gen_exp2): Define.\n\t* spu-builtins.def (spu_convts, spu_convtu, spu_convtf_0,\n\tspu_convtf_1): Update parameter descriptions.\n\t* spu-builtins.md (spu_csflt, spu_cuflt, spu_cflts, spu_cfltu):\n\tUpdate.\n\t* constraints.md ('v', 'w'): New.\n\t* spu.md (UNSPEC_CSFLT, UNSPEC_CFLTS, UNSPEC_CUFLT, UNSPEC_CFLTU):\n\tRemove.\n\t(i2f, I2F): New define_mode_attr.\n\t(floatsisf2, floatv4siv4sf2, fix_truncsfsi2, fix_truncv4sfv4si2,\n\tfloatunssisf2, floatunsv4siv4sf2, fixuns_truncsfsi2,\n\tfixuns_truncv4sfv4si2):  Update to use mode attribute.\n\t(float<mode><i2f>2_mul, float<mode><i2f>2_div,\n\tfix_trunc<mode><f2i>2_mul, floatuns<mode><i2f>2_mul,\n\tfloatuns<mode><i2f>2_div, fixuns_trunc<mode><f2i>2_mul): New\n\tpatterns for combine.\n\t* gcc.target/spu/intrinsics-3.c: Update tests.\n\nFrom-SVN: r146849", "tree": {"sha": "c233f04205e601fe5a60f616157b369cca22b5a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c233f04205e601fe5a60f616157b369cca22b5a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5345cf689ed92391b912bfc6baa49b18c91e671f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5345cf689ed92391b912bfc6baa49b18c91e671f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5345cf689ed92391b912bfc6baa49b18c91e671f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5345cf689ed92391b912bfc6baa49b18c91e671f/comments", "author": null, "committer": null, "parents": [{"sha": "5f39ad476ca64351cd077070105f97236c19ae78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f39ad476ca64351cd077070105f97236c19ae78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f39ad476ca64351cd077070105f97236c19ae78"}], "stats": {"total": 417, "additions": 345, "deletions": 72}, "files": [{"sha": "013c0fcea4e2a1bf331868fc42a03bced46ec0ac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5345cf689ed92391b912bfc6baa49b18c91e671f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5345cf689ed92391b912bfc6baa49b18c91e671f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5345cf689ed92391b912bfc6baa49b18c91e671f", "patch": "@@ -1,3 +1,26 @@\n+2009-04-27  Trevor Smigiel <trevor_smigiel@playstation.sony.com>\n+\n+\tAllow non-constant arguments to conversion intrinsics.\n+\t* spu-protos.h (exp2_immediate_p, spu_gen_exp2): Declare.\n+\t* predicates.md (spu_inv_exp2_operand, spu_exp2_operand): New.\n+\t* spu.c (print_operand): Handle 'v' and 'w'.\n+\t(exp2_immediate_p, spu_gen_exp2): Define.\n+\t* spu-builtins.def (spu_convts, spu_convtu, spu_convtf_0,\n+\tspu_convtf_1): Update parameter descriptions.\n+\t* spu-builtins.md (spu_csflt, spu_cuflt, spu_cflts, spu_cfltu):\n+\tUpdate.\n+\t* constraints.md ('v', 'w'): New.\n+\t* spu.md (UNSPEC_CSFLT, UNSPEC_CFLTS, UNSPEC_CUFLT, UNSPEC_CFLTU):\n+\tRemove.\n+\t(i2f, I2F): New define_mode_attr.\n+\t(floatsisf2, floatv4siv4sf2, fix_truncsfsi2, fix_truncv4sfv4si2,\n+\tfloatunssisf2, floatunsv4siv4sf2, fixuns_truncsfsi2,\n+\tfixuns_truncv4sfv4si2):  Update to use mode attribute.\n+\t(float<mode><i2f>2_mul, float<mode><i2f>2_div,\n+\tfix_trunc<mode><f2i>2_mul, floatuns<mode><i2f>2_mul,\n+\tfloatuns<mode><i2f>2_div, fixuns_trunc<mode><f2i>2_mul): New\n+\tpatterns for combine.\n+\n 2009-04-27  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* dbgcnt.def (cprop1, cprop2, gcse, jump_bypass): Remove"}, {"sha": "b1f5947064cc5e3f3d6fcc588160f2caef69b77d", "filename": "gcc/config/spu/constraints.md", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5345cf689ed92391b912bfc6baa49b18c91e671f/gcc%2Fconfig%2Fspu%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5345cf689ed92391b912bfc6baa49b18c91e671f/gcc%2Fconfig%2Fspu%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fconstraints.md?ref=5345cf689ed92391b912bfc6baa49b18c91e671f", "patch": "@@ -16,8 +16,14 @@\n ;; <http://www.gnu.org/licenses/>.\n \n \f\n-;; GCC standard constraints:  g, i, m, n, o, p, r, s, E-H, I-P, V, X\n-;; unused for SPU:  E-H, L, Q, d, e, h, q, t-z\n+;;       ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\n+;; GCC:      ffffiiiiiiii     x x        x x   xxxx xx\n+;; SPU:  xxxx    xxx xxxx xxxx x xxx xx x   xxx         xx\n+;; FREE:     ffff   i    a          a  a  a        a  aa  aaa\n+;; x - used\n+;; a - available\n+;; i - available for integer immediates\n+;; f - available for floating point immediates\n \n ;; For most immediate constraints we have 3 variations to deal with the\n ;; fact const_int has no mode.  One variation treats const_int as 32 bit,\n@@ -159,4 +165,15 @@\n \t\t    && INTVAL (XEXP (op, 0)) >= 0\n \t\t    && INTVAL (XEXP (op, 0)) <= 0x3ffff\")))\n \n+\f\n+;; Floating-point constant constraints.\n+\n+(define_constraint \"v\"\n+  \"Floating point power of 2 with exponent in [0..127]\"\n+  (and (match_code \"const_double,const_vector\")\n+       (match_test \"exp2_immediate_p (op, VOIDmode, 0, 127)\")))\n \n+(define_constraint \"w\"\n+  \"Floating point power of 2 with exponent in [-126..0]\"\n+  (and (match_code \"const_double,const_vector\")\n+       (match_test \"exp2_immediate_p (op, VOIDmode, -126, 0)\")))"}, {"sha": "ce91ba230bb1d0c20319a877d39bff844bc5f355", "filename": "gcc/config/spu/predicates.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5345cf689ed92391b912bfc6baa49b18c91e671f/gcc%2Fconfig%2Fspu%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5345cf689ed92391b912bfc6baa49b18c91e671f/gcc%2Fconfig%2Fspu%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fpredicates.md?ref=5345cf689ed92391b912bfc6baa49b18c91e671f", "patch": "@@ -104,3 +104,13 @@\n        (ior (match_test \"GET_MODE (XEXP (op, 0)) == HImode\")\n \t    (match_test \"GET_MODE (XEXP (op, 0)) == SImode\"))))\n \n+(define_predicate \"spu_inv_exp2_operand\"\n+  (and (match_code \"const_double,const_vector\")\n+       (and (match_operand 0 \"immediate_operand\")\n+\t    (match_test \"exp2_immediate_p (op, mode, -126, 0)\"))))\n+\n+(define_predicate \"spu_exp2_operand\"\n+  (and (match_code \"const_double,const_vector\")\n+       (and (match_operand 0 \"immediate_operand\")\n+\t    (match_test \"exp2_immediate_p (op, mode, 0, 127)\"))))\n+"}, {"sha": "9e92781d31128059e3d6296f9a02a2ef765dec92", "filename": "gcc/config/spu/spu-builtins.def", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5345cf689ed92391b912bfc6baa49b18c91e671f/gcc%2Fconfig%2Fspu%2Fspu-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5345cf689ed92391b912bfc6baa49b18c91e671f/gcc%2Fconfig%2Fspu%2Fspu-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu-builtins.def?ref=5345cf689ed92391b912bfc6baa49b18c91e671f", "patch": "@@ -235,8 +235,8 @@ DEF_BUILTIN (SI_FROM_PTR,    CODE_FOR_spu_convert,   \"si_from_ptr\",    B_INSN,\n \n /* definitions to support generic builtin functions: */\n \n-DEF_BUILTIN (SPU_CONVTS,     CODE_FOR_spu_cflts,      \"spu_convts\",     B_INSN,     _A3(SPU_BTI_V4SI,     SPU_BTI_V4SF,   SPU_BTI_U7))\n-DEF_BUILTIN (SPU_CONVTU,     CODE_FOR_spu_cfltu,      \"spu_convtu\",     B_INSN,     _A3(SPU_BTI_UV4SI,    SPU_BTI_V4SF,   SPU_BTI_U7))\n+DEF_BUILTIN (SPU_CONVTS,     CODE_FOR_spu_cflts,      \"spu_convts\",     B_INSN,     _A3(SPU_BTI_V4SI,     SPU_BTI_V4SF,   SPU_BTI_INTSI))\n+DEF_BUILTIN (SPU_CONVTU,     CODE_FOR_spu_cfltu,      \"spu_convtu\",     B_INSN,     _A3(SPU_BTI_UV4SI,    SPU_BTI_V4SF,   SPU_BTI_INTSI))\n DEF_BUILTIN (SPU_ROUNDTF,    CODE_FOR_spu_frds,       \"spu_roundtf\",    B_INSN,     _A2(SPU_BTI_V4SF,     SPU_BTI_V2DF))\n DEF_BUILTIN (SPU_MULH,       CODE_FOR_spu_mpyh,       \"spu_mulh\",       B_INSN,     _A3(SPU_BTI_V4SI,     SPU_BTI_V8HI,   SPU_BTI_V8HI))\n DEF_BUILTIN (SPU_MULSR,      CODE_FOR_spu_mpys,       \"spu_mulsr\",      B_INSN,     _A3(SPU_BTI_V4SI,     SPU_BTI_V8HI,   SPU_BTI_V8HI))\n@@ -257,8 +257,8 @@ DEF_BUILTIN (SPU_TESTSV,     CODE_FOR_dftsv,          \"spu_testsv\",     B_INSN,\n /* definitions to support overloaded generic builtin functions:  */\n \n DEF_BUILTIN (SPU_CONVTF,           CODE_FOR_nothing,       \"spu_convtf\",           B_OVERLOAD, _A1(SPU_BTI_VOID))\n-DEF_BUILTIN (SPU_CONVTF_0,         CODE_FOR_spu_cuflt,     \"spu_convtf_0\",         B_INTERNAL, _A3(SPU_BTI_V4SF,   SPU_BTI_UV4SI,  SPU_BTI_U7))\n-DEF_BUILTIN (SPU_CONVTF_1,         CODE_FOR_spu_csflt,     \"spu_convtf_1\",         B_INTERNAL, _A3(SPU_BTI_V4SF,   SPU_BTI_V4SI,   SPU_BTI_U7))\n+DEF_BUILTIN (SPU_CONVTF_0,         CODE_FOR_spu_cuflt,     \"spu_convtf_0\",         B_INTERNAL, _A3(SPU_BTI_V4SF,   SPU_BTI_UV4SI,  SPU_BTI_UINTSI))\n+DEF_BUILTIN (SPU_CONVTF_1,         CODE_FOR_spu_csflt,     \"spu_convtf_1\",         B_INTERNAL, _A3(SPU_BTI_V4SF,   SPU_BTI_V4SI,   SPU_BTI_UINTSI))\n DEF_BUILTIN (SPU_EXTEND,           CODE_FOR_nothing,       \"spu_extend\",           B_OVERLOAD, _A1(SPU_BTI_VOID))\n DEF_BUILTIN (SPU_EXTEND_0,         CODE_FOR_spu_xsbh,      \"spu_extend_0\",         B_INTERNAL, _A2(SPU_BTI_V8HI,   SPU_BTI_V16QI))\n DEF_BUILTIN (SPU_EXTEND_1,         CODE_FOR_spu_xshw,      \"spu_extend_1\",         B_INTERNAL, _A2(SPU_BTI_V4SI,   SPU_BTI_V8HI))"}, {"sha": "ac3a333610674e35f7055b59896cfee5c8173f2d", "filename": "gcc/config/spu/spu-builtins.md", "status": "modified", "additions": 112, "deletions": 30, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5345cf689ed92391b912bfc6baa49b18c91e671f/gcc%2Fconfig%2Fspu%2Fspu-builtins.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5345cf689ed92391b912bfc6baa49b18c91e671f/gcc%2Fconfig%2Fspu%2Fspu-builtins.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu-builtins.md?ref=5345cf689ed92391b912bfc6baa49b18c91e671f", "patch": "@@ -527,37 +527,119 @@\n   [(set_attr \"type\" \"br\")])\n \n ;; float convert\n-(define_insn \"spu_csflt\"\n+(define_expand \"spu_csflt\"\n+  [(set (match_operand:V4SF 0 \"spu_reg_operand\")\n+\t(unspec:V4SF [(match_operand:V4SI 1 \"spu_reg_operand\")\n+\t\t      (match_operand:SI 2 \"spu_nonmem_operand\")] 0 ))]\n+  \"\"\n+{\n+  if (GET_CODE (operands[2]) == CONST_INT\n+      && (INTVAL (operands[2]) < 0 || INTVAL (operands[2]) > 127))\n+    {\n+      error (\"spu_convtf expects an integer literal in the range [0, 127].\");\n+      operands[2] = force_reg (SImode, operands[2]);\n+    }\n+  if (GET_CODE (operands[2]) != CONST_INT)\n+    {\n+      rtx exp2;\n+      rtx cnv = gen_reg_rtx (V4SFmode);\n+      rtx scale = gen_reg_rtx (SImode);\n+      rtx op2 = force_reg (SImode, operands[2]);\n+      rtx m1 = spu_gen_exp2 (V4SFmode, GEN_INT (-1));\n+      emit_insn (gen_subsi3 (scale, const1_rtx, op2));\n+      exp2 = spu_gen_exp2 (V4SFmode, scale);\n+      emit_insn (gen_floatv4siv4sf2_mul (cnv, operands[1], m1));\n+      emit_insn (gen_mulv4sf3 (operands[0], cnv, exp2));\n+    }\n+  else\n+    {\n+      rtx exp2 = spu_gen_exp2 (V4SFmode, operands[2]);\n+      emit_insn (gen_floatv4siv4sf2_div (operands[0], operands[1], exp2));\n+    }\n+  DONE;\n+})\n+\n+(define_expand \"spu_cflts\"\n+  [(set (match_operand:V4SI 0 \"spu_reg_operand\")\n+\t(unspec:V4SI [(match_operand:V4SF 1 \"spu_reg_operand\")\n+                      (match_operand:SI 2 \"spu_nonmem_operand\")] 0 ))]\n+  \"\"\n+{\n+  rtx exp2;\n+  if (GET_CODE (operands[2]) == CONST_INT\n+      && (INTVAL (operands[2]) < 0 || INTVAL (operands[2]) > 127))\n+    {\n+      error (\"spu_convts expects an integer literal in the range [0, 127].\");\n+      operands[2] = force_reg (SImode, operands[2]);\n+    }\n+  exp2 = spu_gen_exp2 (V4SFmode, operands[2]);\n+  if (GET_CODE (operands[2]) != CONST_INT)\n+    {\n+      rtx mul = gen_reg_rtx (V4SFmode);\n+      emit_insn (gen_mulv4sf3 (mul, operands[1], exp2));\n+      emit_insn (gen_fix_truncv4sfv4si2 (operands[0], mul));\n+    }\n+  else \n+    emit_insn (gen_fix_truncv4sfv4si2_mul (operands[0], operands[1], exp2));\n+  DONE;\n+})\n+\n+(define_expand \"spu_cuflt\"\n   [(set (match_operand:V4SF 0 \"spu_reg_operand\" \"=r\")\n-\t(unspec:V4SF [(match_operand:V4SI 1 \"spu_reg_operand\" \"r\")\n-\t\t      (match_operand:SI 2 \"immediate_operand\" \"K\")] UNSPEC_CSFLT ))]\n-  \"\"\n-  \"csflt\\t%0,%1,%2\"\n-  [(set_attr \"type\" \"fp7\")])\n-\n-(define_insn \"spu_cflts\"\n-  [(set (match_operand:V4SI 0 \"spu_reg_operand\" \"=r\")\n-\t(unspec:V4SI [(match_operand:V4SF 1 \"spu_reg_operand\" \"r\")\n-                      (match_operand:SI 2 \"immediate_operand\" \"J\")] UNSPEC_CFLTS ))]\n-  \"\"\n-  \"cflts\\t%0,%1,%2\"\n-  [(set_attr \"type\" \"fp7\")])\n-\n-(define_insn \"spu_cuflt\"\n-  [(set (match_operand:V4SF 0 \"spu_reg_operand\" \"=r\")\n-\t(unspec:V4SF [(match_operand:V4SI 1 \"spu_reg_operand\" \"r\")\n-\t\t      (match_operand:SI 2 \"immediate_operand\" \"K\")] UNSPEC_CUFLT ))]\n-  \"\"\n-  \"cuflt\\t%0,%1,%2\"\n-  [(set_attr \"type\" \"fp7\")])\n-\n-(define_insn \"spu_cfltu\"\n-  [(set (match_operand:V4SI 0 \"spu_reg_operand\" \"=r\")\n-\t(unspec:V4SI [(match_operand:V4SF 1 \"spu_reg_operand\" \"r\")\n-\t\t      (match_operand:SI 2 \"immediate_operand\" \"J\")] UNSPEC_CFLTU ))]\n-  \"\"\n-  \"cfltu\\t%0,%1,%2\"\n-  [(set_attr \"type\" \"fp7\")])\n+\t(unspec:V4SF [(match_operand:V4SI 1 \"spu_reg_operand\")\n+\t\t      (match_operand:SI 2 \"spu_nonmem_operand\")] 0 ))]\n+  \"\"\n+{\n+  if (GET_CODE (operands[2]) == CONST_INT\n+      && (INTVAL (operands[2]) < 0 || INTVAL (operands[2]) > 127))\n+    {\n+      error (\"spu_convtf expects an integer literal in the range [0, 127].\");\n+      operands[2] = force_reg (SImode, operands[2]);\n+    }\n+  if (GET_CODE (operands[2]) != CONST_INT)\n+    {\n+      rtx exp2;\n+      rtx cnv = gen_reg_rtx (V4SFmode);\n+      rtx scale = gen_reg_rtx (SImode);\n+      rtx op2 = force_reg (SImode, operands[2]);\n+      rtx m1 = spu_gen_exp2 (V4SFmode, GEN_INT (-1));\n+      emit_insn (gen_subsi3 (scale, const1_rtx, op2));\n+      exp2 = spu_gen_exp2 (V4SFmode, scale);\n+      emit_insn (gen_floatunsv4siv4sf2_mul (cnv, operands[1], m1));\n+      emit_insn (gen_mulv4sf3 (operands[0], cnv, exp2));\n+    }\n+  else\n+    {\n+      rtx exp2 = spu_gen_exp2 (V4SFmode, operands[2]);\n+      emit_insn (gen_floatunsv4siv4sf2_div (operands[0], operands[1], exp2));\n+    }\n+  DONE;\n+})\n+\n+(define_expand \"spu_cfltu\"\n+  [(set (match_operand:V4SI 0 \"spu_reg_operand\")\n+\t(unspec:V4SI [(match_operand:V4SF 1 \"spu_reg_operand\")\n+\t\t      (match_operand:SI 2 \"spu_nonmem_operand\")] 0 ))]\n+  \"\"\n+{\n+  rtx exp2;\n+  if (GET_CODE (operands[2]) == CONST_INT\n+      && (INTVAL (operands[2]) < 0 || INTVAL (operands[2]) > 127))\n+    {\n+      error (\"spu_convtu expects an integer literal in the range [0, 127].\");\n+      operands[2] = force_reg (SImode, operands[2]);\n+    }\n+  exp2 = spu_gen_exp2 (V4SFmode, operands[2]);\n+  if (GET_CODE (operands[2]) != CONST_INT)\n+    {\n+      rtx mul = gen_reg_rtx (V4SFmode);\n+      emit_insn (gen_mulv4sf3 (mul, operands[1], exp2));\n+      emit_insn (gen_fixuns_truncv4sfv4si2 (operands[0], mul));\n+    }\n+  else \n+    emit_insn (gen_fixuns_truncv4sfv4si2_mul (operands[0], operands[1], exp2));\n+  DONE;\n+})\n \n (define_expand \"spu_frds\"\n    [(set (match_operand:V4SF 0 \"spu_reg_operand\" \"\")"}, {"sha": "d8376d86d0f3268437e55594cf25e9d0cba1cb37", "filename": "gcc/config/spu/spu-protos.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5345cf689ed92391b912bfc6baa49b18c91e671f/gcc%2Fconfig%2Fspu%2Fspu-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5345cf689ed92391b912bfc6baa49b18c91e671f/gcc%2Fconfig%2Fspu%2Fspu-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu-protos.h?ref=5345cf689ed92391b912bfc6baa49b18c91e671f", "patch": "@@ -51,6 +51,8 @@ extern int logical_immediate_p (rtx op, enum machine_mode mode);\n extern int iohl_immediate_p (rtx op, enum machine_mode mode);\n extern int arith_immediate_p (rtx op, enum machine_mode mode,\n \t\t\t      HOST_WIDE_INT low, HOST_WIDE_INT high);\n+extern bool exp2_immediate_p (rtx op, enum machine_mode mode, int low,\n+\t\t\t      int high);\n extern int spu_constant_address_p (rtx x);\n extern int spu_legitimate_constant_p (rtx x);\n extern int spu_legitimate_address (enum machine_mode mode, rtx x,\n@@ -75,6 +77,7 @@ extern rtx gen_cpat_const (rtx * ops);\n extern void constant_to_array (enum machine_mode mode, rtx x,\n \t\t\t       unsigned char *arr);\n extern rtx array_to_constant (enum machine_mode mode, unsigned char *arr);\n+extern rtx spu_gen_exp2 (enum machine_mode mode, rtx x);\n extern void spu_allocate_stack (rtx op0, rtx op1);\n extern void spu_restore_stack_nonlocal (rtx op0, rtx op1);\n extern void spu_restore_stack_block (rtx op0, rtx op1);"}, {"sha": "56abdf8deb383ac1606476d8090eb168c2b832ad", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 92, "deletions": 1, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5345cf689ed92391b912bfc6baa49b18c91e671f/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5345cf689ed92391b912bfc6baa49b18c91e671f/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=5345cf689ed92391b912bfc6baa49b18c91e671f", "patch": "@@ -1586,6 +1586,13 @@ print_operand (FILE * file, rtx x, int code)\n       output_addr_const (file, GEN_INT (val));\n       return;\n \n+    case 'v':\n+    case 'w':\n+      constant_to_array (mode, x, arr);\n+      val = (((arr[0] << 1) + (arr[1] >> 7)) & 0xff) - 127;\n+      output_addr_const (file, GEN_INT (code == 'w' ? -val : val));\n+      return;\n+\n     case 0:\n       if (xcode == REG)\n \tfprintf (file, \"%s\", reg_names[REGNO (x)]);\n@@ -1598,7 +1605,7 @@ print_operand (FILE * file, rtx x, int code)\n       return;\n \n       /* unused letters\n-\t              o qr  uvw yz\n+\t              o qr  u   yz\n \tAB            OPQR  UVWXYZ */\n     default:\n       output_operand_lossage (\"invalid %%xn code\");\n@@ -3495,6 +3502,58 @@ arith_immediate_p (rtx op, enum machine_mode mode,\n   return val >= low && val <= high;\n }\n \n+/* TRUE when op is an immediate and an exact power of 2, and given that\n+   OP is 2^scale, scale >= LOW && scale <= HIGH.  When OP is a vector,\n+   all entries must be the same. */\n+bool\n+exp2_immediate_p (rtx op, enum machine_mode mode, int low, int high)\n+{\n+  enum machine_mode int_mode;\n+  HOST_WIDE_INT val;\n+  unsigned char arr[16];\n+  int bytes, i, j;\n+\n+  gcc_assert (GET_CODE (op) == CONST_INT || GET_CODE (op) == CONST_DOUBLE\n+\t      || GET_CODE (op) == CONST_VECTOR);\n+\n+  if (GET_CODE (op) == CONST_VECTOR\n+      && !const_vector_immediate_p (op))\n+    return 0;\n+\n+  if (GET_MODE (op) != VOIDmode)\n+    mode = GET_MODE (op);\n+\n+  constant_to_array (mode, op, arr);\n+\n+  if (VECTOR_MODE_P (mode))\n+    mode = GET_MODE_INNER (mode);\n+\n+  bytes = GET_MODE_SIZE (mode);\n+  int_mode = mode_for_size (GET_MODE_BITSIZE (mode), MODE_INT, 0);\n+\n+  /* Check that bytes are repeated. */\n+  for (i = bytes; i < 16; i += bytes)\n+    for (j = 0; j < bytes; j++)\n+      if (arr[j] != arr[i + j])\n+\treturn 0;\n+\n+  val = arr[0];\n+  for (j = 1; j < bytes; j++)\n+    val = (val << 8) | arr[j];\n+\n+  val = trunc_int_for_mode (val, int_mode);\n+\n+  /* Currently, we only handle SFmode */\n+  gcc_assert (mode == SFmode);\n+  if (mode == SFmode)\n+    {\n+      int exp = (val >> 23) - 127;\n+      return val > 0 && (val & 0x007fffff) == 0\n+\t     &&  exp >= low && exp <= high;\n+    }\n+  return FALSE;\n+}\n+\n /* We accept:\n    - any 32-bit constant (SImode, SFmode)\n    - any constant that can be generated with fsmbi (any mode)\n@@ -6364,4 +6423,36 @@ spu_section_type_flags (tree decl, const char *name, int reloc)\n   return default_section_type_flags (decl, name, reloc);\n }\n \n+/* Generate a constant or register which contains 2^SCALE.  We assume\n+   the result is valid for MODE.  Currently, MODE must be V4SFmode and\n+   SCALE must be SImode. */\n+rtx\n+spu_gen_exp2 (enum machine_mode mode, rtx scale)\n+{\n+  gcc_assert (mode == V4SFmode);\n+  gcc_assert (GET_MODE (scale) == SImode || GET_CODE (scale) == CONST_INT);\n+  if (GET_CODE (scale) != CONST_INT)\n+    {\n+      /* unsigned int exp = (127 + scale) << 23;\n+\t__vector float m = (__vector float) spu_splats (exp); */\n+      rtx reg = force_reg (SImode, scale);\n+      rtx exp = gen_reg_rtx (SImode);\n+      rtx mul = gen_reg_rtx (mode);\n+      emit_insn (gen_addsi3 (exp, reg, GEN_INT (127)));\n+      emit_insn (gen_ashlsi3 (exp, exp, GEN_INT (23)));\n+      emit_insn (gen_spu_splats (mul, gen_rtx_SUBREG (GET_MODE_INNER (mode), exp, 0)));\n+      return mul;\n+    }\n+  else \n+    {\n+      HOST_WIDE_INT exp = 127 + INTVAL (scale);\n+      unsigned char arr[16];\n+      arr[0] = arr[4] = arr[8] = arr[12] = exp >> 1;\n+      arr[1] = arr[5] = arr[9] = arr[13] = exp << 7;\n+      arr[2] = arr[6] = arr[10] = arr[14] = 0;\n+      arr[3] = arr[7] = arr[11] = arr[15] = 0;\n+      return array_to_constant (mode, arr);\n+    }\n+}\n+\n #include \"gt-spu.h\""}, {"sha": "bd6936fd9e3044a2ebab679b98ca2a81cc8d29bb", "filename": "gcc/config/spu/spu.md", "status": "modified", "additions": 56, "deletions": 35, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5345cf689ed92391b912bfc6baa49b18c91e671f/gcc%2Fconfig%2Fspu%2Fspu.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5345cf689ed92391b912bfc6baa49b18c91e671f/gcc%2Fconfig%2Fspu%2Fspu.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.md?ref=5345cf689ed92391b912bfc6baa49b18c91e671f", "patch": "@@ -136,10 +136,6 @@\n  (UNSPEC_HEQ            31)\n  (UNSPEC_HGT            32)\n  (UNSPEC_HLGT           33)\n- (UNSPEC_CSFLT          34)\n- (UNSPEC_CFLTS          35)\n- (UNSPEC_CUFLT          36)\n- (UNSPEC_CFLTU          37)\n  (UNSPEC_STOP           38)\n  (UNSPEC_STOPD          39)\n  (UNSPEC_SET_INTR       40)\n@@ -231,6 +227,10 @@\n                        (DF \"di\") (V2DF \"v2di\")])\n (define_mode_attr F2I [(SF \"SI\") (V4SF \"V4SI\")\n                        (DF \"DI\") (V2DF \"V2DI\")])\n+(define_mode_attr i2f [(SI \"sf\") (V4SI \"v4sf\")\n+                       (DI \"df\") (V2DI \"v2df\")])\n+(define_mode_attr I2F [(SI \"SF\") (V4SI \"V4SF\")\n+                       (DI \"DF\") (V2DI \"V2DF\")])\n \n (define_mode_attr DF2I [(DF \"SI\") (V2DF \"V2DI\")])\n \n@@ -594,60 +594,81 @@\n \f\n ;; float conversions\n \n-(define_insn \"floatsisf2\"\n-  [(set (match_operand:SF 0 \"spu_reg_operand\" \"=r\")\n-\t(float:SF (match_operand:SI 1 \"spu_reg_operand\" \"r\")))]\n+(define_insn \"float<mode><i2f>2\"\n+  [(set (match_operand:<I2F> 0 \"spu_reg_operand\" \"=r\")\n+\t(float:<I2F> (match_operand:VSI 1 \"spu_reg_operand\" \"r\")))]\n   \"\"\n   \"csflt\\t%0,%1,0\"\n   [(set_attr \"type\" \"fp7\")])\n \n-(define_insn \"floatv4siv4sf2\"\n-  [(set (match_operand:V4SF 0 \"spu_reg_operand\" \"=r\")\n-\t(float:V4SF (match_operand:V4SI 1 \"spu_reg_operand\" \"r\")))]\n+(define_insn \"fix_trunc<mode><f2i>2\"\n+  [(set (match_operand:<F2I> 0 \"spu_reg_operand\" \"=r\")\n+\t(fix:<F2I> (match_operand:VSF 1 \"spu_reg_operand\" \"r\")))]\n   \"\"\n-  \"csflt\\t%0,%1,0\"\n+  \"cflts\\t%0,%1,0\"\n   [(set_attr \"type\" \"fp7\")])\n \n-(define_insn \"fix_truncsfsi2\"\n-  [(set (match_operand:SI 0 \"spu_reg_operand\" \"=r\")\n-\t(fix:SI (match_operand:SF 1 \"spu_reg_operand\" \"r\")))]\n+(define_insn \"floatuns<mode><i2f>2\"\n+  [(set (match_operand:<I2F> 0 \"spu_reg_operand\" \"=r\")\n+\t(unsigned_float:<I2F> (match_operand:VSI 1 \"spu_reg_operand\" \"r\")))]\n   \"\"\n-  \"cflts\\t%0,%1,0\"\n+  \"cuflt\\t%0,%1,0\"\n   [(set_attr \"type\" \"fp7\")])\n \n-(define_insn \"fix_truncv4sfv4si2\"\n-  [(set (match_operand:V4SI 0 \"spu_reg_operand\" \"=r\")\n-\t(fix:V4SI (match_operand:V4SF 1 \"spu_reg_operand\" \"r\")))]\n+(define_insn \"fixuns_trunc<mode><f2i>2\"\n+  [(set (match_operand:<F2I> 0 \"spu_reg_operand\" \"=r\")\n+\t(unsigned_fix:<F2I> (match_operand:VSF 1 \"spu_reg_operand\" \"r\")))]\n   \"\"\n-  \"cflts\\t%0,%1,0\"\n+  \"cfltu\\t%0,%1,0\"\n   [(set_attr \"type\" \"fp7\")])\n \n-(define_insn \"floatunssisf2\"\n-  [(set (match_operand:SF 0 \"spu_reg_operand\" \"=r\")\n-\t(unsigned_float:SF (match_operand:SI 1 \"spu_reg_operand\" \"r\")))]\n+(define_insn \"float<mode><i2f>2_mul\"\n+  [(set (match_operand:<I2F> 0 \"spu_reg_operand\" \"=r\")\n+\t(mult:<I2F> (float:<I2F> (match_operand:VSI 1 \"spu_reg_operand\" \"r\"))\n+\t\t    (match_operand:<I2F> 2 \"spu_inv_exp2_operand\" \"w\")))]\n   \"\"\n-  \"cuflt\\t%0,%1,0\"\n+  \"csflt\\t%0,%1,%w2\"\n   [(set_attr \"type\" \"fp7\")])\n \n-(define_insn \"floatunsv4siv4sf2\"\n-  [(set (match_operand:V4SF 0 \"spu_reg_operand\" \"=r\")\n-\t(unsigned_float:V4SF (match_operand:V4SI 1 \"spu_reg_operand\" \"r\")))]\n+(define_insn \"float<mode><i2f>2_div\"\n+  [(set (match_operand:<I2F> 0 \"spu_reg_operand\" \"=r\")\n+\t(div:<I2F> (float:<I2F> (match_operand:VSI 1 \"spu_reg_operand\" \"r\"))\n+\t\t   (match_operand:<I2F> 2 \"spu_exp2_operand\" \"v\")))]\n   \"\"\n-  \"cuflt\\t%0,%1,0\"\n+  \"csflt\\t%0,%1,%v2\"\n   [(set_attr \"type\" \"fp7\")])\n \n-(define_insn \"fixuns_truncsfsi2\"\n-  [(set (match_operand:SI 0 \"spu_reg_operand\" \"=r\")\n-\t(unsigned_fix:SI (match_operand:SF 1 \"spu_reg_operand\" \"r\")))]\n+\n+(define_insn \"fix_trunc<mode><f2i>2_mul\"\n+  [(set (match_operand:<F2I> 0 \"spu_reg_operand\" \"=r\")\n+\t(fix:<F2I> (mult:VSF (match_operand:VSF 1 \"spu_reg_operand\" \"r\")\n+\t\t\t     (match_operand:VSF 2 \"spu_exp2_operand\" \"v\"))))]\n   \"\"\n-  \"cfltu\\t%0,%1,0\"\n+  \"cflts\\t%0,%1,%v2\"\n   [(set_attr \"type\" \"fp7\")])\n \n-(define_insn \"fixuns_truncv4sfv4si2\"\n-  [(set (match_operand:V4SI 0 \"spu_reg_operand\" \"=r\")\n-\t(unsigned_fix:V4SI (match_operand:V4SF 1 \"spu_reg_operand\" \"r\")))]\n+(define_insn \"floatuns<mode><i2f>2_mul\"\n+  [(set (match_operand:<I2F> 0 \"spu_reg_operand\" \"=r\")\n+\t(mult:<I2F> (unsigned_float:<I2F> (match_operand:VSI 1 \"spu_reg_operand\" \"r\"))\n+\t\t    (match_operand:<I2F> 2 \"spu_inv_exp2_operand\" \"w\")))]\n   \"\"\n-  \"cfltu\\t%0,%1,0\"\n+  \"cuflt\\t%0,%1,%w2\"\n+  [(set_attr \"type\" \"fp7\")])\n+\n+(define_insn \"floatuns<mode><i2f>2_div\"\n+  [(set (match_operand:<I2F> 0 \"spu_reg_operand\" \"=r\")\n+\t(div:<I2F> (unsigned_float:<I2F> (match_operand:VSI 1 \"spu_reg_operand\" \"r\"))\n+\t\t   (match_operand:<I2F> 2 \"spu_exp2_operand\" \"v\")))]\n+  \"\"\n+  \"cuflt\\t%0,%1,%v2\"\n+  [(set_attr \"type\" \"fp7\")])\n+\n+(define_insn \"fixuns_trunc<mode><f2i>2_mul\"\n+  [(set (match_operand:<F2I> 0 \"spu_reg_operand\" \"=r\")\n+\t(unsigned_fix:<F2I> (mult:VSF (match_operand:VSF 1 \"spu_reg_operand\" \"r\")\n+\t\t\t\t      (match_operand:VSF 2 \"spu_exp2_operand\" \"v\"))))]\n+  \"\"\n+  \"cfltu\\t%0,%1,%v2\"\n   [(set_attr \"type\" \"fp7\")])\n \n (define_insn \"extendsfdf2\""}, {"sha": "4e660e983449a1d0e833914200634c6df8f64a13", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5345cf689ed92391b912bfc6baa49b18c91e671f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5345cf689ed92391b912bfc6baa49b18c91e671f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5345cf689ed92391b912bfc6baa49b18c91e671f", "patch": "@@ -1,3 +1,8 @@\n+2009-04-27  Trevor Smigiel <trevor_smigiel@playstation.sony.com>\n+\n+\tAllow non-constant arguments to conversion intrinsics.\n+\t* gcc.target/spu/intrinsics-3.c: Update tests.\n+\n 2009-04-27  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/39928"}, {"sha": "3d3946641028ff885a083cfa18eb2eac209afa70", "filename": "gcc/testsuite/gcc.target/spu/intrinsics-3.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5345cf689ed92391b912bfc6baa49b18c91e671f/gcc%2Ftestsuite%2Fgcc.target%2Fspu%2Fintrinsics-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5345cf689ed92391b912bfc6baa49b18c91e671f/gcc%2Ftestsuite%2Fgcc.target%2Fspu%2Fintrinsics-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fspu%2Fintrinsics-3.c?ref=5345cf689ed92391b912bfc6baa49b18c91e671f", "patch": "@@ -19,3 +19,24 @@ void f3 (vec_float4 *in)\n {\n   vec_uint4 out = spu_convtu (in[0], 128); /* { dg-error \"expects an integer literal in the range\" \"0, 127\"  }*/\n }\n+\n+/* Test that these intrinsics accept non-literal arguments */\n+void f4 (vec_uint4 *in, int n)\n+{\n+  vec_float4 out = spu_convtf (in[0], n); \n+}\n+\n+void f5 (vec_int4 *in, int n)\n+{\n+  vec_float4 out = spu_convtf (in[0], n);\n+}\n+\n+void f6 (vec_float4 *in, int n)\n+{\n+  vec_int4 out = spu_convts (in[0], n);\n+}\n+\n+void f7 (vec_float4 *in, int n)\n+{\n+  vec_uint4 out = spu_convtu (in[0], n);\n+}"}]}