{"sha": "fb84c7a05b9369c84dea53fb5f57e7c0f75c4c9c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmI4NGM3YTA1YjkzNjljODRkZWE1M2ZiNWY1N2U3YzBmNzVjNGM5Yw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@kss-loka.si", "date": "2006-10-28T20:25:27Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2006-10-28T20:25:27Z"}, "message": "i386.h (GENERAL_REGNO_P): Use STACK_POINTER_REGNUM.\n\n        * config/i386/i386.h (GENERAL_REGNO_P): Use STACK_POINTER_REGNUM.\n        (NON_QI_REG_P): Use IN_RANGE.\n        (REX_INT_REGNO_P): Use IN_RANGE.\n        (FP_REGNO_P): Use IN_RANGE.\n        (SSE_REGNO_P): Use IN_RANGE.\n        (REX_SSE_REGNO_P): Use IN_RANGE.\n        (MMX_REGNO_P): Use IN_RANGE.\n        (STACK_REGNO_P): New macro.\n        (STACK_REG_P): Use STACK_REGNO_P.\n        (NON_STACK_REG_P): Use STACK_REGNO_P.\n        (REGNO_OK_FOR_INDEX_P): Use REX_INT_REGNO_P.\n        (REGNO_OK_FOR_BASE_P): Use GENERAL_REGNO_P.\n        (REG_OK_FOR_INDEX_NONSTRICT_P): Use REX_INT_REGNO_P.\n        (REG_OK_FOR_BASE_NONSTRICT_P): Use GENERAL_REGNO_P.\n        (HARD_REGNO_RENAME_OK): Use !IN_RANGE.\n\nFrom-SVN: r118109", "tree": {"sha": "ce7e5c869a162350fa0460f0feb4f8933fe1b333", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce7e5c869a162350fa0460f0feb4f8933fe1b333"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb84c7a05b9369c84dea53fb5f57e7c0f75c4c9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb84c7a05b9369c84dea53fb5f57e7c0f75c4c9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb84c7a05b9369c84dea53fb5f57e7c0f75c4c9c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb84c7a05b9369c84dea53fb5f57e7c0f75c4c9c/comments", "author": null, "committer": null, "parents": [{"sha": "67ce74926a1ca6d3711af868d3b48cf4022de498", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67ce74926a1ca6d3711af868d3b48cf4022de498", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67ce74926a1ca6d3711af868d3b48cf4022de498"}], "stats": {"total": 77, "additions": 42, "deletions": 35}, "files": [{"sha": "cfa63d96af108939394bb6466cadf72ca4fea9db", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb84c7a05b9369c84dea53fb5f57e7c0f75c4c9c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb84c7a05b9369c84dea53fb5f57e7c0f75c4c9c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fb84c7a05b9369c84dea53fb5f57e7c0f75c4c9c", "patch": "@@ -1,3 +1,21 @@\n+2006-10-28  Uros Bizjak  <uros@kss-loka.si>\n+\n+\t* config/i386/i386.h (GENERAL_REGNO_P): Use STACK_POINTER_REGNUM.\n+\t(NON_QI_REG_P): Use IN_RANGE.\n+\t(REX_INT_REGNO_P): Use IN_RANGE.\n+\t(FP_REGNO_P): Use IN_RANGE.\n+\t(SSE_REGNO_P): Use IN_RANGE.\n+\t(REX_SSE_REGNO_P): Use IN_RANGE.\n+\t(MMX_REGNO_P): Use IN_RANGE.\n+\t(STACK_REGNO_P): New macro.\n+\t(STACK_REG_P): Use STACK_REGNO_P.\n+\t(NON_STACK_REG_P): Use STACK_REGNO_P.\n+\t(REGNO_OK_FOR_INDEX_P): Use REX_INT_REGNO_P.\n+\t(REGNO_OK_FOR_BASE_P): Use GENERAL_REGNO_P.\n+\t(REG_OK_FOR_INDEX_NONSTRICT_P): Use REX_INT_REGNO_P.\n+\t(REG_OK_FOR_BASE_NONSTRICT_P): Use GENERAL_REGNO_P.\n+\t(HARD_REGNO_RENAME_OK): Use !IN_RANGE.\n+\n 2006-10-28  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* except.h (output_function_exception_table): Add 'const char*' param."}, {"sha": "9fc54505ca882fd59f6a55ce9d570efe4f8db8e8", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 24, "deletions": 35, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb84c7a05b9369c84dea53fb5f57e7c0f75c4c9c/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb84c7a05b9369c84dea53fb5f57e7c0f75c4c9c/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=fb84c7a05b9369c84dea53fb5f57e7c0f75c4c9c", "patch": "@@ -1175,51 +1175,49 @@ enum reg_class\n \n #define SMALL_REGISTER_CLASSES 1\n \n-#define QI_REG_P(X) \\\n-  (REG_P (X) && REGNO (X) < 4)\n+#define QI_REG_P(X) (REG_P (X) && REGNO (X) < 4)\n \n #define GENERAL_REGNO_P(N) \\\n-  ((N) < 8 || REX_INT_REGNO_P (N))\n+  ((N) <= STACK_POINTER_REGNUM || REX_INT_REGNO_P (N))\n \n #define GENERAL_REG_P(X) \\\n   (REG_P (X) && GENERAL_REGNO_P (REGNO (X)))\n \n #define ANY_QI_REG_P(X) (TARGET_64BIT ? GENERAL_REG_P(X) : QI_REG_P (X))\n \n #define NON_QI_REG_P(X) \\\n-  (REG_P (X) && REGNO (X) >= 4 && REGNO (X) < FIRST_PSEUDO_REGISTER)\n+  (REG_P (X) && IN_RANGE (REGNO (X), 4, FIRST_PSEUDO_REGISTER - 1))\n \n-#define REX_INT_REGNO_P(N) ((N) >= FIRST_REX_INT_REG && (N) <= LAST_REX_INT_REG)\n+#define REX_INT_REGNO_P(N) \\\n+  IN_RANGE ((N), FIRST_REX_INT_REG, LAST_REX_INT_REG)\n #define REX_INT_REG_P(X) (REG_P (X) && REX_INT_REGNO_P (REGNO (X)))\n \n #define FP_REG_P(X) (REG_P (X) && FP_REGNO_P (REGNO (X)))\n-#define FP_REGNO_P(N) ((N) >= FIRST_STACK_REG && (N) <= LAST_STACK_REG)\n+#define FP_REGNO_P(N) IN_RANGE ((N), FIRST_STACK_REG, LAST_STACK_REG)\n #define ANY_FP_REG_P(X) (REG_P (X) && ANY_FP_REGNO_P (REGNO (X)))\n #define ANY_FP_REGNO_P(N) (FP_REGNO_P (N) || SSE_REGNO_P (N))\n \n-#define SSE_REGNO_P(N) \\\n-  (((N) >= FIRST_SSE_REG && (N) <= LAST_SSE_REG) \\\n-   || ((N) >= FIRST_REX_SSE_REG && (N) <= LAST_REX_SSE_REG))\n+#define SSE_REG_P(N) (REG_P (N) && SSE_REGNO_P (REGNO (N)))\n+#define SSE_REGNO_P(N)\t\t\t\t\t\t\\\n+  (IN_RANGE ((N), FIRST_SSE_REG, LAST_SSE_REG)\t\t\t\\\n+   || REX_SSE_REGNO_P (N))\n \n #define REX_SSE_REGNO_P(N) \\\n-   ((N) >= FIRST_REX_SSE_REG && (N) <= LAST_REX_SSE_REG)\n+  IN_RANGE ((N), FIRST_REX_SSE_REG, LAST_REX_SSE_REG)\n \n #define SSE_REGNO(N) \\\n   ((N) < 8 ? FIRST_SSE_REG + (N) : FIRST_REX_SSE_REG + (N) - 8)\n-#define SSE_REG_P(N) (REG_P (N) && SSE_REGNO_P (REGNO (N)))\n \n #define SSE_FLOAT_MODE_P(MODE) \\\n   ((TARGET_SSE && (MODE) == SFmode) || (TARGET_SSE2 && (MODE) == DFmode))\n \n-#define MMX_REGNO_P(N) ((N) >= FIRST_MMX_REG && (N) <= LAST_MMX_REG)\n #define MMX_REG_P(XOP) (REG_P (XOP) && MMX_REGNO_P (REGNO (XOP)))\n+#define MMX_REGNO_P(N) IN_RANGE ((N), FIRST_MMX_REG, LAST_MMX_REG)\n \n-#define STACK_REG_P(XOP)\t\t\\\n-  (REG_P (XOP) &&\t\t       \t\\\n-   REGNO (XOP) >= FIRST_STACK_REG &&\t\\\n-   REGNO (XOP) <= LAST_STACK_REG)\n-\n-#define NON_STACK_REG_P(XOP) (REG_P (XOP) && ! STACK_REG_P (XOP))\n+#define STACK_REG_P(XOP) (REG_P (XOP) && STACK_REGNO_P (REGNO (XOP)))\n+#define NON_STACK_REG_P(XOP) \\\n+  (REG_P (XOP) && ! STACK_REGNO_P (REGNO (XOP)))\n+#define STACK_REGNO_P(N) IN_RANGE ((N), FIRST_STACK_REG, LAST_STACK_REG)\n \n #define STACK_TOP_P(XOP) (REG_P (XOP) && REGNO (XOP) == FIRST_STACK_REG)\n \n@@ -1567,21 +1565,15 @@ typedef struct ix86_args {\n \n #define REGNO_OK_FOR_INDEX_P(REGNO) \t\t\t\t\t\\\n   ((REGNO) < STACK_POINTER_REGNUM \t\t\t\t\t\\\n-   || (REGNO >= FIRST_REX_INT_REG\t\t\t\t\t\\\n-       && (REGNO) <= LAST_REX_INT_REG)\t\t\t\t\t\\\n-   || ((unsigned) reg_renumber[(REGNO)] >= FIRST_REX_INT_REG\t\t\\\n-       && (unsigned) reg_renumber[(REGNO)] <= LAST_REX_INT_REG)\t\t\\\n-   || (unsigned) reg_renumber[(REGNO)] < STACK_POINTER_REGNUM)\n+   || REX_INT_REGNO_P (REGNO)\t\t\t\t\t\t\\\n+   || (unsigned) reg_renumber[(REGNO)] < STACK_POINTER_REGNUM\t\t\\\n+   || REX_INT_REGNO_P ((unsigned) reg_renumber[(REGNO)]))\n \n #define REGNO_OK_FOR_BASE_P(REGNO) \t\t\t\t\t\\\n-  ((REGNO) <= STACK_POINTER_REGNUM \t\t\t\t\t\\\n+  (GENERAL_REGNO_P (REGNO)\t\t\t\t\t\t\\\n    || (REGNO) == ARG_POINTER_REGNUM \t\t\t\t\t\\\n    || (REGNO) == FRAME_POINTER_REGNUM \t\t\t\t\t\\\n-   || (REGNO >= FIRST_REX_INT_REG\t\t\t\t\t\\\n-       && (REGNO) <= LAST_REX_INT_REG)\t\t\t\t\t\\\n-   || ((unsigned) reg_renumber[(REGNO)] >= FIRST_REX_INT_REG\t\t\\\n-       && (unsigned) reg_renumber[(REGNO)] <= LAST_REX_INT_REG)\t\t\\\n-   || (unsigned) reg_renumber[(REGNO)] <= STACK_POINTER_REGNUM)\n+   || GENERAL_REGNO_P ((unsigned) reg_renumber[(REGNO)]))\n \n #define REGNO_OK_FOR_SIREG_P(REGNO) \\\n   ((REGNO) == 4 || reg_renumber[(REGNO)] == 4)\n@@ -1605,16 +1597,13 @@ typedef struct ix86_args {\n /* Non strict versions, pseudos are ok.  */\n #define REG_OK_FOR_INDEX_NONSTRICT_P(X)\t\t\t\t\t\\\n   (REGNO (X) < STACK_POINTER_REGNUM\t\t\t\t\t\\\n-   || (REGNO (X) >= FIRST_REX_INT_REG\t\t\t\t\t\\\n-       && REGNO (X) <= LAST_REX_INT_REG)\t\t\t\t\\\n+   || REX_INT_REGNO_P (REGNO (X))\t\t\t\t\t\\\n    || REGNO (X) >= FIRST_PSEUDO_REGISTER)\n \n #define REG_OK_FOR_BASE_NONSTRICT_P(X)\t\t\t\t\t\\\n-  (REGNO (X) <= STACK_POINTER_REGNUM\t\t\t\t\t\\\n+  (GENERAL_REGNO_P (REGNO (X))\t\t\t\t\t\t\\\n    || REGNO (X) == ARG_POINTER_REGNUM\t\t\t\t\t\\\n    || REGNO (X) == FRAME_POINTER_REGNUM \t\t\t\t\\\n-   || (REGNO (X) >= FIRST_REX_INT_REG\t\t\t\t\t\\\n-       && REGNO (X) <= LAST_REX_INT_REG)\t\t\t\t\\\n    || REGNO (X) >= FIRST_PSEUDO_REGISTER)\n \n /* Strict versions, hard registers only */\n@@ -2224,7 +2213,7 @@ enum ix86_stack_slot\n    ??? Maybe Pentium chips benefits from renaming, someone can try....  */\n \n #define HARD_REGNO_RENAME_OK(SRC, TARGET)  \\\n-   ((SRC) < FIRST_STACK_REG || (SRC) > LAST_STACK_REG)\n+  (! IN_RANGE ((SRC), FIRST_STACK_REG, LAST_STACK_REG))\n \n \f\n #define DLL_IMPORT_EXPORT_PREFIX '#'"}]}