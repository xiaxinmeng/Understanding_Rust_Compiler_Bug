{"sha": "db23381603d9725b120bbfdb8d67f79ad62a3033", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGIyMzM4MTYwM2Q5NzI1YjEyMGJiZmRiOGQ2N2Y3OWFkNjJhMzAzMw==", "commit": {"author": {"name": "Michael Meissner", "email": "Michael Meissner meissner@linux.ibm.com", "date": "2020-05-05T17:37:28Z"}, "committer": {"name": "Michael Meissner", "email": "Michael Meissner meissner@linux.ibm.com", "date": "2020-05-05T17:37:28Z"}, "message": "Patch ieee128-lib-patch007b", "tree": {"sha": "4f3147362bff26d8b6c4efce03017079b7a836be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f3147362bff26d8b6c4efce03017079b7a836be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db23381603d9725b120bbfdb8d67f79ad62a3033", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db23381603d9725b120bbfdb8d67f79ad62a3033", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db23381603d9725b120bbfdb8d67f79ad62a3033", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db23381603d9725b120bbfdb8d67f79ad62a3033/comments", "author": null, "committer": null, "parents": [{"sha": "931ab4fd3348dd19b6bee6e9db170f27f1504dc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/931ab4fd3348dd19b6bee6e9db170f27f1504dc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/931ab4fd3348dd19b6bee6e9db170f27f1504dc9"}], "stats": {"total": 25, "additions": 20, "deletions": 5}, "files": [{"sha": "31ecbb7e958cd173077d0db8277ce4051b9df812", "filename": "gcc/ChangeLog.meissner", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db23381603d9725b120bbfdb8d67f79ad62a3033/gcc%2FChangeLog.meissner", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db23381603d9725b120bbfdb8d67f79ad62a3033/gcc%2FChangeLog.meissner", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.meissner?ref=db23381603d9725b120bbfdb8d67f79ad62a3033", "patch": "@@ -1,3 +1,10 @@\n+2020-05-05  Michael Meissner  <meissner@linux.ibm.com>\n+\n+\t(ieee128-lib-patch007b)\n+\t* config/rs6000/rs6000-c.c (rs6000_cpu_cpp_builtins): Map all of\n+\tthe special f128 constant builtins to the long double version if\n+\tlong double is IEEE 128-bit.\n+\n 2020-05-05  Michael Meissner  <meissner@linux.ibm.com>\n \n \t(ieee128-lib-patch005b)"}, {"sha": "c0499be890f87a813c6830345f91fa7b4a5c2818", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db23381603d9725b120bbfdb8d67f79ad62a3033/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db23381603d9725b120bbfdb8d67f79ad62a3033/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=db23381603d9725b120bbfdb8d67f79ad62a3033", "patch": "@@ -675,21 +675,29 @@ rs6000_cpu_cpp_builtins (cpp_reader *pfile)\n       builtin_define (\"__builtin_vsx_xvnmsubmsp=__builtin_vsx_xvnmsubsp\");\n     }\n \n-  /* Map the old _Float128 'q' builtins into the new 'f128' builtins.  However,\n-     if long double is IEEE 128-bit, map the built-in functions to the normal\n-     long double version.  In addition, if the default long double type is\n-     IEEE, the nans builtins seem to generate the normal nan builtin value.  */\n+  /* Map the old _Float128 'q' builtins into the new 'f128' builtins if long\n+     double is IBM or 64-bit.\n+\n+     However, if long double is IEEE 128-bit, map both sets of built-in\n+     functions to the normal long double version.  This shows up in nansf128\n+     vs. nanf128.  */\n   if (TARGET_FLOAT128_TYPE)\n     {\n-      if (TARGET_IEEEQUAD && TARGET_LONG_DOUBLE_128)\n+      if (FLOAT128_IEEE_P (TFmode))\n \t{\n \t  builtin_define (\"__builtin_fabsq=__builtin_fabsl\");\n \t  builtin_define (\"__builtin_copysignq=__builtin_copysignl\");\n \t  builtin_define (\"__builtin_nanq=__builtin_nanl\");\n \t  builtin_define (\"__builtin_nansq=__builtin_nansl\");\n \t  builtin_define (\"__builtin_infq=__builtin_infl\");\n \t  builtin_define (\"__builtin_huge_valq=__builtin_huge_vall\");\n+\n+\t  builtin_define (\"__builtin_fabsf128=__builtin_fabsl\");\n+\t  builtin_define (\"__builtin_copysignf128=__builtin_copysignl\");\n+\t  builtin_define (\"__builtin_nanf128=__builtin_nanl\");\n \t  builtin_define (\"__builtin_nansf128=__builtin_nansl\");\n+\t  builtin_define (\"__builtin_inff128=__builtin_infl\");\n+\t  builtin_define (\"__builtin_huge_valf128=__builtin_huge_vall\");\n \t}\n       else\n \t{"}]}