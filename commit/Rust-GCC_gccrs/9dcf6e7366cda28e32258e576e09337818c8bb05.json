{"sha": "9dcf6e7366cda28e32258e576e09337818c8bb05", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWRjZjZlNzM2NmNkYTI4ZTMyMjU4ZTU3NmUwOTMzNzgxOGM4YmIwNQ==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm@polyomino.org.uk", "date": "2004-07-11T09:53:06Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2004-07-11T09:53:06Z"}, "message": "langhooks.h (estimate_num_insns, [...]): Remove hooks.\n\n\t* langhooks.h (estimate_num_insns, pushlevel, poplevel, set_block,\n\tmaybe_build_cleanup, update_decl_after_saving): Remove hooks.\n\t* langhooks.c (lhd_clear_binding_stack): Remove.\n\t* langhooks-def.h (lhd_clear_binding_stack,\n\tLANG_HOOKS_MAYBE_BUILD_CLEANUP,\n\tLANG_HOOKS_UPDATE_DECL_AFTER_SAVING,\n\tLANG_HOOKS_TREE_INLINING_ESTIMATE_NUM_INSNS, LANG_HOOKS_PUSHLEVEL,\n\tLANG_HOOKS_POPLEVEL, LANG_HOOKS_SET_BLOCK): Remove.\n\t(LANG_HOOKS_CLEAR_BINDING_STACK): Define to lhd_do_nothing.\n\t* system.h (LANG_HOOKS_TREE_INLINING_ESTIMATE_NUM_INSNS,\n\tLANG_HOOKS_PUSHLEVEL, LANG_HOOKS_SET_BLOCK,\n\tLANG_HOOKS_MAYBE_BUILD_CLEANUP,\n\tLANG_HOOKS_UPDATE_DECL_AFTER_SAVING, LANG_HOOKS_POPLEVEL): Poison.\n\t* tree.h (poplevel): Don't declare.\n\t* c-lang.c (LANG_HOOKS_CLEAR_BINDING_STACK, LANG_HOOKS_PUSHLEVEL,\n\tLANG_HOOKS_POPLEVEL, LANG_HOOKS_SET_BLOCK): Remove.\n\t* objc/objc-lang.c (LANG_HOOKS_CLEAR_BINDING_STACK,\n\tLANG_HOOKS_PUSHLEVEL, LANG_HOOKS_POPLEVEL, LANG_HOOKS_SET_BLOCK):\n\tRemove.\n\nada:\n\t* misc.c (LANG_HOOKS_CLEAR_BINDING_STACK, LANG_HOOKS_PUSHLEVEL,\n\tLANG_HOOKS_POPLEVEL, LANG_HOOKS_SET_BLOCK): Remove.\n\ncp:\n\t* cp-lang.c (LANG_HOOKS_MAYBE_BUILD_CLEANUP, LANG_HOOKS_PUSHLEVEL,\n\tLANG_HOOKS_POPLEVEL, LANG_HOOKS_UPDATE_DECL_AFTER_SAVING): Remove.\n\t* cp-tree.h (poplevel): Declare.\n\t(set_block): Remove.\n\t* decl.c (set_block): Remove.\n\nfortran:\n\t* f95-lang.c (set_block): Remove.\n\t(gfc_clear_binding_stack): New.\n\t(LANG_HOOKS_CLEAR_BINDING_STACK): Define.\n\t(struct binding_level): Remove block_created_by_back_end.\n\t(clear_binding_level): Likewise.\n\t(poplevel): Don't handle block_created_by_back_end.\n\njava:\n\t* java-tree.h (set_block): Remove.\n\t* lang.c (java_clear_binding_stack): New.\n\t(LANG_HOOKS_CLEAR_BINDING_STACK): Define.\n\t* decl.c (struct binding_level): Remove this_block.\n\t(clear_binding_level): Likewise.\n\t(poplevel): Don't handle this_block.\n\t(set_block): Remove.\n\ntreelang:\n\t* treetree.c (set_block): Remove.\n\t(struct binding_level): Remove block_created_by_back_end.\n\t(clear_binding_level): Likewise.\n\t(tree_code_create_function_initial,\n\ttree_code_create_function_wrapup): Call pushlevel and poplevel\n\tdirectly rather than through hooks.\n\t(poplevel): Don't handle block_created_by_back_end.\n\nFrom-SVN: r84499", "tree": {"sha": "9bfd7630da8e5c58f26e9976e1d534d1c74544c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9bfd7630da8e5c58f26e9976e1d534d1c74544c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9dcf6e7366cda28e32258e576e09337818c8bb05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dcf6e7366cda28e32258e576e09337818c8bb05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9dcf6e7366cda28e32258e576e09337818c8bb05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dcf6e7366cda28e32258e576e09337818c8bb05/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fae1b38dc82248b70271f42647fa92b82ca6e200", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fae1b38dc82248b70271f42647fa92b82ca6e200", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fae1b38dc82248b70271f42647fa92b82ca6e200"}], "stats": {"total": 317, "additions": 114, "deletions": 203}, "files": [{"sha": "e1790dc3776b9f7ad99bf0f418f2c8e12de1db58", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dcf6e7366cda28e32258e576e09337818c8bb05/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dcf6e7366cda28e32258e576e09337818c8bb05/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9dcf6e7366cda28e32258e576e09337818c8bb05", "patch": "@@ -1,3 +1,25 @@\n+2004-07-11  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\t* langhooks.h (estimate_num_insns, pushlevel, poplevel, set_block,\n+\tmaybe_build_cleanup, update_decl_after_saving): Remove hooks.\n+\t* langhooks.c (lhd_clear_binding_stack): Remove.\n+\t* langhooks-def.h (lhd_clear_binding_stack,\n+\tLANG_HOOKS_MAYBE_BUILD_CLEANUP,\n+\tLANG_HOOKS_UPDATE_DECL_AFTER_SAVING,\n+\tLANG_HOOKS_TREE_INLINING_ESTIMATE_NUM_INSNS, LANG_HOOKS_PUSHLEVEL,\n+\tLANG_HOOKS_POPLEVEL, LANG_HOOKS_SET_BLOCK): Remove.\n+\t(LANG_HOOKS_CLEAR_BINDING_STACK): Define to lhd_do_nothing.\n+\t* system.h (LANG_HOOKS_TREE_INLINING_ESTIMATE_NUM_INSNS,\n+\tLANG_HOOKS_PUSHLEVEL, LANG_HOOKS_SET_BLOCK,\n+\tLANG_HOOKS_MAYBE_BUILD_CLEANUP,\n+\tLANG_HOOKS_UPDATE_DECL_AFTER_SAVING, LANG_HOOKS_POPLEVEL): Poison.\n+\t* tree.h (poplevel): Don't declare.\n+\t* c-lang.c (LANG_HOOKS_CLEAR_BINDING_STACK, LANG_HOOKS_PUSHLEVEL,\n+\tLANG_HOOKS_POPLEVEL, LANG_HOOKS_SET_BLOCK): Remove.\n+\t* objc/objc-lang.c (LANG_HOOKS_CLEAR_BINDING_STACK,\n+\tLANG_HOOKS_PUSHLEVEL, LANG_HOOKS_POPLEVEL, LANG_HOOKS_SET_BLOCK):\n+\tRemove.\n+\n 2004-07-11  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \tPR tree-optimization/16437"}, {"sha": "55fc42ae58fc6238c3ef174d1b3252f889dd75b6", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dcf6e7366cda28e32258e576e09337818c8bb05/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dcf6e7366cda28e32258e576e09337818c8bb05/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9dcf6e7366cda28e32258e576e09337818c8bb05", "patch": "@@ -1,3 +1,8 @@\n+2004-07-11  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\t* misc.c (LANG_HOOKS_CLEAR_BINDING_STACK, LANG_HOOKS_PUSHLEVEL,\n+\tLANG_HOOKS_POPLEVEL, LANG_HOOKS_SET_BLOCK): Remove.\n+\n 2004-07-08  Richard Henderson  <rth@redhat.com>\n \n \t* trans.c (gnat_to_gnu <N_Handled_Sequence_Of_Statements>): Update"}, {"sha": "9d0e31e1ee1b96854fbd05399ea84b1f32c85da8", "filename": "gcc/ada/misc.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dcf6e7366cda28e32258e576e09337818c8bb05/gcc%2Fada%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dcf6e7366cda28e32258e576e09337818c8bb05/gcc%2Fada%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmisc.c?ref=9dcf6e7366cda28e32258e576e09337818c8bb05", "patch": "@@ -123,14 +123,6 @@ static void gnat_adjust_rli\t\t(record_layout_info);\n #define LANG_HOOKS_HONOR_READONLY\ttrue\n #undef LANG_HOOKS_HASH_TYPES\n #define LANG_HOOKS_HASH_TYPES\t\tfalse\n-#undef LANG_HOOKS_CLEAR_BINDING_STACK\n-#define LANG_HOOKS_CLEAR_BINDING_STACK\tlhd_do_nothing\n-#undef LANG_HOOKS_PUSHLEVEL\n-#define LANG_HOOKS_PUSHLEVEL\t\tlhd_do_nothing_i\n-#undef LANG_HOOKS_POPLEVEL\n-#define LANG_HOOKS_POPLEVEL\t\tlhd_do_nothing_iii_return_null_tree\n-#undef LANG_HOOKS_SET_BLOCK\n-#define LANG_HOOKS_SET_BLOCK\t\tlhd_do_nothing_t\n #undef LANG_HOOKS_GETDECLS\n #define LANG_HOOKS_GETDECLS\t\tlhd_return_null_tree_v\n #undef LANG_HOOKS_PUSHDECL"}, {"sha": "cf516b2b5c9bcb6ae4c0bed84c4820fb10204201", "filename": "gcc/c-lang.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dcf6e7366cda28e32258e576e09337818c8bb05/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dcf6e7366cda28e32258e576e09337818c8bb05/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=9dcf6e7366cda28e32258e576e09337818c8bb05", "patch": "@@ -66,8 +66,6 @@ enum c_language_kind c_language = clk_c;\n #define LANG_HOOKS_MARK_ADDRESSABLE c_mark_addressable\n #undef LANG_HOOKS_PARSE_FILE\n #define LANG_HOOKS_PARSE_FILE c_common_parse_file\n-#undef LANG_HOOKS_CLEAR_BINDING_STACK\n-#define LANG_HOOKS_CLEAR_BINDING_STACK lhd_do_nothing\n #undef LANG_HOOKS_TRUTHVALUE_CONVERSION\n #define LANG_HOOKS_TRUTHVALUE_CONVERSION c_objc_common_truthvalue_conversion\n #undef LANG_HOOKS_FINISH_INCOMPLETE_DECL\n@@ -136,15 +134,9 @@ enum c_language_kind c_language = clk_c;\n \n /* The C front end's scoping structure is very different from\n    that expected by the language-independent code; it is best\n-   to disable all of pushlevel, poplevel, set_block, and getdecls.\n+   to disable getdecls.\n    This means it must also provide its own write_globals.  */\n \n-#undef LANG_HOOKS_PUSHLEVEL\n-#define LANG_HOOKS_PUSHLEVEL lhd_do_nothing_i\n-#undef LANG_HOOKS_POPLEVEL\n-#define LANG_HOOKS_POPLEVEL lhd_do_nothing_iii_return_null_tree\n-#undef LANG_HOOKS_SET_BLOCK\n-#define LANG_HOOKS_SET_BLOCK lhd_do_nothing_t\n #undef LANG_HOOKS_GETDECLS\n #define LANG_HOOKS_GETDECLS lhd_return_null_tree_v\n #undef LANG_HOOKS_WRITE_GLOBALS"}, {"sha": "0c0219adab7ab2bda0cb82f3579a476df5440c10", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dcf6e7366cda28e32258e576e09337818c8bb05/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dcf6e7366cda28e32258e576e09337818c8bb05/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9dcf6e7366cda28e32258e576e09337818c8bb05", "patch": "@@ -1,3 +1,11 @@\n+2004-07-11  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\t* cp-lang.c (LANG_HOOKS_MAYBE_BUILD_CLEANUP, LANG_HOOKS_PUSHLEVEL,\n+\tLANG_HOOKS_POPLEVEL, LANG_HOOKS_UPDATE_DECL_AFTER_SAVING): Remove.\n+\t* cp-tree.h (poplevel): Declare.\n+\t(set_block): Remove.\n+\t* decl.c (set_block): Remove.\n+\n 2004-07-10  Mike Stump  <mrs@apple.com>\n \n \t* decl2.c (import_export_class): Never export/import vtables"}, {"sha": "5f38fbb10257e8951f18d7ad9f96830ae36a2015", "filename": "gcc/cp/cp-lang.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dcf6e7366cda28e32258e576e09337818c8bb05/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dcf6e7366cda28e32258e576e09337818c8bb05/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=9dcf6e7366cda28e32258e576e09337818c8bb05", "patch": "@@ -76,8 +76,6 @@ static void cxx_initialize_diagnostics (diagnostic_context *);\n #define LANG_HOOKS_PARSE_FILE c_common_parse_file\n #undef LANG_HOOKS_DUP_LANG_SPECIFIC_DECL\n #define LANG_HOOKS_DUP_LANG_SPECIFIC_DECL cxx_dup_lang_specific_decl\n-#undef LANG_HOOKS_MAYBE_BUILD_CLEANUP\n-#define LANG_HOOKS_MAYBE_BUILD_CLEANUP cxx_maybe_build_cleanup\n #undef LANG_HOOKS_TRUTHVALUE_CONVERSION\n #define LANG_HOOKS_TRUTHVALUE_CONVERSION c_common_truthvalue_conversion\n #undef LANG_HOOKS_UNSAFE_FOR_REEVAL\n@@ -100,16 +98,10 @@ static void cxx_initialize_diagnostics (diagnostic_context *);\n #define LANG_HOOKS_DECL_PRINTABLE_NAME\tcxx_printable_name\n #undef LANG_HOOKS_PRINT_ERROR_FUNCTION\n #define LANG_HOOKS_PRINT_ERROR_FUNCTION\tcxx_print_error_function\n-#undef LANG_HOOKS_PUSHLEVEL\n-#define LANG_HOOKS_PUSHLEVEL lhd_do_nothing_i\n-#undef LANG_HOOKS_POPLEVEL\n-#define LANG_HOOKS_POPLEVEL lhd_do_nothing_iii_return_null_tree\n #undef LANG_HOOKS_WARN_UNUSED_GLOBAL_DECL\n #define LANG_HOOKS_WARN_UNUSED_GLOBAL_DECL cxx_warn_unused_global_decl\n #undef LANG_HOOKS_WRITE_GLOBALS\n #define LANG_HOOKS_WRITE_GLOBALS lhd_do_nothing\n-#undef LANG_HOOKS_UPDATE_DECL_AFTER_SAVING\n-#define LANG_HOOKS_UPDATE_DECL_AFTER_SAVING cp_update_decl_after_saving\n \n \n #undef LANG_HOOKS_FUNCTION_INIT"}, {"sha": "415553c0630d0888b2219cb2e11cde66196ae720", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dcf6e7366cda28e32258e576e09337818c8bb05/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dcf6e7366cda28e32258e576e09337818c8bb05/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=9dcf6e7366cda28e32258e576e09337818c8bb05", "patch": "@@ -3672,8 +3672,8 @@ extern void clone_function_decl                 (tree, int);\n extern void adjust_clone_args\t\t\t(tree);\n \n /* decl.c */\n+extern tree poplevel\t\t\t\t(int, int, int);\n extern void insert_block\t\t\t(tree);\n-extern void set_block\t\t\t\t(tree);\n extern tree pushdecl\t\t\t\t(tree);\n extern void cxx_init_decl_processing\t\t(void);\n enum cp_tree_node_structure_enum cp_tree_node_structure "}, {"sha": "6f701ca93561a1c15863f7ab89be9d6aad2bea88", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dcf6e7366cda28e32258e576e09337818c8bb05/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dcf6e7366cda28e32258e576e09337818c8bb05/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=9dcf6e7366cda28e32258e576e09337818c8bb05", "patch": "@@ -735,16 +735,6 @@ insert_block (tree block)\n     = chainon (current_binding_level->blocks, block);\n }\n \n-/* Set the BLOCK node for the innermost scope\n-   (the one we are currently in).  */\n-\n-void\n-set_block (tree block ATTRIBUTE_UNUSED )\n-{\n-  /* The RTL expansion machinery requires us to provide this callback,\n-     but it is not applicable in function-at-a-time mode.  */\n-}\n-\n /* Returns nonzero if T is a virtual function table.  */\n \n int"}, {"sha": "f8d176c2e7182fa5af114b62cea14f084ff2497d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dcf6e7366cda28e32258e576e09337818c8bb05/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dcf6e7366cda28e32258e576e09337818c8bb05/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=9dcf6e7366cda28e32258e576e09337818c8bb05", "patch": "@@ -1,3 +1,12 @@\n+2004-07-11  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\t* f95-lang.c (set_block): Remove.\n+\t(gfc_clear_binding_stack): New.\n+\t(LANG_HOOKS_CLEAR_BINDING_STACK): Define.\n+\t(struct binding_level): Remove block_created_by_back_end.\n+\t(clear_binding_level): Likewise.\n+\t(poplevel): Don't handle block_created_by_back_end.\n+\n 2004-07-10  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n \n \t* trans-decl.c (gfc_create_module_variable): Nothing to do if"}, {"sha": "f867e65e8592d1ecd44408e87238573ce5a628b1", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 16, "deletions": 38, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dcf6e7366cda28e32258e576e09337818c8bb05/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dcf6e7366cda28e32258e576e09337818c8bb05/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=9dcf6e7366cda28e32258e576e09337818c8bb05", "patch": "@@ -103,7 +103,7 @@ static bool gfc_mark_addressable (tree);\n void do_function_end (void);\n int global_bindings_p (void);\n void insert_block (tree);\n-void set_block (tree);\n+static void gfc_clear_binding_stack (void);\n static void gfc_be_parse_file (int);\n static void gfc_expand_function (tree);\n \n@@ -123,6 +123,7 @@ static void gfc_expand_function (tree);\n #undef LANG_HOOKS_SIGNED_TYPE\n #undef LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE\n #undef LANG_HOOKS_CALLGRAPH_EXPAND_FUNCTION\n+#undef LANG_HOOKS_CLEAR_BINDING_STACK\n \n /* Define lang hooks.  */\n #define LANG_HOOKS_NAME                 \"GNU F95\"\n@@ -141,6 +142,7 @@ static void gfc_expand_function (tree);\n #define LANG_HOOKS_SIGNED_TYPE             gfc_signed_type\n #define LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE gfc_signed_or_unsigned_type\n #define LANG_HOOKS_CALLGRAPH_EXPAND_FUNCTION gfc_expand_function\n+#define LANG_HOOKS_CLEAR_BINDING_STACK     gfc_clear_binding_stack\n \n const struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n \n@@ -334,14 +336,6 @@ GTY(())\n   /* For each level (except the global one), a chain of BLOCK nodes for all\n      the levels that were entered and exited one level down from this one.  */\n   tree blocks;\n-  /* The back end may need, for its own internal processing, to create a BLOCK\n-     node. This field is set aside for this purpose. If this field is non-null\n-     when the level is popped, i.e. when poplevel is invoked, we will use such\n-     block instead of creating a new one from the 'names' field, that is the\n-     ..._DECL nodes accumulated so far.  Typically the routine 'pushlevel'\n-     will be called before setting this field, so that if the front-end had\n-     inserted ..._DECL nodes in the current block they will not be lost.   */\n-  tree block_created_by_back_end;\n   /* The binding level containing this one (the enclosing binding level). */\n   struct binding_level *level_chain;\n };\n@@ -354,7 +348,7 @@ static GTY(()) struct binding_level *current_binding_level = NULL;\n static GTY(()) struct binding_level *global_binding_level;\n \n /* Binding level structures are initialized by copying this one.  */\n-static struct binding_level clear_binding_level = { NULL, NULL, NULL, NULL };\n+static struct binding_level clear_binding_level = { NULL, NULL, NULL };\n \f\n /* Return non-zero if we are currently in the global binding level.  */\n \n@@ -412,7 +406,6 @@ poplevel (int keep, int reverse, int functionbody)\n   tree decl_chain;\n   tree subblock_chain = current_binding_level->blocks;\n   tree subblock_node;\n-  tree block_created_by_back_end;\n \n   /* Reverse the list of XXXX_DECL nodes if desired.  Note that the ..._DECL\n      nodes chained through the `names' field of current_binding_level are in\n@@ -421,24 +414,10 @@ poplevel (int keep, int reverse, int functionbody)\n   decl_chain = (reverse) ? nreverse (current_binding_level->names)\n     : current_binding_level->names;\n \n-  block_created_by_back_end =\n-    current_binding_level->block_created_by_back_end;\n-  if (block_created_by_back_end != 0)\n-    {\n-      block_node = block_created_by_back_end;\n-\n-      /* Check if we are about to discard some information that was gathered\n-         by the front-end. Nameley check if the back-end created a new block\n-         without calling pushlevel first. To understand why things are lost\n-         just look at the next case (i.e. no block created by back-end.  */\n-      if ((keep || functionbody) && (decl_chain || subblock_chain))\n-\tabort ();\n-    }\n-\n   /* If there were any declarations in the current binding level, or if this\n      binding level is a function body, or if there are any nested blocks then\n      create a BLOCK node to record them for the life of this function.  */\n-  else if (keep || functionbody)\n+  if (keep || functionbody)\n     block_node = build_block (keep ? decl_chain : 0, 0, subblock_chain, 0, 0);\n \n   /* Record the BLOCK node just built as the subblock its enclosing scope.  */\n@@ -475,9 +454,8 @@ poplevel (int keep, int reverse, int functionbody)\n     }\n   else if (block_node)\n     {\n-      if (block_created_by_back_end == NULL)\n-\tcurrent_binding_level->blocks\n-\t  = chainon (current_binding_level->blocks, block_node);\n+      current_binding_level->blocks\n+\t= chainon (current_binding_level->blocks, block_node);\n     }\n \n   /* If we did not make a block for the level just exited, any blocks made for\n@@ -505,15 +483,6 @@ insert_block (tree block)\n     = chainon (current_binding_level->blocks, block);\n }\n \n-/* Set the BLOCK node for the innermost scope\n-   (the one we are currently in).  */\n-\n-void\n-set_block (tree block)\n-{\n-  current_binding_level->block_created_by_back_end = block;\n-}\n-\n /* Records a ..._DECL node DECL as belonging to the current lexical scope.\n    Returns the ..._DECL node. */\n \n@@ -562,6 +531,15 @@ pushdecl_top_level (tree x)\n }\n \n \n+/* Clear the binding stack.  */\n+static void\n+gfc_clear_binding_stack (void)\n+{\n+  while (!global_bindings_p ())\n+    poplevel (0, 0, 0);\n+}\n+\n+\n #ifndef CHAR_TYPE_SIZE\n #define CHAR_TYPE_SIZE BITS_PER_UNIT\n #endif"}, {"sha": "c6966eb20eea6eac2734856cb9ecc468a1f344b8", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dcf6e7366cda28e32258e576e09337818c8bb05/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dcf6e7366cda28e32258e576e09337818c8bb05/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=9dcf6e7366cda28e32258e576e09337818c8bb05", "patch": "@@ -1,3 +1,13 @@\n+2004-07-11  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\t* java-tree.h (set_block): Remove.\n+\t* lang.c (java_clear_binding_stack): New.\n+\t(LANG_HOOKS_CLEAR_BINDING_STACK): Define.\n+\t* decl.c (struct binding_level): Remove this_block.\n+\t(clear_binding_level): Likewise.\n+\t(poplevel): Don't handle this_block.\n+\t(set_block): Remove.\n+\n 2004-07-10  Bryce McKinlay  <mckinlay@redhat.com>\n \n \t* class.c (common_enclosing_context_p): Remove statement with no"}, {"sha": "b02896719923b97cf16626ac20080cc6b852a97c", "filename": "gcc/java/decl.c", "status": "modified", "additions": 3, "deletions": 26, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dcf6e7366cda28e32258e576e09337818c8bb05/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dcf6e7366cda28e32258e576e09337818c8bb05/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=9dcf6e7366cda28e32258e576e09337818c8bb05", "patch": "@@ -299,10 +299,6 @@ struct binding_level GTY(())\n        that were entered and exited one level down.  */\n     tree blocks;\n \n-    /* The BLOCK node for this level, if one has been preallocated.\n-       If 0, the BLOCK is allocated (if needed) when the level is popped.  */\n-    tree this_block;\n-\n     /* The binding level which this one is contained in (inherits from).  */\n     struct binding_level *level_chain;\n \n@@ -348,7 +344,6 @@ static const struct binding_level clear_binding_level\n     NULL_TREE, /* names */\n     NULL_TREE, /* shadowed */\n     NULL_TREE, /* blocks */\n-    NULL_TREE, /* this_lock */\n     NULL_BINDING_LEVEL, /* level_chain */\n     LARGEST_PC, /* end_pc */\n     0, /* start_pc */\n@@ -1276,7 +1271,6 @@ poplevel (int keep, int reverse, int functionbody)\n   tree block = 0;\n   tree decl;\n   tree bind = 0;\n-  int block_previously_created;\n \n #if defined(DEBUG_JAVA_BINDING_LEVELS)\n   binding_depth--;\n@@ -1319,10 +1313,7 @@ poplevel (int keep, int reverse, int functionbody)\n      create a BLOCK to record them for the life of this function.  */\n \n   block = 0;\n-  block_previously_created = (current_binding_level->this_block != 0);\n-  if (block_previously_created)\n-    block = current_binding_level->this_block;\n-  else if (keep || functionbody)\n+  if (keep || functionbody)\n     {\n       block = make_node (BLOCK);\n       TREE_TYPE (block) = void_type_node;\n@@ -1466,9 +1457,8 @@ poplevel (int keep, int reverse, int functionbody)\n     {\n       if (block)\n \t{\n-\t  if (!block_previously_created)\n-\t    current_binding_level->blocks\n-\t      = chainon (current_binding_level->blocks, block);\n+\t  current_binding_level->blocks\n+\t    = chainon (current_binding_level->blocks, block);\n \t}\n       /* If we did not make a block for the level just exited,\n \t any blocks made for inner levels\n@@ -1571,19 +1561,6 @@ insert_block (tree block)\n     = chainon (current_binding_level->blocks, block);\n }\n \n-/* Set the BLOCK node for the innermost scope\n-   (the one we are currently in).  */\n-\n-void\n-set_block (tree block)\n-{\n-  current_binding_level->this_block = block;\n-  current_binding_level->names = chainon (current_binding_level->names,\n-\t\t\t\t\t  BLOCK_VARS (block));\n-  current_binding_level->blocks = chainon (current_binding_level->blocks,\n-\t\t\t\t\t   BLOCK_SUBBLOCKS (block));\n-}\n-\n /* integrate_decl_tree calls this function. */\n \n void"}, {"sha": "2cf914557785ea33d47d2b6f7feb573f03e1756f", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dcf6e7366cda28e32258e576e09337818c8bb05/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dcf6e7366cda28e32258e576e09337818c8bb05/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=9dcf6e7366cda28e32258e576e09337818c8bb05", "patch": "@@ -1171,7 +1171,6 @@ extern tree getdecls (void);\n extern void pushlevel (int);\n extern tree poplevel (int,int, int);\n extern void insert_block (tree);\n-extern void set_block (tree);\n extern tree pushdecl (tree);\n extern void java_init_decl_processing (void);\n extern void java_dup_lang_specific_decl (tree);"}, {"sha": "d3ba37289d9471a6e757c91ea9b452466aa0b50d", "filename": "gcc/java/lang.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dcf6e7366cda28e32258e576e09337818c8bb05/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dcf6e7366cda28e32258e576e09337818c8bb05/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=9dcf6e7366cda28e32258e576e09337818c8bb05", "patch": "@@ -67,6 +67,7 @@ static bool java_dump_tree (void *, tree);\n static void dump_compound_expr (dump_info_p, tree);\n static bool java_decl_ok_for_sibcall (tree);\n static tree java_get_callee_fndecl (tree);\n+static void java_clear_binding_stack (void);\n \n #ifndef TARGET_OBJECT_SUFFIX\n # define TARGET_OBJECT_SUFFIX \".o\"\n@@ -264,6 +265,9 @@ struct language_function GTY(())\n #undef LANG_HOOKS_CALLGRAPH_EXPAND_FUNCTION\n #define LANG_HOOKS_CALLGRAPH_EXPAND_FUNCTION java_expand_body\n \n+#undef LANG_HOOKS_CLEAR_BINDING_STACK\n+#define LANG_HOOKS_CLEAR_BINDING_STACK java_clear_binding_stack\n+\n /* Each front end provides its own.  */\n const struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n \n@@ -1160,4 +1164,13 @@ java_get_callee_fndecl (tree call_expr)\n   return NULL;\n }\n \n+\n+/* Clear the binding stack.  */\n+static void\n+java_clear_binding_stack (void)\n+{\n+  while (!global_bindings_p ())\n+    poplevel (0, 0, 0);\n+}\n+\n #include \"gt-java-lang.h\""}, {"sha": "c57f34a327d3c23ba8e813f88d6e3337c21f4e50", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dcf6e7366cda28e32258e576e09337818c8bb05/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dcf6e7366cda28e32258e576e09337818c8bb05/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=9dcf6e7366cda28e32258e576e09337818c8bb05", "patch": "@@ -52,7 +52,6 @@ extern tree lhd_do_nothing_iii_return_null_tree (int, int, int);\n extern int lhd_safe_from_p (rtx, tree);\n extern int lhd_staticp (tree);\n extern int lhd_unsafe_for_reeval (tree);\n-extern void lhd_clear_binding_stack (void);\n extern void lhd_print_tree_nothing (FILE *, tree, int);\n extern const char *lhd_decl_printable_name (tree, int);\n extern int lhd_types_compatible_p (tree, tree);\n@@ -97,7 +96,7 @@ extern int lhd_gimplify_expr (tree *, tree *, tree *);\n #define LANG_HOOKS_INIT\t\t\thook_bool_void_false\n #define LANG_HOOKS_FINISH\t\tlhd_do_nothing\n #define LANG_HOOKS_PARSE_FILE\t\tlhd_do_nothing_i\n-#define LANG_HOOKS_CLEAR_BINDING_STACK\tlhd_clear_binding_stack\n+#define LANG_HOOKS_CLEAR_BINDING_STACK\tlhd_do_nothing\n #define LANG_HOOKS_INIT_OPTIONS\t\thook_uint_uint_constcharptrptr_0\n #define LANG_HOOKS_INITIALIZE_DIAGNOSTICS lhd_initialize_diagnostics\n #define LANG_HOOKS_HANDLE_OPTION\thook_int_size_t_constcharptr_int_0\n@@ -113,7 +112,6 @@ extern int lhd_gimplify_expr (tree *, tree *, tree *);\n #define LANG_HOOKS_STATICP\t\tlhd_staticp\n #define LANG_HOOKS_DUP_LANG_SPECIFIC_DECL lhd_do_nothing_t\n #define LANG_HOOKS_UNSAVE_EXPR_NOW\tlhd_unsave_expr_now\n-#define LANG_HOOKS_MAYBE_BUILD_CLEANUP\tlhd_return_null_tree\n #define LANG_HOOKS_SET_DECL_ASSEMBLER_NAME lhd_set_decl_assembler_name\n #define LANG_HOOKS_CAN_USE_BIT_FIELDS_P lhd_can_use_bit_fields_p\n #define LANG_HOOKS_REDUCE_BIT_FIELD_OPERATIONS false\n@@ -130,7 +128,6 @@ extern int lhd_gimplify_expr (tree *, tree *, tree *);\n #define LANG_HOOKS_EXPR_SIZE\t\tlhd_expr_size\n #define LANG_HOOKS_TREE_SIZE\t\tlhd_tree_size\n #define LANG_HOOKS_TYPES_COMPATIBLE_P\tlhd_types_compatible_p\n-#define LANG_HOOKS_UPDATE_DECL_AFTER_SAVING NULL\n \n #define LANG_HOOKS_FUNCTION_INIT\tlhd_do_nothing_f\n #define LANG_HOOKS_FUNCTION_FINAL\tlhd_do_nothing_f\n@@ -165,8 +162,6 @@ extern int lhd_gimplify_expr (tree *, tree *, tree *);\n   lhd_tree_inlining_end_inlining\n #define LANG_HOOKS_TREE_INLINING_CONVERT_PARM_FOR_INLINING \\\n   lhd_tree_inlining_convert_parm_for_inlining\n-#define LANG_HOOKS_TREE_INLINING_ESTIMATE_NUM_INSNS \\\n-  NULL\n \n #define LANG_HOOKS_TREE_INLINING_INITIALIZER { \\\n   LANG_HOOKS_TREE_INLINING_WALK_SUBTREES, \\\n@@ -179,8 +174,7 @@ extern int lhd_gimplify_expr (tree *, tree *, tree *);\n   LANG_HOOKS_TREE_INLINING_VAR_MOD_TYPE_P, \\\n   LANG_HOOKS_TREE_INLINING_START_INLINING, \\\n   LANG_HOOKS_TREE_INLINING_END_INLINING, \\\n-  LANG_HOOKS_TREE_INLINING_CONVERT_PARM_FOR_INLINING, \\\n-  LANG_HOOKS_TREE_INLINING_ESTIMATE_NUM_INSNS \\\n+  LANG_HOOKS_TREE_INLINING_CONVERT_PARM_FOR_INLINING \\\n }\n \n #define LANG_HOOKS_CALLGRAPH_ANALYZE_EXPR lhd_callgraph_analyze_expr\n@@ -240,11 +234,8 @@ extern tree lhd_make_node (enum tree_code);\n }\n \n /* Declaration hooks.  */\n-#define LANG_HOOKS_PUSHLEVEL\tpushlevel\n-#define LANG_HOOKS_POPLEVEL\tpoplevel\n #define LANG_HOOKS_GLOBAL_BINDINGS_P global_bindings_p\n #define LANG_HOOKS_INSERT_BLOCK\tinsert_block\n-#define LANG_HOOKS_SET_BLOCK\tset_block\n #define LANG_HOOKS_PUSHDECL\tpushdecl\n #define LANG_HOOKS_GETDECLS\tgetdecls\n #define LANG_HOOKS_WARN_UNUSED_GLOBAL_DECL lhd_warn_unused_global_decl\n@@ -253,11 +244,8 @@ extern tree lhd_make_node (enum tree_code);\n #define LANG_HOOKS_DECL_OK_FOR_SIBCALL\tlhd_decl_ok_for_sibcall\n \n #define LANG_HOOKS_DECLS { \\\n-  LANG_HOOKS_PUSHLEVEL, \\\n-  LANG_HOOKS_POPLEVEL, \\\n   LANG_HOOKS_GLOBAL_BINDINGS_P, \\\n   LANG_HOOKS_INSERT_BLOCK, \\\n-  LANG_HOOKS_SET_BLOCK, \\\n   LANG_HOOKS_PUSHDECL, \\\n   LANG_HOOKS_GETDECLS, \\\n   LANG_HOOKS_WARN_UNUSED_GLOBAL_DECL, \\\n@@ -292,7 +280,6 @@ extern tree lhd_make_node (enum tree_code);\n   LANG_HOOKS_STATICP, \\\n   LANG_HOOKS_DUP_LANG_SPECIFIC_DECL, \\\n   LANG_HOOKS_UNSAVE_EXPR_NOW, \\\n-  LANG_HOOKS_MAYBE_BUILD_CLEANUP, \\\n   LANG_HOOKS_SET_DECL_ASSEMBLER_NAME, \\\n   LANG_HOOKS_CAN_USE_BIT_FIELDS_P, \\\n   LANG_HOOKS_REDUCE_BIT_FIELD_OPERATIONS, \\\n@@ -308,7 +295,6 @@ extern tree lhd_make_node (enum tree_code);\n   LANG_HOOKS_GET_CALLEE_FNDECL, \\\n   LANG_HOOKS_PRINT_ERROR_FUNCTION, \\\n   LANG_HOOKS_EXPR_SIZE, \\\n-  LANG_HOOKS_UPDATE_DECL_AFTER_SAVING, \\\n   LANG_HOOKS_ATTRIBUTE_TABLE, \\\n   LANG_HOOKS_COMMON_ATTRIBUTE_TABLE, \\\n   LANG_HOOKS_FORMAT_ATTRIBUTE_TABLE, \\"}, {"sha": "c5a23f005f12a4fc6c8323a8abe0c042a59c1466", "filename": "gcc/langhooks.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dcf6e7366cda28e32258e576e09337818c8bb05/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dcf6e7366cda28e32258e576e09337818c8bb05/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=9dcf6e7366cda28e32258e576e09337818c8bb05", "patch": "@@ -205,15 +205,6 @@ lhd_can_use_bit_fields_p (void)\n   return true;\n }\n \n-/* Provide a default routine to clear the binding stack.  This is used\n-   by languages that don't need to do anything special.  */\n-void\n-lhd_clear_binding_stack (void)\n-{\n-  while (! lang_hooks.decls.global_bindings_p ())\n-    lang_hooks.decls.poplevel (0, 0, 0);\n-}\n-\n /* Type promotion for variable arguments.  */\n tree\n lhd_type_promotes_to (tree type ATTRIBUTE_UNUSED)"}, {"sha": "1669eb24a1045d69d2ed7b80c1f723ee54be82c4", "filename": "gcc/langhooks.h", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dcf6e7366cda28e32258e576e09337818c8bb05/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dcf6e7366cda28e32258e576e09337818c8bb05/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=9dcf6e7366cda28e32258e576e09337818c8bb05", "patch": "@@ -47,7 +47,6 @@ struct lang_hooks_for_tree_inlining\n   int (*start_inlining) (tree);\n   void (*end_inlining) (tree);\n   tree (*convert_parm_for_inlining) (tree, tree, tree, int);\n-  int (*estimate_num_insns) (tree);\n };\n \n struct lang_hooks_for_callgraph\n@@ -155,17 +154,6 @@ struct lang_hooks_for_types\n \n struct lang_hooks_for_decls\n {\n-  /* Enter a new lexical scope.  Argument is always zero when called\n-     from outside the front end.  */\n-  void (*pushlevel) (int);\n-\n-  /* Exit a lexical scope and return a BINDING for that scope.\n-     Takes three arguments:\n-     KEEP -- nonzero if there were declarations in this scope.\n-     REVERSE -- reverse the order of decls before returning them.\n-     FUNCTIONBODY -- nonzero if this level is the body of a function.  */\n-  tree (*poplevel) (int, int, int);\n-\n   /* Returns nonzero if we are in the global binding level.  Ada\n      returns -1 for an undocumented reason used in stor-layout.c.  */\n   int (*global_bindings_p) (void);\n@@ -175,9 +163,6 @@ struct lang_hooks_for_decls\n      to handle the BLOCK node inside the BIND_EXPR.  */\n   void (*insert_block) (tree);\n \n-  /* Set the BLOCK node for the current scope level.  */\n-  void (*set_block) (tree);\n-\n   /* Function to add a decl to the current scope level.  Takes one\n      argument, a decl to add.  Returns that decl, or, if the same\n      symbol is already declared, may return a different decl for that\n@@ -332,10 +317,6 @@ struct lang_hooks\n      things are cleared out.  */\n   tree (*unsave_expr_now) (tree);\n \n-  /* Called by expand_expr to build and return the cleanup-expression\n-     for the passed TARGET_EXPR.  Return NULL if there is none.  */\n-  tree (*maybe_build_cleanup) (tree);\n-\n   /* Set the DECL_ASSEMBLER_NAME for a node.  If it is the sort of\n      thing that the assembler should talk about, set\n      DECL_ASSEMBLER_NAME to an appropriate IDENTIFIER_NODE.\n@@ -398,9 +379,6 @@ struct lang_hooks\n      semantics in cases that it doesn't want to handle specially.  */\n   tree (*expr_size) (tree);\n \n-  /* Update lang specific fields after duplicating function body.  */\n-  void (*update_decl_after_saving) (tree, void *);\n-\n   /* Pointers to machine-independent attribute tables, for front ends\n      using attribs.c.  If one is NULL, it is ignored.  Respectively, a\n      table of attributes specific to the language, a table of"}, {"sha": "02200739af47fd20bcb0b37c1bd8caf9f3cc3035", "filename": "gcc/objc/objc-lang.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dcf6e7366cda28e32258e576e09337818c8bb05/gcc%2Fobjc%2Fobjc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dcf6e7366cda28e32258e576e09337818c8bb05/gcc%2Fobjc%2Fobjc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-lang.c?ref=9dcf6e7366cda28e32258e576e09337818c8bb05", "patch": "@@ -57,8 +57,6 @@ enum c_language_kind c_language = clk_objc;\n #define LANG_HOOKS_GET_ALIAS_SET c_common_get_alias_set\n #undef LANG_HOOKS_PARSE_FILE\n #define LANG_HOOKS_PARSE_FILE c_common_parse_file\n-#undef LANG_HOOKS_CLEAR_BINDING_STACK\n-#define LANG_HOOKS_CLEAR_BINDING_STACK lhd_do_nothing\n #undef LANG_HOOKS_EXPAND_EXPR\n #define LANG_HOOKS_EXPAND_EXPR c_expand_expr\n #undef LANG_HOOKS_EXPAND_DECL\n@@ -135,15 +133,9 @@ enum c_language_kind c_language = clk_objc;\n \n /* The C front end's scoping structure is very different from\n    that expected by the language-independent code; it is best\n-   to disable all of pushlevel, poplevel, set_block, and getdecls.\n+   to disable getdecls.\n    This means it must also provide its own write_globals.  */\n \n-#undef LANG_HOOKS_PUSHLEVEL\n-#define LANG_HOOKS_PUSHLEVEL lhd_do_nothing_i\n-#undef LANG_HOOKS_POPLEVEL\n-#define LANG_HOOKS_POPLEVEL lhd_do_nothing_iii_return_null_tree\n-#undef LANG_HOOKS_SET_BLOCK\n-#define LANG_HOOKS_SET_BLOCK lhd_do_nothing_t\n #undef LANG_HOOKS_GETDECLS\n #define LANG_HOOKS_GETDECLS lhd_return_null_tree_v\n #undef LANG_HOOKS_WRITE_GLOBALS"}, {"sha": "367c51ed849adf151f206298cce9f7a5e3f30f9e", "filename": "gcc/system.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dcf6e7366cda28e32258e576e09337818c8bb05/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dcf6e7366cda28e32258e576e09337818c8bb05/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=9dcf6e7366cda28e32258e576e09337818c8bb05", "patch": "@@ -626,7 +626,11 @@ extern int snprintf (char *, size_t, const char *, ...);\n \n /* Hooks that are no longer used.  */\n  #pragma GCC poison LANG_HOOKS_FUNCTION_MARK LANG_HOOKS_FUNCTION_FREE\t\\\n-\tLANG_HOOKS_MARK_TREE LANG_HOOKS_INSERT_DEFAULT_ATTRIBUTES\n+\tLANG_HOOKS_MARK_TREE LANG_HOOKS_INSERT_DEFAULT_ATTRIBUTES \\\n+\tLANG_HOOKS_TREE_INLINING_ESTIMATE_NUM_INSNS \\\n+\tLANG_HOOKS_PUSHLEVEL LANG_HOOKS_SET_BLOCK \\\n+\tLANG_HOOKS_MAYBE_BUILD_CLEANUP LANG_HOOKS_UPDATE_DECL_AFTER_SAVING \\\n+\tLANG_HOOKS_POPLEVEL\n \n /* Libiberty macros that are no longer used in GCC.  */\n #undef ANSI_PROTOTYPES"}, {"sha": "2f79ad705b59f2eef1148dfd64f9b4a03eb108e3", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dcf6e7366cda28e32258e576e09337818c8bb05/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dcf6e7366cda28e32258e576e09337818c8bb05/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=9dcf6e7366cda28e32258e576e09337818c8bb05", "patch": "@@ -3311,10 +3311,6 @@ extern GTY(()) tree current_file_decl;\n \n extern int all_types_permanent;\n \n-/* Exit a binding level.  This function is provided by each language\n-   frontend.  */\n-extern tree poplevel (int, int, int);\n-\n /* Declare a predefined function.  Return the declaration.  This function is\n    provided by each language frontend.  */\n extern tree builtin_function (const char *, tree, int, enum built_in_class,"}, {"sha": "bd6955ff3a32f99c02ac621880ab8b571e5718e8", "filename": "gcc/treelang/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dcf6e7366cda28e32258e576e09337818c8bb05/gcc%2Ftreelang%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dcf6e7366cda28e32258e576e09337818c8bb05/gcc%2Ftreelang%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2FChangeLog?ref=9dcf6e7366cda28e32258e576e09337818c8bb05", "patch": "@@ -1,3 +1,13 @@\n+2004-07-11  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\t* treetree.c (set_block): Remove.\n+\t(struct binding_level): Remove block_created_by_back_end.\n+\t(clear_binding_level): Likewise.\n+\t(tree_code_create_function_initial,\n+\ttree_code_create_function_wrapup): Call pushlevel and poplevel\n+\tdirectly rather than through hooks.\n+\t(poplevel): Don't handle block_created_by_back_end.\n+\n 2004-04-07  Richard Henderson  <rth@redhat.com>\n \n \t* treetree.c (tree_mark_addressable):  Don't put_var_into_stack."}, {"sha": "2fa6643fc5e8f7dcab5cc416c49ec2c7cbefb695", "filename": "gcc/treelang/treetree.c", "status": "modified", "additions": 8, "deletions": 41, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dcf6e7366cda28e32258e576e09337818c8bb05/gcc%2Ftreelang%2Ftreetree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dcf6e7366cda28e32258e576e09337818c8bb05/gcc%2Ftreelang%2Ftreetree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Ftreetree.c?ref=9dcf6e7366cda28e32258e576e09337818c8bb05", "patch": "@@ -135,7 +135,6 @@ void pushlevel (int ignore);\n tree poplevel (int keep, int reverse, int functionbody);\n int global_bindings_p (void);\n void insert_block (tree block);\n-void set_block (tree block);\n tree pushdecl (tree decl);\n tree getdecls (void);\n int kept_level_p (void);\n@@ -451,7 +450,7 @@ tree_code_create_function_initial (tree prev_saved,\n   /* Function.c requires a push at the start of the function. that\n      looks like a bug to me but let's make it happy.  */\n \n-  (*lang_hooks.decls.pushlevel) (0);\n+  pushlevel (0);\n \n   /* Create rtl for the start of a new scope.  */\n \n@@ -482,7 +481,7 @@ tree_code_create_function_initial (tree prev_saved,\n \n   /* Add a new level to the debugger symbol table.  */\n \n-  (*lang_hooks.decls.pushlevel) (0);\n+  pushlevel (0);\n \n   /* Create rtl for the start of a new scope.  */\n \n@@ -504,7 +503,7 @@ tree_code_create_function_wrapup (location_t loc)\n \n   /* Get completely built level from debugger symbol table.  */\n \n-  block = (*lang_hooks.decls.poplevel) (1, 0, 0);\n+  block = poplevel (1, 0, 0);\n \n   /* Emit rtl for end of scope.  */\n \n@@ -516,7 +515,7 @@ tree_code_create_function_wrapup (location_t loc)\n \n   /* Pop the level.  */\n \n-  block = (*lang_hooks.decls.poplevel) (1, 0, 1);\n+  block = poplevel (1, 0, 1);\n \n   /* And attach it to the function.  */\n \n@@ -1057,14 +1056,6 @@ struct binding_level\n   /* For each level (except the global one), a chain of BLOCK nodes for all\n      the levels that were entered and exited one level down from this one.  */\n   tree blocks;\n-  /* The back end may need, for its own internal processing, to create a BLOCK\n-     node. This field is set aside for this purpose. If this field is non-null\n-     when the level is popped, i.e. when poplevel is invoked, we will use such\n-     block instead of creating a new one from the 'names' field, that is the\n-     ..._DECL nodes accumulated so far.  Typically the routine 'pushlevel'\n-     will be called before setting this field, so that if the front-end had\n-     inserted ..._DECL nodes in the current block they will not be lost.   */\n-  tree block_created_by_back_end;\n   /* The binding level containing this one (the enclosing binding level). */\n   struct binding_level *level_chain;\n };\n@@ -1077,7 +1068,7 @@ static struct binding_level *current_binding_level = NULL;\n static struct binding_level *global_binding_level;\n \n /* Binding level structures are initialized by copying this one.  */\n-static struct binding_level clear_binding_level = {NULL, NULL, NULL, NULL};\n+static struct binding_level clear_binding_level = {NULL, NULL, NULL };\n \f\n /* Return non-zero if we are currently in the global binding level.  */\n \n@@ -1145,7 +1136,6 @@ poplevel (int keep, int reverse, int functionbody)\n   tree decl_chain;\n   tree subblock_chain = current_binding_level->blocks;\n   tree subblock_node;\n-  tree block_created_by_back_end;\n \n   /* Reverse the list of *_DECL nodes if desired.  Note that the ..._DECL\n      nodes chained through the `names' field of current_binding_level are in\n@@ -1154,23 +1144,10 @@ poplevel (int keep, int reverse, int functionbody)\n   decl_chain = (reverse) ? nreverse (current_binding_level->names)\n \t\t\t : current_binding_level->names;\n \n-  block_created_by_back_end = current_binding_level->block_created_by_back_end;\n-  if (block_created_by_back_end != 0)\n-    {\n-      block_node = block_created_by_back_end;\n-\n-      /* Check if we are about to discard some information that was gathered\n-\t by the front-end. Nameley check if the back-end created a new block \n-\t without calling pushlevel first. To understand why things are lost\n-\t just look at the next case (i.e. no block created by back-end.  */\n-      if ((keep || functionbody) && (decl_chain || subblock_chain))\n-\tabort ();\n-    }\n-\n   /* If there were any declarations in the current binding level, or if this\n      binding level is a function body, or if there are any nested blocks then\n      create a BLOCK node to record them for the life of this function.  */\n-  else if (keep || functionbody)\n+  if (keep || functionbody)\n     block_node = build_block (keep ? decl_chain : 0, 0, subblock_chain, 0, 0);\n \n   /* Record the BLOCK node just built as the subblock its enclosing scope.  */\n@@ -1207,9 +1184,8 @@ poplevel (int keep, int reverse, int functionbody)\n     }\n   else if (block_node)\n     {\n-      if (block_created_by_back_end == NULL)\n-\tcurrent_binding_level->blocks\n-\t  = chainon (current_binding_level->blocks, block_node);\n+      current_binding_level->blocks\n+\t= chainon (current_binding_level->blocks, block_node);\n     }\n \n   /* If we did not make a block for the level just exited, any blocks made for\n@@ -1237,15 +1213,6 @@ insert_block (tree block)\n     = chainon (current_binding_level->blocks, block);\n }\n \n-/* Set the BLOCK node for the innermost scope\n-   (the one we are currently in).  */\n-\n-void\n-set_block (tree block)\n-{\n-  current_binding_level->block_created_by_back_end = block;\n-}\n-\n /* Records a ..._DECL node DECL as belonging to the current lexical scope.\n    Returns the ..._DECL node. */\n "}]}