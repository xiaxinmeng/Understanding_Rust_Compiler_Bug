{"sha": "62732c3044c767f4efcff0cd398c9e65ba437bda", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjI3MzJjMzA0NGM3NjdmNGVmY2ZmMGNkMzk4YzllNjViYTQzN2JkYQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2012-07-25T18:04:25Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2012-07-25T18:04:25Z"}, "message": "trans-types.c (gfc_real16_is_float128): Fix spelling in a comment.\n\n2012-07-25  Tobias Burnus  <burnus@net-b.de>\n\n        * trans-types.c (gfc_real16_is_float128): Fix spelling\n        in a comment.\n        * trans.h (struct gfc_array_info): Ditto.\n        * gfortran.h (gfc_expr): Ditto.\n        * simplify.c (gfc_count): Ditto.\n        * trans-expr.c (gfc_copy_class_to_class,\n        conv_parent_component_references,\n        gfc_trans_pointer_assignment): Ditto.\n        * expr.c (check_pointer_assign): Fix diagnostic spelling.\n        * interface.c (compare_parameter): Ditto.\n        * parse.c (use_modules, parse_associate): Ditto.\n        * decl.c (match_char_length): Fix spelling of the\n        an function argument.\n\nFrom-SVN: r189859", "tree": {"sha": "5d90e21c8b787ed56f0d76ce9e6828d99aa12263", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d90e21c8b787ed56f0d76ce9e6828d99aa12263"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62732c3044c767f4efcff0cd398c9e65ba437bda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62732c3044c767f4efcff0cd398c9e65ba437bda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62732c3044c767f4efcff0cd398c9e65ba437bda", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62732c3044c767f4efcff0cd398c9e65ba437bda/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a35c9beff6490bacf35d5aa12ad345e056206290", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a35c9beff6490bacf35d5aa12ad345e056206290", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a35c9beff6490bacf35d5aa12ad345e056206290"}], "stats": {"total": 46, "additions": 31, "deletions": 15}, "files": [{"sha": "da86834bde42facdaf02e737567aad2f7cbbcc63", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62732c3044c767f4efcff0cd398c9e65ba437bda/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62732c3044c767f4efcff0cd398c9e65ba437bda/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=62732c3044c767f4efcff0cd398c9e65ba437bda", "patch": "@@ -1,3 +1,19 @@\n+2012-07-25  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* trans-types.c (gfc_real16_is_float128): Fix spelling\n+\tin a comment.\n+\t* trans.h (struct gfc_array_info): Ditto.\n+\t* gfortran.h (gfc_expr): Ditto.\n+\t* simplify.c (gfc_count): Ditto.\n+\t* trans-expr.c (gfc_copy_class_to_class,\n+\tconv_parent_component_references,\n+\tgfc_trans_pointer_assignment): Ditto.\n+\t* expr.c (check_pointer_assign): Fix diagnostic spelling.\n+\t* interface.c (compare_parameter): Ditto.\n+\t* parse.c (use_modules, parse_associate): Ditto.\n+\t* decl.c (match_char_length): Fix spelling of the\n+\tan function argument.\n+\n 2012-07-21  Tobias Burnus  <burnus@net-b.de>\n \n \t* iso-c-binding.def (C_PTRDIFF_T): New TS29113 parameter."}, {"sha": "39c0493eef5f9c734dd896d42179a32f7d8ea9fc", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62732c3044c767f4efcff0cd398c9e65ba437bda/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62732c3044c767f4efcff0cd398c9e65ba437bda/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=62732c3044c767f4efcff0cd398c9e65ba437bda", "patch": "@@ -732,7 +732,7 @@ char_len_param_value (gfc_expr **expr, bool *deferred)\n    char_len_param_value in parenthesis.  */\n \n static match\n-match_char_length (gfc_expr **expr, bool *deferred, bool obsolenscent_check)\n+match_char_length (gfc_expr **expr, bool *deferred, bool obsolescent_check)\n {\n   int length;\n   match m;\n@@ -748,7 +748,7 @@ match_char_length (gfc_expr **expr, bool *deferred, bool obsolenscent_check)\n \n   if (m == MATCH_YES)\n     {\n-      if (obsolenscent_check\n+      if (obsolescent_check\n \t  && gfc_notify_std (GFC_STD_F95_OBS,\n \t\t\t     \"Old-style character length at %C\") == FAILURE)\n \treturn MATCH_ERROR;"}, {"sha": "cb5e1c665614832c606b6d5fc6592483c7ddde91", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62732c3044c767f4efcff0cd398c9e65ba437bda/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62732c3044c767f4efcff0cd398c9e65ba437bda/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=62732c3044c767f4efcff0cd398c9e65ba437bda", "patch": "@@ -3449,7 +3449,7 @@ gfc_check_pointer_assign (gfc_expr *lvalue, gfc_expr *rvalue)\n       if (attr.elemental && !attr.intrinsic)\n \t{\n \t  gfc_error (\"Nonintrinsic elemental procedure '%s' is invalid \"\n-\t\t     \"in procedure pointer assigment at %L\",\n+\t\t     \"in procedure pointer assignment at %L\",\n \t\t     rvalue->symtree->name, &rvalue->where);\n \t  return FAILURE;\n \t}"}, {"sha": "e1f2e3c7cc694e74c3018aff430e50ef1d862bc4", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62732c3044c767f4efcff0cd398c9e65ba437bda/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62732c3044c767f4efcff0cd398c9e65ba437bda/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=62732c3044c767f4efcff0cd398c9e65ba437bda", "patch": "@@ -1710,7 +1710,7 @@ typedef struct gfc_expr\n      is not a variable.  */\n   struct gfc_expr *base_expr;\n \n-  /* is_boz is true if the integer is regarded as BOZ bitpatten and is_snan\n+  /* is_boz is true if the integer is regarded as BOZ bit pattern and is_snan\n      denotes a signalling not-a-number.  */\n   unsigned int is_boz : 1, is_snan : 1;\n "}, {"sha": "098ec3d26b5f233210d300f28cdb6a2e5d24b2f4", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62732c3044c767f4efcff0cd398c9e65ba437bda/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62732c3044c767f4efcff0cd398c9e65ba437bda/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=62732c3044c767f4efcff0cd398c9e65ba437bda", "patch": "@@ -1732,7 +1732,7 @@ compare_parameter (gfc_symbol *formal, gfc_expr *actual,\n     {\n       if (where)\n \tgfc_error (\"Actual argument to contiguous pointer dummy '%s' at %L \"\n-\t\t   \"must be simply contigous\", formal->name, &actual->where);\n+\t\t   \"must be simply contiguous\", formal->name, &actual->where);\n       return 0;\n     }\n "}, {"sha": "ecda163e6576aea7c6ec30e85cf7074e38c5249c", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62732c3044c767f4efcff0cd398c9e65ba437bda/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62732c3044c767f4efcff0cd398c9e65ba437bda/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=62732c3044c767f4efcff0cd398c9e65ba437bda", "patch": "@@ -76,7 +76,7 @@ match_word (const char *str, match (*subr) (void), locus *old_locus)\n }\n \n \n-/* Load symbols from all USE statements encounted in this scoping unit.  */\n+/* Load symbols from all USE statements encountered in this scoping unit.  */\n \n static void\n use_modules (void)\n@@ -3268,7 +3268,7 @@ parse_critical_block (void)\n \t    if (s.ext.end_do_label != NULL\n \t\t&& s.ext.end_do_label != gfc_statement_label)\n \t      gfc_error_now (\"Statement label in END CRITICAL at %C does not \"\n-\t\t\t     \"match CRITIAL label\");\n+\t\t\t     \"match CRITICAL label\");\n \n \t    if (gfc_statement_label != NULL)\n \t      {\n@@ -3393,7 +3393,7 @@ parse_associate (void)\n \t however, as it may only be set on the target during resolution.\n \t Still, sometimes it helps to have it right now -- especially\n \t for parsing component references on the associate-name\n-\t in case of assication to a derived-type.  */\n+\t in case of association to a derived-type.  */\n       sym->ts = a->target->ts;\n     }\n "}, {"sha": "c12675ee4df69ce07ec7a0be0e9b0c33fe3ce37d", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62732c3044c767f4efcff0cd398c9e65ba437bda/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62732c3044c767f4efcff0cd398c9e65ba437bda/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=62732c3044c767f4efcff0cd398c9e65ba437bda", "patch": "@@ -419,7 +419,7 @@ typedef gfc_expr* (*transformational_op)(gfc_expr*, gfc_expr*);\n /* Wrapper function, implements 'op1 += 1'. Only called if MASK\n    of COUNT intrinsic is .TRUE..\n \n-   Interface and implimentation mimics arith functions as\n+   Interface and implementation mimics arith functions as\n    gfc_add, gfc_multiply, etc.  */\n \n static gfc_expr* gfc_count (gfc_expr *op1, gfc_expr *op2)"}, {"sha": "263605aa721998a64607941568553bd733d3fc3c", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62732c3044c767f4efcff0cd398c9e65ba437bda/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62732c3044c767f4efcff0cd398c9e65ba437bda/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=62732c3044c767f4efcff0cd398c9e65ba437bda", "patch": "@@ -464,7 +464,7 @@ gfc_get_class_array_ref (tree index, tree class_decl)\n \n /* Copies one class expression to another, assuming that if either\n    'to' or 'from' are arrays they are packed.  Should 'from' be\n-   NULL_TREE, the inialization expression for 'to' is used, assuming\n+   NULL_TREE, the initialization expression for 'to' is used, assuming\n    that the _vptr is set.  */\n \n tree\n@@ -1278,7 +1278,7 @@ gfc_conv_component_ref (gfc_se * se, gfc_ref * ref)\n \n \n /* This function deals with component references to components of the\n-   parent type for derived type extensons.  */\n+   parent type for derived type extensions.  */\n static void\n conv_parent_component_references (gfc_se * se, gfc_ref * ref)\n {\n@@ -6044,7 +6044,7 @@ gfc_trans_pointer_assignment (gfc_expr * expr1, gfc_expr * expr2)\n       /* Array pointer.  Find the last reference on the LHS and if it is an\n \t array section ref, we're dealing with bounds remapping.  In this case,\n \t set it to AR_FULL so that gfc_conv_expr_descriptor does\n-\t not see it and process the bounds remapping afterwards explicitely.  */\n+\t not see it and process the bounds remapping afterwards explicitly.  */\n       for (remap = expr1->ref; remap; remap = remap->next)\n \tif (!remap->next && remap->type == REF_ARRAY\n \t    && remap->u.ar.type == AR_SECTION)"}, {"sha": "3286a5a6fd641df3985416a1d31ec338ace758d4", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62732c3044c767f4efcff0cd398c9e65ba437bda/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62732c3044c767f4efcff0cd398c9e65ba437bda/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=62732c3044c767f4efcff0cd398c9e65ba437bda", "patch": "@@ -1272,7 +1272,7 @@ gfc_is_nodesc_array (gfc_symbol * sym)\n     return 0;\n \n   /* We want a descriptor for associate-name arrays that do not have an\n-     explicitely known shape already.  */\n+     explicitly known shape already.  */\n   if (sym->assoc && sym->as->type != AS_EXPLICIT)\n     return 0;\n "}, {"sha": "29cdf089b4974cd49c4e71e3d6d9d86580ade7f8", "filename": "gcc/fortran/trans-types.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62732c3044c767f4efcff0cd398c9e65ba437bda/gcc%2Ffortran%2Ftrans-types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62732c3044c767f4efcff0cd398c9e65ba437bda/gcc%2Ffortran%2Ftrans-types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.h?ref=62732c3044c767f4efcff0cd398c9e65ba437bda", "patch": "@@ -40,7 +40,7 @@ extern GTY(()) tree complex_float128_type_node;\n    and runtime library.  */\n extern GTY(()) tree gfc_charlen_type_node;\n \n-/* The following flags give us information on the correspondance of\n+/* The following flags give us information on the correspondence of\n    real (and complex) kinds with C floating-point types long double\n    and __float128.  */\n extern bool gfc_real16_is_float128;"}, {"sha": "9818ceb1f4a013f5cef1461c95b28491aa1f1ee3", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62732c3044c767f4efcff0cd398c9e65ba437bda/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62732c3044c767f4efcff0cd398c9e65ba437bda/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=62732c3044c767f4efcff0cd398c9e65ba437bda", "patch": "@@ -109,7 +109,7 @@ typedef enum\n gfc_coarray_type;\n \n \n-/* The array-specific scalarization informations.  The array members of\n+/* The array-specific scalarization information.  The array members of\n    this struct are indexed by actual array index, and thus can be sparse.  */\n \n typedef struct gfc_array_info"}]}