{"sha": "b599bf9d6d1e180d350b71e51e08a66a1bb1546a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjU5OWJmOWQ2ZDFlMTgwZDM1MGI3MWU1MWUwOGE2NmExYmIxNTQ2YQ==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-03-19T13:58:28Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-03-21T13:49:05Z"}, "message": "c++: Reject changing active member of union during initialization [PR94066]\n\nThis patch adds a check to detect changing the active union member during\ninitialization of another member of the union in cxx_eval_store_expression.  It\nuses the CONSTRUCTOR_NO_CLEARING flag as a proxy for whether the non-empty\nCONSTRUCTOR of UNION_TYPE we're assigning to is in the process of being\ninitialized.\n\nThis patch additionally fixes an issue in reduced_constant_expression_p where we\nwere returning false for an uninitialized union with no active member.  This\nlets us correctly reject the uninitialized use in the testcase\ntestconstexpr-union4.C that we weren't before.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/94066\n\t* constexpr.c (reduced_constant_expression_p) [CONSTRUCTOR]: Properly\n\thandle unions without an initializer.\n\t(cxx_eval_component_reference): Emit a different diagnostic when the\n\tconstructor element corresponding to a union member is NULL.\n\t(cxx_eval_bare_aggregate): When constructing a union, always set the\n\tactive union member before evaluating the initializer.  Relax assertion\n\tthat verifies the index of the constructor element we're initializing\n\thasn't been changed.\n\t(cxx_eval_store_expression): Diagnose changing the active union member\n\twhile the union is in the process of being initialized.  After setting\n\tan active union member, clear CONSTRUCTOR_NO_CLEARING on the underlying\n\tCONSTRUCTOR.\n\t(cxx_eval_constant_expression) [PLACEHOLDER_EXPR]: Don't re-reduce a\n\tCONSTRUCTOR returned by lookup_placeholder.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/94066\n\t* g++.dg/cpp1y/constexpr-union2.C: New test.\n\t* g++.dg/cpp1y/constexpr-union3.C: New test.\n\t* g++.dg/cpp1y/constexpr-union4.C: New test.\n\t* g++.dg/cpp1y/constexpr-union5.C: New test.\n\t* g++.dg/cpp1y/pr94066.C: New test.\n\t* g++.dg/cpp1y/pr94066-2.C: New test.\n\t* g++.dg/cpp1y/pr94066-3.C: New test.\n\t* g++.dg/cpp2a/constexpr-union1.C: New test.", "tree": {"sha": "321079315130779d91bf88f1ee540ee8eab081dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/321079315130779d91bf88f1ee540ee8eab081dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b599bf9d6d1e180d350b71e51e08a66a1bb1546a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b599bf9d6d1e180d350b71e51e08a66a1bb1546a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b599bf9d6d1e180d350b71e51e08a66a1bb1546a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b599bf9d6d1e180d350b71e51e08a66a1bb1546a/comments", "author": null, "committer": null, "parents": [{"sha": "497498c878d48754318e486428e2aa30854020b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/497498c878d48754318e486428e2aa30854020b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/497498c878d48754318e486428e2aa30854020b9"}], "stats": {"total": 212, "additions": 203, "deletions": 9}, "files": [{"sha": "0038704dad06bd41d6648809788d2942e9f53f9e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b599bf9d6d1e180d350b71e51e08a66a1bb1546a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b599bf9d6d1e180d350b71e51e08a66a1bb1546a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b599bf9d6d1e180d350b71e51e08a66a1bb1546a", "patch": "@@ -1,3 +1,21 @@\n+2020-03-21  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/94066\n+\t* constexpr.c (reduced_constant_expression_p) [CONSTRUCTOR]: Properly\n+\thandle unions without an initializer.\n+\t(cxx_eval_component_reference): Emit a different diagnostic when the\n+\tconstructor element corresponding to a union member is NULL.\n+\t(cxx_eval_bare_aggregate): When constructing a union, always set the\n+\tactive union member before evaluating the initializer.  Relax assertion\n+\tthat verifies the index of the constructor element we're initializing\n+\thasn't been changed.\n+\t(cxx_eval_store_expression): Diagnose changing the active union member\n+\twhile the union is in the process of being initialized.  After setting\n+\tan active union member, clear CONSTRUCTOR_NO_CLEARING on the underlying\n+\tCONSTRUCTOR.\n+\t(cxx_eval_constant_expression) [PLACEHOLDER_EXPR]: Don't re-reduce a\n+\tCONSTRUCTOR returned by lookup_placeholder.\n+\n 2020-03-20  Patrick Palka  <ppalka@redhat.com>\n \n \t* cxx-pretty-print.c (pp_cxx_parameter_mapping): Make extern.  Move"}, {"sha": "2f9377229efe2ef845e2779e5b956fa512e6873d", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 60, "deletions": 9, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b599bf9d6d1e180d350b71e51e08a66a1bb1546a/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b599bf9d6d1e180d350b71e51e08a66a1bb1546a/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=b599bf9d6d1e180d350b71e51e08a66a1bb1546a", "patch": "@@ -2591,10 +2591,17 @@ reduced_constant_expression_p (tree t)\n \t    return false;\n \t  else if (cxx_dialect >= cxx2a\n \t\t   /* An ARRAY_TYPE doesn't have any TYPE_FIELDS.  */\n-\t\t   && (TREE_CODE (TREE_TYPE (t)) == ARRAY_TYPE\n-\t\t       /* A union only initializes one member.  */\n-\t\t       || TREE_CODE (TREE_TYPE (t)) == UNION_TYPE))\n+\t\t   && TREE_CODE (TREE_TYPE (t)) == ARRAY_TYPE)\n \t    field = NULL_TREE;\n+\t  else if (cxx_dialect >= cxx2a\n+\t\t   && TREE_CODE (TREE_TYPE (t)) == UNION_TYPE)\n+\t    {\n+\t      if (CONSTRUCTOR_NELTS (t) == 0)\n+\t\t/* An initialized union has a constructor element.  */\n+\t\treturn false;\n+\t      /* And it only initializes one member.  */\n+\t      field = NULL_TREE;\n+\t    }\n \t  else\n \t    field = next_initializable_field (TYPE_FIELDS (TREE_TYPE (t)));\n \t}\n@@ -3446,8 +3453,14 @@ cxx_eval_component_reference (const constexpr_ctx *ctx, tree t,\n     {\n       /* DR 1188 says we don't have to deal with this.  */\n       if (!ctx->quiet)\n-\terror (\"accessing %qD member instead of initialized %qD member in \"\n-\t       \"constant expression\", part, CONSTRUCTOR_ELT (whole, 0)->index);\n+\t{\n+\t  constructor_elt *cep = CONSTRUCTOR_ELT (whole, 0);\n+\t  if (cep->value == NULL_TREE)\n+\t    error (\"accessing uninitialized member %qD\", part);\n+\t  else\n+\t    error (\"accessing %qD member instead of initialized %qD member in \"\n+\t\t   \"constant expression\", part, cep->index);\n+\t}\n       *non_constant_p = true;\n       return t;\n     }\n@@ -3751,6 +3764,11 @@ cxx_eval_bare_aggregate (const constexpr_ctx *ctx, tree t,\n \t/* If we built a new CONSTRUCTOR, attach it now so that other\n \t   initializers can refer to it.  */\n \tCONSTRUCTOR_APPEND_ELT (*p, index, new_ctx.ctor);\n+      else if (TREE_CODE (type) == UNION_TYPE)\n+\t/* Otherwise if we're constructing a union, set the active union member\n+\t   anyway so that we can later detect if the initializer attempts to\n+\t   activate another member.  */\n+\tCONSTRUCTOR_APPEND_ELT (*p, index, NULL_TREE);\n       tree elt = cxx_eval_constant_expression (&new_ctx, value,\n \t\t\t\t\t       lval,\n \t\t\t\t\t       non_constant_p, overflow_p);\n@@ -3784,7 +3802,13 @@ cxx_eval_bare_aggregate (const constexpr_ctx *ctx, tree t,\n \t}\n       else\n \t{\n-\t  if (new_ctx.ctor != ctx->ctor)\n+\t  if (TREE_CODE (type) == UNION_TYPE\n+\t      && (*p)->last().index != index)\n+\t    /* The initializer may have erroneously changed the active union\n+\t       member that we're initializing.  */\n+\t    gcc_assert (*non_constant_p);\n+\t  else if (new_ctx.ctor != ctx->ctor\n+\t\t   || TREE_CODE (type) == UNION_TYPE)\n \t    {\n \t      /* We appended this element above; update the value.  */\n \t      gcc_assert ((*p)->last().index == index);\n@@ -4567,6 +4591,7 @@ cxx_eval_store_expression (const constexpr_ctx *ctx, tree t,\n   bool no_zero_init = true;\n \n   releasing_vec ctors;\n+  bool changed_active_union_member_p = false;\n   while (!refs->is_empty ())\n     {\n       if (*valp == NULL_TREE)\n@@ -4647,6 +4672,19 @@ cxx_eval_store_expression (const constexpr_ctx *ctx, tree t,\n \t\t\t      index);\n \t\t  *non_constant_p = true;\n \t\t}\n+\t      else if (TREE_CODE (t) == MODIFY_EXPR\n+\t\t       && CONSTRUCTOR_NO_CLEARING (*valp))\n+\t\t{\n+\t\t  /* Diagnose changing the active union member while the union\n+\t\t     is in the process of being initialized.  */\n+\t\t  if (!ctx->quiet)\n+\t\t    error_at (cp_expr_loc_or_input_loc (t),\n+\t\t\t      \"change of the active member of a union \"\n+\t\t\t      \"from %qD to %qD during initialization\",\n+\t\t\t      CONSTRUCTOR_ELT (*valp, 0)->index,\n+\t\t\t      index);\n+\t\t  *non_constant_p = true;\n+\t\t}\n \t      /* Changing active member.  */\n \t      vec_safe_truncate (CONSTRUCTOR_ELTS (*valp), 0);\n \t      no_zero_init = true;\n@@ -4675,6 +4713,10 @@ cxx_eval_store_expression (const constexpr_ctx *ctx, tree t,\n \n \t    vec_safe_insert (CONSTRUCTOR_ELTS (*valp), idx, ce);\n \t    cep = CONSTRUCTOR_ELT (*valp, idx);\n+\n+\t    if (code == UNION_TYPE)\n+\t      /* Record that we've changed an active union member.  */\n+\t      changed_active_union_member_p = true;\n \t  }\n \tfound:;\n \t}\n@@ -4805,13 +4847,17 @@ cxx_eval_store_expression (const constexpr_ctx *ctx, tree t,\n   unsigned i;\n   bool c = TREE_CONSTANT (init);\n   bool s = TREE_SIDE_EFFECTS (init);\n-  if (!c || s)\n+  if (!c || s || changed_active_union_member_p)\n     FOR_EACH_VEC_ELT (*ctors, i, elt)\n       {\n \tif (!c)\n \t  TREE_CONSTANT (elt) = false;\n \tif (s)\n \t  TREE_SIDE_EFFECTS (elt) = true;\n+\t/* Clear CONSTRUCTOR_NO_CLEARING since we've activated a member of\n+\t   this union.  */\n+\tif (TREE_CODE (TREE_TYPE (elt)) == UNION_TYPE)\n+\t  CONSTRUCTOR_NO_CLEARING (elt) = false;\n       }\n \n   if (*non_constant_p)\n@@ -6133,8 +6179,13 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n     case PLACEHOLDER_EXPR:\n       /* Use of the value or address of the current object.  */\n       if (tree ctor = lookup_placeholder (ctx, lval, TREE_TYPE (t)))\n-\treturn cxx_eval_constant_expression (ctx, ctor, lval,\n-\t\t\t\t\t     non_constant_p, overflow_p);\n+\t{\n+\t  if (TREE_CODE (ctor) == CONSTRUCTOR)\n+\t    return ctor;\n+\t  else\n+\t    return cxx_eval_constant_expression (ctx, ctor, lval,\n+\t\t\t\t\t\t non_constant_p, overflow_p);\n+\t}\n       /* A placeholder without a referent.  We can get here when\n \t checking whether NSDMIs are noexcept, or in massage_init_elt;\n \t just say it's non-constant for now.  */"}, {"sha": "3ff8b6936448d29e9b8053dcf7ba998ab2f57d6f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b599bf9d6d1e180d350b71e51e08a66a1bb1546a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b599bf9d6d1e180d350b71e51e08a66a1bb1546a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b599bf9d6d1e180d350b71e51e08a66a1bb1546a", "patch": "@@ -1,3 +1,15 @@\n+2020-03-21  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/94066\n+\t* g++.dg/cpp1y/constexpr-union2.C: New test.\n+\t* g++.dg/cpp1y/constexpr-union3.C: New test.\n+\t* g++.dg/cpp1y/constexpr-union4.C: New test.\n+\t* g++.dg/cpp1y/constexpr-union5.C: New test.\n+\t* g++.dg/cpp1y/pr94066.C: New test.\n+\t* g++.dg/cpp1y/pr94066-2.C: New test.\n+\t* g++.dg/cpp1y/pr94066-3.C: New test.\n+\t* g++.dg/cpp2a/constexpr-union1.C: New test.\n+\n 2020-03-21  Tamar Christina  <tamar.christina@arm.com>\n \n \tPR target/94052"}, {"sha": "7a6a818742b27db1cdaec31d3b3a4f1a077d66b4", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-union2.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b599bf9d6d1e180d350b71e51e08a66a1bb1546a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-union2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b599bf9d6d1e180d350b71e51e08a66a1bb1546a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-union2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-union2.C?ref=b599bf9d6d1e180d350b71e51e08a66a1bb1546a", "patch": "@@ -0,0 +1,9 @@\n+// { dg-do compile { target c++14 } }\n+\n+union U\n+{\n+  char *x = &y;\n+  char y;\n+};\n+\n+constexpr U u = {};"}, {"sha": "5cf62e46cb5517ec7a2d08d878cc0a435401949e", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-union3.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b599bf9d6d1e180d350b71e51e08a66a1bb1546a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-union3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b599bf9d6d1e180d350b71e51e08a66a1bb1546a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-union3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-union3.C?ref=b599bf9d6d1e180d350b71e51e08a66a1bb1546a", "patch": "@@ -0,0 +1,9 @@\n+// { dg-do compile { target c++14 } }\n+\n+union U\n+{\n+  int x = (x = x + 1);\n+  char y;\n+};\n+\n+constexpr U u = {}; // { dg-error \"accessing uninitialized member\" }"}, {"sha": "3e44a1378f362829d0b91757ae02a892bbf4b8d8", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-union4.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b599bf9d6d1e180d350b71e51e08a66a1bb1546a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-union4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b599bf9d6d1e180d350b71e51e08a66a1bb1546a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-union4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-union4.C?ref=b599bf9d6d1e180d350b71e51e08a66a1bb1546a", "patch": "@@ -0,0 +1,9 @@\n+// { dg-do compile { target c++14 } }\n+\n+union U\n+{\n+  int x = y;\n+  char y;\n+};\n+\n+constexpr U u = {}; // { dg-error \"accessing uninitialized member\" }"}, {"sha": "55fe9fa2f0bfd75e9b45dddf716c1a072cbc7d29", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-union5.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b599bf9d6d1e180d350b71e51e08a66a1bb1546a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-union5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b599bf9d6d1e180d350b71e51e08a66a1bb1546a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-union5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-union5.C?ref=b599bf9d6d1e180d350b71e51e08a66a1bb1546a", "patch": "@@ -0,0 +1,15 @@\n+// { dg-do compile { target c++14 } }\n+\n+union U;\n+constexpr int foo(U *up);\n+\n+union U {\n+  int a = foo(this); int y;\n+};\n+\n+constexpr int foo(U *up) {\n+  up->a++;\n+  return {42};\n+}\n+\n+extern constexpr U u = {}; // { dg-error \"accessing uninitialized member\" }"}, {"sha": "1c00b650961ac214275a57e3045cfc0b47b46cfb", "filename": "gcc/testsuite/g++.dg/cpp1y/pr94066-2.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b599bf9d6d1e180d350b71e51e08a66a1bb1546a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr94066-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b599bf9d6d1e180d350b71e51e08a66a1bb1546a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr94066-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr94066-2.C?ref=b599bf9d6d1e180d350b71e51e08a66a1bb1546a", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/94066\n+// { dg-do compile { target c++14 } }\n+\n+struct A { long x; };\n+\n+union U;\n+constexpr A foo(U *up);\n+\n+union U {\n+  U() = default;\n+  A a = foo(this); int y;\n+};\n+\n+constexpr A foo(U *up) {\n+  up->y = 11;  // { dg-error \"'U::a' to 'U::y'\" }\n+  return {42};\n+}\n+\n+extern constexpr U u = {};"}, {"sha": "175018acf86bfe1008838df7fa2d3e43b2ff73bf", "filename": "gcc/testsuite/g++.dg/cpp1y/pr94066-3.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b599bf9d6d1e180d350b71e51e08a66a1bb1546a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr94066-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b599bf9d6d1e180d350b71e51e08a66a1bb1546a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr94066-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr94066-3.C?ref=b599bf9d6d1e180d350b71e51e08a66a1bb1546a", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/94066\n+// { dg-do compile { target c++14 } }\n+\n+union U;\n+constexpr int foo(U *up);\n+\n+union U {\n+  int a = foo(this); int y;\n+};\n+\n+constexpr int foo(U *up) {\n+  up->y = 11; // { dg-error \"'U::a' to 'U::y'\" }\n+  return {42};\n+}\n+\n+extern constexpr U u = {};"}, {"sha": "6725c8c737f6cb41606f87c3b405a465d040c247", "filename": "gcc/testsuite/g++.dg/cpp1y/pr94066.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b599bf9d6d1e180d350b71e51e08a66a1bb1546a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr94066.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b599bf9d6d1e180d350b71e51e08a66a1bb1546a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr94066.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr94066.C?ref=b599bf9d6d1e180d350b71e51e08a66a1bb1546a", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/94066\n+// { dg-do compile { target c++14 } }\n+\n+struct A { long x; };\n+\n+union U;\n+constexpr A foo(U *up);\n+\n+union U {\n+  A a = foo(this); int y;\n+};\n+\n+constexpr A foo(U *up) {\n+  up->y = 11;  // { dg-error \"'U::a' to 'U::y'\" }\n+  return {42};\n+}\n+\n+extern constexpr U u = {};"}, {"sha": "c38167ad798d7329b6872bab19e418b38549e8e7", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-union1.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b599bf9d6d1e180d350b71e51e08a66a1bb1546a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-union1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b599bf9d6d1e180d350b71e51e08a66a1bb1546a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-union1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-union1.C?ref=b599bf9d6d1e180d350b71e51e08a66a1bb1546a", "patch": "@@ -0,0 +1,18 @@\n+// { dg-do compile { target c++2a } }\n+\n+union U\n+{\n+  int x;\n+  char y;\n+};\n+\n+constexpr bool\n+baz ()\n+{\n+  U u;\n+  u.x = 3;\n+  u.y = 7;\n+  return (u.y == 7);\n+}\n+\n+static_assert (baz ());"}]}