{"sha": "23c3a0590839e94c94890bb11c2e2e96c1b27f1d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjNjM2EwNTkwODM5ZTk0Yzk0ODkwYmIxMWMyZTJlOTZjMWIyN2YxZA==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2018-02-27T11:33:30Z"}, "committer": {"name": "Ville Voutilainen", "email": "ville@gcc.gnu.org", "date": "2018-02-27T11:33:30Z"}, "message": "Implement the missing bits of LWG 2769\n\n* include/std/any (any_cast(const any&)): Add static_assert.\n(any_cast(any&)): Likewise.\n(any_cast(any&&)): Likewise, and remove the handling\nfor copyable-but-not-movable type.\n* testsuite/20_util/any/misc/any_cast.cc: Adjust.\n* testsuite/20_util/any/misc/any_cast_neg.cc: Likewise, and\nadd new tests.\n\nFrom-SVN: r258031", "tree": {"sha": "67088f0548a23a8f21daff7a8ecc049ea30f0bec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67088f0548a23a8f21daff7a8ecc049ea30f0bec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23c3a0590839e94c94890bb11c2e2e96c1b27f1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23c3a0590839e94c94890bb11c2e2e96c1b27f1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23c3a0590839e94c94890bb11c2e2e96c1b27f1d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23c3a0590839e94c94890bb11c2e2e96c1b27f1d/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2be4b342e00df3968d9b069349bd4cf540ea1f56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2be4b342e00df3968d9b069349bd4cf540ea1f56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2be4b342e00df3968d9b069349bd4cf540ea1f56"}], "stats": {"total": 79, "additions": 43, "deletions": 36}, "files": [{"sha": "05deec4f98e5b39a0c826a374e8b3a5aa513187d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c3a0590839e94c94890bb11c2e2e96c1b27f1d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c3a0590839e94c94890bb11c2e2e96c1b27f1d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=23c3a0590839e94c94890bb11c2e2e96c1b27f1d", "patch": "@@ -1,3 +1,14 @@\n+2018-02-27  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tImplement the missing bits of LWG 2769\n+\t* include/std/any (any_cast(const any&)): Add static_assert.\n+\t(any_cast(any&)): Likewise.\n+\t(any_cast(any&&)): Likewise, and remove the handling\n+\tfor copyable-but-not-movable type.\n+\t* testsuite/20_util/any/misc/any_cast.cc: Adjust.\n+\t* testsuite/20_util/any/misc/any_cast_neg.cc: Likewise, and\n+\tadd new tests.\n+\n 2018-02-23  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/84532"}, {"sha": "a37eb38d665ddd7463fd50fb3ee47af2336e151f", "filename": "libstdc++-v3/include/std/any", "status": "modified", "additions": 13, "deletions": 23, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c3a0590839e94c94890bb11c2e2e96c1b27f1d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fany", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c3a0590839e94c94890bb11c2e2e96c1b27f1d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fany", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fany?ref=23c3a0590839e94c94890bb11c2e2e96c1b27f1d", "patch": "@@ -438,8 +438,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return any(in_place_type<_Tp>, __il, std::forward<_Args>(__args)...);\n     }\n \n-  template <typename _Tp>\n-    using _AnyCast = remove_cv_t<remove_reference_t<_Tp>>;\n   /**\n    * @brief Access the contained object.\n    *\n@@ -453,9 +451,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _ValueType>\n     inline _ValueType any_cast(const any& __any)\n     {\n+      using _Up = remove_cv_t<remove_reference_t<_ValueType>>;\n       static_assert(any::__is_valid_cast<_ValueType>(),\n \t  \"Template argument must be a reference or CopyConstructible type\");\n-      auto __p = any_cast<_AnyCast<_ValueType>>(&__any);\n+      static_assert(is_constructible_v<_ValueType, const _Up&>,\n+\t  \"Template argument must be constructible from a const value.\");\n+      auto __p = any_cast<_Up>(&__any);\n       if (__p)\n \treturn static_cast<_ValueType>(*__p);\n       __throw_bad_any_cast();\n@@ -476,37 +477,26 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _ValueType>\n     inline _ValueType any_cast(any& __any)\n     {\n+      using _Up = remove_cv_t<remove_reference_t<_ValueType>>;\n       static_assert(any::__is_valid_cast<_ValueType>(),\n \t  \"Template argument must be a reference or CopyConstructible type\");\n-      auto __p = any_cast<_AnyCast<_ValueType>>(&__any);\n+      static_assert(is_constructible_v<_ValueType, _Up&>,\n+\t  \"Template argument must be constructible from an lvalue.\");\n+      auto __p = any_cast<_Up>(&__any);\n       if (__p)\n \treturn static_cast<_ValueType>(*__p);\n       __throw_bad_any_cast();\n     }\n \n-  template<typename _ValueType,\n-           typename enable_if<!is_move_constructible<_ValueType>::value\n-                              || is_lvalue_reference<_ValueType>::value,\n-                              bool>::type = true>\n-    inline _ValueType any_cast(any&& __any)\n-    {\n-      static_assert(any::__is_valid_cast<_ValueType>(),\n-\t  \"Template argument must be a reference or CopyConstructible type\");\n-      auto __p = any_cast<_AnyCast<_ValueType>>(&__any);\n-      if (__p)\n-\treturn static_cast<_ValueType>(*__p);\n-      __throw_bad_any_cast();\n-    }\n-\n-  template<typename _ValueType,\n-           typename enable_if<is_move_constructible<_ValueType>::value\n-                              && !is_lvalue_reference<_ValueType>::value,\n-                              bool>::type = false>\n+  template<typename _ValueType>\n     inline _ValueType any_cast(any&& __any)\n     {\n+      using _Up = remove_cv_t<remove_reference_t<_ValueType>>;\n       static_assert(any::__is_valid_cast<_ValueType>(),\n \t  \"Template argument must be a reference or CopyConstructible type\");\n-      auto __p = any_cast<_AnyCast<_ValueType>>(&__any);\n+      static_assert(is_constructible_v<_ValueType, _Up>,\n+\t  \"Template argument must be constructible from an rvalue.\");\n+      auto __p = any_cast<_Up>(&__any);\n       if (__p)\n \treturn static_cast<_ValueType>(std::move(*__p));\n       __throw_bad_any_cast();"}, {"sha": "37a24d7653a9790480492b01c4d2e299191e225c", "filename": "libstdc++-v3/testsuite/20_util/any/misc/any_cast.cc", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c3a0590839e94c94890bb11c2e2e96c1b27f1d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmisc%2Fany_cast.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c3a0590839e94c94890bb11c2e2e96c1b27f1d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmisc%2Fany_cast.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmisc%2Fany_cast.cc?ref=23c3a0590839e94c94890bb11c2e2e96c1b27f1d", "patch": "@@ -95,15 +95,6 @@ void test03()\n   VERIFY(move_count == 1);\n   MoveEnabled&& m3 = any_cast<MoveEnabled&&>(any(m));\n   VERIFY(move_count == 1);\n-  struct MoveDeleted\n-  {\n-    MoveDeleted(MoveDeleted&&) = delete;\n-    MoveDeleted() = default;\n-    MoveDeleted(const MoveDeleted&) = default;\n-  };\n-  MoveDeleted md;\n-  MoveDeleted&& md2 = any_cast<MoveDeleted>(any(std::move(md)));\n-  MoveDeleted&& md3 = any_cast<MoveDeleted&&>(any(std::move(md)));\n }\n \n void test04()"}, {"sha": "62d7aaa8ca59cc6344623cd2e36c042a9442e3fb", "filename": "libstdc++-v3/testsuite/20_util/any/misc/any_cast_neg.cc", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c3a0590839e94c94890bb11c2e2e96c1b27f1d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmisc%2Fany_cast_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c3a0590839e94c94890bb11c2e2e96c1b27f1d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmisc%2Fany_cast_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmisc%2Fany_cast_neg.cc?ref=23c3a0590839e94c94890bb11c2e2e96c1b27f1d", "patch": "@@ -20,11 +20,26 @@\n \n #include <any>\n \n+using std::any;\n+using std::any_cast;\n+\n void test01()\n {\n-  using std::any;\n-  using std::any_cast;\n-\n   const any y(1);\n-  any_cast<int&>(y); // { dg-error \"invalid static_cast\" \"\" { target { *-*-* } } 460 }\n+  any_cast<int&>(y); // { dg-error \"invalid static_cast\" \"\" { target { *-*-* } } 461 }\n+  // { dg-error \"Template argument must be constructible from a const value\" \"\" { target { *-*-* } } 457 }\n+}\n+\n+void test02()\n+{\n+  any y(1);\n+  any_cast<int&&>(y);\n+  // { dg-error \"Template argument must be constructible from an lvalue\" \"\" { target { *-*-* } } 483 }\n+}\n+\n+void test03()\n+{\n+  any y(1);\n+  any_cast<int&>(std::move(y));  // { dg-error \"invalid static_cast\" \"\" { target { *-*-* } } 501 }\n+  // { dg-error \"Template argument must be constructible from an rvalue\" \"\" { target { *-*-* } } 497 }\n }"}]}