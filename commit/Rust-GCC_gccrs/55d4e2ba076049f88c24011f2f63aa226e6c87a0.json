{"sha": "55d4e2ba076049f88c24011f2f63aa226e6c87a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTVkNGUyYmEwNzYwNDlmODhjMjQwMTFmMmY2M2FhMjI2ZTZjODdhMA==", "commit": {"author": {"name": "Dmitriy Anisimkov", "email": "anisimko@adacore.com", "date": "2019-07-08T08:14:59Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-07-08T08:14:59Z"}, "message": "[Ada] GNAT.Serial_Communications: simplify the Serial_Port structure\n\n2019-07-08  Dmitriy Anisimkov  <anisimko@adacore.com>\n\ngcc/ada/\n\n\t* libgnat/g-sercom.ads\n\t(Serial_Port_Descriptor): New type.\n\t(Serial_Port): Add a comment, make it hold a\n\tSerial_Port_Descriptor.\n\t(To_Ada, To_C): New procedures.\n\t(Port_Data, Port_Data_Access): Remove types.\n\t* libgnat/g-sercom.adb (To_Ada): New stub.\n\t* libgnat/g-sercom__linux.adb, libgnat/g-sercom__mingw.adb:\n\tUpdate implementations accordingly.\n\t* s-oscons-tmplt.c: Bind Serial_Port_Descriptor to\n\tSystem.Win32.HANDLE on Windows, and to Interfaces.C.int on\n\tLinux. Add \"Interfaces.C.\" prefix for other basic integer type\n\tbindings.\n\t* xoscons.adb (Output_Info): Remove the \"Interfaces.C.\" prefix\n\tfor subtypes generation.\n\nFrom-SVN: r273225", "tree": {"sha": "0ed5dc35f9377fb40de37a2f33036fd11b808648", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ed5dc35f9377fb40de37a2f33036fd11b808648"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55d4e2ba076049f88c24011f2f63aa226e6c87a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55d4e2ba076049f88c24011f2f63aa226e6c87a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55d4e2ba076049f88c24011f2f63aa226e6c87a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55d4e2ba076049f88c24011f2f63aa226e6c87a0/comments", "author": {"login": "anisimkov", "id": 15864134, "node_id": "MDQ6VXNlcjE1ODY0MTM0", "avatar_url": "https://avatars.githubusercontent.com/u/15864134?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anisimkov", "html_url": "https://github.com/anisimkov", "followers_url": "https://api.github.com/users/anisimkov/followers", "following_url": "https://api.github.com/users/anisimkov/following{/other_user}", "gists_url": "https://api.github.com/users/anisimkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/anisimkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anisimkov/subscriptions", "organizations_url": "https://api.github.com/users/anisimkov/orgs", "repos_url": "https://api.github.com/users/anisimkov/repos", "events_url": "https://api.github.com/users/anisimkov/events{/privacy}", "received_events_url": "https://api.github.com/users/anisimkov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aec80f204f01c8c8ccd78a6cc4cfa07ba99ecb9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aec80f204f01c8c8ccd78a6cc4cfa07ba99ecb9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aec80f204f01c8c8ccd78a6cc4cfa07ba99ecb9f"}], "stats": {"total": 184, "additions": 114, "deletions": 70}, "files": [{"sha": "7df6448096bae2a7c43f495d2182c351cae182be", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55d4e2ba076049f88c24011f2f63aa226e6c87a0/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55d4e2ba076049f88c24011f2f63aa226e6c87a0/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=55d4e2ba076049f88c24011f2f63aa226e6c87a0", "patch": "@@ -1,3 +1,21 @@\n+2019-07-08  Dmitriy Anisimkov  <anisimko@adacore.com>\n+\n+\t* libgnat/g-sercom.ads\n+\t(Serial_Port_Descriptor): New type.\n+\t(Serial_Port): Add a comment, make it hold a\n+\tSerial_Port_Descriptor.\n+\t(To_Ada, To_C): New procedures.\n+\t(Port_Data, Port_Data_Access): Remove types.\n+\t* libgnat/g-sercom.adb (To_Ada): New stub.\n+\t* libgnat/g-sercom__linux.adb, libgnat/g-sercom__mingw.adb:\n+\tUpdate implementations accordingly.\n+\t* s-oscons-tmplt.c: Bind Serial_Port_Descriptor to\n+\tSystem.Win32.HANDLE on Windows, and to Interfaces.C.int on\n+\tLinux. Add \"Interfaces.C.\" prefix for other basic integer type\n+\tbindings.\n+\t* xoscons.adb (Output_Info): Remove the \"Interfaces.C.\" prefix\n+\tfor subtypes generation.\n+\n 2019-07-08  Arnaud Charlet  <charlet@adacore.com>\n \n \t* doc/gnat_rm/standard_and_implementation_defined_restrictions.rst:"}, {"sha": "ccf5239d4c84b372090120b60f148a724b690a0d", "filename": "gcc/ada/libgnat/g-sercom.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55d4e2ba076049f88c24011f2f63aa226e6c87a0/gcc%2Fada%2Flibgnat%2Fg-sercom.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55d4e2ba076049f88c24011f2f63aa226e6c87a0/gcc%2Fada%2Flibgnat%2Fg-sercom.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fg-sercom.adb?ref=55d4e2ba076049f88c24011f2f63aa226e6c87a0", "patch": "@@ -103,6 +103,15 @@ package body GNAT.Serial_Communications is\n       Unimplemented;\n    end Read;\n \n+   ------------\n+   -- To_Ada --\n+   ------------\n+\n+   procedure To_Ada (Port : out Serial_Port; Fd : Serial_Port_Descriptor) is\n+   begin\n+      Unimplemented;\n+   end To_Ada;\n+\n    -----------\n    -- Write --\n    -----------"}, {"sha": "52447db1fb58b3bc44c9a4221d7393fbab8e261c", "filename": "gcc/ada/libgnat/g-sercom.ads", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55d4e2ba076049f88c24011f2f63aa226e6c87a0/gcc%2Fada%2Flibgnat%2Fg-sercom.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55d4e2ba076049f88c24011f2f63aa226e6c87a0/gcc%2Fada%2Flibgnat%2Fg-sercom.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fg-sercom.ads?ref=55d4e2ba076049f88c24011f2f63aa226e6c87a0", "patch": "@@ -33,6 +33,7 @@\n \n with Ada.Streams;\n with Interfaces.C;\n+with System.OS_Constants;\n \n package GNAT.Serial_Communications is\n \n@@ -122,6 +123,11 @@ package GNAT.Serial_Communications is\n    --  No flow control, hardware flow control, software flow control\n \n    type Serial_Port is new Ada.Streams.Root_Stream_Type with private;\n+   --  Serial port stream type\n+\n+   type Serial_Port_Descriptor is\n+     new System.OS_Constants.Serial_Port_Descriptor;\n+   --  OS specific serial port descriptor\n \n    procedure Open\n      (Port : out Serial_Port;\n@@ -168,13 +174,21 @@ package GNAT.Serial_Communications is\n    procedure Close (Port : in out Serial_Port);\n    --  Close port\n \n-private\n+   procedure To_Ada (Port : out Serial_Port; Fd : Serial_Port_Descriptor)\n+     with Inline;\n+   --  Convert a serial port descriptor to Serial_Port. This is useful when a\n+   --  serial port descriptor is obtained from an external library call.\n \n-   type Port_Data;\n-   type Port_Data_Access is access Port_Data;\n+   function To_C\n+     (Port : Serial_Port) return Serial_Port_Descriptor with Inline;\n+   --  Return a serial port descriptor to be used by external subprograms.\n+   --  This is useful for C functions that are not yet interfaced in this\n+   --  package.\n+\n+private\n \n    type Serial_Port is new Ada.Streams.Root_Stream_Type with record\n-      H : Port_Data_Access;\n+      H : Serial_Port_Descriptor := -1;\n    end record;\n \n    Data_Rate_Value : constant array (Data_Rate) of Interfaces.C.unsigned :=\n@@ -205,4 +219,7 @@ private\n                         B3500000 => 3_500_000,\n                         B4000000 => 4_000_000);\n \n+   function To_C (Port : Serial_Port) return Serial_Port_Descriptor is\n+      (Port.H);\n+\n end GNAT.Serial_Communications;"}, {"sha": "87143e23531285c929a744c94ff7f0573998a1a7", "filename": "gcc/ada/libgnat/g-sercom__linux.adb", "status": "modified", "additions": 23, "deletions": 26, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55d4e2ba076049f88c24011f2f63aa226e6c87a0/gcc%2Fada%2Flibgnat%2Fg-sercom__linux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55d4e2ba076049f88c24011f2f63aa226e6c87a0/gcc%2Fada%2Flibgnat%2Fg-sercom__linux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fg-sercom__linux.adb?ref=55d4e2ba076049f88c24011f2f63aa226e6c87a0", "patch": "@@ -33,12 +33,10 @@\n \n with Ada.Streams;                use Ada.Streams;\n with Ada;                        use Ada;\n-with Ada.Unchecked_Deallocation;\n \n with System;               use System;\n with System.Communication; use System.Communication;\n with System.CRTL;          use System.CRTL;\n-with System.OS_Constants;\n \n with GNAT.OS_Lib; use GNAT.OS_Lib;\n \n@@ -48,8 +46,6 @@ package body GNAT.Serial_Communications is\n \n    use type Interfaces.C.unsigned;\n \n-   type Port_Data is new int;\n-\n    subtype unsigned is Interfaces.C.unsigned;\n    subtype char is Interfaces.C.char;\n    subtype unsigned_char is Interfaces.C.unsigned_char;\n@@ -124,20 +120,16 @@ package body GNAT.Serial_Communications is\n       Res    : int;\n \n    begin\n-      if Port.H = null then\n-         Port.H := new Port_Data;\n-      end if;\n-\n-      Port.H.all := Port_Data (open\n+      Port.H := Serial_Port_Descriptor (open\n          (C_Name (C_Name'First)'Address, int (O_RDWR + O_NOCTTY + O_NDELAY)));\n \n-      if Port.H.all = -1 then\n+      if Port.H = -1 then\n          Raise_Error (\"open: open failed\");\n       end if;\n \n       --  By default we are in blocking mode\n \n-      Res := fcntl (int (Port.H.all), F_SETFL, 0);\n+      Res := fcntl (int (Port.H), F_SETFL, 0);\n \n       if Res = -1 then\n          Raise_Error (\"open: fcntl failed\");\n@@ -169,11 +161,11 @@ package body GNAT.Serial_Communications is\n       Res : ssize_t;\n \n    begin\n-      if Port.H = null then\n+      if Port.H = -1 then\n          Raise_Error (\"read: port not opened\", 0);\n       end if;\n \n-      Res := read (Integer (Port.H.all), Buffer'Address, Len);\n+      Res := read (Integer (Port.H), Buffer'Address, Len);\n \n       if Res = -1 then\n          Raise_Error (\"read failed\");\n@@ -228,13 +220,13 @@ package body GNAT.Serial_Communications is\n       --  Warnings off, since we don't always test the result\n \n    begin\n-      if Port.H = null then\n+      if Port.H = -1 then\n          Raise_Error (\"set: port not opened\", 0);\n       end if;\n \n       --  Get current port settings\n \n-      Res := tcgetattr (int (Port.H.all), Current'Address);\n+      Res := tcgetattr (int (Port.H), Current'Address);\n \n       --  Change settings now\n \n@@ -269,18 +261,27 @@ package body GNAT.Serial_Communications is\n \n       --  Set port settings\n \n-      Res := tcflush (int (Port.H.all), TCIFLUSH);\n-      Res := tcsetattr (int (Port.H.all), TCSANOW, Current'Address);\n+      Res := tcflush (int (Port.H), TCIFLUSH);\n+      Res := tcsetattr (int (Port.H), TCSANOW, Current'Address);\n \n       --  Block\n \n-      Res := fcntl (int (Port.H.all), F_SETFL, (if Block then 0 else FNDELAY));\n+      Res := fcntl (int (Port.H), F_SETFL, (if Block then 0 else FNDELAY));\n \n       if Res = -1 then\n          Raise_Error (\"set: fcntl failed\");\n       end if;\n    end Set;\n \n+   ------------\n+   -- To_Ada --\n+   ------------\n+\n+   procedure To_Ada (Port : out Serial_Port; Fd : Serial_Port_Descriptor) is\n+   begin\n+      Port.H := Fd;\n+   end To_Ada;\n+\n    -----------\n    -- Write --\n    -----------\n@@ -293,11 +294,11 @@ package body GNAT.Serial_Communications is\n       Res : ssize_t;\n \n    begin\n-      if Port.H = null then\n+      if Port.H = -1 then\n          Raise_Error (\"write: port not opened\", 0);\n       end if;\n \n-      Res := write (int (Port.H.all), Buffer'Address, Len);\n+      Res := write (int (Port.H), Buffer'Address, Len);\n \n       if Res = -1 then\n          Raise_Error (\"write failed\");\n@@ -311,16 +312,12 @@ package body GNAT.Serial_Communications is\n    -----------\n \n    procedure Close (Port : in out Serial_Port) is\n-      procedure Unchecked_Free is\n-        new Unchecked_Deallocation (Port_Data, Port_Data_Access);\n-\n       Res : int;\n       pragma Unreferenced (Res);\n \n    begin\n-      if Port.H /= null then\n-         Res := close (int (Port.H.all));\n-         Unchecked_Free (Port.H);\n+      if Port.H /= -1 then\n+         Res := close (int (Port.H));\n       end if;\n    end Close;\n "}, {"sha": "c13e7b3bba8a5eb46c2ced5e753ac075f189700e", "filename": "gcc/ada/libgnat/g-sercom__mingw.adb", "status": "modified", "additions": 28, "deletions": 29, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55d4e2ba076049f88c24011f2f63aa226e6c87a0/gcc%2Fada%2Flibgnat%2Fg-sercom__mingw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55d4e2ba076049f88c24011f2f63aa226e6c87a0/gcc%2Fada%2Flibgnat%2Fg-sercom__mingw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fg-sercom__mingw.adb?ref=55d4e2ba076049f88c24011f2f63aa226e6c87a0", "patch": "@@ -31,13 +31,11 @@\n \n --  This is the Windows implementation of this package\n \n-with Ada.Streams;                use Ada.Streams;\n-with Ada.Unchecked_Deallocation; use Ada;\n+with Ada.Streams;          use Ada.Streams, Ada;\n \n with System;               use System;\n with System.Communication; use System.Communication;\n with System.CRTL;          use System.CRTL;\n-with System.OS_Constants;\n with System.Win32;         use System.Win32;\n with System.Win32.Ext;     use System.Win32.Ext;\n \n@@ -49,8 +47,6 @@ package body GNAT.Serial_Communications is\n \n    --  Common types\n \n-   type Port_Data is new HANDLE;\n-\n    C_Bits      : constant array (Data_Bits) of Interfaces.C.unsigned := (8, 7);\n    C_Parity    : constant array (Parity_Check) of Interfaces.C.unsigned :=\n                    (None => NOPARITY, Odd => ODDPARITY, Even => EVENPARITY);\n@@ -69,15 +65,11 @@ package body GNAT.Serial_Communications is\n    -----------\n \n    procedure Close (Port : in out Serial_Port) is\n-      procedure Unchecked_Free is\n-        new Unchecked_Deallocation (Port_Data, Port_Data_Access);\n-\n       Success : BOOL;\n \n    begin\n-      if Port.H /= null then\n-         Success := CloseHandle (HANDLE (Port.H.all));\n-         Unchecked_Free (Port.H);\n+      if Port.H /= -1 then\n+         Success := CloseHandle (HANDLE (Port.H));\n \n          if Success = Win32.FALSE then\n             Raise_Error (\"error closing the port\");\n@@ -114,13 +106,11 @@ package body GNAT.Serial_Communications is\n       pragma Unreferenced (Success);\n \n    begin\n-      if Port.H = null then\n-         Port.H := new Port_Data;\n-      else\n-         Success := CloseHandle (HANDLE (Port.H.all));\n+      if Port.H /= -1 then\n+         Success := CloseHandle (HANDLE (Port.H));\n       end if;\n \n-      Port.H.all := CreateFileA\n+      Port.H := CreateFileA\n         (lpFileName            => C_Name (C_Name'First)'Address,\n          dwDesiredAccess       => GENERIC_READ or GENERIC_WRITE,\n          dwShareMode           => 0,\n@@ -129,7 +119,9 @@ package body GNAT.Serial_Communications is\n          dwFlagsAndAttributes  => 0,\n          hTemplateFile         => 0);\n \n-      if Port.H.all = Port_Data (INVALID_HANDLE_VALUE) then\n+      pragma Assert (INVALID_HANDLE_VALUE = -1);\n+\n+      if Port.H = Serial_Port_Descriptor (INVALID_HANDLE_VALUE) then\n          Raise_Error (\"cannot open com port\");\n       end if;\n    end Open;\n@@ -159,13 +151,13 @@ package body GNAT.Serial_Communications is\n       Read_Last : aliased DWORD;\n \n    begin\n-      if Port.H = null then\n+      if Port.H = -1 then\n          Raise_Error (\"read: port not opened\", 0);\n       end if;\n \n       Success :=\n         ReadFile\n-          (hFile                => HANDLE (Port.H.all),\n+          (hFile                => HANDLE (Port.H),\n            lpBuffer             => Buffer (Buffer'First)'Address,\n            nNumberOfBytesToRead => DWORD (Buffer'Length),\n            lpNumberOfBytesRead  => Read_Last'Access,\n@@ -200,15 +192,14 @@ package body GNAT.Serial_Communications is\n       Com_Settings : aliased DCB;\n \n    begin\n-      if Port.H = null then\n+      if Port.H = -1 then\n          Raise_Error (\"set: port not opened\", 0);\n       end if;\n \n-      Success := GetCommState (HANDLE (Port.H.all), Com_Settings'Access);\n+      Success := GetCommState (HANDLE (Port.H), Com_Settings'Access);\n \n       if Success = Win32.FALSE then\n-         Success := CloseHandle (HANDLE (Port.H.all));\n-         Port.H.all := 0;\n+         Success := CloseHandle (HANDLE (Port.H));\n          Raise_Error (\"set: cannot get comm state\");\n       end if;\n \n@@ -240,11 +231,10 @@ package body GNAT.Serial_Communications is\n       Com_Settings.Parity        := BYTE (C_Parity (Parity));\n       Com_Settings.StopBits      := BYTE (C_Stop_Bits (Stop_Bits));\n \n-      Success := SetCommState (HANDLE (Port.H.all), Com_Settings'Access);\n+      Success := SetCommState (HANDLE (Port.H), Com_Settings'Access);\n \n       if Success = Win32.FALSE then\n-         Success := CloseHandle (HANDLE (Port.H.all));\n-         Port.H.all := 0;\n+         Success := CloseHandle (HANDLE (Port.H));\n          Raise_Error (\"cannot set comm state\");\n       end if;\n \n@@ -274,14 +264,23 @@ package body GNAT.Serial_Communications is\n \n       Success :=\n         SetCommTimeouts\n-          (hFile          => HANDLE (Port.H.all),\n+          (hFile          => HANDLE (Port.H),\n            lpCommTimeouts => Com_Time_Out'Access);\n \n       if Success = Win32.FALSE then\n          Raise_Error (\"cannot set the timeout\");\n       end if;\n    end Set;\n \n+   ------------\n+   -- To_Ada --\n+   ------------\n+\n+   procedure To_Ada (Port : out Serial_Port; Fd : Serial_Port_Descriptor) is\n+   begin\n+      Port.H := Fd;\n+   end To_Ada;\n+\n    -----------\n    -- Write --\n    -----------\n@@ -294,13 +293,13 @@ package body GNAT.Serial_Communications is\n       Temp_Last : aliased DWORD;\n \n    begin\n-      if Port.H = null then\n+      if Port.H = -1 then\n          Raise_Error (\"write: port not opened\", 0);\n       end if;\n \n       Success :=\n         WriteFile\n-          (hFile                  => HANDLE (Port.H.all),\n+          (hFile                  => HANDLE (Port.H),\n            lpBuffer               => Buffer'Address,\n            nNumberOfBytesToWrite  => DWORD (Buffer'Length),\n            lpNumberOfBytesWritten => Temp_Last'Access,"}, {"sha": "1e883b9f69c2290f446df2ac85bf23cbe565787e", "filename": "gcc/ada/s-oscons-tmplt.c", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55d4e2ba076049f88c24011f2f63aa226e6c87a0/gcc%2Fada%2Fs-oscons-tmplt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55d4e2ba076049f88c24011f2f63aa226e6c87a0/gcc%2Fada%2Fs-oscons-tmplt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-oscons-tmplt.c?ref=55d4e2ba076049f88c24011f2f63aa226e6c87a0", "patch": "@@ -261,6 +261,14 @@ main (void) {\n TXT(\"--  This is the version for \" TARGET)\n TXT(\"\")\n TXT(\"with Interfaces.C;\")\n+#if defined (__MINGW32__)\n+# define TARGET_OS \"Windows\"\n+# define Serial_Port_Descriptor \"System.Win32.HANDLE\"\n+TXT(\"with System.Win32;\")\n+#else\n+# define TARGET_OS \"Other_OS\"\n+# define Serial_Port_Descriptor \"Interfaces.C.int\"\n+#endif\n \n /*\n package System.OS_Constants is\n@@ -280,11 +288,6 @@ package System.OS_Constants is\n \n    type OS_Type is (Windows, Other_OS);\n */\n-#if defined (__MINGW32__)\n-# define TARGET_OS \"Windows\"\n-#else\n-# define TARGET_OS \"Other_OS\"\n-#endif\n C(\"Target_OS\", OS_Type, TARGET_OS, \"\")\n /*\n    pragma Warnings (Off, Target_OS);\n@@ -303,6 +306,8 @@ CST(Target_Name, \"\")\n #define SIZEOF_unsigned_int sizeof (unsigned int)\n CND(SIZEOF_unsigned_int, \"Size of unsigned int\")\n \n+SUB(Serial_Port_Descriptor)\n+\n /*\n \n    -------------------\n@@ -405,10 +410,10 @@ CND(FNDELAY, \"Nonblocking\")\n \n #if defined (__FreeBSD__) || defined (__DragonFly__)\n # define CNI CNU\n-# define IOCTL_Req_T \"unsigned\"\n+# define IOCTL_Req_T \"Interfaces.C.unsigned\"\n #else\n # define CNI CND\n-# define IOCTL_Req_T \"int\"\n+# define IOCTL_Req_T \"Interfaces.C.int\"\n #endif\n \n SUB(IOCTL_Req_T)\n@@ -1628,9 +1633,9 @@ CND(IF_NAMESIZE, \"Max size of interface name with 0 terminator\");\n */\n \n #if defined (__sun__) || defined (__hpux__)\n-# define Msg_Iovlen_T \"int\"\n+# define Msg_Iovlen_T \"Interfaces.C.int\"\n #else\n-# define Msg_Iovlen_T \"size_t\"\n+# define Msg_Iovlen_T \"Interfaces.C.size_t\"\n #endif\n \n SUB(Msg_Iovlen_T)"}, {"sha": "7c72e4e299b7168eb1b2e2633efc48374df8e44b", "filename": "gcc/ada/xoscons.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55d4e2ba076049f88c24011f2f63aa226e6c87a0/gcc%2Fada%2Fxoscons.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55d4e2ba076049f88c24011f2f63aa226e6c87a0/gcc%2Fada%2Fxoscons.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fxoscons.adb?ref=55d4e2ba076049f88c24011f2f63aa226e6c87a0", "patch": "@@ -229,8 +229,7 @@ procedure XOSCons is\n             case Lang is\n                when Lang_Ada =>\n                   Put (\"   subtype \" & Info.Constant_Name.all\n-                       & \" is Interfaces.C.\"\n-                       & Info.Text_Value.all & \";\");\n+                       & \" is \" & Info.Text_Value.all & \";\");\n                when Lang_C =>\n                   Put (\"#define \" & Info.Constant_Name.all & \" \"\n                        & Info.Text_Value.all);"}]}