{"sha": "603aeb87505e6777e159c0bfaee72a3708c8f6a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjAzYWViODc1MDVlNjc3N2UxNTljMGJmYWVlNzJhMzcwOGM4ZjZhMQ==", "commit": {"author": {"name": "Alexander Monakov", "email": "amonakov@ispras.ru", "date": "2016-06-10T12:58:53Z"}, "committer": {"name": "Alexander Monakov", "email": "amonakov@gcc.gnu.org", "date": "2016-06-10T12:58:53Z"}, "message": "* match.pd (-1 / B < A): Use :c to avoid pattern duplication.\n\nFrom-SVN: r237307", "tree": {"sha": "60e3b9b74ff05851ff6add13c73688272df521a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60e3b9b74ff05851ff6add13c73688272df521a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/603aeb87505e6777e159c0bfaee72a3708c8f6a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/603aeb87505e6777e159c0bfaee72a3708c8f6a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/603aeb87505e6777e159c0bfaee72a3708c8f6a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/603aeb87505e6777e159c0bfaee72a3708c8f6a1/comments", "author": {"login": "amonakov", "id": 1997391, "node_id": "MDQ6VXNlcjE5OTczOTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1997391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amonakov", "html_url": "https://github.com/amonakov", "followers_url": "https://api.github.com/users/amonakov/followers", "following_url": "https://api.github.com/users/amonakov/following{/other_user}", "gists_url": "https://api.github.com/users/amonakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/amonakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amonakov/subscriptions", "organizations_url": "https://api.github.com/users/amonakov/orgs", "repos_url": "https://api.github.com/users/amonakov/repos", "events_url": "https://api.github.com/users/amonakov/events{/privacy}", "received_events_url": "https://api.github.com/users/amonakov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7cfa10f33c57e7de87517360e42700bbfc97ef58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cfa10f33c57e7de87517360e42700bbfc97ef58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cfa10f33c57e7de87517360e42700bbfc97ef58"}], "stats": {"total": 18, "additions": 6, "deletions": 12}, "files": [{"sha": "9696ad1b7a4cf96b282d04a226ff06ecfdb6eeeb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603aeb87505e6777e159c0bfaee72a3708c8f6a1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603aeb87505e6777e159c0bfaee72a3708c8f6a1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=603aeb87505e6777e159c0bfaee72a3708c8f6a1", "patch": "@@ -1,3 +1,7 @@\n+2016-06-10  Alexander Monakov  <amonakov@ispras.ru>\n+\n+\t* match.pd (-1 / B < A): Use :c to avoid pattern duplication.\n+\n 2016-06-10  Maxim Ostapenko  <m.ostapenko@samsung.com>\n \n \tPR sanitizer/71480"}, {"sha": "7d4beeaa4ed3c66db88a1e0bd282da766dadd52f", "filename": "gcc/match.pd", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603aeb87505e6777e159c0bfaee72a3708c8f6a1/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603aeb87505e6777e159c0bfaee72a3708c8f6a1/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=603aeb87505e6777e159c0bfaee72a3708c8f6a1", "patch": "@@ -2626,22 +2626,12 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n        && types_match (TREE_TYPE (@0), TREE_TYPE (@1)))\n    (out (imagpart @2) { build_zero_cst (TREE_TYPE (@0)); }))))\n \n-/* For unsigned operands, A > -1 / B checks whether A * B would overflow.\n+/* For unsigned operands, -1 / B < A checks whether A * B would overflow.\n    Simplify it to __builtin_mul_overflow (A, B, <unused>).  */\n-/* -1 / B < A */\n (for cmp (lt ge)\n      out (ne eq)\n  (simplify\n-  (cmp (trunc_div:s integer_all_onesp @1) @0)\n-  (if (TYPE_UNSIGNED (TREE_TYPE (@0)) && !VECTOR_TYPE_P (TREE_TYPE (@0)))\n-   (with { tree t = TREE_TYPE (@0), cpx = build_complex_type (t); }\n-    (out (imagpart (IFN_MUL_OVERFLOW:cpx @0 @1)) { build_zero_cst (t); })))))\n-\n-/* A > -1 / B */\n-(for cmp (gt le)\n-     out (ne eq)\n- (simplify\n-  (cmp @0 (trunc_div:s integer_all_onesp @1))\n+  (cmp:c (trunc_div:s integer_all_onesp @1) @0)\n   (if (TYPE_UNSIGNED (TREE_TYPE (@0)) && !VECTOR_TYPE_P (TREE_TYPE (@0)))\n    (with { tree t = TREE_TYPE (@0), cpx = build_complex_type (t); }\n     (out (imagpart (IFN_MUL_OVERFLOW:cpx @0 @1)) { build_zero_cst (t); })))))"}]}