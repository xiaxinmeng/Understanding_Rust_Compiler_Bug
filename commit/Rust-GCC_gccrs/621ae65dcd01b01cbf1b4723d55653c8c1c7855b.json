{"sha": "621ae65dcd01b01cbf1b4723d55653c8c1c7855b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjIxYWU2NWRjZDAxYjAxY2JmMWI0NzIzZDU1NjUzYzhjMWM3ODU1Yg==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@redhat.com", "date": "2006-04-24T15:33:16Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2006-04-24T15:33:16Z"}, "message": "lang.c (java_init): Handle flag_indirect_classes.\n\n2006-04-21  Andrew Haley  <aph@redhat.com>\n\n        * lang.c (java_init): Handle flag_indirect_classes.\n        * jvgenmain.c: Use \"class$$\" instead of \"class$\".\n        * mangle.c (java_mangle_decl): Accept RECORD_TYPEs sw well as\n        DECLs.\n        (mangle_class_field): Special case \"class$$\" as well as \"class$\".\n        * constants.c (build_ref_from_constant_pool): If\n        flag_indirect_classes, generate a ref into the heap.\n        * decl.c (constants_field_decl_node,\n        constants_data_field_decl_node): New.\n        * class.c (build_static_class_ref): New.\n        (build_classdollar_field): Factor out from build_class_ref().\n        (make_field_value): Handle static fields in heap.\n        (make_class_data): Make sure we get a static ref to class.\n        Make class initializer const if flag_indirect_classes.\n        (register_class): Build a class_ref for initialization if\n        flag_indirect_classes.\n        (emit_indirect_register_classes): New.\n\n2006-04-21  Andrew Haley  <aph@redhat.com>\n\n        * include/execution.h (struct _Jv_CompiledEngine): Define for\n        compiled classes.\n        * java/lang/natClassLoader.cc (_Jv_RegisterClasses): Call\n        _Jv_RegisterLibForGc.\n        (_Jv_RegisterClasses_Counted): Likewise.\n        (_Jv_NewClassFromInitializer): New.\n        (_Jv_RegisterNewClasses): New.\n        * sources.am: Regenerate.\n        * boehm.cc (_Jv_GC_has_static_roots): new.\n        (_Jv_InitGC): Call GC_register_has_static_roots_callback.\n        (filename_node, find_file, _Jv_print_gc_store, new_node,\n        _Jv_GC_has_static_roots, _Jv_RegisterLibForGc): New.\n        * scripts/makemake.tcl: Add -fno-indirect-classes.\n        * Makefile.in: Regenerate.\n        * link.cc (resolve_pool_entry): Allocate constant pool.\n        Allocate fields.\n\nFrom-SVN: r113224", "tree": {"sha": "843ad6f8c55847b78d8168eb919c303e362e94d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/843ad6f8c55847b78d8168eb919c303e362e94d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/621ae65dcd01b01cbf1b4723d55653c8c1c7855b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/621ae65dcd01b01cbf1b4723d55653c8c1c7855b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/621ae65dcd01b01cbf1b4723d55653c8c1c7855b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/621ae65dcd01b01cbf1b4723d55653c8c1c7855b/comments", "author": {"login": "theRealAph", "id": 254637, "node_id": "MDQ6VXNlcjI1NDYzNw==", "avatar_url": "https://avatars.githubusercontent.com/u/254637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theRealAph", "html_url": "https://github.com/theRealAph", "followers_url": "https://api.github.com/users/theRealAph/followers", "following_url": "https://api.github.com/users/theRealAph/following{/other_user}", "gists_url": "https://api.github.com/users/theRealAph/gists{/gist_id}", "starred_url": "https://api.github.com/users/theRealAph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theRealAph/subscriptions", "organizations_url": "https://api.github.com/users/theRealAph/orgs", "repos_url": "https://api.github.com/users/theRealAph/repos", "events_url": "https://api.github.com/users/theRealAph/events{/privacy}", "received_events_url": "https://api.github.com/users/theRealAph/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5204d06d82d16eb89d871797cf4ff082f4fa9526", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5204d06d82d16eb89d871797cf4ff082f4fa9526", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5204d06d82d16eb89d871797cf4ff082f4fa9526"}], "stats": {"total": 615, "additions": 526, "deletions": 89}, "files": [{"sha": "2ce57c0fdc19a5e4f4bf815180837f259311abb1", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/621ae65dcd01b01cbf1b4723d55653c8c1c7855b/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/621ae65dcd01b01cbf1b4723d55653c8c1c7855b/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=621ae65dcd01b01cbf1b4723d55653c8c1c7855b", "patch": "@@ -1,3 +1,23 @@\n+2006-04-21  Andrew Haley  <aph@redhat.com>\n+\n+\t* lang.c (java_init): Handle flag_indirect_classes.\n+\t* jvgenmain.c: Use \"class$$\" instead of \"class$\".\n+\t* mangle.c (java_mangle_decl): Accept RECORD_TYPEs sw well as\n+\tDECLs.\n+\t(mangle_class_field): Special case \"class$$\" as well as \"class$\".\n+\t* constants.c (build_ref_from_constant_pool): If\n+\tflag_indirect_classes, generate a ref into the heap.\n+\t* decl.c (constants_field_decl_node,\n+\tconstants_data_field_decl_node): New.\n+\t* class.c (build_static_class_ref): New.\n+\t(build_classdollar_field): Factor out from build_class_ref().\n+\t(make_field_value): Handle static fields in heap.\n+\t(make_class_data): Make sure we get a static ref to class.\n+\tMake class initializer const if flag_indirect_classes.\n+\t(register_class): Build a class_ref for initialization if\n+\tflag_indirect_classes.\n+\t(emit_indirect_register_classes): New.\n+\n 2006-04-08  Kazu Hirata  <kazu@codesourcery.com>\n \n \t* expr.c, gjavah.c: Fix comment typos."}, {"sha": "fe52e67d4acd31fcf7803ac0997ba3537d1ad499", "filename": "gcc/java/class.c", "status": "modified", "additions": 165, "deletions": 38, "changes": 203, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/621ae65dcd01b01cbf1b4723d55653c8c1c7855b/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/621ae65dcd01b01cbf1b4723d55653c8c1c7855b/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=621ae65dcd01b01cbf1b4723d55653c8c1c7855b", "patch": "@@ -953,6 +953,71 @@ build_indirect_class_ref (tree type)\n   return convert (promote_type (class_ptr_type), cl);\n }\n \n+static tree\n+build_static_class_ref (tree type)\n+{\n+  tree decl_name, decl, ref;\n+\n+  if (TYPE_SIZE (type) == error_mark_node)\n+    return null_pointer_node;\n+  decl_name = identifier_subst (DECL_NAME (TYPE_NAME (type)),\n+\t\t\t\t\"\", '/', '/', \".class$$\");\n+  decl = IDENTIFIER_GLOBAL_VALUE (decl_name);\n+  if (decl == NULL_TREE)\n+    {\n+      decl = build_decl (VAR_DECL, decl_name, class_type_node);\n+      TREE_STATIC (decl) = 1;\n+      if (! flag_indirect_classes)\n+\tTREE_PUBLIC (decl) = 1;\n+      DECL_IGNORED_P (decl) = 1;\n+      DECL_ARTIFICIAL (decl) = 1;\n+      if (is_compiled_class (type) == 1)\n+\tDECL_EXTERNAL (decl) = 1;\n+      MAYBE_CREATE_VAR_LANG_DECL_SPECIFIC (decl);\n+      DECL_CLASS_FIELD_P (decl) = 1;\n+      DECL_CONTEXT (decl) = type;\n+\n+      /* ??? We want to preserve the DECL_CONTEXT we set just above,\n+\t that that means not calling pushdecl_top_level.  */\n+      IDENTIFIER_GLOBAL_VALUE (decl_name) = decl;\n+    }\n+\n+  ref = build1 (ADDR_EXPR, class_ptr_type, decl);\n+  return ref;\n+}\n+\n+static tree\n+build_classdollar_field (tree type)\n+{\n+  tree decl_name = identifier_subst (DECL_NAME (TYPE_NAME (type)),\n+\t\t\t\t     \"\", '/', '/', \".class$\");\n+  tree decl = IDENTIFIER_GLOBAL_VALUE (decl_name);\n+\n+  if (decl == NULL_TREE)\n+    {\n+      decl \n+\t= build_decl (VAR_DECL, decl_name, \n+\t\t      (build_type_variant \n+\t\t       (build_pointer_type \n+\t\t\t(build_type_variant (class_type_node, \n+\t\t\t\t\t     /* const */ 1, 0)),\n+\t\t\t/* const */ 1, 0)));\n+      TREE_STATIC (decl) = 1;\n+      TREE_INVARIANT (decl) = 1;\n+      TREE_CONSTANT (decl) = 1;\n+      TREE_READONLY (decl) = 1;\n+      TREE_PUBLIC (decl) = 1;\n+      DECL_IGNORED_P (decl) = 1;\n+      DECL_ARTIFICIAL (decl) = 1;\n+      MAYBE_CREATE_VAR_LANG_DECL_SPECIFIC (decl);\n+      IDENTIFIER_GLOBAL_VALUE (decl_name) = decl;\n+      DECL_CLASS_FIELD_P (decl) = 1;\n+      DECL_CONTEXT (decl) = type;\n+    }\n+\n+  return decl;\n+}\n+\n /* Build a reference to the class TYPE.\n    Also handles primitive types and array types. */\n \n@@ -962,7 +1027,7 @@ build_class_ref (tree type)\n   int is_compiled = is_compiled_class (type);\n   if (is_compiled)\n     {\n-      tree ref, decl_name, decl;\n+      tree ref, decl;\n       if (TREE_CODE (type) == POINTER_TYPE)\n \ttype = TREE_TYPE (type);\n \n@@ -971,34 +1036,15 @@ build_class_ref (tree type)\n \t  && TREE_CODE (type) == RECORD_TYPE)\n \treturn build_indirect_class_ref (type);\n \n+      if (type == output_class && flag_indirect_classes)\n+\treturn build_classdollar_field (type);\n+      \n       if (TREE_CODE (type) == RECORD_TYPE)\n-\t{\n-\t  if (TYPE_SIZE (type) == error_mark_node)\n-\t    return null_pointer_node;\n-\t  decl_name = identifier_subst (DECL_NAME (TYPE_NAME (type)),\n-\t\t\t\t\t\"\", '/', '/', \".class\");\n-\t  decl = IDENTIFIER_GLOBAL_VALUE (decl_name);\n-\t  if (decl == NULL_TREE)\n-\t    {\n-\t      decl = build_decl (VAR_DECL, decl_name, class_type_node);\n-\t      TREE_STATIC (decl) = 1;\n-\t      TREE_PUBLIC (decl) = 1;\n-\t      DECL_IGNORED_P (decl) = 1;\n-\t      DECL_ARTIFICIAL (decl) = 1;\n-\t      if (is_compiled == 1)\n-\t\tDECL_EXTERNAL (decl) = 1;\n-\t      MAYBE_CREATE_VAR_LANG_DECL_SPECIFIC (decl);\n-\t      DECL_CLASS_FIELD_P (decl) = 1;\n-\t      DECL_CONTEXT (decl) = type;\n-\n-\t      /* ??? We want to preserve the DECL_CONTEXT we set just above,\n-\t\t that that means not calling pushdecl_top_level.  */\n-\t      IDENTIFIER_GLOBAL_VALUE (decl_name) = decl;\n-\t    }\n-\t}\n+\treturn build_static_class_ref (type);\n       else\n \t{\n \t  const char *name;\n+\t  tree decl_name;\n \t  char buffer[25];\n \t  if (flag_emit_class_files)\n \t    {\n@@ -1296,16 +1342,22 @@ make_field_value (tree fdecl)\n   PUSH_FIELD_VALUE (finit, \"accflags\", build_int_cst (NULL_TREE, flags));\n   PUSH_FIELD_VALUE (finit, \"bsize\", TYPE_SIZE_UNIT (TREE_TYPE (fdecl)));\n \n-  PUSH_FIELD_VALUE\n-    (finit, \"info\",\n-     build_constructor_from_list (field_info_union_node,\n-\t    build_tree_list\n-\t    ((FIELD_STATIC (fdecl)\n-\t      ? TREE_CHAIN (TYPE_FIELDS (field_info_union_node))\n-\t      : TYPE_FIELDS (field_info_union_node)),\n-\t     (FIELD_STATIC (fdecl)\n-\t      ? build_address_of (fdecl)\n-\t      : byte_position (fdecl)))));\n+  {\n+    tree field_address = integer_zero_node;\n+    if (! flag_indirect_classes && FIELD_STATIC (fdecl))\n+      field_address = build_address_of (fdecl);\n+\n+    PUSH_FIELD_VALUE\n+      (finit, \"info\",\n+       build_constructor_from_list (field_info_union_node,\n+\t build_tree_list\n+\t   ((FIELD_STATIC (fdecl)\n+\t     ? TREE_CHAIN (TYPE_FIELDS (field_info_union_node))\n+\t     : TYPE_FIELDS (field_info_union_node)),\n+\t    (FIELD_STATIC (fdecl)\n+\t     ? field_address\n+\t     : byte_position (fdecl)))));\n+  }\n \n   FINISH_RECORD_CONSTRUCTOR (finit);\n   return finit;\n@@ -1599,7 +1651,7 @@ make_class_data (tree type)\n   tree dtable_start_offset = build_int_cst (NULL_TREE,\n \t\t\t\t\t    2 * POINTER_SIZE / BITS_PER_UNIT);\n \n-  this_class_addr = build_class_ref (type);\n+  this_class_addr = build_static_class_ref (type);\n   decl = TREE_OPERAND (this_class_addr, 0);\n \n   if (supers_all_compiled (type) && ! CLASS_INTERFACE (type_decl)\n@@ -1613,7 +1665,8 @@ make_class_data (tree type)\n       DECL_ARTIFICIAL (dtable_decl) = 1;\n       DECL_IGNORED_P (dtable_decl) = 1;\n       TREE_PUBLIC (dtable_decl) = 1;\n-      rest_of_decl_compilation (dtable_decl, 1, 0);\n+      if (! flag_indirect_classes)\n+\trest_of_decl_compilation (dtable_decl, 1, 0);\n       if (type == class_type_node)\n \tclass_dtable_decl = dtable_decl;\n     }\n@@ -1958,8 +2011,21 @@ make_class_data (tree type)\n   if (flag_hash_synchronization && POINTER_SIZE < 64)\n     DECL_ALIGN (decl) = 64; \n   \n+  if (flag_indirect_classes)\n+    {\n+      TREE_READONLY (decl) = 1;\n+      TREE_CONSTANT (DECL_INITIAL (decl)) = 1;\n+    }\n+\n   rest_of_decl_compilation (decl, 1, 0);\n   \n+  {\n+    tree classdollar_field = build_classdollar_field (type);\n+    if (!flag_indirect_classes)\n+      DECL_INITIAL (classdollar_field) = build_static_class_ref (type);\n+    rest_of_decl_compilation (classdollar_field, 1, 0);\n+  }\n+\n   TYPE_OTABLE_DECL (type) = NULL_TREE;\n   TYPE_ATABLE_DECL (type) = NULL_TREE;\n   TYPE_CTABLE_DECL (type) = NULL_TREE;\n@@ -2465,10 +2531,65 @@ register_class (void)\n   if (!registered_class)\n     registered_class = VEC_alloc (tree, gc, 8);\n \n-  node = TREE_OPERAND (build_class_ref (current_class), 0);\n+  if (flag_indirect_classes)\n+    node = current_class;\n+  else\n+    node = TREE_OPERAND (build_class_ref (current_class), 0);\n   VEC_safe_push (tree, gc, registered_class, node);\n }\n \n+/* Emit a function that calls _Jv_NewClassFromInitializer for every\n+   class.  */\n+\n+static void\n+emit_indirect_register_classes (tree *list_p)\n+{\n+  tree klass, t, register_class_fn;\n+  int i;\n+\n+  tree init = NULL_TREE;\n+  int size = VEC_length (tree, registered_class) * 2 + 1;\n+  tree class_array_type\n+    = build_prim_array_type (ptr_type_node, size);\n+  tree cdecl = build_decl (VAR_DECL, get_identifier (\"_Jv_CLS\"),\n+\t\t\t   class_array_type);\n+  tree reg_class_list;\n+  for (i = 0; VEC_iterate (tree, registered_class, i, klass); ++i)\n+    {\n+      init = tree_cons (NULL_TREE, \n+\t\t\tfold_convert (ptr_type_node, \n+\t\t\t\t      build_static_class_ref (klass)), init);\n+      init = tree_cons \n+\t(NULL_TREE, \n+\t fold_convert (ptr_type_node, \n+\t\t       build_address_of (build_classdollar_field (klass))),\n+\t init);\n+    }\n+  init = tree_cons (NULL_TREE, integer_zero_node, init); \n+  DECL_INITIAL (cdecl) = build_constructor_from_list (class_array_type,\n+\t\t\t\t\t\t      nreverse (init));\n+  TREE_CONSTANT (DECL_INITIAL (cdecl)) = 1;\n+  TREE_STATIC (cdecl) = 1;\n+  DECL_ARTIFICIAL (cdecl) = 1;\n+  DECL_IGNORED_P (cdecl) = 1;\n+  TREE_READONLY (cdecl) = 1;\n+  TREE_CONSTANT (cdecl) = 1;\n+  rest_of_decl_compilation (cdecl, 1, 0);\n+  reg_class_list = fold_convert (ptr_type_node, build_address_of (cdecl));\n+\n+  t = build_function_type_list (void_type_node, \n+\t\t\t\tbuild_pointer_type (ptr_type_node), NULL);\n+  t = build_decl (FUNCTION_DECL, \n+\t\t  get_identifier (\"_Jv_RegisterNewClasses\"), t);\n+  TREE_PUBLIC (t) = 1;\n+  DECL_EXTERNAL (t) = 1;\n+  register_class_fn = t;\n+  t = tree_cons (NULL, reg_class_list, NULL);\n+  t = build_function_call_expr (register_class_fn, t);\n+  append_to_statement_list (t, list_p);\n+}\n+\n+\n /* Emit something to register classes at start-up time.\n \n    The preferred mechanism is through the .jcr section, which contain\n@@ -2485,6 +2606,12 @@ emit_register_classes (tree *list_p)\n   if (registered_class == NULL)\n     return;\n \n+  if (flag_indirect_classes)\n+    {\n+      emit_indirect_register_classes (list_p);\n+      return;\n+    }\n+\n   /* TARGET_USE_JCR_SECTION defaults to 1 if SUPPORTS_WEAK and\n      TARGET_ASM_NAMED_SECTION, else 0.  Some targets meet those conditions\n      but lack suitable crtbegin/end objects or linker support.  These"}, {"sha": "2f4c0530035778c1be460f1349630a8a1d023c4d", "filename": "gcc/java/constants.c", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/621ae65dcd01b01cbf1b4723d55653c8c1c7855b/gcc%2Fjava%2Fconstants.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/621ae65dcd01b01cbf1b4723d55653c8c1c7855b/gcc%2Fjava%2Fconstants.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fconstants.c?ref=621ae65dcd01b01cbf1b4723d55653c8c1c7855b", "patch": "@@ -458,8 +458,29 @@ build_ref_from_constant_pool (int index)\n {\n   tree d = build_constant_data_ref ();\n   tree i = build_int_cst (NULL_TREE, index);\n-  return build4 (ARRAY_REF, TREE_TYPE (TREE_TYPE (d)), d, i,\n+  if (flag_indirect_classes)\n+    {\n+      tree decl = build_class_ref (output_class);\n+      tree klass = build1 (INDIRECT_REF, TREE_TYPE (TREE_TYPE (decl)),\n+\t\t\t   decl);\n+      tree constants = build3 (COMPONENT_REF, \n+\t\t\t       TREE_TYPE (constants_field_decl_node), klass,\n+\t\t\t       constants_field_decl_node,\n+\t\t\t       NULL_TREE);\n+      tree data = build3 (COMPONENT_REF, \n+\t\t\t  TREE_TYPE (constants_data_field_decl_node), \n+\t\t\t  constants,\n+\t\t\t  constants_data_field_decl_node,\n+\t\t\t  NULL_TREE);\n+      data = fold_convert (build_pointer_type (TREE_TYPE (d)), data);\n+      d = build1 (INDIRECT_REF, TREE_TYPE (d), data);\n+      /* FIXME: These should be cached.  */\n+      TREE_INVARIANT (d) = 1;\n+    }\n+  d = build4 (ARRAY_REF, TREE_TYPE (TREE_TYPE (d)), d, i,\n \t\t NULL_TREE, NULL_TREE);\n+  TREE_INVARIANT (d) = 1;\n+  return d;\n }\n \n /* Build an initializer for the constants field of the current constant pool."}, {"sha": "a16c49b7c4be8834cf1ca2ee0ec2e98dc9eca868", "filename": "gcc/java/decl.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/621ae65dcd01b01cbf1b4723d55653c8c1c7855b/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/621ae65dcd01b01cbf1b4723d55653c8c1c7855b/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=621ae65dcd01b01cbf1b4723d55653c8c1c7855b", "patch": "@@ -123,6 +123,12 @@ static GTY(()) tree pending_local_decls;\n /* The decl for \"_Jv_ResolvePoolEntry\".  */\n tree soft_resolvepoolentry_node;\n \n+/* The decl for the .constants field of an instance of Class.  */\n+tree constants_field_decl_node;\n+\n+/* The decl for the .data field of an instance of Class.  */\n+tree constants_data_field_decl_node;\n+\n #if defined(DEBUG_JAVA_BINDING_LEVELS)\n int binding_depth = 0;\n int is_class_level = 0;\n@@ -883,6 +889,7 @@ java_init_decl_processing (void)\n   PUSH_FIELD (constants_type_node, field, \"size\", unsigned_int_type_node);\n   PUSH_FIELD (constants_type_node, field, \"tags\", ptr_type_node);\n   PUSH_FIELD (constants_type_node, field, \"data\", ptr_type_node);\n+  constants_data_field_decl_node = field;\n   FINISH_RECORD (constants_type_node);\n   build_decl (TYPE_DECL, get_identifier (\"constants\"), constants_type_node);\n \n@@ -924,6 +931,7 @@ java_init_decl_processing (void)\n   PUSH_FIELD (class_type_node, field, \"accflags\", access_flags_type_node);\n   PUSH_FIELD (class_type_node, field, \"superclass\", class_ptr_type);\n   PUSH_FIELD (class_type_node, field, \"constants\", constants_type_node);\n+  constants_field_decl_node = field;\n   PUSH_FIELD (class_type_node, field, \"methods\", method_ptr_type_node);\n   PUSH_FIELD (class_type_node, field, \"method_count\", short_type_node);\n   PUSH_FIELD (class_type_node, field, \"vtable_method_count\", short_type_node);"}, {"sha": "03a7ea2c142fbab452f5e4c2363701f8fd04e732", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/621ae65dcd01b01cbf1b4723d55653c8c1c7855b/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/621ae65dcd01b01cbf1b4723d55653c8c1c7855b/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=621ae65dcd01b01cbf1b4723d55653c8c1c7855b", "patch": "@@ -208,6 +208,9 @@ extern int flag_check_references;\n    initialization optimization should be performed.  */\n extern int flag_optimize_sci;\n \n+/* Generate instances of Class at runtime.  */\n+extern int flag_indirect_classes;\n+\n /* When nonzero, use offset tables for virtual method calls\n    in order to improve binary compatibility. */\n extern int flag_indirect_dispatch;\n@@ -270,6 +273,12 @@ extern GTY(()) tree java_lang_cloneable_identifier_node;\n extern GTY(()) tree java_io_serializable_identifier_node;\n extern GTY(()) tree gcj_abi_version;\n \n+/* The decl for the .constants field of an instance of Class.  */\n+extern GTY(()) tree constants_field_decl_node;\n+\n+/* The decl for the .data field of an instance of Class.  */\n+extern GTY(()) tree constants_data_field_decl_node;\n+\n enum java_tree_index\n {\n   JTI_PROMOTED_BYTE_TYPE_NODE,"}, {"sha": "e0cddc0d4d56f81d0da2fdd621896aeeb418c0a9", "filename": "gcc/java/jvgenmain.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/621ae65dcd01b01cbf1b4723d55653c8c1c7855b/gcc%2Fjava%2Fjvgenmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/621ae65dcd01b01cbf1b4723d55653c8c1c7855b/gcc%2Fjava%2Fjvgenmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjvgenmain.c?ref=621ae65dcd01b01cbf1b4723d55653c8c1c7855b", "patch": "@@ -127,11 +127,11 @@ main (int argc, char **argv)\n     }\n   fprintf (stream, \"  0\\n};\\n\\n\");\n \n-  fprintf (stream, \"extern int %s;\\n\", mangled_classname);\n   fprintf (stream, \"int main (int argc, const char **argv)\\n\");\n   fprintf (stream, \"{\\n\");\n   fprintf (stream, \"   _Jv_Compiler_Properties = props;\\n\");\n-  fprintf (stream, \"   JvRunMain (&%s, argc, argv);\\n\", mangled_classname);\n+  fprintf (stream, \"   extern void *%s;\\n\", mangled_classname);\n+  fprintf (stream, \"   JvRunMain (%s, argc, argv);\\n\", mangled_classname);\n   fprintf (stream, \"}\\n\");\n   if (stream != stdout && fclose (stream) != 0)\n     {\n@@ -153,16 +153,16 @@ do_mangle_classname (const char *string)\n \n   for (ptr = string; *ptr; ptr++ )\n     {\n-      if (ptr[0] == '.')\n+      if (*ptr == '.')\n \t{\n-\t  append_gpp_mangled_name (&ptr [-count], count);\n+\t  append_gpp_mangled_name (ptr - count, count);\n \t  count = 0;\n \t}\n       else\n \tcount++;\n     }\n   append_gpp_mangled_name (&ptr [-count], count);\n-  obstack_grow (mangle_obstack, \"6class$E\", 8);\n+  obstack_grow (mangle_obstack, \"7class$$E\", strlen (\"7class$$E\"));\n   obstack_1grow (mangle_obstack, '\\0');\n   return obstack_finish (mangle_obstack);\n }"}, {"sha": "6344c3c8707553c6a5b7c01e1fc1b0c345e93f8f", "filename": "gcc/java/lang.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/621ae65dcd01b01cbf1b4723d55653c8c1c7855b/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/621ae65dcd01b01cbf1b4723d55653c8c1c7855b/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=621ae65dcd01b01cbf1b4723d55653c8c1c7855b", "patch": "@@ -368,6 +368,9 @@ java_init (void)\n   if (flag_indirect_dispatch)\n     always_initialize_class_p = true;\n \n+  if (!flag_indirect_dispatch)\n+    flag_indirect_classes = false;\n+\n   /* Force minimum function alignment if g++ uses the least significant\n      bit of function pointers to store the virtual bit. This is required\n      to keep vtables compatible.  */"}, {"sha": "80b920260f67c46b1e98b2a0bfaa25324f514ff3", "filename": "gcc/java/lang.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/621ae65dcd01b01cbf1b4723d55653c8c1c7855b/gcc%2Fjava%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/621ae65dcd01b01cbf1b4723d55653c8c1c7855b/gcc%2Fjava%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.opt?ref=621ae65dcd01b01cbf1b4723d55653c8c1c7855b", "patch": "@@ -146,6 +146,10 @@ fhash-synchronization\n Java Var(flag_hash_synchronization)\n Assume the runtime uses a hash table to map an object to its synchronization structure\n \n+findirect-classes\n+Java Var(flag_indirect_classes) Init(1)\n+Generate instances of Class at runtime\n+\n findirect-dispatch\n Java Var(flag_indirect_dispatch)\n Use offset tables for virtual method calls"}, {"sha": "0fe5220b5b2b5173459fc78f78babeadb87ffcf7", "filename": "gcc/java/mangle.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/621ae65dcd01b01cbf1b4723d55653c8c1c7855b/gcc%2Fjava%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/621ae65dcd01b01cbf1b4723d55653c8c1c7855b/gcc%2Fjava%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fmangle.c?ref=621ae65dcd01b01cbf1b4723d55653c8c1c7855b", "patch": "@@ -79,6 +79,9 @@ static GTY(()) tree atms;\n void\n java_mangle_decl (tree decl)\n {\n+  if (TREE_CODE (decl) == RECORD_TYPE)\n+    mangle_type (decl);\n+\n   /* A copy of the check from the beginning of lhd_set_decl_assembler_name.\n      Only FUNCTION_DECLs and VAR_DECLs for variables with static storage\n      duration need a real DECL_ASSEMBLER_NAME.  */\n@@ -99,7 +102,7 @@ java_mangle_decl (tree decl)\n \t    {\n \t      if (DECL_CLASS_FIELD_P (decl))\n \t\t{\n-\t\t  mangle_class_field (DECL_CONTEXT (decl));\n+\t\t  mangle_class_field (decl);\n \t\t  break;\n \t\t}\n \t      else if (DECL_VTABLE_P (decl))\n@@ -130,10 +133,14 @@ java_mangle_decl (tree decl)\n /* Beginning of the helper functions */\n \n static void\n-mangle_class_field (tree type)\n+mangle_class_field (tree decl)\n {\n+  tree type = DECL_CONTEXT (decl);\n   mangle_record_type (type, /* for_pointer = */ 0);\n-  MANGLE_RAW_STRING (\"6class$\");\n+  if (TREE_CODE (TREE_TYPE (decl)) == RECORD_TYPE)\n+    MANGLE_RAW_STRING (\"6class$\");\n+  else\n+    MANGLE_RAW_STRING (\"7class$$\");\n   obstack_1grow (mangle_obstack, 'E');\n }\n \n@@ -229,7 +236,7 @@ mangle_member_name (tree name)\n   append_gpp_mangled_name (IDENTIFIER_POINTER (name),\n \t\t\t   IDENTIFIER_LENGTH (name));\n \n-  /* If NAME happens to be a C++ keyword, add `$'. */\n+  /* If NAME happens to be a C++ keyword, add `$'.  */\n   if (cxx_keyword_p (IDENTIFIER_POINTER (name), IDENTIFIER_LENGTH (name)))\n     obstack_1grow (mangle_obstack, '$');\n }"}, {"sha": "10b48df134415ff5c8c6740a5773f96a6c1b30f7", "filename": "libjava/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/621ae65dcd01b01cbf1b4723d55653c8c1c7855b/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/621ae65dcd01b01cbf1b4723d55653c8c1c7855b/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=621ae65dcd01b01cbf1b4723d55653c8c1c7855b", "patch": "@@ -1,3 +1,22 @@\n+2006-04-21  Andrew Haley  <aph@redhat.com>\n+\n+\t* include/execution.h (struct _Jv_CompiledEngine): Define for\n+\tcompiled classes.\n+\t* java/lang/natClassLoader.cc (_Jv_RegisterClasses): Call\n+\t_Jv_RegisterLibForGc.\n+\t(_Jv_RegisterClasses_Counted): Likewise.\n+\t(_Jv_NewClassFromInitializer): New.\n+\t(_Jv_RegisterNewClasses): New.\n+\t* sources.am: Regenerate.\n+\t* boehm.cc (_Jv_GC_has_static_roots): new.\n+\t(_Jv_InitGC): Call GC_register_has_static_roots_callback.\n+\t(filename_node, find_file, _Jv_print_gc_store, new_node,\n+\t_Jv_GC_has_static_roots, _Jv_RegisterLibForGc): New.\n+\t* scripts/makemake.tcl: Add -fno-indirect-classes.\n+\t* Makefile.in: Regenerate.\n+\t* link.cc (resolve_pool_entry): Allocate constant pool.\n+\tAllocate fields.\n+\t\n 2006-04-22  Andreas Tobler  <a.tobler@schweiz.ch>\n \n \t* configure.ac: Weaken the check for MMAP."}, {"sha": "b7662747d59e4a969af1e93a448d48d16d8c434b", "filename": "libjava/Makefile.in", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/621ae65dcd01b01cbf1b4723d55653c8c1c7855b/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/621ae65dcd01b01cbf1b4723d55653c8c1c7855b/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=621ae65dcd01b01cbf1b4723d55653c8c1c7855b", "patch": "@@ -8448,7 +8448,7 @@ lib-gnu-awt-xlib.la: $(lib_gnu_awt_xlib_la_OBJECTS) $(lib_gnu_awt_xlib_la_DEPEND\n \n gnu-CORBA.lo: $(gnu_CORBA_source_files)\n \t@find classpath/lib/gnu/CORBA -name '*.class' > gnu-CORBA.list\n-\t$(LTGCJCOMPILE) -fjni -findirect-dispatch -c -o gnu-CORBA.lo @gnu-CORBA.list\n+\t$(LTGCJCOMPILE) -fjni -findirect-dispatch -fno-indirect-classes -c -o gnu-CORBA.lo @gnu-CORBA.list\n \t@rm -f gnu-CORBA.list\n \n gnu/awt.list: $(gnu_awt_source_files)\n@@ -8683,22 +8683,22 @@ gnu/java/awt/peer.list: $(gnu_java_awt_peer_source_files)\n \n gnu-java-awt-peer-gtk.lo: $(gnu_java_awt_peer_gtk_source_files)\n \t@find classpath/lib/gnu/java/awt/peer/gtk -name '*.class' > gnu-java-awt-peer-gtk.list\n-\t$(LTGCJCOMPILE) -fjni -findirect-dispatch -c -o gnu-java-awt-peer-gtk.lo @gnu-java-awt-peer-gtk.list\n+\t$(LTGCJCOMPILE) -fjni -findirect-dispatch -fno-indirect-classes -c -o gnu-java-awt-peer-gtk.lo @gnu-java-awt-peer-gtk.list\n \t@rm -f gnu-java-awt-peer-gtk.list\n \n gnu-java-awt-peer-qt.lo: $(gnu_java_awt_peer_qt_source_files)\n \t@find classpath/lib/gnu/java/awt/peer/qt -name '*.class' > gnu-java-awt-peer-qt.list\n-\t$(LTGCJCOMPILE) -fjni -findirect-dispatch -c -o gnu-java-awt-peer-qt.lo @gnu-java-awt-peer-qt.list\n+\t$(LTGCJCOMPILE) -fjni -findirect-dispatch -fno-indirect-classes -c -o gnu-java-awt-peer-qt.lo @gnu-java-awt-peer-qt.list\n \t@rm -f gnu-java-awt-peer-qt.list\n \n gnu-java-awt-peer-swing.lo: $(gnu_java_awt_peer_swing_source_files)\n \t@find classpath/lib/gnu/java/awt/peer/swing -name '*.class' > gnu-java-awt-peer-swing.list\n-\t$(LTGCJCOMPILE) -fjni -findirect-dispatch -c -o gnu-java-awt-peer-swing.lo @gnu-java-awt-peer-swing.list\n+\t$(LTGCJCOMPILE) -fjni -findirect-dispatch -fno-indirect-classes -c -o gnu-java-awt-peer-swing.lo @gnu-java-awt-peer-swing.list\n \t@rm -f gnu-java-awt-peer-swing.list\n \n gnu-java-beans.lo: $(gnu_java_beans_source_files)\n \t@find classpath/lib/gnu/java/beans -name '*.class' > gnu-java-beans.list\n-\t$(LTGCJCOMPILE) -fjni -findirect-dispatch -c -o gnu-java-beans.lo @gnu-java-beans.list\n+\t$(LTGCJCOMPILE) -fjni -findirect-dispatch -fno-indirect-classes -c -o gnu-java-beans.lo @gnu-java-beans.list\n \t@rm -f gnu-java-beans.list\n \n gnu/java/io.list: $(gnu_java_io_source_files)\n@@ -9393,7 +9393,7 @@ gnu/javax/net/ssl/provider.list: $(gnu_javax_net_ssl_provider_source_files)\n \n gnu-javax-rmi.lo: $(gnu_javax_rmi_source_files)\n \t@find classpath/lib/gnu/javax/rmi -name '*.class' > gnu-javax-rmi.list\n-\t$(LTGCJCOMPILE) -fjni -findirect-dispatch -c -o gnu-javax-rmi.lo @gnu-javax-rmi.list\n+\t$(LTGCJCOMPILE) -fjni -findirect-dispatch -fno-indirect-classes -c -o gnu-javax-rmi.lo @gnu-javax-rmi.list\n \t@rm -f gnu-javax-rmi.list\n \n gnu/javax/security/auth.list: $(gnu_javax_security_auth_source_files)\n@@ -9428,7 +9428,7 @@ gnu/javax/security/auth/login.list: $(gnu_javax_security_auth_login_source_files\n \n gnu-javax-sound-midi.lo: $(gnu_javax_sound_midi_source_files)\n \t@find classpath/lib/gnu/javax/sound/midi -name '*.class' > gnu-javax-sound-midi.list\n-\t$(LTGCJCOMPILE) -fjni -findirect-dispatch -c -o gnu-javax-sound-midi.lo @gnu-javax-sound-midi.list\n+\t$(LTGCJCOMPILE) -fjni -findirect-dispatch -fno-indirect-classes -c -o gnu-javax-sound-midi.lo @gnu-javax-sound-midi.list\n \t@rm -f gnu-javax-sound-midi.list\n \n gnu/javax/swing/text/html/parser.list: $(gnu_javax_swing_text_html_parser_source_files)\n@@ -9483,7 +9483,7 @@ gnu/regexp.list: $(gnu_regexp_source_files)\n \n gnu-xml.lo: $(gnu_xml_source_files)\n \t@find classpath/lib/gnu/xml -name '*.class' > gnu-xml.list\n-\t$(LTGCJCOMPILE) -fjni -findirect-dispatch -c -o gnu-xml.lo @gnu-xml.list\n+\t$(LTGCJCOMPILE) -fjni -findirect-dispatch -fno-indirect-classes -c -o gnu-xml.lo @gnu-xml.list\n \t@rm -f gnu-xml.list\n \n java/applet.list: $(java_applet_source_files)\n@@ -9998,7 +9998,7 @@ javax/crypto/spec.list: $(javax_crypto_spec_source_files)\n \n javax-imageio.lo: $(javax_imageio_source_files)\n \t@find classpath/lib/javax/imageio -name '*.class' > javax-imageio.list\n-\t$(LTGCJCOMPILE) -fjni -findirect-dispatch -c -o javax-imageio.lo @javax-imageio.list\n+\t$(LTGCJCOMPILE) -fjni -findirect-dispatch -fno-indirect-classes -c -o javax-imageio.lo @javax-imageio.list\n \t@rm -f javax-imageio.list\n \n javax/management.list: $(javax_management_source_files)\n@@ -10123,7 +10123,7 @@ javax/print/event.list: $(javax_print_event_source_files)\n \n javax-rmi.lo: $(javax_rmi_source_files)\n \t@find classpath/lib/javax/rmi -name '*.class' > javax-rmi.list\n-\t$(LTGCJCOMPILE) -fjni -findirect-dispatch -c -o javax-rmi.lo @javax-rmi.list\n+\t$(LTGCJCOMPILE) -fjni -findirect-dispatch -fno-indirect-classes -c -o javax-rmi.lo @javax-rmi.list\n \t@rm -f javax-rmi.list\n \n javax/security/auth.list: $(javax_security_auth_source_files)\n@@ -10438,7 +10438,7 @@ javax/transaction/xa.list: $(javax_transaction_xa_source_files)\n \n javax-xml.lo: $(javax_xml_source_files)\n \t@find classpath/lib/javax/xml -name '*.class' > javax-xml.list\n-\t$(LTGCJCOMPILE) -fjni -findirect-dispatch -c -o javax-xml.lo @javax-xml.list\n+\t$(LTGCJCOMPILE) -fjni -findirect-dispatch -fno-indirect-classes -c -o javax-xml.lo @javax-xml.list\n \t@rm -f javax-xml.list\n \n org/ietf/jgss.list: $(org_ietf_jgss_source_files)\n@@ -10453,22 +10453,22 @@ org/ietf/jgss.list: $(org_ietf_jgss_source_files)\n \n org-omg.lo: $(org_omg_source_files)\n \t@find classpath/lib/org/omg -name '*.class' > org-omg.list\n-\t$(LTGCJCOMPILE) -fjni -findirect-dispatch -c -o org-omg.lo @org-omg.list\n+\t$(LTGCJCOMPILE) -fjni -findirect-dispatch -fno-indirect-classes -c -o org-omg.lo @org-omg.list\n \t@rm -f org-omg.list\n \n org-relaxng.lo: $(org_relaxng_source_files)\n \t@find classpath/lib/org/relaxng -name '*.class' > org-relaxng.list\n-\t$(LTGCJCOMPILE) -fjni -findirect-dispatch -c -o org-relaxng.lo @org-relaxng.list\n+\t$(LTGCJCOMPILE) -fjni -findirect-dispatch -fno-indirect-classes -c -o org-relaxng.lo @org-relaxng.list\n \t@rm -f org-relaxng.list\n \n org-w3c.lo: $(org_w3c_source_files)\n \t@find classpath/lib/org/w3c -name '*.class' > org-w3c.list\n-\t$(LTGCJCOMPILE) -fjni -findirect-dispatch -c -o org-w3c.lo @org-w3c.list\n+\t$(LTGCJCOMPILE) -fjni -findirect-dispatch -fno-indirect-classes -c -o org-w3c.lo @org-w3c.list\n \t@rm -f org-w3c.list\n \n org-xml.lo: $(org_xml_source_files)\n \t@find classpath/lib/org/xml -name '*.class' > org-xml.list\n-\t$(LTGCJCOMPILE) -fjni -findirect-dispatch -c -o org-xml.lo @org-xml.list\n+\t$(LTGCJCOMPILE) -fjni -findirect-dispatch -fno-indirect-classes -c -o org-xml.lo @org-xml.list\n \t@rm -f org-xml.list\n \n $(generic_header_files): %.h: classpath/lib/%.class"}, {"sha": "9ee633b34c35893708cb611afce9c4754e941ded", "filename": "libjava/boehm.cc", "status": "modified", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/621ae65dcd01b01cbf1b4723d55653c8c1c7855b/libjava%2Fboehm.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/621ae65dcd01b01cbf1b4723d55653c8c1c7855b/libjava%2Fboehm.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fboehm.cc?ref=621ae65dcd01b01cbf1b4723d55653c8c1c7855b", "patch": "@@ -32,6 +32,13 @@ details.  */\n #undef PACKAGE_TARNAME\n #undef PACKAGE_VERSION\n \n+#ifdef HAVE_DLFCN_H\n+#undef _GNU_SOURCE\n+#define _GNU_SOURCE\n+#include <dlfcn.h>\n+#include <link.h>\n+#endif\n+\n extern \"C\"\n {\n #include <gc_config.h>\n@@ -64,6 +71,8 @@ static int array_kind_x;\n // Freelist used for Java arrays.\n static void **array_free_list;\n \n+static int _Jv_GC_has_static_roots (const char *filename, void *, size_t);\n+\n \f\n \n // This is called by the GC during the mark phase.  It marks a Java\n@@ -468,10 +477,21 @@ void\n _Jv_InitGC (void)\n {\n   int proc;\n+  static bool gc_initialized;\n+\n+  if (gc_initialized)\n+    return;\n+\n+  gc_initialized = 1;\n \n   // Ignore pointers that do not point to the start of an object.\n   GC_all_interior_pointers = 0;\n \n+#ifdef HAVE_DLFCN_H\n+  // Tell the collector to ask us before scanning DSOs.\n+  GC_register_has_static_roots_callback (_Jv_GC_has_static_roots);\n+#endif\n+\n   // Configure the collector to use the bitmap marking descriptors that we\n   // stash in the class vtable.\n   // We always use mark proc descriptor 0, since the compiler knows\n@@ -559,3 +579,98 @@ _Jv_GCCanReclaimSoftReference (jobject)\n   // For now, always reclaim soft references.  FIXME.\n   return true;\n }\n+\n+\f\n+\n+#ifdef HAVE_DLFCN_H\n+\n+// We keep a store of the filenames of DSOs that need to be\n+// conservatively scanned by the garbage collector.  During collection\n+// the gc calls _Jv_GC_has_static_roots() to see if the data segment\n+// of a DSO should be scanned.\n+typedef struct filename_node\n+{\n+  char *name;\n+  struct filename_node *link;\n+} filename_node;\n+\n+#define FILENAME_STORE_SIZE 17\n+static filename_node *filename_store[FILENAME_STORE_SIZE];\n+\n+// Find a filename in filename_store.\n+static filename_node **\n+find_file (const char *filename)\n+{\n+  int index = strlen (filename) % FILENAME_STORE_SIZE;\n+  filename_node **node = &filename_store[index];\n+  \n+  while (*node)\n+    {\n+      if (strcmp ((*node)->name, filename) == 0)\n+\treturn node;\n+      node = &(*node)->link;\n+    }\n+\n+  return node;\n+}  \n+\n+// Print the store of filenames of DSOs that need collection.\n+void\n+_Jv_print_gc_store (void)\n+{\n+  for (int i = 0; i < FILENAME_STORE_SIZE; i++)\n+    {\n+      filename_node *node = filename_store[i];\n+      while (node)\n+\t{\n+\t  fprintf (stderr, \"%s\\n\", node->name);\n+\t  node = node->link;\n+\t}\n+    }\n+}\n+\n+// Create a new node in the store of libraries to collect.\n+static filename_node *\n+new_node (const char *filename)\n+{\n+  filename_node *node = (filename_node*)_Jv_Malloc (sizeof (filename_node));\n+  node->name = (char *)_Jv_Malloc (strlen (filename) + 1);\n+  node->link = NULL;\n+  strcpy (node->name, filename);\n+  \n+  return node;\n+}\n+\n+// Nonzero if the gc should scan this lib.\n+static int \n+_Jv_GC_has_static_roots (const char *filename, void *, size_t)\n+{\n+  if (filename == NULL || strlen (filename) == 0)\n+    // No filename; better safe than sorry.\n+    return 1;\n+\n+  filename_node **node = find_file (filename);\n+  if (*node)\n+    return 1;\n+\n+  return 0;\n+}\n+\n+#endif\n+\n+// Register the DSO that contains p for collection.\n+void\n+_Jv_RegisterLibForGc (const void *p __attribute__ ((__unused__)))\n+{\n+#ifdef HAVE_DLFCN_H\n+  Dl_info info;\n+  \n+  if (dladdr (p, &info) != 0)\n+    {\n+      filename_node **node = find_file (info.dli_fname);\n+      if (! *node)\n+\t*node = new_node (info.dli_fname);\n+    }\n+#endif\n+}\n+"}, {"sha": "4e2a06b890380f9b7a5353f45f220d02a4cf2390", "filename": "libjava/include/boehm-gc.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/621ae65dcd01b01cbf1b4723d55653c8c1c7855b/libjava%2Finclude%2Fboehm-gc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/621ae65dcd01b01cbf1b4723d55653c8c1c7855b/libjava%2Finclude%2Fboehm-gc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fboehm-gc.h?ref=621ae65dcd01b01cbf1b4723d55653c8c1c7855b", "patch": "@@ -19,6 +19,7 @@ extern \"C\"\n {\n   void *_Jv_MarkObj (void *, void *, void *, void *);\n   void *_Jv_MarkArray (void *, void *, void *, void *);\n+  void _Jv_RegisterLibForGc (const void *);\n }\n \n // Enough stuff to inline _Jv_AllocObj.  Ugly."}, {"sha": "fe141e91ec97a3937ab1c18dc7b20a1e29ffc1d6", "filename": "libjava/include/execution.h", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/621ae65dcd01b01cbf1b4723d55653c8c1c7855b/libjava%2Finclude%2Fexecution.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/621ae65dcd01b01cbf1b4723d55653c8c1c7855b/libjava%2Finclude%2Fexecution.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fexecution.h?ref=621ae65dcd01b01cbf1b4723d55653c8c1c7855b", "patch": "@@ -55,9 +55,25 @@ struct _Jv_CompiledEngine : public _Jv_ExecutionEngine\n     return NULL;\n   }\n \n-  static void do_allocate_static_fields (jclass, int, int)\n+  static void do_allocate_static_fields (jclass klass,\n+\t\t\t\t\t int pointer_size,\n+\t\t\t\t\t int other_size)\n   {\n-    // Compiled classes don't need this.\n+    // Splitting the allocations here lets us scan reference fields\n+    // and avoid scanning non-reference fields.\n+    char *reference_fields = (char *) _Jv_AllocRawObj (pointer_size);\n+    char *non_reference_fields = (char *) _Jv_AllocBytes (other_size);\n+\n+    for (int i = 0; i < klass->field_count; i++)\n+      {\n+\t_Jv_Field *field = &klass->fields[i];\n+\n+\tif ((field->flags & java::lang::reflect::Modifier::STATIC) == 0)\n+\t  continue;\n+\n+\tchar *base = field->isRef() ? reference_fields : non_reference_fields;\n+\tfield->u.addr  = base + field->u.boffset;\n+      } \n   }\n \n   static void do_create_ncode (jclass)"}, {"sha": "af959f96349083d5f22cfacd258f3ff4eccdd427", "filename": "libjava/java/lang/Class.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/621ae65dcd01b01cbf1b4723d55653c8c1c7855b/libjava%2Fjava%2Flang%2FClass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/621ae65dcd01b01cbf1b4723d55653c8c1c7855b/libjava%2Fjava%2Flang%2FClass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FClass.h?ref=621ae65dcd01b01cbf1b4723d55653c8c1c7855b", "patch": "@@ -39,6 +39,9 @@ extern \"Java\"\n \n // We declare these here to avoid including gcj/cni.h.\n extern \"C\" void _Jv_InitClass (jclass klass);\n+extern \"C\" jclass _Jv_NewClassFromInitializer \n+   (const jclass class_initializer);\n+extern \"C\" void _Jv_RegisterNewClasses (void **classes);\n extern \"C\" void _Jv_RegisterClasses (const jclass *classes);\n extern \"C\" void _Jv_RegisterClasses_Counted (const jclass *classes,\n \t\t\t\t\t     size_t count);\n@@ -286,7 +289,7 @@ class java::lang::Class : public java::lang::Object\n   JArray<jclass> *getClasses (void);\n \n   java::lang::ClassLoader *getClassLoader (void);\n-\n+public:\n   // This is an internal method that circumvents the usual security\n   // checks when getting the class loader.\n   java::lang::ClassLoader *getClassLoaderInternal (void)\n@@ -427,6 +430,8 @@ class java::lang::Class : public java::lang::Object\n \t\t\t\t\t       int method_idx);\n \n   friend void ::_Jv_InitClass (jclass klass);\n+  friend java::lang::Class* ::_Jv_NewClassFromInitializer (const jclass class_initializer);\n+  friend void _Jv_RegisterNewClasses (void **classes);\n \n   friend _Jv_Method* ::_Jv_LookupDeclaredMethod (jclass, _Jv_Utf8Const *, \n \t\t\t\t\t\t _Jv_Utf8Const*, jclass *);"}, {"sha": "e6cfca230370d6ec21d03a5baf1510371ad25f37", "filename": "libjava/java/lang/natClassLoader.cc", "status": "modified", "additions": 53, "deletions": 7, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/621ae65dcd01b01cbf1b4723d55653c8c1c7855b/libjava%2Fjava%2Flang%2FnatClassLoader.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/621ae65dcd01b01cbf1b4723d55653c8c1c7855b/libjava%2Fjava%2Flang%2FnatClassLoader.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatClassLoader.cc?ref=621ae65dcd01b01cbf1b4723d55653c8c1c7855b", "patch": "@@ -45,14 +45,17 @@ details.  */\n #include <gnu/gcj/runtime/BootClassLoader.h>\n #include <gnu/gcj/runtime/SystemClassLoader.h>\n \n+#undef _GNU_SOURCE\n+#define _GNU_SOURCE\n+#include <dlfcn.h>\n+#include <link.h>\n+\n // Size of local hash table.\n #define HASH_LEN 1013\n \n // Hash function for Utf8Consts.\n #define HASH_UTF(Utf) ((Utf)->hash16() % HASH_LEN)\n \n-static jclass loaded_classes[HASH_LEN];\n-\n // This records classes which will be registered with the system class\n // loader when it is initialized.\n static jclass system_class_list;\n@@ -62,6 +65,8 @@ static jclass system_class_list;\n // no longer pay attention to the system abi flag.\n #define SYSTEM_LOADER_INITIALIZED ((jclass) -1)\n \n+static jclass loaded_classes[HASH_LEN];\n+\n // This is the root of a linked list of classes\n static jclass stack_head;\n \n@@ -164,6 +169,8 @@ _Jv_UnregisterInitiatingLoader (jclass klass, java::lang::ClassLoader *loader)\n void\n _Jv_RegisterClasses (const jclass *classes)\n {\n+  _Jv_RegisterLibForGc (classes);\n+\n   for (; *classes; ++classes)\n     {\n       jclass klass = *classes;\n@@ -178,6 +185,9 @@ void\n _Jv_RegisterClasses_Counted (const jclass * classes, size_t count)\n {\n   size_t i;\n+\n+  _Jv_RegisterLibForGc (classes);\n+\n   for (i = 0; i < count; i++)\n     {\n       jclass klass = classes[i];\n@@ -187,6 +197,41 @@ _Jv_RegisterClasses_Counted (const jclass * classes, size_t count)\n     }\n }\n \n+// Create a class on the heap from an initializer struct.\n+jclass\n+_Jv_NewClassFromInitializer (const jclass class_initializer)\n+{\n+  jclass new_class = (jclass)_Jv_AllocObj (sizeof *new_class,\n+\t\t\t\t\t   &java::lang::Class::class$);  \n+  memcpy ((void*)new_class, (void*)class_initializer, sizeof *new_class);\n+\n+  if (_Jv_CheckABIVersion ((unsigned long) new_class->next_or_version))\n+    (*_Jv_RegisterClassHook) (new_class);\n+  \n+  return new_class;\n+}\n+\n+// Called by compiler-generated code at DSO initialization.  CLASSES\n+// is an array of pairs: the first item of each pair is a pointer to\n+// the initialized data that is a class initializer in a DSO, and the\n+// second is a pointer to a class reference.\n+// _Jv_NewClassFromInitializer() creates the new class (on the Java\n+// heap) and we write the address of the new class into the address\n+// pointed to by the second word.\n+void\n+_Jv_RegisterNewClasses (void **classes)\n+{\n+  _Jv_InitGC ();\n+\n+  jclass initializer;\n+\n+  while ((initializer = (jclass)*classes++))\n+    {\n+      jclass *class_ptr = (jclass *)*classes++;\n+      *class_ptr = _Jv_NewClassFromInitializer (initializer);\n+    }      \n+}\n+  \n void\n _Jv_RegisterClassHookDefault (jclass klass)\n {\n@@ -389,6 +434,12 @@ static _Jv_IDispatchTable *array_idt = NULL;\n static jshort array_depth = 0;\n static jclass *array_ancestors = NULL;\n \n+static jclass interfaces[] =\n+{\n+  &java::lang::Cloneable::class$,\n+  &java::io::Serializable::class$\n+};\n+\n // Create a class representing an array of ELEMENT and store a pointer to it\n // in element->arrayclass. LOADER is the ClassLoader which _initiated_ the \n // instantiation of this array. ARRAY_VTABLE is the vtable to use for the new \n@@ -464,11 +515,6 @@ _Jv_NewArrayClass (jclass element, java::lang::ClassLoader *loader,\n   array_class->element_type = element;\n \n   // Register our interfaces.\n-  static jclass interfaces[] =\n-    {\n-      &java::lang::Cloneable::class$,\n-      &java::io::Serializable::class$\n-    };\n   array_class->interfaces = interfaces;\n   array_class->interface_count = sizeof interfaces / sizeof interfaces[0];\n "}, {"sha": "e107316d047afb9c4abd0b69eaeaaa8f2dc54b6a", "filename": "libjava/link.cc", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/621ae65dcd01b01cbf1b4723d55653c8c1c7855b/libjava%2Flink.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/621ae65dcd01b01cbf1b4723d55653c8c1c7855b/libjava%2Flink.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Flink.cc?ref=621ae65dcd01b01cbf1b4723d55653c8c1c7855b", "patch": "@@ -21,6 +21,12 @@ details.  */\n \n #include <java-interp.h>\n \n+// Set GC_DEBUG before including gc.h!\n+#ifdef LIBGCJ_GC_DEBUG\n+# define GC_DEBUG\n+#endif\n+#include <gc.h>\n+\n #include <jvm.h>\n #include <gcj/cni.h>\n #include <string.h>\n@@ -265,6 +271,21 @@ _Jv_Linker::resolve_pool_entry (jclass klass, int index, bool lazy)\n {\n   using namespace java::lang::reflect;\n \n+  if (GC_base (klass) && klass->constants.data\n+      && ! GC_base (klass->constants.data))\n+    {\n+      jsize count = klass->constants.size;\n+      if (count)\n+\t{\n+\t  _Jv_word* constants\n+\t    = (_Jv_word*) _Jv_AllocRawObj (count * sizeof (_Jv_word));\n+\t  memcpy ((void*)constants,\n+\t\t  (void*)klass->constants.data,\n+\t\t  count * sizeof (_Jv_word));\n+\t  klass->constants.data = constants;\n+\t}\n+    }\n+\n   _Jv_Constants *pool = &klass->constants;\n \n   if ((pool->tags[index] & JV_CONSTANT_ResolvedFlag) != 0)\n@@ -1893,6 +1914,21 @@ _Jv_Linker::wait_for_state (jclass klass, int state)\n   java::lang::Thread *save = klass->thread;\n   klass->thread = self;\n \n+  // Allocate memory for static fields and constants.\n+  if (GC_base (klass) && klass->fields && ! GC_base (klass->fields))\n+    {\n+      jsize count = klass->field_count;\n+      if (count)\n+\t{\n+\t  _Jv_Field* fields \n+\t    = (_Jv_Field*) _Jv_AllocRawObj (count * sizeof (_Jv_Field));\n+\t  memcpy ((void*)fields,\n+\t\t  (void*)klass->fields,\n+\t\t  count * sizeof (_Jv_Field));\n+\t  klass->fields = fields;\n+\t}\n+    }\n+      \n   // Print some debugging info if requested.  Interpreted classes are\n   // handled in defineclass, so we only need to handle the two\n   // pre-compiled cases here."}, {"sha": "1169d9bd8dc9f9d3ab183465092e92c4613e85f4", "filename": "libjava/scripts/makemake.tcl", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/621ae65dcd01b01cbf1b4723d55653c8c1c7855b/libjava%2Fscripts%2Fmakemake.tcl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/621ae65dcd01b01cbf1b4723d55653c8c1c7855b/libjava%2Fscripts%2Fmakemake.tcl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fscripts%2Fmakemake.tcl?ref=621ae65dcd01b01cbf1b4723d55653c8c1c7855b", "patch": "@@ -224,7 +224,7 @@ proc emit_bc_rule {package} {\n     set omit \"| grep -v $exclusion_map($package)\"\n   }\n   puts  \"\\t@find classpath/lib/$package -name '*.class'${omit} > $tname\"\n-  puts \"\\t\\$(LTGCJCOMPILE) -fjni -findirect-dispatch -c -o $loname @$tname\"\n+  puts \"\\t\\$(LTGCJCOMPILE) -fjni -findirect-dispatch -fno-indirect-classes -c -o $loname @$tname\"\n   puts \"\\t@rm -f $tname\"\n   puts \"\"\n "}, {"sha": "d3463d3a1e44c8c4550c020027f8f88f981c6744", "filename": "libjava/sources.am", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/621ae65dcd01b01cbf1b4723d55653c8c1c7855b/libjava%2Fsources.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/621ae65dcd01b01cbf1b4723d55653c8c1c7855b/libjava%2Fsources.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fsources.am?ref=621ae65dcd01b01cbf1b4723d55653c8c1c7855b", "patch": "@@ -164,7 +164,7 @@ classpath/gnu/CORBA/typecodes/StringTypeCode.java\n \n gnu-CORBA.lo: $(gnu_CORBA_source_files)\n \t@find classpath/lib/gnu/CORBA -name '*.class' > gnu-CORBA.list\n-\t$(LTGCJCOMPILE) -fjni -findirect-dispatch -c -o gnu-CORBA.lo @gnu-CORBA.list\n+\t$(LTGCJCOMPILE) -fjni -findirect-dispatch -fno-indirect-classes -c -o gnu-CORBA.lo @gnu-CORBA.list\n \t@rm -f gnu-CORBA.list\n \n gnu_awt_source_files = \\\n@@ -772,7 +772,7 @@ classpath/gnu/java/awt/peer/gtk/GtkWindowPeer.java\n \n gnu-java-awt-peer-gtk.lo: $(gnu_java_awt_peer_gtk_source_files)\n \t@find classpath/lib/gnu/java/awt/peer/gtk -name '*.class' > gnu-java-awt-peer-gtk.list\n-\t$(LTGCJCOMPILE) -fjni -findirect-dispatch -c -o gnu-java-awt-peer-gtk.lo @gnu-java-awt-peer-gtk.list\n+\t$(LTGCJCOMPILE) -fjni -findirect-dispatch -fno-indirect-classes -c -o gnu-java-awt-peer-gtk.lo @gnu-java-awt-peer-gtk.list\n \t@rm -f gnu-java-awt-peer-gtk.list\n \n gnu_java_awt_peer_qt_source_files = \\\n@@ -822,7 +822,7 @@ classpath/gnu/java/awt/peer/qt/QtWindowPeer.java\n \n gnu-java-awt-peer-qt.lo: $(gnu_java_awt_peer_qt_source_files)\n \t@find classpath/lib/gnu/java/awt/peer/qt -name '*.class' > gnu-java-awt-peer-qt.list\n-\t$(LTGCJCOMPILE) -fjni -findirect-dispatch -c -o gnu-java-awt-peer-qt.lo @gnu-java-awt-peer-qt.list\n+\t$(LTGCJCOMPILE) -fjni -findirect-dispatch -fno-indirect-classes -c -o gnu-java-awt-peer-qt.lo @gnu-java-awt-peer-qt.list\n \t@rm -f gnu-java-awt-peer-qt.list\n \n gnu_java_awt_peer_swing_source_files = \\\n@@ -843,7 +843,7 @@ classpath/gnu/java/awt/peer/swing/SwingWindowPeer.java\n \n gnu-java-awt-peer-swing.lo: $(gnu_java_awt_peer_swing_source_files)\n \t@find classpath/lib/gnu/java/awt/peer/swing -name '*.class' > gnu-java-awt-peer-swing.list\n-\t$(LTGCJCOMPILE) -fjni -findirect-dispatch -c -o gnu-java-awt-peer-swing.lo @gnu-java-awt-peer-swing.list\n+\t$(LTGCJCOMPILE) -fjni -findirect-dispatch -fno-indirect-classes -c -o gnu-java-awt-peer-swing.lo @gnu-java-awt-peer-swing.list\n \t@rm -f gnu-java-awt-peer-swing.list\n \n gnu_java_beans_source_files = \\\n@@ -932,7 +932,7 @@ classpath/gnu/java/beans/encoder/elements/StringReference.java\n \n gnu-java-beans.lo: $(gnu_java_beans_source_files)\n \t@find classpath/lib/gnu/java/beans -name '*.class' > gnu-java-beans.list\n-\t$(LTGCJCOMPILE) -fjni -findirect-dispatch -c -o gnu-java-beans.lo @gnu-java-beans.list\n+\t$(LTGCJCOMPILE) -fjni -findirect-dispatch -fno-indirect-classes -c -o gnu-java-beans.lo @gnu-java-beans.list\n \t@rm -f gnu-java-beans.list\n \n gnu_java_io_source_files = \\\n@@ -2833,7 +2833,7 @@ classpath/gnu/javax/rmi/CORBA/ValueHandlerDelegateImpl.java\n \n gnu-javax-rmi.lo: $(gnu_javax_rmi_source_files)\n \t@find classpath/lib/gnu/javax/rmi -name '*.class' > gnu-javax-rmi.list\n-\t$(LTGCJCOMPILE) -fjni -findirect-dispatch -c -o gnu-javax-rmi.lo @gnu-javax-rmi.list\n+\t$(LTGCJCOMPILE) -fjni -findirect-dispatch -fno-indirect-classes -c -o gnu-javax-rmi.lo @gnu-javax-rmi.list\n \t@rm -f gnu-javax-rmi.list\n \n gnu_javax_security_auth_source_files = \\\n@@ -2902,7 +2902,7 @@ classpath/gnu/javax/sound/midi/dssi/DSSISynthesizer.java\n \n gnu-javax-sound-midi.lo: $(gnu_javax_sound_midi_source_files)\n \t@find classpath/lib/gnu/javax/sound/midi -name '*.class' > gnu-javax-sound-midi.list\n-\t$(LTGCJCOMPILE) -fjni -findirect-dispatch -c -o gnu-javax-sound-midi.lo @gnu-javax-sound-midi.list\n+\t$(LTGCJCOMPILE) -fjni -findirect-dispatch -fno-indirect-classes -c -o gnu-javax-sound-midi.lo @gnu-javax-sound-midi.list\n \t@rm -f gnu-javax-sound-midi.list\n \n gnu_javax_swing_text_html_parser_source_files = \\\n@@ -3448,7 +3448,7 @@ classpath/gnu/xml/xpath/XPathTokenizer.java\n \n gnu-xml.lo: $(gnu_xml_source_files)\n \t@find classpath/lib/gnu/xml -name '*.class' > gnu-xml.list\n-\t$(LTGCJCOMPILE) -fjni -findirect-dispatch -c -o gnu-xml.lo @gnu-xml.list\n+\t$(LTGCJCOMPILE) -fjni -findirect-dispatch -fno-indirect-classes -c -o gnu-xml.lo @gnu-xml.list\n \t@rm -f gnu-xml.list\n \n java_applet_source_files = \\\n@@ -5420,7 +5420,7 @@ classpath/javax/imageio/stream/MemoryCacheImageOutputStream.java\n \n javax-imageio.lo: $(javax_imageio_source_files)\n \t@find classpath/lib/javax/imageio -name '*.class' > javax-imageio.list\n-\t$(LTGCJCOMPILE) -fjni -findirect-dispatch -c -o javax-imageio.lo @javax-imageio.list\n+\t$(LTGCJCOMPILE) -fjni -findirect-dispatch -fno-indirect-classes -c -o javax-imageio.lo @javax-imageio.list\n \t@rm -f javax-imageio.list\n \n javax_management_source_files = \\\n@@ -5860,7 +5860,7 @@ classpath/javax/rmi/PortableRemoteObject.java\n \n javax-rmi.lo: $(javax_rmi_source_files)\n \t@find classpath/lib/javax/rmi -name '*.class' > javax-rmi.list\n-\t$(LTGCJCOMPILE) -fjni -findirect-dispatch -c -o javax-rmi.lo @javax-rmi.list\n+\t$(LTGCJCOMPILE) -fjni -findirect-dispatch -fno-indirect-classes -c -o javax-rmi.lo @javax-rmi.list\n \t@rm -f javax-rmi.list\n \n javax_security_auth_source_files = \\\n@@ -7051,7 +7051,7 @@ classpath/javax/xml/xpath/XPathVariableResolver.java\n \n javax-xml.lo: $(javax_xml_source_files)\n \t@find classpath/lib/javax/xml -name '*.class' > javax-xml.list\n-\t$(LTGCJCOMPILE) -fjni -findirect-dispatch -c -o javax-xml.lo @javax-xml.list\n+\t$(LTGCJCOMPILE) -fjni -findirect-dispatch -fno-indirect-classes -c -o javax-xml.lo @javax-xml.list\n \t@rm -f javax-xml.list\n \n org_ietf_jgss_source_files = \\\n@@ -7615,7 +7615,7 @@ classpath/org/omg/stub/java/rmi/_Remote_Stub.java\n \n org-omg.lo: $(org_omg_source_files)\n \t@find classpath/lib/org/omg -name '*.class' > org-omg.list\n-\t$(LTGCJCOMPILE) -fjni -findirect-dispatch -c -o org-omg.lo @org-omg.list\n+\t$(LTGCJCOMPILE) -fjni -findirect-dispatch -fno-indirect-classes -c -o org-omg.lo @org-omg.list\n \t@rm -f org-omg.list\n \n org_relaxng_source_files = \\\n@@ -7632,7 +7632,7 @@ classpath/external/relaxngDatatype/org/relaxng/datatype/helpers/StreamingValidat\n \n org-relaxng.lo: $(org_relaxng_source_files)\n \t@find classpath/lib/org/relaxng -name '*.class' > org-relaxng.list\n-\t$(LTGCJCOMPILE) -fjni -findirect-dispatch -c -o org-relaxng.lo @org-relaxng.list\n+\t$(LTGCJCOMPILE) -fjni -findirect-dispatch -fno-indirect-classes -c -o org-relaxng.lo @org-relaxng.list\n \t@rm -f org-relaxng.list\n \n org_w3c_source_files = \\\n@@ -7785,7 +7785,7 @@ classpath/external/w3c_dom/org/w3c/dom/xpath/XPathResult.java\n \n org-w3c.lo: $(org_w3c_source_files)\n \t@find classpath/lib/org/w3c -name '*.class' > org-w3c.list\n-\t$(LTGCJCOMPILE) -fjni -findirect-dispatch -c -o org-w3c.lo @org-w3c.list\n+\t$(LTGCJCOMPILE) -fjni -findirect-dispatch -fno-indirect-classes -c -o org-w3c.lo @org-w3c.list\n \t@rm -f org-w3c.list\n \n org_xml_source_files = \\\n@@ -7828,7 +7828,7 @@ classpath/external/sax/org/xml/sax/helpers/XMLReaderFactory.java\n \n org-xml.lo: $(org_xml_source_files)\n \t@find classpath/lib/org/xml -name '*.class' > org-xml.list\n-\t$(LTGCJCOMPILE) -fjni -findirect-dispatch -c -o org-xml.lo @org-xml.list\n+\t$(LTGCJCOMPILE) -fjni -findirect-dispatch -fno-indirect-classes -c -o org-xml.lo @org-xml.list\n \t@rm -f org-xml.list\n \n "}]}