{"sha": "22d34a2a50651d01669b6fbcdb9677c18d2197c5", "node_id": "C_kwDOANBUbNoAKDIyZDM0YTJhNTA2NTFkMDE2NjliNmZiY2RiOTY3N2MxOGQyMTk3YzU", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-10-04T13:04:20Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-10-04T14:23:28Z"}, "message": "libstdc++: Implement P1518R2 for container deduction guides\n\nThis implements the C++23 P1518R2 proposal \"Stop overconstraining\nallocators in container deduction guides\" as a fix for C++17 and C++20\ntoo.\n\nThe changes allow class template argument deduction to ignore the type\nof a constructor argument that initializes an allocator_type parameter\nif the type should be deducible only from the other arguments. So for\nthe constructor vector(const vector&, const allocator_type&) only the\nfirst argument is used for deduction, allowing the second argument to be\nanything that is implicitly convertible to argument_type. Previously\ndeduction would fail or an ill-formed type would be deduced if the\nsecond argument wasn't of type allocator_type.\n\nThe unordered containers do not need changes, because their\nallocator-extended constructors use the allocator_type alias, which\ncomes from the dependent base class so is already a non-deduced context.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/forward_list.h (forward_list): Use non-deduced\n\tcontext for allocator parameter of allocator-extended copy and\n\tmove constructors.\n\t* include/bits/stl_bvector.h (vector<bool>): Likewise.\n\t* include/bits/stl_deque.h (deque): Likewise.\n\t* include/bits/stl_list.h (list): Likewise.\n\t* include/bits/stl_map.h (map): Likewise.\n\t* include/bits/stl_multimap.h (multimap): Likewise.\n\t* include/bits/stl_multiset.h (multiset): Likewise.\n\t* include/bits/stl_set.h (set): Likewise.\n\t* include/bits/stl_vector.h (vector): Likewise.\n\t* include/bits/stl_queue.h (queue, priority_queue): Do not\n\tconstrain Allocator template parameter of deduction guides that\n\thave a Container parameter.\n\t* include/bits/stl_stack.h (stack): Likewise.\n\t* include/debug/deque (__gnu_debug::deque): Use non-deduced\n\tcontext for allocator parameter of allocator-extended copy and\n\tmove constructors.\n\t* include/debug/list (__gnu_debug::list): Likewise.\n\t* include/debug/map.h (__gnu_debug::map): Likewise.\n\t* include/debug/multimap.h (__gnu_debug::multimap): Likewise.\n\t* include/debug/multiset.h (__gnu_debug::multiset): Likewise.\n\t* include/debug/set.h (__gnu_debug::set): Likewise.\n\t* include/debug/vector (__gnu_debug::vector): Likewise.\n\t* testsuite/23_containers/deque/cons/deduction.cc: Test class\n\ttemplate argument deduction with non-deduced allocator\n\targuments.\n\t* testsuite/23_containers/forward_list/cons/deduction.cc:\n\tLikewise.\n\t* testsuite/23_containers/list/cons/deduction.cc: Likewise.\n\t* testsuite/23_containers/map/cons/deduction.cc: Likewise.\n\t* testsuite/23_containers/multimap/cons/deduction.cc: Likewise.\n\t* testsuite/23_containers/multiset/cons/deduction.cc: Likewise.\n\t* testsuite/23_containers/priority_queue/deduction.cc: Likewise.\n\t* testsuite/23_containers/queue/deduction.cc: Likewise.\n\t* testsuite/23_containers/set/cons/deduction.cc: Likewise.\n\t* testsuite/23_containers/stack/deduction.cc: Likewise.\n\t* testsuite/23_containers/unordered_map/cons/deduction.cc:\n\tLikewise.\n\t* testsuite/23_containers/unordered_multimap/cons/deduction.cc:\n\tLikewise.\n\t* testsuite/23_containers/unordered_multiset/cons/deduction.cc:\n\tLikewise.\n\t* testsuite/23_containers/unordered_set/cons/deduction.cc:\n\tLikewise.\n\t* testsuite/23_containers/vector/cons/deduction.cc: Likewise.", "tree": {"sha": "98479ac458d4dac2a683cd42f001aff3cc1f6d60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98479ac458d4dac2a683cd42f001aff3cc1f6d60"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22d34a2a50651d01669b6fbcdb9677c18d2197c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22d34a2a50651d01669b6fbcdb9677c18d2197c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22d34a2a50651d01669b6fbcdb9677c18d2197c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22d34a2a50651d01669b6fbcdb9677c18d2197c5/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "728e639d82099035fdfe69b716a54717ae7050e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/728e639d82099035fdfe69b716a54717ae7050e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/728e639d82099035fdfe69b716a54717ae7050e0"}], "stats": {"total": 607, "additions": 568, "deletions": 39}, "files": [{"sha": "aa8623b4c19752fbb7d81bd9acedcc51a241665c", "filename": "libstdc++-v3/include/bits/forward_list.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h?ref=22d34a2a50651d01669b6fbcdb9677c18d2197c5", "patch": "@@ -480,7 +480,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  @param  __list  Input list to copy.\n        *  @param  __al    An allocator object.\n        */\n-      forward_list(const forward_list& __list, const _Alloc& __al)\n+      forward_list(const forward_list& __list,\n+\t\t   const __type_identity_t<_Alloc>& __al)\n       : _Base(_Node_alloc_type(__al))\n       { _M_range_initialize(__list.begin(), __list.end()); }\n \n@@ -508,7 +509,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  @param  __list  Input list to move.\n        *  @param  __al    An allocator object.\n        */\n-      forward_list(forward_list&& __list, const _Alloc& __al)\n+      forward_list(forward_list&& __list,\n+\t\t   const __type_identity_t<_Alloc>& __al)\n       noexcept(_Node_alloc_traits::_S_always_equal())\n       : forward_list(std::move(__list), _Node_alloc_type(__al),\n \t\t     typename _Node_alloc_traits::is_always_equal{})"}, {"sha": "3778d5a770a5cf85e2c80563de1e4c4ded3b9b6f", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=22d34a2a50651d01669b6fbcdb9677c18d2197c5", "patch": "@@ -706,13 +706,13 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       }\n \n     public:\n-      vector(vector&& __x, const allocator_type& __a)\n+      vector(vector&& __x, const __type_identity_t<allocator_type>& __a)\n       noexcept(_Bit_alloc_traits::_S_always_equal())\n       : vector(std::move(__x), __a,\n \t       typename _Bit_alloc_traits::is_always_equal{})\n       { }\n \n-      vector(const vector& __x, const allocator_type& __a)\n+      vector(const vector& __x, const __type_identity_t<allocator_type>& __a)\n       : _Base(__a)\n       {\n \t_M_initialize(__x.size());"}, {"sha": "268fb9ef4058099dd650d308a94de647587a4c25", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=22d34a2a50651d01669b6fbcdb9677c18d2197c5", "patch": "@@ -932,14 +932,14 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       deque(deque&&) = default;\n \n       /// Copy constructor with alternative allocator\n-      deque(const deque& __x, const allocator_type& __a)\n+      deque(const deque& __x, const __type_identity_t<allocator_type>& __a)\n       : _Base(__a, __x.size())\n       { std::__uninitialized_copy_a(__x.begin(), __x.end(),\n \t\t\t\t    this->_M_impl._M_start,\n \t\t\t\t    _M_get_Tp_allocator()); }\n \n       /// Move constructor with alternative allocator\n-      deque(deque&& __x, const allocator_type& __a)\n+      deque(deque&& __x, const __type_identity_t<allocator_type>& __a)\n       : deque(std::move(__x), __a, typename _Alloc_traits::is_always_equal{})\n       { }\n "}, {"sha": "96d2a2f0f69d71949e4e429e35a463f9594ff186", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=22d34a2a50651d01669b6fbcdb9677c18d2197c5", "patch": "@@ -836,7 +836,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       : _Base(_Node_alloc_type(__a))\n       { _M_initialize_dispatch(__l.begin(), __l.end(), __false_type()); }\n \n-      list(const list& __x, const allocator_type& __a)\n+      list(const list& __x, const __type_identity_t<allocator_type>& __a)\n       : _Base(_Node_alloc_type(__a))\n       { _M_initialize_dispatch(__x.begin(), __x.end(), __false_type()); }\n \n@@ -856,7 +856,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       }\n \n     public:\n-      list(list&& __x, const allocator_type& __a)\n+      list(list&& __x, const __type_identity_t<allocator_type>& __a)\n       noexcept(_Node_alloc_traits::_S_always_equal())\n       : list(std::move(__x), __a,\n \t     typename _Node_alloc_traits::is_always_equal{})"}, {"sha": "cc87f11fb11e3578454d4496009f4c274689b64b", "filename": "libstdc++-v3/include/bits/stl_map.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h?ref=22d34a2a50651d01669b6fbcdb9677c18d2197c5", "patch": "@@ -237,11 +237,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       : _M_t(_Pair_alloc_type(__a)) { }\n \n       /// Allocator-extended copy constructor.\n-      map(const map& __m, const allocator_type& __a)\n+      map(const map& __m, const __type_identity_t<allocator_type>& __a)\n       : _M_t(__m._M_t, _Pair_alloc_type(__a)) { }\n \n       /// Allocator-extended move constructor.\n-      map(map&& __m, const allocator_type& __a)\n+      map(map&& __m, const __type_identity_t<allocator_type>& __a)\n       noexcept(is_nothrow_copy_constructible<_Compare>::value\n \t       && _Alloc_traits::_S_always_equal())\n       : _M_t(std::move(__m._M_t), _Pair_alloc_type(__a)) { }"}, {"sha": "1b9648e3bd449e3674c0a6244c50439b93e42ddf", "filename": "libstdc++-v3/include/bits/stl_multimap.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h?ref=22d34a2a50651d01669b6fbcdb9677c18d2197c5", "patch": "@@ -234,11 +234,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       : _M_t(_Pair_alloc_type(__a)) { }\n \n       /// Allocator-extended copy constructor.\n-      multimap(const multimap& __m, const allocator_type& __a)\n+      multimap(const multimap& __m,\n+\t       const __type_identity_t<allocator_type>& __a)\n       : _M_t(__m._M_t, _Pair_alloc_type(__a)) { }\n \n       /// Allocator-extended move constructor.\n-      multimap(multimap&& __m, const allocator_type& __a)\n+      multimap(multimap&& __m, const __type_identity_t<allocator_type>& __a)\n       noexcept(is_nothrow_copy_constructible<_Compare>::value\n \t       && _Alloc_traits::_S_always_equal())\n       : _M_t(std::move(__m._M_t), _Pair_alloc_type(__a)) { }"}, {"sha": "5d9d6195ae169273d7f91e9fd0ed70c14399abfa", "filename": "libstdc++-v3/include/bits/stl_multiset.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h?ref=22d34a2a50651d01669b6fbcdb9677c18d2197c5", "patch": "@@ -248,11 +248,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       : _M_t(_Key_alloc_type(__a)) { }\n \n       /// Allocator-extended copy constructor.\n-      multiset(const multiset& __m, const allocator_type& __a)\n+      multiset(const multiset& __m,\n+\t       const __type_identity_t<allocator_type>& __a)\n       : _M_t(__m._M_t, _Key_alloc_type(__a)) { }\n \n       /// Allocator-extended move constructor.\n-      multiset(multiset&& __m, const allocator_type& __a)\n+      multiset(multiset&& __m, const __type_identity_t<allocator_type>& __a)\n       noexcept(is_nothrow_copy_constructible<_Compare>::value\n \t       && _Alloc_traits::_S_always_equal())\n       : _M_t(std::move(__m._M_t), _Key_alloc_type(__a)) { }"}, {"sha": "3da65c78eb80fafd7b6ac10af2fd75e7ae832074", "filename": "libstdc++-v3/include/bits/stl_queue.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h?ref=22d34a2a50651d01669b6fbcdb9677c18d2197c5", "patch": "@@ -342,8 +342,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     queue(_Container) -> queue<typename _Container::value_type, _Container>;\n \n   template<typename _Container, typename _Allocator,\n-\t   typename = _RequireNotAllocator<_Container>,\n-\t   typename = _RequireAllocator<_Allocator>>\n+\t   typename = _RequireNotAllocator<_Container>>\n     queue(_Container, _Allocator)\n     -> queue<typename _Container::value_type, _Container>;\n \n@@ -817,8 +816,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _Compare, typename _Container, typename _Allocator,\n \t   typename = _RequireNotAllocator<_Compare>,\n-\t   typename = _RequireNotAllocator<_Container>,\n-\t   typename = _RequireAllocator<_Allocator>>\n+\t   typename = _RequireNotAllocator<_Container>>\n     priority_queue(_Compare, _Container, _Allocator)\n     -> priority_queue<typename _Container::value_type, _Container, _Compare>;\n #endif"}, {"sha": "f0dfa05886f2c5b842e6058ed71568448105d930", "filename": "libstdc++-v3/include/bits/stl_set.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h?ref=22d34a2a50651d01669b6fbcdb9677c18d2197c5", "patch": "@@ -252,11 +252,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       : _M_t(_Key_alloc_type(__a)) { }\n \n       /// Allocator-extended copy constructor.\n-      set(const set& __x, const allocator_type& __a)\n+      set(const set& __x, const __type_identity_t<allocator_type>& __a)\n       : _M_t(__x._M_t, _Key_alloc_type(__a)) { }\n \n       /// Allocator-extended move constructor.\n-      set(set&& __x, const allocator_type& __a)\n+      set(set&& __x, const __type_identity_t<allocator_type>& __a)\n       noexcept(is_nothrow_copy_constructible<_Compare>::value\n \t       && _Alloc_traits::_S_always_equal())\n       : _M_t(std::move(__x._M_t), _Key_alloc_type(__a)) { }"}, {"sha": "f04fa6af47984e9e8bc90ffb1f64777661ea9a96", "filename": "libstdc++-v3/include/bits/stl_stack.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h?ref=22d34a2a50651d01669b6fbcdb9677c18d2197c5", "patch": "@@ -317,8 +317,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     stack(_Container) -> stack<typename _Container::value_type, _Container>;\n \n   template<typename _Container, typename _Allocator,\n-\t   typename = _RequireNotAllocator<_Container>,\n-\t   typename = _RequireAllocator<_Allocator>>\n+\t   typename = _RequireNotAllocator<_Container>>\n     stack(_Container, _Allocator)\n     -> stack<typename _Container::value_type, _Container>;\n "}, {"sha": "2023581bc79cd08e809f4477ea05f26cf967cc90", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=22d34a2a50651d01669b6fbcdb9677c18d2197c5", "patch": "@@ -572,7 +572,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       vector(vector&&) noexcept = default;\n \n       /// Copy constructor with alternative allocator\n-      vector(const vector& __x, const allocator_type& __a)\n+      vector(const vector& __x, const __type_identity_t<allocator_type>& __a)\n       : _Base(__x.size(), __a)\n       {\n \tthis->_M_impl._M_finish =\n@@ -604,7 +604,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n     public:\n       /// Move constructor with alternative allocator\n-      vector(vector&& __rv, const allocator_type& __m)\n+      vector(vector&& __rv, const __type_identity_t<allocator_type>& __m)\n       noexcept( noexcept(\n \tvector(std::declval<vector&&>(), std::declval<const allocator_type&>(),\n \t       std::declval<typename _Alloc_traits::is_always_equal>())) )"}, {"sha": "8e4811149d2d36082c20cf88ffe251d91fca059b", "filename": "libstdc++-v3/include/debug/deque", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque?ref=22d34a2a50651d01669b6fbcdb9677c18d2197c5", "patch": "@@ -108,10 +108,10 @@ namespace __debug\n       deque(const deque&) = default;\n       deque(deque&&) = default;\n \n-      deque(const deque& __d, const _Allocator& __a)\n+      deque(const deque& __d, const __type_identity_t<_Allocator>& __a)\n       : _Base(__d, __a) { }\n \n-      deque(deque&& __d, const _Allocator& __a)\n+      deque(deque&& __d, const __type_identity_t<_Allocator>& __a)\n       : _Safe(std::move(__d)), _Base(std::move(__d), __a) { }\n \n       deque(initializer_list<value_type> __l,"}, {"sha": "de30edb19c2406cdaec152403c74a76544c7db53", "filename": "libstdc++-v3/include/debug/list", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist?ref=22d34a2a50651d01669b6fbcdb9677c18d2197c5", "patch": "@@ -115,10 +115,10 @@ namespace __debug\n \n       ~list() = default;\n \n-      list(const list& __x, const allocator_type& __a)\n+      list(const list& __x, const __type_identity_t<allocator_type>& __a)\n       : _Base(__x, __a) { }\n \n-      list(list&& __x, const allocator_type& __a)\n+      list(list&& __x, const __type_identity_t<allocator_type>& __a)\n \tnoexcept(\n \t  std::is_nothrow_constructible<_Base,\n \t    _Base, const allocator_type&>::value )"}, {"sha": "9e142cf70239a0c9fee379ce7213958e3f72dbcd", "filename": "libstdc++-v3/include/debug/map.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h?ref=22d34a2a50651d01669b6fbcdb9677c18d2197c5", "patch": "@@ -114,10 +114,10 @@ namespace __debug\n       map(const allocator_type& __a)\n       : _Base(__a) { }\n \n-      map(const map& __m, const allocator_type& __a)\n+      map(const map& __m, const __type_identity_t<allocator_type>& __a)\n       : _Base(__m, __a) { }\n \n-      map(map&& __m, const allocator_type& __a)\n+      map(map&& __m, const __type_identity_t<allocator_type>& __a)\n       noexcept( noexcept(_Base(std::move(__m._M_base()), __a)) )\n       : _Safe(std::move(__m._M_safe()), __a),\n \t_Base(std::move(__m._M_base()), __a) { }"}, {"sha": "a05b8a8493e67e2912a5777efd833154c6d7a06a", "filename": "libstdc++-v3/include/debug/multimap.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h?ref=22d34a2a50651d01669b6fbcdb9677c18d2197c5", "patch": "@@ -114,10 +114,11 @@ namespace __debug\n       multimap(const allocator_type& __a)\n       : _Base(__a) { }\n \n-      multimap(const multimap& __m, const allocator_type& __a)\n+      multimap(const multimap& __m,\n+\t       const __type_identity_t<allocator_type>& __a)\n       : _Base(__m, __a) { }\n \n-      multimap(multimap&& __m, const allocator_type& __a)\n+      multimap(multimap&& __m, const __type_identity_t<allocator_type>& __a)\n       noexcept( noexcept(_Base(std::move(__m._M_base()), __a)) )\n       : _Safe(std::move(__m._M_safe()), __a),\n \t_Base(std::move(__m._M_base()), __a) { }"}, {"sha": "a312ccf6f5066732706dc6141765d8254122ff06", "filename": "libstdc++-v3/include/debug/multiset.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h?ref=22d34a2a50651d01669b6fbcdb9677c18d2197c5", "patch": "@@ -113,10 +113,11 @@ namespace __debug\n       multiset(const allocator_type& __a)\n       : _Base(__a) { }\n \n-      multiset(const multiset& __m, const allocator_type& __a)\n+      multiset(const multiset& __m,\n+\t       const __type_identity_t<allocator_type>& __a)\n       : _Base(__m, __a) { }\n \n-      multiset(multiset&& __m, const allocator_type& __a)\n+      multiset(multiset&& __m, const __type_identity_t<allocator_type>& __a)\n       noexcept( noexcept(_Base(std::move(__m._M_base()), __a)) )\n       : _Safe(std::move(__m._M_safe()), __a),\n \t_Base(std::move(__m._M_base()), __a) { }"}, {"sha": "01da942eb78056d8476132bf22c774669e0f11e4", "filename": "libstdc++-v3/include/debug/set.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h?ref=22d34a2a50651d01669b6fbcdb9677c18d2197c5", "patch": "@@ -113,10 +113,10 @@ namespace __debug\n       set(const allocator_type& __a)\n       : _Base(__a) { }\n \n-      set(const set& __x, const allocator_type& __a)\n+      set(const set& __x, const __type_identity_t<allocator_type>& __a)\n       : _Base(__x, __a) { }\n \n-      set(set&& __x, const allocator_type& __a)\n+      set(set&& __x, const __type_identity_t<allocator_type>& __a)\n       noexcept( noexcept(_Base(std::move(__x._M_base()), __a)) )\n       : _Safe(std::move(__x._M_safe()), __a),\n \t_Base(std::move(__x._M_base()), __a) { }"}, {"sha": "03fd9405cc91ddee77788fb2bf9e7dc4225f96df", "filename": "libstdc++-v3/include/debug/vector", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector?ref=22d34a2a50651d01669b6fbcdb9677c18d2197c5", "patch": "@@ -212,10 +212,10 @@ namespace __debug\n       vector(const vector&) = default;\n       vector(vector&&) = default;\n \n-      vector(const vector& __x, const allocator_type& __a)\n+      vector(const vector& __x, const __type_identity_t<allocator_type>& __a)\n       : _Base(__x, __a) { }\n \n-      vector(vector&& __x, const allocator_type& __a)\n+      vector(vector&& __x, const __type_identity_t<allocator_type>& __a)\n       noexcept(\n \tstd::is_nothrow_constructible<_Base,\n \t  _Base, const allocator_type&>::value )"}, {"sha": "5cb0a58a22c821e5bcfc8a081d6c3d7f3b4b379f", "filename": "libstdc++-v3/testsuite/23_containers/deque/cons/deduction.cc", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcons%2Fdeduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcons%2Fdeduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcons%2Fdeduction.cc?ref=22d34a2a50651d01669b6fbcdb9677c18d2197c5", "patch": "@@ -19,6 +19,7 @@\n \n #include <deque>\n #include <testsuite_iterators.h>\n+#include <testsuite_allocator.h>\n \n template<typename T>\n   using input_iterator_seq\n@@ -67,3 +68,31 @@ test02()\n   std::deque s4(1U, 2L, std::allocator<long>());\n   check_type<std::deque<long>>(s4);\n }\n+\n+struct Pool;\n+\n+template<typename T>\n+struct Alloc : __gnu_test::SimpleAllocator<T>\n+{\n+  Alloc(Pool*) { }\n+\n+  template<typename U>\n+    Alloc(const Alloc<U>&) { }\n+};\n+\n+void\n+test_p1518r2()\n+{\n+  // P1518R2 - Stop overconstraining allocators in container deduction guides.\n+  // This is a C++23 feature but we support it for C++17 too.\n+\n+  using Deque = std::deque<unsigned, Alloc<unsigned>>;\n+  Pool* p = nullptr;\n+  Deque d(p);\n+\n+  std::deque s1(d, p);\n+  check_type<Deque>(s1);\n+\n+  std::deque s2(std::move(d), p);\n+  check_type<Deque>(s2);\n+}"}, {"sha": "701231d12594d1aab9e277c1187b9c70ac402e39", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/cons/deduction.cc", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcons%2Fdeduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcons%2Fdeduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcons%2Fdeduction.cc?ref=22d34a2a50651d01669b6fbcdb9677c18d2197c5", "patch": "@@ -19,6 +19,7 @@\n \n #include <forward_list>\n #include <testsuite_iterators.h>\n+#include <testsuite_allocator.h>\n \n template<typename T>\n   using input_iterator_seq\n@@ -67,3 +68,31 @@ test02()\n   std::forward_list s4(1U, 2L, std::allocator<long>());\n   check_type<std::forward_list<long>>(s4);\n }\n+\n+struct Pool;\n+\n+template<typename T>\n+struct Alloc : __gnu_test::SimpleAllocator<T>\n+{\n+  Alloc(Pool*) { }\n+\n+  template<typename U>\n+    Alloc(const Alloc<U>&) { }\n+};\n+\n+void\n+test_p1518r2()\n+{\n+  // P1518R2 - Stop overconstraining allocators in container deduction guides.\n+  // This is a C++23 feature but we support it for C++17 too.\n+\n+  using Flist = std::forward_list<unsigned, Alloc<unsigned>>;\n+  Pool* p = nullptr;\n+  Flist f(p);\n+\n+  std::forward_list s1(f, p);\n+  check_type<Flist>(s1);\n+\n+  std::forward_list s2(std::move(f), p);\n+  check_type<Flist>(s2);\n+}"}, {"sha": "c747509ffc51eb45b5fac4a34da00626d50664d1", "filename": "libstdc++-v3/testsuite/23_containers/list/cons/deduction.cc", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2Fdeduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2Fdeduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2Fdeduction.cc?ref=22d34a2a50651d01669b6fbcdb9677c18d2197c5", "patch": "@@ -19,6 +19,7 @@\n \n #include <list>\n #include <testsuite_iterators.h>\n+#include <testsuite_allocator.h>\n \n template<typename T>\n   using input_iterator_seq\n@@ -67,3 +68,31 @@ test02()\n   std::list s4(1U, 2L, std::allocator<long>());\n   check_type<std::list<long>>(s4);\n }\n+\n+struct Pool;\n+\n+template<typename T>\n+struct Alloc : __gnu_test::SimpleAllocator<T>\n+{\n+  Alloc(Pool*) { }\n+\n+  template<typename U>\n+    Alloc(const Alloc<U>&) { }\n+};\n+\n+void\n+test_p1518r2()\n+{\n+  // P1518R2 - Stop overconstraining allocators in container deduction guides.\n+  // This is a C++23 feature but we support it for C++17 too.\n+\n+  using List = std::list<unsigned, Alloc<unsigned>>;\n+  Pool* p = nullptr;\n+  List l(p);\n+\n+  std::list s1(l, p);\n+  check_type<List>(s1);\n+\n+  std::list s2(std::move(l), p);\n+  check_type<List>(s2);\n+}"}, {"sha": "f8e6e6e8b99427c88f89e0981d469db6fa861223", "filename": "libstdc++-v3/testsuite/23_containers/map/cons/deduction.cc", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fcons%2Fdeduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fcons%2Fdeduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fcons%2Fdeduction.cc?ref=22d34a2a50651d01669b6fbcdb9677c18d2197c5", "patch": "@@ -222,3 +222,39 @@ void h()\n \t\tstd::map<int, double, std::less<int>,\n \t\t\t SimpleAllocator<value_type>>>);\n }\n+\n+template<typename T, typename U> struct require_same;\n+template<typename T> struct require_same<T, T> { using type = void; };\n+\n+template<typename T, typename U>\n+  typename require_same<T, U>::type\n+  check_type(U&) { }\n+\n+struct Pool;\n+\n+template<typename T>\n+struct Alloc : __gnu_test::SimpleAllocator<T>\n+{\n+  Alloc(Pool*) { }\n+\n+  template<typename U>\n+    Alloc(const Alloc<U>&) { }\n+};\n+\n+void\n+test_p1518r2()\n+{\n+  // P1518R2 - Stop overconstraining allocators in container deduction guides.\n+  // This is a C++23 feature but we support it for C++17 too.\n+\n+  using PairAlloc = Alloc<std::pair<const unsigned, void*>>;\n+  using Map = std::map<unsigned, void*, std::greater<>, PairAlloc>;\n+  Pool* p = nullptr;\n+  Map m(p);\n+\n+  std::map s1(m, p);\n+  check_type<Map>(s1);\n+\n+  std::map s2(std::move(m), p);\n+  check_type<Map>(s2);\n+}"}, {"sha": "f0699e2eefc38fc95e455dd30febe596050b920b", "filename": "libstdc++-v3/testsuite/23_containers/multimap/cons/deduction.cc", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fcons%2Fdeduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fcons%2Fdeduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fcons%2Fdeduction.cc?ref=22d34a2a50651d01669b6fbcdb9677c18d2197c5", "patch": "@@ -174,3 +174,39 @@ void h()\n \t\tstd::multimap<int, double, std::less<int>,\n \t\t\t      SimpleAllocator<value_type>>>);\n }\n+\n+template<typename T, typename U> struct require_same;\n+template<typename T> struct require_same<T, T> { using type = void; };\n+\n+template<typename T, typename U>\n+  typename require_same<T, U>::type\n+  check_type(U&) { }\n+\n+struct Pool;\n+\n+template<typename T>\n+struct Alloc : __gnu_test::SimpleAllocator<T>\n+{\n+  Alloc(Pool*) { }\n+\n+  template<typename U>\n+    Alloc(const Alloc<U>&) { }\n+};\n+\n+void\n+test_p1518r2()\n+{\n+  // P1518R2 - Stop overconstraining allocators in container deduction guides.\n+  // This is a C++23 feature but we support it for C++17 too.\n+\n+  using PairAlloc = Alloc<std::pair<const unsigned, void*>>;\n+  using MMap = std::multimap<unsigned, void*, std::greater<>, PairAlloc>;\n+  Pool* p = nullptr;\n+  MMap m(p);\n+\n+  std::multimap s1(m, p);\n+  check_type<MMap>(s1);\n+\n+  std::multimap s2(std::move(m), p);\n+  check_type<MMap>(s2);\n+}"}, {"sha": "7f4581a6aeb87d73f441fff09811aed54419574d", "filename": "libstdc++-v3/testsuite/23_containers/multiset/cons/deduction.cc", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fcons%2Fdeduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fcons%2Fdeduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fcons%2Fdeduction.cc?ref=22d34a2a50651d01669b6fbcdb9677c18d2197c5", "patch": "@@ -130,3 +130,38 @@ void g()\n \t\tstd::multiset<int, std::less<int>,\n \t\t\t SimpleAllocator<value_type>>>);\n }\n+\n+template<typename T, typename U> struct require_same;\n+template<typename T> struct require_same<T, T> { using type = void; };\n+\n+template<typename T, typename U>\n+  typename require_same<T, U>::type\n+  check_type(U&) { }\n+\n+struct Pool;\n+\n+template<typename T>\n+struct Alloc : __gnu_test::SimpleAllocator<T>\n+{\n+  Alloc(Pool*) { }\n+\n+  template<typename U>\n+    Alloc(const Alloc<U>&) { }\n+};\n+\n+void\n+test_p1518r2()\n+{\n+  // P1518R2 - Stop overconstraining allocators in container deduction guides.\n+  // This is a C++23 feature but we support it for C++17 too.\n+\n+  using MSet = std::multiset<unsigned, std::greater<>, Alloc<unsigned>>;\n+  Pool* p = nullptr;\n+  MSet s(p);\n+\n+  std::multiset s1(s, p);\n+  check_type<MSet>(s1);\n+\n+  std::multiset s2(std::move(s), p);\n+  check_type<MSet>(s2);\n+}"}, {"sha": "816efab85c78976941a3ac6d60c09589939216e6", "filename": "libstdc++-v3/testsuite/23_containers/priority_queue/deduction.cc", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fpriority_queue%2Fdeduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fpriority_queue%2Fdeduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fpriority_queue%2Fdeduction.cc?ref=22d34a2a50651d01669b6fbcdb9677c18d2197c5", "patch": "@@ -21,6 +21,7 @@\n #include <deque>\n #include <vector>\n #include <testsuite_iterators.h>\n+#include <testsuite_allocator.h>\n \n template<typename T, typename U> struct require_same;\n template<typename T> struct require_same<T, T> { using type = void; };\n@@ -116,3 +117,39 @@ test02()\n   std::priority_queue s14(seq.begin(), seq.end(), cmp, std::deque<short>{});\n   check_type<std::priority_queue<short, std::deque<short>, Cmp>>(s14);\n }\n+\n+struct Pool;\n+\n+template<typename T>\n+struct Alloc : __gnu_test::SimpleAllocator<T>\n+{\n+  Alloc(Pool*) { }\n+\n+  template<typename U>\n+    Alloc(const Alloc<U>&) { }\n+};\n+\n+void\n+test_p1518r2()\n+{\n+  // P1518R2 - Stop overconstraining allocators in container deduction guides.\n+  // This is a C++23 feature but we support it for C++17 too.\n+\n+  using Vector = std::vector<short, Alloc<short>>;\n+  using Cmp = std::greater<long>;\n+  Pool* p = nullptr;\n+  Vector v(p);\n+  Cmp cmp;\n+\n+  std::priority_queue q1(cmp, v, p);\n+  check_type<std::priority_queue<short, Vector, Cmp>>(q1);\n+\n+  std::priority_queue q2(cmp, std::move(v), p);\n+  check_type<std::priority_queue<short, Vector, Cmp>>(q2);\n+\n+  std::priority_queue q3(q1, p);\n+  check_type<std::priority_queue<short, Vector, Cmp>>(q3);\n+\n+  std::priority_queue q4(std::move(q1), p);\n+  check_type<std::priority_queue<short, Vector, Cmp>>(q4);\n+}"}, {"sha": "2642ece2b1acdd8a7bd567ac10ac42afd969bad0", "filename": "libstdc++-v3/testsuite/23_containers/queue/deduction.cc", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fqueue%2Fdeduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fqueue%2Fdeduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fqueue%2Fdeduction.cc?ref=22d34a2a50651d01669b6fbcdb9677c18d2197c5", "patch": "@@ -20,6 +20,7 @@\n #include <queue>\n #include <deque>\n #include <list>\n+#include <testsuite_allocator.h>\n \n template<typename T, typename U> struct require_same;\n template<typename T> struct require_same<T, T> { using type = void; };\n@@ -86,3 +87,36 @@ test02()\n   std::queue s8(std::move(l), l.get_allocator());\n   check_type<std::queue<long, std::list<long>>>(s8);\n }\n+\n+struct Pool;\n+\n+template<typename T>\n+struct Alloc : __gnu_test::SimpleAllocator<T>\n+{\n+  Alloc(Pool*) { }\n+\n+  template<typename U>\n+    Alloc(const Alloc<U>&) { }\n+};\n+\n+void\n+test_p1518r2()\n+{\n+  // P1518R2 - Stop overconstraining allocators in container deduction guides.\n+  // This is a C++23 feature but we support it for C++17 too.\n+\n+  using Deque = std::deque<unsigned, Alloc<unsigned>>;\n+  using List = std::list<long, Alloc<long>>;\n+  Pool* p = nullptr;\n+  Deque d(p);\n+  List l(p);\n+\n+  std::queue q1(d, p);\n+  check_type<std::queue<unsigned, Deque>>(q1);\n+\n+  std::queue q2(l, p);\n+  check_type<std::queue<long, List>>(q2);\n+\n+  std::queue q3(q2, p);\n+  check_type<std::queue<long, List>>(q3);\n+}"}, {"sha": "d77b9fcb73df8e53afa59c983b90525392fd6f6b", "filename": "libstdc++-v3/testsuite/23_containers/set/cons/deduction.cc", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fcons%2Fdeduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fcons%2Fdeduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fcons%2Fdeduction.cc?ref=22d34a2a50651d01669b6fbcdb9677c18d2197c5", "patch": "@@ -131,3 +131,38 @@ void g()\n \t\tstd::set<int, std::less<int>,\n \t\t\t SimpleAllocator<value_type>>>);\n }\n+\n+template<typename T, typename U> struct require_same;\n+template<typename T> struct require_same<T, T> { using type = void; };\n+\n+template<typename T, typename U>\n+  typename require_same<T, U>::type\n+  check_type(U&) { }\n+\n+struct Pool;\n+\n+template<typename T>\n+struct Alloc : __gnu_test::SimpleAllocator<T>\n+{\n+  Alloc(Pool*) { }\n+\n+  template<typename U>\n+    Alloc(const Alloc<U>&) { }\n+};\n+\n+void\n+test_p1518r2()\n+{\n+  // P1518R2 - Stop overconstraining allocators in container deduction guides.\n+  // This is a C++23 feature but we support it for C++17 too.\n+\n+  using Set = std::set<unsigned, std::greater<>, Alloc<unsigned>>;\n+  Pool* p = nullptr;\n+  Set s(p);\n+\n+  std::set s1(s, p);\n+  check_type<Set>(s1);\n+\n+  std::set s2(std::move(s), p);\n+  check_type<Set>(s2);\n+}"}, {"sha": "169a063687b5bd8dc424e1d7c2d14e5ce90d12be", "filename": "libstdc++-v3/testsuite/23_containers/stack/deduction.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fstack%2Fdeduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fstack%2Fdeduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fstack%2Fdeduction.cc?ref=22d34a2a50651d01669b6fbcdb9677c18d2197c5", "patch": "@@ -20,6 +20,7 @@\n #include <stack>\n #include <deque>\n #include <list>\n+#include <testsuite_allocator.h>\n \n template<typename T, typename U> struct require_same;\n template<typename T> struct require_same<T, T> { using type = void; };\n@@ -58,7 +59,7 @@ test01()\n \n void\n test02()\n-  {\n+{\n   std::deque<unsigned> d;\n   std::list<long> l;\n "}, {"sha": "8b69af896a25c09985ba9b1947230e31d10ef02c", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/cons/deduction.cc", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fcons%2Fdeduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fcons%2Fdeduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fcons%2Fdeduction.cc?ref=22d34a2a50651d01669b6fbcdb9677c18d2197c5", "patch": "@@ -124,3 +124,41 @@ void f()\n \t\tstd::equal_to<int>,\n \t\tSimpleAllocator<std::pair<const int, double>>>>);\n }\n+\n+template<typename T, typename U> struct require_same;\n+template<typename T> struct require_same<T, T> { using type = void; };\n+\n+template<typename T, typename U>\n+  typename require_same<T, U>::type\n+  check_type(U&) { }\n+\n+struct Pool;\n+\n+template<typename T>\n+struct Alloc : __gnu_test::SimpleAllocator<T>\n+{\n+  Alloc(Pool*) { }\n+\n+  template<typename U>\n+    Alloc(const Alloc<U>&) { }\n+};\n+\n+void\n+test_p1518r2()\n+{\n+  // P1518R2 - Stop overconstraining allocators in container deduction guides.\n+  // This is a C++23 feature but we support it for C++17 too.\n+\n+  using PairAlloc = Alloc<std::pair<const unsigned, void*>>;\n+  using Hash = std::hash<unsigned long>;\n+  using Eq = std::equal_to<>;\n+  using UMap = std::unordered_map<unsigned, void*, Hash, Eq, PairAlloc>;\n+  Pool* p = nullptr;\n+  UMap m(p);\n+\n+  std::unordered_map s1(m, p);\n+  check_type<UMap>(s1);\n+\n+  std::unordered_map s2(std::move(m), p);\n+  check_type<UMap>(s2);\n+}"}, {"sha": "e7e535b527a83b41b47c969553a7a24be05d3fd4", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/cons/deduction.cc", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fcons%2Fdeduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fcons%2Fdeduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fcons%2Fdeduction.cc?ref=22d34a2a50651d01669b6fbcdb9677c18d2197c5", "patch": "@@ -133,3 +133,41 @@ void f()\n \t\tstd::equal_to<int>,\n \t\tSimpleAllocator<std::pair<const int, double>>>>);\n }\n+\n+template<typename T, typename U> struct require_same;\n+template<typename T> struct require_same<T, T> { using type = void; };\n+\n+template<typename T, typename U>\n+  typename require_same<T, U>::type\n+  check_type(U&) { }\n+\n+struct Pool;\n+\n+template<typename T>\n+struct Alloc : __gnu_test::SimpleAllocator<T>\n+{\n+  Alloc(Pool*) { }\n+\n+  template<typename U>\n+    Alloc(const Alloc<U>&) { }\n+};\n+\n+void\n+test_p1518r2()\n+{\n+  // P1518R2 - Stop overconstraining allocators in container deduction guides.\n+  // This is a C++23 feature but we support it for C++17 too.\n+\n+  using PairAlloc = Alloc<std::pair<const unsigned, void*>>;\n+  using Hash = std::hash<unsigned long>;\n+  using Eq = std::equal_to<>;\n+  using UMMap = std::unordered_multimap<unsigned, void*, Hash, Eq, PairAlloc>;\n+  Pool* p = nullptr;\n+  UMMap m(p);\n+\n+  std::unordered_multimap s1(m, p);\n+  check_type<UMMap>(s1);\n+\n+  std::unordered_multimap s2(std::move(m), p);\n+  check_type<UMMap>(s2);\n+}"}, {"sha": "22b729749e22adae7a7b1eea8d42c00f13f4b06e", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multiset/cons/deduction.cc", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Fcons%2Fdeduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Fcons%2Fdeduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Fcons%2Fdeduction.cc?ref=22d34a2a50651d01669b6fbcdb9677c18d2197c5", "patch": "@@ -142,3 +142,40 @@ void f()\n \t\tstd::equal_to<int>,\n \t\tSimpleAllocator<int>>>);\n }\n+\n+template<typename T, typename U> struct require_same;\n+template<typename T> struct require_same<T, T> { using type = void; };\n+\n+template<typename T, typename U>\n+  typename require_same<T, U>::type\n+  check_type(U&) { }\n+\n+struct Pool;\n+\n+template<typename T>\n+struct Alloc : __gnu_test::SimpleAllocator<T>\n+{\n+  Alloc(Pool*) { }\n+\n+  template<typename U>\n+    Alloc(const Alloc<U>&) { }\n+};\n+\n+void\n+test_p1518r2()\n+{\n+  // P1518R2 - Stop overconstraining allocators in container deduction guides.\n+  // This is a C++23 feature but we support it for C++17 too.\n+\n+  using Hash = std::hash<unsigned long>;\n+  using Eq = std::equal_to<>;\n+  using UMSet = std::unordered_multiset<unsigned, Hash, Eq, Alloc<unsigned>>;\n+  Pool* p = nullptr;\n+  UMSet s(p);\n+\n+  std::unordered_multiset s1(s, p);\n+  check_type<UMSet>(s1);\n+\n+  std::unordered_multiset s2(std::move(s), p);\n+  check_type<UMSet>(s2);\n+}"}, {"sha": "db5858132fce9be910d352a34b88e84339d9fc37", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/cons/deduction.cc", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fcons%2Fdeduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fcons%2Fdeduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fcons%2Fdeduction.cc?ref=22d34a2a50651d01669b6fbcdb9677c18d2197c5", "patch": "@@ -137,3 +137,40 @@ void f()\n \t\tstd::equal_to<int>,\n \t\tSimpleAllocator<int>>>);\n }\n+\n+template<typename T, typename U> struct require_same;\n+template<typename T> struct require_same<T, T> { using type = void; };\n+\n+template<typename T, typename U>\n+  typename require_same<T, U>::type\n+  check_type(U&) { }\n+\n+struct Pool;\n+\n+template<typename T>\n+struct Alloc : __gnu_test::SimpleAllocator<T>\n+{\n+  Alloc(Pool*) { }\n+\n+  template<typename U>\n+    Alloc(const Alloc<U>&) { }\n+};\n+\n+void\n+test_p1518r2()\n+{\n+  // P1518R2 - Stop overconstraining allocators in container deduction guides.\n+  // This is a C++23 feature but we support it for C++17 too.\n+\n+  using Hash = std::hash<unsigned long>;\n+  using Eq = std::equal_to<>;\n+  using USet = std::unordered_set<unsigned, Hash, Eq, Alloc<unsigned>>;\n+  Pool* p = nullptr;\n+  USet s(p);\n+\n+  std::unordered_set s1(s, p);\n+  check_type<USet>(s1);\n+\n+  std::unordered_set s2(std::move(s), p);\n+  check_type<USet>(s2);\n+}"}, {"sha": "542a0d7ff9329e2fd2f2eb3850dffc0102f894cd", "filename": "libstdc++-v3/testsuite/23_containers/vector/cons/deduction.cc", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2Fdeduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d34a2a50651d01669b6fbcdb9677c18d2197c5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2Fdeduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2Fdeduction.cc?ref=22d34a2a50651d01669b6fbcdb9677c18d2197c5", "patch": "@@ -19,6 +19,7 @@\n \n #include <vector>\n #include <testsuite_iterators.h>\n+#include <testsuite_allocator.h>\n \n template<typename T>\n   using input_iterator_seq\n@@ -49,6 +50,24 @@ test01()\n   check_type<const std::vector<unsigned>>(s4);\n }\n \n+void\n+test01b()\n+{\n+  std::vector<bool> s0;\n+\n+  std::vector s1 = s0;\n+  check_type<std::vector<bool>>(s1);\n+\n+  std::vector s2 = std::move(s0);\n+  check_type<std::vector<bool>>(s2);\n+\n+  const std::vector s3 = s0;\n+  check_type<const std::vector<bool>>(s3);\n+\n+  const std::vector s4 = s3;\n+  check_type<const std::vector<bool>>(s4);\n+}\n+\n void\n test02()\n {\n@@ -67,3 +86,59 @@ test02()\n   std::vector s4(1U, 2L, std::allocator<long>());\n   check_type<std::vector<long>>(s4);\n }\n+\n+void\n+test02b()\n+{\n+  bool a[1] = {};\n+  input_iterator_seq<bool> seq(a);\n+\n+  std::vector s1(seq.begin(), seq.end());\n+  check_type<std::vector<bool>>(s1);\n+\n+  std::vector s2(seq.begin(), seq.end(), std::allocator<bool>());\n+  check_type<std::vector<bool>>(s2);\n+\n+  std::vector s3(1U, true);\n+  check_type<std::vector<bool>>(s3);\n+\n+  std::vector s4(1U, true, std::allocator<bool>());\n+  check_type<std::vector<bool>>(s4);\n+}\n+\n+struct Pool;\n+\n+template<typename T>\n+struct Alloc : __gnu_test::SimpleAllocator<T>\n+{\n+  Alloc(Pool*) { }\n+\n+  template<typename U>\n+    Alloc(const Alloc<U>&) { }\n+};\n+\n+void\n+test_p1518r2()\n+{\n+  // P1518R2 - Stop overconstraining allocators in container deduction guides.\n+  // This is a C++23 feature but we support it for C++17 too.\n+\n+  using Vector = std::vector<unsigned, Alloc<unsigned>>;\n+  Pool* p = nullptr;\n+  Vector v(p);\n+\n+  std::vector s1(v, p);\n+  check_type<Vector>(s1);\n+\n+  std::vector s2(std::move(v), p);\n+  check_type<Vector>(s2);\n+\n+  using BVector = std::vector<bool, Alloc<bool>>;\n+  BVector b(p);\n+\n+  std::vector s3(b, p);\n+  check_type<BVector>(s3);\n+\n+  std::vector s4(std::move(b), p);\n+  check_type<BVector>(s4);\n+}"}]}