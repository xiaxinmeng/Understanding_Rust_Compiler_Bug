{"sha": "4e8d7ddc2a4fc825984ca301f5e12e9f4a739ec2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGU4ZDdkZGMyYTRmYzgyNTk4NGNhMzAxZjVlMTJlOWY0YTczOWVjMg==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@cygnus.com", "date": "1999-03-25T12:54:06Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1999-03-25T12:54:06Z"}, "message": "Fix missing initializer compile-time warning messages.\n\n\t* a29k/a29k.h (TARGET_SWITCHES): Add doc strings.\n\t* i960/i960.h (TARGET_SWITCHES): Add doc strings.\n\t* invoke.texi (a29k): Add documentation for -mno-multm option.\n\nFrom-SVN: r25981", "tree": {"sha": "0e5d70e7b20292115f3e3cb4759a2fc06a180047", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e5d70e7b20292115f3e3cb4759a2fc06a180047"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e8d7ddc2a4fc825984ca301f5e12e9f4a739ec2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e8d7ddc2a4fc825984ca301f5e12e9f4a739ec2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e8d7ddc2a4fc825984ca301f5e12e9f4a739ec2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e8d7ddc2a4fc825984ca301f5e12e9f4a739ec2/comments", "author": null, "committer": null, "parents": [{"sha": "5fa671cf5bd476ab9af10e8a46d6c9794b8b502f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fa671cf5bd476ab9af10e8a46d6c9794b8b502f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fa671cf5bd476ab9af10e8a46d6c9794b8b502f"}], "stats": {"total": 191, "additions": 121, "deletions": 70}, "files": [{"sha": "c5b4eed285af95085449a3b56b8647b4caa67e2c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e8d7ddc2a4fc825984ca301f5e12e9f4a739ec2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e8d7ddc2a4fc825984ca301f5e12e9f4a739ec2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4e8d7ddc2a4fc825984ca301f5e12e9f4a739ec2", "patch": "@@ -1,3 +1,9 @@\n+Thu Mar 25 12:46:37 1999  Jim Wilson  <wilson@cygnus.com>\n+\n+\t* a29k/a29k.h (TARGET_SWITCHES): Add doc strings.\n+\t* i960/i960.h (TARGET_SWITCHES): Add doc strings.\n+\t* invoke.texi (a29k): Add documentation for -mno-multm option.\n+\n Thu Mar 25 14:04:54 EST 1999  Andrew MacLeod  <amacleod@cygnus.com>\n \n \t* rtl.texi (RTX_FRAME_RELATED_P): Add documentation."}, {"sha": "a7f5d8d3ff78e1d5fdccab2d408a53a8d71dbc68", "filename": "gcc/config/a29k/a29k.h", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e8d7ddc2a4fc825984ca301f5e12e9f4a739ec2/gcc%2Fconfig%2Fa29k%2Fa29k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e8d7ddc2a4fc825984ca301f5e12e9f4a739ec2/gcc%2Fconfig%2Fa29k%2Fa29k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fa29k%2Fa29k.h?ref=4e8d7ddc2a4fc825984ca301f5e12e9f4a739ec2", "patch": "@@ -97,26 +97,26 @@ extern int target_flags;\n #define TARGET_MULTM\t\t((target_flags & 1024) == 0)\n \n #define TARGET_SWITCHES\t\t\t\\\n-  { {\"dw\", 1},\t\t\t\t\\\n-    {\"ndw\", -1},\t\t\t\\\n-    {\"bw\", 2},\t\t\t\t\\\n-    {\"nbw\", - (1|2)},\t\t\t\\\n-    {\"small\", 4},\t\t\t\\\n-    {\"normal\", - (4|8)},\t\t\\\n-    {\"large\", 8},\t\t\t\\\n-    {\"29050\", 16+128},\t\t\t\\\n-    {\"29000\", -16},\t\t\t\\\n-    {\"kernel-registers\", 32},\t\t\\\n-    {\"user-registers\", -32},\t\t\\\n-    {\"stack-check\", 64},\t\t\\\n-    {\"no-stack-check\", - 74},\t\t\\\n-    {\"storem-bug\", -128},\t\t\\\n-    {\"no-storem-bug\", 128},\t\t\\\n-    {\"reuse-arg-regs\", -256},\t\t\\\n-    {\"no-reuse-arg-regs\", 256},\t\t\\\n-    {\"soft-float\", 512},\t\t\\\n-    {\"no-multm\", 1024},\t\t\t\\\n-    {\"\", TARGET_DEFAULT}}\n+  { {\"dw\", 1, \"Generate code assuming DW bit is set\"},\t\t\t\\\n+    {\"ndw\", -1, \"Generate code assuming DW bit is not set\"},\t\t\\\n+    {\"bw\", 2, \"Generate code using byte writes\"},\t\t\t\\\n+    {\"nbw\", - (1|2), \"Do not generate byte writes\"},\t\t\t\\\n+    {\"small\", 4, \"Use small memory model\"},\t\t\t\t\\\n+    {\"normal\", - (4|8), \"Use normal memory model\"},\t\t\t\\\n+    {\"large\", 8, \"Use large memory model\"},\t\t\t\t\\\n+    {\"29050\", 16+128, \"Generate 29050 code\"},\t\t\t\t\\\n+    {\"29000\", -16, \"Generate 29000 code\"},\t\t\t\t\\\n+    {\"kernel-registers\", 32, \"Use kernel global registers\"},\t\t\\\n+    {\"user-registers\", -32, \"Use user global registers\"},\t\t\\\n+    {\"stack-check\", 64, \"Emit stack checking code\"},\t\t\t\\\n+    {\"no-stack-check\", - 74, \"Do not emit stack checking code\"},\t\\\n+    {\"storem-bug\", -128, \"Work around storem hardware bug\"},\t\t\\\n+    {\"no-storem-bug\", 128, \"Do not work around storem hardware bug\"},\t\\\n+    {\"reuse-arg-regs\", -256, \"Store locals in argument registers\"},\t\\\n+    {\"no-reuse-arg-regs\", 256, \"Do not store locals in arg registers\"},\t\\\n+    {\"soft-float\", 512, \"Use software floating point\"},\t\t\t\\\n+    {\"no-multm\", 1024, \"Do not generate multm instructions\"},\t\t\\\n+    {\"\", TARGET_DEFAULT, NULL}}\n \n #define TARGET_DEFAULT 3\n "}, {"sha": "36aa6d9757b1b8cfc5dae8b2cb9aab64288f4cf8", "filename": "gcc/config/i960/i960.h", "status": "modified", "additions": 90, "deletions": 50, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e8d7ddc2a4fc825984ca301f5e12e9f4a739ec2/gcc%2Fconfig%2Fi960%2Fi960.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e8d7ddc2a4fc825984ca301f5e12e9f4a739ec2/gcc%2Fconfig%2Fi960%2Fi960.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.h?ref=4e8d7ddc2a4fc825984ca301f5e12e9f4a739ec2", "patch": "@@ -229,58 +229,98 @@ extern int target_flags;\n    am not sure which are real and which aren't.  */\n \n #define TARGET_SWITCHES  \\\n-  { {\"sa\", (TARGET_FLAG_K_SERIES|TARGET_FLAG_COMPLEX_ADDR)},\\\n-    {\"sb\", (TARGET_FLAG_NUMERICS|TARGET_FLAG_K_SERIES| \\\n-\t\t\tTARGET_FLAG_COMPLEX_ADDR)},\\\n-/*  {\"sc\", (TARGET_FLAG_NUMERICS|TARGET_FLAG_PROTECTED|\\\n-\t\t\tTARGET_FLAG_MC|TARGET_FLAG_COMPLEX_ADDR)},*/ \\\n-    {\"ka\", (TARGET_FLAG_K_SERIES|TARGET_FLAG_COMPLEX_ADDR)},\\\n-    {\"kb\", (TARGET_FLAG_NUMERICS|TARGET_FLAG_K_SERIES| \\\n-\t\t\tTARGET_FLAG_COMPLEX_ADDR)},\\\n-/*  {\"kc\", (TARGET_FLAG_NUMERICS|TARGET_FLAG_PROTECTED|\\\n-\t\t\tTARGET_FLAG_MC|TARGET_FLAG_COMPLEX_ADDR)},*/ \\\n-    {\"ja\", (TARGET_FLAG_K_SERIES|TARGET_FLAG_COMPLEX_ADDR)},\\\n-    {\"jd\", (TARGET_FLAG_K_SERIES|TARGET_FLAG_COMPLEX_ADDR)},\\\n-    {\"jf\", (TARGET_FLAG_NUMERICS|TARGET_FLAG_K_SERIES| \\\n-\t\t\tTARGET_FLAG_COMPLEX_ADDR)},\\\n-    {\"rp\", (TARGET_FLAG_K_SERIES|TARGET_FLAG_COMPLEX_ADDR)},\\\n-    {\"mc\", (TARGET_FLAG_NUMERICS|TARGET_FLAG_PROTECTED|\\\n-\t\t\tTARGET_FLAG_MC|TARGET_FLAG_COMPLEX_ADDR)},\\\n-    {\"ca\", (TARGET_FLAG_C_SERIES|TARGET_FLAG_BRANCH_PREDICT|\\\n-\t\t\tTARGET_FLAG_CODE_ALIGN|TARGET_FLAG_COMPLEX_ADDR)},\\\n-/*  {\"cb\", (TARGET_FLAG_NUMERICS|TARGET_FLAG_C_SERIES|\\\n-\t\t\tTARGET_FLAG_BRANCH_PREDICT|TARGET_FLAG_CODE_ALIGN)},\\\n-    {\"cc\", (TARGET_FLAG_NUMERICS|TARGET_FLAG_PROTECTED|\\\n+  { {\"sa\", (TARGET_FLAG_K_SERIES|TARGET_FLAG_COMPLEX_ADDR),\t\t\\\n+       \"Generate SA code\"},\t\t\t\t\t\t\\\n+    {\"sb\", (TARGET_FLAG_NUMERICS|TARGET_FLAG_K_SERIES|\t\t\t\\\n+\t\t\tTARGET_FLAG_COMPLEX_ADDR),\t\t\t\\\n+       \"Generate SB code\"},\t\t\t\t\t\t\\\n+/*  {\"sc\", (TARGET_FLAG_NUMERICS|TARGET_FLAG_PROTECTED|\t\t\t\\\n+\t\t\tTARGET_FLAG_MC|TARGET_FLAG_COMPLEX_ADDR),\t\\\n+       \"Generate SC code\"}, */\t\t\t\t\t\t\\\n+    {\"ka\", (TARGET_FLAG_K_SERIES|TARGET_FLAG_COMPLEX_ADDR),\t\t\\\n+       \"Generate KA code\"},\t\t\t\t\t\t\\\n+    {\"kb\", (TARGET_FLAG_NUMERICS|TARGET_FLAG_K_SERIES|\t\t\t\\\n+\t\t\tTARGET_FLAG_COMPLEX_ADDR),\t\t\t\\\n+       \"Generate KB code\"},\t\t\t\t\t\t\\\n+/*  {\"kc\", (TARGET_FLAG_NUMERICS|TARGET_FLAG_PROTECTED|\t\t\t\\\n+\t\t\tTARGET_FLAG_MC|TARGET_FLAG_COMPLEX_ADDR),\t\\\n+       \"Generate KC code\"}, */\t\t\t\t\t\t\\\n+    {\"ja\", (TARGET_FLAG_K_SERIES|TARGET_FLAG_COMPLEX_ADDR),\t\t\\\n+       \"Generate JA code\"},\t\t\t\t\t\t\\\n+    {\"jd\", (TARGET_FLAG_K_SERIES|TARGET_FLAG_COMPLEX_ADDR),\t\t\\\n+       \"Generate JD code\"},\t\t\t\t\t\t\\\n+    {\"jf\", (TARGET_FLAG_NUMERICS|TARGET_FLAG_K_SERIES|\t\t\t\\\n+\t\t\tTARGET_FLAG_COMPLEX_ADDR),\t\t\t\\\n+       \"Generate JF code\"},\t\t\t\t\t\t\\\n+    {\"rp\", (TARGET_FLAG_K_SERIES|TARGET_FLAG_COMPLEX_ADDR),\t\t\\\n+       \"generate RP code\"},\t\t\t\t\t\t\\\n+    {\"mc\", (TARGET_FLAG_NUMERICS|TARGET_FLAG_PROTECTED|\t\t\t\\\n+\t\t\tTARGET_FLAG_MC|TARGET_FLAG_COMPLEX_ADDR),\t\\\n+       \"Generate MC code\"},\t\t\t\t\t\t\\\n+    {\"ca\", (TARGET_FLAG_C_SERIES|TARGET_FLAG_BRANCH_PREDICT|\t\t\\\n+\t\t\tTARGET_FLAG_CODE_ALIGN|TARGET_FLAG_COMPLEX_ADDR),\\\n+       \"Generate CA code\"},\t\t\t\t\t\t\\\n+/*  {\"cb\", (TARGET_FLAG_NUMERICS|TARGET_FLAG_C_SERIES|\t\t\t\\\n+\t\t\tTARGET_FLAG_BRANCH_PREDICT|TARGET_FLAG_CODE_ALIGN),\\\n+       \"Generate CB code\"},\t\t\t\t\t\t\\\n+    {\"cc\", (TARGET_FLAG_NUMERICS|TARGET_FLAG_PROTECTED|\t\t\t\\\n \t\t\tTARGET_FLAG_C_SERIES|TARGET_FLAG_BRANCH_PREDICT|\\\n-\t\t\tTARGET_FLAG_CODE_ALIGN)}, */\t\\\n-    {\"cf\", (TARGET_FLAG_C_SERIES|TARGET_FLAG_BRANCH_PREDICT|\\\n-\t\t\tTARGET_FLAG_CODE_ALIGN|TARGET_FLAG_COMPLEX_ADDR)},\\\n-    {\"numerics\", (TARGET_FLAG_NUMERICS)},\t\t\\\n-    {\"soft-float\", -(TARGET_FLAG_NUMERICS)},\t\t\\\n-    {\"leaf-procedures\", TARGET_FLAG_LEAFPROC},\t\t\\\n-    {\"no-leaf-procedures\",-(TARGET_FLAG_LEAFPROC)},\t\\\n-    {\"tail-call\",TARGET_FLAG_TAILCALL},\t\t\t\\\n-    {\"no-tail-call\",-(TARGET_FLAG_TAILCALL)},\t\t\\\n-    {\"complex-addr\",TARGET_FLAG_COMPLEX_ADDR},\t\t\\\n-    {\"no-complex-addr\",-(TARGET_FLAG_COMPLEX_ADDR)},\t\\\n-    {\"code-align\",TARGET_FLAG_CODE_ALIGN},\t\t\\\n-    {\"no-code-align\",-(TARGET_FLAG_CODE_ALIGN)},\t\\\n-    {\"clean-linkage\", (TARGET_FLAG_CLEAN_LINKAGE)},\t\\\n-    {\"no-clean-linkage\", -(TARGET_FLAG_CLEAN_LINKAGE)},\t\\\n-    {\"ic-compat\", TARGET_FLAG_IC_COMPAT2_0},\t\t\\\n-    {\"ic2.0-compat\", TARGET_FLAG_IC_COMPAT2_0},\t\t\\\n-    {\"ic3.0-compat\", TARGET_FLAG_IC_COMPAT3_0},\t\t\\\n-    {\"asm-compat\",TARGET_FLAG_ASM_COMPAT},\t\t\\\n-    {\"intel-asm\",TARGET_FLAG_ASM_COMPAT},\t\t\\\n-    {\"strict-align\", TARGET_FLAG_STRICT_ALIGN},\t\t\\\n-    {\"no-strict-align\", -(TARGET_FLAG_STRICT_ALIGN)},\t\\\n-    {\"old-align\", (TARGET_FLAG_OLD_ALIGN|TARGET_FLAG_STRICT_ALIGN)},\t \\\n-    {\"no-old-align\", -(TARGET_FLAG_OLD_ALIGN|TARGET_FLAG_STRICT_ALIGN)}, \\\n-    {\"long-double-64\", TARGET_FLAG_LONG_DOUBLE_64},\t\\\n-    {\"link-relax\", 0},\t\t\t\t\t\\\n-    {\"no-link-relax\", 0},\t\t\t\t\\\n+\t\t\tTARGET_FLAG_CODE_ALIGN),\t\t\t\\\n+       \"Generate CC code\"}, */\t\t\t\t\t\t\\\n+    {\"cf\", (TARGET_FLAG_C_SERIES|TARGET_FLAG_BRANCH_PREDICT|\t\t\\\n+\t\t\tTARGET_FLAG_CODE_ALIGN|TARGET_FLAG_COMPLEX_ADDR),\\\n+       \"Generate CF code\"},\t\t\t\t\t\t\\\n+    {\"numerics\", (TARGET_FLAG_NUMERICS),\t\t\t\t\\\n+       \"Use hardware floating point instructions\"},\t\t\t\\\n+    {\"soft-float\", -(TARGET_FLAG_NUMERICS),\t\t\t\t\\\n+       \"Use software floating point\"},\t\t\t\t\t\\\n+    {\"leaf-procedures\", TARGET_FLAG_LEAFPROC,\t\t\t\t\\\n+       \"Use alternate leaf function entries\"},\t\t\t\t\\\n+    {\"no-leaf-procedures\", -(TARGET_FLAG_LEAFPROC),\t\t\t\\\n+       \"Do not use alternate leaf function entries\"},\t\t\t\\\n+    {\"tail-call\", TARGET_FLAG_TAILCALL,\t\t\t\t\t\\\n+       \"Perform tail call optimization\"},\t\t\t\t\\\n+    {\"no-tail-call\", -(TARGET_FLAG_TAILCALL),\t\t\t\t\\\n+       \"Do not perform tail call optimization\"},\t\t\t\\\n+    {\"complex-addr\", TARGET_FLAG_COMPLEX_ADDR, \t\t\t\t\\\n+       \"Use complex addressing modes\"},\t\t\t\t\t\\\n+    {\"no-complex-addr\", -(TARGET_FLAG_COMPLEX_ADDR),\t\t\t\\\n+       \"Do not use complex addressing modes\"},\t\t\t\t\\\n+    {\"code-align\", TARGET_FLAG_CODE_ALIGN,\t\t\t\t\\\n+       \"Align code to 8 byte boundary\"},\t\t\t\t\\\n+    {\"no-code-align\", -(TARGET_FLAG_CODE_ALIGN),\t\t\t\\\n+       \"Do not align code to 8 byte boundary\"},\t\t\t\t\\\n+/*  {\"clean-linkage\", (TARGET_FLAG_CLEAN_LINKAGE),\t\t\t\\\n+       \"Force use of prototypes\"},\t\t\t\t\t\\\n+    {\"no-clean-linkage\", -(TARGET_FLAG_CLEAN_LINKAGE),\t\t\t\\\n+       \"Do not force use of prototypes\"}, */\t\t\t\t\\\n+    {\"ic-compat\", TARGET_FLAG_IC_COMPAT2_0,\t\t\t\t\\\n+       \"Enable compatibility with iC960 v2.0\"},\t\t\t\t\\\n+    {\"ic2.0-compat\", TARGET_FLAG_IC_COMPAT2_0,\t\t\t\t\\\n+       \"Enable compatibility with iC960 v2.0\"},\t\t\t\t\\\n+    {\"ic3.0-compat\", TARGET_FLAG_IC_COMPAT3_0,\t\t\t\t\\\n+       \"Enable compatibility with iC960 v3.0\"},\t\t\t\t\\\n+    {\"asm-compat\", TARGET_FLAG_ASM_COMPAT,\t\t\t\t\\\n+       \"Enable compatibility with ic960 assembler\"},\t\t\t\\\n+    {\"intel-asm\", TARGET_FLAG_ASM_COMPAT,\t\t\t\t\\\n+       \"Enable compatibility with ic960 assembler\"},\t\t\t\\\n+    {\"strict-align\", TARGET_FLAG_STRICT_ALIGN,\t\t\t\t\\\n+       \"Do not permit unaligned accesses\"},\t\t\t\t\\\n+    {\"no-strict-align\", -(TARGET_FLAG_STRICT_ALIGN),\t\t\t\\\n+       \"Permit unaligned accesses\"},\t\t\t\t\t\\\n+    {\"old-align\", (TARGET_FLAG_OLD_ALIGN|TARGET_FLAG_STRICT_ALIGN),\t\\\n+       \"Layout types like Intel's v1.3 gcc\"},\t\t\t\t\\\n+    {\"no-old-align\", -(TARGET_FLAG_OLD_ALIGN|TARGET_FLAG_STRICT_ALIGN),\t\\\n+       \"Do not layout types like Intel's v1.3 gcc\"},\t\t\t\\\n+    {\"long-double-64\", TARGET_FLAG_LONG_DOUBLE_64,\t\t\t\\\n+       \"Use 64 bit long doubles\"},\t\t\t\t\t\\\n+    {\"link-relax\", 0,\t\t\t\t\t\t\t\\\n+       \"Enable linker relaxation\"},\t\t\t\t\t\\\n+    {\"no-link-relax\", 0,\t\t\t\t\t\t\\\n+       \"Do not enable linker relaxation\"},\t\t\t\t\\\n     SUBTARGET_SWITCHES                                                  \\\n-    { \"\", TARGET_DEFAULT}}\n+    { \"\", TARGET_DEFAULT,\t\t\t\t\t\t\\\n+\tNULL}}\n \n /* This are meant to be redefined in the host dependent files */\n #define SUBTARGET_SWITCHES"}, {"sha": "ad145dab442d0f6ecfdddbb47449954cc3c21bac", "filename": "gcc/invoke.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e8d7ddc2a4fc825984ca301f5e12e9f4a739ec2/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e8d7ddc2a4fc825984ca301f5e12e9f4a739ec2/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=4e8d7ddc2a4fc825984ca301f5e12e9f4a739ec2", "patch": "@@ -3644,6 +3644,11 @@ Normally the facilities of the machine's usual C compiler are used, but\n this can't be done directly in cross-compilation.  You must make your\n own arrangements to provide suitable library functions for\n cross-compilation.\n+\n+@item -mno-multm\n+@kindex -mno-multm\n+Do not generate multm or multmu instructions.  This is useful for some embedded\n+systems which do not have trap handlers for these instructions.\n @end table\n \n @node ARM Options"}]}