{"sha": "1dd6990226fd92adf1e3c12a96c5776ec8efcb60", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWRkNjk5MDIyNmZkOTJhZGYxZTNjMTJhOTZjNTc3NmVjOGVmY2I2MA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-11-09T10:53:31Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-11-09T10:53:31Z"}, "message": "re PR tree-optimization/87621 (outer loop auto-vectorization fails for exponentiation code)\n\n2018-11-09  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/87621\n\t* tree-vect-loop.c (vectorizable_reduction): Handle reduction\n\top with only phi inputs.\n\t* tree-ssa-loop-ch.c: Include tree-ssa-sccvn.h.\n\t(ch_base::copy_headers): Run CSE on copied loop headers.\n\t(pass_ch_vect::process_loop_p): Simplify.\n\n\t* g++.dg/vect/pr87621.cc: New testcase.\n\nFrom-SVN: r265959", "tree": {"sha": "0aac21b4707fd7fd0474d87f2cfc0233c4385409", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0aac21b4707fd7fd0474d87f2cfc0233c4385409"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1dd6990226fd92adf1e3c12a96c5776ec8efcb60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dd6990226fd92adf1e3c12a96c5776ec8efcb60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1dd6990226fd92adf1e3c12a96c5776ec8efcb60", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dd6990226fd92adf1e3c12a96c5776ec8efcb60/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "43b01cc12de676d5a3871f7f813c740fc32b5a1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43b01cc12de676d5a3871f7f813c740fc32b5a1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43b01cc12de676d5a3871f7f813c740fc32b5a1a"}], "stats": {"total": 91, "additions": 75, "deletions": 16}, "files": [{"sha": "ff8f822414704ad510e80c3ff54b4f17cea7ef7c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dd6990226fd92adf1e3c12a96c5776ec8efcb60/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dd6990226fd92adf1e3c12a96c5776ec8efcb60/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1dd6990226fd92adf1e3c12a96c5776ec8efcb60", "patch": "@@ -1,3 +1,12 @@\n+2018-11-09  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/87621\n+\t* tree-vect-loop.c (vectorizable_reduction): Handle reduction\n+\top with only phi inputs.\n+\t* tree-ssa-loop-ch.c: Include tree-ssa-sccvn.h.\n+\t(ch_base::copy_headers): Run CSE on copied loop headers.\n+\t(pass_ch_vect::process_loop_p): Simplify.\n+\n 2018-11-09  Alexandre Oliva <oliva@adacore.com>\n \n \t* config/i386/mingw32.h (LINK_SPEC_LARGE_ADDR_AWARE): Adjust"}, {"sha": "6c9969497b6760faea1d0f51acb0b8f23eb12602", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dd6990226fd92adf1e3c12a96c5776ec8efcb60/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dd6990226fd92adf1e3c12a96c5776ec8efcb60/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1dd6990226fd92adf1e3c12a96c5776ec8efcb60", "patch": "@@ -1,3 +1,8 @@\n+2018-11-09  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/87621\n+\t* g++.dg/vect/pr87621.cc: New testcase.\n+\n 2018-11-09  Alexandre Oliva <aoliva@redhat.com>\n \n \tPR rtl-optimization/86438"}, {"sha": "cfc53be4ee1f377ec757edc7588d23635de1088a", "filename": "gcc/testsuite/g++.dg/vect/pr87621.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dd6990226fd92adf1e3c12a96c5776ec8efcb60/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr87621.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dd6990226fd92adf1e3c12a96c5776ec8efcb60/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr87621.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr87621.cc?ref=1dd6990226fd92adf1e3c12a96c5776ec8efcb60", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+\n+extern \"C\" double pow(double, double);\n+template <typename T>\n+T pow(T x, unsigned int n)\n+{\n+  if (!n)\n+    return 1;\n+\n+  T y = 1;\n+  while (n > 1)\n+    {\n+      if (n%2)\n+\ty *= x;\n+      x = x*x;\n+      n /= 2;\n+    }\n+  return x*y;\n+}\n+\n+void testVec(int* x)\n+{\n+  for (int i = 0; i < 8; ++i)\n+    x[i] = pow(x[i], 10);\n+}\n+\n+/* { dg-final { scan-tree-dump \"OUTER LOOP VECTORIZED\" \"vect\" { target { vect_double && vect_hw_misalign } } } } */"}, {"sha": "4d4813df3c8277f19a0f1d957673001d7a0366e1", "filename": "gcc/tree-ssa-loop-ch.c", "status": "modified", "additions": 30, "deletions": 16, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dd6990226fd92adf1e3c12a96c5776ec8efcb60/gcc%2Ftree-ssa-loop-ch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dd6990226fd92adf1e3c12a96c5776ec8efcb60/gcc%2Ftree-ssa-loop-ch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ch.c?ref=1dd6990226fd92adf1e3c12a96c5776ec8efcb60", "patch": "@@ -33,6 +33,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-inline.h\"\n #include \"tree-ssa-scopedtables.h\"\n #include \"tree-ssa-threadedge.h\"\n+#include \"tree-ssa-sccvn.h\"\n #include \"params.h\"\n \n /* Duplicates headers of loops if they are small enough, so that the statements\n@@ -297,12 +298,14 @@ ch_base::copy_headers (function *fun)\n   bool changed = false;\n \n   if (number_of_loops (fun) <= 1)\n-      return 0;\n+    return 0;\n \n   bbs = XNEWVEC (basic_block, n_basic_blocks_for_fn (fun));\n   copied_bbs = XNEWVEC (basic_block, n_basic_blocks_for_fn (fun));\n   bbs_size = n_basic_blocks_for_fn (fun);\n \n+  auto_vec<std::pair<edge, loop_p> > copied;\n+\n   FOR_EACH_LOOP (loop, 0)\n     {\n       int initial_limit = PARAM_VALUE (PARAM_MAX_LOOP_HEADER_INSNS);\n@@ -371,6 +374,7 @@ ch_base::copy_headers (function *fun)\n \t  fprintf (dump_file, \"Duplication failed.\\n\");\n \t  continue;\n \t}\n+      copied.safe_push (std::make_pair (entry, loop));\n \n       /* If the loop has the form \"for (i = j; i < j + 10; i++)\" then\n \t this copying can introduce a case where we rely on undefined\n@@ -422,7 +426,28 @@ ch_base::copy_headers (function *fun)\n     }\n \n   if (changed)\n-    update_ssa (TODO_update_ssa);\n+    {\n+      update_ssa (TODO_update_ssa);\n+      /* After updating SSA form perform CSE on the loop header\n+\t copies.  This is esp. required for the pass before\n+\t vectorization since nothing cleans up copied exit tests\n+\t that can now be simplified.  CSE from the entry of the\n+\t region we copied till all loop exit blocks but not\n+\t entering the loop itself.  */\n+      for (unsigned i = 0; i < copied.length (); ++i)\n+\t{\n+\t  edge entry = copied[i].first;\n+\t  loop_p loop = copied[i].second;\n+\t  vec<edge> exit_edges = get_loop_exit_edges (loop);\n+\t  bitmap exit_bbs = BITMAP_ALLOC (NULL);\n+\t  for (unsigned j = 0; j < exit_edges.length (); ++j)\n+\t    bitmap_set_bit (exit_bbs, exit_edges[j]->dest->index);\n+\t  bitmap_set_bit (exit_bbs, loop->header->index);\n+\t  do_rpo_vn (cfun, entry, exit_bbs);\n+\t  BITMAP_FREE (exit_bbs);\n+\t  exit_edges.release ();\n+\t}\n+    }\n   free (bbs);\n   free (copied_bbs);\n \n@@ -473,24 +498,13 @@ pass_ch_vect::process_loop_p (struct loop *loop)\n   if (loop->dont_vectorize)\n     return false;\n \n-  if (!do_while_loop_p (loop))\n-    return true;\n-\n- /* The vectorizer won't handle anything with multiple exits, so skip.  */\n+  /* The vectorizer won't handle anything with multiple exits, so skip.  */\n   edge exit = single_exit (loop);\n   if (!exit)\n     return false;\n \n-  /* Copy headers iff there looks to be code in the loop after the exit block,\n-     i.e. the exit block has an edge to another block (besides the latch,\n-     which should be empty).  */\n-  edge_iterator ei;\n-  edge e;\n-  FOR_EACH_EDGE (e, ei, exit->src->succs)\n-    if (!loop_exit_edge_p (loop, e)\n-\t&& e->dest != loop->header\n-\t&& e->dest != loop->latch)\n-      return true;\n+  if (!do_while_loop_p (loop))\n+    return true;\n \n   return false;\n }"}, {"sha": "7338ca5efa87ef4a72116c81b7076065d9e26338", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dd6990226fd92adf1e3c12a96c5776ec8efcb60/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dd6990226fd92adf1e3c12a96c5776ec8efcb60/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=1dd6990226fd92adf1e3c12a96c5776ec8efcb60", "patch": "@@ -6075,6 +6075,10 @@ vectorizable_reduction (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n \t    vectype_in = get_vectype_for_scalar_type (TREE_TYPE (op));\n \t  break;\n \t}\n+      /* For a nested cycle we might end up with an operation like\n+         phi_result * phi_result.  */\n+      if (!vectype_in)\n+\tvectype_in = STMT_VINFO_VECTYPE (stmt_info);\n       gcc_assert (vectype_in);\n \n       if (slp_node)"}]}