{"sha": "9adf0570ff15ff5e3df45426bf159e6f4e5a8b3e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWFkZjA1NzBmZjE1ZmY1ZTNkZjQ1NDI2YmYxNTllNmY0ZTVhOGIzZQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-01-17T15:58:08Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-01-17T15:58:08Z"}, "message": "re PR tree-optimization/42773 (ICE with g++ from 4.4.3 20100112 (prerelease))\n\n2010-01-17  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/42773\n\t* tree-ssa-pre.c (phi_translate_set): Fix check for PHI node existence.\n\t(compute_antic_aux): Likewise.\n\t(compute_partial_antic_aux): Likewise.\n\n\t* g++.dg/torture/pr42773.C: New testcase.\n\nFrom-SVN: r155982", "tree": {"sha": "5326b27eefa12a777f779cd86ee6268bba5cc35f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5326b27eefa12a777f779cd86ee6268bba5cc35f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9adf0570ff15ff5e3df45426bf159e6f4e5a8b3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9adf0570ff15ff5e3df45426bf159e6f4e5a8b3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9adf0570ff15ff5e3df45426bf159e6f4e5a8b3e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9adf0570ff15ff5e3df45426bf159e6f4e5a8b3e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d2143a2f9df360029146893efa06d792a84c4ec0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2143a2f9df360029146893efa06d792a84c4ec0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2143a2f9df360029146893efa06d792a84c4ec0"}], "stats": {"total": 74, "additions": 70, "deletions": 4}, "files": [{"sha": "547c4bfd4b2ddbbb5f5e8be1a222d506d25404bf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9adf0570ff15ff5e3df45426bf159e6f4e5a8b3e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9adf0570ff15ff5e3df45426bf159e6f4e5a8b3e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9adf0570ff15ff5e3df45426bf159e6f4e5a8b3e", "patch": "@@ -1,3 +1,10 @@\n+2010-01-17  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/42773\n+\t* tree-ssa-pre.c (phi_translate_set): Fix check for PHI node existence.\n+\t(compute_antic_aux): Likewise.\n+\t(compute_partial_antic_aux): Likewise.\n+\n 2010-01-17  Jie Zhang  <jie.zhang@analog.com>\n \n \tPR debug/42767"}, {"sha": "d5249fdbf94ed480701c34d8ebbbdae6b16ffe8b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9adf0570ff15ff5e3df45426bf159e6f4e5a8b3e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9adf0570ff15ff5e3df45426bf159e6f4e5a8b3e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9adf0570ff15ff5e3df45426bf159e6f4e5a8b3e", "patch": "@@ -1,3 +1,8 @@\n+2010-01-17  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/42773\n+\t* g++.dg/torture/pr42773.C: New testcase.\n+\n 2010-01-17  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/42677"}, {"sha": "478ad278aa6cd18e316265b71b933a005a82d32c", "filename": "gcc/testsuite/g++.dg/torture/pr42773.C", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9adf0570ff15ff5e3df45426bf159e6f4e5a8b3e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr42773.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9adf0570ff15ff5e3df45426bf159e6f4e5a8b3e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr42773.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr42773.C?ref=9adf0570ff15ff5e3df45426bf159e6f4e5a8b3e", "patch": "@@ -0,0 +1,54 @@\n+// { dg-do compile }\n+// { dg-options \"-fno-exceptions\" }\n+\n+typedef unsigned int uint;\n+struct QShared {\n+    bool deref() {\n+\treturn !--count;\n+    }\n+    uint count;\n+};\n+template <class T> class QValueListNode {\n+public:\n+    QValueListNode<T>* next;\n+    QValueListNode<T>* prev;\n+};\n+template <class T> class QValueListPrivate : public QShared {\n+public:\n+    typedef QValueListNode<T> Node;\n+    typedef QValueListNode<T>* NodePtr;\n+    QValueListPrivate();\n+    void derefAndDelete()     {\n+\tif ( deref() )      delete this;\n+    }\n+    ~QValueListPrivate();\n+    NodePtr node;\n+};\n+template <class T>  QValueListPrivate<T>::QValueListPrivate() {\n+    node = new Node;\n+    node->next = node->prev = node;\n+}\n+template <class T>  QValueListPrivate<T>::~QValueListPrivate() {\n+    NodePtr p = node->next;\n+    while( p != node ) {\n+\tNodePtr x = p->next;\n+\tdelete p;\n+\tp = x;\n+    }\n+}\n+template <class T> class QValueList {\n+public:\n+    QValueList() {\n+\tsh = new QValueListPrivate<T>;\n+    }\n+    ~QValueList() {\n+\tsh->derefAndDelete();\n+    }\n+    QValueListPrivate<T>* sh;\n+};\n+class Cell {\n+    QValueList<Cell*> obscuringCells() const;\n+};\n+QValueList<Cell*> Cell::obscuringCells() const {\n+    QValueList<Cell*> empty;\n+}"}, {"sha": "c1e5cd7c701322527b11c6c04acce2d053b17462", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9adf0570ff15ff5e3df45426bf159e6f4e5a8b3e/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9adf0570ff15ff5e3df45426bf159e6f4e5a8b3e/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=9adf0570ff15ff5e3df45426bf159e6f4e5a8b3e", "patch": "@@ -1823,7 +1823,7 @@ phi_translate_set (bitmap_set_t dest, bitmap_set_t set, basic_block pred,\n   pre_expr expr;\n   int i;\n \n-  if (!phi_nodes (phiblock))\n+  if (gimple_seq_empty_p (phi_nodes (phiblock)))\n     {\n       bitmap_set_copy (dest, set);\n       return;\n@@ -2269,14 +2269,14 @@ compute_antic_aux (basic_block block, bool block_has_abnormal_pred_edge)\n \t  goto maybe_dump_sets;\n \t}\n \n-      if (phi_nodes (first))\n+      if (!gimple_seq_empty_p (phi_nodes (first)))\n \tphi_translate_set (ANTIC_OUT, ANTIC_IN (first), block, first);\n       else\n \tbitmap_set_copy (ANTIC_OUT, ANTIC_IN (first));\n \n       for (i = 0; VEC_iterate (basic_block, worklist, i, bprime); i++)\n \t{\n-\t  if (phi_nodes (bprime))\n+\t  if (!gimple_seq_empty_p (phi_nodes (bprime)))\n \t    {\n \t      bitmap_set_t tmp = bitmap_set_new ();\n \t      phi_translate_set (tmp, ANTIC_IN (bprime), block, bprime);\n@@ -2426,7 +2426,7 @@ compute_partial_antic_aux (basic_block block,\n \t      FOR_EACH_EXPR_ID_IN_SET (ANTIC_IN (bprime), i, bi)\n \t\tbitmap_value_insert_into_set (PA_OUT,\n \t\t\t\t\t      expression_for_id (i));\n-\t      if (phi_nodes (bprime))\n+\t      if (!gimple_seq_empty_p (phi_nodes (bprime)))\n \t\t{\n \t\t  bitmap_set_t pa_in = bitmap_set_new ();\n \t\t  phi_translate_set (pa_in, PA_IN (bprime), block, bprime);"}]}