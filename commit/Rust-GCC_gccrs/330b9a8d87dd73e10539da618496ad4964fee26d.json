{"sha": "330b9a8d87dd73e10539da618496ad4964fee26d", "node_id": "C_kwDOANBUbNoAKDMzMGI5YThkODdkZDczZTEwNTM5ZGE2MTg0OTZhZDQ5NjRmZWUyNmQ", "commit": {"author": {"name": "Julian Brown", "email": "julian@codesourcery.com", "date": "2022-12-06T23:10:58Z"}, "committer": {"name": "Julian Brown", "email": "julian@codesourcery.com", "date": "2022-12-14T14:11:46Z"}, "message": "OpenMP: Duplicate checking for map clauses in Fortran (PR107214)\n\nThis patch adds duplicate checking for OpenMP \"map\" clauses, taking some\ncues from the implementation for C in c-typeck.cc:c_finish_omp_clauses\n(and similar for C++).\n\nIn addition to the existing use of the \"mark\" and \"comp_mark\" bitfields\nin the gfc_symbol structure, the patch adds several new bits handling\nduplicate checking within various categories of clause types.  If \"mark\"\nis being used for map clauses, we need to use different bits for other\nclauses for cases where \"map\" and some other clause can refer to the\nsame symbol (e.g. \"map(n) shared(n)\").\n\n2022-12-06  Julian Brown  <julian@codesourcery.com>\n\ngcc/fortran/\n\tPR fortran/107214\n\t* gfortran.h (gfc_symbol): Add data_mark, dev_mark, gen_mark and\n\treduc_mark bitfields.\n\t* openmp.cc (resolve_omp_clauses): Use above bitfields to improve\n\tduplicate clause detection.\n\ngcc/testsuite/\n\tPR fortran/107214\n\t* gfortran.dg/gomp/pr107214.f90: New test.\n\t* gfortran.dg/gomp/pr107214-2.f90: New test.\n\t* gfortran.dg/gomp/pr107214-3.f90: New test.\n\t* gfortran.dg/gomp/pr107214-4.f90: New test.\n\t* gfortran.dg/gomp/pr107214-5.f90: New test.\n\t* gfortran.dg/gomp/pr107214-6.f90: New test.\n\t* gfortran.dg/gomp/pr107214-7.f90: New test.\n\t* gfortran.dg/gomp/pr107214-8.f90: New test.", "tree": {"sha": "6f5f348b8105eb6966adbc59484ba7a859f21405", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f5f348b8105eb6966adbc59484ba7a859f21405"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/330b9a8d87dd73e10539da618496ad4964fee26d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/330b9a8d87dd73e10539da618496ad4964fee26d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/330b9a8d87dd73e10539da618496ad4964fee26d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/330b9a8d87dd73e10539da618496ad4964fee26d/comments", "author": {"login": "jtb20", "id": 6094880, "node_id": "MDQ6VXNlcjYwOTQ4ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6094880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtb20", "html_url": "https://github.com/jtb20", "followers_url": "https://api.github.com/users/jtb20/followers", "following_url": "https://api.github.com/users/jtb20/following{/other_user}", "gists_url": "https://api.github.com/users/jtb20/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtb20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtb20/subscriptions", "organizations_url": "https://api.github.com/users/jtb20/orgs", "repos_url": "https://api.github.com/users/jtb20/repos", "events_url": "https://api.github.com/users/jtb20/events{/privacy}", "received_events_url": "https://api.github.com/users/jtb20/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jtb20", "id": 6094880, "node_id": "MDQ6VXNlcjYwOTQ4ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6094880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtb20", "html_url": "https://github.com/jtb20", "followers_url": "https://api.github.com/users/jtb20/followers", "following_url": "https://api.github.com/users/jtb20/following{/other_user}", "gists_url": "https://api.github.com/users/jtb20/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtb20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtb20/subscriptions", "organizations_url": "https://api.github.com/users/jtb20/orgs", "repos_url": "https://api.github.com/users/jtb20/repos", "events_url": "https://api.github.com/users/jtb20/events{/privacy}", "received_events_url": "https://api.github.com/users/jtb20/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9316ad3b4354cbf2980f86902e54884e918c472a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9316ad3b4354cbf2980f86902e54884e918c472a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9316ad3b4354cbf2980f86902e54884e918c472a"}], "stats": {"total": 384, "additions": 358, "deletions": 26}, "files": [{"sha": "219ef8c76127b4e773ef3c3024a1c2fc378682fe", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/330b9a8d87dd73e10539da618496ad4964fee26d/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/330b9a8d87dd73e10539da618496ad4964fee26d/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=330b9a8d87dd73e10539da618496ad4964fee26d", "patch": "@@ -1871,22 +1871,34 @@ typedef struct gfc_symbol\n \n   gfc_namelist *namelist, *namelist_tail;\n \n+  /* The tlink field is used in the front end to carry the module\n+     declaration of separate module procedures so that the characteristics\n+     can be compared with the corresponding declaration in a submodule. In\n+     translation this field carries a linked list of symbols that require\n+     deferred initialization.  */\n+  struct gfc_symbol *tlink;\n+\n   /* Change management fields.  Symbols that might be modified by the\n      current statement have the mark member nonzero.  Of these symbols,\n      symbols with old_symbol equal to NULL are symbols created within\n      the current statement.  Otherwise, old_symbol points to a copy of\n      the old symbol. gfc_new is used in symbol.cc to flag new symbols.\n      comp_mark is used to indicate variables which have component accesses\n-     in OpenMP/OpenACC directive clauses.  */\n+     in OpenMP/OpenACC directive clauses (cf. c-typeck.cc:c_finish_omp_clauses,\n+     map_field_head).\n+     data_mark is used to check duplicate mappings for OpenMP data-sharing\n+     clauses (see firstprivate_head/lastprivate_head in the above function).\n+     dev_mark is used to check duplicate mappings for OpenMP\n+     is_device_ptr/has_device_addr clauses (see is_on_device_head in above\n+     function).\n+     gen_mark is used to check duplicate mappings for OpenMP\n+     use_device_ptr/use_device_addr/private/shared clauses (see generic_head in\n+     above functon).\n+     reduc_mark is used to check duplicate mappings for OpenMP reduction\n+     clauses.  */\n   struct gfc_symbol *old_symbol;\n-  unsigned mark:1, comp_mark:1, gfc_new:1;\n-\n-  /* The tlink field is used in the front end to carry the module\n-     declaration of separate module procedures so that the characteristics\n-     can be compared with the corresponding declaration in a submodule. In\n-     translation this field carries a linked list of symbols that require\n-     deferred initialization.  */\n-  struct gfc_symbol *tlink;\n+  unsigned mark:1, comp_mark:1, data_mark:1, dev_mark:1, gen_mark:1;\n+  unsigned reduc_mark:1, gfc_new:1;\n \n   /* Nonzero if all equivalences associated with this symbol have been\n      processed.  */"}, {"sha": "b71ee467c01cc1086c557cdb4d25c2f171edc1b3", "filename": "gcc/fortran/openmp.cc", "status": "modified", "additions": 92, "deletions": 17, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/330b9a8d87dd73e10539da618496ad4964fee26d/gcc%2Ffortran%2Fopenmp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/330b9a8d87dd73e10539da618496ad4964fee26d/gcc%2Ffortran%2Fopenmp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fopenmp.cc?ref=330b9a8d87dd73e10539da618496ad4964fee26d", "patch": "@@ -7150,6 +7150,10 @@ resolve_omp_clauses (gfc_code *code, gfc_omp_clauses *omp_clauses,\n \t  continue;\n \tn->sym->mark = 0;\n \tn->sym->comp_mark = 0;\n+\tn->sym->data_mark = 0;\n+\tn->sym->dev_mark = 0;\n+\tn->sym->gen_mark = 0;\n+\tn->sym->reduc_mark = 0;\n \tif (n->sym->attr.flavor == FL_VARIABLE\n \t    || n->sym->attr.proc_pointer\n \t    || (!code && (!n->sym->attr.dummy || n->sym->ns != ns)))\n@@ -7218,14 +7222,9 @@ resolve_omp_clauses (gfc_code *code, gfc_omp_clauses *omp_clauses,\n \t&& list != OMP_LIST_LASTPRIVATE\n \t&& list != OMP_LIST_ALIGNED\n \t&& list != OMP_LIST_DEPEND\n-\t&& (list != OMP_LIST_MAP || openacc)\n \t&& list != OMP_LIST_FROM\n \t&& list != OMP_LIST_TO\n \t&& (list != OMP_LIST_REDUCTION || !openacc)\n-\t&& list != OMP_LIST_REDUCTION_INSCAN\n-\t&& list != OMP_LIST_REDUCTION_TASK\n-\t&& list != OMP_LIST_IN_REDUCTION\n-\t&& list != OMP_LIST_TASK_REDUCTION\n \t&& list != OMP_LIST_ALLOCATE)\n       for (n = omp_clauses->lists[list]; n; n = n->next)\n \t{\n@@ -7237,10 +7236,58 @@ resolve_omp_clauses (gfc_code *code, gfc_omp_clauses *omp_clauses,\n \t    for (gfc_ref *ref = n->expr->ref; ref; ref = ref->next)\n \t      if (ref->type == REF_COMPONENT)\n \t\tcomponent_ref_p = true;\n-\t  if ((!component_ref_p && n->sym->comp_mark)\n-\t      || (component_ref_p && n->sym->mark))\n-\t    gfc_error (\"Symbol %qs has mixed component and non-component \"\n-\t\t       \"accesses at %L\", n->sym->name, &n->where);\n+\t  if ((list == OMP_LIST_IS_DEVICE_PTR\n+\t       || list == OMP_LIST_HAS_DEVICE_ADDR)\n+\t      && !component_ref_p)\n+\t    {\n+\t      if (n->sym->gen_mark\n+\t\t  || n->sym->dev_mark\n+\t\t  || n->sym->reduc_mark\n+\t\t  || n->sym->mark)\n+\t\tgfc_error (\"Symbol %qs present on multiple clauses at %L\",\n+\t\t\t   n->sym->name, &n->where);\n+\t      else\n+\t\tn->sym->dev_mark = 1;\n+\t    }\n+\t  else if ((list == OMP_LIST_USE_DEVICE_PTR\n+\t\t    || list == OMP_LIST_USE_DEVICE_ADDR\n+\t\t    || list == OMP_LIST_PRIVATE\n+\t\t    || list == OMP_LIST_SHARED)\n+\t\t   && !component_ref_p)\n+\t    {\n+\t      if (n->sym->gen_mark || n->sym->dev_mark || n->sym->reduc_mark)\n+\t\tgfc_error (\"Symbol %qs present on multiple clauses at %L\",\n+\t\t\t   n->sym->name, &n->where);\n+\t      else\n+\t\t{\n+\t\t  n->sym->gen_mark = 1;\n+\t\t  /* Set both generic and device bits if we have\n+\t\t     use_device_*(x) or shared(x).  This allows us to diagnose\n+\t\t     \"map(x) private(x)\" below.  */\n+\t\t  if (list != OMP_LIST_PRIVATE)\n+\t\t    n->sym->dev_mark = 1;\n+\t\t}\n+\t    }\n+\t  else if ((list == OMP_LIST_REDUCTION\n+\t\t    || list == OMP_LIST_REDUCTION_TASK\n+\t\t    || list == OMP_LIST_REDUCTION_INSCAN\n+\t\t    || list == OMP_LIST_IN_REDUCTION\n+\t\t    || list == OMP_LIST_TASK_REDUCTION)\n+\t\t   && !component_ref_p)\n+\t    {\n+\t      /* Attempts to mix reduction types are diagnosed below.  */\n+\t      if (n->sym->gen_mark || n->sym->dev_mark)\n+\t\tgfc_error (\"Symbol %qs present on multiple clauses at %L\",\n+\t\t\t   n->sym->name, &n->where);\n+\t      n->sym->reduc_mark = 1;\n+\t    }\n+\t  else if ((!component_ref_p && n->sym->comp_mark)\n+\t\t   || (component_ref_p && n->sym->mark))\n+\t    {\n+\t      if (openacc)\n+\t\tgfc_error (\"Symbol %qs has mixed component and non-component \"\n+\t\t\t   \"accesses at %L\", n->sym->name, &n->where);\n+\t    }\n \t  else if (n->sym->mark)\n \t    gfc_error (\"Symbol %qs present on multiple clauses at %L\",\n \t\t       n->sym->name, &n->where);\n@@ -7253,34 +7300,62 @@ resolve_omp_clauses (gfc_code *code, gfc_omp_clauses *omp_clauses,\n \t    }\n \t}\n \n+  /* Detect specifically the case where we have \"map(x) private(x)\" and raise\n+     an error.  If we have \"...simd\" combined directives though, the \"private\"\n+     applies to the simd part, so this is permitted though.  */\n+  for (n = omp_clauses->lists[OMP_LIST_PRIVATE]; n; n = n->next)\n+    if (n->sym->mark\n+\t&& n->sym->gen_mark\n+\t&& !n->sym->dev_mark\n+\t&& !n->sym->reduc_mark\n+\t&& code->op != EXEC_OMP_TARGET_SIMD\n+\t&& code->op != EXEC_OMP_TARGET_PARALLEL_DO_SIMD\n+\t&& code->op != EXEC_OMP_TARGET_TEAMS_DISTRIBUTE_SIMD\n+\t&& code->op != EXEC_OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD)\n+      gfc_error (\"Symbol %qs present on multiple clauses at %L\",\n+\t\t n->sym->name, &n->where);\n+\n   gcc_assert (OMP_LIST_LASTPRIVATE == OMP_LIST_FIRSTPRIVATE + 1);\n   for (list = OMP_LIST_FIRSTPRIVATE; list <= OMP_LIST_LASTPRIVATE; list++)\n     for (n = omp_clauses->lists[list]; n; n = n->next)\n-      if (n->sym->mark)\n+      if (n->sym->data_mark || n->sym->gen_mark || n->sym->dev_mark)\n \t{\n \t  gfc_error (\"Symbol %qs present on multiple clauses at %L\",\n \t\t     n->sym->name, &n->where);\n-\t  n->sym->mark = 0;\n-\t}\n+\t  n->sym->data_mark = n->sym->gen_mark = n->sym->dev_mark = 0;\n+\t}\n+      else if (n->sym->mark\n+\t       && code->op != EXEC_OMP_TARGET_TEAMS\n+\t       && code->op != EXEC_OMP_TARGET_TEAMS_DISTRIBUTE\n+\t       && code->op != EXEC_OMP_TARGET_TEAMS_LOOP\n+\t       && code->op != EXEC_OMP_TARGET_TEAMS_DISTRIBUTE_SIMD\n+\t       && code->op != EXEC_OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO\n+\t       && code->op != EXEC_OMP_TARGET_PARALLEL\n+\t       && code->op != EXEC_OMP_TARGET_PARALLEL_DO\n+\t       && code->op != EXEC_OMP_TARGET_PARALLEL_LOOP\n+\t       && code->op != EXEC_OMP_TARGET_PARALLEL_DO_SIMD\n+\t       && code->op != EXEC_OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD)\n+\tgfc_error (\"Symbol %qs present on both data and map clauses \"\n+\t\t   \"at %L\", n->sym->name, &n->where);\n \n   for (n = omp_clauses->lists[OMP_LIST_FIRSTPRIVATE]; n; n = n->next)\n     {\n-      if (n->sym->mark)\n+      if (n->sym->data_mark || n->sym->gen_mark || n->sym->dev_mark)\n \tgfc_error (\"Symbol %qs present on multiple clauses at %L\",\n \t\t   n->sym->name, &n->where);\n       else\n-\tn->sym->mark = 1;\n+\tn->sym->data_mark = 1;\n     }\n   for (n = omp_clauses->lists[OMP_LIST_LASTPRIVATE]; n; n = n->next)\n-    n->sym->mark = 0;\n+    n->sym->data_mark = 0;\n \n   for (n = omp_clauses->lists[OMP_LIST_LASTPRIVATE]; n; n = n->next)\n     {\n-      if (n->sym->mark)\n+      if (n->sym->data_mark || n->sym->gen_mark || n->sym->dev_mark)\n \tgfc_error (\"Symbol %qs present on multiple clauses at %L\",\n \t\t   n->sym->name, &n->where);\n       else\n-\tn->sym->mark = 1;\n+\tn->sym->data_mark = 1;\n     }\n \n   for (n = omp_clauses->lists[OMP_LIST_ALIGNED]; n; n = n->next)"}, {"sha": "da47e40f359b25f82fc29d34ef8a94239f13952a", "filename": "gcc/testsuite/gfortran.dg/gomp/pr107214-2.f90", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/330b9a8d87dd73e10539da618496ad4964fee26d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr107214-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/330b9a8d87dd73e10539da618496ad4964fee26d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr107214-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr107214-2.f90?ref=330b9a8d87dd73e10539da618496ad4964fee26d", "patch": "@@ -0,0 +1,6 @@\n+integer :: y\n+\n+!$omp target has_device_addr(y) firstprivate(y)  ! { dg-error \"Symbol 'y' present on multiple clauses\" }\n+!$omp end target\n+\n+end"}, {"sha": "526152e110181c2b962c4c696ce869a61efbddda", "filename": "gcc/testsuite/gfortran.dg/gomp/pr107214-3.f90", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/330b9a8d87dd73e10539da618496ad4964fee26d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr107214-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/330b9a8d87dd73e10539da618496ad4964fee26d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr107214-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr107214-3.f90?ref=330b9a8d87dd73e10539da618496ad4964fee26d", "patch": "@@ -0,0 +1,14 @@\n+program p\n+integer :: y\n+\n+!$omp target map(y) firstprivate(y)  ! { dg-error \"Symbol 'y' present on both data and map clauses\" }\n+y = y + 1\n+!$omp end target\n+\n+!$omp target simd map(y) firstprivate(y)  ! { dg-error \"Symbol 'y' present on both data and map clauses\" }\n+do i=1,1\n+  y = y + 1\n+end do\n+!$omp end target simd\n+\n+end program p"}, {"sha": "b4f343a17acc61ca4256448fcfaa473352f1b003", "filename": "gcc/testsuite/gfortran.dg/gomp/pr107214-4.f90", "status": "added", "additions": 147, "deletions": 0, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/330b9a8d87dd73e10539da618496ad4964fee26d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr107214-4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/330b9a8d87dd73e10539da618496ad4964fee26d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr107214-4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr107214-4.f90?ref=330b9a8d87dd73e10539da618496ad4964fee26d", "patch": "@@ -0,0 +1,147 @@\n+! { dg-do compile }\n+! { dg-additional-options \"-fdump-tree-original\" }\n+\n+integer :: x, y\n+\n+! EXEC_OMP_TARGET_TEAMS\n+\n+!$omp target teams map(x) firstprivate(x)\n+x = x + 1\n+!$omp end target teams\n+\n+!$omp target teams map(x) firstprivate(y)\n+x = y + 1\n+!$omp end target teams\n+\n+! EXEC_OMP_TARGET_TEAMS_DISTRIBUTE\n+\n+!$omp target teams distribute map(x) firstprivate(x)\n+do i=1,1\n+  x = x + 1\n+end do\n+!$omp end target teams distribute\n+\n+!$omp target teams distribute map(x) firstprivate(y)\n+do i=1,1\n+  x = y + 1\n+end do\n+!$omp end target teams distribute\n+\n+! EXEC_OMP_TARGET_TEAMS_LOOP\n+\n+!$omp target teams loop map(x) firstprivate(x)\n+do i=1,1\n+  x = x + 1\n+end do\n+!$omp end target teams loop\n+\n+!$omp target teams loop map(x) firstprivate(y)\n+do i=1,1\n+  x = y + 1\n+end do\n+!$omp end target teams loop\n+\n+! EXEC_OMP_TARGET_TEAMS_DISTRIBUTE_SIMD\n+\n+!$omp target teams distribute simd map(x) firstprivate(x)\n+do i=1,1\n+  x = x + 1\n+end do\n+!$omp end target teams distribute simd\n+\n+!$omp target teams distribute simd map(x) firstprivate(y)\n+do i=1,1\n+  x = y + 1\n+end do\n+!$omp end target teams distribute simd\n+\n+! EXEC_OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO\n+\n+!$omp target teams distribute parallel do map(x) firstprivate(x)\n+do i=1,1\n+  x = x + 1\n+end do\n+!$omp end target teams distribute parallel do\n+\n+!$omp target teams distribute parallel do map(x) firstprivate(y)\n+do i=1,1\n+  x = y + 1\n+end do\n+!$omp end target teams distribute parallel do\n+\n+! EXEC_OMP_TARGET_PARALLEL\n+\n+!$omp target parallel map(x) firstprivate(x)\n+x = x + 1\n+!$omp end target parallel\n+\n+!$omp target parallel map(x) firstprivate(y)\n+x = y + 1\n+!$omp end target parallel\n+\n+! EXEC_OMP_TARGET_PARALLEL_DO\n+\n+!$omp target parallel do map(x) firstprivate(x)\n+do i=1,1\n+  x = x + 1\n+end do\n+!$omp end target parallel do\n+\n+!$omp target parallel do map(x) firstprivate(y)\n+do i=1,1\n+  x = y + 1\n+end do\n+!$omp end target parallel do\n+\n+! EXEC_OMP_TARGET_PARALLEL_LOOP\n+\n+!$omp target parallel loop map(x) firstprivate(x)\n+do i=1,1\n+  x = x + 1\n+end do\n+!$omp end target parallel loop\n+\n+!$omp target parallel loop map(x) firstprivate(y)\n+do i=1,1\n+  x = y + 1\n+end do\n+!$omp end target parallel loop\n+\n+! EXEC_OMP_TARGET_PARALLEL_DO_SIMD\n+\n+!$omp target parallel do simd map(x) firstprivate(x)\n+do i=1,1\n+  x = x + 1\n+end do\n+!$omp end target parallel do simd\n+\n+!$omp target parallel do simd map(x) firstprivate(y)\n+do i=1,1\n+  x = y + 1\n+end do\n+!$omp end target parallel do simd\n+\n+! EXEC_OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD\n+\n+!$omp target teams distribute parallel do simd map(x) firstprivate(x)\n+do i=1,1\n+  x = x + 1\n+end do\n+!$omp end target teams distribute parallel do simd\n+\n+!$omp target teams distribute parallel do simd map(x) firstprivate(y)\n+do i=1,1\n+  x = y + 1\n+end do\n+!$omp end target teams distribute parallel do simd\n+\n+! { dg-final { scan-tree-dump-times {omp target map\\(tofrom:x\\)} 10 \"original\" } }\n+! { dg-final { scan-tree-dump-times {omp target firstprivate\\(y\\) map\\(tofrom:x\\)} 10 \"original\" } }\n+\n+! { dg-final { scan-tree-dump-times {omp teams firstprivate\\(x\\)} 6 \"original\" } }\n+! { dg-final { scan-tree-dump-times {omp teams firstprivate\\(y\\)} 6 \"original\" } }\n+\n+! { dg-final { scan-tree-dump-times {omp parallel firstprivate\\(x\\)} 6 \"original\" } }\n+! { dg-final { scan-tree-dump-times {omp parallel firstprivate\\(y\\)} 6 \"original\" } }\n+\n+end"}, {"sha": "08a9f62b0881cc9936e3b9805f1dfc1e0753a825", "filename": "gcc/testsuite/gfortran.dg/gomp/pr107214-5.f90", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/330b9a8d87dd73e10539da618496ad4964fee26d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr107214-5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/330b9a8d87dd73e10539da618496ad4964fee26d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr107214-5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr107214-5.f90?ref=330b9a8d87dd73e10539da618496ad4964fee26d", "patch": "@@ -0,0 +1,11 @@\n+integer :: x, y\n+\n+!$omp target in_reduction(+: x) private(x)  ! { dg-error \"Symbol 'x' present on multiple clauses\" }\n+x = x + 1\n+!$omp end target\n+\n+!$omp target in_reduction(+: y) firstprivate(y)  ! { dg-error \"Symbol 'y' present on both data and map clauses\" }\n+y = y + 1\n+!$omp end target\n+\n+end"}, {"sha": "0a1270645518ba4cac5a9dbb68a17d05ba81ee0d", "filename": "gcc/testsuite/gfortran.dg/gomp/pr107214-6.f90", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/330b9a8d87dd73e10539da618496ad4964fee26d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr107214-6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/330b9a8d87dd73e10539da618496ad4964fee26d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr107214-6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr107214-6.f90?ref=330b9a8d87dd73e10539da618496ad4964fee26d", "patch": "@@ -0,0 +1,9 @@\n+! { dg-do compile }\n+\n+integer :: x\n+\n+!$omp target map(x) private(x)  ! { dg-error \"Symbol 'x' present on multiple clauses\" }\n+x = x + 1\n+!$omp end target\n+\n+end"}, {"sha": "125d1bc4fed4303bf2bc549c5cf40b7efc42d67a", "filename": "gcc/testsuite/gfortran.dg/gomp/pr107214-7.f90", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/330b9a8d87dd73e10539da618496ad4964fee26d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr107214-7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/330b9a8d87dd73e10539da618496ad4964fee26d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr107214-7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr107214-7.f90?ref=330b9a8d87dd73e10539da618496ad4964fee26d", "patch": "@@ -0,0 +1,33 @@\n+! { dg-do compile }\n+! { dg-additional-options \"-fdump-tree-original\" }\n+\n+integer :: x\n+\n+!$omp target simd map(x) private(x)\n+do i=1,1\n+  x = x + 1\n+end do\n+!$omp end target simd\n+\n+!$omp target teams distribute simd map(x) private(x)\n+do i=1,1\n+  x = x + 1\n+end do\n+!$omp end target teams distribute simd\n+\n+!$omp target parallel do simd map(x) private(x)\n+do i=1,1\n+  x = x + 1\n+end do\n+!$omp end target parallel do simd\n+\n+!$omp target teams distribute parallel do simd map(x) private(x)\n+do i=1,1\n+  x = x + 1\n+end do\n+!$omp end target teams distribute parallel do simd\n+\n+! { dg-final { scan-tree-dump-times {omp target map\\(tofrom:x\\)} 4 \"original\" } }\n+! { dg-final { scan-tree-dump-times {(?n)omp simd.* private\\(x\\)} 4 \"original\" } }\n+\n+end"}, {"sha": "192c97a33e5c1381fd83bcf82b7a7a434cbf9863", "filename": "gcc/testsuite/gfortran.dg/gomp/pr107214-8.f90", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/330b9a8d87dd73e10539da618496ad4964fee26d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr107214-8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/330b9a8d87dd73e10539da618496ad4964fee26d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr107214-8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr107214-8.f90?ref=330b9a8d87dd73e10539da618496ad4964fee26d", "patch": "@@ -0,0 +1,18 @@\n+! { dg-do compile }\n+\n+integer, allocatable :: x\n+integer, pointer :: y\n+\n+!$omp target map(x) has_device_addr(x)  ! { dg-error \"Symbol 'x' present on multiple clauses\" }\n+!$omp end target\n+\n+!$omp target map(y) is_device_ptr(y)  ! { dg-error \"Symbol 'y' present on multiple clauses\" }\n+!$omp end target\n+\n+!$omp target firstprivate(x) has_device_addr(x)  ! { dg-error \"Symbol 'x' present on multiple clauses\" }\n+!$omp end target\n+\n+!$omp target firstprivate(y) is_device_ptr(y)  ! { dg-error \"Symbol 'y' present on multiple clauses\" }\n+!$omp end target\n+\n+end"}, {"sha": "25949934e840039da28839b3901691c8a7d03f89", "filename": "gcc/testsuite/gfortran.dg/gomp/pr107214.f90", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/330b9a8d87dd73e10539da618496ad4964fee26d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr107214.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/330b9a8d87dd73e10539da618496ad4964fee26d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr107214.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr107214.f90?ref=330b9a8d87dd73e10539da618496ad4964fee26d", "patch": "@@ -0,0 +1,7 @@\n+! { dg-do compile }\n+\n+program p\n+   integer, allocatable :: a\n+   !$omp target map(tofrom: a, a) ! { dg-error \"Symbol 'a' present on multiple clauses\" }\n+   !$omp end target\n+end"}]}