{"sha": "a3dc1a4518793aa75cd60e41cf7f75d234a55031", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTNkYzFhNDUxODc5M2FhNzVjZDYwZTQxY2Y3Zjc1ZDIzNGE1NTAzMQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2014-11-24T10:25:06Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2014-11-24T10:25:06Z"}, "message": "re PR lto/63968 (175.vpr from cpu2000 fails to build with LTO)\n\nPR lto/63968\n\n        * bb-reorder.c (find_traces_1_round): decreate_key is replaced\n\twith replace_key method.\n\t* fibonacci_heap.h (fibonacci_heap::insert): New argument.\n\t(fibonacci_heap::replace_key_data): Likewise.\n\t(fibonacci_heap::replace_key): New method that can even increment key,\n\tthis operation costs O(log N).\n\t(fibonacci_heap::extract_min): New argument.\n\t(fibonacci_heap::delete_node): Likewise.\n\nFrom-SVN: r218006", "tree": {"sha": "63b196c61b62633c876f3299249b61d50acf905c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63b196c61b62633c876f3299249b61d50acf905c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3dc1a4518793aa75cd60e41cf7f75d234a55031", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3dc1a4518793aa75cd60e41cf7f75d234a55031", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3dc1a4518793aa75cd60e41cf7f75d234a55031", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3dc1a4518793aa75cd60e41cf7f75d234a55031/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aa098165777d11e3c8bb39936339e9a54d7d6f12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa098165777d11e3c8bb39936339e9a54d7d6f12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa098165777d11e3c8bb39936339e9a54d7d6f12"}], "stats": {"total": 76, "additions": 57, "deletions": 19}, "files": [{"sha": "8f42d0902450ff2dcde71f68461fe2c88793ae28", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3dc1a4518793aa75cd60e41cf7f75d234a55031/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3dc1a4518793aa75cd60e41cf7f75d234a55031/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a3dc1a4518793aa75cd60e41cf7f75d234a55031", "patch": "@@ -1,3 +1,15 @@\n+2014-11-24  Martin Liska  <mliska@suse.cz>\n+\n+\tPR lto/63968\n+\t* bb-reorder.c (find_traces_1_round): decreate_key is replaced\n+\twith replace_key method.\n+\t* fibonacci_heap.h (fibonacci_heap::insert): New argument.\n+\t(fibonacci_heap::replace_key_data): Likewise.\n+\t(fibonacci_heap::replace_key): New method that can even increment key,\n+\tthis operation costs O(log N).\n+\t(fibonacci_heap::extract_min): New argument.\n+\t(fibonacci_heap::delete_node): Likewise.\n+\n 2014-11-24  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/55334"}, {"sha": "b568114ecb79e75b1cd0b4b406e4daadb0764424", "filename": "gcc/bb-reorder.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3dc1a4518793aa75cd60e41cf7f75d234a55031/gcc%2Fbb-reorder.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3dc1a4518793aa75cd60e41cf7f75d234a55031/gcc%2Fbb-reorder.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbb-reorder.c?ref=a3dc1a4518793aa75cd60e41cf7f75d234a55031", "patch": "@@ -644,7 +644,7 @@ find_traces_1_round (int branch_th, int exec_th, gcov_type count_th,\n \t\t\t\t   (long) bbd[e->dest->index].node->get_key (),\n \t\t\t\t   key);\n \t\t\t}\n-\t\t      bbd[e->dest->index].heap->decrease_key\n+\t\t      bbd[e->dest->index].heap->replace_key\n \t\t        (bbd[e->dest->index].node, key);\n \t\t    }\n \t\t}\n@@ -812,7 +812,7 @@ find_traces_1_round (int branch_th, int exec_th, gcov_type count_th,\n \t\t\t       e->dest->index,\n \t\t\t       (long) bbd[e->dest->index].node->get_key (), key);\n \t\t    }\n-\t\t  bbd[e->dest->index].heap->decrease_key\n+\t\t  bbd[e->dest->index].heap->replace_key\n \t\t    (bbd[e->dest->index].node, key);\n \t\t}\n \t    }"}, {"sha": "3fce3701737c552cc6b96fc3bf777c9ddc5a9d1a", "filename": "gcc/fibonacci_heap.h", "status": "modified", "additions": 43, "deletions": 17, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3dc1a4518793aa75cd60e41cf7f75d234a55031/gcc%2Ffibonacci_heap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3dc1a4518793aa75cd60e41cf7f75d234a55031/gcc%2Ffibonacci_heap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffibonacci_heap.h?ref=a3dc1a4518793aa75cd60e41cf7f75d234a55031", "patch": "@@ -183,20 +183,27 @@ class fibonacci_heap\n   }\n \n   /* For given NODE, set new KEY value.  */\n-  K decrease_key (fibonacci_node_t *node, K key)\n+  K replace_key (fibonacci_node_t *node, K key)\n   {\n     K okey = node->m_key;\n-    gcc_assert (key <= okey);\n \n     replace_key_data (node, key, node->m_data);\n     return okey;\n   }\n \n+  /* For given NODE, decrease value to new KEY.  */\n+  K decrease_key (fibonacci_node_t *node, K key)\n+  {\n+    gcc_assert (key <= node->m_key);\n+    return replace_key (node, key);\n+  }\n+\n   /* For given NODE, set new KEY and DATA value.  */\n   V *replace_key_data (fibonacci_node_t *node, K key, V *data);\n \n-  /* Extract minimum node in the heap. */\n-  V *extract_min ();\n+  /* Extract minimum node in the heap. If RELEASE is specified,\n+     memory is released.  */\n+  V *extract_min (bool release = true);\n \n   /* Return value associated with minimum node in the heap.  */\n   V *min ()\n@@ -214,12 +221,15 @@ class fibonacci_heap\n   }\n \n   /* Delete NODE in the heap.  */\n-  V *delete_node (fibonacci_node_t *node);\n+  V *delete_node (fibonacci_node_t *node, bool release = true);\n \n   /* Union the heap with HEAPB.  */\n   fibonacci_heap *union_with (fibonacci_heap *heapb);\n \n private:\n+  /* Insert new NODE given by KEY and DATA associated with the key.  */\n+  fibonacci_node_t *insert (fibonacci_node_t *node, K key, V *data);\n+\n   /* Insert it into the root list.  */\n   void insert_root (fibonacci_node_t *node);\n \n@@ -322,6 +332,15 @@ fibonacci_heap<K,V>::insert (K key, V *data)\n   /* Create the new node.  */\n   fibonacci_node<K,V> *node = new fibonacci_node_t ();\n \n+  return insert (node, key, data);\n+}\n+\n+/* Insert new NODE given by KEY and DATA associated with the key.  */\n+\n+template<class K, class V>\n+fibonacci_node<K,V>*\n+fibonacci_heap<K,V>::insert (fibonacci_node_t *node, K key, V *data)\n+{\n   /* Set the node's data.  */\n   node->m_data = data;\n   node->m_key = key;\n@@ -345,17 +364,22 @@ V*\n fibonacci_heap<K,V>::replace_key_data (fibonacci_node<K,V> *node, K key,\n \t\t\t\t       V *data)\n {\n-  V *odata;\n   K okey;\n   fibonacci_node<K,V> *y;\n+  V *odata = node->m_data;\n \n-  /* If we wanted to, we could actually do a real increase by redeleting and\n-     inserting. However, this would require O (log n) time. So just bail out\n-     for now.  */\n+  /* If we wanted to, we do a real increase by redeleting and\n+     inserting.  */\n   if (node->compare_data (key) > 0)\n-    return NULL;\n+    {\n+      delete_node (node, false);\n+\n+      node = new (node) fibonacci_node_t ();\n+      insert (node, key, data);\n+\n+      return odata;\n+    }\n \n-  odata = node->m_data;\n   okey = node->m_key;\n   node->m_data = data;\n   node->m_key = key;\n@@ -385,7 +409,7 @@ fibonacci_heap<K,V>::replace_key_data (fibonacci_node<K,V> *node, K key,\n /* Extract minimum node in the heap.  */\n template<class K, class V>\n V*\n-fibonacci_heap<K,V>::extract_min ()\n+fibonacci_heap<K,V>::extract_min (bool release)\n {\n   fibonacci_node<K,V> *z;\n   V *ret = NULL;\n@@ -397,28 +421,30 @@ fibonacci_heap<K,V>::extract_min ()\n        node's data.  */\n       z = extract_minimum_node ();\n       ret = z->m_data;\n-      delete (z);\n+\n+      if (release)\n+        delete (z);\n     }\n \n   return ret;\n }\n \n-/* Delete NODE in the heap.  */\n+/* Delete NODE in the heap, if RELEASE is specified memory is released.  */\n \n template<class K, class V>\n V*\n-fibonacci_heap<K,V>::delete_node (fibonacci_node<K,V> *node)\n+fibonacci_heap<K,V>::delete_node (fibonacci_node<K,V> *node, bool release)\n {\n   V *ret = node->m_data;\n \n   /* To perform delete, we just make it the min key, and extract.  */\n-  decrease_key (node, m_global_min_key);\n+  replace_key (node, m_global_min_key);\n   if (node != m_min)\n     {\n       fprintf (stderr, \"Can't force minimum on fibheap.\\n\");\n       abort ();\n     }\n-  extract_min ();\n+  extract_min (release);\n \n   return ret;\n }"}]}