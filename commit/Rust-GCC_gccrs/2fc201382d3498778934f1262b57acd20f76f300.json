{"sha": "2fc201382d3498778934f1262b57acd20f76f300", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmZjMjAxMzgyZDM0OTg3Nzg5MzRmMTI2MmI1N2FjZDIwZjc2ZjMwMA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-08-21T22:34:16Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-08-26T01:41:05Z"}, "message": "analyzer: fix leak false positive/widening on pointer iteration [PR94858]\n\nPR analyzer/94858 reports a false diagnostic from\n-Wanalyzer-malloc-leak, where the allocated pointer is pointed to by a\nfield of a struct, and a loop writes to a buffer, writing through an\niterating pointer value.\n\nThere were several underlying problems, relating to clobbering of the\nstruct holding the malloc-ed pointer; in each case the analyzer was\nconservatively assuming that a write could affect this region,\nclobbering it to \"unknown\", and this was detected as a leak.\n\nThe initial write within the loop dereferences the initial value of\na field, and the analyzer was assuming that that pointer could\npoint to the result of the malloc call.  The patch extends\nstore::eval_alias_1 so that it \"knows\" that the initial value of a\npointer at the beginning of a path can't point to a region that was\nallocated on the heap after the beginning of the path.\n\nOn fixing that, the next issue is that within the loop the iterated\npointer value becomes \"unknown\", and hence *ptr becomes a write to a\nsymbolic region, and thus might clobber the struct (which it can't).\nThis patch adds enough logic to svalue::can_merge_p to merge the\niterating pointer value so that at the 2nd iteration analyzing\nthe loop it becomes a widening_svalue from the initial svalue, so\nthat this becomes a fixed point of the analysis, and is not an\nunknown_svalue.  The patch further extends store::eval_alias_1 so that\nit \"knows\" that this widening_svalue can only point to the same base\nregion as the initial value did; in particular, symbolic writes through\nthis pointer can only clobber that base region, not the struct holding\nthe malloc-ed pointer.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/94858\n\t* region-model-manager.cc\n\t(region_model_manager::get_or_create_widening_svalue): Assert that\n\tneither of the inputs are themselves widenings.\n\t* store.cc (store::eval_alias_1): The initial value of a pointer\n\tcan't point to a region that was allocated on the heap after the\n\tbeginning of the path.  A widened pointer value can't alias anything\n\tthat the initial pointer value can't alias.\n\t* svalue.cc (svalue::can_merge_p): Merge BINOP (X, OP, CST) with X\n\tto a widening svalue.  Merge\n\tBINOP(WIDENING(BASE, BINOP(BASE, X)), X) and BINOP(BASE, X) to\n\tto the LHS of the first BINOP.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/94858\n\t* gcc.dg/analyzer/loop-start-up-to-end-by-1.c: Remove xfail.\n\t* gcc.dg/analyzer/pr94858-1.c: New test.\n\t* gcc.dg/analyzer/pr94858-2.c: New test.\n\t* gcc.dg/analyzer/torture/loop-inc-ptr-2.c: Update expected number\n\tof enodes.\n\t* gcc.dg/analyzer/torture/loop-inc-ptr-3.c: Likewise.", "tree": {"sha": "d7d4041be925e87889af093a4a8aacc4d1c4c1a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7d4041be925e87889af093a4a8aacc4d1c4c1a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2fc201382d3498778934f1262b57acd20f76f300", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fc201382d3498778934f1262b57acd20f76f300", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fc201382d3498778934f1262b57acd20f76f300", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fc201382d3498778934f1262b57acd20f76f300/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d88c8df70342fcd6817e23f243ff38d0fe42fc6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d88c8df70342fcd6817e23f243ff38d0fe42fc6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d88c8df70342fcd6817e23f243ff38d0fe42fc6b"}], "stats": {"total": 127, "additions": 123, "deletions": 4}, "files": [{"sha": "9bfb0812998fe09a85e497d1baec220a2ae295d2", "filename": "gcc/analyzer/region-model-manager.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fc201382d3498778934f1262b57acd20f76f300/gcc%2Fanalyzer%2Fregion-model-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fc201382d3498778934f1262b57acd20f76f300/gcc%2Fanalyzer%2Fregion-model-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model-manager.cc?ref=2fc201382d3498778934f1262b57acd20f76f300", "patch": "@@ -651,6 +651,8 @@ region_model_manager::get_or_create_widening_svalue (tree type,\n \t\t\t\t\t\t     const svalue *base_sval,\n \t\t\t\t\t\t     const svalue *iter_sval)\n {\n+  gcc_assert (base_sval->get_kind () != SK_WIDENING);\n+  gcc_assert (iter_sval->get_kind () != SK_WIDENING);\n   widening_svalue::key_t key (type, point, base_sval, iter_sval);\n   if (widening_svalue **slot = m_widening_values_map.get (key))\n     return *slot;"}, {"sha": "14f7c00bde6dea7a5acf1d15c9f5a5287d58dd6d", "filename": "gcc/analyzer/store.cc", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fc201382d3498778934f1262b57acd20f76f300/gcc%2Fanalyzer%2Fstore.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fc201382d3498778934f1262b57acd20f76f300/gcc%2Fanalyzer%2Fstore.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fstore.cc?ref=2fc201382d3498778934f1262b57acd20f76f300", "patch": "@@ -1606,6 +1606,35 @@ store::eval_alias_1 (const region *base_reg_a,\n \t      /* The initial value of a pointer can't point to a local.  */\n \t      return tristate::TS_FALSE;\n \t    }\n+      if (sval_a->get_kind () == SK_INITIAL\n+\t  && base_reg_b->get_kind () == RK_HEAP_ALLOCATED)\n+\t{\n+\t  /* The initial value of a pointer can't point to a\n+\t     region that was allocated on the heap after the beginning of the\n+\t     path.  */\n+\t  return tristate::TS_FALSE;\n+\t}\n+      if (const widening_svalue *widening_sval_a\n+\t  = sval_a->dyn_cast_widening_svalue ())\n+\t{\n+\t  const svalue *base = widening_sval_a->get_base_svalue ();\n+\t  if (const region_svalue *region_sval\n+\t\t= base->dyn_cast_region_svalue ())\n+\t    {\n+\t      const region *pointee = region_sval->get_pointee ();\n+\t      /* If we have sval_a is WIDENING(&REGION, OP), and\n+\t\t B can't alias REGION, then B can't alias A either.\n+\t\t For example, A might arise from\n+\t\t   for (ptr = &REGION; ...; ptr++)\n+\t\t where sval_a is ptr in the 2nd iteration of the loop.\n+\t\t We want to ensure that \"*ptr\" can only clobber things\n+\t\t within REGION's base region.  */\n+\t      tristate ts = eval_alias (pointee->get_base_region (),\n+\t\t\t\t\tbase_reg_b);\n+\t      if (ts.is_false ())\n+\t\treturn tristate::TS_FALSE;\n+\t    }\n+\t}\n     }\n   return tristate::TS_UNKNOWN;\n }"}, {"sha": "a1c6241a0badff83fd92cff12e40aebc8b4b541f", "filename": "gcc/analyzer/svalue.cc", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fc201382d3498778934f1262b57acd20f76f300/gcc%2Fanalyzer%2Fsvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fc201382d3498778934f1262b57acd20f76f300/gcc%2Fanalyzer%2Fsvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsvalue.cc?ref=2fc201382d3498778934f1262b57acd20f76f300", "patch": "@@ -196,6 +196,18 @@ svalue::can_merge_p (const svalue *other,\n \t\t\t\t\t\t other, this);\n     }\n \n+  /* Merger of:\n+\t this: BINOP (X, OP, CST)\n+\tother: X, where X is non-widening\n+\t   to: WIDENING (other, this).  */\n+  if (const binop_svalue *binop_sval = dyn_cast_binop_svalue ())\n+    if (binop_sval->get_arg0 () == other\n+\t&& binop_sval->get_arg1 ()->get_kind () == SK_CONSTANT\n+\t&& other->get_kind () != SK_WIDENING)\n+      return mgr->get_or_create_widening_svalue (other->get_type (),\n+\t\t\t\t\t\t merger->m_point,\n+\t\t\t\t\t\t other, this);\n+\n   /* Merge: (Widen(existing_val, V), existing_val) -> Widen (existing_val, V)\n      and thus get a fixed point.  */\n   if (const widening_svalue *widen_sval = dyn_cast_widening_svalue ())\n@@ -231,6 +243,17 @@ svalue::can_merge_p (const svalue *other,\n \t  {\n \t    return widen_arg0;\n \t  }\n+\n+\t/* Merger of:\n+\t    this: BINOP(WIDENING(BASE, BINOP(BASE, X)), X)\n+\t   other: BINOP(BASE, X)\n+\t      to: WIDENING(BASE, BINOP(BASE, X)).  */\n+\tif (widen_arg0->get_iter_svalue () == other)\n+\t  if (const binop_svalue *other_binop_sval\n+\t\t= other->dyn_cast_binop_svalue ())\n+\t    if (other_binop_sval->get_arg0 () == widen_arg0->get_base_svalue ()\n+\t\t&& other_binop_sval->get_arg1 () == binop_sval->get_arg1 ())\n+\t      return widen_arg0;\n       }\n \n   return mgr->get_or_create_unknown_svalue (get_type ());"}, {"sha": "5e21890bfea108775ec801d829c4ecc000a7f10b", "filename": "gcc/testsuite/gcc.dg/analyzer/loop-start-up-to-end-by-1.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fc201382d3498778934f1262b57acd20f76f300/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Floop-start-up-to-end-by-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fc201382d3498778934f1262b57acd20f76f300/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Floop-start-up-to-end-by-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Floop-start-up-to-end-by-1.c?ref=2fc201382d3498778934f1262b57acd20f76f300", "patch": "@@ -8,8 +8,6 @@ void test(int start, int end)\n \n   for (i = start; i < end; i++) {\n       __analyzer_eval (i < end); /* { dg-warning \"TRUE\" \"true\" } */\n-      /* { dg-bogus \"UNKNOWN\" \"unknown\" { xfail *-*-* } .-1 } */\n-      /* TODO(xfail^^^): should report TRUE twice. */\n \n       __analyzer_eval (i == start); /* { dg-warning \"TRUE\" \"1st\" } */\n       /* { dg-warning \"FALSE\" \"2nd\" { xfail *-*-* } .-1 } */"}, {"sha": "f7be1c617dafe2946938fae26f4f72d9f4605f8b", "filename": "gcc/testsuite/gcc.dg/analyzer/pr94858-1.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fc201382d3498778934f1262b57acd20f76f300/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr94858-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fc201382d3498778934f1262b57acd20f76f300/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr94858-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr94858-1.c?ref=2fc201382d3498778934f1262b57acd20f76f300", "patch": "@@ -0,0 +1,42 @@\n+#include <stdlib.h>\n+\n+typedef short hashNx;\n+\n+typedef struct hashSt {\n+  hashNx *hs_index;\n+  int hs_used;\n+  int hs_slots;\n+} hashSt;\n+\n+void hashEmpty(hashSt *td);\n+\n+int hashAlloc(hashSt *td, int slots) {\n+  hashNx *index;\n+\n+  if (slots > td->hs_slots) {\n+    if (td->hs_index != NULL)\n+      index = realloc(td->hs_index, (size_t)slots * sizeof(hashNx));\n+    else\n+      index = malloc((size_t)slots * sizeof(hashNx));\n+\n+    if (index == NULL)\n+      return 0;\n+\n+    td->hs_index = index;\n+    td->hs_slots = slots;\n+  }\n+\n+  hashEmpty(td);\n+\n+  return 1;\n+}\n+\n+void hashEmpty(hashSt *td) {\n+  hashNx *index;\n+  int slots;\n+\n+  for (slots = td->hs_slots, index = td->hs_index; --slots >= 0;)\n+    *index++ = -1;\n+\n+  td->hs_used = 0;\n+}"}, {"sha": "874fe8b2c75f82db576ffa1e3d7e9726826500b1", "filename": "gcc/testsuite/gcc.dg/analyzer/pr94858-2.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fc201382d3498778934f1262b57acd20f76f300/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr94858-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fc201382d3498778934f1262b57acd20f76f300/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr94858-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr94858-2.c?ref=2fc201382d3498778934f1262b57acd20f76f300", "patch": "@@ -0,0 +1,25 @@\n+#include <stdlib.h>\n+\n+typedef short hashNx;\n+\n+typedef struct hashSt {\n+  hashNx *hs_index;\n+  int hs_used;\n+  int hs_slots;\n+} hashSt;\n+\n+int test (hashSt *td, int slots)\n+{\n+  hashNx *index;\n+\n+  index = malloc((size_t)slots * sizeof(hashNx));\n+  if (index == NULL)\n+    return 0;\n+  td->hs_index = index;\n+  td->hs_slots = slots;\n+\n+  for (slots = td->hs_slots, index = td->hs_index; --slots >= 0;)\n+    *index++ = -1;\n+\n+  return 1;\n+}"}, {"sha": "d5b10ab257273fd27f7671b3e50d71b5775328af", "filename": "gcc/testsuite/gcc.dg/analyzer/torture/loop-inc-ptr-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fc201382d3498778934f1262b57acd20f76f300/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Floop-inc-ptr-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fc201382d3498778934f1262b57acd20f76f300/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Floop-inc-ptr-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Floop-inc-ptr-2.c?ref=2fc201382d3498778934f1262b57acd20f76f300", "patch": "@@ -9,7 +9,7 @@ void test (int *p, int val, int count)\n \n   while (n--)\n     {\n-      __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 processed enode\" } */\n+      __analyzer_dump_exploded_nodes (0); /* { dg-warning \"3 processed enodes\" } */\n       *p++ = val;\n     }\n "}, {"sha": "c3a1e110e16c8ca38068e83af22a348129fc736a", "filename": "gcc/testsuite/gcc.dg/analyzer/torture/loop-inc-ptr-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fc201382d3498778934f1262b57acd20f76f300/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Floop-inc-ptr-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fc201382d3498778934f1262b57acd20f76f300/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Floop-inc-ptr-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Floop-inc-ptr-3.c?ref=2fc201382d3498778934f1262b57acd20f76f300", "patch": "@@ -9,7 +9,7 @@ void test (int *p, int a, int b, int count)\n \n   while (n--)\n     {\n-      __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 processed enode\" } */\n+      __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2|3 processed enodes\" } */\n       *p++ = a;\n       *p++ = b;\n     }"}]}