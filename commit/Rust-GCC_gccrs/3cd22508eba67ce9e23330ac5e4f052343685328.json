{"sha": "3cd22508eba67ce9e23330ac5e4f052343685328", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2NkMjI1MDhlYmE2N2NlOWUyMzMzMGFjNWU0ZjA1MjM0MzY4NTMyOA==", "commit": {"author": {"name": "Warren Levy", "email": "warrenl@cygnus.com", "date": "2000-11-16T21:34:48Z"}, "committer": {"name": "Warren Levy", "email": "warrenl@gcc.gnu.org", "date": "2000-11-16T21:34:48Z"}, "message": "PropertyChangeSupport.java (propertyListeners): Made transient.\n\n\t* java/beans/PropertyChangeSupport.java (propertyListeners): Made\n\ttransient.\n\t(listeners): Made transient.\n\t(source): Renamed from 'bean'.\n\t(children): New field for serialization.\n\t(propertyChangeSupportSerializedDataVersion): Ditto.\n\t(serialVersionUID): Ditto.\n\t(writeObject): New serialization method.\n\t(readObject): New serialization method.\n\t* java/beans/VetoableChangeSupport.java (propertyListeners): Made\n\ttransient.\n\t(listeners): Made transient.\n\t(source): Renamed from 'bean'.\n\t(children): New field for serialization.\n\t(vetoableChangeSupportSerializedDataVersion): Ditto.\n\t(serialVersionUID): Ditto.\n\t(writeObject): New serialization method.\n\t(readObject): New serialization method.\n\t* java/lang/reflect/natMethod.cc (_Jv_CallAnyMethodA): Fixed assert\n\tto allow constructor to have a return type (i.e. the class that the\n\tconstructor constructs).\n\nSerialization mods.\n\nFrom-SVN: r37506", "tree": {"sha": "b895a710e76271b5a4f4860ebdd33f4b614eb558", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b895a710e76271b5a4f4860ebdd33f4b614eb558"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3cd22508eba67ce9e23330ac5e4f052343685328", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cd22508eba67ce9e23330ac5e4f052343685328", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cd22508eba67ce9e23330ac5e4f052343685328", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cd22508eba67ce9e23330ac5e4f052343685328/comments", "author": null, "committer": null, "parents": [{"sha": "74fe26b270f55b1245d6cb863fca3734003a277a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74fe26b270f55b1245d6cb863fca3734003a277a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74fe26b270f55b1245d6cb863fca3734003a277a"}], "stats": {"total": 139, "additions": 118, "deletions": 21}, "files": [{"sha": "95df808a48c7f627f0f61d29ed985b11b8948512", "filename": "libjava/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd22508eba67ce9e23330ac5e4f052343685328/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd22508eba67ce9e23330ac5e4f052343685328/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=3cd22508eba67ce9e23330ac5e4f052343685328", "patch": "@@ -1,3 +1,27 @@\n+2000-11-16  Warren Levy  <warrenl@cygnus.com>\n+\n+\t* java/beans/PropertyChangeSupport.java (propertyListeners): Made\n+\ttransient.\n+\t(listeners): Made transient.\n+\t(source): Renamed from 'bean'.\n+\t(children): New field for serialization.\n+\t(propertyChangeSupportSerializedDataVersion): Ditto.\n+\t(serialVersionUID): Ditto.\n+\t(writeObject): New serialization method.\n+\t(readObject): New serialization method.\n+\t* java/beans/VetoableChangeSupport.java (propertyListeners): Made\n+\ttransient.\n+\t(listeners): Made transient.\n+\t(source): Renamed from 'bean'.\n+\t(children): New field for serialization.\n+\t(vetoableChangeSupportSerializedDataVersion): Ditto.\n+\t(serialVersionUID): Ditto.\n+\t(writeObject): New serialization method.\n+\t(readObject): New serialization method.\n+\t* java/lang/reflect/natMethod.cc (_Jv_CallAnyMethodA): Fixed assert\n+\tto allow constructor to have a return type (i.e. the class that the\n+\tconstructor constructs).\n+\n 2000-11-14  Tom Tromey  <tromey@cygnus.com>\n \n \t* Makefile.in: Rebuilt."}, {"sha": "4c3d3bc4515baac10405b617c2fbc59851e51e4b", "filename": "libjava/java/beans/PropertyChangeSupport.java", "status": "modified", "additions": 46, "deletions": 10, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd22508eba67ce9e23330ac5e4f052343685328/libjava%2Fjava%2Fbeans%2FPropertyChangeSupport.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd22508eba67ce9e23330ac5e4f052343685328/libjava%2Fjava%2Fbeans%2FPropertyChangeSupport.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fbeans%2FPropertyChangeSupport.java?ref=3cd22508eba67ce9e23330ac5e4f052343685328", "patch": "@@ -1,5 +1,5 @@\n /* java.beans.PropertyChangeSupport\n-   Copyright (C) 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -28,6 +28,11 @@\n package java.beans;\n import java.util.Hashtable;\n import java.util.Vector;\n+import java.util.Enumeration;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.IOException;\n+import java.io.Serializable;\n \n /**\n  ** PropertyChangeSupport makes it easy to fire property\n@@ -39,16 +44,47 @@\n  **/\n \n public class PropertyChangeSupport implements java.io.Serializable {\n-\tHashtable propertyListeners = new Hashtable();\n-\tVector listeners = new Vector();\n-\tObject bean;\n+\ttransient Hashtable propertyListeners = new Hashtable();\n+\ttransient Vector listeners = new Vector();\n+\tHashtable children;\n+\tObject source;\n+\tint propertyChangeSupportSerializedDataVersion = 2;\n+\tprivate static final long serialVersionUID = 6401253773779951803L;\n+\n+\t/**\n+\t * Saves the state of the object to the stream. */\n+\tprivate void writeObject(ObjectOutputStream stream) throws IOException {\n+\t\tchildren = propertyListeners.isEmpty() ? null : propertyListeners;\n+\t\tstream.defaultWriteObject();\n+\t\tfor (Enumeration e = listeners.elements(); e.hasMoreElements(); ) {\n+\t\t\tPropertyChangeListener l = (PropertyChangeListener)e.nextElement();\n+\t\t\tif (l instanceof Serializable)\n+\t\t\t  stream.writeObject(l);\n+\t\t}\n+\t\tstream.writeObject(null);\n+\t}\n+\n+\t/**\n+\t * Reads the object back from stream (deserialization).\n+\t */\n+\tprivate void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {\n+\t\tstream.defaultReadObject();\n+\t\tpropertyListeners = (children == null) ? new Hashtable() : children;\n+\t\tPropertyChangeListener l;\n+\t\twhile ((l = (PropertyChangeListener)stream.readObject()) != null) {\n+\t\t\taddPropertyChangeListener(l);\n+\t\t}\n+\t\t// FIXME: XXX: There is no spec for JDK 1.1 serialization\n+\t\t// so it is unclear what to do if the value of\n+\t\t// propertyChangeSupportSerializedDataVersion is 1.\n+\t}\n \n \t/** Create PropertyChangeSupport to work with a specific\n \t ** source bean.\n-\t ** @param bean the source bean to use.\n+\t ** @param source the source bean to use.\n \t **/\n-\tpublic PropertyChangeSupport(Object bean) {\n-\t\tthis.bean = bean;\n+\tpublic PropertyChangeSupport(Object source) {\n+\t\tthis.source = source;\n \t}\n \n \t/** Adds a PropertyChangeListener to the list of listeners.\n@@ -166,7 +202,7 @@ public void firePropertyChange(PropertyChangeEvent event) {\n \t ** @param newVal the new value.\n \t **/\n \tpublic void firePropertyChange(String propertyName, Object oldVal, Object newVal) {\n-\t\tfirePropertyChange(new PropertyChangeEvent(bean,propertyName,oldVal,newVal));\n+\t\tfirePropertyChange(new PropertyChangeEvent(source,propertyName,oldVal,newVal));\n \t}\n \n \t/** Fire a PropertyChangeEvent containing the old and new values of the property to all the listeners.\n@@ -176,7 +212,7 @@ public void firePropertyChange(String propertyName, Object oldVal, Object newVal\n \t ** @param newVal the new value.\n \t **/\n \tpublic void firePropertyChange(String propertyName, boolean oldVal, boolean newVal) {\n-\t\tfirePropertyChange(new PropertyChangeEvent(bean, propertyName, new Boolean(oldVal), new Boolean(newVal)));\n+\t\tfirePropertyChange(new PropertyChangeEvent(source, propertyName, new Boolean(oldVal), new Boolean(newVal)));\n \t}\n \n \t/** Fire a PropertyChangeEvent containing the old and new values of the property to all the listeners.\n@@ -186,7 +222,7 @@ public void firePropertyChange(String propertyName, boolean oldVal, boolean newV\n \t ** @param newVal the new value.\n \t **/\n \tpublic void firePropertyChange(String propertyName, int oldVal, int newVal) {\n-\t\tfirePropertyChange(new PropertyChangeEvent(bean, propertyName, new Integer(oldVal), new Integer(newVal)));\n+\t\tfirePropertyChange(new PropertyChangeEvent(source, propertyName, new Integer(oldVal), new Integer(newVal)));\n \t}\n \n \t/** Tell whether the specified property is being listened on or not."}, {"sha": "a3e2bc6315269db0b837c408ba2481e650e2b927", "filename": "libjava/java/beans/VetoableChangeSupport.java", "status": "modified", "additions": 47, "deletions": 10, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd22508eba67ce9e23330ac5e4f052343685328/libjava%2Fjava%2Fbeans%2FVetoableChangeSupport.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd22508eba67ce9e23330ac5e4f052343685328/libjava%2Fjava%2Fbeans%2FVetoableChangeSupport.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fbeans%2FVetoableChangeSupport.java?ref=3cd22508eba67ce9e23330ac5e4f052343685328", "patch": "@@ -1,6 +1,6 @@\n /*\n  * java.beans.VetoableChangeSupport: part of the Java Class Libraries project.\n- * Copyright (C) 1998 Free Software Foundation\n+ * Copyright (C) 1998, 2000 Free Software Foundation\n  *\n  * This library is free software; you can redistribute it and/or\n  * modify it under the terms of the GNU Library General Public\n@@ -21,6 +21,11 @@\n package java.beans;\n import java.util.Hashtable;\n import java.util.Vector;\n+import java.util.Enumeration;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.IOException;\n+import java.io.Serializable;\n \n /**\n  ** VetoableChangeSupport makes it easy to fire vetoable\n@@ -33,16 +38,48 @@\n  **/\n \n public class VetoableChangeSupport implements java.io.Serializable {\n-\tHashtable propertyListeners = new Hashtable();\n-\tVector listeners = new Vector();\n-\tObject bean;\n+\ttransient Hashtable propertyListeners = new Hashtable();\n+\ttransient Vector listeners = new Vector();\n+\tHashtable children;\n+\tObject source;\n+\tint vetoableChangeSupportSerializedDataVersion = 2;\n+\tprivate static final long serialVersionUID = -5090210921595982017L;\n+\n+\t/**\n+\t * Saves the state of the object to the stream. */\n+\tprivate void writeObject(ObjectOutputStream stream) throws IOException {\n+\t\tchildren = propertyListeners.isEmpty() ? null : propertyListeners;\n+\t\tstream.defaultWriteObject();\n+\t\tfor (Enumeration e = listeners.elements(); e.hasMoreElements(); ) {\n+\t\t\tVetoableChangeListener l = (VetoableChangeListener)e.nextElement();\n+\t\t\tif (l instanceof Serializable)\n+\t\t\t  stream.writeObject(l);\n+\t\t}\n+\t\tstream.writeObject(null);\n+\t}\n+\n+\t/**\n+\t * Reads the object back from stream (deserialization).\n+\t */\n+\tprivate void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {\n+\t\tstream.defaultReadObject();\n+\t\tpropertyListeners = (children == null) ? new Hashtable() : children;\n+\t\tVetoableChangeListener l;\n+\t\twhile ((l = (VetoableChangeListener)stream.readObject()) != null) {\n+\t\t\taddVetoableChangeListener(l);\n+\t\t}\n+\t\t// FIXME: XXX: There is no spec for JDK 1.1 serialization\n+\t\t// so it is unclear what to do if the value of\n+\t\t// vetoableChangeSupportSerializedDataVersion is 1.\n+\t}\n+\n \n \t/** Create VetoableChangeSupport to work with a specific\n \t ** source bean.\n-\t ** @param bean the source bean to use.\n+\t ** @param source the source bean to use.\n \t **/\n-\tpublic VetoableChangeSupport(Object bean) {\n-\t\tthis.bean = bean;\n+\tpublic VetoableChangeSupport(Object source) {\n+\t\tthis.source = source;\n \t}\n \n \t/** Adds a VetoableChangeListener to the list of listeners.\n@@ -199,7 +236,7 @@ public void fireVetoableChange(PropertyChangeEvent proposedChange) throws Proper\n \t ** @exception PropertyVetoException if the change is vetoed.\n \t **/\n \tpublic void fireVetoableChange(String propertyName, Object oldVal, Object newVal) throws PropertyVetoException {\n-\t\tfireVetoableChange(new PropertyChangeEvent(bean,propertyName,oldVal,newVal));\n+\t\tfireVetoableChange(new PropertyChangeEvent(source,propertyName,oldVal,newVal));\n \t}\n \n \t/** Fire a VetoableChangeEvent containing the old and new values of the property to all the listeners.\n@@ -213,7 +250,7 @@ public void fireVetoableChange(String propertyName, Object oldVal, Object newVal\n \t ** @exception PropertyVetoException if the change is vetoed.\n \t **/\n \tpublic void fireVetoableChange(String propertyName, boolean oldVal, boolean newVal) throws PropertyVetoException {\n-\t\tfireVetoableChange(new PropertyChangeEvent(bean,propertyName,new Boolean(oldVal),new Boolean(newVal)));\n+\t\tfireVetoableChange(new PropertyChangeEvent(source,propertyName,new Boolean(oldVal),new Boolean(newVal)));\n \t}\n \n \t/** Fire a VetoableChangeEvent containing the old and new values of the property to all the listeners.\n@@ -227,7 +264,7 @@ public void fireVetoableChange(String propertyName, boolean oldVal, boolean newV\n \t ** @exception PropertyVetoException if the change is vetoed.\n \t **/\n \tpublic void fireVetoableChange(String propertyName, int oldVal, int newVal) throws PropertyVetoException {\n-\t\tfireVetoableChange(new PropertyChangeEvent(bean,propertyName,new Integer(oldVal),new Integer(newVal)));\n+\t\tfireVetoableChange(new PropertyChangeEvent(source,propertyName,new Integer(oldVal),new Integer(newVal)));\n \t}\n \n "}, {"sha": "d5f860adbaae4e32860717115c6e0c806c96392a", "filename": "libjava/java/lang/reflect/natMethod.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd22508eba67ce9e23330ac5e4f052343685328/libjava%2Fjava%2Flang%2Freflect%2FnatMethod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd22508eba67ce9e23330ac5e4f052343685328/libjava%2Fjava%2Flang%2Freflect%2FnatMethod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2Freflect%2FnatMethod.cc?ref=3cd22508eba67ce9e23330ac5e4f052343685328", "patch": "@@ -312,7 +312,7 @@ _Jv_CallAnyMethodA (jobject obj,\n \t\t    jvalue *result)\n {\n   JvAssert (! is_constructor || ! obj);\n-  JvAssert (! is_constructor || ! return_type);\n+  JvAssert (! is_constructor || return_type);\n \n   // See whether call needs an object as the first argument.  A\n   // constructor does need a `this' argument, but it is one we create."}]}