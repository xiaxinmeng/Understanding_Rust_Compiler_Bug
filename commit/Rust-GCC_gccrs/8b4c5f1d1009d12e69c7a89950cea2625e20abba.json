{"sha": "8b4c5f1d1009d12e69c7a89950cea2625e20abba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGI0YzVmMWQxMDA5ZDEyZTY5YzdhODk5NTBjZWEyNjI1ZTIwYWJiYQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2010-06-18T12:29:49Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-18T12:29:49Z"}, "message": "* g-spipat.adb, a-swunau.adb, a-swunau.ads, g-spitbo.adb,\n\n\ta-szunau.adb, a-szunau.ads, a-stunau.adb, a-stunau.ads,\n\ta-strunb.adb (Big_String. Big_String_Access): New type.\n\nFrom-SVN: r160981", "tree": {"sha": "1005e9ee2894b1411be31e22a219e5ab16847f6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1005e9ee2894b1411be31e22a219e5ab16847f6c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b4c5f1d1009d12e69c7a89950cea2625e20abba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b4c5f1d1009d12e69c7a89950cea2625e20abba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b4c5f1d1009d12e69c7a89950cea2625e20abba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b4c5f1d1009d12e69c7a89950cea2625e20abba/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ed2233dc6daaa5066470858c3ff939392b2f42ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed2233dc6daaa5066470858c3ff939392b2f42ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed2233dc6daaa5066470858c3ff939392b2f42ff"}], "stats": {"total": 247, "additions": 118, "deletions": 129}, "files": [{"sha": "08c9b6b1f9adfe2b05aade44284b7d0ac8d6488c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b4c5f1d1009d12e69c7a89950cea2625e20abba/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b4c5f1d1009d12e69c7a89950cea2625e20abba/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=8b4c5f1d1009d12e69c7a89950cea2625e20abba", "patch": "@@ -11,6 +11,10 @@\n \tsem_disp.adb, prepcomp.adb, par-ch7.adb, sem_elab.adb, exp_ch4.adb,\n \terrout.ads: Update comments. Minor reformatting.\n \n+\t* g-spipat.adb, a-swunau.adb, a-swunau.ads, g-spitbo.adb,\n+\ta-szunau.adb, a-szunau.ads, a-stunau.adb, a-stunau.ads,\n+\ta-strunb.adb (Big_String. Big_String_Access): New type.\n+\n 2010-06-18  Geert Bosch  <bosch@adacore.com>\n \n \t* i-forbla-darwin.adb: Include -lgnala and -lm in linker options for"}, {"sha": "cc5b92bfc435bc8da0ae5922eb183bde172dc069", "filename": "gcc/ada/a-strunb.adb", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b4c5f1d1009d12e69c7a89950cea2625e20abba/gcc%2Fada%2Fa-strunb.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b4c5f1d1009d12e69c7a89950cea2625e20abba/gcc%2Fada%2Fa-strunb.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-strunb.adb?ref=8b4c5f1d1009d12e69c7a89950cea2625e20abba", "patch": "@@ -914,19 +914,30 @@ package body Ada.Strings.Unbounded is\n    function To_Unbounded_String (Source : String) return Unbounded_String is\n       Result : Unbounded_String;\n    begin\n-      Result.Last          := Source'Length;\n-      Result.Reference     := new String (1 .. Source'Length);\n-      Result.Reference.all := Source;\n+      --  Do not allocate an empty string: keep the default\n+\n+      if Source'Length > 0 then\n+         Result.Last          := Source'Length;\n+         Result.Reference     := new String (1 .. Source'Length);\n+         Result.Reference.all := Source;\n+      end if;\n+\n       return Result;\n    end To_Unbounded_String;\n \n    function To_Unbounded_String\n      (Length : Natural) return Unbounded_String\n    is\n       Result : Unbounded_String;\n+\n    begin\n-      Result.Last      := Length;\n-      Result.Reference := new String (1 .. Length);\n+      --  Do not allocate an empty string: keep the default\n+\n+      if Length > 0 then\n+         Result.Last      := Length;\n+         Result.Reference := new String (1 .. Length);\n+      end if;\n+\n       return Result;\n    end To_Unbounded_String;\n "}, {"sha": "c6d2bc43ac3d7239fbbf3449ec1a20dfdb1848d4", "filename": "gcc/ada/a-stunau.adb", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b4c5f1d1009d12e69c7a89950cea2625e20abba/gcc%2Fada%2Fa-stunau.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b4c5f1d1009d12e69c7a89950cea2625e20abba/gcc%2Fada%2Fa-stunau.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-stunau.adb?ref=8b4c5f1d1009d12e69c7a89950cea2625e20abba", "patch": "@@ -37,29 +37,21 @@ package body Ada.Strings.Unbounded.Aux is\n \n    procedure Get_String\n      (U : Unbounded_String;\n-      S : out String_Access;\n+      S : out Big_String_Access;\n       L : out Natural)\n    is\n+      X : aliased Big_String;\n+      for X'Address use U.Reference.all'Address;\n+\n    begin\n-      S := U.Reference;\n+      S := X'Unchecked_Access;\n       L := U.Last;\n    end Get_String;\n \n    ----------------\n    -- Set_String --\n    ----------------\n \n-   procedure Set_String (UP : in out Unbounded_String; S : String) is\n-   begin\n-      if S'Length > UP.Last then\n-         Finalize (UP);\n-         UP.Reference := new String (1 .. S'Length);\n-      end if;\n-\n-      UP.Reference (1 .. S'Length) := S;\n-      UP.Last := S'Length;\n-   end Set_String;\n-\n    procedure Set_String (UP : in out Unbounded_String; S : String_Access) is\n    begin\n       Finalize (UP);"}, {"sha": "8cff44f715178f25e207c89320367ce3a42278cd", "filename": "gcc/ada/a-stunau.ads", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b4c5f1d1009d12e69c7a89950cea2625e20abba/gcc%2Fada%2Fa-stunau.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b4c5f1d1009d12e69c7a89950cea2625e20abba/gcc%2Fada%2Fa-stunau.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-stunau.ads?ref=8b4c5f1d1009d12e69c7a89950cea2625e20abba", "patch": "@@ -37,9 +37,12 @@\n package Ada.Strings.Unbounded.Aux is\n    pragma Preelaborate;\n \n+   subtype Big_String is String (1 .. Positive'Last);\n+   type Big_String_Access is access all Big_String;\n+\n    procedure Get_String\n      (U : Unbounded_String;\n-      S : out String_Access;\n+      S : out Big_String_Access;\n       L : out Natural);\n    pragma Inline (Get_String);\n    --  This procedure returns the internal string pointer used in the\n@@ -54,18 +57,16 @@ package Ada.Strings.Unbounded.Aux is\n    --  referenced string returned by this call is always one, so the actual\n    --  string data is always accessible as S (1 .. L).\n \n-   procedure Set_String (UP : in out Unbounded_String; S : String);\n-   pragma Inline (Set_String);\n-   --  This function sets the string contents of the referenced unbounded\n-   --  string to the given string value. It is significantly more efficient\n-   --  than the use of To_Unbounded_String with an assignment, since it\n-   --  avoids the necessity of messing with finalization chains. The lower\n-   --  bound of the string S is not required to be one.\n+   procedure Set_String (UP : out Unbounded_String; S : String)\n+     renames Set_Unbounded_String;\n+   --  This function is simply a renaming of the new Ada 2005 function as shown\n+   --  above. It is provided for historical reasons, but should be removed at\n+   --  this stage???\n \n    procedure Set_String (UP : in out Unbounded_String; S : String_Access);\n    pragma Inline (Set_String);\n-   --  This version of Set_String takes a string access value, rather than a\n-   --  string. The lower bound of the string value is required to be one, and\n-   --  this requirement is not checked.\n+   --  This version of Set_Unbounded_String takes a string access value, rather\n+   --  than a string. The lower bound of the string value is required to be\n+   --  one, and this requirement is not checked.\n \n end Ada.Strings.Unbounded.Aux;"}, {"sha": "004a5d4ac1a2a45454a9658255ca59b5ab09c31b", "filename": "gcc/ada/a-swunau.adb", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b4c5f1d1009d12e69c7a89950cea2625e20abba/gcc%2Fada%2Fa-swunau.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b4c5f1d1009d12e69c7a89950cea2625e20abba/gcc%2Fada%2Fa-swunau.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-swunau.adb?ref=8b4c5f1d1009d12e69c7a89950cea2625e20abba", "patch": "@@ -37,32 +37,21 @@ package body Ada.Strings.Wide_Unbounded.Aux is\n \n    procedure Get_Wide_String\n      (U : Unbounded_Wide_String;\n-      S : out Wide_String_Access;\n+      S : out Big_Wide_String_Access;\n       L : out Natural)\n    is\n+      X : aliased Big_Wide_String;\n+      for X'Address use U.Reference.all'Address;\n+\n    begin\n-      S := U.Reference;\n+      S := X'Unchecked_Access;\n       L := U.Last;\n    end Get_Wide_String;\n \n    ---------------------\n    -- Set_Wide_String --\n    ---------------------\n \n-   procedure Set_Wide_String\n-     (UP : in out Unbounded_Wide_String;\n-      S  : Wide_String)\n-   is\n-   begin\n-      if S'Length > UP.Last then\n-         Finalize (UP);\n-         UP.Reference := new Wide_String (1 .. S'Length);\n-      end if;\n-\n-      UP.Reference (1 .. S'Length) := S;\n-      UP.Last := S'Length;\n-   end Set_Wide_String;\n-\n    procedure Set_Wide_String\n      (UP : in out Unbounded_Wide_String;\n       S  : Wide_String_Access)"}, {"sha": "78fa5dbb865cf598e197bf6b7791bcba80abbf2f", "filename": "gcc/ada/a-swunau.ads", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b4c5f1d1009d12e69c7a89950cea2625e20abba/gcc%2Fada%2Fa-swunau.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b4c5f1d1009d12e69c7a89950cea2625e20abba/gcc%2Fada%2Fa-swunau.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-swunau.ads?ref=8b4c5f1d1009d12e69c7a89950cea2625e20abba", "patch": "@@ -37,9 +37,12 @@\n package Ada.Strings.Wide_Unbounded.Aux is\n    pragma Preelaborate;\n \n+   subtype Big_Wide_String is Wide_String (Positive'Range);\n+   type Big_Wide_String_Access is access all Big_Wide_String;\n+\n    procedure Get_Wide_String\n      (U : Unbounded_Wide_String;\n-      S : out Wide_String_Access;\n+      S : out Big_Wide_String_Access;\n       L : out Natural);\n    pragma Inline (Get_Wide_String);\n    --  This procedure returns the internal string pointer used in the\n@@ -54,10 +57,8 @@ package Ada.Strings.Wide_Unbounded.Aux is\n    --  referenced string returned by this call is always one, so the actual\n    --  string data is always accessible as S (1 .. L).\n \n-   procedure Set_Wide_String\n-     (UP : in out Unbounded_Wide_String;\n-      S  : Wide_String);\n-   pragma Inline (Set_Wide_String);\n+   procedure Set_Wide_String (UP : out Unbounded_Wide_String; S : Wide_String)\n+     renames Set_Unbounded_Wide_String;\n    --  This function sets the string contents of the referenced unbounded\n    --  string to the given string value. It is significantly more efficient\n    --  than the use of To_Unbounded_Wide_String with an assignment, since it"}, {"sha": "7ab9cc5acd4db0f7b738f7539bb97243d02de18a", "filename": "gcc/ada/a-szunau.adb", "status": "modified", "additions": 9, "deletions": 20, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b4c5f1d1009d12e69c7a89950cea2625e20abba/gcc%2Fada%2Fa-szunau.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b4c5f1d1009d12e69c7a89950cea2625e20abba/gcc%2Fada%2Fa-szunau.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-szunau.adb?ref=8b4c5f1d1009d12e69c7a89950cea2625e20abba", "patch": "@@ -31,37 +31,26 @@\n \n package body Ada.Strings.Wide_Wide_Unbounded.Aux is\n \n-   --------------------\n+   --------------------------\n    -- Get_Wide_Wide_String --\n-   ---------------------\n+   --------------------------\n \n    procedure Get_Wide_Wide_String\n      (U : Unbounded_Wide_Wide_String;\n-      S : out Wide_Wide_String_Access;\n+      S : out Big_Wide_Wide_String_Access;\n       L : out Natural)\n    is\n+      X : aliased Big_Wide_Wide_String;\n+      for X'Address use U.Reference.all'Address;\n+\n    begin\n-      S := U.Reference;\n+      S := X'Unchecked_Access;\n       L := U.Last;\n    end Get_Wide_Wide_String;\n \n-   ---------------------\n+   --------------------------\n    -- Set_Wide_Wide_String --\n-   ---------------------\n-\n-   procedure Set_Wide_Wide_String\n-     (UP : in out Unbounded_Wide_Wide_String;\n-      S  : Wide_Wide_String)\n-   is\n-   begin\n-      if S'Length > UP.Last then\n-         Finalize (UP);\n-         UP.Reference := new Wide_Wide_String (1 .. S'Length);\n-      end if;\n-\n-      UP.Reference (1 .. S'Length) := S;\n-      UP.Last := S'Length;\n-   end Set_Wide_Wide_String;\n+   --------------------------\n \n    procedure Set_Wide_Wide_String\n      (UP : in out Unbounded_Wide_Wide_String;"}, {"sha": "6115330d94bc16444d218a63b389def3c5abb5e8", "filename": "gcc/ada/a-szunau.ads", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b4c5f1d1009d12e69c7a89950cea2625e20abba/gcc%2Fada%2Fa-szunau.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b4c5f1d1009d12e69c7a89950cea2625e20abba/gcc%2Fada%2Fa-szunau.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-szunau.ads?ref=8b4c5f1d1009d12e69c7a89950cea2625e20abba", "patch": "@@ -37,9 +37,12 @@\n package Ada.Strings.Wide_Wide_Unbounded.Aux is\n    pragma Preelaborate;\n \n+   subtype Big_Wide_Wide_String is Wide_Wide_String (Positive);\n+   type Big_Wide_Wide_String_Access is access all Big_Wide_Wide_String;\n+\n    procedure Get_Wide_Wide_String\n      (U : Unbounded_Wide_Wide_String;\n-      S : out Wide_Wide_String_Access;\n+      S : out Big_Wide_Wide_String_Access;\n       L : out Natural);\n    pragma Inline (Get_Wide_Wide_String);\n    --  This procedure returns the internal string pointer used in the\n@@ -55,9 +58,9 @@ package Ada.Strings.Wide_Wide_Unbounded.Aux is\n    --  string data is always accessible as S (1 .. L).\n \n    procedure Set_Wide_Wide_String\n-     (UP : in out Unbounded_Wide_Wide_String;\n-      S  : Wide_Wide_String);\n-   pragma Inline (Set_Wide_Wide_String);\n+     (UP : out Unbounded_Wide_Wide_String;\n+      S  : Wide_Wide_String)\n+      renames Set_Unbounded_Wide_Wide_String;\n    --  This function sets the string contents of the referenced unbounded\n    --  string to the given string value. It is significantly more efficient\n    --  than the use of To_Unbounded_Wide_Wide_String with an assignment, since"}, {"sha": "a85697507f31173f93ebcea11e4819002c4a5fb3", "filename": "gcc/ada/g-spipat.adb", "status": "modified", "additions": 44, "deletions": 45, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b4c5f1d1009d12e69c7a89950cea2625e20abba/gcc%2Fada%2Fg-spipat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b4c5f1d1009d12e69c7a89950cea2625e20abba/gcc%2Fada%2Fg-spipat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-spipat.adb?ref=8b4c5f1d1009d12e69c7a89950cea2625e20abba", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 1998-2008, AdaCore                     --\n+--                     Copyright (C) 1998-2009, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -2793,9 +2793,8 @@ package body GNAT.Spitbol.Patterns is\n      (Subject : VString;\n       Pat     : Pattern) return Boolean\n    is\n-      S     : String_Access;\n+      S     : Big_String_Access;\n       L     : Natural;\n-\n       Start : Natural;\n       Stop  : Natural;\n       pragma Unreferenced (Stop);\n@@ -2838,7 +2837,7 @@ package body GNAT.Spitbol.Patterns is\n    is\n       Start : Natural;\n       Stop  : Natural;\n-      S     : String_Access;\n+      S     : Big_String_Access;\n       L     : Natural;\n \n    begin\n@@ -2867,7 +2866,7 @@ package body GNAT.Spitbol.Patterns is\n    is\n       Start : Natural;\n       Stop  : Natural;\n-      S     : String_Access;\n+      S     : Big_String_Access;\n       L     : Natural;\n \n    begin\n@@ -2892,7 +2891,7 @@ package body GNAT.Spitbol.Patterns is\n      (Subject : VString;\n       Pat     : Pattern)\n    is\n-      S : String_Access;\n+      S : Big_String_Access;\n       L : Natural;\n \n       Start : Natural;\n@@ -2933,7 +2932,7 @@ package body GNAT.Spitbol.Patterns is\n    is\n       Start : Natural;\n       Stop  : Natural;\n-      S     : String_Access;\n+      S     : Big_String_Access;\n       L     : Natural;\n \n    begin\n@@ -2958,7 +2957,7 @@ package body GNAT.Spitbol.Patterns is\n    is\n       Start : Natural;\n       Stop  : Natural;\n-      S     : String_Access;\n+      S     : Big_String_Access;\n       L     : Natural;\n \n    begin\n@@ -2980,7 +2979,7 @@ package body GNAT.Spitbol.Patterns is\n       Pat     : PString) return Boolean\n    is\n       Pat_Len : constant Natural := Pat'Length;\n-      S       : String_Access;\n+      S       : Big_String_Access;\n       L       : Natural;\n \n    begin\n@@ -3038,7 +3037,7 @@ package body GNAT.Spitbol.Patterns is\n    is\n       Start : Natural;\n       Stop  : Natural;\n-      S     : String_Access;\n+      S     : Big_String_Access;\n       L     : Natural;\n \n    begin\n@@ -3067,7 +3066,7 @@ package body GNAT.Spitbol.Patterns is\n    is\n       Start : Natural;\n       Stop  : Natural;\n-      S     : String_Access;\n+      S     : Big_String_Access;\n       L     : Natural;\n \n    begin\n@@ -3092,7 +3091,7 @@ package body GNAT.Spitbol.Patterns is\n      (Subject : VString;\n       Pat     : PString)\n    is\n-      S : String_Access;\n+      S : Big_String_Access;\n       L : Natural;\n \n       Start : Natural;\n@@ -3133,7 +3132,7 @@ package body GNAT.Spitbol.Patterns is\n    is\n       Start : Natural;\n       Stop  : Natural;\n-      S     : String_Access;\n+      S     : Big_String_Access;\n       L     : Natural;\n \n    begin\n@@ -3158,7 +3157,7 @@ package body GNAT.Spitbol.Patterns is\n    is\n       Start : Natural;\n       Stop  : Natural;\n-      S     : String_Access;\n+      S     : Big_String_Access;\n       L     : Natural;\n \n    begin\n@@ -3182,7 +3181,7 @@ package body GNAT.Spitbol.Patterns is\n    is\n       Start : Natural;\n       Stop  : Natural;\n-      S     : String_Access;\n+      S     : Big_String_Access;\n       L     : Natural;\n \n    begin\n@@ -3213,7 +3212,7 @@ package body GNAT.Spitbol.Patterns is\n    is\n       Start : Natural;\n       Stop  : Natural;\n-      S     : String_Access;\n+      S     : Big_String_Access;\n       L     : Natural;\n \n    begin\n@@ -3362,7 +3361,7 @@ package body GNAT.Spitbol.Patterns is\n      (Result  : in out Match_Result;\n       Replace : VString)\n    is\n-      S : String_Access;\n+      S : Big_String_Access;\n       L : Natural;\n \n    begin\n@@ -3955,7 +3954,7 @@ package body GNAT.Spitbol.Patterns is\n \n          when PC_Any_VF => declare\n             U : constant VString := Node.VF.all;\n-            S : String_Access;\n+            S : Big_String_Access;\n             L : Natural;\n \n          begin\n@@ -3975,7 +3974,7 @@ package body GNAT.Spitbol.Patterns is\n \n          when PC_Any_VP => declare\n             U : constant VString := Node.VP.all;\n-            S : String_Access;\n+            S : Big_String_Access;\n             L : Natural;\n \n          begin\n@@ -4142,7 +4141,7 @@ package body GNAT.Spitbol.Patterns is\n \n          when PC_Break_VF => declare\n             U : constant VString := Node.VF.all;\n-            S : String_Access;\n+            S : Big_String_Access;\n             L : Natural;\n \n          begin\n@@ -4163,7 +4162,7 @@ package body GNAT.Spitbol.Patterns is\n \n          when PC_Break_VP => declare\n             U : constant VString := Node.VP.all;\n-            S : String_Access;\n+            S : Big_String_Access;\n             L : Natural;\n \n          begin\n@@ -4210,7 +4209,7 @@ package body GNAT.Spitbol.Patterns is\n \n          when PC_BreakX_VF => declare\n             U : constant VString := Node.VF.all;\n-            S : String_Access;\n+            S : Big_String_Access;\n             L : Natural;\n \n          begin\n@@ -4231,7 +4230,7 @@ package body GNAT.Spitbol.Patterns is\n \n          when PC_BreakX_VP => declare\n             U : constant VString := Node.VP.all;\n-            S : String_Access;\n+            S : Big_String_Access;\n             L : Natural;\n \n          begin\n@@ -4376,7 +4375,7 @@ package body GNAT.Spitbol.Patterns is\n \n          when PC_NotAny_VF => declare\n             U : constant VString := Node.VF.all;\n-            S : String_Access;\n+            S : Big_String_Access;\n             L : Natural;\n \n          begin\n@@ -4397,7 +4396,7 @@ package body GNAT.Spitbol.Patterns is\n \n          when PC_NotAny_VP => declare\n             U : constant VString := Node.VP.all;\n-            S : String_Access;\n+            S : Big_String_Access;\n             L : Natural;\n \n          begin\n@@ -4440,7 +4439,7 @@ package body GNAT.Spitbol.Patterns is\n \n          when PC_NSpan_VF => declare\n             U : constant VString := Node.VF.all;\n-            S : String_Access;\n+            S : Big_String_Access;\n             L : Natural;\n \n          begin\n@@ -4459,7 +4458,7 @@ package body GNAT.Spitbol.Patterns is\n \n          when PC_NSpan_VP => declare\n             U : constant VString := Node.VP.all;\n-            S : String_Access;\n+            S : Big_String_Access;\n             L : Natural;\n \n          begin\n@@ -4682,7 +4681,7 @@ package body GNAT.Spitbol.Patterns is\n \n          when PC_Span_VF => declare\n             U : constant VString := Node.VF.all;\n-            S : String_Access;\n+            S : Big_String_Access;\n             L : Natural;\n             P : Natural;\n \n@@ -4708,7 +4707,7 @@ package body GNAT.Spitbol.Patterns is\n \n          when PC_Span_VP => declare\n             U : constant VString := Node.VP.all;\n-            S : String_Access;\n+            S : Big_String_Access;\n             L : Natural;\n             P : Natural;\n \n@@ -4809,7 +4808,7 @@ package body GNAT.Spitbol.Patterns is\n \n          when PC_String_VF => declare\n             U : constant VString := Node.VF.all;\n-            S : String_Access;\n+            S : Big_String_Access;\n             L : Natural;\n \n          begin\n@@ -4829,7 +4828,7 @@ package body GNAT.Spitbol.Patterns is\n \n          when PC_String_VP => declare\n             U : constant VString := Node.VP.all;\n-            S : String_Access;\n+            S : Big_String_Access;\n             L : Natural;\n \n          begin\n@@ -5354,7 +5353,7 @@ package body GNAT.Spitbol.Patterns is\n \n          when PC_Any_VF => declare\n             U : constant VString := Node.VF.all;\n-            S : String_Access;\n+            S : Big_String_Access;\n             L : Natural;\n \n          begin\n@@ -5376,7 +5375,7 @@ package body GNAT.Spitbol.Patterns is\n \n          when PC_Any_VP => declare\n             U : constant VString := Node.VP.all;\n-            S : String_Access;\n+            S : Big_String_Access;\n             L : Natural;\n \n          begin\n@@ -5563,7 +5562,7 @@ package body GNAT.Spitbol.Patterns is\n \n          when PC_Break_VF => declare\n             U : constant VString := Node.VF.all;\n-            S : String_Access;\n+            S : Big_String_Access;\n             L : Natural;\n \n          begin\n@@ -5585,7 +5584,7 @@ package body GNAT.Spitbol.Patterns is\n \n          when PC_Break_VP => declare\n             U : constant VString := Node.VP.all;\n-            S : String_Access;\n+            S : Big_String_Access;\n             L : Natural;\n \n          begin\n@@ -5637,7 +5636,7 @@ package body GNAT.Spitbol.Patterns is\n \n          when PC_BreakX_VF => declare\n             U : constant VString := Node.VF.all;\n-            S : String_Access;\n+            S : Big_String_Access;\n             L : Natural;\n \n          begin\n@@ -5659,7 +5658,7 @@ package body GNAT.Spitbol.Patterns is\n \n          when PC_BreakX_VP => declare\n             U : constant VString := Node.VP.all;\n-            S : String_Access;\n+            S : Big_String_Access;\n             L : Natural;\n \n          begin\n@@ -5826,7 +5825,7 @@ package body GNAT.Spitbol.Patterns is\n \n          when PC_NotAny_VF => declare\n             U : constant VString := Node.VF.all;\n-            S : String_Access;\n+            S : Big_String_Access;\n             L : Natural;\n \n          begin\n@@ -5848,7 +5847,7 @@ package body GNAT.Spitbol.Patterns is\n \n          when PC_NotAny_VP => declare\n             U : constant VString := Node.VP.all;\n-            S : String_Access;\n+            S : Big_String_Access;\n             L : Natural;\n \n          begin\n@@ -5896,7 +5895,7 @@ package body GNAT.Spitbol.Patterns is\n \n          when PC_NSpan_VF => declare\n             U : constant VString := Node.VF.all;\n-            S : String_Access;\n+            S : Big_String_Access;\n             L : Natural;\n \n          begin\n@@ -5916,7 +5915,7 @@ package body GNAT.Spitbol.Patterns is\n \n          when PC_NSpan_VP => declare\n             U : constant VString := Node.VP.all;\n-            S : String_Access;\n+            S : Big_String_Access;\n             L : Natural;\n \n          begin\n@@ -6172,7 +6171,7 @@ package body GNAT.Spitbol.Patterns is\n \n          when PC_Span_VF => declare\n             U : constant VString := Node.VF.all;\n-            S : String_Access;\n+            S : Big_String_Access;\n             L : Natural;\n             P : Natural;\n \n@@ -6199,7 +6198,7 @@ package body GNAT.Spitbol.Patterns is\n \n          when PC_Span_VP => declare\n             U : constant VString := Node.VP.all;\n-            S : String_Access;\n+            S : Big_String_Access;\n             L : Natural;\n             P : Natural;\n \n@@ -6314,7 +6313,7 @@ package body GNAT.Spitbol.Patterns is\n \n          when PC_String_VF => declare\n             U : constant VString := Node.VF.all;\n-            S : String_Access;\n+            S : Big_String_Access;\n             L : Natural;\n \n          begin\n@@ -6335,7 +6334,7 @@ package body GNAT.Spitbol.Patterns is\n \n          when PC_String_VP => declare\n             U : constant VString := Node.VP.all;\n-            S : String_Access;\n+            S : Big_String_Access;\n             L : Natural;\n \n          begin"}, {"sha": "4769fa3025dca525ab96f28b8d8438f97d50f997", "filename": "gcc/ada/g-spitbo.adb", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b4c5f1d1009d12e69c7a89950cea2625e20abba/gcc%2Fada%2Fg-spitbo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b4c5f1d1009d12e69c7a89950cea2625e20abba/gcc%2Fada%2Fg-spitbo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-spitbo.adb?ref=8b4c5f1d1009d12e69c7a89950cea2625e20abba", "patch": "@@ -135,7 +135,7 @@ package body GNAT.Spitbol is\n    -------\n \n    function N (Str : VString) return Integer is\n-      S : String_Access;\n+      S : Big_String_Access;\n       L : Natural;\n    begin\n       Get_String (Str, S, L);\n@@ -147,7 +147,7 @@ package body GNAT.Spitbol is\n    --------------------\n \n    function Reverse_String (Str : VString) return VString is\n-      S : String_Access;\n+      S : Big_String_Access;\n       L : Natural;\n \n    begin\n@@ -177,7 +177,7 @@ package body GNAT.Spitbol is\n    end Reverse_String;\n \n    procedure Reverse_String (Str : in out VString) is\n-      S : String_Access;\n+      S : Big_String_Access;\n       L : Natural;\n \n    begin\n@@ -191,7 +191,7 @@ package body GNAT.Spitbol is\n             Result (J) := S (L + 1 - J);\n          end loop;\n \n-         Set_String (Str, Result);\n+         Set_Unbounded_String (Str, Result);\n       end;\n    end Reverse_String;\n \n@@ -284,7 +284,7 @@ package body GNAT.Spitbol is\n       Start : Positive;\n       Len   : Natural) return VString\n    is\n-      S : String_Access;\n+      S : Big_String_Access;\n       L : Natural;\n \n    begin\n@@ -413,7 +413,7 @@ package body GNAT.Spitbol is\n \n                if Elmt.Name /= null then\n                   loop\n-                     Set_String (TA (P).Name, Elmt.Name.all);\n+                     Set_Unbounded_String (TA (P).Name, Elmt.Name.all);\n                      TA (P).Value := Elmt.Value;\n                      P := P + 1;\n                      Elmt := Elmt.Next;\n@@ -458,7 +458,7 @@ package body GNAT.Spitbol is\n       end Delete;\n \n       procedure Delete (T : in out Table; Name  : VString) is\n-         S : String_Access;\n+         S : Big_String_Access;\n          L : Natural;\n       begin\n          Get_String (Name, S, L);\n@@ -584,7 +584,7 @@ package body GNAT.Spitbol is\n       end Get;\n \n       function Get (T : Table; Name : VString) return Value_Type is\n-         S : String_Access;\n+         S : Big_String_Access;\n          L : Natural;\n       begin\n          Get_String (Name, S, L);\n@@ -625,7 +625,7 @@ package body GNAT.Spitbol is\n       end Present;\n \n       function Present (T : Table; Name : VString) return Boolean is\n-         S : String_Access;\n+         S : Big_String_Access;\n          L : Natural;\n       begin\n          Get_String (Name, S, L);\n@@ -661,7 +661,7 @@ package body GNAT.Spitbol is\n       ---------\n \n       procedure Set (T : in out Table; Name : VString; Value : Value_Type) is\n-         S : String_Access;\n+         S : Big_String_Access;\n          L : Natural;\n       begin\n          Get_String (Name, S, L);"}]}