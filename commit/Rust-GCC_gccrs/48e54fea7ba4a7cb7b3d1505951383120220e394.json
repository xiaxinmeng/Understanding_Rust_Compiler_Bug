{"sha": "48e54fea7ba4a7cb7b3d1505951383120220e394", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDhlNTRmZWE3YmE0YTdjYjdiM2QxNTA1OTUxMzgzMTIwMjIwZTM5NA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-04-29T20:38:01Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-04-29T20:38:01Z"}, "message": "s390: Fix up -Wpsabi diagnostics + [[no_unique_address]] empty member fix [PR94704]\n\nSo, based on the yesterday's discussions, similarly to powerpc64le-linux\nI've done some testing for s390x-linux too.\n\nFirst of all, I found a bug in my patch from yesterday, it was printing\nthe wrong type like 'double' etc. rather than the class that contained such\nthe element.  Fix below.\n\nFor s390x-linux, I was using\nstruct X { };\nstruct Y { int : 0; };\nstruct Z { int : 0; Y y; };\nstruct U : public X { X q; };\nstruct A { double a; };\nstruct B : public X { double a; };\nstruct C : public Y { double a; };\nstruct D : public Z { double a; };\nstruct E : public U { double a; };\nstruct F { [[no_unique_address]] X x; double a; };\nstruct G { [[no_unique_address]] Y y; double a; };\nstruct H { [[no_unique_address]] Z z; double a; };\nstruct I { [[no_unique_address]] U u; double a; };\nstruct J { double a; [[no_unique_address]] X x; };\nstruct K { double a; [[no_unique_address]] Y y; };\nstruct L { double a; [[no_unique_address]] Z z; };\nstruct M { double a; [[no_unique_address]] U u; };\n #define T(S, s) extern S s; extern void foo##s (S); int bar##s () { foo##s (s); return 0; }\nT (A, a)\nT (B, b)\nT (C, c)\nT (D, d)\nT (E, e)\nT (F, f)\nT (G, g)\nT (H, h)\nT (I, i)\nT (J, j)\nT (K, k)\nT (L, l)\nT (M, m)\nas testcase and looking for \"\\tld\\t%f0,\".\nWhile g++ 9 with -std=c++17 used to pass in fpr just\nA, g++ 9 -std=c++14, as well as current trunk -std=c++14 & 17\nand clang++ from today -std=c++14 & 17 all pass A, B, C\nin fpr and nothing else.  The intent stated by Jason seems to be\nthat A, B, C, F, G, J, K should all be passed in fpr.\n\nAttached are two (updated) versions of the patch on top of the\npowerpc+middle-end patch just posted.\n\nThe first one emits two separate -Wpsabi warnings like powerpc, one for\nthe -std=c++14 vs. -std=c++17 ABI difference and one for GCC 9 vs. 10\n[[no_unique_address]] passing changes, the other one is silent about the\nsecond case.\n\n2020-04-29  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/94704\n\t* config/s390/s390.c (s390_function_arg_vector,\n\ts390_function_arg_float): Use DECL_FIELD_ABI_IGNORED instead of\n\tcxx17_empty_base_field_p.  In -Wpsabi diagnostics use the type\n\tpassed to the function rather than the type of the single element.\n\tRename cxx17_empty_base_seen variable to empty_base_seen, change\n\ttype to int, and adjust diagnostics depending on if the field\n\thas [[no_unique_attribute]] or not.\n\n\t* g++.target/s390/s390.exp: New file.\n\t* g++.target/s390/pr94704-1.C: New test.\n\t* g++.target/s390/pr94704-2.C: New test.\n\t* g++.target/s390/pr94704-3.C: New test.\n\t* g++.target/s390/pr94704-4.C: New test.", "tree": {"sha": "2ef2723eb255443976a306a383c44f7e6026c052", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ef2723eb255443976a306a383c44f7e6026c052"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48e54fea7ba4a7cb7b3d1505951383120220e394", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48e54fea7ba4a7cb7b3d1505951383120220e394", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48e54fea7ba4a7cb7b3d1505951383120220e394", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48e54fea7ba4a7cb7b3d1505951383120220e394/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f1591763fd50b143af0dc1770741f326a97583a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f1591763fd50b143af0dc1770741f326a97583a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f1591763fd50b143af0dc1770741f326a97583a"}], "stats": {"total": 264, "additions": 248, "deletions": 16}, "files": [{"sha": "60f9cd4ffdcf76d4006861a85c21eee799596a5c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48e54fea7ba4a7cb7b3d1505951383120220e394/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48e54fea7ba4a7cb7b3d1505951383120220e394/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=48e54fea7ba4a7cb7b3d1505951383120220e394", "patch": "@@ -1,5 +1,14 @@\n 2020-04-29  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/94704\n+\t* config/s390/s390.c (s390_function_arg_vector,\n+\ts390_function_arg_float): Use DECL_FIELD_ABI_IGNORED instead of\n+\tcxx17_empty_base_field_p.  In -Wpsabi diagnostics use the type\n+\tpassed to the function rather than the type of the single element.\n+\tRename cxx17_empty_base_seen variable to empty_base_seen, change\n+\ttype to int, and adjust diagnostics depending on if the field\n+\thas [[no_unique_attribute]] or not.\n+\n \tPR target/94832\n \t* config/i386/avx512bwintrin.h (_mm512_alignr_epi8,\n \t_mm512_mask_alignr_epi8, _mm512_maskz_alignr_epi8): Wrap macro operands"}, {"sha": "74b490ad215267655a68a09552c4fda9f6498e65", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 40, "deletions": 16, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48e54fea7ba4a7cb7b3d1505951383120220e394/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48e54fea7ba4a7cb7b3d1505951383120220e394/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=48e54fea7ba4a7cb7b3d1505951383120220e394", "patch": "@@ -11911,7 +11911,8 @@ s390_function_arg_vector (machine_mode mode, const_tree type)\n \n   /* The ABI says that record types with a single member are treated\n      just like that member would be.  */\n-  bool cxx17_empty_base_seen = false;\n+  int empty_base_seen = 0;\n+  const_tree orig_type = type;\n   while (TREE_CODE (type) == RECORD_TYPE)\n     {\n       tree field, single = NULL_TREE;\n@@ -11921,9 +11922,13 @@ s390_function_arg_vector (machine_mode mode, const_tree type)\n \t  if (TREE_CODE (field) != FIELD_DECL)\n \t    continue;\n \n-\t  if (cxx17_empty_base_field_p (field))\n+\t  if (DECL_FIELD_ABI_IGNORED (field))\n \t    {\n-\t      cxx17_empty_base_seen = true;\n+\t      if (lookup_attribute (\"no_unique_address\",\n+\t\t\t\t    DECL_ATTRIBUTES (field)))\n+\t\tempty_base_seen |= 2;\n+\t      else\n+\t\tempty_base_seen |= 1;\n \t      continue;\n \t    }\n \n@@ -11949,16 +11954,23 @@ s390_function_arg_vector (machine_mode mode, const_tree type)\n   if (!VECTOR_TYPE_P (type))\n     return false;\n \n-  if (warn_psabi && cxx17_empty_base_seen)\n+  if (warn_psabi && empty_base_seen)\n     {\n       static unsigned last_reported_type_uid;\n-      unsigned uid = TYPE_UID (TYPE_MAIN_VARIANT (type));\n+      unsigned uid = TYPE_UID (TYPE_MAIN_VARIANT (orig_type));\n       if (uid != last_reported_type_uid)\n \t{\n \t  last_reported_type_uid = uid;\n-\t  inform (input_location, \"parameter passing for argument of type \"\n-\t\t\t\t  \"%qT when C++17 is enabled changed to match \"\n-\t\t\t\t  \"C++14 in GCC 10.1\", type);\n+\t  if (empty_base_seen & 1)\n+\t    inform (input_location,\n+\t\t    \"parameter passing for argument of type %qT when C++17 \"\n+\t\t    \"is enabled changed to match C++14 in GCC 10.1\",\n+\t\t    orig_type);\n+\t  else\n+\t    inform (input_location,\n+\t\t    \"parameter passing for argument of type %qT with \"\n+\t\t    \"%<[[no_unique_address]]%> members changed in GCC 10.1\",\n+\t\t    orig_type);\n \t}\n     }\n   return true;\n@@ -11983,7 +11995,8 @@ s390_function_arg_float (machine_mode mode, const_tree type)\n \n   /* The ABI says that record types with a single member are treated\n      just like that member would be.  */\n-  bool cxx17_empty_base_seen = false;\n+  int empty_base_seen = 0;\n+  const_tree orig_type = type;\n   while (TREE_CODE (type) == RECORD_TYPE)\n     {\n       tree field, single = NULL_TREE;\n@@ -11992,9 +12005,13 @@ s390_function_arg_float (machine_mode mode, const_tree type)\n \t{\n \t  if (TREE_CODE (field) != FIELD_DECL)\n \t    continue;\n-\t  if (cxx17_empty_base_field_p (field))\n+\t  if (DECL_FIELD_ABI_IGNORED (field))\n \t    {\n-\t      cxx17_empty_base_seen = true;\n+\t      if (lookup_attribute (\"no_unique_address\",\n+\t\t\t\t    DECL_ATTRIBUTES (field)))\n+\t\tempty_base_seen |= 2;\n+\t      else\n+\t\tempty_base_seen |= 1;\n \t      continue;\n \t    }\n \n@@ -12013,16 +12030,23 @@ s390_function_arg_float (machine_mode mode, const_tree type)\n   if (TREE_CODE (type) != REAL_TYPE)\n     return false;\n \n-  if (warn_psabi && cxx17_empty_base_seen)\n+  if (warn_psabi && empty_base_seen)\n     {\n       static unsigned last_reported_type_uid;\n-      unsigned uid = TYPE_UID (TYPE_MAIN_VARIANT (type));\n+      unsigned uid = TYPE_UID (TYPE_MAIN_VARIANT (orig_type));\n       if (uid != last_reported_type_uid)\n \t{\n \t  last_reported_type_uid = uid;\n-\t  inform (input_location, \"parameter passing for argument of type \"\n-\t\t\t\t  \"%qT when C++17 is enabled changed to match \"\n-\t\t\t\t  \"C++14 in GCC 10.1\", type);\n+\t  if (empty_base_seen & 1)\n+\t    inform (input_location,\n+\t\t    \"parameter passing for argument of type %qT when C++17 \"\n+\t\t    \"is enabled changed to match C++14 in GCC 10.1\",\n+\t\t    orig_type);\n+\t  else\n+\t    inform (input_location,\n+\t\t    \"parameter passing for argument of type %qT with \"\n+\t\t    \"%<[[no_unique_address]]%> members changed in GCC 10.1\",\n+\t\t    orig_type);\n \t}\n     }\n "}, {"sha": "9bc4723049a4fcc8292826f7f4f49e7b6a2c876e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48e54fea7ba4a7cb7b3d1505951383120220e394/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48e54fea7ba4a7cb7b3d1505951383120220e394/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=48e54fea7ba4a7cb7b3d1505951383120220e394", "patch": "@@ -1,3 +1,12 @@\n+2020-04-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/94704\n+\t* g++.target/s390/s390.exp: New file.\n+\t* g++.target/s390/pr94704-1.C: New test.\n+\t* g++.target/s390/pr94704-2.C: New test.\n+\t* g++.target/s390/pr94704-3.C: New test.\n+\t* g++.target/s390/pr94704-4.C: New test.\n+\n 2020-04-29  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/94830"}, {"sha": "56675f20bb5fd891046ab5847c65226a31518e69", "filename": "gcc/testsuite/g++.target/s390/pr94704-1.C", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48e54fea7ba4a7cb7b3d1505951383120220e394/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fs390%2Fpr94704-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48e54fea7ba4a7cb7b3d1505951383120220e394/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fs390%2Fpr94704-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fs390%2Fpr94704-1.C?ref=48e54fea7ba4a7cb7b3d1505951383120220e394", "patch": "@@ -0,0 +1,38 @@\n+// PR target/94704\n+// { dg-do compile }\n+// { dg-options \"-O2 -std=c++14\" }\n+// Test that for all the calls in this testcase the C++17 empty base\n+// artificial fields and [[no_unique_address]] empty class non-static\n+// data members are ignored in the decision whether passed arguments\n+// have a single floating point field.\n+// { dg-final { scan-assembler-times {(?n)^\\s+ld\\s+%f0,} 7 } }\n+\n+struct X { };\n+struct Y { int : 0; };\n+struct Z { int : 0; Y y; };\n+struct U : public X { X q; };\n+struct A { double a; };\n+struct B : public X { double a; };\n+struct C : public Y { double a; };\n+struct D : public Z { double a; };\n+struct E : public U { double a; };\n+struct F { [[no_unique_address]] X x; double a; };\n+struct G { [[no_unique_address]] Y y; double a; };\n+struct H { [[no_unique_address]] Z z; double a; };\n+struct I { [[no_unique_address]] U u; double a; };\n+struct J { double a; [[no_unique_address]] X x; };\n+struct K { double a; [[no_unique_address]] Y y; };\n+struct L { double a; [[no_unique_address]] Z z; };\n+struct M { double a; [[no_unique_address]] U u; };\n+#define T(S, s) extern S s; extern void foo##s (S); int bar##s () { foo##s (s); return 0; }\n+// { dg-message \"parameter passing for argument of type 'F' with '\\\\\\[\\\\\\[no_unique_address\\\\\\]\\\\\\]' members changed in GCC 10.1\" \"\" { target *-*-* } .-1 }\n+// { dg-message \"parameter passing for argument of type 'G' with '\\\\\\[\\\\\\[no_unique_address\\\\\\]\\\\\\]' members changed in GCC 10.1\" \"\" { target *-*-* } .-2 }\n+// { dg-message \"parameter passing for argument of type 'J' with '\\\\\\[\\\\\\[no_unique_address\\\\\\]\\\\\\]' members changed in GCC 10.1\" \"\" { target *-*-* } .-3 }\n+// { dg-message \"parameter passing for argument of type 'K' with '\\\\\\[\\\\\\[no_unique_address\\\\\\]\\\\\\]' members changed in GCC 10.1\" \"\" { target *-*-* } .-4 }\n+T (A, a)\n+T (B, b)\n+T (C, c)\n+T (F, f)\n+T (G, g)\n+T (J, j)\n+T (K, k)"}, {"sha": "087c87750291fd11206177a04851a98a37cedcf9", "filename": "gcc/testsuite/g++.target/s390/pr94704-2.C", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48e54fea7ba4a7cb7b3d1505951383120220e394/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fs390%2Fpr94704-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48e54fea7ba4a7cb7b3d1505951383120220e394/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fs390%2Fpr94704-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fs390%2Fpr94704-2.C?ref=48e54fea7ba4a7cb7b3d1505951383120220e394", "patch": "@@ -0,0 +1,34 @@\n+// PR target/94704\n+// { dg-do compile }\n+// { dg-options \"-O2 -std=c++14\" }\n+// Test that for no calls in this testcase the C++17 empty base\n+// artificial fields and [[no_unique_address]] empty class non-static\n+// data members are ignored in the decision whether passed arguments\n+// have a single floating point field.\n+// { dg-final { scan-assembler-not {(?n)^\\s+ld\\s+%f0,} } }\n+\n+struct X { };\n+struct Y { int : 0; };\n+struct Z { int : 0; Y y; };\n+struct U : public X { X q; };\n+struct A { double a; };\n+struct B : public X { double a; };\n+struct C : public Y { double a; };\n+struct D : public Z { double a; };\n+struct E : public U { double a; };\n+struct F { [[no_unique_address]] X x; double a; };\n+struct G { [[no_unique_address]] Y y; double a; };\n+struct H { [[no_unique_address]] Z z; double a; };\n+struct I { [[no_unique_address]] U u; double a; };\n+struct J { double a; [[no_unique_address]] X x; };\n+struct K { double a; [[no_unique_address]] Y y; };\n+struct L { double a; [[no_unique_address]] Z z; };\n+struct M { double a; [[no_unique_address]] U u; };\n+#define T(S, s) extern S s; extern void foo##s (S); int bar##s () { foo##s (s); return 0; }\n+// { dg-bogus \"parameter passing for argument of type\" }\n+T (D, d)\n+T (E, e)\n+T (H, h)\n+T (I, i)\n+T (L, l)\n+T (M, m)"}, {"sha": "7e656fb3b78445905c0727b3c1c6edc0ccfe67ff", "filename": "gcc/testsuite/g++.target/s390/pr94704-3.C", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48e54fea7ba4a7cb7b3d1505951383120220e394/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fs390%2Fpr94704-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48e54fea7ba4a7cb7b3d1505951383120220e394/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fs390%2Fpr94704-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fs390%2Fpr94704-3.C?ref=48e54fea7ba4a7cb7b3d1505951383120220e394", "patch": "@@ -0,0 +1,40 @@\n+// PR target/94704\n+// { dg-do compile }\n+// { dg-options \"-O2 -std=c++17\" }\n+// Test that for all the calls in this testcase the C++17 empty base\n+// artificial fields and [[no_unique_address]] empty class non-static\n+// data members are ignored in the decision whether passed arguments\n+// have a single floating point field.\n+// { dg-final { scan-assembler-times {(?n)^\\s+ld\\s+%f0,} 7 } }\n+\n+struct X { };\n+struct Y { int : 0; };\n+struct Z { int : 0; Y y; };\n+struct U : public X { X q; };\n+struct A { double a; };\n+struct B : public X { double a; };\n+struct C : public Y { double a; };\n+struct D : public Z { double a; };\n+struct E : public U { double a; };\n+struct F { [[no_unique_address]] X x; double a; };\n+struct G { [[no_unique_address]] Y y; double a; };\n+struct H { [[no_unique_address]] Z z; double a; };\n+struct I { [[no_unique_address]] U u; double a; };\n+struct J { double a; [[no_unique_address]] X x; };\n+struct K { double a; [[no_unique_address]] Y y; };\n+struct L { double a; [[no_unique_address]] Z z; };\n+struct M { double a; [[no_unique_address]] U u; };\n+#define T(S, s) extern S s; extern void foo##s (S); int bar##s () { foo##s (s); return 0; }\n+// { dg-message \"parameter passing for argument of type 'B' when C\\\\+\\\\+17 is enabled changed to match C\\\\+\\\\+14 in GCC 10.1\" \"\" { target *-*-* } .-1 }\n+// { dg-message \"parameter passing for argument of type 'C' when C\\\\+\\\\+17 is enabled changed to match C\\\\+\\\\+14 in GCC 10.1\" \"\" { target *-*-* } .-2 }\n+// { dg-message \"parameter passing for argument of type 'F' with '\\\\\\[\\\\\\[no_unique_address\\\\\\]\\\\\\]' members changed in GCC 10.1\" \"\" { target *-*-* } .-3 }\n+// { dg-message \"parameter passing for argument of type 'G' with '\\\\\\[\\\\\\[no_unique_address\\\\\\]\\\\\\]' members changed in GCC 10.1\" \"\" { target *-*-* } .-4 }\n+// { dg-message \"parameter passing for argument of type 'J' with '\\\\\\[\\\\\\[no_unique_address\\\\\\]\\\\\\]' members changed in GCC 10.1\" \"\" { target *-*-* } .-5 }\n+// { dg-message \"parameter passing for argument of type 'K' with '\\\\\\[\\\\\\[no_unique_address\\\\\\]\\\\\\]' members changed in GCC 10.1\" \"\" { target *-*-* } .-6 }\n+T (A, a)\n+T (B, b)\n+T (C, c)\n+T (F, f)\n+T (G, g)\n+T (J, j)\n+T (K, k)"}, {"sha": "a9727b12fe2d4108674b54d7e1f38ebeedc37764", "filename": "gcc/testsuite/g++.target/s390/pr94704-4.C", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48e54fea7ba4a7cb7b3d1505951383120220e394/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fs390%2Fpr94704-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48e54fea7ba4a7cb7b3d1505951383120220e394/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fs390%2Fpr94704-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fs390%2Fpr94704-4.C?ref=48e54fea7ba4a7cb7b3d1505951383120220e394", "patch": "@@ -0,0 +1,34 @@\n+// PR target/94704\n+// { dg-do compile }\n+// { dg-options \"-O2 -std=c++17\" }\n+// Test that for no calls in this testcase the C++17 empty base\n+// artificial fields and [[no_unique_address]] empty class non-static\n+// data members are ignored in the decision whether passed arguments\n+// have a single floating point field.\n+// { dg-final { scan-assembler-not {(?n)^\\s+ld\\s+%f0,} } }\n+\n+struct X { };\n+struct Y { int : 0; };\n+struct Z { int : 0; Y y; };\n+struct U : public X { X q; };\n+struct A { double a; };\n+struct B : public X { double a; };\n+struct C : public Y { double a; };\n+struct D : public Z { double a; };\n+struct E : public U { double a; };\n+struct F { [[no_unique_address]] X x; double a; };\n+struct G { [[no_unique_address]] Y y; double a; };\n+struct H { [[no_unique_address]] Z z; double a; };\n+struct I { [[no_unique_address]] U u; double a; };\n+struct J { double a; [[no_unique_address]] X x; };\n+struct K { double a; [[no_unique_address]] Y y; };\n+struct L { double a; [[no_unique_address]] Z z; };\n+struct M { double a; [[no_unique_address]] U u; };\n+#define T(S, s) extern S s; extern void foo##s (S); int bar##s () { foo##s (s); return 0; }\n+// { dg-bogus \"parameter passing for argument of type\" }\n+T (D, d)\n+T (E, e)\n+T (H, h)\n+T (I, i)\n+T (L, l)\n+T (M, m)"}, {"sha": "a0e6b82cadc621bf7582a83059dc730e16ab5ae4", "filename": "gcc/testsuite/g++.target/s390/s390.exp", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48e54fea7ba4a7cb7b3d1505951383120220e394/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fs390%2Fs390.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48e54fea7ba4a7cb7b3d1505951383120220e394/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fs390%2Fs390.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fs390%2Fs390.exp?ref=48e54fea7ba4a7cb7b3d1505951383120220e394", "patch": "@@ -0,0 +1,44 @@\n+#  Specific regression driver for S390.\n+#  Copyright (C) 2020 Free Software Foundation, Inc.\n+#\n+#  This file is part of GCC.\n+#\n+#  GCC is free software; you can redistribute it and/or modify it\n+#  under the terms of the GNU General Public License as published by\n+#  the Free Software Foundation; either version 3, or (at your option)\n+#  any later version.\n+#\n+#  GCC is distributed in the hope that it will be useful, but\n+#  WITHOUT ANY WARRANTY; without even the implied warranty of\n+#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+#  General Public License for more details.\n+#\n+#  You should have received a copy of the GNU General Public License\n+#  along with GCC; see the file COPYING3.  If not see\n+#  <http://www.gnu.org/licenses/>.  */\n+\n+# GCC testsuite that uses the `dg.exp' driver.\n+\n+# Exit immediately if this isn't a s390 target.\n+if {![istarget s390*-*-*] } then {\n+  return\n+}\n+\n+# Load support procs.\n+load_lib g++-dg.exp\n+\n+global DEFAULT_CXXFLAGS\n+if ![info exists DEFAULT_CXXFLAGS] then {\n+    set DEFAULT_CXXFLAGS \" -pedantic-errors\"\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Main loop.\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.C]] \\\n+        \"\" $DEFAULT_CXXFLAGS\n+\n+# All done.\n+dg-finish\n+"}]}