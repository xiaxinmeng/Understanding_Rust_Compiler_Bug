{"sha": "cff87282f4f50c2fd471a2fe0df49312716a8caf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ZmODcyODJmNGY1MGMyZmQ0NzFhMmZlMGRmNDkzMTI3MTZhOGNhZg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-12-10T23:50:26Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-12-10T23:50:26Z"}, "message": "libstdc++: Correct noexcept-specifiers on span constructors\n\nAs discussed at https://github.com/cplusplus/draft/issues/3534 two\nstd::span constructors specify incorrect conditions for throwing\nexceptions. This patch makes those constructors have correct\nnoexcept-specifiers that accurately reflect what can actually throw.\n\n\t(span(ContiguousIterator, Sentinel)): Add conditional noexcept.\n\t* include/std/span (span(ContiguousIterator, size_type)): Change\n\tnoexcept to be unconditionally true.\n\t* testsuite/23_containers/span/nothrow_cons.cc: New test.\n\nFrom-SVN: r279206", "tree": {"sha": "86eeb876af5718df8e8f38dd5347d6e2c594a446", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86eeb876af5718df8e8f38dd5347d6e2c594a446"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cff87282f4f50c2fd471a2fe0df49312716a8caf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cff87282f4f50c2fd471a2fe0df49312716a8caf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cff87282f4f50c2fd471a2fe0df49312716a8caf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cff87282f4f50c2fd471a2fe0df49312716a8caf/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6ae300f9a019aff902cd11068af0956288d6541", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6ae300f9a019aff902cd11068af0956288d6541", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6ae300f9a019aff902cd11068af0956288d6541"}], "stats": {"total": 69, "additions": 68, "deletions": 1}, "files": [{"sha": "3cc22a18b1c626dee93f504c50deb5b941b9da2f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cff87282f4f50c2fd471a2fe0df49312716a8caf/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cff87282f4f50c2fd471a2fe0df49312716a8caf/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=cff87282f4f50c2fd471a2fe0df49312716a8caf", "patch": "@@ -1,3 +1,10 @@\n+2019-12-10  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t(span(ContiguousIterator, Sentinel)): Add conditional noexcept.\n+\t* include/std/span (span(ContiguousIterator, size_type)): Change\n+\tnoexcept to be unconditionally true.\n+\t* testsuite/23_containers/span/nothrow_cons.cc: New test.\n+\n 2019-12-10  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \t* include/bits/stl_algobase.h"}, {"sha": "6328ecbcde5e323d755709b12c6227bfed06b096", "filename": "libstdc++-v3/include/std/span", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cff87282f4f50c2fd471a2fe0df49312716a8caf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fspan", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cff87282f4f50c2fd471a2fe0df49312716a8caf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fspan", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fspan?ref=cff87282f4f50c2fd471a2fe0df49312716a8caf", "patch": "@@ -210,6 +210,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    && (!is_convertible_v<_Sentinel, size_type>)\n \tconstexpr\n \tspan(_ContiguousIterator __first, _Sentinel __last)\n+\tnoexcept(noexcept(__last - __first))\n \t: _M_extent(static_cast<size_type>(__last - __first)),\n \t  _M_ptr(std::to_address(__first))\n \t{\n@@ -221,7 +222,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \trequires (__is_compatible_iterator<_ContiguousIterator>::value)\n \tconstexpr\n \tspan(_ContiguousIterator __first, size_type __count)\n-\tnoexcept(noexcept(std::to_address(__first)))\n+\tnoexcept\n \t: _M_extent(__count), _M_ptr(std::to_address(__first))\n \t{ __glibcxx_assert(_Extent == dynamic_extent || __count == _Extent); }\n "}, {"sha": "f28a3386aafdc6b4f303412020b66cc1aa50764c", "filename": "libstdc++-v3/testsuite/23_containers/span/nothrow_cons.cc", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cff87282f4f50c2fd471a2fe0df49312716a8caf/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Fnothrow_cons.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cff87282f4f50c2fd471a2fe0df49312716a8caf/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Fnothrow_cons.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Fnothrow_cons.cc?ref=cff87282f4f50c2fd471a2fe0df49312716a8caf", "patch": "@@ -0,0 +1,59 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <span>\n+\n+using std::span;\n+using std::is_nothrow_constructible_v;\n+\n+static_assert( is_nothrow_constructible_v<span<int>> );\n+static_assert( is_nothrow_constructible_v<span<int, 0>> );\n+\n+static_assert( is_nothrow_constructible_v<span<int>, span<int>&> );\n+static_assert( is_nothrow_constructible_v<span<const int>, span<int>&> );\n+static_assert( is_nothrow_constructible_v<span<int>, span<int, 1>&> );\n+static_assert( is_nothrow_constructible_v<span<const int>, span<int, 1>&> );\n+static_assert( is_nothrow_constructible_v<span<int, 1>, span<int, 1>&> );\n+static_assert( is_nothrow_constructible_v<span<const int, 1>, span<int, 1>&> );\n+\n+static_assert( is_nothrow_constructible_v<span<int>, int(&)[1]> );\n+static_assert( is_nothrow_constructible_v<span<int, 1>, int(&)[1]> );\n+static_assert( is_nothrow_constructible_v<span<int>, std::array<int, 1>&> );\n+static_assert( is_nothrow_constructible_v<span<int, 1>, std::array<int, 1>&> );\n+\n+template<bool>\n+struct sentinel { int* p; };\n+\n+template<bool B>\n+bool operator==(sentinel<B> s, int* p) noexcept { return s.p == p; }\n+\n+template<bool B>\n+std::ptrdiff_t operator-(sentinel<B> s, int* p) noexcept(B) { return s.p - p; }\n+\n+template<bool B>\n+std::ptrdiff_t operator-(int* p, sentinel<B> s) noexcept { return p - s.p; }\n+\n+static_assert(std::sized_sentinel_for<sentinel<true>, int*>);\n+static_assert(std::sized_sentinel_for<sentinel<false>, int*>);\n+\n+static_assert(is_nothrow_constructible_v<span<int>, int*, std::size_t>);\n+static_assert(is_nothrow_constructible_v<span<int>, int*, const int*>);\n+static_assert(is_nothrow_constructible_v<span<int>, int*, sentinel<true>>);\n+static_assert(!is_nothrow_constructible_v<span<int>, int*, sentinel<false>>);"}]}