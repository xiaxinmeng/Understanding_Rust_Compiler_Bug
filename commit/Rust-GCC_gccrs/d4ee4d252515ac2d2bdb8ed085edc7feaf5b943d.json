{"sha": "d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDRlZTRkMjUyNTE1YWMyZDJiZGI4ZWQwODVlZGM3ZmVhZjViOTQzZA==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@redhat.com", "date": "2005-04-23T21:29:07Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2005-04-23T21:29:07Z"}, "message": "diagnostic.c (warning): Accept parameter to classify warning option.\n\n* diagnostic.c (warning): Accept parameter to classify warning option.\n(warning0): New, for when a pointer to an error() like function is needed.\n* errors.c (warning): Likewise.\n* errors.h (warning, warning0): Adjust prototypes.\n* toplev.h (warning, warning0): Likewise.\n\n* attribs.c, builtins.c, c-common.c, c-decl.c, c-format.c,\nc-gimplify.c, c-lex.c, c-objc-common.c, c-opts.c, c-parser.c,\nc-pragma.c, c-typeck.c, calls.c, cgraph.c, coverage.c, emit-rtl.c,\nfold-const.c, fortran/trans-decl.c, function.c, gcse.c,\ngenautomata.c, haifa-sched.c, opts.c, passes.c, regclass.c,\nreload1.c, stmt.c, stor-layout.c, toplev.c, tree-cfg.c,\ntree-dump.c, tree-inline.c, tree-mudflap.c, tree-optimize.c,\ntree-ssa.c, tree.c, varasm.c: Adjust warning() callers.\n\n* config/alpha/alpha.c, config/arc/arc.c, config/arm/arm.c,\nconfig/avr/avr.c, config/bfin/bfin.c, config/c4x/c4x-c.c,\nconfig/c4x/c4x.c, config/cris/cris.c, config/darwin-c.c,\nconfig/darwin.c, config/darwin.h, config/h8300/h8300.c,\nconfig/i386/cygming.h, config/i386/djgpp.h, config/i386/i386.c,\nconfig/i386/winnt.c, config/ia64/ia64-c.c, config/ia64/ia64.c,\nconfig/ip2k/ip2k.c, config/m32r/m32r.c, config/m68hc11/m68hc11.c,\nconfig/m68k/m68k.c, config/mcore/mcore.c, config/mips/mips.c,\nconfig/mmix/mmix.c, config/ns32k/ns32k.c, config/pa/pa-hpux11.h,\nconfig/pa/pa.c, config/rs6000/aix43.h, config/rs6000/aix51.h,\nconfig/rs6000/aix52.h, config/rs6000/darwin.h,\nconfig/rs6000/rs6000-c.c, config/rs6000/rs6000.c,\nconfig/s390/s390.c, config/sh/sh.c, config/sh/sh.h,\nconfig/sh/symbian.c, config/sol2-c.c, config/sol2.c,\nconfig/stormy16/stormy16.c, config/v850/v850-c.c,\nconfig/v850/v850.c, config/xtensa/xtensa.c: Adjust warning()\ncallers.\n\n* ada/misc.c: Adjust warning() callers.\n\n* cp/call.c, cp/class.c, cp/cvt.c, cp/decl.c, cp/decl2.c,\ncp/except.c, cp/friend.c, cp/init.c, cp/lex.c, cp/mangle.c,\ncp/method.c, cp/name-lookup.c, cp/parser.c, cp/repo.c, cp/rtti.c,\ncp/tree.c, cp/typeck.c, cp/typeck2.c: Adjust warning() callers.\n\n* fortran/trans-decl.c: Adjust warning() callers.\n\n* java/class.c, java/decl.c, java/expr.c, java/jcf-io.c,\njava/jcf-parse.c, java/jv-scan.c, java/parse.y: Adjust warning()\ncallers.\n\n* objc/objc-act.c: Adjust warning() callers.\n\n* treelang/parse.y: Adjust warning() callers.\n\nFrom-SVN: r98633", "tree": {"sha": "754eeef62542ff45392c946c655cc40c38bd1bed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/754eeef62542ff45392c946c655cc40c38bd1bed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/comments", "author": null, "committer": null, "parents": [{"sha": "6084512671ee4909d6428506d46d09ee1a90cbdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6084512671ee4909d6428506d46d09ee1a90cbdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6084512671ee4909d6428506d46d09ee1a90cbdf"}], "stats": {"total": 1718, "additions": 903, "deletions": 815}, "files": [{"sha": "a049544a1e0dff77a2aa5139488c91838f8a3bba", "filename": "gcc/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -1,3 +1,38 @@\n+2005-04-23  DJ Delorie  <dj@redhat.com>\n+\n+\t* diagnostic.c (warning): Accept parameter to classify warning option.\n+\t(warning0): New, for when a pointer to an error() like function is needed.\n+\t* errors.c (warning): Likewise.\n+\t* errors.h (warning, warning0): Adjust prototypes.\n+\t* toplev.h (warning, warning0): Likewise.\n+\n+\t* attribs.c, builtins.c, c-common.c, c-decl.c, c-format.c,\n+\tc-gimplify.c, c-lex.c, c-objc-common.c, c-opts.c, c-parser.c,\n+\tc-pragma.c, c-typeck.c, calls.c, cgraph.c, coverage.c, emit-rtl.c,\n+\tfold-const.c, fortran/trans-decl.c, function.c, gcse.c,\n+\tgenautomata.c, haifa-sched.c, opts.c, passes.c, regclass.c,\n+\treload1.c, stmt.c, stor-layout.c, toplev.c, tree-cfg.c,\n+\ttree-dump.c, tree-inline.c, tree-mudflap.c, tree-optimize.c,\n+\ttree-ssa.c, tree.c, varasm.c: Adjust warning() callers.\n+\n+\t* config/alpha/alpha.c, config/arc/arc.c, config/arm/arm.c,\n+\tconfig/avr/avr.c, config/bfin/bfin.c, config/c4x/c4x-c.c,\n+\tconfig/c4x/c4x.c, config/cris/cris.c, config/darwin-c.c,\n+\tconfig/darwin.c, config/darwin.h, config/h8300/h8300.c,\n+\tconfig/i386/cygming.h, config/i386/djgpp.h, config/i386/i386.c,\n+\tconfig/i386/winnt.c, config/ia64/ia64-c.c, config/ia64/ia64.c,\n+\tconfig/ip2k/ip2k.c, config/m32r/m32r.c, config/m68hc11/m68hc11.c,\n+\tconfig/m68k/m68k.c, config/mcore/mcore.c, config/mips/mips.c,\n+\tconfig/mmix/mmix.c, config/ns32k/ns32k.c, config/pa/pa-hpux11.h,\n+\tconfig/pa/pa.c, config/rs6000/aix43.h, config/rs6000/aix51.h,\n+\tconfig/rs6000/aix52.h, config/rs6000/darwin.h,\n+\tconfig/rs6000/rs6000-c.c, config/rs6000/rs6000.c,\n+\tconfig/s390/s390.c, config/sh/sh.c, config/sh/sh.h,\n+\tconfig/sh/symbian.c, config/sol2-c.c, config/sol2.c,\n+\tconfig/stormy16/stormy16.c, config/v850/v850-c.c,\n+\tconfig/v850/v850.c, config/xtensa/xtensa.c: Adjust warning()\n+\tcallers.\n+\t\n 2005-04-23  Richard Henderson  <rth@redhat.com>\n \n         PR rtl-opt/21102"}, {"sha": "e1833d640d95de65892109f1fd927a52cde9e391", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -1,3 +1,7 @@\n+2005-04-23  DJ Delorie  <dj@redhat.com>\n+\n+\t* misc.c: Adjust warning() callers.\n+\n 2005-04-16  Laurent GUERBY  <laurent@guerby.net>\n \n         PR ada/18847"}, {"sha": "b8a3299ef49da619a1a83b0d52dca54a7bd6ccf0", "filename": "gcc/ada/misc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fada%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fada%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmisc.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -301,7 +301,7 @@ gnat_handle_option (size_t scode, const char *arg, int value ATTRIBUTE_UNUSED)\n       break;\n \n     case OPT_gant:\n-      warning (\"%<-gnat%> misspelled as %<-gant%>\");\n+      warning (0, \"%<-gnat%> misspelled as %<-gant%>\");\n \n       /* ... fall through ... */\n "}, {"sha": "78047281967e831879ebb7e0824e0170a9391642", "filename": "gcc/attribs.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fattribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fattribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattribs.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -172,7 +172,7 @@ decl_attributes (tree *node, tree attributes, int flags)\n \n       if (spec == NULL)\n \t{\n-\t  warning (\"%qs attribute directive ignored\",\n+\t  warning (0, \"%qs attribute directive ignored\",\n \t\t   IDENTIFIER_POINTER (name));\n \t  continue;\n \t}\n@@ -197,7 +197,7 @@ decl_attributes (tree *node, tree attributes, int flags)\n \t    }\n \t  else\n \t    {\n-\t      warning (\"%qs attribute does not apply to types\",\n+\t      warning (0, \"%qs attribute does not apply to types\",\n \t\t       IDENTIFIER_POINTER (name));\n \t      continue;\n \t    }\n@@ -243,7 +243,7 @@ decl_attributes (tree *node, tree attributes, int flags)\n \t  if (TREE_CODE (*anode) != FUNCTION_TYPE\n \t      && TREE_CODE (*anode) != METHOD_TYPE)\n \t    {\n-\t      warning (\"%qs attribute only applies to function types\",\n+\t      warning (0, \"%qs attribute only applies to function types\",\n \t\t       IDENTIFIER_POINTER (name));\n \t      continue;\n \t    }"}, {"sha": "740961e15f132eb1baf8664cbb83c9e9a7c19ec4", "filename": "gcc/builtins.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -351,7 +351,7 @@ c_strlen (tree src, int only_value)\n      runtime.  */\n   if (offset < 0 || offset > max)\n     {\n-      warning (\"offset outside bounds of constant string\");\n+      warning (0, \"offset outside bounds of constant string\");\n       return 0;\n     }\n \n@@ -945,7 +945,7 @@ expand_builtin_prefetch (tree arglist)\n   /* Argument 1 must be either zero or one.  */\n   if (INTVAL (op1) != 0 && INTVAL (op1) != 1)\n     {\n-      warning (\"invalid second argument to %<__builtin_prefetch%>;\"\n+      warning (0, \"invalid second argument to %<__builtin_prefetch%>;\"\n \t       \" using zero\");\n       op1 = const0_rtx;\n     }\n@@ -960,7 +960,7 @@ expand_builtin_prefetch (tree arglist)\n   /* Argument 2 must be 0, 1, 2, or 3.  */\n   if (INTVAL (op2) < 0 || INTVAL (op2) > 3)\n     {\n-      warning (\"invalid third argument to %<__builtin_prefetch%>; using zero\");\n+      warning (0, \"invalid third argument to %<__builtin_prefetch%>; using zero\");\n       op2 = const0_rtx;\n     }\n \n@@ -4220,12 +4220,12 @@ gimplify_va_arg_expr (tree *expr_p, tree *pre_p, tree *post_p)\n       /* Unfortunately, this is merely undefined, rather than a constraint\n \t violation, so we cannot make this an error.  If this call is never\n \t executed, the program is still strictly conforming.  */\n-      warning (\"%qT is promoted to %qT when passed through %<...%>\",\n+      warning (0, \"%qT is promoted to %qT when passed through %<...%>\",\n \t       type, promoted_type);\n       if (! gave_help)\n \t{\n \t  gave_help = true;\n-\t  warning (\"(so you should pass %qT not %qT to %<va_arg%>)\",\n+\t  warning (0, \"(so you should pass %qT not %qT to %<va_arg%>)\",\n \t\t   promoted_type, type);\n \t}\n \n@@ -4365,9 +4365,9 @@ expand_builtin_frame_address (tree fndecl, tree arglist)\n       if (tem == NULL)\n \t{\n \t  if (DECL_FUNCTION_CODE (fndecl) == BUILT_IN_FRAME_ADDRESS)\n-\t    warning (\"unsupported argument to %<__builtin_frame_address%>\");\n+\t    warning (0, \"unsupported argument to %<__builtin_frame_address%>\");\n \t  else\n-\t    warning (\"unsupported argument to %<__builtin_return_address%>\");\n+\t    warning (0, \"unsupported argument to %<__builtin_return_address%>\");\n \t  return const0_rtx;\n \t}\n \n@@ -9486,7 +9486,7 @@ fold_builtin_next_arg (tree arglist)\n     {\n       /* Evidently an out of date version of <stdarg.h>; can't validate\n \t va_start's second argument, but can still work as intended.  */\n-      warning (\"%<__builtin_next_arg%> called without an argument\");\n+      warning (0, \"%<__builtin_next_arg%> called without an argument\");\n       return true;\n     }\n   /* We use __builtin_va_start (ap, 0, 0) or __builtin_next_arg (0, 0)\n@@ -9521,7 +9521,7 @@ fold_builtin_next_arg (tree arglist)\n \t     argument.  We just warn and set the arg to be the last\n \t     argument so that we will get wrong-code because of\n \t     it.  */\n-\t  warning (\"second parameter of %<va_start%> not last named argument\");\n+\t  warning (0, \"second parameter of %<va_start%> not last named argument\");\n \t}\n       /* We want to verify the second parameter just once before the tree\n          optimizers are run and then avoid keeping it in the tree,"}, {"sha": "8aa0aea4c976f5f4967c7e0b582439e0c88f3c8b", "filename": "gcc/c-common.c", "status": "modified", "additions": 61, "deletions": 61, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -913,7 +913,7 @@ overflow_warning (tree value)\n     {\n       TREE_OVERFLOW (value) = 0;\n       if (skip_evaluation == 0)\n-\twarning (\"integer overflow in expression\");\n+\twarning (0, \"integer overflow in expression\");\n     }\n   else if ((TREE_CODE (value) == REAL_CST\n \t    || (TREE_CODE (value) == COMPLEX_CST\n@@ -922,13 +922,13 @@ overflow_warning (tree value)\n     {\n       TREE_OVERFLOW (value) = 0;\n       if (skip_evaluation == 0)\n-\twarning (\"floating point overflow in expression\");\n+\twarning (0, \"floating point overflow in expression\");\n     }\n   else if (TREE_CODE (value) == VECTOR_CST && TREE_OVERFLOW (value))\n     {\n       TREE_OVERFLOW (value) = 0;\n       if (skip_evaluation == 0)\n-\twarning (\"vector overflow in expression\");\n+\twarning (0, \"vector overflow in expression\");\n     }\n }\n \n@@ -950,9 +950,9 @@ unsigned_conversion_warning (tree result, tree operand)\n     {\n       if (!int_fits_type_p (operand, c_common_signed_type (type)))\n \t/* This detects cases like converting -129 or 256 to unsigned char.  */\n-\twarning (\"large integer implicitly truncated to unsigned type\");\n+\twarning (0, \"large integer implicitly truncated to unsigned type\");\n       else if (warn_conversion)\n-\twarning (\"negative integer implicitly converted to unsigned type\");\n+\twarning (0, \"negative integer implicitly converted to unsigned type\");\n     }\n }\n \n@@ -1010,7 +1010,7 @@ convert_and_check (tree type, tree expr)\n \t\t || !constant_fits_type_p (expr,\n \t\t\t\t\t   c_common_unsigned_type (type)))\n \t\t&& skip_evaluation == 0)\n-\t      warning (\"overflow in implicit constant conversion\");\n+\t      warning (0, \"overflow in implicit constant conversion\");\n \t}\n       else\n \tunsigned_conversion_warning (t, expr);\n@@ -1146,7 +1146,7 @@ warn_for_collisions_1 (tree written, tree writer, struct tlist *list,\n \t  && DECL_NAME (list->expr))\n \t{\n \t  warned_ids = new_tlist (warned_ids, written, NULL_TREE);\n-\t  warning (\"operation on %qE may be undefined\", list->expr);\n+\t  warning (0, \"operation on %qE may be undefined\", list->expr);\n \t}\n       list = list->next;\n     }\n@@ -1472,23 +1472,23 @@ check_case_bounds (tree type, tree orig_type,\n   if (tree_int_cst_compare (case_low, min_value) < 0\n       && tree_int_cst_compare (case_high, min_value) < 0)\n     {\n-      warning (\"case label value is less than minimum value for type\");\n+      warning (0, \"case label value is less than minimum value for type\");\n       return false;\n     }\n \n   /* Case value is greater than maximum for type.  */\n   if (tree_int_cst_compare (case_low, max_value) > 0\n       && tree_int_cst_compare (case_high, max_value) > 0)\n     {\n-      warning (\"case label value exceeds maximum value for type\");\n+      warning (0, \"case label value exceeds maximum value for type\");\n       return false;\n     }\n \n   /* Saturate lower case label value to minimum.  */\n   if (tree_int_cst_compare (case_high, min_value) >= 0\n       && tree_int_cst_compare (case_low, min_value) < 0)\n     {\n-      warning (\"lower value in case label range\"\n+      warning (0, \"lower value in case label range\"\n \t       \" less than minimum value for type\");\n       case_low = min_value;\n     }\n@@ -1497,7 +1497,7 @@ check_case_bounds (tree type, tree orig_type,\n   if (tree_int_cst_compare (case_low, max_value) <= 0\n       && tree_int_cst_compare (case_high, max_value) > 0)\n     {\n-      warning (\"upper value in case label range\"\n+      warning (0, \"upper value in case label range\"\n \t       \" exceeds maximum value for type\");\n       case_high = max_value;\n     }\n@@ -2120,9 +2120,9 @@ shorten_compare (tree *op0_ptr, tree *op1_ptr, tree *restype_ptr,\n       if (TREE_CODE (primop0) != INTEGER_CST)\n \t{\n \t  if (val == truthvalue_false_node)\n-\t    warning (\"comparison is always false due to limited range of data type\");\n+\t    warning (0, \"comparison is always false due to limited range of data type\");\n \t  if (val == truthvalue_true_node)\n-\t    warning (\"comparison is always true due to limited range of data type\");\n+\t    warning (0, \"comparison is always true due to limited range of data type\");\n \t}\n \n       if (val != 0)\n@@ -2192,7 +2192,7 @@ shorten_compare (tree *op0_ptr, tree *op1_ptr, tree *restype_ptr,\n \t\t  && !(TREE_CODE (primop0) == INTEGER_CST\n \t\t       && !TREE_OVERFLOW (convert (c_common_signed_type (type),\n \t\t\t\t\t\t   primop0))))\n-\t\twarning (\"comparison of unsigned expression >= 0 is always true\");\n+\t\twarning (0, \"comparison of unsigned expression >= 0 is always true\");\n \t      value = truthvalue_true_node;\n \t      break;\n \n@@ -2201,7 +2201,7 @@ shorten_compare (tree *op0_ptr, tree *op1_ptr, tree *restype_ptr,\n \t\t  && !(TREE_CODE (primop0) == INTEGER_CST\n \t\t       && !TREE_OVERFLOW (convert (c_common_signed_type (type),\n \t\t\t\t\t\t   primop0))))\n-\t\twarning (\"comparison of unsigned expression < 0 is always false\");\n+\t\twarning (0, \"comparison of unsigned expression < 0 is always false\");\n \t      value = truthvalue_false_node;\n \t      break;\n \n@@ -2381,7 +2381,7 @@ c_common_truthvalue_conversion (tree expr)\n \t  {\n \t    /* Common Ada/Pascal programmer's mistake.  We always warn\n \t       about this since it is so bad.  */\n-\t    warning (\"the address of %qD, will always evaluate as %<true%>\",\n+\t    warning (0, \"the address of %qD, will always evaluate as %<true%>\",\n \t\t     TREE_OPERAND (expr, 0));\n \t    return truthvalue_true_node;\n \t  }\n@@ -2477,7 +2477,7 @@ c_common_truthvalue_conversion (tree expr)\n \n     case MODIFY_EXPR:\n       if (warn_parentheses && !TREE_NO_WARNING (expr))\n-\twarning (\"suggest parentheses around assignment used as truth value\");\n+\twarning (0, \"suggest parentheses around assignment used as truth value\");\n       break;\n \n     default:\n@@ -3548,7 +3548,7 @@ c_add_case_label (splay_tree cases, tree cond, tree orig_type,\n     high_value = NULL_TREE;\n   if (low_value && high_value\n       && !tree_int_cst_lt (low_value, high_value))\n-    warning (\"empty range specified\");\n+    warning (0, \"empty range specified\");\n \n   /* See if the case is in range of the type of the original testing\n      expression.  If both low_value and high_value are out of range,\n@@ -3667,10 +3667,10 @@ match_case_to_enum_1 (tree key, tree type, tree label)\n \t      TREE_INT_CST_HIGH (key), TREE_INT_CST_LOW (key));\n \n   if (TYPE_NAME (type) == 0)\n-    warning (\"%Jcase value %qs not in enumerated type\",\n+    warning (0, \"%Jcase value %qs not in enumerated type\",\n \t     CASE_LABEL (label), buf);\n   else\n-    warning (\"%Jcase value %qs not in enumerated type %qT\",\n+    warning (0, \"%Jcase value %qs not in enumerated type %qT\",\n \t     CASE_LABEL (label), buf, type);\n }\n \n@@ -3727,7 +3727,7 @@ c_do_switch_warnings (splay_tree cases, location_t switch_location,\n \n   default_node = splay_tree_lookup (cases, (splay_tree_key) NULL);\n   if (warn_switch_default && !default_node)\n-    warning (\"%Hswitch missing default case\", &switch_location);\n+    warning (0, \"%Hswitch missing default case\", &switch_location);\n \n   /* If the switch expression was an enumerated type, check that\n      exactly all enumeration literals are covered by the cases.\n@@ -3761,7 +3761,7 @@ c_do_switch_warnings (splay_tree cases, location_t switch_location,\n \t    {\n \t      /* Warn if there are enumerators that don't correspond to\n \t\t case expressions.  */\n-\t      warning (\"%Henumeration value %qE not handled in switch\",\n+\t      warning (0, \"%Henumeration value %qE not handled in switch\",\n \t\t       &switch_location, TREE_PURPOSE (chain));\n \t    }\n \t}\n@@ -3957,7 +3957,7 @@ handle_packed_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n      that changes what the typedef is typing.  */\n   else\n     {\n-      warning (\"%qE attribute ignored\", name);\n+      warning (0, \"%qE attribute ignored\", name);\n       *no_add_attrs = true;\n     }\n \n@@ -3976,7 +3976,7 @@ handle_nocommon_attribute (tree *node, tree name,\n     DECL_COMMON (*node) = 0;\n   else\n     {\n-      warning (\"%qE attribute ignored\", name);\n+      warning (0, \"%qE attribute ignored\", name);\n       *no_add_attrs = true;\n     }\n \n@@ -3994,7 +3994,7 @@ handle_common_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n     DECL_COMMON (*node) = 1;\n   else\n     {\n-      warning (\"%qE attribute ignored\", name);\n+      warning (0, \"%qE attribute ignored\", name);\n       *no_add_attrs = true;\n     }\n \n@@ -4021,7 +4021,7 @@ handle_noreturn_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n \t\t\t     TYPE_READONLY (TREE_TYPE (type)), 1));\n   else\n     {\n-      warning (\"%qE attribute ignored\", name);\n+      warning (0, \"%qE attribute ignored\", name);\n       *no_add_attrs = true;\n     }\n \n@@ -4040,7 +4040,7 @@ handle_noinline_attribute (tree *node, tree name,\n     DECL_UNINLINABLE (*node) = 1;\n   else\n     {\n-      warning (\"%qE attribute ignored\", name);\n+      warning (0, \"%qE attribute ignored\", name);\n       *no_add_attrs = true;\n     }\n \n@@ -4063,7 +4063,7 @@ handle_always_inline_attribute (tree *node, tree name,\n     }\n   else\n     {\n-      warning (\"%qE attribute ignored\", name);\n+      warning (0, \"%qE attribute ignored\", name);\n       *no_add_attrs = true;\n     }\n \n@@ -4087,7 +4087,7 @@ handle_used_attribute (tree *pnode, tree name, tree ARG_UNUSED (args),\n     }\n   else\n     {\n-      warning (\"%qE attribute ignored\", name);\n+      warning (0, \"%qE attribute ignored\", name);\n       *no_add_attrs = true;\n     }\n \n@@ -4113,7 +4113,7 @@ handle_unused_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n \tTREE_USED (decl) = 1;\n       else\n \t{\n-\t  warning (\"%qE attribute ignored\", name);\n+\t  warning (0, \"%qE attribute ignored\", name);\n \t  *no_add_attrs = true;\n \t}\n     }\n@@ -4147,7 +4147,7 @@ handle_const_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n \t\t\t     TREE_THIS_VOLATILE (TREE_TYPE (type))));\n   else\n     {\n-      warning (\"%qE attribute ignored\", name);\n+      warning (0, \"%qE attribute ignored\", name);\n       *no_add_attrs = true;\n     }\n \n@@ -4191,7 +4191,7 @@ handle_transparent_union_attribute (tree *node, tree name,\n     DECL_TRANSPARENT_UNION (decl) = 1;\n   else\n     {\n-      warning (\"%qE attribute ignored\", name);\n+      warning (0, \"%qE attribute ignored\", name);\n       *no_add_attrs = true;\n     }\n \n@@ -4219,7 +4219,7 @@ handle_constructor_attribute (tree *node, tree name,\n     }\n   else\n     {\n-      warning (\"%qE attribute ignored\", name);\n+      warning (0, \"%qE attribute ignored\", name);\n       *no_add_attrs = true;\n     }\n \n@@ -4247,7 +4247,7 @@ handle_destructor_attribute (tree *node, tree name,\n     }\n   else\n     {\n-      warning (\"%qE attribute ignored\", name);\n+      warning (0, \"%qE attribute ignored\", name);\n       *no_add_attrs = true;\n     }\n \n@@ -4266,7 +4266,7 @@ handle_mode_attribute (tree *node, tree name, tree args,\n   *no_add_attrs = true;\n \n   if (TREE_CODE (TREE_VALUE (args)) != IDENTIFIER_NODE)\n-    warning (\"%qE attribute ignored\", name);\n+    warning (0, \"%qE attribute ignored\", name);\n   else\n     {\n       int j;\n@@ -4324,9 +4324,9 @@ handle_mode_attribute (tree *node, tree name, tree args,\n \n \tcase MODE_VECTOR_INT:\n \tcase MODE_VECTOR_FLOAT:\n-\t  warning (\"specifying vector types with __attribute__ ((mode)) \"\n+\t  warning (0, \"specifying vector types with __attribute__ ((mode)) \"\n \t\t   \"is deprecated\");\n-\t  warning (\"use __attribute__ ((vector_size)) instead\");\n+\t  warning (0, \"use __attribute__ ((vector_size)) instead\");\n \t  valid_mode = vector_mode_valid_p (mode);\n \t  break;\n \n@@ -4591,7 +4591,7 @@ handle_alias_attribute (tree *node, tree name, tree args,\n     }\n   else\n     {\n-      warning (\"%qE attribute ignored\", name);\n+      warning (0, \"%qE attribute ignored\", name);\n       *no_add_attrs = true;\n     }\n \n@@ -4615,13 +4615,13 @@ handle_visibility_attribute (tree *node, tree name, tree args,\n     {\n       if (TREE_CODE (*node) != RECORD_TYPE && TREE_CODE (*node) != UNION_TYPE)\n        {\n-         warning (\"%qE attribute ignored on non-class types\", name);\n+         warning (0, \"%qE attribute ignored on non-class types\", name);\n          return NULL_TREE;\n        }\n     }\n   else if (decl_function_context (decl) != 0 || !TREE_PUBLIC (decl))\n     {\n-      warning (\"%qE attribute ignored\", name);\n+      warning (0, \"%qE attribute ignored\", name);\n       return NULL_TREE;\n     }\n \n@@ -4639,7 +4639,7 @@ handle_visibility_attribute (tree *node, tree name, tree args,\n         return NULL_TREE;\n       if (TREE_CODE (decl) == IDENTIFIER_NODE)\n \t{\n-\t   warning (\"%qE attribute ignored on types\",\n+\t   warning (0, \"%qE attribute ignored on types\",\n \t\t    name);\n \t   return NULL_TREE;\n \t}\n@@ -4713,7 +4713,7 @@ handle_tls_model_attribute (tree *node, tree name, tree args,\n \n   if (!DECL_THREAD_LOCAL (decl))\n     {\n-      warning (\"%qE attribute ignored\", name);\n+      warning (0, \"%qE attribute ignored\", name);\n       *no_add_attrs = true;\n     }\n   else\n@@ -4780,7 +4780,7 @@ handle_malloc_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n     DECL_IS_MALLOC (*node) = 1;\n   else\n     {\n-      warning (\"%qE attribute ignored\", name);\n+      warning (0, \"%qE attribute ignored\", name);\n       *no_add_attrs = true;\n     }\n \n@@ -4798,7 +4798,7 @@ handle_returns_twice_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n     DECL_IS_RETURNS_TWICE (*node) = 1;\n   else\n     {\n-      warning (\"%qE attribute ignored\", name);\n+      warning (0, \"%qE attribute ignored\", name);\n       *no_add_attrs = true;\n     }\n \n@@ -4844,7 +4844,7 @@ handle_pure_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n   /* ??? TODO: Support types.  */\n   else\n     {\n-      warning (\"%qE attribute ignored\", name);\n+      warning (0, \"%qE attribute ignored\", name);\n       *no_add_attrs = true;\n     }\n \n@@ -4912,9 +4912,9 @@ handle_deprecated_attribute (tree *node, tree name,\n \t    what = DECL_NAME (TYPE_NAME (type));\n \t}\n       if (what)\n-\twarning (\"%qE attribute ignored for %qE\", name, what);\n+\twarning (0, \"%qE attribute ignored for %qE\", name, what);\n       else\n-\twarning (\"%qE attribute ignored\", name);\n+\twarning (0, \"%qE attribute ignored\", name);\n     }\n \n   return NULL_TREE;\n@@ -4938,7 +4938,7 @@ handle_vector_size_attribute (tree *node, tree name, tree args,\n \n   if (!host_integerp (size, 1))\n     {\n-      warning (\"%qE attribute ignored\", name);\n+      warning (0, \"%qE attribute ignored\", name);\n       return NULL_TREE;\n     }\n \n@@ -5100,7 +5100,7 @@ check_function_sentinel (tree attrs, tree params)\n   if (attr)\n     {\n       if (!params)\n-\twarning (\"missing sentinel in function call\");\n+\twarning (0, \"missing sentinel in function call\");\n       else\n         {\n \t  tree sentinel, end;\n@@ -5122,7 +5122,7 @@ check_function_sentinel (tree attrs, tree params)\n \t    }\n \t  if (pos > 0)\n \t    {\n-\t      warning (\"not enough arguments to fit a sentinel\");\n+\t      warning (0, \"not enough arguments to fit a sentinel\");\n \t      return;\n \t    }\n \n@@ -5136,7 +5136,7 @@ check_function_sentinel (tree attrs, tree params)\n \t  /* Validate the sentinel.  */\n \t  if (!POINTER_TYPE_P (TREE_TYPE (TREE_VALUE (sentinel)))\n \t      || !integer_zerop (TREE_VALUE (sentinel)))\n-\t    warning (\"missing sentinel in function call\");\n+\t    warning (0, \"missing sentinel in function call\");\n \t}\n     }\n }\n@@ -5178,7 +5178,7 @@ check_nonnull_arg (void * ARG_UNUSED (ctx), tree param,\n     return;\n \n   if (integer_zerop (param))\n-    warning (\"null argument where non-null required (argument %lu)\",\n+    warning (0, \"null argument where non-null required (argument %lu)\",\n \t     (unsigned long) param_num);\n }\n \n@@ -5209,7 +5209,7 @@ handle_nothrow_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n   /* ??? TODO: Support types.  */\n   else\n     {\n-      warning (\"%qE attribute ignored\", name);\n+      warning (0, \"%qE attribute ignored\", name);\n       *no_add_attrs = true;\n     }\n \n@@ -5232,7 +5232,7 @@ handle_cleanup_attribute (tree *node, tree name, tree args,\n      we'd be missing too much, since we do have attribute constructor.  */\n   if (TREE_CODE (decl) != VAR_DECL || TREE_STATIC (decl))\n     {\n-      warning (\"%qE attribute ignored\", name);\n+      warning (0, \"%qE attribute ignored\", name);\n       *no_add_attrs = true;\n       return NULL_TREE;\n     }\n@@ -5271,7 +5271,7 @@ handle_warn_unused_result_attribute (tree *node, tree name,\n   /* Ignore the attribute for functions not returning any value.  */\n   if (VOID_TYPE_P (TREE_TYPE (*node)))\n     {\n-      warning (\"%qE attribute ignored\", name);\n+      warning (0, \"%qE attribute ignored\", name);\n       *no_add_attrs = true;\n     }\n \n@@ -5288,7 +5288,7 @@ handle_sentinel_attribute (tree *node, tree name, tree args,\n \n   if (!params)\n     {\n-      warning (\"%qE attribute requires prototypes with named arguments\", name);\n+      warning (0, \"%qE attribute requires prototypes with named arguments\", name);\n       *no_add_attrs = true;\n     }\n   else\n@@ -5298,7 +5298,7 @@ handle_sentinel_attribute (tree *node, tree name, tree args,\n \n       if (VOID_TYPE_P (TREE_VALUE (params)))\n         {\n-\t  warning (\"%qE attribute only applies to variadic functions\", name);\n+\t  warning (0, \"%qE attribute only applies to variadic functions\", name);\n \t  *no_add_attrs = true;\n \t}\n     }\n@@ -5309,14 +5309,14 @@ handle_sentinel_attribute (tree *node, tree name, tree args,\n \n       if (TREE_CODE (position) != INTEGER_CST)\n         {\n-\t  warning (\"requested position is not an integer constant\");\n+\t  warning (0, \"requested position is not an integer constant\");\n \t  *no_add_attrs = true;\n \t}\n       else\n         {\n \t  if (tree_int_cst_lt (position, integer_zero_node))\n \t    {\n-\t      warning (\"requested position is less than zero\");\n+\t      warning (0, \"requested position is less than zero\");\n \t      *no_add_attrs = true;\n \t    }\n \t}\n@@ -5618,11 +5618,11 @@ c_warn_unused_result (tree *top_p)\n       if (lookup_attribute (\"warn_unused_result\", TYPE_ATTRIBUTES (ftype)))\n \t{\n \t  if (fdecl)\n-\t    warning (\"%Hignoring return value of %qD, \"\n+\t    warning (0, \"%Hignoring return value of %qD, \"\n \t\t     \"declared with attribute warn_unused_result\",\n \t\t     EXPR_LOCUS (t), fdecl);\n \t  else\n-\t    warning (\"%Hignoring return value of function \"\n+\t    warning (0, \"%Hignoring return value of function \"\n \t\t     \"declared with attribute warn_unused_result\",\n \t\t     EXPR_LOCUS (t));\n \t}"}, {"sha": "b1309b38d81a08ccdbdad4e0aa1d4a19332e5575", "filename": "gcc/c-decl.c", "status": "modified", "additions": 60, "deletions": 60, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -527,7 +527,7 @@ c_finish_incomplete_decl (tree decl)\n \t  && !DECL_EXTERNAL (decl)\n \t  && TYPE_DOMAIN (type) == 0)\n \t{\n-\t  warning (\"%Jarray %qD assumed to have one element\", decl, decl);\n+\t  warning (0, \"%Jarray %qD assumed to have one element\", decl, decl);\n \n \t  complete_array_type (&TREE_TYPE (decl), NULL_TREE, true);\n \n@@ -732,9 +732,9 @@ pop_scope (void)\n \t  else if (!TREE_USED (p) && warn_unused_label)\n \t    {\n \t      if (DECL_INITIAL (p))\n-\t\twarning (\"%Jlabel %qD defined but not used\", p, p);\n+\t\twarning (0, \"%Jlabel %qD defined but not used\", p, p);\n \t      else\n-\t\twarning (\"%Jlabel %qD declared but not defined\", p, p);\n+\t\twarning (0, \"%Jlabel %qD declared but not defined\", p, p);\n \t    }\n \t  /* Labels go in BLOCK_VARS.  */\n \t  TREE_CHAIN (p) = BLOCK_VARS (block);\n@@ -783,7 +783,7 @@ pop_scope (void)\n \t      && !DECL_ARTIFICIAL (p)\n \t      && scope != file_scope\n \t      && scope != external_scope) \n-\t    warning (\"%Junused variable %qD\", p, p);\n+\t    warning (0, \"%Junused variable %qD\", p, p);\n \n \t  if (b->inner_comp)\n \t    {\n@@ -1091,7 +1091,7 @@ validate_proto_after_old_defn (tree newdecl, tree newtype, tree oldtype)\n \n   /* If we get here, no errors were found, but do issue a warning\n      for this poor-style construct.  */\n-  warning (\"%Jprototype for %qD follows non-prototype definition\",\n+  warning (0, \"%Jprototype for %qD follows non-prototype definition\",\n \t   newdecl, newdecl);\n   return true;\n #undef END_OF_ARGLIST\n@@ -1152,10 +1152,10 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \t  locate_old_decl (olddecl, error);\n \t}\n       else if (TREE_PUBLIC (newdecl))\n-\twarning (\"%Jbuilt-in function %qD declared as non-function\",\n+\twarning (0, \"%Jbuilt-in function %qD declared as non-function\",\n \t\t newdecl, newdecl);\n       else if (warn_shadow)\n-\twarning (\"%Jdeclaration of %qD shadows a built-in function\",\n+\twarning (0, \"%Jdeclaration of %qD shadows a built-in function\",\n \t\t newdecl, newdecl);\n       return false;\n     }\n@@ -1185,7 +1185,7 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \t      /* If types don't match for a built-in, throw away the\n \t\t built-in.  No point in calling locate_old_decl here, it\n \t\t won't print anything.  */\n-\t      warning (\"%Jconflicting types for built-in function %qD\",\n+\t      warning (0, \"%Jconflicting types for built-in function %qD\",\n \t\t       newdecl, newdecl);\n \t      return false;\n \t    }\n@@ -1271,7 +1271,7 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \t\t  && !TYPE_ARG_TYPES (TREE_TYPE (newdecl)))))\n \t{\n \t  if (warn_shadow)\n-\t    warning (\"%Jdeclaration of %qD shadows a built-in function\",\n+\t    warning (0, \"%Jdeclaration of %qD shadows a built-in function\",\n \t\t     newdecl, newdecl);\n \t  /* Discard the old built-in function.  */\n \t  return false;\n@@ -1368,7 +1368,7 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \t    }\n \t  else if (warn_traditional)\n \t    {\n-\t      warning (\"%Jnon-static declaration of %qD follows \"\n+\t      warning (0, \"%Jnon-static declaration of %qD follows \"\n \t\t       \"static declaration\", newdecl, newdecl);\n \t      warned = true;\n \t    }\n@@ -1421,7 +1421,7 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \t\t}\n \t      else if (warn_traditional)\n \t\t{\n-\t\t  warning (\"%Jnon-static declaration of %qD follows \"\n+\t\t  warning (0, \"%Jnon-static declaration of %qD follows \"\n \t\t\t   \"static declaration\", newdecl, newdecl);\n \t\t  warned = true;\n \t\t}\n@@ -1470,7 +1470,7 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n   if (DECL_VISIBILITY_SPECIFIED (newdecl) && DECL_VISIBILITY_SPECIFIED (olddecl)\n       && DECL_VISIBILITY (newdecl) != DECL_VISIBILITY (olddecl))\n     {\n-      warning (\"%Jredeclaration of %qD with different visibility \"\n+      warning (0, \"%Jredeclaration of %qD with different visibility \"\n \t       \"(old visibility preserved)\", newdecl, newdecl);\n       warned = true;\n     }\n@@ -1481,14 +1481,14 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n       if (DECL_DECLARED_INLINE_P (newdecl)\n \t  && lookup_attribute (\"noinline\", DECL_ATTRIBUTES (olddecl)))\n \t{\n-\t  warning (\"%Jinline declaration of %qD follows \"\n+\t  warning (0, \"%Jinline declaration of %qD follows \"\n \t\t   \"declaration with attribute noinline\", newdecl, newdecl);\n \t  warned = true;\n \t}\n       else if (DECL_DECLARED_INLINE_P (olddecl)\n \t       && lookup_attribute (\"noinline\", DECL_ATTRIBUTES (newdecl)))\n \t{\n-\t  warning (\"%Jdeclaration of %qD with attribute noinline follows \"\n+\t  warning (0, \"%Jdeclaration of %qD with attribute noinline follows \"\n \t\t   \"inline declaration \", newdecl, newdecl);\n \t  warned = true;\n \t}\n@@ -1503,13 +1503,13 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \t{\n \t  if (TREE_USED (olddecl))\n \t    {\n-\t      warning (\"%J%qD declared inline after being called\",\n+\t      warning (0, \"%J%qD declared inline after being called\",\n \t\t       olddecl, olddecl);\n \t      warned = true;\n \t    }\n \t  else if (DECL_INITIAL (olddecl))\n \t    {\n-\t      warning (\"%J%qD declared inline after its definition\",\n+\t      warning (0, \"%J%qD declared inline after its definition\",\n \t\t       olddecl, olddecl);\n \t      warned = true;\n \t    }\n@@ -1553,13 +1553,13 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n       && !(TREE_CODE (newdecl) == PARM_DECL\n \t   && TREE_ASM_WRITTEN (olddecl) && !TREE_ASM_WRITTEN (newdecl)))\n     {\n-      warning (\"%Jredundant redeclaration of %qD\", newdecl, newdecl);\n+      warning (0, \"%Jredundant redeclaration of %qD\", newdecl, newdecl);\n       warned = true;\n     }\n \n   /* Report location of previous decl/defn in a consistent manner.  */\n   if (warned || pedwarned)\n-    locate_old_decl (olddecl, pedwarned ? pedwarn : warning);\n+    locate_old_decl (olddecl, pedwarned ? pedwarn : warning0);\n \n   return retval;\n }\n@@ -1865,28 +1865,28 @@ warn_if_shadowing (tree new_decl)\n \n \tif (old_decl == error_mark_node)\n \t  {\n-\t    warning (\"%Jdeclaration of %qD shadows previous non-variable\",\n+\t    warning (0, \"%Jdeclaration of %qD shadows previous non-variable\",\n \t\t     new_decl, new_decl);\n \t    break;\n \t  }\n \telse if (TREE_CODE (old_decl) == PARM_DECL)\n-\t  warning (\"%Jdeclaration of %qD shadows a parameter\",\n+\t  warning (0, \"%Jdeclaration of %qD shadows a parameter\",\n \t\t   new_decl, new_decl);\n \telse if (DECL_FILE_SCOPE_P (old_decl))\n-\t  warning (\"%Jdeclaration of %qD shadows a global declaration\",\n+\t  warning (0, \"%Jdeclaration of %qD shadows a global declaration\",\n \t\t   new_decl, new_decl);\n \telse if (TREE_CODE (old_decl) == FUNCTION_DECL\n \t\t && DECL_BUILT_IN (old_decl))\n \t  {\n-\t    warning (\"%Jdeclaration of %qD shadows a built-in function\",\n+\t    warning (0, \"%Jdeclaration of %qD shadows a built-in function\",\n \t\t     new_decl, new_decl);\n \t    break;\n \t  }\n \telse\n-\t  warning (\"%Jdeclaration of %qD shadows a previous local\",\n+\t  warning (0, \"%Jdeclaration of %qD shadows a previous local\",\n \t\t   new_decl, new_decl);\n \n-\twarning (\"%Jshadowed declaration is here\", old_decl);\n+\twarning (0, \"%Jshadowed declaration is here\", old_decl);\n \n \tbreak;\n       }\n@@ -2046,7 +2046,7 @@ pushdecl (tree x)\n       if (warn_nested_externs\n \t  && scope != file_scope\n \t  && !DECL_IN_SYSTEM_HEADER (x))\n-\twarning (\"nested extern declaration of %qD\", x);\n+\twarning (0, \"nested extern declaration of %qD\", x);\n \n       while (b && !B_IN_EXTERNAL_SCOPE (b))\n \t{\n@@ -2201,7 +2201,7 @@ implicit_decl_warning (tree id, tree olddecl)\n   switch (mesg_implicit_function_declaration)\n     {\n     case 0: return;\n-    case 1: diag = warning; break;\n+    case 1: diag = warning0; break;\n     case 2: diag = error;   break;\n     default: gcc_unreachable ();\n     }\n@@ -2267,7 +2267,7 @@ implicitly_declare (tree functionid)\n \t\t\t\t\t\t      (TREE_TYPE (decl)));\n \t      if (!comptypes (newtype, TREE_TYPE (decl)))\n \t\t{\n-\t\t  warning (\"incompatible implicit declaration of built-in\"\n+\t\t  warning (0, \"incompatible implicit declaration of built-in\"\n \t\t\t   \" function %qD\", decl);\n \t\t  newtype = TREE_TYPE (decl);\n \t\t}\n@@ -2482,7 +2482,7 @@ define_label (location_t location, tree name)\n     }\n \n   if (warn_traditional && !in_system_header && lookup_name (name))\n-    warning (\"%Htraditional C lacks a separate namespace for labels, \"\n+    warning (0, \"%Htraditional C lacks a separate namespace for labels, \"\n              \"identifier %qE conflicts\", &location, name);\n \n   nlist_se = XOBNEW (&parser_obstack, struct c_label_list);\n@@ -2844,21 +2844,21 @@ shadow_tag_warned (const struct c_declspecs *declspecs, int warned)\n \n   if (!warned && !in_system_header && declspecs->storage_class != csc_none)\n     {\n-      warning (\"useless storage class specifier in empty declaration\");\n+      warning (0, \"useless storage class specifier in empty declaration\");\n       warned = 2;\n     }\n \n   if (!warned && !in_system_header && declspecs->thread_p)\n     {\n-      warning (\"useless %<__thread%> in empty declaration\");\n+      warning (0, \"useless %<__thread%> in empty declaration\");\n       warned = 2;\n     }\n \n   if (!warned && !in_system_header && (declspecs->const_p\n \t\t\t\t       || declspecs->volatile_p\n \t\t\t\t       || declspecs->restrict_p))\n     {\n-      warning (\"useless type qualifier in empty declaration\");\n+      warning (0, \"useless type qualifier in empty declaration\");\n       warned = 2;\n     }\n \n@@ -2937,7 +2937,7 @@ build_array_declarator (tree expr, struct c_declspecs *quals, bool static_p,\n \tpedwarn (\"ISO C90 does not support %<[*]%> array declarators\");\n     }\n   if (vla_unspec_p)\n-    warning (\"GCC does not yet properly implement %<[*]%> array declarators\");\n+    warning (0, \"GCC does not yet properly implement %<[*]%> array declarators\");\n   return declarator;\n }\n \n@@ -3015,7 +3015,7 @@ start_decl (struct c_declarator *declarator, struct c_declspecs *declspecs,\n \n   if (warn_main > 0 && TREE_CODE (decl) != FUNCTION_DECL\n       && MAIN_NAME_P (DECL_NAME (decl)))\n-    warning (\"%J%qD is usually a function\", decl, decl);\n+    warning (0, \"%J%qD is usually a function\", decl, decl);\n \n   if (initialized)\n     /* Is it valid for this decl to have an initializer at all?\n@@ -3136,7 +3136,7 @@ start_decl (struct c_declarator *declarator, struct c_declspecs *declspecs,\n       && DECL_DECLARED_INLINE_P (decl)\n       && DECL_UNINLINABLE (decl)\n       && lookup_attribute (\"noinline\", DECL_ATTRIBUTES (decl)))\n-    warning (\"%Jinline function %qD given attribute noinline\", decl, decl);\n+    warning (0, \"%Jinline function %qD given attribute noinline\", decl, decl);\n \n   /* Add this decl to the current scope.\n      TEM may equal DECL or it may be a previous decl of the same name.  */\n@@ -3307,7 +3307,7 @@ finish_decl (tree decl, tree init, tree asmspec_tree)\n \t      && TREE_CODE (decl) == VAR_DECL\n \t      && !C_DECL_REGISTER (decl)\n \t      && !TREE_STATIC (decl))\n-\t    warning (\"%Jignoring asm-specifier for non-static local \"\n+\t    warning (0, \"%Jignoring asm-specifier for non-static local \"\n \t\t     \"variable %qD\", decl, decl);\n \t  else if (C_DECL_REGISTER (decl))\n \t    change_decl_assembler_name (decl, get_identifier (asmspec));\n@@ -3652,7 +3652,7 @@ check_bitfield_type_and_width (tree *type, tree *width, const char *orig_name)\n       if (!lt\n           || w < min_precision (lt->enum_min, TYPE_UNSIGNED (*type))\n \t  || w < min_precision (lt->enum_max, TYPE_UNSIGNED (*type)))\n-\twarning (\"%qs is narrower than values of its type\", name);\n+\twarning (0, \"%qs is narrower than values of its type\", name);\n     }\n }\n \f\n@@ -3870,7 +3870,7 @@ grokdeclarator (const struct c_declarator *declarator,\n     {\n       /* 'extern' with initialization is invalid if not at file scope.  */\n       if (current_scope == file_scope)\n-\twarning (\"%qs initialized and declared %<extern%>\", name);\n+\twarning (0, \"%qs initialized and declared %<extern%>\", name);\n       else\n \terror (\"%qs has both %<extern%> and initializer\", name);\n     }\n@@ -4183,7 +4183,7 @@ grokdeclarator (const struct c_declarator *declarator,\n \t\tif (VOID_TYPE_P (type) && really_funcdef)\n \t\t  pedwarn (\"function definition has qualified void return type\");\n \t\telse if (warn_return_type)\n-\t\t  warning (\"type qualifiers ignored on function return type\");\n+\t\t  warning (0, \"type qualifiers ignored on function return type\");\n \t\t\n \t\ttype = c_build_qualified_type (type, type_quals);\n \t      }\n@@ -4344,7 +4344,7 @@ grokdeclarator (const struct c_declarator *declarator,\n \n \t    /* We don't yet implement attributes in this context.  */\n \t    if (array_ptr_attrs != NULL_TREE)\n-\t      warning (\"attributes in parameter array declarator ignored\");\n+\t      warning (0, \"attributes in parameter array declarator ignored\");\n \n \t    size_varies = 0;\n \t  }\n@@ -4448,7 +4448,7 @@ grokdeclarator (const struct c_declarator *declarator,\n \t   that the function does not return.  */\n \tif ((type_quals & TYPE_QUAL_VOLATILE)\n \t    && !VOID_TYPE_P (TREE_TYPE (TREE_TYPE (decl))))\n-\t  warning (\"%<noreturn%> function returns non-void value\");\n+\t  warning (0, \"%<noreturn%> function returns non-void value\");\n \n \t/* Every function declaration is an external reference\n \t   (DECL_EXTERNAL) except for those which are not at file\n@@ -4626,7 +4626,7 @@ grokparms (struct c_arg_info *arg_info, bool funcdef_flag)\n \n   if (warn_strict_prototypes && arg_types == 0 && !funcdef_flag\n       && !in_system_header)\n-    warning (\"function declaration isn%'t a prototype\");\n+    warning (0, \"function declaration isn%'t a prototype\");\n \n   if (arg_types == error_mark_node)\n     return 0;  /* don't set TYPE_ARG_TYPES in this case */\n@@ -4679,10 +4679,10 @@ grokparms (struct c_arg_info *arg_info, bool funcdef_flag)\n \t      else if (VOID_TYPE_P (type))\n \t\t{\n \t\t  if (DECL_NAME (parm))\n-\t\t    warning (\"%Jparameter %u (%qD) has void type\",\n+\t\t    warning (0, \"%Jparameter %u (%qD) has void type\",\n \t\t\t     parm, parmno, parm);\n \t\t  else\n-\t\t    warning (\"%Jparameter %u has void type\",\n+\t\t    warning (0, \"%Jparameter %u has void type\",\n \t\t\t     parm, parmno);\n \t\t}\n \t    }\n@@ -4817,16 +4817,16 @@ get_parm_info (bool ellipsis)\n \t    {\n \t      if (b->id)\n \t\t/* The %s will be one of 'struct', 'union', or 'enum'.  */\n-\t\twarning (\"%<%s %E%> declared inside parameter list\",\n+\t\twarning (0, \"%<%s %E%> declared inside parameter list\",\n \t\t\t keyword, b->id);\n \t      else\n \t\t/* The %s will be one of 'struct', 'union', or 'enum'.  */\n-\t\twarning (\"anonymous %s declared inside parameter list\",\n+\t\twarning (0, \"anonymous %s declared inside parameter list\",\n \t\t\t keyword);\n \n \t      if (!explained_incomplete_types)\n \t\t{\n-\t\t  warning (\"its scope is only this definition or declaration,\"\n+\t\t  warning (0, \"its scope is only this definition or declaration,\"\n \t\t\t   \" which is probably not what you want\");\n \t\t  explained_incomplete_types = true;\n \t\t}\n@@ -5332,7 +5332,7 @@ finish_struct (tree t, tree fieldlist, tree attributes)\n       && TYPE_MODE (t) != DECL_MODE (TYPE_FIELDS (t)))\n     {\n       TYPE_TRANSPARENT_UNION (t) = 0;\n-      warning (\"union cannot be made transparent\");\n+      warning (0, \"union cannot be made transparent\");\n     }\n \n   /* If this structure or union completes the type of any previous\n@@ -5473,7 +5473,7 @@ finish_enum (tree enumtype, tree values, tree attributes)\n       tem = c_common_type_for_size (precision, unsign);\n       if (tem == NULL)\n \t{\n-\t  warning (\"enumeration values exceed range of largest integer\");\n+\t  warning (0, \"enumeration values exceed range of largest integer\");\n \t  tem = long_long_integer_type_node;\n \t}\n     }\n@@ -5693,7 +5693,7 @@ start_function (struct c_declspecs *declspecs, struct c_declarator *declarator,\n   if (DECL_DECLARED_INLINE_P (decl1)\n       && DECL_UNINLINABLE (decl1)\n       && lookup_attribute (\"noinline\", DECL_ATTRIBUTES (decl1)))\n-    warning (\"%Jinline function %qD given attribute noinline\", decl1, decl1);\n+    warning (0, \"%Jinline function %qD given attribute noinline\", decl1, decl1);\n \n   announce_function (decl1);\n \n@@ -5731,37 +5731,37 @@ start_function (struct c_declspecs *declspecs, struct c_declarator *declarator,\n       && old_decl != error_mark_node\n       && TYPE_ARG_TYPES (TREE_TYPE (decl1)) == 0\n       && C_DECL_ISNT_PROTOTYPE (old_decl))\n-    warning (\"function declaration isn%'t a prototype\");\n+    warning (0, \"function declaration isn%'t a prototype\");\n   /* Optionally warn of any global def with no previous prototype.  */\n   else if (warn_missing_prototypes\n \t   && old_decl != error_mark_node\n \t   && TREE_PUBLIC (decl1)\n \t   && !MAIN_NAME_P (DECL_NAME (decl1))\n \t   && C_DECL_ISNT_PROTOTYPE (old_decl))\n-    warning (\"%Jno previous prototype for %qD\", decl1, decl1);\n+    warning (0, \"%Jno previous prototype for %qD\", decl1, decl1);\n   /* Optionally warn of any def with no previous prototype\n      if the function has already been used.  */\n   else if (warn_missing_prototypes\n \t   && old_decl != 0\n \t   && old_decl != error_mark_node\n \t   && TREE_USED (old_decl)\n \t   && TYPE_ARG_TYPES (TREE_TYPE (old_decl)) == 0)\n-    warning (\"%J%qD was used with no prototype before its definition\",\n+    warning (0, \"%J%qD was used with no prototype before its definition\",\n \t     decl1, decl1);\n   /* Optionally warn of any global def with no previous declaration.  */\n   else if (warn_missing_declarations\n \t   && TREE_PUBLIC (decl1)\n \t   && old_decl == 0\n \t   && !MAIN_NAME_P (DECL_NAME (decl1)))\n-    warning (\"%Jno previous declaration for %qD\", decl1, decl1);\n+    warning (0, \"%Jno previous declaration for %qD\", decl1, decl1);\n   /* Optionally warn of any def with no previous declaration\n      if the function has already been used.  */\n   else if (warn_missing_declarations\n \t   && old_decl != 0\n \t   && old_decl != error_mark_node\n \t   && TREE_USED (old_decl)\n \t   && C_DECL_IMPLICIT (old_decl))\n-    warning (\"%J%qD was used with no declaration before its definition\",\n+    warning (0, \"%J%qD was used with no declaration before its definition\",\n \t     decl1, decl1);\n \n   /* This is a definition, not a reference.\n@@ -5899,7 +5899,7 @@ store_parm_decls_newstyle (tree fndecl, const struct c_arg_info *arg_info)\n      its parameter list).  */\n   else if (warn_traditional && !in_system_header && !current_function_scope\n \t   && arg_info->types != error_mark_node)\n-    warning (\"%Jtraditional C rejects ISO C style function definitions\",\n+    warning (0, \"%Jtraditional C rejects ISO C style function definitions\",\n \t     fndecl);\n \n   /* Now make all the parameter declarations visible in the function body.\n@@ -5951,7 +5951,7 @@ store_parm_decls_oldstyle (tree fndecl, const struct c_arg_info *arg_info)\n #endif\n \n   if (warn_old_style_definition && !in_system_header)\n-    warning (\"%Jold-style function definition\", fndecl);\n+    warning (0, \"%Jold-style function definition\", fndecl);\n \n   /* Match each formal parameter name with its declaration.  Save each\n      decl in the appropriate TREE_PURPOSE slot of the parmids chain.  */\n@@ -6000,7 +6000,7 @@ store_parm_decls_oldstyle (tree fndecl, const struct c_arg_info *arg_info)\n \t  if (flag_isoc99)\n \t    pedwarn (\"%Jtype of %qD defaults to %<int%>\", decl, decl);\n \t  else if (extra_warnings)\n-\t    warning (\"%Jtype of %qD defaults to %<int%>\", decl, decl);\n+\t    warning (0, \"%Jtype of %qD defaults to %<int%>\", decl, decl);\n \t}\n \n       TREE_PURPOSE (parm) = decl;\n@@ -6332,14 +6332,14 @@ finish_function (void)\n       /* Normally, with -Wreturn-type, flow will complain.  Unless we're an\n \t inline function, as we might never be compiled separately.  */\n       && DECL_INLINE (fndecl))\n-    warning (\"no return statement in function returning non-void\");\n+    warning (0, \"no return statement in function returning non-void\");\n \n   /* With just -Wextra, complain only if function returns both with\n      and without a value.  */\n   if (extra_warnings\n       && current_function_returns_value\n       && current_function_returns_null)\n-    warning (\"this function may return with or without a value\");\n+    warning (0, \"this function may return with or without a value\");\n \n   /* Store the end of the function, so that we get good line number\n      info for the epilogue.  */\n@@ -7087,7 +7087,7 @@ declspecs_add_scspec (struct c_declspecs *specs, tree scspec)\n \t      && C_IS_RESERVED_WORD (scspec));\n   i = C_RID_CODE (scspec);\n   if (extra_warnings && specs->non_sc_seen_p)\n-    warning (\"%qE is not at beginning of declaration\", scspec);\n+    warning (0, \"%qE is not at beginning of declaration\", scspec);\n   switch (i)\n     {\n     case RID_INLINE:"}, {"sha": "7db8add15d313803aa4d9258e721c843334c619f", "filename": "gcc/c-format.c", "status": "modified", "additions": 57, "deletions": 57, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-format.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -194,7 +194,7 @@ decode_format_attr (tree args, function_format_info *info, int validated_p)\n       if (info->format_type == format_type_error)\n \t{\n \t  gcc_assert (!validated_p);\n-\t  warning (\"%qE is an unrecognized format function type\",\n+\t  warning (0, \"%qE is an unrecognized format function type\",\n \t\t   format_type_id);\n \t  return false;\n \t}\n@@ -833,7 +833,7 @@ check_function_format (tree attrs, tree params)\n \t\t\tbreak;\n \t\t    }\n \t\t  if (args != 0)\n-\t\t    warning (\"function might be possible candidate for %qs format attribute\",\n+\t\t    warning (0, \"function might be possible candidate for %qs format attribute\",\n \t\t\t     format_types[info.format_type].name);\n \t\t}\n \t    }\n@@ -924,7 +924,7 @@ maybe_read_dollar_number (const char **format,\n     {\n       if (dollar_needed)\n \t{\n-\t  warning (\"missing $ operand number in format\");\n+\t  warning (0, \"missing $ operand number in format\");\n \t  return -1;\n \t}\n       else\n@@ -945,7 +945,7 @@ maybe_read_dollar_number (const char **format,\n     {\n       if (dollar_needed)\n \t{\n-\t  warning (\"missing $ operand number in format\");\n+\t  warning (0, \"missing $ operand number in format\");\n \t  return -1;\n \t}\n       else\n@@ -954,14 +954,14 @@ maybe_read_dollar_number (const char **format,\n   *format = fcp + 1;\n   if (pedantic && !dollar_format_warned)\n     {\n-      warning (\"%s does not support %%n$ operand number formats\",\n+      warning (0, \"%s does not support %%n$ operand number formats\",\n \t       C_STD_NAME (STD_EXT));\n       dollar_format_warned = 1;\n     }\n   if (overflow_flag || argnum == 0\n       || (dollar_first_arg_num && argnum > dollar_arguments_count))\n     {\n-      warning (\"operand number out of range in format\");\n+      warning (0, \"operand number out of range in format\");\n       return -1;\n     }\n   if (argnum > dollar_max_arg_used)\n@@ -984,7 +984,7 @@ maybe_read_dollar_number (const char **format,\n       && dollar_arguments_used[argnum - 1] == 1)\n     {\n       dollar_arguments_used[argnum - 1] = 2;\n-      warning (\"format argument %d used more than once in %s format\",\n+      warning (0, \"format argument %d used more than once in %s format\",\n \t       argnum, fki->name);\n     }\n   else\n@@ -1016,7 +1016,7 @@ avoid_dollar_number (const char *format)\n     format++;\n   if (*format == '$')\n     {\n-      warning (\"$ operand number used after format without operand number\");\n+      warning (0, \"$ operand number used after format without operand number\");\n       return true;\n     }\n   return false;\n@@ -1046,7 +1046,7 @@ finish_dollar_format_checking (format_check_results *res, int pointer_gap_ok)\n \t\t\t\t || dollar_arguments_pointer_p[i]))\n \t    found_pointer_gap = true;\n \t  else\n-\t    warning (\"format argument %d unused before used argument %d in $-style format\",\n+\t    warning (0, \"format argument %d unused before used argument %d in $-style format\",\n \t\t     i + 1, dollar_max_arg_used);\n \t}\n     }\n@@ -1141,7 +1141,7 @@ check_format_info (function_format_info *info, tree params)\n \t  /* For strftime-like formats, warn for not checking the format\n \t     string; but there are no arguments to check.  */\n \t  if (warn_format_nonliteral)\n-\t    warning (\"format not a string literal, format string not checked\");\n+\t    warning (0, \"format not a string literal, format string not checked\");\n \t}\n       else if (info->first_arg_num != 0)\n \t{\n@@ -1155,9 +1155,9 @@ check_format_info (function_format_info *info, tree params)\n \t      ++arg_num;\n \t    }\n \t  if (params == 0 && (warn_format_nonliteral || warn_format_security))\n-\t    warning (\"format not a string literal and no format arguments\");\n+\t    warning (0, \"format not a string literal and no format arguments\");\n \t  else if (warn_format_nonliteral)\n-\t    warning (\"format not a string literal, argument types not checked\");\n+\t    warning (0, \"format not a string literal, argument types not checked\");\n \t}\n     }\n \n@@ -1170,20 +1170,20 @@ check_format_info (function_format_info *info, tree params)\n      case of extra format arguments.  */\n   if (res.number_extra_args > 0 && res.number_non_literal == 0\n       && res.number_other == 0 && warn_format_extra_args)\n-    warning (\"too many arguments for format\");\n+    warning (0, \"too many arguments for format\");\n   if (res.number_dollar_extra_args > 0 && res.number_non_literal == 0\n       && res.number_other == 0 && warn_format_extra_args)\n-    warning (\"unused arguments in $-style format\");\n+    warning (0, \"unused arguments in $-style format\");\n   if (res.number_empty > 0 && res.number_non_literal == 0\n       && res.number_other == 0 && warn_format_zero_length)\n-    warning (\"zero-length %s format string\",\n+    warning (0, \"zero-length %s format string\",\n \t     format_types[info->format_type].name);\n \n   if (res.number_wide > 0)\n-    warning (\"format is a wide character string\");\n+    warning (0, \"format is a wide character string\");\n \n   if (res.number_unterminated > 0)\n-    warning (\"unterminated format string\");\n+    warning (0, \"unterminated format string\");\n }\n \n /* Callback from check_function_arguments_recurse to check a\n@@ -1393,7 +1393,7 @@ check_format_info_main (format_check_results *res,\n       if (*format_chars == 0)\n \t{\n \t  if (format_chars - orig_format_chars != format_length)\n-\t    warning (\"embedded %<\\\\0%> in format\");\n+\t    warning (0, \"embedded %<\\\\0%> in format\");\n \t  if (info->first_arg_num != 0 && params != 0\n \t      && has_operand_number <= 0)\n \t    {\n@@ -1408,7 +1408,7 @@ check_format_info_main (format_check_results *res,\n \tcontinue;\n       if (*format_chars == 0)\n \t{\n-\t  warning (\"spurious trailing %<%%%> in format\");\n+\t  warning (0, \"spurious trailing %<%%%> in format\");\n \t  continue;\n \t}\n       if (*format_chars == '%')\n@@ -1452,7 +1452,7 @@ check_format_info_main (format_check_results *res,\n \t\t\t\t\t\t     *format_chars, NULL);\n \t  if (strchr (flag_chars, *format_chars) != 0)\n \t    {\n-\t      warning (\"repeated %s in format\", _(s->name));\n+\t      warning (0, \"repeated %s in format\", _(s->name));\n \t    }\n \t  else\n \t    {\n@@ -1465,7 +1465,7 @@ check_format_info_main (format_check_results *res,\n \t      ++format_chars;\n \t      if (*format_chars == 0)\n \t\t{\n-\t\t  warning (\"missing fill character at end of strfmon format\");\n+\t\t  warning (0, \"missing fill character at end of strfmon format\");\n \t\t  return;\n \t\t}\n \t    }\n@@ -1509,7 +1509,7 @@ check_format_info_main (format_check_results *res,\n \t\t{\n \t\t  if (params == 0)\n \t\t    {\n-\t\t      warning (\"too few arguments for format\");\n+\t\t      warning (0, \"too few arguments for format\");\n \t\t      return;\n \t\t    }\n \t\t  cur_param = TREE_VALUE (params);\n@@ -1550,7 +1550,7 @@ check_format_info_main (format_check_results *res,\n \t\t}\n \t      if (found_width && !non_zero_width_char &&\n \t\t  (fki->flags & (int) FMT_FLAG_ZERO_WIDTH_BAD))\n-\t\twarning (\"zero width in %s format\", fki->name);\n+\t\twarning (0, \"zero width in %s format\", fki->name);\n \t      if (found_width)\n \t\t{\n \t\t  i = strlen (flag_chars);\n@@ -1568,7 +1568,7 @@ check_format_info_main (format_check_results *res,\n \t  flag_chars[i++] = fki->left_precision_char;\n \t  flag_chars[i] = 0;\n \t  if (!ISDIGIT (*format_chars))\n-\t    warning (\"empty left precision in %s format\", fki->name);\n+\t    warning (0, \"empty left precision in %s format\", fki->name);\n \t  while (ISDIGIT (*format_chars))\n \t    ++format_chars;\n \t}\n@@ -1611,7 +1611,7 @@ check_format_info_main (format_check_results *res,\n \t\t{\n \t\t  if (params == 0)\n \t\t    {\n-\t\t      warning (\"too few arguments for format\");\n+\t\t      warning (0, \"too few arguments for format\");\n \t\t      return;\n \t\t    }\n \t\t  cur_param = TREE_VALUE (params);\n@@ -1641,7 +1641,7 @@ check_format_info_main (format_check_results *res,\n \t    {\n \t      if (!(fki->flags & (int) FMT_FLAG_EMPTY_PREC_OK)\n \t\t  && !ISDIGIT (*format_chars))\n-\t\twarning (\"empty precision in %s format\", fki->name);\n+\t\twarning (0, \"empty precision in %s format\", fki->name);\n \t      while (ISDIGIT (*format_chars))\n \t\t++format_chars;\n \t    }\n@@ -1680,7 +1680,7 @@ check_format_info_main (format_check_results *res,\n \t    {\n \t      /* Warn if the length modifier is non-standard.  */\n \t      if (ADJ_STD (length_chars_std) > C_STD_VER)\n-\t\twarning (\"%s does not support the %qs %s length modifier\",\n+\t\twarning (0, \"%s does not support the %qs %s length modifier\",\n \t\t\t C_STD_NAME (length_chars_std), length_chars,\n \t\t\t fki->name);\n \t    }\n@@ -1696,7 +1696,7 @@ check_format_info_main (format_check_results *res,\n \t\t{\n \t\t  const format_flag_spec *s = get_flag_spec (flag_specs,\n \t\t\t\t\t\t\t     *format_chars, NULL);\n-\t\t  warning (\"repeated %s in format\", _(s->name));\n+\t\t  warning (0, \"repeated %s in format\", _(s->name));\n \t\t}\n \t      else\n \t\t{\n@@ -1730,7 +1730,7 @@ check_format_info_main (format_check_results *res,\n \t  || (!(fki->flags & (int) FMT_FLAG_FANCY_PERCENT_OK)\n \t      && format_char == '%'))\n \t{\n-\t  warning (\"conversion lacks type at end of format\");\n+\t  warning (0, \"conversion lacks type at end of format\");\n \t  continue;\n \t}\n       format_chars++;\n@@ -1741,17 +1741,17 @@ check_format_info_main (format_check_results *res,\n       if (fci->format_chars == 0)\n \t{\n           if (ISGRAPH (format_char))\n-\t    warning (\"unknown conversion type character %qc in format\",\n+\t    warning (0, \"unknown conversion type character %qc in format\",\n \t\t     format_char);\n \t  else\n-\t    warning (\"unknown conversion type character 0x%x in format\",\n+\t    warning (0, \"unknown conversion type character 0x%x in format\",\n \t\t     format_char);\n \t  continue;\n \t}\n       if (pedantic)\n \t{\n \t  if (ADJ_STD (fci->std) > C_STD_VER)\n-\t    warning (\"%s does not support the %<%%%c%> %s format\",\n+\t    warning (0, \"%s does not support the %<%%%c%> %s format\",\n \t\t     C_STD_NAME (fci->std), format_char, fki->name);\n \t}\n \n@@ -1767,7 +1767,7 @@ check_format_info_main (format_check_results *res,\n \t      continue;\n \t    if (strchr (fci->flag_chars, flag_chars[i]) == 0)\n \t      {\n-\t\twarning (\"%s used with %<%%%c%> %s format\",\n+\t\twarning (0, \"%s used with %<%%%c%> %s format\",\n \t\t\t _(s->name), format_char, fki->name);\n \t\td++;\n \t\tcontinue;\n@@ -1776,7 +1776,7 @@ check_format_info_main (format_check_results *res,\n \t      {\n \t\tconst format_flag_spec *t;\n \t\tif (ADJ_STD (s->std) > C_STD_VER)\n-\t\t  warning (\"%s does not support %s\",\n+\t\t  warning (0, \"%s does not support %s\",\n \t\t\t   C_STD_NAME (s->std), _(s->long_name));\n \t\tt = get_flag_spec (flag_specs, flag_chars[i], fci->flags2);\n \t\tif (t != NULL && ADJ_STD (t->std) > ADJ_STD (s->std))\n@@ -1785,7 +1785,7 @@ check_format_info_main (format_check_results *res,\n \t\t\t\t\t     ? t->long_name\n \t\t\t\t\t     : s->long_name);\n \t\t    if (ADJ_STD (t->std) > C_STD_VER)\n-\t\t      warning (\"%s does not support %s with the %<%%%c%> %s format\",\n+\t\t      warning (0, \"%s does not support %s with the %<%%%c%> %s format\",\n \t\t\t       C_STD_NAME (t->std), _(long_name),\n \t\t\t       format_char, fki->name);\n \t\t  }\n@@ -1818,21 +1818,21 @@ check_format_info_main (format_check_results *res,\n \t  if (bad_flag_pairs[i].ignored)\n \t    {\n \t      if (bad_flag_pairs[i].predicate != 0)\n-\t\twarning (\"%s ignored with %s and %<%%%c%> %s format\",\n+\t\twarning (0, \"%s ignored with %s and %<%%%c%> %s format\",\n \t\t\t _(s->name), _(t->name), format_char,\n \t\t\t fki->name);\n \t      else\n-\t\twarning (\"%s ignored with %s in %s format\",\n+\t\twarning (0, \"%s ignored with %s in %s format\",\n \t\t\t _(s->name), _(t->name), fki->name);\n \t    }\n \t  else\n \t    {\n \t      if (bad_flag_pairs[i].predicate != 0)\n-\t\twarning (\"use of %s and %s together with %<%%%c%> %s format\",\n+\t\twarning (0, \"use of %s and %s together with %<%%%c%> %s format\",\n \t\t\t _(s->name), _(t->name), format_char,\n \t\t\t fki->name);\n \t      else\n-\t\twarning (\"use of %s and %s together in %s format\",\n+\t\twarning (0, \"use of %s and %s together in %s format\",\n \t\t\t _(s->name), _(t->name), fki->name);\n \t    }\n \t}\n@@ -1851,10 +1851,10 @@ check_format_info_main (format_check_results *res,\n \t  else if (strchr (fci->flags2, '2') != 0)\n \t    y2k_level = 2;\n \t  if (y2k_level == 3)\n-\t    warning (\"%<%%%c%> yields only last 2 digits of year in some locales\",\n+\t    warning (0, \"%<%%%c%> yields only last 2 digits of year in some locales\",\n \t\t     format_char);\n \t  else if (y2k_level == 2)\n-\t    warning (\"%<%%%c%> yields only last 2 digits of year\", format_char);\n+\t    warning (0, \"%<%%%c%> yields only last 2 digits of year\", format_char);\n \t}\n \n       if (strchr (fci->flags2, '[') != 0)\n@@ -1870,7 +1870,7 @@ check_format_info_main (format_check_results *res,\n \t    ++format_chars;\n \t  if (*format_chars != ']')\n \t    /* The end of the format string was reached.  */\n-\t    warning (\"no closing %<]%> for %<%%[%> format\");\n+\t    warning (0, \"no closing %<]%> for %<%%[%> format\");\n \t}\n \n       wanted_type = 0;\n@@ -1883,14 +1883,14 @@ check_format_info_main (format_check_results *res,\n \t  wanted_type_std = fci->types[length_chars_val].std;\n \t  if (wanted_type == 0)\n \t    {\n-\t      warning (\"use of %qs length modifier with %qc type character\",\n+\t      warning (0, \"use of %qs length modifier with %qc type character\",\n \t\t       length_chars, format_char);\n \t      /* Heuristic: skip one argument when an invalid length/type\n \t\t combination is encountered.  */\n \t      arg_num++;\n \t      if (params == 0)\n \t\t{\n-\t\t  warning (\"too few arguments for format\");\n+\t\t  warning (0, \"too few arguments for format\");\n \t\t  return;\n \t\t}\n \t      params = TREE_CHAIN (params);\n@@ -1904,7 +1904,7 @@ check_format_info_main (format_check_results *res,\n \t\t   && ADJ_STD (wanted_type_std) > ADJ_STD (fci->std))\n \t    {\n \t      if (ADJ_STD (wanted_type_std) > C_STD_VER)\n-\t\twarning (\"%s does not support the %<%%%s%c%> %s format\",\n+\t\twarning (0, \"%s does not support the %<%%%s%c%> %s format\",\n \t\t\t C_STD_NAME (wanted_type_std), length_chars,\n \t\t\t format_char, fki->name);\n \t    }\n@@ -1921,9 +1921,9 @@ check_format_info_main (format_check_results *res,\n \t  if (main_arg_num != 0)\n \t    {\n \t      if (suppressed)\n-\t\twarning (\"operand number specified with suppressed assignment\");\n+\t\twarning (0, \"operand number specified with suppressed assignment\");\n \t      else\n-\t\twarning (\"operand number specified for format taking no argument\");\n+\t\twarning (0, \"operand number specified for format taking no argument\");\n \t    }\n \t}\n       else\n@@ -1940,7 +1940,7 @@ check_format_info_main (format_check_results *res,\n \t      ++arg_num;\n \t      if (has_operand_number > 0)\n \t\t{\n-\t\t  warning (\"missing $ operand number in format\");\n+\t\t  warning (0, \"missing $ operand number in format\");\n \t\t  return;\n \t\t}\n \t      else\n@@ -1952,7 +1952,7 @@ check_format_info_main (format_check_results *res,\n \t    {\n \t      if (params == 0)\n \t\t{\n-\t\t  warning (\"too few arguments for format\");\n+\t\t  warning (0, \"too few arguments for format\");\n \t\t  return;\n \t\t}\n \n@@ -2065,15 +2065,15 @@ check_format_types (format_wanted_type *types, const char *format_start,\n \t\t  && i == 0\n \t\t  && cur_param != 0\n \t\t  && integer_zerop (cur_param))\n-\t\twarning (\"writing through null pointer (argument %d)\",\n+\t\twarning (0, \"writing through null pointer (argument %d)\",\n \t\t\t arg_num);\n \n \t      /* Check for reading through a NULL pointer.  */\n \t      if (types->reading_from_flag\n \t\t  && i == 0\n \t\t  && cur_param != 0\n \t\t  && integer_zerop (cur_param))\n-\t\twarning (\"reading through null pointer (argument %d)\",\n+\t\twarning (0, \"reading through null pointer (argument %d)\",\n \t\t\t arg_num);\n \n \t      if (cur_param != 0 && TREE_CODE (cur_param) == ADDR_EXPR)\n@@ -2093,7 +2093,7 @@ check_format_types (format_wanted_type *types, const char *format_start,\n \t\t\t  && (CONSTANT_CLASS_P (cur_param)\n \t\t\t      || (DECL_P (cur_param)\n \t\t\t\t  && TREE_READONLY (cur_param))))))\n-\t\twarning (\"writing into constant object (argument %d)\",\n+\t\twarning (0, \"writing into constant object (argument %d)\",\n \t\t\t arg_num);\n \n \t      /* If there are extra type qualifiers beyond the first\n@@ -2104,7 +2104,7 @@ check_format_types (format_wanted_type *types, const char *format_start,\n \t\t  && (TYPE_READONLY (cur_type)\n \t\t      || TYPE_VOLATILE (cur_type)\n \t\t      || TYPE_RESTRICT (cur_type)))\n-\t\twarning (\"extra type qualifiers in format argument \"\n+\t\twarning (0, \"extra type qualifiers in format argument \"\n \t\t\t \"(argument %d)\",\n \t\t\t arg_num);\n \n@@ -2215,20 +2215,20 @@ format_type_warning (const char *descr, const char *format_start,\n   if (wanted_type_name)\n     {\n       if (descr)\n-\twarning (\"%s should have type %<%s%s%>, but argument %d has type %qT\",\n+\twarning (0, \"%s should have type %<%s%s%>, but argument %d has type %qT\",\n \t\t descr, wanted_type_name, p, arg_num, arg_type);\n       else\n-\twarning (\"format %q.*s expects type %<%s%s%>, but argument %d has type %qT\",\n+\twarning (0, \"format %q.*s expects type %<%s%s%>, but argument %d has type %qT\",\n \t\t format_length, format_start, wanted_type_name, p,\n \t\t arg_num, arg_type);\n     }\n   else\n     {\n       if (descr)\n-\twarning (\"%s should have type %<%T%s%>, but argument %d has type %qT\",\n+\twarning (0, \"%s should have type %<%T%s%>, but argument %d has type %qT\",\n \t\t descr, wanted_type, p, arg_num, arg_type);\n       else\n-\twarning (\"format %q.*s expects type %<%T%s%>, but argument %d has type %qT\",\n+\twarning (0, \"format %q.*s expects type %<%T%s%>, but argument %d has type %qT\",\n \t\t format_length, format_start, wanted_type, p, arg_num, arg_type);\n     }\n }"}, {"sha": "70db9f249a86f9b64108b907009072783ad15c24", "filename": "gcc/c-gimplify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fc-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fc-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-gimplify.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -204,7 +204,7 @@ gimplify_expr_stmt (tree *stmt_p)\n \t  if (!IS_EMPTY_STMT (stmt)\n \t      && !VOID_TYPE_P (TREE_TYPE (stmt))\n \t      && !TREE_NO_WARNING (stmt))\n-\t    warning (\"statement with no effect\");\n+\t    warning (0, \"statement with no effect\");\n \t}\n       else if (warn_unused_value)\n \twarn_if_unused_value (stmt, input_location);"}, {"sha": "990d2bee455d2d3941a0b821b7e75a5a332c6ed6", "filename": "gcc/c-lex.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -251,7 +251,7 @@ fe_file_change (const struct line_map *new_map)\n       if (c_header_level && --c_header_level == 0)\n \t{\n \t  if (new_map->sysp == 2)\n-\t    warning (\"badly nested C headers from preprocessor\");\n+\t    warning (0, \"badly nested C headers from preprocessor\");\n \t  --pending_lang_change;\n \t}\n #endif\n@@ -299,7 +299,7 @@ cb_def_pragma (cpp_reader *pfile, source_location loc)\n \t    name = cpp_token_as_text (pfile, s);\n \t}\n \n-      warning (\"%Hignoring #pragma %s %s\", &fe_loc, space, name);\n+      warning (0, \"%Hignoring #pragma %s %s\", &fe_loc, space, name);\n     }\n }\n \n@@ -597,10 +597,10 @@ interpret_integer (const cpp_token *token, unsigned int flags)\n \t\t  if (itk_u < itk_unsigned_long)\n \t\t    itk_u = itk_unsigned_long;\n \t\t  itk = itk_u;\n-\t\t  warning (\"this decimal constant is unsigned only in ISO C90\");\n+\t\t  warning (0, \"this decimal constant is unsigned only in ISO C90\");\n \t\t}\n \t      else if (warn_traditional)\n-\t\twarning (\"this decimal constant would be unsigned in ISO C90\");\n+\t\twarning (0, \"this decimal constant would be unsigned in ISO C90\");\n \t    }\n \t}\n     }\n@@ -764,7 +764,7 @@ lex_string (const cpp_token *tok, tree *valp, bool objc_string)\n     strs = (cpp_string *) obstack_finish (&str_ob);\n \n   if (concats && !objc_string && warn_traditional && !in_system_header)\n-    warning (\"traditional C rejects string constant concatenation\");\n+    warning (0, \"traditional C rejects string constant concatenation\");\n \n   if ((c_lex_string_translate\n        ? cpp_interpret_string : cpp_interpret_string_notranslate)"}, {"sha": "178f10fc2c60fafa3898a13134685d4c35b57def", "filename": "gcc/c-objc-common.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fc-objc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fc-objc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-objc-common.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -77,7 +77,7 @@ c_cannot_inline_tree_fn (tree *fnp)\n       && lookup_attribute (\"always_inline\", DECL_ATTRIBUTES (fn)) == NULL)\n     {\n       if (do_warning)\n-\twarning (\"%Jfunction %qF can never be inlined because it \"\n+\twarning (0, \"%Jfunction %qF can never be inlined because it \"\n \t\t \"is suppressed using -fno-inline\", fn, fn);\n       goto cannot_inline;\n     }\n@@ -87,15 +87,15 @@ c_cannot_inline_tree_fn (tree *fnp)\n   if (!DECL_DECLARED_INLINE_P (fn) && !targetm.binds_local_p (fn))\n     {\n       if (do_warning)\n-\twarning (\"%Jfunction %qF can never be inlined because it might not \"\n+\twarning (0, \"%Jfunction %qF can never be inlined because it might not \"\n \t\t \"be bound within this unit of translation\", fn, fn);\n       goto cannot_inline;\n     }\n \n   if (!function_attribute_inlinable_p (fn))\n     {\n       if (do_warning)\n-\twarning (\"%Jfunction %qF can never be inlined because it uses \"\n+\twarning (0, \"%Jfunction %qF can never be inlined because it uses \"\n \t\t \"attributes conflicting with inlining\", fn, fn);\n       goto cannot_inline;\n     }"}, {"sha": "506543a108ca9786958eae938e62af2c06feecc4", "filename": "gcc/c-opts.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -550,7 +550,7 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n     case OPT_fvtable_thunks:\n     case OPT_fxref:\n     case OPT_fvtable_gc:\n-      warning (\"switch %qs is no longer supported\", option->opt_text);\n+      warning (0, \"switch %qs is no longer supported\", option->opt_text);\n       break;\n \n     case OPT_faccess_control:\n@@ -663,7 +663,7 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n       break;\n \n     case OPT_fhandle_exceptions:\n-      warning (\"-fhandle-exceptions has been renamed -fexceptions (and is now on by default)\");\n+      warning (0, \"-fhandle-exceptions has been renamed -fexceptions (and is now on by default)\");\n       flag_exceptions = value;\n       break;\n \n@@ -979,17 +979,17 @@ c_common_post_options (const char **pfilename)\n   /* Special format checking options don't work without -Wformat; warn if\n      they are used.  */\n   if (warn_format_y2k && !warn_format)\n-    warning (\"-Wformat-y2k ignored without -Wformat\");\n+    warning (0, \"-Wformat-y2k ignored without -Wformat\");\n   if (warn_format_extra_args && !warn_format)\n-    warning (\"-Wformat-extra-args ignored without -Wformat\");\n+    warning (0, \"-Wformat-extra-args ignored without -Wformat\");\n   if (warn_format_zero_length && !warn_format)\n-    warning (\"-Wformat-zero-length ignored without -Wformat\");\n+    warning (0, \"-Wformat-zero-length ignored without -Wformat\");\n   if (warn_format_nonliteral && !warn_format)\n-    warning (\"-Wformat-nonliteral ignored without -Wformat\");\n+    warning (0, \"-Wformat-nonliteral ignored without -Wformat\");\n   if (warn_format_security && !warn_format)\n-    warning (\"-Wformat-security ignored without -Wformat\");\n+    warning (0, \"-Wformat-security ignored without -Wformat\");\n   if (warn_missing_format_attribute && !warn_format)\n-    warning (\"-Wmissing-format-attribute ignored without -Wformat\");\n+    warning (0, \"-Wmissing-format-attribute ignored without -Wformat\");\n \n   /* C99 requires special handling of complex multiplication and division;\n      -ffast-math and -fcx-limited-range are handled in process_options.  */\n@@ -1096,7 +1096,7 @@ c_common_parse_file (int set_yydebug)\n   yydebug = set_yydebug;\n #else\n   if (set_yydebug)\n-    warning (\"YYDEBUG was not defined at build time, -dy ignored\");\n+    warning (0, \"YYDEBUG was not defined at build time, -dy ignored\");\n #endif\n \n   i = 0;\n@@ -1400,7 +1400,7 @@ void\n cb_dir_change (cpp_reader * ARG_UNUSED (pfile), const char *dir)\n {\n   if (!set_src_pwd (dir))\n-    warning (\"too late for # directive to set debug directory\");\n+    warning (0, \"too late for # directive to set debug directory\");\n }\n \n /* Set the C 89 standard (with 1994 amendments if C94, without GNU"}, {"sha": "7774b72975f15a0c6e0cc6122a65b565718a3cde", "filename": "gcc/c-parser.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -3873,7 +3873,7 @@ c_parser_asm_statement (c_parser *parser)\n   else if (c_parser_next_token_is_keyword (parser, RID_CONST)\n \t   || c_parser_next_token_is_keyword (parser, RID_RESTRICT))\n     {\n-      warning (\"%E qualifier ignored on asm\",\n+      warning (0, \"%E qualifier ignored on asm\",\n \t       c_parser_peek_token (parser)->value);\n       quals = NULL_TREE;\n       c_parser_consume_token (parser);\n@@ -4528,7 +4528,7 @@ c_parser_unary_expression (c_parser *parser)\n     case CPP_PLUS:\n       c_parser_consume_token (parser);\n       if (!c_dialect_objc () && warn_traditional && !in_system_header)\n-\twarning (\"traditional C rejects the unary plus operator\");\n+\twarning (0, \"traditional C rejects the unary plus operator\");\n       ret.value\n \t= build_unary_op (CONVERT_EXPR,\n \t\t\t  c_parser_cast_expression (parser, NULL).value, 0);"}, {"sha": "c01818938bde1b70beecdb3c0642994a58cdffc5", "filename": "gcc/c-pragma.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -36,8 +36,8 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"tm_p.h\"\n #include \"target.h\"\n \n-#define GCC_BAD(msgid) do { warning (msgid); return; } while (0)\n-#define GCC_BAD2(msgid, arg) do { warning (msgid, arg); return; } while (0)\n+#define GCC_BAD(msgid) do { warning (0, msgid); return; } while (0)\n+#define GCC_BAD2(msgid, arg) do { warning (0, msgid, arg); return; } while (0)\n \n typedef struct align_stack GTY(())\n {\n@@ -108,7 +108,7 @@ pop_alignment (tree id)\n \t    break;\n \t  }\n       if (entry == NULL)\n-\twarning (\"\\\n+\twarning (0, \"\\\n #pragma pack(pop, %s) encountered without matching #pragma pack(push, %s)\"\n \t\t , IDENTIFIER_POINTER (id), IDENTIFIER_POINTER (id));\n     }\n@@ -201,7 +201,7 @@ handle_pragma_pack (cpp_reader * ARG_UNUSED (dummy))\n     GCC_BAD (\"malformed %<#pragma pack%> - ignored\");\n \n   if (c_lex (&x) != CPP_EOF)\n-    warning (\"junk at end of %<#pragma pack%>\");\n+    warning (0, \"junk at end of %<#pragma pack%>\");\n \n   if (flag_pack_struct)\n     GCC_BAD (\"#pragma pack has no effect with -fpack-struct - ignored\");\n@@ -257,7 +257,7 @@ apply_pragma_weak (tree decl, tree value)\n   if (SUPPORTS_WEAK && DECL_EXTERNAL (decl) && TREE_USED (decl)\n       && !DECL_WEAK (decl) /* Don't complain about a redundant #pragma.  */\n       && TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (decl)))\n-    warning (\"%Japplying #pragma weak %qD after first use results \"\n+    warning (0, \"%Japplying #pragma weak %qD after first use results \"\n              \"in unspecified behavior\", decl, decl);\n \n   declare_weak (decl);\n@@ -340,7 +340,7 @@ handle_pragma_weak (cpp_reader * ARG_UNUSED (dummy))\n       t = c_lex (&x);\n     }\n   if (t != CPP_EOF)\n-    warning (\"junk at end of #pragma weak\");\n+    warning (0, \"junk at end of #pragma weak\");\n \n   decl = identifier_global_value (name);\n   if (decl && DECL_P (decl))\n@@ -413,12 +413,12 @@ handle_pragma_redefine_extname (cpp_reader * ARG_UNUSED (dummy))\n     GCC_BAD (\"malformed #pragma redefine_extname, ignored\");\n   t = c_lex (&x);\n   if (t != CPP_EOF)\n-    warning (\"junk at end of #pragma redefine_extname\");\n+    warning (0, \"junk at end of #pragma redefine_extname\");\n \n   if (!flag_mudflap && !targetm.handle_pragma_redefine_extname)\n     {\n       if (warn_unknown_pragmas > in_system_header)\n-\twarning (\"#pragma redefine_extname not supported on this target\");\n+\twarning (0, \"#pragma redefine_extname not supported on this target\");\n       return;\n     }\n \n@@ -435,7 +435,7 @@ handle_pragma_redefine_extname (cpp_reader * ARG_UNUSED (dummy))\n \t  name = targetm.strip_name_encoding (name);\n \n \t  if (strcmp (name, IDENTIFIER_POINTER (newname)))\n-\t    warning (\"#pragma redefine_extname ignored due to conflict with \"\n+\t    warning (0, \"#pragma redefine_extname ignored due to conflict with \"\n \t\t     \"previous rename\");\n \t}\n       else\n@@ -458,7 +458,7 @@ add_to_renaming_pragma_list (tree oldname, tree newname)\n   if (previous)\n     {\n       if (TREE_VALUE (previous) != newname)\n-\twarning (\"#pragma redefine_extname ignored due to conflict with \"\n+\twarning (0, \"#pragma redefine_extname ignored due to conflict with \"\n \t\t \"previous #pragma redefine_extname\");\n       return;\n     }\n@@ -480,13 +480,13 @@ handle_pragma_extern_prefix (cpp_reader * ARG_UNUSED (dummy))\n     GCC_BAD (\"malformed #pragma extern_prefix, ignored\");\n   t = c_lex (&x);\n   if (t != CPP_EOF)\n-    warning (\"junk at end of #pragma extern_prefix\");\n+    warning (0, \"junk at end of #pragma extern_prefix\");\n \n   if (targetm.handle_pragma_extern_prefix)\n     /* Note that the length includes the null terminator.  */\n     pragma_extern_prefix = (TREE_STRING_LENGTH (prefix) > 1 ? prefix : NULL);\n   else if (warn_unknown_pragmas > in_system_header)\n-    warning (\"#pragma extern_prefix not supported on this target\");\n+    warning (0, \"#pragma extern_prefix not supported on this target\");\n }\n \n /* Hook from the front ends to apply the results of one of the preceding\n@@ -512,7 +512,7 @@ maybe_apply_renaming_pragma (tree decl, tree asmname)\n       oldname = targetm.strip_name_encoding (oldname);\n \n       if (asmname && strcmp (TREE_STRING_POINTER (asmname), oldname))\n-\t  warning (\"asm declaration ignored due to \"\n+\t  warning (0, \"asm declaration ignored due to \"\n \t\t   \"conflict with previous rename\");\n \n       /* Take any pending redefine_extname off the list.  */\n@@ -521,7 +521,7 @@ maybe_apply_renaming_pragma (tree decl, tree asmname)\n \t  {\n \t    /* Only warn if there is a conflict.  */\n \t    if (strcmp (IDENTIFIER_POINTER (TREE_VALUE (t)), oldname))\n-\t      warning (\"#pragma redefine_extname ignored due to \"\n+\t      warning (0, \"#pragma redefine_extname ignored due to \"\n \t\t       \"conflict with previous rename\");\n \n \t    *p = TREE_CHAIN (t);\n@@ -543,7 +543,7 @@ maybe_apply_renaming_pragma (tree decl, tree asmname)\n \t  {\n \t    if (strcmp (TREE_STRING_POINTER (asmname),\n \t\t\tIDENTIFIER_POINTER (newname)) != 0)\n-\t      warning (\"#pragma redefine_extname ignored due to \"\n+\t      warning (0, \"#pragma redefine_extname ignored due to \"\n \t\t       \"conflict with __asm__ declaration\");\n \t    return asmname;\n \t  }\n@@ -654,7 +654,7 @@ handle_pragma_visibility (cpp_reader *dummy ATTRIBUTE_UNUSED)\n         }\n     }\n   if (c_lex (&x) != CPP_EOF)\n-    warning (\"junk at end of %<#pragma GCC visibility%>\");\n+    warning (0, \"junk at end of %<#pragma GCC visibility%>\");\n }\n \n #endif"}, {"sha": "cde90a763d30729b2ec777b93f69695332d3e90e", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 56, "deletions": 56, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -1068,7 +1068,7 @@ function_types_compatible_p (tree f1, tree f2)\n \treturn 0;\n       /* If one of these types comes from a non-prototype fn definition,\n \t compare that with the other type's arglist.\n-\t If they don't match, ask for a warning (but no error).  */\n+\t If they don't match, ask for a warning (0, but no error).  */\n       if (TYPE_ACTUAL_ARG_TYPES (f1)\n \t  && 1 != type_lists_compatible_p (args2, TYPE_ACTUAL_ARG_TYPES (f1)))\n \tval = 2;\n@@ -1646,7 +1646,7 @@ build_indirect_ref (tree ptr, const char *errorstring)\n \t      return error_mark_node;\n \t    }\n \t  if (VOID_TYPE_P (t) && skip_evaluation == 0)\n-\t    warning (\"dereferencing %<void *%> pointer\");\n+\t    warning (0, \"dereferencing %<void *%> pointer\");\n \n \t  /* We *must* set TREE_READONLY when dereferencing a pointer to const,\n \t     so that we get the proper error message if the result is used\n@@ -1721,7 +1721,7 @@ build_array_ref (tree array, tree index)\n      char[array].  */\n   if (warn_char_subscripts && !swapped\n       && TYPE_MAIN_VARIANT (TREE_TYPE (index)) == char_type_node)\n-    warning (\"array subscript has type %<char%>\");\n+    warning (0, \"array subscript has type %<char%>\");\n \n   /* Apply default promotions *after* noticing character types.  */\n   index = default_conversion (index);\n@@ -2040,7 +2040,7 @@ build_function_call (tree function, tree params)\n       /* This situation leads to run-time undefined behavior.  We can't,\n \t therefore, simply error unless we can prove that all possible\n \t executions of the program must execute the code.  */\n-      warning (\"function called through a non-compatible type\");\n+      warning (0, \"function called through a non-compatible type\");\n \n       /* We can, however, treat \"undefined\" any way we please.\n \t Call abort to encourage the user to fix the program.  */\n@@ -2185,32 +2185,32 @@ convert_arguments (tree typelist, tree values, tree function, tree fundecl)\n \n \t\t  if (INTEGRAL_TYPE_P (type)\n \t\t      && TREE_CODE (TREE_TYPE (val)) == REAL_TYPE)\n-\t\t    warning (\"passing argument %d of %qE as integer \"\n+\t\t    warning (0, \"passing argument %d of %qE as integer \"\n \t\t\t     \"rather than floating due to prototype\",\n \t\t\t     argnum, rname);\n \t\t  if (INTEGRAL_TYPE_P (type)\n \t\t      && TREE_CODE (TREE_TYPE (val)) == COMPLEX_TYPE)\n-\t\t    warning (\"passing argument %d of %qE as integer \"\n+\t\t    warning (0, \"passing argument %d of %qE as integer \"\n \t\t\t     \"rather than complex due to prototype\",\n \t\t\t     argnum, rname);\n \t\t  else if (TREE_CODE (type) == COMPLEX_TYPE\n \t\t\t   && TREE_CODE (TREE_TYPE (val)) == REAL_TYPE)\n-\t\t    warning (\"passing argument %d of %qE as complex \"\n+\t\t    warning (0, \"passing argument %d of %qE as complex \"\n \t\t\t     \"rather than floating due to prototype\",\n \t\t\t     argnum, rname);\n \t\t  else if (TREE_CODE (type) == REAL_TYPE\n \t\t\t   && INTEGRAL_TYPE_P (TREE_TYPE (val)))\n-\t\t    warning (\"passing argument %d of %qE as floating \"\n+\t\t    warning (0, \"passing argument %d of %qE as floating \"\n \t\t\t     \"rather than integer due to prototype\",\n \t\t\t     argnum, rname);\n \t\t  else if (TREE_CODE (type) == COMPLEX_TYPE\n \t\t\t   && INTEGRAL_TYPE_P (TREE_TYPE (val)))\n-\t\t    warning (\"passing argument %d of %qE as complex \"\n+\t\t    warning (0, \"passing argument %d of %qE as complex \"\n \t\t\t     \"rather than integer due to prototype\",\n \t\t\t     argnum, rname);\n \t\t  else if (TREE_CODE (type) == REAL_TYPE\n \t\t\t   && TREE_CODE (TREE_TYPE (val)) == COMPLEX_TYPE)\n-\t\t    warning (\"passing argument %d of %qE as floating \"\n+\t\t    warning (0, \"passing argument %d of %qE as floating \"\n \t\t\t     \"rather than complex due to prototype\",\n \t\t\t     argnum, rname);\n \t\t  /* ??? At some point, messages should be written about\n@@ -2222,7 +2222,7 @@ convert_arguments (tree typelist, tree values, tree function, tree fundecl)\n \t\t      /* Warn if any argument is passed as `float',\n \t\t\t since without a prototype it would be `double'.  */\n \t\t      if (formal_prec == TYPE_PRECISION (float_type_node))\n-\t\t\twarning (\"passing argument %d of %qE as %<float%> \"\n+\t\t\twarning (0, \"passing argument %d of %qE as %<float%> \"\n \t\t\t\t \"rather than %<double%> due to prototype\",\n \t\t\t\t argnum, rname);\n \t\t    }\n@@ -2242,7 +2242,7 @@ convert_arguments (tree typelist, tree values, tree function, tree fundecl)\n \t\t\t   and the actual arg is that enum type.  */\n \t\t\t;\n \t\t      else if (formal_prec != TYPE_PRECISION (type1))\n-\t\t\twarning (\"passing argument %d of %qE with different \"\n+\t\t\twarning (0, \"passing argument %d of %qE with different \"\n \t\t\t\t \"width due to prototype\", argnum, rname);\n \t\t      else if (TYPE_UNSIGNED (type) == TYPE_UNSIGNED (type1))\n \t\t\t;\n@@ -2264,10 +2264,10 @@ convert_arguments (tree typelist, tree values, tree function, tree fundecl)\n \t\t\t       && TYPE_UNSIGNED (TREE_TYPE (val)))\n \t\t\t;\n \t\t      else if (TYPE_UNSIGNED (type))\n-\t\t\twarning (\"passing argument %d of %qE as unsigned \"\n+\t\t\twarning (0, \"passing argument %d of %qE as unsigned \"\n \t\t\t\t \"due to prototype\", argnum, rname);\n \t\t      else\n-\t\t\twarning (\"passing argument %d of %qE as signed \"\n+\t\t\twarning (0, \"passing argument %d of %qE as signed \"\n \t\t\t\t \"due to prototype\", argnum, rname);\n \t\t    }\n \t\t}\n@@ -2340,14 +2340,14 @@ parser_build_binary_op (enum tree_code code, struct c_expr arg1,\n \t{\n \t  if (code1 == PLUS_EXPR || code1 == MINUS_EXPR\n \t      || code2 == PLUS_EXPR || code2 == MINUS_EXPR)\n-\t    warning (\"suggest parentheses around + or - inside shift\");\n+\t    warning (0, \"suggest parentheses around + or - inside shift\");\n \t}\n \n       if (code == TRUTH_ORIF_EXPR)\n \t{\n \t  if (code1 == TRUTH_ANDIF_EXPR\n \t      || code2 == TRUTH_ANDIF_EXPR)\n-\t    warning (\"suggest parentheses around && within ||\");\n+\t    warning (0, \"suggest parentheses around && within ||\");\n \t}\n \n       if (code == BIT_IOR_EXPR)\n@@ -2356,11 +2356,11 @@ parser_build_binary_op (enum tree_code code, struct c_expr arg1,\n \t      || code1 == PLUS_EXPR || code1 == MINUS_EXPR\n \t      || code2 == BIT_AND_EXPR || code2 == BIT_XOR_EXPR\n \t      || code2 == PLUS_EXPR || code2 == MINUS_EXPR)\n-\t    warning (\"suggest parentheses around arithmetic in operand of |\");\n+\t    warning (0, \"suggest parentheses around arithmetic in operand of |\");\n \t  /* Check cases like x|y==z */\n \t  if (TREE_CODE_CLASS (code1) == tcc_comparison\n \t      || TREE_CODE_CLASS (code2) == tcc_comparison)\n-\t    warning (\"suggest parentheses around comparison in operand of |\");\n+\t    warning (0, \"suggest parentheses around comparison in operand of |\");\n \t}\n \n       if (code == BIT_XOR_EXPR)\n@@ -2369,28 +2369,28 @@ parser_build_binary_op (enum tree_code code, struct c_expr arg1,\n \t      || code1 == PLUS_EXPR || code1 == MINUS_EXPR\n \t      || code2 == BIT_AND_EXPR\n \t      || code2 == PLUS_EXPR || code2 == MINUS_EXPR)\n-\t    warning (\"suggest parentheses around arithmetic in operand of ^\");\n+\t    warning (0, \"suggest parentheses around arithmetic in operand of ^\");\n \t  /* Check cases like x^y==z */\n \t  if (TREE_CODE_CLASS (code1) == tcc_comparison\n \t      || TREE_CODE_CLASS (code2) == tcc_comparison)\n-\t    warning (\"suggest parentheses around comparison in operand of ^\");\n+\t    warning (0, \"suggest parentheses around comparison in operand of ^\");\n \t}\n \n       if (code == BIT_AND_EXPR)\n \t{\n \t  if (code1 == PLUS_EXPR || code1 == MINUS_EXPR\n \t      || code2 == PLUS_EXPR || code2 == MINUS_EXPR)\n-\t    warning (\"suggest parentheses around + or - in operand of &\");\n+\t    warning (0, \"suggest parentheses around + or - in operand of &\");\n \t  /* Check cases like x&y==z */\n \t  if (TREE_CODE_CLASS (code1) == tcc_comparison\n \t      || TREE_CODE_CLASS (code2) == tcc_comparison)\n-\t    warning (\"suggest parentheses around comparison in operand of &\");\n+\t    warning (0, \"suggest parentheses around comparison in operand of &\");\n \t}\n       /* Similarly, check for cases like 1<=i<=10 that are probably errors.  */\n       if (TREE_CODE_CLASS (code) == tcc_comparison\n \t  && (TREE_CODE_CLASS (code1) == tcc_comparison\n \t      || TREE_CODE_CLASS (code2) == tcc_comparison))\n-\twarning (\"comparisons like X<=Y<=Z do not have their mathematical meaning\");\n+\twarning (0, \"comparisons like X<=Y<=Z do not have their mathematical meaning\");\n \n     }\n \n@@ -3003,7 +3003,7 @@ build_conditional_expr (tree ifexp, tree op1, tree op2)\n \t\t       || (unsigned_op1 && tree_expr_nonnegative_p (op2)))\n \t\t/* OK */;\n \t      else\n-\t\twarning (\"signed and unsigned type in conditional expression\");\n+\t\twarning (0, \"signed and unsigned type in conditional expression\");\n \t    }\n \t}\n     }\n@@ -3111,7 +3111,7 @@ build_compound_expr (tree expr1, tree expr2)\n       if (warn_unused_value\n            && !(TREE_CODE (expr1) == CONVERT_EXPR\n                 && VOID_TYPE_P (TREE_TYPE (expr1))))\n-        warning (\"left-hand operand of comma expression has no effect\");\n+        warning (0, \"left-hand operand of comma expression has no effect\");\n     }\n \n   /* With -Wunused, we should also warn if the left-hand operand does have\n@@ -3238,12 +3238,12 @@ build_c_cast (tree type, tree expr)\n \t\t && TREE_CODE (in_otype) == POINTER_TYPE);\n \n \t  if (added)\n-\t    warning (\"cast adds new qualifiers to function type\");\n+\t    warning (0, \"cast adds new qualifiers to function type\");\n \n \t  if (discarded)\n \t    /* There are qualifiers present in IN_OTYPE that are not\n \t       present in IN_TYPE.  */\n-\t    warning (\"cast discards qualifiers from pointer target type\");\n+\t    warning (0, \"cast discards qualifiers from pointer target type\");\n \t}\n \n       /* Warn about possible alignment problems.  */\n@@ -3258,19 +3258,19 @@ build_c_cast (tree type, tree expr)\n \t\t|| TREE_CODE (TREE_TYPE (otype)) == RECORD_TYPE)\n \t       && TYPE_MODE (TREE_TYPE (otype)) == VOIDmode)\n \t  && TYPE_ALIGN (TREE_TYPE (type)) > TYPE_ALIGN (TREE_TYPE (otype)))\n-\twarning (\"cast increases required alignment of target type\");\n+\twarning (0, \"cast increases required alignment of target type\");\n \n       if (warn_pointer_to_int_cast\n \t  && TREE_CODE (type) == INTEGER_TYPE\n \t  && TREE_CODE (otype) == POINTER_TYPE\n \t  && TYPE_PRECISION (type) != TYPE_PRECISION (otype)\n \t  && !TREE_CONSTANT (value))\n-\twarning (\"cast from pointer to integer of different size\");\n+\twarning (0, \"cast from pointer to integer of different size\");\n \n       if (warn_bad_function_cast\n \t  && TREE_CODE (value) == CALL_EXPR\n \t  && TREE_CODE (type) != TREE_CODE (otype))\n-\twarning (\"cast from function call of type %qT to non-matching \"\n+\twarning (0, \"cast from function call of type %qT to non-matching \"\n \t\t \"type %qT\", otype, type);\n \n       if (warn_int_to_pointer_cast\n@@ -3279,7 +3279,7 @@ build_c_cast (tree type, tree expr)\n \t  && TYPE_PRECISION (type) != TYPE_PRECISION (otype)\n \t  /* Don't warn about converting any constant.  */\n \t  && !TREE_CONSTANT (value))\n-\twarning (\"cast to pointer from integer of different size\");\n+\twarning (0, \"cast to pointer from integer of different size\");\n \n       if (TREE_CODE (type) == POINTER_TYPE\n \t  && TREE_CODE (otype) == POINTER_TYPE\n@@ -3291,17 +3291,17 @@ build_c_cast (tree type, tree expr)\n \t  /* Casting the address of a decl to non void pointer. Warn\n \t     if the cast breaks type based aliasing.  */\n \t  if (!COMPLETE_TYPE_P (TREE_TYPE (type)))\n-\t    warning (\"type-punning to incomplete type might break strict-aliasing rules\");\n+\t    warning (0, \"type-punning to incomplete type might break strict-aliasing rules\");\n \t  else\n \t    {\n \t      HOST_WIDE_INT set1 = get_alias_set (TREE_TYPE (TREE_OPERAND (expr, 0)));\n \t      HOST_WIDE_INT set2 = get_alias_set (TREE_TYPE (type));\n \n \t      if (!alias_sets_conflict_p (set1, set2))\n-\t\twarning (\"dereferencing type-punned pointer will break strict-aliasing rules\");\n+\t\twarning (0, \"dereferencing type-punned pointer will break strict-aliasing rules\");\n \t      else if (warn_strict_aliasing > 1\n \t\t       && !alias_sets_might_conflict_p (set1, set2))\n-\t\twarning (\"dereferencing type-punned pointer might break strict-aliasing rules\");\n+\t\twarning (0, \"dereferencing type-punned pointer might break strict-aliasing rules\");\n \t    }\n \t}\n \n@@ -3507,7 +3507,7 @@ convert_for_assignment (tree type, tree rhs, enum impl_conv errtype,\n \tpedwarn (AR, parmnum, rname);\t\t\\\n \tbreak;\t\t\t\t\t\\\n       case ic_argpass_nonproto:\t\t\t\\\n-\twarning (AR, parmnum, rname);\t\t\\\n+\twarning (0, AR, parmnum, rname);\t\t\\\n \tbreak;\t\t\t\t\t\\\n       case ic_assign:\t\t\t\t\\\n \tpedwarn (AS);\t\t\t\t\\\n@@ -3950,7 +3950,7 @@ store_init_value (tree decl, tree init)\n \n   if (warn_traditional && !in_system_header\n       && AGGREGATE_TYPE_P (TREE_TYPE (decl)) && !TREE_STATIC (decl))\n-    warning (\"traditional C rejects automatic aggregate initialization\");\n+    warning (0, \"traditional C rejects automatic aggregate initialization\");\n \n   DECL_INITIAL (decl) = value;\n \n@@ -4144,10 +4144,10 @@ warning_init (const char *msgid)\n {\n   char *ofwhat;\n \n-  warning (\"%s\", _(msgid));\n+  warning (0, \"%s\", _(msgid));\n   ofwhat = print_spelling ((char *) alloca (spelling_length () + 1));\n   if (*ofwhat)\n-    warning (\"(near initialization for %qs)\", ofwhat);\n+    warning (0, \"(near initialization for %qs)\", ofwhat);\n }\n \f\n /* If TYPE is an array type and EXPR is a parenthesized string\n@@ -6186,7 +6186,7 @@ process_init_element (struct c_expr value)\n \t  if (warn_traditional && !in_system_header && !constructor_designated\n \t      && !(value.value && (integer_zerop (value.value)\n \t\t\t\t   || real_zerop (value.value))))\n-\t    warning (\"traditional C rejects initialization of unions\");\n+\t    warning (0, \"traditional C rejects initialization of unions\");\n \n \t  /* Accept a string constant to initialize a subarray.  */\n \t  if (value.value != 0\n@@ -6549,7 +6549,7 @@ c_finish_return (tree retval)\n   tree valtype = TREE_TYPE (TREE_TYPE (current_function_decl));\n \n   if (TREE_THIS_VOLATILE (current_function_decl))\n-    warning (\"function declared %<noreturn%> has a %<return%> statement\");\n+    warning (0, \"function declared %<noreturn%> has a %<return%> statement\");\n \n   if (!retval)\n     {\n@@ -6620,7 +6620,7 @@ c_finish_return (tree retval)\n \t\t  && !DECL_EXTERNAL (inner)\n \t\t  && !TREE_STATIC (inner)\n \t\t  && DECL_CONTEXT (inner) == current_function_decl)\n-\t\twarning (\"function returns address of local variable\");\n+\t\twarning (0, \"function returns address of local variable\");\n \t      break;\n \n \t    default:\n@@ -6702,7 +6702,7 @@ c_start_case (tree exp)\n \t  if (warn_traditional && !in_system_header\n \t      && (type == long_integer_type_node\n \t\t  || type == long_unsigned_type_node))\n-\t    warning (\"%<long%> switch expression not converted to \"\n+\t    warning (0, \"%<long%> switch expression not converted to \"\n \t\t     \"%<int%> in ISO C\");\n \n \t  exp = default_conversion (exp);\n@@ -6837,7 +6837,7 @@ c_finish_if_stmt (location_t if_locus, tree cond, tree then_block,\n     found:\n \n       if (COND_EXPR_ELSE (inner_if))\n-\t warning (\"%Hsuggest explicit braces to avoid ambiguous %<else%>\",\n+\t warning (0, \"%Hsuggest explicit braces to avoid ambiguous %<else%>\",\n \t\t  &if_locus);\n     }\n \n@@ -6847,15 +6847,15 @@ c_finish_if_stmt (location_t if_locus, tree cond, tree then_block,\n       if (TREE_CODE (then_block) == NOP_EXPR && !TREE_TYPE (then_block))\n \t{\n \t  if (!else_block)\n-\t    warning (\"%Hempty body in an if-statement\",\n+\t    warning (0, \"%Hempty body in an if-statement\",\n \t\t     EXPR_LOCUS (then_block));\n \t  then_block = alloc_stmt_list ();\n \t}\n       if (else_block\n \t  && TREE_CODE (else_block) == NOP_EXPR\n \t  && !TREE_TYPE (else_block))\n \t{\n-\t  warning (\"%Hempty body in an else-statement\",\n+\t  warning (0, \"%Hempty body in an else-statement\",\n \t\t   EXPR_LOCUS (else_block));\n \t  else_block = alloc_stmt_list ();\n \t}\n@@ -6986,7 +6986,7 @@ emit_side_effect_warnings (tree expr)\n   else if (!TREE_SIDE_EFFECTS (expr))\n     {\n       if (!VOID_TYPE_P (TREE_TYPE (expr)) && !TREE_NO_WARNING (expr))\n-\twarning (\"%Hstatement with no effect\",\n+\twarning (0, \"%Hstatement with no effect\",\n \t\t EXPR_HAS_LOCATION (expr) ? EXPR_LOCUS (expr) : &input_location);\n     }\n   else if (warn_unused_value)\n@@ -7454,7 +7454,7 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n       /* Floating point division by zero is a legitimate way to obtain\n \t infinities and NaNs.  */\n       if (warn_div_by_zero && skip_evaluation == 0 && integer_zerop (op1))\n-\twarning (\"division by zero\");\n+\twarning (0, \"division by zero\");\n \n       if ((code0 == INTEGER_TYPE || code0 == REAL_TYPE\n \t   || code0 == COMPLEX_TYPE || code0 == VECTOR_TYPE)\n@@ -7493,7 +7493,7 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n     case TRUNC_MOD_EXPR:\n     case FLOOR_MOD_EXPR:\n       if (warn_div_by_zero && skip_evaluation == 0 && integer_zerop (op1))\n-\twarning (\"division by zero\");\n+\twarning (0, \"division by zero\");\n \n       if (code0 == INTEGER_TYPE && code1 == INTEGER_TYPE)\n \t{\n@@ -7538,14 +7538,14 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n \t  if (TREE_CODE (op1) == INTEGER_CST && skip_evaluation == 0)\n \t    {\n \t      if (tree_int_cst_sgn (op1) < 0)\n-\t\twarning (\"right shift count is negative\");\n+\t\twarning (0, \"right shift count is negative\");\n \t      else\n \t\t{\n \t\t  if (!integer_zerop (op1))\n \t\t    short_shift = 1;\n \n \t\t  if (compare_tree_int (op1, TYPE_PRECISION (type0)) >= 0)\n-\t\t    warning (\"right shift count >= width of type\");\n+\t\t    warning (0, \"right shift count >= width of type\");\n \t\t}\n \t    }\n \n@@ -7566,10 +7566,10 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n \t  if (TREE_CODE (op1) == INTEGER_CST && skip_evaluation == 0)\n \t    {\n \t      if (tree_int_cst_sgn (op1) < 0)\n-\t\twarning (\"left shift count is negative\");\n+\t\twarning (0, \"left shift count is negative\");\n \n \t      else if (compare_tree_int (op1, TYPE_PRECISION (type0)) >= 0)\n-\t\twarning (\"left shift count >= width of type\");\n+\t\twarning (0, \"left shift count >= width of type\");\n \t    }\n \n \t  /* Use the type of the value to be shifted.  */\n@@ -7586,7 +7586,7 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n     case EQ_EXPR:\n     case NE_EXPR:\n       if (warn_float_equal && (code0 == REAL_TYPE || code1 == REAL_TYPE))\n-\twarning (\"comparing floating point with == or != is unsafe\");\n+\twarning (0, \"comparing floating point with == or != is unsafe\");\n       /* Result of comparison is always int,\n \t but don't convert the args to int!  */\n       build_type = integer_type_node;\n@@ -7903,7 +7903,7 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n \t\t\t    c_common_signed_type (result_type)))\n \t\t    /* OK */;\n \t\t  else\n-\t\t    warning (\"comparison between signed and unsigned\");\n+\t\t    warning (0, \"comparison between signed and unsigned\");\n \t\t}\n \n \t      /* Warn if two unsigned values are being compared in a size\n@@ -7949,15 +7949,15 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n \t\t\t{\n \t\t\t  mask = (~(HOST_WIDE_INT) 0) << bits;\n \t\t\t  if ((mask & constant) != mask)\n-\t\t\t    warning (\"comparison of promoted ~unsigned with constant\");\n+\t\t\t    warning (0, \"comparison of promoted ~unsigned with constant\");\n \t\t\t}\n \t\t    }\n \t\t  else if (unsignedp0 && unsignedp1\n \t\t\t   && (TYPE_PRECISION (TREE_TYPE (primop0))\n \t\t\t       < TYPE_PRECISION (result_type))\n \t\t\t   && (TYPE_PRECISION (TREE_TYPE (primop1))\n \t\t\t       < TYPE_PRECISION (result_type)))\n-\t\t    warning (\"comparison of promoted ~unsigned with unsigned\");\n+\t\t    warning (0, \"comparison of promoted ~unsigned with unsigned\");\n \t\t}\n \t    }\n \t}"}, {"sha": "df9c734fc7820e57e8e5b29f4e2b25621f35809b", "filename": "gcc/calls.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -1935,7 +1935,7 @@ expand_call (tree exp, rtx target, int ignore)\n   /* Warn if this value is an aggregate type,\n      regardless of which calling convention we are using for it.  */\n   if (warn_aggregate_return && AGGREGATE_TYPE_P (TREE_TYPE (exp)))\n-    warning (\"function call has aggregate value\");\n+    warning (0, \"function call has aggregate value\");\n \n   /* If the result of a pure or const function call is ignored (or void),\n      and none of its arguments are volatile, we can avoid expanding the"}, {"sha": "adef0bd09ce2a25709363f46a27b7f7d90802196", "filename": "gcc/cgraph.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -712,7 +712,7 @@ change_decl_assembler_name (tree decl, tree name)\n \n   if (TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (decl))\n       && DECL_RTL_SET_P (decl))\n-    warning (\"%D renamed after being referenced in assembly\", decl);\n+    warning (0, \"%D renamed after being referenced in assembly\", decl);\n \n   SET_DECL_ASSEMBLER_NAME (decl, name);\n }"}, {"sha": "631855cc7511833c0e5faddb1e396936ce7244cd", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -310,7 +310,7 @@ override_options (void)\n   /* Unicos/Mk doesn't have shared libraries.  */\n   if (TARGET_ABI_UNICOSMK && flag_pic)\n     {\n-      warning (\"-f%s ignored for Unicos/Mk (not supported)\",\n+      warning (0, \"-f%s ignored for Unicos/Mk (not supported)\",\n \t       (flag_pic > 1) ? \"PIC\" : \"pic\");\n       flag_pic = 0;\n     }\n@@ -334,7 +334,7 @@ override_options (void)\n   if (TARGET_IEEE)\n     {\n       if (TARGET_ABI_UNICOSMK)\n-\twarning (\"-mieee not supported on Unicos/Mk\");\n+\twarning (0, \"-mieee not supported on Unicos/Mk\");\n       else\n \t{\n \t  alpha_tp = ALPHA_TP_INSN;\n@@ -345,7 +345,7 @@ override_options (void)\n   if (TARGET_IEEE_WITH_INEXACT)\n     {\n       if (TARGET_ABI_UNICOSMK)\n-\twarning (\"-mieee-with-inexact not supported on Unicos/Mk\");\n+\twarning (0, \"-mieee-with-inexact not supported on Unicos/Mk\");\n       else\n \t{\n \t  alpha_tp = ALPHA_TP_INSN;\n@@ -424,14 +424,14 @@ override_options (void)\n \n   if (TARGET_ABI_UNICOSMK && alpha_fptm != ALPHA_FPTM_N)\n     {\n-      warning (\"trap mode not supported on Unicos/Mk\");\n+      warning (0, \"trap mode not supported on Unicos/Mk\");\n       alpha_fptm = ALPHA_FPTM_N;\n     }\n \n   if ((alpha_fptm == ALPHA_FPTM_SU || alpha_fptm == ALPHA_FPTM_SUI)\n       && alpha_tp != ALPHA_TP_INSN && alpha_cpu != PROCESSOR_EV6)\n     {\n-      warning (\"fp software completion requires -mtrap-precision=i\");\n+      warning (0, \"fp software completion requires -mtrap-precision=i\");\n       alpha_tp = ALPHA_TP_INSN;\n     }\n \n@@ -447,16 +447,16 @@ override_options (void)\n     {\n       if (alpha_fprm == ALPHA_FPRM_MINF || alpha_fprm == ALPHA_FPRM_DYN)\n \t{\n-\t  warning (\"rounding mode not supported for VAX floats\");\n+\t  warning (0, \"rounding mode not supported for VAX floats\");\n \t  alpha_fprm = ALPHA_FPRM_NORM;\n \t}\n       if (alpha_fptm == ALPHA_FPTM_SUI)\n \t{\n-\t  warning (\"trap mode not supported for VAX floats\");\n+\t  warning (0, \"trap mode not supported for VAX floats\");\n \t  alpha_fptm = ALPHA_FPTM_SU;\n \t}\n       if (target_flags_explicit & MASK_LONG_DOUBLE_128)\n-\twarning (\"128-bit long double not supported for VAX floats\");\n+\twarning (0, \"128-bit long double not supported for VAX floats\");\n       target_flags &= ~MASK_LONG_DOUBLE_128;\n     }\n \n@@ -484,7 +484,7 @@ override_options (void)\n \tlat = alpha_mlat_string[1] - '0';\n \tif (lat <= 0 || lat > 3 || cache_latency[alpha_tune][lat-1] == -1)\n \t  {\n-\t    warning (\"L%d cache latency unknown for %s\",\n+\t    warning (0, \"L%d cache latency unknown for %s\",\n \t\t     lat, alpha_cpu_name[alpha_tune]);\n \t    lat = 3;\n \t  }\n@@ -499,7 +499,7 @@ override_options (void)\n       }\n     else\n       {\n-\twarning (\"bad value %qs for -mmemory-latency\", alpha_mlat_string);\n+\twarning (0, \"bad value %qs for -mmemory-latency\", alpha_mlat_string);\n \tlat = 3;\n       }\n "}, {"sha": "91c27c155f0b6351fbd94f088719e591ade655c8", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -410,14 +410,14 @@ arc_handle_interrupt_attribute (tree *node ATTRIBUTE_UNUSED,\n \n   if (TREE_CODE (value) != STRING_CST)\n     {\n-      warning (\"argument of %qs attribute is not a string constant\",\n+      warning (0, \"argument of %qs attribute is not a string constant\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n   else if (strcmp (TREE_STRING_POINTER (value), \"ilink1\")\n \t   && strcmp (TREE_STRING_POINTER (value), \"ilink2\"))\n     {\n-      warning (\"argument of %qs attribute is not \\\"ilink1\\\" or \\\"ilink2\\\"\",\n+      warning (0, \"argument of %qs attribute is not \\\"ilink1\\\" or \\\"ilink2\\\"\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }"}, {"sha": "7349b1e2dc2cc82b575fc98b3db1f5d1402ed3a6", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -806,7 +806,7 @@ arm_override_options (void)\n \t\t       a warning though, and we prefer the CPU over the\n \t\t       architecture.  */\n \t\t    if (insn_flags != 0 && (insn_flags ^ sel->flags))\n-\t\t      warning (\"switch -mcpu=%s conflicts with -march= switch\",\n+\t\t      warning (0, \"switch -mcpu=%s conflicts with -march= switch\",\n \t\t\t       ptr->string);\n \n \t\t    insn_flags = sel->flags;\n@@ -925,37 +925,37 @@ arm_override_options (void)\n      other command line choices.  */\n   if (TARGET_INTERWORK && !(insn_flags & FL_THUMB))\n     {\n-      warning (\"target CPU does not support interworking\" );\n+      warning (0, \"target CPU does not support interworking\" );\n       target_flags &= ~ARM_FLAG_INTERWORK;\n     }\n \n   if (TARGET_THUMB && !(insn_flags & FL_THUMB))\n     {\n-      warning (\"target CPU does not support THUMB instructions\");\n+      warning (0, \"target CPU does not support THUMB instructions\");\n       target_flags &= ~ARM_FLAG_THUMB;\n     }\n \n   if (TARGET_APCS_FRAME && TARGET_THUMB)\n     {\n-      /* warning (\"ignoring -mapcs-frame because -mthumb was used\"); */\n+      /* warning (0, \"ignoring -mapcs-frame because -mthumb was used\"); */\n       target_flags &= ~ARM_FLAG_APCS_FRAME;\n     }\n \n   /* TARGET_BACKTRACE calls leaf_function_p, which causes a crash if done\n      from here where no function is being compiled currently.  */\n   if ((target_flags & (THUMB_FLAG_LEAF_BACKTRACE | THUMB_FLAG_BACKTRACE))\n       && TARGET_ARM)\n-    warning (\"enabling backtrace support is only meaningful when compiling for the Thumb\");\n+    warning (0, \"enabling backtrace support is only meaningful when compiling for the Thumb\");\n \n   if (TARGET_ARM && TARGET_CALLEE_INTERWORKING)\n-    warning (\"enabling callee interworking support is only meaningful when compiling for the Thumb\");\n+    warning (0, \"enabling callee interworking support is only meaningful when compiling for the Thumb\");\n \n   if (TARGET_ARM && TARGET_CALLER_INTERWORKING)\n-    warning (\"enabling caller interworking support is only meaningful when compiling for the Thumb\");\n+    warning (0, \"enabling caller interworking support is only meaningful when compiling for the Thumb\");\n \n   if (TARGET_APCS_STACK && !TARGET_APCS_FRAME)\n     {\n-      warning (\"-mapcs-stack-check incompatible with -mno-apcs-frame\");\n+      warning (0, \"-mapcs-stack-check incompatible with -mno-apcs-frame\");\n       target_flags |= ARM_FLAG_APCS_FRAME;\n     }\n \n@@ -966,23 +966,23 @@ arm_override_options (void)\n     error (\"-fpic and -mapcs-reent are incompatible\");\n \n   if (TARGET_APCS_REENT)\n-    warning (\"APCS reentrant code not supported.  Ignored\");\n+    warning (0, \"APCS reentrant code not supported.  Ignored\");\n \n   /* If this target is normally configured to use APCS frames, warn if they\n      are turned off and debugging is turned on.  */\n   if (TARGET_ARM\n       && write_symbols != NO_DEBUG\n       && !TARGET_APCS_FRAME\n       && (TARGET_DEFAULT & ARM_FLAG_APCS_FRAME))\n-    warning (\"-g with -mno-apcs-frame may not give sensible debugging\");\n+    warning (0, \"-g with -mno-apcs-frame may not give sensible debugging\");\n \n   /* If stack checking is disabled, we can use r10 as the PIC register,\n      which keeps r9 available.  */\n   if (flag_pic)\n     arm_pic_register = TARGET_APCS_STACK ? 9 : 10;\n \n   if (TARGET_APCS_FLOAT)\n-    warning (\"passing floating point arguments in fp regs not yet supported\");\n+    warning (0, \"passing floating point arguments in fp regs not yet supported\");\n \n   /* Initialize boolean versions of the flags, for use in the arm.md file.  */\n   arm_arch3m = (insn_flags & FL_ARCH3M) != 0;\n@@ -1141,7 +1141,7 @@ arm_override_options (void)\n \t  || (ARM_DOUBLEWORD_ALIGN && size == 64))\n \tarm_structure_size_boundary = size;\n       else\n-\twarning (\"structure size boundary can only be set to %s\",\n+\twarning (0, \"structure size boundary can only be set to %s\",\n \t\t ARM_DOUBLEWORD_ALIGN ? \"8, 32 or 64\": \"8 or 32\");\n     }\n \n@@ -1150,7 +1150,7 @@ arm_override_options (void)\n       int pic_register = decode_reg_name (arm_pic_register_string);\n \n       if (!flag_pic)\n-\twarning (\"-mpic-register= is useless without -fpic\");\n+\twarning (0, \"-mpic-register= is useless without -fpic\");\n \n       /* Prevent the user from choosing an obviously stupid PIC register.  */\n       else if (pic_register < 0 || call_used_regs[pic_register]\n@@ -2674,7 +2674,7 @@ arm_handle_fndecl_attribute (tree *node, tree name, tree args ATTRIBUTE_UNUSED,\n {\n   if (TREE_CODE (*node) != FUNCTION_DECL)\n     {\n-      warning (\"%qs attribute only applies to functions\",\n+      warning (0, \"%qs attribute only applies to functions\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n@@ -2692,7 +2692,7 @@ arm_handle_isr_attribute (tree *node, tree name, tree args, int flags,\n     {\n       if (TREE_CODE (*node) != FUNCTION_DECL)\n \t{\n-\t  warning (\"%qs attribute only applies to functions\",\n+\t  warning (0, \"%qs attribute only applies to functions\",\n \t\t   IDENTIFIER_POINTER (name));\n \t  *no_add_attrs = true;\n \t}\n@@ -2706,7 +2706,7 @@ arm_handle_isr_attribute (tree *node, tree name, tree args, int flags,\n \t{\n \t  if (arm_isr_value (args) == ARM_FT_UNKNOWN)\n \t    {\n-\t      warning (\"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n+\t      warning (0, \"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n \t      *no_add_attrs = true;\n \t    }\n \t}\n@@ -2733,7 +2733,7 @@ arm_handle_isr_attribute (tree *node, tree name, tree args, int flags,\n \t    }\n \t  else\n \t    {\n-\t      warning (\"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n+\t      warning (0, \"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n \t    }\n \t}\n     }\n@@ -11400,7 +11400,7 @@ arm_debugger_arg_offset (int value, rtx addr)\n   if (value == 0)\n     {\n       debug_rtx (addr);\n-      warning (\"unable to compute real location of stacked parameter\");\n+      warning (0, \"unable to compute real location of stacked parameter\");\n       value = 8; /* XXX magic hack */\n     }\n "}, {"sha": "bc51d9181c20d55069ee1a04b4f0e9e4483441b5", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -552,7 +552,7 @@ out_adj_frame_ptr (FILE *file, int adj)\n       if (TARGET_TINY_STACK)\n \t{\n \t  if (adj < -63 || adj > 63)\n-\t    warning (\"large frame pointer change (%d) with -mtiny-stack\", adj);\n+\t    warning (0, \"large frame pointer change (%d) with -mtiny-stack\", adj);\n \n \t  /* The high byte (r29) doesn't change - prefer \"subi\" (1 cycle)\n \t     over \"sbiw\" (2 cycles, same size).  */\n@@ -4670,14 +4670,14 @@ avr_handle_progmem_attribute (tree *node, tree name,\n \t{\n \t  if (DECL_INITIAL (*node) == NULL_TREE && !DECL_EXTERNAL (*node))\n \t    {\n-\t      warning (\"only initialized variables can be placed into \"\n+\t      warning (0, \"only initialized variables can be placed into \"\n \t\t       \"program memory area\");\n \t      *no_add_attrs = true;\n \t    }\n \t}\n       else\n \t{\n-\t  warning (\"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n+\t  warning (0, \"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n \t  *no_add_attrs = true;\n \t}\n     }\n@@ -4696,7 +4696,7 @@ avr_handle_fndecl_attribute (tree *node, tree name,\n {\n   if (TREE_CODE (*node) != FUNCTION_DECL)\n     {\n-      warning (\"%qs attribute only applies to functions\",\n+      warning (0, \"%qs attribute only applies to functions\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n@@ -4713,15 +4713,15 @@ avr_handle_fndecl_attribute (tree *node, tree name,\n         {\n           if (strncmp (func_name, \"__vector\", strlen (\"__vector\")) != 0)\n             {\n-              warning (\"`%s' appears to be a misspelled interrupt handler\",\n+              warning (0, \"`%s' appears to be a misspelled interrupt handler\",\n                        func_name);\n             }\n         }\n       else if (strncmp (attr, \"signal\", strlen (\"signal\")) == 0)\n         {\n           if (strncmp (func_name, \"__vector\", strlen (\"__vector\")) != 0)\n             {\n-              warning (\"`%s' appears to be a misspelled signal handler\",\n+              warning (0, \"`%s' appears to be a misspelled signal handler\",\n                        func_name);\n             }\n         }\n@@ -4790,7 +4790,7 @@ avr_section_type_flags (tree decl, const char *name, int reloc)\n \t  && DECL_INITIAL (decl) == NULL_TREE)\n \tflags |= SECTION_BSS;  /* @nobits */\n       else\n-\twarning (\"only uninitialized variables can be placed in the \"\n+\twarning (0, \"only uninitialized variables can be placed in the \"\n \t\t \".noinit section\");\n     }\n "}, {"sha": "966250a88678042002a5761ce709fc429542fadb", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -2554,7 +2554,7 @@ handle_int_attribute (tree *node, tree name,\n \n   if (TREE_CODE (x) != FUNCTION_TYPE)\n     {\n-      warning (\"%qs attribute only applies to functions\",\n+      warning (0, \"%qs attribute only applies to functions\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }"}, {"sha": "fa30b439f39846e1baaa0838959ae86994f7cbfe", "filename": "gcc/config/c4x/c4x-c.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fc4x%2Fc4x-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fc4x%2Fc4x-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x-c.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -57,7 +57,7 @@ static int c4x_parse_pragma (const char *, tree *, tree *);\n    the STRING_CST node of the string.  If SECT is null, then this\n    pragma doesn't take a section string.  Returns 0 for a good pragma,\n    -1 for a malformed pragma.  */\n-#define BAD(msgid, arg) do { warning (msgid, arg); return -1; } while (0)\n+#define BAD(msgid, arg) do { warning (0, msgid, arg); return -1; } while (0)\n \n static int\n c4x_parse_pragma (name, func, sect)\n@@ -86,7 +86,7 @@ c4x_parse_pragma (name, func, sect)\n     BAD (\"missing ')' for '#pragma %s' - ignored\", name);\n \n   if (c_lex (&x) != CPP_EOF)\n-    warning (\"junk at end of '#pragma %s'\", name);\n+    warning (0, \"junk at end of '#pragma %s'\", name);\n \n   *func = f;\n   return 0;"}, {"sha": "3847591bd1e2b89638842b6781e297aa2da2d9a4", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -4485,7 +4485,7 @@ c4x_handle_fntype_attribute (tree *node, tree name,\n {\n   if (TREE_CODE (*node) != FUNCTION_TYPE)\n     {\n-      warning (\"%qs attribute only applies to functions\",\n+      warning (0, \"%qs attribute only applies to functions\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }"}, {"sha": "19d250c8549aff564919cdfef1e1d7270a490de9", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -2218,7 +2218,7 @@ cris_override_options (void)\n \n   if (write_symbols == DWARF2_DEBUG && ! TARGET_ELF)\n     {\n-      warning (\"that particular -g option is invalid with -maout and -melinux\");\n+      warning (0, \"that particular -g option is invalid with -maout and -melinux\");\n       write_symbols = DBX_DEBUG;\n     }\n \n@@ -2730,7 +2730,7 @@ cris_expand_prologue (void)\n     }\n \n   if (cris_max_stackframe && framesize > cris_max_stackframe)\n-    warning (\"stackframe too big: %d bytes\", framesize);\n+    warning (0, \"stackframe too big: %d bytes\", framesize);\n }\n \n /* The expander for the epilogue pattern.  */"}, {"sha": "1aa10d520a0faca6fbb6cd9f4711dea36c7fd989", "filename": "gcc/config/darwin-c.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fdarwin-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fdarwin-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-c.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -35,7 +35,7 @@ Boston, MA 02111-1307, USA.  */\n \n /* Pragmas.  */\n \n-#define BAD(msgid) do { warning (msgid); return; } while (0)\n+#define BAD(msgid) do { warning (0, msgid); return; } while (0)\n \n static bool using_frameworks = false;\n \n@@ -111,7 +111,7 @@ darwin_pragma_options (cpp_reader *pfile ATTRIBUTE_UNUSED)\n     BAD (\"malformed '#pragma options', ignoring\");\n \n   if (c_lex (&x) != CPP_EOF)\n-    warning (\"junk at end of '#pragma options'\");\n+    warning (0, \"junk at end of '#pragma options'\");\n \n   arg = IDENTIFIER_POINTER (t);\n   if (!strcmp (arg, \"mac68k\"))\n@@ -121,7 +121,7 @@ darwin_pragma_options (cpp_reader *pfile ATTRIBUTE_UNUSED)\n   else if (!strcmp (arg, \"reset\"))\n     pop_field_alignment ();\n   else\n-    warning (\"malformed '#pragma options align={mac68k|power|reset}', ignoring\");\n+    warning (0, \"malformed '#pragma options align={mac68k|power|reset}', ignoring\");\n }\n \n /* #pragma unused ([var {, var}*]) */\n@@ -154,7 +154,7 @@ darwin_pragma_unused (cpp_reader *pfile ATTRIBUTE_UNUSED)\n     BAD (\"missing ')' after '#pragma unused', ignoring\");\n \n   if (c_lex (&x) != CPP_EOF)\n-    warning (\"junk at end of '#pragma unused'\");\n+    warning (0, \"junk at end of '#pragma unused'\");\n }\n \n static struct {\n@@ -380,7 +380,7 @@ find_subframework_file (const char *fname, const char *pname)\n \t  if (fast_dir != &subframe_dir)\n \t    {\n \t      if (fast_dir)\n-\t\twarning (\"subframework include %s conflicts with framework include\",\n+\t\twarning (0, \"subframework include %s conflicts with framework include\",\n \t\t\t fname);\n \t      else\n \t\tadd_framework (fname, fname_len, &subframe_dir);"}, {"sha": "ef77cfef5a2a7ebcca487c95c0938caabe333f32", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -1231,7 +1231,7 @@ darwin_handle_weak_import_attribute (tree *node, tree name,\n {\n   if (TREE_CODE (*node) != FUNCTION_DECL && TREE_CODE (*node) != VAR_DECL)\n     {\n-      warning (\"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n+      warning (0, \"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n   else\n@@ -1345,7 +1345,7 @@ darwin_assemble_visibility (tree decl, int vis)\n       fputs (\"\\n\", asm_out_file);\n     }\n   else\n-    warning (\"internal and protected visibility attributes not supported \"\n+    warning (0, \"internal and protected visibility attributes not supported \"\n \t     \"in this configuration; ignored\");\n }\n "}, {"sha": "3ccfea6a5f52467afc3660ff34c59aa33a1c4bf5", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -374,7 +374,7 @@ Boston, MA 02111-1307, USA.  */\n   do {\t\t\t\t\t\t\t\t\t\\\n     if (ALIAS)\t\t\t\t\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n-\twarning (\"alias definitions not supported in Mach-O; ignored\");\t\\\n+\twarning (0, \"alias definitions not supported in Mach-O; ignored\");\t\\\n \tbreak;\t\t\t\t\t\t\t\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n  \t\t\t\t\t\t\t\t\t\\"}, {"sha": "4f12f6a476f07b0fba1f600641ff41138a1e5e23", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -5264,7 +5264,7 @@ h8300_handle_fndecl_attribute (tree *node, tree name,\n {\n   if (TREE_CODE (*node) != FUNCTION_DECL)\n     {\n-      warning (\"%qs attribute only applies to functions\",\n+      warning (0, \"%qs attribute only applies to functions\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n@@ -5288,7 +5288,7 @@ h8300_handle_eightbit_data_attribute (tree *node, tree name,\n     }\n   else\n     {\n-      warning (\"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n+      warning (0, \"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n \n@@ -5311,7 +5311,7 @@ h8300_handle_tiny_data_attribute (tree *node, tree name,\n     }\n   else\n     {\n-      warning (\"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n+      warning (0, \"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n "}, {"sha": "94678231b82b76d7728ee1f3d87f3ed61d60234a", "filename": "gcc/config/i386/cygming.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fi386%2Fcygming.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fi386%2Fcygming.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygming.h?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -162,7 +162,7 @@ switch_to_section (enum in_section section, tree decl)\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n   if (flag_pic)\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      warning (\"-f%s ignored for target (all code is position independent)\",\\\n+      warning (0, \"-f%s ignored for target (all code is position independent)\",\\\n \t       (flag_pic > 1) ? \"PIC\" : \"pic\");\t\t\t\t\\\n       flag_pic = 0;\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\"}, {"sha": "aedebb5f3aab34c3957c142e1ed7adeb93247a60", "filename": "gcc/config/i386/djgpp.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fi386%2Fdjgpp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fi386%2Fdjgpp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdjgpp.h?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -178,7 +178,7 @@ do \\\n   { \\\n     if (TARGET_BNU210) \\\n       {\t\\\n-        warning (\"-mbnu210 is ignored (option is obsolete)\"); \\\n+        warning (0, \"-mbnu210 is ignored (option is obsolete)\"); \\\n       }\t\\\n   } \\\n while (0)"}, {"sha": "5046cf5e33ba51f5ca9718393c7ee932003c84ba", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -1477,7 +1477,7 @@ override_options (void)\n      Remove this code in GCC 3.2 or later.  */\n   if (ix86_align_loops_string)\n     {\n-      warning (\"-malign-loops is obsolete, use -falign-loops\");\n+      warning (0, \"-malign-loops is obsolete, use -falign-loops\");\n       if (align_loops == 0)\n \t{\n \t  i = atoi (ix86_align_loops_string);\n@@ -1490,7 +1490,7 @@ override_options (void)\n \n   if (ix86_align_jumps_string)\n     {\n-      warning (\"-malign-jumps is obsolete, use -falign-jumps\");\n+      warning (0, \"-malign-jumps is obsolete, use -falign-jumps\");\n       if (align_jumps == 0)\n \t{\n \t  i = atoi (ix86_align_jumps_string);\n@@ -1503,7 +1503,7 @@ override_options (void)\n \n   if (ix86_align_funcs_string)\n     {\n-      warning (\"-malign-functions is obsolete, use -falign-functions\");\n+      warning (0, \"-malign-functions is obsolete, use -falign-functions\");\n       if (align_functions == 0)\n \t{\n \t  i = atoi (ix86_align_funcs_string);\n@@ -1641,7 +1641,7 @@ override_options (void)\n \t{\n \t  if (!TARGET_SSE)\n \t    {\n-\t      warning (\"SSE instruction set disabled, using 387 arithmetics\");\n+\t      warning (0, \"SSE instruction set disabled, using 387 arithmetics\");\n \t      ix86_fpmath = FPMATH_387;\n \t    }\n \t  else\n@@ -1652,12 +1652,12 @@ override_options (void)\n \t{\n \t  if (!TARGET_SSE)\n \t    {\n-\t      warning (\"SSE instruction set disabled, using 387 arithmetics\");\n+\t      warning (0, \"SSE instruction set disabled, using 387 arithmetics\");\n \t      ix86_fpmath = FPMATH_387;\n \t    }\n \t  else if (!TARGET_80387)\n \t    {\n-\t      warning (\"387 instruction set disabled, using SSE arithmetics\");\n+\t      warning (0, \"387 instruction set disabled, using SSE arithmetics\");\n \t      ix86_fpmath = FPMATH_SSE;\n \t    }\n \t  else\n@@ -1815,7 +1815,7 @@ ix86_handle_cdecl_attribute (tree *node, tree name,\n       && TREE_CODE (*node) != FIELD_DECL\n       && TREE_CODE (*node) != TYPE_DECL)\n     {\n-      warning (\"%qs attribute only applies to functions\",\n+      warning (0, \"%qs attribute only applies to functions\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n@@ -1843,7 +1843,7 @@ ix86_handle_cdecl_attribute (tree *node, tree name,\n \n   if (TARGET_64BIT)\n     {\n-      warning (\"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n+      warning (0, \"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n \n@@ -1861,7 +1861,7 @@ ix86_handle_regparm_attribute (tree *node, tree name, tree args,\n       && TREE_CODE (*node) != FIELD_DECL\n       && TREE_CODE (*node) != TYPE_DECL)\n     {\n-      warning (\"%qs attribute only applies to functions\",\n+      warning (0, \"%qs attribute only applies to functions\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n@@ -1872,13 +1872,13 @@ ix86_handle_regparm_attribute (tree *node, tree name, tree args,\n       cst = TREE_VALUE (args);\n       if (TREE_CODE (cst) != INTEGER_CST)\n \t{\n-\t  warning (\"%qs attribute requires an integer constant argument\",\n+\t  warning (0, \"%qs attribute requires an integer constant argument\",\n \t\t   IDENTIFIER_POINTER (name));\n \t  *no_add_attrs = true;\n \t}\n       else if (compare_tree_int (cst, REGPARM_MAX) > 0)\n \t{\n-\t  warning (\"argument to %qs attribute larger than %d\",\n+\t  warning (0, \"argument to %qs attribute larger than %d\",\n \t\t   IDENTIFIER_POINTER (name), REGPARM_MAX);\n \t  *no_add_attrs = true;\n \t}\n@@ -2990,7 +2990,7 @@ function_arg (CUMULATIVE_ARGS *cum, enum machine_mode orig_mode,\n \t    if (!TARGET_SSE && !warnedsse && cum->warn_sse)\n \t      {\n \t\twarnedsse = true;\n-\t\twarning (\"SSE vector argument without SSE enabled \"\n+\t\twarning (0, \"SSE vector argument without SSE enabled \"\n \t\t\t \"changes the ABI\");\n \t      }\n \t    if (cum->sse_nregs)\n@@ -3007,7 +3007,7 @@ function_arg (CUMULATIVE_ARGS *cum, enum machine_mode orig_mode,\n \t    if (!TARGET_MMX && !warnedmmx && cum->warn_mmx)\n \t      {\n \t\twarnedmmx = true;\n-\t\twarning (\"MMX vector argument without MMX enabled \"\n+\t\twarning (0, \"MMX vector argument without MMX enabled \"\n \t\t\t \"changes the ABI\");\n \t      }\n \t    if (cum->mmx_nregs)\n@@ -3260,7 +3260,7 @@ ix86_struct_value_rtx (tree type, int incoming ATTRIBUTE_UNUSED)\n \t  || (VECTOR_MODE_P (mode) && GET_MODE_SIZE (mode) == 16))\n \t{\n \t  warned = true;\n-\t  warning (\"SSE vector return without SSE enabled changes the ABI\");\n+\t  warning (0, \"SSE vector return without SSE enabled changes the ABI\");\n \t}\n     }\n \n@@ -15988,7 +15988,7 @@ ix86_handle_struct_attribute (tree *node, tree name,\n   if (!(type && (TREE_CODE (*type) == RECORD_TYPE\n \t\t || TREE_CODE (*type) == UNION_TYPE)))\n     {\n-      warning (\"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n+      warning (0, \"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n \n@@ -15997,7 +15997,7 @@ ix86_handle_struct_attribute (tree *node, tree name,\n \t   || ((is_attribute_p (\"gcc_struct\", name)\n \t\t&& lookup_attribute (\"ms_struct\", TYPE_ATTRIBUTES (*type)))))\n     {\n-      warning (\"%qs incompatible attribute ignored\",\n+      warning (0, \"%qs incompatible attribute ignored\",\n                IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }"}, {"sha": "26304806c77b7ec1febac4dbe6640b687b71b1b6", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -71,7 +71,7 @@ ix86_handle_shared_attribute (tree *node, tree name,\n {\n   if (TREE_CODE (*node) != VAR_DECL)\n     {\n-      warning (\"%qs attribute only applies to variables\",\n+      warning (0, \"%qs attribute only applies to variables\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n@@ -199,7 +199,7 @@ i386_pe_dllimport_p (tree decl)\n \t{\n \t   /* Don't warn about artificial methods.  */\n \t  if (!DECL_ARTIFICIAL (decl))\n-\t    warning (\"%Jfunction '%D' is defined after prior declaration \"\n+\t    warning (0, \"%Jfunction '%D' is defined after prior declaration \"\n \t\t     \"as dllimport: attribute ignored\", decl, decl);\n \t  return 0;\n \t}\n@@ -210,7 +210,7 @@ i386_pe_dllimport_p (tree decl)\n       else if (TREE_CODE (decl) == FUNCTION_DECL && DECL_INLINE (decl))\n         {\n \t  if (extra_warnings)\n-\t    warning (\"%Jinline function '%D' is declared as dllimport: \"\n+\t    warning (0, \"%Jinline function '%D' is declared as dllimport: \"\n \t\t     \"attribute ignored.\", decl, decl);\n \t  return 0;\n \t}\n@@ -279,7 +279,7 @@ i386_pe_mark_dllexport (tree decl)\n   oldname = XSTR (rtlname, 0);\n   if (i386_pe_dllimport_name_p (oldname))\n     {\n-      warning (\"%Jinconsistent dll linkage for '%D', dllexport assumed.\",\n+      warning (0, \"%Jinconsistent dll linkage for '%D', dllexport assumed.\",\n \t       decl, decl);\n      /* Remove DLL_IMPORT_PREFIX.  */\n       oldname += strlen (DLL_IMPORT_PREFIX);\n@@ -463,10 +463,10 @@ i386_pe_encode_section_info (tree decl, rtx rtl, int first)\n \t We leave these alone for now.  */\n \n       if (DECL_INITIAL (decl) || !DECL_EXTERNAL (decl))\n-\twarning (\"%J'%D' defined locally after being \"\n+\twarning (0, \"%J'%D' defined locally after being \"\n \t\t \"referenced with dllimport linkage\", decl, decl);\n       else\n-\twarning (\"%J'%D' redeclared without dllimport attribute \"\n+\twarning (0, \"%J'%D' redeclared without dllimport attribute \"\n \t\t \"after being referenced with dllimport linkage\", decl, decl);\n     }\n }"}, {"sha": "2412f5c5b4e73a93fc7f99d1c02ff55373ac907c", "filename": "gcc/config/ia64/ia64-c.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fia64%2Fia64-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fia64%2Fia64-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64-c.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -49,7 +49,7 @@ ia64_hpux_handle_builtin_pragma (cpp_reader *pfile ATTRIBUTE_UNUSED)\n \ttype = c_lex (&x);\n     }\n   if (type != CPP_EOF)\n-    warning (\"malformed #pragma builtin\");\n+    warning (0, \"malformed #pragma builtin\");\n }\n \n /* List of standard math functions which do not set matherr by default"}, {"sha": "9201bb8a549d598e79fe7018c152477e5572a92b", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -482,7 +482,7 @@ ia64_handle_model_attribute (tree *node, tree name, tree args,\n     }\n   else\n     {\n-      warning (\"invalid argument of %qs attribute\",\n+      warning (0, \"invalid argument of %qs attribute\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n@@ -514,7 +514,7 @@ ia64_handle_model_attribute (tree *node, tree name, tree args,\n       break;\n \n     default:\n-      warning (\"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n+      warning (0, \"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n       break;\n     }\n@@ -4548,7 +4548,7 @@ fix_range (const char *const_str)\n       dash = strchr (str, '-');\n       if (!dash)\n \t{\n-\t  warning (\"value of -mfixed-range must have form REG1-REG2\");\n+\t  warning (0, \"value of -mfixed-range must have form REG1-REG2\");\n \t  return;\n \t}\n       *dash = '\\0';\n@@ -4560,22 +4560,22 @@ fix_range (const char *const_str)\n       first = decode_reg_name (str);\n       if (first < 0)\n \t{\n-\t  warning (\"unknown register name: %s\", str);\n+\t  warning (0, \"unknown register name: %s\", str);\n \t  return;\n \t}\n \n       last = decode_reg_name (dash + 1);\n       if (last < 0)\n \t{\n-\t  warning (\"unknown register name: %s\", dash + 1);\n+\t  warning (0, \"unknown register name: %s\", dash + 1);\n \t  return;\n \t}\n \n       *dash = '-';\n \n       if (first > last)\n \t{\n-\t  warning (\"%s-%s is an empty range\", str, dash + 1);\n+\t  warning (0, \"%s-%s is an empty range\", str, dash + 1);\n \t  return;\n \t}\n \n@@ -4656,7 +4656,7 @@ ia64_override_options (void)\n \n   if (TARGET_INLINE_SQRT == INL_MIN_LAT)\n     {\n-      warning (\"not yet implemented: latency-optimized inline square root\");\n+      warning (0, \"not yet implemented: latency-optimized inline square root\");\n       TARGET_INLINE_SQRT = INL_MAX_THR;\n     }\n "}, {"sha": "314a2c760f842799157fa55319de0d4ba25c63a1", "filename": "gcc/config/ip2k/ip2k.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fip2k%2Fip2k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fip2k%2Fip2k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fip2k%2Fip2k.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -3154,14 +3154,14 @@ ip2k_handle_progmem_attribute (tree *node, tree name,\n \t{\n \t  if (DECL_INITIAL (*node) == NULL_TREE && !DECL_EXTERNAL (*node))\n \t    {\n-\t      warning (\"only initialized variables can be placed into \"\n+\t      warning (0, \"only initialized variables can be placed into \"\n \t\t       \"program memory area\");\n \t      *no_add_attrs = true;\n \t    }\n \t}\n       else\n \t{\n-\t  warning (\"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n+\t  warning (0, \"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n \t  *no_add_attrs = true;\n \t}\n     }\n@@ -3179,7 +3179,7 @@ ip2k_handle_fndecl_attribute (tree *node, tree name,\n {\n   if (TREE_CODE (*node) != FUNCTION_DECL)\n     {\n-      warning (\"%qs attribute only applies to functions\",\n+      warning (0, \"%qs attribute only applies to functions\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }"}, {"sha": "858251b3ef6e9b6f454b24de7997052224ceed02", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -387,7 +387,7 @@ m32r_handle_model_attribute (tree *node ATTRIBUTE_UNUSED, tree name,\n       && arg != large_ident1\n       && arg != large_ident2)\n     {\n-      warning (\"invalid argument of %qs attribute\",\n+      warning (0, \"invalid argument of %qs attribute\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }"}, {"sha": "06c7e3ec9ae6e6b849fe461c6def5ae2908234b3", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -284,7 +284,7 @@ m68hc11_override_options (void)\n   /* Compilation with -fpic generates a wrong code.  */\n   if (flag_pic)\n     {\n-      warning (\"-f%s ignored for 68HC11/68HC12 (not supported)\",\n+      warning (0, \"-f%s ignored for 68HC11/68HC12 (not supported)\",\n \t       (flag_pic > 1) ? \"PIC\" : \"pic\");\n       flag_pic = 0;\n     }\n@@ -1123,7 +1123,7 @@ m68hc11_handle_page0_attribute (tree *node, tree name,\n     }\n   else\n     {\n-      warning (\"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n+      warning (0, \"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n \n@@ -1159,7 +1159,7 @@ m68hc11_handle_fntype_attribute (tree *node, tree name,\n       && TREE_CODE (*node) != FIELD_DECL\n       && TREE_CODE (*node) != TYPE_DECL)\n     {\n-      warning (\"%qs attribute only applies to functions\",\n+      warning (0, \"%qs attribute only applies to functions\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n@@ -1244,13 +1244,13 @@ m68hc11_encode_section_info (tree decl, rtx rtl, int first ATTRIBUTE_UNUSED)\n   trap_handler = lookup_attribute (\"trap\", func_attr) != NULL_TREE;\n   if (trap_handler && is_far)\n     {\n-      warning (\"%<trap%> and %<far%> attributes are not compatible, ignoring %<far%>\");\n+      warning (0, \"%<trap%> and %<far%> attributes are not compatible, ignoring %<far%>\");\n       trap_handler = 0;\n     }\n   if (trap_handler)\n     {\n       if (trap_handler_symbol != 0)\n-        warning (\"%<trap%> attribute is already used\");\n+        warning (0, \"%<trap%> attribute is already used\");\n       else\n         trap_handler_symbol = XEXP (rtl, 0);\n     }"}, {"sha": "60b605c75aaaba7af52e5f50df10d145612b849c", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -373,7 +373,7 @@ m68k_handle_fndecl_attribute (tree *node, tree name,\n {\n   if (TREE_CODE (*node) != FUNCTION_DECL)\n     {\n-      warning (\"%qs attribute only applies to functions\",\n+      warning (0, \"%qs attribute only applies to functions\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n@@ -632,7 +632,7 @@ m68k_output_function_prologue (FILE *stream, HOST_WIDE_INT size ATTRIBUTE_UNUSED\n \tasm_fprintf (stream, \"\\tcmp\" ASM_DOT \"l %s,%Rsp\\n\\ttrapcs\\n\",\n \t\t     M68K_REGNAME(REGNO (stack_limit_rtx)));\n       else if (GET_CODE (stack_limit_rtx) != SYMBOL_REF)\n-\twarning (\"stack limit expression is not supported\");\n+\twarning (0, \"stack limit expression is not supported\");\n     }\n \n   if (current_frame.reg_no <= 2)"}, {"sha": "826e78713a6de69ddb48273e05deb803215cff3b", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -3059,7 +3059,7 @@ mcore_handle_naked_attribute (tree * node, tree name, tree args ATTRIBUTE_UNUSED\n     }\n   else\n     {\n-      warning (\"%qs attribute only applies to functions\",\n+      warning (0, \"%qs attribute only applies to functions\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }"}, {"sha": "12a6b2debed723f49e1e34d9dbe0663cda2768a2", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -4350,7 +4350,7 @@ override_options (void)\n \n   /* Deprecate -mint64. Remove after 4.0 branches.  */\n   if (TARGET_INT64)\n-    warning (\"-mint64 is a deprecated option\");\n+    warning (0, \"-mint64 is a deprecated option\");\n \n   if (TARGET_INT64 && !TARGET_LONG64)\n     error (\"unsupported combination: %s\", \"-mint64 -mlong32\");\n@@ -4404,7 +4404,7 @@ override_options (void)\n \ttarget_flags &= ~MASK_BRANCHLIKELY;\n     }\n   if (TARGET_BRANCHLIKELY && !ISA_HAS_BRANCHLIKELY)\n-    warning (\"generation of Branch Likely instructions enabled, but not supported by architecture\");\n+    warning (0, \"generation of Branch Likely instructions enabled, but not supported by architecture\");\n \n   /* The effect of -mabicalls isn't defined for the EABI.  */\n   if (mips_abi == ABI_EABI && TARGET_ABICALLS)\n@@ -4421,7 +4421,7 @@ override_options (void)\n     {\n       flag_pic = 1;\n       if (mips_section_threshold > 0)\n-\twarning (\"-G is incompatible with PIC code which is the default\");\n+\twarning (0, \"-G is incompatible with PIC code which is the default\");\n     }\n \n   /* mips_split_addresses is a half-way house between explicit\n@@ -9215,7 +9215,7 @@ mips_parse_cpu (const char *cpu_string)\n   for (s = cpu_string; *s != 0; s++)\n     if (ISUPPER (*s))\n       {\n-\twarning (\"the cpu name must be lower case\");\n+\twarning (0, \"the cpu name must be lower case\");\n \tbreak;\n       }\n "}, {"sha": "99e3b1793c1214122601cbb9a579c0b1966b8df9", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -226,7 +226,7 @@ mmix_override_options (void)\n      labels.  */\n   if (flag_pic)\n     {\n-      warning (\"-f%s not supported: ignored\", (flag_pic > 1) ? \"PIC\" : \"pic\");\n+      warning (0, \"-f%s not supported: ignored\", (flag_pic > 1) ? \"PIC\" : \"pic\");\n       flag_pic = 0;\n     }\n }"}, {"sha": "661d59601b5ac75a2a8c93d7817e7c9006ffccfa", "filename": "gcc/config/ns32k/ns32k.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fns32k%2Fns32k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fns32k%2Fns32k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -1105,7 +1105,7 @@ ns32k_handle_fntype_attribute (tree *node, tree name,\n       && TREE_CODE (*node) != FIELD_DECL\n       && TREE_CODE (*node) != TYPE_DECL)\n     {\n-      warning (\"%qs attribute only applies to functions\",\n+      warning (0, \"%qs attribute only applies to functions\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }"}, {"sha": "ac0798307fc79867bd8a64cc71068235c78bfd42", "filename": "gcc/config/pa/pa-hpux11.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fpa%2Fpa-hpux11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fpa%2Fpa-hpux11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-hpux11.h?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -79,7 +79,7 @@ Boston, MA 02111-1307, USA.  */\n \t\tbuiltin_define (\"_INCLUDE_XOPEN_SOURCE_500\");\t\t\\\n \t      }\t\t\t\t\t\t\t\t\\\n \t    else if (flag_isoc94 || flag_isoc99 || c_dialect_cxx ())\t\\\n-\t      warning (\"-munix=98 option required for C89 \"\t\t\\\n+\t      warning (0, \"-munix=98 option required for C89 \"\t\t\\\n \t\t       \"Amendment 1 features.\\n\");\t\t\t\\\n \t  }\t\t\t\t\t\t\t\t\\\n \tif (TARGET_SIO)\t\t\t\t\t\t\t\\"}, {"sha": "37670f874c579ce1ba373fa194d87b72f254d923", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -317,7 +317,7 @@ fix_range (const char *const_str)\n       dash = strchr (str, '-');\n       if (!dash)\n \t{\n-\t  warning (\"value of -mfixed-range must have form REG1-REG2\");\n+\t  warning (0, \"value of -mfixed-range must have form REG1-REG2\");\n \t  return;\n \t}\n       *dash = '\\0';\n@@ -329,22 +329,22 @@ fix_range (const char *const_str)\n       first = decode_reg_name (str);\n       if (first < 0)\n \t{\n-\t  warning (\"unknown register name: %s\", str);\n+\t  warning (0, \"unknown register name: %s\", str);\n \t  return;\n \t}\n \n       last = decode_reg_name (dash + 1);\n       if (last < 0)\n \t{\n-\t  warning (\"unknown register name: %s\", dash + 1);\n+\t  warning (0, \"unknown register name: %s\", dash + 1);\n \t  return;\n \t}\n \n       *dash = '-';\n \n       if (first > last)\n \t{\n-\t  warning (\"%s-%s is an empty range\", str, dash + 1);\n+\t  warning (0, \"%s-%s is an empty range\", str, dash + 1);\n \t  return;\n \t}\n \n@@ -449,18 +449,18 @@ override_options (void)\n \n   if (flag_pic && TARGET_PORTABLE_RUNTIME)\n     {\n-      warning (\"PIC code generation is not supported in the portable runtime model\\n\");\n+      warning (0, \"PIC code generation is not supported in the portable runtime model\\n\");\n     }\n \n   if (flag_pic && TARGET_FAST_INDIRECT_CALLS)\n    {\n-      warning (\"PIC code generation is not compatible with fast indirect calls\\n\");\n+      warning (0, \"PIC code generation is not compatible with fast indirect calls\\n\");\n    }\n \n   if (! TARGET_GAS && write_symbols != NO_DEBUG)\n     {\n-      warning (\"-g is only supported when using GAS on this processor,\");\n-      warning (\"-g option disabled\");\n+      warning (0, \"-g is only supported when using GAS on this processor,\");\n+      warning (0, \"-g option disabled\");\n       write_symbols = NO_DEBUG;\n     }\n \n@@ -7837,7 +7837,7 @@ pa_asm_output_aligned_common (FILE *stream,\n   max_common_align = TARGET_64BIT ? 128 : (size >= 4096 ? 256 : 64);\n   if (align > max_common_align)\n     {\n-      warning (\"alignment (%u) for %s exceeds maximum alignment \"\n+      warning (0, \"alignment (%u) for %s exceeds maximum alignment \"\n \t       \"for global common data.  Using %u\",\n \t       align / BITS_PER_UNIT, name, max_common_align / BITS_PER_UNIT);\n       align = max_common_align;"}, {"sha": "12ac88b715ba6fffaca94e81af10db05c5667ac1", "filename": "gcc/config/rs6000/aix43.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Frs6000%2Faix43.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Frs6000%2Faix43.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix43.h?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -46,12 +46,12 @@ do {\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_64BIT && (target_flags & NON_POWERPC_MASKS))\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       target_flags &= ~NON_POWERPC_MASKS;\t\t\t\t\\\n-      warning (\"-maix64 and POWER architecture are incompatible\");\t\\\n+      warning (0, \"-maix64 and POWER architecture are incompatible\");\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_64BIT && ! TARGET_POWERPC64)\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       target_flags |= MASK_POWERPC64;\t\t\t\t\t\\\n-      warning (\"-maix64 requires PowerPC64 architecture remain enabled\"); \\\n+      warning (0, \"-maix64 requires PowerPC64 architecture remain enabled\"); \\\n     }\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_POWERPC64 && ! TARGET_64BIT)\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\"}, {"sha": "6b1319691b6964d36e8c11e6e4cf3829b815a81d", "filename": "gcc/config/rs6000/aix51.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Frs6000%2Faix51.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Frs6000%2Faix51.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix51.h?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -45,12 +45,12 @@ do {\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_64BIT && (target_flags & NON_POWERPC_MASKS))\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       target_flags &= ~NON_POWERPC_MASKS;\t\t\t\t\\\n-      warning (\"-maix64 and POWER architecture are incompatible\");\t\\\n+      warning (0, \"-maix64 and POWER architecture are incompatible\");\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_64BIT && ! TARGET_POWERPC64)\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       target_flags |= MASK_POWERPC64;\t\t\t\t\t\\\n-      warning (\"-maix64 requires PowerPC64 architecture remain enabled\"); \\\n+      warning (0, \"-maix64 requires PowerPC64 architecture remain enabled\"); \\\n     }\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_POWERPC64 && ! TARGET_64BIT)\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\"}, {"sha": "3c1a2ad90775faa13186d34aed7630a571841aa0", "filename": "gcc/config/rs6000/aix52.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Frs6000%2Faix52.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Frs6000%2Faix52.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix52.h?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -45,12 +45,12 @@ do {\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_64BIT && (target_flags & NON_POWERPC_MASKS))\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       target_flags &= ~NON_POWERPC_MASKS;\t\t\t\t\\\n-      warning (\"-maix64 and POWER architecture are incompatible\");\t\\\n+      warning (0, \"-maix64 and POWER architecture are incompatible\");\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_64BIT && ! TARGET_POWERPC64)\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       target_flags |= MASK_POWERPC64;\t\t\t\t\t\\\n-      warning (\"-maix64 requires PowerPC64 architecture remain enabled\"); \\\n+      warning (0, \"-maix64 requires PowerPC64 architecture remain enabled\"); \\\n     }\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_POWERPC64 && ! TARGET_64BIT)\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\"}, {"sha": "46306746bba5ff84a9e4117ec14972d5fb2698cb", "filename": "gcc/config/rs6000/darwin.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.h?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -86,20 +86,20 @@ do {\t\t\t\t\t\t\t\t\t\\\n     if (MACHO_DYNAMIC_NO_PIC_P)\t\t\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n         if (flag_pic)\t\t\t\t\t\t\t\\\n-            warning (\"-mdynamic-no-pic overrides -fpic or -fPIC\");\t\\\n+            warning (0, \"-mdynamic-no-pic overrides -fpic or -fPIC\");\t\\\n         flag_pic = 0;\t\t\t\t\t\t\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n     else if (flag_pic == 1)\t\t\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n         /* Darwin doesn't support -fpic.  */\t\t\t\t\\\n-        warning (\"-fpic is not supported; -fPIC assumed\");\t\t\\\n+        warning (0, \"-fpic is not supported; -fPIC assumed\");\t\t\\\n         flag_pic = 2;\t\t\t\t\t\t\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n   }\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_64BIT && ! TARGET_POWERPC64)\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       target_flags |= MASK_POWERPC64;\t\t\t\t\t\\\n-      warning (\"-m64 requires PowerPC64 architecture, enabling\");\t\\\n+      warning (0, \"-m64 requires PowerPC64 architecture, enabling\");\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n } while(0)\n "}, {"sha": "0ce8348a7ea0d0cfa5f8b3c79531ebb1471c7731", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -42,8 +42,8 @@\n    attribute by default.  */\n \n #define SYNTAX_ERROR(msgid) do {\t\t\t\\\n-  warning (msgid);\t\t\t\t\t\\\n-  warning (\"ignoring malformed #pragma longcall\");\t\\\n+  warning (0, msgid);\t\t\t\t\t\\\n+  warning (0, \"ignoring malformed #pragma longcall\");\t\\\n   return;\t\t\t\t\t\t\\\n } while (0)\n \n@@ -66,7 +66,7 @@ rs6000_pragma_longcall (cpp_reader *pfile ATTRIBUTE_UNUSED)\n     SYNTAX_ERROR (\"number must be 0 or 1\");\n \n   if (c_lex (&x) != CPP_EOF)\n-    warning (\"junk at end of #pragma longcall\");\n+    warning (0, \"junk at end of #pragma longcall\");\n \n   rs6000_default_long_calls = (n == integer_one_node);\n }"}, {"sha": "c980d7dd17e0d3378cb5152c5ed1f8845a46c1c2", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -1251,14 +1251,14 @@ rs6000_override_options (const char *default_cpu)\n \t{\n \t  target_flags &= ~MASK_MULTIPLE;\n \t  if ((target_flags_explicit & MASK_MULTIPLE) != 0)\n-\t    warning (\"-mmultiple is not supported on little endian systems\");\n+\t    warning (0, \"-mmultiple is not supported on little endian systems\");\n \t}\n \n       if (TARGET_STRING)\n \t{\n \t  target_flags &= ~MASK_STRING;\n \t  if ((target_flags_explicit & MASK_STRING) != 0)\n-\t    warning (\"-mstring is not supported on little endian systems\");\n+\t    warning (0, \"-mstring is not supported on little endian systems\");\n \t}\n     }\n \n@@ -1647,12 +1647,12 @@ rs6000_parse_abi_options (void)\n   else if (! strcmp (rs6000_abi_string, \"d64\"))\n     {\n       rs6000_darwin64_abi = 1;\n-      warning (\"Using darwin64 ABI\");\n+      warning (0, \"Using darwin64 ABI\");\n     }\n   else if (! strcmp (rs6000_abi_string, \"d32\"))\n     {\n       rs6000_darwin64_abi = 0;\n-      warning (\"Using old darwin ABI\");\n+      warning (0, \"Using old darwin ABI\");\n     }\n \n   else if (! strcmp (rs6000_abi_string, \"no-spe\"))\n@@ -1691,7 +1691,7 @@ rs6000_parse_alignment_option (void)\n \t useful for performance studies from time to time though, so\n \t don't disable it entirely.  */\n       if (DEFAULT_ABI == ABI_DARWIN && TARGET_64BIT)\n-\twarning (\"-malign-power is not supported for 64-bit Darwin;\"\n+\twarning (0, \"-malign-power is not supported for 64-bit Darwin;\"\n \t\t \" it is incompatible with the installed C and C++ libraries\");\n       rs6000_alignment_flags = MASK_ALIGN_POWER;\n     }\n@@ -3857,7 +3857,7 @@ rs6000_return_in_memory (tree type, tree fntype ATTRIBUTE_UNUSED)\n       static bool warned_for_return_big_vectors = false;\n       if (!warned_for_return_big_vectors)\n \t{\n-\t  warning (\"GCC vector returned by reference: \"\n+\t  warning (0, \"GCC vector returned by reference: \"\n \t\t   \"non-standard ABI extension with no compatibility guarantee\");\n \t  warned_for_return_big_vectors = true;\n \t}\n@@ -5028,7 +5028,7 @@ rs6000_pass_by_reference (CUMULATIVE_ARGS *cum ATTRIBUTE_UNUSED,\n \tfprintf (stderr, \"function_arg_pass_by_reference: synthetic vector\\n\");\n       if (!warned_for_pass_big_vectors)\n \t{\n-\t  warning (\"GCC vector passed by reference: \"\n+\t  warning (0, \"GCC vector passed by reference: \"\n \t\t   \"non-standard ABI extension with no compatibility guarantee\");\n \t  warned_for_pass_big_vectors = true;\n \t}\n@@ -12408,7 +12408,7 @@ rs6000_emit_allocate_stack (HOST_WIDE_INT size, int copy_r12)\n \n   if (INTVAL (todec) != -size)\n     {\n-      warning (\"stack frame too large\");\n+      warning (0, \"stack frame too large\");\n       emit_insn (gen_trap ());\n       return;\n     }\n@@ -12445,7 +12445,7 @@ rs6000_emit_allocate_stack (HOST_WIDE_INT size, int copy_r12)\n \t\t\t\t    const0_rtx));\n \t}\n       else\n-\twarning (\"stack limit expression is not supported\");\n+\twarning (0, \"stack limit expression is not supported\");\n     }\n \n   if (copy_r12 || ! TARGET_UPDATE)\n@@ -14927,7 +14927,7 @@ output_function_profiler (FILE *file, int labelno)\n       save_lr = 4;\n       if (!TARGET_32BIT)\n \t{\n-\t  warning (\"no profiling of 64-bit code for this ABI\");\n+\t  warning (0, \"no profiling of 64-bit code for this ABI\");\n \t  return;\n \t}\n       ASM_GENERATE_INTERNAL_LABEL (buf, \"LP\", labelno);\n@@ -16019,7 +16019,7 @@ rs6000_handle_altivec_attribute (tree *node,\n     if (TARGET_64BIT)\n       error (\"use of %<long%> in AltiVec types is invalid for 64-bit code\");\n     else if (rs6000_warn_altivec_long)\n-      warning (\"use of %<long%> in AltiVec types is deprecated; use %<int%>\");\n+      warning (0, \"use of %<long%> in AltiVec types is deprecated; use %<int%>\");\n     }\n   else if (type == long_long_unsigned_type_node\n            || type == long_long_integer_type_node)\n@@ -16114,7 +16114,7 @@ rs6000_handle_longcall_attribute (tree *node, tree name,\n       && TREE_CODE (*node) != FIELD_DECL\n       && TREE_CODE (*node) != TYPE_DECL)\n     {\n-      warning (\"%qs attribute only applies to functions\",\n+      warning (0, \"%qs attribute only applies to functions\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }"}, {"sha": "7f8e361336bc80c5c3b7e305a7b3fd12400e8b7c", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -6648,11 +6648,11 @@ s390_emit_prologue (void)\n \n       if (s390_warn_framesize > 0 \n \t  && cfun_frame_layout.frame_size >= s390_warn_framesize)\n-\twarning (\"frame size of %qs is \" HOST_WIDE_INT_PRINT_DEC \" bytes\", \n+\twarning (0, \"frame size of %qs is \" HOST_WIDE_INT_PRINT_DEC \" bytes\", \n \t\t current_function_name (), cfun_frame_layout.frame_size);\n \n       if (s390_warn_dynamicstack_p && cfun->calls_alloca)\n-\twarning (\"%qs uses dynamic stack allocation\", current_function_name ());\n+\twarning (0, \"%qs uses dynamic stack allocation\", current_function_name ());\n \n       /* Save incoming stack pointer into temp reg.  */\n       if (TARGET_BACKCHAIN || next_fpr)"}, {"sha": "e5c1dedd13997feecc3f033017c1f149203342cd", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -7185,7 +7185,7 @@ sh_handle_interrupt_handler_attribute (tree *node, tree name,\n {\n   if (TREE_CODE (*node) != FUNCTION_DECL)\n     {\n-      warning (\"%qs attribute only applies to functions\",\n+      warning (0, \"%qs attribute only applies to functions\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n@@ -7206,21 +7206,21 @@ sh_handle_sp_switch_attribute (tree *node, tree name, tree args,\n {\n   if (TREE_CODE (*node) != FUNCTION_DECL)\n     {\n-      warning (\"%qs attribute only applies to functions\",\n+      warning (0, \"%qs attribute only applies to functions\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n   else if (!pragma_interrupt)\n     {\n       /* The sp_switch attribute only has meaning for interrupt functions.  */\n-      warning (\"%qs attribute only applies to interrupt functions\",\n+      warning (0, \"%qs attribute only applies to interrupt functions\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n   else if (TREE_CODE (TREE_VALUE (args)) != STRING_CST)\n     {\n       /* The argument must be a constant string.  */\n-      warning (\"%qs attribute argument not a string constant\",\n+      warning (0, \"%qs attribute argument not a string constant\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n@@ -7241,21 +7241,21 @@ sh_handle_trap_exit_attribute (tree *node, tree name, tree args,\n {\n   if (TREE_CODE (*node) != FUNCTION_DECL)\n     {\n-      warning (\"%qs attribute only applies to functions\",\n+      warning (0, \"%qs attribute only applies to functions\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n   else if (!pragma_interrupt)\n     {\n       /* The trap_exit attribute only has meaning for interrupt functions.  */\n-      warning (\"%qs attribute only applies to interrupt functions\",\n+      warning (0, \"%qs attribute only applies to interrupt functions\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n   else if (TREE_CODE (TREE_VALUE (args)) != INTEGER_CST)\n     {\n       /* The argument must be a constant integer.  */\n-      warning (\"%qs attribute argument not an integer constant\",\n+      warning (0, \"%qs attribute argument not an integer constant\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }"}, {"sha": "e5ee36bd1a291c70c44b14bef7c8f33a7dad294d", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -751,7 +751,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \t here we have a working libgcov, so just assume that we have.  */\\\n       if (profile_flag)\t\t\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n-\t  warning (\"Profiling is not supported on this target.\");\t\\\n+\t  warning (0, \"Profiling is not supported on this target.\");\t\\\n \t  profile_flag = profile_arc_flag = 0;\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\"}, {"sha": "a3a778dbf85dc0c1387d3331447a2b985016fb63", "filename": "gcc/config/sh/symbian.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fsh%2Fsymbian.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fsh%2Fsymbian.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsymbian.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -144,7 +144,7 @@ sh_symbian_dllimport_p (tree decl)\n     {\n       /* Don't warn about artificial methods.  */\n       if (!DECL_ARTIFICIAL (decl))\n-\twarning (\"%H function '%D' is defined after prior declaration as dllimport: attribute ignored\",\n+\twarning (0, \"%H function '%D' is defined after prior declaration as dllimport: attribute ignored\",\n \t\t & DECL_SOURCE_LOCATION (decl), decl);\n       return false;\n     }\n@@ -155,7 +155,7 @@ sh_symbian_dllimport_p (tree decl)\n   else if (TREE_CODE (decl) == FUNCTION_DECL && DECL_INLINE (decl))\n     {\n       if (extra_warnings)\n-\twarning (\"%Hinline function '%D' is declared as dllimport: attribute ignored.\",\n+\twarning (0, \"%Hinline function '%D' is declared as dllimport: attribute ignored.\",\n \t\t & DECL_SOURCE_LOCATION (decl), decl);\n       return false;\n     }\n@@ -329,7 +329,7 @@ sh_symbian_encode_section_info (tree decl, rtx rtl, int first)\n       tree idp = get_identifier (oldname + strlen (DLL_IMPORT_PREFIX));\n       rtx newrtl = gen_rtx_SYMBOL_REF (Pmode, IDENTIFIER_POINTER (idp));\n \n-      warning (\"%H%s '%D' %s after being referenced with dllimport linkage.\",\n+      warning (0, \"%H%s '%D' %s after being referenced with dllimport linkage.\",\n \t       & DECL_SOURCE_LOCATION (decl),\n \t       TREE_CODE (decl) == VAR_DECL ? \"variable\" : \"function\",\n \t       decl, (DECL_INITIAL (decl) || !DECL_EXTERNAL (decl))\n@@ -411,14 +411,14 @@ sh_symbian_handle_dll_attribute (tree *pnode, tree name, tree args,\n \t\t   | (int) ATTR_FLAG_FUNCTION_NEXT\n \t\t   | (int) ATTR_FLAG_ARRAY_NEXT))\n \t{\n-\t  warning (\"%qs attribute ignored\", attr);\n+\t  warning (0, \"%qs attribute ignored\", attr);\n \t  *no_add_attrs = true;\n \t  return tree_cons (name, args, NULL_TREE);\n \t}\n \n       if (TREE_CODE (node) != RECORD_TYPE && TREE_CODE (node) != UNION_TYPE)\n \t{\n-\t  warning (\"%qs attribute ignored\", attr);\n+\t  warning (0, \"%qs attribute ignored\", attr);\n \t  *no_add_attrs = true;\n \t}\n "}, {"sha": "64297178151ade4c4ff23c5934fe90026c50d2b5", "filename": "gcc/config/sol2-c.c", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fsol2-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fsol2-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsol2-c.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -91,7 +91,7 @@ solaris_pragma_align (cpp_reader *pfile ATTRIBUTE_UNUSED)\n   if (c_lex (&x) != CPP_NUMBER\n       || c_lex (&t) != CPP_OPEN_PAREN)\n     {\n-      warning (\"malformed %<#pragma align%>, ignoring\");\n+      warning (0, \"malformed %<#pragma align%>, ignoring\");\n       return;\n     }\n \n@@ -100,22 +100,22 @@ solaris_pragma_align (cpp_reader *pfile ATTRIBUTE_UNUSED)\n       || (low != 1 && low != 2 && low != 4 && low != 8 && low != 16\n \t  && low != 32 && low != 64 && low != 128))\n     {\n-      warning (\"invalid alignment for %<#pragma align%>, ignoring\");\n+      warning (0, \"invalid alignment for %<#pragma align%>, ignoring\");\n       return;\n     }\n \n   ttype = c_lex (&t);\n   if (ttype != CPP_NAME)\n     {\n-      warning (\"malformed %<#pragma align%>, ignoring\");\n+      warning (0, \"malformed %<#pragma align%>, ignoring\");\n       return;\n     }\n \n   while (1)\n     {\n       tree decl = identifier_global_value (t);\n       if (decl && DECL_P (decl))\n-\twarning (\"%<#pragma align%> must appear before the declaration of \"\n+\twarning (0, \"%<#pragma align%> must appear before the declaration of \"\n \t\t \"%D, ignoring\", decl);\n       else\n \tsolaris_pending_aligns = tree_cons (t, build_tree_list (NULL, x),\n@@ -127,19 +127,19 @@ solaris_pragma_align (cpp_reader *pfile ATTRIBUTE_UNUSED)\n \t  ttype = c_lex (&t);\n \t  if (ttype != CPP_NAME)\n \t    {\n-\t      warning (\"malformed %<#pragma align%>\");\n+\t      warning (0, \"malformed %<#pragma align%>\");\n \t      return;\n \t    }\n \t}\n       else if (ttype == CPP_CLOSE_PAREN)\n \t{\n \t  if (c_lex (&t) != CPP_EOF)\n-\t    warning (\"junk at end of %<#pragma align%>\");\n+\t    warning (0, \"junk at end of %<#pragma align%>\");\n \t  return;\n \t}\n       else\n \t{\n-\t  warning (\"malformed %<#pragma align%>\");\n+\t  warning (0, \"malformed %<#pragma align%>\");\n \t  return;\n \t}\n     }\n@@ -155,14 +155,14 @@ solaris_pragma_init (cpp_reader *pfile ATTRIBUTE_UNUSED)\n \n   if (c_lex (&t) != CPP_OPEN_PAREN)\n     {\n-      warning (\"malformed %<#pragma init%>, ignoring\");\n+      warning (0, \"malformed %<#pragma init%>, ignoring\");\n       return;\n     }\n \n   ttype = c_lex (&t);\n   if (ttype != CPP_NAME)\n     {\n-      warning (\"malformed %<#pragma init%>, ignoring\");\n+      warning (0, \"malformed %<#pragma init%>, ignoring\");\n       return;\n     }\n \n@@ -185,19 +185,19 @@ solaris_pragma_init (cpp_reader *pfile ATTRIBUTE_UNUSED)\n \t  ttype = c_lex (&t);\n \t  if (ttype != CPP_NAME)\n \t    {\n-\t      warning (\"malformed %<#pragma init%>\");\n+\t      warning (0, \"malformed %<#pragma init%>\");\n \t      return;\n \t    }\n \t}\n       else if (ttype == CPP_CLOSE_PAREN)\n \t{\n \t  if (c_lex (&t) != CPP_EOF)\n-\t    warning (\"junk at end of %<#pragma init%>\");\n+\t    warning (0, \"junk at end of %<#pragma init%>\");\n \t  return;\n \t}\n       else\n \t{\n-\t  warning (\"malformed %<#pragma init%>\");\n+\t  warning (0, \"malformed %<#pragma init%>\");\n \t  return;\n \t}\n     }\n@@ -213,14 +213,14 @@ solaris_pragma_fini (cpp_reader *pfile ATTRIBUTE_UNUSED)\n \n   if (c_lex (&t) != CPP_OPEN_PAREN)\n     {\n-      warning (\"malformed %<#pragma fini%>, ignoring\");\n+      warning (0, \"malformed %<#pragma fini%>, ignoring\");\n       return;\n     }\n \n   ttype = c_lex (&t);\n   if (ttype != CPP_NAME)\n     {\n-      warning (\"malformed %<#pragma fini%>, ignoring\");\n+      warning (0, \"malformed %<#pragma fini%>, ignoring\");\n       return;\n     }\n \n@@ -243,19 +243,19 @@ solaris_pragma_fini (cpp_reader *pfile ATTRIBUTE_UNUSED)\n \t  ttype = c_lex (&t);\n \t  if (ttype != CPP_NAME)\n \t    {\n-\t      warning (\"malformed %<#pragma fini%>\");\n+\t      warning (0, \"malformed %<#pragma fini%>\");\n \t      return;\n \t    }\n \t}\n       else if (ttype == CPP_CLOSE_PAREN)\n \t{\n \t  if (c_lex (&t) != CPP_EOF)\n-\t    warning (\"junk at end of %<#pragma fini%>\");\n+\t    warning (0, \"junk at end of %<#pragma fini%>\");\n \t  return;\n \t}\n       else\n \t{\n-\t  warning (\"malformed %<#pragma fini%>\");\n+\t  warning (0, \"malformed %<#pragma fini%>\");\n \t  return;\n \t}\n     }"}, {"sha": "914e77c3c598f4cffea1627323efecadd7690c4d", "filename": "gcc/config/sol2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fsol2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fsol2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsol2.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -51,7 +51,7 @@ solaris_insert_attributes (tree decl, tree *attributes)\n \t  {\n \t    if (lookup_attribute (\"aligned\", DECL_ATTRIBUTES (decl))\n \t\t|| lookup_attribute (\"aligned\", *attributes))\n-\t      warning (\"%Jignoring %<#pragma align%> for explicitly \"\n+\t      warning (0, \"%Jignoring %<#pragma align%> for explicitly \"\n \t\t       \"aligned %<%D%>\", decl, decl);\n \t    else\n \t      *attributes = tree_cons (get_identifier (\"aligned\"), value,"}, {"sha": "38b36d5423307db420bfc1ab63d265737ce018e3", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -2293,7 +2293,7 @@ xstormy16_handle_interrupt_attribute (tree *node, tree name,\n {\n   if (TREE_CODE (*node) != FUNCTION_TYPE)\n     {\n-      warning (\"%qs attribute only applies to functions\",\n+      warning (0, \"%qs attribute only applies to functions\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n@@ -2314,14 +2314,14 @@ xstormy16_handle_below100_attribute (tree *node,\n       && TREE_CODE (*node) != POINTER_TYPE\n       && TREE_CODE (*node) != TYPE_DECL)\n     {\n-      warning (\"%<__BELOW100__%> attribute only applies to variables\");\n+      warning (0, \"%<__BELOW100__%> attribute only applies to variables\");\n       *no_add_attrs = true;\n     }\n   else if (args == NULL_TREE && TREE_CODE (*node) == VAR_DECL)\n     {\n       if (! (TREE_PUBLIC (*node) || TREE_STATIC (*node)))\n \t{\n-\t  warning (\"__BELOW100__ attribute not allowed with auto storage class.\");\n+\t  warning (0, \"__BELOW100__ attribute not allowed with auto storage class.\");\n \t  *no_add_attrs = true;\n \t}\n     }"}, {"sha": "3346fe3447c46bd7439472c920c6679af693e2cb", "filename": "gcc/config/v850/v850-c.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fv850%2Fv850-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fv850%2Fv850-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850-c.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -64,9 +64,9 @@ static int\n pop_data_area (v850_data_area data_area)\n {\n   if (data_area_stack == NULL)\n-    warning (\"#pragma GHS endXXXX found without previous startXXX\");\n+    warning (0, \"#pragma GHS endXXXX found without previous startXXX\");\n   else if (data_area != data_area_stack->data_area)\n-    warning (\"#pragma GHS endXXX does not match previous startXXX\");\n+    warning (0, \"#pragma GHS endXXX does not match previous startXXX\");\n   else\n     {\n       data_area_stack_element * elem;\n@@ -91,15 +91,15 @@ mark_current_function_as_interrupt (void)\n   \n   if (current_function_decl ==  NULL_TREE)\n     {\n-      warning (\"cannot set interrupt attribute: no current function\");\n+      warning (0, \"cannot set interrupt attribute: no current function\");\n       return;\n     }\n \n   name = get_identifier (\"interrupt\");\n \n   if (name == NULL_TREE || TREE_CODE (name) != IDENTIFIER_NODE)\n     {\n-      warning (\"cannot set interrupt attribute: no such identifier\");\n+      warning (0, \"cannot set interrupt attribute: no such identifier\");\n       return;\n     }\n   \n@@ -144,7 +144,7 @@ ghs_pragma_section (cpp_reader * pfile ATTRIBUTE_UNUSED)\n       if (type == CPP_COMMA)\n \trepeat = 1;\n       else if (type != CPP_EOF)\n-\twarning (\"junk at end of #pragma ghs section\");\n+\twarning (0, \"junk at end of #pragma ghs section\");\n       \n       if      (streq (sect, \"data\"))    kind = GHS_SECTION_KIND_DATA;\n       else if (streq (sect, \"text\"))    kind = GHS_SECTION_KIND_TEXT;\n@@ -161,7 +161,7 @@ ghs_pragma_section (cpp_reader * pfile ATTRIBUTE_UNUSED)\n       else if (streq (sect, \"zbss\"))    kind = GHS_SECTION_KIND_ZDATA;\n       else\n \t{\n-\t  warning (\"unrecognized section name \\\"%s\\\"\", sect);\n+\t  warning (0, \"unrecognized section name \\\"%s\\\"\", sect);\n \t  return;\n \t}\n       \n@@ -176,7 +176,7 @@ ghs_pragma_section (cpp_reader * pfile ATTRIBUTE_UNUSED)\n   return;\n \n  bad:\n-  warning (\"malformed #pragma ghs section\");\n+  warning (0, \"malformed #pragma ghs section\");\n   return;\n \n  reset:\n@@ -195,7 +195,7 @@ ghs_pragma_interrupt (cpp_reader * pfile ATTRIBUTE_UNUSED)\n   tree x;\n   \n   if (c_lex (&x) != CPP_EOF)\n-    warning (\"junk at end of #pragma ghs interrupt\");\n+    warning (0, \"junk at end of #pragma ghs interrupt\");\n   \n   mark_current_function_as_interrupt ();\n }\n@@ -206,7 +206,7 @@ ghs_pragma_starttda (cpp_reader * pfile ATTRIBUTE_UNUSED)\n   tree x;\n   \n   if (c_lex (&x) != CPP_EOF)\n-    warning (\"junk at end of #pragma ghs starttda\");\n+    warning (0, \"junk at end of #pragma ghs starttda\");\n   \n   push_data_area (DATA_AREA_TDA);\n }\n@@ -217,7 +217,7 @@ ghs_pragma_startsda (cpp_reader * pfile ATTRIBUTE_UNUSED)\n   tree x;\n   \n   if (c_lex (&x) != CPP_EOF)\n-    warning (\"junk at end of #pragma ghs startsda\");\n+    warning (0, \"junk at end of #pragma ghs startsda\");\n   \n   push_data_area (DATA_AREA_SDA);\n }\n@@ -228,7 +228,7 @@ ghs_pragma_startzda (cpp_reader * pfile ATTRIBUTE_UNUSED)\n   tree x;\n   \n   if (c_lex (&x) != CPP_EOF)\n-    warning (\"junk at end of #pragma ghs startzda\");\n+    warning (0, \"junk at end of #pragma ghs startzda\");\n   \n   push_data_area (DATA_AREA_ZDA);\n }\n@@ -239,7 +239,7 @@ ghs_pragma_endtda (cpp_reader * pfile ATTRIBUTE_UNUSED)\n   tree x;\n   \n   if (c_lex (&x) != CPP_EOF)\n-    warning (\"junk at end of #pragma ghs endtda\");\n+    warning (0, \"junk at end of #pragma ghs endtda\");\n   \n   pop_data_area (DATA_AREA_TDA);\n }\n@@ -250,7 +250,7 @@ ghs_pragma_endsda (cpp_reader * pfile ATTRIBUTE_UNUSED)\n   tree x;\n   \n   if (c_lex (&x) != CPP_EOF)\n-    warning (\"junk at end of #pragma ghs endsda\");\n+    warning (0, \"junk at end of #pragma ghs endsda\");\n   \n   pop_data_area (DATA_AREA_SDA);\n }\n@@ -261,7 +261,7 @@ ghs_pragma_endzda (cpp_reader * pfile ATTRIBUTE_UNUSED)\n   tree x;\n   \n   if (c_lex (&x) != CPP_EOF)\n-    warning (\"junk at end of #pragma ghs endzda\");\n+    warning (0, \"junk at end of #pragma ghs endzda\");\n   \n   pop_data_area (DATA_AREA_ZDA);\n }"}, {"sha": "01c3722a56971dba6643147b36798e520f8bef4b", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -2102,7 +2102,7 @@ v850_handle_interrupt_attribute (tree * node,\n {\n   if (TREE_CODE (*node) != FUNCTION_DECL)\n     {\n-      warning (\"%qs attribute only applies to functions\",\n+      warning (0, \"%qs attribute only applies to functions\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }"}, {"sha": "4e8e518e0a8f5b4a77bde4326a987a417138cac8", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -2413,7 +2413,7 @@ xtensa_multibss_section_type_flags (tree decl, const char *name, int reloc)\n \t\t    && DECL_INITIAL (decl) == NULL_TREE))\n \tflags |= SECTION_BSS;  /* @nobits */\n       else\n-\twarning (\"only uninitialized variables can be placed in a \"\n+\twarning (0, \"only uninitialized variables can be placed in a \"\n \t\t \".bss section\");\n     }\n "}, {"sha": "dc188792b63e3346934dc99b6a8bcd1fd22b991b", "filename": "gcc/coverage.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fcoverage.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fcoverage.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoverage.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -180,7 +180,7 @@ read_counts_file (void)\n \n   if (!gcov_magic (gcov_read_unsigned (), GCOV_DATA_MAGIC))\n     {\n-      warning (\"%qs is not a gcov data file\", da_file_name);\n+      warning (0, \"%qs is not a gcov data file\", da_file_name);\n       gcov_close ();\n       return;\n     }\n@@ -191,7 +191,7 @@ read_counts_file (void)\n       GCOV_UNSIGNED2STRING (v, tag);\n       GCOV_UNSIGNED2STRING (e, GCOV_VERSION);\n \n-      warning (\"%qs is version %q.*s, expected version %q.*s\",\n+      warning (0, \"%qs is version %q.*s, expected version %q.*s\",\n  \t       da_file_name, 4, v, 4, e);\n       gcov_close ();\n       return;\n@@ -345,7 +345,7 @@ get_coverage_counts (unsigned counter, unsigned expected,\n   entry = htab_find (counts_hash, &elt);\n   if (!entry)\n     {\n-      warning (\"no coverage for function %qs found.\", IDENTIFIER_POINTER\n+      warning (0, \"no coverage for function %qs found.\", IDENTIFIER_POINTER\n \t       (DECL_ASSEMBLER_NAME (current_function_decl)));\n       return 0;\n     }\n@@ -581,7 +581,7 @@ coverage_end_function (void)\n \n   if (bbg_file_opened > 1 && gcov_is_error ())\n     {\n-      warning (\"error writing %qs\", bbg_file_name);\n+      warning (0, \"error writing %qs\", bbg_file_name);\n       bbg_file_opened = -1;\n     }\n "}, {"sha": "6f2baf65f1a7eed113c831210d0f9fee56926208", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -1,3 +1,10 @@\n+2005-04-23  DJ Delorie  <dj@redhat.com>\n+\n+\t* call.c, class.c, cvt.c, decl.c, decl2.c, except.c, friend.c,\n+\tinit.c, lex.c, mangle.c, method.c, name-lookup.c, parser.c,\n+\trepo.c, rtti.c, tree.c, typeck.c, typeck2.c: Adjust warning()\n+\tcallers.\n+\n 2005-04-22  Per Bothner  <per@bothner.com>\n \n \t* decl.c (make_rtl_for_nonlocal_decl): Don't try get_fileinfo if"}, {"sha": "e40e61f0aae1b48c6873cc5035068d28fe3f47cb", "filename": "gcc/cp/call.c", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -3402,14 +3402,14 @@ build_conditional_expr (tree arg1, tree arg2, tree arg3)\n       \n       if (TREE_CODE (arg2_type) == ENUMERAL_TYPE\n           && TREE_CODE (arg3_type) == ENUMERAL_TYPE)\n-         warning (\"enumeral mismatch in conditional expression: %qT vs %qT\",\n+         warning (0, \"enumeral mismatch in conditional expression: %qT vs %qT\",\n                    arg2_type, arg3_type);\n       else if (extra_warnings\n                && ((TREE_CODE (arg2_type) == ENUMERAL_TYPE\n                     && !same_type_p (arg3_type, type_promotes_to (arg2_type)))\n                    || (TREE_CODE (arg3_type) == ENUMERAL_TYPE\n                        && !same_type_p (arg2_type, type_promotes_to (arg3_type)))))\n-        warning (\"enumeral and non-enumeral type in conditional expression\");\n+        warning (0, \"enumeral and non-enumeral type in conditional expression\");\n       \n       arg2 = perform_implicit_conversion (result_type, arg2);\n       arg3 = perform_implicit_conversion (result_type, arg3);\n@@ -3776,7 +3776,7 @@ build_new_op (enum tree_code code, int flags, tree arg1, tree arg2, tree arg3,\n \t\t  && (TYPE_MAIN_VARIANT (TREE_TYPE (arg1))\n \t\t      != TYPE_MAIN_VARIANT (TREE_TYPE (arg2))))\n \t\t{\n-\t\t  warning (\"comparison between %q#T and %q#T\", \n+\t\t  warning (0, \"comparison between %q#T and %q#T\", \n                            TREE_TYPE (arg1), TREE_TYPE (arg2));\n \t\t}\n \t      break;\n@@ -4097,7 +4097,7 @@ build_temp (tree expr, tree type, int flags,\n \t\t\t\t    build_tree_list (NULL_TREE, expr), \n \t\t\t\t    type, flags);\n   if (warningcount > savew)\n-    *diagnostic_fn = warning;\n+    *diagnostic_fn = warning0;\n   else if (errorcount > savee)\n     *diagnostic_fn = error;\n   else\n@@ -4160,21 +4160,21 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n       if (ARITHMETIC_TYPE_P (t) && expr == null_node)\n \t{\n \t  if (fn)\n-\t    warning (\"passing NULL to non-pointer argument %P of %qD\",\n+\t    warning (0, \"passing NULL to non-pointer argument %P of %qD\",\n \t\t     argnum, fn);\n \t  else\n-\t    warning (\"converting to non-pointer type %qT from NULL\", t);\n+\t    warning (0, \"converting to non-pointer type %qT from NULL\", t);\n \t}\n \n       /* Warn about assigning a floating-point type to an integer type.  */\n       if (TREE_CODE (TREE_TYPE (expr)) == REAL_TYPE\n \t  && TREE_CODE (t) == INTEGER_TYPE)\n \t{\n \t  if (fn)\n-\t    warning (\"passing %qT for argument %P to %qD\",\n+\t    warning (0, \"passing %qT for argument %P to %qD\",\n \t\t     TREE_TYPE (expr), argnum, fn);\n \t  else\n-\t    warning (\"converting to %qT from %qT\", t, TREE_TYPE (expr));\n+\t    warning (0, \"converting to %qT from %qT\", t, TREE_TYPE (expr));\n \t}\n       /* And warn about assigning a negative value to an unsigned\n \t variable.  */\n@@ -4183,10 +4183,10 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \t  if (TREE_CODE (expr) == INTEGER_CST && TREE_NEGATED_INT (expr)) \n \t    {\n \t      if (fn)\n-\t\twarning (\"passing negative value %qE for argument %P to %qD\",\n+\t\twarning (0, \"passing negative value %qE for argument %P to %qD\",\n \t\t\t expr, argnum, fn);\n \t      else\n-\t\twarning (\"converting negative value %qE to %qT\", expr, t);\n+\t\twarning (0, \"converting negative value %qE to %qT\", expr, t);\n \t    }\n \t  \n \t  overflow_warning (expr);\n@@ -4443,7 +4443,7 @@ convert_arg_to_ellipsis (tree arg)\n \t there is no need to emit a warning, since the expression won't be \n \t evaluated. We keep the builtin_trap just as a safety check.  */\n       if (!skip_evaluation)\n-\twarning (\"cannot pass objects of non-POD type %q#T through %<...%>; \"\n+\twarning (0, \"cannot pass objects of non-POD type %q#T through %<...%>; \"\n \t         \"call will abort at runtime\", TREE_TYPE (arg));\n       arg = call_builtin_trap ();\n       arg = build2 (COMPOUND_EXPR, integer_type_node, arg,\n@@ -4469,7 +4469,7 @@ build_x_va_arg (tree expr, tree type)\n   if (! pod_type_p (type))\n     {\n       /* Undefined behavior [expr.call] 5.2.2/7.  */\n-      warning (\"cannot receive objects of non-POD type %q#T through %<...%>; \"\n+      warning (0, \"cannot receive objects of non-POD type %q#T through %<...%>; \"\n                \"call will abort at runtime\", type);\n       expr = convert (build_pointer_type (type), null_node);\n       expr = build2 (COMPOUND_EXPR, TREE_TYPE (expr),\n@@ -5384,7 +5384,7 @@ build_new_method_call (tree instance, tree fns, tree args,\n \t\t  || DECL_DESTRUCTOR_P (current_function_decl)))\n \t    /* This is not an error, it is runtime undefined\n \t       behavior.  */\n-\t    warning ((DECL_CONSTRUCTOR_P (current_function_decl) ? \n+\t    warning (0, (DECL_CONSTRUCTOR_P (current_function_decl) ? \n \t\t      \"abstract virtual %q#D called from constructor\"\n \t\t      : \"abstract virtual %q#D called from destructor\"),\n \t\t     cand->fn);\n@@ -5997,9 +5997,9 @@ joust (struct z_candidate *cand1, struct z_candidate *cand2, bool warn)\n \n \t      if (warn)\n \t\t{\n-\t\t  warning (\"passing %qT chooses %qT over %qT\",\n+\t\t  warning (0, \"passing %qT chooses %qT over %qT\",\n \t\t\t      type, type1, type2);\n-\t\t  warning (\"  in call to %qD\", w->fn);\n+\t\t  warning (0, \"  in call to %qD\", w->fn);\n \t\t}\n \t      else\n \t\tadd_warning (w, l);\n@@ -6056,10 +6056,10 @@ joust (struct z_candidate *cand1, struct z_candidate *cand2, bool warn)\n \t  tree source = source_type (w->convs[0]);\n \t  if (! DECL_CONSTRUCTOR_P (w->fn))\n \t    source = TREE_TYPE (source);\n-\t  warning (\"choosing %qD over %qD\", w->fn, l->fn);\n-\t  warning (\"  for conversion from %qT to %qT\",\n+\t  warning (0, \"choosing %qD over %qD\", w->fn, l->fn);\n+\t  warning (0, \"  for conversion from %qT to %qT\",\n \t\t   source, w->second_conv->type);\n-\t  warning (\"  because conversion sequence for the argument is better\");\n+\t  warning (0, \"  because conversion sequence for the argument is better\");\n \t}\n       else\n \tadd_warning (w, l);"}, {"sha": "6423fbcf894a2362c7708e04372aa87513110922", "filename": "gcc/cp/class.c", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -1234,7 +1234,7 @@ check_bases (tree t,\n \t here because the case of virtual functions but non-virtual\n \t dtor is handled in finish_struct_1.  */\n       if (warn_ecpp && ! TYPE_POLYMORPHIC_P (basetype))\n-\twarning (\"base class %q#T has a non-virtual destructor\", basetype);\n+\twarning (0, \"base class %q#T has a non-virtual destructor\", basetype);\n \n       /* If the base class doesn't have copy constructors or\n \t assignment operators that take const references, then the\n@@ -1548,7 +1548,7 @@ maybe_warn_about_overly_private_class (tree t)\n \t  }\n       if (!has_nonprivate_method) \n \t{\n-\t  warning (\"all member functions in class %qT are private\", t);\n+\t  warning (0, \"all member functions in class %qT are private\", t);\n \t  return;\n \t}\n     }\n@@ -1559,7 +1559,7 @@ maybe_warn_about_overly_private_class (tree t)\n   fn = CLASSTYPE_DESTRUCTORS (t);\n   if (fn && TREE_PRIVATE (fn))\n     {\n-      warning (\"%q#T only defines a private destructor and has no friends\",\n+      warning (0, \"%q#T only defines a private destructor and has no friends\",\n \t       t);\n       return;\n     }\n@@ -1599,7 +1599,7 @@ maybe_warn_about_overly_private_class (tree t)\n \n       if (nonprivate_ctor == 0)\n \t{\n-\t  warning (\"%q#T only defines private constructors and has no friends\",\n+\t  warning (0, \"%q#T only defines private constructors and has no friends\",\n                    t);\n \t  return;\n \t}\n@@ -3035,16 +3035,16 @@ check_field_decls (tree t, tree *access_decls,\n \t&& TYPE_HAS_NONTRIVIAL_DESTRUCTOR (t)\n \t&& !(TYPE_HAS_INIT_REF (t) && TYPE_HAS_ASSIGN_REF (t)))\n     {\n-      warning (\"%q#T has pointer data members\", t);\n+      warning (0, \"%q#T has pointer data members\", t);\n       \n       if (! TYPE_HAS_INIT_REF (t))\n \t{\n-\t  warning (\"  but does not override %<%T(const %T&)%>\", t, t);\n+\t  warning (0, \"  but does not override %<%T(const %T&)%>\", t, t);\n \t  if (! TYPE_HAS_ASSIGN_REF (t))\n-\t    warning (\"  or %<operator=(const %T&)%>\", t);\n+\t    warning (0, \"  or %<operator=(const %T&)%>\", t);\n \t}\n       else if (! TYPE_HAS_ASSIGN_REF (t))\n-\twarning (\"  but does not override %<operator=(const %T&)%>\", t);\n+\twarning (0, \"  but does not override %<operator=(const %T&)%>\", t);\n     }\n \n \n@@ -3477,7 +3477,7 @@ layout_empty_base (tree binfo, tree eoc, splay_tree offsets)\n \tpropagate_binfo_offsets\n \t  (binfo, size_diffop (size_zero_node, BINFO_OFFSET (binfo)));\n       else if (warn_abi)\n-\twarning (\"offset of empty base %qT may not be ABI-compliant and may\"\n+\twarning (0, \"offset of empty base %qT may not be ABI-compliant and may\"\n \t\t \"change in a future version of GCC\",\n \t\t BINFO_TYPE (binfo));\n     }\n@@ -3589,7 +3589,7 @@ build_base_field (record_layout_info rli, tree binfo,\n \t      if (abi_version_at_least (2))\n \t\tCLASSTYPE_NEARLY_EMPTY_P (t) = 0;\n \t      else if (warn_abi)\n-\t\twarning (\"class %qT will be considered nearly empty in a \"\n+\t\twarning (0, \"class %qT will be considered nearly empty in a \"\n \t\t\t \"future version of GCC\", t);\n \t    }\n \t}\n@@ -4334,7 +4334,7 @@ layout_virtual_bases (record_layout_info rli, splay_tree offsets)\n \t\t\t\t\t CLASSTYPE_ALIGN (basetype)),\n \t\t\t       bitsize_unit_node),\n \t\t   BINFO_OFFSET (vbase))))\n-\t    warning (\"offset of virtual base %qT is not ABI-compliant and \"\n+\t    warning (0, \"offset of virtual base %qT is not ABI-compliant and \"\n                      \"may change in a future version of GCC\",\n \t\t     basetype);\n \n@@ -4433,7 +4433,7 @@ warn_about_ambiguous_bases (tree t)\n       basetype = BINFO_TYPE (base_binfo);\n \n       if (!lookup_base (t, basetype, ba_unique | ba_quiet, NULL))\n-\twarning (\"direct base %qT inaccessible in %qT due to ambiguity\",\n+\twarning (0, \"direct base %qT inaccessible in %qT due to ambiguity\",\n \t\t basetype, t);\n     }\n \n@@ -4445,7 +4445,7 @@ warn_about_ambiguous_bases (tree t)\n \tbasetype = BINFO_TYPE (binfo);\n \t\n \tif (!lookup_base (t, basetype, ba_unique | ba_quiet, NULL))\n-\t  warning (\"virtual base %qT inaccessible in %qT due to ambiguity\",\n+\t  warning (0, \"virtual base %qT inaccessible in %qT due to ambiguity\",\n \t\t   basetype, t);\n       }\n }\n@@ -4622,7 +4622,7 @@ layout_class_type (tree t, tree *virtuals_p)\n \t      else\n \t\t{\n \t\t  if (warn_abi && TREE_CODE (t) == UNION_TYPE)\n-\t\t    warning (\"size assigned to %qT may not be \"\n+\t\t    warning (0, \"size assigned to %qT may not be \"\n \t\t\t     \"ABI-compliant and may change in a future \"\n \t\t\t     \"version of GCC\", \n \t\t\t     t);\n@@ -4661,7 +4661,7 @@ layout_class_type (tree t, tree *virtuals_p)\n \t\t   && DECL_MODE (field) != TYPE_MODE (type))\n \t    /* Versions of G++ before G++ 3.4 did not reset the\n \t       DECL_MODE.  */\n-\t    warning (\"the offset of %qD may not be ABI-compliant and may \"\n+\t    warning (0, \"the offset of %qD may not be ABI-compliant and may \"\n \t\t     \"change in a future version of GCC\", field);\n \t}\n       else\n@@ -4754,7 +4754,7 @@ layout_class_type (tree t, tree *virtuals_p)\n \t  TYPE_SIZE (base_t) = bitsize_zero_node;\n \t  TYPE_SIZE_UNIT (base_t) = size_zero_node;\n \t  if (warn_abi && !integer_zerop (rli_size_unit_so_far (rli)))\n-\t    warning (\"layout of classes derived from empty class %qT \"\n+\t    warning (0, \"layout of classes derived from empty class %qT \"\n \t\t     \"may change in a future version of GCC\",\n \t\t     t);\n \t}\n@@ -5045,7 +5045,7 @@ finish_struct_1 (tree t)\n \t      && (!TREE_PRIVATE (dtor) \n \t\t  || CLASSTYPE_FRIEND_CLASSES (t) \n \t\t  || DECL_FRIENDLIST (TYPE_MAIN_DECL (t)))))\n-\twarning (\"%q#T has virtual functions but non-virtual destructor\", \n+\twarning (0, \"%q#T has virtual functions but non-virtual destructor\", \n \t\t t);\n     }\n "}, {"sha": "5150fcf55487c8e17cfa7ef6b0622b4d71e4d989", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -194,7 +194,7 @@ cp_convert_to_pointer (tree type, tree expr, bool force)\n       if (bk == bk_via_virtual)\n \t{\n \t  if (force)\n-\t    warning (\"pointer to member cast from %qT to %qT is via\"\n+\t    warning (0, \"pointer to member cast from %qT to %qT is via\"\n                      \" virtual base\", intype, type);\n \t  else\n \t    {\n@@ -512,7 +512,7 @@ convert_to_reference (tree reftype, tree expr, int convtype,\n       if (TREE_CODE (intype) == POINTER_TYPE\n \t  && (comptypes (TREE_TYPE (intype), type,\n \t\t\t COMPARE_BASE | COMPARE_DERIVED)))\n-\twarning (\"casting %qT to %qT does not dereference pointer\",\n+\twarning (0, \"casting %qT to %qT does not dereference pointer\",\n \t\t intype, reftype);\n \t  \n       rval = build_unary_op (ADDR_EXPR, expr, 0);\n@@ -854,10 +854,10 @@ convert_to_void (tree expr, const char *implicit)\n         int is_complete = COMPLETE_TYPE_P (complete_type (type));\n         \n         if (is_volatile && !is_complete)\n-          warning (\"object of incomplete type %qT will not be accessed in %s\",\n+          warning (0, \"object of incomplete type %qT will not be accessed in %s\",\n                    type, implicit ? implicit : \"void context\");\n         else if (is_reference && is_volatile)\n-          warning (\"object of type %qT will not be accessed in %s\",\n+          warning (0, \"object of type %qT will not be accessed in %s\",\n                    TREE_TYPE (TREE_OPERAND (expr, 0)),\n                    implicit ? implicit : \"void context\");\n         if (is_reference || !is_volatile || !is_complete)\n@@ -873,7 +873,7 @@ convert_to_void (tree expr, const char *implicit)\n         int is_complete = COMPLETE_TYPE_P (complete_type (type));\n         \n         if (TYPE_VOLATILE (type) && !is_complete)\n-          warning (\"object %qE of incomplete type %qT will not be accessed in %s\",\n+          warning (0, \"object %qE of incomplete type %qT will not be accessed in %s\",\n                    expr, type, implicit ? implicit : \"void context\");\n         break;\n       }\n@@ -895,7 +895,7 @@ convert_to_void (tree expr, const char *implicit)\n       }\n     else if (implicit && probe == expr && is_overloaded_fn (probe))\n       /* Only warn when there is no &.  */\n-      warning (\"%s is a reference, not call, to function %qE\",\n+      warning (0, \"%s is a reference, not call, to function %qE\",\n \t\t  implicit, expr);\n   }\n   \n@@ -906,7 +906,7 @@ convert_to_void (tree expr, const char *implicit)\n \t  /* The middle end does not warn about expressions that have\n \t     been explicitly cast to void, so we must do so here.  */\n \t  if (!TREE_SIDE_EFFECTS (expr))\n-\t    warning (\"%s has no effect\", implicit);\n+\t    warning (0, \"%s has no effect\", implicit);\n \t  else \n \t    { \n \t      tree e;\n@@ -938,7 +938,7 @@ convert_to_void (tree expr, const char *implicit)\n \t\t\t    || code == PREINCREMENT_EXPR\n \t\t\t    || code == POSTDECREMENT_EXPR\n \t\t\t    || code == POSTINCREMENT_EXPR)))\n-\t\twarning (\"value computed is not used\");\n+\t\twarning (0, \"value computed is not used\");\n \t    }\n \t}\n       expr = build1 (CONVERT_EXPR, void_type_node, expr);\n@@ -1046,7 +1046,7 @@ build_expr_type_conversion (int desires, tree expr, bool complain)\n   if (expr == null_node \n       && (desires & WANT_INT) \n       && !(desires & WANT_NULL))\n-    warning (\"converting NULL to non-pointer type\");\n+    warning (0, \"converting NULL to non-pointer type\");\n     \n   basetype = TREE_TYPE (expr);\n "}, {"sha": "60b478ee3df532835f43f643699d94e00c622fa4", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -565,7 +565,7 @@ poplevel (int keep, int reverse, int functionbody)\n \t  && ! TREE_USED (decl)\n \t  && ! DECL_IN_SYSTEM_HEADER (decl)\n \t  && DECL_NAME (decl) && ! DECL_ARTIFICIAL (decl))\n-\twarning (\"%Junused variable %qD\", decl, decl);\n+\twarning (0, \"%Junused variable %qD\", decl, decl);\n \n   /* Remove declarations for all the DECLs in this level.  */\n   for (link = decls; link; link = TREE_CHAIN (link))\n@@ -1055,17 +1055,17 @@ duplicate_decls (tree newdecl, tree olddecl)\n \t       && DECL_UNINLINABLE (olddecl)\n \t       && lookup_attribute (\"noinline\", DECL_ATTRIBUTES (olddecl)))\n \t{\n-\t  warning (\"%Jfunction %qD redeclared as inline\", newdecl, newdecl);\n-\t  warning (\"%Jprevious declaration of %qD with attribute noinline\",\n+\t  warning (0, \"%Jfunction %qD redeclared as inline\", newdecl, newdecl);\n+\t  warning (0, \"%Jprevious declaration of %qD with attribute noinline\",\n                    olddecl, olddecl);\n \t}\n       else if (DECL_DECLARED_INLINE_P (olddecl)\n \t       && DECL_UNINLINABLE (newdecl)\n \t       && lookup_attribute (\"noinline\", DECL_ATTRIBUTES (newdecl)))\n \t{\n-\t  warning (\"%Jfunction %qD redeclared with attribute noinline\",\n+\t  warning (0, \"%Jfunction %qD redeclared with attribute noinline\",\n \t\t   newdecl, newdecl);\n-\t  warning (\"%Jprevious declaration of %qD was inline\",\n+\t  warning (0, \"%Jprevious declaration of %qD was inline\",\n \t\t   olddecl, olddecl);\n \t}\n     }\n@@ -1086,7 +1086,7 @@ duplicate_decls (tree newdecl, tree olddecl)\n \t  if (! TREE_PUBLIC (newdecl))\n \t    {\n \t      if (warn_shadow)\n-                warning (\"shadowing %s function %q#D\",\n+                warning (0, \"shadowing %s function %q#D\",\n                          DECL_BUILT_IN (olddecl) ? \"built-in\" : \"library\",\n                          olddecl);\n \t      /* Discard the old built-in function.  */\n@@ -1095,7 +1095,7 @@ duplicate_decls (tree newdecl, tree olddecl)\n \t  /* If the built-in is not ansi, then programs can override\n \t     it even globally without an error.  */\n \t  else if (! DECL_BUILT_IN (olddecl))\n-\t    warning (\"library function %q#D redeclared as non-function %q#D\",\n+\t    warning (0, \"library function %q#D redeclared as non-function %q#D\",\n                      olddecl, newdecl);\n \t  else\n \t    {\n@@ -1152,12 +1152,12 @@ duplicate_decls (tree newdecl, tree olddecl)\n \n \t      if (TREE_PUBLIC (newdecl))\n \t\t{\n-\t\t  warning (\"new declaration %q#D\", newdecl);\n-\t\t  warning (\"ambiguates built-in declaration %q#D\",\n+\t\t  warning (0, \"new declaration %q#D\", newdecl);\n+\t\t  warning (0, \"ambiguates built-in declaration %q#D\",\n                            olddecl);\n \t\t}\n \t      else if (warn_shadow)\n-\t\twarning (\"shadowing %s function %q#D\",\n+\t\twarning (0, \"shadowing %s function %q#D\",\n                          DECL_BUILT_IN (olddecl) ? \"built-in\" : \"library\",\n                          olddecl);\n \t    }\n@@ -1363,7 +1363,7 @@ duplicate_decls (tree newdecl, tree olddecl)\n \t{\n \t  /* Prototype decl follows defn w/o prototype.  */\n \t  cp_warning_at (\"prototype for %q#D\", newdecl);\n-\t  warning (\"%Jfollows non-prototype definition here\", olddecl);\n+\t  warning (0, \"%Jfollows non-prototype definition here\", olddecl);\n \t}\n       else if (TREE_CODE (olddecl) == FUNCTION_DECL\n \t       && DECL_LANGUAGE (newdecl) != DECL_LANGUAGE (olddecl))\n@@ -1418,8 +1418,8 @@ duplicate_decls (tree newdecl, tree olddecl)\n \t      && ! DECL_DECLARED_INLINE_P (olddecl)\n \t      && TREE_ADDRESSABLE (olddecl) && warn_inline)\n \t    {\n-\t      warning (\"%q#D was used before it was declared inline\", newdecl);\n-\t      warning (\"%Jprevious non-inline declaration here\", olddecl);\n+\t      warning (0, \"%q#D was used before it was declared inline\", newdecl);\n+\t      warning (0, \"%Jprevious non-inline declaration here\", olddecl);\n \t    }\n \t}\n     }\n@@ -1471,7 +1471,7 @@ duplicate_decls (tree newdecl, tree olddecl)\n \t  /* Don't warn about friends, let add_friend take care of it.  */\n \t  && ! (DECL_FRIEND_P (newdecl) || DECL_FRIEND_P (olddecl)))\n \t{\n-\t  warning (\"redundant redeclaration of %qD in same scope\", newdecl);\n+\t  warning (0, \"redundant redeclaration of %qD in same scope\", newdecl);\n \t  cp_warning_at (\"previous declaration of %qD\", olddecl);\n \t}\n     }\n@@ -1806,9 +1806,9 @@ duplicate_decls (tree newdecl, tree olddecl)\n       && DECL_VISIBILITY_SPECIFIED (newdecl)\n       && DECL_VISIBILITY (newdecl) != DECL_VISIBILITY (olddecl))\n     {\n-      warning (\"%J%qD: visibility attribute ignored because it\",\n+      warning (0, \"%J%qD: visibility attribute ignored because it\",\n \t       newdecl, newdecl);\n-      warning (\"%Jconflicts with previous declaration here\", olddecl);\n+      warning (0, \"%Jconflicts with previous declaration here\", olddecl);\n     }\n   /* Choose the declaration which specified visibility.  */\n   if (DECL_VISIBILITY_SPECIFIED (olddecl))\n@@ -3645,7 +3645,7 @@ start_decl (const cp_declarator *declarator,\n     {\n       if (! toplevel_bindings_p ()\n \t  && DECL_EXTERNAL (decl))\n-\twarning (\"declaration of %q#D has %<extern%> and is initialized\",\n+\twarning (0, \"declaration of %q#D has %<extern%> and is initialized\",\n                  decl);\n       DECL_EXTERNAL (decl) = 0;\n       if (toplevel_bindings_p ())\n@@ -3667,7 +3667,7 @@ start_decl (const cp_declarator *declarator,\n       && DECL_DECLARED_INLINE_P (decl)\n       && DECL_UNINLINABLE (decl)\n       && lookup_attribute (\"noinline\", DECL_ATTRIBUTES (decl)))\n-    warning (\"%Jinline function %qD given attribute noinline\", decl, decl);\n+    warning (0, \"%Jinline function %qD given attribute noinline\", decl, decl);\n \n   if (context && COMPLETE_TYPE_P (complete_type (context)))\n     {\n@@ -4052,7 +4052,7 @@ maybe_commonize_var (tree decl)\n \t      cp_warning_at (\"sorry: semantics of inline function static \"\n                              \"data %q#D are wrong (you'll wind up \"\n                              \"with multiple copies)\", decl);\n-\t      warning (\"%J  you can work around this by removing \"\n+\t      warning (0, \"%J  you can work around this by removing \"\n                        \"the initializer\",\n \t\t       decl);\n \t    }\n@@ -4366,7 +4366,7 @@ reshape_init (tree type, tree *initp)\n       if (brace_enclosed_p)\n \terror (\"too many initializers for %qT\", type);\n       else if (warn_missing_braces && !string_init_p)\n-\twarning (\"missing braces around initializer\");\n+\twarning (0, \"missing braces around initializer\");\n     }\n \n   return new_init;\n@@ -4506,7 +4506,7 @@ check_initializer (tree decl, tree init, int flags, tree *cleanup)\n \t\t  && DECL_INITIAL (decl)\n \t\t  && TREE_CODE (DECL_INITIAL (decl)) == STRING_CST\n \t\t  && PAREN_STRING_LITERAL_P (DECL_INITIAL (decl)))\n-\t\twarning (\"array %qD initialized by parenthesized string literal %qE\",\n+\t\twarning (0, \"array %qD initialized by parenthesized string literal %qE\",\n \t\t\t decl, DECL_INITIAL (decl));\n \t      init = NULL;\n \t    }\n@@ -4783,7 +4783,7 @@ cp_finish_decl (tree decl, tree init, tree asmspec_tree, int flags)\n \t  && IS_AGGR_TYPE (type) && DECL_NAME (decl))\n \t{\n \t  if (TREE_TYPE (DECL_NAME (decl)) && TREE_TYPE (decl) != type)\n-\t    warning (\"shadowing previous type declaration of %q#D\", decl);\n+\t    warning (0, \"shadowing previous type declaration of %q#D\", decl);\n \t  set_identifier_type_value (DECL_NAME (decl), decl);\n \t}\n \n@@ -5885,7 +5885,7 @@ grokvardecl (tree type,\n \t\t     no linkage can only be used to declare extern \"C\"\n \t\t     entities.  Since it's not always an error in the\n \t\t     ISO C++ 90 Standard, we only issue a warning.  */\n-\t\t  warning (\"non-local variable %q#D uses anonymous type\",\n+\t\t  warning (0, \"non-local variable %q#D uses anonymous type\",\n \t\t\t   decl);\n \t\t  if (DECL_ORIGINAL_TYPE (TYPE_NAME (t)))\n \t\t    cp_warning_at (\"%q#D does not refer to the unqualified \"\n@@ -5894,7 +5894,7 @@ grokvardecl (tree type,\n \t\t}\n \t    }\n \t  else\n-\t    warning (\"non-local variable %q#D uses local type %qT\", decl, t);\n+\t    warning (0, \"non-local variable %q#D uses local type %qT\", decl, t);\n \t}\n     }\n   else\n@@ -6728,7 +6728,7 @@ grokdeclarator (const cp_declarator *declarator,\n       else if (pedantic || ! is_main)\n \tpedwarn (\"ISO C++ forbids declaration of %qs with no type\", name);\n       else if (warn_return_type)\n-\twarning (\"ISO C++ forbids declaration of %qs with no type\", name);\n+\twarning (0, \"ISO C++ forbids declaration of %qs with no type\", name);\n \n       type = integer_type_node;\n     }\n@@ -7013,7 +7013,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t  /* It's common practice (and completely valid) to have a const\n \t     be initialized and declared extern.  */\n \t  if (!(type_quals & TYPE_QUAL_CONST))\n-\t    warning (\"%qs initialized and declared %<extern%>\", name);\n+\t    warning (0, \"%qs initialized and declared %<extern%>\", name);\n \t}\n       else\n \terror (\"%qs has both %<extern%> and initializer\", name);\n@@ -7953,7 +7953,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t  {\n \t    /* Friends are treated specially.  */\n \t    if (ctype == current_class_type)\n-\t      warning (\"member functions are implicitly friends of their class\");\n+\t      warning (0, \"member functions are implicitly friends of their class\");\n  \t    else if (decl && DECL_NAME (decl))\n \t      {\n \t\tif (template_class_depth (current_class_type) == 0)\n@@ -8777,7 +8777,7 @@ grok_op_properties (tree decl, int friendp, bool complain)\n \t\twhat = \"a base class\";\n \n \t      if (what && warn_conversion)\n-\t\twarning (\"conversion to %s%s will never use a type \"\n+\t\twarning (0, \"conversion to %s%s will never use a type \"\n                          \"conversion operator\",\n \t\t\t ref ? \"a reference to \" : \"\", what);\n \t    }\n@@ -8869,13 +8869,13 @@ grok_op_properties (tree decl, int friendp, bool complain)\n \t\t  if (TREE_CODE (ret) != REFERENCE_TYPE\n \t\t      || !same_type_p (TYPE_MAIN_VARIANT (TREE_TYPE (ret)),\n \t\t\t\t       arg))\n-\t\t    warning (\"prefix %qD should return %qT\", decl,\n+\t\t    warning (0, \"prefix %qD should return %qT\", decl,\n                              build_reference_type (arg));\n \t\t}\n \t      else\n \t\t{\n \t\t  if (!same_type_p (TYPE_MAIN_VARIANT (ret), arg))\n-\t\t    warning (\"postfix %qD should return %qT\", decl, arg);\n+\t\t    warning (0, \"postfix %qD should return %qT\", decl, arg);\n \t\t}\n \t    }\n \t}\n@@ -8904,7 +8904,7 @@ grok_op_properties (tree decl, int friendp, bool complain)\n \t      && (operator_code == TRUTH_ANDIF_EXPR\n \t\t  || operator_code == TRUTH_ORIF_EXPR\n \t\t  || operator_code == COMPOUND_EXPR))\n-\t    warning (\"user-defined %qD always evaluates both arguments\",\n+\t    warning (0, \"user-defined %qD always evaluates both arguments\",\n                      decl);\n \t}\n \n@@ -8918,7 +8918,7 @@ grok_op_properties (tree decl, int friendp, bool complain)\n \t      || operator_code == MULT_EXPR\n \t      || operator_code == TRUNC_MOD_EXPR)\n \t  && TREE_CODE (TREE_TYPE (TREE_TYPE (decl))) == REFERENCE_TYPE)\n-\twarning (\"%qD should return by value\", decl);\n+\twarning (0, \"%qD should return by value\", decl);\n \n       /* [over.oper]/8 */\n       for (; argtypes && argtypes != void_list_node;\n@@ -9906,7 +9906,7 @@ start_preparsed_function (tree decl1, tree attrs, int flags)\n \n   if (DECL_DECLARED_INLINE_P (decl1)\n       && lookup_attribute (\"noinline\", attrs))\n-    warning (\"%Jinline function %qD given attribute noinline\", decl1, decl1);\n+    warning (0, \"%Jinline function %qD given attribute noinline\", decl1, decl1);\n \n   if (DECL_MAYBE_IN_CHARGE_CONSTRUCTOR_P (decl1))\n     /* This is a constructor, we must ensure that any default args\n@@ -9943,7 +9943,7 @@ start_preparsed_function (tree decl1, tree attrs, int flags)\n   if (warn_ecpp\n       && DECL_OVERLOADED_OPERATOR_P (decl1) == NOP_EXPR\n       && TREE_CODE (TREE_TYPE (fntype)) == VOID_TYPE)\n-    warning (\"%<operator=%> should return a reference to %<*this%>\");\n+    warning (0, \"%<operator=%> should return a reference to %<*this%>\");\n \n   /* Make the init_value nonzero so pushdecl knows this is not tentative.\n      error_mark_node is replaced below (in poplevel) with the BLOCK.  */\n@@ -10676,7 +10676,7 @@ finish_function (int flags)\n       /* Structor return values (if any) are set by the compiler.  */\n       && !DECL_CONSTRUCTOR_P (fndecl)\n       && !DECL_DESTRUCTOR_P (fndecl))\n-    warning (\"no return statement in function returning non-void\");\n+    warning (0, \"no return statement in function returning non-void\");\n \n   /* Store the end of the function, so that we get good line number\n      info for the epilogue.  */"}, {"sha": "530ba391f57a86fbda84304ea3292f554d02cfcd", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -420,7 +420,7 @@ delete_sanity (tree exp, tree size, bool doing_vec, int use_global_delete)\n   /* An array can't have been allocated by new, so complain.  */\n   if (TREE_CODE (exp) == VAR_DECL\n       && TREE_CODE (TREE_TYPE (exp)) == ARRAY_TYPE)\n-    warning (\"deleting array %q#D\", exp);\n+    warning (0, \"deleting array %q#D\", exp);\n \n   t = build_expr_type_conversion (WANT_POINTER, exp, true);\n \n@@ -446,7 +446,7 @@ delete_sanity (tree exp, tree size, bool doing_vec, int use_global_delete)\n   /* Deleting ptr to void is undefined behavior [expr.delete/3].  */\n   if (TREE_CODE (TREE_TYPE (type)) == VOID_TYPE)\n     {\n-      warning (\"deleting %qT is undefined\", type);\n+      warning (0, \"deleting %qT is undefined\", type);\n       doing_vec = 0;\n     }\n \n@@ -1168,7 +1168,7 @@ finish_anon_union (tree anon_union_decl)\n   main_decl = build_anon_union_vars (type, anon_union_decl);\n   if (main_decl == NULL_TREE)\n     {\n-      warning (\"anonymous union with no members\");\n+      warning (0, \"anonymous union with no members\");\n       return;\n     }\n "}, {"sha": "60db762924ef2b5bd687e5e47487f1d5d1d78680", "filename": "gcc/cp/except.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -599,7 +599,7 @@ build_throw (tree exp)\n     }\n \n   if (exp == null_node)\n-    warning (\"throwing NULL, which has integral, not pointer type\");\n+    warning (0, \"throwing NULL, which has integral, not pointer type\");\n   \n   if (exp != NULL_TREE)\n     {\n@@ -918,9 +918,9 @@ check_handlers_1 (tree master, tree_stmt_iterator i)\n       tree handler = tsi_stmt (i);\n       if (TREE_TYPE (handler) && can_convert_eh (type, TREE_TYPE (handler)))\n \t{\n-\t  warning (\"%Hexception of type %qT will be caught\",\n+\t  warning (0, \"%Hexception of type %qT will be caught\",\n \t\t   EXPR_LOCUS (handler), TREE_TYPE (handler));\n-\t  warning (\"%H   by earlier handler for %qT\",\n+\t  warning (0, \"%H   by earlier handler for %qT\",\n \t\t   EXPR_LOCUS (master), type);\n \t  break;\n         }"}, {"sha": "213f8d729202da0b1f1237bde27b3984409a766f", "filename": "gcc/cp/friend.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fcp%2Ffriend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fcp%2Ffriend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ffriend.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -149,7 +149,7 @@ add_friend (tree type, tree decl, bool complain)\n \t      if (decl == TREE_VALUE (friends))\n \t\t{\n \t\t  if (complain)\n-\t\t    warning (\"%qD is already a friend of class %qT\",\n+\t\t    warning (0, \"%qD is already a friend of class %qT\",\n \t\t\t     decl, type);\n \t\t  return;\n \t\t}\n@@ -361,7 +361,7 @@ make_friend_class (tree type, tree friend_type, bool complain)\n \t  if (friend_type == probe)\n \t    {\n \t      if (complain)\n-\t\twarning (\"%qD is already a friend of %qT\", probe, type);\n+\t\twarning (0, \"%qD is already a friend of %qT\", probe, type);\n \t      break;\n \t    }\n \t}\n@@ -370,7 +370,7 @@ make_friend_class (tree type, tree friend_type, bool complain)\n \t  if (same_type_p (probe, friend_type))\n \t    {\n \t      if (complain)\n-\t\twarning (\"%qT is already a friend of %qT\", probe, type);\n+\t\twarning (0, \"%qT is already a friend of %qT\", probe, type);\n \t      break;\n \t    }\n \t}\n@@ -550,11 +550,11 @@ do_friend (tree ctype, tree declarator, tree decl,\n \t  if (warn)\n \t    {\n \t      static int explained;\n-\t      warning (\"friend declaration %q#D declares a non-template \"\n+\t      warning (0, \"friend declaration %q#D declares a non-template \"\n                        \"function\", decl);\n \t      if (! explained)\n \t\t{\n-\t\t  warning (\"(if this is not what you intended, make sure \"\n+\t\t  warning (0, \"(if this is not what you intended, make sure \"\n                            \"the function template has already been declared \"\n                            \"and add <> after the function name here) \"\n                            \"-Wno-non-template-friend disables this warning\");"}, {"sha": "99891cb2922effc58778cdff36dfa78159c3fbe0", "filename": "gcc/cp/init.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -323,7 +323,7 @@ perform_member_init (tree member, tree init)\n   /* Effective C++ rule 12 requires that all data members be\n      initialized.  */\n   if (warn_ecpp && !explicit && TREE_CODE (type) != ARRAY_TYPE)\n-    warning (\"%J%qD should be initialized in the member initialization \"\n+    warning (0, \"%J%qD should be initialized in the member initialization \"\n \t     \"list\", current_function_decl, member);\n \n   if (init == void_type_node)\n@@ -370,7 +370,7 @@ perform_member_init (tree member, tree init)\n \t    {\n \t      init = build_default_init (type, /*nelts=*/NULL_TREE);\n \t      if (TREE_CODE (type) == REFERENCE_TYPE)\n-\t\twarning (\"%Jdefault-initialization of %q#D, \"\n+\t\twarning (0, \"%Jdefault-initialization of %q#D, \"\n \t\t\t \"which has reference type\",\n \t\t\t current_function_decl, member);\n \t    }\n@@ -525,13 +525,13 @@ sort_mem_initializers (tree t, tree mem_inits)\n \t    cp_warning_at (\"%qD will be initialized after\",\n \t\t\t   TREE_PURPOSE (next_subobject));\n \t  else\n-\t    warning (\"base %qT will be initialized after\",\n+\t    warning (0, \"base %qT will be initialized after\",\n \t\t     TREE_PURPOSE (next_subobject));\n \t  if (TREE_CODE (subobject) == FIELD_DECL)\n \t    cp_warning_at (\"  %q#D\", subobject);\n \t  else\n-\t    warning (\"  base %qT\", subobject);\n-\t  warning (\"%J  when initialized here\", current_function_decl);\n+\t    warning (0, \"  base %qT\", subobject);\n+\t  warning (0, \"%J  when initialized here\", current_function_decl);\n \t}\n \n       /* Look again, from the beginning of the list.  */\n@@ -679,7 +679,7 @@ emit_mem_initializers (tree mem_inits)\n       if (extra_warnings && !arguments \n \t  && DECL_COPY_CONSTRUCTOR_P (current_function_decl)\n \t  && TYPE_NEEDS_CONSTRUCTING (BINFO_TYPE (subobject)))\n-\twarning (\"%Jbase class %q#T should be explicitly initialized in the \"\n+\twarning (0, \"%Jbase class %q#T should be explicitly initialized in the \"\n \t\t \"copy constructor\",\n \t\t current_function_decl, BINFO_TYPE (subobject));\n \n@@ -1645,7 +1645,7 @@ build_new (tree placement, tree type, tree nelts, tree init,\n \tpedwarn (\"size in array new must have integral type\");\n       nelts = save_expr (cp_convert (sizetype, nelts));\n       if (nelts == integer_zero_node)\n-\twarning (\"zero size array reserves no space\");\n+\twarning (0, \"zero size array reserves no space\");\n     }\n \n   /* ``A reference cannot be created by the new operator.  A reference\n@@ -2735,7 +2735,7 @@ build_delete (tree type, tree addr, special_function_kind auto_delete,\n \t  complete_type (type);\n \t  if (!COMPLETE_TYPE_P (type))\n \t    {\n-\t      warning (\"possible problem detected in invocation of \"\n+\t      warning (0, \"possible problem detected in invocation of \"\n \t\t       \"delete operator:\");\n \t      cxx_incomplete_type_diagnostic (addr, type, 1);\n \t      inform (\"neither the destructor nor the class-specific \""}, {"sha": "9e39241d6e25798ef1468da12b96be975b0fac91", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -433,7 +433,7 @@ parse_strconst_pragma (const char* name, int opt)\n     {\n       result = x;\n       if (c_lex (&x) != CPP_EOF)\n-\twarning (\"junk at end of #pragma %s\", name);\n+\twarning (0, \"junk at end of #pragma %s\", name);\n       return result;\n     }\n \n@@ -527,7 +527,7 @@ handle_pragma_implementation (cpp_reader* dfile ATTRIBUTE_UNUSED )\n \t cookie (if any) of the filename, but this requires completing the\n \t --enable-mapped-location project first.  See PR 17577.  */\n       if (cpp_included (parse_in, filename))\n-\twarning (\"#pragma implementation for %qs appears after \"\n+\twarning (0, \"#pragma implementation for %qs appears after \"\n \t\t \"file is included\", filename);\n #endif\n     }\n@@ -552,7 +552,7 @@ handle_pragma_java_exceptions (cpp_reader* dfile ATTRIBUTE_UNUSED )\n {\n   tree x;\n   if (c_lex (&x) != CPP_EOF)\n-    warning (\"junk at end of #pragma GCC java_exceptions\");\n+    warning (0, \"junk at end of #pragma GCC java_exceptions\");\n \n   choose_personality_routine (lang_java);\n }"}, {"sha": "fc6c4243a82de565bf9c033c9df8c9b38188bdf8", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -2479,7 +2479,7 @@ static inline const char *\n finish_mangling (const bool warn)\n {\n   if (warn_abi && warn && G.need_abi_warning)\n-    warning (\"the mangled name of %qD will change in a future \"\n+    warning (0, \"the mangled name of %qD will change in a future \"\n \t     \"version of GCC\",\n \t     G.entity);\n "}, {"sha": "2bce7f8c4fb7510b8c0302f7bc5b7324d73abb78", "filename": "gcc/cp/method.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -1096,7 +1096,7 @@ lazily_declare_fn (special_function_kind sfk, tree type)\n \t TYPE_METHODS list, which cause the destructor to be emitted\n \t in an incorrect location in the vtable.  */ \n       if (warn_abi && DECL_VIRTUAL_P (fn))\n-\twarning (\"vtable layout for class %qT may not be ABI-compliant\"\n+\twarning (0, \"vtable layout for class %qT may not be ABI-compliant\"\n \t\t \"and may change in a future version of GCC due to \"\n \t\t \"implicit virtual destructor\",\n \t\t type);"}, {"sha": "634645d7fa435032748014d809af88b654948fdd", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -894,7 +894,7 @@ pushdecl (tree x)\n \t\t/* OK */;\n \t      else\n \t\t{\n-\t\t  warning (\"extern declaration of %q#D doesn't match\", x);\n+\t\t  warning (0, \"extern declaration of %q#D doesn't match\", x);\n \t\t  cp_warning_at (\"global declaration %q#D\", oldglobal);\n \t\t}\n \t    }\n@@ -938,8 +938,8 @@ pushdecl (tree x)\n \n \t      if (warn_shadow && !err)\n \t\t{\n-\t\t  warning (\"declaration of %q#D shadows a parameter\", x);\n-\t\t  warning (\"%Jshadowed declaration is here\", oldlocal);\n+\t\t  warning (0, \"declaration of %q#D shadows a parameter\", x);\n+\t\t  warning (0, \"%Jshadowed declaration is here\", oldlocal);\n \t\t}\n \t    }\n \n@@ -963,22 +963,22 @@ pushdecl (tree x)\n \t      if (member && !TREE_STATIC (member))\n \t\t{\n \t\t  /* Location of previous decl is not useful in this case.  */\n-\t\t  warning (\"declaration of %qD shadows a member of 'this'\",\n+\t\t  warning (0, \"declaration of %qD shadows a member of 'this'\",\n \t\t\t   x);\n \t\t}\n \t      else if (oldlocal != NULL_TREE\n \t\t       && TREE_CODE (oldlocal) == VAR_DECL)\n \t\t{\n-\t\t  warning (\"declaration of %qD shadows a previous local\", x);\n-\t\t  warning (\"%Jshadowed declaration is here\", oldlocal);\n+\t\t  warning (0, \"declaration of %qD shadows a previous local\", x);\n+\t\t  warning (0, \"%Jshadowed declaration is here\", oldlocal);\n \t\t}\n \t      else if (oldglobal != NULL_TREE\n \t\t       && TREE_CODE (oldglobal) == VAR_DECL)\n \t\t/* XXX shadow warnings in outer-more namespaces */\n \t\t{\n-\t\t  warning (\"declaration of %qD shadows a global declaration\",\n+\t\t  warning (0, \"declaration of %qD shadows a global declaration\",\n \t\t\t   x);\n-\t\t  warning (\"%Jshadowed declaration is here\", oldglobal);\n+\t\t  warning (0, \"%Jshadowed declaration is here\", oldglobal);\n \t\t}\n \t    }\n \t}\n@@ -1092,7 +1092,7 @@ check_for_out_of_scope_variable (tree decl)\n     {\n       if (!DECL_ERROR_REPORTED (decl))\n \t{\n-\t  warning (\"name lookup of %qD changed\", DECL_NAME (decl));\n+\t  warning (0, \"name lookup of %qD changed\", DECL_NAME (decl));\n \t  cp_warning_at (\"  matches this %qD under ISO standard rules\",\n \t\t\t shadowed);\n \t  cp_warning_at (\"  matches this %qD under old rules\", decl);\n@@ -1861,7 +1861,7 @@ push_overloaded_decl (tree decl, int flags)\n \t  if (IS_AGGR_TYPE (t) && warn_shadow\n \t      && (! DECL_IN_SYSTEM_HEADER (decl)\n \t\t  || ! DECL_IN_SYSTEM_HEADER (old)))\n-\t    warning (\"%q#D hides constructor for %q#T\", decl, t);\n+\t    warning (0, \"%q#D hides constructor for %q#T\", decl, t);\n \t  old = NULL_TREE;\n \t}\n       else if (is_overloaded_fn (old))\n@@ -3207,7 +3207,7 @@ parse_using_directive (tree namespace, tree attribs)\n \t\t\t   DECL_NAMESPACE_ASSOCIATIONS (namespace));\n \t}\n       else\n-\twarning (\"%qD attribute directive ignored\", name);\n+\twarning (0, \"%qD attribute directive ignored\", name);\n     }\n }\n "}, {"sha": "56ff04928d485cdd42070480b4e2daa5a30e9b07", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -1798,7 +1798,7 @@ static inline void\n cp_parser_warn_min_max (void)\n {\n   if (warn_deprecated && !in_system_header)\n-    warning (\"minimum/maximum operators are deprecated\");\n+    warning (0, \"minimum/maximum operators are deprecated\");\n }\n \n /* If not parsing tentatively, issue a diagnostic of the form\n@@ -5297,7 +5297,7 @@ cp_parser_cast_expression (cp_parser *parser, bool address_p, bool cast_p)\n \t      && !in_system_header\n \t      && !VOID_TYPE_P (type)\n \t      && current_lang_name != lang_name_c)\n-\t    warning (\"use of old-style cast\");\n+\t    warning (0, \"use of old-style cast\");\n \n \t  /* Only type conversions to integral or enumeration types\n \t     can be used in constant-expressions.  */\n@@ -8128,7 +8128,7 @@ cp_parser_template_declaration (cp_parser* parser, bool member_p)\n       /* Consume the `export' token.  */\n       cp_lexer_consume_token (parser->lexer);\n       /* Warn that we do not support `export'.  */\n-      warning (\"keyword %<export%> not implemented, and will be ignored\");\n+      warning (0, \"keyword %<export%> not implemented, and will be ignored\");\n     }\n \n   cp_parser_template_declaration_after_export (parser, member_p);\n@@ -9914,7 +9914,7 @@ cp_parser_elaborated_type_specifier (cp_parser* parser,\n \n  \t  /* Warn about attributes. They are ignored.  */\n  \t  if (attributes)\n-\t    warning (\"type attributes are honored only at type definition\");\n+\t    warning (0, \"type attributes are honored only at type definition\");\n \n \t  type = xref_tag (tag_type, identifier, ts,\n \t\t\t   parser->num_template_parameter_lists);\n@@ -10759,7 +10759,7 @@ cp_parser_init_declarator (cp_parser* parser,\n      attributes -- but ignores them.  */\n   if (cp_parser_allow_gnu_extensions_p (parser) && is_parenthesized_init)\n     if (cp_parser_attributes_opt (parser))\n-      warning (\"attributes after parenthesized initializer ignored\");\n+      warning (0, \"attributes after parenthesized initializer ignored\");\n \n   /* For an in-class declaration, use `grokfield' to create the\n      declaration.  */\n@@ -12036,7 +12036,7 @@ cp_parser_parameter_declaration (cp_parser *parser,\n       if (!parser->default_arg_ok_p)\n \t{\n \t  if (!flag_pedantic_errors)\n-\t    warning (\"deprecated use of default argument for parameter of non-function\");\n+\t    warning (0, \"deprecated use of default argument for parameter of non-function\");\n \t  else\n \t    {\n \t      error (\"default arguments are only permitted for function parameters\");"}, {"sha": "92a53b5ad4ff4c2312fb3be8bd8e00d319cf2994", "filename": "gcc/cp/repo.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fcp%2Frepo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fcp%2Frepo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frepo.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -109,7 +109,7 @@ get_base_filename (const char *filename)\n \n   if (p && ! compiling)\n     {\n-      warning (\"-frepo must be used with -c\");\n+      warning (0, \"-frepo must be used with -c\");\n       flag_use_repository = 0;\n       return NULL;\n     }"}, {"sha": "1cad0bda9f4699637cc6d0cfcc61c7c148ed3303", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -567,7 +567,7 @@ build_dynamic_cast_1 (tree type, tree expr)\n \t\t  && TREE_CODE (TREE_TYPE (old_expr)) == RECORD_TYPE)\n \t\t{\n \t          tree expr = throw_bad_cast ();\n-\t\t  warning (\"dynamic_cast of %q#D to %q#T can never succeed\",\n+\t\t  warning (0, \"dynamic_cast of %q#D to %q#T can never succeed\",\n                            old_expr, type);\n \t          /* Bash it to the expected type.  */\n \t          TREE_TYPE (expr) = type;\n@@ -581,7 +581,7 @@ build_dynamic_cast_1 (tree type, tree expr)\n \t      if (TREE_CODE (op) == VAR_DECL\n \t\t  && TREE_CODE (TREE_TYPE (op)) == RECORD_TYPE)\n \t\t{\n-\t\t  warning (\"dynamic_cast of %q#D to %q#T can never succeed\",\n+\t\t  warning (0, \"dynamic_cast of %q#D to %q#T can never succeed\",\n                            op, type);\n \t\t  retval = build_int_cst (type, 0); \n \t\t  return retval;"}, {"sha": "9f0776a0df4fb844852434aa6ace721532fcf34f", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -1767,12 +1767,12 @@ handle_com_interface_attribute (tree* node,\n       || !CLASS_TYPE_P (*node)\n       || *node != TYPE_MAIN_VARIANT (*node))\n     {\n-      warning (\"%qE attribute can only be applied to class definitions\", name);\n+      warning (0, \"%qE attribute can only be applied to class definitions\", name);\n       return NULL_TREE;\n     }\n \n   if (!warned++)\n-    warning (\"%qE is obsolete; g++ vtables are now COM-compatible by default\",\n+    warning (0, \"%qE is obsolete; g++ vtables are now COM-compatible by default\",\n \t     name);\n \n   return NULL_TREE;\n@@ -1835,7 +1835,7 @@ handle_init_priority_attribute (tree* node,\n   if (pri <= MAX_RESERVED_INIT_PRIORITY)\n     {\n       warning\n-\t(\"requested init_priority is reserved for internal use\");\n+\t(0, \"requested init_priority is reserved for internal use\");\n     }\n \n   if (SUPPORTS_INIT_PRIORITY)"}, {"sha": "2b4d9ec32ef6d990a0120c9492f0d83d23a3e8b6", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -1480,7 +1480,7 @@ string_conv_p (tree totype, tree exp, int warn)\n \n   /* This warning is not very useful, as it complains about printf.  */\n   if (warn && warn_write_strings)\n-    warning (\"deprecated conversion from string constant to %qT'\", totype);\n+    warning (0, \"deprecated conversion from string constant to %qT'\", totype);\n \n   return 1;\n }\n@@ -1698,9 +1698,9 @@ build_class_member_access_expr (tree object, tree member,\n \t  && !DECL_FIELD_IS_BASE (member)\n \t  && !skip_evaluation)\n \t{\n-\t  warning (\"invalid access to non-static data member %qD of NULL object\", \n+\t  warning (0, \"invalid access to non-static data member %qD of NULL object\", \n \t\t   member);\n-\t  warning  (\"(perhaps the %<offsetof%> macro was used incorrectly)\");\n+\t  warning (0, \"(perhaps the %<offsetof%> macro was used incorrectly)\");\n \t}\n \n       /* If MEMBER is from an anonymous aggregate, we have converted\n@@ -2174,7 +2174,7 @@ build_array_ref (tree array, tree idx)\n \t must have done so deliberately.  */\n       if (warn_char_subscripts\n \t  && TYPE_MAIN_VARIANT (TREE_TYPE (idx)) == char_type_node)\n-\twarning (\"array subscript has type %<char%>\");\n+\twarning (0, \"array subscript has type %<char%>\");\n \n       if (!INTEGRAL_OR_ENUMERATION_TYPE_P (TREE_TYPE (idx)))\n \t{\n@@ -2226,7 +2226,7 @@ build_array_ref (tree array, tree idx)\n \t  while (TREE_CODE (foo) == COMPONENT_REF)\n \t    foo = TREE_OPERAND (foo, 0);\n \t  if (TREE_CODE (foo) == VAR_DECL && DECL_REGISTER (foo))\n-\t    warning (\"subscripting array declared %<register%>\");\n+\t    warning (0, \"subscripting array declared %<register%>\");\n \t}\n \n       type = TREE_TYPE (TREE_TYPE (array));\n@@ -2854,9 +2854,9 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n \t      || code1 == COMPLEX_TYPE || code1 == VECTOR_TYPE))\n \t{\n \t  if (TREE_CODE (op1) == INTEGER_CST && integer_zerop (op1))\n-\t    warning (\"division by zero in %<%E / 0%>\", op0);\n+\t    warning (0, \"division by zero in %<%E / 0%>\", op0);\n \t  else if (TREE_CODE (op1) == REAL_CST && real_zerop (op1))\n-\t    warning (\"division by zero in %<%E / 0.%>\", op0);\n+\t    warning (0, \"division by zero in %<%E / 0.%>\", op0);\n \t      \n \t  if (code0 == COMPLEX_TYPE || code0 == VECTOR_TYPE)\n \t    code0 = TREE_CODE (TREE_TYPE (TREE_TYPE (op0)));\n@@ -2890,9 +2890,9 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n     case TRUNC_MOD_EXPR:\n     case FLOOR_MOD_EXPR:\n       if (code1 == INTEGER_TYPE && integer_zerop (op1))\n-\twarning (\"division by zero in %<%E %% 0%>\", op0);\n+\twarning (0, \"division by zero in %<%E %% 0%>\", op0);\n       else if (code1 == REAL_TYPE && real_zerop (op1))\n-\twarning (\"division by zero in %<%E %% 0.%>\", op0);\n+\twarning (0, \"division by zero in %<%E %% 0.%>\", op0);\n       \n       if (code0 == INTEGER_TYPE && code1 == INTEGER_TYPE)\n \t{\n@@ -2926,13 +2926,13 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n \t  if (TREE_CODE (op1) == INTEGER_CST)\n \t    {\n \t      if (tree_int_cst_lt (op1, integer_zero_node))\n-\t\twarning (\"right shift count is negative\");\n+\t\twarning (0, \"right shift count is negative\");\n \t      else\n \t\t{\n \t\t  if (! integer_zerop (op1))\n \t\t    short_shift = 1;\n \t\t  if (compare_tree_int (op1, TYPE_PRECISION (type0)) >= 0)\n-\t\t    warning (\"right shift count >= width of type\");\n+\t\t    warning (0, \"right shift count >= width of type\");\n \t\t}\n \t    }\n \t  /* Convert the shift-count to an integer, regardless of\n@@ -2951,9 +2951,9 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n \t  if (TREE_CODE (op1) == INTEGER_CST)\n \t    {\n \t      if (tree_int_cst_lt (op1, integer_zero_node))\n-\t\twarning (\"left shift count is negative\");\n+\t\twarning (0, \"left shift count is negative\");\n \t      else if (compare_tree_int (op1, TYPE_PRECISION (type0)) >= 0)\n-\t\twarning (\"left shift count >= width of type\");\n+\t\twarning (0, \"left shift count >= width of type\");\n \t    }\n \t  /* Convert the shift-count to an integer, regardless of\n \t     size of value being shifted.  */\n@@ -2972,10 +2972,10 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n \t  if (TREE_CODE (op1) == INTEGER_CST)\n \t    {\n \t      if (tree_int_cst_lt (op1, integer_zero_node))\n-\t\twarning (\"%s rotate count is negative\",\n+\t\twarning (0, \"%s rotate count is negative\",\n \t\t\t (code == LROTATE_EXPR) ? \"left\" : \"right\");\n \t      else if (compare_tree_int (op1, TYPE_PRECISION (type0)) >= 0)\n-\t\twarning (\"%s rotate count >= width of type\",\n+\t\twarning (0, \"%s rotate count >= width of type\",\n \t\t\t (code == LROTATE_EXPR) ? \"left\" : \"right\");\n \t    }\n \t  /* Convert the shift-count to an integer, regardless of\n@@ -2988,7 +2988,7 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n     case EQ_EXPR:\n     case NE_EXPR:\n       if (warn_float_equal && (code0 == REAL_TYPE || code1 == REAL_TYPE))\n-\twarning (\"comparing floating point with == or != is unsafe\");\n+\twarning (0, \"comparing floating point with == or != is unsafe\");\n \n       build_type = boolean_type_node; \n       if ((code0 == INTEGER_TYPE || code0 == REAL_TYPE\n@@ -3315,7 +3315,7 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n \t      && TYPE_MAIN_VARIANT (TREE_TYPE (orig_op0))\n \t         != TYPE_MAIN_VARIANT (TREE_TYPE (orig_op1)))\n \t    {\n-\t      warning (\"comparison between types %q#T and %q#T\", \n+\t      warning (0, \"comparison between types %q#T and %q#T\", \n                        TREE_TYPE (orig_op0), TREE_TYPE (orig_op1));\n \t    }\n \n@@ -3351,7 +3351,7 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n \t\t\t\t\t\t(result_type)))))\n \t    /* OK */;\n \t  else\n-\t    warning (\"comparison between signed and unsigned integer expressions\");\n+\t    warning (0, \"comparison between signed and unsigned integer expressions\");\n \n \t  /* Warn if two unsigned values are being compared in a size\n \t     larger than their original size, and one (and only one) is the\n@@ -3395,15 +3395,15 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n \t\t    {\n \t\t      mask = (~ (HOST_WIDE_INT) 0) << bits;\n \t\t      if ((mask & constant) != mask)\n-\t\t\twarning (\"comparison of promoted ~unsigned with constant\");\n+\t\t\twarning (0, \"comparison of promoted ~unsigned with constant\");\n \t\t    }\n \t\t}\n \t      else if (unsignedp0 && unsignedp1\n \t\t       && (TYPE_PRECISION (TREE_TYPE (primop0))\n \t\t\t   < TYPE_PRECISION (result_type))\n \t\t       && (TYPE_PRECISION (TREE_TYPE (primop1))\n \t\t\t   < TYPE_PRECISION (result_type)))\n-\t\twarning (\"comparison of promoted ~unsigned with unsigned\");\n+\t\twarning (0, \"comparison of promoted ~unsigned with unsigned\");\n \t    }\n \t}\n     }\n@@ -3430,7 +3430,7 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n        performed.  Note that pointer-difference and pointer-addition\n        have already been handled above, and so we don't end up here in\n        that case.  */\n-    warning (\"NULL used in arithmetic\");\n+    warning (0, \"NULL used in arithmetic\");\n \n   if (! converted)\n     {\n@@ -3593,7 +3593,7 @@ build_x_unary_op (enum tree_code code, tree xarg)\n \t    }\t      \n         }\n       else if (TREE_CODE (xarg) == TARGET_EXPR)\n-\twarning (\"taking address of temporary\");\n+\twarning (0, \"taking address of temporary\");\n       exp = build_unary_op (ADDR_EXPR, xarg, 0);\n     }\n \n@@ -4288,7 +4288,7 @@ cxx_mark_addressable (tree exp)\n \t      }\n \t    else if (extra_warnings)\n \t      warning\n-\t\t(\"address requested for %qD, which is declared %<register%>\", x);\n+\t\t(0, \"address requested for %qD, which is declared %<register%>\", x);\n \t  }\n \tTREE_ADDRESSABLE (x) = 1;\n \treturn true;\n@@ -4492,7 +4492,7 @@ build_static_cast_1 (tree type, tree expr, bool c_cast_p,\n     {\n       /* C-style casts are allowed to cast away constness.  With\n \t WARN_CAST_QUAL, we still want to issue a warning.  */ \n-      diag_fn = warn_cast_qual ? warning : NULL;\n+      diag_fn = warn_cast_qual ? warning0 : NULL;\n       desc = \"cast\";\n     }\n   else\n@@ -4807,7 +4807,7 @@ build_reinterpret_cast_1 (tree type, tree expr, bool c_cast_p,\n       if (TYPE_PTR_P (intype)\n \t  && (comptypes (TREE_TYPE (intype), TREE_TYPE (type),\n \t\t\t COMPARE_BASE | COMPARE_DERIVED)))\n-\twarning (\"casting %qT to %qT does not dereference pointer\",\n+\twarning (0, \"casting %qT to %qT does not dereference pointer\",\n \t\t intype, type);\n \n       expr = build_unary_op (ADDR_EXPR, expr, 0);\n@@ -4879,7 +4879,7 @@ build_reinterpret_cast_1 (tree type, tree expr, bool c_cast_p,\n \t  && COMPLETE_TYPE_P (TREE_TYPE (type))\n \t  && COMPLETE_TYPE_P (TREE_TYPE (intype))\n \t  && TYPE_ALIGN (TREE_TYPE (type)) > TYPE_ALIGN (TREE_TYPE (intype)))\n-\twarning (\"cast from %qT to %qT increases required alignment of \"\n+\twarning (0, \"cast from %qT to %qT increases required alignment of \"\n \t\t \"target type\",\n \t\t intype, type);\n       \n@@ -4893,7 +4893,7 @@ build_reinterpret_cast_1 (tree type, tree expr, bool c_cast_p,\n  \t   where possible, and it is necessary in some cases.  DR 195\n  \t   addresses this issue, but as of 2004/10/26 is still in\n  \t   drafting.  */\n- \twarning (\"ISO C++ forbids casting between pointer-to-function and pointer-to-object\");\n+ \twarning (0, \"ISO C++ forbids casting between pointer-to-function and pointer-to-object\");\n       return fold_if_not_in_template (build_nop (type, expr));\n     }\n   else if (TREE_CODE (type) == VECTOR_TYPE)\n@@ -5535,7 +5535,7 @@ get_delta_difference (tree from, tree to,\n \t      virt_binfo = binfo_from_vbase (binfo);\n \t      if (virt_binfo)\n \t\t/* This is a reinterpret cast, we choose to do nothing.  */\n-\t\twarning (\"pointer to member cast via virtual base %qT\",\n+\t\twarning (0, \"pointer to member cast via virtual base %qT\",\n \t\t\t BINFO_TYPE (virt_binfo));\n \t      else\n \t\tresult = size_diffop (size_zero_node, BINFO_OFFSET (binfo));\n@@ -5551,7 +5551,7 @@ get_delta_difference (tree from, tree to,\n \t{\n \t  /* This is a reinterpret cast, we choose to do nothing.  */\n \t  if (allow_inverse_p)\n-\t    warning (\"pointer to member cast via virtual base %qT\",\n+\t    warning (0, \"pointer to member cast via virtual base %qT\",\n \t\t     BINFO_TYPE (virt_binfo));\n \t  else\n \t    error (\"pointer to member conversion via virtual base %qT\",\n@@ -5973,14 +5973,14 @@ maybe_warn_about_returning_address_of_local (tree retval)\n       if (TREE_CODE (whats_returned) == AGGR_INIT_EXPR\n \t  || TREE_CODE (whats_returned) == TARGET_EXPR)\n \t{\n-\t  warning (\"returning reference to temporary\");\n+\t  warning (0, \"returning reference to temporary\");\n \t  return;\n \t}\n       if (TREE_CODE (whats_returned) == VAR_DECL \n \t  && DECL_NAME (whats_returned)\n \t  && TEMP_NAME_P (DECL_NAME (whats_returned)))\n \t{\n-\t  warning (\"reference to non-lvalue returned\");\n+\t  warning (0, \"reference to non-lvalue returned\");\n \t  return;\n \t}\n     }\n@@ -6019,7 +6019,7 @@ check_return_expr (tree retval)\n      (This is a G++ extension, used to get better code for functions\n      that call the `volatile' function.)  */\n   if (TREE_THIS_VOLATILE (current_function_decl))\n-    warning (\"function declared %<noreturn%> has a %<return%> statement\");\n+    warning (0, \"function declared %<noreturn%> has a %<return%> statement\");\n \n   /* Check for various simple errors.  */\n   if (DECL_DESTRUCTOR_P (current_function_decl))\n@@ -6107,7 +6107,7 @@ check_return_expr (tree retval)\n       && !TYPE_NOTHROW_P (TREE_TYPE (current_function_decl))\n       && ! flag_check_new\n       && null_ptr_cst_p (retval))\n-    warning (\"%<operator new%> must not return NULL unless it is \"\n+    warning (0, \"%<operator new%> must not return NULL unless it is \"\n              \"declared %<throw()%> (or -fcheck-new is in effect)\");\n \n   /* Effective C++ rule 15.  See also start_function.  */\n@@ -6133,7 +6133,7 @@ check_return_expr (tree retval)\n \t}\n \n       if (warn)\n-\twarning (\"%<operator=%> should return a reference to %<*this%>\");\n+\twarning (0, \"%<operator=%> should return a reference to %<*this%>\");\n     }\n \n   /* The fabled Named Return Value optimization, as per [class.copy]/15:"}, {"sha": "37eb023324a3c04b8007926c72a66556674b8314", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -352,7 +352,7 @@ cxx_incomplete_type_diagnostic (tree value, tree type, int diag_type)\n \n   if (diag_type == 1)\n     {\n-      p_msg = warning;\n+      p_msg = warning0;\n       p_msg_at = cp_warning_at;\n     }\n   else if (diag_type == 2)\n@@ -839,7 +839,7 @@ process_init_constructor (tree type, tree init, tree* elts)\n   if (elts)\n     {\n       if (warn_missing_braces)\n-\twarning (\"aggregate has a partly bracketed initializer\");\n+\twarning (0, \"aggregate has a partly bracketed initializer\");\n       tail = *elts;\n     }\n   else\n@@ -1005,7 +1005,7 @@ process_init_constructor (tree type, tree init, tree* elts)\n \t      /* Warn when some struct elements are implicitly initialized.  */\n \t      if (warn_missing_field_initializers\n \t          && (!init || BRACE_ENCLOSED_INITIALIZER_P (init)))\n-\t\twarning (\"missing initializer for member %qD\", field);\n+\t\twarning (0, \"missing initializer for member %qD\", field);\n \t    }\n \t  else\n \t    {\n@@ -1020,7 +1020,7 @@ process_init_constructor (tree type, tree init, tree* elts)\n \t\t to zero.  */\n \t      if (warn_missing_field_initializers\n \t          && (!init || BRACE_ENCLOSED_INITIALIZER_P (init)))\n-\t\twarning (\"missing initializer for member %qD\", field);\n+\t\twarning (0, \"missing initializer for member %qD\", field);\n \n \t      if (! zero_init_p (TREE_TYPE (field)))\n \t\tnext1 = build_zero_init (TREE_TYPE (field),"}, {"sha": "941ddb811f78c32cd901cf2d1fa762653b374a91", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -412,7 +412,19 @@ inform (const char *msgid, ...)\n /* A warning.  Use this for code which is correct according to the\n    relevant language specification but is likely to be buggy anyway.  */\n void\n-warning (const char *msgid, ...)\n+warning (int opt ATTRIBUTE_UNUSED, const char *msgid, ...)\n+{\n+  diagnostic_info diagnostic;\n+  va_list ap;\n+\n+  va_start (ap, msgid);\n+  diagnostic_set_info (&diagnostic, msgid, &ap, input_location, DK_WARNING);\n+  report_diagnostic (&diagnostic);\n+  va_end (ap);\n+}\n+\n+void\n+warning0 (const char *msgid, ...)\n {\n   diagnostic_info diagnostic;\n   va_list ap;"}, {"sha": "04107970f6428074a23bfe54f0e136b1c0d0a891", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -3266,7 +3266,7 @@ make_insn_raw (rtx pattern)\n \t  || (GET_CODE (insn) == SET\n \t      && SET_DEST (insn) == pc_rtx)))\n     {\n-      warning (\"ICE: emit_insn used where emit_jump_insn needed:\\n\");\n+      warning (0, \"ICE: emit_insn used where emit_jump_insn needed:\\n\");\n       debug_rtx (insn);\n     }\n #endif"}, {"sha": "9470db1e9c76fd723e17d16da580a51aec2829b6", "filename": "gcc/errors.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Ferrors.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Ferrors.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ferrors.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -42,7 +42,7 @@ int have_error = 0;\n /* Print a warning message - output produced, but there may be problems.  */\n \n void\n-warning (const char *format, ...)\n+warning (int opt ATTRIBUTE_UNUSED, const char *format, ...)\n {\n   va_list ap;\n "}, {"sha": "99aa2410f7ee39e08a55adfd96fe4a76ca284d71", "filename": "gcc/errors.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Ferrors.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Ferrors.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ferrors.h?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -30,7 +30,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #ifndef GCC_ERRORS_H\n #define GCC_ERRORS_H\n \n-extern void warning (const char *, ...);\n+extern void warning (int, const char *, ...);\n extern void error (const char *, ...);\n extern void fatal (const char *, ...) ATTRIBUTE_NORETURN;\n extern void internal_error (const char *, ...) ATTRIBUTE_NORETURN;"}, {"sha": "e928025700b86e7540bfe0f5c6ac593fb7ae82b2", "filename": "gcc/fold-const.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -3226,7 +3226,7 @@ optimize_bit_field_compare (enum tree_code code, tree compare_type,\n \t\t\t\t\tfold_convert (unsigned_type, rhs),\n \t\t\t\t\tsize_int (lbitsize), 0)))\n \t{\n-\t  warning (\"comparison is always %d due to width of bit-field\",\n+\t  warning (0, \"comparison is always %d due to width of bit-field\",\n \t\t   code == NE_EXPR);\n \t  return constant_boolean_node (code == NE_EXPR, compare_type);\n \t}\n@@ -3237,7 +3237,7 @@ optimize_bit_field_compare (enum tree_code code, tree compare_type,\n \t\t\t      size_int (lbitsize - 1), 0);\n       if (! integer_zerop (tem) && ! integer_all_onesp (tem))\n \t{\n-\t  warning (\"comparison is always %d due to width of bit-field\",\n+\t  warning (0, \"comparison is always %d due to width of bit-field\",\n \t\t   code == NE_EXPR);\n \t  return constant_boolean_node (code == NE_EXPR, compare_type);\n \t}\n@@ -4808,7 +4808,7 @@ fold_truthop (enum tree_code code, tree truth_type, tree lhs, tree rhs)\n \t\t\t\t\t\t     lntype, ll_mask),\n \t\t\t\t\t0)))\n \t{\n-\t  warning (\"comparison is always %d\", wanted_code == NE_EXPR);\n+\t  warning (0, \"comparison is always %d\", wanted_code == NE_EXPR);\n \n \t  return constant_boolean_node (wanted_code == NE_EXPR, truth_type);\n \t}\n@@ -4823,7 +4823,7 @@ fold_truthop (enum tree_code code, tree truth_type, tree lhs, tree rhs)\n \t\t\t\t\t\t     lntype, rl_mask),\n \t\t\t\t\t0)))\n \t{\n-\t  warning (\"comparison is always %d\", wanted_code == NE_EXPR);\n+\t  warning (0, \"comparison is always %d\", wanted_code == NE_EXPR);\n \n \t  return constant_boolean_node (wanted_code == NE_EXPR, truth_type);\n \t}\n@@ -4952,12 +4952,12 @@ fold_truthop (enum tree_code code, tree truth_type, tree lhs, tree rhs)\n     {\n       if (wanted_code == NE_EXPR)\n \t{\n-\t  warning (\"%<or%> of unmatched not-equal tests is always 1\");\n+\t  warning (0, \"%<or%> of unmatched not-equal tests is always 1\");\n \t  return constant_boolean_node (true, truth_type);\n \t}\n       else\n \t{\n-\t  warning (\"%<and%> of mutually exclusive equal-tests is always 0\");\n+\t  warning (0, \"%<and%> of mutually exclusive equal-tests is always 0\");\n \t  return constant_boolean_node (false, truth_type);\n \t}\n     }"}, {"sha": "123fb9a33c2c5359a92626cbce2adfe31278f547", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -1,3 +1,7 @@\n+2005-04-23  DJ Delorie  <dj@redhat.com>\n+\n+\t* trans-decl.c: Adjust warning() callers.\n+\n 2005-04-23  Tobias Schl\"uter  <tobias.schlueter@physik.uni-muenchen.de>\n \n \t* trans-const.c (gfc_conv_mpfr_to_tree): Use hexadecimal string as"}, {"sha": "86205726ca5e384e4eb252d4cc570155f2023fd5", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -1916,7 +1916,7 @@ gfc_trans_deferred_vars (gfc_symbol * proc_sym, tree fnbody)\n     {\n       if (!current_fake_result_decl)\n \t{\n-\t  warning (\"Function does not return a value\");\n+\t  warning (0, \"Function does not return a value\");\n \t  return fnbody;\n \t}\n \n@@ -2111,12 +2111,12 @@ generate_local_decl (gfc_symbol * sym)\n       if (sym->attr.referenced)\n         gfc_get_symbol_decl (sym);\n       else if (sym->attr.dummy && warn_unused_parameter)\n-            warning (\"unused parameter %qs\", sym->name);\n+            warning (0, \"unused parameter %qs\", sym->name);\n       /* Warn for unused variables, but not if they're inside a common\n \t block or are use-associated.  */\n       else if (warn_unused_variable\n \t       && !(sym->attr.in_common || sym->attr.use_assoc))\n-\twarning (\"unused variable %qs\", sym->name); \n+\twarning (0, \"unused variable %qs\", sym->name); \n     }\n }\n \n@@ -2257,7 +2257,7 @@ gfc_generate_function_code (gfc_namespace * ns)\n \tresult = sym->result->backend_decl;\n \n       if (result == NULL_TREE)\n-\twarning (\"Function return value not set\");\n+\twarning (0, \"Function return value not set\");\n       else\n \t{\n \t  /* Set the return value to the dummy result variable.  */"}, {"sha": "cd7bb528762cb83f8781868a90a5b48dfa3873ed", "filename": "gcc/function.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -3601,7 +3601,7 @@ setjmp_vars_warning (tree block)\n \t  && DECL_RTL_SET_P (decl)\n \t  && REG_P (DECL_RTL (decl))\n \t  && regno_clobbered_at_setjmp (REGNO (DECL_RTL (decl))))\n-\twarning (\"%Jvariable %qD might be clobbered by %<longjmp%>\"\n+\twarning (0, \"%Jvariable %qD might be clobbered by %<longjmp%>\"\n \t\t \" or %<vfork%>\",\n \t\t decl, decl);\n     }\n@@ -3622,7 +3622,7 @@ setjmp_args_warning (void)\n     if (DECL_RTL (decl) != 0\n \t&& REG_P (DECL_RTL (decl))\n \t&& regno_clobbered_at_setjmp (REGNO (DECL_RTL (decl))))\n-      warning (\"%Jargument %qD might be clobbered by %<longjmp%> or %<vfork%>\",\n+      warning (0, \"%Jargument %qD might be clobbered by %<longjmp%> or %<vfork%>\",\n \t       decl, decl);\n }\n \n@@ -4020,7 +4020,7 @@ init_function_start (tree subr)\n      regardless of which calling convention we are using for it.  */\n   if (warn_aggregate_return\n       && AGGREGATE_TYPE_P (TREE_TYPE (DECL_RESULT (subr))))\n-    warning (\"function returns an aggregate\");\n+    warning (0, \"function returns an aggregate\");\n }\n \n /* Make sure all values used by the optimization passes have sane\n@@ -4343,7 +4343,7 @@ do_warn_unused_parameter (tree fn)\n        decl; decl = TREE_CHAIN (decl))\n     if (!TREE_USED (decl) && TREE_CODE (decl) == PARM_DECL\n \t&& DECL_NAME (decl) && !DECL_ARTIFICIAL (decl))\n-      warning (\"%Junused parameter %qD\", decl, decl);\n+      warning (0, \"%Junused parameter %qD\", decl, decl);\n }\n \n static GTY(()) rtx initial_trampoline;"}, {"sha": "10460a8f32f63ffbcb94b0483b681a2fac55b78f", "filename": "gcc/gcse.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -6530,7 +6530,7 @@ is_too_expensive (const char *pass)\n   if (n_edges > 20000 + n_basic_blocks * 4)\n     {\n       if (warn_disabled_optimization)\n-\twarning (\"%s: %d basic blocks and %d edges/basic block\",\n+\twarning (0, \"%s: %d basic blocks and %d edges/basic block\",\n \t\t pass, n_basic_blocks, n_edges / n_basic_blocks);\n \n       return true;\n@@ -6543,7 +6543,7 @@ is_too_expensive (const char *pass)\n        * sizeof (SBITMAP_ELT_TYPE)) > MAX_GCSE_MEMORY)\n     {\n       if (warn_disabled_optimization)\n-\twarning (\"%s: %d basic blocks and %d registers\",\n+\twarning (0, \"%s: %d basic blocks and %d registers\",\n \t\t pass, n_basic_blocks, max_reg_num ());\n \n       return true;"}, {"sha": "51e2f416a3a33129fa7f930f808f47bca275470e", "filename": "gcc/genautomata.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fgenautomata.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fgenautomata.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenautomata.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -2724,7 +2724,7 @@ add_presence_absence (unit_set_el_t dest_list,\n \t\t\t}\n \t\t      else\n \t\t\twarning\n-\t\t\t  (\"unit `%s' excludes and requires presence of `%s'\",\n+\t\t\t  (0, \"unit `%s' excludes and requires presence of `%s'\",\n \t\t\t   dst->unit_decl->name, unit->name);\n \t\t    }\n \t\t}\n@@ -2744,7 +2744,7 @@ add_presence_absence (unit_set_el_t dest_list,\n \t\t      }\n \t\t    else\n \t\t      warning\n-\t\t\t(\"unit `%s' requires absence and presence of `%s'\",\n+\t\t\t(0, \"unit `%s' requires absence and presence of `%s'\",\n \t\t\t dst->unit_decl->name, unit->name);\n \t\t  }\n \t    if (no_error_flag)\n@@ -2826,7 +2826,7 @@ process_decls (void)\n \t\terror (\"repeated declaration of automaton `%s'\",\n \t\t       DECL_AUTOMATON (decl)->name);\n \t      else\n-\t\twarning (\"repeated declaration of automaton `%s'\",\n+\t\twarning (0, \"repeated declaration of automaton `%s'\",\n \t\t\t DECL_AUTOMATON (decl)->name);\n \t    }\n \t}\n@@ -2946,7 +2946,7 @@ process_decls (void)\n \t\t\t   DECL_BYPASS (decl)->in_insn_name);\n \t\t      else\n \t\t\twarning\n-\t\t\t  (\"the same bypass `%s - %s' is already defined\",\n+\t\t\t  (0, \"the same bypass `%s - %s' is already defined\",\n \t\t\t   DECL_BYPASS (decl)->out_insn_name,\n \t\t\t   DECL_BYPASS (decl)->in_insn_name);\n \t\t    }\n@@ -3056,7 +3056,7 @@ check_automaton_usage (void)\n \t  if (!w_flag)\n \t    error (\"automaton `%s' is not used\", DECL_AUTOMATON (decl)->name);\n \t  else\n-\t    warning (\"automaton `%s' is not used\",\n+\t    warning (0, \"automaton `%s' is not used\",\n \t\t     DECL_AUTOMATON (decl)->name);\n \t}\n     }\n@@ -3170,14 +3170,14 @@ check_usage (void)\n \t  if (!w_flag)\n \t    error (\"unit `%s' is not used\", DECL_UNIT (decl)->name);\n \t  else\n-\t    warning (\"unit `%s' is not used\", DECL_UNIT (decl)->name);\n+\t    warning (0, \"unit `%s' is not used\", DECL_UNIT (decl)->name);\n \t}\n       else if (decl->mode == dm_reserv && !DECL_RESERV (decl)->reserv_is_used)\n \t{\n \t  if (!w_flag)\n \t    error (\"reservation `%s' is not used\", DECL_RESERV (decl)->name);\n \t  else\n-\t    warning (\"reservation `%s' is not used\", DECL_RESERV (decl)->name);\n+\t    warning (0, \"reservation `%s' is not used\", DECL_RESERV (decl)->name);\n \t}\n     }\n }\n@@ -9818,7 +9818,7 @@ check_automata_insn_issues (void)\n \t\t\t   reserv_ainsn->insn_reserv_decl->name);\n \t\t  else\n \t\t    warning\n-\t\t      (\"Automaton `%s': Insn `%s' will never be issued\",\n+\t\t      (0, \"Automaton `%s': Insn `%s' will never be issued\",\n \t\t       automaton->corresponding_automaton_decl->name,\n \t\t       reserv_ainsn->insn_reserv_decl->name);\n \t\t}\n@@ -9828,7 +9828,7 @@ check_automata_insn_issues (void)\n \t\t    error (\"Insn `%s' will never be issued\",\n \t\t\t   reserv_ainsn->insn_reserv_decl->name);\n \t\t  else\n-\t\t    warning (\"Insn `%s' will never be issued\",\n+\t\t    warning (0, \"Insn `%s' will never be issued\",\n \t\t\t     reserv_ainsn->insn_reserv_decl->name);\n \t\t}\n \t  }"}, {"sha": "87de24e3770f1298b6e81669ed2eee4f5897078c", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -179,7 +179,7 @@ fix_sched_param (const char *param, const char *val)\n   if (!strcmp (param, \"verbose\"))\n     sched_verbose_param = atoi (val);\n   else\n-    warning (\"fix_sched_param: unknown param: %s\", param);\n+    warning (0, \"fix_sched_param: unknown param: %s\", param);\n }\n \n struct haifa_insn_data *h_i_d;"}, {"sha": "251b8b56379027f66d42e29e0638d4ca31e1b32a", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -1,3 +1,8 @@\n+2005-04-23  DJ Delorie  <dj@redhat.com>\n+\n+\t* class.c, decl.c, expr.c, jcf-io.c, jcf-parse.c, jv-scan.c,\n+\tparse.y: Adjust warning() callers.\n+\n 2005-04-21  Bryce McKinlay  <mckinlay@redhat.com>\n \n \t* gcj.texi (Object fields): Change \"Integer\" to \"Int\" in example"}, {"sha": "54e310d0d3a5d1d88b0eb90fac97cfdfc3b41b86", "filename": "gcc/java/class.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -788,9 +788,9 @@ void\n set_constant_value (tree field, tree constant)\n {\n   if (field == NULL_TREE)\n-    warning (\"misplaced ConstantValue attribute (not in any field)\");\n+    warning (0, \"misplaced ConstantValue attribute (not in any field)\");\n   else if (DECL_INITIAL (field) != NULL_TREE)\n-    warning (\"duplicate ConstantValue attribute for field '%s'\",\n+    warning (0, \"duplicate ConstantValue attribute for field '%s'\",\n \t     IDENTIFIER_POINTER (DECL_NAME (field)));\n   else\n     {\n@@ -1417,7 +1417,7 @@ get_dispatch_table (tree type, tree this_class_addr)\n       if (METHOD_ABSTRACT (method))\n \t{\n \t  if (! abstract_p)\n-\t    warning (\"%Jabstract method in non-abstract class\", method);\n+\t    warning (0, \"%Jabstract method in non-abstract class\", method);\n \n \t  if (TARGET_VTABLE_USES_DESCRIPTORS)\n \t    for (j = 0; j < TARGET_VTABLE_USES_DESCRIPTORS; ++j)"}, {"sha": "2feac350417b739d43c3313d132d6db736d6e6fc", "filename": "gcc/java/decl.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -1346,7 +1346,7 @@ pushdecl (tree x)\n \t\twarnstring = \"declaration of %qs shadows global declaration\";\n \n \t      if (warnstring)\n-\t\twarning (warnstring, IDENTIFIER_POINTER (name));\n+\t\twarning (0, warnstring, IDENTIFIER_POINTER (name));\n \t    }\n #endif\n \n@@ -1649,7 +1649,7 @@ poplevel (int keep, int reverse, int functionbody)\n \t      define_label (input_location, DECL_NAME (label));\n \t    }\n \t  else if (warn_unused[UNUSED_LABEL] && !TREE_USED (label))\n-\t    warning (\"%Jlabel '%D' defined but not used\", label, label);\n+\t    warning (0, \"%Jlabel '%D' defined but not used\", label, label);\n \t  IDENTIFIER_LABEL_VALUE (DECL_NAME (label)) = 0;\n \n \t  /* Put the labels into the \"variables\" of the\n@@ -1777,7 +1777,7 @@ force_poplevels (int start_pc)\n   while (current_binding_level->start_pc > start_pc)\n     {\n       if (pedantic && current_binding_level->start_pc > start_pc)\n-\twarning (\"%JIn %D: overlapped variable and exception ranges at %d\",\n+\twarning (0, \"%JIn %D: overlapped variable and exception ranges at %d\",\n                  current_function_decl, current_function_decl,\n \t\t current_binding_level->start_pc);\n       poplevel (1, 0, 0);\n@@ -1841,7 +1841,7 @@ give_name_to_locals (JCF *jcf)\n \t  DECL_NAME (decl) = name;\n \t  SET_DECL_ASSEMBLER_NAME (decl, name);\n \t  if (TREE_CODE (decl) != PARM_DECL || TREE_TYPE (decl) != type)\n-\t    warning (\"bad type in parameter debug info\");\n+\t    warning (0, \"bad type in parameter debug info\");\n \t}\n       else\n \t{\n@@ -1850,7 +1850,7 @@ give_name_to_locals (JCF *jcf)\n \t  tree decl = build_decl (VAR_DECL, name, type);\n \t  if (end_pc > DECL_CODE_LENGTH (current_function_decl))\n \t    {\n-\t      warning (\"%Jbad PC range for debug info for local '%D'\",\n+\t      warning (0, \"%Jbad PC range for debug info for local '%D'\",\n                        decl, decl);\n \t      end_pc = DECL_CODE_LENGTH (current_function_decl);\n \t    }"}, {"sha": "ae1055ed2684ee243c3f308c344deae95c646cc0", "filename": "gcc/java/expr.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -373,7 +373,7 @@ pop_type_0 (tree type, char **messagep)\n       && t == object_ptr_type_node)\n     {\n       if (type != ptr_type_node)\n-\twarning (\"need to insert runtime check for %s\", \n+\twarning (0, \"need to insert runtime check for %s\", \n \t\t xstrdup (lang_printable_name (type, 0)));\n       return type;\n     }\n@@ -502,7 +502,7 @@ can_widen_reference_to (tree source_type, tree target_type)\n \t\t\t  source_type, target_type);\n \n       if (!quiet_flag)\n-       warning (\"assert: %s is assign compatible with %s\", \n+       warning (0, \"assert: %s is assign compatible with %s\", \n \t\txstrdup (lang_printable_name (target_type, 0)),\n \t\txstrdup (lang_printable_name (source_type, 0)));\n       /* Punt everything to runtime.  */\n@@ -549,7 +549,7 @@ can_widen_reference_to (tree source_type, tree target_type)\n \t  if (TYPE_DUMMY (source_type) || TYPE_DUMMY (target_type))\n \t    {\n \t      if (! quiet_flag)\n-\t\twarning (\"assert: %s is assign compatible with %s\", \n+\t\twarning (0, \"assert: %s is assign compatible with %s\", \n \t\t\t xstrdup (lang_printable_name (target_type, 0)),\n \t\t\t xstrdup (lang_printable_name (source_type, 0)));\n \t      return 1;\n@@ -2728,7 +2728,7 @@ expand_java_field_op (int is_static, int is_putting, int field_ref_index)\n \t  else if (FIELD_STATIC (field_decl))\n \t    {\n \t      if (!DECL_CLINIT_P (current_function_decl))\n-\t\twarning (\"%Jassignment to final static field %qD not in \"\n+\t\twarning (0, \"%Jassignment to final static field %qD not in \"\n                          \"class initializer\",\n                          field_decl, field_decl);\n \t    }\n@@ -2737,7 +2737,7 @@ expand_java_field_op (int is_static, int is_putting, int field_ref_index)\n \t      tree cfndecl_name = DECL_NAME (current_function_decl);\n \t      if (! DECL_CONSTRUCTOR_P (current_function_decl)\n \t\t  && !ID_FINIT_P (cfndecl_name))\n-                warning (\"%Jassignment to final field '%D' not in constructor\",\n+                warning (0, \"%Jassignment to final field '%D' not in constructor\",\n \t\t\t field_decl, field_decl);\n \t    }\n \t}\n@@ -2927,7 +2927,7 @@ expand_byte_code (JCF *jcf, tree method)\n       int pc = GET_u2 (linenumber_pointer);\n       linenumber_pointer += 4;\n       if (pc >= length)\n-\twarning (\"invalid PC in line number table\");\n+\twarning (0, \"invalid PC in line number table\");\n       else\n \t{\n \t  if ((instruction_bits[pc] & BCODE_HAS_LINENUMBER) != 0)\n@@ -2983,7 +2983,7 @@ expand_byte_code (JCF *jcf, tree method)\n \t    {\n               /* We've just reached the end of a region of dead code.  */\n \t      if (extra_warnings)\n-\t\twarning (\"unreachable bytecode from %d to before %d\",\n+\t\twarning (0, \"unreachable bytecode from %d to before %d\",\n \t\t\t dead_code_index, PC);\n               dead_code_index = -1;\n             }\n@@ -3025,7 +3025,7 @@ expand_byte_code (JCF *jcf, tree method)\n     {\n       /* We've just reached the end of a region of dead code.  */\n       if (extra_warnings)\n-\twarning (\"unreachable bytecode from %d to the end of the method\", \n+\twarning (0, \"unreachable bytecode from %d to the end of the method\", \n \t\t dead_code_index);\n     }\n }"}, {"sha": "49d64f07bb89c0133e37a2b4945e09d2cafcdfbf", "filename": "gcc/java/jcf-io.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fjava%2Fjcf-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fjava%2Fjcf-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-io.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -533,7 +533,7 @@ find_class (const char *classname, int classname_length, JCF *jcf,\n   if (! java && ! class && java_buf.st_mtime > class_buf.st_mtime)\n     {\n       if (flag_newer)\n-\twarning (\"source file for class %qs is newer than its matching class file.  Source file %qs used instead\", classname, java_buffer);\n+\twarning (0, \"source file for class %qs is newer than its matching class file.  Source file %qs used instead\", classname, java_buffer);\n       class = -1;\n     }\n "}, {"sha": "ccf6d34d35792b542bea8c636e48f8aea943a1ec", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -717,8 +717,8 @@ load_class (tree class_or_name, int verbose)\n \t{\n \t  /* This is just a diagnostic during testing, not a real problem.  */\n \t  if (!quiet_flag)\n-\t    warning(\"cannot find file for class %s\", \n-\t\t    IDENTIFIER_POINTER (saved));\n+\t    warning (0, \"cannot find file for class %s\", \n+\t\t     IDENTIFIER_POINTER (saved));\n \t  \n \t  /* Fake it.  */\n \t  if (TREE_CODE (class_or_name) == RECORD_TYPE)\n@@ -833,7 +833,7 @@ duplicate_class_warning (const char *filename)\n   warn_loc.file = filename;\n   warn_loc.line = 0;\n #endif\n-  warning (\"%Hduplicate class will only be compiled once\", &warn_loc);\n+  warning (0, \"%Hduplicate class will only be compiled once\", &warn_loc);\n }\n \n static void\n@@ -1154,7 +1154,7 @@ java_parse_file (int set_yydebug ATTRIBUTE_UNUSED)\n     free (file_list);\n \n   if (filename_count == 0)\n-    warning (\"no input file specified\");\n+    warning (0, \"no input file specified\");\n \n   if (resource_name)\n     {"}, {"sha": "fa02c593eae016baa7482d78e8b0a7b05f19a86e", "filename": "gcc/java/jv-scan.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fjava%2Fjv-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fjava%2Fjv-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjv-scan.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -42,7 +42,8 @@ Boston, MA 02111-1307, USA.  */\n \n extern void fatal_error (const char *msgid, ...)\n      ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n-void warning (const char *msgid, ...) ATTRIBUTE_PRINTF_1;\n+void warning (int opt, const char *msgid, ...) ATTRIBUTE_PRINTF_2;\n+void warning0 (const char *msgid, ...) ATTRIBUTE_PRINTF_1;\n void report (void);\n \n static void usage (void) ATTRIBUTE_NORETURN;\n@@ -256,7 +257,18 @@ fatal_error (const char *msgid, ...)\n }\n \n void\n-warning (const char *msgid, ...)\n+warning (int opt ATTRIBUTE_UNUSED, const char *msgid, ...)\n+{\n+  va_list ap;\n+  va_start (ap, msgid);\n+  fprintf (stderr, _(\"%s: warning: \"), exec_name);\n+  vfprintf (stderr, _(msgid), ap);\n+  fputc ('\\n', stderr);\n+  va_end (ap);\n+}\n+\n+void\n+warning0 (const char *msgid, ...)\n {\n   va_list ap;\n   va_start (ap, msgid);"}, {"sha": "860725f11bcdc9fed22eb5c92c9bdb16c2e367f9", "filename": "gcc/java/parse.y", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -3106,7 +3106,7 @@ yyerror (const char *msgid)\n \t\t code_from_source, strlen (code_from_source));\n   remainder = obstack_finish (&temporary_obstack);\n   if (do_warning)\n-    warning (\"%s.\\n%s\", msgid, remainder);\n+    warning (0, \"%s.\\n%s\", msgid, remainder);\n   else\n     error (\"%s.\\n%s\", msgid, remainder);\n "}, {"sha": "352069419977f22960cec49137d5cb0c0d992fa3", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -1,3 +1,7 @@\n+2005-04-23  DJ Delorie  <dj@redhat.com>\n+\n+\t* objc-act.c: Adjust warning() callers.\n+\n 2005-04-21  Roger Sayle  <roger@eyesopen.com>\n \n \t* objc-act.h (METHOD_ADD_ARGS_ELLIPSIS_P): New macro for accessing"}, {"sha": "27e528d8cb61ab723b6b836087987f75d4bbb65b", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -753,7 +753,7 @@ objc_finish_implementation (void)\n       objc_implementation_context = NULL_TREE;\n     }\n   else\n-    warning (\"%<@end%> must appear in an @implementation context\");\n+    warning (0, \"%<@end%> must appear in an @implementation context\");\n }\n \n void\n@@ -924,7 +924,7 @@ objc_comptypes (tree lhs, tree rhs, int reflexive)\n \n \t\t      if (!rproto)\n \t\t\twarning\n-\t\t\t  (\"object does not conform to the %qs protocol\",\n+\t\t\t  (0, \"object does not conform to the %qs protocol\",\n \t\t\t   IDENTIFIER_POINTER (PROTOCOL_NAME (p)));\n \t\t    }\n \t\t  return 1;\n@@ -1014,7 +1014,7 @@ objc_comptypes (tree lhs, tree rhs, int reflexive)\n \t\t    }\n \n \t\t  if (!rproto)\n-\t\t    warning (\"class %qs does not implement the %qs protocol\",\n+\t\t    warning (0, \"class %qs does not implement the %qs protocol\",\n \t\t\t     IDENTIFIER_POINTER (OBJC_TYPE_NAME (TREE_TYPE (rhs))),\n \t\t\t     IDENTIFIER_POINTER (PROTOCOL_NAME (p)));\n \t\t}\n@@ -1091,7 +1091,7 @@ objc_comptypes (tree lhs, tree rhs, int reflexive)\n \t\t\t}\n \t\t\n \t\t      if (!lproto)\n-\t\t\twarning (\"class %qs does not implement the %qs protocol\",\n+\t\t\twarning (0, \"class %qs does not implement the %qs protocol\",\n \t\t\t\t IDENTIFIER_POINTER (OBJC_TYPE_NAME\n \t\t\t\t\t\t     (TREE_TYPE (lhs))),\n \t\t\t\t IDENTIFIER_POINTER (PROTOCOL_NAME (p)));\n@@ -2373,7 +2373,7 @@ build_selector_translation_table (void)\n \t      loc = &DECL_SOURCE_LOCATION (TREE_PURPOSE (chain));\n \t    else\n \t      loc = &input_location;\n-\t    warning (\"%Hcreating selector for nonexistent method %qE\",\n+\t    warning (0, \"%Hcreating selector for nonexistent method %qE\",\n \t\t     loc, TREE_VALUE (chain));\n \t  }\n       }\n@@ -2682,9 +2682,9 @@ objc_declare_alias (tree alias_ident, tree class_ident)\n #endif /* OBJCPLUS */\n \n   if (!(underlying_class = objc_is_class_name (class_ident)))\n-    warning (\"cannot find class %qs\", IDENTIFIER_POINTER (class_ident));\n+    warning (0, \"cannot find class %qs\", IDENTIFIER_POINTER (class_ident));\n   else if (objc_is_class_name (alias_ident))\n-    warning (\"class %qs already exists\", IDENTIFIER_POINTER (alias_ident));\n+    warning (0, \"class %qs already exists\", IDENTIFIER_POINTER (alias_ident));\n   else\n     alias_chain = tree_cons (underlying_class, alias_ident, alias_chain);\n }\n@@ -2945,7 +2945,7 @@ objc_init_exceptions (void)\n       /* On Darwin, ObjC exceptions require a sufficiently recent\n \t version of the runtime, so the user must ask for them explicitly.  */\n       if (!flag_objc_exceptions)\n-\twarning (\"use %<-fobjc-exceptions%> to enable Objective-C \"\n+\twarning (0, \"use %<-fobjc-exceptions%> to enable Objective-C \"\n \t\t \"exception syntax\");\n     }\n #ifndef OBJCPLUS\n@@ -3290,9 +3290,9 @@ objc_begin_catch_clause (tree decl)\n \t    continue;\n \t  if (!t || objc_comptypes (TREE_TYPE (t), TREE_TYPE (type), 0) == 1)\n \t    {\n-\t      warning (\"exception of type %<%T%> will be caught\",\n+\t      warning (0, \"exception of type %<%T%> will be caught\",\n \t\t       TREE_TYPE (type));\n-\t      warning (\"%H   by earlier handler for %<%T%>\",\n+\t      warning (0, \"%H   by earlier handler for %<%T%>\",\n \t\t       EXPR_LOCUS (stmt), TREE_TYPE (t ? t : objc_object_type));\n \t      break;\n \t    }\n@@ -5377,7 +5377,7 @@ check_duplicates (hash hsh, int methods, int is_class)\n \t     different types.  */\n \t  attr loop;\n \n-\t  warning (\"multiple %s named %<%c%s%> found\",\n+\t  warning (0, \"multiple %s named %<%c%s%> found\",\n \t\t   methods ? \"methods\" : \"selectors\",\n \t\t   (is_class ? '+' : '-'),\n \t\t   IDENTIFIER_POINTER (METHOD_SEL_NAME (meth)));\n@@ -5645,7 +5645,7 @@ objc_finish_message_expr (tree receiver, tree sel_name, tree method_params)\n \t\t= lookup_method_in_protocol_list (rprotos, sel_name, 0);\n \n \t      if (method_prototype)\n-\t\twarning (\"found %<-%s%> instead of %<+%s%> in protocol(s)\",\n+\t\twarning (0, \"found %<-%s%> instead of %<+%s%> in protocol(s)\",\n \t\t\t IDENTIFIER_POINTER (sel_name),\n \t\t\t IDENTIFIER_POINTER (sel_name));\n \t    }\n@@ -5704,7 +5704,7 @@ objc_finish_message_expr (tree receiver, tree sel_name, tree method_params)\n \t}\n       else\n \t{\n-\t  warning (\"invalid receiver type %qs\",\n+\t  warning (0, \"invalid receiver type %qs\",\n \t\t   gen_type_name (orig_rtype));\n \t  /* After issuing the \"invalid receiver\" warning, perform method\n \t     lookup as if we were messaging 'id'.  */\n@@ -5719,7 +5719,7 @@ objc_finish_message_expr (tree receiver, tree sel_name, tree method_params)\n   if (!method_prototype)\n     {\n       if (rprotos)\n-\twarning (\"%<%c%s%> not found in protocol(s)\",\n+\twarning (0, \"%<%c%s%> not found in protocol(s)\",\n \t\t (class_tree ? '+' : '-'),\n \t\t IDENTIFIER_POINTER (sel_name));\n \n@@ -5733,23 +5733,23 @@ objc_finish_message_expr (tree receiver, tree sel_name, tree method_params)\n       static bool warn_missing_methods = false;\n \n       if (rtype)\n-\twarning (\"%qs may not respond to %<%c%s%>\",\n+\twarning (0, \"%qs may not respond to %<%c%s%>\",\n \t\t IDENTIFIER_POINTER (OBJC_TYPE_NAME (rtype)),\n \t\t (class_tree ? '+' : '-'),\n \t\t IDENTIFIER_POINTER (sel_name));\n       /* If we are messaging an 'id' or 'Class' object and made it here,\n \t then we have failed to find _any_ instance or class method,\n \t respectively.  */\n       else\n-\twarning (\"no %<%c%s%> method found\",\n+\twarning (0, \"no %<%c%s%> method found\",\n \t\t (class_tree ? '+' : '-'),\n \t\t IDENTIFIER_POINTER (sel_name));\n \n       if (!warn_missing_methods)\n \t{\n-\t  warning (\"(Messages without a matching method signature\");\n-\t  warning (\"will be assumed to return %<id%> and accept\");\n-\t  warning (\"%<...%> as arguments.)\");\n+\t  warning (0, \"(Messages without a matching method signature\");\n+\t  warning (0, \"will be assumed to return %<id%> and accept\");\n+\t  warning (0, \"%<...%> as arguments.)\");\n \t  warn_missing_methods = true;\n \t}\n     }\n@@ -5980,7 +5980,7 @@ objc_build_selector_expr (tree selnamelist)\n       /* If still not found, print out a warning.  */\n       if (!hsh)\n \t{\n-\t  warning (\"undeclared selector %qs\", IDENTIFIER_POINTER (selname));\n+\t  warning (0, \"undeclared selector %qs\", IDENTIFIER_POINTER (selname));\n \t}\n     }\n \n@@ -6022,7 +6022,7 @@ build_ivar_reference (tree id)\n \t to an instance variable.  It's better to catch the cases\n \t where this is done unknowingly than to support the above\n \t paradigm.  */\n-      warning (\"instance variable %qs accessed in class method\",\n+      warning (0, \"instance variable %qs accessed in class method\",\n \t       IDENTIFIER_POINTER (id));\n       self_decl = convert (objc_instance_type, self_decl); /* cast */\n     }\n@@ -6279,7 +6279,7 @@ add_category (tree class, tree category)\n \n   if (cat)\n     {\n-      warning (\"duplicate interface declaration for category %<%s(%s)%>\",\n+      warning (0, \"duplicate interface declaration for category %<%s(%s)%>\",\n \t       IDENTIFIER_POINTER (CLASS_NAME (class)),\n \t       IDENTIFIER_POINTER (CLASS_SUPER_NAME (category)));\n     }\n@@ -6340,10 +6340,10 @@ add_instance_variable (tree class, int public, tree field_decl)\n       /* user-defined constructors and destructors are not known to Obj-C and\n          hence will not be called.  This may or may not be a problem. */\n       if (TYPE_NEEDS_CONSTRUCTING (field_type))\n-        warning (\"type %qs has a user-defined constructor\", type_name);\n+        warning (0, \"type %qs has a user-defined constructor\", type_name);\n       if (TYPE_HAS_NONTRIVIAL_DESTRUCTOR (field_type))\n-        warning (\"type %qs has a user-defined destructor\", type_name);\n-      warning (\"C++ constructors and destructors will not be invoked for Objective-C fields\");\n+        warning (0, \"type %qs has a user-defined destructor\", type_name);\n+      warning (0, \"C++ constructors and destructors will not be invoked for Objective-C fields\");\n     }\n #endif\n \n@@ -6442,7 +6442,7 @@ objc_is_public (tree expr, tree identifier)\n \t\t non-@public ivars.  We will let this slide for now...  */\n \t      if (!objc_method_context)\n \t      {\n-\t\twarning (\"instance variable %qs is %s; \"\n+\t\twarning (0, \"instance variable %qs is %s; \"\n \t\t\t \"this will be a hard error in the future\",\n \t\t\t IDENTIFIER_POINTER (identifier),\n \t\t\t TREE_PRIVATE (decl) ? \"@private\" : \"@protected\");\n@@ -6459,7 +6459,7 @@ objc_is_public (tree expr, tree identifier)\n       else if (objc_implementation_context && (basetype == objc_object_reference))\n \t{\n \t  expr = convert (uprivate_record, expr);\n-\t  warning (\"static access to object of type %<id%>\");\n+\t  warning (0, \"static access to object of type %<id%>\");\n \t}\n     }\n \n@@ -6481,16 +6481,16 @@ check_methods (tree chain, tree list, int mtype)\n \t    {\n \t      if (TREE_CODE (objc_implementation_context)\n \t\t  == CLASS_IMPLEMENTATION_TYPE)\n-\t\twarning (\"incomplete implementation of class %qs\",\n+\t\twarning (0, \"incomplete implementation of class %qs\",\n \t\t\t IDENTIFIER_POINTER (CLASS_NAME (objc_implementation_context)));\n \t      else if (TREE_CODE (objc_implementation_context)\n \t\t       == CATEGORY_IMPLEMENTATION_TYPE)\n-\t\twarning (\"incomplete implementation of category %qs\",\n+\t\twarning (0, \"incomplete implementation of category %qs\",\n \t\t\t IDENTIFIER_POINTER (CLASS_SUPER_NAME (objc_implementation_context)));\n \t      first = 0;\n \t    }\n \n-\t  warning (\"method definition for %<%c%s%> not found\",\n+\t  warning (0, \"method definition for %<%c%s%> not found\",\n \t\t   mtype, IDENTIFIER_POINTER (METHOD_SEL_NAME (chain)));\n \t}\n \n@@ -6569,17 +6569,17 @@ check_methods_accessible (tree chain, tree context, int mtype)\n \t    {\n \t      if (TREE_CODE (objc_implementation_context)\n \t\t  == CLASS_IMPLEMENTATION_TYPE)\n-\t\twarning (\"incomplete implementation of class %qs\",\n+\t\twarning (0, \"incomplete implementation of class %qs\",\n \t\t\t IDENTIFIER_POINTER\n \t\t\t   (CLASS_NAME (objc_implementation_context)));\n \t      else if (TREE_CODE (objc_implementation_context)\n \t\t       == CATEGORY_IMPLEMENTATION_TYPE)\n-\t\twarning (\"incomplete implementation of category %qs\",\n+\t\twarning (0, \"incomplete implementation of category %qs\",\n \t\t\t IDENTIFIER_POINTER\n \t\t\t   (CLASS_SUPER_NAME (objc_implementation_context)));\n \t      first = 0;\n \t    }\n-\t  warning (\"method definition for %<%c%s%> not found\",\n+\t  warning (0, \"method definition for %<%c%s%> not found\",\n \t\t   mtype, IDENTIFIER_POINTER (METHOD_SEL_NAME (chain)));\n \t}\n \n@@ -6620,7 +6620,7 @@ check_protocol (tree p, const char *type, const char *name)\n \t}\n \n       if (!f1 || !f2)\n-\twarning (\"%s %qs does not fully implement the %qs protocol\",\n+\twarning (0, \"%s %qs does not fully implement the %qs protocol\",\n \t\t type, name, IDENTIFIER_POINTER (PROTOCOL_NAME (p)));\n     }\n \n@@ -6678,7 +6678,7 @@ start_class (enum tree_code code, tree class_name, tree super_name,\n \n   if (objc_implementation_context)\n     {\n-      warning (\"%<@end%> missing in implementation context\");\n+      warning (0, \"%<@end%> missing in implementation context\");\n       finish_class (objc_implementation_context);\n       objc_ivar_chain = NULL_TREE;\n       objc_implementation_context = NULL_TREE;\n@@ -6735,7 +6735,7 @@ start_class (enum tree_code code, tree class_name, tree super_name,\n \n       if (!(implementation_template = lookup_interface (class_name)))\n         {\n-\t  warning (\"cannot find interface declaration for %qs\",\n+\t  warning (0, \"cannot find interface declaration for %qs\",\n \t\t   IDENTIFIER_POINTER (class_name));\n \t  add_class (implementation_template = objc_implementation_context);\n         }\n@@ -6767,7 +6767,7 @@ start_class (enum tree_code code, tree class_name, tree super_name,\n #ifdef OBJCPLUS\n \terror (\"duplicate interface declaration for class %qs\",\n #else\n-\twarning (\"duplicate interface declaration for class %qs\",\n+\twarning (0, \"duplicate interface declaration for class %qs\",\n #endif\t\n         IDENTIFIER_POINTER (class_name));\n       else\n@@ -7022,7 +7022,7 @@ start_protocol (enum tree_code code, tree name, tree list)\n     }\n   else\n     {\n-      warning (\"duplicate declaration for protocol %qs\",\n+      warning (0, \"duplicate declaration for protocol %qs\",\n \t       IDENTIFIER_POINTER (name));\n     }\n   return protocol;\n@@ -7552,7 +7552,7 @@ static void\n warn_with_method (const char *message, int mtype, tree method)\n {\n   /* Add a readable method name to the warning.  */\n-  warning (\"%J%s %<%c%s%>\", method,\n+  warning (0, \"%J%s %<%c%s%>\", method,\n            message, mtype, gen_method_decl (method));\n }\n \n@@ -8285,7 +8285,7 @@ finish_objc (void)\n   /* A missing @end may not be detected by the parser.  */\n   if (objc_implementation_context)\n     {\n-      warning (\"%<@end%> missing in implementation context\");\n+      warning (0, \"%<@end%> missing in implementation context\");\n       finish_class (objc_implementation_context);\n       objc_ivar_chain = NULL_TREE;\n       objc_implementation_context = NULL_TREE;\n@@ -8567,7 +8567,7 @@ objc_lookup_ivar (tree other, tree id)\n   if (TREE_CODE (objc_method_context) == INSTANCE_METHOD_DECL\n       && other && other != error_mark_node && !DECL_FILE_SCOPE_P (other))\n     {\n-      warning (\"local declaration of %qs hides instance variable\",\n+      warning (0, \"local declaration of %qs hides instance variable\",\n \t       IDENTIFIER_POINTER (id));\n \n       return other;"}, {"sha": "f1580d5a1f4b4acbe2e0d0379d388e092393c258", "filename": "gcc/opts.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -255,7 +255,7 @@ complain_wrong_lang (const char *text, const struct cl_option *option,\n   bad_lang = write_langs (lang_mask);\n \n   /* Eventually this should become a hard error IMO.  */\n-  warning (\"command line option \\\"%s\\\" is valid for %s but not for %s\",\n+  warning (0, \"command line option \\\"%s\\\" is valid for %s but not for %s\",\n \t   text, ok_langs, bad_lang);\n \n   free (ok_langs);\n@@ -660,7 +660,7 @@ decode_options (unsigned int argc, const char **argv)\n \t this to `2' if -Wall is used, so we can avoid giving out\n \t lots of errors for people who don't realize what -Wall does.  */\n       if (warn_uninitialized == 1)\n-\twarning (\"-Wuninitialized is not supported without -O\");\n+\twarning (0, \"-Wuninitialized is not supported without -O\");\n     }\n \n   if (flag_really_no_inline == 2)\n@@ -975,7 +975,7 @@ common_handle_option (size_t scode, const char *arg, int value)\n       else if (!strcmp (arg, \"local-exec\"))\n \tflag_tls_default = TLS_MODEL_LOCAL_EXEC;\n       else\n-\twarning (\"unknown tls-model \\\"%s\\\"\", arg);\n+\twarning (0, \"unknown tls-model \\\"%s\\\"\", arg);\n       break;\n \n     case OPT_ftracer:\n@@ -1146,7 +1146,7 @@ set_debug_level (enum debug_info_type type, int extended, const char *arg)\n \t    }\n \n \t  if (write_symbols == NO_DEBUG)\n-\t    warning (\"target system does not support debug output\");\n+\t    warning (0, \"target system does not support debug output\");\n \t}\n     }\n   else"}, {"sha": "9d8e2dade617f9af63c9dc735ca12ba823a82001", "filename": "gcc/passes.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -1212,7 +1212,7 @@ rest_of_handle_branch_target_load_optimize (void)\n       && flag_branch_target_load_optimize2\n       && !warned)\n     {\n-      warning (\"branch target register load optimization is not intended \"\n+      warning (0, \"branch target register load optimization is not intended \"\n \t       \"to be run twice\");\n \n       warned = 1;"}, {"sha": "5ed04e0bdee9685f212e00f99598147835fb86cb", "filename": "gcc/regclass.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -778,7 +778,7 @@ fix_register (const char *name, int fixed, int call_used)\n     }\n   else\n     {\n-      warning (\"unknown register name: %s\", name);\n+      warning (0, \"unknown register name: %s\", name);\n     }\n }\n \n@@ -792,12 +792,12 @@ globalize_reg (int i)\n \n   if (global_regs[i])\n     {\n-      warning (\"register used for two global register variables\");\n+      warning (0, \"register used for two global register variables\");\n       return;\n     }\n \n   if (call_used_regs[i] && ! fixed_regs[i])\n-    warning (\"call-clobbered register used for global register variable\");\n+    warning (0, \"call-clobbered register used for global register variable\");\n \n   global_regs[i] = 1;\n "}, {"sha": "06df026d81a1e6318d5321a6ffb2e6484f7b7f11", "filename": "gcc/reload1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -1233,10 +1233,10 @@ reload (rtx first, int global)\n \n       if (size > STACK_CHECK_MAX_FRAME_SIZE)\n \t{\n-\t  warning (\"frame size too large for reliable stack checking\");\n+\t  warning (0, \"frame size too large for reliable stack checking\");\n \t  if (! verbose_warned)\n \t    {\n-\t      warning (\"try reducing the number of local variables\");\n+\t      warning (0, \"try reducing the number of local variables\");\n \t      verbose_warned = 1;\n \t    }\n \t}"}, {"sha": "9b685953c430a94548322e8861735e3cdce0b12d", "filename": "gcc/stmt.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -329,7 +329,7 @@ parse_output_constraint (const char **constraint_p, int operand_num,\n       size_t c_len = strlen (constraint);\n \n       if (p != constraint)\n-\twarning (\"output constraint %qc for operand %d \"\n+\twarning (0, \"output constraint %qc for operand %d \"\n \t\t \"is not at the beginning\",\n \t\t *p, operand_num);\n \n@@ -553,7 +553,7 @@ parse_input_constraint (const char **constraint_p, int input_num,\n       }\n \n   if (saw_match && !*allows_reg)\n-    warning (\"matching constraint does not allow a register\");\n+    warning (0, \"matching constraint does not allow a register\");\n \n   return true;\n }\n@@ -880,7 +880,7 @@ expand_asm_operands (tree string, tree outputs, tree inputs,\n \t  if (allows_reg)\n \t    op = force_reg (TYPE_MODE (type), op);\n \t  else if (!allows_mem)\n-\t    warning (\"asm operand %d probably doesn%'t match constraints\",\n+\t    warning (0, \"asm operand %d probably doesn%'t match constraints\",\n \t\t     i + noutputs);\n \t  else if (MEM_P (op))\n \t    {\n@@ -890,7 +890,7 @@ expand_asm_operands (tree string, tree outputs, tree inputs,\n \t    }\n \t  else\n \t    {\n-\t      warning (\"use of memory input without lvalue in \"\n+\t      warning (0, \"use of memory input without lvalue in \"\n \t\t       \"asm operand %d is deprecated\", i + noutputs);\n \n \t      if (CONSTANT_P (op))\n@@ -1475,7 +1475,7 @@ warn_if_unused_value (tree exp, location_t locus)\n       if (TREE_SIDE_EFFECTS (exp))\n \treturn 0;\n \n-      warning (\"%Hvalue computed is not used\", &locus);\n+      warning (0, \"%Hvalue computed is not used\", &locus);\n       return 1;\n     }\n }"}, {"sha": "b0cc42e18c6a641eb32243b5bc64cf1cc32f2299", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -451,9 +451,9 @@ layout_decl (tree decl, unsigned int known_align)\n \t  int size_as_int = TREE_INT_CST_LOW (size);\n \n \t  if (compare_tree_int (size, size_as_int) == 0)\n-\t    warning (\"%Jsize of %qD is %d bytes\", decl, decl, size_as_int);\n+\t    warning (0, \"%Jsize of %qD is %d bytes\", decl, decl, size_as_int);\n \t  else\n-\t    warning (\"%Jsize of %qD is larger than %d bytes\",\n+\t    warning (0, \"%Jsize of %qD is larger than %d bytes\",\n                      decl, decl, larger_than_size);\n \t}\n     }\n@@ -837,10 +837,10 @@ place_field (record_layout_info rli, tree field)\n \t  if (TYPE_ALIGN (type) > desired_align)\n \t    {\n \t      if (STRICT_ALIGNMENT)\n-\t\twarning (\"%Jpacked attribute causes inefficient alignment \"\n+\t\twarning (0, \"%Jpacked attribute causes inefficient alignment \"\n                          \"for %qD\", field, field);\n \t      else\n-\t\twarning (\"%Jpacked attribute is unnecessary for %qD\",\n+\t\twarning (0, \"%Jpacked attribute is unnecessary for %qD\",\n \t\t\t field, field);\n \t    }\n \t}\n@@ -856,7 +856,7 @@ place_field (record_layout_info rli, tree field)\n \t Bump the cumulative size to multiple of field alignment.  */\n \n       if (warn_padded)\n-\twarning (\"%Jpadding struct to align %qD\", field, field);\n+\twarning (0, \"%Jpadding struct to align %qD\", field, field);\n \n       /* If the alignment is still within offset_align, just align\n \t the bit position.  */\n@@ -1198,7 +1198,7 @@ finalize_record_size (record_layout_info rli)\n \n   if (warn_padded && TREE_CONSTANT (unpadded_size)\n       && simple_cst_equal (unpadded_size, TYPE_SIZE (rli->t)) == 0)\n-    warning (\"padding struct size to alignment boundary\");\n+    warning (0, \"padding struct size to alignment boundary\");\n \n   if (warn_packed && TREE_CODE (rli->t) == RECORD_TYPE\n       && TYPE_PACKED (rli->t) && ! rli->packed_maybe_necessary\n@@ -1228,17 +1228,17 @@ finalize_record_size (record_layout_info rli)\n \t\tname = IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (rli->t)));\n \n \t      if (STRICT_ALIGNMENT)\n-\t\twarning (\"packed attribute causes inefficient \"\n+\t\twarning (0, \"packed attribute causes inefficient \"\n \t\t\t \"alignment for %qs\", name);\n \t      else\n-\t\twarning (\"packed attribute is unnecessary for %qs\", name);\n+\t\twarning (0, \"packed attribute is unnecessary for %qs\", name);\n \t    }\n \t  else\n \t    {\n \t      if (STRICT_ALIGNMENT)\n-\t\twarning (\"packed attribute causes inefficient alignment\");\n+\t\twarning (0, \"packed attribute causes inefficient alignment\");\n \t      else\n-\t\twarning (\"packed attribute is unnecessary\");\n+\t\twarning (0, \"packed attribute is unnecessary\");\n \t    }\n \t}\n     }"}, {"sha": "19411e148a0279e21ec70d95272ec5d67f73be23", "filename": "gcc/toplev.c", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -851,7 +851,7 @@ check_global_declarations (tree *vec, int len)\n \t  if (TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (decl)))\n \t    pedwarn (\"%J%qF used but never defined\", decl, decl);\n \t  else\n-\t    warning (\"%J%qF declared %<static%> but never defined\",\n+\t    warning (0, \"%J%qF declared %<static%> but never defined\",\n \t\t     decl, decl);\n \t  /* This symbol is effectively an \"extern\" declaration now.  */\n \t  TREE_PUBLIC (decl) = 1;\n@@ -877,7 +877,7 @@ check_global_declarations (tree *vec, int len)\n \t  && ! (TREE_CODE (decl) == VAR_DECL && DECL_REGISTER (decl))\n \t  /* Otherwise, ask the language.  */\n \t  && lang_hooks.decls.warn_unused_global (decl))\n-\twarning (\"%J%qD defined but not used\", decl, decl);\n+\twarning (0, \"%J%qD defined but not used\", decl, decl);\n \n       /* Avoid confusing the debug information machinery when there are\n \t errors.  */\n@@ -900,7 +900,7 @@ warn_deprecated_use (tree node)\n   if (DECL_P (node))\n     {\n       expanded_location xloc = expand_location (DECL_SOURCE_LOCATION (node));\n-      warning (\"%qs is deprecated (declared at %s:%d)\",\n+      warning (0, \"%qs is deprecated (declared at %s:%d)\",\n \t       IDENTIFIER_POINTER (DECL_NAME (node)),\n \t       xloc.file, xloc.line);\n     }\n@@ -923,18 +923,18 @@ warn_deprecated_use (tree node)\n \t  expanded_location xloc\n \t    = expand_location (DECL_SOURCE_LOCATION (decl));\n \t  if (what)\n-\t    warning (\"%qs is deprecated (declared at %s:%d)\", what,\n+\t    warning (0, \"%qs is deprecated (declared at %s:%d)\", what,\n \t\t       xloc.file, xloc.line);\n \t  else\n-\t    warning (\"type is deprecated (declared at %s:%d)\",\n+\t    warning (0, \"type is deprecated (declared at %s:%d)\",\n \t\t     xloc.file, xloc.line);\n \t}\n       else\n \t{\n \t  if (what)\n-\t    warning (\"%qs is deprecated\", what);\n+\t    warning (0, \"%qs is deprecated\", what);\n \t  else\n-\t    warning (\"type is deprecated\");\n+\t    warning (0, \"type is deprecated\");\n \t}\n     }\n }\n@@ -1187,7 +1187,7 @@ decode_d_option (const char *arg)\n       case 'a':\n       default:\n \tif (!enable_rtl_dump_file (c))\n-\t  warning (\"unrecognized gcc debugging option: %c\", c);\n+\t  warning (0, \"unrecognized gcc debugging option: %c\", c);\n \tbreak;\n       }\n }\n@@ -1768,11 +1768,11 @@ process_options (void)\n   /* Warn about options that are not supported on this machine.  */\n #ifndef INSN_SCHEDULING\n   if (flag_schedule_insns || flag_schedule_insns_after_reload)\n-    warning (\"instruction scheduling not supported on this target machine\");\n+    warning (0, \"instruction scheduling not supported on this target machine\");\n #endif\n #ifndef DELAY_SLOTS\n   if (flag_delayed_branch)\n-    warning (\"this target machine does not have delayed branches\");\n+    warning (0, \"this target machine does not have delayed branches\");\n #endif\n \n   user_label_prefix = USER_LABEL_PREFIX;\n@@ -1786,7 +1786,7 @@ process_options (void)\n \t  user_label_prefix = flag_leading_underscore ? \"_\" : \"\";\n \t}\n       else\n-\twarning (\"-f%sleading-underscore not supported on this target machine\",\n+\twarning (0, \"-f%sleading-underscore not supported on this target machine\",\n \t\t flag_leading_underscore ? \"\" : \"no-\");\n     }\n \n@@ -1872,10 +1872,10 @@ process_options (void)\n       if (flag_var_tracking == 1)\n         {\n \t  if (debug_info_level < DINFO_LEVEL_NORMAL)\n-\t    warning (\"variable tracking requested, but useless unless \"\n+\t    warning (0, \"variable tracking requested, but useless unless \"\n \t\t     \"producing debug info\");\n \t  else\n-\t    warning (\"variable tracking requested, but not supported \"\n+\t    warning (0, \"variable tracking requested, but not supported \"\n \t\t     \"by this debug format\");\n \t}\n       flag_var_tracking = 0;\n@@ -1902,44 +1902,44 @@ process_options (void)\n     {\n       if (flag_function_sections)\n \t{\n-\t  warning (\"-ffunction-sections not supported for this target\");\n+\t  warning (0, \"-ffunction-sections not supported for this target\");\n \t  flag_function_sections = 0;\n \t}\n       if (flag_data_sections)\n \t{\n-\t  warning (\"-fdata-sections not supported for this target\");\n+\t  warning (0, \"-fdata-sections not supported for this target\");\n \t  flag_data_sections = 0;\n \t}\n     }\n \n   if (flag_function_sections && profile_flag)\n     {\n-      warning (\"-ffunction-sections disabled; it makes profiling impossible\");\n+      warning (0, \"-ffunction-sections disabled; it makes profiling impossible\");\n       flag_function_sections = 0;\n     }\n \n #ifndef HAVE_prefetch\n   if (flag_prefetch_loop_arrays)\n     {\n-      warning (\"-fprefetch-loop-arrays not supported for this target\");\n+      warning (0, \"-fprefetch-loop-arrays not supported for this target\");\n       flag_prefetch_loop_arrays = 0;\n     }\n   if (flag_speculative_prefetching)\n     {\n       if (flag_speculative_prefetching_set)\n-\twarning (\"-fspeculative-prefetching not supported for this target\");\n+\twarning (0, \"-fspeculative-prefetching not supported for this target\");\n       flag_speculative_prefetching = 0;\n     }\n #else\n   if (flag_prefetch_loop_arrays && !HAVE_prefetch)\n     {\n-      warning (\"-fprefetch-loop-arrays not supported for this target (try -march switches)\");\n+      warning (0, \"-fprefetch-loop-arrays not supported for this target (try -march switches)\");\n       flag_prefetch_loop_arrays = 0;\n     }\n   if (flag_speculative_prefetching && !HAVE_prefetch)\n     {\n       if (flag_speculative_prefetching_set)\n-\twarning (\"-fspeculative-prefetching not supported for this target (try -march switches)\");\n+\twarning (0, \"-fspeculative-prefetching not supported for this target (try -march switches)\");\n       flag_speculative_prefetching = 0;\n     }\n #endif\n@@ -1948,13 +1948,13 @@ process_options (void)\n      make much sense anyway, so don't allow it.  */\n   if (flag_prefetch_loop_arrays && optimize_size)\n     {\n-      warning (\"-fprefetch-loop-arrays is not supported with -Os\");\n+      warning (0, \"-fprefetch-loop-arrays is not supported with -Os\");\n       flag_prefetch_loop_arrays = 0;\n     }\n \n #ifndef OBJECT_FORMAT_ELF\n   if (flag_function_sections && write_symbols != NO_DEBUG)\n-    warning (\"-ffunction-sections may affect debugging on some targets\");\n+    warning (0, \"-ffunction-sections may affect debugging on some targets\");\n #endif\n \n   /* The presence of IEEE signaling NaNs, implies all math can trap.  */"}, {"sha": "cf11d29441b3a1d2cb0d3362e489ceb3662c6b36", "filename": "gcc/toplev.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -65,7 +65,8 @@ extern void _fatal_insn (const char *, rtx, const char *, int, const char *)\n #endif\n extern void internal_error (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2)\n      ATTRIBUTE_NORETURN;\n-extern void warning (const char *, ...) ATTRIBUTE_GCC_FE_DIAG(1,2);\n+extern void warning0 (const char *, ...) ATTRIBUTE_GCC_FE_DIAG(1,2);\n+extern void warning (int, const char *, ...) ATTRIBUTE_GCC_FE_DIAG(2,3);\n extern void error (const char *, ...) ATTRIBUTE_GCC_FE_DIAG(1,2);\n extern void fatal_error (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2)\n      ATTRIBUTE_NORETURN;"}, {"sha": "d3c71abb37a5f3e53dd641425806e66dd5a9a692", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -1384,7 +1384,7 @@ remove_useless_stmts_warn_notreached (tree stmt)\n       location_t loc = EXPR_LOCATION (stmt);\n       if (LOCATION_LINE (loc) > 0)\n \t{\n-\t  warning (\"%Hwill never be executed\", &loc);\n+\t  warning (0, \"%Hwill never be executed\", &loc);\n \t  return true;\n \t}\n     }\n@@ -2000,10 +2000,10 @@ remove_bb (basic_block bb)\n      in the block.  */\n #ifdef USE_MAPPED_LOCATION\n   if (warn_notreached && loc > BUILTINS_LOCATION)\n-    warning (\"%Hwill never be executed\", &loc);\n+    warning (0, \"%Hwill never be executed\", &loc);\n #else\n   if (warn_notreached && loc)\n-    warning (\"%Hwill never be executed\", loc);\n+    warning (0, \"%Hwill never be executed\", loc);\n #endif\n \n   remove_phi_nodes_and_edges_for_unreachable_block (bb);\n@@ -5599,7 +5599,7 @@ execute_warn_function_return (void)\n       && !TREE_THIS_VOLATILE (cfun->decl)\n       && EDGE_COUNT (EXIT_BLOCK_PTR->preds) == 0\n       && !lang_hooks.function.missing_noreturn_ok_p (cfun->decl))\n-    warning (\"%Jfunction might be possible candidate for \"\n+    warning (0, \"%Jfunction might be possible candidate for \"\n \t     \"attribute %<noreturn%>\",\n \t     cfun->decl);\n \n@@ -5626,11 +5626,11 @@ execute_warn_function_return (void)\n #ifdef USE_MAPPED_LOCATION\n       if (location == UNKNOWN_LOCATION)\n \tlocation = cfun->function_end_locus;\n-      warning (\"%H%<noreturn%> function does return\", &location);\n+      warning (0, \"%H%<noreturn%> function does return\", &location);\n #else\n       if (!locus)\n \tlocus = &cfun->function_end_locus;\n-      warning (\"%H%<noreturn%> function does return\", locus);\n+      warning (0, \"%H%<noreturn%> function does return\", locus);\n #endif\n     }\n \n@@ -5651,12 +5651,12 @@ execute_warn_function_return (void)\n \t      location = EXPR_LOCATION (last);\n \t      if (location == UNKNOWN_LOCATION)\n \t\t  location = cfun->function_end_locus;\n-\t      warning (\"%Hcontrol reaches end of non-void function\", &location);\n+\t      warning (0, \"%Hcontrol reaches end of non-void function\", &location);\n #else\n \t      locus = EXPR_LOCUS (last);\n \t      if (!locus)\n \t\tlocus = &cfun->function_end_locus;\n-\t      warning (\"%Hcontrol reaches end of non-void function\", locus);\n+\t      warning (0, \"%Hcontrol reaches end of non-void function\", locus);\n #endif\n \t      TREE_NO_WARNING (cfun->decl) = 1;\n \t      break;"}, {"sha": "451fe2bea0d7576f5b6882ab2de15942a75420bc", "filename": "gcc/tree-dump.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Ftree-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Ftree-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dump.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -964,7 +964,7 @@ dump_switch_p_1 (const char *arg, struct dump_file_info *dfi, bool doglob)\n \t    flags |= option_ptr->value;\n \t    goto found;\n \t  }\n-      warning (\"ignoring unknown option %q.*s in %<-fdump-%s%>\",\n+      warning (0, \"ignoring unknown option %q.*s in %<-fdump-%s%>\",\n \t       length, ptr, dfi->swtch);\n     found:;\n       ptr = end_ptr;"}, {"sha": "696e7b49336a353b9fa93bcf10dfdfdd43812416", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -1163,7 +1163,7 @@ inlinable_function_p (tree fn)\n       if (lookup_attribute (\"always_inline\", DECL_ATTRIBUTES (fn)))\n \tsorry (inline_forbidden_reason, fn, fn);\n       else if (do_warning)\n-\twarning (inline_forbidden_reason, fn, fn);\n+\twarning (0, inline_forbidden_reason, fn, fn);\n \n       inlinable = false;\n     }\n@@ -1571,8 +1571,8 @@ expand_call_inline (tree *tp, int *walk_subtrees, void *data)\n \t       && strlen (reason)\n \t       && !lookup_attribute (\"noinline\", DECL_ATTRIBUTES (fn)))\n \t{\n-\t  warning (\"%Jinlining failed in call to %qF: %s\", fn, fn, reason);\n-\t  warning (\"called from here\");\n+\t  warning (0, \"%Jinlining failed in call to %qF: %s\", fn, fn, reason);\n+\t  warning (0, \"called from here\");\n \t}\n       goto egress;\n     }\n@@ -1686,7 +1686,7 @@ expand_call_inline (tree *tp, int *walk_subtrees, void *data)\n \t&& return_slot_addr == NULL_TREE\n \t&& block_may_fallthru (copy))\n       {\n-\twarning (\"control may reach end of non-void function %qD being inlined\",\n+\twarning (0, \"control may reach end of non-void function %qD being inlined\",\n \t\t fn);\n \tTREE_NO_WARNING (fn) = 1;\n       }"}, {"sha": "b28a427c82b389b588610826f27415ae70a27fe7", "filename": "gcc/tree-mudflap.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Ftree-mudflap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Ftree-mudflap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-mudflap.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -839,7 +839,7 @@ mf_xform_derefs_1 (block_stmt_iterator *iter, tree *tp,\n       break;\n \n     case ARRAY_RANGE_REF:\n-      warning (\"mudflap checking not yet implemented for ARRAY_RANGE_REF\");\n+      warning (0, \"mudflap checking not yet implemented for ARRAY_RANGE_REF\");\n       return;\n \n     case BIT_FIELD_REF:\n@@ -1030,7 +1030,7 @@ mx_register_decls (tree decl, tree *stmt_list)\n \n           /* Add the __mf_register call at the current appending point.  */\n           if (tsi_end_p (initially_stmts))\n-\t    warning (\"mudflap cannot track %qs in stub function\",\n+\t    warning (0, \"mudflap cannot track %qs in stub function\",\n \t\t     IDENTIFIER_POINTER (DECL_NAME (decl)));\n \t  else\n \t    {\n@@ -1261,7 +1261,7 @@ mudflap_finish_file (void)\n \n           if (! COMPLETE_TYPE_P (TREE_TYPE (obj)))\n             {\n-              warning (\"mudflap cannot track unknown size extern %qs\",\n+              warning (0, \"mudflap cannot track unknown size extern %qs\",\n                        IDENTIFIER_POINTER (DECL_NAME (obj)));\n               continue;\n             }"}, {"sha": "40020ac30abcfde4d5bdd4041950bee2a8e94128", "filename": "gcc/tree-optimize.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Ftree-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Ftree-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-optimize.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -774,10 +774,10 @@ tree_rest_of_compilation (tree fndecl)\n \t    = TREE_INT_CST_LOW (TYPE_SIZE_UNIT (ret_type));\n \n \t  if (compare_tree_int (TYPE_SIZE_UNIT (ret_type), size_as_int) == 0)\n-\t    warning (\"%Jsize of return value of %qD is %u bytes\",\n+\t    warning (0, \"%Jsize of return value of %qD is %u bytes\",\n                      fndecl, fndecl, size_as_int);\n \t  else\n-\t    warning (\"%Jsize of return value of %qD is larger than %wd bytes\",\n+\t    warning (0, \"%Jsize of return value of %qD is larger than %wd bytes\",\n                      fndecl, fndecl, larger_than_size);\n \t}\n     }"}, {"sha": "822a7572b234664c652e421d5cfac221e75cc435", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -1102,7 +1102,7 @@ warn_uninit (tree t, const char *msgid, void *data)\n   locus = (context != NULL && EXPR_HAS_LOCATION (context)\n \t   ? EXPR_LOCUS (context)\n \t   : &DECL_SOURCE_LOCATION (var));\n-  warning (msgid, locus, var);\n+  warning (0, msgid, locus, var);\n   TREE_NO_WARNING (var) = 1;\n }\n    "}, {"sha": "71ba456a58bbe989b5f9c212e014b9696b834e63", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -3275,7 +3275,7 @@ handle_dll_attribute (tree * pnode, tree name, tree args, int flags,\n \t}\n       if (TREE_CODE (node) != RECORD_TYPE && TREE_CODE (node) != UNION_TYPE)\n \t{\n-\t  warning (\"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n+\t  warning (0, \"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n \t  *no_add_attrs = true;\n \t}\n "}, {"sha": "17dc156f4b7f37d1fc2e642bce988064cddbfce3", "filename": "gcc/treelang/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Ftreelang%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Ftreelang%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2FChangeLog?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -1,3 +1,7 @@\n+2005-04-23  DJ Delorie  <dj@redhat.com>\n+\n+\t* parse.y: Adjust warning() callers.\n+\n 2005-04-11  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* lang.opt: Refer to the GCC internals documentation instead of c.opt."}, {"sha": "3509095ebeffc8ff5a98bc008b93fb43ea7bc05b", "filename": "gcc/treelang/parse.y", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Ftreelang%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Ftreelang%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Fparse.y?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -525,7 +525,7 @@ tl_RETURN expression_opt {\n       tree_code_generate_return (type_prod->tp.pro.code, NULL);\n     else\n       {\n-\twarning (\"%HRedundant expression in return.\",\n+\twarning (0, \"%HRedundant expression in return.\",\n \t\t &ret_tok->tp.tok.location, ret_tok->tp.tok.length,\n \t\t ret_tok->tp.tok.chars);\n         tree_code_generate_return (type_prod->tp.pro.code, NULL);"}, {"sha": "86d386e0ff8c7b448bcdcb5290fb7d242d1d4b2d", "filename": "gcc/varasm.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=d4ee4d252515ac2d2bdb8ed085edc7feaf5b943d", "patch": "@@ -943,7 +943,7 @@ make_decl_rtl (tree decl)\n \t      error (\"global register variable has initial value\");\n \t    }\n \t  if (TREE_THIS_VOLATILE (decl))\n-\t    warning (\"volatile register variables don%'t \"\n+\t    warning (0, \"volatile register variables don%'t \"\n \t\t     \"work as you might wish\");\n \n \t  /* If the user specified one of the eliminables registers here,\n@@ -1675,7 +1675,7 @@ assemble_variable (tree decl, int top_level ATTRIBUTE_UNUSED,\n      In particular, a.out format supports a maximum alignment of 4.  */\n   if (align > MAX_OFILE_ALIGNMENT)\n     {\n-      warning (\"%Jalignment of %qD is greater than maximum object \"\n+      warning (0, \"%Jalignment of %qD is greater than maximum object \"\n                \"file alignment.  Using %d\", decl, decl,\n \t       MAX_OFILE_ALIGNMENT/BITS_PER_UNIT);\n       align = MAX_OFILE_ALIGNMENT;\n@@ -1739,7 +1739,7 @@ assemble_variable (tree decl, int top_level ATTRIBUTE_UNUSED,\n \n #if !defined(ASM_OUTPUT_ALIGNED_COMMON) && !defined(ASM_OUTPUT_ALIGNED_DECL_COMMON) && !defined(ASM_OUTPUT_ALIGNED_BSS)\n       if ((unsigned HOST_WIDE_INT) DECL_ALIGN_UNIT (decl) > rounded)\n-\twarning (\"%Jrequested alignment for %qD is greater than \"\n+\twarning (0, \"%Jrequested alignment for %qD is greater than \"\n                  \"implemented alignment of %d\", decl, decl, rounded);\n #endif\n \n@@ -4305,7 +4305,7 @@ merge_weak (tree newdecl, tree olddecl)\n \t a weak symbol.  */\n       else if (TREE_USED (olddecl)\n \t       && TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (olddecl)))\n-\twarning (\"%Jweak declaration of %qD after first use results \"\n+\twarning (0, \"%Jweak declaration of %qD after first use results \"\n                  \"in unspecified behavior\", newdecl, newdecl);\n \n       if (SUPPORTS_WEAK)\n@@ -4348,7 +4348,7 @@ declare_weak (tree decl)\n \tweak_decls = tree_cons (NULL, decl, weak_decls);\n     }\n   else\n-    warning (\"%Jweak declaration of %qD not supported\", decl, decl);\n+    warning (0, \"%Jweak declaration of %qD not supported\", decl, decl);\n \n   mark_weak (decl);\n }\n@@ -4377,7 +4377,7 @@ weak_finish (void)\n       ASM_WEAKEN_LABEL (asm_out_file, name);\n #else\n #ifdef ASM_OUTPUT_WEAK_ALIAS\n-      warning (\"only weak aliases are supported in this configuration\");\n+      warning (0, \"only weak aliases are supported in this configuration\");\n       return;\n #endif\n #endif\n@@ -4639,7 +4639,7 @@ default_assemble_visibility (tree decl, int vis)\n   assemble_name (asm_out_file, name);\n   fprintf (asm_out_file, \"\\n\");\n #else\n-  warning (\"visibility attribute not supported in this configuration; ignored\");\n+  warning (0, \"visibility attribute not supported in this configuration; ignored\");\n #endif\n }\n "}]}