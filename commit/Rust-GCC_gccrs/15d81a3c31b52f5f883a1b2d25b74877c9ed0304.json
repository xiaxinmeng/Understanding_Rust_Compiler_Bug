{"sha": "15d81a3c31b52f5f883a1b2d25b74877c9ed0304", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTVkODFhM2MzMWI1MmY1Zjg4M2ExYjJkMjViNzQ4NzdjOWVkMDMwNA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-02-22T18:07:07Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-02-22T18:07:07Z"}, "message": "functional_hash.h (hash<string>, [...]): Move, per DR 1182 to...\n\n2010-02-22  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/functional_hash.h (hash<string>, hash<wstring>,\n\thash<u16string>, hash<u32string>, hash<error_code>): Move, per\n\tDR 1182 to...\n\t* include/bits/basic_string.h: ... here.\n\t* include/std/system_error: ... and here, respectively.\n\t* src/hash-aux.cc (hash<long double>::operator()(long double)):\n\tMove definition...\n\t* src/hash_c++0x.cc: ... here, new file.\n\t* src/hash_tr1.cc: ... and here, tweak includes.\n\t* src/compatibility-c++0x.cc (hash, _Fnv_hash): Remove.\n\t* src/Makefile.am: Adjust.\n\t* src/Makefile.in: Regenerate.\n\t* include/std/functional: Include <bits/functexcept.h>.\n\t* include/std/unordered_set: Remove redundant include.\n\t* include/std/unordered_map: Likewise.\n\t* include/tr1/functional_hash.h: Remove spurious trailing semicolon.\n\t* testsuite/20_util/weak_ptr/comparison/cmp_neg.cc: Remove\n\tdg-excess.\n\nFrom-SVN: r156971", "tree": {"sha": "693f10a9d6779d0b412ce48ee525da435130140f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/693f10a9d6779d0b412ce48ee525da435130140f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15d81a3c31b52f5f883a1b2d25b74877c9ed0304", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15d81a3c31b52f5f883a1b2d25b74877c9ed0304", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15d81a3c31b52f5f883a1b2d25b74877c9ed0304", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15d81a3c31b52f5f883a1b2d25b74877c9ed0304/comments", "author": null, "committer": null, "parents": [{"sha": "ea2edf88eec93dd0ec532d2e837a7ac1bf62a1c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea2edf88eec93dd0ec532d2e837a7ac1bf62a1c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea2edf88eec93dd0ec532d2e837a7ac1bf62a1c2"}], "stats": {"total": 515, "additions": 270, "deletions": 245}, "files": [{"sha": "664f57d3c13c412321aedd745940d713b8e668de", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15d81a3c31b52f5f883a1b2d25b74877c9ed0304/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15d81a3c31b52f5f883a1b2d25b74877c9ed0304/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=15d81a3c31b52f5f883a1b2d25b74877c9ed0304", "patch": "@@ -1,3 +1,24 @@\n+2010-02-22  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/functional_hash.h (hash<string>, hash<wstring>,\n+\thash<u16string>, hash<u32string>, hash<error_code>): Move, per\n+\tDR 1182 to...\n+\t* include/bits/basic_string.h: ... here.\n+\t* include/std/system_error: ... and here, respectively.\n+\t* src/hash-aux.cc (hash<long double>::operator()(long double)):\n+\tMove definition...\n+\t* src/hash_c++0x.cc: ... here, new file.\n+\t* src/hash_tr1.cc: ... and here, tweak includes.\n+\t* src/compatibility-c++0x.cc (hash, _Fnv_hash): Remove.\n+\t* src/Makefile.am: Adjust.\n+\t* src/Makefile.in: Regenerate.\n+\t* include/std/functional: Include <bits/functexcept.h>.\n+\t* include/std/unordered_set: Remove redundant include.\n+\t* include/std/unordered_map: Likewise.\n+\t* include/tr1/functional_hash.h: Remove spurious trailing semicolon.\n+\t* testsuite/20_util/weak_ptr/comparison/cmp_neg.cc: Remove\n+\tdg-excess.\n+\n 2010-02-21  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/std/complex (proj): Change return type per DR 1137."}, {"sha": "399f29a8c82fd830cdd0cbcff0254dc733117ed7", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15d81a3c31b52f5f883a1b2d25b74877c9ed0304/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15d81a3c31b52f5f883a1b2d25b74877c9ed0304/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=15d81a3c31b52f5f883a1b2d25b74877c9ed0304", "patch": "@@ -2869,6 +2869,73 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n _GLIBCXX_END_NAMESPACE\n \n+#endif /* __GXX_EXPERIMENTAL_CXX0X__ && _GLIBCXX_USE_C99 ... */\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+\n+#include <bits/functional_hash.h>\n+\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n+  // DR 1182.\n+\n+#ifndef _GLIBCXX_COMPATIBILITY_CXX0X\n+  /// std::hash specialization for string.\n+  template<>\n+    struct hash<string>\n+    : public std::unary_function<string, size_t>\n+    {\n+      size_t\n+      operator()(const string& __s) const\n+      { return _Fnv_hash<>::hash(__s.data(), __s.length()); }\n+    };\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  /// std::hash specialization for wstring.\n+  template<>\n+    struct hash<wstring>\n+    : public std::unary_function<wstring, size_t>\n+    {\n+      size_t\n+      operator()(const wstring& __s) const\n+      {\n+\tconst char* __p = reinterpret_cast<const char*>(__s.data());\n+\treturn _Fnv_hash<>::hash(__p, __s.length() * sizeof(wchar_t));\n+      }\n+    };\n #endif\n+#endif /* _GLIBCXX_COMPATIBILITY_CXX0X */\n+\n+#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n+  /// std::hash specialization for u16string.\n+  template<>\n+    struct hash<u16string>\n+    : public std::unary_function<u16string, size_t>\n+    {\n+      size_t\n+      operator()(const u16string& __s) const\n+      {\n+\tconst char* __p = reinterpret_cast<const char*>(__s.data());\n+\treturn _Fnv_hash<>::hash(__p, __s.length() * sizeof(char16_t));\n+      }\n+    };\n+\n+  /// std::hash specialization for u32string.\n+  template<>\n+    struct hash<u32string>\n+    : public std::unary_function<u32string, size_t>\n+    {\n+      size_t\n+      operator()(const u32string& __s) const\n+      {\n+\tconst char* __p = reinterpret_cast<const char*>(__s.data());\n+\treturn _Fnv_hash<>::hash(__p, __s.length() * sizeof(char32_t));\n+      }\n+    };\n+#endif\n+\n+_GLIBCXX_END_NAMESPACE\n+\n+#endif /* __GXX_EXPERIMENTAL_CXX0X__ */\n \n #endif /* _BASIC_STRING_H */"}, {"sha": "231d5430d23dacc1cc3c39522d01fa6f9ee33f76", "filename": "libstdc++-v3/include/bits/functional_hash.h", "status": "modified", "additions": 42, "deletions": 140, "changes": 182, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15d81a3c31b52f5f883a1b2d25b74877c9ed0304/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15d81a3c31b52f5f883a1b2d25b74877c9ed0304/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h?ref=15d81a3c31b52f5f883a1b2d25b74877c9ed0304", "patch": "@@ -32,8 +32,8 @@\n \n #pragma GCC system_header\n \n-#include <string>\n-#include <system_error>\n+#include <cstddef>\n+#include <bits/stl_function.h>\n \n namespace std\n {\n@@ -44,10 +44,14 @@ namespace std\n    *\n    *  @{\n    */\n- \n+\n   /// Primary class template hash.\n   template<typename _Tp>\n-    struct hash;\n+    struct hash : public std::unary_function<_Tp, size_t>\n+    {\n+      size_t\n+      operator()(_Tp __val) const;\n+    };\n \n   /// Partial specializations for pointer types.\n   template<typename _Tp>\n@@ -59,14 +63,11 @@ namespace std\n     };\n \n   // Explicit specializations for integer types.\n-#define _Cxx_hashtable_define_trivial_hash(_Tp) \t       \\\n-  template<>\t\t\t\t\t\t       \\\n-    struct hash<_Tp> : public std::unary_function<_Tp, size_t> \\\n-    {                                                          \\\n-      size_t                                                   \\\n-      operator()(_Tp __val) const\t\t               \\\n-      { return static_cast<size_t>(__val); }\t\t       \\\n-    };\n+#define _Cxx_hashtable_define_trivial_hash(_Tp) \t\\\n+  template<>\t\t\t\t\t\t\\\n+    inline size_t\t\t\t\t\t\\\n+    hash<_Tp>::operator()(_Tp __val) const\t\t\\\n+    { return static_cast<size_t>(__val); }\n \n   /// Explicit specialization for bool.\n   _Cxx_hashtable_define_trivial_hash(bool);\n@@ -83,13 +84,11 @@ namespace std\n   /// Explicit specialization for wchar_t.\n   _Cxx_hashtable_define_trivial_hash(wchar_t);\n \n-#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n   /// Explicit specialization for char16_t.\n   _Cxx_hashtable_define_trivial_hash(char16_t);\n \n   /// Explicit specialization for char32_t.\n   _Cxx_hashtable_define_trivial_hash(char32_t);\n-#endif\n \n   /// Explicit specialization for short.\n   _Cxx_hashtable_define_trivial_hash(short);\n@@ -118,10 +117,13 @@ namespace std\n #undef _Cxx_hashtable_define_trivial_hash\n \n   // Fowler / Noll / Vo (FNV) Hash (type FNV-1a)\n-  // (Used by the next specializations of std::tr1::hash.)\n+  // (Used by the next specializations of std::hash.)\n \n-  // Dummy generic implementation (for sizeof(size_t) != 4, 8).\n   template<size_t = sizeof(size_t)>\n+    struct _Fnv_hash;\n+\n+  // Dummy generic implementation (for sizeof(size_t) != 4, 8).\n+  template<size_t>\n     struct _Fnv_hash\n     {\n       static size_t\n@@ -167,139 +169,39 @@ namespace std\n       }\n     };\n \n-  /// Explicit specializations for float.\n+  /// Specialization for float.\n   template<>\n-    struct hash<float>\n-    : public std::unary_function<float, size_t>\n+    inline size_t\n+    hash<float>::operator()(float __val) const\n     {\n-      size_t\n-      operator()(float __val) const\n-      {\n-\tsize_t __result = 0;\n+      size_t __result = 0;\n       \n-\t// 0 and -0 both hash to zero.\n-\tif (__val != 0.0f)\n-\t  __result = _Fnv_hash<>::hash(reinterpret_cast<const char*>(&__val),\n-\t\t\t\t       sizeof(__val));\n-\treturn __result;\n-      }\n-    };\n-\n-  /// Explicit specializations for double.\n-  template<>\n-    struct hash<double>\n-    : public std::unary_function<double, size_t>\n-    {\n-      size_t\n-      operator()(double __val) const\n-      {\n-\tsize_t __result = 0;\n-\n-\t// 0 and -0 both hash to zero.\n-\tif (__val != 0.0)\n-\t  __result = _Fnv_hash<>::hash(reinterpret_cast<const char*>(&__val),\n-\t\t\t\t       sizeof(__val));\n-\treturn __result;\n-      }\n-    };\n-\n-  /// Explicit specializations for long double.\n-  template<>\n-    struct hash<long double>\n-    : public std::unary_function<long double, size_t>\n-    {\n-      size_t\n-      operator()(long double __val) const\n-      {\n-\tsize_t __result = 0;\n-\n-\tint __exponent;\n-\t__val = __builtin_frexpl(__val, &__exponent);\n-\t__val = __val < 0.0l ? -(__val + 0.5l) : __val;\n-\n-\tconst long double __mult =\n-\t  __gnu_cxx::__numeric_traits<size_t>::__max + 1.0l;\n-\t__val *= __mult;\n-\n-\t// Try to use all the bits of the mantissa (really necessary only\n-\t// on 32-bit targets, at least for 80-bit floating point formats).\n-\tconst size_t __hibits = (size_t)__val;\n-\t__val = (__val - (long double)__hibits) * __mult;\n-\n-\tconst size_t __coeff =\n-\t  __gnu_cxx::__numeric_traits<size_t>::__max / __LDBL_MAX_EXP__;\n-\n-\t__result = __hibits + (size_t)__val + __coeff * __exponent;\n-\n-\treturn __result;\n-      }\n-    };\n-\n-  /// Explicit specializations for string.\n+      // 0 and -0 both hash to zero.\n+      if (__val != 0.0f)\n+\t__result = _Fnv_hash<>::hash(reinterpret_cast<const char*>(&__val),\n+\t\t\t\t     sizeof(__val));\n+      return __result;\n+    }\n+\n+  /// Specialization for double.\n   template<>\n-    struct hash<string>\n-    : public std::unary_function<string, size_t>\n+    inline size_t\n+    hash<double>::operator()(double __val) const\n     {\n-      size_t\n-      operator()(const string& __s) const\n-      { return _Fnv_hash<>::hash(__s.data(), __s.length()); }\n-    };\n+      size_t __result = 0;\n \n-#ifdef _GLIBCXX_USE_WCHAR_T\n-  /// Explicit specializations for wstring.\n-  template<>\n-    struct hash<wstring>\n-    : public std::unary_function<wstring, size_t>\n-    {\n-      size_t\n-      operator()(const wstring& __s) const\n-      {\n-\tconst char* __p = reinterpret_cast<const char*>(__s.data());\n-\treturn _Fnv_hash<>::hash(__p, __s.length() * sizeof(wchar_t));\n-      }\n-    };\n-#endif\n+      // 0 and -0 both hash to zero.\n+      if (__val != 0.0)\n+\t__result = _Fnv_hash<>::hash(reinterpret_cast<const char*>(&__val),\n+\t\t\t\t     sizeof(__val));\n+      return __result;\n+    }\n \n-#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n-  /// Explicit specializations for u16string.\n+  /// Specialization for long double.\n   template<>\n-    struct hash<u16string>\n-    : public std::unary_function<u16string, size_t>\n-    {\n-      size_t\n-      operator()(const u16string& __s) const\n-      {\n-\tconst char* __p = reinterpret_cast<const char*>(__s.data());\n-\treturn _Fnv_hash<>::hash(__p, __s.length() * sizeof(char16_t));\n-      }\n-    };\n-\n-  /// Explicit specializations for u32string.\n-  template<>\n-    struct hash<u32string>\n-    : public std::unary_function<u32string, size_t>\n-    {\n-      size_t\n-      operator()(const u32string& __s) const\n-      {\n-\tconst char* __p = reinterpret_cast<const char*>(__s.data());\n-\treturn _Fnv_hash<>::hash(__p, __s.length() * sizeof(char32_t));\n-      }\n-    };\n-#endif\n+    size_t\n+    hash<long double>::operator()(long double __val) const;\n \n-  /// Explicit specializations for error_code.\n-  template<>\n-    struct hash<error_code>\n-    : public std::unary_function<error_code, size_t>\n-    {\n-      size_t\n-      operator()(const error_code& __e) const\n-      {\n-\tconst char* __p = reinterpret_cast<const char*>(&__e);\n-\treturn _Fnv_hash<>::hash(__p, sizeof(__e));\n-      }\n-    };\n   // @} group hashes\n }\n "}, {"sha": "7922a7d319b34be8f9bd7a064415fad1f246e6f3", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15d81a3c31b52f5f883a1b2d25b74877c9ed0304/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15d81a3c31b52f5f883a1b2d25b74877c9ed0304/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=15d81a3c31b52f5f883a1b2d25b74877c9ed0304", "patch": "@@ -55,6 +55,7 @@\n #include <new>\n #include <tuple>\n #include <type_traits>\n+#include <bits/functexcept.h>\n #include <bits/functional_hash.h>\n \n namespace std"}, {"sha": "3199d461be4901db5ea1318f5c3ff0a65cc2660f", "filename": "libstdc++-v3/include/std/system_error", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15d81a3c31b52f5f883a1b2d25b74877c9ed0304/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15d81a3c31b52f5f883a1b2d25b74877c9ed0304/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error?ref=15d81a3c31b52f5f883a1b2d25b74877c9ed0304", "patch": "@@ -335,6 +335,30 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n _GLIBCXX_END_NAMESPACE\n \n+#ifndef _GLIBCXX_COMPATIBILITY_CXX0X\n+\n+#include <bits/functional_hash.h>\n+\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n+  // DR 1182.\n+  /// std::hash specialization for error_code.\n+  template<>\n+    struct hash<error_code>\n+    : public std::unary_function<error_code, size_t>\n+    {\n+      size_t\n+      operator()(const error_code& __e) const\n+      {\n+\tconst char* __p = reinterpret_cast<const char*>(&__e);\n+\treturn _Fnv_hash<>::hash(__p, sizeof(__e));\n+      }\n+    };\n+\n+_GLIBCXX_END_NAMESPACE\n+\n+#endif // _GLIBCXX_COMPATIBILITY_CXX0X\n+\n #endif // __GXX_EXPERIMENTAL_CXX0X__\n \n #endif // _GLIBCXX_SYSTEM_ERROR"}, {"sha": "8b664e8fc783417c33b9c99e35438c0d5f1f6b64", "filename": "libstdc++-v3/include/std/unordered_map", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15d81a3c31b52f5f883a1b2d25b74877c9ed0304/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15d81a3c31b52f5f883a1b2d25b74877c9ed0304/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_map?ref=15d81a3c31b52f5f883a1b2d25b74877c9ed0304", "patch": "@@ -41,7 +41,6 @@\n #include <bits/stl_algobase.h>\n #include <bits/allocator.h>\n #include <bits/stl_function.h> // equal_to, _Identity, _Select1st\n-#include <bits/stringfwd.h>\n #include <bits/functional_hash.h>\n #include <bits/hashtable.h>\n #include <bits/unordered_map.h>"}, {"sha": "edbf8f11d8b65239166c950c3baa3a4e626fae95", "filename": "libstdc++-v3/include/std/unordered_set", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15d81a3c31b52f5f883a1b2d25b74877c9ed0304/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15d81a3c31b52f5f883a1b2d25b74877c9ed0304/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_set?ref=15d81a3c31b52f5f883a1b2d25b74877c9ed0304", "patch": "@@ -41,7 +41,6 @@\n #include <bits/stl_algobase.h>\n #include <bits/allocator.h>\n #include <bits/stl_function.h> // equal_to, _Identity, _Select1st\n-#include <bits/stringfwd.h>\n #include <bits/functional_hash.h>\n #include <bits/hashtable.h>\n #include <bits/unordered_set.h>"}, {"sha": "d944fa9ff0f83f0e721a2785d6ebc8386954d83d", "filename": "libstdc++-v3/include/tr1/functional_hash.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15d81a3c31b52f5f883a1b2d25b74877c9ed0304/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional_hash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15d81a3c31b52f5f883a1b2d25b74877c9ed0304/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional_hash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional_hash.h?ref=15d81a3c31b52f5f883a1b2d25b74877c9ed0304", "patch": "@@ -140,7 +140,7 @@ namespace tr1\n \t__result = _Fnv_hash<>::hash(reinterpret_cast<const char*>(&__val),\n \t\t\t\t     sizeof(__val));\n       return __result;\n-    };\n+    }\n \n   /// Explicit specializations for double.\n   template<>\n@@ -154,7 +154,7 @@ namespace tr1\n \t  __result = _Fnv_hash<>::hash(reinterpret_cast<const char*>(&__val),\n \t\t\t\t       sizeof(__val));\n \treturn __result;\n-    };\n+    }\n \n   /// Explicit specializations for long double.\n   template<>"}, {"sha": "1cf9030d332f859749c5143f618cb34c9b564fc8", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15d81a3c31b52f5f883a1b2d25b74877c9ed0304/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15d81a3c31b52f5f883a1b2d25b74877c9ed0304/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=15d81a3c31b52f5f883a1b2d25b74877c9ed0304", "patch": "@@ -148,10 +148,11 @@ sources = \\\n \tctype.cc \\\n \tdebug.cc \\\n \tfunctexcept.cc \\\n-\thash_tr1.cc \\\n \tglobals_io.cc \\\n-\thashtable_tr1.cc \\\n+\thash_c++0x.cc \\\n+\thash_tr1.cc \\\n \thashtable_c++0x.cc \\\n+\thashtable_tr1.cc \\\n \tios.cc \\\n \tios_failure.cc \\\n \tios_init.cc \\\n@@ -272,6 +273,11 @@ compatibility-c++0x.lo: compatibility-c++0x.cc\n compatibility-c++0x.o: compatibility-c++0x.cc\n \t$(CXXCOMPILE) -std=gnu++0x -c $<\n \n+hash_c++0x.lo: hash_c++0x.cc\n+\t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n+hash_c++0x.o: hash_c++0x.cc\n+\t$(CXXCOMPILE) -std=gnu++0x -c $<\n+\n hashtable_c++0x.lo: hashtable_c++0x.cc\n \t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n hashtable_c++0x.o: hashtable_c++0x.cc"}, {"sha": "b86cb75793d2207f8768357627e17e9659fc4a3e", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15d81a3c31b52f5f883a1b2d25b74877c9ed0304/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15d81a3c31b52f5f883a1b2d25b74877c9ed0304/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=15d81a3c31b52f5f883a1b2d25b74877c9ed0304", "patch": "@@ -89,10 +89,10 @@ am__libstdc___la_SOURCES_DIST = atomic.cc bitmap_allocator.cc \\\n \tpool_allocator.cc mt_allocator.cc codecvt.cc compatibility.cc \\\n \tcompatibility-c++0x.cc compatibility-debug_list.cc \\\n \tcompatibility-list.cc complex_io.cc ctype.cc debug.cc \\\n-\tfunctexcept.cc hash_tr1.cc globals_io.cc hashtable_tr1.cc \\\n-\thashtable_c++0x.cc ios.cc ios_failure.cc ios_init.cc \\\n-\tios_locale.cc limits.cc list.cc debug_list.cc locale.cc \\\n-\tlocale_init.cc locale_facets.cc localename.cc \\\n+\tfunctexcept.cc globals_io.cc hash_c++0x.cc hash_tr1.cc \\\n+\thashtable_c++0x.cc hashtable_tr1.cc ios.cc ios_failure.cc \\\n+\tios_init.cc ios_locale.cc limits.cc list.cc debug_list.cc \\\n+\tlocale.cc locale_init.cc locale_facets.cc localename.cc \\\n \tmath_stubs_float.cc math_stubs_long_double.cc stdexcept.cc \\\n \tstrstream.cc system_error.cc tree.cc allocator-inst.cc \\\n \tconcept-inst.cc fstream-inst.cc ext-inst.cc ios-inst.cc \\\n@@ -119,10 +119,10 @@ am__objects_5 = atomic.lo bitmap_allocator.lo pool_allocator.lo \\\n \tmt_allocator.lo codecvt.lo compatibility.lo \\\n \tcompatibility-c++0x.lo compatibility-debug_list.lo \\\n \tcompatibility-list.lo complex_io.lo ctype.lo debug.lo \\\n-\tfunctexcept.lo hash_tr1.lo globals_io.lo hashtable_tr1.lo \\\n-\thashtable_c++0x.lo ios.lo ios_failure.lo ios_init.lo \\\n-\tios_locale.lo limits.lo list.lo debug_list.lo locale.lo \\\n-\tlocale_init.lo locale_facets.lo localename.lo \\\n+\tfunctexcept.lo globals_io.lo hash_c++0x.lo hash_tr1.lo \\\n+\thashtable_c++0x.lo hashtable_tr1.lo ios.lo ios_failure.lo \\\n+\tios_init.lo ios_locale.lo limits.lo list.lo debug_list.lo \\\n+\tlocale.lo locale_init.lo locale_facets.lo localename.lo \\\n \tmath_stubs_float.lo math_stubs_long_double.lo stdexcept.lo \\\n \tstrstream.lo system_error.lo tree.lo allocator-inst.lo \\\n \tconcept-inst.lo fstream-inst.lo ext-inst.lo ios-inst.lo \\\n@@ -394,10 +394,11 @@ sources = \\\n \tctype.cc \\\n \tdebug.cc \\\n \tfunctexcept.cc \\\n-\thash_tr1.cc \\\n \tglobals_io.cc \\\n-\thashtable_tr1.cc \\\n+\thash_c++0x.cc \\\n+\thash_tr1.cc \\\n \thashtable_c++0x.cc \\\n+\thashtable_tr1.cc \\\n \tios.cc \\\n \tios_failure.cc \\\n \tios_init.cc \\\n@@ -907,6 +908,11 @@ compatibility-c++0x.lo: compatibility-c++0x.cc\n compatibility-c++0x.o: compatibility-c++0x.cc\n \t$(CXXCOMPILE) -std=gnu++0x -c $<\n \n+hash_c++0x.lo: hash_c++0x.cc\n+\t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n+hash_c++0x.o: hash_c++0x.cc\n+\t$(CXXCOMPILE) -std=gnu++0x -c $<\n+\n hashtable_c++0x.lo: hashtable_c++0x.cc\n \t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n hashtable_c++0x.o: hashtable_c++0x.cc"}, {"sha": "75df7497a405ce5687ceb2c7a90cc121ee04dfb0", "filename": "libstdc++-v3/src/compatibility-c++0x.cc", "status": "modified", "additions": 1, "deletions": 55, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15d81a3c31b52f5f883a1b2d25b74877c9ed0304/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility-c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15d81a3c31b52f5f883a1b2d25b74877c9ed0304/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility-c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility-c%2B%2B0x.cc?ref=15d81a3c31b52f5f883a1b2d25b74877c9ed0304", "patch": "@@ -22,9 +22,8 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-#include <cstddef>\n+#define _GLIBCXX_COMPATIBILITY_CXX0X\n #include <string>\n-#include <cmath>\n #include <system_error>\n \n #ifndef __GXX_EXPERIMENTAL_CXX0X__\n@@ -50,59 +49,6 @@ namespace std\n \n   // We need these due to the symbols exported since GLIBCXX_3.4.10.\n   // See libstdc++/41662 for details.\n-  template<typename _Tp>\n-    struct hash : public std::unary_function<_Tp, size_t>\n-    {\n-      size_t\n-      operator()(_Tp __val) const;\n-    };\n-\n-  /// Dummy generic implementation (for sizeof(size_t) != 4, 8).\n-  template<size_t = sizeof(size_t)>\n-    struct _Fnv_hash\n-    {\n-      static size_t\n-      hash(const char* __first, size_t __length)\n-      {\n-\tsize_t __result = 0;\n-\tfor (; __length > 0; --__length)\n-\t  __result = (__result * 131) + *__first++;\n-\treturn __result;\n-      }\n-    };\n-\n-  template<>\n-    struct _Fnv_hash<4>\n-    {\n-      static size_t\n-      hash(const char* __first, size_t __length)\n-      {\n-\tsize_t __result = static_cast<size_t>(2166136261UL);\n-\tfor (; __length > 0; --__length)\n-\t  {\n-\t    __result ^= static_cast<size_t>(*__first++);\n-\t    __result *= static_cast<size_t>(16777619UL);\n-\t  }\n-\treturn __result;\n-      }\n-    };\n-  \n-  template<>\n-    struct _Fnv_hash<8>\n-    {\n-      static size_t\n-      hash(const char* __first, size_t __length)\n-      {\n-\tsize_t __result =\n-\t  static_cast<size_t>(14695981039346656037ULL);\n-\tfor (; __length > 0; --__length)\n-\t  {\n-\t    __result ^= static_cast<size_t>(*__first++);\n-\t    __result *= static_cast<size_t>(1099511628211ULL);\n-\t  }\n-\treturn __result;\n-      }\n-    };\n \n #include \"hash-aux.cc\"\n "}, {"sha": "e3f15d78ee396b938f6c96968a87846ebd3c3fbe", "filename": "libstdc++-v3/src/hash-aux.cc", "status": "modified", "additions": 2, "deletions": 30, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15d81a3c31b52f5f883a1b2d25b74877c9ed0304/libstdc%2B%2B-v3%2Fsrc%2Fhash-aux.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15d81a3c31b52f5f883a1b2d25b74877c9ed0304/libstdc%2B%2B-v3%2Fsrc%2Fhash-aux.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fhash-aux.cc?ref=15d81a3c31b52f5f883a1b2d25b74877c9ed0304", "patch": "@@ -1,6 +1,6 @@\n //  std::hash and std::tr1::hash definitions -*- C++ -*-\n \n-// Copyright (C) 2007, 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -22,35 +22,6 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-  // For long double, careful with random padding bits (e.g., on x86,\n-  // 10 bytes -> 12 bytes) and resort to frexp.\n-  template<>\n-    size_t\n-    hash<long double>::operator()(long double __val) const\n-    {\n-      size_t __result = 0;\n-\n-      int __exponent;\n-      __val = std::frexp(__val, &__exponent);\n-      __val = __val < 0.0l ? -(__val + 0.5l) : __val;\n-\n-      const long double __mult =\n-      __gnu_cxx::__numeric_traits<size_t>::__max + 1.0l;\n-      __val *= __mult;\n-\n-      // Try to use all the bits of the mantissa (really necessary only\n-      // on 32-bit targets, at least for 80-bit floating point formats).\n-      const size_t __hibits = (size_t)__val;\n-      __val = (__val - (long double)__hibits) * __mult;\n-\n-      const size_t __coeff =\n-\t__gnu_cxx::__numeric_traits<size_t>::__max / __LDBL_MAX_EXP__;\n-\n-      __result = __hibits + (size_t)__val + __coeff * __exponent;\n-\n-      return __result;\n-    };\n-\n #ifndef _GLIBCXX_LONG_DOUBLE_COMPAT_IMPL\n   template<>\n     size_t\n@@ -79,4 +50,5 @@\n       return _Fnv_hash<>::hash(__p, __s.length() * sizeof(wchar_t));\n     }\n #endif\n+\n #endif"}, {"sha": "df97dff219f3ef24c6600dc1a615bdea6e9390e7", "filename": "libstdc++-v3/src/hash_c++0x.cc", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15d81a3c31b52f5f883a1b2d25b74877c9ed0304/libstdc%2B%2B-v3%2Fsrc%2Fhash_c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15d81a3c31b52f5f883a1b2d25b74877c9ed0304/libstdc%2B%2B-v3%2Fsrc%2Fhash_c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fhash_c%2B%2B0x.cc?ref=15d81a3c31b52f5f883a1b2d25b74877c9ed0304", "patch": "@@ -0,0 +1,58 @@\n+// std::hash definitions -*- C++ -*-\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+# error \"hash_c++0x.cc must be compiled with -std=gnu++0x\"\n+#endif\n+\n+#include <bits/functional_hash.h>\n+\n+namespace std\n+{\n+  /// std::hash specialization for long double.\n+  template<>\n+    size_t\n+    hash<long double>::operator()(long double __val) const\n+    {\n+      size_t __result = 0;\n+\n+      int __exponent;\n+      __val = __builtin_frexpl(__val, &__exponent);\n+      __val = __val < 0.0l ? -(__val + 0.5l) : __val;\n+\n+      const long double __mult = __SIZE_MAX__ + 1.0l;\n+      __val *= __mult;\n+\n+      // Try to use all the bits of the mantissa (really necessary only\n+      // on 32-bit targets, at least for 80-bit floating point formats).\n+      const size_t __hibits = (size_t)__val;\n+      __val = (__val - (long double)__hibits) * __mult;\n+\n+      const size_t __coeff = __SIZE_MAX__ / __LDBL_MAX_EXP__;\n+\n+      __result = __hibits + (size_t)__val + __coeff * __exponent;\n+\t\n+      return __result;\n+    }  \n+}"}, {"sha": "ecbb37dcd6e74e79a643ebcdc1c0700158c1ede7", "filename": "libstdc++-v3/src/hash_tr1.cc", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15d81a3c31b52f5f883a1b2d25b74877c9ed0304/libstdc%2B%2B-v3%2Fsrc%2Fhash_tr1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15d81a3c31b52f5f883a1b2d25b74877c9ed0304/libstdc%2B%2B-v3%2Fsrc%2Fhash_tr1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fhash_tr1.cc?ref=15d81a3c31b52f5f883a1b2d25b74877c9ed0304", "patch": "@@ -1,4 +1,4 @@\n-// std::hash definitions -*- C++ -*-\n+// std::tr1::hash definitions -*- C++ -*-\n \n // Copyright (C) 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n //\n@@ -22,15 +22,40 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-#include <cstddef>\n #include <string>\n-#include <cmath>\n #include <tr1/functional>\n \n namespace std\n {\n   namespace tr1 \n   {\n #include \"hash-aux.cc\"\n+\n+    // For long double, careful with random padding bits (e.g., on x86,\n+    // 10 bytes -> 12 bytes) and resort to frexp.\n+    template<>\n+      size_t\n+      hash<long double>::operator()(long double __val) const\n+      {\n+\tsize_t __result = 0;\n+\n+\tint __exponent;\n+\t__val = __builtin_frexpl(__val, &__exponent);\n+\t__val = __val < 0.0l ? -(__val + 0.5l) : __val;\n+\n+\tconst long double __mult = __SIZE_MAX__ + 1.0l;\n+\t__val *= __mult;\n+\n+\t// Try to use all the bits of the mantissa (really necessary only\n+\t// on 32-bit targets, at least for 80-bit floating point formats).\n+\tconst size_t __hibits = (size_t)__val;\n+\t__val = (__val - (long double)__hibits) * __mult;\n+\n+\tconst size_t __coeff = __SIZE_MAX__ / __LDBL_MAX_EXP__;\n+\n+\t__result = __hibits + (size_t)__val + __coeff * __exponent;\n+\n+\treturn __result;\n+      }\n   }\n }"}, {"sha": "93aceb305eb9807a2a629e3bd5711152a88bc99b", "filename": "libstdc++-v3/testsuite/20_util/weak_ptr/comparison/cmp_neg.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15d81a3c31b52f5f883a1b2d25b74877c9ed0304/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15d81a3c31b52f5f883a1b2d25b74877c9ed0304/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc?ref=15d81a3c31b52f5f883a1b2d25b74877c9ed0304", "patch": "@@ -30,7 +30,6 @@ int\n test01()\n {\n   std::weak_ptr<A> p1;\n-  // { dg-excess-errors \"candidates are\" }\n   p1 < p1;  // { dg-error \"no match\" }\n   return 0;\n }"}]}