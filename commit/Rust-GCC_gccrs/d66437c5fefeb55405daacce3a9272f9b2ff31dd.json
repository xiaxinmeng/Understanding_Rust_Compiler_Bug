{"sha": "d66437c5fefeb55405daacce3a9272f9b2ff31dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDY2NDM3YzVmZWZlYjU1NDA1ZGFhY2NlM2E5MjcyZjliMmZmMzFkZA==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2005-11-22T14:30:10Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2005-11-22T14:30:10Z"}, "message": "arm.c (emit_set_insn): New function.\n\n\t* arm.c (emit_set_insn): New function.\n\t(arm_split_constant): Call it.\n\t(arm_gen_compare_reg, arm_reload_in_hi, arm_reload_out_hi): Likewise.\n\t(arm_legitimize_address): Likewise.  Use plus_constant.\n\t(arm_expand_prologue): Likewise.  Use VOIDmode in SET.\n\t(thumb_expand_prologue): Likewise.\n\t(arm_gen_load_multiple): Use VOIDmode in SET.\n\t(arm_gen_store_multiple): Likewise.\n\t(vfp_emit_fstmx): Likewise.  Use plus_constant.\n\t(emit_multi_reg_push): Likewise.\n\t(emit_sfm): Use plus_constant.\n\nFrom-SVN: r107361", "tree": {"sha": "4a9cefa054aaa0db3888fc4ecf16ef37f0e5aea2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a9cefa054aaa0db3888fc4ecf16ef37f0e5aea2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d66437c5fefeb55405daacce3a9272f9b2ff31dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d66437c5fefeb55405daacce3a9272f9b2ff31dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d66437c5fefeb55405daacce3a9272f9b2ff31dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d66437c5fefeb55405daacce3a9272f9b2ff31dd/comments", "author": null, "committer": null, "parents": [{"sha": "8f7bb6d72ccdd29705e4a9abbb1df4897f3ae32b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f7bb6d72ccdd29705e4a9abbb1df4897f3ae32b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f7bb6d72ccdd29705e4a9abbb1df4897f3ae32b"}], "stats": {"total": 156, "additions": 75, "deletions": 81}, "files": [{"sha": "ab73d7a2732198db4a444e9e053cf23da70b5c2d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d66437c5fefeb55405daacce3a9272f9b2ff31dd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d66437c5fefeb55405daacce3a9272f9b2ff31dd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d66437c5fefeb55405daacce3a9272f9b2ff31dd", "patch": "@@ -1,3 +1,17 @@\n+2005-11-22  Richard Earnshaw  <richard.earnshaw@arm.com>\n+\n+\t* arm.c (emit_set_insn): New function.\n+\t(arm_split_constant): Call it.\n+\t(arm_gen_compare_reg, arm_reload_in_hi, arm_reload_out_hi): Likewise.\n+\t(arm_legitimize_address): Likewise.  Use plus_constant.\n+\t(arm_expand_prologue): Likewise.  Use VOIDmode in SET.\n+\t(thumb_expand_prologue): Likewise.\n+\t(arm_gen_load_multiple): Use VOIDmode in SET.\n+\t(arm_gen_store_multiple): Likewise.\n+\t(vfp_emit_fstmx): Likewise.  Use plus_constant.\n+\t(emit_multi_reg_push): Likewise.\n+\t(emit_sfm): Use plus_constant.\n+\t\n 2005-11-23  Alan Modra  <amodra@bigpond.net.au>\n \n \tPR target/24954"}, {"sha": "009d1420d08dbffc7568a8187f934f63b2368b41", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 61, "deletions": 81, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d66437c5fefeb55405daacce3a9272f9b2ff31dd/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d66437c5fefeb55405daacce3a9272f9b2ff31dd/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=d66437c5fefeb55405daacce3a9272f9b2ff31dd", "patch": "@@ -142,6 +142,7 @@ static rtx arm_expand_binop_builtin (enum insn_code, tree, rtx);\n static rtx arm_expand_unop_builtin (enum insn_code, tree, rtx, int);\n static rtx arm_expand_builtin (tree, rtx, rtx, enum machine_mode, int);\n static void emit_constant_insn (rtx cond, rtx pattern);\n+static rtx emit_set_insn (rtx, rtx);\n static int arm_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t  tree, bool);\n \n@@ -708,6 +709,14 @@ enum tls_reloc {\n   TLS_LE32\n };\n \n+/* Emit an insn that's a simple single-set.  Both the operands must be known\n+   to be valid.  */\n+inline static rtx\n+emit_set_insn (rtx x, rtx y)\n+{\n+  return emit_insn (gen_rtx_SET (VOIDmode, x, y));\n+}\n+\n /* Return the number of bits set in VALUE.  */\n static unsigned\n bit_count (unsigned long value)\n@@ -1673,22 +1682,21 @@ arm_split_constant (enum rtx_code code, enum machine_mode mode, rtx insn,\n \t    {\n \t      /* Currently SET is the only monadic value for CODE, all\n \t\t the rest are diadic.  */\n-\t      emit_insn (gen_rtx_SET (VOIDmode, target, GEN_INT (val)));\n+\t      emit_set_insn (target, GEN_INT (val));\n \t      return 1;\n \t    }\n \t  else\n \t    {\n \t      rtx temp = subtargets ? gen_reg_rtx (mode) : target;\n \n-\t      emit_insn (gen_rtx_SET (VOIDmode, temp, GEN_INT (val)));\n+\t      emit_set_insn (temp, GEN_INT (val));\n \t      /* For MINUS, the value is subtracted from, since we never\n \t\t have subtraction of a constant.  */\n \t      if (code == MINUS)\n-\t\temit_insn (gen_rtx_SET (VOIDmode, target,\n-\t\t\t\t\tgen_rtx_MINUS (mode, temp, source)));\n+\t\temit_set_insn (target, gen_rtx_MINUS (mode, temp, source));\n \t      else\n-\t\temit_insn (gen_rtx_SET (VOIDmode, target,\n-\t\t\t\t\tgen_rtx_fmt_ee (code, mode, source, temp)));\n+\t\temit_set_insn (target,\n+\t\t\t       gen_rtx_fmt_ee (code, mode, source, temp));\n \t      return 2;\n \t    }\n \t}\n@@ -3970,11 +3978,9 @@ arm_legitimize_address (rtx x, rtx orig_x, enum machine_mode mode)\n \t    }\n \n \t  base_reg = gen_reg_rtx (SImode);\n-\t  val = force_operand (gen_rtx_PLUS (SImode, xop0,\n-\t\t\t\t\t     GEN_INT (n)), NULL_RTX);\n+\t  val = force_operand (plus_constant (xop0, n), NULL_RTX);\n \t  emit_move_insn (base_reg, val);\n-\t  x = (low_n == 0 ? base_reg\n-\t       : gen_rtx_PLUS (SImode, base_reg, GEN_INT (low_n)));\n+\t  x = plus_constant (base_reg, low_n);\n \t}\n       else if (xop0 != XEXP (x, 0) || xop1 != XEXP (x, 1))\n \tx = gen_rtx_PLUS (SImode, xop0, xop1);\n@@ -4022,7 +4028,7 @@ arm_legitimize_address (rtx x, rtx orig_x, enum machine_mode mode)\n \t  index -= mask;\n \t}\n       base_reg = force_reg (SImode, GEN_INT (base));\n-      x = gen_rtx_PLUS (SImode, base_reg, GEN_INT (index));\n+      x = plus_constant (base_reg, index);\n     }\n \n   if (flag_pic)\n@@ -6223,8 +6229,7 @@ arm_gen_load_multiple (int base_regno, int count, rtx from, int up,\n   if (write_back)\n     {\n       XVECEXP (result, 0, 0)\n-\t= gen_rtx_SET (GET_MODE (from), from,\n-\t\t       plus_constant (from, count * 4 * sign));\n+\t= gen_rtx_SET (VOIDmode, from, plus_constant (from, count * 4 * sign));\n       i = 1;\n       count++;\n     }\n@@ -6287,7 +6292,7 @@ arm_gen_store_multiple (int base_regno, int count, rtx to, int up,\n   if (write_back)\n     {\n       XVECEXP (result, 0, 0)\n-\t= gen_rtx_SET (GET_MODE (to), to,\n+\t= gen_rtx_SET (VOIDmode, to,\n \t\t       plus_constant (to, count * 4 * sign));\n       i = 1;\n       count++;\n@@ -6737,8 +6742,7 @@ arm_gen_compare_reg (enum rtx_code code, rtx x, rtx y)\n   enum machine_mode mode = SELECT_CC_MODE (code, x, y);\n   rtx cc_reg = gen_rtx_REG (mode, CC_REGNUM);\n \n-  emit_insn (gen_rtx_SET (VOIDmode, cc_reg,\n-\t\t\t  gen_rtx_COMPARE (mode, x, y)));\n+  emit_set_insn (cc_reg, gen_rtx_COMPARE (mode, x, y));\n \n   return cc_reg;\n }\n@@ -6792,7 +6796,7 @@ arm_reload_in_hi (rtx *operands)\n     {\n       rtx base_plus = gen_rtx_REG (SImode, REGNO (operands[2]) + 1);\n \n-      emit_insn (gen_rtx_SET (VOIDmode, base_plus, base));\n+      emit_set_insn (base_plus, base);\n       base = base_plus;\n     }\n   else if (GET_CODE (base) == PLUS)\n@@ -6850,20 +6854,19 @@ arm_reload_in_hi (rtx *operands)\n \t\t\t\t\t\tplus_constant (base,\n \t\t\t\t\t\t\t       offset + 1))));\n   if (!BYTES_BIG_ENDIAN)\n-    emit_insn (gen_rtx_SET (VOIDmode, gen_rtx_SUBREG (SImode, operands[0], 0),\n-\t\t\tgen_rtx_IOR (SImode,\n-\t\t\t\t     gen_rtx_ASHIFT\n-\t\t\t\t     (SImode,\n-\t\t\t\t      gen_rtx_SUBREG (SImode, operands[0], 0),\n-\t\t\t\t      GEN_INT (8)),\n-\t\t\t\t     scratch)));\n+    emit_set_insn (gen_rtx_SUBREG (SImode, operands[0], 0),\n+\t\t   gen_rtx_IOR (SImode,\n+\t\t\t\tgen_rtx_ASHIFT\n+\t\t\t\t(SImode,\n+\t\t\t\t gen_rtx_SUBREG (SImode, operands[0], 0),\n+\t\t\t\t GEN_INT (8)),\n+\t\t\t\tscratch));\n   else\n-    emit_insn (gen_rtx_SET (VOIDmode, gen_rtx_SUBREG (SImode, operands[0], 0),\n-\t\t\t    gen_rtx_IOR (SImode,\n-\t\t\t\t\t gen_rtx_ASHIFT (SImode, scratch,\n-\t\t\t\t\t\t\t GEN_INT (8)),\n-\t\t\t\t\t gen_rtx_SUBREG (SImode, operands[0],\n-\t\t\t\t\t\t\t 0))));\n+    emit_set_insn (gen_rtx_SUBREG (SImode, operands[0], 0),\n+\t\t   gen_rtx_IOR (SImode,\n+\t\t\t\tgen_rtx_ASHIFT (SImode, scratch,\n+\t\t\t\t\t\tGEN_INT (8)),\n+\t\t\t\tgen_rtx_SUBREG (SImode, operands[0], 0)));\n }\n \n /* Handle storing a half-word to memory during reload by synthesizing as two\n@@ -6938,7 +6941,7 @@ arm_reload_out_hi (rtx *operands)\n \t    }\n \t}\n \n-      emit_insn (gen_rtx_SET (VOIDmode, base_plus, base));\n+      emit_set_insn (base_plus, base);\n       base = base_plus;\n     }\n   else if (GET_CODE (base) == PLUS)\n@@ -8445,8 +8448,7 @@ vfp_emit_fstmx (int base_reg, int count)\n \t\t\t\t   UNSPEC_PUSH_MULT));\n \n   tmp = gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n-\t\t     gen_rtx_PLUS (SImode, stack_pointer_rtx,\n-\t\t\t\t   GEN_INT (-(count * 8 + 4))));\n+\t\t     plus_constant (stack_pointer_rtx, -(count * 8 + 4)));\n   RTX_FRAME_RELATED_P (tmp) = 1;\n   XVECEXP (dwarf, 0, 0) = tmp;\n \n@@ -8464,9 +8466,8 @@ vfp_emit_fstmx (int base_reg, int count)\n \n       tmp = gen_rtx_SET (VOIDmode,\n \t\t\t gen_frame_mem (DFmode,\n-\t\t\t\t\tgen_rtx_PLUS (SImode,\n-\t\t\t\t\t\t      stack_pointer_rtx,\n-\t\t\t\t\t\t      GEN_INT (i * 8))),\n+\t\t\t\t\tplus_constant (stack_pointer_rtx,\n+\t\t\t\t\t\t       i * 8)),\n \t\t\t reg);\n       RTX_FRAME_RELATED_P (tmp) = 1;\n       XVECEXP (dwarf, 0, i + 1) = tmp;\n@@ -10207,11 +10208,9 @@ emit_multi_reg_push (unsigned long mask)\n \n   par = emit_insn (par);\n \n-  tmp = gen_rtx_SET (SImode,\n+  tmp = gen_rtx_SET (VOIDmode,\n \t\t     stack_pointer_rtx,\n-\t\t     gen_rtx_PLUS (SImode,\n-\t\t\t\t   stack_pointer_rtx,\n-\t\t\t\t   GEN_INT (-4 * num_regs)));\n+\t\t     plus_constant (stack_pointer_rtx, -4 * num_regs));\n   RTX_FRAME_RELATED_P (tmp) = 1;\n   XVECEXP (dwarf, 0, 0) = tmp;\n \n@@ -10276,9 +10275,8 @@ emit_sfm (int base_reg, int count)\n \n   tmp = gen_rtx_SET (VOIDmode,\n \t\t     stack_pointer_rtx,\n-\t\t     gen_rtx_PLUS (SImode,\n-\t\t\t\t   stack_pointer_rtx,\n-\t\t\t\t   GEN_INT (-12 * count)));\n+\t\t     plus_constant (stack_pointer_rtx, -12 * count));\n+\n   RTX_FRAME_RELATED_P (tmp) = 1;\n   XVECEXP (dwarf, 0, 0) = tmp;\n \n@@ -10611,25 +10609,19 @@ arm_expand_prologue (void)\n \t     inherited from the caller.  */\n \n \t  if (regs_ever_live[3] == 0)\n-\t    {\n-\t      insn = gen_rtx_REG (SImode, 3);\n-\t      insn = gen_rtx_SET (SImode, insn, ip_rtx);\n-\t      insn = emit_insn (insn);\n-\t    }\n+\t    insn = emit_set_insn (gen_rtx_REG (SImode, 3), ip_rtx);\n \t  else if (args_to_push == 0)\n \t    {\n \t      rtx dwarf;\n-\t      insn = gen_rtx_PRE_DEC (SImode, stack_pointer_rtx);\n-\t      insn = gen_frame_mem (SImode, insn);\n-\t      insn = gen_rtx_SET (VOIDmode, insn, ip_rtx);\n-\t      insn = emit_insn (insn);\n \n+\t      insn = gen_rtx_PRE_DEC (SImode, stack_pointer_rtx);\n+\t      insn = emit_set_insn (gen_frame_mem (SImode, insn), ip_rtx);\n \t      fp_offset = 4;\n \n \t      /* Just tell the dwarf backend that we adjusted SP.  */\n \t      dwarf = gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n-\t\t\t\t   gen_rtx_PLUS (SImode, stack_pointer_rtx,\n-\t\t\t\t\t\t GEN_INT (-fp_offset)));\n+\t\t\t\t   plus_constant (stack_pointer_rtx,\n+\t\t\t\t\t\t  -fp_offset));\n \t      RTX_FRAME_RELATED_P (insn) = 1;\n \t      REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_FRAME_RELATED_EXPR,\n \t\t\t\t\t\t    dwarf, REG_NOTES (insn));\n@@ -10652,21 +10644,12 @@ arm_expand_prologue (void)\n \t      args_to_push = 0;\n \n \t      /* Now reuse r3 to preserve IP.  */\n-\t      insn = gen_rtx_REG (SImode, 3);\n-\t      insn = gen_rtx_SET (SImode, insn, ip_rtx);\n-\t      (void) emit_insn (insn);\n+\t      emit_set_insn (gen_rtx_REG (SImode, 3), ip_rtx);\n \t    }\n \t}\n \n-      if (fp_offset)\n-\t{\n-\t  insn = gen_rtx_PLUS (SImode, stack_pointer_rtx, GEN_INT (fp_offset));\n-\t  insn = gen_rtx_SET  (SImode, ip_rtx, insn);\n-\t}\n-      else\n-\tinsn = gen_movsi (ip_rtx, stack_pointer_rtx);\n-\n-      insn = emit_insn (insn);\n+      insn = emit_set_insn (ip_rtx,\n+\t\t\t    plus_constant (stack_pointer_rtx, fp_offset));\n       RTX_FRAME_RELATED_P (insn) = 1;\n     }\n \n@@ -10691,11 +10674,11 @@ arm_expand_prologue (void)\n   if ((func_type == ARM_FT_ISR || func_type == ARM_FT_FIQ)\n       && (live_regs_mask & (1 << LR_REGNUM)) != 0\n       && ! frame_pointer_needed)\n-    emit_insn (gen_rtx_SET (SImode,\n-\t\t\t    gen_rtx_REG (SImode, LR_REGNUM),\n-\t\t\t    gen_rtx_PLUS (SImode,\n-\t\t\t\t\t  gen_rtx_REG (SImode, LR_REGNUM),\n-\t\t\t\t\t  GEN_INT (-4))));\n+    {\n+      rtx lr = gen_rtx_REG (SImode, LR_REGNUM);\n+      \n+      emit_set_insn (lr, plus_constant (lr, -4));\n+    }\n \n   if (live_regs_mask)\n     {\n@@ -10710,8 +10693,7 @@ arm_expand_prologue (void)\n \t{\n \t  insn = gen_rtx_PRE_DEC (V2SImode, stack_pointer_rtx);\n \t  insn = gen_frame_mem (V2SImode, insn);\n-\t  insn = emit_insn (gen_rtx_SET (VOIDmode, insn,\n-\t\t\t\t\t gen_rtx_REG (V2SImode, reg)));\n+\t  insn = emit_set_insn (insn, gen_rtx_REG (V2SImode, reg));\n \t  RTX_FRAME_RELATED_P (insn) = 1;\n \t  saved_regs += 8;\n \t}\n@@ -10729,8 +10711,7 @@ arm_expand_prologue (void)\n \t      {\n \t\tinsn = gen_rtx_PRE_DEC (XFmode, stack_pointer_rtx);\n \t\tinsn = gen_frame_mem (XFmode, insn);\n-\t\tinsn = emit_insn (gen_rtx_SET (VOIDmode, insn,\n-\t\t\t\t\t       gen_rtx_REG (XFmode, reg)));\n+\t\tinsn = emit_set_insn (insn, gen_rtx_REG (XFmode, reg));\n \t\tRTX_FRAME_RELATED_P (insn) = 1;\n \t\tsaved_regs += 12;\n \t      }\n@@ -10806,12 +10787,11 @@ arm_expand_prologue (void)\n \t    insn = gen_rtx_REG (SImode, 3);\n \t  else /* if (current_function_pretend_args_size == 0) */\n \t    {\n-\t      insn = gen_rtx_PLUS (SImode, hard_frame_pointer_rtx,\n-\t\t\t\t   GEN_INT (4));\n+\t      insn = plus_constant (hard_frame_pointer_rtx, 4);\n \t      insn = gen_frame_mem (SImode, insn);\n \t    }\n \n-\t  emit_insn (gen_rtx_SET (SImode, ip_rtx, insn));\n+\t  emit_set_insn (ip_rtx, insn);\n \t  /* Add a USE to stop propagate_one_insn() from barfing.  */\n \t  emit_insn (gen_prologue_use (ip_rtx));\n \t}\n@@ -13665,7 +13645,7 @@ thumb_expand_prologue (void)\n \t      insn = emit_insn (gen_addsi3 (stack_pointer_rtx,\n \t\t\t\t\t    stack_pointer_rtx, reg));\n \t      RTX_FRAME_RELATED_P (insn) = 1;\n-\t      dwarf = gen_rtx_SET (SImode, stack_pointer_rtx,\n+\t      dwarf = gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n \t\t\t\t   plus_constant (stack_pointer_rtx,\n \t\t\t\t\t\t  -amount));\n \t      RTX_FRAME_RELATED_P (dwarf) = 1;\n@@ -13691,7 +13671,7 @@ thumb_expand_prologue (void)\n \t      insn = emit_insn (gen_addsi3 (stack_pointer_rtx,\n \t\t\t\t\t    stack_pointer_rtx, reg));\n \t      RTX_FRAME_RELATED_P (insn) = 1;\n-\t      dwarf = gen_rtx_SET (SImode, stack_pointer_rtx,\n+\t      dwarf = gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n \t\t\t\t   plus_constant (stack_pointer_rtx,\n \t\t\t\t\t\t  -amount));\n \t      RTX_FRAME_RELATED_P (dwarf) = 1;\n@@ -13715,7 +13695,7 @@ thumb_expand_prologue (void)\n \t  insn = emit_insn (gen_addsi3 (hard_frame_pointer_rtx,\n \t\t\t\t\thard_frame_pointer_rtx,\n \t\t\t\t\tstack_pointer_rtx));\n-\t  dwarf = gen_rtx_SET (SImode, hard_frame_pointer_rtx,\n+\t  dwarf = gen_rtx_SET (VOIDmode, hard_frame_pointer_rtx,\n \t\t\t       plus_constant (stack_pointer_rtx, amount));\n \t  RTX_FRAME_RELATED_P (dwarf) = 1;\n \t  REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_FRAME_RELATED_EXPR, dwarf,"}]}