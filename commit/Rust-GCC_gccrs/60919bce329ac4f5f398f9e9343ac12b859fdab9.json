{"sha": "60919bce329ac4f5f398f9e9343ac12b859fdab9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjA5MTliY2UzMjlhYzRmNWYzOThmOWU5MzQzYWMxMmI4NTlmZGFiOQ==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm@polyomino.org.uk", "date": "2004-08-21T22:47:32Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2004-08-21T22:47:32Z"}, "message": "c-decl.c (build_array_declarator, [...]): Change boolean parameters to type bool.\n\n\t* c-decl.c (build_array_declarator, set_array_declarator_type,\n\tstart_decl, grokdeclarator, grokparms): Change boolean parameters\n\tto type bool.\n\t* c-tree.h (build_array_declarator, set_array_declarator_type,\n\tstart_decl): Update prototypes.\n\t* c-decl.c, c-parse.in: All callers changed.\n\nFrom-SVN: r86366", "tree": {"sha": "d5572574cda972321f6eb929aa133bb6d7e91d16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5572574cda972321f6eb929aa133bb6d7e91d16"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60919bce329ac4f5f398f9e9343ac12b859fdab9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60919bce329ac4f5f398f9e9343ac12b859fdab9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60919bce329ac4f5f398f9e9343ac12b859fdab9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60919bce329ac4f5f398f9e9343ac12b859fdab9/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bdfd0ed47e4b2449c1bd87f38aef92091e16feff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdfd0ed47e4b2449c1bd87f38aef92091e16feff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdfd0ed47e4b2449c1bd87f38aef92091e16feff"}], "stats": {"total": 86, "additions": 48, "deletions": 38}, "files": [{"sha": "63167790e96f6ec4554e816c6d465f55a63cbdf4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60919bce329ac4f5f398f9e9343ac12b859fdab9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60919bce329ac4f5f398f9e9343ac12b859fdab9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=60919bce329ac4f5f398f9e9343ac12b859fdab9", "patch": "@@ -1,3 +1,12 @@\n+2004-08-21  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\t* c-decl.c (build_array_declarator, set_array_declarator_type,\n+\tstart_decl, grokdeclarator, grokparms): Change boolean parameters\n+\tto type bool.\n+\t* c-tree.h (build_array_declarator, set_array_declarator_type,\n+\tstart_decl): Update prototypes.\n+\t* c-decl.c, c-parse.in: All callers changed.\n+\n 2004-08-21  Mike Stump  <mrs@apple.com>\n \n \t* config/rs6000/darwin.h (SUBTARGET_OPTIONS): Move from here, to..."}, {"sha": "28f265e98863b43ecb7cd6aa101f31d4aa6c5765", "filename": "gcc/c-decl.c", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60919bce329ac4f5f398f9e9343ac12b859fdab9/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60919bce329ac4f5f398f9e9343ac12b859fdab9/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=60919bce329ac4f5f398f9e9343ac12b859fdab9", "patch": "@@ -383,8 +383,8 @@ static GTY(()) tree static_dtors;\n /* Forward declarations.  */\n static tree lookup_name_in_scope (tree, struct c_scope *);\n static tree c_make_fname_decl (tree, int);\n-static tree grokdeclarator (tree, tree, enum decl_context, int, tree *);\n-static tree grokparms (tree, int);\n+static tree grokdeclarator (tree, tree, enum decl_context, bool, tree *);\n+static tree grokparms (tree, bool);\n static void layout_array_type (tree);\n \f\n /* States indicating how grokdeclarator() should handle declspecs marked\n@@ -2624,17 +2624,18 @@ shadow_tag_warned (tree declspecs, int warned)\n /* Construct an array declarator.  EXPR is the expression inside [], or\n    NULL_TREE.  QUALS are the type qualifiers inside the [] (to be applied\n    to the pointer to which a parameter array is converted).  STATIC_P is\n-   nonzero if \"static\" is inside the [], zero otherwise.  VLA_UNSPEC_P\n-   is nonzero is the array is [*], a VLA of unspecified length which is\n+   true if \"static\" is inside the [], false otherwise.  VLA_UNSPEC_P\n+   is true if the array is [*], a VLA of unspecified length which is\n    nevertheless a complete type (not currently implemented by GCC),\n-   zero otherwise.  The declarator is constructed as an ARRAY_REF\n+   false otherwise.  The declarator is constructed as an ARRAY_REF\n    (to be decoded by grokdeclarator), whose operand 0 is what's on the\n    left of the [] (filled by in set_array_declarator_type) and operand 1\n    is the expression inside; whose TREE_TYPE is the type qualifiers and\n    which has TREE_STATIC set if \"static\" is used.  */\n \n tree\n-build_array_declarator (tree expr, tree quals, int static_p, int vla_unspec_p)\n+build_array_declarator (tree expr, tree quals, bool static_p,\n+\t\t\tbool vla_unspec_p)\n {\n   tree decl;\n   decl = build_nt (ARRAY_REF, NULL_TREE, expr, NULL_TREE, NULL_TREE);\n@@ -2654,13 +2655,13 @@ build_array_declarator (tree expr, tree quals, int static_p, int vla_unspec_p)\n \n /* Set the type of an array declarator.  DECL is the declarator, as\n    constructed by build_array_declarator; TYPE is what appears on the left\n-   of the [] and goes in operand 0.  ABSTRACT_P is nonzero if it is an\n-   abstract declarator, zero otherwise; this is used to reject static and\n+   of the [] and goes in operand 0.  ABSTRACT_P is true if it is an\n+   abstract declarator, false otherwise; this is used to reject static and\n    type qualifiers in abstract declarators, where they are not in the\n    C99 grammar.  */\n \n tree\n-set_array_declarator_type (tree decl, tree type, int abstract_p)\n+set_array_declarator_type (tree decl, tree type, bool abstract_p)\n {\n   TREE_OPERAND (decl, 0) = type;\n   if (abstract_p && (TREE_TYPE (decl) != NULL_TREE || TREE_STATIC (decl)))\n@@ -2680,7 +2681,7 @@ groktypename (tree type_name)\n \n   split_specs_attrs (TREE_PURPOSE (type_name), &specs, &attrs);\n \n-  type_name = grokdeclarator (TREE_VALUE (type_name), specs, TYPENAME, 0,\n+  type_name = grokdeclarator (TREE_VALUE (type_name), specs, TYPENAME, false,\n \t\t\t     NULL);\n \n   /* Apply attributes.  */\n@@ -2698,7 +2699,7 @@ groktypename_in_parm_context (tree type_name)\n     return type_name;\n   return grokdeclarator (TREE_VALUE (type_name),\n \t\t\t TREE_PURPOSE (type_name),\n-\t\t\t PARM, 0, NULL);\n+\t\t\t PARM, false, NULL);\n }\n \n /* Decode a declarator in an ordinary declaration or data definition.\n@@ -2717,7 +2718,7 @@ groktypename_in_parm_context (tree type_name)\n    grokfield and not through here.  */\n \n tree\n-start_decl (tree declarator, tree declspecs, int initialized, tree attributes)\n+start_decl (tree declarator, tree declspecs, bool initialized, tree attributes)\n {\n   tree decl;\n   tree tem;\n@@ -3162,7 +3163,7 @@ push_parm_decl (tree parm)\n \n   decl = grokdeclarator (TREE_VALUE (TREE_PURPOSE (parm)),\n \t\t\t TREE_PURPOSE (TREE_PURPOSE (parm)),\n-\t\t\t PARM, 0, NULL);\n+\t\t\t PARM, false, NULL);\n   decl_attributes (&decl, TREE_VALUE (parm), 0);\n \n   decl = pushdecl (decl);\n@@ -3445,7 +3446,7 @@ check_bitfield_type_and_width (tree *type, tree *width, const char *orig_name)\n      TYPENAME if for a typename (in a cast or sizeof).\n       Don't make a DECL node; just return the ..._TYPE node.\n      FIELD for a struct or union field; make a FIELD_DECL.\n-   INITIALIZED is 1 if the decl has an initializer.\n+   INITIALIZED is true if the decl has an initializer.\n    WIDTH is non-NULL for bit-fields, and is a pointer to an INTEGER_CST node\n    representing the width of the bit-field.\n \n@@ -3458,7 +3459,7 @@ check_bitfield_type_and_width (tree *type, tree *width, const char *orig_name)\n \n static tree\n grokdeclarator (tree declarator, tree declspecs,\n-\t\tenum decl_context decl_context, int initialized, tree *width)\n+\t\tenum decl_context decl_context, bool initialized, tree *width)\n {\n   int specbits = 0;\n   tree spec;\n@@ -4729,12 +4730,12 @@ grokdeclarator (tree declarator, tree declspecs,\n \n    Return a list of arg types to use in the FUNCTION_TYPE for this function.\n \n-   FUNCDEF_FLAG is nonzero for a function definition, 0 for\n+   FUNCDEF_FLAG is true for a function definition, false for\n    a mere declaration.  A nonempty identifier-list gets an error message\n-   when FUNCDEF_FLAG is zero.  */\n+   when FUNCDEF_FLAG is false.  */\n \n static tree\n-grokparms (tree arg_info, int funcdef_flag)\n+grokparms (tree arg_info, bool funcdef_flag)\n {\n   tree arg_types = ARG_INFO_TYPES (arg_info);\n \n@@ -5135,7 +5136,7 @@ grokfield (tree declarator, tree declspecs, tree width)\n \t}\n     }\n \n-  value = grokdeclarator (declarator, declspecs, FIELD, 0,\n+  value = grokdeclarator (declarator, declspecs, FIELD, false,\n \t\t\t  width ? &width : NULL);\n \n   finish_decl (value, NULL_TREE, NULL_TREE);\n@@ -5726,7 +5727,7 @@ start_function (tree declspecs, tree declarator, tree attributes)\n      error message in c_finish_bc_stmt.  */\n   c_break_label = c_cont_label = size_zero_node;\n \n-  decl1 = grokdeclarator (declarator, declspecs, FUNCDEF, 1, NULL);\n+  decl1 = grokdeclarator (declarator, declspecs, FUNCDEF, true, NULL);\n \n   /* If the declarator is not suitable for a function definition,\n      cause a syntax error.  */"}, {"sha": "134c3494f0affb4fa575feb7535bdf50748b16ff", "filename": "gcc/c-parse.in", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60919bce329ac4f5f398f9e9343ac12b859fdab9/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60919bce329ac4f5f398f9e9343ac12b859fdab9/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=60919bce329ac4f5f398f9e9343ac12b859fdab9", "patch": "@@ -1389,7 +1389,7 @@ notype_initdecls:\n \n initdcl:\n \t  declarator maybeasm maybe_attribute '='\n-\t\t{ $<ttype>$ = start_decl ($1, current_declspecs, 1,\n+\t\t{ $<ttype>$ = start_decl ($1, current_declspecs, true,\n \t\t\t\t\t  chainon ($3, all_prefix_attributes));\n \t\t  start_init ($<ttype>$, $2, global_bindings_p ()); }\n \t  init\n@@ -1398,15 +1398,15 @@ initdcl:\n \t\t  maybe_warn_string_init (TREE_TYPE ($<ttype>5), $6);\n \t\t  finish_decl ($<ttype>5, $6.value, $2); }\n \t| declarator maybeasm maybe_attribute\n-\t\t{ tree d = start_decl ($1, current_declspecs, 0,\n+\t\t{ tree d = start_decl ($1, current_declspecs, false,\n \t\t\t\t       chainon ($3, all_prefix_attributes));\n \t\t  finish_decl (d, NULL_TREE, $2);\n                 }\n \t;\n \n notype_initdcl:\n \t  notype_declarator maybeasm maybe_attribute '='\n-\t\t{ $<ttype>$ = start_decl ($1, current_declspecs, 1,\n+\t\t{ $<ttype>$ = start_decl ($1, current_declspecs, true,\n \t\t\t\t\t  chainon ($3, all_prefix_attributes));\n \t\t  start_init ($<ttype>$, $2, global_bindings_p ()); }\n \t  init\n@@ -1415,7 +1415,7 @@ notype_initdcl:\n \t\t  maybe_warn_string_init (TREE_TYPE ($<ttype>5), $6);\n \t\t  finish_decl ($<ttype>5, $6.value, $2); }\n \t| notype_declarator maybeasm maybe_attribute\n-\t\t{ tree d = start_decl ($1, current_declspecs, 0,\n+\t\t{ tree d = start_decl ($1, current_declspecs, false,\n \t\t\t\t       chainon ($3, all_prefix_attributes));\n \t\t  finish_decl (d, NULL_TREE, $2); }\n \t;\n@@ -1624,7 +1624,7 @@ after_type_declarator:\n \t| after_type_declarator '(' parmlist_or_identifiers  %prec '.'\n \t\t{ $$ = build_nt (CALL_EXPR, $1, $3, NULL_TREE); }\n \t| after_type_declarator array_declarator  %prec '.'\n-\t\t{ $$ = set_array_declarator_type ($2, $1, 0); }\n+\t\t{ $$ = set_array_declarator_type ($2, $1, false); }\n \t| '*' maybe_type_quals_attrs after_type_declarator  %prec UNARY\n \t\t{ $$ = make_pointer_declarator ($2, $3); }\n \t| TYPENAME\n@@ -1646,7 +1646,7 @@ parm_declarator_starttypename:\n \t  parm_declarator_starttypename '(' parmlist_or_identifiers  %prec '.'\n \t\t{ $$ = build_nt (CALL_EXPR, $1, $3, NULL_TREE); }\n \t| parm_declarator_starttypename array_declarator  %prec '.'\n-\t\t{ $$ = set_array_declarator_type ($2, $1, 0); }\n+\t\t{ $$ = set_array_declarator_type ($2, $1, false); }\n \t| TYPENAME\n @@ifobjc\n \t| OBJECTNAME\n@@ -1657,7 +1657,7 @@ parm_declarator_nostarttypename:\n \t  parm_declarator_nostarttypename '(' parmlist_or_identifiers  %prec '.'\n \t\t{ $$ = build_nt (CALL_EXPR, $1, $3, NULL_TREE); }\n \t| parm_declarator_nostarttypename array_declarator  %prec '.'\n-\t\t{ $$ = set_array_declarator_type ($2, $1, 0); }\n+\t\t{ $$ = set_array_declarator_type ($2, $1, false); }\n \t| '*' maybe_type_quals_attrs parm_declarator_starttypename  %prec UNARY\n \t\t{ $$ = make_pointer_declarator ($2, $3); }\n \t| '*' maybe_type_quals_attrs parm_declarator_nostarttypename  %prec UNARY\n@@ -1677,7 +1677,7 @@ notype_declarator:\n \t| '*' maybe_type_quals_attrs notype_declarator  %prec UNARY\n \t\t{ $$ = make_pointer_declarator ($2, $3); }\n \t| notype_declarator array_declarator  %prec '.'\n-\t\t{ $$ = set_array_declarator_type ($2, $1, 0); }\n+\t\t{ $$ = set_array_declarator_type ($2, $1, false); }\n \t| IDENTIFIER\n \t;\n \n@@ -1946,27 +1946,27 @@ direct_absdcl1:\n \t| direct_absdcl1 '(' parmlist\n \t\t{ $$ = build_nt (CALL_EXPR, $1, $3, NULL_TREE); }\n \t| direct_absdcl1 array_declarator\n-\t\t{ $$ = set_array_declarator_type ($2, $1, 1); }\n+\t\t{ $$ = set_array_declarator_type ($2, $1, true); }\n \t| '(' parmlist\n \t\t{ $$ = build_nt (CALL_EXPR, NULL_TREE, $2, NULL_TREE); }\n \t| array_declarator\n-\t\t{ $$ = set_array_declarator_type ($1, NULL_TREE, 1); }\n+\t\t{ $$ = set_array_declarator_type ($1, NULL_TREE, true); }\n \t;\n \n /* The [...] part of a declarator for an array type.  */\n \n array_declarator:\n \t'[' maybe_type_quals_attrs expr_no_commas ']'\n-\t\t{ $$ = build_array_declarator ($3.value, $2, 0, 0); }\n+\t\t{ $$ = build_array_declarator ($3.value, $2, false, false); }\n \t| '[' maybe_type_quals_attrs ']'\n-\t\t{ $$ = build_array_declarator (NULL_TREE, $2, 0, 0); }\n+\t\t{ $$ = build_array_declarator (NULL_TREE, $2, false, false); }\n \t| '[' maybe_type_quals_attrs '*' ']'\n-\t\t{ $$ = build_array_declarator (NULL_TREE, $2, 0, 1); }\n+\t\t{ $$ = build_array_declarator (NULL_TREE, $2, false, true); }\n \t| '[' STATIC maybe_type_quals_attrs expr_no_commas ']'\n-\t\t{ $$ = build_array_declarator ($4.value, $3, 1, 0); }\n+\t\t{ $$ = build_array_declarator ($4.value, $3, true, false); }\n \t/* declspecs_nosc_nots is a synonym for type_quals_attrs.  */\n \t| '[' declspecs_nosc_nots STATIC expr_no_commas ']'\n-\t\t{ $$ = build_array_declarator ($4.value, $2, 1, 0); }\n+\t\t{ $$ = build_array_declarator ($4.value, $2, true, false); }\n \t;\n \n /* A nonempty series of declarations and statements (possibly followed by"}, {"sha": "bd143f8a0ac007f48ea75c216c84f1642b5ef226", "filename": "gcc/c-tree.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60919bce329ac4f5f398f9e9343ac12b859fdab9/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60919bce329ac4f5f398f9e9343ac12b859fdab9/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=60919bce329ac4f5f398f9e9343ac12b859fdab9", "patch": "@@ -163,7 +163,7 @@ extern void c_expand_body (tree);\n extern void c_init_decl_processing (void);\n extern void c_dup_lang_specific_decl (tree);\n extern void c_print_identifier (FILE *, tree, int);\n-extern tree build_array_declarator (tree, tree, int, int);\n+extern tree build_array_declarator (tree, tree, bool, bool);\n extern tree build_enumerator (tree, tree);\n extern void check_for_loop_decls (void);\n extern void mark_forward_parm_decls (void);\n@@ -188,14 +188,14 @@ extern void c_push_function_context (struct function *);\n extern void c_pop_function_context (struct function *);\n extern void push_parm_decl (tree);\n extern tree pushdecl_top_level (tree);\n-extern tree set_array_declarator_type (tree, tree, int);\n+extern tree set_array_declarator_type (tree, tree, bool);\n extern tree builtin_function (const char *, tree, int, enum built_in_class,\n \t\t\t      const char *, tree);\n extern void shadow_tag (tree);\n extern void shadow_tag_warned (tree, int);\n extern tree start_enum (tree);\n extern int  start_function (tree, tree, tree);\n-extern tree start_decl (tree, tree, int, tree);\n+extern tree start_decl (tree, tree, bool, tree);\n extern tree start_struct (enum tree_code, tree);\n extern void store_parm_decls (void);\n extern tree xref_tag (enum tree_code, tree);"}]}