{"sha": "0ceb0201344a65bab37d6933601df77a512c334e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGNlYjAyMDEzNDRhNjViYWIzN2Q2OTMzNjAxZGY3N2E1MTJjMzM0ZQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-08-25T14:46:40Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-08-25T14:46:40Z"}, "message": "alias.c (get_alias_set): Assign a single alias-set to all pointers.\n\n2010-08-25  Richard Guenther  <rguenther@suse.de>\n\n\t* alias.c (get_alias_set): Assign a single alias-set to\n\tall pointers.\n\t* gimple.c (gimple_get_alias_set): Remove special handling\n\tfor pointers.\n\n\tc-family/\n\t* c-common.c (c_common_get_alias_set): Remove special\n\thandling for pointers.\n\n\t* gcc.dg/alias-8.c: Adjust.\n\nFrom-SVN: r163549", "tree": {"sha": "c4d74b3812fa459819b2f5da7990bb89f3b7126b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4d74b3812fa459819b2f5da7990bb89f3b7126b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ceb0201344a65bab37d6933601df77a512c334e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ceb0201344a65bab37d6933601df77a512c334e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ceb0201344a65bab37d6933601df77a512c334e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ceb0201344a65bab37d6933601df77a512c334e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "22b139e167cdd083f3e38280e1db5880d05a130b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22b139e167cdd083f3e38280e1db5880d05a130b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22b139e167cdd083f3e38280e1db5880d05a130b"}], "stats": {"total": 162, "additions": 73, "deletions": 89}, "files": [{"sha": "514c1f5dd6818b1ed7e217422849e5d970734f88", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ceb0201344a65bab37d6933601df77a512c334e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ceb0201344a65bab37d6933601df77a512c334e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0ceb0201344a65bab37d6933601df77a512c334e", "patch": "@@ -1,3 +1,10 @@\n+2010-08-25  Richard Guenther  <rguenther@suse.de>\n+\n+\t* alias.c (get_alias_set): Assign a single alias-set to\n+\tall pointers.\n+\t* gimple.c (gimple_get_alias_set): Remove special handling\n+\tfor pointers.\n+\n 2010-08-25  Bernd Schmidt  <bernds@codesourcery.com>\n \n \tPR middle-end/45355"}, {"sha": "98706a040341cd1142ee85ad8824fb5acae7ec34", "filename": "gcc/alias.c", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ceb0201344a65bab37d6933601df77a512c334e/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ceb0201344a65bab37d6933601df77a512c334e/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=0ceb0201344a65bab37d6933601df77a512c334e", "patch": "@@ -761,6 +761,62 @@ get_alias_set (tree t)\n   else if (TREE_CODE (t) == ARRAY_TYPE && !TYPE_NONALIASED_COMPONENT (t))\n     set = get_alias_set (TREE_TYPE (t));\n \n+  /* From the former common C and C++ langhook implementation:\n+\n+     Unfortunately, there is no canonical form of a pointer type.\n+     In particular, if we have `typedef int I', then `int *', and\n+     `I *' are different types.  So, we have to pick a canonical\n+     representative.  We do this below.\n+\n+     Technically, this approach is actually more conservative that\n+     it needs to be.  In particular, `const int *' and `int *'\n+     should be in different alias sets, according to the C and C++\n+     standard, since their types are not the same, and so,\n+     technically, an `int **' and `const int **' cannot point at\n+     the same thing.\n+\n+     But, the standard is wrong.  In particular, this code is\n+     legal C++:\n+\n+     int *ip;\n+     int **ipp = &ip;\n+     const int* const* cipp = ipp;\n+     And, it doesn't make sense for that to be legal unless you\n+     can dereference IPP and CIPP.  So, we ignore cv-qualifiers on\n+     the pointed-to types.  This issue has been reported to the\n+     C++ committee.\n+\n+     In addition to the above canonicalization issue, with LTO\n+     we should also canonicalize `T (*)[]' to `T *' avoiding\n+     alias issues with pointer-to element types and pointer-to\n+     array types.\n+\n+     Likewise we need to deal with the situation of incomplete\n+     pointed-to types and make `*(struct X **)&a' and\n+     `*(struct X {} **)&a' alias.  Otherwise we will have to\n+     guarantee that all pointer-to incomplete type variants\n+     will be replaced by pointer-to complete type variants if\n+     they are available.\n+\n+     With LTO the convenient situation of using `void *' to\n+     access and store any pointer type will also become\n+     more apparent (and `void *' is just another pointer-to\n+     incomplete type).  Assigning alias-set zero to `void *'\n+     and all pointer-to incomplete types is a not appealing\n+     solution.  Assigning an effective alias-set zero only\n+     affecting pointers might be - by recording proper subset\n+     relationships of all pointer alias-sets.\n+\n+     Pointer-to function types are another grey area which\n+     needs caution.  Globbing them all into one alias-set\n+     or the above effective zero set would work.\n+\n+     For now just assign the same alias-set to all pointers.\n+     That's simple and avoids all the above problems.  */\n+  else if (POINTER_TYPE_P (t)\n+\t   && t != ptr_type_node)\n+    return get_alias_set (ptr_type_node);\n+\n   /* Otherwise make a new alias set for this type.  */\n   else\n     set = new_alias_set ();"}, {"sha": "165ec2032b5474d0f3a5da0a96c293c45eec3a64", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ceb0201344a65bab37d6933601df77a512c334e/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ceb0201344a65bab37d6933601df77a512c334e/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=0ceb0201344a65bab37d6933601df77a512c334e", "patch": "@@ -1,3 +1,8 @@\n+2010-08-25  Richard Guenther  <rguenther@suse.de>\n+\n+\t* c-common.c (c_common_get_alias_set): Remove special\n+\thandling for pointers.\n+\n 2010-08-20  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* c-common.c: Use FOR_EACH_VEC_ELT."}, {"sha": "3a79968b202af354363658556df407d1b728e979", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ceb0201344a65bab37d6933601df77a512c334e/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ceb0201344a65bab37d6933601df77a512c334e/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=0ceb0201344a65bab37d6933601df77a512c334e", "patch": "@@ -4087,37 +4087,6 @@ c_common_get_alias_set (tree t)\n       if (t1 != t)\n \treturn get_alias_set (t1);\n     }\n-  else if (POINTER_TYPE_P (t))\n-    {\n-      tree t1;\n-\n-      /* Unfortunately, there is no canonical form of a pointer type.\n-\t In particular, if we have `typedef int I', then `int *', and\n-\t `I *' are different types.  So, we have to pick a canonical\n-\t representative.  We do this below.\n-\n-\t Technically, this approach is actually more conservative that\n-\t it needs to be.  In particular, `const int *' and `int *'\n-\t should be in different alias sets, according to the C and C++\n-\t standard, since their types are not the same, and so,\n-\t technically, an `int **' and `const int **' cannot point at\n-\t the same thing.\n-\n-\t But, the standard is wrong.  In particular, this code is\n-\t legal C++:\n-\n-\t    int *ip;\n-\t    int **ipp = &ip;\n-\t    const int* const* cipp = ipp;\n-\n-\t And, it doesn't make sense for that to be legal unless you\n-\t can dereference IPP and CIPP.  So, we ignore cv-qualifiers on\n-\t the pointed-to types.  This issue has been reported to the\n-\t C++ committee.  */\n-      t1 = build_type_no_quals (t);\n-      if (t1 != t)\n-\treturn get_alias_set (t1);\n-    }\n \n   /* Handle the case of multiple type nodes referring to \"the same\" type,\n      which occurs with IMA.  These share an alias set.  FIXME:  Currently only"}, {"sha": "7433b14c36765803bfd4a36d571d10ec90094af8", "filename": "gcc/gimple.c", "status": "modified", "additions": 0, "deletions": 57, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ceb0201344a65bab37d6933601df77a512c334e/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ceb0201344a65bab37d6933601df77a512c334e/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=0ceb0201344a65bab37d6933601df77a512c334e", "patch": "@@ -4582,63 +4582,6 @@ gimple_get_alias_set (tree t)\n       if (t1 != t)\n \treturn get_alias_set (t1);\n     }\n-  else if (POINTER_TYPE_P (t))\n-    {\n-      /* From the common C and C++ langhook implementation:\n-\n-\t Unfortunately, there is no canonical form of a pointer type.\n-\t In particular, if we have `typedef int I', then `int *', and\n-\t `I *' are different types.  So, we have to pick a canonical\n-\t representative.  We do this below.\n-\n-\t Technically, this approach is actually more conservative that\n-\t it needs to be.  In particular, `const int *' and `int *'\n-\t should be in different alias sets, according to the C and C++\n-\t standard, since their types are not the same, and so,\n-\t technically, an `int **' and `const int **' cannot point at\n-\t the same thing.\n-\n-\t But, the standard is wrong.  In particular, this code is\n-\t legal C++:\n-\n-\t int *ip;\n-\t int **ipp = &ip;\n-\t const int* const* cipp = ipp;\n-\t And, it doesn't make sense for that to be legal unless you\n-\t can dereference IPP and CIPP.  So, we ignore cv-qualifiers on\n-\t the pointed-to types.  This issue has been reported to the\n-\t C++ committee.  */\n-\n-      /* In addition to the above canonicalization issue with LTO\n-         we should also canonicalize `T (*)[]' to `T *' avoiding\n-\t alias issues with pointer-to element types and pointer-to\n-\t array types.\n-\n-\t Likewise we need to deal with the situation of incomplete\n-\t pointed-to types and make `*(struct X **)&a' and\n-\t `*(struct X {} **)&a' alias.  Otherwise we will have to\n-\t guarantee that all pointer-to incomplete type variants\n-\t will be replaced by pointer-to complete type variants if\n-\t they are available.\n-\n-\t With LTO the convenient situation of using `void *' to\n-\t access and store any pointer type will also become\n-\t more apparent (and `void *' is just another pointer-to\n-\t incomplete type).  Assigning alias-set zero to `void *'\n-\t and all pointer-to incomplete types is a not appealing\n-\t solution.  Assigning an effective alias-set zero only\n-\t affecting pointers might be - by recording proper subset\n-\t relationships of all pointer alias-sets.\n-\n-\t Pointer-to function types are another grey area which\n-\t needs caution.  Globbing them all into one alias-set\n-\t or the above effective zero set would work.  */\n-\n-      /* For now just assign the same alias-set to all pointers.\n-         That's simple and avoids all the above problems.  */\n-      if (t != ptr_type_node)\n-\treturn get_alias_set (ptr_type_node);\n-    }\n \n   return -1;\n }"}, {"sha": "372024fd7cde6eaa251243f278c005d530ddd6e9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ceb0201344a65bab37d6933601df77a512c334e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ceb0201344a65bab37d6933601df77a512c334e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0ceb0201344a65bab37d6933601df77a512c334e", "patch": "@@ -1,3 +1,7 @@\n+2010-08-25  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.dg/alias-8.c: Adjust.\n+\n 2010-08-25  Bernd Schmidt  <bernds@codesourcery.com>\n \n \t* gcc.target/i386/combine-mul.c: New test."}, {"sha": "8eba671a05825d97cae1c770d2f767977c5b9c58", "filename": "gcc/testsuite/gcc.dg/alias-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ceb0201344a65bab37d6933601df77a512c334e/gcc%2Ftestsuite%2Fgcc.dg%2Falias-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ceb0201344a65bab37d6933601df77a512c334e/gcc%2Ftestsuite%2Fgcc.dg%2Falias-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Falias-8.c?ref=0ceb0201344a65bab37d6933601df77a512c334e", "patch": "@@ -8,5 +8,5 @@ struct s {\n void\n func(struct s *ptr)\n {\n-  *(void **)&ptr->p = 0; /* { dg-warning \"type-punned pointer\" } */\n+  *(void **)&ptr->p = 0; /* { dg-warning \"type-punned pointer\" \"\" { xfail *-*-* } } */\n }"}]}