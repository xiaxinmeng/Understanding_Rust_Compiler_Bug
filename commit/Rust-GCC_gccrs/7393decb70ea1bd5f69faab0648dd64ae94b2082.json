{"sha": "7393decb70ea1bd5f69faab0648dd64ae94b2082", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzM5M2RlY2I3MGVhMWJkNWY2OWZhYWIwNjQ4ZGQ2NGFlOTRiMjA4Mg==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2002-10-10T05:19:22Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2002-10-10T05:19:22Z"}, "message": "2002-10-08  Michael Koch  <konqueror@gmx.de>\n\n\t* java/net/HttpURLConnection.java\n\t(getPermission): New method.\n\t(getErrorStream): New stub method.\n\t(getHeaderFieldDate): New stub method.\n\t* java/net/Inet4Address.java:\n\t(isLinkLocalAddress): Typo fixed.\n\t* java/net/InetAddress.java:\n\t(readResolve): New stubbed method (for serialization).\n\t(isAnyLocalAddress): New stubbed method.\n\t(isLoopbackAddress): New stubbed method.\n\t(isLinkLocalAddress): New stubbed method.\n\t(isSiteLocalAddress): New stubbed method.\n\t(isMCGlobal): New stubbed method.\n\t(isMCNodeGlobal): New stubbed method.\n\t(isMCLinkLocal): New stubbed method.\n\t(isMCSiteLocal): New stubbed method.\n\t(isMCOrgLocal): New stubbed method.\n\t(getCanonicalHostName): New stubbed method.\n\t(getByAddress): Create instances of Inet4Address/Inet6Address,\n\tinstead of InetAddress, documentation added.\n\t* java/net/MulticastSocket.java\n\t(getInterface): Removed FIXME.\n\t(getNetworkInterface): New method.\n\t(setNetworkInterface): New method.\n\t* java/net/NetworkInterface.java:\n\t(toString): Use property \"line.separator\" instead of \"\\n\".\n\t* java/net/URLConnection.java\n\t(getContent): New stubbed method.\n\t* java/net/URLStreamHandler.java:\n\t(equals): New stubbed method.\n\t(hostsEqual): New stubbed method.\n\t(hashCode): New stubbed method.\n\t* java/net/natNetworkInterface.cc:\n\t(getRealNetworkInterfaces): Create Inet4Address object\n\tinstead of InetAddress.\n\nFrom-SVN: r58002", "tree": {"sha": "f965712000cf470fbf9fff4d979f57fb6d1f2b12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f965712000cf470fbf9fff4d979f57fb6d1f2b12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7393decb70ea1bd5f69faab0648dd64ae94b2082", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7393decb70ea1bd5f69faab0648dd64ae94b2082", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7393decb70ea1bd5f69faab0648dd64ae94b2082", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7393decb70ea1bd5f69faab0648dd64ae94b2082/comments", "author": null, "committer": null, "parents": [{"sha": "402a402cabeb85a223952f822eb14af6c3094a4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/402a402cabeb85a223952f822eb14af6c3094a4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/402a402cabeb85a223952f822eb14af6c3094a4c"}], "stats": {"total": 317, "additions": 299, "deletions": 18}, "files": [{"sha": "03683df644ffb5972578540bc4f035e448a7bad9", "filename": "libjava/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7393decb70ea1bd5f69faab0648dd64ae94b2082/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7393decb70ea1bd5f69faab0648dd64ae94b2082/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=7393decb70ea1bd5f69faab0648dd64ae94b2082", "patch": "@@ -1,3 +1,41 @@\n+2002-10-08  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/net/HttpURLConnection.java\n+\t(getPermission): New method.\n+\t(getErrorStream): New stub method.\n+\t(getHeaderFieldDate): New stub method.\n+\t* java/net/Inet4Address.java:\n+\t(isLinkLocalAddress): Typo fixed.\n+\t* java/net/InetAddress.java:\n+\t(readResolve): New stubbed method (for serialization).\n+\t(isAnyLocalAddress): New stubbed method.\n+\t(isLoopbackAddress): New stubbed method.\n+\t(isLinkLocalAddress): New stubbed method.\n+\t(isSiteLocalAddress): New stubbed method.\n+\t(isMCGlobal): New stubbed method.\n+\t(isMCNodeGlobal): New stubbed method.\n+\t(isMCLinkLocal): New stubbed method.\n+\t(isMCSiteLocal): New stubbed method.\n+\t(isMCOrgLocal): New stubbed method.\n+\t(getCanonicalHostName): New stubbed method.\n+\t(getByAddress): Create instances of Inet4Address/Inet6Address,\n+\tinstead of InetAddress, documentation added.\n+\t* java/net/MulticastSocket.java\n+\t(getInterface): Removed FIXME.\n+\t(getNetworkInterface): New method.\n+\t(setNetworkInterface): New method.\n+\t* java/net/NetworkInterface.java:\n+\t(toString): Use property \"line.separator\" instead of \"\\n\".\n+\t* java/net/URLConnection.java\n+\t(getContent): New stubbed method.\n+\t* java/net/URLStreamHandler.java:\n+\t(equals): New stubbed method.\n+\t(hostsEqual): New stubbed method.\n+\t(hashCode): New stubbed method.\n+\t* java/net/natNetworkInterface.cc:\n+\t(getRealNetworkInterfaces): Create Inet4Address object\n+\tinstead of InetAddress.\n+\n 2002-10-08  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* interpret.cc (_Jv_InterpMethod::run): Use UINT32 instead of"}, {"sha": "ac48246bb1c2ef587b1356bff0df733d2b74c446", "filename": "libjava/java/net/HttpURLConnection.java", "status": "modified", "additions": 30, "deletions": 6, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7393decb70ea1bd5f69faab0648dd64ae94b2082/libjava%2Fjava%2Fnet%2FHttpURLConnection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7393decb70ea1bd5f69faab0648dd64ae94b2082/libjava%2Fjava%2Fnet%2FHttpURLConnection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FHttpURLConnection.java?ref=7393decb70ea1bd5f69faab0648dd64ae94b2082", "patch": "@@ -217,11 +217,35 @@ private void getResponseVals() throws IOException\n       }\n   }\n \n-  // TODO12: public Permission getPermission() throws IOException\n-  // {\n-  // }\n+  /**\n+   * Returns a permission object representing the permission necessary to make\n+   * the connection represented by this object\n+   *\n+   * @exception IOException If an error occurs\n+   */\n+  public Permission getPermission() throws IOException\n+  {\n+    return new SocketPermission (url.getHost (), \"connect\");\n+  }\n+\n+  /**\n+   * Returns the error stream if the connection failed but the server sent\n+   * useful data nonetheless\n+   */\n+  public InputStream getErrorStream ()\n+  {\n+    // FIXME: implement this\n+    return null;\n+  }\n \n-  // TODO12: public InputStream getErrorStream()\n-  // {\n-  // }\n+  /**\n+   * Returns the value of the named field parsed as date\n+   */\n+  public long getHeaderFieldDate (String key, long value)\n+  {\n+    // FIXME: implement this correctly\n+    // http://www.w3.org/Protocols/HTTP-NG/ng-notes.txt\n+    \n+    return super.getHeaderFieldDate (key, value);\n+  }\n }"}, {"sha": "c635c671d0eb563d8ef65879081b1f0834611530", "filename": "libjava/java/net/Inet4Address.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7393decb70ea1bd5f69faab0648dd64ae94b2082/libjava%2Fjava%2Fnet%2FInet4Address.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7393decb70ea1bd5f69faab0648dd64ae94b2082/libjava%2Fjava%2Fnet%2FInet4Address.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FInet4Address.java?ref=7393decb70ea1bd5f69faab0648dd64ae94b2082", "patch": "@@ -113,7 +113,7 @@ public boolean isAnyLocalAddress ()\n    */\n   public boolean isLinkLocalAddress ()\n   {\n-    // XXX: This seems to net exist with IPv4 addresses\n+    // XXX: This seems to not exist with IPv4 addresses\n     return false;\n   }\n "}, {"sha": "c4ea6efd0d936404f144aa31f5ea22d30241f4c1", "filename": "libjava/java/net/InetAddress.java", "status": "modified", "additions": 118, "deletions": 5, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7393decb70ea1bd5f69faab0648dd64ae94b2082/libjava%2Fjava%2Fnet%2FInetAddress.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7393decb70ea1bd5f69faab0648dd64ae94b2082/libjava%2Fjava%2Fnet%2FInetAddress.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FInetAddress.java?ref=7393decb70ea1bd5f69faab0648dd64ae94b2082", "patch": "@@ -9,10 +9,12 @@\n details.  */\n \n package java.net;\n+\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n import java.io.IOException;\n import java.io.Serializable;\n+import java.io.ObjectStreamException;\n \n /**\n  * @author Per Bothner\n@@ -44,6 +46,14 @@ public class InetAddress implements Serializable\n   int family;\n   private static final long serialVersionUID = 3286316764910316507L;\n \n+  /**\n+   * Needed for serialization\n+   */\n+  private void readResolve () throws ObjectStreamException\n+  {\n+    // FIXME: implement this\n+  }\n+\t  \n   private void readObject(ObjectInputStream ois)\n     throws IOException, ClassNotFoundException\n   {\n@@ -96,13 +106,107 @@ public boolean isMulticastAddress ()\n     return false;\n   }\n \n+  /**\n+   * Utility routine to check if the InetAddress in a wildcard address\n+   * \n+   * @since 1.4\n+   */\n+  public boolean isAnyLocalAddress ()\n+  {\n+    // FIXME: implement this\n+    return false;\n+  }\n+\n+  /**\n+   * Utility routine to check if the InetAddress is a loopback address\n+   * \n+   * @since 1.4\n+   */\n+  public boolean isLoopbackAddress ()\n+  {\n+    // FIXME: implement this\n+    return addr [0] == 0x7F;\n+  }\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public boolean isLinkLocalAddress ()\n+  {\n+    // FIXME: implement this\n+    return false;\n+  }\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public boolean isSiteLocalAddress ()\n+  {\n+    // FIXME: implement this\n+    return false;\n+  }\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public boolean isMCGlobal ()\n+  {\n+    // FIXME: implement this\n+    return false;\n+  }\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public boolean isMCNodeLocal ()\n+  {\n+    // FIXME: implement this\n+    return false;\n+  }\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public boolean isMCLinkLocal ()\n+  {\n+    // FIXME: implement this\n+    return false;\n+  }\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public boolean isMCSiteLocal ()\n+  {\n+    // FIXME: implement this\n+    return false;\n+  }\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public boolean isMCOrgLocal ()\n+  {\n+    // FIXME: implement this\n+    return false;\n+  }\n+\n   public String getHostName ()\n   {\n     if (hostName == null)\n       lookup (null, this, false);\n     return hostName;\n   }\n \n+  /**\n+   * @since 1.4\n+   */\n+  public String getCanonicalHostName ()\n+  {\n+    // FIXME: implement this\n+    return \"\";\n+  }\n+\n   public byte[] getAddress ()\n   {\n     // An experiment shows that JDK1.2 returns a different byte array each\n@@ -199,6 +303,7 @@ public boolean equals (Object obj)\n   {\n     if (obj == null || ! (obj instanceof InetAddress))\n       return false;\n+    \n     // \"The Java Class Libraries\" 2nd edition says \"If a machine has\n     // multiple names instances of InetAddress for different name of\n     // that same machine are not equal.  This is because they have\n@@ -222,13 +327,15 @@ public String toString()\n   {\n     return getHostName()+'/'+getHostAddress();\n   }\n-  \n+\n   /**\n    * Returns an InetAddress object given the raw IP address.\n    *\n    * The argument is in network byte order: the highest order byte of the\n    * address is in getAddress()[0].\n    *\n+   * @param addr The IP address to create the InetAddress object from\n+   *\n    * @exception UnknownHostException If IP address has illegal length\n    *\n    * @since 1.4\n@@ -241,20 +348,26 @@ public static InetAddress getByAddress(byte[] addr)\n \n     return new InetAddress (addr, \"\");\n   }\n-  \n+\n   /**\n-   * Create an InetAddress based on the provided host name and IP address.\n+   * Creates an InetAddress based on the provided host name and IP address.\n    * No name service is checked for the validity of the address.\n    *\n+   * @param host The hostname of the InetAddress object to create\n+   * @param addr The IP address to create the InetAddress object from\n+   *\n    * @exception UnknownHostException If IP address is of illegal length\n    *\n    * @since 1.4\n    */\n   public static InetAddress getByAddress (String host, byte[] addr)\n     throws UnknownHostException\n   {\n-    if (addr.length == 4 || addr.length == 16)\n-      return new InetAddress (addr, host);\n+    if (addr.length == 4)\n+      return new Inet4Address (addr, host);\n+\n+    if (addr.length == 16)\n+      return new Inet6Address (addr, host);\n     \n     throw new UnknownHostException (\"IP address has illegal length\");\n   }"}, {"sha": "2700ebee511f17b014b025cb1e83bcc6409df311", "filename": "libjava/java/net/MulticastSocket.java", "status": "modified", "additions": 57, "deletions": 1, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7393decb70ea1bd5f69faab0648dd64ae94b2082/libjava%2Fjava%2Fnet%2FMulticastSocket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7393decb70ea1bd5f69faab0648dd64ae94b2082/libjava%2Fjava%2Fnet%2FMulticastSocket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FMulticastSocket.java?ref=7393decb70ea1bd5f69faab0648dd64ae94b2082", "patch": "@@ -38,6 +38,7 @@\n package java.net;\n \n import java.io.IOException;\n+import java.util.Enumeration;\n \n /**\n  * Written using on-line Java Platform 1.2 API Specification, as well\n@@ -120,7 +121,6 @@ public MulticastSocket(SocketAddress address) throws IOException\n    */\n   public InetAddress getInterface() throws SocketException\n   {\n-    // FIXME: Is it possible that an InetAddress wasn't returned from getOption?\n     return (InetAddress) impl.getOption(SocketOptions.IP_MULTICAST_IF);\n   }\n \n@@ -172,6 +172,58 @@ public void setInterface(InetAddress inf) throws SocketException\n     impl.setOption(SocketOptions.IP_MULTICAST_IF, inf);\n   }\n \n+  /**\n+   * Sets the local network interface used to send multicast messages\n+   *\n+   * @param netIF The local network interface used to send multicast messages\n+   * \n+   * @exception SocketException If an error occurs\n+   * \n+   * @see MulticastSocket:getNetworkInterface\n+   * \n+   * @since 1.4\n+   */\n+  public void setNetworkInterface(NetworkInterface netIf)\n+    throws SocketException\n+  {\n+    if (impl == null)\n+      throw new SocketException (\n+\t\t      \"MulticastSocket: Cant access socket implementation\");\n+\n+    Enumeration e = netIf.getInetAddresses ();\n+\n+    if (!e.hasMoreElements ())\n+      throw new SocketException (\"MulticastSocket: Error\");\n+\n+    InetAddress address = (InetAddress) e.nextElement ();\n+    impl.setOption (SocketOptions.IP_MULTICAST_IF, address);\n+  }\n+\n+  /**\n+   * Gets the local network interface which is used to send multicast messages\n+   *\n+   * @return The local network interface to send multicast messages\n+   *\n+   * @exception SocketException If an error occurs\n+   *\n+   * @see MulticastSocket:setNetworkInterface\n+   * \n+   * @since 1.4\n+   */\n+  public NetworkInterface getNetworkInterface()\n+    throws SocketException\n+  {\n+    if (impl == null)\n+      throw new SocketException (\n+\t\t      \"MulticastSocket: Cant access socket implementation\");\n+\n+    InetAddress address =\n+\t    (InetAddress) impl.getOption (SocketOptions.IP_MULTICAST_IF);\n+    NetworkInterface netIf = NetworkInterface.getByInetAddress (address);\n+\n+    return netIf;\n+  }\n+\n   /**\n    * Disable/Enable local loopback of multicast packets.  The option is used by\n    * the platform's networking code as a hint for setting whether multicast\n@@ -188,6 +240,10 @@ public void setInterface(InetAddress inf) throws SocketException\n    */\n   public void setLoopbackMode(boolean disable) throws SocketException\n   {\n+    if (impl == null)\n+      throw new SocketException (\n+\t\t      \"MulticastSocket: Cant access socket implementation\");\n+\n     impl.setOption (SocketOptions.IP_MULTICAST_LOOP, new Boolean (disable));\n   }\n "}, {"sha": "60a7d764cbc01fe96df7c010c0a68716a87449dc", "filename": "libjava/java/net/NetworkInterface.java", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7393decb70ea1bd5f69faab0648dd64ae94b2082/libjava%2Fjava%2Fnet%2FNetworkInterface.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7393decb70ea1bd5f69faab0648dd64ae94b2082/libjava%2Fjava%2Fnet%2FNetworkInterface.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FNetworkInterface.java?ref=7393decb70ea1bd5f69faab0648dd64ae94b2082", "patch": "@@ -220,15 +220,16 @@ public String toString ()\n   {\n     // FIXME: check if this is correct\n     String result;\n+    String separator = System.getProperty (\"line.separator\");\n \n     result = \"name: \" + getDisplayName () + \" (\" + getName () +\n-\t     \") addresses:\\n\";\n+\t     \") addresses:\" + separator;\n \n     for (Enumeration e = inetAddresses.elements ();\n          e.hasMoreElements (); )\n       {\n         InetAddress address = (InetAddress) e.nextElement ();\n-        result += address.toString () + \"\\n\";\n+        result += address.toString () + separator;\n       }\n \n     return result;"}, {"sha": "0b39fe88ea63b14293d8849b7721aab25e2bad21", "filename": "libjava/java/net/URLConnection.java", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7393decb70ea1bd5f69faab0648dd64ae94b2082/libjava%2Fjava%2Fnet%2FURLConnection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7393decb70ea1bd5f69faab0648dd64ae94b2082/libjava%2Fjava%2Fnet%2FURLConnection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURLConnection.java?ref=7393decb70ea1bd5f69faab0648dd64ae94b2082", "patch": "@@ -250,6 +250,19 @@ public Object getContent() throws IOException\n     return contentHandler.getContent(this);\n   }\n \n+  /**\n+   * Retrieves the content of this URLConnection\n+   *\n+   * @exception IOException If an error occurs\n+   * @exception UnknownServiceException If the protocol does not support the\n+   * content type\n+   */\n+  public Object getContent(Class[] classes) throws IOException\n+  {\n+    // FIXME: implement this\n+    return getContent ();\n+  }\n+\n   /**\n    * Returns a permission object representing the permission necessary to make\n    * the connection represented by this object. This method returns null if no"}, {"sha": "58add6f188310863d5d0f254a16af7fdb2c91eb3", "filename": "libjava/java/net/URLStreamHandler.java", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7393decb70ea1bd5f69faab0648dd64ae94b2082/libjava%2Fjava%2Fnet%2FURLStreamHandler.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7393decb70ea1bd5f69faab0648dd64ae94b2082/libjava%2Fjava%2Fnet%2FURLStreamHandler.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURLStreamHandler.java?ref=7393decb70ea1bd5f69faab0648dd64ae94b2082", "patch": "@@ -223,6 +223,32 @@ protected void setURL(URL u, String protocol, String host, int port,\n     u.set(protocol, host, port, authority, userInfo, path, query, ref);\n   }\n \n+  /**\n+   * Provides the default equals calculation. May be overidden by handlers for\n+   * other protocols that have different requirements for equals(). This method\n+   * requires that none of its arguments is null. This is guaranteed by the\n+   * fact that it is only called by java.net.URL class.\n+   *\n+   * @param url1 An URL object\n+   * @param url2 An URL object\n+   */\n+  protected boolean equals (URL url1, URL url2)\n+  {\n+    // FIXME: implement this\n+    return false;\n+  }\n+\n+  /**\n+   * Compares the host components of two URLs.\n+   *\n+   * @exception UnknownHostException If an unknown host is found\n+   */\n+  protected boolean hostsEqual (URL url1, URL url2)\n+  {\n+    // FIXME: implement this\n+    return false;\n+  }\n+\n   /**\n    * Get the IP address of our host. An empty host field or a DNS failure will\n    * result in a null return.\n@@ -253,6 +279,16 @@ protected int getDefaultPort ()\n     return -1;\n   }\n \n+  /**\n+   * Provides the default hash calculation. May be overidden by handlers for\n+   * other protocols that have different requirements for hashCode calculation.\n+   */\n+  protected int hashCode (URL url)\n+  {\n+    // FIXME: implement this\n+    return 0;\n+  }\n+\n   /**\n    * Converts an URL of a specific protocol to a string\n    *"}, {"sha": "f2019409e819c46819ab8c49648e4b03d695ae85", "filename": "libjava/java/net/natNetworkInterface.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7393decb70ea1bd5f69faab0648dd64ae94b2082/libjava%2Fjava%2Fnet%2FnatNetworkInterface.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7393decb70ea1bd5f69faab0648dd64ae94b2082/libjava%2Fjava%2Fnet%2FnatNetworkInterface.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FnatNetworkInterface.cc?ref=7393decb70ea1bd5f69faab0648dd64ae94b2082", "patch": "@@ -52,7 +52,7 @@ details.  */\n #include <gcj/cni.h>\n #include <jvm.h>\n #include <java/net/NetworkInterface.h>\n-#include <java/net/InetAddress.h>\n+#include <java/net/Inet4Address.h>\n #include <java/net/SocketException.h>\n #include <java/util/Vector.h>\n \n@@ -123,8 +123,8 @@ java::net::NetworkInterface::getRealNetworkInterfaces ()\n       jbyteArray baddr = JvNewByteArray (len);\n       memcpy (elements (baddr), &(sa.sin_addr), len);\n       jstring if_name = JvNewStringLatin1 (if_record->ifr_name);\n-      InetAddress* address =\n-        new java::net::InetAddress (baddr, JvNewStringLatin1 (\"\"));\n+      Inet4Address* address =\n+        new java::net::Inet4Address (baddr, JvNewStringLatin1 (\"\"));\n       ht->add (new NetworkInterface (if_name, address));\n       if_record++;\n     }"}]}