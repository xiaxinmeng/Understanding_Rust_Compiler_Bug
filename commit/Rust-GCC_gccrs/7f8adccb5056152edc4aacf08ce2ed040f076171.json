{"sha": "7f8adccb5056152edc4aacf08ce2ed040f076171", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Y4YWRjY2I1MDU2MTUyZWRjNGFhY2YwOGNlMmVkMDQwZjA3NjE3MQ==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-07-27T13:33:52Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-07-27T13:33:52Z"}, "message": "Add support for varadic extern \"c\" functions like printf\n\nVaradic functions are only allowed in extern functions as far as I know.", "tree": {"sha": "fa41b5f161823fe6b43413370422f25414f8fcaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa41b5f161823fe6b43413370422f25414f8fcaa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f8adccb5056152edc4aacf08ce2ed040f076171", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f8adccb5056152edc4aacf08ce2ed040f076171", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f8adccb5056152edc4aacf08ce2ed040f076171", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f8adccb5056152edc4aacf08ce2ed040f076171/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2818017d36f5c6279a2372b0a8efbe1f17b3f374", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2818017d36f5c6279a2372b0a8efbe1f17b3f374", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2818017d36f5c6279a2372b0a8efbe1f17b3f374"}], "stats": {"total": 170, "additions": 144, "deletions": 26}, "files": [{"sha": "0aaf084f04f02f9dacf28e7ab53b2f5982755f1a", "filename": "gcc/rust/backend/rust-compile-context.h", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8adccb5056152edc4aacf08ce2ed040f076171/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8adccb5056152edc4aacf08ce2ed040f076171/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-context.h?ref=7f8adccb5056152edc4aacf08ce2ed040f076171", "patch": "@@ -371,9 +371,14 @@ class TyTyResolveCompile : public TyTy::TyVisitor\n \tparameters.push_back (compiled_param);\n       }\n \n-    translated = ctx->get_backend ()->function_type (\n-      receiver, parameters, results, NULL,\n-      ctx->get_mappings ()->lookup_location (type.get_ref ()));\n+    if (!type.is_varadic ())\n+      translated = ctx->get_backend ()->function_type (\n+\treceiver, parameters, results, NULL,\n+\tctx->get_mappings ()->lookup_location (type.get_ref ()));\n+    else\n+      translated = ctx->get_backend ()->function_type_varadic (\n+\treceiver, parameters, results, NULL,\n+\tctx->get_mappings ()->lookup_location (type.get_ref ()));\n   }\n \n   void visit (TyTy::FnPtr &type) override"}, {"sha": "a0ad2002bef7af9ddc04d087385da863fdb8ec7f", "filename": "gcc/rust/backend/rust-compile-extern.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8adccb5056152edc4aacf08ce2ed040f076171/gcc%2Frust%2Fbackend%2Frust-compile-extern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8adccb5056152edc4aacf08ce2ed040f076171/gcc%2Frust%2Fbackend%2Frust-compile-extern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-extern.h?ref=7f8adccb5056152edc4aacf08ce2ed040f076171", "patch": "@@ -51,10 +51,8 @@ class CompileExternItem : public HIRCompileBase\n     rust_assert (ok);\n \n     std::string name = item.get_item_name ();\n-\n-    // FIXME\n-    // this is assuming C ABI\n-    std::string asm_name = \"_\" + name;\n+    // FIXME this is assuming C ABI\n+    std::string asm_name = name;\n \n     Btype *type = TyTyResolveCompile::compile (ctx, resolved_type);\n     bool is_external = true;"}, {"sha": "3ddc29ac1ab7300ce2938c6bdca0f4c44efae9a0", "filename": "gcc/rust/backend/rust-compile-tyty.h", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8adccb5056152edc4aacf08ce2ed040f076171/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8adccb5056152edc4aacf08ce2ed040f076171/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h?ref=7f8adccb5056152edc4aacf08ce2ed040f076171", "patch": "@@ -95,9 +95,15 @@ class TyTyCompile : public TyTy::TyVisitor\n \tparameters.push_back (compiled_param);\n       }\n \n-    translated\n-      = backend->function_type (receiver, parameters, results, NULL,\n-\t\t\t\tmappings->lookup_location (type.get_ref ()));\n+    if (!type.is_varadic ())\n+      translated\n+\t= backend->function_type (receiver, parameters, results, NULL,\n+\t\t\t\t  mappings->lookup_location (type.get_ref ()));\n+    else\n+      translated\n+\t= backend->function_type_varadic (receiver, parameters, results, NULL,\n+\t\t\t\t\t  mappings->lookup_location (\n+\t\t\t\t\t    type.get_ref ()));\n   }\n \n   void visit (TyTy::BoolType &) override"}, {"sha": "be23fd3d852ca62cf056e711a8ef62f264565892", "filename": "gcc/rust/rust-backend.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8adccb5056152edc4aacf08ce2ed040f076171/gcc%2Frust%2Frust-backend.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8adccb5056152edc4aacf08ce2ed040f076171/gcc%2Frust%2Frust-backend.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-backend.h?ref=7f8adccb5056152edc4aacf08ce2ed040f076171", "patch": "@@ -163,6 +163,13 @@ class Backend\n \t\t Btype *result_struct, Location location)\n     = 0;\n \n+  virtual Btype *\n+  function_type_varadic (const Btyped_identifier &receiver,\n+\t\t\t const std::vector<Btyped_identifier> &parameters,\n+\t\t\t const std::vector<Btyped_identifier> &results,\n+\t\t\t Btype *result_struct, Location location)\n+    = 0;\n+\n   virtual Btype *function_ptr_type (Btype *result,\n \t\t\t\t    const std::vector<Btype *> &praameters,\n \t\t\t\t    Location location)"}, {"sha": "44617a68d2a4afbbfc76a858f223ca64bad7f5c7", "filename": "gcc/rust/rust-gcc.cc", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8adccb5056152edc4aacf08ce2ed040f076171/gcc%2Frust%2Frust-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8adccb5056152edc4aacf08ce2ed040f076171/gcc%2Frust%2Frust-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-gcc.cc?ref=7f8adccb5056152edc4aacf08ce2ed040f076171", "patch": "@@ -256,6 +256,11 @@ class Gcc_backend : public Backend\n \t\t\tconst std::vector<Btyped_identifier> &, Btype *,\n \t\t\tconst Location);\n \n+  Btype *function_type_varadic (const Btyped_identifier &,\n+\t\t\t\tconst std::vector<Btyped_identifier> &,\n+\t\t\t\tconst std::vector<Btyped_identifier> &, Btype *,\n+\t\t\t\tconst Location);\n+\n   Btype *function_ptr_type (Btype *, const std::vector<Btype *> &, Location);\n \n   Btype *struct_type (const std::vector<Btyped_identifier> &);\n@@ -1048,6 +1053,62 @@ Gcc_backend::function_type (const Btyped_identifier &receiver,\n   return this->make_type (build_pointer_type (fntype));\n }\n \n+Btype *\n+Gcc_backend::function_type_varadic (\n+  const Btyped_identifier &receiver,\n+  const std::vector<Btyped_identifier> &parameters,\n+  const std::vector<Btyped_identifier> &results, Btype *result_struct, Location)\n+{\n+  size_t n = parameters.size () + (receiver.btype != NULL ? 1 : 0);\n+  tree *args = XALLOCAVEC (tree, n);\n+  size_t offs = 0;\n+\n+  if (receiver.btype != NULL)\n+    {\n+      tree t = receiver.btype->get_tree ();\n+      if (t == error_mark_node)\n+\treturn this->error_type ();\n+\n+      args[offs++] = t;\n+    }\n+\n+  for (std::vector<Btyped_identifier>::const_iterator p = parameters.begin ();\n+       p != parameters.end (); ++p)\n+    {\n+      tree t = p->btype->get_tree ();\n+      if (t == error_mark_node)\n+\treturn this->error_type ();\n+      args[offs++] = t;\n+    }\n+\n+  tree result;\n+  if (results.empty ())\n+    result = void_type_node;\n+  else if (results.size () == 1)\n+    result = results.front ().btype->get_tree ();\n+  else\n+    {\n+      gcc_assert (result_struct != NULL);\n+      result = result_struct->get_tree ();\n+    }\n+  if (result == error_mark_node)\n+    return this->error_type ();\n+\n+  // The libffi library cannot represent a zero-sized object.  To\n+  // avoid causing confusion on 32-bit SPARC, we treat a function that\n+  // returns a zero-sized value as returning void.  That should do no\n+  // harm since there is no actual value to be returned.  See\n+  // https://gcc.gnu.org/PR72814 for details.\n+  if (result != void_type_node && int_size_in_bytes (result) == 0)\n+    result = void_type_node;\n+\n+  tree fntype = build_varargs_function_type_array (result, n, args);\n+  if (fntype == error_mark_node)\n+    return this->error_type ();\n+\n+  return this->make_type (build_pointer_type (fntype));\n+}\n+\n Btype *\n Gcc_backend::function_ptr_type (Btype *result_type,\n \t\t\t\tconst std::vector<Btype *> &parameters,"}, {"sha": "65088be4d9cd7207a5ac9e61357188471f5bc770", "filename": "gcc/rust/typecheck/rust-hir-type-check-implitem.h", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8adccb5056152edc4aacf08ce2ed040f076171/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8adccb5056152edc4aacf08ce2ed040f076171/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h?ref=7f8adccb5056152edc4aacf08ce2ed040f076171", "patch": "@@ -111,11 +111,15 @@ class TypeCheckTopLevelExternItem : public TypeCheckBase\n \tcontext->insert_type (param.get_mappings (), param_tyty);\n       }\n \n-    auto fnType = new TyTy::FnType (function.get_mappings ().get_hirid (),\n-\t\t\t\t    function.get_mappings ().get_defid (),\n-\t\t\t\t    function.get_item_name (),\n-\t\t\t\t    FNTYPE_IS_EXTERN_FLAG, std::move (params),\n-\t\t\t\t    ret_type, std::move (substitutions));\n+    uint8_t flags = FNTYPE_IS_EXTERN_FLAG;\n+    if (function.is_variadic ())\n+      flags |= FNTYPE_IS_VARADIC_FLAG;\n+\n+    auto fnType\n+      = new TyTy::FnType (function.get_mappings ().get_hirid (),\n+\t\t\t  function.get_mappings ().get_defid (),\n+\t\t\t  function.get_item_name (), flags, std::move (params),\n+\t\t\t  ret_type, std::move (substitutions));\n     context->insert_type (function.get_mappings (), fnType);\n   }\n "}, {"sha": "1ca28fae061fa0aa1e99dbace9c236404f416ec9", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 30, "deletions": 11, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8adccb5056152edc4aacf08ce2ed040f076171/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8adccb5056152edc4aacf08ce2ed040f076171/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=7f8adccb5056152edc4aacf08ce2ed040f076171", "patch": "@@ -2055,15 +2055,27 @@ TypeCheckCallExpr::visit (FnType &type)\n {\n   if (call.num_params () != type.num_params ())\n     {\n-      rust_error_at (call.get_locus (),\n-\t\t     \"unexpected number of arguments %lu expected %lu\",\n-\t\t     call.num_params (), type.num_params ());\n-      return;\n+      if (type.is_varadic ())\n+\t{\n+\t  if (call.num_params () < type.num_params ())\n+\t    {\n+\t      rust_error_at (call.get_locus (),\n+\t\t\t     \"unexpected number of arguments %lu expected %lu\",\n+\t\t\t     call.num_params (), type.num_params ());\n+\t      return;\n+\t    }\n+\t}\n+      else\n+\t{\n+\t  rust_error_at (call.get_locus (),\n+\t\t\t \"unexpected number of arguments %lu expected %lu\",\n+\t\t\t call.num_params (), type.num_params ());\n+\t  return;\n+\t}\n     }\n \n   size_t i = 0;\n   call.iterate_params ([&] (HIR::Expr *param) mutable -> bool {\n-    auto fnparam = type.param_at (i);\n     auto argument_expr_tyty = Resolver::TypeCheckExpr::Resolve (param, false);\n     if (argument_expr_tyty == nullptr)\n       {\n@@ -2072,12 +2084,19 @@ TypeCheckCallExpr::visit (FnType &type)\n \treturn false;\n       }\n \n-    auto resolved_argument_type = fnparam.second->unify (argument_expr_tyty);\n-    if (resolved_argument_type == nullptr)\n+    auto resolved_argument_type = argument_expr_tyty;\n+\n+    // it might be a varadic function\n+    if (i < type.num_params ())\n       {\n-\trust_error_at (param->get_locus_slow (),\n-\t\t       \"Type Resolution failure on parameter\");\n-\treturn false;\n+\tauto fnparam = type.param_at (i);\n+\tresolved_argument_type = fnparam.second->unify (argument_expr_tyty);\n+\tif (resolved_argument_type == nullptr)\n+\t  {\n+\t    rust_error_at (param->get_locus_slow (),\n+\t\t\t   \"Type Resolution failure on parameter\");\n+\t    return false;\n+\t  }\n       }\n \n     context->insert_type (param->get_mappings (), resolved_argument_type);\n@@ -2086,7 +2105,7 @@ TypeCheckCallExpr::visit (FnType &type)\n     return true;\n   });\n \n-  if (i != call.num_params ())\n+  if (i < call.num_params ())\n     {\n       rust_error_at (call.get_locus (),\n \t\t     \"unexpected number of arguments %lu expected %lu\", i,"}, {"sha": "336d42b15f9343f09317c99f09afe370c4e56193", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8adccb5056152edc4aacf08ce2ed040f076171/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8adccb5056152edc4aacf08ce2ed040f076171/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=7f8adccb5056152edc4aacf08ce2ed040f076171", "patch": "@@ -973,6 +973,7 @@ class FnType : public BaseType, public SubstitutionRef\n #define FNTYPE_DEFAULT_FLAGS 0x00\n #define FNTYPE_IS_METHOD_FLAG 0x01\n #define FNTYPE_IS_EXTERN_FLAG 0x02\n+#define FNTYPE_IS_VARADIC_FLAG 0X04\n \n   FnType (HirId ref, DefId id, std::string identifier, uint8_t flags,\n \t  std::vector<std::pair<HIR::Pattern *, BaseType *> > params,\n@@ -1031,6 +1032,8 @@ class FnType : public BaseType, public SubstitutionRef\n \n   bool is_extern () const { return (flags & FNTYPE_IS_EXTERN_FLAG) != 0; }\n \n+  bool is_varadic () const { return (flags & FNTYPE_IS_VARADIC_FLAG) != 0; }\n+\n   DefId get_id () const { return id; }\n \n   // get the Self type for the method"}, {"sha": "cc05f3798fac51fadeaac4b0fa276024263c5370", "filename": "gcc/testsuite/rust/execute/torture/helloworld2.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8adccb5056152edc4aacf08ce2ed040f076171/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fhelloworld2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8adccb5056152edc4aacf08ce2ed040f076171/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fhelloworld2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fhelloworld2.rs?ref=7f8adccb5056152edc4aacf08ce2ed040f076171", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-output \"Hello World 123\\n\" }*/\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+fn main() -> i32 {\n+    unsafe {\n+        let a = \"Hello World %i\\n\";\n+        let b = a as *const str;\n+        let c = b as *const i8;\n+\n+        printf(c, 123);\n+    }\n+    0\n+}"}]}