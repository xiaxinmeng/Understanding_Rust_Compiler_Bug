{"sha": "f6e40195ec3d3b402a5f6c58dbf359479bc4cbfa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjZlNDAxOTVlYzNkM2I0MDJhNWY2YzU4ZGJmMzU5NDc5YmM0Y2JmYQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-05-19T09:25:46Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-05-19T09:25:46Z"}, "message": "i386: Add missing vector zero/sign extend expanders [PR92658]\n\n2020-05-19  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/ChangeLog:\n\tPR target/92658\n\t* config/i386/sse.md (<code>v16qiv16hi2): New expander.\n\t(<code>v32qiv32hi2): Ditto.\n\t(<code>v8qiv8hi2): Ditto.\n\t(<code>v16qiv16si2): Ditto.\n\t(<code>v8qiv8si2): Ditto.\n\t(<code>v4qiv4si2): Ditto.\n\t(<code>v16hiv16si2): Ditto.\n\t(<code>v8hiv8si2): Ditto.\n\t(<code>v4hiv4si2): Ditto.\n\t(<code>v8qiv8di2): Ditto.\n\t(<code>v4qiv4di2): Ditto.\n\t(<code>v2qiv2di2): Ditto.\n\t(<code>v8hiv8di2): Ditto.\n\t(<code>v4hiv4di2): Ditto.\n\t(<code>v2hiv2di2): Ditto.\n\t(<code>v8siv8di2): Ditto.\n\t(<code>v4siv4di2): Ditto.\n\t(<code>v2siv2di2): Ditto.\n\ngcc/testsuite/ChangeLog:\n\tPR target/92658\n\t* gcc.target/i386/pr92658-sse4.c: New test.\n\t* gcc.target/i386/pr92658-avx2.c: New test.\n\t* gcc.target/i386/pr92658-avx512bw.c: New test.", "tree": {"sha": "5665277d6e5de7d0d30b9da4e2b35b98703cbe54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5665277d6e5de7d0d30b9da4e2b35b98703cbe54"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6e40195ec3d3b402a5f6c58dbf359479bc4cbfa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6e40195ec3d3b402a5f6c58dbf359479bc4cbfa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6e40195ec3d3b402a5f6c58dbf359479bc4cbfa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6e40195ec3d3b402a5f6c58dbf359479bc4cbfa/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f66f175ff82ffa482950f05372fdca446d5fa8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f66f175ff82ffa482950f05372fdca446d5fa8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f66f175ff82ffa482950f05372fdca446d5fa8e"}], "stats": {"total": 805, "additions": 805, "deletions": 0}, "files": [{"sha": "9bf4361384afcd0266d52395668871fa09921b38", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 185, "deletions": 0, "changes": 185, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6e40195ec3d3b402a5f6c58dbf359479bc4cbfa/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6e40195ec3d3b402a5f6c58dbf359479bc4cbfa/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=f6e40195ec3d3b402a5f6c58dbf359479bc4cbfa", "patch": "@@ -17328,6 +17328,12 @@\n    (set_attr \"prefix\" \"maybe_evex\")\n    (set_attr \"mode\" \"OI\")])\n \n+(define_expand \"<code>v16qiv16hi2\"\n+  [(set (match_operand:V16HI 0 \"register_operand\")\n+\t(any_extend:V16HI\n+\t  (match_operand:V16QI 1 \"nonimmediate_operand\")))]\n+  \"TARGET_AVX2\")\n+\n (define_insn \"avx512bw_<code>v32qiv32hi2<mask_name>\"\n   [(set (match_operand:V32HI 0 \"register_operand\" \"=v\")\n \t(any_extend:V32HI\n@@ -17339,6 +17345,12 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"XI\")])\n \n+(define_expand \"<code>v32qiv32hi2\"\n+  [(set (match_operand:V32HI 0 \"register_operand\")\n+\t(any_extend:V32HI\n+\t  (match_operand:V32QI 1 \"nonimmediate_operand\")))]\n+  \"TARGET_AVX512BW\")\n+\n (define_insn \"sse4_1_<code>v8qiv8hi2<mask_name>\"\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=Yr,*x,v\")\n \t(any_extend:V8HI\n@@ -17388,6 +17400,20 @@\n \t(any_extend:V8HI (match_dup 1)))]\n   \"operands[1] = adjust_address_nv (operands[1], V8QImode, 0);\")\n \n+(define_expand \"<code>v8qiv8hi2\"\n+  [(set (match_operand:V8HI 0 \"register_operand\")\n+\t(any_extend:V8HI\n+\t  (match_operand:V8QI 1 \"nonimmediate_operand\")))]\n+  \"TARGET_SSE4_1\"\n+{\n+  if (!MEM_P (operands[1]))\n+    {\n+      operands[1] = simplify_subreg (V16QImode, operands[1], V8QImode, 0);\n+      emit_insn (gen_sse4_1_<code>v8qiv8hi2 (operands[0], operands[1]));\n+      DONE;\n+    }\n+})\n+\n (define_insn \"<mask_codefor>avx512f_<code>v16qiv16si2<mask_name>\"\n   [(set (match_operand:V16SI 0 \"register_operand\" \"=v\")\n \t(any_extend:V16SI\n@@ -17398,6 +17424,12 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"XI\")])\n \n+(define_expand \"<code>v16qiv16si2\"\n+  [(set (match_operand:V16SI 0 \"register_operand\")\n+\t(any_extend:V16SI\n+\t  (match_operand:V16QI 1 \"nonimmediate_operand\")))]\n+  \"TARGET_AVX512F\")\n+\n (define_insn \"avx2_<code>v8qiv8si2<mask_name>\"\n   [(set (match_operand:V8SI 0 \"register_operand\" \"=v\")\n \t(any_extend:V8SI\n@@ -17445,6 +17477,20 @@\n \t(any_extend:V8SI (match_dup 1)))]\n   \"operands[1] = adjust_address_nv (operands[1], V8QImode, 0);\")\n \n+(define_expand \"<code>v8qiv8si2\"\n+  [(set (match_operand:V8SI 0 \"register_operand\")\n+\t(any_extend:V8SI\n+\t  (match_operand:V8QI 1 \"nonimmediate_operand\")))]\n+  \"TARGET_AVX2\"\n+{\n+  if (!MEM_P (operands[1]))\n+    {\n+      operands[1] = simplify_subreg (V16QImode, operands[1], V8QImode, 0);\n+      emit_insn (gen_avx2_<code>v8qiv8si2 (operands[0], operands[1]));\n+      DONE;\n+    }\n+})\n+\n (define_insn \"sse4_1_<code>v4qiv4si2<mask_name>\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=Yr,*x,v\")\n \t(any_extend:V4SI\n@@ -17494,6 +17540,20 @@\n \t(any_extend:V4SI (match_dup 1)))]\n   \"operands[1] = adjust_address_nv (operands[1], V4QImode, 0);\")\n \n+(define_expand \"<code>v4qiv4si2\"\n+  [(set (match_operand:V4SI 0 \"register_operand\")\n+\t(any_extend:V4SI\n+\t  (match_operand:V4QI 1 \"nonimmediate_operand\")))]\n+  \"TARGET_SSE4_1\"\n+{\n+  if (!MEM_P (operands[1]))\n+    {\n+      operands[1] = simplify_subreg (V16QImode, operands[1], V4QImode, 0);\n+      emit_insn (gen_sse4_1_<code>v4qiv4si2 (operands[0], operands[1]));\n+      DONE;\n+    }\n+})\n+\n (define_insn \"avx512f_<code>v16hiv16si2<mask_name>\"\n   [(set (match_operand:V16SI 0 \"register_operand\" \"=v\")\n \t(any_extend:V16SI\n@@ -17504,6 +17564,12 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"XI\")])\n \n+(define_expand \"<code>v16hiv16si2\"\n+  [(set (match_operand:V16SI 0 \"register_operand\")\n+\t(any_extend:V16SI\n+\t  (match_operand:V16HI 1 \"nonimmediate_operand\")))]\n+  \"TARGET_AVX512F\")\n+\n (define_insn \"avx2_<code>v8hiv8si2<mask_name>\"\n   [(set (match_operand:V8SI 0 \"register_operand\" \"=v\")\n \t(any_extend:V8SI\n@@ -17515,6 +17581,12 @@\n    (set_attr \"prefix\" \"maybe_evex\")\n    (set_attr \"mode\" \"OI\")])\n \n+(define_expand \"<code>v8hiv8si2\"\n+  [(set (match_operand:V8SI 0 \"register_operand\")\n+\t(any_extend:V8SI\n+\t  (match_operand:V8HI 1 \"nonimmediate_operand\")))]\n+  \"TARGET_AVX2\")\n+\n (define_insn \"sse4_1_<code>v4hiv4si2<mask_name>\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=Yr,*x,v\")\n \t(any_extend:V4SI\n@@ -17560,6 +17632,20 @@\n \t(any_extend:V4SI (match_dup 1)))]\n   \"operands[1] = adjust_address_nv (operands[1], V4HImode, 0);\")\n \n+(define_expand \"<code>v4hiv4si2\"\n+  [(set (match_operand:V4SI 0 \"register_operand\")\n+\t(any_extend:V4SI\n+\t  (match_operand:V4HI 1 \"nonimmediate_operand\")))]\n+  \"TARGET_SSE4_1\"\n+{\n+  if (!MEM_P (operands[1]))\n+    {\n+      operands[1] = simplify_subreg (V8HImode, operands[1], V4HImode, 0);\n+      emit_insn (gen_sse4_1_<code>v4hiv4si2 (operands[0], operands[1]));\n+      DONE;\n+    }\n+})\n+\n (define_insn \"avx512f_<code>v8qiv8di2<mask_name>\"\n   [(set (match_operand:V8DI 0 \"register_operand\" \"=v\")\n \t(any_extend:V8DI\n@@ -17604,6 +17690,20 @@\n \t(any_extend:V8DI (match_dup 1)))]\n   \"operands[1] = adjust_address_nv (operands[1], V8QImode, 0);\")\n \n+(define_expand \"<code>v8qiv8di2\"\n+  [(set (match_operand:V8DI 0 \"register_operand\")\n+\t(any_extend:V8DI\n+\t  (match_operand:V8QI 1 \"nonimmediate_operand\")))]\n+  \"TARGET_AVX512F\"\n+{\n+  if (!MEM_P (operands[1]))\n+    {\n+      operands[1] = simplify_subreg (V16QImode, operands[1], V8QImode, 0);\n+      emit_insn (gen_avx512f_<code>v8qiv8di2 (operands[0], operands[1]));\n+      DONE;\n+    }\n+})\n+\n (define_insn \"avx2_<code>v4qiv4di2<mask_name>\"\n   [(set (match_operand:V4DI 0 \"register_operand\" \"=v\")\n \t(any_extend:V4DI\n@@ -17651,6 +17751,20 @@\n \t(any_extend:V4DI (match_dup 1)))]\n   \"operands[1] = adjust_address_nv (operands[1], V4QImode, 0);\")\n \n+(define_expand \"<code>v4qiv4di2\"\n+  [(set (match_operand:V4DI 0 \"register_operand\")\n+\t(any_extend:V4DI\n+\t  (match_operand:V4QI 1 \"nonimmediate_operand\")))]\n+  \"TARGET_AVX2\"\n+{\n+  if (!MEM_P (operands[1]))\n+    {\n+      operands[1] = simplify_subreg (V16QImode, operands[1], V8QImode, 0);\n+      emit_insn (gen_avx2_<code>v4qiv4di2 (operands[0], operands[1]));\n+      DONE;\n+    }\n+})\n+\n (define_insn \"sse4_1_<code>v2qiv2di2<mask_name>\"\n   [(set (match_operand:V2DI 0 \"register_operand\" \"=Yr,*x,v\")\n \t(any_extend:V2DI\n@@ -17665,6 +17779,17 @@\n    (set_attr \"prefix\" \"orig,orig,maybe_evex\")\n    (set_attr \"mode\" \"TI\")])\n \n+(define_expand \"<code>v2qiv2di2\"\n+  [(set (match_operand:V2DI 0 \"register_operand\")\n+\t(any_extend:V2DI\n+\t  (match_operand:V2QI 1 \"register_operand\")))]\n+  \"TARGET_SSE4_1\"\n+{\n+  operands[1] = simplify_subreg (V16QImode, operands[1], V2QImode, 0);\n+  emit_insn (gen_sse4_1_<code>v2qiv2di2 (operands[0], operands[1]));\n+  DONE;\n+})\n+\n (define_insn \"avx512f_<code>v8hiv8di2<mask_name>\"\n   [(set (match_operand:V8DI 0 \"register_operand\" \"=v\")\n \t(any_extend:V8DI\n@@ -17675,6 +17800,12 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"XI\")])\n \n+(define_expand \"<code>v8hiv8di2\"\n+  [(set (match_operand:V8DI 0 \"register_operand\")\n+\t(any_extend:V8DI\n+\t  (match_operand:V8HI 1 \"nonimmediate_operand\")))]\n+  \"TARGET_AVX512F\")\n+\n (define_insn \"avx2_<code>v4hiv4di2<mask_name>\"\n   [(set (match_operand:V4DI 0 \"register_operand\" \"=v\")\n \t(any_extend:V4DI\n@@ -17718,6 +17849,20 @@\n \t(any_extend:V4DI (match_dup 1)))]\n   \"operands[1] = adjust_address_nv (operands[1], V4HImode, 0);\")\n \n+(define_expand \"<code>v4hiv4di2\"\n+  [(set (match_operand:V4DI 0 \"register_operand\")\n+\t(any_extend:V4DI\n+\t  (match_operand:V4HI 1 \"nonimmediate_operand\")))]\n+  \"TARGET_AVX2\"\n+{\n+  if (!MEM_P (operands[1]))\n+    {\n+      operands[1] = simplify_subreg (V8HImode, operands[1], V4HImode, 0);\n+      emit_insn (gen_avx2_<code>v4hiv4di2 (operands[0], operands[1]));\n+      DONE;\n+    }\n+})\n+\n (define_insn \"sse4_1_<code>v2hiv2di2<mask_name>\"\n   [(set (match_operand:V2DI 0 \"register_operand\" \"=Yr,*x,v\")\n \t(any_extend:V2DI\n@@ -17765,6 +17910,20 @@\n \t(any_extend:V2DI (match_dup 1)))]\n   \"operands[1] = adjust_address_nv (operands[1], V2HImode, 0);\")\n \n+(define_expand \"<code>v2hiv2di2\"\n+  [(set (match_operand:V2DI 0 \"register_operand\")\n+\t(any_extend:V2DI\n+\t  (match_operand:V2HI 1 \"nonimmediate_operand\")))]\n+  \"TARGET_SSE4_1\"\n+{\n+  if (!MEM_P (operands[1]))\n+    {\n+      operands[1] = simplify_subreg (V8HImode, operands[1], V2HImode, 0);\n+      emit_insn (gen_sse4_1_<code>v2hiv2di2 (operands[0], operands[1]));\n+      DONE;\n+    }\n+})\n+\n (define_insn \"avx512f_<code>v8siv8di2<mask_name>\"\n   [(set (match_operand:V8DI 0 \"register_operand\" \"=v\")\n \t(any_extend:V8DI\n@@ -17775,6 +17934,12 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"XI\")])\n \n+(define_expand \"<code>v8siv8di2\"\n+  [(set (match_operand:V8DI 0 \"register_operand\" \"=v\")\n+\t(any_extend:V8DI\n+\t  (match_operand:V8SI 1 \"nonimmediate_operand\" \"vm\")))]\n+  \"TARGET_AVX512F\")\n+\n (define_insn \"avx2_<code>v4siv4di2<mask_name>\"\n   [(set (match_operand:V4DI 0 \"register_operand\" \"=v\")\n \t(any_extend:V4DI\n@@ -17786,6 +17951,12 @@\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"OI\")])\n \n+(define_expand \"<code>v4siv4di2\"\n+  [(set (match_operand:V4DI 0 \"register_operand\" \"=v\")\n+\t(any_extend:V4DI\n+\t    (match_operand:V4SI 1 \"nonimmediate_operand\" \"vm\")))]\n+  \"TARGET_AVX2\")\n+\n (define_insn \"sse4_1_<code>v2siv2di2<mask_name>\"\n   [(set (match_operand:V2DI 0 \"register_operand\" \"=Yr,*x,v\")\n \t(any_extend:V2DI\n@@ -17829,6 +18000,20 @@\n \t(any_extend:V2DI (match_dup 1)))]\n   \"operands[1] = adjust_address_nv (operands[1], V2SImode, 0);\")\n \n+(define_expand \"<code>v2siv2di2\"\n+  [(set (match_operand:V2DI 0 \"register_operand\")\n+\t(any_extend:V2DI\n+\t  (match_operand:V2SI 1 \"nonimmediate_operand\")))]\n+  \"TARGET_SSE4_1\"\n+{\n+  if (!MEM_P (operands[1]))\n+    {\n+      operands[1] = simplify_subreg (V4SImode, operands[1], V2SImode, 0);\n+      emit_insn (gen_sse4_1_<code>v2siv2di2 (operands[0], operands[1]));\n+      DONE;\n+    }\n+})\n+\n ;; ptestps/ptestpd are very similar to comiss and ucomiss when\n ;; setting FLAGS_REG. But it is not a really compare instruction.\n (define_insn \"avx_vtest<ssemodesuffix><avxsizesuffix>\""}, {"sha": "21fa3e5530f6d0c3cb5fb5c3d20864c059a76f1a", "filename": "gcc/testsuite/gcc.target/i386/pr92658-avx2.c", "status": "added", "additions": 192, "deletions": 0, "changes": 192, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6e40195ec3d3b402a5f6c58dbf359479bc4cbfa/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92658-avx2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6e40195ec3d3b402a5f6c58dbf359479bc4cbfa/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92658-avx2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92658-avx2.c?ref=f6e40195ec3d3b402a5f6c58dbf359479bc4cbfa", "patch": "@@ -0,0 +1,192 @@\n+/* PR target/92658 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -mavx2\" } */\n+\n+typedef unsigned char v32qi __attribute__((vector_size (32)));\n+typedef unsigned short v16hi __attribute__((vector_size (32)));\n+typedef unsigned int v8si __attribute__((vector_size (32)));\n+typedef unsigned long long v4di __attribute__((vector_size (32)));\n+\n+void\n+foo_u8_u16 (v16hi * dst, v32qi * __restrict src)\n+{\n+  unsigned short tem[16];\n+  tem[0] = (*src)[0];\n+  tem[1] = (*src)[1];\n+  tem[2] = (*src)[2];\n+  tem[3] = (*src)[3];\n+  tem[4] = (*src)[4];\n+  tem[5] = (*src)[5];\n+  tem[6] = (*src)[6];\n+  tem[7] = (*src)[7];\n+  tem[8] = (*src)[8];\n+  tem[9] = (*src)[9];\n+  tem[10] = (*src)[10];\n+  tem[11] = (*src)[11];\n+  tem[12] = (*src)[12];\n+  tem[13] = (*src)[13];\n+  tem[14] = (*src)[14];\n+  tem[15] = (*src)[15];\n+  dst[0] = *(v16hi *) tem;\n+}\n+\n+void\n+bar_u8_u16 (v16hi * dst, v32qi src)\n+{\n+  unsigned short tem[16];\n+  tem[0] = src[0];\n+  tem[1] = src[1];\n+  tem[2] = src[2];\n+  tem[3] = src[3];\n+  tem[4] = src[4];\n+  tem[5] = src[5];\n+  tem[6] = src[6];\n+  tem[7] = src[7];\n+  tem[8] = src[8];\n+  tem[9] = src[9];\n+  tem[10] = src[10];\n+  tem[11] = src[11];\n+  tem[12] = src[12];\n+  tem[13] = src[13];\n+  tem[14] = src[14];\n+  tem[15] = src[15];\n+  dst[0] = *(v16hi *) tem;\n+}\n+\n+/* { dg-final { scan-assembler-times \"pmovzxbw\" 2 } } */\n+\n+void\n+foo_u8_u32 (v8si * dst, v32qi * __restrict src)\n+{\n+  unsigned int tem[8];\n+  tem[0] = (*src)[0];\n+  tem[1] = (*src)[1];\n+  tem[2] = (*src)[2];\n+  tem[3] = (*src)[3];\n+  tem[4] = (*src)[4];\n+  tem[5] = (*src)[5];\n+  tem[6] = (*src)[6];\n+  tem[7] = (*src)[7];\n+  dst[0] = *(v8si *) tem;\n+}\n+\n+void\n+bar_u8_u32 (v8si * dst, v32qi src)\n+{\n+  unsigned int tem[8];\n+  tem[0] = src[0];\n+  tem[1] = src[1];\n+  tem[2] = src[2];\n+  tem[3] = src[3];\n+  tem[4] = src[4];\n+  tem[5] = src[5];\n+  tem[6] = src[6];\n+  tem[7] = src[7];\n+  dst[0] = *(v8si *) tem;\n+}\n+\n+/* { dg-final { scan-assembler-times \"pmovzxbd\" 2 } } */\n+\n+void\n+foo_u8_u64 (v4di * dst, v32qi * __restrict src)\n+{\n+  unsigned long long tem[4];\n+  tem[0] = (*src)[0];\n+  tem[1] = (*src)[1];\n+  tem[2] = (*src)[2];\n+  tem[3] = (*src)[3];\n+  dst[0] = *(v4di *) tem;\n+}\n+\n+void\n+bar_u8_u64 (v4di * dst, v32qi src)\n+{\n+  unsigned long long tem[4];\n+  tem[0] = src[0];\n+  tem[1] = src[1];\n+  tem[2] = src[2];\n+  tem[3] = src[3];\n+  dst[0] = *(v4di *) tem;\n+}\n+\n+/* { dg-final { scan-assembler-times \"pmovzxbq\" 2 { xfail *-*-* } } } */\n+\n+void\n+foo_u16_u32 (v8si * dst, v16hi * __restrict src)\n+{\n+  unsigned int tem[8];\n+  tem[0] = (*src)[0];\n+  tem[1] = (*src)[1];\n+  tem[2] = (*src)[2];\n+  tem[3] = (*src)[3];\n+  tem[4] = (*src)[4];\n+  tem[5] = (*src)[5];\n+  tem[6] = (*src)[6];\n+  tem[7] = (*src)[7];\n+  dst[0] = *(v8si *) tem;\n+}\n+\n+void\n+bar_u16_u32 (v8si * dst, v16hi src)\n+{\n+  unsigned int tem[8];\n+  tem[0] = src[0];\n+  tem[1] = src[1];\n+  tem[2] = src[2];\n+  tem[3] = src[3];\n+  tem[4] = src[4];\n+  tem[5] = src[5];\n+  tem[6] = src[6];\n+  tem[7] = src[7];\n+  dst[0] = *(v8si *) tem;\n+}\n+\n+/* { dg-final { scan-assembler-times \"pmovzxwd\" 2 } } */\n+\n+void\n+foo_u16_u64 (v4di * dst, v16hi * __restrict src)\n+{\n+  unsigned long long tem[4];\n+  tem[0] = (*src)[0];\n+  tem[1] = (*src)[1];\n+  tem[2] = (*src)[2];\n+  tem[3] = (*src)[3];\n+  dst[0] = *(v4di *) tem;\n+}\n+\n+void\n+bar_u16_u64 (v4di * dst, v16hi src)\n+{\n+  unsigned long long tem[4];\n+  tem[0] = src[0];\n+  tem[1] = src[1];\n+  tem[2] = src[2];\n+  tem[3] = src[3];\n+  dst[0] = *(v4di *) tem;\n+}\n+\n+/* { dg-final { scan-assembler-times \"pmovzxwq\" 2 } } */\n+\n+void\n+foo_u32_u64 (v4di * dst, v8si * __restrict src)\n+{\n+  unsigned long long tem[4];\n+  tem[0] = (*src)[0];\n+  tem[1] = (*src)[1];\n+  tem[2] = (*src)[2];\n+  tem[3] = (*src)[3];\n+  dst[0] = *(v4di *) tem;\n+}\n+\n+void\n+bar_u32_u64 (v4di * dst, v8si src)\n+{\n+  unsigned long long tem[4];\n+  tem[0] = src[0];\n+  tem[1] = src[1];\n+  tem[2] = src[2];\n+  tem[3] = src[3];\n+  dst[0] = *(v4di *) tem;\n+}\n+\n+/* { dg-final { scan-assembler-times \"pmovzxdq\" 2 } } */"}, {"sha": "b1d54d24a81cebf26566a9599d359bdf495e9df5", "filename": "gcc/testsuite/gcc.target/i386/pr92658-avx512bw.c", "status": "added", "additions": 280, "deletions": 0, "changes": 280, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6e40195ec3d3b402a5f6c58dbf359479bc4cbfa/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92658-avx512bw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6e40195ec3d3b402a5f6c58dbf359479bc4cbfa/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92658-avx512bw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92658-avx512bw.c?ref=f6e40195ec3d3b402a5f6c58dbf359479bc4cbfa", "patch": "@@ -0,0 +1,280 @@\n+/* PR target/92658 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -mavx512bw\" } */\n+\n+typedef unsigned char v64qi __attribute__((vector_size (64)));\n+typedef unsigned short v32hi __attribute__((vector_size (64)));\n+typedef unsigned int v16si __attribute__((vector_size (64)));\n+typedef unsigned long long v8di __attribute__((vector_size (64)));\n+\n+void\n+foo_u8_u16 (v32hi * dst, v64qi * __restrict src)\n+{\n+  unsigned short tem[32];\n+  tem[0] = (*src)[0];\n+  tem[1] = (*src)[1];\n+  tem[2] = (*src)[2];\n+  tem[3] = (*src)[3];\n+  tem[4] = (*src)[4];\n+  tem[5] = (*src)[5];\n+  tem[6] = (*src)[6];\n+  tem[7] = (*src)[7];\n+  tem[8] = (*src)[8];\n+  tem[9] = (*src)[9];\n+  tem[10] = (*src)[10];\n+  tem[11] = (*src)[11];\n+  tem[12] = (*src)[12];\n+  tem[13] = (*src)[13];\n+  tem[14] = (*src)[14];\n+  tem[15] = (*src)[15];\n+  tem[16] = (*src)[16];\n+  tem[17] = (*src)[17];\n+  tem[18] = (*src)[18];\n+  tem[19] = (*src)[19];\n+  tem[20] = (*src)[20];\n+  tem[21] = (*src)[21];\n+  tem[22] = (*src)[22];\n+  tem[23] = (*src)[23];\n+  tem[24] = (*src)[24];\n+  tem[25] = (*src)[25];\n+  tem[26] = (*src)[26];\n+  tem[27] = (*src)[27];\n+  tem[28] = (*src)[28];\n+  tem[29] = (*src)[29];\n+  tem[30] = (*src)[30];\n+  tem[31] = (*src)[31];\n+  dst[0] = *(v32hi *) tem;\n+}\n+\n+void\n+bar_u8_u16 (v32hi * dst, v64qi src)\n+{\n+  unsigned short tem[32];\n+  tem[0] = src[0];\n+  tem[1] = src[1];\n+  tem[2] = src[2];\n+  tem[3] = src[3];\n+  tem[4] = src[4];\n+  tem[5] = src[5];\n+  tem[6] = src[6];\n+  tem[7] = src[7];\n+  tem[8] = src[8];\n+  tem[9] = src[9];\n+  tem[10] = src[10];\n+  tem[11] = src[11];\n+  tem[12] = src[12];\n+  tem[13] = src[13];\n+  tem[14] = src[14];\n+  tem[15] = src[15];\n+  tem[16] = src[16];\n+  tem[17] = src[17];\n+  tem[18] = src[18];\n+  tem[19] = src[19];\n+  tem[20] = src[20];\n+  tem[21] = src[21];\n+  tem[22] = src[22];\n+  tem[23] = src[23];\n+  tem[24] = src[24];\n+  tem[25] = src[25];\n+  tem[26] = src[26];\n+  tem[27] = src[27];\n+  tem[28] = src[28];\n+  tem[29] = src[29];\n+  tem[30] = src[30];\n+  tem[31] = src[31];\n+  dst[0] = *(v32hi *) tem;\n+}\n+\n+/* { dg-final { scan-assembler-times \"pmovzxbw\" 2 } } */\n+\n+void\n+foo_u8_u32 (v16si * dst, v64qi * __restrict src)\n+{\n+  unsigned int tem[16];\n+  tem[0] = (*src)[0];\n+  tem[1] = (*src)[1];\n+  tem[2] = (*src)[2];\n+  tem[3] = (*src)[3];\n+  tem[4] = (*src)[4];\n+  tem[5] = (*src)[5];\n+  tem[6] = (*src)[6];\n+  tem[7] = (*src)[7];\n+  tem[8] = (*src)[8];\n+  tem[9] = (*src)[9];\n+  tem[10] = (*src)[10];\n+  tem[11] = (*src)[11];\n+  tem[12] = (*src)[12];\n+  tem[13] = (*src)[13];\n+  tem[14] = (*src)[14];\n+  tem[15] = (*src)[15];\n+  dst[0] = *(v16si *) tem;\n+}\n+\n+void\n+bar_u8_u32 (v16si * dst, v64qi src)\n+{\n+  unsigned int tem[16];\n+  tem[0] = src[0];\n+  tem[1] = src[1];\n+  tem[2] = src[2];\n+  tem[3] = src[3];\n+  tem[4] = src[4];\n+  tem[5] = src[5];\n+  tem[6] = src[6];\n+  tem[7] = src[7];\n+  tem[8] = src[8];\n+  tem[9] = src[9];\n+  tem[10] = src[10];\n+  tem[11] = src[11];\n+  tem[12] = src[12];\n+  tem[13] = src[13];\n+  tem[14] = src[14];\n+  tem[15] = src[15];\n+  dst[0] = *(v16si *) tem;\n+}\n+\n+/* { dg-final { scan-assembler-times \"pmovzxbd\" 2 } } */\n+\n+void\n+foo_u8_u64 (v8di * dst, v64qi * __restrict src)\n+{\n+  unsigned long long tem[8];\n+  tem[0] = (*src)[0];\n+  tem[1] = (*src)[1];\n+  tem[2] = (*src)[2];\n+  tem[3] = (*src)[3];\n+  tem[4] = (*src)[4];\n+  tem[5] = (*src)[5];\n+  tem[6] = (*src)[6];\n+  tem[7] = (*src)[7];\n+  dst[0] = *(v8di *) tem;\n+}\n+\n+void\n+bar_u8_u64 (v8di * dst, v64qi src)\n+{\n+  unsigned long long tem[8];\n+  tem[0] = src[0];\n+  tem[1] = src[1];\n+  tem[2] = src[2];\n+  tem[3] = src[3];\n+  tem[4] = src[4];\n+  tem[5] = src[5];\n+  tem[6] = src[6];\n+  tem[7] = src[7];\n+  dst[0] = *(v8di *) tem;\n+}\n+\n+/* { dg-final { scan-assembler-times \"pmovzxbq\" 2 } } */\n+\n+void\n+foo_u16_u32 (v16si * dst, v32hi * __restrict src)\n+{\n+  unsigned int tem[16];\n+  tem[0] = (*src)[0];\n+  tem[1] = (*src)[1];\n+  tem[2] = (*src)[2];\n+  tem[3] = (*src)[3];\n+  tem[4] = (*src)[4];\n+  tem[5] = (*src)[5];\n+  tem[6] = (*src)[6];\n+  tem[7] = (*src)[7];\n+  tem[8] = (*src)[8];\n+  tem[9] = (*src)[9];\n+  tem[10] = (*src)[10];\n+  tem[11] = (*src)[11];\n+  tem[12] = (*src)[12];\n+  tem[13] = (*src)[13];\n+  tem[14] = (*src)[14];\n+  tem[15] = (*src)[15];\n+  dst[0] = *(v16si *) tem;\n+}\n+\n+void\n+bar_u16_u32 (v16si * dst, v32hi src)\n+{\n+  unsigned int tem[16];\n+  tem[0] = src[0];\n+  tem[1] = src[1];\n+  tem[2] = src[2];\n+  tem[3] = src[3];\n+  tem[4] = src[4];\n+  tem[5] = src[5];\n+  tem[6] = src[6];\n+  tem[7] = src[7];\n+  tem[8] = src[8];\n+  tem[9] = src[9];\n+  tem[10] = src[10];\n+  tem[11] = src[11];\n+  tem[12] = src[12];\n+  tem[13] = src[13];\n+  tem[14] = src[14];\n+  tem[15] = src[15];\n+  dst[0] = *(v16si *) tem;\n+}\n+\n+/* { dg-final { scan-assembler-times \"pmovzxwd\" 2 } } */\n+\n+void\n+foo_u16_u64 (v8di * dst, v32hi * __restrict src)\n+{\n+  unsigned long long tem[8];\n+  tem[0] = (*src)[0];\n+  tem[1] = (*src)[1];\n+  tem[2] = (*src)[2];\n+  tem[3] = (*src)[3];\n+  tem[4] = (*src)[4];\n+  tem[5] = (*src)[5];\n+  tem[6] = (*src)[6];\n+  tem[7] = (*src)[7];\n+  dst[0] = *(v8di *) tem;\n+}\n+\n+void\n+bar_u16_u64 (v8di * dst, v32hi src)\n+{\n+  unsigned long long tem[8];\n+  tem[0] = src[0];\n+  tem[1] = src[1];\n+  tem[2] = src[2];\n+  tem[3] = src[3];\n+  tem[4] = src[4];\n+  tem[5] = src[5];\n+  tem[6] = src[6];\n+  tem[7] = src[7];\n+  dst[0] = *(v8di *) tem;\n+}\n+\n+/* { dg-final { scan-assembler-times \"pmovzxwq\" 2 } } */\n+\n+void\n+foo_u32_u64 (v8di * dst, v16si * __restrict src)\n+{\n+  unsigned long long tem[8];\n+  tem[0] = (*src)[0];\n+  tem[1] = (*src)[1];\n+  tem[2] = (*src)[2];\n+  tem[3] = (*src)[3];\n+  tem[4] = (*src)[4];\n+  tem[5] = (*src)[5];\n+  tem[6] = (*src)[6];\n+  tem[7] = (*src)[7];\n+  dst[0] = *(v8di *) tem;\n+}\n+\n+void\n+bar_u32_u64 (v8di * dst, v16si src)\n+{\n+  unsigned long long tem[8];\n+  tem[0] = src[0];\n+  tem[1] = src[1];\n+  tem[2] = src[2];\n+  tem[3] = src[3];\n+  tem[4] = src[4];\n+  tem[5] = src[5];\n+  tem[6] = src[6];\n+  tem[7] = src[7];\n+  dst[0] = *(v8di *) tem;\n+}\n+\n+/* { dg-final { scan-assembler-times \"pmovzxdq\" 2 } } */"}, {"sha": "e4626292e959867bce5766c5dd53467ddebf621b", "filename": "gcc/testsuite/gcc.target/i386/pr92658-sse4.c", "status": "added", "additions": 148, "deletions": 0, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6e40195ec3d3b402a5f6c58dbf359479bc4cbfa/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92658-sse4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6e40195ec3d3b402a5f6c58dbf359479bc4cbfa/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92658-sse4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92658-sse4.c?ref=f6e40195ec3d3b402a5f6c58dbf359479bc4cbfa", "patch": "@@ -0,0 +1,148 @@\n+/* PR target/92658 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -msse4.1\" } */\n+\n+typedef unsigned char v16qi __attribute__((vector_size (16)));\n+typedef unsigned short v8hi __attribute__((vector_size (16)));\n+typedef unsigned int v4si __attribute__((vector_size (16)));\n+typedef unsigned long long v2di __attribute__((vector_size (16)));\n+\n+void\n+foo_u8_u16 (v8hi * dst, v16qi * __restrict src)\n+{\n+  unsigned short tem[8];\n+  tem[0] = (*src)[0];\n+  tem[1] = (*src)[1];\n+  tem[2] = (*src)[2];\n+  tem[3] = (*src)[3];\n+  tem[4] = (*src)[4];\n+  tem[5] = (*src)[5];\n+  tem[6] = (*src)[6];\n+  tem[7] = (*src)[7];\n+  dst[0] = *(v8hi *) tem;\n+}\n+\n+void\n+bar_u8_u16 (v8hi * dst, v16qi src)\n+{\n+  unsigned short tem[8];\n+  tem[0] = src[0];\n+  tem[1] = src[1];\n+  tem[2] = src[2];\n+  tem[3] = src[3];\n+  tem[4] = src[4];\n+  tem[5] = src[5];\n+  tem[6] = src[6];\n+  tem[7] = src[7];\n+  dst[0] = *(v8hi *) tem;\n+}\n+\n+/* { dg-final { scan-assembler-times \"pmovzxbw\" 2 } } */\n+\n+void\n+foo_u8_u32 (v4si * dst, v16qi * __restrict src)\n+{\n+  unsigned int tem[4];\n+  tem[0] = (*src)[0];\n+  tem[1] = (*src)[1];\n+  tem[2] = (*src)[2];\n+  tem[3] = (*src)[3];\n+  dst[0] = *(v4si *) tem;\n+}\n+\n+void\n+bar_u8_u32 (v4si * dst, v16qi src)\n+{\n+  unsigned int tem[4];\n+  tem[0] = src[0];\n+  tem[1] = src[1];\n+  tem[2] = src[2];\n+  tem[3] = src[3];\n+  dst[0] = *(v4si *) tem;\n+}\n+\n+/* { dg-final { scan-assembler-times \"pmovzxbd\" 2 { xfail *-*-* } } } */\n+\n+void\n+foo_u8_u64 (v2di * dst, v16qi * __restrict src)\n+{\n+  unsigned long long tem[2];\n+  tem[0] = (*src)[0];\n+  tem[1] = (*src)[1];\n+  dst[0] = *(v2di *) tem;\n+}\n+\n+void\n+bar_u8_u64 (v2di * dst, v16qi src)\n+{\n+  unsigned long long tem[2];\n+  tem[0] = src[0];\n+  tem[1] = src[1];\n+  dst[0] = *(v2di *) tem;\n+}\n+\n+/* { dg-final { scan-assembler-times \"pmovzxbq\" 2 { xfail *-*-* } } } */\n+\n+void\n+foo_u16_u32 (v4si * dst, v8hi * __restrict src)\n+{\n+  unsigned int tem[4];\n+  tem[0] = (*src)[0];\n+  tem[1] = (*src)[1];\n+  tem[2] = (*src)[2];\n+  tem[3] = (*src)[3];\n+  dst[0] = *(v4si *) tem;\n+}\n+\n+void\n+bar_u16_u32 (v4si * dst, v8hi src)\n+{\n+  unsigned int tem[4];\n+  tem[0] = src[0];\n+  tem[1] = src[1];\n+  tem[2] = src[2];\n+  tem[3] = src[3];\n+  dst[0] = *(v4si *) tem;\n+}\n+\n+/* { dg-final { scan-assembler-times \"pmovzxwd\" 2 } } */\n+\n+void\n+foo_u16_u64 (v2di * dst, v8hi * __restrict src)\n+{\n+  unsigned long long tem[2];\n+  tem[0] = (*src)[0];\n+  tem[1] = (*src)[1];\n+  dst[0] = *(v2di *) tem;\n+}\n+\n+void\n+bar_u16_u64 (v2di * dst, v8hi src)\n+{\n+  unsigned long long tem[2];\n+  tem[0] = src[0];\n+  tem[1] = src[1];\n+  dst[0] = *(v2di *) tem;\n+}\n+\n+/* { dg-final { scan-assembler-times \"pmovzxwq\" 2 { xfail *-*-* } } } */\n+\n+void\n+foo_u32_u64 (v2di * dst, v4si * __restrict src)\n+{\n+  unsigned long long tem[2];\n+  tem[0] = (*src)[0];\n+  tem[1] = (*src)[1];\n+  dst[0] = *(v2di *) tem;\n+}\n+\n+void\n+bar_u32_u64 (v2di * dst, v4si src)\n+{\n+  unsigned long long tem[2];\n+  tem[0] = src[0];\n+  tem[1] = src[1];\n+  dst[0] = *(v2di *) tem;\n+}\n+\n+/* { dg-final { scan-assembler-times \"pmovzxdq\" 2 } } */"}]}