{"sha": "8eebb25825ea745f7be571b3953c3dec374aa5a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGVlYmIyNTgyNWVhNzQ1ZjdiZTU3MWIzOTUzYzNkZWMzNzRhYTVhOQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-05-15T02:18:01Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-05-15T02:18:01Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r983", "tree": {"sha": "03d17a430e149f938c2de5b9d78dca48a4d18c56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03d17a430e149f938c2de5b9d78dca48a4d18c56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8eebb25825ea745f7be571b3953c3dec374aa5a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8eebb25825ea745f7be571b3953c3dec374aa5a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8eebb25825ea745f7be571b3953c3dec374aa5a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8eebb25825ea745f7be571b3953c3dec374aa5a9/comments", "author": null, "committer": null, "parents": [{"sha": "648ebe7bd0317b3615835d7733c2f637a5a065d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/648ebe7bd0317b3615835d7733c2f637a5a065d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/648ebe7bd0317b3615835d7733c2f637a5a065d1"}], "stats": {"total": 79, "additions": 62, "deletions": 17}, "files": [{"sha": "48e9b41546655dd87234f2f6296b3ef36b5252dc", "filename": "gcc/c-decl.c", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eebb25825ea745f7be571b3953c3dec374aa5a9/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eebb25825ea745f7be571b3953c3dec374aa5a9/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=8eebb25825ea745f7be571b3953c3dec374aa5a9", "patch": "@@ -1324,10 +1324,11 @@ duplicate_decls (newdecl, olddecl)\n \t      warning_with_decl (olddecl, \"non-prototype definition here\");\n \t    }\n \t}\n-      /* Warn if function is now inline\n-\t but was previously declared not inline and has been called.  */\n+      /* Warn about mismatches in various flags.  */\n       else\n \t{\n+\t  /* Warn if function is now inline\n+\t     but was previously declared not inline and has been called.  */\n \t  if (TREE_CODE (olddecl) == FUNCTION_DECL\n \t      && ! TREE_INLINE (olddecl) && TREE_INLINE (newdecl)\n \t      && TREE_USED (olddecl))\n@@ -1345,8 +1346,10 @@ duplicate_decls (newdecl, olddecl)\n \t      && !TREE_PUBLIC (newdecl))\n \t    warning_with_decl (newdecl, \"static declaration for `%s' follows non-static\");\n \n-\t  /* These bits are logically part of the type.  */\n-\t  if (pedantic\n+\t  /* These bits are logically part of the type, for variables.\n+\t     But not for functions\n+\t     (where qualifiers are not valid ANSI anyway).  */\n+\t  if (pedantic && TREE_CODE (olddecl) != FUNCTION_DECL\n \t      && (TREE_READONLY (newdecl) != TREE_READONLY (olddecl)\n \t\t  || TREE_THIS_VOLATILE (newdecl) != TREE_THIS_VOLATILE (olddecl)))\n \t    pedwarn_with_decl (newdecl, \"type qualifiers for `%s' conflict with previous decl\");\n@@ -3885,9 +3888,20 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \tDECL_ARG_TYPE (decl) = type;\n \tif (type == float_type_node)\n \t  DECL_ARG_TYPE (decl) = double_type_node;\n-\telse if (TREE_CODE (type) == INTEGER_TYPE\n-\t\t && TYPE_PRECISION (type) < TYPE_PRECISION (integer_type_node))\n-\t  DECL_ARG_TYPE (decl) = integer_type_node;\n+\t/* Don't use TYPE_PREISION to decide whether to promote,\n+\t   because we should convert short if it's the same size as int,\n+\t   but we should not convert long if it's the same size as int.  */\n+\telse if (type == char_type_node || type == signed_char_type_node\n+\t\t || type == unsigned_char_type_node\n+\t\t || type == short_integer_type_node\n+\t\t || type == short_unsigned_type_node)\n+\t  {\n+\t    if (TYPE_PRECISION (type) == TYPE_PRECISION (integer_type_node)\n+\t\t&& TREE_UNSIGNED (type))\n+\t      DECL_ARG_TYPE (decl) = unsigned_type_node;\n+\t    else\n+\t      DECL_ARG_TYPE (decl) = integer_type_node;\n+\t  }\n \n \tDECL_ARG_TYPE_AS_WRITTEN (decl) = type_as_written;\n       }"}, {"sha": "aeab0faa56b61edd15b3a4f53040f35d4f8cd1db", "filename": "gcc/gcc.c", "status": "modified", "additions": 41, "deletions": 10, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eebb25825ea745f7be571b3953c3dec374aa5a9/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eebb25825ea745f7be571b3953c3dec374aa5a9/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=8eebb25825ea745f7be571b3953c3dec374aa5a9", "patch": "@@ -206,6 +206,7 @@ or with constant text in a single argument.\n  %P\tlike %p, but puts `__' before and after the name of each macro.\n \t(Except macros that already have __.)\n \tThis is for ANSI C.\n+ %I\tSubstitute a -iprefix option made from GCC_EXEC_PREFIX.\n  %s     current argument is the name of a library or startup file of some sort.\n         Search for that file in a standard list of directories\n \tand substitute the full name found.\n@@ -400,7 +401,7 @@ static struct compiler default_compilers[] =\n {\n   {\".c\", \"@c\"},\n   {\"@c\",\n-   \"cpp -lang-c %{nostdinc*} %{C} %{v} %{A*} %{D*} %{U*} %{I*} %{i*} %{P}\\\n+   \"cpp -lang-c %{nostdinc*} %{C} %{v} %{A*} %{D*} %{U*} %{I*} %{i*} %{P} %I\\\n \t%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n \t%{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d}\\\n         -undef -D__GNUC__=2 %{ansi:-trigraphs -$ -D__STRICT_ANSI__}\\\n@@ -420,7 +421,7 @@ static struct compiler default_compilers[] =\n \t\t      %{c:%W{o*}%{!o*:-o %w%b.o}}%{!c:-o %d%w%b.o}\\\n                       %{!pipe:%g.s} %A\\n }}}}\"},\n   {\"-\",\n-   \"%{E:cpp -lang-c %{nostdinc*} %{C} %{v} %{A*} %{D*} %{U*} %{I*} %{i*} %{P}\\\n+   \"%{E:cpp -lang-c %{nostdinc*} %{C} %{v} %{A*} %{D*} %{U*} %{I*} %{i*} %{P} %I\\\n \t%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n \t%{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d}\\\n         -undef -D__GNUC__=2 %{ansi:-trigraphs -$ -D__STRICT_ANSI__}\\\n@@ -432,7 +433,7 @@ static struct compiler default_compilers[] =\n     %{!E:%e-E required when input is from standard input}\"},\n   {\".m\", \"@objective-c\"},\n   {\"@objective-c\",\n-   \"cpp -lang-objc %{nostdinc*} %{C} %{v} %{A*} %{D*} %{U*} %{I*} %{i*} %{P}\\\n+   \"cpp -lang-objc %{nostdinc*} %{C} %{v} %{A*} %{D*} %{U*} %{I*} %{i*} %{P} %I\\\n \t%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n \t%{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d}\\\n         -undef -D__OBJC__ -D__GNUC__=2 %{ansi:-trigraphs -$ -D__STRICT_ANSI__}\\\n@@ -455,7 +456,7 @@ static struct compiler default_compilers[] =\n   {\".h\", \"@c-header\"},\n   {\"@c-header\",\n    \"%{!E:%eCompilation of header file requested} \\\n-    cpp %{nostdinc*} %{C} %{v} %{A*} %{D*} %{U*} %{I*} %{i*} %{P}\\\n+    cpp %{nostdinc*} %{C} %{v} %{A*} %{D*} %{U*} %{I*} %{i*} %{P} %I\\\n \t%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n \t %{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d} \\\n         -undef -D__GNUC__=2 %{ansi:-trigraphs -$ -D__STRICT_ANSI__}\\\n@@ -468,7 +469,7 @@ static struct compiler default_compilers[] =\n   {\".cxx\", \"@c++\"},\n   {\".C\", \"@c++\"},\n   {\"@c++\",\n-   \"cpp -lang-c++ %{nostdinc*} %{C} %{v} %{A*} %{D*} %{U*} %{I*} %{i*} %{P}\\\n+   \"cpp -lang-c++ %{nostdinc*} %{C} %{v} %{A*} %{D*} %{U*} %{I*} %{i*} %{P} %I\\\n \t%{C:%{!E:%eGNU C++ does not support -C without using -E}}\\\n \t%{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d} \\\n \t-undef -D__GNUC__=2 -D__GNUG__=2 -D__cplusplus \\\n@@ -514,7 +515,7 @@ static struct compiler default_compilers[] =\n             %{c:%W{o*}%{!o*:-o %w%b.o}}%{!c:-o %d%w%b.o} %i %A\\n }\"},\n   {\".S\", \"@assembler-with-cpp\"},\n   {\"@assembler-with-cpp\",\n-   \"cpp -lang-asm %{nostdinc*} %{C} %{v} %{A*} %{D*} %{U*} %{I*} %{i*} %{P}\\\n+   \"cpp -lang-asm %{nostdinc*} %{C} %{v} %{A*} %{D*} %{U*} %{I*} %{i*} %{P} %I\\\n \t%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n \t%{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d} %{trigraphs} \\\n         -undef -$ %{!undef:%p %P} -D__ASSEMBLER__ \\\n@@ -829,6 +830,10 @@ static struct path_prefix library_prefix = { 0, 0, \"libraryfile\" };\n \n static char *machine_suffix = 0;\n \n+/* Adjusted value of GCC_EXEC_PREFIX envvar.  */\n+\n+static char *gcc_exec_prefix;\n+\n /* Default prefixes to attach to command names.  */\n \n #ifdef CROSS_COMPILE  /* Don't use these prefixes for a cross compiler.  */\n@@ -1682,17 +1687,18 @@ process_command (argc, argv)\n   char *spec_lang = 0;\n   int last_language_n_infiles;\n \n+  gcc_exec_prefix = getenv (\"GCC_EXEC_PREFIX\");\n+\n   n_switches = 0;\n   n_infiles = 0;\n   spec_version = version_string;\n \n   /* Set up the default search paths.  */\n \n-  temp = getenv (\"GCC_EXEC_PREFIX\");\n-  if (temp)\n+  if (gcc_exec_prefix)\n     {\n-      add_prefix (&exec_prefix, temp, 0, 0, 0);\n-      add_prefix (&startfile_prefix, temp, 0, 0, 0);\n+      add_prefix (&exec_prefix, gcc_exec_prefix, 0, 0, 0);\n+      add_prefix (&startfile_prefix, gcc_exec_prefix, 0, 0, 0);\n     }\n \n   /* COMPILER_PATH and LIBRARY_PATH have values\n@@ -1902,6 +1908,7 @@ process_command (argc, argv)\n \t      if (!strcmp (p, \"save-temps\"))\n \t\t{\n \t\t  save_temps_flag = 1;\n+\t\t  n_switches++;\n \t\t  break;\n \t\t}\n \t    default:\n@@ -2024,6 +2031,19 @@ process_command (argc, argv)\n \n   switches[n_switches].part1 = 0;\n   infiles[n_infiles].name = 0;\n+\n+  /* If we have a GCC_EXEC_PREFIX envvar, modify it for cpp's sake.  */\n+  if (gcc_exec_prefix)\n+    {\n+      temp = (char *) xmalloc (strlen (gcc_exec_prefix) + strlen (spec_version)\n+\t\t\t       + strlen (spec_machine) + 3);\n+      strcpy (temp, gcc_exec_prefix);\n+      strcat (temp, spec_version);\n+      strcat (temp, \"/\");\n+      strcat (temp, spec_machine);\n+      strcat (temp, \"/\");\n+      gcc_exec_prefix = temp;\n+    }\n }\n \f\n /* Process a spec string, accumulating and running commands.  */\n@@ -2323,6 +2343,17 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \t    arg_going = 1;\n \t    break;\n \n+\t  case 'I':\n+\t    if (gcc_exec_prefix)\n+\t      {\n+\t\tdo_spec_1 (\"-imacros\", 1, 0);\n+\t\t/* Make this a separate argument.  */\n+\t\tdo_spec_1 (\" \", 0, 0);\n+\t\tdo_spec_1 (gcc_exec_prefix, 1, 0);\n+\t\tdo_spec_1 (\" \", 0, 0);\n+\t      }\n+\t    break;\n+\n \t  case 'o':\n \t    {\n \t      register int f;"}]}