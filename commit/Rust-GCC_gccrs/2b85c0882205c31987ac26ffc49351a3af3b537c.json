{"sha": "2b85c0882205c31987ac26ffc49351a3af3b537c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmI4NWMwODgyMjA1YzMxOTg3YWMyNmZmYzQ5MzUxYTNhZjNiNTM3Yw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-01-22T11:38:12Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-01-22T11:38:12Z"}, "message": "tree-optimization/93381 fix integer offsetting in points-to analysis\n\nWe were incorrectly assuming a merge operation is conservative enough\nfor not explicitely handled operations but we also need to consider\noffsetting within fields when field-sensitive analysis applies.\n\n2020-01-22  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/93381\n\t* tree-ssa-structalias.c (find_func_aliases): Assume offsetting\n\tthroughout, handle all conversions the same.\n\n\t* gcc.dg/torture/pr93381.c: New testcase.", "tree": {"sha": "3e990b8c6ea83b58521a2877b35fb9e665f82f7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e990b8c6ea83b58521a2877b35fb9e665f82f7e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b85c0882205c31987ac26ffc49351a3af3b537c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b85c0882205c31987ac26ffc49351a3af3b537c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b85c0882205c31987ac26ffc49351a3af3b537c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b85c0882205c31987ac26ffc49351a3af3b537c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d80f0a8dc9c2e5886bb79bddee2674e1d3f9d105", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d80f0a8dc9c2e5886bb79bddee2674e1d3f9d105", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d80f0a8dc9c2e5886bb79bddee2674e1d3f9d105"}], "stats": {"total": 53, "additions": 46, "deletions": 7}, "files": [{"sha": "2f229b92d7ae695afe01e6576b3affa21fe2e8fe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b85c0882205c31987ac26ffc49351a3af3b537c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b85c0882205c31987ac26ffc49351a3af3b537c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2b85c0882205c31987ac26ffc49351a3af3b537c", "patch": "@@ -1,3 +1,9 @@\n+2020-01-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/93381\n+\t* tree-ssa-structalias.c (find_func_aliases): Assume offsetting\n+\tthroughout, handle all conversions the same.\n+\n 2020-01-22  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/93335"}, {"sha": "a1828a14f10f4390f57afdb02501fb419d182b58", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b85c0882205c31987ac26ffc49351a3af3b537c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b85c0882205c31987ac26ffc49351a3af3b537c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2b85c0882205c31987ac26ffc49351a3af3b537c", "patch": "@@ -1,3 +1,8 @@\n+2020-01-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/93381\n+\t* gcc.dg/torture/pr93381.c: New testcase.\n+\n 2020-01-22  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/93335"}, {"sha": "cec4b5d8daa4f9924e5bba03ac116dc3e7cfd65d", "filename": "gcc/testsuite/gcc.dg/torture/pr93381.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b85c0882205c31987ac26ffc49351a3af3b537c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr93381.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b85c0882205c31987ac26ffc49351a3af3b537c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr93381.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr93381.c?ref=2b85c0882205c31987ac26ffc49351a3af3b537c", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run } */\n+\n+static struct S { int *p1; int *p2; } s;\n+typedef __UINTPTR_TYPE__ uintptr_t;\n+int foo()\n+{\n+  int i = 1, j = 2;\n+  struct S s;\n+  int **p;\n+  s.p1 = &i;\n+  s.p2 = &j;\n+  p = &s.p1;\n+  uintptr_t pi = (uintptr_t)p;\n+  pi = pi + sizeof (int *);\n+  p = (int **)pi;\n+  **p = 3;\n+  return j;\n+}\n+\n+int main()\n+{\n+  if (foo () != 3)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "416a26c996cc2300115047aec56fd0bda1e13375", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b85c0882205c31987ac26ffc49351a3af3b537c/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b85c0882205c31987ac26ffc49351a3af3b537c/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=2b85c0882205c31987ac26ffc49351a3af3b537c", "patch": "@@ -5008,11 +5008,12 @@ find_func_aliases (struct function *fn, gimple *origt)\n \t\t   || code == FLOOR_MOD_EXPR\n \t\t   || code == ROUND_MOD_EXPR)\n \t    /* Division and modulo transfer the pointer from the LHS.  */\n-\t    get_constraint_for_rhs (gimple_assign_rhs1 (t), &rhsc);\n-\t  else if ((CONVERT_EXPR_CODE_P (code)\n-\t\t    && !(POINTER_TYPE_P (gimple_expr_type (t))\n-\t\t\t && !POINTER_TYPE_P (TREE_TYPE (rhsop))))\n+\t    get_constraint_for_ptr_offset (gimple_assign_rhs1 (t),\n+\t\t\t\t\t   NULL_TREE, &rhsc);\n+\t  else if (CONVERT_EXPR_CODE_P (code)\n \t\t   || gimple_assign_single_p (t))\n+\t    /* See through conversions, single RHS are handled by\n+\t       get_constraint_for_rhs.  */\n \t    get_constraint_for_rhs (rhsop, &rhsc);\n \t  else if (code == COND_EXPR)\n \t    {\n@@ -5031,14 +5032,16 @@ find_func_aliases (struct function *fn, gimple *origt)\n \t    ;\n \t  else\n \t    {\n-\t      /* All other operations are merges.  */\n+\t      /* All other operations are possibly offsetting merges.  */\n \t      auto_vec<ce_s, 4> tmp;\n \t      struct constraint_expr *rhsp;\n \t      unsigned i, j;\n-\t      get_constraint_for_rhs (gimple_assign_rhs1 (t), &rhsc);\n+\t      get_constraint_for_ptr_offset (gimple_assign_rhs1 (t),\n+\t\t\t\t\t     NULL_TREE, &rhsc);\n \t      for (i = 2; i < gimple_num_ops (t); ++i)\n \t\t{\n-\t\t  get_constraint_for_rhs (gimple_op (t, i), &tmp);\n+\t\t  get_constraint_for_ptr_offset (gimple_op (t, i),\n+\t\t\t\t\t\t NULL_TREE, &tmp);\n \t\t  FOR_EACH_VEC_ELT (tmp, j, rhsp)\n \t\t    rhsc.safe_push (*rhsp);\n \t\t  tmp.truncate (0);"}]}