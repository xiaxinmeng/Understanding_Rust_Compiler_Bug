{"sha": "00cc944db912f3b643c911f52af8a9b9ea2b1cd0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBjYzk0NGRiOTEyZjNiNjQzYzkxMWY1MmFmOGE5YjllYTJiMWNkMA==", "commit": {"author": {"name": "Chris Sears", "email": "cbsears_sf@yahoo.com", "date": "2002-01-08T19:07:46Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2002-01-08T19:07:46Z"}, "message": "interpret.cc (ARRAYBOUNDSCHECK): New macro.\n\n2002-01-08  Chris Sears  <cbsears_sf@yahoo.com>\n\n\t* interpret.cc (ARRAYBOUNDSCHECK): New macro.\n\t(continue1) [insn_iaload, insn_laload, insn_faload, insn_daload,\n\tinsn_aaload, insn_baload, insn_caload, insn_saload, insn_iastore,\n\tinsn_lastore, insn_fastore, insn_dastore, insn_aastore,\n\tinsn_bastore, insn_castore, insn_sastore]: Use it.\n\t(continue1) [insn_arraylength]: Check for null array.\n\nFrom-SVN: r48652", "tree": {"sha": "491a228971a4e5b1a8b7c62dcdbef1379b66a7f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/491a228971a4e5b1a8b7c62dcdbef1379b66a7f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00cc944db912f3b643c911f52af8a9b9ea2b1cd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00cc944db912f3b643c911f52af8a9b9ea2b1cd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00cc944db912f3b643c911f52af8a9b9ea2b1cd0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00cc944db912f3b643c911f52af8a9b9ea2b1cd0/comments", "author": null, "committer": null, "parents": [{"sha": "0d24f4d1314fbfc9a42fe7839179d20dc2e6b0dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d24f4d1314fbfc9a42fe7839179d20dc2e6b0dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d24f4d1314fbfc9a42fe7839179d20dc2e6b0dd"}], "stats": {"total": 99, "additions": 34, "deletions": 65}, "files": [{"sha": "c8a957e9bcc3d9393c573ac7176e30512257acf0", "filename": "libjava/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00cc944db912f3b643c911f52af8a9b9ea2b1cd0/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00cc944db912f3b643c911f52af8a9b9ea2b1cd0/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=00cc944db912f3b643c911f52af8a9b9ea2b1cd0", "patch": "@@ -1,3 +1,12 @@\n+2002-01-08  Chris Sears  <cbsears_sf@yahoo.com>\n+\n+\t* interpret.cc (ARRAYBOUNDSCHECK): New macro.\n+\t(continue1) [insn_iaload, insn_laload, insn_faload, insn_daload,\n+\tinsn_aaload, insn_baload, insn_caload, insn_saload, insn_iastore,\n+\tinsn_lastore, insn_fastore, insn_dastore, insn_aastore,\n+\tinsn_bastore, insn_castore, insn_sastore]: Use it.\n+\t(continue1) [insn_arraylength]: Check for null array.\n+\n 2002-01-06 Andreas Tobler <a.tobler@schweiz.ch>\n \n \t* configure, include/config.h.in: Rebuilt."}, {"sha": "8075e5b6c64338eb3264ee025f0ad2fd183343cb", "filename": "libjava/interpret.cc", "status": "modified", "additions": 25, "deletions": 65, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00cc944db912f3b643c911f52af8a9b9ea2b1cd0/libjava%2Finterpret.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00cc944db912f3b643c911f52af8a9b9ea2b1cd0/libjava%2Finterpret.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finterpret.cc?ref=00cc944db912f3b643c911f52af8a9b9ea2b1cd0", "patch": "@@ -1,6 +1,6 @@\n // interpret.cc - Code for the interpreter\n \n-/* Copyright (C) 1999, 2000, 2001  Free Software Foundation\n+/* Copyright (C) 1999, 2000, 2001 , 2002 Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -187,6 +187,13 @@ static jint get4(unsigned char* loc) {\n   do { if ((X)==NULL) throw_null_pointer_exception (); } while (0)\n #endif\n \n+#define ARRAYBOUNDSCHECK(array, index)\t\t\t\t\t      \\\n+  do\t\t\t\t\t\t\t\t\t      \\\n+    {\t\t\t\t\t\t\t\t\t      \\\n+      if (((unsigned) index) >= (unsigned) (array->length))\t\t      \\\n+\t_Jv_ThrowBadArrayIndex (index);\t\t\t\t\t      \\\n+    }\t\t\t\t\t\t\t\t\t      \\\n+  while (0)\n \n // this method starts the actual running of the method.  It is inlined\n // in three different variants in the static methods run_normal,\n@@ -958,10 +965,7 @@ void _Jv_InterpMethod::continue1 (_Jv_InterpMethodInvocation *inv)\n \tjint index = POPI();\n \tjintArray arr = (jintArray) POPA();\n \tNULLCHECK (arr);\n-\tif (index < 0 || index >= arr->length)\n-\t  {\n-\t    _Jv_ThrowBadArrayIndex (index);\n-\t  }\n+\tARRAYBOUNDSCHECK (arr, index);\n \tPUSHI( elements(arr)[index] );\n       }\n       NEXT_INSN;\n@@ -972,10 +976,7 @@ void _Jv_InterpMethod::continue1 (_Jv_InterpMethodInvocation *inv)\n \tjint index = POPI();\n \tjlongArray arr = (jlongArray) POPA();\n \tNULLCHECK (arr);\n-\tif (index < 0 || index >= arr->length)\n-\t  {\n-\t    _Jv_ThrowBadArrayIndex (index);\n-\t  }\n+\tARRAYBOUNDSCHECK (arr, index);\n \tPUSHL( elements(arr)[index] );\n       }\n       NEXT_INSN;\n@@ -986,10 +987,7 @@ void _Jv_InterpMethod::continue1 (_Jv_InterpMethodInvocation *inv)\n \tjint index = POPI();\n \tjfloatArray arr = (jfloatArray) POPA();\n \tNULLCHECK (arr);\n-\tif (index < 0 || index >= arr->length)\n-\t  {\n-\t    _Jv_ThrowBadArrayIndex (index);\n-\t  }\n+\tARRAYBOUNDSCHECK (arr, index);\n \tPUSHF( elements(arr)[index] );\n       }\n       NEXT_INSN;\n@@ -1000,10 +998,7 @@ void _Jv_InterpMethod::continue1 (_Jv_InterpMethodInvocation *inv)\n \tjint index = POPI();\n \tjdoubleArray arr = (jdoubleArray) POPA();\n \tNULLCHECK (arr);\n-\tif (index < 0 || index >= arr->length)\n-\t  {\n-\t    _Jv_ThrowBadArrayIndex (index);\n-\t  }\n+\tARRAYBOUNDSCHECK (arr, index);\n \tPUSHD( elements(arr)[index] );\n       }\n       NEXT_INSN;\n@@ -1014,10 +1009,7 @@ void _Jv_InterpMethod::continue1 (_Jv_InterpMethodInvocation *inv)\n \tjint index = POPI();\n \tjobjectArray arr = (jobjectArray) POPA();\n \tNULLCHECK (arr);\n-\tif (index < 0 || index >= arr->length)\n-\t  {\n-\t    _Jv_ThrowBadArrayIndex (index);\n-\t  }\n+\tARRAYBOUNDSCHECK (arr, index);\n \tPUSHA( elements(arr)[index] );\n       }\n       NEXT_INSN;\n@@ -1028,10 +1020,7 @@ void _Jv_InterpMethod::continue1 (_Jv_InterpMethodInvocation *inv)\n \tjint index = POPI();\n \tjbyteArray arr = (jbyteArray) POPA();\n \tNULLCHECK (arr);\n-\tif (index < 0 || index >= arr->length)\n-\t  {\n-\t    _Jv_ThrowBadArrayIndex (index);\n-\t  }\n+\tARRAYBOUNDSCHECK (arr, index);\n \tPUSHI( elements(arr)[index] );\n       }\n       NEXT_INSN;\n@@ -1042,10 +1031,7 @@ void _Jv_InterpMethod::continue1 (_Jv_InterpMethodInvocation *inv)\n \tjint index = POPI();\n \tjcharArray arr = (jcharArray) POPA();\n \tNULLCHECK (arr);\n-\tif (index < 0 || index >= arr->length)\n-\t  {\n-\t    _Jv_ThrowBadArrayIndex (index);\n-\t  }\n+\tARRAYBOUNDSCHECK (arr, index);\n \tPUSHI( elements(arr)[index] );\n       }\n       NEXT_INSN;\n@@ -1056,10 +1042,7 @@ void _Jv_InterpMethod::continue1 (_Jv_InterpMethodInvocation *inv)\n \tjint index = POPI();\n \tjshortArray arr = (jshortArray) POPA();\n \tNULLCHECK (arr);\n-\tif (index < 0 || index >= arr->length)\n-\t  {\n-\t    _Jv_ThrowBadArrayIndex (index);\n-\t  }\n+\tARRAYBOUNDSCHECK (arr, index);\n \tPUSHI( elements(arr)[index] );\n       }\n       NEXT_INSN;\n@@ -1171,10 +1154,7 @@ void _Jv_InterpMethod::continue1 (_Jv_InterpMethodInvocation *inv)\n \tjint index  = POPI();\n \tjintArray arr = (jintArray) POPA();\n \tNULLCHECK (arr);\n-\tif (index < 0 || index >= arr->length)\n-\t  {\n-\t    _Jv_ThrowBadArrayIndex (index);\n-\t  }\n+\tARRAYBOUNDSCHECK (arr, index);\n \telements(arr)[index] = value;\n       }\n       NEXT_INSN;\n@@ -1186,10 +1166,7 @@ void _Jv_InterpMethod::continue1 (_Jv_InterpMethodInvocation *inv)\n \tjint index  = POPI();\n \tjlongArray arr = (jlongArray) POPA();\n \tNULLCHECK (arr);\n-\tif (index < 0 || index >= arr->length)\n-\t  {\n-\t    _Jv_ThrowBadArrayIndex (index);\n-\t  }\n+\tARRAYBOUNDSCHECK (arr, index);\n \telements(arr)[index] = value;\n       }\n       NEXT_INSN;\n@@ -1201,10 +1178,7 @@ void _Jv_InterpMethod::continue1 (_Jv_InterpMethodInvocation *inv)\n \tjint index  = POPI();\n \tjfloatArray arr = (jfloatArray) POPA();\n \tNULLCHECK (arr);\n-\tif (index < 0 || index >= arr->length)\n-\t  {\n-\t    _Jv_ThrowBadArrayIndex (index);\n-\t  }\n+\tARRAYBOUNDSCHECK (arr, index);\n \telements(arr)[index] = value;\n       }\n       NEXT_INSN;\n@@ -1216,10 +1190,7 @@ void _Jv_InterpMethod::continue1 (_Jv_InterpMethodInvocation *inv)\n \tjint index  = POPI();\n \tjdoubleArray arr = (jdoubleArray) POPA();\n \tNULLCHECK (arr);\n-\tif (index < 0 || index >= arr->length)\n-\t  {\n-\t    _Jv_ThrowBadArrayIndex (index);\n-\t  }\n+\tARRAYBOUNDSCHECK (arr, index);\n \telements(arr)[index] = value;\n       }\n       NEXT_INSN;\n@@ -1231,10 +1202,7 @@ void _Jv_InterpMethod::continue1 (_Jv_InterpMethodInvocation *inv)\n \tjint index  = POPI();\n \tjobjectArray arr = (jobjectArray) POPA();\n \tNULLCHECK (arr);\n-\tif (index < 0 || index >= arr->length)\n-\t  {\n-\t    _Jv_ThrowBadArrayIndex (index);\n-\t  }\n+\tARRAYBOUNDSCHECK (arr, index);\n \t_Jv_CheckArrayStore (arr, value);\n \telements(arr)[index] = value;\n       }\n@@ -1247,10 +1215,7 @@ void _Jv_InterpMethod::continue1 (_Jv_InterpMethodInvocation *inv)\n \tjint index  = POPI();\n \tjbyteArray arr = (jbyteArray) POPA();\n \tNULLCHECK (arr);\n-\tif (index < 0 || index >= arr->length)\n-\t  {\n-\t    _Jv_ThrowBadArrayIndex (index);\n-\t  }\n+\tARRAYBOUNDSCHECK (arr, index);\n \telements(arr)[index] = value;\n       }\n       NEXT_INSN;\n@@ -1262,10 +1227,7 @@ void _Jv_InterpMethod::continue1 (_Jv_InterpMethodInvocation *inv)\n \tjint index  = POPI();\n \tjcharArray arr = (jcharArray) POPA();\n \tNULLCHECK (arr);\n-\tif (index < 0 || index >= arr->length)\n-\t  {\n-\t    _Jv_ThrowBadArrayIndex (index);\n-\t  }\n+\tARRAYBOUNDSCHECK (arr, index);\n \telements(arr)[index] = value;\n       }\n       NEXT_INSN;\n@@ -1277,10 +1239,7 @@ void _Jv_InterpMethod::continue1 (_Jv_InterpMethodInvocation *inv)\n \tjint index  = POPI();\n \tjshortArray arr = (jshortArray) POPA();\n \tNULLCHECK (arr);\n-\tif (index < 0 || index >= arr->length)\n-\t  {\n-\t    _Jv_ThrowBadArrayIndex (index);\n-\t  }\n+\tARRAYBOUNDSCHECK (arr, index);\n \telements(arr)[index] = value;\n       }\n       NEXT_INSN;\n@@ -2229,6 +2188,7 @@ void _Jv_InterpMethod::continue1 (_Jv_InterpMethodInvocation *inv)\n       SAVE_PC;\n       {\n \t__JArray *arr = (__JArray*)POPA();\n+\tNULLCHECK (arr);\n \tPUSHI (arr->length);\n       }\n       NEXT_INSN;"}]}