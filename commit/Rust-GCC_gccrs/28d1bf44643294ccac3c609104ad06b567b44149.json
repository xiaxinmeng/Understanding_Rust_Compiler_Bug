{"sha": "28d1bf44643294ccac3c609104ad06b567b44149", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjhkMWJmNDQ2NDMyOTRjY2FjM2M2MDkxMDRhZDA2YjU2N2I0NDE0OQ==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2016-11-10T21:29:43Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2016-11-10T21:29:43Z"}, "message": "debug.cc (format_word): Delete.\n\n2016-11-10  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* src/c++11/debug.cc (format_word): Delete.\n\t(print_literal): New. Replace call to print_word for literals.\n\nFrom-SVN: r242055", "tree": {"sha": "965d195fa9055e4ede9ad018ceee2843088e4854", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/965d195fa9055e4ede9ad018ceee2843088e4854"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28d1bf44643294ccac3c609104ad06b567b44149", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28d1bf44643294ccac3c609104ad06b567b44149", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28d1bf44643294ccac3c609104ad06b567b44149", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28d1bf44643294ccac3c609104ad06b567b44149/comments", "author": null, "committer": null, "parents": [{"sha": "456f0dfa1c8975b3d456dc6ad06e998d8eed22ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/456f0dfa1c8975b3d456dc6ad06e998d8eed22ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/456f0dfa1c8975b3d456dc6ad06e998d8eed22ed"}], "stats": {"total": 124, "additions": 63, "deletions": 61}, "files": [{"sha": "e1a4764afd7ac42e3a2843fe1102621b630013a7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28d1bf44643294ccac3c609104ad06b567b44149/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28d1bf44643294ccac3c609104ad06b567b44149/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=28d1bf44643294ccac3c609104ad06b567b44149", "patch": "@@ -1,3 +1,8 @@\n+2016-11-10  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* src/c++11/debug.cc (format_word): Delete.\n+\t(print_literal): New. Replace call to print_word for literals.\n+\n 2016-11-09  Tim Shen  <timshen@google.com>\n \n \t* libstdc++-v3/include/bits/regex.h (regex_iterator::regex_iterator()):"}, {"sha": "9b8df461b3d140e18da62a0adf2be9b2fba28108", "filename": "libstdc++-v3/src/c++11/debug.cc", "status": "modified", "additions": 58, "deletions": 61, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28d1bf44643294ccac3c609104ad06b567b44149/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fdebug.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28d1bf44643294ccac3c609104ad06b567b44149/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fdebug.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fdebug.cc?ref=28d1bf44643294ccac3c609104ad06b567b44149", "patch": "@@ -540,11 +540,6 @@ namespace\n   using _Error_formatter = __gnu_debug::_Error_formatter;\n   using _Parameter = __gnu_debug::_Error_formatter::_Parameter;\n \n-  template<typename _Tp>\n-    int\n-    format_word(char* buf, int n, const char* fmt, _Tp s)\n-    { return std::min(__builtin_snprintf(buf, n, fmt, s), n - 1); }\n-\n   void\n   get_max_length(std::size_t& max_length)\n   {\n@@ -571,6 +566,11 @@ namespace\n     bool\t_M_wordwrap;\n   };\n \n+  template<size_t Length>\n+    void\n+    print_literal(PrintContext& ctx, const char(&word)[Length])\n+    { print_word(ctx, word, Length - 1); }\n+\n   void\n   print_word(PrintContext& ctx, const char* word,\n \t     std::ptrdiff_t count = -1)\n@@ -621,27 +621,28 @@ namespace\n       }\n     else\n       {\n-\tprint_word(ctx, \"\\n\", 1);\n+\tprint_literal(ctx, \"\\n\");\n \tprint_word(ctx, word, count);\n       }\n   }\n \n-  void\n-  print_type(PrintContext& ctx,\n-\t     const type_info* info,\n-\t     const char* unknown_name)\n-  {\n-    if (!info)\n-      print_word(ctx, unknown_name);\n-    else\n-      {\n-\tint status;\n-\tchar* demangled_name =\n-\t  __cxxabiv1::__cxa_demangle(info->name(), NULL, NULL, &status);\n-\tprint_word(ctx, status == 0 ? demangled_name : info->name());\n-\tfree(demangled_name);\n-      }\n-  }\n+  template<size_t Length>\n+    void\n+    print_type(PrintContext& ctx,\n+\t       const type_info* info,\n+\t       const char(&unknown_name)[Length])\n+    {\n+      if (!info)\n+\tprint_literal(ctx, unknown_name);\n+      else\n+\t{\n+\t  int status;\n+\t  char* demangled_name =\n+\t    __cxxabiv1::__cxa_demangle(info->name(), NULL, NULL, &status);\n+\t  print_word(ctx, status == 0 ? demangled_name : info->name());\n+\t  free(demangled_name);\n+\t}\n+    }\n \n   bool\n   print_field(PrintContext& ctx,\n@@ -778,20 +779,18 @@ namespace\n   {\n     if (type._M_name)\n       {\n-\tconst int bufsize = 64;\n-\tchar buf[bufsize];\n-\tint written\n-\t  = format_word(buf, bufsize, \"\\\"%s\\\"\", type._M_name);\n-\tprint_word(ctx, buf, written);\n+\tprint_literal(ctx, \"\\\"\");\n+\tprint_word(ctx, type._M_name);\n+\tprint_literal(ctx, \"\\\"\");\n       }\n \n-    print_word(ctx, \" {\\n\");\n+    print_literal(ctx, \" {\\n\");\n \n     if (type._M_type)\n       {\n-\tprint_word(ctx, \"  type = \");\n+\tprint_literal(ctx, \"  type = \");\n \tprint_type(ctx, type._M_type, \"<unknown type>\");\n-\tprint_word(ctx, \";\\n\");\n+\tprint_literal(ctx, \";\\n\");\n       }\n   }\n \n@@ -803,9 +802,9 @@ namespace\n \n     if (inst._M_name)\n       {\n-\tint written\n-\t  = format_word(buf, bufsize, \"\\\"%s\\\" \", inst._M_name);\n-\tprint_word(ctx, buf, written);\n+\tprint_literal(ctx, \"\\\"\");\n+\tprint_word(ctx, inst._M_name);\n+\tprint_literal(ctx, \"\\\" \");\n       }\n \n     int written\n@@ -814,7 +813,7 @@ namespace\n \n     if (inst._M_type)\n       {\n-\tprint_word(ctx, \"  type = \");\n+\tprint_literal(ctx, \"  type = \");\n \tprint_type(ctx, inst._M_type, \"<unknown type>\");\n       }\n   }\n@@ -832,71 +831,71 @@ namespace\n \t{\n \t  const auto& ite = variant._M_iterator;\n \n-\t  print_word(ctx, \"iterator \");\n+\t  print_literal(ctx, \"iterator \");\n \t  print_description(ctx, ite);\n \n \t  if (ite._M_type)\n \t    {\n \t      if (ite._M_constness != _Error_formatter::__unknown_constness)\n \t\t{\n-\t\t  print_word(ctx, \" (\");\n+\t\t  print_literal(ctx, \" (\");\n \t\t  print_field(ctx, param, \"constness\");\n-\t\t  print_word(ctx, \" iterator)\");\n+\t\t  print_literal(ctx, \" iterator)\");\n \t\t}\n \n-\t      print_word(ctx, \";\\n\");\n+\t      print_literal(ctx, \";\\n\");\n \t    }\n \n \t  if (ite._M_state != _Error_formatter::__unknown_state)\n \t    {\n-\t      print_word(ctx, \"  state = \");\n+\t      print_literal(ctx, \"  state = \");\n \t      print_field(ctx, param, \"state\");\n-\t      print_word(ctx, \";\\n\");\n+\t      print_literal(ctx, \";\\n\");\n \t    }\n \n \t  if (ite._M_sequence)\n \t    {\n-\t      print_word(ctx, \"  references sequence \");\n+\t      print_literal(ctx, \"  references sequence \");\n \t      if (ite._M_seq_type)\n \t\t{\n-\t\t  print_word(ctx, \"with type '\");\n+\t\t  print_literal(ctx, \"with type '\");\n \t\t  print_field(ctx, param, \"seq_type\");\n-\t\t  print_word(ctx, \"' \");\n+\t\t  print_literal(ctx, \"' \");\n \t\t}\n \n \t      int written\n \t\t= __builtin_sprintf(buf, \"@ 0x%p\\n\", ite._M_sequence);\n \t      print_word(ctx, buf, written);\n \t    }\n \n-\t  print_word(ctx, \"}\\n\", 2);\n+\t  print_literal(ctx, \"}\\n\");\n \t}\n \tbreak;\n \n       case _Parameter::__sequence:\n-\tprint_word(ctx, \"sequence \");\n+\tprint_literal(ctx, \"sequence \");\n \tprint_description(ctx, variant._M_sequence);\n \n \tif (variant._M_sequence._M_type)\n-\t  print_word(ctx, \";\\n\", 2);\n+\t  print_literal(ctx, \";\\n\");\n \n-\tprint_word(ctx, \"}\\n\", 2);\n+\tprint_literal(ctx, \"}\\n\");\n \tbreak;\n \n       case _Parameter::__instance:\n-\tprint_word(ctx, \"instance \");\n+\tprint_literal(ctx, \"instance \");\n \tprint_description(ctx, variant._M_instance);\n \n \tif (variant._M_instance._M_type)\n-\t  print_word(ctx, \";\\n\", 2);\n+\t  print_literal(ctx, \";\\n\");\n \n-\tprint_word(ctx, \"}\\n\", 2);\n+\tprint_literal(ctx, \"}\\n\");\n \tbreak;\n \n       case _Parameter::__iterator_value_type:\n-\tprint_word(ctx, \"iterator::value_type \");\n+\tprint_literal(ctx, \"iterator::value_type \");\n \tprint_description(ctx, variant._M_iterator_value_type);\n-\tprint_word(ctx, \"}\\n\", 2);\n+\tprint_literal(ctx, \"}\\n\");\n \tbreak;\n \n       default:\n@@ -1011,38 +1010,36 @@ namespace __gnu_debug\n   void\n   _Error_formatter::_M_error() const\n   {\n-    const int bufsize = 128;\n-    char buf[bufsize];\n-\n     // Emit file & line number information\n     bool go_to_next_line = false;\n     PrintContext ctx;\n     if (_M_file)\n       {\n-\tint written = format_word(buf, bufsize, \"%s:\", _M_file);\n-\tprint_word(ctx, buf, written);\n+\tprint_word(ctx, _M_file);\n+\tprint_literal(ctx, \":\");\n \tgo_to_next_line = true;\n       }\n \n     if (_M_line > 0)\n       {\n+\tchar buf[64];\n \tint written = __builtin_sprintf(buf, \"%u:\", _M_line);\n \tprint_word(ctx, buf, written);\n \tgo_to_next_line = true;\n       }\n \n     if (go_to_next_line)\n-      print_word(ctx, \"\\n\", 1);\n+      print_literal(ctx, \"\\n\");\n \n     if (ctx._M_max_length)\n       ctx._M_wordwrap = true;\n \n-    print_word(ctx, \"Error: \");\n+    print_literal(ctx, \"Error: \");\n \n     // Print the error message\n     assert(_M_text);\n     print_string(ctx, _M_text, _M_parameters, _M_num_parameters);\n-    print_word(ctx, \".\\n\", 2);\n+    print_literal(ctx, \".\\n\");\n \n     // Emit descriptions of the objects involved in the operation\n     ctx._M_first_line = true;\n@@ -1058,7 +1055,7 @@ namespace __gnu_debug\n \t  case _Parameter::__iterator_value_type:\n \t    if (!has_header)\n \t      {\n-\t\tprint_word(ctx, \"\\nObjects involved in the operation:\\n\");\n+\t\tprint_literal(ctx, \"\\nObjects involved in the operation:\\n\");\n \t\thas_header = true;\n \t      }\n \t    print_description(ctx, _M_parameters[i]);"}]}