{"sha": "ea0f3e87b9dd370eaa2ff7cb0a842b0107f24963", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWEwZjNlODdiOWRkMzcwZWFhMmZmN2NiMGE4NDJiMDEwN2YyNDk2Mw==", "commit": {"author": {"name": "Xinliang David Li", "email": "davidxl@google.com", "date": "2013-09-16T19:55:40Z"}, "committer": {"name": "Xinliang David Li", "email": "davidxl@gcc.gnu.org", "date": "2013-09-16T19:55:40Z"}, "message": "Introduce -ftree-loop-vectorize option\n\nFrom-SVN: r202636", "tree": {"sha": "e1b8d1443dde493d2c9c34e9b0ab6688fc4cfe05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1b8d1443dde493d2c9c34e9b0ab6688fc4cfe05"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea0f3e87b9dd370eaa2ff7cb0a842b0107f24963", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea0f3e87b9dd370eaa2ff7cb0a842b0107f24963", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea0f3e87b9dd370eaa2ff7cb0a842b0107f24963", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea0f3e87b9dd370eaa2ff7cb0a842b0107f24963/comments", "author": {"login": "vns-mn", "id": 57157229, "node_id": "MDQ6VXNlcjU3MTU3MjI5", "avatar_url": "https://avatars.githubusercontent.com/u/57157229?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vns-mn", "html_url": "https://github.com/vns-mn", "followers_url": "https://api.github.com/users/vns-mn/followers", "following_url": "https://api.github.com/users/vns-mn/following{/other_user}", "gists_url": "https://api.github.com/users/vns-mn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vns-mn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vns-mn/subscriptions", "organizations_url": "https://api.github.com/users/vns-mn/orgs", "repos_url": "https://api.github.com/users/vns-mn/repos", "events_url": "https://api.github.com/users/vns-mn/events{/privacy}", "received_events_url": "https://api.github.com/users/vns-mn/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7fe46fbed28c8cef2e4dff88aebc88f731a98dd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fe46fbed28c8cef2e4dff88aebc88f731a98dd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fe46fbed28c8cef2e4dff88aebc88f731a98dd9"}], "stats": {"total": 108, "additions": 76, "deletions": 32}, "files": [{"sha": "fbcd00dcc3ddf160fa7f1323c9ba5b411a209f82", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea0f3e87b9dd370eaa2ff7cb0a842b0107f24963/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea0f3e87b9dd370eaa2ff7cb0a842b0107f24963/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ea0f3e87b9dd370eaa2ff7cb0a842b0107f24963", "patch": "@@ -1,3 +1,22 @@\n+2013-09-16  Xinliang David Li  <davidxl@google.com>\n+\n+\t* tree-if-conv.c (main_tree_if_conversion): Check new flag.\n+\t* omp-low.c (omp_max_vf): Ditto.\n+\t(expand_omp_simd): Ditto.\n+\t* tree-vectorizer.c (vectorize_loops): Ditto.\n+\t(gate_vect_slp): Ditto.\n+\t(gate_increase_alignment): Ditto.\n+\t* tree-ssa-pre.c (inhibit_phi_insertion): Ditto.\n+\t* tree-ssa-loop.c (gate_tree_vectorize): Ditto.\n+\t(gate_tree_vectorize): Name change.\n+\t(tree_vectorize): Ditto.\n+\t(pass_vectorize::gate): Call new function.\n+\t(pass_vectorize::execute): Ditto.\n+\topts.c: O3 default setting change.\n+\t(finish_options): Check new flag.\n+\t* doc/invoke.texi: Document new flags.\n+\t* common.opt: New flags.\n+\n 2013-09-16  Andreas Schwab  <schwab@linux-m68k.org>\n \n \t* doc/tm.texi.in (Cond Exec Macros): Remove node."}, {"sha": "202e169d281c8adbae96db7f0839e34c01fe171d", "filename": "gcc/common.opt", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea0f3e87b9dd370eaa2ff7cb0a842b0107f24963/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea0f3e87b9dd370eaa2ff7cb0a842b0107f24963/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=ea0f3e87b9dd370eaa2ff7cb0a842b0107f24963", "patch": "@@ -2264,14 +2264,18 @@ Perform variable tracking and also tag variables that are uninitialized\n \n ftree-vectorize\n Common Report Var(flag_tree_vectorize) Optimization\n-Enable loop vectorization on trees\n+Enable vectorization on trees\n \n ftree-vectorizer-verbose=\n Common RejectNegative Joined UInteger Var(common_deferred_options) Defer\n -ftree-vectorizer-verbose=<number>\tThis switch is deprecated. Use -fopt-info instead.\n \n+ftree-loop-vectorize\n+Common Report Var(flag_tree_loop_vectorize) Optimization\n+Enable loop vectorization on trees\n+\n ftree-slp-vectorize\n-Common Report Var(flag_tree_slp_vectorize) Init(2) Optimization\n+Common Report Var(flag_tree_slp_vectorize) Optimization\n Enable basic block vectorization (SLP) on trees\n \n fvect-cost-model"}, {"sha": "aa0f4ed08b797450047ae7634e3d903932ef9139", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea0f3e87b9dd370eaa2ff7cb0a842b0107f24963/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea0f3e87b9dd370eaa2ff7cb0a842b0107f24963/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=ea0f3e87b9dd370eaa2ff7cb0a842b0107f24963", "patch": "@@ -419,10 +419,11 @@ Objective-C and Objective-C++ Dialects}.\n -ftree-loop-if-convert-stores -ftree-loop-im @gol\n -ftree-phiprop -ftree-loop-distribution -ftree-loop-distribute-patterns @gol\n -ftree-loop-ivcanon -ftree-loop-linear -ftree-loop-optimize @gol\n+-ftree-loop-vectorize @gol\n -ftree-parallelize-loops=@var{n} -ftree-pre -ftree-partial-pre -ftree-pta @gol\n -ftree-reassoc -ftree-sink -ftree-slsr -ftree-sra @gol\n--ftree-switch-conversion -ftree-tail-merge @gol\n--ftree-ter -ftree-vect-loop-version -ftree-vectorize -ftree-vrp @gol\n+-ftree-switch-conversion -ftree-tail-merge -ftree-ter @gol\n+-ftree-vect-loop-version -ftree-vectorize -ftree-vrp @gol\n -funit-at-a-time -funroll-all-loops -funroll-loops @gol\n -funsafe-loop-optimizations -funsafe-math-optimizations -funswitch-loops @gol\n -fvariable-expansion-in-unroller -fvect-cost-model -fvpt -fweb @gol\n@@ -6751,8 +6752,8 @@ invoking @option{-O2} on programs that use computed gotos.\n Optimize yet more.  @option{-O3} turns on all optimizations specified\n by @option{-O2} and also turns on the @option{-finline-functions},\n @option{-funswitch-loops}, @option{-fpredictive-commoning},\n-@option{-fgcse-after-reload}, @option{-ftree-vectorize},\n-@option{-fvect-cost-model},\n+@option{-fgcse-after-reload}, @option{-ftree-loop-vectorize},\n+@option{-ftree-slp-vectorize}, @option{-fvect-cost-model},\n @option{-ftree-partial-pre} and @option{-fipa-cp-clone} options.\n \n @item -O0\n@@ -8011,8 +8012,13 @@ higher.\n \n @item -ftree-vectorize\n @opindex ftree-vectorize\n+Perform vectorization on trees. This flag enables @option{-ftree-loop-vectorize}\n+and @option{-ftree-slp-vectorize} if not explicitly specified.\n+\n+@item -ftree-loop-vectorize\n+@opindex ftree-loop-vectorize\n Perform loop vectorization on trees. This flag is enabled by default at\n-@option{-O3}.\n+@option{-O3} and when @option{-ftree-vectorize} is enabled.\n \n @item -ftree-slp-vectorize\n @opindex ftree-slp-vectorize"}, {"sha": "ffd12202ba1e6f7ccc11c69d46f7bc586f939556", "filename": "gcc/omp-low.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea0f3e87b9dd370eaa2ff7cb0a842b0107f24963/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea0f3e87b9dd370eaa2ff7cb0a842b0107f24963/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=ea0f3e87b9dd370eaa2ff7cb0a842b0107f24963", "patch": "@@ -2305,8 +2305,9 @@ omp_max_vf (void)\n {\n   if (!optimize\n       || optimize_debug\n-      || (!flag_tree_vectorize\n-\t  && global_options_set.x_flag_tree_vectorize))\n+      || (!flag_tree_loop_vectorize\n+\t  && (global_options_set.x_flag_tree_loop_vectorize\n+              || global_options_set.x_flag_tree_vectorize)))\n     return 1;\n \n   int vs = targetm.vectorize.autovectorize_vector_sizes ();\n@@ -5684,10 +5685,11 @@ expand_omp_simd (struct omp_region *region, struct omp_for_data *fd)\n \t  loop->simduid = OMP_CLAUSE__SIMDUID__DECL (simduid);\n \t  cfun->has_simduid_loops = true;\n \t}\n-      /* If not -fno-tree-vectorize, hint that we want to vectorize\n+      /* If not -fno-tree-loop-vectorize, hint that we want to vectorize\n \t the loop.  */\n-      if ((flag_tree_vectorize\n-\t   || !global_options_set.x_flag_tree_vectorize)\n+      if ((flag_tree_loop_vectorize\n+\t   || (!global_options_set.x_flag_tree_loop_vectorize\n+               && !global_options_set.x_flag_tree_vectorize))\n \t  && loop->safelen > 1)\n \t{\n \t  loop->force_vect = true;"}, {"sha": "944834c4438619978c16330e7abb30c1c71060f0", "filename": "gcc/opts.c", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea0f3e87b9dd370eaa2ff7cb0a842b0107f24963/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea0f3e87b9dd370eaa2ff7cb0a842b0107f24963/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=ea0f3e87b9dd370eaa2ff7cb0a842b0107f24963", "patch": "@@ -498,7 +498,8 @@ static const struct default_options default_options_table[] =\n     { OPT_LEVELS_1_PLUS_NOT_DEBUG, OPT_finline_functions_called_once, NULL, 1 },\n     { OPT_LEVELS_3_PLUS, OPT_funswitch_loops, NULL, 1 },\n     { OPT_LEVELS_3_PLUS, OPT_fgcse_after_reload, NULL, 1 },\n-    { OPT_LEVELS_3_PLUS, OPT_ftree_vectorize, NULL, 1 },\n+    { OPT_LEVELS_3_PLUS, OPT_ftree_loop_vectorize, NULL, 1 },\n+    { OPT_LEVELS_3_PLUS, OPT_ftree_slp_vectorize, NULL, 1 },\n     { OPT_LEVELS_3_PLUS, OPT_fvect_cost_model, NULL, 1 },\n     { OPT_LEVELS_3_PLUS, OPT_fipa_cp_clone, NULL, 1 },\n     { OPT_LEVELS_3_PLUS, OPT_ftree_partial_pre, NULL, 1 },\n@@ -826,7 +827,8 @@ finish_options (struct gcc_options *opts, struct gcc_options *opts_set,\n \n   /* Set PARAM_MAX_STORES_TO_SINK to 0 if either vectorization or if-conversion\n      is disabled.  */\n-  if (!opts->x_flag_tree_vectorize || !opts->x_flag_tree_loop_if_convert)\n+  if ((!opts->x_flag_tree_loop_vectorize && !opts->x_flag_tree_slp_vectorize)\n+       || !opts->x_flag_tree_loop_if_convert)\n     maybe_set_param_value (PARAM_MAX_STORES_TO_SINK, 0,\n                            opts->x_param_values, opts_set->x_param_values);\n \n@@ -1660,8 +1662,12 @@ common_handle_option (struct gcc_options *opts,\n \topts->x_flag_unswitch_loops = value;\n       if (!opts_set->x_flag_gcse_after_reload)\n \topts->x_flag_gcse_after_reload = value;\n-      if (!opts_set->x_flag_tree_vectorize)\n-\topts->x_flag_tree_vectorize = value;\n+      if (!opts_set->x_flag_tree_loop_vectorize\n+          && !opts_set->x_flag_tree_vectorize)\n+\topts->x_flag_tree_loop_vectorize = value;\n+      if (!opts_set->x_flag_tree_slp_vectorize\n+          && !opts_set->x_flag_tree_vectorize)\n+\topts->x_flag_tree_slp_vectorize = value;\n       if (!opts_set->x_flag_vect_cost_model)\n \topts->x_flag_vect_cost_model = value;\n       if (!opts_set->x_flag_tree_loop_distribute_patterns)\n@@ -1691,6 +1697,12 @@ common_handle_option (struct gcc_options *opts,\n         opts->x_flag_ipa_reference = false;\n       break;\n \n+    case OPT_ftree_vectorize:\n+      if (!opts_set->x_flag_tree_loop_vectorize)\n+        opts->x_flag_tree_loop_vectorize = value;\n+      if (!opts_set->x_flag_tree_slp_vectorize)\n+        opts->x_flag_tree_slp_vectorize = value;\n+      break;\n     case OPT_fshow_column:\n       dc->show_column = value;\n       break;"}, {"sha": "f6d539ac257964b8c9ddd77549cd31cff80e51ac", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea0f3e87b9dd370eaa2ff7cb0a842b0107f24963/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea0f3e87b9dd370eaa2ff7cb0a842b0107f24963/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ea0f3e87b9dd370eaa2ff7cb0a842b0107f24963", "patch": "@@ -1,3 +1,7 @@\n+2013-09-16  Xinliang David Li  <davidxl@google.com>\n+\n+\t* gcc.misc-tests/help.exp: Optimizer help change.\n+\n 2013-09-16  Jeff Law  <law@redhat.com>\n \n \t* gcc.c-torture/execute/pr58419.c: New test."}, {"sha": "20153d1249678e170b95ba077f00cce66379cfc8", "filename": "gcc/testsuite/gcc.misc-tests/help.exp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea0f3e87b9dd370eaa2ff7cb0a842b0107f24963/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fhelp.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea0f3e87b9dd370eaa2ff7cb0a842b0107f24963/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fhelp.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fhelp.exp?ref=ea0f3e87b9dd370eaa2ff7cb0a842b0107f24963", "patch": "@@ -55,11 +55,11 @@ check_for_options c \"--help=target,optimizers\" \"\" \"\" \"\"\n check_for_options c \"--help=warnings,^joined,^undocumented\" \"\" \"\" \"\"\n check_for_options c \"-Q -O2 --help=optimizers\" {\n -O\n--ftree-vectorize[^\\n]*disabled\n+-ftree-loop-vectorize[^\\n]*disabled\n } \"  -g  \" \"\"\n check_for_options c \"-Q -O3 --help=optimizers\" {\n -O\n--ftree-vectorize[^\\n]*enabled\n+-ftree-loop-vectorize[^\\n]*enabled\n } \"  -g  \" \"\"\n # Try repeated --help=.\n check_for_options c \"--help=params --help=optimizers\" {"}, {"sha": "4851023d27f523bceaf1f0b7394ac1f95985886a", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea0f3e87b9dd370eaa2ff7cb0a842b0107f24963/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea0f3e87b9dd370eaa2ff7cb0a842b0107f24963/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=ea0f3e87b9dd370eaa2ff7cb0a842b0107f24963", "patch": "@@ -1789,7 +1789,7 @@ main_tree_if_conversion (void)\n   FOR_EACH_LOOP (li, loop, 0)\n     if (flag_tree_loop_if_convert == 1\n \t|| flag_tree_loop_if_convert_stores == 1\n-\t|| flag_tree_vectorize\n+\t|| flag_tree_loop_vectorize\n \t|| loop->force_vect)\n     changed |= tree_if_conversion (loop);\n \n@@ -1815,7 +1815,7 @@ main_tree_if_conversion (void)\n static bool\n gate_tree_if_conversion (void)\n {\n-  return (((flag_tree_vectorize || cfun->has_force_vect_loops)\n+  return (((flag_tree_loop_vectorize || cfun->has_force_vect_loops)\n \t   && flag_tree_loop_if_convert != 0)\n \t  || flag_tree_loop_if_convert == 1\n \t  || flag_tree_loop_if_convert_stores == 1);"}, {"sha": "cb3eec8dd3886644a925ce6d23380f4258960395", "filename": "gcc/tree-ssa-loop.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea0f3e87b9dd370eaa2ff7cb0a842b0107f24963/gcc%2Ftree-ssa-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea0f3e87b9dd370eaa2ff7cb0a842b0107f24963/gcc%2Ftree-ssa-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop.c?ref=ea0f3e87b9dd370eaa2ff7cb0a842b0107f24963", "patch": "@@ -303,7 +303,7 @@ make_pass_predcom (gcc::context *ctxt)\n /* Loop autovectorization.  */\n \n static unsigned int\n-tree_vectorize (void)\n+tree_loop_vectorize (void)\n {\n   if (number_of_loops (cfun) <= 1)\n     return 0;\n@@ -312,9 +312,9 @@ tree_vectorize (void)\n }\n \n static bool\n-gate_tree_vectorize (void)\n+gate_tree_loop_vectorize (void)\n {\n-  return flag_tree_vectorize || cfun->has_force_vect_loops;\n+  return flag_tree_loop_vectorize || cfun->has_force_vect_loops;\n }\n \n namespace {\n@@ -342,8 +342,8 @@ class pass_vectorize : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  bool gate () { return gate_tree_vectorize (); }\n-  unsigned int execute () { return tree_vectorize (); }\n+  bool gate () { return gate_tree_loop_vectorize (); }\n+  unsigned int execute () { return tree_loop_vectorize (); }\n \n }; // class pass_vectorize\n "}, {"sha": "36082147439160ba0c769440240e7297e27307fb", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea0f3e87b9dd370eaa2ff7cb0a842b0107f24963/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea0f3e87b9dd370eaa2ff7cb0a842b0107f24963/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=ea0f3e87b9dd370eaa2ff7cb0a842b0107f24963", "patch": "@@ -3026,7 +3026,7 @@ inhibit_phi_insertion (basic_block bb, pre_expr expr)\n   unsigned i;\n \n   /* If we aren't going to vectorize we don't inhibit anything.  */\n-  if (!flag_tree_vectorize)\n+  if (!flag_tree_loop_vectorize)\n     return false;\n \n   /* Otherwise we inhibit the insertion when the address of the"}, {"sha": "638c19b72eeffb87cf2ac07b91e9c90bd0906196", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea0f3e87b9dd370eaa2ff7cb0a842b0107f24963/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea0f3e87b9dd370eaa2ff7cb0a842b0107f24963/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=ea0f3e87b9dd370eaa2ff7cb0a842b0107f24963", "patch": "@@ -341,7 +341,7 @@ vectorize_loops (void)\n      than all previously defined loops.  This fact allows us to run\n      only over initial loops skipping newly generated ones.  */\n   FOR_EACH_LOOP (li, loop, 0)\n-    if ((flag_tree_vectorize && optimize_loop_nest_for_speed_p (loop))\n+    if ((flag_tree_loop_vectorize && optimize_loop_nest_for_speed_p (loop))\n \t|| loop->force_vect)\n       {\n \tloop_vec_info loop_vinfo;\n@@ -486,10 +486,7 @@ execute_vect_slp (void)\n static bool\n gate_vect_slp (void)\n {\n-  /* Apply SLP either if the vectorizer is on and the user didn't specify\n-     whether to run SLP or not, or if the SLP flag was set by the user.  */\n-  return ((flag_tree_vectorize != 0 && flag_tree_slp_vectorize != 0)\n-          || flag_tree_slp_vectorize == 1);\n+  return flag_tree_slp_vectorize != 0;\n }\n \n namespace {\n@@ -579,7 +576,7 @@ increase_alignment (void)\n static bool\n gate_increase_alignment (void)\n {\n-  return flag_section_anchors && flag_tree_vectorize;\n+  return flag_section_anchors && flag_tree_loop_vectorize;\n }\n \n "}]}