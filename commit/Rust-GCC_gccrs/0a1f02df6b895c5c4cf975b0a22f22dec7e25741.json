{"sha": "0a1f02df6b895c5c4cf975b0a22f22dec7e25741", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGExZjAyZGY2Yjg5NWM1YzRjZjk3NWIwYTIyZjIyZGVjN2UyNTc0MQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2006-09-28T00:45:56Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2006-09-28T00:45:56Z"}, "message": "inclhack.def (solaris_once_init_2): New fix.\n\n\t* inclhack.def (solaris_once_init_2): New fix.\n\t* tests/base/pthread.h: Update.\n\n\t* fixincl.x: Regenerate.\n\nFrom-SVN: r117265", "tree": {"sha": "f87c109dd8d9657647a201bf9aa0cb1d671b42db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f87c109dd8d9657647a201bf9aa0cb1d671b42db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a1f02df6b895c5c4cf975b0a22f22dec7e25741", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a1f02df6b895c5c4cf975b0a22f22dec7e25741", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a1f02df6b895c5c4cf975b0a22f22dec7e25741", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a1f02df6b895c5c4cf975b0a22f22dec7e25741/comments", "author": null, "committer": null, "parents": [{"sha": "fe2c3afcf478f0b26ef5930069be45ba0983fdb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe2c3afcf478f0b26ef5930069be45ba0983fdb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe2c3afcf478f0b26ef5930069be45ba0983fdb3"}], "stats": {"total": 114, "additions": 109, "deletions": 5}, "files": [{"sha": "a0af51ceab247b8f56e55401e66913c73759f8e0", "filename": "fixincludes/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a1f02df6b895c5c4cf975b0a22f22dec7e25741/fixincludes%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a1f02df6b895c5c4cf975b0a22f22dec7e25741/fixincludes%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FChangeLog?ref=0a1f02df6b895c5c4cf975b0a22f22dec7e25741", "patch": "@@ -1,3 +1,10 @@\n+2006-09-27  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* inclhack.def (solaris_once_init_2): New fix.\n+\t* tests/base/pthread.h: Update.\n+\n+\t* fixincl.x: Regenerate.\n+\n 2006-09-27  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* inclhack.def (solaris_mutex_init_2): Remove test for"}, {"sha": "742897e0be69bc27a897cb38ad220524f3dcd1e7", "filename": "fixincludes/fixincl.x", "status": "modified", "additions": 54, "deletions": 5, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a1f02df6b895c5c4cf975b0a22f22dec7e25741/fixincludes%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a1f02df6b895c5c4cf975b0a22f22dec7e25741/fixincludes%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixincl.x?ref=0a1f02df6b895c5c4cf975b0a22f22dec7e25741", "patch": "@@ -2,11 +2,11 @@\n  * \n  * DO NOT EDIT THIS FILE   (fixincl.x)\n  * \n- * It has been AutoGen-ed  Tuesday September 26, 2006 at 11:56:29 AM EDT\n+ * It has been AutoGen-ed  Wednesday September 27, 2006 at 08:16:42 PM EDT\n  * From the definitions    inclhack.def\n  * and the template file   fixincl\n  */\n-/* DO NOT CVS-MERGE THIS FILE, EITHER Tue Sep 26 11:56:29 EDT 2006\n+/* DO NOT CVS-MERGE THIS FILE, EITHER Wed Sep 27 20:16:42 EDT 2006\n  *\n  * You must regenerate it.  Use the ./genfixes script.\n  *\n@@ -15,7 +15,7 @@\n  * certain ANSI-incompatible system header files which are fixed to work\n  * correctly with ANSI C and placed in a directory that GNU C will search.\n  *\n- * This file contains 198 fixup descriptions.\n+ * This file contains 199 fixup descriptions.\n  *\n  * See README for more information.\n  *\n@@ -5576,6 +5576,49 @@ static const char* apzSolaris_Once_Init_1Patch[] = {\n     \"(^#define[ \\t]+PTHREAD_ONCE_INIT[ \\t]+\\\\{)([^}]+)(\\\\})[ \\t]*$\",\n     (char*)NULL };\n \n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Solaris_Once_Init_2 fix\n+ */\n+tSCC zSolaris_Once_Init_2Name[] =\n+     \"solaris_once_init_2\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zSolaris_Once_Init_2List[] =\n+  \"|pthread.h|\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+tSCC* apzSolaris_Once_Init_2Machs[] = {\n+        \"*-*-solaris2.[0-9]\",\n+        \"*-*-solaris2.[0-9][!0-9]*\",\n+        (const char*)NULL };\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zSolaris_Once_Init_2Select0[] =\n+       \"@\\\\(#\\\\)pthread.h[ \\t]+1.[0-9]+[ \\t]+[0-9/]+ SMI\";\n+\n+#define    SOLARIS_ONCE_INIT_2_TEST_CT  1\n+static tTestDesc aSolaris_Once_Init_2Tests[] = {\n+  { TT_EGREP,    zSolaris_Once_Init_2Select0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Solaris_Once_Init_2\n+ */\n+static const char* apzSolaris_Once_Init_2Patch[] = {\n+    \"format\",\n+    \"#if __STDC__ - 0 == 0 && !defined(_NO_LONGLONG)\\n\\\n+%0\\n\\\n+#else\\n\\\n+%1{0}, {0}, {0}, {%3}%4\\n\\\n+#endif\",\n+    \"(^#define[ \\t]+PTHREAD_ONCE_INIT[ \\t]+\\\\{\\\\{)(0, 0, 0, )(PTHREAD_[A-Z_]+)(\\\\}\\\\})[ \\t]*$\",\n+    (char*)NULL };\n+\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of Solaris_Socket fix\n@@ -8057,9 +8100,9 @@ static const char* apzX11_SprintfPatch[] = {\n  *\n  *  List of all fixes\n  */\n-#define REGEX_COUNT          241\n+#define REGEX_COUNT          242\n #define MACH_LIST_SIZE_LIMIT 261\n-#define FIX_COUNT            198\n+#define FIX_COUNT            199\n \n /*\n  *  Enumerate the fixes\n@@ -8200,6 +8243,7 @@ typedef enum {\n     SOLARIS_MUTEX_INIT_2_FIXIDX,\n     SOLARIS_RWLOCK_INIT_1_FIXIDX,\n     SOLARIS_ONCE_INIT_1_FIXIDX,\n+    SOLARIS_ONCE_INIT_2_FIXIDX,\n     SOLARIS_SOCKET_FIXIDX,\n     SOLARIS_STDIO_TAG_FIXIDX,\n     SOLARIS_UNISTD_FIXIDX,\n@@ -8941,6 +8985,11 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n      SOLARIS_ONCE_INIT_1_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n      aSolaris_Once_Init_1Tests,   apzSolaris_Once_Init_1Patch, 0 },\n \n+  {  zSolaris_Once_Init_2Name,    zSolaris_Once_Init_2List,\n+     apzSolaris_Once_Init_2Machs,\n+     SOLARIS_ONCE_INIT_2_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aSolaris_Once_Init_2Tests,   apzSolaris_Once_Init_2Patch, 0 },\n+\n   {  zSolaris_SocketName,    zSolaris_SocketList,\n      apzSolaris_SocketMachs,\n      SOLARIS_SOCKET_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,"}, {"sha": "f8d16643b0cfcd61c89b7de9f6cbaecdabf51f30", "filename": "fixincludes/inclhack.def", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a1f02df6b895c5c4cf975b0a22f22dec7e25741/fixincludes%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a1f02df6b895c5c4cf975b0a22f22dec7e25741/fixincludes%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Finclhack.def?ref=0a1f02df6b895c5c4cf975b0a22f22dec7e25741", "patch": "@@ -3033,6 +3033,39 @@ fix = {\n };\n \n \n+/*\n+ * Sun Solaris defines PTHREAD_ONCE_INIT with a \"0\" for some\n+ *  fields of the pthread_once_t structure, which are of type\n+ *  upad64_t, which itself is typedef'd to int64_t, but with __STDC__\n+ *  defined (e.g. by -ansi) it is a union. So change the initializer\n+ *  to \"{0}\" instead.  This test relies on solaris_once_init_1.\n+ */\n+fix = {\n+    hackname = solaris_once_init_2;\n+    select = '@\\(#\\)pthread.h' \"[ \\t]+1.[0-9]+[ \\t]+[0-9/]+ SMI\";\n+    files = pthread.h;\n+    /*\n+     * On Solaris 10, this fix is unnecessary because upad64_t is\n+     * always defined correctly regardless of the definition of the\n+     * __STDC__ macro.  The first \"match\" pattern matches up to\n+     * solaris9.  The second \"mach\" pattern will not match any two (or\n+     * more) digit solaris version, but it will match e.g. 2.5.1.\n+     */\n+    mach = '*-*-solaris2.[0-9]', '*-*-solaris2.[0-9][!0-9]*';\n+    c_fix = format;\n+    c_fix_arg = \"#if __STDC__ - 0 == 0 && !defined(_NO_LONGLONG)\\n\"\n+                \"%0\\n\"\n+                \"#else\\n\"\n+                \"%1{0}, {0}, {0}, {%3}%4\\n\"\n+                \"#endif\";\n+    c_fix_arg = \"(^#define[ \\t]+PTHREAD_ONCE_INIT[ \\t]+\\\\{\\\\{)\"\n+                \"(0, 0, 0, )(PTHREAD_[A-Z_]+)(\\\\}\\\\})[ \\t]*$\";\n+    test_text =\n+    '#ident \"@(#)pthread.h  1.26  98/04/12 SMI\"'\"\\n\"\n+    \"#define PTHREAD_ONCE_INIT\\t{{0, 0, 0, PTHREAD_ONCE_NOTDONE}}\\n\";\n+};\n+\n+\n /*\n  * Solaris 2.5.1 and 2.6 use an outdated prototype for send & recv\n  * in sys/socket.h.  This is corrected in Solaris 7 and up."}, {"sha": "5f6adf3b23b6d5a82260b461c67fabdc62a12548", "filename": "fixincludes/tests/base/pthread.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a1f02df6b895c5c4cf975b0a22f22dec7e25741/fixincludes%2Ftests%2Fbase%2Fpthread.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a1f02df6b895c5c4cf975b0a22f22dec7e25741/fixincludes%2Ftests%2Fbase%2Fpthread.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fpthread.h?ref=0a1f02df6b895c5c4cf975b0a22f22dec7e25741", "patch": "@@ -109,10 +109,25 @@ extern int __sigsetjmp (struct __jmp_buf_tag *__env, int __savemask);\n \n #if defined( SOLARIS_ONCE_INIT_1_CHECK )\n #pragma ident\t\"@(#)pthread.h\t1.37\t04/09/28 SMI\"\n+#if __STDC__ - 0 == 0 && !defined(_NO_LONGLONG)\n #define PTHREAD_ONCE_INIT\t{{0, 0, 0, PTHREAD_ONCE_NOTDONE}}\n+#else\n+#define PTHREAD_ONCE_INIT\t{{{0}, {0}, {0}, {PTHREAD_ONCE_NOTDONE}}}\n+#endif\n #endif  /* SOLARIS_ONCE_INIT_1_CHECK */\n \n \n+#if defined( SOLARIS_ONCE_INIT_2_CHECK )\n+#ident \"@(#)pthread.h  1.26  98/04/12 SMI\"\n+#if __STDC__ - 0 == 0 && !defined(_NO_LONGLONG)\n+#define PTHREAD_ONCE_INIT\t{{0, 0, 0, PTHREAD_ONCE_NOTDONE}}\n+#else\n+#define PTHREAD_ONCE_INIT\t{{{0}, {0}, {0}, {PTHREAD_ONCE_NOTDONE}}}\n+#endif\n+\n+#endif  /* SOLARIS_ONCE_INIT_2_CHECK */\n+\n+\n #if defined( THREAD_KEYWORD_CHECK )\n extern int pthread_create (pthread_t *__restrict __thr,\n extern int pthread_kill (pthread_t __thr, int __signo);"}]}