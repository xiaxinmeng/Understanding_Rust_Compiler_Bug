{"sha": "a6f78652f32a034254a55108f6fc441f3938b384", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTZmNzg2NTJmMzJhMDM0MjU0YTU1MTA4ZjZmYzQ0MWYzOTM4YjM4NA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-02-08T01:59:11Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-02-08T01:59:11Z"}, "message": "c-common.c (shadow_warning): Delete.\n\n\t* c-common.c (shadow_warning): Delete.\n\t* c-common.h (free_parser_stacks, shadow_warning, sw_kind): Delete.\n\t* c-decl.c (warn_if_shadowing): Issue shadow warnings directly.\n\t* c-opts.c (c_common_parse_file): Don't call free_parser_stacks.\n\t* c-parse.in (free_parser_stacks): Delete.\ncp:\n\t* name-lookup.c (pushdecl): Issue shadow warnings directly.\n\t* parser.c (free_parser_stacks): Delete.\ntestsuite:\n\t* gcc.c-torture/execute/string-opt-15.c: Define memcmp with void *\n\targuments.\n\t* gcc.dg/fwritable-strings-1.c: Expect the deprecation notice.\n------\n\tBug 13856\n\t* c-decl.c (diagnose_mismatched_decls): Only give special\n\ttreatment when olddecl is DECL_BUILT_IN, if C_DECL_INVISIBLE\n\tis also true.\n\t(merge_decls): Don't clear DECL_BUILT_IN_CLASS and\n\tDECL_FUNCTION_CODE when defining a built-in function.\n\tDon't update DECL_ESTIMATED_INSNS.\n\t* dwarf2out.c (dwarf2out_decl): Don't ignore built-in\n\tFUNCTION_DECLs.\n\t* tree.h: Delete DECL_ESTIMATED_INSNS.\n\t* tree-inline.c (struct inline_data): Delete inlined_insns field.\n\t(expand_call_inline, optimize_inline_calls): Don't update\n\tDECL_ESTIMATED_INSNS nor inlined_insns.\n\t* cgraphunit.c (cgraph_analyze_function): Don't update\n\tDECL_ESTIMATED_INSNS.\ncp:\n\t* optimize.c (maybe_clone_body): Don't update DECL_ESTIMATED_INSNS.\n\t* decl.c (duplicate_decls, start_function): Likewise.\ntestsuite:\n\t* gcc.dg/visibility-8.c: New testcase.\n\nFrom-SVN: r77475", "tree": {"sha": "d4cd835e75cfa41869573447cf76d5e4dc2453ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4cd835e75cfa41869573447cf76d5e4dc2453ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6f78652f32a034254a55108f6fc441f3938b384", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6f78652f32a034254a55108f6fc441f3938b384", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6f78652f32a034254a55108f6fc441f3938b384", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6f78652f32a034254a55108f6fc441f3938b384/comments", "author": null, "committer": null, "parents": [{"sha": "19755f98085f704920fc64656a5f6e4dfaecf11e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19755f98085f704920fc64656a5f6e4dfaecf11e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19755f98085f704920fc64656a5f6e4dfaecf11e"}], "stats": {"total": 324, "additions": 157, "deletions": 167}, "files": [{"sha": "a0bab4f2adee37923d6ca4dc6108a66b4c82a88c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 71, "deletions": 45, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6f78652f32a034254a55108f6fc441f3938b384/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6f78652f32a034254a55108f6fc441f3938b384/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a6f78652f32a034254a55108f6fc441f3938b384", "patch": "@@ -1,3 +1,29 @@\n+2004-02-07  Zack Weinberg  <zack@codesourcery.com>\n+\n+\tBug 13856\n+\t* c-decl.c (diagnose_mismatched_decls): Only give special\n+\ttreatment when olddecl is DECL_BUILT_IN, if C_DECL_INVISIBLE\n+\tis also true.\n+\t(merge_decls): Don't clear DECL_BUILT_IN_CLASS and\n+\tDECL_FUNCTION_CODE when defining a built-in function.\n+\tDon't update DECL_ESTIMATED_INSNS.\n+\t* dwarf2out.c (dwarf2out_decl): Don't ignore built-in\n+\tFUNCTION_DECLs.\n+\t* tree.h: Delete DECL_ESTIMATED_INSNS.\n+\t* tree-inline.c (struct inline_data): Delete inlined_insns field.\n+\t(expand_call_inline, optimize_inline_calls): Don't update\n+\tDECL_ESTIMATED_INSNS nor inlined_insns.\n+\t* cgraphunit.c (cgraph_analyze_function): Don't update\n+\tDECL_ESTIMATED_INSNS.\n+\n+2004-02-07  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* c-common.c (shadow_warning): Delete.\n+\t* c-common.h (free_parser_stacks, shadow_warning, sw_kind): Delete.\n+\t* c-decl.c (warn_if_shadowing): Issue shadow warnings directly.\n+\t* c-opts.c (c_common_parse_file): Don't call free_parser_stacks.\n+\t* c-parse.in (free_parser_stacks): Delete.\n+\n 2004-02-07  Nathanael Nerode  <neroden@gcc.gnu.org>\n \n \t* Makefile.in, config/t-slibgcc-darwin, config/t-slibgcc-elf-ver,\n@@ -114,7 +140,7 @@\n \n 2004-02-06  Andrew Pinski  <pinskia@physics.uc.edu>\n \n-\t* dwarf2out.c (loclabel_num): Move into #ifdef \n+\t* dwarf2out.c (loclabel_num): Move into #ifdef\n \tDWARF2_DEBUGGING_INFO.\n \n 2004-02-06  Ziemowit Laski  <zlaski@apple.com>\n@@ -130,7 +156,7 @@\n \t(eliminate_regs_in_insn): Likewise.\n \n 2004-02-06  Daniel Berlin <dberlin@dberlin.org>\n-            Josef Zlomek  <zlomekj@suse.cz>\n+\t    Josef Zlomek  <zlomekj@suse.cz>\n \n \t* dwarf2out.c (struct gcc_debug_hooks): Call dwarf2out_begin_function\n \tat the beginning of function, call dwarf2out_var_location for\n@@ -166,7 +192,7 @@\n \tall insns forces by an insn, not just the first one.\n \n 2004-02-06  Josef Zlomek  <zlomekj@suse.cz>\n-            Daniel Berlin <dberlin@dberlin.org>\n+\t    Daniel Berlin <dberlin@dberlin.org>\n \n \tJosef Zlomek  <zlomekj@suse.cz>\n \t* Makefile.in (var-tracking.o): New.\n@@ -175,31 +201,31 @@\n \t* gengtype.c (adjust_field_rtx_def): NOTE_INSN_VAR_LOCATION was added.\n \t* opts.c (common_handle_option): Add OPT_fvar_tracking.\n \t* print-rtl.c (print_rtx): NOTE_INSN_VAR_LOCATION was added.\n-        * rtl.c (note_insn_name): Likewise.\n-        * rtl.def (VAR_LOCATION): New.\n-        * rtl.h (NOTE_VAR_LOCATION): New.\n-        (NOTE_VAR_LOCATION_DECL): New.\n-        (NOTE_VAR_LOCATION_LOC): New.\n-        (enum insn_note): NOTE_INSN_VAR_LOCATION was added.\n-        (variable_tracking_main): New exported function.\n-        * timevar.def (TV_VAR_TRACKING): New.\n-        * toplev.c (enum dump_file_index): Added DFI_vartrack.\n-        (dump_file): \"vartrack\" was added (-dV).\n-        (flag_var_tracking): New.\n-        (f_options): \"var-tracking\" was added.\n+\t* rtl.c (note_insn_name): Likewise.\n+\t* rtl.def (VAR_LOCATION): New.\n+\t* rtl.h (NOTE_VAR_LOCATION): New.\n+\t(NOTE_VAR_LOCATION_DECL): New.\n+\t(NOTE_VAR_LOCATION_LOC): New.\n+\t(enum insn_note): NOTE_INSN_VAR_LOCATION was added.\n+\t(variable_tracking_main): New exported function.\n+\t* timevar.def (TV_VAR_TRACKING): New.\n+\t* toplev.c (enum dump_file_index): Added DFI_vartrack.\n+\t(dump_file): \"vartrack\" was added (-dV).\n+\t(flag_var_tracking): New.\n+\t(f_options): \"var-tracking\" was added.\n \t(rest_of_handle_variable_tracking): New function.\n-        (rest_of_compilation): Run variable tracking.\n+\t(rest_of_compilation): Run variable tracking.\n \t(process_options): If user has not specified flag_var_tracking set it\n \taccording to optimize, debug_info_level and debug_hooks.\n \t* tree.h (frame_base_decl): New.\n-        * var-tracking.c: New file.\n+\t* var-tracking.c: New file.\n \t* config/ia64/ia64.c (ia64_flag_var_tracking): New variable.\n \t(ia64_override_options): Set flags to run variable tracking in machine\n \tdependent reorg instead of toplev.c.\n \t(ia64_reorg): Run variable tracking if wanted.\n-        * doc/invoke.texi: Mention variable tracking in -dV,\n+\t* doc/invoke.texi: Mention variable tracking in -dV,\n \tadd and -fvar-tracking.\n-        * doc/passes.texi: Added variable tracking pass.\n+\t* doc/passes.texi: Added variable tracking pass.\n \n \tDaniel Berlin <dberlin@dberlin.org>\n \t* debug.h (struct gcc_debug_hooks): Added var_location debug hook.\n@@ -210,8 +236,8 @@\n \t* dwarfout.c (dwarf_debug_hooks): Likewise.\n \t* sdbout.c (sdb_debug_hooks): Likewise.\n \t* vmsdbgout.c (vmsdbg_debug_hooks): Likewise.\n-\t* final.c (final_scan_insn): Call var_location debug hook for each \n-\tNOTE_INSN_VAR_LOCATION. \n+\t* final.c (final_scan_insn): Call var_location debug hook for each\n+\tNOTE_INSN_VAR_LOCATION.\n \n 2004-02-06  Jan Hubicka  <jh@suse.cz>\n \n@@ -407,7 +433,7 @@\n \n \t* dwarf2out.c (force_type_die): Look up input type itself\n \tinstead of root_type() of type.\n-\t\n+\n 2004-02-05  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n \t* config/s390/s390.md (\"*tmqidi_ext\"): New insn.\n@@ -611,8 +637,8 @@\n \tby reference if ARCH32.\n \n 2004-02-04  Aldy Hernandez  <aldyh@redhat.com>\n- \n-        * cgraphunit.c (cgraph_postorder): Fix typo in comment.\n+\n+\t* cgraphunit.c (cgraph_postorder): Fix typo in comment.\n \n 2004-02-04  Ulrich Weigand  <uweigand@de.ibm.com>\n \n@@ -697,7 +723,7 @@\n \tpointer when all VALUE's locations has been invalidated.\n \t(rtx_equal_for_memref_p): Simplify checking of VALUEs.\n \n-2004-02-03  Wolfgang Bangerth  <bangerth@dealii.org> \n+2004-02-03  Wolfgang Bangerth  <bangerth@dealii.org>\n \n \t* doc/invoke.texi (x86 options): Fix spelling/wording.\n \n@@ -1223,8 +1249,8 @@\n \n 2004-02-02  Richard Henderson  <rth@redhat.com>\n \n-        PR target/13789\n-        * expr.c (store_expr): Use force_operand before emit_move_insn.\n+\tPR target/13789\n+\t* expr.c (store_expr): Use force_operand before emit_move_insn.\n \n 2004-02-02  Jeff Law  <law@redhat.com>\n \t    Roger Sayle  <roger@eyesopen.com>\n@@ -1260,24 +1286,24 @@\n \tgen_rtx.\n \n 2004-02-02  Eric Christopher  <echristo@redhat.com>\n-            Zack Weinberg  <zack@codesourcery.com>\n+\t    Zack Weinberg  <zack@codesourcery.com>\n \n \t* c-opts.c (c_common_handle_option): Add -finput-charset.\n-        * c.opt: Ditto.\n-        * cppcharset.c (one_iso88591_to_utf8): Remove.\n-        (convert_iso88591_utf8): Ditto.\n-        (conversion_tab): Remove 8859-1 converter.\n-        (_cpp_input_to_utf8): Remove.\n-        (_cpp_init_iconv_buffer): Ditto.\n-        (_cpp_close_iconv_buffer): Ditto.\n-        (_cpp_convert_input): New function.\n-        (_cpp_default_encoding): Ditto.\n-        * cpphash.h: Add/remove prototypes for above.\n-        * cppfiles.c (read_file_guts): Use _cpp_convert_input.\n-        * cppinit.c (cpp_create_reader): Use _cpp_default_encoding\n-        for narrow execution and input character sets.\n-        * cpplib.c (cpp_push_buffer): Delete uses of removed functions.\n-        * doc/cppopts.texi: Document -finput-charset.\n+\t* c.opt: Ditto.\n+\t* cppcharset.c (one_iso88591_to_utf8): Remove.\n+\t(convert_iso88591_utf8): Ditto.\n+\t(conversion_tab): Remove 8859-1 converter.\n+\t(_cpp_input_to_utf8): Remove.\n+\t(_cpp_init_iconv_buffer): Ditto.\n+\t(_cpp_close_iconv_buffer): Ditto.\n+\t(_cpp_convert_input): New function.\n+\t(_cpp_default_encoding): Ditto.\n+\t* cpphash.h: Add/remove prototypes for above.\n+\t* cppfiles.c (read_file_guts): Use _cpp_convert_input.\n+\t* cppinit.c (cpp_create_reader): Use _cpp_default_encoding\n+\tfor narrow execution and input character sets.\n+\t* cpplib.c (cpp_push_buffer): Delete uses of removed functions.\n+\t* doc/cppopts.texi: Document -finput-charset.\n \n 2004-02-02  David Edelsohn  <edelsohn@gnu.org>\n \n@@ -1717,7 +1743,7 @@\n \n 2004-01-30  Fariborz Jahanian <fjahanian@apple.com>\n \n-        * config/rs6000/rs6000.c (rs6000_emit_move): Remove #if 0.\n+\t* config/rs6000/rs6000.c (rs6000_emit_move): Remove #if 0.\n \tCopy operands[1] to pseudo for simplify_gen_subreg.\n \n 2004-01-30  Kazu Hirata  <kazu@cs.umass.edu>\n@@ -1736,7 +1762,7 @@\n \tcommuting XOR with ASHIFTRT.\n \n 2004-01-30  Kazu Hirata  <kazu@cs.umass.edu>\n-            Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\t    Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* config/sparc/sparc-protos.h: Remove the prototype for\n \tsparc_builtin_saveregs."}, {"sha": "c31c671e9a26543eeb8fba85c6d3807c9b17ec6a", "filename": "gcc/c-common.c", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6f78652f32a034254a55108f6fc441f3938b384/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6f78652f32a034254a55108f6fc441f3938b384/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=a6f78652f32a034254a55108f6fc441f3938b384", "patch": "@@ -4266,21 +4266,6 @@ c_init_attributes (void)\n #undef DEF_ATTR_TREE_LIST\n }\n \n-/* Output a -Wshadow warning MSGCODE about NAME, and give the location\n-   of the previous declaration DECL.  */\n-void\n-shadow_warning (enum sw_kind msgcode, const char *name, tree decl)\n-{\n-  static const char *const msgs[] = {\n-    /* SW_PARAM  */ N_(\"declaration of \\\"%s\\\" shadows a parameter\"),\n-    /* SW_LOCAL  */ N_(\"declaration of \\\"%s\\\" shadows a previous local\"),\n-    /* SW_GLOBAL */ N_(\"declaration of \\\"%s\\\" shadows a global declaration\")\n-  };\n-\n-  warning (msgs[msgcode], name);\n-  warning (\"%Jshadowed declaration is here\", decl);\n-}\n-\n /* Attribute handlers common to C front ends.  */\n \n /* Handle a \"packed\" attribute; arguments as in"}, {"sha": "5529252f6c6ed6f51a77318a5425a1ade0dde9f6", "filename": "gcc/c-common.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6f78652f32a034254a55108f6fc441f3938b384/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6f78652f32a034254a55108f6fc441f3938b384/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=a6f78652f32a034254a55108f6fc441f3938b384", "patch": "@@ -330,8 +330,6 @@ extern void (*lang_expand_function_end) (void);\n extern int (*lang_missing_noreturn_ok_p) (tree);\n \n extern int yyparse (void);\n-extern void free_parser_stacks (void);\n-\n extern stmt_tree current_stmt_tree (void);\n extern tree *current_scope_stmt_stack (void);\n extern void begin_stmt_tree (tree *);\n@@ -347,8 +345,6 @@ extern tree c_begin_if_stmt (void);\n extern tree c_begin_while_stmt (void);\n extern void c_finish_while_stmt_cond (tree, tree);\n \n-enum sw_kind { SW_PARAM = 0, SW_LOCAL, SW_GLOBAL };\n-extern void shadow_warning (enum sw_kind, const char *, tree);\n extern int field_decl_cmp (const void *, const void *);\n extern void resort_sorted_fields (void *, void *, gt_pointer_operator, \n                                   void *);"}, {"sha": "87d24a9ead495f57ee8f2b28f8dec0cc6fa128e1", "filename": "gcc/c-decl.c", "status": "modified", "additions": 13, "deletions": 23, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6f78652f32a034254a55108f6fc441f3938b384/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6f78652f32a034254a55108f6fc441f3938b384/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=a6f78652f32a034254a55108f6fc441f3938b384", "patch": "@@ -939,7 +939,8 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n      unless OLDDECL is a builtin.  OLDDECL will be discarded in any case.  */\n   if (TREE_CODE (olddecl) != TREE_CODE (newdecl))\n     {\n-      if (TREE_CODE (olddecl) != FUNCTION_DECL || !DECL_BUILT_IN (olddecl))\n+      if (TREE_CODE (olddecl) != FUNCTION_DECL\n+          || !DECL_BUILT_IN (olddecl) || !C_DECL_INVISIBLE (olddecl))\n \t{\n \t  error (\"%J'%D' redeclared as different kind of symbol\",\n \t\t newdecl, newdecl);\n@@ -956,7 +957,8 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \n   if (!comptypes (oldtype, newtype, COMPARE_STRICT))\n     {\n-      if (TREE_CODE (olddecl) == FUNCTION_DECL && DECL_BUILT_IN (olddecl))\n+      if (TREE_CODE (olddecl) == FUNCTION_DECL\n+\t  && DECL_BUILT_IN (olddecl) && C_DECL_INVISIBLE (olddecl))\n \t{\n \t  /* Accept harmless mismatch in function types.\n \t     This is for the ffs and fprintf builtins.  */\n@@ -1034,6 +1036,7 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \t can't validate the argument list) the built-in definition is\n \t overridden, but optionally warn this was a bad choice of name.  */\n       if (DECL_BUILT_IN (olddecl)\n+\t  && C_DECL_INVISIBLE (olddecl)\n \t  && (!TREE_PUBLIC (newdecl)\n \t      || (DECL_INITIAL (newdecl)\n \t\t  && !TYPE_ARG_TYPES (TREE_TYPE (newdecl)))))\n@@ -1428,20 +1431,9 @@ merge_decls (tree newdecl, tree olddecl, tree newtype, tree oldtype)\n \n       if (DECL_BUILT_IN (olddecl))\n \t{\n-\t  /* Get rid of any built-in function if we have a function\n-\t     definition.  */\n-\t  if (new_is_definition)\n-\t    {\n-\t      TREE_TYPE (olddecl) = TREE_TYPE (newdecl);\n-\t      DECL_BUILT_IN_CLASS (olddecl) = NOT_BUILT_IN;\n-\t    }\n-\t  else\n-\t    {\n-\t      /* If redeclaring a builtin function, and not a definition,\n-\t\t it stays built in.  */\n-\t      DECL_BUILT_IN_CLASS (newdecl) = DECL_BUILT_IN_CLASS (olddecl);\n-\t      DECL_FUNCTION_CODE (newdecl) = DECL_FUNCTION_CODE (olddecl);\n-\t    }\n+\t  /* If redeclaring a builtin function, it stays built in.  */\n+\t  DECL_BUILT_IN_CLASS (newdecl) = DECL_BUILT_IN_CLASS (olddecl);\n+\t  DECL_FUNCTION_CODE (newdecl) = DECL_FUNCTION_CODE (olddecl);\n \t}\n \n       /* Also preserve various other info from the definition.  */\n@@ -1451,7 +1443,6 @@ merge_decls (tree newdecl, tree olddecl, tree newtype, tree oldtype)\n \t  DECL_INITIAL (newdecl) = DECL_INITIAL (olddecl);\n \t  DECL_SAVED_INSNS (newdecl) = DECL_SAVED_INSNS (olddecl);\n \t  DECL_SAVED_TREE (newdecl) = DECL_SAVED_TREE (olddecl);\n-\t  DECL_ESTIMATED_INSNS (newdecl) = DECL_ESTIMATED_INSNS (olddecl);\n \t  DECL_ARGUMENTS (newdecl) = DECL_ARGUMENTS (olddecl);\n \n \t  /* Set DECL_INLINE on the declaration if we've got a body\n@@ -1553,8 +1544,6 @@ record_external_decl (tree decl)\n static void\n warn_if_shadowing (tree x, tree old)\n {\n-  const char *name;\n-\n   /* Nothing to shadow?  */\n   if (old == 0\n       /* Shadow warnings not wanted?  */\n@@ -1571,13 +1560,14 @@ warn_if_shadowing (tree x, tree old)\n       || (TREE_CODE (x) == PARM_DECL && current_scope->outer->parm_flag))\n     return;\n \n-  name = IDENTIFIER_POINTER (DECL_NAME (x));\n   if (TREE_CODE (old) == PARM_DECL)\n-    shadow_warning (SW_PARAM, name, old);\n+    warning (\"%Jdeclaration of '%D' shadows a parameter\", x, x);\n   else if (DECL_FILE_SCOPE_P (old))\n-    shadow_warning (SW_GLOBAL, name, old);\n+    warning (\"%Jdeclaration of '%D' shadows a global declaration\", x, x);\n   else\n-    shadow_warning (SW_LOCAL, name, old);\n+    warning (\"%Jdeclaration of '%D' shadows a previous local\", x, x);\n+\n+  warning (\"%Jshadowed declaration is here\", old);\n }\n \n "}, {"sha": "3f773be18d99eb558462328e2c58b3061f834512", "filename": "gcc/c-opts.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6f78652f32a034254a55108f6fc441f3938b384/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6f78652f32a034254a55108f6fc441f3938b384/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=a6f78652f32a034254a55108f6fc441f3938b384", "patch": "@@ -1237,7 +1237,6 @@ c_common_parse_file (int set_yydebug ATTRIBUTE_UNUSED)\n       file_index++;\n     } while (file_index < num_in_fnames);\n   \n-  free_parser_stacks ();\n   finish_file ();\n }\n "}, {"sha": "d177250e125c460b6b6478f02aa965f67f627f28", "filename": "gcc/c-parse.in", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6f78652f32a034254a55108f6fc441f3938b384/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6f78652f32a034254a55108f6fc441f3938b384/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=a6f78652f32a034254a55108f6fc441f3938b384", "patch": "@@ -3763,13 +3763,6 @@ yyprint (FILE *file, int yychar, YYSTYPE yyl)\n /* This is not the ideal place to put these, but we have to get them out\n    of c-lex.c because cp/lex.c has its own versions.  */\n \n-/* Free malloced parser stacks if necessary.  */\n-\n-void\n-free_parser_stacks (void)\n-{\n-}\n-\n /* Parse the file.  */\n void\n c_parse_file (void)"}, {"sha": "78b566f5c68c85cac1eae1750d76af3ec453265e", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6f78652f32a034254a55108f6fc441f3938b384/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6f78652f32a034254a55108f6fc441f3938b384/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=a6f78652f32a034254a55108f6fc441f3938b384", "patch": "@@ -327,10 +327,9 @@ cgraph_analyze_function (struct cgraph_node *node)\n   cgraph_create_edges (decl, DECL_SAVED_TREE (decl));\n \n   node->local.inlinable = tree_inlinable_function_p (decl);\n-  if (!DECL_ESTIMATED_INSNS (decl))\n-    DECL_ESTIMATED_INSNS (decl)\n+  if (!node->local.self_insns)\n+    node->local.self_insns\n       = (*lang_hooks.tree_inlining.estimate_num_insns) (decl);\n-  node->local.self_insns = DECL_ESTIMATED_INSNS (decl);\n   if (node->local.inlinable)\n     node->local.disregard_inline_limits\n       = (*lang_hooks.tree_inlining.disregard_inline_limits) (decl);"}, {"sha": "661d9e7630acd5df33c38cd7f34639540083f129", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6f78652f32a034254a55108f6fc441f3938b384/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6f78652f32a034254a55108f6fc441f3938b384/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a6f78652f32a034254a55108f6fc441f3938b384", "patch": "@@ -1,3 +1,14 @@\n+2004-02-07  Zack Weinberg  <zack@codesourcery.com>\n+\n+\tBug 13856\n+\t* optimize.c (maybe_clone_body): Don't update DECL_ESTIMATED_INSNS.\n+\t* decl.c (duplicate_decls, start_function): Likewise.\n+\n+2004-02-07  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* name-lookup.c (pushdecl): Issue shadow warnings directly.\n+\t* parser.c (free_parser_stacks): Delete.\n+\n 2004-02-07  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* rtti.c: Update copyright.\n@@ -45,7 +56,7 @@\n 2003-02-05  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n \n \tPR c++/14008\n-\t* parser.c (cp_parser_diagnose_invalid_typename): Removed parsing \n+\t* parser.c (cp_parser_diagnose_invalid_typename): Removed parsing\n \tcode, only emits the diagnostic now. Added lookup of the identifier\n \tand support for qualified ids.\n \t(cp_parser_parse_and_diagnose_invalid_type_name): New function.\n@@ -177,10 +188,10 @@\n \n 2004-01-30  Richard Henderson  <rth@redhat.com>\n \n-        PR c++/13693\n-        * method.c (use_thunk): Don't force_target_expr for void thunks.\n-        * tree.c (build_target_expr_with_type): Assert non-void type.\n-        (force_target_expr): Likewise.\n+\tPR c++/13693\n+\t* method.c (use_thunk): Don't force_target_expr for void thunks.\n+\t* tree.c (build_target_expr_with_type): Assert non-void type.\n+\t(force_target_expr): Likewise.\n \n 2004-01-30  Michael Matz  <matz@suse.de>\n \n@@ -207,7 +218,7 @@\n \n 2004-01-28  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n \n-\t* parser.c (cp_parser_template_id): Parse tentatively `[:' after a \n+\t* parser.c (cp_parser_template_id): Parse tentatively `[:' after a\n \ttemplate name as it was `<::' (digraph typo).\n \t(cp_parser_nth_token_starts_template_argument_list_p): New function.\n \t(cp_parser_id_expression): Use it.\n@@ -237,7 +248,7 @@\n \t* name-lookup.c: Include \"debug.h\"\n \t(do_namespace_alias): Invoke debug_hooks to emit debug info\n \tfor namespace alias.\n-\t(do_local_using_decl): Invoke debug_hooks to emit debug info \n+\t(do_local_using_decl): Invoke debug_hooks to emit debug info\n \tfor using decl.\n \t(do_class_using_decl): Same.\n \t(do_toplevel_using_decl): Same.\n@@ -295,7 +306,7 @@\n 2004-01-25  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n \n \tPR c++/13810\n-\t* parser.c (cp_parser_type_parameter): When cp_parser_id_expression \n+\t* parser.c (cp_parser_type_parameter): When cp_parser_id_expression\n \treturns a TYPE_DECL. no further lookup is required.\n \t* semantics.c (check_template_template_default_arg): A TYPE_DECL\n \tis invalid. Rework to give better diagnostics.\n@@ -336,7 +347,7 @@\n \n 2004-01-20  Kelley Cook  <kcook@gcc.gnu.org>\n \n-\t* Make-lang.in (CXX_INSTALL_NAME, GXX_INSTALL_NAME, \n+\t* Make-lang.in (CXX_INSTALL_NAME, GXX_INSTALL_NAME,\n \tCXX_TARGET_INSTALL_NAME, GXX_TARGET_INSTALL_NAME): Define via a\n \timmediate $(shell) instead of deferred backquote.\n \n@@ -444,7 +455,7 @@\n 2004-01-15  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n \n \tPR c++/8856\n-\t* parser.c (cp_parser_template_name): Don't try to parse a \n+\t* parser.c (cp_parser_template_name): Don't try to parse a\n \tconversion-function-id, as it cannot be a template-name.\n \t(cp_parser_simple_type_specifier): Check for invalid template-ids\n \teven after a built-in type.\n@@ -555,7 +566,7 @@\n \n \tDR 337\n \tPR c++/9256\n-\t* pt.c (tsubst): Substitution must fail if we are attempting to \n+\t* pt.c (tsubst): Substitution must fail if we are attempting to\n \tcreate an array with element type that is an abstract class type.\n \t* decl.c (cp_finish_decl): Strip pointers and array types recursively\n \tbefore calling abstract_virtuals_error."}, {"sha": "3f9feac4737835cb2ee3a3be592d8eef36ace48d", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6f78652f32a034254a55108f6fc441f3938b384/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6f78652f32a034254a55108f6fc441f3938b384/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=a6f78652f32a034254a55108f6fc441f3938b384", "patch": "@@ -1853,8 +1853,6 @@ duplicate_decls (tree newdecl, tree olddecl)\n \t\t regardless of declaration matches.  */\n \t      SET_DECL_RTL (newdecl, DECL_RTL (olddecl));\n \t    }\n-\t  else\n-\t    DECL_ESTIMATED_INSNS (newdecl) = DECL_ESTIMATED_INSNS (olddecl);\n \n \t  DECL_RESULT (newdecl) = DECL_RESULT (olddecl);\n \t  /* Don't clear out the arguments if we're redefining a function.  */\n@@ -10258,9 +10256,6 @@ start_function (tree declspecs, tree declarator, tree attrs, int flags)\n   /* Start the statement-tree, start the tree now.  */\n   begin_stmt_tree (&DECL_SAVED_TREE (decl1));\n \n-  /* Don't double-count statements in templates.  */\n-  DECL_ESTIMATED_INSNS (decl1) = 0;\n-\n   /* Let the user know we're compiling this function.  */\n   announce_function (decl1);\n "}, {"sha": "1d03dc261d3779ab6485bd7053d245f23a19a5d5", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6f78652f32a034254a55108f6fc441f3938b384/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6f78652f32a034254a55108f6fc441f3938b384/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=a6f78652f32a034254a55108f6fc441f3938b384", "patch": "@@ -937,15 +937,16 @@ pushdecl (tree x)\n \t\t  /* ARM $8.3 */\n \t\t  if (b->kind == sk_function_parms)\n \t\t    {\n-\t\t      error (\"declaration of `%#D' shadows a parameter\",\n-\t\t\t     name);\n+\t\t      error (\"declaration of '%#D' shadows a parameter\", x);\n \t\t      err = true;\n \t\t    }\n \t\t}\n \n \t      if (warn_shadow && !err)\n-\t\tshadow_warning (SW_PARAM,\n-\t\t\t\tIDENTIFIER_POINTER (name), oldlocal);\n+\t\t{\n+\t\t  warning (\"declaration of '%#D' shadows a parameter\", x);\n+\t\t  warning (\"%Jshadowed declaration is here\", oldlocal);\n+\t\t}\n \t    }\n \n \t  /* Maybe warn if shadowing something else.  */\n@@ -958,17 +959,25 @@ pushdecl (tree x)\n \t      if (IDENTIFIER_CLASS_VALUE (name) != NULL_TREE\n \t\t       && current_class_ptr\n \t\t       && !TREE_STATIC (name))\n-\t\twarning (\"declaration of `%s' shadows a member of `this'\",\n-\t\t\t    IDENTIFIER_POINTER (name));\n+\t\t{\n+\t\t  /* Location of previous decl is not useful in this case.  */\n+\t\t  warning (\"declaration of '%D' shadows a member of 'this'\",\n+\t\t\t   x);\n+\t\t}\n \t      else if (oldlocal != NULL_TREE\n \t\t       && TREE_CODE (oldlocal) == VAR_DECL)\n-\t\tshadow_warning (SW_LOCAL,\n-\t\t\t\tIDENTIFIER_POINTER (name), oldlocal);\n+\t\t{\n+\t\t  warning (\"declaration of '%D' shadows a previous local\", x);\n+\t\t  warning (\"%Jshadowed declaration is here\", oldlocal);\n+\t\t}\n \t      else if (oldglobal != NULL_TREE\n \t\t       && TREE_CODE (oldglobal) == VAR_DECL)\n \t\t/* XXX shadow warnings in outer-more namespaces */\n-\t\tshadow_warning (SW_GLOBAL,\n-\t\t\t\tIDENTIFIER_POINTER (name), oldglobal);\n+\t\t{\n+\t\t  warning (\"declaration of '%D' shadows a global declaration\",\n+\t\t\t   x);\n+\t\t  warning (\"%Jshadowed declaration is here\", oldglobal);\n+\t\t}\n \t    }\n \t}\n "}, {"sha": "5ada1312e59d1a55e0952b9cfdf60ae13ac40b77", "filename": "gcc/cp/optimize.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6f78652f32a034254a55108f6fc441f3938b384/gcc%2Fcp%2Foptimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6f78652f32a034254a55108f6fc441f3938b384/gcc%2Fcp%2Foptimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foptimize.c?ref=a6f78652f32a034254a55108f6fc441f3938b384", "patch": "@@ -232,10 +232,6 @@ maybe_clone_body (tree fn)\n       /* Clone the body.  */\n       clone_body (clone, fn, decl_map);\n \n-      /* There are as many statements in the clone as in the\n-\t original.  */\n-      DECL_ESTIMATED_INSNS (clone) = DECL_ESTIMATED_INSNS (fn);\n-\n       /* Clean up.  */\n       splay_tree_delete (decl_map);\n "}, {"sha": "684de5066861d9672728673a07b3193ad15a7736", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6f78652f32a034254a55108f6fc441f3938b384/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6f78652f32a034254a55108f6fc441f3938b384/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=a6f78652f32a034254a55108f6fc441f3938b384", "patch": "@@ -15274,14 +15274,6 @@ c_parse_file (void)\n   the_parser = NULL;\n }\n \n-/* Clean up after parsing the entire translation unit.  */\n-\n-void\n-free_parser_stacks (void)\n-{\n-  /* Nothing to do.  */\n-}\n-\n /* This variable must be provided by every front end.  */\n \n int yydebug;"}, {"sha": "a2848a443d14a76f2cd093f5a99a59883046bc7f", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6f78652f32a034254a55108f6fc441f3938b384/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6f78652f32a034254a55108f6fc441f3938b384/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=a6f78652f32a034254a55108f6fc441f3938b384", "patch": "@@ -12565,12 +12565,6 @@ dwarf2out_decl (tree decl)\n       return;\n \n     case FUNCTION_DECL:\n-      /* Ignore this FUNCTION_DECL if it refers to a builtin declaration of a\n-\t builtin function.  Explicit programmer-supplied declarations of\n-\t these same functions should NOT be ignored however.  */\n-      if (DECL_EXTERNAL (decl) && DECL_BUILT_IN (decl))\n-\treturn;\n-\n       /* What we would really like to do here is to filter out all mere\n \t file-scope declarations of file-scope functions which are never\n \t referenced later within this translation unit (and keep all of ones"}, {"sha": "ffa9d6b1d69d2753feb5d21f746fe36fecbbb49c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6f78652f32a034254a55108f6fc441f3938b384/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6f78652f32a034254a55108f6fc441f3938b384/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a6f78652f32a034254a55108f6fc441f3938b384", "patch": "@@ -1,3 +1,14 @@\n+2004-02-07  Zack Weinberg  <zack@codesourcery.com>\n+\n+\tBug 13856\n+\t* gcc.dg/visibility-8.c: New testcase.\n+\n+2004-02-07  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* gcc.c-torture/execute/string-opt-15.c: Define memcmp with void *\n+\targuments.\n+\t* gcc.dg/fwritable-strings-1.c: Expect the deprecation notice.\n+\n 2004-02-07  Roger Sayle  <roger@eyesopen.com>\n \n \tPR middle-end/13696\n@@ -130,7 +141,7 @@\n \t* g++.dg/template/sizeof7.C: New test.\n \n 2004-02-02  Eric Christopher  <echristo@redhat.com>\n-            Zack Weinberg  <zack@codesourcery.com>\n+\t    Zack Weinberg  <zack@codesourcery.com>\n \n \t* gcc.c-torture/execute/wchar_t-1.c: Add -finput-charset.\n "}, {"sha": "e2395d4dfeb20c2fa01b618f855b9ea04afade9b", "filename": "gcc/testsuite/gcc.c-torture/execute/string-opt-15.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6f78652f32a034254a55108f6fc441f3938b384/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6f78652f32a034254a55108f6fc441f3938b384/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-15.c?ref=a6f78652f32a034254a55108f6fc441f3938b384", "patch": "@@ -39,7 +39,7 @@ main ()\n    should abort.  */\n __attribute__ ((noinline))\n static int\n-memcmp (const char *p1, const char *p2, size_t len)\n+memcmp (const void *p1, const void *p2, size_t len)\n {\n   abort ();\n }"}, {"sha": "652a0845fd058403161456728aa7d7e4dd5566bf", "filename": "gcc/testsuite/gcc.dg/fwritable-strings-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6f78652f32a034254a55108f6fc441f3938b384/gcc%2Ftestsuite%2Fgcc.dg%2Ffwritable-strings-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6f78652f32a034254a55108f6fc441f3938b384/gcc%2Ftestsuite%2Fgcc.dg%2Ffwritable-strings-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffwritable-strings-1.c?ref=a6f78652f32a034254a55108f6fc441f3938b384", "patch": "@@ -3,6 +3,7 @@\n \n /* { dg-do run } */\n /* { dg-options \"-fwritable-strings\" } */\n+/* { dg-error \"-fwritable-strings is deprecated\" \"\" { target *-*-* } 0 } */\n \n extern void abort(void);\n "}, {"sha": "fc3a1055757d65b498c21c294b2eb5c426c2f15e", "filename": "gcc/testsuite/gcc.dg/visibility-8.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6f78652f32a034254a55108f6fc441f3938b384/gcc%2Ftestsuite%2Fgcc.dg%2Fvisibility-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6f78652f32a034254a55108f6fc441f3938b384/gcc%2Ftestsuite%2Fgcc.dg%2Fvisibility-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvisibility-8.c?ref=a6f78652f32a034254a55108f6fc441f3938b384", "patch": "@@ -0,0 +1,16 @@\n+/* Test hidden visibility on built-in functions (for libc).  PR 13856.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+/* { dg-require-visibility \"\" } */\n+/* { dg-final { scan-assembler \"\\\\.hidden.*__GI_fputs_unlocked\" } } */\n+\n+int fputs_unlocked (const char *restrict, int *restrict)\n+   __asm__ (\"__GI_fputs_unlocked\")\n+   __attribute__ ((visibility (\"hidden\")));\n+\n+int\n+fputs_unlocked (str, fp)\n+     const char *str;\n+     int *fp;\n+{\n+}"}, {"sha": "6d3fcf87f203357c18e21faf25d85fd0fa1674d3", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6f78652f32a034254a55108f6fc441f3938b384/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6f78652f32a034254a55108f6fc441f3938b384/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=a6f78652f32a034254a55108f6fc441f3938b384", "patch": "@@ -95,9 +95,6 @@ typedef struct inline_data\n   int in_target_cleanup_p;\n   /* A list of the functions current function has inlined.  */\n   varray_type inlined_fns;\n-  /* The approximate number of instructions we have inlined in the\n-     current call stack.  */\n-  int inlined_insns;\n   /* We use the same mechanism to build clones that we do to perform\n      inlining.  However, there are a few places where we need to\n      distinguish between those two situations.  This flag is true if\n@@ -1569,11 +1566,6 @@ expand_call_inline (tree *tp, int *walk_subtrees, void *data)\n      the equivalent inlined version either.  */\n   TREE_USED (*tp) = 1;\n \n-  /* Our function now has more statements than it did before.  */\n-  DECL_ESTIMATED_INSNS (VARRAY_TREE (id->fns, 0)) += DECL_ESTIMATED_INSNS (fn);\n-  /* For accounting, subtract one for the saved call/ret.  */\n-  id->inlined_insns += DECL_ESTIMATED_INSNS (fn) - 1;\n-\n   /* Update callgraph if needed.  */\n   if (id->decl)\n     {\n@@ -1590,11 +1582,6 @@ expand_call_inline (tree *tp, int *walk_subtrees, void *data)\n   }\n   VARRAY_POP (id->fns);\n \n-  /* If we've returned to the top level, clear out the record of how\n-     much inlining has been done.  */\n-  if (VARRAY_ACTIVE_SIZE (id->fns) == id->first_inlined_fn)\n-    id->inlined_insns = 0;\n-\n   /* Don't walk into subtrees.  We've already handled them above.  */\n   *walk_subtrees = 0;\n \n@@ -1634,9 +1621,6 @@ optimize_inline_calls (tree fn)\n   /* Don't allow recursion into FN.  */\n   VARRAY_TREE_INIT (id.fns, 32, \"fns\");\n   VARRAY_PUSH_TREE (id.fns, fn);\n-  if (!DECL_ESTIMATED_INSNS (fn))\n-    DECL_ESTIMATED_INSNS (fn) \n-      = (*lang_hooks.tree_inlining.estimate_num_insns) (fn);\n   /* Or any functions that aren't finished yet.  */\n   prev_fn = NULL_TREE;\n   if (current_function_decl)"}, {"sha": "5b075d9ad4c91259d6e85ee5798ffcb8c1aa453a", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6f78652f32a034254a55108f6fc441f3938b384/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6f78652f32a034254a55108f6fc441f3938b384/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=a6f78652f32a034254a55108f6fc441f3938b384", "patch": "@@ -1627,13 +1627,6 @@ struct tree_type GTY(())\n #define DECL_POINTER_ALIAS_SET_KNOWN_P(NODE) \\\n   (DECL_POINTER_ALIAS_SET (NODE) != - 1)\n \n-/* In a FUNCTION_DECL for which DECL_BUILT_IN does not hold, this is\n-   the approximate number of statements in this function.  There is\n-   no need for this number to be exact; it is only used in various\n-   heuristics regarding optimization.  */\n-#define DECL_ESTIMATED_INSNS(NODE) \\\n-  (FUNCTION_DECL_CHECK (NODE)->decl.u1.i)\n-\n /* Nonzero for a decl which is at file scope.  */\n #define DECL_FILE_SCOPE_P(EXP) \t\t\t\t\t\\\n   (! DECL_CONTEXT (EXP)\t\t\t\t\t\t\\"}]}