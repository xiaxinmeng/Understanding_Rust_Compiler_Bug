{"sha": "d2d36740c2c8901e566dbbcc02ca5bbe51480fd7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDJkMzY3NDBjMmM4OTAxZTU2NmRiYmNjMDJjYTViYmU1MTQ4MGZkNw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2010-02-11T09:16:38Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-02-11T09:16:38Z"}, "message": "dwarf2out.c (mem_loc_descriptor): Use DW_OP_deref_size if MEM's mode size isn't DWARF2_ADDR_SIZE.\n\n\t* dwarf2out.c (mem_loc_descriptor) <case MEM>: Use DW_OP_deref_size\n\tif MEM's mode size isn't DWARF2_ADDR_SIZE.\n\t(mem_loc_descriptor) <do_scompare>: Allow also VOIDmode arguments.\n\tOptimize eq/ne comparisons when both arguments are known to be\n\tzero-extended.\n\t(mem_loc_descriptor) <do_ucompare>: Allow also VOIDmode arguments.\n\tDon't mask operands unnecessarily if they are known to be already\n\tzero-extended.\n\nFrom-SVN: r156692", "tree": {"sha": "b4b9202097a00bfa81aef5c991f2958714f535cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4b9202097a00bfa81aef5c991f2958714f535cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2d36740c2c8901e566dbbcc02ca5bbe51480fd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2d36740c2c8901e566dbbcc02ca5bbe51480fd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2d36740c2c8901e566dbbcc02ca5bbe51480fd7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2d36740c2c8901e566dbbcc02ca5bbe51480fd7/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "19030d779a0d27dbdf3f774a15137cec8f4a1550", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19030d779a0d27dbdf3f774a15137cec8f4a1550", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19030d779a0d27dbdf3f774a15137cec8f4a1550"}], "stats": {"total": 195, "additions": 144, "deletions": 51}, "files": [{"sha": "e489d90a7d512cf0df17d2c7e15a410d769da0dd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2d36740c2c8901e566dbbcc02ca5bbe51480fd7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2d36740c2c8901e566dbbcc02ca5bbe51480fd7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d2d36740c2c8901e566dbbcc02ca5bbe51480fd7", "patch": "@@ -1,3 +1,14 @@\n+2010-02-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* dwarf2out.c (mem_loc_descriptor) <case MEM>: Use DW_OP_deref_size\n+\tif MEM's mode size isn't DWARF2_ADDR_SIZE.\n+\t(mem_loc_descriptor) <do_scompare>: Allow also VOIDmode arguments.\n+\tOptimize eq/ne comparisons when both arguments are known to be\n+\tzero-extended.\n+\t(mem_loc_descriptor) <do_ucompare>: Allow also VOIDmode arguments.\n+\tDon't mask operands unnecessarily if they are known to be already\n+\tzero-extended.\n+\n 2010-02-10  Vladimir Makarov  <vmakarov@redhat.com>\n \n \t* ira-conflicts.c (add_insn_allocno_copies): Use find_reg_note"}, {"sha": "c617a44da326a514f0e6ccf6dab85f0d9b45373d", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 133, "deletions": 51, "changes": 184, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2d36740c2c8901e566dbbcc02ca5bbe51480fd7/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2d36740c2c8901e566dbbcc02ca5bbe51480fd7/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=d2d36740c2c8901e566dbbcc02ca5bbe51480fd7", "patch": "@@ -12990,7 +12990,19 @@ mem_loc_descriptor (rtx rtl, enum machine_mode mode,\n       if (mem_loc_result == NULL)\n \tmem_loc_result = tls_mem_loc_descriptor (rtl);\n       if (mem_loc_result != 0)\n-\tadd_loc_descr (&mem_loc_result, new_loc_descr (DW_OP_deref, 0, 0));\n+\t{\n+\t  if (GET_MODE_SIZE (GET_MODE (rtl)) > DWARF2_ADDR_SIZE)\n+\t    {\n+\t      expansion_failed (NULL_TREE, rtl, \"DWARF address size mismatch\");\n+\t      return 0;\n+\t    }\n+\t  else if (GET_MODE_SIZE (GET_MODE (rtl)) == DWARF2_ADDR_SIZE)\n+\t    add_loc_descr (&mem_loc_result, new_loc_descr (DW_OP_deref, 0, 0));\n+\t  else\n+\t    add_loc_descr (&mem_loc_result,\n+\t\t\t   new_loc_descr (DW_OP_deref_size,\n+\t\t\t\t\t  GET_MODE_SIZE (GET_MODE (rtl)), 0));\n+\t}\n       else\n \t{\n \t  rtx new_rtl = avoid_constant_pool_reference (rtl);\n@@ -13219,32 +13231,72 @@ mem_loc_descriptor (rtx rtl, enum machine_mode mode,\n       goto do_scompare;\n \n     do_scompare:\n-      if (GET_MODE_CLASS (GET_MODE (XEXP (rtl, 0))) != MODE_INT\n-\t  || GET_MODE_SIZE (GET_MODE (XEXP (rtl, 0))) > DWARF2_ADDR_SIZE\n-\t  || GET_MODE (XEXP (rtl, 0)) != GET_MODE (XEXP (rtl, 1)))\n+      if (GET_MODE_SIZE (GET_MODE (XEXP (rtl, 0))) > DWARF2_ADDR_SIZE\n+\t  || GET_MODE_SIZE (GET_MODE (XEXP (rtl, 1))) > DWARF2_ADDR_SIZE)\n \tbreak;\n+      else\n+\t{\n+\t  enum machine_mode op_mode = GET_MODE (XEXP (rtl, 0));\n \n-      op0 = mem_loc_descriptor (XEXP (rtl, 0), mode,\n-\t\t\t\tVAR_INIT_STATUS_INITIALIZED);\n-      op1 = mem_loc_descriptor (XEXP (rtl, 1), mode,\n-\t\t\t\tVAR_INIT_STATUS_INITIALIZED);\n+\t  if (op_mode == VOIDmode)\n+\t    op_mode = GET_MODE (XEXP (rtl, 1));\n+\t  if (op_mode != VOIDmode && GET_MODE_CLASS (op_mode) != MODE_INT)\n+\t    break;\n \n-      if (op0 == 0 || op1 == 0)\n-\tbreak;\n+\t  op0 = mem_loc_descriptor (XEXP (rtl, 0), mode,\n+\t\t\t\t    VAR_INIT_STATUS_INITIALIZED);\n+\t  op1 = mem_loc_descriptor (XEXP (rtl, 1), mode,\n+\t\t\t\t    VAR_INIT_STATUS_INITIALIZED);\n \n-      if (GET_MODE_SIZE (GET_MODE (XEXP (rtl, 0))) < DWARF2_ADDR_SIZE)\n-\t{\n-\t  int shift = DWARF2_ADDR_SIZE\n-\t\t      - GET_MODE_SIZE (GET_MODE (XEXP (rtl, 0)));\n-\t  shift *= BITS_PER_UNIT;\n-\t  add_loc_descr (&op0, int_loc_descriptor (shift));\n-\t  add_loc_descr (&op0, new_loc_descr (DW_OP_shl, 0, 0));\n-\t  if (CONST_INT_P (XEXP (rtl, 1)))\n-\t    op1 = int_loc_descriptor (INTVAL (XEXP (rtl, 1)) << shift);\n-\t  else\n+\t  if (op0 == 0 || op1 == 0)\n+\t    break;\n+\n+\t  if (op_mode != VOIDmode\n+\t      && GET_MODE_SIZE (op_mode) < DWARF2_ADDR_SIZE)\n \t    {\n-\t      add_loc_descr (&op1, int_loc_descriptor (shift));\n-\t      add_loc_descr (&op1, new_loc_descr (DW_OP_shl, 0, 0));\n+\t      int shift = DWARF2_ADDR_SIZE - GET_MODE_SIZE (op_mode);\n+\t      shift *= BITS_PER_UNIT;\n+\t      /* For eq/ne, if the operands are known to be zero-extended,\n+\t\t there is no need to do the fancy shifting up.  */\n+\t      if (op == DW_OP_eq || op == DW_OP_ne)\n+\t\t{\n+\t\t  dw_loc_descr_ref last0, last1;\n+\t\t  for (last0 = op0;\n+\t\t       last0->dw_loc_next != NULL;\n+\t\t       last0 = last0->dw_loc_next)\n+\t\t    ;\n+\t\t  for (last1 = op1;\n+\t\t       last1->dw_loc_next != NULL;\n+\t\t       last1 = last1->dw_loc_next)\n+\t\t    ;\n+\t\t  /* deref_size zero extends, and for constants we can check\n+\t\t     whether they are zero extended or not.  */\n+\t\t  if (((last0->dw_loc_opc == DW_OP_deref_size\n+\t\t\t&& last0->dw_loc_oprnd1.v.val_int\n+\t\t\t   <= GET_MODE_SIZE (op_mode))\n+\t\t       || (CONST_INT_P (XEXP (rtl, 0))\n+\t\t\t    && (unsigned HOST_WIDE_INT) INTVAL (XEXP (rtl, 0))\n+\t\t\t       == (INTVAL (XEXP (rtl, 0))\n+\t\t\t\t   & GET_MODE_MASK (op_mode))))\n+\t\t      && ((last1->dw_loc_opc == DW_OP_deref_size\n+\t\t\t   && last1->dw_loc_oprnd1.v.val_int\n+\t\t\t      <= GET_MODE_SIZE (op_mode))\n+\t\t\t  || (CONST_INT_P (XEXP (rtl, 1))\n+\t\t\t      && (unsigned HOST_WIDE_INT)\n+\t\t\t\t INTVAL (XEXP (rtl, 1))\n+\t\t\t\t == (INTVAL (XEXP (rtl, 1))\n+\t\t\t\t     & GET_MODE_MASK (op_mode)))))\n+\t\t    goto do_compare;\n+\t\t}\n+\t      add_loc_descr (&op0, int_loc_descriptor (shift));\n+\t      add_loc_descr (&op0, new_loc_descr (DW_OP_shl, 0, 0));\n+\t      if (CONST_INT_P (XEXP (rtl, 1)))\n+\t\top1 = int_loc_descriptor (INTVAL (XEXP (rtl, 1)) << shift);\n+\t      else\n+\t\t{\n+\t\t  add_loc_descr (&op1, int_loc_descriptor (shift));\n+\t\t  add_loc_descr (&op1, new_loc_descr (DW_OP_shl, 0, 0));\n+\t\t}\n \t    }\n \t}\n \n@@ -13277,42 +13329,72 @@ mem_loc_descriptor (rtx rtl, enum machine_mode mode,\n       goto do_ucompare;\n \n     do_ucompare:\n-      if (GET_MODE_CLASS (GET_MODE (XEXP (rtl, 0))) != MODE_INT\n-\t  || GET_MODE_SIZE (GET_MODE (XEXP (rtl, 0))) > DWARF2_ADDR_SIZE\n-\t  || GET_MODE (XEXP (rtl, 0)) != GET_MODE (XEXP (rtl, 1)))\n+      if (GET_MODE_SIZE (GET_MODE (XEXP (rtl, 0))) > DWARF2_ADDR_SIZE\n+\t  || GET_MODE_SIZE (GET_MODE (XEXP (rtl, 1))) > DWARF2_ADDR_SIZE)\n \tbreak;\n+      else\n+\t{\n+\t  enum machine_mode op_mode = GET_MODE (XEXP (rtl, 0));\n \n-      op0 = mem_loc_descriptor (XEXP (rtl, 0), mode,\n-\t\t\t\tVAR_INIT_STATUS_INITIALIZED);\n-      op1 = mem_loc_descriptor (XEXP (rtl, 1), mode,\n-\t\t\t\tVAR_INIT_STATUS_INITIALIZED);\n+\t  if (op_mode == VOIDmode)\n+\t    op_mode = GET_MODE (XEXP (rtl, 1));\n+\t  if (op_mode != VOIDmode && GET_MODE_CLASS (op_mode) != MODE_INT)\n+\t    break;\n \n-      if (op0 == 0 || op1 == 0)\n-\tbreak;\n+\t  op0 = mem_loc_descriptor (XEXP (rtl, 0), mode,\n+\t\t\t\t    VAR_INIT_STATUS_INITIALIZED);\n+\t  op1 = mem_loc_descriptor (XEXP (rtl, 1), mode,\n+\t\t\t\t    VAR_INIT_STATUS_INITIALIZED);\n \n-      if (GET_MODE_SIZE (GET_MODE (XEXP (rtl, 0))) < DWARF2_ADDR_SIZE)\n-\t{\n-\t  HOST_WIDE_INT mask = GET_MODE_MASK (GET_MODE (XEXP (rtl, 0)));\n-\t  add_loc_descr (&op0, int_loc_descriptor (mask));\n-\t  add_loc_descr (&op0, new_loc_descr (DW_OP_and, 0, 0));\n-\t  if (CONST_INT_P (XEXP (rtl, 1)))\n-\t    op1 = int_loc_descriptor (INTVAL (XEXP (rtl, 1)) & mask);\n-\t  else\n+\t  if (op0 == 0 || op1 == 0)\n+\t    break;\n+\n+\t  if (op_mode != VOIDmode\n+\t      && GET_MODE_SIZE (op_mode) < DWARF2_ADDR_SIZE)\n \t    {\n-\t      add_loc_descr (&op1, int_loc_descriptor (mask));\n-\t      add_loc_descr (&op1, new_loc_descr (DW_OP_and, 0, 0));\n+\t      HOST_WIDE_INT mask = GET_MODE_MASK (op_mode);\n+\t      dw_loc_descr_ref last0, last1;\n+\t      for (last0 = op0;\n+\t\t   last0->dw_loc_next != NULL;\n+\t\t   last0 = last0->dw_loc_next)\n+\t\t;\n+\t      for (last1 = op1;\n+\t\t   last1->dw_loc_next != NULL;\n+\t\t   last1 = last1->dw_loc_next)\n+\t\t;\n+\t      if (CONST_INT_P (XEXP (rtl, 0)))\n+\t\top0 = int_loc_descriptor (INTVAL (XEXP (rtl, 0)) & mask);\n+\t      /* deref_size zero extends, so no need to mask it again.  */\n+\t      else if (last0->dw_loc_opc != DW_OP_deref_size\n+\t\t       || last0->dw_loc_oprnd1.v.val_int\n+\t\t\t  > GET_MODE_SIZE (op_mode))\n+\t\t{\n+\t\t  add_loc_descr (&op0, int_loc_descriptor (mask));\n+\t\t  add_loc_descr (&op0, new_loc_descr (DW_OP_and, 0, 0));\n+\t\t}\n+\t      if (CONST_INT_P (XEXP (rtl, 1)))\n+\t\top1 = int_loc_descriptor (INTVAL (XEXP (rtl, 1)) & mask);\n+\t      /* deref_size zero extends, so no need to mask it again.  */\n+\t      else if (last1->dw_loc_opc != DW_OP_deref_size\n+\t\t       || last1->dw_loc_oprnd1.v.val_int\n+\t\t\t  > GET_MODE_SIZE (op_mode))\n+\t\t{\n+\t\t  add_loc_descr (&op1, int_loc_descriptor (mask));\n+\t\t  add_loc_descr (&op1, new_loc_descr (DW_OP_and, 0, 0));\n+\t\t}\n \t    }\n-\t}\n-      else\n-\t{\n-\t  HOST_WIDE_INT bias = 1;\n-\t  bias <<= (DWARF2_ADDR_SIZE * BITS_PER_UNIT - 1);\n-\t  add_loc_descr (&op0, new_loc_descr (DW_OP_plus_uconst, bias, 0));\n-\t  if (CONST_INT_P (XEXP (rtl, 1)))\n-\t    op1 = int_loc_descriptor ((unsigned HOST_WIDE_INT) bias\n-\t\t\t\t      + INTVAL (XEXP (rtl, 1)));\n \t  else\n-\t    add_loc_descr (&op1, new_loc_descr (DW_OP_plus_uconst, bias, 0));\n+\t    {\n+\t      HOST_WIDE_INT bias = 1;\n+\t      bias <<= (DWARF2_ADDR_SIZE * BITS_PER_UNIT - 1);\n+\t      add_loc_descr (&op0, new_loc_descr (DW_OP_plus_uconst, bias, 0));\n+\t      if (CONST_INT_P (XEXP (rtl, 1)))\n+\t\top1 = int_loc_descriptor ((unsigned HOST_WIDE_INT) bias\n+\t\t\t\t\t  + INTVAL (XEXP (rtl, 1)));\n+\t      else\n+\t\tadd_loc_descr (&op1, new_loc_descr (DW_OP_plus_uconst,\n+\t\t\t\t\t\t    bias, 0));\n+\t    }\n \t}\n       goto do_compare;\n "}]}