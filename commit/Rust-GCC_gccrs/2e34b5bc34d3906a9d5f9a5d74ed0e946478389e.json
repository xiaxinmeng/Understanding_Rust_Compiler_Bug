{"sha": "2e34b5bc34d3906a9d5f9a5d74ed0e946478389e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmUzNGI1YmMzNGQzOTA2YTlkNWY5YTVkNzRlZDBlOTQ2NDc4Mzg5ZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-12-25T11:59:17Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-12-25T11:59:17Z"}, "message": "re PR target/83488 (ICE on a CET test-case)\n\n\tPR target/83488\n\t* config/i386/i386.opt (-mavx512vpopcntdq, -mmavx512bitalg): Move from\n\tix86_isa_flags2 to ix86_isa_flags.\n\t* config/i386/i386-c.c (ix86_target_macros_internal): Test\n\tOPTION_MASK_ISA_AVX512BITALG and OPTION_MASK_ISA_AVX512VPOPCNTDQ in\n\tisa_flags rather than isa_flags2.\n\t* config/i386/i386.c (ix86_target_string): Move -mavx512vpopcntdq\n\tand -mavx512bitalg from isa2_opts to isa_opts.\n\t(ix86_option_override_internal): Test OPTION_MASK_ISA_AVX512VPOPCNTDQ\n\tin x_ix86_isa_flags_explicit rather than x_ix86_isa_flags2_explicit\n\tand set it in x_ix86_isa_flags rather than x_ix86_isa_flags2.\n\tFormatting fixes.\n\t(def_builtin): Treat OPTION_MASK_ISA_AVX512BW or\n\tOPTION_MASK_ISA_AVX512F ored with another option similarly to\n\tOPTION_MASK_ISA_AVX512VL.  Even for OPTION_MASK_ISA_AVX512VL don't\n\tclear it if mask is just OPTION_MASK_ISA_AVX512VL itself.\n\t(ix86_expand_builtin): Don't handle OPTION_MASK_ISA_GFNI and\n\tOPTION_MASK_ISA_VPCLMULQDQ specially, instead handle\n\tOPTION_MASK_ISA_AVX512BW and OPTION_MASK_ISA_AVX512F that way.\n\t* config/i386/i386-builtin.def: Move AVX512VPOPCNTDQ and AVX512BITALG\n\tbuiltins from bdesc_args2 to bdesc_args section.\n\t(__builtin_ia32_compressstoreuqi512_mask,\n\t__builtin_ia32_compressstoreuhi512_mask,\n\t__builtin_ia32_compressstoreuqi256_mask,\n\t__builtin_ia32_expandloadqi512_mask,\n\t__builtin_ia32_expandloadqi512_maskz,\n\t__builtin_ia32_expandloadhi512_mask,\n\t__builtin_ia32_expandloadhi512_maskz,\n\t__builtin_ia32_compressqi512_mask, __builtin_ia32_compresshi512_mask,\n\t__builtin_ia32_compressqi256_mask, __builtin_ia32_expandqi512_mask,\n\t__builtin_ia32_expandqi512_maskz, __builtin_ia32_expandhi512_mask,\n\t__builtin_ia32_expandhi512_maskz, __builtin_ia32_expandqi256_mask,\n\t__builtin_ia32_expandqi256_maskz, __builtin_ia32_vpshrd_v32hi_mask,\n\t__builtin_ia32_vpshld_v32hi_mask, __builtin_ia32_vpshrdv_v32hi_mask,\n\t__builtin_ia32_vpshrdv_v32hi_maskz, __builtin_ia32_vpshldv_v32hi_mask,\n\t__builtin_ia32_vpshldv_v32hi_maskz,\n\t__builtin_ia32_vpopcountb_v64qi_mask,\n\t__builtin_ia32_vpopcountw_v32hi_mask,\n\t__builtin_ia32_vpshufbitqmb512_mask,\n\t__builtin_ia32_vpshufbitqmb256_mask): Add\n\t\" | OPTION_MASK_ISA_AVX512BW\".\n\t(__builtin_ia32_expandloadqi256_mask,\n\t__builtin_ia32_expandloadqi256_maskz,\n\t__builtin_ia32_vpopcountb_v32qi_mask): Add\n\t\" | OPTION_MASK_ISA_AVX512VL | OPTION_MASK_ISA_AVX512BW\".\n\t(__builtin_ia32_expandloadhi256_mask,\n\t__builtin_ia32_expandloadhi256_maskz,\n\t__builtin_ia32_expandloadqi128_mask,\n\t__builtin_ia32_expandloadqi128_maskz,\n\t__builtin_ia32_expandloadhi128_mask,\n\t__builtin_ia32_expandloadhi128_maskz,\n\t__builtin_ia32_vpshrd_v16hi, __builtin_ia32_vpshrd_v16hi_mask,\n\t__builtin_ia32_vpshrd_v8hi, __builtin_ia32_vpshrd_v8hi_mask,\n\t__builtin_ia32_vpshrd_v8si, __builtin_ia32_vpshrd_v8si_mask,\n\t__builtin_ia32_vpshrd_v4si, __builtin_ia32_vpshrd_v4si_mask,\n\t__builtin_ia32_vpshrd_v4di, __builtin_ia32_vpshrd_v4di_mask,\n\t__builtin_ia32_vpshrd_v2di, __builtin_ia32_vpshrd_v2di_mask,\n\t__builtin_ia32_vpshld_v16hi, __builtin_ia32_vpshld_v16hi_mask,\n\t__builtin_ia32_vpshld_v8hi, __builtin_ia32_vpshld_v8hi_mask,\n\t__builtin_ia32_vpshld_v8si, __builtin_ia32_vpshld_v8si_mask,\n\t__builtin_ia32_vpshld_v4si, __builtin_ia32_vpshld_v4si_mask,\n\t__builtin_ia32_vpshld_v4di, __builtin_ia32_vpshld_v4di_mask,\n\t__builtin_ia32_vpshld_v2di, __builtin_ia32_vpshld_v2di_mask,\n\t__builtin_ia32_vpshrdv_v16hi, __builtin_ia32_vpshrdv_v16hi_mask,\n\t__builtin_ia32_vpshrdv_v16hi_maskz, __builtin_ia32_vpshrdv_v8hi,\n\t__builtin_ia32_vpshrdv_v8hi_mask, __builtin_ia32_vpshrdv_v8hi_maskz,\n\t__builtin_ia32_vpshrdv_v8si, __builtin_ia32_vpshrdv_v8si_mask,\n\t__builtin_ia32_vpshrdv_v8si_maskz, __builtin_ia32_vpshrdv_v4si,\n\t__builtin_ia32_vpshrdv_v4si_mask, __builtin_ia32_vpshrdv_v4si_maskz,\n\t__builtin_ia32_vpshrdv_v4di, __builtin_ia32_vpshrdv_v4di_mask,\n\t__builtin_ia32_vpshrdv_v4di_maskz, __builtin_ia32_vpshrdv_v2di,\n\t__builtin_ia32_vpshrdv_v2di_mask, __builtin_ia32_vpshrdv_v2di_maskz,\n\t__builtin_ia32_vpshldv_v16hi, __builtin_ia32_vpshldv_v16hi_mask,\n\t__builtin_ia32_vpshldv_v16hi_maskz, __builtin_ia32_vpshldv_v8hi,\n\t__builtin_ia32_vpshldv_v8hi_mask, __builtin_ia32_vpshldv_v8hi_maskz,\n\t__builtin_ia32_vpshldv_v8si, __builtin_ia32_vpshldv_v8si_mask,\n\t__builtin_ia32_vpshldv_v8si_maskz, __builtin_ia32_vpshldv_v4si,\n\t__builtin_ia32_vpshldv_v4si_mask, __builtin_ia32_vpshldv_v4si_maskz,\n\t__builtin_ia32_vpshldv_v4di, __builtin_ia32_vpshldv_v4di_mask,\n\t__builtin_ia32_vpshldv_v4di_maskz, __builtin_ia32_vpshldv_v2di,\n\t__builtin_ia32_vpshldv_v2di_mask, __builtin_ia32_vpshldv_v2di_maskz,\n\t__builtin_ia32_vpopcountb_v32qi, __builtin_ia32_vpopcountb_v16qi,\n\t__builtin_ia32_vpopcountb_v16qi_mask, __builtin_ia32_vpopcountw_v16hi,\n\t__builtin_ia32_vpopcountw_v16hi_mask, __builtin_ia32_vpopcountw_v8hi,\n\t__builtin_ia32_vpopcountw_v8hi_mask): Add\n\t\" | OPTION_MASK_ISA_AVX512VL\".\n\t* config/i386/avx512vbmi2intrin.h (_mm512_shrdi_epi16,\n\t_mm512_shrdi_epi32, _mm512_mask_shrdi_epi32, _mm512_maskz_shrdi_epi32,\n\t_mm512_shrdi_epi64, _mm512_mask_shrdi_epi64, _mm512_maskz_shrdi_epi64,\n\t_mm512_shldi_epi16, _mm512_shldi_epi32, _mm512_mask_shldi_epi32,\n\t_mm512_maskz_shldi_epi32, _mm512_shldi_epi64, _mm512_mask_shldi_epi64,\n\t_mm512_maskz_shldi_epi64, _mm512_shrdv_epi16, _mm512_shrdv_epi32,\n\t_mm512_mask_shrdv_epi32, _mm512_maskz_shrdv_epi32, _mm512_shrdv_epi64,\n\t_mm512_mask_shrdv_epi64, _mm512_maskz_shrdv_epi64, _mm512_shldv_epi16,\n\t_mm512_shldv_epi32, _mm512_mask_shldv_epi32, _mm512_maskz_shldv_epi32,\n\t_mm512_shldv_epi64, _mm512_mask_shldv_epi64,\n\t_mm512_maskz_shldv_epi64): Don't require avx512bw for these intrinsics.\n\t* config/i386/avx512bitalgintrin.h (_mm_bitshuffle_epi64_mask,\n\t_mm_mask_bitshuffle_epi64_mask): Likewise.\n\t* common/config/i386/i386-common.c\n\t(OPTION_MASK_ISA_AVX512VPOPCNTDQ_SET,\n\tOPTION_MASK_ISA_AVX512BITALG_SET): Or in OPTION_MASK_ISA_AVX512F_SET.\n\t(OPTION_MASK_ISA_AVX512F_UNSET): Or in\n\tOPTION_MASK_ISA_AVX512VPOPCNTDQ_UNSET and\n\tOPTION_MASK_ISA_AVX512BITALG_UNSET.\n\t(OPTION_MASK_ISA2_AVX512F_UNSET,\n\tOPTION_MASK_ISA2_GENERAL_REGS_ONLY_UNSET): Define.\n\t(ix86_handle_option): For -mno-general-regs-only, clear from\n\tix86_isa_flags2 OPTION_MASK_ISA2_GENERAL_REGS_ONLY_UNSET rather than\n\tjust OPTION_MASK_ISA_MPX.  For -mno-sse{,2,3,4,4.1,4.2,avx,avx2} and\n\t-mno-ssse3 clear OPTION_MASK_ISA2_AVX512F_UNSET bits from\n\tix86_isa_flags2.  For -mno-avx512f likewise, instead of masking\n\tindividually listed ISAs.  For -m{,no-}avx512{vpopcntdq,bitalg} adjust\n\tfor moving from ix86_isa_flags2 to ix86_isa_flags.\n\nFrom-SVN: r255997", "tree": {"sha": "cd077ac3aa654c083d567dbf4c970912cc34a6e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd077ac3aa654c083d567dbf4c970912cc34a6e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e34b5bc34d3906a9d5f9a5d74ed0e946478389e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e34b5bc34d3906a9d5f9a5d74ed0e946478389e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e34b5bc34d3906a9d5f9a5d74ed0e946478389e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e34b5bc34d3906a9d5f9a5d74ed0e946478389e/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "112ed9dc5ce05a630a35d7f1c4e8f437a0445252", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/112ed9dc5ce05a630a35d7f1c4e8f437a0445252", "html_url": "https://github.com/Rust-GCC/gccrs/commit/112ed9dc5ce05a630a35d7f1c4e8f437a0445252"}], "stats": {"total": 956, "additions": 559, "deletions": 397}, "files": [{"sha": "22c8ea3f8815250757a7043f16ac216d6ebb9f45", "filename": "gcc/ChangeLog", "status": "modified", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e34b5bc34d3906a9d5f9a5d74ed0e946478389e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e34b5bc34d3906a9d5f9a5d74ed0e946478389e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2e34b5bc34d3906a9d5f9a5d74ed0e946478389e", "patch": "@@ -1,3 +1,120 @@\n+2017-12-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/83488\n+\t* config/i386/i386.opt (-mavx512vpopcntdq, -mmavx512bitalg): Move from\n+\tix86_isa_flags2 to ix86_isa_flags.\n+\t* config/i386/i386-c.c (ix86_target_macros_internal): Test\n+\tOPTION_MASK_ISA_AVX512BITALG and OPTION_MASK_ISA_AVX512VPOPCNTDQ in\n+\tisa_flags rather than isa_flags2.\n+\t* config/i386/i386.c (ix86_target_string): Move -mavx512vpopcntdq\n+\tand -mavx512bitalg from isa2_opts to isa_opts.\n+\t(ix86_option_override_internal): Test OPTION_MASK_ISA_AVX512VPOPCNTDQ\n+\tin x_ix86_isa_flags_explicit rather than x_ix86_isa_flags2_explicit\n+\tand set it in x_ix86_isa_flags rather than x_ix86_isa_flags2.\n+\tFormatting fixes.\n+\t(def_builtin): Treat OPTION_MASK_ISA_AVX512BW or\n+\tOPTION_MASK_ISA_AVX512F ored with another option similarly to\n+\tOPTION_MASK_ISA_AVX512VL.  Even for OPTION_MASK_ISA_AVX512VL don't\n+\tclear it if mask is just OPTION_MASK_ISA_AVX512VL itself.\n+\t(ix86_expand_builtin): Don't handle OPTION_MASK_ISA_GFNI and\n+\tOPTION_MASK_ISA_VPCLMULQDQ specially, instead handle\n+\tOPTION_MASK_ISA_AVX512BW and OPTION_MASK_ISA_AVX512F that way.\n+\t* config/i386/i386-builtin.def: Move AVX512VPOPCNTDQ and AVX512BITALG\n+\tbuiltins from bdesc_args2 to bdesc_args section.\n+\t(__builtin_ia32_compressstoreuqi512_mask,\n+\t__builtin_ia32_compressstoreuhi512_mask,\n+\t__builtin_ia32_compressstoreuqi256_mask,\n+\t__builtin_ia32_expandloadqi512_mask,\n+\t__builtin_ia32_expandloadqi512_maskz,\n+\t__builtin_ia32_expandloadhi512_mask,\n+\t__builtin_ia32_expandloadhi512_maskz,\n+\t__builtin_ia32_compressqi512_mask, __builtin_ia32_compresshi512_mask,\n+\t__builtin_ia32_compressqi256_mask, __builtin_ia32_expandqi512_mask,\n+\t__builtin_ia32_expandqi512_maskz, __builtin_ia32_expandhi512_mask,\n+\t__builtin_ia32_expandhi512_maskz, __builtin_ia32_expandqi256_mask,\n+\t__builtin_ia32_expandqi256_maskz, __builtin_ia32_vpshrd_v32hi_mask,\n+\t__builtin_ia32_vpshld_v32hi_mask, __builtin_ia32_vpshrdv_v32hi_mask,\n+\t__builtin_ia32_vpshrdv_v32hi_maskz, __builtin_ia32_vpshldv_v32hi_mask,\n+\t__builtin_ia32_vpshldv_v32hi_maskz,\n+\t__builtin_ia32_vpopcountb_v64qi_mask,\n+\t__builtin_ia32_vpopcountw_v32hi_mask,\n+\t__builtin_ia32_vpshufbitqmb512_mask,\n+\t__builtin_ia32_vpshufbitqmb256_mask): Add\n+\t\" | OPTION_MASK_ISA_AVX512BW\".\n+\t(__builtin_ia32_expandloadqi256_mask,\n+\t__builtin_ia32_expandloadqi256_maskz,\n+\t__builtin_ia32_vpopcountb_v32qi_mask): Add\n+\t\" | OPTION_MASK_ISA_AVX512VL | OPTION_MASK_ISA_AVX512BW\".\n+\t(__builtin_ia32_expandloadhi256_mask,\n+\t__builtin_ia32_expandloadhi256_maskz,\n+\t__builtin_ia32_expandloadqi128_mask,\n+\t__builtin_ia32_expandloadqi128_maskz,\n+\t__builtin_ia32_expandloadhi128_mask,\n+\t__builtin_ia32_expandloadhi128_maskz,\n+\t__builtin_ia32_vpshrd_v16hi, __builtin_ia32_vpshrd_v16hi_mask,\n+\t__builtin_ia32_vpshrd_v8hi, __builtin_ia32_vpshrd_v8hi_mask,\n+\t__builtin_ia32_vpshrd_v8si, __builtin_ia32_vpshrd_v8si_mask,\n+\t__builtin_ia32_vpshrd_v4si, __builtin_ia32_vpshrd_v4si_mask,\n+\t__builtin_ia32_vpshrd_v4di, __builtin_ia32_vpshrd_v4di_mask,\n+\t__builtin_ia32_vpshrd_v2di, __builtin_ia32_vpshrd_v2di_mask,\n+\t__builtin_ia32_vpshld_v16hi, __builtin_ia32_vpshld_v16hi_mask,\n+\t__builtin_ia32_vpshld_v8hi, __builtin_ia32_vpshld_v8hi_mask,\n+\t__builtin_ia32_vpshld_v8si, __builtin_ia32_vpshld_v8si_mask,\n+\t__builtin_ia32_vpshld_v4si, __builtin_ia32_vpshld_v4si_mask,\n+\t__builtin_ia32_vpshld_v4di, __builtin_ia32_vpshld_v4di_mask,\n+\t__builtin_ia32_vpshld_v2di, __builtin_ia32_vpshld_v2di_mask,\n+\t__builtin_ia32_vpshrdv_v16hi, __builtin_ia32_vpshrdv_v16hi_mask,\n+\t__builtin_ia32_vpshrdv_v16hi_maskz, __builtin_ia32_vpshrdv_v8hi,\n+\t__builtin_ia32_vpshrdv_v8hi_mask, __builtin_ia32_vpshrdv_v8hi_maskz,\n+\t__builtin_ia32_vpshrdv_v8si, __builtin_ia32_vpshrdv_v8si_mask,\n+\t__builtin_ia32_vpshrdv_v8si_maskz, __builtin_ia32_vpshrdv_v4si,\n+\t__builtin_ia32_vpshrdv_v4si_mask, __builtin_ia32_vpshrdv_v4si_maskz,\n+\t__builtin_ia32_vpshrdv_v4di, __builtin_ia32_vpshrdv_v4di_mask,\n+\t__builtin_ia32_vpshrdv_v4di_maskz, __builtin_ia32_vpshrdv_v2di,\n+\t__builtin_ia32_vpshrdv_v2di_mask, __builtin_ia32_vpshrdv_v2di_maskz,\n+\t__builtin_ia32_vpshldv_v16hi, __builtin_ia32_vpshldv_v16hi_mask,\n+\t__builtin_ia32_vpshldv_v16hi_maskz, __builtin_ia32_vpshldv_v8hi,\n+\t__builtin_ia32_vpshldv_v8hi_mask, __builtin_ia32_vpshldv_v8hi_maskz,\n+\t__builtin_ia32_vpshldv_v8si, __builtin_ia32_vpshldv_v8si_mask,\n+\t__builtin_ia32_vpshldv_v8si_maskz, __builtin_ia32_vpshldv_v4si,\n+\t__builtin_ia32_vpshldv_v4si_mask, __builtin_ia32_vpshldv_v4si_maskz,\n+\t__builtin_ia32_vpshldv_v4di, __builtin_ia32_vpshldv_v4di_mask,\n+\t__builtin_ia32_vpshldv_v4di_maskz, __builtin_ia32_vpshldv_v2di,\n+\t__builtin_ia32_vpshldv_v2di_mask, __builtin_ia32_vpshldv_v2di_maskz,\n+\t__builtin_ia32_vpopcountb_v32qi, __builtin_ia32_vpopcountb_v16qi,\n+\t__builtin_ia32_vpopcountb_v16qi_mask, __builtin_ia32_vpopcountw_v16hi,\n+\t__builtin_ia32_vpopcountw_v16hi_mask, __builtin_ia32_vpopcountw_v8hi,\n+\t__builtin_ia32_vpopcountw_v8hi_mask): Add\n+\t\" | OPTION_MASK_ISA_AVX512VL\".\n+\t* config/i386/avx512vbmi2intrin.h (_mm512_shrdi_epi16,\n+\t_mm512_shrdi_epi32, _mm512_mask_shrdi_epi32, _mm512_maskz_shrdi_epi32,\n+\t_mm512_shrdi_epi64, _mm512_mask_shrdi_epi64, _mm512_maskz_shrdi_epi64,\n+\t_mm512_shldi_epi16, _mm512_shldi_epi32, _mm512_mask_shldi_epi32,\n+\t_mm512_maskz_shldi_epi32, _mm512_shldi_epi64, _mm512_mask_shldi_epi64,\n+\t_mm512_maskz_shldi_epi64, _mm512_shrdv_epi16, _mm512_shrdv_epi32,\n+\t_mm512_mask_shrdv_epi32, _mm512_maskz_shrdv_epi32, _mm512_shrdv_epi64,\n+\t_mm512_mask_shrdv_epi64, _mm512_maskz_shrdv_epi64, _mm512_shldv_epi16,\n+\t_mm512_shldv_epi32, _mm512_mask_shldv_epi32, _mm512_maskz_shldv_epi32,\n+\t_mm512_shldv_epi64, _mm512_mask_shldv_epi64,\n+\t_mm512_maskz_shldv_epi64): Don't require avx512bw for these intrinsics.\n+\t* config/i386/avx512bitalgintrin.h (_mm_bitshuffle_epi64_mask,\n+\t_mm_mask_bitshuffle_epi64_mask): Likewise.\n+\t* common/config/i386/i386-common.c\n+\t(OPTION_MASK_ISA_AVX512VPOPCNTDQ_SET,\n+\tOPTION_MASK_ISA_AVX512BITALG_SET): Or in OPTION_MASK_ISA_AVX512F_SET.\n+\t(OPTION_MASK_ISA_AVX512F_UNSET): Or in\n+\tOPTION_MASK_ISA_AVX512VPOPCNTDQ_UNSET and\n+\tOPTION_MASK_ISA_AVX512BITALG_UNSET.\n+\t(OPTION_MASK_ISA2_AVX512F_UNSET,\n+\tOPTION_MASK_ISA2_GENERAL_REGS_ONLY_UNSET): Define.\n+\t(ix86_handle_option): For -mno-general-regs-only, clear from\n+\tix86_isa_flags2 OPTION_MASK_ISA2_GENERAL_REGS_ONLY_UNSET rather than\n+\tjust OPTION_MASK_ISA_MPX.  For -mno-sse{,2,3,4,4.1,4.2,avx,avx2} and\n+\t-mno-ssse3 clear OPTION_MASK_ISA2_AVX512F_UNSET bits from\n+\tix86_isa_flags2.  For -mno-avx512f likewise, instead of masking\n+\tindividually listed ISAs.  For -m{,no-}avx512{vpopcntdq,bitalg} adjust\n+\tfor moving from ix86_isa_flags2 to ix86_isa_flags.\n+\n 2017-12-23  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/83553"}, {"sha": "26b2188fe63b705d8b599af53f1086712c1a74fa", "filename": "gcc/common/config/i386/i386-common.c", "status": "modified", "additions": 43, "deletions": 31, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e34b5bc34d3906a9d5f9a5d74ed0e946478389e/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e34b5bc34d3906a9d5f9a5d74ed0e946478389e/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c?ref=2e34b5bc34d3906a9d5f9a5d74ed0e946478389e", "patch": "@@ -84,8 +84,10 @@ along with GCC; see the file COPYING3.  If not see\n   (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512F_SET)\n #define OPTION_MASK_ISA_AVX512VNNI_SET \\\n   (OPTION_MASK_ISA_AVX512VNNI | OPTION_MASK_ISA_AVX512F_SET)\n-#define OPTION_MASK_ISA_AVX512VPOPCNTDQ_SET OPTION_MASK_ISA_AVX512VPOPCNTDQ\n-#define OPTION_MASK_ISA_AVX512BITALG_SET OPTION_MASK_ISA_AVX512BITALG\n+#define OPTION_MASK_ISA_AVX512VPOPCNTDQ_SET \\\n+  (OPTION_MASK_ISA_AVX512VPOPCNTDQ | OPTION_MASK_ISA_AVX512F_SET)\n+#define OPTION_MASK_ISA_AVX512BITALG_SET \\\n+  (OPTION_MASK_ISA_AVX512BITALG | OPTION_MASK_ISA_AVX512F_SET)\n #define OPTION_MASK_ISA_RTM_SET OPTION_MASK_ISA_RTM\n #define OPTION_MASK_ISA_PRFCHW_SET OPTION_MASK_ISA_PRFCHW\n #define OPTION_MASK_ISA_RDSEED_SET OPTION_MASK_ISA_RDSEED\n@@ -187,7 +189,8 @@ along with GCC; see the file COPYING3.  If not see\n    | OPTION_MASK_ISA_AVX512PF_UNSET | OPTION_MASK_ISA_AVX512ER_UNSET \\\n    | OPTION_MASK_ISA_AVX512DQ_UNSET | OPTION_MASK_ISA_AVX512BW_UNSET \\\n    | OPTION_MASK_ISA_AVX512VL_UNSET | OPTION_MASK_ISA_AVX512VBMI2_UNSET \\\n-   | OPTION_MASK_ISA_AVX512VNNI_UNSET)\n+   | OPTION_MASK_ISA_AVX512VNNI_UNSET | OPTION_MASK_ISA_AVX512VPOPCNTDQ_UNSET \\\n+   | OPTION_MASK_ISA_AVX512BITALG_UNSET)\n #define OPTION_MASK_ISA_AVX512CD_UNSET OPTION_MASK_ISA_AVX512CD\n #define OPTION_MASK_ISA_AVX512PF_UNSET OPTION_MASK_ISA_AVX512PF\n #define OPTION_MASK_ISA_AVX512ER_UNSET OPTION_MASK_ISA_AVX512ER\n@@ -257,6 +260,11 @@ along with GCC; see the file COPYING3.  If not see\n   (OPTION_MASK_ISA_MMX_UNSET \\\n    | OPTION_MASK_ISA_SSE_UNSET)\n \n+#define OPTION_MASK_ISA2_AVX512F_UNSET \\\n+  (OPTION_MASK_ISA_AVX5124FMAPS_UNSET | OPTION_MASK_ISA_AVX5124VNNIW_UNSET)\n+#define OPTION_MASK_ISA2_GENERAL_REGS_ONLY_UNSET \\\n+  (OPTION_MASK_ISA2_AVX512F_UNSET | OPTION_MASK_ISA_MPX)\n+\n /* Implement TARGET_HANDLE_OPTION.  */\n \n bool\n@@ -278,11 +286,11 @@ ix86_handle_option (struct gcc_options *opts,\n \t  opts->x_ix86_isa_flags\n \t    &= ~OPTION_MASK_ISA_GENERAL_REGS_ONLY_UNSET;\n \t  opts->x_ix86_isa_flags2\n-\t    &= ~OPTION_MASK_ISA_MPX;\n+\t    &= ~OPTION_MASK_ISA2_GENERAL_REGS_ONLY_UNSET;\n \t  opts->x_ix86_isa_flags_explicit\n \t    |= OPTION_MASK_ISA_GENERAL_REGS_ONLY_UNSET;\n \t  opts->x_ix86_isa_flags2_explicit\n-\t    |= OPTION_MASK_ISA_MPX;\n+\t    |= OPTION_MASK_ISA2_GENERAL_REGS_ONLY_UNSET;\n \n \t  opts->x_target_flags &= ~MASK_80387;\n \t}\n@@ -339,6 +347,8 @@ ix86_handle_option (struct gcc_options *opts,\n \t{\n \t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_SSE_UNSET;\n \t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_SSE_UNSET;\n+\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA2_AVX512F_UNSET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_AVX512F_UNSET;\n \t}\n       return true;\n \n@@ -352,6 +362,8 @@ ix86_handle_option (struct gcc_options *opts,\n \t{\n \t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_SSE2_UNSET;\n \t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_SSE2_UNSET;\n+\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA2_AVX512F_UNSET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_AVX512F_UNSET;\n \t}\n       return true;\n \n@@ -365,6 +377,8 @@ ix86_handle_option (struct gcc_options *opts,\n \t{\n \t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_SSE3_UNSET;\n \t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_SSE3_UNSET;\n+\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA2_AVX512F_UNSET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_AVX512F_UNSET;\n \t}\n       return true;\n \n@@ -378,6 +392,8 @@ ix86_handle_option (struct gcc_options *opts,\n \t{\n \t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_SSSE3_UNSET;\n \t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_SSSE3_UNSET;\n+\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA2_AVX512F_UNSET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_AVX512F_UNSET;\n \t}\n       return true;\n \n@@ -391,6 +407,8 @@ ix86_handle_option (struct gcc_options *opts,\n \t{\n \t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_SSE4_1_UNSET;\n \t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_SSE4_1_UNSET;\n+\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA2_AVX512F_UNSET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_AVX512F_UNSET;\n \t}\n       return true;\n \n@@ -404,6 +422,8 @@ ix86_handle_option (struct gcc_options *opts,\n \t{\n \t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_SSE4_2_UNSET;\n \t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_SSE4_2_UNSET;\n+\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA2_AVX512F_UNSET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_AVX512F_UNSET;\n \t}\n       return true;\n \n@@ -417,6 +437,8 @@ ix86_handle_option (struct gcc_options *opts,\n \t{\n \t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_AVX_UNSET;\n \t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_AVX_UNSET;\n+\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA2_AVX512F_UNSET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_AVX512F_UNSET;\n \t}\n       return true;\n \n@@ -430,6 +452,8 @@ ix86_handle_option (struct gcc_options *opts,\n \t{\n \t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_AVX2_UNSET;\n \t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_AVX2_UNSET;\n+\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA2_AVX512F_UNSET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_AVX512F_UNSET;\n \t}\n       return true;\n \n@@ -443,20 +467,8 @@ ix86_handle_option (struct gcc_options *opts,\n \t{\n \t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_AVX512F_UNSET;\n \t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_AVX512F_UNSET;\n-\n-\t  /* Turn off additional isa flags.  */\n-\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA_AVX5124FMAPS_UNSET;\n-\t  opts->x_ix86_isa_flags2_explicit\n-\t\t|= OPTION_MASK_ISA_AVX5124FMAPS_UNSET;\n-\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA_AVX5124VNNIW_UNSET;\n-\t  opts->x_ix86_isa_flags2_explicit\n-\t\t|= OPTION_MASK_ISA_AVX5124VNNIW_UNSET;\n-\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA_AVX512VPOPCNTDQ_UNSET;\n-\t  opts->x_ix86_isa_flags2_explicit\n-\t\t|= OPTION_MASK_ISA_AVX512VPOPCNTDQ_UNSET;\n-\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA_AVX512BITALG_UNSET;\n-\t  opts->x_ix86_isa_flags2_explicit\n-\t\t|= OPTION_MASK_ISA_AVX512BITALG_UNSET;\n+\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA2_AVX512F_UNSET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_AVX512F_UNSET;\n \t}\n       return true;\n \n@@ -639,30 +651,28 @@ ix86_handle_option (struct gcc_options *opts,\n     case OPT_mavx512vpopcntdq:\n       if (value)\n \t{\n-\t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA_AVX512VPOPCNTDQ_SET;\n-\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA_AVX512VPOPCNTDQ_SET;\n-\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_AVX512F_SET;\n-\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_AVX512F_SET;\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_AVX512VPOPCNTDQ_SET;\n+\t  opts->x_ix86_isa_flags_explicit\n+\t    |= OPTION_MASK_ISA_AVX512VPOPCNTDQ_SET;\n \t}\n       else\n \t{\n-\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA_AVX512VPOPCNTDQ_UNSET;\n-\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA_AVX512VPOPCNTDQ_UNSET;\n+\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_AVX512VPOPCNTDQ_UNSET;\n+\t  opts->x_ix86_isa_flags_explicit\n+\t    |= OPTION_MASK_ISA_AVX512VPOPCNTDQ_UNSET;\n \t}\n       return true;\n \n     case OPT_mavx512bitalg:\n       if (value)\n \t{\n-\t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA_AVX512BITALG_SET;\n-\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA_AVX512BITALG_SET;\n-\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_AVX512F_SET;\n-\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_AVX512F_SET;\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_AVX512BITALG_SET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_AVX512BITALG_SET;\n \t}\n       else\n \t{\n-\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA_AVX512BITALG_UNSET;\n-\t  opts->x_ix86_isa_flags2_explicit\n+\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_AVX512BITALG_UNSET;\n+\t  opts->x_ix86_isa_flags_explicit\n \t\t|= OPTION_MASK_ISA_AVX512BITALG_UNSET;\n \t}\n       return true;\n@@ -779,6 +789,8 @@ ix86_handle_option (struct gcc_options *opts,\n     case OPT_mno_sse4:\n       opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_SSE4_UNSET;\n       opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_SSE4_UNSET;\n+      opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA2_AVX512F_UNSET;\n+      opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_AVX512F_UNSET;\n       return true;\n \n     case OPT_msse4a:"}, {"sha": "2ffa35a539e4dcbe424cb2c0a7e81ce8f85b5a59", "filename": "gcc/config/i386/avx512bitalgintrin.h", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e34b5bc34d3906a9d5f9a5d74ed0e946478389e/gcc%2Fconfig%2Fi386%2Favx512bitalgintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e34b5bc34d3906a9d5f9a5d74ed0e946478389e/gcc%2Fconfig%2Fi386%2Favx512bitalgintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512bitalgintrin.h?ref=2e34b5bc34d3906a9d5f9a5d74ed0e946478389e", "patch": "@@ -143,23 +143,6 @@ _mm256_maskz_popcnt_epi8 (__mmask32 __U, __m256i __A)\n \t\t\t\t\t\t _mm256_setzero_si256 (),\n \t\t\t\t\t\t(__mmask32) __U);\n }\n-extern __inline __mmask16\n-__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_bitshuffle_epi64_mask (__m128i __A, __m128i __B)\n-{\n-  return (__mmask16) __builtin_ia32_vpshufbitqmb128_mask ((__v2di) __A,\n-\t\t\t\t\t\t (__v2di) __B,\n-\t\t\t\t\t\t (__mmask16) -1);\n-}\n-\n-extern __inline __mmask16\n-__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_mask_bitshuffle_epi64_mask (__mmask16 __M, __m128i __A, __m128i __B)\n-{\n-  return (__mmask16) __builtin_ia32_vpshufbitqmb128_mask ((__v2di) __A,\n-\t\t\t\t\t\t (__v2di) __B,\n-\t\t\t\t\t\t (__mmask16) __M);\n-}\n \n extern __inline __mmask32\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n@@ -191,6 +174,24 @@ _mm256_mask_bitshuffle_epi64_mask (__mmask32 __M, __m256i __A, __m256i __B)\n #define __DISABLE_AVX512BITALGVL__\n #endif /* __AVX512VLBW__ */\n \n+extern __inline __mmask16\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_bitshuffle_epi64_mask (__m128i __A, __m128i __B)\n+{\n+  return (__mmask16) __builtin_ia32_vpshufbitqmb128_mask ((__v2di) __A,\n+\t\t\t\t\t\t (__v2di) __B,\n+\t\t\t\t\t\t (__mmask16) -1);\n+}\n+\n+extern __inline __mmask16\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_bitshuffle_epi64_mask (__mmask16 __M, __m128i __A, __m128i __B)\n+{\n+  return (__mmask16) __builtin_ia32_vpshufbitqmb128_mask ((__v2di) __A,\n+\t\t\t\t\t\t (__v2di) __B,\n+\t\t\t\t\t\t (__mmask16) __M);\n+}\n+\n extern __inline __m256i\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_popcnt_epi8 (__m256i __A)"}, {"sha": "aaddef33778cd3781759784862f2b3bf429a54fb", "filename": "gcc/config/i386/avx512vbmi2intrin.h", "status": "modified", "additions": 216, "deletions": 200, "changes": 416, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e34b5bc34d3906a9d5f9a5d74ed0e946478389e/gcc%2Fconfig%2Fi386%2Favx512vbmi2intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e34b5bc34d3906a9d5f9a5d74ed0e946478389e/gcc%2Fconfig%2Fi386%2Favx512vbmi2intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512vbmi2intrin.h?ref=2e34b5bc34d3906a9d5f9a5d74ed0e946478389e", "patch": "@@ -28,127 +28,11 @@\n #ifndef __AVX512VBMI2INTRIN_H_INCLUDED\n #define __AVX512VBMI2INTRIN_H_INCLUDED\n \n-#if !defined(__AVX512VBMI2__) || !defined(__AVX512BW__)\n+#if !defined(__AVX512VBMI2__)\n #pragma GCC push_options\n-#pragma GCC target(\"avx512vbmi2,avx512bw\")\n-#define __DISABLE_AVX512VBMI2BW__\n-#endif /* __AVX512VBMI2BW__ */\n-\n-extern __inline __m512i\n-__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_mask_compress_epi8 (__m512i __A, __mmask64 __B, __m512i __C)\n-{\n-  return (__m512i) __builtin_ia32_compressqi512_mask ((__v64qi)__C,\n-\t\t\t\t\t\t(__v64qi)__A, (__mmask64)__B);\n-}\n-\n-\n-extern __inline __m512i\n-__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_maskz_compress_epi8 (__mmask64 __A, __m512i __B)\n-{\n-  return (__m512i) __builtin_ia32_compressqi512_mask ((__v64qi)__B,\n-\t\t\t(__v64qi)_mm512_setzero_si512 (), (__mmask64)__A);\n-}\n-\n-\n-extern __inline void\n-__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_mask_compressstoreu_epi8 (void * __A, __mmask64 __B, __m512i __C)\n-{\n-  __builtin_ia32_compressstoreuqi512_mask ((__v64qi *) __A, (__v64qi) __C,\n-\t\t\t\t\t\t\t(__mmask64) __B);\n-}\n-\n-extern __inline __m512i\n-__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_mask_compress_epi16 (__m512i __A, __mmask32 __B, __m512i __C)\n-{\n-  return (__m512i) __builtin_ia32_compresshi512_mask ((__v32hi)__C,\n-\t\t\t\t\t\t(__v32hi)__A, (__mmask32)__B);\n-}\n-\n-extern __inline __m512i\n-__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_maskz_compress_epi16 (__mmask32 __A, __m512i __B)\n-{\n-  return (__m512i) __builtin_ia32_compresshi512_mask ((__v32hi)__B,\n-\t\t\t(__v32hi)_mm512_setzero_si512 (), (__mmask32)__A);\n-}\n-\n-extern __inline void\n-__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_mask_compressstoreu_epi16 (void * __A, __mmask32 __B, __m512i __C)\n-{\n-  __builtin_ia32_compressstoreuhi512_mask ((__v32hi *) __A, (__v32hi) __C,\n-\t\t\t\t\t\t\t(__mmask32) __B);\n-}\n-\n-extern __inline __m512i\n-__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_mask_expand_epi8 (__m512i __A, __mmask64 __B, __m512i __C)\n-{\n-  return (__m512i) __builtin_ia32_expandqi512_mask ((__v64qi) __C,\n-\t\t\t\t\t\t    (__v64qi) __A,\n-\t\t\t\t\t\t    (__mmask64) __B);\n-}\n-\n-extern __inline __m512i\n-__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_maskz_expand_epi8 (__mmask64 __A, __m512i __B)\n-{\n-  return (__m512i) __builtin_ia32_expandqi512_maskz ((__v64qi) __B,\n-\t\t\t(__v64qi) _mm512_setzero_si512 (), (__mmask64) __A);\n-}\n-\n-extern __inline __m512i\n-__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_mask_expandloadu_epi8 (__m512i __A, __mmask64 __B, const void * __C)\n-{\n-  return (__m512i) __builtin_ia32_expandloadqi512_mask ((const __v64qi *) __C,\n-\t\t\t\t\t(__v64qi) __A, (__mmask64) __B);\n-}\n-\n-extern __inline __m512i\n-__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_maskz_expandloadu_epi8 (__mmask64 __A, const void * __B)\n-{\n-  return (__m512i) __builtin_ia32_expandloadqi512_maskz ((const __v64qi *) __B,\n-\t\t\t(__v64qi) _mm512_setzero_si512 (), (__mmask64) __A);\n-}\n-\n-extern __inline __m512i\n-__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_mask_expand_epi16 (__m512i __A, __mmask32 __B, __m512i __C)\n-{\n-  return (__m512i) __builtin_ia32_expandhi512_mask ((__v32hi) __C,\n-\t\t\t\t\t\t    (__v32hi) __A,\n-\t\t\t\t\t\t    (__mmask32) __B);\n-}\n-\n-extern __inline __m512i\n-__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_maskz_expand_epi16 (__mmask32 __A, __m512i __B)\n-{\n-  return (__m512i) __builtin_ia32_expandhi512_maskz ((__v32hi) __B,\n-\t\t\t(__v32hi) _mm512_setzero_si512 (), (__mmask32) __A);\n-}\n-\n-extern __inline __m512i\n-__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_mask_expandloadu_epi16 (__m512i __A, __mmask32 __B, const void * __C)\n-{\n-  return (__m512i) __builtin_ia32_expandloadhi512_mask ((const __v32hi *) __C,\n-\t\t\t\t\t(__v32hi) __A, (__mmask32) __B);\n-}\n-\n-extern __inline __m512i\n-__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_maskz_expandloadu_epi16 (__mmask32 __A, const void * __B)\n-{\n-  return (__m512i) __builtin_ia32_expandloadhi512_maskz ((const __v32hi *) __B,\n-\t\t\t(__v32hi) _mm512_setzero_si512 (), (__mmask32) __A);\n-}\n+#pragma GCC target(\"avx512vbmi2\")\n+#define __DISABLE_AVX512VBMI2__\n+#endif /* __AVX512VBMI2__ */\n \n #ifdef __OPTIMIZE__\n extern __inline __m512i\n@@ -159,23 +43,6 @@ _mm512_shrdi_epi16 (__m512i __A, __m512i __B, int __C)\n \t\t\t\t\t\t\t\t\t__C);\n }\n \n-extern __inline __m512i\n-__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_mask_shrdi_epi16 (__m512i __A, __mmask32 __B, __m512i __C, __m512i __D,\n-\t\t\t\t\t\t\t\tint __E)\n-{\n-  return (__m512i)__builtin_ia32_vpshrd_v32hi_mask ((__v32hi)__C,\n-\t\t\t(__v32hi) __D, __E, (__v32hi) __A, (__mmask32)__B);\n-}\n-\n-extern __inline __m512i\n-__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_maskz_shrdi_epi16 (__mmask32 __A, __m512i __B, __m512i __C, int __D)\n-{\n-  return (__m512i)__builtin_ia32_vpshrd_v32hi_mask ((__v32hi)__B,\n-\t(__v32hi) __C, __D, (__v32hi) _mm512_setzero_si512 (), (__mmask32)__A);\n-}\n-\n extern __inline __m512i\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_shrdi_epi32 (__m512i __A, __m512i __B, int __C)\n@@ -233,23 +100,6 @@ _mm512_shldi_epi16 (__m512i __A, __m512i __B, int __C)\n \t\t\t\t\t\t\t\t\t__C);\n }\n \n-extern __inline __m512i\n-__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_mask_shldi_epi16 (__m512i __A, __mmask32 __B, __m512i __C, __m512i __D,\n-\t\t\t\t\t\t\t\tint __E)\n-{\n-  return (__m512i)__builtin_ia32_vpshld_v32hi_mask ((__v32hi)__C,\n-\t\t\t(__v32hi) __D, __E, (__v32hi) __A, (__mmask32)__B);\n-}\n-\n-extern __inline __m512i\n-__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_maskz_shldi_epi16 (__mmask32 __A, __m512i __B, __m512i __C, int __D)\n-{\n-  return (__m512i)__builtin_ia32_vpshld_v32hi_mask ((__v32hi)__B,\n-\t(__v32hi) __C, __D, (__v32hi) _mm512_setzero_si512 (), (__mmask32)__A);\n-}\n-\n extern __inline __m512i\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_shldi_epi32 (__m512i __A, __m512i __B, int __C)\n@@ -302,13 +152,6 @@ _mm512_maskz_shldi_epi64 (__mmask8 __A, __m512i __B, __m512i __C, int __D)\n #define _mm512_shrdi_epi16(A, B, C) \\\n   ((__m512i) __builtin_ia32_vpshrd_v32hi ((__v32hi)(__m512i)(A), \\\n \t\t\t\t\t\t(__v32hi)(__m512i)(B),(int)(C))\n-#define _mm512_mask_shrdi_epi16(A, B, C, D, E) \\\n-  ((__m512i) __builtin_ia32_vpshrd_v32hi_mask ((__v32hi)(__m512i)(C), \\\n-\t(__v32hi)(__m512i)(D), (int)(E), (__v32hi)(__m512i)(A),(__mmask32)(B))\n-#define _mm512_maskz_shrdi_epi16(A, B, C, D) \\\n-  ((__m512i) __builtin_ia32_vpshrd_v32hi_mask ((__v32hi)(__m512i)(B), \\\n-\t(__v32hi)(__m512i)(C),(int)(D), \\\n-\t(__v32hi)(__m512i)_mm512_setzero_si512 (), (__mmask32)(A))\n #define _mm512_shrdi_epi32(A, B, C) \\\n   ((__m512i) __builtin_ia32_vpshrd_v16si ((__v16si)(__m512i)(A), \\\n \t(__v16si)(__m512i)(B),(int)(C))\n@@ -332,13 +175,6 @@ _mm512_maskz_shldi_epi64 (__mmask8 __A, __m512i __B, __m512i __C, int __D)\n #define _mm512_shldi_epi16(A, B, C) \\\n   ((__m512i) __builtin_ia32_vpshld_v32hi ((__v32hi)(__m512i)(A), \\\n \t\t\t\t\t\t(__v32hi)(__m512i)(B),(int)(C))\n-#define _mm512_mask_shldi_epi16(A, B, C, D, E) \\\n-  ((__m512i) __builtin_ia32_vpshld_v32hi_mask ((__v32hi)(__m512i)(C), \\\n-\t(__v32hi)(__m512i)(D), (int)(E), (__v32hi)(__m512i)(A),(__mmask32)(B))\n-#define _mm512_maskz_shldi_epi16(A, B, C, D) \\\n-  ((__m512i) __builtin_ia32_vpshld_v32hi_mask ((__v32hi)(__m512i)(B),   \\\n-\t(__v32hi)(__m512i)(C),(int)(D), \t\t\t\t\\\n-\t(__v32hi)(__m512i)_mm512_setzero_si512 (), (__mmask32)(A))\n #define _mm512_shldi_epi32(A, B, C) \\\n   ((__m512i) __builtin_ia32_vpshld_v16si ((__v16si)(__m512i)(A), \t\\\n \t\t\t\t(__v16si)(__m512i)(B),(int)(C))\n@@ -369,22 +205,6 @@ _mm512_shrdv_epi16 (__m512i __A, __m512i __B, __m512i __C)\n \t\t\t\t\t\t\t\t(__v32hi) __C);\n }\n \n-extern __inline __m512i\n-__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_mask_shrdv_epi16 (__m512i __A, __mmask32 __B, __m512i __C, __m512i __D)\n-{\n-  return (__m512i)__builtin_ia32_vpshrdv_v32hi_mask ((__v32hi)__A,\n-\t\t\t\t(__v32hi) __C, (__v32hi) __D, (__mmask32)__B);\n-}\n-\n-extern __inline __m512i\n-__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_maskz_shrdv_epi16 (__mmask32 __A, __m512i __B, __m512i __C, __m512i __D)\n-{\n-  return (__m512i)__builtin_ia32_vpshrdv_v32hi_maskz ((__v32hi)__B,\n-\t\t\t\t(__v32hi) __C, (__v32hi) __D, (__mmask32)__A);\n-}\n-\n extern __inline __m512i\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_shrdv_epi32 (__m512i __A, __m512i __B, __m512i __C)\n@@ -440,22 +260,6 @@ _mm512_shldv_epi16 (__m512i __A, __m512i __B, __m512i __C)\n \t\t\t\t\t\t\t (__v32hi) __C);\n }\n \n-extern __inline __m512i\n-__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_mask_shldv_epi16 (__m512i __A, __mmask32 __B, __m512i __C, __m512i __D)\n-{\n-  return (__m512i)__builtin_ia32_vpshldv_v32hi_mask ((__v32hi)__A,\n-\t\t\t\t(__v32hi) __C, (__v32hi) __D, (__mmask32)__B);\n-}\n-\n-extern __inline __m512i\n-__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_maskz_shldv_epi16 (__mmask32 __A, __m512i __B, __m512i __C, __m512i __D)\n-{\n-  return (__m512i)__builtin_ia32_vpshldv_v32hi_maskz ((__v32hi)__B,\n-\t\t\t\t(__v32hi) __C, (__v32hi) __D, (__mmask32)__A);\n-}\n-\n extern __inline __m512i\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_shldv_epi32 (__m512i __A, __m512i __B, __m512i __C)\n@@ -504,6 +308,218 @@ _mm512_maskz_shldv_epi64 (__mmask8 __A, __m512i __B, __m512i __C, __m512i __D)\n \t\t\t\t\t\t(__v8di) __D, (__mmask8)__A);\n }\n \n+#ifdef __DISABLE_AVX512VBMI2__\n+#undef __DISABLE_AVX512VBMI2__\n+\n+#pragma GCC pop_options\n+#endif /* __DISABLE_AVX512VBMI2__ */\n+\n+#if !defined(__AVX512VBMI2__) || !defined(__AVX512BW__)\n+#pragma GCC push_options\n+#pragma GCC target(\"avx512vbmi2,avx512bw\")\n+#define __DISABLE_AVX512VBMI2BW__\n+#endif /* __AVX512VBMI2BW__ */\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_compress_epi8 (__m512i __A, __mmask64 __B, __m512i __C)\n+{\n+  return (__m512i) __builtin_ia32_compressqi512_mask ((__v64qi)__C,\n+\t\t\t\t\t\t(__v64qi)__A, (__mmask64)__B);\n+}\n+\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_compress_epi8 (__mmask64 __A, __m512i __B)\n+{\n+  return (__m512i) __builtin_ia32_compressqi512_mask ((__v64qi)__B,\n+\t\t\t(__v64qi)_mm512_setzero_si512 (), (__mmask64)__A);\n+}\n+\n+\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_compressstoreu_epi8 (void * __A, __mmask64 __B, __m512i __C)\n+{\n+  __builtin_ia32_compressstoreuqi512_mask ((__v64qi *) __A, (__v64qi) __C,\n+\t\t\t\t\t\t\t(__mmask64) __B);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_compress_epi16 (__m512i __A, __mmask32 __B, __m512i __C)\n+{\n+  return (__m512i) __builtin_ia32_compresshi512_mask ((__v32hi)__C,\n+\t\t\t\t\t\t(__v32hi)__A, (__mmask32)__B);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_compress_epi16 (__mmask32 __A, __m512i __B)\n+{\n+  return (__m512i) __builtin_ia32_compresshi512_mask ((__v32hi)__B,\n+\t\t\t(__v32hi)_mm512_setzero_si512 (), (__mmask32)__A);\n+}\n+\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_compressstoreu_epi16 (void * __A, __mmask32 __B, __m512i __C)\n+{\n+  __builtin_ia32_compressstoreuhi512_mask ((__v32hi *) __A, (__v32hi) __C,\n+\t\t\t\t\t\t\t(__mmask32) __B);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_expand_epi8 (__m512i __A, __mmask64 __B, __m512i __C)\n+{\n+  return (__m512i) __builtin_ia32_expandqi512_mask ((__v64qi) __C,\n+\t\t\t\t\t\t    (__v64qi) __A,\n+\t\t\t\t\t\t    (__mmask64) __B);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_expand_epi8 (__mmask64 __A, __m512i __B)\n+{\n+  return (__m512i) __builtin_ia32_expandqi512_maskz ((__v64qi) __B,\n+\t\t\t(__v64qi) _mm512_setzero_si512 (), (__mmask64) __A);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_expandloadu_epi8 (__m512i __A, __mmask64 __B, const void * __C)\n+{\n+  return (__m512i) __builtin_ia32_expandloadqi512_mask ((const __v64qi *) __C,\n+\t\t\t\t\t(__v64qi) __A, (__mmask64) __B);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_expandloadu_epi8 (__mmask64 __A, const void * __B)\n+{\n+  return (__m512i) __builtin_ia32_expandloadqi512_maskz ((const __v64qi *) __B,\n+\t\t\t(__v64qi) _mm512_setzero_si512 (), (__mmask64) __A);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_expand_epi16 (__m512i __A, __mmask32 __B, __m512i __C)\n+{\n+  return (__m512i) __builtin_ia32_expandhi512_mask ((__v32hi) __C,\n+\t\t\t\t\t\t    (__v32hi) __A,\n+\t\t\t\t\t\t    (__mmask32) __B);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_expand_epi16 (__mmask32 __A, __m512i __B)\n+{\n+  return (__m512i) __builtin_ia32_expandhi512_maskz ((__v32hi) __B,\n+\t\t\t(__v32hi) _mm512_setzero_si512 (), (__mmask32) __A);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_expandloadu_epi16 (__m512i __A, __mmask32 __B, const void * __C)\n+{\n+  return (__m512i) __builtin_ia32_expandloadhi512_mask ((const __v32hi *) __C,\n+\t\t\t\t\t(__v32hi) __A, (__mmask32) __B);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_expandloadu_epi16 (__mmask32 __A, const void * __B)\n+{\n+  return (__m512i) __builtin_ia32_expandloadhi512_maskz ((const __v32hi *) __B,\n+\t\t\t(__v32hi) _mm512_setzero_si512 (), (__mmask32) __A);\n+}\n+\n+#ifdef __OPTIMIZE__\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_shrdi_epi16 (__m512i __A, __mmask32 __B, __m512i __C, __m512i __D,\n+\t\t\t\t\t\t\t\tint __E)\n+{\n+  return (__m512i)__builtin_ia32_vpshrd_v32hi_mask ((__v32hi)__C,\n+\t\t\t(__v32hi) __D, __E, (__v32hi) __A, (__mmask32)__B);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_shrdi_epi16 (__mmask32 __A, __m512i __B, __m512i __C, int __D)\n+{\n+  return (__m512i)__builtin_ia32_vpshrd_v32hi_mask ((__v32hi)__B,\n+\t(__v32hi) __C, __D, (__v32hi) _mm512_setzero_si512 (), (__mmask32)__A);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_shldi_epi16 (__m512i __A, __mmask32 __B, __m512i __C, __m512i __D,\n+\t\t\t\t\t\t\t\tint __E)\n+{\n+  return (__m512i)__builtin_ia32_vpshld_v32hi_mask ((__v32hi)__C,\n+\t\t\t(__v32hi) __D, __E, (__v32hi) __A, (__mmask32)__B);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_shldi_epi16 (__mmask32 __A, __m512i __B, __m512i __C, int __D)\n+{\n+  return (__m512i)__builtin_ia32_vpshld_v32hi_mask ((__v32hi)__B,\n+\t(__v32hi) __C, __D, (__v32hi) _mm512_setzero_si512 (), (__mmask32)__A);\n+}\n+\n+#else\n+#define _mm512_mask_shrdi_epi16(A, B, C, D, E) \\\n+  ((__m512i) __builtin_ia32_vpshrd_v32hi_mask ((__v32hi)(__m512i)(C), \\\n+\t(__v32hi)(__m512i)(D), (int)(E), (__v32hi)(__m512i)(A),(__mmask32)(B))\n+#define _mm512_maskz_shrdi_epi16(A, B, C, D) \\\n+  ((__m512i) __builtin_ia32_vpshrd_v32hi_mask ((__v32hi)(__m512i)(B), \\\n+\t(__v32hi)(__m512i)(C),(int)(D), \\\n+\t(__v32hi)(__m512i)_mm512_setzero_si512 (), (__mmask32)(A))\n+#define _mm512_mask_shldi_epi16(A, B, C, D, E) \\\n+  ((__m512i) __builtin_ia32_vpshld_v32hi_mask ((__v32hi)(__m512i)(C), \\\n+\t(__v32hi)(__m512i)(D), (int)(E), (__v32hi)(__m512i)(A),(__mmask32)(B))\n+#define _mm512_maskz_shldi_epi16(A, B, C, D) \\\n+  ((__m512i) __builtin_ia32_vpshld_v32hi_mask ((__v32hi)(__m512i)(B),   \\\n+\t(__v32hi)(__m512i)(C),(int)(D), \t\t\t\t\\\n+\t(__v32hi)(__m512i)_mm512_setzero_si512 (), (__mmask32)(A))\n+#endif\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_shrdv_epi16 (__m512i __A, __mmask32 __B, __m512i __C, __m512i __D)\n+{\n+  return (__m512i)__builtin_ia32_vpshrdv_v32hi_mask ((__v32hi)__A,\n+\t\t\t\t(__v32hi) __C, (__v32hi) __D, (__mmask32)__B);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_shrdv_epi16 (__mmask32 __A, __m512i __B, __m512i __C, __m512i __D)\n+{\n+  return (__m512i)__builtin_ia32_vpshrdv_v32hi_maskz ((__v32hi)__B,\n+\t\t\t\t(__v32hi) __C, (__v32hi) __D, (__mmask32)__A);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_shldv_epi16 (__m512i __A, __mmask32 __B, __m512i __C, __m512i __D)\n+{\n+  return (__m512i)__builtin_ia32_vpshldv_v32hi_mask ((__v32hi)__A,\n+\t\t\t\t(__v32hi) __C, (__v32hi) __D, (__mmask32)__B);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_shldv_epi16 (__mmask32 __A, __m512i __B, __m512i __C, __m512i __D)\n+{\n+  return (__m512i)__builtin_ia32_vpshldv_v32hi_maskz ((__v32hi)__B,\n+\t\t\t\t(__v32hi) __C, (__v32hi) __D, (__mmask32)__A);\n+}\n+\n #ifdef __DISABLE_AVX512VBMI2BW__\n #undef __DISABLE_AVX512VBMI2BW__\n "}, {"sha": "27cf6605362f206f7a007ee344de72afac3aa635", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 124, "deletions": 122, "changes": 246, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e34b5bc34d3906a9d5f9a5d74ed0e946478389e/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e34b5bc34d3906a9d5f9a5d74ed0e946478389e/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=2e34b5bc34d3906a9d5f9a5d74ed0e946478389e", "patch": "@@ -393,27 +393,27 @@ BDESC (OPTION_MASK_ISA_PKU, CODE_FOR_rdpkru,  \"__builtin_ia32_rdpkru\", IX86_BUIL\n BDESC (OPTION_MASK_ISA_PKU, CODE_FOR_wrpkru,  \"__builtin_ia32_wrpkru\", IX86_BUILTIN_WRPKRU, UNKNOWN, (int) VOID_FTYPE_UNSIGNED)\n \n /* VBMI2 */\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_compressstorev64qi_mask, \"__builtin_ia32_compressstoreuqi512_mask\", IX86_BUILTIN_PCOMPRESSBSTORE512, UNKNOWN, (int) VOID_FTYPE_PV64QI_V64QI_UDI)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_compressstorev32hi_mask, \"__builtin_ia32_compressstoreuhi512_mask\", IX86_BUILTIN_PCOMPRESSWSTORE512, UNKNOWN, (int) VOID_FTYPE_PV32HI_V32HI_USI)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_compressstorev32qi_mask, \"__builtin_ia32_compressstoreuqi256_mask\", IX86_BUILTIN_PCOMPRESSBSTORE256, UNKNOWN, (int) VOID_FTYPE_PV32QI_V32QI_USI)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512BW, CODE_FOR_compressstorev64qi_mask, \"__builtin_ia32_compressstoreuqi512_mask\", IX86_BUILTIN_PCOMPRESSBSTORE512, UNKNOWN, (int) VOID_FTYPE_PV64QI_V64QI_UDI)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512BW, CODE_FOR_compressstorev32hi_mask, \"__builtin_ia32_compressstoreuhi512_mask\", IX86_BUILTIN_PCOMPRESSWSTORE512, UNKNOWN, (int) VOID_FTYPE_PV32HI_V32HI_USI)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL | OPTION_MASK_ISA_AVX512BW, CODE_FOR_compressstorev32qi_mask, \"__builtin_ia32_compressstoreuqi256_mask\", IX86_BUILTIN_PCOMPRESSBSTORE256, UNKNOWN, (int) VOID_FTYPE_PV32QI_V32QI_USI)\n BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_compressstorev16qi_mask, \"__builtin_ia32_compressstoreuqi128_mask\", IX86_BUILTIN_PCOMPRESSBSTORE128, UNKNOWN, (int) VOID_FTYPE_PV16QI_V16QI_UHI)\n BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_compressstorev16hi_mask, \"__builtin_ia32_compressstoreuhi256_mask\", IX86_BUILTIN_PCOMPRESSWSTORE256, UNKNOWN, (int) VOID_FTYPE_PV16HI_V16HI_UHI)\n BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_compressstorev8hi_mask, \"__builtin_ia32_compressstoreuhi128_mask\", IX86_BUILTIN_PCOMPRESSWSTORE128, UNKNOWN, (int) VOID_FTYPE_PV8HI_V8HI_UQI)\n \n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_expandv64qi_mask, \"__builtin_ia32_expandloadqi512_mask\", IX86_BUILTIN_PEXPANDBLOAD512, UNKNOWN, (int) V64QI_FTYPE_PCV64QI_V64QI_UDI)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_expandv64qi_maskz, \"__builtin_ia32_expandloadqi512_maskz\", IX86_BUILTIN_PEXPANDBLOAD512Z, UNKNOWN, (int) V64QI_FTYPE_PCV64QI_V64QI_UDI)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_expandv32hi_mask, \"__builtin_ia32_expandloadhi512_mask\", IX86_BUILTIN_PEXPANDWLOAD512, UNKNOWN, (int) V32HI_FTYPE_PCV32HI_V32HI_USI)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_expandv32hi_maskz, \"__builtin_ia32_expandloadhi512_maskz\", IX86_BUILTIN_PEXPANDWLOAD512Z, UNKNOWN, (int) V32HI_FTYPE_PCV32HI_V32HI_USI)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512BW, CODE_FOR_expandv64qi_mask, \"__builtin_ia32_expandloadqi512_mask\", IX86_BUILTIN_PEXPANDBLOAD512, UNKNOWN, (int) V64QI_FTYPE_PCV64QI_V64QI_UDI)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512BW, CODE_FOR_expandv64qi_maskz, \"__builtin_ia32_expandloadqi512_maskz\", IX86_BUILTIN_PEXPANDBLOAD512Z, UNKNOWN, (int) V64QI_FTYPE_PCV64QI_V64QI_UDI)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512BW, CODE_FOR_expandv32hi_mask, \"__builtin_ia32_expandloadhi512_mask\", IX86_BUILTIN_PEXPANDWLOAD512, UNKNOWN, (int) V32HI_FTYPE_PCV32HI_V32HI_USI)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512BW, CODE_FOR_expandv32hi_maskz, \"__builtin_ia32_expandloadhi512_maskz\", IX86_BUILTIN_PEXPANDWLOAD512Z, UNKNOWN, (int) V32HI_FTYPE_PCV32HI_V32HI_USI)\n \n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_expandv32qi_mask, \"__builtin_ia32_expandloadqi256_mask\", IX86_BUILTIN_PEXPANDBLOAD256, UNKNOWN, (int) V32QI_FTYPE_PCV32QI_V32QI_USI)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_expandv32qi_maskz, \"__builtin_ia32_expandloadqi256_maskz\", IX86_BUILTIN_PEXPANDBLOAD256Z, UNKNOWN, (int) V32QI_FTYPE_PCV32QI_V32QI_USI)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_expandv16hi_mask, \"__builtin_ia32_expandloadhi256_mask\", IX86_BUILTIN_PEXPANDWLOAD256, UNKNOWN, (int) V16HI_FTYPE_PCV16HI_V16HI_UHI)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_expandv16hi_maskz, \"__builtin_ia32_expandloadhi256_maskz\", IX86_BUILTIN_PEXPANDWLOAD256Z, UNKNOWN, (int) V16HI_FTYPE_PCV16HI_V16HI_UHI)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL | OPTION_MASK_ISA_AVX512BW, CODE_FOR_expandv32qi_mask, \"__builtin_ia32_expandloadqi256_mask\", IX86_BUILTIN_PEXPANDBLOAD256, UNKNOWN, (int) V32QI_FTYPE_PCV32QI_V32QI_USI)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL | OPTION_MASK_ISA_AVX512BW, CODE_FOR_expandv32qi_maskz, \"__builtin_ia32_expandloadqi256_maskz\", IX86_BUILTIN_PEXPANDBLOAD256Z, UNKNOWN, (int) V32QI_FTYPE_PCV32QI_V32QI_USI)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_expandv16hi_mask, \"__builtin_ia32_expandloadhi256_mask\", IX86_BUILTIN_PEXPANDWLOAD256, UNKNOWN, (int) V16HI_FTYPE_PCV16HI_V16HI_UHI)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_expandv16hi_maskz, \"__builtin_ia32_expandloadhi256_maskz\", IX86_BUILTIN_PEXPANDWLOAD256Z, UNKNOWN, (int) V16HI_FTYPE_PCV16HI_V16HI_UHI)\n \n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_expandv16qi_mask, \"__builtin_ia32_expandloadqi128_mask\", IX86_BUILTIN_PEXPANDBLOAD128, UNKNOWN, (int) V16QI_FTYPE_PCV16QI_V16QI_UHI)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_expandv16qi_maskz, \"__builtin_ia32_expandloadqi128_maskz\", IX86_BUILTIN_PEXPANDBLOAD128Z, UNKNOWN, (int) V16QI_FTYPE_PCV16QI_V16QI_UHI)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_expandv8hi_mask, \"__builtin_ia32_expandloadhi128_mask\", IX86_BUILTIN_PEXPANDWLOAD128, UNKNOWN, (int) V8HI_FTYPE_PCV8HI_V8HI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_expandv8hi_maskz, \"__builtin_ia32_expandloadhi128_maskz\", IX86_BUILTIN_PEXPANDWLOAD128Z, UNKNOWN, (int) V8HI_FTYPE_PCV8HI_V8HI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_expandv16qi_mask, \"__builtin_ia32_expandloadqi128_mask\", IX86_BUILTIN_PEXPANDBLOAD128, UNKNOWN, (int) V16QI_FTYPE_PCV16QI_V16QI_UHI)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_expandv16qi_maskz, \"__builtin_ia32_expandloadqi128_maskz\", IX86_BUILTIN_PEXPANDBLOAD128Z, UNKNOWN, (int) V16QI_FTYPE_PCV16QI_V16QI_UHI)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_expandv8hi_mask, \"__builtin_ia32_expandloadhi128_mask\", IX86_BUILTIN_PEXPANDWLOAD128, UNKNOWN, (int) V8HI_FTYPE_PCV8HI_V8HI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_expandv8hi_maskz, \"__builtin_ia32_expandloadhi128_maskz\", IX86_BUILTIN_PEXPANDWLOAD128Z, UNKNOWN, (int) V8HI_FTYPE_PCV8HI_V8HI_UQI)\n \n BDESC_END (SPECIAL_ARGS, ARGS)\n \n@@ -2418,116 +2418,116 @@ BDESC (OPTION_MASK_ISA_AVX512VBMI | OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_\n BDESC (OPTION_MASK_ISA_AVX512VBMI | OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_vpermi2varv16qi3_mask, \"__builtin_ia32_vpermi2varqi128_mask\", IX86_BUILTIN_VPERMI2VARQI128, UNKNOWN, (int) V16QI_FTYPE_V16QI_V16QI_V16QI_UHI)\n \n /* VBMI2 */\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_compressv64qi_mask, \"__builtin_ia32_compressqi512_mask\", IX86_BUILTIN_PCOMPRESSB512, UNKNOWN, (int) V64QI_FTYPE_V64QI_V64QI_UDI)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_compressv32hi_mask, \"__builtin_ia32_compresshi512_mask\", IX86_BUILTIN_PCOMPRESSW512, UNKNOWN, (int) V32HI_FTYPE_V32HI_V32HI_USI)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_compressv32qi_mask, \"__builtin_ia32_compressqi256_mask\", IX86_BUILTIN_PCOMPRESSB256, UNKNOWN, (int) V32QI_FTYPE_V32QI_V32QI_USI)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512BW, CODE_FOR_compressv64qi_mask, \"__builtin_ia32_compressqi512_mask\", IX86_BUILTIN_PCOMPRESSB512, UNKNOWN, (int) V64QI_FTYPE_V64QI_V64QI_UDI)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512BW, CODE_FOR_compressv32hi_mask, \"__builtin_ia32_compresshi512_mask\", IX86_BUILTIN_PCOMPRESSW512, UNKNOWN, (int) V32HI_FTYPE_V32HI_V32HI_USI)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL | OPTION_MASK_ISA_AVX512BW, CODE_FOR_compressv32qi_mask, \"__builtin_ia32_compressqi256_mask\", IX86_BUILTIN_PCOMPRESSB256, UNKNOWN, (int) V32QI_FTYPE_V32QI_V32QI_USI)\n BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_compressv16qi_mask, \"__builtin_ia32_compressqi128_mask\", IX86_BUILTIN_PCOMPRESSB128, UNKNOWN, (int) V16QI_FTYPE_V16QI_V16QI_UHI)\n BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_compressv16hi_mask, \"__builtin_ia32_compresshi256_mask\", IX86_BUILTIN_PCOMPRESSW256, UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI_UHI)\n BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_compressv8hi_mask, \"__builtin_ia32_compresshi128_mask\", IX86_BUILTIN_PCOMPRESSW128, UNKNOWN, (int) V8HI_FTYPE_V8HI_V8HI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_expandv64qi_mask, \"__builtin_ia32_expandqi512_mask\", IX86_BUILTIN_PEXPANDB512, UNKNOWN, (int) V64QI_FTYPE_V64QI_V64QI_UDI)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_expandv64qi_maskz, \"__builtin_ia32_expandqi512_maskz\", IX86_BUILTIN_PEXPANDB512Z, UNKNOWN, (int) V64QI_FTYPE_V64QI_V64QI_UDI)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_expandv32hi_mask, \"__builtin_ia32_expandhi512_mask\", IX86_BUILTIN_PEXPANDW512, UNKNOWN, (int) V32HI_FTYPE_V32HI_V32HI_USI)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_expandv32hi_maskz, \"__builtin_ia32_expandhi512_maskz\", IX86_BUILTIN_PEXPANDW512Z, UNKNOWN, (int) V32HI_FTYPE_V32HI_V32HI_USI)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_expandv32qi_mask, \"__builtin_ia32_expandqi256_mask\", IX86_BUILTIN_PEXPANDB256, UNKNOWN, (int) V32QI_FTYPE_V32QI_V32QI_USI)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_expandv32qi_maskz, \"__builtin_ia32_expandqi256_maskz\", IX86_BUILTIN_PEXPANDB256Z, UNKNOWN, (int) V32QI_FTYPE_V32QI_V32QI_USI)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512BW, CODE_FOR_expandv64qi_mask, \"__builtin_ia32_expandqi512_mask\", IX86_BUILTIN_PEXPANDB512, UNKNOWN, (int) V64QI_FTYPE_V64QI_V64QI_UDI)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512BW, CODE_FOR_expandv64qi_maskz, \"__builtin_ia32_expandqi512_maskz\", IX86_BUILTIN_PEXPANDB512Z, UNKNOWN, (int) V64QI_FTYPE_V64QI_V64QI_UDI)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512BW, CODE_FOR_expandv32hi_mask, \"__builtin_ia32_expandhi512_mask\", IX86_BUILTIN_PEXPANDW512, UNKNOWN, (int) V32HI_FTYPE_V32HI_V32HI_USI)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512BW, CODE_FOR_expandv32hi_maskz, \"__builtin_ia32_expandhi512_maskz\", IX86_BUILTIN_PEXPANDW512Z, UNKNOWN, (int) V32HI_FTYPE_V32HI_V32HI_USI)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL | OPTION_MASK_ISA_AVX512BW, CODE_FOR_expandv32qi_mask, \"__builtin_ia32_expandqi256_mask\", IX86_BUILTIN_PEXPANDB256, UNKNOWN, (int) V32QI_FTYPE_V32QI_V32QI_USI)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL | OPTION_MASK_ISA_AVX512BW, CODE_FOR_expandv32qi_maskz, \"__builtin_ia32_expandqi256_maskz\", IX86_BUILTIN_PEXPANDB256Z, UNKNOWN, (int) V32QI_FTYPE_V32QI_V32QI_USI)\n BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_expandv16qi_mask, \"__builtin_ia32_expandqi128_mask\", IX86_BUILTIN_PEXPANDB128, UNKNOWN, (int) V16QI_FTYPE_V16QI_V16QI_UHI)\n BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_expandv16qi_maskz, \"__builtin_ia32_expandqi128_maskz\", IX86_BUILTIN_PEXPANDB128Z, UNKNOWN, (int) V16QI_FTYPE_V16QI_V16QI_UHI)\n BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_expandv16hi_mask, \"__builtin_ia32_expandhi256_mask\", IX86_BUILTIN_PEXPANDW256, UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI_UHI)\n BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_expandv16hi_maskz, \"__builtin_ia32_expandhi256_maskz\", IX86_BUILTIN_PEXPANDW256Z, UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI_UHI)\n BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_expandv8hi_mask, \"__builtin_ia32_expandhi128_mask\", IX86_BUILTIN_PEXPANDW128, UNKNOWN, (int) V8HI_FTYPE_V8HI_V8HI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_expandv8hi_maskz, \"__builtin_ia32_expandhi128_maskz\", IX86_BUILTIN_PEXPANDW128Z, UNKNOWN, (int) V8HI_FTYPE_V8HI_V8HI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrd_v32hi, \"__builtin_ia32_vpshrd_v32hi\", IX86_BUILTIN_VPSHRDV32HI, UNKNOWN, (int) V32HI_FTYPE_V32HI_V32HI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrd_v32hi_mask, \"__builtin_ia32_vpshrd_v32hi_mask\", IX86_BUILTIN_VPSHRDV32HI_MASK, UNKNOWN, (int) V32HI_FTYPE_V32HI_V32HI_INT_V32HI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrd_v16hi, \"__builtin_ia32_vpshrd_v16hi\", IX86_BUILTIN_VPSHRDV16HI, UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrd_v16hi_mask, \"__builtin_ia32_vpshrd_v16hi_mask\", IX86_BUILTIN_VPSHRDV16HI_MASK, UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI_INT_V16HI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrd_v8hi, \"__builtin_ia32_vpshrd_v8hi\", IX86_BUILTIN_VPSHRDV8HI, UNKNOWN, (int) V8HI_FTYPE_V8HI_V8HI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrd_v8hi_mask, \"__builtin_ia32_vpshrd_v8hi_mask\", IX86_BUILTIN_VPSHRDV8HI_MASK, UNKNOWN, (int) V8HI_FTYPE_V8HI_V8HI_INT_V8HI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512BW, CODE_FOR_vpshrd_v32hi_mask, \"__builtin_ia32_vpshrd_v32hi_mask\", IX86_BUILTIN_VPSHRDV32HI_MASK, UNKNOWN, (int) V32HI_FTYPE_V32HI_V32HI_INT_V32HI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpshrd_v16hi, \"__builtin_ia32_vpshrd_v16hi\", IX86_BUILTIN_VPSHRDV16HI, UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpshrd_v16hi_mask, \"__builtin_ia32_vpshrd_v16hi_mask\", IX86_BUILTIN_VPSHRDV16HI_MASK, UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI_INT_V16HI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpshrd_v8hi, \"__builtin_ia32_vpshrd_v8hi\", IX86_BUILTIN_VPSHRDV8HI, UNKNOWN, (int) V8HI_FTYPE_V8HI_V8HI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpshrd_v8hi_mask, \"__builtin_ia32_vpshrd_v8hi_mask\", IX86_BUILTIN_VPSHRDV8HI_MASK, UNKNOWN, (int) V8HI_FTYPE_V8HI_V8HI_INT_V8HI_INT)\n BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrd_v16si, \"__builtin_ia32_vpshrd_v16si\", IX86_BUILTIN_VPSHRDV16SI, UNKNOWN, (int) V16SI_FTYPE_V16SI_V16SI_INT)\n BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrd_v16si_mask, \"__builtin_ia32_vpshrd_v16si_mask\", IX86_BUILTIN_VPSHRDV16SI_MASK, UNKNOWN, (int) V16SI_FTYPE_V16SI_V16SI_INT_V16SI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrd_v8si, \"__builtin_ia32_vpshrd_v8si\", IX86_BUILTIN_VPSHRDV8SI, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrd_v8si_mask, \"__builtin_ia32_vpshrd_v8si_mask\", IX86_BUILTIN_VPSHRDV8SI_MASK, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_INT_V8SI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrd_v4si, \"__builtin_ia32_vpshrd_v4si\", IX86_BUILTIN_VPSHRDV4SI, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrd_v4si_mask, \"__builtin_ia32_vpshrd_v4si_mask\", IX86_BUILTIN_VPSHRDV4SI_MASK, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_INT_V4SI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpshrd_v8si, \"__builtin_ia32_vpshrd_v8si\", IX86_BUILTIN_VPSHRDV8SI, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpshrd_v8si_mask, \"__builtin_ia32_vpshrd_v8si_mask\", IX86_BUILTIN_VPSHRDV8SI_MASK, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_INT_V8SI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpshrd_v4si, \"__builtin_ia32_vpshrd_v4si\", IX86_BUILTIN_VPSHRDV4SI, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpshrd_v4si_mask, \"__builtin_ia32_vpshrd_v4si_mask\", IX86_BUILTIN_VPSHRDV4SI_MASK, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_INT_V4SI_INT)\n BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrd_v8di, \"__builtin_ia32_vpshrd_v8di\", IX86_BUILTIN_VPSHRDV8DI, UNKNOWN, (int) V8DI_FTYPE_V8DI_V8DI_INT)\n BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrd_v8di_mask, \"__builtin_ia32_vpshrd_v8di_mask\", IX86_BUILTIN_VPSHRDV8DI_MASK, UNKNOWN, (int) V8DI_FTYPE_V8DI_V8DI_INT_V8DI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrd_v4di, \"__builtin_ia32_vpshrd_v4di\", IX86_BUILTIN_VPSHRDV4DI, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrd_v4di_mask, \"__builtin_ia32_vpshrd_v4di_mask\", IX86_BUILTIN_VPSHRDV4DI_MASK, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI_INT_V4DI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrd_v2di, \"__builtin_ia32_vpshrd_v2di\", IX86_BUILTIN_VPSHRDV2DI, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrd_v2di_mask, \"__builtin_ia32_vpshrd_v2di_mask\", IX86_BUILTIN_VPSHRDV2DI_MASK, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_INT_V2DI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpshrd_v4di, \"__builtin_ia32_vpshrd_v4di\", IX86_BUILTIN_VPSHRDV4DI, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpshrd_v4di_mask, \"__builtin_ia32_vpshrd_v4di_mask\", IX86_BUILTIN_VPSHRDV4DI_MASK, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI_INT_V4DI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpshrd_v2di, \"__builtin_ia32_vpshrd_v2di\", IX86_BUILTIN_VPSHRDV2DI, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpshrd_v2di_mask, \"__builtin_ia32_vpshrd_v2di_mask\", IX86_BUILTIN_VPSHRDV2DI_MASK, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_INT_V2DI_INT)\n BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshld_v32hi, \"__builtin_ia32_vpshld_v32hi\", IX86_BUILTIN_VPSHLDV32HI, UNKNOWN, (int) V32HI_FTYPE_V32HI_V32HI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshld_v32hi_mask, \"__builtin_ia32_vpshld_v32hi_mask\", IX86_BUILTIN_VPSHLDV32HI_MASK, UNKNOWN, (int) V32HI_FTYPE_V32HI_V32HI_INT_V32HI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshld_v16hi, \"__builtin_ia32_vpshld_v16hi\", IX86_BUILTIN_VPSHLDV16HI, UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshld_v16hi_mask, \"__builtin_ia32_vpshld_v16hi_mask\", IX86_BUILTIN_VPSHLDV16HI_MASK, UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI_INT_V16HI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshld_v8hi, \"__builtin_ia32_vpshld_v8hi\", IX86_BUILTIN_VPSHLDV8HI, UNKNOWN, (int) V8HI_FTYPE_V8HI_V8HI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshld_v8hi_mask, \"__builtin_ia32_vpshld_v8hi_mask\", IX86_BUILTIN_VPSHLDV8HI_MASK, UNKNOWN, (int) V8HI_FTYPE_V8HI_V8HI_INT_V8HI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512BW, CODE_FOR_vpshld_v32hi_mask, \"__builtin_ia32_vpshld_v32hi_mask\", IX86_BUILTIN_VPSHLDV32HI_MASK, UNKNOWN, (int) V32HI_FTYPE_V32HI_V32HI_INT_V32HI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpshld_v16hi, \"__builtin_ia32_vpshld_v16hi\", IX86_BUILTIN_VPSHLDV16HI, UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpshld_v16hi_mask, \"__builtin_ia32_vpshld_v16hi_mask\", IX86_BUILTIN_VPSHLDV16HI_MASK, UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI_INT_V16HI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpshld_v8hi, \"__builtin_ia32_vpshld_v8hi\", IX86_BUILTIN_VPSHLDV8HI, UNKNOWN, (int) V8HI_FTYPE_V8HI_V8HI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpshld_v8hi_mask, \"__builtin_ia32_vpshld_v8hi_mask\", IX86_BUILTIN_VPSHLDV8HI_MASK, UNKNOWN, (int) V8HI_FTYPE_V8HI_V8HI_INT_V8HI_INT)\n BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshld_v16si, \"__builtin_ia32_vpshld_v16si\", IX86_BUILTIN_VPSHLDV16SI, UNKNOWN, (int) V16SI_FTYPE_V16SI_V16SI_INT)\n BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshld_v16si_mask, \"__builtin_ia32_vpshld_v16si_mask\", IX86_BUILTIN_VPSHLDV16SI_MASK, UNKNOWN, (int) V16SI_FTYPE_V16SI_V16SI_INT_V16SI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshld_v8si, \"__builtin_ia32_vpshld_v8si\", IX86_BUILTIN_VPSHLDV8SI, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshld_v8si_mask, \"__builtin_ia32_vpshld_v8si_mask\", IX86_BUILTIN_VPSHLDV8SI_MASK, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_INT_V8SI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshld_v4si, \"__builtin_ia32_vpshld_v4si\", IX86_BUILTIN_VPSHLDV4SI, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshld_v4si_mask, \"__builtin_ia32_vpshld_v4si_mask\", IX86_BUILTIN_VPSHLDV4SI_MASK, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_INT_V4SI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpshld_v8si, \"__builtin_ia32_vpshld_v8si\", IX86_BUILTIN_VPSHLDV8SI, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpshld_v8si_mask, \"__builtin_ia32_vpshld_v8si_mask\", IX86_BUILTIN_VPSHLDV8SI_MASK, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_INT_V8SI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpshld_v4si, \"__builtin_ia32_vpshld_v4si\", IX86_BUILTIN_VPSHLDV4SI, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpshld_v4si_mask, \"__builtin_ia32_vpshld_v4si_mask\", IX86_BUILTIN_VPSHLDV4SI_MASK, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_INT_V4SI_INT)\n BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshld_v8di, \"__builtin_ia32_vpshld_v8di\", IX86_BUILTIN_VPSHLDV8DI, UNKNOWN, (int) V8DI_FTYPE_V8DI_V8DI_INT)\n BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshld_v8di_mask, \"__builtin_ia32_vpshld_v8di_mask\", IX86_BUILTIN_VPSHLDV8DI_MASK, UNKNOWN, (int) V8DI_FTYPE_V8DI_V8DI_INT_V8DI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshld_v4di, \"__builtin_ia32_vpshld_v4di\", IX86_BUILTIN_VPSHLDV4DI, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshld_v4di_mask, \"__builtin_ia32_vpshld_v4di_mask\", IX86_BUILTIN_VPSHLDV4DI_MASK, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI_INT_V4DI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshld_v2di, \"__builtin_ia32_vpshld_v2di\", IX86_BUILTIN_VPSHLDV2DI, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshld_v2di_mask, \"__builtin_ia32_vpshld_v2di_mask\", IX86_BUILTIN_VPSHLDV2DI_MASK, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_INT_V2DI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpshld_v4di, \"__builtin_ia32_vpshld_v4di\", IX86_BUILTIN_VPSHLDV4DI, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpshld_v4di_mask, \"__builtin_ia32_vpshld_v4di_mask\", IX86_BUILTIN_VPSHLDV4DI_MASK, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI_INT_V4DI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpshld_v2di, \"__builtin_ia32_vpshld_v2di\", IX86_BUILTIN_VPSHLDV2DI, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpshld_v2di_mask, \"__builtin_ia32_vpshld_v2di_mask\", IX86_BUILTIN_VPSHLDV2DI_MASK, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_INT_V2DI_INT)\n \n BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrdv_v32hi, \"__builtin_ia32_vpshrdv_v32hi\", IX86_BUILTIN_VPSHRDVV32HI, UNKNOWN, (int) V32HI_FTYPE_V32HI_V32HI_V32HI)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrdv_v32hi_mask, \"__builtin_ia32_vpshrdv_v32hi_mask\", IX86_BUILTIN_VPSHRDVV32HI_MASK, UNKNOWN, (int) V32HI_FTYPE_V32HI_V32HI_V32HI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrdv_v32hi_maskz, \"__builtin_ia32_vpshrdv_v32hi_maskz\", IX86_BUILTIN_VPSHRDVV32HI_MASKZ, UNKNOWN, (int) V32HI_FTYPE_V32HI_V32HI_V32HI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrdv_v16hi, \"__builtin_ia32_vpshrdv_v16hi\", IX86_BUILTIN_VPSHRDVV16HI, UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI_V16HI)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrdv_v16hi_mask, \"__builtin_ia32_vpshrdv_v16hi_mask\", IX86_BUILTIN_VPSHRDVV16HI_MASK, UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI_V16HI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrdv_v16hi_maskz, \"__builtin_ia32_vpshrdv_v16hi_maskz\", IX86_BUILTIN_VPSHRDVV16HI_MASKZ, UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI_V16HI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrdv_v8hi, \"__builtin_ia32_vpshrdv_v8hi\", IX86_BUILTIN_VPSHRDVV8HI, UNKNOWN, (int) V8HI_FTYPE_V8HI_V8HI_V8HI)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrdv_v8hi_mask, \"__builtin_ia32_vpshrdv_v8hi_mask\", IX86_BUILTIN_VPSHRDVV8HI_MASK, UNKNOWN, (int) V8HI_FTYPE_V8HI_V8HI_V8HI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrdv_v8hi_maskz, \"__builtin_ia32_vpshrdv_v8hi_maskz\", IX86_BUILTIN_VPSHRDVV8HI_MASKZ, UNKNOWN, (int) V8HI_FTYPE_V8HI_V8HI_V8HI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512BW, CODE_FOR_vpshrdv_v32hi_mask, \"__builtin_ia32_vpshrdv_v32hi_mask\", IX86_BUILTIN_VPSHRDVV32HI_MASK, UNKNOWN, (int) V32HI_FTYPE_V32HI_V32HI_V32HI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512BW, CODE_FOR_vpshrdv_v32hi_maskz, \"__builtin_ia32_vpshrdv_v32hi_maskz\", IX86_BUILTIN_VPSHRDVV32HI_MASKZ, UNKNOWN, (int) V32HI_FTYPE_V32HI_V32HI_V32HI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpshrdv_v16hi, \"__builtin_ia32_vpshrdv_v16hi\", IX86_BUILTIN_VPSHRDVV16HI, UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI_V16HI)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpshrdv_v16hi_mask, \"__builtin_ia32_vpshrdv_v16hi_mask\", IX86_BUILTIN_VPSHRDVV16HI_MASK, UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI_V16HI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpshrdv_v16hi_maskz, \"__builtin_ia32_vpshrdv_v16hi_maskz\", IX86_BUILTIN_VPSHRDVV16HI_MASKZ, UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI_V16HI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpshrdv_v8hi, \"__builtin_ia32_vpshrdv_v8hi\", IX86_BUILTIN_VPSHRDVV8HI, UNKNOWN, (int) V8HI_FTYPE_V8HI_V8HI_V8HI)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpshrdv_v8hi_mask, \"__builtin_ia32_vpshrdv_v8hi_mask\", IX86_BUILTIN_VPSHRDVV8HI_MASK, UNKNOWN, (int) V8HI_FTYPE_V8HI_V8HI_V8HI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpshrdv_v8hi_maskz, \"__builtin_ia32_vpshrdv_v8hi_maskz\", IX86_BUILTIN_VPSHRDVV8HI_MASKZ, UNKNOWN, (int) V8HI_FTYPE_V8HI_V8HI_V8HI_INT)\n BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrdv_v16si, \"__builtin_ia32_vpshrdv_v16si\", IX86_BUILTIN_VPSHRDVV16SI, UNKNOWN, (int) V16SI_FTYPE_V16SI_V16SI_V16SI)\n BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrdv_v16si_mask, \"__builtin_ia32_vpshrdv_v16si_mask\", IX86_BUILTIN_VPSHRDVV16SI_MASK, UNKNOWN, (int) V16SI_FTYPE_V16SI_V16SI_V16SI_INT)\n BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrdv_v16si_maskz, \"__builtin_ia32_vpshrdv_v16si_maskz\", IX86_BUILTIN_VPSHRDVV16SI_MASKZ, UNKNOWN, (int) V16SI_FTYPE_V16SI_V16SI_V16SI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrdv_v8si, \"__builtin_ia32_vpshrdv_v8si\", IX86_BUILTIN_VPSHRDVV8SI, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_V8SI)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrdv_v8si_mask, \"__builtin_ia32_vpshrdv_v8si_mask\", IX86_BUILTIN_VPSHRDVV8SI_MASK, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_V8SI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrdv_v8si_maskz, \"__builtin_ia32_vpshrdv_v8si_maskz\", IX86_BUILTIN_VPSHRDVV8SI_MASKZ, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_V8SI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrdv_v4si, \"__builtin_ia32_vpshrdv_v4si\", IX86_BUILTIN_VPSHRDVV4SI, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_V4SI)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrdv_v4si_mask, \"__builtin_ia32_vpshrdv_v4si_mask\", IX86_BUILTIN_VPSHRDVV4SI_MASK, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_V4SI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrdv_v4si_maskz, \"__builtin_ia32_vpshrdv_v4si_maskz\", IX86_BUILTIN_VPSHRDVV4SI_MASKZ, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_V4SI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpshrdv_v8si, \"__builtin_ia32_vpshrdv_v8si\", IX86_BUILTIN_VPSHRDVV8SI, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_V8SI)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpshrdv_v8si_mask, \"__builtin_ia32_vpshrdv_v8si_mask\", IX86_BUILTIN_VPSHRDVV8SI_MASK, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_V8SI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpshrdv_v8si_maskz, \"__builtin_ia32_vpshrdv_v8si_maskz\", IX86_BUILTIN_VPSHRDVV8SI_MASKZ, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_V8SI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpshrdv_v4si, \"__builtin_ia32_vpshrdv_v4si\", IX86_BUILTIN_VPSHRDVV4SI, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_V4SI)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpshrdv_v4si_mask, \"__builtin_ia32_vpshrdv_v4si_mask\", IX86_BUILTIN_VPSHRDVV4SI_MASK, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_V4SI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpshrdv_v4si_maskz, \"__builtin_ia32_vpshrdv_v4si_maskz\", IX86_BUILTIN_VPSHRDVV4SI_MASKZ, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_V4SI_INT)\n BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrdv_v8di, \"__builtin_ia32_vpshrdv_v8di\", IX86_BUILTIN_VPSHRDVV8DI, UNKNOWN, (int) V8DI_FTYPE_V8DI_V8DI_V8DI)\n BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrdv_v8di_mask, \"__builtin_ia32_vpshrdv_v8di_mask\", IX86_BUILTIN_VPSHRDVV8DI_MASK, UNKNOWN, (int) V8DI_FTYPE_V8DI_V8DI_V8DI_INT)\n BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrdv_v8di_maskz, \"__builtin_ia32_vpshrdv_v8di_maskz\", IX86_BUILTIN_VPSHRDVV8DI_MASKZ, UNKNOWN, (int) V8DI_FTYPE_V8DI_V8DI_V8DI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrdv_v4di, \"__builtin_ia32_vpshrdv_v4di\", IX86_BUILTIN_VPSHRDVV4DI, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI_V4DI)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrdv_v4di_mask, \"__builtin_ia32_vpshrdv_v4di_mask\", IX86_BUILTIN_VPSHRDVV4DI_MASK, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI_V4DI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrdv_v4di_maskz, \"__builtin_ia32_vpshrdv_v4di_maskz\", IX86_BUILTIN_VPSHRDVV4DI_MASKZ, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI_V4DI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrdv_v2di, \"__builtin_ia32_vpshrdv_v2di\", IX86_BUILTIN_VPSHRDVV2DI, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_V2DI)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrdv_v2di_mask, \"__builtin_ia32_vpshrdv_v2di_mask\", IX86_BUILTIN_VPSHRDVV2DI_MASK, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_V2DI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrdv_v2di_maskz, \"__builtin_ia32_vpshrdv_v2di_maskz\", IX86_BUILTIN_VPSHRDVV2DI_MASKZ, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_V2DI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpshrdv_v4di, \"__builtin_ia32_vpshrdv_v4di\", IX86_BUILTIN_VPSHRDVV4DI, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI_V4DI)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpshrdv_v4di_mask, \"__builtin_ia32_vpshrdv_v4di_mask\", IX86_BUILTIN_VPSHRDVV4DI_MASK, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI_V4DI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpshrdv_v4di_maskz, \"__builtin_ia32_vpshrdv_v4di_maskz\", IX86_BUILTIN_VPSHRDVV4DI_MASKZ, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI_V4DI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpshrdv_v2di, \"__builtin_ia32_vpshrdv_v2di\", IX86_BUILTIN_VPSHRDVV2DI, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_V2DI)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpshrdv_v2di_mask, \"__builtin_ia32_vpshrdv_v2di_mask\", IX86_BUILTIN_VPSHRDVV2DI_MASK, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_V2DI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpshrdv_v2di_maskz, \"__builtin_ia32_vpshrdv_v2di_maskz\", IX86_BUILTIN_VPSHRDVV2DI_MASKZ, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_V2DI_INT)\n \n BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshldv_v32hi, \"__builtin_ia32_vpshldv_v32hi\", IX86_BUILTIN_VPSHLDVV32HI, UNKNOWN, (int) V32HI_FTYPE_V32HI_V32HI_V32HI)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshldv_v32hi_mask, \"__builtin_ia32_vpshldv_v32hi_mask\", IX86_BUILTIN_VPSHLDVV32HI_MASK, UNKNOWN, (int) V32HI_FTYPE_V32HI_V32HI_V32HI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshldv_v32hi_maskz, \"__builtin_ia32_vpshldv_v32hi_maskz\", IX86_BUILTIN_VPSHLDVV32HI_MASKZ, UNKNOWN, (int) V32HI_FTYPE_V32HI_V32HI_V32HI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshldv_v16hi, \"__builtin_ia32_vpshldv_v16hi\", IX86_BUILTIN_VPSHLDVV16HI, UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI_V16HI)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshldv_v16hi_mask, \"__builtin_ia32_vpshldv_v16hi_mask\", IX86_BUILTIN_VPSHLDVV16HI_MASK, UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI_V16HI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshldv_v16hi_maskz, \"__builtin_ia32_vpshldv_v16hi_maskz\", IX86_BUILTIN_VPSHLDVV16HI_MASKZ, UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI_V16HI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshldv_v8hi, \"__builtin_ia32_vpshldv_v8hi\", IX86_BUILTIN_VPSHLDVV8HI, UNKNOWN, (int) V8HI_FTYPE_V8HI_V8HI_V8HI)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshldv_v8hi_mask, \"__builtin_ia32_vpshldv_v8hi_mask\", IX86_BUILTIN_VPSHLDVV8HI_MASK, UNKNOWN, (int) V8HI_FTYPE_V8HI_V8HI_V8HI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshldv_v8hi_maskz, \"__builtin_ia32_vpshldv_v8hi_maskz\", IX86_BUILTIN_VPSHLDVV8HI_MASKZ, UNKNOWN, (int) V8HI_FTYPE_V8HI_V8HI_V8HI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512BW, CODE_FOR_vpshldv_v32hi_mask, \"__builtin_ia32_vpshldv_v32hi_mask\", IX86_BUILTIN_VPSHLDVV32HI_MASK, UNKNOWN, (int) V32HI_FTYPE_V32HI_V32HI_V32HI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512BW, CODE_FOR_vpshldv_v32hi_maskz, \"__builtin_ia32_vpshldv_v32hi_maskz\", IX86_BUILTIN_VPSHLDVV32HI_MASKZ, UNKNOWN, (int) V32HI_FTYPE_V32HI_V32HI_V32HI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpshldv_v16hi, \"__builtin_ia32_vpshldv_v16hi\", IX86_BUILTIN_VPSHLDVV16HI, UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI_V16HI)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpshldv_v16hi_mask, \"__builtin_ia32_vpshldv_v16hi_mask\", IX86_BUILTIN_VPSHLDVV16HI_MASK, UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI_V16HI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpshldv_v16hi_maskz, \"__builtin_ia32_vpshldv_v16hi_maskz\", IX86_BUILTIN_VPSHLDVV16HI_MASKZ, UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI_V16HI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpshldv_v8hi, \"__builtin_ia32_vpshldv_v8hi\", IX86_BUILTIN_VPSHLDVV8HI, UNKNOWN, (int) V8HI_FTYPE_V8HI_V8HI_V8HI)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpshldv_v8hi_mask, \"__builtin_ia32_vpshldv_v8hi_mask\", IX86_BUILTIN_VPSHLDVV8HI_MASK, UNKNOWN, (int) V8HI_FTYPE_V8HI_V8HI_V8HI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpshldv_v8hi_maskz, \"__builtin_ia32_vpshldv_v8hi_maskz\", IX86_BUILTIN_VPSHLDVV8HI_MASKZ, UNKNOWN, (int) V8HI_FTYPE_V8HI_V8HI_V8HI_INT)\n BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshldv_v16si, \"__builtin_ia32_vpshldv_v16si\", IX86_BUILTIN_VPSHLDVV16SI, UNKNOWN, (int) V16SI_FTYPE_V16SI_V16SI_V16SI)\n BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshldv_v16si_mask, \"__builtin_ia32_vpshldv_v16si_mask\", IX86_BUILTIN_VPSHLDVV16SI_MASK, UNKNOWN, (int) V16SI_FTYPE_V16SI_V16SI_V16SI_INT)\n BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshldv_v16si_maskz, \"__builtin_ia32_vpshldv_v16si_maskz\", IX86_BUILTIN_VPSHLDVV16SI_MASKZ, UNKNOWN, (int) V16SI_FTYPE_V16SI_V16SI_V16SI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshldv_v8si, \"__builtin_ia32_vpshldv_v8si\", IX86_BUILTIN_VPSHLDVV8SI, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_V8SI)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshldv_v8si_mask, \"__builtin_ia32_vpshldv_v8si_mask\", IX86_BUILTIN_VPSHLDVV8SI_MASK, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_V8SI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshldv_v8si_maskz, \"__builtin_ia32_vpshldv_v8si_maskz\", IX86_BUILTIN_VPSHLDVV8SI_MASKZ, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_V8SI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshldv_v4si, \"__builtin_ia32_vpshldv_v4si\", IX86_BUILTIN_VPSHLDVV4SI, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_V4SI)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshldv_v4si_mask, \"__builtin_ia32_vpshldv_v4si_mask\", IX86_BUILTIN_VPSHLDVV4SI_MASK, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_V4SI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshldv_v4si_maskz, \"__builtin_ia32_vpshldv_v4si_maskz\", IX86_BUILTIN_VPSHLDVV4SI_MASKZ, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_V4SI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpshldv_v8si, \"__builtin_ia32_vpshldv_v8si\", IX86_BUILTIN_VPSHLDVV8SI, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_V8SI)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpshldv_v8si_mask, \"__builtin_ia32_vpshldv_v8si_mask\", IX86_BUILTIN_VPSHLDVV8SI_MASK, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_V8SI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpshldv_v8si_maskz, \"__builtin_ia32_vpshldv_v8si_maskz\", IX86_BUILTIN_VPSHLDVV8SI_MASKZ, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_V8SI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpshldv_v4si, \"__builtin_ia32_vpshldv_v4si\", IX86_BUILTIN_VPSHLDVV4SI, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_V4SI)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpshldv_v4si_mask, \"__builtin_ia32_vpshldv_v4si_mask\", IX86_BUILTIN_VPSHLDVV4SI_MASK, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_V4SI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpshldv_v4si_maskz, \"__builtin_ia32_vpshldv_v4si_maskz\", IX86_BUILTIN_VPSHLDVV4SI_MASKZ, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_V4SI_INT)\n BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshldv_v8di, \"__builtin_ia32_vpshldv_v8di\", IX86_BUILTIN_VPSHLDVV8DI, UNKNOWN, (int) V8DI_FTYPE_V8DI_V8DI_V8DI)\n BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshldv_v8di_mask, \"__builtin_ia32_vpshldv_v8di_mask\", IX86_BUILTIN_VPSHLDVV8DI_MASK, UNKNOWN, (int) V8DI_FTYPE_V8DI_V8DI_V8DI_INT)\n BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshldv_v8di_maskz, \"__builtin_ia32_vpshldv_v8di_maskz\", IX86_BUILTIN_VPSHLDVV8DI_MASKZ, UNKNOWN, (int) V8DI_FTYPE_V8DI_V8DI_V8DI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshldv_v4di, \"__builtin_ia32_vpshldv_v4di\", IX86_BUILTIN_VPSHLDVV4DI, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI_V4DI)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshldv_v4di_mask, \"__builtin_ia32_vpshldv_v4di_mask\", IX86_BUILTIN_VPSHLDVV4DI_MASK, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI_V4DI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshldv_v4di_maskz, \"__builtin_ia32_vpshldv_v4di_maskz\", IX86_BUILTIN_VPSHLDVV4DI_MASKZ, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI_V4DI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshldv_v2di, \"__builtin_ia32_vpshldv_v2di\", IX86_BUILTIN_VPSHLDVV2DI, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_V2DI)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshldv_v2di_mask, \"__builtin_ia32_vpshldv_v2di_mask\", IX86_BUILTIN_VPSHLDVV2DI_MASK, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_V2DI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshldv_v2di_maskz, \"__builtin_ia32_vpshldv_v2di_maskz\", IX86_BUILTIN_VPSHLDVV2DI_MASKZ, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_V2DI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpshldv_v4di, \"__builtin_ia32_vpshldv_v4di\", IX86_BUILTIN_VPSHLDVV4DI, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI_V4DI)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpshldv_v4di_mask, \"__builtin_ia32_vpshldv_v4di_mask\", IX86_BUILTIN_VPSHLDVV4DI_MASK, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI_V4DI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpshldv_v4di_maskz, \"__builtin_ia32_vpshldv_v4di_maskz\", IX86_BUILTIN_VPSHLDVV4DI_MASKZ, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI_V4DI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpshldv_v2di, \"__builtin_ia32_vpshldv_v2di\", IX86_BUILTIN_VPSHLDVV2DI, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_V2DI)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpshldv_v2di_mask, \"__builtin_ia32_vpshldv_v2di_mask\", IX86_BUILTIN_VPSHLDVV2DI_MASK, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_V2DI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpshldv_v2di_maskz, \"__builtin_ia32_vpshldv_v2di_maskz\", IX86_BUILTIN_VPSHLDVV2DI_MASKZ, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_V2DI_INT)\n \n /* GFNI */\n BDESC (OPTION_MASK_ISA_GFNI, CODE_FOR_vgf2p8affineinvqb_v64qi, \"__builtin_ia32_vgf2p8affineinvqb_v64qi\", IX86_BUILTIN_VGF2P8AFFINEINVQB512, UNKNOWN, (int) V64QI_FTYPE_V64QI_V64QI_INT)\n@@ -2596,6 +2596,40 @@ BDESC (OPTION_MASK_ISA_VPCLMULQDQ | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpclmulqd\n BDESC (OPTION_MASK_ISA_VPCLMULQDQ | OPTION_MASK_ISA_AVX, CODE_FOR_vpclmulqdq_v4di, \"__builtin_ia32_vpclmulqdq_v4di\", IX86_BUILTIN_VPCLMULQDQ4, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI_INT)\n BDESC (OPTION_MASK_ISA_VPCLMULQDQ | OPTION_MASK_ISA_AVX512F, CODE_FOR_vpclmulqdq_v8di, \"__builtin_ia32_vpclmulqdq_v8di\", IX86_BUILTIN_VPCLMULQDQ8, UNKNOWN, (int) V8DI_FTYPE_V8DI_V8DI_INT)\n \n+/* VPOPCNTDQ */\n+BDESC (OPTION_MASK_ISA_AVX512VPOPCNTDQ, CODE_FOR_vpopcountv16si, \"__builtin_ia32_vpopcountd_v16si\", IX86_BUILTIN_VPOPCOUNTDV16SI, UNKNOWN, (int) V16SI_FTYPE_V16SI)\n+BDESC (OPTION_MASK_ISA_AVX512VPOPCNTDQ, CODE_FOR_vpopcountv16si_mask, \"__builtin_ia32_vpopcountd_v16si_mask\", IX86_BUILTIN_VPOPCOUNTDV16SI_MASK, UNKNOWN, (int) V16SI_FTYPE_V16SI_V16SI_UHI)\n+BDESC (OPTION_MASK_ISA_AVX512VPOPCNTDQ, CODE_FOR_vpopcountv8di, \"__builtin_ia32_vpopcountq_v8di\", IX86_BUILTIN_VPOPCOUNTQV8DI, UNKNOWN, (int) V8DI_FTYPE_V8DI)\n+BDESC (OPTION_MASK_ISA_AVX512VPOPCNTDQ, CODE_FOR_vpopcountv8di_mask, \"__builtin_ia32_vpopcountq_v8di_mask\", IX86_BUILTIN_VPOPCOUNTQV8DI_MASK, UNKNOWN, (int) V8DI_FTYPE_V8DI_V8DI_UQI)\n+\n+BDESC (OPTION_MASK_ISA_AVX512VPOPCNTDQ | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpopcountv4di, \"__builtin_ia32_vpopcountq_v4di\", IX86_BUILTIN_VPOPCOUNTQV4DI, UNKNOWN, (int) V4DI_FTYPE_V4DI)\n+BDESC (OPTION_MASK_ISA_AVX512VPOPCNTDQ | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpopcountv4di_mask, \"__builtin_ia32_vpopcountq_v4di_mask\", IX86_BUILTIN_VPOPCOUNTQV4DI_MASK, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VPOPCNTDQ | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpopcountv2di, \"__builtin_ia32_vpopcountq_v2di\", IX86_BUILTIN_VPOPCOUNTQV2DI, UNKNOWN, (int) V2DI_FTYPE_V2DI)\n+BDESC (OPTION_MASK_ISA_AVX512VPOPCNTDQ | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpopcountv2di_mask, \"__builtin_ia32_vpopcountq_v2di_mask\", IX86_BUILTIN_VPOPCOUNTQV2DI_MASK, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VPOPCNTDQ | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpopcountv4si, \"__builtin_ia32_vpopcountd_v4si\", IX86_BUILTIN_VPOPCOUNTDV4SI, UNKNOWN, (int) V4SI_FTYPE_V4SI)\n+BDESC (OPTION_MASK_ISA_AVX512VPOPCNTDQ | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpopcountv4si_mask, \"__builtin_ia32_vpopcountd_v4si_mask\", IX86_BUILTIN_VPOPCOUNTDV4SI_MASK, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_UHI)\n+BDESC (OPTION_MASK_ISA_AVX512VPOPCNTDQ | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpopcountv8si, \"__builtin_ia32_vpopcountd_v8si\", IX86_BUILTIN_VPOPCOUNTDV8SI, UNKNOWN, (int) V8SI_FTYPE_V8SI)\n+BDESC (OPTION_MASK_ISA_AVX512VPOPCNTDQ | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpopcountv8si_mask, \"__builtin_ia32_vpopcountd_v8si_mask\", IX86_BUILTIN_VPOPCOUNTDV8SI_MASK, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_UHI)\n+\n+/* BITALG */\n+BDESC (OPTION_MASK_ISA_AVX512BITALG, CODE_FOR_vpopcountv64qi, \"__builtin_ia32_vpopcountb_v64qi\", IX86_BUILTIN_VPOPCOUNTBV64QI, UNKNOWN, (int) V64QI_FTYPE_V64QI)\n+BDESC (OPTION_MASK_ISA_AVX512BITALG | OPTION_MASK_ISA_AVX512BW, CODE_FOR_vpopcountv64qi_mask, \"__builtin_ia32_vpopcountb_v64qi_mask\", IX86_BUILTIN_VPOPCOUNTBV64QI_MASK, UNKNOWN, (int) V64QI_FTYPE_V64QI_V64QI_UDI)\n+BDESC (OPTION_MASK_ISA_AVX512BITALG | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpopcountv32qi, \"__builtin_ia32_vpopcountb_v32qi\", IX86_BUILTIN_VPOPCOUNTBV32QI, UNKNOWN, (int) V32QI_FTYPE_V32QI)\n+BDESC (OPTION_MASK_ISA_AVX512BITALG | OPTION_MASK_ISA_AVX512VL | OPTION_MASK_ISA_AVX512BW, CODE_FOR_vpopcountv32qi_mask, \"__builtin_ia32_vpopcountb_v32qi_mask\", IX86_BUILTIN_VPOPCOUNTBV32QI_MASK, UNKNOWN, (int) V32QI_FTYPE_V32QI_V32QI_USI)\n+BDESC (OPTION_MASK_ISA_AVX512BITALG | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpopcountv16qi, \"__builtin_ia32_vpopcountb_v16qi\", IX86_BUILTIN_VPOPCOUNTBV16QI, UNKNOWN, (int) V16QI_FTYPE_V16QI)\n+BDESC (OPTION_MASK_ISA_AVX512BITALG | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpopcountv16qi_mask, \"__builtin_ia32_vpopcountb_v16qi_mask\", IX86_BUILTIN_VPOPCOUNTBV16QI_MASK, UNKNOWN, (int) V16QI_FTYPE_V16QI_V16QI_UHI)\n+\n+BDESC (OPTION_MASK_ISA_AVX512BITALG, CODE_FOR_vpopcountv32hi, \"__builtin_ia32_vpopcountw_v32hi\", IX86_BUILTIN_VPOPCOUNTWV32HI, UNKNOWN, (int) V32HI_FTYPE_V32HI)\n+BDESC (OPTION_MASK_ISA_AVX512BITALG | OPTION_MASK_ISA_AVX512BW, CODE_FOR_vpopcountv32hi_mask, \"__builtin_ia32_vpopcountw_v32hi_mask\", IX86_BUILTIN_VPOPCOUNTQV32HI_MASK, UNKNOWN, (int) V32HI_FTYPE_V32HI_V32HI_USI)\n+BDESC (OPTION_MASK_ISA_AVX512BITALG | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpopcountv16hi, \"__builtin_ia32_vpopcountw_v16hi\", IX86_BUILTIN_VPOPCOUNTWV16HI, UNKNOWN, (int) V16HI_FTYPE_V16HI)\n+BDESC (OPTION_MASK_ISA_AVX512BITALG | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpopcountv16hi_mask, \"__builtin_ia32_vpopcountw_v16hi_mask\", IX86_BUILTIN_VPOPCOUNTQV16HI_MASK, UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI_UHI)\n+BDESC (OPTION_MASK_ISA_AVX512BITALG | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpopcountv8hi, \"__builtin_ia32_vpopcountw_v8hi\", IX86_BUILTIN_VPOPCOUNTWV8HI, UNKNOWN, (int) V8HI_FTYPE_V8HI)\n+BDESC (OPTION_MASK_ISA_AVX512BITALG | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpopcountv8hi_mask, \"__builtin_ia32_vpopcountw_v8hi_mask\", IX86_BUILTIN_VPOPCOUNTQV8HI_MASK, UNKNOWN, (int) V8HI_FTYPE_V8HI_V8HI_UQI)\n+\n+BDESC (OPTION_MASK_ISA_AVX512BITALG | OPTION_MASK_ISA_AVX512BW, CODE_FOR_avx512vl_vpshufbitqmbv8di_mask, \"__builtin_ia32_vpshufbitqmb512_mask\", IX86_BUILTIN_VPSHUFBITQMB512_MASK, UNKNOWN, (int) UQI_FTYPE_V8DI_V8DI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512BITALG | OPTION_MASK_ISA_AVX512VL | OPTION_MASK_ISA_AVX512BW, CODE_FOR_avx512vl_vpshufbitqmbv4di_mask, \"__builtin_ia32_vpshufbitqmb256_mask\", IX86_BUILTIN_VPSHUFBITQMB256_MASK, UNKNOWN, (int) USI_FTYPE_V4DI_V4DI_USI)\n+BDESC (OPTION_MASK_ISA_AVX512BITALG | OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_vpshufbitqmbv2di_mask, \"__builtin_ia32_vpshufbitqmb128_mask\", IX86_BUILTIN_VPSHUFBITQMB128_MASK, UNKNOWN, (int) UHI_FTYPE_V2DI_V2DI_UHI)\n+\n /* Builtins with rounding support.  */\n BDESC_END (ARGS, ROUND_ARGS)\n \n@@ -2783,20 +2817,6 @@ BDESC (OPTION_MASK_ISA_AVX5124VNNIW, CODE_FOR_avx5124vnniw_vp4dpwssd, \"__builtin\n BDESC (OPTION_MASK_ISA_AVX5124VNNIW, CODE_FOR_avx5124vnniw_vp4dpwssd_mask, \"__builtin_ia32_vp4dpwssd_mask\", IX86_BUILTIN_4DPWSSD_MASK, UNKNOWN, (int) V16SI_FTYPE_V16SI_V16SI_V16SI_V16SI_V16SI_PCV4SI_V16SI_UHI)\n BDESC (OPTION_MASK_ISA_AVX5124VNNIW, CODE_FOR_avx5124vnniw_vp4dpwssds, \"__builtin_ia32_vp4dpwssds\", IX86_BUILTIN_4DPWSSDS, UNKNOWN, (int) V16SI_FTYPE_V16SI_V16SI_V16SI_V16SI_V16SI_PCV4SI)\n BDESC (OPTION_MASK_ISA_AVX5124VNNIW, CODE_FOR_avx5124vnniw_vp4dpwssds_mask, \"__builtin_ia32_vp4dpwssds_mask\", IX86_BUILTIN_4DPWSSDS_MASK, UNKNOWN, (int) V16SI_FTYPE_V16SI_V16SI_V16SI_V16SI_V16SI_PCV4SI_V16SI_UHI)\n-BDESC (OPTION_MASK_ISA_AVX512VPOPCNTDQ, CODE_FOR_vpopcountv16si, \"__builtin_ia32_vpopcountd_v16si\", IX86_BUILTIN_VPOPCOUNTDV16SI, UNKNOWN, (int) V16SI_FTYPE_V16SI)\n-BDESC (OPTION_MASK_ISA_AVX512VPOPCNTDQ, CODE_FOR_vpopcountv16si_mask, \"__builtin_ia32_vpopcountd_v16si_mask\", IX86_BUILTIN_VPOPCOUNTDV16SI_MASK, UNKNOWN, (int) V16SI_FTYPE_V16SI_V16SI_UHI)\n-BDESC (OPTION_MASK_ISA_AVX512VPOPCNTDQ, CODE_FOR_vpopcountv8di, \"__builtin_ia32_vpopcountq_v8di\", IX86_BUILTIN_VPOPCOUNTQV8DI, UNKNOWN, (int) V8DI_FTYPE_V8DI)\n-BDESC (OPTION_MASK_ISA_AVX512VPOPCNTDQ, CODE_FOR_vpopcountv8di_mask, \"__builtin_ia32_vpopcountq_v8di_mask\", IX86_BUILTIN_VPOPCOUNTQV8DI_MASK, UNKNOWN, (int) V8DI_FTYPE_V8DI_V8DI_UQI)\n-\n-BDESC (OPTION_MASK_ISA_AVX512VPOPCNTDQ | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpopcountv4di, \"__builtin_ia32_vpopcountq_v4di\", IX86_BUILTIN_VPOPCOUNTQV4DI, UNKNOWN, (int) V4DI_FTYPE_V4DI)\n-BDESC (OPTION_MASK_ISA_AVX512VPOPCNTDQ | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpopcountv4di_mask, \"__builtin_ia32_vpopcountq_v4di_mask\", IX86_BUILTIN_VPOPCOUNTQV4DI_MASK, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VPOPCNTDQ | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpopcountv2di, \"__builtin_ia32_vpopcountq_v2di\", IX86_BUILTIN_VPOPCOUNTQV2DI, UNKNOWN, (int) V2DI_FTYPE_V2DI)\n-BDESC (OPTION_MASK_ISA_AVX512VPOPCNTDQ | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpopcountv2di_mask, \"__builtin_ia32_vpopcountq_v2di_mask\", IX86_BUILTIN_VPOPCOUNTQV2DI_MASK, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VPOPCNTDQ | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpopcountv4si, \"__builtin_ia32_vpopcountd_v4si\", IX86_BUILTIN_VPOPCOUNTDV4SI, UNKNOWN, (int) V4SI_FTYPE_V4SI)\n-BDESC (OPTION_MASK_ISA_AVX512VPOPCNTDQ | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpopcountv4si_mask, \"__builtin_ia32_vpopcountd_v4si_mask\", IX86_BUILTIN_VPOPCOUNTDV4SI_MASK, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_UHI)\n-BDESC (OPTION_MASK_ISA_AVX512VPOPCNTDQ | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpopcountv8si, \"__builtin_ia32_vpopcountd_v8si\", IX86_BUILTIN_VPOPCOUNTDV8SI, UNKNOWN, (int) V8SI_FTYPE_V8SI)\n-BDESC (OPTION_MASK_ISA_AVX512VPOPCNTDQ | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpopcountv8si_mask, \"__builtin_ia32_vpopcountd_v8si_mask\", IX86_BUILTIN_VPOPCOUNTDV8SI_MASK, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_UHI)\n-\n \n /* RDPID */\n BDESC (OPTION_MASK_ISA_RDPID, CODE_FOR_rdpid, \"__builtin_ia32_rdpid\", IX86_BUILTIN_RDPID, UNKNOWN, (int) UNSIGNED_FTYPE_VOID)\n@@ -2815,24 +2835,6 @@ BDESC (OPTION_MASK_ISA_VAES, CODE_FOR_vaesenclast_v16qi, \"__builtin_ia32_vaesenc\n BDESC (OPTION_MASK_ISA_VAES, CODE_FOR_vaesenclast_v32qi, \"__builtin_ia32_vaesenclast_v32qi\", IX86_BUILTIN_VAESENCLAST32, UNKNOWN, (int) V32QI_FTYPE_V32QI_V32QI)\n BDESC (OPTION_MASK_ISA_VAES, CODE_FOR_vaesenclast_v64qi, \"__builtin_ia32_vaesenclast_v64qi\", IX86_BUILTIN_VAESENCLAST64, UNKNOWN, (int) V64QI_FTYPE_V64QI_V64QI)\n \n-/* BITALG */\n-BDESC (OPTION_MASK_ISA_AVX512BITALG, CODE_FOR_vpopcountv64qi, \"__builtin_ia32_vpopcountb_v64qi\", IX86_BUILTIN_VPOPCOUNTBV64QI, UNKNOWN, (int) V64QI_FTYPE_V64QI)\n-BDESC (OPTION_MASK_ISA_AVX512BITALG, CODE_FOR_vpopcountv64qi_mask, \"__builtin_ia32_vpopcountb_v64qi_mask\", IX86_BUILTIN_VPOPCOUNTBV64QI_MASK, UNKNOWN, (int) V64QI_FTYPE_V64QI_V64QI_UDI)\n-BDESC (OPTION_MASK_ISA_AVX512BITALG, CODE_FOR_vpopcountv32qi, \"__builtin_ia32_vpopcountb_v32qi\", IX86_BUILTIN_VPOPCOUNTBV32QI, UNKNOWN, (int) V32QI_FTYPE_V32QI)\n-BDESC (OPTION_MASK_ISA_AVX512BITALG, CODE_FOR_vpopcountv32qi_mask, \"__builtin_ia32_vpopcountb_v32qi_mask\", IX86_BUILTIN_VPOPCOUNTBV32QI_MASK, UNKNOWN, (int) V32QI_FTYPE_V32QI_V32QI_USI)\n-BDESC (OPTION_MASK_ISA_AVX512BITALG, CODE_FOR_vpopcountv16qi, \"__builtin_ia32_vpopcountb_v16qi\", IX86_BUILTIN_VPOPCOUNTBV16QI, UNKNOWN, (int) V16QI_FTYPE_V16QI)\n-BDESC (OPTION_MASK_ISA_AVX512BITALG, CODE_FOR_vpopcountv16qi_mask, \"__builtin_ia32_vpopcountb_v16qi_mask\", IX86_BUILTIN_VPOPCOUNTBV16QI_MASK, UNKNOWN, (int) V16QI_FTYPE_V16QI_V16QI_UHI)\n-\n-BDESC (OPTION_MASK_ISA_AVX512BITALG, CODE_FOR_vpopcountv32hi, \"__builtin_ia32_vpopcountw_v32hi\", IX86_BUILTIN_VPOPCOUNTWV32HI, UNKNOWN, (int) V32HI_FTYPE_V32HI)\n-BDESC (OPTION_MASK_ISA_AVX512BITALG, CODE_FOR_vpopcountv32hi_mask, \"__builtin_ia32_vpopcountw_v32hi_mask\", IX86_BUILTIN_VPOPCOUNTQV32HI_MASK, UNKNOWN, (int) V32HI_FTYPE_V32HI_V32HI_USI)\n-BDESC (OPTION_MASK_ISA_AVX512BITALG, CODE_FOR_vpopcountv16hi, \"__builtin_ia32_vpopcountw_v16hi\", IX86_BUILTIN_VPOPCOUNTWV16HI, UNKNOWN, (int) V16HI_FTYPE_V16HI)\n-BDESC (OPTION_MASK_ISA_AVX512BITALG, CODE_FOR_vpopcountv16hi_mask, \"__builtin_ia32_vpopcountw_v16hi_mask\", IX86_BUILTIN_VPOPCOUNTQV16HI_MASK, UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI_UHI)\n-BDESC (OPTION_MASK_ISA_AVX512BITALG, CODE_FOR_vpopcountv8hi, \"__builtin_ia32_vpopcountw_v8hi\", IX86_BUILTIN_VPOPCOUNTWV8HI, UNKNOWN, (int) V8HI_FTYPE_V8HI)\n-BDESC (OPTION_MASK_ISA_AVX512BITALG, CODE_FOR_vpopcountv8hi_mask, \"__builtin_ia32_vpopcountw_v8hi_mask\", IX86_BUILTIN_VPOPCOUNTQV8HI_MASK, UNKNOWN, (int) V8HI_FTYPE_V8HI_V8HI_UQI)\n-\n-BDESC (OPTION_MASK_ISA_AVX512BITALG | OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_vpshufbitqmbv2di_mask, \"__builtin_ia32_vpshufbitqmb128_mask\", IX86_BUILTIN_VPSHUFBITQMB128_MASK, UNKNOWN, (int) UHI_FTYPE_V2DI_V2DI_UHI)\n-BDESC (OPTION_MASK_ISA_AVX512BITALG | OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_vpshufbitqmbv4di_mask, \"__builtin_ia32_vpshufbitqmb256_mask\", IX86_BUILTIN_VPSHUFBITQMB256_MASK, UNKNOWN, (int) USI_FTYPE_V4DI_V4DI_USI)\n-BDESC (OPTION_MASK_ISA_AVX512BITALG, CODE_FOR_avx512vl_vpshufbitqmbv8di_mask, \"__builtin_ia32_vpshufbitqmb512_mask\", IX86_BUILTIN_VPSHUFBITQMB512_MASK, UNKNOWN, (int) UQI_FTYPE_V8DI_V8DI_UQI)\n BDESC_END (ARGS2, MPX)\n \n /* Builtins for MPX.  */"}, {"sha": "90547ad3305195f20db04be4969de19ff80540ef", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e34b5bc34d3906a9d5f9a5d74ed0e946478389e/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e34b5bc34d3906a9d5f9a5d74ed0e946478389e/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=2e34b5bc34d3906a9d5f9a5d74ed0e946478389e", "patch": "@@ -402,9 +402,9 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     def_or_undef (parse_in, \"__SGX__\");\n   if (isa_flag2 & OPTION_MASK_ISA_AVX5124FMAPS)\n     def_or_undef (parse_in, \"__AVX5124FMAPS__\");\n-  if (isa_flag2 & OPTION_MASK_ISA_AVX512BITALG)\n+  if (isa_flag & OPTION_MASK_ISA_AVX512BITALG)\n     def_or_undef (parse_in, \"__AVX512BITALG__\");\n-  if (isa_flag2 & OPTION_MASK_ISA_AVX512VPOPCNTDQ)\n+  if (isa_flag & OPTION_MASK_ISA_AVX512VPOPCNTDQ)\n     def_or_undef (parse_in, \"__AVX512VPOPCNTDQ__\");\n   if (isa_flag & OPTION_MASK_ISA_FMA)\n     def_or_undef (parse_in, \"__FMA__\");"}, {"sha": "5c77066ea26e0409f62f416e645163893757caa3", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 37, "deletions": 23, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e34b5bc34d3906a9d5f9a5d74ed0e946478389e/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e34b5bc34d3906a9d5f9a5d74ed0e946478389e/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=2e34b5bc34d3906a9d5f9a5d74ed0e946478389e", "patch": "@@ -2758,16 +2758,16 @@ ix86_target_string (HOST_WIDE_INT isa, HOST_WIDE_INT isa2,\n     { \"-msgx\",\t\tOPTION_MASK_ISA_SGX },\n     { \"-mavx5124vnniw\", OPTION_MASK_ISA_AVX5124VNNIW },\n     { \"-mavx5124fmaps\", OPTION_MASK_ISA_AVX5124FMAPS },\n-    { \"-mavx512vpopcntdq\", OPTION_MASK_ISA_AVX512VPOPCNTDQ },\n     { \"-mibt\",\t\tOPTION_MASK_ISA_IBT },\n     { \"-mhle\",\t\tOPTION_MASK_ISA_HLE },\n     { \"-mmovbe\",\tOPTION_MASK_ISA_MOVBE },\n     { \"-mclzero\",\tOPTION_MASK_ISA_CLZERO },\n-    { \"-mmwaitx\",\tOPTION_MASK_ISA_MWAITX },\n-    { \"-mavx512bitalg\", OPTION_MASK_ISA_AVX512BITALG }\n+    { \"-mmwaitx\",\tOPTION_MASK_ISA_MWAITX }\n   };\n   static struct ix86_target_opts isa_opts[] =\n   {\n+    { \"-mavx512vpopcntdq\", OPTION_MASK_ISA_AVX512VPOPCNTDQ },\n+    { \"-mavx512bitalg\", OPTION_MASK_ISA_AVX512BITALG },\n     { \"-mvpclmulqdq\",\tOPTION_MASK_ISA_VPCLMULQDQ },\n     { \"-mgfni\",\t\tOPTION_MASK_ISA_GFNI },\n     { \"-mavx512vnni\",\tOPTION_MASK_ISA_AVX512VNNI },\n@@ -4104,14 +4104,17 @@ ix86_option_override_internal (bool main_args_p,\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_AVX512IFMA;\n \n \tif (processor_alias_table[i].flags & PTA_AVX5124VNNIW\n-\t    && !(opts->x_ix86_isa_flags2_explicit & OPTION_MASK_ISA_AVX5124VNNIW))\n+\t    && !(opts->x_ix86_isa_flags2_explicit\n+\t\t & OPTION_MASK_ISA_AVX5124VNNIW))\n \t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA_AVX5124VNNIW;\n \tif (processor_alias_table[i].flags & PTA_AVX5124FMAPS\n-\t    && !(opts->x_ix86_isa_flags2_explicit & OPTION_MASK_ISA_AVX5124FMAPS))\n+\t    && !(opts->x_ix86_isa_flags2_explicit\n+\t\t & OPTION_MASK_ISA_AVX5124FMAPS))\n \t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA_AVX5124FMAPS;\n \tif (processor_alias_table[i].flags & PTA_AVX512VPOPCNTDQ\n-\t    && !(opts->x_ix86_isa_flags2_explicit & OPTION_MASK_ISA_AVX512VPOPCNTDQ))\n-\t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA_AVX512VPOPCNTDQ;\n+\t    && !(opts->x_ix86_isa_flags_explicit\n+\t\t & OPTION_MASK_ISA_AVX512VPOPCNTDQ))\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_AVX512VPOPCNTDQ;\n \tif (processor_alias_table[i].flags & PTA_SGX\n \t    && !(opts->x_ix86_isa_flags2_explicit & OPTION_MASK_ISA_SGX))\n \t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA_SGX;\n@@ -29795,13 +29798,21 @@ def_builtin (HOST_WIDE_INT mask, const char *name,\n     {\n       ix86_builtins_isa[(int) code].isa = mask;\n \n-      /* OPTION_MASK_ISA_AVX512VL has special meaning. Despite of generic case,\n-\t where any bit set means that built-in is enable, this bit must be *and-ed*\n-\t with another one. E.g.: OPTION_MASK_ISA_AVX512DQ | OPTION_MASK_ISA_AVX512VL\n-\t means that *both* cpuid bits must be set for the built-in to be available.\n-\t Handle this here.  */\n-      if (mask & ix86_isa_flags & OPTION_MASK_ISA_AVX512VL)\n+      /* OPTION_MASK_ISA_AVX512{F,VL,BW} have special meaning. Despite of\n+\t generic case, where any bit set means that built-in is enable, this\n+\t bit must be *and-ed* with another one. E.g.:\n+\t OPTION_MASK_ISA_AVX512DQ | OPTION_MASK_ISA_AVX512VL\n+\t means that *both* cpuid bits must be set for the built-in to\n+\t be available. Handle this here.  */\n+      if ((mask & ix86_isa_flags & OPTION_MASK_ISA_AVX512VL)\n+\t  && mask != OPTION_MASK_ISA_AVX512VL)\n \tmask &= ~OPTION_MASK_ISA_AVX512VL;\n+      if ((mask & ix86_isa_flags & OPTION_MASK_ISA_AVX512BW)\n+\t  && mask != OPTION_MASK_ISA_AVX512BW)\n+\tmask &= ~OPTION_MASK_ISA_AVX512BW;\n+      if ((mask & ix86_isa_flags & OPTION_MASK_ISA_AVX512F)\n+\t  && mask != OPTION_MASK_ISA_AVX512F)\n+\tmask &= ~OPTION_MASK_ISA_AVX512F;\n \n       mask &= ~OPTION_MASK_ISA_64BIT;\n       if (mask == 0\n@@ -35364,25 +35375,28 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n      Originally the builtin was not created if it wasn't applicable to the\n      current ISA based on the command line switches.  With function specific\n      options, we need to check in the context of the function making the call\n-     whether it is supported.  Treat AVX512VL and MMX specially.  For other flags,\n-     if isa includes more than one ISA bit, treat those are requiring any\n-     of them.  For AVX512VL, require both AVX512VL and the non-AVX512VL\n-     ISAs.  Likewise for MMX, require both MMX and the non-MMX ISAs.\n+     whether it is supported.  Treat AVX512{VL,BW,F} and MMX specially.  For\n+     other flags, if isa includes more than one ISA bit, treat those are\n+     requiring any of them.  For AVX512VL, require both AVX512VL and the\n+     non-AVX512VL ISAs.  Likewise for MMX, require both MMX and the non-MMX\n+     ISAs.  Similarly for AVX512F and AVX512BW.\n      Similarly for 64BIT, but we shouldn't be building such builtins\n      at all, -m64 is a whole TU option.  */\n   if (((ix86_builtins_isa[fcode].isa\n \t& ~(OPTION_MASK_ISA_AVX512VL | OPTION_MASK_ISA_MMX\n-\t    | OPTION_MASK_ISA_64BIT | OPTION_MASK_ISA_GFNI\n-\t    | OPTION_MASK_ISA_VPCLMULQDQ))\n+\t    | OPTION_MASK_ISA_64BIT | OPTION_MASK_ISA_AVX512BW\n+\t    | OPTION_MASK_ISA_AVX512F))\n        && !(ix86_builtins_isa[fcode].isa\n \t    & ~(OPTION_MASK_ISA_AVX512VL | OPTION_MASK_ISA_MMX\n-\t\t| OPTION_MASK_ISA_64BIT | OPTION_MASK_ISA_GFNI\n-\t\t| OPTION_MASK_ISA_VPCLMULQDQ)\n+\t\t| OPTION_MASK_ISA_64BIT | OPTION_MASK_ISA_AVX512BW\n+\t\t| OPTION_MASK_ISA_AVX512F)\n \t    & ix86_isa_flags))\n       || ((ix86_builtins_isa[fcode].isa & OPTION_MASK_ISA_AVX512VL)\n \t  && !(ix86_isa_flags & OPTION_MASK_ISA_AVX512VL))\n-      || ((ix86_builtins_isa[fcode].isa & OPTION_MASK_ISA_GFNI)\n-\t  && !(ix86_isa_flags & OPTION_MASK_ISA_GFNI))\n+      || ((ix86_builtins_isa[fcode].isa & OPTION_MASK_ISA_AVX512BW)\n+\t  && !(ix86_isa_flags & OPTION_MASK_ISA_AVX512BW))\n+      || ((ix86_builtins_isa[fcode].isa & OPTION_MASK_ISA_AVX512F)\n+\t  && !(ix86_isa_flags & OPTION_MASK_ISA_AVX512F))\n       || ((ix86_builtins_isa[fcode].isa & OPTION_MASK_ISA_MMX)\n \t  && !(ix86_isa_flags & OPTION_MASK_ISA_MMX))\n       || (ix86_builtins_isa[fcode].isa2"}, {"sha": "ed27d5671eba54e8765644ad4cce8b1899d22f95", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e34b5bc34d3906a9d5f9a5d74ed0e946478389e/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e34b5bc34d3906a9d5f9a5d74ed0e946478389e/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=2e34b5bc34d3906a9d5f9a5d74ed0e946478389e", "patch": "@@ -734,7 +734,7 @@ Target Report Mask(ISA_AVX5124VNNIW) Var(ix86_isa_flags2) Save\n Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2, AVX512F and AVX5124VNNIW built-in functions and code generation.\n \n mavx512vpopcntdq\n-Target Report Mask(ISA_AVX512VPOPCNTDQ) Var(ix86_isa_flags2) Save\n+Target Report Mask(ISA_AVX512VPOPCNTDQ) Var(ix86_isa_flags) Save\n Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2, AVX512F and AVX512VPOPCNTDQ built-in functions and code generation.\n \n mavx512vbmi2\n@@ -746,7 +746,7 @@ Target Report Mask(ISA_AVX512VNNI) Var(ix86_isa_flags) Save\n Support AVX512VNNI built-in functions and code generation.\n \n mavx512bitalg\n-Target Report Mask(ISA_AVX512BITALG) Var(ix86_isa_flags2) Save\n+Target Report Mask(ISA_AVX512BITALG) Var(ix86_isa_flags) Save\n Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2, AVX512F and AVX512BITALG built-in functions and code generation.\n \n mfma"}]}