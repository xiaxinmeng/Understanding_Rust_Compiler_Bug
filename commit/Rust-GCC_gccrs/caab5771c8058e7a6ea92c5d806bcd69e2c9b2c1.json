{"sha": "caab5771c8058e7a6ea92c5d806bcd69e2c9b2c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2FhYjU3NzFjODA1OGU3YTZlYTkyYzVkODA2YmNkNjllMmM5YjJjMQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-11-30T20:48:00Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-11-30T20:48:00Z"}, "message": "(decl_attribute): Allow special names (e.g, `word') for mode\nattribute.\n\nFrom-SVN: r8582", "tree": {"sha": "4e42d30449fdc621e04c34e1bba44b3e52a9e53d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e42d30449fdc621e04c34e1bba44b3e52a9e53d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/caab5771c8058e7a6ea92c5d806bcd69e2c9b2c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/caab5771c8058e7a6ea92c5d806bcd69e2c9b2c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/caab5771c8058e7a6ea92c5d806bcd69e2c9b2c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/caab5771c8058e7a6ea92c5d806bcd69e2c9b2c1/comments", "author": null, "committer": null, "parents": [{"sha": "077e4b01177f4ed1a03f7903a8ace2e7bbfa366c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/077e4b01177f4ed1a03f7903a8ace2e7bbfa366c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/077e4b01177f4ed1a03f7903a8ace2e7bbfa366c"}], "stats": {"total": 47, "additions": 28, "deletions": 19}, "files": [{"sha": "e4207569c961ef9a8e2579f96daacb5cc7df52ff", "filename": "gcc/c-common.c", "status": "modified", "additions": 28, "deletions": 19, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caab5771c8058e7a6ea92c5d806bcd69e2c9b2c1/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caab5771c8058e7a6ea92c5d806bcd69e2c9b2c1/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=caab5771c8058e7a6ea92c5d806bcd69e2c9b2c1", "patch": "@@ -297,27 +297,36 @@ found_attr:;\n \t      && TREE_CODE (TREE_VALUE (args)) == IDENTIFIER_NODE)\n       {\n \tint i;\n-\tchar *specified_name\n-\t  = IDENTIFIER_POINTER (TREE_VALUE (args));\n+\tchar *specified_name = IDENTIFIER_POINTER (TREE_VALUE (args));\n+\tenum machine_mode mode = VOIDmode;\n+\ttree typefm;\n+\n+\t/* Give this decl a type with the specified mode.\n+\t   First check for the special modes.  */\n+\tif (! strcmp (specified_name, \"byte\")\n+\t    || ! strcmp (specified_name, \"__byte__\"))\n+\t  mode = byte_mode;\n+\telse if (!strcmp (specified_name, \"word\")\n+\t\t || ! strcmp (specified_name, \"__word__\"))\n+\t  mode = word_mode;\n+\telse if (! strcmp (specified_name, \"pointer\")\n+\t\t || !strcmp (specified_name, \"__pointer__\"))\n+\t  mode = ptr_mode;\n+\telse\n+\t  for (i = 0; i < NUM_MACHINE_MODES; i++)\n+\t    if (!strcmp (specified_name, GET_MODE_NAME (i)))\n+\t      mode = (enum machine_mode) i;\n \n-\t/* Give this decl a type with the specified mode.  */\n-\tfor (i = 0; i < NUM_MACHINE_MODES; i++)\n-\t  if (!strcmp (specified_name, GET_MODE_NAME (i)))\n-\t    {\n-\t      tree typefm\n-\t\t= type_for_mode (i, TREE_UNSIGNED (type));\n-\t      if (typefm != 0)\n-\t\t{\n-\t\t  TREE_TYPE (decl) = type = typefm;\n-\t\t  DECL_SIZE (decl) = 0;\n-\t\t  layout_decl (decl, 0);\n-\t\t}\n-\t      else\n-\t\terror (\"no data type for mode `%s'\", specified_name);\n-\t      break;\n-\t    }\n-\tif (i == NUM_MACHINE_MODES)\n+\tif (mode == VOIDmode)\n \t  error_with_decl (decl, \"unknown machine mode `%s'\", specified_name);\n+\telse if ((typefm = type_for_mode (mode, TREE_UNSIGNED (type))) == 0)\n+\t  error_with_decl (decl, \"no data type for mode `%s'\", specified_name);\n+\telse\n+\t  {\n+\t    TREE_TYPE (decl) = type = typefm;\n+\t    DECL_SIZE (decl) = 0;\n+\t    layout_decl (decl, 0);\n+\t  }\n       }\n     else if ((!strcmp (IDENTIFIER_POINTER (name), \"section\")\n \t      || !strcmp (IDENTIFIER_POINTER (name), \"__section__\"))"}]}