{"sha": "b2fe02b476afc1cddb3abcf26ec4b1e072a9401b", "node_id": "C_kwDOANBUbNoAKGIyZmUwMmI0NzZhZmMxY2RkYjNhYmNmMjZlYzRiMWUwNzJhOTQwMWI", "commit": {"author": {"name": "zhongjuzhe", "email": "juzhe.zhong@rivai.ai", "date": "2022-09-15T11:39:43Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2022-09-23T15:37:17Z"}, "message": "RISC-V: Add RVV machine modes.\n\ngcc/ChangeLog:\n\n\t* config/riscv/riscv-modes.def (VECTOR_BOOL_MODE): Add RVV mask modes.\n\t(ADJUST_NUNITS): Adjust nunits using riscv_vector_chunks.\n\t(ADJUST_ALIGNMENT): Adjust alignment.\n\t(ADJUST_BYTESIZE): Adjust bytesize using riscv_vector_chunks.\n\t(RVV_MODES): New macro.\n\t(VECTOR_MODE_WITH_PREFIX): Add RVV vector modes.\n\t(VECTOR_MODES_WITH_PREFIX): Add RVV vector modes.", "tree": {"sha": "e1d9c8a0c4b3b916f22a3b6c842291dca16effc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1d9c8a0c4b3b916f22a3b6c842291dca16effc4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2fe02b476afc1cddb3abcf26ec4b1e072a9401b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2fe02b476afc1cddb3abcf26ec4b1e072a9401b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2fe02b476afc1cddb3abcf26ec4b1e072a9401b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2fe02b476afc1cddb3abcf26ec4b1e072a9401b/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4feb49cf308b344fba6a72137df58de382fcb9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4feb49cf308b344fba6a72137df58de382fcb9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4feb49cf308b344fba6a72137df58de382fcb9d"}], "stats": {"total": 141, "additions": 141, "deletions": 0}, "files": [{"sha": "95f69e87e23e8b5aff9d581d77cd3e820d7d8069", "filename": "gcc/config/riscv/riscv-modes.def", "status": "modified", "additions": 141, "deletions": 0, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2fe02b476afc1cddb3abcf26ec4b1e072a9401b/gcc%2Fconfig%2Friscv%2Friscv-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2fe02b476afc1cddb3abcf26ec4b1e072a9401b/gcc%2Fconfig%2Friscv%2Friscv-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-modes.def?ref=b2fe02b476afc1cddb3abcf26ec4b1e072a9401b", "patch": "@@ -22,6 +22,147 @@ along with GCC; see the file COPYING3.  If not see\n FLOAT_MODE (HF, 2, ieee_half_format);\n FLOAT_MODE (TF, 16, ieee_quad_format);\n \n+/* Vector modes.  */\n+\n+/* Encode the ratio of SEW/LMUL into the mask types. There are the following\n+ * mask types.  */\n+\n+/* | Mode     | MIN_VLEN = 32 | MIN_VLEN = 64 |\n+   |          | SEW/LMUL      | SEW/LMUL      |\n+   | VNx1BI   | 32            | 64            |\n+   | VNx2BI   | 16            | 32            |\n+   | VNx4BI   | 8             | 16            |\n+   | VNx8BI   | 4             | 8             |\n+   | VNx16BI  | 2             | 4             |\n+   | VNx32BI  | 1             | 2             |\n+   | VNx64BI  | N/A           | 1             |  */\n+\n+VECTOR_BOOL_MODE (VNx1BI, 1, BI, 8);\n+VECTOR_BOOL_MODE (VNx2BI, 2, BI, 8);\n+VECTOR_BOOL_MODE (VNx4BI, 4, BI, 8);\n+VECTOR_BOOL_MODE (VNx8BI, 8, BI, 8);\n+VECTOR_BOOL_MODE (VNx16BI, 16, BI, 8);\n+VECTOR_BOOL_MODE (VNx32BI, 32, BI, 8);\n+VECTOR_BOOL_MODE (VNx64BI, 64, BI, 8);\n+\n+ADJUST_NUNITS (VNx1BI, riscv_vector_chunks * 1);\n+ADJUST_NUNITS (VNx2BI, riscv_vector_chunks * 2);\n+ADJUST_NUNITS (VNx4BI, riscv_vector_chunks * 4);\n+ADJUST_NUNITS (VNx8BI, riscv_vector_chunks * 8);\n+ADJUST_NUNITS (VNx16BI, riscv_vector_chunks * 16);\n+ADJUST_NUNITS (VNx32BI, riscv_vector_chunks * 32);\n+ADJUST_NUNITS (VNx64BI, riscv_vector_chunks * 64);\n+\n+ADJUST_ALIGNMENT (VNx1BI, 1);\n+ADJUST_ALIGNMENT (VNx2BI, 1);\n+ADJUST_ALIGNMENT (VNx4BI, 1);\n+ADJUST_ALIGNMENT (VNx8BI, 1);\n+ADJUST_ALIGNMENT (VNx16BI, 1);\n+ADJUST_ALIGNMENT (VNx32BI, 1);\n+ADJUST_ALIGNMENT (VNx64BI, 1);\n+\n+ADJUST_BYTESIZE (VNx1BI, riscv_vector_chunks * riscv_bytes_per_vector_chunk);\n+ADJUST_BYTESIZE (VNx2BI, riscv_vector_chunks * riscv_bytes_per_vector_chunk);\n+ADJUST_BYTESIZE (VNx4BI, riscv_vector_chunks * riscv_bytes_per_vector_chunk);\n+ADJUST_BYTESIZE (VNx8BI, riscv_vector_chunks * riscv_bytes_per_vector_chunk);\n+ADJUST_BYTESIZE (VNx16BI, riscv_vector_chunks * riscv_bytes_per_vector_chunk);\n+ADJUST_BYTESIZE (VNx32BI, riscv_vector_chunks * riscv_bytes_per_vector_chunk);\n+ADJUST_BYTESIZE (VNx64BI, riscv_vector_chunks * riscv_bytes_per_vector_chunk);\n+\n+/*\n+   | Mode        | MIN_VLEN=32 | MIN_VLEN=32 | MIN_VLEN=64 | MIN_VLEN=64 |\n+   |             | LMUL        |  SEW/LMUL   | LMUL        | SEW/LMUL    |\n+   | VNx1QI      | MF4         |  32         | MF8         | 64          |\n+   | VNx2QI      | MF2         |  16         | MF4         | 32          |\n+   | VNx4QI      | M1          |  8          | MF2         | 16          |\n+   | VNx8QI      | M2          |  4          | M1          | 8           |\n+   | VNx16QI     | M4          |  2          | M2          | 4           |\n+   | VNx32QI     | M8          |  1          | M4          | 2           |\n+   | VNx64QI     | N/A         |  N/A        | M8          | 1           |\n+   | VNx1(HI|HF) | MF2         |  32         | MF4         | 64          |\n+   | VNx2(HI|HF) | M1          |  16         | MF2         | 32          |\n+   | VNx4(HI|HF) | M2          |  8          | M1          | 16          |\n+   | VNx8(HI|HF) | M4          |  4          | M2          | 8           |\n+   | VNx16(HI|HF)| M8          |  2          | M4          | 4           |\n+   | VNx32(HI|HF)| N/A         |  N/A        | M8          | 2           |\n+   | VNx1(SI|SF) | M1          |  32         | MF2         | 64          |\n+   | VNx2(SI|SF) | M2          |  16         | M1          | 32          |\n+   | VNx4(SI|SF) | M4          |  8          | M2          | 16          |\n+   | VNx8(SI|SF) | M8          |  4          | M4          | 8           |\n+   | VNx16(SI|SF)| N/A         |  N/A        | M8          | 4           |\n+   | VNx1(DI|DF) | N/A         |  N/A        | M1          | 64          |\n+   | VNx2(DI|DF) | N/A         |  N/A        | M2          | 32          |\n+   | VNx4(DI|DF) | N/A         |  N/A        | M4          | 16          |\n+   | VNx8(DI|DF) | N/A         |  N/A        | M8          | 8           |\n+*/\n+\n+/* Define RVV modes whose sizes are multiples of 64-bit chunks.  */\n+#define RVV_MODES(NVECS, VB, VH, VS, VD)                                       \\\n+  VECTOR_MODES_WITH_PREFIX (VNx, INT, 8 * NVECS, 0);                           \\\n+  VECTOR_MODES_WITH_PREFIX (VNx, FLOAT, 8 * NVECS, 0);                         \\\n+                                                                               \\\n+  ADJUST_NUNITS (VB##QI, riscv_vector_chunks * NVECS * 8);                     \\\n+  ADJUST_NUNITS (VH##HI, riscv_vector_chunks * NVECS * 4);                     \\\n+  ADJUST_NUNITS (VS##SI, riscv_vector_chunks * NVECS * 2);                     \\\n+  ADJUST_NUNITS (VD##DI, riscv_vector_chunks * NVECS);                         \\\n+  ADJUST_NUNITS (VH##HF, riscv_vector_chunks * NVECS * 4);                     \\\n+  ADJUST_NUNITS (VS##SF, riscv_vector_chunks * NVECS * 2);                     \\\n+  ADJUST_NUNITS (VD##DF, riscv_vector_chunks * NVECS);                         \\\n+                                                                               \\\n+  ADJUST_ALIGNMENT (VB##QI, 1);                                                \\\n+  ADJUST_ALIGNMENT (VH##HI, 2);                                                \\\n+  ADJUST_ALIGNMENT (VS##SI, 4);                                                \\\n+  ADJUST_ALIGNMENT (VD##DI, 8);                                                \\\n+  ADJUST_ALIGNMENT (VH##HF, 2);                                                \\\n+  ADJUST_ALIGNMENT (VS##SF, 4);                                                \\\n+  ADJUST_ALIGNMENT (VD##DF, 8);\n+\n+/* 'VECTOR_MODES_WITH_PREFIX' does not allow ncomponents < 2.\n+   So we use 'VECTOR_MODE_WITH_PREFIX' to define VNx1DImode and VNx1DFmode.  */\n+VECTOR_MODE_WITH_PREFIX (VNx, INT, DI, 1, 0);\n+VECTOR_MODE_WITH_PREFIX (VNx, FLOAT, DF, 1, 0);\n+RVV_MODES (1, VNx8, VNx4, VNx2, VNx1)\n+RVV_MODES (2, VNx16, VNx8, VNx4, VNx2)\n+RVV_MODES (4, VNx32, VNx16, VNx8, VNx4)\n+RVV_MODES (8, VNx64, VNx32, VNx16, VNx8)\n+\n+VECTOR_MODES_WITH_PREFIX (VNx, INT, 4, 0);\n+VECTOR_MODES_WITH_PREFIX (VNx, FLOAT, 4, 0);\n+ADJUST_NUNITS (VNx4QI, riscv_vector_chunks * 4);\n+ADJUST_NUNITS (VNx2HI, riscv_vector_chunks * 2);\n+ADJUST_NUNITS (VNx2HF, riscv_vector_chunks * 2);\n+ADJUST_ALIGNMENT (VNx4QI, 1);\n+ADJUST_ALIGNMENT (VNx2HI, 2);\n+ADJUST_ALIGNMENT (VNx2HF, 2);\n+\n+/* 'VECTOR_MODES_WITH_PREFIX' does not allow ncomponents < 2.\n+   So we use 'VECTOR_MODE_WITH_PREFIX' to define VNx1SImode and VNx1SFmode.  */\n+VECTOR_MODE_WITH_PREFIX (VNx, INT, SI, 1, 0);\n+VECTOR_MODE_WITH_PREFIX (VNx, FLOAT, SF, 1, 0);\n+ADJUST_NUNITS (VNx1SI, riscv_vector_chunks);\n+ADJUST_NUNITS (VNx1SF, riscv_vector_chunks);\n+ADJUST_ALIGNMENT (VNx1SI, 4);\n+ADJUST_ALIGNMENT (VNx1SF, 4);\n+\n+VECTOR_MODES_WITH_PREFIX (VNx, INT, 2, 0);\n+ADJUST_NUNITS (VNx2QI, riscv_vector_chunks * 2);\n+ADJUST_ALIGNMENT (VNx2QI, 1);\n+\n+/* 'VECTOR_MODES_WITH_PREFIX' does not allow ncomponents < 2.\n+   So we use 'VECTOR_MODE_WITH_PREFIX' to define VNx1HImode and VNx1HFmode.  */\n+VECTOR_MODE_WITH_PREFIX (VNx, INT, HI, 1, 0);\n+VECTOR_MODE_WITH_PREFIX (VNx, FLOAT, HF, 1, 0);\n+ADJUST_NUNITS (VNx1HI, riscv_vector_chunks);\n+ADJUST_NUNITS (VNx1HF, riscv_vector_chunks);\n+ADJUST_ALIGNMENT (VNx1HI, 2);\n+ADJUST_ALIGNMENT (VNx1HF, 2);\n+\n+/* 'VECTOR_MODES_WITH_PREFIX' does not allow ncomponents < 2.\n+   So we use 'VECTOR_MODE_WITH_PREFIX' to define VNx1QImode.  */\n+VECTOR_MODE_WITH_PREFIX (VNx, INT, QI, 1, 0);\n+ADJUST_NUNITS (VNx1QI, riscv_vector_chunks);\n+ADJUST_ALIGNMENT (VNx1QI, 1);\n+\n /* TODO: According to RISC-V 'V' ISA spec, the maximun vector length can\n    be 65536 for a single vector register which means the vector mode in\n    GCC can be maximum = 65536 * 8 bits (LMUL=8)."}]}