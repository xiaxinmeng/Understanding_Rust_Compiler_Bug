{"sha": "134c192bb33f87fc0b261b32d4e18a497c1e1b1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTM0YzE5MmJiMzNmODdmYzBiMjYxYjMyZDRlMThhNDk3YzFlMWIxYw==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-11-06T18:41:57Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-11-06T18:41:57Z"}, "message": "re PR c++/45332 (Generate clear diagnostics when a terminating semicolon is missing from a class member declaration.)\n\ngcc/cp/\n\tPR c++/45332\n\t* parser.c (cp_lexer_previous_token): New function.\n\t(cp_parser_member_declaration): Use previous token for error\n\tmessages.  Assume semicolon presence rather than grovelling for\n\tthe next one.\n\ngcc/testsuite/\n\tPR c++/45332\n\t* g++.dg/parse/semicolon2.C: New testcase.\n\t* g++.dg/ext/asmspec1.C: Adjust.\n\t* g++.dg/init/new13.C: Adjust.\n\t* g++.dg/parse/ctor5.C: Adjust.\n\nFrom-SVN: r166406", "tree": {"sha": "85f85d6ade9121cc2106c12f318d3a31ee0c9783", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85f85d6ade9121cc2106c12f318d3a31ee0c9783"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/134c192bb33f87fc0b261b32d4e18a497c1e1b1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/134c192bb33f87fc0b261b32d4e18a497c1e1b1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/134c192bb33f87fc0b261b32d4e18a497c1e1b1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/134c192bb33f87fc0b261b32d4e18a497c1e1b1c/comments", "author": null, "committer": null, "parents": [{"sha": "fbc7f9df71ac3c5dd63e014686ce9b3022f83f82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbc7f9df71ac3c5dd63e014686ce9b3022f83f82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbc7f9df71ac3c5dd63e014686ce9b3022f83f82"}], "stats": {"total": 72, "additions": 61, "deletions": 11}, "files": [{"sha": "784f3aab15d263885224460a250d01435d63eabd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134c192bb33f87fc0b261b32d4e18a497c1e1b1c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134c192bb33f87fc0b261b32d4e18a497c1e1b1c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=134c192bb33f87fc0b261b32d4e18a497c1e1b1c", "patch": "@@ -1,3 +1,11 @@\n+2010-11-06  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\tPR c++/45332\n+\t* parser.c (cp_lexer_previous_token): New function.\n+\t(cp_parser_member_declaration): Use previous token for error\n+\tmessages.  Assume semicolon presence rather than grovelling for\n+\tthe next one.\n+\n 2010-11-06  Joern Rennecke  <amylaar@spamcop.net>\n \n \tPR middle-end/46314"}, {"sha": "6a9e4d7b981fe1864f3e800edef57e45ed0f05a1", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134c192bb33f87fc0b261b32d4e18a497c1e1b1c/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134c192bb33f87fc0b261b32d4e18a497c1e1b1c/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=134c192bb33f87fc0b261b32d4e18a497c1e1b1c", "patch": "@@ -502,6 +502,19 @@ cp_lexer_token_at (cp_lexer *lexer ATTRIBUTE_UNUSED, cp_token_position pos)\n   return pos;\n }\n \n+static inline cp_token *\n+cp_lexer_previous_token (cp_lexer *lexer)\n+{\n+  cp_token_position tp;\n+\n+  if (lexer->next_token == &eof_token)\n+    tp = lexer->last_token - 1;\n+  else\n+    tp = cp_lexer_token_position (lexer, true);\n+\n+  return cp_lexer_token_at (lexer, tp);\n+}\n+\n /* nonzero if we are presently saving tokens.  */\n \n static inline int\n@@ -17627,6 +17640,8 @@ cp_parser_member_declaration (cp_parser* parser)\n     }\n   else\n     {\n+      bool assume_semicolon = false;\n+\n       /* See if these declarations will be friends.  */\n       friend_p = cp_parser_friend_p (&decl_specifiers);\n \n@@ -17820,11 +17835,18 @@ cp_parser_member_declaration (cp_parser* parser)\n \t  else if (cp_lexer_next_token_is_not (parser->lexer,\n \t\t\t\t\t       CPP_SEMICOLON))\n \t    {\n-\t      cp_parser_error (parser, \"expected %<;%>\");\n-\t      /* Skip tokens until we find a `;'.  */\n-\t      cp_parser_skip_to_end_of_statement (parser);\n+\t      /* The next token might be a ways away from where the\n+\t\t actual semicolon is missing.  Find the previous token\n+\t\t and use that for our error position.  */\n+\t      cp_token *token = cp_lexer_previous_token (parser->lexer);\n+\t      error_at (token->location,\n+\t\t\t\"expected %<;%> at end of member declaration\");\n \n-\t      break;\n+\t      /* Assume that the user meant to provide a semicolon.  If\n+\t\t we were to cp_parser_skip_to_end_of_statement, we might\n+\t\t skip to a semicolon inside a member function definition\n+\t\t and issue nonsensical error messages.  */\n+\t      assume_semicolon = true;\n \t    }\n \n \t  if (decl)\n@@ -17836,6 +17858,9 @@ cp_parser_member_declaration (cp_parser* parser)\n \t      if (TREE_CODE (decl) == FUNCTION_DECL)\n \t\tcp_parser_save_default_args (parser, decl);\n \t    }\n+\n+\t  if (assume_semicolon)\n+\t    return;\n \t}\n     }\n "}, {"sha": "911ba14316297ff4a5d67790edd89a95f0fc9205", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134c192bb33f87fc0b261b32d4e18a497c1e1b1c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134c192bb33f87fc0b261b32d4e18a497c1e1b1c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=134c192bb33f87fc0b261b32d4e18a497c1e1b1c", "patch": "@@ -1,3 +1,11 @@\n+2010-11-06  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\tPR c++/45332\n+\t* g++.dg/parse/semicolon2.C: New testcase.\n+\t* g++.dg/ext/asmspec1.C: Adjust.\n+\t* g++.dg/init/new13.C: Adjust.\n+\t* g++.dg/parse/ctor5.C: Adjust.\n+\n 2010-11-06  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/46330"}, {"sha": "0661136feccec34222072aea1d19773fbeeedf61", "filename": "gcc/testsuite/g++.dg/ext/asmspec1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134c192bb33f87fc0b261b32d4e18a497c1e1b1c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fasmspec1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134c192bb33f87fc0b261b32d4e18a497c1e1b1c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fasmspec1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fasmspec1.C?ref=134c192bb33f87fc0b261b32d4e18a497c1e1b1c", "patch": "@@ -3,6 +3,6 @@\n \n struct A\n {\n-  int i __asm__(int);         // { dg-error \"before\" }\n-  static int j __asm__(int);  // { dg-error \"before\" }\n+  int i __asm__(int);         // { dg-error \"expected\" }\n+  static int j __asm__(int);  // { dg-error \"expected\" }\n };"}, {"sha": "2ced6e3fe020107f5a111b9c5a792fa083b816e0", "filename": "gcc/testsuite/g++.dg/init/new13.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134c192bb33f87fc0b261b32d4e18a497c1e1b1c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134c192bb33f87fc0b261b32d4e18a497c1e1b1c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew13.C?ref=134c192bb33f87fc0b261b32d4e18a497c1e1b1c", "patch": "@@ -5,7 +5,7 @@\n \n struct A\n {\n-  void* operator new(__SIZE_TYPE__) throw(X);  // { dg-error \"\" }\n+  void* operator new(__SIZE_TYPE__) throw(X);  // { dg-error \"expected|type\" }\n };\n \n-A* p = new A;                                  // { dg-error \"no suitable\" }\n+A* p = new A;"}, {"sha": "3ea23549c0bbf20b3241c798a66f6029ff5ac760", "filename": "gcc/testsuite/g++.dg/parse/ctor5.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134c192bb33f87fc0b261b32d4e18a497c1e1b1c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fctor5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134c192bb33f87fc0b261b32d4e18a497c1e1b1c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fctor5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fctor5.C?ref=134c192bb33f87fc0b261b32d4e18a497c1e1b1c", "patch": "@@ -2,9 +2,9 @@\n \n struct A\n {\n-  int i;\n-  A() i() {}  // { dg-error \"expected\" }\n-}; // { dg-error \"expected\" }\n+  int i; // { dg-error \"conflicts\" }\n+  A() i() {}  // { dg-error \"declaration\" }\n+};\n \n struct B\n {"}, {"sha": "d14a225a674bb6333142fd442f3d62412aef40a3", "filename": "gcc/testsuite/g++.dg/parse/semicolon2.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134c192bb33f87fc0b261b32d4e18a497c1e1b1c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fsemicolon2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134c192bb33f87fc0b261b32d4e18a497c1e1b1c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fsemicolon2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fsemicolon2.C?ref=134c192bb33f87fc0b261b32d4e18a497c1e1b1c", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/45332\n+// { dg-do compile }\n+\n+class C\n+{\n+ int x\t\t\t\t// { dg-error \"at end of member declaration\" }\n+\n+ const int foo() { return x; }\n+};"}]}