{"sha": "a1d3851bcd7404635a0e04846fac7f1561a6e286", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTFkMzg1MWJjZDc0MDQ2MzVhMGUwNDg0NmZhYzdmMTU2MWE2ZTI4Ng==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-17T06:14:35Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-17T06:14:35Z"}, "message": "[multiple changes]\n\n2014-07-17  Pascal Obry  <obry@adacore.com>\n\n\t* s-os_lib.ads: Minor comment update.\n\n2014-07-17  Tristan Gingold  <gingold@adacore.com>\n\n\t* sysdep.c: Add ATTRIBUTE_UNUSED to avoid warnings.  Fix some\n\tindentation.\n\t* socket.c: Remove #warning to avoid warning.\n\t* expect.c: Indent some preprocessor directives to clarify\n\tnested if.  Do not use wait.h on PikeOS.  Add ATTRIBUTE_UNUSED\n\tto remove warnings.\n\t* env.c: Fix indentation.  Port to PikeOS.\n\t* gsocket.h: Port to PikeOS.  Remove #warning.\n\t* terminals.c: Port to PikeOS.\tFix indentation of the stubs.\n\tAdd ATTRIBUTE_UNUSED to stubs arguments.  Fix return statement\n\tof stubbed __gnat_setup_parent_communication.\n\t* adaint.c: Port to PikeOS.  Reindent some preprocessor\n\tdirectives to clarify nested if.  Fix indentation.  Add missing\n\tATTRIBUTE_UNUSED.\n\n2014-07-17  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_attr.adb: Minor reformatting.\n\nFrom-SVN: r212717", "tree": {"sha": "e69d504d24e1249b981b7150ceb6cc8107e5e456", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e69d504d24e1249b981b7150ceb6cc8107e5e456"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1d3851bcd7404635a0e04846fac7f1561a6e286", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1d3851bcd7404635a0e04846fac7f1561a6e286", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1d3851bcd7404635a0e04846fac7f1561a6e286", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1d3851bcd7404635a0e04846fac7f1561a6e286/comments", "author": null, "committer": null, "parents": [{"sha": "d2d8b2a70d792987761480ac14301816498a6454", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2d8b2a70d792987761480ac14301816498a6454", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2d8b2a70d792987761480ac14301816498a6454"}], "stats": {"total": 287, "additions": 210, "deletions": 77}, "files": [{"sha": "6d1c1b93955da6d3b92064c1d1469caf16ce67d5", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1d3851bcd7404635a0e04846fac7f1561a6e286/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1d3851bcd7404635a0e04846fac7f1561a6e286/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a1d3851bcd7404635a0e04846fac7f1561a6e286", "patch": "@@ -1,3 +1,28 @@\n+2014-07-17  Pascal Obry  <obry@adacore.com>\n+\n+\t* s-os_lib.ads: Minor comment update.\n+\n+2014-07-17  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* sysdep.c: Add ATTRIBUTE_UNUSED to avoid warnings.  Fix some\n+\tindentation.\n+\t* socket.c: Remove #warning to avoid warning.\n+\t* expect.c: Indent some preprocessor directives to clarify\n+\tnested if.  Do not use wait.h on PikeOS.  Add ATTRIBUTE_UNUSED\n+\tto remove warnings.\n+\t* env.c: Fix indentation.  Port to PikeOS.\n+\t* gsocket.h: Port to PikeOS.  Remove #warning.\n+\t* terminals.c: Port to PikeOS.\tFix indentation of the stubs.\n+\tAdd ATTRIBUTE_UNUSED to stubs arguments.  Fix return statement\n+\tof stubbed __gnat_setup_parent_communication.\n+\t* adaint.c: Port to PikeOS.  Reindent some preprocessor\n+\tdirectives to clarify nested if.  Fix indentation.  Add missing\n+\tATTRIBUTE_UNUSED.\n+\n+2014-07-17  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_attr.adb: Minor reformatting.\n+\n 2014-07-17  Robert Dewar  <dewar@adacore.com>\n \n \t* exp_ch7.adb, exp_ch7.ads, sinfo.ads: Minor reformatting."}, {"sha": "a3829f7be1f1ca760574e0d1755d3c8881fd1ba2", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 28, "deletions": 17, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1d3851bcd7404635a0e04846fac7f1561a6e286/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1d3851bcd7404635a0e04846fac7f1561a6e286/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=a1d3851bcd7404635a0e04846fac7f1561a6e286", "patch": "@@ -73,6 +73,10 @@\n #define HOST_OBJECT_SUFFIX \".obj\"\n #endif\n \n+#ifdef __PikeOS__\n+#define __BSD_VISIBLE 1\n+#endif\n+\n #ifdef IN_RTS\n #include \"tconfig.h\"\n #include \"tsystem.h\"\n@@ -144,20 +148,20 @@ UINT CurrentCodePage;\n \n /* wait.h processing */\n #ifdef __MINGW32__\n-#if OLD_MINGW\n-#include <sys/wait.h>\n-#endif\n+# if OLD_MINGW\n+#  include <sys/wait.h>\n+# endif\n #elif defined (__vxworks) && defined (__RTP__)\n-#include <wait.h>\n+# include <wait.h>\n #elif defined (__Lynx__)\n /* ??? We really need wait.h and it includes resource.h on Lynx.  GCC\n    has a resource.h header as well, included instead of the lynx\n    version in our setup, causing lots of errors.  We don't really need\n    the lynx contents of this file, so just workaround the issue by\n    preventing the inclusion of the GCC header from doing anything.  */\n-#define GCC_RESOURCE_H\n-#include <sys/wait.h>\n-#elif defined (__nucleus__)\n+# define GCC_RESOURCE_H\n+# include <sys/wait.h>\n+#elif defined (__nucleus__) || defined (__PikeOS__)\n /* No wait() or waitpid() calls available.  */\n #else\n /* Default case.  */\n@@ -506,7 +510,7 @@ __gnat_readlink (char *path ATTRIBUTE_UNUSED,\n \t\t size_t bufsiz ATTRIBUTE_UNUSED)\n {\n #if defined (_WIN32) || defined (VMS) \\\n-    || defined(__vxworks) || defined (__nucleus__)\n+  || defined(__vxworks) || defined (__nucleus__) || defined (__PikeOS__)\n   return -1;\n #else\n   return readlink (path, buf, bufsiz);\n@@ -522,7 +526,7 @@ __gnat_symlink (char *oldpath ATTRIBUTE_UNUSED,\n \t\tchar *newpath ATTRIBUTE_UNUSED)\n {\n #if defined (_WIN32) || defined (VMS) \\\n-    || defined(__vxworks) || defined (__nucleus__)\n+  || defined(__vxworks) || defined (__nucleus__) || defined (__PikeOS__)\n   return -1;\n #else\n   return symlink (oldpath, newpath);\n@@ -532,7 +536,7 @@ __gnat_symlink (char *oldpath ATTRIBUTE_UNUSED,\n /* Try to lock a file, return 1 if success.  */\n \n #if defined (__vxworks) || defined (__nucleus__) \\\n-  || defined (_WIN32) || defined (VMS)\n+  || defined (_WIN32) || defined (VMS) || defined (__PikeOS__)\n \n /* Version that does not use link. */\n \n@@ -2475,13 +2479,14 @@ __gnat_is_symbolic_link (char *name ATTRIBUTE_UNUSED)\n #endif\n \n int\n-__gnat_portable_spawn (char *args[])\n+__gnat_portable_spawn (char *args[] ATTRIBUTE_UNUSED)\n {\n-  int status = 0;\n+  int status ATTRIBUTE_UNUSED = 0;\n   int finished ATTRIBUTE_UNUSED;\n   int pid ATTRIBUTE_UNUSED;\n \n-#if defined (__vxworks) || defined(__nucleus__) || defined(RTX)\n+#if defined (__vxworks) || defined(__nucleus__) || defined(RTX) \\\n+  || defined(__PikeOS__)\n   return -1;\n \n #elif defined (_WIN32)\n@@ -2551,12 +2556,15 @@ __gnat_dup (int oldfd)\n    Return -1 if an error occurred.  */\n \n int\n-__gnat_dup2 (int oldfd, int newfd)\n+__gnat_dup2 (int oldfd ATTRIBUTE_UNUSED, int newfd ATTRIBUTE_UNUSED)\n {\n #if defined (__vxworks) && !defined (__RTP__)\n   /* Not supported on VxWorks 5.x, but supported on VxWorks 6.0 when using\n      RTPs.  */\n   return -1;\n+#elif defined (__PikeOS__)\n+  /* Not supported.  */\n+  return -1;\n #elif defined (_WIN32)\n   /* Special case when oldfd and newfd are identical and are the standard\n      input, output or error as this makes Windows XP hangs. Note that we\n@@ -2809,10 +2817,12 @@ win32_wait (int *status)\n #endif\n \n int\n-__gnat_portable_no_block_spawn (char *args[])\n+__gnat_portable_no_block_spawn (char *args[] ATTRIBUTE_UNUSED)\n {\n \n-#if defined (__vxworks) || defined (__nucleus__) || defined (RTX)\n+#if defined (__vxworks) || defined (__nucleus__) || defined (RTX) \\\n+  || defined (__PikeOS__)\n+  /* Not supported.  */\n   return -1;\n \n #elif defined (_WIN32)\n@@ -2855,7 +2865,8 @@ __gnat_portable_wait (int *process_status)\n   int status = 0;\n   int pid = 0;\n \n-#if defined (__vxworks) || defined (__nucleus__) || defined (RTX)\n+#if defined (__vxworks) || defined (__nucleus__) || defined (RTX) \\\n+  || defined (__PikeOS__)\n   /* Not sure what to do here, so do nothing but return zero.  */\n \n #elif defined (_WIN32)"}, {"sha": "de5e08a65c3ee4946a6409edbbbf1979cf750bc7", "filename": "gcc/ada/env.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1d3851bcd7404635a0e04846fac7f1561a6e286/gcc%2Fada%2Fenv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1d3851bcd7404635a0e04846fac7f1561a6e286/gcc%2Fada%2Fenv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fenv.c?ref=a1d3851bcd7404635a0e04846fac7f1561a6e286", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *            Copyright (C) 2005-2012, Free Software Foundation, Inc.       *\n+ *            Copyright (C) 2005-2014, Free Software Foundation, Inc.       *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -224,7 +224,8 @@ __gnat_environ (void)\n #endif\n }\n \n-void __gnat_unsetenv (char *name) {\n+void __gnat_unsetenv (char *name)\n+{\n #if defined (VMS)\n   /* Not implemented */\n   return;\n@@ -282,12 +283,14 @@ void __gnat_unsetenv (char *name) {\n #endif\n }\n \n-void __gnat_clearenv (void) {\n+void __gnat_clearenv (void)\n+{\n #if defined (VMS)\n   /* not implemented */\n   return;\n #elif defined (sun) \\\n-   || (defined (__vxworks) && ! defined (__RTP__)) || defined (__Lynx__)\n+  || (defined (__vxworks) && ! defined (__RTP__)) || defined (__Lynx__) \\\n+  || defined (__PikeOS__)\n   /* On Solaris, VxWorks (not RTPs), and Lynx there is no system\n      call to unset a variable or to clear the environment so set all\n      the entries in the environ table to NULL (see comment in"}, {"sha": "aa014a6a38195e4817fab69e03ef4f1db08817cf", "filename": "gcc/ada/expect.c", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1d3851bcd7404635a0e04846fac7f1561a6e286/gcc%2Fada%2Fexpect.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1d3851bcd7404635a0e04846fac7f1561a6e286/gcc%2Fada%2Fexpect.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexpect.c?ref=a1d3851bcd7404635a0e04846fac7f1561a6e286", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *                     Copyright (C) 2001-2011, AdaCore                     *\n+ *                     Copyright (C) 2001-2014, AdaCore                     *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -45,17 +45,17 @@\n #include <sys/types.h>\n \n #ifdef __MINGW32__\n-#if OLD_MINGW\n-#include <sys/wait.h>\n-#endif\n+# if OLD_MINGW\n+#  include <sys/wait.h>\n+# endif\n #elif defined (__vxworks) && defined (__RTP__)\n-#include <wait.h>\n+# include <wait.h>\n #elif defined (__Lynx__)\n-/* ??? See comment in adaint.c.  */\n-#define GCC_RESOURCE_H\n-#include <sys/wait.h>\n-#elif defined (__nucleus__)\n-/* No wait.h available on Nucleus */\n+  /* ??? See comment in adaint.c.  */\n+# define GCC_RESOURCE_H\n+# include <sys/wait.h>\n+#elif defined (__nucleus__) || defined (__PikeOS__)\n+  /* No wait.h available on Nucleus */\n #else\n #include <sys/wait.h>\n #endif\n@@ -476,18 +476,20 @@ __gnat_expect_poll (int *fd, int num_fd, int timeout, int *is_set)\n #else\n \n void\n-__gnat_kill (int pid, int sig, int close)\n+__gnat_kill (int pid ATTRIBUTE_UNUSED,\n+\t     int sig ATTRIBUTE_UNUSED,\n+\t     int close ATTRIBUTE_UNUSED)\n {\n }\n \n int\n-__gnat_waitpid (int pid, int sig)\n+__gnat_waitpid (int pid ATTRIBUTE_UNUSED, int sig ATTRIBUTE_UNUSED)\n {\n   return 0;\n }\n \n int\n-__gnat_pipe (int *fd)\n+__gnat_pipe (int *fd ATTRIBUTE_UNUSED)\n {\n   return -1;\n }\n@@ -499,13 +501,18 @@ __gnat_expect_fork (void)\n }\n \n void\n-__gnat_expect_portable_execvp (int *pid, char *cmd, char *argv[])\n+__gnat_expect_portable_execvp (int *pid ATTRIBUTE_UNUSED,\n+\t\t\t       char *cmd ATTRIBUTE_UNUSED,\n+\t\t\t       char *argv[] ATTRIBUTE_UNUSED)\n {\n   *pid = 0;\n }\n \n int\n-__gnat_expect_poll (int *fd, int num_fd, int timeout, int *is_set)\n+__gnat_expect_poll (int *fd ATTRIBUTE_UNUSED,\n+\t\t    int num_fd ATTRIBUTE_UNUSED,\n+\t\t    int timeout ATTRIBUTE_UNUSED,\n+\t\t    int *is_set ATTRIBUTE_UNUSED)\n {\n   return -1;\n }"}, {"sha": "f139d7201deef1fa0b95b8d1aa7eaff45bf99ab2", "filename": "gcc/ada/gsocket.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1d3851bcd7404635a0e04846fac7f1561a6e286/gcc%2Fada%2Fgsocket.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1d3851bcd7404635a0e04846fac7f1561a6e286/gcc%2Fada%2Fgsocket.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgsocket.h?ref=a1d3851bcd7404635a0e04846fac7f1561a6e286", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                              C Header File                               *\n  *                                                                          *\n- *         Copyright (C) 2004-2012, Free Software Foundation, Inc.          *\n+ *         Copyright (C) 2004-2014, Free Software Foundation, Inc.          *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -29,9 +29,10 @@\n  *                                                                          *\n  ****************************************************************************/\n \n-#if defined(__nucleus__) || defined(VTHREADS) || defined(__ANDROID__)\n+#if defined(__nucleus__) || defined(VTHREADS) || defined(__ANDROID__) \\\n+  || defined(__PikeOS__)\n \n-#warning Sockets not supported on these platforms\n+/* Sockets not supported on these platforms.  */\n #undef HAVE_SOCKETS\n \n #else"}, {"sha": "014f114bc720065d8dd7ff94394ff6a3ef57143f", "filename": "gcc/ada/s-os_lib.ads", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1d3851bcd7404635a0e04846fac7f1561a6e286/gcc%2Fada%2Fs-os_lib.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1d3851bcd7404635a0e04846fac7f1561a6e286/gcc%2Fada%2Fs-os_lib.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-os_lib.ads?ref=a1d3851bcd7404635a0e04846fac7f1561a6e286", "patch": "@@ -522,10 +522,6 @@ package System.OS_Lib is\n    --  contains the name of the file to which it is linked. Symbolic links may\n    --  span file systems and may refer to directories.\n \n-   S_Owner  : constant := 1;\n-   S_Group  : constant := 2;\n-   S_Others : constant := 4;\n-\n    procedure Set_Writable (Name : String);\n    --  Change permissions on the named file to make it writable for its owner\n \n@@ -537,8 +533,15 @@ package System.OS_Lib is\n    --  This renaming is provided for backwards compatibility with previous\n    --  versions. The use of Set_Non_Writable is preferred (clearer name).\n \n+   S_Owner  : constant := 1;\n+   S_Group  : constant := 2;\n+   S_Others : constant := 4;\n+   --  Constants for use in Mode parameter to Set_Executable\n+\n    procedure Set_Executable (Name : String; Mode : Positive := S_Owner);\n-   --  Change permissions on the named file to make it executable for its owner\n+   --  Change permissions on the file given by Name to make it executable\n+   --  for its owner, group or others, according to the setting of Mode.\n+   --  As indicated, the default if no Mode parameter is given is owner.\n \n    procedure Set_Readable (Name : String);\n    --  Change permissions on the named file to make it readable for its"}, {"sha": "1de265de432ed4bf6cfe12ed2139f61005bf6d99", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1d3851bcd7404635a0e04846fac7f1561a6e286/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1d3851bcd7404635a0e04846fac7f1561a6e286/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=a1d3851bcd7404635a0e04846fac7f1561a6e286", "patch": "@@ -10687,8 +10687,7 @@ package body Sem_Attr is\n \n                HB :=\n                  Make_Attribute_Reference (Loc,\n-                   Prefix         =>\n-                     Duplicate_Subexpr (P, Name_Req => True),\n+                   Prefix         => Duplicate_Subexpr (P, Name_Req => True),\n                    Attribute_Name => Name_Last,\n                    Expressions    => Dims);\n "}, {"sha": "ab5368f6d0c2e7aaa5f75d8bff54f0c134d3ada3", "filename": "gcc/ada/socket.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1d3851bcd7404635a0e04846fac7f1561a6e286/gcc%2Fada%2Fsocket.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1d3851bcd7404635a0e04846fac7f1561a6e286/gcc%2Fada%2Fsocket.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsocket.c?ref=a1d3851bcd7404635a0e04846fac7f1561a6e286", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *          Copyright (C) 2003-2012, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 2003-2014, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -689,6 +689,4 @@ __gnat_servent_s_proto (struct servent * s)\n   return s->s_proto;\n }\n \n-#else\n-# warning Sockets are not supported on this platform\n #endif /* defined(HAVE_SOCKETS) */"}, {"sha": "43550cd894b7071e063ed564f87498afab30000a", "filename": "gcc/ada/sysdep.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1d3851bcd7404635a0e04846fac7f1561a6e286/gcc%2Fada%2Fsysdep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1d3851bcd7404635a0e04846fac7f1561a6e286/gcc%2Fada%2Fsysdep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsysdep.c?ref=a1d3851bcd7404635a0e04846fac7f1561a6e286", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *         Copyright (C) 1992-2013, Free Software Foundation, Inc.          *\n+ *         Copyright (C) 1992-2014, Free Software Foundation, Inc.          *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -314,7 +314,7 @@ getc_immediate_common (FILE *stream,\n                        int *ch,\n                        int *end_of_file,\n                        int *avail,\n-                       int waiting)\n+                       int waiting ATTRIBUTE_UNUSED)\n {\n #if defined (linux) || defined (sun) \\\n     || defined (__CYGWIN32__) || defined (__MACHTEN__) || defined (__hpux__) \\\n@@ -785,9 +785,11 @@ extern void\n __gnat_localtime_tzoff (const time_t *, const int *, long *);\n \n void\n-__gnat_localtime_tzoff (const time_t *timer, const int *is_historic, long *off)\n+__gnat_localtime_tzoff (const time_t *timer ATTRIBUTE_UNUSED,\n+\t\t\tconst int *is_historic ATTRIBUTE_UNUSED,\n+\t\t\tlong *off ATTRIBUTE_UNUSED)\n {\n-  struct tm tp;\n+  struct tm tp ATTRIBUTE_UNUSED;\n \n /* AIX, HPUX, Sun Solaris */\n #if defined (_AIX) || defined (__hpux__) || defined (sun)\n@@ -853,8 +855,8 @@ __gnat_localtime_tzoff (const time_t *timer, const int *is_historic, long *off)\n /* Darwin, Free BSD, Linux, where component tm_gmtoff is present in\n    struct tm */\n \n-#elif defined (__APPLE__) || defined (__FreeBSD__) || defined (linux) ||\\\n-     defined (__GLIBC__)\n+#elif defined (__APPLE__) || defined (__FreeBSD__) || defined (linux) \\\n+  || defined (__GLIBC__)\n {\n   localtime_r (timer, &tp);\n   *off = tp.tm_gmtoff;"}, {"sha": "a46e610fbb2acd103b1c678240e28c58f64f4b98", "filename": "gcc/ada/terminals.c", "status": "modified", "additions": 106, "deletions": 22, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1d3851bcd7404635a0e04846fac7f1561a6e286/gcc%2Fada%2Fterminals.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1d3851bcd7404635a0e04846fac7f1561a6e286/gcc%2Fada%2Fterminals.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fterminals.c?ref=a1d3851bcd7404635a0e04846fac7f1561a6e286", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *                     Copyright (C) 2008-2013, AdaCore                     *\n+ *                     Copyright (C) 2008-2014, AdaCore                     *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -31,27 +31,111 @@\n \n /* First all usupported platforms. Add stubs for exported routines. */\n \n-#if defined (VMS) || defined (__vxworks) || defined (__Lynx__) || \\\n-    defined (__ANDROID__)\n-\n-void * __gnat_new_tty (void) { return (void*)0; }\n-char * __gnat_tty_name (void* t) { return (char*)0; }\n-int    __gnat_interrupt_pid (int pid) { return -1; }\n-int    __gnat_interrupt_process (void* desc) { return -1; }\n-int    __gnat_setup_communication (void** desc) { return -1; }\n-void   __gnat_setup_parent_communication\n-         (void* d, int* i, int* o, int*e, int*p) { return -1; }\n-int    __gnat_setup_child_communication\n-         (void* d, char **n, int u) { return -1; }\n-int    __gnat_terminate_process (void *desc) { return -1; }\n-int    __gnat_tty_fd (void* t) { return -1; }\n-int    __gnat_tty_supported (void) { return 0; }\n-int    __gnat_tty_waitpid (void *desc) { return 1; }\n-void   __gnat_close_tty (void* t) {}\n-void   __gnat_free_process (void** process) {}\n-void   __gnat_reset_tty (void* t) {}\n-void   __gnat_send_header (void* d, char h[5], int s, int *r) {}\n-void   __gnat_setup_winsize (void *desc, int rows, int columns) {}\n+#if defined (VMS) || defined (__vxworks) || defined (__Lynx__) \\\n+  || defined (__ANDROID__) || defined (__PikeOS__)\n+\n+#define ATTRIBUTE_UNUSED __attribute__((unused))\n+\n+void *\n+__gnat_new_tty (void)\n+{\n+  return (void*)0;\n+}\n+\n+char *\n+__gnat_tty_name (void* t ATTRIBUTE_UNUSED)\n+{\n+  return (char*)0;\n+}\n+\n+int\n+__gnat_interrupt_pid (int pid ATTRIBUTE_UNUSED)\n+{\n+  return -1;\n+}\n+\n+int\n+__gnat_interrupt_process (void* desc ATTRIBUTE_UNUSED)\n+{\n+  return -1;\n+}\n+\n+int\n+__gnat_setup_communication (void** desc ATTRIBUTE_UNUSED)\n+{\n+  return -1;\n+}\n+\n+void\n+__gnat_setup_parent_communication (void *d ATTRIBUTE_UNUSED,\n+\t\t\t\t   int *i ATTRIBUTE_UNUSED,\n+\t\t\t\t   int *o ATTRIBUTE_UNUSED,\n+\t\t\t\t   int *e ATTRIBUTE_UNUSED,\n+\t\t\t\t   int *p ATTRIBUTE_UNUSED)\n+{\n+}\n+\n+int\n+__gnat_setup_child_communication (void *d ATTRIBUTE_UNUSED,\n+\t\t\t\t  char **n ATTRIBUTE_UNUSED,\n+\t\t\t\t  int u ATTRIBUTE_UNUSED)\n+{\n+  return -1;\n+}\n+\n+int\n+__gnat_terminate_process (void *desc ATTRIBUTE_UNUSED)\n+{\n+  return -1;\n+}\n+\n+int\n+__gnat_tty_fd (void* t ATTRIBUTE_UNUSED)\n+{\n+  return -1;\n+}\n+\n+int\n+__gnat_tty_supported (void)\n+{\n+  return 0;\n+}\n+\n+int\n+__gnat_tty_waitpid (void *desc ATTRIBUTE_UNUSED)\n+{\n+  return 1;\n+}\n+\n+void\n+__gnat_close_tty (void* t ATTRIBUTE_UNUSED)\n+{\n+}\n+\n+void\n+__gnat_free_process (void** process ATTRIBUTE_UNUSED)\n+{\n+}\n+\n+void\n+__gnat_reset_tty (void* t ATTRIBUTE_UNUSED)\n+{\n+}\n+\n+void\n+__gnat_send_header (void* d ATTRIBUTE_UNUSED,\n+\t\t    char h[5] ATTRIBUTE_UNUSED,\n+\t\t    int s ATTRIBUTE_UNUSED,\n+\t\t    int *r ATTRIBUTE_UNUSED)\n+{\n+}\n+\n+void\n+__gnat_setup_winsize (void *desc ATTRIBUTE_UNUSED,\n+\t\t      int rows ATTRIBUTE_UNUSED,\n+\t\t      int columns ATTRIBUTE_UNUSED)\n+{\n+}\n \n /* For Windows platforms. */\n "}]}