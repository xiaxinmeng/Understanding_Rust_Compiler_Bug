{"sha": "bf8e1b52f72d079d99173a6742f0070c632cc736", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY4ZTFiNTJmNzJkMDc5ZDk5MTczYTY3NDJmMDA3MGM2MzJjYzczNg==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2015-11-26T09:46:34Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2015-11-26T09:46:34Z"}, "message": "[AArch64] Update patterns to support FP zero\n\n2015-11-26  Wilco Dijkstra  <wdijkstr@arm.com>\n\n\t* config/aarch64/aarch64.md (cbranch<mode>4): Use\n\taarch64_fp_compare_operand.\n\t(store_pairsf): Use aarch64_reg_or_fp_zero.\n\t(store_pairdf): Likewise.\n\t(cstore<mode>4): Use aarch64_fp_compare_operand.\n\t(cmov<mode>6): Likewise.\n\t* config/aarch64/aarch64-ldpstp.md: Use aarch64_reg_or_fp_zero.\n\nFrom-SVN: r230927", "tree": {"sha": "da17907000b1c84087aeec034e4b9291ab1446aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da17907000b1c84087aeec034e4b9291ab1446aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf8e1b52f72d079d99173a6742f0070c632cc736", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf8e1b52f72d079d99173a6742f0070c632cc736", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf8e1b52f72d079d99173a6742f0070c632cc736", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf8e1b52f72d079d99173a6742f0070c632cc736/comments", "author": null, "committer": null, "parents": [{"sha": "0e65fd7d19474884af3eb6f1a7a3f15d856f9cf8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e65fd7d19474884af3eb6f1a7a3f15d856f9cf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e65fd7d19474884af3eb6f1a7a3f15d856f9cf8"}], "stats": {"total": 36, "additions": 23, "deletions": 13}, "files": [{"sha": "56dd588c52e8002a22b7e036711ee2aa659e1ca4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf8e1b52f72d079d99173a6742f0070c632cc736/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf8e1b52f72d079d99173a6742f0070c632cc736/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bf8e1b52f72d079d99173a6742f0070c632cc736", "patch": "@@ -1,3 +1,13 @@\n+2015-11-26  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* config/aarch64/aarch64.md (cbranch<mode>4): Use\n+\taarch64_fp_compare_operand.\n+\t(store_pairsf): Use aarch64_reg_or_fp_zero.\n+\t(store_pairdf): Likewise.\n+\t(cstore<mode>4): Use aarch64_fp_compare_operand.\n+\t(cmov<mode>6): Likewise.\n+\t* config/aarch64/aarch64-ldpstp.md: Use aarch64_reg_or_fp_zero.\n+\n 2015-11-25  Aditya Kumar  <aditya.k7@samsung.com>\n \t    Sebastian Pop  <s.pop@samsung.com>\n "}, {"sha": "3f88703eabdbe635b71b71853b132deeeaf38fc7", "filename": "gcc/config/aarch64/aarch64-ldpstp.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf8e1b52f72d079d99173a6742f0070c632cc736/gcc%2Fconfig%2Faarch64%2Faarch64-ldpstp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf8e1b52f72d079d99173a6742f0070c632cc736/gcc%2Fconfig%2Faarch64%2Faarch64-ldpstp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-ldpstp.md?ref=bf8e1b52f72d079d99173a6742f0070c632cc736", "patch": "@@ -80,9 +80,9 @@\n \n (define_peephole2\n   [(set (match_operand:GPF 0 \"aarch64_mem_pair_operand\" \"\")\n-\t(match_operand:GPF 1 \"register_operand\" \"\"))\n+\t(match_operand:GPF 1 \"aarch64_reg_or_fp_zero\" \"\"))\n    (set (match_operand:GPF 2 \"memory_operand\" \"\")\n-\t(match_operand:GPF 3 \"register_operand\" \"\"))]\n+\t(match_operand:GPF 3 \"aarch64_reg_or_fp_zero\" \"\"))]\n   \"aarch64_operands_ok_for_ldpstp (operands, false, <MODE>mode)\"\n   [(parallel [(set (match_dup 0) (match_dup 1))\n \t      (set (match_dup 2) (match_dup 3))])]\n@@ -349,13 +349,13 @@\n (define_peephole2\n   [(match_scratch:DI 8 \"r\")\n    (set (match_operand:GPF 0 \"memory_operand\" \"\")\n-\t(match_operand:GPF 1 \"aarch64_reg_or_zero\" \"\"))\n+\t(match_operand:GPF 1 \"aarch64_reg_or_fp_zero\" \"\"))\n    (set (match_operand:GPF 2 \"memory_operand\" \"\")\n-\t(match_operand:GPF 3 \"aarch64_reg_or_zero\" \"\"))\n+\t(match_operand:GPF 3 \"aarch64_reg_or_fp_zero\" \"\"))\n    (set (match_operand:GPF 4 \"memory_operand\" \"\")\n-\t(match_operand:GPF 5 \"aarch64_reg_or_zero\" \"\"))\n+\t(match_operand:GPF 5 \"aarch64_reg_or_fp_zero\" \"\"))\n    (set (match_operand:GPF 6 \"memory_operand\" \"\")\n-\t(match_operand:GPF 7 \"aarch64_reg_or_zero\" \"\"))\n+\t(match_operand:GPF 7 \"aarch64_reg_or_fp_zero\" \"\"))\n    (match_dup 8)]\n   \"aarch64_operands_adjust_ok_for_ldpstp (operands, false, <MODE>mode)\"\n   [(const_int 0)]"}, {"sha": "64a40ae3175f4c278b0170c00f26db31aa244e25", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf8e1b52f72d079d99173a6742f0070c632cc736/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf8e1b52f72d079d99173a6742f0070c632cc736/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=bf8e1b52f72d079d99173a6742f0070c632cc736", "patch": "@@ -247,7 +247,7 @@\n (define_expand \"cbranch<mode>4\"\n   [(set (pc) (if_then_else (match_operator 0 \"aarch64_comparison_operator\"\n \t\t\t    [(match_operand:GPF 1 \"register_operand\" \"\")\n-\t\t\t     (match_operand:GPF 2 \"aarch64_reg_or_zero\" \"\")])\n+\t\t\t     (match_operand:GPF 2 \"aarch64_fp_compare_operand\" \"\")])\n \t\t\t   (label_ref (match_operand 3 \"\" \"\"))\n \t\t\t   (pc)))]\n   \"\"\n@@ -1382,9 +1382,9 @@\n ;; fairly lax checking on the second memory operation.\n (define_insn \"store_pairsf\"\n   [(set (match_operand:SF 0 \"aarch64_mem_pair_operand\" \"=Ump,Ump\")\n-\t(match_operand:SF 1 \"register_operand\" \"w,*r\"))\n+\t(match_operand:SF 1 \"aarch64_reg_or_fp_zero\" \"w,*rY\"))\n    (set (match_operand:SF 2 \"memory_operand\" \"=m,m\")\n-\t(match_operand:SF 3 \"register_operand\" \"w,*r\"))]\n+\t(match_operand:SF 3 \"aarch64_reg_or_fp_zero\" \"w,*rY\"))]\n   \"rtx_equal_p (XEXP (operands[2], 0),\n \t\tplus_constant (Pmode,\n \t\t\t       XEXP (operands[0], 0),\n@@ -1398,9 +1398,9 @@\n \n (define_insn \"store_pairdf\"\n   [(set (match_operand:DF 0 \"aarch64_mem_pair_operand\" \"=Ump,Ump\")\n-\t(match_operand:DF 1 \"register_operand\" \"w,*r\"))\n+\t(match_operand:DF 1 \"aarch64_reg_or_fp_zero\" \"w,*rY\"))\n    (set (match_operand:DF 2 \"memory_operand\" \"=m,m\")\n-\t(match_operand:DF 3 \"register_operand\" \"w,*r\"))]\n+\t(match_operand:DF 3 \"aarch64_reg_or_fp_zero\" \"w,*rY\"))]\n   \"rtx_equal_p (XEXP (operands[2], 0),\n \t\tplus_constant (Pmode,\n \t\t\t       XEXP (operands[0], 0),\n@@ -2947,7 +2947,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(match_operator:SI 1 \"aarch64_comparison_operator\"\n \t [(match_operand:GPF 2 \"register_operand\" \"\")\n-\t  (match_operand:GPF 3 \"register_operand\" \"\")]))]\n+\t  (match_operand:GPF 3 \"aarch64_fp_compare_operand\" \"\")]))]\n   \"\"\n   \"\n   operands[2] = aarch64_gen_compare_reg (GET_CODE (operands[1]), operands[2],\n@@ -3051,7 +3051,7 @@\n \t(if_then_else:GPF\n \t (match_operator 1 \"aarch64_comparison_operator\"\n \t  [(match_operand:GPF 2 \"register_operand\" \"\")\n-\t   (match_operand:GPF 3 \"register_operand\" \"\")])\n+\t   (match_operand:GPF 3 \"aarch64_fp_compare_operand\" \"\")])\n \t (match_operand:GPF 4 \"register_operand\" \"\")\n \t (match_operand:GPF 5 \"register_operand\" \"\")))]\n   \"\""}]}