{"sha": "27a1a1c641da072703e535791700c8c58b6a2af0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdhMWExYzY0MWRhMDcyNzAzZTUzNTc5MTcwMGM4YzU4YjZhMmFmMA==", "commit": {"author": {"name": "Daniel Jacobowitz", "email": "drow@mvista.com", "date": "2003-08-27T19:14:13Z"}, "committer": {"name": "Daniel Jacobowitz", "email": "drow@gcc.gnu.org", "date": "2003-08-27T19:14:13Z"}, "message": "* config/no-executables.m4: New file.\n\nFrom-SVN: r70855", "tree": {"sha": "347e652f15e0ac58a263eacf52a8de1fbd0c2b0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/347e652f15e0ac58a263eacf52a8de1fbd0c2b0c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27a1a1c641da072703e535791700c8c58b6a2af0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27a1a1c641da072703e535791700c8c58b6a2af0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27a1a1c641da072703e535791700c8c58b6a2af0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27a1a1c641da072703e535791700c8c58b6a2af0/comments", "author": null, "committer": null, "parents": [{"sha": "92eabea208c3d09e0234cd32db064d6e1d5fac7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92eabea208c3d09e0234cd32db064d6e1d5fac7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92eabea208c3d09e0234cd32db064d6e1d5fac7b"}], "stats": {"total": 65, "additions": 65, "deletions": 0}, "files": [{"sha": "f8799277cc6ca09cbf3ad2abc1bde20302bd8c84", "filename": "ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a1a1c641da072703e535791700c8c58b6a2af0/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a1a1c641da072703e535791700c8c58b6a2af0/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=27a1a1c641da072703e535791700c8c58b6a2af0", "patch": "@@ -1,3 +1,7 @@\n+2003-08-27  Daniel Jacobowitz  <drow@mvista.com>\n+\n+\t* config/no-executables.m4: New file.\n+\n 2003-08-23  Marek Michalkiewicz  <marekm@amelek.gda.pl>\n \n \t* MAINTAINERS: Update my email address."}, {"sha": "ca26b7112c6fce392f101289d5d3985a39f40e10", "filename": "config/no-executables.m4", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a1a1c641da072703e535791700c8c58b6a2af0/config%2Fno-executables.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a1a1c641da072703e535791700c8c58b6a2af0/config%2Fno-executables.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fno-executables.m4?ref=27a1a1c641da072703e535791700c8c58b6a2af0", "patch": "@@ -0,0 +1,61 @@\n+# GCC_NO_EXECUTABLES\n+# -----------------\n+# FIXME: The GCC team has specific needs which the current Autoconf\n+# framework cannot solve elegantly.  This macro implements a dirty\n+# hack until Autoconf is able to provide the services its users\n+# need.\n+#\n+# Several of the support libraries that are often built with GCC can't\n+# assume the tool-chain is already capable of linking a program: the\n+# compiler often expects to be able to link with some of such\n+# libraries.\n+#\n+# In several of these libraries, workarounds have been introduced to\n+# avoid the AC_PROG_CC_WORKS test, that would just abort their\n+# configuration.  The introduction of AC_EXEEXT, enabled either by\n+# libtool or by CVS autoconf, have just made matters worse.\n+#\n+# Unlike the previous AC_NO_EXECUTABLES, this test does not\n+# disable link tests at autoconf time, but at configure time.\n+# This allows AC_NO_EXECUTABLES to be invoked conditionally.\n+AC_DEFUN_ONCE([GCC_NO_EXECUTABLES],\n+[m4_divert_push([KILL])\n+\n+AC_BEFORE([$0], [_AC_COMPILER_EXEEXT])\n+AC_BEFORE([$0], [AC_LINK_IFELSE])\n+\n+m4_define([_AC_COMPILER_EXEEXT],\n+AC_LANG_CONFTEST([AC_LANG_PROGRAM()])\n+# FIXME: Cleanup?\n+AS_IF([AC_TRY_EVAL(ac_link)], [gcc_no_link=no], [gcc_no_link=yes])\n+if test x$gcc_no_link = xyes; then\n+  # Setting cross_compile will disable run tests; it will\n+  # also disable AC_CHECK_FILE but that's generally\n+  # correct if we can't link.\n+  cross_compiling=yes\n+  EXEEXT=\n+else\n+  m4_defn([_AC_COMPILER_EXEEXT])dnl\n+fi\n+)\n+\n+m4_define([AC_LINK_IFELSE],\n+if test x$gcc_no_link = xyes; then\n+  AC_MSG_ERROR([Link tests are not allowed after [[$0]].])\n+fi\n+m4_defn([AC_LINK_IFELSE]))\n+\n+dnl This is a shame.  We have to provide a default for some link tests,\n+dnl similar to the default for run tests.\n+m4_define([AC_FUNC_MMAP],\n+if test x$gcc_no_link = xyes; then\n+  if test \"x${ac_cv_func_mmap_fixed_mapped+set}\" != xset; then\n+    ac_cv_func_mmap_fixed_mapped=no\n+  fi\n+fi\n+if test \"x${ac_cv_func_mmap_fixed_mapped+set}\" != xset; then\n+  m4_defn([AC_FUNC_MMAP])\n+fi)\n+\n+m4_divert_pop()dnl\n+])# GCC_NO_EXECUTABLES"}]}