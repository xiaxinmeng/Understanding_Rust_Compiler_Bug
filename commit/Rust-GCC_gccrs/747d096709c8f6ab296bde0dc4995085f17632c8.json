{"sha": "747d096709c8f6ab296bde0dc4995085f17632c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQ3ZDA5NjcwOWM4ZjZhYjI5NmJkZTBkYzQ5OTUwODVmMTc2MzJjOA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2002-08-22T20:06:01Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-08-22T20:06:01Z"}, "message": "Makefile.am (check-abi): New rule.\n\n\n2002-08-22  Benjamin Kosnik  <bkoz@redhat.com>\n\t    Phil Edwards  <pme@gcc.gnu.org>\n\t    Ulrich Drepper  <drepper@redhat.com>\n\n\t* Makefile.am (check-abi): New rule.\n\t* Makefile.in: Regenerate.\n\t* acinclude.m4 (GLIBCPP_CONFIGURE_TESTSUITE): Export baseline_file.\n\t* aclocal.m4: Regenerate.\n\t* configure: Regenerate.\n\t* testsuite/Makefile.am (noinst_PROGRAMS): Add abi_check.\n\t(abi_check_SOURCES): Add.\n\t* testsuite/Makefile.in: Regenerate.\n\t* testsuite/abi_check.cc: New file.\n\t* config/abi: Add.\n\t* config/abi/i686-pc-linux-gnu: Add.\n\t* config/abi/i686-pc-linux-gnu/baseline_symbols.txt: New file.\n\nCo-Authored-By: Phil Edwards <pme@gcc.gnu.org>\nCo-Authored-By: Ulrich Drepper <drepper@redhat.com>\n\nFrom-SVN: r56515", "tree": {"sha": "34fa1db058806922836448134a99ca23f8a44849", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34fa1db058806922836448134a99ca23f8a44849"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/747d096709c8f6ab296bde0dc4995085f17632c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/747d096709c8f6ab296bde0dc4995085f17632c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/747d096709c8f6ab296bde0dc4995085f17632c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/747d096709c8f6ab296bde0dc4995085f17632c8/comments", "author": null, "committer": null, "parents": [{"sha": "a976230b4266f642a33045088335f26dec221aec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a976230b4266f642a33045088335f26dec221aec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a976230b4266f642a33045088335f26dec221aec"}], "stats": {"total": 3583, "additions": 3535, "deletions": 48}, "files": [{"sha": "b2f277a194dbc469c61e570e08818a6bd606d8cb", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/747d096709c8f6ab296bde0dc4995085f17632c8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/747d096709c8f6ab296bde0dc4995085f17632c8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=747d096709c8f6ab296bde0dc4995085f17632c8", "patch": "@@ -1,3 +1,20 @@\n+2002-08-22  Benjamin Kosnik  <bkoz@redhat.com>\n+\t    Phil Edwards  <pme@gcc.gnu.org>\n+\t    Ulrich Drepper  <drepper@redhat.com>\n+\t\n+\t* Makefile.am (check-abi): New rule.\n+\t* Makefile.in: Regenerate.\n+\t* acinclude.m4 (GLIBCPP_CONFIGURE_TESTSUITE): Export baseline_file.\n+\t* aclocal.m4: Regenerate.\n+\t* configure: Regenerate.\n+\t* testsuite/Makefile.am (noinst_PROGRAMS): Add abi_check.\n+\t(abi_check_SOURCES): Add.\n+\t* testsuite/Makefile.in: Regenerate.\t\n+\t* testsuite/abi_check.cc: New file.\n+\t* config/abi: Add.\n+\t* config/abi/i686-pc-linux-gnu: Add.\n+\t* config/abi/i686-pc-linux-gnu/baseline_symbols.txt: New file.\n+\t\n 2002-08-19  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* configure.in (libtool_VERSION): Update to 5:1:0."}, {"sha": "99d9c731e1cc22960603729c6f2750d500012208", "filename": "libstdc++-v3/Makefile.am", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/747d096709c8f6ab296bde0dc4995085f17632c8/libstdc%2B%2B-v3%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/747d096709c8f6ab296bde0dc4995085f17632c8/libstdc%2B%2B-v3%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.am?ref=747d096709c8f6ab296bde0dc4995085f17632c8", "patch": "@@ -46,6 +46,11 @@ check-script-install: $(top_builddir)/mkcheck\n \t  cd testsuite; \\\n \t  @glibcpp_builddir@/mkcheck 1)\n \n+baseline_file = @baseline_file@\n+check-abi: $(top_builddir)/testsuite/abi_check\n+\t-(cd testsuite; \\\n+\t  abi_check @baseline_file@)\n+\n # These rules are messy, but are hella worth it.\n doxygen:\n \t-(srcdir=`cd ${top_srcdir}; ${PWD}`; \\"}, {"sha": "08b6181297d7cf6ecf5587978445f2dcb4e92784", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/747d096709c8f6ab296bde0dc4995085f17632c8/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/747d096709c8f6ab296bde0dc4995085f17632c8/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=747d096709c8f6ab296bde0dc4995085f17632c8", "patch": "@@ -141,6 +141,8 @@ mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n \n PWD = $${PWDCMD-pwd}\n \n+baseline_file = @baseline_file@\n+\n # Multilib support.\n MAKEOVERRIDES = \n \n@@ -482,6 +484,9 @@ check-script-install: $(top_builddir)/mkcheck\n \t-(chmod + $(top_builddir)/mkcheck; \\\n \t  cd testsuite; \\\n \t  @glibcpp_builddir@/mkcheck 1)\n+check-abi: $(top_builddir)/testsuite/abi_check\n+\t-(cd testsuite; \\\n+\t  abi_check @baseline_file@)\n \n # These rules are messy, but are hella worth it.\n doxygen:"}, {"sha": "1bc49fc8ac8ccf35b7a880e6e66b70438dabbf49", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/747d096709c8f6ab296bde0dc4995085f17632c8/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/747d096709c8f6ab296bde0dc4995085f17632c8/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=747d096709c8f6ab296bde0dc4995085f17632c8", "patch": "@@ -2026,6 +2026,10 @@ AC_DEFUN(GLIBCPP_CONFIGURE_TESTSUITE, [\n \n   # Look for setenv, so that extended locale tests can be performed.\n   GLIBCPP_CHECK_STDLIB_DECL_AND_LINKAGE_3(setenv)\n+\n+  # Export file names for ABI checking.\n+  baseline_file=\"${glibcpp_srcdir}/config/abi/${target_alias}/baseline_symbols.txt\"\n+  AC_SUBST(baseline_file)\n ])\n \n "}, {"sha": "1595c2b512816be6d1a36d24defdaa7b682e22b9", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/747d096709c8f6ab296bde0dc4995085f17632c8/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/747d096709c8f6ab296bde0dc4995085f17632c8/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=747d096709c8f6ab296bde0dc4995085f17632c8", "patch": "@@ -2038,6 +2038,10 @@ AC_DEFUN(GLIBCPP_CONFIGURE_TESTSUITE, [\n \n   # Look for setenv, so that extended locale tests can be performed.\n   GLIBCPP_CHECK_STDLIB_DECL_AND_LINKAGE_3(setenv)\n+\n+  # Export file names for ABI checking.\n+  baseline_file=\"${glibcpp_srcdir}/config/abi/${target_alias}/baseline_symbols.txt\"\n+  AC_SUBST(baseline_file)\n ])\n \n "}, {"sha": "be8fc9b94d113864ba1b4f9dcff1a34800e2f785", "filename": "libstdc++-v3/config/abi/i686-pc-linux-gnu/baseline_symbols.txt", "status": "added", "additions": 3031, "deletions": 0, "changes": 3031, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/747d096709c8f6ab296bde0dc4995085f17632c8/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fi686-pc-linux-gnu%2Fbaseline_symbols.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/747d096709c8f6ab296bde0dc4995085f17632c8/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fi686-pc-linux-gnu%2Fbaseline_symbols.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fi686-pc-linux-gnu%2Fbaseline_symbols.txt?ref=747d096709c8f6ab296bde0dc4995085f17632c8"}, {"sha": "aa86ebaa763341b780e5fbeed6d4e3bc8062eece", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/747d096709c8f6ab296bde0dc4995085f17632c8/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/747d096709c8f6ab296bde0dc4995085f17632c8/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=747d096709c8f6ab296bde0dc4995085f17632c8", "patch": "@@ -22080,6 +22080,10 @@ done\n   fi\n \n \n+  # Export file names for ABI checking.\n+  baseline_file=\"${glibcpp_srcdir}/config/abi/${target_alias}/baseline_symbols.txt\"\n+  \n+\n fi\n \n # This depends on the possibly-skipped linker test above.\n@@ -22109,18 +22113,18 @@ fi\n # Check to see if libgcc_s exists, indicating that shared libgcc is possible.\n if test $enable_symvers != no; then\n   echo $ac_n \"checking for shared libgcc\"\"... $ac_c\" 1>&6\n-echo \"configure:22113: checking for shared libgcc\" >&5\n+echo \"configure:22117: checking for shared libgcc\" >&5\n   ac_save_CFLAGS=\"$CFLAGS\"\n   CFLAGS=' -lgcc_s'\n   cat > conftest.$ac_ext <<EOF\n-#line 22117 \"configure\"\n+#line 22121 \"configure\"\n #include \"confdefs.h\"\n \n int main() {\n return 0\n ; return 0; }\n EOF\n-if { (eval echo configure:22124: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:22128: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   glibcpp_shared_libgcc=yes\n else\n@@ -22155,14 +22159,14 @@ if test $enable_symvers = yes ; then\n       echo 'FOO { global: f[a-z]o; local: *; };' > conftest.map\n       \n       cat > conftest.$ac_ext <<EOF\n-#line 22159 \"configure\"\n+#line 22163 \"configure\"\n #include \"confdefs.h\"\n int foo;\n int main() {\n \n ; return 0; }\n EOF\n-if { (eval echo configure:22166: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:22170: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   enable_symvers=gnu\n else\n@@ -22204,7 +22208,7 @@ else\n   GLIBCPP_BUILD_VERSIONED_SHLIB_FALSE=\n fi\n echo $ac_n \"checking versioning on shared library symbols\"\"... $ac_c\" 1>&6\n-echo \"configure:22208: checking versioning on shared library symbols\" >&5\n+echo \"configure:22212: checking versioning on shared library symbols\" >&5\n echo \"$ac_t\"\"$enable_symvers\" 1>&6\n \n \n@@ -22293,7 +22297,7 @@ glibcpp_prefixdir=${prefix}\n \n # Process the option --with-gxx-include-dir=<path to include-files directory>\n echo $ac_n \"checking for --with-gxx-include-dir\"\"... $ac_c\" 1>&6\n-echo \"configure:22297: checking for --with-gxx-include-dir\" >&5\n+echo \"configure:22301: checking for --with-gxx-include-dir\" >&5\n # Check whether --with-gxx-include-dir or --without-gxx-include-dir was given.\n if test \"${with_gxx_include_dir+set}\" = set; then\n   withval=\"$with_gxx_include_dir\"\n@@ -22317,7 +22321,7 @@ echo \"$ac_t\"\"$gxx_include_dir\" 1>&6\n \n # Process the option \"--enable-version-specific-runtime-libs\"\n echo $ac_n \"checking for --enable-version-specific-runtime-libs\"\"... $ac_c\" 1>&6\n-echo \"configure:22321: checking for --enable-version-specific-runtime-libs\" >&5\n+echo \"configure:22325: checking for --enable-version-specific-runtime-libs\" >&5\n # Check whether --enable-version-specific-runtime-libs or --disable-version-specific-runtime-libs was given.\n if test \"${enable_version_specific_runtime_libs+set}\" = set; then\n   enableval=\"$enable_version_specific_runtime_libs\"\n@@ -22363,7 +22367,7 @@ if test x\"$glibcpp_toolexecdir\" = x\"no\"; then\n fi\n \n echo $ac_n \"checking for install location\"\"... $ac_c\" 1>&6\n-echo \"configure:22367: checking for install location\" >&5\n+echo \"configure:22371: checking for install location\" >&5\n echo \"$ac_t\"\"$gxx_include_dir\" 1>&6\n \n \n@@ -22642,6 +22646,7 @@ s%@SECTION_LDFLAGS@%$SECTION_LDFLAGS%g\n s%@OPT_LDFLAGS@%$OPT_LDFLAGS%g\n s%@LIBMATHOBJS@%$LIBMATHOBJS%g\n s%@WERROR@%$WERROR%g\n+s%@baseline_file@%$baseline_file%g\n s%@GLIBCPP_BUILD_VERSIONED_SHLIB_TRUE@%$GLIBCPP_BUILD_VERSIONED_SHLIB_TRUE%g\n s%@GLIBCPP_BUILD_VERSIONED_SHLIB_FALSE@%$GLIBCPP_BUILD_VERSIONED_SHLIB_FALSE%g\n s%@OS_INC_SRCDIR@%$OS_INC_SRCDIR%g"}, {"sha": "35c7e9076ede85226699c4e95daf7f760d87f9b8", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/747d096709c8f6ab296bde0dc4995085f17632c8/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/747d096709c8f6ab296bde0dc4995085f17632c8/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=747d096709c8f6ab296bde0dc4995085f17632c8", "patch": "@@ -111,6 +111,7 @@ USE_NLS = @USE_NLS@\n VERSION = @VERSION@\n WARN_FLAGS = @WARN_FLAGS@\n WERROR = @WERROR@\n+baseline_file = @baseline_file@\n check_msgfmt = @check_msgfmt@\n enable_shared = @enable_shared@\n enable_static = @enable_static@"}, {"sha": "a5384b89f0423c361417b7f73bd2750c9beb6892", "filename": "libstdc++-v3/libio/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/747d096709c8f6ab296bde0dc4995085f17632c8/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/747d096709c8f6ab296bde0dc4995085f17632c8/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FMakefile.in?ref=747d096709c8f6ab296bde0dc4995085f17632c8", "patch": "@@ -109,6 +109,7 @@ USE_NLS = @USE_NLS@\n VERSION = @VERSION@\n WARN_FLAGS = @WARN_FLAGS@\n WERROR = @WERROR@\n+baseline_file = @baseline_file@\n check_msgfmt = @check_msgfmt@\n enable_shared = @enable_shared@\n enable_static = @enable_static@"}, {"sha": "375b9ad31d44ce1865379746b5105bd2f0f6251c", "filename": "libstdc++-v3/libmath/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/747d096709c8f6ab296bde0dc4995085f17632c8/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/747d096709c8f6ab296bde0dc4995085f17632c8/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in?ref=747d096709c8f6ab296bde0dc4995085f17632c8", "patch": "@@ -111,6 +111,7 @@ USE_NLS = @USE_NLS@\n VERSION = @VERSION@\n WARN_FLAGS = @WARN_FLAGS@\n WERROR = @WERROR@\n+baseline_file = @baseline_file@\n check_msgfmt = @check_msgfmt@\n enable_shared = @enable_shared@\n enable_static = @enable_static@"}, {"sha": "5d0e5d2b628667b02af5289b4b29147181f357c6", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 54, "deletions": 12, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/747d096709c8f6ab296bde0dc4995085f17632c8/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/747d096709c8f6ab296bde0dc4995085f17632c8/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=747d096709c8f6ab296bde0dc4995085f17632c8", "patch": "@@ -107,6 +107,7 @@ USE_NLS = @USE_NLS@\n VERSION = @VERSION@\n WARN_FLAGS = @WARN_FLAGS@\n WERROR = @WERROR@\n+baseline_file = @baseline_file@\n check_msgfmt = @check_msgfmt@\n enable_shared = @enable_shared@\n enable_static = @enable_static@\n@@ -152,28 +153,56 @@ OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n # These bits are all figured out from configure. Look in acinclude.m4\n # or configure.in to see how they are set. See GLIBCPP_EXPORT_FLAGS\n # NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n-CONFIG_CXXFLAGS =  \t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @DEBUG_FLAGS@ \n+CONFIG_CXXFLAGS = \\\n+\t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @DEBUG_FLAGS@ \n \n \n # Warning flags to use.\n-WARN_CXXFLAGS =  \t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n+WARN_CXXFLAGS = \\\n+\t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n \n \n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n GLIBCPP_INCLUDES = @GLIBCPP_INCLUDES@\n LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n GCC_INCLUDES = -I$(toplevel_srcdir)/gcc -I$(toplevel_srcdir)/include\n \n-INCLUDES =  \t$(GCC_INCLUDES) $(GLIBCPP_INCLUDES) $(LIBSUPCXX_INCLUDES)\n+INCLUDES = \\\n+\t$(GCC_INCLUDES) $(GLIBCPP_INCLUDES) $(LIBSUPCXX_INCLUDES)\n \n \n-headers =  \texception new typeinfo cxxabi.h exception_defines.h \n+headers = \\\n+\texception new typeinfo cxxabi.h exception_defines.h \n \n \n-c_sources =  \tcxa_demangle.c \tdyn-string.c \n+c_sources = \\\n+\tcxa_demangle.c \\\n+\tdyn-string.c \n \n \n-sources =  \tdel_op.cc \tdel_opnt.cc \tdel_opv.cc \tdel_opvnt.cc \teh_alloc.cc \teh_aux_runtime.cc \teh_catch.cc \teh_exception.cc \teh_globals.cc \teh_personality.cc \teh_terminate.cc \teh_throw.cc \teh_type.cc \tnew_handler.cc \tnew_op.cc \tnew_opnt.cc \tnew_opv.cc \tnew_opvnt.cc \tpure.cc \ttinfo.cc \ttinfo2.cc \tvec.cc\n+sources = \\\n+\tdel_op.cc \\\n+\tdel_opnt.cc \\\n+\tdel_opv.cc \\\n+\tdel_opvnt.cc \\\n+\teh_alloc.cc \\\n+\teh_aux_runtime.cc \\\n+\teh_catch.cc \\\n+\teh_exception.cc \\\n+\teh_globals.cc \\\n+\teh_personality.cc \\\n+\teh_terminate.cc \\\n+\teh_throw.cc \\\n+\teh_type.cc \\\n+\tnew_handler.cc \\\n+\tnew_op.cc \\\n+\tnew_opnt.cc \\\n+\tnew_opv.cc \\\n+\tnew_opvnt.cc \\\n+\tpure.cc \\\n+\ttinfo.cc \\\n+\ttinfo2.cc \\\n+\tvec.cc\n \n \n libsupc___la_SOURCES = $(sources) $(c_sources)\n@@ -187,19 +216,28 @@ LIBSUPCXX_CXXFLAGS = $(LIBSUPCXX_PICFLAGS)\n # Use special rules for pulling things out of libiberty.  These\n # objects should be compiled with the \"C\" compiler, not the C++\n # compiler, and also should not use the C++ includes.\n-C_COMPILE =  \t$(CC) $(DEFS) $(GCC_INCLUDES) \t$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)\n+C_COMPILE = \\\n+\t$(CC) $(DEFS) $(GCC_INCLUDES) \\\n+\t$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)\n \n \n # LTCOMPILE is copied from LTCXXCOMPILE below.\n-LTCOMPILE = $(LIBTOOL) --tag CC --tag disable-shared --mode=compile $(CC) \t    $(DEFS) $(GCC_INCLUDES) $(LIBSUPCXX_PICFLAGS)             $(AM_CPPFLAGS) $(CPPFLAGS) \n+LTCOMPILE = $(LIBTOOL) --tag CC --tag disable-shared --mode=compile $(CC) \\\n+\t    $(DEFS) $(GCC_INCLUDES) $(LIBSUPCXX_PICFLAGS) \\\n+            $(AM_CPPFLAGS) $(CPPFLAGS) \n \n \n # AM_CXXFLAGS needs to be in each subdirectory so that it can be\n # modified in a per-library or per-sub-library way.  Need to manually\n # set this option because CONFIG_CXXFLAGS has to be after\n # OPTIMIZE_CXXFLAGS on the compile line so that -O2 can be overridden\n # as the occasion call for it. (ie, --enable-debug)\n-AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS) \t$(OPTIMIZE_CXXFLAGS) \t$(CONFIG_CXXFLAGS) \n+AM_CXXFLAGS = \\\n+\t-fno-implicit-templates \\\n+\t$(LIBSUPCXX_CXXFLAGS) \\\n+\t$(WARN_CXXFLAGS) \\\n+\t$(OPTIMIZE_CXXFLAGS) \\\n+\t$(CONFIG_CXXFLAGS) \n \n \n # libstdc++ libtool notes\n@@ -223,7 +261,9 @@ AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS)\n #\n # We have to put --tag disable-shared after --tag CXX lest things\n # CXX undo the affect of disable-shared.\n-LTCXXCOMPILE = $(LIBTOOL) --tag CXX --tag disable-shared                --mode=compile $(CXX) $(INCLUDES) \t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n+LTCXXCOMPILE = $(LIBTOOL) --tag CXX --tag disable-shared \\\n+               --mode=compile $(CXX) $(INCLUDES) \\\n+\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n \n \n # 3) We'd have a problem when building the shared libstdc++ object if\n@@ -232,7 +272,9 @@ LTCXXCOMPILE = $(LIBTOOL) --tag CXX --tag disable-shared                --mode=c\n # course is problematic at this point.  So, we get the top-level\n # directory to configure libstdc++-v3 to use gcc as the C++\n # compilation driver.\n-CXXLINK = $(LIBTOOL) --tag CXX --tag disable-shared           --mode=link $(CXX)           @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n+CXXLINK = $(LIBTOOL) --tag CXX --tag disable-shared \\\n+          --mode=link $(CXX) \\\n+          @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n \n CONFIG_HEADER = ../config.h\n CONFIG_CLEAN_FILES = \n@@ -271,7 +313,7 @@ DIST_COMMON =  Makefile.am Makefile.in\n \n DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)\n \n-TAR = tar\n+TAR = gtar\n GZIP_ENV = --best\n SOURCES = $(libsupc__convenience_la_SOURCES) $(libsupc___la_SOURCES)\n OBJECTS = $(libsupc__convenience_la_OBJECTS) $(libsupc___la_OBJECTS)"}, {"sha": "32259dc1c39fc949698d31938bab89d9dd9b0530", "filename": "libstdc++-v3/po/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/747d096709c8f6ab296bde0dc4995085f17632c8/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/747d096709c8f6ab296bde0dc4995085f17632c8/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpo%2FMakefile.in?ref=747d096709c8f6ab296bde0dc4995085f17632c8", "patch": "@@ -111,6 +111,7 @@ USE_NLS = @USE_NLS@\n VERSION = @VERSION@\n WARN_FLAGS = @WARN_FLAGS@\n WERROR = @WERROR@\n+baseline_file = @baseline_file@\n check_msgfmt = @check_msgfmt@\n enable_shared = @enable_shared@\n enable_static = @enable_static@"}, {"sha": "dc15a6bbc13cb5b9a82121f57cd298f40757afc3", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/747d096709c8f6ab296bde0dc4995085f17632c8/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/747d096709c8f6ab296bde0dc4995085f17632c8/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=747d096709c8f6ab296bde0dc4995085f17632c8", "patch": "@@ -104,6 +104,7 @@ USE_NLS = @USE_NLS@\n VERSION = @VERSION@\n WARN_FLAGS = @WARN_FLAGS@\n WERROR = @WERROR@\n+baseline_file = @baseline_file@\n check_msgfmt = @check_msgfmt@\n enable_shared = @enable_shared@\n enable_static = @enable_static@"}, {"sha": "37e62c50b9bcdbd8ac1b7e8671b679c0753d5545", "filename": "libstdc++-v3/testsuite/Makefile.am", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/747d096709c8f6ab296bde0dc4995085f17632c8/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/747d096709c8f6ab296bde0dc4995085f17632c8/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.am?ref=747d096709c8f6ab296bde0dc4995085f17632c8", "patch": "@@ -36,14 +36,22 @@ RUNTEST = `if [ -f @glibcpp_srcdir@/../dejagnu/runtest ] ; then \\\n AM_RUNTESTFLAGS =\n RUNTESTFLAGS =\n \n-CXX = @glibcpp_CXX@ \n-# Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n+## CXX is actually a \"C\" compiler. These are real C++ programs.\n+## Do the same thing as `testsuite_hooks --build-cxx`\n+CXX_fake = @glibcpp_CXX@ \n+CXX=`echo $(CXX_fake) | sed 's/xgcc/g++/g'`\n+CXXLINK = \\\n+\t$(LIBTOOL) --tag=CXX --mode=link $(CXX) \\\n+\t$(AM_CXXFLAGS) $(CXXFLAGS) $(LDFLAGS) -o $@\n+\n INCLUDES = \\\n \t-nostdinc++ \\\n \t@GLIBCPP_INCLUDES@ @LIBSUPCXX_INCLUDES@ @TOPLEVEL_INCLUDES@ \n \n+## Build support library.\n noinst_LIBRARIES = libv3test.a\n-\n libv3test_a_SOURCES = testsuite_hooks.cc\n \n-\n+## Build support utilities.\n+noinst_PROGRAMS = abi_check\n+abi_check_SOURCES = abi_check.cc"}, {"sha": "22a09a7a83ccf5195ba465a3ebf2cf9c5357a54d", "filename": "libstdc++-v3/testsuite/Makefile.in", "status": "modified", "additions": 52, "deletions": 23, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/747d096709c8f6ab296bde0dc4995085f17632c8/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/747d096709c8f6ab296bde0dc4995085f17632c8/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in?ref=747d096709c8f6ab296bde0dc4995085f17632c8", "patch": "@@ -111,6 +111,7 @@ USE_NLS = @USE_NLS@\n VERSION = @VERSION@\n WARN_FLAGS = @WARN_FLAGS@\n WERROR = @WERROR@\n+baseline_file = @baseline_file@\n check_msgfmt = @check_msgfmt@\n enable_shared = @enable_shared@\n enable_static = @enable_static@\n@@ -148,16 +149,23 @@ RUNTEST = `if [ -f @glibcpp_srcdir@/../dejagnu/runtest ] ; then \\\n AM_RUNTESTFLAGS = \n RUNTESTFLAGS = \n \n-CXX = @glibcpp_CXX@ \n-# Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n+CXX_fake = @glibcpp_CXX@ \n+CXX = `echo $(CXX_fake) | sed 's/xgcc/g++/g'`\n+CXXLINK = \\\n+\t$(LIBTOOL) --tag=CXX --mode=link $(CXX) \\\n+\t$(AM_CXXFLAGS) $(CXXFLAGS) $(LDFLAGS) -o $@\n+\n+\n INCLUDES = \\\n \t-nostdinc++ \\\n \t@GLIBCPP_INCLUDES@ @LIBSUPCXX_INCLUDES@ @TOPLEVEL_INCLUDES@ \n \n \n noinst_LIBRARIES = libv3test.a\n-\n libv3test_a_SOURCES = testsuite_hooks.cc\n+\n+noinst_PROGRAMS = abi_check\n+abi_check_SOURCES = abi_check.cc\n mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs\n CONFIG_HEADER = ../config.h\n CONFIG_CLEAN_FILES = \n@@ -170,20 +178,26 @@ LDFLAGS = @LDFLAGS@\n LIBS = @LIBS@\n libv3test_a_LIBADD = \n libv3test_a_OBJECTS =  testsuite_hooks.$(OBJEXT)\n+noinst_PROGRAMS =  abi_check$(EXEEXT)\n+PROGRAMS =  $(noinst_PROGRAMS)\n+\n+abi_check_OBJECTS =  abi_check.$(OBJEXT)\n+abi_check_LDADD = $(LDADD)\n+abi_check_DEPENDENCIES = \n+abi_check_LDFLAGS = \n CXXFLAGS = @CXXFLAGS@\n CXXCOMPILE = $(CXX) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)\n LTCXXCOMPILE = $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)\n CXXLD = $(CXX)\n-CXXLINK = $(LIBTOOL) --mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(LDFLAGS) -o $@\n DIST_COMMON =  README Makefile.am Makefile.in\n \n \n DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)\n \n TAR = gtar\n GZIP_ENV = --best\n-SOURCES = $(libv3test_a_SOURCES)\n-OBJECTS = $(libv3test_a_OBJECTS)\n+SOURCES = $(libv3test_a_SOURCES) $(abi_check_SOURCES)\n+OBJECTS = $(libv3test_a_OBJECTS) $(abi_check_OBJECTS)\n \n all: all-redirect\n .SUFFIXES:\n@@ -253,6 +267,19 @@ libv3test.a: $(libv3test_a_OBJECTS) $(libv3test_a_DEPENDENCIES)\n \t-rm -f libv3test.a\n \t$(AR) cru libv3test.a $(libv3test_a_OBJECTS) $(libv3test_a_LIBADD)\n \t$(RANLIB) libv3test.a\n+\n+mostlyclean-noinstPROGRAMS:\n+\n+clean-noinstPROGRAMS:\n+\t-test -z \"$(noinst_PROGRAMS)\" || rm -f $(noinst_PROGRAMS)\n+\n+distclean-noinstPROGRAMS:\n+\n+maintainer-clean-noinstPROGRAMS:\n+\n+abi_check$(EXEEXT): $(abi_check_OBJECTS) $(abi_check_DEPENDENCIES)\n+\t@rm -f abi_check$(EXEEXT)\n+\t$(CXXLINK) $(abi_check_LDFLAGS) $(abi_check_OBJECTS) $(abi_check_LDADD) $(LIBS)\n .cc.o:\n \t$(CXXCOMPILE) -c $<\n .cc.obj:\n@@ -360,7 +387,7 @@ install-am: all-am\n install: install-am\n uninstall-am:\n uninstall: uninstall-am\n-all-am: Makefile $(LIBRARIES)\n+all-am: Makefile $(LIBRARIES) $(PROGRAMS)\n all-redirect: all-am\n install-strip:\n \t$(MAKE) $(AM_MAKEFLAGS) AM_INSTALL_PROGRAM_FLAGS=-s install\n@@ -377,27 +404,28 @@ distclean-generic:\n \n maintainer-clean-generic:\n mostlyclean-am:  mostlyclean-noinstLIBRARIES mostlyclean-compile \\\n-\t\tmostlyclean-libtool mostlyclean-tags \\\n-\t\tmostlyclean-generic\n+\t\tmostlyclean-libtool mostlyclean-noinstPROGRAMS \\\n+\t\tmostlyclean-tags mostlyclean-generic\n \n mostlyclean: mostlyclean-am\n \n-clean-am:  clean-noinstLIBRARIES clean-compile clean-libtool clean-tags \\\n-\t\tclean-generic mostlyclean-am\n+clean-am:  clean-noinstLIBRARIES clean-compile clean-libtool \\\n+\t\tclean-noinstPROGRAMS clean-tags clean-generic \\\n+\t\tmostlyclean-am\n \n clean: clean-am\n \n distclean-am:  distclean-noinstLIBRARIES distclean-compile \\\n-\t\tdistclean-libtool distclean-tags distclean-generic \\\n-\t\tclean-am\n+\t\tdistclean-libtool distclean-noinstPROGRAMS \\\n+\t\tdistclean-tags distclean-generic clean-am\n \t-rm -f libtool\n \n distclean: distclean-am\n \n maintainer-clean-am:  maintainer-clean-noinstLIBRARIES \\\n \t\tmaintainer-clean-compile maintainer-clean-libtool \\\n-\t\tmaintainer-clean-tags maintainer-clean-generic \\\n-\t\tdistclean-am\n+\t\tmaintainer-clean-noinstPROGRAMS maintainer-clean-tags \\\n+\t\tmaintainer-clean-generic distclean-am\n \t@echo \"This command is intended for maintainers to use;\"\n \t@echo \"it deletes files that may require special tools to rebuild.\"\n \n@@ -407,14 +435,15 @@ maintainer-clean: maintainer-clean-am\n clean-noinstLIBRARIES maintainer-clean-noinstLIBRARIES \\\n mostlyclean-compile distclean-compile clean-compile \\\n maintainer-clean-compile mostlyclean-libtool distclean-libtool \\\n-clean-libtool maintainer-clean-libtool tags mostlyclean-tags \\\n-distclean-tags clean-tags maintainer-clean-tags distdir check-DEJAGNU \\\n-info-am info dvi-am dvi check check-am installcheck-am installcheck \\\n-install-info-am install-info install-exec-am install-exec \\\n-install-data-am install-data install-am install uninstall-am uninstall \\\n-all-redirect all-am all installdirs mostlyclean-generic \\\n-distclean-generic clean-generic maintainer-clean-generic clean \\\n-mostlyclean distclean maintainer-clean\n+clean-libtool maintainer-clean-libtool mostlyclean-noinstPROGRAMS \\\n+distclean-noinstPROGRAMS clean-noinstPROGRAMS \\\n+maintainer-clean-noinstPROGRAMS tags mostlyclean-tags distclean-tags \\\n+clean-tags maintainer-clean-tags distdir check-DEJAGNU info-am info \\\n+dvi-am dvi check check-am installcheck-am installcheck install-info-am \\\n+install-info install-exec-am install-exec install-data-am install-data \\\n+install-am install uninstall-am uninstall all-redirect all-am all \\\n+installdirs mostlyclean-generic distclean-generic clean-generic \\\n+maintainer-clean-generic clean mostlyclean distclean maintainer-clean\n \n \n # Tell versions [3.59,3.63) of GNU make to not export all variables."}, {"sha": "4f0ce32cfad21d498fae263c560e02f21d04e074", "filename": "libstdc++-v3/testsuite/abi_check.cc", "status": "added", "additions": 332, "deletions": 0, "changes": 332, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/747d096709c8f6ab296bde0dc4995085f17632c8/libstdc%2B%2B-v3%2Ftestsuite%2Fabi_check.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/747d096709c8f6ab296bde0dc4995085f17632c8/libstdc%2B%2B-v3%2Ftestsuite%2Fabi_check.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fabi_check.cc?ref=747d096709c8f6ab296bde0dc4995085f17632c8", "patch": "@@ -0,0 +1,332 @@\n+// Utility for libstdc++ ABI analysis -*- C++ -*-\n+\n+// Copyright (C) 2002 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// Benjamin Kosnik  <bkoz@redhat.com>\n+\n+#include <string>\n+#include <ext/hash_map>\n+#include <deque>\n+#include <sstream>\n+#include <fstream>\n+#include <iostream>\n+#include <cxxabi.h>\n+\n+struct symbol_info\n+{\n+  enum category { none, function, object, error };\n+  category \ttype;\n+  std::string \tname;\n+  std::string \tname_demangled;\n+  std::string \tversion;\n+  int \t\tsize;\n+\n+  symbol_info() : type(none), size(0) { }\n+\n+  symbol_info(const symbol_info& other) \n+  : type(other.type), name(other.name), name_demangled(other.name_demangled), \n+  version(other.version), size(other.size) { }\n+};\n+\n+bool \n+operator==(const symbol_info& lhs, const symbol_info& rhs)\n+{\n+  bool ret = true;\n+\n+  // Check to see if symbol_infos are compatible.\n+  ret &= lhs.type == rhs.type;\n+  ret &= lhs.name == rhs.name;\n+  ret &= lhs.size == rhs.size;\n+\n+  // Expect something more sophisticated eventually.\n+  ret &= lhs.version == rhs.version;\n+  return ret;\n+}\n+\n+bool \n+operator!=(const symbol_info& lhs, const symbol_info& rhs)\n+{ return !(lhs == rhs); }\n+\n+template<typename _CharT, typename _Traits>\n+  std::basic_ostream<_CharT, _Traits>&\n+  operator<<(std::basic_ostream<_CharT, _Traits>& os, symbol_info& si)\n+  {\n+    using namespace std;\n+    os << si.type << endl;\n+    os << si.name << endl;\n+    os << si.name_demangled << endl;\n+    os << si.version << endl;\n+    os << si.size << endl;\n+    return os;\n+  }\n+ \n+const char*\n+demangle(const std::string& mangled)\n+{\n+  const char* name;\n+  if (mangled[0] != '_' && mangled[1] != 'Z')\n+    {\n+      // This is not a mangled symbol, thus has \"C\" linkage.\n+      name = mangled.c_str();\n+    }\n+  else\n+    {\n+      // Use __cxa_demangle to demangle.\n+      int status = 0;\n+      name = abi::__cxa_demangle(mangled.c_str(), 0, 0, &status);\n+      if (!name)\n+\t{\n+\t  switch (status)\n+\t    {\n+\t    case 0:\n+\t      name = \"error code = 0: success\";\n+\t      break;\n+\t    case -1:\n+\t      name = \"error code = -1: memory allocation failure\";\n+\t      break;\n+\t    case -2:\n+\t      name = \"error code = -2: invalid mangled name\";\n+\t      break;\n+\t    case -3:\n+\t      name = \"error code = -3: invalid arguments\";\n+\t      break;\n+\t    default:\n+\t      name = \"error code unknown - who knows what happened\";\n+\t    }\n+\t}\n+    }\n+  return name;\n+}\n+\n+void \n+line_to_symbol_info(std::string& input, symbol_info& output)\n+{\n+  using namespace std;\n+  const char delim = ':';\n+  const char version_delim = '@';\n+  const string::size_type npos = string::npos;\n+  string::size_type n = 0;\n+\n+  // Set the type.\n+  if (input.find(\"FUNC\") == 0)\n+    output.type = symbol_info::function;\n+  else if (input.find(\"OBJECT\") == 0)\n+    output.type = symbol_info::object;\n+  else\n+    output.type = symbol_info::error;\n+  n = input.find_first_of(delim);\n+  if (n != npos)\n+    input.erase(input.begin(), input.begin() + n + 1);\n+\n+  // Iff object, get size info.\n+  if (output.type == symbol_info::object)\n+    {\n+      n = input.find_first_of(delim);\n+      if (n != npos)\n+\t{\n+\t  string size(input.begin(), input.begin() + n);\n+\t  istringstream iss(size);\n+\t  int x;\n+\t  iss >> x;\n+\t  if (iss.good())\n+\t    output.size = x;\n+\t  input.erase(input.begin(), input.begin() + n + 1);\n+\t}\n+    }\n+\n+  // Set the name.\n+  n = input.find_first_of(version_delim);\n+  if (n != npos)\n+    {\n+      // Found version string.\n+      output.name = string(input.begin(), input.begin() + n);\n+      n = input.find_last_of(version_delim);\n+      input.erase(input.begin(), input.begin() + n + 1);\n+\n+      // Set version name.\n+      output.version = input;\n+    }\n+  else\n+    {\n+      // No versioning info.\n+      output.name = string(input.begin(), input.end());\n+      input.erase(input.begin(), input.end());\n+    }\n+\n+  // Set the demangled name.\n+  output.name_demangled = demangle(output.name);\n+}\n+\n+typedef std::deque<std::string>\t\t\t\tsymbol_names;\n+typedef __gnu_cxx::hash_map<const char*, symbol_info> \tsymbol_infos;\n+\n+void\n+collect_symbol_data(const char* file, symbol_infos& symbols, \n+\t\t    symbol_names& names)\n+{\n+  // Parse list of symbols in file into vectors of symbol_info.\n+  // For 3.2.0 on x86/linux, this usually is\n+  // 947 non-weak symbols\n+  // 2084 weak symbols\n+  using namespace std;\n+  ifstream ifs(file); \n+  if (ifs.is_open())\n+    {\n+      // Organize input into container of symbol_info objects.\n+      const string empty;\n+      string line = empty;\n+      while (getline(ifs, line).good())\n+\t{\n+\t  symbol_info symbol;\n+\t  line_to_symbol_info(line, symbol);\n+\t  symbols[symbol.name.c_str()] = symbol;\n+\t  names.push_back(symbol.name);\n+\t  line = empty;\n+\t}\n+    }\n+}\n+\n+\n+int main(int argc, char** argv)\n+{\n+  using namespace std;\n+\n+  // Get arguments.\n+  if (argc != 2)\n+    {\n+      cerr << \"Usage:  abi_check baseline_file\" << endl;\n+      exit(1);\n+    }\n+  const char* baseline_file = argv[1];\n+  const char* test_file = \"current_symbols.txt\";\n+  const char* test_lib = \"../src/.libs/libstdc++.so\";\n+\n+  // Get list of symbols.\n+  // Assume external symbol list computed \"as if\" by\n+  /*\n+   readelf -s -W libstdc++.so | sed '/\\.dynsym/,/^$/p;d' | egrep -v\n+   ' (LOCAL|UND) ' | awk '{ if ($4 == \"FUNC\" || $4 == \"NOTYPE\") printf\n+   \"%s:%s\\n\", $4, $8; else if ($4 == \"OBJECT\") printf \"%s:%s:%s\\n\", $4,\n+   $3, $8;}' | sort >& current_symbols.txt\n+   */\n+  const char quote = '\"';\n+  const char bslash = '\\\\';\n+  ostringstream cmd;\n+  cmd << \"readelf -s -W \" << test_lib << \" | sed '/\" << bslash \n+      << \".dynsym/,/^$/p;d' | egrep -v ' (LOCAL|UND) ' | \"\n+      << \"awk '{ if ($4 == \" << quote << \"FUNC\" << quote << \"|| $4 == \" \n+      << quote << \"NOTYPE\" << quote << \") printf \" << quote << \"%s:%s\"\n+      << bslash << \"n\" << quote << \", $4, $8; else if ($4 == \" \n+      << quote << \"OBJECT\" << quote << \") printf \" << quote\n+      << \"%s:%s:%s\" << bslash << \"n\" << quote << \", $4, $3, $8;}' | \"\n+      << \"sort >& \" << test_file;\n+  if (system(cmd.str().c_str()) != 0)\n+    {\n+      cerr << \"Unable to generate the list of exported symbols.\" << endl;\n+      exit(2);\n+    }\n+\n+  // Input both list of symbols into container.\n+  symbol_infos  baseline_symbols;\n+  symbol_names  baseline_names;\n+  symbol_infos  test_symbols;\n+  symbol_names  test_names;\n+  collect_symbol_data(baseline_file, baseline_symbols, baseline_names);\n+  collect_symbol_data(test_file, test_symbols, test_names);\n+\n+  // Basic sanity check. (Was: error checking, what's that?)\n+  const symbol_names::size_type baseline_size = baseline_names.size();\n+  const symbol_names::size_type test_size = test_names.size();\n+  if (!baseline_size || !test_size)\n+    {\n+      cerr << \"Problems parsing the list of exported symbols.\" << endl;\n+      exit(2);\n+    }\n+\n+  // Sort out names.\n+  // Assuming baseline_names, test_names are both unique w/ no duplicates.\n+  //\n+  // The pairs of names in shared_names are needed to do lookups on\n+  // the hash tables of common symbols to do compares.\n+  //\n+  // The names added to missing_names are baseline_names not found in\n+  // test_names \n+  // -> symbols that have been deleted.\n+  //\n+  // The names left in test_names are names not in baseline_names\n+  // -> symbols that have been added.\n+  typedef pair<string, string> string_pair;\n+  vector<string_pair> shared_names;\n+  symbol_names missing_names;\n+  for (size_t i = 0; i < baseline_size; ++i)\n+    {\n+      symbol_names::iterator end = test_names.end();\n+      symbol_names::iterator it = find(test_names.begin(), end, \n+\t\t\t\t       baseline_names[i]);\n+      if (it != end)\n+\t{\n+\t  // Found.\n+\t  shared_names.push_back(string_pair(baseline_names[i], *it));\n+\t  test_names.erase(it);\n+\t}\n+      else\n+\tmissing_names.push_back(baseline_names[i]);\n+    }\n+\n+  // Check common names for detailed compatibility.\n+  const vector<string_pair>::size_type shared_size = shared_names.size();\n+  typedef pair<symbol_info, symbol_info> symbol_pair;\n+  vector<symbol_pair> incompatible;\n+  for (size_t i = 0; i < shared_size; ++i)\n+    {\n+      symbol_info binfo = baseline_symbols[shared_names[i].first.c_str()];\n+      symbol_info tinfo = test_symbols[shared_names[i].second.c_str()];\n+      if (binfo != tinfo)\n+\tincompatible.push_back(symbol_pair(binfo, tinfo));\n+    }\n+\n+  // Output data.\n+  cout << test_names.size() << \" added symbols \" << endl;\n+  for (size_t j = 0; j < test_names.size() ; ++j)\n+    cout << '\\t' << test_names[j] << endl;\n+\n+  cout << missing_names.size() << \" missing symbols \" << endl;\n+  for (size_t j = 0; j < missing_names.size() ; ++j)\n+    cout << '\\t' << missing_names[j] << endl;\n+\n+  cout << incompatible.size() << \" incompatible symbols \" << endl;\n+  for (size_t j = 0; j < incompatible.size() ; ++j)\n+    {\n+      cout << \"baseline symbol_info:\" << endl;\n+      cout << incompatible[j].first << endl;\n+      cout << \"test symbol_info:\" << endl;\n+      cout << incompatible[j].second << endl;\n+    }\n+\n+  return 0;\n+}"}]}