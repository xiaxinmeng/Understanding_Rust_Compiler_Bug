{"sha": "c6ff1944941b0c7343444ef39d32ce00112173ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzZmZjE5NDQ5NDFiMGM3MzQzNDQ0ZWYzOWQzMmNlMDAxMTIxNzNhZQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-10-05T15:49:39Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-10-05T15:49:39Z"}, "message": "PR libstdc++/11729 (DR 280, [Ready])\n\n2005-10-05  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/11729 (DR 280, [Ready])\n\t* include/bits/stl_iterator.h: Add reverse_iterator global\n\tfunctions with two template parameters (operator==, !=, <,\n\t>, <=, >=, -).\n\t* testsuite/24_iterators/reverse_iterator/11729.cc: New.\n\t* docs/html/ext/howto.html: Add an entry for issue 280.\n\nFrom-SVN: r105000", "tree": {"sha": "cdc0710f99223246209e7540adfe9c8d9412d219", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cdc0710f99223246209e7540adfe9c8d9412d219"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6ff1944941b0c7343444ef39d32ce00112173ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6ff1944941b0c7343444ef39d32ce00112173ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6ff1944941b0c7343444ef39d32ce00112173ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6ff1944941b0c7343444ef39d32ce00112173ae/comments", "author": null, "committer": null, "parents": [{"sha": "c2540bbb4688f9e9371de2f32aa7b534a6b64b00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2540bbb4688f9e9371de2f32aa7b534a6b64b00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2540bbb4688f9e9371de2f32aa7b534a6b64b00"}], "stats": {"total": 138, "additions": 136, "deletions": 2}, "files": [{"sha": "940f6ab45dce0a36c85287b58724a0a7efb30e91", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ff1944941b0c7343444ef39d32ce00112173ae/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ff1944941b0c7343444ef39d32ce00112173ae/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c6ff1944941b0c7343444ef39d32ce00112173ae", "patch": "@@ -1,3 +1,12 @@\n+2005-10-05  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/11729 (DR 280, [Ready])\n+\t* include/bits/stl_iterator.h: Add reverse_iterator global\n+\tfunctions with two template parameters (operator==, !=, <,\n+\t>, <=, >=, -).\n+\t* testsuite/24_iterators/reverse_iterator/11729.cc: New.\n+\t* docs/html/ext/howto.html: Add an entry for issue 280.\n+\n 2005-10-03  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/tr1/hashtable"}, {"sha": "b22b56e062287b58d054ec4ae88a45b00ef3adfa", "filename": "libstdc++-v3/docs/html/ext/howto.html", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ff1944941b0c7343444ef39d32ce00112173ae/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ff1944941b0c7343444ef39d32ce00112173ae/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html?ref=c6ff1944941b0c7343444ef39d32ce00112173ae", "patch": "@@ -453,6 +453,13 @@ <h2><a name=\"5\">LWG Issues</a></h2>\n     <dd>Similar to 118.\n     </dd>\n \n+    <dt><a href=\"lwg-active.html#280\">280</a>:\n+        <em>Comparison of reverse_iterator to const reverse_iterator</em>\n+    </dt>\n+    <dd>Add global functions with two template parameters.\n+        (NB: not added for now a templated assignment operator) \n+    </dd>\n+\n     <dt><a href=\"lwg-defects.html#292\">292</a>:\n         <em>Effects of a.copyfmt (a)</em>\n     </dt>"}, {"sha": "4c4630a06896f849d8d123e221568f7d856789e1", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 47, "deletions": 2, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ff1944941b0c7343444ef39d32ce00112173ae/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ff1944941b0c7343444ef39d32ce00112173ae/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=c6ff1944941b0c7343444ef39d32ce00112173ae", "patch": "@@ -205,7 +205,8 @@ namespace std\n        *\n        *  @doctodo\n       */\n-      reverse_iterator operator--(int)\n+      reverse_iterator\n+      operator--(int)\n       {\n \treverse_iterator __tmp = *this;\n \t++current;\n@@ -301,7 +302,7 @@ namespace std\n   template<typename _Iterator>\n     inline bool\n     operator<=(const reverse_iterator<_Iterator>& __x,\n-\t\tconst reverse_iterator<_Iterator>& __y)\n+\t       const reverse_iterator<_Iterator>& __y)\n     { return !(__y < __x); }\n \n   template<typename _Iterator>\n@@ -321,6 +322,50 @@ namespace std\n     operator+(typename reverse_iterator<_Iterator>::difference_type __n,\n \t      const reverse_iterator<_Iterator>& __x)\n     { return reverse_iterator<_Iterator>(__x.base() - __n); }\n+\n+  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+  // DR 280. Comparison of reverse_iterator to const reverse_iterator.\n+  template<typename _IteratorL, typename _IteratorR>\n+    inline bool\n+    operator==(const reverse_iterator<_IteratorL>& __x,\n+\t       const reverse_iterator<_IteratorR>& __y)\n+    { return __x.base() == __y.base(); }\n+\n+  template<typename _IteratorL, typename _IteratorR>\n+    inline bool\n+    operator<(const reverse_iterator<_IteratorL>& __x,\n+\t      const reverse_iterator<_IteratorR>& __y)\n+    { return __y.base() < __x.base(); }\n+\n+  template<typename _IteratorL, typename _IteratorR>\n+    inline bool\n+    operator!=(const reverse_iterator<_IteratorL>& __x,\n+\t       const reverse_iterator<_IteratorR>& __y)\n+    { return !(__x == __y); }\n+\n+  template<typename _IteratorL, typename _IteratorR>\n+    inline bool\n+    operator>(const reverse_iterator<_IteratorL>& __x,\n+\t      const reverse_iterator<_IteratorR>& __y)\n+    { return __y < __x; }\n+\n+  template<typename _IteratorL, typename _IteratorR>\n+    inline bool\n+    operator<=(const reverse_iterator<_IteratorL>& __x,\n+\t       const reverse_iterator<_IteratorR>& __y)\n+    { return !(__y < __x); }\n+\n+  template<typename _IteratorL, typename _IteratorR>\n+    inline bool\n+    operator>=(const reverse_iterator<_IteratorL>& __x,\n+\t       const reverse_iterator<_IteratorR>& __y)\n+    { return !(__x < __y); }\n+\n+  template<typename _IteratorL, typename _IteratorR>\n+    inline typename reverse_iterator<_IteratorL>::difference_type\n+    operator-(const reverse_iterator<_IteratorL>& __x,\n+\t      const reverse_iterator<_IteratorR>& __y)\n+    { return __y.base() - __x.base(); }\n   //@}\n \n   // 24.4.2.2.1 back_insert_iterator"}, {"sha": "f79be3ebb4c61580abc0ace06fb353018458a581", "filename": "libstdc++-v3/testsuite/24_iterators/reverse_iterator/11729.cc", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ff1944941b0c7343444ef39d32ce00112173ae/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2F11729.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ff1944941b0c7343444ef39d32ce00112173ae/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2F11729.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2F11729.cc?ref=c6ff1944941b0c7343444ef39d32ce00112173ae", "patch": "@@ -0,0 +1,73 @@\n+// 2005-10-04  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 24.4.1.2 Reverse iterators\n+\n+#include <vector>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/11729\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  typedef std::vector<int> Vec;\n+  typedef Vec::reverse_iterator reverse_iterator;\n+  typedef Vec::const_reverse_iterator const_reverse_iterator;\n+  \n+  Vec v(2);\n+\n+  reverse_iterator rbeg = v.rbegin();               \n+  reverse_iterator rend = v.rend();\n+  const_reverse_iterator constrbeg(rbeg);\n+  const_reverse_iterator constrend(rend);\n+\n+  VERIFY( rbeg == constrbeg );\n+  VERIFY( constrend == rend );\n+\n+  VERIFY( rbeg != constrend );\n+  VERIFY( constrbeg != rend );\n+\n+  VERIFY( rbeg < constrend );\n+  VERIFY( constrbeg < rend );\n+\n+  VERIFY( rend > constrbeg );\n+  VERIFY( constrend > rbeg );\n+\n+  VERIFY( rend >= constrend );\n+  VERIFY( constrbeg >= rbeg );\n+\n+  VERIFY( rbeg <= constrbeg );\n+  VERIFY( constrend <= rend );\n+\n+  VERIFY( rbeg - constrbeg == 0 );\n+  VERIFY( constrend - rend == 0 );\n+\n+  VERIFY( rend - constrbeg > 0 );\n+  VERIFY( constrend - rbeg > 0 );\n+\n+  VERIFY( (constrbeg = rend) == rend );\n+}\n+\n+int main() \n+{ \n+  test01();\n+  return 0;\n+}"}]}