{"sha": "591d2130348b15ec9158bb69a7fd9442bb81fa3a", "node_id": "C_kwDOANBUbNoAKDU5MWQyMTMwMzQ4YjE1ZWM5MTU4YmI2OWE3ZmQ5NDQyYmI4MWZhM2E", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2022-03-03T00:42:23Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2022-03-04T19:59:28Z"}, "message": "c++: Standard mangling abbreviations & modules\n\nThe std manglings for things like std::string should not apply if\nwe're not in the global module.\n\ngcc/cp/\n\t* mangle.cc (is_std_substitution): Check global module.\n\t(is_std_substitution_char): Return bool.\ngcc/testsuite/\n\t* g++.dg/modules/std-subst-2.C: New.\n\t* g++.dg/modules/std-subst-3.C: New.\n\t* g++.dg/modules/std-subst-4_a.C: New.\n\t* g++.dg/modules/std-subst-4_b.C: New.\n\t* g++.dg/modules/std-subst-4_c.C: New.", "tree": {"sha": "4a89a8904660c32c058face949c8068d47d32f03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a89a8904660c32c058face949c8068d47d32f03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/591d2130348b15ec9158bb69a7fd9442bb81fa3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/591d2130348b15ec9158bb69a7fd9442bb81fa3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/591d2130348b15ec9158bb69a7fd9442bb81fa3a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/591d2130348b15ec9158bb69a7fd9442bb81fa3a/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14dfbb53594e164fe222476523a68039a8bd5252", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14dfbb53594e164fe222476523a68039a8bd5252", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14dfbb53594e164fe222476523a68039a8bd5252"}], "stats": {"total": 123, "additions": 112, "deletions": 11}, "files": [{"sha": "dbcec0a55bc3ff230185bfcc43f99f4f89776827", "filename": "gcc/cp/mangle.cc", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/591d2130348b15ec9158bb69a7fd9442bb81fa3a/gcc%2Fcp%2Fmangle.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/591d2130348b15ec9158bb69a7fd9442bb81fa3a/gcc%2Fcp%2Fmangle.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.cc?ref=591d2130348b15ec9158bb69a7fd9442bb81fa3a", "patch": "@@ -180,9 +180,9 @@ static tree maybe_template_info (const tree);\n \n static inline tree canonicalize_for_substitution (tree);\n static void add_substitution (tree);\n-static inline int is_std_substitution (const tree,\n+static inline bool is_std_substitution (const tree,\n \t\t\t\t       const substitution_identifier_index_t);\n-static inline int is_std_substitution_char (const tree,\n+static inline bool is_std_substitution_char (const tree,\n \t\t\t\t\t    const substitution_identifier_index_t);\n static int find_substitution (tree);\n static void mangle_call_offset (const tree, const tree);\n@@ -467,9 +467,10 @@ add_substitution (tree node)\n \n /* Helper function for find_substitution.  Returns nonzero if NODE,\n    which may be a decl or a CLASS_TYPE, is a template-id with template\n-   name of substitution_index[INDEX] in the ::std namespace.  */\n+   name of substitution_index[INDEX] in the ::std namespace, with\n+   global module attachment.  */\n \n-static inline int\n+static bool\n is_std_substitution (const tree node,\n \t\t     const substitution_identifier_index_t index)\n {\n@@ -488,13 +489,22 @@ is_std_substitution (const tree node,\n     }\n   else\n     /* These are not the droids you're looking for.  */\n-    return 0;\n+    return false;\n+\n+  if (!DECL_NAMESPACE_STD_P (CP_DECL_CONTEXT (decl)))\n+    return false;\n+\n+  if (!(TYPE_LANG_SPECIFIC (type) && TYPE_TEMPLATE_INFO (type)))\n+    return false;\n \n-  return (DECL_NAMESPACE_STD_P (CP_DECL_CONTEXT (decl))\n-\t  && TYPE_LANG_SPECIFIC (type)\n-\t  && TYPE_TEMPLATE_INFO (type)\n-\t  && (DECL_NAME (TYPE_TI_TEMPLATE (type))\n-\t      == subst_identifiers[index]));\n+  tree tmpl = TYPE_TI_TEMPLATE (type);\n+  if (DECL_NAME (tmpl) != subst_identifiers[index])\n+    return false;\n+\n+  if (modules_p () && get_originating_module (tmpl, true) >= 0)\n+    return false;\n+\n+  return true;\n }\n \n /* Return the ABI tags (the TREE_VALUE of the \"abi_tag\" attribute entry) for T,\n@@ -526,7 +536,7 @@ get_abi_tags (tree t)\n    ::std::identifier<char>, where identifier is\n    substitution_index[INDEX].  */\n \n-static inline int\n+static bool\n is_std_substitution_char (const tree node,\n \t\t\t  const substitution_identifier_index_t index)\n {"}, {"sha": "e7c77063a934f28b1f9116a57662f102b0aadd17", "filename": "gcc/testsuite/g++.dg/modules/std-subst-2.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/591d2130348b15ec9158bb69a7fd9442bb81fa3a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fstd-subst-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/591d2130348b15ec9158bb69a7fd9442bb81fa3a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fstd-subst-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fstd-subst-2.C?ref=591d2130348b15ec9158bb69a7fd9442bb81fa3a", "patch": "@@ -0,0 +1,13 @@\n+// { dg-additional-options \"-fmodules-ts\" }\n+export module FOO;\n+// { dg-module-cmi FOO }\n+namespace Outer {\n+class Y;\n+class Inner {\n+  class X;\n+  void Fn (X &, Y &); // #2\n+};\n+void Inner::Fn (X &, Y &) {}\n+}\n+\n+// { dg-final { scan-assembler {_ZN5OuterW3FOO5Inner2FnERNS1_1XERNS_S0_1YE:} } }"}, {"sha": "75b81acf2f6f04bde2039732161fc57027d5c92c", "filename": "gcc/testsuite/g++.dg/modules/std-subst-3.C", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/591d2130348b15ec9158bb69a7fd9442bb81fa3a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fstd-subst-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/591d2130348b15ec9158bb69a7fd9442bb81fa3a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fstd-subst-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fstd-subst-3.C?ref=591d2130348b15ec9158bb69a7fd9442bb81fa3a", "patch": "@@ -0,0 +1,34 @@\n+// { dg-additional-options \"-fmodules-ts -Wno-pedantic\" }\n+\n+module;\n+# 5 __FILE__ 1\n+class Pooh;\n+class Piglet;\n+# 8 \"\" 2\n+\n+export module std; // might happen, you can't say it won't!\n+// { dg-module-cmi std }\n+\n+namespace std {\n+export template<typename T> class allocator {\n+// just for testing, not real!\n+void M (T *);\n+template <typename U> U *N (T *);\n+};\n+\n+template<typename T> void allocator<T>::M (T *) {}\n+template<typename T> template<typename U> U *allocator<T>::N (T *) {\n+return nullptr;\n+}\n+\n+template void allocator<int>::M (int *);\n+template float *allocator<int>::N<float> (int *);\n+}\n+\n+template void std::allocator<Pooh>::M (Pooh *);\n+template Piglet *std::allocator<Pooh>::N<Piglet> (Pooh *);\n+\n+// { dg-final { scan-assembler {_ZNStW3std9allocatorIiE1MEPi:} } }\n+// { dg-final { scan-assembler {_ZNStW3std9allocatorIiE1NIfEEPT_Pi:} } }\n+// { dg-final { scan-assembler {_ZNStW3std9allocatorI4PoohE1MEPS1_:} } }\n+// { dg-final { scan-assembler {_ZNStW3std9allocatorI4PoohE1NI6PigletEEPT_PS1_:} } }"}, {"sha": "d7520f41b2c03d439fffb6138ab6a0d68d5012c2", "filename": "gcc/testsuite/g++.dg/modules/std-subst-4_a.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/591d2130348b15ec9158bb69a7fd9442bb81fa3a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fstd-subst-4_a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/591d2130348b15ec9158bb69a7fd9442bb81fa3a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fstd-subst-4_a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fstd-subst-4_a.C?ref=591d2130348b15ec9158bb69a7fd9442bb81fa3a", "patch": "@@ -0,0 +1,14 @@\n+// { dg-additional-options \"-fmodules-ts -Wno-pedantic\" }\n+\n+module;\n+# 5 __FILE__ 1\n+namespace std {\n+template <typename A> struct allocator {};\n+template <typename C, typename T, typename A>\n+class basic_string;\n+} // namespace std\n+# 12 \"\" 2\n+export module RenameString;\n+// { dg-module-cmi RenameString }\n+export template <typename C, typename T>\n+using str = std::basic_string<C, T, std::allocator<C>>;"}, {"sha": "5bea86ff6aa484db482b2f9fb6c7d314a91c2bd7", "filename": "gcc/testsuite/g++.dg/modules/std-subst-4_b.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/591d2130348b15ec9158bb69a7fd9442bb81fa3a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fstd-subst-4_b.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/591d2130348b15ec9158bb69a7fd9442bb81fa3a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fstd-subst-4_b.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fstd-subst-4_b.C?ref=591d2130348b15ec9158bb69a7fd9442bb81fa3a", "patch": "@@ -0,0 +1,14 @@\n+// { dg-additional-options -fmodules-ts }\n+\n+export module Foo;\n+// { dg-module-cmi Foo }\n+import RenameString;\n+\n+namespace std {\n+template <typename T> struct char_traits {};\n+} // namespace std\n+\n+// use Sb mangling, not Ss as this is not global-module std::char_traits.\n+// { dg-final { scan-assembler {_ZW3Foo1fRSbIcStS_11char_traitsIcESaIcEE:} } }\n+void f(str<char, std::char_traits<char>> &s) {\n+}"}, {"sha": "21beb9bbb1cf6a6a04f6c9c3e0a99d5cf120ef36", "filename": "gcc/testsuite/g++.dg/modules/std-subst-4_c.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/591d2130348b15ec9158bb69a7fd9442bb81fa3a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fstd-subst-4_c.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/591d2130348b15ec9158bb69a7fd9442bb81fa3a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fstd-subst-4_c.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fstd-subst-4_c.C?ref=591d2130348b15ec9158bb69a7fd9442bb81fa3a", "patch": "@@ -0,0 +1,16 @@\n+// { dg-additional-options \"-fmodules-ts -Wno-pedantic\" }\n+module;\n+# 5 __FILE__ 1\n+namespace std {\n+template <typename A> struct char_traits {};\n+} // namespace std\n+# 9 \"\" 2\n+export module Bar;\n+// { dg-module-cmi Bar }\n+import RenameString;\n+\n+// Use Ss as this is global-module std::char_traits\n+void g(str<char, std::char_traits<char>> &s) {\n+}\n+\n+// { dg-final { scan-assembler {_ZW3Bar1gRSs:} } }"}]}