{"sha": "c2615a67c76b0f94c16ab8c872a7132995ee3219", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzI2MTVhNjdjNzZiMGY5NGMxNmFiOGM4NzJhNzEzMjk5NWVlMzIxOQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-01-28T00:23:02Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-01-28T00:23:02Z"}, "message": "(emit_store_flag): Swap operands if first is a constant and second is not.\n\nAbort if compare_from_rtx didn't return an rtx with the code we expect.\n\nFrom-SVN: r3371", "tree": {"sha": "5fc41e1ed4c897ff6f277ff41c151df40cb9afb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5fc41e1ed4c897ff6f277ff41c151df40cb9afb3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2615a67c76b0f94c16ab8c872a7132995ee3219", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2615a67c76b0f94c16ab8c872a7132995ee3219", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2615a67c76b0f94c16ab8c872a7132995ee3219", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2615a67c76b0f94c16ab8c872a7132995ee3219/comments", "author": null, "committer": null, "parents": [{"sha": "bf743ac5ed9fc641a83dc52fd0e7f099518aa647", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf743ac5ed9fc641a83dc52fd0e7f099518aa647", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf743ac5ed9fc641a83dc52fd0e7f099518aa647"}], "stats": {"total": 23, "additions": 18, "deletions": 5}, "files": [{"sha": "375b9f6773791c659f8b6d388753fe6e47004237", "filename": "gcc/expmed.c", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2615a67c76b0f94c16ab8c872a7132995ee3219/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2615a67c76b0f94c16ab8c872a7132995ee3219/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=c2615a67c76b0f94c16ab8c872a7132995ee3219", "patch": "@@ -2756,6 +2756,18 @@ emit_store_flag (target, code, op0, op1, mode, unsignedp, normalizep)\n   if (mode == VOIDmode)\n     mode = GET_MODE (op0);\n \n+  /* If one operand is constant, make it the second one.  Only do this\n+     if the other operand is not constant as well.  */\n+\n+  if ((CONSTANT_P (op0) && ! CONSTANT_P (op1))\n+      || (GET_CODE (op0) == CONST_INT && GET_CODE (op1) != CONST_INT))\n+    {\n+      tem = op0;\n+      op0 = op1;\n+      op1 = tem;\n+      code = swap_condition (code);\n+    }\n+\n   /* For some comparisons with 1 and -1, we can convert this to \n      comparisons with zero.  This will often produce more opportunities for\n      store-flag insns. */\n@@ -2851,11 +2863,12 @@ emit_store_flag (target, code, op0, op1, mode, unsignedp, normalizep)\n \t\t: normalizep == -1 ? constm1_rtx\n \t\t: const_true_rtx);\n \n-      /* Comparison operands could have been swapped;\n-\t so get the new comprison code.\n-\t Note that GET_CODE gives us either the original code\n-\t or the result of swap_condition.  */\n-      icode = setcc_gen_code[(int) GET_CODE (comparison)];\n+      /* If the code of COMPARISON doesn't match CODE, something is\n+\t wrong; we can no longer be sure that we have the operation.  \n+\t We could handle this case, but it should not happen.  */\n+\n+      if (GET_CODE (comparison) != code)\n+\tabort ();\n \n       /* Get a reference to the target in the proper mode for this insn.  */\n       compare_mode = insn_operand_mode[(int) icode][0];"}]}