{"sha": "0f8a934b44ef0d64b5c96c673d14da78867a2738", "node_id": "C_kwDOANBUbNoAKDBmOGE5MzRiNDRlZjBkNjRiNWM5NmM2NzNkMTRkYTc4ODY3YTI3Mzg", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-09-26T20:50:28Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2022-09-29T09:08:47Z"}, "message": "ada: Further tweak new expansion of contracts\n\nThe original extended return statement is mandatory for functions whose\nresult type is limited in Ada 2005 and later.\n\ngcc/ada/\n\n\t* contracts.adb (Build_Subprogram_Contract_Wrapper): Put back the\n\textended return statement if the result type is built-in-place.\n\t* sem_attr.adb (Analyze_Attribute_Old_Result): Also expect an\n\textended return statement.", "tree": {"sha": "d4a8b01d962b742679a4c616870c59b413a75b20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4a8b01d962b742679a4c616870c59b413a75b20"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f8a934b44ef0d64b5c96c673d14da78867a2738", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f8a934b44ef0d64b5c96c673d14da78867a2738", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f8a934b44ef0d64b5c96c673d14da78867a2738", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f8a934b44ef0d64b5c96c673d14da78867a2738/comments", "author": null, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ebc54a8c472e19d81e23ee4094f619e0437e673", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ebc54a8c472e19d81e23ee4094f619e0437e673", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ebc54a8c472e19d81e23ee4094f619e0437e673"}], "stats": {"total": 54, "additions": 48, "deletions": 6}, "files": [{"sha": "a300d739effc2b76b77671ff014f19ad3f7935b4", "filename": "gcc/ada/contracts.adb", "status": "modified", "additions": 43, "deletions": 3, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f8a934b44ef0d64b5c96c673d14da78867a2738/gcc%2Fada%2Fcontracts.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f8a934b44ef0d64b5c96c673d14da78867a2738/gcc%2Fada%2Fcontracts.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcontracts.adb?ref=0f8a934b44ef0d64b5c96c673d14da78867a2738", "patch": "@@ -30,6 +30,7 @@ with Einfo.Entities; use Einfo.Entities;\n with Einfo.Utils;    use Einfo.Utils;\n with Elists;         use Elists;\n with Errout;         use Errout;\n+with Exp_Ch6;        use Exp_Ch6;\n with Exp_Prag;       use Exp_Prag;\n with Exp_Tss;        use Exp_Tss;\n with Exp_Util;       use Exp_Util;\n@@ -1609,7 +1610,7 @@ package body Contracts is\n       --  preserving the result for the purpose of evaluating postconditions,\n       --  contracts, type invariants, etc.\n \n-      --  In the case of a function, generate:\n+      --  In the case of a regular function, generate:\n       --\n       --  function Original_Func (X : in out Integer) return Typ is\n       --     <prologue renamings>\n@@ -1641,7 +1642,27 @@ package body Contracts is\n       --  Note that an extended return statement does not yield the same result\n       --  because the copy of the return object is not elided by GNAT for now.\n \n-      --  Or, in the case of a procedure:\n+      --  Or else, in the case of a BIP function, generate:\n+\n+      --  function Original_Func (X : in out Integer) return Typ is\n+      --     <prologue renamings>\n+      --     <preconditions>\n+      --\n+      --     function _Wrapped_Statements return Typ is\n+      --        <original declarations>\n+      --     begin\n+      --        <original statements>\n+      --     end;\n+      --\n+      --  begin\n+      --     return\n+      --        Result_Obj : constant Typ := _Wrapped_Statements\n+      --     do\n+      --        <postconditions statments>\n+      --     end return;\n+      --  end;\n+\n+      --  Or else, in the case of a procedure, generate:\n       --\n       --  procedure Original_Proc (X : in out Integer) is\n       --     <prologue renamings>\n@@ -1657,7 +1678,6 @@ package body Contracts is\n       --     _Wrapped_Statements;\n       --     <postconditions statments>\n       --  end;\n-      --\n \n       --  Create Identifier\n \n@@ -1716,6 +1736,26 @@ package body Contracts is\n          Set_Statements\n            (Handled_Statement_Sequence (Body_Decl), Stmts);\n \n+      --  Generate the post-execution statements and the extended return\n+      --  when the subprogram being wrapped is a BIP function.\n+\n+      elsif Is_Build_In_Place_Result_Type (Ret_Type) then\n+         Set_Statements (Handled_Statement_Sequence (Body_Decl), New_List (\n+           Make_Extended_Return_Statement (Loc,\n+             Return_Object_Declarations => New_List (\n+                Make_Object_Declaration (Loc,\n+                  Defining_Identifier => Result,\n+                  Constant_Present    => True,\n+                  Object_Definition   =>\n+                    New_Occurrence_Of (Ret_Type, Loc),\n+                  Expression          =>\n+                    Make_Function_Call (Loc,\n+                      Name                   =>\n+                        New_Occurrence_Of (Wrapper_Id, Loc)))),\n+             Handled_Statement_Sequence =>\n+               Make_Handled_Sequence_Of_Statements (Loc,\n+                 Statements => Stmts))));\n+\n       --  Declare a renaming of the result of the call to the wrapper and\n       --  append a return of the result of the call when the subprogram is\n       --  a function, after manually removing the side effects. Note that"}, {"sha": "d27d956a1e7dbc525a051348a44a9dc988810a4c", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f8a934b44ef0d64b5c96c673d14da78867a2738/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f8a934b44ef0d64b5c96c673d14da78867a2738/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=0f8a934b44ef0d64b5c96c673d14da78867a2738", "patch": "@@ -1454,10 +1454,12 @@ package body Sem_Attr is\n             Subp_Decl := Find_Related_Declaration_Or_Body (Prag);\n          end if;\n \n-         --  'Old objects appear in block statements as part of the expansion\n-         --  of contract wrappers.\n+         --  'Old objects appear in block and extended return statements as\n+         --  part of the expansion of contract wrappers.\n \n-         if Nkind (Subp_Decl) = N_Block_Statement then\n+         if Nkind (Subp_Decl) in N_Block_Statement\n+                               | N_Extended_Return_Statement\n+         then\n             Subp_Decl := Parent (Parent (Subp_Decl));\n          end if;\n "}]}