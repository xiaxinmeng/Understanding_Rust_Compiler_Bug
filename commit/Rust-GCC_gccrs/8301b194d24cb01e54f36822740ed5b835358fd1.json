{"sha": "8301b194d24cb01e54f36822740ed5b835358fd1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODMwMWIxOTRkMjRjYjAxZTU0ZjM2ODIyNzQwZWQ1YjgzNTM1OGZkMQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2014-11-25T15:16:27Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2014-11-25T15:16:27Z"}, "message": "re PR bootstrap/64050 (r218009 causes LTO/PGO bootstrap failure: ICE: in inline_small_functions, at ipa-inline.c:1709)\n\n2014-11-25  Martin Liska  <mliska@suse.cz>\n\n\tPR bootstrap/64050\n\tPR ipa/64060\n\t* sreal.c (sreal::operator+): Addition fixed.\n\t(sreal::signedless_plus): Negative numbers are\n\thandled correctly.\n\t(sreal::operator-): Subtraction is fixed.\n\t(sreal::signedless_minus): Negative numbers are\n\thandled correctly.\n\t* sreal.h (sreal::operator<): Equal negative numbers\n\tare compared correctly.\n\t(sreal::shift): New checking asserts are introduced.\n\tOperation is fixed.\n\t* gcc.dg/plugin/plugin.exp: New plugin.\n\t* gcc.dg/plugin/sreal-test-1.c: New test.\n\t* gcc.dg/plugin/sreal_plugin.c: New test.\n\nFrom-SVN: r218048", "tree": {"sha": "6eb6e13f7c1038e576c433fecfe7eea014d66df3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6eb6e13f7c1038e576c433fecfe7eea014d66df3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8301b194d24cb01e54f36822740ed5b835358fd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8301b194d24cb01e54f36822740ed5b835358fd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8301b194d24cb01e54f36822740ed5b835358fd1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8301b194d24cb01e54f36822740ed5b835358fd1/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6b4b59fc6f4b555f81e70e82dd424be2e05b41fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b4b59fc6f4b555f81e70e82dd424be2e05b41fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b4b59fc6f4b555f81e70e82dd424be2e05b41fc"}], "stats": {"total": 232, "additions": 225, "deletions": 7}, "files": [{"sha": "e6052320a10aa610731aa2754770177409c5cdb2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8301b194d24cb01e54f36822740ed5b835358fd1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8301b194d24cb01e54f36822740ed5b835358fd1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8301b194d24cb01e54f36822740ed5b835358fd1", "patch": "@@ -1,3 +1,18 @@\n+2014-11-25  Martin Liska  <mliska@suse.cz>\n+\n+\tPR bootstrap/64050\n+\tPR ipa/64060\n+\t* sreal.c (sreal::operator+): Addition fixed.\n+\t(sreal::signedless_plus): Negative numbers are\n+\thandled correctly.\n+\t(sreal::operator-): Subtraction is fixed.\n+\t(sreal::signedless_minus): Negative numbers are\n+\thandled correctly.\n+\t* sreal.h (sreal::operator<): Equal negative numbers\n+\tare compared correctly.\n+\t(sreal::shift): New checking asserts are introduced.\n+\tOperation is fixed.\n+\n 2014-11-25  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/61927"}, {"sha": "2b5e3ae82be06cd54fc14ca9ccf0bb6d8120e351", "filename": "gcc/sreal.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8301b194d24cb01e54f36822740ed5b835358fd1/gcc%2Fsreal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8301b194d24cb01e54f36822740ed5b835358fd1/gcc%2Fsreal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsreal.c?ref=8301b194d24cb01e54f36822740ed5b835358fd1", "patch": "@@ -182,9 +182,9 @@ sreal::operator+ (const sreal &other) const\n     {\n       sreal tmp = -(*b_p);\n       if (*a_p < tmp)\n-\treturn signedless_minus (tmp, *a_p, false);\n+\treturn signedless_minus (tmp, *a_p, true);\n       else\n-\treturn signedless_minus (*a_p, tmp, true);\n+\treturn signedless_minus (*a_p, tmp, false);\n     }\n \n   gcc_checking_assert (a_p->m_negative == b_p->m_negative);\n@@ -203,14 +203,15 @@ sreal::signedless_plus (const sreal &a, const sreal &b, bool negative)\n   const sreal *a_p = &a;\n   const sreal *b_p = &b;\n \n-  if (*a_p < *b_p)\n+  if (a_p->m_exp < b_p->m_exp)\n     std::swap (a_p, b_p);\n \n   dexp = a_p->m_exp - b_p->m_exp;\n   r.m_exp = a_p->m_exp;\n   if (dexp > SREAL_BITS)\n     {\n       r.m_sig = a_p->m_sig;\n+      r.m_negative = negative;\n       return r;\n     }\n \n@@ -248,11 +249,11 @@ sreal::operator- (const sreal &other) const\n   /* We want to substract a smaller number from bigger\n     for nonegative numbers.  */\n   if (!m_negative && *this < other)\n-    return -signedless_minus (other, *this, true);\n+    return signedless_minus (other, *this, true);\n \n   /* Example: -2 - (-3) => 3 - 2 */\n   if (m_negative && *this > other)\n-    return signedless_minus (-other, -(*this), true);\n+    return signedless_minus (-other, -(*this), false);\n \n   sreal r = signedless_minus (*this, other, m_negative);\n \n@@ -274,6 +275,7 @@ sreal::signedless_minus (const sreal &a, const sreal &b, bool negative)\n   if (dexp > SREAL_BITS)\n     {\n       r.m_sig = a_p->m_sig;\n+      r.m_negative = negative;\n       return r;\n     }\n   if (dexp == 0)"}, {"sha": "3938c6ef12a98ce9ad4e7bf8d54c666ccb4b4d14", "filename": "gcc/sreal.h", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8301b194d24cb01e54f36822740ed5b835358fd1/gcc%2Fsreal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8301b194d24cb01e54f36822740ed5b835358fd1/gcc%2Fsreal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsreal.h?ref=8301b194d24cb01e54f36822740ed5b835358fd1", "patch": "@@ -60,6 +60,11 @@ class sreal\n \n   bool operator< (const sreal &other) const\n   {\n+    /* We negate result in case of negative numbers and\n+       it would return true for equal negative numbers.  */\n+    if (*this == other)\n+      return false;\n+\n     if (m_negative != other.m_negative)\n       return m_negative > other.m_negative;\n \n@@ -86,10 +91,19 @@ class sreal\n     return tmp;\n   }\n \n-  sreal shift (int sig) const\n+  sreal shift (int s) const\n   {\n+    gcc_checking_assert (s <= SREAL_BITS);\n+    gcc_checking_assert (s >= -SREAL_BITS);\n+\n+    /* Exponent should never be so large because shift_right is used only by\n+     sreal_add and sreal_sub ant thus the number cannot be shifted out from\n+     exponent range.  */\n+    gcc_checking_assert (m_exp + s <= SREAL_MAX_EXP);\n+    gcc_checking_assert (m_exp + s >= -SREAL_MAX_EXP);\n+\n     sreal tmp = *this;\n-    tmp.m_sig += sig;\n+    tmp.m_exp += s;\n \n     return tmp;\n   }"}, {"sha": "9dc2269427a385b86dde295b149d4fe91f2fed23", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8301b194d24cb01e54f36822740ed5b835358fd1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8301b194d24cb01e54f36822740ed5b835358fd1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8301b194d24cb01e54f36822740ed5b835358fd1", "patch": "@@ -1,3 +1,11 @@\n+2014-11-25  Martin Liska  <mliska@suse.cz>\n+\n+\tPR bootstrap/64050\n+\tPR ipa/64060\n+\t* gcc.dg/plugin/plugin.exp: New plugin.\n+\t* gcc.dg/plugin/sreal-test-1.c: New test.\n+\t* gcc.dg/plugin/sreal_plugin.c: New test.\n+\n 2014-11-25  Matthew Fortune  <matthew.fortune@imgtec.com>\n \n \t* gcc.target/mips/mips.exp: Add support for -msoft-float and"}, {"sha": "c12b3dac4e3d166f6bd5898c608c0fb3a300917d", "filename": "gcc/testsuite/gcc.dg/plugin/plugin.exp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8301b194d24cb01e54f36822740ed5b835358fd1/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fplugin.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8301b194d24cb01e54f36822740ed5b835358fd1/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fplugin.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fplugin.exp?ref=8301b194d24cb01e54f36822740ed5b835358fd1", "patch": "@@ -59,6 +59,7 @@ set plugin_test_list [list \\\n     { selfassign.c self-assign-test-1.c self-assign-test-2.c } \\\n     { ggcplug.c ggcplug-test-1.c } \\\n     { one_time_plugin.c one_time-test-1.c } \\\n+    { sreal_plugin.c sreal-test-1.c } \\\n     { start_unit_plugin.c start_unit-test-1.c } \\\n     { finish_unit_plugin.c finish_unit-test-1.c } \\\n ]"}, {"sha": "1bce2cc0a35fac5d04b6a1e96944bd8ae633b795", "filename": "gcc/testsuite/gcc.dg/plugin/sreal-test-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8301b194d24cb01e54f36822740ed5b835358fd1/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fsreal-test-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8301b194d24cb01e54f36822740ed5b835358fd1/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fsreal-test-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fsreal-test-1.c?ref=8301b194d24cb01e54f36822740ed5b835358fd1", "patch": "@@ -0,0 +1,8 @@\n+/* Test that pass is inserted and invoked once. */\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+\n+int main (int argc, char **argv)\n+{\n+  return 0;\n+}"}, {"sha": "f1138163c5d7095bb7078c9961f9c1d7e29484ca", "filename": "gcc/testsuite/gcc.dg/plugin/sreal_plugin.c", "status": "added", "additions": 170, "deletions": 0, "changes": 170, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8301b194d24cb01e54f36822740ed5b835358fd1/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fsreal_plugin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8301b194d24cb01e54f36822740ed5b835358fd1/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fsreal_plugin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fsreal_plugin.c?ref=8301b194d24cb01e54f36822740ed5b835358fd1", "patch": "@@ -0,0 +1,170 @@\n+/* Plugin that process internal tests for sreal.  */\n+#include \"config.h\"\n+#include \"gcc-plugin.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tree.h\"\n+#include \"tm.h\"\n+#include \"toplev.h\"\n+#include \"hash-table.h\"\n+#include \"vec.h\"\n+#include \"ggc.h\"\n+#include \"basic-block.h\"\n+#include \"tree-ssa-alias.h\"\n+#include \"internal-fn.h\"\n+#include \"gimple-fold.h\"\n+#include \"tree-eh.h\"\n+#include \"gimple-expr.h\"\n+#include \"is-a.h\"\n+#include \"gimple.h\"\n+#include \"tree-pass.h\"\n+#include \"intl.h\"\n+#include \"context.h\"\n+#include \"sreal.h\"\n+\n+int plugin_is_GPL_compatible;\n+\n+namespace {\n+\n+static void assert (bool c)\n+{\n+  if (!c)\n+    abort ();\n+}\n+\n+const pass_data pass_data_sreal_pass =\n+{\n+  GIMPLE_PASS, /* type */\n+  \"sreal\", /* name */\n+  OPTGROUP_NONE, /* optinfo_flags */\n+  TV_NONE, /* tv_id */\n+  PROP_gimple_any, /* properties_required */\n+  0, /* properties_provided */\n+  0, /* properties_destroyed */\n+  0, /* todo_flags_start */\n+  0, /* todo_flags_finish */\n+};\n+\n+class sreal_pass : public gimple_opt_pass\n+{\n+public:\n+  sreal_pass(gcc::context *ctxt)\n+    : gimple_opt_pass(pass_data_sreal_pass, ctxt)\n+  {}\n+\n+  /* opt_pass methods: */\n+  virtual bool gate (function *);\n+  virtual unsigned int execute (function *);\n+\n+private:\n+  void check_sreal ();\n+\n+  static void verify_aritmetics (int a, int b);\n+  static void verify_shifting (int a);\n+}; // class one_pass\n+\n+} // anon namespace\n+\n+void\n+sreal_pass::verify_aritmetics (int a, int b)\n+{\n+  assert (a == -(-(sreal (a))).to_int ());\n+  assert ((a < b) == (sreal (a) < sreal (b)));\n+  assert ((a <= b) == (sreal (a) <= sreal (b)));\n+  assert ((a == b) == (sreal (a) == sreal (b)));\n+  assert ((a != b) == (sreal (a) != sreal (b)));\n+  assert ((a > b) == (sreal (a) > sreal (b)));\n+  assert ((a >= b) == (sreal (a) >= sreal (b)));\n+  assert ((a + b) == (sreal (a) + sreal (b)).to_int ());\n+  assert ((a - b) == (sreal (a) - sreal (b)).to_int ());\n+  assert ((b + a) == (sreal (b) + sreal (a)).to_int ());\n+  assert ((b - a) == (sreal (b) - sreal (a)).to_int ());\n+}\n+\n+void\n+sreal_pass::verify_shifting (int a)\n+{\n+  sreal v = a;\n+\n+  for (unsigned i = 0; i < 16; i++)\n+    assert ((a << i) == (v << i).to_int());\n+\n+  a = a << 16;\n+  v = v << 16;\n+\n+  for (unsigned i = 0; i < 16; i++)\n+    assert ((a >> i) == (v >> i).to_int());\n+}\n+\n+void\n+sreal_pass::check_sreal ()\n+{\n+  sreal minimum = INT_MIN;\n+  sreal maximum = INT_MAX;\n+  sreal seven = 7;\n+  sreal minus_two = -2;\n+  sreal minus_nine = -9;\n+\n+  assert (minimum.to_int () == INT_MIN);\n+  assert (maximum.to_int () == INT_MAX);\n+\n+  assert (!(minus_two < minus_two));\n+  assert (!(seven < seven));\n+  assert (seven > minus_two);\n+  assert (minus_two < seven);\n+  assert (minus_two != seven);\n+  assert (minus_two == minus_two);\n+  assert (seven == seven);\n+\n+  assert (seven == ((seven << 10) >> 10));\n+\n+  assert ((seven + minus_two) == 5);\n+  assert ((seven + minus_nine) == -2);\n+\n+  for (int a = -100; a < 100; a++)\n+    for (int b = -100; b < 100; b++)\n+      {\n+        verify_aritmetics (a, b);\n+        verify_aritmetics (INT_MIN + 100, b);\n+        verify_aritmetics (INT_MAX - 100, b);\n+      }\n+\n+  srand (123456);\n+\n+  for (int i = 0; i < 1000 * 1000; i++)\n+    {\n+      verify_aritmetics (rand () % 10, rand () % 1000000);\n+      verify_aritmetics (rand () % 100, rand () % 10000);\n+    }\n+\n+  for (int a = -100; a < 100; a++)\n+    verify_shifting (a);\n+}\n+\n+bool sreal_pass::gate (function *)\n+{\n+  return true;\n+}\n+\n+unsigned int\n+sreal_pass::execute (function *)\n+{\n+  check_sreal ();\n+\n+  return 0;\n+}\n+\n+int plugin_init (struct plugin_name_args *plugin_info,\n+                 struct plugin_gcc_version *version)\n+{\n+  struct register_pass_info p;\n+\n+  p.pass = new sreal_pass (g);\n+  p.reference_pass_name = \"cfg\";\n+  p.ref_pass_instance_number = 1;\n+  p.pos_op = PASS_POS_INSERT_AFTER;\n+\n+  register_callback (\"sreal\", PLUGIN_PASS_MANAGER_SETUP, NULL, &p);\n+\n+  return 0;\n+}"}]}