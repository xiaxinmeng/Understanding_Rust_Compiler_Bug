{"sha": "ee3958cfe190f6c0925deb9f3c573b87dc6c9ca4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWUzOTU4Y2ZlMTkwZjZjMDkyNWRlYjlmM2M1NzNiODdkYzZjOWNhNA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-05-09T07:49:18Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-05-09T07:49:18Z"}, "message": "Makefile.in (GTFILES): Remove tree-ssa-propagate.c.\n\n2014-05-09  Richard Biener  <rguenther@suse.de>\n\n\t* Makefile.in (GTFILES): Remove tree-ssa-propagate.c.\n\t* tree-ssa-propagate.c: Do not include gt-tree-ssa-propagate.h.\n\t(interesting_ssa_edges, varying_ssa_edges): Move out of GC space.\n\t(add_ssa_edge, process_ssa_edge_worklist, ssa_prop_init,\n\tssa_propagate): Adjust.\n\nFrom-SVN: r210261", "tree": {"sha": "4d2e0758782c12dfeb2584fcc6ff778f83b57e35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d2e0758782c12dfeb2584fcc6ff778f83b57e35"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee3958cfe190f6c0925deb9f3c573b87dc6c9ca4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee3958cfe190f6c0925deb9f3c573b87dc6c9ca4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee3958cfe190f6c0925deb9f3c573b87dc6c9ca4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee3958cfe190f6c0925deb9f3c573b87dc6c9ca4/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3ce2cd363211b991daaba5b3ee52309a524c3fe9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ce2cd363211b991daaba5b3ee52309a524c3fe9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ce2cd363211b991daaba5b3ee52309a524c3fe9"}], "stats": {"total": 37, "additions": 21, "deletions": 16}, "files": [{"sha": "879bd55a4f3145cf2e18e4330f563be62f9873c0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee3958cfe190f6c0925deb9f3c573b87dc6c9ca4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee3958cfe190f6c0925deb9f3c573b87dc6c9ca4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ee3958cfe190f6c0925deb9f3c573b87dc6c9ca4", "patch": "@@ -1,3 +1,11 @@\n+2014-05-09  Richard Biener  <rguenther@suse.de>\n+\n+\t* Makefile.in (GTFILES): Remove tree-ssa-propagate.c.\n+\t* tree-ssa-propagate.c: Do not include gt-tree-ssa-propagate.h.\n+\t(interesting_ssa_edges, varying_ssa_edges): Move out of GC space.\n+\t(add_ssa_edge, process_ssa_edge_worklist, ssa_prop_init,\n+\tssa_propagate): Adjust.\n+\n 2014-05-08  Jeff Law  <law@redhat.com>\n \n \tPR tree-optimization/61009"}, {"sha": "5492e81ad560ef30b68c54f2d621d07177e1394a", "filename": "gcc/Makefile.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee3958cfe190f6c0925deb9f3c573b87dc6c9ca4/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee3958cfe190f6c0925deb9f3c573b87dc6c9ca4/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=ee3958cfe190f6c0925deb9f3c573b87dc6c9ca4", "patch": "@@ -2272,7 +2272,6 @@ GTFILES = $(CPP_ID_DATA_H) $(srcdir)/input.h $(srcdir)/coretypes.h \\\n   $(srcdir)/omp-low.c \\\n   $(srcdir)/targhooks.c $(out_file) $(srcdir)/passes.c $(srcdir)/cgraphunit.c \\\n   $(srcdir)/cgraphclones.c \\\n-  $(srcdir)/tree-ssa-propagate.c \\\n   $(srcdir)/tree-phinodes.c \\\n   $(srcdir)/tree-ssa-alias.h \\\n   $(srcdir)/tree-ssanames.h \\"}, {"sha": "4e76d97e63974d18b6b8b3f19a922c04998ede6a", "filename": "gcc/tree-ssa-propagate.c", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee3958cfe190f6c0925deb9f3c573b87dc6c9ca4/gcc%2Ftree-ssa-propagate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee3958cfe190f6c0925deb9f3c573b87dc6c9ca4/gcc%2Ftree-ssa-propagate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-propagate.c?ref=ee3958cfe190f6c0925deb9f3c573b87dc6c9ca4", "patch": "@@ -153,7 +153,7 @@ static sbitmap bb_in_list;\n    definition has changed.  SSA edges are def-use edges in the SSA\n    web.  For each D-U edge, we store the target statement or PHI node\n    U.  */\n-static GTY(()) vec<gimple, va_gc> *interesting_ssa_edges;\n+static vec<gimple> interesting_ssa_edges;\n \n /* Identical to INTERESTING_SSA_EDGES.  For performance reasons, the\n    list of SSA edges is split into two.  One contains all SSA edges\n@@ -169,7 +169,7 @@ static GTY(()) vec<gimple, va_gc> *interesting_ssa_edges;\n    don't use a separate worklist for VARYING edges, we end up with\n    situations where lattice values move from\n    UNDEFINED->INTERESTING->VARYING instead of UNDEFINED->VARYING.  */\n-static GTY(()) vec<gimple, va_gc> *varying_ssa_edges;\n+static vec<gimple> varying_ssa_edges;\n \n \n /* Return true if the block worklist empty.  */\n@@ -271,9 +271,9 @@ add_ssa_edge (tree var, bool is_varying)\n \t{\n \t  gimple_set_plf (use_stmt, STMT_IN_SSA_EDGE_WORKLIST, true);\n \t  if (is_varying)\n-\t    vec_safe_push (varying_ssa_edges, use_stmt);\n+\t    varying_ssa_edges.safe_push (use_stmt);\n \t  else\n-\t    vec_safe_push (interesting_ssa_edges, use_stmt);\n+\t    interesting_ssa_edges.safe_push (use_stmt);\n \t}\n     }\n }\n@@ -369,15 +369,15 @@ simulate_stmt (gimple stmt)\n    SSA edge is added to it in simulate_stmt.  */\n \n static void\n-process_ssa_edge_worklist (vec<gimple, va_gc> **worklist)\n+process_ssa_edge_worklist (vec<gimple> *worklist)\n {\n   /* Drain the entire worklist.  */\n-  while ((*worklist)->length () > 0)\n+  while (worklist->length () > 0)\n     {\n       basic_block bb;\n \n       /* Pull the statement to simulate off the worklist.  */\n-      gimple stmt = (*worklist)->pop ();\n+      gimple stmt = worklist->pop ();\n \n       /* If this statement was already visited by simulate_block, then\n \t we don't need to visit it again here.  */\n@@ -492,8 +492,8 @@ ssa_prop_init (void)\n   basic_block bb;\n \n   /* Worklists of SSA edges.  */\n-  vec_alloc (interesting_ssa_edges, 20);\n-  vec_alloc (varying_ssa_edges, 20);\n+  interesting_ssa_edges.create (20);\n+  varying_ssa_edges.create (20);\n \n   executable_blocks = sbitmap_alloc (last_basic_block_for_fn (cfun));\n   bitmap_clear (executable_blocks);\n@@ -535,8 +535,8 @@ ssa_prop_init (void)\n static void\n ssa_prop_fini (void)\n {\n-  vec_free (interesting_ssa_edges);\n-  vec_free (varying_ssa_edges);\n+  interesting_ssa_edges.release ();\n+  varying_ssa_edges.release ();\n   cfg_blocks.release ();\n   sbitmap_free (bb_in_list);\n   sbitmap_free (executable_blocks);\n@@ -859,8 +859,8 @@ ssa_propagate (ssa_prop_visit_stmt_fn visit_stmt,\n \n   /* Iterate until the worklists are empty.  */\n   while (!cfg_blocks_empty_p ()\n-\t || interesting_ssa_edges->length () > 0\n-\t || varying_ssa_edges->length () > 0)\n+\t || interesting_ssa_edges.length () > 0\n+\t || varying_ssa_edges.length () > 0)\n     {\n       if (!cfg_blocks_empty_p ())\n \t{\n@@ -1464,5 +1464,3 @@ propagate_tree_value_into_stmt (gimple_stmt_iterator *gsi, tree val)\n   else\n     gcc_unreachable ();\n }\n-\n-#include \"gt-tree-ssa-propagate.h\""}]}