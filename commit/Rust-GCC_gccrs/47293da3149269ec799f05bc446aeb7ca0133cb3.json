{"sha": "47293da3149269ec799f05bc446aeb7ca0133cb3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDcyOTNkYTMxNDkyNjllYzc5OWYwNWJjNDQ2YWViN2NhMDEzM2NiMw==", "commit": {"author": {"name": "Giovanni Bajo", "email": "giovannibajo@gcc.gnu.org", "date": "2004-07-08T10:03:59Z"}, "committer": {"name": "Giovanni Bajo", "email": "giovannibajo@gcc.gnu.org", "date": "2004-07-08T10:03:59Z"}, "message": "re PR c++/16169 (-Weffc++ item 15 improvements)\n\n\tPR c++/16169\n\t* typeck.c (check_return_expr): Improve -Weffc++ warning: handle\n\treturning CALL_EXPR, and non-reference return type.\n\n\tPR c++/16169\n\t* g++.dg/warn/effc2.C: New test.\n\nFrom-SVN: r84283", "tree": {"sha": "d6a518fc3bf2f568debfc19d1f6f5586cca06105", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6a518fc3bf2f568debfc19d1f6f5586cca06105"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47293da3149269ec799f05bc446aeb7ca0133cb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47293da3149269ec799f05bc446aeb7ca0133cb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47293da3149269ec799f05bc446aeb7ca0133cb3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47293da3149269ec799f05bc446aeb7ca0133cb3/comments", "author": {"login": "rasky", "id": 1014109, "node_id": "MDQ6VXNlcjEwMTQxMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1014109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rasky", "html_url": "https://github.com/rasky", "followers_url": "https://api.github.com/users/rasky/followers", "following_url": "https://api.github.com/users/rasky/following{/other_user}", "gists_url": "https://api.github.com/users/rasky/gists{/gist_id}", "starred_url": "https://api.github.com/users/rasky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rasky/subscriptions", "organizations_url": "https://api.github.com/users/rasky/orgs", "repos_url": "https://api.github.com/users/rasky/repos", "events_url": "https://api.github.com/users/rasky/events{/privacy}", "received_events_url": "https://api.github.com/users/rasky/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rasky", "id": 1014109, "node_id": "MDQ6VXNlcjEwMTQxMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1014109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rasky", "html_url": "https://github.com/rasky", "followers_url": "https://api.github.com/users/rasky/followers", "following_url": "https://api.github.com/users/rasky/following{/other_user}", "gists_url": "https://api.github.com/users/rasky/gists{/gist_id}", "starred_url": "https://api.github.com/users/rasky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rasky/subscriptions", "organizations_url": "https://api.github.com/users/rasky/orgs", "repos_url": "https://api.github.com/users/rasky/repos", "events_url": "https://api.github.com/users/rasky/events{/privacy}", "received_events_url": "https://api.github.com/users/rasky/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70ce47b582454762c68f9ef7c63ce147d95eae02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70ce47b582454762c68f9ef7c63ce147d95eae02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70ce47b582454762c68f9ef7c63ce147d95eae02"}], "stats": {"total": 76, "additions": 73, "deletions": 3}, "files": [{"sha": "8aa6b1c34b9bdb69bf8e56b03ebbf82974556c54", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47293da3149269ec799f05bc446aeb7ca0133cb3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47293da3149269ec799f05bc446aeb7ca0133cb3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=47293da3149269ec799f05bc446aeb7ca0133cb3", "patch": "@@ -1,3 +1,9 @@\n+2004-07-08  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n+\n+\tPR c++/16169\n+\t* typeck.c (check_return_expr): Improve -Weffc++ warning: handle\n+\treturning CALL_EXPR, and non-reference return type.\n+\n 2004-07-08  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* name-lookup.c (push_binding): Use VEC_reserve."}, {"sha": "55b3ef3bc57574017f17cdd40089abd9976fe15c", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47293da3149269ec799f05bc446aeb7ca0133cb3/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47293da3149269ec799f05bc446aeb7ca0133cb3/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=47293da3149269ec799f05bc446aeb7ca0133cb3", "patch": "@@ -5989,9 +5989,29 @@ check_return_expr (tree retval)\n \n   /* Effective C++ rule 15.  See also start_function.  */\n   if (warn_ecpp\n-      && DECL_NAME (current_function_decl) == ansi_assopname(NOP_EXPR)\n-      && retval != current_class_ref)\n-    warning (\"`operator=' should return a reference to `*this'\");\n+      && DECL_NAME (current_function_decl) == ansi_assopname(NOP_EXPR))\n+    {\n+      bool warn = true;\n+\n+      /* The function return type must be a reference to the current\n+\tclass.  */\n+      if (TREE_CODE (valtype) == REFERENCE_TYPE\n+\t  && same_type_ignoring_top_level_qualifiers_p\n+\t      (TREE_TYPE (valtype), TREE_TYPE (current_class_ref)))\n+\t{\n+\t  /* Returning '*this' is obviously OK.  */\n+\t  if (retval == current_class_ref)\n+\t    warn = false;\n+\t  /* If we are calling a function whose return type is the same of\n+\t     the current class reference, it is ok.  */\n+\t  else if (TREE_CODE (retval) == INDIRECT_REF\n+\t\t   && TREE_CODE (TREE_OPERAND (retval, 0)) == CALL_EXPR)\n+\t    warn = false;\r\n+\t}\n+\n+      if (warn)\n+\twarning (\"`operator=' should return a reference to `*this'\");\n+    }\n \n   /* The fabled Named Return Value optimization, as per [class.copy]/15:\n "}, {"sha": "1a3e2c09e711a12e248b9d65dfe4d94a9cd52f5a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47293da3149269ec799f05bc446aeb7ca0133cb3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47293da3149269ec799f05bc446aeb7ca0133cb3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=47293da3149269ec799f05bc446aeb7ca0133cb3", "patch": "@@ -1,3 +1,8 @@\n+2004-07-08  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n+\n+\tPR c++/16169\n+\t* g++.dg/warn/effc2.C: New test.\n+\n 2004-07-08  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \t* gcc.c-torture/execute/bitfld-1.x: Remove."}, {"sha": "fb765f0d81a1517f0d3667d18c60bd64335c54c3", "filename": "gcc/testsuite/g++.dg/warn/effc2.C", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47293da3149269ec799f05bc446aeb7ca0133cb3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Feffc2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47293da3149269ec799f05bc446aeb7ca0133cb3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Feffc2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Feffc2.C?ref=47293da3149269ec799f05bc446aeb7ca0133cb3", "patch": "@@ -0,0 +1,39 @@\n+// { dg-do compile }\n+// { dg-options \"-Weffc++\" }\n+// Contributed by Benjamin Kosnik <bkoz at redhat dot com>\n+// PR c++/16169 : Improve -Weffc++ rule 15\n+\n+struct A {\n+ const A& foo();\n+ const A& operator=(int)\n+ { return foo(); }\n+};\n+\n+struct B {\n+  B& foo();\n+  B& operator=(int)\n+  { return foo(); }\n+};\n+\n+struct C {\n+  C& operator=(int)\n+  { return *this; }\n+};\n+\n+struct D {\n+  D operator=(int)\n+  { return *this; }      // { dg-warning \"should return a reference\" }\n+};\n+\n+struct E {\n+  E& foo();\n+  E operator=(int)\n+  { return foo(); }      // { dg-warning \"should return a reference\" }\n+};\n+\n+struct F\n+{\n+  operator float();\n+  float operator=(int)\n+  { return *this; }      // { dg-warning \"should return a reference\" }\n+};"}]}