{"sha": "08e99efb2e7b5638af23f6c2b54840e7a943e107", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDhlOTllZmIyZTdiNTYzOGFmMjNmNmMyYjU0ODQwZTdhOTQzZTEwNw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-10-22T10:16:20Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-10-22T10:16:20Z"}, "message": "ChangeLog: Fix whitespace.\n\nFrom-SVN: r229169", "tree": {"sha": "fa356af74e6f2859a229397f78347e9dff2e2a05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa356af74e6f2859a229397f78347e9dff2e2a05"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08e99efb2e7b5638af23f6c2b54840e7a943e107", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08e99efb2e7b5638af23f6c2b54840e7a943e107", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08e99efb2e7b5638af23f6c2b54840e7a943e107", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08e99efb2e7b5638af23f6c2b54840e7a943e107/comments", "author": null, "committer": null, "parents": [{"sha": "692b1131a7cc0c5bfa3137a6489b4ef9715b635e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/692b1131a7cc0c5bfa3137a6489b4ef9715b635e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/692b1131a7cc0c5bfa3137a6489b4ef9715b635e"}], "stats": {"total": 40, "additions": 22, "deletions": 18}, "files": [{"sha": "607547e1a9fd3ce9f6343e8d448359fd008db865", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08e99efb2e7b5638af23f6c2b54840e7a943e107/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08e99efb2e7b5638af23f6c2b54840e7a943e107/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=08e99efb2e7b5638af23f6c2b54840e7a943e107", "patch": "@@ -39,7 +39,8 @@\n \t* config/aarch64/aarch64.md (aarch64_reload_movcp<GPF_TF:mode><P:mode>):\n \tUse aarch64_nopcrelative_literal_loads.\n \t(aarch64_reload_movcp<VALL:mode><P:mode>): Likewise.\n-\t* config/aarch64/aarch64-protos.h (aarch64_nopcrelative_literal_loads): Declare\n+\t* config/aarch64/aarch64-protos.h (aarch64_nopcrelative_literal_loads):\n+\tDeclare.\n \n 2015-10-21  Martin Sebor  <msebor@redhat.com>\n \n@@ -136,16 +137,17 @@\n \t* graphite-scop-detection.c (parameter_index_in_region): Update call to\n \tinvariant_in_sese_p_rec.\n \t* graphite-sese-to-poly.c (extract_affine): Same.\n-\t* sese.c (invariant_in_sese_p_rec): Pass in an extra parameter has_vdefs.\n-\t(scalar_evolution_in_region): Return chrec_dont_know when the scalar variable\n-\tdepends on virtual definitions in the current region.\n+\t* sese.c (invariant_in_sese_p_rec): Pass in an extra\n+\tparameter has_vdefs.\n+\t(scalar_evolution_in_region): Return chrec_dont_know when the scalar\n+\tvariable depends on virtual definitions in the current region.\n \t* sese.h (invariant_in_sese_p_rec): Update declaration.\n \n 2015-10-21  Aditya Kumar  <aditya.k7@samsung.com>\n \t    Sebastian Pop  <s.pop@samsung.com>\n \n-\t* graphite-scop-detection.c (build_scops): Do not handle scops with more\n-\tthan PARAM_GRAPHITE_MAX_ARRAYS_PER_SCOP arrays.\n+\t* graphite-scop-detection.c (build_scops): Do not handle scops\n+\twith more than PARAM_GRAPHITE_MAX_ARRAYS_PER_SCOP arrays.\n \t* params.def (PARAM_GRAPHITE_MAX_ARRAYS_PER_SCOP): New.\n \n 2015-10-21  Mikhail Maltsev  <maltsevm@gmail.com>\n@@ -165,8 +167,7 @@\n \n 2015-10-11  Jan Hubicka  <hubicka@ucw.cz>\n \n-\t* fold-const.c (operand_equal_p): Add code matching empty\n-\tconstructors.\n+\t* fold-const.c (operand_equal_p): Add code matching empty constructors.\n \n 2015-10-21  Eric Botcazou  <ebotcazou@adacore.com>\n \n@@ -250,17 +251,20 @@\n 2015-10-21  Aditya Kumar  <aditya.k7@samsung.com>\n \t    Sebastian Pop  <s.pop@samsung.com>\n \n-\t* graphite-isl-ast-to-gimple.c (graphite_create_new_loop_guard): Do not call\n-\tcreate_empty_if_region_on_edge when cond_expr is true.\n+\t* graphite-isl-ast-to-gimple.c (graphite_create_new_loop_guard):\n+\tDo not call create_empty_if_region_on_edge when cond_expr is true.\n \t(translate_isl_ast_node_for): Check whether a guard has been generated.\n \n 2015-10-21  Aditya Kumar  <aditya.k7@samsung.com>\n \n \t* graphite-poly.h (struct dr_info): Added invalid_alias_set number.\n \t(operator=): Removed.\n-\t(dr_info): Make alias_set number the last argument with default value of invalid_alias_set.\n-\t* graphite-sese-to-poly.c (build_scop_drs): Update constructor of dr_info.\n-\t(rewrite_reductions_out_of_ssa): Iterate only through the basic blocks which are inside region.\n+\t(dr_info): Make alias_set number the last argument with default\n+\tvalue of invalid_alias_set.\n+\t* graphite-sese-to-poly.c (build_scop_drs): Update constructor\n+\tof dr_info.\n+\t(rewrite_reductions_out_of_ssa): Iterate only through the\n+\tbasic blocks which are inside region.\n \t(rewrite_cross_bb_scalar_deps_out_of_ssa): Same.\n \t* sese.h (struct sese_l): Removed assignment operator.\n \t(split_region_for_bb): Removed dead code.\n@@ -315,11 +319,11 @@\n \n \tPR middle-end/67966\n \t* tree.c (verify_type): Verify that TYPE_MODE match\n- \tbetween TYPE_CANONICAL and type.\n- \t* expr.c (store_expr_with_bounds): Revert my previous change.\n- \t* expmed.c (store_bit_field_1): Revert prevoius change.\n- \t* gimple-expr.c (useless_type_conversion_p): Require TYPE_MODE\n- \tto match for all types.\n+\tbetween TYPE_CANONICAL and type.\n+\t* expr.c (store_expr_with_bounds): Revert my previous change.\n+\t* expmed.c (store_bit_field_1): Revert prevoius change.\n+\t* gimple-expr.c (useless_type_conversion_p): Require TYPE_MODE\n+\tto match for all types.\n \n 2015-10-21  Nathan Sidwell  <nathan@codesourcery.com>\n "}]}