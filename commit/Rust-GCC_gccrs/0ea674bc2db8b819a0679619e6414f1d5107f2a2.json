{"sha": "0ea674bc2db8b819a0679619e6414f1d5107f2a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGVhNjc0YmMyZGI4YjgxOWEwNjc5NjE5ZTY0MTRmMWQ1MTA3ZjJhMg==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1992-04-08T02:36:25Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1992-04-08T02:36:25Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r701", "tree": {"sha": "f5956bdd0c5f635fe43f691a336becb72c478d7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5956bdd0c5f635fe43f691a336becb72c478d7e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ea674bc2db8b819a0679619e6414f1d5107f2a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ea674bc2db8b819a0679619e6414f1d5107f2a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ea674bc2db8b819a0679619e6414f1d5107f2a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ea674bc2db8b819a0679619e6414f1d5107f2a2/comments", "author": null, "committer": null, "parents": [{"sha": "a9c3f03ac114279cf8d080e7f0b1ec5d262b4646", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9c3f03ac114279cf8d080e7f0b1ec5d262b4646", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9c3f03ac114279cf8d080e7f0b1ec5d262b4646"}], "stats": {"total": 134, "additions": 131, "deletions": 3}, "files": [{"sha": "ca6898e806da7f43175ca8759a35bc7bf6489512", "filename": "gcc/halfpic.c", "status": "modified", "additions": 131, "deletions": 3, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ea674bc2db8b819a0679619e6414f1d5107f2a2/gcc%2Fhalfpic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ea674bc2db8b819a0679619e6414f1d5107f2a2/gcc%2Fhalfpic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhalfpic.c?ref=0ea674bc2db8b819a0679619e6414f1d5107f2a2", "patch": "@@ -34,18 +34,61 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #include \"tree.h\"\n #include \"rtl.h\"\n #include <stdio.h>\n+#include \"obstack.h\"\n \n+#define obstack_chunk_alloc xmalloc\n+#define obstack_chunk_free free\n+\n+extern char *xmalloc ();\n+extern void  free ();\n extern rtx eliminate_constant_term ();\n \n int flag_half_pic;\t\t/* Global half-pic flag.  */\n \n+/* Obstack to hold generated pic names.  */\n+static struct obstack half_pic_obstack;\n+\n+/* List of pointers created to pic references.  */\n+\n+struct all_refs {\n+  struct all_refs *next;\t/* next name created */\n+  rtx\t\t   ref;\t\t/* reference rtl */\n+  char\t\t  *ref_name;\t/* reference name to ptr to real_name */\n+  int\t\t   ref_len;\t/* reference name length */\n+  char\t\t  *real_name;\t/* real function/data name */\n+  int\t\t   real_len;\t/* strlen (real_name) */\n+};\n+\n+static struct all_refs *half_pic_names;\n+\n \f\n /* Do any half-pic initializations.  */\n \n void\n half_pic_init ()\n {\n   flag_half_pic = TRUE;\n+  obstack_init (&half_pic_obstack);\n+}\n+\n+\f\n+/* Write out all pointers to pic references.  */\n+\n+void\n+half_pic_finish (stream)\n+     FILE *stream;\n+{\n+  struct all_refs *p = half_pic_names;\n+\n+  if (!p)\n+    return;\n+\n+  data_section ();\n+  for (; p != 0; p = p->next)\n+    {\n+      ASM_OUTPUT_LABEL (stream, p->ref_name);\n+      ASM_OUTPUT_INT (stream, gen_rtx (SYMBOL_REF, Pmode, p->real_name));\n+    }\n }\n \n \f\n@@ -55,9 +98,30 @@ void\n half_pic_encode (decl)\n      tree decl;\n {\n-#if 0\n-  fprintf (stderr, \"\\n========== Half_pic_encode\\n\");\n-  debug_tree (decl);\n+  enum tree_code code = TREE_CODE (decl);\n+  tree asm_name;\n+\n+  if (!flag_half_pic)\n+    return;\n+\n+  if (code != VAR_DECL && code != FUNCTION_DECL)\n+    return;\n+\n+  /* If this is not an external reference, it can't be half-pic.  */\n+  if (!TREE_EXTERNAL (decl))\n+    return;\n+\n+  asm_name = DECL_ASSEMBLER_NAME (decl);\n+  if (!asm_name)\n+    return;\n+\n+  TREE_PUBLIC (asm_name) = TRUE;\n+\n+#ifdef HALF_PIC_DEBUG\n+  if (HALF_PIC_DEBUG)\n+    fprintf (stderr, \"\\n========== Half_pic_encode %.*s\\n\",\n+\t     IDENTIFIER_LENGTH (asm_name),\n+\t     IDENTIFIER_POINTER (asm_name));\n #endif\n }\n \n@@ -69,6 +133,10 @@ half_pic_address_p (addr)\n      rtx addr;\n {\n   char *name;\n+  tree tname;\n+\n+  if (!flag_half_pic)\n+    return FALSE;\n \n   switch (GET_CODE (addr))\n     {\n@@ -84,12 +152,72 @@ half_pic_address_p (addr)\n     case SYMBOL_REF:\n       name = XSTR (addr, 0);\n \n+#ifdef HALF_PIC_DEBUG\n+      if (HALF_PIC_DEBUG)\n+\tfprintf (stderr, \"\\n========== Half_pic_address_p %s\\n\", name);\n+#endif\n+\n       /* If this is a label, it will have a '*' in front of it.  */\n       if (name[0] == '*')\n \treturn FALSE;\n+\n+      tname = get_identifier (name);\n+      if (TREE_PUBLIC (tname))\n+\t{\n+#ifdef HALF_PIC_DEBUG\n+\t  if (HALF_PIC_DEBUG)\n+\t    fprintf (stderr, \"%s is half-pic\\n\", name);\n+#endif\n+\t  return TRUE;\n+\t}\n     }\n \n   return FALSE;\n }\n \n+\f\n+/* Return the name of the pointer to the PIC function, allocating\n+   it if need be.  */\n+\n+struct rtx_def *\n+half_pic_ptr (operand)\n+     rtx operand;\n+{\n+  char *name;\n+  tree tname;\n+  struct all_refs *p;\n+  int ch;\n+  int len;\n+  int prefix_len;\n+\n+  if (GET_CODE (operand) != SYMBOL_REF)\n+    return operand;\n+\n+  name = XSTR (operand, 0);\n+  len = strlen (name);\n+  ch = name[0];\n+  for (p = half_pic_names; p != 0; p = p->next)\n+    {\n+      if (ch == *(p->ref_name)\n+\t  && len == p->real_len\n+\t  && !strcmp (name, p->real_name))\n+\treturn p->ref;\n+    }\n+\n+  p = (struct all_refs *) obstack_alloc (&half_pic_obstack, sizeof (struct all_refs));\n+\n+  prefix_len = strlen (HALF_PIC_PREFIX);\n+  obstack_grow (&half_pic_obstack, HALF_PIC_PREFIX, prefix_len);\n+  obstack_grow (&half_pic_obstack, name, len);\n+\n+  p->next      = half_pic_names;\n+  p->real_name = name;\n+  p->real_len  = len;\n+  p->ref_len   = len + prefix_len;\n+  p->ref_name  = (char *) obstack_finish (&half_pic_obstack);\n+  p->ref       = gen_rtx (SYMBOL_REF, Pmode, p->ref_name);\n+\n+  half_pic_names = p;\n+}\n+\n #endif /* HALF_PIC_INIT */"}]}