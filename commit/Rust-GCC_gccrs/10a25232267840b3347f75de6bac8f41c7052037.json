{"sha": "10a25232267840b3347f75de6bac8f41c7052037", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTBhMjUyMzIyNjc4NDBiMzM0N2Y3NWRlNmJhYzhmNDFjNzA1MjAzNw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1998-03-18T16:21:14Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1998-03-18T16:21:14Z"}, "message": "alpha.md (extzv): Don't reject register operands.\n\n* alpha.md (extzv): Don't reject register operands.  Fix\nmode of operand 1.\n\nFrom-SVN: r18676", "tree": {"sha": "571569c3131dd4cd811e5ccce9a2def713ad3463", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/571569c3131dd4cd811e5ccce9a2def713ad3463"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10a25232267840b3347f75de6bac8f41c7052037", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10a25232267840b3347f75de6bac8f41c7052037", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10a25232267840b3347f75de6bac8f41c7052037", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10a25232267840b3347f75de6bac8f41c7052037/comments", "author": null, "committer": null, "parents": [{"sha": "99d1a24c9b2e72fe14e20a783dc12bbd6a48d315", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99d1a24c9b2e72fe14e20a783dc12bbd6a48d315", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99d1a24c9b2e72fe14e20a783dc12bbd6a48d315"}], "stats": {"total": 32, "additions": 18, "deletions": 14}, "files": [{"sha": "d42a14cfa1958f44fc4165798ed653fe2490c2ec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a25232267840b3347f75de6bac8f41c7052037/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a25232267840b3347f75de6bac8f41c7052037/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=10a25232267840b3347f75de6bac8f41c7052037", "patch": "@@ -1,3 +1,8 @@\n+Wed Mar 18 16:20:30 1998  Richard Henderson  <rth@cygnus.com>\n+\n+\t* alpha.md (extzv): Don't reject register operands.  Fix\n+\tmode of operand 1.\n+\n Wed Mar 18 16:14:23 1998  Richard Henderson  <rth@cygnus.com>\n \n \t* dbxout.c (dbxout_function_end): Fix last change.  The correct"}, {"sha": "ced647b7ce8ae18d02a24658255f50c7b46cf505", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a25232267840b3347f75de6bac8f41c7052037/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a25232267840b3347f75de6bac8f41c7052037/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=10a25232267840b3347f75de6bac8f41c7052037", "patch": "@@ -4873,28 +4873,27 @@\n \n (define_expand \"extzv\"\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(zero_extract:DI (match_operand:QI 1 \"memory_operand\" \"\")\n+\t(zero_extract:DI (match_operand:DI 1 \"memory_operand\" \"\")\n \t\t\t (match_operand:DI 2 \"immediate_operand\" \"\")\n \t\t\t (match_operand:DI 3 \"immediate_operand\" \"\")))]\n   \"\"\n   \"\n {\n-  /* We can do 16, 32 and 64 bit fields, if aligned on byte boundaries.  */\n-  if (INTVAL (operands[3]) % 8 != 0\n-      || (INTVAL (operands[2]) != 16\n-\t  && INTVAL (operands[2]) != 32\n-\t  && INTVAL (operands[2]) != 64))\n+  /* We can do 8, 16, 32 and 64 bit fields, if aligned on byte boundaries.  */\n+  if (INTVAL (operands[2]) % 8 != 0 || INTVAL (operands[3]) % 8 != 0)\n     FAIL;\n \n-  /* From mips.md: extract_bit_field doesn't verify that our source\n-     matches the predicate, so we force it to be a MEM here.  */\n-  if (GET_CODE (operands[1]) != MEM)\n-    FAIL;\n+  if (GET_CODE (operands[1]) == MEM)\n+    {\n+      /* Fail 8 bit fields, falling back on a simple byte load.  */\n+      if (INTVAL (operands[2]) == 8)\n+\tFAIL;\n \n-  alpha_expand_unaligned_load (operands[0], operands[1],\n-\t\t\t       INTVAL (operands[2]) / 8,\n-\t\t\t       INTVAL (operands[3]) / 8, 0);\n-  DONE;\n+      alpha_expand_unaligned_load (operands[0], operands[1],\n+\t\t\t           INTVAL (operands[2]) / 8,\n+\t\t\t           INTVAL (operands[3]) / 8, 0);\n+      DONE;\n+    }\n }\")\n \n (define_expand \"insv\""}]}