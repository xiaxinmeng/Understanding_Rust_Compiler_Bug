{"sha": "fc9c6e5d64f4dbdc1f7a53a4fa14ddc3f124f165", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM5YzZlNWQ2NGY0ZGJkYzFmN2E1M2E0ZmExNGRkYzNmMTI0ZjE2NQ==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2009-06-26T22:11:15Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2009-06-26T22:11:15Z"}, "message": "re PR fortran/39997 (Procedure(), pointer  & implicit typing: rejects-valid / accepts-invalid?)\n\n2009-06-26  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/39997\n\tPR fortran/40541\n\t* decl.c (add_hidden_procptr_result): Copy the typespec to the hidden\n\tresult.\n\t* expr.c (gfc_check_pointer_assign): Enable interface check for\n\tprocedure pointer assignments where the rhs is a function returning a\n\tprocedure pointer.\n\t* resolve.c (resolve_symbol): If an external procedure with unspecified\n\treturn type can not be implicitly typed, it must be a subroutine.\n\n\n2009-06-26  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/39997\n\tPR fortran/40541\n\t* gfortran.dg/proc_ptr_15.f90: Fixed and extended.\n\t* gfortran.dg/proc_ptr_common_1.f90: Fixed invalid test case.\n\t* gfortran.dg/proc_ptr_result_1.f90: Ditto.\n\t* gfortran.dg/proc_ptr_result_5.f90: New.\n\nFrom-SVN: r148996", "tree": {"sha": "a011c58836777edcbf0334f314676e4eccd1a4bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a011c58836777edcbf0334f314676e4eccd1a4bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc9c6e5d64f4dbdc1f7a53a4fa14ddc3f124f165", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc9c6e5d64f4dbdc1f7a53a4fa14ddc3f124f165", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc9c6e5d64f4dbdc1f7a53a4fa14ddc3f124f165", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc9c6e5d64f4dbdc1f7a53a4fa14ddc3f124f165/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9833720d3bf1e5adf2319bb480b882dad8060182", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9833720d3bf1e5adf2319bb480b882dad8060182", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9833720d3bf1e5adf2319bb480b882dad8060182"}], "stats": {"total": 89, "additions": 75, "deletions": 14}, "files": [{"sha": "2cfbe24316a609a61c76039a92115689f8971c15", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc9c6e5d64f4dbdc1f7a53a4fa14ddc3f124f165/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc9c6e5d64f4dbdc1f7a53a4fa14ddc3f124f165/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=fc9c6e5d64f4dbdc1f7a53a4fa14ddc3f124f165", "patch": "@@ -1,3 +1,15 @@\n+2009-06-26  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/39997\n+\tPR fortran/40541\n+\t* decl.c (add_hidden_procptr_result): Copy the typespec to the hidden\n+\tresult.\n+\t* expr.c (gfc_check_pointer_assign): Enable interface check for\n+\tprocedure pointer assignments where the rhs is a function returning a\n+\tprocedure pointer.\n+\t* resolve.c (resolve_symbol): If an external procedure with unspecified\n+\treturn type can not be implicitly typed, it must be a subroutine.\n+\n 2009-06-24  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/40427"}, {"sha": "179d1e2e61af8d62808f5b305359d126361ff2ad", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc9c6e5d64f4dbdc1f7a53a4fa14ddc3f124f165/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc9c6e5d64f4dbdc1f7a53a4fa14ddc3f124f165/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=fc9c6e5d64f4dbdc1f7a53a4fa14ddc3f124f165", "patch": "@@ -4117,6 +4117,7 @@ add_hidden_procptr_result (gfc_symbol *sym)\n       sym->result->attr.pointer = sym->attr.pointer;\n       sym->result->attr.external = sym->attr.external;\n       sym->result->attr.referenced = sym->attr.referenced;\n+      sym->result->ts = sym->ts;\n       sym->attr.proc_pointer = 0;\n       sym->attr.pointer = 0;\n       sym->attr.external = 0;"}, {"sha": "2049fa400b1165ebd43081df69c82fc595e90f14", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc9c6e5d64f4dbdc1f7a53a4fa14ddc3f124f165/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc9c6e5d64f4dbdc1f7a53a4fa14ddc3f124f165/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=fc9c6e5d64f4dbdc1f7a53a4fa14ddc3f124f165", "patch": "@@ -3189,10 +3189,14 @@ gfc_check_pointer_assign (gfc_expr *lvalue, gfc_expr *rvalue)\n       /* TODO: Enable interface check for PPCs.  */\n       if (is_proc_ptr_comp (rvalue, NULL))\n \treturn SUCCESS;\n-      if (rvalue->expr_type == EXPR_VARIABLE\n-\t  && !gfc_compare_interfaces (lvalue->symtree->n.sym,\n-\t\t\t\t      rvalue->symtree->n.sym, 0, 1, err,\n-\t\t\t\t      sizeof(err)))\n+      if ((rvalue->expr_type == EXPR_VARIABLE\n+\t   && !gfc_compare_interfaces (lvalue->symtree->n.sym,\n+\t\t\t\t       rvalue->symtree->n.sym, 0, 1, err,\n+\t\t\t\t       sizeof(err)))\n+\t  || (rvalue->expr_type == EXPR_FUNCTION\n+\t      && !gfc_compare_interfaces (lvalue->symtree->n.sym,\n+\t\t\t\t\t  rvalue->symtree->n.sym->result, 0, 1,\n+\t\t\t\t\t  err, sizeof(err))))\n \t{\n \t  gfc_error (\"Interface mismatch in procedure pointer assignment \"\n \t\t     \"at %L: %s\", &rvalue->where, err);"}, {"sha": "9ea2a2d24d38099af12df5f96ff31c0a736ff870", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc9c6e5d64f4dbdc1f7a53a4fa14ddc3f124f165/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc9c6e5d64f4dbdc1f7a53a4fa14ddc3f124f165/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=fc9c6e5d64f4dbdc1f7a53a4fa14ddc3f124f165", "patch": "@@ -9551,6 +9551,11 @@ resolve_symbol (gfc_symbol *sym)\n       if (sym->attr.flavor == FL_VARIABLE || sym->attr.flavor == FL_PARAMETER)\n \tgfc_set_default_type (sym, 1, NULL);\n \n+      if (sym->attr.flavor == FL_PROCEDURE && sym->attr.external\n+\t  && !sym->attr.function && !sym->attr.subroutine\n+\t  && gfc_get_default_type (sym->name, sym->ns)->type == BT_UNKNOWN)\n+\tgfc_add_subroutine (&sym->attr, sym->name, &sym->declared_at);\n+\n       if (sym->attr.flavor == FL_PROCEDURE && sym->attr.function)\n \t{\n \t  /* The specific case of an external procedure should emit an error"}, {"sha": "cdfe1ff8b97074c68718e8a9ff070e60bab693e7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc9c6e5d64f4dbdc1f7a53a4fa14ddc3f124f165/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc9c6e5d64f4dbdc1f7a53a4fa14ddc3f124f165/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fc9c6e5d64f4dbdc1f7a53a4fa14ddc3f124f165", "patch": "@@ -1,3 +1,12 @@\n+2009-06-26  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/39997\n+\tPR fortran/40541\n+\t* gfortran.dg/proc_ptr_15.f90: Fixed and extended.\n+\t* gfortran.dg/proc_ptr_common_1.f90: Fixed invalid test case.\n+\t* gfortran.dg/proc_ptr_result_1.f90: Ditto.\n+\t* gfortran.dg/proc_ptr_result_5.f90: New.\n+\n 2009-06-26  Janis Johnson  <janis187@us.ibm.com>\n \n \tPR c/39902"}, {"sha": "3d37ee2d995b593b929d2dd3006d376f806dbab1", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_15.f90", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc9c6e5d64f4dbdc1f7a53a4fa14ddc3f124f165/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_15.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc9c6e5d64f4dbdc1f7a53a4fa14ddc3f124f165/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_15.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_15.f90?ref=fc9c6e5d64f4dbdc1f7a53a4fa14ddc3f124f165", "patch": "@@ -15,14 +15,15 @@\n ! valid\n p2 => iabs\n p3 => sub\n-p4 => p2\n+p4 => p3\n p6 => p1\n \n ! invalid\n p1 => iabs   ! { dg-error \"Type/kind mismatch in return value\" }\n p1 => p2     ! { dg-error \"Type/kind mismatch in return value\" }\n p1 => p5     ! { dg-error \"Type/kind mismatch in return value\" }\n p6 => iabs   ! { dg-error \"Type/kind mismatch in return value\" }\n+p4 => p2     ! { dg-error \"is not a subroutine\" }\n \n contains\n "}, {"sha": "df2ef0b79cc2e7477f6610c23e133ae6e986d66f", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_common_1.f90", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc9c6e5d64f4dbdc1f7a53a4fa14ddc3f124f165/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_common_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc9c6e5d64f4dbdc1f7a53a4fa14ddc3f124f165/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_common_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_common_1.f90?ref=fc9c6e5d64f4dbdc1f7a53a4fa14ddc3f124f165", "patch": "@@ -19,12 +19,13 @@ program main\n   integer :: x,y\n   intrinsic sin,cos\n   procedure(real), pointer :: func1\n-  external func2\n+  real, external :: func2\n   pointer func2\n   common /com/ func1,func2,x,y\n   x = 5\n   y = -9\n   func1 => cos\n   func2 => sin\n   call one()\n-end program main \n+end program main\n+"}, {"sha": "df830d3b1fcc65cda7bcc3229673032e67025c46", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_result_1.f90", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc9c6e5d64f4dbdc1f7a53a4fa14ddc3f124f165/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_result_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc9c6e5d64f4dbdc1f7a53a4fa14ddc3f124f165/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_result_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_result_1.f90?ref=fc9c6e5d64f4dbdc1f7a53a4fa14ddc3f124f165", "patch": "@@ -9,7 +9,7 @@ module mo\n \n   function j()\n     implicit none\n-    procedure(),pointer :: j\n+    procedure(integer),pointer :: j\n     intrinsic iabs\n     j => iabs\n   end function\n@@ -36,12 +36,20 @@ program proc_ptr_14\n if (p(-2)/=2) call abort()\n p => c()\n if (p(-3)/=3) call abort()\n-p => d()\n-if (p(-4)/=4) call abort()\n+\n+ps => d()\n+x = 4\n+call ps(x)\n+if (x/=16) call abort()\n+\n p => dd()\n if (p(-4)/=4) call abort()\n-p => e(iabs)\n-if (p(-5)/=5) call abort()\n+\n+ps => e(sub)\n+x = 5\n+call ps(x)\n+if (x/=25) call abort()\n+\n p => ee()\n if (p(-5)/=5) call abort()\n p => f()\n@@ -87,7 +95,7 @@ function c()\n   function d()\n     pointer :: d\n     external d\n-    d => iabs\n+    d => sub\n   end function\n \n   function dd()\n@@ -157,7 +165,7 @@ end function i\n   end function\n \n   function k(arg)\n-    procedure(),pointer :: k,arg\n+    procedure(integer),pointer :: k,arg\n     k => iabs\n     arg => k\n   end function"}, {"sha": "0e60cbb2a81027f6c3e33ff3460dd4ce6d787a16", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_result_5.f90", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc9c6e5d64f4dbdc1f7a53a4fa14ddc3f124f165/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_result_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc9c6e5d64f4dbdc1f7a53a4fa14ddc3f124f165/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_result_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_result_5.f90?ref=fc9c6e5d64f4dbdc1f7a53a4fa14ddc3f124f165", "patch": "@@ -0,0 +1,20 @@\n+! { dg-do compile }\n+!\n+! PR 40541: Assignment checking for proc-pointer => proc-ptr-returning-function()\n+!\n+! Contributed by Tobias Burnus <burnus@gcc.gnu.org>\n+\n+program test\n+  procedure(real), pointer :: p\n+  p => f()  ! { dg-error \"Type/kind mismatch in return value\" }\n+contains\n+ function f()\n+   pointer :: f\n+   interface\n+     logical(1) function f()\n+     end function\n+   end interface\n+   f = .true._1\n+ end function f\n+end program test\n+"}]}