{"sha": "533d4b998d2161784cc6601bd71901ca0ddb14cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTMzZDRiOTk4ZDIxNjE3ODRjYzY2MDFiZDcxOTAxY2EwZGRiMTRjYw==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2009-10-28T09:54:01Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2009-10-28T09:54:01Z"}, "message": "expmed.c (emit_store_flag): Check costs before transforming to the opposite representation.\n\n2009-10-28  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* expmed.c (emit_store_flag): Check costs before\n\ttransforming to the opposite representation.\n\nFrom-SVN: r153647", "tree": {"sha": "57ac75653d612f2a822e2d3d5ed0f3dc05876f42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57ac75653d612f2a822e2d3d5ed0f3dc05876f42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/533d4b998d2161784cc6601bd71901ca0ddb14cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/533d4b998d2161784cc6601bd71901ca0ddb14cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/533d4b998d2161784cc6601bd71901ca0ddb14cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/533d4b998d2161784cc6601bd71901ca0ddb14cc/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "42663bf1945195d1ead30d226010badbdb009bdb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42663bf1945195d1ead30d226010badbdb009bdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42663bf1945195d1ead30d226010badbdb009bdb"}], "stats": {"total": 29, "additions": 23, "deletions": 6}, "files": [{"sha": "63353b86964515223aa041c6f367f1ba8402211d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/533d4b998d2161784cc6601bd71901ca0ddb14cc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/533d4b998d2161784cc6601bd71901ca0ddb14cc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=533d4b998d2161784cc6601bd71901ca0ddb14cc", "patch": "@@ -1,3 +1,8 @@\n+2009-10-28  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* expmed.c (emit_store_flag): Check costs before\n+\ttransforming to the opposite representation.\n+\n 2009-10-28  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* config/sh/sh.md (cbranchfp4_media): Remove hack extending"}, {"sha": "8a5cf5054e7368dcb4ae39d55522ce6ae27ee56f", "filename": "gcc/expmed.c", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/533d4b998d2161784cc6601bd71901ca0ddb14cc/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/533d4b998d2161784cc6601bd71901ca0ddb14cc/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=533d4b998d2161784cc6601bd71901ca0ddb14cc", "patch": "@@ -5498,9 +5498,13 @@ emit_store_flag (rtx target, enum rtx_code code, rtx op0, rtx op1,\n \t      || (! HONOR_NANS (mode) && (code == LTGT || code == UNEQ))\n \t      || (! HONOR_SNANS (mode) && (code == EQ || code == NE))))\n \t{\n+          int want_add = ((STORE_FLAG_VALUE == 1 && normalizep == -1)\n+\t\t          || (STORE_FLAG_VALUE == -1 && normalizep == 1));\n+\n \t  /* For the reverse comparison, use either an addition or a XOR.  */\n-\t  if ((STORE_FLAG_VALUE == 1 && normalizep == -1)\n-\t      || (STORE_FLAG_VALUE == -1 && normalizep == 1))\n+          if (want_add\n+\t      && rtx_cost (GEN_INT (normalizep), PLUS,\n+\t\t\t   optimize_insn_for_speed_p ()) == 0)\n \t    {\n \t      tem = emit_store_flag_1 (subtarget, rcode, op0, op1, mode, 0,\n \t\t\t\t       STORE_FLAG_VALUE, target_mode);\n@@ -5509,7 +5513,9 @@ emit_store_flag (rtx target, enum rtx_code code, rtx op0, rtx op1,\n \t\t\t\t     GEN_INT (normalizep),\n \t\t\t\t     target, 0, OPTAB_WIDEN);\n \t    }\n-\t  else\n+          else if (!want_add\n+\t           && rtx_cost (trueval, XOR,\n+\t\t\t        optimize_insn_for_speed_p ()) == 0)\n \t    {\n \t      tem = emit_store_flag_1 (subtarget, rcode, op0, op1, mode, 0,\n \t\t\t\t       normalizep, target_mode);\n@@ -5596,17 +5602,23 @@ emit_store_flag (rtx target, enum rtx_code code, rtx op0, rtx op1,\n \t    && GET_MODE_SIZE (mode) < UNITS_PER_WORD\n \t    && op1 == const0_rtx))\n     {\n+      int want_add = ((STORE_FLAG_VALUE == 1 && normalizep == -1)\n+\t\t      || (STORE_FLAG_VALUE == -1 && normalizep == 1));\n+\n       /* Again, for the reverse comparison, use either an addition or a XOR.  */\n-      if ((STORE_FLAG_VALUE == 1 && normalizep == -1)\n-\t  || (STORE_FLAG_VALUE == -1 && normalizep == 1))\n+      if (want_add\n+\t  && rtx_cost (GEN_INT (normalizep), PLUS,\n+\t\t       optimize_insn_for_speed_p ()) == 0)\n \t{\n \t  tem = emit_store_flag_1 (subtarget, rcode, op0, op1, mode, 0,\n \t\t\t\t   STORE_FLAG_VALUE, target_mode);\n \t  if (tem != 0)\n             tem = expand_binop (target_mode, add_optab, tem,\n \t\t\t\tGEN_INT (normalizep), target, 0, OPTAB_WIDEN);\n \t}\n-      else\n+      else if (!want_add\n+\t       && rtx_cost (trueval, XOR,\n+\t\t\t    optimize_insn_for_speed_p ()) == 0)\n \t{\n \t  tem = emit_store_flag_1 (subtarget, rcode, op0, op1, mode, 0,\n \t\t\t\t   normalizep, target_mode);"}]}