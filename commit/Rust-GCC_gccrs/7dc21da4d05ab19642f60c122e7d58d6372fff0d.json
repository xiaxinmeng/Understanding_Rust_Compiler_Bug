{"sha": "7dc21da4d05ab19642f60c122e7d58d6372fff0d", "node_id": "C_kwDOANBUbNoAKDdkYzIxZGE0ZDA1YWIxOTY0MmY2MGMxMjJlN2Q1OGQ2MzcyZmZmMGQ", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-10-25T15:46:03Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-10-27T09:18:33Z"}, "message": "Add name resolution to higher ranked trait bounds", "tree": {"sha": "8ccef35f94db47dc4ae7b753dc5a47945325adec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ccef35f94db47dc4ae7b753dc5a47945325adec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7dc21da4d05ab19642f60c122e7d58d6372fff0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dc21da4d05ab19642f60c122e7d58d6372fff0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7dc21da4d05ab19642f60c122e7d58d6372fff0d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dc21da4d05ab19642f60c122e7d58d6372fff0d/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be717fca2f2f406166383d60741ca41aa0c514f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be717fca2f2f406166383d60741ca41aa0c514f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be717fca2f2f406166383d60741ca41aa0c514f0"}], "stats": {"total": 78, "additions": 77, "deletions": 1}, "files": [{"sha": "86c9934fec00961699cb3effdfcecbf4b6786cf6", "filename": "gcc/rust/resolve/rust-ast-resolve-item.h", "status": "modified", "additions": 47, "deletions": 1, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dc21da4d05ab19642f60c122e7d58d6372fff0d/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dc21da4d05ab19642f60c122e7d58d6372fff0d/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h?ref=7dc21da4d05ab19642f60c122e7d58d6372fff0d", "patch": "@@ -58,7 +58,8 @@ class ResolveTraitItems : public ResolverBase\n     resolver->get_type_scope ().append_reference_for_def (type.get_node_id (),\n \t\t\t\t\t\t\t  type.get_node_id ());\n \n-    // TODO resolve the type-bounds\n+    for (auto &bound : type.get_type_param_bounds ())\n+      ResolveTypeBound::go (bound.get (), type.get_node_id ());\n   }\n \n   void visit (AST::TraitItemFunc &func) override\n@@ -95,6 +96,9 @@ class ResolveTraitItems : public ResolverBase\n \t\t\t\t\t   param.get_node_id ());\n       }\n \n+    if (function.has_where_clause ())\n+      ResolveWhereClause::Resolve (function.get_where_clause ());\n+\n     // trait items have an optional body\n     if (func.has_definition ())\n       ResolveExpr::go (func.get_definition ().get (), func.get_node_id ());\n@@ -158,6 +162,9 @@ class ResolveTraitItems : public ResolverBase\n \t\t\t\t\t   param.get_node_id ());\n       }\n \n+    if (function.has_where_clause ())\n+      ResolveWhereClause::Resolve (function.get_where_clause ());\n+\n     // trait items have an optional body\n     if (func.has_definition ())\n       ResolveExpr::go (func.get_definition ().get (), func.get_node_id ());\n@@ -211,6 +218,9 @@ class ResolveItem : public ResolverBase\n \t  ResolveGenericParam::go (generic.get (), alias.get_node_id ());\n       }\n \n+    if (alias.has_where_clause ())\n+      ResolveWhereClause::Resolve (alias.get_where_clause ());\n+\n     ResolveType::go (alias.get_type_aliased ().get (), alias.get_node_id ());\n \n     resolver->get_type_scope ().pop ();\n@@ -251,6 +261,9 @@ class ResolveItem : public ResolverBase\n \t  }\n       }\n \n+    if (struct_decl.has_where_clause ())\n+      ResolveWhereClause::Resolve (struct_decl.get_where_clause ());\n+\n     struct_decl.iterate ([&] (AST::TupleField &field) mutable -> bool {\n       ResolveType::go (field.get_field_type ().get (),\n \t\t       struct_decl.get_node_id ());\n@@ -273,6 +286,9 @@ class ResolveItem : public ResolverBase\n \t  }\n       }\n \n+    if (enum_decl.has_where_clause ())\n+      ResolveWhereClause::Resolve (enum_decl.get_where_clause ());\n+\n     /* The actual fields are inside the variants.  */\n     for (auto &variant : enum_decl.get_variants ())\n       ResolveItem::go (variant.get ());\n@@ -310,6 +326,9 @@ class ResolveItem : public ResolverBase\n \t  }\n       }\n \n+    if (struct_decl.has_where_clause ())\n+      ResolveWhereClause::Resolve (struct_decl.get_where_clause ());\n+\n     struct_decl.iterate ([&] (AST::StructField &field) mutable -> bool {\n       ResolveType::go (field.get_field_type ().get (),\n \t\t       struct_decl.get_node_id ());\n@@ -332,6 +351,9 @@ class ResolveItem : public ResolverBase\n \t  }\n       }\n \n+    if (union_decl.has_where_clause ())\n+      ResolveWhereClause::Resolve (union_decl.get_where_clause ());\n+\n     union_decl.iterate ([&] (AST::StructField &field) mutable -> bool {\n       ResolveType::go (field.get_field_type ().get (),\n \t\t       union_decl.get_node_id ());\n@@ -379,6 +401,10 @@ class ResolveItem : public ResolverBase\n \t  ResolveGenericParam::go (generic.get (), function.get_node_id ());\n       }\n \n+    // resolve any where clause items\n+    if (function.has_where_clause ())\n+      ResolveWhereClause::Resolve (function.get_where_clause ());\n+\n     if (function.has_return_type ())\n       ResolveType::go (function.get_return_type ().get (),\n \t\t       function.get_node_id ());\n@@ -422,6 +448,10 @@ class ResolveItem : public ResolverBase\n \t  }\n       }\n \n+    // resolve any where clause items\n+    if (impl_block.has_where_clause ())\n+      ResolveWhereClause::Resolve (impl_block.get_where_clause ());\n+\n     bool canonicalize_type_with_generics = false;\n     NodeId resolved_node = ResolveType::go (impl_block.get_type ().get (),\n \t\t\t\t\t    impl_block.get_node_id (),\n@@ -468,6 +498,10 @@ class ResolveItem : public ResolverBase\n \t  ResolveGenericParam::go (generic.get (), method.get_node_id ());\n       }\n \n+    // resolve any where clause items\n+    if (method.has_where_clause ())\n+      ResolveWhereClause::Resolve (method.get_where_clause ());\n+\n     if (method.has_return_type ())\n       ResolveType::go (method.get_return_type ().get (), method.get_node_id ());\n \n@@ -505,6 +539,10 @@ class ResolveItem : public ResolverBase\n \t\t\t\t\t   param.get_node_id ());\n       }\n \n+    // resolve any where clause items\n+    if (method.has_where_clause ())\n+      ResolveWhereClause::Resolve (method.get_where_clause ());\n+\n     // resolve the function body\n     ResolveExpr::go (method.get_definition ().get (), method.get_node_id ());\n \n@@ -529,6 +567,10 @@ class ResolveItem : public ResolverBase\n \t  }\n       }\n \n+    // resolve any where clause items\n+    if (impl_block.has_where_clause ())\n+      ResolveWhereClause::Resolve (impl_block.get_where_clause ());\n+\n     bool canonicalize_type_with_generics = false;\n     NodeId trait_resolved_node\n       = ResolveType::go (&impl_block.get_trait_path (),\n@@ -601,6 +643,10 @@ class ResolveItem : public ResolverBase\n \t  }\n       }\n \n+    // resolve any where clause items\n+    if (trait.has_where_clause ())\n+      ResolveWhereClause::Resolve (trait.get_where_clause ());\n+\n     for (auto &item : trait.get_trait_items ())\n       {\n \tResolveTraitItems::go (item.get (), Self);"}, {"sha": "4708bff78720ec2881c93ba525d037a5a227e648", "filename": "gcc/rust/resolve/rust-ast-resolve-type.h", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dc21da4d05ab19642f60c122e7d58d6372fff0d/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dc21da4d05ab19642f60c122e7d58d6372fff0d/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h?ref=7dc21da4d05ab19642f60c122e7d58d6372fff0d", "patch": "@@ -473,6 +473,36 @@ class ResolveGenericParam : public ResolverBase\n   bool ok;\n };\n \n+class ResolveWhereClause : public ResolverBase\n+{\n+  using Rust::Resolver::ResolverBase::visit;\n+\n+public:\n+  static void Resolve (AST::WhereClause &where_clause)\n+  {\n+    ResolveWhereClause r (where_clause.get_node_id ());\n+    for (auto &clause : where_clause.get_items ())\n+      clause->accept_vis (r);\n+  }\n+\n+  void visit (AST::LifetimeWhereClauseItem &) override {}\n+\n+  void visit (AST::TypeBoundWhereClauseItem &item) override\n+  {\n+    ResolveType::go (item.get_type ().get (), item.get_node_id ());\n+    if (item.has_type_param_bounds ())\n+      {\n+\tfor (auto &bound : item.get_type_param_bounds ())\n+\t  {\n+\t    ResolveTypeBound::go (bound.get (), item.get_node_id ());\n+\t  }\n+      }\n+  }\n+\n+private:\n+  ResolveWhereClause (NodeId parent) : ResolverBase (parent) {}\n+}; // namespace Resolver\n+\n } // namespace Resolver\n } // namespace Rust\n "}]}