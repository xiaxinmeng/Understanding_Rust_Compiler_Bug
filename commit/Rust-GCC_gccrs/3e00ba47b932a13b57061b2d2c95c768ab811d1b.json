{"sha": "3e00ba47b932a13b57061b2d2c95c768ab811d1b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2UwMGJhNDdiOTMyYTEzYjU3MDYxYjJkMmM5NWM3NjhhYjgxMWQxYg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-11-20T07:33:19Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-11-20T07:33:19Z"}, "message": "re PR c/92088 (aggregates with VLAs and nested functions are broken)\n\n2019-11-20  Richard Biener  <rguenther@suse.de>\n\n\tPR c/92088\n\tc/\n\t* c-decl.c (grokdeclarator): Prevent inlining of nested\n\tfunction with VLA arguments.\n\n\t* builtins.c (compute_objsize): Deal with VLAs.\n\n\t* gcc.dg/torture/pr92088-1.c: New testcase.\n\t* gcc.dg/torture/pr92088-2.c: Likewise.\n\nFrom-SVN: r278477", "tree": {"sha": "bb2b932e36924ca3737f2da2a580c0a839e4b93a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb2b932e36924ca3737f2da2a580c0a839e4b93a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e00ba47b932a13b57061b2d2c95c768ab811d1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e00ba47b932a13b57061b2d2c95c768ab811d1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e00ba47b932a13b57061b2d2c95c768ab811d1b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e00ba47b932a13b57061b2d2c95c768ab811d1b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "54bf2539c55b886ea60d407a7ef2f56f0a19e861", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54bf2539c55b886ea60d407a7ef2f56f0a19e861", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54bf2539c55b886ea60d407a7ef2f56f0a19e861"}], "stats": {"total": 76, "additions": 75, "deletions": 1}, "files": [{"sha": "c2c82d354a0ad126a98f36b32aa5b249280fe823", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e00ba47b932a13b57061b2d2c95c768ab811d1b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e00ba47b932a13b57061b2d2c95c768ab811d1b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3e00ba47b932a13b57061b2d2c95c768ab811d1b", "patch": "@@ -1,3 +1,8 @@\n+2019-11-20  Richard Biener  <rguenther@suse.de>\n+\n+\tPR c/92088\n+\t* builtins.c (compute_objsize): Deal with VLAs.\n+\n 2019-11-19  Pat Haugen  <pthaugen@us.ibm.com>\n \n \t* config/rs6000/rs6000.c (move_to_end_of_ready): New, factored out"}, {"sha": "50909af91f958ebb256c46cc09635c7281b87895", "filename": "gcc/builtins.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e00ba47b932a13b57061b2d2c95c768ab811d1b/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e00ba47b932a13b57061b2d2c95c768ab811d1b/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=3e00ba47b932a13b57061b2d2c95c768ab811d1b", "patch": "@@ -3707,7 +3707,8 @@ compute_objsize (tree dest, int ostype, tree *pdecl /* = NULL */)\n   if (DECL_P (ref))\n     {\n       *pdecl = ref;\n-      return DECL_SIZE_UNIT (ref);\n+      if (tree size = DECL_SIZE_UNIT (ref))\n+\treturn TREE_CODE (size) == INTEGER_CST ? size : NULL_TREE;\n     }\n \n   tree type = TREE_TYPE (dest);"}, {"sha": "7b37842ca5b5b9cee7f8e4c0232724717937e9a1", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e00ba47b932a13b57061b2d2c95c768ab811d1b/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e00ba47b932a13b57061b2d2c95c768ab811d1b/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=3e00ba47b932a13b57061b2d2c95c768ab811d1b", "patch": "@@ -1,3 +1,9 @@\n+2019-11-20  Richard Biener  <rguenther@suse.de>\n+\n+\tPR c/92088\n+\t* c-decl.c (grokdeclarator): Prevent inlining of nested\n+\tfunction with VLA arguments.\n+\n 2019-11-20  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-decl.c (c_warn_type_attributes): New function."}, {"sha": "caa9c85897e8ee89a1611d7943955820f30144b5", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e00ba47b932a13b57061b2d2c95c768ab811d1b/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e00ba47b932a13b57061b2d2c95c768ab811d1b/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=3e00ba47b932a13b57061b2d2c95c768ab811d1b", "patch": "@@ -7405,6 +7405,23 @@ grokdeclarator (const struct c_declarator *declarator,\n \t      \t    \"no linkage\");\n       }\n \n+    /* For nested functions disqualify ones taking VLAs by value\n+       from inlining since the middle-end cannot deal with this.\n+       ???  We should arrange for those to be passed by reference\n+       with emitting the copy on the caller side in the frontend.  */\n+    if (storage_class == csc_none\n+\t&& TREE_CODE (type) == FUNCTION_TYPE)\n+      for (tree al = TYPE_ARG_TYPES (type); al; al = TREE_CHAIN (al))\n+\t{\n+\t  tree arg = TREE_VALUE (al);\n+\t  if (arg != error_mark_node\n+\t      && C_TYPE_VARIABLE_SIZE (arg))\n+\t    {\n+\t      DECL_UNINLINABLE (decl) = 1;\n+\t      break;\n+\t    }\n+\t}\n+\n     /* Record `register' declaration for warnings on &\n        and in case doing stupid register allocation.  */\n "}, {"sha": "8198d22da504dbfe52bba38d1d6250aa9dcdefd0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e00ba47b932a13b57061b2d2c95c768ab811d1b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e00ba47b932a13b57061b2d2c95c768ab811d1b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3e00ba47b932a13b57061b2d2c95c768ab811d1b", "patch": "@@ -1,3 +1,9 @@\n+2019-11-20  Richard Biener  <rguenther@suse.de>\n+\n+\tPR c/92088\n+\t* gcc.dg/torture/pr92088-1.c: New testcase.\n+\t* gcc.dg/torture/pr92088-2.c: Likewise.\n+\n 2019-11-20  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* g++.dg/warn/multiple-sign-compare-warn-1.C: New."}, {"sha": "b56f8ad665e3d45de7e0a4fd262daf9f478cc1e4", "filename": "gcc/testsuite/gcc.dg/torture/pr92088-1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e00ba47b932a13b57061b2d2c95c768ab811d1b/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr92088-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e00ba47b932a13b57061b2d2c95c768ab811d1b/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr92088-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr92088-1.c?ref=3e00ba47b932a13b57061b2d2c95c768ab811d1b", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do run } */\n+\n+int __attribute__((noipa))\n+g (char *p)\n+{\n+  return p[9];\n+}\n+int main (int argc, char **argv)\n+{\n+  struct S {\n+    char toto[argc + 16];\n+  };\n+  int f (struct S arg) {\n+      __builtin_strcpy(arg.toto, \"helloworld\");\n+      return g (arg.toto);\n+  }\n+  struct S bob;\n+  __builtin_strcpy(bob.toto, \"coucoucoucou\");\n+  if (f(bob) != 'd' || __builtin_strcmp (bob.toto, \"coucoucoucou\"))\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "a20a01cd1ce0772f5915a182bffa76e4efba81c9", "filename": "gcc/testsuite/gcc.dg/torture/pr92088-2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e00ba47b932a13b57061b2d2c95c768ab811d1b/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr92088-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e00ba47b932a13b57061b2d2c95c768ab811d1b/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr92088-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr92088-2.c?ref=3e00ba47b932a13b57061b2d2c95c768ab811d1b", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+\n+void foo(int n)\n+{\n+  struct X { int a[n]; } y;\n+\n+  struct X baz (struct X x)\n+    {\n+      x.a[0] = 1;\n+      return x;\n+    }\n+\n+  y.a[0] = 0;\n+  y = baz(y);\n+  if (y.a[0] != 1)\n+    __builtin_abort ();\n+}"}]}