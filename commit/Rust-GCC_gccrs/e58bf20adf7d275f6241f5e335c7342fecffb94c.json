{"sha": "e58bf20adf7d275f6241f5e335c7342fecffb94c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTU4YmYyMGFkZjdkMjc1ZjYyNDFmNWUzMzVjNzM0MmZlY2ZmYjk0Yw==", "commit": {"author": {"name": "Tejas Belagod", "email": "tejas.belagod@arm.com", "date": "2013-11-22T15:29:19Z"}, "committer": {"name": "Tejas Belagod", "email": "belagod@gcc.gnu.org", "date": "2013-11-22T15:29:19Z"}, "message": "aarch64-simd.md (aarch64_simd_vec_set<mode>): Adjust for big-endian element order.\n\n2013-11-22  Tejas Belagod  <tejas.belagod@arm.com>\n\n\t* config/aarch64/aarch64-simd.md (aarch64_simd_vec_set<mode>): Adjust\n\tfor big-endian element order.\n\t(aarch64_simd_vec_setv2di): Likewise.\n\t(*aarch64_get_lane_extend<GPI:mode><VDQQH:mode>,\n\t*aarch64_get_lane_zero_extendsi<mode>, aarch64_get_lane): Likewise.\n\t(vec_extract): Expand using aarch64_get_lane.\n\t* config/aarch64/aarch64.h (ENDIAN_LANE_N): New.\n\nFrom-SVN: r205267", "tree": {"sha": "fe3dd9da872462f878179983f1d6d091834196b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe3dd9da872462f878179983f1d6d091834196b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e58bf20adf7d275f6241f5e335c7342fecffb94c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e58bf20adf7d275f6241f5e335c7342fecffb94c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e58bf20adf7d275f6241f5e335c7342fecffb94c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e58bf20adf7d275f6241f5e335c7342fecffb94c/comments", "author": {"login": "tejas-belagod-arm", "id": 92718852, "node_id": "U_kgDOBYbHBA", "avatar_url": "https://avatars.githubusercontent.com/u/92718852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tejas-belagod-arm", "html_url": "https://github.com/tejas-belagod-arm", "followers_url": "https://api.github.com/users/tejas-belagod-arm/followers", "following_url": "https://api.github.com/users/tejas-belagod-arm/following{/other_user}", "gists_url": "https://api.github.com/users/tejas-belagod-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/tejas-belagod-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tejas-belagod-arm/subscriptions", "organizations_url": "https://api.github.com/users/tejas-belagod-arm/orgs", "repos_url": "https://api.github.com/users/tejas-belagod-arm/repos", "events_url": "https://api.github.com/users/tejas-belagod-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/tejas-belagod-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "635ad37e5a2406b5c7831bb820392aa173e0e433", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/635ad37e5a2406b5c7831bb820392aa173e0e433", "html_url": "https://github.com/Rust-GCC/gccrs/commit/635ad37e5a2406b5c7831bb820392aa173e0e433"}], "stats": {"total": 108, "additions": 80, "deletions": 28}, "files": [{"sha": "00ccbbcaf067a35caa690b5eca1d7f047c7a2d5d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e58bf20adf7d275f6241f5e335c7342fecffb94c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e58bf20adf7d275f6241f5e335c7342fecffb94c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e58bf20adf7d275f6241f5e335c7342fecffb94c", "patch": "@@ -1,3 +1,13 @@\n+2013-11-22  Tejas Belagod  <tejas.belagod@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (aarch64_simd_vec_set<mode>): Adjust\n+\tfor big-endian element order.\n+\t(aarch64_simd_vec_setv2di): Likewise.\n+\t(*aarch64_get_lane_extend<GPI:mode><VDQQH:mode>,\n+\t*aarch64_get_lane_zero_extendsi<mode>, aarch64_get_lane): Likewise.\n+\t(vec_extract): Expand using aarch64_get_lane.\n+\t* config/aarch64/aarch64.h (ENDIAN_LANE_N): New.\n+\n 2013-11-22  Tejas Belagod  <tejas.belagod@arm.com>\n \n \t* config/aarch64/aarch64-simd.md (*aarch64_simd_mov<mode>): Fix loads"}, {"sha": "2774ec251823ec1691c8485b2e6d933e3b9cd8de", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 67, "deletions": 28, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e58bf20adf7d275f6241f5e335c7342fecffb94c/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e58bf20adf7d275f6241f5e335c7342fecffb94c/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=e58bf20adf7d275f6241f5e335c7342fecffb94c", "patch": "@@ -428,9 +428,19 @@\n \t    (match_operand:VQ_S 3 \"register_operand\" \"0,0\")\n \t    (match_operand:SI 2 \"immediate_operand\" \"i,i\")))]\n   \"TARGET_SIMD\"\n-  \"@\n-   ins\\t%0.<Vetype>[%p2], %w1\n-   ins\\\\t%0.<Vetype>[%p2], %1.<Vetype>[0]\"\n+  {\n+   int elt = ENDIAN_LANE_N (<MODE>mode, exact_log2 (INTVAL (operands[2])));\n+   operands[2] = GEN_INT ((HOST_WIDE_INT) 1 << elt);\n+   switch (which_alternative)\n+     {\n+     case 0:\n+\treturn \"ins\\\\t%0.<Vetype>[%p2], %w1\";\n+     case 1:\n+\treturn \"ins\\\\t%0.<Vetype>[%p2], %1.<Vetype>[0]\";\n+     default:\n+\tgcc_unreachable ();\n+     }\n+  }\n   [(set_attr \"type\" \"neon_from_gp<q>, neon_ins<q>\")]\n )\n \n@@ -692,9 +702,19 @@\n \t    (match_operand:V2DI 3 \"register_operand\" \"0,0\")\n \t    (match_operand:SI 2 \"immediate_operand\" \"i,i\")))]\n   \"TARGET_SIMD\"\n-  \"@\n-   ins\\t%0.d[%p2], %1\n-   ins\\\\t%0.d[%p2], %1.d[0]\"\n+  {\n+    int elt = ENDIAN_LANE_N (V2DImode, exact_log2 (INTVAL (operands[2])));\n+    operands[2] = GEN_INT ((HOST_WIDE_INT) 1 << elt);\n+    switch (which_alternative)\n+      {\n+      case 0:\n+\treturn \"ins\\\\t%0.d[%p2], %1\";\n+      case 1:\n+        return \"ins\\\\t%0.d[%p2], %1.d[0]\";\n+      default:\n+\tgcc_unreachable ();\n+      }\n+  }\n   [(set_attr \"type\" \"neon_from_gp, neon_ins_q\")]\n )\n \n@@ -719,7 +739,12 @@\n \t    (match_operand:VDQF 3 \"register_operand\" \"0\")\n \t    (match_operand:SI 2 \"immediate_operand\" \"i\")))]\n   \"TARGET_SIMD\"\n-  \"ins\\t%0.<Vetype>[%p2], %1.<Vetype>[0]\";\n+  {\n+    int elt = ENDIAN_LANE_N (<MODE>mode, exact_log2 (INTVAL (operands[2])));\n+\n+    operands[2] = GEN_INT ((HOST_WIDE_INT)1 << elt);\n+    return \"ins\\t%0.<Vetype>[%p2], %1.<Vetype>[0]\";\n+  }\n   [(set_attr \"type\" \"neon_ins<q>\")]\n )\n \n@@ -2022,7 +2047,10 @@\n \t    (match_operand:VDQQH 1 \"register_operand\" \"w\")\n \t    (parallel [(match_operand:SI 2 \"immediate_operand\" \"i\")]))))]\n   \"TARGET_SIMD\"\n-  \"smov\\\\t%<GPI:w>0, %1.<VDQQH:Vetype>[%2]\"\n+  {\n+    operands[2] = GEN_INT (ENDIAN_LANE_N (<MODE>mode, INTVAL (operands[2])));\n+    return \"smov\\\\t%<GPI:w>0, %1.<VDQQH:Vetype>[%2]\";\n+  }\n   [(set_attr \"type\" \"neon_to_gp<q>\")]\n )\n \n@@ -2033,22 +2061,36 @@\n \t    (match_operand:VDQQH 1 \"register_operand\" \"w\")\n \t    (parallel [(match_operand:SI 2 \"immediate_operand\" \"i\")]))))]\n   \"TARGET_SIMD\"\n-  \"umov\\\\t%w0, %1.<Vetype>[%2]\"\n+  {\n+    operands[2] = GEN_INT (ENDIAN_LANE_N (<MODE>mode, INTVAL (operands[2])));\n+    return \"umov\\\\t%w0, %1.<Vetype>[%2]\";\n+  }\n   [(set_attr \"type\" \"neon_to_gp<q>\")]\n )\n \n ;; Lane extraction of a value, neither sign nor zero extension\n ;; is guaranteed so upper bits should be considered undefined.\n (define_insn \"aarch64_get_lane<mode>\"\n-  [(set (match_operand:<VEL> 0 \"register_operand\" \"=r, w\")\n+  [(set (match_operand:<VEL> 0 \"aarch64_simd_nonimmediate_operand\" \"=r, w, Utv\")\n \t(vec_select:<VEL>\n-\t  (match_operand:VALL 1 \"register_operand\" \"w, w\")\n-\t  (parallel [(match_operand:SI 2 \"immediate_operand\" \"i, i\")])))]\n+\t  (match_operand:VALL 1 \"register_operand\" \"w, w, w\")\n+\t  (parallel [(match_operand:SI 2 \"immediate_operand\" \"i, i, i\")])))]\n   \"TARGET_SIMD\"\n-  \"@\n-   umov\\\\t%<vwcore>0, %1.<Vetype>[%2]\n-   dup\\\\t%<Vetype>0, %1.<Vetype>[%2]\"\n-  [(set_attr \"type\" \"neon_to_gp<q>, neon_dup<q>\")]\n+  {\n+    operands[2] = GEN_INT (ENDIAN_LANE_N (<MODE>mode, INTVAL (operands[2])));\n+    switch (which_alternative)\n+      {\n+\tcase 0:\n+\t  return \"umov\\\\t%<vwcore>0, %1.<Vetype>[%2]\";\n+\tcase 1:\n+\t  return \"dup\\\\t%<Vetype>0, %1.<Vetype>[%2]\";\n+\tcase 2:\n+\t  return \"st1\\\\t{%1.<Vetype>}[%2], %0\";\n+\tdefault:\n+\t  gcc_unreachable ();\n+      }\n+  }\n+  [(set_attr \"type\" \"neon_to_gp<q>, neon_dup<q>, neon_store1_one_lane<q>\")]\n )\n \n (define_expand \"aarch64_get_lanedi\"\n@@ -4028,16 +4070,13 @@\n \n ;; Standard pattern name vec_extract<mode>.\n \n-(define_insn \"vec_extract<mode>\"\n-  [(set (match_operand:<VEL> 0 \"aarch64_simd_nonimmediate_operand\" \"=r, w, Utv\")\n-\t(vec_select:<VEL>\n-\t  (match_operand:VALL 1 \"register_operand\" \"w, w, w\")\n-\t  (parallel [(match_operand:SI 2 \"immediate_operand\" \"i,i,i\")])))]\n+(define_expand \"vec_extract<mode>\"\n+  [(match_operand:<VEL> 0 \"aarch64_simd_nonimmediate_operand\" \"\")\n+   (match_operand:VALL 1 \"register_operand\" \"\")\n+   (match_operand:SI 2 \"immediate_operand\" \"\")]\n   \"TARGET_SIMD\"\n-  \"@\n-  umov\\\\t%<vw>0, %1.<Vetype>[%2]\n-  dup\\\\t%<Vetype>0, %1.<Vetype>[%2]\n-  st1\\\\t{%1.<Vetype>}[%2], %0\"\n-  [(set_attr \"type\" \"neon_to_gp<q>, neon_dup<q>, neon_store1_one_lane<q>\")]\n-)\n-\n+{\n+    emit_insn\n+      (gen_aarch64_get_lane<mode> (operands[0], operands[1], operands[2]));\n+    DONE;\n+})"}, {"sha": "cead022c3c0a003d6b8ef964fbd8cc276a7d8aa7", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e58bf20adf7d275f6241f5e335c7342fecffb94c/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e58bf20adf7d275f6241f5e335c7342fecffb94c/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=e58bf20adf7d275f6241f5e335c7342fecffb94c", "patch": "@@ -854,4 +854,7 @@ extern enum aarch64_code_model aarch64_cmodel;\n   ((MODE) == V4SImode || (MODE) == V8HImode || (MODE) == V16QImode \\\n    || (MODE) == V4SFmode || (MODE) == V2DImode || mode == V2DFmode)\n \n+#define ENDIAN_LANE_N(mode, n)  \\\n+  (BYTES_BIG_ENDIAN ? GET_MODE_NUNITS (mode) - 1 - n : n)\n+\n #endif /* GCC_AARCH64_H */"}]}