{"sha": "395909dddc2f0412da11261052aaaf41d55b0960", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzk1OTA5ZGRkYzJmMDQxMmRhMTEyNjEwNTJhYWFmNDFkNTViMDk2MA==", "commit": {"author": {"name": "Janis Johnson", "email": "janis187@us.ibm.com", "date": "2005-02-01T17:28:46Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2005-02-01T17:28:46Z"}, "message": "gcc.test-framework: New directory.\n\n2005-02-01  Janis Johnson  <janis187@us.ibm.com>\n\n\t* gcc.test-framework: New directory.\n\t* gcc.test-framework/README: New.\n\t* gcc.test-framework/test-framework.exp: New.\n\t* gcc.test-framework/test-framework.awk: New.\n\t* gcc.test-framework/gen_directive_tests: New.\n\nFrom-SVN: r94548", "tree": {"sha": "df54c5d4097b03c3b49681e2cefdf60cc5869f30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df54c5d4097b03c3b49681e2cefdf60cc5869f30"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/395909dddc2f0412da11261052aaaf41d55b0960", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/395909dddc2f0412da11261052aaaf41d55b0960", "html_url": "https://github.com/Rust-GCC/gccrs/commit/395909dddc2f0412da11261052aaaf41d55b0960", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/395909dddc2f0412da11261052aaaf41d55b0960/comments", "author": null, "committer": null, "parents": [{"sha": "22f8a068527c072cc53956db18f3ef94d5224fbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22f8a068527c072cc53956db18f3ef94d5224fbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22f8a068527c072cc53956db18f3ef94d5224fbd"}], "stats": {"total": 710, "additions": 710, "deletions": 0}, "files": [{"sha": "c572d3c77a0cd4ec746c528558ab47dd95075be6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/395909dddc2f0412da11261052aaaf41d55b0960/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/395909dddc2f0412da11261052aaaf41d55b0960/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=395909dddc2f0412da11261052aaaf41d55b0960", "patch": "@@ -1,3 +1,11 @@\n+2005-02-01  Janis Johnson  <janis187@us.ibm.com>\n+\n+\t* gcc.test-framework: New directory.\n+\t* gcc.test-framework/README: New.\n+\t* gcc.test-framework/test-framework.exp: New.\n+\t* gcc.test-framework/test-framework.awk: New.\n+\t* gcc.test-framework/gen_directive_tests: New.\n+\n 2005-02-01  James A. Morrison  <phython@gcc.gnu.org>\n \n \t* lib/treelang.exp: Fix comment typos."}, {"sha": "63fe9dc5515a6737cbca060118d1ed3638c5da85", "filename": "gcc/testsuite/gcc.test-framework/README", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/395909dddc2f0412da11261052aaaf41d55b0960/gcc%2Ftestsuite%2Fgcc.test-framework%2FREADME", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/395909dddc2f0412da11261052aaaf41d55b0960/gcc%2Ftestsuite%2Fgcc.test-framework%2FREADME", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.test-framework%2FREADME?ref=395909dddc2f0412da11261052aaaf41d55b0960", "patch": "@@ -0,0 +1,24 @@\n+Check the test directives used in GCC's testsuite by generating and\n+running tests that use combinations of those commands or that stress\n+the selector expressions that can be used in those directives.\n+                                                                                \n+Each test has two parts: a file ending in \"-1.c\" whose expected result\n+is encoded in the filename after \"-exp-\", and a file ending in \"-2.c\"\n+which is always expected to pass.\n+                                                                                \n+This test directory is normally skipped and is not meant to be run at\n+the same time as other parts of the testsuite; it's only of interest to\n+people who are modifying the test directives or their support in GCC's\n+.exp files.\n+\n+To run these tests:\n+                                                                                \n+    CHECK_TEST_FRAMEWORK=1 make -k check RUNTESTFLAGS=\"test-framework.exp\"\n+                                                                                \n+To check the results:\n+                                                                                \n+    TF=${SRC}/gcc/testsuite/gcc.test-framework\n+    awk -f ${TF}/test-framework.awk gcc/testsuite/gcc.sum\n+                                                                                \n+The awk script prints unexpected results followed by the number of tests\n+that passed."}, {"sha": "3198d9e35adc48c94a226e4ef4d8a947042c3eea", "filename": "gcc/testsuite/gcc.test-framework/gen_directive_tests", "status": "added", "additions": 570, "deletions": 0, "changes": 570, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/395909dddc2f0412da11261052aaaf41d55b0960/gcc%2Ftestsuite%2Fgcc.test-framework%2Fgen_directive_tests", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/395909dddc2f0412da11261052aaaf41d55b0960/gcc%2Ftestsuite%2Fgcc.test-framework%2Fgen_directive_tests", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.test-framework%2Fgen_directive_tests?ref=395909dddc2f0412da11261052aaaf41d55b0960", "patch": "@@ -0,0 +1,570 @@\n+#! /bin/bash\n+\n+########################################################################\n+#\n+# File:    generate_framework_tests\n+# Author:  Janis Johnson\n+# Date:    2004/11/02\n+#\n+# Generate tests of GCC's test framework.  Each test has encoded in\n+# its name the dg commands that are used in the test and the expected\n+# result of the test, *-1.c.  Each test is followed by a test ending\n+# in *-2.c that is expected to pass.\n+#\n+# This script has evolved and could be rewritten to be more compact.\n+#\n+#\n+# Copyright (c) 2004, 2005 Free Software Foundation, Inc.\n+#\n+# This file is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# For a copy of the GNU General Public License, write the the\n+# Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n+# Boston, MA 02111-1307, USA.\n+#\n+########################################################################\n+\n+cd $1\n+\n+GOOD0='*-*-*'\n+GOOD1=\"yes\"\n+BAD0='empty-empty-empty'\n+BAD1=\"no\"\n+\n+# Programs used in the tests: good compile and run, bad compile, and\n+# bad run.\n+GOOD_PROG=\"int main () { return 0; }\"\n+BADC_PROG=\"int missing_body () }\"\n+BADR_PROG=\"extern void abort (void); int main () { abort (); }\"\n+\n+# dg-do commands with a target list.\n+DOT_S0=\"{ dg-do compile { target ${GOOD0} } }\"\n+DOT_S1=\"{ dg-do compile { target ${GOOD1} } }\"\n+DOT_N0=\"{ dg-do compile { target ${BAD0} } }\"\n+DOT_N1=\"{ dg-do compile { target ${BAD1} } }\"\n+\n+# dg-do commands with an xfail list; the xfail list is ignored for\n+# everything but \"run\".\n+DOX_P0=\"{ dg-do run { xfail ${BAD0} } }\"\n+DOX_P1=\"{ dg-do run { xfail ${BAD1} } }\"\n+DOX_F0=\"{ dg-do run { xfail ${GOOD0} } }\"\n+DOX_F1=\"{ dg-do run { xfail ${GOOD1} } }\"\n+\n+# dg-xfail-if commands.\n+XIF_P0=\"{ dg-xfail-if \\\"target not matched\\\" { ${BAD0} } { \\\"-DY1\\\" } { \\\"-DY2\\\" } }\"\n+XIF_P1=\"{ dg-xfail-if \\\"target not matched\\\" { ${BAD0} } { \\\"-DY1\\\" } { \\\"-DN\\\" } }\"\n+XIF_P2=\"{ dg-xfail-if \\\"target not matched\\\" { ${BAD0} } { \\\"-DN\\\" } { \\\"-DY1\\\" } }\"\n+XIF_P3=\"{ dg-xfail-if \\\"target not matched\\\" { ${BAD0} } { \\\"-DN1\\\" } { \\\"-DN2\\\" } }\"\n+XIF_P4=\"{ dg-xfail-if \\\"exclude option matched\\\" { ${GOOD0} } { \\\"-DY1\\\" } { \\\"-DY2\\\" } }\"\n+XIF_P5=\"{ dg-xfail-if \\\"include option not matched\\\" { ${GOOD0} } { \\\"-DN\\\" } { \\\"-DY1\\\" } }\"\n+XIF_P6=\"{ dg-xfail-if \\\"include option not matched\\\" { ${GOOD0} } { \\\"-DN1\\\" } { \\\"-DN2\\\" } }\"\n+XIF_F0=\"{ dg-xfail-if \\\"all matches succeed\\\" { ${GOOD0} } { \\\"-DY1\\\" } { \\\"-DN\\\" } }\"\n+XIF_F1=\"{ dg-xfail-if \\\"all matches succeed\\\" { ${GOOD0} } { \\\"*\\\" } { \\\"-DN\\\" } }\"\n+XIF_F2=\"{ dg-xfail-if \\\"all matches succeed\\\" { ${GOOD0} } { \\\"-DY1\\\" } { \\\"\\\" } }\"\n+XIF_F3=\"{ dg-xfail-if \\\"all matches succeed\\\" { ${GOOD0} } { \\\"*\\\" } { \\\"\\\" } }\"\n+\n+XIF_P7=\"{ dg-xfail-if \\\"target not matched\\\" { ${BAD1} } { \\\"-DY1\\\" } { \\\"-DY2\\\" } }\"\n+XIF_P8=\"{ dg-xfail-if \\\"target not matched\\\" { ${BAD1} } { \\\"-DY1\\\" } { \\\"-DN\\\" } }\"\n+XIF_P9=\"{ dg-xfail-if \\\"target not matched\\\" { ${BAD1} } { \\\"-DN\\\" } { \\\"-DY1\\\" } }\"\n+XIF_P10=\"{ dg-xfail-if \\\"target not matched\\\" { ${BAD1} } { \\\"-DN1\\\" } { \\\"-DN2\\\" } }\"\n+XIF_P11=\"{ dg-xfail-if \\\"exclude option matched\\\" { ${GOOD1} } { \\\"-DY1\\\" } { \\\"-DY2\\\" } }\"\n+XIF_P12=\"{ dg-xfail-if \\\"include option not matched\\\" { ${GOOD1} } { \\\"-DN\\\" } { \\\"-DY1\\\" } }\"\n+XIF_P13=\"{ dg-xfail-if \\\"include option not matched\\\" { ${GOOD1} } { \\\"-DN1\\\" } { \\\"-DN2\\\" } }\"\n+XIF_F4=\"{ dg-xfail-if \\\"all matches succeed\\\" { ${GOOD1} } { \\\"-DY1\\\" } { \\\"-DN\\\" } }\"\n+XIF_F5=\"{ dg-xfail-if \\\"all matches succeed\\\" { ${GOOD1} } { \\\"*\\\" } { \\\"-DN\\\" } }\"\n+XIF_F6=\"{ dg-xfail-if \\\"all matches succeed\\\" { ${GOOD1} } { \\\"-DY1\\\" } { \\\"\\\" } }\"\n+XIF_F7=\"{ dg-xfail-if \\\"all matches succeed\\\" { ${GOOD1} } { \\\"*\\\" } { \\\"\\\" } }\"\n+\n+\n+# dg-skip-if commands.\n+SIF_S0=\"{ dg-skip-if \\\"target not matched\\\" { ${BAD0} } { \\\"-DY1\\\" } { \\\"-DY2\\\" } }\"\n+SIF_S1=\"{ dg-skip-if \\\"target not matched\\\" { ${BAD0} } { \\\"-DY1\\\" } { \\\"-DN\\\" } }\"\n+SIF_S2=\"{ dg-skip-if \\\"target not matched\\\" { ${BAD0} } { \\\"-DN\\\" } { \\\"-DY1\\\" } }\"\n+SIF_S3=\"{ dg-skip-if \\\"target not matched\\\" { ${BAD0} } { \\\"-DN1\\\" } { \\\"-DN2\\\" } }\"\n+SIF_S4=\"{ dg-skip-if \\\"exclude option matched\\\" { ${GOOD0} } { \\\"-DY1\\\" } { \\\"-DY2\\\" } }\"\n+SIF_S5=\"{ dg-skip-if \\\"include option not matched\\\" { ${GOOD0} } { \\\"-DN\\\" } { \\\"-DY1\\\" } }\"\n+SIF_S6=\"{ dg-skip-if \\\"include option not matched\\\" { ${GOOD0} } { \\\"-DN1\\\" } { \\\"-DN2\\\" } }\"\n+SIF_N0=\"{ dg-skip-if \\\"all matches succeed\\\" { ${GOOD0} } { \\\"-DY1\\\" } { \\\"-DN\\\" } }\"\n+SIF_N1=\"{ dg-skip-if \\\"all matches succeed\\\" { ${GOOD0} } { \\\"*\\\" } { \\\"-DN\\\" } }\"\n+SIF_N2=\"{ dg-skip-if \\\"all matches succeed\\\" { ${GOOD0} } { \\\"-DY1\\\" } { \\\"\\\" } }\"\n+SIF_N3=\"{ dg-skip-if \\\"all matches succeed\\\" { ${GOOD0} } { \\\"*\\\" } { \\\"\\\" } }\"\n+SIF_S7=\"{ dg-skip-if \\\"target not matched\\\" { ${BAD1} } { \\\"-DY1\\\" } { \\\"-DY2\\\" } }\"\n+SIF_S8=\"{ dg-skip-if \\\"target not matched\\\" { ${BAD1} } { \\\"-DY1\\\" } { \\\"-DN\\\" } }\"\n+SIF_S9=\"{ dg-skip-if \\\"target not matched\\\" { ${BAD1} } { \\\"-DN\\\" } { \\\"-DY1\\\" } }\"\n+SIF_S10=\"{ dg-skip-if \\\"target not matched\\\" { ${BAD1} } { \\\"-DN1\\\" } { \\\"-DN2\\\" } }\"\n+SIF_S11=\"{ dg-skip-if \\\"exclude option matched\\\" { ${GOOD1} } { \\\"-DY1\\\" } { \\\"-DY2\\\" } }\"\n+SIF_S12=\"{ dg-skip-if \\\"include option not matched\\\" { ${GOOD1} } { \\\"-DN\\\" } { \\\"-DY1\\\" } }\"\n+SIF_S13=\"{ dg-skip-if \\\"include option not matched\\\" { ${GOOD1} } { \\\"-DN1\\\" } { \\\"-DN2\\\" } }\"\n+SIF_N4=\"{ dg-skip-if \\\"all matches succeed\\\" { ${GOOD1} } { \\\"-DY1\\\" } { \\\"-DN\\\" } }\"\n+SIF_N5=\"{ dg-skip-if \\\"all matches succeed\\\" { ${GOOD1} } { \\\"*\\\" } { \\\"-DN\\\" } }\"\n+SIF_N6=\"{ dg-skip-if \\\"all matches succeed\\\" { ${GOOD1} } { \\\"-DY1\\\" } { \\\"\\\" } }\"\n+SIF_N7=\"{ dg-skip-if \\\"all matches succeed\\\" { ${GOOD1} } { \\\"*\\\" } { \\\"\\\" } }\"\n+\n+# dg-require-* commands, using procedures defined for this set of tests.\n+REQ_S0=\"{ dg-require-true \\\"\\\" }\"    # do not skip the test\n+REQ_N0=\"{ dg-require-false \\\"\\\" }\"   # skip the test\n+\n+# scan-assembler-not, which is hoped to be representative of commands\n+# used with dg-final, with a target list.\n+SAT_N0=\"{ dg-final { scan-assembler-not \\\"unexpected gargage\\\" { target ${BAD0} } } }\"\n+SAT_N1=\"{ dg-final { scan-assembler-not \\\"unexpected gargage\\\" { target ${BAD1} } } }\"\n+SAT_S0=\"{ dg-final { scan-assembler-not \\\"unexpected gargage\\\" { target ${GOOD0} } } }\"\n+SAT_S1=\"{ dg-final { scan-assembler-not \\\"unexpected gargage\\\" { target ${GOOD1} } } }\"\n+\n+# scan-assembler-not, which is hoped to be representative of commands\n+# used with dg-final, with an xfail list.\n+SAX_P0=\"{ dg-final { scan-assembler-not \\\"unexpected gargage\\\" { xfail ${BAD0} } } }\"\n+SAX_P1=\"{ dg-final { scan-assembler-not \\\"unexpected gargage\\\" { xfail ${BAD1} } } }\"\n+SAX_F0=\"{ dg-final { scan-assembler-not \\\"unexpected gargage\\\" { xfail ${GOOD0} } } }\"\n+SAX_F1=\"{ dg-final { scan-assembler-not \\\"unexpected gargage\\\" { xfail ${GOOD1} } } }\"\n+\n+KIND_LIST=\"\"\n+\n+# Expected result of the *-1.c test, encoded into the file name.\n+EXP_PASS=\"exp-P\"\n+EXP_XPASS=\"exp-XP\"\n+EXP_SKIP=\"exp-U\"\n+EXP_FAIL=\"exp-F\"\n+EXP_XFAIL=\"exp-XF\"\n+\n+get_list() {\n+    KIND=$1\n+    case $KIND in\n+      \"dots\") KIND_LIST=\"dots0 dots1\";;\n+      \"dotn\") KIND_LIST=\"dotn0 dotn1\";;\n+      \"doxp\") KIND_LIST=\"doxp0 doxp1\";;\n+      \"doxf\") KIND_LIST=\"doxf0 doxf1\";;\n+      \"sifs\") KIND_LIST=\"sifs0 sifs1 sifs2 sifs3 sifs4 sifs5 sifs6 sifs7 sifs8 sifs9 sifs10 sifs11 sifs12 sifs13\";;\n+      \"sifn\") KIND_LIST=\"sifn0 sifn1 sifn2 sifn3 sifn4 sifn5 sifn6 sifn7\";;\n+      \"xifp\") KIND_LIST=\"xifp0 xifp1 xifp2 xifp3 xifp4 xifp5 xifp6 xifp7 xifp8 xifp9 xifp10 xifp11 xifp12 xifp13\";;\n+      \"xiff\") KIND_LIST=\"xiff0 xiff1 xiff2 xiff3 xiff4 xiff5 xiff6 xiff7\";;\n+      \"sats\") KIND_LIST=\"sats0 sats1\";;\n+      \"satn\") KIND_LIST=\"satn0 satn1\";;\n+      \"saxp\") KIND_LIST=\"saxp0 saxp1\";;\n+      \"saxf\") KIND_LIST=\"saxf0 saxf1\";;\n+      \"reqs\") KIND_LIST=\"reqs0\";;\n+      \"reqn\") KIND_LIST=\"reqn0\";;\n+      *) echo \"oops: $KIND\"; exit 1;;\n+    esac\n+}\n+\n+cmd() {\n+    KIND=$1\n+    FILE=$2\n+\n+    case $KIND in\n+      \"dots\") echo '/*' \"${DOT_S0}\" '*/' >> $FILE;;\n+      \"dots0\") echo '/*' \"${DOT_S0}\" '*/' >> $FILE;;\n+      \"dots1\") echo '/*' \"${DOT_S1}\" '*/' >> $FILE;;\n+      \"dots2\") echo '/*' \"${DOT_S2}\" '*/' >> $FILE;;\n+      \"dots3\") echo '/*' \"${DOT_S3}\" '*/' >> $FILE;;\n+      \"dots4\") echo '/*' \"${DOT_S4}\" '*/' >> $FILE;;\n+      \"dotn\") echo '/*' \"${DOT_N0}\" '*/' >> $FILE;;\n+      \"dotn0\") echo '/*' \"${DOT_N0}\" '*/' >> $FILE;;\n+      \"dotn1\") echo '/*' \"${DOT_N1}\" '*/' >> $FILE;;\n+      \"dotn2\") echo '/*' \"${DOT_N2}\" '*/' >> $FILE;;\n+      \"dotn3\") echo '/*' \"${DOT_N3}\" '*/' >> $FILE;;\n+      \"dotn4\") echo '/*' \"${DOT_N4}\" '*/' >> $FILE;;\n+      \"doxp\") echo '/*' \"${DOX_P0}\" '*/' >> $FILE;;\n+      \"doxp0\") echo '/*' \"${DOX_P0}\" '*/' >> $FILE;;\n+      \"doxp1\") echo '/*' \"${DOX_P1}\" '*/' >> $FILE;;\n+      \"doxp2\") echo '/*' \"${DOX_P2}\" '*/' >> $FILE;;\n+      \"doxp3\") echo '/*' \"${DOX_P3}\" '*/' >> $FILE;;\n+      \"doxp4\") echo '/*' \"${DOX_P4}\" '*/' >> $FILE;;\n+      \"doxf\") echo '/*' \"${DOX_F0}\" '*/' >> $FILE;;\n+      \"doxf0\") echo '/*' \"${DOX_F0}\" '*/' >> $FILE;;\n+      \"doxf1\") echo '/*' \"${DOX_F1}\" '*/' >> $FILE;;\n+      \"doxf2\") echo '/*' \"${DOX_F2}\" '*/' >> $FILE;;\n+      \"doxf3\") echo '/*' \"${DOX_F3}\" '*/' >> $FILE;;\n+      \"doxf4\") echo '/*' \"${DOX_F4}\" '*/' >> $FILE;;\n+      \"sifs\") echo '/*' \"${SIF_S0}\" '*/' >> $FILE;;\n+      \"sifs0\") echo '/*' \"${SIF_S0}\" '*/' >> $FILE;;\n+      \"sifs1\") echo '/*' \"${SIF_S1}\" '*/' >> $FILE;;\n+      \"sifs2\") echo '/*' \"${SIF_S2}\" '*/' >> $FILE;;\n+      \"sifs3\") echo '/*' \"${SIF_S3}\" '*/' >> $FILE;;\n+      \"sifs4\") echo '/*' \"${SIF_S4}\" '*/' >> $FILE;;\n+      \"sifs5\") echo '/*' \"${SIF_S5}\" '*/' >> $FILE;;\n+      \"sifs6\") echo '/*' \"${SIF_S6}\" '*/' >> $FILE;;\n+      \"sifs7\") echo '/*' \"${SIF_S7}\" '*/' >> $FILE;;\n+      \"sifs8\") echo '/*' \"${SIF_S8}\" '*/' >> $FILE;;\n+      \"sifs9\") echo '/*' \"${SIF_S9}\" '*/' >> $FILE;;\n+      \"sifs10\") echo '/*' \"${SIF_S10}\" '*/' >> $FILE;;\n+      \"sifs11\") echo '/*' \"${SIF_S11}\" '*/' >> $FILE;;\n+      \"sifs12\") echo '/*' \"${SIF_S12}\" '*/' >> $FILE;;\n+      \"sifs13\") echo '/*' \"${SIF_S13}\" '*/' >> $FILE;;\n+      \"sifn\") echo '/*' \"${SIF_N0}\" '*/' >> $FILE;;\n+      \"sifn0\") echo '/*' \"${SIF_N0}\" '*/' >> $FILE;;\n+      \"sifn1\") echo '/*' \"${SIF_N1}\" '*/' >> $FILE;;\n+      \"sifn2\") echo '/*' \"${SIF_N2}\" '*/' >> $FILE;;\n+      \"sifn3\") echo '/*' \"${SIF_N3}\" '*/' >> $FILE;;\n+      \"sifn4\") echo '/*' \"${SIF_N4}\" '*/' >> $FILE;;\n+      \"sifn5\") echo '/*' \"${SIF_N5}\" '*/' >> $FILE;;\n+      \"sifn6\") echo '/*' \"${SIF_N6}\" '*/' >> $FILE;;\n+      \"sifn7\") echo '/*' \"${SIF_N7}\" '*/' >> $FILE;;\n+      \"xifp\") echo '/*' \"${XIF_P0}\" '*/' >> $FILE;;\n+      \"xifp0\") echo '/*' \"${XIF_P0}\" '*/' >> $FILE;;\n+      \"xifp1\") echo '/*' \"${XIF_P1}\" '*/' >> $FILE;;\n+      \"xifp2\") echo '/*' \"${XIF_P2}\" '*/' >> $FILE;;\n+      \"xifp3\") echo '/*' \"${XIF_P3}\" '*/' >> $FILE;;\n+      \"xifp4\") echo '/*' \"${XIF_P4}\" '*/' >> $FILE;;\n+      \"xifp5\") echo '/*' \"${XIF_P5}\" '*/' >> $FILE;;\n+      \"xifp6\") echo '/*' \"${XIF_P6}\" '*/' >> $FILE;;\n+      \"xifp7\") echo '/*' \"${XIF_P7}\" '*/' >> $FILE;;\n+      \"xifp8\") echo '/*' \"${XIF_P8}\" '*/' >> $FILE;;\n+      \"xifp9\") echo '/*' \"${XIF_P9}\" '*/' >> $FILE;;\n+      \"xifp10\") echo '/*' \"${XIF_P10}\" '*/' >> $FILE;;\n+      \"xifp11\") echo '/*' \"${XIF_P11}\" '*/' >> $FILE;;\n+      \"xifp12\") echo '/*' \"${XIF_P12}\" '*/' >> $FILE;;\n+      \"xifp13\") echo '/*' \"${XIF_P13}\" '*/' >> $FILE;;\n+      \"xiff\") echo '/*' \"${XIF_F0}\" '*/' >> $FILE;;\n+      \"xiff0\") echo '/*' \"${XIF_F0}\" '*/' >> $FILE;;\n+      \"xiff1\") echo '/*' \"${XIF_F1}\" '*/' >> $FILE;;\n+      \"xiff2\") echo '/*' \"${XIF_F2}\" '*/' >> $FILE;;\n+      \"xiff3\") echo '/*' \"${XIF_F3}\" '*/' >> $FILE;;\n+      \"xiff4\") echo '/*' \"${XIF_F4}\" '*/' >> $FILE;;\n+      \"xiff5\") echo '/*' \"${XIF_F5}\" '*/' >> $FILE;;\n+      \"xiff6\") echo '/*' \"${XIF_F6}\" '*/' >> $FILE;;\n+      \"xiff7\") echo '/*' \"${XIF_F7}\" '*/' >> $FILE;;\n+      \"satn\") echo '/*' \"${SAT_N0}\" '*/' >> $FILE;;\n+      \"satn0\") echo '/*' \"${SAT_N0}\" '*/' >> $FILE;;\n+      \"satn1\") echo '/*' \"${SAT_N1}\" '*/' >> $FILE;;\n+      \"satn2\") echo '/*' \"${SAT_N2}\" '*/' >> $FILE;;\n+      \"satn3\") echo '/*' \"${SAT_N3}\" '*/' >> $FILE;;\n+      \"satn4\") echo '/*' \"${SAT_N4}\" '*/' >> $FILE;;\n+      \"sats\") echo '/*' \"${SAT_S0}\" '*/' >> $FILE;;\n+      \"sats0\") echo '/*' \"${SAT_S0}\" '*/' >> $FILE;;\n+      \"sats1\") echo '/*' \"${SAT_S1}\" '*/' >> $FILE;;\n+      \"sats2\") echo '/*' \"${SAT_S2}\" '*/' >> $FILE;;\n+      \"sats3\") echo '/*' \"${SAT_S3}\" '*/' >> $FILE;;\n+      \"sats4\") echo '/*' \"${SAT_S4}\" '*/' >> $FILE;;\n+      \"saxp\") echo '/*' \"${SAX_P0}\" '*/' >> $FILE;;\n+      \"saxp0\") echo '/*' \"${SAX_P0}\" '*/' >> $FILE;;\n+      \"saxp1\") echo '/*' \"${SAX_P1}\" '*/' >> $FILE;;\n+      \"saxp2\") echo '/*' \"${SAX_P2}\" '*/' >> $FILE;;\n+      \"saxp3\") echo '/*' \"${SAX_P3}\" '*/' >> $FILE;;\n+      \"saxp4\") echo '/*' \"${SAX_P4}\" '*/' >> $FILE;;\n+      \"saxf\") echo '/*' \"${SAX_F0}\" '*/' >> $FILE;;\n+      \"saxf0\") echo '/*' \"${SAX_F0}\" '*/' >> $FILE;;\n+      \"saxf1\") echo '/*' \"${SAX_F1}\" '*/' >> $FILE;;\n+      \"saxf2\") echo '/*' \"${SAX_F2}\" '*/' >> $FILE;;\n+      \"saxf3\") echo '/*' \"${SAX_F3}\" '*/' >> $FILE;;\n+      \"saxf4\") echo '/*' \"${SAX_F4}\" '*/' >> $FILE;;\n+      \"reqs\") echo '/*' \"${REQ_S0}\" '*/' >> $FILE;;\n+      \"reqs0\") echo '/*' \"${REQ_S0}\" '*/' >> $FILE;;\n+      \"reqn\") echo '/*' \"${REQ_N0}\" '*/' >> $FILE;;\n+      \"reqn0\") echo '/*' \"${REQ_N0}\" '*/' >> $FILE;;\n+      *) echo \"oops: $KIND\"; exit 1;;\n+    esac\n+}\n+\n+# Generate a test using a single dg- command.  If requested, generate a\n+# second version that will fail.\n+one() {\n+    KIND=$1\n+    EXP=$2\n+    FAIL_VERSION=$3\n+\n+    NAME=${KIND}-${EXP}\n+    FILE1=${NAME}-1.c\n+    FILE2=${NAME}-2.c\n+    rm -f $FILE1\n+    touch $FILE1\n+    cmd $KIND $FILE1\n+    echo \"${GOOD_PROG}\" >> $FILE1\n+    echo \"${GOOD_PROG}\" > $FILE2\n+\n+    if [ \"${FAIL_VERSION}\" == \"yes\" ]; then\n+\tif [ \"${EXP}\" == \"${EXP_PASS}\" ]; then\n+\t    NAME=${KIND}-${EXP_FAIL}\n+\telse\n+\t    NAME=${KIND}-${EXP_XFAIL}\n+\tfi\n+\n+\tFILE1=${NAME}-1.c\n+\tFILE2=${NAME}-2.c\n+\trm -f $FILE1\n+\ttouch $FILE1\n+\tcmd $KIND $FILE1\n+\tcase $KIND in\n+\tdox*)\techo \"${BADR_PROG}\" >> $FILE1;;\n+\t*)\techo \"${BADC_PROG}\" >> $FILE1;;\n+\tesac\n+\techo \"${GOOD_PROG}\" > $FILE2\n+    fi\n+}\n+\n+# Generate a test using two dg- commands.  If requested, generate a\n+# second version that will fail.\n+two() {\n+    KIND1=$1\n+    KIND2=$2\n+    EXP=$3\n+    FAIL_VERSION=$4\n+\n+    NAME=${KIND1}-${KIND2}-${EXP}\n+    FILE1=${NAME}-1.c\n+    FILE2=${NAME}-2.c\n+\n+    rm -f $FILE1\n+    touch $FILE1\n+    cmd $KIND1 $FILE1\n+    cmd $KIND2 $FILE1\n+    echo \"${GOOD_PROG}\" >> $FILE1\n+    echo \"${GOOD_PROG}\" > $FILE2\n+\n+    if [ \"${FAIL_VERSION}\" == \"yes\" ]; then\n+\tif [ \"${EXP}\" == \"${EXP_PASS}\" ]; then\n+\t    NAME=${KIND1}-${KIND2}-${EXP_FAIL}\n+\telse\n+\t    NAME=${KIND1}-${KIND2}-${EXP_XFAIL}\n+\tfi\n+\n+\tFILE1=${NAME}-1.c\n+\tFILE2=${NAME}-2.c\n+\trm -f $FILE1\n+\ttouch $FILE1\n+\tcmd $KIND1 $FILE1\n+\tcmd $KIND2 $FILE1\n+\t# dg-do with an xfail list is only used as the first command.\n+\tcase $KIND1 in\n+\tdox*)\techo \"${BADR_PROG}\" >> $FILE1;;\n+\t*)\techo \"${BADC_PROG}\" >> $FILE1;;\n+\tesac\n+\techo \"${GOOD_PROG}\" > $FILE2\n+    fi\n+}\n+\n+# Generate a test using three dg- commands.  If requested generate a\n+# second version that will fail.\n+three() {\n+    KIND1=$1\n+    KIND2=$2\n+    KIND3=$3\n+    EXP=$4\n+    FAIL_VERSION=$5\n+\n+    NAME=${KIND1}-${KIND2}-${KIND3}-${EXP}\n+    FILE1=${NAME}-1.c\n+    FILE2=${NAME}-2.c\n+    rm -f $FILE1\n+    touch $FILE1\n+    cmd $KIND1 $FILE1\n+    cmd $KIND2 $FILE1\n+    cmd $KIND3 $FILE1\n+    echo \"${GOOD_PROG}\" >> $FILE1\n+    echo \"${GOOD_PROG}\" > $FILE2\n+\n+    if [ \"${FAIL_VERSION}\" == \"${yes}\" ]; then\n+\tif [ \"${EXP}\" == \"${EXP_PASS}\" ]; then\n+\t    NAME=${KIND1}-${KIND2}-${KIND3}-${EXP_FAIL}\n+\telse\n+\t    NAME=${KIND1}-${KIND2}-${KIND3}-${EXP_XFAIL}\n+\tfi\n+\n+\tFILE1=${NAME}-1.c\n+\tFILE2=${NAME}-2.c\n+\trm -f $FILE1\n+\ttouch $FILE1\n+\tcmd $KIND1 $FILE1\n+\tcmd $KIND2 $FILE1\n+\tcmd $KIND3 $FILE1\n+\t# dg-do with an xfail list is only used as the first command.\n+\tcase $KIND1 in\n+\tdox*)\techo \"${BADR_PROG}\" >> $FILE1;;\n+\t*)\techo \"${BADC_PROG}\" >> $FILE1;;\n+\tesac\n+\techo \"${GOOD_PROG}\" > $FILE2\n+    fi\n+}\n+\n+# Generate tests using one dg- command.  Generate a test for each variant\n+# of KIND.\n+one_all() {\n+    KIND=$1\n+    EXP=$2\n+    FAIL_VERSION=$3\n+\n+    get_list $KIND\n+    for k in $KIND_LIST; do\n+\tone $k $EXP $FAIL_VERSION\n+    done\n+}\n+\n+# Generate tests using two dg- commands.  For each KIND, generate\n+# a test for each of its variants.\n+two_all() {\n+    KIND1=$1\n+    KIND2=$2\n+    EXP=$3\n+    FAIL_VERSION=$4\n+\n+    get_list $KIND1\n+    KIND_LIST1=\"$KIND_LIST\"\n+    get_list $KIND2\n+    KIND_LIST2=\"$KIND_LIST\"\n+    for k1 in $KIND_LIST1; do\n+\tfor k2 in $KIND_LIST2; do\n+\t    two $k1 $k2 $EXP $FAIL_VERSION\n+\tdone\n+    done\n+}\n+\n+# Generate tests using three dg- commands.  For each KIND, generate\n+# a test for each of its variants.\n+three_all() {\n+    KIND1=$1\n+    KIND2=$2\n+    KIND3=$3\n+    EXP=$4\n+    FAIL_VERSION=$5\n+\n+    get_list $KIND1\n+    KIND_LIST1=\"$KIND_LIST\"\n+    get_list $KIND2\n+    KIND_LIST2=\"$KIND_LIST\"\n+    get_list $KIND3\n+    KIND_LIST3=\"$KIND_LIST\"\n+    for k1 in $KIND_LIST1; do\n+\tfor k2 in $KIND_LIST2; do\n+\t    for k3 in $KIND_LIST3; do\n+\t\tthree $k1 $k2 $k3 $EXP $FAIL_VERSION\n+\t    done\n+\tdone\n+    done\n+}\n+\n+one_all saxp $EXP_PASS no\n+one_all saxf $EXP_XPASS no\n+one_all sats $EXP_PASS no\n+one_all satn $EXP_SKIP no\n+one_all dots $EXP_PASS yes\n+one_all dotn $EXP_SKIP no\n+one_all doxp $EXP_PASS yes\n+one_all doxf $EXP_XPASS yes\n+one_all sifs $EXP_PASS yes\n+one_all sifn $EXP_SKIP no\n+one_all xifp $EXP_PASS yes\n+one_all xiff $EXP_XPASS yes\n+one_all reqs $EXP_PASS yes\n+one_all reqn $EXP_SKIP no\n+\n+two_all dots xifp $EXP_PASS yes\n+two_all dots xiff $EXP_XPASS yes\n+two_all dots sifs $EXP_PASS yes\n+two_all dots sifn $EXP_SKIP no\n+two_all dotn xifp $EXP_SKIP no\n+two_all dotn sifs $EXP_SKIP no\n+two_all dotn sifn $EXP_SKIP no\n+two_all dotn xiff $EXP_SKIP no\n+two_all dots reqs $EXP_PASS yes\n+two_all dots reqn $EXP_SKIP no\n+two_all dotn reqs $EXP_SKIP no\n+two_all dotn reqn $EXP_SKIP no\n+\n+two_all doxp xifp $EXP_PASS yes\n+two_all doxp xiff $EXP_PASS yes   # dg-xfail-if applies to compile, not run\n+two_all doxp sifs $EXP_PASS yes\n+two_all doxp sifn $EXP_SKIP no\n+two_all doxf xifp $EXP_XPASS yes\n+two_all doxf xiff $EXP_XPASS yes\n+two_all doxf sifs $EXP_XPASS yes\n+two_all doxf sifn $EXP_SKIP no\n+\n+two_all doxp reqs $EXP_PASS yes\n+two_all doxp reqn $EXP_SKIP no\n+two_all doxf reqs $EXP_XPASS yes\n+two_all doxf reqn $EXP_SKIP no\n+\n+two_all reqs xifp $EXP_PASS yes\n+two_all reqs xiff $EXP_XPASS yes\n+two_all reqs sifs $EXP_PASS yes\n+two_all reqs sifn $EXP_SKIP no\n+two_all reqn xifp $EXP_SKIP no\n+two_all reqn xiff $EXP_SKIP no\n+two_all reqn sifs $EXP_SKIP no\n+two_all reqn sifn $EXP_SKIP no\n+\n+two_all xifp reqs $EXP_PASS yes\n+two_all xiff reqs $EXP_XPASS yes\n+two_all sifs reqs $EXP_PASS yes\n+two_all sifn reqs $EXP_SKIP no\n+two_all xifp reqn $EXP_SKIP no\n+two_all xiff reqn $EXP_SKIP no\n+two_all sifs reqn $EXP_SKIP no\n+two_all sifn reqn $EXP_SKIP no\n+\n+three_all dots reqs xifp $EXP_PASS yes\n+three_all dots reqs xiff $EXP_XPASS yes\n+three_all dots reqs sifs $EXP_PASS yes\n+three_all dots reqs sifn $EXP_SKIP no\n+three_all dots reqn xifp $EXP_SKIP no\n+three_all dots reqn xiff $EXP_SKIP no\n+three_all dots reqn sifs $EXP_SKIP no\n+three_all dots reqn sifn $EXP_SKIP no\n+three_all dotn reqs xifp $EXP_SKIP no\n+three_all dotn reqs xiff $EXP_SKIP no\n+three_all dotn reqs sifs $EXP_SKIP no\n+three_all dotn reqs sifn $EXP_SKIP no\n+three_all dotn reqn xifp $EXP_SKIP no\n+three_all dotn reqn xiff $EXP_SKIP no\n+three_all dotn reqn sifs $EXP_SKIP no\n+three_all dotn reqn sifn $EXP_SKIP no\n+#\n+three_all dots xifp reqs $EXP_PASS yes\n+three_all dots xiff reqs $EXP_XPASS yes\n+three_all dots sifs reqs $EXP_PASS yes\n+three_all dots sifn reqs $EXP_SKIP no\n+three_all dots xifp reqn $EXP_SKIP no\n+three_all dots xiff reqn $EXP_SKIP no\n+three_all dots sifs reqn $EXP_SKIP no\n+three_all dots sifn reqn $EXP_SKIP no\n+three_all dotn xifp reqs $EXP_SKIP no\n+three_all dotn xiff reqs $EXP_SKIP no\n+three_all dotn sifs reqs $EXP_SKIP no\n+three_all dotn sifn reqs $EXP_SKIP no\n+three_all dotn xifp reqn $EXP_SKIP no\n+three_all dotn xiff reqn $EXP_SKIP no\n+three_all dotn sifs reqn $EXP_SKIP no\n+three_all dotn sifn reqn $EXP_SKIP no\n+\n+three_all doxp reqs xifp $EXP_PASS yes\n+three_all doxp reqs xiff $EXP_PASS yes # dg-xfail-if applies to compile, not run\n+three_all doxp reqs sifs $EXP_PASS yes\n+three_all doxp reqs sifn $EXP_SKIP no\n+three_all doxp reqn xifp $EXP_SKIP no\n+three_all doxp reqn xiff $EXP_SKIP no\n+three_all doxp reqn sifs $EXP_SKIP no\n+three_all doxp reqn sifn $EXP_SKIP no\n+three_all doxf reqs xifp $EXP_XPASS yes\n+three_all doxf reqs xiff $EXP_XPASS yes\n+three_all doxf reqs sifs $EXP_XPASS yes\n+three_all doxf reqs sifn $EXP_SKIP no\n+three_all doxf reqn xifp $EXP_SKIP no\n+three_all doxf reqn xiff $EXP_SKIP no\n+three_all doxf reqn sifs $EXP_SKIP no\n+three_all doxf reqn sifn $EXP_SKIP no\n+\n+three_all doxp xifp reqs $EXP_PASS yes\n+three_all doxp xiff reqs $EXP_PASS yes # dg-xfail-if applies to compile, not run\n+three_all doxp sifs reqs $EXP_PASS yes\n+three_all doxp sifn reqs $EXP_SKIP no\n+three_all doxp xifp reqn $EXP_SKIP no\n+three_all doxp xiff reqn $EXP_SKIP no\n+three_all doxp sifs reqn $EXP_SKIP no\n+three_all doxp sifn reqn $EXP_SKIP no\n+three_all doxf xifp reqs $EXP_XPASS yes\n+three_all doxf xiff reqs $EXP_XPASS yes\n+three_all doxf sifs reqs $EXP_XPASS yes\n+three_all doxf sifn reqs $EXP_SKIP no\n+three_all doxf xifp reqn $EXP_SKIP no\n+three_all doxf xiff reqn $EXP_SKIP no\n+three_all doxf sifs reqn $EXP_SKIP no\n+three_all doxf sifn reqn $EXP_SKIP no"}, {"sha": "cddcb4cd65c6ca1232361ca7574f27aeb24f2d4f", "filename": "gcc/testsuite/gcc.test-framework/test-framework.awk", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/395909dddc2f0412da11261052aaaf41d55b0960/gcc%2Ftestsuite%2Fgcc.test-framework%2Ftest-framework.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/395909dddc2f0412da11261052aaaf41d55b0960/gcc%2Ftestsuite%2Fgcc.test-framework%2Ftest-framework.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.test-framework%2Ftest-framework.awk?ref=395909dddc2f0412da11261052aaaf41d55b0960", "patch": "@@ -0,0 +1,42 @@\n+# Process the gcc.sum file for a run through gcc.test-framework.\n+# Print result lines that show potential problems.  Report the number\n+# of passing tests.\n+#\n+#\n+# Copyright (c) 2004, 2005 Free Software Foundation, Inc.\n+#\n+# This file is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# For a copy of the GNU General Public License, write the the\n+# Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n+# Boston, MA 02111-1307, USA.\n+\n+BEGIN\t\t\t{ skip = 1; pass = 0 }\n+/Running.*test-frame/\t{ skip = 0; next }\n+/gcc Summary/\t\t{ skip = 1; next }\n+\t\t\t{ if (skip) next }\n+/^$/\t\t\t{ next }\n+# The post tests are always expected to pass.\n+/^PASS.*-2.c/\t\t{ next }\n+# dg-xfail-if applies to the compile step; these should be XPASS for the\n+# compile step on dox tests, which are run tests.\n+/^XPASS.*dox.*xiff.*-1.c.*(test for excess errors)/ { next }\n+# xfail for scan-assembler-not tests doesn't apply to the compile step.\n+/^PASS.*sa.*-1.c.*(test for excess errors)/ { next }\n+# The other dox tests pass the compile step; ignore that message.\n+/^PASS.*dox.*(test for excess errors)/ { next }\n+/^PASS/\t\t\t{ if (match ($0, \"exp-P\")) { pass++; next } }\n+/^FAIL/\t\t\t{ if (match ($0, \"exp-F\")) { pass++; next } }\n+/^XPASS/\t\t{ if (match ($0, \"exp-XP\")) { pass++; next } }\n+/^XFAIL/\t\t{ if (match ($0, \"exp-XF\")) { pass++; next } }\n+/^UNSUPPORTED/\t\t{ if (match ($0, \"exp-U\")) { pass++; next } }\n+\t\t\t{ print }\n+END\t\t\t{ printf(\"%d tests passed\\n\", pass) }"}, {"sha": "21cdc1fb0b4f291cb9ae5342d222f2a68ecb7dfd", "filename": "gcc/testsuite/gcc.test-framework/test-framework.exp", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/395909dddc2f0412da11261052aaaf41d55b0960/gcc%2Ftestsuite%2Fgcc.test-framework%2Ftest-framework.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/395909dddc2f0412da11261052aaaf41d55b0960/gcc%2Ftestsuite%2Fgcc.test-framework%2Ftest-framework.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.test-framework%2Ftest-framework.exp?ref=395909dddc2f0412da11261052aaaf41d55b0960", "patch": "@@ -0,0 +1,66 @@\n+# Copyright (c) 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+#\n+# This file is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# For a copy of the GNU General Public License, write the the\n+# Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n+# Boston, MA 02111-1307, USA.\n+\n+# Based on gcc/testsuite/gcc.dg/dg.exp.\n+\n+# Don't run these tests unless an environment variable is defined.\n+if { ![info exists env(CHECK_TEST_FRAMEWORK)] } {\n+    verbose \"skipping test framework tests, CHECK_TEST_FRAMEWORK is not defined\" 0\n+    return\n+}\n+\n+load_lib gcc-dg.exp\n+\n+proc dg-require-true { args } {\n+    verbose \"dg-require-true\" 2\n+}\n+\n+proc dg-require-false { args } {\n+    verbose \"dg-require-false\" 2\n+    upvar dg-do-what dg-do-what\n+    set dg-do-what [list [lindex ${dg-do-what} 0] \"N\" \"P\"]\n+}\n+\n+proc check_effective_target_yes { args } {\n+    return 1\n+}\n+\n+proc check_effective_target_no { args } {\n+    return 0\n+}\n+\n+global dg-do-what-default\n+set save-dg-do-what-default ${dg-do-what-default}\n+set dg-do-what-default compile\n+\n+# Generate the tests.\n+\n+set tstobjdir \"$tmpdir/gcc.test-framework\"\n+set generator \"$srcdir/$subdir/gen_directive_tests\"\n+file delete -force $tstobjdir\n+file mkdir $tstobjdir\n+set status [remote_exec host \"$generator $tstobjdir\"]\n+set status [lindex $status 0]\n+if { $status == 0 } {\n+    # Run the tests.\n+    dg-init\n+    dg-runtest [lsort [find $tstobjdir *.c]] \"\" \"-DY1 -DY2\"\n+    dg-finish\n+} else {\n+    warning \"Could not generate test framework tests\"\n+}\n+\n+set dg-do-what-default ${save-dg-do-what-default}"}]}