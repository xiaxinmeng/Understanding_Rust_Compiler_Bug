{"sha": "6315b6cbff7ca22e8d8d6f69b4fa0c87d41c2330", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjMxNWI2Y2JmZjdjYTIyZThkOGQ2ZjY5YjRmYTBjODdkNDFjMjMzMA==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2002-11-21T10:45:14Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2002-11-21T10:45:14Z"}, "message": "AsynchronousCloseException.java, [...]: New files.\n\n2002-11-21  Michael Koch <konqueror@gmx.de>\n\n\t* java/nio/channels/AsynchronousCloseException.java,\n\tjava/nio/channels/CancelledKeyException.java,\n\tjava/nio/channels/ClosedByInterruptException.java,\n\tjava/nio/channels/ConnectionPendingException.java,\n\tjava/nio/channels/FileLockInterruptionException.java,\n\tjava/nio/channels/IllegalSelectorException.java,\n\tjava/nio/channels/NoConnectionPendingException.java,\n\tjava/nio/channels/NonReadableChannelException.java,\n\tjava/nio/channels/NonWritableChannelException.java,\n\tjava/nio/channels/NotYetBoundException.java,\n\tjava/nio/channels/NotYetConnectedException.java,\n\tjava/nio/channels/OverlappingFileLockException.java,\n\tjava/nio/channels/UnresolvedAddressException.java,\n\tjava/nio/channels/UnsupportedAddressTypeException.java:\n\tNew files.\n\t* Makefile.am (ordinary_java_source_files): Added new files.\n\t* Makefile.in: Regenerated.\n\nFrom-SVN: r59341", "tree": {"sha": "913d391a8a46a9bb899ff59e7fbc6493cfc0127f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/913d391a8a46a9bb899ff59e7fbc6493cfc0127f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6315b6cbff7ca22e8d8d6f69b4fa0c87d41c2330", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6315b6cbff7ca22e8d8d6f69b4fa0c87d41c2330", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6315b6cbff7ca22e8d8d6f69b4fa0c87d41c2330", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6315b6cbff7ca22e8d8d6f69b4fa0c87d41c2330/comments", "author": null, "committer": null, "parents": [{"sha": "4033adc630effd3aebc705f3a93b8dd8a117fd0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4033adc630effd3aebc705f3a93b8dd8a117fd0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4033adc630effd3aebc705f3a93b8dd8a117fd0b"}], "stats": {"total": 795, "additions": 794, "deletions": 1}, "files": [{"sha": "5a6950725ee0f6122a5fcf1344870581df11f934", "filename": "libjava/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6315b6cbff7ca22e8d8d6f69b4fa0c87d41c2330/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6315b6cbff7ca22e8d8d6f69b4fa0c87d41c2330/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=6315b6cbff7ca22e8d8d6f69b4fa0c87d41c2330", "patch": "@@ -1,3 +1,23 @@\n+2002-11-21  Michael Koch <konqueror@gmx.de>\n+\n+\t* java/nio/channels/AsynchronousCloseException.java,\n+\tjava/nio/channels/CancelledKeyException.java,\n+\tjava/nio/channels/ClosedByInterruptException.java,\n+\tjava/nio/channels/ConnectionPendingException.java,\n+\tjava/nio/channels/FileLockInterruptionException.java,\n+\tjava/nio/channels/IllegalSelectorException.java,\n+\tjava/nio/channels/NoConnectionPendingException.java,\n+\tjava/nio/channels/NonReadableChannelException.java,\n+\tjava/nio/channels/NonWritableChannelException.java,\n+\tjava/nio/channels/NotYetBoundException.java,\n+\tjava/nio/channels/NotYetConnectedException.java,\n+\tjava/nio/channels/OverlappingFileLockException.java,\n+\tjava/nio/channels/UnresolvedAddressException.java,\n+\tjava/nio/channels/UnsupportedAddressTypeException.java:\n+\tNew files.\n+\t* Makefile.am (ordinary_java_source_files): Added new files.\n+\t* Makefile.in: Regenerated.\n+\n 2002-11-21  Michael Koch <konqueror@gmx.de>\n \n \t* include/posix.h"}, {"sha": "34135e77e996269e515480b9bdf2ee9738419400", "filename": "libjava/Makefile.am", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6315b6cbff7ca22e8d8d6f69b4fa0c87d41c2330/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6315b6cbff7ca22e8d8d6f69b4fa0c87d41c2330/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=6315b6cbff7ca22e8d8d6f69b4fa0c87d41c2330", "patch": "@@ -1977,15 +1977,27 @@ java/nio/InvalidMarkException.java \\\n java/nio/MappedByteBuffer.java \\\n java/nio/ReadOnlyBufferException.java \\\n java/nio/channels/AlreadyConnectedException.java \\\n+java/nio/channels/AsynchronousCloseException.java \\\n java/nio/channels/ByteChannel.java \\\n+java/nio/channels/CancelledKeyException.java \\\n java/nio/channels/Channel.java \\\n+java/nio/channels/ClosedByInterruptException.java \\\n java/nio/channels/ClosedChannelException.java \\\n java/nio/channels/ClosedSelectorException.java \\\n+java/nio/channels/ConnectionPendingException.java \\\n java/nio/channels/DatagramChannel.java \\\n java/nio/channels/FileChannel.java \\\n+java/nio/channels/FileLockInterruptionException.java \\\n java/nio/channels/GatheringByteChannel.java \\\n java/nio/channels/IllegalBlockingModeException.java \\\n+java/nio/channels/IllegalSelectorException.java \\\n java/nio/channels/InterruptibleChannel.java \\\n+java/nio/channels/NoConnectionPendingException.java \\\n+java/nio/channels/NonReadableChannelException.java \\\n+java/nio/channels/NonWritableChannelException.java \\\n+java/nio/channels/NotYetBoundException.java \\\n+java/nio/channels/NotYetConnectedException.java \\\n+java/nio/channels/OverlappingFileLockException.java \\\n java/nio/channels/Pipe.java \\\n java/nio/channels/ReadableByteChannel.java \\\n java/nio/channels/ScatteringByteChannel.java \\\n@@ -1994,6 +2006,8 @@ java/nio/channels/SelectionKey.java \\\n java/nio/channels/Selector.java \\\n java/nio/channels/ServerSocketChannel.java \\\n java/nio/channels/SocketChannel.java \\\n+java/nio/channels/UnresolvedAddressException.java \\\n+java/nio/channels/UnsupportedAddressTypeException.java \\\n java/nio/channels/WritableByteChannel.java \\\n java/nio/channels/spi/AbstractSelectableChannel.java \\\n java/nio/channels/spi/AbstractInterruptibleChannel.java \\"}, {"sha": "239bd09db32644364e327ff6052f047eda7fca36", "filename": "libjava/Makefile.in", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6315b6cbff7ca22e8d8d6f69b4fa0c87d41c2330/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6315b6cbff7ca22e8d8d6f69b4fa0c87d41c2330/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=6315b6cbff7ca22e8d8d6f69b4fa0c87d41c2330", "patch": "@@ -1727,15 +1727,27 @@ java/nio/InvalidMarkException.java \\\n java/nio/MappedByteBuffer.java \\\n java/nio/ReadOnlyBufferException.java \\\n java/nio/channels/AlreadyConnectedException.java \\\n+java/nio/channels/AsynchronousCloseException.java \\\n java/nio/channels/ByteChannel.java \\\n+java/nio/channels/CancelledKeyException.java \\\n java/nio/channels/Channel.java \\\n+java/nio/channels/ClosedByInterruptException.java \\\n java/nio/channels/ClosedChannelException.java \\\n java/nio/channels/ClosedSelectorException.java \\\n+java/nio/channels/ConnectionPendingException.java \\\n java/nio/channels/DatagramChannel.java \\\n java/nio/channels/FileChannel.java \\\n+java/nio/channels/FileLockInterruptionException.java \\\n java/nio/channels/GatheringByteChannel.java \\\n java/nio/channels/IllegalBlockingModeException.java \\\n+java/nio/channels/IllegalSelectorException.java \\\n java/nio/channels/InterruptibleChannel.java \\\n+java/nio/channels/NoConnectionPendingException.java \\\n+java/nio/channels/NonReadableChannelException.java \\\n+java/nio/channels/NonWritableChannelException.java \\\n+java/nio/channels/NotYetBoundException.java \\\n+java/nio/channels/NotYetConnectedException.java \\\n+java/nio/channels/OverlappingFileLockException.java \\\n java/nio/channels/Pipe.java \\\n java/nio/channels/ReadableByteChannel.java \\\n java/nio/channels/ScatteringByteChannel.java \\\n@@ -1744,6 +1756,8 @@ java/nio/channels/SelectionKey.java \\\n java/nio/channels/Selector.java \\\n java/nio/channels/ServerSocketChannel.java \\\n java/nio/channels/SocketChannel.java \\\n+java/nio/channels/UnresolvedAddressException.java \\\n+java/nio/channels/UnsupportedAddressTypeException.java \\\n java/nio/channels/WritableByteChannel.java \\\n java/nio/channels/spi/AbstractSelectableChannel.java \\\n java/nio/channels/spi/AbstractInterruptibleChannel.java \\\n@@ -3009,14 +3023,27 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/java/nio/InvalidMarkException.P .deps/java/nio/MappedByteBuffer.P \\\n .deps/java/nio/ReadOnlyBufferException.P \\\n .deps/java/nio/channels/AlreadyConnectedException.P \\\n-.deps/java/nio/channels/ByteChannel.P .deps/java/nio/channels/Channel.P \\\n+.deps/java/nio/channels/AsynchronousCloseException.P \\\n+.deps/java/nio/channels/ByteChannel.P \\\n+.deps/java/nio/channels/CancelledKeyException.P \\\n+.deps/java/nio/channels/Channel.P \\\n+.deps/java/nio/channels/ClosedByInterruptException.P \\\n .deps/java/nio/channels/ClosedChannelException.P \\\n .deps/java/nio/channels/ClosedSelectorException.P \\\n+.deps/java/nio/channels/ConnectionPendingException.P \\\n .deps/java/nio/channels/DatagramChannel.P \\\n .deps/java/nio/channels/FileChannel.P \\\n+.deps/java/nio/channels/FileLockInterruptionException.P \\\n .deps/java/nio/channels/GatheringByteChannel.P \\\n .deps/java/nio/channels/IllegalBlockingModeException.P \\\n+.deps/java/nio/channels/IllegalSelectorException.P \\\n .deps/java/nio/channels/InterruptibleChannel.P \\\n+.deps/java/nio/channels/NoConnectionPendingException.P \\\n+.deps/java/nio/channels/NonReadableChannelException.P \\\n+.deps/java/nio/channels/NonWritableChannelException.P \\\n+.deps/java/nio/channels/NotYetBoundException.P \\\n+.deps/java/nio/channels/NotYetConnectedException.P \\\n+.deps/java/nio/channels/OverlappingFileLockException.P \\\n .deps/java/nio/channels/Pipe.P \\\n .deps/java/nio/channels/ReadableByteChannel.P \\\n .deps/java/nio/channels/ScatteringByteChannel.P \\\n@@ -3025,6 +3052,8 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/java/nio/channels/Selector.P \\\n .deps/java/nio/channels/ServerSocketChannel.P \\\n .deps/java/nio/channels/SocketChannel.P \\\n+.deps/java/nio/channels/UnresolvedAddressException.P \\\n+.deps/java/nio/channels/UnsupportedAddressTypeException.P \\\n .deps/java/nio/channels/WritableByteChannel.P \\\n .deps/java/nio/channels/spi/AbstractInterruptibleChannel.P \\\n .deps/java/nio/channels/spi/AbstractSelectableChannel.P \\"}, {"sha": "ec4bbc7fd47bcc0f33d0bb4f45122e7f9a47889d", "filename": "libjava/java/nio/channels/AsynchronousCloseException.java", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6315b6cbff7ca22e8d8d6f69b4fa0c87d41c2330/libjava%2Fjava%2Fnio%2Fchannels%2FAsynchronousCloseException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6315b6cbff7ca22e8d8d6f69b4fa0c87d41c2330/libjava%2Fjava%2Fnio%2Fchannels%2FAsynchronousCloseException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2FAsynchronousCloseException.java?ref=6315b6cbff7ca22e8d8d6f69b4fa0c87d41c2330", "patch": "@@ -0,0 +1,52 @@\n+/* AsynchronousCloseException.java -- \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.nio.channels;\n+\n+/**\n+ * @author Michael Koch\n+ * @since 1.4\n+ */\n+public class AsynchronousCloseException extends ClosedChannelException\n+{\n+  /**\n+   * Creates the exception\n+   */\n+  public AsynchronousCloseException()\n+  {\n+  }\n+}"}, {"sha": "cf3c5cc352c67fbf68eaf658ca48add5a5bfc6e2", "filename": "libjava/java/nio/channels/CancelledKeyException.java", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6315b6cbff7ca22e8d8d6f69b4fa0c87d41c2330/libjava%2Fjava%2Fnio%2Fchannels%2FCancelledKeyException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6315b6cbff7ca22e8d8d6f69b4fa0c87d41c2330/libjava%2Fjava%2Fnio%2Fchannels%2FCancelledKeyException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2FCancelledKeyException.java?ref=6315b6cbff7ca22e8d8d6f69b4fa0c87d41c2330", "patch": "@@ -0,0 +1,52 @@\n+/* CancelledKeyException.java -- \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.nio.channels;\n+\n+/**\n+ * @author Michael Koch\n+ * @since 1.4\n+ */\n+public class CancelledKeyException extends IllegalStateException\n+{\n+  /**\n+   * Creates the exception\n+   */\n+  public CancelledKeyException()\n+  {\n+  }\n+}"}, {"sha": "b99e016f17dfd12238a28149d81bf48330f8b5de", "filename": "libjava/java/nio/channels/ClosedByInterruptException.java", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6315b6cbff7ca22e8d8d6f69b4fa0c87d41c2330/libjava%2Fjava%2Fnio%2Fchannels%2FClosedByInterruptException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6315b6cbff7ca22e8d8d6f69b4fa0c87d41c2330/libjava%2Fjava%2Fnio%2Fchannels%2FClosedByInterruptException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2FClosedByInterruptException.java?ref=6315b6cbff7ca22e8d8d6f69b4fa0c87d41c2330", "patch": "@@ -0,0 +1,52 @@\n+/* ClosedByInterruptException.java -- \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.nio.channels;\n+\n+/**\n+ * @author Michael Koch\n+ * @since 1.4\n+ */\n+public class ClosedByInterruptException extends AsynchronousCloseException\n+{\n+  /**\n+   * Creates the exception\n+   */\n+  public ClosedByInterruptException()\n+  {\n+  }\n+}"}, {"sha": "876179c01b4aa049c07e3241d06579f49ef3cf10", "filename": "libjava/java/nio/channels/ConnectionPendingException.java", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6315b6cbff7ca22e8d8d6f69b4fa0c87d41c2330/libjava%2Fjava%2Fnio%2Fchannels%2FConnectionPendingException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6315b6cbff7ca22e8d8d6f69b4fa0c87d41c2330/libjava%2Fjava%2Fnio%2Fchannels%2FConnectionPendingException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2FConnectionPendingException.java?ref=6315b6cbff7ca22e8d8d6f69b4fa0c87d41c2330", "patch": "@@ -0,0 +1,52 @@\n+/* ConnectionPendingException.java -- \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.nio.channels;\n+\n+/**\n+ * @author Michael Koch\n+ * @since 1.4\n+ */\n+public class ConnectionPendingException extends IllegalStateException\n+{\n+  /**\n+   * Creates the exception\n+   */\n+  public ConnectionPendingException()\n+  {\n+  }\n+}"}, {"sha": "563b0a08fe7cd26fb879544d0399b85d14aca078", "filename": "libjava/java/nio/channels/FileLockInterruptionException.java", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6315b6cbff7ca22e8d8d6f69b4fa0c87d41c2330/libjava%2Fjava%2Fnio%2Fchannels%2FFileLockInterruptionException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6315b6cbff7ca22e8d8d6f69b4fa0c87d41c2330/libjava%2Fjava%2Fnio%2Fchannels%2FFileLockInterruptionException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2FFileLockInterruptionException.java?ref=6315b6cbff7ca22e8d8d6f69b4fa0c87d41c2330", "patch": "@@ -0,0 +1,54 @@\n+/* FileLockInterruptionException.java -- \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.nio.channels;\n+\n+import java.io.IOException;\n+\n+/**\n+ * @author Michael Koch\n+ * @since 1.4\n+ */\n+public class FileLockInterruptionException extends IOException\n+{\n+  /**\n+   * Creates the exception\n+   */\n+  public FileLockInterruptionException()\n+  {\n+  }\n+}"}, {"sha": "20465e56b1d32c91d0e1f7b1cd10dee273d0747e", "filename": "libjava/java/nio/channels/IllegalSelectorException.java", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6315b6cbff7ca22e8d8d6f69b4fa0c87d41c2330/libjava%2Fjava%2Fnio%2Fchannels%2FIllegalSelectorException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6315b6cbff7ca22e8d8d6f69b4fa0c87d41c2330/libjava%2Fjava%2Fnio%2Fchannels%2FIllegalSelectorException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2FIllegalSelectorException.java?ref=6315b6cbff7ca22e8d8d6f69b4fa0c87d41c2330", "patch": "@@ -0,0 +1,52 @@\n+/* IllegalSelectorException.java -- \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.nio.channels;\n+\n+/**\n+ * @author Michael Koch\n+ * @since 1.4\n+ */\n+public class IllegalSelectorException extends IllegalArgumentException\n+{\n+  /**\n+   * Creates the exception\n+   */\n+  public IllegalSelectorException()\n+  {\n+  }\n+}"}, {"sha": "f859cf6f651e1d2b8b5b5af3245b65eb42129651", "filename": "libjava/java/nio/channels/NoConnectionPendingException.java", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6315b6cbff7ca22e8d8d6f69b4fa0c87d41c2330/libjava%2Fjava%2Fnio%2Fchannels%2FNoConnectionPendingException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6315b6cbff7ca22e8d8d6f69b4fa0c87d41c2330/libjava%2Fjava%2Fnio%2Fchannels%2FNoConnectionPendingException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2FNoConnectionPendingException.java?ref=6315b6cbff7ca22e8d8d6f69b4fa0c87d41c2330", "patch": "@@ -0,0 +1,52 @@\n+/* NoConnectionPendingException.java -- \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.nio.channels;\n+\n+/**\n+ * @author Michael Koch\n+ * @since 1.4\n+ */\n+public class NoConnectionPendingException extends IllegalStateException\n+{\n+  /**\n+   * Creates the exception\n+   */\n+  public NoConnectionPendingException()\n+  {\n+  }\n+}"}, {"sha": "cb146bb5133876e6dfd55b8df46a94cba407bb1e", "filename": "libjava/java/nio/channels/NonReadableChannelException.java", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6315b6cbff7ca22e8d8d6f69b4fa0c87d41c2330/libjava%2Fjava%2Fnio%2Fchannels%2FNonReadableChannelException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6315b6cbff7ca22e8d8d6f69b4fa0c87d41c2330/libjava%2Fjava%2Fnio%2Fchannels%2FNonReadableChannelException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2FNonReadableChannelException.java?ref=6315b6cbff7ca22e8d8d6f69b4fa0c87d41c2330", "patch": "@@ -0,0 +1,52 @@\n+/* NonReadableChannelException.java -- \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.nio.channels;\n+\n+/**\n+ * @author Michael Koch\n+ * @since 1.4\n+ */\n+public class NonReadableChannelException extends IllegalStateException\n+{\n+  /**\n+   * Creates the exception\n+   */\n+  public NonReadableChannelException()\n+  {\n+  }\n+}"}, {"sha": "a26af3537c29c48ede2545a8f33b4bf7156e3fd2", "filename": "libjava/java/nio/channels/NonWritableChannelException.java", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6315b6cbff7ca22e8d8d6f69b4fa0c87d41c2330/libjava%2Fjava%2Fnio%2Fchannels%2FNonWritableChannelException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6315b6cbff7ca22e8d8d6f69b4fa0c87d41c2330/libjava%2Fjava%2Fnio%2Fchannels%2FNonWritableChannelException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2FNonWritableChannelException.java?ref=6315b6cbff7ca22e8d8d6f69b4fa0c87d41c2330", "patch": "@@ -0,0 +1,52 @@\n+/* NonWritableChannelException.java -- \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.nio.channels;\n+\n+/**\n+ * @author Michael Koch\n+ * @since 1.4\n+ */\n+public class NonWritableChannelException extends IllegalStateException\n+{\n+  /**\n+   * Creates the exception\n+   */\n+  public NonWritableChannelException()\n+  {\n+  }\n+}"}, {"sha": "0367b35e90def379399cb28698cf5a495bf2d053", "filename": "libjava/java/nio/channels/NotYetBoundException.java", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6315b6cbff7ca22e8d8d6f69b4fa0c87d41c2330/libjava%2Fjava%2Fnio%2Fchannels%2FNotYetBoundException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6315b6cbff7ca22e8d8d6f69b4fa0c87d41c2330/libjava%2Fjava%2Fnio%2Fchannels%2FNotYetBoundException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2FNotYetBoundException.java?ref=6315b6cbff7ca22e8d8d6f69b4fa0c87d41c2330", "patch": "@@ -0,0 +1,52 @@\n+/* NotYetBoundException.java -- \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.nio.channels;\n+\n+/**\n+ * @author Michael Koch\n+ * @since 1.4\n+ */\n+public class NotYetBoundException extends IllegalStateException\n+{\n+  /**\n+   * Creates the exception\n+   */\n+  public NotYetBoundException()\n+  {\n+  }\n+}"}, {"sha": "3c15369611b5b326508542fc94fdf19cb7beb57c", "filename": "libjava/java/nio/channels/NotYetConnectedException.java", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6315b6cbff7ca22e8d8d6f69b4fa0c87d41c2330/libjava%2Fjava%2Fnio%2Fchannels%2FNotYetConnectedException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6315b6cbff7ca22e8d8d6f69b4fa0c87d41c2330/libjava%2Fjava%2Fnio%2Fchannels%2FNotYetConnectedException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2FNotYetConnectedException.java?ref=6315b6cbff7ca22e8d8d6f69b4fa0c87d41c2330", "patch": "@@ -0,0 +1,52 @@\n+/* NotYetConnectedException.java -- \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.nio.channels;\n+\n+/**\n+ * @author Michael Koch\n+ * @since 1.4\n+ */\n+public class NotYetConnectedException extends IllegalStateException\n+{\n+  /**\n+   * Creates the exception\n+   */\n+  public NotYetConnectedException()\n+  {\n+  }\n+}"}, {"sha": "2f856d3ea7303b6ce9203f5abdbc8e1cad532e93", "filename": "libjava/java/nio/channels/OverlappingFileLockException.java", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6315b6cbff7ca22e8d8d6f69b4fa0c87d41c2330/libjava%2Fjava%2Fnio%2Fchannels%2FOverlappingFileLockException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6315b6cbff7ca22e8d8d6f69b4fa0c87d41c2330/libjava%2Fjava%2Fnio%2Fchannels%2FOverlappingFileLockException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2FOverlappingFileLockException.java?ref=6315b6cbff7ca22e8d8d6f69b4fa0c87d41c2330", "patch": "@@ -0,0 +1,52 @@\n+/* OverlappingFileLockException.java -- \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.nio.channels;\n+\n+/**\n+ * @author Michael Koch\n+ * @since 1.4\n+ */\n+public class OverlappingFileLockException extends IllegalStateException\n+{\n+  /**\n+   * Creates the exception\n+   */\n+  public OverlappingFileLockException()\n+  {\n+  }\n+}"}, {"sha": "1cfdf970dca91488c64b802108232ffc16dfda72", "filename": "libjava/java/nio/channels/UnresolvedAddressException.java", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6315b6cbff7ca22e8d8d6f69b4fa0c87d41c2330/libjava%2Fjava%2Fnio%2Fchannels%2FUnresolvedAddressException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6315b6cbff7ca22e8d8d6f69b4fa0c87d41c2330/libjava%2Fjava%2Fnio%2Fchannels%2FUnresolvedAddressException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2FUnresolvedAddressException.java?ref=6315b6cbff7ca22e8d8d6f69b4fa0c87d41c2330", "patch": "@@ -0,0 +1,52 @@\n+/* UnresolvedAddressException.java -- \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.nio.channels;\n+\n+/**\n+ * @author Michael Koch\n+ * @since 1.4\n+ */\n+public class UnresolvedAddressException extends IllegalArgumentException\n+{\n+  /**\n+   * Creates the exception\n+   */\n+  public UnresolvedAddressException()\n+  {\n+  }\n+}"}, {"sha": "824772a235bed02bbf4c4ea74023b3218de0e919", "filename": "libjava/java/nio/channels/UnsupportedAddressTypeException.java", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6315b6cbff7ca22e8d8d6f69b4fa0c87d41c2330/libjava%2Fjava%2Fnio%2Fchannels%2FUnsupportedAddressTypeException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6315b6cbff7ca22e8d8d6f69b4fa0c87d41c2330/libjava%2Fjava%2Fnio%2Fchannels%2FUnsupportedAddressTypeException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2FUnsupportedAddressTypeException.java?ref=6315b6cbff7ca22e8d8d6f69b4fa0c87d41c2330", "patch": "@@ -0,0 +1,52 @@\n+/* UnsupportedAddressTypeException.java -- \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.nio.channels;\n+\n+/**\n+ * @author Michael Koch\n+ * @since 1.4\n+ */\n+public class UnsupportedAddressTypeException extends IllegalArgumentException\n+{\n+  /**\n+   * Creates the exception\n+   */\n+  public UnsupportedAddressTypeException()\n+  {\n+  }\n+}"}]}