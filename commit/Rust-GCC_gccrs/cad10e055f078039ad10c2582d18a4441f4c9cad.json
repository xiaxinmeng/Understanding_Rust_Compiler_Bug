{"sha": "cad10e055f078039ad10c2582d18a4441f4c9cad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2FkMTBlMDU1ZjA3ODAzOWFkMTBjMjU4MmQxOGE0NDQxZjRjOWNhZA==", "commit": {"author": {"name": "Ond\u0159ej B\u00edlka", "email": "neleai@seznam.cz", "date": "2013-07-21T15:38:21Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "2013-07-21T15:38:21Z"}, "message": "class.c: Fix typos.\n\n2013-07-21   Ond\u00c5\u0099ej B\u00c3\u00adlka  <neleai@seznam.cz>\n\n\t* class.c: Fix typos.\n\t* encoding.c: Likewise.\n\t* init.c: Likewise.\n\t* objc-private/runtime.h: Likewise.\n\t* objc/runtime.h: Likewise.\n\t* objc-sync.c: Likewise.\n\nFrom-SVN: r201097", "tree": {"sha": "2bfed6838fc6b4ca67f2f8653daa6500324f72fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2bfed6838fc6b4ca67f2f8653daa6500324f72fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cad10e055f078039ad10c2582d18a4441f4c9cad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cad10e055f078039ad10c2582d18a4441f4c9cad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cad10e055f078039ad10c2582d18a4441f4c9cad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cad10e055f078039ad10c2582d18a4441f4c9cad/comments", "author": {"login": "neleai", "id": 48067, "node_id": "MDQ6VXNlcjQ4MDY3", "avatar_url": "https://avatars.githubusercontent.com/u/48067?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neleai", "html_url": "https://github.com/neleai", "followers_url": "https://api.github.com/users/neleai/followers", "following_url": "https://api.github.com/users/neleai/following{/other_user}", "gists_url": "https://api.github.com/users/neleai/gists{/gist_id}", "starred_url": "https://api.github.com/users/neleai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neleai/subscriptions", "organizations_url": "https://api.github.com/users/neleai/orgs", "repos_url": "https://api.github.com/users/neleai/repos", "events_url": "https://api.github.com/users/neleai/events{/privacy}", "received_events_url": "https://api.github.com/users/neleai/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "587ae1e3bd7ead48424cdcb9b16d842fa828c6fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/587ae1e3bd7ead48424cdcb9b16d842fa828c6fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/587ae1e3bd7ead48424cdcb9b16d842fa828c6fd"}], "stats": {"total": 29, "additions": 19, "deletions": 10}, "files": [{"sha": "c2e1a2887b5b863434821424dac15e7e61df7562", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cad10e055f078039ad10c2582d18a4441f4c9cad/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cad10e055f078039ad10c2582d18a4441f4c9cad/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=cad10e055f078039ad10c2582d18a4441f4c9cad", "patch": "@@ -1,3 +1,12 @@\n+2013-07-21   Ond\u00c5\u0099ej B\u00c3\u00adlka  <neleai@seznam.cz>\n+\n+\t* class.c: Fix typos.\n+\t* encoding.c: Likewise.\n+\t* init.c: Likewise.\n+\t* objc-private/runtime.h: Likewise.\n+\t* objc/runtime.h: Likewise.\n+\t* objc-sync.c: Likewise.\n+\n 2013-07-04  Kai Tietz  <ktietz@redhat.com>\n \n \t* exception.c: Add check for SjLj to SEH blocks."}, {"sha": "c90603edd7948d591849498896b17b61e646f0e9", "filename": "libobjc/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cad10e055f078039ad10c2582d18a4441f4c9cad/libobjc%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cad10e055f078039ad10c2582d18a4441f4c9cad/libobjc%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fclass.c?ref=cad10e055f078039ad10c2582d18a4441f4c9cad", "patch": "@@ -764,7 +764,7 @@ objc_get_meta_class (const char *name)\n }\n \n /* This is not used by GCC, but the clang compiler seems to use it\n-   when targetting the GNU runtime.  That's wrong, but we have it to\n+   when targeting the GNU runtime.  That's wrong, but we have it to\n    be compatible.  */\n Class\n objc_lookup_class (const char *name)"}, {"sha": "299901a0b85b028aa79b2c5ff70f537eb5911fa0", "filename": "libobjc/encoding.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cad10e055f078039ad10c2582d18a4441f4c9cad/libobjc%2Fencoding.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cad10e055f078039ad10c2582d18a4441f4c9cad/libobjc%2Fencoding.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fencoding.c?ref=cad10e055f078039ad10c2582d18a4441f4c9cad", "patch": "@@ -1061,7 +1061,7 @@ objc_get_type_qualifiers (const char *type)\n   These functions are used by objc_sizeof_type and objc_alignof_type\n   functions to compute the size and alignment of structures. The\n   previous method of computing the size and alignment of a structure\n-  was not working on some architectures, particulary on AIX, and in\n+  was not working on some architectures, particularly on AIX, and in\n   the presence of bitfields inside the structure.  */\n void\n objc_layout_structure (const char *type,"}, {"sha": "db9b03670cb8b7f4991f62e49de2b939019a17a8", "filename": "libobjc/init.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cad10e055f078039ad10c2582d18a4441f4c9cad/libobjc%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cad10e055f078039ad10c2582d18a4441f4c9cad/libobjc%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Finit.c?ref=cad10e055f078039ad10c2582d18a4441f4c9cad", "patch": "@@ -338,7 +338,7 @@ objc_tree_insert_class (Class class)\n     }\n   \n   /* If the list was finished but the class hasn't been inserted, we\n-     don't have an existing class hierarchy that can accomodate it.\n+     don't have an existing class hierarchy that can accommodate it.\n      Create a new one.  */\n   __objc_class_tree_list = list_cons (NULL, __objc_class_tree_list);\n   __objc_class_tree_list->head = __objc_tree_insert_class (NULL, class);\n@@ -839,7 +839,7 @@ __objc_create_classes_tree (struct objc_module *module)\n   struct objc_symtab *symtab = module->symtab;\n   int i;\n \n-  /* Iterate thru classes defined in this module and insert them in\n+  /* Iterate through classes defined in this module and insert them in\n      the classes tree hierarchy.  */\n   for (i = 0; i < symtab->cls_def_cnt; i++)\n     {\n@@ -878,7 +878,7 @@ __objc_call_load_callback (struct objc_module *module)\n       struct objc_symtab *symtab = module->symtab;\n       int i;\n       \n-      /* Iterate thru classes defined in this module and call the callback\n+      /* Iterate through classes defined in this module and call the callback\n \t for each one.  */\n       for (i = 0; i < symtab->cls_def_cnt; i++)\n \t{"}, {"sha": "d7393bf8d0b47c46bfa66ed16329e58f1a8f1dce", "filename": "libobjc/objc-private/runtime.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cad10e055f078039ad10c2582d18a4441f4c9cad/libobjc%2Fobjc-private%2Fruntime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cad10e055f078039ad10c2582d18a4441f4c9cad/libobjc%2Fobjc-private%2Fruntime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc-private%2Fruntime.h?ref=cad10e055f078039ad10c2582d18a4441f4c9cad", "patch": "@@ -32,7 +32,7 @@ The original list was:\n #include \"objc/hash.h\"\n #include \"objc/objc-list.h\"\n \n-but can almost certainly be shrinked down.  */\n+but can almost certainly be shrunk down.  */\n \n #ifndef __objc_private_runtime_INCLUDE_GNU\n #define __objc_private_runtime_INCLUDE_GNU\n@@ -42,7 +42,7 @@ but can almost certainly be shrinked down.  */\n #include <stdio.h>\n #include <ctype.h>\n \n-#include <stddef.h>\t\t/* so noone else will get system versions */\n+#include <stddef.h>\t\t/* so no one else will get system versions */\n #include <assert.h>\n \n extern BOOL __objc_add_class_to_hash (Class);   /* (objc-class.c) */"}, {"sha": "b9184e9adc80f832bdcfb614e4ba601571f75f66", "filename": "libobjc/objc-sync.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cad10e055f078039ad10c2582d18a4441f4c9cad/libobjc%2Fobjc-sync.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cad10e055f078039ad10c2582d18a4441f4c9cad/libobjc%2Fobjc-sync.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc-sync.c?ref=cad10e055f078039ad10c2582d18a4441f4c9cad", "patch": "@@ -390,7 +390,7 @@ objc_sync_exit (id object)\n \t      node->usage_count--;\n \t      /* Normally, we do not reset object to nil here.  We'll\n \t\t leave the lock associated with that object, at zero\n-\t\t usage count.  This makes it slighly more efficient to\n+\t\t usage count.  This makes it slightly more efficient to\n \t\t provide a lock for that object if (as likely)\n \t\t requested again.  If the object is deallocated, we\n \t\t don't care.  It will never match a new lock that is"}, {"sha": "82a317afea63b2163868f2cc23ca6147cc3a4420", "filename": "libobjc/objc/runtime.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cad10e055f078039ad10c2582d18a4441f4c9cad/libobjc%2Fobjc%2Fruntime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cad10e055f078039ad10c2582d18a4441f4c9cad/libobjc%2Fobjc%2Fruntime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fruntime.h?ref=cad10e055f078039ad10c2582d18a4441f4c9cad", "patch": "@@ -793,7 +793,7 @@ objc_EXPORT Protocol *objc_getProtocol (const char *name);\n objc_EXPORT Protocol **objc_copyProtocolList (unsigned int *numberOfReturnedProtocols);\n \n /* Add a protocol to a class, and return YES if it was done\n-   succesfully, and NO if not.  At the moment, NO should only happen\n+   successfully, and NO if not.  At the moment, NO should only happen\n    if class_ or protocol are nil, if the protocol is not a Protocol\n    object or if the class already conforms to the protocol.  */\n objc_EXPORT BOOL class_addProtocol (Class class_, Protocol *protocol);\n@@ -1114,7 +1114,7 @@ objc_EXPORT unsigned objc_get_type_qualifiers (const char *type);\n   These functions are used by objc_sizeof_type and objc_alignof_type\n   functions to compute the size and alignment of structures. The\n   previous method of computing the size and alignment of a structure\n-  was not working on some architectures, particulary on AIX, and in\n+  was not working on some architectures, particularly on AIX, and in\n   the presence of bitfields inside the structure.  */\n struct objc_struct_layout\n {"}]}