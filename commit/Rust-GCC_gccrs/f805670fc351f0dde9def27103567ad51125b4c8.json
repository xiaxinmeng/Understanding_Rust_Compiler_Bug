{"sha": "f805670fc351f0dde9def27103567ad51125b4c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjgwNTY3MGZjMzUxZjBkZGU5ZGVmMjcxMDM1NjdhZDUxMTI1YjRjOA==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@st.com", "date": "2005-09-02T12:04:22Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2005-09-02T12:04:22Z"}, "message": "re PR rtl-optimization/20365 (simplify_plus_minus results are erratic)\n\n\tPR rtl-optimization/20365\n\t* simplify-rtx.c (simplify_plus_minus_op_data): Change type of neg\n\tto short.  New member ix.\n\t(simplify_plus_minus_op_data_cmp): Break ties using ix member.\n\t(simplify_plus_minus): Initialize ix members before calling qsort.\n\nFrom-SVN: r103771", "tree": {"sha": "28215a4a9220adc682a7d9f82588dce4b996c5dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28215a4a9220adc682a7d9f82588dce4b996c5dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f805670fc351f0dde9def27103567ad51125b4c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f805670fc351f0dde9def27103567ad51125b4c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f805670fc351f0dde9def27103567ad51125b4c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f805670fc351f0dde9def27103567ad51125b4c8/comments", "author": null, "committer": null, "parents": [{"sha": "b8c4f9a4ce7eafd29a90298d51cd50294fe8d8a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8c4f9a4ce7eafd29a90298d51cd50294fe8d8a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8c4f9a4ce7eafd29a90298d51cd50294fe8d8a7"}], "stats": {"total": 26, "additions": 22, "deletions": 4}, "files": [{"sha": "f240c5d0738f8ac48eeeabdbf4d83fad5489c36b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f805670fc351f0dde9def27103567ad51125b4c8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f805670fc351f0dde9def27103567ad51125b4c8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f805670fc351f0dde9def27103567ad51125b4c8", "patch": "@@ -1,3 +1,11 @@\n+2005-09-02  J\"orn Rennecke <joern.rennecke@st.com>\n+\n+\tPR rtl-optimization/20365\n+\t* simplify-rtx.c (simplify_plus_minus_op_data): Change type of neg\n+\tto short.  New member ix.\n+\t(simplify_plus_minus_op_data_cmp): Break ties using ix member.\n+\t(simplify_plus_minus): Initialize ix members before calling qsort.\n+\n 2005-09-02  Zdenek Dvorak  <dvorakz@suse.cz>\n \n \tPR tree-optimization/23626"}, {"sha": "13e90e99bfdda27b00b44dde76aa4acd9bb18e29", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f805670fc351f0dde9def27103567ad51125b4c8/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f805670fc351f0dde9def27103567ad51125b4c8/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=f805670fc351f0dde9def27103567ad51125b4c8", "patch": "@@ -2574,17 +2574,22 @@ simplify_const_binary_operation (enum rtx_code code, enum machine_mode mode,\n struct simplify_plus_minus_op_data\n {\n   rtx op;\n-  int neg;\n+  short neg;\n+  short ix;\n };\n \n static int\n simplify_plus_minus_op_data_cmp (const void *p1, const void *p2)\n {\n   const struct simplify_plus_minus_op_data *d1 = p1;\n   const struct simplify_plus_minus_op_data *d2 = p2;\n+  int result;\n \n-  return (commutative_operand_precedence (d2->op)\n-\t  - commutative_operand_precedence (d1->op));\n+  result = (commutative_operand_precedence (d2->op)\n+\t    - commutative_operand_precedence (d1->op));\n+  if (result)\n+    return result;\n+  return d1->ix - d2->ix;\n }\n \n static rtx\n@@ -2759,7 +2764,12 @@ simplify_plus_minus (enum rtx_code code, enum machine_mode mode, rtx op0,\n   /* Pack all the operands to the lower-numbered entries.  */\n   for (i = 0, j = 0; j < n_ops; j++)\n     if (ops[j].op)\n-      ops[i++] = ops[j];\n+      {\n+\tops[i] = ops[j];\n+\t/* Stabilize sort.  */\n+\tops[i].ix = i;\n+\ti++;\n+      }\n   n_ops = i;\n \n   /* Sort the operations based on swap_commutative_operands_p.  */"}]}