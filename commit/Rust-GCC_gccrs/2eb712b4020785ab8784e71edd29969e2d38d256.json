{"sha": "2eb712b4020785ab8784e71edd29969e2d38d256", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmViNzEyYjQwMjA3ODVhYjg3ODRlNzFlZGQyOTk2OWUyZDM4ZDI1Ng==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2012-08-24T12:57:24Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2012-08-24T12:57:24Z"}, "message": "predict.c (maybe_hot_frequency_p): New parameter fun.\n\n2012-08-24  Martin Jambor  <mjambor@suse.cz>\n\n\t* predict.c (maybe_hot_frequency_p): New parameter fun.  Use its decl\n\tinstead of current_function_decl, use profile_status_for_function and\n\tENTRY_BLOCK_PTR_FOR_FUNCTION with fun instead of their cfun variants.\n\t(maybe_hot_count_p): New parameter fun, use\n\tprofile_status_for_function instead of its cfun_variant.\n\t(maybe_hot_bb_p): New parameter fun, checking-assert it, pass it to\n\tall callees.\n\t(maybe_hot_edge_p): Pass cfun to maybe_hot_count_p and\n\tmaybe_hot_frequency_p.\n\t(probably_never_executed_bb_p): New parameter fun, use its decl\n\tinstead of current_function_decl.\n\t(optimize_bb_for_size_p): Pass cfun to maybe_hot_bb_p.\n\t(rtl_profile_for_bb): Likewise.\n\t(compute_function_frequency): Pass cfun to maybe_hot_bb_p and\n\tprobably_never_executed_bb_p.\n\t* tree-ssa-operands.c (ssa_operands_active): New operator fun.  Use it\n\tinstead of cfun.\n\t(update_stmt_operands): Pass cfun as an argument of\n\tssa_operands_active.\n\t(swap_tree_operands): Likewise.\n\t* gimple-iterator.c (update_modified_stmt): Likewise.\n\t(update_modified_stmts): Likewise.\n\t* tree-flow-inline.h (delink_stmt_imm_use): Likewise.\n\t* tree-ssa.c (delete_tree_ssa): Likewise.\n\t* bb-reorder.c (bb_to_key): Pass cfun to probably_never_executed_bb_p.\n\t(push_to_next_round_p): Likewise.\n\t(find_rarely_executed_basic_blocks_and_crossing_edges ): Likewise.\n\t* cfg.c: Inlude tree.h.\n\t(check_bb_profile): Use profile_status_for_function,\n\tEXIT_BLOCK_PTR_FOR_FUNCTION and ENTRY_BLOCK_PTR_FOR_FUNCTION with\n\tDECL_STRUCT_FUNCTION (current_function_decl) instead of their cfun\n\tvariants.\n\t(dump_bb_info): Pass DECL_STRUCT_FUNCTION (current_function_decl) to\n\tmaybe_hot_bb_p and probably_never_executed_bb_p.\n\t* gimple-pretty-print.c (gimple_dump_bb_buff): Checking-assert that\n\tDECL_STRUCT_FUNCTION (current_function_decl) is not NULL.  Pass it to\n\tdump_histograms_for_stmt.\n\t(dump_gimple_mem_ops): Pass DECL_STRUCT_FUNCTION (current_function_decl)\n\tas an argument to dump_gimple_mem_ops.\n\t* tree-cfg.c (dump_function_to_file): Rename parameter fn to fndecl.\n\tDo not change cfun.  Change and restore current_function_decl.\n\t* Makefile.in (cfg.o): Include TREE_H in dependencies.\n\nFrom-SVN: r190645", "tree": {"sha": "b1213a8631b75e45f38fd88f7776c25b9fafe3b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1213a8631b75e45f38fd88f7776c25b9fafe3b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2eb712b4020785ab8784e71edd29969e2d38d256", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2eb712b4020785ab8784e71edd29969e2d38d256", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2eb712b4020785ab8784e71edd29969e2d38d256", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2eb712b4020785ab8784e71edd29969e2d38d256/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e55e40561955a4e732e8b503e37ca148fe162909", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e55e40561955a4e732e8b503e37ca148fe162909", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e55e40561955a4e732e8b503e37ca148fe162909"}], "stats": {"total": 197, "additions": 121, "deletions": 76}, "files": [{"sha": "c566f093bdfc92320e99484a736758e881271d88", "filename": "gcc/ChangeLog", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eb712b4020785ab8784e71edd29969e2d38d256/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eb712b4020785ab8784e71edd29969e2d38d256/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2eb712b4020785ab8784e71edd29969e2d38d256", "patch": "@@ -1,3 +1,48 @@\n+2012-08-24  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* predict.c (maybe_hot_frequency_p): New parameter fun.  Use its decl\n+\tinstead of current_function_decl, use profile_status_for_function and\n+\tENTRY_BLOCK_PTR_FOR_FUNCTION with fun instead of their cfun variants.\n+\t(maybe_hot_count_p): New parameter fun, use\n+\tprofile_status_for_function instead of its cfun_variant.\n+\t(maybe_hot_bb_p): New parameter fun, checking-assert it, pass it to\n+\tall callees.\n+\t(maybe_hot_edge_p): Pass cfun to maybe_hot_count_p and\n+\tmaybe_hot_frequency_p.\n+\t(probably_never_executed_bb_p): New parameter fun, use its decl\n+\tinstead of current_function_decl.\n+\t(optimize_bb_for_size_p): Pass cfun to maybe_hot_bb_p.\n+\t(rtl_profile_for_bb): Likewise.\n+\t(compute_function_frequency): Pass cfun to maybe_hot_bb_p and\n+\tprobably_never_executed_bb_p.\n+\t* tree-ssa-operands.c (ssa_operands_active): New operator fun.  Use it\n+\tinstead of cfun.\n+\t(update_stmt_operands): Pass cfun as an argument of\n+\tssa_operands_active.\n+\t(swap_tree_operands): Likewise.\n+\t* gimple-iterator.c (update_modified_stmt): Likewise.\n+\t(update_modified_stmts): Likewise.\n+\t* tree-flow-inline.h (delink_stmt_imm_use): Likewise.\n+\t* tree-ssa.c (delete_tree_ssa): Likewise.\n+\t* bb-reorder.c (bb_to_key): Pass cfun to probably_never_executed_bb_p.\n+\t(push_to_next_round_p): Likewise.\n+\t(find_rarely_executed_basic_blocks_and_crossing_edges ): Likewise.\n+\t* cfg.c: Inlude tree.h.\n+\t(check_bb_profile): Use profile_status_for_function,\n+\tEXIT_BLOCK_PTR_FOR_FUNCTION and ENTRY_BLOCK_PTR_FOR_FUNCTION with\n+\tDECL_STRUCT_FUNCTION (current_function_decl) instead of their cfun\n+\tvariants.\n+\t(dump_bb_info): Pass DECL_STRUCT_FUNCTION (current_function_decl) to\n+\tmaybe_hot_bb_p and probably_never_executed_bb_p.\n+\t* gimple-pretty-print.c (gimple_dump_bb_buff): Checking-assert that\n+\tDECL_STRUCT_FUNCTION (current_function_decl) is not NULL.  Pass it to\n+\tdump_histograms_for_stmt.\n+\t(dump_gimple_mem_ops): Pass DECL_STRUCT_FUNCTION (current_function_decl)\n+\tas an argument to dump_gimple_mem_ops.\n+\t* tree-cfg.c (dump_function_to_file): Rename parameter fn to fndecl.\n+\tDo not change cfun.  Change and restore current_function_decl.\n+\t* Makefile.in (cfg.o): Include TREE_H in dependencies.\n+\n 2012-08-24  Georg-Johann Lay  <avr@gjlay.de>\n \n \tPR target/54222"}, {"sha": "9886b6c4caafb50006dc38b6f1c073caba9718e0", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eb712b4020785ab8784e71edd29969e2d38d256/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eb712b4020785ab8784e71edd29969e2d38d256/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=2eb712b4020785ab8784e71edd29969e2d38d256", "patch": "@@ -3047,7 +3047,8 @@ auto-inc-dec.o : auto-inc-dec.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(REGS_H) $(FLAGS_H) $(FUNCTION_H) $(EXCEPT_H) $(DIAGNOSTIC_CORE_H) $(RECOG_H) \\\n    $(EXPR_H) $(TREE_PASS_H) $(DF_H) $(DBGCNT_H) $(TARGET_H)\n cfg.o : cfg.c $(CONFIG_H) $(SYSTEM_H) coretypes.h dumpfile.h $(DIAGNOSTIC_CORE_H) \\\n-   $(GGC_H) $(OBSTACK_H) alloc-pool.h $(HASHTAB_H) $(CFGLOOP_H) $(BASIC_BLOCK_H)\n+   $(GGC_H) $(OBSTACK_H) alloc-pool.h $(HASHTAB_H) $(CFGLOOP_H) $(TREE_H) \\\n+   $(BASIC_BLOCK_H)\n cfghooks.o: cfghooks.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(BASIC_BLOCK_H) $(TREE_FLOW_H) $(TIMEVAR_H) toplev.h $(DIAGNOSTIC_CORE_H) $(CFGLOOP_H)\n cfgexpand.o : cfgexpand.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\"}, {"sha": "09b5eb0a77cab2a7fa5b68b272959b8e4ba9cf1b", "filename": "gcc/basic-block.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eb712b4020785ab8784e71edd29969e2d38d256/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eb712b4020785ab8784e71edd29969e2d38d256/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=2eb712b4020785ab8784e71edd29969e2d38d256", "patch": "@@ -693,9 +693,9 @@ extern struct edge_list *pre_edge_rev_lcm (int, sbitmap *,\n extern void compute_available (sbitmap *, sbitmap *, sbitmap *, sbitmap *);\n \n /* In predict.c */\n-extern bool maybe_hot_bb_p (const_basic_block);\n+extern bool maybe_hot_bb_p (struct function *, const_basic_block);\n extern bool maybe_hot_edge_p (edge);\n-extern bool probably_never_executed_bb_p (const_basic_block);\n+extern bool probably_never_executed_bb_p (struct function *, const_basic_block);\n extern bool optimize_bb_for_size_p (const_basic_block);\n extern bool optimize_bb_for_speed_p (const_basic_block);\n extern bool optimize_edge_for_size_p (edge);"}, {"sha": "c282fb2fe30f94b713109e39795bc959a27eadce", "filename": "gcc/bb-reorder.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eb712b4020785ab8784e71edd29969e2d38d256/gcc%2Fbb-reorder.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eb712b4020785ab8784e71edd29969e2d38d256/gcc%2Fbb-reorder.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbb-reorder.c?ref=2eb712b4020785ab8784e71edd29969e2d38d256", "patch": "@@ -226,7 +226,7 @@ push_to_next_round_p (const_basic_block bb, int round, int number_of_rounds,\n \n   block_not_hot_enough = (bb->frequency < exec_th\n \t\t\t  || bb->count < count_th\n-\t\t\t  || probably_never_executed_bb_p (bb));\n+\t\t\t  || probably_never_executed_bb_p (cfun, bb));\n \n   if (there_exists_another_round\n       && block_not_hot_enough)\n@@ -823,7 +823,7 @@ bb_to_key (basic_block bb)\n   /* Do not start in probably never executed blocks.  */\n \n   if (BB_PARTITION (bb) == BB_COLD_PARTITION\n-      || probably_never_executed_bb_p (bb))\n+      || probably_never_executed_bb_p (cfun, bb))\n     return BB_FREQ_MAX;\n \n   /* Prefer blocks whose predecessor is an end of some trace\n@@ -1308,7 +1308,7 @@ find_rarely_executed_basic_blocks_and_crossing_edges (void)\n   /* Mark which partition (hot/cold) each basic block belongs in.  */\n   FOR_EACH_BB (bb)\n     {\n-      if (probably_never_executed_bb_p (bb))\n+      if (probably_never_executed_bb_p (cfun, bb))\n \tBB_SET_PARTITION (bb, BB_COLD_PARTITION);\n       else\n \tBB_SET_PARTITION (bb, BB_HOT_PARTITION);"}, {"sha": "3f14d49a72d3c0344ed1b1588a213459a552e4d1", "filename": "gcc/cfg.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eb712b4020785ab8784e71edd29969e2d38d256/gcc%2Fcfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eb712b4020785ab8784e71edd29969e2d38d256/gcc%2Fcfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfg.c?ref=2eb712b4020785ab8784e71edd29969e2d38d256", "patch": "@@ -55,6 +55,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ggc.h\"\n #include \"hashtab.h\"\n #include \"alloc-pool.h\"\n+#include \"tree.h\"\n #include \"basic-block.h\"\n #include \"df.h\"\n #include \"cfgloop.h\" /* FIXME: For struct loop.  */\n@@ -404,14 +405,15 @@ check_bb_profile (basic_block bb, FILE * file, int indent, int flags)\n   int sum = 0;\n   gcov_type lsum;\n   edge_iterator ei;\n+  struct function *fun = DECL_STRUCT_FUNCTION (current_function_decl);\n   char *s_indent = (char *) alloca ((size_t) indent + 1);\n   memset ((void *) s_indent, ' ', (size_t) indent);\n   s_indent[indent] = '\\0';\n \n-  if (profile_status == PROFILE_ABSENT)\n+  if (profile_status_for_function (fun) == PROFILE_ABSENT)\n     return;\n \n-  if (bb != EXIT_BLOCK_PTR)\n+  if (bb != EXIT_BLOCK_PTR_FOR_FUNCTION (fun))\n     {\n       FOR_EACH_EDGE (e, ei, bb->succs)\n \tsum += e->probability;\n@@ -428,7 +430,7 @@ check_bb_profile (basic_block bb, FILE * file, int indent, int flags)\n \t\t (flags & TDF_COMMENT) ? \";; \" : \"\", s_indent,\n \t\t (int) lsum, (int) bb->count);\n     }\n-  if (bb != ENTRY_BLOCK_PTR)\n+    if (bb != ENTRY_BLOCK_PTR_FOR_FUNCTION (fun))\n     {\n       sum = 0;\n       FOR_EACH_EDGE (e, ei, bb->preds)\n@@ -701,12 +703,13 @@ dump_bb_info (FILE *outf, basic_block bb, int indent, int flags,\n \t       s_indent, bb->index, bb_loop_depth (bb));\n       if (flags & TDF_DETAILS)\n \t{\n+\t  struct function *fun = DECL_STRUCT_FUNCTION (current_function_decl);\n \t  fprintf (outf, \", count \" HOST_WIDEST_INT_PRINT_DEC,\n \t\t   (HOST_WIDEST_INT) bb->count);\n \t  fprintf (outf, \", freq %i\", bb->frequency);\n-\t  if (maybe_hot_bb_p (bb))\n+\t  if (maybe_hot_bb_p (fun, bb))\n \t    fputs (\", maybe hot\", outf);\n-\t  if (probably_never_executed_bb_p (bb))\n+\t  if (probably_never_executed_bb_p (fun, bb))\n \t    fputs (\", probably never executed\", outf);\n \t}\n       fputc ('\\n', outf);"}, {"sha": "3d0156678260e740d1ba66b06efbee89c6626aa7", "filename": "gcc/gimple-iterator.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eb712b4020785ab8784e71edd29969e2d38d256/gcc%2Fgimple-iterator.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eb712b4020785ab8784e71edd29969e2d38d256/gcc%2Fgimple-iterator.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-iterator.c?ref=2eb712b4020785ab8784e71edd29969e2d38d256", "patch": "@@ -33,7 +33,7 @@ along with GCC; see the file COPYING3.  If not see\n static inline void\n update_modified_stmt (gimple stmt)\n {\n-  if (!ssa_operands_active ())\n+  if (!ssa_operands_active (cfun))\n     return;\n   update_stmt_if_modified (stmt);\n }\n@@ -46,7 +46,7 @@ update_modified_stmts (gimple_seq seq)\n {\n   gimple_stmt_iterator gsi;\n \n-  if (!ssa_operands_active ())\n+  if (!ssa_operands_active (cfun))\n     return;\n   for (gsi = gsi_start (seq); !gsi_end_p (gsi); gsi_next (&gsi))\n     update_stmt_if_modified (gsi_stmt (gsi));"}, {"sha": "658e0beea740d0650202c144a09cd097352e7eb4", "filename": "gcc/gimple-pretty-print.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eb712b4020785ab8784e71edd29969e2d38d256/gcc%2Fgimple-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eb712b4020785ab8784e71edd29969e2d38d256/gcc%2Fgimple-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.c?ref=2eb712b4020785ab8784e71edd29969e2d38d256", "patch": "@@ -1817,7 +1817,8 @@ dump_gimple_mem_ops (pretty_printer *buffer, gimple gs, int spc, int flags)\n   tree vdef = gimple_vdef (gs);\n   tree vuse = gimple_vuse (gs);\n \n-  if (!ssa_operands_active () || !gimple_references_memory_p (gs))\n+  if (!ssa_operands_active (DECL_STRUCT_FUNCTION (current_function_decl))\n+      || !gimple_references_memory_p (gs))\n     return;\n \n   if (vdef != NULL_TREE)\n@@ -2256,7 +2257,9 @@ gimple_dump_bb_buff (pretty_printer *buffer, basic_block bb, int indent,\n       INDENT (curr_indent);\n       dump_gimple_stmt (buffer, stmt, curr_indent, flags);\n       pp_newline_and_flush (buffer);\n-      dump_histograms_for_stmt (cfun, buffer->buffer->stream, stmt);\n+      gcc_checking_assert (DECL_STRUCT_FUNCTION (current_function_decl));\n+      dump_histograms_for_stmt (DECL_STRUCT_FUNCTION (current_function_decl),\n+\t\t\t\tbuffer->buffer->stream, stmt);\n     }\n \n   dump_implicit_edges (buffer, bb, indent, flags);"}, {"sha": "f0db9f40330c46e7251c8138c89410f472e252f5", "filename": "gcc/predict.c", "status": "modified", "additions": 22, "deletions": 23, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eb712b4020785ab8784e71edd29969e2d38d256/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eb712b4020785ab8784e71edd29969e2d38d256/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=2eb712b4020785ab8784e71edd29969e2d38d256", "patch": "@@ -108,32 +108,33 @@ static const struct predictor_info predictor_info[]= {\n /* Return TRUE if frequency FREQ is considered to be hot.  */\n \n static inline bool\n-maybe_hot_frequency_p (int freq)\n+maybe_hot_frequency_p (struct function *fun, int freq)\n {\n-  struct cgraph_node *node = cgraph_get_node (current_function_decl);\n+  struct cgraph_node *node = cgraph_get_node (fun->decl);\n   if (!profile_info || !flag_branch_probabilities)\n     {\n       if (node->frequency == NODE_FREQUENCY_UNLIKELY_EXECUTED)\n         return false;\n       if (node->frequency == NODE_FREQUENCY_HOT)\n         return true;\n     }\n-  if (profile_status == PROFILE_ABSENT)\n+  if (profile_status_for_function (fun) == PROFILE_ABSENT)\n     return true;\n   if (node->frequency == NODE_FREQUENCY_EXECUTED_ONCE\n-      && freq < (ENTRY_BLOCK_PTR->frequency * 2 / 3))\n+      && freq < (ENTRY_BLOCK_PTR_FOR_FUNCTION (fun)->frequency * 2 / 3))\n     return false;\n-  if (freq < ENTRY_BLOCK_PTR->frequency / PARAM_VALUE (HOT_BB_FREQUENCY_FRACTION))\n+  if (freq < (ENTRY_BLOCK_PTR_FOR_FUNCTION (fun)->frequency\n+\t      / PARAM_VALUE (HOT_BB_FREQUENCY_FRACTION)))\n     return false;\n   return true;\n }\n \n /* Return TRUE if frequency FREQ is considered to be hot.  */\n \n static inline bool\n-maybe_hot_count_p (gcov_type count)\n+maybe_hot_count_p (struct function *fun, gcov_type count)\n {\n-  if (profile_status != PROFILE_READ)\n+  if (profile_status_for_function (fun) != PROFILE_READ)\n     return true;\n   /* Code executed at most once is not hot.  */\n   if (profile_info->runs >= count)\n@@ -146,13 +147,12 @@ maybe_hot_count_p (gcov_type count)\n    for maximal performance.  */\n \n bool\n-maybe_hot_bb_p (const_basic_block bb)\n+maybe_hot_bb_p (struct function *fun, const_basic_block bb)\n {\n-  /* Make sure CFUN exists, for dump_bb_info.  */\n-  gcc_assert (cfun);\n-  if (profile_status == PROFILE_READ)\n-    return maybe_hot_count_p (bb->count);\n-  return maybe_hot_frequency_p (bb->frequency);\n+  gcc_checking_assert (fun);\n+  if (profile_status_for_function (fun) == PROFILE_READ)\n+    return maybe_hot_count_p (fun, bb->count);\n+  return maybe_hot_frequency_p (fun, bb->frequency);\n }\n \n /* Return true if the call can be hot.  */\n@@ -193,22 +193,21 @@ bool\n maybe_hot_edge_p (edge e)\n {\n   if (profile_status == PROFILE_READ)\n-    return maybe_hot_count_p (e->count);\n-  return maybe_hot_frequency_p (EDGE_FREQUENCY (e));\n+    return maybe_hot_count_p (cfun, e->count);\n+  return maybe_hot_frequency_p (cfun, EDGE_FREQUENCY (e));\n }\n \n \n /* Return true in case BB is probably never executed.  */\n \n bool\n-probably_never_executed_bb_p (const_basic_block bb)\n+probably_never_executed_bb_p (struct function *fun, const_basic_block bb)\n {\n-  /* Make sure CFUN exists, for dump_bb_info.  */\n-  gcc_assert (cfun);\n+  gcc_checking_assert (fun);\n   if (profile_info && flag_branch_probabilities)\n     return ((bb->count + profile_info->runs / 2) / profile_info->runs) == 0;\n   if ((!profile_info || !flag_branch_probabilities)\n-      && (cgraph_get_node (current_function_decl)->frequency\n+      && (cgraph_get_node (fun->decl)->frequency\n \t  == NODE_FREQUENCY_UNLIKELY_EXECUTED))\n     return true;\n   return false;\n@@ -252,7 +251,7 @@ optimize_function_for_speed_p (struct function *fun)\n bool\n optimize_bb_for_size_p (const_basic_block bb)\n {\n-  return optimize_function_for_size_p (cfun) || !maybe_hot_bb_p (bb);\n+  return optimize_function_for_size_p (cfun) || !maybe_hot_bb_p (cfun, bb);\n }\n \n /* Return TRUE when BB should be optimized for speed.  */\n@@ -369,7 +368,7 @@ predictable_edge_p (edge e)\n void\n rtl_profile_for_bb (basic_block bb)\n {\n-  crtl->maybe_hot_insn_p = maybe_hot_bb_p (bb);\n+  crtl->maybe_hot_insn_p = maybe_hot_bb_p (cfun, bb);\n }\n \n /* Set RTL expansion for edge profile.  */\n@@ -2705,12 +2704,12 @@ compute_function_frequency (void)\n   node->frequency = NODE_FREQUENCY_UNLIKELY_EXECUTED;\n   FOR_EACH_BB (bb)\n     {\n-      if (maybe_hot_bb_p (bb))\n+      if (maybe_hot_bb_p (cfun, bb))\n \t{\n \t  node->frequency = NODE_FREQUENCY_HOT;\n \t  return;\n \t}\n-      if (!probably_never_executed_bb_p (bb))\n+      if (!probably_never_executed_bb_p (cfun, bb))\n \tnode->frequency = NODE_FREQUENCY_NORMAL;\n     }\n }"}, {"sha": "247f6166a9deb6ceb3c94a7cf38f496829ab2f54", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 24, "deletions": 26, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eb712b4020785ab8784e71edd29969e2d38d256/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eb712b4020785ab8784e71edd29969e2d38d256/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=2eb712b4020785ab8784e71edd29969e2d38d256", "patch": "@@ -6632,19 +6632,21 @@ move_sese_region_to_fn (struct function *dest_cfun, basic_block entry_bb,\n    */\n \n void\n-dump_function_to_file (tree fn, FILE *file, int flags)\n+dump_function_to_file (tree fndecl, FILE *file, int flags)\n {\n-  tree arg, var;\n+  tree arg, var, old_current_fndecl = current_function_decl;\n   struct function *dsf;\n   bool ignore_topmost_bind = false, any_var = false;\n   basic_block bb;\n   tree chain;\n-  bool tmclone = TREE_CODE (fn) == FUNCTION_DECL && decl_is_tm_clone (fn);\n+  bool tmclone = (TREE_CODE (fndecl) == FUNCTION_DECL\n+\t\t  && decl_is_tm_clone (fndecl));\n+  struct function *fun = DECL_STRUCT_FUNCTION (fndecl);\n \n-  fprintf (file, \"%s %s(\", current_function_name (),\n-\t   tmclone ? \"[tm-clone] \" : \"\");\n+  current_function_decl = fndecl;\n+  fprintf (file, \"%s %s(\", function_name (fun), tmclone ? \"[tm-clone] \" : \"\");\n \n-  arg = DECL_ARGUMENTS (fn);\n+  arg = DECL_ARGUMENTS (fndecl);\n   while (arg)\n     {\n       print_generic_expr (file, TREE_TYPE (arg), dump_flags);\n@@ -6659,31 +6661,29 @@ dump_function_to_file (tree fn, FILE *file, int flags)\n   fprintf (file, \")\\n\");\n \n   if (flags & TDF_VERBOSE)\n-    print_node (file, \"\", fn, 2);\n+    print_node (file, \"\", fndecl, 2);\n \n-  dsf = DECL_STRUCT_FUNCTION (fn);\n+  dsf = DECL_STRUCT_FUNCTION (fndecl);\n   if (dsf && (flags & TDF_EH))\n     dump_eh_tree (file, dsf);\n \n-  if (flags & TDF_RAW && !gimple_has_body_p (fn))\n+  if (flags & TDF_RAW && !gimple_has_body_p (fndecl))\n     {\n-      dump_node (fn, TDF_SLIM | flags, file);\n+      dump_node (fndecl, TDF_SLIM | flags, file);\n+      current_function_decl = old_current_fndecl;\n       return;\n     }\n \n-  /* Switch CFUN to point to FN.  */\n-  push_cfun (DECL_STRUCT_FUNCTION (fn));\n-\n   /* When GIMPLE is lowered, the variables are no longer available in\n      BIND_EXPRs, so display them separately.  */\n-  if (cfun && cfun->decl == fn && (cfun->curr_properties & PROP_gimple_lcf))\n+  if (fun && fun->decl == fndecl && (fun->curr_properties & PROP_gimple_lcf))\n     {\n       unsigned ix;\n       ignore_topmost_bind = true;\n \n       fprintf (file, \"{\\n\");\n-      if (!VEC_empty (tree, cfun->local_decls))\n-\tFOR_EACH_LOCAL_DECL (cfun, ix, var)\n+      if (!VEC_empty (tree, fun->local_decls))\n+\tFOR_EACH_LOCAL_DECL (fun, ix, var)\n \t  {\n \t    print_generic_decl (file, var, flags);\n \t    if (flags & TDF_VERBOSE)\n@@ -6709,26 +6709,27 @@ dump_function_to_file (tree fn, FILE *file, int flags)\n \t  }\n     }\n \n-  if (cfun && cfun->decl == fn && cfun->cfg && basic_block_info)\n+  if (fun && fun->decl == fndecl && fun->cfg\n+      && basic_block_info_for_function (fun))\n     {\n       /* If the CFG has been built, emit a CFG-based dump.  */\n       if (!ignore_topmost_bind)\n \tfprintf (file, \"{\\n\");\n \n-      if (any_var && n_basic_blocks)\n+      if (any_var && n_basic_blocks_for_function (fun))\n \tfprintf (file, \"\\n\");\n \n-      FOR_EACH_BB (bb)\n+      FOR_EACH_BB_FN (bb, fun)\n \tdump_bb (file, bb, 2, flags | TDF_COMMENT);\n \n       fprintf (file, \"}\\n\");\n     }\n-  else if (DECL_SAVED_TREE (fn) == NULL)\n+  else if (DECL_SAVED_TREE (fndecl) == NULL)\n     {\n       /* The function is now in GIMPLE form but the CFG has not been\n \t built yet.  Emit the single sequence of GIMPLE statements\n \t that make up its body.  */\n-      gimple_seq body = gimple_body (fn);\n+      gimple_seq body = gimple_body (fndecl);\n \n       if (gimple_seq_first_stmt (body)\n \t  && gimple_seq_first_stmt (body) == gimple_seq_last_stmt (body)\n@@ -6751,8 +6752,7 @@ dump_function_to_file (tree fn, FILE *file, int flags)\n       int indent;\n \n       /* Make a tree based dump.  */\n-      chain = DECL_SAVED_TREE (fn);\n-\n+      chain = DECL_SAVED_TREE (fndecl);\n       if (chain && TREE_CODE (chain) == BIND_EXPR)\n \t{\n \t  if (ignore_topmost_bind)\n@@ -6782,11 +6782,9 @@ dump_function_to_file (tree fn, FILE *file, int flags)\n     dump_enumerated_decls (file, flags);\n   fprintf (file, \"\\n\\n\");\n \n-  /* Restore CFUN.  */\n-  pop_cfun ();\n+  current_function_decl = old_current_fndecl;\n }\n \n-\n /* Dump FUNCTION_DECL FN to stderr using FLAGS (see TDF_* in tree.h)  */\n \n DEBUG_FUNCTION void"}, {"sha": "acb2cc40dcbe79c371b4deae5d560f9af52aa6dc", "filename": "gcc/tree-flow-inline.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eb712b4020785ab8784e71edd29969e2d38d256/gcc%2Ftree-flow-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eb712b4020785ab8784e71edd29969e2d38d256/gcc%2Ftree-flow-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow-inline.h?ref=2eb712b4020785ab8784e71edd29969e2d38d256", "patch": "@@ -798,7 +798,7 @@ delink_stmt_imm_use (gimple stmt)\n    ssa_op_iter iter;\n    use_operand_p use_p;\n \n-   if (ssa_operands_active ())\n+   if (ssa_operands_active (cfun))\n      FOR_EACH_PHI_OR_STMT_USE (use_p, stmt, iter, SSA_OP_ALL_USES)\n        delink_imm_use (use_p);\n }"}, {"sha": "d9b3146cf4f0d0717e644dc9708c9e91d0c3a68a", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eb712b4020785ab8784e71edd29969e2d38d256/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eb712b4020785ab8784e71edd29969e2d38d256/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=2eb712b4020785ab8784e71edd29969e2d38d256", "patch": "@@ -130,16 +130,12 @@ static int n_initialized = 0;\n /*  Return true if the SSA operands cache is active.  */\n \n bool\n-ssa_operands_active (void)\n+ssa_operands_active (struct function *fun)\n {\n-  /* This function may be invoked from contexts where CFUN is NULL\n-     (IPA passes), return false for now.  FIXME: operands may be\n-     active in each individual function, maybe this function should\n-     take CFUN as a parameter.  */\n-  if (cfun == NULL)\n+  if (fun == NULL)\n     return false;\n \n-  return cfun->gimple_df && gimple_ssa_operands (cfun)->ops_active;\n+  return fun->gimple_df && gimple_ssa_operands (fun)->ops_active;\n }\n \n \n@@ -1211,7 +1207,7 @@ update_stmt_operands (gimple stmt)\n {\n   /* If update_stmt_operands is called before SSA is initialized, do\n      nothing.  */\n-  if (!ssa_operands_active ())\n+  if (!ssa_operands_active (cfun))\n     return;\n \n   timevar_push (TV_TREE_OPS);\n@@ -1244,7 +1240,7 @@ swap_tree_operands (gimple stmt, tree *exp0, tree *exp1)\n      positions of these two operands in their respective immediate use\n      lists by adjusting their use pointer to point to the new\n      operand position.  */\n-  if (ssa_operands_active () && op0 != op1)\n+  if (ssa_operands_active (cfun) && op0 != op1)\n     {\n       use_optype_p use0, use1, ptr;\n       use0 = use1 = NULL;"}, {"sha": "76a8bd82c111bd689936cf52895f65f59bb26332", "filename": "gcc/tree-ssa-operands.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eb712b4020785ab8784e71edd29969e2d38d256/gcc%2Ftree-ssa-operands.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eb712b4020785ab8784e71edd29969e2d38d256/gcc%2Ftree-ssa-operands.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.h?ref=2eb712b4020785ab8784e71edd29969e2d38d256", "patch": "@@ -114,7 +114,7 @@ extern void debug_immediate_uses_for (tree var);\n extern void dump_decl_set (FILE *, bitmap);\n extern void debug_decl_set (bitmap);\n \n-extern bool ssa_operands_active (void);\n+extern bool ssa_operands_active (struct function *);\n \n extern bool virtual_operand_p (tree);\n extern void unlink_stmt_vdef (gimple);"}, {"sha": "1746c8f7c91c4d109b4a74ad82e70421f9de7023", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eb712b4020785ab8784e71edd29969e2d38d256/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eb712b4020785ab8784e71edd29969e2d38d256/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=2eb712b4020785ab8784e71edd29969e2d38d256", "patch": "@@ -1157,7 +1157,7 @@ delete_tree_ssa (void)\n   fini_ssanames ();\n \n   /* We no longer maintain the SSA operand cache at this point.  */\n-  if (ssa_operands_active ())\n+  if (ssa_operands_active (cfun))\n     fini_ssa_operands ();\n \n   htab_delete (cfun->gimple_df->default_defs);"}]}