{"sha": "a12c16de529755cdf4dbc594dd48742107ad349e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTEyYzE2ZGU1Mjk3NTVjZGY0ZGJjNTk0ZGQ0ODc0MjEwN2FkMzQ5ZQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-09-18T16:05:36Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-09-18T16:05:36Z"}, "message": "Fix location of invocable check for unique_ptr deleter\n\nThe deleter only needs to be invocable when the unique_ptr destructor\nand reset member function are instantiated. In other contexts it might\nnot be possible to pass unique_ptr<T, D>::pointer to the deleter, if\nthat requires a derived-to-base conversion from T* and T is incomplete.\n\n\t* include/bits/unique_ptr.h (__uniq_ptr_impl): Remove static assertion\n\tchecking invocable condition.\n\t(unique_ptr::~unique_ptr, unique_ptr::reset): Restore static assertion\n\there, where types must be complete. Pass pointer to deleter as an\n\trvalue.\n\t* testsuite/20_util/unique_ptr/requirements/incomplete.cc: New test.\n\nFrom-SVN: r264399", "tree": {"sha": "972c09ab072dd40014d9173255ca43195237a020", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/972c09ab072dd40014d9173255ca43195237a020"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a12c16de529755cdf4dbc594dd48742107ad349e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a12c16de529755cdf4dbc594dd48742107ad349e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a12c16de529755cdf4dbc594dd48742107ad349e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a12c16de529755cdf4dbc594dd48742107ad349e/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f96c8666f57e89182c3b0661f2e5e19f8b70aa8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f96c8666f57e89182c3b0661f2e5e19f8b70aa8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f96c8666f57e89182c3b0661f2e5e19f8b70aa8a"}], "stats": {"total": 52, "additions": 48, "deletions": 4}, "files": [{"sha": "0ed4bafbb77784830c35b0a9e23011b198103f8b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a12c16de529755cdf4dbc594dd48742107ad349e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a12c16de529755cdf4dbc594dd48742107ad349e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a12c16de529755cdf4dbc594dd48742107ad349e", "patch": "@@ -1,3 +1,12 @@\n+2018-09-18  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/unique_ptr.h (__uniq_ptr_impl): Remove static assertion\n+\tchecking invocable condition.\n+\t(unique_ptr::~unique_ptr, unique_ptr::reset): Restore static assertion\n+\there, where types must be complete. Pass pointer to deleter as an\n+\trvalue.\n+\t* testsuite/20_util/unique_ptr/requirements/incomplete.cc: New test.\n+\n 2018-09-13  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/std/variant (variant) [__clang__]: Limit workaround to"}, {"sha": "0717c1e27288b8c50c62c4b585eb48de112f7a39", "filename": "libstdc++-v3/include/bits/unique_ptr.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a12c16de529755cdf4dbc594dd48742107ad349e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a12c16de529755cdf4dbc594dd48742107ad349e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h?ref=a12c16de529755cdf4dbc594dd48742107ad349e", "patch": "@@ -142,8 +142,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static_assert( !is_rvalue_reference<_Dp>::value,\n \t\t     \"unique_ptr's deleter type must be a function object type\"\n \t\t     \" or an lvalue reference type\" );\n-      static_assert( __is_invocable<_Dp&, pointer&>::value,\n-\t             \"unique_ptr's deleter must be invocable with a pointer\" );\n \n       __uniq_ptr_impl() = default;\n       __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }\n@@ -282,9 +280,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       /// Destructor, invokes the deleter if the stored pointer is not null.\n       ~unique_ptr() noexcept\n       {\n+\tstatic_assert(__is_invocable<deleter_type&, pointer>::value,\n+\t\t      \"unique_ptr's deleter must be invocable with a pointer\");\n \tauto& __ptr = _M_t._M_ptr();\n \tif (__ptr != nullptr)\n-\t  get_deleter()(__ptr);\n+\t  get_deleter()(std::move(__ptr));\n \t__ptr = pointer();\n       }\n \n@@ -389,10 +389,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       void\n       reset(pointer __p = pointer()) noexcept\n       {\n+\tstatic_assert(__is_invocable<deleter_type&, pointer>::value,\n+\t\t      \"unique_ptr's deleter must be invocable with a pointer\");\n \tusing std::swap;\n \tswap(_M_t._M_ptr(), __p);\n \tif (__p != pointer())\n-\t  get_deleter()(__p);\n+\t  get_deleter()(std::move(__p));\n       }\n \n       /// Exchange the pointer and deleter with another object."}, {"sha": "96e02e4c9038ab01d79bcf8d7ee86a12a64f737e", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/requirements/incomplete.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a12c16de529755cdf4dbc594dd48742107ad349e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Frequirements%2Fincomplete.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a12c16de529755cdf4dbc594dd48742107ad349e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Frequirements%2Fincomplete.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Frequirements%2Fincomplete.cc?ref=a12c16de529755cdf4dbc594dd48742107ad349e", "patch": "@@ -0,0 +1,33 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <memory>\n+\n+struct Base; // incomplete\n+\n+struct BaseDeleter {\n+  void operator()(Base*) const;\n+};\n+\n+struct Derived; // incomplete\n+\n+struct X {\n+  std::unique_ptr<Derived, BaseDeleter> p;\n+  ~X(); // defined elsewhere, where Derived is complete\n+};"}]}