{"sha": "973ff4c052b6feae740fbd3c5adcdaf1cf06ec47", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTczZmY0YzA1MmI2ZmVhZTc0MGZiZDNjNWFkY2RhZjFjZjA2ZWM0Nw==", "commit": {"author": {"name": "Tobias Schl\u00fcter", "email": "tobias.schlueter@physik.uni-muenchen.de", "date": "2005-05-10T22:06:55Z"}, "committer": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2005-05-10T22:06:55Z"}, "message": "re PR fortran/20178 (COMPLEX function returns incompatible with g77)\n\ngcc/fortran/\n\tPR fortran/20178\n\t* gfortran.h (gfc_option): Add flag_f2c.\n\t* invoke.texi: Document '-ff2c' command line option.  Adapt\n\tdocumentation for '-fno-second-underscore' and '-fno-underscoring'.\n\t* lang.opt (ff2c): New entry.\n\t* options.c (gfc-init_options): Set default calling convention\n\tto -fno-f2c.  Mark -fsecond-underscore unset.\n\t(gfc_post_options): Set -fsecond-underscore if not explicitly set\n\tby user.\n\t(handle_options): Set gfc_option.flag_f2c according to requested\n\tcalling\tconvention.\n\t* trans-decl.c (gfc_get_extern_function_decl): Use special f2c\n\tintrinsics where necessary.\n\t(gfc_trans_deferred_vars): Change todo error to\tassertion.\n\t* trans-expr.c (gfc_conv_variable): Dereference access\n\tto hidden result argument.\n\t(gfc_conv_function_call): Add hidden result argument to argument\n\tlist if f2c calling conventions requested.  Slightly restructure\n\ttests.  Convert result of default REAL function to requested type\n\tif f2c calling conventions are used.  Dereference COMPLEX result\n\tif f2c cc are used.\n\t* trans-types.c (gfc_sym_type):  Return double for default REAL\n\tfunction if f2c cc are used.\n\t(gfc_return_by_reference): Slightly restructure logic.  Return\n\tCOMPLEX by reference depending on calling conventions.\n\t(gfc_get_function_type): Correctly make hidden result argument a\n\tpass-by-reference argument for COMPLEX.  Remove old code which does\n\tthis for derived types.\nlibgfortran/\n\tPR fortran/20178\n\t* Makefile.am (gfor_specific_src): Add 'intrinsics/f2c_intrinsics.F90'\n\tto dependencies.\n\t* Makefile.in: Regenerate.\n\t* intrinsics/f2c_specific.F90: New file.\ngcc/testsuite/\n\tPR fortran/20178\n\t* gfortran.dg/f2c_1.f90, gfortran.dg/f2c_2.f90,\n\tgfortran.dg/f2c_3.f90: New tests.\n\nFrom-SVN: r99544", "tree": {"sha": "6cff06cdd4e25eaf7ccb4278260ebfd2d406f4f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6cff06cdd4e25eaf7ccb4278260ebfd2d406f4f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/973ff4c052b6feae740fbd3c5adcdaf1cf06ec47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/973ff4c052b6feae740fbd3c5adcdaf1cf06ec47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/973ff4c052b6feae740fbd3c5adcdaf1cf06ec47", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/973ff4c052b6feae740fbd3c5adcdaf1cf06ec47/comments", "author": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d096725d2690b6885df1e958778905fb9ac05720", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d096725d2690b6885df1e958778905fb9ac05720", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d096725d2690b6885df1e958778905fb9ac05720"}], "stats": {"total": 558, "additions": 514, "deletions": 44}, "files": [{"sha": "ee08d1fffb515b841fd4f0ba9fe6d31a12dac4e9", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/973ff4c052b6feae740fbd3c5adcdaf1cf06ec47/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/973ff4c052b6feae740fbd3c5adcdaf1cf06ec47/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=973ff4c052b6feae740fbd3c5adcdaf1cf06ec47", "patch": "@@ -1,3 +1,34 @@\n+2005-05-10  Tobias Schl\"uter  <tobias.schlueter@physik.uni-muenchen.de>\n+\n+\tPR fortran/20178\n+\t* gfortran.h (gfc_option): Add flag_f2c.\n+\t* invoke.texi: Document '-ff2c' command line option.  Adapt\n+\tdocumentation for '-fno-second-underscore' and '-fno-underscoring'.\n+\t* lang.opt (ff2c): New entry.\n+\t* options.c (gfc-init_options): Set default calling convention\n+\tto -fno-f2c.  Mark -fsecond-underscore unset.\n+\t(gfc_post_options): Set -fsecond-underscore if not explicitly set\n+\tby user.\t\n+\t(handle_options): Set gfc_option.flag_f2c according to requested\n+\tcalling\tconvention.\n+\t* trans-decl.c (gfc_get_extern_function_decl): Use special f2c\n+\tintrinsics where necessary.\n+\t(gfc_trans_deferred_vars): Change todo error to\tassertion.\n+\t* trans-expr.c (gfc_conv_variable): Dereference access\n+\tto hidden result argument.\n+\t(gfc_conv_function_call): Add hidden result argument to argument\n+\tlist if f2c calling conventions requested.  Slightly restructure\n+\ttests.  Convert result of default REAL function to requested type\n+\tif f2c calling conventions are used.  Dereference COMPLEX result\n+\tif f2c cc are used.\n+\t* trans-types.c (gfc_sym_type):  Return double for default REAL\n+\tfunction if f2c cc are used.\n+\t(gfc_return_by_reference): Slightly restructure logic.  Return\n+\tCOMPLEX by reference depending on calling conventions.\n+\t(gfc_get_function_type): Correctly make hidden result argument a\n+\tpass-by-reference argument for COMPLEX.  Remove old code which does\n+\tthis for derived types.\n+\n 2005-05-09  Tobias Schl\"uter  <tobias.schlueter@physik.uni-muenchen.de>\n \n \t* match.c (gfc_match_return): Only require space after keyword when"}, {"sha": "d17f388212c79cff18f566f72f4d5c97d5973d0c", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/973ff4c052b6feae740fbd3c5adcdaf1cf06ec47/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/973ff4c052b6feae740fbd3c5adcdaf1cf06ec47/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=973ff4c052b6feae740fbd3c5adcdaf1cf06ec47", "patch": "@@ -1419,6 +1419,7 @@ typedef struct\n   int flag_no_backend;\n   int flag_pack_derived;\n   int flag_repack_arrays;\n+  int flag_f2c;\n \n   int q_kind;\n "}, {"sha": "5385bbae876e35c1571e5c8c37840e5e6632bf7a", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 63, "deletions": 18, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/973ff4c052b6feae740fbd3c5adcdaf1cf06ec47/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/973ff4c052b6feae740fbd3c5adcdaf1cf06ec47/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=973ff4c052b6feae740fbd3c5adcdaf1cf06ec47", "patch": "@@ -143,7 +143,7 @@ by type.  Explanations are in the following sections.\n @item Code Generation Options\n @xref{Code Gen Options,,Options for Code Generation Conventions}.\n @gccoptlist{\n--fno-underscoring  -fno-second-underscore @gol\n+-ff2c -fno-underscoring  -fsecond-underscore @gol\n -fbounds-check  -fmax-stack-var-size=@var{n} @gol\n -fpackderived  -frepack-arrays}\n @end table\n@@ -518,8 +518,43 @@ it.\n \n \n @table @gcctabopt\n-@cindex -fno-underscoring option\n-@cindex options, -fno-underscoring\n+@cindex @option{-ff2c} option\n+@cindex options, @option{-ff2c}\n+@item -ff2c\n+@cindex calling convention\n+@cindex @command{f2c} calling convention\n+@cindex @command{g77} calling convention\n+@cindex libf2c calling convention\n+Generate code designed to be compatible with code generated\n+by @command{g77} and @command{f2c}.\n+\n+The calling conventions used by @command{g77} (originally implemented\n+in @command{f2c}) require functions that return type\n+default @code{REAL} to actually return the C type @code{double}, and\n+functions that return type @code{COMPLEX} to return the values via an\n+extra argument in the calling sequence that points to where to\n+store the return value.  Under the default GNU calling conventions, such\n+functions simply return their results as they would in GNU\n+C -- default @code{REAL} functions return the C type @code{float}, and\n+@code{COMPLEX} functions return the GNU C type @code{complex}.\n+Additionally, this option implies the @options{-fsecond-underscore}\n+option, unless @options{-fno-second-underscore} is explicitly requested.\n+\n+This does not affect the generation of code that interfaces with\n+the @command{libgfortran} library.\n+\n+@emph{Caution:} It is not a good idea to mix Fortran code compiled\n+with @code{-ff2c} with code compiled with the default @code{-fno-f2c}\n+calling conventions as, calling @code{COMPLEX} or default @code{REAL}\n+functions between program parts which were compiled with different\n+calling conventions will break at execution time.\n+\n+@emph{Caution:} This will break code which passes intrinsic functions\n+of type default @code{REAL} or @code{COMPLEX} as actual arguments, as\n+the library implementations use the @command{-fno-f2c} calling conventions.\n+\n+@cindex @option{-fno-underscoring option}\n+@cindex options, @option{-fno-underscoring}\n @item -fno-underscoring\n @cindex underscore\n @cindex symbol names, underscores\n@@ -528,16 +563,17 @@ it.\n Do not transform names of entities specified in the Fortran\n source file by appending underscores to them.\n \n-With @option{-funderscoring} in effect, @command{gfortran} appends two\n-underscores to names with underscores and one underscore to external names\n-with no underscores.  (@command{gfortran} also appends two underscores to\n-internal names with underscores to avoid naming collisions with external\n-names.  The @option{-fno-second-underscore} option disables appending of the\n-second underscore in all cases.)\n+With @option{-funderscoring} in effect, @command{gfortran} appends one\n+underscore to external names with no underscores.\n \n This is done to ensure compatibility with code produced by many\n-UNIX Fortran compilers, including @command{f2c} which perform the\n-same transformations.\n+UNIX Fortran compilers.\n+\n+@emph{Caution}: The default behavior of @command{gfortran} is\n+incompatible with @command{f2c} and @command{g77}, please use the\n+@option{-ff2c} and @option{-fsecond-underscore} options if you want\n+object files compiled with @option{gfortran} to be compatible with\n+object code created with these tools.\n \n Use of @option{-fno-underscoring} is not recommended unless you are\n experimenting with issues such as integration of (GNU) Fortran into\n@@ -593,22 +629,31 @@ in the source, even if the names as seen by the linker are mangled to\n prevent accidental linking between procedures with incompatible\n interfaces.\n \n-@cindex -fno-second-underscore option\n-@cindex options, -fno-second-underscore\n-@item -fno-second-underscore\n+@cindex @option{-fsecond-underscore option}\n+@cindex options, @option{-fsecond-underscore}\n+@item -fsecond-underscore\n @cindex underscore\n @cindex symbol names, underscores\n @cindex transforming symbol names\n @cindex symbol names, transforming\n-Do not append a second underscore to names of entities specified\n-in the Fortran source file.\n+@cindex @command{f2c} calling convention\n+@cindex @command{g77} calling convention\n+@cindex libf2c calling convention\n+By default, @command{gfortran} appends an underscore to external\n+names.  If this option is used @command{gfortran} appends two\n+underscores to names with underscores and one underscore to external names\n+with no underscores.  (@command{gfortran} also appends two underscores to\n+internal names with underscores to avoid naming collisions with external\n+names.\n \n This option has no effect if @option{-fno-underscoring} is\n-in effect.\n+in effect.  It is implied by the @option{-ff2c} option.\n \n Otherwise, with this option, an external name such as @samp{MAX_COUNT}\n is implemented as a reference to the link-time external symbol\n-@samp{max_count_}, instead of @samp{max_count__}.\n+@samp{max_count__}, instead of @samp{max_count_}.  This is required\n+for compatibility with @command{g77} and @command{f2c}, and is implied\n+by use of the @option{-ff2c} option.\n \n \n @cindex -fbounds-check option"}, {"sha": "d1ca5f02ebd78970e6ba63c4c7c8f7cee6e09750", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/973ff4c052b6feae740fbd3c5adcdaf1cf06ec47/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/973ff4c052b6feae740fbd3c5adcdaf1cf06ec47/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=973ff4c052b6feae740fbd3c5adcdaf1cf06ec47", "patch": "@@ -89,6 +89,10 @@ fdump-parse-tree\n F95\n Display the code tree after parsing.\n \n+ff2c\n+F95\n+Use f2c calling convention.\n+\n ffixed-form\n F95\n Assume that the source file is fixed form"}, {"sha": "2603caa67a8c35a83b6dfc228e55eb3d1c6e9431", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/973ff4c052b6feae740fbd3c5adcdaf1cf06ec47/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/973ff4c052b6feae740fbd3c5adcdaf1cf06ec47/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=973ff4c052b6feae740fbd3c5adcdaf1cf06ec47", "patch": "@@ -62,7 +62,8 @@ gfc_init_options (unsigned int argc ATTRIBUTE_UNUSED,\n   gfc_option.flag_default_real = 0;\n   gfc_option.flag_dollar_ok = 0;\n   gfc_option.flag_underscoring = 1;\n-  gfc_option.flag_second_underscore = 1;\n+  gfc_option.flag_f2c = 0;\n+  gfc_option.flag_second_underscore = -1;\n   gfc_option.flag_implicit_none = 0;\n   gfc_option.flag_max_stack_var_size = 32768;\n   gfc_option.flag_module_access_private = 0;\n@@ -113,6 +114,12 @@ gfc_post_options (const char **pfilename)\n   if (pedantic && (gfc_option.allow_std & GFC_STD_GNU) != 0)\n     gfc_option.warn_std |= GFC_STD_GNU;\n \n+  /* If the user didn't explicitly specify -f(no)-second-underscore we\n+     use it if we're trying to be compatible with f2c, and not\n+     otherwise.  */\n+  if (gfc_option.flag_second_underscore == -1)\n+    gfc_option.flag_second_underscore = gfc_option.flag_f2c;\n+\n   return false;\n }\n \n@@ -214,6 +221,10 @@ gfc_handle_option (size_t scode, const char *arg, int value)\n       gfc_option.warn_unused_labels = value;\n       break;\n \n+    case OPT_ff2c:\n+      gfc_option.flag_f2c = value;\n+      break;\n+\n     case OPT_fdollar_ok:\n       gfc_option.flag_dollar_ok = value;\n       break;"}, {"sha": "3d89effb7c2af438bb2706de1a4116f6f50ccd4a", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/973ff4c052b6feae740fbd3c5adcdaf1cf06ec47/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/973ff4c052b6feae740fbd3c5adcdaf1cf06ec47/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=973ff4c052b6feae740fbd3c5adcdaf1cf06ec47", "patch": "@@ -901,7 +901,7 @@ gfc_get_extern_function_decl (gfc_symbol * sym)\n   gfc_expr e;\n   gfc_intrinsic_sym *isym;\n   gfc_expr argexpr;\n-  char s[GFC_MAX_SYMBOL_LEN];\n+  char s[GFC_MAX_SYMBOL_LEN + 13]; /* \"f2c_specific\" and '\\0'.  */\n   tree name;\n   tree mangled_name;\n \n@@ -937,7 +937,18 @@ gfc_get_extern_function_decl (gfc_symbol * sym)\n \t  gcc_assert (isym->formal->next->next == NULL);\n \t  isym->resolve.f2 (&e, &argexpr, NULL);\n \t}\n-      sprintf (s, \"specific%s\", e.value.function.name);\n+\n+      if (gfc_option.flag_f2c\n+\t  && ((e.ts.type == BT_REAL && e.ts.kind == gfc_default_real_kind)\n+\t      || e.ts.type == BT_COMPLEX))\n+\t{\n+\t  /* Specific which needs a different implementation if f2c\n+\t     calling conventions are used.  */\n+\t  sprintf (s, \"f2c_specific%s\", e.value.function.name);\n+\t}\n+      else\n+\tsprintf (s, \"specific%s\", e.value.function.name);\n+\n       name = get_identifier (s);\n       mangled_name = name;\n     }\n@@ -2030,7 +2041,8 @@ gfc_trans_deferred_vars (gfc_symbol * proc_sym, tree fnbody)\n \t    fnbody = gfc_trans_dummy_character (proc_sym->ts.cl, fnbody);\n \t}\n       else\n-\tgfc_todo_error (\"Deferred non-array return by reference\");\n+\tgcc_assert (gfc_option.flag_f2c\n+\t\t    && proc_sym->ts.type == BT_COMPLEX);\n     }\n \n   for (sym = proc_sym->tlink; sym != proc_sym; sym = sym->tlink)"}, {"sha": "35c3f12883df70e4fe1936f3f7c3a82646858e69", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/973ff4c052b6feae740fbd3c5adcdaf1cf06ec47/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/973ff4c052b6feae740fbd3c5adcdaf1cf06ec47/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=973ff4c052b6feae740fbd3c5adcdaf1cf06ec47", "patch": "@@ -362,6 +362,13 @@ gfc_conv_variable (gfc_se * se, gfc_expr * expr)\n \t  && !sym->attr.dimension)\n \tse->expr = gfc_build_indirect_ref (se->expr);\n \n+      /* Dereference scalar hidden result.  */\n+      if (gfc_option.flag_f2c \n+\t  && (sym->attr.function || sym->attr.result)\n+\t  && sym->ts.type == BT_COMPLEX\n+\t  && !sym->attr.dimension)\n+\tse->expr = gfc_build_indirect_ref (se->expr);\n+\n       /* Dereference pointer variables.  */\n       if ((sym->attr.pointer || sym->attr.allocatable)\n \t  && (sym->attr.dummy\n@@ -1138,7 +1145,13 @@ gfc_conv_function_call (gfc_se * se, gfc_symbol * sym,\n \t\t\t\t      convert (gfc_charlen_type_node, len));\n \t}\n       else\n-\tgcc_unreachable ();\n+\t{\n+\t  gcc_assert (gfc_option.flag_f2c && sym->ts.type == BT_COMPLEX);\n+\n+\t  type = gfc_get_complex_type (sym->ts.kind);\n+\t  var = gfc_build_addr_expr (NULL, gfc_create_var (type, \"cmplx\"));\n+\t  arglist = gfc_chainon_list (arglist, var);\n+\t}\n     }\n \n   formal = sym->formal;\n@@ -1240,14 +1253,25 @@ gfc_conv_function_call (gfc_se * se, gfc_symbol * sym,\n   se->expr = build3 (CALL_EXPR, TREE_TYPE (fntype), se->expr,\n \t\t     arglist, NULL_TREE);\n \n+  if (sym->result)\n+    sym = sym->result;\n+\n   /* If we have a pointer function, but we don't want a pointer, e.g.\n      something like\n         x = f()\n      where f is pointer valued, we have to dereference the result.  */\n-  if (!se->want_pointer && !byref\n-      && (sym->attr.pointer || (sym->result && sym->result->attr.pointer)))\n+  if (!se->want_pointer && !byref && sym->attr.pointer)\n     se->expr = gfc_build_indirect_ref (se->expr);\n \n+  /* f2c calling conventions require a scalar default real function to\n+     return a double precision result.  Convert this back to default\n+     real.  We only care about the cases that can happen in Fortran 77.\n+  */\n+  if (gfc_option.flag_f2c && sym->ts.type == BT_REAL\n+      && sym->ts.kind == gfc_default_real_kind\n+      && !sym->attr.always_explicit)\n+    se->expr = fold_convert (gfc_get_real_type (sym->ts.kind), se->expr);\n+\n   /* A pure function may still have side-effects - it may modify its\n      parameters.  */\n   TREE_SIDE_EFFECTS (se->expr) = 1;\n@@ -1282,7 +1306,10 @@ gfc_conv_function_call (gfc_se * se, gfc_symbol * sym,\n \t      se->string_length = len;\n \t    }\n \t  else\n-\t    gcc_unreachable ();\n+\t    {\n+\t      gcc_assert (sym->ts.type == BT_COMPLEX && gfc_option.flag_f2c);\n+\t      se->expr = gfc_build_indirect_ref (var);\n+\t    }\n \t}\n     }\n }"}, {"sha": "b2c5169c91d739e2ddb83cec7a4e5b1227b2d607", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/973ff4c052b6feae740fbd3c5adcdaf1cf06ec47/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/973ff4c052b6feae740fbd3c5adcdaf1cf06ec47/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=973ff4c052b6feae740fbd3c5adcdaf1cf06ec47", "patch": "@@ -1272,6 +1272,18 @@ gfc_sym_type (gfc_symbol * sym)\n     sym = sym->result;\n \n   type = gfc_typenode_for_spec (&sym->ts);\n+  if (gfc_option.flag_f2c\n+      && sym->attr.function\n+      && sym->ts.type == BT_REAL\n+      && sym->ts.kind == gfc_default_real_kind\n+      && !sym->attr.always_explicit)\n+    {\n+      /* Special case: f2c calling conventions require that (scalar) \n+\t default REAL functions return the C type double instead.  */\n+      sym->ts.kind = gfc_default_double_kind;\n+      type = gfc_typenode_for_spec (&sym->ts);\n+      sym->ts.kind = gfc_default_real_kind;\n+    }\n \n   if (sym->attr.dummy && !sym->attr.function)\n     byref = 1;\n@@ -1453,19 +1465,29 @@ gfc_get_derived_type (gfc_symbol * derived)\n int\n gfc_return_by_reference (gfc_symbol * sym)\n {\n+  gfc_symbol *result;\n+\n   if (!sym->attr.function)\n     return 0;\n \n-  if (sym->result)\n-    sym = sym->result;\n+  result = sym->result ? sym->result : sym;\n \n-  if (sym->attr.dimension)\n+  if (result->attr.dimension)\n     return 1;\n \n-  if (sym->ts.type == BT_CHARACTER)\n+  if (result->ts.type == BT_CHARACTER)\n     return 1;\n \n-  /* Possibly return complex numbers by reference for g77 compatibility.  */\n+  /* Possibly return complex numbers by reference for g77 compatibility.\n+     We don't do this for calls to intrinsics (as the library uses the\n+     -fno-f2c calling convention), nor for calls to functions which always\n+     require an explicit interface, as no compatibility problems can\n+     arise there.  */\n+  if (gfc_option.flag_f2c\n+      && result->ts.type == BT_COMPLEX\n+      && !sym->attr.intrinsic && !sym->attr.always_explicit)\n+    return 1;\n+  \n   return 0;\n }\n \f\n@@ -1551,7 +1573,7 @@ gfc_get_function_type (gfc_symbol * sym)\n \tgfc_conv_const_charlen (arg->ts.cl);\n \n       type = gfc_sym_type (arg);\n-      if (arg->ts.type == BT_DERIVED\n+      if (arg->ts.type == BT_COMPLEX\n \t  || arg->attr.dimension\n \t  || arg->ts.type == BT_CHARACTER)\n \ttype = build_reference_type (type);"}, {"sha": "70657735ed7eb77bcb9d796f212bd60aacb8c0d4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/973ff4c052b6feae740fbd3c5adcdaf1cf06ec47/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/973ff4c052b6feae740fbd3c5adcdaf1cf06ec47/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=973ff4c052b6feae740fbd3c5adcdaf1cf06ec47", "patch": "@@ -1,3 +1,9 @@\n+2005-05-10  Tobias Schl\"uter  <tobias.schlueter@physik.uni-muenchen.de>\n+\n+\tPR fortran/20178\n+\t* gfortran.dg/f2c_1.f90, gfortran.dg/f2c_2.f90,\n+\tgfortran.dg/f2c_3.f90: New tests.\n+\n 2005-05-10  Diego Novillo  <dnovillo@redhat.com>\n \n \t* gcc.c-torture/compile/20050510-1.c: New test."}, {"sha": "9f45d05bf22f75dd0e7ecc7a3b6cb763ec7cbc96", "filename": "gcc/testsuite/gfortran.dg/f2c_1.f90", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/973ff4c052b6feae740fbd3c5adcdaf1cf06ec47/gcc%2Ftestsuite%2Fgfortran.dg%2Ff2c_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/973ff4c052b6feae740fbd3c5adcdaf1cf06ec47/gcc%2Ftestsuite%2Fgfortran.dg%2Ff2c_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ff2c_1.f90?ref=973ff4c052b6feae740fbd3c5adcdaf1cf06ec47", "patch": "@@ -0,0 +1,73 @@\n+! Make sure the f2c calling conventions work\n+! { dg-do run }\n+! { dg-options \"-ff2c\" }\n+\n+function f(x)\n+  f = x\n+end function f\n+\n+complex function c(a,b)\n+  c = cmplx (a,b)\n+end function c\n+\n+double complex function d(e,f)\n+  double precision e, f\n+  d = cmplx (e, f, kind(d))\n+end function d\n+\n+subroutine test_with_interface()\n+  interface\n+     real function f(x)\n+       real::x\n+     end function f\n+  end interface\n+\n+  interface\n+     complex function c(a,b)\n+       real::a,b\n+     end function c\n+  end interface\n+\n+  interface\n+     double complex function d(e,f)\n+       double precision::e,f\n+     end function d\n+  end interface\n+  \n+  double precision z, w\n+\n+  x = 8.625\n+  if (x /= f(x)) call abort ()\n+  y = f(x)\n+  if (x /= y) call abort ()\n+\n+  a = 1.\n+  b = -1.\n+  if (c(a,b) /= cmplx(a,b)) call abort ()\n+\n+  z = 1.\n+  w = -1.\n+  if (d(z,w) /= cmplx(z,w, kind(z))) call abort ()\n+end subroutine test_with_interface\n+\n+external f, c, d\n+real f\n+complex c\n+double complex d\n+double precision z, w\n+\n+x = 8.625\n+if (x /= f(x)) call abort ()\n+y = f(x)\n+if (x /= y) call abort ()\n+\n+a = 1.\n+b = -1.\n+if (c(a,b) /= cmplx(a,b)) call abort ()\n+\n+z = 1.\n+w = -1.\n+if (d(z,w) /= cmplx(z,w, kind(z))) call abort ()\n+\n+call test_with_interface ()\n+end"}, {"sha": "82ab5f0139393198e468c041a38ec423933644e8", "filename": "gcc/testsuite/gfortran.dg/f2c_2.f90", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/973ff4c052b6feae740fbd3c5adcdaf1cf06ec47/gcc%2Ftestsuite%2Fgfortran.dg%2Ff2c_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/973ff4c052b6feae740fbd3c5adcdaf1cf06ec47/gcc%2Ftestsuite%2Fgfortran.dg%2Ff2c_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ff2c_2.f90?ref=973ff4c052b6feae740fbd3c5adcdaf1cf06ec47", "patch": "@@ -0,0 +1,23 @@\n+! Some basic testing that calls to the library still work correctly with\n+! -ff2c\n+!\n+! Once the library has support for f2c calling conventions (i.e. passing\n+! a REAL*4 or COMPLEX-valued intrinsic as procedure argument works), we\n+! can simply add -ff2c to the list of options to cycle through, and get\n+! complete coverage.  As of 2005-03-05 this doesn't work.\n+! { dg-do run }\n+! { dg-options \"-ff2c\" }\n+\n+complex c\n+double complex d\n+\n+x = 2.\n+if ((sqrt(x) - 1.41)**2 > 1.e-4) call abort ()\n+x = 1.\n+if ((atan(x) - 3.14/4) ** 2 > 1.e-4) call abort ()\n+c = (-1.,0.)\n+if (sqrt(c) /= (0., 1.)) call abort ()\n+d = c\n+if (sqrt(d) /= (0._8, 1._8)) call abort ()\n+end\n+ "}, {"sha": "685445702b082b069dcd6376a96e76b55bd107bf", "filename": "gcc/testsuite/gfortran.dg/f2c_3.f90", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/973ff4c052b6feae740fbd3c5adcdaf1cf06ec47/gcc%2Ftestsuite%2Fgfortran.dg%2Ff2c_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/973ff4c052b6feae740fbd3c5adcdaf1cf06ec47/gcc%2Ftestsuite%2Fgfortran.dg%2Ff2c_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ff2c_3.f90?ref=973ff4c052b6feae740fbd3c5adcdaf1cf06ec47", "patch": "@@ -0,0 +1,18 @@\n+! { dg-do run }\n+! { dg-options \"-ff2c\" }\n+! Verifies that internal functions are not broken by f2c calling conventions\n+program test\n+  real, target :: f\n+  real, pointer :: q\n+  real :: g\n+  f = 1.0\n+  q=>f\n+  g = foo(q)\n+  if (g .ne. 1.0) call abort\n+contains\n+function foo (p)\n+  real, pointer :: foo\n+  real, pointer :: p\n+  foo => p\n+end function\n+end program"}, {"sha": "95884c1891c2edb1d7ce198dd3cbddc29f192c76", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/973ff4c052b6feae740fbd3c5adcdaf1cf06ec47/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/973ff4c052b6feae740fbd3c5adcdaf1cf06ec47/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=973ff4c052b6feae740fbd3c5adcdaf1cf06ec47", "patch": "@@ -1,3 +1,11 @@\n+2005-05-10  Tobias Schl\"uter  <tobias.schlueter@physik.uni-muenchen.de>\n+\n+\tPR fortran/20178\n+\t* Makefile.am (gfor_specific_src): Add 'intrinsics/f2c_intrinsics.F90'\n+\tto dependencies.\n+\t* Makefile.in: Regenerate.\n+\t* intrinsics/f2c_specific.F90: New file.\n+\n 2005-05-10  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n \n \tPR libfortran/20788"}, {"sha": "fe1b607e144c3351bf534f1c3a5219a767beb322", "filename": "libgfortran/Makefile.am", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/973ff4c052b6feae740fbd3c5adcdaf1cf06ec47/libgfortran%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/973ff4c052b6feae740fbd3c5adcdaf1cf06ec47/libgfortran%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.am?ref=973ff4c052b6feae740fbd3c5adcdaf1cf06ec47", "patch": "@@ -394,7 +394,8 @@ foo\n gfor_specific_src= \\\n $(gfor_built_specific_src) \\\n $(gfor_built_specific2_src) \\\n-intrinsics/dprod_r8.f90\n+intrinsics/dprod_r8.f90 \\\n+intrinsics/f2c_specifics.F90\n \n gfor_cmath_src= $(gfor_math_trig_c) $(gfor_math_exp_c) $(gfor_math_hyp_c)\n gfor_cmath_obj= $(gfor_math_trig_obj) $(gfor_math_exp_obj) \\"}, {"sha": "eace54edec1a3e5116f00ceea12704c666a24f67", "filename": "libgfortran/Makefile.in", "status": "modified", "additions": 28, "deletions": 9, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/973ff4c052b6feae740fbd3c5adcdaf1cf06ec47/libgfortran%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/973ff4c052b6feae740fbd3c5adcdaf1cf06ec47/libgfortran%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.in?ref=973ff4c052b6feae740fbd3c5adcdaf1cf06ec47", "patch": "@@ -1,4 +1,4 @@\n-# Makefile.in generated by automake 1.9.4 from Makefile.am.\n+# Makefile.in generated by automake 1.9.2 from Makefile.am.\n # @configure_input@\n \n # Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,\n@@ -39,12 +39,12 @@ POST_UNINSTALL = :\n build_triplet = @build@\n host_triplet = @host@\n target_triplet = @target@\n-DIST_COMMON = README $(am__configure_deps) $(srcdir)/../config.guess \\\n+DIST_COMMON = $(am__configure_deps) $(srcdir)/../config.guess \\\n \t$(srcdir)/../config.sub $(srcdir)/../install-sh \\\n \t$(srcdir)/../ltmain.sh $(srcdir)/../missing \\\n \t$(srcdir)/../mkinstalldirs $(srcdir)/Makefile.am \\\n \t$(srcdir)/Makefile.in $(srcdir)/config.h.in \\\n-\t$(top_srcdir)/configure AUTHORS COPYING ChangeLog INSTALL NEWS\n+\t$(top_srcdir)/configure ChangeLog\n subdir = .\n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n am__aclocal_m4_deps = $(top_srcdir)/acinclude.m4 \\\n@@ -151,7 +151,8 @@ am__objects_35 = _abs_c4.lo _abs_c8.lo _abs_i4.lo _abs_i8.lo \\\n am__objects_36 = _sign_i4.lo _sign_i8.lo _sign_r4.lo _sign_r8.lo \\\n \t_dim_i4.lo _dim_i8.lo _dim_r4.lo _dim_r8.lo _atan2_r4.lo \\\n \t_atan2_r8.lo _mod_i4.lo _mod_i8.lo _mod_r4.lo _mod_r8.lo\n-am__objects_37 = $(am__objects_35) $(am__objects_36) dprod_r8.lo\n+am__objects_37 = $(am__objects_35) $(am__objects_36) dprod_r8.lo \\\n+\tf2c_specifics.lo\n am_libgfortran_la_OBJECTS = $(am__objects_1) $(am__objects_31) \\\n \t$(am__objects_32) $(am__objects_33) $(am__objects_34) \\\n \t$(am__objects_37)\n@@ -162,6 +163,14 @@ libgfortranbegin_la_OBJECTS = $(am_libgfortranbegin_la_OBJECTS)\n DEFAULT_INCLUDES = -I. -I$(srcdir) -I.\n depcomp =\n am__depfiles_maybe =\n+PPFCCOMPILE = $(FC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \\\n+\t$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_FCFLAGS) $(FCFLAGS)\n+LTPPFCCOMPILE = $(LIBTOOL) --mode=compile $(FC) $(DEFS) \\\n+\t$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \\\n+\t$(AM_FCFLAGS) $(FCFLAGS)\n+FCLD = $(FC)\n+FCLINK = $(LIBTOOL) --mode=link $(FCLD) $(AM_FFLAGS) $(FCFLAGS) \\\n+\t$(AM_LDFLAGS) $(LDFLAGS) -o $@\n COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\\n \t$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)\n LTCOMPILE = $(LIBTOOL) --mode=compile $(CC) $(DEFS) \\\n@@ -172,9 +181,6 @@ LINK = $(LIBTOOL) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \\\n \t$(AM_LDFLAGS) $(LDFLAGS) -o $@\n FCCOMPILE = $(FC) $(AM_FCFLAGS) $(FCFLAGS)\n LTFCCOMPILE = $(LIBTOOL) --mode=compile $(FC) $(AM_FCFLAGS) $(FCFLAGS)\n-FCLD = $(FC)\n-FCLINK = $(LIBTOOL) --mode=link $(FCLD) $(AM_FCFLAGS) $(FCFLAGS) \\\n-\t$(AM_LDFLAGS) $(LDFLAGS) -o $@\n SOURCES = $(libgfortran_la_SOURCES) $(EXTRA_libgfortran_la_SOURCES) \\\n \t$(libgfortranbegin_la_SOURCES)\n DIST_SOURCES = $(libgfortran_la_SOURCES) \\\n@@ -680,7 +686,8 @@ generated/_mod_r8.f90\n gfor_specific_src = \\\n $(gfor_built_specific_src) \\\n $(gfor_built_specific2_src) \\\n-intrinsics/dprod_r8.f90\n+intrinsics/dprod_r8.f90 \\\n+intrinsics/f2c_specifics.F90\n \n gfor_cmath_src = $(gfor_math_trig_c) $(gfor_math_exp_c) $(gfor_math_hyp_c)\n gfor_cmath_obj = $(gfor_math_trig_obj) $(gfor_math_exp_obj) \\\n@@ -703,7 +710,7 @@ all: $(BUILT_SOURCES) config.h\n \t$(MAKE) $(AM_MAKEFLAGS) all-am\n \n .SUFFIXES:\n-.SUFFIXES: .c .f90 .lo .o .obj\n+.SUFFIXES: .F90 .c .f90 .lo .o .obj\n am--refresh:\n \t@:\n $(srcdir)/Makefile.in: @MAINTAINER_MODE_TRUE@ $(srcdir)/Makefile.am  $(am__configure_deps)\n@@ -792,6 +799,18 @@ mostlyclean-compile:\n distclean-compile:\n \t-rm -f *.tab.c\n \n+.F90.o:\n+\t$(PPFCCOMPILE) -c -o $@ $<\n+\n+.F90.obj:\n+\t$(PPFCCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`\n+\n+.F90.lo:\n+\t$(LTPPFCCOMPILE) -c -o $@ $<\n+\n+f2c_specifics.lo: intrinsics/f2c_specifics.F90\n+\t$(LIBTOOL) --mode=compile $(FC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_FCFLAGS) $(FCFLAGS) -c -o f2c_specifics.lo `test -f 'intrinsics/f2c_specifics.F90' || echo '$(srcdir)/'`intrinsics/f2c_specifics.F90\n+\n .c.o:\n \t$(COMPILE) -c $<\n "}, {"sha": "b8fcca02f41ab78e63b34dda54871617f5189f58", "filename": "libgfortran/aclocal.m4", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/973ff4c052b6feae740fbd3c5adcdaf1cf06ec47/libgfortran%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/973ff4c052b6feae740fbd3c5adcdaf1cf06ec47/libgfortran%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Faclocal.m4?ref=973ff4c052b6feae740fbd3c5adcdaf1cf06ec47", "patch": "@@ -1,4 +1,4 @@\n-# generated automatically by aclocal 1.9.4 -*- Autoconf -*-\n+# generated automatically by aclocal 1.9.2 -*- Autoconf -*-\n \n # Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n # Free Software Foundation, Inc.\n@@ -40,7 +40,7 @@ AC_DEFUN([AM_AUTOMAKE_VERSION], [am__api_version=\"1.9\"])\n # Call AM_AUTOMAKE_VERSION so it can be traced.\n # This function is AC_REQUIREd by AC_INIT_AUTOMAKE.\n AC_DEFUN([AM_SET_CURRENT_AUTOMAKE_VERSION],\n-\t [AM_AUTOMAKE_VERSION([1.9.4])])\n+\t [AM_AUTOMAKE_VERSION([1.9.2])])\n \n # AM_AUX_DIR_EXPAND\n "}, {"sha": "8a2a8acb562855d10203361ad11471477a1fa60e", "filename": "libgfortran/intrinsics/f2c_specifics.F90", "status": "added", "additions": 169, "deletions": 0, "changes": 169, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/973ff4c052b6feae740fbd3c5adcdaf1cf06ec47/libgfortran%2Fintrinsics%2Ff2c_specifics.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/973ff4c052b6feae740fbd3c5adcdaf1cf06ec47/libgfortran%2Fintrinsics%2Ff2c_specifics.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Ff2c_specifics.F90?ref=973ff4c052b6feae740fbd3c5adcdaf1cf06ec47", "patch": "@@ -0,0 +1,169 @@\n+!   Copyright 2002, 2005 Free Software Foundation, Inc.\n+!   Contributed by Tobias Schl\"uter\n+!\n+!This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+!\n+!GNU libgfortran is free software; you can redistribute it and/or\n+!modify it under the terms of the GNU General Public\n+!License as published by the Free Software Foundation; either\n+!version 2 of the License, or (at your option) any later version.\n+\n+!In addition to the permissions in the GNU General Public License, the\n+!Free Software Foundation gives you unlimited permission to link the\n+!compiled version of this file into combinations with other programs,\n+!and to distribute those combinations without any restriction coming\n+!from the use of this file.  (The General Public License restrictions\n+!do apply in other respects; for example, they cover modification of\n+!the file, and distribution when not linked into a combine\n+!executable.)\n+!\n+!GNU libgfortran is distributed in the hope that it will be useful,\n+!but WITHOUT ANY WARRANTY; without even the implied warranty of\n+!MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+!GNU General Public License for more details.\n+!\n+!You should have received a copy of the GNU General Public\n+!License along with libgfortran; see the file COPYING.  If not,\n+!write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n+!Boston, MA 02111-1307, USA.\n+!\n+! Specifics for the intrinsics whose calling conventions change if\n+! -ff2c is used.\n+!\n+! There are two annoyances WRT the preprocessor:\n+!  - we're using -traditional-cpp, so we can't use the ## operator.\n+!  - macros expand to a single line, and Fortran lines can't be wider\n+!    than 132 characters, therefore we use two macros to split the lines\n+!\n+! The cases we need to implement are functions returning default REAL\n+! or COMPLEX.  The former need to return DOUBLE PRECISION instead of REAL,\n+! the latter become subroutines returning via a hidden first argument.\n+\n+! one argument functions\n+#define REAL_HEAD(NAME) \\\n+elemental function f2c_specific__/**/NAME/**/_r4 (parm) result(res);\n+\n+#define REAL_BODY(NAME) \\\n+  REAL, intent (in) :: parm; \\\n+  DOUBLE PRECISION :: res; \\\n+  res = NAME (parm); \\\n+end function\n+\n+#define COMPLEX_HEAD(NAME) \\\n+subroutine f2c_specific__/**/NAME/**/_c4 (res, parm);\n+\n+#define COMPLEX_BODY(NAME) \\\n+  COMPLEX, intent (in) :: parm; \\\n+  COMPLEX, intent (out) :: res; \\\n+  res = NAME (parm); \\\n+end subroutine\n+\n+#define DCOMPLEX_HEAD(NAME) \\\n+subroutine f2c_specific__/**/NAME/**/_c8 (res, parm);\n+\n+#define DCOMPLEX_BODY(NAME) \\\n+  DOUBLE COMPLEX, intent (in) :: parm; \\\n+  DOUBLE COMPLEX, intent (out) :: res; \\\n+  res = NAME (parm); \\\n+end subroutine\n+\n+REAL_HEAD(abs)\n+REAL_BODY(abs)\n+! abs is special in that the result is real\n+elemental function f2c_specific__abs_c4 (parm) result (res)\n+  COMPLEX, intent(in) :: parm\n+  DOUBLE PRECISION :: res\n+  res = abs(parm)\n+end function\n+\n+REAL_HEAD(exp)\n+REAL_BODY(exp)\n+COMPLEX_HEAD(exp)\n+COMPLEX_BODY(exp)\n+DCOMPLEX_HEAD(exp)\n+DCOMPLEX_BODY(exp)\n+\n+REAL_HEAD(log)\n+REAL_BODY(log)\n+COMPLEX_HEAD(log)\n+COMPLEX_BODY(log)\n+DCOMPLEX_HEAD(log)\n+DCOMPLEX_BODY(log)\n+\n+REAL_HEAD(log10)\n+REAL_BODY(log10)\n+\n+REAL_HEAD(sqrt)\n+REAL_BODY(sqrt)\n+COMPLEX_HEAD(sqrt)\n+COMPLEX_BODY(sqrt)\n+DCOMPLEX_HEAD(sqrt)\n+DCOMPLEX_BODY(sqrt)\n+\n+REAL_HEAD(asin)\n+REAL_BODY(asin)\n+\n+REAL_HEAD(acos)\n+REAL_BODY(acos)\n+\n+REAL_HEAD(atan)\n+REAL_BODY(atan)\n+\n+REAL_HEAD(sin)\n+REAL_BODY(sin)\n+COMPLEX_HEAD(sin)\n+COMPLEX_BODY(sin)\n+DCOMPLEX_HEAD(sin)\n+DCOMPLEX_BODY(sin)\n+\n+REAL_HEAD(cos)\n+REAL_BODY(cos)\n+COMPLEX_HEAD(cos)\n+COMPLEX_BODY(cos)\n+DCOMPLEX_HEAD(cos)\n+DCOMPLEX_BODY(cos)\n+\n+REAL_HEAD(tan)\n+REAL_BODY(tan)\n+\n+REAL_HEAD(sinh)\n+REAL_BODY(sinh)\n+\n+REAL_HEAD(cosh)\n+REAL_BODY(cosh)\n+\n+REAL_HEAD(tanh)\n+REAL_BODY(tanh)\n+\n+COMPLEX_HEAD(conjg)\n+COMPLEX_BODY(conjg)\n+DCOMPLEX_HEAD(conjg)\n+DCOMPLEX_BODY(conjg)\n+\n+REAL_HEAD(aint)\n+REAL_BODY(aint)\n+\n+REAL_HEAD(anint)\n+REAL_BODY(anint)\n+\n+! two argument functions\n+#define REAL2_HEAD(NAME) \\\n+elemental function f2c_specific__/**/NAME/**/_r4 (p1, p2) result(res);\n+\n+#define REAL2_BODY(NAME) \\\n+  REAL, intent (in) :: p1, p2; \\\n+  DOUBLE PRECISION :: res; \\\n+  res = NAME (p1, p2); \\\n+end function\n+\n+REAL2_HEAD(sign)\n+REAL2_BODY(sign)\n+\n+REAL2_HEAD(dim)\n+REAL2_BODY(dim)\n+\n+REAL2_HEAD(atan2)\n+REAL2_BODY(atan2)\n+\n+REAL2_HEAD(mod)\n+REAL2_BODY(mod)"}]}