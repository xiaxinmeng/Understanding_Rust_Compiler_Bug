{"sha": "e95ad7ea78884d4df12f60a8d3592989b895664b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk1YWQ3ZWE3ODg4NGQ0ZGYxMmY2MGE4ZDM1OTI5ODliODk1NjY0Yg==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2014-07-31T09:46:06Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-31T09:46:06Z"}, "message": "gnat_ugn.texi: Document new switch -gnato0.\n\n2014-07-31  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_ugn.texi: Document new switch -gnato0.\n\t* sem_ch3.ads: Minor reformatting.\n\t* gnatlink.adb (Process_Args): Compile bind file with -gnato0\n\t(we do not want overflow checks when incrementing elaboration\n\tcounters).\n\t* einfo.ads: Minor reformatting.\n\nFrom-SVN: r213328", "tree": {"sha": "0f391a6a56870e6cc571ea4c576b17789b2a079b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f391a6a56870e6cc571ea4c576b17789b2a079b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e95ad7ea78884d4df12f60a8d3592989b895664b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e95ad7ea78884d4df12f60a8d3592989b895664b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e95ad7ea78884d4df12f60a8d3592989b895664b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e95ad7ea78884d4df12f60a8d3592989b895664b/comments", "author": null, "committer": null, "parents": [{"sha": "e9a794351b31fd48b76e65c2dc29f534829e42cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9a794351b31fd48b76e65c2dc29f534829e42cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9a794351b31fd48b76e65c2dc29f534829e42cc"}], "stats": {"total": 119, "additions": 70, "deletions": 49}, "files": [{"sha": "b14a429106fbf610e4f407f634b77a663d78ab16", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e95ad7ea78884d4df12f60a8d3592989b895664b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e95ad7ea78884d4df12f60a8d3592989b895664b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e95ad7ea78884d4df12f60a8d3592989b895664b", "patch": "@@ -1,3 +1,12 @@\n+2014-07-31  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_ugn.texi: Document new switch -gnato0.\n+\t* sem_ch3.ads: Minor reformatting.\n+\t* gnatlink.adb (Process_Args): Compile bind file with -gnato0\n+\t(we do not want overflow checks when incrementing elaboration\n+\tcounters).\n+\t* einfo.ads: Minor reformatting.\n+\n 2014-07-31  Robert Dewar  <dewar@adacore.com>\n \n \t* exp_ch5.adb, freeze.adb, exp_ch3.adb: Minor comment correction."}, {"sha": "4ca1baf690c352e068815eb5688cd0c775729c05", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e95ad7ea78884d4df12f60a8d3592989b895664b/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e95ad7ea78884d4df12f60a8d3592989b895664b/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=e95ad7ea78884d4df12f60a8d3592989b895664b", "patch": "@@ -47,10 +47,10 @@ package Einfo is\n --  and they correspond to conventional symbol table information. Other\n --  attributes include sets of meanings for overloaded names, possible\n --  types for overloaded expressions, flags to indicate deferred constants,\n---  incomplete types, etc. These attributes are stored in available fields\n---  in tree nodes (i.e. fields not used by the parser, as defined by the\n---  Sinfo package specification), and accessed by means of a set of\n---  subprograms which define an abstract interface.\n+--  incomplete types, etc. These attributes are stored in available fields in\n+--  tree nodes (i.e. fields not used by the parser, as defined by the Sinfo\n+--  package specification), and accessed by means of a set of subprograms\n+--  which define an abstract interface.\n \n --  There are two kinds of semantic information\n \n@@ -82,10 +82,9 @@ package Einfo is\n --------------------------------\n \n --  XEINFO is a utility program which automatically produces a C header file,\n---  einfo.h from the spec and body of package Einfo. It reads the input\n---  files einfo.ads and einfo.adb and produces the output file einfo.h.\n---  XEINFO is run automatically by the build scripts when you do a full\n---  bootstrap.\n+--  einfo.h from the spec and body of package Einfo. It reads the input files\n+--  einfo.ads and einfo.adb and produces the output file einfo.h. XEINFO is run\n+--  automatically by the build scripts when you do a full bootstrap.\n \n --  In order for this utility program to operate correctly, the form of the\n --  einfo.ads and einfo.adb files must meet certain requirements and be laid\n@@ -302,13 +301,13 @@ package Einfo is\n --  access functions and set procedures to set the corresponding values, while\n --  synthesized attributes have only access functions.\n \n---  Note: in the case of Node, Uint, or Elist fields, there are cases where\n---  the same physical field is used for different purposes in different\n---  entities, so these access functions should only be referenced for the\n---  class of entities in which they are defined as being present. Flags are\n---  not overlapped in this way, but nevertheless as a matter of style and\n---  abstraction (which may or may not be checked by assertions in the body),\n---  this restriction should be observed for flag fields as well.\n+--  Note: in the case of Node, Uint, or Elist fields, there are cases where the\n+--  same physical field is used for different purposes in different entities,\n+--  so these access functions should only be referenced for the class of\n+--  entities in which they are defined as being present. Flags are not\n+--  overlapped in this way, but nevertheless as a matter of style and\n+--  abstraction (which may or may not be checked by assertions in the\n+--  body), this restriction should be observed for flag fields as well.\n \n --  Note: certain of the attributes on types apply only to base types, and\n --  are so noted by the notation [base type only]. These are cases where the\n@@ -390,8 +389,8 @@ package Einfo is\n --       case of subprograms to control output of certain warnings.\n \n --    Aft_Value (synthesized)\n---       Applies to fixed and decimal types. Computes a universal integer\n---       that holds value of the Aft attribute for the type.\n+--       Applies to fixed and decimal types. Computes a universal integer that\n+--       holds value of the Aft attribute for the type.\n \n --    Alias (Node18)\n --       Defined in overloadable entities (literals, subprograms, entries) and"}, {"sha": "bac1286f159e435117055dcbf5e3784ee7d14e9e", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e95ad7ea78884d4df12f60a8d3592989b895664b/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e95ad7ea78884d4df12f60a8d3592989b895664b/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=e95ad7ea78884d4df12f60a8d3592989b895664b", "patch": "@@ -4201,6 +4201,13 @@ of GNAT other than the JGNAT, .NET or GNAAMP versions), then the use of\n Historically front end inlining was more extensive than the gcc back end\n inlining, but that is no longer the case.\n \n+@item -gnato0\n+@cindex @option{-gnato0} (@command{gcc})\n+Suppresses overflow checking. This causes the behavior of the compiler to\n+match the default for older versions where overflow checking was suppressed\n+by default. This is equivalent to having\n+@code{pragma Suppress (Overflow_Mode)} in a configuration pragma file.\n+\n @item -gnato??\n @cindex @option{-gnato??} (@command{gcc})\n Set default mode for handling generation of code to avoid intermediate\n@@ -4226,11 +4233,11 @@ If no digits follow the @option{-gnato}, then it is equivalent to\n causing all intermediate overflows to be handled in strict mode.\n \n This switch also causes arithmetic overflow checking to be performed\n-(as though pragma @code{Unsuppress (Overflow_Mode)} has been specified.\n+(as though @code{pragma Unsuppress (Overflow_Mode)} had been specified.\n \n The default if no option @option{-gnato} is given is that overflow handling\n is in @code{STRICT} mode (computations done using the base type), and that\n-overflow checking is suppressed.\n+overflow checking is enabled.\n \n Note that division by zero is a separate check that is not\n controlled by this switch (division by zero checking is on by default)."}, {"sha": "0ac7113cf21b14ba479630d7e83976d06fd89781", "filename": "gcc/ada/gnatlink.adb", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e95ad7ea78884d4df12f60a8d3592989b895664b/gcc%2Fada%2Fgnatlink.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e95ad7ea78884d4df12f60a8d3592989b895664b/gcc%2Fada%2Fgnatlink.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatlink.adb?ref=e95ad7ea78884d4df12f60a8d3592989b895664b", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1996-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1996-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -676,6 +676,12 @@ procedure Gnatlink is\n       Binder_Options.Increment_Last;\n       Binder_Options.Table (Binder_Options.Last) := new String'(\"-gnatws\");\n \n+      --  Also suppress overflow checks (needed now that we have them on by\n+      --  default, we want checks off when incrementing elaboration counters).\n+\n+      Binder_Options.Increment_Last;\n+      Binder_Options.Table (Binder_Options.Last) := new String'(\"-gnato0\");\n+\n       --  If we did not get an ali file at all, and we had at least one\n       --  linker option, then assume that was the intended ali file after\n       --  all, so that we get a nicer message later on."}, {"sha": "a90485697616920af722d1a0b6c4a8eccbcb7824", "filename": "gcc/ada/sem_ch3.ads", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e95ad7ea78884d4df12f60a8d3592989b895664b/gcc%2Fada%2Fsem_ch3.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e95ad7ea78884d4df12f60a8d3592989b895664b/gcc%2Fada%2Fsem_ch3.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.ads?ref=e95ad7ea78884d4df12f60a8d3592989b895664b", "patch": "@@ -50,18 +50,18 @@ package Sem_Ch3 is\n      (Related_Nod : Node_Id;\n       N           : Node_Id) return Entity_Id;\n    --  An access definition defines a general access type for a formal\n-   --  parameter. The procedure is called when processing formals, when\n-   --  the current scope is the subprogram. The Implicit type is attached\n-   --  to the Related_Nod put into the enclosing scope, so that the only\n-   --  entities defined in the spec are the formals themselves.\n+   --  parameter. The procedure is called when processing formals, when the\n+   --  current scope is the subprogram. The Implicit type is attached to the\n+   --  Related_Nod put into the enclosing scope, so that the only entities\n+   --  defined in the spec are the formals themselves.\n \n    procedure Access_Subprogram_Declaration\n      (T_Name : Entity_Id;\n       T_Def  : Node_Id);\n    --  The subprogram specification yields the signature of an implicit\n-   --  type, whose Ekind is Access_Subprogram_Type. This implicit type is\n-   --  the designated type of the declared access type. In subprogram calls,\n-   --  the signature of the implicit type works like the profile of a regular\n+   --  type, whose Ekind is Access_Subprogram_Type. This implicit type is the\n+   --  designated type of the declared access type. In subprogram calls, the\n+   --  signature of the implicit type works like the profile of a regular\n    --  subprogram.\n \n    procedure Add_Internal_Interface_Entities (Tagged_Type : Entity_Id);\n@@ -94,8 +94,8 @@ package Sem_Ch3 is\n    --  enclosing declaration that generated Ityp.\n    --\n    --  A related mechanism is used during expansion, for itypes created in\n-   --  branches of conditionals. See Ensure_Defined in exp_util.\n-   --  Could both mechanisms be merged ???\n+   --  branches of conditionals. See Ensure_Defined in exp_util. Could both\n+   --  mechanisms be merged ???\n \n    procedure Check_Abstract_Overriding (T : Entity_Id);\n    --  Check that all abstract subprograms inherited from T's parent type have\n@@ -126,11 +126,11 @@ package Sem_Ch3 is\n       Parent_Type  : Entity_Id;\n       Actual_Subp  : Entity_Id := Empty);\n    --  Derive the subprogram Parent_Subp from Parent_Type, and replace the\n-   --  subsidiary subtypes with the derived type to build the specification\n-   --  of the inherited subprogram (returned in New_Subp). For tagged types,\n-   --  the derived subprogram is aliased to that of the actual (in the\n-   --  case where Actual_Subp is nonempty) rather than to the corresponding\n-   --  subprogram of the parent type.\n+   --  subsidiary subtypes with the derived type to build the specification of\n+   --  the inherited subprogram (returned in New_Subp). For tagged types, the\n+   --  derived subprogram is aliased to that of the actual (in the case where\n+   --  Actual_Subp is nonempty) rather than to the corresponding subprogram of\n+   --  the parent type.\n \n    procedure Derive_Subprograms\n      (Parent_Type    : Entity_Id;\n@@ -183,10 +183,10 @@ package Sem_Ch3 is\n      (C : Entity_Id;\n       N : Node_Id := Empty) return Boolean;\n    --  Determines if a record component C is visible in the present context.\n-   --  Note that even though component C could appear in the entity chain\n-   --  of a record type, C may not be visible in the current context. For\n-   --  instance, C may be a component inherited in the full view of a private\n-   --  extension which is not visible in the current context.\n+   --  Note that even though component C could appear in the entity chain of a\n+   --  record type, C may not be visible in the current context. For instance,\n+   --  C may be a component inherited in the full view of a private extension\n+   --  which is not visible in the current context.\n    --\n    --  If present, N is the selected component of which C is the selector. If\n    --  the prefix of N is a type conversion inserted for a discriminant check,\n@@ -199,9 +199,9 @@ package Sem_Ch3 is\n       Suffix_Index : Nat       := 1;\n       In_Iter_Schm : Boolean   := False);\n    --  Process an index that is given in an array declaration, an entry\n-   --  family declaration or a loop iteration. The index is given by an\n-   --  index declaration (a 'box'), or by a discrete range. The later can\n-   --  be the name of a discrete type, or a subtype indication.\n+   --  family declaration or a loop iteration. The index is given by an index\n+   --  declaration (a 'box'), or by a discrete range. The later can be the name\n+   --  of a discrete type, or a subtype indication.\n    --\n    --  Related_Nod is the node where the potential generated implicit types\n    --  will be inserted. The next last parameters are used for creating the\n@@ -257,9 +257,9 @@ package Sem_Ch3 is\n    --  primitive operations of the private view (in the tagged case).\n    --  N is the N_Full_Type_Declaration node.\n    --\n-   --    Full_T is the full view of the type whose full declaration is in N.\n+   --  Full_T is the full view of the type whose full declaration is in N.\n    --\n-   --    Priv_T is the private view of the type whose full declaration is in N.\n+   --  Priv_T is the private view of the type whose full declaration is in N.\n \n    procedure Process_Range_Expr_In_Decl\n      (R            : Node_Id;\n@@ -298,12 +298,12 @@ package Sem_Ch3 is\n      (N    : Node_Id;\n       Prev : Entity_Id := Empty);\n    --  Process the discriminants contained in an N_Full_Type_Declaration or\n-   --  N_Incomplete_Type_Decl node N. If the declaration is a completion,\n-   --  Prev is entity on the partial view, on which references are posted.\n-   --  However, note that Process_Discriminants is called for a completion only\n-   --  if partial view had no discriminants (else we just check conformance\n-   --  between the two views and do not call Process_Discriminants again for\n-   --  the completion).\n+   --  N_Incomplete_Type_Decl node N. If the declaration is a completion, Prev\n+   --  is entity on the partial view, on which references are posted. However,\n+   --  note that Process_Discriminants is called for a completion only if\n+   --  partial view had no discriminants (else we just check conformance\n+   --  between the two views and do not call Process_Discriminants again\n+   --  for the completion).\n \n    function Replace_Anonymous_Access_To_Protected_Subprogram\n      (N : Node_Id) return Entity_Id;"}]}