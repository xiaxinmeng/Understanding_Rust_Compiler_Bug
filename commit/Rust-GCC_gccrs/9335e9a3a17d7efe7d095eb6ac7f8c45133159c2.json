{"sha": "9335e9a3a17d7efe7d095eb6ac7f8c45133159c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTMzNWU5YTNhMTdkN2VmZTdkMDk1ZWI2YWM3ZjhjNDUxMzMxNTljMg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@markmitchell.com", "date": "1998-10-07T09:30:50Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1998-10-07T09:30:50Z"}, "message": "* class.c (finish_struct_1): Add commentary on prevous change.\n\nFrom-SVN: r22884", "tree": {"sha": "421f6b9e631147d714230b0fb5cf9f1daeaba6f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/421f6b9e631147d714230b0fb5cf9f1daeaba6f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9335e9a3a17d7efe7d095eb6ac7f8c45133159c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9335e9a3a17d7efe7d095eb6ac7f8c45133159c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9335e9a3a17d7efe7d095eb6ac7f8c45133159c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9335e9a3a17d7efe7d095eb6ac7f8c45133159c2/comments", "author": null, "committer": null, "parents": [{"sha": "39828aec68c58a3d2b8c0d7f5d0e48e088df367a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39828aec68c58a3d2b8c0d7f5d0e48e088df367a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39828aec68c58a3d2b8c0d7f5d0e48e088df367a"}], "stats": {"total": 23, "additions": 21, "deletions": 2}, "files": [{"sha": "fc4ce6230e282a4876dc92ff9ba3b5e48a1a4dbb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9335e9a3a17d7efe7d095eb6ac7f8c45133159c2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9335e9a3a17d7efe7d095eb6ac7f8c45133159c2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9335e9a3a17d7efe7d095eb6ac7f8c45133159c2", "patch": "@@ -1,5 +1,7 @@\n 1998-10-07  Mark Mitchell  <mark@markmitchell.com>\n \n+\t* class.c (finish_struct_1): Add commentary on prevous change.\n+\n \t* cp-tree.h (vtbl_ptr_type_node): New variable.\n \t* class.c (build_vtbl_ref): Don't indirect through the vptr; it's\n \talready of the right type."}, {"sha": "cd16b59c97e399198225f64643a51b89ba9ce674", "filename": "gcc/cp/class.c", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9335e9a3a17d7efe7d095eb6ac7f8c45133159c2/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9335e9a3a17d7efe7d095eb6ac7f8c45133159c2/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=9335e9a3a17d7efe7d095eb6ac7f8c45133159c2", "patch": "@@ -3777,8 +3777,25 @@ finish_struct_1 (t, warn_anon)\n \n   if (vfield == NULL_TREE && has_virtual)\n     {\n-      /* We build this decl with ptr_type_node, and\n-\t change the type when we know what it should be.  */\n+      /* We build this decl with vtbl_ptr_type_node, which is a\n+\t `vtable_entry_type*'.  It might seem more precise to use\n+\t `vtable_entry_type (*)[N]' where N is the number of firtual\n+\t functions.  However, that would require the vtable pointer in\n+\t base classes to have a different type than the vtable pointer\n+\t in derived classes.  We could make that happen, but that\n+\t still wouldn't solve all the problems.  In particular, the\n+\t type-based alias analysis code would decide that assignments\n+\t to the base class vtable pointer can't alias assignments to\n+\t the derived class vtable pointer, since they have different\n+\t types.  Thus, in an derived class destructor, where the base\n+\t class constructor was inlined, we could generate bad code for\n+\t setting up the vtable pointer.  \n+\n+         Therefore, we use one type for all vtable pointers.  We still\n+\t use a type-correct type; it's just doesn't indicate the array\n+\t bounds.  That's better than using `void*' or some such; it's\n+\t cleaner, and it let's the alias analysis code know that these\n+\t stores cannot alias stores to void*!  */\n       vfield = build_lang_field_decl (FIELD_DECL, get_vfield_name (t),\n \t\t\t\t      vtbl_ptr_type_node);\n       /* If you change any of the below, take a look at all the"}]}