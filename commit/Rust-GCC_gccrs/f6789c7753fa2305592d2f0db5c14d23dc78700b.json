{"sha": "f6789c7753fa2305592d2f0db5c14d23dc78700b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjY3ODljNzc1M2ZhMjMwNTU5MmQyZjBkYjVjMTRkMjNkYzc4NzAwYg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-05-12T18:20:43Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-05-12T18:20:43Z"}, "message": "(simplify_shift_const): Don't change SHIFT_MODE for LSHIFTRT either.\n\nFrom-SVN: r9650", "tree": {"sha": "6d27a2ddabe0dad9513787395b1dc2bbf65409c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d27a2ddabe0dad9513787395b1dc2bbf65409c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6789c7753fa2305592d2f0db5c14d23dc78700b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6789c7753fa2305592d2f0db5c14d23dc78700b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6789c7753fa2305592d2f0db5c14d23dc78700b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6789c7753fa2305592d2f0db5c14d23dc78700b/comments", "author": null, "committer": null, "parents": [{"sha": "efc526c19d35d4521fb58cddbce57cd735d3ddc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efc526c19d35d4521fb58cddbce57cd735d3ddc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efc526c19d35d4521fb58cddbce57cd735d3ddc8"}], "stats": {"total": 22, "additions": 13, "deletions": 9}, "files": [{"sha": "68e91f973c741e3a515bd43d6c5e8baaeff166fe", "filename": "gcc/combine.c", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6789c7753fa2305592d2f0db5c14d23dc78700b/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6789c7753fa2305592d2f0db5c14d23dc78700b/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=f6789c7753fa2305592d2f0db5c14d23dc78700b", "patch": "@@ -7641,10 +7641,12 @@ simplify_shift_const (x, code, result_mode, varop, count)\n \tcode = ROTATE, count = GET_MODE_BITSIZE (result_mode) - count;\n \n       /* We need to determine what mode we will do the shift in.  If the\n-\t shift is a ASHIFTRT or ROTATE, we must always do it in the mode it\n-\t was originally done in.  Otherwise, we can do it in MODE, the widest\n-\t mode encountered. */\n-      shift_mode = (code == ASHIFTRT || code == ROTATE ? result_mode : mode);\n+\t shift is a right shift or a ROTATE, we must always do it in the mode\n+\t it was originally done in.  Otherwise, we can do it in MODE, the\n+\t widest mode encountered. */\n+      shift_mode\n+\t= (code == ASHIFTRT || code == LSHIFTRT || code == ROTATE\n+\t   ? result_mode : mode);\n \n       /* Handle cases where the count is greater than the size of the mode\n \t minus 1.  For ASHIFT, use the size minus one as the count (this can\n@@ -8185,11 +8187,13 @@ simplify_shift_const (x, code, result_mode, varop, count)\n     }\n \n   /* We need to determine what mode to do the shift in.  If the shift is\n-     a ASHIFTRT or ROTATE, we must always do it in the mode it was originally\n-     done in.  Otherwise, we can do it in MODE, the widest mode encountered.\n-     The code we care about is that of the shift that will actually be done,\n-     not the shift that was originally requested.  */\n-  shift_mode = (code == ASHIFTRT || code == ROTATE ? result_mode : mode);\n+     a right shift or ROTATE, we must always do it in the mode it was\n+     originally done in.  Otherwise, we can do it in MODE, the widest mode\n+     encountered.  The code we care about is that of the shift that will\n+     actually be done, not the shift that was originally requested.  */\n+  shift_mode\n+    = (code == ASHIFTRT || code == LSHIFTRT || code == ROTATE\n+       ? result_mode : mode);\n \n   /* We have now finished analyzing the shift.  The result should be\n      a shift of type CODE with SHIFT_MODE shifting VAROP COUNT places.  If"}]}