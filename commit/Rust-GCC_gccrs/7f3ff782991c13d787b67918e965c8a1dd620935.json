{"sha": "7f3ff782991c13d787b67918e965c8a1dd620935", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2YzZmY3ODI5OTFjMTNkNzg3YjY3OTE4ZTk2NWM4YTFkZDYyMDkzNQ==", "commit": {"author": {"name": "Kai Tietz", "email": "ktietz@redhat.com", "date": "2011-07-21T12:11:28Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2011-07-21T12:11:28Z"}, "message": "ChangeLog gcc/\n\n2011-07-21  Kai Tietz  <ktietz@redhat.com>\n\n\t* fold-const.c (fold_unary_loc): Preserve indirect\n\tcomparison cast to none-boolean type.\n\t* tree-ssa.c (useless_type_conversion_p): Preserve cast\n\tfrom/to boolean-type.\n\t* gimplify.c (gimple_boolify): Handle boolification\n\tof comparisons.\n\t(gimplify_expr): Boolifiy non aggregate-typed\n\tcomparisons.\n\t* tree-cfg.c (verify_gimple_comparison): Check result\n\ttype of comparison expression.\n\t* tree-ssa-forwprop.c (forward_propagate_comparison):\n\tAdjust test of condition result and disallow type-cast\n\tsinking into comparison.\n\nChangeLog gcc/testsuite\n\n2011-07-21  Kai Tietz  <ktietz@redhat.com>\n\n\t* gcc.dg/tree-ssa/pr30978.c: adjusted.\n\t* gcc.dg/tree-ssa/ssa-fre-6.c: Likewise.\n\t* gcc.dg/binop-xor1.c: Set to fail.\n\t* gcc.dg/binop-xor3.c: Set to fail.\n\nFrom-SVN: r176563", "tree": {"sha": "3fcf31bae07e5780a558bd87b46dde066bfb218e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3fcf31bae07e5780a558bd87b46dde066bfb218e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f3ff782991c13d787b67918e965c8a1dd620935", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f3ff782991c13d787b67918e965c8a1dd620935", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f3ff782991c13d787b67918e965c8a1dd620935", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f3ff782991c13d787b67918e965c8a1dd620935/comments", "author": null, "committer": null, "parents": [{"sha": "0c53708eadd727f4089028e09840865db25a3cd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c53708eadd727f4089028e09840865db25a3cd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c53708eadd727f4089028e09840865db25a3cd9"}], "stats": {"total": 102, "additions": 67, "deletions": 35}, "files": [{"sha": "44f962adee0cdb9b50f05d05b4737e57838510a4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f3ff782991c13d787b67918e965c8a1dd620935/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f3ff782991c13d787b67918e965c8a1dd620935/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7f3ff782991c13d787b67918e965c8a1dd620935", "patch": "@@ -1,3 +1,19 @@\n+2011-07-21  Kai Tietz  <ktietz@redhat.com>\n+\n+\t* fold-const.c (fold_unary_loc): Preserve indirect\n+\tcomparison cast to none-boolean type.\n+\t* tree-ssa.c (useless_type_conversion_p): Preserve cast\n+\tfrom/to boolean-type.\n+\t* gimplify.c (gimple_boolify): Handle boolification\n+\tof comparisons.\n+\t(gimplify_expr): Boolifiy non aggregate-typed\n+\tcomparisons.\n+\t* tree-cfg.c (verify_gimple_comparison): Check result\n+\ttype of comparison expression.\n+\t* tree-ssa-forwprop.c (forward_propagate_comparison):\n+\tAdjust test of condition result and disallow type-cast\n+\tsinking into comparison.\n+\n 2011-07-21  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-forwprop.c (combine_conversions): Return whether"}, {"sha": "889a92c71f8e896112d211213964e0a9e352ecb1", "filename": "gcc/fold-const.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f3ff782991c13d787b67918e965c8a1dd620935/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f3ff782991c13d787b67918e965c8a1dd620935/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=7f3ff782991c13d787b67918e965c8a1dd620935", "patch": "@@ -7664,11 +7664,11 @@ fold_unary_loc (location_t loc, enum tree_code code, tree type, tree op0)\n \t     non-integral type.\n \t     Do not fold the result as that would not simplify further, also\n \t     folding again results in recursions.  */\n-\t  if (INTEGRAL_TYPE_P (type))\n+\t  if (TREE_CODE (type) == BOOLEAN_TYPE)\n \t    return build2_loc (loc, TREE_CODE (op0), type,\n \t\t\t       TREE_OPERAND (op0, 0),\n \t\t\t       TREE_OPERAND (op0, 1));\n-\t  else\n+\t  else if (!INTEGRAL_TYPE_P (type))\n \t    return build3_loc (loc, COND_EXPR, type, op0,\n \t\t\t       fold_convert (type, boolean_true_node),\n \t\t\t       fold_convert (type, boolean_false_node));"}, {"sha": "af9cdd7c848fe8bfff63878e711cb2987bcd8ff7", "filename": "gcc/gimplify.c", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f3ff782991c13d787b67918e965c8a1dd620935/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f3ff782991c13d787b67918e965c8a1dd620935/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=7f3ff782991c13d787b67918e965c8a1dd620935", "patch": "@@ -2860,18 +2860,23 @@ gimple_boolify (tree expr)\n \n     case TRUTH_NOT_EXPR:\n       TREE_OPERAND (expr, 0) = gimple_boolify (TREE_OPERAND (expr, 0));\n-      /* FALLTHRU */\n \n-    case EQ_EXPR: case NE_EXPR:\n-    case LE_EXPR: case GE_EXPR: case LT_EXPR: case GT_EXPR:\n       /* These expressions always produce boolean results.  */\n-      TREE_TYPE (expr) = boolean_type_node;\n+      if (TREE_CODE (type) != BOOLEAN_TYPE)\n+\tTREE_TYPE (expr) = boolean_type_node;\n       return expr;\n \n     default:\n+      if (COMPARISON_CLASS_P (expr))\n+\t{\n+\t  /* There expressions always prduce boolean results.  */\n+\t  if (TREE_CODE (type) != BOOLEAN_TYPE)\n+\t    TREE_TYPE (expr) = boolean_type_node;\n+\t  return expr;\n+\t}\n       /* Other expressions that get here must have boolean values, but\n \t might need to be converted to the appropriate mode.  */\n-      if (type == boolean_type_node)\n+      if (TREE_CODE (type) == BOOLEAN_TYPE)\n \treturn expr;\n       return fold_convert_loc (loc, boolean_type_node, expr);\n     }\n@@ -7316,7 +7321,19 @@ gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t\t  tree type = TREE_TYPE (TREE_OPERAND (*expr_p, 1));\n \n \t\t  if (!AGGREGATE_TYPE_P (type))\n-\t\t    goto expr_2;\n+\t\t    {\n+\t\t      tree org_type = TREE_TYPE (*expr_p);\n+\t\t      *expr_p = gimple_boolify (*expr_p);\n+\t\t      if (!useless_type_conversion_p (org_type,\n+\t\t\t\t\t\t      TREE_TYPE (*expr_p)))\n+\t\t\t{\n+\t\t\t  *expr_p = fold_convert_loc (input_location,\n+\t\t\t\t\t\t      org_type, *expr_p);\n+\t\t\t  ret = GS_OK;\n+\t\t\t}\n+\t\t      else\n+\t\t\tgoto expr_2;\n+\t\t    }\n \t\t  else if (TYPE_MODE (type) != BLKmode)\n \t\t    ret = gimplify_scalar_mode_aggregate_compare (expr_p);\n \t\t  else"}, {"sha": "05ad509b33a3e6525fc5c7b9dff820d047978b5c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f3ff782991c13d787b67918e965c8a1dd620935/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f3ff782991c13d787b67918e965c8a1dd620935/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7f3ff782991c13d787b67918e965c8a1dd620935", "patch": "@@ -1,3 +1,8 @@\n+2011-07-21  Kai Tietz  <ktietz@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/pr30978.c: adjusted.\n+\t* gcc.dg/tree-ssa/ssa-fre-6.c: Likewise.\n+\n 2011-07-21  Tobias Burnus  <burnus@net-b.de>\n \n \t* gfortran.dg/coarray_lib_token_1.f90: New."}, {"sha": "48f6b4259596c47768e086e4e1d68f8fdde8bd4d", "filename": "gcc/testsuite/gcc.dg/binop-xor1.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f3ff782991c13d787b67918e965c8a1dd620935/gcc%2Ftestsuite%2Fgcc.dg%2Fbinop-xor1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f3ff782991c13d787b67918e965c8a1dd620935/gcc%2Ftestsuite%2Fgcc.dg%2Fbinop-xor1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbinop-xor1.c?ref=7f3ff782991c13d787b67918e965c8a1dd620935", "patch": "@@ -7,8 +7,5 @@ foo (int a, int b, int c)\n   return ((a && !b && c) || (!a && b && c));\n }\n \n-/* We expect to see \"<bb N>\"; confirm that, so that we know to count\n-   it in the real test.  */\n-/* { dg-final { scan-tree-dump-times \"<bb\\[^>\\]*>\" 5 \"optimized\" } } */\n-/* { dg-final { scan-tree-dump-times \"\\\\\\^\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\\\^\" 1 \"optimized\" { xfail *-*-* } } } */\n /* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "9d3b50bd4ee9550a3c274c5dd8585b56ef8eeaef", "filename": "gcc/testsuite/gcc.dg/binop-xor3.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f3ff782991c13d787b67918e965c8a1dd620935/gcc%2Ftestsuite%2Fgcc.dg%2Fbinop-xor3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f3ff782991c13d787b67918e965c8a1dd620935/gcc%2Ftestsuite%2Fgcc.dg%2Fbinop-xor3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbinop-xor3.c?ref=7f3ff782991c13d787b67918e965c8a1dd620935", "patch": "@@ -7,8 +7,5 @@ foo (int a, int b)\n   return ((a && !b) || (!a && b));\n }\n \n-/* We expect to see \"<bb N>\"; confirm that, so that we know to count\n-   it in the real test.  */\n-/* { dg-final { scan-tree-dump-times \"<bb\\[^>\\]*>\" 1 \"optimized\" } } */\n-/* { dg-final { scan-tree-dump-times \"\\\\\\^\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\\\^\" 1 \"optimized\" { xfail *-*-* } } } */\n /* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "ee45e5b4fe8a24cb5c3ace51cda780bab4e29c2c", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr30978.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f3ff782991c13d787b67918e965c8a1dd620935/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr30978.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f3ff782991c13d787b67918e965c8a1dd620935/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr30978.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr30978.c?ref=7f3ff782991c13d787b67918e965c8a1dd620935", "patch": "@@ -10,5 +10,8 @@ int foo(int a)\n   return e;\n }\n \n-/* { dg-final { scan-tree-dump \"e_. = a_..D. > 0;\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \" = \" 2 \"optimized\" } } */\n+/* One comparison and one extension to int.  */\n+/* { dg-final { scan-tree-dump \" = a_..D. > 0;\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \"e_. = \\\\\\(int\\\\\\)\" \"optimized\" } } */\n /* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "18a9d9b895ae2ce4af3230055f0a39508f3c1eef", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f3ff782991c13d787b67918e965c8a1dd620935/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f3ff782991c13d787b67918e965c8a1dd620935/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-6.c?ref=7f3ff782991c13d787b67918e965c8a1dd620935", "patch": "@@ -2,5 +2,5 @@\n /* { dg-options \"-O -fdump-tree-fre1-details\" } */\n \n  int i; int foo(void) { i = 2; int j = i * 2; int k = i + 2; return j == k; }\n-/* { dg-final { scan-tree-dump-times \"Replaced \" 5 \"fre1\" } } */\n+/* { dg-final { scan-tree-dump-times \"Replaced \" 6 \"fre1\" } } */\n /* { dg-final { cleanup-tree-dump \"fre1\" } } */"}, {"sha": "bc71dd60fa138560b8c3142cf71a53d91e58ff67", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f3ff782991c13d787b67918e965c8a1dd620935/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f3ff782991c13d787b67918e965c8a1dd620935/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=7f3ff782991c13d787b67918e965c8a1dd620935", "patch": "@@ -3203,7 +3203,9 @@ verify_gimple_comparison (tree type, tree op0, tree op1)\n        && (!POINTER_TYPE_P (op0_type)\n \t   || !POINTER_TYPE_P (op1_type)\n \t   || TYPE_MODE (op0_type) != TYPE_MODE (op1_type)))\n-      || !INTEGRAL_TYPE_P (type))\n+      || !INTEGRAL_TYPE_P (type)\n+      || (TREE_CODE (type) != BOOLEAN_TYPE\n+\t  && TYPE_PRECISION (type) != 1))\n     {\n       error (\"type mismatch in comparison expression\");\n       debug_generic_expr (type);"}, {"sha": "c08cb18e7afe7e53d460a1d0159d0b6b4bfc9c4a", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f3ff782991c13d787b67918e965c8a1dd620935/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f3ff782991c13d787b67918e965c8a1dd620935/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=7f3ff782991c13d787b67918e965c8a1dd620935", "patch": "@@ -1132,20 +1132,12 @@ forward_propagate_comparison (gimple stmt)\n   if (!INTEGRAL_TYPE_P (TREE_TYPE (lhs)))\n     return false;\n \n-  /* We can propagate the condition into a conversion.  */\n-  if (CONVERT_EXPR_CODE_P (code))\n-    {\n-      /* Avoid using fold here as that may create a COND_EXPR with\n-\t non-boolean condition as canonical form.  */\n-      tmp = build2 (gimple_assign_rhs_code (stmt), TREE_TYPE (lhs),\n-\t\t    gimple_assign_rhs1 (stmt), gimple_assign_rhs2 (stmt));\n-    }\n   /* We can propagate the condition into a statement that\n      computes the logical negation of the comparison result.  */\n-  else if ((code == BIT_NOT_EXPR\n-\t    && TYPE_PRECISION (TREE_TYPE (lhs)) == 1)\n-\t   || (code == BIT_XOR_EXPR\n-\t       && integer_onep (gimple_assign_rhs2 (use_stmt))))\n+  if ((code == BIT_NOT_EXPR\n+       && TYPE_PRECISION (TREE_TYPE (lhs)) == 1)\n+      || (code == BIT_XOR_EXPR\n+\t  && integer_onep (gimple_assign_rhs2 (use_stmt))))\n     {\n       tree type = TREE_TYPE (gimple_assign_rhs1 (stmt));\n       bool nans = HONOR_NANS (TYPE_MODE (type));\n@@ -1750,6 +1742,7 @@ simplify_bitwise_binary (gimple_stmt_iterator *gsi)\n \t\t\t\t\t\t\targ2));\n       tem = make_ssa_name (tem, newop);\n       gimple_assign_set_lhs (newop, tem);\n+      gimple_set_location (newop, gimple_location (stmt));\n       gsi_insert_before (gsi, newop, GSI_SAME_STMT);\n       gimple_assign_set_rhs_with_ops_1 (gsi, NOP_EXPR,\n \t\t\t\t\ttem, NULL_TREE, NULL_TREE);\n@@ -1779,6 +1772,7 @@ simplify_bitwise_binary (gimple_stmt_iterator *gsi)\n       newop = gimple_build_assign_with_ops (code, tem, def1_arg1, def2_arg1);\n       tem = make_ssa_name (tem, newop);\n       gimple_assign_set_lhs (newop, tem);\n+      gimple_set_location (newop, gimple_location (stmt));\n       gsi_insert_before (gsi, newop, GSI_SAME_STMT);\n       gimple_assign_set_rhs_with_ops_1 (gsi, NOP_EXPR,\n \t\t\t\t\ttem, NULL_TREE, NULL_TREE);\n@@ -1807,6 +1801,7 @@ simplify_bitwise_binary (gimple_stmt_iterator *gsi)\n \t\t\t\t\t    tem, def1_arg1, arg2);\n       tem = make_ssa_name (tem, newop);\n       gimple_assign_set_lhs (newop, tem);\n+      gimple_set_location (newop, gimple_location (stmt));\n       /* Make sure to re-process the new stmt as it's walking upwards.  */\n       gsi_insert_before (gsi, newop, GSI_NEW_STMT);\n       gimple_assign_set_rhs1 (stmt, tem);"}, {"sha": "a945e0ea76f9664b6984570625aede69350a9498", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f3ff782991c13d787b67918e965c8a1dd620935/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f3ff782991c13d787b67918e965c8a1dd620935/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=7f3ff782991c13d787b67918e965c8a1dd620935", "patch": "@@ -1306,10 +1306,10 @@ useless_type_conversion_p (tree outer_type, tree inner_type)\n \t  || TYPE_PRECISION (inner_type) != TYPE_PRECISION (outer_type))\n \treturn false;\n \n-      /* Preserve conversions to BOOLEAN_TYPE if it is not of precision\n-         one.  */\n-      if (TREE_CODE (inner_type) != BOOLEAN_TYPE\n-\t  && TREE_CODE (outer_type) == BOOLEAN_TYPE\n+      /* Preserve conversions to/from BOOLEAN_TYPE if types are not\n+\t of precision one.  */\n+      if (((TREE_CODE (inner_type) == BOOLEAN_TYPE)\n+\t   != (TREE_CODE (outer_type) == BOOLEAN_TYPE))\n \t  && TYPE_PRECISION (outer_type) != 1)\n \treturn false;\n "}]}