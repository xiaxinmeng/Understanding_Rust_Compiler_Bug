{"sha": "a0ee8352df6f4cd98830c8dbaa969e1cda39cc40", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTBlZTgzNTJkZjZmNGNkOTg4MzBjOGRiYWE5NjllMWNkYTM5Y2M0MA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-02-19T17:22:14Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-02-21T10:17:31Z"}, "message": "aarch64: Add SVE support for -mlow-precision-sqrt\n\nSVE was missing support for -mlow-precision-sqrt, which meant that\n-march=armv8.2-a+sve -mlow-precision-sqrt could cause a performance\nregression compared to -march=armv8.2-a -mlow-precision-sqrt.\n\n2020-02-21  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64.c (aarch64_emit_approx_sqrt): Add SVE\n\tsupport.  Use aarch64_emit_mult instead of emitting multiplication\n\tinstructions directly.\n\t* config/aarch64/aarch64-sve.md (sqrt<mode>2, rsqrt<mode>2)\n\t(@aarch64_rsqrte<mode>, @aarch64_rsqrts<mode>): New expanders.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/rsqrt_1.c: New test.\n\t* gcc.target/aarch64/sve/rsqrt_1_run.c: Likewise.\n\t* gcc.target/aarch64/sve/sqrt_1.c: Likewise.\n\t* gcc.target/aarch64/sve/sqrt_1_run.c: Likewise.", "tree": {"sha": "4ca1ffbd94cbe5d750ce2f40609cdc8476d2ab82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ca1ffbd94cbe5d750ce2f40609cdc8476d2ab82"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0ee8352df6f4cd98830c8dbaa969e1cda39cc40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0ee8352df6f4cd98830c8dbaa969e1cda39cc40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0ee8352df6f4cd98830c8dbaa969e1cda39cc40", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0ee8352df6f4cd98830c8dbaa969e1cda39cc40/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04f307cbb9e0610b2e3c70029ee6bfdbd7b8b9de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04f307cbb9e0610b2e3c70029ee6bfdbd7b8b9de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04f307cbb9e0610b2e3c70029ee6bfdbd7b8b9de"}], "stats": {"total": 253, "additions": 234, "deletions": 19}, "files": [{"sha": "6e7de5fa729fb58bd231a851fdcb770ffeab686e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0ee8352df6f4cd98830c8dbaa969e1cda39cc40/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0ee8352df6f4cd98830c8dbaa969e1cda39cc40/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a0ee8352df6f4cd98830c8dbaa969e1cda39cc40", "patch": "@@ -1,3 +1,11 @@\n+2020-02-21  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_emit_approx_sqrt): Add SVE\n+\tsupport.  Use aarch64_emit_mult instead of emitting multiplication\n+\tinstructions directly.\n+\t* config/aarch64/aarch64-sve.md (sqrt<mode>2, rsqrt<mode>2)\n+\t(@aarch64_rsqrte<mode>, @aarch64_rsqrts<mode>): New expanders.\n+\n 2020-02-21  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_emit_mult): New function."}, {"sha": "a661b257109c3da2f94ba7c6927967be0ca7177b", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 54, "deletions": 2, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0ee8352df6f4cd98830c8dbaa969e1cda39cc40/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0ee8352df6f4cd98830c8dbaa969e1cda39cc40/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=a0ee8352df6f4cd98830c8dbaa969e1cda39cc40", "patch": "@@ -76,6 +76,8 @@\n ;; ---- [INT] Logical inverse\n ;; ---- [FP<-INT] General unary arithmetic that maps to unspecs\n ;; ---- [FP] General unary arithmetic corresponding to unspecs\n+;; ---- [FP] Square root\n+;; ---- [FP] Reciprocal square root\n ;; ---- [PRED] Inverse\n \n ;; == Binary arithmetic\n@@ -3246,7 +3248,7 @@\n ;; - FRINTP\n ;; - FRINTX\n ;; - FRINTZ\n-;; - FRSQRT\n+;; - FRSQRTE\n ;; - FSQRT\n ;; -------------------------------------------------------------------------\n \n@@ -3267,7 +3269,7 @@\n \t  [(match_dup 2)\n \t   (const_int SVE_RELAXED_GP)\n \t   (match_operand:SVE_FULL_F 1 \"register_operand\")]\n-\t  SVE_COND_FP_UNARY))]\n+\t  SVE_COND_FP_UNARY_OPTAB))]\n   \"TARGET_SVE\"\n   {\n     operands[2] = aarch64_ptrue_reg (<VPRED>mode);\n@@ -3357,6 +3359,56 @@\n   [(set_attr \"movprfx\" \"*,yes,yes\")]\n )\n \n+;; -------------------------------------------------------------------------\n+;; ---- [FP] Square root\n+;; -------------------------------------------------------------------------\n+\n+(define_expand \"sqrt<mode>2\"\n+  [(set (match_operand:SVE_FULL_F 0 \"register_operand\")\n+\t(unspec:SVE_FULL_F\n+\t  [(match_dup 2)\n+\t   (const_int SVE_RELAXED_GP)\n+\t   (match_operand:SVE_FULL_F 1 \"register_operand\")]\n+\t  UNSPEC_COND_FSQRT))]\n+  \"TARGET_SVE\"\n+{\n+  if (aarch64_emit_approx_sqrt (operands[0], operands[1], false))\n+    DONE;\n+  operands[2] = aarch64_ptrue_reg (<VPRED>mode);\n+})\n+\n+;; -------------------------------------------------------------------------\n+;; ---- [FP] Reciprocal square root\n+;; -------------------------------------------------------------------------\n+\n+(define_expand \"rsqrt<mode>2\"\n+  [(set (match_operand:SVE_FULL_SDF 0 \"register_operand\")\n+\t(unspec:SVE_FULL_SDF\n+\t  [(match_operand:SVE_FULL_SDF 1 \"register_operand\")]\n+\t  UNSPEC_RSQRT))]\n+  \"TARGET_SVE\"\n+{\n+  aarch64_emit_approx_sqrt (operands[0], operands[1], true);\n+  DONE;\n+})\n+\n+(define_expand \"@aarch64_rsqrte<mode>\"\n+  [(set (match_operand:SVE_FULL_SDF 0 \"register_operand\")\n+\t(unspec:SVE_FULL_SDF\n+\t  [(match_operand:SVE_FULL_SDF 1 \"register_operand\")]\n+\t  UNSPEC_RSQRTE))]\n+  \"TARGET_SVE\"\n+)\n+\n+(define_expand \"@aarch64_rsqrts<mode>\"\n+  [(set (match_operand:SVE_FULL_SDF 0 \"register_operand\")\n+\t(unspec:SVE_FULL_SDF\n+\t  [(match_operand:SVE_FULL_SDF 1 \"register_operand\")\n+\t   (match_operand:SVE_FULL_SDF 2 \"register_operand\")]\n+\t  UNSPEC_RSQRTS))]\n+  \"TARGET_SVE\"\n+)\n+\n ;; -------------------------------------------------------------------------\n ;; ---- [PRED] Inverse\n ;; -------------------------------------------------------------------------"}, {"sha": "703f69a8b4274cb0f6c87fa737b05c8d56b47042", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 41, "deletions": 17, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0ee8352df6f4cd98830c8dbaa969e1cda39cc40/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0ee8352df6f4cd98830c8dbaa969e1cda39cc40/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=a0ee8352df6f4cd98830c8dbaa969e1cda39cc40", "patch": "@@ -12790,6 +12790,9 @@ aarch64_emit_approx_sqrt (rtx dst, rtx src, bool recp)\n     /* Caller assumes we cannot fail.  */\n     gcc_assert (use_rsqrt_p (mode));\n \n+  rtx pg = NULL_RTX;\n+  if (aarch64_sve_mode_p (mode))\n+    pg = aarch64_ptrue_reg (aarch64_sve_pred_mode (mode));\n   machine_mode mmsk = (VECTOR_MODE_P (mode)\n \t\t       ? related_int_vector_mode (mode).require ()\n \t\t       : int_mode_for_mode (mode).require ());\n@@ -12798,11 +12801,21 @@ aarch64_emit_approx_sqrt (rtx dst, rtx src, bool recp)\n     {\n       /* When calculating the approximate square root, compare the\n \t argument with 0.0 and create a mask.  */\n-      xmsk = gen_reg_rtx (mmsk);\n-      emit_insn (gen_rtx_SET (xmsk,\n-\t\t\t      gen_rtx_NEG (mmsk,\n-\t\t\t\t\t   gen_rtx_EQ (mmsk, src,\n-\t\t\t\t\t\t       CONST0_RTX (mode)))));\n+      rtx zero = CONST0_RTX (mode);\n+      if (pg)\n+\t{\n+\t  xmsk = gen_reg_rtx (GET_MODE (pg));\n+\t  rtx hint = gen_int_mode (SVE_KNOWN_PTRUE, SImode);\n+\t  emit_insn (gen_aarch64_pred_fcm (UNSPEC_COND_FCMNE, mode,\n+\t\t\t\t\t   xmsk, pg, hint, src, zero));\n+\t}\n+      else\n+\t{\n+\t  xmsk = gen_reg_rtx (mmsk);\n+\t  emit_insn (gen_rtx_SET (xmsk,\n+\t\t\t\t  gen_rtx_NEG (mmsk,\n+\t\t\t\t\t       gen_rtx_EQ (mmsk, src, zero))));\n+\t}\n     }\n \n   /* Estimate the approximate reciprocal square root.  */\n@@ -12824,29 +12837,40 @@ aarch64_emit_approx_sqrt (rtx dst, rtx src, bool recp)\n   while (iterations--)\n     {\n       rtx x2 = gen_reg_rtx (mode);\n-      emit_set_insn (x2, gen_rtx_MULT (mode, xdst, xdst));\n+      aarch64_emit_mult (x2, pg, xdst, xdst);\n \n       emit_insn (gen_aarch64_rsqrts (mode, x1, src, x2));\n \n       if (iterations > 0)\n-\temit_set_insn (xdst, gen_rtx_MULT (mode, xdst, x1));\n+\taarch64_emit_mult (xdst, pg, xdst, x1);\n     }\n \n   if (!recp)\n     {\n-      /* Qualify the approximate reciprocal square root when the argument is\n-\t 0.0 by squashing the intermediary result to 0.0.  */\n-      rtx xtmp = gen_reg_rtx (mmsk);\n-      emit_set_insn (xtmp, gen_rtx_AND (mmsk, gen_rtx_NOT (mmsk, xmsk),\n-\t\t\t\t\t      gen_rtx_SUBREG (mmsk, xdst, 0)));\n-      emit_move_insn (xdst, gen_rtx_SUBREG (mode, xtmp, 0));\n-\n-      /* Calculate the approximate square root.  */\n-      emit_set_insn (xdst, gen_rtx_MULT (mode, xdst, src));\n+      if (pg)\n+\t/* Multiply nonzero source values by the corresponding intermediate\n+\t   result elements, so that the final calculation is the approximate\n+\t   square root rather than its reciprocal.  Select a zero result for\n+\t   zero source values, to avoid the Inf * 0 -> NaN that we'd get\n+\t   otherwise.  */\n+\temit_insn (gen_cond (UNSPEC_COND_FMUL, mode,\n+\t\t\t     xdst, xmsk, xdst, src, CONST0_RTX (mode)));\n+      else\n+\t{\n+\t  /* Qualify the approximate reciprocal square root when the\n+\t     argument is 0.0 by squashing the intermediary result to 0.0.  */\n+\t  rtx xtmp = gen_reg_rtx (mmsk);\n+\t  emit_set_insn (xtmp, gen_rtx_AND (mmsk, gen_rtx_NOT (mmsk, xmsk),\n+\t\t\t\t\t    gen_rtx_SUBREG (mmsk, xdst, 0)));\n+\t  emit_move_insn (xdst, gen_rtx_SUBREG (mode, xtmp, 0));\n+\n+\t  /* Calculate the approximate square root.  */\n+\t  aarch64_emit_mult (xdst, pg, xdst, src);\n+\t}\n     }\n \n   /* Finalize the approximation.  */\n-  emit_set_insn (dst, gen_rtx_MULT (mode, xdst, x1));\n+  aarch64_emit_mult (dst, pg, xdst, x1);\n \n   return true;\n }"}, {"sha": "b106957f537b199d4156ab96a3b917d2fd31c813", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0ee8352df6f4cd98830c8dbaa969e1cda39cc40/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0ee8352df6f4cd98830c8dbaa969e1cda39cc40/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=a0ee8352df6f4cd98830c8dbaa969e1cda39cc40", "patch": "@@ -2277,6 +2277,19 @@\n \t\t\t\t\tUNSPEC_COND_FRINTZ\n \t\t\t\t\tUNSPEC_COND_FSQRT])\n \n+;; Same as SVE_COND_FP_UNARY, but without codes that have a dedicated\n+;; <optab><mode>2 expander.\n+(define_int_iterator SVE_COND_FP_UNARY_OPTAB [UNSPEC_COND_FABS\n+\t\t\t\t\t      UNSPEC_COND_FNEG\n+\t\t\t\t\t      UNSPEC_COND_FRECPX\n+\t\t\t\t\t      UNSPEC_COND_FRINTA\n+\t\t\t\t\t      UNSPEC_COND_FRINTI\n+\t\t\t\t\t      UNSPEC_COND_FRINTM\n+\t\t\t\t\t      UNSPEC_COND_FRINTN\n+\t\t\t\t\t      UNSPEC_COND_FRINTP\n+\t\t\t\t\t      UNSPEC_COND_FRINTX\n+\t\t\t\t\t      UNSPEC_COND_FRINTZ])\n+\n (define_int_iterator SVE_COND_FCVT [UNSPEC_COND_FCVT])\n (define_int_iterator SVE_COND_FCVTI [UNSPEC_COND_FCVTZS UNSPEC_COND_FCVTZU])\n (define_int_iterator SVE_COND_ICVTF [UNSPEC_COND_SCVTF UNSPEC_COND_UCVTF])"}, {"sha": "8518061aa28433ef292351991267258f59e97104", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0ee8352df6f4cd98830c8dbaa969e1cda39cc40/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0ee8352df6f4cd98830c8dbaa969e1cda39cc40/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a0ee8352df6f4cd98830c8dbaa969e1cda39cc40", "patch": "@@ -1,3 +1,10 @@\n+2020-02-21  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/rsqrt_1.c: New test.\n+\t* gcc.target/aarch64/sve/rsqrt_1_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/sqrt_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/sqrt_1_run.c: Likewise.\n+\n 2020-02-21  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.target/aarch64/sve/recip_1.c: New test."}, {"sha": "2dabfd3e67c546945df1619918a3191697d9605f", "filename": "gcc/testsuite/gcc.target/aarch64/sve/rsqrt_1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0ee8352df6f4cd98830c8dbaa969e1cda39cc40/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Frsqrt_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0ee8352df6f4cd98830c8dbaa969e1cda39cc40/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Frsqrt_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Frsqrt_1.c?ref=a0ee8352df6f4cd98830c8dbaa969e1cda39cc40", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-options \"-Ofast -mlow-precision-sqrt\" } */\n+\n+#define DEF_LOOP(TYPE, FN)\t\t\t\\\n+  void\t\t\t\t\t\t\\\n+  test_##TYPE (TYPE *x, int n)\t\t\t\\\n+  {\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\\\n+      x[i] = (TYPE) 1 / FN (x[i]);\t\t\\\n+  }\n+\n+#define TEST_ALL(T)\t\t\t\\\n+  T (_Float16, __builtin_sqrtf16)\t\\\n+  T (float, __builtin_sqrtf)\t\t\\\n+  T (double, __builtin_sqrt)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-not {\\tfrsqrte\\tz[0-9]+\\.h} } } */\n+/* { dg-final { scan-assembler-not {\\tfrsqrts\\tz[0-9]+\\.h} } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.s} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tfrsqrte\\tz[0-9]+\\.s} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfrsqrts\\tz[0-9]+\\.s} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.d} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tfrsqrte\\tz[0-9]+\\.d} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfrsqrts\\tz[0-9]+\\.d} 2 } } */"}, {"sha": "73d309a58649431919f65972d8f240c8bd83b3ca", "filename": "gcc/testsuite/gcc.target/aarch64/sve/rsqrt_1_run.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0ee8352df6f4cd98830c8dbaa969e1cda39cc40/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Frsqrt_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0ee8352df6f4cd98830c8dbaa969e1cda39cc40/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Frsqrt_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Frsqrt_1_run.c?ref=a0ee8352df6f4cd98830c8dbaa969e1cda39cc40", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-Ofast -mlow-precision-sqrt\" } */\n+\n+#include \"rsqrt_1.c\"\n+\n+#define N 77\n+\n+#define TEST_LOOP(TYPE, FN)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE a[N];\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      a[i] = i + 1;\t\t\t\t\t\t\\\n+    test_##TYPE (a, N);\t\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tdouble diff = a[i] - 1.0 / __builtin_sqrt (i + 1);\t\\\n+\tif (__builtin_fabs (diff) > 0x1.0p-8)\t\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (TEST_LOOP);\n+  return 0;\n+}"}, {"sha": "aba2bf6e481e04a77fd1e57189507c49fab37a4b", "filename": "gcc/testsuite/gcc.target/aarch64/sve/sqrt_1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0ee8352df6f4cd98830c8dbaa969e1cda39cc40/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsqrt_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0ee8352df6f4cd98830c8dbaa969e1cda39cc40/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsqrt_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsqrt_1.c?ref=a0ee8352df6f4cd98830c8dbaa969e1cda39cc40", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-options \"-Ofast -mlow-precision-sqrt\" } */\n+\n+#define DEF_LOOP(TYPE, FN)\t\t\\\n+  void\t\t\t\t\t\\\n+  test_##TYPE (TYPE *x, int n)\t\t\\\n+  {\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\\\n+      x[i] = FN (x[i]);\t\t\t\\\n+  }\n+\n+#define TEST_ALL(T)\t\t\t\\\n+  T (_Float16, __builtin_sqrtf16)\t\\\n+  T (float, __builtin_sqrtf)\t\t\\\n+  T (double, __builtin_sqrt)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler {\\tfsqrt\\tz[0-9]+\\.h} } } */\n+/* { dg-final { scan-assembler-not {\\tfrsqrte\\tz[0-9]+\\.h} } } */\n+/* { dg-final { scan-assembler-not {\\tfrsqrts\\tz[0-9]+\\.h} } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.s, p[0-7]/z} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.s} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tfrsqrte\\tz[0-9]+\\.s} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfrsqrts\\tz[0-9]+\\.s} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.d, p[0-7]/z} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.d} 5 } } */\n+/* { dg-final { scan-assembler-times {\\tfrsqrte\\tz[0-9]+\\.d} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfrsqrts\\tz[0-9]+\\.d} 2 } } */"}, {"sha": "30906ceb1e273da8ba0914edb24b48b604e7e934", "filename": "gcc/testsuite/gcc.target/aarch64/sve/sqrt_1_run.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0ee8352df6f4cd98830c8dbaa969e1cda39cc40/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsqrt_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0ee8352df6f4cd98830c8dbaa969e1cda39cc40/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsqrt_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsqrt_1_run.c?ref=a0ee8352df6f4cd98830c8dbaa969e1cda39cc40", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-Ofast -mlow-precision-sqrt\" } */\n+\n+#include \"sqrt_1.c\"\n+\n+#define N 77\n+\n+#define TEST_LOOP(TYPE, FN)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    TYPE a[N];\t\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\\\n+      a[i] = i;\t\t\t\t\t\t\\\n+    test_##TYPE (a, N);\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\\\n+\tdouble diff = a[i] - __builtin_sqrt (i);\t\\\n+\tif (__builtin_fabs (diff) > 0x1.0p-8)\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (TEST_LOOP);\n+  return 0;\n+}"}]}