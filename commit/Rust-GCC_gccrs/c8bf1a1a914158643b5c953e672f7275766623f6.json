{"sha": "c8bf1a1a914158643b5c953e672f7275766623f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzhiZjFhMWE5MTQxNTg2NDNiNWM5NTNlNjcyZjcyNzU3NjY2MjNmNg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2002-09-04T20:32:35Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2002-09-04T20:32:35Z"}, "message": "ip2k-protos.h (function_prologue, [...]): Update to match target hook specification.\n\n\t* ip2k-protos.h (function_prologue, function_epilogue,\n\tencode_section_info): Update to match target hook specification.\n\t* ip2k.c: Wrap `MDR' code in IP2K_MD_REORG_PASS.\n\t(function_prologue, function_epilogue, encode_section_info):\n\tUpdate to match target hook specification.\n\t* ip2k.h (SELECT_SECTION, SELECT_RTX_SECTION, ASM_OPEN_PAREN,\n\tASM_CLOSE_PAREN, EASY_DIV_EXPR): Delete.\n\t(NOTICE_UPDATE_CC): Cast to void.\n\t* ip2k.md: Add defaults in switch statements.\n\nFrom-SVN: r56809", "tree": {"sha": "2e35c3466065987639ca724aef0921bd3640bbc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e35c3466065987639ca724aef0921bd3640bbc4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8bf1a1a914158643b5c953e672f7275766623f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8bf1a1a914158643b5c953e672f7275766623f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8bf1a1a914158643b5c953e672f7275766623f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8bf1a1a914158643b5c953e672f7275766623f6/comments", "author": null, "committer": null, "parents": [{"sha": "0484cb35dee99de154acb8302d0ecd2983724cb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0484cb35dee99de154acb8302d0ecd2983724cb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0484cb35dee99de154acb8302d0ecd2983724cb2"}], "stats": {"total": 128, "additions": 71, "deletions": 57}, "files": [{"sha": "1ad470129b46fea481c44b8bcfe353929711c829", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8bf1a1a914158643b5c953e672f7275766623f6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8bf1a1a914158643b5c953e672f7275766623f6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c8bf1a1a914158643b5c953e672f7275766623f6", "patch": "@@ -1,3 +1,15 @@\n+2002-09-04  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* ip2k-protos.h (function_prologue, function_epilogue,\n+\tencode_section_info): Update to match target hook specification.\n+\t* ip2k.c: Wrap `MDR' code in IP2K_MD_REORG_PASS.\n+\t(function_prologue, function_epilogue, encode_section_info):\n+\tUpdate to match target hook specification.\n+\t* ip2k.h (SELECT_SECTION, SELECT_RTX_SECTION, ASM_OPEN_PAREN,\n+\tASM_CLOSE_PAREN, EASY_DIV_EXPR): Delete.\n+\t(NOTICE_UPDATE_CC): Cast to void.\n+\t* ip2k.md: Add defaults in switch statements.\n+\n 2002-09-04  Janis Johnson  <janis187@us.ibm.com>\n \n \t* doc/trouble.texi (Interoperation): Update information about C++ ABI"}, {"sha": "2ec040007a1e76f8ba5ff1dc165db2415826d129", "filename": "gcc/config/ip2k/ip2k-protos.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8bf1a1a914158643b5c953e672f7275766623f6/gcc%2Fconfig%2Fip2k%2Fip2k-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8bf1a1a914158643b5c953e672f7275766623f6/gcc%2Fconfig%2Fip2k%2Fip2k-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fip2k%2Fip2k-protos.h?ref=c8bf1a1a914158643b5c953e672f7275766623f6", "patch": "@@ -21,14 +21,14 @@\n extern void asm_file_start PARAMS ((FILE *));\n extern void asm_file_end PARAMS ((FILE *));\n \n-extern void function_prologue PARAMS ((FILE *, int));\n-extern void function_epilogue PARAMS ((FILE *, int));\n+extern void function_prologue PARAMS ((FILE *, HOST_WIDE_INT));\n+extern void function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n extern int find_one_set_bit_p PARAMS ((HOST_WIDE_INT));\n extern int find_one_clear_bit_p PARAMS ((HOST_WIDE_INT));\n \n #ifdef TREE_CODE\n extern void unique_section PARAMS ((tree, int));\n-extern void encode_section_info PARAMS ((tree));\n+extern void encode_section_info PARAMS ((tree, int));\n extern void asm_output_section_name PARAMS ((FILE *, tree, const char *,\n \t\t\t\t\t     int));\n extern int valid_machine_type_attribute PARAMS ((tree, tree, tree, tree));"}, {"sha": "6d715289e3e9c6036c29bdc479d16ab97bc0a47a", "filename": "gcc/config/ip2k/ip2k.c", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8bf1a1a914158643b5c953e672f7275766623f6/gcc%2Fconfig%2Fip2k%2Fip2k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8bf1a1a914158643b5c953e672f7275766623f6/gcc%2Fconfig%2Fip2k%2Fip2k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fip2k%2Fip2k.c?ref=c8bf1a1a914158643b5c953e672f7275766623f6", "patch": "@@ -52,24 +52,26 @@\n #define CHAIN_FRAMES (frame_pointer_needed || FRAME_POINTER_REQUIRED)\n \n static int ip2k_naked_function_p PARAMS ((tree));\n+#ifdef IP2K_MD_REORG_PASS\n static void mdr_resequence_xy_yx PARAMS ((rtx));\n static void mdr_pres_replace_and_recurse PARAMS ((rtx, rtx, rtx));\n static void mdr_propagate_reg_equivs_sequence PARAMS ((rtx, rtx, rtx));\n static void mdr_propagate_reg_equivs PARAMS ((rtx));\n static int track_dp_reload PARAMS ((rtx , rtx *, int , int));\n static void mdr_try_dp_reload_elim PARAMS ((rtx));\n static void mdr_try_move_dp_reload PARAMS ((rtx));\n-static int ip2k_check_can_adjust_stack_ref PARAMS ((rtx, int));\n-static void ip2k_adjust_stack_ref PARAMS ((rtx *, int));\n static void mdr_try_move_pushes PARAMS ((rtx));\n-static int ip2k_xexp_not_uses_reg_for_mem PARAMS ((rtx, unsigned int));\n static void mdr_try_propagate_clr_sequence PARAMS ((rtx, unsigned int));\n static void mdr_try_propagate_clr PARAMS ((rtx));\n static void mdr_try_propagate_move_sequence PARAMS ((rtx, rtx, rtx));\n static void mdr_try_propagate_move PARAMS ((rtx));\n static void mdr_try_remove_redundant_insns PARAMS ((rtx));\n static int track_w_reload PARAMS ((rtx, rtx *, int , int));\n static void mdr_try_wreg_elim PARAMS ((rtx));\n+#endif /* IP2K_MD_REORG_PASS */\n+static int ip2k_check_can_adjust_stack_ref PARAMS ((rtx, int));\n+static void ip2k_adjust_stack_ref PARAMS ((rtx *, int));\n+static int ip2k_xexp_not_uses_reg_for_mem PARAMS ((rtx, unsigned int));\n \n \n /* Initialize the GCC target structure.  */\n@@ -175,7 +177,7 @@ ip2k_naked_function_p (func)\n void\n function_prologue (file, size)\n      FILE *file;\n-     int size;\n+     HOST_WIDE_INT size;\n {\n   int leaf_func_p;\n   int main_p;\n@@ -297,7 +299,7 @@ function_prologue (file, size)\n void\n function_epilogue (file, size)\n      FILE *file;\n-     int size;\n+     HOST_WIDE_INT size;\n {\n   int leaf_func_p;\n   int reg,savelimit;\n@@ -3178,8 +3180,9 @@ valid_machine_decl_attribute (decl, attributes, attr, args)\n /* Encode section information about tree DECL.  */\n   \n void\n-encode_section_info (decl)\n+encode_section_info (decl, first)\n      tree decl;\n+     int first ATTRIBUTE_UNUSED;\n {\n   if (! DECL_P (decl))\n     return;\n@@ -3366,6 +3369,7 @@ ip2k_address_cost (x)\n    much cheaper and the move from this to the original source operand will be\n    no more expensive than the original move.  */\n \n+#ifdef IP2K_MD_REORG_PASS\n static void\n mdr_resequence_xy_yx (first_insn)\n      rtx first_insn;\n@@ -4111,6 +4115,7 @@ mdr_try_move_dp_reload (first_insn)\n \t}\n     }\n }\n+#endif /* IP2K_MD_REORG_PASS */\n \n /* Look to see if the expression, x, can have any stack references offset by\n    a fixed constant, offset.  If it definitely can then returns non-zero.  */\n@@ -4204,6 +4209,7 @@ ip2k_adjust_stack_ref (x, offset)\n     }\n }\n \n+#ifdef IP2K_MD_REORG_PASS\n /* As part of the machine-dependent reorg we look to move push instructions\n    to earlier points within the file.  Moving these out of the way allows more\n    peepholes to match.  */\n@@ -4647,6 +4653,7 @@ mdr_try_propagate_clr (first_insn)\n \t}\n     }\n }\n+#endif /* IP2K_MD_REORG_PASS */\n \n /* Look to see if the expression, x, does not make any memory references\n    via the specified register.  This is very conservative and only returns\n@@ -4704,6 +4711,7 @@ ip2k_xexp_not_uses_reg_for_mem (x, regno)\n     }\n }\n \n+#ifdef IP2K_MD_REORG_PASS\n /* Assist the following function, mdr_try_propagate_move().  */\n \n static void\n@@ -5260,6 +5268,7 @@ mdr_try_wreg_elim (first_insn)\n \n   free (ip2k_we_jump_targets);\n }\n+#endif /* IP2K_MD_REORG_PASS */\n \n /* We perform a lot of untangling of the RTL within the reorg pass since\n    the IP2k requires some really bizarre (and really undesireable) things\n@@ -5269,9 +5278,11 @@ mdr_try_wreg_elim (first_insn)\n \n void\n machine_dependent_reorg (first_insn)\n-     rtx first_insn;\n+     rtx first_insn ATTRIBUTE_UNUSED;\n {\n+#ifdef IP2K_MD_REORG_PASS\n   rtx insn, set;\n+#endif\n \n   CC_STATUS_INIT;\n "}, {"sha": "cda748744d2602693f13efc05d3c556144d9179b", "filename": "gcc/config/ip2k/ip2k.h", "status": "modified", "additions": 1, "deletions": 46, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8bf1a1a914158643b5c953e672f7275766623f6/gcc%2Fconfig%2Fip2k%2Fip2k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8bf1a1a914158643b5c953e672f7275766623f6/gcc%2Fconfig%2Fip2k%2Fip2k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fip2k%2Fip2k.h?ref=c8bf1a1a914158643b5c953e672f7275766623f6", "patch": "@@ -1960,30 +1960,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n    operation to identify the following data as writable initialized\n    data.  Normally `\".data\"' is right.  */\n \n-\n-#undef SELECT_SECTION\t\t/* Hide default.  */\n-#define SELECT_SECTION(EXP,RELOC)\tdata_section ()\n-/* `SELECT_SECTION (EXP, RELOC)'\n-   A C statement or statements to switch to the appropriate section\n-   for output of EXP.  You can assume that EXP is either a `VAR_DECL'\n-   node or a constant of some sort.  RELOC indicates whether the\n-   initial value of EXP requires link-time relocations.  Select the\n-   section by calling `text_section' or one of the alternatives for\n-   other sections.\n-\n-   Do not define this macro if you put all read-only variables and\n-   constants in the read-only data section (usually the text section).  */\n-\n-/* `SELECT_RTX_SECTION (MODE, RTX)'\n-   A C statement or statements to switch to the appropriate section\n-   for output of RTX in mode MODE.  You can assume that RTX is some\n-   kind of constant in RTL.  The argument MODE is redundant except in\n-   the case of a `const_int' rtx.  Select the section by calling\n-   `text_section' or one of the alternatives for other sections.\n-\n-   Do not define this macro if you put all constants in the read-only\n-   data section.  */\n-\n #define JUMP_TABLES_IN_TEXT_SECTION 1\n /* Define this macro if jump tables (for `tablejump' insns) should be\n    output in the text section, along with the assembler instructions.\n@@ -2073,18 +2049,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n    If you do not define this macro, the default is that only the\n    character `;' is treated as a logical line separator.  */\n \n-#define ASM_OPEN_PAREN \"(\"\n-#define ASM_CLOSE_PAREN \")\"\n-/* These macros are defined as C string constant, describing the\n-   syntax in the assembler for grouping arithmetic expressions.  The\n-   following definitions are correct for most assemblers:\n-\n-   #define ASM_OPEN_PAREN \"(\"\n-   #define ASM_CLOSE_PAREN \")\"\n-\n-   These macros are provided by `real.h' for writing the definitions of\n-   `ASM_OUTPUT_DOUBLE' and the like:  */\n-\n #define ASM_OUTPUT_COMMON(STREAM, NAME, SIZE, ROUNDED)\t\\\n do {\t\t\t\t\t\t\t\\\n      fputs (\"\\t.comm \", (STREAM));\t\t\t\\\n@@ -2335,15 +2299,6 @@ do {\t\t\t\t\t\t\t\\\n    register.  Most RISC machines have this property and most CISC\n    machines do not.  */\n \n-#define EASY_DIV_EXPR TRUNC_DIV_EXPR\n-/* An alias for a tree code that is the easiest kind of division to\n-   compile code for in the general case.  It may be `TRUNC_DIV_EXPR',\n-   `FLOOR_DIV_EXPR', `CEIL_DIV_EXPR' or `ROUND_DIV_EXPR'.  These four\n-   division operators differ in how they round the result to an\n-   integer.  `EASY_DIV_EXPR' is used when it is permissible to use\n-   any of those kinds of division and the choice should be made on\n-   the basis of efficiency.  */\n-\n #define MOVE_MAX 1\n /* The maximum number of bytes that a single instruction can move\n    quickly between memory and registers or between two memory\n@@ -2472,7 +2427,7 @@ extern int ip2k_reorg_merge_qimode;\n    after execution of an instruction whose pattern is EXP.\n    Do not alter them if the instruction would not alter the cc's.  */\n \n-#define NOTICE_UPDATE_CC(EXP, INSN) (0)\n+#define NOTICE_UPDATE_CC(EXP, INSN) (void)(0)\n \n /* Output assembler code to FILE to increment profiler label # LABELNO\n    for profiling a function entry.  */"}, {"sha": "cc64a43f2b993ed4c0c2ff92cf004e74c38f71c7", "filename": "gcc/config/ip2k/ip2k.md", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8bf1a1a914158643b5c953e672f7275766623f6/gcc%2Fconfig%2Fip2k%2Fip2k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8bf1a1a914158643b5c953e672f7275766623f6/gcc%2Fconfig%2Fip2k%2Fip2k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fip2k%2Fip2k.md?ref=c8bf1a1a914158643b5c953e672f7275766623f6", "patch": "@@ -387,6 +387,8 @@\n         if (!find_regno_note (insn, REG_DEAD, REG_IP))\n \t  OUT_AS1 (dec, ipl);\n \treturn \\\"\\\";\n+      default:\n+        abort ();\n       }\n   }\")\n \n@@ -414,6 +416,8 @@\n         if (!find_regno_note (insn, REG_DEAD, REG_IP))\n \t  OUT_AS1 (dec, ipl);\n \treturn \\\"\\\";\n+      default:\n+        abort ();\n       }\n   }\")\n \n@@ -457,6 +461,8 @@\n               OUT_AS2 (sub, ipl, w);\n \t  }\n         return \\\"\\\";\n+      default:\n+        abort ();\n       }\n   }\")\n \n@@ -620,6 +626,8 @@\n \t       AS2 (mov, %L0, w) CR_TAB\n \t       AS1 (pop, %H2%>) CR_TAB\n \t       AS2 (mov, %L2, w);\n+      default:\n+        abort ();\n       }\n   }\")\n \n@@ -726,7 +734,9 @@\n \t       AS1 (pop, %B2%>) CR_TAB\n \t       AS1 (pop, %C2%>) CR_TAB\n \t       AS2 (mov, %D2, w);\n-      }\n+      default:\n+        abort ();\n+     }\n   }\")\n \n ;; We have to be *very* careful with this one to use predicates that do not \n@@ -981,6 +991,8 @@\n \t  p += sprintf (p, \\\"\\;and\\\\tw,#$%2.2x\\;or\\\\t%%0,w\\\", mask);\n \t  return buff;\n         }\n+      default:\n+        abort ();\n       }\n   }\"\n   [(set_attr \"skip\" \"yes,yes,no,no,no,no,no\")\n@@ -1145,6 +1157,8 @@\n \t       AS2 (mov, w, %H1) CR_TAB\n \t       AS2 (addc, 1(SP), w);\n       }\n+    default:\n+      abort ();\n     }\n   }\"\n   [(set_attr \"clobberw\" \"no,yes,yes,yes,yes,yes,yes,yes\")])\n@@ -2050,6 +2064,8 @@\n \t     AS2 (mov, %A0, w) CR_TAB\n \t     AS2 (mov, w, %A2) CR_TAB\n \t     AS2 (subc, %A0, w);\n+    default:\n+      abort ();\n     }\n   }\")\n \n@@ -2214,6 +2230,8 @@\n \t     AS2 (mov, %S0, w) CR_TAB\n \t     AS2 (mov, w, %S2) CR_TAB\n \t     AS2 (subc, %S0, w);\n+    default:\n+      abort ();\n     }\n   }\")\n \n@@ -3338,6 +3356,8 @@\n \t       AS1 (page, 1b) CR_TAB\n \t       AS1 (jmp, 1b);\n       }\n+    default:\n+      abort ();\n     }\n   }\")\n \n@@ -3782,6 +3802,8 @@\n \t       AS1 (page, 1b) CR_TAB\n \t       AS1 (jmp, 1b);\n       }\n+    default:\n+      abort ();\n     }\n   }\")\n \n@@ -3848,6 +3870,8 @@\n        \t       AS2 (mulu, w, %e2) CR_TAB\n \t       AS2 (mov, w, mulh) CR_TAB\n \t       AS2 (mov, %0, w);\n+      default:\n+        abort ();\n       }\n   }\")\n \n@@ -4202,6 +4226,8 @@\n \t       AS1 (page, 1b) CR_TAB\n \t       AS1 (jmp, 1b);\n       }\n+    default:\n+      abort ();\n     }\n   }\")\n \n@@ -4425,6 +4451,8 @@\n \t       AS2 (mov, %L0, w) CR_TAB\n \t       AS2 (mov, w, %H1) CR_TAB\n \t       AS2 (mov, %H0, w);\n+      default:\n+        abort ();\n       }\n   }\")\n \n@@ -5287,6 +5315,8 @@\n         OUT_AS2 (mov, w, %1);\n \tOUT_AS2 (add, w, %5);\n \tbreak;\n+      default:\n+        abort ();\n       }\n \n     OUT_AS2 (cmp, w, %2);\n@@ -5315,6 +5345,8 @@\n \tOUT_AS1 (page, __indcall);\n \tOUT_AS1 (jmp, __indcall%>%>);\n \treturn \\\"\\\";\n+      default:\n+        abort ();\n       }\n   }\")\n \n@@ -5595,6 +5627,8 @@\n           OUT_AS1 (sz, );\n         return AS1 (page, %2) CR_TAB\n                AS1 (jmp, %2);\n+      default:\n+        abort ();\n       }\n   }\")\n \n@@ -5641,6 +5675,8 @@\n           OUT_AS1 (sz, );\n         return AS1 (page, %2) CR_TAB\n                AS1 (jmp, %2);\n+      default:\n+        abort ();\n       }\n   }\")\n "}]}