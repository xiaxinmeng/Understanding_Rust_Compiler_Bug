{"sha": "4a3e25712f25271876e83dfafe8ff2df4f643df7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGEzZTI1NzEyZjI1MjcxODc2ZTgzZGZhZmU4ZmYyZGY0ZjY0M2RmNw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-02-07T04:45:01Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-02-07T04:45:01Z"}, "message": "os, net, crypto/x509: add hurd support\n    \n    Patch by Svante Signell.\n    \n    Reviewed-on: https://go-review.googlesource.com/c/161519\n\nFrom-SVN: r268604", "tree": {"sha": "f08bcfb2d4ad242945fd0534e39ed5753e4aab62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f08bcfb2d4ad242945fd0534e39ed5753e4aab62"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a3e25712f25271876e83dfafe8ff2df4f643df7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a3e25712f25271876e83dfafe8ff2df4f643df7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a3e25712f25271876e83dfafe8ff2df4f643df7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a3e25712f25271876e83dfafe8ff2df4f643df7/comments", "author": null, "committer": null, "parents": [{"sha": "4321f202f985f659e0150ee72ed3e14e554f9735", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4321f202f985f659e0150ee72ed3e14e554f9735", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4321f202f985f659e0150ee72ed3e14e554f9735"}], "stats": {"total": 79, "additions": 77, "deletions": 2}, "files": [{"sha": "b7efb211ca505b2f82cc42c4e334b0a658582b67", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a3e25712f25271876e83dfafe8ff2df4f643df7/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a3e25712f25271876e83dfafe8ff2df4f643df7/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=4a3e25712f25271876e83dfafe8ff2df4f643df7", "patch": "@@ -1,4 +1,4 @@\n-db618eeabdcf1ba56861d21d5639ca4514cd6934\n+28b65174d9c9163f4ab2cfaf70dca646f1a7611f\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "59e9ff0c81bf53ef716f8308cc3767bdf8d67161", "filename": "libgo/go/crypto/x509/root_hurd.go", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a3e25712f25271876e83dfafe8ff2df4f643df7/libgo%2Fgo%2Fcrypto%2Fx509%2Froot_hurd.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a3e25712f25271876e83dfafe8ff2df4f643df7/libgo%2Fgo%2Fcrypto%2Fx509%2Froot_hurd.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Fx509%2Froot_hurd.go?ref=4a3e25712f25271876e83dfafe8ff2df4f643df7", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+// This file is derived from root_linux.go\n+\n+package x509\n+\n+// Possible certificate files; stop after finding one.\n+var certFiles = []string{\n+\t\"/etc/ssl/certs/ca-certificates.crt\", // Debian/Ubuntu/Gentoo etc.\n+}"}, {"sha": "6652e3fedc104a99f1e4c782eb96025726962be3", "filename": "libgo/go/internal/poll/sendfile_glibc.go", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a3e25712f25271876e83dfafe8ff2df4f643df7/libgo%2Fgo%2Finternal%2Fpoll%2Fsendfile_glibc.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a3e25712f25271876e83dfafe8ff2df4f643df7/libgo%2Fgo%2Finternal%2Fpoll%2Fsendfile_glibc.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Finternal%2Fpoll%2Fsendfile_glibc.go?ref=4a3e25712f25271876e83dfafe8ff2df4f643df7", "patch": "@@ -2,6 +2,8 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n+// +build hurd linux\n+\n package poll\n \n import \"syscall\"", "previous_filename": "libgo/go/internal/poll/sendfile_linux.go"}, {"sha": "98e4cfa6352640cfcff853219e4251a8ed98d515", "filename": "libgo/go/net/cgo_hurd.go", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a3e25712f25271876e83dfafe8ff2df4f643df7/libgo%2Fgo%2Fnet%2Fcgo_hurd.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a3e25712f25271876e83dfafe8ff2df4f643df7/libgo%2Fgo%2Fnet%2Fcgo_hurd.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fcgo_hurd.go?ref=4a3e25712f25271876e83dfafe8ff2df4f643df7", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+// This file is derived from cgo_bsd.go\n+\n+// +build cgo,!netgo\n+// +build hurd\n+\n+package net\n+\n+/*\n+#include <netdb.h>\n+*/\n+\n+import \"syscall\"\n+\n+const cgoAddrInfoFlags = syscall.AI_CANONNAME | syscall.AI_V4MAPPED | syscall.AI_ALL"}, {"sha": "a71cfc961c26b41dcb6be87ab2b329f4c67b9f9d", "filename": "libgo/go/net/sendfile_glibc.go", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a3e25712f25271876e83dfafe8ff2df4f643df7/libgo%2Fgo%2Fnet%2Fsendfile_glibc.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a3e25712f25271876e83dfafe8ff2df4f643df7/libgo%2Fgo%2Fnet%2Fsendfile_glibc.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fsendfile_glibc.go?ref=4a3e25712f25271876e83dfafe8ff2df4f643df7", "patch": "@@ -2,6 +2,8 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n+// +build hurd linux\n+\n package net\n \n import (", "previous_filename": "libgo/go/net/sendfile_linux.go"}, {"sha": "c6de7a9a1f0cf8b5e23af85a9da70b115bde2830", "filename": "libgo/go/net/sockopt_hurd.go", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a3e25712f25271876e83dfafe8ff2df4f643df7/libgo%2Fgo%2Fnet%2Fsockopt_hurd.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a3e25712f25271876e83dfafe8ff2df4f643df7/libgo%2Fgo%2Fnet%2Fsockopt_hurd.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fsockopt_hurd.go?ref=4a3e25712f25271876e83dfafe8ff2df4f643df7", "patch": "@@ -0,0 +1,41 @@\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package net\n+\n+import (\n+\t\"os\"\n+\t\"syscall\"\n+)\n+\n+func setDefaultSockopts(s, family, sotype int, ipv6only bool) error {\n+\tif family == syscall.AF_INET6 && sotype != syscall.SOCK_RAW {\n+\t\t// Allow both IP versions even if the OS default\n+\t\t// is otherwise. Note that some operating systems\n+\t\t// never admit this option.\n+\t\tsyscall.SetsockoptInt(s, syscall.IPPROTO_IPV6, syscall.IPV6_V6ONLY, boolint(ipv6only))\n+\t}\n+\t// Allow broadcast.\n+\tif err := syscall.SetsockoptInt(s, syscall.SOL_SOCKET, syscall.SO_BROADCAST, 1); err != nil {\n+\t\treturn os.NewSyscallError(\"setsockopt\", err)\n+\t}\n+\treturn nil\n+}\n+\n+func setDefaultListenerSockopts(s int) error {\n+\t// Allow reuse of recently-used addresses.\n+\tif err := syscall.SetsockoptInt(s, syscall.SOL_SOCKET, syscall.SO_REUSEADDR, 1); err != nil {\n+\t\treturn os.NewSyscallError(\"setsockopt\", err)\n+\t}\n+\treturn nil\n+}\n+\n+func setDefaultMulticastSockopts(s int) error {\n+\t// Allow multicast UDP and raw IP datagram sockets to listen\n+\t// concurrently across multiple listeners.\n+\tif err := syscall.SetsockoptInt(s, syscall.SOL_SOCKET, syscall.SO_REUSEADDR, 1); err != nil {\n+\t\treturn os.NewSyscallError(\"setsockopt\", err)\n+\t}\n+\treturn nil\n+}"}, {"sha": "e690103b0adf8a1272fbbd07c045c1589caeef20", "filename": "libgo/go/os/executable_procfs.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a3e25712f25271876e83dfafe8ff2df4f643df7/libgo%2Fgo%2Fos%2Fexecutable_procfs.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a3e25712f25271876e83dfafe8ff2df4f643df7/libgo%2Fgo%2Fos%2Fexecutable_procfs.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fos%2Fexecutable_procfs.go?ref=4a3e25712f25271876e83dfafe8ff2df4f643df7", "patch": "@@ -19,7 +19,7 @@ var executablePath, executablePathErr = func() (string, error) {\n \tswitch runtime.GOOS {\n \tdefault:\n \t\treturn \"\", errors.New(\"Executable not implemented for \" + runtime.GOOS)\n-\tcase \"linux\", \"android\":\n+\tcase \"hurd\", \"linux\", \"android\":\n \t\tprocfn = \"/proc/self/exe\"\n \tcase \"netbsd\":\n \t\tprocfn = \"/proc/curproc/exe\""}, {"sha": "31b144e92c7eea655a76f24df03675234356166d", "filename": "libgo/go/os/pipe_glibc.go", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a3e25712f25271876e83dfafe8ff2df4f643df7/libgo%2Fgo%2Fos%2Fpipe_glibc.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a3e25712f25271876e83dfafe8ff2df4f643df7/libgo%2Fgo%2Fos%2Fpipe_glibc.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fos%2Fpipe_glibc.go?ref=4a3e25712f25271876e83dfafe8ff2df4f643df7", "patch": "@@ -2,6 +2,8 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n+// +build hurd linux\n+\n package os\n \n import \"syscall\"", "previous_filename": "libgo/go/os/pipe_linux.go"}]}