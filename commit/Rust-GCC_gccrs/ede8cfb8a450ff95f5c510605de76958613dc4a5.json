{"sha": "ede8cfb8a450ff95f5c510605de76958613dc4a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWRlOGNmYjhhNDUwZmY5NWY1YzUxMDYwNWRlNzY5NTg2MTNkYzRhNQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-11-09T10:26:24Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-11-09T13:07:01Z"}, "message": "CSE VN_INFO calls in PRE and VN\n\nThe following CSEs VN_INFO calls which nowadays are hashtable queries.\n\n2020-11-09  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-pre.c (get_representative_for): CSE VN_INFO calls.\n\t(create_expression_by_pieces): Likewise.\n\t(insert_into_preds_of_block): Likewsie.\n\t(do_pre_regular_insertion): Likewsie.\n\t* tree-ssa-sccvn.c (eliminate_dom_walker::eliminate_insert):\n\tLikewise.\n\t(eliminate_dom_walker::eliminate_stmt): Likewise.", "tree": {"sha": "70f5b46ed576e5f618cb83304d63941abd9ae97a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70f5b46ed576e5f618cb83304d63941abd9ae97a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ede8cfb8a450ff95f5c510605de76958613dc4a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ede8cfb8a450ff95f5c510605de76958613dc4a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ede8cfb8a450ff95f5c510605de76958613dc4a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ede8cfb8a450ff95f5c510605de76958613dc4a5/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17c25a454e056f4677649a5ed4a8b8587d29177c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17c25a454e056f4677649a5ed4a8b8587d29177c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17c25a454e056f4677649a5ed4a8b8587d29177c"}], "stats": {"total": 59, "additions": 34, "deletions": 25}, "files": [{"sha": "fec3b2f80f15ad93d35c3d813acc53c68d9b937f", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 24, "deletions": 19, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ede8cfb8a450ff95f5c510605de76958613dc4a5/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ede8cfb8a450ff95f5c510605de76958613dc4a5/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=ede8cfb8a450ff95f5c510605de76958613dc4a5", "patch": "@@ -1343,10 +1343,11 @@ get_representative_for (const pre_expr e, basic_block b = NULL)\n      ???  We should be able to re-use this when we insert the statement\n      to compute it.  */\n   name = make_temp_ssa_name (get_expr_type (e), gimple_build_nop (), \"pretmp\");\n-  VN_INFO (name)->value_id = value_id;\n-  VN_INFO (name)->valnum = valnum ? valnum : name;\n+  vn_ssa_aux_t vn_info = VN_INFO (name);\n+  vn_info->value_id = value_id;\n+  vn_info->valnum = valnum ? valnum : name;\n   /* ???  For now mark this SSA name for release by VN.  */\n-  VN_INFO (name)->needs_insertion = true;\n+  vn_info->needs_insertion = true;\n   add_to_value (value_id, get_or_alloc_expr_for_name (name));\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n@@ -2990,10 +2991,11 @@ create_expression_by_pieces (basic_block block, pre_expr expr,\n \n \t  if (forcedname != folded)\n \t    {\n-\t      VN_INFO (forcedname)->valnum = forcedname;\n-\t      VN_INFO (forcedname)->value_id = get_next_value_id ();\n+\t      vn_ssa_aux_t vn_info = VN_INFO (forcedname);\n+\t      vn_info->valnum = forcedname;\n+\t      vn_info->value_id = get_next_value_id ();\n \t      nameexpr = get_or_alloc_expr_for_name (forcedname);\n-\t      add_to_value (VN_INFO (forcedname)->value_id, nameexpr);\n+\t      add_to_value (vn_info->value_id, nameexpr);\n \t      bitmap_value_replace_in_set (NEW_SETS (block), nameexpr);\n \t      bitmap_value_replace_in_set (AVAIL_OUT (block), nameexpr);\n \t    }\n@@ -3016,11 +3018,12 @@ create_expression_by_pieces (basic_block block, pre_expr expr,\n      the expression may have been represented.  There is no harm in replacing\n      here.  */\n   value_id = get_expr_value_id (expr);\n-  VN_INFO (name)->value_id = value_id;\n-  VN_INFO (name)->valnum = vn_valnum_from_value_id (value_id);\n-  if (VN_INFO (name)->valnum == NULL_TREE)\n-    VN_INFO (name)->valnum = name;\n-  gcc_assert (VN_INFO (name)->valnum != NULL_TREE);\n+  vn_ssa_aux_t vn_info = VN_INFO (name);\n+  vn_info->value_id = value_id;\n+  vn_info->valnum = vn_valnum_from_value_id (value_id);\n+  if (vn_info->valnum == NULL_TREE)\n+    vn_info->valnum = name;\n+  gcc_assert (vn_info->valnum != NULL_TREE);\n   nameexpr = get_or_alloc_expr_for_name (name);\n   add_to_value (value_id, nameexpr);\n   if (NEW_SETS (block))\n@@ -3122,10 +3125,11 @@ insert_into_preds_of_block (basic_block block, unsigned int exprnum,\n   temp = make_temp_ssa_name (type, NULL, \"prephitmp\");\n   phi = create_phi_node (temp, block);\n \n-  VN_INFO (temp)->value_id = val;\n-  VN_INFO (temp)->valnum = vn_valnum_from_value_id (val);\n-  if (VN_INFO (temp)->valnum == NULL_TREE)\n-    VN_INFO (temp)->valnum = temp;\n+  vn_ssa_aux_t vn_info = VN_INFO (temp);\n+  vn_info->value_id = val;\n+  vn_info->valnum = vn_valnum_from_value_id (val);\n+  if (vn_info->valnum == NULL_TREE)\n+    vn_info->valnum = temp;\n   bitmap_set_bit (inserted_exprs, SSA_NAME_VERSION (temp));\n   FOR_EACH_EDGE (pred, ei, block->preds)\n     {\n@@ -3367,10 +3371,11 @@ do_pre_regular_insertion (basic_block block, basic_block dom)\n \t      gimple_stmt_iterator gsi = gsi_after_labels (block);\n \t      gsi_insert_before (&gsi, assign, GSI_NEW_STMT);\n \n-\t      VN_INFO (temp)->value_id = val;\n-\t      VN_INFO (temp)->valnum = vn_valnum_from_value_id (val);\n-\t      if (VN_INFO (temp)->valnum == NULL_TREE)\n-\t\tVN_INFO (temp)->valnum = temp;\n+\t      vn_ssa_aux_t vn_info = VN_INFO (temp);\n+\t      vn_info->value_id = val;\n+\t      vn_info->valnum = vn_valnum_from_value_id (val);\n+\t      if (vn_info->valnum == NULL_TREE)\n+\t\tvn_info->valnum = temp;\n \t      bitmap_set_bit (inserted_exprs, SSA_NAME_VERSION (temp));\n \t      pre_expr newe = get_or_alloc_expr_for_name (temp);\n \t      add_to_value (val, newe);"}, {"sha": "24bbd8d283ff66f3a5b50c14f15cdfea036621b8", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ede8cfb8a450ff95f5c510605de76958613dc4a5/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ede8cfb8a450ff95f5c510605de76958613dc4a5/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=ede8cfb8a450ff95f5c510605de76958613dc4a5", "patch": "@@ -5843,8 +5843,9 @@ eliminate_dom_walker::eliminate_insert (basic_block bb,\n   else\n     {\n       gsi_insert_seq_before (gsi, stmts, GSI_SAME_STMT);\n-      VN_INFO (res)->valnum = val;\n-      VN_INFO (res)->visited = true;\n+      vn_ssa_aux_t vn_info = VN_INFO (res);\n+      vn_info->valnum = val;\n+      vn_info->visited = true;\n     }\n \n   insertions++;\n@@ -5884,10 +5885,12 @@ eliminate_dom_walker::eliminate_stmt (basic_block b, gimple_stmt_iterator *gsi)\n \t     it has an expression it wants to use as replacement,\n \t     insert that.  */\n \t  tree val = VN_INFO (lhs)->valnum;\n+\t  vn_ssa_aux_t vn_info;\n \t  if (val != VN_TOP\n \t      && TREE_CODE (val) == SSA_NAME\n-\t      && VN_INFO (val)->needs_insertion\n-\t      && VN_INFO (val)->expr != NULL\n+\t      && (vn_info = VN_INFO (val), true)\n+\t      && vn_info->needs_insertion\n+\t      && vn_info->expr != NULL\n \t      && (sprime = eliminate_insert (b, gsi, val)) != NULL_TREE)\n \t    eliminate_push_avail (b, sprime);\n \t}\n@@ -6274,8 +6277,9 @@ eliminate_dom_walker::eliminate_stmt (basic_block b, gimple_stmt_iterator *gsi)\n \t\t       only process new ones.  */\n \t\t    if (! has_VN_INFO (def))\n \t\t      {\n-\t\t\tVN_INFO (def)->valnum = def;\n-\t\t\tVN_INFO (def)->visited = true;\n+\t\t\tvn_ssa_aux_t vn_info = VN_INFO (def);\n+\t\t\tvn_info->valnum = def;\n+\t\t\tvn_info->visited = true;\n \t\t      }\n \t\tif (gsi_stmt (prev) == gsi_stmt (*gsi))\n \t\t  break;"}]}