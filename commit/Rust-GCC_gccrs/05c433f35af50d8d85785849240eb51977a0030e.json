{"sha": "05c433f35af50d8d85785849240eb51977a0030e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDVjNDMzZjM1YWY1MGQ4ZDg1Nzg1ODQ5MjQwZWI1MTk3N2EwMDMwZQ==", "commit": {"author": {"name": "Paul Brook", "email": "paul@codesourcery.com", "date": "2006-07-20T13:57:31Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2006-07-20T13:57:31Z"}, "message": "re PR target/27363 (ARM gcc 4.1 optimization bug)\n\n2006-07-20  Paul Brook  <paul@codesourcery.com>\n\n\tPR 27363\n\tgcc/\n\t* cse.c (cse_insn): Add destination addresses to hash table. Check if\n\tthey are invalidated by this instruction.\n\n\tgcc/testsuite/\n\t* gcc.dg/pr27363.c: New test.\n\nFrom-SVN: r115614", "tree": {"sha": "b840f7b8a5b246ea76459f17a07eae015b3d7925", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b840f7b8a5b246ea76459f17a07eae015b3d7925"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05c433f35af50d8d85785849240eb51977a0030e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05c433f35af50d8d85785849240eb51977a0030e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05c433f35af50d8d85785849240eb51977a0030e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05c433f35af50d8d85785849240eb51977a0030e/comments", "author": null, "committer": null, "parents": [{"sha": "b0e46dff1cee9a5d1762a4d5387af1272a3cbe82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0e46dff1cee9a5d1762a4d5387af1272a3cbe82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0e46dff1cee9a5d1762a4d5387af1272a3cbe82"}], "stats": {"total": 98, "additions": 96, "deletions": 2}, "files": [{"sha": "5d9e52ecac155282842b8a29035f3a67f2ef2fcd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05c433f35af50d8d85785849240eb51977a0030e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05c433f35af50d8d85785849240eb51977a0030e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=05c433f35af50d8d85785849240eb51977a0030e", "patch": "@@ -1,3 +1,9 @@\n+2006-07-20  Paul Brook  <paul@codesourcery.com>\n+\n+\tPR 27363\n+\t* cse.c (cse_insn): Add destination addresses to hash table. Check if\n+\tthey are invalidated by this instruction.\n+\n 2006-07-21  Danny Smith  <dannysmith@users.sourceforge.net>\n \n \tPR target/28427"}, {"sha": "9e6fec091da8b057a85c1b6921696a9a2b5e8481", "filename": "gcc/cse.c", "status": "modified", "additions": 46, "deletions": 2, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05c433f35af50d8d85785849240eb51977a0030e/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05c433f35af50d8d85785849240eb51977a0030e/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=05c433f35af50d8d85785849240eb51977a0030e", "patch": "@@ -4739,6 +4739,8 @@ struct set\n   unsigned src_const_hash;\n   /* Table entry for constant equivalent for SET_SRC, if any.  */\n   struct table_elt *src_const_elt;\n+  /* Table entry for the destination address.  */\n+  struct table_elt *dest_addr_elt;\n };\n \n static void\n@@ -5970,6 +5972,40 @@ cse_insn (rtx insn, rtx libcall_insn)\n \t so that the destination goes into that class.  */\n       sets[i].src_elt = src_eqv_elt;\n \n+  /* Record destination addresses in the hash table.  This allows us to\n+     check if they are invalidated by other sets.  */\n+  for (i = 0; i < n_sets; i++)\n+    {\n+      if (sets[i].rtl)\n+\t{\n+\t  rtx x = sets[i].inner_dest;\n+\t  struct table_elt *elt;\n+\t  enum machine_mode mode;\n+\t  unsigned hash;\n+\n+\t  if (MEM_P (x))\n+\t    {\n+\t      x = XEXP (x, 0);\n+\t      mode = GET_MODE (x);\n+\t      hash = HASH (x, mode);\n+\t      elt = lookup (x, hash, mode);\n+\t      if (!elt)\n+\t\t{\n+\t\t  if (insert_regs (x, NULL, 0))\n+\t\t    {\n+\t\t      rehash_using_reg (x);\n+\t\t      hash = HASH (x, mode);\n+\t\t    }\n+\t\t  elt = insert (x, NULL, hash, mode);\n+\t\t}\n+\n+\t      sets[i].dest_addr_elt = elt;\n+\t    }\n+\t  else\n+\t    sets[i].dest_addr_elt = NULL;\n+\t}\n+    }\n+\n   invalidate_from_clobbers (x);\n \n   /* Some registers are invalidated by subroutine calls.  Memory is\n@@ -6062,12 +6098,20 @@ cse_insn (rtx insn, rtx libcall_insn)\n     }\n \n   /* We may have just removed some of the src_elt's from the hash table.\n-     So replace each one with the current head of the same class.  */\n+     So replace each one with the current head of the same class.\n+     Also check if destination addresses have been removed.  */\n \n   for (i = 0; i < n_sets; i++)\n     if (sets[i].rtl)\n       {\n-\tif (sets[i].src_elt && sets[i].src_elt->first_same_value == 0)\n+\tif (sets[i].dest_addr_elt\n+\t    && sets[i].dest_addr_elt->first_same_value == 0)\n+\t  {\n+\t    /* The elt was removed, which means this destination s not\n+\t       valid after this instruction.  */\n+\t    sets[i].rtl = NULL_RTX;\n+\t  }\n+\telse if (sets[i].src_elt && sets[i].src_elt->first_same_value == 0)\n \t  /* If elt was removed, find current head of same class,\n \t     or 0 if nothing remains of that class.  */\n \t  {"}, {"sha": "414d3143d99759b7a5da48eaf402ed688f1378e7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05c433f35af50d8d85785849240eb51977a0030e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05c433f35af50d8d85785849240eb51977a0030e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=05c433f35af50d8d85785849240eb51977a0030e", "patch": "@@ -1,3 +1,8 @@\n+2006-07-20  Paul Brook  <paul@codesourcery.com>\n+\n+\tPR 27363\n+\t* gcc.dg/pr27363.c: New test.\n+\n 2006-07-19  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/28338"}, {"sha": "40a3c6b3526abda08d0645cc6f48b999861e0c3c", "filename": "gcc/testsuite/gcc.dg/pr27363.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05c433f35af50d8d85785849240eb51977a0030e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr27363.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05c433f35af50d8d85785849240eb51977a0030e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr27363.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr27363.c?ref=05c433f35af50d8d85785849240eb51977a0030e", "patch": "@@ -0,0 +1,39 @@\n+/* PR27363.  CSE was breaking on the arm store multiple insn used for\n+   structure copies.  */\n+/* { dg-do run } */\n+/* { dg-options \"-Os\" } */\n+extern void abort (void);\n+\n+struct snd_mask {\n+    unsigned int bits[6];\n+};\n+\n+static int __attribute__((noinline))\n+snd_mask_refine(struct snd_mask *mask)\n+{\n+  struct snd_mask old;\n+\n+  old = *mask;\n+  if (mask->bits[0]==0 && mask->bits[1]==0)\n+    return 1;\n+\n+  return old.bits[0] != mask->bits[0];\n+}\n+\n+int main(int argc, char *argv[])\n+{\n+  struct snd_mask mask;\n+\n+\n+  mask.bits[0] = 23;\n+  mask.bits[1] = 42;\n+  mask.bits[2] = 0;\n+  mask.bits[3] = 0;\n+  mask.bits[4] = 0; \n+  mask.bits[5] = 0;\n+\n+\n+  if (snd_mask_refine(&mask))\n+    abort();\n+  return 0;\n+}"}]}