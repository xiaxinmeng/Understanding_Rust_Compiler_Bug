{"sha": "4f1f78b9dce2a046e82012d2f3f44f77351838d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGYxZjc4YjlkY2UyYTA0NmU4MjAxMmQyZjNmNDRmNzczNTE4MzhkMg==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2013-03-21T04:42:40Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2013-03-21T04:42:40Z"}, "message": "tree-ssa-dom.c (record_equivalences_from_incoming_edge): Record addititional equivalences for equality comparisons between an SSA_NAME...\n\n\t* tree-ssa-dom.c (record_equivalences_from_incoming_edge): Record\n\taddititional equivalences for equality comparisons between an SSA_NAME\n\tand a constant where the SSA_NAME was set from a widening conversion.\n\n\t* g++.dg/tree-ssa/ssa-dom.C: New test.\n\nFrom-SVN: r196855", "tree": {"sha": "f4d97c1272264f7310b05780db7d45ee55bfbb42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4d97c1272264f7310b05780db7d45ee55bfbb42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f1f78b9dce2a046e82012d2f3f44f77351838d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f1f78b9dce2a046e82012d2f3f44f77351838d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f1f78b9dce2a046e82012d2f3f44f77351838d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f1f78b9dce2a046e82012d2f3f44f77351838d2/comments", "author": null, "committer": null, "parents": [{"sha": "efcf217b1c9e82dc377feaeeb6ba86001d0a9d95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efcf217b1c9e82dc377feaeeb6ba86001d0a9d95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efcf217b1c9e82dc377feaeeb6ba86001d0a9d95"}], "stats": {"total": 142, "additions": 142, "deletions": 0}, "files": [{"sha": "5f93eddd2ab6e88a05a656143cf86c8d9631556a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f1f78b9dce2a046e82012d2f3f44f77351838d2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f1f78b9dce2a046e82012d2f3f44f77351838d2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4f1f78b9dce2a046e82012d2f3f44f77351838d2", "patch": "@@ -1,3 +1,9 @@\n+2013-03-20  Jeff Law  <law@redhat.com>\n+\n+\t* tree-ssa-dom.c (record_equivalences_from_incoming_edge): Record\n+\taddititional equivalences for equality comparisons between an SSA_NAME\n+\tand a constant where the SSA_NAME was set from a widening conversion.\n+\n 2013-03-20  Walter Lee  <walt@tilera.com>\n \n \t* config/tilegx/sync.md (atomic_test_and_set): New pattern."}, {"sha": "99a366d7a26d43d733db03eeec3db86a56f6ab26", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f1f78b9dce2a046e82012d2f3f44f77351838d2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f1f78b9dce2a046e82012d2f3f44f77351838d2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4f1f78b9dce2a046e82012d2f3f44f77351838d2", "patch": "@@ -1,3 +1,8 @@\n+2013-03-20  Jeff Law  <law@redhat.com>\n+\n+\t* g++.dg/tree-ssa/ssa-dom.C: New test.\n+\t\n+\n 2013-03-20  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* gcc.target/powerpc/mmfpgpr.c: New test."}, {"sha": "5f63865c1665e3da7d7b72ae86555fb8912fca62", "filename": "gcc/testsuite/g++.dg/tree-ssa/ssa-dom.C", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f1f78b9dce2a046e82012d2f3f44f77351838d2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fssa-dom.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f1f78b9dce2a046e82012d2f3f44f77351838d2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fssa-dom.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fssa-dom.C?ref=4f1f78b9dce2a046e82012d2f3f44f77351838d2", "patch": "@@ -0,0 +1,104 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-dom1\" } */\n+\n+typedef long unsigned int size_t;\n+extern void abort (void) __attribute__ ((__noreturn__));\n+union tree_node;\n+typedef union tree_node *tree;\n+union gimple_statement_d;\n+typedef union gimple_statement_d *gimple;\n+typedef const union gimple_statement_d *const_gimple;\n+\n+enum gimple_code\n+{\n+  GIMPLE_RETURN = 10,\n+};\n+\n+\n+\n+\n+\n+struct gimple_statement_base\n+{\n+\n+\n+  enum gimple_code code:8;\n+};\n+\n+\n+enum gimple_statement_structure_enum\n+{\n+  xyz\n+};\n+\n+\n+\n+\n+\n+\n+union gimple_statement_d\n+{\n+  struct gimple_statement_base gsbase;\n+};\n+\n+\n+\n+\n+\n+extern size_t const gimple_ops_offset_[];\n+\n+\n+extern enum gimple_statement_structure_enum const gss_for_code_[];\n+\n+\n+static inline enum gimple_code\n+gimple_code (const_gimple g)\n+{\n+  return g->gsbase.code;\n+}\n+\n+\n+\n+\n+static inline enum gimple_statement_structure_enum\n+gss_for_code (enum gimple_code code)\n+{\n+  return gss_for_code_[code];\n+}\n+\n+\n+\n+\n+static inline enum gimple_statement_structure_enum\n+gimple_statement_structure (gimple gs)\n+{\n+  return gss_for_code (gimple_code (gs));\n+}\n+\n+\n+static inline tree *\n+gimple_ops (gimple gs)\n+{\n+  size_t off;\n+  off = gimple_ops_offset_[gimple_statement_structure (gs)];\n+  return (tree *) ((char *) gs + off);\n+}\n+\n+\n+static inline void\n+gimple_set_op (gimple gs, unsigned i, tree op)\n+{\n+  gimple_ops (gs)[i] = op;\n+}\n+\n+void\n+gimple_return_set_retval (gimple gs, tree retval)\n+{\n+  const_gimple __gs = (gs);\n+  if (gimple_code (__gs) != (GIMPLE_RETURN))\n+    abort ();\n+  gimple_set_op (gs, 0, retval);\n+}\n+/* { dg-final { scan-tree-dump-times \"gss_for_code_.10.\" 1 \"dom1\"} } */\n+/* { dg-final { cleanup-tree-dump \"dom1\" } } */\n+"}, {"sha": "57b814c49b3cf63b8c4ef62360031a655a0cd7f8", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f1f78b9dce2a046e82012d2f3f44f77351838d2/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f1f78b9dce2a046e82012d2f3f44f77351838d2/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=4f1f78b9dce2a046e82012d2f3f44f77351838d2", "patch": "@@ -1135,6 +1135,33 @@ record_equivalences_from_incoming_edge (basic_block bb)\n \t  if (lhs)\n \t    record_equality (lhs, rhs);\n \n+\t  /* If LHS is an SSA_NAME and RHS is a constant and LHS was set\n+\t     via a widening type conversion, then we may be able to record\n+\t     additional equivalences.  */\n+\t  if (lhs\n+\t      && TREE_CODE (lhs) == SSA_NAME\n+\t      && is_gimple_constant (rhs))\n+\t    {\n+\t      gimple defstmt = SSA_NAME_DEF_STMT (lhs);\n+\n+\t      if (defstmt\n+\t\t  && is_gimple_assign (defstmt)\n+\t\t  && CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (defstmt)))\n+\t\t{\n+\t\t  tree old_rhs = gimple_assign_rhs1 (defstmt);\n+\t\t  tree newval = fold_convert (TREE_TYPE (old_rhs), rhs);\n+\n+\t\t  /* If this was a widening conversion and if RHS is converted\n+\t\t     to the type of OLD_RHS and has the same value, then we\n+\t\t     can record an equivalence between OLD_RHS and the\n+\t\t     converted representation of RHS.  */\n+\t\t  if ((TYPE_PRECISION (TREE_TYPE (lhs))\n+\t\t       > TYPE_PRECISION (TREE_TYPE (old_rhs)))\n+\t\t      && operand_equal_p (rhs, newval, 0))\n+\t\t    record_equality (old_rhs, newval);\n+\t\t}\n+\t    }\n+\n \t  for (i = 0; edge_info->cond_equivalences.iterate (i, &eq); ++i)\n \t    record_cond (eq);\n \t}"}]}