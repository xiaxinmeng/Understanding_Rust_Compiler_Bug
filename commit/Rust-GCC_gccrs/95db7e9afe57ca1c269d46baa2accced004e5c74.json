{"sha": "95db7e9afe57ca1c269d46baa2accced004e5c74", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTVkYjdlOWFmZTU3Y2ExYzI2OWQ0NmJhYTJhY2NjZWQwMDRlNWM3NA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-11-18T19:14:00Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-11-18T19:14:00Z"}, "message": "options, lto: Optimize streaming of optimization nodes\n\nHonza mentioned that especially for the new param machinery, most of\nstreamed values are probably going to be the default values.  Perhaps\nsomehow we could stream them more effectively.\n\nThis patch implements it and brings further savings, the size\ngoes down from 574 bytes to 273 bytes, i.e. less than half.\nNot trying to handle enums because the code doesn't know if (enum ...) 10\nis even valid, similarly non-parameters because those really generally\ndon't have large initializers, and params without Init (those are 0\ninitialized and thus don't need to be handled).\n\n2020-11-18  Jakub Jelinek  <jakub@redhat.com>\n\n\t* optc-save-gen.awk: Initialize var_opt_init.  In\n\tcl_optimization_stream_out for params with default values larger than\n\t10, xor the default value with the actual parameter value.  In\n\tcl_optimization_stream_in repeat the above xor.", "tree": {"sha": "4ccd276d0b07bfc9ac1ef6dc43b54f85e8c11165", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ccd276d0b07bfc9ac1ef6dc43b54f85e8c11165"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95db7e9afe57ca1c269d46baa2accced004e5c74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95db7e9afe57ca1c269d46baa2accced004e5c74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95db7e9afe57ca1c269d46baa2accced004e5c74", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95db7e9afe57ca1c269d46baa2accced004e5c74/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d326ebc94f3b2b0d962fb9e253564b39106a10da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d326ebc94f3b2b0d962fb9e253564b39106a10da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d326ebc94f3b2b0d962fb9e253564b39106a10da"}], "stats": {"total": 36, "additions": 28, "deletions": 8}, "files": [{"sha": "0a1be8ccb047253e7d22c2ce6d47f8e922f26d7c", "filename": "gcc/optc-save-gen.awk", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95db7e9afe57ca1c269d46baa2accced004e5c74/gcc%2Foptc-save-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95db7e9afe57ca1c269d46baa2accced004e5c74/gcc%2Foptc-save-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptc-save-gen.awk?ref=95db7e9afe57ca1c269d46baa2accced004e5c74", "patch": "@@ -1290,6 +1290,7 @@ for (i = 0; i < n_opts; i++) {\n \t\tvar_opt_val_type[n_opt_val] = otype;\n \t\tvar_opt_val[n_opt_val] = \"x_\" name;\n \t\tvar_opt_hash[n_opt_val] = flag_set_p(\"Optimization\", flags[i]);\n+\t\tvar_opt_init[n_opt_val] = opt_args(\"Init\", flags[i]);\n \t\tn_opt_val++;\n \t}\n }\n@@ -1361,10 +1362,21 @@ for (i = 0; i < n_opt_val; i++) {\n \totype = var_opt_val_type[i];\n \tif (otype ~ \"^const char \\\\**$\")\n \t\tprint \"  bp_pack_string (ob, bp, ptr->\" name\", true);\";\n-\telse if (otype ~ \"^unsigned\")\n-\t\tprint \"  bp_pack_var_len_unsigned (bp, ptr->\" name\");\";\n-\telse\n-\t\tprint \"  bp_pack_var_len_int (bp, ptr->\" name\");\";\n+\telse {\n+\t\tif (otype ~ \"^unsigned\") {\n+\t\t\tsgn = \"unsigned\";\n+\t\t} else {\n+\t\t\tsgn = \"int\";\n+\t\t}\n+\t\tif (name ~ \"^x_param\" && !(otype ~ \"^enum \") && var_opt_init[i]) {\n+\t\t\tprint \"  if (\" var_opt_init[i] \" > (\" var_opt_val_type[i] \") 10)\";\n+\t\t\tprint \"    bp_pack_var_len_\" sgn \" (bp, ptr->\" name\" ^ \" var_opt_init[i] \");\";\n+\t\t\tprint \"  else\";\n+\t\t\tprint \"    bp_pack_var_len_\" sgn \" (bp, ptr->\" name\");\";\n+\t\t} else {\n+\t\t\tprint \"  bp_pack_var_len_\" sgn \" (bp, ptr->\" name\");\";\n+\t\t}\n+\t}\n }\n print \"  for (size_t i = 0; i < sizeof (ptr->explicit_mask) / sizeof (ptr->explicit_mask[0]); i++)\";\n print \"    bp_pack_value (bp, ptr->explicit_mask[i], 64);\";\n@@ -1385,10 +1397,18 @@ for (i = 0; i < n_opt_val; i++) {\n \t\tprint \"  if (ptr->\" name\")\";\n \t\tprint \"    ptr->\" name\" = xstrdup (ptr->\" name\");\";\n \t}\n-\telse if (otype ~ \"^unsigned\")\n-\t\tprint \"  ptr->\" name\" = (\" var_opt_val_type[i] \") bp_unpack_var_len_unsigned (bp);\";\n-\telse\n-\t\tprint \"  ptr->\" name\" = (\" var_opt_val_type[i] \") bp_unpack_var_len_int (bp);\";\n+\telse {\n+\t\tif (otype ~ \"^unsigned\") {\n+\t\t\tsgn = \"unsigned\";\n+\t\t} else {\n+\t\t\tsgn = \"int\";\n+\t\t}\n+\t\tprint \"  ptr->\" name\" = (\" var_opt_val_type[i] \") bp_unpack_var_len_\" sgn \" (bp);\";\n+\t\tif (name ~ \"^x_param\" && !(otype ~ \"^enum \") && var_opt_init[i]) {\n+\t\t\tprint \"  if (\" var_opt_init[i] \" > (\" var_opt_val_type[i] \") 10)\";\n+\t\t\tprint \"    ptr->\" name\" ^= \" var_opt_init[i] \";\";\n+\t\t}\n+\t}\n }\n print \"  for (size_t i = 0; i < sizeof (ptr->explicit_mask) / sizeof (ptr->explicit_mask[0]); i++)\";\n print \"    ptr->explicit_mask[i] = bp_unpack_value (bp, 64);\";"}]}