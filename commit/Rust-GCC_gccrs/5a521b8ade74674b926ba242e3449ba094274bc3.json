{"sha": "5a521b8ade74674b926ba242e3449ba094274bc3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWE1MjFiOGFkZTc0Njc0YjkyNmJhMjQyZTM0NDliYTA5NDI3NGJjMw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-02-04T14:32:37Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-02-04T14:32:37Z"}, "message": "[multiple changes]\n\n2014-02-04  Gary Dismukes  <dismukes@adacore.com>\n\n\t* exp_ch13.adb: Minor spelling fix.\n\n2014-02-04  Robert Dewar  <dewar@adacore.com>\n\n\t* opt.ads: Minor comment update.\n\n2014-02-04  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_ch4.adb (Expand_N_Expression_With_Actions): Use Rewrite\n\tinstead of Replace.\n\n2014-02-04  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_aggr.adb (Resolve_Array_Aggregate): Suppress warnings\n\ton null expressions if component type is non-null, when the\n\tcorresponding association covers an empty range of index values.\n\nFrom-SVN: r207468", "tree": {"sha": "60be11727d2b79ae67da96274b2e1d62b14a73a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60be11727d2b79ae67da96274b2e1d62b14a73a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a521b8ade74674b926ba242e3449ba094274bc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a521b8ade74674b926ba242e3449ba094274bc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a521b8ade74674b926ba242e3449ba094274bc3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a521b8ade74674b926ba242e3449ba094274bc3/comments", "author": null, "committer": null, "parents": [{"sha": "81bd8c9075b533aab81a9778119b92f4b7cd7737", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81bd8c9075b533aab81a9778119b92f4b7cd7737", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81bd8c9075b533aab81a9778119b92f4b7cd7737"}], "stats": {"total": 71, "additions": 58, "deletions": 13}, "files": [{"sha": "cab52638c8d448ebbdc527278c27752ec072b023", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a521b8ade74674b926ba242e3449ba094274bc3/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a521b8ade74674b926ba242e3449ba094274bc3/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5a521b8ade74674b926ba242e3449ba094274bc3", "patch": "@@ -1,3 +1,22 @@\n+2014-02-04  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_ch13.adb: Minor spelling fix.\n+\n+2014-02-04  Robert Dewar  <dewar@adacore.com>\n+\n+\t* opt.ads: Minor comment update.\n+\n+2014-02-04  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_Expression_With_Actions): Use Rewrite\n+\tinstead of Replace.\n+\n+2014-02-04  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_aggr.adb (Resolve_Array_Aggregate): Suppress warnings\n+\ton null expressions if component type is non-null, when the\n+\tcorresponding association covers an empty range of index values.\n+\n 2014-02-04  Robert Dewar  <dewar@adacore.com>\n \n \t* sinfo.ads: Further comments on N_Expression_With_Actions node."}, {"sha": "3b8d05dd291a2ada337309f98070b71c98be6e8c", "filename": "gcc/ada/exp_ch13.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a521b8ade74674b926ba242e3449ba094274bc3/gcc%2Fada%2Fexp_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a521b8ade74674b926ba242e3449ba094274bc3/gcc%2Fada%2Fexp_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch13.adb?ref=5a521b8ade74674b926ba242e3449ba094274bc3", "patch": "@@ -174,7 +174,7 @@ package body Exp_Ch13 is\n                   New_Decl : Node_Id;\n \n                begin\n-                  --  Replace entity with temporary and renalyze\n+                  --  Replace entity with temporary and reanalyze\n \n                   Set_Defining_Identifier (Decl, Temp);\n                   Set_Analyzed (Decl, False);"}, {"sha": "7232ec845197a017b6c5f955ede3292aa74edeb8", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a521b8ade74674b926ba242e3449ba094274bc3/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a521b8ade74674b926ba242e3449ba094274bc3/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=5a521b8ade74674b926ba242e3449ba094274bc3", "patch": "@@ -5113,11 +5113,16 @@ package body Exp_Ch4 is\n       Act := First (Actions (N));\n \n       --  Deal with case where there are no actions. In this case we simply\n-      --  replace the node by its expression since we don't need the actions\n+      --  rewrite the node with its expression since we don't need the actions\n       --  and the specification of this node does not allow a null action list.\n \n+      --  Note: we use Rewrite instead of Replace, because Codepeer is using\n+      --  the expanded tree and relying on being able to retrieve the original\n+      --  tree in cases like this. This raises a whole lot of issues of whether\n+      --  we have problems elsewhere, which will be addressed in the future???\n+\n       if No (Act) then\n-         Replace (N, Relocate_Node (Expression (N)));\n+         Rewrite (N, Relocate_Node (Expression (N)));\n \n       --  Otherwise process the actions as described above\n "}, {"sha": "1b192a0251707c8922e5e3afa09b48e2deb72d6a", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a521b8ade74674b926ba242e3449ba094274bc3/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a521b8ade74674b926ba242e3449ba094274bc3/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=5a521b8ade74674b926ba242e3449ba094274bc3", "patch": "@@ -1292,8 +1292,8 @@ package Opt is\n \n    Sprint_Line_Limit : Nat := 72;\n    --  GNAT\n-   --  Limit values for chopping long lines in Sprint output, can be reset by\n-   --  use of NNN parameter with -gnatG or -gnatD switches.\n+   --  Limit values for chopping long lines in Cprint/Sprint output, can be\n+   --  reset by use of NNN parameter with -gnatG or -gnatD switches.\n \n    Stack_Checking_Enabled : Boolean := False;\n    --  GNAT"}, {"sha": "504ddcd38be3dcf041d3ed8eba67a1beb47f74ef", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 29, "deletions": 8, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a521b8ade74674b926ba242e3449ba094274bc3/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a521b8ade74674b926ba242e3449ba094274bc3/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=5a521b8ade74674b926ba242e3449ba094274bc3", "patch": "@@ -1937,6 +1937,25 @@ package body Sem_Aggr is\n             Errors_Posted_On_Choices : Boolean := False;\n             --  Keeps track of whether any choices have semantic errors\n \n+            function Empty_Range (A : Node_Id)  return Boolean;\n+            --  If an association covers an empty range, some warnings on the\n+            --  expression of the association can be disabled.\n+\n+            -----------------\n+            -- Empty_Range --\n+            -----------------\n+\n+            function Empty_Range (A : Node_Id)  return Boolean is\n+               R : constant Node_Id := First (Choices (A));\n+            begin\n+               return No (Next (R))\n+                 and then Nkind (R) = N_Range\n+                 and then Compile_Time_Compare\n+                            (Low_Bound (R), High_Bound (R), False) = GT;\n+            end Empty_Range;\n+\n+         --  Start of processing for Step_2\n+\n          begin\n             --  STEP 2 (A): Check discrete choices validity\n \n@@ -2059,6 +2078,7 @@ package body Sem_Aggr is\n \n                if Ada_Version >= Ada_2005\n                  and then Known_Null (Expression (Assoc))\n+                 and then not Empty_Range (Assoc)\n                then\n                   Check_Can_Never_Be_Null (Etype (N), Expression (Assoc));\n                end if;\n@@ -4717,16 +4737,17 @@ package body Sem_Aggr is\n          --  Apply_Compile_Time_Constraint_Error here to the Expr, which might\n          --  seem the more natural approach. That's because in some cases the\n          --  components are rewritten, and the replacement would be missed.\n+         --  We do not mark the whole aggregate as raising a constraint error,\n+         --  because the association may be a null array range.\n \n-         Insert_Action\n-           (Compile_Time_Constraint_Error\n-              (Expr,\n-               \"(Ada 2005) null not allowed in null-excluding component??\"),\n-            Make_Raise_Constraint_Error\n-              (Sloc (Expr), Reason => CE_Access_Check_Failed));\n-\n-         --  Set proper type for bogus component (why is this needed???)\n+         Error_Msg_N\n+           (\"(Ada 2005) null not allowed in null-excluding component??\", Expr);\n+         Error_Msg_N\n+           (\"\\Constraint_Error will be raised at runtime?\", Expr);\n \n+         Rewrite (Expr,\n+           Make_Raise_Constraint_Error\n+             (Sloc (Expr), Reason => CE_Access_Check_Failed));\n          Set_Etype    (Expr, Comp_Typ);\n          Set_Analyzed (Expr);\n       end if;"}]}