{"sha": "9c6cd30ed515ec543a3258e9c96006364a6e42cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM2Y2QzMGVkNTE1ZWM1NDNhMzI1OGU5Yzk2MDA2MzY0YTZlNDJjYg==", "commit": {"author": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1997-04-29T19:18:21Z"}, "committer": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1997-04-29T19:18:21Z"}, "message": "x\n\nFrom-SVN: r13989", "tree": {"sha": "3f6190b2625ed330c67864ae13c3cc5888b741bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f6190b2625ed330c67864ae13c3cc5888b741bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c6cd30ed515ec543a3258e9c96006364a6e42cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c6cd30ed515ec543a3258e9c96006364a6e42cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c6cd30ed515ec543a3258e9c96006364a6e42cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c6cd30ed515ec543a3258e9c96006364a6e42cb/comments", "author": null, "committer": null, "parents": [{"sha": "c82ba1b5052c97c190657c0274a3d043a69794e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c82ba1b5052c97c190657c0274a3d043a69794e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c82ba1b5052c97c190657c0274a3d043a69794e4"}], "stats": {"total": 18, "additions": 10, "deletions": 8}, "files": [{"sha": "cd7300d9c622135eba523c2f7fee069889d4d2f3", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c6cd30ed515ec543a3258e9c96006364a6e42cb/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c6cd30ed515ec543a3258e9c96006364a6e42cb/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=9c6cd30ed515ec543a3258e9c96006364a6e42cb", "patch": "@@ -3145,7 +3145,7 @@ constant_size (value)\n   log = log / 8;\n   log = 1 << (floor_log2 (log) + 1);\n \n-  return MIN (log, 4);\n+  return log;\n }\n \n /* Return the size of a DIE, as it is represented in the\n@@ -7198,9 +7198,11 @@ gen_subprogram_die (decl, context_die)\n   register tree fn_arg_types;\n   register tree outer_scope;\n   register dw_die_ref old_die = lookup_decl_die (decl);\n-  register int declaration = (current_function_decl != decl\n-\t\t\t      || context_die->die_tag == DW_TAG_structure_type\n-\t\t\t      || context_die->die_tag == DW_TAG_union_type);\n+  register int declaration\n+    = (current_function_decl != decl\n+       || (context_die\n+\t   && (context_die->die_tag == DW_TAG_structure_type\n+\t       || context_die->die_tag == DW_TAG_union_type)));\n \n   if (origin != NULL)\n     {\n@@ -8484,11 +8486,11 @@ dwarf2out_decl (decl)\n       if (DECL_INITIAL (decl) == NULL_TREE)\n \treturn;\n \n-      /* Ignore nested functions, since they will be written in decl_for_scope.\n-\t ??? There was an old comment here about methods, which now need to\n-\t be handled.  */\n+      /* If we're a nested function, initially use a parent of NULL; if we're\n+\t a plain function, this will be fixed up in decls_for_scope.  If\n+\t we're a method, it will be ignored, since we already have a DIE.  */\n       if (decl_function_context (decl))\n-\treturn;\n+\tcontext_die = NULL;\n \n       break;\n "}]}