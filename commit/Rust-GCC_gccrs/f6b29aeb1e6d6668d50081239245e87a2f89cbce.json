{"sha": "f6b29aeb1e6d6668d50081239245e87a2f89cbce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjZiMjlhZWIxZTZkNjY2OGQ1MDA4MTIzOTI0NWU4N2EyZjg5Y2JjZQ==", "commit": {"author": {"name": "David S. Miller", "email": "davem@davemloft.net", "date": "2011-10-31T06:24:26Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2011-10-31T06:24:26Z"}, "message": "Slight improvements to vec_init code gen on sparc.\n\n\t* config/sparc/sparc.c (vector_init_bshuffle): New function.\n\t(vector_init_fpmerge): New function.\n\t(sparc_expand_vector_init): Use them to improve non-const cases.\n\nFrom-SVN: r180696", "tree": {"sha": "60930fbd05a7ee23f44a1729f8fe43deb2cc5d1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60930fbd05a7ee23f44a1729f8fe43deb2cc5d1e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6b29aeb1e6d6668d50081239245e87a2f89cbce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6b29aeb1e6d6668d50081239245e87a2f89cbce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6b29aeb1e6d6668d50081239245e87a2f89cbce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6b29aeb1e6d6668d50081239245e87a2f89cbce/comments", "author": {"login": "davem330", "id": 1053866, "node_id": "MDQ6VXNlcjEwNTM4NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1053866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davem330", "html_url": "https://github.com/davem330", "followers_url": "https://api.github.com/users/davem330/followers", "following_url": "https://api.github.com/users/davem330/following{/other_user}", "gists_url": "https://api.github.com/users/davem330/gists{/gist_id}", "starred_url": "https://api.github.com/users/davem330/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davem330/subscriptions", "organizations_url": "https://api.github.com/users/davem330/orgs", "repos_url": "https://api.github.com/users/davem330/repos", "events_url": "https://api.github.com/users/davem330/events{/privacy}", "received_events_url": "https://api.github.com/users/davem330/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ea2fa34166f5b62d8712dcc14ef922779e31edd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea2fa34166f5b62d8712dcc14ef922779e31edd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea2fa34166f5b62d8712dcc14ef922779e31edd1"}], "stats": {"total": 109, "additions": 109, "deletions": 0}, "files": [{"sha": "a851ba112f4ff47aca6048ad0d1a5443065cc1db", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b29aeb1e6d6668d50081239245e87a2f89cbce/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b29aeb1e6d6668d50081239245e87a2f89cbce/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f6b29aeb1e6d6668d50081239245e87a2f89cbce", "patch": "@@ -1,5 +1,9 @@\n 2011-10-30  David S. Miller  <davem@davemloft.net>\n \n+\t* config/sparc/sparc.c (vector_init_bshuffle): New function.\n+\t(vector_init_fpmerge): New function.\n+\t(sparc_expand_vector_init): Use them to improve non-const cases.\n+\n \t* dwarf2out.c (dwarf2out_var_location): When processing several\n \tconsecutive location notes, cache the result of next_real_insn().\n "}, {"sha": "fd1b190d05dbaaef4360487559d3e161d85689e0", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b29aeb1e6d6668d50081239245e87a2f89cbce/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b29aeb1e6d6668d50081239245e87a2f89cbce/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=f6b29aeb1e6d6668d50081239245e87a2f89cbce", "patch": "@@ -11279,20 +11279,86 @@ output_v8plus_mult (rtx insn, rtx *operands, const char *name)\n     }\n }\n \n+static void\n+vector_init_bshuffle (rtx target, rtx elt, enum machine_mode mode,\n+\t\t      enum machine_mode inner_mode)\n+{\n+      rtx t1, final_insn;\n+      int bmask;\n+\n+      t1 = gen_reg_rtx (mode);\n+\n+      elt = convert_modes (SImode, inner_mode, elt, true);\n+      emit_move_insn (gen_lowpart(SImode, t1), elt);\n+\n+      switch (mode)\n+\t{\n+\tcase V2SImode:\n+\t  final_insn = gen_bshufflev2si_vis (target, t1, t1);\n+\t  bmask = 0x45674567;\n+\t  break;\n+\tcase V4HImode:\n+\t  final_insn = gen_bshufflev4hi_vis (target, t1, t1);\n+\t  bmask = 0x67676767;\n+\t  break;\n+\tcase V8QImode:\n+\t  final_insn = gen_bshufflev8qi_vis (target, t1, t1);\n+\t  bmask = 0x77777777;\n+\t  break;\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n+\n+      emit_insn (gen_bmasksi_vis (gen_reg_rtx (SImode), CONST0_RTX (SImode),\n+\t\t\t\t  force_reg (SImode, GEN_INT (bmask))));\n+      emit_insn (final_insn);\n+}\n+\n+static void\n+vector_init_fpmerge (rtx target, rtx elt, enum machine_mode inner_mode)\n+{\n+  rtx t1, t2, t3, t3_low;\n+\n+  t1 = gen_reg_rtx (V4QImode);\n+  elt = convert_modes (SImode, inner_mode, elt, true);\n+  emit_move_insn (gen_lowpart (SImode, t1), elt);\n+\n+  t2 = gen_reg_rtx (V4QImode);\n+  emit_move_insn (t2, t1);\n+\n+  t3 = gen_reg_rtx (V8QImode);\n+  t3_low = gen_lowpart (V4QImode, t3);\n+\n+  emit_insn (gen_fpmerge_vis (t3, t1, t2));\n+  emit_move_insn (t1, t3_low);\n+  emit_move_insn (t2, t3_low);\n+\n+  emit_insn (gen_fpmerge_vis (t3, t1, t2));\n+  emit_move_insn (t1, t3_low);\n+  emit_move_insn (t2, t3_low);\n+\n+  emit_insn (gen_fpmerge_vis (gen_lowpart (V8QImode, target), t1, t2));\n+}\n+\n void\n sparc_expand_vector_init (rtx target, rtx vals)\n {\n   enum machine_mode mode = GET_MODE (target);\n   enum machine_mode inner_mode = GET_MODE_INNER (mode);\n   int n_elts = GET_MODE_NUNITS (mode);\n   int i, n_var = 0;\n+  bool all_same;\n   rtx mem;\n \n+  all_same = true;\n   for (i = 0; i < n_elts; i++)\n     {\n       rtx x = XVECEXP (vals, 0, i);\n       if (!CONSTANT_P (x))\n \tn_var++;\n+\n+      if (i > 0 && !rtx_equal_p (x, XVECEXP (vals, 0, 0)))\n+\tall_same = false;\n     }\n \n   if (n_var == 0)\n@@ -11301,6 +11367,45 @@ sparc_expand_vector_init (rtx target, rtx vals)\n       return;\n     }\n \n+  if (GET_MODE_SIZE (inner_mode) == GET_MODE_SIZE (mode))\n+    {\n+      if (GET_MODE_SIZE (inner_mode) == 4)\n+\t{\n+\t  emit_move_insn (gen_lowpart (SImode, target),\n+\t\t\t  gen_lowpart (SImode, XVECEXP (vals, 0, 0)));\n+\t  return;\n+\t}\n+      else if (GET_MODE_SIZE (inner_mode) == 8)\n+\t{\n+\t  emit_move_insn (gen_lowpart (DImode, target),\n+\t\t\t  gen_lowpart (DImode, XVECEXP (vals, 0, 0)));\n+\t  return;\n+\t}\n+    }\n+  else if (GET_MODE_SIZE (inner_mode) == GET_MODE_SIZE (word_mode)\n+\t   && GET_MODE_SIZE (mode) == 2 * GET_MODE_SIZE (word_mode))\n+    {\n+      emit_move_insn (gen_highpart (word_mode, target),\n+\t\t      gen_lowpart (word_mode, XVECEXP (vals, 0, 0)));\n+      emit_move_insn (gen_lowpart (word_mode, target),\n+\t\t      gen_lowpart (word_mode, XVECEXP (vals, 0, 1)));\n+      return;\n+    }\n+\n+  if (all_same && GET_MODE_SIZE (mode) == 8)\n+    {\n+      if (TARGET_VIS2)\n+\t{\n+\t  vector_init_bshuffle (target, XVECEXP (vals, 0, 0), mode, inner_mode);\n+\t  return;\n+\t}\n+      if (mode == V8QImode)\n+\t{\n+\t  vector_init_fpmerge (target, XVECEXP (vals, 0, 0), inner_mode);\n+\t  return;\n+\t}\n+    }\n+\n   mem = assign_stack_temp (mode, GET_MODE_SIZE (mode), 0);\n   for (i = 0; i < n_elts; i++)\n     emit_move_insn (adjust_address_nv (mem, inner_mode,"}]}