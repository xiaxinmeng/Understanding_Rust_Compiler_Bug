{"sha": "bfee0724e0c7f3473bf17274cc750d65207db037", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmZlZTA3MjRlMGM3ZjM0NzNiZjE3Mjc0Y2M3NTBkNjUyMDdkYjAzNw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-07-15T19:46:11Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-07-15T19:46:11Z"}, "message": "wait.h (do_spin): New inline...\n\n\t* config/linux/wait.h (do_spin): New inline, largely copied\n\tfrom do_wait, just don't do futex_wait here, instead return true if\n\tit should be done.\n\t(do_wait): Implement using do_spin.\n\t* config/linux/mutex.h (gomp_mutex_lock_slow): Add an int argument\n\tto prototype.\n\t(gomp_mutex_lock): Use __sync_val_compare_and_swap instead of\n\t__sync_bool_compare_and_swap, pass the oldval to\n\tgomp_mutex_lock_slow.\n\t* config/linux/mutex.c (gomp_mutex_lock_slow): Add oldval argument.\n\tIf all mutex contenders are just spinning and not sleeping, don't\n\tchange state to 2 unnecessarily.  Optimize the loop when state has\n\talready become 2 to use just one atomic operation per loop instead\n\tof two.\n\t* config/linux/ia64/mutex.h (gomp_mutex_lock_slow): Add an int argument\n\tto prototype.\n\t(gomp_mutex_lock): Use __sync_val_compare_and_swap instead of\n\t__sync_bool_compare_and_swap, pass the oldval to\n\tgomp_mutex_lock_slow.\n\nFrom-SVN: r176326", "tree": {"sha": "3db1d5696a3515cfad06bdd05a17d82acd4e5ab8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3db1d5696a3515cfad06bdd05a17d82acd4e5ab8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bfee0724e0c7f3473bf17274cc750d65207db037", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfee0724e0c7f3473bf17274cc750d65207db037", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfee0724e0c7f3473bf17274cc750d65207db037", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfee0724e0c7f3473bf17274cc750d65207db037/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1be0310c7632cef484195acf96dea08aa0d9a753", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1be0310c7632cef484195acf96dea08aa0d9a753", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1be0310c7632cef484195acf96dea08aa0d9a753"}], "stats": {"total": 78, "additions": 60, "deletions": 18}, "files": [{"sha": "36c716c518eb1e34f1f0c04cc8a0ebe783a2f038", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfee0724e0c7f3473bf17274cc750d65207db037/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfee0724e0c7f3473bf17274cc750d65207db037/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=bfee0724e0c7f3473bf17274cc750d65207db037", "patch": "@@ -1,3 +1,25 @@\n+2011-07-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/linux/wait.h (do_spin): New inline, largely copied\n+\tfrom do_wait, just don't do futex_wait here, instead return true if\n+\tit should be done.\n+\t(do_wait): Implement using do_spin.\n+\t* config/linux/mutex.h (gomp_mutex_lock_slow): Add an int argument\n+\tto prototype.\n+\t(gomp_mutex_lock): Use __sync_val_compare_and_swap instead of\n+\t__sync_bool_compare_and_swap, pass the oldval to\n+\tgomp_mutex_lock_slow.\n+\t* config/linux/mutex.c (gomp_mutex_lock_slow): Add oldval argument.\n+\tIf all mutex contenders are just spinning and not sleeping, don't\n+\tchange state to 2 unnecessarily.  Optimize the loop when state has\n+\talready become 2 to use just one atomic operation per loop instead\n+\tof two.\n+\t* config/linux/ia64/mutex.h (gomp_mutex_lock_slow): Add an int argument\n+\tto prototype.\n+\t(gomp_mutex_lock): Use __sync_val_compare_and_swap instead of\n+\t__sync_bool_compare_and_swap, pass the oldval to\n+\tgomp_mutex_lock_slow.\n+\n 2011-06-22  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR libgomp/49490"}, {"sha": "8a67673df40238dac0df8b13caa8d29a1845238b", "filename": "libgomp/config/linux/ia64/mutex.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfee0724e0c7f3473bf17274cc750d65207db037/libgomp%2Fconfig%2Flinux%2Fia64%2Fmutex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfee0724e0c7f3473bf17274cc750d65207db037/libgomp%2Fconfig%2Flinux%2Fia64%2Fmutex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfig%2Flinux%2Fia64%2Fmutex.h?ref=bfee0724e0c7f3473bf17274cc750d65207db037", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2005, 2008, 2009 Free Software Foundation, Inc.\n+/* Copyright (C) 2005, 2008, 2009, 2011 Free Software Foundation, Inc.\n    Contributed by Richard Henderson <rth@redhat.com>.\n \n    This file is part of the GNU OpenMP Library (libgomp).\n@@ -38,11 +38,12 @@ static inline void gomp_mutex_init (gomp_mutex_t *mutex)\n   *mutex = 0;\n }\n \n-extern void gomp_mutex_lock_slow (gomp_mutex_t *mutex);\n+extern void gomp_mutex_lock_slow (gomp_mutex_t *mutex, int);\n static inline void gomp_mutex_lock (gomp_mutex_t *mutex)\n {\n-  if (!__sync_bool_compare_and_swap (mutex, 0, 1))\n-    gomp_mutex_lock_slow (mutex);\n+  int oldval = __sync_val_compare_and_swap (mutex, 0, 1);\n+  if (__builtin_expect (oldval, 0))\n+    gomp_mutex_lock_slow (mutex, oldval);\n }\n \n extern void gomp_mutex_unlock_slow (gomp_mutex_t *mutex);"}, {"sha": "2574f7be42a0d35aa81f03a30b2be014e2a1326b", "filename": "libgomp/config/linux/mutex.c", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfee0724e0c7f3473bf17274cc750d65207db037/libgomp%2Fconfig%2Flinux%2Fmutex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfee0724e0c7f3473bf17274cc750d65207db037/libgomp%2Fconfig%2Flinux%2Fmutex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfig%2Flinux%2Fmutex.c?ref=bfee0724e0c7f3473bf17274cc750d65207db037", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2005, 2008, 2009 Free Software Foundation, Inc.\n+/* Copyright (C) 2005, 2008, 2009, 2011 Free Software Foundation, Inc.\n    Contributed by Richard Henderson <rth@redhat.com>.\n \n    This file is part of the GNU OpenMP Library (libgomp).\n@@ -32,15 +32,27 @@ long int gomp_futex_wake = FUTEX_WAKE | FUTEX_PRIVATE_FLAG;\n long int gomp_futex_wait = FUTEX_WAIT | FUTEX_PRIVATE_FLAG;\n \n void\n-gomp_mutex_lock_slow (gomp_mutex_t *mutex)\n+gomp_mutex_lock_slow (gomp_mutex_t *mutex, int oldval)\n {\n-  do\n+  while (oldval == 1)\n     {\n-      int oldval = __sync_val_compare_and_swap (mutex, 1, 2);\n-      if (oldval != 0)\n-\tdo_wait (mutex, 2);\n+      if (do_spin (mutex, 1))\n+\t{\n+\t  oldval = __sync_lock_test_and_set (mutex, 2);\n+\t  if (oldval == 0)\n+\t    return;\n+\t  futex_wait (mutex, 2);\n+\t  break;\n+\t}\n+      else\n+\t{\n+\t  oldval = __sync_val_compare_and_swap (mutex, 0, 1);\n+\t  if (oldval == 0)\n+\t    return;\n+\t}\n     }\n-  while (!__sync_bool_compare_and_swap (mutex, 0, 2));\n+  while ((oldval = __sync_lock_test_and_set (mutex, 2)))\n+    do_wait (mutex, 2);\n }\n \n void"}, {"sha": "eafb0e7673401332329b7d5eaedd59eac9232228", "filename": "libgomp/config/linux/mutex.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfee0724e0c7f3473bf17274cc750d65207db037/libgomp%2Fconfig%2Flinux%2Fmutex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfee0724e0c7f3473bf17274cc750d65207db037/libgomp%2Fconfig%2Flinux%2Fmutex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfig%2Flinux%2Fmutex.h?ref=bfee0724e0c7f3473bf17274cc750d65207db037", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2005, 2009 Free Software Foundation, Inc.\n+/* Copyright (C) 2005, 2009, 2011 Free Software Foundation, Inc.\n    Contributed by Richard Henderson <rth@redhat.com>.\n \n    This file is part of the GNU OpenMP Library (libgomp).\n@@ -38,11 +38,12 @@ static inline void gomp_mutex_init (gomp_mutex_t *mutex)\n   *mutex = 0;\n }\n \n-extern void gomp_mutex_lock_slow (gomp_mutex_t *mutex);\n+extern void gomp_mutex_lock_slow (gomp_mutex_t *mutex, int);\n static inline void gomp_mutex_lock (gomp_mutex_t *mutex)\n {\n-  if (!__sync_bool_compare_and_swap (mutex, 0, 1))\n-    gomp_mutex_lock_slow (mutex);\n+  int oldval = __sync_val_compare_and_swap (mutex, 0, 1);\n+  if (__builtin_expect (oldval, 0))\n+    gomp_mutex_lock_slow (mutex, oldval);\n }\n \n extern void gomp_mutex_unlock_slow (gomp_mutex_t *mutex);"}, {"sha": "4f65985581128eae3707e82794790cd86f6ede09", "filename": "libgomp/config/linux/wait.h", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfee0724e0c7f3473bf17274cc750d65207db037/libgomp%2Fconfig%2Flinux%2Fwait.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfee0724e0c7f3473bf17274cc750d65207db037/libgomp%2Fconfig%2Flinux%2Fwait.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfig%2Flinux%2Fwait.h?ref=bfee0724e0c7f3473bf17274cc750d65207db037", "patch": "@@ -44,18 +44,24 @@ extern long int gomp_futex_wait, gomp_futex_wake;\n \n #include <futex.h>\n \n-static inline void do_wait (int *addr, int val)\n+static inline int do_spin (int *addr, int val)\n {\n   unsigned long long i, count = gomp_spin_count_var;\n \n   if (__builtin_expect (gomp_managed_threads > gomp_available_cpus, 0))\n     count = gomp_throttled_spin_count_var;\n   for (i = 0; i < count; i++)\n     if (__builtin_expect (*addr != val, 0))\n-      return;\n+      return 0;\n     else\n       cpu_relax ();\n-  futex_wait (addr, val);\n+  return 1;\n+}\n+\n+static inline void do_wait (int *addr, int val)\n+{\n+  if (do_spin (addr, val))\n+    futex_wait (addr, val);\n }\n \n #ifdef HAVE_ATTRIBUTE_VISIBILITY"}]}