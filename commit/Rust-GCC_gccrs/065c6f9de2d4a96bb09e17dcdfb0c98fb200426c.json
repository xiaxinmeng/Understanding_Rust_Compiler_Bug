{"sha": "065c6f9de2d4a96bb09e17dcdfb0c98fb200426c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDY1YzZmOWRlMmQ0YTk2YmIwOWUxN2RjZGZiMGM5OGZiMjAwNDI2Yw==", "commit": {"author": {"name": "Mikael Morin", "email": "mikael.morin@sfr.fr", "date": "2011-10-07T20:32:37Z"}, "committer": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2011-10-07T20:32:37Z"}, "message": "trans-array.c (gfc_conv_section_startstride): Remove coarray argument.\n\n\t* trans-array.c (gfc_conv_section_startstride): Remove coarray argument.\n\tRemove conditions on coarray.\n\t(gfc_conv_ss_startstride): Update call to gfc_conv_section_startstride.\n\t(gfc_conv_expr_descriptor): Ditto. Add assertions before the call.\n\nFrom-SVN: r179693", "tree": {"sha": "8bb7e132061e6aa4cf10bd5453f0f885e0354041", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8bb7e132061e6aa4cf10bd5453f0f885e0354041"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/065c6f9de2d4a96bb09e17dcdfb0c98fb200426c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/065c6f9de2d4a96bb09e17dcdfb0c98fb200426c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/065c6f9de2d4a96bb09e17dcdfb0c98fb200426c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/065c6f9de2d4a96bb09e17dcdfb0c98fb200426c/comments", "author": null, "committer": null, "parents": [{"sha": "6cb0246c1bef48b03473e06697e2d22930c29df2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cb0246c1bef48b03473e06697e2d22930c29df2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cb0246c1bef48b03473e06697e2d22930c29df2"}], "stats": {"total": 32, "additions": 21, "deletions": 11}, "files": [{"sha": "a4bf8a01ee9c3332345a93322e69579bbafde976", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/065c6f9de2d4a96bb09e17dcdfb0c98fb200426c/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/065c6f9de2d4a96bb09e17dcdfb0c98fb200426c/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=065c6f9de2d4a96bb09e17dcdfb0c98fb200426c", "patch": "@@ -1,3 +1,10 @@\n+2011-10-07  Mikael Morin  <mikael.morin@sfr.fr>\n+\n+\t* trans-array.c (gfc_conv_section_startstride): Remove coarray argument.\n+\tRemove conditions on coarray.\n+\t(gfc_conv_ss_startstride): Update call to gfc_conv_section_startstride.\n+\t(gfc_conv_expr_descriptor): Ditto. Add assertions before the call.\n+\n 2011-10-07  Mikael Morin  <mikael.morin@sfr.fr>\n \n \t* trans-array.c (gfc_conv_section_startstride): Remove coarray_last"}, {"sha": "a034886f534826f770de2c2b02056f1a0b902744", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/065c6f9de2d4a96bb09e17dcdfb0c98fb200426c/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/065c6f9de2d4a96bb09e17dcdfb0c98fb200426c/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=065c6f9de2d4a96bb09e17dcdfb0c98fb200426c", "patch": "@@ -3200,8 +3200,7 @@ evaluate_bound (stmtblock_t *block, tree *bounds, gfc_expr ** values,\n /* Calculate the lower bound of an array section.  */\n \n static void\n-gfc_conv_section_startstride (gfc_loopinfo * loop, gfc_ss * ss, int dim,\n-\t\t\t      bool coarray)\n+gfc_conv_section_startstride (gfc_loopinfo * loop, gfc_ss * ss, int dim)\n {\n   gfc_expr *stride = NULL;\n   tree desc;\n@@ -3219,16 +3218,14 @@ gfc_conv_section_startstride (gfc_loopinfo * loop, gfc_ss * ss, int dim,\n       /* We use a zero-based index to access the vector.  */\n       info->start[dim] = gfc_index_zero_node;\n       info->end[dim] = NULL;\n-      if (!coarray)\n-\tinfo->stride[dim] = gfc_index_one_node;\n+      info->stride[dim] = gfc_index_one_node;\n       return;\n     }\n \n   gcc_assert (ar->dimen_type[dim] == DIMEN_RANGE\n \t      || ar->dimen_type[dim] == DIMEN_THIS_IMAGE);\n   desc = info->descriptor;\n-  if (!coarray)\n-    stride = ar->stride[dim];\n+  stride = ar->stride[dim];\n \n   /* Calculate the start of the range.  For vector subscripts this will\n      be the range of the vector.  */\n@@ -3240,9 +3237,9 @@ gfc_conv_section_startstride (gfc_loopinfo * loop, gfc_ss * ss, int dim,\n   evaluate_bound (&loop->pre, info->end, ar->end, desc, dim, false);\n \n   /* Calculate the stride.  */\n-  if (!coarray && stride == NULL)\n+  if (stride == NULL)\n     info->stride[dim] = gfc_index_one_node;\n-  else if (!coarray)\n+  else\n     {\n       gfc_init_se (&se, NULL);\n       gfc_conv_expr_type (&se, stride, gfc_array_index_type);\n@@ -3319,8 +3316,7 @@ gfc_conv_ss_startstride (gfc_loopinfo * loop)\n \t  gfc_conv_ss_descriptor (&loop->pre, ss, !loop->array_parameter);\n \n \t  for (n = 0; n < ss->data.info.dimen; n++)\n-\t    gfc_conv_section_startstride (loop, ss, ss->data.info.dim[n],\n-\t\t\t\t\t  false);\n+\t    gfc_conv_section_startstride (loop, ss, ss->data.info.dim[n]);\n \t  break;\n \n \tcase GFC_SS_INTRINSIC:\n@@ -5975,7 +5971,14 @@ gfc_conv_expr_descriptor (gfc_se * se, gfc_expr * expr, gfc_ss * ss)\n \t  for (n = ss->data.info.dimen; n < ss->data.info.dimen + codim - 1;\n \t       n++)\n \t    {\n-\t      gfc_conv_section_startstride (&loop, ss, n, true);\n+\t      /* Make sure we are not lost somehow.  */\n+\t      gcc_assert (info->ref->u.ar.dimen_type[n] == DIMEN_THIS_IMAGE);\n+\n+\t      /* Make sure the call to gfc_conv_section_startstride won't \n+\t         generate unnecessary code to calculate stride.  */\n+\t      gcc_assert (info->ref->u.ar.stride[n] == NULL);\n+\n+\t      gfc_conv_section_startstride (&loop, ss, n);\n \t      loop.from[n] = info->start[n];\n \t      loop.to[n]   = info->end[n];\n \t    }"}]}