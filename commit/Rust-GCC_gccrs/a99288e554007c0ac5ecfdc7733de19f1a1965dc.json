{"sha": "a99288e554007c0ac5ecfdc7733de19f1a1965dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTk5Mjg4ZTU1NDAwN2MwYWM1ZWNmZGM3NzMzZGUxOWYxYTE5NjVkYw==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-09-05T13:34:25Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-09-05T13:34:25Z"}, "message": "re PR fortran/31564 (Error: Type/rank mismatch in argument)\n\n2007-09-05  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/31564\n\t* primary.c (gfc_match_rvalue): Make expressions that refer\n\tto derived type parameters that have array references into\n\tvariable expressions.  Remove references to use association\n\tfrom the symbol.\n\n\tPR fortran/33241\n\t* decl.c (add_init_expr_to_sym): Provide assumed character\n\tlength parameters with the length of the initialization\n\texpression, if a constant, or that of the first element of\n\tan array.\n\n2007-09-05  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/31564\n\t* gfortran.dg/derived_comp_array_ref_2.f90: New test.\n\n\tPR fortran/33241\n\t* gfortran.dg/char_length_10.f90: New test.\n\nFrom-SVN: r128130", "tree": {"sha": "cec6ce2218b24f0fa23d3e5fe993d76ef4a2d9e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cec6ce2218b24f0fa23d3e5fe993d76ef4a2d9e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a99288e554007c0ac5ecfdc7733de19f1a1965dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a99288e554007c0ac5ecfdc7733de19f1a1965dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a99288e554007c0ac5ecfdc7733de19f1a1965dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a99288e554007c0ac5ecfdc7733de19f1a1965dc/comments", "author": null, "committer": null, "parents": [{"sha": "8e4bf5c78280d8a41ff53c09e73796fda078c278", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e4bf5c78280d8a41ff53c09e73796fda078c278", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e4bf5c78280d8a41ff53c09e73796fda078c278"}], "stats": {"total": 121, "additions": 118, "deletions": 3}, "files": [{"sha": "e1d6ecf0777623182f354a9bb1467162fad72130", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a99288e554007c0ac5ecfdc7733de19f1a1965dc/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a99288e554007c0ac5ecfdc7733de19f1a1965dc/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=a99288e554007c0ac5ecfdc7733de19f1a1965dc", "patch": "@@ -1,3 +1,17 @@\n+2007-09-05  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/31564\n+\t* primary.c (gfc_match_rvalue): Make expressions that refer\n+\tto derived type parameters that have array references into\n+\tvariable expressions.  Remove references to use association\n+\tfrom the symbol.\n+\n+\tPR fortran/33241\n+\t* decl.c (add_init_expr_to_sym): Provide assumed character\n+\tlength parameters with the length of the initialization\n+\texpression, if a constant, or that of the first element of\n+\tan array.\n+\n 2007-09-04  Janus Weil  <jaydub66@gmail.com>\n \t    Paul Thomas  <pault@gcc.gnu.org>\n "}, {"sha": "f9f92ad91b793c6003beb6237e7e78bb2218143d", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a99288e554007c0ac5ecfdc7733de19f1a1965dc/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a99288e554007c0ac5ecfdc7733de19f1a1965dc/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=a99288e554007c0ac5ecfdc7733de19f1a1965dc", "patch": "@@ -1173,15 +1173,30 @@ add_init_expr_to_sym (const char *name, gfc_expr **initp, locus *var_locus)\n \t  /* Update symbol character length according initializer.  */\n \t  if (sym->ts.cl->length == NULL)\n \t    {\n+\t      int clen;\n \t      /* If there are multiple CHARACTER variables declared on the\n \t\t same line, we don't want them to share the same length.  */\n \t      sym->ts.cl = gfc_get_charlen ();\n \t      sym->ts.cl->next = gfc_current_ns->cl_list;\n \t      gfc_current_ns->cl_list = sym->ts.cl;\n \n-\t      if (sym->attr.flavor == FL_PARAMETER\n-\t\t  && init->expr_type == EXPR_ARRAY)\n-\t\tsym->ts.cl->length = gfc_copy_expr (init->ts.cl->length);\n+\t      if (sym->attr.flavor == FL_PARAMETER)\n+\t\t{\n+\t\t  if (init->expr_type == EXPR_CONSTANT)\n+\t\t    {\n+\t\t      clen = init->value.character.length;\n+\t\t      sym->ts.cl->length = gfc_int_expr (clen);\n+\t\t    }\n+\t\t  else if (init->expr_type == EXPR_ARRAY)\n+\t\t    {\n+\t\t      gfc_expr *p = init->value.constructor->expr;\n+\t\t      clen = p->value.character.length;\n+\t\t      sym->ts.cl->length = gfc_int_expr (clen);\n+\t\t    }\n+\t\t  else if (init->ts.cl && init->ts.cl->length)\n+\t\t    sym->ts.cl->length =\n+\t\t\t\tgfc_copy_expr (sym->value->ts.cl->length);\n+\t\t}\n \t    }\n \t  /* Update initializer character length according symbol.  */\n \t  else if (sym->ts.cl->length->expr_type == EXPR_CONSTANT)"}, {"sha": "f62299613fb4356f5f800b5455caf6fc7478ce72", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a99288e554007c0ac5ecfdc7733de19f1a1965dc/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a99288e554007c0ac5ecfdc7733de19f1a1965dc/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=a99288e554007c0ac5ecfdc7733de19f1a1965dc", "patch": "@@ -2046,6 +2046,7 @@ gfc_match_rvalue (gfc_expr **result)\n   int i;\n   gfc_typespec *ts;\n   bool implicit_char;\n+  gfc_ref *ref;\n \n   m = gfc_match_name (name);\n   if (m != MATCH_YES)\n@@ -2143,6 +2144,34 @@ gfc_match_rvalue (gfc_expr **result)\n \n       e->symtree = symtree;\n       m = match_varspec (e, 0);\n+\n+      if (sym->ts.is_c_interop || sym->ts.is_iso_c)\n+\tbreak;\n+\n+      /* Variable array references to derived type parameters cause\n+\t all sorts of headaches in simplification.  Make them variable\n+\t and scrub any module identity because they do not appear to\n+\t be referencable from the module.  */  \n+      if (sym->value && sym->ts.type == BT_DERIVED && e->ref)\n+\t{\n+\t  for (ref = e->ref; ref; ref = ref->next)\n+\t    if (ref->type == REF_ARRAY)\n+\t      break;\n+\n+\t  if (ref == NULL)\n+\t    break;\n+\n+\t  ref = e->ref;\n+\t  e->ref = NULL;\n+\t  gfc_free_expr (e);\n+\t  e = gfc_get_expr ();\n+\t  e->expr_type = EXPR_VARIABLE;\n+\t  e->symtree = symtree;\n+\t  e->ref = ref;\n+\t  sym->attr.use_assoc = 0;\n+\t  sym->module = NULL;\n+\t}\n+\n       break;\n \n     case FL_DERIVED:"}, {"sha": "c6ba699c47f0119e4d8021a74ee6de41371bbffb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a99288e554007c0ac5ecfdc7733de19f1a1965dc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a99288e554007c0ac5ecfdc7733de19f1a1965dc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a99288e554007c0ac5ecfdc7733de19f1a1965dc", "patch": "@@ -1,3 +1,11 @@\n+2007-09-05  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/31564\n+\t* gfortran.dg/derived_comp_array_ref_2.f90: New test.\n+\n+\tPR fortran/33241\n+\t* gfortran.dg/char_length_10.f90: New test.\n+\n 2007-09-05  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR c++/29731"}, {"sha": "23bb37ff4fd60ff37016236f8f45b41d101f544d", "filename": "gcc/testsuite/gfortran.dg/char_length_10.f90", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a99288e554007c0ac5ecfdc7733de19f1a1965dc/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_length_10.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a99288e554007c0ac5ecfdc7733de19f1a1965dc/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_length_10.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_length_10.f90?ref=a99288e554007c0ac5ecfdc7733de19f1a1965dc", "patch": "@@ -0,0 +1,17 @@\n+{ dg-do compile }\n+! Checks the fix for PR33241, in which the assumed character\n+! length of the parameter was never filled in with that of\n+! the initializer.\n+!\n+! Contributed by Victor Prosolin <victor.prosolin@gmail.com>\n+!\n+PROGRAM fptest\r\n+  IMPLICIT NONE\r\n+  CHARACTER (LEN=*), DIMENSION(1),  PARAMETER :: var  = 'a'\r\n+  CALL parsef (var)\r\n+contains\r\n+  SUBROUTINE parsef (Var)\r\n+    IMPLICIT NONE\r\n+    CHARACTER (LEN=*), DIMENSION(:), INTENT(in) :: Var\r\n+  END SUBROUTINE parsef\r\n+END PROGRAM fptest\r"}, {"sha": "0530b0e6ea6b7d8df7b16ac01f18ae64be36896f", "filename": "gcc/testsuite/gfortran.dg/derived_comp_array_ref_2.f90", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a99288e554007c0ac5ecfdc7733de19f1a1965dc/gcc%2Ftestsuite%2Fgfortran.dg%2Fderived_comp_array_ref_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a99288e554007c0ac5ecfdc7733de19f1a1965dc/gcc%2Ftestsuite%2Fgfortran.dg%2Fderived_comp_array_ref_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fderived_comp_array_ref_2.f90?ref=a99288e554007c0ac5ecfdc7733de19f1a1965dc", "patch": "@@ -0,0 +1,32 @@\n+! { dg-do run }\n+! Tests the fix for PR31564, in which the actual argument to\n+! the call for set_bound was simplified when it should not be.\n+!\n+! Contributed by Michael Richmond <michael.a.richmond@nasa.gov>\n+!\n+MODULE cdf_aux_mod\r\n+  TYPE :: the_distribution\r\n+    INTEGER :: parameters(2)\r\n+  END TYPE the_distribution\r\n+  TYPE (the_distribution), PARAMETER :: the_beta = the_distribution((/99,999/))\n+CONTAINS\r\n+  SUBROUTINE set_bound(arg_name, test)\r\n+    INTEGER, INTENT (IN) :: arg_name, test\n+    if (arg_name .ne. test) call abort ()\r\n+  END SUBROUTINE set_bound\r\n+END MODULE cdf_aux_mod\n+\r\n+MODULE cdf_beta_mod\r\n+CONTAINS\r\n+  SUBROUTINE cdf_beta(which, test)\r\n+    USE cdf_aux_mod\r\n+    INTEGER :: which, test\r\n+    CALL set_bound(the_beta%parameters(which), test)\r\n+  END SUBROUTINE cdf_beta\r\n+END MODULE cdf_beta_mod\n+\r\n+  use cdf_beta_mod\n+  call cdf_beta (1, 99)\n+  call cdf_beta (2, 999)\n+end\n+! { dg-final { cleanup-modules \"cdf_aux_mod cdf_beta_mod\" } }"}]}