{"sha": "c6e6f5c196bf7bdf6b0cff89b7de8ba863e2f63f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzZlNmY1YzE5NmJmN2JkZjZiMGNmZjg5YjdkZThiYTg2M2UyZjYzZg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-03-24T08:03:44Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-03-24T08:03:44Z"}, "message": "re PR rtl-optimization/5742 (bug with -freg-struct-return and functions returning 1 byte values)\n\n        PR optimization/5742\n        * machmode.def: Add inner mode field to complex modes.\n        * config/mips/mips.c (mips_function_value): Always define.  Add\n        new argument to handle libcalls.\n        * config/mips/mips.h (LIBCALL_VALUE): Use mips_function_value.\n        (FUNCTION_VALUE): Likewise.\n        * config/mips/abi64.h (FUNCTION_VALUE): Remove.\n        * config/mips/mips-protos.h: Update.\n\nFrom-SVN: r51250", "tree": {"sha": "fb1b0974f40ce418449b1ea3d0ecf1276a70611d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb1b0974f40ce418449b1ea3d0ecf1276a70611d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6e6f5c196bf7bdf6b0cff89b7de8ba863e2f63f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6e6f5c196bf7bdf6b0cff89b7de8ba863e2f63f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6e6f5c196bf7bdf6b0cff89b7de8ba863e2f63f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6e6f5c196bf7bdf6b0cff89b7de8ba863e2f63f/comments", "author": null, "committer": null, "parents": [{"sha": "d88e57d1fb9910215fb1fc57d6da2ae6799a8529", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d88e57d1fb9910215fb1fc57d6da2ae6799a8529", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d88e57d1fb9910215fb1fc57d6da2ae6799a8529"}], "stats": {"total": 92, "additions": 47, "deletions": 45}, "files": [{"sha": "f75a46379ed4e429e7a622015d0adb7322564ab6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e6f5c196bf7bdf6b0cff89b7de8ba863e2f63f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e6f5c196bf7bdf6b0cff89b7de8ba863e2f63f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c6e6f5c196bf7bdf6b0cff89b7de8ba863e2f63f", "patch": "@@ -1,3 +1,14 @@\n+2002-03-24  Richard Henderson  <rth@redhat.com>\n+\n+\tPR optimization/5742\n+\t* machmode.def: Add inner mode field to complex modes.\n+\t* config/mips/mips.c (mips_function_value): Always define.  Add\n+\tnew argument to handle libcalls.\n+\t* config/mips/mips.h (LIBCALL_VALUE): Use mips_function_value.\n+\t(FUNCTION_VALUE): Likewise.\n+\t* config/mips/abi64.h (FUNCTION_VALUE): Remove.\n+\t* config/mips/mips-protos.h: Update.\n+\n 2002-03-23  Richard Henderson  <rth@redhat.com>\n \n \t* config/sparc/sparc.c (sparc_emit_floatunsdi): New."}, {"sha": "a76f8c05ab37f091b677af2d0bf0a66f1ceae41f", "filename": "gcc/config/mips/abi64.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e6f5c196bf7bdf6b0cff89b7de8ba863e2f63f/gcc%2Fconfig%2Fmips%2Fabi64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e6f5c196bf7bdf6b0cff89b7de8ba863e2f63f/gcc%2Fconfig%2Fmips%2Fabi64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fabi64.h?ref=c6e6f5c196bf7bdf6b0cff89b7de8ba863e2f63f", "patch": "@@ -99,9 +99,6 @@ Boston, MA 02111-1307, USA.  */\n \t   && (FUNCTION_ARG_PADDING (MODE, TYPE)\t\\\n \t       == (BYTES_BIG_ENDIAN ? upward : downward)))))\n \n-#undef FUNCTION_VALUE\n-#define FUNCTION_VALUE(VALTYPE, FUNC)\tmips_function_value (VALTYPE, FUNC)\n-\n #define STRICT_ARGUMENT_NAMING (mips_abi != ABI_32 && mips_abi != ABI_O64)\n \n /* A C expression that indicates when an argument must be passed by"}, {"sha": "1ea662e8b2a3a36bef306bb6de68ba06f85d8389", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e6f5c196bf7bdf6b0cff89b7de8ba863e2f63f/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e6f5c196bf7bdf6b0cff89b7de8ba863e2f63f/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=c6e6f5c196bf7bdf6b0cff89b7de8ba863e2f63f", "patch": "@@ -50,7 +50,8 @@ extern struct rtx_def *\tmips16_gp_pseudo_reg PARAMS ((void));\n #ifdef ASM_OUTPUT_UNDEF_FUNCTION\n extern int\t\tmips_output_external_libcall PARAMS ((FILE *, const char *));\n #endif /* ASM_OUTPUT_UNDEF_FUNCTION */\n-extern struct rtx_def  *mips_function_value PARAMS ((tree, tree));\n+extern struct rtx_def  *mips_function_value PARAMS ((tree, tree,\n+\t\t\t\t\t\t     enum machine_mode));\n \n extern unsigned int\tmips_hard_regno_nregs PARAMS ((int,\n \t\t\t\t\t\t       enum machine_mode));"}, {"sha": "51cd562edf89d7f9df669ae229f454bb359577b9", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e6f5c196bf7bdf6b0cff89b7de8ba863e2f63f/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e6f5c196bf7bdf6b0cff89b7de8ba863e2f63f/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=c6e6f5c196bf7bdf6b0cff89b7de8ba863e2f63f", "patch": "@@ -7912,22 +7912,25 @@ mips_select_section (decl, reloc)\n     }\n }\n \f\n-#ifdef MIPS_ABI_DEFAULT\n-\n-/* Support functions for the 64 bit ABI.  */\n-\n-/* Return register to use for a function return value with VALTYPE for function\n-   FUNC.  */\n+/* Return register to use for a function return value with VALTYPE for\n+   function FUNC.  MODE is used instead of VALTYPE for LIBCALLs.  */\n \n rtx\n-mips_function_value (valtype, func)\n+mips_function_value (valtype, func, mode)\n      tree valtype;\n      tree func ATTRIBUTE_UNUSED;\n+     enum machine_mode mode;\n {\n   int reg = GP_RETURN;\n-  enum machine_mode mode = TYPE_MODE (valtype);\n-  enum mode_class mclass = GET_MODE_CLASS (mode);\n-  int unsignedp = TREE_UNSIGNED (valtype);\n+  enum mode_class mclass;\n+  int unsignedp = 1;\n+\n+  if (valtype)\n+    {\n+      mode = TYPE_MODE (valtype);\n+      unsignedp = TREE_UNSIGNED (valtype);\n+    }\n+  mclass = GET_MODE_CLASS (mode);\n \n   /* Since we define PROMOTE_FUNCTION_RETURN, we must promote the mode\n      just as PROMOTE_MODE does.  */\n@@ -7939,7 +7942,7 @@ mips_function_value (valtype, func)\n   else if (mclass == MODE_COMPLEX_FLOAT\n \t   && GET_MODE_SIZE (mode) <= UNITS_PER_FPVALUE * 2)\n     {\n-      enum machine_mode cmode = TYPE_MODE (TREE_TYPE (valtype));\n+      enum machine_mode cmode = GET_MODE_INNER (mode);\n \n       return gen_rtx_PARALLEL\n \t(VOIDmode,\n@@ -7952,7 +7955,7 @@ mips_function_value (valtype, func)\n \t\t\t\t       GEN_INT (GET_MODE_SIZE (cmode)))));\n     }\n \n-  else if (TREE_CODE (valtype) == RECORD_TYPE\n+  else if (valtype && TREE_CODE (valtype) == RECORD_TYPE\n \t   && mips_abi != ABI_32\n \t   && mips_abi != ABI_O64\n \t   && mips_abi != ABI_EABI)\n@@ -8019,7 +8022,6 @@ mips_function_value (valtype, func)\n \n   return gen_rtx_REG (mode, reg);\n }\n-#endif\n \n /* The implementation of FUNCTION_ARG_PASS_BY_REFERENCE.  Return\n    nonzero when an argument must be passed by reference.  */"}, {"sha": "16b34ab7526c57ef34221e5cc28afd3bbf39f0fd", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e6f5c196bf7bdf6b0cff89b7de8ba863e2f63f/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e6f5c196bf7bdf6b0cff89b7de8ba863e2f63f/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=c6e6f5c196bf7bdf6b0cff89b7de8ba863e2f63f", "patch": "@@ -2696,25 +2696,16 @@ extern struct mips_frame_info current_frame_info;\n    PROMOTE_FUNCTION_RETURN, we must promote the mode just as\n    PROMOTE_MODE does.  */\n \n-#define LIBCALL_VALUE(MODE)\t\t\t\t\t\t\\\n-  gen_rtx (REG,\t\t\t\t\t\t\t\t\\\n-\t   ((GET_MODE_CLASS (MODE) != MODE_INT\t\t\t\t\\\n-\t     || GET_MODE_SIZE (MODE) >= 4)\t\t\t\t\\\n-\t    ? (MODE)\t\t\t\t\t\t\t\\\n-\t    : SImode),\t\t\t\t\t\t\t\\\n-\t   ((GET_MODE_CLASS (MODE) == MODE_FLOAT\t\t\t\\\n-\t     && (! TARGET_SINGLE_FLOAT\t\t\t\t\t\\\n-\t\t || GET_MODE_SIZE (MODE) <= 4))\t\t\t\t\\\n-\t    ? FP_RETURN\t\t\t\t\t\t\t\\\n-\t    : GP_RETURN))\n+#define LIBCALL_VALUE(MODE) \\\n+  mips_function_value (NULL_TREE, NULL, (MODE))\n \n /* Define how to find the value returned by a function.\n    VALTYPE is the data type of the value (as a tree).\n    If the precise function being called is known, FUNC is its FUNCTION_DECL;\n    otherwise, FUNC is 0.  */\n \n-#define FUNCTION_VALUE(VALTYPE, FUNC) LIBCALL_VALUE (TYPE_MODE (VALTYPE))\n-\n+#define FUNCTION_VALUE(VALTYPE, FUNC) \\\n+  mips_function_value ((VALTYPE), (FUNC), VOIDmode)\n \n /* 1 if N is a possible register number for a function value.\n    On the MIPS, R2 R3 and F0 F2 are the only register thus used."}, {"sha": "621233490bc67b51d00bdb9c49e5c0f0c0bcdd52", "filename": "gcc/machmode.def", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e6f5c196bf7bdf6b0cff89b7de8ba863e2f63f/gcc%2Fmachmode.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e6f5c196bf7bdf6b0cff89b7de8ba863e2f63f/gcc%2Fmachmode.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmachmode.def?ref=c6e6f5c196bf7bdf6b0cff89b7de8ba863e2f63f", "patch": "@@ -65,8 +65,8 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n    The ordering is by increasing byte size, with QI coming before HI,\n    HI before SI, etc.\n \n-   Eigth arg is the mode of the internal elements in a vector.\n-   VOIDmode if not a vector.\n+   Eigth arg is the mode of the internal elements in a vector or\n+   complex, and VOIDmode if not applicable.\n */\n \n /* VOIDmode is used when no mode needs to be specified,\n@@ -98,19 +98,19 @@ DEF_MACHMODE (XFmode, \"XF\", MODE_FLOAT, BITS_PER_UNIT*12, 12, 12, TFmode, VOIDmo\n DEF_MACHMODE (TFmode, \"TF\", MODE_FLOAT, BITS_PER_UNIT*16, 16, 16, VOIDmode, VOIDmode)\n \n /* Complex modes.  */\n-DEF_MACHMODE (QCmode, \"QC\", MODE_COMPLEX_FLOAT, BITS_PER_UNIT*2, 2, 1, HCmode, VOIDmode)\n-DEF_MACHMODE (HCmode, \"HC\", MODE_COMPLEX_FLOAT, BITS_PER_UNIT*4, 4, 2, SCmode, VOIDmode)\n-DEF_MACHMODE (SCmode, \"SC\", MODE_COMPLEX_FLOAT, BITS_PER_UNIT*8, 8, 4, DCmode, VOIDmode)\n-DEF_MACHMODE (DCmode, \"DC\", MODE_COMPLEX_FLOAT, BITS_PER_UNIT*16, 16, 8, XCmode, VOIDmode)\n-DEF_MACHMODE (XCmode, \"XC\", MODE_COMPLEX_FLOAT, BITS_PER_UNIT*24, 24, 12, TCmode, VOIDmode)\n-DEF_MACHMODE (TCmode, \"TC\", MODE_COMPLEX_FLOAT, BITS_PER_UNIT*32, 32, 16, VOIDmode, VOIDmode)\n-\n-DEF_MACHMODE (CQImode, \"CQI\", MODE_COMPLEX_INT, BITS_PER_UNIT*2, 2, 1, CHImode, VOIDmode)\n-DEF_MACHMODE (CHImode, \"CHI\", MODE_COMPLEX_INT, BITS_PER_UNIT*4, 4, 2, CSImode, VOIDmode)\n-DEF_MACHMODE (CSImode, \"CSI\", MODE_COMPLEX_INT, BITS_PER_UNIT*8, 8, 4, CDImode, VOIDmode)\n-DEF_MACHMODE (CDImode, \"CDI\", MODE_COMPLEX_INT, BITS_PER_UNIT*16, 16, 8, CTImode, VOIDmode)\n-DEF_MACHMODE (CTImode, \"CTI\", MODE_COMPLEX_INT, BITS_PER_UNIT*32, 32, 16, COImode, VOIDmode)\n-DEF_MACHMODE (COImode, \"COI\", MODE_COMPLEX_INT, BITS_PER_UNIT*64, 64, 32, VOIDmode, VOIDmode)\n+DEF_MACHMODE (QCmode, \"QC\", MODE_COMPLEX_FLOAT, BITS_PER_UNIT*2, 2, 1, HCmode, QFmode)\n+DEF_MACHMODE (HCmode, \"HC\", MODE_COMPLEX_FLOAT, BITS_PER_UNIT*4, 4, 2, SCmode, HFmode)\n+DEF_MACHMODE (SCmode, \"SC\", MODE_COMPLEX_FLOAT, BITS_PER_UNIT*8, 8, 4, DCmode, SFmode)\n+DEF_MACHMODE (DCmode, \"DC\", MODE_COMPLEX_FLOAT, BITS_PER_UNIT*16, 16, 8, XCmode, DFmode)\n+DEF_MACHMODE (XCmode, \"XC\", MODE_COMPLEX_FLOAT, BITS_PER_UNIT*24, 24, 12, TCmode, XFmode)\n+DEF_MACHMODE (TCmode, \"TC\", MODE_COMPLEX_FLOAT, BITS_PER_UNIT*32, 32, 16, VOIDmode, TFmode)\n+\n+DEF_MACHMODE (CQImode, \"CQI\", MODE_COMPLEX_INT, BITS_PER_UNIT*2, 2, 1, CHImode, QImode)\n+DEF_MACHMODE (CHImode, \"CHI\", MODE_COMPLEX_INT, BITS_PER_UNIT*4, 4, 2, CSImode, HImode)\n+DEF_MACHMODE (CSImode, \"CSI\", MODE_COMPLEX_INT, BITS_PER_UNIT*8, 8, 4, CDImode, SImode)\n+DEF_MACHMODE (CDImode, \"CDI\", MODE_COMPLEX_INT, BITS_PER_UNIT*16, 16, 8, CTImode, DImode)\n+DEF_MACHMODE (CTImode, \"CTI\", MODE_COMPLEX_INT, BITS_PER_UNIT*32, 32, 16, COImode, TImode)\n+DEF_MACHMODE (COImode, \"COI\", MODE_COMPLEX_INT, BITS_PER_UNIT*64, 64, 32, VOIDmode, OImode)\n \n /* Vector modes.  */\n /* There are no V1xx vector modes.  These are equivalent to normal"}]}