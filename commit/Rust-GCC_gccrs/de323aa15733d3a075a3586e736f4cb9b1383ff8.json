{"sha": "de323aa15733d3a075a3586e736f4cb9b1383ff8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGUzMjNhYTE1NzMzZDNhMDc1YTM1ODZlNzM2ZjRjYjliMTM4M2ZmOA==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2000-09-25T09:32:58Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2000-09-25T09:32:58Z"}, "message": "definitions in config/i[89a]*:\n\nChanges add TABs on either or both sides, covering start of line,\nup to any operand for all .*ASM.*_OP definitions.\n\nFrom-SVN: r36608", "tree": {"sha": "c87bf0261d598c97d1b896be615ad1df84a6d3da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c87bf0261d598c97d1b896be615ad1df84a6d3da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de323aa15733d3a075a3586e736f4cb9b1383ff8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de323aa15733d3a075a3586e736f4cb9b1383ff8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de323aa15733d3a075a3586e736f4cb9b1383ff8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de323aa15733d3a075a3586e736f4cb9b1383ff8/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "71d48a011e5b02201ecc01300f4de4c5510dc5ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71d48a011e5b02201ecc01300f4de4c5510dc5ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71d48a011e5b02201ecc01300f4de4c5510dc5ed"}], "stats": {"total": 114, "additions": 69, "deletions": 45}, "files": [{"sha": "60ce039c2e9fc952784a621d8fc1d0b1cac6df31", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de323aa15733d3a075a3586e736f4cb9b1383ff8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de323aa15733d3a075a3586e736f4cb9b1383ff8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=de323aa15733d3a075a3586e736f4cb9b1383ff8", "patch": "@@ -118,6 +118,30 @@\n \t* config/i386/sysv3.h (INIT_SECTION_ASM_OP): Here.\n \t* config/i386/unix.h (TEXT_SECTION_ASM_OP, DATA_SECTION_ASM_OP,\n \tBSS_SECTION_ASM_OP): Here.\n+\t* config/i860/bsd-gas.h (ASCII_DATA_ASM_OP): Here.\n+\t* config/i860/bsd.h (ASCII_DATA_ASM_OP): Here.\n+\t* config/i860/fx2800.h (ASM_STABS_OP, ASM_STABN_OP, ASM_STABD_OP,\n+\tBSS_ASM_OP): Here, but use trailing spaces.\n+\t* config/i860/i860.h (ASM_BYTE_OP, TEXT_SECTION_ASM_OP,\n+\tDATA_SECTION_ASM_OP): Here.\n+\t* config/i860/paragon.h (ASCII_DATA_ASM_OP, BSS_SECTION_ASM_OP):\n+\tHere.\n+\t* config/i860/sysv3.h (ASCII_DATA_ASM_OP, CTORS_SECTION_ASM_OP,\n+\tDTORS_SECTION_ASM_OP, TDESC_SECTION_ASM_OP): Here.\n+\t* config/i860/sysv4.h (CTORS_SECTION_ASM_OP, DTORS_SECTION_ASM_OP,\n+\tTDESC_SECTION_ASM_OP): Here.\n+\t* config/i960/i960-coff.h (CTORS_SECTION_ASM_OP,\n+\tDTORS_SECTION_ASM_OP, INT_ASM_OP): Here.\n+\t* config/i960/i960.h (TEXT_SECTION_ASM_OP, DATA_SECTION_ASM_OP):\n+\tHere.\n+\t* config/ia64/ia64.h (TEXT_SECTION_ASM_OP, DATA_SECTION_ASM_OP,\n+\tBSS_SECTION_ASM_OP, EH_FRAME_SECTION_ASM_OP,\n+\tUNALIGNED_SHORT_ASM_OP, UNALIGNED_INT_ASM_OP,\n+\tUNALIGNED_DOUBLE_INT_ASM_OP): Here.\n+\t* config/ia64/sysv4.h (ASM_BYTE_OP, STRING_ASM_OP, SKIP_ASM_OP,\n+\tCOMMON_ASM_OP, ASCII_DATA_ASM_OP, INIT_SECTION_ASM_OP,\n+\tFINI_SECTION_ASM_OP, CTORS_SECTION_ASM_OP, DTORS_SECTION_ASM_OP,\n+\tSDATA_SECTION_ASM_OP, SBSS_SECTION_ASM_OP): Here.\n \n 2000-09-25  Richard Henderson  <rth@cygnus.com>\n "}, {"sha": "9965b83cd26dcc9dfedf4fd91736c37342ab7b8e", "filename": "gcc/config/i860/bsd-gas.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de323aa15733d3a075a3586e736f4cb9b1383ff8/gcc%2Fconfig%2Fi860%2Fbsd-gas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de323aa15733d3a075a3586e736f4cb9b1383ff8/gcc%2Fconfig%2Fi860%2Fbsd-gas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fbsd-gas.h?ref=de323aa15733d3a075a3586e736f4cb9b1383ff8", "patch": "@@ -1,2 +1,2 @@\n #undef ASCII_DATA_ASM_OP\n-#define ASCII_DATA_ASM_OP \".ascii\"\n+#define ASCII_DATA_ASM_OP \"\\t.ascii\\t\""}, {"sha": "6123836ef6bf6ea29f21674b18893af964dc94c0", "filename": "gcc/config/i860/bsd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de323aa15733d3a075a3586e736f4cb9b1383ff8/gcc%2Fconfig%2Fi860%2Fbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de323aa15733d3a075a3586e736f4cb9b1383ff8/gcc%2Fconfig%2Fi860%2Fbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fbsd.h?ref=de323aa15733d3a075a3586e736f4cb9b1383ff8", "patch": "@@ -5,7 +5,7 @@\n \n #define DBX_DEBUGGING_INFO\n \n-#define ASCII_DATA_ASM_OP \".byte\"\n+#define ASCII_DATA_ASM_OP \"\\t.byte\\t\"\n #define\tASM_OUTPUT_ASCII(f, p, size)\t\\\n do { register unsigned i;\t\t\\\n   int inside;\t\t\t\t\\"}, {"sha": "dd6098da9a2214746b8b0033d61ce43cb212fdb9", "filename": "gcc/config/i860/fx2800.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de323aa15733d3a075a3586e736f4cb9b1383ff8/gcc%2Fconfig%2Fi860%2Ffx2800.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de323aa15733d3a075a3586e736f4cb9b1383ff8/gcc%2Fconfig%2Fi860%2Ffx2800.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Ffx2800.h?ref=de323aa15733d3a075a3586e736f4cb9b1383ff8", "patch": "@@ -1,6 +1,6 @@\n /* Target definitions for GNU compiler for Alliant FX/2800\n    running Concentrix 2.2\n-   Copyright (C) 1991, 1996, 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1991, 1996, 1998, 1999, 2000 Free Software Foundation, Inc.\n    Contributed by Howard Chu (hyc@hanauma.jpl.nasa.gov).\n \n This file is part of GNU CC.\n@@ -150,9 +150,9 @@ Boston, MA 02111-1307, USA.  */\n    \".stab\" directive instead of the 3 directives in BSD, and the order of\n    arguments is slightly changed. */\n \n-#define ASM_STABS_OP\t\".stab\"\n-#define ASM_STABN_OP\t\".stab\"\n-#define ASM_STABD_OP\t\".stab\"\n+#define ASM_STABS_OP\t\"\\t.stab \"\n+#define ASM_STABN_OP\t\"\\t.stab \"\n+#define ASM_STABD_OP\t\"\\t.stab \"\n \n #define DBX_MEMPARM_STABS_LETTER 'k'\n #define DBX_REGPARM_STABS_LETTER 'r'\n@@ -339,7 +339,7 @@ Boston, MA 02111-1307, USA.  */\n \n /* ??? Is this used anywhere?  */\n #undef BSS_ASM_OP\n-#define BSS_ASM_OP\t\"\\t.lcomm\"\n+#define BSS_ASM_OP\t\"\\t.lcomm \"\n \n #undef ASM_FILE_END\n #define ASM_FILE_END(FILE)\t\t\t\t\t\\"}, {"sha": "72285ad4a79456121546a829983518fe7a8d7bbe", "filename": "gcc/config/i860/i860.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de323aa15733d3a075a3586e736f4cb9b1383ff8/gcc%2Fconfig%2Fi860%2Fi860.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de323aa15733d3a075a3586e736f4cb9b1383ff8/gcc%2Fconfig%2Fi860%2Fi860.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860.h?ref=de323aa15733d3a075a3586e736f4cb9b1383ff8", "patch": "@@ -996,7 +996,7 @@ struct cumulative_args { int ints, floats; };\n \n /* Assembler pseudos to introduce constants of various size.  */\n \n-#define ASM_BYTE_OP \"\\t.byte\"\n+#define ASM_BYTE_OP \"\\t.byte\\t\"\n #define ASM_SHORT \"\\t.short\"\n #define ASM_LONG \"\\t.long\"\n #define ASM_DOUBLE \"\\t.double\"\n@@ -1026,11 +1026,11 @@ struct cumulative_args { int ints, floats; };\n \n /* Output before read-only data.  */\n \n-#define TEXT_SECTION_ASM_OP \".text\"\n+#define TEXT_SECTION_ASM_OP \"\\t.text\"\n \n /* Output before writable data.  */\n \n-#define DATA_SECTION_ASM_OP \".data\"\n+#define DATA_SECTION_ASM_OP \"\\t.data\"\n \n /* How to refer to registers in assembler output.\n    This sequence is indexed by compiler's hard-register-number (see above).  */"}, {"sha": "931510501924a77b69123d09cff452db5c4cea5b", "filename": "gcc/config/i860/paragon.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de323aa15733d3a075a3586e736f4cb9b1383ff8/gcc%2Fconfig%2Fi860%2Fparagon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de323aa15733d3a075a3586e736f4cb9b1383ff8/gcc%2Fconfig%2Fi860%2Fparagon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fparagon.h?ref=de323aa15733d3a075a3586e736f4cb9b1383ff8", "patch": "@@ -74,7 +74,7 @@ Boston, MA 02111-1307, USA.  */\n #define DBX_REGISTER_NUMBER(REGNO) (REGNO)\n \n #undef ASCII_DATA_ASM_OP\n-#define ASCII_DATA_ASM_OP\t\".byte\"\n+#define ASCII_DATA_ASM_OP\t\"\\t.byte\\t\"\n \n /*\n  *\tthe assembler we're using doesn't grok .ident...\n@@ -222,6 +222,6 @@ Boston, MA 02111-1307, USA.  */\n #undef SELECT_RTX_SECTION\n #undef READONLY_DATA_SECTION\n \n-#define\tBSS_SECTION_ASM_OP\t\".bss\"\t\t/* XXX */\n+#define\tBSS_SECTION_ASM_OP\t\"\\t.bss\"\t/* XXX */\n #undef EXTRA_SECTIONS\n #undef EXTRA_SECTION_FUNCTIONS"}, {"sha": "2fbb970cea0fd532631118452755915073ffc1d3", "filename": "gcc/config/i860/sysv3.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de323aa15733d3a075a3586e736f4cb9b1383ff8/gcc%2Fconfig%2Fi860%2Fsysv3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de323aa15733d3a075a3586e736f4cb9b1383ff8/gcc%2Fconfig%2Fi860%2Fsysv3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fsysv3.h?ref=de323aa15733d3a075a3586e736f4cb9b1383ff8", "patch": "@@ -1,5 +1,5 @@\n /* Target definitions for GNU compiler for Intel 80860 running System V.3\n-   Copyright (C) 1991, 1996 Free Software Foundation, Inc.\n+   Copyright (C) 1991, 1996, 2000 Free Software Foundation, Inc.\n    Contributed by Ron Guilmette (rfg@monkeys.com).\n \n This file is part of GNU CC.\n@@ -99,7 +99,7 @@ extern char *current_function_original_name;\n \n /* The routine used to output string literals.\n \n-#define ASCII_DATA_ASM_OP\t\".byte\"\n+#define ASCII_DATA_ASM_OP\t\"\\t.byte\\t\"\n \n #define ASM_OUTPUT_ASCII(FILE, STR, LENGTH)\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n@@ -139,14 +139,14 @@ extern char *current_function_original_name;\n \n \n #undef CTORS_SECTION_ASM_OP\n-#define CTORS_SECTION_ASM_OP\t\".section\\t.ctors,\\\"x\\\"\"\n+#define CTORS_SECTION_ASM_OP\t\"\\t.section\\t.ctors,\\\"x\\\"\"\n #undef DTORS_SECTION_ASM_OP\n-#define DTORS_SECTION_ASM_OP\t\".section\\t.dtors,\\\"x\\\"\"\n+#define DTORS_SECTION_ASM_OP\t\"\\t.section\\t.dtors,\\\"x\\\"\"\n \n /* Add definitions to support the .tdesc section as specified in the svr4\n    ABI for the i860.  */\n \n-#define TDESC_SECTION_ASM_OP    \".section\\t.tdesc\"\n+#define TDESC_SECTION_ASM_OP    \"\\t.section\\t.tdesc\"\n \n #undef EXTRA_SECTIONS\n #define EXTRA_SECTIONS in_const, in_ctors, in_dtors, in_tdesc"}, {"sha": "cd15db15a3626c6c93b9cfee1eb7dcbdba3e278f", "filename": "gcc/config/i860/sysv4.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de323aa15733d3a075a3586e736f4cb9b1383ff8/gcc%2Fconfig%2Fi860%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de323aa15733d3a075a3586e736f4cb9b1383ff8/gcc%2Fconfig%2Fi860%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fsysv4.h?ref=de323aa15733d3a075a3586e736f4cb9b1383ff8", "patch": "@@ -1,5 +1,5 @@\n /* Target definitions for GNU compiler for Intel 80860 running System V.4\n-   Copyright (C) 1991, 1996 Free Software Foundation, Inc.\n+   Copyright (C) 1991, 1996, 2000 Free Software Foundation, Inc.\n    Contributed by Ron Guilmette (rfg@monkeys.com).\n \n This file is part of GNU CC.\n@@ -165,14 +165,14 @@ extern char *current_function_original_name;\n    via the SHF_WRITE attribute.)  */\n  \n #undef CTORS_SECTION_ASM_OP\n-#define CTORS_SECTION_ASM_OP\t\".section\\t.ctors,\\\"aw\\\"\"\n+#define CTORS_SECTION_ASM_OP\t\"\\t.section\\t.ctors,\\\"aw\\\"\"\n #undef DTORS_SECTION_ASM_OP\n-#define DTORS_SECTION_ASM_OP\t\".section\\t.dtors,\\\"aw\\\"\"\n+#define DTORS_SECTION_ASM_OP\t\"\\t.section\\t.dtors,\\\"aw\\\"\"\n \n /* Add definitions to support the .tdesc section as specified in the svr4\n    ABI for the i860.  */\n \n-#define TDESC_SECTION_ASM_OP    \".section\\t.tdesc\"\n+#define TDESC_SECTION_ASM_OP    \"\\t.section\\t.tdesc\"\n \n #undef EXTRA_SECTIONS\n #define EXTRA_SECTIONS in_const, in_ctors, in_dtors, in_tdesc"}, {"sha": "778289980cf0ba708a51ab24863d363c767759f7", "filename": "gcc/config/i960/i960-coff.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de323aa15733d3a075a3586e736f4cb9b1383ff8/gcc%2Fconfig%2Fi960%2Fi960-coff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de323aa15733d3a075a3586e736f4cb9b1383ff8/gcc%2Fconfig%2Fi960%2Fi960-coff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960-coff.h?ref=de323aa15733d3a075a3586e736f4cb9b1383ff8", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler, for \"naked\" Intel\n    80960 using coff object format and coff debugging symbols.\n-   Copyright (C) 1988, 1989, 1991, 1996 Free Software Foundation.\n+   Copyright (C) 1988, 1989, 1991, 1996, 2000 Free Software Foundation.\n    Contributed by Steven McGeady (mcg@omepd.intel.com)\n    Additional work by Glenn Colon-Bonet, Jonathan Shapiro, Andy Wilson\n    Converted to GCC 2.0 by Michael Tiemann, Cygnus Support.\n@@ -38,8 +38,8 @@ Boston, MA 02111-1307, USA.  */\n \n /* Support the ctors and dtors sections for g++.  */\n \n-#define CTORS_SECTION_ASM_OP\t\".section\\t.ctors,\\\"x\\\"\"\n-#define DTORS_SECTION_ASM_OP\t\".section\\t.dtors,\\\"x\\\"\"\n+#define CTORS_SECTION_ASM_OP\t\"\\t.section\\t.ctors,\\\"x\\\"\"\n+#define DTORS_SECTION_ASM_OP\t\"\\t.section\\t.dtors,\\\"x\\\"\"\n \n /* A list of other sections which the compiler might be \"in\" at any\n    given time.  */\n@@ -76,7 +76,7 @@ dtors_section ()\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n }\n \n-#define INT_ASM_OP \".word\"\n+#define INT_ASM_OP \"\\t.word\\t\"\n \n /* A C statement (sans semicolon) to output an element in the table of\n    global constructors.  */"}, {"sha": "dfafa48a25de98fc6a8703695b4e356b328899a5", "filename": "gcc/config/i960/i960.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de323aa15733d3a075a3586e736f4cb9b1383ff8/gcc%2Fconfig%2Fi960%2Fi960.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de323aa15733d3a075a3586e736f4cb9b1383ff8/gcc%2Fconfig%2Fi960%2Fi960.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.h?ref=de323aa15733d3a075a3586e736f4cb9b1383ff8", "patch": "@@ -1330,11 +1330,11 @@ extern struct rtx_def *i960_compare_op0, *i960_compare_op1;\n \n /* Output before read-only data.  */\n \n-#define TEXT_SECTION_ASM_OP \".text\"\n+#define TEXT_SECTION_ASM_OP \"\\t.text\"\n \n /* Output before writable data.  */\n \n-#define DATA_SECTION_ASM_OP \".data\"\n+#define DATA_SECTION_ASM_OP \"\\t.data\"\n \n /* How to refer to registers in assembler output.\n    This sequence is indexed by compiler's hard-register-number (see above).  */"}, {"sha": "5ea5c1291a4e1cc0e19f6935d74d0e1ece847d5d", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de323aa15733d3a075a3586e736f4cb9b1383ff8/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de323aa15733d3a075a3586e736f4cb9b1383ff8/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=de323aa15733d3a075a3586e736f4cb9b1383ff8", "patch": "@@ -1920,17 +1920,17 @@ do {\t\t\t\t\t\t\t\t\t\\\n /* A C expression whose value is a string containing the assembler operation\n    that should precede instructions and read-only data.  */\n \n-#define TEXT_SECTION_ASM_OP \".text\"\n+#define TEXT_SECTION_ASM_OP \"\\t.text\"\n \n /* A C expression whose value is a string containing the assembler operation to\n    identify the following data as writable initialized data.  */\n \n-#define DATA_SECTION_ASM_OP \".data\"\n+#define DATA_SECTION_ASM_OP \"\\t.data\"\n \n /* If defined, a C expression whose value is a string containing the assembler\n    operation to identify the following data as uninitialized global data.  */\n \n-#define BSS_SECTION_ASM_OP \".bss\"\n+#define BSS_SECTION_ASM_OP \"\\t.bss\"\n \n /* Define this macro if jump tables (for `tablejump' insns) should be output in\n    the text section, along with the assembler instructions.  */\n@@ -2498,7 +2498,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n    You should define this symbol if your target supports DWARF 2 frame unwind\n    information and the default definition does not work.  */\n-#define EH_FRAME_SECTION_ASM_OP \".section\\t.IA_64.unwind,\\\"aw\\\"\"\n+#define EH_FRAME_SECTION_ASM_OP \"\\t.section\\t.IA_64.unwind,\\\"aw\\\"\"\n \n /* A C expression that is nonzero if the normal exception table output should\n    be omitted.\n@@ -2605,9 +2605,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n /* C string constants giving the pseudo-op to use for a sequence of\n    2, 4, and 8 byte unaligned constants.  dwarf2out.c needs these.  */\n \n-#define UNALIGNED_SHORT_ASM_OP\t\t\"data2.ua\"\n-#define UNALIGNED_INT_ASM_OP\t\t\"data4.ua\"\n-#define UNALIGNED_DOUBLE_INT_ASM_OP\t\"data8.ua\"\n+#define UNALIGNED_SHORT_ASM_OP\t\t\"\\tdata2.ua\\t\"\n+#define UNALIGNED_INT_ASM_OP\t\t\"\\tdata4.ua\\t\"\n+#define UNALIGNED_DOUBLE_INT_ASM_OP\t\"\\tdata8.ua\\t\"\n \n /* We need to override the default definition for this in dwarf2out.c so that\n    we can emit the necessary # postfix.  */"}, {"sha": "f4e40754fb610fc6d42efdda48636c49f9740351", "filename": "gcc/config/ia64/sysv4.h", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de323aa15733d3a075a3586e736f4cb9b1383ff8/gcc%2Fconfig%2Fia64%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de323aa15733d3a075a3586e736f4cb9b1383ff8/gcc%2Fconfig%2Fia64%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fsysv4.h?ref=de323aa15733d3a075a3586e736f4cb9b1383ff8", "patch": "@@ -8,19 +8,19 @@\n    definitions.  */\n \n #undef ASM_BYTE_OP\n-#define ASM_BYTE_OP \"data1\"\n+#define ASM_BYTE_OP \"\\tdata1\\t\"\n \n #undef STRING_ASM_OP\n-#define STRING_ASM_OP \"stringz\"\n+#define STRING_ASM_OP \"\\tstringz\\t\"\n \n #undef SKIP_ASM_OP\n-#define SKIP_ASM_OP \".skip\"\n+#define SKIP_ASM_OP \"\\t.skip\\t\"\n \n #undef COMMON_ASM_OP\n-#define COMMON_ASM_OP \".common\"\n+#define COMMON_ASM_OP \"\\t.common\\t\"\n \n #undef ASCII_DATA_ASM_OP\n-#define ASCII_DATA_ASM_OP \"string\"\n+#define ASCII_DATA_ASM_OP \"\\tstring\\t\"\n \n /* ??? Unfortunately, .lcomm doesn't work, because it puts things in either\n    .bss or .sbss, and we can't control the decision of which is used.  When\n@@ -70,13 +70,13 @@ while (0)\n /* Intel assembler requires both flags and type if declaring a non-predefined\n    section.  */\n #undef INIT_SECTION_ASM_OP\n-#define INIT_SECTION_ASM_OP\t\".section\\t.init,\\\"ax\\\",\\\"progbits\\\"\"\n+#define INIT_SECTION_ASM_OP\t\"\\t.section\\t.init,\\\"ax\\\",\\\"progbits\\\"\"\n #undef FINI_SECTION_ASM_OP\n-#define FINI_SECTION_ASM_OP\t\".section\\t.fini,\\\"ax\\\",\\\"progbits\\\"\"\n+#define FINI_SECTION_ASM_OP\t\"\\t.section\\t.fini,\\\"ax\\\",\\\"progbits\\\"\"\n #undef CTORS_SECTION_ASM_OP\n-#define CTORS_SECTION_ASM_OP\t\".section\\t.ctors,\\\"aw\\\",\\\"progbits\\\"\"\n+#define CTORS_SECTION_ASM_OP\t\"\\t.section\\t.ctors,\\\"aw\\\",\\\"progbits\\\"\"\n #undef DTORS_SECTION_ASM_OP\n-#define DTORS_SECTION_ASM_OP\t\".section\\t.dtors,\\\"aw\\\",\\\"progbits\\\"\"\n+#define DTORS_SECTION_ASM_OP\t\"\\t.section\\t.dtors,\\\"aw\\\",\\\"progbits\\\"\"\n \n /* A C statement (sans semicolon) to output an element in the table of\n    global constructors.  */\n@@ -245,7 +245,7 @@ extern unsigned int ia64_section_threshold;\n   SDATA_SECTION_FUNCTION\t\t\t\t\t\t\\\n   SBSS_SECTION_FUNCTION\n \n-#define SDATA_SECTION_ASM_OP \".sdata\"\n+#define SDATA_SECTION_ASM_OP \"\\t.sdata\"\n \n #define SDATA_SECTION_FUNCTION\t\t\t\t\t\t\\\n void\t\t\t\t\t\t\t\t\t\\\n@@ -258,7 +258,7 @@ sdata_section ()\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n }\n \n-#define SBSS_SECTION_ASM_OP \".sbss\"\n+#define SBSS_SECTION_ASM_OP \"\\t.sbss\"\n \n #define SBSS_SECTION_FUNCTION\t\t\t\t\t\t\\\n void\t\t\t\t\t\t\t\t\t\\"}]}