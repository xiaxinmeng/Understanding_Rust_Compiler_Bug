{"sha": "a3633438f36dbcef65df4758dcbc552303ad578d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTM2MzM0MzhmMzZkYmNlZjY1ZGY0NzU4ZGNiYzU1MjMwM2FkNTc4ZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-01-02T09:46:07Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-01-02T09:46:07Z"}, "message": "[multiple changes]\n\n2013-01-02  Robert Dewar  <dewar@adacore.com>\n\n\t* err_vars.ads (Warning_Doc_Switch): New flag.\n\t* errout.adb (Error_Msg_Internal): Implement new warning flag\n\tdoc tag stuff (Set_Msg_Insertion_Warning): New procedure.\n\t* errout.ads: Document new insertion sequences ?? ?x? ?.x?\n\t* erroutc.adb (Output_Msg_Text): Handle ?? and ?x? warning doc\n\ttag stuff.\n\t* erroutc.ads (Warning_Msg_Char): New variable.\n\t(Warn_Chr): New field in error message object.\n\t* errutil.adb (Error_Msg): Set Warn_Chr in error message object.\n\t* sem_ch13.adb: Minor reformatting.\n\t* warnsw.adb: Add handling for -gnatw.d and -gnatw.D\n\t(Warning_Doc_Switch).\n\t* warnsw.ads: Add handling of -gnatw.d/.D switches (warning\n\tdoc tag).\n\n2013-01-02  Robert Dewar  <dewar@adacore.com>\n\n\t* opt.ads: Minor reformatting.\n\n2013-01-02  Doug Rupp  <rupp@adacore.com>\n\n\t* init.c: Reorganize VMS section.\n\t(scan_condtions): New function for scanning condition tables.\n\t(__gnat_handle_vms_condtion): Use actual exception name for imported\n\texceptions vice IMPORTED_EXCEPTION.\n\tMove condition table scanning into separate function. Move formerly\n\tspecial handled conditions to system condition table. Use SYS$PUTMSG\n\toutput to fill exception message field for formally special handled\n\tcondtions, in particular HPARITH to provide more clues about cause and\n\tlocation then raised from the translated image.\n\nFrom-SVN: r194784", "tree": {"sha": "4d0f6d7aa46aefc5cb77c2d6fa4e0ccdcd2aabc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d0f6d7aa46aefc5cb77c2d6fa4e0ccdcd2aabc0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3633438f36dbcef65df4758dcbc552303ad578d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3633438f36dbcef65df4758dcbc552303ad578d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3633438f36dbcef65df4758dcbc552303ad578d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3633438f36dbcef65df4758dcbc552303ad578d/comments", "author": null, "committer": null, "parents": [{"sha": "6a04272a9a6981d30d4c21d99f10405c9a48a5c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a04272a9a6981d30d4c21d99f10405c9a48a5c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a04272a9a6981d30d4c21d99f10405c9a48a5c6"}], "stats": {"total": 663, "additions": 434, "deletions": 229}, "files": [{"sha": "ce784251affa90f8d7b51ace00a6b04e6d94651c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3633438f36dbcef65df4758dcbc552303ad578d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3633438f36dbcef65df4758dcbc552303ad578d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a3633438f36dbcef65df4758dcbc552303ad578d", "patch": "@@ -1,3 +1,36 @@\n+2013-01-02  Robert Dewar  <dewar@adacore.com>\n+\n+\t* err_vars.ads (Warning_Doc_Switch): New flag.\n+\t* errout.adb (Error_Msg_Internal): Implement new warning flag\n+\tdoc tag stuff (Set_Msg_Insertion_Warning): New procedure.\n+\t* errout.ads: Document new insertion sequences ?? ?x? ?.x?\n+\t* erroutc.adb (Output_Msg_Text): Handle ?? and ?x? warning doc\n+\ttag stuff.\n+\t* erroutc.ads (Warning_Msg_Char): New variable.\n+\t(Warn_Chr): New field in error message object.\n+\t* errutil.adb (Error_Msg): Set Warn_Chr in error message object.\n+\t* sem_ch13.adb: Minor reformatting.\n+\t* warnsw.adb: Add handling for -gnatw.d and -gnatw.D\n+\t(Warning_Doc_Switch).\n+\t* warnsw.ads: Add handling of -gnatw.d/.D switches (warning\n+\tdoc tag).\n+\n+2013-01-02  Robert Dewar  <dewar@adacore.com>\n+\n+\t* opt.ads: Minor reformatting.\n+\n+2013-01-02  Doug Rupp  <rupp@adacore.com>\n+\n+\t* init.c: Reorganize VMS section.\n+\t(scan_condtions): New function for scanning condition tables.\n+\t(__gnat_handle_vms_condtion): Use actual exception name for imported\n+\texceptions vice IMPORTED_EXCEPTION.\n+\tMove condition table scanning into separate function. Move formerly\n+\tspecial handled conditions to system condition table. Use SYS$PUTMSG\n+\toutput to fill exception message field for formally special handled\n+\tcondtions, in particular HPARITH to provide more clues about cause and\n+\tlocation then raised from the translated image.\n+\n 2013-01-02  Thomas Quinot  <quinot@adacore.com>\n \n \t* sem_ch13.adb (Analyze_Aspect_Specifications): For a Pre/Post"}, {"sha": "0791a353d2cbcedc5abe23954b55965b27ea016a", "filename": "gcc/ada/err_vars.ads", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3633438f36dbcef65df4758dcbc552303ad578d/gcc%2Fada%2Ferr_vars.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3633438f36dbcef65df4758dcbc552303ad578d/gcc%2Fada%2Ferr_vars.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferr_vars.ads?ref=a3633438f36dbcef65df4758dcbc552303ad578d", "patch": "@@ -88,6 +88,12 @@ package Err_Vars is\n    --  Source_Reference line, then this is initialized to No_Source_File,\n    --  to force an initial reference to the real source file name.\n \n+   Warning_Doc_Switch : Boolean := False;\n+   --  If this is set True, then the ??/?x?/?.x? sequences in error messages\n+   --  are active (see errout.ads for details). If this switch is False, then\n+   --  these sequences are ignored (i.e. simply equivalent to a single ?). The\n+   --  -gnatw.d switch sets this flag True, -gnatw.D sets this flag False.\n+\n    ----------------------------------------\n    -- Error Message Insertion Parameters --\n    ----------------------------------------\n@@ -133,7 +139,9 @@ package Err_Vars is\n    --  before any call to Error_Msg_xxx with a < insertion character present.\n    --  Setting is irrelevant if no < insertion character is present. Note\n    --  that it is not necessary to reset this after using it, since the proper\n-   --  procedure is always to set it before issuing such a message.\n+   --  procedure is always to set it before issuing such a message. Note that\n+   --  the warning documentation tag is always [enabled by default] in the\n+   --  case where this flag is True.\n \n    Error_Msg_String : String (1 .. 4096);\n    Error_Msg_Strlen : Natural;"}, {"sha": "88606d209ef94b3c61165ced2c877d079b50aa10", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 57, "deletions": 6, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3633438f36dbcef65df4758dcbc552303ad578d/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3633438f36dbcef65df4758dcbc552303ad578d/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=a3633438f36dbcef65df4758dcbc552303ad578d", "patch": "@@ -821,9 +821,7 @@ package body Errout is\n       --  with a comma space separator (eliminating a possible (style) or\n       --  info prefix).\n \n-      if Error_Msg_Line_Length /= 0\n-        and then Continuation\n-      then\n+      if Error_Msg_Line_Length /= 0 and then Continuation then\n          Cur_Msg := Errors.Last;\n \n          declare\n@@ -894,12 +892,24 @@ package body Errout is\n               Msg_Buffer (M .. Msglen);\n             Newl := Newl + Msglen - M + 1;\n             Errors.Table (Cur_Msg).Text := new String'(Newm (1 .. Newl));\n+\n+            --  Update warning msg flag and message doc char if needed\n+\n+            if Is_Warning_Msg then\n+               if not Errors.Table (Cur_Msg).Warn then\n+                  Errors.Table (Cur_Msg).Warn := True;\n+                  Errors.Table (Cur_Msg).Warn_Chr := Warning_Msg_Char;\n+\n+               elsif Warning_Msg_Char /= ' ' then\n+                  Errors.Table (Cur_Msg).Warn_Chr := Warning_Msg_Char;\n+               end if;\n+            end if;\n          end;\n \n          return;\n       end if;\n \n-      --  Otherwise build error message object for new message\n+      --  Here we build a new error object\n \n       Errors.Append\n         ((Text     => new String'(Msg_Buffer (1 .. Msglen)),\n@@ -911,6 +921,7 @@ package body Errout is\n           Line     => Get_Physical_Line_Number (Sptr),\n           Col      => Get_Column_Number (Sptr),\n           Warn     => Is_Warning_Msg,\n+          Warn_Chr => Warning_Msg_Char,\n           Style    => Is_Style_Msg,\n           Serious  => Is_Serious_Error,\n           Uncond   => Is_Unconditional_Msg,\n@@ -2655,6 +2666,40 @@ package body Errout is\n       C : Character;   -- Current character\n       P : Natural;     -- Current index;\n \n+      procedure Set_Msg_Insertion_Warning;\n+      --  Deal with ? ?? ?x? ?X? insertion sequences\n+\n+      -------------------------------\n+      -- Set_Msg_Insertion_Warning --\n+      -------------------------------\n+\n+      procedure Set_Msg_Insertion_Warning is\n+      begin\n+         Warning_Msg_Char := ' ';\n+\n+         if P + 1 <= Text'Last and then Text (P) = '?' then\n+            if Warning_Doc_Switch then\n+               Warning_Msg_Char := '?';\n+            end if;\n+\n+            P := P + 1;\n+\n+         elsif P + 2 <= Text'Last\n+           and then (Text (P) in 'a' .. 'z'\n+                      or else\n+                     Text (P) in 'A' .. 'Z')\n+           and then Text (P + 1) = '?'\n+         then\n+            if Warning_Doc_Switch then\n+               Warning_Msg_Char := Text (P);\n+            end if;\n+\n+            P := P + 2;\n+         end if;\n+      end Set_Msg_Insertion_Warning;\n+\n+   --  Start of processing for Set_Msg_Text\n+\n    begin\n       Manual_Quote_Mode := False;\n       Is_Unconditional_Msg := False;\n@@ -2725,10 +2770,16 @@ package body Errout is\n                Is_Unconditional_Msg := True;\n \n             when '?' =>\n-               null; -- already dealt with\n+               Set_Msg_Insertion_Warning;\n \n             when '<' =>\n-               null; -- already dealt with\n+\n+               --  If tagging of messages is enabled, and this is a warning,\n+               --  then it is treated as being [enabled by default].\n+\n+               if Error_Msg_Warn and Warning_Doc_Switch then\n+                  Warning_Msg_Char := '?';\n+               end if;\n \n             when '|' =>\n                null; -- already dealt with"}, {"sha": "7dc67a0602d287df96c9944532341e9c54f40288", "filename": "gcc/ada/errout.ads", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3633438f36dbcef65df4758dcbc552303ad578d/gcc%2Fada%2Ferrout.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3633438f36dbcef65df4758dcbc552303ad578d/gcc%2Fada%2Ferrout.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.ads?ref=a3633438f36dbcef65df4758dcbc552303ad578d", "patch": "@@ -59,6 +59,12 @@ package Errout is\n    Error_Msg_Exception : exception renames Err_Vars.Error_Msg_Exception;\n    --  Exception raised if Raise_Exception_On_Error is true\n \n+   Warning_Doc_Switch : Boolean renames Err_Vars.Warning_Doc_Switch;\n+   --  If this is set True, then the ??/?x?/?.x? sequences in error messages\n+   --  are active (see errout.ads for details). If this switch is False, then\n+   --  these sequences are ignored (i.e. simply equivalent to a single ?). The\n+   --  -gnatw.d switch sets this flag True, -gnatw.D sets this flag False.\n+\n    -----------------------------------\n    -- Suppression of Error Messages --\n    -----------------------------------\n@@ -275,6 +281,24 @@ package Errout is\n    --      messages, and the usual style is to include it, since it makes it\n    --      clear that the continuation is part of a warning message.\n \n+   --    Insertion character ?? (two question marks)\n+   --      Like ?, but if the flag Warn_Doc_Switch is True, adds the string\n+   --      \"[enabled by default]\" at the end of the warning message. In the\n+   --      case of continuations, use this in each continuation message.\n+\n+   --    Insertion character ?x? (warning with switch)\n+   --      Like ?, but if the flag Warn_Doc_Switch is True, adds the string\n+   --      \"[-gnatwx]\" at the end of the warning message. x is a lower case\n+   --      letter. In the case of continuations, use this on each continuation\n+   --      message.\n+\n+   --    Insertion character ?X? (warning with dot switch)\n+   --      Like ?, but if the flag Warn_Doc_Switch is True, adds the string\n+   --      \"[-gnatw.x]\" at the end of the warning message. X is an upper case\n+   --      letter corresponding to the lower case letter x in the message. In\n+   --      the case of continuations, use this on each continuation\n+   --      message.\n+\n    --    Insertion character < (Less Than: conditional warning message)\n    --      The character < appearing anywhere in a message is used for a\n    --      conditional error message. If Error_Msg_Warn is True, then the"}, {"sha": "35f71a4a7cfa19fd3c600320213511cc86cad334", "filename": "gcc/ada/erroutc.adb", "status": "modified", "additions": 99, "deletions": 67, "changes": 166, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3633438f36dbcef65df4758dcbc552303ad578d/gcc%2Fada%2Ferroutc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3633438f36dbcef65df4758dcbc552303ad578d/gcc%2Fada%2Ferroutc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferroutc.adb?ref=a3633438f36dbcef65df4758dcbc552303ad578d", "patch": "@@ -442,13 +442,37 @@ package body Erroutc is\n       Length : Nat;\n       --  Maximum total length of lines\n \n-      Txt   : constant String_Ptr := Errors.Table (E).Text;\n-      Len   : constant Natural    := Txt'Length;\n-      Ptr   : Natural;\n-      Split : Natural;\n-      Start : Natural;\n+      Text     : constant String_Ptr := Errors.Table (E).Text;\n+      Warn     : constant Boolean    := Errors.Table (E).Warn;\n+      Warn_Chr : constant Character  := Errors.Table (E).Warn_Chr;\n+      Warn_Tag : String_Ptr;\n+      Ptr      : Natural;\n+      Split    : Natural;\n+      Start    : Natural;\n \n    begin\n+      --  Add warning doc tag if needed\n+\n+      if Warn and then Warn_Chr /= ' ' then\n+         if Warn_Chr = '?' then\n+            Warn_Tag := new String'(\" [enabled by default]\");\n+\n+         elsif Warn_Chr in 'a' .. 'z' then\n+            Warn_Tag := new String'(\" [-gnatw\" & Warn_Chr & ']');\n+\n+         else pragma Assert (Warn_Chr in 'A' .. 'Z');\n+            Warn_Tag :=\n+              new String'(\" [-gnatw.\"\n+                          & Character'Val (Character'Pos (Warn_Chr) + 32)\n+                          & ']');\n+         end if;\n+\n+      else\n+         Warn_Tag := new String'(\"\");\n+      end if;\n+\n+      --  Set error message line length\n+\n       if Error_Msg_Line_Length = 0 then\n          Length := Nat'Last;\n       else\n@@ -457,87 +481,95 @@ package body Erroutc is\n \n       Max := Integer (Length - Column + 1);\n \n-      --  For warning message, add \"warning: \" unless msg starts with \"info: \"\n+      declare\n+         Txt : constant String := Text.all & Warn_Tag.all;\n+         Len : constant Natural    := Txt'Length;\n \n-      if Errors.Table (E).Warn then\n-         if Len < 6 or else Txt (Txt'First .. Txt'First + 5) /= \"info: \" then\n-            Write_Str (\"warning: \");\n-            Max := Max - 9;\n-         end if;\n+      begin\n+         --  For warning, add \"warning: \" unless msg starts with \"info: \"\n \n-      --  No prefix needed for style message, since \"(style)\" is there already\n+         if Errors.Table (E).Warn then\n+            if Len < 6\n+              or else Txt (Txt'First .. Txt'First + 5) /= \"info: \"\n+            then\n+               Write_Str (\"warning: \");\n+               Max := Max - 9;\n+            end if;\n \n-      elsif Errors.Table (E).Style then\n-         null;\n+            --  No prefix needed for style message, \"(style)\" is there already\n \n-      --  All other cases, add \"error: \"\n+         elsif Errors.Table (E).Style then\n+            null;\n \n-      elsif Opt.Unique_Error_Tag then\n-         Write_Str (\"error: \");\n-         Max := Max - 7;\n-      end if;\n+            --  All other cases, add \"error: \"\n \n-      --  Here we have to split the message up into multiple lines\n+         elsif Opt.Unique_Error_Tag then\n+            Write_Str (\"error: \");\n+            Max := Max - 7;\n+         end if;\n \n-      Ptr := 1;\n-      loop\n-         --  Make sure we do not have ludicrously small line\n+         --  Here we have to split the message up into multiple lines\n \n-         Max := Integer'Max (Max, 20);\n+         Ptr := 1;\n+         loop\n+            --  Make sure we do not have ludicrously small line\n \n-         --  If remaining text fits, output it respecting LF and we are done\n+            Max := Integer'Max (Max, 20);\n \n-         if Len - Ptr < Max then\n-            for J in Ptr .. Len loop\n-               if Txt (J) = ASCII.LF then\n-                  Write_Eol;\n-                  Write_Spaces (Offs);\n-               else\n-                  Write_Char (Txt (J));\n-               end if;\n-            end loop;\n+            --  If remaining text fits, output it respecting LF and we are done\n \n-            return;\n+            if Len - Ptr < Max then\n+               for J in Ptr .. Len loop\n+                  if Txt (J) = ASCII.LF then\n+                     Write_Eol;\n+                     Write_Spaces (Offs);\n+                  else\n+                     Write_Char (Txt (J));\n+                  end if;\n+               end loop;\n+\n+               return;\n \n             --  Line does not fit\n \n-         else\n-            Start := Ptr;\n+            else\n+               Start := Ptr;\n \n-            --  First scan forward looking for a hard end of line\n+               --  First scan forward looking for a hard end of line\n \n-            for Scan in Ptr .. Ptr + Max - 1 loop\n-               if Txt (Scan) = ASCII.LF then\n-                  Split := Scan - 1;\n-                  Ptr := Scan + 1;\n-                  goto Continue;\n-               end if;\n-            end loop;\n+               for Scan in Ptr .. Ptr + Max - 1 loop\n+                  if Txt (Scan) = ASCII.LF then\n+                     Split := Scan - 1;\n+                     Ptr := Scan + 1;\n+                     goto Continue;\n+                  end if;\n+               end loop;\n \n-            --  Otherwise scan backwards looking for a space\n+               --  Otherwise scan backwards looking for a space\n \n-            for Scan in reverse Ptr .. Ptr + Max - 1 loop\n-               if Txt (Scan) = ' ' then\n-                  Split := Scan - 1;\n-                  Ptr := Scan + 1;\n-                  goto Continue;\n-               end if;\n-            end loop;\n+               for Scan in reverse Ptr .. Ptr + Max - 1 loop\n+                  if Txt (Scan) = ' ' then\n+                     Split := Scan - 1;\n+                     Ptr := Scan + 1;\n+                     goto Continue;\n+                  end if;\n+               end loop;\n \n-            --  If we fall through, no space, so split line arbitrarily\n+               --  If we fall through, no space, so split line arbitrarily\n \n-            Split := Ptr + Max - 1;\n-            Ptr := Split + 1;\n-         end if;\n+               Split := Ptr + Max - 1;\n+               Ptr := Split + 1;\n+            end if;\n \n-         <<Continue>>\n-         if Start <= Split then\n-            Write_Line (Txt (Start .. Split));\n-            Write_Spaces (Offs);\n-         end if;\n+            <<Continue>>\n+            if Start <= Split then\n+               Write_Line (Txt (Start .. Split));\n+               Write_Spaces (Offs);\n+            end if;\n \n-         Max := Integer (Length - Column + 1);\n-      end loop;\n+            Max := Integer (Length - Column + 1);\n+         end loop;\n+      end;\n    end Output_Msg_Text;\n \n    --------------------\n@@ -846,9 +878,7 @@ package body Erroutc is\n          --  Remove upper case letter at end, again, we should not be getting\n          --  such names, and what we hope is that the remainder makes sense.\n \n-         if Name_Len > 1\n-           and then Name_Buffer (Name_Len) in 'A' .. 'Z'\n-         then\n+         if Name_Len > 1 and then Name_Buffer (Name_Len) in 'A' .. 'Z' then\n             Name_Len := Name_Len - 1;\n          end if;\n \n@@ -1217,11 +1247,13 @@ package body Erroutc is\n            and then (J = Msg'First or else Msg (J - 1) /= ''')\n          then\n             Is_Warning_Msg := True;\n+            Warning_Msg_Char := ' ';\n \n          elsif Msg (J) = '<'\n            and then (J = Msg'First or else Msg (J - 1) /= ''')\n          then\n             Is_Warning_Msg := Error_Msg_Warn;\n+            Warning_Msg_Char := ' ';\n \n          elsif Msg (J) = '|'\n            and then (J = Msg'First or else Msg (J - 1) /= ''')"}, {"sha": "4e38fbd30fba3465b5bb137977aeba51353c9094", "filename": "gcc/ada/erroutc.ads", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3633438f36dbcef65df4758dcbc552303ad578d/gcc%2Fada%2Ferroutc.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3633438f36dbcef65df4758dcbc552303ad578d/gcc%2Fada%2Ferroutc.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferroutc.ads?ref=a3633438f36dbcef65df4758dcbc552303ad578d", "patch": "@@ -50,6 +50,13 @@ package Erroutc is\n    Is_Warning_Msg : Boolean := False;\n    --  Set True to indicate if current message is warning message\n \n+   Warning_Msg_Char : Character;\n+   --  Warning character, valid only if Is_Warning_Msg is True\n+   --    ' '      -- ? appeared on its own in message\n+   --    '?'      -- ?? appeared in message\n+   --    'x'      -- ?x? appeared in message\n+   --    'X'      -- ?x? appeared in message (X is upper case of x)\n+\n    Is_Style_Msg : Boolean := False;\n    --  Set True to indicate if the current message is a style message\n    --  (i.e. a message whose text starts with the characters \"(style)\").\n@@ -182,6 +189,13 @@ package Erroutc is\n       Warn : Boolean;\n       --  True if warning message (i.e. insertion character ? appeared)\n \n+      Warn_Chr : Character;\n+      --  Warning character, valid only if Warn is True\n+      --    ' '      -- ? appeared on its own in message\n+      --    '?'      -- ?? appeared in message\n+      --    'x'      -- ?x? appeared in message\n+      --    'X'      -- ?x? appeared in message (X is upper case of x)\n+\n       Style : Boolean;\n       --  True if style message (starts with \"(style)\")\n "}, {"sha": "3a087caac667e3dd94e20578194791762f822ed6", "filename": "gcc/ada/errutil.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3633438f36dbcef65df4758dcbc552303ad578d/gcc%2Fada%2Ferrutil.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3633438f36dbcef65df4758dcbc552303ad578d/gcc%2Fada%2Ferrutil.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrutil.adb?ref=a3633438f36dbcef65df4758dcbc552303ad578d", "patch": "@@ -211,6 +211,7 @@ package body Errutil is\n       Errors.Table (Cur_Msg).Col      := Get_Column_Number (Sptr);\n       Errors.Table (Cur_Msg).Style    := Is_Style_Msg;\n       Errors.Table (Cur_Msg).Warn     := Is_Warning_Msg;\n+      Errors.Table (Cur_Msg).Warn_Chr := Warning_Msg_Char;\n       Errors.Table (Cur_Msg).Serious  := Is_Serious_Error;\n       Errors.Table (Cur_Msg).Uncond   := Is_Unconditional_Msg;\n       Errors.Table (Cur_Msg).Msg_Cont := Continuation;"}, {"sha": "158e203716e777964831288cda1b387cb60617a7", "filename": "gcc/ada/init.c", "status": "modified", "additions": 172, "deletions": 139, "changes": 311, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3633438f36dbcef65df4758dcbc552303ad578d/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3633438f36dbcef65df4758dcbc552303ad578d/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=a3633438f36dbcef65df4758dcbc552303ad578d", "patch": "@@ -821,34 +821,46 @@ int __gnat_features_set = 0;\n #endif\n \n /* Define macro symbols for the VMS conditions that become Ada exceptions.\n-   Most of these are also defined in the header file ssdef.h which has not\n-   yet been converted to be recognized by GNU C.  */\n+   It would be better to just include <ssdef.h> */\n \n-/* Defining these as macros, as opposed to external addresses, allows\n-   them to be used in a case statement below.  */\n #define SS$_ACCVIO            12\n #define SS$_HPARITH         1284\n+#define SS$_INTDIV          1156\n #define SS$_STKOVF          1364\n #define SS$_RESIGNAL        2328\n \n+#define MTH$_FLOOVEMAT   1475268       /* Some ACVC_21 CXA tests */\n+\n+/* The following codes must be resignalled, and not handled here. */\n+\n /* These codes are in standard message libraries.  */\n extern int C$_SIGKILL;\n extern int SS$_DEBUG;\n extern int LIB$_KEYNOTFOU;\n extern int LIB$_ACTIMAGE;\n-#define CMA$_EXIT_THREAD 4227492\n-#define MTH$_FLOOVEMAT 1475268       /* Some ACVC_21 CXA tests */\n-#define SS$_INTDIV 1156\n \n /* These codes are non standard, which is to say the author is\n    not sure if they are defined in the standard message libraries\n    so keep them as macros for now.  */\n #define RDB$_STREAM_EOF 20480426\n #define FDL$_UNPRIKW 11829410\n+#define CMA$_EXIT_THREAD 4227492\n+\n+struct cond_sigargs {\n+  unsigned int sigarg;\n+  unsigned int sigargval;\n+};\n+\n+struct cond_subtests {\n+  unsigned int num;\n+  const struct cond_sigargs sigargs[];\n+};\n \n struct cond_except {\n   unsigned int cond;\n   const struct Exception_Data *except;\n+  unsigned int needs_adjust;  /* 1 = adjust PC,  0 = no adjust */\n+  const struct cond_subtests *subtests;\n };\n \n struct descriptor_s {\n@@ -928,53 +940,74 @@ extern Exception_Code Base_Code_In (Exception_Code);\n \n /* DEC Ada specific conditions.  */\n static const struct cond_except dec_ada_cond_except_table [] = {\n-  {ADA$_PROGRAM_ERROR,   &program_error},\n-  {ADA$_USE_ERROR,       &Use_Error},\n-  {ADA$_KEYSIZERR,       &program_error},\n-  {ADA$_STAOVF,          &storage_error},\n-  {ADA$_CONSTRAINT_ERRO, &constraint_error},\n-  {ADA$_IOSYSFAILED,     &Device_Error},\n-  {ADA$_LAYOUT_ERROR,    &Layout_Error},\n-  {ADA$_STORAGE_ERROR,   &storage_error},\n-  {ADA$_DATA_ERROR,      &Data_Error},\n-  {ADA$_DEVICE_ERROR,    &Device_Error},\n-  {ADA$_END_ERROR,       &End_Error},\n-  {ADA$_MODE_ERROR,      &Mode_Error},\n-  {ADA$_NAME_ERROR,      &Name_Error},\n-  {ADA$_STATUS_ERROR,    &Status_Error},\n-  {ADA$_NOT_OPEN,        &Use_Error},\n-  {ADA$_ALREADY_OPEN,    &Use_Error},\n-  {ADA$_USE_ERROR,       &Use_Error},\n-  {ADA$_UNSUPPORTED,     &Use_Error},\n-  {ADA$_FAC_MODE_MISMAT, &Use_Error},\n-  {ADA$_ORG_MISMATCH,    &Use_Error},\n-  {ADA$_RFM_MISMATCH,    &Use_Error},\n-  {ADA$_RAT_MISMATCH,    &Use_Error},\n-  {ADA$_MRS_MISMATCH,    &Use_Error},\n-  {ADA$_MRN_MISMATCH,    &Use_Error},\n-  {ADA$_KEY_MISMATCH,    &Use_Error},\n-  {ADA$_MAXLINEXC,       &constraint_error},\n-  {ADA$_LINEXCMRS,       &constraint_error},\n+  {ADA$_PROGRAM_ERROR,   &program_error, 0, 0},\n+  {ADA$_USE_ERROR,       &Use_Error, 0, 0},\n+  {ADA$_KEYSIZERR,       &program_error, 0, 0},\n+  {ADA$_STAOVF,          &storage_error, 0, 0},\n+  {ADA$_CONSTRAINT_ERRO, &constraint_error, 0, 0},\n+  {ADA$_IOSYSFAILED,     &Device_Error, 0, 0},\n+  {ADA$_LAYOUT_ERROR,    &Layout_Error, 0, 0},\n+  {ADA$_STORAGE_ERROR,   &storage_error, 0, 0},\n+  {ADA$_DATA_ERROR,      &Data_Error, 0, 0},\n+  {ADA$_DEVICE_ERROR,    &Device_Error, 0, 0},\n+  {ADA$_END_ERROR,       &End_Error, 0, 0},\n+  {ADA$_MODE_ERROR,      &Mode_Error, 0, 0},\n+  {ADA$_NAME_ERROR,      &Name_Error, 0, 0},\n+  {ADA$_STATUS_ERROR,    &Status_Error, 0, 0},\n+  {ADA$_NOT_OPEN,        &Use_Error, 0, 0},\n+  {ADA$_ALREADY_OPEN,    &Use_Error, 0, 0},\n+  {ADA$_USE_ERROR,       &Use_Error, 0, 0},\n+  {ADA$_UNSUPPORTED,     &Use_Error, 0, 0},\n+  {ADA$_FAC_MODE_MISMAT, &Use_Error, 0, 0},\n+  {ADA$_ORG_MISMATCH,    &Use_Error, 0, 0},\n+  {ADA$_RFM_MISMATCH,    &Use_Error, 0, 0},\n+  {ADA$_RAT_MISMATCH,    &Use_Error, 0, 0},\n+  {ADA$_MRS_MISMATCH,    &Use_Error, 0, 0},\n+  {ADA$_MRN_MISMATCH,    &Use_Error, 0, 0},\n+  {ADA$_KEY_MISMATCH,    &Use_Error, 0, 0},\n+  {ADA$_MAXLINEXC,       &constraint_error, 0, 0},\n+  {ADA$_LINEXCMRS,       &constraint_error, 0, 0},\n \n #if 0\n    /* Already handled by a pragma Import_Exception\n       in Aux_IO_Exceptions */\n-  {ADA$_LOCK_ERROR,      &Lock_Error},\n-  {ADA$_EXISTENCE_ERROR, &Existence_Error},\n-  {ADA$_KEY_ERROR,       &Key_Error},\n+  {ADA$_LOCK_ERROR,      &Lock_Error, 0, 0},\n+  {ADA$_EXISTENCE_ERROR, &Existence_Error, 0, 0},\n+  {ADA$_KEY_ERROR,       &Key_Error, 0, 0},\n #endif\n \n-  {0,                    0}\n+  {0,                    0, 0, 0}\n };\n \n #endif /* IN_RTS */\n \n-/* Non-DEC Ada specific conditions.  We could probably also put\n-   SS$_HPARITH here and possibly SS$_ACCVIO, SS$_STKOVF.  */\n-static const struct cond_except cond_except_table [] = {\n-  {MTH$_FLOOVEMAT, &constraint_error},\n-  {SS$_INTDIV,     &constraint_error},\n-  {0,               0}\n+/* Non-DEC Ada specific conditions that map to Ada exceptions.  */\n+\n+/* Subtest for ACCVIO Constraint_Error, kept for compatibility,\n+   in hindsight should have just made ACCVIO == Storage_Error.  */\n+#define ACCVIO_REASON_MASK 2\n+#define ACCVIO_VIRTUAL_ADDR 3\n+static const struct cond_subtests accvio_c_e =\n+  {2,  /* number of subtests below */\n+     {\n+       {ACCVIO_REASON_MASK, 0},\n+       {ACCVIO_VIRTUAL_ADDR, 0}\n+      }\n+   };\n+\n+/* Macro flag to adjust PC which gets off by one for some conditions,\n+   not sure if this is reliably true, PC could be off by more for\n+   HPARITH for example, unless a trapb is inserted. */\n+#define NEEDS_ADJUST 1\n+\n+static const struct cond_except system_cond_except_table [] = {\n+  {MTH$_FLOOVEMAT, &constraint_error, 0, 0},\n+  {SS$_INTDIV,     &constraint_error, 0, 0},\n+  {SS$_HPARITH,    &constraint_error, NEEDS_ADJUST, 0},\n+  {SS$_ACCVIO,     &constraint_error, NEEDS_ADJUST, &accvio_c_e},\n+  {SS$_ACCVIO,     &storage_error,    NEEDS_ADJUST, 0},\n+  {SS$_STKOVF,     &storage_error,    NEEDS_ADJUST, 0},\n+  {0,               0, 0, 0}\n };\n \n /* To deal with VMS conditions and their mapping to Ada exceptions,\n@@ -1039,7 +1072,7 @@ __gnat_default_resignal_p (int code)\n \n   for (i = 0, iexcept = 0;\n        cond_resignal_table [i]\n-         && !(iexcept = LIB$MATCH_COND (&code, &cond_resignal_table [i]));\n+\t&& !(iexcept = LIB$MATCH_COND (&code, &cond_resignal_table [i]));\n        i++);\n \n   return iexcept;\n@@ -1092,10 +1125,62 @@ copy_msg (struct descriptor_s *msgdesc, char *message)\n   return 0;\n }\n \n+/* Scan TABLE for a match for the condition contained in SIGARGS,\n+   and return the entry, or the empty entry if no match found.  */\n+\n+static const struct cond_except *\n+  scan_conditions ( int *sigargs, const struct cond_except *table [])\n+{\n+  int i;\n+  struct cond_except entry;\n+\n+  /* Scan the exception condition table for a match and fetch\n+     the associated GNAT exception pointer.  */\n+  for (i = 0; (*table) [i].cond; i++)\n+    {\n+      unsigned int match = LIB$MATCH_COND (&sigargs [1], &(*table) [i].cond);\n+      const struct cond_subtests *subtests  = (*table) [i].subtests;\n+\n+      if (match)\n+\t{\n+\t  if (!subtests)\n+\t    {\n+\t      return &(*table) [i];\n+\t    }\n+\t  else\n+\t    {\n+\t      unsigned int ii;\n+\t      int num = (*subtests).num;\n+\n+\t      /* Perform subtests to differentiate exception.  */\n+\t      for (ii = 0; ii < num; ii++)\n+\t\t{\n+\t\t  unsigned int arg = (*subtests).sigargs [ii].sigarg;\n+\t\t  unsigned int argval = (*subtests).sigargs [ii].sigargval;\n+\n+\t\t  if (sigargs [arg] != argval)\n+\t\t    {\n+\t\t      num = 0;\n+\t\t      break;\n+\t\t    }\n+\t\t}\n+\n+\t      /* All subtests passed.  */\n+\t      if (num == (*subtests).num)\n+\t        return &(*table) [i];\n+\t    }\n+\t}\n+    }\n+\n+    /* No match, return the null terminating entry.  */\n+    return &(*table) [i];\n+}\n+\n long\n __gnat_handle_vms_condition (int *sigargs, void *mechargs)\n {\n   struct Exception_Data *exception = 0;\n+  unsigned int needs_adjust = 0;\n   Exception_Code base_code;\n   struct descriptor_s gnat_facility = {4, 0, \"GNAT\"};\n   char message [Default_Exception_Msg_Max_Length];\n@@ -1106,112 +1191,60 @@ __gnat_handle_vms_condition (int *sigargs, void *mechargs)\n      Import_Exception.  */\n   if (__gnat_resignal_p (sigargs [1]))\n     return SS$_RESIGNAL;\n+#ifndef IN_RTS\n+  /* toplev.c handles this for compiler.  */\n+  if (sigargs [1] == SS$_HPARITH)\n+    return SS$_RESIGNAL;\n+#endif\n \n #ifdef IN_RTS\n   /* See if it's an imported exception.  Beware that registered exceptions\n      are bound to their base code, with the severity bits masked off.  */\n   base_code = Base_Code_In ((Exception_Code) sigargs[1]);\n   exception = Coded_Exception (base_code);\n-\n-  if (exception)\n-    {\n-      message[0] = 0;\n-\n-      /* Subtract PC & PSL fields which messes with PUTMSG.  */\n-      sigargs[0] -= 2;\n-      SYS$PUTMSG (sigargs, copy_msg, &gnat_facility, message);\n-      sigargs[0] += 2;\n-      msg = message;\n-\n-      exception->Name_Length = 19;\n-      /* ??? The full name really should be get SYS$GETMSG returns.  */\n-      exception->Full_Name = \"IMPORTED_EXCEPTION\";\n-      exception->Import_Code = base_code;\n-\n-#ifdef __IA64\n-      /* Do not adjust the program counter as already points to the next\n-\t instruction (just after the call to LIB$STOP).  */\n-      Raise_From_Signal_Handler (exception, msg);\n-#endif\n-    }\n #endif\n \n   if (exception == 0)\n-    switch (sigargs[1])\n-      {\n-      case SS$_ACCVIO:\n-        if (sigargs[3] == 0)\n-\t  {\n-\t    exception = &constraint_error;\n-\t    msg = \"access zero\";\n-\t  }\n-\telse\n-\t  {\n-\t    exception = &storage_error;\n-\t    msg = \"stack overflow or erroneous memory access\";\n-\t  }\n-\t__gnat_adjust_context_for_raise (SS$_ACCVIO, (void *)mechargs);\n-\tbreak;\n-\n-      case SS$_STKOVF:\n-\texception = &storage_error;\n-\tmsg = \"stack overflow\";\n-\t__gnat_adjust_context_for_raise (SS$_STKOVF, (void *)mechargs);\n-\tbreak;\n-\n-      case SS$_HPARITH:\n-#ifndef IN_RTS\n-\treturn SS$_RESIGNAL; /* toplev.c handles for compiler */\n-#else\n-\texception = &constraint_error;\n-\tmsg = \"arithmetic error\";\n-\t__gnat_adjust_context_for_raise (SS$_HPARITH, (void *)mechargs);\n-#endif\n-\tbreak;\n-\n-      default:\n #ifdef IN_RTS\n+    {\n+      int i;\n+      struct cond_except cond;\n+      const struct cond_except *cond_table;\n+      const struct cond_except *cond_tables [] = {dec_ada_cond_except_table,\n+\t\t\t\t\t          system_cond_except_table,\n+\t\t\t\t\t          0};\n+\n+      i = 0;\n+      while ((cond_table = cond_tables[i++]) && !exception)\n \t{\n-\t  int i;\n-\n-\t  /* Scan the DEC Ada exception condition table for a match and fetch\n-\t     the associated GNAT exception pointer.  */\n-\t  for (i = 0;\n-\t       dec_ada_cond_except_table [i].cond &&\n-\t       !LIB$MATCH_COND (&sigargs [1],\n-\t\t\t        &dec_ada_cond_except_table [i].cond);\n-\t       i++);\n-\t  exception = (struct Exception_Data *)\n-\t    dec_ada_cond_except_table [i].except;\n-\n-\t  if (!exception)\n-\t    {\n-\t      /* Scan the VMS standard condition table for a match and fetch\n-\t\t the associated GNAT exception pointer.  */\n-\t      for (i = 0;\n-\t\t   cond_except_table[i].cond &&\n-\t\t   !LIB$MATCH_COND (&sigargs[1], &cond_except_table[i].cond);\n-\t\t   i++);\n-\t      exception = (struct Exception_Data *)\n-\t\tcond_except_table [i].except;\n-\n-\t      if (!exception)\n-\t\t/* User programs expect Non_Ada_Error to be raised, reference\n-\t\t   DEC Ada test CXCONDHAN.  */\n-\t\texception = &Non_Ada_Error;\n-\t    }\n+\t  cond = *scan_conditions (sigargs, &cond_table);\n+\t  exception = (struct Exception_Data *) cond.except;\n \t}\n+\n+      if (exception)\n+\tneeds_adjust = cond.needs_adjust;\n+      else\n+\t/* User programs expect Non_Ada_Error to be raised if no match,\n+\t   reference DEC Ada test CXCONDHAN.  */\n+\texception = &Non_Ada_Error;\n+      }\n #else\n-\texception = &program_error;\n+    {\n+      /* Pretty much everything is just a program error in the compiler */\n+      exception = &program_error;\n+    }\n #endif\n-\tmessage[0] = 0;\n-\t/* Subtract PC & PSL fields which messes with PUTMSG.  */\n-\tsigargs[0] -= 2;\n-\tSYS$PUTMSG (sigargs, copy_msg, &gnat_facility, message);\n-\tsigargs[0] += 2;\n-\tmsg = message;\n-\tbreak;\n-      }\n+\n+  message[0] = 0;\n+  /* Subtract PC & PSL fields as per ABI for SYS$PUTMSG.  */\n+  sigargs[0] -= 2;\n+  SYS$PUTMSG (sigargs, copy_msg, &gnat_facility, message);\n+  /* Add back PC & PSL fields as per ABI for SYS$PUTMSG.  */\n+  sigargs[0] += 2;\n+  msg = message;\n+\n+  if (needs_adjust)\n+    __gnat_adjust_context_for_raise (sigargs [1], (void *)mechargs);\n \n   Raise_From_Signal_Handler (exception, msg);\n }\n@@ -1244,11 +1277,11 @@ __gnat_adjust_context_for_raise (int signo ATTRIBUTE_UNUSED, void *ucontext)\n   if (signo == SS$_HPARITH)\n     {\n       /* Sub one to the address of the instruction signaling the condition,\n-         located in the sigargs array.  */\n+\t located in the sigargs array.  */\n \n       CHF$MECH_ARRAY * mechargs = (CHF$MECH_ARRAY *) ucontext;\n       CHF$SIGNAL_ARRAY * sigargs\n-        = (CHF$SIGNAL_ARRAY *) mechargs->chf$q_mch_sig_addr;\n+\t= (CHF$SIGNAL_ARRAY *) mechargs->chf$q_mch_sig_addr;\n \n       int vcount = sigargs->chf$is_sig_args;\n       int * pc_slot = & (&sigargs->chf$l_sig_name)[vcount-2];"}, {"sha": "39a341ae68128c6bce73f2939353d839e9910263", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3633438f36dbcef65df4758dcbc552303ad578d/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3633438f36dbcef65df4758dcbc552303ad578d/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=a3633438f36dbcef65df4758dcbc552303ad578d", "patch": "@@ -1533,7 +1533,8 @@ package Opt is\n    Warn_On_Hiding : Boolean := False;\n    --  GNAT\n    --  Set to True to generate warnings if a declared entity hides another\n-   --  entity. The default is that this warning is suppressed.\n+   --  entity. The default is that this warning is suppressed. Modified by\n+   --  use of -gnatwh/H.\n \n    Warn_On_Modified_Unread : Boolean := False;\n    --  GNAT\n@@ -1593,6 +1594,7 @@ package Opt is\n    --  GNAT\n    --  Set to True to generate warnings for redundant constructs (e.g. useless\n    --  assignments/conversions). The default is that this warning is disabled.\n+   --  Modified by use of -gnatwr/R.\n \n    Warn_On_Reverse_Bit_Order : Boolean := True;\n    --  GNAT"}, {"sha": "9f8ce2078d484999b2fe4403449656b5e8491675", "filename": "gcc/ada/scn.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3633438f36dbcef65df4758dcbc552303ad578d/gcc%2Fada%2Fscn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3633438f36dbcef65df4758dcbc552303ad578d/gcc%2Fada%2Fscn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscn.adb?ref=a3633438f36dbcef65df4758dcbc552303ad578d", "patch": "@@ -339,9 +339,9 @@ package body Scn is\n \n             if Warn_On_Obsolescent_Feature then\n                Error_Msg\n-                 (\"use of \"\":\"\" is an obsolescent feature (RM J.2(3))?\", S);\n+                 (\"?j?use of \"\":\"\" is an obsolescent feature (RM J.2(3))\", S);\n                Error_Msg\n-                 (\"\\use \"\"'#\"\" instead?\", S);\n+                 (\"\\?j?use \"\"'#\"\" instead\", S);\n             end if;\n          end if;\n       end Check_Obsolete_Base_Char;\n@@ -382,8 +382,8 @@ package body Scn is\n \n                if Warn_On_Obsolescent_Feature then\n                   Error_Msg_SC\n-                    (\"use of \"\"'%\"\" is an obsolescent feature (RM J.2(4))?\");\n-                  Error_Msg_SC (\"\\use \"\"\"\"\"\" instead?\");\n+                    (\"?j?use of \"\"'%\"\" is an obsolescent feature (RM J.2(4))\");\n+                  Error_Msg_SC (\"\\?j?use \"\"\"\"\"\" instead\");\n                end if;\n             end if;\n \n@@ -398,8 +398,8 @@ package body Scn is\n \n                if Warn_On_Obsolescent_Feature then\n                   Error_Msg_SC\n-                    (\"use of \"\"'!\"\" is an obsolescent feature (RM J.2(2))?\");\n-                  Error_Msg_SC (\"\\use \"\"'|\"\" instead?\");\n+                    (\"?j?use of \"\"'!\"\" is an obsolescent feature (RM J.2(2))\");\n+                  Error_Msg_SC (\"\\?j?use \"\"'|\"\" instead\");\n                end if;\n             end if;\n "}, {"sha": "b23b29989841c9d3eca0f633f06a3740ec03a397", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3633438f36dbcef65df4758dcbc552303ad578d/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3633438f36dbcef65df4758dcbc552303ad578d/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=a3633438f36dbcef65df4758dcbc552303ad578d", "patch": "@@ -1610,6 +1610,7 @@ package body Sem_Ch13 is\n                   if Nkind (Parent (N)) = N_Compilation_Unit then\n                      declare\n                         Aux : constant Node_Id := Aux_Decls_Node (Parent (N));\n+\n                      begin\n                         if No (Pragmas_After (Aux)) then\n                            Set_Pragmas_After (Aux, New_List);\n@@ -2014,9 +2015,9 @@ package body Sem_Ch13 is\n \n       if Warn_On_Obsolescent_Feature then\n          Error_Msg_N\n-           (\"at clause is an obsolescent feature (RM J.7(2))?\", N);\n+           (\"?j?at clause is an obsolescent feature (RM J.7(2))\", N);\n          Error_Msg_N\n-           (\"\\use address attribute definition clause instead?\", N);\n+           (\"\\?j?use address attribute definition clause instead\", N);\n       end if;\n \n       --  Rewrite as address clause\n@@ -4720,9 +4721,9 @@ package body Sem_Ch13 is\n \n             if Warn_On_Obsolescent_Feature then\n                Error_Msg_N\n-                 (\"mod clause is an obsolescent feature (RM J.8)?\", N);\n+                 (\"?j?mod clause is an obsolescent feature (RM J.8)\", N);\n                Error_Msg_N\n-                 (\"\\use alignment attribute definition clause instead?\", N);\n+                 (\"\\?j?use alignment attribute definition clause instead?\", N);\n             end if;\n \n             if Present (P) then"}, {"sha": "4835c1c918ad9c3ca3f98c7973e440b907e5feef", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3633438f36dbcef65df4758dcbc552303ad578d/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3633438f36dbcef65df4758dcbc552303ad578d/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=a3633438f36dbcef65df4758dcbc552303ad578d", "patch": "@@ -6912,10 +6912,10 @@ package body Sem_Ch6 is\n          if Mode = 'F' then\n             if not Raise_Exception_Call then\n                Error_Msg_N\n-                 (\"?RETURN statement missing following this statement!\",\n+                 (\"??RETURN statement missing following this statement!\",\n                   Last_Stm);\n                Error_Msg_N\n-                 (\"\\?Program_Error may be raised at run time!\",\n+                 (\"\\??Program_Error may be raised at run time!\",\n                   Last_Stm);\n             end if;\n "}, {"sha": "26183a690c584fe6230a7b23b03a311ff4a888c6", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3633438f36dbcef65df4758dcbc552303ad578d/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3633438f36dbcef65df4758dcbc552303ad578d/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=a3633438f36dbcef65df4758dcbc552303ad578d", "patch": "@@ -3095,7 +3095,7 @@ package body Sem_Res is\n \n                if Wrong_Order then\n                   Error_Msg_N\n-                    (\"actuals for this call may be in wrong order?\", N);\n+                    (\"?P?actuals for this call may be in wrong order\", N);\n                end if;\n             end;\n          end;"}, {"sha": "a8d31e452318c6ef4d55955c752134c798f3810b", "filename": "gcc/ada/warnsw.adb", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3633438f36dbcef65df4758dcbc552303ad578d/gcc%2Fada%2Fwarnsw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3633438f36dbcef65df4758dcbc552303ad578d/gcc%2Fada%2Fwarnsw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fwarnsw.adb?ref=a3633438f36dbcef65df4758dcbc552303ad578d", "patch": "@@ -22,8 +22,8 @@\n -- Extensive contributions were provided by Ada Core Technologies Inc.      --\n --                                                                          --\n ------------------------------------------------------------------------------\n-\n-with Opt; use Opt;\n+with Err_Vars; use Err_Vars;\n+with Opt;      use Opt;\n \n package body Warnsw is\n \n@@ -52,6 +52,12 @@ package body Warnsw is\n          when 'C' =>\n             Warn_On_Unrepped_Components         := False;\n \n+         when 'd' =>\n+            Warning_Doc_Switch                     := True;\n+\n+         when 'D' =>\n+            Warning_Doc_Switch                     := False;\n+\n          when 'e' =>\n             Address_Clause_Overlay_Warnings     := True;\n             Check_Unreferenced                  := True;"}]}