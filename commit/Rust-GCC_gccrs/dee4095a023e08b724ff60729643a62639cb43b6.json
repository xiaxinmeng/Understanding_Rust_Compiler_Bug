{"sha": "dee4095a023e08b724ff60729643a62639cb43b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGVlNDA5NWEwMjNlMDhiNzI0ZmY2MDcyOTY0M2E2MjYzOWNiNDNiNg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-07-01T21:20:32Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-07-01T21:20:32Z"}, "message": "ia64.c (symbolic_operand): Reject CONST expressions with the low 13 bits set.\n\n        * config/ia64/ia64.c (symbolic_operand): Reject CONST expressions\n        with the low 13 bits set.\n        (move_operand): Check for CONST|SYMBOL_REF|LABEL_REF directly.\n        * config/ia64/ia64.md (movdi): Likewise.  Expand a CONST with one\n        of the low 13 bits into a CONST plus an adddi3.\n        (load_symptr): Set RTX_UNCHANGING_P.\n\nFrom-SVN: r34821", "tree": {"sha": "9e3d7d71afd854ede03f7bee6fe442ee42fb82ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e3d7d71afd854ede03f7bee6fe442ee42fb82ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dee4095a023e08b724ff60729643a62639cb43b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dee4095a023e08b724ff60729643a62639cb43b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dee4095a023e08b724ff60729643a62639cb43b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dee4095a023e08b724ff60729643a62639cb43b6/comments", "author": null, "committer": null, "parents": [{"sha": "442bd896c07259c6ce8398d65463fbbaf70e7499", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/442bd896c07259c6ce8398d65463fbbaf70e7499", "html_url": "https://github.com/Rust-GCC/gccrs/commit/442bd896c07259c6ce8398d65463fbbaf70e7499"}], "stats": {"total": 57, "additions": 50, "deletions": 7}, "files": [{"sha": "48eef23543b0533bdb7d9836e3824324a40d13c8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dee4095a023e08b724ff60729643a62639cb43b6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dee4095a023e08b724ff60729643a62639cb43b6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dee4095a023e08b724ff60729643a62639cb43b6", "patch": "@@ -1,3 +1,12 @@\n+2000-07-01  Richard Henderson  <rth@cygnus.com>\n+\n+\t* config/ia64/ia64.c (symbolic_operand): Reject CONST expressions\n+\twith the low 13 bits set.\n+\t(move_operand): Check for CONST|SYMBOL_REF|LABEL_REF directly.\n+\t* config/ia64/ia64.md (movdi): Likewise.  Expand a CONST with one\n+\tof the low 13 bits into a CONST plus an adddi3.\n+\t(load_symptr): Set RTX_UNCHANGING_P.\n+\n 2000-06-30  Mark Mitchell  <mark@codesourcery.com>\n \n \t* Makefile.in (c-common.o): Don't depend on c-tree.h or c-lex.h."}, {"sha": "e6dbd107c38700d9bbe4af26822efb412c5fb0a0", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dee4095a023e08b724ff60729643a62639cb43b6/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dee4095a023e08b724ff60729643a62639cb43b6/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=dee4095a023e08b724ff60729643a62639cb43b6", "patch": "@@ -186,6 +186,20 @@ symbolic_operand (op, mode)\n   switch (GET_CODE (op))\n     {\n     case CONST:\n+      op = XEXP (op, 0);\n+      if (GET_CODE (op) != PLUS)\n+\treturn 0;\n+      if (GET_CODE (XEXP (op, 0)) != SYMBOL_REF)\n+\treturn 0;\n+      op = XEXP (op, 1);\n+      if (GET_CODE (op) != CONST_INT)\n+\treturn 0;\n+      /* Force the low 13 bits of the constant to zero so that we do not\n+\t use up so many GOT entries.  */\n+      if (! TARGET_NO_PIC && ! TARGET_AUTO_PIC && (INTVAL (op) & 0x1fff) != 0)\n+\treturn 0;\n+      return 1;\n+\n     case SYMBOL_REF:\n     case LABEL_REF:\n       return 1;\n@@ -270,7 +284,10 @@ move_operand (op, mode)\n      rtx op;\n      enum machine_mode mode;\n {\n-  if (! TARGET_NO_PIC && symbolic_operand (op, mode))\n+  if (! TARGET_NO_PIC\n+      && (GET_CODE (op) == CONST\n+\t  || GET_CODE (op) == SYMBOL_REF\n+\t  || GET_CODE (op) == LABEL_REF))\n     return 0;\n \n   return general_operand (op, mode);"}, {"sha": "c6bfb9f94ebf9e41722df4acbbbd548c616bcb13", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dee4095a023e08b724ff60729643a62639cb43b6/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dee4095a023e08b724ff60729643a62639cb43b6/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=dee4095a023e08b724ff60729643a62639cb43b6", "patch": "@@ -255,7 +255,10 @@\n {\n   /* ??? Should generalize this, so that we can also support 32 bit\n      pointers.  */\n-  if (! TARGET_NO_PIC && symbolic_operand (operands[1], DImode))\n+  if (! TARGET_NO_PIC\n+      && (GET_CODE (operands[1]) == CONST\n+\t  || GET_CODE (operands[1]) == SYMBOL_REF\n+\t  || GET_CODE (operands[1]) == LABEL_REF))\n     {\n       rtx temp;\n \n@@ -273,6 +276,21 @@\n \temit_insn (gen_load_fptr (temp, operands[1]));\n       else if (sdata_symbolic_operand (operands[1], DImode))\n \temit_insn (gen_load_gprel (temp, operands[1]));\n+      else if (GET_CODE (operands[1]) == CONST\n+\t       && GET_CODE (XEXP (operands[1], 0)) == PLUS\n+\t       && GET_CODE (XEXP (XEXP (operands[1], 0), 1)) == CONST_INT\n+\t       && (INTVAL (XEXP (XEXP (operands[1], 0), 1)) & 0x1fff) != 0)\n+\t{\n+\t  HOST_WIDE_INT ofs = INTVAL (XEXP (XEXP (operands[1], 0), 1));\n+\t  rtx sym = XEXP (XEXP (operands[1], 0), 0);\n+\t  rtx subtarget = no_new_pseudos ? temp : gen_reg_rtx (DImode);\n+\n+\t  sym = plus_constant (sym, ofs & ~(HOST_WIDE_INT)0x1fff);\n+\t  ofs &= 0x1fff;\n+\n+\t  emit_insn (gen_load_symptr (subtarget, sym));\n+\t  emit_insn (gen_adddi3 (temp, subtarget, GEN_INT (ofs)));\n+\t}\n       else\n \temit_insn (gen_load_symptr (temp, operands[1]));\n \n@@ -358,14 +376,13 @@\n (define_expand \"load_symptr\"\n   [(set (match_dup 2)\n \t(plus:DI (reg:DI 1) (match_operand:DI 1 \"symbolic_operand\" \"\")))\n-   (set (match_operand:DI 0 \"register_operand\" \"\") (mem:DI (match_dup 2)))]\n+   (set (match_operand:DI 0 \"register_operand\" \"\") (match_dup 3))]\n   \"\"\n   \"\n {\n-  if (reload_in_progress)\n-    operands[2] = operands[0];\n-  else\n-    operands[2] = gen_reg_rtx (DImode);\n+  operands[2] = reload_in_progress ? operands[0] : gen_reg_rtx (DImode);\n+  operands[3] = gen_rtx_MEM (DImode, operands[2]);\n+  RTX_UNCHANGING_P (operands[3]) = 1;\n }\")\n \n (define_insn \"*load_symptr_internal1\""}]}