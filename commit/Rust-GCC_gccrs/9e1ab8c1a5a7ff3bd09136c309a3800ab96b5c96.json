{"sha": "9e1ab8c1a5a7ff3bd09136c309a3800ab96b5c96", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWUxYWI4YzFhNWE3ZmYzYmQwOTEzNmMzMDlhMzgwMGFiOTZiNWM5Ng==", "commit": {"author": {"name": "John David Anglin", "email": "dave@hiauly1.hia.nrc.ca", "date": "2002-12-05T01:57:27Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2002-12-05T01:57:27Z"}, "message": "fptr.c (__canonicalize_funcptr_for_compare): New file and function.\n\n\t* pa/fptr.c (__canonicalize_funcptr_for_compare): New file and function.\n\t* pa.md (canonicalize_funcptr_for_compare): Output library call to\n\tcanonicalize_funcptr_for_compare_libfunc on TARGET_ELF32.\n\t* pa32-linux.h (CANONICALIZE_FUNCPTR_FOR_COMPARE_LIBCALL,\n\tCTOR_LIST_BEGIN): New defines.\n\t* pa/t-linux (LIB2FUNCS_EXTRA): New define.\n\t(fptr.c): Add make rules.\n\nFrom-SVN: r59842", "tree": {"sha": "fda007f92e35470b1291d41085ebd993dff2dde0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fda007f92e35470b1291d41085ebd993dff2dde0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e1ab8c1a5a7ff3bd09136c309a3800ab96b5c96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e1ab8c1a5a7ff3bd09136c309a3800ab96b5c96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e1ab8c1a5a7ff3bd09136c309a3800ab96b5c96", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e1ab8c1a5a7ff3bd09136c309a3800ab96b5c96/comments", "author": null, "committer": null, "parents": [{"sha": "16823694d5a03199161bfb60157a9a6e3a2ee697", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16823694d5a03199161bfb60157a9a6e3a2ee697", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16823694d5a03199161bfb60157a9a6e3a2ee697"}], "stats": {"total": 181, "additions": 177, "deletions": 4}, "files": [{"sha": "00855d97e1b5e7e04f7c8954cbf80f641c9f57d2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e1ab8c1a5a7ff3bd09136c309a3800ab96b5c96/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e1ab8c1a5a7ff3bd09136c309a3800ab96b5c96/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9e1ab8c1a5a7ff3bd09136c309a3800ab96b5c96", "patch": "@@ -1,3 +1,13 @@\n+2002-12-04  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n+\n+\t* pa/fptr.c (__canonicalize_funcptr_for_compare): New file and function.\n+\t* pa.md (canonicalize_funcptr_for_compare): Output library call to\n+\tcanonicalize_funcptr_for_compare_libfunc on TARGET_ELF32.\n+\t* pa32-linux.h (CANONICALIZE_FUNCPTR_FOR_COMPARE_LIBCALL,\n+\tCTOR_LIST_BEGIN): New defines.\n+\t* pa/t-linux (LIB2FUNCS_EXTRA): New define.\n+\t(fptr.c): Add make rules.\n+\n 2002-12-04  Geoffrey Keating  <geoffk@apple.com>\n \n \t* combine.c (combine_simplify_rtx): Add new canonicalizations."}, {"sha": "e0bd88a28420ba07690464f0cb2774bccf39cd36", "filename": "gcc/config/pa/fptr.c", "status": "added", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e1ab8c1a5a7ff3bd09136c309a3800ab96b5c96/gcc%2Fconfig%2Fpa%2Ffptr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e1ab8c1a5a7ff3bd09136c309a3800ab96b5c96/gcc%2Fconfig%2Fpa%2Ffptr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Ffptr.c?ref=9e1ab8c1a5a7ff3bd09136c309a3800ab96b5c96", "patch": "@@ -0,0 +1,127 @@\n+/* Subroutine for function pointer canonicalization on PA-RISC with ELF32.\n+   Copyright 2002 Free Software Foundation, Inc.\n+   Contributed by John David Anglin (dave.anglin@nrc.ca).\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* WARNING: The code is this function depends on internal and undocumented\n+   details of the GNU linker and dynamic loader as implemented for parisc\n+   linux.  */\n+\n+/* This MUST match the defines sysdeps/hppa/dl-machine.h and\n+   bfd/elf32-hppa.c.  */\n+#define GOT_FROM_PLT_STUB (4*4)\n+\n+/* List of byte offsets in _dl_runtime_resolve to search for \"bl\" branches.\n+   The first \"bl\" branch instruction found MUST be a call to fixup.  See\n+   the define for TRAMPOLINE_TEMPLATE in sysdeps/hppa/dl-machine.h.  If\n+   the trampoline template is changed, the list must be appropriately\n+   updated.  The offset of -4 allows for a magic branch at the start of\n+   the template should it be necessary to change the current branch\n+   position.  */\n+#define NOFFSETS 2\n+static int fixup_branch_offset[NOFFSETS] = { 32, -4 };\n+\n+#define GET_FIELD(X, FROM, TO) \\\n+  ((X) >> (31 - (TO)) & ((1 << ((TO) - (FROM) + 1)) - 1))\n+#define SIGN_EXTEND(VAL,BITS) \\\n+  ((int) ((VAL) >> ((BITS) - 1) ? (-1 << (BITS)) | (VAL) : (VAL)))\n+\n+struct link_map;\n+typedef int (*fptr_t) (void);\n+typedef int (*fixup_t) (struct link_map *, unsigned int);\n+extern unsigned int _GLOBAL_OFFSET_TABLE_;\n+\n+/* __canonicalize_funcptr_for_compare must be hidden so that it is not\n+   placed in the dynamic symbol table.  Like millicode functions, it\n+   must be linked into all binaries in order access the got table of \n+   that binary.  However, we don't use the millicode calling convention\n+   and the routine must be a normal function so that it can be compiled\n+   as pic code.  */\n+unsigned int __canonicalize_funcptr_for_compare (fptr_t)\n+      __attribute__ ((visibility (\"hidden\")));\n+\n+unsigned int\n+__canonicalize_funcptr_for_compare (fptr)\n+     fptr_t fptr;\n+{\n+  static unsigned int fixup_plabel[2];\n+  static fixup_t fixup;\n+  unsigned int *plabel, *got;\n+\n+  /* -1 is special.  It is used in crtend to mark the end of a list of\n+     function pointers.  Also return immediately if the plabel bit is\n+     not set in the function pointer.  In this case, the function pointer\n+     points directly to the function.  */\n+  if ((int) fptr == -1 || !((int) fptr & 2))\n+    return (unsigned int) fptr;\n+\n+  /* The function pointer points to a function descriptor (plabel).  If\n+     the plabel hasn't been resolved, the first word of the plabel points\n+     to the entry of the PLT stub just before the global offset table.\n+     The second word in the plabel contains the relocation offset for the\n+     function.  */\n+  plabel = (unsigned int *) ((unsigned int) fptr & ~3);\n+  got = (unsigned int *) (plabel[0] + GOT_FROM_PLT_STUB);\n+\n+  /* Return the address of the function if the plabel has been resolved.  */\n+  if (got !=  &_GLOBAL_OFFSET_TABLE_)\n+    return plabel[0];\n+\n+  /* Initialize our plabel for calling fixup if we haven't done so already.\n+     This code needs to be thread safe but we don't have to be too careful\n+     as the result is invariant.  */\n+  if (!fixup)\n+    {\n+      int i;\n+      unsigned int *iptr;\n+\n+      /* Find the first \"bl\" branch in the offset search list.  This is a\n+\t call to fixup or a magic branch to fixup at the beginning of the\n+\t trampoline template.  The fixup function does the actual runtime\n+\t resolution of function decriptors.  We only look for \"bl\" branches\n+\t with a 17-bit pc-relative displacement.  */\n+      for (i = 0; i < NOFFSETS; i++)\n+\t{\n+\t  iptr = (unsigned int *) (got[-2] + fixup_branch_offset[i]);\n+\t  if ((*iptr & 0xfc00e000) == 0xe8000000)\n+\t    break;\n+\t}\n+\n+      /* This should not happen... */\n+      if (i == NOFFSETS)\n+\treturn ~0;\n+\n+      /* Extract the 17-bit displacement from the instruction.  */\n+      iptr += SIGN_EXTEND (GET_FIELD (*iptr, 19, 28) |\n+\t\t\t   GET_FIELD (*iptr, 29, 29) << 10 |\n+\t\t\t   GET_FIELD (*iptr, 11, 15) << 11 |\n+\t\t\t   GET_FIELD (*iptr, 31, 31) << 16, 17);\n+\n+      /* Build a plabel for an indirect call to fixup.  */\n+      fixup_plabel[0] = (unsigned int) iptr + 8;  /* address of fixup */\n+      fixup_plabel[1] = got[-1];\t\t  /* ltp for fixup */\n+      fixup = (fixup_t) ((int) fixup_plabel | 3);\n+    }\n+\n+  /* Call fixup to resolve the function address.  got[1] contains the\n+     link_map pointer and plabel[1] the relocation offset.  */\n+  fixup ((struct link_map *) got[1], plabel[1]);\n+\n+  return plabel[0];\n+}"}, {"sha": "640196b067da276d9510b72afce63e05c283c6cd", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e1ab8c1a5a7ff3bd09136c309a3800ab96b5c96/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e1ab8c1a5a7ff3bd09136c309a3800ab96b5c96/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=9e1ab8c1a5a7ff3bd09136c309a3800ab96b5c96", "patch": "@@ -7277,9 +7277,20 @@\n \t      (clobber (reg:SI 31))])\n    (set (match_operand:SI 0 \"register_operand\" \"\")\n \t(reg:SI 29))]\n-  \"! TARGET_PORTABLE_RUNTIME && !TARGET_64BIT && !TARGET_ELF32\"\n+  \"!TARGET_PORTABLE_RUNTIME && !TARGET_64BIT\"\n   \"\n {\n+  if (TARGET_ELF32)\n+    {\n+      rtx canonicalize_funcptr_for_compare_libfunc\n+        = init_one_libfunc (CANONICALIZE_FUNCPTR_FOR_COMPARE_LIBCALL);\n+\n+      emit_library_call_value (canonicalize_funcptr_for_compare_libfunc,\n+      \t\t\t       operands[0], LCT_NORMAL, Pmode,\n+\t\t\t       1, operands[1], Pmode);\n+      DONE;\n+    }\n+\n   operands[2] = gen_reg_rtx (SImode);\n   if (GET_CODE (operands[1]) != REG)\n     {"}, {"sha": "f685fa8b88067c4b28d645b2dfd690272e46aa28", "filename": "gcc/config/pa/pa32-linux.h", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e1ab8c1a5a7ff3bd09136c309a3800ab96b5c96/gcc%2Fconfig%2Fpa%2Fpa32-linux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e1ab8c1a5a7ff3bd09136c309a3800ab96b5c96/gcc%2Fconfig%2Fpa%2Fpa32-linux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa32-linux.h?ref=9e1ab8c1a5a7ff3bd09136c309a3800ab96b5c96", "patch": "@@ -29,3 +29,22 @@ Boston, MA 02111-1307, USA.  */\n    subspace stubs, so we allow sibcalls to all functions.  */\n #undef FUNCTION_OK_FOR_SIBCALL\n #define FUNCTION_OK_FOR_SIBCALL(DECL) 1\n+\n+/* We need a libcall to canonicalize function pointers because of\n+   the way function pointers are handled when doing lazy linking.  */\n+#define CANONICALIZE_FUNCPTR_FOR_COMPARE_LIBCALL \\\n+  \"__canonicalize_funcptr_for_compare\"\n+\n+/* The libcall __canonicalize_funcptr_for_compare is referenced in\n+   crtend.o and the reference isn't resolved in objects that don't\n+   compare function pointers.  Thus, we need to play games to provide\n+   a reference in crtbegin.o.  The rest of the define is the same\n+   as that in crtstuff.c  */\n+#define CTOR_LIST_BEGIN \\\n+  asm (\".type __canonicalize_funcptr_for_compare,@function\\n\"\t\t\\\n+\"\t.text\\n\"\t\t\t\t\t\t\t\\\n+\"\t.word __canonicalize_funcptr_for_compare-$PIC_pcrel$0\");\t\\\n+  STATIC func_ptr __CTOR_LIST__[1]\t\t\t\t\t\\\n+    __attribute__ ((__unused__, section(\".ctors\"),\t\t\t\\\n+\t\t    aligned(sizeof(func_ptr))))\t\t\t\t\\\n+    = { (func_ptr) (-1) }"}, {"sha": "561bc009dfebb77397dd789e9006d3110326d1b8", "filename": "gcc/config/pa/t-linux", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e1ab8c1a5a7ff3bd09136c309a3800ab96b5c96/gcc%2Fconfig%2Fpa%2Ft-linux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e1ab8c1a5a7ff3bd09136c309a3800ab96b5c96/gcc%2Fconfig%2Fpa%2Ft-linux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Ft-linux?ref=9e1ab8c1a5a7ff3bd09136c309a3800ab96b5c96", "patch": "@@ -5,8 +5,14 @@\n LIB1ASMFUNCS = _divI _divU _remI _remU _div_const _mulI _dyncall\n LIB1ASMSRC = pa/milli64.S\n \n-# Compile crtbeginS.o and crtendS.o as PIC.\n-CRTSTUFF_T_CFLAGS_S = -fPIC\n-\n # Compile libgcc2.a as PIC.\n TARGET_LIBGCC2_CFLAGS = -fPIC -DELF=1 -DLINUX=1\n+\n+LIB2FUNCS_EXTRA=fptr.c\n+\n+fptr.c: $(srcdir)/config/pa/fptr.c\n+\trm -f fptr.c\n+\tcp $(srcdir)/config/pa/fptr.c .\n+\n+# Compile crtbeginS.o and crtendS.o as PIC.\n+CRTSTUFF_T_CFLAGS_S = -fPIC"}]}