{"sha": "0bf2cf8907a382fd2223ac0975516ab99283eaa8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGJmMmNmODkwN2EzODJmZDIyMjNhYzA5NzU1MTZhYjk5MjgzZWFhOA==", "commit": {"author": {"name": "Ira Rosen", "email": "irar@gcc.gnu.org", "date": "2007-10-25T07:25:55Z"}, "committer": {"name": "Ira Rosen", "email": "irar@gcc.gnu.org", "date": "2007-10-25T07:25:55Z"}, "message": "re PR tree-optimization/33866 (ICE in vect_get_vec_def_for_stmt_copy, at tree-vect-transform.c:1937)\n\n\tPR tree-optimization/33866\n\t* tree-vect-transform.c (vectorizable_store): Check operands of all the\n\tstmts in the group of strided accesses. Get def stmt type for each store\n\tin the group and pass it to vect_get_vec_def_for_stmt_copy ().\n\nFrom-SVN: r129623", "tree": {"sha": "63f9e8f60f8675155450474eb8880ff6b2b25fe3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63f9e8f60f8675155450474eb8880ff6b2b25fe3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0bf2cf8907a382fd2223ac0975516ab99283eaa8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bf2cf8907a382fd2223ac0975516ab99283eaa8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bf2cf8907a382fd2223ac0975516ab99283eaa8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bf2cf8907a382fd2223ac0975516ab99283eaa8/comments", "author": null, "committer": null, "parents": [{"sha": "e2520c41ed9b0b06cdb82e6f2a767d0d8bbb2833", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2520c41ed9b0b06cdb82e6f2a767d0d8bbb2833", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2520c41ed9b0b06cdb82e6f2a767d0d8bbb2833"}], "stats": {"total": 73, "additions": 68, "deletions": 5}, "files": [{"sha": "ad09b5864ad31bbea9d0d538320137e301af8449", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bf2cf8907a382fd2223ac0975516ab99283eaa8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bf2cf8907a382fd2223ac0975516ab99283eaa8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0bf2cf8907a382fd2223ac0975516ab99283eaa8", "patch": "@@ -1,3 +1,10 @@\n+2007-10-25  Ira Rosen  <irar@il.ibm.com>\n+\n+\tPR tree-optimization/33866\n+\t* tree-vect-transform.c (vectorizable_store): Check operands of all the\n+\tstmts in the group of strided accesses. Get def stmt type for each store\n+\tin the group and pass it to vect_get_vec_def_for_stmt_copy ().\n+\n 2007-10-25  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/constraints.md (Y0): Rename register constraint to Yz."}, {"sha": "0164f1f8fde222ccad320b28873bada02fb3f9a8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bf2cf8907a382fd2223ac0975516ab99283eaa8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bf2cf8907a382fd2223ac0975516ab99283eaa8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0bf2cf8907a382fd2223ac0975516ab99283eaa8", "patch": "@@ -1,3 +1,9 @@\n+2007-10-25  Martin Michlmayr <tbm@cyrius.com>\n+            Ira Rosen  <irar@il.ibm.com>\n+\n+\tPR tree-optimization/33866\n+\t* gcc.dg/vect/pr33866.c: New testcase.\n+\n 2007-10-24  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.target/i386/pr11001-*.c: Remove -m32 from compile flags."}, {"sha": "fbb97ebca21865bffeab8ff9ee3ea5374d05fcc2", "filename": "gcc/testsuite/gcc.dg/vect/pr33866.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bf2cf8907a382fd2223ac0975516ab99283eaa8/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr33866.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bf2cf8907a382fd2223ac0975516ab99283eaa8/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr33866.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr33866.c?ref=0bf2cf8907a382fd2223ac0975516ab99283eaa8", "patch": "@@ -0,0 +1,31 @@\n+/* Testcase by Martin Michlmayr <tbm@cyrius.com> */\n+/* { dg-do compile } */\n+\n+typedef struct\n+{\n+  long *coords;\n+}\n+fill_iter_info;\n+\n+extern H5Diterate (fill_iter_info *);\n+\n+void test_select_fill_hyper_simple (long *offset)\n+{\n+  long start[2];\n+  int num_points;\n+  long points[16][2];\n+  fill_iter_info iter_info;\n+  int i, j;\n+  iter_info.coords = (long *) points;\n+  for (i = 0, num_points = 0; j < (int) start[1]; j++, num_points++)\n+  {\n+    points[num_points][0] = i + start[0];\n+    points[num_points][1] = j + start[1];\n+  }\n+  H5Diterate (&iter_info);\n+}\n+\n+/* Needs interleaving support.  */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target { vect_interleave } } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */\n+"}, {"sha": "4b88bdf7f4389aece69ac311790e509e2d04d816", "filename": "gcc/tree-vect-transform.c", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bf2cf8907a382fd2223ac0975516ab99283eaa8/gcc%2Ftree-vect-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bf2cf8907a382fd2223ac0975516ab99283eaa8/gcc%2Ftree-vect-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-transform.c?ref=0bf2cf8907a382fd2223ac0975516ab99283eaa8", "patch": "@@ -4578,7 +4578,7 @@ vectorizable_store (tree stmt, block_stmt_iterator *bsi, tree *vec_stmt,\n   int nunits = TYPE_VECTOR_SUBPARTS (vectype);\n   int ncopies = LOOP_VINFO_VECT_FACTOR (loop_vinfo) / nunits;\n   int j;\n-  tree next_stmt, first_stmt;\n+  tree next_stmt, first_stmt = NULL_TREE;\n   bool strided_store = false;\n   unsigned int group_size, i;\n   VEC(tree,heap) *dr_chain = NULL, *oprnds = NULL, *result_chain = NULL;\n@@ -4640,9 +4640,28 @@ vectorizable_store (tree stmt, block_stmt_iterator *bsi, tree *vec_stmt,\n   if (STMT_VINFO_STRIDED_ACCESS (stmt_info))\n     {\n       strided_store = true;\n+      first_stmt = DR_GROUP_FIRST_DR (stmt_info);\n       if (!vect_strided_store_supported (vectype)\n \t  && !PURE_SLP_STMT (stmt_info) && !slp)\n-\treturn false;      \n+\treturn false;\n+     \n+      if (first_stmt == stmt)\n+\t{\n+          /* STMT is the leader of the group. Check the operands of all the\n+             stmts of the group.  */\n+          next_stmt = DR_GROUP_NEXT_DR (stmt_info);\n+          while (next_stmt)\n+            {\n+              op = GIMPLE_STMT_OPERAND (next_stmt, 1);\n+              if (!vect_is_simple_use (op, loop_vinfo, &def_stmt, &def, &dt))\n+                {\n+                  if (vect_print_dump_info (REPORT_DETAILS))\n+                    fprintf (vect_dump, \"use not simple.\");\n+                  return false;\n+                }\n+              next_stmt = DR_GROUP_NEXT_DR (vinfo_for_stmt (next_stmt));\n+            }\n+        }\n     }\n \n   if (!vec_stmt) /* transformation not required.  */\n@@ -4657,7 +4676,6 @@ vectorizable_store (tree stmt, block_stmt_iterator *bsi, tree *vec_stmt,\n \n   if (strided_store)\n     {\n-      first_stmt = DR_GROUP_FIRST_DR (stmt_info);\n       first_dr = STMT_VINFO_DATA_REF (vinfo_for_stmt (first_stmt));\n       group_size = DR_GROUP_SIZE (vinfo_for_stmt (first_stmt));\n \n@@ -4803,8 +4821,9 @@ vectorizable_store (tree stmt, block_stmt_iterator *bsi, tree *vec_stmt,\n \t     OPRNDS are of size 1.  */\n \t  for (i = 0; i < group_size; i++)\n \t    {\n-\t      vec_oprnd = vect_get_vec_def_for_stmt_copy (dt, \n-\t\t\t\t\t\t   VEC_index (tree, oprnds, i));\n+\t      op = VEC_index (tree, oprnds, i);\n+\t      vect_is_simple_use (op, loop_vinfo, &def_stmt, &def, &dt);\n+\t      vec_oprnd = vect_get_vec_def_for_stmt_copy (dt, op); \n \t      VEC_replace(tree, dr_chain, i, vec_oprnd);\n \t      VEC_replace(tree, oprnds, i, vec_oprnd);\n \t    }"}]}