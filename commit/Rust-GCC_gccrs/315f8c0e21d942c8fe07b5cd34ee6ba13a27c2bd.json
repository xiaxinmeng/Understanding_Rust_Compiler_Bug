{"sha": "315f8c0e21d942c8fe07b5cd34ee6ba13a27c2bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzE1ZjhjMGUyMWQ5NDJjOGZlMDdiNWNkMzRlZTZiYTEzYTI3YzJiZA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2013-07-30T18:52:03Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2013-07-30T18:52:03Z"}, "message": "Introduce beginnings of a pass_manager class.\n\nThis patch introduces a gcc::pass_manager class and moves various non-GTY\nglobals relating to pass management into it.  The gcc::context gains its\nfirst field: a pointer to the gcc::pass_manager instance.\n\ngcc/\n\t* Makefile.in (PASS_MANAGER_H): New.\n\t(lto-cgraph.o): Depend on CONTEXT_H and PASS_MANAGER_H.\n\t(passes.o): Likewise.\n\t(statistics.o): Likewise.\n\t(cgraphunit.o): Likewise.\n\t(context.o): Depend on PASS_MANAGER_H.\n\n\t* pass_manager.h: New.\n\n\t* cgraphunit.c (cgraph_add_new_function): Update for moves\n\tof globals to fields of pass_manager.\n\t(analyze_function): Likewise.\n\t(expand_function): Likewise.\n\t(ipa_passes): Likewise.\n\t(compile): Likewise.\n\n\t* context.c (context::context): New.\n\t* context.h  (context::context): New.\n\t(context::get_passes): New.\n\t(context::passes_): New.\n\n\t* lto-cgraph.c (input_node): Update for moves of globals to\n\tfields of pass_manager.\n\n\t* passes.c (all_passes): Remove, in favor of a field of the\n\tsame name within the new class pass_manager.\n\t(all_small_ipa_passes): Likewise.\n\t(all_lowering_passes): Likewise.\n\t(all_regular_ipa_passes): Likewise.\n\t(all_late_ipa_passes): Likewise.\n\t(all_lto_gen_passes): Likewise.\n\t(passes_by_id): Likewise.\n\t(passes_by_id_size): Likewise.\n\t(gcc_pass_lists): Remove, in favor of \"pass_lists\" field within\n\tthe new class pass_manager.\n\t(set_pass_for_id): Convert to...\n\t(pass_manager::set_pass_for_id): ...method.\n\t(get_pass_for_id): Convert to...\n\t(pass_manager::get_pass_for_id): ...method.\n\t(register_one_dump_file): Move body of implementation into...\n\t(pass_manager::register_one_dump_file): ...here.\n\t(register_dump_files_1): Convert to...\n\t(pass_manager::register_dump_files_1): ...method.\n\t(register_dump_files): Convert to...\n\t(pass_manager::register_dump_files): ...method.\n\t(create_pass_tab): Update for moves of globals to fields of\n\tpass_manager.\n\t(dump_passes): Move body of implementation into...\n\t(pass_manager::dump_passes): ...here.\n\t(register_pass): Move body of implementation into...\n\t(pass_manager::register_pass): ...here.\n\t(init_optimization_passes): Convert into...\n\t(pass_manager::pass_manager): ...constructor for new\n\tpass_manager class, and initialize the pass_lists array.\n\t(check_profile_consistency): Update for moves of globals to\n\tfields of pass_manager.\n\t(dump_profile_report): Move body of implementation into...\n\t(pass_manager::dump_profile_report): ...here.\n\t(ipa_write_summaries_1): Update for moves of pass lists from\n\tbeing globals to fields of pass_manager.\n\t(ipa_write_optimization_summaries): Likewise.\n\t(ipa_read_summaries):  Likewise.\n\t(ipa_read_optimization_summaries): Likewise.\n\t(execute_all_ipa_stmt_fixups): Likewise.\n\n\t* statistics.c (statistics_fini): Update for moves of globals to\n\tfields of pass_manager.\n\n\t* toplev.c (general_init): Replace call to\n\tinit_optimization_passes with construction of the pass_manager\n\tinstance.\n\n\t* tree-pass.h (all_passes): Remove, in favor of a field of the\n\tsame name within the new class pass_manager.\n\t(all_small_ipa_passes): Likewise.\n\t(all_lowering_passes): Likewise.\n\t(all_regular_ipa_passes): Likewise.\n\t(all_lto_gen_passes): Likewise.\n\t(all_late_ipa_passes): Likewise.\n\t(passes_by_id): Likewise.\n\t(passes_by_id_size): Likewise.\n\t(gcc_pass_lists): Remove, in favor of \"pass_lists\" field within\n\tthe new class pass_manager.\n\t(get_pass_for_id): Remove.\n\ngcc/lto/\n\n\t* Make-lang.in (lto/lto.o:): Depend on CONTEXT_H and\n\tPASS_MANAGER_H.\n\n\t* lto.c (do_whole_program_analysis): Update for move of\n\tall_regular_ipa_passes from a global to a field of class\n\tpass_manager.\n\nFrom-SVN: r201351", "tree": {"sha": "86d36b6befd119e3194601e30d17b0d964537ee4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86d36b6befd119e3194601e30d17b0d964537ee4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/315f8c0e21d942c8fe07b5cd34ee6ba13a27c2bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/315f8c0e21d942c8fe07b5cd34ee6ba13a27c2bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/315f8c0e21d942c8fe07b5cd34ee6ba13a27c2bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/315f8c0e21d942c8fe07b5cd34ee6ba13a27c2bd/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "72be589b8c10def0500a20ed9fe8f371317d7d70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72be589b8c10def0500a20ed9fe8f371317d7d70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72be589b8c10def0500a20ed9fe8f371317d7d70"}], "stats": {"total": 392, "additions": 309, "deletions": 83}, "files": [{"sha": "3c8c2e5e99ab0e562c28ea9f74b398fcef022251", "filename": "gcc/ChangeLog", "status": "modified", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/315f8c0e21d942c8fe07b5cd34ee6ba13a27c2bd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/315f8c0e21d942c8fe07b5cd34ee6ba13a27c2bd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=315f8c0e21d942c8fe07b5cd34ee6ba13a27c2bd", "patch": "@@ -1,3 +1,90 @@\n+2013-07-30  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* Makefile.in (PASS_MANAGER_H): New.\n+\t(lto-cgraph.o): Depend on CONTEXT_H and PASS_MANAGER_H.\n+\t(passes.o): Likewise.\n+\t(statistics.o): Likewise.\n+\t(cgraphunit.o): Likewise.\n+\t(context.o): Depend on PASS_MANAGER_H.\n+\n+\t* pass_manager.h: New.\n+\n+\t* cgraphunit.c (cgraph_add_new_function): Update for moves\n+\tof globals to fields of pass_manager.\n+\t(analyze_function): Likewise.\n+\t(expand_function): Likewise.\n+\t(ipa_passes): Likewise.\n+\t(compile): Likewise.\n+\n+\t* context.c (context::context): New.\n+\t* context.h  (context::context): New.\n+\t(context::get_passes): New.\n+\t(context::passes_): New.\n+\n+\t* lto-cgraph.c (input_node): Update for moves of globals to\n+\tfields of pass_manager.\n+\n+\t* passes.c (all_passes): Remove, in favor of a field of the\n+\tsame name within the new class pass_manager.\n+\t(all_small_ipa_passes): Likewise.\n+\t(all_lowering_passes): Likewise.\n+\t(all_regular_ipa_passes): Likewise.\n+\t(all_late_ipa_passes): Likewise.\n+\t(all_lto_gen_passes): Likewise.\n+\t(passes_by_id): Likewise.\n+\t(passes_by_id_size): Likewise.\n+\t(gcc_pass_lists): Remove, in favor of \"pass_lists\" field within\n+\tthe new class pass_manager.\n+\t(set_pass_for_id): Convert to...\n+\t(pass_manager::set_pass_for_id): ...method.\n+\t(get_pass_for_id): Convert to...\n+\t(pass_manager::get_pass_for_id): ...method.\n+\t(register_one_dump_file): Move body of implementation into...\n+\t(pass_manager::register_one_dump_file): ...here.\n+\t(register_dump_files_1): Convert to...\n+\t(pass_manager::register_dump_files_1): ...method.\n+\t(register_dump_files): Convert to...\n+\t(pass_manager::register_dump_files): ...method.\n+\t(create_pass_tab): Update for moves of globals to fields of\n+\tpass_manager.\n+\t(dump_passes): Move body of implementation into...\n+\t(pass_manager::dump_passes): ...here.\n+\t(register_pass): Move body of implementation into...\n+\t(pass_manager::register_pass): ...here.\n+\t(init_optimization_passes): Convert into...\n+\t(pass_manager::pass_manager): ...constructor for new\n+\tpass_manager class, and initialize the pass_lists array.\n+\t(check_profile_consistency): Update for moves of globals to\n+\tfields of pass_manager.\n+\t(dump_profile_report): Move body of implementation into...\n+\t(pass_manager::dump_profile_report): ...here.\n+\t(ipa_write_summaries_1): Update for moves of pass lists from\n+\tbeing globals to fields of pass_manager.\n+\t(ipa_write_optimization_summaries): Likewise.\n+\t(ipa_read_summaries):  Likewise.\n+\t(ipa_read_optimization_summaries): Likewise.\n+\t(execute_all_ipa_stmt_fixups): Likewise.\n+\n+\t* statistics.c (statistics_fini): Update for moves of globals to\n+\tfields of pass_manager.\n+\n+\t* toplev.c (general_init): Replace call to\n+\tinit_optimization_passes with construction of the pass_manager\n+\tinstance.\n+\n+\t* tree-pass.h (all_passes): Remove, in favor of a field of the\n+\tsame name within the new class pass_manager.\n+\t(all_small_ipa_passes): Likewise.\n+\t(all_lowering_passes): Likewise.\n+\t(all_regular_ipa_passes): Likewise.\n+\t(all_lto_gen_passes): Likewise.\n+\t(all_late_ipa_passes): Likewise.\n+\t(passes_by_id): Likewise.\n+\t(passes_by_id_size): Likewise.\n+\t(gcc_pass_lists): Remove, in favor of \"pass_lists\" field within\n+\tthe new class pass_manager.\n+\t(get_pass_for_id): Remove.\n+\n 2013-07-30  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* config.gcc (arm): Require 64-bit host-wide-int for all ARM target"}, {"sha": "3f8bd70afcaa9afd2f24432b21fc0874d62e6405", "filename": "gcc/Makefile.in", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/315f8c0e21d942c8fe07b5cd34ee6ba13a27c2bd/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/315f8c0e21d942c8fe07b5cd34ee6ba13a27c2bd/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=315f8c0e21d942c8fe07b5cd34ee6ba13a27c2bd", "patch": "@@ -987,6 +987,7 @@ PLUGIN_VERSION_H = plugin-version.h configargs.h\n LIBFUNCS_H = libfuncs.h $(HASHTAB_H)\n GRAPHITE_HTAB_H = graphite-htab.h graphite-clast-to-gimple.h $(HASH_TABLE_H)\n CONTEXT_H = context.h\n+PASS_MANAGER_H = pass_manager.h\n \n #\f\n # Now figure out from those variables how to compile and link.\n@@ -2183,7 +2184,8 @@ lto-cgraph.o: lto-cgraph.c $(CONFIG_H) $(SYSTEM_H) coretypes.h   \\\n    $(HASHTAB_H) langhooks.h $(BASIC_BLOCK_H) \\\n    $(TREE_FLOW_H) $(CGRAPH_H) $(FUNCTION_H) $(GGC_H) $(DIAGNOSTIC_CORE_H) \\\n    $(EXCEPT_H) $(TIMEVAR_H) pointer-set.h $(LTO_STREAMER_H) \\\n-   $(GCOV_IO_H) $(DATA_STREAMER_H) $(TREE_STREAMER_H) $(TREE_PASS_H) profile.h\n+   $(GCOV_IO_H) $(DATA_STREAMER_H) $(TREE_STREAMER_H) $(TREE_PASS_H) \\\n+   profile.h $(CONTEXT_H) $(PASS_MANAGER_H)\n lto-streamer-in.o: lto-streamer-in.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) toplev.h $(DIAGNOSTIC_CORE_H) $(EXPR_H) $(FLAGS_H) $(PARAMS_H) \\\n    input.h $(HASHTAB_H) $(BASIC_BLOCK_H) $(TREE_FLOW_H) $(TREE_PASS_H) \\\n@@ -2745,7 +2747,8 @@ passes.o : passes.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    hosthooks.h $(CGRAPH_H) $(COVERAGE_H) $(TREE_PASS_H) $(TREE_DUMP_H) \\\n    $(GGC_H) $(OPTS_H) $(TREE_FLOW_H) $(TREE_INLINE_H) \\\n    gt-passes.h $(DF_H) $(PREDICT_H) $(LTO_STREAMER_H) \\\n-   $(PLUGIN_H) $(IPA_UTILS_H) passes.def\n+   $(PLUGIN_H) $(IPA_UTILS_H) passes.def \\\n+   $(CONTEXT_H) $(PASS_MANAGER_H)\n \n plugin.o : plugin.c $(PLUGIN_H) $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(HASH_TABLE_H) $(DIAGNOSTIC_CORE_H) $(TREE_H) $(TREE_PASS_H) \\\n@@ -2786,7 +2789,8 @@ function.o : function.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_ERROR_\n    $(TREE_PASS_H) $(DF_H) $(PARAMS_H) bb-reorder.h \\\n    $(COMMON_TARGET_H)\n statistics.o : statistics.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n-   $(TREE_PASS_H) $(TREE_DUMP_H) $(HASH_TABLE_H) statistics.h $(FUNCTION_H)\n+   $(TREE_PASS_H) $(TREE_DUMP_H) $(HASH_TABLE_H) statistics.h \\\n+   $(FUNCTION_H) $(CONTEXT_H) $(PASS_MANAGER_H)\n stmt.o : stmt.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(DUMPFILE_H) $(TM_H) \\\n    $(RTL_H) \\\n    $(TREE_H) $(FLAGS_H) $(FUNCTION_H) insn-config.h hard-reg-set.h $(EXPR_H) \\\n@@ -2908,7 +2912,8 @@ cgraphunit.o : cgraphunit.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(FIBHEAP_H) output.h $(PARAMS_H) $(RTL_H) $(IPA_PROP_H) \\\n    gt-cgraphunit.h tree-iterator.h $(COVERAGE_H) $(TREE_DUMP_H) \\\n    $(GIMPLE_PRETTY_PRINT_H) $(IPA_INLINE_H) $(IPA_UTILS_H) $(CFGLOOP_H) \\\n-   $(LTO_STREAMER_H) output.h $(REGSET_H) $(EXCEPT_H) $(GCC_PLUGIN_H) plugin.h\n+   $(LTO_STREAMER_H) output.h $(REGSET_H) $(EXCEPT_H) $(GCC_PLUGIN_H) \\\n+   plugin.h $(CONTEXT_H) $(PASS_MANAGER_H)\n cgraphclones.o : cgraphclones.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) langhooks.h $(TREE_INLINE_H) toplev.h $(DIAGNOSTIC_CORE_H) $(FLAGS_H) $(GGC_H) \\\n    $(TARGET_H) $(CGRAPH_H) intl.h pointer-set.h $(FUNCTION_H) $(GIMPLE_H) \\\n@@ -3490,7 +3495,7 @@ $(out_object_file): $(out_file) $(CONFIG_H) coretypes.h $(TM_H) $(TREE_H) \\\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) \\\n \t\t$(out_file) $(OUTPUT_OPTION)\n context.o: context.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(GGC_H) \\\n-   $(CONTEXT_H)\n+   $(CONTEXT_H) $(PASS_MANAGER_H)\n \n $(common_out_object_file): $(common_out_file) $(CONFIG_H) $(SYSTEM_H) \\\n     coretypes.h $(COMMON_TARGET_H) $(COMMON_TARGET_DEF_H) $(PARAMS_H) \\"}, {"sha": "ca36937a8194733e7a49e031d7a8515be8203c6d", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/315f8c0e21d942c8fe07b5cd34ee6ba13a27c2bd/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/315f8c0e21d942c8fe07b5cd34ee6ba13a27c2bd/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=315f8c0e21d942c8fe07b5cd34ee6ba13a27c2bd", "patch": "@@ -194,6 +194,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"except.h\"\n #include \"cfgloop.h\"\n #include \"regset.h\"     /* FIXME: For reg_obstack.  */\n+#include \"context.h\"\n+#include \"pass_manager.h\"\n \n /* Queue of cgraph nodes scheduled to be added into cgraph.  This is a\n    secondary queue used during optimization to accommodate passes that\n@@ -478,6 +480,7 @@ cgraph_finalize_function (tree decl, bool nested)\n void\n cgraph_add_new_function (tree fndecl, bool lowered)\n {\n+  gcc::pass_manager *passes = g->get_passes ();\n   struct cgraph_node *node;\n   switch (cgraph_state)\n     {\n@@ -508,7 +511,7 @@ cgraph_add_new_function (tree fndecl, bool lowered)\n \t    push_cfun (DECL_STRUCT_FUNCTION (fndecl));\n \t    gimple_register_cfg_hooks ();\n \t    bitmap_obstack_initialize (NULL);\n-\t    execute_pass_list (all_lowering_passes);\n+\t    execute_pass_list (passes->all_lowering_passes);\n \t    execute_pass_list (pass_early_local_passes.pass.sub);\n \t    bitmap_obstack_release (NULL);\n \t    pop_cfun ();\n@@ -640,7 +643,7 @@ analyze_function (struct cgraph_node *node)\n \n \t  gimple_register_cfg_hooks ();\n \t  bitmap_obstack_initialize (NULL);\n-\t  execute_pass_list (all_lowering_passes);\n+\t  execute_pass_list (g->get_passes ()->all_lowering_passes);\n \t  free_dominance_info (CDI_POST_DOMINATORS);\n \t  free_dominance_info (CDI_DOMINATORS);\n \t  compact_blocks ();\n@@ -1588,7 +1591,7 @@ expand_function (struct cgraph_node *node)\n   /* Signal the start of passes.  */\n   invoke_plugin_callbacks (PLUGIN_ALL_PASSES_START, NULL);\n \n-  execute_pass_list (all_passes);\n+  execute_pass_list (g->get_passes ()->all_passes);\n \n   /* Signal the end of passes.  */\n   invoke_plugin_callbacks (PLUGIN_ALL_PASSES_END, NULL);\n@@ -1807,6 +1810,8 @@ output_in_order (void)\n static void\n ipa_passes (void)\n {\n+  gcc::pass_manager *passes = g->get_passes ();\n+\n   set_cfun (NULL);\n   current_function_decl = NULL;\n   gimple_register_cfg_hooks ();\n@@ -1816,7 +1821,7 @@ ipa_passes (void)\n \n   if (!in_lto_p)\n     {\n-      execute_ipa_pass_list (all_small_ipa_passes);\n+      execute_ipa_pass_list (passes->all_small_ipa_passes);\n       if (seen_error ())\n \treturn;\n     }\n@@ -1843,14 +1848,15 @@ ipa_passes (void)\n       cgraph_process_new_functions ();\n \n       execute_ipa_summary_passes\n-\t((struct ipa_opt_pass_d *) all_regular_ipa_passes);\n+\t((struct ipa_opt_pass_d *) passes->all_regular_ipa_passes);\n     }\n \n   /* Some targets need to handle LTO assembler output specially.  */\n   if (flag_generate_lto)\n     targetm.asm_out.lto_start ();\n \n-  execute_ipa_summary_passes ((struct ipa_opt_pass_d *) all_lto_gen_passes);\n+  execute_ipa_summary_passes ((struct ipa_opt_pass_d *)\n+\t\t\t      passes->all_lto_gen_passes);\n \n   if (!in_lto_p)\n     ipa_write_summaries ();\n@@ -1859,7 +1865,7 @@ ipa_passes (void)\n     targetm.asm_out.lto_end ();\n \n   if (!flag_ltrans && (in_lto_p || !flag_lto || flag_fat_lto_objects))\n-    execute_ipa_pass_list (all_regular_ipa_passes);\n+    execute_ipa_pass_list (passes->all_regular_ipa_passes);\n   invoke_plugin_callbacks (PLUGIN_ALL_IPA_PASSES_END, NULL);\n \n   bitmap_obstack_release (NULL);\n@@ -1985,7 +1991,7 @@ compile (void)\n \n   cgraph_materialize_all_clones ();\n   bitmap_obstack_initialize (NULL);\n-  execute_ipa_pass_list (all_late_ipa_passes);\n+  execute_ipa_pass_list (g->get_passes ()->all_late_ipa_passes);\n   symtab_remove_unreachable_nodes (true, dump_file);\n #ifdef ENABLE_CHECKING\n   verify_symtab ();"}, {"sha": "b5152419a971a427f5508c74d40bc27e4fea3ad3", "filename": "gcc/context.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/315f8c0e21d942c8fe07b5cd34ee6ba13a27c2bd/gcc%2Fcontext.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/315f8c0e21d942c8fe07b5cd34ee6ba13a27c2bd/gcc%2Fcontext.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcontext.c?ref=315f8c0e21d942c8fe07b5cd34ee6ba13a27c2bd", "patch": "@@ -22,6 +22,12 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"ggc.h\"\n #include \"context.h\"\n+#include \"pass_manager.h\"\n \n /* The singleton holder of global state: */\n gcc::context *g;\n+\n+gcc::context::context()\n+{\n+  passes_ = new gcc::pass_manager (this);\n+}"}, {"sha": "66260cd279a782209e29855c6c82ac36f6af43f6", "filename": "gcc/context.h", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/315f8c0e21d942c8fe07b5cd34ee6ba13a27c2bd/gcc%2Fcontext.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/315f8c0e21d942c8fe07b5cd34ee6ba13a27c2bd/gcc%2Fcontext.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcontext.h?ref=315f8c0e21d942c8fe07b5cd34ee6ba13a27c2bd", "patch": "@@ -22,14 +22,23 @@ along with GCC; see the file COPYING3.  If not see\n \n namespace gcc {\n \n+class pass_manager;\n+\n /* GCC's internal state can be divided into zero or more\n    \"parallel universe\" of state; an instance of this class is one such\n    context of state.  */\n class context\n {\n public:\n+  context();\n+\n+  /* Pass-management.  */\n+\n+  pass_manager *get_passes () { gcc_assert (passes_); return passes_; }\n \n-  /* Currently empty.  */\n+private:\n+  /* Pass-management.  */\n+  pass_manager *passes_;\n \n }; // class context\n "}, {"sha": "19a5de828b86922614bb34e2d380957097ddd623", "filename": "gcc/lto-cgraph.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/315f8c0e21d942c8fe07b5cd34ee6ba13a27c2bd/gcc%2Flto-cgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/315f8c0e21d942c8fe07b5cd34ee6ba13a27c2bd/gcc%2Flto-cgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-cgraph.c?ref=315f8c0e21d942c8fe07b5cd34ee6ba13a27c2bd", "patch": "@@ -47,6 +47,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gcov-io.h\"\n #include \"tree-pass.h\"\n #include \"profile.h\"\n+#include \"context.h\"\n+#include \"pass_manager.h\"\n \n static void output_cgraph_opt_summary (void);\n static void input_cgraph_opt_summary (vec<symtab_node>  nodes);\n@@ -936,6 +938,7 @@ input_node (struct lto_file_decl_data *file_data,\n \t    enum LTO_symtab_tags tag,\n \t    vec<symtab_node> nodes)\n {\n+  gcc::pass_manager *passes = g->get_passes ();\n   tree fn_decl;\n   struct cgraph_node *node;\n   struct bitpack_d bp;\n@@ -981,8 +984,8 @@ input_node (struct lto_file_decl_data *file_data,\n       struct opt_pass *pass;\n       int pid = streamer_read_hwi (ib);\n \n-      gcc_assert (pid < passes_by_id_size);\n-      pass = passes_by_id[pid];\n+      gcc_assert (pid < passes->passes_by_id_size);\n+      pass = passes->passes_by_id[pid];\n       node->ipa_transforms_to_apply.safe_push ((struct ipa_opt_pass_d *) pass);\n     }\n "}, {"sha": "37e8afdfb0008064fdb32224de814546d0608ea6", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/315f8c0e21d942c8fe07b5cd34ee6ba13a27c2bd/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/315f8c0e21d942c8fe07b5cd34ee6ba13a27c2bd/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=315f8c0e21d942c8fe07b5cd34ee6ba13a27c2bd", "patch": "@@ -1,3 +1,12 @@\n+2013-07-30  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* Make-lang.in (lto/lto.o:): Depend on CONTEXT_H and\n+\tPASS_MANAGER_H.\n+\n+\t* lto.c (do_whole_program_analysis): Update for move of\n+\tall_regular_ipa_passes from a global to a field of class\n+\tpass_manager.\n+\n 2013-07-21   Ond\u00c5\u0099ej B\u00c3\u00adlka  <neleai@seznam.cz>\n \n \t* lto-partition.c: Fix typos."}, {"sha": "1acd176dd892e297181d2bb249e4254c3df37d6b", "filename": "gcc/lto/Make-lang.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/315f8c0e21d942c8fe07b5cd34ee6ba13a27c2bd/gcc%2Flto%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/315f8c0e21d942c8fe07b5cd34ee6ba13a27c2bd/gcc%2Flto%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FMake-lang.in?ref=315f8c0e21d942c8fe07b5cd34ee6ba13a27c2bd", "patch": "@@ -85,7 +85,8 @@ lto/lto.o: lto/lto.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(OPTS_H) \\\n \tlanghooks.h $(VEC_H) $(BITMAP_H) pointer-set.h $(IPA_PROP_H) \\\n \t$(COMMON_H) debug.h $(GIMPLE_H) $(LTO_H) $(LTO_TREE_H) \\\n \t$(LTO_TAGS_H) $(LTO_STREAMER_H) $(SPLAY_TREE_H) gt-lto-lto.h \\\n-\t$(TREE_STREAMER_H) $(DATA_STREAMER_H) lto/lto-partition.h\n+\t$(TREE_STREAMER_H) $(DATA_STREAMER_H) lto/lto-partition.h \\\n+\t$(CONTEXT_H) $(PIPELINE_H)\n lto/lto-partition.o: lto/lto-partition.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n \ttoplev.h $(TREE_H) $(TM_H) \\\n \t$(CGRAPH_H) $(TIMEVAR_H) \\"}, {"sha": "32f8326147b0c18b0f45c32c1bc370e49e88da5e", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/315f8c0e21d942c8fe07b5cd34ee6ba13a27c2bd/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/315f8c0e21d942c8fe07b5cd34ee6ba13a27c2bd/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=315f8c0e21d942c8fe07b5cd34ee6ba13a27c2bd", "patch": "@@ -46,6 +46,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"splay-tree.h\"\n #include \"lto-partition.h\"\n #include \"data-streamer.h\"\n+#include \"context.h\"\n+#include \"pass_manager.h\"\n \n static GTY(()) tree first_personality_decl;\n \n@@ -3694,7 +3696,7 @@ do_whole_program_analysis (void)\n   bitmap_obstack_initialize (NULL);\n   cgraph_state = CGRAPH_STATE_IPA_SSA;\n \n-  execute_ipa_pass_list (all_regular_ipa_passes);\n+  execute_ipa_pass_list (g->get_passes ()->all_regular_ipa_passes);\n   symtab_remove_unreachable_nodes (false, dump_file);\n \n   if (cgraph_dump_file)"}, {"sha": "f66cd80408f2f583aa7425451864031ece0f5c5d", "filename": "gcc/pass_manager.h", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/315f8c0e21d942c8fe07b5cd34ee6ba13a27c2bd/gcc%2Fpass_manager.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/315f8c0e21d942c8fe07b5cd34ee6ba13a27c2bd/gcc%2Fpass_manager.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpass_manager.h?ref=315f8c0e21d942c8fe07b5cd34ee6ba13a27c2bd", "patch": "@@ -0,0 +1,89 @@\n+/* pass_manager.h - The pipeline of optimization passes\n+   Copyright (C) 2013 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_PASS_MANAGER_H\n+#define GCC_PASS_MANAGER_H\n+\n+class opt_pass;\n+struct register_pass_info;\n+\n+/* Define a list of pass lists so that both passes.c and plugins can easily\n+   find all the pass lists.  */\n+#define GCC_PASS_LISTS \\\n+  DEF_PASS_LIST (all_lowering_passes) \\\n+  DEF_PASS_LIST (all_small_ipa_passes) \\\n+  DEF_PASS_LIST (all_regular_ipa_passes) \\\n+  DEF_PASS_LIST (all_lto_gen_passes) \\\n+  DEF_PASS_LIST (all_passes)\n+\n+#define DEF_PASS_LIST(LIST) PASS_LIST_NO_##LIST,\n+enum pass_list\n+{\n+  GCC_PASS_LISTS\n+  PASS_LIST_NUM\n+};\n+#undef DEF_PASS_LIST\n+\n+namespace gcc {\n+\n+class context;\n+\n+class pass_manager\n+{\n+public:\n+  pass_manager(context *ctxt);\n+\n+  void register_pass (struct register_pass_info *pass_info);\n+  void register_one_dump_file (struct opt_pass *pass);\n+\n+  opt_pass *get_pass_for_id (int id) const;\n+\n+  void dump_passes () const;\n+\n+  void dump_profile_report () const;\n+\n+public:\n+  /* The root of the compilation pass tree, once constructed.  */\n+  opt_pass *all_passes;\n+  opt_pass *all_small_ipa_passes;\n+  opt_pass *all_lowering_passes;\n+  opt_pass *all_regular_ipa_passes;\n+  opt_pass *all_lto_gen_passes;\n+  opt_pass *all_late_ipa_passes;\n+\n+  /* A map from static pass id to optimization pass.  */\n+  opt_pass **passes_by_id;\n+  int passes_by_id_size;\n+\n+  opt_pass **pass_lists[PASS_LIST_NUM];\n+\n+private:\n+  void set_pass_for_id (int id, opt_pass *pass);\n+  int register_dump_files_1 (struct opt_pass *pass, int properties);\n+  void register_dump_files (struct opt_pass *pass, int properties);\n+\n+private:\n+  context *ctxt_;\n+\n+}; // class pass_manager\n+\n+} // namespace gcc\n+\n+#endif /* ! GCC_PASS_MANAGER_H */\n+"}, {"sha": "b8ab1e88b7aa9f8ece6a2faad018d6401456c2f1", "filename": "gcc/passes.c", "status": "modified", "additions": 67, "deletions": 32, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/315f8c0e21d942c8fe07b5cd34ee6ba13a27c2bd/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/315f8c0e21d942c8fe07b5cd34ee6ba13a27c2bd/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=315f8c0e21d942c8fe07b5cd34ee6ba13a27c2bd", "patch": "@@ -70,6 +70,10 @@ along with GCC; see the file COPYING3.  If not see\n #include \"plugin.h\"\n #include \"ipa-utils.h\"\n #include \"tree-pretty-print.h\" /* for dump_function_header */\n+#include \"context.h\"\n+#include \"pass_manager.h\"\n+\n+using namespace gcc;\n \n /* This is used for debugging.  It allows the current pass to printed\n    from anywhere in compilation.\n@@ -439,23 +443,11 @@ static struct rtl_opt_pass pass_postreload =\n \n \n \n-/* The root of the compilation pass tree, once constructed.  */\n-struct opt_pass *all_passes, *all_small_ipa_passes, *all_lowering_passes,\n-  *all_regular_ipa_passes, *all_late_ipa_passes, *all_lto_gen_passes;\n-\n-/* This is used by plugins, and should also be used in register_pass.  */\n-#define DEF_PASS_LIST(LIST) &LIST,\n-struct opt_pass **gcc_pass_lists[] = { GCC_PASS_LISTS NULL };\n-#undef DEF_PASS_LIST\n-\n-/* A map from static pass id to optimization pass.  */\n-struct opt_pass **passes_by_id;\n-int passes_by_id_size;\n-\n /* Set the static pass number of pass PASS to ID and record that\n    in the mapping from static pass number to pass.  */\n \n-static void\n+void\n+pass_manager::\n set_pass_for_id (int id, struct opt_pass *pass)\n {\n   pass->static_pass_number = id;\n@@ -472,7 +464,7 @@ set_pass_for_id (int id, struct opt_pass *pass)\n /* Return the pass with the static pass number ID.  */\n \n struct opt_pass *\n-get_pass_for_id (int id)\n+pass_manager::get_pass_for_id (int id) const\n {\n   if (id >= passes_by_id_size)\n     return NULL;\n@@ -485,6 +477,12 @@ get_pass_for_id (int id)\n \n void\n register_one_dump_file (struct opt_pass *pass)\n+{\n+  g->get_passes ()->register_one_dump_file (pass);\n+}\n+\n+void\n+pass_manager::register_one_dump_file (struct opt_pass *pass)\n {\n   char *dot_name, *flag_name, *glob_name;\n   const char *name, *full_name, *prefix;\n@@ -535,7 +533,8 @@ register_one_dump_file (struct opt_pass *pass)\n \n /* Recursive worker function for register_dump_files.  */\n \n-static int\n+int\n+pass_manager::\n register_dump_files_1 (struct opt_pass *pass, int properties)\n {\n   do\n@@ -563,11 +562,12 @@ register_dump_files_1 (struct opt_pass *pass, int properties)\n   return properties;\n }\n \n-/* Register the dump files for the pipeline starting at PASS.\n+/* Register the dump files for the pass_manager starting at PASS.\n    PROPERTIES reflects the properties that are guaranteed to be available at\n    the beginning of the pipeline.  */\n \n-static void\n+void\n+pass_manager::\n register_dump_files (struct opt_pass *pass,int properties)\n {\n   pass->properties_required |= properties;\n@@ -663,7 +663,7 @@ create_pass_tab (void)\n   if (!flag_dump_passes)\n     return;\n \n-  pass_tab.safe_grow_cleared (passes_by_id_size + 1);\n+  pass_tab.safe_grow_cleared (g->get_passes ()->passes_by_id_size + 1);\n   name_to_pass_map.traverse <void *, passes_pass_traverse> (NULL);\n }\n \n@@ -713,6 +713,12 @@ dump_pass_list (struct opt_pass *pass, int indent)\n \n void\n dump_passes (void)\n+{\n+  g->get_passes ()->dump_passes ();\n+}\n+\n+void\n+pass_manager::dump_passes () const\n {\n   struct cgraph_node *n, *node = NULL;\n \n@@ -1187,6 +1193,13 @@ position_pass (struct register_pass_info *new_pass_info,\n \n void\n register_pass (struct register_pass_info *pass_info)\n+{\n+  g->get_passes ()->register_pass (pass_info);\n+\n+}\n+\n+void\n+pass_manager::register_pass (struct register_pass_info *pass_info)\n {\n   bool all_instances, success;\n \n@@ -1277,11 +1290,21 @@ register_pass (struct register_pass_info *pass_info)\n \t\t\t\t        -> all_passes\n */\n \n-void\n-init_optimization_passes (void)\n+pass_manager::pass_manager (context *ctxt)\n+: all_passes(NULL), all_small_ipa_passes(NULL), all_lowering_passes(NULL),\n+  all_regular_ipa_passes(NULL), all_lto_gen_passes(NULL),\n+  all_late_ipa_passes(NULL), passes_by_id(NULL), passes_by_id_size(0),\n+  ctxt_(ctxt)\n {\n   struct opt_pass **p;\n \n+  /* Initialize the pass_lists array.  */\n+#define DEF_PASS_LIST(LIST) pass_lists[PASS_LIST_NO_##LIST] = &LIST;\n+  GCC_PASS_LISTS\n+#undef DEF_PASS_LIST\n+\n+  /* Build the tree of passes.  */\n+\n #define INSERT_PASSES_AFTER(PASS) \\\n   p = &(PASS);\n \n@@ -1432,12 +1455,13 @@ static struct profile_record *profile_record;\n static void\n check_profile_consistency (int index, int subpass, bool run)\n {\n+  pass_manager *passes = g->get_passes ();\n   if (index == -1)\n     return;\n   if (!profile_record)\n     profile_record = XCNEWVEC (struct profile_record,\n-\t\t\t       passes_by_id_size);\n-  gcc_assert (index < passes_by_id_size && index >= 0);\n+\t\t\t       passes->passes_by_id_size);\n+  gcc_assert (index < passes->passes_by_id_size && index >= 0);\n   gcc_assert (subpass < 2);\n   profile_record[index].run |= run;\n   account_profile_record (&profile_record[index], subpass);\n@@ -1447,6 +1471,12 @@ check_profile_consistency (int index, int subpass, bool run)\n \n void\n dump_profile_report (void)\n+{\n+  g->get_passes ()->dump_profile_report ();\n+}\n+\n+void\n+pass_manager::dump_profile_report () const\n {\n   int i, j;\n   int last_freq_in = 0, last_count_in = 0, last_freq_out = 0, last_count_out = 0;\n@@ -2067,14 +2097,15 @@ ipa_write_summaries_2 (struct opt_pass *pass, struct lto_out_decl_state *state)\n static void\n ipa_write_summaries_1 (lto_symtab_encoder_t encoder)\n {\n+  pass_manager *passes = g->get_passes ();\n   struct lto_out_decl_state *state = lto_new_out_decl_state ();\n   state->symtab_node_encoder = encoder;\n \n   lto_push_out_decl_state (state);\n \n   gcc_assert (!flag_wpa);\n-  ipa_write_summaries_2 (all_regular_ipa_passes, state);\n-  ipa_write_summaries_2 (all_lto_gen_passes, state);\n+  ipa_write_summaries_2 (passes->all_regular_ipa_passes, state);\n+  ipa_write_summaries_2 (passes->all_lto_gen_passes, state);\n \n   gcc_assert (lto_get_out_decl_state () == state);\n   lto_pop_out_decl_state ();\n@@ -2205,8 +2236,9 @@ ipa_write_optimization_summaries (lto_symtab_encoder_t encoder)\n     }\n \n   gcc_assert (flag_wpa);\n-  ipa_write_optimization_summaries_1 (all_regular_ipa_passes, state);\n-  ipa_write_optimization_summaries_1 (all_lto_gen_passes, state);\n+  pass_manager *passes = g->get_passes ();\n+  ipa_write_optimization_summaries_1 (passes->all_regular_ipa_passes, state);\n+  ipa_write_optimization_summaries_1 (passes->all_lto_gen_passes, state);\n \n   gcc_assert (lto_get_out_decl_state () == state);\n   lto_pop_out_decl_state ();\n@@ -2259,8 +2291,9 @@ ipa_read_summaries_1 (struct opt_pass *pass)\n void\n ipa_read_summaries (void)\n {\n-  ipa_read_summaries_1 (all_regular_ipa_passes);\n-  ipa_read_summaries_1 (all_lto_gen_passes);\n+  pass_manager *passes = g->get_passes ();\n+  ipa_read_summaries_1 (passes->all_regular_ipa_passes);\n+  ipa_read_summaries_1 (passes->all_lto_gen_passes);\n }\n \n /* Same as execute_pass_list but assume that subpasses of IPA passes\n@@ -2308,8 +2341,9 @@ ipa_read_optimization_summaries_1 (struct opt_pass *pass)\n void\n ipa_read_optimization_summaries (void)\n {\n-  ipa_read_optimization_summaries_1 (all_regular_ipa_passes);\n-  ipa_read_optimization_summaries_1 (all_lto_gen_passes);\n+  pass_manager *passes = g->get_passes ();\n+  ipa_read_optimization_summaries_1 (passes->all_regular_ipa_passes);\n+  ipa_read_optimization_summaries_1 (passes->all_lto_gen_passes);\n }\n \n /* Same as execute_pass_list but assume that subpasses of IPA passes\n@@ -2384,7 +2418,8 @@ execute_ipa_stmt_fixups (struct opt_pass *pass,\n void\n execute_all_ipa_stmt_fixups (struct cgraph_node *node, gimple *stmts)\n {\n-  execute_ipa_stmt_fixups (all_regular_ipa_passes, node, stmts);\n+  pass_manager *passes = g->get_passes ();\n+  execute_ipa_stmt_fixups (passes->all_regular_ipa_passes, node, stmts);\n }\n \n "}, {"sha": "b198b3455fae95a1524add94bf3ac9c1fb8dff79", "filename": "gcc/statistics.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/315f8c0e21d942c8fe07b5cd34ee6ba13a27c2bd/gcc%2Fstatistics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/315f8c0e21d942c8fe07b5cd34ee6ba13a27c2bd/gcc%2Fstatistics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstatistics.c?ref=315f8c0e21d942c8fe07b5cd34ee6ba13a27c2bd", "patch": "@@ -26,6 +26,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"statistics.h\"\n #include \"hash-table.h\"\n #include \"function.h\"\n+#include \"context.h\"\n+#include \"pass_manager.h\"\n \n static int statistics_dump_nr;\n static int statistics_dump_flags;\n@@ -235,6 +237,7 @@ statistics_fini_1 (statistics_counter_t **slot, opt_pass *pass)\n void\n statistics_fini (void)\n {\n+  gcc::pass_manager *passes = g->get_passes ();\n   if (!statistics_dump_file)\n     return;\n \n@@ -243,10 +246,10 @@ statistics_fini (void)\n       unsigned i;\n       for (i = 0; i < nr_statistics_hashes; ++i)\n \tif (statistics_hashes[i].is_created ()\n-\t    && get_pass_for_id (i) != NULL)\n+\t    && passes->get_pass_for_id (i) != NULL)\n \t  statistics_hashes[i]\n \t    .traverse_noresize <opt_pass *, statistics_fini_1>\n-\t    (get_pass_for_id (i));\n+\t    (passes->get_pass_for_id (i));\n     }\n \n   dump_end (statistics_dump_nr, statistics_dump_file);"}, {"sha": "9187529119dd012916ad3d6a6e0d564bba93899a", "filename": "gcc/toplev.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/315f8c0e21d942c8fe07b5cd34ee6ba13a27c2bd/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/315f8c0e21d942c8fe07b5cd34ee6ba13a27c2bd/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=315f8c0e21d942c8fe07b5cd34ee6ba13a27c2bd", "patch": "@@ -1158,10 +1158,10 @@ general_init (const char *argv0)\n      processing.  */\n   init_ggc_heuristics();\n \n-  /* Create the singleton holder for global state.  */\n+  /* Create the singleton holder for global state.\n+     Doing so also creates the pass manager and with it the passes.  */\n   g = new gcc::context();\n \n-  init_optimization_passes ();\n   statistics_early_init ();\n   finish_params ();\n }"}, {"sha": "16442ed4ed210cf7f19fb41bad2ee091b0a2a4a8", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/315f8c0e21d942c8fe07b5cd34ee6ba13a27c2bd/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/315f8c0e21d942c8fe07b5cd34ee6ba13a27c2bd/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=315f8c0e21d942c8fe07b5cd34ee6ba13a27c2bd", "patch": "@@ -489,35 +489,9 @@ extern struct gimple_opt_pass pass_inline_parameters;\n extern struct gimple_opt_pass pass_update_address_taken;\n extern struct gimple_opt_pass pass_convert_switch;\n \n-/* The root of the compilation pass tree, once constructed.  */\n-extern struct opt_pass *all_passes, *all_small_ipa_passes, *all_lowering_passes,\n-                       *all_regular_ipa_passes, *all_lto_gen_passes, *all_late_ipa_passes;\n-\n-/* Define a list of pass lists so that both passes.c and plugins can easily\n-   find all the pass lists.  */\n-#define GCC_PASS_LISTS \\\n-  DEF_PASS_LIST (all_lowering_passes) \\\n-  DEF_PASS_LIST (all_small_ipa_passes) \\\n-  DEF_PASS_LIST (all_regular_ipa_passes) \\\n-  DEF_PASS_LIST (all_lto_gen_passes) \\\n-  DEF_PASS_LIST (all_passes)\n-\n-#define DEF_PASS_LIST(LIST) PASS_LIST_NO_##LIST,\n-enum\n-{\n-  GCC_PASS_LISTS\n-  PASS_LIST_NUM\n-};\n-#undef DEF_PASS_LIST\n-\n-/* This is used by plugins, and should also be used in\n-   passes.c:register_pass.  */\n-extern struct opt_pass **gcc_pass_lists[];\n-\n /* Current optimization pass.  */\n extern struct opt_pass *current_pass;\n \n-extern struct opt_pass * get_pass_for_id (int);\n extern bool execute_one_pass (struct opt_pass *);\n extern void execute_pass_list (struct opt_pass *);\n extern void execute_ipa_pass_list (struct opt_pass *);\n@@ -547,9 +521,6 @@ extern void register_pass (struct register_pass_info *);\n    directly in jump threading, and avoid peeling them next time.  */\n extern bool first_pass_instance;\n \n-extern struct opt_pass **passes_by_id;\n-extern int passes_by_id_size;\n-\n /* Declare for plugins.  */\n extern void do_per_function_toporder (void (*) (void *), void *);\n "}]}