{"sha": "f60ee68de3d80459d319cc0418a1a860f48f0bc8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjYwZWU2OGRlM2Q4MDQ1OWQzMTljYzA0MThhMWE4NjBmNDhmMGJjOA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-07-08T00:16:40Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-07-08T00:16:40Z"}, "message": "Daily bump.", "tree": {"sha": "5bcb4f49e919fa2759c3cacdc54df6d4434bf0a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5bcb4f49e919fa2759c3cacdc54df6d4434bf0a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f60ee68de3d80459d319cc0418a1a860f48f0bc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f60ee68de3d80459d319cc0418a1a860f48f0bc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f60ee68de3d80459d319cc0418a1a860f48f0bc8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f60ee68de3d80459d319cc0418a1a860f48f0bc8/comments", "author": null, "committer": null, "parents": [{"sha": "36e8db7c2af254a38fba5a874a3104a2cc1b1aac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36e8db7c2af254a38fba5a874a3104a2cc1b1aac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36e8db7c2af254a38fba5a874a3104a2cc1b1aac"}], "stats": {"total": 355, "additions": 354, "deletions": 1}, "files": [{"sha": "a9eb4d780060d9b00e9bd7be4e5c077bf3440eee", "filename": "contrib/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f60ee68de3d80459d319cc0418a1a860f48f0bc8/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f60ee68de3d80459d319cc0418a1a860f48f0bc8/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=f60ee68de3d80459d319cc0418a1a860f48f0bc8", "patch": "@@ -1,3 +1,10 @@\n+2020-07-07  Alexandre Oliva  <oliva@adacore.com>\n+\t    Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc-changelog/git_commit.py: Support CASE and COND.\n+\t* gcc-changelog/test_patches.txt: Add test.\n+\t* gcc-changelog/test_email.py: Add test.\n+\n 2020-06-30  Martin Liska  <mliska@suse.cz>\n \n \t* gcc-changelog/git_repository.py: Support older releases of"}, {"sha": "a0f028a828ca8d6c527d8aeba71fa73d0ec18383", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f60ee68de3d80459d319cc0418a1a860f48f0bc8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f60ee68de3d80459d319cc0418a1a860f48f0bc8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f60ee68de3d80459d319cc0418a1a860f48f0bc8", "patch": "@@ -1,3 +1,27 @@\n+2020-07-07  Anton Youdkevitch  <anton.youdkevitch@bell-sw.com>\n+\n+\t* config/aarch64/aarch64.c (thunderx2t99_regmove_cost,\n+\tthunderx2t99_vector_cost): Likewise.\n+\n+2020-07-07  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-data-refs.c (vect_analyze_data_ref_accesses): Fix\n+\tgroup overlap condition to allow negative step DR groups.\n+\t* tree-vect-stmts.c (get_group_load_store_type): For\n+\tmulti element SLP groups force VMAT_STRIDED_SLP when the step\n+\tis negative.\n+\n+2020-07-07  Qian Jianhua  <qianjh@cn.fujitsu.com>\n+\n+\t* doc/generic.texi: Fix typo.\n+\n+2020-07-07  Richard Biener  <rguenther@suse.de>\n+\n+\t* lto-streamer-out.c (cmp_symbol_files): Use the computed\n+\torder map to sort symbols from the same sub-file together.\n+\t(lto_output): Compute a map of sub-file to an order number\n+\tit appears in the symbol output array.\n+\n 2020-07-06  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/96075"}, {"sha": "f2f90c2763f1b1818c0b31a582b1176dc7f7703c", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f60ee68de3d80459d319cc0418a1a860f48f0bc8/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f60ee68de3d80459d319cc0418a1a860f48f0bc8/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=f60ee68de3d80459d319cc0418a1a860f48f0bc8", "patch": "@@ -1 +1 @@\n-20200707\n+20200708"}, {"sha": "057d347c38e6ec9fbfe6a09723930ff1589942be", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 215, "deletions": 0, "changes": 215, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f60ee68de3d80459d319cc0418a1a860f48f0bc8/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f60ee68de3d80459d319cc0418a1a860f48f0bc8/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f60ee68de3d80459d319cc0418a1a860f48f0bc8", "patch": "@@ -1,3 +1,218 @@\n+2020-07-07  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* freeze.adb (Freeze_Array_Type): Use Ctyp more consistently.\n+\tMove code setting the alignment in the non-packed case to...\n+\t* layout.adb (Layout_Type): ...here.\n+\n+2020-07-07  Bob Duff  <duff@adacore.com>\n+\n+\t* treepr.adb (Print_Node): Add code to test Is_Extension.\n+\n+2020-07-07  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_ch4.adb (Try_Container_Indexing): Add ??? comment. Protect\n+\tagainst malformed tree in case of errors.\n+\n+2020-07-07  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* einfo.adb, sem_ch10.adb, sem_ch12.adb, sem_ch8.adb: Use\n+\tIs_Generic_Subprogram.\n+\n+2020-07-07  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch8.adb (Analyze_Use_Package): Replace low-level,\n+\terror-prone Ekind_In tests with high-level Is_Generic_Subprogram\n+\tand Is_Subprogram.\n+\n+2020-07-07  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_ch6.adb (Check_Formal_Subprogram_Conformance): New\n+\tsubprogram to handle checking without systematically emitting an\n+\terror.\n+\t(Check_Conformance): Update call to\n+\tCheck_Formal_Subprogram_Conformance and fix handling of Conforms\n+\tand Errmsg parameters.\n+\n+2020-07-07  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_ch4.adb (Tagged_Membership): Generate a call to\n+\tCW_Membership instead of using Build_CW_Membership.\n+\t(Expand_N_In): Remove wrong handling of null access types and\n+\tcorresponding comment.\n+\t* exp_intr.adb (Expand_Dispatching_Constructor_Call): Generate a\n+\tcall to CW_Membership instead of using Build_CW_Membership.\n+\t* rtsfind.ads: Add CW_Membership.\n+\t* exp_atag.ads, exp_atag.adb (Build_CW_Membership): Removed.\n+\t* einfo.ads: Fix typo.\n+\t* libgnat/a-tags.ads, libgnat/a-tags.adb (CW_Membership): Moved\n+\tback to spec.\n+\n+2020-07-07  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch3.adb (Build_Access_Subprogram_Wrapper_Body): Create\n+\tproper subprogram specification for body, using names in the\n+\tsubprogram declaration but distinct entities.\n+\t* exp_ch6.adb (Expand_Call): If this is an indirect call\n+\tinvolving a subprogram wrapper, insert pointer parameter in list\n+\tof actuals with a parameter association, not as a positional\n+\tparameter.\n+\n+2020-07-07  Justin Squirek  <squirek@adacore.com>\n+\n+\t* exp_ch6.adb (Expand_Branch): Verify the original node is a\n+\tconditional expression before recursing further.\n+\t(Insert_Level_Assign): Transform assertion into an explicit\n+\traise.\n+\n+2020-07-07  Steve Baird  <baird@adacore.com>\n+\n+\t* sem_attr.adb (Eval_Attribute): Generalize static evaluation of\n+\tSize attribute references to also handle\n+\tMax_Size_In_Storage_Elements references.\n+\n+2020-07-07  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_util.adb (Is_Potentially_Unevaluated): Code cleanup.\n+\n+2020-07-07  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* checks.ads (Expander Routines): Update the description of the\n+\tDo_Range_Check mechanism.\n+\t* checks.adb (Selected_Range_Checks): Fix typo.\n+\t* exp_ch9.adb: Add with and use clause for Checks.\n+\t(Actual_Index_Expression): Generate a range check if requested.\n+\t(Entry_Index_Expression): Likewise.\n+\t* sem_attr.adb (Resolve_Attribute) <Attribute_Count>: Call\n+\tApply_Scalar_Range_Check instead of Apply_Range_Check.\n+\t* sem_ch9.adb (Analyze_Accept_Statement): Likewise.\n+\t* sem_res.adb (Resolve_Entry): Likewise, after having set the\n+\tactual index type on the prefix of the indexed component.\n+\t(Resolve_Indexed_Component): Remove useless conditional construct.\n+\n+2020-07-07  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* contracts.adb (Analyze_Entry_Or_Subprogram_Contract,\n+\tProcess_Preconditions_For): Freeze expression that has been\n+\trelocated to pragma Precondition, not the expression which is\n+\tstill in the aspect.\n+\n+2020-07-07  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_ch6.adb (Check_Conformance): Remove unnecessary (and\n+\twrong) code.\n+\t* sem_ch8.adb (Check_Null_Exclusion): Post error at proper\n+\tlocation.  Introduce new helper Null_Exclusion_Mismatch and fix\n+\timplementation wrt formal subprograms used in generic bodies.\n+\t(Analyze_Subprogram_Renaming): Fix missing setting of\n+\tError_Msg_Sloc.\n+\t(Analyze_Object_Renaming): Replace \"in Anonymous_Access_Kind\" by\n+\tIs_Anonymous_Access_Type.\n+\t* sem_util.adb (Has_Null_Exclusion): Fix handling of\n+\tN_Parameter_Specification.\n+\t* sem_ch12.adb (Instantiate_Object): Replace \"in\n+\tAnonymous_Access_Kind\" by Is_Anonymous_Access_Type.\n+\n+2020-07-07  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* freeze.adb (Freeze_Expr_Types): Freeze the designated type of\n+\tthe explicit dereference.\n+\n+2020-07-07  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_util.adb (Is_Potentially_Unevaluated): Protect reading\n+\tattribute Etype.\n+\n+2020-07-07  Bob Duff  <duff@adacore.com>\n+\n+\t* libgnat/g-catiio.adb (Value, Parse_ISO_8601): Unsuppress\n+\tchecks, and don't rely on 'Valid.\n+\n+2020-07-07  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* Makefile.rtl: Remove dead code.\n+\t* doc/gnat_ugn/building_executable_programs_with_gnat.rst:\n+\tDocument gnatbind -xdr switch.\n+\t* gnat_ugn.texi: Regenerate.\n+\n+2020-07-07  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* doc/gnat_ugn/building_executable_programs_with_gnat.rst\n+\t(Validity Checking): Add \"p\" to the list of switches enabled by\n+\t-gnatVa.\n+\t* gnat_ugn.texi: Regenerate.\n+\n+2020-07-07  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_Attribute_Definition_Clause): Add call\n+\tto Check_Restriction_No_Specification_Of_Aspect.\n+\t* sem_prag.adb (Analyze_Pragma): Likewise.\n+\t* restrict.ads (Check_Restriction_No_Specification_Of_Aspect):\n+\tMention possible new node kinds in documentation.\n+\t* restrict.adb (Check_Restriction_No_Specification_Of_Aspect):\n+\tRetrieve aspect id from different fields if given node is an\n+\tN_Pragma or an N_Attribute_Definition_Clause.\n+\n+2020-07-07  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* contracts.adb (Add_Invariant_And_Predicate_Checks): Relax the\n+\tcondition for doing invariant checks so that in-mode parameters\n+\tof procedures are also checked (required by AI05-0289, and\n+\trestricted to procedures by AI12-0044). This is done in a\n+\tprocedure's nested postconditions procedure.\n+\t* exp_ch6.adb (Expand_Actuals): Also perform postcall invariant\n+\tchecks for in parameters of procedures (but not functions).\n+\tMoved invariant-checking code to end of Expand_Actuals\n+\t(including the nested function Is_Public_Subp).\n+\n+2020-07-07  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_aggr.adb (Resolve_Delta_Array_Aggregate): Make Index_Type\n+\ta constant.\n+\n+2020-07-07  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_aggr.adb (Expand_N_Delta_Aggregate): Use type of the delta\n+\tbase expression for the anonymous object of the delta aggregate.\n+\n+2020-07-07  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_util.ads (Interval_Lists): Reordering routine.\n+\t* sem_util.adb (Interval_Lists): Reordering routines to keep\n+\tthem alphabetically ordered.\n+\n+2020-07-07  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_attr.adb (Resolve_Attribute): Do not call\n+\tCheck_Non_Static_Context.\n+\n+2020-07-07  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_elab.adb (Is_Guaranteed_ABE): Take into account null\n+\tprocedures.\n+\n+2020-07-07  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch5.adb (Analyze_Assignment): Reuse Is_Assignable.\n+\n+2020-07-07  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_spark.adb (Expand_SPARK_N_Attribute_Reference): Add scalar\n+\trange checks for 'Update on arrays just like for 'Update on\n+\trecords.\n+\t* sem_attr.adb (Analyze_Array_Component_Update): Do not set\n+\trange checks for single-dimensional arrays.\n+\t(Resolve_Attribute): Do not set range checks for both single-\n+\tand multi- dimensional arrays.\n+\n+2020-07-07  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem.ads (Sem): Fix description.\n+\n+2020-07-07  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_Relaxed_Parameter): Fix for protected\n+\tentries.\n+\n 2020-07-06  Piotr Trojanek  <trojanek@adacore.com>\n \n \t* checks.adb (Apply_Scalar_Range_Check): Use Is_RTE."}, {"sha": "5b97f416f24c191a754ce3436483c93c84730e7d", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f60ee68de3d80459d319cc0418a1a860f48f0bc8/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f60ee68de3d80459d319cc0418a1a860f48f0bc8/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=f60ee68de3d80459d319cc0418a1a860f48f0bc8", "patch": "@@ -1,3 +1,12 @@\n+2020-07-07  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* c-opts.c (c_common_post_options): Add 'injecting' arg to\n+\tcpp_read_main_file.\n+\t(c_finish_options): Add linemap_line_start calls for builtin and cmd\n+\tmaps.  Force token position to line_table's highest line.\n+\t* c-ppoutput.c (print_line_1): Refactor, print line zero.\n+\t(cb_define): Always increment source line.\n+\n 2020-07-06  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/95984"}, {"sha": "50637de081dc715310efeb26e325cec12cdbbb81", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f60ee68de3d80459d319cc0418a1a860f48f0bc8/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f60ee68de3d80459d319cc0418a1a860f48f0bc8/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=f60ee68de3d80459d319cc0418a1a860f48f0bc8", "patch": "@@ -1,3 +1,8 @@\n+2020-07-07  Kaipeng Zhou  <zhoukaipeng3@huawei.com>\n+\n+\t* c-parser.c (c_parser_statement_after_labels): Pass correct\n+\tparameters to c_parser_do_statement.\n+\n 2020-06-16  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-parser.c (c_parser_expr_no_commas): Save, clear and restore"}, {"sha": "5598367395c492f5e4dd89825660a960015e6541", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f60ee68de3d80459d319cc0418a1a860f48f0bc8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f60ee68de3d80459d319cc0418a1a860f48f0bc8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f60ee68de3d80459d319cc0418a1a860f48f0bc8", "patch": "@@ -1,3 +1,16 @@\n+2020-07-07  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/95303\n+\t* cxx-pretty-print.c (pp_cxx_unqualified_id): Check\n+\tPRIMARY_TEMPLATE_P before printing the innermost template\n+\targuments.\n+\n+2020-07-07  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/96063\n+\t* parser.c (class_decl_loc_t::diag_mismatched_tags): Print notes only\n+\tif warning_at returns nonzero.\n+\n 2020-07-06  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/95984"}, {"sha": "ce54b0458dcc3d2b156dddc2b243e769631c50d3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f60ee68de3d80459d319cc0418a1a860f48f0bc8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f60ee68de3d80459d319cc0418a1a860f48f0bc8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f60ee68de3d80459d319cc0418a1a860f48f0bc8", "patch": "@@ -1,3 +1,41 @@\n+2020-07-07  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/92427\n+\t* g++.dg/ext/flexary37.C: New test.\n+\n+2020-07-07  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/95303\n+\t* g++.dg/concepts/diagnostic14.C: New test.\n+\n+2020-07-07  Aaron Sawdey  <acsawdey@linux.ibm.com>\n+\n+\t* lib/target-supports.exp (check_power10_hw_available):\n+\tReturn 0 for passing test.\n+\n+2020-07-07  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* c-c++-common/cpp/pragma-eof.c: New\n+\n+2020-07-07  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* c-c++-common/cpp/line-2.c: New.\n+\t* c-c++-common/cpp/line-2.h: New.\n+\t* c-c++-common/cpp/line-3.c: New.\n+\t* c-c++-common/cpp/line-4.c: New.\n+\t* c-c++-common/cpp/line-4.h: New.\n+\n+2020-07-07  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/96063\n+\t* g++.dg/warn/Wmismatched-tags-7.C: New test.\n+\t* g++.dg/warn/Wmismatched-tags-8.C: New test.\n+\n+2020-07-07  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/vect/slp-47.c: New testcase.\n+\t* gcc.dg/vect/slp-48.c: Likewise.\n+\n 2020-07-06  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/95984"}, {"sha": "ed65d154432ac6f00c5a4fecbb9ac4c7ca27d91d", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f60ee68de3d80459d319cc0418a1a860f48f0bc8/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f60ee68de3d80459d319cc0418a1a860f48f0bc8/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=f60ee68de3d80459d319cc0418a1a860f48f0bc8", "patch": "@@ -1,3 +1,14 @@\n+2020-07-07  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* directives.c (do_linemarker): Optimize rewinding to line zero.\n+\t* files.c (_cpp_stack_file): Start on line zero when about to inject\n+\theaders.\n+\t(cpp_push_include, cpp_push_default_include): Use highest_line as\n+\tthe location.\n+\t* include/cpplib.h (cpp_read_main_file): Add injecting parm.\n+\t* init.c (cpp_read_main_file): Likewise, inform _cpp_stack_file.\n+\t* internal.h (enum include_type): Add IT_MAIN_INJECT.\n+\n 2020-05-29  H.J. Lu  <hjl.tools@gmail.com>\n \n \tPR bootstrap/95413"}, {"sha": "ed9947c6b37e28ffb741cdf19b4c05cb386bb181", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f60ee68de3d80459d319cc0418a1a860f48f0bc8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f60ee68de3d80459d319cc0418a1a860f48f0bc8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f60ee68de3d80459d319cc0418a1a860f48f0bc8", "patch": "@@ -1,3 +1,34 @@\n+2020-07-07  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/limits: Whitespace changes.\n+\n+2020-07-07  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/Makefile.am: Remove bits/int_limits.h.\n+\t* include/Makefile.in: Regenerate.\n+\t* include/bits/int_limits.h: Removed.\n+\t* include/bits/parse_numbers.h (_Select_int_base): Replace\n+\t__int_limits with __int_traits.\n+\t* include/bits/range_access.h (_SSize::operator()): Likewise.\n+\t* include/ext/numeric_traits.h (__numeric_traits_integer): Add\n+\tstatic assertion.\n+\t(__int_traits): New alias template.\n+\t* include/std/bit (__rotl, __rotr, __countl_zero, __countl_one)\n+\t(__countr_zero, __countr_one, __popcount, __bit_ceil)\n+\t(__bit_floor, __bit_width) Replace __int_limits with\n+\t__int_traits.\n+\t* include/std/charconv (__to_chars_8, __from_chars_binary)\n+\t(__from_chars_alpha_to_num, from_chars): Likewise.\n+\t* include/std/memory_resource (polymorphic_allocator::allocate)\n+\t(polymorphic_allocator::allocate_object): Likewise.\n+\t* include/std/string_view (basic_string_view::_S_compare):\n+\tLikewise.\n+\t* include/std/utility (cmp_equal, cmp_less, in_range): Likewise.\n+\n+2020-07-07  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/limits: Whitespace changes.\n+\n 2020-07-06  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/std/optional (_Optional_payload_base, _Optional_base)"}]}