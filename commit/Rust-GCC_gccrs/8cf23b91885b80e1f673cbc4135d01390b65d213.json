{"sha": "8cf23b91885b80e1f673cbc4135d01390b65d213", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGNmMjNiOTE4ODViODBlMWY2NzNjYmM0MTM1ZDAxMzkwYjY1ZDIxMw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-31T09:07:20Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-31T09:07:20Z"}, "message": "[multiple changes]\n\n2011-08-31  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_ch5.adb, exp_alfa.ads, prj.ads, sem_attr.adb,\n\tlib-xref-alfa.adb: Minor reformatting.\n\n2011-08-31  Matthew Heaney  <heaney@adacore.com>\n\n\t* a-crbltr.ads (Tree_Type): Default-initialize the Nodes component.\n\n2011-08-31  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_ch4.adb (Try_Object_Operation): Addition of one formal to search\n\tonly for class-wide subprograms conflicting with entities of concurrent\n\ttagged types.\n\n2011-08-31  Matthew Heaney  <heaney@adacore.com>\n\n\t* a-rbtgbo.adb (Generic_Allocate): Initialize pointer components of\n\tnode to null value.\n\n2011-08-31  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_ch12.adb (Insert_Freeze_Node_For_Instance): Provide a more\n\tgeneral description of the routine.\n\n2011-08-31  Ed Schonberg  <schonberg@adacore.com>\n\n\t* a-cbdlli.adb, a-cbdlli.ads: Add iterator machinery to bounded\n\tdoubly-linked lists.\n\nFrom-SVN: r178363", "tree": {"sha": "51ba512577c9b4202ce015f57c761ef8d3020acb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51ba512577c9b4202ce015f57c761ef8d3020acb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8cf23b91885b80e1f673cbc4135d01390b65d213", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cf23b91885b80e1f673cbc4135d01390b65d213", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cf23b91885b80e1f673cbc4135d01390b65d213", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cf23b91885b80e1f673cbc4135d01390b65d213/comments", "author": null, "committer": null, "parents": [{"sha": "0bb3bfb8feacd4bec3f0dc82d75cf1ea01d37010", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bb3bfb8feacd4bec3f0dc82d75cf1ea01d37010", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bb3bfb8feacd4bec3f0dc82d75cf1ea01d37010"}], "stats": {"total": 397, "additions": 353, "deletions": 44}, "files": [{"sha": "a48149e19b63dfbceb014925c6f33c8a71d29cf7", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cf23b91885b80e1f673cbc4135d01390b65d213/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cf23b91885b80e1f673cbc4135d01390b65d213/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=8cf23b91885b80e1f673cbc4135d01390b65d213", "patch": "@@ -1,3 +1,33 @@\n+2011-08-31  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_ch5.adb, exp_alfa.ads, prj.ads, sem_attr.adb,\n+\tlib-xref-alfa.adb: Minor reformatting.\n+\n+2011-08-31  Matthew Heaney  <heaney@adacore.com>\n+\n+\t* a-crbltr.ads (Tree_Type): Default-initialize the Nodes component.\n+\n+2011-08-31  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_ch4.adb (Try_Object_Operation): Addition of one formal to search\n+\tonly for class-wide subprograms conflicting with entities of concurrent\n+\ttagged types.\n+\n+2011-08-31  Matthew Heaney  <heaney@adacore.com>\n+\n+\t* a-rbtgbo.adb (Generic_Allocate): Initialize pointer components of\n+\tnode to null value.\n+\n+2011-08-31  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_ch12.adb (Insert_Freeze_Node_For_Instance): Provide a more\n+\tgeneral description of the routine.\n+\n+2011-08-31  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* a-cbdlli.adb, a-cbdlli.ads: Add iterator machinery to bounded\n+\tdoubly-linked lists.\n+\n 2011-08-31  Gary Dismukes  <dismukes@adacore.com>\n \n \t* exp_ch5.adb (Expand_N_Assignment_Statement): When a discriminant"}, {"sha": "cf2422748d203425c63d3304ad696a564a5b4a2b", "filename": "gcc/ada/a-cbdlli.adb", "status": "modified", "additions": 143, "deletions": 0, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cf23b91885b80e1f673cbc4135d01390b65d213/gcc%2Fada%2Fa-cbdlli.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cf23b91885b80e1f673cbc4135d01390b65d213/gcc%2Fada%2Fa-cbdlli.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cbdlli.adb?ref=8cf23b91885b80e1f673cbc4135d01390b65d213", "patch": "@@ -30,6 +30,22 @@\n with System;  use type System.Address;\n \n package body Ada.Containers.Bounded_Doubly_Linked_Lists is\n+   type Iterator is new\n+     List_Iterator_Interfaces.Reversible_Iterator with record\n+        Container : List_Access;\n+        Node      : Count_Type;\n+   end record;\n+\n+   overriding function First (Object : Iterator) return Cursor;\n+   overriding function Last  (Object : Iterator) return Cursor;\n+\n+   overriding function Next\n+     (Object   : Iterator;\n+      Position : Cursor) return Cursor;\n+\n+   overriding function Previous\n+     (Object   : Iterator;\n+      Position : Cursor) return Cursor;\n \n    -----------------------\n    -- Local Subprograms --\n@@ -526,6 +542,15 @@ package body Ada.Containers.Bounded_Doubly_Linked_Lists is\n       return Cursor'(Container'Unrestricted_Access, Container.First);\n    end First;\n \n+   function First (Object : Iterator) return Cursor is\n+   begin\n+      if Object.Container = null then\n+         return No_Element;\n+      else\n+         return (Object.Container, Object.Container.First);\n+      end if;\n+   end First;\n+\n    -------------------\n    -- First_Element --\n    -------------------\n@@ -1030,6 +1055,25 @@ package body Ada.Containers.Bounded_Doubly_Linked_Lists is\n       B := B - 1;\n    end Iterate;\n \n+   function Iterate (Container : List)\n+     return List_Iterator_Interfaces.Reversible_Iterator'class\n+   is\n+   begin\n+      if Container.Length = 0 then\n+         return Iterator'(null, Count_Type'First);\n+      else\n+         return Iterator'(Container'Unrestricted_Access, Container.First);\n+      end if;\n+   end Iterate;\n+\n+   function Iterate (Container : List; Start : Cursor)\n+     return List_Iterator_Interfaces.Reversible_Iterator'class\n+   is\n+      It : constant Iterator := (Container'Unrestricted_Access, Start.Node);\n+   begin\n+      return It;\n+   end Iterate;\n+\n    ----------\n    -- Last --\n    ----------\n@@ -1043,6 +1087,15 @@ package body Ada.Containers.Bounded_Doubly_Linked_Lists is\n       return Cursor'(Container'Unrestricted_Access, Container.Last);\n    end Last;\n \n+   function Last (Object : Iterator) return Cursor is\n+   begin\n+      if Object.Container = null then\n+         return No_Element;\n+      else\n+         return (Object.Container, Object.Container.Last);\n+      end if;\n+   end Last;\n+\n    ------------------\n    -- Last_Element --\n    ------------------\n@@ -1133,6 +1186,20 @@ package body Ada.Containers.Bounded_Doubly_Linked_Lists is\n       end;\n    end Next;\n \n+   function Next\n+     (Object   : Iterator;\n+      Position : Cursor) return Cursor\n+   is\n+      Nodes : Node_Array renames Position.Container.Nodes;\n+      Node  : constant Count_Type := Nodes (Position.Node).Next;\n+   begin\n+      if Position.Node = Object.Container.Last then\n+         return No_Element;\n+      else\n+         return (Object.Container, Node);\n+      end if;\n+   end Next;\n+\n    -------------\n    -- Prepend --\n    -------------\n@@ -1175,6 +1242,20 @@ package body Ada.Containers.Bounded_Doubly_Linked_Lists is\n       end;\n    end Previous;\n \n+   function Previous\n+     (Object   : Iterator;\n+      Position : Cursor) return Cursor\n+   is\n+      Nodes : Node_Array renames Position.Container.Nodes;\n+      Node  : constant Count_Type := Nodes (Position.Node).Prev;\n+   begin\n+      if Position.Node = 0 then\n+         return No_Element;\n+      else\n+         return (Object.Container, Node);\n+      end if;\n+   end Previous;\n+\n    -------------------\n    -- Query_Element --\n    -------------------\n@@ -1257,6 +1338,52 @@ package body Ada.Containers.Bounded_Doubly_Linked_Lists is\n       raise Program_Error with \"attempt to stream list cursor\";\n    end Read;\n \n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Reference_Type)\n+   is\n+   begin\n+      raise Program_Error with \"attempt to stream reference\";\n+   end Read;\n+\n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Constant_Reference_Type)\n+   is\n+   begin\n+      raise Program_Error with \"attempt to stream reference\";\n+   end Read;\n+\n+   ---------------\n+   -- Reference --\n+   ---------------\n+\n+   function Constant_Reference (Container : List; Position : Cursor)\n+   return Constant_Reference_Type is\n+   begin\n+      pragma Unreferenced (Container);\n+\n+      if Position.Container = null then\n+         raise Constraint_Error with \"Position cursor has no element\";\n+      end if;\n+\n+      return (Element =>\n+         Position.Container.Nodes (Position.Node).Element'Unrestricted_Access);\n+   end Constant_Reference;\n+\n+   function Reference (Container : List; Position : Cursor)\n+   return Reference_Type is\n+   begin\n+      pragma Unreferenced (Container);\n+\n+      if Position.Container = null then\n+         raise Constraint_Error with \"Position cursor has no element\";\n+      end if;\n+\n+      return (Element =>\n+         Position.Container.Nodes (Position.Node).Element'Unrestricted_Access);\n+   end Reference;\n+\n    ---------------------\n    -- Replace_Element --\n    ---------------------\n@@ -2001,4 +2128,20 @@ package body Ada.Containers.Bounded_Doubly_Linked_Lists is\n       raise Program_Error with \"attempt to stream list cursor\";\n    end Write;\n \n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Reference_Type)\n+   is\n+   begin\n+      raise Program_Error with \"attempt to stream reference\";\n+   end Write;\n+\n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Constant_Reference_Type)\n+   is\n+   begin\n+      raise Program_Error with \"attempt to stream reference\";\n+   end Write;\n+\n end Ada.Containers.Bounded_Doubly_Linked_Lists;"}, {"sha": "32e992fa60dbac0290b3c4ddfa333a135a121b30", "filename": "gcc/ada/a-cbdlli.ads", "status": "modified", "additions": 68, "deletions": 7, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cf23b91885b80e1f673cbc4135d01390b65d213/gcc%2Fada%2Fa-cbdlli.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cf23b91885b80e1f673cbc4135d01390b65d213/gcc%2Fada%2Fa-cbdlli.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cbdlli.ads?ref=8cf23b91885b80e1f673cbc4135d01390b65d213", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2004-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -31,7 +31,8 @@\n -- This unit was originally developed by Matthew J Heaney.                  --\n ------------------------------------------------------------------------------\n \n-private with Ada.Streams;\n+with Ada.Streams; use Ada.Streams;\n+with Ada.Iterator_Interfaces;\n \n generic\n    type Element_Type is private;\n@@ -43,7 +44,13 @@ package Ada.Containers.Bounded_Doubly_Linked_Lists is\n    pragma Pure;\n    pragma Remote_Types;\n \n-   type List (Capacity : Count_Type) is tagged private;\n+   type List (Capacity : Count_Type) is tagged private\n+   with\n+      Constant_Indexing => Constant_Reference,\n+      Variable_Indexing => Reference,\n+      Default_Iterator  => Iterate,\n+      Iterator_Element  => Element_Type;\n+\n    pragma Preelaborable_Initialization (List);\n \n    type Cursor is private;\n@@ -52,6 +59,10 @@ package Ada.Containers.Bounded_Doubly_Linked_Lists is\n    Empty_List : constant List;\n \n    No_Element : constant Cursor;\n+   function Has_Element (Position : Cursor) return Boolean;\n+\n+   package List_Iterator_Interfaces is new\n+     Ada.Iterator_Interfaces (Cursor, Has_Element);\n \n    function \"=\" (Left, Right : List) return Boolean;\n \n@@ -129,6 +140,12 @@ package Ada.Containers.Bounded_Doubly_Linked_Lists is\n \n    procedure Reverse_Elements (Container : in out List);\n \n+   function Iterate (Container : List)\n+      return List_Iterator_Interfaces.Reversible_Iterator'class;\n+\n+   function Iterate (Container : List; Start : Cursor)\n+      return List_Iterator_Interfaces.Reversible_Iterator'class;\n+\n    procedure Swap\n      (Container : in out List;\n       I, J      : Cursor);\n@@ -183,8 +200,6 @@ package Ada.Containers.Bounded_Doubly_Linked_Lists is\n      (Container : List;\n       Item      : Element_Type) return Boolean;\n \n-   function Has_Element (Position : Cursor) return Boolean;\n-\n    procedure Iterate\n      (Container : List;\n       Process   : not null access procedure (Position : Cursor));\n@@ -205,6 +220,48 @@ package Ada.Containers.Bounded_Doubly_Linked_Lists is\n \n    end Generic_Sorting;\n \n+   type Constant_Reference_Type\n+      (Element : not null access constant Element_Type) is private\n+   with\n+      Implicit_Dereference => Element;\n+\n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Constant_Reference_Type);\n+\n+   for Constant_Reference_Type'Write use Write;\n+\n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Constant_Reference_Type);\n+\n+   for Constant_Reference_Type'Read use Read;\n+\n+   type Reference_Type (Element : not null access Element_Type) is\n+   private\n+   with\n+      Implicit_Dereference => Element;\n+\n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Reference_Type);\n+\n+   for Reference_Type'Write use Write;\n+\n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Reference_Type);\n+\n+   for Reference_Type'Read use Read;\n+\n+   function Constant_Reference\n+     (Container : List; Position : Cursor)    --  SHOULD BE ALIASED\n+   return Constant_Reference_Type;\n+\n+   function Reference\n+     (Container : List; Position : Cursor)    --  SHOULD BE ALIASED\n+   return Reference_Type;\n+\n private\n \n    pragma Inline (Next);\n@@ -228,8 +285,6 @@ private\n       Lock   : Natural := 0;\n    end record;\n \n-   use Ada.Streams;\n-\n    procedure Read\n      (Stream : not null access Root_Stream_Type'Class;\n       Item   : out List);\n@@ -263,6 +318,12 @@ private\n \n    for Cursor'Write use Write;\n \n+   type Constant_Reference_Type\n+      (Element : not null access constant Element_Type) is null record;\n+\n+   type Reference_Type\n+      (Element : not null access Element_Type) is null record;\n+\n    Empty_List : constant List := (Capacity => 0, others => <>);\n \n    No_Element : constant Cursor := Cursor'(null, 0);"}, {"sha": "2991d36ee06e15f8c2d70890d7acc68f69ec9682", "filename": "gcc/ada/a-crbltr.ads", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cf23b91885b80e1f673cbc4135d01390b65d213/gcc%2Fada%2Fa-crbltr.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cf23b91885b80e1f673cbc4135d01390b65d213/gcc%2Fada%2Fa-crbltr.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-crbltr.ads?ref=8cf23b91885b80e1f673cbc4135d01390b65d213", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2004-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -53,6 +53,13 @@ package Ada.Containers.Red_Black_Trees is\n    package Generic_Bounded_Tree_Types is\n       type Nodes_Type is array (Count_Type range <>) of Node_Type;\n \n+      --  Note that objects of type Tree_Type are logically initialized (in the\n+      --  sense that representation invariants of type are satisfied by dint of\n+      --  default initialization), even without the Nodes component also having\n+      --  its own initialization expression. We only initializae the Nodes\n+      --  component here in order to prevent spurious compiler warnings about\n+      --  the container object not being fully initialized.\n+\n       type Tree_Type (Capacity : Count_Type) is tagged record\n          First  : Count_Type := 0;\n          Last   : Count_Type := 0;\n@@ -61,7 +68,7 @@ package Ada.Containers.Red_Black_Trees is\n          Busy   : Natural := 0;\n          Lock   : Natural := 0;\n          Free   : Count_Type'Base := -1;\n-         Nodes  : Nodes_Type (1 .. Capacity);\n+         Nodes  : Nodes_Type (1 .. Capacity) := (others => <>);\n       end record;\n    end Generic_Bounded_Tree_Types;\n "}, {"sha": "4442d5c63a91a39f07a2a3022d044dc672ce2307", "filename": "gcc/ada/a-rbtgbo.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cf23b91885b80e1f673cbc4135d01390b65d213/gcc%2Fada%2Fa-rbtgbo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cf23b91885b80e1f673cbc4135d01390b65d213/gcc%2Fada%2Fa-rbtgbo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-rbtgbo.adb?ref=8cf23b91885b80e1f673cbc4135d01390b65d213", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -586,6 +586,10 @@ package body Ada.Containers.Red_Black_Trees.Generic_Bounded_Operations is\n          Set_Element (N (Node));\n          Tree.Free := Tree.Free - 1;\n       end if;\n+\n+      Set_Parent (N (Node), Parent => 0);\n+      Set_Left (N (Node), Left => 0);\n+      Set_Right (N (Node), Right => 0);\n    end Generic_Allocate;\n \n    -------------------"}, {"sha": "a5c07864be1ea34fca30c8b23b13c92500924567", "filename": "gcc/ada/exp_alfa.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cf23b91885b80e1f673cbc4135d01390b65d213/gcc%2Fada%2Fexp_alfa.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cf23b91885b80e1f673cbc4135d01390b65d213/gcc%2Fada%2Fexp_alfa.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_alfa.ads?ref=8cf23b91885b80e1f673cbc4135d01390b65d213", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--             Copyright (C) 2011, Free Software Foundation, Inc.           --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "54dea9ad5e067af63877e8cd9cd1e5e68de789bb", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cf23b91885b80e1f673cbc4135d01390b65d213/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cf23b91885b80e1f673cbc4135d01390b65d213/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=8cf23b91885b80e1f673cbc4135d01390b65d213", "patch": "@@ -3012,7 +3012,6 @@ package body Exp_Ch5 is\n             Name_Step    : Name_Id;\n \n          begin\n-\n             --  The type of the iterator is the return type of the Iterate\n             --  function used. For the \"of\" form this is the default iterator\n             --  for the type, otherwise it is the type of the explicit\n@@ -3023,6 +3022,7 @@ package body Exp_Ch5 is\n             --  use-visible, so we introduce the name of the enclosing package\n             --  in the declarations below. The Iterator type is declared in a\n             --  an instance within the container package itself.\n+\n             --  If the container type is a derived type, the cursor type is\n             --  found in the package of the parent type.\n \n@@ -3034,6 +3034,7 @@ package body Exp_Ch5 is\n                else\n                   Pack := Scope (Scope (Container_Typ));\n                end if;\n+\n             else\n                if Is_Derived_Type (Container_Typ) then\n                   Pack := Scope (Root_Type (Container_Typ));"}, {"sha": "81331eb4b1a0cd264be073690aaeec14204800a5", "filename": "gcc/ada/lib-xref-alfa.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cf23b91885b80e1f673cbc4135d01390b65d213/gcc%2Fada%2Flib-xref-alfa.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cf23b91885b80e1f673cbc4135d01390b65d213/gcc%2Fada%2Flib-xref-alfa.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref-alfa.adb?ref=8cf23b91885b80e1f673cbc4135d01390b65d213", "patch": "@@ -594,7 +594,8 @@ package body Alfa is\n \n          function Is_Alfa_Reference\n            (E   : Entity_Id;\n-            Typ : Character) return Boolean is\n+            Typ : Character) return Boolean\n+         is\n          begin\n             --  The only references of interest on callable entities are calls.\n             --  On non-callable entities, the only references of interest are"}, {"sha": "5f39c24a071b80d293891ed036b6eebee9518bce", "filename": "gcc/ada/prj.ads", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cf23b91885b80e1f673cbc4135d01390b65d213/gcc%2Fada%2Fprj.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cf23b91885b80e1f673cbc4135d01390b65d213/gcc%2Fada%2Fprj.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj.ads?ref=8cf23b91885b80e1f673cbc4135d01390b65d213", "patch": "@@ -580,8 +580,10 @@ package Prj is\n                            Include_Compatible_Languages => No_Name_List,\n                            Compiler_Driver              => No_File,\n                            Compiler_Driver_Path         => null,\n-                           Compiler_Leading_Required_Switches  => No_Name_List,\n-                           Compiler_Trailing_Required_Switches => No_Name_List,\n+                           Compiler_Leading_Required_Switches\n+                                                        => No_Name_List,\n+                           Compiler_Trailing_Required_Switches\n+                                                        => No_Name_List,\n                            Multi_Unit_Switches          => No_Name_List,\n                            Multi_Unit_Object_Separator  => ' ',\n                            Path_Syntax                  => Canonical,"}, {"sha": "4b2e0c236a32e8eafd90e680f6edbe1afe7cdc10", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cf23b91885b80e1f673cbc4135d01390b65d213/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cf23b91885b80e1f673cbc4135d01390b65d213/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=8cf23b91885b80e1f673cbc4135d01390b65d213", "patch": "@@ -3860,7 +3860,7 @@ package body Sem_Attr is\n             end if;\n          end Check_Local;\n \n-         --  The attribute ppears within a pre/postcondition, but refers to\n+         --  The attribute appears within a pre/postcondition, but refers to\n          --  an entity in the enclosing subprogram. If it is a component of a\n          --  formal its expansion might generate actual subtypes that may be\n          --  referenced in an inner context, and which must be elaborated"}, {"sha": "d759defb66f524c9889ec8e3d7407b001ea397c9", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 29, "deletions": 15, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cf23b91885b80e1f673cbc4135d01390b65d213/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cf23b91885b80e1f673cbc4135d01390b65d213/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=8cf23b91885b80e1f673cbc4135d01390b65d213", "patch": "@@ -519,19 +519,11 @@ package body Sem_Ch12 is\n    procedure Insert_Freeze_Node_For_Instance\n      (N      : Node_Id;\n       F_Node : Node_Id);\n-   --  N is an instance and F_Node is its corresponding freeze node. Insert\n-   --  F_Node depending on the enclosing context and placement of N in the\n-   --  following manner:\n-   --\n-   --    1) N is a package instance - Attempt to insert the freeze node before\n-   --    a source package or subprogram body which follows immediately after N.\n-   --    If no such body is found, perform the actions in 2).\n-   --\n-   --    2) N is a subprogram instance or a package instance not followed by\n-   --    a source body - Insert the freeze node at the end of the declarations\n-   --    list which contains N. If N is in the visible part of an enclosing\n-   --    package declaration, the freeze node is inserted at the end of the\n-   --    private declarations.\n+   --  N denotes a package or a subprogram instantiation and F_Node is the\n+   --  associated freeze node. Insert the freeze node before the first source\n+   --  body which follows immediately after N. If no such body is found, the\n+   --  freeze node is inserted at the end of the declarative region which\n+   --  contains N.\n \n    procedure Freeze_Subprogram_Body\n      (Inst_Node : Node_Id;\n@@ -7586,7 +7578,6 @@ package body Sem_Ch12 is\n             elsif Nkind (Parent (N)) = N_Package_Body\n               and then In_Same_Declarative_Part (Freeze_Node (Par), Parent (N))\n             then\n-\n                declare\n                   Enclosing : constant Entity_Id :=\n                                 Corresponding_Spec (Parent (N));\n@@ -7596,7 +7587,30 @@ package body Sem_Ch12 is\n                   Ensure_Freeze_Node (Enclosing);\n \n                   if not Is_List_Member (Freeze_Node (Enclosing)) then\n-                     Insert_After (Freeze_Node (Par), Freeze_Node (Enclosing));\n+\n+                     --  The enclosing context is a subunit, insert the freeze\n+                     --  node after the stub.\n+\n+                     if Nkind (Parent (Parent (N))) = N_Subunit then\n+                        Insert_Freeze_Node_For_Instance\n+                          (Corresponding_Stub (Parent (Parent (N))),\n+                           Freeze_Node (Enclosing));\n+\n+                     --  The parent instance has been frozen before the body of\n+                     --  the enclosing package, insert the freeze node after\n+                     --  the body.\n+\n+                     elsif List_Containing (Freeze_Node (Par)) =\n+                           List_Containing (Parent (N))\n+                       and then Sloc (Freeze_Node (Par)) < Sloc (Parent (N))\n+                     then\n+                        Insert_Freeze_Node_For_Instance\n+                          (Parent (N), Freeze_Node (Enclosing));\n+\n+                     else\n+                        Insert_After\n+                          (Freeze_Node (Par), Freeze_Node (Enclosing));\n+                     end if;\n                   end if;\n                end;\n "}, {"sha": "f26c6ee687d173dd950cb8b117b1ffc9cb7da7e2", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 59, "deletions": 13, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cf23b91885b80e1f673cbc4135d01390b65d213/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cf23b91885b80e1f673cbc4135d01390b65d213/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=8cf23b91885b80e1f673cbc4135d01390b65d213", "patch": "@@ -276,11 +276,16 @@ package body Sem_Ch4 is\n    --  subprogram, and the call F (X) interpreted as F.all (X). In this case\n    --  the call may be overloaded with both interpretations.\n \n-   function Try_Object_Operation (N : Node_Id) return Boolean;\n+   function Try_Object_Operation\n+     (N : Node_Id; CW_Test_Only : Boolean := False) return Boolean;\n    --  Ada 2005 (AI-252): Support the object.operation notation. If node N\n    --  is a call in this notation, it is transformed into a normal subprogram\n    --  call where the prefix is a parameter, and True is returned. If node\n-   --  N is not of this form, it is unchanged, and False is returned.\n+   --  N is not of this form, it is unchanged, and False is returned. if\n+   --  CW_Test_Only is true then N is an N_Selected_Component node which\n+   --  is part of a call to an entry or procedure of a tagged concurrent\n+   --  type and this routine is invoked to search for class-wide subprograms\n+   --  conflicting with the target entity.\n \n    procedure wpo (T : Entity_Id);\n    pragma Warnings (Off, wpo);\n@@ -4165,6 +4170,25 @@ package body Sem_Ch4 is\n             then\n                return;\n             end if;\n+\n+            --  Ada 2012 (AI05-0090-1): If we found a candidate of a call to an\n+            --  entry or procedure of a tagged concurrent type we must check\n+            --  if there are class-wide subprograms covering the primitive. If\n+            --  true then Try_Object_Operation reports the error.\n+\n+            if Has_Candidate\n+              and then Is_Concurrent_Type (Prefix_Type)\n+              and then Nkind (Parent (N)) = N_Procedure_Call_Statement\n+\n+               --  Duplicate the call. This is required to avoid problems with\n+               --  the tree transformations performed by Try_Object_Operation.\n+\n+              and then Try_Object_Operation\n+                         (N => Sinfo.Name (New_Copy_Tree (Parent (N))),\n+                          CW_Test_Only => True)\n+            then\n+               return;\n+            end if;\n          end if;\n \n          if Etype (N) = Any_Type and then Is_Protected_Type (Prefix_Type) then\n@@ -6609,7 +6633,9 @@ package body Sem_Ch4 is\n    -- Try_Object_Operation --\n    --------------------------\n \n-   function Try_Object_Operation (N : Node_Id) return Boolean is\n+   function Try_Object_Operation\n+     (N : Node_Id; CW_Test_Only : Boolean := False) return Boolean\n+   is\n       K              : constant Node_Kind  := Nkind (Parent (N));\n       Is_Subprg_Call : constant Boolean    := Nkind_In\n                                                (K, N_Procedure_Call_Statement,\n@@ -6898,14 +6924,17 @@ package body Sem_Ch4 is\n       ----------------------\n \n       procedure Report_Ambiguity (Op : Entity_Id) is\n-         Access_Formal : constant Boolean :=\n-                           Is_Access_Type (Etype (First_Formal (Op)));\n          Access_Actual : constant Boolean :=\n                            Is_Access_Type (Etype (Prefix (N)));\n+         Access_Formal : Boolean := False;\n \n       begin\n          Error_Msg_Sloc := Sloc (Op);\n \n+         if Present (First_Formal (Op)) then\n+            Access_Formal := Is_Access_Type (Etype (First_Formal (Op)));\n+         end if;\n+\n          if Access_Formal and then not Access_Actual then\n             if Nkind (Parent (Op)) = N_Full_Type_Declaration then\n                Error_Msg_N\n@@ -7205,6 +7234,13 @@ package body Sem_Ch4 is\n       --  Start of processing for Try_Class_Wide_Operation\n \n       begin\n+         --  If we are searching only for conflicting class-wide subprograms\n+         --  then initialize directly Matching_Op with the target entity.\n+\n+         if CW_Test_Only then\n+            Matching_Op := Entity (Selector_Name (N));\n+         end if;\n+\n          --  Loop through ancestor types (including interfaces), traversing\n          --  the homonym chain of the subprogram, trying out those homonyms\n          --  whose first formal has the class-wide type of the ancestor, or\n@@ -7286,10 +7322,12 @@ package body Sem_Ch4 is\n             pragma Unreferenced (CW_Result);\n \n          begin\n-            Prim_Result :=\n-              Try_Primitive_Operation\n-                (Call_Node       => New_Call_Node,\n-                 Node_To_Replace => Node_To_Replace);\n+            if not CW_Test_Only then\n+               Prim_Result :=\n+                  Try_Primitive_Operation\n+                   (Call_Node       => New_Call_Node,\n+                    Node_To_Replace => Node_To_Replace);\n+            end if;\n \n             --  Check if there is a class-wide subprogram covering the\n             --  primitive. This check must be done even if a candidate\n@@ -7663,10 +7701,18 @@ package body Sem_Ch4 is\n       end if;\n \n       if Etype (New_Call_Node) /= Any_Type then\n-         Complete_Object_Operation\n-           (Call_Node       => New_Call_Node,\n-            Node_To_Replace => Node_To_Replace);\n-         return True;\n+\n+         --  No need to complete the tree transformations if we are only\n+         --  searching for conflicting class-wide subprograms\n+\n+         if CW_Test_Only then\n+            return False;\n+         else\n+            Complete_Object_Operation\n+              (Call_Node       => New_Call_Node,\n+               Node_To_Replace => Node_To_Replace);\n+            return True;\n+         end if;\n \n       elsif Present (Candidate) then\n "}]}