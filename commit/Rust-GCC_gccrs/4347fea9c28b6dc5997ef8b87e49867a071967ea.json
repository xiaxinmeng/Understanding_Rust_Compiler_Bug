{"sha": "4347fea9c28b6dc5997ef8b87e49867a071967ea", "node_id": "C_kwDOANBUbNoAKDQzNDdmZWE5YzI4YjZkYzU5OTdlZjhiODdlNDk4NjdhMDcxOTY3ZWE", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2022-09-26T17:14:54Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2022-10-03T05:01:10Z"}, "message": "libstdc++: Fix gdb pretty printers when dealing with std::string\n\nSince revision 33b43b0d8cd2de722d177ef823930500948a7487 std::string and other\nsimilar typedef are ambiguous from a gdb point of view because it matches both\nstd::basic_string<char> and std::__cxx11::basic_string<char> symbols. For those\ntypedef add a workaround to accept the substitution as long as the same regardless\nof __cxx11 namespace.\n\nAlso avoid to register printers for types in std::__cxx11::__8:: namespace, there is\nno such symbols.\n\nlibstdc++-v3/ChangeLog:\n\n\t* python/libstdcxx/v6/printers.py (Printer.add_version): Do not add version\n\tnamespace for __cxx11 symbols.\n\t(add_one_template_type_printer): Likewise.\n\t(add_one_type_printer): Likewise.\n\t(FilteringTypePrinter._recognizer.recognize): Add a workaround for std::string & al\n\tambiguous typedef matching both std:: and std::__cxx11:: symbols.\n\t* testsuite/libstdc++-prettyprinters/cxx17.cc: Remove obsolete\n\t\\#define _GLIBCXX_USE_CXX11_ABI 0.\n\t* testsuite/libstdc++-prettyprinters/simple.cc: Likewise. Adapt test to accept\n\tstd::__cxx11::list.\n\t* testsuite/libstdc++-prettyprinters/simple11.cc: Likewise.\n\t* testsuite/libstdc++-prettyprinters/whatis.cc: Likewise.\n\t* testsuite/libstdc++-prettyprinters/80276.cc: Likewise and remove xfail for c++20\n\tand debug mode.\n\t* testsuite/libstdc++-prettyprinters/libfundts.cc: Likewise.", "tree": {"sha": "55552e7e44ff055da49c66190c3bf22c2c87a379", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55552e7e44ff055da49c66190c3bf22c2c87a379"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4347fea9c28b6dc5997ef8b87e49867a071967ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4347fea9c28b6dc5997ef8b87e49867a071967ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4347fea9c28b6dc5997ef8b87e49867a071967ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4347fea9c28b6dc5997ef8b87e49867a071967ea/comments", "author": null, "committer": null, "parents": [{"sha": "422310150696a77657a1be5e792ca3afd18dc1d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/422310150696a77657a1be5e792ca3afd18dc1d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/422310150696a77657a1be5e792ca3afd18dc1d4"}], "stats": {"total": 50, "additions": 23, "deletions": 27}, "files": [{"sha": "0fa7805183ee01c7b314c95114bd133d69580e55", "filename": "libstdc++-v3/python/libstdcxx/v6/printers.py", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4347fea9c28b6dc5997ef8b87e49867a071967ea/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4347fea9c28b6dc5997ef8b87e49867a071967ea/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py?ref=4347fea9c28b6dc5997ef8b87e49867a071967ea", "patch": "@@ -1857,7 +1857,7 @@ def add(self, name, function):\n     # Add a name using _GLIBCXX_BEGIN_NAMESPACE_VERSION.\n     def add_version(self, base, name, function):\n         self.add(base + name, function)\n-        if _versioned_namespace:\n+        if _versioned_namespace and not '__cxx11' in base:\n             vbase = re.sub('^(std|__gnu_cxx)::', r'\\g<0>%s' % _versioned_namespace, base)\n             self.add(vbase + name, function)\n \n@@ -2026,7 +2026,7 @@ def add_one_template_type_printer(obj, name, defargs):\n     printer = TemplateTypePrinter('std::__debug::'+name, defargs)\n     gdb.types.register_type_printer(obj, printer)\n \n-    if _versioned_namespace:\n+    if _versioned_namespace and not '__cxx11' in name:\n         # Add second type printer for same type in versioned namespace:\n         ns = 'std::' + _versioned_namespace\n         # PR 86112 Cannot use dict comprehension here:\n@@ -2084,6 +2084,21 @@ def recognize(self, type_obj):\n                     pass\n             if self.type_obj == type_obj:\n                 return strip_inline_namespaces(self.name)\n+\n+            if self.type_obj is None:\n+                return None\n+\n+            # Workaround ambiguous typedefs matching both std:: and std::__cxx11:: symbols.\n+            ambiguous = False\n+            for ch in ('', 'w', 'u8', 'u16', 'u32'):\n+                if self.name == 'std::' + ch + 'string':\n+                    ambiguous = True\n+                    break\n+\n+            if ambiguous:\n+                if self.type_obj.tag.replace('__cxx11::', '') == type_obj.tag.replace('__cxx11::', ''):\n+                    return strip_inline_namespaces(self.name)\n+\n             return None\n \n     def instantiate(self):\n@@ -2093,7 +2108,7 @@ def instantiate(self):\n def add_one_type_printer(obj, match, name):\n     printer = FilteringTypePrinter('std::' + match, 'std::' + name)\n     gdb.types.register_type_printer(obj, printer)\n-    if _versioned_namespace:\n+    if _versioned_namespace and not '__cxx11' in match:\n         ns = 'std::' + _versioned_namespace\n         printer = FilteringTypePrinter(ns + match, ns + name)\n         gdb.types.register_type_printer(obj, printer)"}, {"sha": "d1016b58d799d4a7cc7dd585e1d0cade7d8602cd", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/80276.cc", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4347fea9c28b6dc5997ef8b87e49867a071967ea/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2F80276.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4347fea9c28b6dc5997ef8b87e49867a071967ea/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2F80276.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2F80276.cc?ref=4347fea9c28b6dc5997ef8b87e49867a071967ea", "patch": "@@ -18,9 +18,6 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// Type printers only recognize the old std::string for now.\n-#define _GLIBCXX_USE_CXX11_ABI 0\n-\n #include <iostream>\n #include <list>\n #include <memory>\n@@ -46,7 +43,7 @@ main()\n   // { dg-final { whatis-regexp-test p1 \"std::unique_ptr<std::(__debug::)?vector<std::unique_ptr<std::(__debug::)?vector<int>\\\\*>>>\" } }\n   // { dg-final { whatis-regexp-test p2 \"std::unique_ptr<std::(__debug::)?vector<std::unique_ptr<std::(__debug::)?set<int>\\\\*>>\\\\\\[\\\\\\]>\" } }\n   // { dg-final { whatis-regexp-test p3 \"std::unique_ptr<std::(__debug::)?set<std::unique_ptr<std::(__debug::)?vector<int>\\\\*>>\\\\\\[10\\\\\\]>\" } }\n-  // { dg-final { whatis-regexp-test p4 \"std::unique_ptr<std::(__debug::)?vector<std::unique_ptr<std::(__debug::)?list<std::string>\\\\\\[\\\\\\]>>\\\\\\[99\\\\\\]>\" { xfail { c++20 || debug_mode } } } }\n+  // { dg-final { whatis-regexp-test p4 \"std::unique_ptr<std::(__debug::)?vector<std::unique_ptr<std::(__debug::)?list<std::string>\\\\\\[\\\\\\]>>\\\\\\[99\\\\\\]>\" } }\n \n   placeholder(&p1);\t\t// Mark SPOT\n   placeholder(&p2);"}, {"sha": "cf699d22e780395429b0a8cfeadc80c8aa8ea858", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/cxx17.cc", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4347fea9c28b6dc5997ef8b87e49867a071967ea/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fcxx17.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4347fea9c28b6dc5997ef8b87e49867a071967ea/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fcxx17.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fcxx17.cc?ref=4347fea9c28b6dc5997ef8b87e49867a071967ea", "patch": "@@ -18,9 +18,6 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// Type printers only recognize the old std::string for now.\n-#define _GLIBCXX_USE_CXX11_ABI 0\n-\n #include <filesystem>\n #include <any>\n #include <optional>"}, {"sha": "b2f464d08945850549d0fb516c35f0831cc038cc", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/libfundts.cc", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4347fea9c28b6dc5997ef8b87e49867a071967ea/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Flibfundts.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4347fea9c28b6dc5997ef8b87e49867a071967ea/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Flibfundts.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Flibfundts.cc?ref=4347fea9c28b6dc5997ef8b87e49867a071967ea", "patch": "@@ -18,9 +18,6 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// Type printers only recognize the old std::string for now.\n-#define _GLIBCXX_USE_CXX11_ABI 0\n-\n #include <experimental/any>\n #include <experimental/optional>\n #include <experimental/string_view>\n@@ -50,7 +47,7 @@ main()\n   om = std::map<int, double>{ {1, 2.}, {3, 4.}, {5, 6.} };\n // { dg-final { regexp-test om {std::experimental::optional<std::(__debug::)?map<int, double>> containing std::(__debug::)?map with 3 elements = {\\[1\\] = 2, \\[3\\] = 4, \\[5\\] = 6}} } }\n   optional<std::string> os{ \"stringy\" };\n-// { dg-final { note-test os {std::experimental::optional<std::string> = {[contained value] = \"stringy\"}} { xfail { c++20 || debug_mode } } } }\n+// { dg-final { note-test os {std::experimental::optional<std::string> = {[contained value] = \"stringy\"}} } }\n \n   any a;\n // { dg-final { note-test a {std::experimental::any [no contained value]} } }\n@@ -61,7 +58,7 @@ main()\n   any ap = (void*)nullptr;\n // { dg-final { note-test ap {std::experimental::any containing void * = {[contained value] = 0x0}} } }\n   any as = *os;\n-// { dg-final { note-test as {std::experimental::any containing std::string = {[contained value] = \"stringy\"}} { xfail { c++20 || debug_mode } } } }\n+// { dg-final { note-test as {std::experimental::any containing std::string = {[contained value] = \"stringy\"}} } }\n   any as2(\"stringiest\");\n // { dg-final { regexp-test as2 {std::experimental::any containing const char \\* = {\\[contained value\\] = 0x[[:xdigit:]]+ \"stringiest\"}} } }\n   any am = *om;"}, {"sha": "41aec951c5d825d9e252c2c7b265a82bfa06e7be", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/simple.cc", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4347fea9c28b6dc5997ef8b87e49867a071967ea/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fsimple.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4347fea9c28b6dc5997ef8b87e49867a071967ea/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fsimple.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fsimple.cc?ref=4347fea9c28b6dc5997ef8b87e49867a071967ea", "patch": "@@ -20,9 +20,6 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// Type printers only recognize the old std::string for now.\n-#define _GLIBCXX_USE_CXX11_ABI 0\n-\n #include <string>\n #include <deque>\n #include <bitset>\n@@ -65,7 +62,7 @@ main()\n   std::list<std::string> lst;\n   lst.push_back(\"one\");\n   lst.push_back(\"two\");\n-// { dg-final { regexp-test lst {std::(__debug::)?list = {\\[0\\] = \"one\", \\[1\\] = \"two\"}} } }\n+// { dg-final { regexp-test lst {std::(__cxx11::)?(__debug::)?list = {\\[0\\] = \"one\", \\[1\\] = \"two\"}} } }\n \n   std::list<int>::iterator lstiter0;\n // { dg-final { note-test lstiter0 {non-dereferenceable iterator for std::list} } }"}, {"sha": "407fee4267cb66d8aa07f75d39e77278dc203f49", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/simple11.cc", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4347fea9c28b6dc5997ef8b87e49867a071967ea/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fsimple11.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4347fea9c28b6dc5997ef8b87e49867a071967ea/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fsimple11.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fsimple11.cc?ref=4347fea9c28b6dc5997ef8b87e49867a071967ea", "patch": "@@ -20,9 +20,6 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// Type printers only recognize the old std::string for now.\n-#define _GLIBCXX_USE_CXX11_ABI 0\n-\n #include <string>\n #include <deque>\n #include <bitset>\n@@ -61,7 +58,7 @@ main()\n   std::list<std::string> lst;\n   lst.push_back(\"one\");\n   lst.push_back(\"two\");\n-// { dg-final { regexp-test lst {std::(__debug::)?list = {\\[0\\] = \"one\", \\[1\\] = \"two\"}} } }\n+// { dg-final { regexp-test lst {std::(__cxx11::)?(__debug::)?list = {\\[0\\] = \"one\", \\[1\\] = \"two\"}} } }\n \n   std::list<std::string>::iterator lstiter = lst.begin();\n   tem = *lstiter;"}, {"sha": "23b9947a5de16d85960d04c55b54c9ffc9a65b5a", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/whatis.cc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4347fea9c28b6dc5997ef8b87e49867a071967ea/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fwhatis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4347fea9c28b6dc5997ef8b87e49867a071967ea/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fwhatis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fwhatis.cc?ref=4347fea9c28b6dc5997ef8b87e49867a071967ea", "patch": "@@ -18,10 +18,6 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// GDB can't find global variables using the abi_tag attribute.\n-// https://sourceware.org/bugzilla/show_bug.cgi?id=19436\n-#define _GLIBCXX_USE_CXX11_ABI 0\n-\n #include <string>\n #include <iostream>\n #include <regex>"}]}