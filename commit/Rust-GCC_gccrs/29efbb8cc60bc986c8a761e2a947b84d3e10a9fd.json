{"sha": "29efbb8cc60bc986c8a761e2a947b84d3e10a9fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjllZmJiOGNjNjBiYzk4NmM4YTc2MWUyYTk0N2I4NGQzZTEwYTlmZA==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2011-08-02T08:03:11Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-02T08:03:11Z"}, "message": "atree.h, [...]: New subprograms to manipulate Elist5.\n\n2011-08-02  Ed Schonberg  <schonberg@adacore.com>\n\n\t* atree.h, atree.ads, atree.adb: New subprograms to manipulate Elist5.\n\t* par_ch8.adb (P_Use_Type): initialize Used_Operations for node.\n\t* sinfo.ads, sinfo.adb (Used_Operations): new attribute of\n\tuse_type_clauses, to handle more efficiently use_type and use_all_type\n\tconstructs.\n\t* sem_ch8.adb: Rewrite Use_One_Type and End_Use_Type to handle the\n\tAda2012 Use_All_Type clause.\n\t(Use_Class_Wide_Operations): new procedure.\n\nFrom-SVN: r177090", "tree": {"sha": "cc6d04605b71c10f4bb506766ca63a1cd24b759c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc6d04605b71c10f4bb506766ca63a1cd24b759c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29efbb8cc60bc986c8a761e2a947b84d3e10a9fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29efbb8cc60bc986c8a761e2a947b84d3e10a9fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29efbb8cc60bc986c8a761e2a947b84d3e10a9fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29efbb8cc60bc986c8a761e2a947b84d3e10a9fd/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b0186f718a778b98e1c77a8279a10d79e2d83b8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0186f718a778b98e1c77a8279a10d79e2d83b8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0186f718a778b98e1c77a8279a10d79e2d83b8d"}], "stats": {"total": 235, "additions": 185, "deletions": 50}, "files": [{"sha": "fb77921fccc9ff44e7294d61570bb542987c64e5", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29efbb8cc60bc986c8a761e2a947b84d3e10a9fd/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29efbb8cc60bc986c8a761e2a947b84d3e10a9fd/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=29efbb8cc60bc986c8a761e2a947b84d3e10a9fd", "patch": "@@ -1,3 +1,14 @@\n+2011-08-02  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* atree.h, atree.ads, atree.adb: New subprograms to manipulate Elist5.\n+\t* par_ch8.adb (P_Use_Type): initialize Used_Operations for node.\n+\t* sinfo.ads, sinfo.adb (Used_Operations): new attribute of\n+\tuse_type_clauses, to handle more efficiently use_type and use_all_type\n+\tconstructs.\n+\t* sem_ch8.adb: Rewrite Use_One_Type and End_Use_Type to handle the\n+\tAda2012 Use_All_Type clause.\n+\t(Use_Class_Wide_Operations): new procedure.\n+\n 2011-08-02  Robert Dewar  <dewar@adacore.com>\n \n \t* exp_util.adb, par-ch10.adb, par-ch6.adb, sem.adb, sem_ch6.adb,"}, {"sha": "306845b5f755eaf51d9aa09398c63b24f26e7cd5", "filename": "gcc/ada/atree.adb", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29efbb8cc60bc986c8a761e2a947b84d3e10a9fd/gcc%2Fada%2Fatree.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29efbb8cc60bc986c8a761e2a947b84d3e10a9fd/gcc%2Fada%2Fatree.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.adb?ref=29efbb8cc60bc986c8a761e2a947b84d3e10a9fd", "patch": "@@ -2457,6 +2457,17 @@ package body Atree is\n          end if;\n       end Elist4;\n \n+      function Elist5 (N : Node_Id) return Elist_Id is\n+         pragma Assert (N <= Nodes.Last);\n+         Value : constant Union_Id := Nodes.Table (N).Field5;\n+      begin\n+         if Value = 0 then\n+            return No_Elist;\n+         else\n+            return Elist_Id (Value);\n+         end if;\n+      end Elist5;\n+\n       function Elist8 (N : Node_Id) return Elist_Id is\n          pragma Assert (Nkind (N) in N_Entity);\n          Value : constant Union_Id := Nodes.Table (N + 1).Field8;\n@@ -4696,6 +4707,11 @@ package body Atree is\n          Nodes.Table (N).Field4 := Union_Id (Val);\n       end Set_Elist4;\n \n+      procedure Set_Elist5 (N : Node_Id; Val : Elist_Id) is\n+      begin\n+         Nodes.Table (N).Field5 := Union_Id (Val);\n+      end Set_Elist5;\n+\n       procedure Set_Elist8 (N : Node_Id; Val : Elist_Id) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);"}, {"sha": "2f88bb40daae5399970630db1686791766fecba1", "filename": "gcc/ada/atree.ads", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29efbb8cc60bc986c8a761e2a947b84d3e10a9fd/gcc%2Fada%2Fatree.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29efbb8cc60bc986c8a761e2a947b84d3e10a9fd/gcc%2Fada%2Fatree.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.ads?ref=29efbb8cc60bc986c8a761e2a947b84d3e10a9fd", "patch": "@@ -1111,6 +1111,9 @@ package Atree is\n       function Elist4 (N : Node_Id) return Elist_Id;\n       pragma Inline (Elist4);\n \n+      function Elist5 (N : Node_Id) return Elist_Id;\n+      pragma Inline (Elist5);\n+\n       function Elist8 (N : Node_Id) return Elist_Id;\n       pragma Inline (Elist8);\n \n@@ -2177,6 +2180,9 @@ package Atree is\n       procedure Set_Elist4 (N : Node_Id; Val : Elist_Id);\n       pragma Inline (Set_Elist4);\n \n+      procedure Set_Elist5 (N : Node_Id; Val : Elist_Id);\n+      pragma Inline (Set_Elist5);\n+\n       procedure Set_Elist8 (N : Node_Id; Val : Elist_Id);\n       pragma Inline (Set_Elist8);\n "}, {"sha": "cc4e9b1e3ed6a98a43f211549b82a48fba080f4a", "filename": "gcc/ada/atree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29efbb8cc60bc986c8a761e2a947b84d3e10a9fd/gcc%2Fada%2Fatree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29efbb8cc60bc986c8a761e2a947b84d3e10a9fd/gcc%2Fada%2Fatree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.h?ref=29efbb8cc60bc986c8a761e2a947b84d3e10a9fd", "patch": "@@ -431,6 +431,7 @@ extern Node_Id Current_Error_Node;\n #define Elist2(N)     Field2  (N)\n #define Elist3(N)     Field3  (N)\n #define Elist4(N)     Field4  (N)\n+#define Elist5(N)     Field5  (N)\n #define Elist8(N)     Field8  (N)\n #define Elist10(N)    Field10 (N)\n #define Elist13(N)    Field13 (N)"}, {"sha": "eefd7d823166e7bf3d0d2de8454c45d35387aa14", "filename": "gcc/ada/par-ch8.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29efbb8cc60bc986c8a761e2a947b84d3e10a9fd/gcc%2Fada%2Fpar-ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29efbb8cc60bc986c8a761e2a947b84d3e10a9fd/gcc%2Fada%2Fpar-ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch8.adb?ref=29efbb8cc60bc986c8a761e2a947b84d3e10a9fd", "patch": "@@ -124,6 +124,7 @@ package body Ch8 is\n       Use_Node := New_Node (N_Use_Type_Clause, Prev_Token_Ptr);\n       Set_All_Present (Use_Node, All_Present);\n       Set_Subtype_Marks (Use_Node, New_List);\n+      Set_Used_Operations (Use_Node, No_Elist);\n \n       if Ada_Version = Ada_83 then\n          Error_Msg_SC (\"(Ada 83) use type not allowed!\");"}, {"sha": "ad87c6f6c6523920af2bc94ea2cfad0cfd885b68", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 119, "deletions": 50, "changes": 169, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29efbb8cc60bc986c8a761e2a947b84d3e10a9fd/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29efbb8cc60bc986c8a761e2a947b84d3e10a9fd/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=29efbb8cc60bc986c8a761e2a947b84d3e10a9fd", "patch": "@@ -2679,6 +2679,23 @@ package body Sem_Ch8 is\n          Chain_Use_Clause (N);\n       end if;\n \n+      --  Commented needed???\n+\n+      if Used_Operations (N) /= No_Elist then\n+         declare\n+            Elmt : Elmt_Id;\n+         begin\n+            Elmt := First_Elmt (Used_Operations (N));\n+            while Present (Elmt) loop\n+               Set_Is_Potentially_Use_Visible (Node (Elmt));\n+               Next_Elmt (Elmt);\n+            end loop;\n+         end;\n+\n+         return;\n+      end if;\n+\n+      Set_Used_Operations (N, New_Elmt_List);\n       Id := First (Subtype_Marks (N));\n       while Present (Id) loop\n          Find_Type (Id);\n@@ -3535,25 +3552,8 @@ package body Sem_Ch8 is\n    procedure End_Use_Type (N : Node_Id) is\n       Elmt    : Elmt_Id;\n       Id      : Entity_Id;\n-      Op_List : Elist_Id;\n-      Op      : Entity_Id;\n       T       : Entity_Id;\n \n-      function May_Be_Used_Primitive_Of (T : Entity_Id) return Boolean;\n-      --  An operator may be primitive in several types, if they are declared\n-      --  in the same scope as the operator. To determine the use-visibility of\n-      --  the operator in such cases we must examine all types in the profile.\n-\n-      ------------------------------\n-      -- May_Be_Used_Primitive_Of --\n-      ------------------------------\n-\n-      function May_Be_Used_Primitive_Of (T : Entity_Id) return Boolean is\n-      begin\n-         return Scope (Op) = Scope (T)\n-           and then (In_Use (T) or else Is_Potentially_Use_Visible (T));\n-      end May_Be_Used_Primitive_Of;\n-\n    --  Start of processing for End_Use_Type\n \n    begin\n@@ -3585,43 +3585,22 @@ package body Sem_Ch8 is\n             Set_In_Use (Base_Type (T), False);\n             Set_Current_Use_Clause (T, Empty);\n             Set_Current_Use_Clause (Base_Type (T), Empty);\n-            Op_List := Collect_Primitive_Operations (T);\n-\n-            Elmt := First_Elmt (Op_List);\n-            while Present (Elmt) loop\n-               Op := Node (Elmt);\n-\n-               if Nkind (Op) = N_Defining_Operator_Symbol then\n-                  declare\n-                     T_First : constant Entity_Id :=\n-                                 Base_Type (Etype (First_Formal (Op)));\n-                     T_Res   : constant Entity_Id := Base_Type (Etype (Op));\n-                     T_Next  : Entity_Id;\n-\n-                  begin\n-                     if Present (Next_Formal (First_Formal (Op))) then\n-                        T_Next :=\n-                          Base_Type (Etype (Next_Formal (First_Formal (Op))));\n-                     else\n-                        T_Next := T_First;\n-                     end if;\n-\n-                     if not May_Be_Used_Primitive_Of (T_First)\n-                       and then not May_Be_Used_Primitive_Of (T_Next)\n-                       and then not May_Be_Used_Primitive_Of (T_Res)\n-                     then\n-                        Set_Is_Potentially_Use_Visible (Op, False);\n-                     end if;\n-                  end;\n-               end if;\n-\n-               Next_Elmt (Elmt);\n-            end loop;\n          end if;\n \n          <<Continue>>\n-         Next (Id);\n+            Next (Id);\n       end loop;\n+\n+      if Is_Empty_Elmt_List (Used_Operations (N)) then\n+         return;\n+\n+      else\n+         Elmt := First_Elmt (Used_Operations (N));\n+         while Present (Elmt) loop\n+            Set_Is_Potentially_Use_Visible (Node (Elmt), False);\n+            Next_Elmt (Elmt);\n+         end loop;\n+      end if;\n    end End_Use_Type;\n \n    ----------------------\n@@ -7578,6 +7557,11 @@ package body Sem_Ch8 is\n       --  type clause is in the spec of the same package. Even though the spec\n       --  was analyzed first, its context is reloaded when analysing the body.\n \n+      procedure Use_Class_Wide_Operations (Typ : Entity_Id);\n+      --  AI05-150: if the use_type_clause carries the \"all\" qualifier,\n+      --  class-wide operations of ancestor types are use-visible if the\n+      --  ancestor type is visible.\n+\n       ----------------------------\n       -- Spec_Reloaded_For_Body --\n       ----------------------------\n@@ -7599,6 +7583,70 @@ package body Sem_Ch8 is\n          return False;\n       end Spec_Reloaded_For_Body;\n \n+      -------------------------------\n+      -- Use_Class_Wide_Operations --\n+      -------------------------------\n+\n+      procedure Use_Class_Wide_Operations (Typ : Entity_Id) is\n+         Scop : Entity_Id;\n+         Ent  : Entity_Id;\n+\n+         function Is_Class_Wide_Operation_Of\n+        (Op  : Entity_Id;\n+         T   : Entity_Id) return Boolean;\n+         --  Determine whether a subprogram has a class-wide parameter or\n+         --  result that is T'Class.\n+\n+         ---------------------------------\n+         --  Is_Class_Wide_Operation_Of --\n+         ---------------------------------\n+\n+         function Is_Class_Wide_Operation_Of\n+           (Op  : Entity_Id;\n+            T   : Entity_Id) return Boolean\n+         is\n+            Formal : Entity_Id;\n+\n+         begin\n+            Formal := First_Formal (Op);\n+            while Present (Formal) loop\n+               if Etype (Formal) = Class_Wide_Type (T) then\n+                  return True;\n+               end if;\n+               Next_Formal (Formal);\n+            end loop;\n+\n+            if Etype (Op) = Class_Wide_Type (T) then\n+               return True;\n+            end if;\n+\n+            return False;\n+         end Is_Class_Wide_Operation_Of;\n+\n+      --  Start of processing for Use_Class_Wide_Operations\n+\n+      begin\n+         Scop := Scope (Typ);\n+         if not Is_Hidden (Scop) then\n+            Ent := First_Entity (Scop);\n+            while Present (Ent) loop\n+               if Is_Overloadable (Ent)\n+                 and then Is_Class_Wide_Operation_Of (Ent, Typ)\n+                 and then not Is_Potentially_Use_Visible (Ent)\n+               then\n+                  Set_Is_Potentially_Use_Visible (Ent);\n+                  Append_Elmt (Ent, Used_Operations (Parent (Id)));\n+               end if;\n+\n+               Next_Entity (Ent);\n+            end loop;\n+         end if;\n+\n+         if Is_Derived_Type (Typ) then\n+            Use_Class_Wide_Operations (Etype (Base_Type (Typ)));\n+         end if;\n+      end Use_Class_Wide_Operations;\n+\n    --  Start of processing for Use_One_Type;\n \n    begin\n@@ -7654,19 +7702,40 @@ package body Sem_Ch8 is\n          Set_Current_Use_Clause (T, Parent (Id));\n          Op_List := Collect_Primitive_Operations (T);\n \n+         --  Iterate over primitive operations of the type. If an operation is\n+         --  already use_visible, it is the result of a previous use_clause,\n+         --  and already appears on the corresponding entity chain.\n+\n          Elmt := First_Elmt (Op_List);\n          while Present (Elmt) loop\n             if (Nkind (Node (Elmt)) = N_Defining_Operator_Symbol\n                  or else Chars (Node (Elmt)) in Any_Operator_Name)\n               and then not Is_Hidden (Node (Elmt))\n+              and then not Is_Potentially_Use_Visible (Node (Elmt))\n             then\n                Set_Is_Potentially_Use_Visible (Node (Elmt));\n+               Append_Elmt (Node (Elmt), Used_Operations (Parent (Id)));\n+\n+            elsif Ada_Version >= Ada_2012\n+              and then All_Present (Parent (Id))\n+              and then not Is_Hidden (Node (Elmt))\n+              and then not Is_Potentially_Use_Visible (Node (Elmt))\n+            then\n+               Set_Is_Potentially_Use_Visible (Node (Elmt));\n+               Append_Elmt (Node (Elmt), Used_Operations (Parent (Id)));\n             end if;\n \n             Next_Elmt (Elmt);\n          end loop;\n       end if;\n \n+      if Ada_Version >= Ada_2012\n+        and then All_Present (Parent (Id))\n+        and then Is_Tagged_Type (T)\n+      then\n+         Use_Class_Wide_Operations (T);\n+      end if;\n+\n       --  If warning on redundant constructs, check for unnecessary WITH\n \n       if Warn_On_Redundant_Constructs"}, {"sha": "9ac9424063c01c8c8564ce03595dc5e18d1e7dfa", "filename": "gcc/ada/sinfo.adb", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29efbb8cc60bc986c8a761e2a947b84d3e10a9fd/gcc%2Fada%2Fsinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29efbb8cc60bc986c8a761e2a947b84d3e10a9fd/gcc%2Fada%2Fsinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.adb?ref=29efbb8cc60bc986c8a761e2a947b84d3e10a9fd", "patch": "@@ -3078,6 +3078,14 @@ package body Sinfo is\n       return List2 (N);\n    end Visible_Declarations;\n \n+   function Used_Operations\n+     (N : Node_Id) return Elist_Id is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Use_Type_Clause);\n+      return Elist5 (N);\n+   end Used_Operations;\n+\n    function Was_Originally_Stub\n       (N : Node_Id) return Boolean is\n    begin\n@@ -6123,6 +6131,14 @@ package body Sinfo is\n       Set_List2_With_Parent (N, Val);\n    end Set_Visible_Declarations;\n \n+   procedure Set_Used_Operations\n+     (N : Node_Id; Val :  Elist_Id) is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Use_Type_Clause);\n+      Set_Elist5 (N, Val);\n+   end Set_Used_Operations;\n+\n    procedure Set_Was_Originally_Stub\n       (N : Node_Id; Val : Boolean := True) is\n    begin"}, {"sha": "8d1b51ef6b5cd23fc4bf350dc4e38fcb9fba3bc2", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29efbb8cc60bc986c8a761e2a947b84d3e10a9fd/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29efbb8cc60bc986c8a761e2a947b84d3e10a9fd/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=29efbb8cc60bc986c8a761e2a947b84d3e10a9fd", "patch": "@@ -1804,6 +1804,12 @@ package Sinfo is\n    --    the body, so this flag is used to generate the proper message (see\n    --    Sem_Util.Check_Unused_Withs for details)\n \n+   --  Used_Operations (Elist5-Sem)\n+   --    Present in N_Use_Type_Clause nodes. Holds the list of operations that\n+   --    are made potentially use-visible by the clause. Simplifies processing\n+   --    on exit from the scope of the use_type_clause, in particular in the\n+   --    case of Use_All_Type, when those operations several scopes.\n+\n    --  Was_Originally_Stub (Flag13-Sem)\n    --    This flag is set in the node for a proper body that replaces stub.\n    --    During the analysis procedure, stubs in some situations get rewritten\n@@ -4913,6 +4919,7 @@ package Sinfo is\n       --  Subtype_Marks (List2)\n       --  Next_Use_Clause (Node3-Sem)\n       --  Hidden_By_Use_Clause (Elist4-Sem)\n+      --  Used_Operations (Elist5-Sem)\n       --  All_Present (Flag15)\n \n       -------------------------------\n@@ -8960,6 +8967,9 @@ package Sinfo is\n    function Visible_Declarations\n      (N : Node_Id) return List_Id;    -- List2\n \n+   function Used_Operations\n+     (N : Node_Id) return Elist_Id;   -- Elist5\n+\n    function Was_Originally_Stub\n      (N : Node_Id) return Boolean;    -- Flag13\n \n@@ -9932,6 +9942,9 @@ package Sinfo is\n    procedure Set_Visible_Declarations\n      (N : Node_Id; Val : List_Id);            -- List2\n \n+   procedure Set_Used_Operations\n+     (N : Node_Id; Val : Elist_Id);           -- Elist5\n+\n    procedure Set_Was_Originally_Stub\n      (N : Node_Id; Val : Boolean := True);    -- Flag13\n \n@@ -11993,6 +12006,7 @@ package Sinfo is\n    pragma Inline (Variant_Part);\n    pragma Inline (Variants);\n    pragma Inline (Visible_Declarations);\n+   pragma Inline (Used_Operations);\n    pragma Inline (Was_Originally_Stub);\n    pragma Inline (Withed_Body);\n    pragma Inline (Zero_Cost_Handling);\n@@ -12313,6 +12327,7 @@ package Sinfo is\n    pragma Inline (Set_Variant_Part);\n    pragma Inline (Set_Variants);\n    pragma Inline (Set_Visible_Declarations);\n+   pragma Inline (Set_Used_Operations);\n    pragma Inline (Set_Was_Originally_Stub);\n    pragma Inline (Set_Withed_Body);\n    pragma Inline (Set_Zero_Cost_Handling);"}]}