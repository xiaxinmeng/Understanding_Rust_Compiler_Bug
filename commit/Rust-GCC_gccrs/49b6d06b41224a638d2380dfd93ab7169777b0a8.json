{"sha": "49b6d06b41224a638d2380dfd93ab7169777b0a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDliNmQwNmI0MTIyNGE2MzhkMjM4MGRmZDkzYWI3MTY5Nzc3YjBhOA==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-12-05T02:28:45Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-12-05T02:28:45Z"}, "message": "(shiftcosts): For SH3, max cost of arithmetic right shift is 3.\n\n(shiftcosts): For SH3, max cost of arithmetic right\nshift is 3.\n(expand_ashiftrt): For SH3, if shift cost is more than 3, then\ncall gen_ashrsi3_d to use shad instruction.\n\nFrom-SVN: r10674", "tree": {"sha": "7b1330bedbab44c4dcc04d70349fe413bc1be00a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b1330bedbab44c4dcc04d70349fe413bc1be00a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49b6d06b41224a638d2380dfd93ab7169777b0a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49b6d06b41224a638d2380dfd93ab7169777b0a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49b6d06b41224a638d2380dfd93ab7169777b0a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49b6d06b41224a638d2380dfd93ab7169777b0a8/comments", "author": null, "committer": null, "parents": [{"sha": "57883245f35ac30d83c43339b45927b1cb20e4e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57883245f35ac30d83c43339b45927b1cb20e4e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57883245f35ac30d83c43339b45927b1cb20e4e6"}], "stats": {"total": 30, "additions": 21, "deletions": 9}, "files": [{"sha": "e89280e499fae0e63ea98d44e2f7b01266fc4cdd", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49b6d06b41224a638d2380dfd93ab7169777b0a8/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49b6d06b41224a638d2380dfd93ab7169777b0a8/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=49b6d06b41224a638d2380dfd93ab7169777b0a8", "patch": "@@ -785,7 +785,13 @@ shiftcosts (x)\n \n   /* Otherwise, return the true cost in instructions.  */\n   if (GET_CODE (x) == ASHIFTRT)\n-    return ashiftrt_insns[value];\n+    {\n+      int cost = ashiftrt_insns[value];\n+      /* If SH3, then we put the constant in a reg and use shad.  */\n+      if (TARGET_SH3 && cost > 3)\n+\tcost = 3;\n+      return cost;\n+    }\n   else\n     return shift_insns[value];\n }\n@@ -881,9 +887,6 @@ gen_ashift (type, n, reg)\n /* Output RTL to split a constant shift into its component SH constant\n    shift instructions.  */\n    \n-/* ??? For SH3, should reject constant shifts when slower than loading the\n-   shift count into a register?  */\n-\n int\n gen_shifty_op (code, operands)\n      int code;\n@@ -931,12 +934,21 @@ expand_ashiftrt (operands)\n   tree func_name;\n   int value;\n \n-  if (TARGET_SH3 && GET_CODE (operands[2]) != CONST_INT)\n+  if (TARGET_SH3)\n     {\n-      rtx count = copy_to_mode_reg (SImode, operands[2]);\n-      emit_insn (gen_negsi2 (count, count));\n-      emit_insn (gen_ashrsi3_d (operands[0], operands[1], count));\n-      return 1;\n+      if (GET_CODE (operands[2]) != CONST_INT)\n+\t{\n+\t  rtx count = copy_to_mode_reg (SImode, operands[2]);\n+\t  emit_insn (gen_negsi2 (count, count));\n+\t  emit_insn (gen_ashrsi3_d (operands[0], operands[1], count));\n+\t  return 1;\n+\t}\n+      else if (ashiftrt_insns[INTVAL (operands[2])] > 3)\n+\t{\n+\t  rtx count = force_reg (SImode, GEN_INT (- INTVAL (operands[2])));\n+\t  emit_insn (gen_ashrsi3_d (operands[0], operands[1], count));\n+\t  return 1;\n+\t}\n     }\n   if (GET_CODE (operands[2]) != CONST_INT)\n     return 0;"}]}