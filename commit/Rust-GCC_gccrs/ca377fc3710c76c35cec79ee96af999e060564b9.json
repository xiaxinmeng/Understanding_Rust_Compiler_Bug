{"sha": "ca377fc3710c76c35cec79ee96af999e060564b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2EzNzdmYzM3MTBjNzZjMzVjZWM3OWVlOTZhZjk5OWUwNjA1NjRiOQ==", "commit": {"author": {"name": "Aditya Kumar", "email": "aditya.k7@samsung.com", "date": "2015-12-02T20:40:17Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2015-12-02T20:40:17Z"}, "message": "fix PR68550: do not handle ISL loop peeled statements\n\nIn case ISL did some loop peeling, like this:\n\n  S_8(0);\n  for (int c1 = 1; c1 <= 5; c1 += 1) {\n    S_8(c1);\n  }\n  S_8(6);\n\nwe should not copy loop-phi nodes in S_8(0) or in S_8(6).\n\n\tPR tree-optimization/68550\n\t* graphite-isl-ast-to-gimple.c (copy_loop_phi_nodes): Add dump.\n\t(copy_bb_and_scalar_dependences): Do not code generate loop peeled\n\tstatements.\n\n\t* gfortran.dg/graphite/pr68550-1.f90: New.\n\t* gfortran.dg/graphite/pr68550-2.f90: New.\n\nCo-Authored-By: Sebastian Pop <s.pop@samsung.com>\n\nFrom-SVN: r231206", "tree": {"sha": "0679698553e27f050c59ee1e87f955b6ec39918c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0679698553e27f050c59ee1e87f955b6ec39918c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca377fc3710c76c35cec79ee96af999e060564b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca377fc3710c76c35cec79ee96af999e060564b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca377fc3710c76c35cec79ee96af999e060564b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca377fc3710c76c35cec79ee96af999e060564b9/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c297b7cd54c0a39c906a3e445a36c16aeef7defd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c297b7cd54c0a39c906a3e445a36c16aeef7defd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c297b7cd54c0a39c906a3e445a36c16aeef7defd"}], "stats": {"total": 91, "additions": 91, "deletions": 0}, "files": [{"sha": "7fa28913165b5b27a1186316daf6bf44c21ad3f7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca377fc3710c76c35cec79ee96af999e060564b9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca377fc3710c76c35cec79ee96af999e060564b9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ca377fc3710c76c35cec79ee96af999e060564b9", "patch": "@@ -1,3 +1,11 @@\n+2015-12-02  Aditya Kumar  <aditya.k7@samsung.com>\n+\t    Sebastian Pop  <s.pop@samsung.com>\n+\n+\tPR tree-optimization/68550\n+\t* graphite-isl-ast-to-gimple.c (copy_loop_phi_nodes): Add dump.\n+\t(copy_bb_and_scalar_dependences): Do not code generate loop peeled\n+\tstatements.\n+\n 2015-12-02  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n \n \t* configure.ac: Check assembler support for R_PPC64_ENTRY relocation."}, {"sha": "3139f302ff06af1cf3577903c44a11385f370c0f", "filename": "gcc/graphite-isl-ast-to-gimple.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca377fc3710c76c35cec79ee96af999e060564b9/gcc%2Fgraphite-isl-ast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca377fc3710c76c35cec79ee96af999e060564b9/gcc%2Fgraphite-isl-ast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-isl-ast-to-gimple.c?ref=ca377fc3710c76c35cec79ee96af999e060564b9", "patch": "@@ -2096,6 +2096,12 @@ translate_isl_ast_to_gimple::copy_loop_phi_nodes (basic_block bb,\n       codegen_error = !copy_loop_phi_args (phi, ibp_old_bb, new_phi,\n \t\t\t\t\t  ibp_new_bb, true);\n       update_stmt (new_phi);\n+\n+      if (dump_file)\n+\t{\n+\t  fprintf (dump_file, \"[codegen] creating loop-phi node: \");\n+\t  print_gimple_stmt (dump_file, new_phi, 0, 0);\n+\t}\n     }\n \n   return true;\n@@ -2894,6 +2900,26 @@ translate_isl_ast_to_gimple::copy_bb_and_scalar_dependences (basic_block bb,\n \t      return NULL;\n \t    }\n \n+\t  /* In case ISL did some loop peeling, like this:\n+\n+\t       S_8(0);\n+\t       for (int c1 = 1; c1 <= 5; c1 += 1) {\n+\t         S_8(c1);\n+\t       }\n+\t       S_8(6);\n+\n+\t     there should be no loop-phi nodes in S_8(0).\n+\n+\t     FIXME: We need to reason about dynamic instances of S_8, i.e., the\n+\t     values of all scalar variables: for the moment we instantiate only\n+\t     SCEV analyzable expressions on the iteration domain, and we need to\n+\t     extend that to reductions that cannot be analyzed by SCEV.  */\n+\t  if (!bb_in_sese_p (phi_bb, region->if_region->true_region->region))\n+\t    {\n+\t      codegen_error = true;\n+\t      return NULL;\n+\t    }\n+\n \t  if (dump_file)\n \t    fprintf (dump_file, \"[codegen] bb_%d contains loop phi nodes.\\n\",\n \t\t     bb->index);"}, {"sha": "de67812f26d96afcc0f9a10282a5ad1878accbde", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca377fc3710c76c35cec79ee96af999e060564b9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca377fc3710c76c35cec79ee96af999e060564b9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ca377fc3710c76c35cec79ee96af999e060564b9", "patch": "@@ -1,3 +1,10 @@\n+2015-12-02  Aditya Kumar  <aditya.k7@samsung.com>\n+\t    Sebastian Pop  <s.pop@samsung.com>\n+\n+\tPR tree-optimization/68550\n+\t* gfortran.dg/graphite/pr68550-1.f90: New.\n+\t* gfortran.dg/graphite/pr68550-2.f90: New.\n+\n 2015-12-02  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/68513"}, {"sha": "beed63eb1844718840c37dd4db6159447b4a1f8c", "filename": "gcc/testsuite/gfortran.dg/graphite/pr68550-1.f90", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca377fc3710c76c35cec79ee96af999e060564b9/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fpr68550-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca377fc3710c76c35cec79ee96af999e060564b9/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fpr68550-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fpr68550-1.f90?ref=ca377fc3710c76c35cec79ee96af999e060564b9", "patch": "@@ -0,0 +1,36 @@\n+! { dg-do compile }\n+! { dg-options \"-floop-nest-optimize -O2\" }\n+\n+SUBROUTINE integrate_core_1(grid,coef_xyz,pol_x,pol_y,&\n+             pol_z,map,sphere_bounds,cmax,gridbounds)\n+    INTEGER, PARAMETER :: dp=8\n+    INTEGER, INTENT(IN)    :: sphere_bounds(*), cmax, &\n+                              map(-cmax:cmax,1:3), &\n+                              gridbounds(2,3)\n+    REAL(dp), INTENT(IN) :: grid(gridbounds(1,1):gridbounds(2,1), &\n+             gridbounds(1,2):gridbounds(2,2),&\n+             gridbounds(1,3):gridbounds(2,3))\n+    INTEGER, PARAMETER     :: lp = 1\n+    REAL(dp), INTENT(IN)   :: pol_x(0:lp,-cmax:cmax), &\n+                              pol_y(1:2,0:lp,-cmax:0), &\n+                              pol_z(1:2,0:lp,-cmax:0)\n+    REAL(dp), INTENT(OUT) :: coef_xyz(((lp+1)*(lp+2)*(lp+3))/6)\n+    INTEGER   :: i, ig, igmax, igmin, j, j2, &\n+                 jg, jg2, jgmin, k, k2, kg, &\n+                 kg2, kgmin, lxp, sci\n+    REAL(dp)  :: coef_x(4,0:lp), &\n+                 coef_xy(2,((lp+1)*(lp+2))/2), &\n+                 s(4)\n+    DO kg=kgmin,0\n+       DO jg=jgmin,0\n+          coef_x=0.0_dp\n+          DO ig=igmin,igmax\n+             DO lxp=0,lp\n+                coef_x(:,lxp)=coef_x(:,lxp)+s(:)*pol_x(lxp,ig)\n+             ENDDO\n+          END DO\n+             coef_xy(:,3)=coef_xy(:,3)+coef_x(3:4,0)*pol_y(2,1,jg)\n+       END DO\n+                coef_xyz(3)=coef_xyz(3)+coef_xy(1,3)*pol_z(1,0,kg)\n+    END DO\n+  END SUBROUTINE integrate_core_1"}, {"sha": "fae0c92a7dc48c5594c02cf533ffa8f5575a626b", "filename": "gcc/testsuite/gfortran.dg/graphite/pr68550-2.f90", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca377fc3710c76c35cec79ee96af999e060564b9/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fpr68550-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca377fc3710c76c35cec79ee96af999e060564b9/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fpr68550-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fpr68550-2.f90?ref=ca377fc3710c76c35cec79ee96af999e060564b9", "patch": "@@ -0,0 +1,14 @@\n+! { dg-do compile }\n+! { dg-options \"-floop-nest-optimize -fcheck=bounds -O1\" }\n+\n+SUBROUTINE PD2VAL(RES,NDERIV,TG1,TG2,C0)\n+    INTEGER, PARAMETER :: dp=8\n+    REAL(KIND=dp), INTENT(OUT)  :: res(*)\n+    REAL(KIND=dp), INTENT(IN)   :: TG1, TG2, C0(105,*)\n+    REAL(KIND=dp)               :: T1(0:13), T2(0:13)\n+ DO K=1,NDERIV+1\n+  RES(K)=RES(K)+DOT_PRODUCT(T1(0:7),C0(70:77,K))*T2(6)\n+  RES(K)=RES(K)+DOT_PRODUCT(T1(0:4),C0(91:95,K))*T2(9)\n+  RES(K)=RES(K)+DOT_PRODUCT(T1(0:3),C0(96:99,K))*T2(10)\n+ ENDDO\n+END SUBROUTINE PD2VAL"}]}