{"sha": "561c9153eb5c0824bc318f06dbdd4563d064e235", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTYxYzkxNTNlYjVjMDgyNGJjMzE4ZjA2ZGJkZDQ1NjNkMDY0ZTIzNQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-03-10T23:51:08Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-03-10T23:51:08Z"}, "message": "reload.c (copy_replacements_1): New.\n\n        * reload.c (copy_replacements_1): New.\n        (copy_replacements): Use it to recurse through the rtx.\n\nFrom-SVN: r50552", "tree": {"sha": "5d4ad533c793ccb5a768c8588e16d5a647fe93e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d4ad533c793ccb5a768c8588e16d5a647fe93e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/561c9153eb5c0824bc318f06dbdd4563d064e235", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/561c9153eb5c0824bc318f06dbdd4563d064e235", "html_url": "https://github.com/Rust-GCC/gccrs/commit/561c9153eb5c0824bc318f06dbdd4563d064e235", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/561c9153eb5c0824bc318f06dbdd4563d064e235/comments", "author": null, "committer": null, "parents": [{"sha": "a10e3b428cf30d7a67e7f9d8872878dbbed0fbfa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a10e3b428cf30d7a67e7f9d8872878dbbed0fbfa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a10e3b428cf30d7a67e7f9d8872878dbbed0fbfa"}], "stats": {"total": 91, "additions": 59, "deletions": 32}, "files": [{"sha": "fb929572e7225543a5b7974f8df9bbb6d764482f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561c9153eb5c0824bc318f06dbdd4563d064e235/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561c9153eb5c0824bc318f06dbdd4563d064e235/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=561c9153eb5c0824bc318f06dbdd4563d064e235", "patch": "@@ -1,3 +1,8 @@\n+2002-03-10  Richard Henderson  <rth@redhat.com>\n+\n+\t* reload.c (copy_replacements_1): New.\n+\t(copy_replacements): Use it to recurse through the rtx.\n+\n 2002-03-10  Richard Henderson  <rth@redhat.com>\n \n \t* loop.c (strength_reduce): Compute number of iterations as"}, {"sha": "271ad655803449f7fdb91511f45cde07d226b85c", "filename": "gcc/reload.c", "status": "modified", "additions": 54, "deletions": 32, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561c9153eb5c0824bc318f06dbdd4563d064e235/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561c9153eb5c0824bc318f06dbdd4563d064e235/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=561c9153eb5c0824bc318f06dbdd4563d064e235", "patch": "@@ -266,8 +266,9 @@ static int find_reloads_address_1 PARAMS ((enum machine_mode, rtx, int, rtx *,\n static void find_reloads_address_part PARAMS ((rtx, rtx *, enum reg_class,\n \t\t\t\t\t     enum machine_mode, int,\n \t\t\t\t\t     enum reload_type, int));\n-static rtx find_reloads_subreg_address PARAMS ((rtx, int, int, enum reload_type,\n-\t\t\t\t\t      int, rtx));\n+static rtx find_reloads_subreg_address PARAMS ((rtx, int, int,\n+\t\t\t\t\t\tenum reload_type, int, rtx));\n+static void copy_replacements_1 PARAMS ((rtx *, rtx *, int));\n static int find_inc_amount\tPARAMS ((rtx, rtx));\n \f\n #ifdef HAVE_SECONDARY_RELOADS\n@@ -5888,46 +5889,67 @@ subst_reloads (insn)\n     }\n }\n \f\n-/* Make a copy of any replacements being done into X and move those copies\n-   to locations in Y, a copy of X.  We only look at the highest level of\n-   the RTL.  */\n+/* Make a copy of any replacements being done into X and move those\n+   copies to locations in Y, a copy of X.  */\n \n void\n copy_replacements (x, y)\n-     rtx x;\n-     rtx y;\n+     rtx x, y;\n {\n-  int i, j;\n-  enum rtx_code code = GET_CODE (x);\n-  const char *fmt = GET_RTX_FORMAT (code);\n-  struct replacement *r;\n-\n   /* We can't support X being a SUBREG because we might then need to know its\n      location if something inside it was replaced.  */\n-  if (code == SUBREG)\n+  if (GET_CODE (x) == SUBREG)\n     abort ();\n \n-  for (i = GET_RTX_LENGTH (code) - 1; i >= 0; i--)\n-    if (fmt[i] == 'e')\n-      for (j = 0; j < n_replacements; j++)\n+  copy_replacements_1 (&x, &y, n_replacements);\n+}\n+\n+static void\n+copy_replacements_1 (px, py, orig_replacements)\n+     rtx *px;\n+     rtx *py;\n+     int orig_replacements;\n+{\n+  int i, j;\n+  rtx x, y;\n+  struct replacement *r;\n+  enum rtx_code code;\n+  const char *fmt;\n+\n+  for (j = 0; j < orig_replacements; j++)\n+    {\n+      if (replacements[j].subreg_loc == px)\n \t{\n-\t  if (replacements[j].subreg_loc == &XEXP (x, i))\n-\t    {\n-\t      r = &replacements[n_replacements++];\n-\t      r->where = replacements[j].where;\n-\t      r->subreg_loc = &XEXP (y, i);\n-\t      r->what = replacements[j].what;\n-\t      r->mode = replacements[j].mode;\n-\t    }\n-\t  else if (replacements[j].where == &XEXP (x, i))\n-\t    {\n-\t      r = &replacements[n_replacements++];\n-\t      r->where = &XEXP (y, i);\n-\t      r->subreg_loc = 0;\n-\t      r->what = replacements[j].what;\n-\t      r->mode = replacements[j].mode;\n-\t    }\n+\t  r = &replacements[n_replacements++];\n+\t  r->where = replacements[j].where;\n+\t  r->subreg_loc = py;\n+\t  r->what = replacements[j].what;\n+\t  r->mode = replacements[j].mode;\n \t}\n+      else if (replacements[j].where == px)\n+\t{\n+\t  r = &replacements[n_replacements++];\n+\t  r->where = py;\n+\t  r->subreg_loc = 0;\n+\t  r->what = replacements[j].what;\n+\t  r->mode = replacements[j].mode;\n+\t}\n+    }\n+\n+  x = *px;\n+  y = *py;\n+  code = GET_CODE (x);\n+  fmt = GET_RTX_FORMAT (code);\n+\n+  for (i = GET_RTX_LENGTH (code) - 1; i >= 0; i--)\n+    {\n+      if (fmt[i] == 'e')\n+\tcopy_replacements_1 (&XEXP (x, i), &XEXP (y, i), orig_replacements);\n+      else if (fmt[i] == 'E')\n+\tfor (j = XVECLEN (x, i); --j >= 0; )\n+\t  copy_replacements_1 (&XVECEXP (x, i, j), &XVECEXP (y, i, j),\n+\t\t\t       orig_replacements);\n+    }\n }\n \n /* Change any replacements being done to *X to be done to *Y */"}]}