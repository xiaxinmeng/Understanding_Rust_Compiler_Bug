{"sha": "7d2035fafe935fd7552a2b764807fe1e0274f2be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2QyMDM1ZmFmZTkzNWZkNzU1MmEyYjc2NDgwN2ZlMWUwMjc0ZjJiZQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-08-04T11:09:29Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-08-04T11:09:29Z"}, "message": "Simplify std::__invoke_impl definitions\n\n\t* include/std/functional (_Unwrap): Rename to __inv_unwrap.\n\t(__invfwd): Adjust.\n\t(__invoke_impl): Remove unused template parameters.\n\t* testsuite/20_util/function_objects/invoke/59768.cc: Remove unused\n\tparameter.\n\t* testsuite/20_util/function_objects/invoke/ref_ext.cc: Copy 59768.cc\n\tand test __invoke extension for C++11.\n\nFrom-SVN: r239120", "tree": {"sha": "f57c17579123fb78599dbfde87d2d2a04ab495b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f57c17579123fb78599dbfde87d2d2a04ab495b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d2035fafe935fd7552a2b764807fe1e0274f2be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d2035fafe935fd7552a2b764807fe1e0274f2be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d2035fafe935fd7552a2b764807fe1e0274f2be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d2035fafe935fd7552a2b764807fe1e0274f2be/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6805e400e901c1f6695b2cab0c647a0d367027c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6805e400e901c1f6695b2cab0c647a0d367027c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6805e400e901c1f6695b2cab0c647a0d367027c1"}], "stats": {"total": 99, "additions": 79, "deletions": 20}, "files": [{"sha": "b124d757ff38d812177444d11167ddd5f4dc96fd", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d2035fafe935fd7552a2b764807fe1e0274f2be/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d2035fafe935fd7552a2b764807fe1e0274f2be/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7d2035fafe935fd7552a2b764807fe1e0274f2be", "patch": "@@ -1,3 +1,13 @@\n+2016-08-04  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/functional (_Unwrap): Rename to __inv_unwrap.\n+\t(__invfwd): Adjust.\n+\t(__invoke_impl): Remove unused template parameters.\n+\t* testsuite/20_util/function_objects/invoke/59768.cc: Remove unused\n+\tparameter.\n+\t* testsuite/20_util/function_objects/invoke/ref_ext.cc: Copy 59768.cc\n+\tand test __invoke extension for C++11.\n+\n 2016-08-03  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/shared_ptr_base.h (__cpp_lib_enable_shared_from_this):"}, {"sha": "d635ef53769a298098d118e43604b34447930229", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 10, "deletions": 19, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d2035fafe935fd7552a2b764807fe1e0274f2be/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d2035fafe935fd7552a2b764807fe1e0274f2be/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=7d2035fafe935fd7552a2b764807fe1e0274f2be", "patch": "@@ -185,31 +185,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { };\n \n   template<typename _Tp, typename _Up = typename decay<_Tp>::type>\n-    struct _Unwrap\n+    struct __inv_unwrap\n     {\n-      using type = _Tp&&;\n-\n-      // Equivalent to std::forward<_Tp>\n-      static constexpr _Tp&&\n-      _S_fwd(_Tp& __t) noexcept { return static_cast<_Tp&&>(__t); }\n+      using type = _Tp;\n     };\n \n   template<typename _Tp, typename _Up>\n-    struct _Unwrap<_Tp, reference_wrapper<_Up>>\n+    struct __inv_unwrap<_Tp, reference_wrapper<_Up>>\n     {\n       using type = _Up&;\n-\n-      // Get an lvalue-reference from a reference_wrapper.\n-      static _Up&\n-      _S_fwd(const _Tp& __t) noexcept { __t.get(); }\n     };\n \n   // Used by __invoke_impl instead of std::forward<_Tp> so that a\n   // reference_wrapper is converted to an lvalue-reference.\n-  template<typename _Tp>\n-    inline typename _Unwrap<_Tp>::type\n+  template<typename _Tp, typename _Up = typename __inv_unwrap<_Tp>::type>\n+    inline _Up&&\n     __invfwd(typename remove_reference<_Tp>::type& __t) noexcept\n-    { return _Unwrap<_Tp>::_S_fwd(__t); }\n+    { return static_cast<_Up&&>(__t); }\n \n   template<typename _Res, typename _Fn, typename... _Args>\n     inline _Res\n@@ -235,16 +227,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);\n     }\n \n-  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>\n+  template<typename _Res, typename _MemPtr, typename _Tp>\n     inline _Res\n-    __invoke_impl(__invoke_memobj_ref, _MemFun&& __f, _Tp&& __t)\n+    __invoke_impl(__invoke_memobj_ref, _MemPtr&& __f, _Tp&& __t)\n     noexcept(noexcept(__invfwd<_Tp>(__t).*__f))\n     { return __invfwd<_Tp>(__t).*__f; }\n \n-  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>\n+  template<typename _Res, typename _MemPtr, typename _Tp>\n     inline _Res\n-    __invoke_impl(__invoke_memobj_deref, _MemFun&& __f, _Tp&& __t,\n-\t\t  _Args&&... __args)\n+    __invoke_impl(__invoke_memobj_deref, _MemPtr&& __f, _Tp&& __t)\n     noexcept(noexcept((*std::forward<_Tp>(__t)).*__f))\n     { return (*std::forward<_Tp>(__t)).*__f; }\n "}, {"sha": "6aaae222e5274208fe3b4396fe71954cffa35e0c", "filename": "libstdc++-v3/testsuite/20_util/function_objects/invoke/59768.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d2035fafe935fd7552a2b764807fe1e0274f2be/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Finvoke%2F59768.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d2035fafe935fd7552a2b764807fe1e0274f2be/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Finvoke%2F59768.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Finvoke%2F59768.cc?ref=7d2035fafe935fd7552a2b764807fe1e0274f2be", "patch": "@@ -21,7 +21,7 @@\n #include <functional>\n \n struct A {\n-  void foo(int n) { }\n+  void foo(int) { }\n };\n \n void"}, {"sha": "d7e57668779f44825ff8113a9115733e5ab73f83", "filename": "libstdc++-v3/testsuite/20_util/function_objects/invoke/ref_ext.cc", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d2035fafe935fd7552a2b764807fe1e0274f2be/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Finvoke%2Fref_ext.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d2035fafe935fd7552a2b764807fe1e0274f2be/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Finvoke%2Fref_ext.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Finvoke%2Fref_ext.cc?ref=7d2035fafe935fd7552a2b764807fe1e0274f2be", "patch": "@@ -0,0 +1,58 @@\n+// Copyright (C) 2015-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <functional>\n+\n+struct A {\n+  void foo(int) { }\n+};\n+\n+void\n+test01()\n+{\n+  // PR libstdc++/59768\n+  A a;\n+  auto ref = std::ref(a);\n+  std::__invoke(&A::foo, ref, 100);\t\t// lvalue\n+  std::__invoke(&A::foo, std::move(ref), 100);\t// rvalue\n+  const auto refc = std::ref(a);\n+  std::__invoke(&A::foo, refc, 100);\t\t// const lvalue\n+  std::__invoke(&A::foo, std::move(refc), 100);\t// const rvalue\n+}\n+\n+struct B {\n+  int bar = 0;\n+};\n+\n+void\n+test02()\n+{\n+  B b;\n+  // Invocation through a reference_wrapper means the object is an lvalue.\n+\n+  int* ptr [[gnu::unused]];\n+  auto ref = std::ref(b);\n+  ptr = &std::__invoke(&B::bar, ref);\n+  ptr = &std::__invoke(&B::bar, std::move(ref));\n+\n+  const int* cptr [[gnu::unused]];\n+  auto cref = std::cref(b);\n+  cptr = &std::__invoke(&B::bar, cref);\n+  cptr = &std::__invoke(&B::bar, std::move(cref));\n+}"}]}