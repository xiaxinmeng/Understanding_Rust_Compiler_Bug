{"sha": "c2ba7e7a62c63106e1e811d31b27df26bdae0169", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzJiYTdlN2E2MmM2MzEwNmUxZTgxMWQzMWIyN2RmMjZiZGFlMDE2OQ==", "commit": {"author": {"name": "Radovan Obradovic", "email": "robradovic@mips.com", "date": "2014-05-28T09:43:21Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2014-05-28T09:43:21Z"}, "message": "-fuse-caller-save - Use collected register usage information\n\n2014-05-28  Radovan Obradovic  <robradovic@mips.com>\n            Tom de Vries  <tom@codesourcery.com>\n\n\t* df-scan.c (df_get_call_refs): Use get_call_reg_set_usage.\n\t* caller-save.c (setup_save_areas, save_call_clobbered_regs): Use\n\tget_call_reg_set_usage.\n\t* resource.c (mark_set_resources, mark_target_live_regs): Use\n\tget_call_reg_set_usage.\n\t* ira-int.h (struct ira_allocno): Add crossed_calls_clobbered_regs\n\tfield.\n\t(ALLOCNO_CROSSED_CALLS_CLOBBERED_REGS): Define.\n\t* ira-lives.c (process_bb_node_lives): Use get_call_reg_set_usage.\n\tCalculate ALLOCNO_CROSSED_CALLS_CLOBBERED_REGS.\n\t* ira-build.c (ira_create_allocno): Init\n\tALLOCNO_CROSSED_CALLS_CLOBBERED_REGS.\n\t(create_cap_allocno, propagate_allocno_info)\n\t(propagate_some_info_from_allocno)\n\t(copy_info_to_removed_store_destinations): Handle\n\tALLOCNO_CROSSED_CALLS_CLOBBERED_REGS.\n\t* ira-costs.c (ira_tune_allocno_costs): Use\n\tALLOCNO_CROSSED_CALLS_CLOBBERED_REGS to adjust costs.\n\nCo-Authored-By: Tom de Vries <tom@codesourcery.com>\n\nFrom-SVN: r211007", "tree": {"sha": "3fd6226eae59256645e73f80df2f379d2a822117", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3fd6226eae59256645e73f80df2f379d2a822117"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2ba7e7a62c63106e1e811d31b27df26bdae0169", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2ba7e7a62c63106e1e811d31b27df26bdae0169", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2ba7e7a62c63106e1e811d31b27df26bdae0169", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2ba7e7a62c63106e1e811d31b27df26bdae0169/comments", "author": null, "committer": null, "parents": [{"sha": "27c07cc5d06c0f74d147c14c6a4b0b071266e774", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27c07cc5d06c0f74d147c14c6a4b0b071266e774", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27c07cc5d06c0f74d147c14c6a4b0b071266e774"}], "stats": {"total": 99, "additions": 79, "deletions": 20}, "files": [{"sha": "7e0f5328e47b3b2986aa87eb623eb73b58330335", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ba7e7a62c63106e1e811d31b27df26bdae0169/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ba7e7a62c63106e1e811d31b27df26bdae0169/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c2ba7e7a62c63106e1e811d31b27df26bdae0169", "patch": "@@ -1,3 +1,25 @@\n+2014-05-28  Radovan Obradovic  <robradovic@mips.com>\n+            Tom de Vries  <tom@codesourcery.com>\n+\n+\t* df-scan.c (df_get_call_refs): Use get_call_reg_set_usage.\n+\t* caller-save.c (setup_save_areas, save_call_clobbered_regs): Use\n+\tget_call_reg_set_usage.\n+\t* resource.c (mark_set_resources, mark_target_live_regs): Use\n+\tget_call_reg_set_usage.\n+\t* ira-int.h (struct ira_allocno): Add crossed_calls_clobbered_regs\n+\tfield.\n+\t(ALLOCNO_CROSSED_CALLS_CLOBBERED_REGS): Define.\n+\t* ira-lives.c (process_bb_node_lives): Use get_call_reg_set_usage.\n+\tCalculate ALLOCNO_CROSSED_CALLS_CLOBBERED_REGS.\n+\t* ira-build.c (ira_create_allocno): Init\n+\tALLOCNO_CROSSED_CALLS_CLOBBERED_REGS.\n+\t(create_cap_allocno, propagate_allocno_info)\n+\t(propagate_some_info_from_allocno)\n+\t(copy_info_to_removed_store_destinations): Handle\n+\tALLOCNO_CROSSED_CALLS_CLOBBERED_REGS.\n+\t* ira-costs.c (ira_tune_allocno_costs): Use\n+\tALLOCNO_CROSSED_CALLS_CLOBBERED_REGS to adjust costs.\n+\n 2014-05-28  Radovan Obradovic  <robradovic@mips.com>\n             Tom de Vries  <tom@codesourcery.com>\n "}, {"sha": "64fd66c0759937c754f3d8d03252b7ff412c7474", "filename": "gcc/caller-save.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ba7e7a62c63106e1e811d31b27df26bdae0169/gcc%2Fcaller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ba7e7a62c63106e1e811d31b27df26bdae0169/gcc%2Fcaller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcaller-save.c?ref=c2ba7e7a62c63106e1e811d31b27df26bdae0169", "patch": "@@ -441,7 +441,7 @@ setup_save_areas (void)\n       freq = REG_FREQ_FROM_BB (BLOCK_FOR_INSN (insn));\n       REG_SET_TO_HARD_REG_SET (hard_regs_to_save,\n \t\t\t       &chain->live_throughout);\n-      COPY_HARD_REG_SET (used_regs, call_used_reg_set);\n+      get_call_reg_set_usage (insn, &used_regs, call_used_reg_set);\n \n       /* Record all registers set in this call insn.  These don't\n \t need to be saved.  N.B. the call insn might set a subreg\n@@ -525,7 +525,7 @@ setup_save_areas (void)\n \n \t  REG_SET_TO_HARD_REG_SET (hard_regs_to_save,\n \t\t\t\t   &chain->live_throughout);\n-\t  COPY_HARD_REG_SET (used_regs, call_used_reg_set);\n+\t  get_call_reg_set_usage (insn, &used_regs, call_used_reg_set);\n \n \t  /* Record all registers set in this call insn.  These don't\n \t     need to be saved.  N.B. the call insn might set a subreg\n@@ -804,6 +804,7 @@ save_call_clobbered_regs (void)\n \t    {\n \t      unsigned regno;\n \t      HARD_REG_SET hard_regs_to_save;\n+\t      HARD_REG_SET call_def_reg_set;\n \t      reg_set_iterator rsi;\n \t      rtx cheap;\n \n@@ -854,7 +855,9 @@ save_call_clobbered_regs (void)\n \t      AND_COMPL_HARD_REG_SET (hard_regs_to_save, call_fixed_reg_set);\n \t      AND_COMPL_HARD_REG_SET (hard_regs_to_save, this_insn_sets);\n \t      AND_COMPL_HARD_REG_SET (hard_regs_to_save, hard_regs_saved);\n-\t      AND_HARD_REG_SET (hard_regs_to_save, call_used_reg_set);\n+\t      get_call_reg_set_usage (insn, &call_def_reg_set,\n+\t\t\t\t      call_used_reg_set);\n+\t      AND_HARD_REG_SET (hard_regs_to_save, call_def_reg_set);\n \n \t      for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n \t\tif (TEST_HARD_REG_BIT (hard_regs_to_save, regno))"}, {"sha": "992d0aff414aa3a6dff234f1cb615b4c9c3a2dad", "filename": "gcc/df-scan.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ba7e7a62c63106e1e811d31b27df26bdae0169/gcc%2Fdf-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ba7e7a62c63106e1e811d31b27df26bdae0169/gcc%2Fdf-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-scan.c?ref=c2ba7e7a62c63106e1e811d31b27df26bdae0169", "patch": "@@ -3385,10 +3385,13 @@ df_get_call_refs (struct df_collection_rec *collection_rec,\n   bool is_sibling_call;\n   unsigned int i;\n   HARD_REG_SET defs_generated;\n+  HARD_REG_SET fn_reg_set_usage;\n \n   CLEAR_HARD_REG_SET (defs_generated);\n   df_find_hard_reg_defs (PATTERN (insn_info->insn), &defs_generated);\n   is_sibling_call = SIBLING_CALL_P (insn_info->insn);\n+  get_call_reg_set_usage (insn_info->insn, &fn_reg_set_usage,\n+\t\t\t  regs_invalidated_by_call);\n \n   for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n     {\n@@ -3412,7 +3415,7 @@ df_get_call_refs (struct df_collection_rec *collection_rec,\n \t\t\t       NULL, bb, insn_info, DF_REF_REG_DEF, flags);\n \t    }\n \t}\n-      else if (TEST_HARD_REG_BIT (regs_invalidated_by_call, i)\n+      else if (TEST_HARD_REG_BIT (fn_reg_set_usage, i)\n \t       /* no clobbers for regs that are the result of the call */\n \t       && !TEST_HARD_REG_BIT (defs_generated, i)\n \t       && (!is_sibling_call"}, {"sha": "a345fe7059ba9214a6729758735fdd6d639ee978", "filename": "gcc/final.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ba7e7a62c63106e1e811d31b27df26bdae0169/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ba7e7a62c63106e1e811d31b27df26bdae0169/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=c2ba7e7a62c63106e1e811d31b27df26bdae0169", "patch": "@@ -4781,9 +4781,6 @@ collect_fn_hard_reg_usage (void)\n \n   /* Be conservative - mark fixed and global registers as used.  */\n   IOR_HARD_REG_SET (node->function_used_regs, fixed_reg_set);\n-  for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n-    if (global_regs[i])\n-      SET_HARD_REG_BIT (node->function_used_regs, i);\n \n #ifdef STACK_REGS\n   /* Handle STACK_REGS conservatively, since the df-framework does not"}, {"sha": "000c25c83a7ff381f1c44209225647b84d654ac5", "filename": "gcc/ira-build.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ba7e7a62c63106e1e811d31b27df26bdae0169/gcc%2Fira-build.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ba7e7a62c63106e1e811d31b27df26bdae0169/gcc%2Fira-build.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-build.c?ref=c2ba7e7a62c63106e1e811d31b27df26bdae0169", "patch": "@@ -515,6 +515,7 @@ ira_create_allocno (int regno, bool cap_p,\n   ALLOCNO_CALL_FREQ (a) = 0;\n   ALLOCNO_CALLS_CROSSED_NUM (a) = 0;\n   ALLOCNO_CHEAP_CALLS_CROSSED_NUM (a) = 0;\n+  CLEAR_HARD_REG_SET (ALLOCNO_CROSSED_CALLS_CLOBBERED_REGS (a));\n #ifdef STACK_REGS\n   ALLOCNO_NO_STACK_REG_P (a) = false;\n   ALLOCNO_TOTAL_NO_STACK_REG_P (a) = false;\n@@ -913,6 +914,8 @@ create_cap_allocno (ira_allocno_t a)\n \n   ALLOCNO_CALLS_CROSSED_NUM (cap) = ALLOCNO_CALLS_CROSSED_NUM (a);\n   ALLOCNO_CHEAP_CALLS_CROSSED_NUM (cap) = ALLOCNO_CHEAP_CALLS_CROSSED_NUM (a);\n+  IOR_HARD_REG_SET (ALLOCNO_CROSSED_CALLS_CLOBBERED_REGS (cap),\n+\t\t    ALLOCNO_CROSSED_CALLS_CLOBBERED_REGS (a));\n   if (internal_flag_ira_verbose > 2 && ira_dump_file != NULL)\n     {\n       fprintf (ira_dump_file, \"    Creating cap \");\n@@ -2048,6 +2051,8 @@ propagate_allocno_info (void)\n \t    += ALLOCNO_CALLS_CROSSED_NUM (a);\n \t  ALLOCNO_CHEAP_CALLS_CROSSED_NUM (parent_a)\n \t    += ALLOCNO_CHEAP_CALLS_CROSSED_NUM (a);\n+ \t  IOR_HARD_REG_SET (ALLOCNO_CROSSED_CALLS_CLOBBERED_REGS (parent_a),\n+ \t\t\t    ALLOCNO_CROSSED_CALLS_CLOBBERED_REGS (a));\n \t  ALLOCNO_EXCESS_PRESSURE_POINTS_NUM (parent_a)\n \t    += ALLOCNO_EXCESS_PRESSURE_POINTS_NUM (a);\n \t  aclass = ALLOCNO_CLASS (a);\n@@ -2428,6 +2433,9 @@ propagate_some_info_from_allocno (ira_allocno_t a, ira_allocno_t from_a)\n   ALLOCNO_CALLS_CROSSED_NUM (a) += ALLOCNO_CALLS_CROSSED_NUM (from_a);\n   ALLOCNO_CHEAP_CALLS_CROSSED_NUM (a)\n     += ALLOCNO_CHEAP_CALLS_CROSSED_NUM (from_a);\n+  IOR_HARD_REG_SET (ALLOCNO_CROSSED_CALLS_CLOBBERED_REGS (a),\n+ \t\t    ALLOCNO_CROSSED_CALLS_CLOBBERED_REGS (from_a));\n+\n   ALLOCNO_EXCESS_PRESSURE_POINTS_NUM (a)\n     += ALLOCNO_EXCESS_PRESSURE_POINTS_NUM (from_a);\n   if (! ALLOCNO_BAD_SPILL_P (from_a))\n@@ -3059,6 +3067,8 @@ copy_info_to_removed_store_destinations (int regno)\n \t+= ALLOCNO_CALLS_CROSSED_NUM (a);\n       ALLOCNO_CHEAP_CALLS_CROSSED_NUM (parent_a)\n \t+= ALLOCNO_CHEAP_CALLS_CROSSED_NUM (a);\n+      IOR_HARD_REG_SET (ALLOCNO_CROSSED_CALLS_CLOBBERED_REGS (parent_a),\n+ \t\t\tALLOCNO_CROSSED_CALLS_CLOBBERED_REGS (a));\n       ALLOCNO_EXCESS_PRESSURE_POINTS_NUM (parent_a)\n \t+= ALLOCNO_EXCESS_PRESSURE_POINTS_NUM (a);\n       merged_p = true;"}, {"sha": "4ecf75f124dbdb98255c5f1d36ce04a6cad1b94a", "filename": "gcc/ira-costs.c", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ba7e7a62c63106e1e811d31b27df26bdae0169/gcc%2Fira-costs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ba7e7a62c63106e1e811d31b27df26bdae0169/gcc%2Fira-costs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-costs.c?ref=c2ba7e7a62c63106e1e811d31b27df26bdae0169", "patch": "@@ -2238,6 +2238,7 @@ ira_tune_allocno_costs (void)\n   ira_allocno_object_iterator oi;\n   ira_object_t obj;\n   bool skip_p;\n+  HARD_REG_SET *crossed_calls_clobber_regs;\n \n   FOR_EACH_ALLOCNO (a, ai)\n     {\n@@ -2272,17 +2273,24 @@ ira_tune_allocno_costs (void)\n \t\tcontinue;\n \t      rclass = REGNO_REG_CLASS (regno);\n \t      cost = 0;\n-\t      if (ira_hard_reg_set_intersection_p (regno, mode, call_used_reg_set)\n-\t\t  || HARD_REGNO_CALL_PART_CLOBBERED (regno, mode))\n-\t\tcost += (ALLOCNO_CALL_FREQ (a)\n-\t\t\t * (ira_memory_move_cost[mode][rclass][0]\n-\t\t\t    + ira_memory_move_cost[mode][rclass][1]));\n+\t      crossed_calls_clobber_regs\n+\t\t= &(ALLOCNO_CROSSED_CALLS_CLOBBERED_REGS (a));\n+\t      if (ira_hard_reg_set_intersection_p (regno, mode,\n+\t\t\t\t\t\t   *crossed_calls_clobber_regs))\n+\t\t{\n+\t\t  if (ira_hard_reg_set_intersection_p (regno, mode,\n+\t\t\t\t\t\t       call_used_reg_set)\n+\t\t      || HARD_REGNO_CALL_PART_CLOBBERED (regno, mode))\n+\t\t    cost += (ALLOCNO_CALL_FREQ (a)\n+\t\t\t     * (ira_memory_move_cost[mode][rclass][0]\n+\t\t\t\t+ ira_memory_move_cost[mode][rclass][1]));\n #ifdef IRA_HARD_REGNO_ADD_COST_MULTIPLIER\n-\t      cost += ((ira_memory_move_cost[mode][rclass][0]\n-\t\t\t+ ira_memory_move_cost[mode][rclass][1])\n-\t\t       * ALLOCNO_FREQ (a)\n-\t\t       * IRA_HARD_REGNO_ADD_COST_MULTIPLIER (regno) / 2);\n+\t\t  cost += ((ira_memory_move_cost[mode][rclass][0]\n+\t\t\t    + ira_memory_move_cost[mode][rclass][1])\n+\t\t\t   * ALLOCNO_FREQ (a)\n+\t\t\t   * IRA_HARD_REGNO_ADD_COST_MULTIPLIER (regno) / 2);\n #endif\n+\t\t}\n \t      if (INT_MAX - cost < reg_costs[j])\n \t\treg_costs[j] = INT_MAX;\n \t      else"}, {"sha": "413c8239b91dc35b2b94ebb41a806d9017c7ca90", "filename": "gcc/ira-int.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ba7e7a62c63106e1e811d31b27df26bdae0169/gcc%2Fira-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ba7e7a62c63106e1e811d31b27df26bdae0169/gcc%2Fira-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-int.h?ref=c2ba7e7a62c63106e1e811d31b27df26bdae0169", "patch": "@@ -374,6 +374,8 @@ struct ira_allocno\n   /* The number of calls across which it is live, but which should not\n      affect register preferences.  */\n   int cheap_calls_crossed_num;\n+  /* Registers clobbered by intersected calls.  */\n+   HARD_REG_SET crossed_calls_clobbered_regs;\n   /* Array of usage costs (accumulated and the one updated during\n      coloring) for each hard register of the allocno class.  The\n      member value can be NULL if all costs are the same and equal to\n@@ -417,6 +419,8 @@ struct ira_allocno\n #define ALLOCNO_CALL_FREQ(A) ((A)->call_freq)\n #define ALLOCNO_CALLS_CROSSED_NUM(A) ((A)->calls_crossed_num)\n #define ALLOCNO_CHEAP_CALLS_CROSSED_NUM(A) ((A)->cheap_calls_crossed_num)\n+#define ALLOCNO_CROSSED_CALLS_CLOBBERED_REGS(A) \\\n+  ((A)->crossed_calls_clobbered_regs)\n #define ALLOCNO_MEM_OPTIMIZED_DEST(A) ((A)->mem_optimized_dest)\n #define ALLOCNO_MEM_OPTIMIZED_DEST_P(A) ((A)->mem_optimized_dest_p)\n #define ALLOCNO_SOMEWHERE_RENAMED_P(A) ((A)->somewhere_renamed_p)"}, {"sha": "0dccee30af2cb9700ae1a4a7b3baa9822d94e9b6", "filename": "gcc/ira-lives.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ba7e7a62c63106e1e811d31b27df26bdae0169/gcc%2Fira-lives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ba7e7a62c63106e1e811d31b27df26bdae0169/gcc%2Fira-lives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-lives.c?ref=c2ba7e7a62c63106e1e811d31b27df26bdae0169", "patch": "@@ -1263,6 +1263,10 @@ process_bb_node_lives (ira_loop_tree_node_t loop_tree_node)\n \t\t  ira_object_t obj = ira_object_id_map[i];\n \t\t  ira_allocno_t a = OBJECT_ALLOCNO (obj);\n \t\t  int num = ALLOCNO_NUM (a);\n+\t\t  HARD_REG_SET this_call_used_reg_set;\n+\n+\t\t  get_call_reg_set_usage (insn, &this_call_used_reg_set,\n+\t\t\t\t\t  call_used_reg_set);\n \n \t\t  /* Don't allocate allocnos that cross setjmps or any\n \t\t     call, if this function receives a nonlocal\n@@ -1277,9 +1281,9 @@ process_bb_node_lives (ira_loop_tree_node_t loop_tree_node)\n \t\t  if (can_throw_internal (insn))\n \t\t    {\n \t\t      IOR_HARD_REG_SET (OBJECT_CONFLICT_HARD_REGS (obj),\n-\t\t\t\t\tcall_used_reg_set);\n+\t\t\t\t\tthis_call_used_reg_set);\n \t\t      IOR_HARD_REG_SET (OBJECT_TOTAL_CONFLICT_HARD_REGS (obj),\n-\t\t\t\t\tcall_used_reg_set);\n+\t\t\t\t\tthis_call_used_reg_set);\n \t\t    }\n \n \t\t  if (sparseset_bit_p (allocnos_processed, num))\n@@ -1296,6 +1300,8 @@ process_bb_node_lives (ira_loop_tree_node_t loop_tree_node)\n \t\t  /* Mark it as saved at the next call.  */\n \t\t  allocno_saved_at_call[num] = last_call_num + 1;\n \t\t  ALLOCNO_CALLS_CROSSED_NUM (a)++;\n+\t\t  IOR_HARD_REG_SET (ALLOCNO_CROSSED_CALLS_CLOBBERED_REGS (a),\n+\t\t\t\t    this_call_used_reg_set);\n \t\t  if (cheap_reg != NULL_RTX\n \t\t      && ALLOCNO_REGNO (a) == (int) REGNO (cheap_reg))\n \t\t    ALLOCNO_CHEAP_CALLS_CROSSED_NUM (a)++;"}, {"sha": "b55568256c35ac4e3148f44fe8640671ae392ce8", "filename": "gcc/resource.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ba7e7a62c63106e1e811d31b27df26bdae0169/gcc%2Fresource.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ba7e7a62c63106e1e811d31b27df26bdae0169/gcc%2Fresource.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fresource.c?ref=c2ba7e7a62c63106e1e811d31b27df26bdae0169", "patch": "@@ -655,10 +655,12 @@ mark_set_resources (rtx x, struct resources *res, int in_dest,\n       if (mark_type == MARK_SRC_DEST_CALL)\n \t{\n \t  rtx link;\n+\t  HARD_REG_SET regs;\n \n \t  res->cc = res->memory = 1;\n \n-\t  IOR_HARD_REG_SET (res->regs, regs_invalidated_by_call);\n+\t  get_call_reg_set_usage (x, &regs, regs_invalidated_by_call);\n+\t  IOR_HARD_REG_SET (res->regs, regs);\n \n \t  for (link = CALL_INSN_FUNCTION_USAGE (x);\n \t       link; link = XEXP (link, 1))\n@@ -1011,11 +1013,15 @@ mark_target_live_regs (rtx insns, rtx target, struct resources *res)\n \t\t predicated instruction, or if the CALL is NORETURN.  */\n \t      if (GET_CODE (PATTERN (real_insn)) != COND_EXEC)\n \t\t{\n+\t\t  HARD_REG_SET regs_invalidated_by_this_call;\n+\t\t  get_call_reg_set_usage (real_insn,\n+\t\t\t\t\t  &regs_invalidated_by_this_call,\n+\t\t\t\t\t  regs_invalidated_by_call);\n \t\t  /* CALL clobbers all call-used regs that aren't fixed except\n \t\t     sp, ap, and fp.  Do this before setting the result of the\n \t\t     call live.  */\n \t\t  AND_COMPL_HARD_REG_SET (current_live_regs,\n-\t\t\t\t\t  regs_invalidated_by_call);\n+\t\t\t\t\t  regs_invalidated_by_this_call);\n \t\t}\n \n \t      /* A CALL_INSN sets any global register live, since it may"}]}