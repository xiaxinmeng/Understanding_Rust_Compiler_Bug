{"sha": "38886f371d839e078be73cd4f06c28a5be65b672", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzg4ODZmMzcxZDgzOWUwNzhiZTczY2Q0ZjA2YzI4YTViZTY1YjY3Mg==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2001-04-12T03:11:48Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2001-04-12T03:11:48Z"}, "message": "rs6000.c (rs6000_emit_move): Do not special-case HOST_BITS_PER_WIDE_INT != 32.\n\n* config/rs6000/rs6000.c (rs6000_emit_move): Do not\nspecial-case HOST_BITS_PER_WIDE_INT != 32.  Use same criteria\nfor generating CONST_INT and CONST_DOUBLE.\n\n\n* config/rs6000/rs6000.c (logical_operand): CONST_INTs are\nalready sign-extended.\n(rs6000_emit_prologue): Make register iterator signed.\n(rs6000_emit_epilogue): Likewise.\n* config/rs6000/rs6000.md (addsi3, adddi3): Sign-extend high\nand low.\n(movsf split, movdf split): Sign-extend CONST_INTs.\n(movdi splits): Likewise.\n\nFrom-SVN: r41282", "tree": {"sha": "2bd047de32b655e86c37534a7190c602270cd268", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2bd047de32b655e86c37534a7190c602270cd268"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38886f371d839e078be73cd4f06c28a5be65b672", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38886f371d839e078be73cd4f06c28a5be65b672", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38886f371d839e078be73cd4f06c28a5be65b672", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38886f371d839e078be73cd4f06c28a5be65b672/comments", "author": null, "committer": null, "parents": [{"sha": "ccc27eab4274345ff66b285092151817fcdceb6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccc27eab4274345ff66b285092151817fcdceb6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccc27eab4274345ff66b285092151817fcdceb6a"}], "stats": {"total": 90, "additions": 61, "deletions": 29}, "files": [{"sha": "9a6ec0bc2e137b35289d613faee59c88ae5d8bd5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38886f371d839e078be73cd4f06c28a5be65b672/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38886f371d839e078be73cd4f06c28a5be65b672/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=38886f371d839e078be73cd4f06c28a5be65b672", "patch": "@@ -1,3 +1,20 @@\n+2001-04-12  David Edelsohn  <dje@watson.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_emit_move): Do not\n+\tspecial-case HOST_BITS_PER_WIDE_INT != 32.  Use same criteria\n+\tfor generating CONST_INT and CONST_DOUBLE.\n+\n+2001-04-12  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* config/rs6000/rs6000.c (logical_operand): CONST_INTs are\n+\talready sign-extended.\n+\t(rs6000_emit_prologue): Make register iterator signed.\n+\t(rs6000_emit_epilogue): Likewise.\n+\t* config/rs6000/rs6000.md (addsi3, adddi3): Sign-extend high\n+\tand low.\n+\t(movsf split, movdf split): Sign-extend CONST_INTs.\n+\t(movdi splits): Likewise.\n+\n 2001-04-12  Kelley Cook <kelley.cook@home.com>\n \n \t* config-lang.in (lang_dirs): Add in zlib."}, {"sha": "4ea79f681b44c3392474b35290fc6faae8ba1346", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38886f371d839e078be73cd4f06c28a5be65b672/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38886f371d839e078be73cd4f06c28a5be65b672/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=38886f371d839e078be73cd4f06c28a5be65b672", "patch": "@@ -965,7 +965,7 @@ add_operand (op, mode)\n {\n   return (reg_or_short_operand (op, mode)\n \t  || (GET_CODE (op) == CONST_INT\n-\t      && CONST_OK_FOR_LETTER_P (INTVAL(op), 'L')));\n+\t      && CONST_OK_FOR_LETTER_P (INTVAL (op), 'L')));\n }\n \n /* Return 1 if OP is a constant but not a valid add_operand.  */\n@@ -977,7 +977,7 @@ non_add_cint_operand (op, mode)\n {\n   return (GET_CODE (op) == CONST_INT\n \t  && (unsigned HOST_WIDE_INT) (INTVAL (op) + 0x8000) >= 0x10000\n-\t  && ! CONST_OK_FOR_LETTER_P (INTVAL(op), 'L'));\n+\t  && ! CONST_OK_FOR_LETTER_P (INTVAL (op), 'L'));\n }\n \n /* Return 1 if the operand is a non-special register or a constant that\n@@ -995,27 +995,29 @@ logical_operand (op, mode)\n     return 1;\n \n   if (GET_CODE (op) == CONST_INT)\n-    {\n-      opl = INTVAL (op) & GET_MODE_MASK (mode);\n-      if (GET_MODE_BITSIZE (mode) <= HOST_BITS_PER_WIDE_INT)\n-\toph = 0;\n-      else\n-\toph = INTVAL (op) >> (HOST_BITS_PER_WIDE_INT - 1);\n-    }\n+    opl = INTVAL (op);\n   else if (GET_CODE (op) == CONST_DOUBLE)\n     {\n       if (GET_MODE_BITSIZE (mode) <= HOST_BITS_PER_WIDE_INT)\n \tabort();\n \n       opl = CONST_DOUBLE_LOW (op);\n       oph = CONST_DOUBLE_HIGH (op);\n+\n+      if (oph != ((unsigned HOST_WIDE_INT)0\n+\t\t  - ((opl & ((unsigned HOST_WIDE_INT)1\n+\t\t\t     << (HOST_BITS_PER_WIDE_INT - 1))) != 0)))\n+\treturn 0;\n     }\n   else\n     return 0;\n \n-  return (oph == 0\n-\t  && ((opl & ~ (unsigned HOST_WIDE_INT) 0xffff) == 0\n-\t      || (opl & ~ (unsigned HOST_WIDE_INT) 0xffff0000) == 0));\n+  /* This must really be SImode, not MODE.  */\n+  if (opl != trunc_int_for_mode (opl, SImode))\n+    return 0;\n+\n+  return ((opl & 0xffff) == 0\n+\t  || (opl & ~ (unsigned HOST_WIDE_INT) 0xffff) == 0);\n }\n \n /* Return 1 if C is a constant that is not a logical operand (as\n@@ -1709,11 +1711,12 @@ rs6000_emit_move (dest, source, mode)\n \t}\n       else if (mode == Pmode\n \t       && CONSTANT_P (operands[1])\n- \t       && (((HOST_BITS_PER_WIDE_INT != 32 \n- \t\t     || GET_CODE (operands[1]) != CONST_INT)\n- \t\t    && ! easy_fp_constant (operands[1], mode))\n- \t\t   || (GET_CODE (operands[0]) == REG\n- \t\t       && FP_REGNO_P (REGNO (operands[0]))))\n+\t       && ((GET_CODE (operands[1]) != CONST_INT\n+\t\t    && ! easy_fp_constant (operands[1], mode))\n+\t\t   || (GET_CODE (operands[1]) == CONST_INT\n+\t\t       && num_insns_constant (operands[1], mode) > 2)\n+\t\t   || (GET_CODE (operands[0]) == REG\n+\t\t       && FP_REGNO_P (REGNO (operands[0]))))\n \t       && GET_CODE (operands[1]) != HIGH\n \t       && ! LEGITIMATE_CONSTANT_POOL_ADDRESS_P (operands[1])\n \t       && ! TOC_RELATIVE_EXPR_P (operands[1]))\n@@ -5822,7 +5825,7 @@ rs6000_emit_prologue ()\n      easiest way to get the frame unwind information emitted.  */\n   if (current_function_calls_eh_return)\n     {\n-      unsigned int i, regno;\n+      int i, regno;\n       for (i = 0; ; ++i)\n \t{\n \t  rtx addr, reg, mem;\n@@ -6078,7 +6081,7 @@ rs6000_emit_epilogue (sibcall)\n   /* Load exception handler data registers, if needed.  */\n   if (current_function_calls_eh_return)\n     {\n-      unsigned int i, regno;\n+      int i, regno;\n       for (i = 0; ; ++i)\n \t{\n \t  rtx addr, mem;"}, {"sha": "b0831c0105e17fdde7e641e95ce5bdd8fef70575", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38886f371d839e078be73cd4f06c28a5be65b672/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38886f371d839e078be73cd4f06c28a5be65b672/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=38886f371d839e078be73cd4f06c28a5be65b672", "patch": "@@ -1426,7 +1426,10 @@\n       HOST_WIDE_INT high = INTVAL (operands[2]) & (~ (HOST_WIDE_INT) 0xffff);\n \n       if (low & 0x8000)\n-        high += 0x10000, low |= ((HOST_WIDE_INT) -1) << 16;\n+\t{\n+\t  high = trunc_int_for_mode (high + 0x10000, SImode);\n+\t  low = trunc_int_for_mode (low, HImode);\n+\t}\n \n       /* The ordering here is important for the prolog expander.\n \t When space is allocated from the stack, adding 'low' first may\n@@ -1537,7 +1540,10 @@\n   HOST_WIDE_INT high = INTVAL (operands[2]) & (~ (HOST_WIDE_INT) 0xffff);\n \n   if (low & 0x8000)\n-    high += 0x10000, low |= ((HOST_WIDE_INT) -1) << 16;\n+    {\n+      high = trunc_int_for_mode (high + 0x10000, SImode);\n+      low = trunc_int_for_mode (low, HImode);\n+    }\n \n   operands[3] = GEN_INT (high);\n   operands[4] = GEN_INT (low);\n@@ -5767,7 +5773,10 @@\n \tHOST_WIDE_INT high = INTVAL (operands[2]) & (~ (HOST_WIDE_INT) 0xffff);\n \n \tif (low & 0x8000)\n-\t  high += 0x10000, low |= ((HOST_WIDE_INT) -1) << 16;\n+\t  {\n+\t    high = trunc_int_for_mode (high + 0x10000, SImode);\n+\t    low = trunc_int_for_mode (low, HImode);\n+\t  }\n \n \temit_insn (gen_adddi3 (tmp, operands[1], GEN_INT (high)));\n \temit_insn (gen_adddi3 (operands[0], tmp, GEN_INT (low)));\n@@ -5866,7 +5875,10 @@\n   HOST_WIDE_INT high = INTVAL (operands[2]) & (~ (HOST_WIDE_INT) 0xffff);\n \n   if (low & 0x8000)\n-    high+=0x10000, low |= ((HOST_WIDE_INT) -1) << 16;\n+    {\n+      high = trunc_int_for_mode (high + 0x10000, SImode);\n+      low = trunc_int_for_mode (low, HImode);\n+    }\n \n   operands[3] = GEN_INT (high);\n   operands[4] = GEN_INT (low);\n@@ -7606,7 +7618,7 @@\n   else\n     operands[2] = gen_lowpart (SImode, operands[0]);\n \n-  operands[3] = GEN_INT(l);\n+  operands[3] = GEN_INT (trunc_int_for_mode (l, SImode));\n }\")\n \n (define_insn \"*movsf_hardfloat\"\n@@ -7696,8 +7708,8 @@\n \n   operands[2] = operand_subword (operands[0], endian, 0, DFmode);\n   operands[3] = operand_subword (operands[0], 1 - endian, 0, DFmode);\n-  operands[4] = GEN_INT (l[endian]);\n-  operands[5] = GEN_INT (l[1 - endian]);\n+  operands[4] = GEN_INT (trunc_int_for_mode (l[endian], SImode));\n+  operands[5] = GEN_INT (trunc_int_for_mode (l[1 - endian], SImode));\n }\")\n \n (define_split\n@@ -8042,7 +8054,7 @@\n \t\t(match_dup 3)))]\n   \"\n {\n-  operands[2] = GEN_INT (INTVAL (operands[1]) & 0xffff0000);\n+  operands[2] = GEN_INT (INTVAL (operands[1]) & (~ (HOST_WIDE_INT) 0xffff));\n   operands[3] = GEN_INT (INTVAL (operands[1]) & 0xffff);\n }\")\n \n@@ -8062,7 +8074,7 @@\n \t\t(match_dup 3)))]\n   \"\n {\n-  operands[2] = GEN_INT (CONST_DOUBLE_LOW (operands[1]) & 0xffff0000);\n+  operands[2] = GEN_INT (CONST_DOUBLE_LOW (operands[1]) & (~ (HOST_WIDE_INT) 0xffff));\n   operands[3] = GEN_INT (CONST_DOUBLE_LOW (operands[1]) & 0xffff);\n }\")\n \n@@ -8083,7 +8095,7 @@\n \t\t(match_dup 3)))]\n   \"\n {\n-  operands[2] = GEN_INT (INTVAL (operands[1]) & 0xffff0000);\n+  operands[2] = GEN_INT (INTVAL (operands[1]) & (~ (HOST_WIDE_INT) 0xffff));\n   operands[3] = GEN_INT (INTVAL (operands[1]) & 0xffff);\n }\")\n "}]}