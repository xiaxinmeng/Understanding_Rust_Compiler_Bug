{"sha": "30afdf34a6d6a3d8d31fdd590ba60044cf0e004c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzBhZmRmMzRhNmQ2YTNkOGQzMWZkZDU5MGJhNjAwNDRjZjBlMDA0Yw==", "commit": {"author": {"name": "Sudakshina Das", "email": "sudi.das@arm.com", "date": "2019-01-09T14:14:28Z"}, "committer": {"name": "Sudakshina Das", "email": "sudi@gcc.gnu.org", "date": "2019-01-09T14:14:28Z"}, "message": "[AArch64, 4/6] Enable BTI: Add new <type> to -mbranch-protection.\n\nThis patch is part of a series that enables ARMv8.5-A in GCC and\nadds Branch Target Identification Mechanism.\n\nThis pass updates the CLI of -mbranch-protection to add \"bti\" as a new\ntype of branch protection and also add it its definition of \"none\" and\n\"standard\". The option does not really do anything functional.\nThe functional changes are in the next patch. I am initializing the target\nvariable aarch64_enable_bti to 2 since I am also adding a configure option\nin a later patch and a value different from 0 and 1 would help identify if its\nalready been updated.\n\n*** gcc/ChangeLog ***\n\n2018-01-09  Sudakshina Das  <sudi.das@arm.com>\n\n\t* config/aarch64/aarch64-protos.h (aarch64_bti_enabled): Declare.\n\t* config/aarch64/aarch64.c (aarch64_handle_no_branch_protection):\n\tDisable bti for -mbranch-protection=none.\n\t(aarch64_handle_standard_branch_protection): Enable bti for\n\t-mbranch-protection=standard.\n\t(aarch64_handle_bti_protection): Enable bti for \"bti\" in the string to\n\t-mbranch-protection.\n\t(aarch64_bti_enabled): Check if bti is enabled.\n\t* config/aarch64/aarch64.opt: Declare target variable.\n\t* doc/invoke.texi: Add bti to the -mbranch-protection documentation.\n\nFrom-SVN: r267768", "tree": {"sha": "b8e43997a17d0dcdd4858a02d5a81b7a15363054", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8e43997a17d0dcdd4858a02d5a81b7a15363054"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30afdf34a6d6a3d8d31fdd590ba60044cf0e004c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30afdf34a6d6a3d8d31fdd590ba60044cf0e004c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30afdf34a6d6a3d8d31fdd590ba60044cf0e004c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30afdf34a6d6a3d8d31fdd590ba60044cf0e004c/comments", "author": {"login": "sudakshina-das-arm", "id": 28538945, "node_id": "MDQ6VXNlcjI4NTM4OTQ1", "avatar_url": "https://avatars.githubusercontent.com/u/28538945?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sudakshina-das-arm", "html_url": "https://github.com/sudakshina-das-arm", "followers_url": "https://api.github.com/users/sudakshina-das-arm/followers", "following_url": "https://api.github.com/users/sudakshina-das-arm/following{/other_user}", "gists_url": "https://api.github.com/users/sudakshina-das-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/sudakshina-das-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sudakshina-das-arm/subscriptions", "organizations_url": "https://api.github.com/users/sudakshina-das-arm/orgs", "repos_url": "https://api.github.com/users/sudakshina-das-arm/repos", "events_url": "https://api.github.com/users/sudakshina-das-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/sudakshina-das-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "901e66e03e1cd80f28ff887f6ff1abaf15873792", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/901e66e03e1cd80f28ff887f6ff1abaf15873792", "html_url": "https://github.com/Rust-GCC/gccrs/commit/901e66e03e1cd80f28ff887f6ff1abaf15873792"}], "stats": {"total": 36, "additions": 36, "deletions": 0}, "files": [{"sha": "0bc36756e4ae74a40b2cae8247c83e4d5b542979", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30afdf34a6d6a3d8d31fdd590ba60044cf0e004c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30afdf34a6d6a3d8d31fdd590ba60044cf0e004c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=30afdf34a6d6a3d8d31fdd590ba60044cf0e004c", "patch": "@@ -1,3 +1,16 @@\n+2018-01-09  Sudakshina Das  <sudi.das@arm.com>\n+\n+\t* config/aarch64/aarch64-protos.h (aarch64_bti_enabled): Declare.\n+\t* config/aarch64/aarch64.c (aarch64_handle_no_branch_protection):\n+\tDisable bti for -mbranch-protection=none.\n+\t(aarch64_handle_standard_branch_protection): Enable bti for\n+\t-mbranch-protection=standard.\n+\t(aarch64_handle_bti_protection): Enable bti for \"bti\" in the string to\n+\t-mbranch-protection.\n+\t(aarch64_bti_enabled): Check if bti is enabled.\n+\t* config/aarch64/aarch64.opt: Declare target variable.\n+\t* doc/invoke.texi: Add bti to the -mbranch-protection documentation.\n+\n 2018-01-09  Sudakshina Das  <sudi.das@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_expand_prologue): Use new"}, {"sha": "3e3ad14d3232c68c9988a47795e23a474eaf8421", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30afdf34a6d6a3d8d31fdd590ba60044cf0e004c/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30afdf34a6d6a3d8d31fdd590ba60044cf0e004c/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=30afdf34a6d6a3d8d31fdd590ba60044cf0e004c", "patch": "@@ -521,6 +521,7 @@ void aarch64_register_pragmas (void);\n void aarch64_relayout_simd_types (void);\n void aarch64_reset_previous_fndecl (void);\n bool aarch64_return_address_signing_enabled (void);\n+bool aarch64_bti_enabled (void);\n void aarch64_save_restore_target_globals (tree);\n void aarch64_addti_scratch_regs (rtx, rtx, rtx *,\n \t\t\t\t rtx *, rtx *,"}, {"sha": "47569b841f9d51ed58c49615fbfc9ae09107ef2f", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30afdf34a6d6a3d8d31fdd590ba60044cf0e004c/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30afdf34a6d6a3d8d31fdd590ba60044cf0e004c/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=30afdf34a6d6a3d8d31fdd590ba60044cf0e004c", "patch": "@@ -1200,6 +1200,7 @@ static enum aarch64_parse_opt_result\n aarch64_handle_no_branch_protection (char* str, char* rest)\n {\n   aarch64_ra_sign_scope = AARCH64_FUNCTION_NONE;\n+  aarch64_enable_bti = 0;\n   if (rest)\n     {\n       error (\"unexpected %<%s%> after %<%s%>\", rest, str);\n@@ -1212,6 +1213,7 @@ static enum aarch64_parse_opt_result\n aarch64_handle_standard_branch_protection (char* str, char* rest)\n {\n   aarch64_ra_sign_scope = AARCH64_FUNCTION_NON_LEAF;\n+  aarch64_enable_bti = 1;\n   if (rest)\n     {\n       error (\"unexpected %<%s%> after %<%s%>\", rest, str);\n@@ -1236,6 +1238,14 @@ aarch64_handle_pac_ret_leaf (char* str ATTRIBUTE_UNUSED,\n   return AARCH64_PARSE_OK;\n }\n \n+static enum aarch64_parse_opt_result\n+aarch64_handle_bti_protection (char* str ATTRIBUTE_UNUSED,\n+\t\t\t\t    char* rest ATTRIBUTE_UNUSED)\n+{\n+  aarch64_enable_bti = 1;\n+  return AARCH64_PARSE_OK;\n+}\n+\n static const struct aarch64_branch_protect_type aarch64_pac_ret_subtypes[] = {\n   { \"leaf\", aarch64_handle_pac_ret_leaf, NULL, 0 },\n   { NULL, NULL, NULL, 0 }\n@@ -1246,6 +1256,7 @@ static const struct aarch64_branch_protect_type aarch64_branch_protect_types[] =\n   { \"standard\", aarch64_handle_standard_branch_protection, NULL, 0 },\n   { \"pac-ret\", aarch64_handle_pac_ret_protection, aarch64_pac_ret_subtypes,\n     ARRAY_SIZE (aarch64_pac_ret_subtypes) },\n+  { \"bti\", aarch64_handle_bti_protection, NULL, 0 },\n   { NULL, NULL, NULL, 0 }\n };\n \n@@ -4725,6 +4736,13 @@ aarch64_return_address_signing_enabled (void)\n \t      && cfun->machine->frame.reg_offset[LR_REGNUM] >= 0));\n }\n \n+/* Return TRUE if Branch Target Identification Mechanism is enabled.  */\n+bool\n+aarch64_bti_enabled (void)\n+{\n+  return (aarch64_enable_bti == 1);\n+}\n+\n /* Emit code to save the callee-saved registers from register number START\n    to LIMIT to the stack at the location starting at offset START_OFFSET,\n    skipping any write-back candidates if SKIP_WB is true.  */"}, {"sha": "6de7b225f22d99e16fa7fb43fe7fbce6257f9043", "filename": "gcc/config/aarch64/aarch64.opt", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30afdf34a6d6a3d8d31fdd590ba60044cf0e004c/gcc%2Fconfig%2Faarch64%2Faarch64.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30afdf34a6d6a3d8d31fdd590ba60044cf0e004c/gcc%2Fconfig%2Faarch64%2Faarch64.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.opt?ref=30afdf34a6d6a3d8d31fdd590ba60044cf0e004c", "patch": "@@ -33,6 +33,9 @@ const char *x_aarch64_override_tune_string\n TargetVariable\n unsigned long aarch64_isa_flags = 0\n \n+TargetVariable\n+unsigned aarch64_enable_bti = 2\n+\n ; The TLS dialect names to use with -mtls-dialect.\n \n Enum"}, {"sha": "56649bfd45a75a6346b28dbd303ab4f31ad89e55", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30afdf34a6d6a3d8d31fdd590ba60044cf0e004c/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30afdf34a6d6a3d8d31fdd590ba60044cf0e004c/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=30afdf34a6d6a3d8d31fdd590ba60044cf0e004c", "patch": "@@ -15757,6 +15757,7 @@ level: signing functions that save the return address to memory (non-leaf\n functions will practically always do this) using the a-key.  The optional\n argument @samp{leaf} can be used to extend the signing to include leaf\n functions.\n+@samp{bti} turns on branch target identification mechanism.\n \n @item -msve-vector-bits=@var{bits}\n @opindex msve-vector-bits"}]}