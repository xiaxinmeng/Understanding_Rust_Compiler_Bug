{"sha": "74360f142c0d98a4f643f3417133bea0b7fca75e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQzNjBmMTQyYzBkOThhNGY2NDNmMzQxNzEzM2JlYTBiN2ZjYTc1ZQ==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2017-07-21T08:20:51Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2017-07-21T08:20:51Z"}, "message": "invoke.texi (AVR Built-in Functions): Re-layout section.\n\ngcc/\n\t* doc/invoke.texi (AVR Built-in Functions): Re-layout section.\n\nFrom-SVN: r250419", "tree": {"sha": "acc7f8eb3edd4ab013c36c157fe5e7ed1518903b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/acc7f8eb3edd4ab013c36c157fe5e7ed1518903b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74360f142c0d98a4f643f3417133bea0b7fca75e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74360f142c0d98a4f643f3417133bea0b7fca75e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74360f142c0d98a4f643f3417133bea0b7fca75e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74360f142c0d98a4f643f3417133bea0b7fca75e/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba61fc5308e838edce8bbb2fb6f1899bcd9789d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba61fc5308e838edce8bbb2fb6f1899bcd9789d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba61fc5308e838edce8bbb2fb6f1899bcd9789d5"}], "stats": {"total": 81, "additions": 42, "deletions": 39}, "files": [{"sha": "b024884cd812de7b4de1efcedb47371ae0afb809", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74360f142c0d98a4f643f3417133bea0b7fca75e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74360f142c0d98a4f643f3417133bea0b7fca75e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=74360f142c0d98a4f643f3417133bea0b7fca75e", "patch": "@@ -1,3 +1,7 @@\n+2017-07-21  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\t* doc/invoke.texi (AVR Built-in Functions): Re-layout section.\n+\n 2016-07-21  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* cfgcleanup.c (flow_find_cross_jump): Do not crossjump across"}, {"sha": "da5b0af60fc49fd4dd3f0cb6374c0af3dd9bea10", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 38, "deletions": 39, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74360f142c0d98a4f643f3417133bea0b7fca75e/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74360f142c0d98a4f643f3417133bea0b7fca75e/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=74360f142c0d98a4f643f3417133bea0b7fca75e", "patch": "@@ -12748,54 +12748,37 @@ or if not a specific built-in is implemented or not. For example, if\n @code{__builtin_avr_nop} is available the macro\n @code{__BUILTIN_AVR_NOP} is defined to @code{1} and undefined otherwise.\n \n-The following built-in functions map to the respective machine\n+@table @code\n+\n+@item void __builtin_avr_nop (void)\n+@itemx void __builtin_avr_sei (void)\n+@itemx void __builtin_avr_cli (void)\n+@itemx void __builtin_avr_sleep (void)\n+@itemx void __builtin_avr_wdr (void)\n+@itemx unsigned char __builtin_avr_swap (unsigned char)\n+@itemx unsigned int __builtin_avr_fmul (unsigned char, unsigned char)\n+@itemx int __builtin_avr_fmuls (char, char)\n+@itemx int __builtin_avr_fmulsu (char, unsigned char)\n+These built-in functions map to the respective machine\n instruction, i.e.@: @code{nop}, @code{sei}, @code{cli}, @code{sleep},\n @code{wdr}, @code{swap}, @code{fmul}, @code{fmuls}\n resp. @code{fmulsu}. The three @code{fmul*} built-ins are implemented\n as library call if no hardware multiplier is available.\n \n-@smallexample\n-void __builtin_avr_nop (void)\n-void __builtin_avr_sei (void)\n-void __builtin_avr_cli (void)\n-void __builtin_avr_sleep (void)\n-void __builtin_avr_wdr (void)\n-unsigned char __builtin_avr_swap (unsigned char)\n-unsigned int __builtin_avr_fmul (unsigned char, unsigned char)\n-int __builtin_avr_fmuls (char, char)\n-int __builtin_avr_fmulsu (char, unsigned char)\n-@end smallexample\n-\n-In order to delay execution for a specific number of cycles, GCC\n-implements\n-@smallexample\n-void __builtin_avr_delay_cycles (unsigned long ticks)\n-@end smallexample\n-\n-@noindent\n-@code{ticks} is the number of ticks to delay execution. Note that this\n+@item void __builtin_avr_delay_cycles (unsigned long ticks)\n+Delay execution for @var{ticks} cycles. Note that this\n built-in does not take into account the effect of interrupts that\n-might increase delay time. @code{ticks} must be a compile-time\n+might increase delay time. @var{ticks} must be a compile-time\n integer constant; delays with a variable number of cycles are not supported.\n \n-@smallexample\n-char __builtin_avr_flash_segment (const __memx void*)\n-@end smallexample\n-\n-@noindent\n+@item char __builtin_avr_flash_segment (const __memx void*)\n This built-in takes a byte address to the 24-bit\n @ref{AVR Named Address Spaces,address space} @code{__memx} and returns\n the number of the flash segment (the 64 KiB chunk) where the address\n points to.  Counting starts at @code{0}.\n If the address does not point to flash memory, return @code{-1}.\n \n-@smallexample\n-unsigned char __builtin_avr_insert_bits (unsigned long map,\n-                                         unsigned char bits,\n-                                         unsigned char val)\n-@end smallexample\n-\n-@noindent\n+@item uint8_t __builtin_avr_insert_bits (uint32_t map, uint8_t bits, uint8_t val)\n Insert bits from @var{bits} into @var{val} and return the resulting\n value. The nibbles of @var{map} determine how the insertion is\n performed: Let @var{X} be the @var{n}-th nibble of @var{map}\n@@ -12840,13 +12823,29 @@ __builtin_avr_insert_bits (0xffff3210, bits, val)\n __builtin_avr_insert_bits (0x01234567, bits, 0)\n @end smallexample\n \n-@smallexample\n-void __builtin_avr_nops (unsigned count)\n-@end smallexample\n+@item void __builtin_avr_nops (unsigned count)\n+Insert @var{count} @code{NOP} instructions.\n+The number of instructions must be a compile-time integer constant.\n+\n+@end table\n \n @noindent\n-Insert @code{count} @code{NOP} instructions.\n-The number of instructions must be a compile-time integer constant.\n+There are many more AVR-specific built-in functions that are used to\n+implement the ISO/IEC TR 18037 ``Embedded C'' fixed-point functions of\n+section 7.18a.6.  You don't need to use these built-ins directly.\n+Instead, use the declarations as supplied by the @code{stdfix.h} header\n+with GNU-C99:\n+\n+@smallexample\n+#include <stdfix.h>\n+\n+// Re-interpret the bit representation of unsigned 16-bit\n+// integer @var{uval} as Q-format 0.16 value.\n+unsigned fract get_bits (uint_ur_t uval)\n+@{\n+    return urbits (uval);\n+@}\n+@end smallexample\n \n @node Blackfin Built-in Functions\n @subsection Blackfin Built-in Functions"}]}