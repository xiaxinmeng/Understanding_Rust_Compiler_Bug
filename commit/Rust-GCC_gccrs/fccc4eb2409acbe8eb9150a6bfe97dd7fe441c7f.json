{"sha": "fccc4eb2409acbe8eb9150a6bfe97dd7fe441c7f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmNjYzRlYjI0MDlhY2JlOGViOTE1MGE2YmZlOTdkZDdmZTQ0MWM3Zg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2003-11-13T02:07:57Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2003-11-13T02:07:57Z"}, "message": "re PR rtl-optimization/12275 ([unit-at-a-time] ICE in htab_clear_slot)\n\n\n\tPR opt/12275\n\t* c-decl.c (finish_decl): Use change_decl_assembler_name.\n\t* c-pragma.c (handle_pragma_redefine_extname): Likewise.\n\t* varasm.c (make_decl_rtl): Likewise.\n\t* cgraph.c (change_decl_assembler_name): New function.\n\t* tree.h (set_decl_assembler_name): Kill dead declaration.\n\t(change_decl_assembler_name): Declare.\n\n\t* decl.c (make_rtl_for_nonlocal_decl): Use change_decl_assembler_name.\n\t* decl2.c (make_rtl_for_nonlocal_decl): Use change_decl_assembler_name.\n\nFrom-SVN: r73532", "tree": {"sha": "1dfb694a6a20bcea1203ad2a8b503169f1bb675b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1dfb694a6a20bcea1203ad2a8b503169f1bb675b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fccc4eb2409acbe8eb9150a6bfe97dd7fe441c7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fccc4eb2409acbe8eb9150a6bfe97dd7fe441c7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fccc4eb2409acbe8eb9150a6bfe97dd7fe441c7f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fccc4eb2409acbe8eb9150a6bfe97dd7fe441c7f/comments", "author": null, "committer": null, "parents": [{"sha": "1b2b8ee7a9e27b78b76687b6b94f956765039c1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b2b8ee7a9e27b78b76687b6b94f956765039c1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b2b8ee7a9e27b78b76687b6b94f956765039c1a"}], "stats": {"total": 113, "additions": 104, "deletions": 9}, "files": [{"sha": "c5bfc1f12091c10941e6b8af6d5cb5a0d1e0e8bd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fccc4eb2409acbe8eb9150a6bfe97dd7fe441c7f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fccc4eb2409acbe8eb9150a6bfe97dd7fe441c7f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fccc4eb2409acbe8eb9150a6bfe97dd7fe441c7f", "patch": "@@ -1,3 +1,16 @@\n+2003-11-13  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR opt/12275\n+\t* c-decl.c (finish_decl): Use change_decl_assembler_name.\n+\t* c-pragma.c (handle_pragma_redefine_extname): Likewise.\n+\t* varasm.c (make_decl_rtl): Likewise.\n+\t* cgraph.c (change_decl_assembler_name): New function.\n+\t* tree.h (set_decl_assembler_name): Kill dead declaration.\n+\t(change_decl_assembler_name): Declare.\n+\n+\t* decl.c (make_rtl_for_nonlocal_decl): Use change_decl_assembler_name.\n+\t* decl2.c (make_rtl_for_nonlocal_decl): Use change_decl_assembler_name.\n+\n 2003-11-12  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/h8300/lib1funcs.asm (___mulsi3): Don't save/restore"}, {"sha": "61fcae0111a9749b3d3e3c4e193f6c020001a4c8", "filename": "gcc/c-decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fccc4eb2409acbe8eb9150a6bfe97dd7fe441c7f/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fccc4eb2409acbe8eb9150a6bfe97dd7fe441c7f/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=fccc4eb2409acbe8eb9150a6bfe97dd7fe441c7f", "patch": "@@ -2870,7 +2870,7 @@ finish_decl (tree decl, tree init, tree asmspec_tree)\n #endif\n \t}\n       SET_DECL_RTL (decl, NULL_RTX);\n-      SET_DECL_ASSEMBLER_NAME (decl, get_identifier (starred));\n+      change_decl_assembler_name (decl, get_identifier (starred));\n     }\n \n   /* If #pragma weak was used, mark the decl weak now.  */\n@@ -2920,7 +2920,7 @@ finish_decl (tree decl, tree init, tree asmspec_tree)\n \t\twarning (\"%Jignoring asm-specifier for non-static local \"\n                          \"variable '%D'\", decl, decl);\n \t      else\n-\t\tSET_DECL_ASSEMBLER_NAME (decl, get_identifier (asmspec));\n+\t\tchange_decl_assembler_name (decl, get_identifier (asmspec));\n \t    }\n \n \t  if (TREE_CODE (decl) != FUNCTION_DECL)"}, {"sha": "e233a5e35fd8a7e2fa2f7176a478be92b82a611c", "filename": "gcc/c-pragma.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fccc4eb2409acbe8eb9150a6bfe97dd7fe441c7f/gcc%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fccc4eb2409acbe8eb9150a6bfe97dd7fe441c7f/gcc%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.c?ref=fccc4eb2409acbe8eb9150a6bfe97dd7fe441c7f", "patch": "@@ -382,7 +382,7 @@ handle_pragma_redefine_extname (cpp_reader *dummy ATTRIBUTE_UNUSED)\n       if (DECL_ASSEMBLER_NAME_SET_P (decl)\n \t  && DECL_ASSEMBLER_NAME (decl) != newname)\n         warning (\"#pragma redefine_extname conflicts with declaration\");\n-      SET_DECL_ASSEMBLER_NAME (decl, newname);\n+      change_decl_assembler_name (decl, newname);\n     }\n   else\n     add_to_renaming_pragma_list(oldname, newname);"}, {"sha": "fa6ec7de63baade94471b989a3383ec66d801148", "filename": "gcc/cgraph.c", "status": "modified", "additions": 78, "deletions": 2, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fccc4eb2409acbe8eb9150a6bfe97dd7fe441c7f/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fccc4eb2409acbe8eb9150a6bfe97dd7fe441c7f/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=fccc4eb2409acbe8eb9150a6bfe97dd7fe441c7f", "patch": "@@ -428,8 +428,6 @@ cgraph_varpool_node (tree decl)\n   if (!cgraph_varpool_hash)\n     cgraph_varpool_hash = htab_create_ggc (10, cgraph_varpool_hash_node,\n \t\t\t\t           eq_cgraph_varpool_node, NULL);\n-\n-\n   slot = (struct cgraph_varpool_node **)\n     htab_find_slot_with_hash (cgraph_varpool_hash, DECL_ASSEMBLER_NAME (decl),\n \t\t\t      IDENTIFIER_HASH_VALUE (DECL_ASSEMBLER_NAME (decl)),\n@@ -444,6 +442,84 @@ cgraph_varpool_node (tree decl)\n   return node;\n }\n \n+/* Set the DECL_ASSEMBLER_NAME and update cgraph hashtables.  */\n+void\n+change_decl_assembler_name (tree decl, tree name)\n+{\n+  struct cgraph_node *node = NULL;\n+  struct cgraph_varpool_node *vnode = NULL;\n+  void **slot;\n+\n+  if (!DECL_ASSEMBLER_NAME_SET_P (decl))\n+    {\n+      SET_DECL_ASSEMBLER_NAME (decl, name);\n+      return;\n+    }\n+  if (name == DECL_ASSEMBLER_NAME (decl))\n+    return;\n+\n+  if (TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (decl)))\n+    warning (\"%D renamed after being referenced in assembly\", decl);\n+\n+  if (TREE_CODE (decl) == FUNCTION_DECL && cgraph_hash)\n+    {\n+      /* Take a look whether declaration is in the cgraph structure.  */\n+      slot = \n+\thtab_find_slot_with_hash (cgraph_hash, DECL_ASSEMBLER_NAME (decl),\n+\t\t\t\t   IDENTIFIER_HASH_VALUE (DECL_ASSEMBLER_NAME\n+\t\t\t\t\t\t\t  (decl)), NO_INSERT);\n+      if (slot)\n+\tnode = *slot;\n+\n+      /* It is, verify that we are the canonical node for this decl.  */\n+      if (node && node->decl == decl)\n+\t{\n+\t  node = *slot;\n+\t  htab_clear_slot (cgraph_hash, slot);\n+      \t }\n+       else\n+\t node = NULL;\n+    }\n+  if (TREE_CODE (decl) == VAR_DECL && TREE_STATIC (decl) && cgraph_varpool_hash)\n+    {\n+      /* Take a look whether declaration is in the cgraph structure.  */\n+      slot = \n+\thtab_find_slot_with_hash (cgraph_varpool_hash, DECL_ASSEMBLER_NAME (decl),\n+\t\t\t\t   IDENTIFIER_HASH_VALUE (DECL_ASSEMBLER_NAME\n+\t\t\t\t\t\t\t  (decl)), NO_INSERT);\n+      if (slot)\n+\tvnode = *slot;\n+\n+      /* It is, verify that we are the canonical vnode for this decl.  */\n+      if (vnode && vnode->decl == decl)\n+\t{\n+\t  vnode = *slot;\n+\t  htab_clear_slot (cgraph_varpool_hash, slot);\n+      \t }\n+       else\n+\t vnode = NULL;\n+    }\n+  SET_DECL_ASSEMBLER_NAME (decl, name);\n+  if (node)\n+    {\n+      slot = \n+\thtab_find_slot_with_hash (cgraph_hash, name,\n+\t\t\t\t  IDENTIFIER_HASH_VALUE (name), INSERT);\n+      if (*slot)\n+\tabort ();\n+      *slot = node;\n+    }\n+  if (vnode)\n+    {\n+      slot = \n+\thtab_find_slot_with_hash (cgraph_varpool_hash, name,\n+\t\t\t\t  IDENTIFIER_HASH_VALUE (name), INSERT);\n+      if (*slot)\n+\tabort ();\n+      *slot = vnode;\n+    }\n+}\n+\n /* Try to find existing function for identifier ID.  */\n struct cgraph_varpool_node *\n cgraph_varpool_node_for_identifier (tree id)"}, {"sha": "93368c567e42206b629aa9290ab4ab259c3e60b6", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fccc4eb2409acbe8eb9150a6bfe97dd7fe441c7f/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fccc4eb2409acbe8eb9150a6bfe97dd7fe441c7f/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=fccc4eb2409acbe8eb9150a6bfe97dd7fe441c7f", "patch": "@@ -4526,7 +4526,7 @@ make_rtl_for_nonlocal_decl (tree decl, tree init, const char* asmspec)\n   /* Set the DECL_ASSEMBLER_NAME for the variable.  */\n   if (asmspec)\n     {\n-      SET_DECL_ASSEMBLER_NAME (decl, get_identifier (asmspec));\n+      change_decl_assembler_name (decl, get_identifier (asmspec));\n       /* The `register' keyword, when used together with an\n \t asm-specification, indicates that the variable should be\n \t placed in a particular register.  */"}, {"sha": "5f1076a9b15901524894ee4dab660d7c33a4e1fb", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fccc4eb2409acbe8eb9150a6bfe97dd7fe441c7f/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fccc4eb2409acbe8eb9150a6bfe97dd7fe441c7f/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=fccc4eb2409acbe8eb9150a6bfe97dd7fe441c7f", "patch": "@@ -1000,7 +1000,7 @@ grokfield (tree declarator, tree declspecs, tree init, tree asmspec_tree,\n \t  /* This must override the asm specifier which was placed\n \t     by grokclassfn.  Lay this out fresh.  */\n \t  SET_DECL_RTL (value, NULL_RTX);\n-\t  SET_DECL_ASSEMBLER_NAME (value, get_identifier (asmspec));\n+\t  change_decl_assembler_name (value, get_identifier (asmspec));\n \t}\n       if (!DECL_FRIEND_P (value))\n \tgrok_special_member_properties (value);"}, {"sha": "51095cbf7ffb50e61d43ccf0d9b459e6efb195b4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fccc4eb2409acbe8eb9150a6bfe97dd7fe441c7f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fccc4eb2409acbe8eb9150a6bfe97dd7fe441c7f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fccc4eb2409acbe8eb9150a6bfe97dd7fe441c7f", "patch": "@@ -1,3 +1,7 @@\n+2003-11-13  Jan Hubicka  <jh@suse.cz>\n+\n+\t* gcc.c-torture/compile/20031112-1.c: New test.\n+\n 2003-11-12  Mark Mitchell  <mark@codesourcery.com>\n \n \t* g++.dg/parse/crash10.C: Remove bogus error marker."}, {"sha": "466b29edf698d7e9c4ec028dda28ef1222cd43ad", "filename": "gcc/testsuite/gcc.c-torture/compile/20031112-1.c", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fccc4eb2409acbe8eb9150a6bfe97dd7fe441c7f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20031112-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fccc4eb2409acbe8eb9150a6bfe97dd7fe441c7f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20031112-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20031112-1.c?ref=fccc4eb2409acbe8eb9150a6bfe97dd7fe441c7f", "patch": "@@ -0,0 +1,2 @@\n+extern __inline int __finite (double __value) { return 0; }\n+extern __typeof (__finite) __finite __asm__ (\"\" \"__GI___finite\");"}, {"sha": "f94214ee57d81ba4af92c3b88613d098d6853a22", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fccc4eb2409acbe8eb9150a6bfe97dd7fe441c7f/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fccc4eb2409acbe8eb9150a6bfe97dd7fe441c7f/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=fccc4eb2409acbe8eb9150a6bfe97dd7fe441c7f", "patch": "@@ -2712,7 +2712,7 @@ extern tree get_file_function_name_long (const char *);\n extern tree get_set_constructor_bits (tree, char *, int);\n extern tree get_set_constructor_bytes (tree, unsigned char *, int);\n extern tree get_callee_fndecl (tree);\n-extern void set_decl_assembler_name (tree);\n+extern void change_decl_assembler_name (tree, tree);\n extern int type_num_arguments (tree);\n extern tree lhd_unsave_expr_now (tree);\n "}, {"sha": "7f5ee565f51a681c18f41ceec77cf98984e7c3c9", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fccc4eb2409acbe8eb9150a6bfe97dd7fe441c7f/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fccc4eb2409acbe8eb9150a6bfe97dd7fe441c7f/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=fccc4eb2409acbe8eb9150a6bfe97dd7fe441c7f", "patch": "@@ -791,7 +791,7 @@ make_decl_rtl (tree decl, const char *asmspec)\n       char *starred = alloca (strlen (asmspec) + 2);\n       starred[0] = '*';\n       strcpy (starred + 1, asmspec);\n-      SET_DECL_ASSEMBLER_NAME (decl, get_identifier (starred));\n+      change_decl_assembler_name (decl, get_identifier (starred));\n     }\n \n   name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));"}]}