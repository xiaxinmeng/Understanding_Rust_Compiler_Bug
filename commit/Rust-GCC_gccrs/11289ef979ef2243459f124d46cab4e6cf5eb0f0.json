{"sha": "11289ef979ef2243459f124d46cab4e6cf5eb0f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTEyODllZjk3OWVmMjI0MzQ1OWYxMjRkNDZjYWI0ZTZjZjVlYjBmMA==", "commit": {"author": {"name": "Ben Elliston", "email": "bje@au.ibm.com", "date": "2005-03-08T22:10:34Z"}, "committer": {"name": "Ben Elliston", "email": "bje@gcc.gnu.org", "date": "2005-03-08T22:10:34Z"}, "message": "vlad.exp: Remove trailing semicolons.\n\n\t* consistency.vlad/vlad.exp: Remove trailing semicolons.\n\t* g++.dg/gcov/gcov.exp: Likewise.\n\t* gcc.c-torture/execute/ieee/ieee.exp: Likewise.\n\t* gcc.target/xstormy16/xstormy16.exp: Likewise.\n\t* lib/c-torture.exp: Likewise.\n\t* lib/fortran-torture.exp: Likewise.\n\t* lib/g++.exp: Likewise.\n\t* lib/gcc-defs.exp: Likewise.\n\t* lib/gcc-dg.exp: Likewise.\n\t* lib/gcc.exp: Likewise.\n\t* lib/gcov.exp: Likewise.\n\t* lib/gfortran.exp: Likewise.\n\t* lib/mike-g++.exp: Likewise.\n\t* lib/mike-gcc.exp: Likewise.\n\t* lib/objc-torture.exp: Likewise.\n\t* lib/objc.exp: Likewise.\n\t* lib/profopt.exp: Likewise.\n\t* lib/target-libpath.exp: Likewise.\n\t* lib/target-supports.exp: Likewise.\n\t* lib/treelang.exp: Likewise.\n\t* lib/wrapper.exp: Likewise.\n\nFrom-SVN: r96132", "tree": {"sha": "eda303768f63168eb755ea8c56bdac58570c5927", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eda303768f63168eb755ea8c56bdac58570c5927"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11289ef979ef2243459f124d46cab4e6cf5eb0f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11289ef979ef2243459f124d46cab4e6cf5eb0f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11289ef979ef2243459f124d46cab4e6cf5eb0f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11289ef979ef2243459f124d46cab4e6cf5eb0f0/comments", "author": null, "committer": null, "parents": [{"sha": "391bdf45eac1d12446a3c82a122cc969458bd4ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/391bdf45eac1d12446a3c82a122cc969458bd4ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/391bdf45eac1d12446a3c82a122cc969458bd4ec"}], "stats": {"total": 396, "additions": 210, "deletions": 186}, "files": [{"sha": "46ed17dd13e140fc7b953227d14eebe09487ad4d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11289ef979ef2243459f124d46cab4e6cf5eb0f0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11289ef979ef2243459f124d46cab4e6cf5eb0f0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=11289ef979ef2243459f124d46cab4e6cf5eb0f0", "patch": "@@ -1,3 +1,27 @@\n+2005-03-09  Ben Elliston  <bje@au.ibm.com>\n+\n+\t* consistency.vlad/vlad.exp: Remove trailing semicolons.\n+\t* g++.dg/gcov/gcov.exp: Likewise.\n+\t* gcc.c-torture/execute/ieee/ieee.exp: Likewise.\n+\t* gcc.target/xstormy16/xstormy16.exp: Likewise.\n+\t* lib/c-torture.exp: Likewise.\n+\t* lib/fortran-torture.exp: Likewise.\n+\t* lib/g++.exp: Likewise.\n+\t* lib/gcc-defs.exp: Likewise.\n+\t* lib/gcc-dg.exp: Likewise.\n+\t* lib/gcc.exp: Likewise.\n+\t* lib/gcov.exp: Likewise.\n+\t* lib/gfortran.exp: Likewise.\n+\t* lib/mike-g++.exp: Likewise.\n+\t* lib/mike-gcc.exp: Likewise.\n+\t* lib/objc-torture.exp: Likewise.\n+\t* lib/objc.exp: Likewise.\n+\t* lib/profopt.exp: Likewise.\n+\t* lib/target-libpath.exp: Likewise.\n+\t* lib/target-supports.exp: Likewise.\n+\t* lib/treelang.exp: Likewise.\n+\t* lib/wrapper.exp: Likewise.\n+\n 2005-03-08  Jeff Law  <law@redhat.com>\n \n \t* gcc.dg/tree-ssa/20030728-1.c: Update to account for recent"}, {"sha": "0df4a14651c3e6921268f42b1f737a90594bd2d0", "filename": "gcc/testsuite/consistency.vlad/vlad.exp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11289ef979ef2243459f124d46cab4e6cf5eb0f0/gcc%2Ftestsuite%2Fconsistency.vlad%2Fvlad.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11289ef979ef2243459f124d46cab4e6cf5eb0f0/gcc%2Ftestsuite%2Fconsistency.vlad%2Fvlad.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fconsistency.vlad%2Fvlad.exp?ref=11289ef979ef2243459f124d46cab4e6cf5eb0f0", "patch": "@@ -111,7 +111,7 @@ proc c-consistency-execute { src cpp_flag out_suffix} {\n       close $fd\n     }\n \n-    set comp_output [gcc_target_compile \"$cpp_flag $src -x none $wrap_file\" \"$executable\" executable $options];\n+    set comp_output [gcc_target_compile \"$cpp_flag $src -x none $wrap_file\" \"$executable\" executable $options]\n     \n     # Set a few common compiler messages.\n     set fatal_signal \"*cc: Internal compiler error: program*got fatal signal\"\n@@ -157,7 +157,7 @@ proc c-consistency-execute { src cpp_flag out_suffix} {\n     # Check for compilation only.\n     if [file exists $rootname.conly] {\n       remote_file build delete $executable\n-      return;\n+      return\n     }\n \n     # See if this source file uses \"long long\" types, if it does, and\n@@ -175,8 +175,8 @@ proc c-consistency-execute { src cpp_flag out_suffix} {\n     \n     set exec_output \"\"\n     set result [consistency_load \"$executable\" \"\" \"\"]\n-    set status [lindex $result 0];\n-    set exec_output [lindex $result 1];\n+    set status [lindex $result 0]\n+    set exec_output [lindex $result 1]\n \n     # Strip random whitespace junk from the output.  the\n     # whitejunk is an artifact of the way we get output"}, {"sha": "5d924a2cf2a709790efa54de811370b0492783fe", "filename": "gcc/testsuite/g++.dg/gcov/gcov.exp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11289ef979ef2243459f124d46cab4e6cf5eb0f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgcov%2Fgcov.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11289ef979ef2243459f124d46cab4e6cf5eb0f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgcov%2Fgcov.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgcov%2Fgcov.exp?ref=11289ef979ef2243459f124d46cab4e6cf5eb0f0", "patch": "@@ -33,9 +33,9 @@ if { ![is_remote host] && [string match \"*/*\" [lindex $GXX_UNDER_TEST 0]] } {\n dg-init\n \n # Delete old .gcda files.\n-set files [glob -nocomplain gcov-*.gcda];\n+set files [glob -nocomplain gcov-*.gcda]\n if { $files != \"\" } {\n-    eval \"remote_file build delete $files\";\n+    eval \"remote_file build delete $files\"\n }\n \n # Main loop."}, {"sha": "ff508d3f4209917a7312b99e6f32287131c84be5", "filename": "gcc/testsuite/gcc.c-torture/execute/ieee/ieee.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11289ef979ef2243459f124d46cab4e6cf5eb0f0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Fieee.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11289ef979ef2243459f124d46cab4e6cf5eb0f0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Fieee.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Fieee.exp?ref=11289ef979ef2243459f124d46cab4e6cf5eb0f0", "patch": "@@ -31,7 +31,7 @@ if $tracelevel then {\n     strace $tracelevel\n }\n \n-set additional_flags \"\";\n+set additional_flags \"\"\n \n # We must use -ffloat-store/-mieee to ensure that excess precision on some\n # machines does not cause problems"}, {"sha": "251cb93405d3cc27a1262e2ac9622f04169cb7ce", "filename": "gcc/testsuite/gcc.misc-tests/gcov.exp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11289ef979ef2243459f124d46cab4e6cf5eb0f0/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fgcov.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11289ef979ef2243459f124d46cab4e6cf5eb0f0/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fgcov.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fgcov.exp?ref=11289ef979ef2243459f124d46cab4e6cf5eb0f0", "patch": "@@ -33,9 +33,9 @@ if { ![is_remote host] && [string match \"*/*\" [lindex $GCC_UNDER_TEST 0]] } {\n dg-init\n \n # Delete old .gcda files.\n-set files [glob -nocomplain gcov-*.gcda];\n+set files [glob -nocomplain gcov-*.gcda]\n if { $files != \"\" } {\n-    eval \"remote_file build delete $files\";\n+    eval \"remote_file build delete $files\"\n }\n \n # Main loop."}, {"sha": "7699a42edc531f6d59271e47615c930789ae284c", "filename": "gcc/testsuite/gcc.target/xstormy16/xstormy16.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11289ef979ef2243459f124d46cab4e6cf5eb0f0/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fxstormy16.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11289ef979ef2243459f124d46cab4e6cf5eb0f0/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fxstormy16.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fxstormy16.exp?ref=11289ef979ef2243459f124d46cab4e6cf5eb0f0", "patch": "@@ -19,7 +19,7 @@ set dg-do-what-default run\n \n # Main loop.\n foreach testcase [lsort [find $srcdir/$subdir *.c]] {\n-    global test_counts;\n+    global test_counts\n \n     set base \"[file rootname [file tail $testcase]]\"\n "}, {"sha": "11e03ac2d948ec8790c63cba65deb8dc85ca4ba1", "filename": "gcc/testsuite/lib/c-torture.exp", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11289ef979ef2243459f124d46cab4e6cf5eb0f0/gcc%2Ftestsuite%2Flib%2Fc-torture.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11289ef979ef2243459f124d46cab4e6cf5eb0f0/gcc%2Ftestsuite%2Flib%2Fc-torture.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fc-torture.exp?ref=11289ef979ef2243459f124d46cab4e6cf5eb0f0", "patch": "@@ -80,7 +80,7 @@ proc c-torture-compile { src option } {\n     set options \"\"\n     lappend options \"additional_flags=-w $option\"\n \n-    set comp_output [gcc_target_compile \"$src\" \"$output\" object $options];\n+    set comp_output [gcc_target_compile \"$src\" \"$output\" object $options]\n     gcc_check_compile $testcase $option $output $comp_output\n     remote_file build delete $output\n }\n@@ -102,9 +102,9 @@ proc c-torture-execute { sources args } {\n     set src [lindex $sources 0]\n \n     if { [llength $args] > 0 } {\n-\tset additional_flags [lindex $args 0];\n+\tset additional_flags [lindex $args 0]\n     } else {\n-\tset additional_flags \"\";\n+\tset additional_flags \"\"\n     }\n     # Check for alternate driver.\n     if [file exists [file rootname $src].x] {\n@@ -136,14 +136,14 @@ proc c-torture-execute { sources args } {\n \tset testcase \"[file tail [file dirname $src]]/[file tail $src]\"\n     }\n \n-    set count 0;\n-    set oldstatus \"foo\";\n+    set count 0\n+    set oldstatus \"foo\"\n     foreach option $option_list {\n \tif { $count > 0 } {\n-\t    set oldexec $execname;\n+\t    set oldexec $execname\n \t}\n-\tset execname \"${executable}${count}\";\n-\tincr count;\n+\tset execname \"${executable}${count}\"\n+\tincr count\n \n \t# torture_{compile,execute}_xfail are set by the .x script\n \t# (if present)\n@@ -157,15 +157,15 @@ proc c-torture-execute { sources args } {\n             set ignore_me [eval $torture_eval_before_compile]\n \t}\n \n-\tremote_file build delete $execname;\n+\tremote_file build delete $execname\n \tverbose \"Testing $testcase, $option\" 1\n \n \tset options \"\"\n \tlappend options \"additional_flags=-w $option\"\n \tif { $additional_flags != \"\" } {\n-\t    lappend options \"additional_flags=$additional_flags\";\n+\t    lappend options \"additional_flags=$additional_flags\"\n \t}\n-\tset comp_output [gcc_target_compile \"$sources\" \"${execname}\" executable $options];\n+\tset comp_output [gcc_target_compile \"$sources\" \"${execname}\" executable $options]\n \n \tif ![gcc_check_compile \"$testcase compilation\" $option $execname $comp_output] {\n \t    unresolved \"$testcase execution, $option\"\n@@ -204,26 +204,26 @@ proc c-torture-execute { sources args } {\n \t# Do not do this for native testing since the cost to load/execute\n \t# the test is fairly small and the comparison step actually slows\n \t# the entire process down because it usually does not \"hit\".\n-\tset skip 0;\n+\tset skip 0\n \tif { ![isnative] && [info exists oldexec] } {\n \t    if { [remote_file build cmp $oldexec $execname] == 0 } {\n-\t\tset skip 1;\n+\t\tset skip 1\n \t    }\n \t}\n \tif { $skip == 0 } {\n \t    set result [gcc_load \"$execname\" \"\" \"\"]\n-\t    set status [lindex $result 0];\n-\t    set output [lindex $result 1];\n+\t    set status [lindex $result 0]\n+\t    set output [lindex $result 1]\n \t}\n         if { $oldstatus == \"pass\" } {\n-\t    remote_file build delete $oldexec;\n+\t    remote_file build delete $oldexec\n         }\n \t$status \"$testcase execution, $option\"\n-\tset oldstatus $status;\n+\tset oldstatus $status\n     }\n     if [info exists status] {\n \tif { $status == \"pass\" } {\n-\t    remote_file build delete $execname;\n+\t    remote_file build delete $execname\n \t}\n     }\n }\n@@ -257,9 +257,9 @@ proc search_for { file pattern } {\n proc c-torture { args } {\n     global srcdir subdir compiler_conditional_xfail_data\n \n-    set src [lindex $args 0];\n+    set src [lindex $args 0]\n     if { [llength $args] > 1 } {\n-\tset options [lindex $args 1];\n+\tset options [lindex $args 1]\n     } else {\n \tset options \"\"\n     }"}, {"sha": "e47c2efa94a793a128484252f489864cf3a1cb12", "filename": "gcc/testsuite/lib/fortran-torture.exp", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11289ef979ef2243459f124d46cab4e6cf5eb0f0/gcc%2Ftestsuite%2Flib%2Ffortran-torture.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11289ef979ef2243459f124d46cab4e6cf5eb0f0/gcc%2Ftestsuite%2Flib%2Ffortran-torture.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ffortran-torture.exp?ref=11289ef979ef2243459f124d46cab4e6cf5eb0f0", "patch": "@@ -70,7 +70,7 @@ proc fortran-torture-compile { src option } {\n     set options \"\"\n     lappend options \"additional_flags=-w $option\"\n \n-    set comp_output [gfortran_target_compile \"$src\" \"$output\" object $options];\n+    set comp_output [gfortran_target_compile \"$src\" \"$output\" object $options]\n     \n     # See if we got something bad.\n     set fatal_signal \"*95*: Internal compiler error: program*got fatal signal\"\n@@ -139,7 +139,7 @@ proc fortran-torture-execute { src } {\n     global TORTURE_OPTIONS\n \n     # Check for alternate driver.\n-    set additional_flags \"\";\n+    set additional_flags \"\"\n     if [file exists [file rootname $src].x] {\n \tverbose \"Using alternate driver [file rootname [file tail $src]].x\" 2\n \tset done_p 0\n@@ -186,9 +186,9 @@ proc fortran-torture-execute { src } {\n \tset options \"\"\n \tlappend options \"additional_flags=-w $option\"\n \tif { $additional_flags != \"\" } {\n-\t    lappend options \"additional_flags=$additional_flags\";\n+\t    lappend options \"additional_flags=$additional_flags\"\n \t}\n-\tset comp_output [gfortran_target_compile \"$src\" \"$executable\" executable $options];\n+\tset comp_output [gfortran_target_compile \"$src\" \"$executable\" executable $options]\n \n \t# See if we got something bad.\n \tset fatal_signal \"*95*: Internal compiler error: program*got fatal signal\"\n@@ -262,8 +262,8 @@ proc fortran-torture-execute { src } {\n \n \t# Run the testcase, and analyse the output.\n \tset result [gfortran_load \"$executable\" \"\" \"\"]\n-\tset status [lindex $result 0];\n-\tset output [lindex $result 1];\n+\tset status [lindex $result 0]\n+\tset output [lindex $result 1]\n         if { $status == \"pass\" } {\n \t    remote_file build delete $executable\n         }\n@@ -305,9 +305,9 @@ proc fortran-torture { args } {\n     global srcdir subdir\n     global compiler_conditional_xfail_data\n \n-    set src [lindex $args 0];\n+    set src [lindex $args 0]\n     if { [llength $args] > 1 } {\n-\tset options [lindex $args 1];\n+\tset options [lindex $args 1]\n     } else {\n \tset options \"\"\n     }"}, {"sha": "bc2bf60fb7d28ff0dd7af7910f5c035fc7bfd627", "filename": "gcc/testsuite/lib/g++.exp", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11289ef979ef2243459f124d46cab4e6cf5eb0f0/gcc%2Ftestsuite%2Flib%2Fg%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11289ef979ef2243459f124d46cab4e6cf5eb0f0/gcc%2Ftestsuite%2Flib%2Fg%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fg%2B%2B.exp?ref=11289ef979ef2243459f124d46cab4e6cf5eb0f0", "patch": "@@ -48,8 +48,8 @@ proc g++_version { } {\n     # verify that the compiler exists\n     if { [is_remote host] || [which $compiler] != 0 } then {\n \tset tmp [remote_exec host \"$compiler -v\"]\n-\tset status [lindex $tmp 0];\n-\tset output [lindex $tmp 1];\n+\tset status [lindex $tmp 0]\n+\tset output [lindex $tmp 1]\n \tregexp \" version \\[^\\n\\r\\]*\" $output version\n \tif { $status == 0 && [info exists version] } then {\n \t    if [is_remote host] {\n@@ -145,25 +145,25 @@ proc g++_link_flags { paths } {\n \t}\n       }\n     } else {\n-      global tool_root_dir;\n+      global tool_root_dir\n \n-      set libgpp [lookfor_file ${tool_root_dir} libg++];\n+      set libgpp [lookfor_file ${tool_root_dir} libg++]\n       if { $libgpp != \"\" } {\n-          append flags \"-L${libgpp} \";\n+          append flags \"-L${libgpp} \"\n           append ld_library_path \":${libgpp}\"\n       }\n-      set libstdcpp [lookfor_file ${tool_root_dir} libstdc++];\n+      set libstdcpp [lookfor_file ${tool_root_dir} libstdc++]\n       if { $libstdcpp != \"\" } {\n-          append flags \"-L${libstdcpp} \";\n+          append flags \"-L${libstdcpp} \"\n           append ld_library_path \":${libstdcpp}\"\n       }\n-      set libiberty [lookfor_file ${tool_root_dir} libiberty];\n+      set libiberty [lookfor_file ${tool_root_dir} libiberty]\n       if { $libiberty != \"\" } {\n-          append flags \"-L${libiberty} \";\n+          append flags \"-L${libiberty} \"\n       }\n-      set librx [lookfor_file ${tool_root_dir} librx];\n+      set librx [lookfor_file ${tool_root_dir} librx]\n       if { $librx != \"\" } {\n-          append flags \"-L${librx} \";\n+          append flags \"-L${librx} \"\n       }\n     }\n \n@@ -182,7 +182,7 @@ proc g++_init { args } {\n     global base_dir\n     global tmpdir\n     global libdir\n-    global gluefile wrap_flags;\n+    global gluefile wrap_flags\n     global objdir srcdir\n     global ALWAYS_CXXFLAGS\n     global TOOL_EXECUTABLE TOOL_OPTIONS\n@@ -196,7 +196,7 @@ proc g++_init { args } {\n \n     if ![info exists GXX_UNDER_TEST] then {\n \tif [info exists TOOL_EXECUTABLE] {\n-\t    set GXX_UNDER_TEST $TOOL_EXECUTABLE;\n+\t    set GXX_UNDER_TEST $TOOL_EXECUTABLE\n \t} else {\n \t    if { [is_remote host] || ! [info exists TESTING_IN_BUILD_TREE] } {\n \t\tset GXX_UNDER_TEST [transform c++]\n@@ -231,16 +231,16 @@ proc g++_init { args } {\n \n     if ![is_remote host] {\n \tif [info exists TOOL_OPTIONS] {\n-\t    lappend ALWAYS_CXXFLAGS \"additional_flags=[g++_include_flags [get_multilibs ${TOOL_OPTIONS}] ]\";\n-\t    lappend ALWAYS_CXXFLAGS \"ldflags=[g++_link_flags [get_multilibs ${TOOL_OPTIONS}] ]\";\n+\t    lappend ALWAYS_CXXFLAGS \"additional_flags=[g++_include_flags [get_multilibs ${TOOL_OPTIONS}] ]\"\n+\t    lappend ALWAYS_CXXFLAGS \"ldflags=[g++_link_flags [get_multilibs ${TOOL_OPTIONS}] ]\"\n \t} else {\n-\t    lappend ALWAYS_CXXFLAGS \"additional_flags=[g++_include_flags [get_multilibs] ]\";\n-\t    lappend ALWAYS_CXXFLAGS \"ldflags=[g++_link_flags [get_multilibs] ]\";\n+\t    lappend ALWAYS_CXXFLAGS \"additional_flags=[g++_include_flags [get_multilibs] ]\"\n+\t    lappend ALWAYS_CXXFLAGS \"ldflags=[g++_link_flags [get_multilibs] ]\"\n \t}\n     }\n \n     if [info exists TOOL_OPTIONS] {\n-\tlappend ALWAYS_CXXFLAGS \"additional_flags=$TOOL_OPTIONS\";\n+\tlappend ALWAYS_CXXFLAGS \"additional_flags=$TOOL_OPTIONS\"\n     }\n \n     # Make sure that lines are not wrapped.  That can confuse the\n@@ -261,23 +261,23 @@ proc g++_init { args } {\n #\n \n proc g++_target_compile { source dest type options } {\n-    global tmpdir;\n+    global tmpdir\n     global gpp_compile_options\n     global gluefile wrap_flags\n-    global ALWAYS_CXXFLAGS;\n-    global GXX_UNDER_TEST;\n+    global ALWAYS_CXXFLAGS\n+    global GXX_UNDER_TEST\n \n     if { [target_info needs_status_wrapper] != \"\" && [info exists gluefile] } {\n \tlappend options \"libs=${gluefile}\"\n \tlappend options \"ldflags=${wrap_flags}\"\n     }\n \n     lappend options \"additional_flags=[libio_include_flags]\"\n-    lappend options \"compiler=$GXX_UNDER_TEST\";\n+    lappend options \"compiler=$GXX_UNDER_TEST\"\n \n     set options [concat $gpp_compile_options $options]\n \n-    set options [concat \"$ALWAYS_CXXFLAGS\" $options];\n+    set options [concat \"$ALWAYS_CXXFLAGS\" $options]\n \n     if { [regexp \"(^| )-frepo( |$)\" $options] && \\\n \t [regexp \"\\.o(|bj)$\" $dest] } then {\n@@ -311,7 +311,7 @@ proc ${tool}_option_proc { option } {\n \tforeach x [split $option \",\"] {\n \t    lappend gpp_compile_options \"additional_flags=$x\"\n \t}\n-\treturn 1;\n+\treturn 1\n     } else {\n \treturn 0\n     }"}, {"sha": "87e8564e97ae4bafb127be6c0aabf6279d7a06f7", "filename": "gcc/testsuite/lib/gcc-defs.exp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11289ef979ef2243459f124d46cab4e6cf5eb0f0/gcc%2Ftestsuite%2Flib%2Fgcc-defs.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11289ef979ef2243459f124d46cab4e6cf5eb0f0/gcc%2Ftestsuite%2Flib%2Fgcc-defs.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc-defs.exp?ref=11289ef979ef2243459f124d46cab4e6cf5eb0f0", "patch": "@@ -103,7 +103,7 @@ proc ${tool}_fail { testcase cflags } {\n \n proc ${tool}_finish { } {\n     # The testing harness apparently requires this.\n-    global errorInfo;\n+    global errorInfo\n \n     if [info exists errorInfo] then {\n \tunset errorInfo\n@@ -121,11 +121,11 @@ proc ${tool}_finish { } {\n #\n \n proc ${tool}_exit { } {\n-    global gluefile;\n+    global gluefile\n \n     if [info exists gluefile] {\n-\tfile_on_build delete $gluefile;\n-\tunset gluefile;\n+\tfile_on_build delete $gluefile\n+\tunset gluefile\n     }\n }\n     "}, {"sha": "ee16d2efc6762021543bb77384d24e65a33a07f3", "filename": "gcc/testsuite/lib/gcc-dg.exp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11289ef979ef2243459f124d46cab4e6cf5eb0f0/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11289ef979ef2243459f124d46cab4e6cf5eb0f0/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp?ref=11289ef979ef2243459f124d46cab4e6cf5eb0f0", "patch": "@@ -138,7 +138,7 @@ proc gcc-dg-test-1 { target_compile prog do_what extra_tool_flags } {\n \t    set output_file \"./[file rootname [file tail $prog]].exe\"\n \t    # This is the only place where we care if an executable was\n \t    # created or not.  If it was, dg.exp will try to run it.\n-\t    remote_file build delete $output_file;\n+\t    remote_file build delete $output_file\n \t}\n \tdefault {\n \t    perror \"$do_what: not a valid dg-do keyword\"\n@@ -150,7 +150,7 @@ proc gcc-dg-test-1 { target_compile prog do_what extra_tool_flags } {\n \tlappend options \"additional_flags=$extra_tool_flags\"\n     }\n \n-    set comp_output [$target_compile \"$prog\" \"$output_file\" \"$compile_type\" $options];\n+    set comp_output [$target_compile \"$prog\" \"$output_file\" \"$compile_type\" $options]\n \n     if { $do_what == \"repo\" } {\n \tset object_file \"$output_file\""}, {"sha": "5cfe9a53134c78d06257e9a674c6357e0d65de0b", "filename": "gcc/testsuite/lib/gcc.exp", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11289ef979ef2243459f124d46cab4e6cf5eb0f0/gcc%2Ftestsuite%2Flib%2Fgcc.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11289ef979ef2243459f124d46cab4e6cf5eb0f0/gcc%2Ftestsuite%2Flib%2Fgcc.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc.exp?ref=11289ef979ef2243459f124d46cab4e6cf5eb0f0", "patch": "@@ -40,22 +40,22 @@ load_lib gcc-defs.exp\n proc default_gcc_version { } {\n     global GCC_UNDER_TEST\n \n-    gcc_init;\n+    gcc_init\n \n     # ignore any arguments after the command\n     set compiler [lindex $GCC_UNDER_TEST 0]\n \n     if ![is_remote host] {\n-\tset compiler_name [which $compiler];\n+\tset compiler_name [which $compiler]\n     } else {\n-\tset compiler_name $compiler;\n+\tset compiler_name $compiler\n     }\n \n     # verify that the compiler exists\n     if { $compiler_name != 0 } then {\n \tset tmp [remote_exec host \"$compiler -v\"]\n-\tset status [lindex $tmp 0];\n-\tset output [lindex $tmp 1];\n+\tset status [lindex $tmp 0]\n+\tset output [lindex $tmp 1]\n \tregexp \" version \\[^\\n\\r\\]*\" $output version\n \tif { $status == 0 && [info exists version] } then {\n \t    clone_output \"$compiler_name $version\\n\"\n@@ -73,7 +73,7 @@ proc default_gcc_version { } {\n #\n \n proc gcc_version { } {\n-    default_gcc_version;\n+    default_gcc_version\n }\n \n #\n@@ -97,7 +97,7 @@ proc gcc_init { args } {\n \n     if ![info exists GCC_UNDER_TEST] {\n \tif [info exists TOOL_EXECUTABLE] {\n-\t    set GCC_UNDER_TEST $TOOL_EXECUTABLE;\n+\t    set GCC_UNDER_TEST $TOOL_EXECUTABLE\n \t} else {\n \t    set GCC_UNDER_TEST \"[find_gcc]\"\n \t}\n@@ -115,8 +115,8 @@ proc gcc_init { args } {\n #\n \n proc gcc_target_compile { source dest type options } {\n-    global tmpdir;\n-    global gluefile wrap_flags;\n+    global tmpdir\n+    global gluefile wrap_flags\n     global GCC_UNDER_TEST\n     global TOOL_OPTIONS\n \t\n@@ -139,7 +139,7 @@ proc gcc_target_compile { source dest type options } {\n     # TOOL_OPTIONS must come first, so that it doesn't override testcase\n     # specific options.\n     if [info exists TOOL_OPTIONS] {\n-\tset options [concat \"{additional_flags=$TOOL_OPTIONS}\" $options];\n+\tset options [concat \"{additional_flags=$TOOL_OPTIONS}\" $options]\n     }\n     if [target_info exists gcc,timeout] {\n \tlappend options \"timeout=[target_info gcc,timeout]\""}, {"sha": "3474726c219326578fa72964d437b7ed7f26a4c0", "filename": "gcc/testsuite/lib/gcov.exp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11289ef979ef2243459f124d46cab4e6cf5eb0f0/gcc%2Ftestsuite%2Flib%2Fgcov.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11289ef979ef2243459f124d46cab4e6cf5eb0f0/gcc%2Ftestsuite%2Flib%2Fgcov.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcov.exp?ref=11289ef979ef2243459f124d46cab4e6cf5eb0f0", "patch": "@@ -249,8 +249,8 @@ proc run-gcov { args } {\n     }\n \n     verbose \"Running $GCOV $testcase\" 2\n-    set testcase [remote_download host $testcase];\n-    set result [remote_exec host $GCOV $gcov_args];\n+    set testcase [remote_download host $testcase]\n+    set result [remote_exec host $GCOV $gcov_args]\n     if { [lindex $result 0] != 0 } {\n \tfail \"$subdir/$testcase gcov failed: [lindex $result 1]\"\n \tclean-gcov $testcase\n@@ -262,9 +262,9 @@ proc run-gcov { args } {\n     if { $files == \"\" } {\n         fail \"$subdir/$testcase gcov failed: $testcase.gcov does not exist\"\n         clean-gcov $testcase\n-        return;\n+        return\n     }\n-    remote_upload host $testcase.gcov $testcase.gcov;\n+    remote_upload host $testcase.gcov $testcase.gcov\n \n     if { $gcov_verify_xfail != \"\" } {\n \teval setup_xfail [split $gcov_verify_xfail]"}, {"sha": "8762c90683813716220749551560e85d17286f82", "filename": "gcc/testsuite/lib/gfortran.exp", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11289ef979ef2243459f124d46cab4e6cf5eb0f0/gcc%2Ftestsuite%2Flib%2Fgfortran.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11289ef979ef2243459f124d46cab4e6cf5eb0f0/gcc%2Ftestsuite%2Flib%2Fgfortran.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgfortran.exp?ref=11289ef979ef2243459f124d46cab4e6cf5eb0f0", "patch": "@@ -49,8 +49,8 @@ proc gfortran_version { } {\n     # verify that the compiler exists\n     if { [is_remote host] || [which $compiler] != 0 } then {\n \tset tmp [remote_exec host \"$compiler -v\"]\n-\tset status [lindex $tmp 0];\n-\tset output [lindex $tmp 1];\n+\tset status [lindex $tmp 0]\n+\tset output [lindex $tmp 1]\n \tregexp \" version \\[^\\n\\r\\]*\" $output version\n \tif { $status == 0 && [info exists version] } then {\n \t    if [is_remote host] {\n@@ -126,7 +126,7 @@ proc gfortran_init { args } {\n     global base_dir\n     global tmpdir\n     global libdir\n-    global gluefile wrap_flags;\n+    global gluefile wrap_flags\n     global objdir srcdir\n     global ALWAYS_GFORTRANFLAGS\n     global TOOL_EXECUTABLE TOOL_OPTIONS\n@@ -139,7 +139,7 @@ proc gfortran_init { args } {\n \n     if ![info exists GFORTRAN_UNDER_TEST] then {\n \tif [info exists TOOL_EXECUTABLE] {\n-\t    set GFORTRAN_UNDER_TEST $TOOL_EXECUTABLE;\n+\t    set GFORTRAN_UNDER_TEST $TOOL_EXECUTABLE\n \t} else {\n \t    if { [is_remote host] || ! [info exists TESTING_IN_BUILD_TREE] } {\n \t\tset GFORTRAN_UNDER_TEST [transform gfortran]\n@@ -169,14 +169,14 @@ proc gfortran_init { args } {\n \n     if ![is_remote host] {\n \tif [info exists TOOL_OPTIONS] {\n-\t    lappend ALWAYS_GFORTRANFLAGS \"ldflags=[gfortran_link_flags [get_multilibs ${TOOL_OPTIONS}] ]\";\n+\t    lappend ALWAYS_GFORTRANFLAGS \"ldflags=[gfortran_link_flags [get_multilibs ${TOOL_OPTIONS}] ]\"\n \t} else {\n-\t    lappend ALWAYS_GFORTRANFLAGS \"ldflags=[gfortran_link_flags [get_multilibs] ]\";\n+\t    lappend ALWAYS_GFORTRANFLAGS \"ldflags=[gfortran_link_flags [get_multilibs] ]\"\n \t}\n     }\n \n     if [info exists TOOL_OPTIONS] {\n-\tlappend ALWAYS_GFORTRANFLAGS \"additional_flags=$TOOL_OPTIONS\";\n+\tlappend ALWAYS_GFORTRANFLAGS \"additional_flags=$TOOL_OPTIONS\"\n     }\n \n     verbose -log \"ALWAYS_GFORTRANFLAGS set to $ALWAYS_GFORTRANFLAGS\"\n@@ -189,19 +189,19 @@ proc gfortran_init { args } {\n #\n \n proc gfortran_target_compile { source dest type options } {\n-    global tmpdir;\n+    global tmpdir\n     global gluefile wrap_flags\n-    global ALWAYS_GFORTRANFLAGS;\n-    global GFORTRAN_UNDER_TEST;\n+    global ALWAYS_GFORTRANFLAGS\n+    global GFORTRAN_UNDER_TEST\n \n     if { [target_info needs_status_wrapper] != \"\" && [info exists gluefile] } {\n \tlappend options \"libs=${gluefile}\"\n \tlappend options \"ldflags=${wrap_flags}\"\n     }\n \n-    lappend options \"compiler=$GFORTRAN_UNDER_TEST\";\n+    lappend options \"compiler=$GFORTRAN_UNDER_TEST\"\n \n-    set options [concat \"$ALWAYS_GFORTRANFLAGS\" $options];\n+    set options [concat \"$ALWAYS_GFORTRANFLAGS\" $options]\n \n     return [target_compile $source $dest $type $options]\n }"}, {"sha": "277386a13efd148bd9f283015f0fae275e1a7fb6", "filename": "gcc/testsuite/lib/mike-g++.exp", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11289ef979ef2243459f124d46cab4e6cf5eb0f0/gcc%2Ftestsuite%2Flib%2Fmike-g%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11289ef979ef2243459f124d46cab4e6cf5eb0f0/gcc%2Ftestsuite%2Flib%2Fmike-g%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fmike-g%2B%2B.exp?ref=11289ef979ef2243459f124d46cab4e6cf5eb0f0", "patch": "@@ -20,7 +20,7 @@\n # mike_cleanup -- remove any files that are created by the testcase\n #\n proc mike_cleanup { src_code output_file assembly_file } {\n-    remote_file build delete $output_file $assembly_file;\n+    remote_file build delete $output_file $assembly_file\n }\n \n #\n@@ -75,7 +75,7 @@ proc postbase  { src_code run groups args } {\n     }\n \n     if { [llength $args] > 0 } {\n-\tset comp_options [lindex $args 0];\n+\tset comp_options [lindex $args 0]\n     } else {\n \tset comp_options \"\"\n     }\n@@ -102,29 +102,29 @@ proc postbase  { src_code run groups args } {\n     case $actions {\n \tcompile\n \t{\n-\t    set compile_type \"assembly\";\n-\t    set output_file $assembly_file;\n+\t    set compile_type \"assembly\"\n+\t    set output_file $assembly_file\n \t}\n \tassemble\n \t{\n-\t    set compile_type \"object\";\n-\t    append output_file \".o\";\n+\t    set compile_type \"object\"\n+\t    append output_file \".o\"\n \t}\n \tlink\n \t{\n-\t    set compile_type \"executable\";\n-\t    append output_file \".exe\";\n+\t    set compile_type \"executable\"\n+\t    append output_file \".exe\"\n \t}\n \trun\n \t{\n-\t    set compile_type \"executable\";\n-\t    append output_file \".exe\";\n-\t    set run yes;\n+\t    set compile_type \"executable\"\n+\t    append output_file \".exe\"\n+\t    set run yes\n \t}\n \tdefault\n \t{\n-\t    set output_file \"\";\n-\t    set compile_type \"none\";\n+\t    set output_file \"\"\n+\t    set compile_type \"none\"\n \t}\n     }\n \n@@ -216,12 +216,12 @@ proc postbase  { src_code run groups args } {\n \t}\n \tif [string match $run yes] {\n \t    set result [g++_load $output_file]\n-\t    set status [lindex $result 0];\n-\t    set output [lindex $result 1];\n+\t    set status [lindex $result 0]\n+\t    set output [lindex $result 1]\n \n \t    if { $status == -1 } {\n-\t\tmike_cleanup $src_code $output_file $assembly_file;\n-\t\treturn;\n+\t\tmike_cleanup $src_code $output_file $assembly_file\n+\t\treturn\n \t    }\n \t    if { $verbose > 1 } {\n \t\tsend_user \"Checking:\\n$program_output\\nto see if it matches:\\n$output\\n\\n\""}, {"sha": "1f2b3bd5155967e720eee34bead4dc4369289982", "filename": "gcc/testsuite/lib/mike-gcc.exp", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11289ef979ef2243459f124d46cab4e6cf5eb0f0/gcc%2Ftestsuite%2Flib%2Fmike-gcc.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11289ef979ef2243459f124d46cab4e6cf5eb0f0/gcc%2Ftestsuite%2Flib%2Fmike-gcc.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fmike-gcc.exp?ref=11289ef979ef2243459f124d46cab4e6cf5eb0f0", "patch": "@@ -20,7 +20,7 @@\n # mike_cleanup -- remove any files that are created by the testcase\n #\n proc mike_cleanup { src_code output_file assembly_file } {\n-    remote_file build delete $output_file $assembly_file;\n+    remote_file build delete $output_file $assembly_file\n }\n \n #\n@@ -79,7 +79,7 @@ proc postbase  { src_code run groups args } {\n     }\n \n     if { [llength $args] > 0 } {\n-\tset comp_options [lindex $args 0];\n+\tset comp_options [lindex $args 0]\n     } else {\n \tset comp_options \"\"\n     }\n@@ -106,29 +106,29 @@ proc postbase  { src_code run groups args } {\n     case $actions {\n \tcompile\n \t{\n-\t    set compile_type \"assembly\";\n-\t    set output_file $assembly_file;\n+\t    set compile_type \"assembly\"\n+\t    set output_file $assembly_file\n \t}\n \tassemble\n \t{\n-\t    set compile_type \"object\";\n-\t    append output_file \".o\";\n+\t    set compile_type \"object\"\n+\t    append output_file \".o\"\n \t}\n \tlink\n \t{\n-\t    set compile_type \"executable\";\n-\t    append output_file \".exe\";\n+\t    set compile_type \"executable\"\n+\t    append output_file \".exe\"\n \t}\n \trun\n \t{\n-\t    set compile_type \"executable\";\n-\t    append output_file \".exe\";\n-\t    set run yes;\n+\t    set compile_type \"executable\"\n+\t    append output_file \".exe\"\n+\t    set run yes\n \t}\n \tdefault\n \t{\n-\t    set output_file \"\";\n-\t    set compile_type \"none\";\n+\t    set output_file \"\"\n+\t    set compile_type \"none\"\n \t}\n     }\n \n@@ -140,7 +140,7 @@ proc postbase  { src_code run groups args } {\n \tlappend options \"additional_flags=$comp_options\"\n     }\n \n-    set comp_output [gcc_target_compile $src_file $output_file $compile_type $options];\n+    set comp_output [gcc_target_compile $src_file $output_file $compile_type $options]\n \n     set pass no\n \n@@ -215,11 +215,11 @@ proc postbase  { src_code run groups args } {\n \t}\n \tif [string match $run yes] {\n \t    set result [gcc_load $output_file]\n-\t    set status [lindex $result 0];\n-\t    set output [lindex $result 1];\n+\t    set status [lindex $result 0]\n+\t    set output [lindex $result 1]\n \t    if { $status == -1 } {\n-\t\tmike_cleanup $src_code $output_file $assembly_file;\n-\t\treturn;\n+\t\tmike_cleanup $src_code $output_file $assembly_file\n+\t\treturn\n \t    }\n \t    if { $verbose > 1 } {\n \t\tsend_user \"Checking:\\n$program_output\\nto see if it matches:\\n$output\\n\\n\""}, {"sha": "648cb1fba0d4502bb693e137f880f8c784a072b5", "filename": "gcc/testsuite/lib/objc-torture.exp", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11289ef979ef2243459f124d46cab4e6cf5eb0f0/gcc%2Ftestsuite%2Flib%2Fobjc-torture.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11289ef979ef2243459f124d46cab4e6cf5eb0f0/gcc%2Ftestsuite%2Flib%2Fobjc-torture.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fobjc-torture.exp?ref=11289ef979ef2243459f124d46cab4e6cf5eb0f0", "patch": "@@ -80,7 +80,7 @@ proc objc-torture-compile { src option } {\n     set options \"\"\n     lappend options \"additional_flags=-w $option\"\n \n-    set comp_output [objc_target_compile \"$src\" \"$output\" object $options];\n+    set comp_output [objc_target_compile \"$src\" \"$output\" object $options]\n     objc_check_compile $testcase $option $output $comp_output\n     remote_file build delete $output\n }\n@@ -98,9 +98,9 @@ proc objc-torture-execute { src args } {\n     global tmpdir tool srcdir output compiler_conditional_xfail_data\n \n     if { [llength $args] > 0 } {\n-\tset additional_flags [lindex $args 0];\n+\tset additional_flags [lindex $args 0]\n     } else {\n-\tset additional_flags \"\";\n+\tset additional_flags \"\"\n     }\n     # Check for alternate driver.\n     if [file exists [file rootname $src].x] {\n@@ -132,14 +132,14 @@ proc objc-torture-execute { src args } {\n \tset testcase \"[file tail [file dirname $src]]/[file tail $src]\"\n     }\n \n-    set count 0;\n-    set oldstatus \"foo\";\n+    set count 0\n+    set oldstatus \"foo\"\n     foreach option $option_list {\n \tif { $count > 0 } {\n-\t    set oldexec $execname;\n+\t    set oldexec $execname\n \t}\n-\tset execname \"${executable}${count}\";\n-\tincr count;\n+\tset execname \"${executable}${count}\"\n+\tincr count\n \n \t# torture_{compile,execute}_xfail are set by the .x script\n \t# (if present)\n@@ -153,15 +153,15 @@ proc objc-torture-execute { src args } {\n             set ignore_me [eval $torture_eval_before_compile]\n \t}\n \n-\tremote_file build delete $execname;\n+\tremote_file build delete $execname\n \tverbose \"Testing $testcase, $option\" 1\n \n \tset options \"\"\n \tlappend options \"additional_flags=-w $option\"\n \tif { $additional_flags != \"\" } {\n-\t    lappend options \"additional_flags=$additional_flags\";\n+\t    lappend options \"additional_flags=$additional_flags\"\n \t}\n-\tset comp_output [objc_target_compile \"$src\" \"${execname}\" executable $options];\n+\tset comp_output [objc_target_compile \"$src\" \"${execname}\" executable $options]\n \n \tif ![objc_check_compile \"$testcase compilation\" $option $execname $comp_output] {\n \t    unresolved \"$testcase execution, $option\"\n@@ -200,26 +200,26 @@ proc objc-torture-execute { src args } {\n \t# Do not do this for native testing since the cost to load/execute\n \t# the test is fairly small and the comparison step actually slows\n \t# the entire process down because it usually does not \"hit\".\n-\tset skip 0;\n+\tset skip 0\n \tif { ![isnative] && [info exists oldexec] } {\n \t    if { [remote_file build cmp $oldexec $execname] == 0 } {\n-\t\tset skip 1;\n+\t\tset skip 1\n \t    }\n \t}\n \tif { $skip == 0 } {\n \t    set result [objc_load \"$execname\" \"\" \"\"]\n-\t    set status [lindex $result 0];\n-\t    set output [lindex $result 1];\n+\t    set status [lindex $result 0]\n+\t    set output [lindex $result 1]\n \t}\n         if { $oldstatus == \"pass\" } {\n-\t    remote_file build delete $oldexec;\n+\t    remote_file build delete $oldexec\n         }\n \t$status \"$testcase execution, $option\"\n-\tset oldstatus $status;\n+\tset oldstatus $status\n     }\n     if [info exists status] {\n \tif { $status == \"pass\" } {\n-\t    remote_file build delete $execname;\n+\t    remote_file build delete $execname\n \t}\n     }\n }\n@@ -253,9 +253,9 @@ proc search_for { file pattern } {\n proc objc-torture { args } {\n     global srcdir subdir compiler_conditional_xfail_data\n \n-    set src [lindex $args 0];\n+    set src [lindex $args 0]\n     if { [llength $args] > 1 } {\n-\tset options [lindex $args 1];\n+\tset options [lindex $args 1]\n     } else {\n \tset options \"\"\n     }"}, {"sha": "d016a379bb7d4e1cd5045ad7d3a63997692e3847", "filename": "gcc/testsuite/lib/objc.exp", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11289ef979ef2243459f124d46cab4e6cf5eb0f0/gcc%2Ftestsuite%2Flib%2Fobjc.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11289ef979ef2243459f124d46cab4e6cf5eb0f0/gcc%2Ftestsuite%2Flib%2Fobjc.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fobjc.exp?ref=11289ef979ef2243459f124d46cab4e6cf5eb0f0", "patch": "@@ -41,22 +41,22 @@ load_lib target-libpath.exp\n proc default_objc_version { } {\n     global OBJC_UNDER_TEST\n \n-    objc_init;\n+    objc_init\n \n     # ignore any arguments after the command\n     set compiler [lindex $OBJC_UNDER_TEST 0]\n \n     if ![is_remote host] {\n-\tset compiler_name [which $compiler];\n+\tset compiler_name [which $compiler]\n     } else {\n-\tset compiler_name $compiler;\n+\tset compiler_name $compiler\n     }\n \n     # verify that the compiler exists\n     if { $compiler_name != 0 } then {\n \tset tmp [remote_exec host \"$compiler -v\"]\n-\tset status [lindex $tmp 0];\n-\tset output [lindex $tmp 1];\n+\tset status [lindex $tmp 0]\n+\tset output [lindex $tmp 1]\n \tregexp \" version \\[^\\n\\r\\]*\" $output version\n \tif { $status == 0 && [info exists version] } then {\n \t    clone_output \"$compiler_name $version\\n\"\n@@ -73,7 +73,7 @@ proc default_objc_version { } {\n # Call objc_version. We do it this way so we can override it if needed.\n #\n proc objc_version { } {\n-    default_objc_version;\n+    default_objc_version\n }\n \n #\n@@ -103,7 +103,7 @@ proc objc_init { args } {\n \n     if ![info exists OBJC_UNDER_TEST] then {\n \tif [info exists TOOL_EXECUTABLE] {\n-\t    set OBJC_UNDER_TEST $TOOL_EXECUTABLE;\n+\t    set OBJC_UNDER_TEST $TOOL_EXECUTABLE\n \t} else {\n \t    set OBJC_UNDER_TEST [find_gcc]\n \t}\n@@ -133,9 +133,9 @@ proc objc_init { args } {\n }\n \n proc objc_target_compile { source dest type options } {\n-    global rootme;\n-    global tmpdir;\n-    global gluefile wrap_flags;\n+    global rootme\n+    global tmpdir\n+    global gluefile wrap_flags\n     global srcdir\n     global OBJC_UNDER_TEST\n     global TOOL_OPTIONS\n@@ -162,7 +162,7 @@ proc objc_target_compile { source dest type options } {\n     # TOOL_OPTIONS must come first, so that it doesn't override testcase\n     # specific options.\n     if [info exists TOOL_OPTIONS] {\n-\tset options [concat \"{additional_flags=$TOOL_OPTIONS}\" $options];\n+\tset options [concat \"{additional_flags=$TOOL_OPTIONS}\" $options]\n     }\n \n     # If we have built libobjc along with the compiler (which usually\n@@ -227,7 +227,7 @@ proc objc_fail { testcase cflags } {\n \n proc objc_finish { } {\n     # The testing harness apparently requires this.\n-    global errorInfo;\n+    global errorInfo\n \n     if [info exists errorInfo] then {\n \tunset errorInfo\n@@ -241,11 +241,11 @@ proc objc_finish { } {\n }\n \n proc objc_exit { } {\n-    global gluefile;\n+    global gluefile\n \n     if [info exists gluefile] {\n-\tfile_on_build delete $gluefile;\n-\tunset gluefile;\n+\tfile_on_build delete $gluefile\n+\tunset gluefile\n     }\n }\n     "}, {"sha": "8b74967c57df1f98efd14dd94da1bfdcde0ec062", "filename": "gcc/testsuite/lib/profopt.exp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11289ef979ef2243459f124d46cab4e6cf5eb0f0/gcc%2Ftestsuite%2Flib%2Fprofopt.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11289ef979ef2243459f124d46cab4e6cf5eb0f0/gcc%2Ftestsuite%2Flib%2Fprofopt.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fprofopt.exp?ref=11289ef979ef2243459f124d46cab4e6cf5eb0f0", "patch": "@@ -165,7 +165,7 @@ proc profopt-execute { src } {\n \tset options \"\"\n \tlappend options \"additional_flags=$option $profile_option\"\n \tset optstr \"$option $profile_option\"\n-\tset comp_output [${tool}_target_compile \"$src\" \"$execname1\" executable $options];\n+\tset comp_output [${tool}_target_compile \"$src\" \"$execname1\" executable $options]\n \tif ![${tool}_check_compile \"$testcase compilation\" $optstr $execname1 $comp_output] {\n  \t    unresolved \"$testcase execution,   $optstr\"\n  \t    unresolved \"$testcase compilation, $option $feedback_option\"\n@@ -204,7 +204,7 @@ proc profopt-execute { src } {\n \tset options \"\"\n \tlappend options \"additional_flags=$option $feedback_option\"\n \tset optstr \"$option $feedback_option\"\n-\tset comp_output [${tool}_target_compile \"$src\" \"$execname2\" \"executable\" $options];\n+\tset comp_output [${tool}_target_compile \"$src\" \"$execname2\" \"executable\" $options]\n \tif ![${tool}_check_compile \"$testcase compilation\" $optstr $execname2 $comp_output] {\n  \t    unresolved \"$testcase execution,   $optstr\"\n \t    continue\n@@ -243,7 +243,7 @@ proc profopt-execute { src } {\n \tset options \"\"\n \tlappend options \"additional_flags=$option\"\n \tset optstr \"$option\"\n-\tset comp_output [${tool}_target_compile \"$src\" \"$execname3\" \"executable\" $options];\n+\tset comp_output [${tool}_target_compile \"$src\" \"$execname3\" \"executable\" $options]\n \tif ![${tool}_check_compile \"$testcase compilation\" $optstr $execname3 $comp_output] {\n  \t    unresolved \"$testcase execution,   $optstr\"\n \t    unresolved \"$testcase perf check,  $optstr\""}, {"sha": "e8cf4630e16c53df67ff798c10fdabd7c61222f7", "filename": "gcc/testsuite/lib/target-libpath.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11289ef979ef2243459f124d46cab4e6cf5eb0f0/gcc%2Ftestsuite%2Flib%2Ftarget-libpath.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11289ef979ef2243459f124d46cab4e6cf5eb0f0/gcc%2Ftestsuite%2Flib%2Ftarget-libpath.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-libpath.exp?ref=11289ef979ef2243459f124d46cab4e6cf5eb0f0", "patch": "@@ -57,7 +57,7 @@ proc set_ld_library_path_env_vars { } {\n   }\n \n   if { $orig_environment_saved == 0 } {\n-    global env;\n+    global env\n \n     set orig_environment_saved 1\n "}, {"sha": "6328eb535f0f35d8c33c5ba1ae021454f703667a", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11289ef979ef2243459f124d46cab4e6cf5eb0f0/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11289ef979ef2243459f124d46cab4e6cf5eb0f0/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=11289ef979ef2243459f124d46cab4e6cf5eb0f0", "patch": "@@ -310,7 +310,7 @@ proc check_iconv_available { test_what } {\n \t# No error messages, everything is OK.\n \n \tset result [${tool}_load \"./$exe\" \"\" \"\"]\n-\tset status [lindex $result 0];\n+\tset status [lindex $result 0]\n \tremote_file build delete $exe\n \n \tverbose \"check_iconv_available status is <$status>\" 2"}, {"sha": "8ce830d4c80407983732a6d64461a980fecc3edb", "filename": "gcc/testsuite/lib/treelang.exp", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11289ef979ef2243459f124d46cab4e6cf5eb0f0/gcc%2Ftestsuite%2Flib%2Ftreelang.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11289ef979ef2243459f124d46cab4e6cf5eb0f0/gcc%2Ftestsuite%2Flib%2Ftreelang.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftreelang.exp?ref=11289ef979ef2243459f124d46cab4e6cf5eb0f0", "patch": "@@ -47,22 +47,22 @@ load_lib target-libpath.exp\n proc default_treelang_version { } {\n     global TREELANG_UNDER_TEST\n \n-    treelang_init;\n+    treelang_init\n \n     # ignore any arguments after the command\n     set compiler [lindex $TREELANG_UNDER_TEST 0]\n \n     if ![is_remote host] {\n-\tset compiler_name [which $compiler];\n+\tset compiler_name [which $compiler]\n     } else {\n-\tset compiler_name $compiler;\n+\tset compiler_name $compiler\n     }\n \n     # verify that the compiler exists\n     if { $compiler_name != 0 } then {\n \tset tmp [remote_exec host \"$compiler -v\"]\n-\tset status [lindex $tmp 0];\n-\tset output [lindex $tmp 1];\n+\tset status [lindex $tmp 0]\n+\tset output [lindex $tmp 1]\n \tregexp \" version \\[^\\n\\r\\]*\" $output version\n \tif { $status == 0 && [info exists version] } then {\n \t    clone_output \"$compiler_name $version\\n\"\n@@ -103,7 +103,7 @@ proc treelang_init { args } {\n \n     if ![info exists TREELANG_UNDER_TEST] then {\n \tif [info exists TOOL_EXECUTABLE] {\n-\t    set TREELANG_UNDER_TEST $TOOL_EXECUTABLE;\n+\t    set TREELANG_UNDER_TEST $TOOL_EXECUTABLE\n \t} else {\n \t    set TREELANG_UNDER_TEST [find_gcc]\n \t}\n@@ -133,9 +133,9 @@ proc treelang_init { args } {\n }\n \n proc treelang_target_compile { source dest type options } {\n-    global rootme;\n-    global tmpdir;\n-    global gluefile wrap_flags;\n+    global rootme\n+    global tmpdir\n+    global gluefile wrap_flags\n     global srcdir\n     global TREELANG_UNDER_TEST\n     global TOOL_OPTIONS\n@@ -153,7 +153,7 @@ proc treelang_target_compile { source dest type options } {\n     # TOOL_OPTIONS must come first, so that it doesn't override testcase\n     # specific options.\n     if [info exists TOOL_OPTIONS] {\n-\tset options [concat \"{additional_flags=$TOOL_OPTIONS}\" $options];\n+\tset options [concat \"{additional_flags=$TOOL_OPTIONS}\" $options]\n     }\n \n     # If we have built libtreelang along with the compiler (which usually\n@@ -197,7 +197,7 @@ proc treelang_fail { testcase cflags } {\n \n proc treelang_finish { } {\n     # The testing harness apparently requires this.\n-    global errorInfo;\n+    global errorInfo\n \n     if [info exists errorInfo] then {\n \tunset errorInfo\n@@ -211,11 +211,11 @@ proc treelang_finish { } {\n }\n \n proc treelang_exit { } {\n-    global gluefile;\n+    global gluefile\n \n     if [info exists gluefile] {\n-\tfile_on_build delete $gluefile;\n-\tunset gluefile;\n+\tfile_on_build delete $gluefile\n+\tunset gluefile\n     }\n }\n     "}, {"sha": "5c3ce2fd800f57c6d206b154b8931c9102622147", "filename": "gcc/testsuite/lib/wrapper.exp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11289ef979ef2243459f124d46cab4e6cf5eb0f0/gcc%2Ftestsuite%2Flib%2Fwrapper.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11289ef979ef2243459f124d46cab4e6cf5eb0f0/gcc%2Ftestsuite%2Flib%2Fwrapper.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fwrapper.exp?ref=11289ef979ef2243459f124d46cab4e6cf5eb0f0", "patch": "@@ -30,11 +30,11 @@ proc ${tool}_maybe_build_wrapper { filename } {\n \t# that gcc objects on may change, so just make sure -w is always\n \t# passed to turn off all warnings.\n \tset_currtarget_info wrap_compile_flags \"$saved_wrap_compile_flags -w\"\n-\tset result [build_wrapper $filename];\n+\tset result [build_wrapper $filename]\n \tset_currtarget_info wrap_compile_flags \"$saved_wrap_compile_flags\"\n \tif { $result != \"\" } {\n-\t    set gluefile [lindex $result 0];\n-\t    set wrap_flags [lindex $result 1];\n+\t    set gluefile [lindex $result 0]\n+\t    set wrap_flags [lindex $result 1]\n \t} else {\n \t    unset gluefile\n \t}"}]}