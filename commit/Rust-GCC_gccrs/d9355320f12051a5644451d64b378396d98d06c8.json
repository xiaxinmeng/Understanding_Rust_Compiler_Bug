{"sha": "d9355320f12051a5644451d64b378396d98d06c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDkzNTUzMjBmMTIwNTFhNTY0NDQ1MWQ2NGIzNzgzOTZkOThkMDZjOA==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2015-01-21T10:23:42Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2015-01-21T10:23:42Z"}, "message": "[ARM/AArch64][testsuite] Add vsli_n and vsri_n tests.\n\n2015-01-21  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\t* gcc.target/aarch64/advsimd-intrinsics/vsXi_n.inc: New file.\n\t* gcc.target/aarch64/advsimd-intrinsics/vsli_n.c: New file.\n\t* gcc.target/aarch64/advsimd-intrinsics/vsri_n.c: New file.\n\nFrom-SVN: r219934", "tree": {"sha": "920f24ac3700e95d9d2946d59f0825b144b9a59b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/920f24ac3700e95d9d2946d59f0825b144b9a59b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9355320f12051a5644451d64b378396d98d06c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9355320f12051a5644451d64b378396d98d06c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9355320f12051a5644451d64b378396d98d06c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9355320f12051a5644451d64b378396d98d06c8/comments", "author": null, "committer": null, "parents": [{"sha": "c18b73e1d0bc23607d56a417b4e907033136e0ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c18b73e1d0bc23607d56a417b4e907033136e0ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c18b73e1d0bc23607d56a417b4e907033136e0ad"}], "stats": {"total": 414, "additions": 414, "deletions": 0}, "files": [{"sha": "f76b1abb71c1b5b06fbcb74ff49bbf6c0d458aed", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9355320f12051a5644451d64b378396d98d06c8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9355320f12051a5644451d64b378396d98d06c8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d9355320f12051a5644451d64b378396d98d06c8", "patch": "@@ -1,3 +1,9 @@\n+2015-01-21  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vsXi_n.inc: New file.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vsli_n.c: New file.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vsri_n.c: New file.\n+\n 2015-01-21  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.target/aarch64/advsimd-intrinsics/vqdmlXl_n.inc: New file."}, {"sha": "32c0d86f9123e00ab55d2304abcfbd08f1892995", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vsXi_n.inc", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9355320f12051a5644451d64b378396d98d06c8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvsXi_n.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9355320f12051a5644451d64b378396d98d06c8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvsXi_n.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvsXi_n.inc?ref=d9355320f12051a5644451d64b378396d98d06c8", "patch": "@@ -0,0 +1,82 @@\n+#define FNNAME1(NAME) exec_ ## NAME ##_n\n+#define FNNAME(NAME) FNNAME1(NAME)\n+\n+void FNNAME (INSN_NAME) (void)\n+{\n+  /* vector_res = vsxi_n(vector, vector2, val),\n+     then store the result.  */\n+#define TEST_VSXI_N1(INSN, Q, T1, T2, W, N, V)\t\t\t\t\\\n+  VECT_VAR(vector_res, T1, W, N) =\t\t\t\t\t\\\n+    INSN##Q##_n_##T2##W(VECT_VAR(vector, T1, W, N),\t\t\t\\\n+\t\t\tVECT_VAR(vector2, T1, W, N),\t\t\t\\\n+\t\t\tV);\t\t\t\t\t\t\\\n+  vst1##Q##_##T2##W(VECT_VAR(result, T1, W, N), VECT_VAR(vector_res, T1, W, N))\n+\n+#define TEST_VSXI_N(INSN, Q, T1, T2, W, N, V)\t\\\n+  TEST_VSXI_N1(INSN, Q, T1, T2, W, N, V)\n+\n+  DECL_VARIABLE_ALL_VARIANTS(vector);\n+  DECL_VARIABLE_ALL_VARIANTS(vector2);\n+  DECL_VARIABLE_ALL_VARIANTS(vector_res);\n+\n+  clean_results ();\n+\n+  /* Initialize input \"vector\" from \"buffer\".  */\n+  TEST_MACRO_ALL_VARIANTS_2_5(VLOAD, vector, buffer);\n+\n+  /* Fill input vector2 with arbitrary values.  */\n+  VDUP(vector2, , int, s, 8, 8, 2);\n+  VDUP(vector2, , int, s, 16, 4, -4);\n+  VDUP(vector2, , int, s, 32, 2, 3);\n+  VDUP(vector2, , int, s, 64, 1, 100);\n+  VDUP(vector2, , uint, u, 8, 8, 20);\n+  VDUP(vector2, , uint, u, 16, 4, 30);\n+  VDUP(vector2, , uint, u, 32, 2, 40);\n+  VDUP(vector2, , uint, u, 64, 1, 2);\n+  VDUP(vector2, , poly, p, 8, 8, 20);\n+  VDUP(vector2, , poly, p, 16, 4, 30);\n+  VDUP(vector2, q, int, s, 8, 16, -10);\n+  VDUP(vector2, q, int, s, 16, 8, -20);\n+  VDUP(vector2, q, int, s, 32, 4, -30);\n+  VDUP(vector2, q, int, s, 64, 2, 24);\n+  VDUP(vector2, q, uint, u, 8, 16, 12);\n+  VDUP(vector2, q, uint, u, 16, 8, 3);\n+  VDUP(vector2, q, uint, u, 32, 4, 55);\n+  VDUP(vector2, q, uint, u, 64, 2, 3);\n+  VDUP(vector2, q, poly, p, 8, 16, 12);\n+  VDUP(vector2, q, poly, p, 16, 8, 3);\n+\n+  /* Choose shift amount arbitrarily.  */\n+  TEST_VSXI_N(INSN_NAME, , int, s, 8, 8, 4);\n+  TEST_VSXI_N(INSN_NAME, , int, s, 16, 4, 3);\n+  TEST_VSXI_N(INSN_NAME, , int, s, 32, 2, 1);\n+  TEST_VSXI_N(INSN_NAME, , int, s, 64, 1, 32);\n+  TEST_VSXI_N(INSN_NAME, , uint, u, 8, 8, 2);\n+  TEST_VSXI_N(INSN_NAME, , uint, u, 16, 4, 10);\n+  TEST_VSXI_N(INSN_NAME, , uint, u, 32, 2, 30);\n+  TEST_VSXI_N(INSN_NAME, , uint, u, 64, 1, 3);\n+  TEST_VSXI_N(INSN_NAME, , poly, p, 8, 8, 2);\n+  TEST_VSXI_N(INSN_NAME, , poly, p, 16, 4, 10);\n+  TEST_VSXI_N(INSN_NAME, q, int, s, 8, 16, 5);\n+  TEST_VSXI_N(INSN_NAME, q, int, s, 16, 8, 3);\n+  TEST_VSXI_N(INSN_NAME, q, int, s, 32, 4, 20);\n+  TEST_VSXI_N(INSN_NAME, q, int, s, 64, 2, 16);\n+  TEST_VSXI_N(INSN_NAME, q, uint, u, 8, 16, 3);\n+  TEST_VSXI_N(INSN_NAME, q, uint, u, 16, 8, 12);\n+  TEST_VSXI_N(INSN_NAME, q, uint, u, 32, 4, 23);\n+  TEST_VSXI_N(INSN_NAME, q, uint, u, 64, 2, 53);\n+  TEST_VSXI_N(INSN_NAME, q, poly, p, 8, 16, 3);\n+  TEST_VSXI_N(INSN_NAME, q, poly, p, 16, 8, 12);\n+\n+  CHECK_RESULTS (TEST_MSG, \"\");\n+\n+#ifdef EXTRA_TESTS\n+  EXTRA_TESTS();\n+#endif\n+}\n+\n+int main (void)\n+{\n+  FNNAME (INSN_NAME) ();\n+  return 0;\n+}"}, {"sha": "eb06ce0a125ae5fd14122d36c5312ebf5b7d0b68", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vsli_n.c", "status": "added", "additions": 162, "deletions": 0, "changes": 162, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9355320f12051a5644451d64b378396d98d06c8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvsli_n.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9355320f12051a5644451d64b378396d98d06c8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvsli_n.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvsli_n.c?ref=d9355320f12051a5644451d64b378396d98d06c8", "patch": "@@ -0,0 +1,162 @@\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+#define INSN_NAME vsli\n+#define TEST_MSG \"VSLI_N\"\n+\n+/* Extra tests for functions requiring corner cases tests.  */\n+void vsli_extra(void);\n+#define EXTRA_TESTS vsli_extra\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,int,8,8) [] = { 0x20, 0x21, 0x22, 0x23,\n+\t\t\t\t       0x24, 0x25, 0x26, 0x27 };\n+VECT_VAR_DECL(expected,int,16,4) [] = { 0xffe0, 0xffe1, 0xffe2, 0xffe3 };\n+VECT_VAR_DECL(expected,int,32,2) [] = { 0x6, 0x7 };\n+VECT_VAR_DECL(expected,int,64,1) [] = { 0x64fffffff0 };\n+VECT_VAR_DECL(expected,uint,8,8) [] = { 0x50, 0x51, 0x52, 0x53,\n+\t\t\t\t\t0x50, 0x51, 0x52, 0x53 };\n+VECT_VAR_DECL(expected,uint,16,4) [] = { 0x7bf0, 0x7bf1, 0x7bf2, 0x7bf3 };\n+VECT_VAR_DECL(expected,uint,32,2) [] = { 0x3ffffff0, 0x3ffffff1 };\n+VECT_VAR_DECL(expected,uint,64,1) [] = { 0x10 };\n+VECT_VAR_DECL(expected,poly,8,8) [] = { 0x50, 0x51, 0x52, 0x53,\n+\t\t\t\t\t0x50, 0x51, 0x52, 0x53 };\n+VECT_VAR_DECL(expected,poly,16,4) [] = { 0x7bf0, 0x7bf1, 0x7bf2, 0x7bf3 };\n+VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected,int,8,16) [] = { 0xd0, 0xd1, 0xd2, 0xd3,\n+\t\t\t\t\t0xd4, 0xd5, 0xd6, 0xd7,\n+\t\t\t\t\t0xd8, 0xd9, 0xda, 0xdb,\n+\t\t\t\t\t0xdc, 0xdd, 0xde, 0xdf };\n+VECT_VAR_DECL(expected,int,16,8) [] = { 0xff60, 0xff61, 0xff62, 0xff63,\n+\t\t\t\t\t0xff64, 0xff65, 0xff66, 0xff67 };\n+VECT_VAR_DECL(expected,int,32,4) [] = { 0xfe2ffff0, 0xfe2ffff1,\n+\t\t\t\t\t0xfe2ffff2, 0xfe2ffff3 };\n+VECT_VAR_DECL(expected,int,64,2) [] = { 0x18fff0, 0x18fff1 };\n+VECT_VAR_DECL(expected,uint,8,16) [] = { 0x60, 0x61, 0x62, 0x63,\n+\t\t\t\t\t 0x64, 0x65, 0x66, 0x67,\n+\t\t\t\t\t 0x60, 0x61, 0x62, 0x63,\n+\t\t\t\t\t 0x64, 0x65, 0x66, 0x67 };\n+VECT_VAR_DECL(expected,uint,16,8) [] = { 0x3ff0, 0x3ff1, 0x3ff2, 0x3ff3,\n+\t\t\t\t\t 0x3ff4, 0x3ff5, 0x3ff6, 0x3ff7 };\n+VECT_VAR_DECL(expected,uint,32,4) [] = { 0x1bfffff0, 0x1bfffff1,\n+\t\t\t\t\t 0x1bfffff2, 0x1bfffff3 };\n+VECT_VAR_DECL(expected,uint,64,2) [] = { 0x7ffffffffffff0, 0x7ffffffffffff1 };\n+VECT_VAR_DECL(expected,poly,8,16) [] = { 0x60, 0x61, 0x62, 0x63,\n+\t\t\t\t\t 0x64, 0x65, 0x66, 0x67,\n+\t\t\t\t\t 0x60, 0x61, 0x62, 0x63,\n+\t\t\t\t\t 0x64, 0x65, 0x66, 0x67 };\n+VECT_VAR_DECL(expected,poly,16,8) [] = { 0x3ff0, 0x3ff1, 0x3ff2, 0x3ff3,\n+\t\t\t\t\t 0x3ff4, 0x3ff5, 0x3ff6, 0x3ff7 };\n+VECT_VAR_DECL(expected,hfloat,32,4) [] = { 0x33333333, 0x33333333,\n+\t\t\t\t\t   0x33333333, 0x33333333 };\n+\n+/* Expected results with max shift amount.  */\n+VECT_VAR_DECL(expected_max_shift,int,8,8) [] = { 0x70, 0x71, 0x72, 0x73,\n+\t\t\t\t\t\t 0x74, 0x75, 0x76, 0x77 };\n+VECT_VAR_DECL(expected_max_shift,int,16,4) [] = { 0x7ff0, 0x7ff1,\n+\t\t\t\t\t\t  0x7ff2, 0x7ff3 };\n+VECT_VAR_DECL(expected_max_shift,int,32,2) [] = { 0xfffffff0, 0xfffffff1 };\n+VECT_VAR_DECL(expected_max_shift,int,64,1) [] = { 0x7ffffffffffffff0 };\n+VECT_VAR_DECL(expected_max_shift,uint,8,8) [] = { 0x70, 0x71, 0x72, 0x73,\n+\t\t\t\t\t\t  0x74, 0x75, 0x76, 0x77 };\n+VECT_VAR_DECL(expected_max_shift,uint,16,4) [] = { 0x7ff0, 0x7ff1,\n+\t\t\t\t\t\t   0x7ff2, 0x7ff3 };\n+VECT_VAR_DECL(expected_max_shift,uint,32,2) [] = { 0x7ffffff0, 0x7ffffff1 };\n+VECT_VAR_DECL(expected_max_shift,uint,64,1) [] = { 0x7ffffffffffffff0 };\n+VECT_VAR_DECL(expected_max_shift,poly,8,8) [] = { 0x70, 0x71, 0x72, 0x73,\n+\t\t\t\t\t\t  0x74, 0x75, 0x76, 0x77 };\n+VECT_VAR_DECL(expected_max_shift,poly,16,4) [] = { 0x7ff0, 0x7ff1,\n+\t\t\t\t\t\t   0x7ff2, 0x7ff3 };\n+VECT_VAR_DECL(expected_max_shift,hfloat,32,2) [] = { 0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected_max_shift,int,8,16) [] = { 0x70, 0x71, 0x72, 0x73,\n+\t\t\t\t\t\t  0x74, 0x75, 0x76, 0x77,\n+\t\t\t\t\t\t  0x78, 0x79, 0x7a, 0x7b,\n+\t\t\t\t\t\t  0x7c, 0x7d, 0x7e, 0x7f };\n+VECT_VAR_DECL(expected_max_shift,int,16,8) [] = { 0x7ff0, 0x7ff1, 0x7ff2, 0x7ff3,\n+\t\t\t\t\t\t  0x7ff4, 0x7ff5, 0x7ff6, 0x7ff7 };\n+VECT_VAR_DECL(expected_max_shift,int,32,4) [] = { 0x7ffffff0, 0x7ffffff1,\n+\t\t\t\t\t\t  0x7ffffff2, 0x7ffffff3 };\n+VECT_VAR_DECL(expected_max_shift,int,64,2) [] = { 0x7ffffffffffffff0,\n+\t\t\t\t\t\t  0x7ffffffffffffff1 };\n+VECT_VAR_DECL(expected_max_shift,uint,8,16) [] = { 0x70, 0x71, 0x72, 0x73,\n+\t\t\t\t\t\t   0x74, 0x75, 0x76, 0x77,\n+\t\t\t\t\t\t   0x78, 0x79, 0x7a, 0x7b,\n+\t\t\t\t\t\t   0x7c, 0x7d, 0x7e, 0x7f };\n+VECT_VAR_DECL(expected_max_shift,uint,16,8) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3,\n+\t\t\t\t\t\t   0xfff4, 0xfff5, 0xfff6, 0xfff7 };\n+VECT_VAR_DECL(expected_max_shift,uint,32,4) [] = { 0xfffffff0, 0xfffffff1,\n+\t\t\t\t\t\t   0xfffffff2, 0xfffffff3 };\n+VECT_VAR_DECL(expected_max_shift,uint,64,2) [] = { 0xfffffffffffffff0,\n+\t\t\t\t\t\t   0xfffffffffffffff1 };\n+VECT_VAR_DECL(expected_max_shift,poly,8,16) [] = { 0x70, 0x71, 0x72, 0x73,\n+\t\t\t\t\t\t   0x74, 0x75, 0x76, 0x77,\n+\t\t\t\t\t\t   0x78, 0x79, 0x7a, 0x7b,\n+\t\t\t\t\t\t   0x7c, 0x7d, 0x7e, 0x7f };\n+VECT_VAR_DECL(expected_max_shift,poly,16,8) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3,\n+\t\t\t\t\t\t   0xfff4, 0xfff5, 0xfff6, 0xfff7 };\n+VECT_VAR_DECL(expected_max_shift,hfloat,32,4) [] = { 0x33333333, 0x33333333,\n+\t\t\t\t\t\t     0x33333333, 0x33333333 };\n+\n+#include \"vsXi_n.inc\"\n+\n+void vsli_extra(void)\n+{\n+  /* Test cases with maximum shift amount (this amount is different\n+     from vsri).  */\n+\n+  DECL_VARIABLE_ALL_VARIANTS(vector);\n+  DECL_VARIABLE_ALL_VARIANTS(vector2);\n+  DECL_VARIABLE_ALL_VARIANTS(vector_res);\n+\n+  clean_results ();\n+\n+  /* Initialize input \"vector\" from \"buffer\".  */\n+  TEST_MACRO_ALL_VARIANTS_2_5(VLOAD, vector, buffer);\n+\n+  /* Fill input vector2 with arbitrary values.  */\n+  VDUP(vector2, , int, s, 8, 8, 2);\n+  VDUP(vector2, , int, s, 16, 4, -4);\n+  VDUP(vector2, , int, s, 32, 2, 3);\n+  VDUP(vector2, , int, s, 64, 1, 100);\n+  VDUP(vector2, , uint, u, 8, 8, 20);\n+  VDUP(vector2, , uint, u, 16, 4, 30);\n+  VDUP(vector2, , uint, u, 32, 2, 40);\n+  VDUP(vector2, , uint, u, 64, 1, 2);\n+  VDUP(vector2, , poly, p, 8, 8, 20);\n+  VDUP(vector2, , poly, p, 16, 4, 30);\n+  VDUP(vector2, q, int, s, 8, 16, -10);\n+  VDUP(vector2, q, int, s, 16, 8, -20);\n+  VDUP(vector2, q, int, s, 32, 4, -30);\n+  VDUP(vector2, q, int, s, 64, 2, 24);\n+  VDUP(vector2, q, uint, u, 8, 16, 12);\n+  VDUP(vector2, q, uint, u, 16, 8, 3);\n+  VDUP(vector2, q, uint, u, 32, 4, 55);\n+  VDUP(vector2, q, uint, u, 64, 2, 3);\n+  VDUP(vector2, q, poly, p, 8, 16, 12);\n+  VDUP(vector2, q, poly, p, 16, 8, 3);\n+\n+  /* Use maximum allowed shift amount.  */\n+  TEST_VSXI_N(INSN_NAME, , int, s, 8, 8, 7);\n+  TEST_VSXI_N(INSN_NAME, , int, s, 16, 4, 15);\n+  TEST_VSXI_N(INSN_NAME, , int, s, 32, 2, 31);\n+  TEST_VSXI_N(INSN_NAME, , int, s, 64, 1, 63);\n+  TEST_VSXI_N(INSN_NAME, , uint, u, 8, 8, 7);\n+  TEST_VSXI_N(INSN_NAME, , uint, u, 16, 4, 15);\n+  TEST_VSXI_N(INSN_NAME, , uint, u, 32, 2, 31);\n+  TEST_VSXI_N(INSN_NAME, , uint, u, 64, 1, 63);\n+  TEST_VSXI_N(INSN_NAME, , poly, p, 8, 8, 7);\n+  TEST_VSXI_N(INSN_NAME, , poly, p, 16, 4, 15);\n+  TEST_VSXI_N(INSN_NAME, q, int, s, 8, 16, 7);\n+  TEST_VSXI_N(INSN_NAME, q, int, s, 16, 8, 15);\n+  TEST_VSXI_N(INSN_NAME, q, int, s, 32, 4, 31);\n+  TEST_VSXI_N(INSN_NAME, q, int, s, 64, 2, 63);\n+  TEST_VSXI_N(INSN_NAME, q, uint, u, 8, 16, 7);\n+  TEST_VSXI_N(INSN_NAME, q, uint, u, 16, 8, 15);\n+  TEST_VSXI_N(INSN_NAME, q, uint, u, 32, 4, 31);\n+  TEST_VSXI_N(INSN_NAME, q, uint, u, 64, 2, 63);\n+  TEST_VSXI_N(INSN_NAME, q, poly, p, 8, 16, 7);\n+  TEST_VSXI_N(INSN_NAME, q, poly, p, 16, 8, 15);\n+\n+  CHECK_RESULTS_NAMED (TEST_MSG, expected_max_shift, \"(max shift amount)\");\n+}"}, {"sha": "046b79f29407142996cdae8751079fd99d90107b", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vsri_n.c", "status": "added", "additions": 164, "deletions": 0, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9355320f12051a5644451d64b378396d98d06c8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvsri_n.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9355320f12051a5644451d64b378396d98d06c8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvsri_n.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvsri_n.c?ref=d9355320f12051a5644451d64b378396d98d06c8", "patch": "@@ -0,0 +1,164 @@\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+#define INSN_NAME vsri\n+#define TEST_MSG \"VSRI_N\"\n+\n+/* Extra tests for functions requiring corner cases tests.  */\n+void vsri_extra(void);\n+#define EXTRA_TESTS vsri_extra\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,int,8,8) [] = { 0xf0, 0xf0, 0xf0, 0xf0,\n+\t\t\t\t       0xf0, 0xf0, 0xf0, 0xf0 };\n+VECT_VAR_DECL(expected,int,16,4) [] = { 0xffff, 0xffff, 0xffff, 0xffff };\n+VECT_VAR_DECL(expected,int,32,2) [] = { 0x80000001, 0x80000001 };\n+VECT_VAR_DECL(expected,int,64,1) [] = { 0xffffffff00000000 };\n+VECT_VAR_DECL(expected,uint,8,8) [] = { 0xc5, 0xc5, 0xc5, 0xc5,\n+\t\t\t\t\t0xc5, 0xc5, 0xc5, 0xc5 };\n+VECT_VAR_DECL(expected,uint,16,4) [] = { 0xffc0, 0xffc0, 0xffc0, 0xffc0 };\n+VECT_VAR_DECL(expected,uint,32,2) [] = { 0xfffffff0, 0xfffffff0 };\n+VECT_VAR_DECL(expected,uint,64,1) [] = { 0xe000000000000000 };\n+VECT_VAR_DECL(expected,poly,8,8) [] = { 0xc5, 0xc5, 0xc5, 0xc5,\n+\t\t\t\t\t0xc5, 0xc5, 0xc5, 0xc5 };\n+VECT_VAR_DECL(expected,poly,16,4) [] = { 0xffc0, 0xffc0, 0xffc0, 0xffc0 };\n+VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected,int,8,16) [] = { 0xf7, 0xf7, 0xf7, 0xf7,\n+\t\t\t\t\t0xf7, 0xf7, 0xf7, 0xf7,\n+\t\t\t\t\t0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t0xff, 0xff, 0xff, 0xff };\n+VECT_VAR_DECL(expected,int,16,8) [] = { 0xfffd, 0xfffd, 0xfffd, 0xfffd,\n+\t\t\t\t\t0xfffd, 0xfffd, 0xfffd, 0xfffd };\n+VECT_VAR_DECL(expected,int,32,4) [] = { 0xffffffff, 0xffffffff,\n+\t\t\t\t\t0xffffffff, 0xffffffff };\n+VECT_VAR_DECL(expected,int,64,2) [] = { 0xffff000000000000,\n+\t\t\t\t\t0xffff000000000000 };\n+VECT_VAR_DECL(expected,uint,8,16) [] = { 0xe1, 0xe1, 0xe1, 0xe1,\n+\t\t\t\t\t 0xe1, 0xe1, 0xe1, 0xe1,\n+\t\t\t\t\t 0xe1, 0xe1, 0xe1, 0xe1,\n+\t\t\t\t\t 0xe1, 0xe1, 0xe1, 0xe1 };\n+VECT_VAR_DECL(expected,uint,16,8) [] = { 0xfff0, 0xfff0, 0xfff0, 0xfff0,\n+\t\t\t\t\t 0xfff0, 0xfff0, 0xfff0, 0xfff0 };\n+VECT_VAR_DECL(expected,uint,32,4) [] = { 0xfffffe00, 0xfffffe00,\n+\t\t\t\t\t 0xfffffe00, 0xfffffe00 };\n+VECT_VAR_DECL(expected,uint,64,2) [] = { 0xfffffffffffff800,\n+\t\t\t\t\t 0xfffffffffffff800 };\n+VECT_VAR_DECL(expected,poly,8,16) [] = { 0xe1, 0xe1, 0xe1, 0xe1,\n+\t\t\t\t\t 0xe1, 0xe1, 0xe1, 0xe1,\n+\t\t\t\t\t 0xe1, 0xe1, 0xe1, 0xe1,\n+\t\t\t\t\t 0xe1, 0xe1, 0xe1, 0xe1 };\n+VECT_VAR_DECL(expected,poly,16,8) [] = { 0xfff0, 0xfff0, 0xfff0, 0xfff0,\n+\t\t\t\t\t 0xfff0, 0xfff0, 0xfff0, 0xfff0 };\n+VECT_VAR_DECL(expected,hfloat,32,4) [] = { 0x33333333, 0x33333333,\n+\t\t\t\t\t   0x33333333, 0x33333333 };\n+\n+/* Expected results with max shift amount.  */\n+VECT_VAR_DECL(expected_max_shift,int,8,8) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n+\t\t\t\t\t\t 0xf4, 0xf5, 0xf6, 0xf7 };\n+VECT_VAR_DECL(expected_max_shift,int,16,4) [] = { 0xfff0, 0xfff1,\n+\t\t\t\t\t\t  0xfff2, 0xfff3 };\n+VECT_VAR_DECL(expected_max_shift,int,32,2) [] = { 0xfffffff0, 0xfffffff1 };\n+VECT_VAR_DECL(expected_max_shift,int,64,1) [] = { 0xfffffffffffffff0 };\n+VECT_VAR_DECL(expected_max_shift,uint,8,8) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n+\t\t\t\t\t\t  0xf4, 0xf5, 0xf6, 0xf7 };\n+VECT_VAR_DECL(expected_max_shift,uint,16,4) [] = { 0xfff0, 0xfff1,\n+\t\t\t\t\t\t   0xfff2, 0xfff3 };\n+VECT_VAR_DECL(expected_max_shift,uint,32,2) [] = { 0xfffffff0, 0xfffffff1 };\n+VECT_VAR_DECL(expected_max_shift,uint,64,1) [] = { 0xfffffffffffffff0 };\n+VECT_VAR_DECL(expected_max_shift,poly,8,8) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n+\t\t\t\t\t\t  0xf4, 0xf5, 0xf6, 0xf7 };\n+VECT_VAR_DECL(expected_max_shift,poly,16,4) [] = { 0xfff0, 0xfff1,\n+\t\t\t\t\t\t   0xfff2, 0xfff3 };\n+VECT_VAR_DECL(expected_max_shift,hfloat,32,2) [] = { 0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected_max_shift,int,8,16) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n+\t\t\t\t\t\t  0xf4, 0xf5, 0xf6, 0xf7,\n+\t\t\t\t\t\t  0xf8, 0xf9, 0xfa, 0xfb,\n+\t\t\t\t\t\t  0xfc, 0xfd, 0xfe, 0xff };\n+VECT_VAR_DECL(expected_max_shift,int,16,8) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3,\n+\t\t\t\t\t\t  0xfff4, 0xfff5, 0xfff6, 0xfff7 };\n+VECT_VAR_DECL(expected_max_shift,int,32,4) [] = { 0xfffffff0, 0xfffffff1,\n+\t\t\t\t\t\t  0xfffffff2, 0xfffffff3 };\n+VECT_VAR_DECL(expected_max_shift,int,64,2) [] = { 0xfffffffffffffff0,\n+\t\t\t\t\t\t  0xfffffffffffffff1 };\n+VECT_VAR_DECL(expected_max_shift,uint,8,16) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n+\t\t\t\t\t\t   0xf4, 0xf5, 0xf6, 0xf7,\n+\t\t\t\t\t\t   0xf8, 0xf9, 0xfa, 0xfb,\n+\t\t\t\t\t\t   0xfc, 0xfd, 0xfe, 0xff };\n+VECT_VAR_DECL(expected_max_shift,uint,16,8) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3,\n+\t\t\t\t\t\t   0xfff4, 0xfff5, 0xfff6, 0xfff7 };\n+VECT_VAR_DECL(expected_max_shift,uint,32,4) [] = { 0xfffffff0, 0xfffffff1,\n+\t\t\t\t\t\t   0xfffffff2, 0xfffffff3 };\n+VECT_VAR_DECL(expected_max_shift,uint,64,2) [] = { 0xfffffffffffffff0,\n+\t\t\t\t\t\t   0xfffffffffffffff1 };\n+VECT_VAR_DECL(expected_max_shift,poly,8,16) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n+\t\t\t\t\t\t   0xf4, 0xf5, 0xf6, 0xf7,\n+\t\t\t\t\t\t   0xf8, 0xf9, 0xfa, 0xfb,\n+\t\t\t\t\t\t   0xfc, 0xfd, 0xfe, 0xff };\n+VECT_VAR_DECL(expected_max_shift,poly,16,8) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3,\n+\t\t\t\t\t\t   0xfff4, 0xfff5, 0xfff6, 0xfff7 };\n+VECT_VAR_DECL(expected_max_shift,hfloat,32,4) [] = { 0x33333333, 0x33333333,\n+\t\t\t\t\t\t     0x33333333, 0x33333333 };\n+\n+#include \"vsXi_n.inc\"\n+\n+void vsri_extra(void)\n+{\n+  /* Test cases with maximum shift amount (this amount is different\n+     from vsli).  */\n+\n+  DECL_VARIABLE_ALL_VARIANTS(vector);\n+  DECL_VARIABLE_ALL_VARIANTS(vector2);\n+  DECL_VARIABLE_ALL_VARIANTS(vector_res);\n+\n+  clean_results ();\n+\n+  /* Initialize input \"vector\" from \"buffer\".  */\n+  TEST_MACRO_ALL_VARIANTS_2_5(VLOAD, vector, buffer);\n+\n+  /* Fill input vector2 with arbitrary values.  */\n+  VDUP(vector2, , int, s, 8, 8, 2);\n+  VDUP(vector2, , int, s, 16, 4, -4);\n+  VDUP(vector2, , int, s, 32, 2, 3);\n+  VDUP(vector2, , int, s, 64, 1, 100);\n+  VDUP(vector2, , uint, u, 8, 8, 20);\n+  VDUP(vector2, , uint, u, 16, 4, 30);\n+  VDUP(vector2, , uint, u, 32, 2, 40);\n+  VDUP(vector2, , uint, u, 64, 1, 2);\n+  VDUP(vector2, , poly, p, 8, 8, 20);\n+  VDUP(vector2, , poly, p, 16, 4, 30);\n+  VDUP(vector2, q, int, s, 8, 16, -10);\n+  VDUP(vector2, q, int, s, 16, 8, -20);\n+  VDUP(vector2, q, int, s, 32, 4, -30);\n+  VDUP(vector2, q, int, s, 64, 2, 24);\n+  VDUP(vector2, q, uint, u, 8, 16, 12);\n+  VDUP(vector2, q, uint, u, 16, 8, 3);\n+  VDUP(vector2, q, uint, u, 32, 4, 55);\n+  VDUP(vector2, q, uint, u, 64, 2, 3);\n+  VDUP(vector2, q, poly, p, 8, 16, 12);\n+  VDUP(vector2, q, poly, p, 16, 8, 3);\n+\n+  /* Use maximum allowed shift amount.  */\n+  TEST_VSXI_N(INSN_NAME, , int, s, 8, 8, 8);\n+  TEST_VSXI_N(INSN_NAME, , int, s, 16, 4, 16);\n+  TEST_VSXI_N(INSN_NAME, , int, s, 32, 2, 32);\n+  TEST_VSXI_N(INSN_NAME, , int, s, 64, 1, 64);\n+  TEST_VSXI_N(INSN_NAME, , uint, u, 8, 8, 8);\n+  TEST_VSXI_N(INSN_NAME, , uint, u, 16, 4, 16);\n+  TEST_VSXI_N(INSN_NAME, , uint, u, 32, 2, 32);\n+  TEST_VSXI_N(INSN_NAME, , uint, u, 64, 1, 64);\n+  TEST_VSXI_N(INSN_NAME, , poly, p, 8, 8, 8);\n+  TEST_VSXI_N(INSN_NAME, , poly, p, 16, 4, 16);\n+  TEST_VSXI_N(INSN_NAME, q, int, s, 8, 16, 8);\n+  TEST_VSXI_N(INSN_NAME, q, int, s, 16, 8, 16);\n+  TEST_VSXI_N(INSN_NAME, q, int, s, 32, 4, 32);\n+  TEST_VSXI_N(INSN_NAME, q, int, s, 64, 2, 64);\n+  TEST_VSXI_N(INSN_NAME, q, uint, u, 8, 16, 8);\n+  TEST_VSXI_N(INSN_NAME, q, uint, u, 16, 8, 16);\n+  TEST_VSXI_N(INSN_NAME, q, uint, u, 32, 4, 32);\n+  TEST_VSXI_N(INSN_NAME, q, uint, u, 64, 2, 64);\n+  TEST_VSXI_N(INSN_NAME, q, poly, p, 8, 16, 8);\n+  TEST_VSXI_N(INSN_NAME, q, poly, p, 16, 8, 16);\n+\n+  CHECK_RESULTS_NAMED (TEST_MSG, expected_max_shift, \"(max shift amount)\");\n+}"}]}