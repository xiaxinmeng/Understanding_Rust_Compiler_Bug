{"sha": "0ac198d3baa27f4c0ac3befd3a9bc802947ae29c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGFjMTk4ZDNiYWEyN2Y0YzBhYzNiZWZkM2E5YmM4MDI5NDdhZTI5Yw==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2013-04-25T12:44:25Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2013-04-25T12:44:25Z"}, "message": "[AArch64] Implement TARGET_GIMPLE_FOLD_BUILTIN for aarch64 backend.\n\ngcc/\n\t* config/aarch64/aarch64-builtins.c\n\t(aarch64_gimple_fold_builtin): New.\n\t* config/aarch64/aarch64-protos.h (aarch64_gimple_fold_builtin): New.\n\t* config/aarch64/aarch64-simd-builtins.def (addv): New.\n\t* config/aarch64/aarch64-simd.md (addpv4sf): New.\n\t(addvv4sf): Update.\n\t* config/aarch64/aarch64.c (TARGET_GIMPLE_FOLD_BUILTIN): Define.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/vaddv-intrinsic.c: New.\n\t* gcc.target/aarch64/vaddv-intrinsic-compile.c: Likewise.\n\t* gcc.target/aarch64/vaddv-intrinsic.x: Likewise.\n\n\n\nCo-Authored-By: Tejas Belagod <tejas.belagod@arm.com>\n\nFrom-SVN: r198304", "tree": {"sha": "b3b080181e9de0688b33fb32d707e28038ae38cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3b080181e9de0688b33fb32d707e28038ae38cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ac198d3baa27f4c0ac3befd3a9bc802947ae29c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ac198d3baa27f4c0ac3befd3a9bc802947ae29c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ac198d3baa27f4c0ac3befd3a9bc802947ae29c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ac198d3baa27f4c0ac3befd3a9bc802947ae29c/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "58cff58c8ea7177676ac869d564697a85e023249", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58cff58c8ea7177676ac869d564697a85e023249", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58cff58c8ea7177676ac869d564697a85e023249"}], "stats": {"total": 181, "additions": 176, "deletions": 5}, "files": [{"sha": "f42a2afaccce8961d1fff134863610dba6980968", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ac198d3baa27f4c0ac3befd3a9bc802947ae29c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ac198d3baa27f4c0ac3befd3a9bc802947ae29c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0ac198d3baa27f4c0ac3befd3a9bc802947ae29c", "patch": "@@ -1,3 +1,14 @@\n+2013-04-25  James Greenhalgh  <james.greenhalgh@arm.com>\n+\t    Tejas Belagod  <tejas.belagod@arm.com>\n+\n+\t* config/aarch64/aarch64-builtins.c\n+\t(aarch64_gimple_fold_builtin): New.\n+\t* config/aarch64/aarch64-protos.h (aarch64_gimple_fold_builtin): New.\n+\t* config/aarch64/aarch64-simd-builtins.def (addv): New.\n+\t* config/aarch64/aarch64-simd.md (addpv4sf): New.\n+\t(addvv4sf): Update.\n+\t* config/aarch64/aarch64.c (TARGET_GIMPLE_FOLD_BUILTIN): Define.\n+\n 2013-04-25  Naveen H.S  <Naveen.Hurugalawadi@caviumnetworks.com>\n \n \t* config/aarch64/aarch64.md "}, {"sha": "a786945f3c8751761063e7d3adcaa01dcfbaee67", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ac198d3baa27f4c0ac3befd3a9bc802947ae29c/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ac198d3baa27f4c0ac3befd3a9bc802947ae29c/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=0ac198d3baa27f4c0ac3befd3a9bc802947ae29c", "patch": "@@ -30,6 +30,7 @@\n #include \"langhooks.h\"\n #include \"diagnostic-core.h\"\n #include \"optabs.h\"\n+#include \"gimple.h\"\n \n enum aarch64_simd_builtin_type_mode\n {\n@@ -1254,6 +1255,54 @@ aarch64_builtin_vectorized_function (tree fndecl, tree type_out, tree type_in)\n \n   return NULL_TREE;\n }\n+\n+#undef VAR1\n+#define VAR1(T, N, MAP, A) \\\n+  case AARCH64_SIMD_BUILTIN_##N##A:\n+\n+bool\n+aarch64_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n+{\n+  bool changed = false;\n+  gimple stmt = gsi_stmt (*gsi);\n+  tree call = gimple_call_fn (stmt);\n+  tree fndecl;\n+  gimple new_stmt = NULL;\n+  if (call)\n+    {\n+      fndecl = gimple_call_fndecl (stmt);\n+      if (fndecl)\n+\t{\n+\t  int fcode = DECL_FUNCTION_CODE (fndecl);\n+\t  int nargs = gimple_call_num_args (stmt);\n+\t  tree *args = (nargs > 0\n+\t\t\t? gimple_call_arg_ptr (stmt, 0)\n+\t\t\t: &error_mark_node);\n+\n+\t  switch (fcode)\n+\t    {\n+\t      BUILTIN_VDQF (UNOP, addv, 0)\n+\t\tnew_stmt = gimple_build_assign_with_ops (\n+\t\t\t\t\t\tREDUC_PLUS_EXPR,\n+\t\t\t\t\t\tgimple_call_lhs (stmt),\n+\t\t\t\t\t\targs[0],\n+\t\t\t\t\t\tNULL_TREE);\n+\t\tbreak;\n+\t    default:\n+\t      break;\n+\t    }\n+\t}\n+    }\n+\n+  if (new_stmt)\n+    {\n+      gsi_replace (gsi, new_stmt, true);\n+      changed = true;\n+    }\n+\n+  return changed;\n+}\n+\n #undef AARCH64_CHECK_BUILTIN_MODE\n #undef AARCH64_FIND_FRINT_VARIANT\n #undef BUILTIN_DX"}, {"sha": "bf02b99b1a2b528d6b07f344ae1a07dd606ac11b", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ac198d3baa27f4c0ac3befd3a9bc802947ae29c/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ac198d3baa27f4c0ac3befd3a9bc802947ae29c/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=0ac198d3baa27f4c0ac3befd3a9bc802947ae29c", "patch": "@@ -140,6 +140,7 @@ bool aarch64_constant_address_p (rtx);\n bool aarch64_float_const_zero_rtx_p (rtx);\n bool aarch64_function_arg_regno_p (unsigned);\n bool aarch64_gen_movmemqi (rtx *);\n+bool aarch64_gimple_fold_builtin (gimple_stmt_iterator *);\n bool aarch64_is_extend_from_extract (enum machine_mode, rtx, rtx);\n bool aarch64_is_long_call_p (rtx);\n bool aarch64_label_mentioned_p (rtx);"}, {"sha": "41dd82fa4612f19d23a01d628b70a0bd17953e90", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ac198d3baa27f4c0ac3befd3a9bc802947ae29c/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ac198d3baa27f4c0ac3befd3a9bc802947ae29c/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=0ac198d3baa27f4c0ac3befd3a9bc802947ae29c", "patch": "@@ -238,6 +238,9 @@\n   BUILTIN_VDQF (BINOP, fmax, 0)\n   BUILTIN_VDQF (BINOP, fmin, 0)\n \n+  /* Implemented by aarch64_addv<mode>.  */\n+  BUILTIN_VDQF (UNOP, addv, 0)\n+\n   /* Implemented by <maxmin><mode>3.  */\n   BUILTIN_VDQ_BHSI (BINOP, smax, 3)\n   BUILTIN_VDQ_BHSI (BINOP, smin, 3)"}, {"sha": "e5506fce8a456777f64f26028a940568c15f9191", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ac198d3baa27f4c0ac3befd3a9bc802947ae29c/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ac198d3baa27f4c0ac3befd3a9bc802947ae29c/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=0ac198d3baa27f4c0ac3befd3a9bc802947ae29c", "patch": "@@ -1341,7 +1341,7 @@\n \n ;; FP 'across lanes' add.\n \n-(define_insn \"aarch64_addvv4sf\"\n+(define_insn \"aarch64_addpv4sf\"\n  [(set (match_operand:V4SF 0 \"register_operand\" \"=w\")\n        (unspec:V4SF [(match_operand:V4SF 1 \"register_operand\" \"w\")]\n \t\t    UNSPEC_FADDV))]\n@@ -1357,8 +1357,8 @@\n  \"TARGET_SIMD\"\n {\n   rtx tmp = gen_reg_rtx (V4SFmode);\n-  emit_insn (gen_aarch64_addvv4sf (tmp, operands[1]));\n-  emit_insn (gen_aarch64_addvv4sf (operands[0], tmp));\n+  emit_insn (gen_aarch64_addpv4sf (tmp, operands[1]));\n+  emit_insn (gen_aarch64_addpv4sf (operands[0], tmp));\n   DONE;\n })\n \n@@ -1368,8 +1368,18 @@\n  \"TARGET_SIMD\"\n {\n   rtx tmp = gen_reg_rtx (V4SFmode);\n-  emit_insn (gen_aarch64_addvv4sf (tmp, operands[1]));\n-  emit_insn (gen_aarch64_addvv4sf (operands[0], tmp));\n+  emit_insn (gen_aarch64_addpv4sf (tmp, operands[1]));\n+  emit_insn (gen_aarch64_addpv4sf (operands[0], tmp));\n+  DONE;\n+})\n+\n+(define_expand \"aarch64_addvv4sf\"\n+ [(set (match_operand:V4SF 0 \"register_operand\" \"=w\")\n+\t(unspec:V4SF [(match_operand:V4SF 1 \"register_operand\" \"w\")]\n+\t\t     UNSPEC_FADDV))]\n+ \"TARGET_SIMD\"\n+{\n+  emit_insn (gen_reduc_splus_v4sf (operands[0], operands[1]));\n   DONE;\n })\n "}, {"sha": "8c2c5765e04d8837b0fb0c7c46dfc8ff627bdbbe", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ac198d3baa27f4c0ac3befd3a9bc802947ae29c/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ac198d3baa27f4c0ac3befd3a9bc802947ae29c/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=0ac198d3baa27f4c0ac3befd3a9bc802947ae29c", "patch": "@@ -7895,6 +7895,9 @@ aarch64_vectorize_vec_perm_const_ok (enum machine_mode vmode,\n #undef TARGET_FRAME_POINTER_REQUIRED\n #define TARGET_FRAME_POINTER_REQUIRED aarch64_frame_pointer_required\n \n+#undef TARGET_GIMPLE_FOLD_BUILTIN\n+#define TARGET_GIMPLE_FOLD_BUILTIN aarch64_gimple_fold_builtin\n+\n #undef TARGET_GIMPLIFY_VA_ARG_EXPR\n #define TARGET_GIMPLIFY_VA_ARG_EXPR aarch64_gimplify_va_arg_expr\n "}, {"sha": "e7ba000a24aa4c01b88362ca7666e6631bfb89bb", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ac198d3baa27f4c0ac3befd3a9bc802947ae29c/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ac198d3baa27f4c0ac3befd3a9bc802947ae29c/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=0ac198d3baa27f4c0ac3befd3a9bc802947ae29c", "patch": "@@ -19731,6 +19731,27 @@ vaddd_u64 (uint64x1_t __a, uint64x1_t __b)\n   return __a + __b;\n }\n \n+__extension__ static __inline float32_t __attribute__ ((__always_inline__))\n+vaddv_f32 (float32x2_t __a)\n+{\n+  float32x2_t t = __builtin_aarch64_addvv2sf (__a);\n+  return vget_lane_f32 (t, 0);\n+}\n+\n+__extension__ static __inline float32_t __attribute__ ((__always_inline__))\n+vaddvq_f32 (float32x4_t __a)\n+{\n+  float32x4_t t = __builtin_aarch64_addvv4sf (__a);\n+  return vgetq_lane_f32 (t, 0);\n+}\n+\n+__extension__ static __inline float64_t __attribute__ ((__always_inline__))\n+vaddvq_f64 (float64x2_t __a)\n+{\n+  float64x2_t t = __builtin_aarch64_addvv2df (__a);\n+  return vgetq_lane_f64 (t, 0);\n+}\n+\n /* vceq */\n \n __extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))"}, {"sha": "32d986aa797fa265a8265287d5c89c1d9222e03d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ac198d3baa27f4c0ac3befd3a9bc802947ae29c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ac198d3baa27f4c0ac3befd3a9bc802947ae29c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0ac198d3baa27f4c0ac3befd3a9bc802947ae29c", "patch": "@@ -1,3 +1,10 @@\n+2013-04-25  James Greenhalgh  <james.greenhalgh@arm.com>\n+\t    Tejas Belagod  <tejas.belagod@arm.com>\n+\n+\t* gcc.target/aarch64/vaddv-intrinsic.c: New.\n+\t* gcc.target/aarch64/vaddv-intrinsic-compile.c: Likewise.\n+\t* gcc.target/aarch64/vaddv-intrinsic.x: Likewise.\n+\n 2013-04-25  Naveen H.S  <Naveen.Hurugalawadi@caviumnetworks.com>\n \n \t* gcc.target/aarch64/cmp.c: New."}, {"sha": "11fa9842032e7cebcb584dc19e55f211e51ea19a", "filename": "gcc/testsuite/gcc.target/aarch64/vaddv-intrinsic-compile.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ac198d3baa27f4c0ac3befd3a9bc802947ae29c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvaddv-intrinsic-compile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ac198d3baa27f4c0ac3befd3a9bc802947ae29c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvaddv-intrinsic-compile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvaddv-intrinsic-compile.c?ref=0ac198d3baa27f4c0ac3befd3a9bc802947ae29c", "patch": "@@ -0,0 +1,11 @@\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+#include \"arm_neon.h\"\n+\n+#include \"vaddv-intrinsic.x\"\n+\n+/* { dg-final { scan-assembler \"faddp\\\\ts\\[0-9\\]+\"} } */\n+/* { dg-final { scan-assembler-times \"faddp\\\\tv\\[0-9\\]+\\.4s\" 2} } */\n+/* { dg-final { scan-assembler \"faddp\\\\td\\[0-9\\]+\"} } */"}, {"sha": "f6e0829a3e30ada0d914201073c19a318ba840ec", "filename": "gcc/testsuite/gcc.target/aarch64/vaddv-intrinsic.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ac198d3baa27f4c0ac3befd3a9bc802947ae29c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvaddv-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ac198d3baa27f4c0ac3befd3a9bc802947ae29c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvaddv-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvaddv-intrinsic.c?ref=0ac198d3baa27f4c0ac3befd3a9bc802947ae29c", "patch": "@@ -0,0 +1,28 @@\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O3\" } */\n+\n+#include \"arm_neon.h\"\n+\n+extern void abort (void);\n+\n+#include \"vaddv-intrinsic.x\"\n+\n+int\n+main (void)\n+{\n+  const float32_t pool_v2sf[] = {4.0f, 9.0f};\n+  const float32_t pool_v4sf[] = {4.0f, 9.0f, 16.0f, 25.0f};\n+  const float64_t pool_v2df[] = {4.0, 9.0};\n+\n+  if (test_vaddv_v2sf (pool_v2sf) != 13.0f)\n+    abort ();\n+\n+  if (test_vaddv_v4sf (pool_v4sf) != 54.0f)\n+    abort ();\n+\n+  if (test_vaddv_v2df (pool_v2df) != 13.0)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "7bf38ca0ff00f8a80328ae1c2121d358858fe680", "filename": "gcc/testsuite/gcc.target/aarch64/vaddv-intrinsic.x", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ac198d3baa27f4c0ac3befd3a9bc802947ae29c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvaddv-intrinsic.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ac198d3baa27f4c0ac3befd3a9bc802947ae29c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvaddv-intrinsic.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvaddv-intrinsic.x?ref=0ac198d3baa27f4c0ac3befd3a9bc802947ae29c", "patch": "@@ -0,0 +1,27 @@\n+\n+float32_t\n+test_vaddv_v2sf (const float32_t *pool)\n+{\n+  float32x2_t val;\n+\n+  val = vld1_f32 (pool);\n+  return vaddv_f32 (val);\n+}\n+\n+float32_t\n+test_vaddv_v4sf (const float32_t *pool)\n+{\n+  float32x4_t val;\n+\n+  val = vld1q_f32 (pool);\n+  return vaddvq_f32 (val);\n+}\n+\n+float64_t\n+test_vaddv_v2df (const float64_t *pool)\n+{\n+  float64x2_t val;\n+\n+  val = vld1q_f64 (pool);\n+  return vaddvq_f64 (val);\n+}"}]}