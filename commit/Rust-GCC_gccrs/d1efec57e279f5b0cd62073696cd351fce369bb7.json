{"sha": "d1efec57e279f5b0cd62073696cd351fce369bb7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDFlZmVjNTdlMjc5ZjViMGNkNjIwNzM2OTZjZDM1MWZjZTM2OWJiNw==", "commit": {"author": {"name": "Vladimir N. Makarov", "email": "vmakarov@redhat.com", "date": "2021-02-18T22:49:26Z"}, "committer": {"name": "Vladimir N. Makarov", "email": "vmakarov@redhat.com", "date": "2021-02-18T22:51:03Z"}, "message": "[PR96264] LRA: Check output insn hard regs when updating available rematerialization after the insn\n\n Insn for rematerialization can contain a clobbered hard register.  We\ncan not move such insn through another insn setting up the same hard\nregister.  The patch adds such check.\n\ngcc/ChangeLog:\n\n\tPR rtl-optimization/96264\n\t* lra-remat.c (reg_overlap_for_remat_p): Check also output insn\n\thard regs.\n\ngcc/testsuite/ChangeLog:\n\n\tPR rtl-optimization/96264\n\t* gcc.target/powerpc/pr96264.c: New.", "tree": {"sha": "20415240b05c75ebf3b546f0e2c0b9c942a5431a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20415240b05c75ebf3b546f0e2c0b9c942a5431a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1efec57e279f5b0cd62073696cd351fce369bb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1efec57e279f5b0cd62073696cd351fce369bb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1efec57e279f5b0cd62073696cd351fce369bb7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1efec57e279f5b0cd62073696cd351fce369bb7/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6347f4a0904fce17eedf5c071be6f3c118680290", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6347f4a0904fce17eedf5c071be6f3c118680290", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6347f4a0904fce17eedf5c071be6f3c118680290"}], "stats": {"total": 41, "additions": 37, "deletions": 4}, "files": [{"sha": "d98373197cb97418e09b4ade09c1c13b8f00b6c4", "filename": "gcc/lra-remat.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1efec57e279f5b0cd62073696cd351fce369bb7/gcc%2Flra-remat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1efec57e279f5b0cd62073696cd351fce369bb7/gcc%2Flra-remat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-remat.c?ref=d1efec57e279f5b0cd62073696cd351fce369bb7", "patch": "@@ -651,7 +651,11 @@ calculate_local_reg_remat_bb_data (void)\n \n \f\n \n-/* Return true if REG overlaps an input operand of INSN.  */\n+/* Return true if REG overlaps an input operand or non-input hard register of\n+   INSN.  Basically the function returns false if we can move rematerialization\n+   candidate INSN through another insn with output REG or dead input REG (we\n+   consider it to avoid extending reg live range) with possible output pseudo\n+   renaming in INSN.  */\n static bool\n reg_overlap_for_remat_p (lra_insn_reg *reg, rtx_insn *insn)\n {\n@@ -675,10 +679,11 @@ reg_overlap_for_remat_p (lra_insn_reg *reg, rtx_insn *insn)\n \t reg2 != NULL;\n \t reg2 = reg2->next)\n       {\n-\tif (reg2->type != OP_IN)\n-\t  continue;\n-\tunsigned regno2 = reg2->regno;\n \tint nregs2;\n+\tunsigned regno2 = reg2->regno;\n+\n+\tif (reg2->type != OP_IN && regno2 >= FIRST_PSEUDO_REGISTER)\n+\t  continue;\n \n \tif (regno2 >= FIRST_PSEUDO_REGISTER && reg_renumber[regno2] >= 0)\n \t  regno2 = reg_renumber[regno2];"}, {"sha": "e89979b89988093956d811eb4311769ca656e0dd", "filename": "gcc/testsuite/gcc.target/powerpc/pr96264.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1efec57e279f5b0cd62073696cd351fce369bb7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr96264.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1efec57e279f5b0cd62073696cd351fce369bb7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr96264.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr96264.c?ref=d1efec57e279f5b0cd62073696cd351fce369bb7", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run } */\n+/* { dg-options \"-Os -fno-forward-propagate -fschedule-insns -fno-tree-ter -Wno-psabi\" } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+typedef unsigned char __attribute__ ((__vector_size__ (64))) v512u8;\n+typedef unsigned short u16;\n+typedef unsigned short __attribute__ ((__vector_size__ (64))) v512u16;\n+typedef unsigned __int128 __attribute__ ((__vector_size__ (64))) v512u128;\n+\n+v512u16 d;\n+v512u128 f;\n+\n+v512u8\n+foo (u16 e)\n+{\n+  v512u128 g = f - -e;\n+  d = (5 / (d + 1)) < e;\n+  return (v512u8) g;\n+}\n+\n+int\n+main (void)\n+{\n+  v512u8 x = foo (2);\n+  for (unsigned i = 0; i < sizeof (x); i++)\n+    if (x[i] != (i % 16 ? 0 : 2))\n+      __builtin_abort ();\n+}"}]}