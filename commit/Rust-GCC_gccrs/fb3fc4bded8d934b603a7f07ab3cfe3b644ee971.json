{"sha": "fb3fc4bded8d934b603a7f07ab3cfe3b644ee971", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmIzZmM0YmRlZDhkOTM0YjYwM2E3ZjA3YWIzY2ZlM2I2NDRlZTk3MQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-05-23T21:41:02Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-05-23T21:41:02Z"}, "message": "LWG 2996 add rvalue overloads for shared_ptr aliasing and casting\n\n\t* doc/xml/manual/intro.xml: Document LWG DR 2996 change.\n\t* doc/html/*: Regenerate.\n\t* include/bits/shared_ptr.h (shared_ptr(shared_ptr&&, T*)): Add\n\trvalue aliasing constructor.\n\t(static_pointer_cast, const_pointer, dynamic_pointer_cast)\n\t(reinterpret_pointer_cast): Add overloads taking rvalues.\n\t* include/bits/shared_ptr_base.h (__shared_ptr(__shared_ptr&&, T*)):\n\tAdd rvalue aliasing constructor.\n\t* testsuite/20_util/shared_ptr/casts/1.cc: Change \"compile\" test to\n\t\"run\" and check return values as well as types.\n\t* testsuite/20_util/shared_ptr/casts/reinterpret.cc: Likewise.\n\t* testsuite/20_util/shared_ptr/casts/rval.cc: New test.\n\t* testsuite/20_util/shared_ptr/cons/alias-rval.cc: New test.\n\t* testsuite/20_util/shared_ptr/cons/alias.cc: Remove unused return\n\tvalues.\n\nFrom-SVN: r271583", "tree": {"sha": "67451d2c9a410bc5b50675eb33d8405ddc6aa134", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67451d2c9a410bc5b50675eb33d8405ddc6aa134"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb3fc4bded8d934b603a7f07ab3cfe3b644ee971", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb3fc4bded8d934b603a7f07ab3cfe3b644ee971", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb3fc4bded8d934b603a7f07ab3cfe3b644ee971", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb3fc4bded8d934b603a7f07ab3cfe3b644ee971/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a0af7e3fb425ae2c0e044d044feb81ef493ce2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a0af7e3fb425ae2c0e044d044feb81ef493ce2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a0af7e3fb425ae2c0e044d044feb81ef493ce2c"}], "stats": {"total": 445, "additions": 416, "deletions": 29}, "files": [{"sha": "48b519e9cd0efcf6cbaae9332c080eeaf39fdc64", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb3fc4bded8d934b603a7f07ab3cfe3b644ee971/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb3fc4bded8d934b603a7f07ab3cfe3b644ee971/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fb3fc4bded8d934b603a7f07ab3cfe3b644ee971", "patch": "@@ -1,5 +1,21 @@\n 2019-05-23  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* doc/xml/manual/intro.xml: Document LWG DR 2996 change.\n+\t* doc/html/*: Regenerate.\n+\t* include/bits/shared_ptr.h (shared_ptr(shared_ptr&&, T*)): Add\n+\trvalue aliasing constructor.\n+\t(static_pointer_cast, const_pointer, dynamic_pointer_cast)\n+\t(reinterpret_pointer_cast): Add overloads taking rvalues.\n+\t* include/bits/shared_ptr_base.h (__shared_ptr(__shared_ptr&&, T*)):\n+\tAdd rvalue aliasing constructor.\n+\t* testsuite/20_util/shared_ptr/casts/1.cc: Change \"compile\" test to\n+\t\"run\" and check return values as well as types.\n+\t* testsuite/20_util/shared_ptr/casts/reinterpret.cc: Likewise.\n+\t* testsuite/20_util/shared_ptr/casts/rval.cc: New test.\n+\t* testsuite/20_util/shared_ptr/cons/alias-rval.cc: New test.\n+\t* testsuite/20_util/shared_ptr/cons/alias.cc: Remove unused return\n+\tvalues.\n+\n \t* doc/xml/manual/evolution.xml: Document LWG DR 2921 change.\n \t* doc/xml/manual/intro.xml: Likewise.\n \t* include/std/future (__create_task_state): Add default arguments"}, {"sha": "345c58802a4909d045b1d34ebd6903447f9ca395", "filename": "libstdc++-v3/doc/html/manual/api.html", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb3fc4bded8d934b603a7f07ab3cfe3b644ee971/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fapi.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb3fc4bded8d934b603a7f07ab3cfe3b644ee971/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fapi.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fapi.html?ref=fb3fc4bded8d934b603a7f07ab3cfe3b644ee971", "patch": "@@ -393,4 +393,7 @@\n   <code class=\"filename\">&lt;experimental/timer&gt;</code>.\n </p></div><div class=\"section\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"api.rel_101\"></a><code class=\"constant\">10</code></h3></div></div></div><p> Deprecated features removed:\n </p><div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \"><li class=\"listitem\"> Profile Mode </li><li class=\"listitem\"><code class=\"classname\">__gnu_cxx::array_allocator</code></li></ul></div><p>\n+</p><p>\n+  The <code class=\"classname\">std::packaged_task</code> constructors taking\n+  an allocator argument are only defined for C++11 and C++14.\n </p></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"abi.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"appendix_porting.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"backwards.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">ABI Policy and Guidelines\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../index.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Backwards Compatibility</td></tr></table></div></body></html>\n\\ No newline at end of file"}, {"sha": "db30048203967052b80d668d5633a3554abc6115", "filename": "libstdc++-v3/doc/html/manual/bugs.html", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb3fc4bded8d934b603a7f07ab3cfe3b644ee971/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbugs.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb3fc4bded8d934b603a7f07ab3cfe3b644ee971/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbugs.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbugs.html?ref=fb3fc4bded8d934b603a7f07ab3cfe3b644ee971", "patch": "@@ -565,11 +565,21 @@\n        <span class=\"emphasis\"><em><code class=\"code\">shared_ptr</code> constructor requirements for a deleter\n        </em></span>\n     </span></dt><dd><p>Use rvalues for deleters.\n+    </p></dd><dt><a id=\"manual.bugs.dr2921\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2921\" target=\"_top\">2921</a>:\n+       <span class=\"emphasis\"><em><code class=\"code\">packaged_task</code> and type-erased allocators\n+       </em></span>\n+    </span></dt><dd><p>For C++17 mode, remove the constructors taking\n+      an allocator argument.\n     </p></dd><dt><a id=\"manual.bugs.dr2942\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2942\" target=\"_top\">2942</a>:\n        <span class=\"emphasis\"><em>LWG 2873's resolution missed\n          <code class=\"code\">weak_ptr::owner_before</code>\n        </em></span>\n     </span></dt><dd><p>Add noexcept.\n+    </p></dd><dt><a id=\"manual.bugs.dr2996\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2996\" target=\"_top\">2996</a>:\n+       <span class=\"emphasis\"><em>Missing rvalue overloads for\n+         <code class=\"code\">shared_ptr</code> operations\n+       </em></span>\n+    </span></dt><dd><p>Add additional constructor and cast overloads.\n     </p></dd><dt><a id=\"manual.bugs.dr2993\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2993\" target=\"_top\">2993</a>:\n        <span class=\"emphasis\"><em><code class=\"code\">reference_wrapper&lt;T&gt;</code> conversion from <code class=\"code\">T&amp;&amp;</code>\n        </em></span>"}, {"sha": "4a5d25fa0d70cd2c66af32b1f5f32ee2ccbf0190", "filename": "libstdc++-v3/doc/xml/manual/intro.xml", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb3fc4bded8d934b603a7f07ab3cfe3b644ee971/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb3fc4bded8d934b603a7f07ab3cfe3b644ee971/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml?ref=fb3fc4bded8d934b603a7f07ab3cfe3b644ee971", "patch": "@@ -1237,6 +1237,14 @@ requirements of the license of GCC.\n     <listitem><para>Add noexcept.\n     </para></listitem></varlistentry>\n \n+    <varlistentry xml:id=\"manual.bugs.dr2996\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2996\">2996</link>:\n+       <emphasis>Missing rvalue overloads for\n+         <code>shared_ptr</code> operations\n+       </emphasis>\n+    </term>\n+    <listitem><para>Add additional constructor and cast overloads.\n+    </para></listitem></varlistentry>\n+\n     <varlistentry xml:id=\"manual.bugs.dr2993\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2993\">2993</link>:\n        <emphasis><code>reference_wrapper&lt;T&gt;</code> conversion from <code>T&amp;&amp;</code>\n        </emphasis>"}, {"sha": "41f6b126b3d1b6e842aa6668cd8294efcc7ed03d", "filename": "libstdc++-v3/include/bits/shared_ptr.h", "status": "modified", "additions": 84, "deletions": 9, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb3fc4bded8d934b603a7f07ab3cfe3b644ee971/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb3fc4bded8d934b603a7f07ab3cfe3b644ee971/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h?ref=fb3fc4bded8d934b603a7f07ab3cfe3b644ee971", "patch": "@@ -235,17 +235,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // Aliasing constructor\n \n       /**\n-       *  @brief  Constructs a %shared_ptr instance that stores @a __p\n-       *          and shares ownership with @a __r.\n-       *  @param  __r  A %shared_ptr.\n-       *  @param  __p  A pointer that will remain valid while @a *__r is valid.\n-       *  @post   get() == __p && use_count() == __r.use_count()\n+       *  @brief  Constructs a `shared_ptr` instance that stores `__p`\n+       *          and shares ownership with `__r`.\n+       *  @param  __r  A `shared_ptr`.\n+       *  @param  __p  A pointer that will remain valid while `*__r` is valid.\n+       *  @post   `get() == __p && use_count() == __r.use_count()`\n        *\n-       *  This can be used to construct a @c shared_ptr to a sub-object\n-       *  of an object managed by an existing @c shared_ptr.\n+       *  This can be used to construct a `shared_ptr` to a sub-object\n+       *  of an object managed by an existing `shared_ptr`. The complete\n+       *  object will remain valid while any `shared_ptr` owns it, even\n+       *  if they don't store a pointer to the complete object.\n        *\n        * @code\n-       * shared_ptr< pair<int,int> > pii(new pair<int,int>());\n+       * shared_ptr<pair<int,int>> pii(new pair<int,int>());\n        * shared_ptr<int> pi(pii, &pii->first);\n        * assert(pii.use_count() == 2);\n        * @endcode\n@@ -254,6 +256,33 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tshared_ptr(const shared_ptr<_Yp>& __r, element_type* __p) noexcept\n \t: __shared_ptr<_Tp>(__r, __p) { }\n \n+#if __cplusplus > 201703L\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 2996. Missing rvalue overloads for shared_ptr operations\n+      /**\n+       *  @brief  Constructs a `shared_ptr` instance that stores `__p`\n+       *          and shares ownership with `__r`.\n+       *  @param  __r  A `shared_ptr`.\n+       *  @param  __p  A pointer that will remain valid while `*__r` is valid.\n+       *  @post   `get() == __p && !__r.use_count() && !__r.get()`\n+       *\n+       *  This can be used to construct a `shared_ptr` to a sub-object\n+       *  of an object managed by an existing `shared_ptr`. The complete\n+       *  object will remain valid while any `shared_ptr` owns it, even\n+       *  if they don't store a pointer to the complete object.\n+       *\n+       * @code\n+       * shared_ptr<pair<int,int>> pii(new pair<int,int>());\n+       * shared_ptr<int> pi1(pii, &pii->first);\n+       * assert(pii.use_count() == 2);\n+       * shared_ptr<int> pi2(std::move(pii), &pii->second);\n+       * assert(pii.use_count() == 0);\n+       * @endcode\n+       */\n+      template<typename _Yp>\n+\tshared_ptr(shared_ptr<_Yp>&& __r, element_type* __p) noexcept\n+\t: __shared_ptr<_Tp>(std::move(__r), __p) { }\n+#endif\n       /**\n        *  @brief  If @a __r is empty, constructs an empty %shared_ptr;\n        *          otherwise construct a %shared_ptr that shares ownership\n@@ -568,7 +597,53 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       using _Sp = shared_ptr<_Tp>;\n       return _Sp(__r, reinterpret_cast<typename _Sp::element_type*>(__r.get()));\n     }\n-#endif\n+\n+#if __cplusplus > 201703L\n+  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+  // 2996. Missing rvalue overloads for shared_ptr operations\n+\n+  /// Convert type of `shared_ptr` rvalue, via `static_cast`\n+  template<typename _Tp, typename _Up>\n+    inline shared_ptr<_Tp>\n+    static_pointer_cast(shared_ptr<_Up>&& __r) noexcept\n+    {\n+      using _Sp = shared_ptr<_Tp>;\n+      return _Sp(std::move(__r),\n+\t\t static_cast<typename _Sp::element_type*>(__r.get()));\n+    }\n+\n+  /// Convert type of `shared_ptr` rvalue, via `const_cast`\n+  template<typename _Tp, typename _Up>\n+    inline shared_ptr<_Tp>\n+    const_pointer_cast(shared_ptr<_Up>&& __r) noexcept\n+    {\n+      using _Sp = shared_ptr<_Tp>;\n+      return _Sp(std::move(__r),\n+\t\t const_cast<typename _Sp::element_type*>(__r.get()));\n+    }\n+\n+  /// Convert type of `shared_ptr` rvalue, via `dynamic_cast`\n+  template<typename _Tp, typename _Up>\n+    inline shared_ptr<_Tp>\n+    dynamic_pointer_cast(shared_ptr<_Up>&& __r) noexcept\n+    {\n+      using _Sp = shared_ptr<_Tp>;\n+      if (auto* __p = dynamic_cast<typename _Sp::element_type*>(__r.get()))\n+\treturn _Sp(std::move(__r), __p);\n+      return _Sp();\n+    }\n+\n+  /// Convert type of `shared_ptr` rvalue, via `reinterpret_cast`\n+  template<typename _Tp, typename _Up>\n+    inline shared_ptr<_Tp>\n+    reinterpret_pointer_cast(shared_ptr<_Up>&& __r) noexcept\n+    {\n+      using _Sp = shared_ptr<_Tp>;\n+      return _Sp(std::move(__r),\n+\t\t reinterpret_cast<typename _Sp::element_type*>(__r.get()));\n+    }\n+#endif // C++20\n+#endif // C++17\n \n   // @}\n "}, {"sha": "4acec1cb2c5d467eec6dea94957ecdc183d6f0c1", "filename": "libstdc++-v3/include/bits/shared_ptr_base.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb3fc4bded8d934b603a7f07ab3cfe3b644ee971/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb3fc4bded8d934b603a7f07ab3cfe3b644ee971/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h?ref=fb3fc4bded8d934b603a7f07ab3cfe3b644ee971", "patch": "@@ -1158,12 +1158,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t: _M_ptr(0), _M_refcount(__p, std::move(__d), std::move(__a))\n \t{ }\n \n+      // Aliasing constructor\n       template<typename _Yp>\n \t__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,\n \t\t     element_type* __p) noexcept\n \t: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws\n \t{ }\n \n+      // Aliasing constructor\n+      template<typename _Yp>\n+\t__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r,\n+\t\t     element_type* __p) noexcept\n+\t: _M_ptr(__p), _M_refcount()\n+\t{\n+\t  _M_refcount._M_swap(__r._M_refcount);\n+\t  __r._M_ptr = 0;\n+\t}\n+\n       __shared_ptr(const __shared_ptr&) noexcept = default;\n       __shared_ptr& operator=(const __shared_ptr&) noexcept = default;\n       ~__shared_ptr() = default;"}, {"sha": "f2b8a268259b3a1c84873358e641fef3caae2e87", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/casts/1.cc", "status": "modified", "additions": 50, "deletions": 5, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb3fc4bded8d934b603a7f07ab3cfe3b644ee971/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcasts%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb3fc4bded8d934b603a7f07ab3cfe3b644ee971/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcasts%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcasts%2F1.cc?ref=fb3fc4bded8d934b603a7f07ab3cfe3b644ee971", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++11 } }\n+// { dg-do run { target c++11 } }\n \n // Copyright (C) 2006-2019 Free Software Foundation, Inc.\n //\n@@ -20,12 +20,14 @@\n // 20.6.6.2.10 shared_ptr casts [util.smartptr.shared.cast]\n \n #include <memory>\n+#include <testsuite_hooks.h>\n #include <testsuite_tr1.h>\n \n struct MyP { virtual ~MyP() { }; };\n struct MyDP : MyP { };\n \n-int main()\n+void\n+test01()\n {\n   using __gnu_test::check_ret_type;\n   using std::shared_ptr;\n@@ -37,7 +39,50 @@ int main()\n   shared_ptr<const int> spci;\n   shared_ptr<MyP> spa;\n \n-  check_ret_type<shared_ptr<void> >(static_pointer_cast<void>(spd));\n-  check_ret_type<shared_ptr<int> >(const_pointer_cast<int>(spci));\n-  check_ret_type<shared_ptr<MyDP> >(static_pointer_cast<MyDP>(spa));  \n+  check_ret_type<shared_ptr<void>>(static_pointer_cast<void>(spd));\n+  check_ret_type<shared_ptr<int>>(const_pointer_cast<int>(spci));\n+  check_ret_type<shared_ptr<MyDP>>(dynamic_pointer_cast<MyDP>(spa));\n+}\n+\n+void\n+test02()\n+{\n+  using std::shared_ptr;\n+  using std::static_pointer_cast;\n+  using std::const_pointer_cast;\n+  using std::dynamic_pointer_cast;\n+\n+  int* ptr = new int(1);\n+  shared_ptr<const void> pcv(ptr);\n+  auto pci = static_pointer_cast<const int>(pcv);\n+  VERIFY(pci.use_count() == 2);\n+  VERIFY(pcv.use_count() == 2);\n+  VERIFY(pci.get() == ptr);\n+  VERIFY(pcv.get() == ptr);\n+  auto pi = const_pointer_cast<int>(pci);\n+  VERIFY(pi.use_count() == 3);\n+  VERIFY(pcv.use_count() == 3);\n+  VERIFY(pi.get() == ptr);\n+  VERIFY(pci.get() == ptr);\n+\n+  MyP* pptr = new MyP;\n+  shared_ptr<MyP> pp(pptr);\n+  auto pdp = dynamic_pointer_cast<MyDP>(pp);\n+  VERIFY(pp.use_count() == 1);\n+  VERIFY(pdp.use_count() == 0);\n+  VERIFY(pdp.get() == nullptr);\n+  VERIFY(pp.get() == pptr);\n+  pptr = new MyDP;\n+  pp.reset(pptr);\n+  pdp = dynamic_pointer_cast<MyDP>(pp);\n+  VERIFY(pp.use_count() == 2);\n+  VERIFY(pdp.use_count() == 2);\n+  VERIFY(pdp.get() == pptr);\n+  VERIFY(pp.get() == pptr);\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n }"}, {"sha": "eae050fd95402e82c8dcaf2163b447fe513734f9", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/casts/reinterpret.cc", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb3fc4bded8d934b603a7f07ab3cfe3b644ee971/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcasts%2Freinterpret.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb3fc4bded8d934b603a7f07ab3cfe3b644ee971/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcasts%2Freinterpret.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcasts%2Freinterpret.cc?ref=fb3fc4bded8d934b603a7f07ab3cfe3b644ee971", "patch": "@@ -1,5 +1,5 @@\n // { dg-options \"-std=gnu++17\" }\n-// { dg-do compile { target c++17 } }\n+// { dg-do run { target c++17 } }\n \n // Copyright (C) 2016-2019 Free Software Foundation, Inc.\n //\n@@ -21,12 +21,14 @@\n // 20.11.2.2.9 shared_ptr casts [util.smartptr.shared.cast]\n \n #include <memory>\n+#include <testsuite_hooks.h>\n #include <testsuite_tr1.h>\n \n struct MyP { virtual ~MyP() { }; };\n struct MyDP : MyP { };\n \n-int main()\n+void\n+test01()\n {\n   using __gnu_test::check_ret_type;\n   using std::shared_ptr;\n@@ -36,7 +38,28 @@ int main()\n   shared_ptr<const int> spci;\n   shared_ptr<MyP> spa;\n \n-  check_ret_type<shared_ptr<void> >(reinterpret_pointer_cast<void>(spd));\n-  check_ret_type<shared_ptr<const short> >(reinterpret_pointer_cast<const short>(spci));\n-  check_ret_type<shared_ptr<MyDP> >(reinterpret_pointer_cast<MyDP>(spa));\n+  check_ret_type<shared_ptr<void>>(reinterpret_pointer_cast<void>(spd));\n+  check_ret_type<shared_ptr<const short>>(reinterpret_pointer_cast<const short>(spci));\n+  check_ret_type<shared_ptr<MyDP>>(reinterpret_pointer_cast<MyDP>(spa));\n+}\n+\n+void\n+test02()\n+{\n+  using std::shared_ptr;\n+  using std::reinterpret_pointer_cast;\n+\n+  int* ptr = new int(2);\n+  shared_ptr<int> pi(ptr);\n+  auto pl = reinterpret_pointer_cast<long>(pi);\n+  VERIFY(pi.use_count() == 2);\n+  VERIFY(pl.use_count() == 2);\n+  VERIFY(pi.get() == ptr);\n+  VERIFY(reinterpret_cast<int*>(pl.get()) == ptr);\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n }"}, {"sha": "6f102b21eaae5dafde766aa22fc650bc85b5ffa1", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/casts/rval.cc", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb3fc4bded8d934b603a7f07ab3cfe3b644ee971/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcasts%2Frval.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb3fc4bded8d934b603a7f07ab3cfe3b644ee971/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcasts%2Frval.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcasts%2Frval.cc?ref=fb3fc4bded8d934b603a7f07ab3cfe3b644ee971", "patch": "@@ -0,0 +1,101 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// shared_ptr casts [util.smartptr.shared.cast]\n+\n+#include <memory>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+struct MyP { virtual ~MyP() { }; };\n+struct MyDP : MyP { };\n+\n+void test01()\n+{\n+  using __gnu_test::check_ret_type;\n+  using std::shared_ptr;\n+  using std::static_pointer_cast;\n+  using std::const_pointer_cast;\n+  using std::dynamic_pointer_cast;\n+  using std::reinterpret_pointer_cast;\n+\n+  shared_ptr<double> spd;\n+  shared_ptr<const int> spci;\n+  shared_ptr<MyP> spa;\n+\n+  check_ret_type<shared_ptr<void>>(static_pointer_cast<void>(std::move(spd)));\n+  check_ret_type<shared_ptr<int>>(const_pointer_cast<int>(std::move(spci)));\n+  check_ret_type<shared_ptr<MyDP>>(dynamic_pointer_cast<MyDP>(std::move(spa)));\n+  check_ret_type<shared_ptr<void>>(reinterpret_pointer_cast<void>(std::move(spd)));\n+  check_ret_type<shared_ptr<const short>>(reinterpret_pointer_cast<const short>(std::move(spci)));\n+  check_ret_type<shared_ptr<MyDP>>(reinterpret_pointer_cast<MyDP>(std::move(spa)));\n+}\n+\n+void\n+test02()\n+{\n+  using std::shared_ptr;\n+  using std::static_pointer_cast;\n+  using std::const_pointer_cast;\n+  using std::dynamic_pointer_cast;\n+  using std::reinterpret_pointer_cast;\n+\n+  int* ptr = new int(1);\n+  shared_ptr<const void> pcv(ptr);\n+  auto pci = static_pointer_cast<const int>(std::move(pcv));\n+  VERIFY(pci.use_count() == 1);\n+  VERIFY(pcv.use_count() == 0);\n+  VERIFY(pci.get() == ptr);\n+  VERIFY(pcv.get() == nullptr);\n+  auto pi = const_pointer_cast<int>(std::move(pci));\n+  VERIFY(pi.use_count() == 1);\n+  VERIFY(pci.use_count() == 0);\n+  VERIFY(pi.get() == ptr);\n+  VERIFY(pci.get() == nullptr);\n+\n+  MyP* pptr = new MyP;\n+  shared_ptr<MyP> pp(pptr);\n+  auto pdp = dynamic_pointer_cast<MyDP>(std::move(pp));\n+  VERIFY(pdp.use_count() == 0);\n+  VERIFY(pp.use_count() == 1);\n+  VERIFY(pdp.get() == nullptr);\n+  VERIFY(pp.get() == pptr);\n+  pptr = new MyDP;\n+  pp.reset(pptr);\n+  pdp = dynamic_pointer_cast<MyDP>(std::move(pp));\n+  VERIFY(pdp.use_count() == 1);\n+  VERIFY(pp.use_count() == 0);\n+  VERIFY(pdp.get() == pptr);\n+  VERIFY(pp.get() == nullptr);\n+\n+  ptr = new int(2);\n+  pi.reset(ptr);\n+  auto pl = reinterpret_pointer_cast<long>(std::move(pi));\n+  VERIFY(pl.use_count() == 1);\n+  VERIFY(pi.use_count() == 0);\n+  VERIFY(reinterpret_cast<int*>(pl.get()) == ptr);\n+  VERIFY(pi.get() == nullptr);\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "205587cde66e32b52980bec97d2647b79e4c14c1", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/cons/alias-rval.cc", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb3fc4bded8d934b603a7f07ab3cfe3b644ee971/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2Falias-rval.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb3fc4bded8d934b603a7f07ab3cfe3b644ee971/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2Falias-rval.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2Falias-rval.cc?ref=fb3fc4bded8d934b603a7f07ab3cfe3b644ee971", "patch": "@@ -0,0 +1,101 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// Template class shared_ptr [util.smartptr.shared]\n+\n+#include <memory>\n+#include <testsuite_hooks.h>\n+\n+struct A\n+{\n+  A() : i() { }\n+  virtual ~A() { }\n+  int i;\n+};\n+\n+struct B : A\n+{\n+  B() : A(), a() { }\n+  virtual ~B() { }\n+  A a;\n+};\n+\n+void deletefunc(A* p) { delete p; }\n+\n+// 20.6.6.2.1 shared_ptr constructors [util.smartptr.shared.const]\n+\n+// Aliasing constructors\n+\n+void\n+test01()\n+{\n+  bool test = true;\n+\n+  std::shared_ptr<A> a;\n+  std::shared_ptr<bool> b1(std::move(a), &test);\n+  VERIFY( b1.use_count() == 0 );\n+  VERIFY( b1.get() == &test );\n+  VERIFY( a.use_count() == 0 );\n+  VERIFY( a == nullptr );\n+\n+  std::shared_ptr<bool> b2(b1);\n+  VERIFY( b2.use_count() == 0 );\n+  VERIFY( b1 == b2 );\n+}\n+\n+void\n+test02()\n+{\n+  std::shared_ptr<A> a(new A);\n+  std::shared_ptr<int> i1(std::move(a), &a->i);\n+  VERIFY( i1.use_count() == 1 );\n+  VERIFY( i1 != nullptr );\n+  VERIFY( a.use_count() == 0 );\n+  VERIFY( a == nullptr );\n+\n+  std::shared_ptr<int> i2(i1);\n+  VERIFY( i2.use_count() == 2 );\n+  VERIFY( i2.get() == &a->i );\n+}\n+\n+void\n+test03()\n+{\n+  std::shared_ptr<B> b1(new B);\n+  std::shared_ptr<B> b2(b1);\n+  std::shared_ptr<A> a1(std::move(b1), b1.get());\n+  std::shared_ptr<A> a2(b2, &b2->a);\n+  VERIFY( a2.use_count() == 2 );\n+  VERIFY( a1 != nullptr );\n+  VERIFY( a2 != nullptr );\n+  VERIFY( a1 != a2 );\n+  VERIFY( b1.use_count() == 0 );\n+  VERIFY( b2.use_count() == 0 );\n+  VERIFY( b1 == nullptr );\n+  VERIFY( b2 == nullptr );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+}"}, {"sha": "134a05894a24e545b999ef68c28224dc332bbc2a", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/cons/alias.cc", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb3fc4bded8d934b603a7f07ab3cfe3b644ee971/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2Falias.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb3fc4bded8d934b603a7f07ab3cfe3b644ee971/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2Falias.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2Falias.cc?ref=fb3fc4bded8d934b603a7f07ab3cfe3b644ee971", "patch": "@@ -42,7 +42,8 @@ void deletefunc(A* p) { delete p; }\n \n // Aliasing constructors\n \n-int test01()\n+void\n+test01()\n {\n   bool test = true;\n \n@@ -55,11 +56,9 @@ int test01()\n   std::shared_ptr<bool> b2(b1);\n   VERIFY( b2.use_count() == 0 );\n   VERIFY( b1.get() == b2.get() );\n-\n-  return 0;\n }\n \n-int\n+void\n test02()\n {\n   std::shared_ptr<A> a(new A);\n@@ -69,11 +68,9 @@ test02()\n   std::shared_ptr<int> i2(i1);\n   VERIFY( i2.use_count() == 3 );\n   VERIFY( i2.get() == &a->i );\n-\n-  return 0;\n }\n \n-int\n+void\n test03()\n {\n   std::shared_ptr<B> b(new B);\n@@ -89,8 +86,6 @@ test03()\n \n   a3 = a2;\n   VERIFY( a3.get() == &b->a );\n-\n-  return 0;\n }\n \n int\n@@ -99,5 +94,4 @@ main()\n   test01();\n   test02();\n   test03();\n-  return 0;\n }"}]}