{"sha": "80ebf43e2ee715f3978a7228642785ad0d1931d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODBlYmY0M2UyZWU3MTVmMzk3OGE3MjI4NjQyNzg1YWQwZDE5MzFkMw==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@redhat.com", "date": "2001-10-02T23:15:55Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2001-10-02T23:15:55Z"}, "message": "Fix some problems with previous checkin\n\nFrom-SVN: r45982", "tree": {"sha": "dca6217ab33b2e961d934faed82df52a64e8a3da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dca6217ab33b2e961d934faed82df52a64e8a3da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80ebf43e2ee715f3978a7228642785ad0d1931d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80ebf43e2ee715f3978a7228642785ad0d1931d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80ebf43e2ee715f3978a7228642785ad0d1931d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80ebf43e2ee715f3978a7228642785ad0d1931d3/comments", "author": null, "committer": null, "parents": [{"sha": "d3d51b8cad54db9bb7522d1ff9c3ff1900498bf0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3d51b8cad54db9bb7522d1ff9c3ff1900498bf0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3d51b8cad54db9bb7522d1ff9c3ff1900498bf0"}], "stats": {"total": 21, "additions": 13, "deletions": 8}, "files": [{"sha": "6a4c4ac685fb7790a251a3bc43e171af73883ae9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80ebf43e2ee715f3978a7228642785ad0d1931d3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80ebf43e2ee715f3978a7228642785ad0d1931d3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=80ebf43e2ee715f3978a7228642785ad0d1931d3", "patch": "@@ -1,3 +1,8 @@\n+2001-10-02  Bernd Schmidt  <bernds@redhat.com>\n+\n+\t* doc/extend.texi: Fix some problems with previous checkin.\n+\t* doc/invoke.texi: Likewise.\n+\n 2001-10-02  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* cpphash.h: Update comments."}, {"sha": "1ae858e93d42995412d0bf7930cf277483e623e3", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80ebf43e2ee715f3978a7228642785ad0d1931d3/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80ebf43e2ee715f3978a7228642785ad0d1931d3/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=80ebf43e2ee715f3978a7228642785ad0d1931d3", "patch": "@@ -4167,8 +4167,8 @@ typedef int v4si __attribute__ ((mode(V4SI)));\n The base type @code{int} is effectively ignored by the compiler, the\n actual properties of the new type @code{v4si} are defined by the\n @code{__attribute__}.  It defines the machine mode to be used; for vector\n-types these have the form @code{VnB}; @code{n} should be the number of\n-elements in the vector, and @code{B} should be the base mode of the\n+types these have the form @code{V@var{n}@var{B}}; @var{n} should be the\n+number of elements in the vector, and @var{B} should be the base mode of the\n individual elements.  The following can be used as base modes:\n \n @table @code"}, {"sha": "66c0816d260e9e186bf707471f8a4d7a154acfd5", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80ebf43e2ee715f3978a7228642785ad0d1931d3/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80ebf43e2ee715f3978a7228642785ad0d1931d3/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=80ebf43e2ee715f3978a7228642785ad0d1931d3", "patch": "@@ -7623,11 +7623,11 @@ may want to reduce the preferred alignment to\n These switches enable or disable the use of built-in functions that allow\n direct access to the MMX, SSE and 3Dnow extensions of the instruction set.\n \n-The following machine modes are available for use with MMX builtins\n+The following machine modes are available for use with MMX built-in functions\n (@pxref{Vector Extensions}): @code{V2SI} for a vector of two 32 bit integers,\n @code{V4HI} for a vector of four 16 bit integers, and @code{V8QI} for a\n-vector of eight 8 bit integers.  Some of the builtins operate on MMX\n-registers as a whole 64 bit entity, these use @code{DI} as their mode.\n+vector of eight 8 bit integers.  Some of the built-in functions operate on\n+MMX registers as a whole 64 bit entity, these use @code{DI} as their mode.\n \n If 3Dnow extensions are enabled, @code{V2SF} is used as a mode for a vector\n of two 32 bit floating point values.\n@@ -7638,7 +7638,7 @@ integers, these use @code{V4SI}.  Finally, some instructions operate on an\n entire vector register, interpreting it as a 128 bit integer, these use mode\n @code{TI}.\n \n-The following builtins are made available by @option{-mmmx}:\n+The following built-in functions are made available by @option{-mmmx}:\n @table @code\n @item v8qi __builtin_ia32_paddb (v8qi, v8qi)\n Generates the @code{paddb} machine instruction.\n@@ -7720,7 +7720,7 @@ Generates the @code{packuswb} machine instruction.\n \n @end table\n \n-The following builtins are made available either with @option{-msse}, or\n+The following built-in functions are made available either with @option{-msse}, or\n with a combination of @option{-m3dnow} and @option{-march=athlon}.\n @table @code\n \n@@ -7764,7 +7764,7 @@ a value of 1, it generates @code{prefetcht0}; for a value of 2, it generates\n \n @end table\n \n-The following builtins are available when @option{-msse} is used.\n+The following built-in functions are available when @option{-msse} is used.\n \n @table @code\n @item int __buitlin_ia32_comieq (v4sf, v4sf)"}]}