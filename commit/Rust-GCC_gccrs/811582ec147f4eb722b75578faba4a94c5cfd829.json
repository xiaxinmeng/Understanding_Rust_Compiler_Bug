{"sha": "811582ec147f4eb722b75578faba4a94c5cfd829", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODExNTgyZWMxNDdmNGViNzIyYjc1NTc4ZmFiYTRhOTRjNWNmZDgyOQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2015-12-09T19:29:46Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2015-12-09T19:29:46Z"}, "message": "re PR fortran/68815 (Error/warning diagnostic: '%s' should be converted to %qs-like or %<%s%>-like string strings)\n\n2015-12-09  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/68815\n        * decl.c (gfc_verify_c_interop_param, variable_decl): Use\n        %< ... %> for quoting in diagnostics.\n        * io.c (check_format): Ditto.\n        * resolve.c (resolve_operator): Ditto.\n        * symbol.c (check_conflict): Ditto.\n        * trans-common.c (translate_common): Ditto.\n\nFrom-SVN: r231472", "tree": {"sha": "6aca1041926ede1a67f736435d11018ecdd9644e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6aca1041926ede1a67f736435d11018ecdd9644e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/811582ec147f4eb722b75578faba4a94c5cfd829", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/811582ec147f4eb722b75578faba4a94c5cfd829", "html_url": "https://github.com/Rust-GCC/gccrs/commit/811582ec147f4eb722b75578faba4a94c5cfd829", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/811582ec147f4eb722b75578faba4a94c5cfd829/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1326155711cd4af6bdbf347b51e2a7337cf07414", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1326155711cd4af6bdbf347b51e2a7337cf07414", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1326155711cd4af6bdbf347b51e2a7337cf07414"}], "stats": {"total": 37, "additions": 24, "deletions": 13}, "files": [{"sha": "53c0bda672dd9e82ed4c5110a5c0c61f210acf27", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/811582ec147f4eb722b75578faba4a94c5cfd829/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/811582ec147f4eb722b75578faba4a94c5cfd829/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=811582ec147f4eb722b75578faba4a94c5cfd829", "patch": "@@ -1,3 +1,13 @@\n+2015-12-09  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/68815\n+\t* decl.c (gfc_verify_c_interop_param, variable_decl): Use\n+\t%< ... %> for quoting in diagnostics.\n+\t* io.c (check_format): Ditto.\n+\t* resolve.c (resolve_operator): Ditto.\n+\t* symbol.c (check_conflict): Ditto.\n+\t* trans-common.c (translate_common): Ditto.\n+\n 2015-12-07  David Malcolm  <dmalcolm@redhat.com>\n \n \t* error.c (gfc_format_decoder): Update for change of"}, {"sha": "b03dadf6e72bd7ccd62de860279ed414afc85ab9", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/811582ec147f4eb722b75578faba4a94c5cfd829/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/811582ec147f4eb722b75578faba4a94c5cfd829/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=811582ec147f4eb722b75578faba4a94c5cfd829", "patch": "@@ -1194,7 +1194,7 @@ gfc_verify_c_interop_param (gfc_symbol *sym)\n \t  if (sym->as != NULL && sym->as->type == AS_ASSUMED_SHAPE\n \t      && !gfc_notify_std (GFC_STD_F2008_TS, \"Assumed-shape array %qs \"\n \t\t\t\t  \"at %L as dummy argument to the BIND(C) \"\n-\t\t\t\t  \"procedure '%s' at %L\", sym->name, \n+\t\t\t\t  \"procedure %qs at %L\", sym->name,\n \t\t\t\t  &(sym->declared_at), \n \t\t\t\t  sym->ns->proc_name->name, \n \t\t\t\t  &(sym->ns->proc_name->declared_at)))\n@@ -2023,9 +2023,9 @@ variable_decl (int elem)\n       if (sym != NULL && (sym->attr.dummy || sym->attr.result))\n \t{\n \t  m = MATCH_ERROR;\n-\t  gfc_error (\"'%s' at %C is a redefinition of the declaration \"\n+\t  gfc_error (\"%qs at %C is a redefinition of the declaration \"\n \t\t     \"in the corresponding interface for MODULE \"\n-\t\t     \"PROCEDURE '%s'\", sym->name,\n+\t\t     \"PROCEDURE %qs\", sym->name,\n \t\t     gfc_current_ns->proc_name->name);\n \t  goto cleanup;\n \t}"}, {"sha": "9a7723466861199cc9f48b5cc41752e8ab5dd67f", "filename": "gcc/fortran/io.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/811582ec147f4eb722b75578faba4a94c5cfd829/gcc%2Ffortran%2Fio.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/811582ec147f4eb722b75578faba4a94c5cfd829/gcc%2Ffortran%2Fio.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fio.c?ref=811582ec147f4eb722b75578faba4a94c5cfd829", "patch": "@@ -549,7 +549,7 @@ check_format (bool is_input)\n {\n   const char *posint_required\t  = _(\"Positive width required\");\n   const char *nonneg_required\t  = _(\"Nonnegative width required\");\n-  const char *unexpected_element  = _(\"Unexpected element %<%c%> in format \"\n+  const char *unexpected_element  = _(\"Unexpected element %qc in format \"\n \t\t\t\t      \"string at %L\");\n   const char *unexpected_end\t  = _(\"Unexpected end of format string\");\n   const char *zero_width\t  = _(\"Zero width in format descriptor\");"}, {"sha": "65a2b7f3f345d9a1165e08dbde5f0d0ebf81c8af", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/811582ec147f4eb722b75578faba4a94c5cfd829/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/811582ec147f4eb722b75578faba4a94c5cfd829/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=811582ec147f4eb722b75578faba4a94c5cfd829", "patch": "@@ -3560,7 +3560,7 @@ resolve_operator (gfc_expr *e)\n \t  break;\n \t}\n \n-      sprintf (msg, _(\"Operand of unary numeric operator '%s' at %%L is %s\"),\n+      sprintf (msg, _(\"Operand of unary numeric operator %%<%s%%> at %%L is %s\"),\n \t       gfc_op2string (e->value.op.op), gfc_typename (&e->ts));\n       goto bad_op;\n \n@@ -3576,7 +3576,7 @@ resolve_operator (gfc_expr *e)\n \t}\n \n       sprintf (msg,\n-\t       _(\"Operands of binary numeric operator '%s' at %%L are %s/%s\"),\n+\t       _(\"Operands of binary numeric operator %%<%s%%> at %%L are %s/%s\"),\n \t       gfc_op2string (e->value.op.op), gfc_typename (&op1->ts),\n \t       gfc_typename (&op2->ts));\n       goto bad_op;\n@@ -3610,7 +3610,7 @@ resolve_operator (gfc_expr *e)\n \t  break;\n \t}\n \n-      sprintf (msg, _(\"Operands of logical operator '%s' at %%L are %s/%s\"),\n+      sprintf (msg, _(\"Operands of logical operator %%<%s%%> at %%L are %s/%s\"),\n \t       gfc_op2string (e->value.op.op), gfc_typename (&op1->ts),\n \t       gfc_typename (&op2->ts));\n \n@@ -3695,21 +3695,22 @@ resolve_operator (gfc_expr *e)\n \t\t ? \".eqv.\" : \".neqv.\", gfc_op2string (e->value.op.op));\n       else\n \tsprintf (msg,\n-\t\t _(\"Operands of comparison operator '%s' at %%L are %s/%s\"),\n+\t\t _(\"Operands of comparison operator %%<%s%%> at %%L are %s/%s\"),\n \t\t gfc_op2string (e->value.op.op), gfc_typename (&op1->ts),\n \t\t gfc_typename (&op2->ts));\n \n       goto bad_op;\n \n     case INTRINSIC_USER:\n       if (e->value.op.uop->op == NULL)\n-\tsprintf (msg, _(\"Unknown operator '%s' at %%L\"), e->value.op.uop->name);\n+\tsprintf (msg, _(\"Unknown operator %%<%s%%> at %%L\"),\n+\t\t e->value.op.uop->name);\n       else if (op2 == NULL)\n-\tsprintf (msg, _(\"Operand of user operator '%s' at %%L is %s\"),\n+\tsprintf (msg, _(\"Operand of user operator %%<%s%%> at %%L is %s\"),\n \t\t e->value.op.uop->name, gfc_typename (&op1->ts));\n       else\n \t{\n-\t  sprintf (msg, _(\"Operands of user operator '%s' at %%L are %s/%s\"),\n+\t  sprintf (msg, _(\"Operands of user operator %%<%s%%> at %%L are %s/%s\"),\n \t\t   e->value.op.uop->name, gfc_typename (&op1->ts),\n \t\t   gfc_typename (&op2->ts));\n \t  e->value.op.uop->op->sym->attr.referenced = 1;"}, {"sha": "311f743f8ff1f6ff1f8d35d49a31b107c7fa243c", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/811582ec147f4eb722b75578faba4a94c5cfd829/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/811582ec147f4eb722b75578faba4a94c5cfd829/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=811582ec147f4eb722b75578faba4a94c5cfd829", "patch": "@@ -465,7 +465,7 @@ check_conflict (symbol_attribute *attr, const char *name, locus *where)\n \n   if (attr->dummy && ((attr->function || attr->subroutine) && \n \t\t\tgfc_current_state () == COMP_CONTAINS))\n-    gfc_error_now (\"internal procedure '%s' at %L conflicts with \"\n+    gfc_error_now (\"internal procedure %qs at %L conflicts with \"\n \t\t   \"DUMMY argument\", name, where);\n \n   conf (dummy, entry);"}, {"sha": "bbbc7267517a6ed40d43f0353d5e13ab1da1e160", "filename": "gcc/fortran/trans-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/811582ec147f4eb722b75578faba4a94c5cfd829/gcc%2Ffortran%2Ftrans-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/811582ec147f4eb722b75578faba4a94c5cfd829/gcc%2Ffortran%2Ftrans-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-common.c?ref=811582ec147f4eb722b75578faba4a94c5cfd829", "patch": "@@ -1166,7 +1166,7 @@ translate_common (gfc_common_head *common, gfc_symbol *var_list)\n \n   if (common_segment == NULL)\n     {\n-      gfc_error (\"COMMON '%s' at %L does not exist\",\n+      gfc_error (\"COMMON %qs at %L does not exist\",\n \t\t common->name, &common->where);\n       return;\n     }"}]}