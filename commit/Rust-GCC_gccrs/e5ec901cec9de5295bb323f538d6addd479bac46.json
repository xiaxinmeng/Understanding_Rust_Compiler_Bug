{"sha": "e5ec901cec9de5295bb323f538d6addd479bac46", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTVlYzkwMWNlYzlkZTUyOTViYjMyM2Y1MzhkNmFkZGQ0NzliYWM0Ng==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.ibm.com", "date": "2019-10-03T00:13:40Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2019-10-03T00:13:40Z"}, "message": "Use the SIGNED_16BIT_OFFSET_EXTRA_P macro for 16-bit signed tests.\n\n2019-10-02   Michael Meissner  <meissner@linux.ibm.com>\n\n\t* config/rs6000/rs6000.c (mem_operand_gpr): Use\n\tSIGNED_16BIT_OFFSET_EXTRA_P.\n\t(mem_operand_ds_form): Use SIGNED_16BIT_OFFSET_EXTRA_P.\n\t(rs6000_mode_dependent_address): Use SIGNED_16BIT_OFFSET_EXTRA_P.\n\nFrom-SVN: r276498", "tree": {"sha": "50ae0cbc0d3337409ae8a44378354c6930483441", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50ae0cbc0d3337409ae8a44378354c6930483441"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5ec901cec9de5295bb323f538d6addd479bac46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5ec901cec9de5295bb323f538d6addd479bac46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5ec901cec9de5295bb323f538d6addd479bac46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5ec901cec9de5295bb323f538d6addd479bac46/comments", "author": null, "committer": null, "parents": [{"sha": "202be58655a1964581facd2e514c7d3431258fe8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/202be58655a1964581facd2e514c7d3431258fe8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/202be58655a1964581facd2e514c7d3431258fe8"}], "stats": {"total": 23, "additions": 16, "deletions": 7}, "files": [{"sha": "2d6bdba71134678de9750fe8b3fda589db418de8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5ec901cec9de5295bb323f538d6addd479bac46/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5ec901cec9de5295bb323f538d6addd479bac46/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e5ec901cec9de5295bb323f538d6addd479bac46", "patch": "@@ -1,3 +1,11 @@\n+2019-10-02   Michael Meissner  <meissner@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (mem_operand_gpr): Use\n+\tSIGNED_16BIT_OFFSET_EXTRA_P macro.\n+\t(mem_operand_ds_form): Use SIGNED_16BIT_OFFSET_EXTRA_P macro.\n+\t(rs6000_mode_dependent_address): Use SIGNED_16BIT_OFFSET_EXTRA_P\n+\tmacro.\n+\n 2019-10-02  Joseph Myers  <joseph@codesourcery.com>\n \n \t* ginclude/stdint-gcc.h [__STDC_WANT_IEC_60559_BFP_EXT__]: Change"}, {"sha": "2e13a7ea8e760c80db9bbcc715d7fb5362db2d45", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5ec901cec9de5295bb323f538d6addd479bac46/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5ec901cec9de5295bb323f538d6addd479bac46/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=e5ec901cec9de5295bb323f538d6addd479bac46", "patch": "@@ -851,7 +851,8 @@\n ;; Return 1 if OP is a constant but not a valid add_operand.\n (define_predicate \"non_add_cint_operand\"\n   (and (match_code \"const_int\")\n-       (not (match_operand 0 \"add_operand\"))))\n+       (match_test \"!satisfies_constraint_I (op)\n+\t\t    && !satisfies_constraint_L (op)\")))\n \n ;; Return 1 if the operand is a constant that can be used as the operand\n ;; of an AND, OR or XOR."}, {"sha": "a4a38822b43ec2d7cb0037499f3d000f53e41ae1", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5ec901cec9de5295bb323f538d6addd479bac46/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5ec901cec9de5295bb323f538d6addd479bac46/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=e5ec901cec9de5295bb323f538d6addd479bac46", "patch": "@@ -7372,7 +7372,7 @@ mem_operand_gpr (rtx op, machine_mode mode)\n        causes a wrap, so test only the low 16 bits.  */\n     offset = ((offset & 0xffff) ^ 0x8000) - 0x8000;\n \n-  return offset + 0x8000 < 0x10000u - extra;\n+  return SIGNED_16BIT_OFFSET_EXTRA_P (offset, extra);\n }\n \n /* As above, but for DS-FORM VSX insns.  Unlike mem_operand_gpr,\n@@ -7405,7 +7405,7 @@ mem_operand_ds_form (rtx op, machine_mode mode)\n        causes a wrap, so test only the low 16 bits.  */\n     offset = ((offset & 0xffff) ^ 0x8000) - 0x8000;\n \n-  return offset + 0x8000 < 0x10000u - extra;\n+  return SIGNED_16BIT_OFFSET_EXTRA_P (offset, extra);\n }\n \f\n /* Subroutines of rs6000_legitimize_address and rs6000_legitimate_address_p.  */\n@@ -7754,8 +7754,7 @@ rs6000_legitimate_offset_address_p (machine_mode mode, rtx x,\n       break;\n     }\n \n-  offset += 0x8000;\n-  return offset < 0x10000 - extra;\n+  return SIGNED_16BIT_OFFSET_EXTRA_P (offset, extra);\n }\n \n bool\n@@ -8772,8 +8771,9 @@ rs6000_mode_dependent_address (const_rtx addr)\n \t  && XEXP (addr, 0) != arg_pointer_rtx\n \t  && CONST_INT_P (XEXP (addr, 1)))\n \t{\n-\t  unsigned HOST_WIDE_INT val = INTVAL (XEXP (addr, 1));\n-\t  return val + 0x8000 >= 0x10000 - (TARGET_POWERPC64 ? 8 : 12);\n+\t  HOST_WIDE_INT val = INTVAL (XEXP (addr, 1));\n+\t  HOST_WIDE_INT extra = TARGET_POWERPC64 ? 8 : 12;\n+\t  return !SIGNED_16BIT_OFFSET_EXTRA_P (val, extra);\n \t}\n       break;\n "}]}