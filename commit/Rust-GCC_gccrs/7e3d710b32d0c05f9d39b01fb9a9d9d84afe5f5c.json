{"sha": "7e3d710b32d0c05f9d39b01fb9a9d9d84afe5f5c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2UzZDcxMGIzMmQwYzA1ZjlkMzliMDFmYjlhOWQ5ZDg0YWZlNWY1Yw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2006-02-15T09:47:23Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2006-02-15T09:47:23Z"}, "message": "gnat_ugn.texi: Remove limitations with sparc m64 support.\n\n2006-02-13  Arnaud Charlet  <charlet@adacore.com>\n\t    Ben Brosgol  <brosgol@adacore.com>\n\t    Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_ugn.texi: Remove limitations with sparc m64 support.\n\tDocument that gnatbind -M option is for cross environments only.\n\tAdded description of using gnatmem to trace gnat rtl allocs and deallocs\n\tAdd note on use of $ to label implicit run time calls\n\tAdd documentation for -gnatyI (check mode IN)\n\tUpdated chapter on compatibility with HP Ada\n\tVMS-oriented edits.\n\tRan spell and corrected errors\n\tAdd documentation for gnatbind -d and rework documentation of -D\n\tat the same time.\n\tAdd subprogram/data elimination section.\n\tMinor editing of annex A.\n\tAdd section for gnatcheck.\n\tAdd documentation for restriction No_Dispatching_Calls\n\tAdd documentation for pragma Ada_2005\n\tRemove mention of obsolete pragma Propagate_Exceptions\n\tDocument that pragma Unreferenced can appear after DO in ACCEPT\n\tClarify Pure_Function for library level units\n\tMention Max/Min in connection with No_Implicit_Conditionals\n\tNo_Wide_Characters restriction is no longer partition-wide\n\tAdd a nice example for Universal_Literal_String attribute\n\tDocument that pragma No_Return can take multiple arguments\n\n\t* ug_words: Added entry for gnatcheck\n\n\t* g-ctrl_c.ads (Install_Handler): Enhance comments\n\n\t* g-os_lib.ads: Add comments to OS_Exit that it is abrupt termination\n\n\t* g-trasym.ads: Add documentation on how to do off line symbolic\n\ttraceback computation.\n\n\t* s-fatgen.adb: Add comments for Unaligned_Valid\n\n\t* stand.ads: Fix typo in comment\n\nFrom-SVN: r111104", "tree": {"sha": "ba1bbe8c3b40dca210bfd8788064d9c9efcdd3ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba1bbe8c3b40dca210bfd8788064d9c9efcdd3ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e3d710b32d0c05f9d39b01fb9a9d9d84afe5f5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e3d710b32d0c05f9d39b01fb9a9d9d84afe5f5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e3d710b32d0c05f9d39b01fb9a9d9d84afe5f5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e3d710b32d0c05f9d39b01fb9a9d9d84afe5f5c/comments", "author": null, "committer": null, "parents": [{"sha": "7dc56b36b8c9b8fde03ac0f1d8279105ebb58cfb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dc56b36b8c9b8fde03ac0f1d8279105ebb58cfb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7dc56b36b8c9b8fde03ac0f1d8279105ebb58cfb"}], "stats": {"total": 1809, "additions": 1177, "deletions": 632}, "files": [{"sha": "a7bd5600d2096047850e8ec7be2efdcdaf0663ab", "filename": "gcc/ada/g-ctrl_c.ads", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e3d710b32d0c05f9d39b01fb9a9d9d84afe5f5c/gcc%2Fada%2Fg-ctrl_c.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e3d710b32d0c05f9d39b01fb9a9d9d84afe5f5c/gcc%2Fada%2Fg-ctrl_c.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-ctrl_c.ads?ref=7e3d710b32d0c05f9d39b01fb9a9d9d84afe5f5c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                      Copyright (C) 2002-2005, AdaCore                    --\n+--                      Copyright (C) 2002-2006, AdaCore                    --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -55,7 +55,8 @@ package GNAT.Ctrl_C is\n    --  Handler_Type should not propagate exceptions.\n \n    procedure Install_Handler (Handler : Handler_Type);\n-   --  Set up Handler to be called if the operator hits Ctrl-C\n+   --  Set up Handler to be called if the operator hits Ctrl-C, instead of the\n+   --  standard Control-C handler.\n \n    procedure Uninstall_Handler;\n    --  Reinstall the standard Control-C handler."}, {"sha": "e88ac961460246e6b9179b6427361776e080ab74", "filename": "gcc/ada/g-os_lib.ads", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e3d710b32d0c05f9d39b01fb9a9d9d84afe5f5c/gcc%2Fada%2Fg-os_lib.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e3d710b32d0c05f9d39b01fb9a9d9d84afe5f5c/gcc%2Fada%2Fg-os_lib.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-os_lib.ads?ref=7e3d710b32d0c05f9d39b01fb9a9d9d84afe5f5c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1995-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1995-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -62,14 +62,14 @@ package GNAT.OS_Lib is\n \n    subtype String_Access is Strings.String_Access;\n \n-   function \"=\" (Left, Right : in String_Access) return Boolean\n+   function \"=\" (Left, Right : String_Access) return Boolean\n      renames Strings.\"=\";\n \n    procedure Free (X : in out String_Access) renames Strings.Free;\n \n    subtype String_List is Strings.String_List;\n \n-   function \"=\" (Left, Right : in String_List) return Boolean\n+   function \"=\" (Left, Right : String_List) return Boolean\n      renames Strings.\"=\";\n \n    function \"&\" (Left : String_Access; Right : String_Access)\n@@ -83,7 +83,7 @@ package GNAT.OS_Lib is\n \n    subtype String_List_Access is Strings.String_List_Access;\n \n-   function \"=\" (Left, Right : in String_List_Access) return Boolean\n+   function \"=\" (Left, Right : String_List_Access) return Boolean\n      renames Strings.\"=\";\n \n    procedure Free (Arg : in out String_List_Access)\n@@ -808,7 +808,9 @@ package GNAT.OS_Lib is\n    procedure OS_Exit (Status : Integer);\n    pragma Import (C, OS_Exit, \"__gnat_os_exit\");\n    pragma No_Return (OS_Exit);\n-   --  Exit to OS with given status code (program is terminated)\n+   --  Exit to OS with given status code (program is terminated). Note that\n+   --  this is abrupt termination. All tasks are immediately terminated. There\n+   --  is no finalization or other cleanup actions performed.\n \n    procedure OS_Abort;\n    pragma Import (C, OS_Abort, \"abort\");"}, {"sha": "56426332bb5b8bd1fefbd05a588ba878e04692bc", "filename": "gcc/ada/g-trasym.ads", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e3d710b32d0c05f9d39b01fb9a9d9d84afe5f5c/gcc%2Fada%2Fg-trasym.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e3d710b32d0c05f9d39b01fb9a9d9d84afe5f5c/gcc%2Fada%2Fg-trasym.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-trasym.ads?ref=7e3d710b32d0c05f9d39b01fb9a9d9d84afe5f5c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                     Copyright (C) 1999-2005, AdaCore                     --\n+--                     Copyright (C) 1999-2006, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -40,9 +40,22 @@\n --  been compiled with debugging information turned on, since this information\n --  is used to build a symbolic traceback.\n \n---  It is also in some cases necessary to invoke the binder\n---  with -E switch (store the backtrace with exception occurence). Please\n---  refer to gnatbind documentation for more information.\n+--  If you want to retrieve tracebacks from exception occurrences, it is also\n+--  necessary to invoke the binder with -E switch. Please refer to the gnatbind\n+--  documentation for more information.\n+\n+--  Note that it is also possible (and often recommended) to compute symbolic\n+--  traceback outside the program execution, which in addition allows you\n+--  to distribute the executable with no debug info:\n+--\n+--  - build your executable with debug info\n+--  - archive this executable\n+--  - strip a copy of the executable and distribute/deploy this version\n+--  - at run time, compute absolute traceback (-bargs -E) from your\n+--    executable and log it using Ada.Exceptions.Exception_Occurrence\n+--  - off line, compute the symbolic traceback using the executable archived\n+--    with debug info and addr2line or gdb (using info line *<addr>) on the\n+--    absolute addresses logged by your application.\n \n --  In order to retrieve symbolic information, functions in this package will\n --  read on disk all the debug information of the executable file (found via"}, {"sha": "96b016151fcb30ef87d215141c119c2de435e885", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 1137, "deletions": 619, "changes": 1756, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e3d710b32d0c05f9d39b01fb9a9d9d84afe5f5c/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e3d710b32d0c05f9d39b01fb9a9d9d84afe5f5c/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=7e3d710b32d0c05f9d39b01fb9a9d9d84afe5f5c"}, {"sha": "f6a9327e66364bd3acedd8cda8926b795c68f8bb", "filename": "gcc/ada/s-fatgen.adb", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e3d710b32d0c05f9d39b01fb9a9d9d84afe5f5c/gcc%2Fada%2Fs-fatgen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e3d710b32d0c05f9d39b01fb9a9d9d84afe5f5c/gcc%2Fada%2Fs-fatgen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-fatgen.adb?ref=7e3d710b32d0c05f9d39b01fb9a9d9d84afe5f5c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -902,7 +902,16 @@ package body System.Fat_Gen is\n       Local_T : aliased T;\n \n    begin\n+      --  Note that we have to be sure that we do not load the value into a\n+      --  floating-point register, since a signalling NaN may cause a trap.\n+      --  The following assignment is what does the actual alignment, since\n+      --  we know that the target Local_T is aligned.\n+\n       To_FSP (Local_T'Address).all := To_FSP (A).all;\n+\n+      --  Now that we have an aligned value, we can use the normal aligned\n+      --  version of Valid to obtain the required result.\n+\n       return Valid (Local_T'Access);\n    end Unaligned_Valid;\n "}, {"sha": "7cae3a07b47819f2f277360162c11136e8073a96", "filename": "gcc/ada/stand.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e3d710b32d0c05f9d39b01fb9a9d9d84afe5f5c/gcc%2Fada%2Fstand.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e3d710b32d0c05f9d39b01fb9a9d9d84afe5f5c/gcc%2Fada%2Fstand.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstand.ads?ref=7e3d710b32d0c05f9d39b01fb9a9d9d84afe5f5c", "patch": "@@ -352,7 +352,7 @@ package Stand is\n    --  error messages (\"expecting an integer type\").\n \n    Any_Id : Entity_Id;\n-   --  Used to represent some unknown identifier. Used to lable undefined\n+   --  Used to represent some unknown identifier. Used to label undefined\n    --  identifier references to prevent cascaded errors.\n \n    Any_Type : Entity_Id;"}, {"sha": "8408d8b5764876eda7707ec360b29844dac7ba52", "filename": "gcc/ada/ug_words", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e3d710b32d0c05f9d39b01fb9a9d9d84afe5f5c/gcc%2Fada%2Fug_words", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e3d710b32d0c05f9d39b01fb9a9d9d84afe5f5c/gcc%2Fada%2Fug_words", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fug_words?ref=7e3d710b32d0c05f9d39b01fb9a9d9d84afe5f5c", "patch": "@@ -10,6 +10,8 @@ gnat1           ^ GNAT1\n Gnat1           ^ GNAT1\n gnatbind        ^ GNAT BIND\n Gnatbind        ^ GNAT BIND\n+gnatcheck       ^ GNAT CHECK\n+Gnatcheck       ^ GNAT CHECK\n gnatchop        ^ GNAT CHOP\n Gnatchop        ^ GNAT CHOP\n gnatclean       ^ GNAT CLEAN"}]}