{"sha": "39354b3b991ec0b77d9137c64eea9551ff0ec6f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzkzNTRiM2I5OTFlYzBiNzdkOTEzN2M2NGVlYTk1NTFmZjBlYzZmNw==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2010-07-19T08:20:59Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2010-07-19T08:20:59Z"}, "message": "sourcebuild.texi (Effective-Target Keywords): Document sse_runtime, sse2_runtime.\n\n\tgcc:\n\t* doc/sourcebuild.texi (Effective-Target Keywords): Document\n\tsse_runtime, sse2_runtime.\n\n\tgcc/testsuite:\n\t* lib/target-supports.exp (check_sse_os_support_available): New\n\tproc.\n\t(check_sse_hw_available): New proc.\n\t(check_effective_target_sse_runtime): New proc.\n\t(check_effective_target_sse2_runtime): New proc.\n\t* lib/fortran-torture.exp (get-fortran-torture-options): Only add\n\t-msse2 if check_sse_os_support_available.\n\t* g++.dg/vect/vect.exp: Only run -msse2 tests if\n\tcheck_sse_os_support_available.\n\t* gcc.dg/vect/vect.exp: Likewise.\n\t* gfortran.dg/vect/vect.exp: Likewise.\n\t* gcc.target/i386/sol2-check: Renamed to ...\n\t* gcc.target/i386/sse-os-support.h: ... this.\n\t(sol2_check): Renamed to ...\n\t(sse_os_support): ... this.\n\tOnly test movss with xmm registers.\n\t* gcc.target/i386/sse-check.h: Reflect new header and function names.\n\tRemoved ILL_INSN, ILL_INSN_LEN.\n\t* gcc.target/i386/sse2-check.h: Likewise.\n\t* gcc.target/i386/sse3-check.h: Likewise.\n\t* gcc.dg/pr40550.c: Use dg-require-effective-target sse_runtime.\n\tRemoved cpuid.h, __get_cpuid test.\n\t* g++.dg/other/i386-1.C: Use dg-require-effective-target sse2_runtime.\n\tRemoved cpuid.h, __get_cpuid test.\n\t* g++.dg/other/pr40446.C: Likewise.\n\t* gcc.dg/compat/union-m128-1_main.c: Likewise.\n\t* gcc.dg/compat/vector-1a_main.c: Likewise.\n\t* gcc.dg/compat/vector-2a_main.c: Likewise.\n\t* gcc.dg/pr36584.c: Likewise.\n\t* gcc.dg/pr37544.c: Likewise.\n\t* gcc.dg/torture/pr16104-1.c: Likewise.\n\t* gcc.dg/torture/stackalign/alloca-2.c: Likewise.\n\t* gcc.dg/torture/stackalign/alloca-3.c: Likewise.\n\t* gcc.dg/torture/stackalign/push-1.c: Likewise.\n\t* gcc.dg/torture/stackalign/vararg-3.c: Likewise.\n\t* gcc.dg/torture/pr35771.h: Removed cpuid.h, __get_cpuid test.\n\t* gcc.dg/torture/pr35771-1.c: Use dg-require-effective-target\n\tsse2_runtime.\n\t* gcc.dg/torture/pr35771-2.c: Likewise.\n\t* gcc.dg/torture/pr35771-3.c: Likewise.\n\t* gcc.target/i386/pr39315-2.c: Likewise.\n\t* gcc.target/i386/pr39315-4.c: Likewise.\n\t* gcc.target/i386/vperm-v2df.c: Likewise.\n\t* gcc.target/i386/vperm-v2di.c: Likewise.\n\t* gcc.target/i386/vperm-v4si-1.c: Likewise.\n\t* gcc.target/i386/vperm-v4sf-1.c: Use dg-require-effective-target\n\tsse_runtime.\n\nFrom-SVN: r162295", "tree": {"sha": "193163dc895135c3d3132933fe9338ee5589c842", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/193163dc895135c3d3132933fe9338ee5589c842"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39354b3b991ec0b77d9137c64eea9551ff0ec6f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39354b3b991ec0b77d9137c64eea9551ff0ec6f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39354b3b991ec0b77d9137c64eea9551ff0ec6f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "44c9c01f8f2e8315090dcdcc544632719d840163", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44c9c01f8f2e8315090dcdcc544632719d840163", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44c9c01f8f2e8315090dcdcc544632719d840163"}], "stats": {"total": 398, "additions": 189, "deletions": 209}, "files": [{"sha": "0482650095e360c4509a5030068a42ce13471c4d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=39354b3b991ec0b77d9137c64eea9551ff0ec6f7", "patch": "@@ -1,3 +1,8 @@\n+2010-07-19  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* doc/sourcebuild.texi (Effective-Target Keywords): Document\n+\tsse_runtime, sse2_runtime.\n+\n 2010-07-18  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* config/mips/mips.c (mips16_build_call_stub): Zero-extend the\n@@ -11,22 +16,6 @@\n \t* config/pa/pa.h (CONSTANT_ALIGNMENT): Align strings to BITS_PER_WORD\n \ton all targets.\n \n-Index: config/pa/pa.h\n-===================================================================\n---- config/pa/pa.h\t(revision 162277)\n-+++ config/pa/pa.h\t(working copy)\n-@@ -316,8 +316,9 @@\n- #define BIGGEST_ALIGNMENT (2 * BITS_PER_WORD)\n- \n- /* Get around hp-ux assembler bug, and make strcpy of constants fast.  */\n--#define CONSTANT_ALIGNMENT(CODE, TYPEALIGN) \\\n--  ((TYPEALIGN) < 32 ? 32 : (TYPEALIGN))\n-+#define CONSTANT_ALIGNMENT(EXP, ALIGN)\t\t\\\n-+  (TREE_CODE (EXP) == STRING_CST\t\t\\\n-+   && (ALIGN) < BITS_PER_WORD ? BITS_PER_WORD : (ALIGN))\n- \n- /* Make arrays of chars word-aligned for the same reasons.  */\n- #define DATA_ALIGNMENT(TYPE, ALIGN)\t\t\\\n 2010-07-17  Bernd Schmidt  <bernds@codesourcery.com>\n \n \tPR target/42235"}, {"sha": "33f2389db2cbe802c622fde5fee8891bdb67be09", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=39354b3b991ec0b77d9137c64eea9551ff0ec6f7", "patch": "@@ -1607,9 +1607,15 @@ Target supports FPU instructions.\n @item sse\n Target supports compiling @code{sse} instructions.\n \n+@item sse_runtime\n+Target supports the execution of @code{sse} instructions.\n+\n @item sse2\n Target supports compiling @code{sse2} instructions.\n \n+@item sse2_runtime\n+Target supports the execution of @code{sse2} instructions.\n+\n @item sync_char_short\n Target supports atomic operations on @code{char} and @code{short}.\n "}, {"sha": "100d605e9ccd7b99cd70aa28f671d698e5b90214", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=39354b3b991ec0b77d9137c64eea9551ff0ec6f7", "patch": "@@ -1,3 +1,53 @@\n+2010-07-19  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* lib/target-supports.exp (check_sse_os_support_available): New\n+\tproc.\n+\t(check_sse_hw_available): New proc.\n+\t(check_effective_target_sse_runtime): New proc.\n+\t(check_effective_target_sse2_runtime): New proc.\n+\t* lib/fortran-torture.exp (get-fortran-torture-options): Only add\n+\t-msse2 if check_sse_os_support_available.\n+\t* g++.dg/vect/vect.exp: Only run -msse2 tests if\n+\tcheck_sse_os_support_available.\n+\t* gcc.dg/vect/vect.exp: Likewise.\n+\t* gfortran.dg/vect/vect.exp: Likewise.\n+\t* gcc.target/i386/sol2-check: Renamed to ...\n+\t* gcc.target/i386/sse-os-support.h: ... this.\n+\t(sol2_check): Renamed to ...\n+\t(sse_os_support): ... this.\n+\tOnly test movss with xmm registers.\n+\t* gcc.target/i386/sse-check.h: Reflect new header and function names.\n+\tRemoved ILL_INSN, ILL_INSN_LEN.\n+\t* gcc.target/i386/sse2-check.h: Likewise.\n+\t* gcc.target/i386/sse3-check.h: Likewise.\n+\t* gcc.dg/pr40550.c: Use dg-require-effective-target sse_runtime.\n+\tRemoved cpuid.h, __get_cpuid test.\n+\t* g++.dg/other/i386-1.C: Use dg-require-effective-target sse2_runtime.\n+\tRemoved cpuid.h, __get_cpuid test.\n+\t* g++.dg/other/pr40446.C: Likewise.\n+\t* gcc.dg/compat/union-m128-1_main.c: Likewise.\n+\t* gcc.dg/compat/vector-1a_main.c: Likewise.\n+\t* gcc.dg/compat/vector-2a_main.c: Likewise.\n+\t* gcc.dg/pr36584.c: Likewise.\n+\t* gcc.dg/pr37544.c: Likewise.\n+\t* gcc.dg/torture/pr16104-1.c: Likewise.\n+\t* gcc.dg/torture/stackalign/alloca-2.c: Likewise.\n+\t* gcc.dg/torture/stackalign/alloca-3.c: Likewise.\n+\t* gcc.dg/torture/stackalign/push-1.c: Likewise.\n+\t* gcc.dg/torture/stackalign/vararg-3.c: Likewise.\n+\t* gcc.dg/torture/pr35771.h: Removed cpuid.h, __get_cpuid test.\n+\t* gcc.dg/torture/pr35771-1.c: Use dg-require-effective-target\n+\tsse2_runtime.\n+\t* gcc.dg/torture/pr35771-2.c: Likewise.\n+\t* gcc.dg/torture/pr35771-3.c: Likewise.\n+\t* gcc.target/i386/pr39315-2.c: Likewise.\n+\t* gcc.target/i386/pr39315-4.c: Likewise.\n+\t* gcc.target/i386/vperm-v2df.c: Likewise.\n+\t* gcc.target/i386/vperm-v2di.c: Likewise.\n+\t* gcc.target/i386/vperm-v4si-1.c: Likewise.\n+\t* gcc.target/i386/vperm-v4sf-1.c: Use dg-require-effective-target\n+\tsse_runtime.\n+\n 2010-07-19  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/44353"}, {"sha": "51048686f7f9749c395908454556b3e3716afe84", "filename": "gcc/testsuite/g++.dg/other/i386-1.C", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-1.C?ref=39354b3b991ec0b77d9137c64eea9551ff0ec6f7", "patch": "@@ -1,11 +1,10 @@\n /* { dg-do run { target i?86-*-* x86_64-*-* } } */\n /* { dg-options \"-msse2\" } */\n /* { dg-require-effective-target sse2 } */\n+/* { dg-require-effective-target sse2_runtime } */\n \n #include <xmmintrin.h>\n \n-#include \"cpuid.h\"\n-\n static void\n sse2_test (void)\n {\n@@ -25,14 +24,6 @@ sse2_test (void)\n int\n main ()\n {\n-  unsigned int eax, ebx, ecx, edx;\n- \n-  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))\n-    return 0;\n-\n-  /* Run SSE2 test only if host has SSE2 support.  */\n-  if (edx & bit_SSE2)\n-    sse2_test ();\n-\n+  sse2_test ();\n   return 0;\n }"}, {"sha": "b4be0d05617145a93f442700a1d0a47b3fc19604", "filename": "gcc/testsuite/g++.dg/other/pr40446.C", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr40446.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr40446.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr40446.C?ref=39354b3b991ec0b77d9137c64eea9551ff0ec6f7", "patch": "@@ -2,9 +2,9 @@\n // { dg-do run { target i?86-*-* x86_64-*-* } }\n // { dg-options \"-O1 -msse2\" }\n // { dg-require-effective-target sse2 }\n+// { dg-require-effective-target sse2_runtime }\n \n #include <emmintrin.h>\n-#include \"cpuid.h\"\n \n extern \"C\" void abort ();\n \n@@ -34,14 +34,6 @@ sse2_test ()\n int\n main ()\n {\n-  unsigned int eax, ebx, ecx, edx;\n-\n-  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))\n-    return 0;\n-\n-  /* Run SSE2 test only if host has SSE2 support.  */\n-  if (edx & bit_SSE2)\n-    sse2_test ();\n-\n+  sse2_test ();\n   return 0;\n }"}, {"sha": "18e8355cd7a14c3559df84fde7d776bf002a56b2", "filename": "gcc/testsuite/g++.dg/vect/vect.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fvect.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fvect.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fvect.exp?ref=39354b3b991ec0b77d9137c64eea9551ff0ec6f7", "patch": "@@ -79,7 +79,7 @@ if  [istarget \"powerpc-*paired*\"]  {\n \treturn\n     }\n     lappend DEFAULT_VECTCFLAGS \"-msse2\"\n-    if [check_sse2_hw_available] {\n+    if { [check_sse2_hw_available] && [check_sse_os_support_available] } {\n \tset dg-do-what-default run\n     } else {\n \tset dg-do-what-default compile"}, {"sha": "602acf8c112ef6e2927d6227fc4aadc32aa8c01c", "filename": "gcc/testsuite/gcc.dg/compat/union-m128-1_main.c", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Funion-m128-1_main.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Funion-m128-1_main.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Funion-m128-1_main.c?ref=39354b3b991ec0b77d9137c64eea9551ff0ec6f7", "patch": "@@ -1,8 +1,7 @@\n /* { dg-skip-if \"test SSE2 support\" { ! { i?86-*-* x86_64-*-* } } } */\n /* { dg-options \"-O\" } */\n /* { dg-require-effective-target sse2 } */\n-\n-#include \"cpuid.h\"\n+/* { dg-require-effective-target sse2_runtime } */\n \n /* Test function argument passing.  PR target/15301.  */\n \n@@ -12,14 +11,6 @@ extern void exit (int);\n int\n main ()\n {\n-  unsigned int eax, ebx, ecx, edx;\n-\n-  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))\n-    return 0;\n-\n-  /* Run SSE vector test only if host has SSE2 support.  */\n-  if (edx & bit_SSE2)\n-    union_m128_1_x ();\n-\n+  union_m128_1_x ();\n   exit (0);\n }"}, {"sha": "11b4511749ee7e102651938dc5bacf5d84a7c13a", "filename": "gcc/testsuite/gcc.dg/compat/vector-1a_main.c", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fvector-1a_main.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fvector-1a_main.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fvector-1a_main.c?ref=39354b3b991ec0b77d9137c64eea9551ff0ec6f7", "patch": "@@ -1,27 +1,18 @@\n /* { dg-skip-if \"test SSE2 vector\" { ! { i?86-*-* x86_64-*-* } } } */\n /* { dg-require-effective-target sse2 } */\n+/* { dg-require-effective-target sse2_runtime } */\n \n /* Test compatibility of vector types: layout between separately-compiled\n    modules, parameter passing, and function return.  This test uses\n    vectors of integer values.  */\n \n-#include \"cpuid.h\"\n-\n extern void vector_1_x (void);\n extern void exit (int);\n int fails;\n \n int\n main ()\n {\n-  unsigned int eax, ebx, ecx, edx;\n-\n-  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))\n-    return 0;\n-\n-  /* Run SSE vector test only if host has SSE2 support.  */\n-  if (edx & bit_SSE2)\n-    vector_1_x ();\n-\n+  vector_1_x ();\n   exit (0);\n }"}, {"sha": "8457e5aedc35a755626f5a3503b70df0f6710386", "filename": "gcc/testsuite/gcc.dg/compat/vector-2a_main.c", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fvector-2a_main.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fvector-2a_main.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fvector-2a_main.c?ref=39354b3b991ec0b77d9137c64eea9551ff0ec6f7", "patch": "@@ -1,27 +1,18 @@\n /* { dg-skip-if \"test SSE2 support\" { ! { i?86-*-* x86_64-*-* } } } */\n /* { dg-require-effective-target sse2 } */\n+/* { dg-require-effective-target sse2_runtime } */\n \n /* Test compatibility of vector types: layout between separately-compiled\n    modules, parameter passing, and function return.  This test uses\n    vectors of floating points values.  */\n \n-#include \"cpuid.h\"\n-\n extern void vector_2_x (void);\n extern void exit (int);\n int fails;\n \n int\n main ()\n {\n-  unsigned int eax, ebx, ecx, edx;\n-\n-  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))\n-    return 0;\n-\n-  /* Run SSE vector test only if host has SSE2 support.  */\n-  if (edx & bit_SSE2)\n-    vector_2_x ();\n-\n+  vector_2_x ();\n   exit (0);\n }"}, {"sha": "2af71aea1221dc93abcfc6c2f010a4fb86d01ae8", "filename": "gcc/testsuite/gcc.dg/pr36584.c", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr36584.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr36584.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr36584.c?ref=39354b3b991ec0b77d9137c64eea9551ff0ec6f7", "patch": "@@ -2,10 +2,7 @@\n /* { dg-options \"-O2 -lm\" } */\n /* { dg-options \"-O2 -msse2 -mfpmath=sse\" { target { { i?86-*-* x86_64-*-* } && ilp32 } } } */\n /* { dg-require-effective-target sse2 { target { { i?86-*-* x86_64-*-* } && ilp32 } } } */\n-\n-#ifdef __i386__\n-#include \"cpuid.h\"\n-#endif\n+/* { dg-require-effective-target sse2_runtime { target { { i?86-*-* x86_64-*-* } && ilp32 } } } */\n \n extern double fabs (double);\n extern void abort (void);\n@@ -263,16 +260,6 @@ main ()\n   double roots[7];\n   int nroots;\n \n-#ifdef __i386__\n-  unsigned int eax, ebx, ecx, edx;\n-\n-  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))\n-    return 0;\n-\n-  if (!(edx & bit_SSE2))\n-    return 0;\n-#endif\n-\n   nroots = sbisect (6, sseq, 0.0, 10000000.0, 5, 1, roots);\n   if (nroots != 4)\n     abort ();"}, {"sha": "dec321bf7217cf8e5fa94d4726b33d94abe7607e", "filename": "gcc/testsuite/gcc.dg/pr37544.c", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr37544.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr37544.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr37544.c?ref=39354b3b991ec0b77d9137c64eea9551ff0ec6f7", "patch": "@@ -2,10 +2,7 @@\n /* { dg-options \"-O2\" } */\n /* { dg-options \"-O2 -msse2 -mtune=core2 -mfpmath=387\" { target { i?86-*-* x86_64-*-* } } } */\n /* { dg-require-effective-target sse2 { target { i?86-*-* x86_64-*-* } } } */\n-\n-#ifdef __i386__\n-#include \"cpuid.h\"\n-#endif\n+/* { dg-require-effective-target sse2_runtime { target { i?86-*-* x86_64-*-* } } } */\n \n extern void abort (void);\n \n@@ -16,17 +13,6 @@ int main(void)\n \n   int i;\n \n-#ifdef __i386__\n-  unsigned int eax, ebx, ecx, edx;\n- \n-  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))\n-    return 0;\n-\n-  /* Run SSE2 test only if host has SSE2 support.  */\n-  if (!(edx & bit_SSE2))\n-    return 0;\n-#endif\n-\n   for (i = 0; i < 1000; i++)\n     arr[i] = 4294967296.0 + (double)i;\n "}, {"sha": "2e477293ed17d3e6223a73ce143e54e9e1341a23", "filename": "gcc/testsuite/gcc.dg/pr40550.c", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr40550.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr40550.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr40550.c?ref=39354b3b991ec0b77d9137c64eea9551ff0ec6f7", "patch": "@@ -1,10 +1,7 @@\n /* { dg-do run } */\n /* { dg-options \"-msse\" { target { { i?86-*-* x86_64-*-* } && ilp32 } } } */\n /* { dg-require-effective-target sse { target { { i?86-*-* x86_64-*-* } && ilp32 } } } */\n-\n-#ifdef __i386__\n-#include \"cpuid.h\"\n-#endif\n+/* { dg-require-effective-target sse_runtime { target { { i?86-*-* x86_64-*-* } && ilp32 } } } */\n \n typedef float v2sf __attribute__ ((vector_size (2 * sizeof(float))));\n \n@@ -18,18 +15,6 @@ static void test (void)\n \n int main ()\n {\n-\n-#ifdef __i386__\n-  unsigned int eax, ebx, ecx, edx;\n-\n-  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))\n-    return 0;\n-\n-  if (!(edx & bit_SSE))\n-    return 0;\n-#endif\n-\n   test ();\n-\n   return 0;\n }"}, {"sha": "d4aed810a3bcbb39b06ae574da411e1f0f102550", "filename": "gcc/testsuite/gcc.dg/torture/pr16104-1.c", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr16104-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr16104-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr16104-1.c?ref=39354b3b991ec0b77d9137c64eea9551ff0ec6f7", "patch": "@@ -2,8 +2,7 @@\n /* { dg-do run { target i?86-*-* x86_64-*-* } } */\n /* { dg-options \"-msse2\" } */\n /* { dg-require-effective-target sse2 } */\n-\n-#include \"cpuid.h\"\n+/* { dg-require-effective-target sse2_runtime } */\n \n extern void abort (void);\n \n@@ -76,14 +75,6 @@ do_test (void)\n int\n main (void)\n {\n-  unsigned int eax, ebx, ecx, edx;\n- \n-  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))\n-    return 0;\n-\n-  /* Run SSE2 test only if host has SSE2 support.  */\n-  if (edx & bit_SSE2)\n-    do_test ();\n-\n+  do_test ();\n   return 0;\n }"}, {"sha": "4e95700c72ba1a9eac8f59ce1ca2d2bf6816e84e", "filename": "gcc/testsuite/gcc.dg/torture/pr35771-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr35771-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr35771-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr35771-1.c?ref=39354b3b991ec0b77d9137c64eea9551ff0ec6f7", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do run { target i?86-*-* x86_64-*-* } } */\n /* { dg-options \"-msse2\" } */\n /* { dg-require-effective-target sse2 } */\n+/* { dg-require-effective-target sse2_runtime } */\n \n typedef float __m128 __attribute__ ((__vector_size__ (16), __may_alias__));\n "}, {"sha": "ae5bb00d91f237d7706288eb8d0e5169aa51eb77", "filename": "gcc/testsuite/gcc.dg/torture/pr35771-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr35771-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr35771-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr35771-2.c?ref=39354b3b991ec0b77d9137c64eea9551ff0ec6f7", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do run { target i?86-*-* x86_64-*-* } } */\n /* { dg-options \"-msse2\" } */\n /* { dg-require-effective-target sse2 } */\n+/* { dg-require-effective-target sse2_runtime } */\n \n typedef double __m128d __attribute__ ((__vector_size__ (16), __may_alias__));\n "}, {"sha": "556f786dfaab2dbd2f5c7e79a8428eee6f1356c3", "filename": "gcc/testsuite/gcc.dg/torture/pr35771-3.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr35771-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr35771-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr35771-3.c?ref=39354b3b991ec0b77d9137c64eea9551ff0ec6f7", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do run { target i?86-*-* x86_64-*-* } } */\n /* { dg-options \"-msse2\" } */\n /* { dg-require-effective-target sse2 } */\n+/* { dg-require-effective-target sse2_runtime } */\n \n typedef long long __m128i __attribute__ ((__vector_size__ (16), __may_alias__));\n "}, {"sha": "7b921c41ba92bfc3be8ee7c8fd4110a365e03314", "filename": "gcc/testsuite/gcc.dg/torture/pr35771.h", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr35771.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr35771.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr35771.h?ref=39354b3b991ec0b77d9137c64eea9551ff0ec6f7", "patch": "@@ -1,7 +1,5 @@\n typedef TYPE __attribute__((aligned(1))) unaligned;\n \n-#include \"cpuid.h\"\n-\n extern void abort (void);\n \n \n@@ -27,14 +25,6 @@ do_test (void)\n int\n main (void)\n {\n-  unsigned int eax, ebx, ecx, edx;\n- \n-  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))\n-    return 0;\n-\n-  /* Run SSE2 test only if host has SSE2 support.  */\n-  if (edx & bit_SSE2)\n-    do_test ();\n-\n+  do_test ();\n   return 0;\n }"}, {"sha": "54232bfae694f8a9f6297a5c391b9eb237c73928", "filename": "gcc/testsuite/gcc.dg/torture/stackalign/alloca-2.c", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Falloca-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Falloca-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Falloca-2.c?ref=39354b3b991ec0b77d9137c64eea9551ff0ec6f7", "patch": "@@ -2,9 +2,9 @@\n /* { dg-do run { target { { i?86-*-* x86_64-*-* } && ilp32 } } } */\n /* { dg-options \"-msse2\" } */\n /* { dg-require-effective-target sse2 } */\n+/* { dg-require-effective-target sse2_runtime } */\n \n #include <emmintrin.h>\n-#include \"cpuid.h\"\n #include \"check.h\"\n \n #ifndef ALIGNMENT\n@@ -44,14 +44,7 @@ int\n main (void)\n {\n   __m128 x = { 1.0 };\n-  unsigned int eax, ebx, ecx, edx;\n- \n-  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))\n-    return 0;\n-\n-  /* Run SSE2 test only if host has SSE2 support.  */\n-  if (edx & bit_SSE2)\n-    foo (x, x, x, 5);\n+  foo (x, x, x, 5);\n \n   return 0;\n }"}, {"sha": "8a91121febe5264a3e17ce00c3ccf68475726c33", "filename": "gcc/testsuite/gcc.dg/torture/stackalign/alloca-3.c", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Falloca-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Falloca-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Falloca-3.c?ref=39354b3b991ec0b77d9137c64eea9551ff0ec6f7", "patch": "@@ -2,9 +2,9 @@\n /* { dg-do run { target { { i?86-*-* x86_64-*-* } && ilp32 } } } */\n /* { dg-options \"-msse2\" } */\n /* { dg-require-effective-target sse2 } */\n+/* { dg-require-effective-target sse2_runtime } */\n \n #include <emmintrin.h>\n-#include \"cpuid.h\"\n #include \"check.h\"\n \n #ifndef ALIGNMENT\n@@ -44,14 +44,7 @@ int\n main (void)\n {\n   __m128 x = { 1.0 };\n-  unsigned int eax, ebx, ecx, edx;\n- \n-  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))\n-    return 0;\n-\n-  /* Run SSE2 test only if host has SSE2 support.  */\n-  if (edx & bit_SSE2)\n-    foo (x, x, x, x, 5);\n+  foo (x, x, x, x, 5);\n \n   return 0;\n }"}, {"sha": "c58d1ec61aa8a98410453c3f3a83f9c9f17d3695", "filename": "gcc/testsuite/gcc.dg/torture/stackalign/push-1.c", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fpush-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fpush-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fpush-1.c?ref=39354b3b991ec0b77d9137c64eea9551ff0ec6f7", "patch": "@@ -2,9 +2,9 @@\n /* { dg-do run { target { { i?86-*-* x86_64-*-* } && ilp32 } } } */\n /* { dg-options \"-msse2 -mpreferred-stack-boundary=2\" } */\n /* { dg-require-effective-target sse2 } */\n+/* { dg-require-effective-target sse2_runtime } */\n \n #include <emmintrin.h>\n-#include \"cpuid.h\"\n \n typedef __PTRDIFF_TYPE__ ptrdiff_t;\n typedef float __m128 __attribute__ ((__vector_size__ (16), __may_alias__));\n@@ -42,19 +42,11 @@ int\n main (void)\n {\n   __m128 x = { 1.0 };\n-  unsigned int eax, ebx, ecx, edx;\n- \n-  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))\n-    return 0;\n \n-  /* Run SSE2 test only if host has SSE2 support.  */\n-  if (edx & bit_SSE2)\n-    {\n-      foo (x, x, x, x, 5);\n+  foo (x, x, x, x, 5);\n \n-      if (__builtin_memcmp (&r, &x, sizeof (r)))\n-\tabort ();\n-    }\n+  if (__builtin_memcmp (&r, &x, sizeof (r)))\n+    abort ();\n \n   return 0;\n }"}, {"sha": "734cf71bcae99ab875b5121341120f8d554d648a", "filename": "gcc/testsuite/gcc.dg/torture/stackalign/vararg-3.c", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fvararg-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fvararg-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fvararg-3.c?ref=39354b3b991ec0b77d9137c64eea9551ff0ec6f7", "patch": "@@ -2,10 +2,10 @@\n /* { dg-do run { target { { i?86-*-* x86_64-*-* } && ilp32 } } } */\n /* { dg-options \"-msse2\" } */\n /* { dg-require-effective-target sse2 } */\n+/* { dg-require-effective-target sse2_runtime } */\n \n #include <stdarg.h>\n #include <emmintrin.h>\n-#include \"cpuid.h\"\n #include \"check.h\"\n \n #ifndef ALIGNMENT\n@@ -72,14 +72,8 @@ int\n main (void)\n {\n   __m128 x = { 1.0 };\n-  unsigned int eax, ebx, ecx, edx;\n- \n-  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))\n-    return 0;\n-\n-  /* Run SSE2 test only if host has SSE2 support.  */\n-  if (edx & bit_SSE2)\n-    foo (\"foo\", 5, 5.0, x);\n+\n+  foo (\"foo\", 5, 5.0, x);\n \n   return 0;\n }"}, {"sha": "eecb13a7823f0ae6fe5ad14e95f08ed16b37439f", "filename": "gcc/testsuite/gcc.dg/vect/vect.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect.exp?ref=39354b3b991ec0b77d9137c64eea9551ff0ec6f7", "patch": "@@ -71,7 +71,7 @@ if  [istarget \"powerpc-*paired*\"]  {\n \treturn\n     }\n     lappend DEFAULT_VECTCFLAGS \"-msse2\"\n-    if [check_sse2_hw_available] {\n+    if { [check_sse2_hw_available] && [check_sse_os_support_available] } {\n \tset dg-do-what-default run\n     } else {\n \tset dg-do-what-default compile"}, {"sha": "ee74def22469312485a231e50ed13de902e22947", "filename": "gcc/testsuite/gcc.target/i386/pr39315-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39315-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39315-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39315-2.c?ref=39354b3b991ec0b77d9137c64eea9551ff0ec6f7", "patch": "@@ -2,6 +2,7 @@\n /* { dg-do run } */\n /* { dg-options \"-O -msse2 -mtune=generic\" } */\n /* { dg-require-effective-target sse2 } */\n+/* { dg-require-effective-target sse2_runtime } */\n /* { dg-additional-sources pr39315-check.c } */\n \n typedef float __m128 __attribute__ ((__vector_size__ (16)));"}, {"sha": "107933fa0c0edbc60bb8291164e318a6e267e924", "filename": "gcc/testsuite/gcc.target/i386/pr39315-4.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39315-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39315-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39315-4.c?ref=39354b3b991ec0b77d9137c64eea9551ff0ec6f7", "patch": "@@ -2,6 +2,7 @@\n /* { dg-do run } */\n /* { dg-options \"-O -msse2 -mtune=generic\" } */\n /* { dg-require-effective-target sse2 } */\n+/* { dg-require-effective-target sse2_runtime } */\n /* { dg-additional-sources pr39315-check.c } */\n \n typedef float __m128 __attribute__ ((__vector_size__ (16)));"}, {"sha": "11b71bc3e97513be00181c074c06d977247f35c2", "filename": "gcc/testsuite/gcc.target/i386/sse-check.h", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-check.h?ref=39354b3b991ec0b77d9137c64eea9551ff0ec6f7", "patch": "@@ -1,13 +1,7 @@\n #include <stdlib.h>\n #include \"m128-check.h\"\n-\n #include \"cpuid.h\"\n-\n-/* We need a single SSE instruction here so the handler can safely skip\n-   over it.  */\n-#define ILL_INSN __asm__ volatile (\"movss %xmm2,%xmm1\")\n-#define ILL_INSN_LEN 4\n-#include \"sol2-check.h\"\n+#include \"sse-os-support.h\"\n \n static void sse_test (void);\n \n@@ -27,7 +21,7 @@ main ()\n     return 0;\n \n   /* Run SSE test only if host has SSE support.  */\n-  if ((edx & bit_SSE) && sol2_check ())\n+  if ((edx & bit_SSE) && sse_os_support ())\n     do_test ();\n \n   return 0;"}, {"sha": "a2b4e2d3c7e2bc879a9bbe41f7258ef828cb0d01", "filename": "gcc/testsuite/gcc.target/i386/sse-os-support.h", "status": "renamed", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-os-support.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-os-support.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-os-support.h?ref=39354b3b991ec0b77d9137c64eea9551ff0ec6f7", "patch": "@@ -14,18 +14,23 @@ sigill_hdlr (int sig __attribute((unused)),\n   sigill_caught = 1;\n   /* Set PC to the instruction after the faulting one to skip over it,\n      otherwise we enter an infinite loop.  */\n-  ucp->uc_mcontext.gregs[EIP] += ILL_INSN_LEN;\n+  ucp->uc_mcontext.gregs[EIP] += 4;\n   setcontext (ucp);\n }\n #endif\n \n-/* Solaris 2 before Solaris 9 4/04 cannot execute SSE/SSE2 instructions\n-   even if the CPU supports them.  Programs receive SIGILL instead, so\n-   check for that at runtime.  */\n+/* Check if the OS supports executing SSE instructions.  This function is\n+   only used in sse-check.h, sse2-check.h, and sse3-check.h so far since\n+   Solaris 8 and 9 won't run on newer CPUs anyway.  */\n+\n static int\n-sol2_check (void)\n+sse_os_support (void)\n {\n #if defined(__sun__) && defined(__svr4__)\n+  /* Solaris 2 before Solaris 9 4/04 cannot execute SSE instructions\n+     even if the CPU supports them.  Programs receive SIGILL instead, so\n+     check for that at runtime.  */\n+\n   struct sigaction act, oact;\n \n   act.sa_handler = sigill_hdlr;\n@@ -34,7 +39,9 @@ sol2_check (void)\n   act.sa_flags = SA_SIGINFO;\n   sigaction (SIGILL, &act, &oact);\n \n-  ILL_INSN;\n+  /* We need a single SSE instruction here so the handler can safely skip\n+     over it.  */\n+  __asm__ volatile (\"movss %xmm2,%xmm1\");\n \n   sigaction (SIGILL, &oact, NULL);\n ", "previous_filename": "gcc/testsuite/gcc.target/i386/sol2-check.h"}, {"sha": "fd4a6ce1dbf64f14028fc27f0882607cbb6c0c9f", "filename": "gcc/testsuite/gcc.target/i386/sse2-check.h", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-check.h?ref=39354b3b991ec0b77d9137c64eea9551ff0ec6f7", "patch": "@@ -1,12 +1,7 @@\n #include <stdlib.h>\n #include \"cpuid.h\"\n #include \"m128-check.h\"\n-\n-/* We need a single SSE2 instruction here so the handler can safely skip\n-   over it.  */\n-#define ILL_INSN __asm__ volatile (\"unpcklpd %xmm0,%xmm2\")\n-#define ILL_INSN_LEN 4\n-#include \"sol2-check.h\"\n+#include \"sse-os-support.h\"\n \n static void sse2_test (void);\n \n@@ -26,7 +21,7 @@ main ()\n     return 0;\n \n   /* Run SSE2 test only if host has SSE2 support.  */\n-  if ((edx & bit_SSE2) && sol2_check ())\n+  if ((edx & bit_SSE2) && sse_os_support ())\n     do_test ();\n \n   return 0;"}, {"sha": "5a0a0b1a02e06e752a52b6b014fb980556ac1c8c", "filename": "gcc/testsuite/gcc.target/i386/sse3-check.h", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse3-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse3-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse3-check.h?ref=39354b3b991ec0b77d9137c64eea9551ff0ec6f7", "patch": "@@ -1,13 +1,7 @@\n #include <stdio.h>\n #include <stdlib.h>\n-\n #include \"cpuid.h\"\n-\n-/* We need a single SSE3 instruction here so the handler can safely skip\n-   over it.  */\n-#define ILL_INSN __asm__ volatile (\"movddup %xmm1,%xmm2\")\n-#define ILL_INSN_LEN 4\n-#include \"sol2-check.h\"\n+#include \"sse-os-support.h\"\n \n static void sse3_test (void);\n \n@@ -27,7 +21,7 @@ main ()\n     return 0;\n  \n   /* Run SSE3 test only if host has SSE3 support.  */\n-  if ((ecx & bit_SSE3) && sol2_check ())\n+  if ((ecx & bit_SSE3) && sse_os_support ())\n     do_test ();\n \n   return 0;"}, {"sha": "1a237f04b5d9a07f42d6f8dfe9ee58f669415352", "filename": "gcc/testsuite/gcc.target/i386/vperm-v2df.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvperm-v2df.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvperm-v2df.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvperm-v2df.c?ref=39354b3b991ec0b77d9137c64eea9551ff0ec6f7", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do run } */\n /* { dg-options \"-O -msse2\" } */\n /* { dg-require-effective-target sse2 } */\n+/* { dg-require-effective-target sse2_runtime } */\n \n #include \"isa-check.h\"\n "}, {"sha": "b587d90b8fbe05011a742b42a3e19d8f51d761f6", "filename": "gcc/testsuite/gcc.target/i386/vperm-v2di.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvperm-v2di.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvperm-v2di.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvperm-v2di.c?ref=39354b3b991ec0b77d9137c64eea9551ff0ec6f7", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do run } */\n /* { dg-options \"-O -msse2\" } */\n /* { dg-require-effective-target sse2 } */\n+/* { dg-require-effective-target sse2_runtime } */\n \n #include \"isa-check.h\"\n "}, {"sha": "d8cb9e6b7942e2df24525d3f671b9f21403560d6", "filename": "gcc/testsuite/gcc.target/i386/vperm-v4sf-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvperm-v4sf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvperm-v4sf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvperm-v4sf-1.c?ref=39354b3b991ec0b77d9137c64eea9551ff0ec6f7", "patch": "@@ -1,5 +1,7 @@\n /* { dg-do run } */\n /* { dg-options \"-O -msse\" } */\n+/* { dg-require-effective-target sse } */\n+/* { dg-require-effective-target sse_runtime } */\n \n #include \"isa-check.h\"\n "}, {"sha": "3c2717dd751c0363ffd8c14643fbe40aa71cd05d", "filename": "gcc/testsuite/gcc.target/i386/vperm-v4si-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvperm-v4si-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvperm-v4si-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvperm-v4si-1.c?ref=39354b3b991ec0b77d9137c64eea9551ff0ec6f7", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do run } */\n /* { dg-options \"-O -msse2\" } */\n /* { dg-require-effective-target sse2 } */\n+/* { dg-require-effective-target sse2_runtime } */\n \n #include \"isa-check.h\"\n "}, {"sha": "2a09df5a92ef0750269115b06d4b8eaaac0a7fef", "filename": "gcc/testsuite/gfortran.dg/vect/vect.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect.exp?ref=39354b3b991ec0b77d9137c64eea9551ff0ec6f7", "patch": "@@ -72,7 +72,7 @@ if  [istarget \"powerpc-*paired*\"]  {\n \treturn\n     }\n     lappend DEFAULT_VECTCFLAGS \"-msse2\"\n-    if [check_sse2_hw_available] {\n+    if { [check_sse2_hw_available] && [check_sse_os_support_available] } {\n \tset dg-do-what-default run\n     } else {\n \tset dg-do-what-default compile"}, {"sha": "cd24ace426f068824b6fda96383ab9af25fad0c1", "filename": "gcc/testsuite/lib/fortran-torture.exp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Flib%2Ffortran-torture.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Flib%2Ffortran-torture.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ffortran-torture.exp?ref=39354b3b991ec0b77d9137c64eea9551ff0ec6f7", "patch": "@@ -46,7 +46,8 @@ proc get-fortran-torture-options { } {\n \tset test_tree_vectorize 1\n     } elseif { ( [istarget \"i?86-*-*\"] || [istarget \"x86_64-*-*\"] )\n \t       && [check_effective_target_sse2]\n-\t       && [check_sse2_hw_available] } {\n+\t       && [check_sse2_hw_available]\n+\t       && [check_sse_os_support_available] } {\n \tlappend vectorizer_options \"-msse2\"\n \tset test_tree_vectorize 1\n     } elseif { [istarget \"mips*-*-*\"]"}, {"sha": "0378f807d63e7d5936faa3706c182cfd8e35d216", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39354b3b991ec0b77d9137c64eea9551ff0ec6f7/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=39354b3b991ec0b77d9137c64eea9551ff0ec6f7", "patch": "@@ -910,6 +910,53 @@ proc check_750cl_hw_available { } {\n     }]\n }\n \n+# Return 1 if the target OS supports running SSE executables, 0\n+# otherwise.  Cache the result.\n+\n+proc check_sse_os_support_available { } {\n+    return [check_cached_effective_target sse_os_support_available {\n+\t# If this is not the right target then we can skip the test.\n+\tif { !([istarget x86_64-*-*] || [istarget i?86-*-*]) } {\n+\t    expr 0\n+\t} elseif { [istarget i?86-*-solaris2*] } {\n+\t    # The Solaris 2 kernel doesn't save and restore SSE registers\n+\t    # before Solaris 9 4/04.  Before that, executables die with SIGILL.\n+\t    check_runtime_nocache sse_os_support_available {\n+\t\tint main ()\n+\t\t{\n+\t\t    __asm__ volatile (\"movss %xmm2,%xmm1\");\n+\t\t    return 0;\n+\t\t}\n+\t    } \"-msse\"\n+\t} else {\n+\t    expr 1\n+\t}\n+    }]\n+}\n+\n+# Return 1 if the target supports executing SSE instructions, 0\n+# otherwise.  Cache the result.\n+\n+proc check_sse_hw_available { } {\n+    return [check_cached_effective_target sse_hw_available {\n+\t# If this is not the right target then we can skip the test.\n+\tif { !([istarget x86_64-*-*] || [istarget i?86-*-*]) } {\n+\t    expr 0\n+\t} else {\n+\t    check_runtime_nocache sse_hw_available {\n+\t\t#include \"cpuid.h\"\n+\t\tint main ()\n+\t\t{\n+\t\t  unsigned int eax, ebx, ecx, edx = 0;\n+\t\t  if (__get_cpuid (1, &eax, &ebx, &ecx, &edx))\n+\t\t    return !(edx & bit_SSE);\n+\t\t  return 1;\n+\t\t}\n+\t    } \"\"\n+\t}\n+    }]\n+}\n+\n # Return 1 if the target supports executing SSE2 instructions, 0\n # otherwise.  Cache the result.\n \n@@ -933,6 +980,26 @@ proc check_sse2_hw_available { } {\n     }]\n }\n \n+# Return 1 if the target supports running SSE executables, 0 otherwise.\n+\n+proc check_effective_target_sse_runtime { } {\n+    if { [check_sse_hw_available] && [check_sse_os_support_available] } {\n+\treturn 1\n+    } else {\n+\treturn 0\n+    }\n+}\n+\n+# Return 1 if the target supports running SSE2 executables, 0 otherwise.\n+\n+proc check_effective_target_sse2_runtime { } {\n+    if { [check_sse2_hw_available] && [check_sse_os_support_available] } {\n+\treturn 1\n+    } else {\n+\treturn 0\n+    }\n+}\n+\n # Return 1 if the target supports executing VSX instructions, 0\n # otherwise.  Cache the result.\n "}]}