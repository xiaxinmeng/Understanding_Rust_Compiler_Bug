{"sha": "f99309b288733c88d5369af11a6c11dcc307ff49", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjk5MzA5YjI4ODczM2M4OGQ1MzY5YWYxMWE2YzExZGNjMzA3ZmY0OQ==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2018-03-13T15:33:16Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2018-03-13T15:33:16Z"}, "message": "PR tree-optimization/84725 - enable attribute nonstring for all narrow character types\n\ngcc/c-family/ChangeLog:\n\n\tPR tree-optimization/84725\n\t* c-attribs.c (handle_nonstring_attribute): Allow attribute nonstring\n\twith all three narrow character types, including their qualified forms.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/84725\n\t* c-c++-common/Wstringop-truncation-4.c: New test.\n\t* c-c++-common/attr-nonstring-5.c: New test.\n\nFrom-SVN: r258492", "tree": {"sha": "4d57dda9109c373e52d5baa78da5e4d4925af5b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d57dda9109c373e52d5baa78da5e4d4925af5b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f99309b288733c88d5369af11a6c11dcc307ff49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f99309b288733c88d5369af11a6c11dcc307ff49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f99309b288733c88d5369af11a6c11dcc307ff49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f99309b288733c88d5369af11a6c11dcc307ff49/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9bfb28ed3c6fb702c2cab6798959679e1bbd7d09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bfb28ed3c6fb702c2cab6798959679e1bbd7d09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bfb28ed3c6fb702c2cab6798959679e1bbd7d09"}], "stats": {"total": 299, "additions": 287, "deletions": 12}, "files": [{"sha": "10c70476d913de47416b92f41fd7459a82540cb9", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99309b288733c88d5369af11a6c11dcc307ff49/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99309b288733c88d5369af11a6c11dcc307ff49/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=f99309b288733c88d5369af11a6c11dcc307ff49", "patch": "@@ -1,3 +1,9 @@\n+2018-03-13  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/84725\n+\t* c-attribs.c (handle_nonstring_attribute): Allow attribute nonstring\n+\twith all three narrow character types, including their qualified forms.\n+\n 2018-03-12  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/83456"}, {"sha": "e0630885cca3610d6cc5453819355425c175e9e1", "filename": "gcc/c-family/c-attribs.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99309b288733c88d5369af11a6c11dcc307ff49/gcc%2Fc-family%2Fc-attribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99309b288733c88d5369af11a6c11dcc307ff49/gcc%2Fc-family%2Fc-attribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-attribs.c?ref=f99309b288733c88d5369af11a6c11dcc307ff49", "patch": "@@ -3194,8 +3194,13 @@ handle_nonstring_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n \n       if (POINTER_TYPE_P (type) || TREE_CODE (type) == ARRAY_TYPE)\n \t{\n+\t  /* Accept the attribute on arrays and pointers to all three\n+\t     narrow character types.  */\n \t  tree eltype = TREE_TYPE (type);\n-\t  if (eltype == char_type_node)\n+\t  eltype = TYPE_MAIN_VARIANT (eltype);\n+\t  if (eltype == char_type_node\n+\t      || eltype == signed_char_type_node\n+\t      || eltype == unsigned_char_type_node)\n \t    return NULL_TREE;\n \t}\n "}, {"sha": "58048adf05514521948c8dc4ca912f54ea07a131", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99309b288733c88d5369af11a6c11dcc307ff49/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99309b288733c88d5369af11a6c11dcc307ff49/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=f99309b288733c88d5369af11a6c11dcc307ff49", "patch": "@@ -6080,17 +6080,17 @@ types (@pxref{Common Function Attributes},\n @item nonstring\n @cindex @code{nonstring} variable attribute\n The @code{nonstring} variable attribute specifies that an object or member\n-declaration with type array of @code{char} or pointer to @code{char} is\n-intended to store character arrays that do not necessarily contain\n-a terminating @code{NUL} character.  This is useful in detecting uses\n-of such arrays or pointers with functions that expect NUL-terminated\n-strings, and to avoid warnings when such an array or pointer is used\n-as an argument to a bounded string manipulation function such as\n-@code{strncpy}.  For example, without the attribute, GCC will issue\n-a warning for the @code{strncpy} call below because it may truncate\n-the copy without appending the terminating @code{NUL} character.  Using\n-the attribute makes it possible to suppress the warning.  However, when\n-the array is declared with the attribute the call to @code{strlen} is\n+declaration with type array of @code{char}, @code{signed char}, or\n+@code{unsigned char}, or pointer to such a type is intended to store\n+character arrays that do not necessarily contain a terminating @code{NUL}.\n+This is useful in detecting uses of such arrays or pointers with functions\n+that expect @code{NUL}-terminated strings, and to avoid warnings when such\n+an array or pointer is used as an argument to a bounded string manipulation\n+function such as @code{strncpy}.  For example, without the attribute, GCC\n+will issue a warning for the @code{strncpy} call below because it may\n+truncate the copy without appending the terminating @code{NUL} character.\n+Using the attribute makes it possible to suppress the warning.  However,\n+when the array is declared with the attribute the call to @code{strlen} is\n diagnosed because when the array doesn't contain a @code{NUL}-terminated\n string the call is undefined.  To copy, compare, of search non-string\n character arrays use the @code{memcpy}, @code{memcmp}, @code{memchr},"}, {"sha": "8f15d5fc6aad9725375ed978ff2cc545b489671d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99309b288733c88d5369af11a6c11dcc307ff49/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99309b288733c88d5369af11a6c11dcc307ff49/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f99309b288733c88d5369af11a6c11dcc307ff49", "patch": "@@ -1,3 +1,9 @@\n+2018-03-13  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/84725\n+\t* c-c++-common/Wstringop-truncation-4.c: New test.\n+\t* c-c++-common/attr-nonstring-5.c: New test.\n+\n 2018-03-13  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* gcc.target/aarch64/sve/unpack_fcvt_signed_1.c: Expect zips rather"}, {"sha": "c4ad4d6dafc6f922c734b3713684ae9392a72ba8", "filename": "gcc/testsuite/c-c++-common/Wstringop-truncation-4.c", "status": "added", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99309b288733c88d5369af11a6c11dcc307ff49/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWstringop-truncation-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99309b288733c88d5369af11a6c11dcc307ff49/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWstringop-truncation-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWstringop-truncation-4.c?ref=f99309b288733c88d5369af11a6c11dcc307ff49", "patch": "@@ -0,0 +1,127 @@\n+/* PR middle-end/84725 - enable attribute nonstring for all narrow character\n+   types\n+   Verify that -Wstringop-truncation is issued for uses of arrays and\n+   pointers to qualified forms of characters of all three types.\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall -Wstringop-truncation\" } */\n+\n+#if __cplusplus\n+extern \"C\"\n+#endif\n+char* strncpy (char*, const char*, __SIZE_TYPE__);\n+\n+#define S \"1234\"\n+\n+struct Arrays\n+{\n+  char a[4];\n+  signed char b[4];\n+  unsigned char c[4];\n+};\n+\n+void test_arrays (struct Arrays *p, const char *s)\n+{\n+  strncpy (p->a, s, sizeof p->a);           /* { dg-warning \"\\\\\\[-Wstringop-truncation\" } */\n+  strncpy ((char*)p->b, s, sizeof p->b);    /* { dg-warning \"\\\\\\[-Wstringop-truncation\" } */\n+  strncpy ((char*)p->c, s, sizeof p->c);    /* { dg-warning \"\\\\\\[-Wstringop-truncation\" } */\n+}\n+\n+struct Pointers\n+{\n+  char *p;\n+  signed char *q;\n+  unsigned char *r;\n+};\n+\n+void test_pointers (struct Pointers *p)\n+{\n+  strncpy (p->p, S, sizeof S - 1);          /* { dg-warning \"\\\\\\[-Wstringop-truncation\" } */\n+  strncpy ((char*)p->q, S, sizeof S - 1);   /* { dg-warning \"\\\\\\[-Wstringop-truncation\" } */\n+  strncpy ((char*)p->r, S, sizeof S - 1);   /* { dg-warning \"\\\\\\[-Wstringop-truncation\" } */\n+}\n+\n+struct ConstArrays\n+{\n+  const char a[4];\n+  const signed char b[4];\n+  const unsigned char c[4];\n+};\n+\n+void test_const_arrays (struct ConstArrays *p, const char *s)\n+{\n+  strncpy ((char*)p->a, s, sizeof p->a);    /* { dg-warning \"\\\\\\[-Wstringop-truncation\" } */\n+  strncpy ((char*)p->b, s, sizeof p->b);    /* { dg-warning \"\\\\\\[-Wstringop-truncation\" } */\n+  strncpy ((char*)p->c, s, sizeof p->c);    /* { dg-warning \"\\\\\\[-Wstringop-truncation\" } */\n+}\n+\n+struct ConstPointers\n+{\n+  const char *p;\n+  const signed char *q;\n+  const unsigned char *r;\n+};\n+\n+void test_const_pointers (struct ConstPointers *p)\n+{\n+  strncpy ((char*)p->p, S, sizeof S - 1);   /* { dg-warning \"\\\\\\[-Wstringop-truncation\" } */\n+  strncpy ((char*)p->q, S, sizeof S - 1);   /* { dg-warning \"\\\\\\[-Wstringop-truncation\" } */\n+  strncpy ((char*)p->r, S, sizeof S - 1);   /* { dg-warning \"\\\\\\[-Wstringop-truncation\" } */\n+}\n+\n+struct VolatileArrays\n+{\n+  volatile char a[4];\n+  volatile signed char b[4];\n+  volatile unsigned char c[4];\n+};\n+\n+void test_volatile_arrays (struct VolatileArrays *p, const char *s)\n+{\n+  strncpy ((char*)p->a, s, sizeof p->a);    /* { dg-warning \"\\\\\\[-Wstringop-truncation\" } */\n+  strncpy ((char*)p->b, s, sizeof p->b);    /* { dg-warning \"\\\\\\[-Wstringop-truncation\" } */\n+  strncpy ((char*)p->c, s, sizeof p->c);    /* { dg-warning \"\\\\\\[-Wstringop-truncation\" } */\n+}\n+\n+struct VolatilePointers\n+{\n+  volatile char *p;\n+  volatile signed char *q;\n+  volatile unsigned char *r;\n+};\n+\n+void test_volatile_pointers (struct VolatilePointers *p)\n+{\n+  strncpy ((char*)p->p, S, sizeof S - 1);   /* { dg-warning \"\\\\\\[-Wstringop-truncation\" } */\n+  strncpy ((char*)p->q, S, sizeof S - 1);   /* { dg-warning \"\\\\\\[-Wstringop-truncation\" } */\n+  strncpy ((char*)p->r, S, sizeof S - 1);   /* { dg-warning \"\\\\\\[-Wstringop-truncation\" } */\n+}\n+\n+struct ConstVolatileArrays\n+{\n+  const volatile char a[4];\n+  const volatile signed char b[4];\n+  const volatile unsigned char c[4];\n+};\n+\n+void test_const_volatile_arrays (struct ConstVolatileArrays *p, const char *s)\n+{\n+  strncpy ((char*)p->a, s, sizeof p->a);    /* { dg-warning \"\\\\\\[-Wstringop-truncation\" } */\n+  strncpy ((char*)p->b, s, sizeof p->b);    /* { dg-warning \"\\\\\\[-Wstringop-truncation\" } */\n+  strncpy ((char*)p->c, s, sizeof p->c);    /* { dg-warning \"\\\\\\[-Wstringop-truncation\" } */\n+}\n+\n+struct ConstVolatilePointers\n+{\n+  const volatile char *p;\n+  const volatile signed char *q;\n+  const volatile unsigned char *r;\n+};\n+\n+void test_const_volatile_pointers (struct ConstVolatilePointers *p)\n+{\n+  strncpy ((char*)p->p, S, sizeof S - 1);   /* { dg-warning \"\\\\\\[-Wstringop-truncation\" } */\n+  strncpy ((char*)p->q, S, sizeof S - 1);   /* { dg-warning \"\\\\\\[-Wstringop-truncation\" } */\n+  strncpy ((char*)p->r, S, sizeof S - 1);   /* { dg-warning \"\\\\\\[-Wstringop-truncation\" } */\n+}\n+\n+/* { dg-prune-output \"-Wdiscarded-qualifiers\" } */"}, {"sha": "f9b4fd92732bd07effef9d6859f214fed2aeb3ef", "filename": "gcc/testsuite/c-c++-common/attr-nonstring-5.c", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99309b288733c88d5369af11a6c11dcc307ff49/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-nonstring-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99309b288733c88d5369af11a6c11dcc307ff49/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-nonstring-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-nonstring-5.c?ref=f99309b288733c88d5369af11a6c11dcc307ff49", "patch": "@@ -0,0 +1,131 @@\n+/* PR middle-end/84725 - enable attribute nonstring for all narrow character\n+   types\n+   Verify that using attribute nonstring with all three narrow character\n+   types is accepted and using arrays and pointers to characters of all\n+   three types (including their qualified forms) declared with the\n+   attributes doesn't trigger -Wstringop-truncation warnings.\n+   { dg-do compile }\n+   { dg-options \"-O -Wall -Wstringop-truncation\" } */\n+\n+#if __cplusplus\n+extern \"C\"\n+#endif\n+char* strncpy (char*, const char*, __SIZE_TYPE__);\n+\n+#define NONSTR __attribute__ ((nonstring))\n+\n+#define S \"1234\"\n+\n+struct Arrays\n+{\n+  char NONSTR a[4];\n+  signed char NONSTR b[4];\n+  unsigned char NONSTR c[4];\n+};\n+\n+void test_arrays (struct Arrays *p, const char *s)\n+{\n+  strncpy (p->a, s, sizeof p->a);\n+  strncpy ((char*)p->b, s, sizeof p->b);\n+  strncpy ((char*)p->c, s, sizeof p->c);\n+}\n+\n+struct Pointers\n+{\n+  char NONSTR *p;\n+  signed char NONSTR *q;\n+  unsigned char NONSTR *r;\n+};\n+\n+void test_pointers (struct Pointers *p)\n+{\n+  strncpy (p->p, S, sizeof S - 1);\n+  strncpy ((char*)p->q, S, sizeof S - 1);\n+  strncpy ((char*)p->r, S, sizeof S - 1);\n+}\n+\n+struct ConstArrays\n+{\n+  const char NONSTR a[4];\n+  const signed char NONSTR b[4];\n+  const unsigned char NONSTR c[4];\n+};\n+\n+void test_const_arrays (struct ConstArrays *p, const char *s)\n+{\n+  strncpy ((char*)p->a, s, sizeof p->a);\n+  strncpy ((char*)p->b, s, sizeof p->b);\n+  strncpy ((char*)p->c, s, sizeof p->c);\n+}\n+\n+struct ConstPointers\n+{\n+  const char NONSTR *p;\n+  const signed char NONSTR *q;\n+  const unsigned char NONSTR *r;\n+};\n+\n+void test_const_pointers (struct ConstPointers *p)\n+{\n+  strncpy ((char*)p->p, S, sizeof S - 1);\n+  strncpy ((char*)p->q, S, sizeof S - 1);\n+  strncpy ((char*)p->r, S, sizeof S - 1);\n+}\n+\n+struct VolatileArrays\n+{\n+  volatile char NONSTR a[4];\n+  volatile signed char NONSTR b[4];\n+  volatile unsigned char NONSTR c[4];\n+};\n+\n+void test_volatile_arrays (struct VolatileArrays *p, const char *s)\n+{\n+  strncpy ((char*)p->a, s, sizeof p->a);\n+  strncpy ((char*)p->b, s, sizeof p->b);\n+  strncpy ((char*)p->c, s, sizeof p->c);\n+}\n+\n+struct VolatilePointers\n+{\n+  volatile char NONSTR *p;\n+  volatile signed char NONSTR *q;\n+  volatile unsigned char NONSTR *r;\n+};\n+\n+void test_volatile_pointers (struct VolatilePointers *p)\n+{\n+  strncpy ((char*)p->p, S, sizeof S - 1);\n+  strncpy ((char*)p->q, S, sizeof S - 1);\n+  strncpy ((char*)p->r, S, sizeof S - 1);\n+}\n+\n+struct ConstVolatileArrays\n+{\n+  const volatile char NONSTR a[4];\n+  const volatile signed char NONSTR b[4];\n+  const volatile unsigned char NONSTR c[4];\n+};\n+\n+void test_const_volatile_arrays (struct ConstVolatileArrays *p, const char *s)\n+{\n+  strncpy ((char*)p->a, s, sizeof p->a);\n+  strncpy ((char*)p->b, s, sizeof p->b);\n+  strncpy ((char*)p->c, s, sizeof p->c);\n+}\n+\n+struct ConstVolatilePointers\n+{\n+  const volatile char NONSTR *p;\n+  const volatile signed char NONSTR *q;\n+  const volatile unsigned char NONSTR *r;\n+};\n+\n+void test_const_volatile_pointers (struct ConstVolatilePointers *p)\n+{\n+  strncpy ((char*)p->p, S, sizeof S - 1);\n+  strncpy ((char*)p->q, S, sizeof S - 1);\n+  strncpy ((char*)p->r, S, sizeof S - 1);\n+}\n+\n+/* { dg-prune-output \"-Wdiscarded-qualifiers\" } */"}]}