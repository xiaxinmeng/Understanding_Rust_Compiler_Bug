{"sha": "15338c41de2b5b286b872820162d689f19195fec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTUzMzhjNDFkZTJiNWIyODZiODcyODIwMTYyZDY4OWYxOTE5NWZlYw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-06-06T21:41:07Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-06-06T21:41:07Z"}, "message": "Disable byte and word arithmetic, rotate, integer divide, dbcc,\n\netc. insns for TARGET_5200.\n\nFrom-SVN: r12182", "tree": {"sha": "3e946a2c92684940129bbb256ead55db2a80094a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e946a2c92684940129bbb256ead55db2a80094a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15338c41de2b5b286b872820162d689f19195fec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15338c41de2b5b286b872820162d689f19195fec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15338c41de2b5b286b872820162d689f19195fec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15338c41de2b5b286b872820162d689f19195fec/comments", "author": null, "committer": null, "parents": [{"sha": "240922421def12476ef77ed7d2b4feecd56b0a6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/240922421def12476ef77ed7d2b4feecd56b0a6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/240922421def12476ef77ed7d2b4feecd56b0a6f"}], "stats": {"total": 232, "additions": 126, "deletions": 106}, "files": [{"sha": "5be39104addbc0d1a511b9992c15021eea581bb4", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 126, "deletions": 106, "changes": 232, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15338c41de2b5b286b872820162d689f19195fec/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15338c41de2b5b286b872820162d689f19195fec/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=15338c41de2b5b286b872820162d689f19195fec", "patch": "@@ -18,6 +18,15 @@\n ;; the Free Software Foundation, 59 Temple Place - Suite 330,\n ;; Boston, MA 02111-1307, USA.\n \n+;;- Information about MCF5200 port.\n+\n+;;- The MCF5200 \"ColdFire\" architecture is a reduced version of the\n+;;- 68k ISA.  Differences include reduced support for byte and word\n+;;- operands and the removal of BCD, bitfield, rotate, and integer\n+;;- divide instructions.  The TARGET_5200 flag turns the use of the\n+;;- removed opcodes and addressing modes off.\n+;;- \n+\n \n ;;- instruction definitions\n \n@@ -333,7 +342,7 @@\n   /* ISI's assembler fails to handle tstl a0.  */\n   if (! ADDRESS_REG_P (operands[0]))\n #else\n-  if (TARGET_68020 || ! ADDRESS_REG_P (operands[0]))\n+  if (TARGET_68020 || TARGET_5200 || ! ADDRESS_REG_P (operands[0]))\n #endif\n     return \\\"tst%.l %0\\\";\n   /* If you think that the 68020 does not support tstl a0,\n@@ -507,7 +516,7 @@\n   [(set (cc0)\n \t(compare (match_operand:HI 0 \"nonimmediate_operand\" \"rnm,d,n,m,>\")\n \t\t (match_operand:HI 1 \"general_operand\" \"d,rnm,m,n,>\")))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"*\n {\n   if (GET_CODE (operands[0]) == MEM && GET_CODE (operands[1]) == MEM)\n@@ -536,7 +545,7 @@\n   [(set (cc0)\n \t(compare (match_operand:QI 0 \"nonimmediate_operand\" \"dn,md,>\")\n \t\t (match_operand:QI 1 \"general_operand\" \"dm,nd,>\")))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"*\n {\n   if (GET_CODE (operands[0]) == MEM && GET_CODE (operands[1]) == MEM)\n@@ -2228,15 +2237,15 @@\n #ifndef NO_ADDSUB_Q\n       if (INTVAL (operands[2]) > 0\n \t  && INTVAL (operands[2]) <= 8)\n-\treturn (ADDRESS_REG_P (operands[0])\n+\treturn (ADDRESS_REG_P (operands[0]) && !TARGET_5200\n \t\t? \\\"addq%.w %2,%0\\\"\n \t\t: \\\"addq%.l %2,%0\\\");\n       if (INTVAL (operands[2]) < 0\n \t  && INTVAL (operands[2]) >= -8)\n         {\n \t  operands[2] = gen_rtx (CONST_INT, VOIDmode,\n \t\t\t         - INTVAL (operands[2]));\n-\t  return (ADDRESS_REG_P (operands[0])\n+\t  return (ADDRESS_REG_P (operands[0]) && !TARGET_5200\n \t\t  ? \\\"subq%.w %2,%0\\\"\n \t\t  : \\\"subq%.l %2,%0\\\");\n \t}\n@@ -2263,7 +2272,8 @@\n #endif\n       if (ADDRESS_REG_P (operands[0])\n \t  && INTVAL (operands[2]) >= -0x8000\n-\t  && INTVAL (operands[2]) < 0x8000)\n+\t  && INTVAL (operands[2]) < 0x8000\n+\t  && !TARGET_5200)\n \treturn \\\"add%.w %2,%0\\\";\n     }\n   return \\\"add%.l %2,%0\\\";\n@@ -2274,14 +2284,14 @@\n \t(plus:SI (match_operand:SI 1 \"general_operand\" \"0\")\n \t\t (sign_extend:SI\n \t\t  (match_operand:HI 2 \"nonimmediate_operand\" \"rm\"))))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"add%.w %2,%0\")\n \n (define_insn \"addhi3\"\n   [(set (match_operand:HI 0 \"general_operand\" \"=m,r\")\n \t(plus:HI (match_operand:HI 1 \"general_operand\" \"%0,0\")\n \t\t (match_operand:HI 2 \"general_operand\" \"dn,rmn\")))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"*\n {\n #ifndef NO_ADDSUB_Q\n@@ -2341,7 +2351,7 @@\n   [(set (strict_low_part (match_operand:HI 0 \"general_operand\" \"+m,d\"))\n \t(plus:HI (match_dup 0)\n \t\t (match_operand:HI 1 \"general_operand\" \"dn,rmn\")))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"*\n {\n #ifndef NO_ADDSUB_Q\n@@ -2395,7 +2405,7 @@\n   [(set (strict_low_part (match_operand:HI 0 \"general_operand\" \"+m,d\"))\n \t(plus:HI (match_operand:HI 1 \"general_operand\" \"dn,rmn\")\n \t\t (match_dup 0)))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"*\n {\n #ifndef NO_ADDSUB_Q\n@@ -2449,7 +2459,7 @@\n   [(set (match_operand:QI 0 \"general_operand\" \"=m,d\")\n \t(plus:QI (match_operand:QI 1 \"general_operand\" \"%0,0\")\n \t\t (match_operand:QI 2 \"general_operand\" \"dn,dmn\")))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"*\n {\n #ifndef NO_ADDSUB_Q\n@@ -2476,7 +2486,7 @@\n   [(set (strict_low_part (match_operand:QI 0 \"general_operand\" \"+m,d\"))\n \t(plus:QI (match_dup 0)\n \t\t (match_operand:QI 1 \"general_operand\" \"dn,dmn\")))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"*\n {\n #ifndef NO_ADDSUB_Q\n@@ -2503,7 +2513,7 @@\n   [(set (strict_low_part (match_operand:QI 0 \"general_operand\" \"+m,d\"))\n \t(plus:QI (match_operand:QI 1 \"general_operand\" \"dn,dmn\")\n \t\t (match_dup 0)))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"*\n {\n #ifndef NO_ADDSUB_Q\n@@ -2739,35 +2749,35 @@\n \t(minus:SI (match_operand:SI 1 \"general_operand\" \"0\")\n \t\t  (sign_extend:SI\n \t\t   (match_operand:HI 2 \"nonimmediate_operand\" \"rm\"))))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"sub%.w %2,%0\")\n \n (define_insn \"subhi3\"\n   [(set (match_operand:HI 0 \"general_operand\" \"=m,r\")\n \t(minus:HI (match_operand:HI 1 \"general_operand\" \"0,0\")\n \t\t  (match_operand:HI 2 \"general_operand\" \"dn,rmn\")))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"sub%.w %2,%0\")\n \n (define_insn \"\"\n   [(set (strict_low_part (match_operand:HI 0 \"general_operand\" \"+m,d\"))\n \t(minus:HI (match_dup 0)\n \t\t  (match_operand:HI 1 \"general_operand\" \"dn,rmn\")))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"sub%.w %1,%0\")\n \n (define_insn \"subqi3\"\n   [(set (match_operand:QI 0 \"general_operand\" \"=m,d\")\n \t(minus:QI (match_operand:QI 1 \"general_operand\" \"0,0\")\n \t\t  (match_operand:QI 2 \"general_operand\" \"dn,dmn\")))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"sub%.b %2,%0\")\n \n (define_insn \"\"\n   [(set (strict_low_part (match_operand:QI 0 \"general_operand\" \"+m,d\"))\n \t(minus:QI (match_dup 0)\n \t\t  (match_operand:QI 1 \"general_operand\" \"dn,dmn\")))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"sub%.b %1,%0\")\n \n (define_expand \"subdf3\"\n@@ -2979,7 +2989,7 @@\n \t  (truncate:SI (lshiftrt:DI (mult:DI (zero_extend:DI (match_dup 1))\n \t\t\t\t\t     (zero_extend:DI (match_dup 2)))\n \t\t\t\t    (const_int 32))))])]\n-  \"TARGET_68020 && !TARGET_68060\"\n+  \"TARGET_68020 && !TARGET_68060 && !TARGET_5200\"\n   \"\")\n \n (define_insn \"\"\n@@ -2990,7 +3000,7 @@\n \t(truncate:SI (lshiftrt:DI (mult:DI (zero_extend:DI (match_dup 1))\n \t\t\t\t\t   (zero_extend:DI (match_dup 2)))\n \t\t\t\t  (const_int 32))))]\n-  \"TARGET_68020 && !TARGET_68060\"\n+  \"TARGET_68020 && !TARGET_68060 && !TARGET_5200\"\n   \"mulu%.l %2,%3:%0\")\n \n ; Match immediate case.  For 2.4 only match things < 2^31.\n@@ -3005,7 +3015,7 @@\n \t(truncate:SI (lshiftrt:DI (mult:DI (zero_extend:DI (match_dup 1))\n \t\t\t\t\t   (match_dup 2))\n \t\t\t\t  (const_int 32))))]\n-  \"TARGET_68020 && !TARGET_68060\n+  \"TARGET_68020 && !TARGET_68060 && !TARGET_5200\n    && (unsigned) INTVAL (operands[2]) <= 0x7fffffff\"\n   \"mulu%.l %2,%3:%0\")\n \n@@ -3018,7 +3028,7 @@\n \t  (truncate:SI (lshiftrt:DI (mult:DI (sign_extend:DI (match_dup 1))\n \t\t\t\t\t     (sign_extend:DI (match_dup 2)))\n \t\t\t\t    (const_int 32))))])]\n-  \"TARGET_68020 && !TARGET_68060\"\n+  \"TARGET_68020 && !TARGET_68060 && !TARGET_5200\"\n   \"\")\n \n (define_insn \"\"\n@@ -3029,7 +3039,7 @@\n \t(truncate:SI (lshiftrt:DI (mult:DI (sign_extend:DI (match_dup 1))\n \t\t\t\t\t   (sign_extend:DI (match_dup 2)))\n \t\t\t\t  (const_int 32))))]\n-  \"TARGET_68020 && !TARGET_68060\"\n+  \"TARGET_68020 && !TARGET_68060 && !TARGET_5200\"\n   \"muls%.l %2,%3:%0\")\n \n (define_insn \"\"\n@@ -3040,7 +3050,7 @@\n \t(truncate:SI (lshiftrt:DI (mult:DI (sign_extend:DI (match_dup 1))\n \t\t\t\t\t   (match_dup 2))\n \t\t\t\t  (const_int 32))))]\n-  \"TARGET_68020 && !TARGET_68060\n+  \"TARGET_68020 && !TARGET_68060 && !TARGET_5200\n    /* This test is a noop on 32 bit machines,\n       but important for a cross-compiler hosted on 64-bit machines.  */\n    && INTVAL (operands[2]) <= 0x7fffffff\n@@ -3056,7 +3066,7 @@\n \t\t     (zero_extend:DI (match_operand:SI 2 \"general_operand\" \"\")))\n \t    (const_int 32))))\n      (clobber (match_dup 3))])]\n-  \"TARGET_68020 && !TARGET_68060\"\n+  \"TARGET_68020 && !TARGET_68060 && !TARGET_5200\"\n   \"\n {\n   operands[3] = gen_reg_rtx (SImode);\n@@ -3080,7 +3090,7 @@\n \t\t   (zero_extend:DI (match_operand:SI 3 \"nonimmediate_operand\" \"dm\")))\n \t  (const_int 32))))\n    (clobber (match_operand:SI 1 \"register_operand\" \"=d\"))]\n-  \"TARGET_68020 && !TARGET_68060\"\n+  \"TARGET_68020 && !TARGET_68060 && !TARGET_5200\"\n   \"mulu%.l %3,%0:%1\")\n \n (define_insn \"const_umulsi3_highpart\"\n@@ -3091,7 +3101,7 @@\n \t\t   (match_operand 3 \"const_uint32_operand\" \"\"))\n \t  (const_int 32))))\n    (clobber (match_operand:SI 1 \"register_operand\" \"=d\"))]\n-  \"TARGET_68020 && !TARGET_68060\"\n+  \"TARGET_68020 && !TARGET_68060 && !TARGET_5200\"\n   \"mulu%.l %3,%0:%1\")\n \n (define_expand \"smulsi3_highpart\"\n@@ -3103,7 +3113,7 @@\n \t\t     (sign_extend:DI (match_operand:SI 2 \"general_operand\" \"\")))\n \t    (const_int 32))))\n      (clobber (match_dup 3))])]\n-  \"TARGET_68020 && !TARGET_68060\"\n+  \"TARGET_68020 && !TARGET_68060 && !TARGET_5200\"\n   \"\n {\n   operands[3] = gen_reg_rtx (SImode);\n@@ -3127,7 +3137,7 @@\n \t\t   (sign_extend:DI (match_operand:SI 3 \"nonimmediate_operand\" \"dm\")))\n \t  (const_int 32))))\n    (clobber (match_operand:SI 1 \"register_operand\" \"=d\"))]\n-  \"TARGET_68020 && !TARGET_68060\"\n+  \"TARGET_68020 && !TARGET_68060 && !TARGET_5200\"\n   \"muls%.l %3,%0:%1\")\n \n (define_insn \"const_smulsi3_highpart\"\n@@ -3138,7 +3148,7 @@\n \t\t   (match_operand 3 \"const_sint32_operand\" \"\"))\n \t  (const_int 32))))\n    (clobber (match_operand:SI 1 \"register_operand\" \"=d\"))]\n-  \"TARGET_68020 && !TARGET_68060\"\n+  \"TARGET_68020 && !TARGET_68060 && !TARGET_5200\"\n   \"muls%.l %3,%0:%1\")\n \n (define_expand \"muldf3\"\n@@ -3438,7 +3448,7 @@\n \t\t(match_operand:SI 2 \"general_operand\" \"dmsK\")))\n    (set (match_operand:SI 3 \"general_operand\" \"=d\")\n \t(mod:SI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_68020\"\n+  \"TARGET_68020 && !TARGET_5200\"\n   \"*\n {\n   if (find_reg_note (insn, REG_UNUSED, operands[3]))\n@@ -3453,7 +3463,7 @@\n \t\t (match_operand:SI 2 \"general_operand\" \"dmsK\")))\n    (set (match_operand:SI 3 \"general_operand\" \"=d\")\n \t(umod:SI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_68020\"\n+  \"TARGET_68020 && !TARGET_5200\"\n   \"*\n {\n   if (find_reg_note (insn, REG_UNUSED, operands[3]))\n@@ -3468,7 +3478,7 @@\n \t\t(match_operand:HI 2 \"general_operand\" \"dmsK\")))\n    (set (match_operand:HI 3 \"general_operand\" \"=d\")\n \t(mod:HI (match_dup 1) (match_dup 2)))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"*\n {\n #ifdef MOTOROLA\n@@ -3491,7 +3501,7 @@\n \t\t (match_operand:HI 2 \"general_operand\" \"dmsK\")))\n    (set (match_operand:HI 3 \"general_operand\" \"=d\")\n \t(umod:HI (match_dup 1) (match_dup 2)))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"*\n {\n #ifdef MOTOROLA\n@@ -3524,7 +3534,8 @@\n   if (GET_CODE (operands[2]) == CONST_INT\n       && (INTVAL (operands[2]) | 0xffff) == 0xffffffff\n       && (DATA_REG_P (operands[0])\n-\t  || offsettable_memref_p (operands[0])))\n+\t  || offsettable_memref_p (operands[0]))\n+      && !TARGET_5200)\n     {\n       if (GET_CODE (operands[0]) != REG)\n         operands[0] = adj_offsettable_operand (operands[0], 2);\n@@ -3561,42 +3572,42 @@\n   [(set (match_operand:HI 0 \"general_operand\" \"=m,d\")\n \t(and:HI (match_operand:HI 1 \"general_operand\" \"%0,0\")\n \t\t(match_operand:HI 2 \"general_operand\" \"dn,dmn\")))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"and%.w %2,%0\")\n \n (define_insn \"\"\n   [(set (strict_low_part (match_operand:HI 0 \"general_operand\" \"+m,d\"))\n \t(and:HI (match_dup 0)\n \t\t(match_operand:HI 1 \"general_operand\" \"dn,dmn\")))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"and%.w %1,%0\")\n \n (define_insn \"\"\n   [(set (strict_low_part (match_operand:HI 0 \"general_operand\" \"+m,d\"))\n \t(and:HI (match_operand:HI 1 \"general_operand\" \"dn,dmn\")\n \t\t(match_dup 0)))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"and%.w %1,%0\")\n \n (define_insn \"andqi3\"\n   [(set (match_operand:QI 0 \"general_operand\" \"=m,d\")\n \t(and:QI (match_operand:QI 1 \"general_operand\" \"%0,0\")\n \t\t(match_operand:QI 2 \"general_operand\" \"dn,dmn\")))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"and%.b %2,%0\")\n \n (define_insn \"\"\n   [(set (strict_low_part (match_operand:QI 0 \"general_operand\" \"+m,d\"))\n \t(and:QI (match_dup 0)\n \t\t(match_operand:QI 1 \"general_operand\" \"dn,dmn\")))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"and%.b %1,%0\")\n \n (define_insn \"\"\n   [(set (strict_low_part (match_operand:QI 0 \"general_operand\" \"+m,d\"))\n \t(and:QI (match_operand:QI 1 \"general_operand\" \"dn,dmn\")\n \t\t(match_dup 0)))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"and%.b %1,%0\")\n \f\n ;; inclusive-or instructions\n@@ -3612,7 +3623,8 @@\n   if (GET_CODE (operands[2]) == CONST_INT\n       && INTVAL (operands[2]) >> 16 == 0\n       && (DATA_REG_P (operands[0])\n-\t  || offsettable_memref_p (operands[0])))\n+\t  || offsettable_memref_p (operands[0]))\n+      && !TARGET_5200)\n     {\n       if (GET_CODE (operands[0]) != REG)\n         operands[0] = adj_offsettable_operand (operands[0], 2);\n@@ -3644,49 +3656,49 @@\n   [(set (match_operand:HI 0 \"general_operand\" \"=m,d\")\n \t(ior:HI (match_operand:HI 1 \"general_operand\" \"%0,0\")\n \t\t(match_operand:HI 2 \"general_operand\" \"dn,dmn\")))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"or%.w %2,%0\")\n \n (define_insn \"\"\n   [(set (strict_low_part (match_operand:HI 0 \"general_operand\" \"+m,d\"))\n \t(ior:HI (match_dup 0)\n \t\t(match_operand:HI 1 \"general_operand\" \"dn,dmn\")))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"or%.w %1,%0\")\n \n (define_insn \"\"\n   [(set (strict_low_part (match_operand:HI 0 \"general_operand\" \"+m,d\"))\n \t(ior:HI (match_operand:HI 1 \"general_operand\" \"dn,dmn\")\n \t\t(match_dup 0)))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"or%.w %1,%0\")\n \n (define_insn \"iorqi3\"\n   [(set (match_operand:QI 0 \"general_operand\" \"=m,d\")\n \t(ior:QI (match_operand:QI 1 \"general_operand\" \"%0,0\")\n \t\t(match_operand:QI 2 \"general_operand\" \"dn,dmn\")))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"or%.b %2,%0\")\n \n (define_insn \"\"\n   [(set (strict_low_part (match_operand:QI 0 \"general_operand\" \"+m,d\"))\n \t(ior:QI (match_dup 0)\n \t\t(match_operand:QI 1 \"general_operand\" \"dn,dmn\")))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"or%.b %1,%0\")\n \n (define_insn \"\"\n   [(set (strict_low_part (match_operand:QI 0 \"general_operand\" \"+m,d\"))\n \t(ior:QI (match_operand:QI 1 \"general_operand\" \"dn,dmn\")\n \t\t(match_dup 0)))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"or%.b %1,%0\")\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=o,d\")\n     (ior:SI (zero_extend:SI (match_operand 1 \"general_operand\" \"dn,dmn\"))\n         (match_operand:SI 2 \"general_operand\" \"0,0\")))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"*\n {\n   int byte_mode;\n@@ -3712,7 +3724,8 @@\n {\n   if (GET_CODE (operands[2]) == CONST_INT\n       && INTVAL (operands[2]) >> 16 == 0\n-      && (offsettable_memref_p (operands[0]) || DATA_REG_P (operands[0])))\n+      && (offsettable_memref_p (operands[0]) || DATA_REG_P (operands[0]))\n+      && !TARGET_5200)\n     {\n       if (! DATA_REG_P (operands[0]))\n \toperands[0] = adj_offsettable_operand (operands[0], 2);\n@@ -3727,43 +3740,42 @@\n   [(set (match_operand:HI 0 \"general_operand\" \"=dm\")\n \t(xor:HI (match_operand:HI 1 \"general_operand\" \"%0\")\n \t\t(match_operand:HI 2 \"general_operand\" \"dn\")))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"eor%.w %2,%0\")\n \n (define_insn \"\"\n   [(set (strict_low_part (match_operand:HI 0 \"general_operand\" \"+dm\"))\n \t(xor:HI (match_dup 0)\n \t\t(match_operand:HI 1 \"general_operand\" \"dn\")))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"eor%.w %1,%0\")\n \n-\n (define_insn \"\"\n   [(set (strict_low_part (match_operand:HI 0 \"general_operand\" \"+dm\"))\n \t(xor:HI (match_operand:HI 1 \"general_operand\" \"dn\")\n \t\t(match_dup 0)))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"eor%.w %1,%0\")\n \n (define_insn \"xorqi3\"\n   [(set (match_operand:QI 0 \"general_operand\" \"=dm\")\n \t(xor:QI (match_operand:QI 1 \"general_operand\" \"%0\")\n \t\t(match_operand:QI 2 \"general_operand\" \"dn\")))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"eor%.b %2,%0\")\n \n (define_insn \"\"\n   [(set (strict_low_part (match_operand:QI 0 \"general_operand\" \"+dm\"))\n \t(xor:QI (match_dup 0)\n \t\t(match_operand:QI 1 \"general_operand\" \"dn\")))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"eor%.b %1,%0\")\n \n (define_insn \"\"\n   [(set (strict_low_part (match_operand:QI 0 \"general_operand\" \"+dm\"))\n \t(xor:QI (match_operand:QI 1 \"general_operand\" \"dn\")\n \t\t(match_dup 0)))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"eor%.b %1,%0\")\n \f\n ;; negation instructions\n@@ -3780,10 +3792,7 @@\n     operands[1] = gen_rtx (REG, SImode, REGNO (operands[0]) + 1);\n   else\n     operands[1] = adj_offsettable_operand (operands[0], 4);\n-  if (ADDRESS_REG_P (operands[0]))\n-    return \\\"exg %/d0,%1\\;neg%.l %/d0\\;exg %/d0,%1\\;exg %/d0,%0\\;negx%.l %/d0\\;exg %/d0,%0\\\";\n-  else\n-    return \\\"neg%.l %1\\;negx%.l %0\\\";\n+  return \\\"neg%.l %1\\;negx%.l %0\\\";\n } \")\n \n (define_insn \"negsi2\"\n@@ -3795,25 +3804,25 @@\n (define_insn \"neghi2\"\n   [(set (match_operand:HI 0 \"general_operand\" \"=dm\")\n \t(neg:HI (match_operand:HI 1 \"general_operand\" \"0\")))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"neg%.w %0\")\n \n (define_insn \"\"\n   [(set (strict_low_part (match_operand:HI 0 \"general_operand\" \"+dm\"))\n \t(neg:HI (match_dup 0)))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"neg%.w %0\")\n \n (define_insn \"negqi2\"\n   [(set (match_operand:QI 0 \"general_operand\" \"=dm\")\n \t(neg:QI (match_operand:QI 1 \"general_operand\" \"0\")))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"neg%.b %0\")\n \n (define_insn \"\"\n   [(set (strict_low_part (match_operand:QI 0 \"general_operand\" \"+dm\"))\n \t(neg:QI (match_dup 0)))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"neg%.b %0\")\n \n ;; If using software floating point, just flip the sign bit.\n@@ -4076,25 +4085,25 @@\n (define_insn \"one_cmplhi2\"\n   [(set (match_operand:HI 0 \"general_operand\" \"=dm\")\n \t(not:HI (match_operand:HI 1 \"general_operand\" \"0\")))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"not%.w %0\")\n \n (define_insn \"\"\n   [(set (strict_low_part (match_operand:HI 0 \"general_operand\" \"+dm\"))\n \t(not:HI (match_dup 0)))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"not%.w %0\")\n \n (define_insn \"one_cmplqi2\"\n   [(set (match_operand:QI 0 \"general_operand\" \"=dm\")\n \t(not:QI (match_operand:QI 1 \"general_operand\" \"0\")))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"not%.b %0\")\n \n (define_insn \"\"\n   [(set (strict_low_part (match_operand:QI 0 \"general_operand\" \"+dm\"))\n \t(not:QI (match_dup 0)))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"not%.b %0\")\n \f\n ;; arithmetic shift instructions\n@@ -4232,7 +4241,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n \t(ashift:SI (match_operand:SI 1 \"register_operand\" \"0\")\n \t\t   (match_operand:SI 2 \"const_int_operand\" \"n\")))]\n-  \"(! TARGET_68020\n+  \"(! TARGET_68020 && !TARGET_5200\n     && INTVAL (operands[2]) > 16 && INTVAL (operands[2]) <= 24)\"\n   \"*\n {\n@@ -4261,28 +4270,28 @@\n   [(set (match_operand:HI 0 \"register_operand\" \"=d\")\n \t(ashift:HI (match_operand:HI 1 \"register_operand\" \"0\")\n \t\t   (match_operand:HI 2 \"general_operand\" \"dI\")))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"lsl%.w %2,%0\")\n \n (define_insn \"\"\n   [(set (strict_low_part (match_operand:HI 0 \"register_operand\" \"+d\"))\n \t(ashift:HI (match_dup 0)\n \t\t   (match_operand:HI 1 \"general_operand\" \"dI\")))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"lsl%.w %1,%0\")\n \n (define_insn \"ashlqi3\"\n   [(set (match_operand:QI 0 \"register_operand\" \"=d\")\n \t(ashift:QI (match_operand:QI 1 \"register_operand\" \"0\")\n \t\t   (match_operand:QI 2 \"general_operand\" \"dI\")))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"lsl%.b %2,%0\")\n \n (define_insn \"\"\n   [(set (strict_low_part (match_operand:QI 0 \"register_operand\" \"+d\"))\n \t(ashift:QI (match_dup 0)\n \t\t   (match_operand:QI 1 \"general_operand\" \"dI\")))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"lsl%.b %1,%0\")\n \n ;; On all 68k models, this makes faster code in a special case.\n@@ -4300,7 +4309,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n \t(ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"0\")\n \t\t     (match_operand:SI 2 \"const_int_operand\" \"n\")))]\n-  \"(! TARGET_68020\n+  \"(! TARGET_68020 && !TARGET_5200\n     && INTVAL (operands[2]) > 16 && INTVAL (operands[2]) <= 24)\"\n   \"*\n {\n@@ -4369,9 +4378,10 @@\n   [(set (match_operand:DI 0 \"general_operand\" \"=d\")\n \t(ashiftrt:DI (match_operand:DI 1 \"general_operand\" \"0\")\n \t\t     (match_operand 2 \"const_int_operand\" \"n\")))]\n-  \"(INTVAL (operands[2]) == 1 || INTVAL (operands[2]) == 2\n+  \"!TARGET_5200 \n+    && ((INTVAL (operands[2]) == 1 || INTVAL (operands[2]) == 2\n     || INTVAL (operands[2]) == 3 || INTVAL (operands[2]) == 8\n-    || INTVAL (operands[2]) == 16 || INTVAL (operands[2]) == 63)\"\n+    || INTVAL (operands[2]) == 16 || INTVAL (operands[2]) == 63))\"\n   \"*\n {\n   operands[1] = gen_rtx (REG, SImode, REGNO (operands[0]) + 1);\n@@ -4435,21 +4445,21 @@\n   [(set (strict_low_part (match_operand:HI 0 \"register_operand\" \"+d\"))\n \t(ashiftrt:HI (match_dup 0)\n \t\t     (match_operand:HI 1 \"general_operand\" \"dI\")))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"asr%.w %1,%0\")\n \n (define_insn \"ashrqi3\"\n   [(set (match_operand:QI 0 \"register_operand\" \"=d\")\n \t(ashiftrt:QI (match_operand:QI 1 \"register_operand\" \"0\")\n \t\t     (match_operand:QI 2 \"general_operand\" \"dI\")))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"asr%.b %2,%0\")\n \n (define_insn \"\"\n   [(set (strict_low_part (match_operand:QI 0 \"register_operand\" \"+d\"))\n \t(ashiftrt:QI (match_dup 0)\n \t\t     (match_operand:QI 1 \"general_operand\" \"dI\")))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"asr%.b %1,%0\")\n \f\n ;; logical shift instructions\n@@ -4526,9 +4536,10 @@\n   [(set (match_operand:DI 0 \"general_operand\" \"=d\")\n \t(lshiftrt:DI (match_operand:DI 1 \"general_operand\" \"0\")\n \t\t     (match_operand 2 \"const_int_operand\" \"n\")))]\n-  \"(INTVAL (operands[2]) == 1 || INTVAL (operands[2]) == 2\n+  \"!TARGET_5200\n+    && ((INTVAL (operands[2]) == 1 || INTVAL (operands[2]) == 2\n     || INTVAL (operands[2]) == 3 || INTVAL (operands[2]) == 8\n-    || INTVAL (operands[2]) == 16 || INTVAL (operands[2]) == 63)\"\n+    || INTVAL (operands[2]) == 16 || INTVAL (operands[2]) == 63))\"\n   \"*\n {\n   operands[1] = gen_rtx (REG, SImode, REGNO (operands[0]) + 1);\n@@ -4551,7 +4562,7 @@\n   [(set (match_operand:DI 0 \"general_operand\" \"\")\n \t(lshiftrt:DI (match_operand:DI 1 \"general_operand\" \"\")\n \t\t     (match_operand 2 \"const_int_operand\" \"\")))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"\n {\n   if (GET_CODE (operands[2]) != CONST_INT\n@@ -4593,7 +4604,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n \t(lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"0\")\n \t\t     (match_operand:SI 2 \"const_int_operand\" \"n\")))]\n-  \"(! TARGET_68020\n+  \"(! TARGET_68020 && !TARGET_5200\n     && INTVAL (operands[2]) > 16 && INTVAL (operands[2]) <= 24)\"\n   \"*\n {\n@@ -4613,28 +4624,28 @@\n   [(set (match_operand:HI 0 \"register_operand\" \"=d\")\n \t(lshiftrt:HI (match_operand:HI 1 \"register_operand\" \"0\")\n \t\t     (match_operand:HI 2 \"general_operand\" \"dI\")))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"lsr%.w %2,%0\")\n \n (define_insn \"\"\n   [(set (strict_low_part (match_operand:HI 0 \"register_operand\" \"+d\"))\n \t(lshiftrt:HI (match_dup 0)\n \t\t     (match_operand:HI 1 \"general_operand\" \"dI\")))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"lsr%.w %1,%0\")\n \n (define_insn \"lshrqi3\"\n   [(set (match_operand:QI 0 \"register_operand\" \"=d\")\n \t(lshiftrt:QI (match_operand:QI 1 \"register_operand\" \"0\")\n \t\t     (match_operand:QI 2 \"general_operand\" \"dI\")))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"lsr%.b %2,%0\")\n \n (define_insn \"\"\n   [(set (strict_low_part (match_operand:QI 0 \"register_operand\" \"+d\"))\n \t(lshiftrt:QI (match_dup 0)\n \t\t     (match_operand:QI 1 \"general_operand\" \"dI\")))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"lsr%.b %1,%0\")\n \f\n ;; rotate instructions\n@@ -4643,71 +4654,71 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n \t(rotate:SI (match_operand:SI 1 \"register_operand\" \"0\")\n \t\t   (match_operand:SI 2 \"general_operand\" \"dI\")))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"rol%.l %2,%0\")\n \n (define_insn \"rotlhi3\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=d\")\n \t(rotate:HI (match_operand:HI 1 \"register_operand\" \"0\")\n \t\t   (match_operand:HI 2 \"general_operand\" \"dI\")))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"rol%.w %2,%0\")\n \n \n (define_insn \"\"\n   [(set (strict_low_part (match_operand:HI 0 \"register_operand\" \"+d\"))\n \t(rotate:HI (match_dup 0)\n \t\t   (match_operand:HI 1 \"general_operand\" \"dI\")))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"rol%.w %1,%0\")\n \n (define_insn \"rotlqi3\"\n   [(set (match_operand:QI 0 \"register_operand\" \"=d\")\n \t(rotate:QI (match_operand:QI 1 \"register_operand\" \"0\")\n \t\t   (match_operand:QI 2 \"general_operand\" \"dI\")))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"rol%.b %2,%0\")\n \n (define_insn \"\"\n   [(set (strict_low_part (match_operand:QI 0 \"register_operand\" \"+d\"))\n \t(rotate:QI (match_dup 0)\n \t\t   (match_operand:QI 1 \"general_operand\" \"dI\")))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"rol%.b %1,%0\")\n \n (define_insn \"rotrsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n \t(rotatert:SI (match_operand:SI 1 \"register_operand\" \"0\")\n \t\t     (match_operand:SI 2 \"general_operand\" \"dI\")))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"ror%.l %2,%0\")\n \n (define_insn \"rotrhi3\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=d\")\n \t(rotatert:HI (match_operand:HI 1 \"register_operand\" \"0\")\n \t\t     (match_operand:HI 2 \"general_operand\" \"dI\")))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"ror%.w %2,%0\")\n \n (define_insn \"\"\n   [(set (strict_low_part (match_operand:HI 0 \"register_operand\" \"+d\"))\n \t(rotatert:HI (match_dup 0)\n \t\t     (match_operand:HI 1 \"general_operand\" \"dI\")))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"ror%.w %1,%0\")\n \n (define_insn \"rotrqi3\"\n   [(set (match_operand:QI 0 \"register_operand\" \"=d\")\n \t(rotatert:QI (match_operand:QI 1 \"register_operand\" \"0\")\n \t\t     (match_operand:QI 2 \"general_operand\" \"dI\")))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"ror%.b %2,%0\")\n \n (define_insn \"\"\n   [(set (strict_low_part (match_operand:QI 0 \"register_operand\" \"+d\"))\n \t(rotatert:QI (match_dup 0)\n \t\t     (match_operand:QI 1 \"general_operand\" \"dI\")))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"ror%.b %1,%0\")\n \f\n \n@@ -5826,7 +5837,7 @@\n    (set (match_dup 0)\n \t(plus:HI (match_dup 0)\n \t\t (const_int -1)))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"*\n {\n   CC_STATUS_INIT;\n@@ -5869,7 +5880,7 @@\n    (set (match_dup 0)\n \t(plus:SI (match_dup 0)\n \t\t (const_int -1)))]\n-  \"\"\n+  \"!TARGET_5200\"\n   \"*\n {\n   CC_STATUS_INIT;\n@@ -5916,7 +5927,7 @@\n    (set (match_dup 0)\n \t(plus:HI (match_dup 0)\n \t\t (const_int -1)))]\n-  \"find_reg_note (insn, REG_NONNEG, 0)\"\n+  \"!TARGET_5200 && find_reg_note (insn, REG_NONNEG, 0)\"\n   \"*\n {\n   CC_STATUS_INIT;\n@@ -5975,7 +5986,7 @@\n    (set (match_dup 0)\n \t(plus:SI (match_dup 0)\n \t\t (const_int -1)))]\n-  \"find_reg_note (insn, REG_NONNEG, 0)\"\n+  \"!TARGET_5200 && find_reg_note (insn, REG_NONNEG, 0)\"\n   \"*\n {\n   CC_STATUS_INIT;\n@@ -6320,6 +6331,9 @@\n       rtx xoperands[2];\n       xoperands[0] = stack_pointer_rtx;\n       xoperands[1] = gen_rtx (CONST_INT, VOIDmode, INTVAL (operands[0]) - 4);\n+      if (TARGET_5200)\n+        output_asm_insn (\\\"add%.l %1,%0\\\", xoperands);\n+      else\n #ifndef NO_ADDSUB_Q\n       if (INTVAL (xoperands[1]) <= 8)\n         output_asm_insn (\\\"addq%.w %1,%0\\\", xoperands);\n@@ -6357,9 +6371,12 @@\n       rtx xoperands[2];\n       xoperands[0] = stack_pointer_rtx;\n       xoperands[1] = gen_rtx (CONST_INT, VOIDmode, INTVAL (operands[0]) - 4);\n+      if (TARGET_5200)\n+        output_asm_insn (\\\"add%.l %1,%0\\\", xoperands);\n+      else\n #ifndef NO_ADDSUB_Q\n       if (INTVAL (xoperands[1]) <= 8)\n-        output_asm_insn (\\\"addq%.w %1,%0\\\", xoperands);\n+\t  output_asm_insn (\\\"addq%.w %1,%0\\\", xoperands);\n       else if (INTVAL (xoperands[1]) <= 16 && TARGET_68020)\n \t{\n \t  xoperands[1] = gen_rtx (CONST_INT, VOIDmode,\n@@ -6398,7 +6415,10 @@\n \t       gen_rtx (PLUS, VOIDmode, stack_pointer_rtx,\n \t\t\tgen_rtx (CONST_INT, VOIDmode, 3)));\n   xoperands[3] = stack_pointer_rtx;\n-  output_asm_insn (\\\"subq%.w %#4,%3\\;move%.b %1,%2\\\", xoperands);\n+  if (!TARGET_5200)\n+    output_asm_insn (\\\"subq%.w %#4,%3\\;move%.b %1,%2\\\", xoperands);\n+  else\n+    output_asm_insn (\\\"subq%.l %#4,%3\\;move%.b %1,%2\\\", xoperands);\n   return \\\"\\\";\n }\")\n \n@@ -6457,7 +6477,7 @@\n      (set (match_dup 0)\n \t  (plus:HI (match_dup 0)\n \t\t   (const_int -1)))])]\n-  \"DATA_REG_P (operands[0]) && ! flags_in_68881 ()\"\n+  \"!TARGET_5200 && DATA_REG_P (operands[0]) && ! flags_in_68881 ()\"\n   \"*\n {\n   CC_STATUS_INIT;\n@@ -6481,7 +6501,7 @@\n      (set (match_dup 0)\n \t  (plus:SI (match_dup 0)\n \t\t   (const_int -1)))])]\n-  \"DATA_REG_P (operands[0]) && ! flags_in_68881 ()\"\n+  \"!TARGET_5200 && DATA_REG_P (operands[0]) && ! flags_in_68881 ()\"\n   \"*\n {\n   CC_STATUS_INIT;"}]}