{"sha": "bfd93a72d259d4f372846f6f9ad6adbf4bb7f367", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmZkOTNhNzJkMjU5ZDRmMzcyODQ2ZjZmOWFkNmFkYmY0YmI3ZjM2Nw==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@redhat.com", "date": "2012-04-30T11:43:02Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2012-04-30T11:43:02Z"}, "message": "Fix location for static class members\n\nConsider the test case g++.dg/other/offsetof5.C:\n\n    #include <stddef.h>\n\n    struct A\n    {\n      char c;\n      int &i;\n    };\n\n    int j = offsetof (A, i);\t\t// { dg-warning \"invalid access|offsetof\" }\n\n    template <typename T>\n    struct S\n    {\n      T h;\n      T &i;\n      static const int j = offsetof (S, i);\t// { dg-warning \"invalid access|offsetof\" }\n    };\n\n    int k = S<int>::j;\t\t\t// { dg-message \"required from here\" }\n\nThe second warning (that involves the instantiation of the S template)\nis not emitted when -ftrack-macro-expansion is on.\n\nThis is because during the instantiation of the member j of S\ntemplate, the location that is used for the warning is the one for the\nDECL j (set by instantiate_decl).  And that location is inaccurately\nset to the locus of 'offsetof', which is a macro defined in a system\nheader, so it's discarded by the diagnostics machinery.\n\nNote that when we reach the point where we emit the warning in\nbuild_class_member_access_expr offsetof expression has long been\nfolded, so we cannot use e.g, the location of the ')' token that would\nhave been in the source code.  So I believe the location of 'j' is the\nbest we can get at this point.\n\nThe patch below sets the location of the DECL for 'j' to what I\nbelieve is its precise location; with that, the test case passes with\nand without -ftrack-macro-expansion.  But I had to adjust\ng++.dg/template/sfinae6_neg.C for that.\n\nTested on x86_64-unknown-linux-gnu against trunk.\n\ngcc/cp\n\n\t* decl.c (grokdeclarator): Use the location carried by the\n\tdeclarator for the DECL of the static class member.\n\ngcc/testsuite/\n\n\t* g++.dg/template/sfinae6_neg.C: Adjust.\n\nFrom-SVN: r186974", "tree": {"sha": "0b68390326b658c1ca86316a8dc1f8b29617d095", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b68390326b658c1ca86316a8dc1f8b29617d095"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bfd93a72d259d4f372846f6f9ad6adbf4bb7f367", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfd93a72d259d4f372846f6f9ad6adbf4bb7f367", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfd93a72d259d4f372846f6f9ad6adbf4bb7f367", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfd93a72d259d4f372846f6f9ad6adbf4bb7f367/comments", "author": null, "committer": null, "parents": [{"sha": "e42d063054571ac6678f5799c3d4fe890ecc9a84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e42d063054571ac6678f5799c3d4fe890ecc9a84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e42d063054571ac6678f5799c3d4fe890ecc9a84"}], "stats": {"total": 14, "additions": 11, "deletions": 3}, "files": [{"sha": "8d99c17fbf221a81f5364ee2c07071afb3a31fa3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfd93a72d259d4f372846f6f9ad6adbf4bb7f367/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfd93a72d259d4f372846f6f9ad6adbf4bb7f367/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bfd93a72d259d4f372846f6f9ad6adbf4bb7f367", "patch": "@@ -1,5 +1,9 @@\n 2012-04-30  Dodji Seketeli  <dodji@redhat.com>\n \n+\tFix location for static class members\n+\t* decl.c (grokdeclarator): Use the location carried by the\n+\tdeclarator for the DECL of the static class member.\n+\n \tFix va_arg type location\n \t* cp-tree.h (build_x_va_arg): Take an additional location\n \tparameter."}, {"sha": "40818a3f3ff53d2674cb0d7c2f3cf7e5df9f987b", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfd93a72d259d4f372846f6f9ad6adbf4bb7f367/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfd93a72d259d4f372846f6f9ad6adbf4bb7f367/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=bfd93a72d259d4f372846f6f9ad6adbf4bb7f367", "patch": "@@ -10267,7 +10267,8 @@ grokdeclarator (const cp_declarator *declarator,\n \t      {\n \t\t/* C++ allows static class members.  All other work\n \t\t   for this is done by grokfield.  */\n-\t\tdecl = build_lang_decl (VAR_DECL, unqualified_id, type);\n+\t\tdecl = build_lang_decl_loc (declarator->id_loc,\n+\t\t\t\t\t    VAR_DECL, unqualified_id, type);\n \t\tset_linkage_for_static_data_member (decl);\n \t\t/* Even if there is an in-class initialization, DECL\n \t\t   is considered undefined until an out-of-class"}, {"sha": "06f18f0c5827f318406507f7bb1cdb5947964e55", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfd93a72d259d4f372846f6f9ad6adbf4bb7f367/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfd93a72d259d4f372846f6f9ad6adbf4bb7f367/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bfd93a72d259d4f372846f6f9ad6adbf4bb7f367", "patch": "@@ -1,5 +1,8 @@\n 2012-04-30  Dodji Seketeli  <dodji@redhat.com>\n \n+\tFix location for static class members\n+\t* g++.dg/template/sfinae6_neg.C: Adjust.\n+\n \tMake conversion warnings work on NULL with -ftrack-macro-expansion\n \t* g++.dg/warn/Wconversion-null-2.C: Add testing for __null,\n \talongside the previous testing for NULL."}, {"sha": "9b7bdfd134d5a47b8e2c9f745248f146f1ac4a09", "filename": "gcc/testsuite/g++.dg/template/sfinae6_neg.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfd93a72d259d4f372846f6f9ad6adbf4bb7f367/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae6_neg.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfd93a72d259d4f372846f6f9ad6adbf4bb7f367/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae6_neg.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae6_neg.C?ref=bfd93a72d259d4f372846f6f9ad6adbf4bb7f367", "patch": "@@ -21,9 +21,9 @@ no_type check_is_callable2(...);\n template<typename F, typename T1, typename T2 = T1>\n struct is_callable2\n {\n-  static const bool value = \n+  static const bool value = // { dg-error \"within this context\" }\n     (sizeof(check_is_callable2(type<F>(), type<T1>(), type<T2>()))\n-     == sizeof(yes_type)); // { dg-error \"within this context\" }\n+     == sizeof(yes_type));\n };\n \n #define JOIN( X, Y ) DO_JOIN( X, Y )"}]}