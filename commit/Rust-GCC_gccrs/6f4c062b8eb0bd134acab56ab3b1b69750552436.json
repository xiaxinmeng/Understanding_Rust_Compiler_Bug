{"sha": "6f4c062b8eb0bd134acab56ab3b1b69750552436", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmY0YzA2MmI4ZWIwYmQxMzRhY2FiNTZhYjNiMWI2OTc1MDU1MjQzNg==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2004-07-29T02:55:53Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2004-07-29T02:55:53Z"}, "message": "frv.md (movqi_internal, [...]): Add backup alternatives for memory inputs.\n\n* config/frv/frv.md (movqi_internal, movhi_internal,\nmovsi_internal): Add backup alternatives for memory inputs.\n\nFrom-SVN: r85284", "tree": {"sha": "41812a2286d50eb61eb290ac8dcbafd1633db028", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/41812a2286d50eb61eb290ac8dcbafd1633db028"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f4c062b8eb0bd134acab56ab3b1b69750552436", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f4c062b8eb0bd134acab56ab3b1b69750552436", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f4c062b8eb0bd134acab56ab3b1b69750552436", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f4c062b8eb0bd134acab56ab3b1b69750552436/comments", "author": null, "committer": null, "parents": [{"sha": "e90bcbf5e3fd811083238cb5deef7f73f919927e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e90bcbf5e3fd811083238cb5deef7f73f919927e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e90bcbf5e3fd811083238cb5deef7f73f919927e"}], "stats": {"total": 35, "additions": 24, "deletions": 11}, "files": [{"sha": "f051f395a27c7c8c324f6c998de3169376a44675", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f4c062b8eb0bd134acab56ab3b1b69750552436/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f4c062b8eb0bd134acab56ab3b1b69750552436/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6f4c062b8eb0bd134acab56ab3b1b69750552436", "patch": "@@ -1,3 +1,8 @@\n+2004-07-28  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* config/frv/frv.md (movqi_internal, movhi_internal,\n+\tmovsi_internal): Add backup alternatives for memory inputs.\n+\n 2004-07-28  Matt Austern  <austern@apple.com>\n \n \t* config/darwin.c (darwin_one_byte_bool): New global variable."}, {"sha": "7b9f234eb67ce95002f8e912d0bd30e1dba3efec", "filename": "gcc/config/frv/frv.md", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f4c062b8eb0bd134acab56ab3b1b69750552436/gcc%2Fconfig%2Ffrv%2Ffrv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f4c062b8eb0bd134acab56ab3b1b69750552436/gcc%2Fconfig%2Ffrv%2Ffrv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.md?ref=6f4c062b8eb0bd134acab56ab3b1b69750552436", "patch": "@@ -1312,12 +1312,12 @@\n    (set_attr \"type\" \"gload,fload\")])\n \n (define_insn \"*movqi_internal\"\n-  [(set (match_operand:QI 0 \"move_destination_operand\" \"=d,d,m,m,?f,?f,?d,?m,f\")\n-\t(match_operand:QI 1 \"move_source_operand\"       \"L,d,d,O, d, f, f, f,GO\"))]\n+  [(set (match_operand:QI 0 \"move_destination_operand\" \"=d,d,m,m,?f,?f,?d,?m,f,d,f\")\n+\t(match_operand:QI 1 \"move_source_operand\"       \"L,d,d,O, d, f, f, f,GO,!m,!m\"))]\n   \"register_operand(operands[0], QImode) || reg_or_0_operand (operands[1], QImode)\"\n   \"* return output_move_single (operands, insn);\"\n   [(set_attr \"length\" \"4\")\n-   (set_attr \"type\" \"int,int,gstore,gstore,movgf,fsconv,movfg,fstore,movgf\")])\n+   (set_attr \"type\" \"int,int,gstore,gstore,movgf,fsconv,movfg,fstore,movgf,gload,fload\")])\n \n (define_expand \"movhi\"\n   [(set (match_operand:HI 0 \"general_operand\" \"\")\n@@ -1341,12 +1341,12 @@\n    (set_attr \"type\" \"gload,fload\")])\n \n (define_insn \"*movhi_internal\"\n-  [(set (match_operand:HI 0 \"move_destination_operand\" \"=d,d,d,m,m,?f,?f,?d,?m,f\")\n-\t(match_operand:HI 1 \"move_source_operand\"       \"L,n,d,d,O, d, f, f, f,GO\"))]\n+  [(set (match_operand:HI 0 \"move_destination_operand\" \"=d,d,d,m,m,?f,?f,?d,?m,f,d,f\")\n+\t(match_operand:HI 1 \"move_source_operand\"       \"L,n,d,d,O, d, f, f, f,GO,!m,!m\"))]\n   \"register_operand(operands[0], HImode) || reg_or_0_operand (operands[1], HImode)\"\n   \"* return output_move_single (operands, insn);\"\n-  [(set_attr \"length\" \"4,8,4,4,4,4,4,4,4,4\")\n-   (set_attr \"type\" \"int,multi,int,gstore,gstore,movgf,fsconv,movfg,fstore,movgf\")])\n+  [(set_attr \"length\" \"4,8,4,4,4,4,4,4,4,4,4,4\")\n+   (set_attr \"type\" \"int,multi,int,gstore,gstore,movgf,fsconv,movfg,fstore,movgf,gload,fload\")])\n \n ;; Split 2 word load of constants into sethi/setlo instructions\n (define_split\n@@ -1402,6 +1402,14 @@\n ;; The resulting sequences for loading constants into FPRs are preferable\n ;; even when we're not generating PIC code.\n \n+;; However, if we don't accept input from memory at all in the generic\n+;; movsi pattern, reloads for asm instructions that reference pseudos\n+;; that end up assigned to memory will fail to match, because we\n+;; recognize them right after they're emitted, and we don't\n+;; re-recognize them again after the substitution for memory.  So keep\n+;; a memory constraint available, just make sure reload won't be\n+;; tempted to use it.\n+\n (define_insn \"*movsi_load\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d,f\")\n \t(match_operand:SI 1 \"frv_load_operand\" \"m,m\"))]\n@@ -1436,12 +1444,12 @@\n    (set_attr \"length\" \"4\")])\n \n (define_insn \"*movsi_internal\"\n-  [(set (match_operand:SI 0 \"move_destination_operand\" \"=d,d,d,m,m,z,d,d,f,f,m,?f,?z\")\n-\t(match_operand:SI 1 \"move_source_operand\"      \"L,n,d,d,O,d,z,f,d,f,f,GO,GO\"))]\n+  [(set (match_operand:SI 0 \"move_destination_operand\" \"=d,d,d,m,m,z,d,d,f,f,m,?f,?z,d,f\")\n+\t(match_operand:SI 1 \"move_source_operand\"      \"L,n,d,d,O,d,z,f,d,f,f,GO,GO,!m,!m\"))]\n   \"register_operand (operands[0], SImode) || reg_or_0_operand (operands[1], SImode)\"\n   \"* return output_move_single (operands, insn);\"\n-  [(set_attr \"length\" \"4,8,4,4,4,4,4,4,4,4,4,4,4\")\n-   (set_attr \"type\" \"int,multi,int,gstore,gstore,spr,spr,movfg,movgf,fsconv,fstore,movgf,spr\")])\n+  [(set_attr \"length\" \"4,8,4,4,4,4,4,4,4,4,4,4,4,4,4\")\n+   (set_attr \"type\" \"int,multi,int,gstore,gstore,spr,spr,movfg,movgf,fsconv,fstore,movgf,spr,gload,fload\")])\n \n ;; Split 2 word load of constants into sethi/setlo instructions\n (define_insn_and_split \"*movsi_2word\""}]}