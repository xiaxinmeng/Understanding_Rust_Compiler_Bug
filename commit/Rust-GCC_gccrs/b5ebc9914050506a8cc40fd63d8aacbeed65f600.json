{"sha": "b5ebc9914050506a8cc40fd63d8aacbeed65f600", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjVlYmM5OTE0MDUwNTA2YThjYzQwZmQ2M2Q4YWFjYmVlZDY1ZjYwMA==", "commit": {"author": {"name": "Max Ostapenko", "email": "m.ostapenko@partner.samsung.com", "date": "2014-01-09T07:31:05Z"}, "committer": {"name": "Maxim Ostapenko", "email": "chefmax@gcc.gnu.org", "date": "2014-01-09T07:31:05Z"}, "message": "cfgexpand.c (expand_stack_vars): Optionally disable asan stack protection.\n\n2014-01-09  Max Ostapenko  <m.ostapenko@partner.samsung.com>\n\n\t* cfgexpand.c (expand_stack_vars): Optionally disable \n\tasan stack protection.\n\t(expand_used_vars): Likewise.\n\t(partition_stack_vars): Likewise.\n\t* asan.c (asan_emit_stack_protection): Optionally disable \n\tafter return stack usage.\n\t(instrument_derefs): Optionally disable memory \n\taccess instrumentation.\n\t(instrument_builtin_call): Likewise.\n\t(instrument_strlen_call): Likewise.\n\t(asan_protect_global): Optionally disable \n\tglobal variables protection.\n\t* doc/invoke.texi: Added doc for new options.\n\t* params.def: Added new options.\n\t* params.h: Likewise.\n\n2014-01-09  Max Ostapenko  <m.ostapenko@partner.samsung.com>\n\n\t* c-c++-common/asan/no-asan-globals.c: New test.\n\t* c-c++-common/asan/no-instrument-reads.c: Likewise.\n\t* c-c++-common/asan/no-instrument-writes.c: Likewise.\n\t* c-c++-common/asan/use-after-return-1.c: Likewise.\n\t* c-c++-common/asan/no-use-after-return.c: Likewise.\n\nFrom-SVN: r206458", "tree": {"sha": "58efd7774e722299ff68ff8583b43da062decab9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58efd7774e722299ff68ff8583b43da062decab9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5ebc9914050506a8cc40fd63d8aacbeed65f600", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5ebc9914050506a8cc40fd63d8aacbeed65f600", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5ebc9914050506a8cc40fd63d8aacbeed65f600", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5ebc9914050506a8cc40fd63d8aacbeed65f600/comments", "author": null, "committer": null, "parents": [{"sha": "b59e0455e1ecaa3183b9c9c8b56286b39c35ee55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b59e0455e1ecaa3183b9c9c8b56286b39c35ee55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b59e0455e1ecaa3183b9c9c8b56286b39c35ee55"}], "stats": {"total": 231, "additions": 226, "deletions": 5}, "files": [{"sha": "3cdf385e3936b499e6918680b258882713cd5cd0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5ebc9914050506a8cc40fd63d8aacbeed65f600/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5ebc9914050506a8cc40fd63d8aacbeed65f600/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b5ebc9914050506a8cc40fd63d8aacbeed65f600", "patch": "@@ -1,3 +1,21 @@\n+2014-01-09  Max Ostapenko  <m.ostapenko@partner.samsung.com>\n+\n+\t* cfgexpand.c (expand_stack_vars): Optionally disable \n+\tasan stack protection.\n+\t(expand_used_vars): Likewise.\n+\t(partition_stack_vars): Likewise.\n+\t* asan.c (asan_emit_stack_protection): Optionally disable \n+\tafter return stack usage.\n+\t(instrument_derefs): Optionally disable memory \n+\taccess instrumentation.\n+\t(instrument_builtin_call): Likewise.\n+\t(instrument_strlen_call): Likewise.\n+\t(asan_protect_global): Optionally disable \n+\tglobal variables protection.\n+\t* doc/invoke.texi: Added doc for new options.\n+\t* params.def: Added new options.\n+\t* params.h: Likewise.\n+\n 2014-01-09  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/59724"}, {"sha": "53992a81b189970836022e81338119d40514fdef", "filename": "gcc/asan.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5ebc9914050506a8cc40fd63d8aacbeed65f600/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5ebc9914050506a8cc40fd63d8aacbeed65f600/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=b5ebc9914050506a8cc40fd63d8aacbeed65f600", "patch": "@@ -53,6 +53,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple-builder.h\"\n #include \"ubsan.h\"\n #include \"predict.h\"\n+#include \"params.h\"\n \n /* AddressSanitizer finds out-of-bounds and use-after-free bugs\n    with <2x slowdown on average.\n@@ -1003,7 +1004,8 @@ asan_emit_stack_protection (rtx base, rtx pbase, unsigned int alignb,\n   str_cst = asan_pp_string (&asan_pp);\n \n   /* Emit the prologue sequence.  */\n-  if (asan_frame_size > 32 && asan_frame_size <= 65536 && pbase)\n+  if (asan_frame_size > 32 && asan_frame_size <= 65536 && pbase\n+      && ASAN_USE_AFTER_RETURN)\n     {\n       use_after_return_class = floor_log2 (asan_frame_size - 1) - 5;\n       /* __asan_stack_malloc_N guarantees alignment\n@@ -1239,6 +1241,9 @@ asan_needs_local_alias (tree decl)\n bool\n asan_protect_global (tree decl)\n {\n+  if (!ASAN_GLOBALS)\n+    return false;\n+\n   rtx rtl, symbol;\n \n   if (TREE_CODE (decl) == STRING_CST)\n@@ -1568,6 +1573,11 @@ static void\n instrument_derefs (gimple_stmt_iterator *iter, tree t,\n \t\t   location_t location, bool is_store)\n {\n+  if (is_store && !ASAN_INSTRUMENT_WRITES)\n+    return;\n+  if (!is_store && !ASAN_INSTRUMENT_READS)\n+    return;\n+\n   tree type, base;\n   HOST_WIDE_INT size_in_bytes;\n \n@@ -1897,6 +1907,9 @@ instrument_strlen_call (gimple_stmt_iterator *iter)\n static bool\n instrument_builtin_call (gimple_stmt_iterator *iter)\n {\n+  if (!ASAN_MEMINTRIN)\n+    return false;\n+\n   bool iter_advanced_p = false;\n   gimple call = gsi_stmt (*iter);\n "}, {"sha": "5f14d813fbd4518c34f1fa110b574bbf4bec7c1d", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5ebc9914050506a8cc40fd63d8aacbeed65f600/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5ebc9914050506a8cc40fd63d8aacbeed65f600/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=b5ebc9914050506a8cc40fd63d8aacbeed65f600", "patch": "@@ -798,7 +798,7 @@ partition_stack_vars (void)\n \t     sizes, as the shorter vars wouldn't be adequately protected.\n \t     Don't do that for \"large\" (unsupported) alignment objects,\n \t     those aren't protected anyway.  */\n-\t  if ((flag_sanitize & SANITIZE_ADDRESS) && isize != jsize\n+\t  if ((flag_sanitize & SANITIZE_ADDRESS) && ASAN_STACK && isize != jsize\n \t      && ialign * BITS_PER_UNIT <= MAX_SUPPORTED_STACK_ALIGNMENT)\n \t    break;\n \n@@ -981,7 +981,7 @@ expand_stack_vars (bool (*pred) (size_t), struct stack_vars_data *data)\n       if (alignb * BITS_PER_UNIT <= MAX_SUPPORTED_STACK_ALIGNMENT)\n \t{\n \t  base = virtual_stack_vars_rtx;\n-\t  if ((flag_sanitize & SANITIZE_ADDRESS) && pred)\n+\t  if ((flag_sanitize & SANITIZE_ADDRESS) && ASAN_STACK && pred)\n \t    {\n \t      HOST_WIDE_INT prev_offset = frame_offset;\n \t      tree repr_decl = NULL_TREE;\n@@ -1160,7 +1160,7 @@ defer_stack_allocation (tree var, bool toplevel)\n   /* If stack protection is enabled, *all* stack variables must be deferred,\n      so that we can re-order the strings to the top of the frame.\n      Similarly for Address Sanitizer.  */\n-  if (flag_stack_protect || (flag_sanitize & SANITIZE_ADDRESS))\n+  if (flag_stack_protect || ((flag_sanitize & SANITIZE_ADDRESS) && ASAN_STACK))\n     return true;\n \n   /* We handle \"large\" alignment via dynamic allocation.  We want to handle\n@@ -1820,7 +1820,7 @@ expand_used_vars (void)\n \t    expand_stack_vars (stack_protect_decl_phase_2, &data);\n \t}\n \n-      if (flag_sanitize & SANITIZE_ADDRESS)\n+      if ((flag_sanitize & SANITIZE_ADDRESS) && ASAN_STACK)\n \t/* Phase 3, any partitions that need asan protection\n \t   in addition to phase 1 and 2.  */\n \texpand_stack_vars (asan_decl_phase_3, &data);"}, {"sha": "b9a15aeb83979a68e0e97c32c29e7c780eb8d0ff", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5ebc9914050506a8cc40fd63d8aacbeed65f600/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5ebc9914050506a8cc40fd63d8aacbeed65f600/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=b5ebc9914050506a8cc40fd63d8aacbeed65f600", "patch": "@@ -10065,6 +10065,41 @@ The default choice depends on the target.\n Set the maximum number of existing candidates that will be considered when\n seeking a basis for a new straight-line strength reduction candidate.\n \n+@item asan-globals\n+Enable buffer overflow detection for global objects.  This kind\n+of protection is enabled by default if you are using\n+@option{-fsanitize=address} option.\n+To disable global objects protection use @option{--param asan-globals=0}.\n+\n+@item asan-stack\n+Enable buffer overflow detection for stack objects.  This kind of\n+protection is enabled by default when using@option{-fsanitize=address}.\n+To disable stack protection use @option{--param asan-stack=0} option.\n+\n+@item asan-instrument-reads\n+Enable buffer overflow detection for memory reads.  This kind of\n+protection is enabled by default when using @option{-fsanitize=address}.\n+To disable memory reads protection use\n+@option{--param asan-instrument-reads=0}.\n+\n+@item asan-instrument-writes\n+Enable buffer overflow detection for memory writes.  This kind of\n+protection is enabled by default when using @option{-fsanitize=address}.\n+To disable memory writes protection use\n+@option{--param asan-instrument-writes=0} option.\n+\n+@item asan-memintrin\n+Enable detection for built-in functions.  This kind of protection\n+is enabled by default when using @option{-fsanitize=address}.\n+To disable built-in functions protection use\n+@option{--param asan-memintrin=0}.\n+\n+@item asan-use-after-return\n+Enable detection of use-after-return.  This kind of protection\n+is enabled by default when using @option{-fsanitize=address} option.\n+To disable use-after-return detection use \n+@option{--param asan-use-after-return=0}.\n+\n @end table\n @end table\n "}, {"sha": "abfda73ca8740a37ddaa85ce6e855bd6a62dc342", "filename": "gcc/params.def", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5ebc9914050506a8cc40fd63d8aacbeed65f600/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5ebc9914050506a8cc40fd63d8aacbeed65f600/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=b5ebc9914050506a8cc40fd63d8aacbeed65f600", "patch": "@@ -1049,7 +1049,37 @@ DEFPARAM (PARAM_MAX_SLSR_CANDIDATE_SCAN,\n \t  \"strength reduction\",\n \t  50, 1, 999999)\n \n+DEFPARAM (PARAM_ASAN_STACK,\n+         \"asan-stack\",\n+         \"Enable asan stack protection\",\n+         1, 0, 1)\n+\n+DEFPARAM (PARAM_ASAN_GLOBALS,\n+         \"asan-globals\",\n+         \"Enable asan globals protection\",\n+         1, 0, 1)\n+\n+DEFPARAM (PARAM_ASAN_INSTRUMENT_WRITES,\n+         \"asan-instrument-writes\",\n+         \"Enable asan store operations protection\",\n+         1, 0, 1)\n+\n+DEFPARAM (PARAM_ASAN_INSTRUMENT_READS,\n+         \"asan-instrument-reads\",\n+         \"Enable asan load operations protection\",\n+         1, 0, 1)\n+\n+DEFPARAM (PARAM_ASAN_MEMINTRIN,\n+         \"asan-memintrin\",\n+         \"Enable asan builtin functions protection\",\n+         1, 0, 1)\n+\n+DEFPARAM (PARAM_ASAN_USE_AFTER_RETURN,\n+         \"asan-use-after-return\",\n+         \"Enable asan builtin functions protection\",\n+         1, 0, 1)\n /*\n+\n Local variables:\n mode:c\n End:"}, {"sha": "64f3a0fcbae0f320a41becc0f19395bb1fce2cf8", "filename": "gcc/params.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5ebc9914050506a8cc40fd63d8aacbeed65f600/gcc%2Fparams.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5ebc9914050506a8cc40fd63d8aacbeed65f600/gcc%2Fparams.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.h?ref=b5ebc9914050506a8cc40fd63d8aacbeed65f600", "patch": "@@ -218,5 +218,17 @@ extern void init_param_values (int *params);\n   PARAM_VALUE (PARAM_ALLOW_PACKED_LOAD_DATA_RACES)\n #define ALLOW_PACKED_STORE_DATA_RACES \\\n   PARAM_VALUE (PARAM_ALLOW_PACKED_STORE_DATA_RACES)\n+#define ASAN_STACK \\\n+  PARAM_VALUE (PARAM_ASAN_STACK)\n+#define ASAN_GLOBALS \\\n+  PARAM_VALUE (PARAM_ASAN_GLOBALS)\n+#define ASAN_INSTRUMENT_READS \\\n+  PARAM_VALUE (PARAM_ASAN_INSTRUMENT_READS)\n+#define ASAN_INSTRUMENT_WRITES \\\n+  PARAM_VALUE (PARAM_ASAN_INSTRUMENT_WRITES)\n+#define ASAN_MEMINTRIN \\\n+  PARAM_VALUE (PARAM_ASAN_MEMINTRIN)\n+#define ASAN_USE_AFTER_RETURN \\\n+  PARAM_VALUE (PARAM_ASAN_USE_AFTER_RETURN)\n \n #endif /* ! GCC_PARAMS_H */"}, {"sha": "d4dc8cf65d5109183d5f3d22097b53c34b4bb2ca", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5ebc9914050506a8cc40fd63d8aacbeed65f600/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5ebc9914050506a8cc40fd63d8aacbeed65f600/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b5ebc9914050506a8cc40fd63d8aacbeed65f600", "patch": "@@ -1,3 +1,11 @@\n+2014-01-09  Max Ostapenko  <m.ostapenko@partner.samsung.com>\n+\n+\t* c-c++-common/asan/no-asan-globals.c: New test.\n+\t* c-c++-common/asan/no-instrument-reads.c: Likewise.\n+\t* c-c++-common/asan/no-instrument-writes.c: Likewise.\n+\t* c-c++-common/asan/use-after-return-1.c: Likewise.\n+\t* c-c++-common/asan/no-use-after-return.c: Likewise.\n+\n 2014-01-08  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/weak2.ad[sb]: New test."}, {"sha": "70a1f95a3a31fa1ce1e182836005f284e142e616", "filename": "gcc/testsuite/c-c++-common/asan/no-asan-globals.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5ebc9914050506a8cc40fd63d8aacbeed65f600/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fno-asan-globals.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5ebc9914050506a8cc40fd63d8aacbeed65f600/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fno-asan-globals.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fno-asan-globals.c?ref=b5ebc9914050506a8cc40fd63d8aacbeed65f600", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-save-temps --param asan-globals=0\" } */\n+\n+volatile int ten = 10;\n+\n+int main() {\n+  volatile static char XXX[10];\n+  XXX[ten];\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-not \"__asan_register_globals\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "df75878de2f45d0522256e6219798613df4e6ec8", "filename": "gcc/testsuite/c-c++-common/asan/no-instrument-reads.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5ebc9914050506a8cc40fd63d8aacbeed65f600/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fno-instrument-reads.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5ebc9914050506a8cc40fd63d8aacbeed65f600/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fno-instrument-reads.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fno-instrument-reads.c?ref=b5ebc9914050506a8cc40fd63d8aacbeed65f600", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"--param asan-instrument-reads=0 -save-temps\" } */\n+\n+volatile int ten = 10;\n+\n+int main() {\n+  volatile char x[10];\n+  x[ten];\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-not \"__asan_load\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "c1500b9fb32181c4751ba26f5c449f6a312b96ae", "filename": "gcc/testsuite/c-c++-common/asan/no-instrument-writes.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5ebc9914050506a8cc40fd63d8aacbeed65f600/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fno-instrument-writes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5ebc9914050506a8cc40fd63d8aacbeed65f600/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fno-instrument-writes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fno-instrument-writes.c?ref=b5ebc9914050506a8cc40fd63d8aacbeed65f600", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"--param asan-instrument-writes=0 -save-temps\" } */\n+\n+volatile int ten = 10;\n+\n+int main() {\n+  volatile char x[10];\n+  x[ten] = 1;\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-not \"__asan_store\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "f326e0caee4ef62911e89966cf3e57377501f692", "filename": "gcc/testsuite/c-c++-common/asan/no-use-after-return.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5ebc9914050506a8cc40fd63d8aacbeed65f600/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fno-use-after-return.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5ebc9914050506a8cc40fd63d8aacbeed65f600/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fno-use-after-return.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fno-use-after-return.c?ref=b5ebc9914050506a8cc40fd63d8aacbeed65f600", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"--param asan-use-after-return=0 -save-temps\" } */\n+\n+extern void f(char *);\n+\n+int main() {\n+  char buf[64];\n+  f(buf);\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-not \"__asan_option_detect_stack_use_after_return\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "435637d532311aa6ee4d7ee7873335ee157f3039", "filename": "gcc/testsuite/c-c++-common/asan/use-after-return-1.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5ebc9914050506a8cc40fd63d8aacbeed65f600/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fuse-after-return-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5ebc9914050506a8cc40fd63d8aacbeed65f600/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fuse-after-return-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fuse-after-return-1.c?ref=b5ebc9914050506a8cc40fd63d8aacbeed65f600", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do run } */\n+/* { dg-set-target-env-var ASAN_OPTIONS \"detect_stack_use_after_return=1\" } */\n+/* { dg-shouldfail \"asan\" } */\n+\n+#include <stdio.h>\n+#include <pthread.h>\n+\n+#ifndef kSize\n+# define kSize 1\n+#endif\n+\n+#ifndef UseThread\n+# define UseThread 0\n+#endif\n+\n+__attribute__((noinline))\n+char *Ident(char *x) {\n+  fprintf(stderr, \"1: %p\\n\", x);\n+  return x;\n+}\n+\n+__attribute__((noinline))\n+char *Func1() {\n+  char local[kSize];\n+  return Ident(local);\n+}\n+\n+__attribute__((noinline))\n+void Func2(char *x) {\n+  fprintf(stderr, \"2: %p\\n\", x);\n+  *x = 1;\n+}\n+\n+void *Thread(void *unused)  {\n+  Func2(Func1());\n+  return NULL;\n+}\n+\n+int main(int argc, char **argv) {\n+#if UseThread\n+  pthread_t t;\n+  pthread_create(&t, 0, Thread, 0);\n+  pthread_join(t, 0);\n+#else\n+  Func2(Func1());\n+#endif\n+  return 0;\n+}\n+\n+/* { dg-output \"WRITE of size 1 at .* thread T0.*\" } */\n+/* { dg-output \"    #0.*Func2.*use-after-return-1.c:31.*\" } */\n+/* { dg-output \"is located in stack of thread T0 at offset.*\" } */\n+/* { dg-output \"\\'local\\' <== Memory access at offset 32 is inside this variable\" } */"}]}