{"sha": "b109e685aae985e8feef0bd14728ba580c731d2f", "node_id": "C_kwDOANBUbNoAKGIxMDllNjg1YWFlOTg1ZThmZWVmMGJkMTQ3MjhiYTU4MGM3MzFkMmY", "commit": {"author": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-03-30T14:28:12Z"}, "committer": {"name": "CohenArthur", "email": "arthur.cohen@embecosm.com", "date": "2023-04-05T08:20:48Z"}, "message": "expand: Add derive expansion stubs\n\nAdd derive macros expansion stub functions.\n\ngcc/rust/ChangeLog:\n\n\t* expand/rust-expand-visitor.cc (ExpandVisitor::visit): Add call\n\tto derive expander.\n\t(ExpandVisitor::expand_derive): Expand a single derive.\n\t(ExpandVisitor::visit_attrs_with_derive): Visit an item with\n\tderive attributes.\n\t(ExpandVisitor::is_derive): Identify a derive attribute.\n\t* expand/rust-expand-visitor.h: Add function prototypes.\n\nSigned-off-by: Pierre-Emmanuel Patry <pierre-emmanuel.patry@embecosm.com>", "tree": {"sha": "ad7624a0e205582352f53816386cc5b5bb983df4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad7624a0e205582352f53816386cc5b5bb983df4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b109e685aae985e8feef0bd14728ba580c731d2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b109e685aae985e8feef0bd14728ba580c731d2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b109e685aae985e8feef0bd14728ba580c731d2f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b109e685aae985e8feef0bd14728ba580c731d2f/comments", "author": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7035cd6ba104fb1e600528ae6a91eda736029d4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7035cd6ba104fb1e600528ae6a91eda736029d4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7035cd6ba104fb1e600528ae6a91eda736029d4c"}], "stats": {"total": 73, "additions": 73, "deletions": 0}, "files": [{"sha": "96619482467815855c0c05b1f548aa5bdcc603d1", "filename": "gcc/rust/expand/rust-expand-visitor.cc", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b109e685aae985e8feef0bd14728ba580c731d2f/gcc%2Frust%2Fexpand%2Frust-expand-visitor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b109e685aae985e8feef0bd14728ba580c731d2f/gcc%2Frust%2Fexpand%2Frust-expand-visitor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-expand-visitor.cc?ref=b109e685aae985e8feef0bd14728ba580c731d2f", "patch": "@@ -812,6 +812,7 @@ ExpandVisitor::visit (AST::TypeAlias &type_alias)\n void\n ExpandVisitor::visit (AST::StructStruct &struct_item)\n {\n+  visit_attrs_with_derive (struct_item);\n   for (auto &generic : struct_item.get_generic_params ())\n     visit (generic);\n \n@@ -824,6 +825,7 @@ ExpandVisitor::visit (AST::StructStruct &struct_item)\n void\n ExpandVisitor::visit (AST::TupleStruct &tuple_struct)\n {\n+  visit_attrs_with_derive (tuple_struct);\n   for (auto &generic : tuple_struct.get_generic_params ())\n     visit (generic);\n \n@@ -858,6 +860,7 @@ ExpandVisitor::visit (AST::EnumItemDiscriminant &item)\n void\n ExpandVisitor::visit (AST::Enum &enum_item)\n {\n+  visit_attrs_with_derive (enum_item);\n   for (auto &generic : enum_item.get_generic_params ())\n     visit (generic);\n \n@@ -868,6 +871,7 @@ ExpandVisitor::visit (AST::Enum &enum_item)\n void\n ExpandVisitor::visit (AST::Union &union_item)\n {\n+  visit_attrs_with_derive (union_item);\n   for (auto &generic : union_item.get_generic_params ())\n     visit (generic);\n \n@@ -1337,4 +1341,63 @@ ExpandVisitor::visit (AST::BareFunctionType &type)\n     visit (type.get_return_type ());\n }\n \n+template <typename T>\n+void\n+ExpandVisitor::expand_derive (const T &item,\n+\t\t\t      std::unique_ptr<AST::TokenTree> &trait)\n+{\n+  // FIXME: Implement expansion for that particular trait\n+}\n+\n+template <typename T>\n+void\n+ExpandVisitor::expand_derive (const T &item, AST::DelimTokenTree &attr)\n+{\n+  // Item is const because even though the tokenstream might be modified, it\n+  // should appear as the same input for every derive proc macro.\n+  auto &trees = attr.get_token_trees ();\n+  if (trees.size () > 2)\n+    {\n+      // Skipping begin and end parenthesis\n+      for (auto it = trees.begin () + 1; it < trees.end () - 1;\n+\t   it += 2 /* Increment + skip comma */)\n+\t{\n+\t  expand_derive (item, *it);\n+\t}\n+    }\n+}\n+\n+template <typename T>\n+void\n+ExpandVisitor::visit_attrs_with_derive (T &item)\n+{\n+  auto &attrs = item.get_outer_attrs ();\n+  for (auto it = attrs.begin (); it != attrs.end (); /* erase => No increment*/)\n+    {\n+      auto current = *it;\n+\n+      if (is_derive (current))\n+\t{\n+\t  it = attrs.erase (it);\n+\t  // Downcasting checked in is_derive\n+\t  expand_derive (item, static_cast<AST::DelimTokenTree &> (\n+\t\t\t\t current.get_attr_input ()));\n+\t}\n+      else // Skip unknwown\n+\t{\n+\t  it++;\n+\t}\n+    }\n+}\n+\n+bool\n+ExpandVisitor::is_derive (AST::Attribute &attr)\n+{\n+  auto &segments = attr.get_path ().get_segments ();\n+  return attr.has_attr_input ()\n+\t && attr.get_attr_input ().get_attr_input_type ()\n+\t      == AST::AttrInput::TOKEN_TREE\n+\t && !segments.empty () && \"derive\" == segments[0].get_segment_name ();\n+}\n+\n } // namespace Rust"}, {"sha": "613251dfbbea806367289c7941ab9b83c873dad2", "filename": "gcc/rust/expand/rust-expand-visitor.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b109e685aae985e8feef0bd14728ba580c731d2f/gcc%2Frust%2Fexpand%2Frust-expand-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b109e685aae985e8feef0bd14728ba580c731d2f/gcc%2Frust%2Fexpand%2Frust-expand-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-expand-visitor.h?ref=b109e685aae985e8feef0bd14728ba580c731d2f", "patch": "@@ -313,6 +313,16 @@ class ExpandVisitor : public AST::ASTVisitor\n   void visit (AST::InferredType &) override;\n   void visit (AST::BareFunctionType &type) override;\n \n+  bool is_derive (AST::Attribute &attr);\n+\n+  template <typename T>\n+  void expand_derive (const T &item, std::unique_ptr<AST::TokenTree> &trait);\n+\n+  template <typename T>\n+  void expand_derive (const T &item, AST::DelimTokenTree &attr);\n+\n+  template <typename T> void visit_attrs_with_derive (T &item);\n+\n private:\n   MacroExpander &expander;\n };"}]}