{"sha": "aad32a00b7d2b64ae158b2b167768a9ae3e20f6e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWFkMzJhMDBiN2QyYjY0YWUxNThiMmIxNjc3NjhhOWFlM2UyMGY2ZQ==", "commit": {"author": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2021-07-08T14:47:53Z"}, "committer": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2021-07-19T16:34:21Z"}, "message": "amdgcn: Add -mxnack and -msram-ecc [PR 100208]\n\ngcc/ChangeLog:\n\n\tPR target/100208\n\t* config/gcn/gcn-hsa.h (DRIVER_SELF_SPECS): New.\n\t(ASM_SPEC): Set -mattr for xnack and sram-ecc.\n\t* config/gcn/gcn-opts.h (enum sram_ecc_type): New.\n\t* config/gcn/gcn-valu.md: Add a warning comment.\n\t* config/gcn/gcn.c (gcn_option_override): Add \"sorry\" for -mxnack.\n\t(output_file_start): Add xnack and sram-ecc state to \".amdgcn_target\".\n\t* config/gcn/gcn.md: Add a warning comment.\n\t* config/gcn/gcn.opt: Add -mxnack and -msram-ecc.\n\t* config/gcn/mkoffload.c (EF_AMDGPU_MACH_AMDGCN_GFX908): Remove\n\tSRAM-ECC flag.\n\t(EF_AMDGPU_XNACK): New.\n\t(EF_AMDGPU_SRAM_ECC): New.\n\t(elf_flags): New.\n\t(copy_early_debug_info): Use elf_flags.\n\t(main): Handle -mxnack and -msram-ecc options.\n\t* doc/invoke.texi: Document -mxnack and -msram-ecc.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/100208\n\t* gcc.target/gcn/sram-ecc-1.c: New test.\n\t* gcc.target/gcn/sram-ecc-2.c: New test.\n\t* gcc.target/gcn/sram-ecc-3.c: New test.\n\t* gcc.target/gcn/sram-ecc-4.c: New test.\n\t* gcc.target/gcn/sram-ecc-5.c: New test.\n\t* gcc.target/gcn/sram-ecc-6.c: New test.\n\t* gcc.target/gcn/sram-ecc-7.c: New test.\n\t* gcc.target/gcn/sram-ecc-8.c: New test.", "tree": {"sha": "ceb45863886ead20793426024e2772d60571f8b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ceb45863886ead20793426024e2772d60571f8b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aad32a00b7d2b64ae158b2b167768a9ae3e20f6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aad32a00b7d2b64ae158b2b167768a9ae3e20f6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aad32a00b7d2b64ae158b2b167768a9ae3e20f6e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aad32a00b7d2b64ae158b2b167768a9ae3e20f6e/comments", "author": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db95ac7745b284d1fd667ee6262b4afc778fe074", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db95ac7745b284d1fd667ee6262b4afc778fe074", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db95ac7745b284d1fd667ee6262b4afc778fe074"}], "stats": {"total": 277, "additions": 273, "deletions": 4}, "files": [{"sha": "724e9a381ba795b1c34fa5c547fc3589c0b82764", "filename": "gcc/config/gcn/gcn-hsa.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aad32a00b7d2b64ae158b2b167768a9ae3e20f6e/gcc%2Fconfig%2Fgcn%2Fgcn-hsa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aad32a00b7d2b64ae158b2b167768a9ae3e20f6e/gcc%2Fconfig%2Fgcn%2Fgcn-hsa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn-hsa.h?ref=aad32a00b7d2b64ae158b2b167768a9ae3e20f6e", "patch": "@@ -75,9 +75,15 @@ extern unsigned int gcn_local_sym_hash (const char *name);\n    supported for gcn.  */\n #define GOMP_SELF_SPECS \"\"\n \n+#define DRIVER_SELF_SPECS \\\n+  \"%{march=fiji|march=gfx900|march=gfx906:%{!msram-ecc=*:-msram-ecc=off}}\"\n+\n /* Use LLVM assembler and linker options.  */\n #define ASM_SPEC  \"-triple=amdgcn--amdhsa \"  \\\n \t\t  \"%:last_arg(%{march=*:-mcpu=%*}) \" \\\n+\t\t  \"-mattr=%{mxnack:+xnack;:-xnack} \" \\\n+\t\t  /* FIXME: support \"any\" when we move to HSACOv4.  */ \\\n+\t\t  \"-mattr=%{!msram-ecc=off:+sram-ecc;:-sram-ecc} \" \\\n \t\t  \"-filetype=obj\"\n #define LINK_SPEC \"--pie --export-dynamic\"\n #define LIB_SPEC  \"-lc\""}, {"sha": "b25516060e1e97ac7e91c853e9dc46bc6772dbb2", "filename": "gcc/config/gcn/gcn-opts.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aad32a00b7d2b64ae158b2b167768a9ae3e20f6e/gcc%2Fconfig%2Fgcn%2Fgcn-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aad32a00b7d2b64ae158b2b167768a9ae3e20f6e/gcc%2Fconfig%2Fgcn%2Fgcn-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn-opts.h?ref=aad32a00b7d2b64ae158b2b167768a9ae3e20f6e", "patch": "@@ -34,4 +34,11 @@ extern int gcn_isa;\n #define TARGET_GCN5 (gcn_isa == 5)\n #define TARGET_GCN5_PLUS (gcn_isa >= 5)\n \n+enum sram_ecc_type\n+{\n+  SRAM_ECC_OFF,\n+  SRAM_ECC_ON,\n+  SRAM_ECC_ANY\n+};\n+\n #endif"}, {"sha": "84ff67508b9955e507906b3bab999ff69b8b598c", "filename": "gcc/config/gcn/gcn-valu.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aad32a00b7d2b64ae158b2b167768a9ae3e20f6e/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aad32a00b7d2b64ae158b2b167768a9ae3e20f6e/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md?ref=aad32a00b7d2b64ae158b2b167768a9ae3e20f6e", "patch": "@@ -703,6 +703,8 @@\n ;; - The address space and glc (volatile) fields are there to replace the\n ;;   fields normally found in a MEM.\n ;; - Multiple forms of address expression are supported, below.\n+;;\n+;; TODO: implement combined gather and zero_extend, but only for -msram-ecc=on\n \n (define_expand \"gather_load<mode><vnsi>\"\n   [(match_operand:V_ALL 0 \"register_operand\")"}, {"sha": "385b90c4b001721c90da31a489133398e6e3afbb", "filename": "gcc/config/gcn/gcn.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aad32a00b7d2b64ae158b2b167768a9ae3e20f6e/gcc%2Fconfig%2Fgcn%2Fgcn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aad32a00b7d2b64ae158b2b167768a9ae3e20f6e/gcc%2Fconfig%2Fgcn%2Fgcn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.c?ref=aad32a00b7d2b64ae158b2b167768a9ae3e20f6e", "patch": "@@ -144,6 +144,10 @@ gcn_option_override (void)\n \t/* 1MB total.  */\n \tstack_size_opt = 1048576;\n     }\n+\n+  /* The xnack option is a placeholder, for now.  */\n+  if (flag_xnack)\n+    sorry (\"XNACK support\");\n }\n \n /* }}}  */\n@@ -5182,11 +5186,16 @@ output_file_start (void)\n     case PROCESSOR_FIJI: cpu = \"gfx803\"; break;\n     case PROCESSOR_VEGA10: cpu = \"gfx900\"; break;\n     case PROCESSOR_VEGA20: cpu = \"gfx906\"; break;\n-    case PROCESSOR_GFX908: cpu = \"gfx908+sram-ecc\"; break;\n+    case PROCESSOR_GFX908: cpu = \"gfx908\"; break;\n     default: gcc_unreachable ();\n     }\n \n-  fprintf(asm_out_file, \"\\t.amdgcn_target \\\"amdgcn-unknown-amdhsa--%s\\\"\\n\", cpu);\n+  const char *xnack = (flag_xnack ? \"+xnack\" : \"\");\n+  /* FIXME: support \"any\" when we move to HSACOv4.  */\n+  const char *sram_ecc = (flag_sram_ecc ? \"+sram-ecc\" : \"\");\n+\n+  fprintf(asm_out_file, \"\\t.amdgcn_target \\\"amdgcn-unknown-amdhsa--%s%s%s\\\"\\n\",\n+\t  cpu, xnack, sram_ecc);\n }\n \n /* Implement ASM_DECLARE_FUNCTION_NAME via gcn-hsa.h."}, {"sha": "8ffa43c030ed30d9910cbae43a83e7b5c7ebe32a", "filename": "gcc/config/gcn/gcn.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aad32a00b7d2b64ae158b2b167768a9ae3e20f6e/gcc%2Fconfig%2Fgcn%2Fgcn.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aad32a00b7d2b64ae158b2b167768a9ae3e20f6e/gcc%2Fconfig%2Fgcn%2Fgcn.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.md?ref=aad32a00b7d2b64ae158b2b167768a9ae3e20f6e", "patch": "@@ -569,6 +569,7 @@\n    (set_attr \"length\" \"4,4,8,12,12,12,12,4,8,8,12,12,8,12,12,8,12,12\")])\n \n ; 8/16bit move pattern\n+; TODO: implement combined load and zero_extend, but *only* for -msram-ecc=on\n \n (define_insn \"*mov<mode>_insn\"\n   [(set (match_operand:QIHI 0 \"nonimmediate_operand\""}, {"sha": "b2b10b0794c859b098c1fa5756962e3f985c813b", "filename": "gcc/config/gcn/gcn.opt", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aad32a00b7d2b64ae158b2b167768a9ae3e20f6e/gcc%2Fconfig%2Fgcn%2Fgcn.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aad32a00b7d2b64ae158b2b167768a9ae3e20f6e/gcc%2Fconfig%2Fgcn%2Fgcn.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.opt?ref=aad32a00b7d2b64ae158b2b167768a9ae3e20f6e", "patch": "@@ -76,3 +76,24 @@ Target RejectNegative Joined UInteger Var(stack_size_opt) Init(-1)\n Wopenacc-dims\n Target Var(warn_openacc_dims) Warning\n Warn about invalid OpenACC dimensions.\n+\n+mxnack\n+Target Var(flag_xnack) Init(0)\n+Compile for devices requiring XNACK enabled. Default off.\n+\n+Enum\n+Name(sram_ecc_type) Type(enum sram_ecc_type)\n+SRAM-ECC modes:\n+\n+EnumValue\n+Enum(sram_ecc_type) String(off) Value(SRAM_ECC_OFF)\n+\n+EnumValue\n+Enum(sram_ecc_type) String(on) Value(SRAM_ECC_ON)\n+\n+EnumValue\n+Enum(sram_ecc_type) String(any) Value(SRAM_ECC_ANY)\n+\n+msram-ecc=\n+Target RejectNegative Joined ToLower Enum(sram_ecc_type) Var(flag_sram_ecc) Init(SRAM_ECC_ANY)\n+Compile for devices with the SRAM ECC feature enabled, or not. Default \\\"any\\\"."}, {"sha": "804cc26471b8352f8e64b43d5182a6fa2db442b0", "filename": "gcc/config/gcn/mkoffload.c", "status": "modified", "additions": 56, "deletions": 2, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aad32a00b7d2b64ae158b2b167768a9ae3e20f6e/gcc%2Fconfig%2Fgcn%2Fmkoffload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aad32a00b7d2b64ae158b2b167768a9ae3e20f6e/gcc%2Fconfig%2Fgcn%2Fmkoffload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fmkoffload.c?ref=aad32a00b7d2b64ae158b2b167768a9ae3e20f6e", "patch": "@@ -52,7 +52,10 @@\n #undef  EF_AMDGPU_MACH_AMDGCN_GFX906\n #define EF_AMDGPU_MACH_AMDGCN_GFX906 0x2f\n #undef  EF_AMDGPU_MACH_AMDGCN_GFX908\n-#define EF_AMDGPU_MACH_AMDGCN_GFX908 0x230  // Assume SRAM-ECC enabled.\n+#define EF_AMDGPU_MACH_AMDGCN_GFX908 0x30\n+\n+#define EF_AMDGPU_XNACK    0x100\n+#define EF_AMDGPU_SRAM_ECC 0x200\n \n #ifndef R_AMDGPU_NONE\n #define R_AMDGPU_NONE\t\t0\n@@ -77,6 +80,7 @@ static struct obstack files_to_cleanup;\n \n enum offload_abi offload_abi = OFFLOAD_ABI_UNSET;\n uint32_t elf_arch = EF_AMDGPU_MACH_AMDGCN_GFX803;  // Default GPU architecture.\n+uint32_t elf_flags = 0;\n \n /* Delete tempfiles.  */\n \n@@ -298,7 +302,7 @@ copy_early_debug_info (const char *infile, const char *outfile)\n   ehdr.e_ident[8] = ELFABIVERSION_AMDGPU_HSA;\n   ehdr.e_type = ET_REL;\n   ehdr.e_machine = EM_AMDGPU;\n-  ehdr.e_flags = elf_arch;\n+  ehdr.e_flags = elf_arch | elf_flags;\n \n   /* Load the section headers so we can walk them later.  */\n   Elf64_Shdr *sections = (Elf64_Shdr *)xmalloc (sizeof (Elf64_Shdr)\n@@ -823,6 +827,7 @@ main (int argc, char **argv)\n   bool fopenacc = false;\n   bool fPIC = false;\n   bool fpic = false;\n+  bool sram_seen = false;\n   for (int i = 1; i < argc; i++)\n     {\n #define STR \"-foffload-abi=\"\n@@ -845,6 +850,26 @@ main (int argc, char **argv)\n \tfPIC = true;\n       else if (strcmp (argv[i], \"-fpic\") == 0)\n \tfpic = true;\n+      else if (strcmp (argv[i], \"-mxnack\") == 0)\n+\telf_flags |= EF_AMDGPU_XNACK;\n+      else if (strcmp (argv[i], \"-mno-xnack\") == 0)\n+\telf_flags &= ~EF_AMDGPU_XNACK;\n+      else if (strcmp (argv[i], \"-msram-ecc=on\") == 0)\n+\t{\n+\t  elf_flags |= EF_AMDGPU_SRAM_ECC;\n+\t  sram_seen = true;\n+\t}\n+      else if (strcmp (argv[i], \"-msram-ecc=any\") == 0)\n+\t{\n+\t  /* FIXME: change this when we move to HSACOv4.  */\n+\t  elf_flags |= EF_AMDGPU_SRAM_ECC;\n+\t  sram_seen = true;\n+\t}\n+      else if (strcmp (argv[i], \"-msram-ecc=off\") == 0)\n+\t{\n+\t  elf_flags &= ~EF_AMDGPU_SRAM_ECC;\n+\t  sram_seen = true;\n+\t}\n       else if (strcmp (argv[i], \"-save-temps\") == 0)\n \tsave_temps = true;\n       else if (strcmp (argv[i], \"-v\") == 0)\n@@ -865,6 +890,21 @@ main (int argc, char **argv)\n   if (!(fopenacc ^ fopenmp))\n     fatal_error (input_location, \"either -fopenacc or -fopenmp must be set\");\n \n+  /* The SRAM-ECC feature defaults to \"any\" on GPUs where the feature is\n+     available.  */\n+  if (!sram_seen)\n+    switch (elf_arch)\n+      {\n+      case EF_AMDGPU_MACH_AMDGCN_GFX803:\n+      case EF_AMDGPU_MACH_AMDGCN_GFX900:\n+      case EF_AMDGPU_MACH_AMDGCN_GFX906:\n+\tbreak;\n+      default:\n+\t/* FIXME: change this when we move to HSACOv4.  */\n+\telf_flags |= EF_AMDGPU_SRAM_ECC;\n+\tbreak;\n+      }\n+\n   const char *abi;\n   switch (offload_abi)\n     {\n@@ -892,6 +932,12 @@ main (int argc, char **argv)\n   obstack_ptr_grow (&cc_argv_obstack, \"-xlto\");\n   if (fopenmp)\n     obstack_ptr_grow (&cc_argv_obstack, \"-mgomp\");\n+  obstack_ptr_grow (&cc_argv_obstack,\n+\t\t    (elf_flags & EF_AMDGPU_XNACK\n+\t\t     ? \"-mxnack\" : \"-mno-xnack\"));\n+  obstack_ptr_grow (&cc_argv_obstack,\n+\t\t    (elf_flags & EF_AMDGPU_SRAM_ECC\n+\t\t     ? \"-msram-ecc=on\" : \"-msram-ecc=off\"));\n \n   for (int ix = 1; ix != argc; ix++)\n     {\n@@ -993,6 +1039,14 @@ main (int argc, char **argv)\n \t}\n       obstack_ptr_grow (&ld_argv_obstack, gcn_s2_name);\n       obstack_ptr_grow (&ld_argv_obstack, \"-lgomp\");\n+      obstack_ptr_grow (&ld_argv_obstack,\n+\t\t\t(elf_flags & EF_AMDGPU_XNACK\n+\t\t\t ? \"-mxnack\" : \"-mno-xnack\"));\n+      obstack_ptr_grow (&ld_argv_obstack,\n+\t\t\t(elf_flags & EF_AMDGPU_SRAM_ECC\n+\t\t\t ? \"-msram-ecc=on\" : \"-msram-ecc=off\"));\n+      if (verbose)\n+\tobstack_ptr_grow (&ld_argv_obstack, \"-v\");\n \n       for (int i = 1; i < argc; i++)\n \tif (startswith (argv[i], \"-l\")"}, {"sha": "32697e6117c0147340f7cf78cff02e0a9f36afca", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aad32a00b7d2b64ae158b2b167768a9ae3e20f6e/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aad32a00b7d2b64ae158b2b167768a9ae3e20f6e/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=aad32a00b7d2b64ae158b2b167768a9ae3e20f6e", "patch": "@@ -18847,6 +18847,15 @@ Compile for GCN5 Vega 20 devices (gfx906).\n \n @end table\n \n+@item -msram-ecc=on\n+@itemx -msram-ecc=off\n+@itemx -msram-ecc=any\n+@opindex msram-ecc\n+Compile binaries suitable for devices with the SRAM-ECC feature enabled,\n+disabled, or either mode.  This feature can be enabled per-process on some\n+devices.  The compiled code must match the device mode. The default is\n+@samp{any}, for devices that support it.\n+\n @item -mstack-size=@var{bytes}\n @opindex mstack-size\n Specify how many @var{bytes} of stack space will be requested for each GPU\n@@ -18855,6 +18864,14 @@ available.  The size of the stack allocation may also have an impact on\n run-time performance.  The default is 32KB when using OpenACC or OpenMP, and\n 1MB otherwise.\n \n+@item -mxnack\n+@opindex mxnack\n+Compile binaries suitable for devices with the XNACK feature enabled.  Some\n+devices always require XNACK and some allow the user to configure XNACK.  The\n+compiled code must match the device mode.  The default is @samp{-mno-xnack}.\n+At present this option is a placeholder for support that is not yet\n+implemented.\n+\n @end table\n \n @node ARC Options"}, {"sha": "d46c3027a78c9159fc282d33f376523dcbfa6d39", "filename": "gcc/testsuite/gcc.target/gcn/sram-ecc-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aad32a00b7d2b64ae158b2b167768a9ae3e20f6e/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fsram-ecc-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aad32a00b7d2b64ae158b2b167768a9ae3e20f6e/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fsram-ecc-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fsram-ecc-1.c?ref=aad32a00b7d2b64ae158b2b167768a9ae3e20f6e", "patch": "@@ -0,0 +1,17 @@\n+/* Ensure that explicit zero-entend instructions are present when compiling\n+   for targets without sram-ecc enabled (in which sub-dword loads do not\n+   zero the high bits of the target register).  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msram-ecc=off\" } */\n+\n+extern unsigned char c;\n+\n+unsigned int\n+f ()\n+{\n+  return c;\n+}\n+\n+/* { dg-final { scan-assembler \"lshl.* 24\" } } */\n+/* { dg-final { scan-assembler \"lshr.* 24\" } } */"}, {"sha": "351d43ca42c4e0dbc04aef5f6e0ccdbf5c4a5037", "filename": "gcc/testsuite/gcc.target/gcn/sram-ecc-2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aad32a00b7d2b64ae158b2b167768a9ae3e20f6e/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fsram-ecc-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aad32a00b7d2b64ae158b2b167768a9ae3e20f6e/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fsram-ecc-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fsram-ecc-2.c?ref=aad32a00b7d2b64ae158b2b167768a9ae3e20f6e", "patch": "@@ -0,0 +1,17 @@\n+/* Ensure that explicit zero-entend instructions are present when compiling\n+   for targets without sram-ecc enabled (in which sub-dword loads do not\n+   zero the high bits of the target register).  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msram-ecc=off\" } */\n+\n+extern unsigned short s;\n+\n+unsigned short\n+f ()\n+{\n+  return s;\n+}\n+\n+/* { dg-final { scan-assembler \"lshl.* 16\" } } */\n+/* { dg-final { scan-assembler \"lshr.* 16\" } } */"}, {"sha": "692d4578b66b3c351ada8a131587c766276597d0", "filename": "gcc/testsuite/gcc.target/gcn/sram-ecc-3.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aad32a00b7d2b64ae158b2b167768a9ae3e20f6e/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fsram-ecc-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aad32a00b7d2b64ae158b2b167768a9ae3e20f6e/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fsram-ecc-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fsram-ecc-3.c?ref=aad32a00b7d2b64ae158b2b167768a9ae3e20f6e", "patch": "@@ -0,0 +1,21 @@\n+/* Ensure that explicit zero-entend instructions are present when compiling\n+   for targets without sram-ecc enabled (in which sub-dword loads do not\n+   zero the high bits of the target register).  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -dp -msram-ecc=off\" } */\n+\n+typedef unsigned int v64si __attribute__ ((vector_size (64*4)));\n+typedef unsigned char v64qi __attribute__ ((vector_size (64*1)));\n+\n+extern v64si a;\n+extern v64qi b;\n+\n+void\n+f ()\n+{\n+  for (int n = 0; n < 64; n++)\n+    a[n] = b[n];\n+}\n+\n+/* { dg-final { scan-assembler \"zero_extendv64qiv64si2\" } } */"}, {"sha": "61b8d552759055539dc9e4f63ead539885282e0d", "filename": "gcc/testsuite/gcc.target/gcn/sram-ecc-4.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aad32a00b7d2b64ae158b2b167768a9ae3e20f6e/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fsram-ecc-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aad32a00b7d2b64ae158b2b167768a9ae3e20f6e/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fsram-ecc-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fsram-ecc-4.c?ref=aad32a00b7d2b64ae158b2b167768a9ae3e20f6e", "patch": "@@ -0,0 +1,21 @@\n+/* Ensure that explicit zero-entend instructions are present when compiling\n+   for targets without sram-ecc enabled (in which sub-dword loads do not\n+   zero the high bits of the target register).  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -dp -msram-ecc=off\" } */\n+\n+typedef unsigned int v64si __attribute__ ((vector_size (64*4)));\n+typedef unsigned short v64hi __attribute__ ((vector_size (64*2)));\n+\n+extern v64si a;\n+extern v64hi b;\n+\n+void\n+f ()\n+{\n+  for (int n = 0; n < 64; n++)\n+    a[n] = b[n];\n+}\n+\n+/* { dg-final { scan-assembler \"zero_extendv64hiv64si2\" } } */"}, {"sha": "4f0543b5f892718db5a2f71deef12239de471fdb", "filename": "gcc/testsuite/gcc.target/gcn/sram-ecc-5.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aad32a00b7d2b64ae158b2b167768a9ae3e20f6e/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fsram-ecc-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aad32a00b7d2b64ae158b2b167768a9ae3e20f6e/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fsram-ecc-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fsram-ecc-5.c?ref=aad32a00b7d2b64ae158b2b167768a9ae3e20f6e", "patch": "@@ -0,0 +1,17 @@\n+/* Ensure that explicit zero-entend instructions are present when compiling\n+   for targets that may not have sram-ecc enabled (in which sub-dword loads do\n+   not zero the high bits of the target register).  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msram-ecc=any\" } */\n+\n+extern unsigned char c;\n+\n+unsigned int\n+f ()\n+{\n+  return c;\n+}\n+\n+/* { dg-final { scan-assembler \"lshl.* 24\" } } */\n+/* { dg-final { scan-assembler \"lshr.* 24\" } } */"}, {"sha": "9dfceaf90af1c82f1072ff704f27bd3ecc50f249", "filename": "gcc/testsuite/gcc.target/gcn/sram-ecc-6.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aad32a00b7d2b64ae158b2b167768a9ae3e20f6e/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fsram-ecc-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aad32a00b7d2b64ae158b2b167768a9ae3e20f6e/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fsram-ecc-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fsram-ecc-6.c?ref=aad32a00b7d2b64ae158b2b167768a9ae3e20f6e", "patch": "@@ -0,0 +1,17 @@\n+/* Ensure that explicit zero-entend instructions are present when compiling\n+   for targets that may not have sram-ecc enabled (in which sub-dword loads do\n+   not zero the high bits of the target register).  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msram-ecc=any\" } */\n+\n+extern unsigned short s;\n+\n+unsigned short\n+f ()\n+{\n+  return s;\n+}\n+\n+/* { dg-final { scan-assembler \"lshl.* 16\" } } */\n+/* { dg-final { scan-assembler \"lshr.* 16\" } } */"}, {"sha": "9d0ce6f6b5abfc8f0601f2637c0d4f25426fbc04", "filename": "gcc/testsuite/gcc.target/gcn/sram-ecc-7.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aad32a00b7d2b64ae158b2b167768a9ae3e20f6e/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fsram-ecc-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aad32a00b7d2b64ae158b2b167768a9ae3e20f6e/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fsram-ecc-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fsram-ecc-7.c?ref=aad32a00b7d2b64ae158b2b167768a9ae3e20f6e", "patch": "@@ -0,0 +1,21 @@\n+/* Ensure that explicit zero-entend instructions are present when compiling\n+   for targets that may not have sram-ecc enabled (in which sub-dword loads do\n+   not zero the high bits of the target register).  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -dp -msram-ecc=any\" } */\n+\n+typedef unsigned int v64si __attribute__ ((vector_size (64*4)));\n+typedef unsigned char v64qi __attribute__ ((vector_size (64*1)));\n+\n+extern v64si a;\n+extern v64qi b;\n+\n+void\n+f ()\n+{\n+  for (int n = 0; n < 64; n++)\n+    a[n] = b[n];\n+}\n+\n+/* { dg-final { scan-assembler \"zero_extendv64qiv64si2\" } } */"}, {"sha": "76e02882798269defa493f317d1aabcc132b095d", "filename": "gcc/testsuite/gcc.target/gcn/sram-ecc-8.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aad32a00b7d2b64ae158b2b167768a9ae3e20f6e/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fsram-ecc-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aad32a00b7d2b64ae158b2b167768a9ae3e20f6e/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fsram-ecc-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fsram-ecc-8.c?ref=aad32a00b7d2b64ae158b2b167768a9ae3e20f6e", "patch": "@@ -0,0 +1,21 @@\n+/* Ensure that explicit zero-entend instructions are present when compiling\n+   for targets that may not have sram-ecc enabled (in which sub-dword loads do\n+   not zero the high bits of the target register).  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -dp -msram-ecc=any\" } */\n+\n+typedef unsigned int v64si __attribute__ ((vector_size (64*4)));\n+typedef unsigned short v64hi __attribute__ ((vector_size (64*2)));\n+\n+extern v64si a;\n+extern v64hi b;\n+\n+void\n+f ()\n+{\n+  for (int n = 0; n < 64; n++)\n+    a[n] = b[n];\n+}\n+\n+/* { dg-final { scan-assembler \"zero_extendv64hiv64si2\" } } */"}]}