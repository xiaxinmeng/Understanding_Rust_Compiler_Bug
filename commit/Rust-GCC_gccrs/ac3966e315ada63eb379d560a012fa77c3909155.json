{"sha": "ac3966e315ada63eb379d560a012fa77c3909155", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWMzOTY2ZTMxNWFkYTYzZWIzNzlkNTYwYTAxMmZhNzdjMzkwOTE1NQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-01-06T01:54:50Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-01-06T01:54:50Z"}, "message": "analyzer: fix false leaks when writing through unknown ptrs [PR97072]\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/97072\n\t* region-model-reachability.cc (reachable_regions::init_cluster):\n\tConvert symbolic region handling to a switch statement.  Add cases\n\tto handle SK_UNKNOWN and SK_CONJURED.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/97072\n\t* gcc.dg/analyzer/pr97072.c: New test.", "tree": {"sha": "0a12bca0d543f8bcd8b12e8ea831ba644af08f9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a12bca0d543f8bcd8b12e8ea831ba644af08f9a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac3966e315ada63eb379d560a012fa77c3909155", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac3966e315ada63eb379d560a012fa77c3909155", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac3966e315ada63eb379d560a012fa77c3909155", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac3966e315ada63eb379d560a012fa77c3909155/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23fc2be633c61f24a4fbd4096c669e7147ca44ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23fc2be633c61f24a4fbd4096c669e7147ca44ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23fc2be633c61f24a4fbd4096c669e7147ca44ae"}], "stats": {"total": 45, "additions": 36, "deletions": 9}, "files": [{"sha": "a988ffc14399a256443908574289aa255ac0e723", "filename": "gcc/analyzer/region-model-reachability.cc", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac3966e315ada63eb379d560a012fa77c3909155/gcc%2Fanalyzer%2Fregion-model-reachability.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac3966e315ada63eb379d560a012fa77c3909155/gcc%2Fanalyzer%2Fregion-model-reachability.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model-reachability.cc?ref=ac3966e315ada63eb379d560a012fa77c3909155", "patch": "@@ -88,20 +88,38 @@ reachable_regions::init_cluster (const region *base_reg)\n   if (m_store->escaped_p (base_reg))\n     add (base_reg, true);\n \n-  /* If BASE_REG is *INIT_VAL(REG) for some other REG, see if REG is\n-     unbound and untouched.  If so, then add BASE_REG as a root.  */\n   if (const symbolic_region *sym_reg = base_reg->dyn_cast_symbolic_region ())\n     {\n       const svalue *ptr = sym_reg->get_pointer ();\n-      if (const initial_svalue *init_sval = ptr->dyn_cast_initial_svalue ())\n+      switch (ptr->get_kind ())\n \t{\n-\t  const region *init_sval_reg = init_sval->get_region ();\n-\t  const region *other_base_reg = init_sval_reg->get_base_region ();\n-\t  const binding_cluster *other_cluster\n-\t    = m_store->get_cluster (other_base_reg);\n-\t  if (other_cluster == NULL\n-\t      || !other_cluster->touched_p ())\n+\tdefault:\n+\t  break;\n+\tcase SK_INITIAL:\n+\t  {\n+\t    /* If BASE_REG is *INIT_VAL(REG) for some other REG, see if REG is\n+\t       unbound and untouched.  If so, then add BASE_REG as a root.  */\n+\t    const initial_svalue *init_sval\n+\t      = as_a <const initial_svalue *> (ptr);\n+\t    const region *init_sval_reg = init_sval->get_region ();\n+\t    const region *other_base_reg = init_sval_reg->get_base_region ();\n+\t    const binding_cluster *other_cluster\n+\t      = m_store->get_cluster (other_base_reg);\n+\t    if (other_cluster == NULL\n+\t\t|| !other_cluster->touched_p ())\n+\t      add (base_reg, true);\n+\t  }\n+\t  break;\n+\n+\tcase SK_UNKNOWN:\n+\tcase SK_CONJURED:\n+\t  {\n+\t    /* If this cluster is due to dereferencing an unknown/conjured\n+\t       pointer, any values written through the pointer could still\n+\t       be live.  */\n \t    add (base_reg, true);\n+\t  }\n+\t  break;\n \t}\n     }\n }"}, {"sha": "40241248884865343c3c8a31b91c365cdb7a8099", "filename": "gcc/testsuite/gcc.dg/analyzer/pr97072.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac3966e315ada63eb379d560a012fa77c3909155/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr97072.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac3966e315ada63eb379d560a012fa77c3909155/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr97072.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr97072.c?ref=ac3966e315ada63eb379d560a012fa77c3909155", "patch": "@@ -0,0 +1,9 @@\n+void unknown_fn_1 (void *);\n+\n+void test_1 (int co, int y)\n+{\n+  void *p = __builtin_malloc (1024);\n+  void **q;\n+  unknown_fn_1 (&q);\n+  *q = p;\n+}"}]}