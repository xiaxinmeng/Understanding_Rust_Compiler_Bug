{"sha": "e3be1116138b7a387420d370e9f6fddcc395f283", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTNiZTExMTYxMzhiN2EzODc0MjBkMzcwZTlmNmZkZGNjMzk1ZjI4Mw==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-10-11T21:00:51Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-10-11T21:00:51Z"}, "message": "expr.c (expand_expr <PLUS_EXPR>): Let expand_operands call safe_from_p for us, once it chooses an evaluation order.\n\n\n\t* expr.c (expand_expr <PLUS_EXPR>): Let expand_operands call\n\tsafe_from_p for us, once it chooses an evaluation order.\n\t(expand_expr <MULT_EXPR>): Likewise.\n\t(expand_expr <MIN_EXPR> <MAX_EXPR>): Likewise.  If expand_operands\n\tplaces the second operand in \"target\", swap the operands.\n\t(do_store_flag): Let expand_operands call safe_from_p for us.\n\n\t* gcc.c-torture/execute/20031011-1.c: New testcase.\n\nFrom-SVN: r72376", "tree": {"sha": "f822aaf60ebe6f78e03eaac4a15d38c198d39d8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f822aaf60ebe6f78e03eaac4a15d38c198d39d8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3be1116138b7a387420d370e9f6fddcc395f283", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3be1116138b7a387420d370e9f6fddcc395f283", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3be1116138b7a387420d370e9f6fddcc395f283", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3be1116138b7a387420d370e9f6fddcc395f283/comments", "author": null, "committer": null, "parents": [{"sha": "69efc31da2d437bce7aca9f6bf003a901619359c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69efc31da2d437bce7aca9f6bf003a901619359c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69efc31da2d437bce7aca9f6bf003a901619359c"}], "stats": {"total": 62, "additions": 53, "deletions": 9}, "files": [{"sha": "38bd51f1da92b2586cda00cd65cfe90a3a54b9c2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3be1116138b7a387420d370e9f6fddcc395f283/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3be1116138b7a387420d370e9f6fddcc395f283/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e3be1116138b7a387420d370e9f6fddcc395f283", "patch": "@@ -1,3 +1,12 @@\n+2003-10-11  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* expr.c (expand_expr <PLUS_EXPR>): Let expand_operands call\n+\tsafe_from_p for us, once it chooses an evaluation order.\n+\t(expand_expr <MULT_EXPR>): Likewise.\n+\t(expand_expr <MIN_EXPR> <MAX_EXPR>): Likewise.  If expand_operands\n+\tplaces the second operand in \"target\", swap the operands.\n+\t(do_store_flag): Let expand_operands call safe_from_p for us.\n+\n 2003-10-11  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \tPR optimization/12544"}, {"sha": "532a227dd88b26573461aa0a48e29f97b4b850b4", "filename": "gcc/expr.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3be1116138b7a387420d370e9f6fddcc395f283/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3be1116138b7a387420d370e9f6fddcc395f283/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=e3be1116138b7a387420d370e9f6fddcc395f283", "patch": "@@ -7775,9 +7775,6 @@ expand_expr (tree exp, rtx target, enum machine_mode tmode,\n \t    }\n \t}\n \n-      if (! safe_from_p (subtarget, TREE_OPERAND (exp, 1), 1))\n-\tsubtarget = 0;\n-\n       /* No sense saving up arithmetic to be done\n \t if it's all in the wrong mode to form part of an address.\n \t And force_operand won't know whether to sign-extend or\n@@ -7885,9 +7882,6 @@ expand_expr (tree exp, rtx target, enum machine_mode tmode,\n \t\t\t\t\t     TYPE_MODE (TREE_TYPE (exp1))));\n \t}\n \n-      if (! safe_from_p (subtarget, TREE_OPERAND (exp, 1), 1))\n-\tsubtarget = 0;\n-\n       if (modifier == EXPAND_STACK_PARM)\n \ttarget = 0;\n \n@@ -8066,7 +8060,6 @@ expand_expr (tree exp, rtx target, enum machine_mode tmode,\n       target = original_target;\n       if (target == 0\n \t  || modifier == EXPAND_STACK_PARM\n-\t  || ! safe_from_p (target, TREE_OPERAND (exp, 1), 1)\n \t  || (GET_CODE (target) == MEM && MEM_VOLATILE_P (target))\n \t  || GET_MODE (target) != mode\n \t  || (GET_CODE (target) == REG\n@@ -8093,6 +8086,14 @@ expand_expr (tree exp, rtx target, enum machine_mode tmode,\n       if (GET_CODE (target) == MEM)\n \ttarget = gen_reg_rtx (mode);\n \n+      /* If op1 was placed in target, swap op0 and op1.  */\n+      if (target != op0 && target == op1)\n+\t{\n+\t  rtx tem = op0;\n+\t  op0 = op1;\n+\t  op1 = tem;\n+\t}\n+\n       if (target != op0)\n \temit_move_insn (target, op0);\n \n@@ -9589,8 +9590,7 @@ do_store_flag (tree exp, rtx target, enum machine_mode mode, int only_cheap)\n     }\n \n   if (! get_subtarget (target)\n-      || GET_MODE (subtarget) != operand_mode\n-      || ! safe_from_p (subtarget, arg1, 1))\n+      || GET_MODE (subtarget) != operand_mode)\n     subtarget = 0;\n \n   expand_operands (arg0, arg1, subtarget, &op0, &op1, 0);"}, {"sha": "331794d7a0f5eb143022aab4756b30486c5e3ea1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3be1116138b7a387420d370e9f6fddcc395f283/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3be1116138b7a387420d370e9f6fddcc395f283/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e3be1116138b7a387420d370e9f6fddcc395f283", "patch": "@@ -1,3 +1,7 @@\n+2003-10-11  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* gcc.c-torture/execute/20031011-1.c: New testcase.\n+\n 2003-10-11  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* gcc.c-torture/compile/20031011-1.c: New test."}, {"sha": "9aa40b8a08d608cc02cf6d98fb163b791ce379a3", "filename": "gcc/testsuite/gcc.c-torture/execute/20031011-1.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3be1116138b7a387420d370e9f6fddcc395f283/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20031011-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3be1116138b7a387420d370e9f6fddcc395f283/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20031011-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20031011-1.c?ref=e3be1116138b7a387420d370e9f6fddcc395f283", "patch": "@@ -0,0 +1,31 @@\n+/* Check that MAX_EXPR and MIN_EXPR are working properly.  */\n+\n+#define MAX(X,Y) ((X) > (Y) ? (X) : (Y))\n+#define MIN(X,Y) ((X) < (Y) ? (X) : (Y))\n+\n+extern void abort (void);\n+\n+int main()\n+{\n+  int ll_bitsize, ll_bitpos;\n+  int rl_bitsize, rl_bitpos;\n+  int end_bit;\n+\n+  ll_bitpos = 32;  ll_bitsize = 32;\n+  rl_bitpos = 0;   rl_bitsize = 32;\n+\n+  end_bit = MAX (ll_bitpos + ll_bitsize, rl_bitpos + rl_bitsize);\n+  if (end_bit != 64)\n+    abort ();\n+  end_bit = MAX (rl_bitpos + rl_bitsize, ll_bitpos + ll_bitsize);\n+  if (end_bit != 64)\n+    abort ();\n+  end_bit = MIN (ll_bitpos + ll_bitsize, rl_bitpos + rl_bitsize);\n+  if (end_bit != 32)\n+    abort ();\n+  end_bit = MIN (rl_bitpos + rl_bitsize, ll_bitpos + ll_bitsize);\n+  if (end_bit != 32)\n+    abort ();\n+  return 0;\n+}\n+"}]}