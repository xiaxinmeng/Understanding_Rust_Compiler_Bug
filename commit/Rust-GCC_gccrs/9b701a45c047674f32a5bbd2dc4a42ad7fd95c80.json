{"sha": "9b701a45c047674f32a5bbd2dc4a42ad7fd95c80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWI3MDFhNDVjMDQ3Njc0ZjMyYTViYmQyZGM0YTQyYWQ3ZmQ5NWM4MA==", "commit": {"author": {"name": "Mikael Morin", "email": "mikael.morin@sfr.fr", "date": "2011-10-07T19:52:34Z"}, "committer": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2011-10-07T19:52:34Z"}, "message": "trans-intrinsic.c (walk_coarray): New function.\n\n\t* trans-intrinsic.c (walk_coarray): New function.\n\t(convert_element_to_coarray_ref): Move code to walk_coarray. Remove.\n\t(trans-this_image, trans_image_index, conv_intrinsic_cobound):\n\tUse walk_coarray.\n\nFrom-SVN: r179684", "tree": {"sha": "30faf6bf43e93edda58000335ce95e2034e90101", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30faf6bf43e93edda58000335ce95e2034e90101"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b701a45c047674f32a5bbd2dc4a42ad7fd95c80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b701a45c047674f32a5bbd2dc4a42ad7fd95c80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b701a45c047674f32a5bbd2dc4a42ad7fd95c80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b701a45c047674f32a5bbd2dc4a42ad7fd95c80/comments", "author": null, "committer": null, "parents": [{"sha": "6bd0ce7b615b8ac7ccdc63458b558765847e7da9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bd0ce7b615b8ac7ccdc63458b558765847e7da9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bd0ce7b615b8ac7ccdc63458b558765847e7da9"}], "stats": {"total": 53, "additions": 34, "deletions": 19}, "files": [{"sha": "e7a9941b9cfa9f8df931ed3f130d5653a2ee9ca2", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b701a45c047674f32a5bbd2dc4a42ad7fd95c80/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b701a45c047674f32a5bbd2dc4a42ad7fd95c80/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=9b701a45c047674f32a5bbd2dc4a42ad7fd95c80", "patch": "@@ -1,3 +1,10 @@\n+2011-10-07  Mikael Morin  <mikael.morin@sfr.fr>\n+\n+\t* trans-intrinsic.c (walk_coarray): New function.\n+\t(convert_element_to_coarray_ref): Move code to walk_coarray. Remove.\n+\t(trans-this_image, trans_image_index, conv_intrinsic_cobound):\n+\tUse walk_coarray.\n+\n 2011-10-07  Mikael Morin  <mikael.morin@sfr.fr>\n \n \t* trans-array.c (gfc_conv_expr_descriptor): Add out-of-the-scalarizer"}, {"sha": "bc21b020db54a0acdc00bc2bb0b3960bb76fe365", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 27, "deletions": 19, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b701a45c047674f32a5bbd2dc4a42ad7fd95c80/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b701a45c047674f32a5bbd2dc4a42ad7fd95c80/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=9b701a45c047674f32a5bbd2dc4a42ad7fd95c80", "patch": "@@ -924,18 +924,32 @@ gfc_conv_intrinsic_exponent (gfc_se *se, gfc_expr *expr)\n /* Convert the last ref of a scalar coarray from an AR_ELEMENT to an\n    AR_FULL, suitable for the scalarizer.  */\n \n-static void\n-convert_element_to_coarray_ref (gfc_expr *expr)\n+static gfc_ss *\n+walk_coarray (gfc_expr *e)\n {\n-  gfc_ref *ref;\n+  gfc_ss *ss;\n \n-  for (ref = expr->ref; ref; ref = ref->next)\n-    if (ref->type == REF_ARRAY && ref->next == NULL\n-\t&& ref->u.ar.codimen)\n-      {\n-\tref->u.ar.type = AR_FULL;\n-\tbreak;\n-      }\n+  gcc_assert (gfc_get_corank (e) > 0);\n+\n+  ss = gfc_walk_expr (e);\n+\n+  /* Fix scalar coarray.  */\n+  if (ss == gfc_ss_terminator)\n+    {\n+      gfc_ref *ref;\n+\n+      ss = gfc_get_array_ss (gfc_ss_terminator, e, 0, GFC_SS_SECTION);\n+\n+      ref = e->ref;\n+      while (ref->next)\n+\tref = ref->next;\n+\n+      gcc_assert (ref->type == REF_ARRAY && ref->u.ar.codimen > 0);\n+      ref->u.ar.type = AR_FULL;\n+      ss->data.info.ref = ref;\n+    }\n+\n+  return ss;\n }\n \n \n@@ -969,9 +983,7 @@ trans_this_image (gfc_se * se, gfc_expr *expr)\n \n   /* Obtain the descriptor of the COARRAY.  */\n   gfc_init_se (&argse, NULL);\n-  if (expr->value.function.actual->expr->rank == 0)\n-    convert_element_to_coarray_ref (expr->value.function.actual->expr);\n-  ss = gfc_walk_expr (expr->value.function.actual->expr);\n+  ss = walk_coarray (expr->value.function.actual->expr);\n   gcc_assert (ss != gfc_ss_terminator);\n   ss->data.info.codimen = corank;\n   argse.want_coarray = 1;\n@@ -1157,9 +1169,7 @@ trans_image_index (gfc_se * se, gfc_expr *expr)\n \n   /* Obtain the descriptor of the COARRAY.  */\n   gfc_init_se (&argse, NULL);\n-  if (expr->value.function.actual->expr->rank == 0)\n-    convert_element_to_coarray_ref (expr->value.function.actual->expr);\n-  ss = gfc_walk_expr (expr->value.function.actual->expr);\n+  ss = walk_coarray (expr->value.function.actual->expr);\n   gcc_assert (ss != gfc_ss_terminator);\n   ss->data.info.codimen = corank;\n   argse.want_coarray = 1;\n@@ -1484,9 +1494,7 @@ conv_intrinsic_cobound (gfc_se * se, gfc_expr * expr)\n   gcc_assert (arg->expr->expr_type == EXPR_VARIABLE);\n   corank = gfc_get_corank (arg->expr);\n \n-  if (expr->value.function.actual->expr->rank == 0)\n-    convert_element_to_coarray_ref (expr->value.function.actual->expr);\n-  ss = gfc_walk_expr (arg->expr);\n+  ss = walk_coarray (arg->expr);\n   gcc_assert (ss != gfc_ss_terminator);\n   ss->data.info.codimen = corank;\n   gfc_init_se (&argse, NULL);"}]}