{"sha": "8b898d4cbd89a6260b93d768d0c2af1d51f28763", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGI4OThkNGNiZDg5YTYyNjBiOTNkNzY4ZDBjMmFmMWQ1MWYyODc2Mw==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2015-01-12T15:09:03Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2015-01-12T15:09:03Z"}, "message": "[ARM] Implement TARGET_SCHED_MACRO_FUSION_PAIR_P\n\n\t* config/arm/arm-protos.h (tune_params): Add fuseable_ops field.\n\t* config/arm/arm.c (arm_macro_fusion_p): New function.\n\t(arm_macro_fusion_pair_p): Likewise.\n\t(TARGET_SCHED_MACRO_FUSION_P): Define.\n\t(TARGET_SCHED_MACRO_FUSION_PAIR_P): Likewise.\n\t(ARM_FUSE_NOTHING): Likewise.\n\t(ARM_FUSE_MOVW_MOVT): Likewise.\n\t(arm_slowmul_tune, arm_fastmul_tune, arm_strongarm_tune,\n\tarm_xscale_tune, arm_9e_tune, arm_v6t2_tune, arm_cortex_tune,\n\tarm_cortex_a8_tune, arm_cortex_a7_tune, arm_cortex_a15_tune,\n\tarm_cortex_a53_tune, arm_cortex_a57_tune, arm_cortex_a9_tune,\n\tarm_cortex_a12_tune, arm_v7m_tune, arm_v6m_tune, arm_fa726te_tune\n\tarm_cortex_a5_tune): Specify fuseable_ops value.\n\nFrom-SVN: r219470", "tree": {"sha": "6cfe43b6c0ffcfe85fd9876986016e224cccfe02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6cfe43b6c0ffcfe85fd9876986016e224cccfe02"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b898d4cbd89a6260b93d768d0c2af1d51f28763", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b898d4cbd89a6260b93d768d0c2af1d51f28763", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b898d4cbd89a6260b93d768d0c2af1d51f28763", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b898d4cbd89a6260b93d768d0c2af1d51f28763/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "49c8bc0c77ee47f604c1e1ebe41cd9170fd33f48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49c8bc0c77ee47f604c1e1ebe41cd9170fd33f48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49c8bc0c77ee47f604c1e1ebe41cd9170fd33f48"}], "stats": {"total": 154, "additions": 135, "deletions": 19}, "files": [{"sha": "6587ffc8146b7582c7d332e4c23b239ecf299d52", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b898d4cbd89a6260b93d768d0c2af1d51f28763/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b898d4cbd89a6260b93d768d0c2af1d51f28763/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8b898d4cbd89a6260b93d768d0c2af1d51f28763", "patch": "@@ -1,3 +1,19 @@\n+2015-01-12  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/arm/arm-protos.h (tune_params): Add fuseable_ops field.\n+\t* config/arm/arm.c (arm_macro_fusion_p): New function.\n+\t(arm_macro_fusion_pair_p): Likewise.\n+\t(TARGET_SCHED_MACRO_FUSION_P): Define.\n+\t(TARGET_SCHED_MACRO_FUSION_PAIR_P): Likewise.\n+\t(ARM_FUSE_NOTHING): Likewise.\n+\t(ARM_FUSE_MOVW_MOVT): Likewise.\n+\t(arm_slowmul_tune, arm_fastmul_tune, arm_strongarm_tune,\n+\tarm_xscale_tune, arm_9e_tune, arm_v6t2_tune, arm_cortex_tune,\n+\tarm_cortex_a8_tune, arm_cortex_a7_tune, arm_cortex_a15_tune,\n+\tarm_cortex_a53_tune, arm_cortex_a57_tune, arm_cortex_a9_tune,\n+\tarm_cortex_a12_tune, arm_v7m_tune, arm_v6m_tune, arm_fa726te_tune\n+\tarm_cortex_a5_tune): Specify fuseable_ops value.\n+\n 2015-01-12  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR bootstrap/64561"}, {"sha": "320215bcaf6c6dd3ac97fe584cf1b5f2a122b3d6", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b898d4cbd89a6260b93d768d0c2af1d51f28763/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b898d4cbd89a6260b93d768d0c2af1d51f28763/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=8b898d4cbd89a6260b93d768d0c2af1d51f28763", "patch": "@@ -289,6 +289,8 @@ struct tune_params\n   bool string_ops_prefer_neon;\n   /* Maximum number of instructions to inline calls to memset.  */\n   int max_insns_inline_memset;\n+  /* Bitfield encoding the fuseable pairs of instructions.  */\n+  unsigned int fuseable_ops;\n };\n \n extern const struct tune_params *current_tune;"}, {"sha": "a9cc3e112856b971580dea6e90fb1c10a0ee2e2d", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 117, "deletions": 19, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b898d4cbd89a6260b93d768d0c2af1d51f28763/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b898d4cbd89a6260b93d768d0c2af1d51f28763/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=8b898d4cbd89a6260b93d768d0c2af1d51f28763", "patch": "@@ -257,6 +257,7 @@ static void arm_expand_builtin_va_start (tree, rtx);\n static tree arm_gimplify_va_arg_expr (tree, tree, gimple_seq *, gimple_seq *);\n static void arm_option_override (void);\n static unsigned HOST_WIDE_INT arm_shift_truncation_mask (machine_mode);\n+static bool arm_macro_fusion_p (void);\n static bool arm_cannot_copy_insn_p (rtx_insn *);\n static int arm_issue_rate (void);\n static void arm_output_dwarf_dtprel (FILE *, int, rtx) ATTRIBUTE_UNUSED;\n@@ -297,6 +298,8 @@ static int arm_cortex_m_branch_cost (bool, bool);\n static bool arm_vectorize_vec_perm_const_ok (machine_mode vmode,\n \t\t\t\t\t     const unsigned char *sel);\n \n+static bool aarch_macro_fusion_pair_p (rtx_insn*, rtx_insn*);\n+\n static int arm_builtin_vectorization_cost (enum vect_cost_for_stmt type_of_cost,\n \t\t\t\t\t   tree vectype,\n \t\t\t\t\t   int misalign ATTRIBUTE_UNUSED);\n@@ -404,6 +407,12 @@ static const struct attribute_spec arm_attribute_table[] =\n #undef  TARGET_COMP_TYPE_ATTRIBUTES\n #define TARGET_COMP_TYPE_ATTRIBUTES arm_comp_type_attributes\n \n+#undef TARGET_SCHED_MACRO_FUSION_P\n+#define TARGET_SCHED_MACRO_FUSION_P arm_macro_fusion_p\n+\n+#undef TARGET_SCHED_MACRO_FUSION_PAIR_P\n+#define TARGET_SCHED_MACRO_FUSION_PAIR_P aarch_macro_fusion_pair_p\n+\n #undef  TARGET_SET_DEFAULT_TYPE_ATTRIBUTES\n #define TARGET_SET_DEFAULT_TYPE_ATTRIBUTES arm_set_default_type_attributes\n \n@@ -1647,6 +1656,9 @@ const struct cpu_cost_table v7m_extra_costs =\n   }\n };\n \n+#define ARM_FUSE_NOTHING\t(0)\n+#define ARM_FUSE_MOVW_MOVT\t(1 << 0)\n+\n const struct tune_params arm_slowmul_tune =\n {\n   arm_slowmul_rtx_costs,\n@@ -1663,7 +1675,8 @@ const struct tune_params arm_slowmul_tune =\n   false,                                        /* Prefer Neon for 64-bits bitops.  */\n   false, false,                                 /* Prefer 32-bit encodings.  */\n   false,\t\t\t\t\t/* Prefer Neon for stringops.  */\n-  8\t\t\t\t\t\t/* Maximum insns to inline memset.  */\n+  8,\t\t\t\t\t\t/* Maximum insns to inline memset.  */\n+  ARM_FUSE_NOTHING\t\t\t\t/* Fuseable pairs of instructions.  */\n };\n \n const struct tune_params arm_fastmul_tune =\n@@ -1682,7 +1695,8 @@ const struct tune_params arm_fastmul_tune =\n   false,                                        /* Prefer Neon for 64-bits bitops.  */\n   false, false,                                 /* Prefer 32-bit encodings.  */\n   false,\t\t\t\t\t/* Prefer Neon for stringops.  */\n-  8\t\t\t\t\t\t/* Maximum insns to inline memset.  */\n+  8,\t\t\t\t\t\t/* Maximum insns to inline memset.  */\n+  ARM_FUSE_NOTHING\t\t\t\t/* Fuseable pairs of instructions.  */\n };\n \n /* StrongARM has early execution of branches, so a sequence that is worth\n@@ -1704,7 +1718,8 @@ const struct tune_params arm_strongarm_tune =\n   false,                                        /* Prefer Neon for 64-bits bitops.  */\n   false, false,                                 /* Prefer 32-bit encodings.  */\n   false,\t\t\t\t\t/* Prefer Neon for stringops.  */\n-  8\t\t\t\t\t\t/* Maximum insns to inline memset.  */\n+  8,\t\t\t\t\t\t/* Maximum insns to inline memset.  */\n+  ARM_FUSE_NOTHING\t\t\t\t/* Fuseable pairs of instructions.  */\n };\n \n const struct tune_params arm_xscale_tune =\n@@ -1723,7 +1738,8 @@ const struct tune_params arm_xscale_tune =\n   false,                                        /* Prefer Neon for 64-bits bitops.  */\n   false, false,                                 /* Prefer 32-bit encodings.  */\n   false,\t\t\t\t\t/* Prefer Neon for stringops.  */\n-  8\t\t\t\t\t\t/* Maximum insns to inline memset.  */\n+  8,\t\t\t\t\t\t/* Maximum insns to inline memset.  */\n+  ARM_FUSE_NOTHING\t\t\t\t/* Fuseable pairs of instructions.  */\n };\n \n const struct tune_params arm_9e_tune =\n@@ -1742,7 +1758,8 @@ const struct tune_params arm_9e_tune =\n   false,                                        /* Prefer Neon for 64-bits bitops.  */\n   false, false,                                 /* Prefer 32-bit encodings.  */\n   false,\t\t\t\t\t/* Prefer Neon for stringops.  */\n-  8\t\t\t\t\t\t/* Maximum insns to inline memset.  */\n+  8,\t\t\t\t\t\t/* Maximum insns to inline memset.  */\n+  ARM_FUSE_NOTHING\t\t\t\t/* Fuseable pairs of instructions.  */\n };\n \n const struct tune_params arm_v6t2_tune =\n@@ -1761,7 +1778,8 @@ const struct tune_params arm_v6t2_tune =\n   false,                                        /* Prefer Neon for 64-bits bitops.  */\n   false, false,                                 /* Prefer 32-bit encodings.  */\n   false,\t\t\t\t\t/* Prefer Neon for stringops.  */\n-  8\t\t\t\t\t\t/* Maximum insns to inline memset.  */\n+  8,\t\t\t\t\t\t/* Maximum insns to inline memset.  */\n+  ARM_FUSE_NOTHING\t\t\t\t/* Fuseable pairs of instructions.  */\n };\n \n /* Generic Cortex tuning.  Use more specific tunings if appropriate.  */\n@@ -1781,7 +1799,8 @@ const struct tune_params arm_cortex_tune =\n   false,                                        /* Prefer Neon for 64-bits bitops.  */\n   false, false,                                 /* Prefer 32-bit encodings.  */\n   false,\t\t\t\t\t/* Prefer Neon for stringops.  */\n-  8\t\t\t\t\t\t/* Maximum insns to inline memset.  */\n+  8,\t\t\t\t\t\t/* Maximum insns to inline memset.  */\n+  ARM_FUSE_NOTHING\t\t\t\t/* Fuseable pairs of instructions.  */\n };\n \n const struct tune_params arm_cortex_a8_tune =\n@@ -1800,7 +1819,8 @@ const struct tune_params arm_cortex_a8_tune =\n   false,                                        /* Prefer Neon for 64-bits bitops.  */\n   false, false,                                 /* Prefer 32-bit encodings.  */\n   true,\t\t\t\t\t\t/* Prefer Neon for stringops.  */\n-  8\t\t\t\t\t\t/* Maximum insns to inline memset.  */\n+  8,\t\t\t\t\t\t/* Maximum insns to inline memset.  */\n+  ARM_FUSE_NOTHING\t\t\t\t/* Fuseable pairs of instructions.  */\n };\n \n const struct tune_params arm_cortex_a7_tune =\n@@ -1819,7 +1839,8 @@ const struct tune_params arm_cortex_a7_tune =\n   false,\t\t\t\t\t/* Prefer Neon for 64-bits bitops.  */\n   false, false,                                 /* Prefer 32-bit encodings.  */\n   true,\t\t\t\t\t\t/* Prefer Neon for stringops.  */\n-  8\t\t\t\t\t\t/* Maximum insns to inline memset.  */\n+  8,\t\t\t\t\t\t/* Maximum insns to inline memset.  */\n+  ARM_FUSE_NOTHING\t\t\t\t/* Fuseable pairs of instructions.  */\n };\n \n const struct tune_params arm_cortex_a15_tune =\n@@ -1838,7 +1859,8 @@ const struct tune_params arm_cortex_a15_tune =\n   false,                                        /* Prefer Neon for 64-bits bitops.  */\n   true, true,                                   /* Prefer 32-bit encodings.  */\n   true,\t\t\t\t\t\t/* Prefer Neon for stringops.  */\n-  8\t\t\t\t\t\t/* Maximum insns to inline memset.  */\n+  8,\t\t\t\t\t\t/* Maximum insns to inline memset.  */\n+  ARM_FUSE_NOTHING\t\t\t\t/* Fuseable pairs of instructions.  */\n };\n \n const struct tune_params arm_cortex_a53_tune =\n@@ -1857,7 +1879,8 @@ const struct tune_params arm_cortex_a53_tune =\n   false,\t\t\t\t\t/* Prefer Neon for 64-bits bitops.  */\n   false, false,                                 /* Prefer 32-bit encodings.  */\n   false,\t\t\t\t\t/* Prefer Neon for stringops.  */\n-  8\t\t\t\t\t\t/* Maximum insns to inline memset.  */\n+  8,\t\t\t\t\t\t/* Maximum insns to inline memset.  */\n+  ARM_FUSE_MOVW_MOVT\t\t\t\t/* Fuseable pairs of instructions.  */\n };\n \n const struct tune_params arm_cortex_a57_tune =\n@@ -1876,7 +1899,8 @@ const struct tune_params arm_cortex_a57_tune =\n   false,                                       /* Prefer Neon for 64-bits bitops.  */\n   true, true,                                  /* Prefer 32-bit encodings.  */\n   false,\t\t\t\t\t/* Prefer Neon for stringops.  */\n-  8\t\t\t\t\t\t/* Maximum insns to inline memset.  */\n+  8,\t\t\t\t\t\t/* Maximum insns to inline memset.  */\n+  ARM_FUSE_MOVW_MOVT\t\t\t\t/* Fuseable pairs of instructions.  */\n };\n \n /* Branches can be dual-issued on Cortex-A5, so conditional execution is\n@@ -1898,7 +1922,8 @@ const struct tune_params arm_cortex_a5_tune =\n   false,                                        /* Prefer Neon for 64-bits bitops.  */\n   false, false,                                 /* Prefer 32-bit encodings.  */\n   true,\t\t\t\t\t\t/* Prefer Neon for stringops.  */\n-  8\t\t\t\t\t\t/* Maximum insns to inline memset.  */\n+  8,\t\t\t\t\t\t/* Maximum insns to inline memset.  */\n+  ARM_FUSE_NOTHING\t\t\t\t/* Fuseable pairs of instructions.  */\n };\n \n const struct tune_params arm_cortex_a9_tune =\n@@ -1917,7 +1942,8 @@ const struct tune_params arm_cortex_a9_tune =\n   false,                                        /* Prefer Neon for 64-bits bitops.  */\n   false, false,                                 /* Prefer 32-bit encodings.  */\n   false,\t\t\t\t\t/* Prefer Neon for stringops.  */\n-  8\t\t\t\t\t\t/* Maximum insns to inline memset.  */\n+  8,\t\t\t\t\t\t/* Maximum insns to inline memset.  */\n+  ARM_FUSE_NOTHING\t\t\t\t/* Fuseable pairs of instructions.  */\n };\n \n const struct tune_params arm_cortex_a12_tune =\n@@ -1936,7 +1962,8 @@ const struct tune_params arm_cortex_a12_tune =\n   false,                                        /* Prefer Neon for 64-bits bitops.  */\n   false, false,                                 /* Prefer 32-bit encodings.  */\n   true,\t\t\t\t\t\t/* Prefer Neon for stringops.  */\n-  8\t\t\t\t\t\t/* Maximum insns to inline memset.  */\n+  8,\t\t\t\t\t\t/* Maximum insns to inline memset.  */\n+  ARM_FUSE_MOVW_MOVT\t\t\t\t/* Fuseable pairs of instructions.  */\n };\n \n /* armv7m tuning.  On Cortex-M4 cores for example, MOVW/MOVT take a single\n@@ -1962,7 +1989,8 @@ const struct tune_params arm_v7m_tune =\n   false,                                        /* Prefer Neon for 64-bits bitops.  */\n   false, false,                                 /* Prefer 32-bit encodings.  */\n   false,\t\t\t\t\t/* Prefer Neon for stringops.  */\n-  8\t\t\t\t\t\t/* Maximum insns to inline memset.  */\n+  8,\t\t\t\t\t\t/* Maximum insns to inline memset.  */\n+  ARM_FUSE_NOTHING\t\t\t\t/* Fuseable pairs of instructions.  */\n };\n \n /* Cortex-M7 tuning.  */\n@@ -1983,7 +2011,8 @@ const struct tune_params arm_cortex_m7_tune =\n   false,                                        /* Prefer Neon for 64-bits bitops.  */\n   false, false,                                 /* Prefer 32-bit encodings.  */\n   false,\t\t\t\t\t/* Prefer Neon for stringops.  */\n-  8\t\t\t\t\t\t/* Maximum insns to inline memset.  */\n+  8,\t\t\t\t\t\t/* Maximum insns to inline memset.  */\n+  ARM_FUSE_NOTHING\t\t\t\t/* Fuseable pairs of instructions.  */\n };\n \n /* The arm_v6m_tune is duplicated from arm_cortex_tune, rather than\n@@ -2004,7 +2033,8 @@ const struct tune_params arm_v6m_tune =\n   false,                                        /* Prefer Neon for 64-bits bitops.  */\n   false, false,                                 /* Prefer 32-bit encodings.  */\n   false,\t\t\t\t\t/* Prefer Neon for stringops.  */\n-  8\t\t\t\t\t\t/* Maximum insns to inline memset.  */\n+  8,\t\t\t\t\t\t/* Maximum insns to inline memset.  */\n+  ARM_FUSE_NOTHING\t\t\t\t/* Fuseable pairs of instructions.  */\n };\n \n const struct tune_params arm_fa726te_tune =\n@@ -2023,7 +2053,8 @@ const struct tune_params arm_fa726te_tune =\n   false,                                        /* Prefer Neon for 64-bits bitops.  */\n   false, false,                                 /* Prefer 32-bit encodings.  */\n   false,\t\t\t\t\t/* Prefer Neon for stringops.  */\n-  8\t\t\t\t\t\t/* Maximum insns to inline memset.  */\n+  8,\t\t\t\t\t\t/* Maximum insns to inline memset.  */\n+  ARM_FUSE_NOTHING\t\t\t\t/* Fuseable pairs of instructions.  */\n };\n \n \n@@ -29157,6 +29188,73 @@ arm_gen_setmem (rtx *operands)\n   return arm_block_set_aligned_non_vect (dstbase, length, value, align);\n }\n \n+\n+static bool\n+arm_macro_fusion_p (void)\n+{\n+  return current_tune->fuseable_ops != ARM_FUSE_NOTHING;\n+}\n+\n+\n+static bool\n+aarch_macro_fusion_pair_p (rtx_insn* prev, rtx_insn* curr)\n+{\n+  rtx set_dest;\n+  rtx prev_set = single_set (prev);\n+  rtx curr_set = single_set (curr);\n+\n+  if (!prev_set\n+      || !curr_set)\n+    return false;\n+\n+  if (any_condjump_p (curr))\n+    return false;\n+\n+  if (!arm_macro_fusion_p ())\n+    return false;\n+\n+  if (current_tune->fuseable_ops & ARM_FUSE_MOVW_MOVT)\n+    {\n+      /* We are trying to fuse\n+         movw imm / movt imm\n+         instructions as a group that gets scheduled together.  */\n+\n+      set_dest = SET_DEST (curr_set);\n+\n+      if (GET_MODE (set_dest) != SImode)\n+        return false;\n+\n+      /* We are trying to match:\n+         prev (movw)  == (set (reg r0) (const_int imm16))\n+         curr (movt) == (set (zero_extract (reg r0)\n+                                           (const_int 16)\n+                                           (const_int 16))\n+                             (const_int imm16_1))\n+         or\n+         prev (movw) == (set (reg r1)\n+                              (high (symbol_ref (\"SYM\"))))\n+         curr (movt) == (set (reg r0)\n+                             (lo_sum (reg r1)\n+                                     (symbol_ref (\"SYM\"))))  */\n+      if (GET_CODE (set_dest) == ZERO_EXTRACT)\n+        {\n+          if (CONST_INT_P (SET_SRC (curr_set))\n+              && CONST_INT_P (SET_SRC (prev_set))\n+              && REG_P (XEXP (set_dest, 0))\n+              && REG_P (SET_DEST (prev_set))\n+              && REGNO (XEXP (set_dest, 0)) == REGNO (SET_DEST (prev_set)))\n+            return true;\n+        }\n+      else if (GET_CODE (SET_SRC (curr_set)) == LO_SUM\n+               && REG_P (SET_DEST (curr_set))\n+               && REG_P (SET_DEST (prev_set))\n+               && GET_CODE (SET_SRC (prev_set)) == HIGH\n+               && REGNO (SET_DEST (curr_set)) == REGNO (SET_DEST (prev_set)))\n+             return true;\n+    }\n+  return false;\n+}\n+\n /* Implement the TARGET_ASAN_SHADOW_OFFSET hook.  */\n \n static unsigned HOST_WIDE_INT"}]}