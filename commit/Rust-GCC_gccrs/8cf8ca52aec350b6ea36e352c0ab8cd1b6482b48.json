{"sha": "8cf8ca52aec350b6ea36e352c0ab8cd1b6482b48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGNmOGNhNTJhZWMzNTBiNmVhMzZlMzUyYzBhYjhjZDFiNjQ4MmI0OA==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2010-11-03T17:49:05Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2010-11-03T17:49:05Z"}, "message": "dump-parse-tree.c (code_indent): Take label into acount when calculating indent.\n\n2010-11-03  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\t    Paul Thomas  <pault@gcc.gnu.org>\n\n\t* dump-parse-tree.c (code_indent):  Take label into acount\n\twhen calculating indent.\n\t(show_typespec):  Also display class.\n\t(show_attr):  Add module name to argument.\n\tDon't show UNKNOWN for flavor, access and save. Don't show\n\tSAVE_NONE.  Don't show INTENT_UNKNOWN.  Show module for use\n\tassociation.  Show intent only for dummy arguments.\n\tSet length of shown symbol names to minimum of 12.\n\tShow attributes header.\n\t(show_symbol):  Adjust show_level.\n\t(show_symtree):  Clear up display for ambiguous.  Show if symbol\n\twas imported from namespace.\n\t(show_code_node):  Clear up indenting.  Traverse symtree and\n\tshow code directly instead of calling show_namespace.\n\n\nCo-Authored-By: Paul Thomas <pault@gcc.gnu.org>\n\nFrom-SVN: r166262", "tree": {"sha": "ffeab4b668e6ce669c84252ea8e779e975c407aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ffeab4b668e6ce669c84252ea8e779e975c407aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8cf8ca52aec350b6ea36e352c0ab8cd1b6482b48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cf8ca52aec350b6ea36e352c0ab8cd1b6482b48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cf8ca52aec350b6ea36e352c0ab8cd1b6482b48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cf8ca52aec350b6ea36e352c0ab8cd1b6482b48/comments", "author": null, "committer": null, "parents": [{"sha": "dd60dacdc52499c73ee329d86e1918ccd35fd9e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd60dacdc52499c73ee329d86e1918ccd35fd9e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd60dacdc52499c73ee329d86e1918ccd35fd9e3"}], "stats": {"total": 150, "additions": 105, "deletions": 45}, "files": [{"sha": "42e226dc24581e7db1da2e7e811d43c0db8cce4b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cf8ca52aec350b6ea36e352c0ab8cd1b6482b48/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cf8ca52aec350b6ea36e352c0ab8cd1b6482b48/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=8cf8ca52aec350b6ea36e352c0ab8cd1b6482b48", "patch": "@@ -1,3 +1,21 @@\n+2010-11-03  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\t    Paul Thomas  <pault@gcc.gnu.org>\n+\n+\t* dump-parse-tree.c (code_indent):  Take label into acount\n+\twhen calculating indent.\n+\t(show_typespec):  Also display class.\n+\t(show_attr):  Add module name to argument.\n+\tDon't show UNKNOWN for flavor, access and save. Don't show\n+\tSAVE_NONE.  Don't show INTENT_UNKNOWN.  Show module for use\n+\tassociation.  Show intent only for dummy arguments.\n+\tSet length of shown symbol names to minimum of 12.\n+\tShow attributes header.\n+\t(show_symbol):  Adjust show_level.\n+\t(show_symtree):  Clear up display for ambiguous.  Show if symbol\n+\twas imported from namespace.\n+\t(show_code_node):  Clear up indenting.  Traverse symtree and\n+\tshow code directly instead of calling show_namespace.\n+\n 2010-11-02  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* trans-decl.c (add_argument_checking): Use build_zero_cst instead of"}, {"sha": "41af932565d77aea93fee7133ac53061e1304c38", "filename": "gcc/fortran/dump-parse-tree.c", "status": "modified", "additions": 87, "deletions": 45, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cf8ca52aec350b6ea36e352c0ab8cd1b6482b48/gcc%2Ffortran%2Fdump-parse-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cf8ca52aec350b6ea36e352c0ab8cd1b6482b48/gcc%2Ffortran%2Fdump-parse-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdump-parse-tree.c?ref=8cf8ca52aec350b6ea36e352c0ab8cd1b6482b48", "patch": "@@ -72,10 +72,8 @@ code_indent (int level, gfc_st_label *label)\n \n   if (label != NULL)\n     fprintf (dumpfile, \"%-5d \", label->value);\n-  else\n-    fputs (\"      \", dumpfile);\n \n-  for (i = 0; i < 2 * level; i++)\n+  for (i = 0; i < (2 * level - (label ? 6 : 0)); i++)\n     fputc (' ', dumpfile);\n }\n \n@@ -101,6 +99,7 @@ show_typespec (gfc_typespec *ts)\n   switch (ts->type)\n     {\n     case BT_DERIVED:\n+    case BT_CLASS:\n       fprintf (dumpfile, \"%s\", ts->u.derived->name);\n       break;\n \n@@ -594,15 +593,16 @@ show_expr (gfc_expr *p)\n    whatever single bit attributes are present.  */\n \n static void\n-show_attr (symbol_attribute *attr)\n+show_attr (symbol_attribute *attr, const char * module)\n {\n-\n-  fprintf (dumpfile, \"(%s %s %s %s %s\",\n-\t   gfc_code2string (flavors, attr->flavor),\n-\t   gfc_intent_string (attr->intent),\n-\t   gfc_code2string (access_types, attr->access),\n-\t   gfc_code2string (procedures, attr->proc),\n-\t   gfc_code2string (save_status, attr->save));\n+  if (attr->flavor != FL_UNKNOWN)\n+    fprintf (dumpfile, \"(%s \", gfc_code2string (flavors, attr->flavor));\n+  if (attr->access != ACCESS_UNKNOWN)\n+    fprintf (dumpfile, \"%s \", gfc_code2string (access_types, attr->access));\n+  if (attr->proc != PROC_UNKNOWN)\n+    fprintf (dumpfile, \"%s \", gfc_code2string (procedures, attr->proc));\n+  if (attr->save != SAVE_NONE)\n+    fprintf (dumpfile, \"%s\", gfc_code2string (save_status, attr->save));\n \n   if (attr->allocatable)\n     fputs (\" ALLOCATABLE\", dumpfile);\n@@ -633,7 +633,12 @@ show_attr (symbol_attribute *attr)\n   if (attr->target)\n     fputs (\" TARGET\", dumpfile);\n   if (attr->dummy)\n-    fputs (\" DUMMY\", dumpfile);\n+    {\n+      fputs (\" DUMMY\", dumpfile);\n+      if (attr->intent != INTENT_UNKNOWN)\n+\tfprintf (dumpfile, \"(%s)\", gfc_intent_string (attr->intent));\n+    }\n+\n   if (attr->result)\n     fputs (\" RESULT\", dumpfile);\n   if (attr->entry)\n@@ -644,7 +649,12 @@ show_attr (symbol_attribute *attr)\n   if (attr->data)\n     fputs (\" DATA\", dumpfile);\n   if (attr->use_assoc)\n-    fputs (\" USE-ASSOC\", dumpfile);\n+    {\n+      fputs (\" USE-ASSOC\", dumpfile);\n+      if (module != NULL)\n+\tfprintf (dumpfile, \"(%s)\", module);\n+    }\n+\n   if (attr->in_namelist)\n     fputs (\" IN-NAMELIST\", dumpfile);\n   if (attr->in_common)\n@@ -802,24 +812,25 @@ show_symbol (gfc_symbol *sym)\n {\n   gfc_formal_arglist *formal;\n   gfc_interface *intr;\n+  int i,len;\n \n   if (sym == NULL)\n     return;\n \n-  show_indent ();\n+  fprintf (dumpfile, \"|| symbol: '%s' \", sym->name);\n+  len = strlen (sym->name);\n+  for (i=len; i<12; i++)\n+    fputc(' ', dumpfile);\n \n-  fprintf (dumpfile, \"symbol %s \", sym->name);\n-  show_typespec (&sym->ts);\n+  ++show_level;\n \n-  /* If this symbol is an associate-name, show its target expression.  */\n-  if (sym->assoc)\n-    {\n-      fputs (\" => \", dumpfile);\n-      show_expr (sym->assoc->target);\n-      fputs (\" \", dumpfile);\n-    }\n+  show_indent ();\n+  fputs (\"type spec : \", dumpfile);\n+  show_typespec (&sym->ts);\n \n-  show_attr (&sym->attr);\n+  show_indent ();\n+  fputs (\"attributes: \", dumpfile);\n+  show_attr (&sym->attr, sym->module);\n \n   if (sym->value)\n     {\n@@ -884,8 +895,7 @@ show_symbol (gfc_symbol *sym)\n       fputs (\"Formal namespace\", dumpfile);\n       show_namespace (sym->formal_ns);\n     }\n-\n-  fputc ('\\n', dumpfile);\n+  --show_level;\n }\n \n \n@@ -956,11 +966,22 @@ show_common (gfc_symtree *st)\n static void\n show_symtree (gfc_symtree *st)\n {\n+  int len, i;\n+\n   show_indent ();\n-  fprintf (dumpfile, \"symtree: %s  Ambig %d\", st->name, st->ambiguous);\n+\n+  len = strlen(st->name);\n+  fprintf (dumpfile, \"symtree: '%s'\", st->name);\n+\n+  for (i=len; i<12; i++)\n+    fputc(' ', dumpfile);\n+\n+  if (st->ambiguous)\n+    fputs( \" Ambiguous\", dumpfile);\n \n   if (st->n.sym->ns != gfc_current_ns)\n-    fprintf (dumpfile, \" from namespace %s\", st->n.sym->ns->proc_name->name);\n+    fprintf (dumpfile, \"|| symbol: '%s' from namespace '%s'\", st->n.sym->name,\n+\t     st->n.sym->ns->proc_name->name);\n   else\n     show_symbol (st->n.sym);\n }\n@@ -1202,7 +1223,13 @@ show_code_node (int level, gfc_code *c)\n   gfc_dt *dt;\n   gfc_namespace *ns;\n \n-  code_indent (level, c->here);\n+  if (c->here)\n+    {\n+      fputc ('\\n', dumpfile);\n+      code_indent (level, c->here);\n+    }\n+  else\n+    show_indent ();\n \n   switch (c->op)\n     {\n@@ -1375,27 +1402,33 @@ show_code_node (int level, gfc_code *c)\n       d = c->block;\n       fputs (\"IF \", dumpfile);\n       show_expr (d->expr1);\n-      fputc ('\\n', dumpfile);\n+\n+      ++show_level;\n       show_code (level + 1, d->next);\n+      --show_level;\n \n       d = d->block;\n       for (; d; d = d->block)\n \t{\n \t  code_indent (level, 0);\n \n \t  if (d->expr1 == NULL)\n-\t    fputs (\"ELSE\\n\", dumpfile);\n+\t    fputs (\"ELSE\", dumpfile);\n \t  else\n \t    {\n \t      fputs (\"ELSE IF \", dumpfile);\n \t      show_expr (d->expr1);\n-\t      fputc ('\\n', dumpfile);\n \t    }\n \n+\t  ++show_level;\n \t  show_code (level + 1, d->next);\n+\t  --show_level;\n \t}\n \n-      code_indent (level, c->label1);\n+      if (c->label1)\n+\tcode_indent (level, c->label1);\n+      else\n+\tshow_indent ();\n \n       fputs (\"ENDIF\", dumpfile);\n       break;\n@@ -1409,8 +1442,11 @@ show_code_node (int level, gfc_code *c)\n \t  blocktype = \"BLOCK\";\n \tshow_indent ();\n \tfprintf (dumpfile, \"%s \", blocktype);\n+\t++show_level;\n \tns = c->ext.block.ns;\n-\tshow_namespace (ns);\n+\tgfc_traverse_symtree (ns->sym_root, show_symtree);\n+\tshow_code (show_level, ns->code);\n+\t--show_level;\n \tshow_indent ();\n \tfprintf (dumpfile, \"END %s \", blocktype);\n \tbreak;\n@@ -1506,6 +1542,8 @@ show_code_node (int level, gfc_code *c)\n \n     case EXEC_DO:\n       fputs (\"DO \", dumpfile);\n+      if (c->label1)\n+\tfprintf (dumpfile, \" %-5d \", c->label1->value);\n \n       show_expr (c->ext.iterator->var);\n       fputc ('=', dumpfile);\n@@ -1514,11 +1552,15 @@ show_code_node (int level, gfc_code *c)\n       show_expr (c->ext.iterator->end);\n       fputc (' ', dumpfile);\n       show_expr (c->ext.iterator->step);\n-      fputc ('\\n', dumpfile);\n \n+      ++show_level;\n       show_code (level + 1, c->block->next);\n+      --show_level;\n \n-      code_indent (level, 0);\n+      if (c->label1)\n+\tbreak;\n+\n+      show_indent ();\n       fputs (\"END DO\", dumpfile);\n       break;\n \n@@ -2043,7 +2085,6 @@ show_code_node (int level, gfc_code *c)\n \t}\n \n     show_dt_code:\n-      fputc ('\\n', dumpfile);\n       for (c = c->block->next; c; c = c->next)\n \tshow_code_node (level + (c->next != NULL), c);\n       return;\n@@ -2087,8 +2128,6 @@ show_code_node (int level, gfc_code *c)\n     default:\n       gfc_internal_error (\"show_code_node(): Bad statement code\");\n     }\n-\n-  fputc ('\\n', dumpfile);\n }\n \n \n@@ -2121,7 +2160,6 @@ show_namespace (gfc_namespace *ns)\n   int i;\n \n   save = gfc_current_ns;\n-  show_level++;\n \n   show_indent ();\n   fputs (\"Namespace:\", dumpfile);\n@@ -2152,6 +2190,7 @@ show_namespace (gfc_namespace *ns)\n \t  fprintf (dumpfile, \"procedure name = %s\", ns->proc_name->name);\n \t}\n \n+      ++show_level;\n       gfc_current_ns = ns;\n       gfc_traverse_symtree (ns->common_root, show_common);\n \n@@ -2179,23 +2218,26 @@ show_namespace (gfc_namespace *ns)\n \t  gfc_traverse_user_op (ns, show_uop);\n \t}\n     }\n+  else\n+    ++show_level;\n   \n   for (eq = ns->equiv; eq; eq = eq->next)\n     show_equiv (eq);\n \n   fputc ('\\n', dumpfile);\n-  fputc ('\\n', dumpfile);\n-\n+  show_indent ();\n+  fputs (\"code:\", dumpfile);\n   show_code (show_level, ns->code);\n+  --show_level;\n \n   for (ns = ns->contained; ns; ns = ns->sibling)\n     {\n-      show_indent ();\n-      fputs (\"CONTAINS\\n\", dumpfile);\n+      fputs (\"\\nCONTAINS\\n\", dumpfile);\n+      ++show_level;\n       show_namespace (ns);\n+      --show_level;\n     }\n \n-  show_level--;\n   fputc ('\\n', dumpfile);\n   gfc_current_ns = save;\n }"}]}