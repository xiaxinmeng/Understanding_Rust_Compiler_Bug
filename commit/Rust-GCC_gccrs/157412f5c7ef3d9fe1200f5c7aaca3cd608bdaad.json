{"sha": "157412f5c7ef3d9fe1200f5c7aaca3cd608bdaad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTU3NDEyZjVjN2VmM2Q5ZmUxMjAwZjVjN2FhY2EzY2Q2MDhiZGFhZA==", "commit": {"author": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1998-12-07T15:43:14Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1998-12-07T15:43:14Z"}, "message": "constants.c (find_methodref_index): When the class is an interface...\n\nT\n\t* constants.c (find_methodref_index):  When the class is an interface,\n\tgenerate CONSTANT_InterfaceMethodref instead of a CONSTANT_MethodRef.\n\t* decl.c (finit_identifier_node):  Use \"$finit$\", rather than\n\t\"<finit>\" (which Sun's verifier rejects).\n\t* parse.y (maybe_generate_finit):  Leave out meaningless final flag.\n\t(generate_field_initialization_code):  Removed.\n\t(fix_constructors)  Don't add call to $finit$ here (wrong order).\n\t(patch_method_invocation):  Add $finit$ call here.\n\t* java-tree.h (CALL_USING_SUPER):  New macro.\n\t* parse.y (patch_invoke):  Remove im local variable.\n \t(patch_method_invocation, patch_invoke):  Don't pass super parameter.\n\t(patch_invoke):  Use CALL_USING_SUPER instead of from_super parameter.\n\t(resolve_qualified_expression_name):  Maybe set CALL_USING_SUPER.\n\t* jcf-write.c (get_access_flags):  Fix typo ACC_PUBLIC -> ACC_FINAL.\n\t* parse.y (java_complete_tree):  Don't complain about unreachable\n\tstatement if it is empty_stmt_node.\n\t* jcf-write.c (find_constant_wide):  New function.\n\t(push_long_const):  Use find_constant_wide.\n\t* jcf-write.c (generate_bytecode_insn):  Fix bug in switch handling.\n\t(generate_bytecode_insn):  Use correct dup variant for MODIFY_EXPR.\n\tAdd \"redundant\" NOTE_PUSH/NOTE_POP uses so code_SP_max gets set.\n\tEmit invokeinterface when calling an interface method.\n\tEmit invokespecial also when calling super or private methods.\n\t* jcf-write.c (generate_classfile):  Emit ConstantValue attributes.\n\nFrom-SVN: r24161", "tree": {"sha": "1018a5450e22da02909a5a481e080f48e1720221", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1018a5450e22da02909a5a481e080f48e1720221"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/157412f5c7ef3d9fe1200f5c7aaca3cd608bdaad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/157412f5c7ef3d9fe1200f5c7aaca3cd608bdaad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/157412f5c7ef3d9fe1200f5c7aaca3cd608bdaad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/157412f5c7ef3d9fe1200f5c7aaca3cd608bdaad/comments", "author": null, "committer": null, "parents": [{"sha": "72a0aac6d24eb609d28b9c034c98ae29257db4a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72a0aac6d24eb609d28b9c034c98ae29257db4a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72a0aac6d24eb609d28b9c034c98ae29257db4a6"}], "stats": {"total": 10, "additions": 7, "deletions": 3}, "files": [{"sha": "1cfaf128827e666711a42980f406ff1892b5afed", "filename": "gcc/java/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/157412f5c7ef3d9fe1200f5c7aaca3cd608bdaad/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/157412f5c7ef3d9fe1200f5c7aaca3cd608bdaad/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=157412f5c7ef3d9fe1200f5c7aaca3cd608bdaad", "patch": "@@ -543,7 +543,7 @@ init_decl_processing ()\n   TYPE_identifier_node = get_identifier (\"TYPE\");\n   init_identifier_node = get_identifier (\"<init>\");\n   clinit_identifier_node = get_identifier (\"<clinit>\");\n-  finit_identifier_node = get_identifier (\"<finit>\");\n+  finit_identifier_node = get_identifier (\"$finit$\");\n   void_signature_node = get_identifier (\"()V\");\n   length_identifier_node = get_identifier (\"length\");\n   this_identifier_node = get_identifier (\"this\");"}, {"sha": "1214b86e02894f4deef5b1ea841b0a77da3c7161", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/157412f5c7ef3d9fe1200f5c7aaca3cd608bdaad/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/157412f5c7ef3d9fe1200f5c7aaca3cd608bdaad/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=157412f5c7ef3d9fe1200f5c7aaca3cd608bdaad", "patch": "@@ -52,6 +52,7 @@ struct JCF;\n       SWITCH_HAS_DEFAULT (in SWITCH_EXPR)\n    4: IS_A_COMMAND_LINE_FILENAME_P (in IDENTIFIER_NODE)\n       RESOLVE_TYPE_NAME_P (in EXPR_WITH_FILE_LOCATION)\n+      CALL_USING_SUPER (in CALL_EXPR)\n    5: HAS_BEEN_ALREADY_PARSED_P (in IDENTIFIER_NODE)\n       IS_BREAK_STMT_P (in EXPR_WITH_FILE_LOCATION)\n       IS_CRAFTED_STRING_BUFFER_P (in CALL_EXPR)\n@@ -211,7 +212,7 @@ extern tree string_array_type_node;\n extern tree TYPE_identifier_node;      /* \"TYPE\" */\n extern tree init_identifier_node;      /* \"<init>\" */\n extern tree clinit_identifier_node;      /* \"<clinit>\" */\n-extern tree finit_identifier_node;      /* \"<finit>\" */\n+extern tree finit_identifier_node;      /* \"$finit$\" */\n extern tree void_signature_node;       /* \"()V\" */\n extern tree length_identifier_node;  /* \"length\" */\n extern tree this_identifier_node;  /* \"this\" */\n@@ -707,7 +708,7 @@ extern tree *type_map;\n #define CLASS_FROM_CURRENTLY_COMPILED_SOURCE_P(TYPE) \\\n   TYPE_LANG_FLAG_5 (TYPE)\n \n-/* True if class TYPE has a field initializer <finit> function */\n+/* True if class TYPE has a field initializer $finit$ function */\n #define CLASS_HAS_FINIT_P(TYPE) TYPE_LANG_FLAG_6 (TYPE)\n \n /* True if identifier ID was seen while processing a single type import stmt */\n@@ -760,6 +761,9 @@ extern tree *type_map;\n /* True if EXPR (a CALL_EXPR in that case) is a crafted StringBuffer */\n #define IS_CRAFTED_STRING_BUFFER_P(EXPR) TREE_LANG_FLAG_5 (EXPR)\n \n+/* If set in CALL_EXPR, the receiver is 'super'. */\n+#define CALL_USING_SUPER(EXPR) TREE_LANG_FLAG_4 (EXPR)\n+\n /* True if NODE (a statement) can complete normally. */\n #define CAN_COMPLETE_NORMALLY(NODE) TREE_LANG_FLAG_6(NODE)\n "}]}