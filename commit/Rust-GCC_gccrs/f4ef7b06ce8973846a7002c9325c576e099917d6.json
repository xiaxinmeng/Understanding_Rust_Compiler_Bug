{"sha": "f4ef7b06ce8973846a7002c9325c576e099917d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjRlZjdiMDZjZTg5NzM4NDZhNzAwMmM5MzI1YzU3NmUwOTk5MTdkNg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-01-20T10:36:01Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-01-20T10:36:01Z"}, "message": "[multiple changes]\n\n2017-01-20  Yannick Moy  <moy@adacore.com>\n\n\t* inline.adb (Expand_Inlined_Call): Keep more\n\tprecise type of actual for inlining whenever possible. In\n\tparticular, do not switch to the formal type in GNATprove mode in\n\tsome case where the GNAT backend might require it for visibility.\n\n2017-01-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch3.adb (Check_Non_Overridable_Aspects): An inherited\n\taspect Implicit_Dereference can be inherited by a full view if\n\tthe partial view has no discriminants, because there is no way\n\tto apply the aspect to the partial view.\n\t(Build_Derived_Record_Type): If derived type renames discriminants\n\tof the parent, the new discriminant inherits the aspect from\n\tthe old one.\n\t* sem_ch4.adb (Analyze_Call): Handle properly a parameterless\n\tcall through an access discriminant designating a subprogram.\n\t* sem_ch5.adb (Analyze_Assignment): (Analyze_Call): Handle\n\tproperly a parameterless call through an access discriminant on\n\tthe left-hand side of an assignment.\n\t* sem_res.adb (resolve): If an interpreation involves a\n\tdiscriminant with an implicit dereference and the expression is an\n\tentity, resolution takes place later in the appropriate routine.\n\t* sem_ch13.adb (Analyze_Aspect_Implicit_Dereference): Recognize\n\taccess discriminants that designate a subprogram type.\n\n2017-01-20  Pascal Obry  <obry@adacore.com>\n\n\t* a-locale.adb, a-locale.ads: Update Ada.Locales for RM 2012 COR:1:2016\n\nFrom-SVN: r244698", "tree": {"sha": "de0d3712f5e7b370de37a74832eae8ddd864b39f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de0d3712f5e7b370de37a74832eae8ddd864b39f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4ef7b06ce8973846a7002c9325c576e099917d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4ef7b06ce8973846a7002c9325c576e099917d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4ef7b06ce8973846a7002c9325c576e099917d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4ef7b06ce8973846a7002c9325c576e099917d6/comments", "author": null, "committer": null, "parents": [{"sha": "8f1fe1f8cee02a23f50c17550032120a157d974b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f1fe1f8cee02a23f50c17550032120a157d974b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f1fe1f8cee02a23f50c17550032120a157d974b"}], "stats": {"total": 141, "additions": 115, "deletions": 26}, "files": [{"sha": "252efc5079ee39d8b97971db02efd330aea56b90", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ef7b06ce8973846a7002c9325c576e099917d6/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ef7b06ce8973846a7002c9325c576e099917d6/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f4ef7b06ce8973846a7002c9325c576e099917d6", "patch": "@@ -1,3 +1,34 @@\n+2017-01-20  Yannick Moy  <moy@adacore.com>\n+\n+\t* inline.adb (Expand_Inlined_Call): Keep more\n+\tprecise type of actual for inlining whenever possible. In\n+\tparticular, do not switch to the formal type in GNATprove mode in\n+\tsome case where the GNAT backend might require it for visibility.\n+\n+2017-01-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb (Check_Non_Overridable_Aspects): An inherited\n+\taspect Implicit_Dereference can be inherited by a full view if\n+\tthe partial view has no discriminants, because there is no way\n+\tto apply the aspect to the partial view.\n+\t(Build_Derived_Record_Type): If derived type renames discriminants\n+\tof the parent, the new discriminant inherits the aspect from\n+\tthe old one.\n+\t* sem_ch4.adb (Analyze_Call): Handle properly a parameterless\n+\tcall through an access discriminant designating a subprogram.\n+\t* sem_ch5.adb (Analyze_Assignment): (Analyze_Call): Handle\n+\tproperly a parameterless call through an access discriminant on\n+\tthe left-hand side of an assignment.\n+\t* sem_res.adb (resolve): If an interpreation involves a\n+\tdiscriminant with an implicit dereference and the expression is an\n+\tentity, resolution takes place later in the appropriate routine.\n+\t* sem_ch13.adb (Analyze_Aspect_Implicit_Dereference): Recognize\n+\taccess discriminants that designate a subprogram type.\n+\n+2017-01-20  Pascal Obry  <obry@adacore.com>\n+\n+\t* a-locale.adb, a-locale.ads: Update Ada.Locales for RM 2012 COR:1:2016\n+\n 2017-01-20  Yannick Moy  <moy@adacore.com>\n \n \t* sem_ch10.adb (Check_No_Elab_Code_All): Do not issue an error"}, {"sha": "60ad079d43a739bad60c1650caf03490dc49a667", "filename": "gcc/ada/a-locale.adb", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ef7b06ce8973846a7002c9325c576e099917d6/gcc%2Fada%2Fa-locale.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ef7b06ce8973846a7002c9325c576e099917d6/gcc%2Fada%2Fa-locale.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-locale.adb?ref=f4ef7b06ce8973846a7002c9325c576e099917d6", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---            Copyright (C) 2010, Free Software Foundation, Inc.            --\n+--          Copyright (C) 2010-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,8 +33,7 @@ with System; use System;\n \n package body Ada.Locales is\n \n-   type Lower_4 is array (1 .. 4) of Character range 'a' .. 'z';\n-   type Upper_4 is array (1 .. 4) of Character range 'A' .. 'Z';\n+   type Str_4 is new String (1 .. 4);\n \n    --------------\n    -- Language --\n@@ -43,7 +42,7 @@ package body Ada.Locales is\n    function Language return Language_Code is\n       procedure C_Get_Language_Code (P : Address);\n       pragma Import (C, C_Get_Language_Code);\n-      F : Lower_4;\n+      F : Str_4;\n    begin\n       C_Get_Language_Code (F'Address);\n       return Language_Code (F (1 .. 3));\n@@ -56,7 +55,7 @@ package body Ada.Locales is\n    function Country return Country_Code is\n       procedure C_Get_Country_Code (P : Address);\n       pragma Import (C, C_Get_Country_Code);\n-      F : Upper_4;\n+      F : Str_4;\n    begin\n       C_Get_Country_Code (F'Address);\n       return Country_Code (F (1 .. 2));"}, {"sha": "132c8832b7bfd7c0efcbec5c519b43980613c108", "filename": "gcc/ada/a-locale.ads", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ef7b06ce8973846a7002c9325c576e099917d6/gcc%2Fada%2Fa-locale.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ef7b06ce8973846a7002c9325c576e099917d6/gcc%2Fada%2Fa-locale.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-locale.ads?ref=f4ef7b06ce8973846a7002c9325c576e099917d6", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---            Copyright (C) 2010, Free Software Foundation, Inc.            --\n+--          Copyright (C) 2010-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT.  In accordance with the copyright of that document, you can freely --\n@@ -19,8 +19,13 @@ package Ada.Locales is\n    pragma Preelaborate (Locales);\n    pragma Remote_Types (Locales);\n \n-   type Language_Code is array (1 .. 3) of Character range 'a' .. 'z';\n-   type Country_Code  is array (1 .. 2) of Character range 'A' .. 'Z';\n+   type Language_Code is new String (1 .. 3)\n+      with Dynamic_Predicate =>\n+         (for all E of Language_Code => E in 'a' .. 'z');\n+\n+   type Country_Code is new String (1 .. 2)\n+      with Dynamic_Predicate =>\n+         (for all E of Country_Code => E in 'A' .. 'Z');\n \n    Language_Unknown : constant Language_Code := \"und\";\n    Country_Unknown  : constant Country_Code := \"ZZ\";"}, {"sha": "f1afe320a3d65210ef17e29145de63d8d51ab146", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ef7b06ce8973846a7002c9325c576e099917d6/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ef7b06ce8973846a7002c9325c576e099917d6/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=f4ef7b06ce8973846a7002c9325c576e099917d6", "patch": "@@ -3087,8 +3087,10 @@ package body Inline is\n \n          elsif Base_Type (Etype (F)) = Base_Type (Etype (A))\n            and then Etype (F) /= Base_Type (Etype (F))\n+           and then Is_Constrained (Etype (F))\n          then\n             Temp_Typ := Etype (F);\n+\n          else\n             Temp_Typ := Etype (A);\n          end if;\n@@ -3150,7 +3152,15 @@ package body Inline is\n                    Subtype_Mark => New_Occurrence_Of (Etype (F), Loc),\n                    Expression   => Relocate_Node (Expression (A)));\n \n-            elsif Etype (F) /= Etype (A) then\n+            --  In GNATprove mode, keep the most precise type of the actual\n+            --  for the temporary variable. Otherwise, the AST may contain\n+            --  unexpected assignment statements to a temporary variable of\n+            --  unconstrained type renaming a local variable of constrained\n+            --  type, which is not expected by GNATprove.\n+\n+            elsif Etype (F) /= Etype (A)\n+              and then not GNATprove_Mode\n+            then\n                New_A := Unchecked_Convert_To (Etype (F), Relocate_Node (A));\n                Temp_Typ := Etype (F);\n "}, {"sha": "8f1ce7dba1268c0f5e977e5cfe8732774477a833", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ef7b06ce8973846a7002c9325c576e099917d6/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ef7b06ce8973846a7002c9325c576e099917d6/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=f4ef7b06ce8973846a7002c9325c576e099917d6", "patch": "@@ -1808,11 +1808,17 @@ package body Sem_Ch13 is\n                     (\"aspect must name a discriminant of current type\", Expr);\n \n                else\n+\n+                  --  Discriminant type be an anonymous access type or an\n+                  --  anonymous access to subprogram.\n+                  --  Missing synchronized types???\n+\n                   Disc := First_Discriminant (E);\n                   while Present (Disc) loop\n                      if Chars (Expr) = Chars (Disc)\n-                       and then Ekind (Etype (Disc)) =\n-                                  E_Anonymous_Access_Type\n+                       and then Ekind_In (Etype (Disc),\n+                                  E_Anonymous_Access_Type,\n+                                  E_Anonymous_Access_Subprogram_Type)\n                      then\n                         Set_Has_Implicit_Dereference (E);\n                         Set_Has_Implicit_Dereference (Disc);\n@@ -8684,7 +8690,7 @@ package body Sem_Ch13 is\n                         Expression => Expr))));\n \n             --  If declaration has not been analyzed yet, Insert declaration\n-            --  before freeze node.  Insert body itself after freeze node.\n+            --  before freeze node. Insert body itself after freeze node.\n \n             if not Analyzed (FDecl) then\n                Insert_Before_And_Analyze (N, FDecl);"}, {"sha": "93b80a833b286e244e567be7bb2d6ee951f05206", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ef7b06ce8973846a7002c9325c576e099917d6/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ef7b06ce8973846a7002c9325c576e099917d6/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=f4ef7b06ce8973846a7002c9325c576e099917d6", "patch": "@@ -2836,6 +2836,8 @@ package body Sem_Ch3 is\n          then\n             if\n               not Has_Aspect_Spec (Prev_Aspects, Name_Implicit_Dereference)\n+                and then Present\n+                  (Discriminant_Specifications (Original_Node (Parent (Prev))))\n             then\n                Error_Msg_N\n                  (\"type does not inherit implicit dereference\", Prev);\n@@ -8973,6 +8975,9 @@ package body Sem_Ch3 is\n \n       --  STEP 5a: Copy the parent record declaration for untagged types\n \n+      Set_Has_Implicit_Dereference\n+        (Derived_Type, Has_Implicit_Dereference (Parent_Type));\n+\n       if not Is_Tagged then\n \n          --  Discriminant_Constraint (Derived_Type) has been properly\n@@ -9015,8 +9020,6 @@ package body Sem_Ch3 is\n             Set_Stored_Constraint\n               (Derived_Type, Expand_To_Stored_Constraint (Parent_Type, Discs));\n             Replace_Components (Derived_Type, New_Decl);\n-            Set_Has_Implicit_Dereference\n-              (Derived_Type, Has_Implicit_Dereference (Parent_Type));\n          end if;\n \n          --  Insert the new derived type declaration\n@@ -9635,12 +9638,19 @@ package body Sem_Ch3 is\n             --  If any of the discriminant constraints is given by a\n             --  discriminant and we are in a derived type declaration we\n             --  have a discriminant renaming. Establish link between new\n-            --  and old discriminant.\n+            --  and old discriminant. The new discriminant has an implicit\n+            --  dereference if the old one does.\n \n             if Denotes_Discriminant (Discr_Expr (J)) then\n                if Derived_Def then\n-                  Set_Corresponding_Discriminant\n-                    (Entity (Discr_Expr (J)), Discr);\n+                  declare\n+                     New_Discr : constant Entity_Id := Entity (Discr_Expr (J));\n+\n+                  begin\n+                     Set_Corresponding_Discriminant (New_Discr, Discr);\n+                     Set_Has_Implicit_Dereference (New_Discr,\n+                       Has_Implicit_Dereference (Discr));\n+                  end;\n                end if;\n \n             --  Force the evaluation of non-discriminant expressions."}, {"sha": "8ae620cd144a28c1b2e62a6e519667825d788c14", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ef7b06ce8973846a7002c9325c576e099917d6/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ef7b06ce8973846a7002c9325c576e099917d6/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=f4ef7b06ce8973846a7002c9325c576e099917d6", "patch": "@@ -913,6 +913,7 @@ package body Sem_Ch4 is\n    --  the type-checking is similar to that of other calls.\n \n    procedure Analyze_Call (N : Node_Id) is\n+      Loc     : constant Source_Ptr := Sloc (N);\n       Actuals : constant List_Id := Parameter_Associations (N);\n       Nam     : Node_Id;\n       X       : Interp_Index;\n@@ -1310,17 +1311,32 @@ package body Sem_Ch4 is\n \n             --  If the interpretation succeeds, mark the proper type of the\n             --  prefix (any valid candidate will do). If not, remove the\n-            --  candidate interpretation. This only needs to be done for\n-            --  overloaded protected operations, for other entities disambi-\n-            --  guation is done directly in Resolve.\n+            --  candidate interpretation. If this is a parameterless call\n+            --  on an anonymous access to subprogram, X is a variable with\n+            --  an access discriminant D, the entity in the interpretation is\n+            --  D, so rewrite X as X.D.all.\n \n             if Success then\n                if Deref\n                  and then Nkind (Parent (N)) /= N_Explicit_Dereference\n                then\n-                  Set_Entity (Nam, It.Nam);\n-                  Insert_Explicit_Dereference (Nam);\n-                  Set_Etype (Nam, Nam_Ent);\n+                  if Ekind (It.Nam) = E_Discriminant\n+                    and then Has_Implicit_Dereference (It.Nam)\n+                  then\n+                     Rewrite (Name (N),\n+                       Make_Explicit_Dereference (Loc,\n+                         Prefix => Make_Selected_Component (Loc,\n+                           Prefix        =>\n+                             (New_Occurrence_Of (Entity (Nam), Loc)),\n+                           Selector_Name => New_Occurrence_Of (It.Nam, Loc))));\n+                     Analyze (N);\n+                     return;\n+\n+                  else\n+                     Set_Entity (Nam, It.Nam);\n+                     Insert_Explicit_Dereference (Nam);\n+                     Set_Etype (Nam, Nam_Ent);\n+                  end if;\n \n                else\n                   Set_Etype (Nam, It.Typ);\n@@ -7981,10 +7997,12 @@ package body Sem_Ch4 is\n \n       if not Is_Overloaded (Func_Name) then\n          Func := Entity (Func_Name);\n+\n          Indexing :=\n            Make_Function_Call (Loc,\n              Name                   => New_Occurrence_Of (Func, Loc),\n              Parameter_Associations => Assoc);\n+\n          Set_Parent (Indexing, Parent (N));\n          Set_Generalized_Indexing (N, Indexing);\n          Analyze (Indexing);\n@@ -8009,7 +8027,6 @@ package body Sem_Ch4 is\n              Name                   =>\n                Make_Identifier (Loc, Chars (Func_Name)),\n              Parameter_Associations => Assoc);\n-\n          Set_Parent (Indexing, Parent (N));\n          Set_Generalized_Indexing (N, Indexing);\n          Set_Etype (N, Any_Type);\n@@ -8024,7 +8041,7 @@ package body Sem_Ch4 is\n             Get_First_Interp (Func_Name, I, It);\n             Set_Etype (Indexing, Any_Type);\n \n-            --  Analyze eacn candidae function with the given actuals\n+            --  Analyze each candidate function with the given actuals\n \n             while Present (It.Nam) loop\n                Analyze_One_Call (Indexing, It.Nam, False, Success);"}, {"sha": "6962262df18c3ffba6719f3fc1b76f2277994a56", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ef7b06ce8973846a7002c9325c576e099917d6/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ef7b06ce8973846a7002c9325c576e099917d6/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=f4ef7b06ce8973846a7002c9325c576e099917d6", "patch": "@@ -330,6 +330,14 @@ package body Sem_Ch5 is\n                then\n                   null;\n \n+               --  This may be a call to a parameterless function through an\n+               --  implicit dereference, so discard interpretation as well.\n+\n+               elsif Is_Entity_Name (Lhs)\n+                 and then Has_Implicit_Dereference (It.Typ)\n+               then\n+                  null;\n+\n                elsif Has_Compatible_Type (Rhs, It.Typ) then\n                   if T1 /= Any_Type then\n "}, {"sha": "062a8392f9af44abf85e2a4546637c2a7020e70a", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ef7b06ce8973846a7002c9325c576e099917d6/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ef7b06ce8973846a7002c9325c576e099917d6/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=f4ef7b06ce8973846a7002c9325c576e099917d6", "patch": "@@ -2469,6 +2469,7 @@ package body Sem_Res is\n                                   N_Attribute_Reference,\n                                   N_And_Then,\n                                   N_Indexed_Component,\n+                                  N_Identifier,\n                                   N_Or_Else,\n                                   N_Range,\n                                   N_Selected_Component,\n@@ -2626,7 +2627,9 @@ package body Sem_Res is\n                            --  replaced by the appropriate call during late\n                            --  expansion.\n \n-                           if not Box_Present (Elmt) then\n+                           if Nkind (Elmt) /= N_Iterated_Component_Association\n+                             and then not Box_Present (Elmt)\n+                           then\n                               Check_Elmt (Expression (Elmt));\n                            end if;\n "}]}