{"sha": "d17cdc17c90ce77cb90c569322c1f241d3530cec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDE3Y2RjMTdjOTBjZTc3Y2I5MGM1NjkzMjJjMWYyNDFkMzUzMGNlYw==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-05-12T17:39:42Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-05-12T17:39:54Z"}, "message": "Enable CET in cross compiler if possible\n\nDon't perform CET run-time check for host when cross compiling.  Instead,\nenable CET in cross compiler if possible so that it will run on both CET\nand non-CET hosts.\n\nconfig/\n\n\tPR bootstrap/94998\n\t* cet.m4 (GCC_CET_HOST_FLAGS): Enable CET in cross compiler if\n\tpossible.\n\nlibiberty/\n\n\tPR bootstrap/94998\n\t* configure: Regenerated.\n\nlto-plugin/\n\n\tPR bootstrap/94998\n\t* configure: Regenerated.", "tree": {"sha": "123c57d341267cdac580408d46ede76879f970bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/123c57d341267cdac580408d46ede76879f970bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d17cdc17c90ce77cb90c569322c1f241d3530cec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d17cdc17c90ce77cb90c569322c1f241d3530cec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d17cdc17c90ce77cb90c569322c1f241d3530cec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d17cdc17c90ce77cb90c569322c1f241d3530cec/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a6790fb4e5090624fbd71e2b895e6bdd5319fd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a6790fb4e5090624fbd71e2b895e6bdd5319fd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a6790fb4e5090624fbd71e2b895e6bdd5319fd7"}], "stats": {"total": 62, "additions": 48, "deletions": 14}, "files": [{"sha": "8a8b2cbc89a3b52535fecb2b2af13d1c3f6cfe5d", "filename": "config/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d17cdc17c90ce77cb90c569322c1f241d3530cec/config%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d17cdc17c90ce77cb90c569322c1f241d3530cec/config%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2FChangeLog?ref=d17cdc17c90ce77cb90c569322c1f241d3530cec", "patch": "@@ -1,3 +1,9 @@\n+2020-05-12  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR bootstrap/94998\n+\t* cet.m4 (GCC_CET_HOST_FLAGS): Enable CET in cross compiler if\n+\tpossible.\n+\n 2020-04-28  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR bootstrap/94739"}, {"sha": "d9608699cd521a72e38a1e6184ffbd1862b4622b", "filename": "config/cet.m4", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d17cdc17c90ce77cb90c569322c1f241d3530cec/config%2Fcet.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d17cdc17c90ce77cb90c569322c1f241d3530cec/config%2Fcet.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fcet.m4?ref=d17cdc17c90ce77cb90c569322c1f241d3530cec", "patch": "@@ -111,7 +111,8 @@ if test x$may_have_cet = xyes; then\n fi\n \n if test x$may_have_cet = xyes; then\n-  AC_TRY_RUN([\n+  if test x$cross_compiling = xno; then\n+    AC_TRY_RUN([\n static void\n foo (void)\n {\n@@ -137,12 +138,17 @@ main ()\n   bar ();\n   return 0;\n }\n-  ],\n-  [have_cet=no],\n-  [have_cet=yes])\n-  if test x$enable_cet = xno -a x$have_cet = xyes; then\n-    AC_MSG_ERROR([Intel CET must be enabled on Intel CET enabled host])\n+    ],\n+    [have_cet=no],\n+    [have_cet=yes])\n+    if test x$enable_cet = xno -a x$have_cet = xyes; then\n+      AC_MSG_ERROR([Intel CET must be enabled on Intel CET enabled host])\n+    fi\n   fi\n+else\n+  # Enable CET in cross compiler if possible so that it will run on both\n+  # CET and non-CET hosts.\n+  have_cet=yes\n fi\n if test x$enable_cet = xyes; then\n   $1=\"-fcf-protection\""}, {"sha": "f5691180e4004a9bd2fdd30f4768e677bc8fbc63", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d17cdc17c90ce77cb90c569322c1f241d3530cec/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d17cdc17c90ce77cb90c569322c1f241d3530cec/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=d17cdc17c90ce77cb90c569322c1f241d3530cec", "patch": "@@ -1,3 +1,8 @@\n+2020-05-12  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR bootstrap/94998\n+\t* configure: Regenerated.\n+\n 2020-04-28  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR bootstrap/94739"}, {"sha": "3f82c5bb865cb09edd605138a8e7bf98c32f3f45", "filename": "libiberty/configure", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d17cdc17c90ce77cb90c569322c1f241d3530cec/libiberty%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d17cdc17c90ce77cb90c569322c1f241d3530cec/libiberty%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfigure?ref=d17cdc17c90ce77cb90c569322c1f241d3530cec", "patch": "@@ -5375,7 +5375,8 @@ rm -f core conftest.err conftest.$ac_objext \\\n fi\n \n if test x$may_have_cet = xyes; then\n-  if test \"$cross_compiling\" = yes; then :\n+  if test x$cross_compiling = xno; then\n+    if test \"$cross_compiling\" = yes; then :\n   { { $as_echo \"$as_me:${as_lineno-$LINENO}: error: in \\`$ac_pwd':\" >&5\n $as_echo \"$as_me: error: in \\`$ac_pwd':\" >&2;}\n as_fn_error $? \"cannot run test program while cross compiling\n@@ -5420,9 +5421,14 @@ rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \\\n   conftest.$ac_objext conftest.beam conftest.$ac_ext\n fi\n \n-  if test x$enable_cet = xno -a x$have_cet = xyes; then\n-    as_fn_error $? \"Intel CET must be enabled on Intel CET enabled host\" \"$LINENO\" 5\n+    if test x$enable_cet = xno -a x$have_cet = xyes; then\n+      as_fn_error $? \"Intel CET must be enabled on Intel CET enabled host\" \"$LINENO\" 5\n+    fi\n   fi\n+else\n+  # Enable CET in cross compiler if possible so that it will run on both\n+  # CET and non-CET hosts.\n+  have_cet=yes\n fi\n if test x$enable_cet = xyes; then\n   CET_HOST_FLAGS=\"-fcf-protection\""}, {"sha": "7be98a1a12e786d7efb40f50dcabefc483107959", "filename": "lto-plugin/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d17cdc17c90ce77cb90c569322c1f241d3530cec/lto-plugin%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d17cdc17c90ce77cb90c569322c1f241d3530cec/lto-plugin%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2FChangeLog?ref=d17cdc17c90ce77cb90c569322c1f241d3530cec", "patch": "@@ -1,3 +1,8 @@\n+2020-05-12  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR bootstrap/94998\n+\t* configure: Regenerated.\n+\n 2020-05-05  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* lto-plugin.c: Document -linker-output-auto-notlo-rel option."}, {"sha": "36c6ecc5875ddf13b4bcd85f7f2317f7a99690f7", "filename": "lto-plugin/configure", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d17cdc17c90ce77cb90c569322c1f241d3530cec/lto-plugin%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d17cdc17c90ce77cb90c569322c1f241d3530cec/lto-plugin%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2Fconfigure?ref=d17cdc17c90ce77cb90c569322c1f241d3530cec", "patch": "@@ -5768,7 +5768,8 @@ rm -f core conftest.err conftest.$ac_objext \\\n fi\n \n if test x$may_have_cet = xyes; then\n-  if test \"$cross_compiling\" = yes; then :\n+  if test x$cross_compiling = xno; then\n+    if test \"$cross_compiling\" = yes; then :\n   { { $as_echo \"$as_me:${as_lineno-$LINENO}: error: in \\`$ac_pwd':\" >&5\n $as_echo \"$as_me: error: in \\`$ac_pwd':\" >&2;}\n as_fn_error $? \"cannot run test program while cross compiling\n@@ -5813,9 +5814,14 @@ rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \\\n   conftest.$ac_objext conftest.beam conftest.$ac_ext\n fi\n \n-  if test x$enable_cet = xno -a x$have_cet = xyes; then\n-    as_fn_error $? \"Intel CET must be enabled on Intel CET enabled host\" \"$LINENO\" 5\n+    if test x$enable_cet = xno -a x$have_cet = xyes; then\n+      as_fn_error $? \"Intel CET must be enabled on Intel CET enabled host\" \"$LINENO\" 5\n+    fi\n   fi\n+else\n+  # Enable CET in cross compiler if possible so that it will run on both\n+  # CET and non-CET hosts.\n+  have_cet=yes\n fi\n if test x$enable_cet = xyes; then\n   CET_HOST_FLAGS=\"-fcf-protection\"\n@@ -11941,7 +11947,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11944 \"configure\"\n+#line 11950 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -12047,7 +12053,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12050 \"configure\"\n+#line 12056 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}]}