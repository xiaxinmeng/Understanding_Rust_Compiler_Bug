{"sha": "7da97411b048cdd4e7941b311514f46ea53fe3a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2RhOTc0MTFiMDQ4Y2RkNGU3OTQxYjMxMTUxNGY0NmVhNTNmZTNhMg==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2020-12-02T04:48:10Z"}, "committer": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2020-12-02T04:49:10Z"}, "message": "Use add/sub/neg insns to eliminate compare/test insns on H8\n\ngcc/\n\n\t* config/h8300/addsub.md (addqi3_clobber_flags): Rename to\n\taddqi3_flags and annotate with a <cczn> for define_subst.\n\t(addhi3_h8sx_clobber_flags): Likewise.\n\t(subqi3_clobber_flags, sub<mode>3_clobber_flags): Likewise.\n\t(neg<mode2>_clobber_flags): Similarly.\n\t(addsi3_clobber_flags): Similarly.  Update last argument to\n\toutput_plussi to distinguish when we need flags or do not need\n\tflags.\n\t(addhi3_clobber_flags): Similarly.  Twiddle code for cases\n\t+-1, +-2 and +-4.\n\t* config/h8300/h8300.md: Define iterators, mode attributes and\n\tsubstitutions for use in compare/test elimination.\n\t* config/h8300/jumpcall.md (branch, branch_1): Use H8cc mode\n\titerator to cover the different modes for the CC register.\n\t(branch_1_false): Likewise.\n\ngcc/testsuite\n\t* gcc.target/h8300/add.c: New test.\n\t* gcc.target/h8300/add-2.c: New test.\n\t* gcc.target/h8300/add-3.c: New test.\n\t* gcc.target/h8300/sub.c: New test.\n\t* gcc.target/h8300/sub-2.c: New test.\n\t* gcc.target/h8300/sub-3.c: New test.", "tree": {"sha": "62818d588b21f5445743e65ffb0a1e456389912f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62818d588b21f5445743e65ffb0a1e456389912f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7da97411b048cdd4e7941b311514f46ea53fe3a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7da97411b048cdd4e7941b311514f46ea53fe3a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7da97411b048cdd4e7941b311514f46ea53fe3a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7da97411b048cdd4e7941b311514f46ea53fe3a2/comments", "author": null, "committer": null, "parents": [{"sha": "4bdf1e53a8111312639b3a2f140bae4206f3a8aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bdf1e53a8111312639b3a2f140bae4206f3a8aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bdf1e53a8111312639b3a2f140bae4206f3a8aa"}], "stats": {"total": 353, "additions": 333, "deletions": 20}, "files": [{"sha": "3585bffa9fc5808f517209d1cd701b823cf281dd", "filename": "gcc/config/h8300/addsub.md", "status": "modified", "additions": 39, "deletions": 15, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7da97411b048cdd4e7941b311514f46ea53fe3a2/gcc%2Fconfig%2Fh8300%2Faddsub.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7da97411b048cdd4e7941b311514f46ea53fe3a2/gcc%2Fconfig%2Fh8300%2Faddsub.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Faddsub.md?ref=7da97411b048cdd4e7941b311514f46ea53fe3a2", "patch": "@@ -19,7 +19,7 @@\n   [(parallel [(set (match_dup 0) (plus:QI (match_dup 1) (match_dup 2)))\n \t      (clobber (reg:CC CC_REG))])])\n \n-(define_insn \"*addqi3_clobber_flags\"\n+(define_insn \"*addqi3_flags<cczn>\"\n   [(set (match_operand:QI 0 \"h8300_dst_operand\" \"=rQ\")\n \t(plus:QI (match_operand:QI 1 \"h8300_dst_operand\" \"%0\")\n \t\t (match_operand:QI 2 \"h8300_src_operand\" \"rQi\")))\n@@ -38,18 +38,41 @@\n   [(parallel [(set (match_dup 0) (plus:HI (match_dup 1) (match_dup 2)))\n \t      (clobber (reg:CC CC_REG))])])\n \n-(define_insn \"*addhi3_clobber_flags\"\n+(define_insn \"*addhi3_flags<cczn>\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,r,r,r,r\")\n \t(plus:HI (match_operand:HI 1 \"register_operand\" \"%0,0,0,0,0\")\n-\t\t (match_operand:HI 2 \"h8300_src_operand\" \"L,N,J,n,r\")))\n+\t\t (match_operand:HI 2 \"h8300_src_operand\" \"M,O,J,n,r\")))\n    (clobber (reg:CC CC_REG))]\n   \"reload_completed && !TARGET_H8300SX\"\n-  \"@\n-   adds\t%2,%S0\n-   subs\t%G2,%S0\n-   add.b\t%t2,%t0\n-   add.w\t%T2,%T0\n-   add.w\t%T2,%T0\"\n+  \"*\n+  {\n+    switch (which_alternative)\n+      {\n+      case 0:\n+\treturn \\\"inc %T2,%T0\\\";\n+      case 1:\n+\treturn \\\"dec %G2,%T0\\\";\n+      case 2:\n+\treturn \\\"add.b\t%t2,%t0\\\";\n+      case 3:\n+\t{\n+\t  /* If the constant is 4 or -4 and we do not need the\n+\t     flags, then we can use adds/subs which is two bytes\n+\t     shorter.  */\n+\t  rtx x = XVECEXP (PATTERN (insn), 0, 1);\n+\t  bool clobber = GET_CODE (x) == CLOBBER;\n+\t  if (clobber && INTVAL (operands[2]) == 4)\n+\t    return \\\"adds\t%2,%S0\\\";\n+\t  if (clobber && INTVAL (operands[2]) == -4)\n+\t    return \\\"subs\t%G2,%S0\\\";\n+\t  return \\\"add.w\t%T2,%T0\\\";\n+\t}\n+      case 4:\n+\treturn \\\"add.w\t%T2,%T0\\\";\n+      default:\n+\tgcc_unreachable ();\n+      }\n+  }\"\n   [(set_attr \"length\" \"2,2,2,4,2\")])\n \n (define_insn_and_split \"*addhi3_h8sx\"\n@@ -62,7 +85,7 @@\n   [(parallel [(set (match_dup 0) (plus:HI (match_dup 1) (match_dup 2)))\n \t      (clobber (reg:CC CC_REG))])])\n \n-(define_insn \"*addhi3_h8sx_clobber_flags\"\n+(define_insn \"*addhi3_h8sx_flags<cczn>\"\n   [(set (match_operand:HI 0 \"h8300_dst_operand\" \"=rU,rU,r,rQ\")\n \t(plus:HI (match_operand:HI 1 \"h8300_dst_operand\" \"%0,0,0,0\")\n \t\t (match_operand:HI 2 \"h8300_src_operand\" \"P3>X,P3<X,J,rQi\")))\n@@ -98,14 +121,15 @@\n   [(parallel [(set (match_dup 0) (plus:SI (match_dup 1) (match_dup 2)))\n \t      (clobber (reg:CC CC_REG))])])\n \n-(define_insn \"*addsi_clobber_flags\"\n+(define_insn \"*addsi_flags<cczn>\"\n   [(set (match_operand:SI 0 \"h8300_dst_operand\" \"=rQ,rQ\")\n \t(plus:SI (match_operand:SI 1 \"h8300_dst_operand\" \"%0,0\")\n \t\t (match_operand:SI 2 \"h8300_src_operand\" \"i,rQ\")))\n    (clobber (reg:CC CC_REG))]\n   \"reload_completed && h8300_operands_match_p (operands)\"\n {\n-  return output_plussi (operands, false);\n+  rtx x = XVECEXP (PATTERN (insn), 0, 1);\n+  return output_plussi (operands, GET_CODE (x) != CLOBBER);\n }\n   [(set (attr \"length\")\n \t(symbol_ref \"compute_plussi_length (operands, false)\"))])\n@@ -130,7 +154,7 @@\n   [(parallel [(set (match_dup 0) (minus:QI (match_dup 1) (match_dup 2)))\n \t      (clobber (reg:CC CC_REG))])])\n \n-(define_insn \"*subqi3_clobber_flags\"\n+(define_insn \"*subqi3_flags<cczn>\"\n   [(set (match_operand:QI 0 \"h8300_dst_operand\" \"=rQ\")\n \t(minus:QI (match_operand:QI 1 \"h8300_dst_operand\" \"0\")\n \t\t  (match_operand:QI 2 \"h8300_dst_operand\" \"rQ\")))\n@@ -149,7 +173,7 @@\n   [(parallel [(set (match_dup 0) (minus:HSI (match_dup 1) (match_dup 2)))\n \t      (clobber (reg:CC CC_REG))])])\n \n-(define_insn \"*sub<mode>3_clobber_flags\"\n+(define_insn \"*sub<mode>3_flags<cczn>\"\n   [(set (match_operand:HSI 0 \"h8300_dst_operand\" \"=rQ,rQ\")\n \t(minus:HSI (match_operand:HSI 1 \"h8300_dst_operand\" \"0,0\")\n \t\t   (match_operand:HSI 2 \"h8300_src_operand\" \"rQ,i\")))\n@@ -183,7 +207,7 @@\n   [(parallel [(set (match_dup 0) (neg:QHSI (match_dup 1)))\n \t      (clobber (reg:CC CC_REG))])])\n \n-(define_insn \"*neg<mode>2_clobber_flags\"\n+(define_insn \"*neg<mode>2_flags<cczn>\"\n   [(set (match_operand:QHSI 0 \"h8300_dst_operand\" \"=rQ\")\n \t(neg:QHSI (match_operand:QHSI 1 \"h8300_dst_operand\" \"0\")))\n    (clobber (reg:CC CC_REG))]"}, {"sha": "932f74eb88fec9254ad821cbf44cfcd8e618025f", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7da97411b048cdd4e7941b311514f46ea53fe3a2/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7da97411b048cdd4e7941b311514f46ea53fe3a2/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=7da97411b048cdd4e7941b311514f46ea53fe3a2", "patch": "@@ -134,6 +134,39 @@\n (define_attr \"old_cc\" \"none,none_0hit,set_znv,set_zn,compare,clobber\"\n   (const_string \"clobber\"))\n \n+;; So the idea here is to define iterators and substitutions so that we\n+;; can easily modify the patterns with CC clobbers into a pattern\n+;; which sets appropriate condition codes\n+\n+;; The modes we're supporting.  This is used when we want to generate\n+;; multiple patterns where only the mode differs from a single template\n+(define_mode_iterator H8cc [CC CCZN])\n+\n+;; This is used to generate multiple define_substs from a single\n+;; template for the different variants we might have.\n+(define_mode_attr cc [(CC \"cc\") (CCZN \"cczn\")])\n+\n+;; The primary substitution pattern.  <cc> is used to create multiple\n+;; substitutions based on the CC bits that are set.\n+;;\n+;; The mode iterator sets the actual mode on the condition code\n+;; REG expression.\n+(define_subst \"subst_<cc>\"\n+  [(set (match_operand 0 \"\")\n+\t(match_operand 1 \"\"))\n+   (clobber (reg:CC CC_REG))]\n+  \"\"\n+  [(set (reg:H8cc CC_REG)\n+\t(compare:H8cc (match_dup 1) (const_int 0)))\n+   (set (match_dup 0) (match_dup 1))])\n+\n+\n+;; So when we see <cc> or <cczn> in a define_insn pattern, we'll\n+;; apply the subst_cczn or subset_cc define_subst to generate a\n+;; new pattern that compare-elim can use\n+(define_subst_attr \"cczn\" \"subst_cczn\" \"\" \"_cczn\")\n+(define_subst_attr \"cc\" \"subst_cc\" \"\" \"_cc\")\n+\n ;; Type of delay slot.  NONE means the instruction has no delay slot.\n ;; JUMP means it is an unconditional jump that (if short enough)\n ;; could be implemented using bra/s."}, {"sha": "49d1e4312ca155ee711367bcb21375568d68ce26", "filename": "gcc/config/h8300/jumpcall.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7da97411b048cdd4e7941b311514f46ea53fe3a2/gcc%2Fconfig%2Fh8300%2Fjumpcall.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7da97411b048cdd4e7941b311514f46ea53fe3a2/gcc%2Fconfig%2Fh8300%2Fjumpcall.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fjumpcall.md?ref=7da97411b048cdd4e7941b311514f46ea53fe3a2", "patch": "@@ -23,18 +23,18 @@\n   \"\"\n   \"#\"\n   \"reload_completed\"\n-  [(set (reg:CC CC_REG)\n-\t(compare:CC (match_dup 1) (match_dup 2)))\n+  [(set (reg:H8cc CC_REG)\n+\t(compare:H8cc (match_dup 1) (match_dup 2)))\n    (set (pc)\n \t(if_then_else (match_op_dup 0\n-\t\t       [(reg:CC CC_REG) (const_int 0)])\n+\t\t       [(reg:H8cc CC_REG) (const_int 0)])\n \t\t      (label_ref (match_dup 3)) (pc)))]\n   \"\")\n \n (define_insn \"*branch_1\"\n   [(set (pc)\n \t(if_then_else (match_operator 1 \"comparison_operator\"\n-\t\t       [(reg:CC CC_REG) (const_int 0)])\n+\t\t       [(reg:H8cc CC_REG) (const_int 0)])\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"reload_completed\"\n@@ -52,7 +52,7 @@\n (define_insn \"*branch_1_false\"\n   [(set (pc)\n \t(if_then_else (match_operator 1 \"comparison_operator\"\n-\t\t       [(reg:CC CC_REG) (const_int 0)])\n+\t\t       [(reg:H8cc CC_REG) (const_int 0)])\n \t\t      (pc)\n \t\t      (label_ref (match_operand 0 \"\" \"\"))))]\n   \"reload_completed\""}, {"sha": "27f9b2f00695fce27f8a9ba115e2dd0f383c5866", "filename": "gcc/testsuite/gcc.target/h8300/add-2.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7da97411b048cdd4e7941b311514f46ea53fe3a2/gcc%2Ftestsuite%2Fgcc.target%2Fh8300%2Fadd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7da97411b048cdd4e7941b311514f46ea53fe3a2/gcc%2Ftestsuite%2Fgcc.target%2Fh8300%2Fadd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fh8300%2Fadd-2.c?ref=7da97411b048cdd4e7941b311514f46ea53fe3a2", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do compile }  */\n+/* { dg-options \"-ms -mint32 -O2\" }  */\n+/* { dg-final { scan-assembler-not \"cmp\" } }  */\n+\n+#include \"add.c\""}, {"sha": "20de647c944929ccdf525df544c8147a72a71c22", "filename": "gcc/testsuite/gcc.target/h8300/add-3.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7da97411b048cdd4e7941b311514f46ea53fe3a2/gcc%2Ftestsuite%2Fgcc.target%2Fh8300%2Fadd-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7da97411b048cdd4e7941b311514f46ea53fe3a2/gcc%2Ftestsuite%2Fgcc.target%2Fh8300%2Fadd-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fh8300%2Fadd-3.c?ref=7da97411b048cdd4e7941b311514f46ea53fe3a2", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do compile }  */\n+/* { dg-options \"-msx -mint32 -O2\" }  */\n+/* { dg-final { scan-assembler-not \"cmp\" } }  */\n+\n+#include \"add.c\""}, {"sha": "ebeea579f6b19a5d7303bdbc18ccca9e6c0509e8", "filename": "gcc/testsuite/gcc.target/h8300/add.c", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7da97411b048cdd4e7941b311514f46ea53fe3a2/gcc%2Ftestsuite%2Fgcc.target%2Fh8300%2Fadd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7da97411b048cdd4e7941b311514f46ea53fe3a2/gcc%2Ftestsuite%2Fgcc.target%2Fh8300%2Fadd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fh8300%2Fadd.c?ref=7da97411b048cdd4e7941b311514f46ea53fe3a2", "patch": "@@ -0,0 +1,118 @@\n+/* { dg-do compile }  */\n+/* { dg-options \"-mh -mint32 -O2\" }  */\n+/* { dg-final { scan-assembler-not \"cmp\" } }  */\n+\n+typedef unsigned char uchar;\n+typedef signed char schar;\n+typedef unsigned short ushort;\n+typedef unsigned long ulong;\n+\n+volatile void abort (void);\n+\n+\n+#define ADD(T)\\\n+T addE##T (T x, T y) { T t = x + y ; if (t == 0) abort (); return t; } \\\n+T addNE##T (T x, T y) { T t = x + y ; if (t != 0) return t; abort (); } \\\n+T addGE##T (T x, T y) { T t = x + y ; if (t >= 0) abort (); return t; } \\\n+T addLT##T (T x, T y) { T t = x + y ; if (t < 0) abort (); return t; }\n+\n+#define ADDC(T,N)\\\n+T addEQ##N##T (T a) { T t = a + N; if (t == 0) abort (); return t; } \\\n+T addNE##N##T (T a) { T t = a + N; if (t != 0) return t; abort (); } \\\n+T addGE##N##T (T a) { T t = a + N; if (t >= 0) abort (); return t; } \\\n+T addLT##N##T (T a) { T t = a + N; if (t < 0) abort (); return t; }\n+\n+#define ADDNC(T,N)\\\n+T addEQN##N##T (T a) { T t = a + -N; if (t == 0) abort (); return t; } \\\n+T addNEN##N##T (T a) { T t = a + -N; if (t != 0) return t; abort (); } \\\n+T addGEN##N##T (T a) { T t = a + -N; if (t >= 0) abort (); return t; } \\\n+T addLTN##N##T (T a) { T t = a + -N; if (t < 0) abort (); return t; }\n+\n+\n+ADD (schar)\n+ADD (short)\n+ADD (long)\n+ADD (uchar)\n+ADD (ushort)\n+ADD (ulong)\n+\n+\n+\n+ADDC (schar,1)\n+ADDC (schar,2)\n+ADDC (schar,3)\n+ADDC (schar,4)\n+ADDC (schar,6)\n+ADDC (schar,8)\n+ADDNC (schar,1)\n+ADDNC (schar,2)\n+ADDNC (schar,3)\n+ADDNC (schar,4)\n+ADDNC (schar,6)\n+ADDNC (schar,8)\n+\n+ADDC (uchar,1)\n+ADDC (uchar,2)\n+ADDC (uchar,3)\n+ADDC (uchar,4)\n+ADDC (uchar,6)\n+ADDC (uchar,8)\n+ADDNC (uchar,1)\n+ADDNC (uchar,2)\n+ADDNC (uchar,3)\n+ADDNC (uchar,4)\n+ADDNC (uchar,6)\n+ADDNC (uchar,8)\n+\n+ADDC (short,1)\n+ADDC (short,2)\n+ADDC (short,3)\n+ADDC (short,4)\n+ADDC (short,6)\n+ADDC (short,8)\n+ADDNC (short,1)\n+ADDNC (short,2)\n+ADDNC (short,3)\n+ADDNC (short,4)\n+ADDNC (short,6)\n+ADDNC (short,8)\n+\n+ADDC (ushort,1)\n+ADDC (ushort,2)\n+ADDC (ushort,3)\n+ADDC (ushort,4)\n+ADDC (ushort,6)\n+ADDC (ushort,8)\n+ADDNC (ushort,1)\n+ADDNC (ushort,2)\n+ADDNC (ushort,3)\n+ADDNC (ushort,4)\n+ADDNC (ushort,6)\n+ADDNC (ushort,8)\n+\n+ADDC (long,1)\n+ADDC (long,2)\n+ADDC (long,3)\n+ADDC (long,4)\n+ADDC (long,6)\n+ADDC (long,8)\n+ADDNC (long,1)\n+ADDNC (long,2)\n+ADDNC (long,3)\n+ADDNC (long,4)\n+ADDNC (long,6)\n+ADDNC (long,8)\n+\n+ADDC (ulong,1)\n+ADDC (ulong,2)\n+ADDC (ulong,3)\n+ADDC (ulong,4)\n+ADDC (ulong,6)\n+ADDC (ulong,8)\n+ADDNC (ulong,1)\n+ADDNC (ulong,2)\n+ADDNC (ulong,3)\n+ADDNC (ulong,4)\n+ADDNC (ulong,6)\n+ADDNC (ulong,8)\n+"}, {"sha": "c2914bd1d97533cf1105ee7fca886210aa0bdb13", "filename": "gcc/testsuite/gcc.target/h8300/sub-2.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7da97411b048cdd4e7941b311514f46ea53fe3a2/gcc%2Ftestsuite%2Fgcc.target%2Fh8300%2Fsub-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7da97411b048cdd4e7941b311514f46ea53fe3a2/gcc%2Ftestsuite%2Fgcc.target%2Fh8300%2Fsub-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fh8300%2Fsub-2.c?ref=7da97411b048cdd4e7941b311514f46ea53fe3a2", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do compile }  */\n+/* { dg-options \"-ms -mint32 -O2\" }  */\n+/* { dg-final { scan-assembler-not \"cmp\" } }  */\n+\n+#include \"sub.c\""}, {"sha": "72bcf04d1563119cebbfcd39d63547bcb05c30c6", "filename": "gcc/testsuite/gcc.target/h8300/sub-3.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7da97411b048cdd4e7941b311514f46ea53fe3a2/gcc%2Ftestsuite%2Fgcc.target%2Fh8300%2Fsub-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7da97411b048cdd4e7941b311514f46ea53fe3a2/gcc%2Ftestsuite%2Fgcc.target%2Fh8300%2Fsub-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fh8300%2Fsub-3.c?ref=7da97411b048cdd4e7941b311514f46ea53fe3a2", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do compile }  */\n+/* { dg-options \"-msx -mint32 -O2\" }  */\n+/* { dg-final { scan-assembler-not \"cmp\" } }  */\n+\n+#include \"sub.c\""}, {"sha": "66b63ab447dfa3ff873aa27c7579de1aa19334ba", "filename": "gcc/testsuite/gcc.target/h8300/sub.c", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7da97411b048cdd4e7941b311514f46ea53fe3a2/gcc%2Ftestsuite%2Fgcc.target%2Fh8300%2Fsub.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7da97411b048cdd4e7941b311514f46ea53fe3a2/gcc%2Ftestsuite%2Fgcc.target%2Fh8300%2Fsub.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fh8300%2Fsub.c?ref=7da97411b048cdd4e7941b311514f46ea53fe3a2", "patch": "@@ -0,0 +1,118 @@\n+/* { dg-do compile }  */\n+/* { dg-options \"-mh -mint32 -O2\" }  */\n+/* { dg-final { scan-assembler-not \"cmp\" } }  */\n+\n+typedef unsigned char uchar;\n+typedef signed char schar;\n+typedef unsigned short ushort;\n+typedef unsigned long ulong;\n+\n+volatile void abort (void);\n+\n+\n+#define SUB(T)\\\n+T subE##T (T x, T y) { T t = x - y ; if (t == 0) abort (); return t; } \\\n+T subNE##T (T x, T y) { T t = x - y ; if (t != 0) return t; abort (); } \\\n+T subGE##T (T x, T y) { T t = x - y ; if (t >= 0) abort (); return t; } \\\n+T subLT##T (T x, T y) { T t = x - y ; if (t < 0) abort (); return t; }\n+\n+#define SUBC(T,N)\\\n+T subEQ##N##T (T a) { T t = a - N; if (t == 0) abort (); return t; } \\\n+T subNE##N##T (T a) { T t = a - N; if (t != 0) return t; abort (); } \\\n+T subGE##N##T (T a) { T t = a - N; if (t >= 0) abort (); return t; } \\\n+T subLT##N##T (T a) { T t = a - N; if (t < 0) abort (); return t; }\n+\n+#define SUBNC(T,N)\\\n+T subEQN##N##T (T a) { T t = a - -N; if (t == 0) abort (); return t; } \\\n+T subNEN##N##T (T a) { T t = a - -N; if (t != 0) return t; abort (); } \\\n+T subGEN##N##T (T a) { T t = a - -N; if (t >= 0) abort (); return t; } \\\n+T subLTN##N##T (T a) { T t = a - -N; if (t < 0) abort (); return t; }\n+\n+\n+SUB (schar)\n+SUB (short)\n+SUB (long)\n+SUB (uchar)\n+SUB (ushort)\n+SUB (ulong)\n+\n+\n+\n+SUBC (schar,1)\n+SUBC (schar,2)\n+SUBC (schar,3)\n+SUBC (schar,4)\n+SUBC (schar,6)\n+SUBC (schar,8)\n+SUBNC (schar,1)\n+SUBNC (schar,2)\n+SUBNC (schar,3)\n+SUBNC (schar,4)\n+SUBNC (schar,6)\n+SUBNC (schar,8)\n+\n+SUBC (uchar,1)\n+SUBC (uchar,2)\n+SUBC (uchar,3)\n+SUBC (uchar,4)\n+SUBC (uchar,6)\n+SUBC (uchar,8)\n+SUBNC (uchar,1)\n+SUBNC (uchar,2)\n+SUBNC (uchar,3)\n+SUBNC (uchar,4)\n+SUBNC (uchar,6)\n+SUBNC (uchar,8)\n+\n+SUBC (short,1)\n+SUBC (short,2)\n+SUBC (short,3)\n+SUBC (short,4)\n+SUBC (short,6)\n+SUBC (short,8)\n+SUBNC (short,1)\n+SUBNC (short,2)\n+SUBNC (short,3)\n+SUBNC (short,4)\n+SUBNC (short,6)\n+SUBNC (short,8)\n+\n+SUBC (ushort,1)\n+SUBC (ushort,2)\n+SUBC (ushort,3)\n+SUBC (ushort,4)\n+SUBC (ushort,6)\n+SUBC (ushort,8)\n+SUBNC (ushort,1)\n+SUBNC (ushort,2)\n+SUBNC (ushort,3)\n+SUBNC (ushort,4)\n+SUBNC (ushort,6)\n+SUBNC (ushort,8)\n+\n+SUBC (long,1)\n+SUBC (long,2)\n+SUBC (long,3)\n+SUBC (long,4)\n+SUBC (long,6)\n+SUBC (long,8)\n+SUBNC (long,1)\n+SUBNC (long,2)\n+SUBNC (long,3)\n+SUBNC (long,4)\n+SUBNC (long,6)\n+SUBNC (long,8)\n+\n+SUBC (ulong,1)\n+SUBC (ulong,2)\n+SUBC (ulong,3)\n+SUBC (ulong,4)\n+SUBC (ulong,6)\n+SUBC (ulong,8)\n+SUBNC (ulong,1)\n+SUBNC (ulong,2)\n+SUBNC (ulong,3)\n+SUBNC (ulong,4)\n+SUBNC (ulong,6)\n+SUBNC (ulong,8)\n+"}]}