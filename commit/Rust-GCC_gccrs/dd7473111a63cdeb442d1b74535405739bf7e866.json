{"sha": "dd7473111a63cdeb442d1b74535405739bf7e866", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQ3NDczMTExYTYzY2RlYjQ0MmQxYjc0NTM1NDA1NzM5YmY3ZTg2Ng==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2004-05-18T02:53:55Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2004-05-18T02:53:55Z"}, "message": "toplev.h (flag_delete_null_pointer_checks): Move from here to...\n\n        * toplev.h (flag_delete_null_pointer_checks): Move from here to...\n        * flags.h (flag_delete_null_pointer_checks): Here.\n        * tree-flow.h (cprop_into_successor_phis): Add argument to prototype.\n        * tree-phinodes.c (resize_phi_node): Initialize PHI_ARG_NONZERO.\n        (add_phi_arg, remove_phi_arg_num): Similarly.\n        * tree-ssa-copy.c (cprop_into_successor_phis): Propagate nonzero\n        property into PHI nodes.\n        * tree-ssa-dom.c: Remove redundant inclusion of flags.h.\n        (record_equivalences_from_phis): If all PHI arguments are known to be\n        nonzero, then the result must be nonzero as well.\n        (cprop_into_phis): Pass nonzero_vars bitmap to cprop_into_successor_phis        (record_equivalences_from_stmt): Check flag_delete_null_pointer_checks\n        appropriately.  Walk the USE-DEF chains and propagate nonzero property\n        as appropriate.\n        * tree.h (PHI_ARG_NONZERO): Define.\n        (phi_arg_d): Add nonzero flag.\n\nFrom-SVN: r81968", "tree": {"sha": "8b09f05de2af4fbf629836a3810db742dd217646", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b09f05de2af4fbf629836a3810db742dd217646"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd7473111a63cdeb442d1b74535405739bf7e866", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd7473111a63cdeb442d1b74535405739bf7e866", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd7473111a63cdeb442d1b74535405739bf7e866", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd7473111a63cdeb442d1b74535405739bf7e866/comments", "author": null, "committer": null, "parents": [{"sha": "b4117c306105c7e3279bbbabab1dd361a3b35b62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4117c306105c7e3279bbbabab1dd361a3b35b62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4117c306105c7e3279bbbabab1dd361a3b35b62"}], "stats": {"total": 104, "additions": 80, "deletions": 24}, "files": [{"sha": "ee2ae6f574751922dd3d1bfa9f4b6aab032ecfdb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd7473111a63cdeb442d1b74535405739bf7e866/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd7473111a63cdeb442d1b74535405739bf7e866/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dd7473111a63cdeb442d1b74535405739bf7e866", "patch": "@@ -1,3 +1,21 @@\n+2004-05-17  Jeff Law  <law@redhat.com>\n+\n+\t* toplev.h (flag_delete_null_pointer_checks): Move from here to...\n+\t* flags.h (flag_delete_null_pointer_checks): Here.\n+\t* tree-flow.h (cprop_into_successor_phis): Add argument to prototype.\n+\t* tree-phinodes.c (resize_phi_node): Initialize PHI_ARG_NONZERO.\n+\t(add_phi_arg, remove_phi_arg_num): Similarly.\n+\t* tree-ssa-copy.c (cprop_into_successor_phis): Propagate nonzero\n+\tproperty into PHI nodes.\n+\t* tree-ssa-dom.c: Remove redundant inclusion of flags.h.\n+\t(record_equivalences_from_phis): If all PHI arguments are known to be\n+\tnonzero, then the result must be nonzero as well.\n+\t(cprop_into_phis): Pass nonzero_vars bitmap to cprop_into_successor_phis        (record_equivalences_from_stmt): Check flag_delete_null_pointer_checks\n+\tappropriately.  Walk the USE-DEF chains and propagate nonzero property\n+\tas appropriate.\n+\t* tree.h (PHI_ARG_NONZERO): Define.\n+\t(phi_arg_d): Add nonzero flag.\n+\n 2004-05-17  Zack Weinberg  <zack@codesourcery.com>\n \n \t* f: Entire directory removed"}, {"sha": "6f8f5f67ea3c13d0a9aa82deee87f1cbde61f63a", "filename": "gcc/flags.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd7473111a63cdeb442d1b74535405739bf7e866/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd7473111a63cdeb442d1b74535405739bf7e866/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=dd7473111a63cdeb442d1b74535405739bf7e866", "patch": "@@ -323,6 +323,10 @@ extern int flag_cse_skip_blocks;\n    perform miscellaneous relatively-expensive optimizations.  */\n extern int flag_expensive_optimizations;\n \n+/* Nonzero means to use global dataflow analysis to eliminate\n+   useless null pointer tests.  */\n+extern int flag_delete_null_pointer_checks;\n+\n /* Nonzero means don't put addresses of constant functions in registers.\n    Used for compiling the Unix kernel, where strange substitutions are\n    done on the assembly output.  */"}, {"sha": "7a2dc6b19b27556f689ec85bac9d5707f0740633", "filename": "gcc/toplev.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd7473111a63cdeb442d1b74535405739bf7e866/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd7473111a63cdeb442d1b74535405739bf7e866/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=dd7473111a63cdeb442d1b74535405739bf7e866", "patch": "@@ -113,7 +113,6 @@ extern int flag_loop_optimize;\n extern int flag_crossjumping;\n extern int flag_if_conversion;\n extern int flag_if_conversion2;\n-extern int flag_delete_null_pointer_checks;\n extern int flag_keep_static_consts;\n extern int flag_peel_loops;\n extern int flag_rerun_cse_after_loop;"}, {"sha": "997ed6247d6399801c6c2b7dc7356989826c0ee9", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd7473111a63cdeb442d1b74535405739bf7e866/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd7473111a63cdeb442d1b74535405739bf7e866/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=dd7473111a63cdeb442d1b74535405739bf7e866", "patch": "@@ -575,7 +575,7 @@ extern void debug_dominator_optimization_stats (void);\n extern void propagate_value (tree *, tree);\n extern void replace_exp (tree *, tree);\n extern bool cprop_into_stmt (tree, varray_type);\n-extern void cprop_into_successor_phis (basic_block, varray_type);\n+extern void cprop_into_successor_phis (basic_block, varray_type, bitmap);\n \n /* In tree-flow-inline.h  */\n static inline int phi_arg_from_edge (tree, edge);"}, {"sha": "8a8454c1c1ccee938bf84b8c67aca4fa8baf4b7a", "filename": "gcc/tree-phinodes.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd7473111a63cdeb442d1b74535405739bf7e866/gcc%2Ftree-phinodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd7473111a63cdeb442d1b74535405739bf7e866/gcc%2Ftree-phinodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-phinodes.c?ref=dd7473111a63cdeb442d1b74535405739bf7e866", "patch": "@@ -280,6 +280,7 @@ resize_phi_node (tree *phi, int len)\n     {\n       PHI_ARG_DEF (new_phi, i) = NULL_TREE;\n       PHI_ARG_EDGE (new_phi, i) = NULL;\n+      PHI_ARG_NONZERO (new_phi, i) = false;\n     }\n \n   *phi = new_phi;\n@@ -366,6 +367,7 @@ add_phi_arg (tree *phi, tree def, edge e)\n \n   PHI_ARG_DEF (*phi, i) = def;\n   PHI_ARG_EDGE (*phi, i) = e;\n+  PHI_ARG_NONZERO (*phi, i) = false;\n   PHI_NUM_ARGS (*phi)++;\n }\n \n@@ -408,11 +410,13 @@ remove_phi_arg_num (tree phi, int i)\n     {\n       PHI_ARG_DEF (phi, i) = PHI_ARG_DEF (phi, num_elem - 1);\n       PHI_ARG_EDGE (phi, i) = PHI_ARG_EDGE (phi, num_elem - 1);\n+      PHI_ARG_NONZERO (phi, i) = PHI_ARG_NONZERO (phi, num_elem - 1);\n     }\n \n   /* Shrink the vector and return.  */\n   PHI_ARG_DEF (phi, num_elem - 1) = NULL_TREE;\n   PHI_ARG_EDGE (phi, num_elem - 1) = NULL;\n+  PHI_ARG_NONZERO (phi, num_elem - 1) = false;\n   PHI_NUM_ARGS (phi)--;\n \n   /* If we removed the last PHI argument, then go ahead and"}, {"sha": "3ecb8e0a3f91369ef3fe5aacd3c7d60fd4df4b11", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 51, "deletions": 22, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd7473111a63cdeb442d1b74535405739bf7e866/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd7473111a63cdeb442d1b74535405739bf7e866/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=dd7473111a63cdeb442d1b74535405739bf7e866", "patch": "@@ -40,7 +40,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"domwalk.h\"\n #include \"real.h\"\n #include \"tree-pass.h\"\n-#include \"flags.h\"\n #include \"langhooks.h\"\n \n /* This file implements optimizations on the dominator tree.  */\n@@ -1314,7 +1313,12 @@ dom_opt_finalize_block (struct dom_walk_data *walk_data, basic_block bb)\n \n    Ignoring any alternatives which are the same as the result, if\n    all the alternatives are equal, then the PHI node creates an\n-   equivalence.  */\n+   equivalence.\n+\n+   Additionally, if all the PHI alternatives are known to have a nonzero\n+   value, then the result of this PHI is known to have a nonzero value,\n+   even if we do not know its exact value.  */\n+\n static void\n record_equivalences_from_phis (struct dom_walk_data *walk_data, basic_block bb)\n {\n@@ -1367,6 +1371,17 @@ record_equivalences_from_phis (struct dom_walk_data *walk_data, basic_block bb)\n \t  && may_propagate_copy (lhs, rhs))\n \tset_value_for (lhs, rhs, const_and_copies);\n \n+      /* Now see if we know anything about the nonzero property for the\n+\t result of this PHI.  */\n+      for (i = 0; i < PHI_NUM_ARGS (phi); i++)\n+\t{\n+\t  if (!PHI_ARG_NONZERO (phi, i))\n+\t    break;\n+\t}\n+\n+      if (i == PHI_NUM_ARGS (phi))\n+\tbitmap_set_bit (nonzero_vars, SSA_NAME_VERSION (PHI_RESULT (phi)));\n+\n       register_new_def (lhs, &bd->block_defs);\n     }\n }\n@@ -2257,7 +2272,7 @@ static void\n cprop_into_phis (struct dom_walk_data *walk_data ATTRIBUTE_UNUSED,\n \t\t basic_block bb)\n {\n-  cprop_into_successor_phis (bb, const_and_copies);\n+  cprop_into_successor_phis (bb, const_and_copies, nonzero_vars);\n }\n \n /* Search for redundant computations in STMT.  If any are found, then\n@@ -2422,25 +2437,39 @@ record_equivalences_from_stmt (tree stmt,\n   /* Look at both sides for pointer dereferences.  If we find one, then\n      the pointer must be nonnull and we can enter that equivalence into\n      the hash tables.  */\n-  for (i = 0; i < 2; i++)\n-    {\n-      tree t = TREE_OPERAND (stmt, i);\n-\n-      /* Strip away any COMPONENT_REFs.  */\n-      while (TREE_CODE (t) == COMPONENT_REF)\n-        t = TREE_OPERAND (t, 0);\n-\n-      /* Now see if this is a pointer dereference.  */\n-      if (TREE_CODE (t) == INDIRECT_REF)\n-        {\n-\t  tree op = TREE_OPERAND (t, 0);\n-\n-\t  /* If the pointer is a SSA variable, then enter new\n-\t     equivalences into the hash table.  */\n-\t  if (TREE_CODE (op) == SSA_NAME)\n-\t    record_var_is_nonzero (op, block_nonzero_vars_p);\n-\t}\n-    }\n+  if (flag_delete_null_pointer_checks)\n+    for (i = 0; i < 2; i++)\n+      {\n+\ttree t = TREE_OPERAND (stmt, i);\n+\n+\t/* Strip away any COMPONENT_REFs.  */\n+\twhile (TREE_CODE (t) == COMPONENT_REF)\n+\t  t = TREE_OPERAND (t, 0);\n+\n+\t/* Now see if this is a pointer dereference.  */\n+\tif (TREE_CODE (t) == INDIRECT_REF)\n+          {\n+\t    tree op = TREE_OPERAND (t, 0);\n+\n+\t    /* If the pointer is a SSA variable, then enter new\n+\t       equivalences into the hash table.  */\n+\t    while (TREE_CODE (op) == SSA_NAME)\n+\t      {\n+\t\ttree def = SSA_NAME_DEF_STMT (op);\n+\n+\t\trecord_var_is_nonzero (op, block_nonzero_vars_p);\n+\n+\t\t/* And walk up the USE-DEF chains noting other SSA_NAMEs\n+\t\t   which are known to have a nonzero value.  */\n+\t\tif (def\n+\t\t    && TREE_CODE (def) == MODIFY_EXPR\n+\t\t    && TREE_CODE (TREE_OPERAND (def, 1)) == NOP_EXPR)\n+\t\t  op = TREE_OPERAND (TREE_OPERAND (def, 1), 0);\n+\t\telse\n+\t\t  break;\n+\t      }\n+\t  }\n+      }\n \n   /* A memory store, even an aliased store, creates a useful\n      equivalence.  By exchanging the LHS and RHS, creating suitable"}, {"sha": "d753f0209d3a60b455222fe8a71c7ef705905a33", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd7473111a63cdeb442d1b74535405739bf7e866/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd7473111a63cdeb442d1b74535405739bf7e866/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=dd7473111a63cdeb442d1b74535405739bf7e866", "patch": "@@ -1203,13 +1203,15 @@ struct tree_ssa_name GTY(())\n #define PHI_ARG_ELT(NODE, I)\tPHI_NODE_ELT_CHECK (NODE, I)\n #define PHI_ARG_EDGE(NODE, I)\tPHI_NODE_ELT_CHECK (NODE, I).e\n #define PHI_ARG_DEF(NODE, I)\tPHI_NODE_ELT_CHECK (NODE, I).def\n+#define PHI_ARG_NONZERO(NODE, I) PHI_NODE_ELT_CHECK (NODE, I).nonzero\n \n struct edge_def;\n \n struct phi_arg_d GTY(())\n {\n   tree def;\n   struct edge_def * GTY((skip (\"\"))) e;\n+  bool nonzero;\n };\n \n struct tree_phi_node GTY(())"}]}