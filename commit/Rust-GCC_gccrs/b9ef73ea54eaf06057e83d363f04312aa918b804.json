{"sha": "b9ef73ea54eaf06057e83d363f04312aa918b804", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjllZjczZWE1NGVhZjA2MDU3ZTgzZDM2M2YwNDMxMmFhOTE4YjgwNA==", "commit": {"author": {"name": "Ovidiu Predescu", "email": "ovidiu@cup.hp.com", "date": "1999-02-22T09:02:25Z"}, "committer": {"name": "Ovidiu Predescu", "email": "ovidiu@gcc.gnu.org", "date": "1999-02-22T09:02:25Z"}, "message": "Reverted to the old behavior of encoding the types.\n\nFrom-SVN: r25368", "tree": {"sha": "2362040267d2fc4aa42dd8b77e9fdc6ea7226290", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2362040267d2fc4aa42dd8b77e9fdc6ea7226290"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9ef73ea54eaf06057e83d363f04312aa918b804", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9ef73ea54eaf06057e83d363f04312aa918b804", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9ef73ea54eaf06057e83d363f04312aa918b804", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9ef73ea54eaf06057e83d363f04312aa918b804/comments", "author": null, "committer": null, "parents": [{"sha": "43297964f38d3096816b824a1d5557714471b2ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43297964f38d3096816b824a1d5557714471b2ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43297964f38d3096816b824a1d5557714471b2ce"}], "stats": {"total": 88, "additions": 48, "deletions": 40}, "files": [{"sha": "a1203e6adfa18f4135c964bd5afffcab01a99816", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9ef73ea54eaf06057e83d363f04312aa918b804/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9ef73ea54eaf06057e83d363f04312aa918b804/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b9ef73ea54eaf06057e83d363f04312aa918b804", "patch": "@@ -1,3 +1,9 @@\n+Mon Feb 22 08:55:05 1999  Ovidiu Predescu  <ovidiu@cup.hp.com>\n+\n+\t* objc/objc-act.c (encode_type): Temporary revert to the old\n+ \tbehavior of encoding types as the new one seems to break the\n+ \tencoding of bitfields.\n+\n Mon Feb 22 11:40:44 1999  Craig Burley  <craig@jcb-sc.com>\n Sat Feb 20 09:59:36 1999  Craig Burley  <craig@jcb-sc.com>\n "}, {"sha": "374e35b84c4bd6f40e9e0e2ff3da731d4cda85fb", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 42, "deletions": 40, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9ef73ea54eaf06057e83d363f04312aa918b804/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9ef73ea54eaf06057e83d363f04312aa918b804/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=b9ef73ea54eaf06057e83d363f04312aa918b804", "patch": "@@ -6782,37 +6782,38 @@ encode_type (type, curtype, format)\n \t{\n \t  /* Unsigned integer types.  */\n \n-\t  type = TYPE_MAIN_VARIANT (type);\n-\t  if (type == unsigned_type_node)\n-\t    obstack_1grow (&util_obstack, 'I');\n-\t  else if (type == long_unsigned_type_node)\n-\t    obstack_1grow (&util_obstack, 'L');\n-\t  else if (type == unsigned_char_type_node)\n+\t  if (TYPE_MODE (type) == QImode)\n \t    obstack_1grow (&util_obstack, 'C');\n-\t  else if (type == short_unsigned_type_node)\n+\t  else if (TYPE_MODE (type) == HImode)\n \t    obstack_1grow (&util_obstack, 'S');\n-\t  else if (type == long_long_unsigned_type_node)\n+\t  else if (TYPE_MODE (type) == SImode)\n+\t    {\n+\t      if (type == long_unsigned_type_node)\n+\t\tobstack_1grow (&util_obstack, 'L');\n+\t      else\n+\t\tobstack_1grow (&util_obstack, 'I');\n+\t    }\n+\t  else if (TYPE_MODE (type) == DImode)\n \t    obstack_1grow (&util_obstack, 'Q');\n-\t  else\n-\t    fatal (\"attempt to encode unsigned int of unknown type\");\n \t}\n \n       else\n \t/* Signed integer types.  */\n \t{\n-\t  type = TYPE_MAIN_VARIANT (type);\n-\t  if (type == integer_type_node)\n-\t    obstack_1grow (&util_obstack, 'i');\n-\t  else if (type == long_integer_type_node)\n-\t    obstack_1grow (&util_obstack, 'l');\n-\t  else if (type == char_type_node || type == signed_char_type_node)\n+\t  if (TYPE_MODE (type) == QImode)\n \t    obstack_1grow (&util_obstack, 'c');\n-\t  else if (type == short_integer_type_node)\n+\t  else if (TYPE_MODE (type) == HImode)\n \t    obstack_1grow (&util_obstack, 's');\n-\t  else if (type == long_long_integer_type_node)\n+\t  else if (TYPE_MODE (type) == SImode)\n+\t    {\n+\t      if (type == long_integer_type_node)\n+\t\tobstack_1grow (&util_obstack, 'l');\n+\t      else\n+\t\tobstack_1grow (&util_obstack, 'i');\n+\t    }\n+\n+\t  else if (TYPE_MODE (type) == DImode)\n \t    obstack_1grow (&util_obstack, 'q');\n-\t  else\n-\t    fatal (\"attempt to encode signed int of unknown type\");\n \t}\n     }\n \n@@ -6857,37 +6858,38 @@ encode_complete_bitfield (int position, tree type, int size)\n \t{\n \t  /* Unsigned integer types.  */\n \n-\t  type = TYPE_MAIN_VARIANT (type);\n-\t  if (type == unsigned_type_node)\n-\t    charType = 'I';\n-\t  else if (type == long_unsigned_type_node)\n-\t    charType = 'L';\n-\t  else if (type == unsigned_char_type_node)\n+\t  if (TYPE_MODE (type) == QImode)\n \t    charType = 'C';\n-\t  else if (type == short_unsigned_type_node)\n+\t  else if (TYPE_MODE (type) == HImode)\n \t    charType = 'S';\n-\t  else if (type == long_long_unsigned_type_node)\n+\t  else if (TYPE_MODE (type) == SImode)\n+\t    {\n+\t      if (type == long_unsigned_type_node)\n+\t\tcharType = 'L';\n+\t      else\n+\t\tcharType = 'I';\n+\t    }\n+\t  else if (TYPE_MODE (type) == DImode)\n \t    charType = 'Q';\n-\t  else\n-\t    fatal (\"attempt to encode unsigned int of unknown type\");\n \t}\n \n       else\n \t/* Signed integer types.  */\n \t{\n-\t  type = TYPE_MAIN_VARIANT (type);\n-\t  if (type == unsigned_type_node)\n-\t    charType = 'i';\n-\t  else if (type == long_unsigned_type_node)\n-\t    charType = 'l';\n-\t  else if (type == char_type_node || type == signed_char_type_node)\n+\t  if (TYPE_MODE (type) == QImode)\n \t    charType = 'c';\n-\t  else if (type == short_unsigned_type_node)\n+\t  else if (TYPE_MODE (type) == HImode)\n \t    charType = 's';\n-\t  else if (type == long_long_unsigned_type_node)\n+\t  else if (TYPE_MODE (type) == SImode)\n+\t    {\n+\t      if (type == long_integer_type_node)\n+\t\tcharType = 'l';\n+\t      else\n+\t\tcharType = 'i';\n+\t    }\n+\n+\t  else if (TYPE_MODE (type) == DImode)\n \t    charType = 'q';\n-\t  else\n-\t    fatal (\"attempt to encode signed int of unknown type\");\n \t}\n     }\n "}]}