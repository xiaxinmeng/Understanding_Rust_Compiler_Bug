{"sha": "9c58255170517b1b677ab0fac5cff46cc27c1dbd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM1ODI1NTE3MDUxN2IxYjY3N2FiMGZhYzVjZmY0NmNjMjdjMWRiZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-02-11T23:53:54Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-02-11T23:53:54Z"}, "message": "cgraph.c: Spelling fixes - behaviour -> behavior and neighbour -> neighbor.\n\n\t* cgraph.c: Spelling fixes - behaviour -> behavior and\n\tneighbour -> neighbor.\n\t* target.def: Likewise.\n\t* sel-sched.c: Likewise.\n\t* config/mips/mips.c: Likewise.\n\t* config/arc/arc.md: Likewise.\n\t* config/arm/cortex-a57.md: Likewise.\n\t* config/arm/arm.c: Likewise.\n\t* config/arm/neon.md: Likewise.\n\t* config/arm/arm-c.c: Likewise.\n\t* config/vms/vms-c.c: Likewise.\n\t* config/s390/s390.c: Likewise.\n\t* config/i386/znver1.md: Likewise.\n\t* config/i386/i386.c: Likewise.\n\t* config/ia64/hpux-unix2003.h: Likewise.\n\t* config/msp430/msp430.md: Likewise.\n\t* config/rx/rx.c: Likewise.\n\t* config/rx/rx.md: Likewise.\n\t* config/aarch64/aarch64-simd.md: Likewise.\n\t* config/aarch64/aarch64.c: Likewise.\n\t* config/nvptx/nvptx.c: Likewise.\n\t* config/bfin/bfin.c: Likewise.\n\t* config/cris/cris.opt: Likewise.\n\t* config/rs6000/rs6000.c: Likewise.\n\t* target.h: Likewise.\n\t* spellcheck.c: Likewise.\n\t* ira-build.c: Likewise.\n\t* tree-inline.c: Likewise.\n\t* builtins.c: Likewise.\n\t* lra-constraints.c: Likewise.\n\t* explow.c: Likewise.\n\t* hwint.h: Likewise.\n\t* targhooks.c: Likewise.\n\t* tree-vect-data-refs.c: Likewise.\n\t* expr.c: Likewise.\n\t* doc/tm.texi: Likewise.\n\t* doc/extend.texi: Likewise.\n\t* doc/install.texi: Likewise.\n\t* doc/md.texi: Likewise.\n\t* tree-ssa-tail-merge.c: Likewise.\n\t* sched-int.h: Likewise.\n\t* match.pd: Likewise.\n\t* sched-ebb.c: Likewise.\n\t* target.def (omit_struct_return_reg): Likewise.\n\t* gimple-ssa-isolate-paths.c: Likewise.\n\t(find_implicit_erroneous_behaviour): Renamed to...\n\t(find_implicit_erroneous_behavior): ... this.\n\t(find_explicit_erroneous_behaviour): Renamed to...\n\t(find_explicit_erroneous_behavior): ... this.\n\t(gimple_ssa_isolate_erroneous_paths): Adjust caller.\ngcc/cp/\n\t* error.c: Spelling fixes - behaviour -> behavior and\n\tneighbour -> neighbor.\n\t* decl.c: Likewise.\n\t* typeck.c (cp_build_binary_op): Fix up behavior spelling in\n\tdiagnostics.\n\t* init.c (build_delete): Likewise.\ngcc/objc/\n\t* objc-act.c: Spelling fixes - behaviour -> behavior and\n\tneighbour -> neighbor.\n\t* objc-map.h: Likewise.\ngcc/go/\n\t* gofrontend/lex.cc: Spelling fixes - behaviour -> behavior and\n\tneighbour -> neighbor.\n\t* gccgo.texi: Likewise.\ngcc/ada/\n\t* prj-tree.ads: Spelling fixes - behaviour -> behavior and\n\tneighbour -> neighbor.\n\t* prep.adb: Likewise.\n\t* prj.ads: Likewise.\n\t* prepcomp.adb: Likewise.\n\t* g-socket.ads: Likewise.\n\t* s-imgrea.adb: Likewise.\n\t* a-calend.adb: Likewise.\n\t* exp_disp.adb: Likewise.\n\t* doc/gnat_ugn/gnat_utility_programs.rst: Likewise.\n\t* g-socket.adb: Likewise.\n\t* sem_ch12.adb: Likewise.\n\t* terminals.c: Likewise.\ngcc/testsuite/\n\t* objc.dg/gnu-api-2-method.m: Spelling fixes - behaviour -> behavior\n\tand neighbour -> neighbor.\n\t* objc.dg/attributes/method-nonnull-1.m: Likewise.\n\t* objc.dg/gnu-api-2-class-meta.m: Likewise.\n\t* c-c++-common/Wvarargs.c: Likewise.\n\t* c-c++-common/goacc/host_data-5.c: Likewise.\n\t* obj-c++.dg/gnu-api-2-class-meta.mm: Likewise.\n\t* obj-c++.dg/attributes/method-nonnull-1.mm: Likewise.\n\t* obj-c++.dg/gnu-api-2-method.mm: Likewise.\n\t* gcc.target/aarch64/pr60697.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vldX_lane.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vqshl.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vshuffle.inc: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vrshl.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vldX_dup.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vstX_lane.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vqrshl.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vldX.c: Likewise.\n\t* gcc.target/aarch64/aapcs64/ice_2.c: Likewise.\n\t* gcc.target/aarch64/aapcs64/test_23.c: Likewise.\n\t* gcc.target/aarch64/vrnd_f64_1.c: Likewise.\n\t* g++.dg/warn/Wconversion-real-integer-3.C: Likewise.\n\t* g++.dg/lookup/koenig5.C: Likewise.\n\t* g++.dg/ext/no-asm-2.C: Likewise.\n\t* gfortran.dg/bounds_check_array_ctor_3.f90: Likewise.\n\t* gfortran.dg/bounds_check_array_ctor_7.f90: Likewise.\n\t* gfortran.dg/used_types_16.f90: Likewise.\n\t* gfortran.dg/assumed_rank_bounds_1.f90: Likewise.\n\t* gfortran.dg/bounds_check_array_ctor_1.f90: Likewise.\n\t* gfortran.dg/assumed_rank_bounds_2.f90: Likewise.\n\t* gfortran.dg/bounds_check_array_ctor_4.f90: Likewise.\n\t* gfortran.dg/abstract_type_6.f03: Likewise.\n\t* gfortran.dg/bounds_check_array_ctor_5.f90: Likewise.\n\t* gfortran.dg/used_types_15.f90: Likewise.\n\t* gfortran.dg/bounds_check_array_ctor_8.f90: Likewise.\n\t* gfortran.dg/exit_3.f08: Likewise.\n\t* gfortran.dg/open_status_2.f90: Likewise.\n\t* gfortran.dg/derived_pointer_recursion_2.f90: Likewise.\n\t* gfortran.dg/intrinsic_std_1.f90: Likewise.\n\t* gfortran.dg/associate_1.f03: Likewise.\n\t* gfortran.dg/bounds_check_array_ctor_2.f90: Likewise.\n\t* gfortran.dg/intrinsic_std_6.f90: Likewise.\n\t* gfortran.dg/bounds_check_array_ctor_6.f90: Likewise.\n\t* gcc.dg/builtin-object-size-1.c: Likewise.\n\t* gcc.dg/noreturn-6.c: Likewise.\n\t* gcc.dg/builtin-stringop-chk-1.c: Likewise.\n\t* gcc.dg/globalalias.c: Likewise.\n\t* gcc.dg/builtins-config.h: Likewise.\n\t* gcc.dg/pr30457.c: Likewise.\n\t* gcc.c-torture/compile/volatile-1.c: Likewise.\n\t* gcc.c-torture/execute/20101011-1.c: Likewise.\n\t* c-c++-common/Waddress-1.c: Likewise.\n\nFrom-SVN: r233358", "tree": {"sha": "cde01d417194bbc82c2a04436bcde13a70a10e41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cde01d417194bbc82c2a04436bcde13a70a10e41"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c58255170517b1b677ab0fac5cff46cc27c1dbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c58255170517b1b677ab0fac5cff46cc27c1dbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c58255170517b1b677ab0fac5cff46cc27c1dbd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c58255170517b1b677ab0fac5cff46cc27c1dbd/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "66756373c1940650568173b6d9c32325429bfc34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66756373c1940650568173b6d9c32325429bfc34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66756373c1940650568173b6d9c32325429bfc34"}], "stats": {"total": 474, "additions": 310, "deletions": 164}, "files": [{"sha": "a3b18ae1e424bd276adc92cd11e8478c4b34ab50", "filename": "gcc/ChangeLog", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -1,3 +1,56 @@\n+2016-02-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* cgraph.c: Spelling fixes - behaviour -> behavior and\n+\tneighbour -> neighbor.\n+\t* target.def: Likewise.\n+\t* sel-sched.c: Likewise.\n+\t* config/mips/mips.c: Likewise.\n+\t* config/arc/arc.md: Likewise.\n+\t* config/arm/cortex-a57.md: Likewise.\n+\t* config/arm/arm.c: Likewise.\n+\t* config/arm/neon.md: Likewise.\n+\t* config/arm/arm-c.c: Likewise.\n+\t* config/vms/vms-c.c: Likewise.\n+\t* config/s390/s390.c: Likewise.\n+\t* config/i386/znver1.md: Likewise.\n+\t* config/i386/i386.c: Likewise.\n+\t* config/ia64/hpux-unix2003.h: Likewise.\n+\t* config/msp430/msp430.md: Likewise.\n+\t* config/rx/rx.c: Likewise.\n+\t* config/rx/rx.md: Likewise.\n+\t* config/aarch64/aarch64-simd.md: Likewise.\n+\t* config/aarch64/aarch64.c: Likewise.\n+\t* config/nvptx/nvptx.c: Likewise.\n+\t* config/bfin/bfin.c: Likewise.\n+\t* config/cris/cris.opt: Likewise.\n+\t* config/rs6000/rs6000.c: Likewise.\n+\t* target.h: Likewise.\n+\t* spellcheck.c: Likewise.\n+\t* ira-build.c: Likewise.\n+\t* tree-inline.c: Likewise.\n+\t* builtins.c: Likewise.\n+\t* lra-constraints.c: Likewise.\n+\t* explow.c: Likewise.\n+\t* hwint.h: Likewise.\n+\t* targhooks.c: Likewise.\n+\t* tree-vect-data-refs.c: Likewise.\n+\t* expr.c: Likewise.\n+\t* doc/tm.texi: Likewise.\n+\t* doc/extend.texi: Likewise.\n+\t* doc/install.texi: Likewise.\n+\t* doc/md.texi: Likewise.\n+\t* tree-ssa-tail-merge.c: Likewise.\n+\t* sched-int.h: Likewise.\n+\t* match.pd: Likewise.\n+\t* sched-ebb.c: Likewise.\n+\t* target.def (omit_struct_return_reg): Likewise.\n+\t* gimple-ssa-isolate-paths.c: Likewise.\n+\t(find_implicit_erroneous_behaviour): Renamed to...\n+\t(find_implicit_erroneous_behavior): ... this.\n+\t(find_explicit_erroneous_behaviour): Renamed to...\n+\t(find_explicit_erroneous_behavior): ... this.\n+\t(gimple_ssa_isolate_erroneous_paths): Adjust caller.\n+\n 2016-02-11  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \tPR rtl-optimization/64682"}, {"sha": "ec6a8c464b20fd10d75e8a37d7c89ff380150e37", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -1,3 +1,19 @@\n+2016-02-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* prj-tree.ads: Spelling fixes - behaviour -> behavior and\n+\tneighbour -> neighbor.\n+\t* prep.adb: Likewise.\n+\t* prj.ads: Likewise.\n+\t* prepcomp.adb: Likewise.\n+\t* g-socket.ads: Likewise.\n+\t* s-imgrea.adb: Likewise.\n+\t* a-calend.adb: Likewise.\n+\t* exp_disp.adb: Likewise.\n+\t* doc/gnat_ugn/gnat_utility_programs.rst: Likewise.\n+\t* g-socket.adb: Likewise.\n+\t* sem_ch12.adb: Likewise.\n+\t* terminals.c: Likewise.\n+\n 2016-02-08  Bernd Schmidt  <bschmidt@redhat.com>\n \n \t* gcc-interface/misc.c (gnat_init): Remove second argument in call to"}, {"sha": "9fcc2996702c3007b8be9eb705673e208f441d95", "filename": "gcc/ada/a-calend.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fada%2Fa-calend.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fada%2Fa-calend.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-calend.adb?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -63,7 +63,7 @@ package body Ada.Calendar is\n    --        procedure Split (9 or 10 parameters) -+\n    --     end Ada.Calendar.Formatting\n \n-   --  The behaviour of the interfacing routines is controlled via various\n+   --  The behavior of the interfacing routines is controlled via various\n    --  flags. All new Ada 2005 types from children of Ada.Calendar are\n    --  emulated by a similar type. For instance, type Day_Number is replaced\n    --  by Integer in various routines. One ramification of this model is that"}, {"sha": "2ee90d3dc9f7a2f76293f527eb589f405c99c5df", "filename": "gcc/ada/doc/gnat_ugn/gnat_utility_programs.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_utility_programs.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_utility_programs.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_utility_programs.rst?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -4527,7 +4527,7 @@ Alternatively, you may run the script using the following command line:\n        ``--additional-tests`` switch.\n \n   * ``Skeletons_Default``\n-       is used to specify the default behaviour of test skeletons, otherwise\n+       is used to specify the default behavior of test skeletons, otherwise\n        specified by ``--skeleton-default`` option. The value of this attribute\n        should be either ``pass`` or ``fail``.\n "}, {"sha": "578f000bd77ae6e2bcc1a67e562369d020528850", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -2668,7 +2668,7 @@ package body Exp_Disp is\n             --    F := not Cancelled (Bnn);\n \n             --  where F is the success flag. The status of Cancelled is negated\n-            --  in order to match the behaviour of the version for task types.\n+            --  in order to match the behavior of the version for task types.\n \n             Append_To (Stmts,\n               Make_Assignment_Statement (Loc,"}, {"sha": "59430081c2cb0705b9100a86fe47f108279bee96", "filename": "gcc/ada/g-socket.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fada%2Fg-socket.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fada%2Fg-socket.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socket.adb?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -481,7 +481,7 @@ package body GNAT.Sockets is\n          return;\n \n       --  On other platforms, fd_set is an FD_SETSIZE bitmap: check\n-      --  that Fd is within range (otherwise behaviour is undefined).\n+      --  that Fd is within range (otherwise behavior is undefined).\n \n       elsif Fd < 0 or else Fd >= SOSC.FD_SETSIZE then\n          raise Constraint_Error"}, {"sha": "ff293decd018d1c6706e7eda57b708cbc208aa69", "filename": "gcc/ada/g-socket.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fada%2Fg-socket.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fada%2Fg-socket.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socket.ads?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -1066,10 +1066,10 @@ package GNAT.Sockets is\n    --  blocks until an event occurs. On some platforms, the select(2) system\n    --  can block the full process (not just the calling thread).\n    --\n-   --  Check_Selector provides the very same behaviour. The only difference is\n+   --  Check_Selector provides the very same behavior. The only difference is\n    --  that it does not watch for exception events. Note that on some platforms\n    --  it is kept process blocking on purpose. The timeout parameter allows the\n-   --  user to have the behaviour he wants. Abort_Selector allows the safe\n+   --  user to have the behavior he wants. Abort_Selector allows the safe\n    --  abort of a blocked Check_Selector call. A special socket is opened by\n    --  Create_Selector and included in each call to Check_Selector.\n    --"}, {"sha": "d5672bafb9d96a91ba50dd4f62c19676a131e65d", "filename": "gcc/ada/prep.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fada%2Fprep.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fada%2Fprep.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprep.adb?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -120,9 +120,9 @@ package body Prep is\n    String_False : String_Id;\n    --  \"false\", as a string_id\n \n-   ---------------\n-   -- Behaviour --\n-   ---------------\n+   --------------\n+   -- Behavior --\n+   --------------\n \n    --  Accesses to procedure specified by procedure Initialize\n "}, {"sha": "549d7f87ba92facd0624b65bf296c3b3e57fc0df", "filename": "gcc/ada/prepcomp.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fada%2Fprepcomp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fada%2Fprepcomp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprepcomp.adb?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -661,7 +661,7 @@ package body Prepcomp is\n             Scn.Scanner.Initialize_Scanner (Deffile);\n             Prep.Parse_Def_File;\n \n-            --  Reset the behaviour of the scanner to the default\n+            --  Reset the behavior of the scanner to the default\n \n             Scn.Scanner.Set_End_Of_Line_As_Token (False);\n "}, {"sha": "a36e9f919d56016be3efad3b2fa174e3fdbe86ee", "filename": "gcc/ada/prj-tree.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fada%2Fprj-tree.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fada%2Fprj-tree.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-tree.ads?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -260,7 +260,7 @@ package Prj.Tree is\n    --  For each function the condition of validity is specified. If an access\n    --  function is called with invalid arguments, then exception\n    --  Assertion_Error is raised if assertions are enabled, otherwise the\n-   --  behaviour is not defined and may result in a crash.\n+   --  behavior is not defined and may result in a crash.\n \n    function Name_Of\n      (Node    : Project_Node_Id;\n@@ -733,7 +733,7 @@ package Prj.Tree is\n    --  Foe each Set_* procedure the condition of validity is specified. If an\n    --  access function is called with invalid arguments, then exception\n    --  Assertion_Error is raised if assertions are enabled, otherwise the\n-   --  behaviour is not defined and may result in a crash.\n+   --  behavior is not defined and may result in a crash.\n \n    --  These are very low-level, and manipulate the tree itself directly. You\n    --  should look at the Create_* procedure instead if you want to use higher"}, {"sha": "2b20f6ad10d498374fabbd4d0acf19e9937d979d", "filename": "gcc/ada/prj.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fada%2Fprj.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fada%2Fprj.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj.ads?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -1828,7 +1828,7 @@ package Prj is\n    --  Severity of some situations, such as: no Ada sources in a project where\n    --  Ada is one of the language.\n    --\n-   --  When the situation occurs, the behaviour depends on the setting:\n+   --  When the situation occurs, the behavior depends on the setting:\n    --\n    --    - Silent:  no action\n    --    - Warning: issue a warning, does not cause the tool to fail"}, {"sha": "3847c54d234db5e3aca0d2a21af83ac67e608915", "filename": "gcc/ada/s-imgrea.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fada%2Fs-imgrea.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fada%2Fs-imgrea.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imgrea.adb?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -482,7 +482,7 @@ package body System.Img_Real is\n          --  an invalid bit pattern resulting from erroneous execution\n          --  (caused by using uninitialized variables for example).\n \n-         --  No matter what, we'll at least get reasonable behaviour,\n+         --  No matter what, we'll at least get reasonable behavior,\n          --  converting to infinity or some other value, or causing an\n          --  exception to be raised is fine.\n "}, {"sha": "8fdd7006599bf260d82f8c936af77c1597d8c746", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -7969,7 +7969,7 @@ package body Sem_Ch12 is\n       end if;\n \n       --  At this point either both nodes came from source or we approximated\n-      --  their source locations through neighbouring source statements.\n+      --  their source locations through neighboring source statements.\n \n       T1 := Top_Level_Location (Sloc (P1));\n       T2 := Top_Level_Location (Sloc (P2));"}, {"sha": "d72eb098850a916eeb6b3f181a48fdce4cc671ff", "filename": "gcc/ada/terminals.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fada%2Fterminals.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fada%2Fterminals.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fterminals.c?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -170,7 +170,7 @@ static int Vw32_start_process_inherit_error_mode = 1;\n \n /* Control whether spawnve quotes arguments as necessary to ensure\n    correct parsing by child process.  Because not all uses of spawnve\n-   are careful about constructing argv arrays, we make this behaviour\n+   are careful about constructing argv arrays, we make this behavior\n    conditional (off by default, since a similar operation is already done\n    in g-expect.adb by calling Normalize_Argument). */\n static int Vw32_quote_process_args = 0;"}, {"sha": "058ecc39aab205099713e503861103ce6ba5ee6d", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -8908,7 +8908,7 @@ fold_builtin_next_arg (tree exp, bool va_start_p)\n \t{\n \t  warning_at (current_location,\n \t\t      OPT_Wvarargs,\n-\t\t      \"undefined behaviour when second parameter of \"\n+\t\t      \"undefined behavior when second parameter of \"\n \t\t      \"%<va_start%> is declared with %<register%> storage\");\n \t}\n "}, {"sha": "77273139369d3e81896b5cf8ff8751c1b4a6f9f9", "filename": "gcc/cgraph.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -2220,7 +2220,7 @@ cgraph_node::get_availability (void)\n     avail = AVAIL_AVAILABLE;\n   /* Inline functions are safe to be analyzed even if their symbol can\n      be overwritten at runtime.  It is not meaningful to enforce any sane\n-     behaviour on replacing inline function by different body.  */\n+     behavior on replacing inline function by different body.  */\n   else if (DECL_DECLARED_INLINE_P (decl))\n     avail = AVAIL_AVAILABLE;\n \n@@ -2784,7 +2784,7 @@ cgraph_edge::verify_corresponds_to_fndecl (tree decl)\n   node = node->ultimate_alias_target ();\n \n   /* Optimizers can redirect unreachable calls or calls triggering undefined\n-     behaviour to builtin_unreachable.  */\n+     behavior to builtin_unreachable.  */\n   if (DECL_BUILT_IN_CLASS (callee->decl) == BUILT_IN_NORMAL\n       && DECL_FUNCTION_CODE (callee->decl) == BUILT_IN_UNREACHABLE)\n     return false;"}, {"sha": "304784153115357505ca3fb3478f3ebb04b6701d", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -1785,7 +1785,7 @@\n ;; the lower architectural lanes of the vector, for these patterns we want\n ;; to always treat \"hi\" as referring to the higher architectural lanes.\n ;; Consequently, while the patterns below look inconsistent with our\n-;; other big-endian patterns their behaviour is as required.\n+;; other big-endian patterns their behavior is as required.\n \n (define_expand \"vec_unpacks_lo_<mode>\"\n   [(match_operand:<VWIDE> 0 \"register_operand\" \"\")"}, {"sha": "8326a4c13abb9416c1bd4eecf52d3ee6b9cdcacb", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -8632,14 +8632,14 @@ enum aarch64_attr_opt_type\n \n /* All the information needed to handle a target attribute.\n    NAME is the name of the attribute.\n-   ATTR_TYPE specifies the type of behaviour of the attribute as described\n+   ATTR_TYPE specifies the type of behavior of the attribute as described\n    in the definition of enum aarch64_attr_opt_type.\n    ALLOW_NEG is true if the attribute supports a \"no-\" form.\n    HANDLER is the function that takes the attribute string and whether\n    it is a pragma or attribute and handles the option.  It is needed only\n    when the ATTR_TYPE is aarch64_attr_custom.\n    OPT_NUM is the enum specifying the option that the attribute modifies.\n-   This is needed for attributes that mirror the behaviour of a command-line\n+   This is needed for attributes that mirror the behavior of a command-line\n    option, that is it has ATTR_TYPE aarch64_attr_mask, aarch64_attr_bool or\n    aarch64_attr_enum.  */\n "}, {"sha": "6a8ec83b2863f3d7f4d75335fc8895ce1f9978a8", "filename": "gcc/config/arc/arc.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fconfig%2Farc%2Farc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fconfig%2Farc%2Farc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.md?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -4721,7 +4721,7 @@\n  ;; Comment in final.c (insn_current_reference_address) says\n  ;; forward branch addresses are calculated from the next insn after branch\n  ;; and for backward branches, it is calculated from the branch insn start.\n- ;; The shortening logic here is tuned to accomodate this behaviour\n+ ;; The shortening logic here is tuned to accomodate this behavior\n ;; ??? This should be grokked by the ccfsm machinery.\n (define_insn \"cbranchsi4_scratch\"\n   [(set (pc)"}, {"sha": "982a606ece174180caa5f616c62a4b3d6473abdf", "filename": "gcc/config/arm/arm-c.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fconfig%2Farm%2Farm-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fconfig%2Farm%2Farm-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-c.c?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -164,7 +164,7 @@ arm_cpu_builtins (struct cpp_reader* pfile)\n   if (arm_arch_iwmmxt2)\n     builtin_define (\"__IWMMXT2__\");\n   /* ARMv6KZ was originally identified as the misspelled __ARM_ARCH_6ZK__.  To\n-     preserve the existing behaviour, the misspelled feature macro must still be\n+     preserve the existing behavior, the misspelled feature macro must still be\n      defined.  */\n   if (arm_arch6kz)\n     builtin_define (\"__ARM_ARCH_6ZK__\");"}, {"sha": "6b737714d5e09f0ce92cf85c342bf88f59d95dbf", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -28899,7 +28899,7 @@ arm_emit_coreregs_64bit_shift (enum rtx_code code, rtx out, rtx in,\n \t shift-by-register would give.  This helps reduce execution\n \t differences between optimization levels, but it won't stop other\n          parts of the compiler doing different things.  This is \"undefined\n-         behaviour, in any case.  */\n+         behavior, in any case.  */\n       if (INTVAL (amount) <= 0)\n \temit_insn (gen_movdi (out, in));\n       else if (INTVAL (amount) >= 64)"}, {"sha": "ca6cfc029a256109c97d11fc63f34316f96921e8", "filename": "gcc/config/arm/cortex-a57.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fconfig%2Farm%2Fcortex-a57.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fconfig%2Farm%2Fcortex-a57.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcortex-a57.md?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -324,7 +324,7 @@\n    \"ca57_mx\")\n \n ;; All multiplies\n-;; TODO: AArch32 and AArch64 have different behaviour\n+;; TODO: AArch32 and AArch64 have different behavior\n (define_insn_reservation \"cortex_a57_mult32\" 3\n   (and (eq_attr \"tune\" \"cortexa57\")\n        (ior (eq_attr \"mul32\" \"yes\")"}, {"sha": "879c07c13b6aa20c46828d08f5a4f413a5722eca", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -1836,7 +1836,7 @@\n ; particular, denormal values are flushed to zero.  This means that GCC cannot\n ; use those instructions for autovectorization, etc. unless\n ; -funsafe-math-optimizations is in effect (in which case flush-to-zero\n-; behaviour is permissible).  Intrinsic operations (provided by the arm_neon.h\n+; behavior is permissible).  Intrinsic operations (provided by the arm_neon.h\n ; header) must work in either case: if -funsafe-math-optimizations is given,\n ; intrinsics expand to \"canonical\" RTL where possible, otherwise intrinsics\n ; expand to unspecs (which may potentially limit the extent to which they might"}, {"sha": "75ddcf0472522e31e8ca55e21995ca4de638a97a", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -4092,7 +4092,7 @@ reorder_var_tracking_notes (void)\n }\n \f\n /* On some silicon revisions, functions shorter than a certain number of cycles\n-   can cause unpredictable behaviour.  Work around this by adding NOPs as\n+   can cause unpredictable behavior.  Work around this by adding NOPs as\n    needed.  */\n static void\n workaround_rts_anomaly (void)"}, {"sha": "1b663eb1540bcf8b2f300293378b83af68c91630", "filename": "gcc/config/cris/cris.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fconfig%2Fcris%2Fcris.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fconfig%2Fcris%2Fcris.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.opt?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -21,7 +21,7 @@\n ; TARGET_MUL_BUG: Whether or not to work around multiplication\n ; instruction hardware bug when generating code for models where\n ; it may be present.  From the trouble report for Etrax 100 LX:\n-; \"A multiply operation may cause incorrect cache behaviour\n+; \"A multiply operation may cause incorrect cache behavior\n ; under some specific circumstances. The problem can occur if\n ; the instruction following the multiply instruction causes a\n ; cache miss, and multiply operand 1 (source operand) bits"}, {"sha": "a1c87ab31269e8a2ba74a3edee342fa02d86f9df", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -19705,7 +19705,7 @@ distance_non_agu_define_in_bb (unsigned int regno1, unsigned int regno2,\n /* Search backward for non-agu definition of register number REGNO1\n    or register number REGNO2 in INSN's basic block until\n    1. Pass LEA_SEARCH_THRESHOLD instructions, or\n-   2. Reach neighbour BBs boundary, or\n+   2. Reach neighbor BBs boundary, or\n    3. Reach agu definition.\n    Returns the distance between the non-agu definition point and INSN.\n    If no definition point, returns -1.  */"}, {"sha": "6e231889430ddb49446242a563f8340b89cf420b", "filename": "gcc/config/i386/znver1.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fconfig%2Fi386%2Fznver1.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fconfig%2Fi386%2Fznver1.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fznver1.md?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -40,7 +40,7 @@\n ;; Direct instructions can be issued to any of the four decoders.\n (define_reservation \"znver1-direct\" \"znver1-decode0|znver1-decode1|znver1-decode2|znver1-decode3\")\n \n-;; Fix me: Need to revisit this later to simulate fast path double behaviour.\n+;; Fix me: Need to revisit this later to simulate fast path double behavior.\n (define_reservation \"znver1-double\" \"znver1-direct\")\n \n "}, {"sha": "0997723092ca90a2077ebaa7e0b91eaf86d93a06", "filename": "gcc/config/ia64/hpux-unix2003.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fconfig%2Fia64%2Fhpux-unix2003.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fconfig%2Fia64%2Fhpux-unix2003.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fhpux-unix2003.h?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -1,6 +1,6 @@\n \n /* For HP-UX 11.31 and greater, use unix2003.o instead of unix98.o to\n-   get correct C99 snprintf behaviour with buffer overflow.  */\n+   get correct C99 snprintf behavior with buffer overflow.  */\n \n #undef STARTFILE_SPEC\n #define STARTFILE_SPEC \"%{!shared:%{static:crt0%O%s} \\"}, {"sha": "5af3d1e6505d23c856cde896d475f280993e9276", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -13519,7 +13519,7 @@ mips_process_sync_loop (rtx_insn *insn, rtx *operands)\n   /* When using branch likely (-mfix-r10000), the delay slot instruction\n      will be annulled on false.  The normal delay slot instructions\n      calculate the overall result of the atomic operation and must not\n-     be annulled.  To ensure this behaviour unconditionally use a NOP\n+     be annulled.  To ensure this behavior unconditionally use a NOP\n      in the delay slot for the branch likely case.  */\n \n   if (TARGET_CB_MAYBE)\n@@ -19121,7 +19121,7 @@ void mips_function_profiler (FILE *file)\n }\n \n /* Implement TARGET_SHIFT_TRUNCATION_MASK.  We want to keep the default\n-   behaviour of TARGET_SHIFT_TRUNCATION_MASK for non-vector modes even\n+   behavior of TARGET_SHIFT_TRUNCATION_MASK for non-vector modes even\n    when TARGET_LOONGSON_VECTORS is true.  */\n \n static unsigned HOST_WIDE_INT"}, {"sha": "4df49708adb19a893ab7163170b5760cc0c5a81a", "filename": "gcc/config/msp430/msp430.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fconfig%2Fmsp430%2Fmsp430.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fconfig%2Fmsp430%2Fmsp430.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.md?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -738,7 +738,7 @@\n ;;\n ;; Note - we ignore shift counts of less than one or more than 15.\n ;; This is permitted by the ISO C99 standard as such shifts result\n-;; in \"undefined\" behaviour.  [6.5.7 (3)]\n+;; in \"undefined\" behavior.  [6.5.7 (3)]\n \n ;; signed A << C\n "}, {"sha": "a955c041aedc151db8870d4e5d27397e419562f3", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -600,7 +600,7 @@ write_arg_mode (std::stringstream &s, int for_reg, int argno,\n    is true, if this is a prototyped function, rather than an old-style\n    C declaration.  Returns the next argument number to use.\n \n-   The promotion behaviour here must match the regular GCC function\n+   The promotion behavior here must match the regular GCC function\n    parameter marshalling machinery.  */\n \n static int\n@@ -652,7 +652,7 @@ write_return_mode (std::stringstream &s, bool for_proto, machine_mode mode)\n \n /* Process a function return TYPE to emit a PTX return as a prototype\n    or function prologue declaration.  Returns true if return is via an\n-   additional pointer parameter.  The promotion behaviour here must\n+   additional pointer parameter.  The promotion behavior here must\n    match the regular GCC function return mashalling.  */\n \n static bool\n@@ -1620,7 +1620,7 @@ nvptx_assemble_decl_begin (FILE *file, const char *name, const char *section,\n   elt_size &= -elt_size; /* Extract LSB set.  */\n \n   init_frag.size = elt_size;\n-  /* Avoid undefined shift behaviour by using '2'.  */\n+  /* Avoid undefined shift behavior by using '2'.  */\n   init_frag.mask = ((unsigned HOST_WIDE_INT)2\n \t\t    << (elt_size * BITS_PER_UNIT - 1)) - 1;\n   init_frag.val = 0;"}, {"sha": "eed50f43571d93be7da217529831eb2a5923fa90", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -26060,7 +26060,7 @@ rs6000_emit_prologue (void)\n      because code emitted by gcc for a (non-pointer) function call\n      doesn't save and restore R2.  Instead, R2 is managed out-of-line\n      by a linker generated plt call stub when the function resides in\n-     a shared library.  This behaviour is costly to describe in DWARF,\n+     a shared library.  This behavior is costly to describe in DWARF,\n      both in terms of the size of DWARF info and the time taken in the\n      unwinder to interpret it.  R2 changes, apart from the\n      calls_eh_return case earlier in this function, are handled by"}, {"sha": "88cf18cf7b4c5cc134a8d36b03347c229014a18d", "filename": "gcc/config/rx/rx.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fconfig%2Frx%2Frx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fconfig%2Frx%2Frx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.c?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -2884,7 +2884,7 @@ rx_file_start (void)\n static bool\n rx_is_ms_bitfield_layout (const_tree record_type ATTRIBUTE_UNUSED)\n {\n-  /* The packed attribute overrides the MS behaviour.  */\n+  /* The packed attribute overrides the MS behavior.  */\n   return ! TYPE_PACKED (record_type);\n }\n \f"}, {"sha": "787c37bc96792a831f39ab68685640990af61d85", "filename": "gcc/config/rx/rx.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fconfig%2Frx%2Frx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fconfig%2Frx%2Frx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.md?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -408,7 +408,7 @@\n ;; Note - the following set of patterns do not use the \"memory_operand\"\n ;; predicate or an \"m\" constraint because we do not allow symbol_refs\n ;; or label_refs as legitimate memory addresses.  This matches the\n-;; behaviour of most of the RX instructions.  Only the call/branch\n+;; behavior of most of the RX instructions.  Only the call/branch\n ;; instructions are allowed to refer to symbols/labels directly.\n ;; The call operands are in QImode because that is the value of\n ;; FUNCTION_MODE"}, {"sha": "9facd96fa2a9a83af6575702d108c569d602bf3c", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -13603,7 +13603,7 @@ s390_sched_init (FILE *file ATTRIBUTE_UNUSED,\n    The loop is analyzed for memory accesses by calling check_dpu for\n    each rtx of the loop. Depending on the loop_depth and the amount of\n    memory accesses a new number <=nunroll is returned to improve the\n-   behaviour of the hardware prefetch unit.  */\n+   behavior of the hardware prefetch unit.  */\n static unsigned\n s390_loop_unroll_adjust (unsigned nunroll, struct loop *loop)\n {"}, {"sha": "392b2db877809d13ca155f7177b9e2cdda56cce5", "filename": "gcc/config/vms/vms-c.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fconfig%2Fvms%2Fvms-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fconfig%2Fvms%2Fvms-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvms%2Fvms-c.c?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -151,7 +151,7 @@ vms_pragma_nomember_alignment (cpp_reader *pfile ATTRIBUTE_UNUSED)\n    1) extern int name;\n    2) int name;\n    3) int name = 5;\n-   See below for the behaviour as implemented by the native compiler.\n+   See below for the behavior as implemented by the native compiler.\n */\n \n enum extern_model_kind"}, {"sha": "9e03f1884492468d3da6396f3a27ac64176c27e1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -1,3 +1,12 @@\n+2016-02-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* error.c: Spelling fixes - behaviour -> behavior and\n+\tneighbour -> neighbor.\n+\t* decl.c: Likewise.\n+\t* typeck.c (cp_build_binary_op): Fix up behavior spelling in\n+\tdiagnostics.\n+\t* init.c (build_delete): Likewise.\n+\n 2016-02-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/69768"}, {"sha": "30eef5ca664bc3dfb55a51b3f061ba87dedf06d6", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -15036,7 +15036,7 @@ cxx_maybe_build_cleanup (tree decl, tsubst_flags_t complain)\n   /* build_delete sets the location of the destructor call to the\n      current location, even though the destructor is going to be\n      called later, at the end of the current scope.  This can lead to\n-     a \"jumpy\" behaviour for users of debuggers when they step around\n+     a \"jumpy\" behavior for users of debuggers when they step around\n      the end of the block.  So let's unset the location of the\n      destructor call instead.  */\n   protected_set_expr_location (cleanup, UNKNOWN_LOCATION);"}, {"sha": "aa5fd411b28f97930e54e5688f1c2e92e99b40cc", "filename": "gcc/cp/error.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -2844,7 +2844,7 @@ decl_as_dwarf_string (tree decl, int flags)\n {\n   const char *name;\n   /* Curiously, reinit_cxx_pp doesn't reset the flags field, so setting the flag\n-     here will be adequate to get the desired behaviour.  */\n+     here will be adequate to get the desired behavior.  */\n   cxx_pp->flags |= pp_c_flag_gnu_v3;\n   name = decl_as_string (decl, flags);\n   /* Subsequent calls to the pretty printer shouldn't use this style.  */\n@@ -2876,7 +2876,7 @@ lang_decl_dwarf_name (tree decl, int v, bool translate)\n {\n   const char *name;\n   /* Curiously, reinit_cxx_pp doesn't reset the flags field, so setting the flag\n-     here will be adequate to get the desired behaviour.  */\n+     here will be adequate to get the desired behavior.  */\n   cxx_pp->flags |= pp_c_flag_gnu_v3;\n   name = lang_decl_name (decl, v, translate);\n   /* Subsequent calls to the pretty printer shouldn't use this style.  */"}, {"sha": "f6ceb7f431fcc08bdab1a5c949f49973f56df679", "filename": "gcc/cp/init.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -4390,12 +4390,12 @@ build_delete (tree otype, tree addr, special_function_kind auto_delete,\n \t\t    warning (OPT_Wdelete_non_virtual_dtor,\n \t\t\t     \"deleting object of abstract class type %qT\"\n \t\t\t     \" which has non-virtual destructor\"\n-\t\t\t     \" will cause undefined behaviour\", type);\n+\t\t\t     \" will cause undefined behavior\", type);\n \t\t  else\n \t\t    warning (OPT_Wdelete_non_virtual_dtor,\n \t\t\t     \"deleting object of polymorphic class type %qT\"\n \t\t\t     \" which has non-virtual destructor\"\n-\t\t\t     \" might cause undefined behaviour\", type);\n+\t\t\t     \" might cause undefined behavior\", type);\n \t\t}\n \t    }\n \t}"}, {"sha": "1ffb1355f76fbabda3bd6c5f9455f00101b75f77", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -4492,7 +4492,7 @@ cp_build_binary_op (location_t location,\n \t      || (TREE_CODE (orig_op1) == STRING_CST\n \t\t  && !integer_zerop (cp_fully_fold (op0)))))\n \twarning (OPT_Waddress, \"comparison with string literal results \"\n-\t\t\t       \"in unspecified behaviour\");\n+\t\t\t       \"in unspecified behavior\");\n \n       build_type = boolean_type_node;\n       if ((code0 == INTEGER_TYPE || code0 == REAL_TYPE\n@@ -4793,7 +4793,8 @@ cp_build_binary_op (location_t location,\n \t  || TREE_CODE (orig_op1) == STRING_CST)\n \t{\n \t  if (complain & tf_warning)\n-\t    warning (OPT_Waddress, \"comparison with string literal results in unspecified behaviour\");\n+\t    warning (OPT_Waddress, \"comparison with string literal results \"\n+\t\t\t\t   \"in unspecified behavior\");\n \t}\n \n       if (code0 == VECTOR_TYPE && code1 == VECTOR_TYPE)"}, {"sha": "78017fe41c2e415d0133bc3e09fd6670ffbeeaf3", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -4336,7 +4336,7 @@ interrupt controller (EIC) mode is in use, this can be explicitly set using\n Priority Level (IPL) is copied to the current IPL which has the effect of only\n enabling higher priority interrupts.  To use vectored interrupt mode use\n the argument @code{vector=[sw0|sw1|hw0|hw1|hw2|hw3|hw4|hw5]}, this will change\n-the behaviour of the non-masked interrupt support and GCC will arrange to mask\n+the behavior of the non-masked interrupt support and GCC will arrange to mask\n all interrupts from sw0 up to and including the specified interrupt vector.\n \n You can use the following attributes to modify the behavior"}, {"sha": "41553709c3d8a731f40b31915c8ae360409381ce", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -1549,7 +1549,7 @@ see ``RS/6000 and PowerPC Options'' in the main manual.\n @option{--with-aix-soname} is currently supported by @samp{libgcc_s} only, so\n this option is still experimental and not for normal use yet.\n \n-Default is the traditional behaviour @option{--with-aix-soname=@samp{aix}}.\n+Default is the traditional behavior @option{--with-aix-soname=@samp{aix}}.\n \n @item --enable-languages=@var{lang1},@var{lang2},@dots{}\n Specify that only a particular subset of compilers and"}, {"sha": "f9ecfceedb02c794cad56ba876e12feb42ee34c8", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -9426,7 +9426,7 @@ nondeterministic treatment means trying all alternatives, some of them\n may be rejected by reservations in the subsequent insns.\n \n @item\n-@dfn{collapse-ndfa} modifies the behaviour of the generator when\n+@dfn{collapse-ndfa} modifies the behavior of the generator when\n producing an automaton.  An additional state transition to collapse a\n nondeterministic @acronym{NDFA} state to a deterministic @acronym{DFA}\n state is generated.  It can be triggered by passing @code{const0_rtx} to"}, {"sha": "8b3bccda9673c1f8ae31fb7ff431f2b935d58bc3", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -4422,7 +4422,7 @@ saving and restoring an arbitrary return value.\n Normally, when a function returns a structure by memory, the address\n is passed as an invisible pointer argument, but the compiler also\n arranges to return the address from the function like it would a normal\n-pointer return value.  Define this to true if that behaviour is\n+pointer return value.  Define this to true if that behavior is\n undesirable on your target.\n @end deftypevr\n "}, {"sha": "cd7c56813f30e7734b31f6597d7fb4a9f45a3dfc", "filename": "gcc/explow.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -875,7 +875,7 @@ promote_ssa_mode (const_tree name, int *punsignedp)\n \n \n \f\n-/* Controls the behaviour of {anti_,}adjust_stack.  */\n+/* Controls the behavior of {anti_,}adjust_stack.  */\n static bool suppress_reg_args_size;\n \n /* A helper for adjust_stack and anti_adjust_stack.  */"}, {"sha": "29e9356a31e804610e77f01f52c3be2c4a015295", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -8238,7 +8238,7 @@ expand_expr_real_2 (sepops ops, rtx target, machine_mode tmode,\n         else\n           {\n \t    /* For disjoint address spaces, converting anything but a null\n-\t       pointer invokes undefined behaviour.  We truncate or extend the\n+\t       pointer invokes undefined behavior.  We truncate or extend the\n \t       value as if we'd converted via integers, which handles 0 as\n \t       required, and all others as the programmer likely expects.  */\n #ifndef POINTERS_EXTEND_UNSIGNED"}, {"sha": "bee3f9a4b3eeee616750220b98cf4ed353fa9fcf", "filename": "gcc/gimple-ssa-isolate-paths.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fgimple-ssa-isolate-paths.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fgimple-ssa-isolate-paths.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-isolate-paths.c?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -114,9 +114,9 @@ insert_trap (gimple_stmt_iterator *si_p, tree op)\n   *si_p = gsi_for_stmt (stmt);\n }\n \n-/* BB when reached via incoming edge E will exhibit undefined behaviour\n+/* BB when reached via incoming edge E will exhibit undefined behavior\n    at STMT.  Isolate and optimize the path which exhibits undefined\n-   behaviour.\n+   behavior.\n \n    Isolation is simple.  Duplicate BB and redirect E to BB'.\n \n@@ -156,14 +156,14 @@ isolate_path (basic_block bb, basic_block duplicate,\n \n \n   /* There may be more than one statement in DUPLICATE which exhibits\n-     undefined behaviour.  Ultimately we want the first such statement in\n+     undefined behavior.  Ultimately we want the first such statement in\n      DUPLCIATE so that we're able to delete as much code as possible.\n \n-     So each time we discover undefined behaviour in DUPLICATE, search for\n-     the statement which triggers undefined behaviour.  If found, then\n+     So each time we discover undefined behavior in DUPLICATE, search for\n+     the statement which triggers undefined behavior.  If found, then\n      transform the statement into a trap and delete everything after the\n      statement.  If not found, then this particular instance was subsumed by\n-     an earlier instance of undefined behaviour and there's nothing to do.\n+     an earlier instance of undefined behavior and there's nothing to do.\n \n      This is made more complicated by the fact that we have STMT, which is in\n      BB rather than in DUPLICATE.  So we set up two iterators, one for each\n@@ -215,7 +215,7 @@ isolate_path (basic_block bb, basic_block duplicate,\n    When found isolate and optimize the path associated with the PHI\n    argument feeding the erroneous statement.  */\n static void\n-find_implicit_erroneous_behaviour (void)\n+find_implicit_erroneous_behavior (void)\n {\n   basic_block bb;\n \n@@ -353,12 +353,12 @@ find_implicit_erroneous_behaviour (void)\n     }\n }\n \n-/* Look for statements which exhibit erroneous behaviour.  For example\n+/* Look for statements which exhibit erroneous behavior.  For example\n    a NULL pointer dereference.\n \n-   When found, optimize the block containing the erroneous behaviour.  */\n+   When found, optimize the block containing the erroneous behavior.  */\n static void\n-find_explicit_erroneous_behaviour (void)\n+find_explicit_erroneous_behavior (void)\n {\n   basic_block bb;\n \n@@ -485,11 +485,11 @@ gimple_ssa_isolate_erroneous_paths (void)\n   initialize_original_copy_tables ();\n \n   /* Search all the blocks for edges which, if traversed, will\n-     result in undefined behaviour.  */\n+     result in undefined behavior.  */\n   cfg_altered = false;\n \n   /* First handle cases where traversal of a particular edge\n-     triggers undefined behaviour.  These cases require creating\n+     triggers undefined behavior.  These cases require creating\n      duplicate blocks and thus new SSA_NAMEs.\n \n      We want that process complete prior to the phase where we start\n@@ -501,8 +501,8 @@ gimple_ssa_isolate_erroneous_paths (void)\n      back to the manager but we could still have dangling references\n      to the released SSA_NAME in unreachable blocks.\n      that any released names not have dangling references in the IL.  */\n-  find_implicit_erroneous_behaviour ();\n-  find_explicit_erroneous_behaviour ();\n+  find_implicit_erroneous_behavior ();\n+  find_explicit_erroneous_behavior ();\n \n   free_original_copy_tables ();\n "}, {"sha": "6c6ed9dcf6d2234e859950a5eefd05619733ca03", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -1,3 +1,9 @@\n+2016-02-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gofrontend/lex.cc: Spelling fixes - behaviour -> behavior and\n+\tneighbour -> neighbor.\n+\t* gccgo.texi: Likewise.\n+\n 2016-01-27  Ian Lance Taylor  <iant@google.com>\n \n \t* go-lang.c (go_langhook_init_options_struct): Default to"}, {"sha": "88eb46ad0bad99d9c9849b1c89ff107c1326463f", "filename": "gcc/go/gccgo.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fgo%2Fgccgo.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fgo%2Fgccgo.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgccgo.texi?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -284,7 +284,7 @@ package object files together into a single shared library or archive.\n \n At link time you must explicitly tell @command{gccgo} which files to\n link together into the executable, as is usual with @command{gcc}.\n-This is different from the behaviour of other Go compilers.\n+This is different from the behavior of other Go compilers.\n \n @node C Interoperability\n @chapter C Interoperability"}, {"sha": "34a0811abef3f6e0e78c16f639ed370863fdb39e", "filename": "gcc/go/gofrontend/lex.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fgo%2Fgofrontend%2Flex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fgo%2Fgofrontend%2Flex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Flex.cc?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -881,7 +881,7 @@ Lex::gather_identifier()\n \t      && (cc < '0' || cc > '9'))\n \t    {\n \t      // Check for an invalid character here, as we get better\n-\t      // error behaviour if we swallow them as part of the\n+\t      // error behavior if we swallow them as part of the\n \t      // identifier we are building.\n \t      if ((cc >= ' ' && cc < 0x7f)\n \t\t  || cc == '\\t'\n@@ -922,7 +922,7 @@ Lex::gather_identifier()\n \t    {\n \t      // There is no valid place for a non-ASCII character\n \t      // other than an identifier, so we get better error\n-\t      // handling behaviour if we swallow this character after\n+\t      // handling behavior if we swallow this character after\n \t      // giving an error.\n \t      if (!issued_error)\n \t\terror_at(this->location(),"}, {"sha": "14740ccc939a4e7d9fa18ff422c4b83451c12866", "filename": "gcc/hwint.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fhwint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fhwint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhwint.h?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -251,7 +251,7 @@ sext_hwi (HOST_WIDE_INT src, unsigned int prec)\n \t from unsigned to signed preserves bit pattern, and right shift of\n \t a signed value propagates the sign bit.\n \t We have to convert from signed to unsigned and back, because when left\n-\t shifting signed values, any overflow is undefined behaviour.  */\n+\t shifting signed values, any overflow is undefined behavior.  */\n       gcc_checking_assert (prec < HOST_BITS_PER_WIDE_INT);\n       int shift = HOST_BITS_PER_WIDE_INT - prec;\n       return ((HOST_WIDE_INT) ((unsigned HOST_WIDE_INT) src << shift)) >> shift;"}, {"sha": "37aa18548a6e7bee014679e2b18955490628ac52", "filename": "gcc/ira-build.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fira-build.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fira-build.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-build.c?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -1672,7 +1672,7 @@ finish_cost_vectors (void)\n    minimizes the number of chain elements per allocno live range.  If the\n    blocks would be visited in a different order, we would still compute a\n    correct post-ordering but it would be less likely that two nodes\n-   connected by an edge in the CFG are neighbours in the topsort.  */\n+   connected by an edge in the CFG are neighbors in the topsort.  */\n \n static vec<ira_loop_tree_node_t>\n ira_loop_tree_body_rev_postorder (ira_loop_tree_node_t loop_node ATTRIBUTE_UNUSED,"}, {"sha": "17b58bdfc3d1b9ad8e72d7591dcfaab5f37e57da", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -2140,7 +2140,7 @@ process_alt_operands (int only_alternative)\n \t\t\t  reject++;\n \t\t\t}\n \t\t    }\n-\t\t  /* We simulate the behaviour of old reload here.\n+\t\t  /* We simulate the behavior of old reload here.\n \t\t     Although scratches need hard registers and it\n \t\t     might result in spilling other pseudos, no reload\n \t\t     insns are generated for the scratches.  So it\n@@ -3027,7 +3027,7 @@ process_address_1 (int nop, bool check_only_p,\n \t      if (insn != NULL_RTX)\n \t\t{\n \t\t  /* Do nothing if we cannot generate right insns.\n-\t\t     This is analogous to reload pass behaviour.  */\n+\t\t     This is analogous to reload pass behavior.  */\n \t\t  delete_insns_since (last);\n \t\t  end_sequence ();\n \t\t  return false;"}, {"sha": "ebd2eed1985aba74dd0aff2cc62bca46f2274192", "filename": "gcc/match.pd", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -2969,7 +2969,7 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n /* If we have a narrowing conversion of an arithmetic operation where\n    both operands are widening conversions from the same type as the outer\n    narrowing conversion.  Then convert the innermost operands to a suitable\n-   unsigned type (to avoid introducing undefined behaviour), perform the\n+   unsigned type (to avoid introducing undefined behavior), perform the\n    operation and convert the result to the desired type.  */\n (for op (plus minus)\n   (simplify\n@@ -2999,7 +2999,7 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n /* This is another case of narrowing, specifically when there's an outer\n    BIT_AND_EXPR which masks off bits outside the type of the innermost\n    operands.   Like the previous case we have to convert the operands\n-   to unsigned types to avoid introducing undefined behaviour for the\n+   to unsigned types to avoid introducing undefined behavior for the\n    arithmetic operation.  */\n (for op (minus plus)\n  (simplify"}, {"sha": "c940f202baea1a1592a850078d542afb021b1a4b", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -1,3 +1,9 @@\n+2016-02-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* objc-act.c: Spelling fixes - behaviour -> behavior and\n+\tneighbour -> neighbor.\n+\t* objc-map.h: Likewise.\n+\n 2016-01-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tUpdate copyright years."}, {"sha": "8109507c05e08eca1358eb18bfa7cf72335938a7", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -5168,7 +5168,7 @@ receiver_is_class_object (tree receiver, int self, int super)\n      (due to the code below) and so will know that +alloc is called on\n      the 'NSObject' class, and can perform the corresponding checks.\n \n-     Programmers can disable this behaviour by casting the results of\n+     Programmers can disable this behavior by casting the results of\n      objc_getClass() to 'Class' (this may seem weird because\n      objc_getClass() is already declared to return 'Class', but the\n      compiler treats it as a special function).  This may be useful if\n@@ -5880,7 +5880,7 @@ lookup_method (tree mchain, tree method)\n    OBJC_LOOKUP_NO_SUPER is clear, and no suitable class method could\n    be found in INTERFACE or any of its superclasses, look for an\n    _instance_ method of the same name in the root class as a last\n-   resort.  This behaviour can be turned off by using\n+   resort.  This behavior can be turned off by using\n    OBJC_LOOKUP_NO_INSTANCE_METHODS_OF_ROOT_CLASS.\n \n    If a suitable method cannot be found, return NULL_TREE.  */"}, {"sha": "aa88b552d265f9ffa30d4dab2d6732739b11f676", "filename": "gcc/objc/objc-map.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fobjc%2Fobjc-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fobjc%2Fobjc-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-map.h?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -283,7 +283,7 @@ objc_map_iterator_move_to_next (objc_map_t map, objc_map_iterator_t *i)\n /* Return the current key.  You can only call it after you have called\n    objc_map_iterator_move_to_next() at least once (to move to the\n    first element), and only if the last call returned\n-   OBJC_MAP_SUCCESS.  The behaviour is otherwise undefined, probably a\n+   OBJC_MAP_SUCCESS.  The behavior is otherwise undefined, probably a\n    segmentation fault.  */\n static inline\n tree\n@@ -296,7 +296,7 @@ objc_map_iterator_current_key (objc_map_t map, objc_map_iterator_t i)\n /* Return the current value.  You can only call it after you have\n    called objc_map_iterator_move_to_next() at least once (to move to\n    the first element), and only if the last call returned\n-   OBJC_MAP_SUCCESS.  The behaviour is otherwise undefined, probably a\n+   OBJC_MAP_SUCCESS.  The behavior is otherwise undefined, probably a\n    segmentation fault.  */\n static inline\n tree"}, {"sha": "89dd823901ad67d4490c17a4795ad76c81671682", "filename": "gcc/sched-ebb.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fsched-ebb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fsched-ebb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-ebb.c?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -464,7 +464,7 @@ add_deps_for_risky_insns (rtx_insn *head, rtx_insn *tail)\n /* Schedule a single extended basic block, defined by the boundaries\n    HEAD and TAIL.\n \n-   We change our expectations about scheduler behaviour depending on\n+   We change our expectations about scheduler behavior depending on\n    whether MODULO_SCHEDULING is true.  If it is, we expect that the\n    caller has already called set_modulo_params and created delay pairs\n    as appropriate.  If the modulo schedule failed, we return"}, {"sha": "2a457033306f42c32733dd592ca36b3617366045", "filename": "gcc/sched-int.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fsched-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fsched-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-int.h?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -100,7 +100,7 @@ extern int get_rgn_sched_max_insns_priority (void);\n extern void sel_add_to_insn_priority (rtx, int);\n \n /* True if during selective scheduling we need to emulate some of haifa\n-   scheduler behaviour.  */\n+   scheduler behavior.  */\n extern int sched_emulate_haifa_p;\n \n /* Mapping from INSN_UID to INSN_LUID.  In the end all other per insn data"}, {"sha": "bd32ab5c154bec19fa6d3555dad29988843f1632", "filename": "gcc/sel-sched.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fsel-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fsel-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched.c?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -396,7 +396,7 @@ typedef struct fur_static_params *fur_static_params_p;\n typedef struct cmpd_local_params *cmpd_local_params_p;\n typedef struct moveop_static_params *moveop_static_params_p;\n \n-/* Set of hooks and parameters that determine behaviour specific to\n+/* Set of hooks and parameters that determine behavior specific to\n    move_op or find_used_regs functions.  */\n struct code_motion_path_driver_info_def\n {\n@@ -6450,7 +6450,7 @@ code_motion_path_driver (insn_t insn, av_set_t orig_ops, ilist_t path,\n         {\n           /* We have already found an original operation on this branch, do not\n              go any further and just return TRUE here.  If we don't stop here,\n-             function can have exponential behaviour even on the small code\n+             function can have exponential behavior even on the small code\n              with many different paths (e.g. with data speculation and\n              recovery blocks).  */\n           if (sched_verbose >= 6)"}, {"sha": "bf74015509daaa08d2130ff475c203bba875c56e", "filename": "gcc/spellcheck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fspellcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Fspellcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fspellcheck.c?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -80,7 +80,7 @@ levenshtein_distance (const char *s, int len_s,\n \t by inserting i characters.  */\n       v1[0] = i + 1;\n \n-      /* Build the rest of the row by considering neighbours to\n+      /* Build the rest of the row by considering neighbors to\n \t the north, west and northwest.  */\n       for (int j = 0; j < len_s; j++)\n \t{"}, {"sha": "5c8e4e16cc107d9c66557457f60b5530888fd3ab", "filename": "gcc/target.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -4100,7 +4100,7 @@ DEFHOOKPOD\n  \"Normally, when a function returns a structure by memory, the address\\n\\\n is passed as an invisible pointer argument, but the compiler also\\n\\\n arranges to return the address from the function like it would a normal\\n\\\n-pointer return value.  Define this to true if that behaviour is\\n\\\n+pointer return value.  Define this to true if that behavior is\\n\\\n undesirable on your target.\",\n  bool, false)\n "}, {"sha": "43022bd92c3121fbe0412d4350a4fc036c6fad71", "filename": "gcc/target.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -101,7 +101,7 @@ extern int elf_record_gcc_switches (print_switch_type type, const char *);\n extern bool target_default_pointer_address_modes_p (void);\n \n /* For hooks which use the MOVE_RATIO macro, this gives the legacy default\n-   behaviour.  */\n+   behavior.  */\n extern unsigned int get_move_ratio (bool);\n \n struct stdarg_info;"}, {"sha": "74af91a6b1dd50e02bde85cf9fc8975c1487a984", "filename": "gcc/targhooks.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -1446,7 +1446,7 @@ default_register_move_cost (machine_mode mode ATTRIBUTE_UNUSED,\n }\n \n /* For hooks which use the MOVE_RATIO macro, this gives the legacy default\n-   behaviour.  SPEED_P is true if we are compiling for speed.  */\n+   behavior.  SPEED_P is true if we are compiling for speed.  */\n \n unsigned int\n get_move_ratio (bool speed_p ATTRIBUTE_UNUSED)"}, {"sha": "8d05fea69dec198a601cf1f1f7e73da62b911d57", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -1,3 +1,58 @@\n+2016-02-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* objc.dg/gnu-api-2-method.m: Spelling fixes - behaviour -> behavior\n+\tand neighbour -> neighbor.\n+\t* objc.dg/attributes/method-nonnull-1.m: Likewise.\n+\t* objc.dg/gnu-api-2-class-meta.m: Likewise.\n+\t* c-c++-common/Wvarargs.c: Likewise.\n+\t* c-c++-common/goacc/host_data-5.c: Likewise.\n+\t* obj-c++.dg/gnu-api-2-class-meta.mm: Likewise.\n+\t* obj-c++.dg/attributes/method-nonnull-1.mm: Likewise.\n+\t* obj-c++.dg/gnu-api-2-method.mm: Likewise.\n+\t* gcc.target/aarch64/pr60697.c: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vldX_lane.c: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vqshl.c: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vshuffle.inc: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vrshl.c: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vldX_dup.c: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vstX_lane.c: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vqrshl.c: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vldX.c: Likewise.\n+\t* gcc.target/aarch64/aapcs64/ice_2.c: Likewise.\n+\t* gcc.target/aarch64/aapcs64/test_23.c: Likewise.\n+\t* gcc.target/aarch64/vrnd_f64_1.c: Likewise.\n+\t* g++.dg/warn/Wconversion-real-integer-3.C: Likewise.\n+\t* g++.dg/lookup/koenig5.C: Likewise.\n+\t* g++.dg/ext/no-asm-2.C: Likewise.\n+\t* gfortran.dg/bounds_check_array_ctor_3.f90: Likewise.\n+\t* gfortran.dg/bounds_check_array_ctor_7.f90: Likewise.\n+\t* gfortran.dg/used_types_16.f90: Likewise.\n+\t* gfortran.dg/assumed_rank_bounds_1.f90: Likewise.\n+\t* gfortran.dg/bounds_check_array_ctor_1.f90: Likewise.\n+\t* gfortran.dg/assumed_rank_bounds_2.f90: Likewise.\n+\t* gfortran.dg/bounds_check_array_ctor_4.f90: Likewise.\n+\t* gfortran.dg/abstract_type_6.f03: Likewise.\n+\t* gfortran.dg/bounds_check_array_ctor_5.f90: Likewise.\n+\t* gfortran.dg/used_types_15.f90: Likewise.\n+\t* gfortran.dg/bounds_check_array_ctor_8.f90: Likewise.\n+\t* gfortran.dg/exit_3.f08: Likewise.\n+\t* gfortran.dg/open_status_2.f90: Likewise.\n+\t* gfortran.dg/derived_pointer_recursion_2.f90: Likewise.\n+\t* gfortran.dg/intrinsic_std_1.f90: Likewise.\n+\t* gfortran.dg/associate_1.f03: Likewise.\n+\t* gfortran.dg/bounds_check_array_ctor_2.f90: Likewise.\n+\t* gfortran.dg/intrinsic_std_6.f90: Likewise.\n+\t* gfortran.dg/bounds_check_array_ctor_6.f90: Likewise.\n+\t* gcc.dg/builtin-object-size-1.c: Likewise.\n+\t* gcc.dg/noreturn-6.c: Likewise.\n+\t* gcc.dg/builtin-stringop-chk-1.c: Likewise.\n+\t* gcc.dg/globalalias.c: Likewise.\n+\t* gcc.dg/builtins-config.h: Likewise.\n+\t* gcc.dg/pr30457.c: Likewise.\n+\t* gcc.c-torture/compile/volatile-1.c: Likewise.\n+\t* gcc.c-torture/execute/20101011-1.c: Likewise.\n+\t* c-c++-common/Waddress-1.c: Likewise.\n+\n 2016-02-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/69768"}, {"sha": "8df5d2f6fecd5065456f094e2f234197b933957e", "filename": "gcc/testsuite/c-c++-common/Waddress-1.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWaddress-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWaddress-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWaddress-1.c?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -7,9 +7,9 @@ static int e;\n int\n foo ()\n {\n-  return \"foo1\" != (void *) 0\t/* { dg-bogus \"comparison with string literal results in unspecified behaviou?r\" } */\n-\t && \"foo2\" != (const char *) ((void *) 0)\t/* { dg-bogus \"comparison with string literal results in unspecified behaviou?r\" } */\n-\t && \"foo3\" != (const char *) ((void *) (10 - 10))\t/* { dg-bogus \"comparison with string literal results in unspecified behaviou?r\" } */\n-\t && \"foo4\" != (const char *) ((void *) (&e - &e))\t/* { dg-warning \"comparison with string literal results in unspecified behaviou?r\" \"\" { target c } } */\n-\t && \"foo5\" != \"foo6\";\t/* { dg-warning \"comparison with string literal results in unspecified behaviou?r\" } */\n+  return \"foo1\" != (void *) 0\t/* { dg-bogus \"comparison with string literal results in unspecified behavior\" } */\n+\t && \"foo2\" != (const char *) ((void *) 0)\t/* { dg-bogus \"comparison with string literal results in unspecified behavior\" } */\n+\t && \"foo3\" != (const char *) ((void *) (10 - 10))\t/* { dg-bogus \"comparison with string literal results in unspecified behavior\" } */\n+\t && \"foo4\" != (const char *) ((void *) (&e - &e))\t/* { dg-warning \"comparison with string literal results in unspecified behavior\" \"\" { target c } } */\n+\t && \"foo5\" != \"foo6\";\t/* { dg-warning \"comparison with string literal results in unspecified behavior\" } */\n }"}, {"sha": "0f90cb3bfce1685d10cd7feb2bf16b06bdccff6d", "filename": "gcc/testsuite/c-c++-common/Wvarargs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWvarargs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWvarargs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWvarargs.c?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -49,6 +49,6 @@ foo3 (int a, register int b, ...)\n {\n     va_list vp;\n     /* 'b' is declared with register storage, so warn.  */\n-    va_start (vp, b); /* { dg-warning \"undefined behaviour\" } */\n+    va_start (vp, b); /* { dg-warning \"undefined behavior\" } */\n     va_end (vp);\n }"}, {"sha": "a4206c8b93095e7b1caa3e685d742049c279cf92", "filename": "gcc/testsuite/c-c++-common/goacc/host_data-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fhost_data-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fhost_data-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fhost_data-5.c?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -11,7 +11,7 @@ int main (int argc, char* argv[])\n     int *xp;\n #pragma acc host_data use_device (x)\n     {\n-      /* This use of the present clause is undefined behaviour for OpenACC.  */\n+      /* This use of the present clause is undefined behavior for OpenACC.  */\n #pragma acc parallel present (x) copyout (xp) /* { dg-error \"variable 'x' declared in enclosing 'host_data' region\" } */\n       {\n         xp = x;"}, {"sha": "2befc26e7e3977e65c04c4f31978fe61e167f1ec", "filename": "gcc/testsuite/g++.dg/ext/no-asm-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fno-asm-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fno-asm-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fno-asm-2.C?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -4,7 +4,7 @@\n // Verify that the keyword asm and the GNU extension typeof are not\n // recognized as keywords when using -fno-asm.  Having -fno-asm affect\n // a standard C++ keyword seems strange, but that is existing\n-// behaviour.  If that behaviour changes, this test should change.\n+// behavior.  If that behavior changes, this test should change.\n \n int asm;\t// { dg-bogus \"before .asm.\" }\n int typeof;\t// { dg-bogus \"before .typeof.\" }"}, {"sha": "15fb6cc90a9f69dd8f39b9f48557a4972a18034c", "filename": "gcc/testsuite/g++.dg/lookup/koenig5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fkoenig5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fkoenig5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fkoenig5.C?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -1,6 +1,6 @@\n // Koenig lookup is not defined as intended in the std.  DR 218 gives\n // an indication of what is meant.  This test case encapsulates the\n-// current conservative behaviour\n+// current conservative behavior\n \n // Copyright (C) 2006 Free Software Foundation, Inc.\n // Contributed by Nathan Sidwell 27 Aug 2006 <nathan@codesourcery.com>"}, {"sha": "775c88c3fade76b087a7f08b42ba8555dc255593", "filename": "gcc/testsuite/g++.dg/warn/Wconversion-real-integer-3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-real-integer-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-real-integer-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-real-integer-3.C?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -12,7 +12,7 @@ void h (void)\n     // a macro that expands to the built-in __INT_MAX__.  Furthermore,\n     // INT_MAX is defined inside a system header.\n     //\n-    // The behaviour we want is that the diagnostic should point to\n+    // The behavior we want is that the diagnostic should point to\n     // the locus that inside the source code here, at the relevant\n     // line below, even with -ftrack-macro-expansion.  We don't want\n     // it to point to the any locus that is inside the system header."}, {"sha": "2017309646d15450faa76eb7354ad9f01710077b", "filename": "gcc/testsuite/gcc.c-torture/compile/volatile-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fvolatile-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fvolatile-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fvolatile-1.c?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -1,6 +1,6 @@\n /* The problem here was that the statements that\n    loaded from exception.reason where not being\n-   marked as having volatile behaviour which\n+   marked as having volatile behavior which\n    caused load PRE on the tree level to go\n    into an infinite loop. */\n "}, {"sha": "e7157c591683888f61b1e1476da878082d024359", "filename": "gcc/testsuite/gcc.c-torture/execute/20101011-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20101011-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20101011-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20101011-1.c?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -45,7 +45,7 @@\n # define DO_TEST 0\n #elif defined (__epiphany__)\n   /* Epiphany does not have hardware division, and the software implementation\n-     has truly undefined behaviour for division by 0.  */\n+     has truly undefined behavior for division by 0.  */\n # define DO_TEST 0\n #elif defined (__m68k__) && !defined(__linux__)\n   /* Attempting to trap division-by-zero in this way isn't likely to work on \n@@ -68,9 +68,9 @@\n #  define DO_TEST 0\n # else\n #  include <signal.h>\n-  /* ARM division-by-zero behaviour is to call a helper function, which\n+  /* ARM division-by-zero behavior is to call a helper function, which\n      can do several different things, depending on requirements.  Emulate\n-     the behaviour of other targets here by raising SIGFPE.  */\n+     the behavior of other targets here by raising SIGFPE.  */\n int __attribute__((used))\n __aeabi_idiv0 (int return_value)\n {"}, {"sha": "8cdae49a6b1180aa6f93a0edb62e68120334388b", "filename": "gcc/testsuite/gcc.dg/builtin-object-size-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-1.c?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -361,7 +361,7 @@ test5 (size_t x)\n   /* My understanding of ISO C99 6.5.6 is that a conforming\n      program will not end up with p equal to &buf[0]\n      through &buf[7], i.e. calling this function with say\n-     UINTPTR_MAX / 4 results in undefined behaviour.\n+     UINTPTR_MAX / 4 results in undefined behavior.\n      If that's true, then the maximum number of remaining\n      bytes from p until end of the object is 56, otherwise\n      it would be 64 (or conservative (size_t) -1 == unknown).  */"}, {"sha": "6e71aeeec28d1ed04b10c88fddd9afa709cfd78e", "filename": "gcc/testsuite/gcc.dg/builtin-stringop-chk-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-stringop-chk-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-stringop-chk-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-stringop-chk-1.c?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -70,7 +70,7 @@ test (int arg, ...)\n   memset (p, 'd', 0);\n   q = strcpy (p, \"\"); /* { dg-warning \"will always overflow\" \"strcpy\" } */\n \n-  /* This invokes undefined behaviour, since we are past the end of buf1.  */\n+  /* This invokes undefined behavior, since we are past the end of buf1.  */\n   p = p + 10;\n   memset (p, 'd', 1); /* { dg-warning \"will always overflow\" \"memset\" } */\n "}, {"sha": "f00e91a750f0b235d54e6be9f8f7f6a3d889d9fa", "filename": "gcc/testsuite/gcc.dg/builtins-config.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-config.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-config.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-config.h?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -26,7 +26,7 @@\n        && ! defined (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__))\n /* MacOS versions before 10.3 don't have many C99 functions.  \n    But, if you're including this file, you probably want to test the\n-   newer behaviour, so: */\n+   newer behavior, so: */\n #error forgot to set -mmacosx-version-min.\n #elif (defined(__APPLE__) && defined(__ppc__) \\\n        && __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ < 1030)\n@@ -47,7 +47,7 @@\n #if defined(_NEWLIB_VERSION) || defined(__UCLIBC__)\n #elif defined(__sun) && __STDC_VERSION__ - 0 < 199901L\n /* If you're including this file, you probably want to test the newer\n-   behaviour, so ensure the right flags were used for each test: */\n+   behavior, so ensure the right flags were used for each test: */\n #error forgot to set -std=c99.\n #elif defined(__sun) && ! defined (_STDC_C99)\n /* Solaris up to 9 doesn't have the entire C99 runtime."}, {"sha": "69cd4abf86a096ec231f82d145bf05aeed3b63ce", "filename": "gcc/testsuite/gcc.dg/globalalias.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgcc.dg%2Fglobalalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgcc.dg%2Fglobalalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fglobalalias.c?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -1,7 +1,7 @@\n /* This test checks that local aliases behave sanely.  This is necessary for code correctness\n    of aliases introduced by ipa-visibility pass.\n \n-   This test expose weird behaviour of AIX's .set pseudo-op where the global symbol is created,\n+   This test expose weird behavior of AIX's .set pseudo-op where the global symbol is created,\n    but all uses of the alias are syntactically replaced by uses of the target.  This means that\n    both counters are increased to 2.  */\n "}, {"sha": "b4badd41b9e9360088498303801343f540de4ac7", "filename": "gcc/testsuite/gcc.dg/noreturn-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgcc.dg%2Fnoreturn-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgcc.dg%2Fnoreturn-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnoreturn-6.c?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -1,4 +1,4 @@\n /* { dg-do compile } */\n-/* Check for volatile behaviour.  */\n+/* Check for volatile behavior.  */\n extern int xxx (void);\n volatile extern int xxx (void);  /* { dg-error \"not compatible\" } */"}, {"sha": "6a49d7c99e487e055d14b48126d1b86e56bdc313", "filename": "gcc/testsuite/gcc.dg/pr30457.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30457.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30457.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30457.c?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -14,7 +14,7 @@ void foo(register short paramN, ...)\n {\n   va_list ap;\n \n-  va_start(ap, paramN); /* { dg-warning \"undefined behaviour when second parameter of 'va_start' is declared with 'register' storage\" } */\n+  va_start(ap, paramN); /* { dg-warning \"undefined behavior when second parameter of 'va_start' is declared with 'register' storage\" } */\n   \n   /* Undefined by C99 7.15.1.1p2:  */\n   (void) va_arg(ap, char); /* { dg-warning \"'char' is promoted to 'int' when passed through '...'\" \"promoted\" } */"}, {"sha": "be5b7025d12865759f5e7e6ceecb96c4a20f9686", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/ice_2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fice_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fice_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fice_2.c?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -1,6 +1,6 @@\n /* Test AAPCS layout\n \n-   Larger than machine-supported vector size.  The behaviour is unspecified by\n+   Larger than machine-supported vector size.  The behavior is unspecified by\n    the AAPCS64 document; the implementation opts for pass by reference.  */\n \n /* { dg-do compile { target aarch64*-*-* } } */"}, {"sha": "fd45cc509e1e6060eafb6b5efd11209da4d1516a", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_23.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_23.c?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -1,6 +1,6 @@\n /* Test AAPCS64 layout.\n \n-   Larger than machine-supported vector size.  The behaviour is unspecified by\n+   Larger than machine-supported vector size.  The behavior is unspecified by\n    the AAPCS64 document; the implementation opts for pass by reference.  */\n \n /* { dg-do run { target aarch64*-*-* } } */"}, {"sha": "e1e8562ac6be424e638d11a90aeb406116abca24", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vldX.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvldX.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvldX.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvldX.c?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -406,7 +406,7 @@ void exec_vldX (void)\n   /* We need to use a temporary result buffer (result_bis), because\n      the one used for other tests is not large enough. A subset of the\n      result data is moved from result_bis to result, and it is this\n-     subset which is used to check the actual behaviour. The next\n+     subset which is used to check the actual behavior. The next\n      macro enables to move another chunk of data from result_bis to\n      result.  */\n #define TEST_VLDX(Q, T1, T2, W, N, X)\t\t\t\t\t\\"}, {"sha": "b44a987cb5d2f169b633d9c1e862fb782bd65d39", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vldX_dup.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvldX_dup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvldX_dup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvldX_dup.c?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -178,7 +178,7 @@ void exec_vldX_dup (void)\n   /* We need to use a temporary result buffer (result_bis), because\n      the one used for other tests is not large enough. A subset of the\n      result data is moved from result_bis to result, and it is this\n-     subset which is used to check the actual behaviour. The next\n+     subset which is used to check the actual behavior. The next\n      macro enables to move another chunk of data from result_bis to\n      result.  */\n #define TEST_VLDX_DUP(Q, T1, T2, W, N, X)\t\t\t\t\\"}, {"sha": "cda76abfe0a18f648331ec9cffc030368b2a7c70", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vldX_lane.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvldX_lane.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvldX_lane.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvldX_lane.c?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -327,7 +327,7 @@ void exec_vldX_lane (void)\n   /* We need to use a temporary result buffer (result_bis), because\n      the one used for other tests is not large enough. A subset of the\n      result data is moved from result_bis to result, and it is this\n-     subset which is used to check the actual behaviour. The next\n+     subset which is used to check the actual behavior. The next\n      macro enables to move another chunk of data from result_bis to\n      result.  */\n   /* We also use another extra input buffer (buffer_src), which we"}, {"sha": "0e194fa46cb2567a740b93dc0be102c4b8e32799", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqrshl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqrshl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqrshl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqrshl.c?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -557,7 +557,7 @@ FNNAME (INSN)\n \n   /* Choose init value arbitrarily, will be used as shift amount */\n   /* Use values equal to or one-less-than the type width to check\n-     behaviour on limits.  */\n+     behavior on limits.  */\n   VDUP(vector_shift, , int, s, 8, 8, 7);\n   VDUP(vector_shift, , int, s, 16, 4, 15);\n   VDUP(vector_shift, , int, s, 32, 2, 31);"}, {"sha": "5999b12498bacd55952177ce902f1baaddf5275a", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqshl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqshl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqshl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqshl.c?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -429,7 +429,7 @@ FNNAME (INSN)\n \n   /* Choose init value arbitrarily, will be used as shift amount */\n   /* Use values equal or one-less-than the type width to check\n-     behaviour on limits.  */\n+     behavior on limits.  */\n \n   /* 64-bits vectors first.  */\n   /* Shift 8-bits lanes by 7...  */"}, {"sha": "1efa211d22e04cdd69612734d6b6717aeafbcee5", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vrshl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrshl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrshl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrshl.c?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -314,7 +314,7 @@ void exec_vrshl (void)\n \n   /* Choose init value arbitrarily, will be used as shift amount.  */\n   /* Use values equal to one-less-than the type width to check\n-     behaviour on limits.  */\n+     behavior on limits.  */\n   VDUP(vector_shift, , int, s, 8, 8, 7);\n   VDUP(vector_shift, , int, s, 16, 4, 15);\n   VDUP(vector_shift, , int, s, 32, 2, 31);"}, {"sha": "b55a205d7ac4dfd09961e05b6eba6ab383cb0fd7", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vshuffle.inc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvshuffle.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvshuffle.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvshuffle.inc?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -11,7 +11,7 @@ void FNNAME (INSN_NAME) (void)\n   /* We need to use a temporary result buffer (result_bis), because\n      the one used for other tests is not large enough. A subset of the\n      result data is moved from result_bis to result, and it is this\n-     subset which is used to check the actual behaviour. The next\n+     subset which is used to check the actual behavior. The next\n      macro enables to move another chunk of data from result_bis to\n      result.  */\n #define TEST_VSHUFFLE(INSN, Q, T1, T2, W, N)\t\t\t\t\\"}, {"sha": "b923b64412488fc022fc66b7862e310053a7f678", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vstX_lane.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvstX_lane.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvstX_lane.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvstX_lane.c?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -268,7 +268,7 @@ void exec_vstX_lane (void)\n   /* We need to use a temporary result buffer (result_bis), because\n      the one used for other tests is not large enough. A subset of the\n      result data is moved from result_bis to result, and it is this\n-     subset which is used to check the actual behaviour. The next\n+     subset which is used to check the actual behavior. The next\n      macro enables to move another chunk of data from result_bis to\n      result.  */\n   /* We also use another extra input buffer (buffer_src), which we"}, {"sha": "1b5857c1fbf342f731a648832f4104d31cfdc79d", "filename": "gcc/testsuite/gcc.target/aarch64/pr60697.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr60697.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr60697.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr60697.c?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -618,7 +618,7 @@ static int ns5_core(FILE *log,t_commrec *cr,t_forcerec *fr,int cg_index[],\n     }\n   }\n }\n-int search_neighbours(FILE *log,t_forcerec *fr,\n+int search_neighbors(FILE *log,t_forcerec *fr,\n         rvec x[],matrix box,\n         t_topology *top,t_groups *grps,\n         t_commrec *cr,t_nsborder *nsb,"}, {"sha": "d1cff7b7b3045808458fd7bfcf6459b50d1af4f9", "filename": "gcc/testsuite/gcc.target/aarch64/vrnd_f64_1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvrnd_f64_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvrnd_f64_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvrnd_f64_1.c?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -87,7 +87,7 @@ main (int argc, char **argv)\n   };\n \n   /* Set floating point control register\n-     to have predictable vrndx and vrndi behaviour.  */\n+     to have predictable vrndx and vrndi behavior.  */\n   set_rounding_mode (FPROUNDING_ZERO);\n \n   run_round_tests (tests, expectations);"}, {"sha": "9dd0a37c56454cdcacf93ec15c13bbbdefd34f96", "filename": "gcc/testsuite/gfortran.dg/abstract_type_6.f03", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgfortran.dg%2Fabstract_type_6.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgfortran.dg%2Fabstract_type_6.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fabstract_type_6.f03?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -11,16 +11,16 @@ module m\n TYPE, ABSTRACT :: top\n CONTAINS\n    PROCEDURE(xxx), DEFERRED :: proc_a ! { dg-error \"must be explicit\" }\n-   ! some useful default behaviour\n+   ! some useful default behavior\n    PROCEDURE :: proc_c => top_c ! { dg-error \"must be a module procedure\" }\n END TYPE top\n \n-! Concrete middle class with useful behaviour\n+! Concrete middle class with useful behavior\n TYPE, EXTENDS(top) :: middle\n CONTAINS\n    ! do nothing, empty proc just to make middle concrete\n    PROCEDURE :: proc_a => dummy_middle_a ! { dg-error \"must be a module procedure\" }\n-   ! some useful default behaviour\n+   ! some useful default behavior\n    PROCEDURE :: proc_b => middle_b ! { dg-error \"must be a module procedure\" }\n END TYPE middle\n \n@@ -32,9 +32,9 @@ module m\n    ! useful proc to satisfy deferred procedure in top. Because we've\n    ! extended middle we wouldn't get told off if we forgot this.\n    PROCEDURE :: proc_a => bottom_a  ! { dg-error \"must be a module procedure\" }\n-   ! calls middle%proc_b and then provides extra behaviour\n+   ! calls middle%proc_b and then provides extra behavior\n    PROCEDURE :: proc_b => bottom_b\n-   ! calls top_c and then provides extra behaviour\n+   ! calls top_c and then provides extra behavior\n    PROCEDURE :: proc_c => bottom_c\n END TYPE bottom\n contains"}, {"sha": "bb32399d6faf312f6265d84d008a41a7db02d4d6", "filename": "gcc/testsuite/gfortran.dg/associate_1.f03", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_1.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_1.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_1.f03?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -51,7 +51,7 @@ PROGRAM main\n     END ASSOCIATE\n   END ASSOCIATE myname ! Matching end-label.\n \n-  ! Correct behaviour when shadowing already existing names.\n+  ! Correct behavior when shadowing already existing names.\n   ASSOCIATE (a => 1 * b, b => 1 * a, x => 1, y => 2)\n     IF (ABS (a - 3.0) > 1.0e-3 .OR. ABS (b + 2.0) > 1.0e-3) CALL abort ()\n     ASSOCIATE (x => 1 * y, y => 1 * x)"}, {"sha": "fbca70777fc86bb3379c3c0d09d17a70a8c6dc23", "filename": "gcc/testsuite/gfortran.dg/assumed_rank_bounds_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_rank_bounds_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_rank_bounds_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_rank_bounds_1.f90?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -1,6 +1,6 @@\n ! { dg-do run }\n !\n-! Test the behaviour of lbound, ubound of shape with assumed rank arguments\n+! Test the behavior of lbound, ubound of shape with assumed rank arguments\n ! in an array context (without DIM argument).\n !\n "}, {"sha": "91752e5fc413be5cd4664e2d57542d8d1489f128", "filename": "gcc/testsuite/gfortran.dg/assumed_rank_bounds_2.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_rank_bounds_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_rank_bounds_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_rank_bounds_2.f90?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -1,6 +1,6 @@\n ! { dg-do run }\n !\n-! Test the behaviour of lbound, ubound of shape with assumed rank arguments\n+! Test the behavior of lbound, ubound of shape with assumed rank arguments\n ! in an array context (without DIM argument).\n !\n "}, {"sha": "78a65b412de8d9855de67709b03db002710dd941", "filename": "gcc/testsuite/gfortran.dg/bounds_check_array_ctor_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_array_ctor_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_array_ctor_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_array_ctor_1.f90?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -3,7 +3,7 @@\n ! { dg-shouldfail \"foo\" }\n !\n ! PR 36112\n-! Check correct bounds-checking behaviour for character-array-constructors.\n+! Check correct bounds-checking behavior for character-array-constructors.\n \n   call test (\"this is long\")\n contains"}, {"sha": "832ecddcfc5d5c833736521ac679c8e8623a5150", "filename": "gcc/testsuite/gfortran.dg/bounds_check_array_ctor_2.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_array_ctor_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_array_ctor_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_array_ctor_2.f90?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -3,7 +3,7 @@\n ! { dg-shouldfail \"foo\" }\n !\n ! PR 36112\n-! Check correct bounds-checking behaviour for character-array-constructors.\n+! Check correct bounds-checking behavior for character-array-constructors.\n \n   call test (\"this is long\")\n contains"}, {"sha": "878a64b9ac785f57966c9c1a56375f550a702c04", "filename": "gcc/testsuite/gfortran.dg/bounds_check_array_ctor_3.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_array_ctor_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_array_ctor_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_array_ctor_3.f90?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -1,7 +1,7 @@\n ! { dg-do compile }\n !\n ! PR 36112\n-! Check correct bounds-checking behaviour for character-array-constructors.\n+! Check correct bounds-checking behavior for character-array-constructors.\n ! This should not need any -fbounds-check and is enabled all the time.\n \n   character(len=128) :: arr(2) = (/ \"abc\", \"foobar\" /) ! { dg-error \"Different CHARACTER lengths\" }"}, {"sha": "e51b5784620b8ee08220c1f1e66dfe1e84253e2c", "filename": "gcc/testsuite/gfortran.dg/bounds_check_array_ctor_4.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_array_ctor_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_array_ctor_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_array_ctor_4.f90?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -3,7 +3,7 @@\n ! { dg-shouldfail \"foo\" }\n !\n ! PR 36112\n-! Check correct bounds-checking behaviour for character-array-constructors.\n+! Check correct bounds-checking behavior for character-array-constructors.\n \n   call test (\"short\", \"this is long\")\n contains"}, {"sha": "2d9a35a04e1f600c5b039bb249387cacc718bfad", "filename": "gcc/testsuite/gfortran.dg/bounds_check_array_ctor_5.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_array_ctor_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_array_ctor_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_array_ctor_5.f90?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -1,7 +1,7 @@\n ! { dg-do compile }\n !\n ! PR 36112\n-! Check correct bounds-checking behaviour for character-array-constructors.\n+! Check correct bounds-checking behavior for character-array-constructors.\n ! No need for -fbounds-check, enabled unconditionally.\n \n   character(len=5) :: s = \"hello\""}, {"sha": "5d788a99a6d8bcae831292bbfacd12979f342540", "filename": "gcc/testsuite/gfortran.dg/bounds_check_array_ctor_6.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_array_ctor_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_array_ctor_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_array_ctor_6.f90?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -3,7 +3,7 @@\n ! { dg-shouldfail \"foo\" }\n !\n ! PR 36112\n-! Check correct bounds-checking behaviour for character-array-constructors.\n+! Check correct bounds-checking behavior for character-array-constructors.\n \n   call test (\"short\", \"also5\")\n contains"}, {"sha": "ab1d5d11b52625bef224a4fc2c6a8603a5f14e31", "filename": "gcc/testsuite/gfortran.dg/bounds_check_array_ctor_7.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_array_ctor_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_array_ctor_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_array_ctor_7.f90?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -3,7 +3,7 @@\n ! { dg-shouldfail \"foo\" }\n !\n ! PR 36112\n-! Check correct bounds-checking behaviour for character-array-constructors.\n+! Check correct bounds-checking behavior for character-array-constructors.\n \n   call test (\"short\")\n contains"}, {"sha": "0b2479567ff787cc11c2cc42ddcd4671eefd5933", "filename": "gcc/testsuite/gfortran.dg/bounds_check_array_ctor_8.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_array_ctor_8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_array_ctor_8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_array_ctor_8.f90?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -3,7 +3,7 @@\n ! { dg-shouldfail \"foo\" }\n !\n ! PR 36112\n-! Check correct bounds-checking behaviour for character-array-constructors.\n+! Check correct bounds-checking behavior for character-array-constructors.\n \n   call test (\"short\")\n contains"}, {"sha": "75f72d5c1e1ec79d4395dd3d88b54b551c5c11a6", "filename": "gcc/testsuite/gfortran.dg/derived_pointer_recursion_2.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgfortran.dg%2Fderived_pointer_recursion_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgfortran.dg%2Fderived_pointer_recursion_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fderived_pointer_recursion_2.f90?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -12,7 +12,7 @@ MODULE atom_types\n END TYPE\n \n TYPE :: atom_private\n-  TYPE(atom_list) :: neighbours\n+  TYPE(atom_list) :: neighbors\n   LOGICAL         :: initialized = .true.\n END TYPE\n "}, {"sha": "301b017357e5a5c8e02d96a623bf61d6d81188ea", "filename": "gcc/testsuite/gfortran.dg/exit_3.f08", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgfortran.dg%2Fexit_3.f08", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgfortran.dg%2Fexit_3.f08", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fexit_3.f08?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -2,7 +2,7 @@\n ! { dg-options \"-std=f2008 -fall-intrinsics\" }\n \n ! PR fortran/44602\n-! Check for correct behaviour of EXIT / CYCLE combined with non-loop\n+! Check for correct behavior of EXIT / CYCLE combined with non-loop\n ! constructs at run-time.\n \n ! Contributed by Daniel Kraft, d@domob.eu."}, {"sha": "0b8d8ab26138563d1f6ced7004f96e2afa5e888e", "filename": "gcc/testsuite/gfortran.dg/intrinsic_std_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_std_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_std_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_std_1.f90?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -6,7 +6,7 @@\n !\n \n ! PR fortran/33141\n-! Check for the expected behaviour when an intrinsic function/subroutine is\n+! Check for the expected behavior when an intrinsic function/subroutine is\n ! called that is not available in the defined standard or that is a GNU\n ! extension:\n ! There should be a warning emitted on the call, and the reference should be"}, {"sha": "c4a7c37a687d6478df8cf7652e1fc567230506df", "filename": "gcc/testsuite/gfortran.dg/intrinsic_std_6.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_std_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_std_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_std_6.f90?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -6,7 +6,7 @@\n !\n \n ! PR fortran/33141\n-! Check for the expected behaviour when an intrinsic function/subroutine is\n+! Check for the expected behavior when an intrinsic function/subroutine is\n ! called that is not available in the defined standard or that is a GNU\n ! extension:\n ! There should be a warning emitted on the call, and the reference should be"}, {"sha": "c7e14c0ebbea39b58ba1501cc1f7b3c9ae939774", "filename": "gcc/testsuite/gfortran.dg/open_status_2.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgfortran.dg%2Fopen_status_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgfortran.dg%2Fopen_status_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fopen_status_2.f90?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -2,7 +2,7 @@\n ! PR 24945\n ! Test reopening file without status specifier or with\n ! status='unknown'. The standard says that these two must behave\n-! identically, but the actual behaviour is processor dependent.\n+! identically, but the actual behavior is processor dependent.\n program open_status_2\n   open(10, file=\"f\", form='unformatted', status='unknown')\n   open(10, file=\"f\", form='unformatted', status='unknown')"}, {"sha": "d5b56cd3957e0891b61963bb5b1cbb149f1181dc", "filename": "gcc/testsuite/gfortran.dg/used_types_15.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgfortran.dg%2Fused_types_15.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgfortran.dg%2Fused_types_15.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fused_types_15.f90?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -10,7 +10,7 @@ MODULE class_dummy_atom_types\n END TYPE\n \n TYPE :: dummy_atom\n-  TYPE(dummy_atom_list) :: neighbours\n+  TYPE(dummy_atom_list) :: neighbors\n END TYPE\n \n TYPE :: dummy_atom_model"}, {"sha": "7a298adbb96137ebf6418d9cd5805e5591b56751", "filename": "gcc/testsuite/gfortran.dg/used_types_16.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgfortran.dg%2Fused_types_16.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fgfortran.dg%2Fused_types_16.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fused_types_16.f90?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -16,7 +16,7 @@ MODULE class_dummy_atom_types\n END TYPE\r\n \r\n TYPE :: dummy_atom_private\r\n-  TYPE(dummy_atom_list)       :: neighbours\r\n+  TYPE(dummy_atom_list)       :: neighbors\r\n END TYPE\r\n END MODULE\r\n \r"}, {"sha": "58b8f367439ca5e0f6e86d71338183bbc5b794ce", "filename": "gcc/testsuite/obj-c++.dg/attributes/method-nonnull-1.mm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fmethod-nonnull-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fmethod-nonnull-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fmethod-nonnull-1.mm?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -18,7 +18,7 @@ - (void) insertObject: (id)object  atIndex: (size_t)index __attribute__ ((nonnul\n + (void) insertObject: (id)object  atIndex: (size_t)index  andObject: (id)anotherObject  atIndex: (size_t)anotherIndex __attribute__ ((nonnull (1, 3)));\n - (void) insertObject: (id)object  atIndex: (size_t)index  andObject: (id)anotherObject  atIndex: (size_t)anotherIndex __attribute__ ((nonnull (1, 3)));\n \n-/* Test the behaviour with invalid code.  */\n+/* Test the behavior with invalid code.  */\n + (void) removeObject: (id)object __attribute__ ((nonnull (0))); /* { dg-error \"out-of-range\" } */\n - (void) removeObject: (id)object __attribute__ ((nonnull (0))); /* { dg-error \"out-of-range\" } */\n "}, {"sha": "7806d6faa361696074be50439ef66b7ed5828e5c", "filename": "gcc/testsuite/obj-c++.dg/gnu-api-2-class-meta.mm", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fgnu-api-2-class-meta.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fgnu-api-2-class-meta.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fgnu-api-2-class-meta.mm?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -11,9 +11,9 @@ Functions that manipulate methods (adding, replacing methods)\n   Functions that manipulate instances, instance variables, properties\n   and protocols at the moment must take a normal class as argument;\n   calling them with a meta class as argument is of no particular use\n-  and generally produces a behaviour that is undocumented and/or\n+  and generally produces a behavior that is undocumented and/or\n   undefined (and this is true with all runtimes).  As in the future\n-  this behaviour may be defined or documented (for example, if class\n+  this behavior may be defined or documented (for example, if class\n   variables are implemented as instance variables of meta classes) we\n   avoid testing it for compatibility with future runtimes.  */\n "}, {"sha": "97bf84b6fc401ec11f07a5d682336eee377b3886", "filename": "gcc/testsuite/obj-c++.dg/gnu-api-2-method.mm", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fgnu-api-2-method.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fgnu-api-2-method.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fgnu-api-2-method.mm?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -90,14 +90,14 @@ int main ()\n     /* Swap the methods.  */\n     method_exchangeImplementations (method_a, method_b);\n \n-    /* Check that behaviour has changed.  */\n+    /* Check that behavior has changed.  */\n     if ([object variable] != nil  ||  [object constant] != object)\n       abort ();\n \n     /* Swap the methods again.  */\n     method_exchangeImplementations (method_a, method_b);\n     \n-    /* Check that behaviour is back to normal.  */\n+    /* Check that behavior is back to normal.  */\n     if ([object variable] != object  ||  [object constant] != nil)\n       abort ();\n   }\n@@ -213,15 +213,15 @@ int main ()\n     if (method_setImplementation (method_a, original_imp_b) != original_imp_a)\n       abort ();\n \n-    /* Check that behaviour has changed.  */\n+    /* Check that behavior has changed.  */\n     if ([object variable] != nil  ||  [object constant] != nil)\n       abort ();\n \n     /* Put the original method back.  */\n     if (method_setImplementation (method_a, original_imp_a) != original_imp_b)\n       abort ();\n     \n-    /* Check that behaviour is back to normal.  */\n+    /* Check that behavior is back to normal.  */\n     if ([object variable] != object  ||  [object constant] != nil)\n       abort ();\n   }"}, {"sha": "b60d5a6ba5bda52c84d6c835ee2af604c03612ec", "filename": "gcc/testsuite/objc.dg/attributes/method-nonnull-1.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fmethod-nonnull-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fmethod-nonnull-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fmethod-nonnull-1.m?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -18,7 +18,7 @@ - (void) insertObject: (id)object  atIndex: (size_t)index __attribute__ ((nonnul\n + (void) insertObject: (id)object  atIndex: (size_t)index  andObject: (id)anotherObject  atIndex: (size_t)anotherIndex __attribute__ ((nonnull (1, 3)));\n - (void) insertObject: (id)object  atIndex: (size_t)index  andObject: (id)anotherObject  atIndex: (size_t)anotherIndex __attribute__ ((nonnull (1, 3)));\n \n-/* Test the behaviour with invalid code.  */\n+/* Test the behavior with invalid code.  */\n + (void) removeObject: (id)object __attribute__ ((nonnull (0))); /* { dg-error \"out-of-range\" } */\n - (void) removeObject: (id)object __attribute__ ((nonnull (0))); /* { dg-error \"out-of-range\" } */\n "}, {"sha": "07e0ba2884ad82573033b77e2921458beac5c508", "filename": "gcc/testsuite/objc.dg/gnu-api-2-class-meta.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-api-2-class-meta.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-api-2-class-meta.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-api-2-class-meta.m?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -11,9 +11,9 @@ Functions that manipulate methods (adding, replacing methods)\n   Functions that manipulate instances, instance variables, properties\n   and protocols at the moment must take a normal class as argument;\n   calling them with a meta class as argument is of no particular use\n-  and generally produces a behaviour that is undocumented and/or\n+  and generally produces a behavior that is undocumented and/or\n   undefined (and this is true with all runtimes).  As in the future\n-  this behaviour may be defined or documented (for example, if class\n+  this behavior may be defined or documented (for example, if class\n   variables are implemented as instance variables of meta classes) we\n   avoid testing it for compatibility with future runtimes.  */\n "}, {"sha": "0c4fe4f0c5e1e9d12c56970ed2230447570efb4e", "filename": "gcc/testsuite/objc.dg/gnu-api-2-method.m", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-api-2-method.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-api-2-method.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-api-2-method.m?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -90,14 +90,14 @@ int main(int argc, void **args)\n     /* Swap the methods.  */\n     method_exchangeImplementations (method_a, method_b);\n \n-    /* Check that behaviour has changed.  */\n+    /* Check that behavior has changed.  */\n     if ([object variable] != nil  ||  [object constant] != object)\n       abort ();\n \n     /* Swap the methods again.  */\n     method_exchangeImplementations (method_a, method_b);\n     \n-    /* Check that behaviour is back to normal.  */\n+    /* Check that behavior is back to normal.  */\n     if ([object variable] != object  ||  [object constant] != nil)\n       abort ();\n   }\n@@ -213,15 +213,15 @@ int main(int argc, void **args)\n     if (method_setImplementation (method_a, original_imp_b) != original_imp_a)\n       abort ();\n \n-    /* Check that behaviour has changed.  */\n+    /* Check that behavior has changed.  */\n     if ([object variable] != nil  ||  [object constant] != nil)\n       abort ();\n \n     /* Put the original method back.  */\n     if (method_setImplementation (method_a, original_imp_a) != original_imp_b)\n       abort ();\n     \n-    /* Check that behaviour is back to normal.  */\n+    /* Check that behavior is back to normal.  */\n     if ([object variable] != object  ||  [object constant] != nil)\n       abort ();\n   }"}, {"sha": "073c1c78877c7025c086572fb867fb7a23825cf7", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -4430,7 +4430,7 @@ expand_call_inline (basic_block bb, gimple *stmt, copy_body_data *id)\n \n       if (lookup_attribute (\"always_inline\", DECL_ATTRIBUTES (fn))\n           /* For extern inline functions that get redefined we always\n-\t     silently ignored always_inline flag. Better behaviour would\n+\t     silently ignored always_inline flag. Better behavior would\n \t     be to be able to keep both bodies and use extern inline body\n \t     for inlining, but we can't do that because frontends overwrite\n \t     the body.  */"}, {"sha": "5d327902c537fd9594154e0f3e5a457ed6d096af", "filename": "gcc/tree-ssa-tail-merge.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftree-ssa-tail-merge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftree-ssa-tail-merge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-tail-merge.c?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -1407,7 +1407,7 @@ find_clusters_1 (same_succ *same_succ)\n \t  if (BB_CLUSTER (bb1) != NULL && BB_CLUSTER (bb1) == BB_CLUSTER (bb2))\n \t    continue;\n \n-\t  /* Limit quadratic behaviour.  */\n+\t  /* Limit quadratic behavior.  */\n \t  nr_comparisons++;\n \t  if (nr_comparisons > max_comparisons)\n \t    break;"}, {"sha": "765f6f7a02a5e2a09781e788793481e61bb510b2", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c58255170517b1b677ab0fac5cff46cc27c1dbd/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=9c58255170517b1b677ab0fac5cff46cc27c1dbd", "patch": "@@ -3030,7 +3030,7 @@ vect_prune_runtime_alias_test_list (loop_vec_info loop_vinfo)\n   comp_alias_ddrs.qsort (comp_dr_with_seg_len_pair);\n \n   /* Third, we scan the sorted dr pairs and check if we can combine\n-     alias checks of two neighbouring dr pairs.  */\n+     alias checks of two neighboring dr pairs.  */\n   for (size_t i = 1; i < comp_alias_ddrs.length (); ++i)\n     {\n       /* Deal with two ddrs (dr_a1, dr_b1) and (dr_a2, dr_b2).  */"}]}