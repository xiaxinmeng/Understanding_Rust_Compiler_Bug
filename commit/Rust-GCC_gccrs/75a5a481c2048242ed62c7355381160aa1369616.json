{"sha": "75a5a481c2048242ed62c7355381160aa1369616", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzVhNWE0ODFjMjA0ODI0MmVkNjJjNzM1NTM4MTE2MGFhMTM2OTYxNg==", "commit": {"author": {"name": "Sascha Brawer", "email": "brawer@dandelis.ch", "date": "2003-10-21T13:25:46Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-10-21T13:25:46Z"}, "message": "Fix for bug #2944, reported by David Holmes <dholmes@dltech.com.au>\n\n2003-10-21  Sascha Brawer  <brawer@dandelis.ch>\n\n\tFix for bug #2944, reported by David Holmes <dholmes@dltech.com.au>\n        * java/util/logging/ErrorManager.java (everUsed): Made volatile.\n        (error): Synchronize on instance, not class.\n\nFrom-SVN: r72750", "tree": {"sha": "a5cbe718127a2194f3229dcdf80e56a45134e51a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5cbe718127a2194f3229dcdf80e56a45134e51a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75a5a481c2048242ed62c7355381160aa1369616", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75a5a481c2048242ed62c7355381160aa1369616", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75a5a481c2048242ed62c7355381160aa1369616", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75a5a481c2048242ed62c7355381160aa1369616/comments", "author": null, "committer": null, "parents": [{"sha": "63d8374488ca66d8349be60abe4659032a15125b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63d8374488ca66d8349be60abe4659032a15125b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63d8374488ca66d8349be60abe4659032a15125b"}], "stats": {"total": 27, "additions": 24, "deletions": 3}, "files": [{"sha": "aa3f79ec8c39e4153fa47260f76db35dd8b9e338", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a5a481c2048242ed62c7355381160aa1369616/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a5a481c2048242ed62c7355381160aa1369616/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=75a5a481c2048242ed62c7355381160aa1369616", "patch": "@@ -1,3 +1,9 @@\n+2003-10-21  Sascha Brawer  <brawer@dandelis.ch>\n+\n+\tFix for bug #2944, reported by David Holmes <dholmes@dltech.com.au>\n+        * java/util/logging/ErrorManager.java (everUsed): Made volatile.\n+        (error): Synchronize on instance, not class.\n+\n 2003-10-21  Mark Wielaard  <mark@klomp.org>\n \n \tReported by M.Negovanovic"}, {"sha": "7381a5227aca922797740d857903dea7e472116d", "filename": "libjava/java/util/logging/ErrorManager.java", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a5a481c2048242ed62c7355381160aa1369616/libjava%2Fjava%2Futil%2Flogging%2FErrorManager.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a5a481c2048242ed62c7355381160aa1369616/libjava%2Fjava%2Futil%2Flogging%2FErrorManager.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Flogging%2FErrorManager.java?ref=75a5a481c2048242ed62c7355381160aa1369616", "patch": "@@ -2,7 +2,7 @@\n    -- a class for dealing with errors that a Handler encounters\n       during logging\n \n-Copyright (C) 2002 Free Software Foundation, Inc.\n+Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -100,7 +100,16 @@\n   public static final int FORMAT_FAILURE = 5;\n \n \n-  private boolean everUsed = false;\n+  /**\n+   * Indicates whether the {@link #error} method of this ErrorManager\n+   * has ever been used.\n+   *\n+   * Declared volatile in order to correctly support the\n+   * double-checked locking idiom (once the revised Java Memory Model\n+   * gets adopted); see Classpath bug #2944.\n+   */\n+  private volatile boolean everUsed = false;\n+\n \n   public ErrorManager()\n   {\n@@ -125,13 +134,19 @@ public void error(String message, Exception ex, int errorCode)\n     if (everUsed)\n       return;\n \n-    synchronized (ErrorManager.class)\n+    synchronized (this)\n     {\n       /* The double check is intentional. If the first check was\n        * omitted, the monitor would have to be entered every time\n        * error() method was called. If the second check was\n        * omitted, the code below could be executed by multiple\n        * threads simultaneously.\n+       *\n+       * This is the 'double-checked locking' idiom, which is broken\n+       * with the current version of the Java memory model.  However,\n+       * we assume that JVMs will have adopted a revised version of\n+       * the Java Memory Model by the time GNU Classpath gains\n+       * widespread acceptance. See Classpath bug #2944.\n        */\n       if (everUsed)\n \treturn;"}]}