{"sha": "e9e32ee6e8df82ba1d103ec2c501ecc7c185bc2e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTllMzJlZTZlOGRmODJiYTFkMTAzZWMyYzUwMWVjYzdjMTg1YmMyZQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2015-12-02T18:24:23Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2015-12-02T18:24:23Z"}, "message": "Fix TYPE_MAIN_VARIANT construction for arrays of qualified typedefs (PR c/68162).\n\nPR c/68162 reports a spurious warning about incompatible types\ninvolving arrays of const double, constructed in one place using a\ntypedef for const double and in another place literally using const\ndouble.\n\nThe problem is that the array of the typedef was incorrectly\nconstructed without a TYPE_MAIN_VARIANT being an array of unqualified\nelements as it should be (though it seems some more recent change\nresulted in this producing incorrect diagnostics, likely the support\nfor C++-style handling of arrays of qualified type).  This patch fixes\nthe logic in grokdeclarator to determine first_non_attr_kind, which is\nused to determine whether it is necessary to use the TYPE_MAIN_VARIANT\nof the type in the declaration specifiers.\n\nHowever, fixing that logic introduces a failure of\ngcc.dg/debug/dwarf2/pr47939-4.c, a test introduced along with\nfirst_non_attr_kind.  Thus, it is necessary to track the original\nqualified typedef when qualifying an array type, to use it rather than\na newly-constructed type, to avoid regressing regarding typedef names\nin debug info.  This is done along lines I suggested in\n<https://gcc.gnu.org/bugzilla/show_bug.cgi?id=47939#c6>: track the\noriginal type and the number of levels of array indirection at which\nit appears, and, in possibly affected cases, pass extra arguments to\nc_build_qualified_type (with default arguments to avoid needing to\npass those extra arguments explicitly everywhere).  Given Richard's\nrecent fix to dwarf2out.c, this allows the C bug to be fixed without\ncausing debug information regressions.\n\nBootstrapped with no regressions on x86_64-pc-linux-gnu.\n\ngcc/c:\n\tPR c/68162\n\t* c-decl.c (grokdeclarator): Set first_non_attr_kind before\n\tfollowing link from declarator to next declarator.  Track original\n\tqualified type and pass it to c_build_qualified_type.\n\t* c-typeck.c (c_build_qualified_type): Add arguments\n\torig_qual_type and orig_qual_indirect.\n\ngcc/c-family:\n\tPR c/68162\n\t* c-common.h (c_build_qualified_type): Add extra default\n\targuments.\n\ngcc/cp:\n\tPR c/68162\n\t* tree.c (c_build_qualified_type): Add extra arguments.\n\ngcc/testsuite:\n\tPR c/68162\n\t* gcc.dg/pr68162-1.c: New test.\n\nFrom-SVN: r231194", "tree": {"sha": "e7fbe443ab146c38eb72dcfc64ff8add5a7da19b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7fbe443ab146c38eb72dcfc64ff8add5a7da19b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9e32ee6e8df82ba1d103ec2c501ecc7c185bc2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9e32ee6e8df82ba1d103ec2c501ecc7c185bc2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9e32ee6e8df82ba1d103ec2c501ecc7c185bc2e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9e32ee6e8df82ba1d103ec2c501ecc7c185bc2e/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "701fa326a18df74cabd79cfef314ebbe5847d23b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/701fa326a18df74cabd79cfef314ebbe5847d23b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/701fa326a18df74cabd79cfef314ebbe5847d23b"}], "stats": {"total": 105, "additions": 82, "deletions": 23}, "files": [{"sha": "b89812f12cb4f310e7abb50f4f83dc59c730629b", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e32ee6e8df82ba1d103ec2c501ecc7c185bc2e/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e32ee6e8df82ba1d103ec2c501ecc7c185bc2e/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=e9e32ee6e8df82ba1d103ec2c501ecc7c185bc2e", "patch": "@@ -1,3 +1,9 @@\n+2015-12-02  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/68162\n+\t* c-common.h (c_build_qualified_type): Add extra default\n+\targuments.\n+\n 2015-12-01  Julian Brown  <julian@codesourcery.com>\n \t    Cesar Philippidis  <cesar@codesourcery.com>\n \t    James Norris  <James_Norris@mentor.com>"}, {"sha": "6e60e345a3bed5dc467570cc98dea6428463ec5c", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e32ee6e8df82ba1d103ec2c501ecc7c185bc2e/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e32ee6e8df82ba1d103ec2c501ecc7c185bc2e/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=e9e32ee6e8df82ba1d103ec2c501ecc7c185bc2e", "patch": "@@ -866,7 +866,7 @@ extern tree pointer_int_sum (location_t, enum tree_code, tree, tree,\n \t\t\t     bool = true);\n \n /* Add qualifiers to a type, in the fashion for C.  */\n-extern tree c_build_qualified_type (tree, int);\n+extern tree c_build_qualified_type (tree, int, tree = NULL_TREE, size_t = 0);\n \n /* Build tree nodes and builtin functions common to both C and C++ language\n    frontends.  */"}, {"sha": "bd214403b67c6fb7b4a474bd5326734e049880cf", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e32ee6e8df82ba1d103ec2c501ecc7c185bc2e/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e32ee6e8df82ba1d103ec2c501ecc7c185bc2e/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=e9e32ee6e8df82ba1d103ec2c501ecc7c185bc2e", "patch": "@@ -1,3 +1,12 @@\n+2015-12-02  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/68162\n+\t* c-decl.c (grokdeclarator): Set first_non_attr_kind before\n+\tfollowing link from declarator to next declarator.  Track original\n+\tqualified type and pass it to c_build_qualified_type.\n+\t* c-typeck.c (c_build_qualified_type): Add arguments\n+\torig_qual_type and orig_qual_indirect.\n+\n 2015-12-02  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* c-parser.c (c_parser_omp_clause_name)"}, {"sha": "9ad821925a0a124ea034724cd5743d79a7e773ff", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e32ee6e8df82ba1d103ec2c501ecc7c185bc2e/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e32ee6e8df82ba1d103ec2c501ecc7c185bc2e/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=e9e32ee6e8df82ba1d103ec2c501ecc7c185bc2e", "patch": "@@ -5351,6 +5351,8 @@ grokdeclarator (const struct c_declarator *declarator,\n   tree returned_attrs = NULL_TREE;\n   bool bitfield = width != NULL;\n   tree element_type;\n+  tree orig_qual_type = NULL;\n+  size_t orig_qual_indirect = 0;\n   struct c_arg_info *arg_info = 0;\n   addr_space_t as1, as2, address_space;\n   location_t loc = UNKNOWN_LOCATION;\n@@ -5389,9 +5391,9 @@ grokdeclarator (const struct c_declarator *declarator,\n \tcase cdk_function:\n \tcase cdk_pointer:\n \t  funcdef_syntax = (decl->kind == cdk_function);\n-\t  decl = decl->declarator;\n \t  if (first_non_attr_kind == cdk_attrs)\n \t    first_non_attr_kind = decl->kind;\n+\t  decl = decl->declarator;\n \t  break;\n \n \tcase cdk_attrs:\n@@ -5513,12 +5515,17 @@ grokdeclarator (const struct c_declarator *declarator,\n   if ((TREE_CODE (type) == ARRAY_TYPE\n        || first_non_attr_kind == cdk_array)\n       && TYPE_QUALS (element_type))\n-    type = TYPE_MAIN_VARIANT (type);\n+    {\n+      orig_qual_type = type;\n+      type = TYPE_MAIN_VARIANT (type);\n+    }\n   type_quals = ((constp ? TYPE_QUAL_CONST : 0)\n \t\t| (restrictp ? TYPE_QUAL_RESTRICT : 0)\n \t\t| (volatilep ? TYPE_QUAL_VOLATILE : 0)\n \t\t| (atomicp ? TYPE_QUAL_ATOMIC : 0)\n \t\t| ENCODE_QUAL_ADDR_SPACE (address_space));\n+  if (type_quals != TYPE_QUALS (element_type))\n+    orig_qual_type = NULL_TREE;\n \n   /* Applying the _Atomic qualifier to an array type (through the use\n      of typedefs or typeof) must be detected here.  If the qualifier\n@@ -6013,6 +6020,7 @@ grokdeclarator (const struct c_declarator *declarator,\n \t\tarray_ptr_attrs = NULL_TREE;\n \t\tarray_parm_static = 0;\n \t      }\n+\t    orig_qual_indirect++;\n \t    break;\n \t  }\n \tcase cdk_function:\n@@ -6022,6 +6030,7 @@ grokdeclarator (const struct c_declarator *declarator,\n \t       attributes.  */\n \t    bool really_funcdef = false;\n \t    tree arg_types;\n+\t    orig_qual_type = NULL_TREE;\n \t    if (funcdef_flag)\n \t      {\n \t\tconst struct c_declarator *t = declarator->declarator;\n@@ -6122,7 +6131,9 @@ grokdeclarator (const struct c_declarator *declarator,\n \t      pedwarn (loc, OPT_Wpedantic,\n \t\t       \"ISO C forbids qualified function types\");\n \t    if (type_quals)\n-\t      type = c_build_qualified_type (type, type_quals);\n+\t      type = c_build_qualified_type (type, type_quals, orig_qual_type,\n+\t\t\t\t\t     orig_qual_indirect);\n+\t    orig_qual_type = NULL_TREE;\n \t    size_varies = false;\n \n \t    /* When the pointed-to type involves components of variable size,\n@@ -6304,7 +6315,8 @@ grokdeclarator (const struct c_declarator *declarator,\n \tpedwarn (loc, OPT_Wpedantic,\n \t\t \"ISO C forbids qualified function types\");\n       if (type_quals)\n-\ttype = c_build_qualified_type (type, type_quals);\n+\ttype = c_build_qualified_type (type, type_quals, orig_qual_type,\n+\t\t\t\t       orig_qual_indirect);\n       decl = build_decl (declarator->id_loc,\n \t\t\t TYPE_DECL, declarator->u.id, type);\n       if (declspecs->explicit_signed_p)\n@@ -6357,7 +6369,8 @@ grokdeclarator (const struct c_declarator *declarator,\n \tpedwarn (loc, OPT_Wpedantic,\n \t\t \"ISO C forbids const or volatile function types\");\n       if (type_quals)\n-\ttype = c_build_qualified_type (type, type_quals);\n+\ttype = c_build_qualified_type (type, type_quals, orig_qual_type,\n+\t\t\t\t       orig_qual_indirect);\n       return type;\n     }\n \n@@ -6405,7 +6418,8 @@ grokdeclarator (const struct c_declarator *declarator,\n \t    /* Transfer const-ness of array into that of type pointed to.  */\n \t    type = TREE_TYPE (type);\n \t    if (type_quals)\n-\t      type = c_build_qualified_type (type, type_quals);\n+\t      type = c_build_qualified_type (type, type_quals, orig_qual_type,\n+\t\t\t\t\t     orig_qual_indirect);\n \t    type = c_build_pointer_type (type);\n \t    type_quals = array_ptr_quals;\n \t    if (type_quals)\n@@ -6496,7 +6510,8 @@ grokdeclarator (const struct c_declarator *declarator,\n \t    TYPE_DOMAIN (type) = build_range_type (sizetype, size_zero_node,\n \t\t\t\t\t\t   NULL_TREE);\n \t  }\n-\ttype = c_build_qualified_type (type, type_quals);\n+\ttype = c_build_qualified_type (type, type_quals, orig_qual_type,\n+\t\t\t\t       orig_qual_indirect);\n \tdecl = build_decl (declarator->id_loc,\n \t\t\t   FIELD_DECL, declarator->u.id, type);\n \tDECL_NONADDRESSABLE_P (decl) = bitfield;\n@@ -6608,7 +6623,8 @@ grokdeclarator (const struct c_declarator *declarator,\n \t/* An uninitialized decl with `extern' is a reference.  */\n \tint extern_ref = !initialized && storage_class == csc_extern;\n \n-\ttype = c_build_qualified_type (type, type_quals);\n+\ttype = c_build_qualified_type (type, type_quals, orig_qual_type,\n+\t\t\t\t       orig_qual_indirect);\n \n \t/* C99 6.2.2p7: It is invalid (compile-time undefined\n \t   behavior) to create an 'extern' declaration for a"}, {"sha": "50709729c79f89b236ddade4433647971fa17350", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 24, "deletions": 13, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e32ee6e8df82ba1d103ec2c501ecc7c185bc2e/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e32ee6e8df82ba1d103ec2c501ecc7c185bc2e/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=e9e32ee6e8df82ba1d103ec2c501ecc7c185bc2e", "patch": "@@ -13337,10 +13337,15 @@ c_finish_transaction (location_t loc, tree block, int flags)\n }\n \n /* Make a variant type in the proper way for C/C++, propagating qualifiers\n-   down to the element type of an array.  */\n+   down to the element type of an array.  If ORIG_QUAL_TYPE is not\n+   NULL, then it should be used as the qualified type\n+   ORIG_QUAL_INDIRECT levels down in array type derivation (to\n+   preserve information about the typedef name from which an array\n+   type was derived).  */\n \n tree\n-c_build_qualified_type (tree type, int type_quals)\n+c_build_qualified_type (tree type, int type_quals, tree orig_qual_type,\n+\t\t\tsize_t orig_qual_indirect)\n {\n   if (type == error_mark_node)\n     return type;\n@@ -13349,18 +13354,22 @@ c_build_qualified_type (tree type, int type_quals)\n     {\n       tree t;\n       tree element_type = c_build_qualified_type (TREE_TYPE (type),\n-\t\t\t\t\t\t  type_quals);\n+\t\t\t\t\t\t  type_quals, orig_qual_type,\n+\t\t\t\t\t\t  orig_qual_indirect - 1);\n \n       /* See if we already have an identically qualified type.  */\n-      for (t = TYPE_MAIN_VARIANT (type); t; t = TYPE_NEXT_VARIANT (t))\n-\t{\n-\t  if (TYPE_QUALS (strip_array_types (t)) == type_quals\n-\t      && TYPE_NAME (t) == TYPE_NAME (type)\n-\t      && TYPE_CONTEXT (t) == TYPE_CONTEXT (type)\n-\t      && attribute_list_equal (TYPE_ATTRIBUTES (t),\n-\t\t\t\t       TYPE_ATTRIBUTES (type)))\n-\t    break;\n-\t}\n+      if (orig_qual_type && orig_qual_indirect == 0)\n+\tt = orig_qual_type;\n+      else\n+\tfor (t = TYPE_MAIN_VARIANT (type); t; t = TYPE_NEXT_VARIANT (t))\n+\t  {\n+\t    if (TYPE_QUALS (strip_array_types (t)) == type_quals\n+\t\t&& TYPE_NAME (t) == TYPE_NAME (type)\n+\t\t&& TYPE_CONTEXT (t) == TYPE_CONTEXT (type)\n+\t\t&& attribute_list_equal (TYPE_ATTRIBUTES (t),\n+\t\t\t\t\t TYPE_ATTRIBUTES (type)))\n+\t      break;\n+\t  }\n       if (!t)\n \t{\n           tree domain = TYPE_DOMAIN (type);\n@@ -13404,7 +13413,9 @@ c_build_qualified_type (tree type, int type_quals)\n       type_quals &= ~TYPE_QUAL_RESTRICT;\n     }\n \n-  tree var_type = build_qualified_type (type, type_quals);\n+  tree var_type = (orig_qual_type && orig_qual_indirect == 0\n+\t\t   ? orig_qual_type\n+\t\t   : build_qualified_type (type, type_quals));\n   /* A variant type does not inherit the list of incomplete vars from the\n      type main variant.  */\n   if (RECORD_OR_UNION_TYPE_P (var_type))"}, {"sha": "ebd567a0dce7600f3ec5eff471cc7daad5757b78", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e32ee6e8df82ba1d103ec2c501ecc7c185bc2e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e32ee6e8df82ba1d103ec2c501ecc7c185bc2e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e9e32ee6e8df82ba1d103ec2c501ecc7c185bc2e", "patch": "@@ -1,3 +1,8 @@\n+2015-12-02  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/68162\n+\t* tree.c (c_build_qualified_type): Add extra arguments.\n+\n 2015-12-02  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR c++/68290"}, {"sha": "5dad0a77d41757dc20421aa1c95b11db4ebc0d4a", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e32ee6e8df82ba1d103ec2c501ecc7c185bc2e/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e32ee6e8df82ba1d103ec2c501ecc7c185bc2e/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=e9e32ee6e8df82ba1d103ec2c501ecc7c185bc2e", "patch": "@@ -995,7 +995,8 @@ move (tree expr)\n    the C version of this function does not properly maintain canonical\n    types (which are not used in C).  */\n tree\n-c_build_qualified_type (tree type, int type_quals)\n+c_build_qualified_type (tree type, int type_quals, tree /* orig_qual_type */,\n+\t\t\tsize_t /* orig_qual_indirect */)\n {\n   return cp_build_qualified_type (type, type_quals);\n }"}, {"sha": "feb0a0ae523bab020a1d038bfafdcb054d70cf9d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e32ee6e8df82ba1d103ec2c501ecc7c185bc2e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e32ee6e8df82ba1d103ec2c501ecc7c185bc2e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e9e32ee6e8df82ba1d103ec2c501ecc7c185bc2e", "patch": "@@ -1,3 +1,8 @@\n+2015-12-02  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/68162\n+\t* gcc.dg/pr68162-1.c: New test.\n+\n 2015-12-02  Aditya Kumar  <aditya.k7@samsung.com>\n \t    Sebastian Pop  <s.pop@samsung.com>\n "}, {"sha": "a2c495365fed95dc147dd781a45437b082de2fad", "filename": "gcc/testsuite/gcc.dg/pr68162-1.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e32ee6e8df82ba1d103ec2c501ecc7c185bc2e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr68162-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e32ee6e8df82ba1d103ec2c501ecc7c185bc2e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr68162-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr68162-1.c?ref=e9e32ee6e8df82ba1d103ec2c501ecc7c185bc2e", "patch": "@@ -0,0 +1,6 @@\n+/* Test handling of pointers to arrays of const elements involving a\n+   typedef.  PR c/68162.  */\n+\n+typedef const double cd;\n+void f (const double (*)[]);\n+void g (void) { f ((cd (*)[]) 0); }"}]}