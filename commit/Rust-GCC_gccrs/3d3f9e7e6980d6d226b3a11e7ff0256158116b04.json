{"sha": "3d3f9e7e6980d6d226b3a11e7ff0256158116b04", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2QzZjllN2U2OTgwZDZkMjI2YjNhMTFlN2ZmMDI1NjE1ODExNmIwNA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-04-13T12:26:26Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-04-13T12:26:26Z"}, "message": "re PR debug/70628 (ICE in get_reg_rtx, at emit-rtl.c:1025)\n\n\tPR debug/70628\n\t* rtl.h (convert_memory_address_addr_space_1): New prototype.\n\t* explow.c (convert_memory_address_addr_space_1): No longer static,\n\tadd NO_EMIT argument and don't call convert_modes if true, pass\n\tit down recursively, remove break after return.\n\t(convert_memory_address_addr_space): Adjust caller.\n\t* simplify-rtx.c (simplify_unary_operation_1): Call\n\tconvert_memory_address_addr_space_1 instead of convert_memory_address,\n\tif it returns NULL, don't simplify.\n\n\t* gcc.dg/torture/pr70628.c: New test.\n\nFrom-SVN: r234933", "tree": {"sha": "be300b9024e7162275964cad1fdb901a5e2ac0f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be300b9024e7162275964cad1fdb901a5e2ac0f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d3f9e7e6980d6d226b3a11e7ff0256158116b04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d3f9e7e6980d6d226b3a11e7ff0256158116b04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d3f9e7e6980d6d226b3a11e7ff0256158116b04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d3f9e7e6980d6d226b3a11e7ff0256158116b04/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "12de22454259eae414bcaa0c3edd38ed0e40cf77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12de22454259eae414bcaa0c3edd38ed0e40cf77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12de22454259eae414bcaa0c3edd38ed0e40cf77"}], "stats": {"total": 119, "additions": 102, "deletions": 17}, "files": [{"sha": "1e03812a12a843c7b45c561c88e122953833af53", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d3f9e7e6980d6d226b3a11e7ff0256158116b04/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d3f9e7e6980d6d226b3a11e7ff0256158116b04/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3d3f9e7e6980d6d226b3a11e7ff0256158116b04", "patch": "@@ -1,3 +1,15 @@\n+2016-04-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/70628\n+\t* rtl.h (convert_memory_address_addr_space_1): New prototype.\n+\t* explow.c (convert_memory_address_addr_space_1): No longer static,\n+\tadd NO_EMIT argument and don't call convert_modes if true, pass\n+\tit down recursively, remove break after return.\n+\t(convert_memory_address_addr_space): Adjust caller.\n+\t* simplify-rtx.c (simplify_unary_operation_1): Call\n+\tconvert_memory_address_addr_space_1 instead of convert_memory_address,\n+\tif it returns NULL, don't simplify.\n+\n 2016-04-12  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR target/70630"}, {"sha": "48acd36b405e07d1f492191480e85c01caceb480", "filename": "gcc/explow.c", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d3f9e7e6980d6d226b3a11e7ff0256158116b04/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d3f9e7e6980d6d226b3a11e7ff0256158116b04/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=3d3f9e7e6980d6d226b3a11e7ff0256158116b04", "patch": "@@ -259,12 +259,14 @@ break_out_memory_refs (rtx x)\n    which way).  We take advantage of the fact that pointers are not allowed to\n    overflow by commuting arithmetic operations over conversions so that address\n    arithmetic insns can be used. IN_CONST is true if this conversion is inside\n-   a CONST.  */\n+   a CONST. NO_EMIT is true if no insns should be emitted, and instead\n+   it should return NULL if it can't be simplified without emitting insns.  */\n \n-static rtx\n+rtx\n convert_memory_address_addr_space_1 (machine_mode to_mode ATTRIBUTE_UNUSED,\n \t\t\t\t     rtx x, addr_space_t as ATTRIBUTE_UNUSED,\n-\t\t\t\t     bool in_const ATTRIBUTE_UNUSED)\n+\t\t\t\t     bool in_const ATTRIBUTE_UNUSED,\n+\t\t\t\t     bool no_emit ATTRIBUTE_UNUSED)\n {\n #ifndef POINTERS_EXTEND_UNSIGNED\n   gcc_assert (GET_MODE (x) == to_mode || GET_MODE (x) == VOIDmode);\n@@ -310,19 +312,16 @@ convert_memory_address_addr_space_1 (machine_mode to_mode ATTRIBUTE_UNUSED,\n       temp = gen_rtx_LABEL_REF (to_mode, LABEL_REF_LABEL (x));\n       LABEL_REF_NONLOCAL_P (temp) = LABEL_REF_NONLOCAL_P (x);\n       return temp;\n-      break;\n \n     case SYMBOL_REF:\n       temp = shallow_copy_rtx (x);\n       PUT_MODE (temp, to_mode);\n       return temp;\n-      break;\n \n     case CONST:\n-      return gen_rtx_CONST (to_mode,\n-\t\t\t    convert_memory_address_addr_space_1\n-\t\t\t      (to_mode, XEXP (x, 0), as, true));\n-      break;\n+      temp = convert_memory_address_addr_space_1 (to_mode, XEXP (x, 0), as,\n+\t\t\t\t\t\t  true, no_emit);\n+      return temp ? gen_rtx_CONST (to_mode, temp) : temp;\n \n     case PLUS:\n     case MULT:\n@@ -338,18 +337,25 @@ convert_memory_address_addr_space_1 (machine_mode to_mode ATTRIBUTE_UNUSED,\n \t      && CONST_INT_P (XEXP (x, 1))\n \t      && ((in_const && POINTERS_EXTEND_UNSIGNED != 0)\n \t\t  || XEXP (x, 1) == convert_memory_address_addr_space_1\n-\t\t\t\t     (to_mode, XEXP (x, 1), as, in_const)\n+\t\t\t\t     (to_mode, XEXP (x, 1), as, in_const,\n+\t\t\t\t      no_emit)\n                   || POINTERS_EXTEND_UNSIGNED < 0)))\n-\treturn gen_rtx_fmt_ee (GET_CODE (x), to_mode,\n-\t\t\t       convert_memory_address_addr_space_1\n-\t\t\t\t (to_mode, XEXP (x, 0), as, in_const),\n-\t\t\t       XEXP (x, 1));\n+\t{\n+\t  temp = convert_memory_address_addr_space_1 (to_mode, XEXP (x, 0),\n+\t\t\t\t\t\t      as, in_const, no_emit);\n+\t  return temp ? gen_rtx_fmt_ee (GET_CODE (x), to_mode,\n+\t\t\t\t\ttemp, XEXP (x, 1))\n+\t\t      : temp;\n+\t}\n       break;\n \n     default:\n       break;\n     }\n \n+  if (no_emit)\n+    return NULL_RTX;\n+\n   return convert_modes (to_mode, from_mode,\n \t\t\tx, POINTERS_EXTEND_UNSIGNED);\n #endif /* defined(POINTERS_EXTEND_UNSIGNED) */\n@@ -364,7 +370,7 @@ convert_memory_address_addr_space_1 (machine_mode to_mode ATTRIBUTE_UNUSED,\n rtx\n convert_memory_address_addr_space (machine_mode to_mode, rtx x, addr_space_t as)\n {\n-  return convert_memory_address_addr_space_1 (to_mode, x, as, false);\n+  return convert_memory_address_addr_space_1 (to_mode, x, as, false, false);\n }\n \f\n "}, {"sha": "8267252b19662c81de2ff16cee74e3bedf384530", "filename": "gcc/rtl.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d3f9e7e6980d6d226b3a11e7ff0256158116b04/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d3f9e7e6980d6d226b3a11e7ff0256158116b04/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=3d3f9e7e6980d6d226b3a11e7ff0256158116b04", "patch": "@@ -2747,6 +2747,8 @@ extern unsigned int subreg_highpart_offset (machine_mode,\n \t\t\t\t\t    machine_mode);\n extern int byte_lowpart_offset (machine_mode, machine_mode);\n extern rtx make_safe_from (rtx, rtx);\n+extern rtx convert_memory_address_addr_space_1 (machine_mode, rtx,\n+\t\t\t\t\t\taddr_space_t, bool, bool);\n extern rtx convert_memory_address_addr_space (machine_mode, rtx,\n \t\t\t\t\t      addr_space_t);\n #define convert_memory_address(to_mode,x) \\"}, {"sha": "fdc4b366c74d9ff61f00c2d5b640c727d54535a2", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d3f9e7e6980d6d226b3a11e7ff0256158116b04/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d3f9e7e6980d6d226b3a11e7ff0256158116b04/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=3d3f9e7e6980d6d226b3a11e7ff0256158116b04", "patch": "@@ -1482,7 +1482,14 @@ simplify_unary_operation_1 (enum rtx_code code, machine_mode mode, rtx op)\n \t\t  && REG_POINTER (SUBREG_REG (op))\n \t\t  && GET_MODE (SUBREG_REG (op)) == Pmode))\n \t  && !targetm.have_ptr_extend ())\n-\treturn convert_memory_address (Pmode, op);\n+\t{\n+\t  temp\n+\t    = convert_memory_address_addr_space_1 (Pmode, op,\n+\t\t\t\t\t\t   ADDR_SPACE_GENERIC, false,\n+\t\t\t\t\t\t   true);\n+\t  if (temp)\n+\t    return temp;\n+\t}\n #endif\n       break;\n \n@@ -1604,7 +1611,14 @@ simplify_unary_operation_1 (enum rtx_code code, machine_mode mode, rtx op)\n \t\t  && REG_POINTER (SUBREG_REG (op))\n \t\t  && GET_MODE (SUBREG_REG (op)) == Pmode))\n \t  && !targetm.have_ptr_extend ())\n-\treturn convert_memory_address (Pmode, op);\n+\t{\n+\t  temp\n+\t    = convert_memory_address_addr_space_1 (Pmode, op,\n+\t\t\t\t\t\t   ADDR_SPACE_GENERIC, false,\n+\t\t\t\t\t\t   true);\n+\t  if (temp)\n+\t    return temp;\n+\t}\n #endif\n       break;\n "}, {"sha": "427803644dac7aa8990a425eb15a8a1d0f9ac47b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d3f9e7e6980d6d226b3a11e7ff0256158116b04/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d3f9e7e6980d6d226b3a11e7ff0256158116b04/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3d3f9e7e6980d6d226b3a11e7ff0256158116b04", "patch": "@@ -1,3 +1,8 @@\n+2016-04-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/70628\n+\t* gcc.dg/torture/pr70628.c: New test.\n+\n 2016-04-12  Patrick Palka  <ppalka@gcc.gnu.org>\n \n \tPR c++/70610"}, {"sha": "00acae74b4dfb886e83a8909bc67943b8b8d929a", "filename": "gcc/testsuite/gcc.dg/torture/pr70628.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d3f9e7e6980d6d226b3a11e7ff0256158116b04/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr70628.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d3f9e7e6980d6d226b3a11e7ff0256158116b04/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr70628.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr70628.c?ref=3d3f9e7e6980d6d226b3a11e7ff0256158116b04", "patch": "@@ -0,0 +1,46 @@\n+/* PR debug/70628 */\n+/* { dg-do compile } */\n+/* { dg-options \"-g -w\" } */\n+\n+struct S { char s[64]; int *t; } *a;\n+char b[64];\n+int *foo (void);\n+struct S *bar (int *);\n+int baz (void);\n+\n+void\n+test (const char *p, long q)\n+{\n+  int *c;\n+  c = foo ();\n+  while (a = bar (c))\n+    {\n+      if (__builtin_strstr (p, \"ABCD\")\n+\t  || __builtin_strstr (p, \"EFGHI\")\n+\t  || __builtin_strstr (p, \"JKL\")\n+\t  || __builtin_strstr (p, \"MNOPQR\")\n+\t  || __builtin_strstr (p, \"STUV\")\n+\t  || __builtin_strstr (p, \"WXYZabcd\")\n+\t  || __builtin_strstr (p, \"efghij\")\n+\t  || __builtin_strstr (p, \"klmno\")\n+\t  || __builtin_strstr (p, \"pqrstuvw\")\n+\t  || __builtin_strstr (b, \"MNOPQR\") != \"EFGHI\"\n+\t  || __builtin_strstr (b, \"JKL\"))\n+\tif (__builtin_strstr (a->s, \"xyz12\"))\n+\t  continue;\n+      __builtin_printf (\"%p\\n\", a->t);\n+    }\n+  bar (c);\n+  while (a)\n+    if (__builtin_strstr (p, \"ABCD\")\n+\t|| __builtin_strstr (p, \"EFGHI\")\n+\t|| __builtin_strstr (p, \"JKL\")\n+\t|| __builtin_strstr (p, \"MNOPQR\")\n+\t|| __builtin_strstr (p, \"STUV\")\n+\t|| __builtin_strstr (p, \"WXYZabcd\")\n+\t|| __builtin_strstr (p, \"efghij\")\n+\t|| __builtin_strstr (p, \"klmno\")\n+\t|| __builtin_strstr (p, \"pqrstuvw\")\n+\t|| __builtin_strstr ((const char *) q, \"MNOPQR\"))\n+      baz ();\n+}"}]}