{"sha": "223c63e62ab44cb36102758dffd5ac8c9ab63bb1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjIzYzYzZTYyYWI0NGNiMzYxMDI3NThkZmZkNWFjOGM5YWI2M2JiMQ==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2018-06-11T20:01:40Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2018-06-11T20:01:40Z"}, "message": "PR tree-optimization/86083 - handle non-constant assignments in strlen\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/86083\n\t* tree-ssa-strlen.c (handle_char_store): Use tree_expr_nonzero_p.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/86083\n\t* gcc.dg/strlenopt-44.c: New test.\n\nFrom-SVN: r261452", "tree": {"sha": "c2cf4657e86b6d834d4725d513d683dbc6e29638", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2cf4657e86b6d834d4725d513d683dbc6e29638"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/223c63e62ab44cb36102758dffd5ac8c9ab63bb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/223c63e62ab44cb36102758dffd5ac8c9ab63bb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/223c63e62ab44cb36102758dffd5ac8c9ab63bb1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/223c63e62ab44cb36102758dffd5ac8c9ab63bb1/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "87cbbc45a950f382853e2e4cf494cdfab62f0e5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87cbbc45a950f382853e2e4cf494cdfab62f0e5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87cbbc45a950f382853e2e4cf494cdfab62f0e5b"}], "stats": {"total": 106, "additions": 103, "deletions": 3}, "files": [{"sha": "655a5141ac179706a650aad45bca2ab4ce4ddcb1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/223c63e62ab44cb36102758dffd5ac8c9ab63bb1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/223c63e62ab44cb36102758dffd5ac8c9ab63bb1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=223c63e62ab44cb36102758dffd5ac8c9ab63bb1", "patch": "@@ -1,3 +1,8 @@\n+2018-06-11  Martin Sebor  <msebor@redhat.com>\n+\n+\t* PR tree-optimization/86083\n+\t* tree-ssa-strlen.c (handle_char_store): Use tree_expr_nonzero_p.\n+\n 2018-06-11 Zhouyi Zhou <zhouzhouyi@gmail.com>\n \n \t* tree-eh.c (lower_eh_constructs_2): Add a comma to comment."}, {"sha": "3ded9ffe653fb6e4aba37d0ff629f1e492109bf7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/223c63e62ab44cb36102758dffd5ac8c9ab63bb1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/223c63e62ab44cb36102758dffd5ac8c9ab63bb1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=223c63e62ab44cb36102758dffd5ac8c9ab63bb1", "patch": "@@ -1,3 +1,8 @@\n+2018-06-11  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/86083\n+\t* gcc.dg/strlenopt-44.c: New test.\n+\n 2018-06-11  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/45521"}, {"sha": "0c0108832fcb86679301e8c1422bdd84cfab851c", "filename": "gcc/testsuite/gcc.dg/strlenopt-44.c", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/223c63e62ab44cb36102758dffd5ac8c9ab63bb1/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-44.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/223c63e62ab44cb36102758dffd5ac8c9ab63bb1/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-44.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-44.c?ref=223c63e62ab44cb36102758dffd5ac8c9ab63bb1", "patch": "@@ -0,0 +1,92 @@\n+/* PR tree-optimization/86083 - handle non-constant assignments in strlen\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall -fdump-tree-optimized\" } */\n+\n+#include \"range.h\"\n+#include \"strlenopt.h\"\n+\n+#define CAT(x, y) x ## y\n+#define CONCAT(x, y) CAT (x, y)\n+#define FAILNAME(name) CONCAT (call_ ## name ##_on_line_, __LINE__)\n+\n+#define FAIL(name) do {\t\t\t\t\\\n+    extern void FAILNAME (name) (void);\t\t\\\n+    FAILNAME (name)();\t\t\t\t\\\n+  } while (0)\n+\n+/* Macro to emit a call to funcation named\n+     call_in_true_branch_not_eliminated_on_line_NNN()\n+   for each call that's expected to be eliminated.  The dg-final\n+   scan-tree-dump-time directive at the bottom of the test verifies\n+   that no such call appears in output.  */\n+#define ASSERT_ELIM(expr)\t\t\t\t\t\t\\\n+  if (!(expr)) FAIL (in_true_branch_not_eliminated); else (void)0\n+\n+/* Macro to emit a call to a function named\n+     call_made_in_{true,false}_branch_on_line_NNN()\n+   for each call that's expected to be retained.  The dg-final\n+   scan-tree-dump-time directive at the bottom of the test verifies\n+   that the expected number of both kinds of calls appears in output\n+   (a pair for each line with the invocation of the KEEP() macro.  */\n+#define ASSERT_KEEP(expr)\t\t\t\\\n+  if (expr)\t\t\t\t\t\\\n+    FAIL (made_in_true_branch);\t\t\t\\\n+  else\t\t\t\t\t\t\\\n+    FAIL (made_in_false_branch)\n+\n+\n+#define ELIM(init, i, c, res)\t\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    char a[] = init;\t\t\t\t\\\n+    a[i] = c;\t\t\t\t\t\\\n+    ASSERT_ELIM (strlen (a) == res);\t\t\\\n+  } while (0)\n+\n+#define KEEP(init, i, c, res)\t\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    char a[] = init;\t\t\t\t\\\n+    a[i] = c;\t\t\t\t\t\\\n+    ASSERT_KEEP (strlen (a) == res);\t\t\\\n+  } while (0)\n+\n+\n+void test_elim_range (char c)\n+{\n+  ELIM (\"1\", 0, UR (1, 2), 1);\n+  ELIM (\"1\", 0, UR (1, 127), 1);\n+  ELIM (\"1\", 0, UR ('0', '9'), 1);\n+\n+  ELIM (\"12\", 0, UR (1, 127), 2);\n+  ELIM (\"12\", 1, UR (1, 127), 2);\n+\n+  ELIM (\"123\", 0, UR (1, 9), 3);\n+  ELIM (\"123\", 1, UR (10, 99), 3);\n+  ELIM (\"123\", 2, UR (100, 127), 3);\n+}\n+\n+void test_elim_anti_range (const char *s)\n+{\n+  char c = *s++;\n+  ELIM (\"123\", 0, c ? c : 'x', 3);\n+\n+  c = *s++;\n+  ELIM (\"1234\", 1, c ? c : 'y', 4);\n+\n+  c = *s++;\n+  ELIM (\"123\", 2, c ? c : 'z', 3);\n+}\n+\n+#line 1000\n+\n+void test_keep (void)\n+{\n+  size_t uchar_max = (unsigned char)-1;\n+\n+  KEEP (\"1\",     0, UR (1, uchar_max + 1), 1);\n+  KEEP (\"1\\0\\3\", 1, UR (1, 2), 1);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"call_in_true_branch_not_eliminated_\" 0 \"optimized\" } }\n+\n+   { dg-final { scan-tree-dump-times \"call_made_in_true_branch_on_line_1\\[0-9\\]\\[0-9\\]\\[0-9\\]\" 2 \"optimized\" } }\n+   { dg-final { scan-tree-dump-times \"call_made_in_false_branch_on_line_1\\[0-9\\]\\[0-9\\]\\[0-9\\]\" 2 \"optimized\" } } */"}, {"sha": "cc1f5f48e3411142c30549e175c4e84638904832", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/223c63e62ab44cb36102758dffd5ac8c9ab63bb1/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/223c63e62ab44cb36102758dffd5ac8c9ab63bb1/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=223c63e62ab44cb36102758dffd5ac8c9ab63bb1", "patch": "@@ -3073,9 +3073,7 @@ handle_char_store (gimple_stmt_iterator *gsi)\n     }\n \n   bool storing_zero_p = initializer_zerop (rhs);\n-  bool storing_nonzero_p = (!storing_zero_p\n-\t\t\t    && TREE_CODE (rhs) == INTEGER_CST\n-\t\t\t    && integer_nonzerop (rhs));\n+  bool storing_nonzero_p = !storing_zero_p && tree_expr_nonzero_p (rhs);\n   /* Set to the length of the string being assigned if known.  */\n   HOST_WIDE_INT rhslen;\n "}]}