{"sha": "53021678c582ec1afd38f0ed03fde6c433d639df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTMwMjE2NzhjNTgyZWMxYWZkMzhmMGVkMDNmZGU2YzQzM2Q2MzlkZg==", "commit": {"author": {"name": "Jiong Wang", "email": "jiong.wang@arm.com", "date": "2015-07-10T12:20:54Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2015-07-10T12:20:54Z"}, "message": "[AArch64] Mark GOT related MEM rtx as const to help RTL loop IV\n\n  gcc/\n    * config/aarch64/aarch64.c (aarch64_load_symref_appropriately): Mark mem\n    as READONLY and NOTRAP for PIC symbol.\n\n  gcc/testsuite/\n    * gcc.target/aarch64/got_mem_hoist_1.c: New test.\n\nFrom-SVN: r225669", "tree": {"sha": "142087cbadbd7533a8e1d71109873929f13e6f5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/142087cbadbd7533a8e1d71109873929f13e6f5c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53021678c582ec1afd38f0ed03fde6c433d639df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53021678c582ec1afd38f0ed03fde6c433d639df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53021678c582ec1afd38f0ed03fde6c433d639df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53021678c582ec1afd38f0ed03fde6c433d639df/comments", "author": null, "committer": null, "parents": [{"sha": "9fdcd34e0fc48867dfc4d00dad09bdcbb4562db1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fdcd34e0fc48867dfc4d00dad09bdcbb4562db1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fdcd34e0fc48867dfc4d00dad09bdcbb4562db1"}], "stats": {"total": 66, "additions": 60, "deletions": 6}, "files": [{"sha": "643b4f5bff5a7467cce0ebb7dce523293e03c24a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53021678c582ec1afd38f0ed03fde6c433d639df/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53021678c582ec1afd38f0ed03fde6c433d639df/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=53021678c582ec1afd38f0ed03fde6c433d639df", "patch": "@@ -1,3 +1,8 @@\n+2015-07-10  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_load_symref_appropriately): Mark mem\n+\tas READONLY and NOTRAP for PIC symbol.\n+\n 2015-07-10  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* gimple-predict.h: New file. "}, {"sha": "37f42facb2629f45e44966223c592beada825f75", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 30, "deletions": 6, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53021678c582ec1afd38f0ed03fde6c433d639df/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53021678c582ec1afd38f0ed03fde6c433d639df/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=53021678c582ec1afd38f0ed03fde6c433d639df", "patch": "@@ -890,6 +890,8 @@ aarch64_load_symref_appropriately (rtx dest, rtx imm,\n       {\n \tmachine_mode mode = GET_MODE (dest);\n \trtx gp_rtx = pic_offset_table_rtx;\n+\trtx insn;\n+\trtx mem;\n \n \t/* NOTE: pic_offset_table_rtx can be NULL_RTX, because we can reach\n \t   here before rtl expand.  Tree IVOPT will generate rtl pattern to\n@@ -933,16 +935,27 @@ aarch64_load_symref_appropriately (rtx dest, rtx imm,\n \tif (mode == ptr_mode)\n \t  {\n \t    if (mode == DImode)\n-\t      emit_insn (gen_ldr_got_small_28k_di (dest, gp_rtx, imm));\n+\t      insn = gen_ldr_got_small_28k_di (dest, gp_rtx, imm);\n \t    else\n-\t      emit_insn (gen_ldr_got_small_28k_si (dest, gp_rtx, imm));\n+\t      insn = gen_ldr_got_small_28k_si (dest, gp_rtx, imm);\n+\n+\t    mem = XVECEXP (SET_SRC (insn), 0, 0);\n \t  }\n \telse\n \t  {\n \t    gcc_assert (mode == Pmode);\n-\t    emit_insn (gen_ldr_got_small_28k_sidi (dest, gp_rtx, imm));\n+\n+\t    insn = gen_ldr_got_small_28k_sidi (dest, gp_rtx, imm);\n+\t    mem = XVECEXP (XEXP (SET_SRC (insn), 0), 0, 0);\n \t  }\n \n+\t/* The operand is expected to be MEM.  Whenever the related insn\n+\t   pattern changed, above code which calculate mem should be\n+\t   updated.  */\n+\tgcc_assert (GET_CODE (mem) == MEM);\n+\tMEM_READONLY_P (mem) = 1;\n+\tMEM_NOTRAP_P (mem) = 1;\n+\temit_insn (insn);\n \treturn;\n       }\n \n@@ -955,6 +968,9 @@ aarch64_load_symref_appropriately (rtx dest, rtx imm,\n \t   DImode if dest is dereferenced to access the memeory.\n \t   This is why we have to handle three different ldr_got_small\n \t   patterns here (two patterns for ILP32).  */\n+\n+\trtx insn;\n+\trtx mem;\n \trtx tmp_reg = dest;\n \tmachine_mode mode = GET_MODE (dest);\n \n@@ -965,16 +981,24 @@ aarch64_load_symref_appropriately (rtx dest, rtx imm,\n \tif (mode == ptr_mode)\n \t  {\n \t    if (mode == DImode)\n-\t      emit_insn (gen_ldr_got_small_di (dest, tmp_reg, imm));\n+\t      insn = gen_ldr_got_small_di (dest, tmp_reg, imm);\n \t    else\n-\t      emit_insn (gen_ldr_got_small_si (dest, tmp_reg, imm));\n+\t      insn = gen_ldr_got_small_si (dest, tmp_reg, imm);\n+\n+\t    mem = XVECEXP (SET_SRC (insn), 0, 0);\n \t  }\n \telse\n \t  {\n \t    gcc_assert (mode == Pmode);\n-\t    emit_insn (gen_ldr_got_small_sidi (dest, tmp_reg, imm));\n+\n+\t    insn = gen_ldr_got_small_sidi (dest, tmp_reg, imm);\n+\t    mem = XVECEXP (XEXP (SET_SRC (insn), 0), 0, 0);\n \t  }\n \n+\tgcc_assert (GET_CODE (mem) == MEM);\n+\tMEM_READONLY_P (mem) = 1;\n+\tMEM_NOTRAP_P (mem) = 1;\n+\temit_insn (insn);\n \treturn;\n       }\n "}, {"sha": "cc7988b12dffeb6d4f229ecb6aacb2f3784d0df6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53021678c582ec1afd38f0ed03fde6c433d639df/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53021678c582ec1afd38f0ed03fde6c433d639df/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=53021678c582ec1afd38f0ed03fde6c433d639df", "patch": "@@ -1,3 +1,7 @@\n+2015-07-10  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* gcc.target/aarch64/got_mem_hoist_1.c: New test.\n+\n 2015-07-10  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.target/arm/attr_thumb.c: Skip if Thumb is not supported."}, {"sha": "6d2971872b20313c3bc102da7494654d7b96f83c", "filename": "gcc/testsuite/gcc.target/aarch64/got_mem_hoist_1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53021678c582ec1afd38f0ed03fde6c433d639df/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fgot_mem_hoist_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53021678c582ec1afd38f0ed03fde6c433d639df/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fgot_mem_hoist_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fgot_mem_hoist_1.c?ref=53021678c582ec1afd38f0ed03fde6c433d639df", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fpic -fdump-rtl-loop2_invariant\" } */\n+\n+int bar (int);\n+int cal (void *);\n+\n+int\n+foo (int a, int bound)\n+{\n+  int i = 0;\n+  int sum = 0;\n+\n+  for (i; i < bound; i++)\n+    sum = cal (bar);\n+\n+  return sum;\n+}\n+\n+/* The insn which loads function address from GOT table should be moved out\n+   of the loop.  */\n+/* { dg-final { scan-rtl-dump \"Decided\" \"loop2_invariant\" } } */"}]}