{"sha": "6bc2bb1821cc65ff6e463cb1fc930c5d152fe04d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmJjMmJiMTgyMWNjNjVmZjZlNDYzY2IxZmM5MzBjNWQxNTJmZTA0ZA==", "commit": {"author": {"name": "Ryan Burn", "email": "contact@rnburn.com", "date": "2016-04-27T20:41:52Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2016-04-27T20:41:52Z"}, "message": "re PR c++/69024 ([cilkpus] cilk_spawn is broken for initializations with implicit conversion operators defined)\n\n\tPR c++/69024\n\tPR c++/68997\n\t* cilk.c (cilk_ignorable_spawn_rhs_op): Change to external linkage.\n\t(cilk_recognize_spawn): Renamed from recognize_spawn and change to\n\texternal linkage.\n\t(cilk_detect_and_unwrap): Corresponding changes.\n\t(extract_free_variables): Don't extract free variables from\n\tAGGR_INIT_EXPR slot.\n\t* c-common.h (cilk_ignorable_spawn_rhs_op): Prototype.\n\t(cilk_recognize_spawn): Likewise.\n\n\tPR c++/69024\n\tPR c++/68997\n\t* cp-gimplify.c (cp_gimplify_expr): Call cilk_cp_detect_spawn_and_unwrap\n\tinstead of cilk_detect_spawn_and_unwrap.\n\t* cp-cilkplus.c (is_conversion_operator_function_decl_p): New.\n\t(find_spawn): New.\n\t(cilk_cp_detect_spawn_and_unwrap): New.\n\t* lambda.c: Include cp-cilkplus.h.\n\t* parser.c: Include cp-cilkplus.h.\n\t* cp-tree.h (cpp_validate_cilk_plus_loop): Move prototype into...\n\t* cp-cilkpus.h: New file.\n\n\tPR c++/69024\n\tPR c++/68997\n\t* g++.dg/cilk-plus/CK/pr68001.cc: Fix to not depend on broken\n\tdiagnostic.\n\t* g++.dg/cilk-plus/CK/pr69024.cc: New test.\n\t* g++.dg/cilk-plus/CK/pr68997.cc: New test.\n\nCo-Authored-By: Jeff Law <law@redhat.com>\n\nFrom-SVN: r235534", "tree": {"sha": "01aff7302afade8fb5843d89091bb1813cde6002", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01aff7302afade8fb5843d89091bb1813cde6002"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6bc2bb1821cc65ff6e463cb1fc930c5d152fe04d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bc2bb1821cc65ff6e463cb1fc930c5d152fe04d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bc2bb1821cc65ff6e463cb1fc930c5d152fe04d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bc2bb1821cc65ff6e463cb1fc930c5d152fe04d/comments", "author": null, "committer": null, "parents": [{"sha": "85a7c9263c2554811e9fc0e1ce7bec3b3bf6b7f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85a7c9263c2554811e9fc0e1ce7bec3b3bf6b7f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85a7c9263c2554811e9fc0e1ce7bec3b3bf6b7f5"}], "stats": {"total": 317, "additions": 305, "deletions": 12}, "files": [{"sha": "ac3be53941748303d251d9fea345e35ef3b908c4", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc2bb1821cc65ff6e463cb1fc930c5d152fe04d/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc2bb1821cc65ff6e463cb1fc930c5d152fe04d/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=6bc2bb1821cc65ff6e463cb1fc930c5d152fe04d", "patch": "@@ -1,3 +1,16 @@\n+2015-04-27  Ryan Burn  <contact@rnburn.com>\n+\n+\tPR c++/69024\n+\tPR c++/68997\n+\t* cilk.c (cilk_ignorable_spawn_rhs_op): Change to external linkage.\n+\t(cilk_recognize_spawn): Renamed from recognize_spawn and change to\n+\texternal linkage.\n+\t(cilk_detect_and_unwrap): Corresponding changes.\n+\t(extract_free_variables): Don't extract free variables from\n+\tAGGR_INIT_EXPR slot.\n+\t* c-common.h (cilk_ignorable_spawn_rhs_op): Prototype.\n+\t(cilk_recognize_spawn): Likewise.\n+\n 2016-04-27  Bernd Schmidt  <bschmidt@redhat.com>\n \n \t* c.opt (Wmemset-elt-size): New option."}, {"sha": "1309549617f418675dba805e200ee9cf8dec1179", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc2bb1821cc65ff6e463cb1fc930c5d152fe04d/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc2bb1821cc65ff6e463cb1fc930c5d152fe04d/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=6bc2bb1821cc65ff6e463cb1fc930c5d152fe04d", "patch": "@@ -1468,4 +1468,7 @@ extern bool reject_gcc_builtin (const_tree, location_t = UNKNOWN_LOCATION);\n extern void warn_duplicated_cond_add_or_warn (location_t, tree, vec<tree> **);\n extern bool valid_array_size_p (location_t, tree, tree);\n \n+extern bool cilk_ignorable_spawn_rhs_op (tree);\n+extern bool cilk_recognize_spawn (tree, tree *);\n+\n #endif /* ! GCC_C_COMMON_H */"}, {"sha": "69a79baffead7cc7c037d994b536877205cb2f0a", "filename": "gcc/c-family/cilk.c", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc2bb1821cc65ff6e463cb1fc930c5d152fe04d/gcc%2Fc-family%2Fcilk.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc2bb1821cc65ff6e463cb1fc930c5d152fe04d/gcc%2Fc-family%2Fcilk.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fcilk.c?ref=6bc2bb1821cc65ff6e463cb1fc930c5d152fe04d", "patch": "@@ -185,7 +185,7 @@ call_graph_add_fn (tree fndecl)\n    A comparison to constant is simple enough to allow, and\n    is used to convert to bool.  */\n \n-static bool\n+bool\n cilk_ignorable_spawn_rhs_op (tree exp)\n {\n   enum tree_code code = TREE_CODE (exp);\n@@ -223,8 +223,8 @@ unwrap_cilk_spawn_stmt (tree *tp, int *walk_subtrees, void *)\n /* Returns true when EXP is a CALL_EXPR with _Cilk_spawn in front.  Unwraps\n    CILK_SPAWN_STMT wrapper from the CALL_EXPR in *EXP0 statement.  */\n \n-static bool\n-recognize_spawn (tree exp, tree *exp0)\n+bool\n+cilk_recognize_spawn (tree exp, tree *exp0)\n {\n   bool spawn_found = false;\n   if (TREE_CODE (exp) == CILK_SPAWN_STMT)\n@@ -292,7 +292,7 @@ cilk_detect_spawn_and_unwrap (tree *exp0)\n   \n   /* Now we should have a CALL_EXPR with a CILK_SPAWN_STMT wrapper around \n      it, or return false.  */\n-  if (recognize_spawn (exp, exp0))\n+  if (cilk_recognize_spawn (exp, exp0))\n     return true;\n   return false;\n }\n@@ -1250,6 +1250,21 @@ extract_free_variables (tree t, struct wrapper_data *wd,\n       return;\n \n     case AGGR_INIT_EXPR:\n+      {\n+\tint len = 0;\n+\tint ii = 0;\n+\textract_free_variables (TREE_OPERAND (t, 1), wd, ADD_READ);\n+\tif (TREE_CODE (TREE_OPERAND (t, 0)) == INTEGER_CST)\n+\t  {\n+\t    len = TREE_INT_CST_LOW (TREE_OPERAND (t, 0));\n+\n+\t    for (ii = 3; ii < len; ii++)\n+\t      extract_free_variables (TREE_OPERAND (t, ii), wd, ADD_READ);\n+\t    extract_free_variables (TREE_TYPE (t), wd, ADD_READ);\n+\t  }\n+\tbreak;\n+      }\n+\n     case CALL_EXPR:\n       {\n \tint len = 0;"}, {"sha": "1219f82db98c8802f962a4b4b52ba7d87aed204a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc2bb1821cc65ff6e463cb1fc930c5d152fe04d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc2bb1821cc65ff6e463cb1fc930c5d152fe04d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6bc2bb1821cc65ff6e463cb1fc930c5d152fe04d", "patch": "@@ -1,3 +1,18 @@\n+2015-04-27  Ryan Burn  <contact@rnburn.com>\n+\t    Jeff Law  <law@redhat.com>\n+\n+\tPR c++/69024\n+\tPR c++/68997\n+\t* cp-gimplify.c (cp_gimplify_expr): Call cilk_cp_detect_spawn_and_unwrap\n+\tinstead of cilk_detect_spawn_and_unwrap.\n+\t* cp-cilkplus.c (is_conversion_operator_function_decl_p): New.\n+\t(find_spawn): New.\n+\t(cilk_cp_detect_spawn_and_unwrap): New.\n+\t* lambda.c: Include cp-cilkplus.h.\n+\t* parser.c: Include cp-cilkplus.h.\n+\t* cp-tree.h (cpp_validate_cilk_plus_loop): Move prototype into...\n+\t* cp-cilkpus.h: New file.\n+\n 2016-04-27  Nathan Sidwell  <nathan@acm.org>\n \n \t* constexpr.c (get_fundef_copy): Use the original function for"}, {"sha": "7cde09968c09e8e4fcd3892bfed924a71d6adc45", "filename": "gcc/cp/cp-cilkplus.c", "status": "modified", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc2bb1821cc65ff6e463cb1fc930c5d152fe04d/gcc%2Fcp%2Fcp-cilkplus.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc2bb1821cc65ff6e463cb1fc930c5d152fe04d/gcc%2Fcp%2Fcp-cilkplus.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-cilkplus.c?ref=6bc2bb1821cc65ff6e463cb1fc930c5d152fe04d", "patch": "@@ -26,6 +26,110 @@\n #include \"cp-tree.h\"\n #include \"tree-iterator.h\"\n #include \"cilk.h\"\n+#include \"c-family/c-common.h\"\n+\n+/* Return TRUE if T is a FUNCTION_DECL for a type-conversion operator.  */\n+\n+static bool\n+is_conversion_operator_function_decl_p (tree t)\n+{\n+  if (TREE_CODE (t) != FUNCTION_DECL)\n+    return false;\n+\n+  return DECL_NAME (t) && IDENTIFIER_TYPENAME_P (DECL_NAME (t));\n+}\n+\n+/* Recursively traverse EXP to search for a CILK_SPAWN_STMT subtree.\n+   Return the CILK_SPAWN_STMT subtree if found; otherwise, the last subtree\n+   searched.  */\n+\n+static tree\n+find_spawn (tree exp)\n+{\n+  /* Happens with C++ TARGET_EXPR.  */\n+  if (exp == NULL_TREE)\n+    return exp;\n+\n+  if (cilk_ignorable_spawn_rhs_op (exp))\n+    return find_spawn (TREE_OPERAND (exp, 0));\n+\n+  switch (TREE_CODE (exp))\n+    {\n+    case AGGR_INIT_EXPR:\n+      {\n+\t/* Check for initialization via a constructor call that represents\n+\t   implicit conversion.  */\n+\tif (AGGR_INIT_VIA_CTOR_P (exp) && aggr_init_expr_nargs (exp) == 2)\n+\t  return find_spawn (AGGR_INIT_EXPR_ARG (exp, 1));\n+\n+\t/* Check for initialization via a call to a type-conversion\n+\t   operator.  */\n+\ttree fn = AGGR_INIT_EXPR_FN (exp);\n+\tif (TREE_CODE (fn) == ADDR_EXPR\n+\t    && is_conversion_operator_function_decl_p (TREE_OPERAND (fn, 0))\n+\t    && aggr_init_expr_nargs (exp) == 1)\n+\t  return find_spawn (AGGR_INIT_EXPR_ARG (exp, 0));\n+      }\n+      break;\n+\n+    case CALL_EXPR:\n+      {\n+\t/* Check for a call to a type-conversion operator.  */\n+\ttree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n+\tif (is_conversion_operator_function_decl_p (fndecl)\n+\t    && call_expr_nargs (exp) == 1)\n+\t  return find_spawn (CALL_EXPR_ARG (exp, 0));\n+      }\n+      break;\n+\n+    case TARGET_EXPR:\n+      return find_spawn (TARGET_EXPR_INITIAL (exp));\n+\n+    case CLEANUP_POINT_EXPR:\n+    case COMPOUND_EXPR:\n+    case EXPR_STMT:\n+      return find_spawn (TREE_OPERAND (exp, 0));\n+\n+    default:\n+      break;\n+    }\n+\n+    return exp;\n+}\n+\n+/* Return true if *EXP0 is a recognized form of spawn.  Recognized forms\n+   are, after conversion to void, a call expression at outer level or an\n+   assignment at outer level with the right hand side being a spawned call.\n+   In addition to this, it also unwraps the CILK_SPAWN_STMT cover from the\n+   CALL_EXPR that is being spawned.\n+\n+   Note that `=' in C++ may turn into a CALL_EXPR rather than a\n+   MODIFY_EXPR.  */\n+\n+bool\n+cilk_cp_detect_spawn_and_unwrap (tree *exp0)\n+{\n+  tree exp = *exp0;\n+\n+  if (!TREE_SIDE_EFFECTS (exp))\n+    return false;\n+\n+  /* Strip off any conversion to void.  It does not affect whether spawn\n+     is supported here.  */\n+  if (TREE_CODE (exp) == CONVERT_EXPR && VOID_TYPE_P (TREE_TYPE (exp)))\n+    exp = TREE_OPERAND (exp, 0);\n+\n+  if (TREE_CODE (exp) == MODIFY_EXPR || TREE_CODE (exp) == INIT_EXPR)\n+    exp = TREE_OPERAND (exp, 1);\n+\n+  exp = find_spawn (exp);\n+  if (exp == NULL_TREE)\n+    return false;\n+\n+  /* Now we should have a CALL_EXPR with a CILK_SPAWN_STMT wrapper around\n+     it, or return false.  */\n+  return cilk_recognize_spawn (exp, exp0);\n+}\n \n /* Callback for cp_walk_tree to validate the body of a pragma simd loop\n    or _cilk_for loop."}, {"sha": "a93711ed611a067ca094157bc31246b8cc2e7d92", "filename": "gcc/cp/cp-cilkplus.h", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc2bb1821cc65ff6e463cb1fc930c5d152fe04d/gcc%2Fcp%2Fcp-cilkplus.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc2bb1821cc65ff6e463cb1fc930c5d152fe04d/gcc%2Fcp%2Fcp-cilkplus.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-cilkplus.h?ref=6bc2bb1821cc65ff6e463cb1fc930c5d152fe04d", "patch": "@@ -0,0 +1,28 @@\n+/* C++-specific tree lowering bits; see also c-gimplify.c and tree-gimple.c.\n+\n+   Copyright (C) 2002-2016 Free Software Foundation, Inc.\n+   Contributed by Jason Merrill <jason@redhat.com>\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_CP_CILKPLUS_H\n+#define GCC_CP_CILKPLUS_H\n+\n+extern bool cilk_cp_detect_spawn_and_unwrap (tree *);\n+extern bool cpp_validate_cilk_plus_loop (tree);\n+\n+#endif /* ! GCC_CP_CILKPLUS_H */"}, {"sha": "de04bcbb190095f3f22ae3f489fe200ce1d70bf6", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc2bb1821cc65ff6e463cb1fc930c5d152fe04d/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc2bb1821cc65ff6e463cb1fc930c5d152fe04d/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=6bc2bb1821cc65ff6e463cb1fc930c5d152fe04d", "patch": "@@ -32,6 +32,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimplify.h\"\n #include \"c-family/c-ubsan.h\"\n #include \"cilk.h\"\n+#include \"cp-cilkplus.h\"\n \n /* Forward declarations.  */\n \n@@ -615,7 +616,7 @@ cp_gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n     case INIT_EXPR:\n       if (fn_contains_cilk_spawn_p (cfun))\n \t{\n-\t  if (cilk_detect_spawn_and_unwrap (expr_p))\n+\t  if (cilk_cp_detect_spawn_and_unwrap (expr_p))\n \t    {\n \t      cilk_cp_gimplify_call_params_in_spawned_fn (expr_p,\n \t\t\t\t\t\t\t  pre_p, post_p);\n@@ -633,7 +634,7 @@ cp_gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n     modify_expr_case:\n       {\n \tif (fn_contains_cilk_spawn_p (cfun)\n-\t    && cilk_detect_spawn_and_unwrap (expr_p)\n+\t    && cilk_cp_detect_spawn_and_unwrap (expr_p)\n \t    && !seen_error ())\n \t  {\n \t    cilk_cp_gimplify_call_params_in_spawned_fn (expr_p, pre_p, post_p);\n@@ -734,7 +735,7 @@ cp_gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n \n     case CILK_SPAWN_STMT:\n       gcc_assert(fn_contains_cilk_spawn_p (cfun)\n-\t\t && cilk_detect_spawn_and_unwrap (expr_p));\n+\t\t && cilk_cp_detect_spawn_and_unwrap (expr_p));\n \n       if (!seen_error ())\n \t{\n@@ -745,7 +746,7 @@ cp_gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n \n     case CALL_EXPR:\n       if (fn_contains_cilk_spawn_p (cfun)\n-\t  && cilk_detect_spawn_and_unwrap (expr_p)\n+\t  && cilk_cp_detect_spawn_and_unwrap (expr_p)\n \t  && !seen_error ())\n \t{\n \t  cilk_cp_gimplify_call_params_in_spawned_fn (expr_p, pre_p, post_p);"}, {"sha": "4c548c9ba969314676df6492482f2a1765af569a", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc2bb1821cc65ff6e463cb1fc930c5d152fe04d/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc2bb1821cc65ff6e463cb1fc930c5d152fe04d/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=6bc2bb1821cc65ff6e463cb1fc930c5d152fe04d", "patch": "@@ -6873,9 +6873,6 @@ extern void vtv_save_class_info                 (tree);\n extern void vtv_recover_class_info              (void);\n extern void vtv_build_vtable_verify_fndecl      (void);\n \n-/* In cp-cilkplus.c.  */\n-extern bool cpp_validate_cilk_plus_loop\t\t(tree);\n-\n /* In cp/cp-array-notations.c */\n extern tree expand_array_notation_exprs         (tree);\n bool cilkplus_an_triplet_types_ok_p             (location_t, tree, tree, tree,"}, {"sha": "08d6d8205cf0d76a182cb359b3110e3533fb2ebf", "filename": "gcc/cp/lambda.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc2bb1821cc65ff6e463cb1fc930c5d152fe04d/gcc%2Fcp%2Flambda.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc2bb1821cc65ff6e463cb1fc930c5d152fe04d/gcc%2Fcp%2Flambda.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flambda.c?ref=6bc2bb1821cc65ff6e463cb1fc930c5d152fe04d", "patch": "@@ -30,6 +30,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-iterator.h\"\n #include \"toplev.h\"\n #include \"gimplify.h\"\n+#include \"cp-cilkplus.h\"\n \n /* Constructor for a lambda expression.  */\n "}, {"sha": "7fb3c014ace3e51e892d22ccbcaed3bfba9eb95d", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc2bb1821cc65ff6e463cb1fc930c5d152fe04d/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc2bb1821cc65ff6e463cb1fc930c5d152fe04d/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=6bc2bb1821cc65ff6e463cb1fc930c5d152fe04d", "patch": "@@ -39,6 +39,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gomp-constants.h\"\n #include \"c-family/c-indentation.h\"\n #include \"context.h\"\n+#include \"cp-cilkplus.h\"\n \n \f\n /* The lexer.  */"}, {"sha": "6189bee94ac4e841e7cadfcb9a6cc07693dacc22", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc2bb1821cc65ff6e463cb1fc930c5d152fe04d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc2bb1821cc65ff6e463cb1fc930c5d152fe04d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6bc2bb1821cc65ff6e463cb1fc930c5d152fe04d", "patch": "@@ -1,3 +1,12 @@\n+2015-04-27  Ryan Burn  <contact@rnburn.com>\n+\n+\tPR c++/69024\n+\tPR c++/68997\n+\t* g++.dg/cilk-plus/CK/pr68001.cc: Fix to not depend on broken\n+\tdiagnostic.\n+\t* g++.dg/cilk-plus/CK/pr69024.cc: New test.\n+\t* g++.dg/cilk-plus/CK/pr68997.cc: New test.\n+\n 2016-04-27  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/limited_with4.ad[sb]: New test."}, {"sha": "bf2fefa03b4885383eadcfb4a7d7db412253fc7c", "filename": "gcc/testsuite/g++.dg/cilk-plus/CK/pr68001.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc2bb1821cc65ff6e463cb1fc930c5d152fe04d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcilk-plus%2FCK%2Fpr68001.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc2bb1821cc65ff6e463cb1fc930c5d152fe04d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcilk-plus%2FCK%2Fpr68001.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcilk-plus%2FCK%2Fpr68001.cc?ref=6bc2bb1821cc65ff6e463cb1fc930c5d152fe04d", "patch": "@@ -11,7 +11,7 @@ std::vector<double> f() {\n \n int main()\n {\n-  std::vector<double> x = _Cilk_spawn f(); /* { dg-error \"invalid use of\" } */\n+  std::vector<double> x = _Cilk_spawn f ();\n   std::vector<double> y = f();\n   _Cilk_sync;\n   return 0;"}, {"sha": "b442bf9cc2426b9cca2930d27c31c2d355fee530", "filename": "gcc/testsuite/g++.dg/cilk-plus/CK/pr68997.cc", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc2bb1821cc65ff6e463cb1fc930c5d152fe04d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcilk-plus%2FCK%2Fpr68997.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc2bb1821cc65ff6e463cb1fc930c5d152fe04d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcilk-plus%2FCK%2Fpr68997.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcilk-plus%2FCK%2Fpr68997.cc?ref=6bc2bb1821cc65ff6e463cb1fc930c5d152fe04d", "patch": "@@ -0,0 +1,68 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c++11 -fcilkplus\" } */\n+\n+struct A1 {\n+  A1 () {}\n+  A1 (const A1&) {}\n+};\n+\n+A1 fa1 () {\n+  return A1 ();\n+}\n+\n+struct A2 {\n+  A2 () {}\n+  A2 (A2&&) {}\n+};\n+\n+A2 fa2 () {\n+  A2 ();\n+}\n+\n+struct B1 {\n+};\n+\n+B1 fb1 () {\n+  return B1 ();\n+}\n+\n+struct A3 {\n+  A3 (const B1&) {}\n+};\n+\n+struct A4 {\n+  A4 (B1) {}\n+};\n+\n+struct B2 {\n+  B2 () {}\n+  B2 (const B2&) {}\n+};\n+\n+B2 fb2 () {\n+  return B2 ();\n+}\n+\n+struct A5 {\n+  A5 (B2) {}\n+};\n+\n+void t1 () {\n+  A1 a1 = _Cilk_spawn fa1 ();\n+}\n+\n+void t2 () {\n+  A2 a2 = _Cilk_spawn fa2 ();\n+}\n+\n+void t3 () {\n+  A3 a3 = _Cilk_spawn fb1 ();\n+}\n+\n+void t4 () {\n+  A4 a4 = _Cilk_spawn fb1 ();\n+}\n+\n+void t5 () {\n+  A5 a5 = _Cilk_spawn fb2 ();\n+}"}, {"sha": "b87dc1ace8794c168cbfd590abd11320bab0cbd7", "filename": "gcc/testsuite/g++.dg/cilk-plus/CK/pr69024.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc2bb1821cc65ff6e463cb1fc930c5d152fe04d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcilk-plus%2FCK%2Fpr69024.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc2bb1821cc65ff6e463cb1fc930c5d152fe04d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcilk-plus%2FCK%2Fpr69024.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcilk-plus%2FCK%2Fpr69024.cc?ref=6bc2bb1821cc65ff6e463cb1fc930c5d152fe04d", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fcilkplus\" } */\n+\n+struct A1 {\n+};\n+\n+struct A2 {\n+  A2 () {}\n+  A2 (const A2&) {}\n+};\n+\n+struct B1 {\n+  operator A1 () {\n+    return A1 ();\n+  }\n+};\n+\n+B1 fb1 () {\n+  return B1 ();\n+}\n+\n+struct B2 {\n+  operator A2 () {\n+    return A2 ();\n+  }\n+};\n+\n+B2 fb2 () {\n+  return B2 ();\n+}\n+\n+void t1 () {\n+  A1 a1 = _Cilk_spawn fb1 ();\n+}\n+\n+void t2 () {\n+  A2 a2 = _Cilk_spawn fb2 ();\n+}"}]}