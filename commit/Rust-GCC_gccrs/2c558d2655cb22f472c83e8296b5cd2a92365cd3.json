{"sha": "2c558d2655cb22f472c83e8296b5cd2a92365cd3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmM1NThkMjY1NWNiMjJmNDcyYzgzZTgyOTZiNWNkMmE5MjM2NWNkMw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-07-30T08:24:42Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-07-30T09:36:20Z"}, "message": "tree-optimization/96370 - make reassoc expr rewrite more robust\n\nIn the face of the more complex tricks in reassoc with respect\nto negate processing it can happen that the expression rewrite\nis fooled to recurse on a leaf and pick up a bogus expression\ncode.  The following patch makes the expression rewrite more\nrobust in providing the expression code to it directly since\nit is the same for all operations in a chain.\n\n2020-07-30  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/96370\n\t* tree-ssa-reassoc.c (rewrite_expr_tree): Add operation\n\tcode parameter and use it instead of picking it up from\n\tthe stmt that is being rewritten.\n\t(reassociate_bb): Pass down the operation code.\n\n\t* gcc.dg/pr96370.c: New testcase.", "tree": {"sha": "c085fc4d96cf66c55fd8cdbad92164f46780ad52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c085fc4d96cf66c55fd8cdbad92164f46780ad52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c558d2655cb22f472c83e8296b5cd2a92365cd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c558d2655cb22f472c83e8296b5cd2a92365cd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c558d2655cb22f472c83e8296b5cd2a92365cd3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c558d2655cb22f472c83e8296b5cd2a92365cd3/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8240f2f498c38437c213ae1186a5420316413af5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8240f2f498c38437c213ae1186a5420316413af5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8240f2f498c38437c213ae1186a5420316413af5"}], "stats": {"total": 18, "additions": 13, "deletions": 5}, "files": [{"sha": "b939b2141d617b590090c263074046df53b5a135", "filename": "gcc/testsuite/gcc.dg/pr96370.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c558d2655cb22f472c83e8296b5cd2a92365cd3/gcc%2Ftestsuite%2Fgcc.dg%2Fpr96370.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c558d2655cb22f472c83e8296b5cd2a92365cd3/gcc%2Ftestsuite%2Fgcc.dg%2Fpr96370.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr96370.c?ref=2c558d2655cb22f472c83e8296b5cd2a92365cd3", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile { target dfp } } */\n+/* { dg-options \"-O2 -ffast-math\" } */\n+\n+void c(_Decimal128);\n+void a(_Decimal128 b)\n+{\n+  c(-b * b);\n+}"}, {"sha": "266cff376e5be1aad7095483b83591e2c3fca31c", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c558d2655cb22f472c83e8296b5cd2a92365cd3/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c558d2655cb22f472c83e8296b5cd2a92365cd3/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=2c558d2655cb22f472c83e8296b5cd2a92365cd3", "patch": "@@ -4913,7 +4913,7 @@ insert_stmt_before_use (gimple *stmt, gimple *stmt_to_insert)\n    recursive invocations.  */\n \n static tree\n-rewrite_expr_tree (gimple *stmt, unsigned int opindex,\n+rewrite_expr_tree (gimple *stmt, enum tree_code rhs_code, unsigned int opindex,\n \t\t   vec<operand_entry *> ops, bool changed, bool next_changed)\n {\n   tree rhs1 = gimple_assign_rhs1 (stmt);\n@@ -4960,7 +4960,7 @@ rewrite_expr_tree (gimple *stmt, unsigned int opindex,\n \t\t= find_insert_point (stmt, oe1->op, oe2->op);\n \t      lhs = make_ssa_name (TREE_TYPE (lhs));\n \t      stmt\n-\t\t= gimple_build_assign (lhs, gimple_assign_rhs_code (stmt),\n+\t\t= gimple_build_assign (lhs, rhs_code,\n \t\t\t\t       oe1->op, oe2->op);\n \t      gimple_set_uid (stmt, uid);\n \t      gimple_set_visited (stmt, true);\n@@ -5004,7 +5004,7 @@ rewrite_expr_tree (gimple *stmt, unsigned int opindex,\n   /* Recurse on the LHS of the binary operator, which is guaranteed to\n      be the non-leaf side.  */\n   tree new_rhs1\n-    = rewrite_expr_tree (SSA_NAME_DEF_STMT (rhs1), opindex + 1, ops,\n+    = rewrite_expr_tree (SSA_NAME_DEF_STMT (rhs1), rhs_code, opindex + 1, ops,\n \t\t\t changed || oe->op != rhs2 || next_changed,\n \t\t\t false);\n \n@@ -5030,7 +5030,7 @@ rewrite_expr_tree (gimple *stmt, unsigned int opindex,\n \t  gimple *insert_point = find_insert_point (stmt, new_rhs1, oe->op);\n \n \t  lhs = make_ssa_name (TREE_TYPE (lhs));\n-\t  stmt = gimple_build_assign (lhs, gimple_assign_rhs_code (stmt),\n+\t  stmt = gimple_build_assign (lhs, rhs_code,\n \t\t\t\t      new_rhs1, oe->op);\n \t  gimple_set_uid (stmt, uid);\n \t  gimple_set_visited (stmt, true);\n@@ -6477,7 +6477,7 @@ reassociate_bb (basic_block bb)\n                       if (len >= 3)\n                         swap_ops_for_binary_stmt (ops, len - 3, stmt);\n \n-\t\t      new_lhs = rewrite_expr_tree (stmt, 0, ops,\n+\t\t      new_lhs = rewrite_expr_tree (stmt, rhs_code, 0, ops,\n \t\t\t\t\t\t   powi_result != NULL\n \t\t\t\t\t\t   || negate_result,\n \t\t\t\t\t\t   len != orig_len);"}]}