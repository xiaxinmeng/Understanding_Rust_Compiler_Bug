{"sha": "c6d86fcea5621041ce23bf76d6c1881db7235afb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzZkODZmY2VhNTYyMTA0MWNlMjNiZjc2ZDZjMTg4MWRiNzIzNWFmYg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2006-12-29T15:48:26Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2006-12-29T15:48:26Z"}, "message": "c-common.c (c_define_builtins): New static function broken out of c_common_nodes_and_builtins.\n\n\t* c-common.c (c_define_builtins): New static function broken out\n\tof c_common_nodes_and_builtins.\n\t(c_common_nodes_and_builtins): Call c_define_builtins unless only\n\tdoing preprocessing.\n\nFrom-SVN: r120264", "tree": {"sha": "4669b7e6ad659c0f7095a68c6e355fd4c9109a7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4669b7e6ad659c0f7095a68c6e355fd4c9109a7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6d86fcea5621041ce23bf76d6c1881db7235afb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6d86fcea5621041ce23bf76d6c1881db7235afb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6d86fcea5621041ce23bf76d6c1881db7235afb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6d86fcea5621041ce23bf76d6c1881db7235afb/comments", "author": null, "committer": null, "parents": [{"sha": "7af45bd465a9d75ea3eeb95b94ad06697989b84b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7af45bd465a9d75ea3eeb95b94ad06697989b84b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7af45bd465a9d75ea3eeb95b94ad06697989b84b"}], "stats": {"total": 159, "additions": 88, "deletions": 71}, "files": [{"sha": "be7fac78b39bb6b60cdd00e9e6a68ced203e9f73", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6d86fcea5621041ce23bf76d6c1881db7235afb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6d86fcea5621041ce23bf76d6c1881db7235afb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c6d86fcea5621041ce23bf76d6c1881db7235afb", "patch": "@@ -1,3 +1,10 @@\n+2006-12-29  Ian Lance Taylor  <iant@google.com>\n+\n+\t* c-common.c (c_define_builtins): New static function broken out\n+\tof c_common_nodes_and_builtins.\n+\t(c_common_nodes_and_builtins): Call c_define_builtins unless only\n+\tdoing preprocessing.\n+\n 2006-12-29  Jan Hubicka  <jh@suse.cz>\n \n \t* tree-inline.c (remap_ssa_name): New function."}, {"sha": "f2e87b1db2c7f825a6c3993a1907f594e2a8cd11", "filename": "gcc/c-common.c", "status": "modified", "additions": 81, "deletions": 71, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6d86fcea5621041ce23bf76d6c1881db7235afb/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6d86fcea5621041ce23bf76d6c1881db7235afb/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=c6d86fcea5621041ce23bf76d6c1881db7235afb", "patch": "@@ -3245,6 +3245,85 @@ def_fn_type (builtin_type def, builtin_type ret, bool var, int n, ...)\n   builtin_types[def] = t;\n }\n \n+/* Build builtin functions common to both C and C++ language\n+   frontends.  */\n+\n+static void\n+c_define_builtins (tree va_list_ref_type_node, tree va_list_arg_type_node)\n+{\n+#define DEF_PRIMITIVE_TYPE(ENUM, VALUE) \\\n+  builtin_types[ENUM] = VALUE;\n+#define DEF_FUNCTION_TYPE_0(ENUM, RETURN) \\\n+  def_fn_type (ENUM, RETURN, 0, 0);\n+#define DEF_FUNCTION_TYPE_1(ENUM, RETURN, ARG1) \\\n+  def_fn_type (ENUM, RETURN, 0, 1, ARG1);\n+#define DEF_FUNCTION_TYPE_2(ENUM, RETURN, ARG1, ARG2) \\\n+  def_fn_type (ENUM, RETURN, 0, 2, ARG1, ARG2);\n+#define DEF_FUNCTION_TYPE_3(ENUM, RETURN, ARG1, ARG2, ARG3) \\\n+  def_fn_type (ENUM, RETURN, 0, 3, ARG1, ARG2, ARG3);\n+#define DEF_FUNCTION_TYPE_4(ENUM, RETURN, ARG1, ARG2, ARG3, ARG4) \\\n+  def_fn_type (ENUM, RETURN, 0, 4, ARG1, ARG2, ARG3, ARG4);\n+#define DEF_FUNCTION_TYPE_5(ENUM, RETURN, ARG1, ARG2, ARG3, ARG4, ARG5)\t\\\n+  def_fn_type (ENUM, RETURN, 0, 5, ARG1, ARG2, ARG3, ARG4, ARG5);\n+#define DEF_FUNCTION_TYPE_6(ENUM, RETURN, ARG1, ARG2, ARG3, ARG4, ARG5, \\\n+\t\t\t    ARG6)\t\t\t\t\t\\\n+  def_fn_type (ENUM, RETURN, 0, 6, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6);\n+#define DEF_FUNCTION_TYPE_7(ENUM, RETURN, ARG1, ARG2, ARG3, ARG4, ARG5, \\\n+\t\t\t    ARG6, ARG7)\t\t\t\t\t\\\n+  def_fn_type (ENUM, RETURN, 0, 7, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7);\n+#define DEF_FUNCTION_TYPE_VAR_0(ENUM, RETURN) \\\n+  def_fn_type (ENUM, RETURN, 1, 0);\n+#define DEF_FUNCTION_TYPE_VAR_1(ENUM, RETURN, ARG1) \\\n+  def_fn_type (ENUM, RETURN, 1, 1, ARG1);\n+#define DEF_FUNCTION_TYPE_VAR_2(ENUM, RETURN, ARG1, ARG2) \\\n+  def_fn_type (ENUM, RETURN, 1, 2, ARG1, ARG2);\n+#define DEF_FUNCTION_TYPE_VAR_3(ENUM, RETURN, ARG1, ARG2, ARG3) \\\n+  def_fn_type (ENUM, RETURN, 1, 3, ARG1, ARG2, ARG3);\n+#define DEF_FUNCTION_TYPE_VAR_4(ENUM, RETURN, ARG1, ARG2, ARG3, ARG4) \\\n+  def_fn_type (ENUM, RETURN, 1, 4, ARG1, ARG2, ARG3, ARG4);\n+#define DEF_FUNCTION_TYPE_VAR_5(ENUM, RETURN, ARG1, ARG2, ARG3, ARG4, ARG5) \\\n+  def_fn_type (ENUM, RETURN, 1, 5, ARG1, ARG2, ARG3, ARG4, ARG5);\n+#define DEF_POINTER_TYPE(ENUM, TYPE) \\\n+  builtin_types[(int) ENUM] = build_pointer_type (builtin_types[(int) TYPE]);\n+\n+#include \"builtin-types.def\"\n+\n+#undef DEF_PRIMITIVE_TYPE\n+#undef DEF_FUNCTION_TYPE_1\n+#undef DEF_FUNCTION_TYPE_2\n+#undef DEF_FUNCTION_TYPE_3\n+#undef DEF_FUNCTION_TYPE_4\n+#undef DEF_FUNCTION_TYPE_5\n+#undef DEF_FUNCTION_TYPE_6\n+#undef DEF_FUNCTION_TYPE_VAR_0\n+#undef DEF_FUNCTION_TYPE_VAR_1\n+#undef DEF_FUNCTION_TYPE_VAR_2\n+#undef DEF_FUNCTION_TYPE_VAR_3\n+#undef DEF_FUNCTION_TYPE_VAR_4\n+#undef DEF_FUNCTION_TYPE_VAR_5\n+#undef DEF_POINTER_TYPE\n+  builtin_types[(int) BT_LAST] = NULL_TREE;\n+\n+  c_init_attributes ();\n+\n+#define DEF_BUILTIN(ENUM, NAME, CLASS, TYPE, LIBTYPE, BOTH_P, FALLBACK_P, \\\n+\t\t    NONANSI_P, ATTRS, IMPLICIT, COND)\t\t\t\\\n+  if (NAME && COND)\t\t\t\t\t\t\t\\\n+    def_builtin_1 (ENUM, NAME, CLASS,                                   \\\n+\t\t   builtin_types[(int) TYPE],                           \\\n+\t\t   builtin_types[(int) LIBTYPE],                        \\\n+\t\t   BOTH_P, FALLBACK_P, NONANSI_P,                       \\\n+\t\t   built_in_attributes[(int) ATTRS], IMPLICIT);\n+#include \"builtins.def\"\n+#undef DEF_BUILTIN\n+\n+  build_common_builtin_nodes ();\n+\n+  targetm.init_builtins ();\n+  if (flag_mudflap)\n+    mudflap_init ();\n+}\n+\n /* Build tree nodes and builtin functions common to both C and C++ language\n    frontends.  */\n \n@@ -3457,77 +3536,8 @@ c_common_nodes_and_builtins (void)\n       va_list_ref_type_node = build_reference_type (va_list_type_node);\n     }\n \n-#define DEF_PRIMITIVE_TYPE(ENUM, VALUE) \\\n-  builtin_types[ENUM] = VALUE;\n-#define DEF_FUNCTION_TYPE_0(ENUM, RETURN) \\\n-  def_fn_type (ENUM, RETURN, 0, 0);\n-#define DEF_FUNCTION_TYPE_1(ENUM, RETURN, ARG1) \\\n-  def_fn_type (ENUM, RETURN, 0, 1, ARG1);\n-#define DEF_FUNCTION_TYPE_2(ENUM, RETURN, ARG1, ARG2) \\\n-  def_fn_type (ENUM, RETURN, 0, 2, ARG1, ARG2);\n-#define DEF_FUNCTION_TYPE_3(ENUM, RETURN, ARG1, ARG2, ARG3) \\\n-  def_fn_type (ENUM, RETURN, 0, 3, ARG1, ARG2, ARG3);\n-#define DEF_FUNCTION_TYPE_4(ENUM, RETURN, ARG1, ARG2, ARG3, ARG4) \\\n-  def_fn_type (ENUM, RETURN, 0, 4, ARG1, ARG2, ARG3, ARG4);\n-#define DEF_FUNCTION_TYPE_5(ENUM, RETURN, ARG1, ARG2, ARG3, ARG4, ARG5)\t\\\n-  def_fn_type (ENUM, RETURN, 0, 5, ARG1, ARG2, ARG3, ARG4, ARG5);\n-#define DEF_FUNCTION_TYPE_6(ENUM, RETURN, ARG1, ARG2, ARG3, ARG4, ARG5, \\\n-\t\t\t    ARG6)\t\t\t\t\t\\\n-  def_fn_type (ENUM, RETURN, 0, 6, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6);\n-#define DEF_FUNCTION_TYPE_7(ENUM, RETURN, ARG1, ARG2, ARG3, ARG4, ARG5, \\\n-\t\t\t    ARG6, ARG7)\t\t\t\t\t\\\n-  def_fn_type (ENUM, RETURN, 0, 7, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7);\n-#define DEF_FUNCTION_TYPE_VAR_0(ENUM, RETURN) \\\n-  def_fn_type (ENUM, RETURN, 1, 0);\n-#define DEF_FUNCTION_TYPE_VAR_1(ENUM, RETURN, ARG1) \\\n-  def_fn_type (ENUM, RETURN, 1, 1, ARG1);\n-#define DEF_FUNCTION_TYPE_VAR_2(ENUM, RETURN, ARG1, ARG2) \\\n-  def_fn_type (ENUM, RETURN, 1, 2, ARG1, ARG2);\n-#define DEF_FUNCTION_TYPE_VAR_3(ENUM, RETURN, ARG1, ARG2, ARG3) \\\n-  def_fn_type (ENUM, RETURN, 1, 3, ARG1, ARG2, ARG3);\n-#define DEF_FUNCTION_TYPE_VAR_4(ENUM, RETURN, ARG1, ARG2, ARG3, ARG4) \\\n-  def_fn_type (ENUM, RETURN, 1, 4, ARG1, ARG2, ARG3, ARG4);\n-#define DEF_FUNCTION_TYPE_VAR_5(ENUM, RETURN, ARG1, ARG2, ARG3, ARG4, ARG5) \\\n-  def_fn_type (ENUM, RETURN, 1, 5, ARG1, ARG2, ARG3, ARG4, ARG5);\n-#define DEF_POINTER_TYPE(ENUM, TYPE) \\\n-  builtin_types[(int) ENUM] = build_pointer_type (builtin_types[(int) TYPE]);\n-\n-#include \"builtin-types.def\"\n-\n-#undef DEF_PRIMITIVE_TYPE\n-#undef DEF_FUNCTION_TYPE_1\n-#undef DEF_FUNCTION_TYPE_2\n-#undef DEF_FUNCTION_TYPE_3\n-#undef DEF_FUNCTION_TYPE_4\n-#undef DEF_FUNCTION_TYPE_5\n-#undef DEF_FUNCTION_TYPE_6\n-#undef DEF_FUNCTION_TYPE_VAR_0\n-#undef DEF_FUNCTION_TYPE_VAR_1\n-#undef DEF_FUNCTION_TYPE_VAR_2\n-#undef DEF_FUNCTION_TYPE_VAR_3\n-#undef DEF_FUNCTION_TYPE_VAR_4\n-#undef DEF_FUNCTION_TYPE_VAR_5\n-#undef DEF_POINTER_TYPE\n-  builtin_types[(int) BT_LAST] = NULL_TREE;\n-\n-  c_init_attributes ();\n-\n-#define DEF_BUILTIN(ENUM, NAME, CLASS, TYPE, LIBTYPE, BOTH_P, FALLBACK_P, \\\n-\t\t    NONANSI_P, ATTRS, IMPLICIT, COND)\t\t\t\\\n-  if (NAME && COND)\t\t\t\t\t\t\t\\\n-    def_builtin_1 (ENUM, NAME, CLASS,                                   \\\n-\t\t   builtin_types[(int) TYPE],                           \\\n-\t\t   builtin_types[(int) LIBTYPE],                        \\\n-\t\t   BOTH_P, FALLBACK_P, NONANSI_P,                       \\\n-\t\t   built_in_attributes[(int) ATTRS], IMPLICIT);\n-#include \"builtins.def\"\n-#undef DEF_BUILTIN\n-\n-  build_common_builtin_nodes ();\n-\n-  targetm.init_builtins ();\n-  if (flag_mudflap)\n-    mudflap_init ();\n+  if (!flag_preprocess_only)\n+    c_define_builtins (va_list_ref_type_node, va_list_arg_type_node);\n \n   main_identifier_node = get_identifier (\"main\");\n "}]}