{"sha": "d0e9248d9b8cddcf38faa096d62ddb7f129d3431", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDBlOTI0OGQ5YjhjZGRjZjM4ZmFhMDk2ZDYyZGRiN2YxMjlkMzQzMQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-05-02T15:45:21Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-19T08:17:26Z"}, "message": "[Ada] Fix check for bounds in aggregate expansion of allocator\n\n2020-06-19  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* exp_aggr.adb (In_Place_Assign_OK): In an allocator context,\n\tcheck the bounds of an array aggregate against those of the\n\tdesignated type, except if the latter is unconstrained.", "tree": {"sha": "9120940fd77d5a98b26a0db51d4a49e76cff9f78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9120940fd77d5a98b26a0db51d4a49e76cff9f78"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0e9248d9b8cddcf38faa096d62ddb7f129d3431", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0e9248d9b8cddcf38faa096d62ddb7f129d3431", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0e9248d9b8cddcf38faa096d62ddb7f129d3431", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0e9248d9b8cddcf38faa096d62ddb7f129d3431/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce716aaaa3efb464af4caa16d8f75814c401b593", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce716aaaa3efb464af4caa16d8f75814c401b593", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce716aaaa3efb464af4caa16d8f75814c401b593"}], "stats": {"total": 21, "additions": 16, "deletions": 5}, "files": [{"sha": "95f0ddad9905e6f82f5fbee0a5cdfcc2b0ada7e1", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0e9248d9b8cddcf38faa096d62ddb7f129d3431/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0e9248d9b8cddcf38faa096d62ddb7f129d3431/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=d0e9248d9b8cddcf38faa096d62ddb7f129d3431", "patch": "@@ -4429,15 +4429,26 @@ package body Exp_Aggr is\n       then\n          Aggr_In := First_Index (Etype (N));\n \n+         --  Context is an assignment\n+\n          if Parent_Kind = N_Assignment_Statement then\n             Obj_In := First_Index (Etype (Name (Parent_Node)));\n \n-         else\n-            --  Context is an allocator. Check bounds of aggregate against\n-            --  given type in qualified expression.\n+         --  Context is an allocator. Check the bounds of the aggregate against\n+         --  those of the designated type, except in the case where the type is\n+         --  unconstrained (and then we can directly return true, see below).\n+\n+         else pragma Assert (Parent_Kind = N_Allocator);\n+            declare\n+               Desig_Typ : constant Entity_Id :=\n+                                         Designated_Type (Etype (Parent_Node));\n+            begin\n+               if not Is_Constrained (Desig_Typ) then\n+                  return True;\n+               end if;\n \n-            pragma Assert (Parent_Kind = N_Allocator);\n-            Obj_In := First_Index (Etype (Entity (Subtype_Mark (Parent (N)))));\n+               Obj_In := First_Index (Desig_Typ);\n+            end;\n          end if;\n \n          while Present (Aggr_In) loop"}]}