{"sha": "923ba36f8ce142fb94eeabd7a78b6aa8266d51b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTIzYmEzNmY4Y2UxNDJmYjk0ZWVhYmQ3YTc4YjZhYTgyNjZkNTFiMg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2008-06-23T13:06:15Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2008-06-23T13:06:15Z"}, "message": "re PR target/36533 (Incorrectly assumed aligned_operand)\n\n\tPR target/36533\n\t* emit-rtl.c (set_reg_attrs_from_value): Do nothing if\n\tREG is a hard register.\n\n\t* gcc.target/i386/pr36533.c: New test.\n\nFrom-SVN: r137038", "tree": {"sha": "f5bc7d13f1ad629c2d8bb9bd1ee88731b5870de1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5bc7d13f1ad629c2d8bb9bd1ee88731b5870de1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/923ba36f8ce142fb94eeabd7a78b6aa8266d51b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/923ba36f8ce142fb94eeabd7a78b6aa8266d51b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/923ba36f8ce142fb94eeabd7a78b6aa8266d51b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/923ba36f8ce142fb94eeabd7a78b6aa8266d51b2/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "53983ae9f340b1378e9aae93728c6bc2e62d4317", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53983ae9f340b1378e9aae93728c6bc2e62d4317", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53983ae9f340b1378e9aae93728c6bc2e62d4317"}], "stats": {"total": 187, "additions": 187, "deletions": 0}, "files": [{"sha": "3478e0fa51085a557c23db4c278a2d0e54d1682c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/923ba36f8ce142fb94eeabd7a78b6aa8266d51b2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/923ba36f8ce142fb94eeabd7a78b6aa8266d51b2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=923ba36f8ce142fb94eeabd7a78b6aa8266d51b2", "patch": "@@ -1,5 +1,9 @@\n 2008-06-23  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/36533\n+\t* emit-rtl.c (set_reg_attrs_from_value): Do nothing if\n+\tREG is a hard register.\n+\n \tPR tree-optimization/36508\n \t* tree-ssa-pre.c (compute_antic): Allow num_iterations up to\n \t499, don't check it at all in release compilers."}, {"sha": "fa2b78a4d954cfce2ca6ba7359c7dd75827c44b4", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/923ba36f8ce142fb94eeabd7a78b6aa8266d51b2/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/923ba36f8ce142fb94eeabd7a78b6aa8266d51b2/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=923ba36f8ce142fb94eeabd7a78b6aa8266d51b2", "patch": "@@ -963,6 +963,12 @@ set_reg_attrs_from_value (rtx reg, rtx x)\n {\n   int offset;\n \n+  /* Hard registers can be reused for multiple purposes within the same\n+     function, so setting REG_ATTRS, REG_POINTER and REG_POINTER_ALIGN\n+     on them is wrong.  */\n+  if (HARD_REGISTER_P (reg))\n+    return;\n+\n   offset = byte_lowpart_offset (GET_MODE (reg), GET_MODE (x));\n   if (MEM_P (x))\n     {"}, {"sha": "4e8d0e78020baf11cb6b0391f15742d5aa75d09d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/923ba36f8ce142fb94eeabd7a78b6aa8266d51b2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/923ba36f8ce142fb94eeabd7a78b6aa8266d51b2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=923ba36f8ce142fb94eeabd7a78b6aa8266d51b2", "patch": "@@ -1,5 +1,8 @@\n 2008-06-23  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/36533\n+\t* gcc.target/i386/pr36533.c: New test.\n+\n \tPR tree-optimization/36508\n \t* gcc.dg/pr36508.c: New test.\n "}, {"sha": "a271fea1cac0fb387a87bb58f3665256be4d7dea", "filename": "gcc/testsuite/gcc.target/i386/pr36533.c", "status": "added", "additions": 174, "deletions": 0, "changes": 174, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/923ba36f8ce142fb94eeabd7a78b6aa8266d51b2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr36533.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/923ba36f8ce142fb94eeabd7a78b6aa8266d51b2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr36533.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr36533.c?ref=923ba36f8ce142fb94eeabd7a78b6aa8266d51b2", "patch": "@@ -0,0 +1,174 @@\n+/* PR target/36533 */\n+/* { dg-do run { target { { i?86-*-linux* x86_64-*-linux* } && ilp32 } } } */\n+/* { dg-options \"-Os\" } */\n+#include <string.h>\n+#include <sys/mman.h>\n+#ifndef MAP_ANONYMOUS\n+#define MAP_ANONYMOUS MAP_ANON\n+#endif\n+\n+typedef struct S1\n+{\n+  unsigned long s1;\n+  struct S1 *s2;\n+  char *s3;\n+} S1;\n+\n+typedef struct\n+{\n+  unsigned int s4;\n+  unsigned int s5;\n+  int s6;\n+  unsigned int *s7;\n+} S2;\n+\n+typedef struct\n+{\n+  unsigned int s8;\n+  unsigned short s9;\n+  unsigned char s10;\n+  unsigned char s11;\n+  char s12[255];\n+} S3;\n+\n+typedef struct\n+{\n+  unsigned int s4;\n+  unsigned short s13;\n+  unsigned short s14;\n+} S4;\n+\n+typedef struct\n+{\n+  char s15[16];\n+  unsigned long s16;\n+} S5;\n+\n+typedef struct\n+{\n+  char s15[48];\n+  S5 *s17;\n+} S6;\n+\n+typedef struct\n+{\n+  S1 *s18;\n+} S7;\n+\n+__attribute__((regparm (3), noinline)) int\n+fn1 (const char *x, void *y, S1 *z)\n+{\n+  asm volatile (\"\" : : : \"memory\");\n+  return *x + (y != 0);\n+}\n+\n+__attribute__((regparm (3), noinline)) int\n+fn2 (const char *x, int y, S2 *z)\n+{\n+  asm volatile (\"\" : : : \"memory\");\n+  return 0;\n+}\n+\n+static inline __attribute__ ((always_inline)) unsigned int\n+fn4 (unsigned short x)\n+{\n+  unsigned len = x;\n+  if (len == ((1 << 16) - 1))\n+    return 1 << 16;\n+  return len;\n+}\n+\n+static inline __attribute__ ((always_inline)) S3 *\n+fn3 (S3 *p)\n+{\n+  return (S3 *) ((char *) p + fn4 (p->s9));\n+}\n+\n+__attribute__((regparm (3), noinline)) int\n+fn5 (void)\n+{\n+  asm volatile (\"\" : : : \"memory\");\n+  return 0;\n+}\n+\n+static inline __attribute__ ((always_inline)) int\n+fn6 (S3 *w, int x, S2 *y, S4 *z)\n+{\n+  int a = 2;\n+  char *b = (char *) w;\n+  S2 c = *y;\n+\n+  while ((char *) w < b + x - 2 * sizeof (S4))\n+    {\n+      if (w->s10 && w->s8)\n+\t{\n+\t  fn2 (w->s12, w->s10, &c);\n+\t  z--;\n+\t  z->s4 = c.s4;\n+\t  z->s13 = (unsigned short) ((char *) w - b);\n+\t  z->s14 = w->s9;\n+\t  a++;\n+\t  fn5 ();\n+\t}\n+\n+      w = fn3 (w);\n+    }\n+  return a;\n+}\n+\n+__attribute__((regparm (3), noinline)) unsigned int\n+test (void *u, S6 *v, S1 **w, S7 *x, S2 *y, S1 *z)\n+{\n+  unsigned b = v->s17->s16;\n+  unsigned a;\n+  S4 *c;\n+  unsigned d, e, f, i;\n+\n+  fn1 (__func__, u, x->s18);\n+  c = (S4 *) (z->s3 + b);\n+  a = fn6 ((S3 *) (*w)->s3, b, y, c);\n+  c -= a;\n+  f = 0;\n+  e = 2;\n+  for (i = a - 1; ; i--)\n+    {\n+      if (f + (unsigned short) (c[i].s14 / 2) > b / 2)\n+\tbreak;\n+      f += c[i].s14;\n+      e++;\n+    }\n+  d = a - e;\n+  return c[d].s4;\n+}\n+\n+int main (void)\n+{\n+  char *p = mmap (NULL, 131072, PROT_READ | PROT_WRITE,\n+\t\t  MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);\n+  S1 wb, z, *w;\n+  S6 v;\n+  S7 x;\n+  S2 y;\n+  S5 vb;\n+  S4 s4;\n+  if (p == MAP_FAILED)\n+    return 0;\n+  if (munmap (p + 65536, 65536) < 0)\n+    return 0;\n+  memset (&wb, 0, sizeof (wb));\n+  memset (&z, 0, sizeof (z));\n+  memset (&v, 0, sizeof (v));\n+  memset (&x, 0, sizeof (x));\n+  memset (&y, 0, sizeof (y));\n+  memset (&vb, 0, sizeof (vb));\n+  memset (&s4, 0, sizeof (s4));\n+  s4.s14 = 254;\n+  z.s3 = p + 65536 - 2 * sizeof (S4);\n+  w = &wb;\n+  v.s17 = &vb;\n+  vb.s16 = 2 * sizeof (S4);\n+  memcpy (z.s3, &s4, sizeof (s4));\n+  memcpy (z.s3 + sizeof (s4), &s4, sizeof (s4));\n+  test ((void *) 0, &v, &w, &x, &y, &z);\n+  return 0;\n+}"}]}