{"sha": "88e03ffe44b66fd437545061f2790132c16630a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODhlMDNmZmU0NGI2NmZkNDM3NTQ1MDYxZjI3OTAxMzJjMTY2MzBhOA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2014-07-06T20:32:26Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2014-07-06T20:32:26Z"}, "message": "* ChangeLog: Fix whitespace.\n\nFrom-SVN: r212314", "tree": {"sha": "3e0879b428f0c1c5e4cdcc59fe2a9914f657447b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e0879b428f0c1c5e4cdcc59fe2a9914f657447b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88e03ffe44b66fd437545061f2790132c16630a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88e03ffe44b66fd437545061f2790132c16630a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88e03ffe44b66fd437545061f2790132c16630a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88e03ffe44b66fd437545061f2790132c16630a8/comments", "author": null, "committer": null, "parents": [{"sha": "e5fe19a38a0f1ea3c9e61d8834603459bf478e30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5fe19a38a0f1ea3c9e61d8834603459bf478e30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5fe19a38a0f1ea3c9e61d8834603459bf478e30"}], "stats": {"total": 59, "additions": 28, "deletions": 31}, "files": [{"sha": "3d3779f07edd03a969e8997560b2fb837510cc39", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 30, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88e03ffe44b66fd437545061f2790132c16630a8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88e03ffe44b66fd437545061f2790132c16630a8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=88e03ffe44b66fd437545061f2790132c16630a8", "patch": "@@ -5,10 +5,10 @@\n \n 2014-07-05  Gerald Pfeifer  <gerald@pfeifer.com>\n \n-\t* wide-int.h (wide_int_storage): Change declaration from struct \n+\t* wide-int.h (wide_int_storage): Change declaration from struct\n \tto class.\n \n-2014-07-05  Jan Hubicka   <hubicka@ucw.cz>\n+2014-07-05  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* cgraph.c (cgraph_create_indirect_edge): Update call of\n \tget_polymorphic_call_info.\n@@ -24,8 +24,7 @@\n \t(ipa_binfo_from_known_type_jfunc): Check that known type is record.\n \t(param_type_may_change_p): New predicate.\n \t(detect_type_change_from_memory_writes): Break out from ...\n-\t(detect_type_change): ... this one; use \n-\tparam_type_may_change_p.\n+\t(detect_type_change): ... this one; use param_type_may_change_p.\n \t(detect_type_change_ssa): Use param_type_may_change_p.\n \t(compute_known_type_jump_func): Use decl_maybe_in_construction_p.\n \n@@ -72,7 +71,7 @@\n 2014-07-04  Richard Earnshaw  <rearnsha@arm.com>\n \n \tPR target/61714\n-\t* aarch64.h (OPTION_DEFAULT_SPECS): Define.\n+\t* config/aarch64/aarch64.h (OPTION_DEFAULT_SPECS): Define.\n \n 2014-07-04  Jakub Jelinek  <jakub@redhat.com>\n \n@@ -204,9 +203,8 @@\n 2014-07-03  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/61682\n-\t* wide-int.cc (wi::mul_internal): Handle high correctly\n-\tfor umul_ppmm using cases and when one of the operands is\n-\tequal to 1.\n+\t* wide-int.cc (wi::mul_internal): Handle high correctly for umul_ppmm\n+\tusing cases and when one of the operands is equal to 1.\n \n 2014-07-03  Segher Boessenkool  <segher@kernel.crashing.org>\n \n@@ -223,7 +221,7 @@\n \t* vfp.md (divsf_vfp, divdf_vfp): Add earlyclobber when code can run\n \ton VFP9.\n \t(sqrtsf_vfp, sqrtdf_vfp): Likewise.\n-\t\n+\n 2014-07-03  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcov-io.c (gcov_read_words): Don't call memmove if excess is 0.\n@@ -276,9 +274,11 @@\n \tCall clear_aux_for_edges. Fix comments.\n \t(pre_edge_lcm): New wrapper function to call pre_edge_lcm_avs.\n \t(pre_edge_rev_lcm): Idem.\n-\t* config/epiphany/epiphany.c (emit_set_fp_mode): Add prev_mode parameter.\n+\t* config/epiphany/epiphany.c (emit_set_fp_mode): Add prev_mode\n+\tparameter.\n \t* config/epiphany/epiphany-protos.h (emit_set_fp_mode): Idem.\n-\t* config/epiphany/resolve-sw-modes.c (pass_resolve_sw_modes::execute): Idem.\n+\t* config/epiphany/resolve-sw-modes.c (pass_resolve_sw_modes::execute):\n+\tIdem.\n \t* config/i386/i386.c (x96_emit_mode_set): Idem.\n \t* config/sh/sh.c (sh_emit_mode_set): Likewise. Handle PR toggle.\n \t* config/sh/sh.md (toggle_pr): \tDefined if TARGET_FPU_SINGLE.\n@@ -309,37 +309,34 @@\n \n 2014-07-01  Jan Hubicka   <hubicka@ucw.cz>\n \n-\t* tree.c (decls_same_for_odr, decls_same_for_odr,\n-\ttypes_same_for_odr): Remove.\n+\t* tree.c (decls_same_for_odr, decls_same_for_odr, types_same_for_odr):\n+\tRemove.\n \t(type_in_anonymous_namespace_p): Constify argument.\n-\t* tree.h (types_same_for_odr, type_in_anonymous_namespace_p):\n-\tConstify.\n+\t* tree.h (types_same_for_odr, type_in_anonymous_namespace_p): Constify.\n \t* ipa-devirt.c (odr_type_d): Add ODR_VIOLATED field.\n \t(main_odr_variant): New function.\n \t(hash_type_name): Make static; update assert; do not ICE on\n \tnon-records.\n-\t(types_same_for_odr): Bring here from tree.c; simplify\n-\tand remove old structural comparing code that doesn't work\n-\tfor templates.\n+\t(types_same_for_odr): Bring here from tree.c; simplify and remove\n+\told structural comparing code that doesn't work for templates.\n \t(odr_hasher::equal): Update assert.\n \t(add_type_duplicate): Return true when bases should be computed;\n \treplace incomplete loader by complete; do not output duplicated\n \twarnings; do not ICE on non-records; set odr_violated flag.\n \t(get_odr_type): Be ready to replace incomplete type by complete\n \tone; work on ODR variants instead of main variants; reorder item\n \tin array so bases have still smaller indexes.\n-\t(dump_type_inheritance_graph): Be ready for holdes in odr_types\n-\tarray.\n+\t(dump_type_inheritance_graph): Be ready for holdes in odr_types array.\n \t(possible_polymorphic_call_targets): Do not ICE when BINFO is NULL.\n \n 2014-07-01  Cary Coutant  <ccoutant@google.com>\n \n \t* dwarf2out.c (remove_addr_table_entry): Remove unnecessary hash table\n-        lookup.\n+\tlookup.\n \t(resolve_addr_in_expr): When replacing the rtx in a location list\n-        entry, get a new address table entry.\n+\tentry, get a new address table entry.\n \t(dwarf2out_finish): Call index_location_lists even if there are no\n-        addr_index_table entries yet.\n+\taddr_index_table entries yet.\n \n 2014-07-01  Trevor Saunders  <tsaunders@mozilla.com>\n \n@@ -397,14 +394,14 @@\n 2014-06-28  Jan Hubicka  <hubicka@ucw.cz>\n \n \tRevert:\n-\t* tree-streamer-out.c (pack_ts_type_common_value_fields): Stream if type\n-\tis complete.\n-\t(write_ts_type_common_tree_pointers): Do not stream fields not set for incomplete\n-\ttypes; do not stream duplicated fields for variants; sanity check that variant\n-\tand type match.\n-\t(write_ts_type_non_common_tree_pointers): Likewise.\n-\t* tree-streamer-in.c (unpack_ts_type_common_value_fields): Mark in TYPE_SIZE whether\n+\t* tree-streamer-out.c (pack_ts_type_common_value_fields): Stream if\n \ttype is complete.\n+\t(write_ts_type_common_tree_pointers): Do not stream fields not set\n+\tfor incomplete types; do not stream duplicated fields for variants;\n+\tsanity check that variant and type match.\n+\t(write_ts_type_non_common_tree_pointers): Likewise.\n+\t* tree-streamer-in.c (unpack_ts_type_common_value_fields): Mark in\n+\tTYPE_SIZE whether type is complete.\n \t(lto_input_ts_type_common_tree_pointers): Do same changes as in\n \twrite_ts_type_common_tree_pointers\n \t(lto_input_ts_type_non_common_tree_pointers): Likewise."}, {"sha": "32f9189d57a1c03b12e347e841bbd848b4dc6439", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88e03ffe44b66fd437545061f2790132c16630a8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88e03ffe44b66fd437545061f2790132c16630a8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=88e03ffe44b66fd437545061f2790132c16630a8", "patch": "@@ -67,7 +67,7 @@\n \t    Chen Gang <gang.chen.5i5j@gmail.com>\n \n \t* gcc.c-torture/compile/section.c: New testcase.\n- \n+\n 2014-07-02  Christian Bruel  <christian.bruel@st.com>\n \n \tPR target/29349"}]}