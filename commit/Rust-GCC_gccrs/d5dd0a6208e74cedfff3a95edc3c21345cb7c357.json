{"sha": "d5dd0a6208e74cedfff3a95edc3c21345cb7c357", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDVkZDBhNjIwOGU3NGNlZGZmZjNhOTVlZGMzYzIxMzQ1Y2I3YzM1Nw==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2016-05-01T05:06:08Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2016-05-01T05:06:08Z"}, "message": "sh.h (TARGET_SH4): Remove and use default implementation.\n\ngcc/\n\t* config/sh/sh.h (TARGET_SH4): Remove and use default implementation.\n\t(TARGET_FPU_DOUBLE): Simplify.\n\t(BASE_ARG_REG, DOUBLE_TYPE_SIZE, OPTIMIZE_MODE_SWITCHING): Replace\n\t'TARGET_SH4 || TARGET_SH2A_DOUBLE' conditions with 'TARGET_FPU_DOUBLE'.\n\t* config/sh/sh.c: Replace 'TARGET_SH4 || TARGET_SH2A_DOUBLE' conditions\n\twith 'TARGET_FPU_DOUBLE'.\n\t* config/sh/sh.md: Likewise.\n\nFrom-SVN: r235689", "tree": {"sha": "065861e3ebf8f518d0560242df1485e8f7f1a87d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/065861e3ebf8f518d0560242df1485e8f7f1a87d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5dd0a6208e74cedfff3a95edc3c21345cb7c357", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5dd0a6208e74cedfff3a95edc3c21345cb7c357", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5dd0a6208e74cedfff3a95edc3c21345cb7c357", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5dd0a6208e74cedfff3a95edc3c21345cb7c357/comments", "author": null, "committer": null, "parents": [{"sha": "21b607581a6e09a84823bf04bf263e610f5d69d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21b607581a6e09a84823bf04bf263e610f5d69d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21b607581a6e09a84823bf04bf263e610f5d69d0"}], "stats": {"total": 138, "additions": 69, "deletions": 69}, "files": [{"sha": "acba7d0c51f8b1b41b6994e81705a4f712bb68e2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5dd0a6208e74cedfff3a95edc3c21345cb7c357/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5dd0a6208e74cedfff3a95edc3c21345cb7c357/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d5dd0a6208e74cedfff3a95edc3c21345cb7c357", "patch": "@@ -1,3 +1,13 @@\n+2016-05-01  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\t* config/sh/sh.h (TARGET_SH4): Remove and use default implementation.\n+\t(TARGET_FPU_DOUBLE): Simplify.\n+\t(BASE_ARG_REG, DOUBLE_TYPE_SIZE, OPTIMIZE_MODE_SWITCHING): Replace\n+\t'TARGET_SH4 || TARGET_SH2A_DOUBLE' conditions with 'TARGET_FPU_DOUBLE'.\n+\t* config/sh/sh.c: Replace 'TARGET_SH4 || TARGET_SH2A_DOUBLE' conditions\n+\twith 'TARGET_FPU_DOUBLE'.\n+\t* config/sh/sh.md: Likewise.\n+\n 2016-05-01  Yoshinori Sato  <ysato@users.sourceforge.jp>\n \n \t* config/sh/linux.h (SH_DIV_STRATEGY_DEFAULT,"}, {"sha": "cddb31c8e62bfe537aa7a74b4c7c986334599252", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5dd0a6208e74cedfff3a95edc3c21345cb7c357/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5dd0a6208e74cedfff3a95edc3c21345cb7c357/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=d5dd0a6208e74cedfff3a95edc3c21345cb7c357", "patch": "@@ -6821,7 +6821,7 @@ push (int rn)\n     x = gen_push_fpul ();\n   else if (rn == FPSCR_REG)\n     x = gen_push_fpscr ();\n-  else if ((TARGET_SH4 || TARGET_SH2A_DOUBLE) && TARGET_FMOVD\n+  else if (TARGET_FPU_DOUBLE && TARGET_FMOVD\n \t   && ! TARGET_FPU_SINGLE && FP_OR_XD_REGISTER_P (rn))\n     {\n       if (FP_REGISTER_P (rn) && (rn - FIRST_FP_REG) & 1)\n@@ -6847,7 +6847,7 @@ pop (int rn)\n     x = gen_pop_fpul ();\n   else if (rn == FPSCR_REG)\n     x = gen_pop_fpscr ();\n-  else if ((TARGET_SH4 || TARGET_SH2A_DOUBLE) && TARGET_FMOVD\n+  else if (TARGET_FPU_DOUBLE && TARGET_FMOVD\n \t   && ! TARGET_FPU_SINGLE && FP_OR_XD_REGISTER_P (rn))\n     {\n       if (FP_REGISTER_P (rn) && (rn - FIRST_FP_REG) & 1)\n@@ -6991,12 +6991,11 @@ calc_live_regs (HARD_REG_SET *live_regs_mask)\n   nosave_low_regs = lookup_attribute (\"nosave_low_regs\", attrs) != NULL_TREE;\n \n   CLEAR_HARD_REG_SET (*live_regs_mask);\n-  if ((TARGET_SH4 || TARGET_SH2A_DOUBLE) && TARGET_FMOVD && interrupt_handler\n+  if (TARGET_FPU_DOUBLE && TARGET_FMOVD && interrupt_handler\n       && df_regs_ever_live_p (FPSCR_REG))\n     target_flags &= ~MASK_FPU_SINGLE;\n   /* If we can save a lot of saves by switching to double mode, do that.  */\n-  else if ((TARGET_SH4 || TARGET_SH2A_DOUBLE) && TARGET_FMOVD\n-\t   && TARGET_FPU_SINGLE)\n+  else if (TARGET_FPU_DOUBLE && TARGET_FMOVD && TARGET_FPU_SINGLE)\n     for (count = 0, reg = FIRST_FP_REG; reg <= LAST_FP_REG; reg += 2)\n       if (df_regs_ever_live_p (reg) && df_regs_ever_live_p (reg+1)\n \t  && (! call_really_used_regs[reg]\n@@ -7058,7 +7057,7 @@ calc_live_regs (HARD_REG_SET *live_regs_mask)\n \t  SET_HARD_REG_BIT (*live_regs_mask, reg);\n \t  count += GET_MODE_SIZE (REGISTER_NATURAL_MODE (reg));\n \n-\t  if ((TARGET_SH4 || TARGET_SH2A_DOUBLE) && TARGET_FMOVD\n+\t  if (TARGET_FPU_DOUBLE && TARGET_FMOVD\n \t      && GET_MODE_CLASS (REGISTER_NATURAL_MODE (reg)) == MODE_FLOAT)\n \t    {\n \t      if (FP_REGISTER_P (reg))\n@@ -7543,7 +7542,7 @@ sh_builtin_saveregs (void)\n   fpregs = copy_to_mode_reg (Pmode,\n \t\t\t     plus_constant (Pmode, XEXP (regbuf, 0),\n \t\t\t\t\t    n_floatregs * UNITS_PER_WORD));\n-  if (TARGET_SH4 || TARGET_SH2A_DOUBLE)\n+  if (TARGET_FPU_DOUBLE)\n     {\n       rtx mem;\n       for (regno = NPARM_REGS (DFmode) - 2; regno >= first_floatreg; regno -= 2)\n@@ -7796,7 +7795,7 @@ sh_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n \t    }\n \t}\n \n-      if (TARGET_SH4 || TARGET_SH2A_DOUBLE)\n+      if (TARGET_FPU_DOUBLE)\n \t{\n \t  pass_as_float = ((TREE_CODE (eff_type) == REAL_TYPE && size <= 8)\n \t\t\t   || (TREE_CODE (eff_type) == COMPLEX_TYPE\n@@ -8020,7 +8019,7 @@ sh_round_reg (const CUMULATIVE_ARGS& cum, machine_mode mode)\n      function as is.  Make this more readable.  */\n   return\n   (((TARGET_ALIGN_DOUBLE\n-      || ((TARGET_SH4 || TARGET_SH2A_DOUBLE)\n+      || (TARGET_FPU_DOUBLE\n \t  && (mode == DFmode || mode == DCmode)\n \t  && cum.arg_count[(int) SH_ARG_FLOAT] < NPARM_REGS (mode)))\n      && GET_MODE_UNIT_SIZE (mode) > UNITS_PER_WORD)\n@@ -8065,7 +8064,7 @@ sh_arg_partial_bytes (cumulative_args_t cum_v, machine_mode mode,\n   int words = 0;\n \n   if (sh_pass_in_reg_p (*cum, mode, type)\n-      && !(TARGET_SH4 || TARGET_SH2A_DOUBLE)\n+      && !TARGET_FPU_DOUBLE\n       && (sh_round_reg (*cum, mode)\n \t  + (mode != BLKmode\n \t     ? CEIL (GET_MODE_SIZE (mode), UNITS_PER_WORD)\n@@ -9187,8 +9186,7 @@ sh_legitimate_address_p (machine_mode mode, rtx x, bool strict)\n \treturn true;\n \n       if (GET_MODE_SIZE (mode) <= 4\n-\t  || ((TARGET_SH4 || TARGET_SH2A_DOUBLE)\n-\t      && TARGET_FMOVD && mode == DFmode))\n+\t  || (TARGET_FPU_DOUBLE && TARGET_FMOVD && mode == DFmode))\n \t{\n \t  if (MAYBE_BASE_REGISTER_RTX_P (xop1, strict)\n \t      && MAYBE_INDEX_REGISTER_RTX_P (xop0, strict))\n@@ -9373,7 +9371,7 @@ sh_legitimize_address (rtx x, rtx oldx, machine_mode mode)\n   if (flag_pic)\n     x = legitimize_pic_address (oldx, mode, NULL_RTX);\n \n-  if (((TARGET_SH4 || TARGET_SH2A_DOUBLE) && mode == DFmode)\n+  if ((TARGET_FPU_DOUBLE && mode == DFmode)\n       || (TARGET_SH2E && mode == SFmode))\n     return x;\n \n@@ -10732,8 +10730,7 @@ sh_hard_regno_mode_ok (unsigned int regno, machine_mode mode)\n       if (mode == SFmode\n \t  || mode == SImode\n \t  || ((TARGET_SH2E) && mode == SCmode)\n-\t  || ((((TARGET_SH4 || TARGET_SH2A_DOUBLE) && mode == DFmode)\n-\t       || mode == DCmode)\n+\t  || (((TARGET_FPU_DOUBLE && mode == DFmode) || mode == DCmode)\n \t      && ((regno - FIRST_FP_REG) & 1) == 0)\n \t  || (TARGET_SH4 && mode == TImode\n \t      && ((regno - FIRST_FP_REG) & 3) == 0))\n@@ -11558,7 +11555,7 @@ static bool\n sh_legitimize_address_displacement (rtx *disp, rtx *offs,\n \t\t\t\t    machine_mode mode)\n {\n-  if (((TARGET_SH4 || TARGET_SH2A_DOUBLE) && mode == DFmode)\n+  if ((TARGET_FPU_DOUBLE && mode == DFmode)\n       || (TARGET_SH2E && mode == SFmode))\n     return false;\n "}, {"sha": "60c625028c1da07daa69cc0922562dad1a2d9920", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5dd0a6208e74cedfff3a95edc3c21345cb7c357/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5dd0a6208e74cedfff3a95edc3c21345cb7c357/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=d5dd0a6208e74cedfff3a95edc3c21345cb7c357", "patch": "@@ -60,16 +60,11 @@ extern int code_for_indirect_jump_scratch;\n #define TARGET_SUPERSCALAR (TARGET_HARD_SH4 || TARGET_SH2A)\n \n /* Nonzero if a double-precision FPU is available.  */\n-#define TARGET_FPU_DOUBLE \\\n-  ((target_flags & MASK_SH4) != 0 || TARGET_SH2A_DOUBLE)\n+#define TARGET_FPU_DOUBLE (TARGET_SH4 || TARGET_SH2A_DOUBLE)\n \n /* Nonzero if an FPU is available.  */\n #define TARGET_FPU_ANY (TARGET_SH2E || TARGET_FPU_DOUBLE)\n \n-/* Nonzero if we should generate code using type 4 insns.  */\n-#undef TARGET_SH4\n-#define TARGET_SH4 ((target_flags & MASK_SH4) != 0 && TARGET_SH1)\n-\n /* Nonzero if we're generating code for SH4a, unless the use of the\n    FPU is disabled (which makes it compatible with SH4al-dsp).  */\n #define TARGET_SH4A_FP (TARGET_SH4A && TARGET_FPU_ANY)\n@@ -1085,7 +1080,7 @@ extern enum reg_class regno_reg_class[FIRST_PSEUDO_REGISTER];\n #define NPARM_REGS(MODE) \\\n   (TARGET_FPU_ANY && (MODE) == SFmode \\\n    ? 8 \\\n-   : (TARGET_SH4 || TARGET_SH2A_DOUBLE) \\\n+   : TARGET_FPU_DOUBLE \\\n      && (GET_MODE_CLASS (MODE) == MODE_FLOAT \\\n \t || GET_MODE_CLASS (MODE) == MODE_COMPLEX_FLOAT) \\\n    ? 8 \\\n@@ -1142,8 +1137,9 @@ extern enum reg_class regno_reg_class[FIRST_PSEUDO_REGISTER];\n #define BASE_ARG_REG(MODE) \\\n   ((TARGET_SH2E && ((MODE) == SFmode))\t\t\t\\\n    ? FIRST_FP_PARM_REG\t\t\t\t\t\\\n-   : (TARGET_SH4 || TARGET_SH2A_DOUBLE) && (GET_MODE_CLASS (MODE) == MODE_FLOAT\t\\\n-\t\t    || GET_MODE_CLASS (MODE) == MODE_COMPLEX_FLOAT)\\\n+   : TARGET_FPU_DOUBLE\t\t\t\t\t\\\n+     && (GET_MODE_CLASS (MODE) == MODE_FLOAT\t\t\\\n+\t || GET_MODE_CLASS (MODE) == MODE_COMPLEX_FLOAT)\\\n    ? FIRST_FP_PARM_REG\t\t\t\t\t\\\n    : FIRST_PARM_REG)\n \n@@ -1487,8 +1483,7 @@ struct sh_args {\n \n /* Since the SH2e has only `float' support, it is desirable to make all\n    floating point types equivalent to `float'.  */\n-#define DOUBLE_TYPE_SIZE ((TARGET_SH2E && ! TARGET_SH4 && ! TARGET_SH2A_DOUBLE)\\\n-\t\t\t  ? 32 : 64)\n+#define DOUBLE_TYPE_SIZE (TARGET_FPU_SINGLE_ONLY ? 32 : 64)\n \n /* 'char' is signed by default.  */\n #define DEFAULT_SIGNED_CHAR  1\n@@ -1886,7 +1881,7 @@ extern int current_function_interrupt;\n \n #define NUM_MODES_FOR_MODE_SWITCHING { FP_MODE_NONE }\n \n-#define OPTIMIZE_MODE_SWITCHING(ENTITY) (TARGET_SH4 || TARGET_SH2A_DOUBLE)\n+#define OPTIMIZE_MODE_SWITCHING(ENTITY) (TARGET_FPU_DOUBLE)\n \n #define ACTUAL_NORMAL_MODE(ENTITY) \\\n   (TARGET_FPU_SINGLE ? FP_MODE_SINGLE : FP_MODE_DOUBLE)"}, {"sha": "3af9644d530e285dce5255c3184f81cb7e6c8254", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 39, "deletions": 41, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5dd0a6208e74cedfff3a95edc3c21345cb7c357/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5dd0a6208e74cedfff3a95edc3c21345cb7c357/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=d5dd0a6208e74cedfff3a95edc3c21345cb7c357", "patch": "@@ -2256,8 +2256,7 @@\n    (clobber (reg:SI R5_REG))\n    (use (match_operand:SI 1 \"arith_reg_operand\" \"r,r\"))\n    (use (match_operand 2 \"\" \"Z,Ccl\"))]\n-  \"(TARGET_FPU_SINGLE_ONLY || TARGET_FPU_DOUBLE)\n-   && TARGET_FPU_SINGLE\"\n+  \"TARGET_FPU_ANY && TARGET_FPU_SINGLE\"\n   \"@\n \tjsr\t@%1%#\n \tbsrf\t%1\\n%O2:%#\"\n@@ -2393,8 +2392,7 @@\n    (clobber (reg:SI R2_REG))\n    (use (match_operand:SI 1 \"arith_reg_operand\" \"r,r\"))\n    (use (match_operand 2 \"\" \"Z,Ccl\"))]\n-  \"(TARGET_FPU_SINGLE_ONLY || TARGET_FPU_DOUBLE)\n-   && TARGET_FPU_SINGLE\"\n+  \"TARGET_FPU_ANY && TARGET_FPU_SINGLE\"\n   \"@\n \tjsr\t@%1%#\n \tbsrf\t%1\\n%O2:%#\"\n@@ -5568,7 +5566,7 @@\n   [(set (match_operand:DF 0 \"general_movdst_operand\" \"=r,r,r,m\")\n \t(match_operand:DF 1 \"general_movsrc_operand\" \"r,FQ,m,r\"))]\n   \"TARGET_SH1\n-   && (! (TARGET_SH4 || TARGET_SH2A_DOUBLE) || reload_completed\n+   && (!TARGET_FPU_DOUBLE || reload_completed\n        /* ??? We provide some insn so that direct_{load,store}[DFmode] get set */\n        || (REG_P (operands[0]) && REGNO (operands[0]) == 3)\n        || (REG_P (operands[1]) && REGNO (operands[1]) == 3))\n@@ -5591,7 +5589,7 @@\n \t(match_operand:DF 1 \"general_movsrc_operand\"  \"d,r,F,m,d,FQ,m,r,d,r\"))\n    (use (reg:SI FPSCR_MODES_REG))\n    (clobber (match_scratch:SI 2                      \"=X,X,&z,X,X,X,X,X,X,X\"))]\n-  \"(TARGET_SH4 || TARGET_SH2A_DOUBLE)\n+  \"TARGET_FPU_DOUBLE\n    && (arith_reg_operand (operands[0], DFmode)\n        || arith_reg_operand (operands[1], DFmode))\"\n   {\n@@ -5641,7 +5639,7 @@\n \t(match_operand:DF 1 \"register_operand\"))\n    (use (reg:SI FPSCR_MODES_REG))\n    (clobber (match_scratch:SI 2))]\n-  \"(TARGET_SH4 || TARGET_SH2A_DOUBLE) && reload_completed\n+  \"TARGET_FPU_DOUBLE && reload_completed\n    && (true_regnum (operands[0]) < 16) != (true_regnum (operands[1]) < 16)\"\n   [(const_int 0)]\n {\n@@ -5665,7 +5663,7 @@\n \t(match_operand:DF 1 \"general_movsrc_operand\"  \"\"))\n    (use (reg:SI FPSCR_MODES_REG))\n    (clobber (match_scratch:SI 2))]\n-  \"(TARGET_SH4 || TARGET_SH2A_DOUBLE)\n+  \"TARGET_FPU_DOUBLE\n    && reload_completed\n    && true_regnum (operands[0]) < 16\n    && true_regnum (operands[1]) < 16\"\n@@ -5736,7 +5734,7 @@\n \t(match_operand:DF 1 \"memory_operand\"  \"\"))\n    (use (reg:SI FPSCR_MODES_REG))\n    (clobber (reg:SI R0_REG))]\n-  \"(TARGET_SH4 || TARGET_SH2A_DOUBLE) && reload_completed\"\n+  \"TARGET_FPU_DOUBLE && reload_completed\"\n   [(parallel [(set (match_dup 0) (match_dup 1))\n \t      (use (reg:SI FPSCR_MODES_REG))\n \t      (clobber (scratch:SI))])]\n@@ -5792,7 +5790,7 @@\n \t(mem:DF (match_operand:SI 1 \"register_operand\" \"\")))\n    (use (reg:SI FPSCR_MODES_REG))\n    (clobber (match_scratch:SI 2))]\n-  \"(TARGET_SH4 || TARGET_SH2A_DOUBLE) && ! TARGET_FMOVD && reload_completed\n+  \"TARGET_FPU_DOUBLE && ! TARGET_FMOVD && reload_completed\n    && FP_OR_XD_REGISTER_P (true_regnum (operands[0]))\n    && find_regno_note (insn, REG_DEAD, true_regnum (operands[1]))\"\n   [(const_int 0)]\n@@ -5817,7 +5815,7 @@\n \t(match_operand:DF 1 \"memory_operand\" \"\"))\n    (use (reg:SI FPSCR_MODES_REG))\n    (clobber (match_scratch:SI 2))]\n-  \"(TARGET_SH4 || TARGET_SH2A_DOUBLE) && ! TARGET_FMOVD && reload_completed\n+  \"TARGET_FPU_DOUBLE && ! TARGET_FMOVD && reload_completed\n    && FP_OR_XD_REGISTER_P (true_regnum (operands[0]))\"\n   [(const_int 0)]\n {\n@@ -5884,7 +5882,7 @@\n \t(match_operand:DF 1 \"register_operand\" \"\"))\n    (use (reg:SI FPSCR_MODES_REG))\n    (clobber (match_scratch:SI 2))]\n-  \"(TARGET_SH4 || TARGET_SH2A_DOUBLE) && ! TARGET_FMOVD && reload_completed\n+  \"TARGET_FPU_DOUBLE && ! TARGET_FMOVD && reload_completed\n    && FP_OR_XD_REGISTER_P (true_regnum (operands[1]))\"\n   [(const_int 0)]\n {\n@@ -6010,7 +6008,7 @@\n   \"\"\n {\n   prepare_move_operands (operands, DFmode);\n-  if (TARGET_SH4 || TARGET_SH2A_DOUBLE)\n+  if (TARGET_FPU_DOUBLE)\n     {\n       emit_insn (gen_movdf_i4 (operands[0], operands[1]));\n       DONE;\n@@ -8563,7 +8561,7 @@\n \t(match_operator:SI 1 \"ordered_comparison_operator\"\n \t [(match_operand:DF 2 \"arith_operand\" \"\")\n \t  (match_operand:DF 3 \"arith_operand\" \"\")]))]\n-  \"TARGET_SH4 || TARGET_SH2A_DOUBLE\"\n+  \"TARGET_FPU_DOUBLE\"\n {\n   if (! currently_expanding_to_rtl)\n     FAIL;\n@@ -9143,7 +9141,7 @@\n \t(xor:SI (reg:SI FPSCR_REG) (const_int FPSCR_SZ)))\n    (set (reg:SI FPSCR_MODES_REG)\n \t(unspec_volatile:SI [(const_int 0)] UNSPECV_FPSCR_MODES))]\n-  \"(TARGET_SH4 || TARGET_SH2A_DOUBLE)\"\n+  \"TARGET_FPU_DOUBLE\"\n   \"fschg\"\n   [(set_attr \"type\" \"fpscr_toggle\") (set_attr \"fp_set\" \"unknown\")])\n \n@@ -9493,7 +9491,7 @@\n   [(set (match_operand:DF 0 \"fp_arith_reg_operand\" \"\")\n \t(plus:DF (match_operand:DF 1 \"fp_arith_reg_operand\" \"\")\n \t\t (match_operand:DF 2 \"fp_arith_reg_operand\" \"\")))]\n-  \"TARGET_SH4 || TARGET_SH2A_DOUBLE\"\n+  \"TARGET_FPU_DOUBLE\"\n {\n   emit_insn (gen_adddf3_i (operands[0], operands[1], operands[2]));\n   DONE;\n@@ -9505,7 +9503,7 @@\n \t\t (match_operand:DF 2 \"fp_arith_reg_operand\" \"f\")))\n    (clobber (reg:SI FPSCR_STAT_REG))\n    (use (reg:SI FPSCR_MODES_REG))]\n-  \"(TARGET_SH4 || TARGET_SH2A_DOUBLE)\"\n+  \"TARGET_FPU_DOUBLE\"\n   \"fadd\t%2,%0\"\n   [(set_attr \"type\" \"dfp_arith\")\n    (set_attr \"fp_mode\" \"double\")])\n@@ -9514,7 +9512,7 @@\n   [(set (match_operand:DF 0 \"fp_arith_reg_operand\" \"\")\n \t(minus:DF (match_operand:DF 1 \"fp_arith_reg_operand\" \"\")\n \t\t  (match_operand:DF 2 \"fp_arith_reg_operand\" \"\")))]\n-  \"TARGET_SH4 || TARGET_SH2A_DOUBLE\"\n+  \"TARGET_FPU_DOUBLE\"\n {\n   emit_insn (gen_subdf3_i (operands[0], operands[1], operands[2]));\n   DONE;\n@@ -9526,7 +9524,7 @@\n \t\t  (match_operand:DF 2 \"fp_arith_reg_operand\" \"f\")))\n    (clobber (reg:SI FPSCR_STAT_REG))\n    (use (reg:SI FPSCR_MODES_REG))]\n-  \"(TARGET_SH4 || TARGET_SH2A_DOUBLE)\"\n+  \"TARGET_FPU_DOUBLE\"\n   \"fsub\t%2,%0\"\n   [(set_attr \"type\" \"dfp_arith\")\n    (set_attr \"fp_mode\" \"double\")])\n@@ -9535,7 +9533,7 @@\n   [(set (match_operand:DF 0 \"fp_arith_reg_operand\" \"\")\n \t(mult:DF (match_operand:DF 1 \"fp_arith_reg_operand\" \"\")\n \t\t (match_operand:DF 2 \"fp_arith_reg_operand\" \"\")))]\n-  \"TARGET_SH4 || TARGET_SH2A_DOUBLE\"\n+  \"TARGET_FPU_DOUBLE\"\n {\n   emit_insn (gen_muldf3_i (operands[0], operands[1], operands[2]));\n   DONE;\n@@ -9547,7 +9545,7 @@\n \t\t (match_operand:DF 2 \"fp_arith_reg_operand\" \"f\")))\n    (clobber (reg:SI FPSCR_STAT_REG))\n    (use (reg:SI FPSCR_MODES_REG))]\n-  \"(TARGET_SH4 || TARGET_SH2A_DOUBLE)\"\n+  \"TARGET_FPU_DOUBLE\"\n   \"fmul\t%2,%0\"\n   [(set_attr \"type\" \"dfp_mul\")\n    (set_attr \"fp_mode\" \"double\")])\n@@ -9556,7 +9554,7 @@\n   [(set (match_operand:DF 0 \"fp_arith_reg_operand\" \"\")\n \t(div:DF (match_operand:DF 1 \"fp_arith_reg_operand\" \"\")\n \t\t(match_operand:DF 2 \"fp_arith_reg_operand\" \"\")))]\n-  \"TARGET_SH4 || TARGET_SH2A_DOUBLE\"\n+  \"TARGET_FPU_DOUBLE\"\n {\n   emit_insn (gen_divdf3_i (operands[0], operands[1], operands[2]));\n   DONE;\n@@ -9568,15 +9566,15 @@\n \t\t(match_operand:DF 2 \"fp_arith_reg_operand\" \"f\")))\n    (clobber (reg:SI FPSCR_STAT_REG))\n    (use (reg:SI FPSCR_MODES_REG))]\n-  \"(TARGET_SH4 || TARGET_SH2A_DOUBLE)\"\n+  \"TARGET_FPU_DOUBLE\"\n   \"fdiv\t%2,%0\"\n   [(set_attr \"type\" \"dfdiv\")\n    (set_attr \"fp_mode\" \"double\")])\n \n (define_expand \"floatsidf2\"\n   [(set (match_operand:DF 0 \"fp_arith_reg_operand\" \"\")\n \t(float:DF (match_operand:SI 1 \"fpul_operand\" \"\")))]\n-  \"TARGET_SH4 || TARGET_SH2A_DOUBLE\"\n+  \"TARGET_FPU_DOUBLE\"\n {\n   emit_insn (gen_floatsidf2_i (operands[0], operands[1]));\n   DONE;\n@@ -9587,15 +9585,15 @@\n \t(float:DF (match_operand:SI 1 \"fpul_operand\" \"y\")))\n    (clobber (reg:SI FPSCR_STAT_REG))\n    (use (reg:SI FPSCR_MODES_REG))]\n-  \"(TARGET_SH4 || TARGET_SH2A_DOUBLE)\"\n+  \"TARGET_FPU_DOUBLE\"\n   \"float\t%1,%0\"\n   [(set_attr \"type\" \"dfp_conv\")\n    (set_attr \"fp_mode\" \"double\")])\n \n (define_expand \"fix_truncdfsi2\"\n   [(set (match_operand:SI 0 \"fpul_operand\" \"\")\n \t(fix:SI (match_operand:DF 1 \"fp_arith_reg_operand\" \"\")))]\n-  \"TARGET_SH4 || TARGET_SH2A_DOUBLE\"\n+  \"TARGET_FPU_DOUBLE\"\n {\n    emit_insn (gen_fix_truncdfsi2_i (operands[0], operands[1]));\n    DONE;\n@@ -9606,7 +9604,7 @@\n \t(fix:SI (match_operand:DF 1 \"fp_arith_reg_operand\" \"f\")))\n    (clobber (reg:SI FPSCR_STAT_REG))\n    (use (reg:SI FPSCR_MODES_REG))]\n-  \"(TARGET_SH4 || TARGET_SH2A_DOUBLE)\"\n+  \"TARGET_FPU_DOUBLE\"\n   \"ftrc\t%1,%0\"\n   [(set_attr \"type\" \"dfp_conv\")\n    (set_attr \"dfp_comp\" \"no\")\n@@ -9618,7 +9616,7 @@\n \t       (match_operand:DF 1 \"fp_arith_reg_operand\" \"f\")))\n    (clobber (reg:SI FPSCR_STAT_REG))\n    (use (reg:SI FPSCR_MODES_REG))]\n-  \"(TARGET_SH4 || TARGET_SH2A_DOUBLE)\"\n+  \"TARGET_FPU_DOUBLE\"\n   \"fcmp/gt\t%1,%0\"\n   [(set_attr \"type\" \"dfp_cmp\")\n    (set_attr \"fp_mode\" \"double\")])\n@@ -9629,7 +9627,7 @@\n \t       (match_operand:DF 1 \"fp_arith_reg_operand\" \"f\")))\n    (clobber (reg:SI FPSCR_STAT_REG))\n    (use (reg:SI FPSCR_MODES_REG))]\n-  \"(TARGET_SH4 || TARGET_SH2A_DOUBLE)\"\n+  \"TARGET_FPU_DOUBLE\"\n   \"fcmp/eq\t%1,%0\"\n   [(set_attr \"type\" \"dfp_cmp\")\n    (set_attr \"fp_mode\" \"double\")])\n@@ -9641,7 +9639,7 @@\n \t\t       (match_operand:DF 1 \"fp_arith_reg_operand\" \"f\"))))\n    (clobber (reg:SI FPSCR_STAT_REG))\n    (use (reg:SI FPSCR_MODES_REG))]\n-  \"TARGET_IEEE && (TARGET_SH4 || TARGET_SH2A_DOUBLE)\"\n+  \"TARGET_IEEE && TARGET_FPU_DOUBLE\"\n {\n   return output_ieee_ccmpeq (insn, operands);\n }\n@@ -9655,7 +9653,7 @@\n \t\t\t(match_operand:DF 2 \"arith_operand\" \"\")])\n \t\t      (match_operand 3 \"\" \"\")\n \t\t      (pc)))]\n-  \"TARGET_SH4 || TARGET_SH2A_DOUBLE\"\n+  \"TARGET_FPU_DOUBLE\"\n {\n   sh_emit_compare_and_branch (operands, DFmode);\n   DONE;\n@@ -9664,19 +9662,19 @@\n (define_expand \"negdf2\"\n   [(set (match_operand:DF 0 \"fp_arith_reg_operand\")\n \t(neg:DF (match_operand:DF 1 \"fp_arith_reg_operand\")))]\n-  \"TARGET_SH4 || TARGET_SH2A_DOUBLE\")\n+  \"TARGET_FPU_DOUBLE\")\n \n (define_insn \"*negdf2_i\"\n   [(set (match_operand:DF 0 \"fp_arith_reg_operand\" \"=f\")\n \t(neg:DF (match_operand:DF 1 \"fp_arith_reg_operand\" \"0\")))]\n-  \"(TARGET_SH4 || TARGET_SH2A_DOUBLE)\"\n+  \"TARGET_FPU_DOUBLE\"\n   \"fneg\t%0\"\n   [(set_attr \"type\" \"fmove\")])\n \n (define_expand \"sqrtdf2\"\n   [(set (match_operand:DF 0 \"fp_arith_reg_operand\")\n \t(sqrt:DF (match_operand:DF 1 \"fp_arith_reg_operand\")))]\n-  \"TARGET_SH4 || TARGET_SH2A_DOUBLE\"\n+  \"TARGET_FPU_DOUBLE\"\n {\n   emit_insn (gen_sqrtdf2_i (operands[0], operands[1]));\n   DONE;\n@@ -9687,27 +9685,27 @@\n \t(sqrt:DF (match_operand:DF 1 \"fp_arith_reg_operand\" \"0\")))\n    (clobber (reg:SI FPSCR_STAT_REG))\n    (use (reg:SI FPSCR_MODES_REG))]\n-  \"(TARGET_SH4 || TARGET_SH2A_DOUBLE)\"\n+  \"TARGET_FPU_DOUBLE\"\n   \"fsqrt\t%0\"\n   [(set_attr \"type\" \"dfdiv\")\n    (set_attr \"fp_mode\" \"double\")])\n \n (define_expand \"absdf2\"\n   [(set (match_operand:DF 0 \"fp_arith_reg_operand\")\n \t(abs:DF (match_operand:DF 1 \"fp_arith_reg_operand\")))]\n-  \"TARGET_SH4 || TARGET_SH2A_DOUBLE\")\n+  \"TARGET_FPU_DOUBLE\")\n \n (define_insn \"*absdf2_i\"\n   [(set (match_operand:DF 0 \"fp_arith_reg_operand\" \"=f\")\n \t(abs:DF (match_operand:DF 1 \"fp_arith_reg_operand\" \"0\")))]\n-  \"(TARGET_SH4 || TARGET_SH2A_DOUBLE)\"\n+  \"TARGET_FPU_DOUBLE\"\n   \"fabs\t%0\"\n   [(set_attr \"type\" \"fmove\")])\n \n (define_expand \"extendsfdf2\"\n   [(set (match_operand:DF 0 \"fp_arith_reg_operand\" \"\")\n \t(float_extend:DF (match_operand:SF 1 \"fpul_operand\" \"\")))]\n-  \"TARGET_SH4 || TARGET_SH2A_DOUBLE\"\n+  \"TARGET_FPU_DOUBLE\"\n {\n   emit_insn (gen_extendsfdf2_i4 (operands[0], operands[1]));\n   DONE;\n@@ -9718,15 +9716,15 @@\n \t(float_extend:DF (match_operand:SF 1 \"fpul_operand\" \"y\")))\n    (clobber (reg:SI FPSCR_STAT_REG))\n    (use (reg:SI FPSCR_MODES_REG))]\n-  \"(TARGET_SH4 || TARGET_SH2A_DOUBLE)\"\n+  \"TARGET_FPU_DOUBLE\"\n   \"fcnvsd  %1,%0\"\n   [(set_attr \"type\" \"fp\")\n    (set_attr \"fp_mode\" \"double\")])\n \n (define_expand \"truncdfsf2\"\n   [(set (match_operand:SF 0 \"fpul_operand\" \"\")\n \t(float_truncate:SF (match_operand:DF 1 \"fp_arith_reg_operand\" \"\")))]\n-  \"TARGET_SH4 || TARGET_SH2A_DOUBLE\"\n+  \"TARGET_FPU_DOUBLE\"\n {\n   emit_insn (gen_truncdfsf2_i4 (operands[0], operands[1]));\n   DONE;\n@@ -9737,7 +9735,7 @@\n \t(float_truncate:SF (match_operand:DF 1 \"fp_arith_reg_operand\" \"f\")))\n    (clobber (reg:SI FPSCR_STAT_REG))\n    (use (reg:SI FPSCR_MODES_REG))]\n-  \"(TARGET_SH4 || TARGET_SH2A_DOUBLE)\"\n+  \"TARGET_FPU_DOUBLE\"\n   \"fcnvds  %1,%0\"\n   [(set_attr \"type\" \"fp\")\n    (set_attr \"fp_mode\" \"double\")])"}]}