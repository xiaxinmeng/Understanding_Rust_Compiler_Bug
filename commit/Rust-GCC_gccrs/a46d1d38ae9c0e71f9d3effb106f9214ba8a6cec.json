{"sha": "a46d1d38ae9c0e71f9d3effb106f9214ba8a6cec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQ2ZDFkMzhhZTljMGU3MWY5ZDNlZmZiMTA2ZjkyMTRiYThhNmNlYw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2001-02-28T18:07:05Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2001-02-28T18:07:05Z"}, "message": "i386.md (sse_setccsf, [...]): New.\n\n\t* i386.md (sse_setccsf, sse_setccdf): New.\n\t(sse_cmp* patterns): Use '%D' instead of outputtting condition\n\tflag directly.\n\t* i386.c (sse_comparison_operator): Accept the supported unordered\n\tcomparses; be ready for fast_math.\n\t(print_operand): Support 'D'.\n\nFrom-SVN: r40131", "tree": {"sha": "672884f5264adb96e2688f82b14dac21e3ba6d03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/672884f5264adb96e2688f82b14dac21e3ba6d03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a46d1d38ae9c0e71f9d3effb106f9214ba8a6cec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a46d1d38ae9c0e71f9d3effb106f9214ba8a6cec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a46d1d38ae9c0e71f9d3effb106f9214ba8a6cec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a46d1d38ae9c0e71f9d3effb106f9214ba8a6cec/comments", "author": null, "committer": null, "parents": [{"sha": "91afe94118b050444d4b720f1de24a91b2acccbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91afe94118b050444d4b720f1de24a91b2acccbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91afe94118b050444d4b720f1de24a91b2acccbb"}], "stats": {"total": 173, "additions": 107, "deletions": 66}, "files": [{"sha": "193ed5a925274ee2348f53d71fc5d82bb67373cd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a46d1d38ae9c0e71f9d3effb106f9214ba8a6cec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a46d1d38ae9c0e71f9d3effb106f9214ba8a6cec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a46d1d38ae9c0e71f9d3effb106f9214ba8a6cec", "patch": "@@ -1,3 +1,12 @@\n+Wed Feb 28 19:05:37 CET 2001  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386.md (sse_setccsf, sse_setccdf): New.\n+\t(sse_cmp* patterns): Use '%D' instead of outputtting condition\n+\tflag directly.\n+\t* i386.c (sse_comparison_operator): Accept the supported unordered\n+\tcomparses; be ready for fast_math.\n+\t(print_operand): Support 'D'.\n+\n Wed Feb 28 18:54:51 CET 2001  Jan Hubicka  <jh@suse.cz>\n \n \t* jump.c (reversed_comparison_code): Kill."}, {"sha": "7ae13f9cd141262157f306b39d7acdc061ca3621", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 67, "deletions": 2, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a46d1d38ae9c0e71f9d3effb106f9214ba8a6cec/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a46d1d38ae9c0e71f9d3effb106f9214ba8a6cec/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=a46d1d38ae9c0e71f9d3effb106f9214ba8a6cec", "patch": "@@ -1318,7 +1318,29 @@ sse_comparison_operator (op, mode)\n      enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   enum rtx_code code = GET_CODE (op);\n-  return code == EQ || code == LT || code == LE || code == UNORDERED;\n+  switch (code)\n+    {\n+    /* Operations supported directly.  */\n+    case EQ:\n+    case LT:\n+    case LE:\n+    case UNORDERED:\n+    case NE:\n+    case UNGE:\n+    case UNGT:\n+    case ORDERED:\n+      return 1;\n+    /* These are equivalent to ones above in non-IEEE comparisons.  */\n+    case UNEQ:\n+    case UNLT:\n+    case UNLE:\n+    case LTGT:\n+    case GE:\n+    case GT:\n+      return !TARGET_IEEE_FP;\n+    default:\n+      return 0;\n+    }\n }\n /* Return 1 if OP is a valid comparison operator in valid mode.  */\n int\n@@ -3326,7 +3348,9 @@ print_reg (x, code, file)\n    k --  likewise, print the SImode name of the register.\n    h --  print the QImode name for a \"high\" register, either ah, bh, ch or dh.\n    y --  print \"st(0)\" instead of \"st\" as a register.\n-   m --  print \"st(n)\" as an mmx register.  */\n+   m --  print \"st(n)\" as an mmx register.\n+   D -- print condition for SSE cmp instruction.\n+ */\n \n void\n print_operand (file, x, code)\n@@ -3460,6 +3484,47 @@ print_operand (file, x, code)\n \t    }\n \t  return;\n \n+\tcase 'D':\n+\t  /* Little bit of braindamage here.  The SSE compare instructions\n+\t     does use completely different names for the comparisons that the\n+\t     fp conditional moves.  */\n+\t  switch (GET_CODE (x))\n+\t    {\n+\t    case EQ:\n+\t    case UNEQ:\n+\t      fputs (\"eq\", file);\n+\t      break;\n+\t    case LT:\n+\t    case UNLT:\n+\t      fputs (\"lt\", file);\n+\t      break;\n+\t    case LE:\n+\t    case UNLE:\n+\t      fputs (\"le\", file);\n+\t      break;\n+\t    case UNORDERED:\n+\t      fputs (\"unord\", file);\n+\t      break;\n+\t    case NE:\n+\t    case LTGT:\n+\t      fputs (\"neq\", file);\n+\t      break;\n+\t    case UNGE:\n+\t    case GE:\n+\t      fputs (\"nlt\", file);\n+\t      break;\n+\t    case UNGT:\n+\t    case GT:\n+\t      fputs (\"nle\", file);\n+\t      break;\n+\t    case ORDERED:\n+\t      fputs (\"ord\", file);\n+\t      break;\n+\t    default:\n+\t      abort ();\n+\t      break;\n+\t    }\n+\t  return;\n \tcase 'C':\n \t  put_condition_code (GET_CODE (x), GET_MODE (XEXP (x, 0)), 0, 0, file);\n \t  return;"}, {"sha": "38d035efea36b12114f8bd12daf278689d013062", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 31, "deletions": 64, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a46d1d38ae9c0e71f9d3effb106f9214ba8a6cec/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a46d1d38ae9c0e71f9d3effb106f9214ba8a6cec/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=a46d1d38ae9c0e71f9d3effb106f9214ba8a6cec", "patch": "@@ -9323,6 +9323,33 @@\n   [(set_attr \"type\" \"setcc\")\n    (set_attr \"mode\" \"QI\")])\n \n+;; The SSE store flag instructions saves 0 or 0xffffffff to the result.\n+;; subsequent logical operations are used to imitate conditional moves.\n+;; 0xffffffff is NaN, but not in normalized form, so we can't represent\n+;; it directly.  Futher holding this value in pseudo register might bring\n+;; problem in implicit normalization in spill code.\n+;; So we don't define FLOAT_STORE_FLAG_VALUE and create these\n+;; instructions after reload by splitting the conditional move patterns.\n+\n+(define_insn \"*sse_setccsf\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=x\")\n+\t(match_operator:SF 1 \"sse_comparison_operator\"\n+\t  [(match_operand:SF 2 \"register_operand\" \"0\")\n+\t   (match_operand:SF 3 \"nonimmediate_operand\" \"xm\")]))]\n+  \"TARGET_SSE && reload_completed\"\n+  \"cmp%D1ss\\\\t{%3, %0|%0, %3}\"\n+  [(set_attr \"type\" \"sse\")\n+   (set_attr \"mode\" \"SF\")])\n+\n+(define_insn \"*sse_setccdf\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=Y\")\n+\t(match_operator:DF 1 \"sse_comparison_operator\"\n+\t  [(match_operand:DF 2 \"register_operand\" \"0\")\n+\t   (match_operand:DF 3 \"nonimmediate_operand\" \"Ym\")]))]\n+  \"TARGET_SSE2 && reload_completed\"\n+  \"cmp%D1sd\\\\t{%3, %0|%0, %3}\"\n+  [(set_attr \"type\" \"sse\")\n+   (set_attr \"mode\" \"DF\")])\n \f\n ;; Basic conditional jump instructions.\n ;; We ignore the overflow flag for signed branch instructions.\n@@ -14111,22 +14138,7 @@\n \t\t\t     [(match_operand:V4SF 1 \"register_operand\" \"0\")\n \t\t\t      (match_operand:V4SF 2 \"nonimmediate_operand\" \"x\")]))]\n   \"TARGET_SSE\"\n-  \"*\n-{\n-  switch (GET_CODE (operands[3]))\n-    {\n-    case EQ:\n-      return \\\"cmpeqps\\\\t{%2, %0|%0, %2}\\\";\n-    case LT:\n-      return \\\"cmpltps\\\\t{%2, %0|%0, %2}\\\";\n-    case LE:\n-      return \\\"cmpleps\\\\t{%2, %0|%0, %2}\\\";\n-    case UNORDERED:\n-      return \\\"cmpunordps\\\\t{%2, %0|%0, %2}\\\";\n-    default:\n-      abort ();\n-    }\n-}\"\n+  \"cmp%D3ps\\\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sse\")])\n \n (define_insn \"maskncmpv4sf3\"\n@@ -14136,22 +14148,7 @@\n \t\t\t      [(match_operand:V4SF 1 \"register_operand\" \"0\")\n \t\t\t       (match_operand:V4SF 2 \"nonimmediate_operand\" \"x\")])))]\n   \"TARGET_SSE\"\n-  \"*\n-{\n-  switch (GET_CODE (operands[3]))\n-    {\n-    case EQ:\n-      return \\\"cmpneqps\\\\t{%2, %0|%0, %2}\\\";\n-    case LT:\n-      return \\\"cmpnltps\\\\t{%2, %0|%0, %2}\\\";\n-    case LE:\n-      return \\\"cmpnleps\\\\t{%2, %0|%0, %2}\\\";\n-    case UNORDERED:\n-      return \\\"cmpordps\\\\t{%2, %0|%0, %2}\\\";\n-    default:\n-      abort ();\n-    }\n-}\"\n+  \"cmpn%D3ps\\\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sse\")])\n \n (define_insn \"vmmaskcmpv4sf3\"\n@@ -14163,22 +14160,7 @@\n \t (match_dup 1)\n \t (const_int 1)))]\n   \"TARGET_SSE\"\n-  \"*\n-{\n-  switch (GET_CODE (operands[3]))\n-    {\n-    case EQ:\n-      return \\\"cmpeqss\\\\t{%2, %0|%0, %2}\\\";\n-    case LT:\n-      return \\\"cmpltss\\\\t{%2, %0|%0, %2}\\\";\n-    case LE:\n-      return \\\"cmpless\\\\t{%2, %0|%0, %2}\\\";\n-    case UNORDERED:\n-      return \\\"cmpunordss\\\\t{%2, %0|%0, %2}\\\";\n-    default:\n-      abort ();\n-    }\n-}\"\n+  \"cmp%D3ss\\\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sse\")])\n \n (define_insn \"vmmaskncmpv4sf3\"\n@@ -14191,22 +14173,7 @@\n \t (subreg:V4SI (match_dup 1) 0)\n \t (const_int 1)))]\n   \"TARGET_SSE\"\n-  \"*\n-{\n-  switch (GET_CODE (operands[3]))\n-    {\n-    case EQ:\n-      return \\\"cmpneqss\\\\t{%2, %0|%0, %2}\\\";\n-    case LT:\n-      return \\\"cmpnltss\\\\t{%2, %0|%0, %2}\\\";\n-    case LE:\n-      return \\\"cmpnless\\\\t{%2, %0|%0, %2}\\\";\n-    case UNORDERED:\n-      return \\\"cmpordss\\\\t{%2, %0|%0, %2}\\\";\n-    default:\n-      abort ();\n-    }\n-}\"\n+  \"cmp%D3ss\\\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sse\")])\n \n (define_insn \"sse_comi\""}]}