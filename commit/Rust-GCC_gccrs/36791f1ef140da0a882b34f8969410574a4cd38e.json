{"sha": "36791f1ef140da0a882b34f8969410574a4cd38e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzY3OTFmMWVmMTQwZGEwYTg4MmIzNGY4OTY5NDEwNTc0YTRjZDM4ZQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2000-11-08T14:03:32Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2000-11-08T14:03:32Z"}, "message": "decl.c (grok_op_properties): Always use coerce_new_type and coerce_delete_type.\n\ncp/ChangeLog\n\t* decl.c (grok_op_properties): Always use coerce_new_type and\n\tcoerce_delete_type.\n\t* decl2.c (coerce_new_type): Use c_size_type_node. Preserve\n\texception specification. Tidy up.\n\t(coerce_delete_type): Preserve exception specification. Tidy up.\ntestsuite/ChangeLog\n\t* g++.old-deja/g++.other/crash36.C: New test.\n\nFrom-SVN: r37319", "tree": {"sha": "e792402842697bf48e7211dc5dcc659ca42f56e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e792402842697bf48e7211dc5dcc659ca42f56e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36791f1ef140da0a882b34f8969410574a4cd38e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36791f1ef140da0a882b34f8969410574a4cd38e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36791f1ef140da0a882b34f8969410574a4cd38e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36791f1ef140da0a882b34f8969410574a4cd38e/comments", "author": null, "committer": null, "parents": [{"sha": "321565d3fa2c8a29713c168309ce63d1ff53677b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/321565d3fa2c8a29713c168309ce63d1ff53677b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/321565d3fa2c8a29713c168309ce63d1ff53677b"}], "stats": {"total": 172, "additions": 87, "deletions": 85}, "files": [{"sha": "c11bad0986d741a71e0b10f3ab7b8ec98df1e077", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36791f1ef140da0a882b34f8969410574a4cd38e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36791f1ef140da0a882b34f8969410574a4cd38e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=36791f1ef140da0a882b34f8969410574a4cd38e", "patch": "@@ -1,3 +1,11 @@\n+2000-11-08  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* decl.c (grok_op_properties): Always use coerce_new_type and\n+\tcoerce_delete_type.\n+\t* decl2.c (coerce_new_type): Use c_size_type_node. Preserve\n+\texception specification. Tidy up.\n+\t(coerce_delete_type): Preserve exception specification. Tidy up.\n+\n 2000-11-07  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* class.c (duplicate_tag_error, build_vtbl_initializer), decl.c"}, {"sha": "51591c18936dc218060c8ac9444ca08421da30d8", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36791f1ef140da0a882b34f8969410574a4cd38e/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36791f1ef140da0a882b34f8969410574a4cd38e/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=36791f1ef140da0a882b34f8969410574a4cd38e", "patch": "@@ -12447,27 +12447,14 @@ grok_op_properties (decl, virtualp, friendp)\n       if (methodp)\n \trevert_static_member_fn (decl);\n \n-      /* Take care of function decl if we had syntax errors.  */\n-      if (argtypes == NULL_TREE)\n-\tTREE_TYPE (decl)\n-\t  = build_function_type (ptr_type_node,\n-\t\t\t\t hash_tree_chain (integer_type_node,\n-\t\t\t\t\t\t  void_list_node));\n-      else\n-\tTREE_TYPE (decl) = coerce_new_type (TREE_TYPE (decl));\n+      TREE_TYPE (decl) = coerce_new_type (TREE_TYPE (decl));\n     }\n   else if (operator_code == DELETE_EXPR || operator_code == VEC_DELETE_EXPR)\n     {\n       if (methodp)\n \trevert_static_member_fn (decl);\n \n-      if (argtypes == NULL_TREE)\n-\tTREE_TYPE (decl)\n-\t  = build_function_type (void_type_node,\n-\t\t\t\t hash_tree_chain (ptr_type_node,\n-\t\t\t\t\t\t  void_list_node));\n-      else\n-\tTREE_TYPE (decl) = coerce_delete_type (TREE_TYPE (decl));\n+      TREE_TYPE (decl) = coerce_delete_type (TREE_TYPE (decl));\n     }\n   else\n     {"}, {"sha": "138adc12334544397b56a61797fcc5b4a2e4752e", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 52, "deletions": 70, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36791f1ef140da0a882b34f8969410574a4cd38e/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36791f1ef140da0a882b34f8969410574a4cd38e/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=36791f1ef140da0a882b34f8969410574a4cd38e", "patch": "@@ -2301,87 +2301,69 @@ tree\n coerce_new_type (type)\n      tree type;\n {\n-  int e1 = 0, e2 = 0;\n-\n-  if (TREE_CODE (type) == METHOD_TYPE)\n-    type = build_function_type (TREE_TYPE (type), TREE_CHAIN (TYPE_ARG_TYPES (type)));\n-  if (! same_type_p (TREE_TYPE (type), ptr_type_node))\n-    e1 = 1, error (\"`operator new' must return type `void *'\");\n-\n-  /* Technically the type must be `size_t', but we may not know\n-     what that is.  */\n-  if (TYPE_ARG_TYPES (type) == NULL_TREE)\n-    e1 = 1, error (\"`operator new' takes type `size_t' parameter\");\n-  else if (! same_type_p (TREE_VALUE (TYPE_ARG_TYPES (type)), sizetype))\n-    e2 = 1, error (\"`operator new' takes type `size_t' as first parameter\");\n-  if (e2)\n-    type = build_function_type (ptr_type_node, tree_cons (NULL_TREE, sizetype, TREE_CHAIN (TYPE_ARG_TYPES (type))));\n-  else if (e1)\n-    type = build_function_type (ptr_type_node, TYPE_ARG_TYPES (type));\n+  int e = 0;\n+  tree args = TYPE_ARG_TYPES (type);\n+\n+  my_friendly_assert (TREE_CODE (type) == FUNCTION_TYPE, 20001107);\n+  \n+  if (!same_type_p (TREE_TYPE (type), ptr_type_node))\n+    e = 1, cp_error (\"`operator new' must return type `%T'\", ptr_type_node);\n+\n+  if (!args || args == void_list_node\n+      || !same_type_p (TREE_VALUE (args), c_size_type_node))\n+    {\n+      e = 2;\n+      if (args && args != void_list_node)\n+        args = TREE_CHAIN (args);\n+      cp_error (\"`operator new' takes type `size_t' (`%T') as first parameter\", c_size_type_node);\n+    }\n+  switch (e)\n+  {\n+    case 2:\n+      args = tree_cons (NULL_TREE, c_size_type_node, args);\n+      /* FALLTHROUGH */\n+    case 1:\n+      type = build_exception_variant\n+              (build_function_type (ptr_type_node, args),\n+               TYPE_RAISES_EXCEPTIONS (type));\n+      /* FALLTHROUGH */\n+    default:;\n+  }\n   return type;\n }\n \n tree\n coerce_delete_type (type)\n      tree type;\n {\n-  int e1 = 0, e2 = 0;\n-#if 0\n-  e3 = 0;\n-#endif\n-  tree arg_types = TYPE_ARG_TYPES (type);\n-\n-  if (TREE_CODE (type) == METHOD_TYPE)\n-    {\n-      type = build_function_type (TREE_TYPE (type), TREE_CHAIN (arg_types));\n-      arg_types = TREE_CHAIN (arg_types);\n-    }\n-\n-  if (TREE_TYPE (type) != void_type_node)\n-    e1 = 1, error (\"`operator delete' must return type `void'\");\n+  int e = 0;\n+  tree args = TYPE_ARG_TYPES (type);\n+  \n+  my_friendly_assert (TREE_CODE (type) == FUNCTION_TYPE, 20001107);\n \n-  if (arg_types == NULL_TREE\n-      || ! same_type_p (TREE_VALUE (arg_types), ptr_type_node))\n-    e2 = 1, error (\"`operator delete' takes type `void *' as first parameter\");\n+  if (!same_type_p (TREE_TYPE (type), void_type_node))\n+    e = 1, cp_error (\"`operator delete' must return type `%T'\", void_type_node);\n \n-#if 0\n-  if (arg_types\n-      && TREE_CHAIN (arg_types)\n-      && TREE_CHAIN (arg_types) != void_list_node)\n+  if (!args || args == void_list_node\n+      || !same_type_p (TREE_VALUE (args), ptr_type_node))\n     {\n-      /* Again, technically this argument must be `size_t', but again\n-\t we may not know what that is.  */\n-      tree t2 = TREE_VALUE (TREE_CHAIN (arg_types));\n-      if (! same_type_p (t2, sizetype))\n-\te3 = 1, error (\"second argument to `operator delete' must be of type `size_t'\");\n-      else if (TREE_CHAIN (TREE_CHAIN (arg_types)) != void_list_node)\n-\t{\n-\t  e3 = 1;\n-\t  if (TREE_CHAIN (TREE_CHAIN (arg_types)))\n-\t    error (\"too many arguments in declaration of `operator delete'\");\n-\t  else\n-\t    error (\"`...' invalid in specification of `operator delete'\");\n-\t}\n+      e = 2;\n+      if (args && args != void_list_node)\n+        args = TREE_CHAIN (args);\n+      cp_error (\"`operator delete' takes type `%T' as first parameter\", ptr_type_node);\n     }\n-\n-  if (e3)\n-    arg_types = tree_cons (NULL_TREE, ptr_type_node,\n-\t\t\t   build_tree_list (NULL_TREE, sizetype));\n-  else if (e3 |= e2)\n-    {\n-      if (arg_types == NULL_TREE)\n-\targ_types = tree_cons (NULL_TREE, ptr_type_node, void_list_node);\n-      else\n-\targ_types = tree_cons (NULL_TREE, ptr_type_node, TREE_CHAIN (arg_types));\n-    }\n-  else e3 |= e1;\n-#endif\n-\n-  if (e2)\n-    arg_types = tree_cons (NULL_TREE, ptr_type_node,\n-\t\t\t   arg_types ? TREE_CHAIN (arg_types): NULL_TREE);\n-  if (e2 || e1)\n-    type = build_function_type (void_type_node, arg_types);\n+  switch (e)\n+  {\n+    case 2:\n+      args = tree_cons (NULL_TREE, ptr_type_node, args);\n+      /* FALLTHROUGH */\n+    case 1:\n+      type = build_exception_variant\n+              (build_function_type (void_type_node, args),\n+               TYPE_RAISES_EXCEPTIONS (type));\n+      /* FALLTHROUGH */\n+    default:;\n+  }\n \n   return type;\n }"}, {"sha": "d805774bd6a40feb8445b0f4fbcaa66100505fad", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36791f1ef140da0a882b34f8969410574a4cd38e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36791f1ef140da0a882b34f8969410574a4cd38e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=36791f1ef140da0a882b34f8969410574a4cd38e", "patch": "@@ -1,3 +1,7 @@\n+2000-11-08  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* g++.old-deja/g++.other/crash36.C: New test.\n+\n 2000-11-08  Jakub Jelinek  <jakub@redhat.com>\n \n \t* g++.old-deja/g++.other/init16.C: New test."}, {"sha": "11190cf20dcd0aadab6958b9ee66ff1df64d229a", "filename": "gcc/testsuite/g++.old-deja/g++.other/crash36.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36791f1ef140da0a882b34f8969410574a4cd38e/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcrash36.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36791f1ef140da0a882b34f8969410574a4cd38e/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcrash36.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcrash36.C?ref=36791f1ef140da0a882b34f8969410574a4cd38e", "patch": "@@ -0,0 +1,21 @@\n+// Build don't link:\n+// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 7 Nov 2000 <nathan@codesourcery.com>\n+\n+// Bug 573. We ICE'd verifying operator new and operator delete conformed\n+// to the standard's expectation.\n+\n+void *operator new (__SIZE_TYPE__); // ok\n+void operator new (__SIZE_TYPE__);  // ERROR - must return void *\n+void *operator new ();              // ERROR - must take size_t\n+void *operator new (char);          // ERROR - must take size_t\n+void *operator new (__SIZE_TYPE__, ...) throw(); // ok\n+\n+void operator delete (void *) throw (); // ok\n+int operator delete (void *) throw ();          // ERROR - must return void\n+void operator delete () throw ();               // ERROR - must take void *\n+void operator delete (int *) throw ();          // ERROR - must take void *\n+void operator delete (void *, __SIZE_TYPE__) throw (); // ok\n+\n+void operator delete (...) throw ();             // ERROR - must take void *\n+void operator delete (void *, ...) throw ();     // ok"}]}