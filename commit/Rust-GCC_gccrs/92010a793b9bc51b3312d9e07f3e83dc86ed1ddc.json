{"sha": "92010a793b9bc51b3312d9e07f3e83dc86ed1ddc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTIwMTBhNzkzYjliYzUxYjMzMTJkOWUwN2YzZTgzZGM4NmVkMWRkYw==", "commit": {"author": {"name": "Chris Fairles", "email": "cfairles@gcc.gnu.org", "date": "2008-10-22T15:27:44Z"}, "committer": {"name": "Chris Fairles", "email": "cfairles@gcc.gnu.org", "date": "2008-10-22T15:27:44Z"}, "message": "system_error (is_error_code_enum): Specialize for errc.\n\n2008-10-22  Chris Fairles  <cfairles@gcc.gnu.org>\n\n        * include/std/system_error (is_error_code_enum): Specialize for errc.\n        (error_category::error_category): Defaulted and protected.\n        (error_category::~error_category): New, virtual.\n        (error_category::error_category(const error_category&),\n        error_category::operator=(const error_category&)): Deleted.\n        (get_system_category, get_posix_category): Remove (DR 890).\n        (system_category): External linkage (DR 890).\n        (posix_category): Remove.\n        (generic_category): Add. External linkage (DR 890).\n        (error_code::error_code<>(_ErrorCodeEnum)): Use generic_category.\n        (error_code::clear, error_code::operator=<>(_ErrorCodeEnum)): Forward to\n        error_code::assign, use generic_category.\n        (error_condition::error_condition,\n        error_condition::error_condition<>(_ErrorConditionEnum)): Use\n        generic_category.\n        (error_condition::clear,\n        error_condition::operator=<>(_ErrorConditionEnum)): Forward to\n        error_code::assign, use generic_category.\n        (make_error_code, make_error_condition): Define in namespace std.\n        * include/std/mutex (unique_lock<>::lock, unique_lock<>::try_lock,\n        unique_lock<>::try_lock_until<>(duration),\n        unique_lock<>::try_lock_for<>(duration)): Replace posix_error with errc.\n        * src/system_error.cc (system_error_category, generic_error_category):\n        New.\n        (gnu_error_category): Remove.\n        (get_system_category, get_posix_category): Remove (DR 890).\n        (system_category, generic_category): Define.\n        * src/functexcept.cc (__throw_system_error): Use generic_category.\n        * config/abi/pre/gnu.ver: Export system_category and generic_category,\n        remove get_system_category and get_generic_category (DR 890).\n        * config/os/generic/error_constants.h (posix_errno): Rename to errc, use\n        enum class type. Fix spelling.\n        * config/os/mingw32/error_constants.h (posix_errno): Likewise.\n        * testsuite/19_diagnostics/error_code/cons/1.cc: Use errc and\n        generic_category.\n        * testsuite/19_diagnostics/error_code/operators/bool.cc: Use errc.\n        * testsuite/19_diagnostics/error_code/operators/equal.cc: Likewise.\n        * testsuite/19_diagnostics/error_code/operators/not_equal.cc: Likewise.\n        * testsuite/19_diagnostics/error_category/cons/copy_neg.cc: Update\n        dg-error line numbers.\n        * testsuite/19_diagnostics/error_condition/cons/1.cc: Use\n        generic_category.\n        * testsuite/19_diagnostics/error_condition/operators/bool.cc: Use errc.\n        * testsuite/19_diagnostics/error_condition/operators/equal.cc: Likewise.\n        * testsuite/19_diagnostics/error_condition/operators/not_equal.cc:\n        Likewise.\n        * testsuite/19_diagnostics/headers/system_error/errc_std_c++0x.cc: New.\n        * testsuite/19_diagnostics/headers/system_error/types_std_c++0x.cc:\n        Remove using tests since errc is not a namespace.\n        * testsuite/19_diagnostics/system_error/cons-1.cc: Use errc.\n        * testsuite/19_diagnostics/system_error/what-4.cc: Likewise.\n        * testsuite/27_io/basic_ostream/inserters_other/wchar_t/error_code.cc:\n        Likewise.\n        * testsuite/27_io/basic_ostream/inserters_other/char/error_code.cc:\n        Likewise.\n        * testsuite/30_threads/unique_lock/locking/2.cc: Likewise.\n\nFrom-SVN: r141297", "tree": {"sha": "1982e8d2183d71a4fdf9f068b3bdf561915edb14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1982e8d2183d71a4fdf9f068b3bdf561915edb14"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92010a793b9bc51b3312d9e07f3e83dc86ed1ddc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92010a793b9bc51b3312d9e07f3e83dc86ed1ddc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92010a793b9bc51b3312d9e07f3e83dc86ed1ddc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92010a793b9bc51b3312d9e07f3e83dc86ed1ddc/comments", "author": null, "committer": null, "parents": [{"sha": "b8a19ec4860dcd9c9dba47902b414706479fa4f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8a19ec4860dcd9c9dba47902b414706479fa4f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8a19ec4860dcd9c9dba47902b414706479fa4f7"}], "stats": {"total": 549, "additions": 319, "deletions": 230}, "files": [{"sha": "256aa5bd3636bc1926fa1e5e0a4913c482165421", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92010a793b9bc51b3312d9e07f3e83dc86ed1ddc/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92010a793b9bc51b3312d9e07f3e83dc86ed1ddc/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=92010a793b9bc51b3312d9e07f3e83dc86ed1ddc", "patch": "@@ -1,3 +1,62 @@\n+2008-10-22  Chris Fairles  <cfairles@gcc.gnu.org>\n+\n+\t* include/std/system_error (is_error_code_enum): Specialize for errc.\n+\t(error_category::error_category): Defaulted and protected.\n+\t(error_category::~error_category): New, virtual.\n+\t(error_category::error_category(const error_category&), \n+\terror_category::operator=(const error_category&)): Deleted.\n+\t(get_system_category, get_posix_category): Remove (DR 890).\n+\t(system_category): External linkage (DR 890).\n+\t(posix_category): Remove.\n+\t(generic_category): Add. External linkage (DR 890).\n+\t(error_code::error_code<>(_ErrorCodeEnum)): Use generic_category.\n+\t(error_code::clear, error_code::operator=<>(_ErrorCodeEnum)): Forward to\n+\terror_code::assign, use generic_category.\n+\t(error_condition::error_condition, \n+\terror_condition::error_condition<>(_ErrorConditionEnum)): Use \n+\tgeneric_category.\n+\t(error_condition::clear, \n+\terror_condition::operator=<>(_ErrorConditionEnum)): Forward to \n+\terror_code::assign, use generic_category.\n+\t(make_error_code, make_error_condition): Define in namespace std.\n+\t* include/std/mutex (unique_lock<>::lock, unique_lock<>::try_lock,\n+\tunique_lock<>::try_lock_until<>(duration),\n+\tunique_lock<>::try_lock_for<>(duration)): Replace posix_error with errc.\n+\t* src/system_error.cc (system_error_category, generic_error_category):\n+\tNew.\n+\t(gnu_error_category): Remove.\n+\t(get_system_category, get_posix_category): Remove (DR 890).\n+\t(system_category, generic_category): Define.\n+\t* src/functexcept.cc (__throw_system_error): Use generic_category.\n+\t* config/abi/pre/gnu.ver: Export system_category and generic_category,\n+\tremove get_system_category and get_generic_category (DR 890).\n+\t* config/os/generic/error_constants.h (posix_errno): Rename to errc, use\n+\tenum class type. Fix spelling.\n+\t* config/os/mingw32/error_constants.h (posix_errno): Likewise.\n+\t* testsuite/19_diagnostics/error_code/cons/1.cc: Use errc and \n+\tgeneric_category.\n+\t* testsuite/19_diagnostics/error_code/operators/bool.cc: Use errc.\n+\t* testsuite/19_diagnostics/error_code/operators/equal.cc: Likewise.\n+\t* testsuite/19_diagnostics/error_code/operators/not_equal.cc: Likewise.\n+\t* testsuite/19_diagnostics/error_category/cons/copy_neg.cc: Update \n+\tdg-error line numbers.\n+\t* testsuite/19_diagnostics/error_condition/cons/1.cc: Use \n+\tgeneric_category.\n+\t* testsuite/19_diagnostics/error_condition/operators/bool.cc: Use errc.\n+\t* testsuite/19_diagnostics/error_condition/operators/equal.cc: Likewise.\n+\t* testsuite/19_diagnostics/error_condition/operators/not_equal.cc: \n+\tLikewise.\n+\t* testsuite/19_diagnostics/headers/system_error/errc_std_c++0x.cc: New.\n+\t* testsuite/19_diagnostics/headers/system_error/types_std_c++0x.cc: \n+\tRemove using tests since errc is not a namespace.\n+\t* testsuite/19_diagnostics/system_error/cons-1.cc: Use errc.\n+\t* testsuite/19_diagnostics/system_error/what-4.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/inserters_other/wchar_t/error_code.cc:\n+\tLikewise.\n+\t* testsuite/27_io/basic_ostream/inserters_other/char/error_code.cc:\n+\tLikewise.\n+\t* testsuite/30_threads/unique_lock/locking/2.cc: Likewise.\n+\t\n 2008-10-20  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/tr1_impl/hashtable_policy.h (_Hash_node<>::_Hash_node<>"}, {"sha": "04262bae32cdc64fedcfd604ac02b55d1c0009db", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92010a793b9bc51b3312d9e07f3e83dc86ed1ddc/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92010a793b9bc51b3312d9e07f3e83dc86ed1ddc/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=92010a793b9bc51b3312d9e07f3e83dc86ed1ddc", "patch": "@@ -922,8 +922,8 @@ GLIBCXX_3.4.11 {\n     _ZNSt6threadD2Ev;\n \n     # system_error\n-    _ZSt18get_posix_categoryv;\n-    _ZSt19get_system_categoryv;\n+    _ZSt15system_category;\n+    _ZSt16generic_category;\n \n     _ZNKSt10error_code23default_error_conditionEv;\n     _ZNKSt14error_category23default_error_conditionEi;"}, {"sha": "2304a4c16f119a8ca542ef715d041a7c610898f0", "filename": "libstdc++-v3/config/os/generic/error_constants.h", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92010a793b9bc51b3312d9e07f3e83dc86ed1ddc/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Ferror_constants.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92010a793b9bc51b3312d9e07f3e83dc86ed1ddc/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Ferror_constants.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Ferror_constants.h?ref=92010a793b9bc51b3312d9e07f3e83dc86ed1ddc", "patch": "@@ -40,9 +40,7 @@\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n-namespace posix_error\n-{\n- enum posix_errno\n+ enum class errc\n     {\n       address_family_not_supported = \t\tEAFNOSUPPORT,\n       address_in_use = \t\t\t\tEADDRINUSE,\n@@ -168,7 +166,7 @@ namespace posix_error\n       too_many_files_open_in_system = \t\tENFILE,\n       too_many_files_open = \t\t\tEMFILE,\n       too_many_links = \t\t\t\tEMLINK,\n-      too_many_synbolic_link_levels = \t\tELOOP,\n+      too_many_symbolic_link_levels = \t\tELOOP,\n \n #ifdef _GLIBCXX_HAVE_EOVERFLOW\n       value_too_large = \t\t\tEOVERFLOW,\n@@ -177,7 +175,6 @@ namespace posix_error\n       wrong_protocol_type = \t\t\tEPROTOTYPE,\n       no_posix_equivalent = 1L << 16\n     };\n-}\n \n _GLIBCXX_END_NAMESPACE\n "}, {"sha": "00e63923f035e3f23d7dd5b41f0c5f2f17156bd8", "filename": "libstdc++-v3/config/os/mingw32/error_constants.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92010a793b9bc51b3312d9e07f3e83dc86ed1ddc/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32%2Ferror_constants.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92010a793b9bc51b3312d9e07f3e83dc86ed1ddc/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32%2Ferror_constants.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32%2Ferror_constants.h?ref=92010a793b9bc51b3312d9e07f3e83dc86ed1ddc", "patch": "@@ -41,10 +41,9 @@\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n-namespace posix_error {\n // Most of the commented-out error codes are socket-related and could be\n // replaced by Winsock WSA-prefixed equivalents.\n-  enum posix_errno\n+  enum class errc\n     {\n //    address_family_not_supported = \t\tEAFNOSUPPORT,\n //    address_in_use = \t\t\t\tEADDRINUSE,\n@@ -121,12 +120,11 @@ namespace posix_error {\n       too_many_files_open_in_system = \t\tENFILE,\n       too_many_files_open = \t\t\tEMFILE,\n       too_many_links = \t\t\t\tEMLINK,\n- //   too_many_synbolic_link_levels = \t\tELOOP,\n+ //   too_many_symbolic_link_levels = \t\tELOOP,\n  //   value_too_large = \t\t\tEOVERFLOW,\n  //   wrong_protocol_type = \t\t\tEPROTOTYPE,\n       no_posix_equivalent = 1L << 16\n    };\n-}\n \n _GLIBCXX_END_NAMESPACE\n "}, {"sha": "e3922360b3d683378b2ff345251469b7424fa9cb", "filename": "libstdc++-v3/include/std/mutex", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92010a793b9bc51b3312d9e07f3e83dc86ed1ddc/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92010a793b9bc51b3312d9e07f3e83dc86ed1ddc/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex?ref=92010a793b9bc51b3312d9e07f3e83dc86ed1ddc", "patch": "@@ -489,9 +489,9 @@ namespace std\n       lock()\n       {\n \tif (!_M_device)\n-\t  __throw_system_error(posix_error::operation_not_permitted);\n+\t  __throw_system_error((int)errc::operation_not_permitted);\n \telse if (_M_owns)\n-\t  __throw_system_error(posix_error::resource_deadlock_would_occur);\n+\t  __throw_system_error((int)errc::resource_deadlock_would_occur);\n \telse\n \t  {\n \t    _M_device->lock();\n@@ -503,9 +503,9 @@ namespace std\n       try_lock()\n       {\n \tif (!_M_device)\n-          __throw_system_error(posix_error::operation_not_permitted);\n+          __throw_system_error((int)errc::operation_not_permitted);\n         else if (_M_owns)\n-          __throw_system_error(posix_error::resource_deadlock_would_occur);\n+          __throw_system_error((int)errc::resource_deadlock_would_occur);\n         else\n \t  {\n \t    _M_owns = _M_device->try_lock();\t    \n@@ -518,9 +518,9 @@ namespace std\n         try_lock_until(const chrono::time_point<_Clock, _Duration>& __atime)\n         {\n \t  if (!_M_device)\n-\t    __throw_system_error(posix_error::operation_not_permitted);\n+\t    __throw_system_error((int)errc::operation_not_permitted);\n \t  else if (_M_owns)\n-\t    __throw_system_error(posix_error::resource_deadlock_would_occur);\n+\t    __throw_system_error((int)errc::resource_deadlock_would_occur);\n \t  else\n \t    {\n \t      _M_owns = _M_device->try_lock_until(__atime);\n@@ -533,9 +533,9 @@ namespace std\n \ttry_lock_for(const chrono::duration<_Rep, _Period>& __rtime)\n         {\n \t  if (!_M_device)\n-\t    __throw_system_error(posix_error::operation_not_permitted);\n+\t    __throw_system_error((int)errc::operation_not_permitted);\n \t  else if (_M_owns)\n-\t    __throw_system_error(posix_error::resource_deadlock_would_occur);\n+\t    __throw_system_error((int)errc::resource_deadlock_would_occur);\n \t  else\n \t    {\n \t      _M_owns = _M_device->try_lock_for(__rtime);\n@@ -547,7 +547,7 @@ namespace std\n       unlock()\n       {\n         if (!_M_owns)\n-          __throw_system_error(posix_error::operation_not_permitted);\n+          __throw_system_error((int)errc::operation_not_permitted);\n         else if (_M_device)\n           {\n             _M_device->unlock();"}, {"sha": "4a93e5fbbc7e8af731cb68deba0ded9e5988475a", "filename": "libstdc++-v3/include/std/system_error", "status": "modified", "additions": 41, "deletions": 43, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92010a793b9bc51b3312d9e07f3e83dc86ed1ddc/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92010a793b9bc51b3312d9e07f3e83dc86ed1ddc/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error?ref=92010a793b9bc51b3312d9e07f3e83dc86ed1ddc", "patch": "@@ -57,22 +57,29 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     struct is_error_code_enum : public false_type { };\n \n   template<> \n-    struct is_error_code_enum<posix_error::posix_errno>\n+    struct is_error_code_enum<errc>\n     : public true_type { };\n \n   /// is_error_condition_enum\n   template<typename _Tp>\n     struct is_error_condition_enum : public false_type { };\n \n   template<> \n-    struct is_error_condition_enum<posix_error::posix_errno>\n+    struct is_error_condition_enum<errc>\n     : public true_type { };\n \n \n   /// error_category\n-  struct error_category\n+  class error_category\n   {\n-    error_category() { }\n+  protected:\n+    error_category() = default;\n+\n+  public:\n+    virtual ~error_category() { }\n+\n+    error_category(const error_category&) = delete;\n+    error_category& operator=(const error_category&) = delete;\n \n     virtual const char* \n     name() const = 0;\n@@ -100,19 +107,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     bool \n     operator!=(const error_category& __other) const\n     { return this != &__other; }\n-\n-  private:\n-    error_category(const error_category&);\n-\n-    error_category& \n-    operator=(const error_category&);\n   };\n \n-  const error_category& get_posix_category();\n-  const error_category& get_system_category();\n-\n-  static const error_category& posix_category = get_posix_category();\n-  static const error_category& system_category = get_system_category();\n+  // DR 890.\n+  extern const error_category& system_category;\n+  extern const error_category& generic_category;\n \n   /// error_code\n   // Implementation-specific error identification\n@@ -127,7 +126,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     template<typename _ErrorCodeEnum>\n       error_code(_ErrorCodeEnum __e,\n       typename enable_if<is_error_code_enum<_ErrorCodeEnum>::value>::type* = 0)\n-      : _M_value(__e), _M_cat(&posix_category)\n+      : _M_value(static_cast<int>(__e)), _M_cat(&generic_category)\n       { }\n \n     void \n@@ -139,19 +138,15 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n     void \n     clear()\n-    { \n-      _M_value = 0;\n-      _M_cat = &system_category;\n-    } \n+    { assign(0, system_category); }\n \n     // DR 804.\n     template<typename _ErrorCodeEnum>\n       typename enable_if<is_error_code_enum<_ErrorCodeEnum>::value,\n \t\t\t error_code&>::type\n       operator=(_ErrorCodeEnum __e)\n       {\n-\t_M_value = __e;\n-\t_M_cat = &posix_category;\n+\tassign(static_cast<int>(__e), generic_category);\n \treturn *this;\n       }\n \n@@ -184,7 +179,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     const error_category* \t_M_cat;\n   };\n \n-  // 19.4.2.5 non-member functions\n+  // 19.4.2.6 non-member functions\n+  inline error_code\n+  make_error_code(errc __e)\n+  { return error_code(static_cast<int>(__e), generic_category); }\n+\n   inline bool\n   operator<(const error_code& __lhs, const error_code& __rhs)\n   { \n@@ -203,7 +202,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   // Portable error identification\n   struct error_condition \n   {\n-    error_condition() : _M_value(0), _M_cat(&posix_category) { }\n+    error_condition() : _M_value(0), _M_cat(&generic_category) { }\n \n     error_condition(int __v, const error_category& __cat)     \n     : _M_value(__v), _M_cat(&__cat) { }\n@@ -212,7 +211,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       error_condition(_ErrorConditionEnum __e,\n \t\t      typename enable_if<is_error_condition_enum\n \t\t                      <_ErrorConditionEnum>::value>::type* = 0)\n-      : _M_value(__e), _M_cat(&posix_category) { }\n+      : _M_value(static_cast<int>(__e)), _M_cat(&generic_category) { }\n \n     void\n     assign(int __v, const error_category& __cat)\n@@ -227,17 +226,13 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t <_ErrorConditionEnum>::value, error_condition&>::type\n       operator=(_ErrorConditionEnum __e)\n       {\n-\t_M_value = __e;\n-\t_M_cat = &posix_category;\n+\tassign(static_cast<int>(__e), generic_category);\n \treturn *this;\n       }\n \n     void \n     clear()\n-    {\n-      _M_value = 0;\n-      _M_cat = &posix_category;\n-    }\n+    { assign(0, generic_category); }\n \n     // 19.4.3.4 observers\n     int \n@@ -266,7 +261,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     const error_category* \t_M_cat;\n   };\n \n-  // 19.4.3.5 non-member functions\n+  // 19.4.3.6 non-member functions\n+  inline error_condition\n+  make_error_condition(errc __e)\n+  { return error_condition(static_cast<int>(__e), generic_category); }\n+\n   inline bool \n   operator<(const error_condition& __lhs, const error_condition& __rhs)\n   {\n@@ -275,17 +274,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t&& __lhs.value() < __rhs.value()));\n   }\n \n-  namespace posix_error\n-  {\n-    inline error_code \n-    make_error_code(posix_errno __e)\n-    { return error_code(__e, posix_category); }\n-\n-    inline error_condition \n-    make_error_condition(posix_errno __e)\n-    { return error_condition(__e, posix_category); }\n-  }\n-\n   // 19.4.4 Comparison operators\n   inline bool\n   operator==(const error_code& __lhs, const error_code& __rhs)\n@@ -342,6 +330,16 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n     system_error(error_code __ec, const string& __what)\n     : runtime_error(__what), _M_code(__ec) { }\n+    \n+    /*\n+     * TODO: Add const char* ctors to all exceptions.\n+     *\n+     * system_error(error_code __ec, const char* __what)\n+     * : runtime_error(__what), _M_code(__ec) { }\n+     *\n+     * system_error(int __v, const error_category& __ecat, const char* __what)\n+     * : runtime_error(__what), _M_code(error_code(__v, __ecat)) { }\n+     */\n \n     system_error(int __v, const error_category& __ecat)\n     : runtime_error(\"\"), _M_code(error_code(__v, __ecat)) { }"}, {"sha": "266e035662a7e20fed56a6f83d3332f933eecd84", "filename": "libstdc++-v3/src/functexcept.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92010a793b9bc51b3312d9e07f3e83dc86ed1ddc/libstdc%2B%2B-v3%2Fsrc%2Ffunctexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92010a793b9bc51b3312d9e07f3e83dc86ed1ddc/libstdc%2B%2B-v3%2Fsrc%2Ffunctexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffunctexcept.cc?ref=92010a793b9bc51b3312d9e07f3e83dc86ed1ddc", "patch": "@@ -102,7 +102,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   void\n   __throw_system_error(int __i)\n-  { throw system_error(error_code(__i, system_category)); }\n+  { throw system_error(error_code(__i, generic_category)); }\n \n   void\n   __throw_ios_failure(const char* __s)"}, {"sha": "dd950eba150b244775f1c6181ed01d6484cc9366", "filename": "libstdc++-v3/src/system_error.cc", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92010a793b9bc51b3312d9e07f3e83dc86ed1ddc/libstdc%2B%2B-v3%2Fsrc%2Fsystem_error.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92010a793b9bc51b3312d9e07f3e83dc86ed1ddc/libstdc%2B%2B-v3%2Fsrc%2Fsystem_error.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fsystem_error.cc?ref=92010a793b9bc51b3312d9e07f3e83dc86ed1ddc", "patch": "@@ -36,15 +36,12 @@\n namespace\n {\n   using std::string; \n-\n-  struct gnu_error_category : public std::error_category\n+  \n+  struct generic_error_category : public std::error_category\n   {\n     virtual const char*\n     name() const \n-    { \n-      const char* s = \"GNU\";\n-      return s;\n-    }\n+    { return \"generic\"; }\n \n     virtual string \n     message(int i) const\n@@ -55,17 +52,30 @@ namespace\n     }\n   };\n \n-  const gnu_error_category gnu_category;\n-}\n+  struct system_error_category : public std::error_category\n+  {\n+    virtual const char*\n+    name() const\n+    { return \"system\"; }\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+    virtual string\n+    message(int i) const\n+    {\n+      // XXX locale issues: how does one get or set loc.\n+      // _GLIBCXX_HAVE_STRERROR_L, strerror_l(i, cloc)\n+      return string(strerror(i));\n+    }\n+  };\n \n-  const error_category& \n-  get_posix_category() { return gnu_category; }\n+  const generic_error_category generic_category_instance;\n+  const system_error_category system_category_instance;\n+}\n \n-  const error_category& \n-  get_system_category() { return gnu_category; }\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n \n+  const error_category& system_category = system_category_instance;\n+  const error_category& generic_category = generic_category_instance;\n+  \n   system_error::~system_error() throw() { }\n \n   error_condition "}, {"sha": "8adf3fefa6a43a0b89b7ccf92bb20e8f3cca6730", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_category/cons/copy_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92010a793b9bc51b3312d9e07f3e83dc86ed1ddc/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_category%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92010a793b9bc51b3312d9e07f3e83dc86ed1ddc/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_category%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_category%2Fcons%2Fcopy_neg.cc?ref=92010a793b9bc51b3312d9e07f3e83dc86ed1ddc", "patch": "@@ -33,7 +33,7 @@ int main()\n   return 0;\n }\n \n-// { dg-error \"is private\" \"\" { target *-*-* } 105 }\n-// { dg-error \"within this context\" \"\" { target *-*-* } 40 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 81 }\n+// { dg-error \"used here\" \"\" { target *-*-* } 40 }\n // { dg-error \"first required here\" \"\" { target *-*-* } 31 }\n // { dg-excess-errors \"copy constructor\" }"}, {"sha": "742eb4099255ecfa110caabef5a63bae594a87f6", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_code/cons/1.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92010a793b9bc51b3312d9e07f3e83dc86ed1ddc/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Fcons%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92010a793b9bc51b3312d9e07f3e83dc86ed1ddc/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Fcons%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Fcons%2F1.cc?ref=92010a793b9bc51b3312d9e07f3e83dc86ed1ddc", "patch": "@@ -38,9 +38,9 @@ int main()\n   VERIFY( e2.category() == cat );\n \n   // 3\n-  std::error_code e3(std::posix_error::operation_not_supported);\n-  VERIFY( e3.value() == int(std::posix_error::operation_not_supported) );\n-  VERIFY( e3.category() == std::posix_category );\n+  std::error_code e3(std::errc::operation_not_supported);\n+  VERIFY( e3.value() == int(std::errc::operation_not_supported) );\n+  VERIFY( e3.category() == std::generic_category );\n \n   return 0;\n }"}, {"sha": "385960ce0c135086c2a00472b8e86d23943634f5", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_code/operators/bool.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92010a793b9bc51b3312d9e07f3e83dc86ed1ddc/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Foperators%2Fbool.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92010a793b9bc51b3312d9e07f3e83dc86ed1ddc/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Foperators%2Fbool.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Foperators%2Fbool.cc?ref=92010a793b9bc51b3312d9e07f3e83dc86ed1ddc", "patch": "@@ -35,7 +35,7 @@ int main()\n     }\n \n   // 2\n-  std::error_code e2(std::posix_error::operation_not_supported);\n+  std::error_code e2(std::errc::operation_not_supported);\n   if (e2)\n     {\n       VERIFY( true );"}, {"sha": "8fcf1e59440e9b443af81c041be53fa4116da894", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_code/operators/equal.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92010a793b9bc51b3312d9e07f3e83dc86ed1ddc/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92010a793b9bc51b3312d9e07f3e83dc86ed1ddc/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Foperators%2Fequal.cc?ref=92010a793b9bc51b3312d9e07f3e83dc86ed1ddc", "patch": "@@ -28,7 +28,7 @@ int main()\n   bool test __attribute__((unused)) = true;\n \n   std::error_code e1;\n-  std::error_code e2(std::posix_error::operation_not_supported);\n+  std::error_code e2(std::errc::operation_not_supported);\n \n   VERIFY( e1 == e1 );\n   VERIFY( !(e1 == e2) );"}, {"sha": "aca79ada6b67cbad7a32141443f24f498a380581", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_code/operators/not_equal.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92010a793b9bc51b3312d9e07f3e83dc86ed1ddc/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Foperators%2Fnot_equal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92010a793b9bc51b3312d9e07f3e83dc86ed1ddc/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Foperators%2Fnot_equal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Foperators%2Fnot_equal.cc?ref=92010a793b9bc51b3312d9e07f3e83dc86ed1ddc", "patch": "@@ -28,7 +28,7 @@ int main()\n   bool test __attribute__((unused)) = true;\n \n   std::error_code e1;\n-  std::error_code e2(std::posix_error::operation_not_supported);\n+  std::error_code e2(std::errc::operation_not_supported);\n \n   VERIFY( !(e1 != e1) );\n   VERIFY( e1 != e2 );"}, {"sha": "5ea76f77a19763ff51c30a42ee3983838beeda49", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_condition/cons/1.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92010a793b9bc51b3312d9e07f3e83dc86ed1ddc/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Fcons%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92010a793b9bc51b3312d9e07f3e83dc86ed1ddc/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Fcons%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Fcons%2F1.cc?ref=92010a793b9bc51b3312d9e07f3e83dc86ed1ddc", "patch": "@@ -28,7 +28,7 @@ void test01()\n   // 1\n   std::error_condition e1;\n   VERIFY( e1.value() == 0 );\n-  VERIFY( e1.category() == std::posix_category );\n+  VERIFY( e1.category() == std::generic_category );\n \n   // 2\n   const __gnu_test::test_category cat;\n@@ -37,9 +37,9 @@ void test01()\n   VERIFY( e2.category() == cat );\n \n   // 3\n-  std::error_condition e3(std::posix_error::operation_not_supported);\n-  VERIFY( e3.value() == int(std::posix_error::operation_not_supported) );\n-  VERIFY( e3.category() == std::posix_category );\n+  std::error_condition e3(std::errc::operation_not_supported);\n+  VERIFY( e3.value() == int(std::errc::operation_not_supported) );\n+  VERIFY( e3.category() == std::generic_category );\n }\n \n int main()"}, {"sha": "d55256d564d9e303ba2bde735a246820b0282a8a", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_condition/operators/bool.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92010a793b9bc51b3312d9e07f3e83dc86ed1ddc/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Foperators%2Fbool.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92010a793b9bc51b3312d9e07f3e83dc86ed1ddc/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Foperators%2Fbool.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Foperators%2Fbool.cc?ref=92010a793b9bc51b3312d9e07f3e83dc86ed1ddc", "patch": "@@ -34,7 +34,7 @@ void test01()\n     }\n \n   // 2\n-  std::error_condition e2(std::posix_error::operation_not_supported);\n+  std::error_condition e2(std::errc::operation_not_supported);\n   if (e2)\n     {\n       VERIFY( true );"}, {"sha": "7d7c80f66c5bbfcc00217cbb6ed425f51e58738f", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_condition/operators/equal.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92010a793b9bc51b3312d9e07f3e83dc86ed1ddc/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92010a793b9bc51b3312d9e07f3e83dc86ed1ddc/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Foperators%2Fequal.cc?ref=92010a793b9bc51b3312d9e07f3e83dc86ed1ddc", "patch": "@@ -27,7 +27,7 @@ void test01()\n   bool test __attribute__((unused)) = true;\n \n   std::error_condition e1;\n-  std::error_condition e2(std::posix_error::operation_not_supported);\n+  std::error_condition e2(std::errc::operation_not_supported);\n \n   VERIFY( e1 == e1 );\n   VERIFY( !(e1 == e2) );"}, {"sha": "50a4e90a6c9399c663a5fc969e9acc0338ae69d4", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_condition/operators/not_equal.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92010a793b9bc51b3312d9e07f3e83dc86ed1ddc/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Foperators%2Fnot_equal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92010a793b9bc51b3312d9e07f3e83dc86ed1ddc/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Foperators%2Fnot_equal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Foperators%2Fnot_equal.cc?ref=92010a793b9bc51b3312d9e07f3e83dc86ed1ddc", "patch": "@@ -27,7 +27,7 @@ void test01()\n   bool test __attribute__((unused)) = true;\n \n   std::error_condition e1;\n-  std::error_condition e2(std::posix_error::operation_not_supported);\n+  std::error_condition e2(std::errc::operation_not_supported);\n \n   VERIFY( !(e1 != e1) );\n   VERIFY( e1 != e2 );"}, {"sha": "d2325d17d4665c581d8ea72b8a4e2e4844127ba6", "filename": "libstdc++-v3/testsuite/19_diagnostics/headers/system_error/errc_std_c++0x.cc", "status": "added", "additions": 159, "deletions": 0, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92010a793b9bc51b3312d9e07f3e83dc86ed1ddc/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fheaders%2Fsystem_error%2Ferrc_std_c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92010a793b9bc51b3312d9e07f3e83dc86ed1ddc/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fheaders%2Fsystem_error%2Ferrc_std_c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fheaders%2Fsystem_error%2Ferrc_std_c%2B%2B0x.cc?ref=92010a793b9bc51b3312d9e07f3e83dc86ed1ddc", "patch": "@@ -0,0 +1,159 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <system_error>\n+\n+#define TEST_ERRC(x) errc x(errc::x); (void)x\n+\n+void test01()\n+{\n+  using std::errc;\n+\n+  TEST_ERRC(address_family_not_supported);\n+  TEST_ERRC(address_in_use);\n+  TEST_ERRC(address_not_available);\n+  TEST_ERRC(already_connected);\n+  TEST_ERRC(argument_list_too_long);\n+  TEST_ERRC(argument_out_of_domain);\n+  TEST_ERRC(bad_address);\n+  TEST_ERRC(bad_file_descriptor);\n+\n+#ifdef _GLIBCXX_HAVE_EBADMSG\n+  TEST_ERRC(bad_message);\n+#endif\n+\n+  TEST_ERRC(broken_pipe);\n+  TEST_ERRC(connection_aborted);\n+  TEST_ERRC(connection_already_in_progress);\n+  TEST_ERRC(connection_refused);\n+  TEST_ERRC(connection_reset);\n+  TEST_ERRC(cross_device_link);\n+  TEST_ERRC(destination_address_required);\n+  TEST_ERRC(device_or_resource_busy);\n+  TEST_ERRC(directory_not_empty);\n+  TEST_ERRC(executable_format_error);\n+  TEST_ERRC(file_exists);\n+  TEST_ERRC(file_too_large);\n+  TEST_ERRC(filename_too_long);\n+  TEST_ERRC(function_not_supported);\n+  TEST_ERRC(host_unreachable);\n+\n+#ifdef _GLIBCXX_HAVE_EIDRM\n+  TEST_ERRC(identifier_removed);\n+#endif\n+\n+  TEST_ERRC(illegal_byte_sequence);\n+  TEST_ERRC(inappropriate_io_control_operation);\n+  TEST_ERRC(interrupted);\n+  TEST_ERRC(invalid_argument);\n+  TEST_ERRC(invalid_seek);\n+  TEST_ERRC(io_error);\n+  TEST_ERRC(is_a_directory);\n+  TEST_ERRC(message_size);\n+  TEST_ERRC(network_down);\n+  TEST_ERRC(network_reset);\n+  TEST_ERRC(network_unreachable);\n+  TEST_ERRC(no_buffer_space);\n+  TEST_ERRC(no_child_process);\n+\n+#ifdef _GLIBCXX_HAVE_ENOLINK\n+  TEST_ERRC(no_link);\n+#endif\n+\n+  TEST_ERRC(no_lock_available);\n+\n+#ifdef _GLIBCXX_HAVE_ENODATA\n+  TEST_ERRC(no_message_available);\n+#endif\n+\n+  TEST_ERRC(no_message);\n+  TEST_ERRC(no_posix_equivalent);\n+  TEST_ERRC(no_protocol_option);\n+  TEST_ERRC(no_space_on_device);\n+\n+#ifdef _GLIBCXX_HAVE_ENOSR\n+  TEST_ERRC(no_stream_resources);\n+#endif\n+\n+  TEST_ERRC(no_such_device_or_address);\n+  TEST_ERRC(no_such_device);\n+  TEST_ERRC(no_such_file_or_directory);\n+  TEST_ERRC(no_such_process);\n+  TEST_ERRC(not_a_directory);\n+  TEST_ERRC(not_a_socket);\n+\n+#ifdef _GLIBCXX_HAVE_ENOSTR\n+  TEST_ERRC(not_a_stream);\n+#endif\n+\n+  TEST_ERRC(not_connected); \n+  TEST_ERRC(not_enough_memory);\n+  TEST_ERRC(not_supported);\n+\n+#ifdef _GLIBCXX_HAVE_ECANCELED\n+  TEST_ERRC(operation_canceled);\n+#endif\n+\n+  TEST_ERRC(operation_in_progress);\n+  TEST_ERRC(operation_not_permitted);\n+  TEST_ERRC(operation_not_supported);\n+  TEST_ERRC(operation_would_block);\n+\n+#ifdef _GLIBCXX_HAVE_EOWNERDEAD\n+  TEST_ERRC(owner_dead);\n+#endif\n+\n+  TEST_ERRC(permission_denied);\n+\n+#ifdef _GLIBCXX_HAVE_EPROTO\n+  TEST_ERRC(protocol_error);\n+#endif\n+\n+  TEST_ERRC(protocol_not_supported);\n+  TEST_ERRC(read_only_file_system);\n+  TEST_ERRC(resource_deadlock_would_occur);\n+  TEST_ERRC(resource_unavailable_try_again); \n+  TEST_ERRC(result_out_of_range);\n+\n+#ifdef _GLIBCXX_HAVE_ENOTRECOVERABLE\n+  TEST_ERRC(state_not_recoverable);\n+#endif\n+\n+#ifdef _GLIBCXX_HAVE_ETIME\n+  TEST_ERRC(stream_timeout);\n+#endif\n+\n+#ifdef _GLIBCXX_HAVE_ETXTBSY\n+  TEST_ERRC(text_file_busy);\n+#endif\n+\n+  TEST_ERRC(timed_out);\n+  TEST_ERRC(too_many_files_open_in_system);\n+  TEST_ERRC(too_many_files_open);\n+  TEST_ERRC(too_many_links);\n+  TEST_ERRC(too_many_symbolic_link_levels);\n+\n+#ifdef _GLIBCXX_HAVE_EOVERFLOW\n+  TEST_ERRC(value_too_large);\n+#endif\n+\n+  TEST_ERRC(wrong_protocol_type);\n+}"}, {"sha": "416d849b14f53b0b577b5078d1ffa31066f66212", "filename": "libstdc++-v3/testsuite/19_diagnostics/headers/system_error/types_std_c++0x.cc", "status": "modified", "additions": 0, "deletions": 131, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92010a793b9bc51b3312d9e07f3e83dc86ed1ddc/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fheaders%2Fsystem_error%2Ftypes_std_c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92010a793b9bc51b3312d9e07f3e83dc86ed1ddc/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fheaders%2Fsystem_error%2Ftypes_std_c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fheaders%2Fsystem_error%2Ftypes_std_c%2B%2B0x.cc?ref=92010a793b9bc51b3312d9e07f3e83dc86ed1ddc", "patch": "@@ -27,135 +27,4 @@ namespace gnu\n   using std::error_code;\n   using std::error_category;\n   using std::system_category;\n-\n-  using std::posix_error::posix_errno;\n-  using std::posix_error::address_family_not_supported;\n-  using std::posix_error::address_in_use;\n-  using std::posix_error::address_not_available;\n-  using std::posix_error::already_connected;\n-  using std::posix_error::argument_list_too_long;\n-  using std::posix_error::argument_out_of_domain;\n-  using std::posix_error::bad_address;\n-  using std::posix_error::bad_file_descriptor;\n-\n-#ifdef _GLIBCXX_HAVE_EBADMSG\n-  using std::posix_error::bad_message;\n-#endif\n-\n-  using std::posix_error::broken_pipe;\n-  using std::posix_error::connection_aborted;\n-  using std::posix_error::connection_already_in_progress; \n-  using std::posix_error::connection_refused; \n-  using std::posix_error::connection_reset; \n-  using std::posix_error::cross_device_link; \n-  using std::posix_error::destination_address_required;\n-  using std::posix_error::device_or_resource_busy;\n-  using std::posix_error::directory_not_empty; \n-  using std::posix_error::executable_format_error;\n-  using std::posix_error::file_exists;\n-  using std::posix_error::file_too_large; \t\n-  using std::posix_error::filename_too_long;\n-  using std::posix_error::function_not_supported; \n-  using std::posix_error::host_unreachable; \n-\n-#ifdef _GLIBCXX_HAVE_EIDRM\n-  using std::posix_error::identifier_removed;\n-#endif\n-\n-  using std::posix_error::illegal_byte_sequence; \n-  using std::posix_error::inappropriate_io_control_operation; \n-  using std::posix_error::interrupted; \n-  using std::posix_error::invalid_argument;\n-  using std::posix_error::invalid_seek; \n-  using std::posix_error::io_error; \n-  using std::posix_error::is_a_directory; \n-  using std::posix_error::message_size; \n-  using std::posix_error::network_down; \n-  using std::posix_error::network_reset;\n-  using std::posix_error::network_unreachable; \n-  using std::posix_error::no_buffer_space; \n-  using std::posix_error::no_child_process;\n-\n-#ifdef _GLIBCXX_HAVE_ENOLINK\n-  using std::posix_error::no_link; \n-#endif\n-\n-  using std::posix_error::no_lock_available; \n-\n-#ifdef _GLIBCXX_HAVE_ENODATA\n-  using std::posix_error::no_message_available; \n-#endif\n-\n-  using std::posix_error::no_message; \n-  using std::posix_error::no_posix_equivalent; \n-  using std::posix_error::no_protocol_option; \n-  using std::posix_error::no_space_on_device;\n-\n-#ifdef _GLIBCXX_HAVE_ENOSR\n-  using std::posix_error::no_stream_resources; \n-#endif\n-\n-  using std::posix_error::no_such_device_or_address; \n-  using std::posix_error::no_such_device; \t\n-  using std::posix_error::no_such_file_or_directory; \n-  using std::posix_error::no_such_process; \t\n-  using std::posix_error::not_a_directory; \n-  using std::posix_error::not_a_socket; \n-\n-#ifdef _GLIBCXX_HAVE_ENOSTR\n-  using std::posix_error::not_a_stream; \n-#endif\n-\n-  using std::posix_error::not_connected; \n-  using std::posix_error::not_enough_memory;\n-  using std::posix_error::not_supported;\n-\n-#ifdef _GLIBCXX_HAVE_ECANCELED\n-  using std::posix_error::operation_canceled;\n-#endif\n-\n-  using std::posix_error::operation_in_progress;\n-  using std::posix_error::operation_not_permitted;\n-  using std::posix_error::operation_not_supported;\n-  using std::posix_error::operation_would_block;\n-\n-#ifdef _GLIBCXX_HAVE_EOWNERDEAD\n-  using std::posix_error::owner_dead; \n-#endif\n-\n-  using std::posix_error::permission_denied;\n-\n-#ifdef _GLIBCXX_HAVE_EPROTO\n-  using std::posix_error::protocol_error; \n-#endif\n-\n-  using std::posix_error::protocol_not_supported;\n-  using std::posix_error::read_only_file_system; \n-  using std::posix_error::resource_deadlock_would_occur;\n-  using std::posix_error::resource_unavailable_try_again; \n-  using std::posix_error::result_out_of_range;\n-\n-#ifdef _GLIBCXX_HAVE_ENOTRECOVERABLE\n-  using std::posix_error::state_not_recoverable; \n-#endif\n-\n-#ifdef _GLIBCXX_HAVE_ETIME\n-  using std::posix_error::stream_timeout; \n-#endif\n-\n-#ifdef _GLIBCXX_HAVE_ETXTBSY\n-  using std::posix_error::text_file_busy; \n-#endif\n-\n-  using std::posix_error::timed_out; \n-  using std::posix_error::too_many_files_open_in_system; \n-  using std::posix_error::too_many_files_open; \n-  using std::posix_error::too_many_links; \t\n-  using std::posix_error::too_many_synbolic_link_levels; \n-\n-#ifdef _GLIBCXX_HAVE_EOVERFLOW\n-  using std::posix_error::value_too_large; \n-#endif\n-\n-  using std::posix_error::wrong_protocol_type;\n }"}, {"sha": "bf73398616be51dfb4da24750b97edd8359da3c4", "filename": "libstdc++-v3/testsuite/19_diagnostics/system_error/cons-1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92010a793b9bc51b3312d9e07f3e83dc86ed1ddc/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fsystem_error%2Fcons-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92010a793b9bc51b3312d9e07f3e83dc86ed1ddc/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fsystem_error%2Fcons-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fsystem_error%2Fcons-1.cc?ref=92010a793b9bc51b3312d9e07f3e83dc86ed1ddc", "patch": "@@ -27,7 +27,7 @@ int main()\n {\n   bool test __attribute__((unused)) = true;\n   const std::string s(\"too late: boulangerie out of pain au raisin\");\n-  const std::error_code e(std::posix_error::operation_not_supported);\n+  const std::error_code e(std::errc::operation_not_supported);\n \n   // 1\n   {"}, {"sha": "e7304a1036ea51e7d8d5a518d59e0e082ce12885", "filename": "libstdc++-v3/testsuite/19_diagnostics/system_error/what-4.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92010a793b9bc51b3312d9e07f3e83dc86ed1ddc/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fsystem_error%2Fwhat-4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92010a793b9bc51b3312d9e07f3e83dc86ed1ddc/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fsystem_error%2Fwhat-4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fsystem_error%2Fwhat-4.cc?ref=92010a793b9bc51b3312d9e07f3e83dc86ed1ddc", "patch": "@@ -32,7 +32,7 @@ void test01()\n   bool test __attribute__((unused)) = true;\n   std::string s(\"after nine thirty, this request cannot be met\");\n \n-  std::system_error obj = std::system_error(std::posix_error::invalid_argument, s);\n+  std::system_error obj = std::system_error(std::errc::invalid_argument, s);\n   std::string s1(obj.what());\n   std::string s2(obj.what());\n   VERIFY( s1 == s2 );"}, {"sha": "82031316859f1f9c67da522b05347a381790d572", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_other/char/error_code.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92010a793b9bc51b3312d9e07f3e83dc86ed1ddc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2Ferror_code.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92010a793b9bc51b3312d9e07f3e83dc86ed1ddc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2Ferror_code.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2Ferror_code.cc?ref=92010a793b9bc51b3312d9e07f3e83dc86ed1ddc", "patch": "@@ -33,7 +33,7 @@ void test()\n \n   char buf[64];\n   error_code e1;\n-  error_code e2(posix_error::bad_address);\n+  error_code e2(errc::bad_address);\n   string s, s1, s2;\n \n   {"}, {"sha": "7cd416598f30fb3027e061bfecb1d915c01a7e8f", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_other/wchar_t/error_code.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92010a793b9bc51b3312d9e07f3e83dc86ed1ddc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2Ferror_code.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92010a793b9bc51b3312d9e07f3e83dc86ed1ddc/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2Ferror_code.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2Ferror_code.cc?ref=92010a793b9bc51b3312d9e07f3e83dc86ed1ddc", "patch": "@@ -33,7 +33,7 @@ void test()\n \n   wchar_t buf[64];\n   error_code e1;\n-  error_code e2(posix_error::bad_address);\n+  error_code e2(errc::bad_address);\n   wstring s, s1, s2;\n \n   {"}, {"sha": "e2599eb5c5e7d456568dfa69963e4b24e54ef8fd", "filename": "libstdc++-v3/testsuite/30_threads/unique_lock/locking/2.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92010a793b9bc51b3312d9e07f3e83dc86ed1ddc/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Flocking%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92010a793b9bc51b3312d9e07f3e83dc86ed1ddc/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Flocking%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Flocking%2F2.cc?ref=92010a793b9bc51b3312d9e07f3e83dc86ed1ddc", "patch": "@@ -53,8 +53,7 @@ void test01()\n         }\n       catch (const std::system_error& ex)\n         {\n-\t  VERIFY( ex.code() == std::error_code(\n-\t\t    std::posix_error::operation_not_permitted) );\n+\t  VERIFY( ex.code() == std::error_code(std::errc::operation_not_permitted) );\n         }\n       catch (...)\n         {\n@@ -91,7 +90,7 @@ void test02()\n       catch (const std::system_error& ex)\n \t{\n \t  VERIFY( ex.code() == std::error_code(\n-\t\t    std::posix_error::resource_deadlock_would_occur) );\n+\t\t    std::errc::resource_deadlock_would_occur) );\n \t}\n       catch (...)\n \t{"}]}