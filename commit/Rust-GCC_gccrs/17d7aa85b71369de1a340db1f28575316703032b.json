{"sha": "17d7aa85b71369de1a340db1f28575316703032b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdkN2FhODViNzEzNjlkZTFhMzQwZGIxZjI4NTc1MzE2NzAzMDMyYg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-09-08T10:18:12Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-09-08T10:18:12Z"}, "message": "[multiple changes]\n\n2017-09-08  Bob Duff  <duff@adacore.com>\n\n\t* exp_intr.adb (Add_Source_Info): Do not decode\n\tfile names; they were not encoded in the first place.\n\n2017-09-08  Bob Duff  <duff@adacore.com>\n\n\t* a-tags.adb (Internal_Tag): Unsuppress checks, so we get\n\texceptions instead of crashes. Check for absurdly long strings\n\tand empty strings. Empty strings cause trouble because they can\n\thave super-null ranges (e.g. 100..10), which causes Ext_Copy to\n\tbe empty, which causes an array index out of bounds.\n\t* s-ststop.adb (Input): Unsuppress checks, so we get exceptions\n\tinstead of crashes.\n\n2017-09-08  Arnaud Charlet  <charlet@adacore.com>\n\n\t* sem_util.adb (Is_CCT_Instance): allow use in\n\tthe context of protected types.\n\n2017-09-08  Arnaud Charlet  <charlet@adacore.com>\n\n\t* a-tigeli.adb: minor remove extra whitespace.\n\nFrom-SVN: r251885", "tree": {"sha": "ffd0af3f56a4814a3b475809520e46ad2117b1d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ffd0af3f56a4814a3b475809520e46ad2117b1d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17d7aa85b71369de1a340db1f28575316703032b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17d7aa85b71369de1a340db1f28575316703032b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17d7aa85b71369de1a340db1f28575316703032b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17d7aa85b71369de1a340db1f28575316703032b/comments", "author": null, "committer": null, "parents": [{"sha": "ae5115dd461d00506776bc76bb8f03e8129ac683", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae5115dd461d00506776bc76bb8f03e8129ac683", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae5115dd461d00506776bc76bb8f03e8129ac683"}], "stats": {"total": 71, "additions": 58, "deletions": 13}, "files": [{"sha": "16102b405802c33bb16359075c911606311cf76d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17d7aa85b71369de1a340db1f28575316703032b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17d7aa85b71369de1a340db1f28575316703032b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=17d7aa85b71369de1a340db1f28575316703032b", "patch": "@@ -1,3 +1,27 @@\n+2017-09-08  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_intr.adb (Add_Source_Info): Do not decode\n+\tfile names; they were not encoded in the first place.\n+\n+2017-09-08  Bob Duff  <duff@adacore.com>\n+\n+\t* a-tags.adb (Internal_Tag): Unsuppress checks, so we get\n+\texceptions instead of crashes. Check for absurdly long strings\n+\tand empty strings. Empty strings cause trouble because they can\n+\thave super-null ranges (e.g. 100..10), which causes Ext_Copy to\n+\tbe empty, which causes an array index out of bounds.\n+\t* s-ststop.adb (Input): Unsuppress checks, so we get exceptions\n+\tinstead of crashes.\n+\n+2017-09-08  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_util.adb (Is_CCT_Instance): allow use in\n+\tthe context of protected types.\n+\n+2017-09-08  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* a-tigeli.adb: minor remove extra whitespace.\n+\n 2017-09-08  Gary Dismukes  <dismukes@adacore.com>\n \n \t* par-ch4.adb: Reformatting of an error message."}, {"sha": "72ec05d54536dba21b3a108a4df60463d8eba2b0", "filename": "gcc/ada/a-tags.adb", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17d7aa85b71369de1a340db1f28575316703032b/gcc%2Fada%2Fa-tags.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17d7aa85b71369de1a340db1f28575316703032b/gcc%2Fada%2Fa-tags.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-tags.adb?ref=17d7aa85b71369de1a340db1f28575316703032b", "patch": "@@ -641,10 +641,22 @@ package body Ada.Tags is\n    Header_Separator    : constant Character := '#';\n \n    function Internal_Tag (External : String) return Tag is\n-      Ext_Copy : aliased String (External'First .. External'Last + 1);\n-      Res      : Tag := null;\n+      pragma Unsuppress (All_Checks);\n+      --  To make T'Class'Input robust in the case of bad data\n+\n+      Res : Tag := null;\n \n    begin\n+      --  Raise Tag_Error for empty strings, and for absurdly long strings.\n+      --  This is to make T'Class'Input robust in the case of bad data, for\n+      --  example a String(123456789..1234). The limit of 10,000 characters is\n+      --  arbitrary, but is unlikely to be exceeded by legitimate external tag\n+      --  names.\n+\n+      if External'Length not in 1 .. 10_000 then\n+         raise Tag_Error;\n+      end if;\n+\n       --  Handle locally defined tagged types\n \n       if External'Length > Internal_Tag_Header'Length\n@@ -731,9 +743,14 @@ package body Ada.Tags is\n       else\n          --  Make NUL-terminated copy of external tag string\n \n-         Ext_Copy (External'Range) := External;\n-         Ext_Copy (Ext_Copy'Last)  := ASCII.NUL;\n-         Res := External_Tag_HTable.Get (Ext_Copy'Address);\n+         declare\n+            Ext_Copy : aliased String (External'First .. External'Last + 1);\n+            pragma Assert (Ext_Copy'Length > 1); -- See Length check at top\n+         begin\n+            Ext_Copy (External'Range) := External;\n+            Ext_Copy (Ext_Copy'Last)  := ASCII.NUL;\n+            Res := External_Tag_HTable.Get (Ext_Copy'Address);\n+         end;\n       end if;\n \n       if Res = null then"}, {"sha": "77b2179bc74e28714184b9682f0749c64b23f559", "filename": "gcc/ada/a-tigeli.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17d7aa85b71369de1a340db1f28575316703032b/gcc%2Fada%2Fa-tigeli.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17d7aa85b71369de1a340db1f28575316703032b/gcc%2Fada%2Fa-tigeli.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-tigeli.adb?ref=17d7aa85b71369de1a340db1f28575316703032b", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -197,7 +197,7 @@ begin\n          --  last line, in which case no End_Error should be raised.\n \n          if ch = EOF then\n-            if  Last < Item'First then\n+            if Last < Item'First then\n                raise End_Error;\n \n             else  --  All done"}, {"sha": "6de8952ae8588a1f44e3dcc230821565573171c7", "filename": "gcc/ada/exp_intr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17d7aa85b71369de1a340db1f28575316703032b/gcc%2Fada%2Fexp_intr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17d7aa85b71369de1a340db1f28575316703032b/gcc%2Fada%2Fexp_intr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_intr.adb?ref=17d7aa85b71369de1a340db1f28575316703032b", "patch": "@@ -125,7 +125,7 @@ package body Exp_Intr is\n             Append (Buf, Nat (Get_Logical_Line_Number (Loc)));\n \n          when Name_File =>\n-            Append_Decoded (Buf, Reference_Name (Get_Source_File_Index (Loc)));\n+            Append (Buf, Reference_Name (Get_Source_File_Index (Loc)));\n \n          when Name_Source_Location =>\n             Build_Location_String (Buf, Loc);"}, {"sha": "1b8ad9696d01e2ec308f3b8600e95fd673949fb1", "filename": "gcc/ada/s-ststop.adb", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17d7aa85b71369de1a340db1f28575316703032b/gcc%2Fada%2Fs-ststop.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17d7aa85b71369de1a340db1f28575316703032b/gcc%2Fada%2Fs-ststop.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-ststop.adb?ref=17d7aa85b71369de1a340db1f28575316703032b", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2008-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2008-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -128,17 +128,20 @@ package body System.Strings.Stream_Ops is\n         (Strm : access Root_Stream_Type'Class;\n          IO   : IO_Kind) return Array_Type\n       is\n+         pragma Unsuppress (All_Checks);\n+         --  To make T'Class'Input robust in the case of bad data. The\n+         --  declaration of Item below could raise Storage_Error if the length\n+         --  is huge.\n       begin\n          if Strm = null then\n             raise Constraint_Error;\n          end if;\n \n          declare\n-            Low  : Index_Type;\n-            High : Index_Type;\n-\n+            Low, High : Index_Type'Base;\n          begin\n-            --  Read the bounds of the string\n+            --  Read the bounds of the string. Note that they could be out of\n+            --  range of Index_Type in the case of empty arrays.\n \n             Index_Type'Read (Strm, Low);\n             Index_Type'Read (Strm, High);"}, {"sha": "48b8432096ebb8618592fa5493fedf251da483e6", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17d7aa85b71369de1a340db1f28575316703032b/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17d7aa85b71369de1a340db1f28575316703032b/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=17d7aa85b71369de1a340db1f28575316703032b", "patch": "@@ -12499,6 +12499,7 @@ package body Sem_Util is\n                                               E_Function,\n                                               E_Package,\n                                               E_Procedure,\n+                                              E_Protected_Type,\n                                               E_Task_Type));\n \n          return Scope_Within_Or_Same (Context_Id, Ref_Id);"}]}