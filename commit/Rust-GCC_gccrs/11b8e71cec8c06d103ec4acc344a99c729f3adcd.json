{"sha": "11b8e71cec8c06d103ec4acc344a99c729f3adcd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTFiOGU3MWNlYzhjMDZkMTAzZWM0YWNjMzQ0YTk5YzcyOWYzYWRjZA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2003-07-23T16:45:15Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-07-23T16:45:15Z"}, "message": "re PR rtl-optimization/10679 ([3.3/3.4] --param min-inline-insns not honoured)\n\n\tPR optimization/10679\n\t* tree-inline.c (inlinable_function_p): Honor MIN_INLINE_INSNS.\n\n\tPR optimization/10679\n\t* g++.dg/opt/inline4.C: New test.\n\nFrom-SVN: r69710", "tree": {"sha": "be02bd6dc05e8e248c3c098b1a3dd523701b322b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be02bd6dc05e8e248c3c098b1a3dd523701b322b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11b8e71cec8c06d103ec4acc344a99c729f3adcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11b8e71cec8c06d103ec4acc344a99c729f3adcd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11b8e71cec8c06d103ec4acc344a99c729f3adcd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11b8e71cec8c06d103ec4acc344a99c729f3adcd/comments", "author": null, "committer": null, "parents": [{"sha": "1f9d62562662835fbf941f6e86ec0a59d817d955", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f9d62562662835fbf941f6e86ec0a59d817d955", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f9d62562662835fbf941f6e86ec0a59d817d955"}], "stats": {"total": 29, "additions": 26, "deletions": 3}, "files": [{"sha": "f1d135696b6b214289492052fb9e53c1f6df6d45", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8e71cec8c06d103ec4acc344a99c729f3adcd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8e71cec8c06d103ec4acc344a99c729f3adcd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=11b8e71cec8c06d103ec4acc344a99c729f3adcd", "patch": "@@ -1,3 +1,8 @@\n+2003-07-23  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR optimization/10679\n+\t* tree-inline.c (inlinable_function_p): Honor MIN_INLINE_INSNS.\n+\n 2003-07-23  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \tPR target/11607 and PR target/11516"}, {"sha": "a87abefa462805b2837fa1eeee3ab8e04aae1557", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8e71cec8c06d103ec4acc344a99c729f3adcd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8e71cec8c06d103ec4acc344a99c729f3adcd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=11b8e71cec8c06d103ec4acc344a99c729f3adcd", "patch": "@@ -1,3 +1,8 @@\n+2003-07-23  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR optimization/10679\n+\t* g++.dg/opt/inline4.C: New test.\n+\n 2003-07-23  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* g++.dg/parse/crash10: New test."}, {"sha": "2d3eb379648db28d7536b933745e8db44cbd9f2d", "filename": "gcc/testsuite/g++.dg/opt/inline4.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8e71cec8c06d103ec4acc344a99c729f3adcd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Finline4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8e71cec8c06d103ec4acc344a99c729f3adcd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Finline4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Finline4.C?ref=11b8e71cec8c06d103ec4acc344a99c729f3adcd", "patch": "@@ -0,0 +1,13 @@\n+// { dg-options \"-O2 -ftemplate-depth-20000 --param min-inline-insns=100 --param max-inline-insns=3\" }\n+\n+template <int I>\n+inline void g() { g<I-1>(); return; }\n+\n+template <>\n+inline void g<0>() { int i; return; }\n+\n+void h() {\n+  g<250>();\n+}\n+\n+// { dg-final { scan-assembler-not \"_Z1g\"  } }"}, {"sha": "4a468a65e9d9a34d9b81d792b0edc60fff6fe496", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8e71cec8c06d103ec4acc344a99c729f3adcd/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8e71cec8c06d103ec4acc344a99c729f3adcd/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=11b8e71cec8c06d103ec4acc344a99c729f3adcd", "patch": "@@ -1005,7 +1005,8 @@ inlinable_function_p (tree fn, inline_data *id, int nolimit)\n   /* In case we don't disregard the inlining limits and we basically\n      can inline this function, investigate further.  */\n   if (! (*lang_hooks.tree_inlining.disregard_inline_limits) (fn)\n-      && inlinable && !nolimit)\n+      && inlinable && !nolimit\n+      && currfn_insns > MIN_INLINE_INSNS)\n     {\n       int sum_insns = (id ? id->inlined_insns : 0) + currfn_insns;\n       /* In the extreme case that we have exceeded the recursive inlining\n@@ -1017,8 +1018,7 @@ inlinable_function_p (tree fn, inline_data *id, int nolimit)\n          with slope -1/MAX_INLINE_SLOPE to exceedingly decrease the\n          allowable size. We always allow a size of MIN_INLINE_INSNS\n          though.  */\n-      else if ((sum_insns > MAX_INLINE_INSNS)\n-\t       && (currfn_insns > MIN_INLINE_INSNS))\n+      else if (sum_insns > MAX_INLINE_INSNS)\n \t{\n \t  int max_curr = MAX_INLINE_INSNS_SINGLE\n \t\t\t- (sum_insns - MAX_INLINE_INSNS) / MAX_INLINE_SLOPE;"}]}