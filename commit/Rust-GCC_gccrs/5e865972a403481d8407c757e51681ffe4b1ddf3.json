{"sha": "5e865972a403481d8407c757e51681ffe4b1ddf3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWU4NjU5NzJhNDAzNDgxZDg0MDdjNzU3ZTUxNjgxZmZlNGIxZGRmMw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-09-29T08:54:01Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-09-29T08:54:01Z"}, "message": "2017-09-29  Richard Biener  <rguenther@suse.de>\n\n\t* graphite-isl-ast-to-gimple.c\n\t(translate_isl_ast_to_gimple::set_codegen_error): New function.\n\t(binary_op_to_tree): Use it.\n\t(get_rename_from_scev): Likewise.\n\t(copy_loop_phi_nodes): Likewise.\n\t(copy_bb_and_scalar_dependences): Likewise.\n\t(translate_pending_phi_nodes): Likewise.\n\nFrom-SVN: r253282", "tree": {"sha": "5f13bcb9fccdbd7e6b41085116f0a7df5386fa82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f13bcb9fccdbd7e6b41085116f0a7df5386fa82"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e865972a403481d8407c757e51681ffe4b1ddf3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e865972a403481d8407c757e51681ffe4b1ddf3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e865972a403481d8407c757e51681ffe4b1ddf3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e865972a403481d8407c757e51681ffe4b1ddf3/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "27746ca994d4be2819fd4066217b1f6394cd4646", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27746ca994d4be2819fd4066217b1f6394cd4646", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27746ca994d4be2819fd4066217b1f6394cd4646"}], "stats": {"total": 63, "additions": 40, "deletions": 23}, "files": [{"sha": "a6212c8196695a207cf10bd39b7c036cd5769441", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e865972a403481d8407c757e51681ffe4b1ddf3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e865972a403481d8407c757e51681ffe4b1ddf3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5e865972a403481d8407c757e51681ffe4b1ddf3", "patch": "@@ -1,3 +1,13 @@\n+2017-09-29  Richard Biener  <rguenther@suse.de>\n+\n+\t* graphite-isl-ast-to-gimple.c\n+\t(translate_isl_ast_to_gimple::set_codegen_error): New function.\n+\t(binary_op_to_tree): Use it.\n+\t(get_rename_from_scev): Likewise.\n+\t(copy_loop_phi_nodes): Likewise.\n+\t(copy_bb_and_scalar_dependences): Likewise.\n+\t(translate_pending_phi_nodes): Likewise.\n+\n 2017-09-29  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/82339"}, {"sha": "820e14ec51772a110a0a3148ba5acd146d7c80e9", "filename": "gcc/graphite-isl-ast-to-gimple.c", "status": "modified", "additions": 30, "deletions": 23, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e865972a403481d8407c757e51681ffe4b1ddf3/gcc%2Fgraphite-isl-ast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e865972a403481d8407c757e51681ffe4b1ddf3/gcc%2Fgraphite-isl-ast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-isl-ast-to-gimple.c?ref=5e865972a403481d8407c757e51681ffe4b1ddf3", "patch": "@@ -240,6 +240,7 @@ class translate_isl_ast_to_gimple\n   void gsi_insert_earliest (gimple_seq seq);\n   tree rename_all_uses (tree new_expr, basic_block new_bb, basic_block old_bb);\n   bool codegen_error_p () const { return codegen_error; }\n+  void set_codegen_error () { codegen_error = true; }\n   bool is_constant (tree op) const\n   {\n     return TREE_CODE (op) == INTEGER_CST\n@@ -347,7 +348,7 @@ binary_op_to_tree (tree type, __isl_take isl_ast_expr *expr, ivs_params &ip)\n \t division by 2^64 that is folded to 0.  */\n       if (integer_zerop (tree_rhs_expr))\n \t{\n-\t  codegen_error = true;\n+\t  set_codegen_error ();\n \t  return NULL_TREE;\n \t}\n       return fold_build2 (EXACT_DIV_EXPR, type, tree_lhs_expr, tree_rhs_expr);\n@@ -357,7 +358,7 @@ binary_op_to_tree (tree type, __isl_take isl_ast_expr *expr, ivs_params &ip)\n \t division by 2^64 that is folded to 0.  */\n       if (integer_zerop (tree_rhs_expr))\n \t{\n-\t  codegen_error = true;\n+\t  set_codegen_error ();\n \t  return NULL_TREE;\n \t}\n       return fold_build2 (TRUNC_DIV_EXPR, type, tree_lhs_expr, tree_rhs_expr);\n@@ -368,7 +369,7 @@ binary_op_to_tree (tree type, __isl_take isl_ast_expr *expr, ivs_params &ip)\n \t division by 2^64 that is folded to 0.  */\n       if (integer_zerop (tree_rhs_expr))\n \t{\n-\t  codegen_error = true;\n+\t  set_codegen_error ();\n \t  return NULL_TREE;\n \t}\n       return fold_build2 (TRUNC_MOD_EXPR, type, tree_lhs_expr, tree_rhs_expr);\n@@ -378,7 +379,7 @@ binary_op_to_tree (tree type, __isl_take isl_ast_expr *expr, ivs_params &ip)\n \t division by 2^64 that is folded to 0.  */\n       if (integer_zerop (tree_rhs_expr))\n \t{\n-\t  codegen_error = true;\n+\t  set_codegen_error ();\n \t  return NULL_TREE;\n \t}\n       return fold_build2 (FLOOR_DIV_EXPR, type, tree_lhs_expr, tree_rhs_expr);\n@@ -1497,7 +1498,7 @@ get_rename_from_scev (tree old_name, gimple_seq *stmts, loop_p loop,\n   tree new_expr;\n   if (chrec_contains_undetermined (scev))\n     {\n-      codegen_error = true;\n+      set_codegen_error ();\n       return build_zero_cst (TREE_TYPE (old_name));\n     }\n \n@@ -1510,7 +1511,7 @@ get_rename_from_scev (tree old_name, gimple_seq *stmts, loop_p loop,\n   if (chrec_contains_undetermined (new_expr)\n       || tree_contains_chrecs (new_expr, NULL))\n     {\n-      codegen_error = true;\n+      set_codegen_error ();\n       return build_zero_cst (TREE_TYPE (old_name));\n     }\n \n@@ -1519,7 +1520,7 @@ get_rename_from_scev (tree old_name, gimple_seq *stmts, loop_p loop,\n       basic_block bb = gimple_bb (SSA_NAME_DEF_STMT (new_expr));\n       if (bb && !dominated_by_p (CDI_DOMINATORS, new_bb, bb))\n \t{\n-\t  codegen_error = true;\n+\t  set_codegen_error ();\n \t  return build_zero_cst (TREE_TYPE (old_name));\n \t}\n     }\n@@ -1539,7 +1540,7 @@ get_rename_from_scev (tree old_name, gimple_seq *stmts, loop_p loop,\n \t  basic_block bb = gimple_bb (SSA_NAME_DEF_STMT (new_ssa_name));\n \t  if (bb && !dominated_by_p (CDI_DOMINATORS, new_bb, bb))\n \t    {\n-\t      codegen_error = true;\n+\t      set_codegen_error ();\n \t      return build_zero_cst (TREE_TYPE (old_name));\n \t    }\n \t}\n@@ -1820,8 +1821,8 @@ copy_loop_phi_nodes (basic_block bb, basic_block new_bb)\n       tree new_res = create_new_def_for (res, new_phi,\n \t\t\t\t\t gimple_phi_result_ptr (new_phi));\n       set_rename (res, new_res);\n-      codegen_error = !copy_loop_phi_args (phi, ibp_old_bb, new_phi,\n-\t\t\t\t\t   ibp_new_bb, true);\n+      if (!copy_loop_phi_args (phi, ibp_old_bb, new_phi, ibp_new_bb, true))\n+\tset_codegen_error ();\n       update_stmt (new_phi);\n \n       if (dump_file)\n@@ -2593,7 +2594,7 @@ copy_bb_and_scalar_dependences (basic_block bb, edge next_e, vec<tree> iv_map)\n \t outside the region.  */\n       if (num_phis)\n \t{\n-\t  codegen_error = true;\n+\t  set_codegen_error ();\n \t  return NULL;\n \t}\n     }\n@@ -2608,7 +2609,7 @@ copy_bb_and_scalar_dependences (basic_block bb, edge next_e, vec<tree> iv_map)\n       edge e = edge_for_new_close_phis (bb);\n       if (!e)\n \t{\n-\t  codegen_error = true;\n+\t  set_codegen_error ();\n \t  return NULL;\n \t}\n \n@@ -2622,7 +2623,7 @@ copy_bb_and_scalar_dependences (basic_block bb, edge next_e, vec<tree> iv_map)\n \n       if (!copy_loop_close_phi_nodes (bb, phi_bb, iv_map))\n \t{\n-\t  codegen_error = true;\n+\t  set_codegen_error ();\n \t  return NULL;\n \t}\n \n@@ -2644,7 +2645,7 @@ copy_bb_and_scalar_dependences (basic_block bb, edge next_e, vec<tree> iv_map)\n \t     code.  See gfortran.dg/graphite/pr29832.f90.  */\n \t  if (EDGE_COUNT (bb->preds) != EDGE_COUNT (phi_bb->preds))\n \t    {\n-\t      codegen_error = true;\n+\t      set_codegen_error ();\n \t      return NULL;\n \t    }\n \n@@ -2664,7 +2665,7 @@ copy_bb_and_scalar_dependences (basic_block bb, edge next_e, vec<tree> iv_map)\n \t     extend that to reductions that cannot be analyzed by SCEV.  */\n \t  if (!bb_in_sese_p (phi_bb, region->if_region->true_region->region))\n \t    {\n-\t      codegen_error = true;\n+\t      set_codegen_error ();\n \t      return NULL;\n \t    }\n \n@@ -2673,7 +2674,7 @@ copy_bb_and_scalar_dependences (basic_block bb, edge next_e, vec<tree> iv_map)\n \t\t     bb->index);\n \t  if (!copy_loop_phi_nodes (bb, phi_bb))\n \t    {\n-\t      codegen_error = true;\n+\t      set_codegen_error ();\n \t      return NULL;\n \t    }\n \t}\n@@ -2695,7 +2696,7 @@ copy_bb_and_scalar_dependences (basic_block bb, edge next_e, vec<tree> iv_map)\n \t      || !bb_in_sese_p (phi_bb, region->if_region->true_region->region)\n \t      || !copy_cond_phi_nodes (bb, phi_bb, iv_map))\n \t    {\n-\t      codegen_error = true;\n+\t      set_codegen_error ();\n \t      return NULL;\n \t    }\n \t}\n@@ -2718,7 +2719,7 @@ copy_bb_and_scalar_dependences (basic_block bb, edge next_e, vec<tree> iv_map)\n \n   if (!graphite_copy_stmts_from_block (bb, new_bb, iv_map))\n     {\n-      codegen_error = true;\n+      set_codegen_error ();\n       return NULL;\n     }\n \n@@ -2752,12 +2753,18 @@ translate_pending_phi_nodes ()\n       auto_vec <tree, 1> iv_map;\n       if (bb_contains_loop_phi_nodes (new_bb)\n \t  && bb_contains_loop_phi_nodes (old_bb))\n-\tcodegen_error = !copy_loop_phi_args (old_phi, ibp_old_bb, new_phi,\n-\t\t\t\t\t    ibp_new_bb, false);\n+\t{\n+\t  if (!copy_loop_phi_args (old_phi, ibp_old_bb, new_phi,\n+\t\t\t\t   ibp_new_bb, false))\n+\t    set_codegen_error ();\n+\t}\n       else if (bb_contains_loop_close_phi_nodes (new_bb))\n-\tcodegen_error = !copy_loop_close_phi_args (old_bb, new_bb, iv_map, false);\n-      else\n-\tcodegen_error = !copy_cond_phi_args (old_phi, new_phi, iv_map, false);\n+\t{\n+\t  if (!copy_loop_close_phi_args (old_bb, new_bb, iv_map, false))\n+\t    set_codegen_error ();\n+\t}\n+      else if (!copy_cond_phi_args (old_phi, new_phi, iv_map, false))\n+\tset_codegen_error ();\n \n       if (dump_file)\n \t{"}]}