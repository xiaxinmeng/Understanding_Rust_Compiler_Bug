{"sha": "44c0e7b9250baf6205391c4a0c96ff1eb90a5ab1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDRjMGU3YjkyNTBiYWY2MjA1MzkxYzRhMGM5NmZmMWViOTBhNWFiMQ==", "commit": {"author": {"name": "Yufeng Zhang", "email": "yufeng.zhang@arm.com", "date": "2012-11-07T11:01:46Z"}, "committer": {"name": "Yufeng Zhang", "email": "yufeng@gcc.gnu.org", "date": "2012-11-07T11:01:46Z"}, "message": "aarch64.c (aarch64_expand_prologue): For the load-pair with writeback instruction...\n\ngcc/ChangeLog\n\n2012-11-07  Yufeng Zhang  <yufeng.zhang@arm.com>\n\n\t* config/aarch64/aarch64.c (aarch64_expand_prologue): For the\n\tload-pair with writeback instruction, replace\n\taarch64_set_frame_expr with add_reg_note (REG_CFA_ADJUST_CFA);\n\tadd new local variable 'cfa_reg' and use it.\n\ngcc/testsuite/ChangeLog\n\n2012-11-07  Yufeng Zhang  <yufeng.zhang@arm.com>\n\n\t* gcc.target/aarch64/dwarf-cfa-reg.c: New test.\n\nFrom-SVN: r193291", "tree": {"sha": "7bcd57dab6555056d205210734241b8e23bf7643", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7bcd57dab6555056d205210734241b8e23bf7643"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44c0e7b9250baf6205391c4a0c96ff1eb90a5ab1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44c0e7b9250baf6205391c4a0c96ff1eb90a5ab1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44c0e7b9250baf6205391c4a0c96ff1eb90a5ab1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44c0e7b9250baf6205391c4a0c96ff1eb90a5ab1/comments", "author": null, "committer": null, "parents": [{"sha": "b9195e54ef7daf371c7adfdee9cf1fd78ace655f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9195e54ef7daf371c7adfdee9cf1fd78ace655f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9195e54ef7daf371c7adfdee9cf1fd78ace655f"}], "stats": {"total": 45, "additions": 37, "deletions": 8}, "files": [{"sha": "1f901320f5824b510de1cd22197c4a1be1fd6af3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44c0e7b9250baf6205391c4a0c96ff1eb90a5ab1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44c0e7b9250baf6205391c4a0c96ff1eb90a5ab1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=44c0e7b9250baf6205391c4a0c96ff1eb90a5ab1", "patch": "@@ -1,3 +1,10 @@\n+2012-11-07  Yufeng Zhang  <yufeng.zhang@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_expand_prologue): For the\n+\tload-pair with writeback instruction, replace\n+\taarch64_set_frame_expr with add_reg_note (REG_CFA_ADJUST_CFA);\n+\tadd new local variable 'cfa_reg' and use it.\n+\n 2012-11-07  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \tPR middle-end/49220"}, {"sha": "a33c73fc1b911e7048ebd8a59df331131b314ed8", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44c0e7b9250baf6205391c4a0c96ff1eb90a5ab1/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44c0e7b9250baf6205391c4a0c96ff1eb90a5ab1/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=44c0e7b9250baf6205391c4a0c96ff1eb90a5ab1", "patch": "@@ -1840,7 +1840,7 @@ aarch64_expand_prologue (void)\n \t       - original_frame_size\n \t       - cfun->machine->frame.saved_regs_size);\n \n-  /* Store pairs and load pairs have a range only of +/- 512.  */\n+  /* Store pairs and load pairs have a range only -512 to 504.  */\n   if (offset >= 512)\n     {\n       /* When the frame has a large size, an initial decrease is done on\n@@ -1988,6 +1988,7 @@ aarch64_expand_epilogue (bool for_sibcall)\n   HOST_WIDE_INT original_frame_size, frame_size, offset;\n   HOST_WIDE_INT fp_offset;\n   rtx insn;\n+  rtx cfa_reg;\n \n   aarch64_layout_frame ();\n   original_frame_size = get_frame_size () + cfun->machine->saved_varargs_size;\n@@ -2000,7 +2001,9 @@ aarch64_expand_epilogue (bool for_sibcall)\n \t       - original_frame_size\n \t       - cfun->machine->frame.saved_regs_size);\n \n-  /* Store pairs and load pairs have a range only of +/- 512.  */\n+  cfa_reg = frame_pointer_needed ? hard_frame_pointer_rtx : stack_pointer_rtx;\n+\n+  /* Store pairs and load pairs have a range only -512 to 504.  */\n   if (offset >= 512)\n     {\n       offset = original_frame_size + cfun->machine->frame.saved_regs_size;\n@@ -2031,6 +2034,10 @@ aarch64_expand_epilogue (bool for_sibcall)\n \t\t\t\t       hard_frame_pointer_rtx,\n \t\t\t\t       GEN_INT (- fp_offset)));\n       RTX_FRAME_RELATED_P (insn) = 1;\n+      /* As SP is set to (FP - fp_offset), according to the rules in\n+\t dwarf2cfi.c:dwarf2out_frame_debug_expr, CFA should be calculated\n+\t from the value of SP from now on.  */\n+      cfa_reg = stack_pointer_rtx;\n     }\n \n   aarch64_save_or_restore_callee_save_registers\n@@ -2070,11 +2077,9 @@ aarch64_expand_epilogue (bool for_sibcall)\n \t\t\t\t GEN_INT (offset),\n \t\t\t\t GEN_INT (GET_MODE_SIZE (DImode) + offset)));\n \t      RTX_FRAME_RELATED_P (XVECEXP (PATTERN (insn), 0, 2)) = 1;\n-\t      aarch64_set_frame_expr (gen_rtx_SET\n-\t\t\t\t      (Pmode,\n-\t\t\t\t       stack_pointer_rtx,\n-\t\t\t\t       gen_rtx_PLUS (Pmode, stack_pointer_rtx,\n-\t\t\t\t\t\t     GEN_INT (offset))));\n+\t      add_reg_note (insn, REG_CFA_ADJUST_CFA,\n+\t\t\t    (gen_rtx_SET (Pmode, stack_pointer_rtx,\n+\t\t\t\t\t  plus_constant (cfa_reg, offset))));\n \t    }\n \n \t  /* The first part of a frame-related parallel insn\n@@ -2094,7 +2099,6 @@ aarch64_expand_epilogue (bool for_sibcall)\n \t      RTX_FRAME_RELATED_P (insn) = 1;\n \t    }\n \t}\n-\n       else\n \t{\n \t  insn = emit_insn (gen_add2_insn (stack_pointer_rtx,"}, {"sha": "23f142aeb5683b502cb415a9afd59e759e5f2f6f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44c0e7b9250baf6205391c4a0c96ff1eb90a5ab1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44c0e7b9250baf6205391c4a0c96ff1eb90a5ab1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=44c0e7b9250baf6205391c4a0c96ff1eb90a5ab1", "patch": "@@ -1,3 +1,7 @@\n+2012-11-07  Yufeng Zhang  <yufeng.zhang@arm.com>\n+\n+\t* gcc.target/aarch64/dwarf-cfa-reg.c: New test.\n+\n 2012-11-07  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \t* gcc.c-torture/compile/pr49220.c: New test."}, {"sha": "cce88155acaf8c57bd097ea1aeaf49af85fbddf5", "filename": "gcc/testsuite/gcc.target/aarch64/dwarf-cfa-reg.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44c0e7b9250baf6205391c4a0c96ff1eb90a5ab1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fdwarf-cfa-reg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44c0e7b9250baf6205391c4a0c96ff1eb90a5ab1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fdwarf-cfa-reg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fdwarf-cfa-reg.c?ref=44c0e7b9250baf6205391c4a0c96ff1eb90a5ab1", "patch": "@@ -0,0 +1,14 @@\n+/* Verify that CFA register is restored to SP after FP is restored.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -gdwarf-2\" } */\n+/* { dg-final { scan-assembler \".cfi_restore 30\" } } */\n+/* { dg-final { scan-assembler \".cfi_restore 29\" } } */\n+/* { dg-final { scan-assembler \".cfi_def_cfa 31, 0\" } } */\n+/* { dg-final { scan-assembler \"ret\" } } */\n+\n+int bar (unsigned int);\n+\n+int foo (void)\n+{\n+  return bar (0xcafe);\n+}"}]}