{"sha": "57b29ca675a87d5dd79371925f19f945990a2bea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdiMjljYTY3NWE4N2Q1ZGQ3OTM3MTkyNWYxOWY5NDU5OTBhMmJlYQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2013-06-10T13:54:30Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-06-10T13:54:30Z"}, "message": "alpha.c (alpha_emit_xfloating_compare): Also use cmp_code to construct REG_EQUAL note.\n\n\t* config/alpha/alpha.c (alpha_emit_xfloating_compare): Also use\n\tcmp_code to construct REG_EQUAL note.\n\nFrom-SVN: r199897", "tree": {"sha": "be648219ec3e2fc9510ff4704be673c13f662006", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be648219ec3e2fc9510ff4704be673c13f662006"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57b29ca675a87d5dd79371925f19f945990a2bea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57b29ca675a87d5dd79371925f19f945990a2bea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57b29ca675a87d5dd79371925f19f945990a2bea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57b29ca675a87d5dd79371925f19f945990a2bea/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9275f73ae50fa4135341fe5f8a8258e28e14689a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9275f73ae50fa4135341fe5f8a8258e28e14689a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9275f73ae50fa4135341fe5f8a8258e28e14689a"}], "stats": {"total": 8, "additions": 7, "deletions": 1}, "files": [{"sha": "0176137987f93cdcd08248d1f8a1ab19f8a8d898", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57b29ca675a87d5dd79371925f19f945990a2bea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57b29ca675a87d5dd79371925f19f945990a2bea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=57b29ca675a87d5dd79371925f19f945990a2bea", "patch": "@@ -1,3 +1,8 @@\n+2013-06-10  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/alpha/alpha.c (alpha_emit_xfloating_compare): Also use\n+\tcmp_code to construct REG_EQUAL note.\n+\n 2013-06-09  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/57568"}, {"sha": "5f5b33e347b409695dfb479cbd57e5d0271e1a92", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57b29ca675a87d5dd79371925f19f945990a2bea/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57b29ca675a87d5dd79371925f19f945990a2bea/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=57b29ca675a87d5dd79371925f19f945990a2bea", "patch": "@@ -3068,7 +3068,8 @@ alpha_emit_xfloating_compare (enum rtx_code *pcode, rtx op0, rtx op1)\n   out = gen_reg_rtx (DImode);\n \n   /* What's actually returned is -1,0,1, not a proper boolean value.  */\n-  note = gen_rtx_UNSPEC (DImode, gen_rtvec (2, op0, op1), UNSPEC_XFLT_COMPARE);\n+  note = gen_rtx_fmt_ee (cmp_code, VOIDmode, op0, op1);\n+  note = gen_rtx_UNSPEC (DImode, gen_rtvec (1, note), UNSPEC_XFLT_COMPARE);\n   alpha_emit_xfloating_libcall (func, out, operands, 2, note);\n \n   return out;"}]}