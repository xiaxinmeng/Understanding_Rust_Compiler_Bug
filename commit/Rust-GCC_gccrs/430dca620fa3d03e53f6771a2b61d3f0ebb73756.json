{"sha": "430dca620fa3d03e53f6771a2b61d3f0ebb73756", "node_id": "C_kwDOANBUbNoAKDQzMGRjYTYyMGZhM2QwM2U1M2Y2NzcxYTJiNjFkM2YwZWJiNzM3NTY", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-01-28T10:48:18Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-01-28T10:48:18Z"}, "message": "cfgrtl: Fix up locus comparison in unique_locus_on_edge_between_p [PR104237]\n\nThe testcase in the PR (not included for the testsuite because we don't\nhave an (easy) way to -fcompare-debug LTO, we'd need 2 compilations/linking,\none with -g and one with -g0 and -fdump-rtl-final= at the end of lto1\nand compare that) has different code generation for -g vs. -g0.\n\nThe difference appears during expansion, where we have a goto_locus\nthat is at -O0 compared to the INSN_LOCATION of the previous and next insn\nacross an edge.  With -g0 the locations are equal and so no nop is added.\nWith -g the locations aren't equal and so a nop is added holding that\nlocation.\n\nThe reason for the different location is in the way how we stream in\nlocations by lto1.\nWe have lto_location_cache::apply_location_cache that is called with some\nset of expanded locations, qsorts them, creates location_t's for those\nand remembers the last expanded location.\nlto_location_cache::input_location_and_block when read in expanded_location\nis equal to the last expanded location just reuses the last location_t\n(or adds/changes/removes LOCATION_BLOCK in it), when it is not queues\nit for next apply_location_cache.  Now, when streaming in -g input, we can\nsee extra locations that don't appear with -g0, and if we are unlucky\nenough, those can be sorted last during apply_location_cache and affect\nwhat locations are used from the single entry cache next.\nIn particular, second apply_location_cache with non-empty loc_cache in\nthe testcase has 14 locations with -g0 and 16 with -g and those 2 extra\nones sort both last (they are the same).  The last one from -g0 then\nappears to be input_location_and_block sourced again, for -g0 triggers\nthe single entry cache, while for -g it doesn't and so apply_location_cache\nwill create for it another location_t with the same content.\n\nThe following patch fixes it by comparing everything we care about the\nlocation instead (well, better in addition) to a simple location_t ==\nlocation_t check.  I think we don't care about the sysp flag for debug\ninfo...\n\n2022-01-28  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR lto/104237\n\t* cfgrtl.cc (loc_equal): New function.\n\t(unique_locus_on_edge_between_p): Use it.", "tree": {"sha": "d0b397f2abfddba856f1618a59d13f535dab98e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0b397f2abfddba856f1618a59d13f535dab98e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/430dca620fa3d03e53f6771a2b61d3f0ebb73756", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/430dca620fa3d03e53f6771a2b61d3f0ebb73756", "html_url": "https://github.com/Rust-GCC/gccrs/commit/430dca620fa3d03e53f6771a2b61d3f0ebb73756", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/430dca620fa3d03e53f6771a2b61d3f0ebb73756/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b500d2591ea0080459d5dee127f63c010530f6b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b500d2591ea0080459d5dee127f63c010530f6b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b500d2591ea0080459d5dee127f63c010530f6b6"}], "stats": {"total": 27, "additions": 25, "deletions": 2}, "files": [{"sha": "567575176a3448a7c19314947112b5b73ee20cab", "filename": "gcc/cfgrtl.cc", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/430dca620fa3d03e53f6771a2b61d3f0ebb73756/gcc%2Fcfgrtl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/430dca620fa3d03e53f6771a2b61d3f0ebb73756/gcc%2Fcfgrtl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.cc?ref=430dca620fa3d03e53f6771a2b61d3f0ebb73756", "patch": "@@ -778,6 +778,29 @@ rtl_split_block (basic_block bb, void *insnp)\n   return new_bb;\n }\n \n+/* Return true if LOC1 and LOC2 are equivalent for\n+   unique_locus_on_edge_between_p purposes.  */\n+\n+static bool\n+loc_equal (location_t loc1, location_t loc2)\n+{\n+  if (loc1 == loc2)\n+    return true;\n+\n+  expanded_location loce1 = expand_location (loc1);\n+  expanded_location loce2 = expand_location (loc2);\n+\n+  if (loce1.line != loce2.line\n+      || loce1.column != loce2.column\n+      || loce1.data != loce2.data)\n+    return false;\n+  if (loce1.file == loce2.file)\n+    return true;\n+  return (loce1.file != NULL\n+\t  && loce2.file != NULL\n+\t  && filename_cmp (loce1.file, loce2.file) == 0);\n+}\n+\n /* Return true if the single edge between blocks A and B is the only place\n    in RTL which holds some unique locus.  */\n \n@@ -796,7 +819,7 @@ unique_locus_on_edge_between_p (basic_block a, basic_block b)\n   while (insn != end && (!NONDEBUG_INSN_P (insn) || !INSN_HAS_LOCATION (insn)))\n     insn = PREV_INSN (insn);\n \n-  if (insn != end && INSN_LOCATION (insn) == goto_locus)\n+  if (insn != end && loc_equal (INSN_LOCATION (insn), goto_locus))\n     return false;\n \n   /* Then scan block B forward.  */\n@@ -808,7 +831,7 @@ unique_locus_on_edge_between_p (basic_block a, basic_block b)\n \tinsn = NEXT_INSN (insn);\n \n       if (insn != end && INSN_HAS_LOCATION (insn)\n-\t  && INSN_LOCATION (insn) == goto_locus)\n+\t  && loc_equal (INSN_LOCATION (insn), goto_locus))\n \treturn false;\n     }\n "}]}