{"sha": "88199e7c89aa0f9b1c055c2330a0c57945e884e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODgxOTllN2M4OWFhMGY5YjFjMDU1YzIzMzBhMGM1Nzk0NWU4ODRlMg==", "commit": {"author": {"name": "Tobias Schl\u00fcter", "email": "tobias.schlueter@physik.uni-muenchen.de", "date": "2004-07-11T15:06:42Z"}, "committer": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2004-07-11T15:06:42Z"}, "message": "re PR fortran/16433 (wrong hexadecimal constant warning)\n\nPR fortran/16433\n* primary.c (match_boz_constant): Call gfc_notify_std only if\nwe actually have a non-standard boz-literal-constant.\n\nFrom-SVN: r84514", "tree": {"sha": "8486dc903d8c31078bde04fd506d2b5fa0f2d848", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8486dc903d8c31078bde04fd506d2b5fa0f2d848"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88199e7c89aa0f9b1c055c2330a0c57945e884e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88199e7c89aa0f9b1c055c2330a0c57945e884e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88199e7c89aa0f9b1c055c2330a0c57945e884e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88199e7c89aa0f9b1c055c2330a0c57945e884e2/comments", "author": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fd21094e5a9d8517b00bffa08f132759baefbbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fd21094e5a9d8517b00bffa08f132759baefbbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fd21094e5a9d8517b00bffa08f132759baefbbc"}], "stats": {"total": 26, "additions": 18, "deletions": 8}, "files": [{"sha": "966221c932af572d21c4658132898728e38999f6", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88199e7c89aa0f9b1c055c2330a0c57945e884e2/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88199e7c89aa0f9b1c055c2330a0c57945e884e2/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=88199e7c89aa0f9b1c055c2330a0c57945e884e2", "patch": "@@ -12,7 +12,11 @@\n \t(gfc_match_return): RETURN in main program is an extension.\n \t(gfc_match_block_data): A space is required before a block data\n \tname.\n-\t\n+\n+\tPR fortran/16433\n+\t* primary.c (match_boz_constant): Call gfc_notify_std only if\n+\twe actually have a non-standard boz-literal-constant.\n+\n 2004-07-11  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \t* f95-lang.c (set_block): Remove."}, {"sha": "d054bfdb55bfac64b35517f35093fcce7fe1d6dd", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88199e7c89aa0f9b1c055c2330a0c57945e884e2/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88199e7c89aa0f9b1c055c2330a0c57945e884e2/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=88199e7c89aa0f9b1c055c2330a0c57945e884e2", "patch": "@@ -235,7 +235,7 @@ match_integer_constant (gfc_expr ** result, int signflag)\n static match\n match_boz_constant (gfc_expr ** result)\n {\n-  int radix, delim, length;\n+  int radix, delim, length, x_hex;\n   locus old_loc;\n   char *buffer;\n   gfc_expr *e;\n@@ -244,6 +244,7 @@ match_boz_constant (gfc_expr ** result)\n   old_loc = gfc_current_locus;\n   gfc_gobble_whitespace ();\n \n+  x_hex = 0;\n   switch (gfc_next_char ())\n     {\n     case 'b':\n@@ -255,12 +256,7 @@ match_boz_constant (gfc_expr ** result)\n       rname = \"octal\";\n       break;\n     case 'x':\n-      if (pedantic\n-         && (gfc_notify_std (GFC_STD_GNU, \"Extension: Hexadecimal \"\n-                            \"constant at %C uses non-standard syntax.\")\n-             == FAILURE))\n-       goto backup;\n-\n+      x_hex = 1;\n       /* Fall through.  */\n     case 'z':\n       radix = 16;\n@@ -310,6 +306,16 @@ match_boz_constant (gfc_expr ** result)\n       return MATCH_ERROR;\n     }\n \n+  if (x_hex\n+      && pedantic\n+      && (gfc_notify_std (GFC_STD_GNU, \"Extension: Hexadecimal \"\n+\t\t\t  \"constant at %C uses non-standard syntax.\")\n+\t  == FAILURE))\n+    {\n+      gfc_free_expr (e);\n+      return MATCH_ERROR;\n+    }\n+\n   *result = e;\n   return MATCH_YES;\n "}]}