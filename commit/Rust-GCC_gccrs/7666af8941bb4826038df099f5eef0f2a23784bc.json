{"sha": "7666af8941bb4826038df099f5eef0f2a23784bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzY2NmFmODk0MWJiNDgyNjAzOGRmMDk5ZjVlZWYwZjJhMjM3ODRiYw==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2005-06-14T18:51:54Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2005-06-14T18:51:54Z"}, "message": "Class.java (getClasses): New method.\n\n\t* java/lang/Class.java (getClasses): New method.\n\t(internalGetClasses): Likewise.\n\t(getClassLoader): Updated documentation.\n\t(getDeclaredClasses): New overload; old overload no longer\n\tnative.\n\t(_getConstructors): Removed.\n\t(resourcePath): Updated.\n\t* java/lang/natClass.cc (getClasses): Removed.\n\t* java/lang/Class.h (getDeclaredClasses, getDeclaredConstructors):\n\tUpdated.\n\t(_getConstructors): Removed.\n\nFrom-SVN: r100948", "tree": {"sha": "63caa6f848b659c3779d3bf9ea68e6b9965d0948", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63caa6f848b659c3779d3bf9ea68e6b9965d0948"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7666af8941bb4826038df099f5eef0f2a23784bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7666af8941bb4826038df099f5eef0f2a23784bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7666af8941bb4826038df099f5eef0f2a23784bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7666af8941bb4826038df099f5eef0f2a23784bc/comments", "author": null, "committer": null, "parents": [{"sha": "c9a3d12830e969061198c03ca94d601d2ae0004f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9a3d12830e969061198c03ca94d601d2ae0004f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9a3d12830e969061198c03ca94d601d2ae0004f"}], "stats": {"total": 187, "additions": 97, "deletions": 90}, "files": [{"sha": "87bd9120e1b849aa99d12804e590bad6b4b99de6", "filename": "libjava/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7666af8941bb4826038df099f5eef0f2a23784bc/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7666af8941bb4826038df099f5eef0f2a23784bc/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=7666af8941bb4826038df099f5eef0f2a23784bc", "patch": "@@ -1,3 +1,17 @@\n+2005-06-14  Tom Tromey  <tromey@redhat.com>\n+\n+\t* java/lang/Class.java (getClasses): New method.\n+\t(internalGetClasses): Likewise.\n+\t(getClassLoader): Updated documentation.\n+\t(getDeclaredClasses): New overload; old overload no longer\n+\tnative.\n+\t(_getConstructors): Removed.\n+\t(resourcePath): Updated.\n+\t* java/lang/natClass.cc (getClasses): Removed.\n+\t* java/lang/Class.h (getDeclaredClasses, getDeclaredConstructors):\n+\tUpdated.\n+\t(_getConstructors): Removed.\n+\n 2005-06-13  Jim Huang  <jserv@kaffe.org>\n \n \tPR libgcj/22036:"}, {"sha": "01a653e5c9f32ca3a5da67aeaa95184be5b3bac3", "filename": "libjava/java/lang/Class.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7666af8941bb4826038df099f5eef0f2a23784bc/libjava%2Fjava%2Flang%2FClass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7666af8941bb4826038df099f5eef0f2a23784bc/libjava%2Fjava%2Flang%2FClass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FClass.h?ref=7666af8941bb4826038df099f5eef0f2a23784bc", "patch": "@@ -273,20 +273,20 @@ class java::lang::Class : public java::lang::Object\n   java::lang::reflect::Constructor *getConstructor (JArray<jclass> *);\n   JArray<java::lang::reflect::Constructor *> *getConstructors (void);\n   java::lang::reflect::Constructor *getDeclaredConstructor (JArray<jclass> *);\n-  JArray<java::lang::reflect::Constructor *> *getDeclaredConstructors (void);\n+  JArray<java::lang::reflect::Constructor *> *getDeclaredConstructors (jboolean);\n   java::lang::reflect::Field *getDeclaredField (jstring);\n   JArray<java::lang::reflect::Field *> *getDeclaredFields ();\n   JArray<java::lang::reflect::Field *> *getDeclaredFields (jboolean);\n   java::lang::reflect::Method *getDeclaredMethod (jstring, JArray<jclass> *);\n   JArray<java::lang::reflect::Method *> *getDeclaredMethods (void);\n \n   JArray<jclass> *getDeclaredClasses (void);\n+  JArray<jclass> *getDeclaredClasses (jboolean);\n   jclass getDeclaringClass (void);\n \n   java::lang::reflect::Field *getField (jstring);\n private:\n   JArray<java::lang::reflect::Field *> internalGetFields ();\n-  JArray<java::lang::reflect::Constructor *> *_getConstructors (jboolean);\n   java::lang::reflect::Field *getField (jstring, jint);\n   jint _getMethods (JArray<java::lang::reflect::Method *> *result,\n \t\t    jint offset);"}, {"sha": "7f2d0f05d2761454b9f0084f75505e915d84be19", "filename": "libjava/java/lang/Class.java", "status": "modified", "additions": 77, "deletions": 59, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7666af8941bb4826038df099f5eef0f2a23784bc/libjava%2Fjava%2Flang%2FClass.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7666af8941bb4826038df099f5eef0f2a23784bc/libjava%2Fjava%2Flang%2FClass.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FClass.java?ref=7666af8941bb4826038df099f5eef0f2a23784bc", "patch": "@@ -1,5 +1,5 @@\n /* Class.java -- Representation of a Java class.\n-   Copyright (C) 1998, 1999, 2000, 2002, 2003, 2004\n+   Copyright (C) 1998, 1999, 2000, 2002, 2003, 2004, 2005\n    Free Software Foundation\n \n This file is part of GNU Classpath.\n@@ -46,6 +46,7 @@\n import java.lang.reflect.Method;\n import java.net.URL;\n import java.security.ProtectionDomain;\n+import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.HashSet;\n \n@@ -54,9 +55,11 @@\n  * objects with identical names and ClassLoaders. Primitive types, array\n  * types, and void also have a Class object.\n  *\n- * <p>Arrays with identical type and number of dimensions share the same\n- * class (and null \"system\" ClassLoader, incidentally).  The name of an\n- * array class is <code>[&lt;signature format&gt;;</code> ... for example,\n+ * <p>Arrays with identical type and number of dimensions share the same class.\n+ * The array class ClassLoader is the same as the ClassLoader of the element\n+ * type of the array (which can be null to indicate the bootstrap classloader).\n+ * The name of an array class is <code>[&lt;signature format&gt;;</code>.\n+ * <p> For example,\n  * String[]'s class is <code>[Ljava.lang.String;</code>. boolean, byte,\n  * short, char, int, long, float and double have the \"type name\" of\n  * Z,B,S,C,I,J,F,D for the purposes of array classes.  If it's a\n@@ -148,13 +151,31 @@ public static native Class forName (String className, boolean initialize,\n    * @throws SecurityException if the security check fails\n    * @since 1.1\n    */\n-  public native Class[] getClasses ();\n+  public Class[] getClasses()\n+  {\n+    memberAccessCheck(Member.PUBLIC);\n+    return internalGetClasses();\n+  }\n+\n+  /**\n+   * Like <code>getClasses()</code> but without the security checks.\n+   */\n+  private Class[] internalGetClasses()\n+  {\n+    ArrayList list = new ArrayList();\n+    list.addAll(Arrays.asList(getDeclaredClasses(true)));\n+    Class superClass = getSuperclass();\n+    if (superClass != null)\n+      list.addAll(Arrays.asList(superClass.internalGetClasses()));\n+    return (Class[])list.toArray(new Class[list.size()]);\n+  }\n   \n   /**\n-   * Get the ClassLoader that loaded this class.  If it was loaded by the\n-   * system classloader, this method will return null. If there is a security\n-   * manager, and the caller's class loader does not match the requested\n-   * one, a security check of <code>RuntimePermission(\"getClassLoader\")</code>\n+   * Get the ClassLoader that loaded this class.  If the class was loaded\n+   * by the bootstrap classloader, this method will return null.\n+   * If there is a security manager, and the caller's class loader is not\n+   * an ancestor of the requested one, a security check of\n+   * <code>RuntimePermission(\"getClassLoader\")</code>\n    * must first succeed. Primitive types and void return null.\n    *\n    * @return the ClassLoader that loaded this class\n@@ -193,10 +214,6 @@ public static native Class forName (String className, boolean initialize,\n   public native Constructor getConstructor(Class[] args)\n     throws NoSuchMethodException;\n \n-  // This is used to implement getConstructors and\n-  // getDeclaredConstructors.\n-  private native Constructor[] _getConstructors (boolean declared);\n-\n   /**\n    * Get all the public constructors of this class. This returns an array of\n    * length 0 if there are no constructors, including for primitive types,\n@@ -211,7 +228,8 @@ public native Constructor getConstructor(Class[] args)\n    */\n   public Constructor[] getConstructors()\n   {\n-    return _getConstructors(false);\n+    memberAccessCheck(Member.PUBLIC);\n+    return getDeclaredConstructors(true);\n   }\n \n   /**\n@@ -243,7 +261,13 @@ public native Constructor getDeclaredConstructor(Class[] args)\n    * @throws SecurityException if the security check fails\n    * @since 1.1\n    */\n-  public native Class[] getDeclaredClasses();\n+  public Class[] getDeclaredClasses()\n+  {\n+    memberAccessCheck(Member.DECLARED);\n+    return getDeclaredClasses(false);\n+  }\n+\n+  native Class[] getDeclaredClasses (boolean publicOnly);\n \n   /**\n    * Get all the declared constructors of this class. This returns an array of\n@@ -259,9 +283,12 @@ public native Constructor getDeclaredConstructor(Class[] args)\n    */\n   public Constructor[] getDeclaredConstructors()\n   {\n-    return _getConstructors(true);\n+    memberAccessCheck(Member.DECLARED);\n+    return getDeclaredConstructors(false);\n   }\n \n+  native Constructor[] getDeclaredConstructors (boolean publicOnly);\n+\n   /**\n    * Get a field declared in this class, where name is its simple name. The\n    * implicit length field of arrays is not available. A security check may\n@@ -303,8 +330,8 @@ public Field[] getDeclaredFields()\n   /**\n    * Get a method declared in this class, where name is its simple name. The\n    * implicit methods of Object are not available from arrays or interfaces.\n-   * Constructors (named \"<init>\" in the class file) and class initializers\n-   * (name \"<clinit>\") are not available.  The Virtual Machine allows\n+   * Constructors (named \"&lt;init&gt;\" in the class file) and class initializers\n+   * (name \"&lt;clinit&gt;\") are not available.  The Virtual Machine allows\n    * multiple methods with the same signature but differing return types; in\n    * such a case the most specific return types are favored, then the final\n    * choice is arbitrary. If the method takes no argument, an array of zero\n@@ -438,14 +465,7 @@ public Package getPackage()\n   {\n     ClassLoader cl = getClassLoader();\n     if (cl != null)\n-      {\n-        String name = getName();\n-\tString pkg = \"\";\n-\tint idx = name.lastIndexOf('.');\n-\tif (idx >= 0)\n-\t  pkg = name.substring(0, idx);\n-\treturn cl.getPackage(pkg);\n-      }\n+      return cl.getPackage(getPackagePortion(getName()));\n     return null;\n   }\n \n@@ -468,8 +488,8 @@ private static final native String getSignature(Class[] args,\n   /**\n    * Get a public method declared or inherited in this class, where name is\n    * its simple name. The implicit methods of Object are not available from\n-   * interfaces.  Constructors (named \"<init>\" in the class file) and class\n-   * initializers (name \"<clinit>\") are not available.  The Virtual\n+   * interfaces.  Constructors (named \"&lt;init&gt;\" in the class file) and class\n+   * initializers (name \"&lt;clinit&gt;\") are not available.  The Virtual\n    * Machine allows multiple methods with the same signature but differing\n    * return types, and the class can inherit multiple methods of the same\n    * return type; in such a case the most specific return types are favored,\n@@ -537,8 +557,16 @@ public Method getMethod(String methodName, Class[] args)\n   \n   /**\n    * Get the name of this class, separated by dots for package separators.\n-   * Primitive types and arrays are encoded as:\n+   * If the class represents a primitive type, or void, then the\n+   * name of the type as it appears in the Java programming language\n+   * is returned.  For instance, <code>Byte.TYPE.getName()</code>\n+   * returns \"byte\".\n+   *\n+   * Arrays are specially encoded as shown on this table.\n    * <pre>\n+   * array type          [<em>element type</em>\n+   *                     (note that the element type is encoded per\n+   *                      this table)\n    * boolean             Z\n    * byte                B\n    * char                C\n@@ -548,9 +576,9 @@ public Method getMethod(String methodName, Class[] args)\n    * float               F\n    * double              D\n    * void                V\n-   * array type          [<em>element type</em>\n    * class or interface, alone: &lt;dotted name&gt;\n    * class or interface, as element type: L&lt;dotted name&gt;;\n+   * </pre>\n    *\n    * @return the name of this class\n    */\n@@ -562,9 +590,9 @@ public Method getMethod(String methodName, Class[] args)\n    * the system classloader, ClassLoader.getSystemResource() is used instead.\n    *\n    * <p>If the name you supply is absolute (it starts with a <code>/</code>),\n-   * then it is passed on to getResource() as is.  If it is relative, the\n-   * package name is prepended, and <code>.</code>'s are replaced with\n-   * <code>/</code>.\n+   * then the leading <code>/</code> is removed and it is passed on to\n+   * getResource(). If it is relative, the package name is prepended, and\n+   * <code>.</code>'s are replaced with <code>/</code>.\n    *\n    * <p>The URL returned is system- and classloader-dependent, and could\n    * change across implementations.\n@@ -590,9 +618,9 @@ public URL getResource(String resourceName)\n    * instead.\n    *\n    * <p>If the name you supply is absolute (it starts with a <code>/</code>),\n-   * then it is passed on to getResource() as is.  If it is relative, the\n-   * package name is prepended, and <code>.</code>'s are replaced with\n-   * <code>/</code>.\n+   * then the leading <code>/</code> is removed and it is passed on to\n+   * getResource(). If it is relative, the package name is prepended, and\n+   * <code>.</code>'s are replaced with <code>/</code>.\n    *\n    * <p>The URL returned is system- and classloader-dependent, and could\n    * change across implementations.\n@@ -613,17 +641,19 @@ public InputStream getResourceAsStream(String resourceName)\n \n   private String resourcePath(String resourceName)\n   {\n-    if (resourceName.startsWith(\"/\"))\n-      return resourceName.substring(1);\n-\n-    Class c = this;\n-    while (c.isArray())\n-      c = c.getComponentType();\n-\n-    String packageName = c.getName().replace('.', '/');\n-    int end = packageName.lastIndexOf('/');\n-    if (end != -1)\n-      return packageName.substring(0, end + 1) + resourceName;\n+    if (resourceName.length() > 0)\n+      {\n+\tif (resourceName.charAt(0) != '/')\n+\t  {\n+\t    String pkg = getPackagePortion(getName());\n+\t    if (pkg.length() > 0)\n+\t      resourceName = pkg.replace('.','/') + '/' + resourceName;\n+\t  }\n+\telse\n+\t  {\n+\t    resourceName = resourceName.substring(1);\n+\t  }\n+      }\n     return resourceName;\n   }\n \n@@ -739,18 +769,6 @@ public native Object newInstance ()\n   // can't add fields to java.lang.Class that are accessible from Java.\n   private native ProtectionDomain getProtectionDomain0();\n \n-  /**\n-   * Returns the protection domain of this class. If the classloader did not\n-   * record the protection domain when creating this class the unknown\n-   * protection domain is returned which has a <code>null</code> code source\n-   * and all permissions.\n-   *\n-   * @return the protection domain\n-   * @throws SecurityException if the security manager exists and the caller\n-   * does not have <code>RuntimePermission(\"getProtectionDomain\")</code>.\n-   * @see RuntimePermission\n-   * @since 1.2\n-   */\n   public ProtectionDomain getProtectionDomain()\n   {\n     SecurityManager sm = System.getSecurityManager();"}, {"sha": "19a9d7d358095035e44aba2e6bc33659efa99f37", "filename": "libjava/java/lang/natClass.cc", "status": "modified", "additions": 4, "deletions": 29, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7666af8941bb4826038df099f5eef0f2a23784bc/libjava%2Fjava%2Flang%2FnatClass.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7666af8941bb4826038df099f5eef0f2a23784bc/libjava%2Fjava%2Flang%2FnatClass.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatClass.cc?ref=7666af8941bb4826038df099f5eef0f2a23784bc", "patch": "@@ -126,15 +126,6 @@ java::lang::Class::getClassLoader (void)\n \ts->checkPermission (new RuntimePermission (JvNewStringLatin1 (\"getClassLoader\")));\n     }\n \n-  // This particular 'return' has been changed a couple of times over\n-  // libgcj's history.  This particular approach is a little weird,\n-  // because it means that all classes linked into the application\n-  // will see NULL for their class loader.  This may confuse some\n-  // applications that aren't expecting this; the solution is to use a\n-  // different linking model for these applications.  In the past we\n-  // returned the system class loader in this case, but that is\n-  // incorrect.  Also, back then we didn't have other linkage models\n-  // to fall back on.\n   return loader;\n }\n \n@@ -167,10 +158,8 @@ java::lang::Class::getConstructor (JArray<jclass> *param_types)\n }\n \n JArray<java::lang::reflect::Constructor *> *\n-java::lang::Class::_getConstructors (jboolean declared)\n+java::lang::Class::getDeclaredConstructors (jboolean publicOnly)\n {\n-  memberAccessCheck(java::lang::reflect::Member::PUBLIC);\n-\n   int numConstructors = 0;\n   int max = isPrimitive () ? 0 : method_count;\n   int i;\n@@ -180,7 +169,7 @@ java::lang::Class::_getConstructors (jboolean declared)\n       if (method->name == NULL\n \t  || ! _Jv_equalUtf8Consts (method->name, init_name))\n \tcontinue;\n-      if (! declared\n+      if (publicOnly\n \t  && ! java::lang::reflect::Modifier::isPublic(method->accflags))\n \tcontinue;\n       numConstructors++;\n@@ -197,7 +186,7 @@ java::lang::Class::_getConstructors (jboolean declared)\n       if (method->name == NULL\n \t  || ! _Jv_equalUtf8Consts (method->name, init_name))\n \tcontinue;\n-      if (! declared\n+      if (publicOnly\n \t  && ! java::lang::reflect::Modifier::isPublic(method->accflags))\n \tcontinue;\n       java::lang::reflect::Constructor *cons\n@@ -427,22 +416,8 @@ java::lang::Class::getName (void)\n }\n \n JArray<jclass> *\n-java::lang::Class::getClasses (void)\n-{\n-  // FIXME: security checking.\n-\n-  // Until we have inner classes, it always makes sense to return an\n-  // empty array.\n-  JArray<jclass> *result\n-    = (JArray<jclass> *) JvNewObjectArray (0, &java::lang::Class::class$,\n-\t\t\t\t\t   NULL);\n-  return result;\n-}\n-\n-JArray<jclass> *\n-java::lang::Class::getDeclaredClasses (void)\n+java::lang::Class::getDeclaredClasses (jboolean /*publicOnly*/)\n {\n-  memberAccessCheck (java::lang::reflect::Member::DECLARED);\n   // Until we have inner classes, it always makes sense to return an\n   // empty array.\n   JArray<jclass> *result"}]}