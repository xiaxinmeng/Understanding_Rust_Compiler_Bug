{"sha": "aeb98f1dcd25905b55c0b30c3189e9ddae55b7d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWViOThmMWRjZDI1OTA1YjU1YzBiMzBjMzE4OWU5ZGRhZTU1YjdkMg==", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2016-04-21T08:20:59Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-21T08:20:59Z"}, "message": "sem_ch6.adb (Build_Subprogram_Declaration): Propagate the attribute Rewritten_For_C to the body since since the expander...\n\n2016-04-21  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_ch6.adb (Build_Subprogram_Declaration): Propagate the\n\tattribute Rewritten_For_C to the body since since the expander\n\tmay generate calls using that entity.\n\t* exp_ch6.adb (Expand_Call): For internally generated\n\tcalls ensure that they reference the entity of the spec\n\tof the called function.\n\t(Rewritten_For_C_Func_Id): New subprogram.\n\t(Rewritten_For_C_Proc_Id): New subprogram.\n\t(Rewrite_Function_Call_For_C): Invoke the new subprogram to\n\tensure that we skip freezing entities.\n\t* exp_util.adb (Build_Procedure_Form): No action needed if the\n\tprocedure was already built.\n\nFrom-SVN: r235305", "tree": {"sha": "c70e2a312fdf1955c988288302805654920c645e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c70e2a312fdf1955c988288302805654920c645e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aeb98f1dcd25905b55c0b30c3189e9ddae55b7d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aeb98f1dcd25905b55c0b30c3189e9ddae55b7d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aeb98f1dcd25905b55c0b30c3189e9ddae55b7d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aeb98f1dcd25905b55c0b30c3189e9ddae55b7d2/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2cc7967fbeef31d46df49a9aaa92af1cddb9fca6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cc7967fbeef31d46df49a9aaa92af1cddb9fca6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cc7967fbeef31d46df49a9aaa92af1cddb9fca6"}], "stats": {"total": 124, "additions": 121, "deletions": 3}, "files": [{"sha": "d725805d6465fde732f6d843c43b035109f3a2de", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeb98f1dcd25905b55c0b30c3189e9ddae55b7d2/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeb98f1dcd25905b55c0b30c3189e9ddae55b7d2/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=aeb98f1dcd25905b55c0b30c3189e9ddae55b7d2", "patch": "@@ -1,3 +1,18 @@\n+2016-04-21  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_ch6.adb (Build_Subprogram_Declaration): Propagate the\n+\tattribute Rewritten_For_C to the body since since the expander\n+\tmay generate calls using that entity.\n+\t* exp_ch6.adb (Expand_Call): For internally generated\n+\tcalls ensure that they reference the entity of the spec\n+\tof the called function.\n+\t(Rewritten_For_C_Func_Id): New subprogram.\n+\t(Rewritten_For_C_Proc_Id): New subprogram.\n+\t(Rewrite_Function_Call_For_C): Invoke the new subprogram to\n+\tensure that we skip freezing entities.\n+\t* exp_util.adb (Build_Procedure_Form): No action needed if the\n+\tprocedure was already built.\n+\n 2016-04-21  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_ch3.adb, exp_util.adb, sem_ch13.adb, exp_unst.adb: Minor"}, {"sha": "d1232543492396251a644bd27f906cd372caee56", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 89, "deletions": 2, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeb98f1dcd25905b55c0b30c3189e9ddae55b7d2/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeb98f1dcd25905b55c0b30c3189e9ddae55b7d2/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=aeb98f1dcd25905b55c0b30c3189e9ddae55b7d2", "patch": "@@ -2459,6 +2459,44 @@ package body Exp_Ch6 is\n          end if;\n       end New_Value;\n \n+      function Rewritten_For_C_Func_Id (Proc_Id : Entity_Id) return Entity_Id;\n+      --  Given the Id of the procedure with an extra out parameter internally\n+      --  built to handle functions that return a constrained array type return\n+      --  the Id of the corresponding function.\n+\n+      -----------------------------\n+      -- Rewritten_For_C_Func_Id --\n+      -----------------------------\n+\n+      function Rewritten_For_C_Func_Id (Proc_Id : Entity_Id) return Entity_Id\n+      is\n+         Decl      : constant Node_Id := Unit_Declaration_Node (Proc_Id);\n+         Func_Decl : Node_Id;\n+         Func_Id   : Entity_Id;\n+\n+      begin\n+         pragma Assert (Rewritten_For_C (Proc_Id));\n+         pragma Assert (Nkind (Decl) = N_Subprogram_Body);\n+\n+         Func_Decl := Nlists.Prev (Decl);\n+\n+         while Present (Func_Decl)\n+           and then\n+             (Nkind (Func_Decl) = N_Freeze_Entity\n+                or else\n+              Nkind (Func_Decl) /= N_Subprogram_Declaration\n+                or else\n+              Nkind (Specification (Func_Decl)) /= N_Function_Specification)\n+         loop\n+            Func_Decl := Nlists.Prev (Func_Decl);\n+         end loop;\n+\n+         pragma Assert (Present (Func_Decl));\n+         Func_Id := Defining_Entity (Specification (Func_Decl));\n+         pragma Assert (Chars (Proc_Id) = Chars (Func_Id));\n+         return Func_Id;\n+      end Rewritten_For_C_Func_Id;\n+\n       --  Local variables\n \n       Remote        : constant Boolean   := Is_Remote_Call (Call_Node);\n@@ -2614,6 +2652,19 @@ package body Exp_Ch6 is\n         and then Is_Entity_Name (Name (Call_Node))\n         and then Rewritten_For_C (Entity (Name (Call_Node)))\n       then\n+         --  For internally generated calls ensure that they reference the\n+         --  entity of the spec of the called function (needed since the\n+         --  expander may generate calls using the entity of their body).\n+         --  See for example Expand_Boolean_Operator().\n+\n+         if not (Comes_From_Source (Call_Node))\n+           and then Nkind (Unit_Declaration_Node (Entity (Name (Call_Node))))\n+                      = N_Subprogram_Body\n+         then\n+            Set_Entity (Name (Call_Node),\n+              Rewritten_For_C_Func_Id (Entity (Name (Call_Node))));\n+         end if;\n+\n          Rewrite_Function_Call_For_C (Call_Node);\n          return;\n       end if;\n@@ -8301,14 +8352,50 @@ package body Exp_Ch6 is\n    ---------------------------------\n \n    procedure Rewrite_Function_Call_For_C (N : Node_Id) is\n+      function Rewritten_For_C_Proc_Id (Func_Id : Entity_Id) return Entity_Id;\n+      --  Given the Id of the function that returns a constrained array type\n+      --  return the Id of its internally built procedure with an extra out\n+      --  parameter.\n+\n+      -----------------------------\n+      -- Rewritten_For_C_Proc_Id --\n+      -----------------------------\n+\n+      function Rewritten_For_C_Proc_Id (Func_Id : Entity_Id) return Entity_Id\n+      is\n+         Func_Decl : constant Node_Id := Unit_Declaration_Node (Func_Id);\n+         Proc_Decl : Node_Id;\n+         Proc_Id   : Entity_Id;\n+\n+      begin\n+         Proc_Decl := Next (Func_Decl);\n+\n+         while Present (Proc_Decl)\n+           and then\n+             (Nkind (Proc_Decl) = N_Freeze_Entity\n+                or else\n+              Nkind (Proc_Decl) /= N_Subprogram_Declaration)\n+         loop\n+            Proc_Decl := Next (Proc_Decl);\n+         end loop;\n+\n+         pragma Assert (Present (Proc_Decl));\n+         Proc_Id := Defining_Entity (Proc_Decl);\n+         pragma Assert (Chars (Proc_Id) = Chars (Func_Id));\n+         return Proc_Id;\n+      end Rewritten_For_C_Proc_Id;\n+\n+      --  Local variables\n+\n       Func_Id     : constant Entity_Id  := Entity (Name (N));\n-      Func_Decl   : constant Node_Id    := Unit_Declaration_Node (Func_Id);\n       Par         : constant Node_Id    := Parent (N);\n-      Proc_Id     : constant Entity_Id  := Defining_Entity (Next (Func_Decl));\n+      Proc_Id     : constant Entity_Id  := Rewritten_For_C_Proc_Id (Func_Id);\n       Loc         : constant Source_Ptr := Sloc (Par);\n       Actuals     : List_Id;\n       Last_Formal : Entity_Id;\n \n+   --  Start of processing for Rewrite_Function_Call_For_C\n+\n    begin\n       --  The actuals may be given by named associations, so the added actual\n       --  that is the target of the return value of the call must be a named"}, {"sha": "dfc8e883dbd0da3b7681da5a2c6cec0298a81864", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeb98f1dcd25905b55c0b30c3189e9ddae55b7d2/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeb98f1dcd25905b55c0b30c3189e9ddae55b7d2/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=aeb98f1dcd25905b55c0b30c3189e9ddae55b7d2", "patch": "@@ -931,6 +931,12 @@ package body Exp_Util is\n       Proc_Formals : List_Id;\n \n    begin\n+      --  No action needed if this transformation was already done\n+\n+      if Nkind (Specification (N)) = N_Procedure_Specification then\n+         return;\n+      end if;\n+\n       Proc_Formals := New_List;\n \n       --  Create a list of formal parameters with the same types as the"}, {"sha": "19a65489bf9bcc7123bbe191b2a89f8a98f040a9", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeb98f1dcd25905b55c0b30c3189e9ddae55b7d2/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeb98f1dcd25905b55c0b30c3189e9ddae55b7d2/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=aeb98f1dcd25905b55c0b30c3189e9ddae55b7d2", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -2405,6 +2405,16 @@ package body Sem_Ch6 is\n \n          Analyze (Subp_Decl);\n \n+         --  Propagate the attribute Rewritten_For_C to the body since the\n+         --  expander may generate calls using that entity. Required to ensure\n+         --  that Expand_Call rewrites calls to this function by calls to the\n+         --  built procedure.\n+\n+         if Nkind (Body_Spec) = N_Function_Specification then\n+            Set_Rewritten_For_C (Defining_Entity (Body_Spec),\n+              Rewritten_For_C (Defining_Entity (Specification (Subp_Decl))));\n+         end if;\n+\n          --  Analyze any relocated source pragmas or pragmas created for aspect\n          --  specifications.\n "}]}