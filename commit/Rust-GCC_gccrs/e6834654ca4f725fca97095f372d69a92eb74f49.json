{"sha": "e6834654ca4f725fca97095f372d69a92eb74f49", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY4MzQ2NTRjYTRmNzI1ZmNhOTcwOTVmMzcyZDY5YTkyZWI3NGY0OQ==", "commit": {"author": {"name": "Stan Shebs", "email": "shebs@apple.com", "date": "2002-02-12T22:26:12Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2002-02-12T22:26:12Z"}, "message": "c-typeck.c (digest_init): Handle vectors.\n\n\n        * c-typeck.c (digest_init): Handle vectors.\n        (really_start_incremental_init): Same.\n        (pop_init_level): Same.\n        (process_init_element): Same.\n\n        * varasm.c (output_constant): Same.\n\n        * expr.c (clear_storage): Same.\n        (store_constructor): Same.\n\n        * gcc.dg/altivec-3.c: New.\n\nFrom-SVN: r49715", "tree": {"sha": "103777da73c8ea17b352e699f33cc56fafbc4834", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/103777da73c8ea17b352e699f33cc56fafbc4834"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6834654ca4f725fca97095f372d69a92eb74f49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6834654ca4f725fca97095f372d69a92eb74f49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6834654ca4f725fca97095f372d69a92eb74f49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6834654ca4f725fca97095f372d69a92eb74f49/comments", "author": null, "committer": null, "parents": [{"sha": "d9b3eb63b2f690c056cecde5d6a4c79aaac942c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9b3eb63b2f690c056cecde5d6a4c79aaac942c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9b3eb63b2f690c056cecde5d6a4c79aaac942c9"}], "stats": {"total": 153, "additions": 146, "deletions": 7}, "files": [{"sha": "7e5f8cd538682ef18da4d7ddab1e68a10ad51971", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6834654ca4f725fca97095f372d69a92eb74f49/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6834654ca4f725fca97095f372d69a92eb74f49/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e6834654ca4f725fca97095f372d69a92eb74f49", "patch": "@@ -1,3 +1,15 @@\n+2002-02-13  Stan Shebs  <shebs@apple.com>\n+\n+        * c-typeck.c (digest_init): Handle vectors.\n+        (really_start_incremental_init): Same.\n+        (pop_init_level): Same.\n+        (process_init_element): Same.\n+\n+        * varasm.c (output_constant): Same.\n+\n+        * expr.c (clear_storage): Same.\n+        (store_constructor): Same.\n+\n 2002-02-12  Eric Christopher  <echristo@redhat.com>\n \n \t* explow.c (hard_function_value): Add comment explaining"}, {"sha": "3e00e04b48b294b166d1403a16b92e31465bcdb5", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6834654ca4f725fca97095f372d69a92eb74f49/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6834654ca4f725fca97095f372d69a92eb74f49/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=e6834654ca4f725fca97095f372d69a92eb74f49", "patch": "@@ -4830,6 +4830,8 @@ digest_init (type, init, require_constant, constructor_constant)\n \t\t     TYPE_MAIN_VARIANT (type))\n \t  || (code == ARRAY_TYPE\n \t      && comptypes (TREE_TYPE (inside_init), type))\n+\t  || (code == VECTOR_TYPE\n+\t      && comptypes (TREE_TYPE (inside_init), type))\n \t  || (code == POINTER_TYPE\n \t      && (TREE_CODE (TREE_TYPE (inside_init)) == ARRAY_TYPE\n \t\t  || TREE_CODE (TREE_TYPE (inside_init)) == FUNCTION_TYPE)\n@@ -5341,6 +5343,14 @@ really_start_incremental_init (type)\n \n       constructor_unfilled_index = constructor_index;\n     }\n+  else if (TREE_CODE (constructor_type) == VECTOR_TYPE)\n+    {\n+      /* Vectors are like simple fixed-size arrays.  */\n+      constructor_max_index =\n+\tbuild_int_2 (TYPE_VECTOR_SUBPARTS (constructor_type) - 1, 0);\n+      constructor_index = convert (bitsizetype, integer_zero_node);\n+      constructor_unfilled_index = constructor_index;\n+    }\n   else\n     {\n       /* Handle the case of int x = {5}; */\n@@ -5623,7 +5633,8 @@ pop_init_level (implicit)\n     ;\n   else if (TREE_CODE (constructor_type) != RECORD_TYPE\n \t   && TREE_CODE (constructor_type) != UNION_TYPE\n-\t   && TREE_CODE (constructor_type) != ARRAY_TYPE)\n+\t   && TREE_CODE (constructor_type) != ARRAY_TYPE\n+\t   && TREE_CODE (constructor_type) != VECTOR_TYPE)\n     {\n       /* A nonincremental scalar initializer--just return\n \t the element, after verifying there is just one.  */\n@@ -6832,6 +6843,31 @@ process_init_element (value)\n \t       constructor_unfilled_index.  */\n \t    constructor_unfilled_index = constructor_index;\n \t}\n+      else if (TREE_CODE (constructor_type) == VECTOR_TYPE)\n+\t{\n+\t  tree elttype = TYPE_MAIN_VARIANT (TREE_TYPE (constructor_type));\n+\n+         /* Do a basic check of initializer size.  Note that vectors\n+            always have a fixed size derived from their type.  */\n+\t  if (tree_int_cst_lt (constructor_max_index, constructor_index))\n+\t    {\n+\t      pedwarn_init (\"excess elements in vector initializer\");\n+\t      break;\n+\t    }\n+\n+\t  /* Now output the actual element.  */\n+\t  if (value)\n+\t    output_init_element (value, elttype, constructor_index, 1);\n+\n+\t  constructor_index\n+\t    = size_binop (PLUS_EXPR, constructor_index, bitsize_one_node);\n+\n+\t  if (! value)\n+\t    /* If we are doing the bookkeeping for an element that was\n+\t       directly output as a constructor, we must update\n+\t       constructor_unfilled_index.  */\n+\t    constructor_unfilled_index = constructor_index;\n+\t}\n \n       /* Handle the sole element allowed in a braced initializer\n \t for a scalar variable.  */"}, {"sha": "702b6897218f7d0943c66584883cf79314cdd9e5", "filename": "gcc/expr.c", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6834654ca4f725fca97095f372d69a92eb74f49/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6834654ca4f725fca97095f372d69a92eb74f49/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=e6834654ca4f725fca97095f372d69a92eb74f49", "patch": "@@ -2562,7 +2562,8 @@ clear_storage (object, size)\n \n   /* If OBJECT is not BLKmode and SIZE is the same size as its mode,\n      just move a zero.  Otherwise, do this a piece at a time.  */\n-  if (GET_MODE (object) != BLKmode\n+  if ((GET_MODE (object) != BLKmode\n+       && !VECTOR_MODE_P (GET_MODE (object)))\n       && GET_CODE (size) == CONST_INT\n       && GET_MODE_SIZE (GET_MODE (object)) == (unsigned int) INTVAL (size))\n     emit_move_insn (object, CONST0_RTX (GET_MODE (object)));\n@@ -4528,20 +4529,34 @@ store_constructor (exp, target, cleared, size)\n \t\t\t\t   get_alias_set (TREE_TYPE (field)));\n \t}\n     }\n-  else if (TREE_CODE (type) == ARRAY_TYPE)\n+  else if (TREE_CODE (type) == ARRAY_TYPE\n+\t   || TREE_CODE (type) == VECTOR_TYPE)\n     {\n       tree elt;\n       int i;\n       int need_to_clear;\n       tree domain = TYPE_DOMAIN (type);\n       tree elttype = TREE_TYPE (type);\n-      int const_bounds_p = (TYPE_MIN_VALUE (domain)\n-\t\t\t    && TYPE_MAX_VALUE (domain)\n-\t\t\t    && host_integerp (TYPE_MIN_VALUE (domain), 0)\n-\t\t\t    && host_integerp (TYPE_MAX_VALUE (domain), 0));\n+      int const_bounds_p;\n       HOST_WIDE_INT minelt = 0;\n       HOST_WIDE_INT maxelt = 0;\n \n+      /* Vectors are like arrays, but the domain is stored via an array\n+\t type indirectly.  */\n+      if (TREE_CODE (type) == VECTOR_TYPE)\n+\t{\n+\t  /* Note that although TYPE_DEBUG_REPRESENTATION_TYPE uses\n+\t     the same field as TYPE_DOMAIN, we are not guaranteed that\n+\t     it always will.  */\n+\t  domain = TYPE_DEBUG_REPRESENTATION_TYPE (type);\n+\t  domain = TYPE_DOMAIN (TREE_TYPE (TYPE_FIELDS (domain)));\n+\t}\n+\n+      const_bounds_p = (TYPE_MIN_VALUE (domain)\n+\t\t\t&& TYPE_MAX_VALUE (domain)\n+\t\t\t&& host_integerp (TYPE_MIN_VALUE (domain), 0)\n+\t\t\t&& host_integerp (TYPE_MAX_VALUE (domain), 0));\n+\n       /* If we have constant bounds for the range of the type, get them.  */\n       if (const_bounds_p)\n \t{\n@@ -4665,6 +4680,7 @@ store_constructor (exp, target, cleared, size)\n \n \t\t      if (GET_CODE (target) == MEM\n \t\t\t  && !MEM_KEEP_ALIAS_SET_P (target)\n+\t\t\t  && TREE_CODE (type) == ARRAY_TYPE\n \t\t\t  && TYPE_NONALIASED_COMPONENT (type))\n \t\t\t{\n \t\t\t  target = copy_rtx (target);\n@@ -4762,6 +4778,7 @@ store_constructor (exp, target, cleared, size)\n \t\tbitpos = (i * tree_low_cst (TYPE_SIZE (elttype), 1));\n \n \t      if (GET_CODE (target) == MEM && !MEM_KEEP_ALIAS_SET_P (target)\n+\t\t  && TREE_CODE (type) == ARRAY_TYPE\n \t\t  && TYPE_NONALIASED_COMPONENT (type))\n \t\t{\n \t\t  target = copy_rtx (target);"}, {"sha": "d85cdbb559bac4c71572a42724ac296d6eee008d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6834654ca4f725fca97095f372d69a92eb74f49/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6834654ca4f725fca97095f372d69a92eb74f49/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e6834654ca4f725fca97095f372d69a92eb74f49", "patch": "@@ -1,3 +1,7 @@\n+2002-02-13  Stan Shebs  <shebs@apple.com>\n+\n+        * gcc.dg/altivec-3.c: New.\n+\n 2002-02-12  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.dg/Wunreachable-1.c: New test."}, {"sha": "c82f1e2a214604cc5b194a84085b93d649dd1eba", "filename": "gcc/testsuite/gcc.dg/altivec-3.c", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6834654ca4f725fca97095f372d69a92eb74f49/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6834654ca4f725fca97095f372d69a92eb74f49/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-3.c?ref=e6834654ca4f725fca97095f372d69a92eb74f49", "patch": "@@ -0,0 +1,69 @@\n+/* { dg-do run { target powerpc-*-*altivec powerpc-*-*-*altivec } } */\n+/* { dg-options \"-maltivec\" } */\n+\n+typedef int int4 __attribute__ ((mode(V4SI)));\n+typedef float float4 __attribute__ ((mode(V4SF)));\n+\n+int4 a1 = (int4) { 100, 200, 300, 400 };\n+int4 a2 = (int4) { 500, 600, 700, 800 };\n+\n+float4 f1 = (float4) { 1.0, 2.0, 3.0, 4.0 };  \n+float4 f2 = (float4) { 5.0, 6.0, 7.0, 8.0 };\n+\n+int i3[4] __attribute__((aligned(16)));\n+int j3[4] __attribute__((aligned(16)));\n+float h3[4] __attribute__((aligned(16)));\n+float g3[4] __attribute__((aligned(16)));\n+\n+#define vec_store(dst, src) \\\n+  __builtin_altivec_st_internal_4si ((int *) dst, (int4) src)\n+\n+#define vec_add_int4(x, y) \\\n+  __builtin_altivec_vaddsws (x, y)\n+\n+#define vec_add_float4(x, y) \\\n+  __builtin_altivec_vaddfp (x, y)\n+\n+#define my_abs(x) (x > 0.0F ? x : -x)\n+\n+void\n+compare_int4 (int *a, int *b)\n+{\n+  int i;\n+\n+  for (i = 0; i < 4; ++i)\n+    if (a[i] != b[i])\n+      abort ();\n+}\n+\n+void\n+compare_float4 (float *a, float *b)\n+{\n+  int i;\n+\n+  for (i = 0; i < 4; ++i)\n+    if (my_abs(a[i] - b[i]) >= 1.0e-6)\n+      abort ();\n+}\n+\n+main ()\n+{\n+  int loc1 = 600, loc2 = 800;\n+  int4 a3 = (int4) { loc1, loc2, 1000, 1200 };\n+  int4 itmp;\n+  double locf = 12.0;\n+  float4 f3 = (float4) { 6.0, 8.0, 10.0, 12.0 };\n+  float4 ftmp;\n+\n+  vec_store (i3, a3);\n+  itmp = vec_add_int4 (a1, a2);\n+  vec_store (j3, itmp);\n+  compare_int4 (i3, j3);\n+\n+  vec_store (g3, f3);\n+  ftmp = vec_add_float4 (f1, f2);\n+  vec_store (h3, ftmp);\n+  compare_float4 (g3, h3);\n+\n+  exit (0);\n+}"}, {"sha": "0ca2172c32c608a3b820ccf5fdf170a4e1493532", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6834654ca4f725fca97095f372d69a92eb74f49/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6834654ca4f725fca97095f372d69a92eb74f49/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=e6834654ca4f725fca97095f372d69a92eb74f49", "patch": "@@ -4519,6 +4519,7 @@ output_constant (exp, size, align)\n       break;\n \n     case ARRAY_TYPE:\n+    case VECTOR_TYPE:\n       if (TREE_CODE (exp) == CONSTRUCTOR)\n \t{\n \t  output_constructor (exp, size, align);"}]}