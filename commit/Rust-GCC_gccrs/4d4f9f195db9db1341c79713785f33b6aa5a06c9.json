{"sha": "4d4f9f195db9db1341c79713785f33b6aa5a06c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQ0ZjlmMTk1ZGI5ZGIxMzQxYzc5NzEzNzg1ZjMzYjZhYTVhMDZjOQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@wasabisystems.com", "date": "2003-10-14T02:17:47Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2003-10-14T02:17:47Z"}, "message": "iwmmxt.md (cond_iwmmxt_movsi_insn): New pattern.\n\n\t* config/arm/iwmmxt.md (cond_iwmmxt_movsi_insn): New pattern.\n\t* config/arm/arm.md: For splits which rely on conditional moves,\n\tremove ! TARGET_IWMMXT condition.\n\nFrom-SVN: r72456", "tree": {"sha": "227dcb809424e63f93eb4a99b6e791c2707d036e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/227dcb809424e63f93eb4a99b6e791c2707d036e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d4f9f195db9db1341c79713785f33b6aa5a06c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d4f9f195db9db1341c79713785f33b6aa5a06c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d4f9f195db9db1341c79713785f33b6aa5a06c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d4f9f195db9db1341c79713785f33b6aa5a06c9/comments", "author": null, "committer": null, "parents": [{"sha": "c92c2a28c90fd62b031cbcee994038458afe7f90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c92c2a28c90fd62b031cbcee994038458afe7f90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c92c2a28c90fd62b031cbcee994038458afe7f90"}], "stats": {"total": 57, "additions": 40, "deletions": 17}, "files": [{"sha": "61ce6a8fc58d744758933ffd0c629757866a3ae2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d4f9f195db9db1341c79713785f33b6aa5a06c9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d4f9f195db9db1341c79713785f33b6aa5a06c9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4d4f9f195db9db1341c79713785f33b6aa5a06c9", "patch": "@@ -1,3 +1,9 @@\n+2003-10-13  Ian Lance Taylor  <ian@wasabisystems.com>\n+\n+\t* config/arm/iwmmxt.md (cond_iwmmxt_movsi_insn): New pattern.\n+\t* config/arm/arm.md: For splits which rely on conditional moves,\n+\tremove ! TARGET_IWMMXT condition.\n+\n 2003-10-13  David S. Miller  <davem@redhat.com>\n \n \t* ifcvt.c (num_removed_blocks): Rename to num_true_changes."}, {"sha": "7ef928e92663322b55335fd92e841048e871e4ff", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d4f9f195db9db1341c79713785f33b6aa5a06c9/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d4f9f195db9db1341c79713785f33b6aa5a06c9/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=4d4f9f195db9db1341c79713785f33b6aa5a06c9", "patch": "@@ -8522,10 +8522,7 @@\n \t\t\t (match_dup 0)\n \t\t\t (match_operand 4 \"\" \"\")))\n    (clobber (reg:CC CC_REGNUM))]\n-  ;; Note we have to suppress this split for the iwmmxt because it\n-  ;; creates a conditional movsi and the iwmmxt_movsi_insn pattern\n-  ;; is not predicable.  This sucks.\n-  \"TARGET_ARM && reload_completed && ! TARGET_IWMMXT\"\n+  \"TARGET_ARM && reload_completed\"\n   [(set (match_dup 5) (match_dup 6))\n    (cond_exec (match_dup 7)\n \t      (set (match_dup 0) (match_dup 4)))]\n@@ -8553,10 +8550,7 @@\n \t\t\t (match_operand 4 \"\" \"\")\n \t\t\t (match_dup 0)))\n    (clobber (reg:CC CC_REGNUM))]\n-  ;; Note we have to suppress this split for the iwmmxt because it\n-  ;; creates a conditional movsi and the iwmmxt_movsi_insn pattern\n-  ;; is not predicable.  This sucks.\n-  \"TARGET_ARM && reload_completed && ! TARGET_IWMMXT\"\n+  \"TARGET_ARM && reload_completed\"\n   [(set (match_dup 5) (match_dup 6))\n    (cond_exec (match_op_dup 1 [(match_dup 5) (const_int 0)])\n \t      (set (match_dup 0) (match_dup 4)))]\n@@ -8577,10 +8571,7 @@\n \t\t\t (match_operand 4 \"\" \"\")\n \t\t\t (match_operand 5 \"\" \"\")))\n    (clobber (reg:CC CC_REGNUM))]\n-  ;; Note we have to suppress this split for the iwmmxt because it\n-  ;; creates a conditional movsi and the iwmmxt_movsi_insn pattern\n-  ;; is not predicable.  This sucks.\n-  \"TARGET_ARM && reload_completed && ! TARGET_IWMMXT\"\n+  \"TARGET_ARM && reload_completed\"\n   [(set (match_dup 6) (match_dup 7))\n    (cond_exec (match_op_dup 1 [(match_dup 6) (const_int 0)])\n \t      (set (match_dup 0) (match_dup 4)))\n@@ -8612,10 +8603,7 @@\n \t\t\t (not:SI\n \t\t\t  (match_operand:SI 5 \"s_register_operand\" \"\"))))\n    (clobber (reg:CC CC_REGNUM))]\n-  ;; Note we have to suppress this split for the iwmmxt because it\n-  ;; creates a conditional movsi and the iwmmxt_movsi_insn pattern\n-  ;; is not predicable.  This sucks.\n-  \"TARGET_ARM && reload_completed && ! TARGET_IWMMXT\"\n+  \"TARGET_ARM && reload_completed\"\n   [(set (match_dup 6) (match_dup 7))\n    (cond_exec (match_op_dup 1 [(match_dup 6) (const_int 0)])\n \t      (set (match_dup 0) (match_dup 4)))"}, {"sha": "f8070a885947cce5ff31de47882f03c5abd78112", "filename": "gcc/config/arm/iwmmxt.md", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d4f9f195db9db1341c79713785f33b6aa5a06c9/gcc%2Fconfig%2Farm%2Fiwmmxt.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d4f9f195db9db1341c79713785f33b6aa5a06c9/gcc%2Fconfig%2Farm%2Fiwmmxt.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiwmmxt.md?ref=4d4f9f195db9db1341c79713785f33b6aa5a06c9", "patch": "@@ -116,14 +116,43 @@\n    (set_attr \"neg_pool_range\" \"*,*,4084,     *,*,*,   *,  1012,*\")\n    ;; Note - the \"predicable\" attribute is not allowed to have alternatives.\n    ;; Since the wSTRw wCx instruction is not predicable, we cannot support\n-   ;; predicating any of the alternatives in this template.  This sucks.\n+   ;; predicating any of the alternatives in this template.  Instead,\n+   ;; we do the predication ourselves, in cond_iwmmxt_movsi_insn.\n    (set_attr \"predicable\"     \"no\")\n    ;; Also - we have to pretend that these insns clobber the condition code\n    ;; bits as otherwise arm_final_prescan_insn() will try to conditionalize\n    ;; them.\n    (set_attr \"conds\" \"clob\")]\n )\n \n+;; Because iwmmxt_movsi_insn is not predicable, we provide the\n+;; cond_exec version explicitly, with appropriate constraints.\n+\n+(define_insn \"*cond_iwmmxt_movsi_insn\"\n+  [(cond_exec\n+     (match_operator 2 \"arm_comparison_operator\"\n+      [(match_operand 3 \"cc_register\" \"\")\n+      (const_int 0)])\n+     (set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,r,r, m,z,r\")\n+\t  (match_operand:SI 1 \"general_operand\"      \"rI,K,mi,r,r,z\")))]\n+  \"TARGET_REALLY_IWMMXT\n+   && (   register_operand (operands[0], SImode)\n+       || register_operand (operands[1], SImode))\"\n+  \"*\n+   switch (which_alternative)\n+   {\n+   case 0: return \\\"mov%?\\\\t%0, %1\\\";\n+   case 1: return \\\"mvn%?\\\\t%0, #%B1\\\";\n+   case 2: return \\\"ldr%?\\\\t%0, %1\\\";\n+   case 3: return \\\"str%?\\\\t%1, %0\\\";\n+   case 4: return \\\"tmcr%?\\\\t%0, %1\\\";\n+   default: return \\\"tmrc%?\\\\t%0, %1\\\";\n+  }\"\n+  [(set_attr \"type\"           \"*,*,load,store1,*,*\")\n+   (set_attr \"pool_range\"     \"*,*,4096,     *,*,*\")\n+   (set_attr \"neg_pool_range\" \"*,*,4084,     *,*,*\")]\n+)\n+\n (define_insn \"movv8qi_internal\"\n   [(set (match_operand:V8QI 0 \"nonimmediate_operand\" \"=y,m,y,?r,?y,?r\")\n \t(match_operand:V8QI 1 \"general_operand\"       \"y,y,m,y,r,i\"))]"}]}