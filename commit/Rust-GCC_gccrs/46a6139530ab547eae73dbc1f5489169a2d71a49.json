{"sha": "46a6139530ab547eae73dbc1f5489169a2d71a49", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZhNjEzOTUzMGFiNTQ3ZWFlNzNkYmMxZjU0ODkxNjlhMmQ3MWE0OQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-11-22T10:15:43Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-11-22T10:15:43Z"}, "message": "re PR tree-optimization/78436 (incorrect write to larger-than-type bitfield (signed char x:9))\n\n\tPR tree-optimization/78436\n\t* gimple-ssa-store-merging.c (zero_char_buf): Removed.\n\t(shift_bytes_in_array, shift_bytes_in_array_right,\n\tmerged_store_group::apply_stores): Formatting fixes.\n\t(clear_bit_region): Likewise.  Use memset.\n\t(encode_tree_to_bitpos): Formatting fixes.  Fix comment typos - EPXR\n\tinstead of EXPR and inerted instead of inserted.  Use memset instead\n\tof zero_char_buf.  For !BYTES_BIG_ENDIAN decrease byte_size by 1\n\tif shift_amnt is 0.\n\n\t* gcc.c-torture/execute/pr78436.c: New test.\n\nFrom-SVN: r242691", "tree": {"sha": "ced1470ba834088553d129562f2fc7a61a247cbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ced1470ba834088553d129562f2fc7a61a247cbb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46a6139530ab547eae73dbc1f5489169a2d71a49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46a6139530ab547eae73dbc1f5489169a2d71a49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46a6139530ab547eae73dbc1f5489169a2d71a49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46a6139530ab547eae73dbc1f5489169a2d71a49/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "76a7314dc936394490f2207c45ed76ab248b3da0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76a7314dc936394490f2207c45ed76ab248b3da0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76a7314dc936394490f2207c45ed76ab248b3da0"}], "stats": {"total": 85, "additions": 55, "deletions": 30}, "files": [{"sha": "1bc5856ea00ef717702cf58bd278d860737ff198", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46a6139530ab547eae73dbc1f5489169a2d71a49/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46a6139530ab547eae73dbc1f5489169a2d71a49/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=46a6139530ab547eae73dbc1f5489169a2d71a49", "patch": "@@ -1,5 +1,15 @@\n 2016-11-22  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/78436\n+\t* gimple-ssa-store-merging.c (zero_char_buf): Removed.\n+\t(shift_bytes_in_array, shift_bytes_in_array_right,\n+\tmerged_store_group::apply_stores): Formatting fixes.\n+\t(clear_bit_region): Likewise.  Use memset.\n+\t(encode_tree_to_bitpos): Formatting fixes.  Fix comment typos - EPXR\n+\tinstead of EXPR and inerted instead of inserted.  Use memset instead\n+\tof zero_char_buf.  For !BYTES_BIG_ENDIAN decrease byte_size by 1\n+\tif shift_amnt is 0.\n+\n \tPR middle-end/78416\n \t* expmed.c (expand_divmod): Use wide_int for computation of\n \top1_is_pow2.  Don't set it if op1 is 0.  Formatting fixes."}, {"sha": "6e26484d66723ecbade37e5ed218095ec75e243b", "filename": "gcc/gimple-ssa-store-merging.c", "status": "modified", "additions": 19, "deletions": 30, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46a6139530ab547eae73dbc1f5489169a2d71a49/gcc%2Fgimple-ssa-store-merging.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46a6139530ab547eae73dbc1f5489169a2d71a49/gcc%2Fgimple-ssa-store-merging.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-store-merging.c?ref=46a6139530ab547eae73dbc1f5489169a2d71a49", "patch": "@@ -199,17 +199,6 @@ dump_char_array (FILE *fd, unsigned char *ptr, unsigned int len)\n   fprintf (fd, \"\\n\");\n }\n \n-/* Fill a byte array PTR of SZ elements with zeroes.  This is to be used by\n-   encode_tree_to_bitpos to zero-initialize most likely small arrays but\n-   with a non-compile-time-constant size.  */\n-\n-static inline void\n-zero_char_buf (unsigned char *ptr, unsigned int sz)\n-{\n-  for (unsigned int i = 0; i < sz; i++)\n-    ptr[i] = 0;\n-}\n-\n /* Shift left the bytes in PTR of SZ elements by AMNT bits, carrying over the\n    bits between adjacent elements.  AMNT should be within\n    [0, BITS_PER_UNIT).\n@@ -224,14 +213,13 @@ shift_bytes_in_array (unsigned char *ptr, unsigned int sz, unsigned int amnt)\n     return;\n \n   unsigned char carry_over = 0U;\n-  unsigned char carry_mask = (~0U) << ((unsigned char)(BITS_PER_UNIT - amnt));\n+  unsigned char carry_mask = (~0U) << (unsigned char) (BITS_PER_UNIT - amnt);\n   unsigned char clear_mask = (~0U) << amnt;\n \n   for (unsigned int i = 0; i < sz; i++)\n     {\n       unsigned prev_carry_over = carry_over;\n-      carry_over\n-\t= (ptr[i] & carry_mask) >> (BITS_PER_UNIT - amnt);\n+      carry_over = (ptr[i] & carry_mask) >> (BITS_PER_UNIT - amnt);\n \n       ptr[i] <<= amnt;\n       if (i != 0)\n@@ -263,10 +251,9 @@ shift_bytes_in_array_right (unsigned char *ptr, unsigned int sz,\n   for (unsigned int i = 0; i < sz; i++)\n     {\n       unsigned prev_carry_over = carry_over;\n-      carry_over\n-\t= (ptr[i] & carry_mask);\n+      carry_over = ptr[i] & carry_mask;\n \n-     carry_over <<= ((unsigned char)BITS_PER_UNIT - amnt);\n+     carry_over <<= (unsigned char) BITS_PER_UNIT - amnt;\n      ptr[i] >>= amnt;\n      ptr[i] |= prev_carry_over;\n     }\n@@ -327,7 +314,7 @@ clear_bit_region (unsigned char *ptr, unsigned int start,\n   /* Second base case.  */\n   else if ((start + len) <= BITS_PER_UNIT)\n     {\n-      unsigned char mask = (~0U) << ((unsigned char)(BITS_PER_UNIT - len));\n+      unsigned char mask = (~0U) << (unsigned char) (BITS_PER_UNIT - len);\n       mask >>= BITS_PER_UNIT - (start + len);\n \n       ptr[0] &= ~mask;\n@@ -346,8 +333,7 @@ clear_bit_region (unsigned char *ptr, unsigned int start,\n       unsigned int nbytes = len / BITS_PER_UNIT;\n       /* We could recurse on each byte but do the loop here to avoid\n \t recursing too deep.  */\n-      for (unsigned int i = 0; i < nbytes; i++)\n-\tptr[i] = 0U;\n+      memset (ptr, '\\0', nbytes);\n       /* Clear the remaining sub-byte region if there is one.  */\n       if (len % BITS_PER_UNIT != 0)\n \tclear_bit_region (ptr + nbytes, 0, len % BITS_PER_UNIT);\n@@ -362,16 +348,16 @@ clear_bit_region (unsigned char *ptr, unsigned int start,\n \n static bool\n encode_tree_to_bitpos (tree expr, unsigned char *ptr, int bitlen, int bitpos,\n-\t\t\tunsigned int total_bytes)\n+\t\t       unsigned int total_bytes)\n {\n   unsigned int first_byte = bitpos / BITS_PER_UNIT;\n   tree tmp_int = expr;\n   bool sub_byte_op_p = (bitlen % BITS_PER_UNIT) || (bitpos % BITS_PER_UNIT)\n \t\t\t|| mode_for_size (bitlen, MODE_INT, 0) == BLKmode;\n \n   if (!sub_byte_op_p)\n-    return native_encode_expr (tmp_int, ptr + first_byte, total_bytes, 0)\n-\t   != 0;\n+    return (native_encode_expr (tmp_int, ptr + first_byte, total_bytes, 0)\n+\t    != 0);\n \n   /* LITTLE-ENDIAN\n      We are writing a non byte-sized quantity or at a position that is not\n@@ -381,7 +367,7 @@ encode_tree_to_bitpos (tree expr, unsigned char *ptr, int bitlen, int bitpos,\n            xxx xxxxxxxx xxx< bp>\n            |______EXPR____|\n \n-     First native_encode_expr EPXR into a temporary buffer and shift each\n+     First native_encode_expr EXPR into a temporary buffer and shift each\n      byte in the buffer by 'bp' (carrying the bits over as necessary).\n      |00000000|00xxxxxx|xxxxxxxx| << bp = |000xxxxx|xxxxxxxx|xxx00000|\n                                               <------bitlen---->< bp>\n@@ -400,7 +386,7 @@ encode_tree_to_bitpos (tree expr, unsigned char *ptr, int bitlen, int bitpos,\n                        <bp >xxx xxxxxxxx xxx\n                             |_____EXPR_____|\n \n-     First native_encode_expr EPXR into a temporary buffer and shift each\n+     First native_encode_expr EXPR into a temporary buffer and shift each\n      byte in the buffer to the right by (carrying the bits over as necessary).\n      We shift by as much as needed to align the most significant bit of EXPR\n      with bitpos:\n@@ -418,7 +404,7 @@ encode_tree_to_bitpos (tree expr, unsigned char *ptr, int bitlen, int bitpos,\n   /* Allocate an extra byte so that we have space to shift into.  */\n   unsigned int byte_size = GET_MODE_SIZE (TYPE_MODE (TREE_TYPE (expr))) + 1;\n   unsigned char *tmpbuf = XALLOCAVEC (unsigned char, byte_size);\n-  zero_char_buf (tmpbuf, byte_size);\n+  memset (tmpbuf, '\\0', byte_size);\n   /* The store detection code should only have allowed constants that are\n      accepted by native_encode_expr.  */\n   if (native_encode_expr (expr, tmpbuf, byte_size, 0) == 0)\n@@ -453,7 +439,7 @@ encode_tree_to_bitpos (tree expr, unsigned char *ptr, int bitlen, int bitpos,\n     }\n \n   /* Clear the bit region in PTR where the bits from TMPBUF will be\n-     inerted into.  */\n+     inserted into.  */\n   if (BYTES_BIG_ENDIAN)\n     clear_bit_region_be (ptr + first_byte,\n \t\t\t BITS_PER_UNIT - 1 - (bitpos % BITS_PER_UNIT), bitlen);\n@@ -493,7 +479,11 @@ encode_tree_to_bitpos (tree expr, unsigned char *ptr, int bitlen, int bitpos,\n \n   /* Create the shifted version of EXPR.  */\n   if (!BYTES_BIG_ENDIAN)\n-    shift_bytes_in_array (tmpbuf, byte_size, shift_amnt);\n+    {\n+      shift_bytes_in_array (tmpbuf, byte_size, shift_amnt);\n+      if (shift_amnt == 0)\n+\tbyte_size--;\n+    }\n   else\n     {\n       gcc_assert (BYTES_BIG_ENDIAN);\n@@ -648,8 +638,7 @@ merged_store_group::apply_stores ()\n   /* Create a buffer of a size that is 2 times the number of bytes we're\n      storing.  That way native_encode_expr can write power-of-2-sized\n      chunks without overrunning.  */\n-  buf_size\n-    = 2 * (ROUND_UP (width, BITS_PER_UNIT) / BITS_PER_UNIT);\n+  buf_size = 2 * (ROUND_UP (width, BITS_PER_UNIT) / BITS_PER_UNIT);\n   val = XCNEWVEC (unsigned char, buf_size);\n \n   FOR_EACH_VEC_ELT (stores, i, info)"}, {"sha": "7f439cd6137006bf19f2640c0cf3cc0733437128", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46a6139530ab547eae73dbc1f5489169a2d71a49/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46a6139530ab547eae73dbc1f5489169a2d71a49/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=46a6139530ab547eae73dbc1f5489169a2d71a49", "patch": "@@ -1,5 +1,8 @@\n 2016-11-22  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/78436\n+\t* gcc.c-torture/execute/pr78436.c: New test.\n+\n \tPR middle-end/78416\n \t* gcc.dg/torture/pr78416.c: New test.\n "}, {"sha": "ea03d3fa666fd8a89204cb9e42959582d467bfee", "filename": "gcc/testsuite/gcc.c-torture/execute/pr78436.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46a6139530ab547eae73dbc1f5489169a2d71a49/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr78436.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46a6139530ab547eae73dbc1f5489169a2d71a49/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr78436.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr78436.c?ref=46a6139530ab547eae73dbc1f5489169a2d71a49", "patch": "@@ -0,0 +1,23 @@\n+/* PR tree-optimization/78436 */\n+\n+struct S\n+{\n+  long int a : 24;\n+  signed char b : 8;\n+} s;\n+\n+__attribute__((noinline, noclone)) void\n+foo ()\n+{\n+  s.b = 0;\n+  s.a = -1193165L;\n+}\n+\n+int\n+main ()\n+{\n+  foo ();\n+  if (s.b != 0)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}