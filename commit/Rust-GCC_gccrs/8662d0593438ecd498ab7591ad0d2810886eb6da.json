{"sha": "8662d0593438ecd498ab7591ad0d2810886eb6da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODY2MmQwNTkzNDM4ZWNkNDk4YWI3NTkxYWQwZDI4MTA4ODZlYjZkYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-04-06T22:27:10Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-04-06T22:27:10Z"}, "message": "cselib: Fix endless cselib loop on (plus:P (reg) (const_int 0))\n\ngetopt.c hangs the compiler on h8300-elf with -O2 -g, because the\nIL contains addition of constant 0, the first PLUS operand is determined\nto have the SP_DERIVED_VALUE_P and the new code in cselib recurses\nindefinitely on seeing SP_DERIVED_VALUE_P with locs of\n(plus:P SP_DERIVED_VALUE_P (const_int 0)).\n\nFixed by making sure cselib_subst_to_values canonicalizes it, hashing\nalready hashes it the same too.\n\n2020-04-06  Jakub Jelinek  <jakub@redhat.com>\n\n\t* cselib.c (cselib_subst_to_values): For SP_DERIVED_VALUE_P\n\t+ const0_rtx return the SP_DERIVED_VALUE_P.", "tree": {"sha": "d872bb10743b0bcf082839852c8a36a7342f1141", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d872bb10743b0bcf082839852c8a36a7342f1141"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8662d0593438ecd498ab7591ad0d2810886eb6da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8662d0593438ecd498ab7591ad0d2810886eb6da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8662d0593438ecd498ab7591ad0d2810886eb6da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8662d0593438ecd498ab7591ad0d2810886eb6da/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0fd9ce257c9033d885d9393bc4dc07da1eab16e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0fd9ce257c9033d885d9393bc4dc07da1eab16e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0fd9ce257c9033d885d9393bc4dc07da1eab16e"}], "stats": {"total": 23, "additions": 16, "deletions": 7}, "files": [{"sha": "40707325765086a52ecdb73f572ca1b970250d5d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8662d0593438ecd498ab7591ad0d2810886eb6da/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8662d0593438ecd498ab7591ad0d2810886eb6da/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8662d0593438ecd498ab7591ad0d2810886eb6da", "patch": "@@ -1,3 +1,8 @@\n+2020-04-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* cselib.c (cselib_subst_to_values): For SP_DERIVED_VALUE_P\n+\t+ const0_rtx return the SP_DERIVED_VALUE_P.\n+\n 2020-04-06  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR rtl-optimization/92989"}, {"sha": "69c9ca5b211cbc9f5c6403dcadb5f943bfdc66f9", "filename": "gcc/cselib.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8662d0593438ecd498ab7591ad0d2810886eb6da/gcc%2Fcselib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8662d0593438ecd498ab7591ad0d2810886eb6da/gcc%2Fcselib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcselib.c?ref=8662d0593438ecd498ab7591ad0d2810886eb6da", "patch": "@@ -2090,13 +2090,17 @@ cselib_subst_to_values (rtx x, machine_mode memmode)\n \t{\n \t  rtx t = cselib_subst_to_values (XEXP (x, 0), memmode);\n \t  if (GET_CODE (t) == VALUE)\n-\t    for (struct elt_loc_list *l = CSELIB_VAL_PTR (t)->locs;\n-\t\t l; l = l->next)\n-\t      if (GET_CODE (l->loc) == PLUS\n-\t\t  && GET_CODE (XEXP (l->loc, 0)) == VALUE\n-\t\t  && SP_DERIVED_VALUE_P (XEXP (l->loc, 0))\n-\t\t  && CONST_INT_P (XEXP (l->loc, 1)))\n-\t\treturn plus_constant (Pmode, l->loc, INTVAL (XEXP (x, 1)));\n+\t    {\n+\t      if (SP_DERIVED_VALUE_P (t) && XEXP (x, 1) == const0_rtx)\n+\t\treturn t;\n+\t      for (struct elt_loc_list *l = CSELIB_VAL_PTR (t)->locs;\n+\t\t   l; l = l->next)\n+\t\tif (GET_CODE (l->loc) == PLUS\n+\t\t    && GET_CODE (XEXP (l->loc, 0)) == VALUE\n+\t\t    && SP_DERIVED_VALUE_P (XEXP (l->loc, 0))\n+\t\t    && CONST_INT_P (XEXP (l->loc, 1)))\n+\t\t  return plus_constant (Pmode, l->loc, INTVAL (XEXP (x, 1)));\n+\t    }\n \t  if (t != XEXP (x, 0))\n \t    {\n \t      copy = shallow_copy_rtx (x);"}]}