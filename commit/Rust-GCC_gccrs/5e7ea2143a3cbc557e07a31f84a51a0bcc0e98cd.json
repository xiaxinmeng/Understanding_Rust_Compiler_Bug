{"sha": "5e7ea2143a3cbc557e07a31f84a51a0bcc0e98cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWU3ZWEyMTQzYTNjYmM1NTdlMDdhMzFmODRhNTFhMGJjYzBlOThjZA==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2013-07-08T19:05:16Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2013-07-08T19:05:16Z"}, "message": "re PR fortran/57834 (C_F_POINTER (only with -std=): accepts only explicit- and assumed-size arrays for FPTR when SHAPE is present)\n\n2013-07-08  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/57834\n        * check.c (is_c_interoperable): Add special case for\n        * c_f_pointer.\n        (explicit-size, gfc_check_c_f_pointer, gfc_check_c_loc): Update\n        call.\n\n2013-07-08  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/57834\n        * gfortran.dg/c_f_pointer_tests_8.f90: New.\n\nFrom-SVN: r200794", "tree": {"sha": "b54c2698e63d3180109abdd587d637a11196af00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b54c2698e63d3180109abdd587d637a11196af00"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e7ea2143a3cbc557e07a31f84a51a0bcc0e98cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e7ea2143a3cbc557e07a31f84a51a0bcc0e98cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e7ea2143a3cbc557e07a31f84a51a0bcc0e98cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e7ea2143a3cbc557e07a31f84a51a0bcc0e98cd/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4a283fdfbf9eb2bee7ccba7cbe75ac5e11ba0ce2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a283fdfbf9eb2bee7ccba7cbe75ac5e11ba0ce2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a283fdfbf9eb2bee7ccba7cbe75ac5e11ba0ce2"}], "stats": {"total": 63, "additions": 57, "deletions": 6}, "files": [{"sha": "283521a22cecc6a100592f1c129781a202e12589", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e7ea2143a3cbc557e07a31f84a51a0bcc0e98cd/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e7ea2143a3cbc557e07a31f84a51a0bcc0e98cd/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=5e7ea2143a3cbc557e07a31f84a51a0bcc0e98cd", "patch": "@@ -1,3 +1,10 @@\n+2013-07-08  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/57834\n+\t* check.c (is_c_interoperable): Add special case for c_f_pointer.\n+\t(explicit-size, gfc_check_c_f_pointer, gfc_check_c_loc): Update\n+\tcall.\n+\n 2013-07-08  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/50554"}, {"sha": "4024cd456529556750bdbe5d056680933a99641c", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e7ea2143a3cbc557e07a31f84a51a0bcc0e98cd/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e7ea2143a3cbc557e07a31f84a51a0bcc0e98cd/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=5e7ea2143a3cbc557e07a31f84a51a0bcc0e98cd", "patch": "@@ -3650,10 +3650,11 @@ gfc_check_sizeof (gfc_expr *arg)\n    otherwise, it is set to NULL.  The msg string can be used in diagnostics.\n    If c_loc is true, character with len > 1 are allowed (cf. Fortran\n    2003corr5); additionally, assumed-shape/assumed-rank/deferred-shape\n-   arrays are permitted.  */\n+   arrays are permitted. And if c_f_ptr is true, deferred-shape arrays\n+   are permitted. */\n \n static bool\n-is_c_interoperable (gfc_expr *expr, const char **msg, bool c_loc)\n+is_c_interoperable (gfc_expr *expr, const char **msg, bool c_loc, bool c_f_ptr)\n {\n   *msg = NULL;\n \n@@ -3734,7 +3735,8 @@ is_c_interoperable (gfc_expr *expr, const char **msg, bool c_loc)\n \t  *msg = \"Only whole-arrays are interoperable\";\n \t  return false;\n \t}\n-      if (ar->as->type != AS_EXPLICIT && ar->as->type != AS_ASSUMED_SIZE)\n+      if (!c_f_ptr && ar->as->type != AS_EXPLICIT\n+\t  && ar->as->type != AS_ASSUMED_SIZE)\n \t{\n \t  *msg = \"Only explicit-size and assumed-size arrays are interoperable\";\n \t  return false;\n@@ -3750,7 +3752,7 @@ gfc_check_c_sizeof (gfc_expr *arg)\n {\n   const char *msg;\n \n-  if (!is_c_interoperable (arg, &msg, false))\n+  if (!is_c_interoperable (arg, &msg, false, false))\n     {\n       gfc_error (\"'%s' argument of '%s' intrinsic at %L must be an \"\n \t\t \"interoperable data entity: %s\",\n@@ -3900,7 +3902,7 @@ gfc_check_c_f_pointer (gfc_expr *cptr, gfc_expr *fptr, gfc_expr *shape)\n       return false;\n     }\n \n-  if (!is_c_interoperable (fptr, &msg, false) && fptr->rank)\n+  if (!is_c_interoperable (fptr, &msg, false, true))\n     return gfc_notify_std (GFC_STD_F2008_TS, \"Noninteroperable array FPTR \"\n \t\t\t   \"at %L to C_F_POINTER: %s\", &fptr->where, msg);\n \n@@ -4029,7 +4031,7 @@ gfc_check_c_loc (gfc_expr *x)\n       return false;\n     }\n \n-  if (!is_c_interoperable (x, &msg, true))\n+  if (!is_c_interoperable (x, &msg, true, false))\n     {\n       if (x->ts.type == BT_CLASS)\n \t{"}, {"sha": "3e664332a4b070e760e59ae8374bf86401d3e868", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e7ea2143a3cbc557e07a31f84a51a0bcc0e98cd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e7ea2143a3cbc557e07a31f84a51a0bcc0e98cd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5e7ea2143a3cbc557e07a31f84a51a0bcc0e98cd", "patch": "@@ -1,3 +1,8 @@\n+2013-07-08  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/57834\n+\t* gfortran.dg/c_f_pointer_tests_8.f90: New.\n+\n 2013-07-08  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/50554"}, {"sha": "d82c9ea8a3c6aaaaea6dec06b5ef80de298d3731", "filename": "gcc/testsuite/gfortran.dg/c_f_pointer_tests_8.f90", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e7ea2143a3cbc557e07a31f84a51a0bcc0e98cd/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_f_pointer_tests_8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e7ea2143a3cbc557e07a31f84a51a0bcc0e98cd/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_f_pointer_tests_8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_f_pointer_tests_8.f90?ref=5e7ea2143a3cbc557e07a31f84a51a0bcc0e98cd", "patch": "@@ -0,0 +1,37 @@\n+! { dg-do compile }\n+! { dg-options \"-std=f2003\" }\n+!\n+! PR fortran/57834\n+!\n+! (Gave a bogus warning before.)\n+!\n+program main\n+\n+    use iso_c_binding\n+    use iso_fortran_env\n+\n+    implicit none\n+\n+    interface\n+        function strerror(errno) bind(C, NAME = 'strerror')\n+            import\n+            type(C_PTR) :: strerror\n+            integer(C_INT), value :: errno\n+        end function\n+    end interface\n+\n+    integer :: i\n+    type(C_PTR) :: cptr\n+    character(KIND=C_CHAR), pointer :: str(:)\n+\n+    cptr = strerror(INT(42, KIND = C_INT))\n+    call C_F_POINTER(cptr, str, [255])\n+\n+    do i = 1, SIZE(str)\n+        if (str(i) == C_NULL_CHAR) exit\n+        write (ERROR_UNIT, '(A1)', ADVANCE = 'NO') str(i:i)\n+    enddo\n+\n+    write (ERROR_UNIT, '(1X)')\n+\n+end program main"}]}