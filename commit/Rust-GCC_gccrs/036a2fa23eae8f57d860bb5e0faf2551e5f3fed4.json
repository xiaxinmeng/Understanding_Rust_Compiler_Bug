{"sha": "036a2fa23eae8f57d860bb5e0faf2551e5f3fed4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDM2YTJmYTIzZWFlOGY1N2Q4NjBiYjVlMGZhZjI1NTFlNWYzZmVkNA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2016-10-10T09:46:10Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2016-10-10T09:46:10Z"}, "message": "utils2.c (find_common_type): Do not return the LHS type if it's an array with non-constant lower bound and...\n\n\t* gcc-interface/utils2.c (find_common_type): Do not return the LHS type\n\tif it's an array with non-constant lower bound and the RHS type is an\n\tarray with a constant one.\n\nFrom-SVN: r240913", "tree": {"sha": "0bdeb9985c2e7e3119a0865ef5daca84503aaaac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0bdeb9985c2e7e3119a0865ef5daca84503aaaac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/036a2fa23eae8f57d860bb5e0faf2551e5f3fed4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/036a2fa23eae8f57d860bb5e0faf2551e5f3fed4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/036a2fa23eae8f57d860bb5e0faf2551e5f3fed4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/036a2fa23eae8f57d860bb5e0faf2551e5f3fed4/comments", "author": null, "committer": null, "parents": [{"sha": "55cfd746c7d6e262d01a3cb8d5f32ebc8dceffbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55cfd746c7d6e262d01a3cb8d5f32ebc8dceffbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55cfd746c7d6e262d01a3cb8d5f32ebc8dceffbc"}], "stats": {"total": 94, "additions": 82, "deletions": 12}, "files": [{"sha": "3965dcae747d8cf94083ba55d1f1b5a0110ad2fc", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/036a2fa23eae8f57d860bb5e0faf2551e5f3fed4/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/036a2fa23eae8f57d860bb5e0faf2551e5f3fed4/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=036a2fa23eae8f57d860bb5e0faf2551e5f3fed4", "patch": "@@ -1,7 +1,13 @@\n 2016-10-10  Eric Botcazou  <ebotcazou@adacore.com>\n \n-\t* gcc-interface/utils.c (convert): For a biased input type, convert\n-\tthe bias itself to the base type before adding it.\n+\t* gcc-interface/utils2.c (find_common_type): Do not return the LHS type\n+\tif it's an array with non-constant lower bound and the RHS type is an\n+\tarray with a constant one.\n+\n+2016-10-10  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/utils.c (convert): For a biased input type, convert the\n+\tbias itself to the base type before adding it.\n \n 2016-10-08  Eric Botcazou  <ebotcazou@adacore.com>\n "}, {"sha": "b820fea28b75d752b389d3f771382c3da763ee91", "filename": "gcc/ada/gcc-interface/utils2.c", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/036a2fa23eae8f57d860bb5e0faf2551e5f3fed4/gcc%2Fada%2Fgcc-interface%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/036a2fa23eae8f57d860bb5e0faf2551e5f3fed4/gcc%2Fada%2Fgcc-interface%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils2.c?ref=036a2fa23eae8f57d860bb5e0faf2551e5f3fed4", "patch": "@@ -215,27 +215,40 @@ find_common_type (tree t1, tree t2)\n      calling into build_binary_op), some others are really expected and we\n      have to be careful.  */\n \n+  const bool variable_record_on_lhs\n+    = (TREE_CODE (t1) == RECORD_TYPE\n+       && TREE_CODE (t2) == RECORD_TYPE\n+       && get_variant_part (t1)\n+       && !get_variant_part (t2));\n+\n+  const bool variable_array_on_lhs\n+    = (TREE_CODE (t1) == ARRAY_TYPE\n+       && TREE_CODE (t2) == ARRAY_TYPE\n+       && !TREE_CONSTANT (TYPE_MIN_VALUE (TYPE_DOMAIN (t1)))\n+       && TREE_CONSTANT (TYPE_MIN_VALUE (TYPE_DOMAIN (t2))));\n+\n   /* We must avoid writing more than what the target can hold if this is for\n      an assignment and the case of tagged types is handled in build_binary_op\n      so we use the lhs type if it is known to be smaller or of constant size\n      and the rhs type is not, whatever the modes.  We also force t1 in case of\n      constant size equality to minimize occurrences of view conversions on the\n-     lhs of an assignment, except for the case of record types with a variant\n-     part on the lhs but not on the rhs to make the conversion simpler.  */\n+     lhs of an assignment, except for the case of types with a variable part\n+     on the lhs but not on the rhs to make the conversion simpler.  */\n   if (TREE_CONSTANT (TYPE_SIZE (t1))\n       && (!TREE_CONSTANT (TYPE_SIZE (t2))\n \t  || tree_int_cst_lt (TYPE_SIZE (t1), TYPE_SIZE (t2))\n \t  || (TYPE_SIZE (t1) == TYPE_SIZE (t2)\n-\t      && !(TREE_CODE (t1) == RECORD_TYPE\n-\t\t   && TREE_CODE (t2) == RECORD_TYPE\n-\t\t   && get_variant_part (t1)\n-\t\t   && !get_variant_part (t2)))))\n+\t      && !variable_record_on_lhs\n+\t      && !variable_array_on_lhs)))\n     return t1;\n \n-  /* Otherwise, if the lhs type is non-BLKmode, use it.  Note that we know\n-     that we will not have any alignment problems since, if we did, the\n-     non-BLKmode type could not have been used.  */\n-  if (TYPE_MODE (t1) != BLKmode)\n+  /* Otherwise, if the lhs type is non-BLKmode, use it, except for the case of\n+     a non-BLKmode rhs and array types with a variable part on the lhs but not\n+     on the rhs to make sure the conversion is preserved during gimplification.\n+     Note that we know that we will not have any alignment problems since, if\n+     we did, the non-BLKmode type could not have been used.  */\n+  if (TYPE_MODE (t1) != BLKmode\n+      && (TYPE_MODE (t2) == BLKmode || !variable_array_on_lhs))\n     return t1;\n \n   /* If the rhs type is of constant size, use it whatever the modes.  At"}, {"sha": "bf766822198d09f6a4a9b802f36f10a6f91d9162", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/036a2fa23eae8f57d860bb5e0faf2551e5f3fed4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/036a2fa23eae8f57d860bb5e0faf2551e5f3fed4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=036a2fa23eae8f57d860bb5e0faf2551e5f3fed4", "patch": "@@ -1,3 +1,8 @@\n+2016-10-10  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/inline13.ad[sb]: New test.\n+\t* gnat.dg/inline13_pkg.ad[sb]: New helper.\n+\n 2016-10-10  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/biased_subtype.adb: New test."}, {"sha": "4be6514aab03f21010354e5cf3e6e728d1c190fc", "filename": "gcc/testsuite/gnat.dg/inline13.adb", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/036a2fa23eae8f57d860bb5e0faf2551e5f3fed4/gcc%2Ftestsuite%2Fgnat.dg%2Finline13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/036a2fa23eae8f57d860bb5e0faf2551e5f3fed4/gcc%2Ftestsuite%2Fgnat.dg%2Finline13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Finline13.adb?ref=036a2fa23eae8f57d860bb5e0faf2551e5f3fed4", "patch": "@@ -0,0 +1,19 @@\n+-- { dg-do compile }\n+-- { dg-options \"-O -gnatn\" }\n+\n+package body Inline13 is\n+\n+  function F (L : Arr) return String is\n+    Local : Arr (1 .. L'Length);\n+    Ret : String (1 .. L'Length);\n+    Pos : Natural := 1;\n+  begin\n+    Local (1 .. L'Length) := L;\n+    for I in 1 .. Integer (L'Length) loop\n+       Ret (Pos .. Pos + 8) := \" \" & Inline13_Pkg.Padded (Local (I));\n+       Pos := Pos + 9;\n+    end loop;\n+    return Ret;\n+  end;\n+\n+end Inline13;"}, {"sha": "7e8f8d62be1186b522716a6979e0bbfaa29e7f79", "filename": "gcc/testsuite/gnat.dg/inline13.ads", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/036a2fa23eae8f57d860bb5e0faf2551e5f3fed4/gcc%2Ftestsuite%2Fgnat.dg%2Finline13.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/036a2fa23eae8f57d860bb5e0faf2551e5f3fed4/gcc%2Ftestsuite%2Fgnat.dg%2Finline13.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Finline13.ads?ref=036a2fa23eae8f57d860bb5e0faf2551e5f3fed4", "patch": "@@ -0,0 +1,9 @@\n+with Inline13_Pkg;\n+\n+package Inline13 is\n+\n+  type Arr is array (Positive range <>) of Inline13_Pkg.T;\n+\n+  function F (L : Arr) return String;\n+\n+end Inline13;"}, {"sha": "61c0f0509078fe7e4719e213f1450611cad48d25", "filename": "gcc/testsuite/gnat.dg/inline13_pkg.adb", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/036a2fa23eae8f57d860bb5e0faf2551e5f3fed4/gcc%2Ftestsuite%2Fgnat.dg%2Finline13_pkg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/036a2fa23eae8f57d860bb5e0faf2551e5f3fed4/gcc%2Ftestsuite%2Fgnat.dg%2Finline13_pkg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Finline13_pkg.adb?ref=036a2fa23eae8f57d860bb5e0faf2551e5f3fed4", "patch": "@@ -0,0 +1,8 @@\n+package body Inline13_Pkg is\n+\n+  function Padded (Value : T) return Padded_T is\n+  begin\n+    return Padded_T(Value);\n+  end Padded;\n+\n+end Inline13_Pkg;"}, {"sha": "814cf80ff2e1e94c4d7a8e50a16b1821f7a4ad08", "filename": "gcc/testsuite/gnat.dg/inline13_pkg.ads", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/036a2fa23eae8f57d860bb5e0faf2551e5f3fed4/gcc%2Ftestsuite%2Fgnat.dg%2Finline13_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/036a2fa23eae8f57d860bb5e0faf2551e5f3fed4/gcc%2Ftestsuite%2Fgnat.dg%2Finline13_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Finline13_pkg.ads?ref=036a2fa23eae8f57d860bb5e0faf2551e5f3fed4", "patch": "@@ -0,0 +1,10 @@\n+package Inline13_Pkg is\n+\n+  subtype Padded_T is String (1..8);\n+\n+  type T is new Padded_T;\n+\n+  function Padded (Value : T) return Padded_T;\n+  pragma Inline_Always (Padded);\n+\n+end Inline13_Pkg;"}]}