{"sha": "634bdae96bb7ff880eeaaf35e6a91e38607a5783", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjM0YmRhZTk2YmI3ZmY4ODBlZWFhZjM1ZTZhOTFlMzg2MDdhNTc4Mw==", "commit": {"author": {"name": "Chung-Ju Wu", "email": "jasonwucj@gmail.com", "date": "2013-12-20T09:02:58Z"}, "committer": {"name": "Chung-Ju Wu", "email": "jasonwucj@gcc.gnu.org", "date": "2013-12-20T09:02:58Z"}, "message": "nds32.h (NDS32_MODE_TYPE_ALIGN): New macro.\n\n2013-12-20  Chung-Ju Wu  <jasonwucj@gmail.com>\n\n\t* config/nds32/nds32.h (NDS32_MODE_TYPE_ALIGN): New macro.\n\t(NDS32_AVAILABLE_REGNUM_FOR_ARG): Use more accurate alignment checking\n\tto determine available register number.\n\t* config/nds32/nds32.c (nds32_needs_double_word_align): Use new\n\tmacro NDS32_MODE_TYPE_ALIGN.\n\t(nds32_function_arg): Refine code layout.\n\nFrom-SVN: r206142", "tree": {"sha": "40049a2907c89ce3b58e3f10402616ae6903e54a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40049a2907c89ce3b58e3f10402616ae6903e54a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/634bdae96bb7ff880eeaaf35e6a91e38607a5783", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/634bdae96bb7ff880eeaaf35e6a91e38607a5783", "html_url": "https://github.com/Rust-GCC/gccrs/commit/634bdae96bb7ff880eeaaf35e6a91e38607a5783", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/634bdae96bb7ff880eeaaf35e6a91e38607a5783/comments", "author": {"login": "jasonwucj", "id": 5520732, "node_id": "MDQ6VXNlcjU1MjA3MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/5520732?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jasonwucj", "html_url": "https://github.com/jasonwucj", "followers_url": "https://api.github.com/users/jasonwucj/followers", "following_url": "https://api.github.com/users/jasonwucj/following{/other_user}", "gists_url": "https://api.github.com/users/jasonwucj/gists{/gist_id}", "starred_url": "https://api.github.com/users/jasonwucj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jasonwucj/subscriptions", "organizations_url": "https://api.github.com/users/jasonwucj/orgs", "repos_url": "https://api.github.com/users/jasonwucj/repos", "events_url": "https://api.github.com/users/jasonwucj/events{/privacy}", "received_events_url": "https://api.github.com/users/jasonwucj/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7920b6d673b95b5c243b37526618d2f436737dfc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7920b6d673b95b5c243b37526618d2f436737dfc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7920b6d673b95b5c243b37526618d2f436737dfc"}], "stats": {"total": 40, "additions": 30, "deletions": 10}, "files": [{"sha": "2301ccbea506c59f9e01afc136f98cc11359fca2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/634bdae96bb7ff880eeaaf35e6a91e38607a5783/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/634bdae96bb7ff880eeaaf35e6a91e38607a5783/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=634bdae96bb7ff880eeaaf35e6a91e38607a5783", "patch": "@@ -1,3 +1,12 @@\n+2013-12-20  Chung-Ju Wu  <jasonwucj@gmail.com>\n+\n+\t* config/nds32/nds32.h (NDS32_MODE_TYPE_ALIGN): New macro.\n+\t(NDS32_AVAILABLE_REGNUM_FOR_ARG): Use more accurate alignment checking\n+\tto determine available register number.\n+\t* config/nds32/nds32.c (nds32_needs_double_word_align): Use new\n+\tmacro NDS32_MODE_TYPE_ALIGN.\n+\t(nds32_function_arg): Refine code layout.\n+\n 2013-12-19  Jeff Law  <law@redhat.com>\n \n \t* doc/invoke.texi: (dump-rtl-ree): Fix typo and clarify ree"}, {"sha": "e7d1dc0b2d9a3f46f5d6cbb8a1d78333bf5d2977", "filename": "gcc/config/nds32/nds32.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/634bdae96bb7ff880eeaaf35e6a91e38607a5783/gcc%2Fconfig%2Fnds32%2Fnds32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/634bdae96bb7ff880eeaaf35e6a91e38607a5783/gcc%2Fconfig%2Fnds32%2Fnds32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.c?ref=634bdae96bb7ff880eeaaf35e6a91e38607a5783", "patch": "@@ -1438,8 +1438,8 @@ nds32_needs_double_word_align (enum machine_mode mode, const_tree type)\n {\n   unsigned int align;\n \n-  /* When 'type' is nonnull, there is no need to look at 'mode'.  */\n-  align = (type ? TYPE_ALIGN (type) : GET_MODE_ALIGNMENT (mode));\n+  /* Pick up the alignment according to the mode or type.  */\n+  align = NDS32_MODE_TYPE_ALIGN (mode, type);\n \n   return (align > PARM_BOUNDARY);\n }\n@@ -1853,10 +1853,10 @@ nds32_function_arg (cumulative_args_t ca, enum machine_mode mode,\n   if (NDS32_ARG_PASS_IN_REG_P (cum->reg_offset, mode, type))\n     {\n       /* Pick up the next available register number.  */\n-      return gen_rtx_REG (mode,\n-\t\t\t  NDS32_AVAILABLE_REGNUM_FOR_ARG (cum->reg_offset,\n-\t\t\t\t\t\t\t  mode,\n-\t\t\t\t\t\t\t  type));\n+      unsigned int regno;\n+\n+      regno = NDS32_AVAILABLE_REGNUM_FOR_ARG (cum->reg_offset, mode, type);\n+      return gen_rtx_REG (mode, regno);\n     }\n   else\n     {"}, {"sha": "1e798e410598275f6c0b3a65e0bc4377acb5b13c", "filename": "gcc/config/nds32/nds32.h", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/634bdae96bb7ff880eeaaf35e6a91e38607a5783/gcc%2Fconfig%2Fnds32%2Fnds32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/634bdae96bb7ff880eeaaf35e6a91e38607a5783/gcc%2Fconfig%2Fnds32%2Fnds32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.h?ref=634bdae96bb7ff880eeaaf35e6a91e38607a5783", "patch": "@@ -126,6 +126,11 @@ enum nds32_16bit_address_type\n #define NDS32_SINGLE_WORD_ALIGN_P(value) (((value) & 0x03) == 0)\n #define NDS32_DOUBLE_WORD_ALIGN_P(value) (((value) & 0x07) == 0)\n \n+/* Get alignment according to mode or type information.\n+   When 'type' is nonnull, there is no need to look at 'mode'.  */\n+#define NDS32_MODE_TYPE_ALIGN(mode, type) \\\n+  (type ? TYPE_ALIGN (type) : GET_MODE_ALIGNMENT (mode))\n+\n /* Round X up to the nearest double word.  */\n #define NDS32_ROUND_UP_DOUBLE_WORD(value)  (((value) + 7) & ~7)\n \n@@ -142,12 +147,18 @@ enum nds32_16bit_address_type\n /* This macro is used to return the register number for passing argument.\n    We need to obey the following rules:\n      1. If it is required MORE THAN one register,\n-        make sure the register number is a even value.\n+        we need to further check if it really needs to be\n+        aligned on double words.\n+          a) If double word alignment is necessary,\n+             the register number must be even value.\n+          b) Otherwise, the register number can be odd or even value.\n      2. If it is required ONLY one register,\n         the register number can be odd or even value.  */\n-#define NDS32_AVAILABLE_REGNUM_FOR_ARG(reg_offset, mode, type) \\\n-  ((NDS32_NEED_N_REGS_FOR_ARG (mode, type) > 1)                \\\n-   ? (((reg_offset) + NDS32_GPR_ARG_FIRST_REGNUM + 1) & ~1)    \\\n+#define NDS32_AVAILABLE_REGNUM_FOR_ARG(reg_offset, mode, type)  \\\n+  ((NDS32_NEED_N_REGS_FOR_ARG (mode, type) > 1)                 \\\n+   ? ((NDS32_MODE_TYPE_ALIGN (mode, type) > PARM_BOUNDARY)      \\\n+      ? (((reg_offset) + NDS32_GPR_ARG_FIRST_REGNUM + 1) & ~1)  \\\n+      : ((reg_offset) + NDS32_GPR_ARG_FIRST_REGNUM))            \\\n    : ((reg_offset) + NDS32_GPR_ARG_FIRST_REGNUM))\n \n /* This macro is to check if there are still available registers"}]}