{"sha": "0746af5e6219d9dabd84aa865a056e4e8ae27c3d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDc0NmFmNWU2MjE5ZDlkYWJkODRhYTg2NWEwNTZlNGU4YWUyN2MzZA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2013-05-26T08:55:43Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2013-05-26T08:55:43Z"}, "message": "gigi.h (make_aligning_type): Adjust prototype.\n\n\t* gcc-interface/gigi.h (make_aligning_type): Adjust prototype.\n\t* gcc-interface/utils.c (make_aligning_type): Take GNAT_NODE parameter\n\tfor the position of the associated TYPE_DECL.\n\t* gcc-interface/decl.c (gnat_to_gnu_entity): Adjust call to above.\n\t* gcc-interface/utils2.c (maybe_wrap_malloc): Likewise.\n\nFrom-SVN: r199337", "tree": {"sha": "2ba96ffba3c3470089ec22f415de86bf5b32226d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ba96ffba3c3470089ec22f415de86bf5b32226d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0746af5e6219d9dabd84aa865a056e4e8ae27c3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0746af5e6219d9dabd84aa865a056e4e8ae27c3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0746af5e6219d9dabd84aa865a056e4e8ae27c3d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0746af5e6219d9dabd84aa865a056e4e8ae27c3d/comments", "author": null, "committer": null, "parents": [{"sha": "3fd7a66fddefe6ea59a42fc1139f715d0e3bb72f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fd7a66fddefe6ea59a42fc1139f715d0e3bb72f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fd7a66fddefe6ea59a42fc1139f715d0e3bb72f"}], "stats": {"total": 27, "additions": 19, "deletions": 8}, "files": [{"sha": "2b31a004dbd59e982dc5ea311ea8f7b898e1d0b7", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0746af5e6219d9dabd84aa865a056e4e8ae27c3d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0746af5e6219d9dabd84aa865a056e4e8ae27c3d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0746af5e6219d9dabd84aa865a056e4e8ae27c3d", "patch": "@@ -1,3 +1,11 @@\n+2013-05-26  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/gigi.h (make_aligning_type): Adjust prototype.\n+\t* gcc-interface/utils.c (make_aligning_type): Take GNAT_NODE parameter\n+\tfor the position of the associated TYPE_DECL.\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity): Adjust call to above.\n+\t* gcc-interface/utils2.c (maybe_wrap_malloc): Likewise.\n+\n 2013-05-26  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (gnat_to_gnu_entity): Do not prematurely"}, {"sha": "2a6eb4dcb4430fcfe8473183ef90350357d5d36d", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0746af5e6219d9dabd84aa865a056e4e8ae27c3d/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0746af5e6219d9dabd84aa865a056e4e8ae27c3d/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=0746af5e6219d9dabd84aa865a056e4e8ae27c3d", "patch": "@@ -1368,7 +1368,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t    tree gnu_new_type\n \t      = make_aligning_type (gnu_type, TYPE_ALIGN (gnu_type),\n \t\t\t\t    TYPE_SIZE_UNIT (gnu_type),\n-\t\t\t\t    BIGGEST_ALIGNMENT, 0);\n+\t\t\t\t    BIGGEST_ALIGNMENT, 0, gnat_entity);\n \t    tree gnu_new_var\n \t      = create_var_decl (create_concat_name (gnat_entity, \"ALIGN\"),\n \t\t\t\t NULL_TREE, gnu_new_type, NULL_TREE, false,"}, {"sha": "a95b867eb8d46148ffac29dfd82510fc201c079b", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0746af5e6219d9dabd84aa865a056e4e8ae27c3d/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0746af5e6219d9dabd84aa865a056e4e8ae27c3d/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=0746af5e6219d9dabd84aa865a056e4e8ae27c3d", "patch": "@@ -123,9 +123,10 @@ extern bool is_cplusplus_method (Entity_Id gnat_entity);\n /* Create a record type that contains a SIZE bytes long field of TYPE with a\n     starting bit position so that it is aligned to ALIGN bits, and leaving at\n     least ROOM bytes free before the field.  BASE_ALIGN is the alignment the\n-    record is guaranteed to get.  */\n+    record is guaranteed to get.  GNAT_NODE is used for the position of the\n+    associated TYPE_DECL.  */\n extern tree make_aligning_type (tree type, unsigned int align, tree size,\n-\t\t\t\tunsigned int base_align, int room);\n+\t\t\t\tunsigned int base_align, int room, Node_Id);\n \n /* TYPE is a RECORD_TYPE, UNION_TYPE or QUAL_UNION_TYPE that is being used\n    as the field type of a packed record if IN_RECORD is true, or as the"}, {"sha": "eb63257ec369df5ad360c1c08bb08d1b0ce5f6d4", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0746af5e6219d9dabd84aa865a056e4e8ae27c3d/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0746af5e6219d9dabd84aa865a056e4e8ae27c3d/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=0746af5e6219d9dabd84aa865a056e4e8ae27c3d", "patch": "@@ -653,11 +653,12 @@ gnat_pushdecl (tree decl, Node_Id gnat_node)\n /* Create a record type that contains a SIZE bytes long field of TYPE with a\n    starting bit position so that it is aligned to ALIGN bits, and leaving at\n    least ROOM bytes free before the field.  BASE_ALIGN is the alignment the\n-   record is guaranteed to get.  */\n+   record is guaranteed to get.  GNAT_NODE is used for the position of the\n+   associated TYPE_DECL.  */\n \n tree\n make_aligning_type (tree type, unsigned int align, tree size,\n-\t\t    unsigned int base_align, int room)\n+\t\t    unsigned int base_align, int room, Node_Id gnat_node)\n {\n   /* We will be crafting a record type with one field at a position set to be\n      the next multiple of ALIGN past record'address + room bytes.  We use a\n@@ -739,7 +740,7 @@ make_aligning_type (tree type, unsigned int align, tree size,\n \n   /* Declare it now since it will never be declared otherwise.  This is\n      necessary to ensure that its subtrees are properly marked.  */\n-  create_type_decl (name, record_type, NULL, true, false, Empty);\n+  create_type_decl (name, record_type, NULL, true, false, gnat_node);\n \n   return record_type;\n }"}, {"sha": "3f39a43269606051a1f55a2f616a886cfe01bc00", "filename": "gcc/ada/gcc-interface/utils2.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0746af5e6219d9dabd84aa865a056e4e8ae27c3d/gcc%2Fada%2Fgcc-interface%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0746af5e6219d9dabd84aa865a056e4e8ae27c3d/gcc%2Fada%2Fgcc-interface%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils2.c?ref=0746af5e6219d9dabd84aa865a056e4e8ae27c3d", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *          Copyright (C) 1992-2012, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 1992-2013, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -2101,7 +2101,8 @@ maybe_wrap_malloc (tree data_size, tree data_type, Node_Id gnat_node)\n     = ((data_align > system_allocator_alignment)\n        ? make_aligning_type (data_type, data_align, data_size,\n \t\t\t     system_allocator_alignment,\n-\t\t\t     POINTER_SIZE / BITS_PER_UNIT)\n+\t\t\t     POINTER_SIZE / BITS_PER_UNIT,\n+\t\t\t     gnat_node)\n        : NULL_TREE);\n \n   tree size_to_malloc"}]}