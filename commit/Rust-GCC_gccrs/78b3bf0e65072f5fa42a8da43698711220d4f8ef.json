{"sha": "78b3bf0e65072f5fa42a8da43698711220d4f8ef", "node_id": "C_kwDOANBUbNoAKDc4YjNiZjBlNjUwNzJmNWZhNDJhOGRhNDM2OTg3MTEyMjBkNGY4ZWY", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2023-03-16T19:35:15Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2023-03-16T22:11:23Z"}, "message": "c++: __func__ and local class DMI [PR105809]\n\nAs in 108242, we need to instantiate in the context of the enclosing\nfunction, not after it's gone.\n\n\tPR c++/105809\n\ngcc/cp/ChangeLog:\n\n\t* init.cc (get_nsdmi): Split out...\n\t(maybe_instantiate_nsdmi_init): ...this function.\n\t* cp-tree.h: Declare it.\n\t* pt.cc (tsubst_expr): Use it.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/constexpr-__func__3.C: New test.", "tree": {"sha": "ecea317882f2a2aabf98beb27838d6e6e6cbc6d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ecea317882f2a2aabf98beb27838d6e6e6cbc6d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78b3bf0e65072f5fa42a8da43698711220d4f8ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78b3bf0e65072f5fa42a8da43698711220d4f8ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78b3bf0e65072f5fa42a8da43698711220d4f8ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78b3bf0e65072f5fa42a8da43698711220d4f8ef/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b323f52ccf966800297b0520b9e1d4b3951db525", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b323f52ccf966800297b0520b9e1d4b3951db525", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b323f52ccf966800297b0520b9e1d4b3951db525"}], "stats": {"total": 49, "additions": 40, "deletions": 9}, "files": [{"sha": "b74c18b03ad6766b72e4fdefb936b1cf9a91f4f5", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b3bf0e65072f5fa42a8da43698711220d4f8ef/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b3bf0e65072f5fa42a8da43698711220d4f8ef/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=78b3bf0e65072f5fa42a8da43698711220d4f8ef", "patch": "@@ -7086,6 +7086,7 @@ extern bool is_copy_initialization\t\t(tree);\n extern tree build_zero_init\t\t\t(tree, tree, bool);\n extern tree build_value_init\t\t\t(tree, tsubst_flags_t);\n extern tree build_value_init_noctor\t\t(tree, tsubst_flags_t);\n+extern tree maybe_instantiate_nsdmi_init\t(tree, tsubst_flags_t);\n extern tree get_nsdmi\t\t\t\t(tree, bool, tsubst_flags_t);\n extern tree build_offset_ref\t\t\t(tree, tree, bool,\n \t\t\t\t\t\t tsubst_flags_t);"}, {"sha": "90302372340ec981a9cbd05b846e893bae7f0089", "filename": "gcc/cp/init.cc", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b3bf0e65072f5fa42a8da43698711220d4f8ef/gcc%2Fcp%2Finit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b3bf0e65072f5fa42a8da43698711220d4f8ef/gcc%2Fcp%2Finit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.cc?ref=78b3bf0e65072f5fa42a8da43698711220d4f8ef", "patch": "@@ -561,18 +561,16 @@ perform_target_ctor (tree init)\n   return init;\n }\n \n-/* Return the non-static data initializer for FIELD_DECL MEMBER.  */\n+/* Instantiate the default member initializer of MEMBER, if needed.\n+   Only get_nsdmi should use the return value of this function.  */\n \n static GTY((cache)) decl_tree_cache_map *nsdmi_inst;\n \n tree\n-get_nsdmi (tree member, bool in_ctor, tsubst_flags_t complain)\n+maybe_instantiate_nsdmi_init (tree member, tsubst_flags_t complain)\n {\n-  tree init;\n-  tree save_ccp = current_class_ptr;\n-  tree save_ccr = current_class_ref;\n-  \n-  if (DECL_LANG_SPECIFIC (member) && DECL_TEMPLATE_INFO (member))\n+  tree init = DECL_INITIAL (member);\n+  if (init && DECL_LANG_SPECIFIC (member) && DECL_TEMPLATE_INFO (member))\n     {\n       init = DECL_INITIAL (DECL_TI_TEMPLATE (member));\n       location_t expr_loc\n@@ -642,8 +640,19 @@ get_nsdmi (tree member, bool in_ctor, tsubst_flags_t complain)\n \t  input_location = sloc;\n \t}\n     }\n-  else\n-    init = DECL_INITIAL (member);\n+\n+  return init;\n+}\n+\n+/* Return the non-static data initializer for FIELD_DECL MEMBER.  */\n+\n+tree\n+get_nsdmi (tree member, bool in_ctor, tsubst_flags_t complain)\n+{\n+  tree save_ccp = current_class_ptr;\n+  tree save_ccr = current_class_ref;\n+\n+  tree init = maybe_instantiate_nsdmi_init (member, complain);\n \n   if (init && TREE_CODE (init) == DEFERRED_PARSE)\n     {"}, {"sha": "056b8c7abad90912e0ab0f5ef1d5cd49f95eb572", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b3bf0e65072f5fa42a8da43698711220d4f8ef/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b3bf0e65072f5fa42a8da43698711220d4f8ef/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=78b3bf0e65072f5fa42a8da43698711220d4f8ef", "patch": "@@ -19353,13 +19353,19 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t  /* Closures are handled by the LAMBDA_EXPR.  */\n \t  gcc_assert (!LAMBDA_TYPE_P (TREE_TYPE (t)));\n \t  complete_type (tmp);\n+\t  tree save_ccp = current_class_ptr;\n+\t  tree save_ccr = current_class_ref;\n \t  for (tree fld = TYPE_FIELDS (tmp); fld; fld = DECL_CHAIN (fld))\n \t    if ((VAR_P (fld)\n \t\t || (TREE_CODE (fld) == FUNCTION_DECL\n \t\t     && !DECL_ARTIFICIAL (fld)))\n \t\t&& DECL_TEMPLATE_INSTANTIATION (fld))\n \t      instantiate_decl (fld, /*defer_ok=*/false,\n \t\t\t\t/*expl_inst_class=*/false);\n+\t    else if (TREE_CODE (fld) == FIELD_DECL)\n+\t      maybe_instantiate_nsdmi_init (fld, tf_warning_or_error);\n+\t  current_class_ptr = save_ccp;\n+\t  current_class_ref = save_ccr;\n \t}\n       break;\n "}, {"sha": "365a4e00c5f694a950354aecfd5b8c58949885c2", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-__func__3.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b3bf0e65072f5fa42a8da43698711220d4f8ef/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-__func__3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b3bf0e65072f5fa42a8da43698711220d4f8ef/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-__func__3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-__func__3.C?ref=78b3bf0e65072f5fa42a8da43698711220d4f8ef", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/105809\n+// { dg-do compile { target c++11 } }\n+\n+template<typename ss> void hh() {  ss t; }\n+\n+template<int>\n+int f(void)\n+{\n+    constexpr char const* cc = __func__;\n+    struct j{  char const* kk=cc; };\n+    hh<j>();\n+    return 0;\n+}\n+\n+int t = f<1>();"}]}