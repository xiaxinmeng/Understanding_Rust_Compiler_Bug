{"sha": "495f8c142d35e9625b4fde802cfbdadadb0c6abf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDk1ZjhjMTQyZDM1ZTk2MjViNGZkZTgwMmNmYmRhZGFkYjBjNmFiZg==", "commit": {"author": {"name": "Kaushik Phatak", "email": "kaushik.phatak@kpitcummins.com", "date": "2011-06-13T09:31:41Z"}, "committer": {"name": "Kaushik Phatak", "email": "kaushikp@gcc.gnu.org", "date": "2011-06-13T09:31:41Z"}, "message": "h8300.md (bsetqi_msx, [...]): Added condition to disallow non-identical memory locations.\n\n\t* config/h8300/h8300.md (bsetqi_msx, bclrqi_msx, bnotqi_msx): Added \n\tcondition to disallow non-identical memory locations.\n\t(*andqi3_2, andqi3_1, iorqi3_1, xorqi3_1): Reorder insn to give\n\tpreference to bit manipulation instructions.\n\t* gcc.dg/h8300-bit-insn-ice2.2: New testcase.\n\nFrom-SVN: r174986", "tree": {"sha": "c5b34019bf1c8c216c1095e990be7dac6bcc331d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5b34019bf1c8c216c1095e990be7dac6bcc331d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/495f8c142d35e9625b4fde802cfbdadadb0c6abf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/495f8c142d35e9625b4fde802cfbdadadb0c6abf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/495f8c142d35e9625b4fde802cfbdadadb0c6abf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/495f8c142d35e9625b4fde802cfbdadadb0c6abf/comments", "author": null, "committer": null, "parents": [{"sha": "9aa3f5c58c228ee74b8a2d9b3977fee1c97cc6bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9aa3f5c58c228ee74b8a2d9b3977fee1c97cc6bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9aa3f5c58c228ee74b8a2d9b3977fee1c97cc6bd"}], "stats": {"total": 106, "additions": 76, "deletions": 30}, "files": [{"sha": "5d25bab88d92a05c4b37864d0aa2b9dde3c8c60e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/495f8c142d35e9625b4fde802cfbdadadb0c6abf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/495f8c142d35e9625b4fde802cfbdadadb0c6abf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=495f8c142d35e9625b4fde802cfbdadadb0c6abf", "patch": "@@ -1,3 +1,11 @@\n+2011-06-13  Kaushik Phatak <kaushik.phatak@kpitcummins.com>\n+\n+\t* config/h8300/h8300.md (bsetqi_msx, bclrqi_msx, bnotqi_msx): Added \n+\tcondition to disallow non-identical memory locations.\n+\t(*andqi3_2, andqi3_1, iorqi3_1, xorqi3_1): Reorder insn to give\n+\tpreference to bit manipulation instructions.\n+\t* gcc.dg/h8300-bit-insn-ice2.2: New testcase.\n+\n 2011-06-13  Jan Hubicka  <jh@suse.cz>\n \n \t* cgraph.c (cgraph_for_node_thunks_and_aliases,"}, {"sha": "db56e20cbbe436d63baadc9b795257faef196a0f", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 38, "deletions": 30, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/495f8c142d35e9625b4fde802cfbdadadb0c6abf/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/495f8c142d35e9625b4fde802cfbdadadb0c6abf/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=495f8c142d35e9625b4fde802cfbdadadb0c6abf", "patch": "@@ -1767,7 +1767,8 @@\n   [(set (match_operand:QI 0 \"bit_register_indirect_operand\" \"=WU\")\n \t(and:QI (match_operand:QI 1 \"bit_register_indirect_operand\" \"%0\")\n \t\t(match_operand:QI 2 \"single_zero_operand\" \"Y0\")))]\n-  \"TARGET_H8300SX\"\n+  \"TARGET_H8300SX\n+   && rtx_equal_p(operands[0], operands[1])\"\n   \"bclr\\\\t%W2,%0\"\n   [(set_attr \"length\" \"8\")])\n \n@@ -1800,29 +1801,31 @@\n   \"TARGET_H8300SX\"\n   \"bclr\\\\t%W2,%0\"\n   [(set_attr \"length\" \"8\")])\n+\n (define_insn \"*andqi3_2\"\n-  [(set (match_operand:QI 0 \"bit_operand\" \"=rQ,r\")\n-\t(and:QI (match_operand:QI 1 \"bit_operand\" \"%0,WU\")\n-\t\t(match_operand:QI 2 \"h8300_src_operand\" \"rQi,IP1>X\")))]\n+  [(set (match_operand:QI 0 \"bit_operand\" \"=U,rQ,r\")\n+\t(and:QI (match_operand:QI 1 \"bit_operand\" \"%0,0,WU\")\n+\t\t(match_operand:QI 2 \"h8300_src_operand\" \"Y0,rQi,IP1>X\")))]\n   \"TARGET_H8300SX\"\n   \"@\n-   and\t%X2,%X0\n-   bfld\t%2,%1,%R0\"\n-  [(set_attr \"length\" \"*,8\")\n-   (set_attr \"length_table\" \"logicb,*\")\n-   (set_attr \"cc\" \"set_znv,none_0hit\")])\n+   bclr\\\\t %W2,%R0\n+   and  %X2,%X0\n+   bfld %2,%1,%R0\"\n+  [(set_attr \"length\" \"8,*,8\")\n+   (set_attr \"length_table\" \"*,logicb,*\")\n+   (set_attr \"cc\" \"none_0hit,set_znv,none_0hit\")])\n \n (define_insn \"andqi3_1\"\n-  [(set (match_operand:QI 0 \"bit_operand\" \"=r,U\")\n+  [(set (match_operand:QI 0 \"bit_operand\" \"=U,r\")\n \t(and:QI (match_operand:QI 1 \"bit_operand\" \"%0,0\")\n-\t\t(match_operand:QI 2 \"h8300_src_operand\" \"rn,n\")))]\n+\t\t(match_operand:QI 2 \"h8300_src_operand\" \"Y0,rn\")))]\n   \"register_operand (operands[0], QImode)\n    || single_zero_operand (operands[2], QImode)\"\n   \"@\n-   and\t%X2,%X0\n-   bclr\t%W2,%R0\"\n+   bclr %W2,%R0\n+   and  %X2,%X0\"\n   [(set_attr \"length\" \"2,8\")\n-   (set_attr \"cc\" \"set_znv,none_0hit\")])\n+   (set_attr \"cc\" \"none_0hit,set_znv\")])\n \n (define_expand \"andqi3\"\n   [(set (match_operand:QI 0 \"register_operand\" \"\")\n@@ -1903,11 +1906,13 @@\n ;; ----------------------------------------------------------------------\n ;; OR INSTRUCTIONS\n ;; ----------------------------------------------------------------------\n+\n (define_insn \"bsetqi_msx\"\n   [(set (match_operand:QI 0 \"bit_register_indirect_operand\" \"=WU\")\n \t(ior:QI (match_operand:QI 1 \"bit_register_indirect_operand\" \"%0\")\n \t\t(match_operand:QI 2 \"single_one_operand\" \"Y2\")))]\n-  \"TARGET_H8300SX\" \n+  \"TARGET_H8300SX\n+   && rtx_equal_p(operands[0], operands[1])\"\n   \"bset\\\\t%V2,%0\"\n   [(set_attr \"length\" \"8\")])\n \n@@ -1942,17 +1947,18 @@\n   [(set_attr \"length\" \"8\")])\n \n (define_insn \"iorqi3_1\"\n-  [(set (match_operand:QI 0 \"bit_operand\" \"=rQ,U\")\n+  [(set (match_operand:QI 0 \"bit_operand\" \"=U,rQ\")\n \t(ior:QI (match_operand:QI 1 \"bit_operand\" \"%0,0\")\n-\t\t(match_operand:QI 2 \"h8300_src_operand\" \"rQi,n\")))]\n+\t\t(match_operand:QI 2 \"h8300_src_operand\" \"Y2,rQi\")))]\n   \"TARGET_H8300SX || register_operand (operands[0], QImode)\n    || single_one_operand (operands[2], QImode)\"\n   \"@\n-   or\\\\t%X2,%X0\n-   bset\\\\t%V2,%R0\"\n-  [(set_attr \"length\" \"*,8\")\n-   (set_attr \"length_table\" \"logicb,*\")\n-   (set_attr \"cc\" \"set_znv,none_0hit\")])\n+   bset\\\\t%V2,%R0\n+   or\\\\t%X2,%X0\"\n+  [(set_attr \"length\" \"8,*\")\n+   (set_attr \"length_table\" \"*,logicb\")\n+   (set_attr \"cc\" \"none_0hit,set_znv\")])\n+\n \n (define_expand \"iorqi3\"\n   [(set (match_operand:QI 0 \"register_operand\" \"\")\n@@ -1982,7 +1988,8 @@\n   [(set (match_operand:QI 0 \"bit_register_indirect_operand\" \"=WU\")\n \t(xor:QI (match_operand:QI 1 \"bit_register_indirect_operand\" \"%0\")\n \t\t(match_operand:QI 2 \"single_one_operand\" \"Y2\")))]\n-  \"TARGET_H8300SX\"\n+  \"TARGET_H8300SX\n+   && rtx_equal_p(operands[0], operands[1])\"\n   \"bnot\\\\t%V2,%0\"\n   [(set_attr \"length\" \"8\")])\n \n@@ -2017,17 +2024,18 @@\n   [(set_attr \"length\" \"8\")])\n \n (define_insn \"xorqi3_1\"\n-  [(set (match_operand:QI 0 \"bit_operand\" \"=r,U\")\n+  [(set (match_operand:QI 0 \"bit_operand\" \"=U,r\")\n \t(xor:QI (match_operand:QI 1 \"bit_operand\" \"%0,0\")\n-\t\t(match_operand:QI 2 \"h8300_src_operand\" \"rQi,n\")))]\n+\t\t(match_operand:QI 2 \"h8300_src_operand\" \"Y2,rQi\")))]\n   \"TARGET_H8300SX || register_operand (operands[0], QImode)\n    || single_one_operand (operands[2], QImode)\"\n   \"@\n-   xor\\\\t%X2,%X0\n-   bnot\\\\t%V2,%R0\"\n-  [(set_attr \"length\" \"*,8\")\n-   (set_attr \"length_table\" \"logicb,*\")\n-   (set_attr \"cc\" \"set_znv,none_0hit\")])\n+   bnot\\\\t%V2,%R0\n+   xor\\\\t%X2,%X0\"\n+  [(set_attr \"length\" \"8,*\")\n+   (set_attr \"length_table\" \"*,logicb\")\n+   (set_attr \"cc\" \"none_0hit,set_znv\")])\n+\n \n (define_expand \"xorqi3\"\n   [(set (match_operand:QI 0 \"register_operand\" \"\")"}, {"sha": "ea9e8b385b1a14df0788447e58a5fba920607620", "filename": "gcc/testsuite/gcc.dg/h8300-bit-insn-ice2.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/495f8c142d35e9625b4fde802cfbdadadb0c6abf/gcc%2Ftestsuite%2Fgcc.dg%2Fh8300-bit-insn-ice2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/495f8c142d35e9625b4fde802cfbdadadb0c6abf/gcc%2Ftestsuite%2Fgcc.dg%2Fh8300-bit-insn-ice2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fh8300-bit-insn-ice2.c?ref=495f8c142d35e9625b4fde802cfbdadadb0c6abf", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-skip-if \"\" { \"h8300*-*-*\" } \"*\" \"-msx*\" }  */\n+/* { dg-options \"-O2\" } */\n+/* ICE for bit instruction generation using 16-bit const */\n+\n+#define MSTPCRA (*(volatile unsigned char*)0xFFFFC9)\n+#define MSTPCRA2 (*(volatile unsigned char*)0xFFFDC8)\n+\n+int\n+main (void)\n+{\n+  MSTPCRA = MSTPCRA2 & ~0x01;\n+  MSTPCRA = MSTPCRA2 ^ ~0xFE;\n+  MSTPCRA = MSTPCRA2 | ~0xFE;\n+  return 0;\n+}\n+/* { dg-skip-if \"\" { \"h8300*-*-*\" } \"*\" \"-msx*\" }  */\n+/* { dg-options \"-O2\" } */\n+/* ICE for bit instruction generation using 16-bit const */\n+\n+#define MSTPCRA (*(volatile unsigned char*)0xFFFFC9)\n+#define MSTPCRA2 (*(volatile unsigned char*)0xFFFDC8)\n+\n+int\n+main (void)\n+{\n+  MSTPCRA = MSTPCRA2 & ~0x01;\n+  MSTPCRA = MSTPCRA2 ^ ~0xFE;\n+  MSTPCRA = MSTPCRA2 | ~0xFE;\n+  return 0;\n+}"}]}