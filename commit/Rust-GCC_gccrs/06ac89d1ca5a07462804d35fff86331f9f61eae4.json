{"sha": "06ac89d1ca5a07462804d35fff86331f9f61eae4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDZhYzg5ZDFjYTVhMDc0NjI4MDRkMzVmZmY4NjMzMWY5ZjYxZWFlNA==", "commit": {"author": {"name": "Sebastian Pop", "email": "pop@cri.ensmp.fr", "date": "2006-05-29T16:01:16Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2006-05-29T16:01:16Z"}, "message": "re PR tree-optimization/27745 (ICE in execute_todo with -O2 -ftree-loop-linear)\n\n\tPR middle-end/27745\n\t* lambda-code.c (perfect_nestify): Don't copy statements\n\tin the inner loop: move them to the inner loop header.\n\nFrom-SVN: r114205", "tree": {"sha": "f060596743742d0cae12cca2eeb0302483bd36ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f060596743742d0cae12cca2eeb0302483bd36ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06ac89d1ca5a07462804d35fff86331f9f61eae4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06ac89d1ca5a07462804d35fff86331f9f61eae4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06ac89d1ca5a07462804d35fff86331f9f61eae4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06ac89d1ca5a07462804d35fff86331f9f61eae4/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96e360963381870a4c87c6bbcc918eb65a48bc90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96e360963381870a4c87c6bbcc918eb65a48bc90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96e360963381870a4c87c6bbcc918eb65a48bc90"}], "stats": {"total": 48, "additions": 13, "deletions": 35}, "files": [{"sha": "dc310f69498892f1bfafb5bfb6bb833101174e08", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06ac89d1ca5a07462804d35fff86331f9f61eae4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06ac89d1ca5a07462804d35fff86331f9f61eae4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=06ac89d1ca5a07462804d35fff86331f9f61eae4", "patch": "@@ -1,3 +1,9 @@\n+2006-05-29  Sebastian Pop  <pop@cri.ensmp.fr>\n+\n+\tPR middle-end/27745\n+\t* lambda-code.c (perfect_nestify): Don't copy statements\n+\tin the inner loop: move them to the inner loop header.\n+\n 2006-05-29  Diego Novillo  <dnovillo@redhat.com>\n \n \tPR 26237"}, {"sha": "2a03fd31cd57516a759a1b04f74b801d21725c33", "filename": "gcc/lambda-code.c", "status": "modified", "additions": 7, "deletions": 35, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06ac89d1ca5a07462804d35fff86331f9f61eae4/gcc%2Flambda-code.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06ac89d1ca5a07462804d35fff86331f9f61eae4/gcc%2Flambda-code.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flambda-code.c?ref=06ac89d1ca5a07462804d35fff86331f9f61eae4", "patch": "@@ -2506,50 +2506,22 @@ perfect_nestify (struct loops *loops,\n \n \t  if (dominated_by_p (CDI_DOMINATORS, loop->inner->header, bbs[i]))\n \t    {\n-\t      for (bsi = bsi_last (bbs[i]); !bsi_end_p (bsi);)\n+\t      block_stmt_iterator header_bsi \n+\t\t= bsi_after_labels (loop->inner->header);\n+\n+\t      for (bsi = bsi_start (bbs[i]); !bsi_end_p (bsi);)\n \t\t{ \n-\t\t  use_operand_p use_p;\n-\t\t  imm_use_iterator imm_iter;\n-\t\t  tree imm_stmt;\n \t\t  tree stmt = bsi_stmt (bsi);\n \n \t\t  if (stmt == exit_condition\n \t\t      || not_interesting_stmt (stmt)\n \t\t      || stmt_is_bumper_for_loop (loop, stmt))\n \t\t    {\n-\t\t      if (!bsi_end_p (bsi))\n-\t\t\tbsi_prev (&bsi);\n+\t\t      bsi_next (&bsi);\n \t\t      continue;\n \t\t    }\n-\t\t  \n-\t\t  /* Make copies of this statement to put it back next\n-\t\t     to its uses.  */\n-\t\t  FOR_EACH_IMM_USE_STMT (imm_stmt, imm_iter, \n-\t\t\t\t\t TREE_OPERAND (stmt, 0))\n-\t\t    {\n-\t\t      if (!exit_phi_for_loop_p (loop->inner, imm_stmt))\n-\t\t\t{\n-\t\t\t  block_stmt_iterator tobsi;\n-\t\t\t  tree newname;\n-\t\t\t  tree newstmt;\n-\t\t\t \n-\t\t\t  newstmt  = unshare_expr (stmt);\n-\t\t\t  tobsi = bsi_after_labels (bb_for_stmt (imm_stmt));\n-\t\t\t  newname = TREE_OPERAND (newstmt, 0);\n-\t\t\t  newname = SSA_NAME_VAR (newname);\n-\t\t\t  newname = make_ssa_name (newname, newstmt);\n-\t\t\t  TREE_OPERAND (newstmt, 0) = newname;\n-\n-\t\t\t  FOR_EACH_IMM_USE_ON_STMT (use_p, imm_iter)\n-\t\t\t    SET_USE (use_p, newname);\n-\n-\t\t\t  bsi_insert_before (&tobsi, newstmt, BSI_SAME_STMT);\n-\t\t\t  update_stmt (newstmt);\n-\t\t\t  update_stmt (imm_stmt);\n-\t\t\t} \n-\t\t    }\n-\t\t  if (!bsi_end_p (bsi))\n-\t\t    bsi_prev (&bsi);\t\t\t  \n+\n+\t\t  bsi_move_before (&bsi, &header_bsi);\n \t\t}\n \t    }\n \t  else"}]}