{"sha": "39d78b3210ddc3b77f57678998431773333c4f55", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzlkNzhiMzIxMGRkYzNiNzdmNTc2Nzg5OTg0MzE3NzMzMzNjNGY1NQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-06-09T21:15:48Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-06-09T21:15:48Z"}, "message": "(check_float_value): Underflow and overflow constants are different\nfor FLOAT_VAX and default targets.\n\nFrom-SVN: r14190", "tree": {"sha": "bed86d524b08ec26cdfbbcaf8ac050c07b97b697", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bed86d524b08ec26cdfbbcaf8ac050c07b97b697"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39d78b3210ddc3b77f57678998431773333c4f55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39d78b3210ddc3b77f57678998431773333c4f55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39d78b3210ddc3b77f57678998431773333c4f55", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39d78b3210ddc3b77f57678998431773333c4f55/comments", "author": null, "committer": null, "parents": [{"sha": "9a8fde947ceb5dcde0debda60ae949f08de72a99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a8fde947ceb5dcde0debda60ae949f08de72a99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a8fde947ceb5dcde0debda60ae949f08de72a99"}], "stats": {"total": 34, "additions": 22, "deletions": 12}, "files": [{"sha": "df888311fd4040b5df258b2ba6c62d64800fa7da", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39d78b3210ddc3b77f57678998431773333c4f55/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39d78b3210ddc3b77f57678998431773333c4f55/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=39d78b3210ddc3b77f57678998431773333c4f55", "patch": "@@ -2959,13 +2959,20 @@ final_prescan_insn (insn, opvec, noperands)\n \n static char *float_strings[] =\n {\n+  /* These are for FLOAT_VAX.  */\n    \"1.70141173319264430e+38\", /* 2^127 (2^24 - 1) / 2^24 */\n   \"-1.70141173319264430e+38\",\n    \"2.93873587705571877e-39\", /* 2^-128 */\n-  \"-2.93873587705571877e-39\"\n+  \"-2.93873587705571877e-39\",\n+  /* These are for the default broken IEEE mode, which traps\n+     on infinity or denormal numbers.  */\n+   \"3.402823466385288598117e+38\", /* 2^128 (1 - 2^-24) */\n+  \"-3.402823466385288598117e+38\",\n+   \"1.1754943508222875079687e-38\", /* 2^-126 */\n+  \"-1.1754943508222875079687e-38\",\n };\n \n-static REAL_VALUE_TYPE float_values[4];\n+static REAL_VALUE_TYPE float_values[8];\n static int inited_float_values = 0;\n \n int\n@@ -2978,13 +2985,10 @@ check_float_value (mode, d, overflow)\n   if (TARGET_IEEE || TARGET_IEEE_CONFORMANT || TARGET_IEEE_WITH_INEXACT)\n     return 0;\n \n-  if (TARGET_FLOAT_VAX)\n-    return 0;\n-\n   if (inited_float_values == 0)\n     {\n       int i;\n-      for (i = 0; i < 4; i++)\n+      for (i = 0; i < 8; i++)\n \tfloat_values[i] = REAL_VALUE_ATOF (float_strings[i], DFmode);\n \n       inited_float_values = 1;\n@@ -2993,28 +2997,34 @@ check_float_value (mode, d, overflow)\n   if (mode == SFmode)\n     {\n       REAL_VALUE_TYPE r;\n+      REAL_VALUE_TYPE *fvptr;\n+\n+      if (TARGET_FLOAT_VAX)\n+\tfvptr = &float_values[0];\n+      else\n+\tfvptr = &float_values[4];\n \n       bcopy ((char *) d, (char *) &r, sizeof (REAL_VALUE_TYPE));\n-      if (REAL_VALUES_LESS (float_values[0], r))\n+      if (REAL_VALUES_LESS (fvptr[0], r))\n \t{\n-\t  bcopy ((char *) &float_values[0], (char *) d,\n+\t  bcopy ((char *) &fvptr[0], (char *) d,\n \t\t sizeof (REAL_VALUE_TYPE));\n \t  return 1;\n \t}\n-      else if (REAL_VALUES_LESS (r, float_values[1]))\n+      else if (REAL_VALUES_LESS (r, fvptr[1]))\n \t{\n-\t  bcopy ((char *) &float_values[1], (char *) d,\n+\t  bcopy ((char *) &fvptr[1], (char *) d,\n \t\t sizeof (REAL_VALUE_TYPE));\n \t  return 1;\n \t}\n       else if (REAL_VALUES_LESS (dconst0, r)\n-\t\t&& REAL_VALUES_LESS (r, float_values[2]))\n+\t\t&& REAL_VALUES_LESS (r, fvptr[2]))\n \t{\n \t  bcopy ((char *) &dconst0, (char *) d, sizeof (REAL_VALUE_TYPE));\n \t  return 1;\n \t}\n       else if (REAL_VALUES_LESS (r, dconst0)\n-\t\t&& REAL_VALUES_LESS (float_values[3], r))\n+\t\t&& REAL_VALUES_LESS (fvptr[3], r))\n \t{\n \t  bcopy ((char *) &dconst0, (char *) d, sizeof (REAL_VALUE_TYPE));\n \t  return 1;"}]}