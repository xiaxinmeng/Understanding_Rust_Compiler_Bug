{"sha": "1dba29f845a7dfa3f87bc9fb7040648b3cd68082", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWRiYTI5Zjg0NWE3ZGZhM2Y4N2JjOWZiNzA0MDY0OGIzY2Q2ODA4Mg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-05-26T15:00:02Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-05-26T15:00:02Z"}, "message": "re PR c++/43382 ([C++0x] ICE with auto return type and variadic templates)\n\n\tPR c++/43382\n\t* pt.c (fn_type_unification): Don't get confused by recursive\n\tunification.\n\nFrom-SVN: r159873", "tree": {"sha": "464cbb3fde1e5d57ad0f017c94fa0a94951213a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/464cbb3fde1e5d57ad0f017c94fa0a94951213a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1dba29f845a7dfa3f87bc9fb7040648b3cd68082", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dba29f845a7dfa3f87bc9fb7040648b3cd68082", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1dba29f845a7dfa3f87bc9fb7040648b3cd68082", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dba29f845a7dfa3f87bc9fb7040648b3cd68082/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c3a026475c9a80f606084dad5a6b3d457d243b09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3a026475c9a80f606084dad5a6b3d457d243b09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3a026475c9a80f606084dad5a6b3d457d243b09"}], "stats": {"total": 64, "additions": 51, "deletions": 13}, "files": [{"sha": "3ad1aaff5c0618079d1e63e6c6f8fe5319f72b99", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dba29f845a7dfa3f87bc9fb7040648b3cd68082/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dba29f845a7dfa3f87bc9fb7040648b3cd68082/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1dba29f845a7dfa3f87bc9fb7040648b3cd68082", "patch": "@@ -1,3 +1,9 @@\n+2010-05-26  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/43382\n+\t* pt.c (fn_type_unification): Don't get confused by recursive\n+\tunification.\n+\n 2010-05-26  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* cp-lang.c: Do not include expr.h."}, {"sha": "fd34d9fca7042c881886132247667ba9fdcc1381", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dba29f845a7dfa3f87bc9fb7040648b3cd68082/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dba29f845a7dfa3f87bc9fb7040648b3cd68082/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=1dba29f845a7dfa3f87bc9fb7040648b3cd68082", "patch": "@@ -8251,7 +8251,7 @@ tsubst_pack_expansion (tree t, tree args, tsubst_flags_t complain,\n   int i, len = -1;\n   tree result;\n   int incomplete = 0;\n-  bool very_local_specializations = false;\n+  htab_t saved_local_specializations = NULL;\n \n   gcc_assert (PACK_EXPANSION_P (t));\n   pattern = PACK_EXPANSION_PATTERN (t);\n@@ -8269,13 +8269,15 @@ tsubst_pack_expansion (tree t, tree args, tsubst_flags_t complain,\n \n       if (TREE_CODE (parm_pack) == PARM_DECL)\n \t{\n-\t  arg_pack = retrieve_local_specialization (parm_pack);\n-\t  if (arg_pack == NULL_TREE)\n+\t  if (!cp_unevaluated_operand)\n+\t    arg_pack = retrieve_local_specialization (parm_pack);\n+\t  else\n \t    {\n-\t      /* This can happen for a parameter name used later in a function\n-\t\t declaration (such as in a late-specified return type).  Just\n-\t\t make a dummy decl, since it's only used for its type.  */\n-\t      gcc_assert (cp_unevaluated_operand != 0);\n+\t      /* We can't rely on local_specializations for a parameter\n+\t\t name used later in a function declaration (such as in a\n+\t\t late-specified return type).  Even if it exists, it might\n+\t\t have the wrong value for a recursive call.  Just make a\n+\t\t dummy decl, since it's only used for its type.  */\n \t      arg_pack = tsubst_decl (parm_pack, args, complain);\n \t      arg_pack = make_fnparm_pack (arg_pack);\n \t    }\n@@ -8381,11 +8383,13 @@ tsubst_pack_expansion (tree t, tree args, tsubst_flags_t complain,\n   if (len < 0)\n     return error_mark_node;\n \n-  if (!local_specializations)\n+  if (cp_unevaluated_operand)\n     {\n-      /* We're in a late-specified return type, so we don't have a local\n-\t specializations table.  Create one for doing this expansion.  */\n-      very_local_specializations = true;\n+      /* We're in a late-specified return type, so create our own local\n+\t specializations table; the current table is either NULL or (in the\n+\t case of recursive unification) might have bindings that we don't\n+\t want to use or alter.  */\n+      saved_local_specializations = local_specializations;\n       local_specializations = htab_create (37,\n \t\t\t\t\t   hash_local_specialization,\n \t\t\t\t\t   eq_local_specializations,\n@@ -8476,10 +8480,10 @@ tsubst_pack_expansion (tree t, tree args, tsubst_flags_t complain,\n         }\n     }\n \n-  if (very_local_specializations)\n+  if (saved_local_specializations)\n     {\n       htab_delete (local_specializations);\n-      local_specializations = NULL;\n+      local_specializations = saved_local_specializations;\n     }\n   \n   return result;"}, {"sha": "a163bebdcab5ab2bc235820a24c2d152b376e8a5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dba29f845a7dfa3f87bc9fb7040648b3cd68082/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dba29f845a7dfa3f87bc9fb7040648b3cd68082/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1dba29f845a7dfa3f87bc9fb7040648b3cd68082", "patch": "@@ -1,3 +1,8 @@\n+2010-05-26  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/43382\n+\t* g++.dg/cpp0x/variadic101.C: New.\n+\n 2010-05-26  Richard Guenther  <rguenther@suse.de>\n \n \tPR rtl-optimization/44164"}, {"sha": "445a770afa1570982f00e57cbc461f2af0844bb7", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic101.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dba29f845a7dfa3f87bc9fb7040648b3cd68082/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic101.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dba29f845a7dfa3f87bc9fb7040648b3cd68082/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic101.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic101.C?ref=1dba29f845a7dfa3f87bc9fb7040648b3cd68082", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/43382\n+// { dg-options \"-std=c++0x\" }\n+\n+template<class T>\n+struct Container\n+{ T f() const; };\n+\n+template<class T>\n+T deref(const T& t)\n+{ return t; }\n+\n+\n+template <class T, class... Args>\n+auto\n+deref(const T& u, int r, Args... args)\n+-> decltype(deref(u.f(), args...))\n+{ return deref(u.f(), args...); }\n+\n+int main(void)\n+{\n+    Container<Container<int>> v;\n+    deref(v,1,2);\n+}"}]}