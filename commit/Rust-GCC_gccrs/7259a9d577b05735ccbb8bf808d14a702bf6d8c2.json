{"sha": "7259a9d577b05735ccbb8bf808d14a702bf6d8c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzI1OWE5ZDU3N2IwNTczNWNjYmI4YmY4MDhkMTRhNzAyYmY2ZDhjMg==", "commit": {"author": {"name": "Antony Polukhin", "email": "antoshkka@gmail.com", "date": "2019-08-30T16:25:24Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-08-30T16:25:24Z"}, "message": "Optimize std::to_chars\n\nBunch of micro optimizations for std::to_chars:\n* For base == 8 replacing the lookup in __digits table with arithmetic\ncomputations leads to a same CPU cycles for a loop (exchanges two movzx\nwith 3 bit ops). However this saves 129 bytes of data and totally avoids\na chance of cache misses on __digits.\n* For base == 16 replacing the lookup in __digits table with\narithmetic computations leads to a few additional instructions, but\ntotally avoids a chance of cache misses on __digits (- ~9 cache misses\nfor worst case) and saves 513 bytes of const data.\n* Replacing __first[pos] and __first[pos - 1] with __first[1] and\n__first[0] on final iterations saves ~2% of code size.\n* Removing trailing '\\0' from arrays of digits allows the linker to\nmerge the symbols (so that \"0123456789abcdefghijklmnopqrstuvwxyz\" and\n\"0123456789abcdef\" could share the same address). This improves data\nlocality and reduces binary sizes.\n* Using __detail::__to_chars_len_2 instead of a generic\n__detail::__to_chars_len makes the operation O(1) instead of O(N). It\nalso makes the code two times shorter.\n\nIn sum: this significantly reduces the size of a binary (for about 4KBs\nonly for base-8 conversion), deals with latency (CPU cache misses)\nwithout changing the iterations count and without adding costly\ninstructions into the loops.\n\n2019-08-30  Antony Polukhin  <antoshkka@gmail.com>\n\n\t* include/std/charconv (__detail::__to_chars_8)\n\t__detail::__to_chars_16): Replace array of precomputed digits with\n\tarithmetic operations to avoid CPU cache misses. Remove zero\n\ttermination from array of digits to allow symbol merge with generic\n\timplementation of __detail::__to_chars. Replace final offsets with\n\tconstants. Use __detail::__to_chars_len_2 instead of a generic\n\t__detail::__to_chars_len.\n\t(__detail::__to_chars): Remove zero termination from array of digits.\n\t(__detail::__to_chars_2): Leading digit is always '1'.\n\nFrom-SVN: r275205", "tree": {"sha": "ea225c300bd988315ace2c694414a210440b8747", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea225c300bd988315ace2c694414a210440b8747"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7259a9d577b05735ccbb8bf808d14a702bf6d8c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7259a9d577b05735ccbb8bf808d14a702bf6d8c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7259a9d577b05735ccbb8bf808d14a702bf6d8c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7259a9d577b05735ccbb8bf808d14a702bf6d8c2/comments", "author": {"login": "apolukhin", "id": 1700098, "node_id": "MDQ6VXNlcjE3MDAwOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1700098?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apolukhin", "html_url": "https://github.com/apolukhin", "followers_url": "https://api.github.com/users/apolukhin/followers", "following_url": "https://api.github.com/users/apolukhin/following{/other_user}", "gists_url": "https://api.github.com/users/apolukhin/gists{/gist_id}", "starred_url": "https://api.github.com/users/apolukhin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apolukhin/subscriptions", "organizations_url": "https://api.github.com/users/apolukhin/orgs", "repos_url": "https://api.github.com/users/apolukhin/repos", "events_url": "https://api.github.com/users/apolukhin/events{/privacy}", "received_events_url": "https://api.github.com/users/apolukhin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ecaf589db96cd981feaa78c9c55244732fb0cad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ecaf589db96cd981feaa78c9c55244732fb0cad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ecaf589db96cd981feaa78c9c55244732fb0cad"}], "stats": {"total": 83, "additions": 49, "deletions": 34}, "files": [{"sha": "65ef1c0bc1ba0fee0abc96822060d220d3215e73", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7259a9d577b05735ccbb8bf808d14a702bf6d8c2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7259a9d577b05735ccbb8bf808d14a702bf6d8c2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7259a9d577b05735ccbb8bf808d14a702bf6d8c2", "patch": "@@ -1,3 +1,15 @@\n+2019-08-30  Antony Polukhin  <antoshkka@gmail.com>\n+\n+\t* include/std/charconv (__detail::__to_chars_8)\n+\t__detail::__to_chars_16): Replace array of precomputed digits with\n+\tarithmetic operations to avoid CPU cache misses. Remove zero\n+\ttermination from array of digits to allow symbol merge with generic\n+\timplementation of __detail::__to_chars. Replace final offsets with\n+\tconstants. Use __detail::__to_chars_len_2 instead of a generic\n+\t__detail::__to_chars_len.\n+\t(__detail::__to_chars): Remove zero termination from array of digits.\n+\t(__detail::__to_chars_2): Leading digit is always '1'.\n+\n 2019-08-30  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* testsuite/23_containers/vector/cons/89164_c++17.cc: Fix errors."}, {"sha": "4e94c39656de27073b0b0b2d88d90c3b243bf6f4", "filename": "libstdc++-v3/include/std/charconv", "status": "modified", "additions": 37, "deletions": 34, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7259a9d577b05735ccbb8bf808d14a702bf6d8c2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcharconv", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7259a9d577b05735ccbb8bf808d14a702bf6d8c2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcharconv", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcharconv?ref=7259a9d577b05735ccbb8bf808d14a702bf6d8c2", "patch": "@@ -131,7 +131,7 @@ namespace __detail\n \t    : 1u;\n \t}\n       else\n-\treturn __to_chars_len(__value, 8);\n+\treturn (__to_chars_len_2(__value) + 2) / 3;\n     }\n \n   // Generic implementation for arbitrary bases.\n@@ -155,8 +155,12 @@ namespace __detail\n \n       unsigned __pos = __len - 1;\n \n-      static constexpr char __digits[]\n-\t= \"0123456789abcdefghijklmnopqrstuvwxyz\";\n+      static constexpr char __digits[] = {\n+\t'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n+\t'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\n+\t'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',\n+\t'u', 'v', 'w', 'x', 'y', 'z'\n+      };\n \n       while (__val >= __base)\n \t{\n@@ -181,7 +185,7 @@ namespace __detail\n \n       to_chars_result __res;\n \n-      const unsigned __len = __to_chars_len(__val, 0x10);\n+      const unsigned __len = (__to_chars_len_2(__val) + 3) / 4;\n \n       if (__builtin_expect((__last - __first) < __len, 0))\n \t{\n@@ -190,32 +194,30 @@ namespace __detail\n \t  return __res;\n \t}\n \n-      static constexpr char __digits[513] =\n-\t\"000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f\"\n-\t\"202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f\"\n-\t\"404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f\"\n-\t\"606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f\"\n-\t\"808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9f\"\n-\t\"a0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebf\"\n-\t\"c0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedf\"\n-\t\"e0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff\";\n+      static constexpr char __digits[] = {\n+\t'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n+\t'a', 'b', 'c', 'd', 'e', 'f'\n+      };\n       unsigned __pos = __len - 1;\n       while (__val >= 0x100)\n \t{\n-\t  auto const __num = (__val % 0x100) * 2;\n-\t  __val /= 0x100;\n-\t  __first[__pos] = __digits[__num + 1];\n+\t  auto __num = __val & 0xF;\n+\t  __val >>= 4;\n+\t  __first[__pos] = __digits[__num];\n+\t  __num = __val & 0xF;\n+\t  __val >>= 4;\n \t  __first[__pos - 1] = __digits[__num];\n \t  __pos -= 2;\n \t}\n       if (__val >= 0x10)\n \t{\n-\t  auto const __num = __val * 2;\n-\t  __first[__pos] = __digits[__num + 1];\n-\t  __first[__pos - 1] = __digits[__num];\n+\t  const auto __num = __val & 0xF;\n+\t  __val >>= 4;\n+\t  __first[1] = __digits[__num];\n+\t  __first[0] = __digits[__val];\n \t}\n       else\n-\t__first[__pos] = \"0123456789abcdef\"[__val];\n+\t__first[0] = __digits[__val];\n       __res.ptr = __first + __len;\n       __res.ec = {};\n       return __res;\n@@ -263,28 +265,26 @@ namespace __detail\n \t  return __res;\n \t}\n \n-      static constexpr char __digits[129] =\n-\t\"00010203040506071011121314151617\"\n-\t\"20212223242526273031323334353637\"\n-\t\"40414243444546475051525354555657\"\n-\t\"60616263646566677071727374757677\";\n       unsigned __pos = __len - 1;\n       while (__val >= 0100)\n \t{\n-\t  auto const __num = (__val % 0100) * 2;\n-\t  __val /= 0100;\n-\t  __first[__pos] = __digits[__num + 1];\n-\t  __first[__pos - 1] = __digits[__num];\n+\t  auto __num = __val & 7;\n+\t  __val >>= 3;\n+\t  __first[__pos] = '0' + __num;\n+\t  __num = __val & 7;\n+\t  __val >>= 3;\n+\t  __first[__pos - 1] = '0' + __num;\n \t  __pos -= 2;\n \t}\n       if (__val >= 010)\n \t{\n-\t  auto const __num = __val * 2;\n-\t  __first[__pos] = __digits[__num + 1];\n-\t  __first[__pos - 1] = __digits[__num];\n+\t  auto const __num = __val & 7;\n+\t  __val >>= 3;\n+\t  __first[1] = '0' + __num;\n+\t  __first[0] = '0' + __val;\n \t}\n       else\n-\t__first[__pos] = '0' + __val;\n+\t__first[0] = '0' + __val;\n       __res.ptr = __first + __len;\n       __res.ec = {};\n       return __res;\n@@ -315,7 +315,10 @@ namespace __detail\n \t  __first[__pos--] = '0' + (__val & 1);\n \t  __val >>= 1;\n \t}\n-      *__first = '0' + (__val & 1);\n+      // First digit is always '1' because __to_chars_len_2 skips\n+      // leading zero bits and std::to_chars handles zero values\n+      // directly.\n+      __first[0] = '1';\n \n       __res.ptr = __first + __len;\n       __res.ec = {};"}]}