{"sha": "15f7a4692667ce38eed325a9567f5ef492a5ce07", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTVmN2E0NjkyNjY3Y2UzOGVlZDMyNWE5NTY3ZjVlZjQ5MmE1Y2UwNw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2017-10-13T12:42:39Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2017-10-13T12:42:39Z"}, "message": "C++: show location of unclosed extern \"C\" specifications\n\nIf the user fails to close an extern \"C\" linkage specifier, and then\nuses templates, they will run into \"template with C linkage\" errors.\n\nFrom personal experience, it can be hard to tell where the\nextern \"C\" began.  As of r251026 there will be a message highlighting\nthe unclosed '{', but this may be hard to spot at the very end of\nthe errors.\n\nThis patch adds a note to the various diagnostics that complain\nabout C linkage, showing the user where the extern \"C\" specification\nbegan.\n\ngcc/cp/ChangeLog:\n\t* cp-tree.h (maybe_show_extern_c_location): New decl.\n\t* decl.c (grokfndecl): When complaining about literal operators\n\twith C linkage, issue a note giving the location of the\n\textern \"C\".\n\t* parser.c (cp_parser_new): Initialize new field\n\t\"innermost_linkage_specification_location\".\n\t(cp_parser_linkage_specification): Store the location\n\tof the linkage specification within the cp_parser.\n\t(cp_parser_explicit_specialization): When complaining about\n\ttemplate specializations with C linkage, issue a note giving the\n\tlocation of the extern \"C\".\n\t(cp_parser_explicit_template_declaration): Likewise for templates.\n\t(maybe_show_extern_c_location): New function.\n\t* parser.h (struct cp_parser): New field\n\t\"innermost_linkage_specification_location\".\n\ngcc/testsuite/ChangeLog:\n\t* g++.dg/cpp0x/udlit-extern-c.C: New test case.\n\t* g++.dg/diagnostic/unclosed-extern-c.C: Add example of a template\n\terroneously covered by an unclosed extern \"C\".\n\t* g++.dg/template/extern-c.C: New test case.\n\nFrom-SVN: r253726", "tree": {"sha": "7b2e27753270c83805872cbc3270007b040ce3bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b2e27753270c83805872cbc3270007b040ce3bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15f7a4692667ce38eed325a9567f5ef492a5ce07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15f7a4692667ce38eed325a9567f5ef492a5ce07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15f7a4692667ce38eed325a9567f5ef492a5ce07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15f7a4692667ce38eed325a9567f5ef492a5ce07/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3b0dd4fea23a695df1fb9a7e5c7017f9d1f1ea84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b0dd4fea23a695df1fb9a7e5c7017f9d1f1ea84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b0dd4fea23a695df1fb9a7e5c7017f9d1f1ea84"}], "stats": {"total": 154, "additions": 152, "deletions": 2}, "files": [{"sha": "c22583554e540f9fe5e00de72c6d072a6d7831d5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f7a4692667ce38eed325a9567f5ef492a5ce07/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f7a4692667ce38eed325a9567f5ef492a5ce07/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=15f7a4692667ce38eed325a9567f5ef492a5ce07", "patch": "@@ -1,3 +1,21 @@\n+2017-10-13  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* cp-tree.h (maybe_show_extern_c_location): New decl.\n+\t* decl.c (grokfndecl): When complaining about literal operators\n+\twith C linkage, issue a note giving the location of the\n+\textern \"C\".\n+\t* parser.c (cp_parser_new): Initialize new field\n+\t\"innermost_linkage_specification_location\".\n+\t(cp_parser_linkage_specification): Store the location\n+\tof the linkage specification within the cp_parser.\n+\t(cp_parser_explicit_specialization): When complaining about\n+\ttemplate specializations with C linkage, issue a note giving the\n+\tlocation of the extern \"C\".\n+\t(cp_parser_explicit_template_declaration): Likewise for templates.\n+\t(maybe_show_extern_c_location): New function.\n+\t* parser.h (struct cp_parser): New field\n+\t\"innermost_linkage_specification_location\".\n+\n 2017-10-12  Nathan Sidwell  <nathan@acm.org>\n \n \t* cp-tree.h (cp_expr): Add const operator * and operator->"}, {"sha": "b74b6d9d9503f2026ab81846fccc4e9b709405a1", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f7a4692667ce38eed325a9567f5ef492a5ce07/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f7a4692667ce38eed325a9567f5ef492a5ce07/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=15f7a4692667ce38eed325a9567f5ef492a5ce07", "patch": "@@ -6356,6 +6356,7 @@ extern bool parsing_nsdmi (void);\n extern bool parsing_default_capturing_generic_lambda_in_template (void);\n extern void inject_this_parameter (tree, cp_cv_quals);\n extern location_t defarg_location (tree);\n+extern void maybe_show_extern_c_location (void);\n \n /* in pt.c */\n extern bool check_template_shadow\t\t(tree);"}, {"sha": "a3cc80cf7a30f5e95e5cde876a114131da3d6511", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f7a4692667ce38eed325a9567f5ef492a5ce07/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f7a4692667ce38eed325a9567f5ef492a5ce07/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=15f7a4692667ce38eed325a9567f5ef492a5ce07", "patch": "@@ -8729,6 +8729,7 @@ grokfndecl (tree ctype,\n       if (DECL_LANGUAGE (decl) == lang_c)\n \t{\n \t  error (\"literal operator with C linkage\");\n+\t  maybe_show_extern_c_location ();\n \t  return NULL_TREE;\n \t}\n "}, {"sha": "2337be52c382bdfdfedd9f51c38fb3a777b76c2a", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 38, "deletions": 1, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f7a4692667ce38eed325a9567f5ef492a5ce07/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f7a4692667ce38eed325a9567f5ef492a5ce07/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=15f7a4692667ce38eed325a9567f5ef492a5ce07", "patch": "@@ -3937,6 +3937,9 @@ cp_parser_new (void)\n   /* Allow constrained-type-specifiers. */\n   parser->prevent_constrained_type_specifiers = 0;\n \n+  /* We haven't yet seen an 'extern \"C\"'.  */\n+  parser->innermost_linkage_specification_location = UNKNOWN_LOCATION;\n+\n   return parser;\n }\n \n@@ -13848,9 +13851,11 @@ cp_parser_linkage_specification (cp_parser* parser)\n   tree linkage;\n \n   /* Look for the `extern' keyword.  */\n-  cp_parser_require_keyword (parser, RID_EXTERN, RT_EXTERN);\n+  cp_token *extern_token\n+    = cp_parser_require_keyword (parser, RID_EXTERN, RT_EXTERN);\n \n   /* Look for the string-literal.  */\n+  cp_token *string_token = cp_lexer_peek_token (parser->lexer);\n   linkage = cp_parser_string_literal (parser, false, false);\n \n   /* Transform the literal into an identifier.  If the literal is a\n@@ -13869,6 +13874,20 @@ cp_parser_linkage_specification (cp_parser* parser)\n   /* We're now using the new linkage.  */\n   push_lang_context (linkage);\n \n+  /* Preserve the location of the the innermost linkage specification,\n+     tracking the locations of nested specifications via a local.  */\n+  location_t saved_location\n+    = parser->innermost_linkage_specification_location;\n+  /* Construct a location ranging from the start of the \"extern\" to\n+     the end of the string-literal, with the caret at the start, e.g.:\n+       extern \"C\" {\n+       ^~~~~~~~~~\n+  */\n+  parser->innermost_linkage_specification_location\n+    = make_location (extern_token->location,\n+\t\t     extern_token->location,\n+\t\t     get_finish (string_token->location));\n+\n   /* If the next token is a `{', then we're using the first\n      production.  */\n   if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_BRACE))\n@@ -13899,6 +13918,9 @@ cp_parser_linkage_specification (cp_parser* parser)\n \n   /* We're done with the linkage-specification.  */\n   pop_lang_context ();\n+\n+  /* Restore location of parent linkage specification, if any.  */\n+  parser->innermost_linkage_specification_location = saved_location;\n }\n \n /* Parse a static_assert-declaration.\n@@ -16643,6 +16665,7 @@ cp_parser_explicit_specialization (cp_parser* parser)\n   if (current_lang_name == lang_name_c)\n     {\n       error_at (token->location, \"template specialization with C linkage\");\n+      maybe_show_extern_c_location ();\n       /* Give it C++ linkage to avoid confusing other parts of the\n \t front end.  */\n       push_lang_context (lang_name_cplusplus);\n@@ -26979,6 +27002,7 @@ cp_parser_explicit_template_declaration (cp_parser* parser, bool member_p)\n   if (current_lang_name == lang_name_c)\n     {\n       error_at (location, \"template with C linkage\");\n+      maybe_show_extern_c_location ();\n       /* Give it C++ linkage to avoid confusing other parts of the\n          front end.  */\n       push_lang_context (lang_name_cplusplus);\n@@ -39552,4 +39576,17 @@ finish_fully_implicit_template (cp_parser *parser, tree member_decl_opt)\n   return member_decl_opt;\n }\n \n+/* Helper function for diagnostics that have complained about things\n+   being used with 'extern \"C\"' linkage.\n+\n+   Attempt to issue a note showing where the 'extern \"C\"' linkage began.  */\n+\n+void\n+maybe_show_extern_c_location (void)\n+{\n+  if (the_parser->innermost_linkage_specification_location != UNKNOWN_LOCATION)\n+    inform (the_parser->innermost_linkage_specification_location,\n+\t    \"%<extern \\\"C\\\"%> linkage started here\");\n+}\n+\n #include \"gt-cp-parser.h\""}, {"sha": "f4f4a010964df477edec1591d26d09ebe2962329", "filename": "gcc/cp/parser.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f7a4692667ce38eed325a9567f5ef492a5ce07/gcc%2Fcp%2Fparser.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f7a4692667ce38eed325a9567f5ef492a5ce07/gcc%2Fcp%2Fparser.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.h?ref=15f7a4692667ce38eed325a9567f5ef492a5ce07", "patch": "@@ -412,6 +412,10 @@ struct GTY(()) cp_parser {\n      context e.g., because they could never be deduced.  */\n   int prevent_constrained_type_specifiers;\n \n+  /* Location of the string-literal token within the current linkage\n+     specification, if any, or UNKNOWN_LOCATION otherwise.  */\n+  location_t innermost_linkage_specification_location;\n+\n };\n \n /* In parser.c  */"}, {"sha": "6bb877ea3873ecb376020fc6c6d1eb4aae7ef3ee", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f7a4692667ce38eed325a9567f5ef492a5ce07/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f7a4692667ce38eed325a9567f5ef492a5ce07/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=15f7a4692667ce38eed325a9567f5ef492a5ce07", "patch": "@@ -1,3 +1,10 @@\n+2017-10-13  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* g++.dg/cpp0x/udlit-extern-c.C: New test case.\n+\t* g++.dg/diagnostic/unclosed-extern-c.C: Add example of a template\n+\terroneously covered by an unclosed extern \"C\".\n+\t* g++.dg/template/extern-c.C: New test case.\n+\n 2017-10-13  Richard Biener  <rguenther@suse.de>\n \n \t* gcc.dg/graphite/pr35356-3.c: XFAIL again."}, {"sha": "d47a49c3fa860b2ec90dc1e3b7c3a7e52edcb4ae", "filename": "gcc/testsuite/g++.dg/cpp0x/udlit-extern-c.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f7a4692667ce38eed325a9567f5ef492a5ce07/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-extern-c.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f7a4692667ce38eed325a9567f5ef492a5ce07/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-extern-c.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-extern-c.C?ref=15f7a4692667ce38eed325a9567f5ef492a5ce07", "patch": "@@ -0,0 +1,7 @@\n+// { dg-do compile { target c++11 } }\n+\n+extern \"C\" { // { dg-message \"1: 'extern .C.' linkage started here\" }\n+\n+constexpr double operator\"\" _deg ( double degrees ); // { dg-error \"literal operator with C linkage\" }\n+\n+}"}, {"sha": "44f538e33ecb069126718b4911031370572a4d67", "filename": "gcc/testsuite/g++.dg/diagnostic/unclosed-extern-c.C", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f7a4692667ce38eed325a9567f5ef492a5ce07/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Funclosed-extern-c.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f7a4692667ce38eed325a9567f5ef492a5ce07/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Funclosed-extern-c.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Funclosed-extern-c.C?ref=15f7a4692667ce38eed325a9567f5ef492a5ce07", "patch": "@@ -1,3 +1,12 @@\n-extern \"C\" { /* { dg-message \"12: to match this '.'\" } */\n+extern \"C\" { // { dg-line open_extern_c }\n+\n+  int foo (void);\n+\n+/* Missing close-brace for the extern \"C\" here.  */\n+\n+template <typename T> // { dg-error \"template with C linkage\" }\n+void bar (void);\n+// { dg-message \"1: 'extern .C.' linkage started here\" \"\" { target *-*-* } open_extern_c }\n \n void test (void); /* { dg-error \"17: expected '.' at end of input\" } */\n+// { message \"12: to match this '.'\" \"\" { target *-*-* } open_extern_c }"}, {"sha": "c0dd7cb66d5e437f48619ddf9a1f7b5cf2ad2a63", "filename": "gcc/testsuite/g++.dg/template/extern-c.C", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f7a4692667ce38eed325a9567f5ef492a5ce07/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fextern-c.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f7a4692667ce38eed325a9567f5ef492a5ce07/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fextern-c.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fextern-c.C?ref=15f7a4692667ce38eed325a9567f5ef492a5ce07", "patch": "@@ -0,0 +1,66 @@\n+template <typename T> void specializable (T);\n+\n+/* Invalid template: within \"extern C\".  */\n+\n+extern \"C\" { // { dg-message \"1: 'extern .C.' linkage started here\" }\n+\n+template <typename T> // { dg-error \"template with C linkage\" }\n+void within_extern_c_braces (void);\n+\n+}\n+\n+/* Valid template: not within \"extern C\".  */\n+\n+template <typename T>\n+void not_within_extern_c (void);\n+\n+\n+/* Invalid specialization: within \"extern C\".  */\n+\n+extern \"C\" { // { dg-message \"1: 'extern .C.' linkage started here\" }\n+\n+template <>  // { dg-error \"template specialization with C linkage\" }\n+void specializable (int);\n+\n+}\n+\n+\n+/* Valid specialization: not within \"extern C\".  */\n+template <>\n+void specializable (char);\n+\n+\n+/* Example of extern C without braces.  */\n+\n+extern \"C\" template <typename T> // { dg-line open_extern_c_no_braces }\n+void within_extern_c_no_braces (void);\n+// { dg-error \"12: template with C linkage\" \"\" { target *-*-* } open_extern_c_no_braces }\n+// { dg-message \"1: 'extern .C.' linkage started here\" \"\" { target *-*-* } open_extern_c_no_braces }\n+\n+\n+/* Nested extern \"C\" specifications.\n+   We should report within the innermost extern \"C\" that's still open.  */\n+\n+extern \"C\" {\n+  extern \"C\" { // { dg-line middle_open_extern_c }\n+    extern \"C\" {\n+    }\n+\n+    template <typename T>  // { dg-error \"template with C linkage\" }\n+    void within_nested_extern_c (void);\n+    // { dg-message \"3: 'extern .C.' linkage started here\" \"\" { target *-*-* } middle_open_extern_c }\n+\n+    extern \"C++\" {\n+      /* Valid template: within extern \"C++\".  */\n+      template <typename T>\n+      void within_nested_extern_cpp (void);\n+\n+      extern \"C\" {  // { dg-line last_open_extern_c }\n+\t/* Invalid template: within \"extern C\".  */\n+\ttemplate <typename T> // { dg-error \"template with C linkage\" }\n+\tvoid within_extern_c_within_extern_cpp (void);\n+\t// { dg-message \"7: 'extern .C.' linkage started here\" \"\" { target *-*-* } last_open_extern_c }\t\n+      }\n+    }\n+  }\n+}"}]}