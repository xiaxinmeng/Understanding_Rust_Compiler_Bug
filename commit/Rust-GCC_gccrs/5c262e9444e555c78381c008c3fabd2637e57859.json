{"sha": "5c262e9444e555c78381c008c3fabd2637e57859", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWMyNjJlOTQ0NGU1NTVjNzgzODFjMDA4YzNmYWJkMjYzN2U1Nzg1OQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-11-14T22:26:45Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-11-14T22:26:45Z"}, "message": "runtime: Use some of 6g runtime.c for easier merging.\n\nFrom-SVN: r181368", "tree": {"sha": "8ffdf9261f4ab6641b9d371be88a846a6ea6f14f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ffdf9261f4ab6641b9d371be88a846a6ea6f14f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c262e9444e555c78381c008c3fabd2637e57859", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c262e9444e555c78381c008c3fabd2637e57859", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c262e9444e555c78381c008c3fabd2637e57859", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c262e9444e555c78381c008c3fabd2637e57859/comments", "author": null, "committer": null, "parents": [{"sha": "8c121ccb537f02ade6f9fdb67f13f24b3c94c48d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c121ccb537f02ade6f9fdb67f13f24b3c94c48d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c121ccb537f02ade6f9fdb67f13f24b3c94c48d"}], "stats": {"total": 331, "additions": 257, "deletions": 74}, "files": [{"sha": "f5554f3e572caec6384fcd16609d4d8810e17040", "filename": "libgo/Makefile.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c262e9444e555c78381c008c3fabd2637e57859/libgo%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c262e9444e555c78381c008c3fabd2637e57859/libgo%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.am?ref=5c262e9444e555c78381c008c3fabd2637e57859", "patch": "@@ -435,7 +435,6 @@ runtime_files = \\\n \truntime/go-note.c \\\n \truntime/go-panic.c \\\n \truntime/go-print.c \\\n-\truntime/go-rand.c \\\n \truntime/go-rec-big.c \\\n \truntime/go-rec-nb-big.c \\\n \truntime/go-rec-nb-small.c \\\n@@ -484,6 +483,7 @@ runtime_files = \\\n \truntime/mheap.c \\\n \truntime/msize.c \\\n \truntime/proc.c \\\n+\truntime/runtime.c \\\n \truntime/thread.c \\\n \truntime/yield.c \\\n \t$(rtems_task_variable_add_file) \\"}, {"sha": "3dae2a905944249180c0022bfc97ab7de59f9997", "filename": "libgo/Makefile.in", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c262e9444e555c78381c008c3fabd2637e57859/libgo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c262e9444e555c78381c008c3fabd2637e57859/libgo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.in?ref=5c262e9444e555c78381c008c3fabd2637e57859", "patch": "@@ -199,7 +199,7 @@ am__libgo_la_SOURCES_DIST = runtime/go-append.c runtime/go-assert.c \\\n \truntime/go-map-range.c runtime/go-nanotime.c \\\n \truntime/go-new-channel.c runtime/go-new-map.c runtime/go-new.c \\\n \truntime/go-note.c runtime/go-panic.c runtime/go-print.c \\\n-\truntime/go-rand.c runtime/go-rec-big.c runtime/go-rec-nb-big.c \\\n+\truntime/go-rec-big.c runtime/go-rec-nb-big.c \\\n \truntime/go-rec-nb-small.c runtime/go-rec-small.c \\\n \truntime/go-recover.c runtime/go-reflect.c \\\n \truntime/go-reflect-call.c runtime/go-reflect-chan.c \\\n@@ -221,9 +221,10 @@ am__libgo_la_SOURCES_DIST = runtime/go-append.c runtime/go-assert.c \\\n \truntime/cpuprof.c runtime/mcache.c runtime/mcentral.c \\\n \truntime/mem_posix_memalign.c runtime/mem.c runtime/mfinal.c \\\n \truntime/mfixalloc.c runtime/mgc0.c runtime/mheap.c \\\n-\truntime/msize.c runtime/proc.c runtime/thread.c \\\n-\truntime/yield.c runtime/rtems-task-variable-add.c chan.c \\\n-\tiface.c malloc.c map.c mprof.c reflect.c sigqueue.c string.c\n+\truntime/msize.c runtime/proc.c runtime/runtime.c \\\n+\truntime/thread.c runtime/yield.c \\\n+\truntime/rtems-task-variable-add.c chan.c iface.c malloc.c \\\n+\tmap.c mprof.c reflect.c sigqueue.c string.c\n @HAVE_SYS_MMAN_H_FALSE@am__objects_1 = mem_posix_memalign.lo\n @HAVE_SYS_MMAN_H_TRUE@am__objects_1 = mem.lo\n @LIBGO_IS_RTEMS_TRUE@am__objects_2 = rtems-task-variable-add.lo\n@@ -240,7 +241,7 @@ am__objects_3 = go-append.lo go-assert.lo go-assert-interface.lo \\\n \tgo-make-slice.lo go-map-delete.lo go-map-index.lo \\\n \tgo-map-len.lo go-map-range.lo go-nanotime.lo go-new-channel.lo \\\n \tgo-new-map.lo go-new.lo go-note.lo go-panic.lo go-print.lo \\\n-\tgo-rand.lo go-rec-big.lo go-rec-nb-big.lo go-rec-nb-small.lo \\\n+\tgo-rec-big.lo go-rec-nb-big.lo go-rec-nb-small.lo \\\n \tgo-rec-small.lo go-recover.lo go-reflect.lo go-reflect-call.lo \\\n \tgo-reflect-chan.lo go-reflect-map.lo go-rune.lo \\\n \tgo-runtime-error.lo go-sched.lo go-select.lo go-semacquire.lo \\\n@@ -253,9 +254,9 @@ am__objects_3 = go-append.lo go-assert.lo go-assert-interface.lo \\\n \tgo-unreflect.lo go-unsafe-new.lo go-unsafe-newarray.lo \\\n \tgo-unsafe-pointer.lo go-unwind.lo cpuprof.lo mcache.lo \\\n \tmcentral.lo $(am__objects_1) mfinal.lo mfixalloc.lo mgc0.lo \\\n-\tmheap.lo msize.lo proc.lo thread.lo yield.lo $(am__objects_2) \\\n-\tchan.lo iface.lo malloc.lo map.lo mprof.lo reflect.lo \\\n-\tsigqueue.lo string.lo\n+\tmheap.lo msize.lo proc.lo runtime.lo thread.lo yield.lo \\\n+\t$(am__objects_2) chan.lo iface.lo malloc.lo map.lo mprof.lo \\\n+\treflect.lo sigqueue.lo string.lo\n am_libgo_la_OBJECTS = $(am__objects_3)\n libgo_la_OBJECTS = $(am_libgo_la_OBJECTS)\n libgo_la_LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\\n@@ -865,7 +866,6 @@ runtime_files = \\\n \truntime/go-note.c \\\n \truntime/go-panic.c \\\n \truntime/go-print.c \\\n-\truntime/go-rand.c \\\n \truntime/go-rec-big.c \\\n \truntime/go-rec-nb-big.c \\\n \truntime/go-rec-nb-small.c \\\n@@ -914,6 +914,7 @@ runtime_files = \\\n \truntime/mheap.c \\\n \truntime/msize.c \\\n \truntime/proc.c \\\n+\truntime/runtime.c \\\n \truntime/thread.c \\\n \truntime/yield.c \\\n \t$(rtems_task_variable_add_file) \\\n@@ -2492,7 +2493,6 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-note.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-panic.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-print.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-rand.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-rec-big.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-rec-nb-big.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-rec-nb-small.Plo@am__quote@\n@@ -2547,6 +2547,7 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/proc.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/reflect.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/rtems-task-variable-add.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/runtime.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/sigqueue.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/string.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/thread.Plo@am__quote@\n@@ -2867,13 +2868,6 @@ go-print.lo: runtime/go-print.c\n @AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n @am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o go-print.lo `test -f 'runtime/go-print.c' || echo '$(srcdir)/'`runtime/go-print.c\n \n-go-rand.lo: runtime/go-rand.c\n-@am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT go-rand.lo -MD -MP -MF $(DEPDIR)/go-rand.Tpo -c -o go-rand.lo `test -f 'runtime/go-rand.c' || echo '$(srcdir)/'`runtime/go-rand.c\n-@am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/go-rand.Tpo $(DEPDIR)/go-rand.Plo\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='runtime/go-rand.c' object='go-rand.lo' libtool=yes @AMDEPBACKSLASH@\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n-@am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o go-rand.lo `test -f 'runtime/go-rand.c' || echo '$(srcdir)/'`runtime/go-rand.c\n-\n go-rec-big.lo: runtime/go-rec-big.c\n @am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT go-rec-big.lo -MD -MP -MF $(DEPDIR)/go-rec-big.Tpo -c -o go-rec-big.lo `test -f 'runtime/go-rec-big.c' || echo '$(srcdir)/'`runtime/go-rec-big.c\n @am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/go-rec-big.Tpo $(DEPDIR)/go-rec-big.Plo\n@@ -3217,6 +3211,13 @@ proc.lo: runtime/proc.c\n @AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n @am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o proc.lo `test -f 'runtime/proc.c' || echo '$(srcdir)/'`runtime/proc.c\n \n+runtime.lo: runtime/runtime.c\n+@am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT runtime.lo -MD -MP -MF $(DEPDIR)/runtime.Tpo -c -o runtime.lo `test -f 'runtime/runtime.c' || echo '$(srcdir)/'`runtime/runtime.c\n+@am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/runtime.Tpo $(DEPDIR)/runtime.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='runtime/runtime.c' object='runtime.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o runtime.lo `test -f 'runtime/runtime.c' || echo '$(srcdir)/'`runtime/runtime.c\n+\n thread.lo: runtime/thread.c\n @am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT thread.lo -MD -MP -MF $(DEPDIR)/thread.Tpo -c -o thread.lo `test -f 'runtime/thread.c' || echo '$(srcdir)/'`runtime/thread.c\n @am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/thread.Tpo $(DEPDIR)/thread.Plo"}, {"sha": "c202b5b2acd6ad3a6eca697ab908a2620455cf87", "filename": "libgo/runtime/go-main.c", "status": "modified", "additions": 4, "deletions": 27, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c262e9444e555c78381c008c3fabd2637e57859/libgo%2Fruntime%2Fgo-main.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c262e9444e555c78381c008c3fabd2637e57859/libgo%2Fruntime%2Fgo-main.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-main.c?ref=5c262e9444e555c78381c008c3fabd2637e57859", "patch": "@@ -32,10 +32,6 @@\n \n extern char **environ;\n \n-extern struct __go_open_array Args asm (\"libgo_os.os.Args\");\n-\n-extern struct __go_open_array Envs asm (\"libgo_os.os.Envs\");\n-\n /* These functions are created for the main package.  */\n extern void __go_init_main (void);\n extern void real_main (void) asm (\"main.main\");\n@@ -45,38 +41,19 @@ extern void real_main (void) asm (\"main.main\");\n int\n main (int argc, char **argv)\n {\n-  int i;\n-  struct __go_string *values;\n+  runtime_args (argc, (byte **) argv);\n \n   m = &runtime_m0;\n   g = &runtime_g0;\n   m->curg = g;\n   g->m = m;\n+  runtime_initpanic ();\n   runtime_mallocinit ();\n   runtime_cpuprofinit ();\n   __go_gc_goroutine_init (&argc);\n \n-  Args.__count = argc;\n-  Args.__capacity = argc;\n-  values = __go_alloc (argc * sizeof (struct __go_string));\n-  for (i = 0; i < argc; ++i)\n-    {\n-      values[i].__data = (unsigned char *) argv[i];\n-      values[i].__length = __builtin_strlen (argv[i]);\n-    }\n-  Args.__values = values;\n-\n-  for (i = 0; environ[i] != NULL; ++i)\n-    ;\n-  Envs.__count = i;\n-  Envs.__capacity = i;\n-  values = __go_alloc (i * sizeof (struct __go_string));\n-  for (i = 0; environ[i] != NULL; ++i)\n-    {\n-      values[i].__data = (unsigned char *) environ[i];\n-      values[i].__length = __builtin_strlen (environ[i]);\n-    }\n-  Envs.__values = values;\n+  runtime_goargs();\n+  runtime_goenvs();\n \n   __initsig ();\n "}, {"sha": "9eae5527636e22fde364b1484aba3ccfb7fae202", "filename": "libgo/runtime/go-panic.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c262e9444e555c78381c008c3fabd2637e57859/libgo%2Fruntime%2Fgo-panic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c262e9444e555c78381c008c3fabd2637e57859/libgo%2Fruntime%2Fgo-panic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-panic.c?ref=5c262e9444e555c78381c008c3fabd2637e57859", "patch": "@@ -98,10 +98,9 @@ __go_panic (struct __go_empty_interface arg)\n \n   /* The panic was not recovered.  */\n \n+  runtime_startpanic ();\n   __printpanics (g->panic);\n-\n-  /* FIXME: We should dump a call stack here.  */\n-  abort ();\n+  runtime_dopanic (0);\n }\n \n /* This is used by the runtime library.  */"}, {"sha": "9632efc09cd03d6e5ae664b5f542db217d11cdf8", "filename": "libgo/runtime/go-rand.c", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c121ccb537f02ade6f9fdb67f13f24b3c94c48d/libgo%2Fruntime%2Fgo-rand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c121ccb537f02ade6f9fdb67f13f24b3c94c48d/libgo%2Fruntime%2Fgo-rand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-rand.c?ref=8c121ccb537f02ade6f9fdb67f13f24b3c94c48d", "patch": "@@ -1,18 +0,0 @@\n-// Copyright 2009 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-#include \"runtime.h\"\n-\n-uint32\n-runtime_fastrand1(void)\n-{\n-\tuint32 x;\n-\n-\tx = m->fastrand;\n-\tx += x;\n-\tif(x & 0x80000000L)\n-\t\tx ^= 0x88888eefUL;\n-\tm->fastrand = x;\n-\treturn x;\n-}"}, {"sha": "a79b907764fcf5590600785ff730c08e499f873a", "filename": "libgo/runtime/mgc0.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c262e9444e555c78381c008c3fabd2637e57859/libgo%2Fruntime%2Fmgc0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c262e9444e555c78381c008c3fabd2637e57859/libgo%2Fruntime%2Fmgc0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fmgc0.c?ref=5c262e9444e555c78381c008c3fabd2637e57859", "patch": "@@ -834,7 +834,7 @@ runtime_gc(int32 force __attribute__ ((unused)))\n {\n \tint64 t0, t1, t2, t3;\n \tuint64 heap0, heap1, obj0, obj1;\n-\tchar *p;\n+\tconst byte *p;\n \tbool extra;\n \n \t// The gc is turned off (via enablegc) until\n@@ -852,7 +852,7 @@ runtime_gc(int32 force __attribute__ ((unused)))\n \t\tp = runtime_getenv(\"GOGC\");\n \t\tif(p == nil || p[0] == '\\0')\n \t\t\tgcpercent = 100;\n-\t\telse if(runtime_strcmp(p, \"off\") == 0)\n+\t\telse if(runtime_strcmp((const char*)p, \"off\") == 0)\n \t\t\tgcpercent = -1;\n \t\telse\n \t\t\tgcpercent = runtime_atoi(p);"}, {"sha": "d598f7934d9187387082a45b7b5367c40f437d8c", "filename": "libgo/runtime/runtime.c", "status": "added", "additions": 174, "deletions": 0, "changes": 174, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c262e9444e555c78381c008c3fabd2637e57859/libgo%2Fruntime%2Fruntime.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c262e9444e555c78381c008c3fabd2637e57859/libgo%2Fruntime%2Fruntime.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fruntime.c?ref=5c262e9444e555c78381c008c3fabd2637e57859", "patch": "@@ -0,0 +1,174 @@\n+// Copyright 2009 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+#include <unistd.h>\n+\n+#include \"runtime.h\"\n+#include \"array.h\"\n+#include \"go-panic.h\"\n+#include \"go-string.h\"\n+\n+uint32\truntime_panicking;\n+\n+static Lock paniclk;\n+\n+void\n+runtime_initpanic(void)\n+{\n+\truntime_initlock(&paniclk);\n+}\n+\n+void\n+runtime_startpanic(void)\n+{\n+\tif(m->dying) {\n+\t\truntime_printf(\"panic during panic\\n\");\n+\t\truntime_exit(3);\n+\t}\n+\tm->dying = 1;\n+\truntime_xadd(&runtime_panicking, 1);\n+\truntime_lock(&paniclk);\n+}\n+\n+void\n+runtime_dopanic(int32 unused __attribute__ ((unused)))\n+{\n+\t/*\n+\tstatic bool didothers;\n+\n+\tif(g->sig != 0)\n+\t\truntime_printf(\"[signal %x code=%p addr=%p pc=%p]\\n\",\n+\t\t\tg->sig, g->sigcode0, g->sigcode1, g->sigpc);\n+\n+\tif(runtime_gotraceback()){\n+\t\tif(!didothers) {\n+\t\t\tdidothers = true;\n+\t\t\truntime_tracebackothers(g);\n+\t\t}\n+\t}\n+\t*/\n+\n+\truntime_unlock(&paniclk);\n+\tif(runtime_xadd(&runtime_panicking, -1) != 0) {\n+\t\t// Some other m is panicking too.\n+\t\t// Let it print what it needs to print.\n+\t\t// Wait forever without chewing up cpu.\n+\t\t// It will exit when it's done.\n+\t\tstatic Lock deadlock;\n+\t\truntime_initlock(&deadlock);\n+\t\truntime_lock(&deadlock);\n+\t\truntime_lock(&deadlock);\n+\t}\n+\n+\truntime_exit(2);\n+}\n+\n+void\n+runtime_throw(const char *s)\n+{\n+\truntime_startpanic();\n+\truntime_printf(\"throw: %s\\n\", s);\n+\truntime_dopanic(0);\n+\t*(int32*)0 = 0;\t// not reached\n+\truntime_exit(1);\t// even more not reached\n+}\n+\n+static int32\targc;\n+static byte**\targv;\n+\n+extern Slice os_Args asm (\"libgo_os.os.Args\");\n+extern Slice os_Envs asm (\"libgo_os.os.Envs\");\n+\n+void\n+runtime_args(int32 c, byte **v)\n+{\n+\targc = c;\n+\targv = v;\n+}\n+\n+void\n+runtime_goargs(void)\n+{\n+\tString *s;\n+\tint32 i;\n+\t\n+\t// for windows implementation see \"os\" package\n+\tif(Windows)\n+\t\treturn;\n+\n+\ts = runtime_malloc(argc*sizeof s[0]);\n+\tfor(i=0; i<argc; i++)\n+\t\ts[i] = runtime_gostringnocopy((byte*)argv[i]);\n+\tos_Args.__values = (void*)s;\n+\tos_Args.__count = argc;\n+\tos_Args.__capacity = argc;\n+}\n+\n+void\n+runtime_goenvs(void)\n+{\n+\tString *s;\n+\tint32 i, n;\n+\t\n+\tfor(n=0; argv[argc+1+n] != 0; n++)\n+\t\t;\n+\n+\ts = runtime_malloc(n*sizeof s[0]);\n+\tfor(i=0; i<n; i++)\n+\t\ts[i] = runtime_gostringnocopy(argv[argc+1+i]);\n+\tos_Envs.__values = (void*)s;\n+\tos_Envs.__count = n;\n+\tos_Envs.__capacity = n;\n+}\n+\n+const byte*\n+runtime_getenv(const char *s)\n+{\n+\tint32 i, j, len;\n+\tconst byte *v, *bs;\n+\tString* envv;\n+\tint32 envc;\n+\n+\tbs = (const byte*)s;\n+\tlen = runtime_findnull(bs);\n+\tenvv = (String*)os_Envs.__values;\n+\tenvc = os_Envs.__count;\n+\tfor(i=0; i<envc; i++){\n+\t\tif(envv[i].__length <= len)\n+\t\t\tcontinue;\n+\t\tv = (const byte*)envv[i].__data;\n+\t\tfor(j=0; j<len; j++)\n+\t\t\tif(bs[j] != v[j])\n+\t\t\t\tgoto nomatch;\n+\t\tif(v[len] != '=')\n+\t\t\tgoto nomatch;\n+\t\treturn v+len+1;\n+\tnomatch:;\n+\t}\n+\treturn nil;\n+}\n+\n+int32\n+runtime_atoi(const byte *p)\n+{\n+\tint32 n;\n+\n+\tn = 0;\n+\twhile('0' <= *p && *p <= '9')\n+\t\tn = n*10 + *p++ - '0';\n+\treturn n;\n+}\n+\n+uint32\n+runtime_fastrand1(void)\n+{\n+\tuint32 x;\n+\n+\tx = m->fastrand;\n+\tx += x;\n+\tif(x & 0x80000000L)\n+\t\tx ^= 0x88888eefUL;\n+\tm->fastrand = x;\n+\treturn x;\n+}"}, {"sha": "0beaef6a8c140a35166514f40da8d72bf153966a", "filename": "libgo/runtime/runtime.h", "status": "modified", "additions": 38, "deletions": 6, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c262e9444e555c78381c008c3fabd2637e57859/libgo%2Fruntime%2Fruntime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c262e9444e555c78381c008c3fabd2637e57859/libgo%2Fruntime%2Fruntime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fruntime.h?ref=5c262e9444e555c78381c008c3fabd2637e57859", "patch": "@@ -22,12 +22,11 @@\n #include <sys/mman.h>\n #endif\n \n+#include \"array.h\"\n #include \"go-alloc.h\"\n #include \"go-panic.h\"\n #include \"go-string.h\"\n \n-typedef struct __go_string String;\n-\n /* This file supports C files copied from the 6g runtime library.\n    This is a version of the 6g runtime.h rewritten for gccgo's version\n    of the code.  */\n@@ -56,6 +55,8 @@ typedef\tstruct\tLock\t\tLock;\n \n typedef\tstruct\t__go_defer_stack\tDefer;\n typedef\tstruct\t__go_panic_stack\tPanic;\n+typedef\tstruct\t__go_open_array\t\tSlice;\n+typedef\tstruct\t__go_string\t\tString;\n \n /* We use mutexes for locks.  6g uses futexes directly, and perhaps\n    someday we will do that too.  */\n@@ -136,6 +137,7 @@ struct\tM\n \tint32\tgcing_for_prof;\n \tint32\tholds_finlock;\n \tint32\tgcing_for_finlock;\n+\tint32\tdying;\n \tint32\tprofilehz;\n \tuint32\tfastrand;\n \tMCache\t*mcache;\n@@ -152,14 +154,40 @@ struct\tM\n };\n \n /* Macros.  */\n+\n+#ifdef __WINDOWS__\n+enum {\n+   Windows = 1\n+};\n+#else\n+enum {\n+   Windows = 0\n+};\n+#endif\n+\n #define\tnelem(x)\t(sizeof(x)/sizeof((x)[0]))\n #define\tnil\t\t((void*)0)\n #define USED(v)\t\t((void) v)\n \n-/* We map throw to assert.  */\n-#define runtime_throw(s) __go_assert(s == 0)\n+/*\n+ * external data\n+ */\n+extern\tuint32\truntime_panicking;\n+\n+/*\n+ * common functions and data\n+ */\n+int32\truntime_findnull(const byte*);\n \n+/*\n+ * very low level c-called\n+ */\n+void\truntime_args(int32, byte**);\n+void\truntime_goargs(void);\n+void\truntime_goenvs(void);\n+void\truntime_throw(const char*);\n void*\truntime_mal(uintptr);\n+String\truntime_gostringnocopy(byte*);\n void\truntime_mallocinit(void);\n void\truntime_initfintab(void);\n void\tsiginit(void);\n@@ -208,10 +236,9 @@ void\truntime_notewakeup(Note*);\n #define runtime_free(p) __go_free(p)\n #define runtime_memclr(buf, size) __builtin_memset((buf), 0, (size))\n #define runtime_strcmp(s1, s2) __builtin_strcmp((s1), (s2))\n-#define runtime_getenv(s) getenv(s)\n-#define runtime_atoi(s) atoi(s)\n #define runtime_mcmp(a, b, s) __builtin_memcmp((a), (b), (s))\n #define runtime_memmove(a, b, s) __builtin_memmove((a), (b), (s))\n+#define runtime_exit(s) _exit(s)\n MCache*\truntime_allocmcache(void);\n void\tfree(void *v);\n struct __go_func_type;\n@@ -222,6 +249,11 @@ bool\truntime_addfinalizer(void*, void(*fn)(void*), const struct __go_func_type *\n #define runtime_casp(pval, old, new) __sync_bool_compare_and_swap (pval, old, new)\n #define runtime_xadd(p, v) __sync_add_and_fetch (p, v)\n \n+void\truntime_initpanic(void);\n+void\truntime_dopanic(int32) __attribute__ ((noreturn));\n+void\truntime_startpanic(void);\n+const byte*\truntime_getenv(const char*);\n+int32\truntime_atoi(const byte*);\n void\truntime_sigprof(uint8 *pc, uint8 *sp, uint8 *lr);\n void\truntime_cpuprofinit(void);\n void\truntime_resetcpuprofiler(int32);"}, {"sha": "aa75628730ef3be32b95ac06a1bdebcd406678f6", "filename": "libgo/runtime/string.goc", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c262e9444e555c78381c008c3fabd2637e57859/libgo%2Fruntime%2Fstring.goc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c262e9444e555c78381c008c3fabd2637e57859/libgo%2Fruntime%2Fstring.goc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fstring.goc?ref=5c262e9444e555c78381c008c3fabd2637e57859", "patch": "@@ -6,6 +6,24 @@ package runtime\n #include \"runtime.h\"\n #define charntorune(pv, str, len) __go_get_rune(str, len, pv)\n \n+int32\n+runtime_findnull(const byte *s)\n+{\n+\tif(s == nil)\n+\t\treturn 0;\n+\treturn __builtin_strlen((const char*) s);\n+}\n+\n+String\n+runtime_gostringnocopy(byte *str)\n+{\n+\tString s;\n+\t\n+\ts.__data = (const unsigned char *) str;\n+\ts.__length = runtime_findnull(str);\n+\treturn s;\n+}\n+\n enum\n {\n \tRuneself\t= 0x80,"}]}