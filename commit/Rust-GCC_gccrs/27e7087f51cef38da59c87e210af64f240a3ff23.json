{"sha": "27e7087f51cef38da59c87e210af64f240a3ff23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdlNzA4N2Y1MWNlZjM4ZGE1OWM4N2UyMTBhZjY0ZjI0MGEzZmYyMw==", "commit": {"author": {"name": "Carl Love", "email": "cel@us.ibm.com", "date": "2016-12-07T16:21:16Z"}, "committer": {"name": "Carl Love", "email": "carll@gcc.gnu.org", "date": "2016-12-07T16:21:16Z"}, "message": "builtins-3.c: Move built-in tests for P8 and P9 to their own test file.\n\n2016-12-07  Carl Love  <cel@us.ibm.com>\n\n\t* gcc.target/powerpc/builtins-3.c: Move built-in tests for P8 and\n\tP9 to their own test file.  This allows precise constraints on the\n\teffective target and compile options.\n\t* gcc.target/powerpc/builtins-3-p8.c: New file for the vector\n\tcompare P8 built-in tests.\n\t* gcc.target/powerpc/builtins-3-p9.c: New file for the vector\n\tcompare P9 built-in tests.\n\nFrom-SVN: r243370", "tree": {"sha": "9d68b8a2562e16716509d7f50f98e9151cf35588", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d68b8a2562e16716509d7f50f98e9151cf35588"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27e7087f51cef38da59c87e210af64f240a3ff23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27e7087f51cef38da59c87e210af64f240a3ff23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27e7087f51cef38da59c87e210af64f240a3ff23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27e7087f51cef38da59c87e210af64f240a3ff23/comments", "author": {"login": "carlelove", "id": 86435705, "node_id": "MDQ6VXNlcjg2NDM1NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/86435705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carlelove", "html_url": "https://github.com/carlelove", "followers_url": "https://api.github.com/users/carlelove/followers", "following_url": "https://api.github.com/users/carlelove/following{/other_user}", "gists_url": "https://api.github.com/users/carlelove/gists{/gist_id}", "starred_url": "https://api.github.com/users/carlelove/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carlelove/subscriptions", "organizations_url": "https://api.github.com/users/carlelove/orgs", "repos_url": "https://api.github.com/users/carlelove/repos", "events_url": "https://api.github.com/users/carlelove/events{/privacy}", "received_events_url": "https://api.github.com/users/carlelove/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4dfad1fb0d38174a3c51a4762ab690a11f966212", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dfad1fb0d38174a3c51a4762ab690a11f966212", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4dfad1fb0d38174a3c51a4762ab690a11f966212"}], "stats": {"total": 120, "additions": 77, "deletions": 43}, "files": [{"sha": "6153fe74d2d0e5bb959a2235ccce330d9e83eb44", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27e7087f51cef38da59c87e210af64f240a3ff23/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27e7087f51cef38da59c87e210af64f240a3ff23/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=27e7087f51cef38da59c87e210af64f240a3ff23", "patch": "@@ -1,3 +1,13 @@\n+2016-12-07  Carl Love  <cel@us.ibm.com>\n+\n+\t* gcc.target/powerpc/builtins-3.c: Move built-in tests for P8 and\n+\tP9 to their own test file.  This allows precise constraints on the\n+\teffective target and compile options.\n+\t* gcc.target/powerpc/builtins-3-p8.c: New file for the vector\n+\tcompare P8 built-in tests.\n+\t* gcc.target/powerpc/builtins-3-p9.c: New file for the vector\n+\tcompare P9 built-in tests.\n+\n 2016-12-07  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.target/i386/pr77761.c: Require int128 effective target."}, {"sha": "e52795cc29be147907fcd5bf8d356bb20d960d47", "filename": "gcc/testsuite/gcc.target/powerpc/builtins-3-p8.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27e7087f51cef38da59c87e210af64f240a3ff23/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-3-p8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27e7087f51cef38da59c87e210af64f240a3ff23/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-3-p8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-3-p8.c?ref=27e7087f51cef38da59c87e210af64f240a3ff23", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-mcpu=power8\" } */\n+\n+#include <altivec.h>\n+\n+vector bool long long\n+test_eq_long_long (vector bool long long x, vector bool long long y)\n+{\n+\treturn vec_cmpeq (x, y);\n+}\n+\n+/* Expected test results:\n+\n+     test_eq_long_long          1 vcmpequd inst */\n+\n+/* { dg-final { scan-assembler-times \"vcmpequd\" 1 } } */"}, {"sha": "d846e29f62bb4310307d497375eed279652103b3", "filename": "gcc/testsuite/gcc.target/powerpc/builtins-3-p9.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27e7087f51cef38da59c87e210af64f240a3ff23/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-3-p9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27e7087f51cef38da59c87e210af64f240a3ff23/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-3-p9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-3-p9.c?ref=27e7087f51cef38da59c87e210af64f240a3ff23", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+vector bool char\n+test_ne_char (vector bool char x, vector bool char y)\n+{\n+\treturn vec_cmpne (x, y);\n+}\n+\n+vector bool short\n+test_ne_short (vector bool short x, vector bool short y)\n+{\n+\treturn vec_cmpne (x, y);\n+}\n+\n+vector bool int\n+test_ne_int (vector bool int x, vector bool int y)\n+{\n+\treturn vec_cmpne (x, y);\n+}\n+\n+vector bool long\n+test_ne_long (vector bool long x, vector bool long y)\n+{\n+\treturn vec_cmpne (x, y);\n+}\n+\n+/* Expected test results:\n+\n+     test_ne_char              1 vcmpneb\n+     test_ne_short             1 vcmpneh\n+     test_ne_int               1 vcmpnew\n+     test_ne_long              1 vcmpequd, 1 xxlnor inst */\n+\n+/* { dg-final { scan-assembler-times \"vcmpneb\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vcmpneh\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vcmpnew\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vcmpequd\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xxlnor\"   1 } } */"}, {"sha": "1d243ce5e496a1b407568641cb42332c09cf9226", "filename": "gcc/testsuite/gcc.target/powerpc/builtins-3.c", "status": "modified", "additions": 8, "deletions": 43, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27e7087f51cef38da59c87e210af64f240a3ff23/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27e7087f51cef38da59c87e210af64f240a3ff23/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-3.c?ref=27e7087f51cef38da59c87e210af64f240a3ff23", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n /* { dg-options \"-maltivec -mvsx\" } */\n \n #include <altivec.h>\n@@ -22,48 +22,13 @@ test_eq_int (vector bool int x, vector bool int y)\n \treturn vec_cmpeq (x, y);\n }\n \n-vector bool long\n-test_eq_long (vector bool long x, vector bool long y)\n-{\n-\treturn vec_cmpeq (x, y);\n-}\n-\n-vector bool char\n-test_ne_char (vector bool char x, vector bool char y)\n-{\n-\treturn vec_cmpne (x, y);\n-}\n-\n-vector bool short\n-test_ne_short (vector bool short x, vector bool short y)\n-{\n-\treturn vec_cmpne (x, y);\n-}\n-\n-vector bool int\n-test_ne_int (vector bool int x, vector bool int y)\n-{\n-\treturn vec_cmpne (x, y);\n-}\n-\n-vector bool long\n-test_ne_long (vector bool long x, vector bool long y)\n-{\n-\treturn vec_cmpne (x, y);\n-}\n \n-/* Note: vec_cmpne is implemented as vcmpeq and then NOT'ed\n-   using the xxlnor instruction.\n+/* Expected test results:\n \n-   Expected test results:\n-   test_eq_char              1 vcmpeq inst\n-   test_eq_short             1 vcmpeq inst\n-   test_eq_int               1 vcmpeq inst\n-   test_eq_long              1 vcmpeq inst\n-   test_ne_char              1 vcmpeq, 1 xxlnor inst\n-   test_ne_short             1 vcmpeq, 1 xxlnor inst\n-   test_ne_int               1 vcmpeq, 1 xxlnor inst\n-   test_ne_long              1 vcmpeq, 1 xxlnor inst */\n+     test_eq_char              1 vcmpequb inst\n+     test_eq_short             1 vcmpequh inst\n+     test_eq_int               1 vcmpequw inst */\n \n-/* { dg-final { scan-assembler-times \"vcmpeq\" 8 } } */\n-/* { dg-final { scan-assembler-times \"xxlnor\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vcmpequb\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcmpequh\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcmpequw\" 1 } } */"}]}