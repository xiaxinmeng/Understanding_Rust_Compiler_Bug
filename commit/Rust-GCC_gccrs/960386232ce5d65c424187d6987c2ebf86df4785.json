{"sha": "960386232ce5d65c424187d6987c2ebf86df4785", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTYwMzg2MjMyY2U1ZDY1YzQyNDE4N2Q2OTg3YzJlYmY4NmRmNDc4NQ==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2007-08-31T05:26:38Z"}, "committer": {"name": "Revital Eres", "email": "revitale@gcc.gnu.org", "date": "2007-08-31T05:26:38Z"}, "message": "Support for PowerPC 750CL paired-single instructions \n\nCo-Authored-By: Revital Eres <eres@il.ibm.com>\n\nFrom-SVN: r127954", "tree": {"sha": "f6b30b9a0ef62545c6daf229e0c8c8eff0aa2a72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6b30b9a0ef62545c6daf229e0c8c8eff0aa2a72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/960386232ce5d65c424187d6987c2ebf86df4785", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/960386232ce5d65c424187d6987c2ebf86df4785", "html_url": "https://github.com/Rust-GCC/gccrs/commit/960386232ce5d65c424187d6987c2ebf86df4785", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/960386232ce5d65c424187d6987c2ebf86df4785/comments", "author": null, "committer": null, "parents": [{"sha": "6e03b280b00030909b9b8204d6b151ad8060d77e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e03b280b00030909b9b8204d6b151ad8060d77e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e03b280b00030909b9b8204d6b151ad8060d77e"}], "stats": {"total": 1214, "additions": 1195, "deletions": 19}, "files": [{"sha": "483728dd3e64cf4a3ea1d82ce0db256b31c090f8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/960386232ce5d65c424187d6987c2ebf86df4785/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/960386232ce5d65c424187d6987c2ebf86df4785/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=960386232ce5d65c424187d6987c2ebf86df4785", "patch": "@@ -1,3 +1,39 @@\n+2007-08-31  David Edelsohn  <edelsohn@gnu.org>\n+            Revital Eres  <eres@il.ibm.com>\n+\n+        * doc/invoke.texi (-mpaired): Document flag.\n+        * config.gcc: Include paired.h in powerpc extra_headers and\n+        750cl.h in powerpc-*-linux*paired*.\n+        * config/rs6000/rs6000.opt (-mpaired): New flag.\n+        * config/rs6000/rs6000.c (paired_init_builtins,\n+        paired_expand_builtin, paired_expand_lv_builtin,\n+        paired_expand_stv_builtin, paired_expand_predicate_builtin):\n+        New functions to support the paired single builtin functions.\n+        (rs6000_hard_regno_mode_ok): Handle PAIRED_VECTOR_MODE.\n+        (def_builtin, bdesc_3arg, bdesc_2arg, bdesc_1arg): Add paired\n+        single builtins.\n+        (bdesc_paired_preds): New structure for paired predicate\n+        instructions.\n+        (rs6000_expand_builtin): Expand paired single builtins.\n+        (rs6000_init_builtins): Init paired single builtins.\n+        (rs6000_common_init_builtins): Add v2sf_ftype_v2sf_v2sf_v2sf.\n+        Rename v2sf_ftype_v2sf_v2sf to v2sf_ftype_v2sf_v2sf_spe\n+        and v2sf_ftype_v2sf_spe to v2sf_ftype_v2sf.  Add new types\n+        v2sf_ftype_v2sf_v2sf and v2sf_ftype_v2sf.\n+        (rs6000_vector_mode_supported_p): Support paired vector mode.\n+        * config/rs6000/rs6000.h: (UNITS_PER_PAIRED_WORD,\n+        PAIRED_VECTOR_MODE, PAIRED_SIMD_REGNO_P, TARGET_PAIRED_FLOAT):\n+        New.\n+        (LOCAL_ALIGNMENT): Handle PAIRED_VECTOR_MODE.\n+        (DATA_ALIGNMENT): Likewise.\n+        (UNITS_PER_SIMD_WORD): Handle PAIRED_VECTOR_MODE.\n+        (rs6000_builtins): Add PAIRED builtins.\n+        * config/rs6000/rs6000.md: Include paired.md.\n+        * config/rs6000/paired.h: New.\n+        * config/rs6000/paired.md: New.\n+        * config/rs6000/750cl.h: New.\n+        * config/rs6000/spe.md: Recognize movv2sf instruction for 750cl.\n+\n 2007-08-30  Ollie Wild  <aaw@google.com>\n \n \t* c-opts.c (c_common_handle_option): Support -fno-directives-only."}, {"sha": "9f6c0262cb9122098fd19cf04f091004b92bd46f", "filename": "gcc/config.gcc", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/960386232ce5d65c424187d6987c2ebf86df4785/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/960386232ce5d65c424187d6987c2ebf86df4785/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=960386232ce5d65c424187d6987c2ebf86df4785", "patch": "@@ -312,7 +312,7 @@ mips*-*-*)\n \t;;\n powerpc*-*-*)\n \tcpu_type=rs6000\n-\textra_headers=\"ppc-asm.h altivec.h spe.h ppu_intrinsics.h\"\n+\textra_headers=\"ppc-asm.h altivec.h spe.h ppu_intrinsics.h paired.h\"\n \tneed_64bit_hwint=yes\n \tcase x$with_cpu in\n \t    xpowerpc64|xdefault64|x6[23]0|x970|xG5|xpower[3456]|xpower6x|xrs64a)\n@@ -1936,6 +1936,11 @@ powerpc-*-linux*spe*)\n \textra_options=\"${extra_options} rs6000/sysv4.opt\"\n \ttmake_file=\"rs6000/t-fprules rs6000/t-fprules-softfp soft-fp/t-softfp rs6000/t-ppcos ${tmake_file} rs6000/t-ppccomm\"\n \t;;\n+powerpc-*-linux*paired*)\n+        tm_file=\"${tm_file} dbxelf.h elfos.h svr4.h freebsd-spec.h rs6000/sysv4.h rs6000/linux.h rs6000/750cl.h\"\n+        extra_options=\"${extra_options} rs6000/sysv4.opt\"\n+        tmake_file=\"rs6000/t-fprules rs6000/t-fprules-softfp soft-fp/t-softfp rs6000/t-ppcos ${tmake_file} rs6000/t-ppccomm\"\n+        ;;\n powerpc-*-linux*)\n \ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h freebsd-spec.h rs6000/sysv4.h\"\n \textra_options=\"${extra_options} rs6000/sysv4.opt\""}, {"sha": "d01761b2ae28d0cc6b69df4d054de3bba2d75283", "filename": "gcc/config/rs6000/750cl.h", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/960386232ce5d65c424187d6987c2ebf86df4785/gcc%2Fconfig%2Frs6000%2F750cl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/960386232ce5d65c424187d6987c2ebf86df4785/gcc%2Fconfig%2Frs6000%2F750cl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2F750cl.h?ref=960386232ce5d65c424187d6987c2ebf86df4785", "patch": "@@ -0,0 +1,23 @@\n+/* Enable 750cl paired single support.\n+   Copyright (C) 2007 Free Software Foundation, Inc.\n+   Contributed by Revital Eres (eres@il.ibm.com)\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 2, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING.  If not, write to the\n+   Free Software Foundation, 51 Franklin Street, Fifth Floor, Boston,\n+   MA 02110-1301, USA.  */\n+\n+#undef TARGET_PAIRED_FLOAT\n+#define TARGET_PAIRED_FLOAT rs6000_paired_float\n+"}, {"sha": "e70d0fa878f6d7aa26adc69e8f360ef2a6f6de2c", "filename": "gcc/config/rs6000/paired.h", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/960386232ce5d65c424187d6987c2ebf86df4785/gcc%2Fconfig%2Frs6000%2Fpaired.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/960386232ce5d65c424187d6987c2ebf86df4785/gcc%2Fconfig%2Frs6000%2Fpaired.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpaired.h?ref=960386232ce5d65c424187d6987c2ebf86df4785", "patch": "@@ -0,0 +1,77 @@\n+/* PowerPC 750CL user include file.\n+   Copyright (C) 2007 Free Software Foundation, Inc. \n+   Contributed by Revital Eres (eres@il.ibm.com).\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 2, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING.  If not, write to the\n+   Free Software Foundation, 51 Franklin Street, Fifth Floor, Boston,\n+   MA 02110-1301, USA.  */\n+\n+/* As a special exception, if you include this header file into source\n+   files compiled by GCC, this header file does not by itself cause\n+   the resulting executable to be covered by the GNU General Public\n+   License.  This exception does not however invalidate any other\n+   reasons why the executable file might be covered by the GNU General\n+   Public License.  */\n+\n+#ifndef _PAIRED_H\n+#define _PAIRED_H\n+\n+#define vector __attribute__((vector_size(8)))\n+\n+#define paired_msub __builtin_paired_msub\n+#define paired_madd __builtin_paired_madd\n+#define paired_nmsub __builtin_paired_nmsub\n+#define paired_nmadd __builtin_paired_nmadd\n+#define paired_sum0 __builtin_paired_sum0\n+#define paired_sum1 __builtin_paired_sum1\n+#define paired_div __builtin_paired_divv2sf3\n+#define paired_add __builtin_paired_addv2sf3\n+#define paired_sub __builtin_paired_subv2sf3\n+#define paired_mul __builtin_paired_mulv2sf3\n+#define paired_muls0 __builtin_paired_muls0\n+#define paired_muls1 __builtin_paired_muls1\n+#define paired_madds0 __builtin_paired_madds0\n+#define paired_madds1 __builtin_paired_madds1\n+#define paired_merge00 __builtin_paired_merge00\n+#define paired_merge01 __builtin_paired_merge01\n+#define paired_merge10 __builtin_paired_merge10\n+#define paired_merge11 __builtin_paired_merge11\n+#define paired_abs __builtin_paired_absv2sf2\n+#define paired_nabs __builtin_paired_nabsv2sf2\n+#define paired_neg __builtin_paired_negv2sf2\n+#define paired_sqrt __builtin_paired_sqrtv2sf2\n+#define paired_res __builtin_paired_resv2sf2\n+#define paired_stx __builtin_paired_stx\n+#define paired_lx __builtin_paired_lx\n+#define paired_cmpu0 __builtin_paired_cmpu0\n+#define paired_cmpu1 __builtin_paired_cmpu1\n+\n+/* Condition register codes for Paired predicates. */\n+#define LT            0\n+#define GT            1\n+#define EQ            2\n+#define UN            3\n+\n+#define paired_cmpu0_un(a,b) __builtin_paired_cmpu0 (UN, (a), (b))\n+#define paired_cmpu0_eq(a,b) __builtin_paired_cmpu0 (EQ, (a), (b))\n+#define paired_cmpu0_lt(a,b) __builtin_paired_cmpu0 (LT, (a), (b))\n+#define paired_cmpu0_gt(a,b) __builtin_paired_cmpu0 (GT, (a), (b))\n+#define paired_cmpu1_un(a,b) __builtin_paired_cmpu1 (UN, (a), (b))\n+#define paired_cmpu1_eq(a,b) __builtin_paired_cmpu1 (EQ, (a), (b))\n+#define paired_cmpu1_lt(a,b) __builtin_paired_cmpu1 (LT, (a), (b))\n+#define paired_cmpu1_gt(a,b) __builtin_paired_cmpu1 (GT, (a), (b))\n+\n+#endif /* _PAIRED_H */"}, {"sha": "ad3001d884c6f2842a682384ee89470360e78231", "filename": "gcc/config/rs6000/paired.md", "status": "added", "additions": 355, "deletions": 0, "changes": 355, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/960386232ce5d65c424187d6987c2ebf86df4785/gcc%2Fconfig%2Frs6000%2Fpaired.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/960386232ce5d65c424187d6987c2ebf86df4785/gcc%2Fconfig%2Frs6000%2Fpaired.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpaired.md?ref=960386232ce5d65c424187d6987c2ebf86df4785", "patch": "@@ -0,0 +1,355 @@\n+;; PowerPC paired single and double hummer description\n+;; Copyright (C) 2007\n+;; Free Software Foundation, Inc.\n+;; Contributed by David Edelsohn <edelsohn@gnu.org> and Revital Eres\n+;; <eres@il.ibm.com>\n+\n+;; This file is part of GCC.\n+\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published\n+;; by the Free Software Foundation; either version 2, or (at your\n+;; option) any later version.\n+\n+;; GCC is distributed in the hope that it will be useful, but WITHOUT\n+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+;; License for more details.\n+\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING.  If not, write to the\n+;; Free Software Foundation, 51 Franklin Street, Fifth Floor, Boston,\n+;; MA 02110-1301, USA.\n+\n+\n+(define_insn \"negv2sf2\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n+\t(neg:V2SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")))]\n+  \"TARGET_PAIRED_FLOAT\"\n+  \"ps_neg %0,%1\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"sqrtv2sf2\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n+\t(sqrt:V2SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")))]\n+  \"TARGET_PAIRED_FLOAT\"\n+  \"ps_rsqrte %0,%1\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"absv2sf2\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n+\t(abs:V2SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")))]\n+  \"TARGET_PAIRED_FLOAT\"\n+  \"ps_abs %0,%1\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"nabsv2sf2\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n+\t(neg:V2SF (abs:V2SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\"))))]\n+  \"TARGET_PAIRED_FLOAT\"\n+  \"ps_nabs %0,%1\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"addv2sf3\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n+\t(plus:V2SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"%f\")\n+\t\t   (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\")))]\n+  \"TARGET_PAIRED_FLOAT\"\n+  \"ps_add %0,%1,%2\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"subv2sf3\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n+        (minus:V2SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")\n+                    (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\")))]\n+  \"TARGET_PAIRED_FLOAT\"\n+  \"ps_sub %0,%1,%2\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"mulv2sf3\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n+\t(mult:V2SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"%f\")\n+\t\t   (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\")))]\n+  \"TARGET_PAIRED_FLOAT\"\n+  \"ps_mul %0,%1,%2\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"resv2sf2\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n+\t(unspec:V2SF [(match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")] UNSPEC_FRES))]\n+  \"TARGET_PAIRED_FLOAT && flag_finite_math_only\"\n+  \"ps_res %0,%1\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"divv2sf3\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n+\t(div:V2SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")\n+\t\t  (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\")))]\n+  \"TARGET_PAIRED_FLOAT\"\n+  \"ps_div %0,%1,%2\"\n+  [(set_attr \"type\" \"sdiv\")])\n+\n+(define_insn \"paired_madds0\"\n+ [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n+                 (vec_concat:V2SF\n+                 (plus:SF (mult:SF (vec_select:SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")\n+\t\t\t\t\t\t  (parallel [(const_int 0)]))\n+\t\t\t\t   (vec_select:SF (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\")\n+                                         (parallel [(const_int 0)])))\n+\t\t\t  (vec_select:SF (match_operand:V2SF 3 \"gpc_reg_operand\" \"f\")\n+                                         (parallel [(const_int 0)])))\n+\t\t (plus:SF (mult:SF (vec_select:SF (match_dup 1)\n+                                         (parallel [(const_int 1)]))\n+\t\t\t\t     (vec_select:SF (match_dup 2)\n+                                         (parallel [(const_int 0)])))\n+\t\t\t  (vec_select:SF (match_dup 3)\n+                                         (parallel [(const_int 1)])))))]\n+  \"TARGET_PAIRED_FLOAT && TARGET_FUSED_MADD\"\n+  \"ps_madds0 %0,%1,%2,%3\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"paired_madds1\"\n+ [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n+                 (vec_concat:V2SF\n+                 (plus:SF (mult:SF (vec_select:SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")\n+                                                  (parallel [(const_int 0)]))\n+                                   (vec_select:SF (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\")\n+                                         (parallel [(const_int 1)])))\n+                          (vec_select:SF (match_operand:V2SF 3 \"gpc_reg_operand\" \"f\")\n+                                         (parallel [(const_int 0)])))\n+                 (plus:SF (mult:SF (vec_select:SF (match_dup 1)\n+                                         (parallel [(const_int 1)]))\n+                                     (vec_select:SF (match_dup 2)\n+                                         (parallel [(const_int 1)])))\n+                          (vec_select:SF (match_dup 3)\n+                                         (parallel [(const_int 1)])))))]\n+  \"TARGET_PAIRED_FLOAT && TARGET_FUSED_MADD\"\n+  \"ps_madds1 %0,%1,%2,%3\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"paired_madd\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n+\t(plus:V2SF (mult:V2SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"%f\")\n+\t\t\t      (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\"))\n+\t\t   (match_operand:V2SF 3 \"gpc_reg_operand\" \"f\")))]\n+  \"TARGET_PAIRED_FLOAT && TARGET_FUSED_MADD\"\n+  \"ps_madd %0,%1,%2,%3\"\n+  [(set_attr \"type\" \"fp\")]) \n+\n+(define_insn \"paired_msub\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n+\t(minus:V2SF (mult:V2SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"%f\")\n+\t\t\t       (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\"))\n+\t\t    (match_operand:V2SF 3 \"gpc_reg_operand\" \"f\")))]\n+  \"TARGET_PAIRED_FLOAT && TARGET_FUSED_MADD\"\n+  \"ps_msub %0,%1,%2,%3\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"paired_nmadd\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n+\t(neg:V2SF (plus:V2SF (mult:V2SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"%f\")\n+\t\t\t\t\t(match_operand:V2SF 2 \"gpc_reg_operand\" \"f\"))\n+\t\t\t     (match_operand:V2SF 3 \"gpc_reg_operand\" \"f\"))))]\n+  \"TARGET_PAIRED_FLOAT && TARGET_FUSED_MADD\n+   && HONOR_SIGNED_ZEROS (SFmode)\"\n+  \"ps_nmadd %0,%1,%2,%3\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"paired_nmsub\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n+\t(neg:V2SF (minus:V2SF (mult:V2SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"%f\")\n+\t\t\t\t\t (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\"))\n+\t\t\t      (match_operand:V2SF 3 \"gpc_reg_operand\" \"f\"))))]\n+  \"TARGET_PAIRED_FLOAT && TARGET_FUSED_MADD\n+   && HONOR_SIGNED_ZEROS (DFmode)\"\n+  \"ps_nmsub %0,%1,%2,%3\"\n+  [(set_attr \"type\" \"dmul\")])\n+\n+(define_insn \"selv2sf4\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n+\t(vec_concat:V2SF\n+\t (if_then_else:SF (ge (vec_select:SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")\n+\t\t\t\t\t     (parallel [(const_int 0)]))\n+\t\t\t      (match_operand:SF 4 \"zero_fp_constant\" \"F\"))\n+\t\t\t  (vec_select:SF (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\")\n+\t\t\t\t\t (parallel [(const_int 0)]))\n+\t\t\t  (vec_select:SF (match_operand:V2SF 3 \"gpc_reg_operand\" \"f\")\n+\t\t\t\t\t (parallel [(const_int 0)])))\n+\t (if_then_else:SF (ge (vec_select:SF (match_dup 1)\n+\t\t\t\t\t     (parallel [(const_int 1)]))\n+\t\t\t      (match_dup 4))\n+\t\t\t  (vec_select:SF (match_dup 2)\n+\t\t\t\t\t (parallel [(const_int 1)]))\n+\t\t\t  (vec_select:SF (match_dup 3)\n+\t\t\t\t\t (parallel [(const_int 1)])))))]\n+\n+  \"TARGET_PAIRED_FLOAT\"\n+  \"ps_sel %0,%1,%2,%3\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"*movv2sf_paired\"\n+  [(set (match_operand:V2SF 0 \"nonimmediate_operand\" \"=Z,f,f,o,r,r,v\")\n+\t\t (match_operand:V2SF 1 \"input_operand\" \"f,Z,f,r,o,r,W\"))]\n+  \"TARGET_PAIRED_FLOAT\n+   && (register_operand (operands[0], V2SFmode) \n+       || register_operand (operands[1], V2SFmode))\"\n+{\n+  switch (which_alternative)\n+    {\n+    case 0: return \"psq_stx %1,%y0,0,0\";\n+    case 1: return \"psq_lx %0,%y1,0,0\";\n+    case 2: return \"ps_mr %0,%1\";\n+    case 3: return \"#\";\n+    case 4: return \"#\";\n+    case 5: return \"#\";\n+    case 6: return output_vec_const_move (operands);\n+    default: gcc_unreachable ();\n+    }\n+}\n+  [(set_attr \"type\" \"fpstore,fpload,fp,*,*,*,*\")])\n+\n+(define_insn \"paired_stx\"\n+  [(set (match_operand:V2SF 0 \"memory_operand\" \"=Z\")\n+        (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\"))]\n+  \"TARGET_PAIRED_FLOAT\"\n+  \"psq_stx %1,%y0,0,0\"\n+  [(set_attr \"type\" \"fpstore\")])\n+\n+(define_insn \"paired_lx\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n+        (match_operand:V2SF 1 \"memory_operand\" \"Z\"))]\n+  \"TARGET_PAIRED_FLOAT\"\n+  \"psq_lx %0,%y1,0,0\"\n+  [(set_attr \"type\" \"fpload\")])\n+\n+\n+(define_split\n+  [(set (match_operand:V2SF 0 \"nonimmediate_operand\" \"\")\n+        (match_operand:V2SF 1 \"input_operand\" \"\"))]\n+  \"TARGET_PAIRED_FLOAT && reload_completed\n+   && gpr_or_gpr_p (operands[0], operands[1])\"\n+  [(pc)]\n+  {\n+  rs6000_split_multireg_move (operands[0], operands[1]); DONE;\n+  })\n+\n+(define_insn \"paired_cmpu0\"\n+  [(set (match_operand:CCFP 0 \"cc_reg_operand\" \"=y\")\n+\t(compare:CCFP (vec_select:SF\n+\t\t       (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")\n+\t\t       (parallel [(const_int 0)]))\n+\t\t      (vec_select:SF\n+\t\t       (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\")\n+\t\t       (parallel [(const_int 0)]))))]\n+  \"TARGET_PAIRED_FLOAT\"\n+  \"ps_cmpu0 %0,%1,%2\"\n+  [(set_attr \"type\" \"fpcompare\")])\n+\n+(define_insn \"paired_cmpu1\"\n+  [(set (match_operand:CCFP 0 \"cc_reg_operand\" \"=y\")\n+\t(compare:CCFP (vec_select:SF\n+\t\t       (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")\n+\t\t       (parallel [(const_int 1)]))\n+\t\t      (vec_select:SF\n+\t\t       (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\")\n+\t\t       (parallel [(const_int 1)]))))]\n+  \"TARGET_PAIRED_FLOAT\"\n+  \"ps_cmpu1 %0,%1,%2\"\n+  [(set_attr \"type\" \"fpcompare\")])\n+\n+(define_insn \"paired_merge00\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n+\t(vec_concat:V2SF\n+\t (vec_select:SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")\n+\t\t\t(parallel [(const_int 0)]))\n+\t (vec_select:SF (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\")\n+\t\t\t(parallel [(const_int 0)]))))]\n+  \"TARGET_PAIRED_FLOAT\"\n+  \"ps_merge00 %0, %1, %2\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"paired_merge01\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n+\t(vec_concat:V2SF\n+\t (vec_select:SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")\n+\t\t\t(parallel [(const_int 0)]))\n+\t (vec_select:SF (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\")\n+\t\t\t(parallel [(const_int 1)]))))]\n+  \"TARGET_PAIRED_FLOAT\"\n+  \"ps_merge01 %0, %1, %2\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"paired_merge10\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n+\t(vec_concat:V2SF\n+\t (vec_select:SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")\n+\t\t\t(parallel [(const_int 1)]))\n+\t (vec_select:SF (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\")\n+\t\t\t(parallel [(const_int 0)]))))]\n+  \"TARGET_PAIRED_FLOAT\"\n+  \"ps_merge10 %0, %1, %2\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"paired_merge11\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n+\t(vec_concat:V2SF\n+\t (vec_select:SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")\n+\t\t\t(parallel [(const_int 1)]))\n+\t (vec_select:SF (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\")\n+\t\t\t(parallel [(const_int 1)]))))]\n+  \"TARGET_PAIRED_FLOAT\"\n+  \"ps_merge11 %0, %1, %2\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"paired_sum0\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n+\t(vec_concat:V2SF (plus:SF (vec_select:SF\n+\t\t\t\t   (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")\n+\t\t\t\t   (parallel [(const_int 0)]))\n+\t\t\t\t  (vec_select:SF\n+\t\t\t\t   (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\")\n+\t\t\t\t   (parallel [(const_int 1)])))\n+\t\t\t (vec_select:SF\n+\t\t\t  (match_operand:V2SF 3 \"gpc_reg_operand\" \"f\")\n+\t\t\t  (parallel [(const_int 1)]))))]\n+  \"TARGET_PAIRED_FLOAT\"\n+  \"ps_sum0 %0,%1,%2,%3\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"paired_sum1\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n+\t(vec_concat:V2SF (vec_select:SF\n+\t\t\t  (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\")\n+\t\t\t  (parallel [(const_int 1)]))\n+\t\t\t (plus:SF (vec_select:SF\n+\t\t\t\t   (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")\n+\t\t\t\t   (parallel [(const_int 0)]))\n+\t\t\t\t  (vec_select:SF\n+\t\t\t\t   (match_operand:V2SF 3 \"gpc_reg_operand\" \"f\")\n+\t\t\t\t   (parallel [(const_int 1)])))))]\n+  \"TARGET_PAIRED_FLOAT\"\n+  \"ps_sum1 %0,%1,%2,%3\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"paired_muls0\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n+\t(mult:V2SF (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\")\n+\t\t   (vec_duplicate:V2SF\n+\t\t    (vec_select:SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")\n+\t\t\t\t   (parallel [(const_int 0)])))))]\n+  \"TARGET_PAIRED_FLOAT\"\n+  \"ps_muls0 %0, %1, %2\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+\n+(define_insn \"paired_muls1\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n+\t(mult:V2SF (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\")\n+\t\t   (vec_duplicate:V2SF\n+\t\t    (vec_select:SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")\n+\t\t\t\t   (parallel [(const_int 1)])))))]\n+  \"TARGET_PAIRED_FLOAT\"\n+  \"ps_muls1 %0, %1, %2\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+"}, {"sha": "03660b7ff07a5169868013aa1c8659966073ba42", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 340, "deletions": 11, "changes": 351, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/960386232ce5d65c424187d6987c2ebf86df4785/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/960386232ce5d65c424187d6987c2ebf86df4785/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=960386232ce5d65c424187d6987c2ebf86df4785", "patch": "@@ -815,6 +815,12 @@ static void altivec_init_builtins (void);\n static void rs6000_common_init_builtins (void);\n static void rs6000_init_libfuncs (void);\n \n+static void paired_init_builtins (void);\n+static rtx paired_expand_builtin (tree, rtx, bool *);\n+static rtx paired_expand_lv_builtin (enum insn_code, tree, rtx);\n+static rtx paired_expand_stv_builtin (enum insn_code, tree);\n+static rtx paired_expand_predicate_builtin (enum insn_code, tree, rtx);\n+\n static void enable_mask_for_builtins (struct builtin_description *, int,\n \t\t\t\t      enum rs6000_builtins,\n \t\t\t\t      enum rs6000_builtins);\n@@ -1224,12 +1230,14 @@ rs6000_hard_regno_mode_ok (int regno, enum machine_mode mode)\n      This excludes the 32-bit decimal float mode for now.  */\n   if (FP_REGNO_P (regno))\n     return\n-      (SCALAR_FLOAT_MODE_P (mode)\n+      ((SCALAR_FLOAT_MODE_P (mode)\n        && (mode != TDmode || (regno % 2) == 0)\n        && mode != SDmode\n        && FP_REGNO_P (regno + HARD_REGNO_NREGS (regno, mode) - 1))\n       || (GET_MODE_CLASS (mode) == MODE_INT\n-\t  && GET_MODE_SIZE (mode) == UNITS_PER_FP_WORD);\n+\t  && GET_MODE_SIZE (mode) == UNITS_PER_FP_WORD)\n+      || (PAIRED_SIMD_REGNO_P (regno) && TARGET_PAIRED_FLOAT\n+           && PAIRED_VECTOR_MODE (mode)));\n \n   /* The CR register can only hold CC modes.  */\n   if (CR_REGNO_P (regno))\n@@ -6594,7 +6602,7 @@ rs6000_gimplify_va_arg (tree valist, tree type, tree *pre_p, tree *post_p)\n static void\n def_builtin (int mask, const char *name, tree type, int code)\n {\n-  if (mask & target_flags)\n+  if ((mask & target_flags) || TARGET_PAIRED_FLOAT)\n     {\n       if (rs6000_builtin_decls[code])\n \tabort ();\n@@ -6648,6 +6656,15 @@ static const struct builtin_description bdesc_3arg[] =\n   { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_nmsub\", ALTIVEC_BUILTIN_VEC_NMSUB },\n   { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_perm\", ALTIVEC_BUILTIN_VEC_PERM },\n   { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_sel\", ALTIVEC_BUILTIN_VEC_SEL },\n+\n+  { 0, CODE_FOR_paired_msub, \"__builtin_paired_msub\", PAIRED_BUILTIN_MSUB },\n+  { 0, CODE_FOR_paired_madd, \"__builtin_paired_madd\", PAIRED_BUILTIN_MADD },\n+  { 0, CODE_FOR_paired_madds0, \"__builtin_paired_madds0\", PAIRED_BUILTIN_MADDS0 },\n+  { 0, CODE_FOR_paired_madds1, \"__builtin_paired_madds1\", PAIRED_BUILTIN_MADDS1 },\n+  { 0, CODE_FOR_paired_nmsub, \"__builtin_paired_nmsub\", PAIRED_BUILTIN_NMSUB },\n+  { 0, CODE_FOR_paired_nmadd, \"__builtin_paired_nmadd\", PAIRED_BUILTIN_NMADD },\n+  { 0, CODE_FOR_paired_sum0, \"__builtin_paired_sum0\", PAIRED_BUILTIN_SUM0 },\n+  { 0, CODE_FOR_paired_sum1, \"__builtin_paired_sum1\", PAIRED_BUILTIN_SUM1 },\n };\n \n /* DST operations: void foo (void *, const int, const char).  */\n@@ -6909,6 +6926,17 @@ static struct builtin_description bdesc_2arg[] =\n   { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_sums\", ALTIVEC_BUILTIN_VEC_SUMS },\n   { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_xor\", ALTIVEC_BUILTIN_VEC_XOR },\n \n+  { 0, CODE_FOR_divv2sf3, \"__builtin_paired_divv2sf3\", PAIRED_BUILTIN_DIVV2SF3 },\n+  { 0, CODE_FOR_addv2sf3, \"__builtin_paired_addv2sf3\", PAIRED_BUILTIN_ADDV2SF3 },\n+  { 0, CODE_FOR_subv2sf3, \"__builtin_paired_subv2sf3\", PAIRED_BUILTIN_SUBV2SF3 },\n+  { 0, CODE_FOR_mulv2sf3, \"__builtin_paired_mulv2sf3\", PAIRED_BUILTIN_MULV2SF3 },\n+  { 0, CODE_FOR_paired_muls0, \"__builtin_paired_muls0\", PAIRED_BUILTIN_MULS0 },\n+  { 0, CODE_FOR_paired_muls1, \"__builtin_paired_muls1\", PAIRED_BUILTIN_MULS1 },\n+  { 0, CODE_FOR_paired_merge00, \"__builtin_paired_merge00\", PAIRED_BUILTIN_MERGE00 },\n+  { 0, CODE_FOR_paired_merge01, \"__builtin_paired_merge01\", PAIRED_BUILTIN_MERGE01 },\n+  { 0, CODE_FOR_paired_merge10, \"__builtin_paired_merge10\", PAIRED_BUILTIN_MERGE10 },\n+  { 0, CODE_FOR_paired_merge11, \"__builtin_paired_merge11\", PAIRED_BUILTIN_MERGE11 },\n+\n   /* Place holder, leave as first spe builtin.  */\n   { 0, CODE_FOR_spe_evaddw, \"__builtin_spe_evaddw\", SPE_BUILTIN_EVADDW },\n   { 0, CODE_FOR_spe_evand, \"__builtin_spe_evand\", SPE_BUILTIN_EVAND },\n@@ -7122,6 +7150,15 @@ static struct builtin_description bdesc_spe_evsel[] =\n   { 0, CODE_FOR_spe_evfststeq, \"__builtin_spe_evsel_fststeq\", SPE_BUILTIN_EVSEL_FSTSTEQ },\n };\n \n+/* PAIRED predicates.  */\n+static const struct builtin_description bdesc_paired_preds[] =\n+{\n+  /* Place-holder.  Leave as first.  */\n+  { 0, CODE_FOR_paired_cmpu0, \"__builtin_paired_cmpu0\", PAIRED_BUILTIN_CMPU0 },\n+  /* Place-holder.  Leave as last.  */\n+  { 0, CODE_FOR_paired_cmpu1, \"__builtin_paired_cmpu1\", PAIRED_BUILTIN_CMPU1 },\n+};\n+\n /* ABS* operations.  */\n \n static const struct builtin_description bdesc_abs[] =\n@@ -7210,7 +7247,13 @@ static struct builtin_description bdesc_1arg[] =\n   { 0, CODE_FOR_spe_evsubfumiaaw, \"__builtin_spe_evsubfumiaaw\", SPE_BUILTIN_EVSUBFUMIAAW },\n \n   /* Place-holder.  Leave as last unary SPE builtin.  */\n-  { 0, CODE_FOR_spe_evsubfusiaaw, \"__builtin_spe_evsubfusiaaw\", SPE_BUILTIN_EVSUBFUSIAAW }\n+  { 0, CODE_FOR_spe_evsubfusiaaw, \"__builtin_spe_evsubfusiaaw\", SPE_BUILTIN_EVSUBFUSIAAW },\n+\n+  { 0, CODE_FOR_absv2sf2, \"__builtin_paired_absv2sf2\", PAIRED_BUILTIN_ABSV2SF2 },\n+  { 0, CODE_FOR_nabsv2sf2, \"__builtin_paired_nabsv2sf2\", PAIRED_BUILTIN_NABSV2SF2 },\n+  { 0, CODE_FOR_negv2sf2, \"__builtin_paired_negv2sf2\", PAIRED_BUILTIN_NEGV2SF2 },\n+  { 0, CODE_FOR_sqrtv2sf2, \"__builtin_paired_sqrtv2sf2\", PAIRED_BUILTIN_SQRTV2SF2 },\n+  { 0, CODE_FOR_resv2sf2, \"__builtin_paired_resv2sf2\", PAIRED_BUILTIN_RESV2SF2 }\n };\n \n static rtx\n@@ -7444,6 +7487,52 @@ altivec_expand_predicate_builtin (enum insn_code icode, const char *opcode,\n   return target;\n }\n \n+static rtx\n+paired_expand_lv_builtin (enum insn_code icode, tree exp, rtx target)\n+{\n+  rtx pat, addr;\n+  tree arg0 = CALL_EXPR_ARG (exp, 0);\n+  tree arg1 = CALL_EXPR_ARG (exp, 1);\n+  enum machine_mode tmode = insn_data[icode].operand[0].mode;\n+  enum machine_mode mode0 = Pmode;\n+  enum machine_mode mode1 = Pmode;\n+  rtx op0 = expand_normal (arg0);\n+  rtx op1 = expand_normal (arg1);\n+\n+  if (icode == CODE_FOR_nothing)\n+    /* Builtin not supported on this processor.  */\n+    return 0;\n+\n+  /* If we got invalid arguments bail out before generating bad rtl.  */\n+  if (arg0 == error_mark_node || arg1 == error_mark_node)\n+    return const0_rtx;\n+\n+  if (target == 0\n+      || GET_MODE (target) != tmode\n+      || ! (*insn_data[icode].operand[0].predicate) (target, tmode))\n+    target = gen_reg_rtx (tmode);\n+\n+  op1 = copy_to_mode_reg (mode1, op1);\n+\n+  if (op0 == const0_rtx)\n+    {\n+      addr = gen_rtx_MEM (tmode, op1);\n+    }\n+  else\n+    {\n+      op0 = copy_to_mode_reg (mode0, op0);\n+      addr = gen_rtx_MEM (tmode, gen_rtx_PLUS (Pmode, op0, op1));\n+    }\n+\n+  pat = GEN_FCN (icode) (target, addr);\n+\n+  if (! pat)\n+    return 0;\n+  emit_insn (pat);\n+\n+  return target;\n+}\n+\n static rtx\n altivec_expand_lv_builtin (enum insn_code icode, tree exp, rtx target)\n {\n@@ -7523,6 +7612,47 @@ spe_expand_stv_builtin (enum insn_code icode, tree exp)\n   return NULL_RTX;\n }\n \n+static rtx\n+paired_expand_stv_builtin (enum insn_code icode, tree exp)\n+{\n+  tree arg0 = CALL_EXPR_ARG (exp, 0);\n+  tree arg1 = CALL_EXPR_ARG (exp, 1);\n+  tree arg2 = CALL_EXPR_ARG (exp, 2);\n+  rtx op0 = expand_normal (arg0);\n+  rtx op1 = expand_normal (arg1);\n+  rtx op2 = expand_normal (arg2);\n+  rtx pat, addr;\n+  enum machine_mode tmode = insn_data[icode].operand[0].mode;\n+  enum machine_mode mode1 = Pmode;\n+  enum machine_mode mode2 = Pmode;\n+\n+  /* Invalid arguments.  Bail before doing anything stoopid!  */\n+  if (arg0 == error_mark_node\n+      || arg1 == error_mark_node\n+      || arg2 == error_mark_node)\n+    return const0_rtx;\n+\n+  if (! (*insn_data[icode].operand[1].predicate) (op0, tmode))\n+    op0 = copy_to_mode_reg (tmode, op0);\n+\n+  op2 = copy_to_mode_reg (mode2, op2);\n+\n+  if (op1 == const0_rtx)\n+    {\n+      addr = gen_rtx_MEM (tmode, op2);\n+    }\n+  else\n+    {\n+      op1 = copy_to_mode_reg (mode1, op1);\n+      addr = gen_rtx_MEM (tmode, gen_rtx_PLUS (Pmode, op1, op2));\n+    }\n+\n+  pat = GEN_FCN (icode) (addr, op0);\n+  if (pat)\n+    emit_insn (pat);\n+  return NULL_RTX;\n+}\n+\n static rtx\n altivec_expand_stv_builtin (enum insn_code icode, tree exp)\n {\n@@ -8071,6 +8201,39 @@ altivec_expand_builtin (tree exp, rtx target, bool *expandedp)\n   return NULL_RTX;\n }\n \n+/* Expand the builtin in EXP and store the result in TARGET.  Store\n+   true in *EXPANDEDP if we found a builtin to expand.  */\n+static rtx\n+paired_expand_builtin (tree exp, rtx target, bool * expandedp)\n+{\n+  tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n+  unsigned int fcode = DECL_FUNCTION_CODE (fndecl);\n+  struct builtin_description *d;\n+  size_t i;\n+\n+  *expandedp = true;\n+\n+  switch (fcode)\n+    {\n+    case PAIRED_BUILTIN_STX:\n+      return paired_expand_stv_builtin (CODE_FOR_paired_stx, exp);\n+    case PAIRED_BUILTIN_LX:\n+      return paired_expand_lv_builtin (CODE_FOR_paired_lx, exp, target);\n+    default:\n+      break;\n+      /* Fall through.  */\n+    }\n+\n+  /* Expand the paired predicates.  */\n+  d = (struct builtin_description *) bdesc_paired_preds;\n+  for (i = 0; i < ARRAY_SIZE (bdesc_paired_preds); i++, d++)\n+    if (d->code == fcode)\n+      return paired_expand_predicate_builtin (d->icode, exp, target);\n+\n+  *expandedp = false;\n+  return NULL_RTX;\n+}\n+\n /* Binops that need to be initialized manually, but can be expanded\n    automagically by rs6000_expand_binop_builtin.  */\n static struct builtin_description bdesc_2arg_spe[] =\n@@ -8236,6 +8399,78 @@ spe_expand_builtin (tree exp, rtx target, bool *expandedp)\n   return NULL_RTX;\n }\n \n+static rtx\n+paired_expand_predicate_builtin (enum insn_code icode, tree exp, rtx target)\n+{\n+  rtx pat, scratch, tmp;\n+  tree form = CALL_EXPR_ARG (exp, 0);\n+  tree arg0 = CALL_EXPR_ARG (exp, 1);\n+  tree arg1 = CALL_EXPR_ARG (exp, 2);\n+  rtx op0 = expand_normal (arg0);\n+  rtx op1 = expand_normal (arg1);\n+  enum machine_mode mode0 = insn_data[icode].operand[1].mode;\n+  enum machine_mode mode1 = insn_data[icode].operand[2].mode;\n+  int form_int;\n+  enum rtx_code code;\n+\n+  if (TREE_CODE (form) != INTEGER_CST)\n+    {\n+      error (\"argument 1 of __builtin_paired_predicate must be a constant\");\n+      return const0_rtx;\n+    }\n+  else\n+    form_int = TREE_INT_CST_LOW (form);\n+\n+  gcc_assert (mode0 == mode1);\n+\n+  if (arg0 == error_mark_node || arg1 == error_mark_node)\n+    return const0_rtx;\n+\n+  if (target == 0\n+      || GET_MODE (target) != SImode\n+      || !(*insn_data[icode].operand[0].predicate) (target, SImode))\n+    target = gen_reg_rtx (SImode);\n+  if (!(*insn_data[icode].operand[1].predicate) (op0, mode0))\n+    op0 = copy_to_mode_reg (mode0, op0);\n+  if (!(*insn_data[icode].operand[2].predicate) (op1, mode1))\n+    op1 = copy_to_mode_reg (mode1, op1);\n+\n+  scratch = gen_reg_rtx (CCFPmode);\n+\n+  pat = GEN_FCN (icode) (scratch, op0, op1);\n+  if (!pat)\n+    return const0_rtx;\n+\n+  emit_insn (pat);\n+\n+  switch (form_int)\n+    {\n+      /* LT bit.  */\n+    case 0:\n+      code = LT;\n+      break;\n+      /* GT bit.  */\n+    case 1:\n+      code = GT;\n+      break;\n+      /* EQ bit.  */\n+    case 2:\n+      code = EQ;\n+      break;\n+      /* UN bit.  */\n+    case 3:\n+      emit_insn (gen_move_from_CR_ov_bit (target, scratch));\n+      return target;\n+    default:\n+      error (\"argument 1 of __builtin_paired_predicate is out of range\");\n+      return const0_rtx;\n+    }\n+\n+  tmp = gen_rtx_fmt_ee (code, SImode, scratch, const0_rtx);\n+  emit_move_insn (target, tmp);\n+  return target;\n+}\n+\n static rtx\n spe_expand_predicate_builtin (enum insn_code icode, tree exp, rtx target)\n {\n@@ -8476,8 +8711,15 @@ rs6000_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n       if (success)\n \treturn ret;\n     }\n+  if (TARGET_PAIRED_FLOAT)\n+    {\n+      ret = paired_expand_builtin (exp, target, &success);\n+\n+      if (success)\n+\treturn ret;\n+    }  \n \n-  gcc_assert (TARGET_ALTIVEC || TARGET_SPE);\n+  gcc_assert (TARGET_ALTIVEC || TARGET_SPE || TARGET_PAIRED_FLOAT);\n \n   /* Handle simple unary operations.  */\n   d = (struct builtin_description *) bdesc_1arg;\n@@ -8603,11 +8845,13 @@ rs6000_init_builtins (void)\n \t\t\t\t\t    get_identifier (\"__vector __pixel\"),\n \t\t\t\t\t    pixel_V8HI_type_node));\n \n+  if (TARGET_PAIRED_FLOAT)\n+    paired_init_builtins ();\n   if (TARGET_SPE)\n     spe_init_builtins ();\n   if (TARGET_ALTIVEC)\n     altivec_init_builtins ();\n-  if (TARGET_ALTIVEC || TARGET_SPE)\n+  if (TARGET_ALTIVEC || TARGET_SPE || TARGET_PAIRED_FLOAT)\n     rs6000_common_init_builtins ();\n \n #if TARGET_XCOFF\n@@ -8864,6 +9108,62 @@ spe_init_builtins (void)\n     }\n }\n \n+static void\n+paired_init_builtins (void)\n+{\n+  struct builtin_description *d;\n+  size_t i;\n+  tree endlink = void_list_node;\n+\n+   tree int_ftype_int_v2sf_v2sf\n+    = build_function_type\n+    (integer_type_node,\n+     tree_cons (NULL_TREE, integer_type_node,\n+                tree_cons (NULL_TREE, V2SF_type_node,\n+                           tree_cons (NULL_TREE, V2SF_type_node,\n+                                      endlink))));\n+  tree pcfloat_type_node =\n+    build_pointer_type (build_qualified_type\n+\t\t\t(float_type_node, TYPE_QUAL_CONST));\n+\n+  tree v2sf_ftype_long_pcfloat = build_function_type_list (V2SF_type_node,\n+\t\t\t\t\t\t\t   long_integer_type_node,\n+\t\t\t\t\t\t\t   pcfloat_type_node,\n+\t\t\t\t\t\t\t   NULL_TREE);\n+  tree void_ftype_v2sf_long_pcfloat =\n+    build_function_type_list (void_type_node,\n+\t\t\t      V2SF_type_node,\n+\t\t\t      long_integer_type_node,\n+\t\t\t      pcfloat_type_node,\n+\t\t\t      NULL_TREE);\n+\n+\n+  def_builtin (0, \"__builtin_paired_lx\", v2sf_ftype_long_pcfloat,\n+\t       PAIRED_BUILTIN_LX);\n+\n+\n+  def_builtin (0, \"__builtin_paired_stx\", void_ftype_v2sf_long_pcfloat,\n+\t       PAIRED_BUILTIN_STX);\n+\n+  /* Predicates.  */\n+  d = (struct builtin_description *) bdesc_paired_preds;\n+  for (i = 0; i < ARRAY_SIZE (bdesc_paired_preds); ++i, d++)\n+    {\n+      tree type;\n+\n+      switch (insn_data[d->icode].operand[1].mode)\n+\t{\n+\tcase V2SFmode:\n+\t  type = int_ftype_int_v2sf_v2sf;\n+\t  break;\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n+\n+      def_builtin (d->mask, d->name, type, d->code);\n+    }\n+}\n+\n static void\n altivec_init_builtins (void)\n {\n@@ -9226,6 +9526,11 @@ rs6000_common_init_builtins (void)\n   const struct builtin_description *d;\n   size_t i;\n \n+  tree v2sf_ftype_v2sf_v2sf_v2sf\n+    = build_function_type_list (V2SF_type_node,\n+                                V2SF_type_node, V2SF_type_node,\n+                                V2SF_type_node, NULL_TREE);\n+\n   tree v4sf_ftype_v4sf_v4sf_v16qi\n     = build_function_type_list (V4SF_type_node,\n \t\t\t\tV4SF_type_node, V4SF_type_node,\n@@ -9258,11 +9563,17 @@ rs6000_common_init_builtins (void)\n \t\t\t\topaque_V2SI_type_node,\n \t\t\t\topaque_V2SI_type_node, NULL_TREE);\n \n-  tree v2sf_ftype_v2sf_v2sf\n+  tree v2sf_ftype_v2sf_v2sf_spe\n     = build_function_type_list (opaque_V2SF_type_node,\n \t\t\t\topaque_V2SF_type_node,\n \t\t\t\topaque_V2SF_type_node, NULL_TREE);\n \n+  tree v2sf_ftype_v2sf_v2sf\n+    = build_function_type_list (V2SF_type_node,\n+                                V2SF_type_node,\n+                                V2SF_type_node, NULL_TREE);\n+\n+\n   tree v2si_ftype_int_int\n     = build_function_type_list (opaque_V2SI_type_node,\n \t\t\t\tinteger_type_node, integer_type_node,\n@@ -9276,10 +9587,14 @@ rs6000_common_init_builtins (void)\n     = build_function_type_list (opaque_V2SI_type_node,\n \t\t\t\topaque_V2SI_type_node, NULL_TREE);\n \n-  tree v2sf_ftype_v2sf\n+  tree v2sf_ftype_v2sf_spe\n     = build_function_type_list (opaque_V2SF_type_node,\n \t\t\t\topaque_V2SF_type_node, NULL_TREE);\n \n+  tree v2sf_ftype_v2sf\n+    = build_function_type_list (V2SF_type_node,\n+                                V2SF_type_node, NULL_TREE);\n+\n   tree v2sf_ftype_v2si\n     = build_function_type_list (opaque_V2SF_type_node,\n \t\t\t\topaque_V2SI_type_node, NULL_TREE);\n@@ -9466,6 +9781,9 @@ rs6000_common_init_builtins (void)\n \t    case V16QImode:\n \t      type = v16qi_ftype_v16qi_v16qi_v16qi;\n \t      break;\n+            case V2SFmode:\n+                type = v2sf_ftype_v2sf_v2sf_v2sf;\n+              break;\n \t    default:\n \t      gcc_unreachable ();\n \t    }\n@@ -9574,8 +9892,11 @@ rs6000_common_init_builtins (void)\n \t    case V2SImode:\n \t      type = v2si_ftype_v2si_v2si;\n \t      break;\n-\t    case V2SFmode:\n-\t      type = v2sf_ftype_v2sf_v2sf;\n+            case V2SFmode:\n+              if (TARGET_PAIRED_FLOAT)\n+                type = v2sf_ftype_v2sf_v2sf;\n+              else\n+                type = v2sf_ftype_v2sf_v2sf_spe;\n \t      break;\n \t    case SImode:\n \t      type = int_ftype_int_int;\n@@ -9714,7 +10035,12 @@ rs6000_common_init_builtins (void)\n       else if (mode0 == V2SImode && mode1 == V2SImode)\n \ttype = v2si_ftype_v2si;\n       else if (mode0 == V2SFmode && mode1 == V2SFmode)\n-\ttype = v2sf_ftype_v2sf;\n+        {\n+          if (TARGET_PAIRED_FLOAT)\n+            type = v2sf_ftype_v2sf;\n+          else\n+            type = v2sf_ftype_v2sf_spe;\n+        }\n       else if (mode0 == V2SFmode && mode1 == V2SImode)\n \ttype = v2sf_ftype_v2si;\n       else if (mode0 == V2SImode && mode1 == V2SFmode)\n@@ -21094,6 +21420,9 @@ static bool\n rs6000_vector_mode_supported_p (enum machine_mode mode)\n {\n \n+  if (TARGET_PAIRED_FLOAT && PAIRED_VECTOR_MODE (mode))\n+    return true;\n+\n   if (TARGET_SPE && SPE_VECTOR_MODE (mode))\n     return true;\n "}, {"sha": "b7dced33aad1bc2db6fd2e9cf8b1e8a2d1d64315", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 50, "deletions": 6, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/960386232ce5d65c424187d6987c2ebf86df4785/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/960386232ce5d65c424187d6987c2ebf86df4785/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=960386232ce5d65c424187d6987c2ebf86df4785", "patch": "@@ -56,6 +56,10 @@\n #define PPC405_ERRATUM77 0\n #endif\n \n+#ifndef TARGET_PAIRED_FLOAT\n+#define TARGET_PAIRED_FLOAT 0\n+#endif\n+\n /* Common ASM definitions used by ASM_SPEC among the various targets\n    for handling -mcpu=xxx switches.  */\n #define ASM_CPU_SPEC \\\n@@ -472,6 +476,7 @@ extern enum rs6000_nop_insertion rs6000_sched_insert_nops;\n #define UNITS_PER_FP_WORD 8\n #define UNITS_PER_ALTIVEC_WORD 16\n #define UNITS_PER_SPE_WORD 8\n+#define UNITS_PER_PAIRED_WORD 8\n \n /* Type used for ptrdiff_t, as a string used in a declaration.  */\n #define PTRDIFF_TYPE \"int\"\n@@ -555,8 +560,10 @@ extern enum rs6000_nop_insertion rs6000_sched_insert_nops;\n #define LOCAL_ALIGNMENT(TYPE, ALIGN)\t\t\t\t\\\n   ((TARGET_ALTIVEC && TREE_CODE (TYPE) == VECTOR_TYPE) ? 128 :\t\\\n     (TARGET_E500_DOUBLE && TYPE_MODE (TYPE) == DFmode) ? 64 : \\\n-    (TARGET_SPE && TREE_CODE (TYPE) == VECTOR_TYPE \\\n-     && SPE_VECTOR_MODE (TYPE_MODE (TYPE))) ? 64 : ALIGN)\n+    ((TARGET_SPE && TREE_CODE (TYPE) == VECTOR_TYPE \\\n+     && SPE_VECTOR_MODE (TYPE_MODE (TYPE))) || (TARGET_PAIRED_FLOAT \\\n+        && TREE_CODE (TYPE) == VECTOR_TYPE \\\n+        && PAIRED_VECTOR_MODE (TYPE_MODE (TYPE)))) ? 64 : ALIGN)\n \n /* Alignment of field after `int : 0' in a structure.  */\n #define EMPTY_FIELD_BOUNDARY 32\n@@ -595,7 +602,8 @@ extern enum rs6000_nop_insertion rs6000_sched_insert_nops;\n    Align vectors to 128 bits.  Align SPE vectors and E500 v2 doubles to\n    64 bits.  */\n #define DATA_ALIGNMENT(TYPE, ALIGN)\t\t\\\n-  (TREE_CODE (TYPE) == VECTOR_TYPE ? (TARGET_SPE_ABI ? 64 : 128)\t\\\n+  (TREE_CODE (TYPE) == VECTOR_TYPE ? ((TARGET_SPE_ABI \\\n+   || TARGET_PAIRED_FLOAT) ? 64 : 128)\t\\\n    : (TARGET_E500_DOUBLE && TYPE_MODE (TYPE) == DFmode) ? 64 \\\n    : TREE_CODE (TYPE) == ARRAY_TYPE\t\t\\\n    && TYPE_MODE (TREE_TYPE (TYPE)) == QImode\t\\\n@@ -831,6 +839,9 @@ extern enum rs6000_nop_insertion rs6000_sched_insert_nops;\n /* SPE SIMD registers are just the GPRs.  */\n #define SPE_SIMD_REGNO_P(N) ((N) <= 31)\n \n+/* PAIRED SIMD registers are just the FPRs.  */\n+#define PAIRED_SIMD_REGNO_P(N) ((N) >= 32 && (N) <= 63)\n+\n /* True if register is the XER register.  */\n #define XER_REGNO_P(N) ((N) == XER_REGNO)\n \n@@ -859,9 +870,13 @@ extern enum rs6000_nop_insertion rs6000_sched_insert_nops;\n          || (MODE) == V1DImode          \\\n          || (MODE) == V2SImode)\n \n-#define UNITS_PER_SIMD_WORD\t\t\t\t\t\\\n-        (TARGET_ALTIVEC ? UNITS_PER_ALTIVEC_WORD\t\t\\\n-\t : (TARGET_SPE ? UNITS_PER_SPE_WORD : UNITS_PER_WORD))\n+#define PAIRED_VECTOR_MODE(MODE)        \\\n+         ((MODE) == V2SFmode)            \n+\n+#define UNITS_PER_SIMD_WORD\t\t\t\t\t     \\\n+\t(TARGET_ALTIVEC ? UNITS_PER_ALTIVEC_WORD\t\t     \\\n+\t : (TARGET_SPE ? UNITS_PER_SPE_WORD : (TARGET_PAIRED_FLOAT ? \\\n+\t UNITS_PER_PAIRED_WORD : UNITS_PER_WORD)))\n \n /* Value is TRUE if hard register REGNO can hold a value of\n    machine-mode MODE.  */\n@@ -2949,6 +2964,35 @@ enum rs6000_builtins\n   SPE_BUILTIN_MFSPEFSCR,\n   SPE_BUILTIN_BRINC,\n \n+  /* PAIRED builtins.  */\n+  PAIRED_BUILTIN_DIVV2SF3,\n+  PAIRED_BUILTIN_ABSV2SF2,\n+  PAIRED_BUILTIN_NEGV2SF2,\n+  PAIRED_BUILTIN_SQRTV2SF2,\n+  PAIRED_BUILTIN_ADDV2SF3,\n+  PAIRED_BUILTIN_SUBV2SF3,\n+  PAIRED_BUILTIN_RESV2SF2,\n+  PAIRED_BUILTIN_MULV2SF3,\n+  PAIRED_BUILTIN_MSUB,\n+  PAIRED_BUILTIN_MADD,\n+  PAIRED_BUILTIN_NMSUB,\n+  PAIRED_BUILTIN_NMADD,\n+  PAIRED_BUILTIN_NABSV2SF2,\n+  PAIRED_BUILTIN_SUM0,\n+  PAIRED_BUILTIN_SUM1,\n+  PAIRED_BUILTIN_MULS0,\n+  PAIRED_BUILTIN_MULS1,\n+  PAIRED_BUILTIN_MERGE00,\n+  PAIRED_BUILTIN_MERGE01,\n+  PAIRED_BUILTIN_MERGE10,\n+  PAIRED_BUILTIN_MERGE11,\n+  PAIRED_BUILTIN_MADDS0,\n+  PAIRED_BUILTIN_MADDS1,\n+  PAIRED_BUILTIN_STX,\n+  PAIRED_BUILTIN_LX,\n+  PAIRED_BUILTIN_CMPU0,\n+  PAIRED_BUILTIN_CMPU1,\n+\n   RS6000_BUILTIN_COUNT\n };\n "}, {"sha": "e3505d1e5ae83c497ba7adb3dd09bddd98830ad1", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/960386232ce5d65c424187d6987c2ebf86df4785/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/960386232ce5d65c424187d6987c2ebf86df4785/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=960386232ce5d65c424187d6987c2ebf86df4785", "patch": "@@ -14568,3 +14568,4 @@\n (include \"altivec.md\")\n (include \"spe.md\")\n (include \"dfp.md\")\n+(include \"paired.md\")"}, {"sha": "49800633935b8f94111feb1920fa6eb256adaa79", "filename": "gcc/config/rs6000/rs6000.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/960386232ce5d65c424187d6987c2ebf86df4785/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/960386232ce5d65c424187d6987c2ebf86df4785/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.opt?ref=960386232ce5d65c424187d6987c2ebf86df4785", "patch": "@@ -201,6 +201,10 @@ mspe\n Target Var(rs6000_spe)\n Generate SPE SIMD instructions on E500\n \n+mpaired\n+Target Var(rs6000_paired_float)\n+Generate PPC750CL paired-single instructions\n+\n mspe=\n Target RejectNegative Joined\n -mspe=yes/no\tDeprecated option.  Use -mspe/-mno-spe instead"}, {"sha": "1b66343bab2cf1edaa266e9064846b87a451a18d", "filename": "gcc/config/rs6000/spe.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/960386232ce5d65c424187d6987c2ebf86df4785/gcc%2Fconfig%2Frs6000%2Fspe.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/960386232ce5d65c424187d6987c2ebf86df4785/gcc%2Fconfig%2Frs6000%2Fspe.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fspe.md?ref=960386232ce5d65c424187d6987c2ebf86df4785", "patch": "@@ -2678,7 +2678,7 @@\n (define_expand \"movv2sf\"\n   [(set (match_operand:V2SF 0 \"nonimmediate_operand\" \"\")\n \t(match_operand:V2SF 1 \"any_operand\" \"\"))]\n-  \"TARGET_SPE\"\n+  \"TARGET_SPE || TARGET_PAIRED_FLOAT\"\n   \"{ rs6000_emit_move (operands[0], operands[1], V2SFmode); DONE; }\")\n \n (define_insn \"*movv2sf_internal\""}, {"sha": "61b7f72493d279c648fbf588032fc219d0401598", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/960386232ce5d65c424187d6987c2ebf86df4785/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/960386232ce5d65c424187d6987c2ebf86df4785/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=960386232ce5d65c424187d6987c2ebf86df4785", "patch": "@@ -704,6 +704,7 @@ See RS/6000 and PowerPC Options.\n -misel=yes  -misel=no @gol\n -mspe -mno-spe @gol\n -mspe=yes  -mspe=no @gol\n+-mpaired @gol\n -mvrsave -mno-vrsave @gol\n -mmulhw -mno-mulhw @gol\n -mdlmzb -mno-dlmzb @gol\n@@ -12582,6 +12583,13 @@ This switch has been deprecated.  Use @option{-misel} and\n This switch enables or disables the generation of SPE simd\n instructions.\n \n+@item -mpaired\n+@itemx -mno-paired\n+@opindex mpaired\n+@opindex mno-paired\n+This switch enables or disables the generation of PAIRED simd\n+instructions.\n+\n @item -mspe=@var{yes/no}\n This option has been deprecated.  Use @option{-mspe} and\n @option{-mno-spe} instead."}, {"sha": "f3d9fd7a417051ca03d02c2aad15758b17f7c7b9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/960386232ce5d65c424187d6987c2ebf86df4785/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/960386232ce5d65c424187d6987c2ebf86df4785/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=960386232ce5d65c424187d6987c2ebf86df4785", "patch": "@@ -1,3 +1,15 @@\n+2007-08-31  David Edelsohn  <edelsohn@gnu.org>\n+            Revital Eres  <eres@il.ibm.com>\n+\n+        * gcc.target/powerpc/paired-1.c: New test.\n+        * gcc.target/powerpc/paired-2.c: New test.\n+        * gcc.target/powerpc/paired-3.c: New test.\n+        * gcc.target/powerpc/paired-4.c: New test.\n+        * gcc.target/powerpc/paired-5.c: New test.\n+        * gcc.target/powerpc/paired-6.c: New test.\n+        * gcc.target/powerpc/paired-7.c: New test.\n+        * gcc.target/powerpc/ppc-paired.c: New test.\n+\n 2007-08-30  Ollie Wild  <aaw@google.com>\n \n \tg++.dg/conversion/ptrmem2.C: New test."}, {"sha": "641a8e022f8cfccda713be7c14caa04720c3a9af", "filename": "gcc/testsuite/gcc.target/powerpc/paired-1.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/960386232ce5d65c424187d6987c2ebf86df4785/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpaired-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/960386232ce5d65c424187d6987c2ebf86df4785/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpaired-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpaired-1.c?ref=960386232ce5d65c424187d6987c2ebf86df4785", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile { target powerpc-*-linux*paired* } } */\n+/* { dg-options \"-mpaired -m32 -ffinite-math-only \" } */\n+\n+/* Test PowerPC PAIRED extensions.  */\n+\n+#include <paired.h>\n+\n+static float in1[2] __attribute__ ((aligned (8))) =\n+{6.0, 7.0};\n+static float in2[2] __attribute__ ((aligned (8))) =\n+{4.0, 3.0};\n+\n+static float out[2] __attribute__ ((aligned (8)));\n+\n+vector float a, b, c, d;\n+void\n+test_api ()\n+{\n+  b = paired_lx (0, in1);\n+  c = paired_lx (0, in2);\n+\n+  a = paired_sub (b, c);\n+\n+  paired_stx (a, 0, out);\n+}\n+\n+int\n+main ()\n+{\n+  test_api ();\n+  return (0);\n+}\n+"}, {"sha": "ef409027fd2cf370377c0d365d73fd942d4a4860", "filename": "gcc/testsuite/gcc.target/powerpc/paired-2.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/960386232ce5d65c424187d6987c2ebf86df4785/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpaired-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/960386232ce5d65c424187d6987c2ebf86df4785/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpaired-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpaired-2.c?ref=960386232ce5d65c424187d6987c2ebf86df4785", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do compile { target powerpc-*-linux*paired* } } */\n+/* { dg-options \"-mpaired -m32 -ffinite-math-only\" } */\n+\n+/* Test PowerPC PAIRED extensions.  */\n+\n+#include <paired.h>\n+#include <stdlib.h>\n+\n+static float out[2] __attribute__ ((aligned (8)));\n+\n+vector float b = { 3.0, 8.0 };\n+vector float c = { 3.0, 5.0 };\n+\n+vector float a = { 0.0, 0.0 };\n+void\n+test_api ()\n+{\n+\n+  if (paired_cmpu0_eq (b, c))\n+    {\n+      a = paired_sub (b, c);\n+      paired_stx (a, 0, out);\n+    }\n+\n+  if ((out[1]) != 3.0)\n+    abort ();\n+}\n+\n+int\n+main ()\n+{\n+  test_api ();\n+  return (0);\n+}\n+"}, {"sha": "756d6e111fca51e5dd26452a7faeafd5bce7c6b5", "filename": "gcc/testsuite/gcc.target/powerpc/paired-3.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/960386232ce5d65c424187d6987c2ebf86df4785/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpaired-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/960386232ce5d65c424187d6987c2ebf86df4785/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpaired-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpaired-3.c?ref=960386232ce5d65c424187d6987c2ebf86df4785", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile { target powerpc-*-linux*paired* } } */\n+/* { dg-options \"-mpaired -m32 -ffinite-math-only\" } */\n+\n+/* Test PowerPC PAIRED extensions.  */\n+\n+#include <paired.h>\n+#include <stdlib.h>\n+\n+static float out[2] __attribute__ ((aligned (8)));\n+\n+vector float b = { 2.0, 8.0 };\n+vector float c = { 3.0, 5.0 };\n+\n+vector float a = { 0.0, 0.0 };\n+void\n+test_api ()\n+{\n+\n+  if (paired_cmpu0_lt (b, c))\n+    {\n+      a = paired_add (b, c);\n+      paired_stx (a, 0, out);\n+    }\n+  if ((out[0] != 5.0) || (out[1] != 13.0))\n+    abort ();\n+}\n+\n+int\n+main ()\n+{\n+  test_api ();\n+  return (0);\n+}\n+"}, {"sha": "3d5c1549bc047f8fd90811feede88ebebcbae563", "filename": "gcc/testsuite/gcc.target/powerpc/paired-4.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/960386232ce5d65c424187d6987c2ebf86df4785/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpaired-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/960386232ce5d65c424187d6987c2ebf86df4785/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpaired-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpaired-4.c?ref=960386232ce5d65c424187d6987c2ebf86df4785", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile { target powerpc-*-linux*paired* } } */\n+/* { dg-options \"-mpaired -m32 -ffinite-math-only\" } */\n+\n+/* Test PowerPC PAIRED extensions.  */\n+\n+#include <paired.h>\n+#include <stdlib.h>\n+\n+static float out[2] __attribute__ ((aligned (8)));\n+\n+vector float b = { 3.0, 8.0 };\n+vector float c = { 2.0, 5.0 };\n+\n+vector float a = { 0.0, 0.0 };\n+void\n+test_api ()\n+{\n+\n+  if (paired_cmpu0_gt (b, c))\n+    {\n+      a = paired_add (b, c);\n+      paired_stx (a, 0, out);\n+    }\n+  if ((out[0] != 5.0) || (out[1] != 13.0))\n+    abort ();\n+}\n+\n+int\n+main ()\n+{\n+  test_api ();\n+  return (0);\n+}\n+"}, {"sha": "df3bb4441848de5472107e43b8447a71b429ed10", "filename": "gcc/testsuite/gcc.target/powerpc/paired-5.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/960386232ce5d65c424187d6987c2ebf86df4785/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpaired-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/960386232ce5d65c424187d6987c2ebf86df4785/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpaired-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpaired-5.c?ref=960386232ce5d65c424187d6987c2ebf86df4785", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile { target powerpc-*-linux*paired* } } */\n+/* { dg-options \"-mpaired -m32 -ffinite-math-only\" } */\n+\n+/* Test PowerPC PAIRED extensions.  */\n+\n+#include <paired.h>\n+#include <stdlib.h>\n+\n+static float out[2] __attribute__ ((aligned (8)));\n+\n+vector float b = { 3.0, 5.0 };\n+vector float c = { 2.0, 5.0 };\n+\n+vector float a = { 0.0, 0.0 };\n+void\n+test_api ()\n+{\n+\n+  if (paired_cmpu1_eq (b, c))\n+    {\n+      a = paired_add (b, c);\n+      paired_stx (a, 0, out);\n+    }\n+  if ((out[0] != 5.0) || (out[1] != 10.0))\n+    abort ();\n+}\n+\n+int\n+main ()\n+{\n+  test_api ();\n+  return (0);\n+}\n+"}, {"sha": "0d6ab52e9a74adca1720ee1527a3436d6ddb5864", "filename": "gcc/testsuite/gcc.target/powerpc/paired-6.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/960386232ce5d65c424187d6987c2ebf86df4785/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpaired-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/960386232ce5d65c424187d6987c2ebf86df4785/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpaired-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpaired-6.c?ref=960386232ce5d65c424187d6987c2ebf86df4785", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile { target powerpc-*-linux*paired* } } */\n+/* { dg-options \"-mpaired -m32 -ffinite-math-only\" } */\n+\n+/* Test PowerPC PAIRED extensions.  */\n+\n+#include <paired.h>\n+#include <stdlib.h>\n+\n+static float out[2] __attribute__ ((aligned (8)));\n+\n+vector float b = { 3.0, 5.0 };\n+vector float c = { 2.0, 6.0 };\n+\n+vector float a = { 0.0, 0.0 };\n+void\n+test_api ()\n+{\n+\n+  if (paired_cmpu1_lt (b, c))\n+    {\n+      a = paired_add (b, c);\n+      paired_stx (a, 0, out);\n+    }\n+  if ((out[0] != 5.0) || (out[1] != 11.0))\n+    abort ();\n+}\n+\n+int\n+main ()\n+{\n+  test_api ();\n+  return (0);\n+}\n+"}, {"sha": "aa1edd033c0bab25a5edd6233785e186ecbde482", "filename": "gcc/testsuite/gcc.target/powerpc/paired-7.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/960386232ce5d65c424187d6987c2ebf86df4785/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpaired-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/960386232ce5d65c424187d6987c2ebf86df4785/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpaired-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpaired-7.c?ref=960386232ce5d65c424187d6987c2ebf86df4785", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile { target powerpc-*-linux*paired* } } */\n+/* { dg-options \"-mpaired -m32 -ffinite-math-only\" } */\n+\n+/* Test PowerPC PAIRED extensions.  */\n+\n+#include <paired.h>\n+#include <stdlib.h>\n+\n+static float out[2] __attribute__ ((aligned (8)));\n+\n+vector float b = { 2.0, 8.0 };\n+vector float c = { 3.0, 6.0 };\n+\n+vector float a = { 0.0, 0.0 };\n+void\n+test_api ()\n+{\n+\n+  if (paired_cmpu1_gt (b, c))\n+    {\n+      a = paired_add (b, c);\n+      paired_stx (a, 0, out);\n+    }\n+  if ((out[0] != 5.0) || (out[1] != 14.0))\n+    abort ();\n+}\n+\n+int\n+main ()\n+{\n+  test_api ();\n+  return (0);\n+}\n+"}, {"sha": "f6f3b6e5babcd0b917c1cb90a5ce7496ac4e7c98", "filename": "gcc/testsuite/gcc.target/powerpc/ppc-paired.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/960386232ce5d65c424187d6987c2ebf86df4785/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-paired.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/960386232ce5d65c424187d6987c2ebf86df4785/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-paired.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-paired.c?ref=960386232ce5d65c424187d6987c2ebf86df4785", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do compile { target powerpc-*-linux*paired* } } */\n+/* { dg-options \"-mpaired -m32 -ffinite-math-only\" } */\n+\n+/* Test PowerPC PAIRED extensions.  */\n+\n+#include <paired.h>\n+\n+vector float a, b, c, d;\n+\n+void\n+test_api ()\n+{\n+  b = paired_msub (b, c, d);\n+  b = paired_madd (b, c, d);\n+  b = paired_nmadd (b, c, d);\n+  b = paired_nmsub (b, c, d);\n+  b = paired_sum0 (a, b, c);\n+  b = paired_sum1 (a, b, c);\n+  b = paired_div (b, c);\n+  b = paired_add (a, c);\n+  b = paired_sub (a, c);\n+  b = paired_mul (a, c);\n+  b = paired_neg (a);\n+  b = paired_muls0 (a, c);\n+  b = paired_muls1 (a, c);\n+  b = paired_madds0 (a, c, d);\n+  b = paired_madds1 (a, c, d);\n+  b = paired_merge00 (a, c);\n+  b = paired_merge01 (a, c);\n+  b = paired_merge10 (a, c);\n+  b = paired_merge11 (a, c);\n+  b = paired_abs (a);\n+  b = paired_nabs (a);\n+  b = paired_sqrt (a);\n+  b = paired_res (a);\n+}\n+\n+int\n+main (void)\n+{\n+  test_api ();\n+  return 0;\n+}\n+"}]}