{"sha": "0a39f241944cfb7090d73e076913ff068a1cc32f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGEzOWYyNDE5NDRjZmI3MDkwZDczZTA3NjkxM2ZmMDY4YTFjYzMyZg==", "commit": {"author": {"name": "Steve Baird", "email": "baird@adacore.com", "date": "2019-09-17T08:02:04Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-09-17T08:02:04Z"}, "message": "[Ada] Don't accept illegal (e.g., Integer'(null)) generic actuals\n\nSem_Util.Wrong_Type usually emits an error message, but in some cases it\ndoes not. The code which prevents emitting an error message was going\ntoo far in some cases, causing illegal constructs to be accepted. For\nexample, a qualified expression such as Integer'(null) might be passed\nin as an actual parameter in an instantiation of a generic and generate\nno error message.\n\nRunning this command:\n\n  gcc -c inst.ads\n\nOn the following sources:\n\npackage Inst is\n   type Ptr is new Integer;\n\n   generic\n      type TElement is private;\n      NonDefini : TElement;\n   package ArbMgr is\n   end ArbMgr;\n\n   package Pack is new ArbMgr (Ptr, Ptr'(null));\n\n   procedure Dummy;\nend Inst;\n\nShould produce the following output:\n\n  inst.ads:10:42: expected type \"Ptr\" defined at line 2\n  inst.ads:10:42: found an access type\n  compilation abandoned due to previous error\n\n2019-09-17  Steve Baird  <baird@adacore.com>\n\ngcc/ada/\n\n\t* sem_util.adb (Wrong_Type): In deciding to suppress a message,\n\tit is not enough for In_Instance to be True; in addition,\n\tIn_Generic_Actual (Expr) must be False.\n\t* sem_type.adb (In_Generic_Actual): Fix bug where traversal of\n\tparents skips every other node.\n\nFrom-SVN: r275786", "tree": {"sha": "eb5d50a2f03300f0c13f29d8a6da5403b0d41ff7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb5d50a2f03300f0c13f29d8a6da5403b0d41ff7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a39f241944cfb7090d73e076913ff068a1cc32f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a39f241944cfb7090d73e076913ff068a1cc32f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a39f241944cfb7090d73e076913ff068a1cc32f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a39f241944cfb7090d73e076913ff068a1cc32f/comments", "author": {"login": "swbaird", "id": 50751052, "node_id": "MDQ6VXNlcjUwNzUxMDUy", "avatar_url": "https://avatars.githubusercontent.com/u/50751052?v=4", "gravatar_id": "", "url": "https://api.github.com/users/swbaird", "html_url": "https://github.com/swbaird", "followers_url": "https://api.github.com/users/swbaird/followers", "following_url": "https://api.github.com/users/swbaird/following{/other_user}", "gists_url": "https://api.github.com/users/swbaird/gists{/gist_id}", "starred_url": "https://api.github.com/users/swbaird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/swbaird/subscriptions", "organizations_url": "https://api.github.com/users/swbaird/orgs", "repos_url": "https://api.github.com/users/swbaird/repos", "events_url": "https://api.github.com/users/swbaird/events{/privacy}", "received_events_url": "https://api.github.com/users/swbaird/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "77562afd5b514434c7f6cacaeb1eaaa234d19736", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77562afd5b514434c7f6cacaeb1eaaa234d19736", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77562afd5b514434c7f6cacaeb1eaaa234d19736"}], "stats": {"total": 24, "additions": 21, "deletions": 3}, "files": [{"sha": "32d35b9257d028c27ed048a0dea5caa341d73186", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a39f241944cfb7090d73e076913ff068a1cc32f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a39f241944cfb7090d73e076913ff068a1cc32f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0a39f241944cfb7090d73e076913ff068a1cc32f", "patch": "@@ -1,3 +1,11 @@\n+2019-09-17  Steve Baird  <baird@adacore.com>\n+\n+\t* sem_util.adb (Wrong_Type): In deciding to suppress a message,\n+\tit is not enough for In_Instance to be True; in addition,\n+\tIn_Generic_Actual (Expr) must be False.\n+\t* sem_type.adb (In_Generic_Actual): Fix bug where traversal of\n+\tparents skips every other node.\n+\n 2019-09-17  Claire Dross  <dross@adacore.com>\n \n \t* sem_spark.adb (Get_Observed_Or_Borrowed_Expr): If the"}, {"sha": "fc5052421cf0bebd854c8c529d191fb6e561c3ba", "filename": "gcc/ada/sem_type.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a39f241944cfb7090d73e076913ff068a1cc32f/gcc%2Fada%2Fsem_type.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a39f241944cfb7090d73e076913ff068a1cc32f/gcc%2Fada%2Fsem_type.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_type.adb?ref=0a39f241944cfb7090d73e076913ff068a1cc32f", "patch": "@@ -2849,7 +2849,7 @@ package body Sem_Type is\n          return False;\n \n       else\n-         return In_Generic_Actual (Parent (Par));\n+         return In_Generic_Actual (Par);\n       end if;\n    end In_Generic_Actual;\n "}, {"sha": "99cdb8da0eb08c8b2892eda42e587fa73fd1c942", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a39f241944cfb7090d73e076913ff068a1cc32f/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a39f241944cfb7090d73e076913ff068a1cc32f/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=0a39f241944cfb7090d73e076913ff068a1cc32f", "patch": "@@ -26689,7 +26689,7 @@ package body Sem_Util is\n          return;\n \n       --  In  an instance, there is an ongoing problem with completion of\n-      --  type derived from private types. Their structure is what Gigi\n+      --  types derived from private types. Their structure is what Gigi\n       --  expects, but the  Etype is the parent type rather than the\n       --  derived private type itself. Do not flag error in this case. The\n       --  private completion is an entity without a parent, like an Itype.\n@@ -26700,7 +26700,17 @@ package body Sem_Util is\n       --  same reason: inserted body may be outside of the original package\n       --  and only partial views are visible at the point of insertion.\n \n-      elsif In_Instance or else In_Inlined_Body then\n+      --  If In_Generic_Actual (Expr) is True then we cannot assume that\n+      --  the successful semantic analysis of the generic guarantees anything\n+      --  useful about type checking of this instance, so we ignore\n+      --  In_Instance in that case. There may be cases where this is not\n+      --  right (the symptom would probably be rejecting something\n+      --  that ought to be accepted) but we don't currently have any\n+      --  concrete examples of this.\n+\n+      elsif (In_Instance and then not In_Generic_Actual (Expr))\n+        or else In_Inlined_Body\n+      then\n          if Etype (Etype (Expr)) = Etype (Expected_Type)\n            and then\n              (Has_Private_Declaration (Expected_Type)"}]}