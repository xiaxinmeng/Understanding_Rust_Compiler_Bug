{"sha": "67b82bc1b29b82e4577df9491793624f3a8eb12f", "node_id": "C_kwDOANBUbNoAKDY3YjgyYmMxYjI5YjgyZTQ1NzdkZjk0OTE3OTM2MjRmM2E4ZWIxMmY", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2023-02-08T19:02:48Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2023-02-10T00:06:11Z"}, "message": "c++: ICE initing lifetime-extended constexpr var [PR107079]\n\nWe ICE on the simple:\n\n  struct X { const X* x = this; };\n  constexpr const X& x = X{};\n\nwhere store_init_value initializes 'x' with\n\n  &TARGET_EXPR <D.2768, {.x=(const struct X *) &<PLACEHOLDER_EXPR struct X>}>\n\nbut we must lifetime-extend via extend_ref_init_temps and we get\n\n  _ZGR1x_.x = (const struct X *) &<PLACEHOLDER_EXPR struct X> >>>;, (const struct X &) &_ZGR1x_;\n\nSince 'x' was declared constexpr, we do cxx_constant_init and we hit\nthe preeval code added in r269003 while evaluating the INIT_EXPR:\n\n  _ZGR1x_.x = (const struct X *) &<PLACEHOLDER_EXPR struct X> >>>\n\nbut we have no ctx.ctor or ctx.object here so lookup_placeholder won't\nfind anything that could replace X and we ICE on\n 7861       /* A placeholder without a referent.  We can get here when\n 7862          checking whether NSDMIs are noexcept, or in massage_init_elt;\n 7863          just say it's non-constant for now.  */\n 7864       gcc_assert (ctx->quiet);\nbecause cxx_constant_init means !ctx->quiet.  It's not correct that\nthere isn't a referent.  I think the following patch is a pretty\nstraightforward fix: pass the _ZGR var down to maybe_constant_init so\nthat it can replace the PLACEHOLDER_EXPR with _ZGR1x_.\n\nThe commented assert in the test doesn't pass: we complain that _ZGR1x_\nisn't a constexpr variable because we don't implement DR2126 (PR101588).\n\n\tPR c++/107079\n\ngcc/cp/ChangeLog:\n\n\t* call.cc (set_up_extended_ref_temp): Pass var to maybe_constant_init.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/constexpr-nsdmi2.C: New test.", "tree": {"sha": "fdcd4dc3ba8efbe8fdf350f1145294b073b53514", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fdcd4dc3ba8efbe8fdf350f1145294b073b53514"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67b82bc1b29b82e4577df9491793624f3a8eb12f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67b82bc1b29b82e4577df9491793624f3a8eb12f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67b82bc1b29b82e4577df9491793624f3a8eb12f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67b82bc1b29b82e4577df9491793624f3a8eb12f/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "125b57aa67400388a496c2c0c40d9c8c55e0c94a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/125b57aa67400388a496c2c0c40d9c8c55e0c94a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/125b57aa67400388a496c2c0c40d9c8c55e0c94a"}], "stats": {"total": 11, "additions": 10, "deletions": 1}, "files": [{"sha": "a349d8e79dbd3b21ad90cb132a68f725d4eb72d4", "filename": "gcc/cp/call.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67b82bc1b29b82e4577df9491793624f3a8eb12f/gcc%2Fcp%2Fcall.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67b82bc1b29b82e4577df9491793624f3a8eb12f/gcc%2Fcp%2Fcall.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.cc?ref=67b82bc1b29b82e4577df9491793624f3a8eb12f", "patch": "@@ -13583,7 +13583,7 @@ set_up_extended_ref_temp (tree decl, tree expr, vec<tree, va_gc> **cleanups,\n \n   /* If the initializer is constant, put it in DECL_INITIAL so we get\n      static initialization and use in constant expressions.  */\n-  init = maybe_constant_init (expr);\n+  init = maybe_constant_init (expr, var, /*manifestly_const_eval=*/true);\n   /* As in store_init_value.  */\n   init = cp_fully_fold (init);\n   if (TREE_CONSTANT (init))"}, {"sha": "d711b8051c0b6a57bc5b4452a72b62d1965f457f", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-nsdmi2.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67b82bc1b29b82e4577df9491793624f3a8eb12f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-nsdmi2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67b82bc1b29b82e4577df9491793624f3a8eb12f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-nsdmi2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-nsdmi2.C?ref=67b82bc1b29b82e4577df9491793624f3a8eb12f", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/107079\n+// { dg-do compile { target c++11 } }\n+\n+struct X {\n+  const X* x = this;\n+};\n+constexpr const X& x = X{};\n+// TODO: The assert should pass once we implement DR2126 (c++/101588).\n+//static_assert(x.x == &x);"}]}