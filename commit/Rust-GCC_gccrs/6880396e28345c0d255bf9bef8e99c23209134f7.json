{"sha": "6880396e28345c0d255bf9bef8e99c23209134f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njg4MDM5NmUyODM0NWMwZDI1NWJmOWJlZjhlOTljMjMyMDkxMzRmNw==", "commit": {"author": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2008-07-04T12:48:27Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2008-07-04T12:48:27Z"}, "message": "Revert 137452.\n\nFrom-SVN: r137458", "tree": {"sha": "3c7ed6edff97aab658928d5d4c2ac652a4bbe9c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c7ed6edff97aab658928d5d4c2ac652a4bbe9c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6880396e28345c0d255bf9bef8e99c23209134f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6880396e28345c0d255bf9bef8e99c23209134f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6880396e28345c0d255bf9bef8e99c23209134f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6880396e28345c0d255bf9bef8e99c23209134f7/comments", "author": null, "committer": null, "parents": [{"sha": "1d79e31d96c322196a37c897c4cf02672416aae0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d79e31d96c322196a37c897c4cf02672416aae0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d79e31d96c322196a37c897c4cf02672416aae0"}], "stats": {"total": 365, "additions": 0, "deletions": 365}, "files": [{"sha": "df56c9ecd62f4ef8e61678ca35faeafc8c8f59be", "filename": "gcc/ChangeLog", "status": "modified", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6880396e28345c0d255bf9bef8e99c23209134f7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6880396e28345c0d255bf9bef8e99c23209134f7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6880396e28345c0d255bf9bef8e99c23209134f7", "patch": "@@ -14,56 +14,6 @@\n \t* opts.c (decode_options): Set max-fields-for-field-sensitive to\n \t100 for optimize >= 2.\n \n-2008-07-04  Kai Tietz  <kai.tietz@onevision.com>\n-\n-\t* config.gcc (extra_headers): Add cross-stdarg.h for target\n-\tx86_64-*-* and i?86-*-*.\n-\t* config/i386/cross-stdarg.h: New.\n-\t* builtins.c (std_fn_abi_va_list): New.\n-\t(std_canonical_va_list_type): New.\n-\t(stabilize_va_list): Replace va_list_type_node use by\n-\tmtarget.canonical_va_list_type.\n-\t(gimplify_va_arg_expr): Likewise.\n-\t(expand_builtin_va_copy): Replace va_list_type_node use by\n-\tmtarget.fn_abi_va_list.\n-\t* tree-sra.c (is_va_list_type): New helper.\n-\t(decl_can_be_decomposed_p): Replace\n-\tva_list_type_node use by is_va_list_type.\n-\t* tree-ssa-ccp.c (optimize_stdarg_builtin): Likewise.\n-\t* tree-stdarg.c (execute_optimize_stdarg): Likewise.\n-\t* c-common.c (c_common_nodes_and_builtins): Use TARGET_ENUM_VA_LIST.\n-\t* config/i386/i386-protos.h (ix86_get_valist_type): New.\n-\t(ix86_enum_va_list): New.\n-\t* config/i386/i386.c (sysv_va_list_type_node): New.\n-\t(ms_va_list_type_node): New.\n-\t(ix86_function_type_abi): Remove sorry.\n-\t(ix86_build_builtin_va_list_abi): New.\n-\t(ix86_build_builtin_va_list): Call ix86_build_builtin_va_list_abi\n-\tfor 64-bit targets.\n-\t(ix86_va_start): Replace va_list_type_node by sysv_va_list_type_node.\n-\t(ix86_init_builtins_va_builtins_abi): New.\n-\t(ix86_init_builtins): Use ix86_init_builtins_va_builtins_abi\n-\tfor 64-bit targets.\n-\t(ix86_handle_abi_attribute): New.\n-\t(attribute_spec): Add sysv_abi and ms_abi.\n-\t(ix86_fn_abi_va_list): New.\n-\t(ix86_canonical_va_list_type): New.\n-\t(ix86_enum_va_list): New.\n-\t(TARGET_FN_ABI_VA_LIST): New.\n-\t(TARGET_CANONICAL_VA_LIST_TYPE): New.\n-\t* config/i386/i386.h (TARGET_ENUM_VA_LIST): New.\n-\t* doc/tm.texi (TARGET_FN_ABI_VA_LIST): New.\n-\t(TARGET_CANONICAL_VA_LIST_TYPE): New.\n-\t(TARGET_ENUM_VA_LIST): New.\n-\t* expr.h (std_fn_abi_va_list): New.\n-\t(std_canonical_va_list_type): New.\n-\t* target-def.h (TARGET_FN_ABI_VA_LIST): New.\n-\t(TARGET_CANONICAL_VA_LIST_TYPE): New.\n-\t(TARGET_INITIALIZER): Add TARGET_FN_ABI_VA_LIST and\n-\tTARGET_CANONICAL_VA_LIST_TYPE.\n-\t* target.h (struct gcc_target): Add fn_abi_va_list hook\n-\tand canonical_va_list_type hook.\n-\n 2008-07-04  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* ggc-zone.c (lookup_page_table_if_allocated,"}, {"sha": "98ac1ecd5cc5b988880f325ea2b09c8280a0e596", "filename": "gcc/config/i386/cross-stdarg.h", "status": "removed", "additions": 0, "deletions": 76, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d79e31d96c322196a37c897c4cf02672416aae0/gcc%2Fconfig%2Fi386%2Fcross-stdarg.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d79e31d96c322196a37c897c4cf02672416aae0/gcc%2Fconfig%2Fi386%2Fcross-stdarg.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcross-stdarg.h?ref=1d79e31d96c322196a37c897c4cf02672416aae0", "patch": "@@ -1,76 +0,0 @@\n-/* Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008\n-   Free Software Foundation, Inc.\n-\n-   This file is part of GCC.\n-\n-   GCC is free software; you can redistribute it and/or modify\n-   it under the terms of the GNU General Public License as published by\n-   the Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   GCC is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License\n-   along with GCC; see the file COPYING.  If not, write to\n-   the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n-   Boston, MA 02110-1301, USA.  */\n-\n-/* As a special exception, if you include this header file into source\n-   files compiled by GCC, this header file does not by itself cause\n-   the resulting executable to be covered by the GNU General Public\n-   License.  This exception does not however invalidate any other\n-   reasons why the executable file might be covered by the GNU General\n-   Public License.  */\n-\n-#ifndef __CROSS_STDARG_H_INCLUDED\n-#define __CROSS_STDARG_H_INCLUDED\n-\n-/* Make sure that for non x64 targets cross builtins are defined.  */\n-#ifndef __x86_64__\n-/* Call abi ms_abi.  */\n-#define __builtin_ms_va_list __builtin_va_list\n-#define __builtin_ms_va_copy __builtin_va_copy\n-#define __builtin_ms_va_start __builtin_va_start\n-#define __builtin_ms_va_end __builtin_va_end\n-\n-/* Call abi sysv_abi.  */\n-#define __builtin_sysv_va_list __builtin_va_list\n-#define __builtin_sysv_va_copy __builtin_va_copy\n-#define __builtin_sysv_va_start __builtin_va_start\n-#define __builtin_sysv_va_end __builtin_va_end\n-#endif\n-\n-#define __ms_va_copy(__d,__s) __builtin_ms_va_copy(__d,__s)\n-#define __ms_va_start(__v,__l) __builtin_ms_va_start(__v,__l)\n-#define __ms_va_arg(__v,__l)\t__builtin_va_arg(__v,__l)\n-#define __ms_va_end(__v) __builtin_ms_va_end(__v)\n-\n-#define __sysv_va_copy(__d,__s) __builtin_sysv_va_copy(__d,__s)\n-#define __sysv_va_start(__v,__l) __builtin_sysv_va_start(__v,__l)\n-#define __sysv_va_arg(__v,__l)\t__builtin_va_arg(__v,__l)\n-#define __sysv_va_end(__v) __builtin_sysv_va_end(__v)\n-\n-#ifndef __GNUC_SYSV_VA_LIST\n-#define __GNUC_SYSV_VA_LIST\n-  typedef __builtin_sysv_va_list __gnuc_sysv_va_list;\n-#endif\n-\n-#ifndef _SYSV_VA_LIST_DEFINED\n-#define _SYSV_VA_LIST_DEFINED\n-  typedef __gnuc_sysv_va_list sysv_va_list;\n-#endif\n-\n-#ifndef __GNUC_MS_VA_LIST\n-#define __GNUC_MS_VA_LIST\n-  typedef __builtin_ms_va_list __gnuc_ms_va_list;\n-#endif\n-\n-#ifndef _MS_VA_LIST_DEFINED\n-#define _MS_VA_LIST_DEFINED\n-  typedef __gnuc_ms_va_list ms_va_list;\n-#endif\n-\n-#endif /* __CROSS_STDARG_H_INCLUDED */"}, {"sha": "0ff00d4f687464bf21e5f35991a7ac32641550db", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6880396e28345c0d255bf9bef8e99c23209134f7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6880396e28345c0d255bf9bef8e99c23209134f7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6880396e28345c0d255bf9bef8e99c23209134f7", "patch": "@@ -2,14 +2,6 @@\n \n \t* gcc.dg/tree-ssa/pta-callused.c: New testcase.\n \n-2008-07-04  Kai Tietz  <kai.tietz@onevision.com>\n-\n-\t* gcc.dg/callabi/callabi.h: New.\n-\t* gcc.dg/callabi/vaarg-1.c: New.\n-\t* gcc.dg/callabi/vaarg-2.c: New.\n-\t* gcc.dg/callabi/vaarg-3.c: New.\n-\t* gcc.dg/callabi/func-1.c: New.\n-\n 2008-07-04  Richard Sandiford  <richard@codesourcery.com>\n \n \t* gcc.target/m68k/interrupt-2.c: New file."}, {"sha": "d008ad659cbb50f0dca3be1fa6d92ce75a0ccd67", "filename": "gcc/testsuite/gcc.dg/callabi/callabi.h", "status": "removed", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d79e31d96c322196a37c897c4cf02672416aae0/gcc%2Ftestsuite%2Fgcc.dg%2Fcallabi%2Fcallabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d79e31d96c322196a37c897c4cf02672416aae0/gcc%2Ftestsuite%2Fgcc.dg%2Fcallabi%2Fcallabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcallabi%2Fcallabi.h?ref=1d79e31d96c322196a37c897c4cf02672416aae0", "patch": "@@ -1,50 +0,0 @@\n-/* First the default target definition.  */\n-#ifndef __GNUC_VA_LIST\n-#define __GNUC_VA_LIST\n-  typedef __builtin_va_list __gnuc_va_list;\n-#endif\n-\n-#ifndef _VA_LIST_DEFINED\n-#define _VA_LIST_DEFINED\n-  typedef __gnuc_va_list va_list;\n-#endif\n-\n-#define __va_copy(d,s)\t__builtin_va_copy(d,s)\n-#define __va_start(v,l)\t__builtin_va_start(v,l)\n-#define __va_arg(v,l)\t__builtin_va_arg(v,l)\n-#define __va_end(v)\t__builtin_va_end(v)\n-\n-#define __ms_va_copy(d,s) __builtin_ms_va_copy(d,s)\n-#define __ms_va_start(v,l) __builtin_ms_va_start(v,l)\n-#define __ms_va_arg(v,l)\t__builtin_va_arg(v,l)\n-#define __ms_va_end(v) __builtin_ms_va_end(v)\n-\n-#define __sysv_va_copy(d,s) __builtin_sysv_va_copy(d,s)\n-#define __sysv_va_start(v,l) __builtin_sysv_va_start(v,l)\n-#define __sysv_va_arg(v,l)\t__builtin_va_arg(v,l)\n-#define __sysv_va_end(v) __builtin_sysv_va_end(v)\n-\n-#define CALLABI_NATIVE\n-\n-#ifdef _WIN64\n-#define CALLABI_CROSS __attribute__ ((sysv_abi))\n-\n-#define CROSS_VA_LIST\t__builtin_sysv_va_list\n-\n-#define CROSS_VA_COPY(d,s) __sysv_va_copy(d,s)\n-#define CROSS_VA_START(v,l) __sysv_va_start(v,l)\n-#define CROSS_VA_ARG(v,l) __sysv_va_arg(v,l)\n-#define CROSS_VA_END(v)  __sysv_va_end(v)\n-\n-#else\n-\n-#define CALLABI_CROSS __attribute__ ((ms_abi))\n-\n-#define CROSS_VA_LIST\t__builtin_ms_va_list\n-\n-#define CROSS_VA_COPY(d,s) __ms_va_copy(d,s)\n-#define CROSS_VA_START(v,l) __ms_va_start(v,l)\n-#define CROSS_VA_ARG(v,l) __ms_va_arg(v,l)\n-#define CROSS_VA_END(v)  __ms_va_end(v)\n-\n-#endif\n\\ No newline at end of file"}, {"sha": "c727dbe6e53a576fd82c8d4616c04abf83ac1a84", "filename": "gcc/testsuite/gcc.dg/callabi/func-1.c", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d79e31d96c322196a37c897c4cf02672416aae0/gcc%2Ftestsuite%2Fgcc.dg%2Fcallabi%2Ffunc-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d79e31d96c322196a37c897c4cf02672416aae0/gcc%2Ftestsuite%2Fgcc.dg%2Fcallabi%2Ffunc-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcallabi%2Ffunc-1.c?ref=1d79e31d96c322196a37c897c4cf02672416aae0", "patch": "@@ -1,40 +0,0 @@\n-/* Test for cross x86_64<->w64 abi standard calls.\n-*/\n-/* Origin: Kai Tietz <kai.tietz@onevision.com> */\n-/* { dg-do run { target { x86_64-*-* } } } */\n-/* { dg-options \"-std=gnu99 -ffast-math\" } */\n-#include \"callabi.h\"\n-\n-extern void abort (void);\n-\n-long double\n-CALLABI_CROSS func_cross (long double a, double b, float c, long d, int e,\n-\t\t\t  char f)\n-{\n-  long double ret;\n-  ret = a + (long double) b + (long double) c;\n-  ret *= (long double) (d + (long) e);\n-  if (f>0)\n-    ret += func_cross (a,b,c,d,e,-f);\n-  return ret;\n-}\n-\n-long double\n-CALLABI_NATIVE func_native (long double a, double b, float c, long d, int e,\n-\t\t\t    char f)\n-{\n-  long double ret;\n-  ret = a + (long double) b + (long double) c;\n-  ret *= (long double) (d + (long) e);\n-  if (f>0)\n-    ret += func_native (a,b,c,d,e,-f);\n-  return ret;\n-}\n-\n-int main ()\n-{\n-  if (func_cross (1.0,2.0,3.0,1,2,3)\n-      != func_native (1.0,2.0,3.0,1,2,3))\n-    abort ();\n-  return 0;\n-}\n\\ No newline at end of file"}, {"sha": "1e745e560856408dbf9c19ddcbe451a72b0afc9b", "filename": "gcc/testsuite/gcc.dg/callabi/vaarg-1.c", "status": "removed", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d79e31d96c322196a37c897c4cf02672416aae0/gcc%2Ftestsuite%2Fgcc.dg%2Fcallabi%2Fvaarg-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d79e31d96c322196a37c897c4cf02672416aae0/gcc%2Ftestsuite%2Fgcc.dg%2Fcallabi%2Fvaarg-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcallabi%2Fvaarg-1.c?ref=1d79e31d96c322196a37c897c4cf02672416aae0", "patch": "@@ -1,47 +0,0 @@\n-/* Test for cross x86_64<->w64 abi va_list calls.\n-*/\n-/* Origin: Kai Tietz <kai.tietz@onevision.com> */\n-/* { dg-do run { target { x86_64-*-* } } } */\n-/* { dg-options \"-std=gnu99\" } */\n-#include \"callabi.h\"\n-\n-extern __SIZE_TYPE__ strlen (const char *);\n-extern int sprintf (char *,const char *, ...);\n-extern void abort (void);\n-\n-static\n-void CALLABI_CROSS vdo_cpy (char *s, CROSS_VA_LIST argp)\n-{\n-  __SIZE_TYPE__ len;\n-  char *r = s;\n-  char *e;\n-  *r = 0;\n-  for (;;) {\n-    e = CROSS_VA_ARG (argp,char *);\n-    if (*e == 0) break;\n-    sprintf (r,\"%s\", e);\n-    r += strlen (r);\n-  }\n-}\n-\n-static\n-void CALLABI_CROSS do_cpy (char *s, ...)\n-{\n-  CROSS_VA_LIST argp;\n-  CROSS_VA_START (argp, s);\n-  vdo_cpy (s, argp);\n-  CROSS_VA_END (argp);\n-}\n-\n-int main ()\n-{\n-  char s[256];\n-\n-  do_cpy (s, \"1\",\"2\",\"3\",\"4\", \"5\", \"6\", \"7\", \"\");\n-\n-  if (s[0] != '1' || s[1] !='2' || s[2] != '3' || s[3] != '4'\n-      || s[4] != '5' || s[5] != '6' || s[6] != '7' || s[7] != 0)\n-    abort ();\n-\n-  return 0;\n-}"}, {"sha": "c9b716194a6c7ed5ba8f8f21ec1256fa4bad8d26", "filename": "gcc/testsuite/gcc.dg/callabi/vaarg-2.c", "status": "removed", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d79e31d96c322196a37c897c4cf02672416aae0/gcc%2Ftestsuite%2Fgcc.dg%2Fcallabi%2Fvaarg-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d79e31d96c322196a37c897c4cf02672416aae0/gcc%2Ftestsuite%2Fgcc.dg%2Fcallabi%2Fvaarg-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcallabi%2Fvaarg-2.c?ref=1d79e31d96c322196a37c897c4cf02672416aae0", "patch": "@@ -1,47 +0,0 @@\n-/* Test for cross x86_64<->w64 abi va_list calls.\n-*/\n-/* Origin: Kai Tietz <kai.tietz@onevision.com> */\n-/* { dg-do run { target { x86_64-*-* } } } */\n-/* { dg-options \"-std=gnu99\" } */\n-#include \"callabi.h\"\n-\n-extern void abort (void);\n-\n-#define SZ_ARGS\t1ll,2ll,3ll,4ll,5ll,6ll,7ll,0ll\n-\n-static\n-int CALLABI_CROSS fct1 (va_list argp, ...)\n-{\n-  long long p1,p2;\n-  int ret = 1;\n-  CROSS_VA_LIST argp_2;\n-  CROSS_VA_START (argp_2,argp);\n-\n-  do {\n-    p1 = CROSS_VA_ARG (argp_2, long long);\n-    p2 = __va_arg (argp, long long);\n-    if (p1 != p2)\n-      ret = 0;\n-  } while (ret && p1 != 0);\n-  CROSS_VA_END (argp_2);\n-  return ret;\n-}\n-\n-static\n-int fct2 (int dummy, ...)\n-{\n-  va_list argp;\n-  int ret = dummy;\n-\n-  __va_start (argp, dummy);\n-  ret += fct1 (argp, SZ_ARGS);\n-  __va_end (argp);\n-  return ret;\n-}\n-\n-int main()\n-{\n-  if (fct2 (-1, SZ_ARGS) != 0)\n-    abort ();\n-  return 0;\n-}"}, {"sha": "d0d068754e1e0b5b3a9a941ac467004ee2ca2aa8", "filename": "gcc/testsuite/gcc.dg/callabi/vaarg-3.c", "status": "removed", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d79e31d96c322196a37c897c4cf02672416aae0/gcc%2Ftestsuite%2Fgcc.dg%2Fcallabi%2Fvaarg-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d79e31d96c322196a37c897c4cf02672416aae0/gcc%2Ftestsuite%2Fgcc.dg%2Fcallabi%2Fvaarg-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcallabi%2Fvaarg-3.c?ref=1d79e31d96c322196a37c897c4cf02672416aae0", "patch": "@@ -1,47 +0,0 @@\n-/* Test for cross x86_64<->w64 abi va_list calls.\n-*/\n-/* Origin: Kai Tietz <kai.tietz@onevision.com> */\n-/* { dg-do run { target { x86_64-*-* } } } */\n-/* { dg-options \"-std=gnu99\" } */\n-#include \"callabi.h\"\n-\n-extern void abort (void);\n-\n-#define SZ_ARGS\t1ll,2ll,3ll,4ll,5ll,6ll,7ll,0ll\n-\n-static\n-int fct1 (CROSS_VA_LIST argp, ...)\n-{\n-  long long p1,p2;\n-  int ret = 1;\n-  va_list argp_2;\n-\n-    __va_start (argp_2,argp);\n-  do {\n-    p1 = __va_arg (argp_2, long long);\n-    p2 = CROSS_VA_ARG (argp, long long);\n-    if (p1 != p2)\n-      ret = 0;\n-  } while (ret && p1 != 0);\n-  __va_end (argp_2);\n-  return ret;\n-}\n-\n-static\n-int CALLABI_CROSS fct2 (int dummy, ...)\n-{\n-  CROSS_VA_LIST argp;\n-  int ret = dummy;\n-\n-  CROSS_VA_START (argp, dummy);\n-  ret += fct1 (argp, SZ_ARGS);\n-  CROSS_VA_END (argp);\n-  return ret;\n-}\n-\n-int main()\n-{\n-  if (fct2 (-1, SZ_ARGS) != 0)\n-    abort ();\n-  return 0;\n-}"}]}