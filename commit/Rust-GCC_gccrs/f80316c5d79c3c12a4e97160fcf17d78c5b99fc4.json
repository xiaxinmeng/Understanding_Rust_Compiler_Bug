{"sha": "f80316c5d79c3c12a4e97160fcf17d78c5b99fc4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjgwMzE2YzVkNzljM2MxMmE0ZTk3MTYwZmNmMTdkNzhjNWI5OWZjNA==", "commit": {"author": {"name": "Ilya Leoshkevich", "email": "iii@linux.ibm.com", "date": "2018-09-24T14:21:03Z"}, "committer": {"name": "Ilya Leoshkevich", "email": "iii@gcc.gnu.org", "date": "2018-09-24T14:21:03Z"}, "message": "S/390: Fix conditional returns on z196+\n\nS/390 epilogue ends with (parallel [(return) (use %r14)]) instead of\nthe more usual (return) or (simple_return).  This sequence is not\nrecognized by the conditional return logic in try_optimize_cfg ().\n\nThis was introduced for processors older than z196, where it is\nsometimes profitable to use call-clobbered register for returning\ninstead of %r14.  On newer processors we always return via %r14,\nfor which the fact that it's used is already reflected by\nEPILOGUE_USES.  In this case a simple (return) suffices.\n\nThis patch changes return_use () to emit simple (return)s when\nreturning via %r14.  The resulting sequences are recognized by the\nconditional return logic in try_optimize_cfg ().\n\ngcc/ChangeLog:\n\n2018-09-24  Ilya Leoshkevich  <iii@linux.ibm.com>\n\n\tPR target/80080\n\t* config/s390/s390.c (s390_emit_epilogue): Do not use PARALLEL\n\tRETURN+USE when returning via %r14.\n\ngcc/testsuite/ChangeLog:\n\n2018-09-24  Ilya Leoshkevich  <iii@linux.ibm.com>\n\n\tPR target/80080\n\t* gcc.target/s390/risbg-ll-3.c: Expect conditional returns.\n\t* gcc.target/s390/zvector/vec-cmp-2.c: Likewise.\n\nFrom-SVN: r264535", "tree": {"sha": "11ffbecfac733e0290e4bb15c7e73e4330059707", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11ffbecfac733e0290e4bb15c7e73e4330059707"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f80316c5d79c3c12a4e97160fcf17d78c5b99fc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f80316c5d79c3c12a4e97160fcf17d78c5b99fc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f80316c5d79c3c12a4e97160fcf17d78c5b99fc4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f80316c5d79c3c12a4e97160fcf17d78c5b99fc4/comments", "author": {"login": "iii-i", "id": 45998171, "node_id": "MDQ6VXNlcjQ1OTk4MTcx", "avatar_url": "https://avatars.githubusercontent.com/u/45998171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iii-i", "html_url": "https://github.com/iii-i", "followers_url": "https://api.github.com/users/iii-i/followers", "following_url": "https://api.github.com/users/iii-i/following{/other_user}", "gists_url": "https://api.github.com/users/iii-i/gists{/gist_id}", "starred_url": "https://api.github.com/users/iii-i/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iii-i/subscriptions", "organizations_url": "https://api.github.com/users/iii-i/orgs", "repos_url": "https://api.github.com/users/iii-i/repos", "events_url": "https://api.github.com/users/iii-i/events{/privacy}", "received_events_url": "https://api.github.com/users/iii-i/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e595522aa89d0cd427d5251456ff7cf347319a9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e595522aa89d0cd427d5251456ff7cf347319a9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e595522aa89d0cd427d5251456ff7cf347319a9c"}], "stats": {"total": 86, "additions": 53, "deletions": 33}, "files": [{"sha": "7b4c98b6d884ada9adfec5a71dba2a8c17b73bd8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f80316c5d79c3c12a4e97160fcf17d78c5b99fc4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f80316c5d79c3c12a4e97160fcf17d78c5b99fc4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f80316c5d79c3c12a4e97160fcf17d78c5b99fc4", "patch": "@@ -1,3 +1,9 @@\n+2018-09-24  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\tPR target/80080\n+\t* config/s390/s390.c (s390_emit_epilogue): Do not use PARALLEL\n+\tRETURN+USE when returning via %r14.\n+\n 2018-09-24  Martin Liska  <mliska@suse.cz>\n \n \t* gcov.c (output_lines): Print colorization legend"}, {"sha": "71039fe6ce96dbb0e991029bfd9af1d727830989", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f80316c5d79c3c12a4e97160fcf17d78c5b99fc4/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f80316c5d79c3c12a4e97160fcf17d78c5b99fc4/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=f80316c5d79c3c12a4e97160fcf17d78c5b99fc4", "patch": "@@ -11082,7 +11082,7 @@ s390_emit_prologue (void)\n void\n s390_emit_epilogue (bool sibcall)\n {\n-  rtx frame_pointer, return_reg, cfa_restores = NULL_RTX;\n+  rtx frame_pointer, return_reg = NULL_RTX, cfa_restores = NULL_RTX;\n   int area_bottom, area_top, offset = 0;\n   int next_offset;\n   int i;\n@@ -11191,10 +11191,6 @@ s390_emit_epilogue (bool sibcall)\n \n     }\n \n-  /* Return register.  */\n-\n-  return_reg = gen_rtx_REG (Pmode, RETURN_REGNUM);\n-\n   /* Restore call saved gprs.  */\n \n   if (cfun_frame_layout.first_restore_gpr != -1)\n@@ -11284,7 +11280,19 @@ s390_emit_epilogue (bool sibcall)\n   s390_restore_gprs_from_fprs ();\n \n   if (! sibcall)\n-    emit_jump_insn (gen_return_use (return_reg));\n+    {\n+      if (!return_reg && !s390_can_use_return_insn ())\n+        /* We planned to emit (return), be we are not allowed to.  */\n+        return_reg = gen_rtx_REG (Pmode, RETURN_REGNUM);\n+\n+      if (return_reg)\n+        /* Emit (return) and (use).  */\n+        emit_jump_insn (gen_return_use (return_reg));\n+      else\n+        /* The fact that RETURN_REGNUM is used is already reflected by\n+           EPILOGUE_USES.  Emit plain (return).  */\n+        emit_jump_insn (gen_return ());\n+    }\n }\n \n /* Implement TARGET_SET_UP_BY_PROLOGUE.  */"}, {"sha": "16dc1a49412b5732a595816d4fad811b8ebfab81", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f80316c5d79c3c12a4e97160fcf17d78c5b99fc4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f80316c5d79c3c12a4e97160fcf17d78c5b99fc4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f80316c5d79c3c12a4e97160fcf17d78c5b99fc4", "patch": "@@ -1,3 +1,9 @@\n+2018-09-24  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\tPR target/80080\n+\t* gcc.target/s390/risbg-ll-3.c: Expect conditional returns.\n+\t* gcc.target/s390/zvector/vec-cmp-2.c: Likewise.\n+\n 2018-09-24  Martin Liska  <mliska@suse.cz>\n \n \tPR sanitizer/85774"}, {"sha": "2a2db543cd918cec44c5ca9a8a509460d1901d49", "filename": "gcc/testsuite/gcc.target/s390/risbg-ll-3.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f80316c5d79c3c12a4e97160fcf17d78c5b99fc4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Frisbg-ll-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f80316c5d79c3c12a4e97160fcf17d78c5b99fc4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Frisbg-ll-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Frisbg-ll-3.c?ref=f80316c5d79c3c12a4e97160fcf17d78c5b99fc4", "patch": "@@ -23,7 +23,7 @@ i64 f1 (i64 v_a, i64 v_b)\n extern i64 f2_foo();\n i64 f2 (i64 v_a, i64 v_b)\n {\n-/* { dg-final { scan-assembler \"f2:\\n\\trisbg\\t%r2,%r3,60,62,0\\n\\tje\\t\" { target { lp64 } } } } */\n+/* { dg-final { scan-assembler \"f2:\\n\\trisbg\\t%r2,%r3,60,62,0\\n\\tbner\\t%r14\\n\\tjg\\tf2_foo\\n\" { target { lp64 } } } } */\n /* { dg-final { scan-assembler \"f2:\\n\\trisbgn\\t%r3,%r2,0,0\\\\\\+32-1,64-0-32\\n\\trisbg\\t%r3,%r5,60,62,0\" { target { ! lp64 } } } } */\n   i64 v_anda = v_a & -15;\n   i64 v_andb = v_b & 14;\n@@ -37,8 +37,8 @@ i64 f2 (i64 v_a, i64 v_b)\n void f2_bar ();\n void f2_cconly (i64 v_a, i64 v_b)\n {\n-/* { dg-final { scan-assembler \"f2_cconly:\\n\\trisbg\\t%r3,%r2,63,59,0\\n\\tjne\\t\"  { target { lp64 } } } } */\n-/* { dg-final { scan-assembler \"f2_cconly:\\n\\trisbgn\\t%r3,%r2,0,0\\\\\\+32-1,64-0-32\\n\\trisbg\\t%r3,%r5,60,62,0\\n\\tjne\\t\" { target { ! lp64 } } } } */\n+/* { dg-final { scan-assembler \"f2_cconly:\\n\\trisbg\\t%r3,%r2,63,59,0\\n\\tber\\t%r14\\n\\tjg\\tf2_bar\\n\" { target { lp64 } } } } */\n+/* { dg-final { scan-assembler \"f2_cconly:\\n\\trisbgn\\t%r3,%r2,0,0\\\\\\+32-1,64-0-32\\n\\trisbg\\t%r3,%r5,60,62,0\\n\\tber\\t%r14\\n\\tjg\\tf2_bar\\n\" { target { ! lp64 } } } } */\n   if ((v_a & -15) | (v_b & 14))\n     f2_bar();\n }"}, {"sha": "09a15eb25f07ba481928bfe6a830a99362f89469", "filename": "gcc/testsuite/gcc.target/s390/zvector/vec-cmp-2.c", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f80316c5d79c3c12a4e97160fcf17d78c5b99fc4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec-cmp-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f80316c5d79c3c12a4e97160fcf17d78c5b99fc4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec-cmp-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec-cmp-2.c?ref=f80316c5d79c3c12a4e97160fcf17d78c5b99fc4", "patch": "@@ -15,189 +15,189 @@ all_eq_double (vector double a, vector double b)\n   if (__builtin_expect (vec_all_eq (a, b), 1))\n     g = 2;\n }\n-/* { dg-final { scan-assembler-times all_eq_double:\\n\\tvfcedbs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tjne 1 } } */\n+/* { dg-final { scan-assembler-times all_eq_double:\\n\\tvfcedbs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tbner\\t%r14\\n 1 } } */\n \n void __attribute__((noinline,noclone))\n all_ne_double (vector double a, vector double b)\n {\n   if (__builtin_expect (vec_all_ne (a, b), 1))\n     g = 2;\n }\n-/* { dg-final { scan-assembler-times all_ne_double:\\n\\tvfcedbs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tjle 1 } } */\n+/* { dg-final { scan-assembler-times all_ne_double:\\n\\tvfcedbs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tbler\\t%r14\\n 1 } } */\n \n void __attribute__((noinline,noclone))\n all_gt_double (vector double a, vector double b)\n {\n   if (__builtin_expect (vec_all_gt (a, b), 1))\n     g = 2;\n }\n-/* { dg-final { scan-assembler-times all_gt_double:\\n\\tvfchdbs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tjne 1 } } */\n+/* { dg-final { scan-assembler-times all_gt_double:\\n\\tvfchdbs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tbner\\t%r14\\n 1 } } */\n \n void __attribute__((noinline,noclone))\n all_lt_double (vector double a, vector double b)\n {\n   if (__builtin_expect (vec_all_lt (a, b), 1))\n     g = 2;\n }\n-/* { dg-final { scan-assembler-times all_lt_double:\\n\\tvfchdbs\\t%v\\[0-9\\]*,%v26,%v24\\n\\tjne 1 } } */\n+/* { dg-final { scan-assembler-times all_lt_double:\\n\\tvfchdbs\\t%v\\[0-9\\]*,%v26,%v24\\n\\tbner\\t%r14\\n 1 } } */\n \n void __attribute__((noinline,noclone))\n all_ge_double (vector double a, vector double b)\n {\n   if (__builtin_expect (vec_all_ge (a, b), 1))\n     g = 2;\n }\n-/* { dg-final { scan-assembler-times all_ge_double:\\n\\tvfchedbs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tjne 1 } } */\n+/* { dg-final { scan-assembler-times all_ge_double:\\n\\tvfchedbs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tbner\\t%r14\\n 1 } } */\n \n void __attribute__((noinline,noclone))\n all_le_double (vector double a, vector double b)\n {\n   if (__builtin_expect (vec_all_le (a, b), 1))\n     g = 2;\n }\n-/* { dg-final { scan-assembler-times all_le_double:\\n\\tvfchedbs\\t%v\\[0-9\\]*,%v26,%v24\\n\\tjne 1 } } */\n+/* { dg-final { scan-assembler-times all_le_double:\\n\\tvfchedbs\\t%v\\[0-9\\]*,%v26,%v24\\n\\tbner\\t%r14\\n 1 } } */\n \n void __attribute__((noinline,noclone))\n any_eq_double (vector double a, vector double b)\n {\n   if (__builtin_expect (vec_any_eq (a, b), 1))\n     g = 2;\n }\n-/* { dg-final { scan-assembler-times any_eq_double:\\n\\tvfcedbs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tjnle 1 } } */\n+/* { dg-final { scan-assembler-times any_eq_double:\\n\\tvfcedbs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tbnler\\t%r14\\n 1 } } */\n \n void __attribute__((noinline,noclone))\n any_ne_double (vector double a, vector double b)\n {\n   if (__builtin_expect (vec_any_ne (a, b), 1))\n     g = 2;\n }\n-/* { dg-final { scan-assembler-times any_ne_double:\\n\\tvfcedbs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tje 1 } } */\n+/* { dg-final { scan-assembler-times any_ne_double:\\n\\tvfcedbs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tber\\t%r14\\n 1 } } */\n \n void __attribute__((noinline,noclone))\n any_gt_double (vector double a, vector double b)\n {\n   if (__builtin_expect (vec_any_gt (a, b), 1))\n     g = 2;\n }\n-/* { dg-final { scan-assembler-times any_gt_double:\\n\\tvfchdbs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tjnle 1 } } */\n+/* { dg-final { scan-assembler-times any_gt_double:\\n\\tvfchdbs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tbnler\\t%r14\\n 1 } } */\n \n void __attribute__((noinline,noclone))\n any_lt_double (vector double a, vector double b)\n {\n   if (__builtin_expect (vec_any_lt (a, b), 1))\n     g = 2;\n }\n-/* { dg-final { scan-assembler-times any_lt_double:\\n\\tvfchdbs\\t%v\\[0-9\\]*,%v26,%v24\\n\\tjnle 1 } } */\n+/* { dg-final { scan-assembler-times any_lt_double:\\n\\tvfchdbs\\t%v\\[0-9\\]*,%v26,%v24\\n\\tbnler\\t%r14\\n 1 } } */\n \n void __attribute__((noinline,noclone))\n any_ge_double (vector double a, vector double b)\n {\n   if (__builtin_expect (vec_any_ge (a, b), 1))\n     g = 2;\n }\n-/* { dg-final { scan-assembler-times any_ge_double:\\n\\tvfchedbs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tjnle 1 } } */\n+/* { dg-final { scan-assembler-times any_ge_double:\\n\\tvfchedbs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tbnler\\t%r14\\n 1 } } */\n \n void __attribute__((noinline,noclone))\n any_le_double (vector double a, vector double b)\n {\n   if (__builtin_expect (vec_any_le (a, b), 1))\n     g = 2;\n }\n-/* { dg-final { scan-assembler-times any_le_double:\\n\\tvfchedbs\\t%v\\[0-9\\]*,%v26,%v24\\n\\tjnle 1 } } */\n+/* { dg-final { scan-assembler-times any_le_double:\\n\\tvfchedbs\\t%v\\[0-9\\]*,%v26,%v24\\n\\tbnler\\t%r14\\n 1 } } */\n \n void __attribute__((noinline,noclone))\n all_eq_int (vector int a, vector int b)\n {\n   if (__builtin_expect (vec_all_eq (a, b), 1))\n     g = 2;\n }\n-/* { dg-final { scan-assembler-times all_eq_int:\\n\\tvceqfs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tjne 1 } } */\n+/* { dg-final { scan-assembler-times all_eq_int:\\n\\tvceqfs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tbner\\t%r14\\n 1 } } */\n \n void __attribute__((noinline,noclone))\n all_ne_int (vector int a, vector int b)\n {\n   if (__builtin_expect (vec_all_ne (a, b), 1))\n     g = 2;\n }\n-/* { dg-final { scan-assembler-times all_ne_int:\\n\\tvceqfs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tjle 1 } } */\n+/* { dg-final { scan-assembler-times all_ne_int:\\n\\tvceqfs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tbler\\t%r14\\n 1 } } */\n \n void __attribute__((noinline,noclone))\n all_gt_int (vector int a, vector int b)\n {\n   if (__builtin_expect (vec_all_gt (a, b), 1))\n     g = 2;\n }\n-/* { dg-final { scan-assembler-times all_gt_int:\\n\\tvchfs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tjne 1 } } */\n+/* { dg-final { scan-assembler-times all_gt_int:\\n\\tvchfs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tbner\\t%r14\\n 1 } } */\n \n void __attribute__((noinline,noclone))\n all_lt_int (vector int a, vector int b)\n {\n   if (__builtin_expect (vec_all_lt (a, b), 1))\n     g = 2;\n }\n-/* { dg-final { scan-assembler-times all_lt_int:\\n\\tvchfs\\t%v\\[0-9\\]*,%v26,%v24\\n\\tjne 1 } } */\n+/* { dg-final { scan-assembler-times all_lt_int:\\n\\tvchfs\\t%v\\[0-9\\]*,%v26,%v24\\n\\tbner\\t%r14\\n 1 } } */\n \n void __attribute__((noinline,noclone))\n all_ge_int (vector int a, vector int b)\n {\n   if (__builtin_expect (vec_all_ge (a, b), 1))\n     g = 2;\n }\n-/* { dg-final { scan-assembler-times all_ge_int:\\n\\tvchfs\\t%v\\[0-9\\]*,%v26,%v24\\n\\tjle 1 } } */\n+/* { dg-final { scan-assembler-times all_ge_int:\\n\\tvchfs\\t%v\\[0-9\\]*,%v26,%v24\\n\\tbler\\t%r14\\n 1 } } */\n \n void __attribute__((noinline,noclone))\n all_le_int (vector int a, vector int b)\n {\n   if (__builtin_expect (vec_all_le (a, b), 1))\n     g = 2;\n }\n-/* { dg-final { scan-assembler-times all_le_int:\\n\\tvchfs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tjle 1 } } */\n+/* { dg-final { scan-assembler-times all_le_int:\\n\\tvchfs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tbler\\t%r14\\n 1 } } */\n \n void __attribute__((noinline,noclone))\n any_eq_int (vector int a, vector int b)\n {\n   if (__builtin_expect (vec_any_eq (a, b), 1))\n     g = 2;\n }\n-/* { dg-final { scan-assembler-times any_eq_int:\\n\\tvceqfs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tjnle 1 } } */\n+/* { dg-final { scan-assembler-times any_eq_int:\\n\\tvceqfs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tbnler\\t%r14\\n 1 } } */\n \n void __attribute__((noinline,noclone))\n any_ne_int (vector int a, vector int b)\n {\n   if (__builtin_expect (vec_any_ne (a, b), 1))\n     g = 2;\n }\n-/* { dg-final { scan-assembler-times any_ne_int:\\n\\tvceqfs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tje 1 } } */\n+/* { dg-final { scan-assembler-times any_ne_int:\\n\\tvceqfs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tber\\t%r14\\n 1 } } */\n \n void __attribute__((noinline,noclone))\n any_gt_int (vector int a, vector int b)\n {\n   if (__builtin_expect (vec_any_gt (a, b), 1))\n     g = 2;\n }\n-/* { dg-final { scan-assembler-times any_gt_int:\\n\\tvchfs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tjnle 1 } } */\n+/* { dg-final { scan-assembler-times any_gt_int:\\n\\tvchfs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tbnler\\t%r14\\n 1 } } */\n \n void __attribute__((noinline,noclone))\n any_lt_int (vector int a, vector int b)\n {\n   if (__builtin_expect (vec_any_lt (a, b), 1))\n     g = 2;\n }\n-/* { dg-final { scan-assembler-times any_lt_int:\\n\\tvchfs\\t%v\\[0-9\\]*,%v26,%v24\\n\\tjnle 1 } } */\n+/* { dg-final { scan-assembler-times any_lt_int:\\n\\tvchfs\\t%v\\[0-9\\]*,%v26,%v24\\n\\tbnler\\t%r14\\n 1 } } */\n \n void __attribute__((noinline,noclone))\n any_ge_int (vector int a, vector int b)\n {\n   if (__builtin_expect (vec_any_ge (a, b), 1))\n     g = 2;\n }\n-/* { dg-final { scan-assembler-times any_ge_int:\\n\\tvchfs\\t%v\\[0-9\\]*,%v26,%v24\\n\\tje 1 } } */\n+/* { dg-final { scan-assembler-times any_ge_int:\\n\\tvchfs\\t%v\\[0-9\\]*,%v26,%v24\\n\\tber\\t%r14\\n 1 } } */\n \n void __attribute__((noinline,noclone))\n any_le_int (vector int a, vector int b)\n {\n   if (__builtin_expect (vec_any_le (a, b), 1))\n     g = 2;\n }\n-/* { dg-final { scan-assembler-times any_le_int:\\n\\tvchfs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tje 1 } } */\n+/* { dg-final { scan-assembler-times any_le_int:\\n\\tvchfs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tber\\t%r14\\n 1 } } */\n "}]}