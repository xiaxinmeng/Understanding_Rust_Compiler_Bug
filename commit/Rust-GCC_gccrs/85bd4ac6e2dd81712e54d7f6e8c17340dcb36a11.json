{"sha": "85bd4ac6e2dd81712e54d7f6e8c17340dcb36a11", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODViZDRhYzZlMmRkODE3MTJlNTRkN2Y2ZThjMTczNDBkY2IzNmExMQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2013-07-26T08:22:25Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2013-07-26T08:22:25Z"}, "message": "combine.c (simplify_comparison): Re-canonicalize operands where appropriate.\n\n2013-07-26  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n            Richard Earnshaw  <richard.earnshaw@arm.com>\n\n\t* combine.c (simplify_comparison): Re-canonicalize operands\n\twhere appropriate.\t\n\t* config/arm/arm.md (movcond_addsi): New splitter.\n\nCo-Authored-By: Richard Earnshaw <rearnsha@arm.com>\n\nFrom-SVN: r201260", "tree": {"sha": "ffddeade2b2ae6b5997db6302eb68fa641da9d57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ffddeade2b2ae6b5997db6302eb68fa641da9d57"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85bd4ac6e2dd81712e54d7f6e8c17340dcb36a11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85bd4ac6e2dd81712e54d7f6e8c17340dcb36a11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85bd4ac6e2dd81712e54d7f6e8c17340dcb36a11", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85bd4ac6e2dd81712e54d7f6e8c17340dcb36a11/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "62038e61fea9911e708cdc9f9f3fa16557cf9ad0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62038e61fea9911e708cdc9f9f3fa16557cf9ad0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62038e61fea9911e708cdc9f9f3fa16557cf9ad0"}], "stats": {"total": 52, "additions": 52, "deletions": 0}, "files": [{"sha": "f3fabaaca407369f11d770927a308562f26211f8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85bd4ac6e2dd81712e54d7f6e8c17340dcb36a11/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85bd4ac6e2dd81712e54d7f6e8c17340dcb36a11/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=85bd4ac6e2dd81712e54d7f6e8c17340dcb36a11", "patch": "@@ -1,3 +1,10 @@\n+2013-07-26  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+            Richard Earnshaw  <richard.earnshaw@arm.com>\n+\n+\t* combine.c (simplify_comparison): Re-canonicalize operands\n+\twhere appropriate.\t\n+\t* config/arm/arm.md (movcond_addsi): New splitter.\n+\n 2013-07-25  Sterling Augustine  <saugustine@google.com>\n \n \t* dwarf2out.c (size_of_pubnames): Move code to..."}, {"sha": "754cd341f45cb6f35bb4ea3da951e9766c7d3aa3", "filename": "gcc/combine.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85bd4ac6e2dd81712e54d7f6e8c17340dcb36a11/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85bd4ac6e2dd81712e54d7f6e8c17340dcb36a11/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=85bd4ac6e2dd81712e54d7f6e8c17340dcb36a11", "patch": "@@ -11990,6 +11990,13 @@ simplify_comparison (enum rtx_code code, rtx *pop0, rtx *pop1)\n \t    }\n \t}\n \n+  /* We may have changed the comparison operands.  Re-canonicalize.  */\n+  if (swap_commutative_operands_p (op0, op1))\n+    {\n+      tem = op0, op0 = op1, op1 = tem;\n+      code = swap_condition (code);\n+    }\n+\n   /* If this machine only supports a subset of valid comparisons, see if we\n      can convert an unsupported one into a supported one.  */\n   target_canonicalize_comparison (&code, &op0, &op1, 0);"}, {"sha": "fceb04c12726ca269331a5dbe2e8fabdab2f054b", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85bd4ac6e2dd81712e54d7f6e8c17340dcb36a11/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85bd4ac6e2dd81712e54d7f6e8c17340dcb36a11/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=85bd4ac6e2dd81712e54d7f6e8c17340dcb36a11", "patch": "@@ -11112,6 +11112,44 @@\n    (set_attr \"length\" \"12\")]\n )\n \n+(define_insn_and_split \"movcond_addsi\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,l,r\")\n+\t(if_then_else:SI\n+\t (match_operator 5 \"comparison_operator\"\n+\t  [(plus:SI (match_operand:SI 3 \"s_register_operand\" \"r,r,r\")\n+\t            (match_operand:SI 4 \"arm_add_operand\" \"rIL,rIL,rIL\"))\n+            (const_int 0)])\n+\t (match_operand:SI 1 \"arm_rhs_operand\" \"rI,rPy,r\")\n+\t (match_operand:SI 2 \"arm_rhs_operand\" \"rI,rPy,r\")))\n+   (clobber (reg:CC CC_REGNUM))]\n+   \"TARGET_32BIT\"\n+   \"#\"\n+   \"&& reload_completed\"\n+  [(set (reg:CC_NOOV CC_REGNUM)\n+\t(compare:CC_NOOV\n+\t (plus:SI (match_dup 3)\n+\t\t  (match_dup 4))\n+\t (const_int 0)))\n+   (set (match_dup 0) (match_dup 1))\n+   (cond_exec (match_dup 6)\n+\t      (set (match_dup 0) (match_dup 2)))]\n+  \"\n+  {\n+    enum machine_mode mode = SELECT_CC_MODE (GET_CODE (operands[5]),\n+\t\t\t\t\t     operands[3], operands[4]);\n+    enum rtx_code rc = GET_CODE (operands[5]);\n+\n+    operands[6] = gen_rtx_REG (mode, CC_REGNUM);\n+    gcc_assert (!(mode == CCFPmode || mode == CCFPEmode));\n+    rc = reverse_condition (rc);\n+\n+    operands[6] = gen_rtx_fmt_ee (rc, VOIDmode, operands[6], const0_rtx);\n+  }\n+  \"\n+  [(set_attr \"conds\" \"clob\")\n+   (set_attr \"enabled_for_depr_it\" \"no,yes,yes\")]\n+)\n+\n (define_insn \"movcond\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r\")\n \t(if_then_else:SI"}]}