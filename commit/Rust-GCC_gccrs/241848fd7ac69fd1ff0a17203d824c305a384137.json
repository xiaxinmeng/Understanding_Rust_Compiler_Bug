{"sha": "241848fd7ac69fd1ff0a17203d824c305a384137", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQxODQ4ZmQ3YWM2OWZkMWZmMGExNzIwM2Q4MjRjMzA1YTM4NDEzNw==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2018-09-26T09:19:38Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-09-26T09:19:38Z"}, "message": "[Ada] Missing front-end code for constraint checks on fixed point exprs\n\nThis patch ensures that the front-end generates constraint checks for\nsome operations that previously depended on gigi for the corresponding\ncheck. The patch also resets the Do_Range_Check flag so that it never\nappears in the tree presented to gigi.\n\n2018-09-26  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* checks.adb (Apply_Type_Conversion_Checks): Do not generate a\n\trange check on the expression of the conversion if it involves a\n\tfixed-point type, as such conversions are handled specially\n\tduring expansion.\n\t* exp_ch4.adb (Expand_N_Type_Conversion): In a conversion from\n\tFixed to Integer, use the base type of the expression to ensure\n\tthat the caller will generate the proper constraint check when\n\tneeded.\n\nFrom-SVN: r264632", "tree": {"sha": "67c44fcb4fcad12ad1611fa9be88c2c11ba6ab44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67c44fcb4fcad12ad1611fa9be88c2c11ba6ab44"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/241848fd7ac69fd1ff0a17203d824c305a384137", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/241848fd7ac69fd1ff0a17203d824c305a384137", "html_url": "https://github.com/Rust-GCC/gccrs/commit/241848fd7ac69fd1ff0a17203d824c305a384137", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/241848fd7ac69fd1ff0a17203d824c305a384137/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2d9a8c0ba10d03608aa2add8cf9f33053ab8c421", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d9a8c0ba10d03608aa2add8cf9f33053ab8c421", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d9a8c0ba10d03608aa2add8cf9f33053ab8c421"}], "stats": {"total": 33, "additions": 31, "deletions": 2}, "files": [{"sha": "8a9d9e1db63bcadc3ccef4ea02bcc4b3d0be5ac2", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/241848fd7ac69fd1ff0a17203d824c305a384137/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/241848fd7ac69fd1ff0a17203d824c305a384137/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=241848fd7ac69fd1ff0a17203d824c305a384137", "patch": "@@ -1,3 +1,14 @@\n+2018-09-26  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* checks.adb (Apply_Type_Conversion_Checks): Do not generate a\n+\trange check on the expression of the conversion if it involves a\n+\tfixed-point type, as such conversions are handled specially\n+\tduring expansion.\n+\t* exp_ch4.adb (Expand_N_Type_Conversion): In a conversion from\n+\tFixed to Integer, use the base type of the expression to ensure\n+\tthat the caller will generate the proper constraint check when\n+\tneeded.\n+\n 2018-09-26  Maroua Maalej  <maalej@adacore.com>\n \n \t* sem_spark.adb (Check_Loop_Statement): Fix a bug related to"}, {"sha": "5cefbbd8415942ccd2dec47f5b85e3842ff5e75e", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/241848fd7ac69fd1ff0a17203d824c305a384137/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/241848fd7ac69fd1ff0a17203d824c305a384137/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=241848fd7ac69fd1ff0a17203d824c305a384137", "patch": "@@ -3550,8 +3550,21 @@ package body Checks is\n                   Apply_Float_Conversion_Check (Expr, Target_Type);\n \n                else\n-                  Apply_Scalar_Range_Check\n-                    (Expr, Target_Type, Fixed_Int => Conv_OK);\n+                  --  Conversions involving fixed-point types are expanded\n+                  --  separately, and do not need a Range_Check flag, except\n+                  --  in SPARK_Mode, where the explicit constraint check will\n+                  --  not be generated.\n+\n+                  if SPARK_Mode = On\n+                    or else (not Is_Fixed_Point_Type (Expr_Type)\n+                              and then not Is_Fixed_Point_Type (Target_Type))\n+                  then\n+                     Apply_Scalar_Range_Check\n+                       (Expr, Target_Type, Fixed_Int => Conv_OK);\n+\n+                  else\n+                     Set_Do_Range_Check (Expression (N), False);\n+                  end if;\n \n                   --  If the target type has predicates, we need to indicate\n                   --  the need for a check, even if Determine_Range finds that"}, {"sha": "a7aee9fcacf2eb6ad26a0be7dc126868c728dbdb", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/241848fd7ac69fd1ff0a17203d824c305a384137/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/241848fd7ac69fd1ff0a17203d824c305a384137/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=241848fd7ac69fd1ff0a17203d824c305a384137", "patch": "@@ -11694,6 +11694,11 @@ package body Exp_Ch4 is\n             elsif Is_Integer_Type (Etype (N)) then\n                Expand_Convert_Fixed_To_Integer (N);\n \n+               --  The result of the conversion might need a range check,\n+               --   so do not assume that the result is in bounds.\n+\n+               Set_Etype (N, Base_Type (Target_Type));\n+\n             else\n                pragma Assert (Is_Floating_Point_Type (Etype (N)));\n                Expand_Convert_Fixed_To_Float (N);"}]}