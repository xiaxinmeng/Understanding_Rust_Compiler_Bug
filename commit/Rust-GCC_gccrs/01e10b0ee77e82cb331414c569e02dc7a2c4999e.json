{"sha": "01e10b0ee77e82cb331414c569e02dc7a2c4999e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDFlMTBiMGVlNzdlODJjYjMzMTQxNGM1NjllMDJkYzdhMmM0OTk5ZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-06-24T08:40:02Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-06-24T08:41:04Z"}, "message": "fold-const: Fix A <= 0 ? A : -A folding [PR95810]\n\nWe folded A <= 0 ? A : -A into -ABS (A), which is for signed integral types\nincorrect - can invoke on INT_MIN UB twice, once on ABS and once on its\nnegation.\n\nThe following patch fixes it by instead folding it to (type)-ABSU (A).\n\n2020-06-24  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/95810\n\t* fold-const.c (fold_cond_expr_with_comparison): Optimize\n\tA <= 0 ? A : -A into (type)-absu(A) rather than -abs(A).\n\n\t* gcc.dg/ubsan/pr95810.c: New test.", "tree": {"sha": "4fd662b22fa60263df1fe1b0596242a88aa0655d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4fd662b22fa60263df1fe1b0596242a88aa0655d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01e10b0ee77e82cb331414c569e02dc7a2c4999e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01e10b0ee77e82cb331414c569e02dc7a2c4999e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01e10b0ee77e82cb331414c569e02dc7a2c4999e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01e10b0ee77e82cb331414c569e02dc7a2c4999e/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0008858dec9b16da153b948834abb20b9f1ab32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0008858dec9b16da153b948834abb20b9f1ab32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0008858dec9b16da153b948834abb20b9f1ab32"}], "stats": {"total": 31, "additions": 29, "deletions": 2}, "files": [{"sha": "67a379f4f2b517df80f65f929c858dce7878c967", "filename": "gcc/fold-const.c", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01e10b0ee77e82cb331414c569e02dc7a2c4999e/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01e10b0ee77e82cb331414c569e02dc7a2c4999e/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=01e10b0ee77e82cb331414c569e02dc7a2c4999e", "patch": "@@ -5770,8 +5770,22 @@ fold_cond_expr_with_comparison (location_t loc, tree type,\n       case LT_EXPR:\n \tif (TYPE_UNSIGNED (TREE_TYPE (arg1)))\n \t  break;\n-\ttem = fold_build1_loc (loc, ABS_EXPR, TREE_TYPE (arg1), arg1);\n-\treturn negate_expr (fold_convert_loc (loc, type, tem));\n+\tif (ANY_INTEGRAL_TYPE_P (TREE_TYPE (arg1))\n+\t    && !TYPE_OVERFLOW_WRAPS (TREE_TYPE (arg1)))\n+\t  {\n+\t    /* A <= 0 ? A : -A for A INT_MIN is valid, but -abs(INT_MIN)\n+\t       is not, invokes UB both in abs and in the negation of it.\n+\t       So, use ABSU_EXPR instead.  */\n+\t    tree utype = unsigned_type_for (TREE_TYPE (arg1));\n+\t    tem = fold_build1_loc (loc, ABSU_EXPR, utype, arg1);\n+\t    tem = negate_expr (tem);\n+\t    return fold_convert_loc (loc, type, tem);\n+\t  }\n+\telse\n+\t  {\n+\t    tem = fold_build1_loc (loc, ABS_EXPR, TREE_TYPE (arg1), arg1);\n+\t    return negate_expr (fold_convert_loc (loc, type, tem));\n+\t  }\n       default:\n \tgcc_assert (TREE_CODE_CLASS (comp_code) == tcc_comparison);\n \tbreak;"}, {"sha": "535ace69089ff87365d686ed9b2d32472748a4b6", "filename": "gcc/testsuite/gcc.dg/ubsan/pr95810.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01e10b0ee77e82cb331414c569e02dc7a2c4999e/gcc%2Ftestsuite%2Fgcc.dg%2Fubsan%2Fpr95810.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01e10b0ee77e82cb331414c569e02dc7a2c4999e/gcc%2Ftestsuite%2Fgcc.dg%2Fubsan%2Fpr95810.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fubsan%2Fpr95810.c?ref=01e10b0ee77e82cb331414c569e02dc7a2c4999e", "patch": "@@ -0,0 +1,13 @@\n+/* PR middle-end/95810 */\n+/* { dg-do run } */\n+/* { dg-options \"-fsanitize=undefined -fno-sanitize-recover=undefined\" } */\n+\n+int\n+main ()\n+{\n+  int x = -__INT_MAX__ - 1;\n+  x = (x <= 0 ? x : -x);\n+  if (x != -__INT_MAX__ - 1)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}