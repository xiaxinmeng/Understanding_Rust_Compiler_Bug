{"sha": "4c45af42f5eada2603b45faa0903307be09122d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGM0NWFmNDJmNWVhZGEyNjAzYjQ1ZmFhMDkwMzMwN2JlMDkxMjJkNA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-01-26T17:33:37Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-01-26T17:33:37Z"}, "message": "xtensa-protos.h: Remove the prototype for xtensa_builtin_saveregs.\n\n\t* config/xtensa/xtensa-protos.h: Remove the prototype for\n\txtensa_builtin_saveregs.\n\t* config/xtensa/xtensa.c (TARGET_PROMOTE_FUNCTION_ARGS): New.\n\t(TARGET_PROMOTE_FUNCTION_RETURN): Likewise.\n\t(TARGET_PROMOTE_PROTOTYPES): Likewise.\n\t(TARGET_STRUCT_VALUE_RTX): Likewise.\n\t(TARGET_RETURN_IN_MEMORY): Likewise.\n\t(TARGET_EXPAND_BUILTIN_SAVEREGS): Likewise.\n\t(xtensa_builtin_saveregs): Make it static.\n\t(xtensa_return_in_memory): New.\n\t* config/xtensa/xtensa.h (PROMOTE_FUNCTION_ARGS: Remove.\n\t(PROMOTE_FUNCTION_RETURN): Likewise.\n\t(PROMOTE_PROTOTYPES): Likewise.\n\t(STRUCT_VALUE): Likewise.\n\t(RETURN_IN_MEMORY): Likewise.\n\t(EXPAND_BUILTIN_SAVEREGS): Likewise.\n\nFrom-SVN: r76644", "tree": {"sha": "fbacb8c8a2ddd9b0df2609df53c3b93bdbd3cac0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fbacb8c8a2ddd9b0df2609df53c3b93bdbd3cac0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c45af42f5eada2603b45faa0903307be09122d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c45af42f5eada2603b45faa0903307be09122d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c45af42f5eada2603b45faa0903307be09122d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c45af42f5eada2603b45faa0903307be09122d4/comments", "author": null, "committer": null, "parents": [{"sha": "1cc9f5f5f9bee93d16022839b10454929034585d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cc9f5f5f9bee93d16022839b10454929034585d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cc9f5f5f9bee93d16022839b10454929034585d"}], "stats": {"total": 90, "additions": 49, "deletions": 41}, "files": [{"sha": "f873023c6d45453be4b3651faeaee1a7fe07b7f2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c45af42f5eada2603b45faa0903307be09122d4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c45af42f5eada2603b45faa0903307be09122d4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4c45af42f5eada2603b45faa0903307be09122d4", "patch": "@@ -1,3 +1,22 @@\n+2004-01-26  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/xtensa/xtensa-protos.h: Remove the prototype for\n+\txtensa_builtin_saveregs.\n+\t* config/xtensa/xtensa.c (TARGET_PROMOTE_FUNCTION_ARGS): New.\n+\t(TARGET_PROMOTE_FUNCTION_RETURN): Likewise.\n+\t(TARGET_PROMOTE_PROTOTYPES): Likewise.\n+\t(TARGET_STRUCT_VALUE_RTX): Likewise.\n+\t(TARGET_RETURN_IN_MEMORY): Likewise.\n+\t(TARGET_EXPAND_BUILTIN_SAVEREGS): Likewise.\n+\t(xtensa_builtin_saveregs): Make it static.\n+\t(xtensa_return_in_memory): New.\n+\t* config/xtensa/xtensa.h (PROMOTE_FUNCTION_ARGS: Remove.\n+\t(PROMOTE_FUNCTION_RETURN): Likewise.\n+\t(PROMOTE_PROTOTYPES): Likewise.\n+\t(STRUCT_VALUE): Likewise.\n+\t(RETURN_IN_MEMORY): Likewise.\n+\t(EXPAND_BUILTIN_SAVEREGS): Likewise.\n+\n 2004-01-26  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/arm/arm.c (TARGET_SETUP_INCOMING_VARARGS): New."}, {"sha": "7d3208be7cdd2478871a0930706aeb267e1e8daf", "filename": "gcc/config/xtensa/xtensa-protos.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c45af42f5eada2603b45faa0903307be09122d4/gcc%2Fconfig%2Fxtensa%2Fxtensa-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c45af42f5eada2603b45faa0903307be09122d4/gcc%2Fconfig%2Fxtensa%2Fxtensa-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa-protos.h?ref=4c45af42f5eada2603b45faa0903307be09122d4", "patch": "@@ -1,5 +1,5 @@\n /* Prototypes of target machine for GNU compiler for Xtensa.\n-   Copyright 2001,2002,2003 Free Software Foundation, Inc.\n+   Copyright 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n    Contributed by Bob Wilson (bwilson@tensilica.com) at Tensilica.\n \n This file is part of GCC.\n@@ -84,7 +84,6 @@ extern void print_operand (FILE *, rtx, int);\n extern void print_operand_address (FILE *, rtx);\n extern void xtensa_output_literal (FILE *, rtx, enum machine_mode, int);\n extern rtx xtensa_return_addr (int, rtx);\n-extern rtx xtensa_builtin_saveregs (void);\n extern enum reg_class xtensa_preferred_reload_class (rtx, enum reg_class, int);\n extern enum reg_class xtensa_secondary_reload_class (enum reg_class,\n \t\t\t\t\t\t     enum machine_mode, rtx,"}, {"sha": "d5087285766adf7bc8bdfc2fce7d4879326008c9", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c45af42f5eada2603b45faa0903307be09122d4/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c45af42f5eada2603b45faa0903307be09122d4/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=4c45af42f5eada2603b45faa0903307be09122d4", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines for insn-output.c for Tensilica's Xtensa architecture.\n-   Copyright 2001,2002,2003 Free Software Foundation, Inc.\n+   Copyright 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n    Contributed by Bob Wilson (bwilson@tensilica.com) at Tensilica.\n \n This file is part of GCC.\n@@ -200,12 +200,14 @@ static enum machine_mode xtensa_find_mode_for_size (unsigned);\n static struct machine_function * xtensa_init_machine_status (void);\n static void printx (FILE *, signed int);\n static void xtensa_function_epilogue (FILE *, HOST_WIDE_INT);\n+static rtx xtensa_builtin_saveregs (void);\n static unsigned int xtensa_multibss_section_type_flags (tree, const char *,\n \t\t\t\t\t\t\tint) ATTRIBUTE_UNUSED;\n static void xtensa_select_rtx_section (enum machine_mode, rtx,\n \t\t\t\t       unsigned HOST_WIDE_INT);\n static bool xtensa_rtx_costs (rtx, int, int, int *);\n static tree xtensa_build_builtin_va_list (void);\n+static bool xtensa_return_in_memory (tree, tree);\n \n static int current_function_arg_words;\n static const int reg_nonleaf_alloc_order[FIRST_PSEUDO_REGISTER] =\n@@ -237,6 +239,21 @@ static const int reg_nonleaf_alloc_order[FIRST_PSEUDO_REGISTER] =\n #undef TARGET_BUILD_BUILTIN_VA_LIST\n #define TARGET_BUILD_BUILTIN_VA_LIST xtensa_build_builtin_va_list\n \n+#undef TARGET_PROMOTE_FUNCTION_ARGS\n+#define TARGET_PROMOTE_FUNCTION_ARGS hook_bool_tree_true\n+#undef TARGET_PROMOTE_FUNCTION_RETURN\n+#define TARGET_PROMOTE_FUNCTION_RETURN hook_bool_tree_true\n+#undef TARGET_PROMOTE_PROTOTYPES\n+#define TARGET_PROMOTE_PROTOTYPES hook_bool_tree_true\n+\n+#undef TARGET_STRUCT_VALUE_RTX\n+#define TARGET_STRUCT_VALUE_RTX hook_rtx_tree_int_null\n+#undef TARGET_RETURN_IN_MEMORY\n+#define TARGET_RETURN_IN_MEMORY xtensa_return_in_memory\n+\n+#undef TARGET_EXPAND_BUILTIN_SAVEREGS\n+#define TARGET_EXPAND_BUILTIN_SAVEREGS xtensa_builtin_saveregs\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n \n@@ -2355,7 +2372,7 @@ xtensa_build_builtin_va_list (void)\n /* Save the incoming argument registers on the stack.  Returns the\n    address of the saved registers.  */\n \n-rtx\n+static rtx\n xtensa_builtin_saveregs (void)\n {\n   rtx gp_regs, dest;\n@@ -3011,4 +3028,11 @@ xtensa_rtx_costs (rtx x, int code, int outer_code, int *total)\n     }\n }\n \n+static bool\n+xtensa_return_in_memory (tree type, tree fntype ATTRIBUTE_UNUSED)\n+{\n+  return ((unsigned HOST_WIDE_INT) int_size_in_bytes (type)\n+\t  > 4 * UNITS_PER_WORD);\n+}\n+\n #include \"gt-xtensa.h\""}, {"sha": "f650bcd7ad98f77217df4fed8b6010554cfa2497", "filename": "gcc/config/xtensa/xtensa.h", "status": "modified", "additions": 3, "deletions": 37, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c45af42f5eada2603b45faa0903307be09122d4/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c45af42f5eada2603b45faa0903307be09122d4/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.h?ref=4c45af42f5eada2603b45faa0903307be09122d4", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of Tensilica's Xtensa target machine for GNU compiler.\n-   Copyright 2001,2002,2003 Free Software Foundation, Inc.\n+   Copyright 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n    Contributed by Bob Wilson (bwilson@tensilica.com) at Tensilica.\n \n This file is part of GCC.\n@@ -204,15 +204,6 @@ extern unsigned xtensa_current_frame_size;\n       }\t\t\t\t\t\t\t\t\t\\\n   } while (0)\n \n-/* The promotion described by `PROMOTE_MODE' should also be done for\n-   outgoing function arguments.  */\n-#define PROMOTE_FUNCTION_ARGS\n-\n-/* The promotion described by `PROMOTE_MODE' should also be done for\n-   the return value of functions.  Note: `FUNCTION_VALUE' must perform\n-   the same promotions done by `PROMOTE_MODE'.  */\n-#define PROMOTE_FUNCTION_RETURN\n-\n /* Imitate the way many other C compilers handle alignment of\n    bitfields and the structures that contain them.  */\n #define PCC_BITFIELD_TYPE_MATTERS 1\n@@ -239,10 +230,6 @@ extern unsigned xtensa_current_frame_size;\n \t|| TREE_CODE (TYPE) == UNION_TYPE\t\t\t\t\\\n \t|| TREE_CODE (TYPE) == RECORD_TYPE)) ? BITS_PER_WORD : (ALIGN))\n \n-/* An argument declared as 'char' or 'short' in a prototype should\n-   actually be passed as an 'int'.  */\n-#define PROMOTE_PROTOTYPES 1\n-\n /* Operations between registers always perform the operation\n    on the full register even if a narrower mode is specified.  */\n #define WORD_REGISTER_OPERATIONS\n@@ -425,9 +412,6 @@ extern char xtensa_hard_regno_mode_ok[][FIRST_PSEUDO_REGISTER];\n    a real pain to get them reloaded.  */\n #define FPCC_REGNUM (BR_REG_FIRST + 0)\n \n-/* Pass structure value address as an \"invisible\" first argument.  */\n-#define STRUCT_VALUE 0\n-\n /* It is as good or better to call a constant function address than to\n    call an address kept in a register.  */\n #define NO_FUNCTION_CSE 1\n@@ -701,20 +685,10 @@ extern enum reg_class xtensa_char_to_class[256];\n /* Don't worry about compatibility with PCC.  */\n #define DEFAULT_PCC_STRUCT_RETURN 0\n \n-/* For Xtensa, up to 4 words can be returned in registers.  (It would\n-   have been nice to allow up to 6 words in registers but GCC cannot\n-   support that.  The return value must be given one of the standard\n-   MODE_INT modes, and there is no 6 word mode.  Instead, if we try to\n-   return a 6 word structure, GCC selects the next biggest mode\n-   (OImode, 8 words) and then the register allocator fails because\n-   there is no 8-register group beginning with a10.)  */\n-#define RETURN_IN_MEMORY(TYPE)\t\t\t\t\t\t\\\n-  ((unsigned HOST_WIDE_INT) int_size_in_bytes (TYPE) > 4 * UNITS_PER_WORD)\n-\n /* Define how to find the value returned by a library function\n    assuming the value has mode MODE.  Because we have defined\n-   PROMOTE_FUNCTION_RETURN, we have to perform the same promotions as\n-   PROMOTE_MODE.  */\n+   TARGET_PROMOTE_FUNCTION_RETURN that returns true, we have to\n+   perform the same promotions as PROMOTE_MODE.  */\n #define XTENSA_LIBCALL_VALUE(MODE, OUTGOINGP)\t\t\t\t\\\n   gen_rtx_REG ((GET_MODE_CLASS (MODE) == MODE_INT\t\t\t\\\n \t\t&& GET_MODE_SIZE (MODE) < UNITS_PER_WORD)\t\t\\\n@@ -932,14 +906,6 @@ typedef struct xtensa_args {\n \t\t       0, VOIDmode, 1, addr, Pmode);\t\t\t\\\n   } while (0)\n \n-/* If defined, is a C expression that produces the machine-specific\n-   code for a call to '__builtin_saveregs'.  This code will be moved\n-   to the very beginning of the function, before any parameter access\n-   are made.  The return value of this function should be an RTX that\n-   contains the value to use as the return of '__builtin_saveregs'.  */\n-#define EXPAND_BUILTIN_SAVEREGS \\\n-  xtensa_builtin_saveregs\n-\n /* Implement `va_start' for varargs and stdarg.  */\n #define EXPAND_BUILTIN_VA_START(valist, nextarg) \\\n   xtensa_va_start (valist, nextarg)"}]}