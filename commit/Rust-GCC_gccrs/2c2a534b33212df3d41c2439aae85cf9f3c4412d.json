{"sha": "2c2a534b33212df3d41c2439aae85cf9f3c4412d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmMyYTUzNGIzMzIxMmRmM2Q0MWMyNDM5YWFlODVjZjlmM2M0NDEyZA==", "commit": {"author": {"name": "David E O'Brien", "email": "obrien@FreeBSD.org", "date": "2000-08-04T17:22:03Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2000-08-04T17:22:03Z"}, "message": "mask_array.h (mask_array): Rename template type parameter to avoid conflicts with ctype.h on BSD systems.\n\n        * std/mask_array.h (mask_array): Rename template type\n        parameter to avoid conflicts with ctype.h on BSD systems.\n        * std/slice_array.h (slice_array): Likewise.\n\nFrom-SVN: r35486", "tree": {"sha": "661c48424b837ec48b559d52ea7b4df8f231b400", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/661c48424b837ec48b559d52ea7b4df8f231b400"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c2a534b33212df3d41c2439aae85cf9f3c4412d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c2a534b33212df3d41c2439aae85cf9f3c4412d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c2a534b33212df3d41c2439aae85cf9f3c4412d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c2a534b33212df3d41c2439aae85cf9f3c4412d/comments", "author": null, "committer": null, "parents": [{"sha": "a6e919b38231bf5ca006464dca59920b851466fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6e919b38231bf5ca006464dca59920b851466fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6e919b38231bf5ca006464dca59920b851466fa"}], "stats": {"total": 174, "additions": 90, "deletions": 84}, "files": [{"sha": "010a805f24c941035174710e32d8fd3b774ca537", "filename": "libstdc++/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c2a534b33212df3d41c2439aae85cf9f3c4412d/libstdc%2B%2B%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c2a534b33212df3d41c2439aae85cf9f3c4412d/libstdc%2B%2B%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B%2FChangeLog?ref=2c2a534b33212df3d41c2439aae85cf9f3c4412d", "patch": "@@ -1,3 +1,9 @@\n+2000-8-4  David E O'Brien  <obrien@FreeBSD.org>\n+\n+\t* std/mask_array.h (mask_array): Rename template type\n+\tparameter to avoid conflicts with ctype.h on BSD systems.\n+\t* std/slice_array.h (slice_array): Likewise.\n+\n 2000-07-17  Gabriel Dos Reis  <gdr@codesourcery.com>\n \n \t* std/valarray_array.h(__valarray_sum): Make inline."}, {"sha": "033e6f218fa863029fc535b1d797bd897168f3a9", "filename": "libstdc++/std/mask_array.h", "status": "modified", "additions": 42, "deletions": 42, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c2a534b33212df3d41c2439aae85cf9f3c4412d/libstdc%2B%2B%2Fstd%2Fmask_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c2a534b33212df3d41c2439aae85cf9f3c4412d/libstdc%2B%2B%2Fstd%2Fmask_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B%2Fstd%2Fmask_array.h?ref=2c2a534b33212df3d41c2439aae85cf9f3c4412d", "patch": "@@ -34,54 +34,54 @@\n \n extern \"C++\" {\n \n-template <class _T> class mask_array\n+template <class _Tp> class mask_array\n { \n public:\n-    typedef _T value_type;\n+    typedef _Tp value_type;\n     \n-    void operator=  (const valarray<_T>&) const;\n-    void operator*= (const valarray<_T>&) const;\n-    void operator/= (const valarray<_T>&) const;\n-    void operator%= (const valarray<_T>&) const;\n-    void operator+= (const valarray<_T>&) const; \n-    void operator-= (const valarray<_T>&) const;\n-    void operator^= (const valarray<_T>&) const;  \n-    void operator&= (const valarray<_T>&) const;\n-    void operator|= (const valarray<_T>&) const;\n-    void operator<<=(const valarray<_T>&) const;  \n-    void operator>>=(const valarray<_T>&) const; \n-    void operator= (const _T&);\n+    void operator=  (const valarray<_Tp>&) const;\n+    void operator*= (const valarray<_Tp>&) const;\n+    void operator/= (const valarray<_Tp>&) const;\n+    void operator%= (const valarray<_Tp>&) const;\n+    void operator+= (const valarray<_Tp>&) const; \n+    void operator-= (const valarray<_Tp>&) const;\n+    void operator^= (const valarray<_Tp>&) const;  \n+    void operator&= (const valarray<_Tp>&) const;\n+    void operator|= (const valarray<_Tp>&) const;\n+    void operator<<=(const valarray<_Tp>&) const;  \n+    void operator>>=(const valarray<_Tp>&) const; \n+    void operator= (const _Tp&);\n     \n     template<class _Dom>\n-    void operator=  (const _Expr<_Dom,_T>&) const;\n+    void operator=  (const _Expr<_Dom,_Tp>&) const;\n     template<class _Dom>\n-    void operator*= (const _Expr<_Dom,_T>&) const;\n+    void operator*= (const _Expr<_Dom,_Tp>&) const;\n     template<class _Dom>\n-    void operator/= (const _Expr<_Dom,_T>&) const;\n+    void operator/= (const _Expr<_Dom,_Tp>&) const;\n     template<class _Dom>\n-    void operator%= (const _Expr<_Dom,_T>&) const;\n+    void operator%= (const _Expr<_Dom,_Tp>&) const;\n     template<class _Dom>\n-    void operator+= (const _Expr<_Dom,_T>&) const;\n+    void operator+= (const _Expr<_Dom,_Tp>&) const;\n     template<class _Dom>\n-    void operator-= (const _Expr<_Dom,_T>&) const;\n+    void operator-= (const _Expr<_Dom,_Tp>&) const;\n     template<class _Dom>\n-    void operator^= (const _Expr<_Dom,_T>&) const;\n+    void operator^= (const _Expr<_Dom,_Tp>&) const;\n     template<class _Dom>\n-    void operator&= (const _Expr<_Dom,_T>&) const;\n+    void operator&= (const _Expr<_Dom,_Tp>&) const;\n     template<class _Dom>\n-    void operator|= (const _Expr<_Dom,_T>&) const;\n+    void operator|= (const _Expr<_Dom,_Tp>&) const;\n     template<class _Dom>\n-    void operator<<=(const _Expr<_Dom,_T>&) const;\n+    void operator<<=(const _Expr<_Dom,_Tp>&) const;\n     template<class _Dom>\n-    void operator>>=(const _Expr<_Dom,_T>&) const; \n+    void operator>>=(const _Expr<_Dom,_Tp>&) const; \n     \n private:\n-    mask_array (_Array<_T>, size_t, _Array<bool>);\n-    friend class valarray<_T>;\n+    mask_array (_Array<_Tp>, size_t, _Array<bool>);\n+    friend class valarray<_Tp>;\n     \n     const size_t       _M_sz;\n     const _Array<bool> _M_mask;\n-    const _Array<_T>   _M_array;\n+    const _Array<_Tp>   _M_array;\n     \n     mask_array (const mask_array&);\n     \n@@ -94,40 +94,40 @@ template<typename _Tp>\n inline mask_array<_Tp>::mask_array (const mask_array<_Tp>& a)\n         : _M_sz (a._M_sz), _M_mask (a._M_mask), _M_array (a._M_array) {}\n \n-template<typename _T>\n+template<typename _Tp>\n inline \n-mask_array<_T>::mask_array (_Array<_T> __a, size_t __s, _Array<bool> __m)\n+mask_array<_Tp>::mask_array (_Array<_Tp> __a, size_t __s, _Array<bool> __m)\n         : _M_sz (__s), _M_mask (__m), _M_array (__a) {}\n \n-template<typename _T>\n+template<typename _Tp>\n inline void\n-mask_array<_T>::operator= (const _T& __t)\n+mask_array<_Tp>::operator= (const _Tp& __t)\n { __valarray_fill (_M_array, _M_sz, _M_mask, __t); }\n     \n-template<typename _T>\n+template<typename _Tp>\n inline void\n-mask_array<_T>::operator= (const valarray<_T>& __v) const\n-{ __valarray_copy (_Array<_T> (__v), __v.size (), _M_array, _M_mask); }\n+mask_array<_Tp>::operator= (const valarray<_Tp>& __v) const\n+{ __valarray_copy (_Array<_Tp> (__v), __v.size (), _M_array, _M_mask); }\n \n-template<typename _T>\n+template<typename _Tp>\n template<class E>\n inline void\n-mask_array<_T>::operator= (const _Expr<E, _T>& __e) const\n+mask_array<_Tp>::operator= (const _Expr<E, _Tp>& __e) const\n { __valarray_copy (__e, __e.size (), _M_array, _M_mask); }\n \n #undef _DEFINE_VALARRAY_OPERATOR\n #define _DEFINE_VALARRAY_OPERATOR(op, name)\t\t\t\t\\\n-template<typename _T>\t\t\t\t\t\t\t\\\n+template<typename _Tp>\t\t\t\t\t\t\t\\\n inline void\t\t\t\t\t\t\t\t\\\n-mask_array<_T>::operator op##= (const valarray<_T>& __v) const\t\t\\\n+mask_array<_Tp>::operator op##= (const valarray<_Tp>& __v) const\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   _Array_augmented_##name (_M_array, _M_mask, \t\t\t\t\\\n-                           _Array<_T> (__v), __v.size ());\t\t\\\n+                           _Array<_Tp> (__v), __v.size ());\t\t\\\n }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-template<typename _T> template<class E>\t\t\t\t\t\\\n+template<typename _Tp> template<class E>\t\t\t\t\t\\\n inline void\t\t\t\t\t\t\t\t\\\n-mask_array<_T>::operator op##= (const _Expr<E, _T>& __e) const\t\t\\\n+mask_array<_Tp>::operator op##= (const _Expr<E, _Tp>& __e) const\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   _Array_augmented_##name (_M_array, _M_mask, __e, __e.size ());\t\\\n }"}, {"sha": "0d3ac794753620de09d2f326fa0a9b2017a7134d", "filename": "libstdc++/std/slice_array.h", "status": "modified", "additions": 42, "deletions": 42, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c2a534b33212df3d41c2439aae85cf9f3c4412d/libstdc%2B%2B%2Fstd%2Fslice_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c2a534b33212df3d41c2439aae85cf9f3c4412d/libstdc%2B%2B%2Fstd%2Fslice_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B%2Fstd%2Fslice_array.h?ref=2c2a534b33212df3d41c2439aae85cf9f3c4412d", "patch": "@@ -34,55 +34,55 @@\n \n extern \"C++\" {\n \n-template<typename _T>\n+template<typename _Tp>\n class slice_array\n {\n public:\n-    typedef _T value_type;\n+    typedef _Tp value_type;\n     \n-    void operator=   (const valarray<_T>&) const;\n-    void operator*=  (const valarray<_T>&) const;\n-    void operator/=  (const valarray<_T>&) const;\n-    void operator%=  (const valarray<_T>&) const;\n-    void operator+=  (const valarray<_T>&) const;\n-    void operator-=  (const valarray<_T>&) const;\n-    void operator^=  (const valarray<_T>&) const;\n-    void operator&=  (const valarray<_T>&) const;\n-    void operator|=  (const valarray<_T>&) const;\n-    void operator<<= (const valarray<_T>&) const;\n-    void operator>>= (const valarray<_T>&) const;\n-    void operator= (const _T &);\n+    void operator=   (const valarray<_Tp>&) const;\n+    void operator*=  (const valarray<_Tp>&) const;\n+    void operator/=  (const valarray<_Tp>&) const;\n+    void operator%=  (const valarray<_Tp>&) const;\n+    void operator+=  (const valarray<_Tp>&) const;\n+    void operator-=  (const valarray<_Tp>&) const;\n+    void operator^=  (const valarray<_Tp>&) const;\n+    void operator&=  (const valarray<_Tp>&) const;\n+    void operator|=  (const valarray<_Tp>&) const;\n+    void operator<<= (const valarray<_Tp>&) const;\n+    void operator>>= (const valarray<_Tp>&) const;\n+    void operator= (const _Tp &);\n     \n     template<class _Dom>\n-    void operator=   (const _Expr<_Dom,_T>&) const;\n+    void operator=   (const _Expr<_Dom,_Tp>&) const;\n     template<class _Dom>\n-    void operator*=  (const _Expr<_Dom,_T>&) const;\n+    void operator*=  (const _Expr<_Dom,_Tp>&) const;\n     template<class _Dom>\n-    void operator/=  (const _Expr<_Dom,_T>&) const;\n+    void operator/=  (const _Expr<_Dom,_Tp>&) const;\n     template<class _Dom>\n-    void operator%=  (const _Expr<_Dom,_T>&) const;\n+    void operator%=  (const _Expr<_Dom,_Tp>&) const;\n     template<class _Dom>\n-    void operator+=  (const _Expr<_Dom,_T>&) const;\n+    void operator+=  (const _Expr<_Dom,_Tp>&) const;\n     template<class _Dom>\n-    void operator-=  (const _Expr<_Dom,_T>&) const;\n+    void operator-=  (const _Expr<_Dom,_Tp>&) const;\n     template<class _Dom>\n-    void operator^=  (const _Expr<_Dom,_T>&) const;\n+    void operator^=  (const _Expr<_Dom,_Tp>&) const;\n     template<class _Dom>\n-    void operator&=  (const _Expr<_Dom,_T>&) const;\n+    void operator&=  (const _Expr<_Dom,_Tp>&) const;\n     template<class _Dom>\n-    void operator|=  (const _Expr<_Dom,_T>&) const;\n+    void operator|=  (const _Expr<_Dom,_Tp>&) const;\n     template<class _Dom>\n-    void operator<<= (const _Expr<_Dom,_T>&) const;\n+    void operator<<= (const _Expr<_Dom,_Tp>&) const;\n     template<class _Dom>\n-    void operator>>= (const _Expr<_Dom,_T>&) const;\n+    void operator>>= (const _Expr<_Dom,_Tp>&) const;\n     \n private:\n-    friend class valarray<_T>;\n-    slice_array(_Array<_T>, const slice&);\n+    friend class valarray<_Tp>;\n+    slice_array(_Array<_Tp>, const slice&);\n     \n     const size_t     _M_sz;\n     const size_t     _M_stride;\n-    const _Array<_T> _M_array;\n+    const _Array<_Tp> _M_array;\n     \n     // this constructor is implemented since we need to return a value.\n     slice_array (const slice_array&);\n@@ -92,43 +92,43 @@ class slice_array\n     slice_array& operator= (const slice_array&);\n };\n \n-template<typename _T>\n-inline slice_array<_T>::slice_array (_Array<_T> __a, const slice& __s)\n+template<typename _Tp>\n+inline slice_array<_Tp>::slice_array (_Array<_Tp> __a, const slice& __s)\n         : _M_sz (__s.size ()), _M_stride (__s.stride ()),\n           _M_array (__a.begin () + __s.start ()) {}\n \n template<typename _Tp>\n inline slice_array<_Tp>::slice_array(const slice_array<_Tp>& a)\n         : _M_sz(a._M_sz), _M_stride(a._M_stride), _M_array(a._M_array) {}\n \n-template<typename _T>\n+template<typename _Tp>\n inline void\n-slice_array<_T>::operator= (const _T& __t) \n+slice_array<_Tp>::operator= (const _Tp& __t) \n { __valarray_fill (_M_array, _M_sz, _M_stride, __t); }\n \n-template<typename _T>\n+template<typename _Tp>\n inline void\n-slice_array<_T>::operator= (const valarray<_T>& __v) const\n-{ __valarray_copy (_Array<_T> (__v), _M_array, _M_sz, _M_stride); }\n+slice_array<_Tp>::operator= (const valarray<_Tp>& __v) const\n+{ __valarray_copy (_Array<_Tp> (__v), _M_array, _M_sz, _M_stride); }\n \n-template<typename _T>\n+template<typename _Tp>\n template<class _Dom>\n inline void\n-slice_array<_T>::operator= (const _Expr<_Dom,_T>& __e) const\n+slice_array<_Tp>::operator= (const _Expr<_Dom,_Tp>& __e) const\n { __valarray_copy (__e, _M_sz, _M_array, _M_stride); }\n \n #undef _DEFINE_VALARRAY_OPERATOR\n #define _DEFINE_VALARRAY_OPERATOR(op, name)\t\t\t\t\\\n-template<typename _T>\t\t\t\t\t\t\t\\\n+template<typename _Tp>\t\t\t\t\t\t\t\\\n inline void\t\t\t\t\t\t\t\t\\\n-slice_array<_T>::operator op##= (const valarray<_T>& __v) const\t\t\\\n+slice_array<_Tp>::operator op##= (const valarray<_Tp>& __v) const\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n-  _Array_augmented_##name (_M_array, _M_sz, _M_stride, _Array<_T> (__v));\\\n+  _Array_augmented_##name (_M_array, _M_sz, _M_stride, _Array<_Tp> (__v));\\\n }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-template<typename _T> template<class _Dom>\t\t\t\t\\\n+template<typename _Tp> template<class _Dom>\t\t\t\t\\\n inline void\t\t\t\t\t\t\t\t\\\n-slice_array<_T>::operator op##= (const _Expr<_Dom,_T>& __e) const\t\\\n+slice_array<_Tp>::operator op##= (const _Expr<_Dom,_Tp>& __e) const\t\\\n {\t\t\t\t\t\t\t\t\t\\\n     _Array_augmented_##name (_M_array, _M_stride, __e, _M_sz);\t\t\\\n }"}]}