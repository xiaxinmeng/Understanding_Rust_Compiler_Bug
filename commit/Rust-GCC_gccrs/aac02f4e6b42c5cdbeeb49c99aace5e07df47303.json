{"sha": "aac02f4e6b42c5cdbeeb49c99aace5e07df47303", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWFjMDJmNGU2YjQyYzVjZGJlZWI0OWM5OWFhY2U1ZTA3ZGY0NzMwMw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-09-10T21:00:16Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-09-10T21:00:16Z"}, "message": "c-parse.in: Revert last change.\n\n        * c-parse.in: Revert last change.\n        (init_reswords): Do not enter disabled keywords into the ridpointers\n        table, modulo objc weirdness.\n        (_yylex): Return the canonical spelling for a keyword.\n\nFrom-SVN: r36303", "tree": {"sha": "0a4cf5182cb679c9ccd5f1d2036ebed7b102e59a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a4cf5182cb679c9ccd5f1d2036ebed7b102e59a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aac02f4e6b42c5cdbeeb49c99aace5e07df47303", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aac02f4e6b42c5cdbeeb49c99aace5e07df47303", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aac02f4e6b42c5cdbeeb49c99aace5e07df47303", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aac02f4e6b42c5cdbeeb49c99aace5e07df47303/comments", "author": null, "committer": null, "parents": [{"sha": "75d8aea7ff90034e5d8c038f845104359f8951b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75d8aea7ff90034e5d8c038f845104359f8951b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75d8aea7ff90034e5d8c038f845104359f8951b0"}], "stats": {"total": 34, "additions": 27, "deletions": 7}, "files": [{"sha": "65a02e32b1bcf6a96ce2b2f23b491f0977773b44", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aac02f4e6b42c5cdbeeb49c99aace5e07df47303/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aac02f4e6b42c5cdbeeb49c99aace5e07df47303/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aac02f4e6b42c5cdbeeb49c99aace5e07df47303", "patch": "@@ -1,3 +1,10 @@\n+2000-09-10  Richard Henderson  <rth@cygnus.com>\n+\n+\t* c-parse.in: Revert last change.\n+\t(init_reswords): Do not enter disabled keywords into the ridpointers\n+\ttable, modulo objc weirdness.\n+\t(_yylex): Return the canonical spelling for a keyword.\n+\n 2000-09-10  Philip Blundell  <philb@gnu.org>\n \n \t* config/arm/arm.h (CPP_ISA_SPEC): Don't define `arm' or `thumb'."}, {"sha": "5825da4c7da7519612146011e0959d661fc76cd8", "filename": "gcc/c-parse.in", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aac02f4e6b42c5cdbeeb49c99aace5e07df47303/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aac02f4e6b42c5cdbeeb49c99aace5e07df47303/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=aac02f4e6b42c5cdbeeb49c99aace5e07df47303", "patch": "@@ -1901,22 +1901,22 @@ stmt:\n \t\t{ stmt_count++;\n \t\t  emit_line_note ($<filename>-1, $<lineno>0);\n \t\t  c_expand_asm_operands ($4, $6, NULL_TREE, NULL_TREE,\n-\t\t\t\t\t $2 && C_RID_CODE ($2) == RID_VOLATILE,\n+\t\t\t\t\t $2 == ridpointers[(int)RID_VOLATILE],\n \t\t\t\t\t input_filename, lineno); }\n \t/* This is the case with input operands as well.  */\n \t| ASM_KEYWORD maybe_type_qual '(' expr ':' asm_operands ':' asm_operands ')' ';'\n \t\t{ stmt_count++;\n \t\t  emit_line_note ($<filename>-1, $<lineno>0);\n \t\t  c_expand_asm_operands ($4, $6, $8, NULL_TREE,\n-\t\t\t\t\t $2 && C_RID_CODE ($2) == RID_VOLATILE,\n+\t\t\t\t\t $2 == ridpointers[(int)RID_VOLATILE],\n \t\t\t\t\t input_filename, lineno); }\n \t/* This is the case with clobbered registers as well.  */\n \t| ASM_KEYWORD maybe_type_qual '(' expr ':' asm_operands ':'\n   \t  asm_operands ':' asm_clobbers ')' ';'\n \t\t{ stmt_count++;\n \t\t  emit_line_note ($<filename>-1, $<lineno>0);\n \t\t  c_expand_asm_operands ($4, $6, $8, $10,\n-\t\t\t\t\t $2 && C_RID_CODE ($2) == RID_VOLATILE,\n+\t\t\t\t\t $2 == ridpointers[(int)RID_VOLATILE],\n \t\t\t\t\t input_filename, lineno); }\n \t| GOTO identifier ';'\n \t\t{ tree decl;\n@@ -3061,8 +3061,7 @@ init_reswords ()\n {\n   unsigned int i;\n   tree id;\n-  int mask = (D_YES\n-\t      | (doing_objc_thang ? 0 : D_OBJC)\n+  int mask = ((doing_objc_thang ? 0 : D_OBJC)\n \t      | (flag_isoc99 ? 0 : D_C89)\n \t      | (flag_traditional ? D_TRAD : 0)\n \t      | (flag_no_asm ? (flag_isoc99 ? D_EXT : D_EXT|D_EXT89) : 0));\n@@ -3073,10 +3072,19 @@ init_reswords ()\n   ridpointers = (tree *) xcalloc ((int) RID_MAX, sizeof (tree));\n   for (i = 0; i < N_reswords; i++)\n     {\n+      /* If a keyword is disabled, do not enter it into the table\n+\t and so create a canonical spelling that isn't a keyword.  */\n+      if (reswords[i].disable & mask)\n+\tcontinue;\n+\n       id = get_identifier (reswords[i].word);\n       C_RID_CODE (id) = reswords[i].rid;\n       ridpointers [(int) reswords[i].rid] = id;\n-      if (! (reswords[i].disable & mask))\n+\n+      /* Objective C does tricky things with enabling and disabling \n+\t keywords.  So these we must not elide in the test above, but\n+\t wait and not mark them reserved now.  */\n+      if (! (reswords[i].disable & D_YES))\n \tC_IS_RESERVED_WORD (id) = 1;\n     }\n }\n@@ -3219,7 +3227,12 @@ _yylex ()\n \n     case CPP_NAME:\n       if (C_IS_RESERVED_WORD (yylval.ttype))\n-\treturn rid_to_yy[C_RID_CODE (yylval.ttype)];\n+\t{\n+\t  enum rid rid_code = C_RID_CODE (yylval.ttype);\n+\t  /* Return the canonical spelling for this keyword.  */\n+\t  yylval.ttype = ridpointers[(int) rid_code];\n+\t  return rid_to_yy[(int) rid_code];\n+\t}\n \n       if (IDENTIFIER_POINTER (yylval.ttype)[0] == '@')\n \t{"}]}