{"sha": "f3fdaec48d8cd520d5b7c70136ea551155a10257", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjNmZGFlYzQ4ZDhjZDUyMGQ1YjdjNzAxMzZlYTU1MTE1NWExMDI1Nw==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2003-07-11T05:35:06Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2003-07-11T05:35:06Z"}, "message": "common.opt: More --help messages.\n\n\t* common.opt: More --help messages.\n\t* opts.c (print_help): Use puts().\n\t* toplev.c (f_options): Remove help text.\n\t(display_help): Don't dump f_options.\n\nFrom-SVN: r69217", "tree": {"sha": "5f4b925b44d99a451ea587be84e79def441779ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f4b925b44d99a451ea587be84e79def441779ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3fdaec48d8cd520d5b7c70136ea551155a10257", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3fdaec48d8cd520d5b7c70136ea551155a10257", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3fdaec48d8cd520d5b7c70136ea551155a10257", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3fdaec48d8cd520d5b7c70136ea551155a10257/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7ebbf1ea7d909cdd060f097e98e0ba4abb2065e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ebbf1ea7d909cdd060f097e98e0ba4abb2065e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ebbf1ea7d909cdd060f097e98e0ba4abb2065e4"}], "stats": {"total": 485, "additions": 241, "deletions": 244}, "files": [{"sha": "928de65804bc0d97573a47dfdb4e2ffbb6443ae9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3fdaec48d8cd520d5b7c70136ea551155a10257/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3fdaec48d8cd520d5b7c70136ea551155a10257/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f3fdaec48d8cd520d5b7c70136ea551155a10257", "patch": "@@ -1,3 +1,10 @@\n+2003-07-11  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* common.opt: More --help messages.\n+\t* opts.c (print_help): Use puts().\n+\t* toplev.c (f_options): Remove help text.\n+\t(display_help): Don't dump f_options.\n+\n 2003-07-11  Nathanael Nerode  <neroden@gcc.gnu.org>\n \n \t* fixinc/mkfixinc.sh: Drop reference to unsupported alpha-*-interix*."}, {"sha": "7f1e995c30b95cd66c93a440f0bd1542ac26bb0c", "filename": "gcc/common.opt", "status": "modified", "additions": 116, "deletions": 1, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3fdaec48d8cd520d5b7c70136ea551155a10257/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3fdaec48d8cd520d5b7c70136ea551155a10257/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=f3fdaec48d8cd520d5b7c70136ea551155a10257", "patch": "@@ -117,7 +117,7 @@ Warn about all enumerated switches missing a specific case\n \n Wsystem-headers\n Common\n-Suppress warnings from system headers\n+Do not suppress warnings from system headers\n \n Wuninitialized\n Common\n@@ -180,54 +180,67 @@ Common\n \n falign-functions\n Common\n+Align the start of functions\n \n falign-functions=\n Common RejectNegative Joined UInteger\n \n falign-jumps\n Common\n+Align labels which are only reached by jumping\n \n falign-jumps=\n Common RejectNegative Joined UInteger\n \n falign-labels\n Common\n+Align all labels\n \n falign-labels=\n Common RejectNegative Joined UInteger\n \n falign-loops\n Common\n+Align the start of loops\n \n falign-loops=\n Common RejectNegative Joined UInteger\n \n fargument-alias\n Common\n+Specify that arguments may alias each other and globals\n \n fargument-noalias\n Common\n+Assume arguments may alias globals but not each other\n \n fargument-noalias-global\n Common\n+Assume arguments alias neither each other nor globals\n \n fasynchronous-unwind-tables\n Common\n+Generate unwind tables that are exact at each instruction boundary\n \n fbounds-check\n Common\n+Generate code to check bounds before indexing arrays\n \n fbranch-count-reg\n Common\n+Replace add, compare, branch with branch on count register\n \n fbranch-probabilities\n Common\n+Use profiling information for branch probabilities\n \n fbranch-target-load-optimize\n Common\n+Perform branch target load optimization before prologue / epilogue threading\n \n fbranch-target-load-optimize2\n Common\n+Perform branch target load optimization after prologue / epilogue threading\n \n fcall-saved-\n Common Joined RejectNegative\n@@ -239,113 +252,146 @@ Common Joined RejectNegative\n \n fcaller-saves\n Common\n+Save registers around function calls\n \n fcommon\n Common\n+Do not put uninitialized globals in the common section\n \n fcprop-registers\n Common\n+Perform a register copy-propagation optimization pass\n \n fcrossjumping\n Common\n+Perform cross-jumping optimization\n \n fcse-follow-jumps\n Common\n+When running CSE, follow jumps to their targets\n \n fcse-skip-blocks\n Common\n+When running CSE, follow conditional jumps\n \n fdata-sections\n Common\n+Place data items into their own section\n \n fdefer-pop\n Common\n+Defer popping functions args from stack until later\n \n fdelayed-branch\n Common\n+Attempt to fill delay slots of branch instructions\n \n fdelete-null-pointer-checks\n Common\n+Delete useless null pointer checks\n \n fdiagnostics-show-location=\n Common Joined RejectNegative\n -fdiagnostics-show-location=[once|every-line]\tHow often to emit source location at the beginning of line-wrapped diagnostics\n \n fdump-unnumbered\n Common\n+Suppress output of instruction numbers and line number notes in debugging dumps\n \n feliminate-dwarf2-dups\n Common\n+Perform DWARF2 duplicate elimination\n \n feliminate-unused-debug-symbols\n Common\n+Perform unused type elimination in debug info\n \n feliminate-unused-debug-types\n Common\n+Perform unused type elimination in debug info\n \n fexceptions\n Common\n+Enable exception handling\n \n fexpensive-optimizations\n Common\n+Perform a number of minor, expensive optimizations\n \n ffast-math\n Common\n \n ffinite-math-only\n Common\n+Assume no NaNs or infinities are generated\n \n ffixed-\n Common Joined RejectNegative\n -ffixed-<register>\tMark <register> as being unavailable to the compiler\n \n ffloat-store\n Common\n+Do not store floats in registers\n \n fforce-addr\n Common\n+Copy memory address constants into registers before use\n \n fforce-mem\n Common\n+Copy memory operands into registers before use\n \n ffunction-cse\n Common\n+Allow function addresses to be held in registers\n \n ffunction-sections\n Common\n+Place each function into its own section\n \n fgcse\n Common\n+Perform global common subexpression elimination\n \n fgcse-lm\n Common\n+Perform enhanced load motion during global common subexpression elimination\n \n fgcse-sm\n Common\n+Perform store motion after global common subexpression elimination\n \n fgnu-linker\n Common\n+Output GNU ld formatted global initializers\n \n fguess-branch-probability\n Common\n+Enable guessing of branch probabilities\n \n fident\n Common\n+Process #ident directives\n \n fif-conversion\n Common\n+Perform conversion of conditional jumps to branchless equivalents\n \n fif-conversion2\n Common\n+Perform conversion of conditional jumps to conditional execution\n \n finhibit-size-directive\n Common\n+Do not generate .size directives\n \n finline\n Common\n+Pay attention to the \\\"inline\\\" keyword\n \n finline-functions\n Common\n+Integrate simple functions into their callers\n \n finline-limit-\n Common RejectNegative Joined UInteger\n@@ -356,88 +402,115 @@ Common RejectNegative Joined UInteger\n \n finstrument-functions\n Common\n+Instrument function entry and exit with profiling calls\n \n fkeep-inline-functions\n Common\n+Generate code for functions even if they are fully inlined\n \n fkeep-static-consts\n Common\n+Emit static const variables even if they are not used\n \n fleading-underscore\n Common\n+Give external symbols a leading underscore\n \n floop-optimize\n Common\n+Perform loop optimizations\n \n fmath-errno\n Common\n+Set errno after built-in math functions\n \n fmem-report\n Common\n+Report on permanent memory allocation\n \n fmerge-all-constants\n Common\n+Attempt to merge identical constants and constant variables\n \n fmerge-constants\n Common\n+Attempt to merge identical constants across compilation units\n \n fmessage-length=\n Common RejectNegative Joined UInteger\n -fmessage-length=<number>\tLimit diagnostics to <number> characters per line.  0 suppresses line-wrapping\n \n fmove-all-movables\n Common\n+Force all loop invariant computations out of loops\n \n fnew-ra\n Common\n+Use graph-coloring register allocation\n \n fnon-call-exceptions\n Common\n+Support synchronous non-call exceptions\n \n fold-unroll-loops\n Common\n+Perform loop unrolling when iteration count is known\n \n fold-unroll-all-loops\n Common\n+Perform loop unrolling for all loops\n \n fomit-frame-pointer\n Common\n+When possible do not generate stack frames\n \n foptimize-register-move\n Common\n+Do the full register move optimization pass\n \n foptimize-sibling-calls\n Common\n+Optimize sibling and tail recursive calls\n \n fpack-struct\n Common\n+Pack structure members together without holes\n \n fpcc-struct-return\n Common\n+Return small aggregates in memory, not registers\n \n fpeel-loops\n Common\n+Perform loop peeling\n \n fpeephole\n Common\n+Enable machine specific peephole optimizations\n \n fpeephole2\n Common\n+Enable an RTL peephole pass before sched2\n \n fpic\n Common\n+Generate position-independent code if possible\n \n fpie\n Common\n+Generate position-independent code for executables if possible\n \n fprefetch-loop-arrays\n Common\n+Generate prefetch instructions, if available, for arrays in loops\n \n fprofile\n Common\n+Enable basic program profiling code\n \n fprofile-arcs\n Common\n+Insert arc-based program profiling code\n \n frandom-seed\n Common\n@@ -448,76 +521,99 @@ Common Joined RejectNegative\n \n freduce-all-givs\n Common\n+Strength reduce all loop general induction variables\n \n freg-struct-return\n Common\n+Return small aggregates in registers\n \n fregmove\n Common\n+Enables a register move optimization\n \n frename-registers\n Common\n+Perform a register renaming optimization pass\n \n freorder-blocks\n Common\n+Reorder basic blocks to improve code placement\n \n freorder-functions\n Common\n+Reorder functions to improve code placement\n \n frerun-cse-after-loop\n Common\n+Add a common subexpression elimination pass after loop optimizations\n \n frerun-loop-opt\n Common\n+Run the loop optimizer twice\n \n fsched-interblock\n Common\n+Enable scheduling across basic blocks\n \n fsched-spec\n Common\n+Allow speculative motion of non-loads\n \n fsched-spec-load\n Common\n+Allow speculative motion of some loads\n \n fsched-spec-load-dangerous\n Common\n+Allow speculative motion of more loads\n \n fsched-verbose=\n Common RejectNegative Joined\n -fsched-verbose=<number>\tSet the verbosity level of the scheduler\n \n fsched2-use-superblocks\n Common\n+If scheduling post reload, do superblock scheduling\n \n fsched2-use-traces\n Common\n+If scheduling post reload, do trace scheduling\n \n fschedule-insns\n Common\n+Reschedule instructions before register allocation\n \n fschedule-insns2\n Common\n+Reschedule instructions after register allocation\n \n fshared-data\n Common\n+Mark data as shared rather than private\n \n fsignaling-nans\n Common\n+Disable optimizations observable by IEEE signaling NaNs\n \n fsingle-precision-constant\n Common\n+Convert floating point constants to single precision constants\n \n fssa\n Common\n+Enable static single assignment optimizations\n \n fssa-ccp\n Common\n+Enable SSA conditional constant propagation\n \n fssa-dce\n Common\n+Enable aggressive SSA dead code elimination\n \n fstack-check\n Common\n+Insert stack checking code into the program\n \n fstack-limit\n Common\n@@ -532,64 +628,83 @@ Common RejectNegative Joined\n \n fstrength-reduce\n Common\n+Perform strength reduction optimizations\n \n fstrict-aliasing\n Common\n+Assume strict aliasing rules apply\n \n fsyntax-only\n Common\n+Check for syntax errors, then stop\n \n ftest-coverage\n Common\n+Create data files needed by \\\"gcov\\\"\n \n fthread-jumps\n Common\n+Perform jump threading optimizations\n \n ftime-report\n Common\n+Report the time taken by each compiler pass\n \n ftls-model=\n Common Joined RejectNegative\n -ftls-model=[global-dynamic|local-dynamic|initial-exec|local-exec]\tSet the default thread-local storage code generation model\n \n ftracer\n Common\n+Perform superblock formation via tail duplication\n \n ftrapping-math\n Common\n+Assume floating-point operations can trap\n \n ftrapv\n Common\n+Trap for signed overflow in addition, subtraction and multiplication\n \n funit-at-a-time\n Common\n+Compile whole compilation unit at a time\n \n funroll-loops\n Common\n+Perform loop unrolling when iteration count is known\n \n funroll-all-loops\n Common\n+Perform loop unrolling for all loops\n \n funsafe-math-optimizations\n Common\n+Allow math optimizations that may violate IEEE or ISO standards\n \n funswitch-loops\n Common\n+Perform loop unswitching\n \n funwind-tables\n Common\n+Just generate unwind tables for exception handling\n \n fverbose-asm\n Common\n+Add extra commentary to assembler output\n \n fwrapv\n Common\n+Assume signed arithmetic overflow wraps around\n \n fwritable-strings\n Common\n+Store strings in writable data section\n \n fzero-initialized-in-bss\n Common\n+Put zero initialized data in the bss section\n \n g\n Common JoinedOrMissing"}, {"sha": "64f5ec6cda3202e977ad323d288663f208a3a04d", "filename": "gcc/opts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3fdaec48d8cd520d5b7c70136ea551155a10257/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3fdaec48d8cd520d5b7c70136ea551155a10257/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=f3fdaec48d8cd520d5b7c70136ea551155a10257", "patch": "@@ -1487,7 +1487,7 @@ print_help (void)\n {\n   size_t i, len;\n \n-  printf (_(\"\\nThe following options are language-independent:\\n\"));\n+  puts (_(\"\\nThe following options are language-independent:\\n\"));\n \n   for (i = 0; i < cl_options_count; i++)\n     {"}, {"sha": "0369489ec548d392a9e8475800ee1a88920eafd9", "filename": "gcc/toplev.c", "status": "modified", "additions": 117, "deletions": 242, "changes": 359, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3fdaec48d8cd520d5b7c70136ea551155a10257/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3fdaec48d8cd520d5b7c70136ea551155a10257/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=f3fdaec48d8cd520d5b7c70136ea551155a10257", "patch": "@@ -1029,7 +1029,6 @@ typedef struct\n   const char *const string;\n   int *const variable;\n   const int on_value;\n-  const char *const description;\n }\n lang_independent_options;\n \n@@ -1061,238 +1060,123 @@ static const param_info lang_independent_params[] = {\n \n static const lang_independent_options f_options[] =\n {\n-  {\"eliminate-dwarf2-dups\", &flag_eliminate_dwarf2_dups, 1,\n-   N_(\"Perform DWARF2 duplicate elimination\") },\n-  {\"eliminate-unused-debug-symbols\", &flag_debug_only_used_symbols, 1,\n-   N_(\"Perform unused type elimination in debug info\") },\n-  {\"eliminate-unused-debug-types\", &flag_eliminate_unused_debug_types, 1,\n-   N_(\"Perform unused type elimination in debug info\") },\n-  {\"float-store\", &flag_float_store, 1,\n-   N_(\"Do not store floats in registers\") },\n-  {\"defer-pop\", &flag_defer_pop, 1,\n-   N_(\"Defer popping functions args from stack until later\") },\n-  {\"omit-frame-pointer\", &flag_omit_frame_pointer, 1,\n-   N_(\"When possible do not generate stack frames\") },\n-  {\"optimize-sibling-calls\", &flag_optimize_sibling_calls, 1,\n-   N_(\"Optimize sibling and tail recursive calls\") },\n-  {\"tracer\", &flag_tracer, 1,\n-   N_(\"Perform superblock formation via tail duplication\") },\n-  {\"unit-at-a-time\", &flag_unit_at_a_time, 1,\n-   N_(\"Compile whole compilation unit at a time\") },\n-  {\"cse-follow-jumps\", &flag_cse_follow_jumps, 1,\n-   N_(\"When running CSE, follow jumps to their targets\") },\n-  {\"cse-skip-blocks\", &flag_cse_skip_blocks, 1,\n-   N_(\"When running CSE, follow conditional jumps\") },\n-  {\"expensive-optimizations\", &flag_expensive_optimizations, 1,\n-   N_(\"Perform a number of minor, expensive optimizations\") },\n-  {\"thread-jumps\", &flag_thread_jumps, 1,\n-   N_(\"Perform jump threading optimizations\") },\n-  {\"strength-reduce\", &flag_strength_reduce, 1,\n-   N_(\"Perform strength reduction optimizations\") },\n-  {\"unroll-loops\", &flag_unroll_loops, 1,\n-   N_(\"Perform loop unrolling when iteration count is known\") },\n-  {\"unroll-all-loops\", &flag_unroll_all_loops, 1,\n-   N_(\"Perform loop unrolling for all loops\") },\n-  {\"old-unroll-loops\", &flag_old_unroll_loops, 1,\n-   N_(\"Perform loop unrolling when iteration count is known\") },\n-  {\"old-unroll-all-loops\", &flag_old_unroll_all_loops, 1,\n-   N_(\"Perform loop unrolling for all loops\") },\n-  {\"peel-loops\", &flag_peel_loops, 1,\n-   N_(\"Perform loop peeling\") },\n-  {\"unswitch-loops\", &flag_unswitch_loops, 1,\n-   N_(\"Perform loop unswitching\") },\n-  {\"prefetch-loop-arrays\", &flag_prefetch_loop_arrays, 1,\n-   N_(\"Generate prefetch instructions, if available, for arrays in loops\") },\n-  {\"move-all-movables\", &flag_move_all_movables, 1,\n-   N_(\"Force all loop invariant computations out of loops\") },\n-  {\"reduce-all-givs\", &flag_reduce_all_givs, 1,\n-   N_(\"Strength reduce all loop general induction variables\") },\n-  {\"writable-strings\", &flag_writable_strings, 1,\n-   N_(\"Store strings in writable data section\") },\n-  {\"peephole\", &flag_no_peephole, 0,\n-   N_(\"Enable machine specific peephole optimizations\") },\n-  {\"force-mem\", &flag_force_mem, 1,\n-   N_(\"Copy memory operands into registers before using\") },\n-  {\"force-addr\", &flag_force_addr, 1,\n-   N_(\"Copy memory address constants into regs before using\") },\n-  {\"function-cse\", &flag_no_function_cse, 0,\n-   N_(\"Allow function addresses to be held in registers\") },\n-  {\"inline-functions\", &flag_inline_functions, 1,\n-   N_(\"Integrate simple functions into their callers\") },\n-  {\"keep-inline-functions\", &flag_keep_inline_functions, 1,\n-   N_(\"Generate code for funcs even if they are fully inlined\") },\n-  {\"inline\", &flag_no_inline, 0,\n-   N_(\"Pay attention to the 'inline' keyword\") },\n-  {\"keep-static-consts\", &flag_keep_static_consts, 1,\n-   N_(\"Emit static const variables even if they are not used\") },\n-  {\"syntax-only\", &flag_syntax_only, 1,\n-   N_(\"Check for syntax errors, then stop\") },\n-  {\"shared-data\", &flag_shared_data, 1,\n-   N_(\"Mark data as shared rather than private\") },\n-  {\"caller-saves\", &flag_caller_saves, 1,\n-   N_(\"Enable saving registers around function calls\") },\n-  {\"pcc-struct-return\", &flag_pcc_struct_return, 1,\n-   N_(\"Return 'short' aggregates in memory, not registers\") },\n-  {\"reg-struct-return\", &flag_pcc_struct_return, 0,\n-   N_(\"Return 'short' aggregates in registers\") },\n-  {\"delayed-branch\", &flag_delayed_branch, 1,\n-   N_(\"Attempt to fill delay slots of branch instructions\") },\n-  {\"gcse\", &flag_gcse, 1,\n-   N_(\"Perform the global common subexpression elimination\") },\n-  {\"gcse-lm\", &flag_gcse_lm, 1,\n-   N_(\"Perform enhanced load motion during global subexpression elimination\") },\n-  {\"gcse-sm\", &flag_gcse_sm, 1,\n-   N_(\"Perform store motion after global subexpression elimination\") },\n-  {\"branch-target-load-optimize\", &flag_branch_target_load_optimize, 1,\n-   N_(\"Perform branch target load optimization before prologue / epilogue threading\") },\n-  {\"branch-target-load-optimize2\", &flag_branch_target_load_optimize2, 1,\n-   N_(\"Perform branch target load optimization after prologue / epilogue threading\") },\n-  {\"loop-optimize\", &flag_loop_optimize, 1,\n-   N_(\"Perform the loop optimizations\") },\n-  {\"crossjumping\", &flag_crossjumping, 1,\n-   N_(\"Perform cross-jumping optimization\") },\n-  {\"if-conversion\", &flag_if_conversion, 1,\n-   N_(\"Perform conversion of conditional jumps to branchless equivalents\") },\n-  {\"if-conversion2\", &flag_if_conversion2, 1,\n-   N_(\"Perform conversion of conditional jumps to conditional execution\") },\n-  {\"rerun-cse-after-loop\", &flag_rerun_cse_after_loop, 1,\n-   N_(\"Run CSE pass after loop optimizations\") },\n-  {\"rerun-loop-opt\", &flag_rerun_loop_opt, 1,\n-   N_(\"Run the loop optimizer twice\") },\n-  {\"delete-null-pointer-checks\", &flag_delete_null_pointer_checks, 1,\n-   N_(\"Delete useless null pointer checks\") },\n-  {\"schedule-insns\", &flag_schedule_insns, 1,\n-   N_(\"Reschedule instructions before register allocation\") },\n-  {\"schedule-insns2\", &flag_schedule_insns_after_reload, 1,\n-   N_(\"Reschedule instructions after register allocation\") },\n-  {\"sched-interblock\",&flag_schedule_interblock, 1,\n-   N_(\"Enable scheduling across basic blocks\") },\n-  {\"sched-spec\",&flag_schedule_speculative, 1,\n-   N_(\"Allow speculative motion of non-loads\") },\n-  {\"sched-spec-load\",&flag_schedule_speculative_load, 1,\n-   N_(\"Allow speculative motion of some loads\") },\n-  {\"sched-spec-load-dangerous\",&flag_schedule_speculative_load_dangerous, 1,\n-   N_(\"Allow speculative motion of more loads\") },\n-  {\"sched2-use-superblocks\", &flag_sched2_use_superblocks, 1,\n-   N_(\"If scheduling post reload, do superblock scheduling\") },\n-  {\"sched2-use-traces\", &flag_sched2_use_traces, 1,\n-   N_(\"If scheduling post reload, do trace scheduling\") },\n-  {\"branch-count-reg\",&flag_branch_on_count_reg, 1,\n-   N_(\"Replace add,compare,branch with branch on count reg\") },\n-  {\"pic\", &flag_pic, 1,\n-   N_(\"Generate position independent code, if possible\") },\n-  {\"PIC\", &flag_pic, 2, \"\"},\n-  {\"pie\", &flag_pie, 1,\n-   N_(\"Generate position independent code for executables, if possible\") },\n-  {\"PIE\", &flag_pie, 2, \"\"},\n-  {\"exceptions\", &flag_exceptions, 1,\n-   N_(\"Enable exception handling\") },\n-  {\"unwind-tables\", &flag_unwind_tables, 1,\n-   N_(\"Just generate unwind tables for exception handling\") },\n-  {\"asynchronous-unwind-tables\", &flag_asynchronous_unwind_tables, 1,\n-   N_(\"Generate unwind tables exact at each instruction boundary\") },\n-  {\"non-call-exceptions\", &flag_non_call_exceptions, 1,\n-   N_(\"Support synchronous non-call exceptions\") },\n-  {\"profile-arcs\", &profile_arc_flag, 1,\n-   N_(\"Insert arc based program profiling code\") },\n-  {\"test-coverage\", &flag_test_coverage, 1,\n-   N_(\"Create data files needed by gcov\") },\n-  {\"branch-probabilities\", &flag_branch_probabilities, 1,\n-   N_(\"Use profiling information for branch probabilities\") },\n-  {\"profile\", &profile_flag, 1,\n-   N_(\"Enable basic program profiling code\") },\n-  {\"reorder-blocks\", &flag_reorder_blocks, 1,\n-   N_(\"Reorder basic blocks to improve code placement\") },\n-  {\"reorder-functions\", &flag_reorder_functions, 1,\n-   N_(\"Reorder functions to improve code placement\") },\n-  {\"rename-registers\", &flag_rename_registers, 1,\n-   N_(\"Do the register renaming optimization pass\") },\n-  {\"cprop-registers\", &flag_cprop_registers, 1,\n-   N_(\"Do the register copy-propagation optimization pass\") },\n-  {\"common\", &flag_no_common, 0,\n-   N_(\"Do not put uninitialized globals in the common section\") },\n-  {\"inhibit-size-directive\", &flag_inhibit_size_directive, 1,\n-   N_(\"Do not generate .size directives\") },\n-  {\"function-sections\", &flag_function_sections, 1,\n-   N_(\"place each function into its own section\") },\n-  {\"data-sections\", &flag_data_sections, 1,\n-   N_(\"place data items into their own section\") },\n-  {\"verbose-asm\", &flag_verbose_asm, 1,\n-   N_(\"Add extra commentary to assembler output\") },\n-  {\"gnu-linker\", &flag_gnu_linker, 1,\n-   N_(\"Output GNU ld formatted global initializers\") },\n-  {\"regmove\", &flag_regmove, 1,\n-   N_(\"Enables a register move optimization\") },\n-  {\"optimize-register-move\", &flag_regmove, 1,\n-   N_(\"Do the full regmove optimization pass\") },\n-  {\"pack-struct\", &flag_pack_struct, 1,\n-   N_(\"Pack structure members together without holes\") },\n-  {\"stack-check\", &flag_stack_check, 1,\n-   N_(\"Insert stack checking code into the program\") },\n-  {\"argument-alias\", &flag_argument_noalias, 0,\n-   N_(\"Specify that arguments may alias each other & globals\") },\n-  {\"argument-noalias\", &flag_argument_noalias, 1,\n-   N_(\"Assume arguments may alias globals but not each other\") },\n-  {\"argument-noalias-global\", &flag_argument_noalias, 2,\n-   N_(\"Assume arguments do not alias each other or globals\") },\n-  {\"strict-aliasing\", &flag_strict_aliasing, 1,\n-   N_(\"Assume strict aliasing rules apply\") },\n-  {\"align-loops\", &align_loops, 0,\n-   N_(\"Align the start of loops\") },\n-  {\"align-jumps\", &align_jumps, 0,\n-   N_(\"Align labels which are only reached by jumping\") },\n-  {\"align-labels\", &align_labels, 0,\n-   N_(\"Align all labels\") },\n-  {\"align-functions\", &align_functions, 0,\n-   N_(\"Align the start of functions\") },\n-  {\"merge-constants\", &flag_merge_constants, 1,\n-   N_(\"Attempt to merge identical constants across compilation units\") },\n-  {\"merge-all-constants\", &flag_merge_constants, 2,\n-   N_(\"Attempt to merge identical constants and constant variables\") },\n-  {\"dump-unnumbered\", &flag_dump_unnumbered, 1,\n-   N_(\"Suppress output of instruction numbers and line number notes in debugging dumps\") },\n-  {\"instrument-functions\", &flag_instrument_function_entry_exit, 1,\n-   N_(\"Instrument function entry/exit with profiling calls\") },\n-  {\"zero-initialized-in-bss\", &flag_zero_initialized_in_bss, 1,\n-   N_(\"Put zero initialized data in the bss section\") },\n-  {\"ssa\", &flag_ssa, 1,\n-   N_(\"Enable SSA optimizations\") },\n-  {\"ssa-ccp\", &flag_ssa_ccp, 1,\n-   N_(\"Enable SSA conditional constant propagation\") },\n-  {\"ssa-dce\", &flag_ssa_dce, 1,\n-   N_(\"Enable aggressive SSA dead code elimination\") },\n-  {\"leading-underscore\", &flag_leading_underscore, 1,\n-   N_(\"External symbols have a leading underscore\") },\n-  {\"ident\", &flag_no_ident, 0,\n-   N_(\"Process #ident directives\") },\n-  { \"peephole2\", &flag_peephole2, 1,\n-   N_(\"Enables an rtl peephole pass run before sched2\") },\n-  {\"finite-math-only\", &flag_finite_math_only, 1,\n-   N_(\"Assume no NaNs or +-Infs are generated\") },\n-  { \"guess-branch-probability\", &flag_guess_branch_prob, 1,\n-   N_(\"Enables guessing of branch probabilities\") },\n-  {\"math-errno\", &flag_errno_math, 1,\n-   N_(\"Set errno after built-in math functions\") },\n-  {\"trapping-math\", &flag_trapping_math, 1,\n-   N_(\"Floating-point operations can trap\") },\n-  {\"unsafe-math-optimizations\", &flag_unsafe_math_optimizations, 1,\n-   N_(\"Allow math optimizations that may violate IEEE or ANSI standards\") },\n-  {\"signaling-nans\", &flag_signaling_nans, 1,\n-   N_(\"Disable optimizations observable by IEEE signaling NaNs\") },\n-  {\"bounds-check\", &flag_bounds_check, 1,\n-   N_(\"Generate code to check bounds before indexing arrays\") },\n-  {\"single-precision-constant\", &flag_single_precision_constant, 1,\n-   N_(\"Convert floating point constant to single precision constant\") },\n-  {\"time-report\", &time_report, 1,\n-   N_(\"Report time taken by each compiler pass at end of run\") },\n-  {\"mem-report\", &mem_report, 1,\n-   N_(\"Report on permanent memory allocation at end of run\") },\n-  { \"trapv\", &flag_trapv, 1,\n-   N_(\"Trap for signed overflow in addition / subtraction / multiplication\") },\n-  { \"wrapv\", &flag_wrapv, 1,\n-   N_(\"Assume signed arithmetic overflow wraps around\") },\n-  { \"new-ra\", &flag_new_regalloc, 1,\n-   N_(\"Use graph coloring register allocation.\") },\n+  {\"eliminate-dwarf2-dups\", &flag_eliminate_dwarf2_dups, 1 },\n+  {\"eliminate-unused-debug-symbols\", &flag_debug_only_used_symbols, 1 },\n+  {\"eliminate-unused-debug-types\", &flag_eliminate_unused_debug_types, 1 },\n+  {\"float-store\", &flag_float_store, 1 },\n+  {\"defer-pop\", &flag_defer_pop, 1 },\n+  {\"omit-frame-pointer\", &flag_omit_frame_pointer, 1 },\n+  {\"optimize-sibling-calls\", &flag_optimize_sibling_calls, 1 },\n+  {\"tracer\", &flag_tracer, 1 },\n+  {\"unit-at-a-time\", &flag_unit_at_a_time, 1 },\n+  {\"cse-follow-jumps\", &flag_cse_follow_jumps, 1 },\n+  {\"cse-skip-blocks\", &flag_cse_skip_blocks, 1 },\n+  {\"expensive-optimizations\", &flag_expensive_optimizations, 1 },\n+  {\"thread-jumps\", &flag_thread_jumps, 1 },\n+  {\"strength-reduce\", &flag_strength_reduce, 1 },\n+  {\"unroll-loops\", &flag_unroll_loops, 1 },\n+  {\"unroll-all-loops\", &flag_unroll_all_loops, 1 },\n+  {\"old-unroll-loops\", &flag_old_unroll_loops, 1 },\n+  {\"old-unroll-all-loops\", &flag_old_unroll_all_loops, 1 },\n+  {\"peel-loops\", &flag_peel_loops, 1 },\n+  {\"unswitch-loops\", &flag_unswitch_loops, 1 },\n+  {\"prefetch-loop-arrays\", &flag_prefetch_loop_arrays, 1 },\n+  {\"move-all-movables\", &flag_move_all_movables, 1 },\n+  {\"reduce-all-givs\", &flag_reduce_all_givs, 1 },\n+  {\"writable-strings\", &flag_writable_strings, 1 },\n+  {\"peephole\", &flag_no_peephole, 0 },\n+  {\"force-mem\", &flag_force_mem, 1 },\n+  {\"force-addr\", &flag_force_addr, 1 },\n+  {\"function-cse\", &flag_no_function_cse, 0 },\n+  {\"inline-functions\", &flag_inline_functions, 1 },\n+  {\"keep-inline-functions\", &flag_keep_inline_functions, 1 },\n+  {\"inline\", &flag_no_inline, 0 },\n+  {\"keep-static-consts\", &flag_keep_static_consts, 1 },\n+  {\"syntax-only\", &flag_syntax_only, 1 },\n+  {\"shared-data\", &flag_shared_data, 1 },\n+  {\"caller-saves\", &flag_caller_saves, 1 },\n+  {\"pcc-struct-return\", &flag_pcc_struct_return, 1 },\n+  {\"reg-struct-return\", &flag_pcc_struct_return, 0 },\n+  {\"delayed-branch\", &flag_delayed_branch, 1 },\n+  {\"gcse\", &flag_gcse, 1 },\n+  {\"gcse-lm\", &flag_gcse_lm, 1 },\n+  {\"gcse-sm\", &flag_gcse_sm, 1 },\n+  {\"branch-target-load-optimize\", &flag_branch_target_load_optimize, 1 },\n+  {\"branch-target-load-optimize2\", &flag_branch_target_load_optimize2, 1 },\n+  {\"loop-optimize\", &flag_loop_optimize, 1 },\n+  {\"crossjumping\", &flag_crossjumping, 1 },\n+  {\"if-conversion\", &flag_if_conversion, 1 },\n+  {\"if-conversion2\", &flag_if_conversion2, 1 },\n+  {\"rerun-cse-after-loop\", &flag_rerun_cse_after_loop, 1 },\n+  {\"rerun-loop-opt\", &flag_rerun_loop_opt, 1 },\n+  {\"delete-null-pointer-checks\", &flag_delete_null_pointer_checks, 1 },\n+  {\"schedule-insns\", &flag_schedule_insns, 1 },\n+  {\"schedule-insns2\", &flag_schedule_insns_after_reload, 1 },\n+  {\"sched-interblock\",&flag_schedule_interblock, 1 },\n+  {\"sched-spec\",&flag_schedule_speculative, 1 },\n+  {\"sched-spec-load\",&flag_schedule_speculative_load, 1 },\n+  {\"sched-spec-load-dangerous\",&flag_schedule_speculative_load_dangerous, 1 },\n+  {\"sched2-use-superblocks\", &flag_sched2_use_superblocks, 1 },\n+  {\"sched2-use-traces\", &flag_sched2_use_traces, 1 },\n+  {\"branch-count-reg\",&flag_branch_on_count_reg, 1 },\n+  {\"pic\", &flag_pic, 1 },\n+  {\"PIC\", &flag_pic, 2 },\n+  {\"pie\", &flag_pie, 1 },\n+  {\"PIE\", &flag_pie, 2 },\n+  {\"exceptions\", &flag_exceptions, 1 },\n+  {\"unwind-tables\", &flag_unwind_tables, 1 },\n+  {\"asynchronous-unwind-tables\", &flag_asynchronous_unwind_tables, 1 },\n+  {\"non-call-exceptions\", &flag_non_call_exceptions, 1 },\n+  {\"profile-arcs\", &profile_arc_flag, 1 },\n+  {\"test-coverage\", &flag_test_coverage, 1 },\n+  {\"branch-probabilities\", &flag_branch_probabilities, 1 },\n+  {\"profile\", &profile_flag, 1 },\n+  {\"reorder-blocks\", &flag_reorder_blocks, 1 },\n+  {\"reorder-functions\", &flag_reorder_functions, 1 },\n+  {\"rename-registers\", &flag_rename_registers, 1 },\n+  {\"cprop-registers\", &flag_cprop_registers, 1 },\n+  {\"common\", &flag_no_common, 0 },\n+  {\"inhibit-size-directive\", &flag_inhibit_size_directive, 1 },\n+  {\"function-sections\", &flag_function_sections, 1 },\n+  {\"data-sections\", &flag_data_sections, 1 },\n+  {\"verbose-asm\", &flag_verbose_asm, 1 },\n+  {\"gnu-linker\", &flag_gnu_linker, 1 },\n+  {\"regmove\", &flag_regmove, 1 },\n+  {\"optimize-register-move\", &flag_regmove, 1 },\n+  {\"pack-struct\", &flag_pack_struct, 1 },\n+  {\"stack-check\", &flag_stack_check, 1 },\n+  {\"argument-alias\", &flag_argument_noalias, 0 },\n+  {\"argument-noalias\", &flag_argument_noalias, 1 },\n+  {\"argument-noalias-global\", &flag_argument_noalias, 2 },\n+  {\"strict-aliasing\", &flag_strict_aliasing, 1 },\n+  {\"align-loops\", &align_loops, 0 },\n+  {\"align-jumps\", &align_jumps, 0 },\n+  {\"align-labels\", &align_labels, 0 },\n+  {\"align-functions\", &align_functions, 0 },\n+  {\"merge-constants\", &flag_merge_constants, 1 },\n+  {\"merge-all-constants\", &flag_merge_constants, 2 },\n+  {\"dump-unnumbered\", &flag_dump_unnumbered, 1 },\n+  {\"instrument-functions\", &flag_instrument_function_entry_exit, 1 },\n+  {\"zero-initialized-in-bss\", &flag_zero_initialized_in_bss, 1 },\n+  {\"ssa\", &flag_ssa, 1 },\n+  {\"ssa-ccp\", &flag_ssa_ccp, 1 },\n+  {\"ssa-dce\", &flag_ssa_dce, 1 },\n+  {\"leading-underscore\", &flag_leading_underscore, 1 },\n+  {\"ident\", &flag_no_ident, 0 },\n+  { \"peephole2\", &flag_peephole2, 1 },\n+  {\"finite-math-only\", &flag_finite_math_only, 1 },\n+  { \"guess-branch-probability\", &flag_guess_branch_prob, 1 },\n+  {\"math-errno\", &flag_errno_math, 1 },\n+  {\"trapping-math\", &flag_trapping_math, 1 },\n+  {\"unsafe-math-optimizations\", &flag_unsafe_math_optimizations, 1 },\n+  {\"signaling-nans\", &flag_signaling_nans, 1 },\n+  {\"bounds-check\", &flag_bounds_check, 1 },\n+  {\"single-precision-constant\", &flag_single_precision_constant, 1 },\n+  {\"time-report\", &time_report, 1 },\n+  {\"mem-report\", &mem_report, 1 },\n+  { \"trapv\", &flag_trapv, 1 },\n+  { \"wrapv\", &flag_wrapv, 1 },\n+  { \"new-ra\", &flag_new_regalloc, 1 }\n };\n \n /* Table of language-specific options.  */\n@@ -3890,15 +3774,6 @@ display_help (void)\n   unsigned long i;\n   const char *lang;\n \n-  for (i = ARRAY_SIZE (f_options); i--;)\n-    {\n-      const char *description = f_options[i].description;\n-\n-      if (description != NULL && *description != 0)\n-\tprintf (\"  -f%-21s %s\\n\",\n-\t\tf_options[i].string, _(description));\n-    }\n-\n   for (i = LAST_PARAM; i--;)\n     {\n       const char *description = compiler_params[i].help;"}]}