{"sha": "c32381b1878298d0d3e5f6625ed30b9d7b523fef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzMyMzgxYjE4NzgyOThkMGQzZTVmNjYyNWVkMzBiOWQ3YjUyM2ZlZg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1997-10-07T07:50:21Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1997-10-07T07:50:21Z"}, "message": "decl.c (duplicate_decls): Don't warn about template instances.\n\n\t* decl.c (duplicate_decls): Don't warn about template instances.\n\n\t* typeck.c (mark_addressable): Lose ancient code that unsets\n\tDECL_EXTERNAL.\n\n\t* pt.c (do_decl_instantiation): Lose support for instantiating\n\tnon-templates.\n\n\t* call.c (build_new_function_call): Fix handling of null explicit\n \ttemplate args.\n\t(build_new_method_call): Likewise.\n\nMon Oct  6 23:44:34 1997  Mark Mitchell  <mmitchell@usa.net>\n\n\t* method.c (build_underscore_int): Fix typo.\n\nFrom-SVN: r15851", "tree": {"sha": "ded2a3f8c24b4d19b9676b97beaa072fbcf41cb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ded2a3f8c24b4d19b9676b97beaa072fbcf41cb8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c32381b1878298d0d3e5f6625ed30b9d7b523fef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c32381b1878298d0d3e5f6625ed30b9d7b523fef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c32381b1878298d0d3e5f6625ed30b9d7b523fef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c32381b1878298d0d3e5f6625ed30b9d7b523fef/comments", "author": null, "committer": null, "parents": [{"sha": "45f22fa2551c0002d82ff11384921418dc67711c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45f22fa2551c0002d82ff11384921418dc67711c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45f22fa2551c0002d82ff11384921418dc67711c"}], "stats": {"total": 58, "additions": 32, "deletions": 26}, "files": [{"sha": "1fdd09216c26b02990248e36fbe7dd7f70d7c63e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c32381b1878298d0d3e5f6625ed30b9d7b523fef/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c32381b1878298d0d3e5f6625ed30b9d7b523fef/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c32381b1878298d0d3e5f6625ed30b9d7b523fef", "patch": "@@ -1,10 +1,30 @@\n+Tue Oct  7 00:48:36 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* decl.c (duplicate_decls): Don't warn about template instances.\n+\n+\t* typeck.c (mark_addressable): Lose ancient code that unsets\n+\tDECL_EXTERNAL.\n+\n+\t* pt.c (do_decl_instantiation): Lose support for instantiating\n+\tnon-templates.\n+\n+\t* call.c (build_new_function_call): Fix handling of null explicit\n+ \ttemplate args.\n+\t(build_new_method_call): Likewise.\n+\n+Mon Oct  6 23:44:34 1997  Mark Mitchell  <mmitchell@usa.net>\n+\n+\t* method.c (build_underscore_int): Fix typo.\n+\n 1997-10-06  Brendan Kehoe  <brendan@lisa.cygnus.com>\n \n \t* tree.c (print_lang_statistics): #if 0 call to\n \tprint_inline_obstack_statistics until its definition is checked in.\n \n Mon Oct  6 09:27:29 1997  Jason Merrill  <jason@yorick.cygnus.com>\n \n+\t* decl2.c (finish_file): Move dump_tree_statistics to end.\n+\n \t* pt.c (instantiate_decl): Look for the original template.\n \t(tsubst): Set DECL_IMPLICIT_INSTANTIATION on partial instantiations\n \tof member templates."}, {"sha": "dc310022c1b5120804e2d7d7eb4e093de3925d61", "filename": "gcc/cp/call.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c32381b1878298d0d3e5f6625ed30b9d7b523fef/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c32381b1878298d0d3e5f6625ed30b9d7b523fef/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=c32381b1878298d0d3e5f6625ed30b9d7b523fef", "patch": "@@ -4484,11 +4484,13 @@ build_new_function_call (fn, args, obj)\n {\n   struct z_candidate *candidates = 0, *cand;\n   tree explicit_targs = NULL_TREE;\n+  int template_only = 0;\n \n   if (TREE_CODE (fn) == TEMPLATE_ID_EXPR)\n     {\n       explicit_targs = TREE_OPERAND (fn, 1);\n       fn = TREE_OPERAND (fn, 0);\n+      template_only = 1;\n     }\n \n   if (obj == NULL_TREE && really_overloaded_fn (fn))\n@@ -4510,7 +4512,7 @@ build_new_function_call (fn, args, obj)\n \t\t(candidates, t, explicit_targs, args, NULL_TREE,\n \t\t LOOKUP_NORMAL);  \n \t    }\n-\t  else if (explicit_targs == NULL_TREE)\n+\t  else if (! template_only)\n \t    candidates = add_function_candidate\n \t      (candidates, t, args, LOOKUP_NORMAL);\n \t}\n@@ -5466,11 +5468,13 @@ build_new_method_call (instance, name, args, basetype_path, flags)\n   tree pretty_name;\n   tree user_args = args;\n   tree templates = NULL_TREE;\n+  int template_only = 0;\n \n   if (TREE_CODE (name) == TEMPLATE_ID_EXPR)\n     {\n       explicit_targs = TREE_OPERAND (name, 1);\n       name = TREE_OPERAND (name, 0);\n+      template_only = 1;\n     }\n \n   /* If there is an extra argument for controlling virtual bases,\n@@ -5574,7 +5578,7 @@ build_new_method_call (instance, name, args, basetype_path, flags)\n \t\t\t\t\tTREE_TYPE (name), \n \t\t\t\t\tLOOKUP_NORMAL); \n \t    }\n-\t  else if (explicit_targs == NULL_TREE) \n+\t  else if (! template_only)\n \t    candidates = add_function_candidate (candidates, t,\n \t\t\t\t\t\t this_arglist, flags);\n "}, {"sha": "57455d2fcd3178054b536a6c6e3e8814c77a34dd", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c32381b1878298d0d3e5f6625ed30b9d7b523fef/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c32381b1878298d0d3e5f6625ed30b9d7b523fef/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=c32381b1878298d0d3e5f6625ed30b9d7b523fef", "patch": "@@ -2623,8 +2623,9 @@ duplicate_decls (newdecl, olddecl)\n \t    }\n \t}\n \n-      if (TREE_CODE (olddecl) == FUNCTION_DECL\n-\t  && ! DECL_USE_TEMPLATE (olddecl))\n+      if (DECL_USE_TEMPLATE (olddecl))\n+\t;\n+      else if (TREE_CODE (olddecl) == FUNCTION_DECL)\n \t{\n \t  tree t1 = TYPE_ARG_TYPES (TREE_TYPE (olddecl));\n \t  tree t2 = TYPE_ARG_TYPES (TREE_TYPE (newdecl));"}, {"sha": "3b70743c32cb78f64dc36d8323d64d7a4cfdbe42", "filename": "gcc/cp/method.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c32381b1878298d0d3e5f6625ed30b9d7b523fef/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c32381b1878298d0d3e5f6625ed30b9d7b523fef/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=c32381b1878298d0d3e5f6625ed30b9d7b523fef", "patch": "@@ -424,7 +424,7 @@ build_underscore_int (int i)\n     OB_PUTC ('_');\n   icat (i);\n   if (i > 9)\n-    OB_PUTS ('_');\n+    OB_PUTC ('_');\n }\n \n /* Encoding for an INTEGER_CST value.  */"}, {"sha": "cfa516496a876ed754dbfed5e6dc31706d1871a7", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c32381b1878298d0d3e5f6625ed30b9d7b523fef/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c32381b1878298d0d3e5f6625ed30b9d7b523fef/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=c32381b1878298d0d3e5f6625ed30b9d7b523fef", "patch": "@@ -4226,24 +4226,14 @@ do_decl_instantiation (declspecs, declarator, storage)\n \t    fn = TREE_VALUE (fn);\n \n \t  for (; fn; fn = DECL_CHAIN (fn))\n-\t    if (decls_match (fn, decl) && DECL_DEFER_OUTPUT (fn))\n-\t      {\n-\t\tresult = fn;\n-\t\tbreak;\n-\t      }\n-\t    else if (TREE_CODE (fn) == TEMPLATE_DECL)\n+\t    if (TREE_CODE (fn) == TEMPLATE_DECL)\n \t      templates = decl_tree_cons (NULL_TREE, fn, templates);\n \t}\n     }\n   else if (name = DECL_NAME (decl), fn = IDENTIFIER_GLOBAL_VALUE (name), fn)\n     {\n       for (fn = get_first_fn (fn); fn; fn = DECL_CHAIN (fn))\n-\tif (decls_match (fn, decl) && DECL_DEFER_OUTPUT (fn))\n-\t  {\n-\t    result = fn;\n-\t    break;\n-\t  }\n-\telse if (TREE_CODE (fn) == TEMPLATE_DECL)\n+\tif (TREE_CODE (fn) == TEMPLATE_DECL)\n \t  templates = decl_tree_cons (NULL_TREE, fn, templates);\n     }\n "}, {"sha": "797cd3d4c3e5f3b4bf0fe37b89595b6d1a7a2ca2", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c32381b1878298d0d3e5f6625ed30b9d7b523fef/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c32381b1878298d0d3e5f6625ed30b9d7b523fef/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=c32381b1878298d0d3e5f6625ed30b9d7b523fef", "patch": "@@ -4772,15 +4772,6 @@ mark_addressable (exp)\n \t   be non-zero in the case of processing a default function.\n \t   The second may be non-zero in the case of a template function.  */\n \tx = DECL_MAIN_VARIANT (x);\n-\tif ((DECL_THIS_INLINE (x) || DECL_PENDING_INLINE_INFO (x))\n-\t    && (DECL_CONTEXT (x) == NULL_TREE\n-\t\t|| TREE_CODE_CLASS (TREE_CODE (DECL_CONTEXT (x))) != 't'\n-\t\t|| ! CLASSTYPE_INTERFACE_ONLY (DECL_CONTEXT (x))))\n-\t  {\n-\t    mark_inline_for_output (x);\n-\t    if (x == current_function_decl)\n-\t      DECL_EXTERNAL (x) = 0;\n-\t  }\n \tif (DECL_TEMPLATE_INFO (x) && !DECL_TEMPLATE_SPECIALIZATION (x))\n \t  mark_used (x);\n \tTREE_ADDRESSABLE (x) = 1;"}]}