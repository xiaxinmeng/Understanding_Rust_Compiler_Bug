{"sha": "09039e9c723456cd008c7fa94ea772ee796cda2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDkwMzllOWM3MjM0NTZjZDAwOGM3ZmE5NGVhNzcyZWU3OTZjZGEyYw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-06-26T04:56:07Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-06-26T04:56:07Z"}, "message": "PR c++/70462 - unnecessary base ctor variant with final.\n\nAs pointed out in the PR, we don't need base 'tor variants for a final\nclass, since it can never be a base.  I tried also dropping complete\nvariants for abstract classes, but that runs into ABI compatibility problems\nwith older releases that refer to those symbols.\n\n\t* optimize.c (populate_clone_array): Skip base variant if\n\tCLASSTYPE_FINAL.\n\t(maybe_clone_body): We don't need an alias if we are only defining\n\tone clone.\n\nFrom-SVN: r272669", "tree": {"sha": "60c1334be02c0350836747c878fe057d5b20881e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60c1334be02c0350836747c878fe057d5b20881e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/09039e9c723456cd008c7fa94ea772ee796cda2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09039e9c723456cd008c7fa94ea772ee796cda2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09039e9c723456cd008c7fa94ea772ee796cda2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09039e9c723456cd008c7fa94ea772ee796cda2c/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e21b52afe92f2596a5b0963d6efb5be44ab3b227", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e21b52afe92f2596a5b0963d6efb5be44ab3b227", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e21b52afe92f2596a5b0963d6efb5be44ab3b227"}], "stats": {"total": 27, "additions": 23, "deletions": 4}, "files": [{"sha": "9d89ccb4ab919df660de0b8db5d910ed6f3cacb6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09039e9c723456cd008c7fa94ea772ee796cda2c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09039e9c723456cd008c7fa94ea772ee796cda2c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=09039e9c723456cd008c7fa94ea772ee796cda2c", "patch": "@@ -1,5 +1,11 @@\n 2019-06-25  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/70462 - unnecessary base ctor variant with final.\n+\t* optimize.c (populate_clone_array): Skip base variant if\n+\tCLASSTYPE_FINAL.\n+\t(maybe_clone_body): We don't need an alias if we are only defining\n+\tone clone.\n+\n \t* class.c (resolves_to_fixed_type_p): Check CLASSTYPE_FINAL.\n \n 2019-06-25  Jakub Jelinek  <jakub@redhat.com>"}, {"sha": "0774857f50361cbf75beecbbf41cc7ad15eaf68a", "filename": "gcc/cp/optimize.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09039e9c723456cd008c7fa94ea772ee796cda2c/gcc%2Fcp%2Foptimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09039e9c723456cd008c7fa94ea772ee796cda2c/gcc%2Fcp%2Foptimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foptimize.c?ref=09039e9c723456cd008c7fa94ea772ee796cda2c", "patch": "@@ -247,15 +247,19 @@ populate_clone_array (tree fn, tree *fns)\n   fns[1] = NULL_TREE;\n   fns[2] = NULL_TREE;\n \n-  /* Look for the complete destructor which may be used to build the\n-     delete destructor.  */\n+  tree ctx = DECL_CONTEXT (fn);\n+\n   FOR_EACH_CLONE (clone, fn)\n     if (DECL_NAME (clone) == complete_dtor_identifier\n \t|| DECL_NAME (clone) == complete_ctor_identifier)\n       fns[1] = clone;\n     else if (DECL_NAME (clone) == base_dtor_identifier\n \t     || DECL_NAME (clone) == base_ctor_identifier)\n-      fns[0] = clone;\n+      {\n+\t/* We don't need to define the base variants for a final class.  */\n+\tif (!CLASSTYPE_FINAL (ctx))\n+\t  fns[0] = clone;\n+      }\n     else if (DECL_NAME (clone) == deleting_dtor_identifier)\n       fns[2] = clone;\n     else\n@@ -480,7 +484,7 @@ maybe_clone_body (tree fn)\n \n   /* Remember if we can't have multiple clones for some reason.  We need to\n      check this before we remap local static initializers in clone_body.  */\n-  if (!tree_versionable_function_p (fn))\n+  if (!tree_versionable_function_p (fn) && fns[0] && fns[1])\n     need_alias = true;\n \n   /* We know that any clones immediately follow FN in the TYPE_FIELDS"}, {"sha": "f90f94e9ea0f3c33f2a32ef47b6ceec66a45dbef", "filename": "gcc/testsuite/g++.dg/other/final8.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09039e9c723456cd008c7fa94ea772ee796cda2c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffinal8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09039e9c723456cd008c7fa94ea772ee796cda2c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffinal8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffinal8.C?ref=09039e9c723456cd008c7fa94ea772ee796cda2c", "patch": "@@ -0,0 +1,9 @@\n+// { dg-do compile { target c++11 } }\n+// { dg-final { scan-assembler-not \"_ZN1BC2Ev\" } }\n+// { dg-final { scan-assembler-not \"_ZN1BD2Ev\" } }\n+\n+struct A { int i; A(); virtual ~A() = 0; };\n+struct B final: public virtual A { int j; B(); ~B(); };\n+\n+B::B() {}\n+B::~B() {}"}]}