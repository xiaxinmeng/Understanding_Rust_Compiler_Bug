{"sha": "e51fbec3ff5028d8aa7925f894444fd7920f13ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTUxZmJlYzNmZjUwMjhkOGFhNzkyNWY4OTQ0NDRmZDc5MjBmMTNhZQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2016-09-14T15:05:00Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2016-09-14T15:05:00Z"}, "message": "c-common.c (c_common_truthvalue_conversion): Use false instead of 0.\n\n\t* c-common.c (c_common_truthvalue_conversion): Use false instead of 0.\n\t* c-common.h (build_unary_op): Change nonconvert parameter type to bool.\n\t* c-omp.c (c_finish_omp_atomic): Use false instead of 0.\n\n\t* c-array-notation.c (create_cmp_incr): Use false instead of 0.\n\t(fix_array_notation_expr): Likewise.\n\t* c-decl.c (finish_decl): Likewise.\n\t* c-parser.c (c_parser_postfix_expression_after_primary): Likewise.\n\t* c-typeck.c (array_to_pointer_conversion): Use true instead of 1.\n\t(function_to_pointer_conversion): Use false instead of 0.\n\t(convert_lvalue_to_rvalue): Likewise.\n\t(parser_build_unary_op): Likewise.\n\t(build_atomic_assign): Likewise.\n\t(build_unary_op): Change nonconvert parameter type to bool, use\n\ttrue/false instead of 1/0.\n\t(build_binary_op): Use true instead of 1.\n\n\t* cp-tree.h (cp_build_unary_op): Change nonconvert parameter type to\n\tbool.\n\t* decl2.c (one_static_initialization_or_destruction): Use true instead\n\tof 1.\n\t* init.c (build_vec_init): Use false instead of 0.\n\t* pt.c (tsubst_copy_and_build): Likewise.\n\t* semantics.c (simplify_loop_decl_cond): Likewise.\n\t* typeck.c (rationalize_conditional_expr): Likewise.\n\t(cp_build_binary_op): Use true instead of 1.\n\t(cp_build_unary_op): Change nonconvert parameter type to bool.  Use true\n\tinstead of 1.\n\t(build_unary_op): Change nonconvert parameter type to bool.\n\t(unary_complex_lvalue): Use false instead of 0.\n\nFrom-SVN: r240137", "tree": {"sha": "9a8fc4f1bf815bc44e908dbd081d93aca40edd84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a8fc4f1bf815bc44e908dbd081d93aca40edd84"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e51fbec3ff5028d8aa7925f894444fd7920f13ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e51fbec3ff5028d8aa7925f894444fd7920f13ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e51fbec3ff5028d8aa7925f894444fd7920f13ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e51fbec3ff5028d8aa7925f894444fd7920f13ae/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "13cddbc115038975a531abe3a0aed739307258db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13cddbc115038975a531abe3a0aed739307258db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13cddbc115038975a531abe3a0aed739307258db"}], "stats": {"total": 167, "additions": 103, "deletions": 64}, "files": [{"sha": "e1fa3b7ba9e830d13078f87800d841474c1f8b03", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e51fbec3ff5028d8aa7925f894444fd7920f13ae/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e51fbec3ff5028d8aa7925f894444fd7920f13ae/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=e51fbec3ff5028d8aa7925f894444fd7920f13ae", "patch": "@@ -1,3 +1,9 @@\n+2016-09-14  Marek Polacek  <polacek@redhat.com>\n+\n+\t* c-common.c (c_common_truthvalue_conversion): Use false instead of 0.\n+\t* c-common.h (build_unary_op): Change nonconvert parameter type to bool.\n+\t* c-omp.c (c_finish_omp_atomic): Use false instead of 0.\n+\n 2016-09-13  David Malcolm  <dmalcolm@redhat.com>\n \n \t* c-common.c (warn_logical_not_parentheses): Replace"}, {"sha": "b561f9fe47e763b3983a5853fdbfd8696e122212", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e51fbec3ff5028d8aa7925f894444fd7920f13ae/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e51fbec3ff5028d8aa7925f894444fd7920f13ae/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=e51fbec3ff5028d8aa7925f894444fd7920f13ae", "patch": "@@ -4599,7 +4599,7 @@ c_common_truthvalue_conversion (location_t location, tree expr)\n \t     : truthvalue_false_node;\n \n     case FUNCTION_DECL:\n-      expr = build_unary_op (location, ADDR_EXPR, expr, 0);\n+      expr = build_unary_op (location, ADDR_EXPR, expr, false);\n       /* Fall through.  */\n \n     case ADDR_EXPR:\n@@ -4739,10 +4739,10 @@ c_common_truthvalue_conversion (location_t location, tree expr)\n \t\t? TRUTH_OR_EXPR : TRUTH_ORIF_EXPR),\n \tc_common_truthvalue_conversion\n \t       (location,\n-\t\tbuild_unary_op (location, REALPART_EXPR, t, 0)),\n+\t\tbuild_unary_op (location, REALPART_EXPR, t, false)),\n \tc_common_truthvalue_conversion\n \t       (location,\n-\t\tbuild_unary_op (location, IMAGPART_EXPR, t, 0)),\n+\t\tbuild_unary_op (location, IMAGPART_EXPR, t, false)),\n \t       0));\n       goto ret;\n     }"}, {"sha": "5bbf9511d0869b9126f1916ffa1aca125915d9a9", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e51fbec3ff5028d8aa7925f894444fd7920f13ae/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e51fbec3ff5028d8aa7925f894444fd7920f13ae/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=e51fbec3ff5028d8aa7925f894444fd7920f13ae", "patch": "@@ -964,7 +964,7 @@ extern tree build_real_imag_expr (location_t, enum tree_code, tree);\n /* These functions must be defined by each front-end which implements\n    a variant of the C language.  They are used in c-common.c.  */\n \n-extern tree build_unary_op (location_t, enum tree_code, tree, int);\n+extern tree build_unary_op (location_t, enum tree_code, tree, bool);\n extern tree build_binary_op (location_t, enum tree_code, tree, tree, int);\n extern tree perform_integral_promotions (tree);\n "}, {"sha": "5ccb62eea501eb03cf8b9322d2aa0929f7bd6e24", "filename": "gcc/c-family/c-omp.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e51fbec3ff5028d8aa7925f894444fd7920f13ae/gcc%2Fc-family%2Fc-omp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e51fbec3ff5028d8aa7925f894444fd7920f13ae/gcc%2Fc-family%2Fc-omp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-omp.c?ref=e51fbec3ff5028d8aa7925f894444fd7920f13ae", "patch": "@@ -212,7 +212,7 @@ c_finish_omp_atomic (location_t loc, enum tree_code code,\n \n   /* Take and save the address of the lhs.  From then on we'll reference it\n      via indirection.  */\n-  addr = build_unary_op (loc, ADDR_EXPR, lhs, 0);\n+  addr = build_unary_op (loc, ADDR_EXPR, lhs, false);\n   if (addr == error_mark_node)\n     return error_mark_node;\n   if (!test)\n@@ -303,14 +303,14 @@ c_finish_omp_atomic (location_t loc, enum tree_code code,\n \t\t\t     loc, x, NULL_TREE);\n       if (rhs1 && rhs1 != lhs)\n \t{\n-\t  tree rhs1addr = build_unary_op (loc, ADDR_EXPR, rhs1, 0);\n+\t  tree rhs1addr = build_unary_op (loc, ADDR_EXPR, rhs1, false);\n \t  if (rhs1addr == error_mark_node)\n \t    return error_mark_node;\n \t  x = omit_one_operand_loc (loc, type, x, rhs1addr);\n \t}\n       if (lhs1 && lhs1 != lhs)\n \t{\n-\t  tree lhs1addr = build_unary_op (loc, ADDR_EXPR, lhs1, 0);\n+\t  tree lhs1addr = build_unary_op (loc, ADDR_EXPR, lhs1, false);\n \t  if (lhs1addr == error_mark_node)\n \t    return error_mark_node;\n \t  if (code == OMP_ATOMIC_CAPTURE_OLD)\n@@ -325,7 +325,7 @@ c_finish_omp_atomic (location_t loc, enum tree_code code,\n     }\n   else if (rhs1 && rhs1 != lhs)\n     {\n-      tree rhs1addr = build_unary_op (loc, ADDR_EXPR, rhs1, 0);\n+      tree rhs1addr = build_unary_op (loc, ADDR_EXPR, rhs1, false);\n       if (rhs1addr == error_mark_node)\n \treturn error_mark_node;\n       x = omit_one_operand_loc (loc, type, x, rhs1addr);"}, {"sha": "46c296992b57627f262553f7a0c8b275657c1b10", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e51fbec3ff5028d8aa7925f894444fd7920f13ae/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e51fbec3ff5028d8aa7925f894444fd7920f13ae/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=e51fbec3ff5028d8aa7925f894444fd7920f13ae", "patch": "@@ -1,3 +1,18 @@\n+2016-09-14  Marek Polacek  <polacek@redhat.com>\n+\n+\t* c-array-notation.c (create_cmp_incr): Use false instead of 0.\n+\t(fix_array_notation_expr): Likewise.\n+\t* c-decl.c (finish_decl): Likewise.\n+\t* c-parser.c (c_parser_postfix_expression_after_primary): Likewise.\n+\t* c-typeck.c (array_to_pointer_conversion): Use true instead of 1.\n+\t(function_to_pointer_conversion): Use false instead of 0.\n+\t(convert_lvalue_to_rvalue): Likewise.\n+\t(parser_build_unary_op): Likewise.\n+\t(build_atomic_assign): Likewise.\n+\t(build_unary_op): Change nonconvert parameter type to bool, use\n+\ttrue/false instead of 1/0.\n+\t(build_binary_op): Use true instead of 1.\n+\n 2016-09-13  David Malcolm  <dmalcolm@redhat.com>\n \n \t* c-parser.c (c_parser_declaration_or_fndef): Update for renaming"}, {"sha": "ce609112089c7da84d0e1e91f2c0346943512aa5", "filename": "gcc/c/c-array-notation.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e51fbec3ff5028d8aa7925f894444fd7920f13ae/gcc%2Fc%2Fc-array-notation.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e51fbec3ff5028d8aa7925f894444fd7920f13ae/gcc%2Fc%2Fc-array-notation.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-array-notation.c?ref=e51fbec3ff5028d8aa7925f894444fd7920f13ae", "patch": "@@ -104,7 +104,7 @@ create_cmp_incr (location_t loc, vec<an_loop_parts> *node, size_t rank,\n     {\n       tree var = (*node)[ii].var;\n       tree length = an_info[0][ii].length;\n-      (*node)[ii].incr = build_unary_op (loc, POSTINCREMENT_EXPR, var, 0);\n+      (*node)[ii].incr = build_unary_op (loc, POSTINCREMENT_EXPR, var, false);\n       (*node)[ii].cmp = build2 (LT_EXPR, boolean_type_node, var, length);\n     }\n }\n@@ -1088,7 +1088,7 @@ fix_array_notation_expr (location_t location, enum tree_code code,\n \n   arg = default_function_array_read_conversion (location, arg);\n   if (code == POSTINCREMENT_EXPR || code == POSTDECREMENT_EXPR)\n-    arg.value = build_unary_op (location, code, arg.value, 0);\n+    arg.value = build_unary_op (location, code, arg.value, false);\n   else if (code == PREINCREMENT_EXPR || code == PREDECREMENT_EXPR)\n     arg = parser_build_unary_op (location, code, arg);\n "}, {"sha": "d15b8f89b0af93476dff26f1a0da68349fe29897", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e51fbec3ff5028d8aa7925f894444fd7920f13ae/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e51fbec3ff5028d8aa7925f894444fd7920f13ae/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=e51fbec3ff5028d8aa7925f894444fd7920f13ae", "patch": "@@ -5102,7 +5102,7 @@ finish_decl (tree decl, location_t init_loc, tree init,\n \t  vec<tree, va_gc> *v;\n \n \t  /* Build \"cleanup(&decl)\" for the destructor.  */\n-\t  cleanup = build_unary_op (input_location, ADDR_EXPR, decl, 0);\n+\t  cleanup = build_unary_op (input_location, ADDR_EXPR, decl, false);\n \t  vec_alloc (v, 1);\n \t  v->quick_push (cleanup);\n \t  cleanup = c_build_function_call_vec (DECL_SOURCE_LOCATION (decl),"}, {"sha": "58424a9e8e5b9c7f909e6e3dcbd1c14ee9f319f9", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e51fbec3ff5028d8aa7925f894444fd7920f13ae/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e51fbec3ff5028d8aa7925f894444fd7920f13ae/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=e51fbec3ff5028d8aa7925f894444fd7920f13ae", "patch": "@@ -8478,8 +8478,8 @@ c_parser_postfix_expression_after_primary (c_parser *parser,\n \t  else\n \t    {\n \t      expr = default_function_array_read_conversion (expr_loc, expr);\n-\t      expr.value = build_unary_op (op_loc,\n-\t\t\t\t\t   POSTINCREMENT_EXPR, expr.value, 0);\n+\t      expr.value = build_unary_op (op_loc, POSTINCREMENT_EXPR,\n+\t\t\t\t\t   expr.value, false);\n \t    }\n \t  set_c_expr_source_range (&expr, start, finish);\n \t  expr.original_code = ERROR_MARK;\n@@ -8497,8 +8497,8 @@ c_parser_postfix_expression_after_primary (c_parser *parser,\n \t  else\n \t    {\n \t      expr = default_function_array_read_conversion (expr_loc, expr);\n-\t      expr.value = build_unary_op (op_loc,\n-\t\t\t\t\t   POSTDECREMENT_EXPR, expr.value, 0);\n+\t      expr.value = build_unary_op (op_loc, POSTDECREMENT_EXPR,\n+\t\t\t\t\t   expr.value, false);\n \t    }\n \t  set_c_expr_source_range (&expr, start, finish);\n \t  expr.original_code = ERROR_MARK;"}, {"sha": "4dec397225ebace44c5cbfcf3260366af3deb5cd", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 24, "deletions": 22, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e51fbec3ff5028d8aa7925f894444fd7920f13ae/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e51fbec3ff5028d8aa7925f894444fd7920f13ae/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=e51fbec3ff5028d8aa7925f894444fd7920f13ae", "patch": "@@ -1880,7 +1880,7 @@ array_to_pointer_conversion (location_t loc, tree exp)\n \t\t    \"is ill-formed in C++\");\n     }\n \n-  adr = build_unary_op (loc, ADDR_EXPR, exp, 1);\n+  adr = build_unary_op (loc, ADDR_EXPR, exp, true);\n   return convert (ptrtype, adr);\n }\n \n@@ -1897,7 +1897,7 @@ function_to_pointer_conversion (location_t loc, tree exp)\n   if (TREE_NO_WARNING (orig_exp))\n     TREE_NO_WARNING (exp) = 1;\n \n-  return build_unary_op (loc, ADDR_EXPR, exp, 0);\n+  return build_unary_op (loc, ADDR_EXPR, exp, false);\n }\n \n /* Mark EXP as read, not just set, for set but not used -Wunused\n@@ -2042,7 +2042,7 @@ convert_lvalue_to_rvalue (location_t loc, struct c_expr exp,\n       vec<tree, va_gc> *params;\n       tree nonatomic_type, tmp, tmp_addr, fndecl, func_call;\n       tree expr_type = TREE_TYPE (exp.value);\n-      tree expr_addr = build_unary_op (loc, ADDR_EXPR, exp.value, 0);\n+      tree expr_addr = build_unary_op (loc, ADDR_EXPR, exp.value, false);\n       tree seq_cst = build_int_cst (integer_type_node, MEMMODEL_SEQ_CST);\n \n       gcc_assert (TYPE_ATOMIC (expr_type));\n@@ -2055,7 +2055,7 @@ convert_lvalue_to_rvalue (location_t loc, struct c_expr exp,\n \t create the VAL temp variable to hold the RHS.  */\n       nonatomic_type = build_qualified_type (expr_type, TYPE_UNQUALIFIED);\n       tmp = create_tmp_var_raw (nonatomic_type);\n-      tmp_addr = build_unary_op (loc, ADDR_EXPR, tmp, 0);\n+      tmp_addr = build_unary_op (loc, ADDR_EXPR, tmp, false);\n       TREE_ADDRESSABLE (tmp) = 1;\n       TREE_NO_WARNING (tmp) = 1;\n \n@@ -3575,7 +3575,7 @@ parser_build_unary_op (location_t loc, enum tree_code code, struct c_expr arg)\n     }\n   else\n     {\n-      result.value = build_unary_op (loc, code, arg.value, 0);\n+      result.value = build_unary_op (loc, code, arg.value, false);\n \n       if (TREE_OVERFLOW_P (result.value) && !TREE_OVERFLOW_P (arg.value))\n \toverflow_warning (loc, result.value);\n@@ -3872,7 +3872,7 @@ build_atomic_assign (location_t loc, tree lhs, enum tree_code modifycode,\n   tree loop_label, loop_decl, done_label, done_decl;\n \n   tree lhs_type = TREE_TYPE (lhs);\n-  tree lhs_addr = build_unary_op (loc, ADDR_EXPR, lhs, 0);\n+  tree lhs_addr = build_unary_op (loc, ADDR_EXPR, lhs, false);\n   tree seq_cst = build_int_cst (integer_type_node, MEMMODEL_SEQ_CST);\n   tree rhs_type = TREE_TYPE (rhs);\n \n@@ -3909,7 +3909,7 @@ build_atomic_assign (location_t loc, tree lhs, enum tree_code modifycode,\n   if (modifycode == NOP_EXPR)\n     {\n       /* Build __atomic_store (&lhs, &val, SEQ_CST)  */\n-      rhs = build_unary_op (loc, ADDR_EXPR, val, 0);\n+      rhs = build_unary_op (loc, ADDR_EXPR, val, false);\n       fndecl = builtin_decl_explicit (BUILT_IN_ATOMIC_STORE);\n       params->quick_push (lhs_addr);\n       params->quick_push (rhs);\n@@ -4014,12 +4014,12 @@ build_atomic_assign (location_t loc, tree lhs, enum tree_code modifycode,\n cas_loop:\n   /* Create the variables and labels required for the op= form.  */\n   old = create_tmp_var_raw (nonatomic_lhs_type);\n-  old_addr = build_unary_op (loc, ADDR_EXPR, old, 0);\n+  old_addr = build_unary_op (loc, ADDR_EXPR, old, false);\n   TREE_ADDRESSABLE (old) = 1;\n   TREE_NO_WARNING (old) = 1;\n \n   newval = create_tmp_var_raw (nonatomic_lhs_type);\n-  newval_addr = build_unary_op (loc, ADDR_EXPR, newval, 0);\n+  newval_addr = build_unary_op (loc, ADDR_EXPR, newval, false);\n   TREE_ADDRESSABLE (newval) = 1;\n   TREE_NO_WARNING (newval) = 1;\n \n@@ -4112,17 +4112,17 @@ build_atomic_assign (location_t loc, tree lhs, enum tree_code modifycode,\n /* Construct and perhaps optimize a tree representation\n    for a unary operation.  CODE, a tree_code, specifies the operation\n    and XARG is the operand.\n-   For any CODE other than ADDR_EXPR, NOCONVERT nonzero suppresses\n-   the default promotions (such as from short to int).\n-   For ADDR_EXPR, the default promotions are not applied; NOCONVERT nonzero\n-   allows non-lvalues; this is only used to handle conversion of non-lvalue\n-   arrays to pointers in C99.\n+   For any CODE other than ADDR_EXPR, NOCONVERT suppresses the default\n+   promotions (such as from short to int).\n+   For ADDR_EXPR, the default promotions are not applied; NOCONVERT allows\n+   non-lvalues; this is only used to handle conversion of non-lvalue arrays\n+   to pointers in C99.\n \n    LOCATION is the location of the operator.  */\n \n tree\n build_unary_op (location_t location, enum tree_code code, tree xarg,\n-\t\tint noconvert)\n+\t\tbool noconvert)\n {\n   /* No default_conversion here.  It causes trouble for ADDR_EXPR.  */\n   tree arg = xarg;\n@@ -4324,9 +4324,11 @@ build_unary_op (location_t location, enum tree_code code, tree xarg,\n \t  if (!atomic_op)\n \t    {\n \t      arg = stabilize_reference (arg);\n-\t      real = build_unary_op (EXPR_LOCATION (arg), REALPART_EXPR, arg, 1);\n-\t      imag = build_unary_op (EXPR_LOCATION (arg), IMAGPART_EXPR, arg, 1);\n-\t      real = build_unary_op (EXPR_LOCATION (arg), code, real, 1);\n+\t      real = build_unary_op (EXPR_LOCATION (arg), REALPART_EXPR, arg,\n+\t\t\t\t     true);\n+\t      imag = build_unary_op (EXPR_LOCATION (arg), IMAGPART_EXPR, arg,\n+\t\t\t\t     true);\n+\t      real = build_unary_op (EXPR_LOCATION (arg), code, real, true);\n \t      if (real == error_mark_node || imag == error_mark_node)\n \t\treturn error_mark_node;\n \t      ret = build2 (COMPLEX_EXPR, TREE_TYPE (arg),\n@@ -11513,9 +11515,9 @@ build_binary_op (location_t location, enum tree_code code,\n \t    {\n \t      op0 = c_save_expr (op0);\n \t      real = build_unary_op (EXPR_LOCATION (orig_op0), REALPART_EXPR,\n-\t\t\t\t     op0, 1);\n+\t\t\t\t     op0, true);\n \t      imag = build_unary_op (EXPR_LOCATION (orig_op0), IMAGPART_EXPR,\n-\t\t\t\t     op0, 1);\n+\t\t\t\t     op0, true);\n \t      switch (code)\n \t\t{\n \t\tcase MULT_EXPR:\n@@ -11535,9 +11537,9 @@ build_binary_op (location_t location, enum tree_code code,\n \t    {\n \t      op1 = c_save_expr (op1);\n \t      real = build_unary_op (EXPR_LOCATION (orig_op1), REALPART_EXPR,\n-\t\t\t\t     op1, 1);\n+\t\t\t\t     op1, true);\n \t      imag = build_unary_op (EXPR_LOCATION (orig_op1), IMAGPART_EXPR,\n-\t\t\t\t     op1, 1);\n+\t\t\t\t     op1, true);\n \t      switch (code)\n \t\t{\n \t\tcase MULT_EXPR:"}, {"sha": "df4655ec91613fd4ef112e3c3e9f3370833ed492", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e51fbec3ff5028d8aa7925f894444fd7920f13ae/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e51fbec3ff5028d8aa7925f894444fd7920f13ae/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e51fbec3ff5028d8aa7925f894444fd7920f13ae", "patch": "@@ -1,3 +1,19 @@\n+2016-09-14  Marek Polacek  <polacek@redhat.com>\n+\n+\t* cp-tree.h (cp_build_unary_op): Change nonconvert parameter type to\n+\tbool.\n+\t* decl2.c (one_static_initialization_or_destruction): Use true instead\n+\tof 1.\n+\t* init.c (build_vec_init): Use false instead of 0.\n+\t* pt.c (tsubst_copy_and_build): Likewise.\n+\t* semantics.c (simplify_loop_decl_cond): Likewise.\n+\t* typeck.c (rationalize_conditional_expr): Likewise.\n+\t(cp_build_binary_op): Use true instead of 1.\n+\t(cp_build_unary_op): Change nonconvert parameter type to bool.  Use true\n+\tinstead of 1.\n+\t(build_unary_op): Change nonconvert parameter type to bool.\n+\t(unary_complex_lvalue): Use false instead of 0.\n+\n 2016-09-13  Jakub Jelinek  <jakub@redhat.com>\n \n \tImplement P0028R4, C++17 using attribute namespaces without repetition"}, {"sha": "f40334092a081a91b59b8d6820a354d00c1ce12d", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e51fbec3ff5028d8aa7925f894444fd7920f13ae/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e51fbec3ff5028d8aa7925f894444fd7920f13ae/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=e51fbec3ff5028d8aa7925f894444fd7920f13ae", "patch": "@@ -6673,7 +6673,7 @@ extern tree build_x_unary_op\t\t\t(location_t,\n \t\t\t\t\t\t enum tree_code, cp_expr,\n                                                  tsubst_flags_t);\n extern tree cp_build_addr_expr\t\t\t(tree, tsubst_flags_t);\n-extern tree cp_build_unary_op                   (enum tree_code, tree, int, \n+extern tree cp_build_unary_op                   (enum tree_code, tree, bool,\n                                                  tsubst_flags_t);\n extern tree unary_complex_lvalue\t\t(enum tree_code, tree);\n extern tree build_x_conditional_expr\t\t(location_t, tree, tree, tree, "}, {"sha": "4bdac94a8e038c3bcff6c5c246edcf1df2366599", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e51fbec3ff5028d8aa7925f894444fd7920f13ae/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e51fbec3ff5028d8aa7925f894444fd7920f13ae/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=e51fbec3ff5028d8aa7925f894444fd7920f13ae", "patch": "@@ -3775,7 +3775,7 @@ one_static_initialization_or_destruction (tree decl, tree init, bool initp)\n \t\t\t\tEQ_EXPR,\n \t\t\t\tcp_build_unary_op (PREINCREMENT_EXPR,\n \t\t\t\t\t\t   guard,\n-\t\t\t\t\t\t   /*noconvert=*/1,\n+\t\t\t\t\t\t   /*noconvert=*/true,\n \t\t\t\t\t\t   tf_warning_or_error),\n \t\t\t\tinteger_one_node,\n \t\t\t\ttf_warning_or_error);\n@@ -3785,7 +3785,7 @@ one_static_initialization_or_destruction (tree decl, tree init, bool initp)\n \t\t\t\tEQ_EXPR,\n \t\t\t\tcp_build_unary_op (PREDECREMENT_EXPR,\n \t\t\t\t\t\t   guard,\n-\t\t\t\t\t\t   /*noconvert=*/1,\n+\t\t\t\t\t\t   /*noconvert=*/true,\n \t\t\t\t\t\t   tf_warning_or_error),\n \t\t\t\tinteger_zero_node,\n \t\t\t\ttf_warning_or_error);"}, {"sha": "e869542e757097aafea6a567f369c6760befc6c5", "filename": "gcc/cp/init.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e51fbec3ff5028d8aa7925f894444fd7920f13ae/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e51fbec3ff5028d8aa7925f894444fd7920f13ae/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=e51fbec3ff5028d8aa7925f894444fd7920f13ae", "patch": "@@ -4096,13 +4096,14 @@ build_vec_init (tree base, tree maxindex, tree init,\n \t    finish_expr_stmt (one_init);\n \t  current_stmt_tree ()->stmts_are_full_exprs_p = 0;\n \n-\t  one_init = cp_build_unary_op (PREINCREMENT_EXPR, base, 0, complain);\n+\t  one_init = cp_build_unary_op (PREINCREMENT_EXPR, base, false,\n+\t\t\t\t\tcomplain);\n \t  if (one_init == error_mark_node)\n \t    errors = true;\n \t  else\n \t    finish_expr_stmt (one_init);\n \n-\t  one_init = cp_build_unary_op (PREDECREMENT_EXPR, iterator, 0,\n+\t  one_init = cp_build_unary_op (PREDECREMENT_EXPR, iterator, false,\n \t\t\t\t\tcomplain);\n \t  if (one_init == error_mark_node)\n \t    errors = true;\n@@ -4155,7 +4156,7 @@ build_vec_init (tree base, tree maxindex, tree init,\n       finish_for_cond (build2 (GT_EXPR, boolean_type_node, iterator,\n \t\t\t       build_int_cst (TREE_TYPE (iterator), -1)),\n \t\t       for_stmt, false);\n-      elt_init = cp_build_unary_op (PREDECREMENT_EXPR, iterator, 0,\n+      elt_init = cp_build_unary_op (PREDECREMENT_EXPR, iterator, false,\n \t\t\t\t    complain);\n       if (elt_init == error_mark_node)\n \terrors = true;\n@@ -4272,10 +4273,10 @@ build_vec_init (tree base, tree maxindex, tree init,\n \tfinish_expr_stmt (elt_init);\n       current_stmt_tree ()->stmts_are_full_exprs_p = 0;\n \n-      finish_expr_stmt (cp_build_unary_op (PREINCREMENT_EXPR, base, 0,\n+      finish_expr_stmt (cp_build_unary_op (PREINCREMENT_EXPR, base, false,\n                                            complain));\n       if (base2)\n-\tfinish_expr_stmt (cp_build_unary_op (PREINCREMENT_EXPR, base2, 0,\n+\tfinish_expr_stmt (cp_build_unary_op (PREINCREMENT_EXPR, base2, false,\n                                              complain));\n \n       finish_for_stmt (for_stmt);"}, {"sha": "29d8beb33dd2aff38b68c651d79cd7490ebed08c", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e51fbec3ff5028d8aa7925f894444fd7920f13ae/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e51fbec3ff5028d8aa7925f894444fd7920f13ae/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=e51fbec3ff5028d8aa7925f894444fd7920f13ae", "patch": "@@ -16257,7 +16257,7 @@ tsubst_copy_and_build (tree t,\n \n     case FIX_TRUNC_EXPR:\n       RETURN (cp_build_unary_op (FIX_TRUNC_EXPR, RECUR (TREE_OPERAND (t, 0)),\n-\t\t\t\t 0, complain));\n+\t\t\t\t false, complain));\n \n     case ADDR_EXPR:\n       op1 = TREE_OPERAND (t, 0);"}, {"sha": "e4157325a36c9581c254321e7cb86e964df01e42", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e51fbec3ff5028d8aa7925f894444fd7920f13ae/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e51fbec3ff5028d8aa7925f894444fd7920f13ae/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=e51fbec3ff5028d8aa7925f894444fd7920f13ae", "patch": "@@ -588,7 +588,7 @@ simplify_loop_decl_cond (tree *cond_p, tree body)\n   *cond_p = boolean_true_node;\n \n   if_stmt = begin_if_stmt ();\n-  cond = cp_build_unary_op (TRUTH_NOT_EXPR, cond, 0, tf_warning_or_error);\n+  cond = cp_build_unary_op (TRUTH_NOT_EXPR, cond, false, tf_warning_or_error);\n   finish_if_stmt_cond (cond, if_stmt);\n   finish_break_stmt ();\n   finish_then_clause (if_stmt);"}, {"sha": "c51d6d0b0df2cc98510a70edd41ac0f83c213b9e", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e51fbec3ff5028d8aa7925f894444fd7920f13ae/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e51fbec3ff5028d8aa7925f894444fd7920f13ae/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=e51fbec3ff5028d8aa7925f894444fd7920f13ae", "patch": "@@ -2208,16 +2208,16 @@ rationalize_conditional_expr (enum tree_code code, tree t,\n \t\t\t\t\t\t   op1, TREE_CODE (op1),\n \t\t\t\t\t\t   /*overload=*/NULL,\n \t\t\t\t\t\t   complain),\n-                                cp_build_unary_op (code, op0, 0, complain),\n-                                cp_build_unary_op (code, op1, 0, complain),\n+                                cp_build_unary_op (code, op0, false, complain),\n+                                cp_build_unary_op (code, op1, false, complain),\n                                 complain);\n     }\n \n   return\n     build_conditional_expr (loc, TREE_OPERAND (t, 0),\n-\t\t\t    cp_build_unary_op (code, TREE_OPERAND (t, 1), 0,\n+\t\t\t    cp_build_unary_op (code, TREE_OPERAND (t, 1), false,\n                                                complain),\n-\t\t\t    cp_build_unary_op (code, TREE_OPERAND (t, 2), 0,\n+\t\t\t    cp_build_unary_op (code, TREE_OPERAND (t, 2), false,\n                                                complain),\n                             complain);\n }\n@@ -5036,8 +5036,8 @@ cp_build_binary_op (location_t location,\n \t  if (first_complex)\n \t    {\n \t      op0 = save_expr (op0);\n-\t      real = cp_build_unary_op (REALPART_EXPR, op0, 1, complain);\n-\t      imag = cp_build_unary_op (IMAGPART_EXPR, op0, 1, complain);\n+\t      real = cp_build_unary_op (REALPART_EXPR, op0, true, complain);\n+\t      imag = cp_build_unary_op (IMAGPART_EXPR, op0, true, complain);\n \t      switch (code)\n \t\t{\n \t\tcase MULT_EXPR:\n@@ -5056,8 +5056,8 @@ cp_build_binary_op (location_t location,\n \t  else\n \t    {\n \t      op1 = save_expr (op1);\n-\t      real = cp_build_unary_op (REALPART_EXPR, op1, 1, complain);\n-\t      imag = cp_build_unary_op (IMAGPART_EXPR, op1, 1, complain);\n+\t      real = cp_build_unary_op (REALPART_EXPR, op1, true, complain);\n+\t      imag = cp_build_unary_op (IMAGPART_EXPR, op1, true, complain);\n \t      switch (code)\n \t\t{\n \t\tcase MULT_EXPR:\n@@ -5784,11 +5784,10 @@ cp_build_addr_expr_strict (tree arg, tsubst_flags_t complain)\n    from aggregates to types we don't yet know we want?  (Or are those\n    cases typically errors which should be reported?)\n \n-   NOCONVERT nonzero suppresses the default promotions\n-   (such as from short to int).  */\n+   NOCONVERT suppresses the default promotions (such as from short to int).  */\n \n tree\n-cp_build_unary_op (enum tree_code code, tree xarg, int noconvert, \n+cp_build_unary_op (enum tree_code code, tree xarg, bool noconvert,\n                    tsubst_flags_t complain)\n {\n   /* No default_conversion here.  It causes trouble for ADDR_EXPR.  */\n@@ -5920,9 +5919,9 @@ cp_build_unary_op (enum tree_code code, tree xarg, int noconvert,\n \t  tree real, imag;\n \n \t  arg = cp_stabilize_reference (arg);\n-\t  real = cp_build_unary_op (REALPART_EXPR, arg, 1, complain);\n-\t  imag = cp_build_unary_op (IMAGPART_EXPR, arg, 1, complain);\n-\t  real = cp_build_unary_op (code, real, 1, complain);\n+\t  real = cp_build_unary_op (REALPART_EXPR, arg, true, complain);\n+\t  imag = cp_build_unary_op (IMAGPART_EXPR, arg, true, complain);\n+\t  real = cp_build_unary_op (code, real, true, complain);\n \t  if (real == error_mark_node || imag == error_mark_node)\n \t    return error_mark_node;\n \t  return build2 (COMPLEX_EXPR, TREE_TYPE (arg),\n@@ -6076,7 +6075,7 @@ cp_build_unary_op (enum tree_code code, tree xarg, int noconvert,\n /* Hook for the c-common bits that build a unary op.  */\n tree\n build_unary_op (location_t /*location*/,\n-\t\tenum tree_code code, tree xarg, int noconvert)\n+\t\tenum tree_code code, tree xarg, bool noconvert)\n {\n   return cp_build_unary_op (code, xarg, noconvert, tf_warning_or_error);\n }\n@@ -6100,7 +6099,7 @@ unary_complex_lvalue (enum tree_code code, tree arg)\n   /* Handle (a, b) used as an \"lvalue\".  */\n   if (TREE_CODE (arg) == COMPOUND_EXPR)\n     {\n-      tree real_result = cp_build_unary_op (code, TREE_OPERAND (arg, 1), 0,\n+      tree real_result = cp_build_unary_op (code, TREE_OPERAND (arg, 1), false,\n                                             tf_warning_or_error);\n       return build2 (COMPOUND_EXPR, TREE_TYPE (real_result),\n \t\t     TREE_OPERAND (arg, 0), real_result);\n@@ -6134,7 +6133,7 @@ unary_complex_lvalue (enum tree_code code, tree arg)\n   if (TREE_CODE (arg) == MODIFY_EXPR\n       || TREE_CODE (arg) == INIT_EXPR)\n     {\n-      tree real_result = cp_build_unary_op (code, TREE_OPERAND (arg, 0), 0,\n+      tree real_result = cp_build_unary_op (code, TREE_OPERAND (arg, 0), false,\n                                             tf_warning_or_error);\n       arg = build2 (COMPOUND_EXPR, TREE_TYPE (real_result),\n \t\t    arg, real_result);"}]}