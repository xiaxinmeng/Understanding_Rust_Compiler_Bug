{"sha": "fb4bcc8d659011362117716d831829adaa02bdf3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmI0YmNjOGQ2NTkwMTEzNjIxMTc3MTZkODMxODI5YWRhYTAyYmRmMw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2012-05-04T15:02:05Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-05-04T15:02:05Z"}, "message": "re PR c++/53166 (static_assert produces bogus warning)\n\n/cp\n2012-05-04  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/53166\n\t* pt.c (instantiate_class_template_1): Increase / decrease\n\tc_inhibit_evaluation_warnings around the tsubst_expr call\n\tfor STATIC_ASSERT_CONDITION.\n\t(tsubst_expr, case STATIC_ASSERT): Likewise.\n\t* typeck.c (cp_build_binary_op, case EQ_EXPR/NE_EXPR): Check\n\tc_inhibit_evaluation_warnings in the OPT_Waddress warnings.\n\n/testsuite\n2012-05-04  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/53166\n\t* g++.dg/cpp0x/static_assert7.C: New.\n\nFrom-SVN: r187165", "tree": {"sha": "46a83e6c2ea8ac15132e01ee6c536631015b7c54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46a83e6c2ea8ac15132e01ee6c536631015b7c54"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb4bcc8d659011362117716d831829adaa02bdf3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb4bcc8d659011362117716d831829adaa02bdf3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb4bcc8d659011362117716d831829adaa02bdf3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb4bcc8d659011362117716d831829adaa02bdf3/comments", "author": null, "committer": null, "parents": [{"sha": "33e337e34d69a2e298be8b6c109b601c2986339b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33e337e34d69a2e298be8b6c109b601c2986339b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33e337e34d69a2e298be8b6c109b601c2986339b"}], "stats": {"total": 61, "additions": 54, "deletions": 7}, "files": [{"sha": "560722c7f1cb5a2bf17a30416960744f6d7a0777", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb4bcc8d659011362117716d831829adaa02bdf3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb4bcc8d659011362117716d831829adaa02bdf3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fb4bcc8d659011362117716d831829adaa02bdf3", "patch": "@@ -1,3 +1,13 @@\n+2012-05-04  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/53166\n+\t* pt.c (instantiate_class_template_1): Increase / decrease\n+\tc_inhibit_evaluation_warnings around the tsubst_expr call\n+\tfor STATIC_ASSERT_CONDITION.\n+\t(tsubst_expr, case STATIC_ASSERT): Likewise.\n+\t* typeck.c (cp_build_binary_op, case EQ_EXPR/NE_EXPR): Check\n+\tc_inhibit_evaluation_warnings in the OPT_Waddress warnings.\n+\n 2012-05-03  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/53186"}, {"sha": "f14e040204f04cb77ed5542fad7509b42cb11b4f", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb4bcc8d659011362117716d831829adaa02bdf3/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb4bcc8d659011362117716d831829adaa02bdf3/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=fb4bcc8d659011362117716d831829adaa02bdf3", "patch": "@@ -8950,10 +8950,15 @@ instantiate_class_template_1 (tree type)\n \t      /* Build new TYPE_FIELDS.  */\n               if (TREE_CODE (t) == STATIC_ASSERT)\n                 {\n-                  tree condition = \n-                    tsubst_expr (STATIC_ASSERT_CONDITION (t), args, \n-                                 tf_warning_or_error, NULL_TREE,\n-                                 /*integral_constant_expression_p=*/true);\n+                  tree condition;\n+ \n+\t\t  ++c_inhibit_evaluation_warnings;\n+\t\t  condition =\n+\t\t    tsubst_expr (STATIC_ASSERT_CONDITION (t), args, \n+\t\t\t\t tf_warning_or_error, NULL_TREE,\n+\t\t\t\t /*integral_constant_expression_p=*/true);\n+\t\t  --c_inhibit_evaluation_warnings;\n+\n                   finish_static_assert (condition,\n                                         STATIC_ASSERT_MESSAGE (t), \n                                         STATIC_ASSERT_SOURCE_LOCATION (t),\n@@ -13110,11 +13115,16 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n \n     case STATIC_ASSERT:\n       {\n-        tree condition = \n+\ttree condition;\n+\n+\t++c_inhibit_evaluation_warnings;\n+        condition = \n           tsubst_expr (STATIC_ASSERT_CONDITION (t), \n                        args,\n                        complain, in_decl,\n                        /*integral_constant_expression_p=*/true);\n+\t--c_inhibit_evaluation_warnings;\n+\n         finish_static_assert (condition,\n                               STATIC_ASSERT_MESSAGE (t),\n                               STATIC_ASSERT_SOURCE_LOCATION (t),"}, {"sha": "4510d51faf8b04e98f8e5fbc0d3c7e066734d61f", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb4bcc8d659011362117716d831829adaa02bdf3/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb4bcc8d659011362117716d831829adaa02bdf3/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=fb4bcc8d659011362117716d831829adaa02bdf3", "patch": "@@ -4081,7 +4081,8 @@ cp_build_binary_op (location_t location,\n \t  if (TREE_CODE (op0) == ADDR_EXPR\n \t      && decl_with_nonnull_addr_p (TREE_OPERAND (op0, 0)))\n \t    {\n-\t      if (complain & tf_warning)\n+\t      if ((complain & tf_warning)\n+\t\t  && c_inhibit_evaluation_warnings == 0)\n \t\twarning (OPT_Waddress, \"the address of %qD will never be NULL\",\n \t\t\t TREE_OPERAND (op0, 0));\n \t    }\n@@ -4093,7 +4094,8 @@ cp_build_binary_op (location_t location,\n \t  if (TREE_CODE (op1) == ADDR_EXPR \n \t      && decl_with_nonnull_addr_p (TREE_OPERAND (op1, 0)))\n \t    {\n-\t      if (complain & tf_warning)\n+\t      if ((complain & tf_warning)\n+\t\t  && c_inhibit_evaluation_warnings == 0)\n \t\twarning (OPT_Waddress, \"the address of %qD will never be NULL\",\n \t\t\t TREE_OPERAND (op1, 0));\n \t    }"}, {"sha": "4468854c4647f933bf7bc8cfebdd6b6e24749f30", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb4bcc8d659011362117716d831829adaa02bdf3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb4bcc8d659011362117716d831829adaa02bdf3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fb4bcc8d659011362117716d831829adaa02bdf3", "patch": "@@ -1,3 +1,8 @@\n+2012-05-04  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/53166\n+\t* g++.dg/cpp0x/static_assert7.C: New.\n+\n 2012-05-04  Ulrich Weigand  <ulrich.weigand@linaro.org>\n \n \tPR tree-optimization/52633"}, {"sha": "28793e43400358ec3fb09bd7fbe6eba65eff1785", "filename": "gcc/testsuite/g++.dg/cpp0x/static_assert7.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb4bcc8d659011362117716d831829adaa02bdf3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstatic_assert7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb4bcc8d659011362117716d831829adaa02bdf3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstatic_assert7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstatic_assert7.C?ref=fb4bcc8d659011362117716d831829adaa02bdf3", "patch": "@@ -0,0 +1,20 @@\n+// PR c++/53166\n+// { dg-options \"-std=c++11 -Waddress\" }\n+\n+template <typename X, X a>\n+struct A\n+{\n+  static_assert (a != nullptr, \"oops\");\n+  static_assert (nullptr != a, \"oops\");\n+\n+  int f()\n+  {\n+    static_assert (a != nullptr, \"oops\");\n+    static_assert (nullptr != a, \"oops\");\n+    return 1;\n+  }\n+};\n+\n+int i1;\n+A<int*, &i1> a1;\n+int i2 = a1.f();"}]}