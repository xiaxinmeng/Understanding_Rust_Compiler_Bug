{"sha": "772c52657977a3d3bb3990d98a0b695c8eac6dc1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzcyYzUyNjU3OTc3YTNkM2JiMzk5MGQ5OGEwYjY5NWM4ZWFjNmRjMQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-05-19T07:55:48Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-05-19T07:55:48Z"}, "message": "system.h (STRIP_NAME_ENCODING): Poison it.\n\n\t* system.h (STRIP_NAME_ENCODING): Poison it.\n\t* output.h (STRIP_NAME_ENCODING): Remove.\n\t(default_strip_name_encoding): Declare.\n\t* target-def.h (TARGET_STRIP_NAME_ENCODING): New.\n\t* target.h (strip_name_encoding): New.\n\t* varasm.c (default_strip_name_encoding): New.\n\n\t* dwarf2asm.c, varasm.c, config/darwin.c, config/darwin.h,\n\tconfig/alpha/alpha.c, config/arm/pe.c, config/avr/avr.c,\n\tconfig/cris/cris.c, config/i386/cygwin.h, config/i386/interix.c,\n\tconfig/i386/winnt.c, config/m32r/m32r.h, config/mcore/mcore-elf.h,\n\tconfig/mcore/mcore-pe.h, config/mcore/mcore.c, config/mcore/mcore.h,\n\tconfig/mips/mips.c, config/mn10200/mn10200.h, config/mn10300/mn10300.h,\n\tconfig/pa/pa.c, config/pa/pa.h, config/pa/som.h,\n\tconfig/rs6000/rs6000.c, config/rs6000/sysv4.h, config/rs6000/xcoff.h,\n\tconfig/v850/v850.h: Use the hook, not the macro.\n\n\t* config/darwin-protos.h, config/darwin.c, config/darwin.h,\n\tconfig/alpha/alpha.c, config/alpha/alpha.h, config/h8300/h8300.c,\n\tconfig/h8300/h8300.h, config/i386/cygwin.h, config/i386/i386-interix.h,\n\tconfig/i386/i386-protos.h, config/i386/win32.h, config/i386/winnt.c,\n\tconfig/ia64/ia64.c, config/ia64/ia64.h, config/m32r/m32r.c,\n\tconfig/m32r/m32r.h, config/mcore/mcore.c, config/mcore/mcore.h,\n\tconfig/pa/pa.c, config/rs6000/rs6000.c, config/rs6000/sysv4.h,\n\tconfig/rs6000/xcoff.h, config/sh/sh.c, config/sh/sh.h,\n\tconfig/v850/v850.c, config/v850/v850.h:\n\tMove STRIP_NAME_ENCODING to out-of-line function and add\n\tTARGET_STRIP_NAME_ENCODING.\n\n\t* config/arm/arm.c, config/arm/arm.h, config/mmix/mmix-protos.h,\n\tconfig/mmix/mmix.c, config/mmix/mmix.h: Replace STRIP_NAME_ENCODING\n\twith TARGET_STRIP_NAME_ENCODING referencing existing function;\n\tmake function static.\n\n\t* xcoffout.c: Include target.h\n\t* Makefile.in (xcoffout.o): Update.\n\n\t* config/avr/avr.c (avr_encode_section_info): Correct prototype.\n\t* config/avr/avr.h (STRIP_NAME_ENCODING): Remove.\n\t* config/rs6000/rs6000.c (rs6000_xcoff_unique_section): Mark\n\treloc argument unused.\n\t* config/sh/sh.c (TARGET_ENCODE_SECTION_INFO): New.\n\n\t* doc/tm.texi (TARGET_STRIP_NAME_ENCODING): Update from previous\n\tSTRIP_NAME_ENCODING docs.\n\nFrom-SVN: r53615", "tree": {"sha": "4ddec3992557b6c2d8d93182967d4ae32a004621", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ddec3992557b6c2d8d93182967d4ae32a004621"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/772c52657977a3d3bb3990d98a0b695c8eac6dc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/772c52657977a3d3bb3990d98a0b695c8eac6dc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/772c52657977a3d3bb3990d98a0b695c8eac6dc1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/772c52657977a3d3bb3990d98a0b695c8eac6dc1/comments", "author": null, "committer": null, "parents": [{"sha": "ae6ac996cc2382cf37cd0eb1a23d21cf2ca16b8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae6ac996cc2382cf37cd0eb1a23d21cf2ca16b8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae6ac996cc2382cf37cd0eb1a23d21cf2ca16b8e"}], "stats": {"total": 836, "additions": 431, "deletions": 405}, "files": [{"sha": "7994a01ae5bfefdc449a522058a278a138197011", "filename": "gcc/ChangeLog", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=772c52657977a3d3bb3990d98a0b695c8eac6dc1", "patch": "@@ -1,3 +1,51 @@\n+2002-05-19  Richard Henderson  <rth@redhat.com>\n+\n+\t* system.h (STRIP_NAME_ENCODING): Poison it.\n+\t* output.h (STRIP_NAME_ENCODING): Remove.\n+\t(default_strip_name_encoding): Declare.\n+\t* target-def.h (TARGET_STRIP_NAME_ENCODING): New.\n+\t* target.h (strip_name_encoding): New.\n+\t* varasm.c (default_strip_name_encoding): New.\n+\n+\t* dwarf2asm.c, varasm.c, config/darwin.c, config/darwin.h,\n+\tconfig/alpha/alpha.c, config/arm/pe.c, config/avr/avr.c,\n+\tconfig/cris/cris.c, config/i386/cygwin.h, config/i386/interix.c,\n+\tconfig/i386/winnt.c, config/m32r/m32r.h, config/mcore/mcore-elf.h,\n+\tconfig/mcore/mcore-pe.h, config/mcore/mcore.c, config/mcore/mcore.h,\n+\tconfig/mips/mips.c, config/mn10200/mn10200.h, config/mn10300/mn10300.h,\n+\tconfig/pa/pa.c, config/pa/pa.h, config/pa/som.h,\n+\tconfig/rs6000/rs6000.c, config/rs6000/sysv4.h, config/rs6000/xcoff.h,\n+\tconfig/v850/v850.h: Use the hook, not the macro.\n+\n+\t* config/darwin-protos.h, config/darwin.c, config/darwin.h,\n+\tconfig/alpha/alpha.c, config/alpha/alpha.h, config/h8300/h8300.c,\n+\tconfig/h8300/h8300.h, config/i386/cygwin.h, config/i386/i386-interix.h,\n+\tconfig/i386/i386-protos.h, config/i386/win32.h, config/i386/winnt.c,\n+\tconfig/ia64/ia64.c, config/ia64/ia64.h, config/m32r/m32r.c,\n+\tconfig/m32r/m32r.h, config/mcore/mcore.c, config/mcore/mcore.h,\n+\tconfig/pa/pa.c, config/rs6000/rs6000.c, config/rs6000/sysv4.h, \n+\tconfig/rs6000/xcoff.h, config/sh/sh.c, config/sh/sh.h,\n+\tconfig/v850/v850.c, config/v850/v850.h:\n+\tMove STRIP_NAME_ENCODING to out-of-line function and add\n+\tTARGET_STRIP_NAME_ENCODING.\n+\n+\t* config/arm/arm.c, config/arm/arm.h, config/mmix/mmix-protos.h,\n+\tconfig/mmix/mmix.c, config/mmix/mmix.h: Replace STRIP_NAME_ENCODING\n+\twith TARGET_STRIP_NAME_ENCODING referencing existing function;\n+\tmake function static.\n+\n+\t* xcoffout.c: Include target.h\n+\t* Makefile.in (xcoffout.o): Update.\n+\n+\t* config/avr/avr.c (avr_encode_section_info): Correct prototype.\n+\t* config/avr/avr.h (STRIP_NAME_ENCODING): Remove.\n+\t* config/rs6000/rs6000.c (rs6000_xcoff_unique_section): Mark\n+\treloc argument unused.\n+\t* config/sh/sh.c (TARGET_ENCODE_SECTION_INFO): New.\n+\n+\t* doc/tm.texi (TARGET_STRIP_NAME_ENCODING): Update from previous\n+\tSTRIP_NAME_ENCODING docs.\n+\n 2002-05-19  Andreas Jaeger  <aj@suse.de>\n \n \t* gengenrtl.c: Add prototype for excluded_rtx."}, {"sha": "1a49dfb89028dad83420acca42ab73523484fadb", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=772c52657977a3d3bb3990d98a0b695c8eac6dc1", "patch": "@@ -1440,7 +1440,7 @@ dwarf2asm.o : dwarf2asm.c $(CONFIG_H) $(SYSTEM_H) flags.h $(RTL_H) $(TREE_H) \\\n vmsdbgout.o : vmsdbgout.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) flags.h \\\n    output.h vmsdbg.h debug.h langhooks.h\n xcoffout.o : xcoffout.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) xcoffout.h \\\n-   flags.h toplev.h output.h dbxout.h $(GGC_H)\n+   flags.h toplev.h output.h dbxout.h $(GGC_H) $(TARGET_H)\n emit-rtl.o : emit-rtl.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) flags.h \\\n    function.h $(REGS_H) insn-config.h $(RECOG_H) real.h $(GGC_H) \\\n    $(EXPR_H) $(srcdir)/../include/obstack.h hard-reg-set.h bitmap.h toplev.h \\"}, {"sha": "d0b41f713200cbfcbe09522b54b347db9575370c", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=772c52657977a3d3bb3990d98a0b695c8eac6dc1", "patch": "@@ -119,6 +119,8 @@ static bool alpha_in_small_data_p\n   PARAMS ((tree));\n static void alpha_encode_section_info\n   PARAMS ((tree, int));\n+static const char *alpha_strip_name_encoding\n+  PARAMS ((const char *));\n static int some_small_symbolic_operand_1\n   PARAMS ((rtx *, void *));\n static int split_small_symbolic_operand_1\n@@ -212,6 +214,8 @@ static void vms_asm_out_destructor PARAMS ((rtx, int));\n #define TARGET_IN_SMALL_DATA_P alpha_in_small_data_p\n #undef TARGET_ENCODE_SECTION_INFO\n #define TARGET_ENCODE_SECTION_INFO alpha_encode_section_info\n+#undef TARGET_STRIP_NAME_ENCODING\n+#define TARGET_STRIP_NAME_ENCODING alpha_strip_name_encoding\n \n #if TARGET_ABI_UNICOSMK\n static void unicosmk_asm_named_section PARAMS ((const char *, unsigned int));\n@@ -1708,6 +1712,19 @@ alpha_encode_section_info (decl, first)\n     }\n }\n \n+/* Undo the effects of the above.  */\n+\n+static const char *\n+alpha_strip_name_encoding (str)\n+     const char *str;\n+{\n+  if (str[0] == '@')\n+    str += 2;\n+  if (str[0] == '*')\n+    str++;\n+  return str;\n+}\n+\n /* legitimate_address_p recognizes an RTL expression that is a valid\n    memory address for an instruction.  The MODE argument is the\n    machine mode for the MEM expression that wants to use this address.\n@@ -8599,7 +8616,7 @@ unicosmk_unique_section (decl, reloc)\n     abort ();\n \n   name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n-  STRIP_NAME_ENCODING (name, name);\n+  name = alpha_strip_name_encoding (name);\n   len = strlen (name);\n \n   if (TREE_CODE (decl) == FUNCTION_DECL)\n@@ -8830,8 +8847,7 @@ unicosmk_ssib_name ()\n   x = XEXP (x, 0);\n   if (GET_CODE (x) != SYMBOL_REF)\n     abort ();\n-  fnname = XSTR (x, 0);\n-  STRIP_NAME_ENCODING (fnname, fnname);\n+  fnname = alpha_strip_name_encoding (XSTR (x, 0));\n \n   len = strlen (fnname);\n   if (len + SSIB_PREFIX_LEN > 255)\n@@ -9006,7 +9022,7 @@ unicosmk_output_externs (file)\n       /* We have to strip the encoding and possibly remove user_label_prefix \n \t from the identifier in order to handle -fleading-underscore and\n \t explicit asm names correctly (cf. gcc.dg/asm-names-1.c).  */\n-      STRIP_NAME_ENCODING (real_name, p->name);\n+      real_name = alpha_strip_name_encoding (p->name);\n       if (len && p->name[0] == '*'\n \t  && !memcmp (real_name, user_label_prefix, len))\n \treal_name += len;"}, {"sha": "7c1a912f27d5eba6c72cd86cfd2aa4b4a8e929da", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=772c52657977a3d3bb3990d98a0b695c8eac6dc1", "patch": "@@ -1724,15 +1724,6 @@ do {\t\t\t\t\t\t\t\t\t     \\\n \n #define DATA_SECTION_ASM_OP \"\\t.data\"\n \n-#define STRIP_NAME_ENCODING(VAR,SYMBOL_NAME)\t\\\n-do {\t\t\t\t\t\t\\\n-  (VAR) = (SYMBOL_NAME);\t\t\t\\\n-  if ((VAR)[0] == '@')\t\t\t\t\\\n-    (VAR) += 2;\t\t\t\t\t\\\n-  if ((VAR)[0] == '*')\t\t\t\t\\\n-    (VAR)++;\t\t\t\t\t\\\n-} while (0)\n-\n /* How to refer to registers in assembler output.\n    This sequence is indexed by compiler's hard-register-number (see above).  */\n "}, {"sha": "111884d234b63776f1dd04bb54e9fcfe039d6f6a", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=772c52657977a3d3bb3990d98a0b695c8eac6dc1", "patch": "@@ -180,6 +180,9 @@ static void\t arm_encode_section_info\tPARAMS ((tree, int));\n #define TARGET_ENCODE_SECTION_INFO  arm_encode_section_info\n #endif\n \n+#undef TARGET_STRIP_NAME_ENCODING\n+#define TARGET_STRIP_NAME_ENCODING arm_strip_name_encoding\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Obstack for minipool constant handling.  */"}, {"sha": "e4ee55acfae3a62084245d03a739c2584fa841e2", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=772c52657977a3d3bb3990d98a0b695c8eac6dc1", "patch": "@@ -1848,12 +1848,6 @@ typedef struct\n   case '*':  return 1;\t\t\t\t\\\n   SUBTARGET_NAME_ENCODING_LENGTHS\t\t\n \n-/* This has to be handled by a function because more than part of the\n-   ARM backend uses function name prefixes to encode attributes.  */\n-#undef  STRIP_NAME_ENCODING\n-#define STRIP_NAME_ENCODING(VAR, SYMBOL_NAME)\t\\\n-  (VAR) = arm_strip_name_encoding (SYMBOL_NAME)\n-\n /* This is how to output a reference to a user-level label named NAME.\n    `assemble_name' uses this.  */\n #undef  ASM_OUTPUT_LABELREF"}, {"sha": "c86e23124b615b5abc9166c3e7b1ff4415d6272d", "filename": "gcc/config/arm/pe.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Farm%2Fpe.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Farm%2Fpe.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpe.c?ref=772c52657977a3d3bb3990d98a0b695c8eac6dc1", "patch": "@@ -257,8 +257,7 @@ arm_pe_unique_section (decl, reloc)\n   const char * prefix;\n \n   name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n-  /* Strip off any encoding in fnname.  */\n-  STRIP_NAME_ENCODING (name, name);\n+  name = arm_strip_name_encoding (name);\n \n   /* The object is put in, for example, section .text$foo.\n      The linker will then ultimately place them in .text"}, {"sha": "ea2a19354d1f1ee8f59b919e6d3e8380cec69a11", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=772c52657977a3d3bb3990d98a0b695c8eac6dc1", "patch": "@@ -65,7 +65,7 @@ static bool   avr_assemble_integer PARAMS ((rtx, unsigned int, int));\n static void   avr_output_function_prologue PARAMS ((FILE *, HOST_WIDE_INT));\n static void   avr_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n static void   avr_unique_section PARAMS ((tree, int));\n-extern void   avr_encode_section_info PARAMS ((tree, int));\n+static void   avr_encode_section_info PARAMS ((tree, int));\n \n /* Allocate registers from r25 to r8 for parameters for function calls */\n #define FIRST_CUM_REG 26\n@@ -4517,9 +4517,9 @@ avr_unique_section (decl, reloc)\n   int len;\n   const char *name, *prefix;\n   char *string;\n+\n   name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n-  /* Strip off any encoding in name.  */\n-  STRIP_NAME_ENCODING (name, name);\n+  name = (* targetm.strip_name_encoding) (name);\n \n   if (TREE_CODE (decl) == FUNCTION_DECL)\n     {\n@@ -4770,7 +4770,7 @@ avr_encode_section_info (decl, first)\n       DECL_SECTION_NAME (decl) = build_string (strlen (dsec), dsec);\n       TREE_READONLY (decl) = 1;\n     }\n-}   \n+}\n \n /* Outputs to the stdio stream FILE some\n    appropriate text to go at the start of an assembler file.  */"}, {"sha": "ecbc1e5fda91271b200367b7fcc368b8c5e1c47b", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=772c52657977a3d3bb3990d98a0b695c8eac6dc1", "patch": "@@ -1742,12 +1742,6 @@ progmem_section (void)\t\t\t\t\t\t\t      \\\n    This macro is irrelevant if there is no separate readonly data\n    section.  */\n \n-#define STRIP_NAME_ENCODING(VAR,SYMBOL_NAME) \\\n-  (VAR) = (SYMBOL_NAME) + ((SYMBOL_NAME)[0] == '*' || (SYMBOL_NAME)[0] == '@');\n-/* `STRIP_NAME_ENCODING (VAR, SYM_NAME)'\n-   Decode SYM_NAME and store the real name part in VAR, sans the\n-   characters that encode section info.  */\n-\n #define ASM_FILE_START(STREAM) asm_file_start (STREAM)\n /* A C expression which outputs to the stdio stream STREAM some\n    appropriate text to go at the start of an assembler file."}, {"sha": "f54f39e74d41cbb01a5b2433278927771417a863", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=772c52657977a3d3bb3990d98a0b695c8eac6dc1", "patch": "@@ -2591,7 +2591,7 @@ cris_asm_output_mi_thunk (stream, thunkdecl, delta, funcdecl)\n     {\n       const char *name = XSTR (XEXP (DECL_RTL (funcdecl), 0), 0);\n \n-      STRIP_NAME_ENCODING (name, name);\n+      name = (* targetm.strip_name_encoding) (name);\n       fprintf (stream, \"add.d \");\n       assemble_name (stream, name);\n       fprintf (stream, \"%s,$pc\\n\", CRIS_PLT_PCOFFSET_SUFFIX);\n@@ -2889,7 +2889,7 @@ cris_output_addr_const (file, x)\n \t  const char *origstr = XSTR (x, 0);\n \t  const char *str;\n \n-\t  STRIP_NAME_ENCODING (str, origstr);\n+\t  str = (* targetm.strip_name_encoding) (origstr);\n \n \t  if (is_plt)\n \t    {"}, {"sha": "14077298629e1325fda36d09df865ed969312f85", "filename": "gcc/config/darwin-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fdarwin-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fdarwin-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-protos.h?ref=772c52657977a3d3bb3990d98a0b695c8eac6dc1", "patch": "@@ -59,6 +59,7 @@ extern void machopic_define_name PARAMS ((const char*));\n extern int machopic_name_defined_p PARAMS ((const char*));\n extern int machopic_ident_defined_p PARAMS ((tree));\n extern void darwin_encode_section_info PARAMS ((tree, int));\n+extern const char *darwin_strip_name_encoding PARAMS ((const char *));\n \n #endif /* TREE_CODE */\n "}, {"sha": "3b9ee8c3cbc382e27db142a091378d9b06b7b7b7", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=772c52657977a3d3bb3990d98a0b695c8eac6dc1", "patch": "@@ -278,7 +278,7 @@ machopic_non_lazy_ptr_name (name)\n \treturn IDENTIFIER_POINTER (TREE_PURPOSE (temp));\n     }\n \n-  STRIP_NAME_ENCODING (name, name);\n+  name = darwin_strip_name_encoding (name);\n \n   /* Try again, but comparing names this time.  */\n   for (temp = machopic_non_lazy_pointers;\n@@ -288,7 +288,7 @@ machopic_non_lazy_ptr_name (name)\n       if (TREE_VALUE (temp))\n \t{\n \t  temp_name = IDENTIFIER_POINTER (TREE_VALUE (temp));\n-\t  STRIP_NAME_ENCODING (temp_name, temp_name);\n+\t  temp_name = darwin_strip_name_encoding (temp_name);\n \t  if (strcmp (name, temp_name) == 0)\n \t    return IDENTIFIER_POINTER (TREE_PURPOSE (temp));\n \t}\n@@ -360,7 +360,7 @@ machopic_stub_name (name)\n \treturn IDENTIFIER_POINTER (TREE_PURPOSE (temp));\n     }\n \n-  STRIP_NAME_ENCODING (name, name);\n+  name = darwin_strip_name_encoding (name);\n \n   {\n     char *buffer;\n@@ -414,7 +414,8 @@ machopic_validate_stub_or_non_lazy_ptr (name, validate_stub)\n           TREE_USED (temp) = 1;\n \t  if (TREE_CODE (TREE_VALUE (temp)) == IDENTIFIER_NODE)\n \t    TREE_SYMBOL_REFERENCED (TREE_VALUE (temp)) = 1;\n-\t  STRIP_NAME_ENCODING (real_name, IDENTIFIER_POINTER (TREE_VALUE (temp)));\n+\t  real_name = IDENTIFIER_POINTER (TREE_VALUE (temp));\n+\t  real_name = darwin_strip_name_encoding (real_name);\n \t  id2 = maybe_get_identifier (real_name);\n \t  if (id2)\n \t    TREE_SYMBOL_REFERENCED (id2) = 1;\n@@ -846,7 +847,7 @@ machopic_finish (asm_out_file)\n       if (sym_name[0] == '!' && sym_name[1] == 'T')\n \tcontinue;\n \n-      STRIP_NAME_ENCODING (sym_name, sym_name);\n+      sym_name = darwin_strip_name_encoding (sym_name);\n \n       sym = alloca (strlen (sym_name) + 2);\n       if (sym_name[0] == '*' || sym_name[0] == '&')\n@@ -1015,6 +1016,15 @@ darwin_encode_section_info (decl, first)\n     update_stubs (XSTR (sym_ref, 0));\n }\n \n+/* Undo the effects of the above.  */\n+\n+const char *\n+darwin_strip_name_encoding (str)\n+     const char *str;\n+{\n+  return str[0] == '!' ? str + 4 : str;\n+}\n+\n /* Scan the list of non-lazy pointers and update any recorded names whose\n    stripped name matches the argument.  */\n \n@@ -1025,7 +1035,7 @@ update_non_lazy_ptrs (name)\n   const char *name1, *name2;\n   tree temp;\n \n-  STRIP_NAME_ENCODING (name1, name);\n+  name1 = darwin_strip_name_encoding (name);\n \n   for (temp = machopic_non_lazy_pointers;\n        temp != NULL_TREE; \n@@ -1035,7 +1045,7 @@ update_non_lazy_ptrs (name)\n \n       if (*sym_name == '!')\n \t{\n-\t  STRIP_NAME_ENCODING (name2, sym_name);\n+\t  name2 = darwin_strip_name_encoding (sym_name);\n \t  if (strcmp (name1, name2) == 0)\n \t    {\n \t      IDENTIFIER_POINTER (TREE_VALUE (temp)) = name;\n@@ -1089,7 +1099,7 @@ update_stubs (name)\n   const char *name1, *name2;\n   tree temp;\n \n-  STRIP_NAME_ENCODING (name1, name);\n+  name1 = darwin_strip_name_encoding (name);\n \n   for (temp = machopic_stubs;\n        temp != NULL_TREE; \n@@ -1099,7 +1109,7 @@ update_stubs (name)\n \n       if (*sym_name == '!')\n \t{\n-\t  STRIP_NAME_ENCODING (name2, sym_name);\n+\t  name2 = darwin_strip_name_encoding (sym_name);\n \t  if (strcmp (name1, name2) == 0)\n \t    {\n \t      IDENTIFIER_POINTER (TREE_VALUE (temp)) = name;"}, {"sha": "0de241467d3f472755c7fca1a95c0b64c1df87f7", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 25, "deletions": 28, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=772c52657977a3d3bb3990d98a0b695c8eac6dc1", "patch": "@@ -235,28 +235,28 @@ do { text_section ();\t\t\t\t\t\t\t\\\n    Make Objective-C internal symbols local.  */\n \n #undef\tASM_OUTPUT_LABELREF\n-#define ASM_OUTPUT_LABELREF(FILE,NAME)\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-       STRIP_NAME_ENCODING (NAME, NAME);  \\\n-       if (NAME[0] == '&' || NAME[0] == '*')\t\t\t\t\\\n-         {\t\t\t\t\t\t\t\t\\\n-           int len = strlen (NAME);\t\t\t\t\t\\\n-\t   if (len > 6 && !strcmp (\"$stub\", NAME + len - 5))\t\t\\\n-\t     machopic_validate_stub_or_non_lazy_ptr (NAME, 1);\t\t\\\n-\t   else if (len > 7 && !strcmp (\"$stub\\\"\", NAME + len - 6))\t\\\n-\t     machopic_validate_stub_or_non_lazy_ptr (NAME, 1);\t\t\\\n-\t   else if (len > 14 && !strcmp (\"$non_lazy_ptr\", NAME + len - 13)) \\\n-\t     machopic_validate_stub_or_non_lazy_ptr (NAME, 0);\t\t\\\n-\t   fputs (&NAME[1], FILE); \\\n-\t } \\\n-       else if (NAME[0] == '+' || NAME[0] == '-')   \\\n-         fprintf (FILE, \"\\\"%s\\\"\", NAME); \\\n-       else if (!strncmp (NAME, \"_OBJC_\", 6))  \\\n-         fprintf (FILE, \"L%s\", NAME);   \\\n-       else if (!strncmp (NAME, \".objc_class_name_\", 17))\t\t\\\n-\t fprintf (FILE, \"%s\", NAME);\t\t\t\t\t\\\n-       else\t\t\t\t\t\t\t\t\\\n-         fprintf (FILE, \"_%s\", NAME);\t\t\t\t\t\\\n+#define ASM_OUTPUT_LABELREF(FILE,NAME)\t\t\t\t\t     \\\n+  do {\t\t\t\t\t\t\t\t\t     \\\n+       const char *xname = darwin_strip_name_encoding (NAME);\t\t     \\\n+       if (xname[0] == '&' || xname[0] == '*')\t\t\t\t     \\\n+         {\t\t\t\t\t\t\t\t     \\\n+           int len = strlen (xname);\t\t\t\t\t     \\\n+\t   if (len > 6 && !strcmp (\"$stub\", xname + len - 5))\t\t     \\\n+\t     machopic_validate_stub_or_non_lazy_ptr (xname, 1);\t\t     \\\n+\t   else if (len > 7 && !strcmp (\"$stub\\\"\", xname + len - 6))\t     \\\n+\t     machopic_validate_stub_or_non_lazy_ptr (xname, 1);\t\t     \\\n+\t   else if (len > 14 && !strcmp (\"$non_lazy_ptr\", xname + len - 13)) \\\n+\t     machopic_validate_stub_or_non_lazy_ptr (xname, 0);\t\t     \\\n+\t   fputs (&xname[1], FILE);\t\t\t\t\t     \\\n+\t }\t\t\t\t\t\t\t\t     \\\n+       else if (xname[0] == '+' || xname[0] == '-')\t\t\t     \\\n+         fprintf (FILE, \"\\\"%s\\\"\", xname);\t\t\t\t     \\\n+       else if (!strncmp (xname, \"_OBJC_\", 6))\t\t\t\t     \\\n+         fprintf (FILE, \"L%s\", xname);\t\t\t\t\t     \\\n+       else if (!strncmp (xname, \".objc_class_name_\", 17))\t\t     \\\n+\t fprintf (FILE, \"%s\", xname);\t\t\t\t\t     \\\n+       else\t\t\t\t\t\t\t\t     \\\n+         fprintf (FILE, \"_%s\", xname);\t\t\t\t\t     \\\n   } while (0)\n \n #undef\tALIGN_ASM_OP\n@@ -553,9 +553,7 @@ enum machopic_addr_class {\n #define MACHOPIC_PURE          (flag_pic == 2)\n \n #define TARGET_ENCODE_SECTION_INFO  darwin_encode_section_info\n-\n-#define STRIP_NAME_ENCODING(VAR,SYMBOL_NAME)  \\\n-  ((VAR) = ((SYMBOL_NAME[0] == '!') ? (SYMBOL_NAME) + 4 : (SYMBOL_NAME)))\n+#define TARGET_STRIP_NAME_ENCODING  darwin_strip_name_encoding\n \n #define GEN_BINDER_NAME_FOR_STUB(BUF,STUB,STUB_LENGTH)\t\t\\\n   do {\t\t\t\t\t\t\t\t\\\n@@ -591,12 +589,11 @@ enum machopic_addr_class {\n \n #define GEN_LAZY_PTR_NAME_FOR_SYMBOL(BUF,SYMBOL,SYMBOL_LENGTH)\t\\\n   do {\t\t\t\t\t\t\t\t\\\n-    const char *symbol_ = (SYMBOL);\t\t\t\t\\\n+    const char *symbol_ = darwin_strip_name_encoding (SYMBOL);\t\\\n     char *buffer_ = (BUF);\t\t\t\t\t\\\n-    STRIP_NAME_ENCODING (symbol_, symbol_);  \\\n     if (symbol_[0] == '\"')\t\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\\\n-        strcpy (buffer_, \"\\\"L\");\t\t\t\t\t\\\n+        strcpy (buffer_, \"\\\"L\");\t\t\t\t\\\n         strcpy (buffer_ + 2, symbol_ + 1);\t\t\t\\\n \tstrcpy (buffer_ + (SYMBOL_LENGTH), \"$lazy_ptr\\\"\");\t\\\n       }\t\t\t\t\t\t\t\t\\"}, {"sha": "bb78d4bb34f99810ca4dd4cba985b1dfdb80dcdd", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=772c52657977a3d3bb3990d98a0b695c8eac6dc1", "patch": "@@ -66,6 +66,7 @@ static void h8300_asm_named_section PARAMS ((const char *, unsigned int));\n #endif\n static void h8300_encode_label PARAMS ((tree));\n static void h8300_encode_section_info PARAMS ((tree, int));\n+static const char *h8300_strip_name_encoding PARAMS ((const char *));\n \n /* CPU_TYPE, says what cpu we're compiling for.  */\n int cpu_type;\n@@ -115,6 +116,8 @@ const char *h8_push_op, *h8_pop_op, *h8_mov_op;\n #define TARGET_ASM_FUNCTION_EPILOGUE h8300_output_function_epilogue\n #undef TARGET_ENCODE_SECTION_INFO\n #define TARGET_ENCODE_SECTION_INFO h8300_encode_section_info\n+#undef TARGET_STRIP_NAME_ENCODING\n+#define TARGET_STRIP_NAME_ENCODING h8300_strip_name_encoding\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n@@ -3477,6 +3480,15 @@ h8300_encode_section_info (decl, first)\n     }\n }\n \n+/* Undo the effects of the above.  */\n+\n+static const char *\n+h8300_strip_name_encoding (str)\n+     const char *str;\n+{\n+  return str + (*str == '*' || *str == '@' || *str == '&');\n+}\n+\n const char *\n output_simode_bld (bild, operands)\n      int bild;"}, {"sha": "6a888a95ff9dc333692c244d7897de1256a17c60", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=772c52657977a3d3bb3990d98a0b695c8eac6dc1", "patch": "@@ -1096,13 +1096,6 @@ struct cum_arg\n \n #define TINY_DATA_NAME_P(NAME) (*(NAME) == '&')\n \n-/* Store the user-specified part of SYMBOL_NAME in VAR.\n-   This is sort of inverse to targetm.encode_section_info.  */\n-#define STRIP_NAME_ENCODING(VAR, SYMBOL_NAME)\t\t\\\n-  (VAR) = (SYMBOL_NAME) + ((SYMBOL_NAME)[0] == '*'\t\\\n-\t\t\t   || (SYMBOL_NAME)[0] == '@'\t\\\n-\t\t\t   || (SYMBOL_NAME)[0] == '&');\n-\n /* How to refer to registers in assembler output.\n    This sequence is indexed by compiler's hard-register-number (see above).  */\n "}, {"sha": "0caf3c340578efea07cd91e169a46795e94a8155", "filename": "gcc/config/i386/cygwin.h", "status": "modified", "additions": 3, "deletions": 32, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fi386%2Fcygwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fi386%2Fcygwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygwin.h?ref=772c52657977a3d3bb3990d98a0b695c8eac6dc1", "patch": "@@ -255,45 +255,16 @@ do {\t\t\t\t\t\t\t\t\t\\\n    section and we need to set DECL_SECTION_NAME so we do that here.\n    Note that we can be called twice on the same decl.  */\n \n-extern void i386_pe_encode_section_info PARAMS ((TREE, int));\n-\n #undef TARGET_ENCODE_SECTION_INFO\n #define TARGET_ENCODE_SECTION_INFO  i386_pe_encode_section_info\n-\n-/* Utility used only in this file.  */\n-#define I386_PE_STRIP_ENCODING(SYM_NAME) \\\n-  ((SYM_NAME) + ((SYM_NAME)[0] == '@' \\\n-\t\t  ? ((SYM_NAME)[3] == '*' ? 4 : 3) : 0) \\\n-\t      + ((SYM_NAME)[0] == '*' ? 1 : 0))\n-\n-/* This macro gets just the user-specified name\n-   out of the string in a SYMBOL_REF.  Discard\n-   trailing @[NUM] encoded by targetm.encode_section_info.  */\n-#undef  STRIP_NAME_ENCODING\n-#define STRIP_NAME_ENCODING(VAR,SYMBOL_NAME)\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  const char *_p;\t\t\t\t\t\t\t\\\n-  const char *_name = I386_PE_STRIP_ENCODING (SYMBOL_NAME);\t\t\\\n-  for (_p = _name; *_p && *_p != '@'; ++_p)\t\t\t\t\\\n-    ;\t\t\t\t\t\t\t\t\t\\\n-  if (*_p == '@')\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      int _len = _p - _name;\t\t\t\t\t\t\\\n-      char *_new_name = (char *) alloca (_len + 1);\t\t\t\\\n-      strncpy (_new_name, _name, _len);\t\t\t\t\t\\\n-      _new_name[_len] = '\\0';\t\t\t\t\t\t\\\n-      (VAR) = _new_name;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  else\t\t\t\t\t\t\t\t\t\\\n-    (VAR) = _name;\t\t\t\t\t\t\t\\\n-} while (0)\n-      \n+#undef  TARGET_STRIP_NAME_ENCODING\n+#define TARGET_STRIP_NAME_ENCODING  i386_pe_strip_name_encoding_full\n \f\n /* Output a reference to a label.  */\n #undef ASM_OUTPUT_LABELREF\n #define ASM_OUTPUT_LABELREF(STREAM, NAME)  \t\t\\\n   fprintf (STREAM, \"%s%s\", USER_LABEL_PREFIX, \t\t\\\n-\t   I386_PE_STRIP_ENCODING (NAME))\t\t\\\n+\t   i386_pe_strip_name_encoding (NAME))\t\t\\\n \n /* Output a common block.  */\n #undef ASM_OUTPUT_COMMON"}, {"sha": "630a7b9b746108376c82470fb6559837428dfaae", "filename": "gcc/config/i386/i386-interix.h", "status": "modified", "additions": 5, "deletions": 32, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fi386%2Fi386-interix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fi386%2Fi386-interix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-interix.h?ref=772c52657977a3d3bb3990d98a0b695c8eac6dc1", "patch": "@@ -299,40 +299,13 @@ while (0)\n \n /* Define this macro if references to a symbol must be treated\n    differently depending on something about the variable or\n-   function named by the symbol (such as what section it is in).\n-\n-   Apply stddef, handle (as yet unimplemented) pic.\n-\n-   stddef renaming does NOT apply to Alpha.  */\n-\n-const char *gen_stdcall_suffix PARAMS ((tree));\n-void i386_interix_encode_section_info PARAMS ((tree, int));\n+   function named by the symbol (such as what section it is in).  */\n \n #undef TARGET_ENCODE_SECTION_INFO\n-#define TARGET_ENCODE_SECTION_INFO i386_interix_encode_section_info\n-\n-/* This macro gets just the user-specified name\n-   out of the string in a SYMBOL_REF.  Discard\n-   trailing @[NUM] encoded by targetm.encode_section_info.  */\n-#undef  STRIP_NAME_ENCODING\n-#define STRIP_NAME_ENCODING(VAR,SYMBOL_NAME)\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  const char *_p;\t\t\t\t\t\t\t\\\n-  const char *_name = SYMBOL_NAME;\t\t\t\t\t\\\n-  for (_p = _name; *_p && *_p != '@'; ++_p)\t\t\t\t\\\n-    ;\t\t\t\t\t\t\t\t\t\\\n-  if (*_p == '@')\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      int _len = _p - _name;\t\t\t\t\t\t\\\n-      char *_new_name = (char *) alloca (_len + 1);\t\t\t\\\n-      strncpy (_new_name, _name, _len);\t\t\t\t\t\\\n-      _new_name[_len] = '\\0';\t\t\t\t\t\t\\\n-      (VAR) = _new_name;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  else\t\t\t\t\t\t\t\t\t\\\n-    (VAR) = _name;\t\t\t\t\t\t\t\\\n-} while (0)\n-      \n+#define TARGET_ENCODE_SECTION_INFO i386_pe_encode_section_info\n+#undef  TARGET_STRIP_NAME_ENCODING\n+#define TARGET_STRIP_NAME_ENCODING  i386_pe_strip_name_encoding_full\n+\n #if 0\t\n /* Turn this back on when the linker is updated to handle grouped\n    .data$ sections correctly. See corresponding note in i386/interix.c. "}, {"sha": "4222bba2ba6a5bc2053287859f3bb3df8134463d", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=772c52657977a3d3bb3990d98a0b695c8eac6dc1", "patch": "@@ -199,3 +199,8 @@ extern unsigned int i386_pe_section_type_flags PARAMS ((tree, const char *,\n extern void i386_pe_asm_named_section PARAMS ((const char *, unsigned int));\n extern void x86_output_mi_thunk PARAMS ((FILE *, int, tree));\n #endif\n+\n+/* In winnt.c  */\n+extern void i386_pe_encode_section_info PARAMS ((tree, int));\n+extern const char *i386_pe_strip_name_encoding PARAMS ((const char *));\n+extern const char *i386_pe_strip_name_encoding_full PARAMS ((const char *));"}, {"sha": "58a19ab5de6c53c8f0a45a9522d2202ca976b52d", "filename": "gcc/config/i386/interix.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fi386%2Finterix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fi386%2Finterix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Finterix.c?ref=772c52657977a3d3bb3990d98a0b695c8eac6dc1", "patch": "@@ -102,8 +102,7 @@ i386_pe_unique_section (decl, reloc)\n   char *string,*prefix;\n \n   name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n-  /* Strip off any encoding in fnname.  */\n-  STRIP_NAME_ENCODING (name, name);\n+  name = (* targetm.strip_name_encoding) (name);\n \n   /* The object is put in, for example, section .text$foo.\n      The linker will then ultimately place them in .text"}, {"sha": "a9a8b2db6b14181657ad9c15a91f61472f953cb8", "filename": "gcc/config/i386/win32.h", "status": "modified", "additions": 2, "deletions": 24, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fi386%2Fwin32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fi386%2Fwin32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwin32.h?ref=772c52657977a3d3bb3990d98a0b695c8eac6dc1", "patch": "@@ -104,30 +104,8 @@ Boston, MA 02111-1307, USA.  */\n \n #undef TARGET_ENCODE_SECTION_INFO\n #define TARGET_ENCODE_SECTION_INFO  i386_pe_encode_section_info\n-\n-/* This macro gets just the user-specified name\n-   out of the string in a SYMBOL_REF.  Discard\n-   trailing @[NUM] encoded by targetm.encode_section_info. \n-   Do we need the stripping of leading '*'?  */\n-#undef  STRIP_NAME_ENCODING\n-#define STRIP_NAME_ENCODING(VAR,SYMBOL_NAME)\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  const char *_p;\t\t\t\t\t\t\t\\\n-  const char *const _name = ((SYMBOL_NAME) + ((SYMBOL_NAME)[0] == '*'));\\\n-  for (_p = _name; *_p && *_p != '@'; ++_p)\t\t\t\t\\\n-    ;\t\t\t\t\t\t\t\t\t\\\n-  if (*_p == '@')\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      int _len = _p - _name;\t\t\t\t\t\t\\\n-      char *_new_name = (char *) alloca (_len + 1);\t\t\t\\\n-      strncpy (_new_name, _name, _len);\t\t\t\t\t\\\n-      _new_name[_len] = '\\0';\t\t\t\t\t\t\\\n-      (VAR) = _new_name;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  else\t\t\t\t\t\t\t\t\t\\\n-    (VAR) = _name;\t\t\t\t\t\t\t\\\n-} while (0)\n-      \n+#undef  TARGET_STRIP_NAME_ENCODING\n+#define TARGET_STRIP_NAME_ENCODING  i386_pe_strip_name_encoding_full\n \n /* Emit code to check the stack when allocating more that 4000\n    bytes in one go.  */"}, {"sha": "d6f0a7a81aa18bb86edec2caf6fe64ce32816b3d", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 32, "deletions": 3, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=772c52657977a3d3bb3990d98a0b695c8eac6dc1", "patch": "@@ -31,6 +31,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"tm_p.h\"\n #include \"toplev.h\"\n #include \"hashtab.h\"\n+#include \"ggc.h\"\n \n /* i386/PE specific attribute support.\n \n@@ -422,6 +423,35 @@ i386_pe_encode_section_info (decl, first)\n     }\n }\n \n+/* Strip only the leading encoding, leaving the stdcall suffix.  */\n+\n+const char *\n+i386_pe_strip_name_encoding (str)\n+     const char *str;\n+{\n+  if (*str == '@')\n+    str += 3;\n+  if (*str == '*')\n+    str += 1;\n+  return str;\n+}\n+\n+/* Also strip the stdcall suffix.  */\n+\n+const char *\n+i386_pe_strip_name_encoding_full (str)\n+     const char *str;\n+{\n+  const char *p;\n+  const char *name = i386_pe_strip_name_encoding (str);\n+ \n+  p = strchr (name, '@');\n+  if (p)\n+    return ggc_alloc_string (name, p - name);\n+\n+  return name;\n+}\n+\n void\n i386_pe_unique_section (decl, reloc)\n      tree decl;\n@@ -432,8 +462,7 @@ i386_pe_unique_section (decl, reloc)\n   char *string;\n \n   name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n-  /* Strip off any encoding in fnname.  */\n-  STRIP_NAME_ENCODING (name, name);\n+  name = i386_pe_strip_name_encoding_full (name);\n \n   /* The object is put in, for example, section .text$foo.\n      The linker will then ultimately place them in .text\n@@ -663,7 +692,7 @@ i386_pe_asm_file_end (file)\n       for (q = export_head; q != NULL; q = q->next)\n \t{\n \t  fprintf (file, \"\\t.ascii \\\" -export:%s%s\\\"\\n\",\n-\t\t   I386_PE_STRIP_ENCODING (q->name),\n+\t\t   i386_pe_strip_name_encoding (q->name),\n \t\t   (q->is_data) ? \",data\" : \"\");\n \t}\n     }"}, {"sha": "2d01810a956b9ac73f803a3cb8f23921f5e86d66", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=772c52657977a3d3bb3990d98a0b695c8eac6dc1", "patch": "@@ -127,6 +127,7 @@ static void emit_all_insn_group_barriers PARAMS ((FILE *, rtx));\n static void emit_predicate_relation_info PARAMS ((void));\n static bool ia64_in_small_data_p PARAMS ((tree));\n static void ia64_encode_section_info PARAMS ((tree, int));\n+static const char *ia64_strip_name_encoding PARAMS ((const char *));\n static void process_epilogue PARAMS ((void));\n static int process_set PARAMS ((FILE *, rtx));\n \n@@ -211,6 +212,8 @@ static const struct attribute_spec ia64_attribute_table[] =\n #define TARGET_IN_SMALL_DATA_P  ia64_in_small_data_p\n #undef TARGET_ENCODE_SECTION_INFO\n #define TARGET_ENCODE_SECTION_INFO ia64_encode_section_info\n+#undef TARGET_STRIP_NAME_ENCODING\n+#define TARGET_STRIP_NAME_ENCODING ia64_strip_name_encoding\n \n #undef TARGET_SCHED_ADJUST_COST\n #define TARGET_SCHED_ADJUST_COST ia64_adjust_cost\n@@ -6981,6 +6984,17 @@ ia64_encode_section_info (decl, first)\n   else if (symbol_str[0] == SDATA_NAME_FLAG_CHAR)\n     XSTR (symbol, 0) = ggc_strdup (symbol_str + 1);\n }\n+\n+static const char *\n+ia64_strip_name_encoding (str)\n+     const char *str;\n+{\n+  if (str[0] == SDATA_NAME_FLAG_CHAR)\n+    str++;\n+  if (str[0] == '*')\n+    str++;\n+  return str;\n+}\n \f\n /* Output assembly directives for prologue regions.  */\n "}, {"sha": "0d3d362830d0e23e137b549add8f3716a5b593b6", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=772c52657977a3d3bb3990d98a0b695c8eac6dc1", "patch": "@@ -1777,18 +1777,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define SDATA_NAME_FLAG_CHAR '@'\n \n #define IA64_DEFAULT_GVALUE 8\n-\n-/* Decode SYM_NAME and store the real name part in VAR, sans the characters\n-   that encode section info.  */\n-\n-#define STRIP_NAME_ENCODING(VAR, SYMBOL_NAME)\t\\\n-do {\t\t\t\t\t\t\\\n-  (VAR) = (SYMBOL_NAME);\t\t\t\\\n-  if ((VAR)[0] == SDATA_NAME_FLAG_CHAR)\t\t\\\n-    (VAR)++;\t\t\t\t\t\\\n-  if ((VAR)[0] == '*')\t\t\t\t\\\n-    (VAR)++;\t\t\t\t\t\\\n-} while (0)\n \f\n /* Position Independent Code.  */\n "}, {"sha": "b7ebaf35f025adcf7148c8d9a009afebed2f40cb", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=772c52657977a3d3bb3990d98a0b695c8eac6dc1", "patch": "@@ -76,7 +76,7 @@ static int    m32r_issue_rate\t   PARAMS ((void));\n \n static void m32r_select_section PARAMS ((tree, int, unsigned HOST_WIDE_INT));\n static void m32r_encode_section_info PARAMS ((tree, int));\n-\n+static const char *m32r_strip_name_encoding PARAMS ((const char *));\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ATTRIBUTE_TABLE\n@@ -107,6 +107,8 @@ static void m32r_encode_section_info PARAMS ((tree, int));\n \n #undef TARGET_ENCODE_SECTION_INFO\n #define TARGET_ENCODE_SECTION_INFO m32r_encode_section_info\n+#undef TARGET_STRIP_NAME_ENCODING\n+#define TARGET_STRIP_NAME_ENCODING m32r_strip_name_encoding\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n@@ -486,6 +488,17 @@ m32r_encode_section_info (decl, first)\n     }\n }\n \n+/* Undo the effects of the above.  */\n+\n+static const char *\n+m32r_strip_name_encoding (str)\n+     const char *str;\n+{\n+  str += ENCODED_NAME_P (str);\n+  str += *str == '*';\n+  return str;\n+}\n+\n /* Do anything needed before RTL is emitted for each function.  */\n \n void"}, {"sha": "d055deba20d1b99a61f678419a35dfb121a048ea", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=772c52657977a3d3bb3990d98a0b695c8eac6dc1", "patch": "@@ -1611,15 +1611,6 @@ sbss_section ()\t\t\t\t\t\t\t\t\\\n  /*|| SMALL_NAME_P (SYMBOL_NAME)*/ \\\n  || MEDIUM_NAME_P (SYMBOL_NAME) \\\n  || LARGE_NAME_P (SYMBOL_NAME))\n-\n-/* Decode SYM_NAME and store the real name part in VAR, sans\n-   the characters that encode section info.  */\n-/* Note that we have to handle symbols like \"%*start\".  */\n-#define STRIP_NAME_ENCODING(VAR, SYMBOL_NAME) \\\n-do {\t\t\t\t\t\t\t\\\n-  (VAR) = (SYMBOL_NAME) + ENCODED_NAME_P (SYMBOL_NAME);\t\\\n-  (VAR) += *(VAR) == '*';\t\t\t\t\\\n-} while (0)\n \f\n /* PIC */\n \n@@ -1707,14 +1698,8 @@ do {\t\t\t\t\t\t\t\\\n /* This is how to output a reference to a user-level label named NAME.\n    `assemble_name' uses this.  */\n #undef  ASM_OUTPUT_LABELREF\n-#define ASM_OUTPUT_LABELREF(FILE, NAME) \t\\\n-  do\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\\\n-      const char * real_name;\t\t\t\\\n-      STRIP_NAME_ENCODING (real_name, (NAME));\t\\\n-      asm_fprintf (FILE, \"%U%s\", real_name);\t\\\n-    }\t\t\t\t\t\t\\\n-  while (0)           \n+#define ASM_OUTPUT_LABELREF(FILE, NAME) \\\n+  asm_fprintf (FILE, \"%U%s\", (*targetm.strip_name_encoding) (NAME))\n \n /* If -Os, don't force line number labels to begin at the beginning of\n    the word; we still want the assembler to try to put things in parallel,"}, {"sha": "ced4886231a2553c6266ff1713c524611da116ad", "filename": "gcc/config/mcore/mcore-elf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fmcore%2Fmcore-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fmcore%2Fmcore-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore-elf.h?ref=772c52657977a3d3bb3990d98a0b695c8eac6dc1", "patch": "@@ -67,7 +67,7 @@ exports_section ()\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\\\n       exports_section ();\t\t\t\t\\\n       fprintf (STREAM, \"\\t.ascii \\\" -export:%s\\\"\\n\",\t\\\n-\t       MCORE_STRIP_NAME_ENCODING (NAME));\t\\\n+\t       (* targetm.strip_name_encoding) (NAME));\t\\\n     }\t\t\t\t\t\t\t\\\n   while (0);\n "}, {"sha": "6668574458da22fcf2cee410bed80338d39a5850", "filename": "gcc/config/mcore/mcore-pe.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fmcore%2Fmcore-pe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fmcore%2Fmcore-pe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore-pe.h?ref=772c52657977a3d3bb3990d98a0b695c8eac6dc1", "patch": "@@ -69,7 +69,7 @@ drectve_section ()\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\\\n       drectve_section ();\t\t\t\t\\\n       fprintf (STREAM, \"\\t.ascii \\\" -export:%s\\\"\\n\",\t\\\n-\t       MCORE_STRIP_NAME_ENCODING (NAME));\t\\\n+\t       (* targetm.strip_name_encoding) (NAME));\t\\\n     }\t\t\t\t\t\t\t\\\n   while (0);\n "}, {"sha": "7276d813e2744b0e394736fbf050cc32a661a184", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=772c52657977a3d3bb3990d98a0b695c8eac6dc1", "patch": "@@ -139,6 +139,7 @@ static void\t  mcore_asm_named_section      PARAMS ((const char *,\n #endif\n static void       mcore_unique_section\t       PARAMS ((tree, int));\n static void mcore_encode_section_info\t\tPARAMS ((tree, int));\n+static const char *mcore_strip_name_encoding\tPARAMS ((const char *));\n \f\n /* Initialize the GCC target structure.  */\n #ifdef TARGET_DLLIMPORT_DECL_ATTRIBUTES\n@@ -159,6 +160,8 @@ static void mcore_encode_section_info\t\tPARAMS ((tree, int));\n #define TARGET_ASM_UNIQUE_SECTION mcore_unique_section\n #undef TARGET_ENCODE_SECTION_INFO\n #define TARGET_ENCODE_SECTION_INFO mcore_encode_section_info\n+#undef TARGET_STRIP_NAME_ENCODING\n+#define TARGET_STRIP_NAME_ENCODING mcore_strip_name_encoding\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n@@ -3467,6 +3470,15 @@ mcore_encode_section_info (decl, first)\n     }\n }\n \n+/* Undo the effects of the above.  */\n+\n+static const char *\n+mcore_strip_name_encoding (str)\n+     const char *str;\n+{\n+  return str + (str[0] == '@' ? 3 : 0);\n+}\n+\n /* MCore specific attribute support.\n    dllexport - for exporting a function/variable that will live in a dll\n    dllimport - for importing a function/variable from a dll\n@@ -3535,7 +3547,7 @@ mcore_unique_section (decl, reloc)\n   name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n   \n   /* Strip off any encoding in name.  */\n-  STRIP_NAME_ENCODING (name, name);\n+  name = (* targetm.strip_name_encoding) (name);\n \n   /* The object is put in, for example, section .text$foo.\n      The linker will then ultimately place them in .text"}, {"sha": "682039e3db65934ac41dd4a1248b294ef9740cad", "filename": "gcc/config/mcore/mcore.h", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fmcore%2Fmcore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fmcore%2Fmcore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.h?ref=772c52657977a3d3bb3990d98a0b695c8eac6dc1", "patch": "@@ -1119,8 +1119,8 @@ switch_to_section (section, decl)\t\t\t\t\\\n /* Output a reference to a label.  */\n #undef  ASM_OUTPUT_LABELREF\n #define ASM_OUTPUT_LABELREF(STREAM, NAME)  \\\n-  fprintf (STREAM, \"%s%s\", USER_LABEL_PREFIX, MCORE_STRIP_NAME_ENCODING (NAME))\n-\n+  fprintf (STREAM, \"%s%s\", USER_LABEL_PREFIX, \\\n+\t   (* targetm.strip_name_encoding) (NAME))\n \n /* This is how to output an assembler line\n    that says to advance the location counter\n@@ -1133,16 +1133,6 @@ switch_to_section (section, decl)\t\t\t\t\\\n #define ASM_DECLARE_RESULT(FILE, RESULT)\n #endif\n \n-/* Strip export encoding from a function name.  */\n-#define MCORE_STRIP_NAME_ENCODING(SYM_NAME) \\\n-  ((SYM_NAME) + ((SYM_NAME)[0] == '@' ? 3 : 0))\n-\n-/* Strip any text from SYM_NAME added by targetm.encode_section_info\n-   and store the result in VAR.  */\n-#undef  STRIP_NAME_ENCODING\n-#define STRIP_NAME_ENCODING(VAR, SYM_NAME) \\\n-  (VAR) = MCORE_STRIP_NAME_ENCODING (SYM_NAME)\n-\n #define MULTIPLE_SYMBOL_SPACES 1\n \n #define SUPPORTS_ONE_ONLY 1"}, {"sha": "9bcca17dcd36e6892a6fdeb249535428193fe254", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=772c52657977a3d3bb3990d98a0b695c8eac6dc1", "patch": "@@ -10285,8 +10285,8 @@ mips_unique_section (decl, reloc)\n   };\n \n   name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n+  name = (* targetm.strip_name_encoding) (name);\n   size = int_size_in_bytes (TREE_TYPE (decl));\n-  STRIP_NAME_ENCODING (name, name);\n \n   /* Determine the base section we are interested in:\n      0=text, 1=rodata, 2=data, 3=sdata, [4=bss].  */"}, {"sha": "51f91ee2b8933c0b210f3169299b012765fb22d6", "filename": "gcc/config/mmix/mmix-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h?ref=772c52657977a3d3bb3990d98a0b695c8eac6dc1", "patch": "@@ -33,7 +33,6 @@ extern int mmix_register_move_cost\n   PARAMS ((enum machine_mode, enum reg_class, enum reg_class));\n extern const char *mmix_text_section_asm_op PARAMS ((void));\n extern const char *mmix_data_section_asm_op PARAMS ((void));\n-extern const char *mmix_strip_name_encoding PARAMS ((const char *));\n extern void mmix_asm_file_start PARAMS ((FILE *));\n extern void mmix_asm_file_end PARAMS ((FILE *));\n extern void mmix_asm_output_source_filename PARAMS ((FILE *, const char *));"}, {"sha": "74c5b72903043a32c5256488b9d082f7eb45e8db", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=772c52657977a3d3bb3990d98a0b695c8eac6dc1", "patch": "@@ -99,6 +99,7 @@ static void mmix_output_octa PARAMS ((FILE *, HOST_WIDEST_INT, int));\n static bool mmix_assemble_integer PARAMS ((rtx, unsigned int, int));\n static void mmix_init_machine_status PARAMS ((struct function *));\n static void mmix_encode_section_info PARAMS ((tree, int));\n+static const char *mmix_strip_name_encoding PARAMS ((const char *));\n \n extern void mmix_target_asm_function_prologue\n   PARAMS ((FILE *, HOST_WIDE_INT));\n@@ -130,6 +131,8 @@ extern void mmix_target_asm_function_epilogue\n \n #undef TARGET_ENCODE_SECTION_INFO\n #define TARGET_ENCODE_SECTION_INFO  mmix_encode_section_info\n+#undef TARGET_STRIP_NAME_ENCODING\n+#define TARGET_STRIP_NAME_ENCODING  mmix_strip_name_encoding\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \n@@ -1768,9 +1771,7 @@ mmix_encode_section_info (decl, first)\n     }\n }\n \n-/* STRIP_NAME_ENCODING.  */\n-\n-const char *\n+static const char *\n mmix_strip_name_encoding (name)\n      const char *name;\n {"}, {"sha": "0f9d5b71698aa144758eba388be472fff9428d87", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=772c52657977a3d3bb3990d98a0b695c8eac6dc1", "patch": "@@ -907,9 +907,6 @@ typedef struct { int regs; int lib; int now_varargs; } CUMULATIVE_ARGS;\n \n #define READONLY_DATA_SECTION_ASM_OP\t\"\\t.section\\t.rodata\"\n \n-#define STRIP_NAME_ENCODING(VAR, SYM_NAME) \\\n- (VAR) = mmix_strip_name_encoding (SYM_NAME)\n-\n /* Node: PIC */\n /* (empty) */\n "}, {"sha": "16f5f829d1fbe14e5cfe6a804726239c1ff6242d", "filename": "gcc/config/mn10200/mn10200.h", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fmn10200%2Fmn10200.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fmn10200%2Fmn10200.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10200%2Fmn10200.h?ref=772c52657977a3d3bb3990d98a0b695c8eac6dc1", "patch": "@@ -830,12 +830,8 @@ struct cum_arg { int nbytes; };\n    `assemble_name' uses this.  */\n \n #undef ASM_OUTPUT_LABELREF\n-#define ASM_OUTPUT_LABELREF(FILE, NAME)\t          \\\n-  do {                                            \\\n-  const char* real_name;                          \\\n-  STRIP_NAME_ENCODING (real_name, (NAME));        \\\n-  fprintf (FILE, \"_%s\", real_name);               \\\n-  } while (0)           \n+#define ASM_OUTPUT_LABELREF(FILE, NAME) \\\n+  fprintf (FILE, \"_%s\", (*targetm.strip_name_encoding) (NAME))\n \n /* Store in OUTPUT a string (made with alloca) containing\n    an assembler-name for a local static variable named NAME."}, {"sha": "ddebedd4db4366288c7ce1cef68670ce9a4b069f", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=772c52657977a3d3bb3990d98a0b695c8eac6dc1", "patch": "@@ -911,12 +911,8 @@ struct cum_arg {int nbytes; };\n    `assemble_name' uses this.  */\n \n #undef ASM_OUTPUT_LABELREF\n-#define ASM_OUTPUT_LABELREF(FILE, NAME)\t          \\\n-  do {                                            \\\n-  const char* real_name;                          \\\n-  STRIP_NAME_ENCODING (real_name, (NAME));        \\\n-  fprintf (FILE, \"_%s\", real_name);               \\\n-  } while (0)           \n+#define ASM_OUTPUT_LABELREF(FILE, NAME) \\\n+  fprintf (FILE, \"_%s\", (*targetm.strip_name_encoding) (NAME))\n \n /* Store in OUTPUT a string (made with alloca) containing\n    an assembler-name for a local static variable named NAME."}, {"sha": "41e5dc05c78ff1e53d87ea7c66e8bbe69edf760f", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=772c52657977a3d3bb3990d98a0b695c8eac6dc1", "patch": "@@ -117,6 +117,7 @@ static int pa_issue_rate PARAMS ((void));\n static void pa_select_section PARAMS ((tree, int, unsigned HOST_WIDE_INT))\n      ATTRIBUTE_UNUSED;\n static void pa_encode_section_info PARAMS ((tree, int));\n+static const char *pa_strip_name_encoding PARAMS ((const char *));\n \n /* Save the operands last given to a compare for use when we\n    generate a scc or bcc insn.  */\n@@ -188,6 +189,8 @@ int n_deferred_plabels = 0;\n \n #undef TARGET_ENCODE_SECTION_INFO\n #define TARGET_ENCODE_SECTION_INFO pa_encode_section_info\n+#undef TARGET_STRIP_NAME_ENCODING\n+#define TARGET_STRIP_NAME_ENCODING pa_strip_name_encoding\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n@@ -6285,7 +6288,7 @@ output_call (insn, call_dest, sibcall)\n \n \t      /* Gross.  We have just implicitly taken the address of this\n \t\t function, mark it as such.  */\n-\t      STRIP_NAME_ENCODING (real_name, name);\n+\t      real_name = (*targetm.strip_name_encoding) (name);\n \t      TREE_SYMBOL_REFERENCED (get_identifier (real_name)) = 1;\n \t    }\n \n@@ -6460,6 +6463,15 @@ pa_encode_section_info (decl, first)\n     }\n }\n \n+/* This is sort of inverse to pa_encode_section_info.  */\n+\n+static const char *\n+pa_strip_name_encoding (str)\n+     const char *str;\n+{\n+  return str + (*str == '*' || *str == '@');\n+}\n+\n int\n function_label_operand (op, mode)\n      rtx op;"}, {"sha": "8f432c2cc0ebf26486dd2f9b778df4d426a5546d", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 72, "deletions": 78, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=772c52657977a3d3bb3990d98a0b695c8eac6dc1", "patch": "@@ -864,79 +864,80 @@ struct hppa_args {int words, nargs_prototype, indirect; };\n extern struct rtx_def *hppa_compare_op0, *hppa_compare_op1;\n extern enum cmp_type hppa_branch_type;\n \n-#define ASM_OUTPUT_MI_THUNK(FILE, THUNK_FNDECL, DELTA, FUNCTION) \\\n-{ const char *target_name = XSTR (XEXP (DECL_RTL (FUNCTION), 0), 0); \\\n-  static unsigned int current_thunk_number; \\\n-  char label[16]; \\\n-  char *lab; \\\n-  ASM_GENERATE_INTERNAL_LABEL (label, \"LTHN\", current_thunk_number); \\\n-  STRIP_NAME_ENCODING (lab, label); \\\n-  STRIP_NAME_ENCODING (target_name, target_name); \\\n-  /* FIXME: total_code_bytes is not handled correctly in files with \\\n-     mi thunks.  */ \\\n-  pa_output_function_prologue (FILE, 0); \\\n-  if (VAL_14_BITS_P (DELTA)) \\\n-    { \\\n-      if (! TARGET_64BIT && ! TARGET_PORTABLE_RUNTIME && flag_pic) \\\n-\t{ \\\n-\t  fprintf (FILE, \"\\taddil LT%%%s,%%r19\\n\", lab); \\\n-\t  fprintf (FILE, \"\\tldw RT%%%s(%%r1),%%r22\\n\", lab); \\\n-\t  fprintf (FILE, \"\\tldw 0(%%sr0,%%r22),%%r22\\n\"); \\\n-\t  fprintf (FILE, \"\\tbb,>=,n %%r22,30,.+16\\n\"); \\\n-\t  fprintf (FILE, \"\\tdepi 0,31,2,%%r22\\n\"); \\\n-\t  fprintf (FILE, \"\\tldw 4(%%sr0,%%r22),%%r19\\n\"); \\\n-\t  fprintf (FILE, \"\\tldw 0(%%sr0,%%r22),%%r22\\n\"); \\\n+#define ASM_OUTPUT_MI_THUNK(FILE, THUNK_FNDECL, DELTA, FUNCTION)\t     \\\n+do {\t\t\t\t\t\t\t\t\t     \\\n+  const char *target_name = XSTR (XEXP (DECL_RTL (FUNCTION), 0), 0);\t     \\\n+  static unsigned int current_thunk_number;\t\t\t\t     \\\n+  char label[16];\t\t\t\t\t\t\t     \\\n+  char *lab;\t\t\t\t\t\t\t\t     \\\n+  ASM_GENERATE_INTERNAL_LABEL (label, \"LTHN\", current_thunk_number);\t     \\\n+  lab = (*targetm.strip_name_encoding) (label);\t\t\t\t     \\\n+  target_name = (*targetm.strip_name_encoding) (target_name);\t\t     \\\n+  /* FIXME: total_code_bytes is not handled correctly in files with\t     \\\n+     mi thunks.  */\t\t\t\t\t\t\t     \\\n+  pa_output_function_prologue (FILE, 0);\t\t\t\t     \\\n+  if (VAL_14_BITS_P (DELTA))\t\t\t\t\t\t     \\\n+    {\t\t\t\t\t\t\t\t\t     \\\n+      if (! TARGET_64BIT && ! TARGET_PORTABLE_RUNTIME && flag_pic)\t     \\\n+\t{\t\t\t\t\t\t\t\t     \\\n+\t  fprintf (FILE, \"\\taddil LT%%%s,%%r19\\n\", lab);\t\t     \\\n+\t  fprintf (FILE, \"\\tldw RT%%%s(%%r1),%%r22\\n\", lab);\t\t     \\\n+\t  fprintf (FILE, \"\\tldw 0(%%sr0,%%r22),%%r22\\n\");\t\t     \\\n+\t  fprintf (FILE, \"\\tbb,>=,n %%r22,30,.+16\\n\");\t\t\t     \\\n+\t  fprintf (FILE, \"\\tdepi 0,31,2,%%r22\\n\");\t\t\t     \\\n+\t  fprintf (FILE, \"\\tldw 4(%%sr0,%%r22),%%r19\\n\");\t\t     \\\n+\t  fprintf (FILE, \"\\tldw 0(%%sr0,%%r22),%%r22\\n\");\t\t     \\\n \t  fprintf (FILE, \"\\tldsid (%%sr0,%%r22),%%r1\\n\\tmtsp %%r1,%%sr0\\n\"); \\\n-\t  fprintf (FILE, \"\\tbe 0(%%sr0,%%r22)\\n\\tldo \"); \\\n-\t  fprintf (FILE, HOST_WIDE_INT_PRINT_DEC, DELTA); \\\n-\t  fprintf (FILE, \"(%%r26),%%r26\\n\"); \\\n-\t} \\\n-      else \\\n-\t{ \\\n-\t  fprintf (FILE, \"\\tb %s\\n\\tldo \", target_name); \\\n-\t  fprintf (FILE, HOST_WIDE_INT_PRINT_DEC, DELTA); \\\n-\t  fprintf (FILE, \"(%%r26),%%r26\\n\"); \\\n-\t} \\\n-    } \\\n-  else \\\n-    { \\\n-      if (! TARGET_64BIT && ! TARGET_PORTABLE_RUNTIME && flag_pic) \\\n-\t{ \\\n-\t  fprintf (FILE, \"\\taddil L%%\"); \\\n-\t  fprintf (FILE, HOST_WIDE_INT_PRINT_DEC, DELTA); \\\n-\t  fprintf (FILE, \",%%r26\\n\\tldo R%%\"); \\\n-\t  fprintf (FILE, HOST_WIDE_INT_PRINT_DEC, DELTA); \\\n-\t  fprintf (FILE, \"(%%r1),%%r26\\n\"); \\\n-\t  fprintf (FILE, \"\\taddil LT%%%s,%%r19\\n\", lab); \\\n-\t  fprintf (FILE, \"\\tldw RT%%%s(%%r1),%%r22\\n\", lab); \\\n-\t  fprintf (FILE, \"\\tldw 0(%%sr0,%%r22),%%r22\\n\"); \\\n-\t  fprintf (FILE, \"\\tbb,>=,n %%r22,30,.+16\\n\"); \\\n-\t  fprintf (FILE, \"\\tdepi 0,31,2,%%r22\\n\"); \\\n-\t  fprintf (FILE, \"\\tldw 4(%%sr0,%%r22),%%r19\\n\"); \\\n-\t  fprintf (FILE, \"\\tldw 0(%%sr0,%%r22),%%r22\\n\"); \\\n+\t  fprintf (FILE, \"\\tbe 0(%%sr0,%%r22)\\n\\tldo \");\t\t     \\\n+\t  fprintf (FILE, HOST_WIDE_INT_PRINT_DEC, DELTA);\t\t     \\\n+\t  fprintf (FILE, \"(%%r26),%%r26\\n\");\t\t\t\t     \\\n+\t}\t\t\t\t\t\t\t\t     \\\n+      else\t\t\t\t\t\t\t\t     \\\n+\t{\t\t\t\t\t\t\t\t     \\\n+\t  fprintf (FILE, \"\\tb %s\\n\\tldo \", target_name);\t\t     \\\n+\t  fprintf (FILE, HOST_WIDE_INT_PRINT_DEC, DELTA);\t\t     \\\n+\t  fprintf (FILE, \"(%%r26),%%r26\\n\");\t\t\t\t     \\\n+\t}\t\t\t\t\t\t\t\t     \\\n+    }\t\t\t\t\t\t\t\t\t     \\\n+  else\t\t\t\t\t\t\t\t\t     \\\n+    {\t\t\t\t\t\t\t\t\t     \\\n+      if (! TARGET_64BIT && ! TARGET_PORTABLE_RUNTIME && flag_pic)\t     \\\n+\t{\t\t\t\t\t\t\t\t     \\\n+\t  fprintf (FILE, \"\\taddil L%%\");\t\t\t\t     \\\n+\t  fprintf (FILE, HOST_WIDE_INT_PRINT_DEC, DELTA);\t\t     \\\n+\t  fprintf (FILE, \",%%r26\\n\\tldo R%%\");\t\t\t\t     \\\n+\t  fprintf (FILE, HOST_WIDE_INT_PRINT_DEC, DELTA);\t\t     \\\n+\t  fprintf (FILE, \"(%%r1),%%r26\\n\");\t\t\t\t     \\\n+\t  fprintf (FILE, \"\\taddil LT%%%s,%%r19\\n\", lab);\t\t     \\\n+\t  fprintf (FILE, \"\\tldw RT%%%s(%%r1),%%r22\\n\", lab);\t\t     \\\n+\t  fprintf (FILE, \"\\tldw 0(%%sr0,%%r22),%%r22\\n\");\t\t     \\\n+\t  fprintf (FILE, \"\\tbb,>=,n %%r22,30,.+16\\n\");\t\t\t     \\\n+\t  fprintf (FILE, \"\\tdepi 0,31,2,%%r22\\n\");\t\t\t     \\\n+\t  fprintf (FILE, \"\\tldw 4(%%sr0,%%r22),%%r19\\n\");\t\t     \\\n+\t  fprintf (FILE, \"\\tldw 0(%%sr0,%%r22),%%r22\\n\");\t\t     \\\n \t  fprintf (FILE, \"\\tldsid (%%sr0,%%r22),%%r1\\n\\tmtsp %%r1,%%sr0\\n\"); \\\n-\t  fprintf (FILE, \"\\tbe,n 0(%%sr0,%%r22)\\n\"); \\\n-\t} \\\n-      else \\\n-\t{ \\\n-\t  fprintf (FILE, \"\\taddil L%%\"); \\\n-\t  fprintf (FILE, HOST_WIDE_INT_PRINT_DEC, DELTA); \\\n-\t  fprintf (FILE, \",%%r26\\n\\tb %s\\n\\tldo R%%\", target_name); \\\n-\t  fprintf (FILE, HOST_WIDE_INT_PRINT_DEC, DELTA); \\\n-\t  fprintf (FILE, \"(%%r1),%%r26\\n\"); \\\n-\t} \\\n-    } \\\n-  fprintf (FILE, \"\\t.EXIT\\n\\t.PROCEND\\n\"); \\\n-  if (! TARGET_64BIT && ! TARGET_PORTABLE_RUNTIME && flag_pic) \\\n-    { \\\n-      data_section (); \\\n-      fprintf (FILE, \"\\t.align 4\\n\"); \\\n-      ASM_OUTPUT_INTERNAL_LABEL (FILE, \"LTHN\", current_thunk_number); \\\n-      fprintf (FILE, \"\\t.word P%%%s\\n\", target_name); \\\n-      function_section (THUNK_FNDECL); \\\n-    } \\\n-  current_thunk_number++; \\\n-}\n+\t  fprintf (FILE, \"\\tbe,n 0(%%sr0,%%r22)\\n\");\t\t\t     \\\n+\t}\t\t\t\t\t\t\t\t     \\\n+      else\t\t\t\t\t\t\t\t     \\\n+\t{\t\t\t\t\t\t\t\t     \\\n+\t  fprintf (FILE, \"\\taddil L%%\");\t\t\t\t     \\\n+\t  fprintf (FILE, HOST_WIDE_INT_PRINT_DEC, DELTA);\t\t     \\\n+\t  fprintf (FILE, \",%%r26\\n\\tb %s\\n\\tldo R%%\", target_name);\t     \\\n+\t  fprintf (FILE, HOST_WIDE_INT_PRINT_DEC, DELTA);\t\t     \\\n+\t  fprintf (FILE, \"(%%r1),%%r26\\n\");\t\t\t\t     \\\n+\t}\t\t\t\t\t\t\t\t     \\\n+    }\t\t\t\t\t\t\t\t\t     \\\n+  fprintf (FILE, \"\\t.EXIT\\n\\t.PROCEND\\n\");\t\t\t\t     \\\n+  if (! TARGET_64BIT && ! TARGET_PORTABLE_RUNTIME && flag_pic)\t\t     \\\n+    {\t\t\t\t\t\t\t\t\t     \\\n+      data_section ();\t\t\t\t\t\t\t     \\\n+      fprintf (FILE, \"\\t.align 4\\n\");\t\t\t\t\t     \\\n+      ASM_OUTPUT_INTERNAL_LABEL (FILE, \"LTHN\", current_thunk_number);\t     \\\n+      fprintf (FILE, \"\\t.word P%%%s\\n\", target_name);\t\t\t     \\\n+      function_section (THUNK_FNDECL);\t\t\t\t\t     \\\n+    }\t\t\t\t\t\t\t\t\t     \\\n+  current_thunk_number++;\t\t\t\t\t\t     \\\n+} while (0)\n \n /* On HPPA, we emit profiling code as rtl via PROFILE_HOOK rather than\n    as assembly via FUNCTION_PROFILER.  Just output a local label.\n@@ -1522,13 +1523,6 @@ do { \t\t\t\t\t\t\t\t\t\\\n \n #define FUNCTION_NAME_P(NAME)  (*(NAME) == '@')\n \n-/* Store the user-specified part of SYMBOL_NAME in VAR.\n-   This is sort of inverse to targetm.encode_section_info.  */\n-\n-#define STRIP_NAME_ENCODING(VAR,SYMBOL_NAME)\t\\\n-  (VAR) = ((SYMBOL_NAME)\t\t\t\\\n-\t   + (*(SYMBOL_NAME) == '*' || *(SYMBOL_NAME) == '@'))\n-\n /* Specify the machine mode that this machine uses\n    for the index in the tablejump instruction.  */\n #define CASE_VECTOR_MODE (TARGET_BIG_SWITCH ? TImode : DImode)"}, {"sha": "9f0a964f32d37a445501bfd035424fcb73b2dfe5", "filename": "gcc/config/pa/som.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fpa%2Fsom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fpa%2Fsom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fsom.h?ref=772c52657977a3d3bb3990d98a0b695c8eac6dc1", "patch": "@@ -131,8 +131,7 @@ do {\t\t\t\t\t\t\t\t\\\n    that the section name will have a \".\" prefix.  */\n #define ASM_OUTPUT_FUNCTION_PREFIX(FILE, NAME) \\\n   {\t\t\t\t\t\t\t\t\t\\\n-    const char *name;\t\t\t\t\t\t\t\\\n-    STRIP_NAME_ENCODING (name, NAME);\t\t\t\t\t\\\n+    const char *name = (*targetm.strip_name_encoding) (NAME);\t\t\\\n     if (TARGET_GAS && in_section == in_text) \t\t\t\t\\\n       fputs (\"\\t.NSUBSPA $CODE$,QUAD=0,ALIGN=8,ACCESS=44,CODE_ONLY\\n\", FILE); \\\n     else if (TARGET_GAS)\t\t\t\t\t\t\\\n@@ -335,7 +334,7 @@ readonly_data ()\t\t\t\t\t\t\t\\\n        if (!function_label_operand (RTL, VOIDmode))\t\t\t\\\n \t hppa_encode_label (RTL);\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-       STRIP_NAME_ENCODING (name, XSTR ((RTL), 0));\t\t\t\\\n+       name = (*targetm.strip_name_encoding) (XSTR ((RTL), 0));\t\t\\\n        id = maybe_get_identifier (name);\t\t\t\t\\\n        if (! id || ! TREE_SYMBOL_REFERENCED (id))\t\t\t\\\n \t {\t\t\t\t\t\t\t\t\\"}, {"sha": "1a65a772271bbb7722a1388120643da144976bc3", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=772c52657977a3d3bb3990d98a0b695c8eac6dc1", "patch": "@@ -169,6 +169,7 @@ static void rs6000_elf_unique_section PARAMS ((tree, int));\n static void rs6000_elf_select_rtx_section PARAMS ((enum machine_mode, rtx,\n \t\t\t\t\t\t   unsigned HOST_WIDE_INT));\n static void rs6000_elf_encode_section_info PARAMS ((tree, int));\n+static const char *rs6000_elf_strip_name_encoding PARAMS ((const char *));\n #endif\n #ifdef OBJECT_FORMAT_COFF\n static void xcoff_asm_named_section PARAMS ((const char *, unsigned int));\n@@ -177,6 +178,7 @@ static void rs6000_xcoff_select_section PARAMS ((tree, int,\n static void rs6000_xcoff_unique_section PARAMS ((tree, int));\n static void rs6000_xcoff_select_rtx_section PARAMS ((enum machine_mode, rtx,\n \t\t\t\t\t\t     unsigned HOST_WIDE_INT));\n+static const char * rs6000_xcoff_strip_name_encoding PARAMS ((const char *));\n #endif\n static void rs6000_xcoff_encode_section_info PARAMS ((tree, int))\n      ATTRIBUTE_UNUSED;\n@@ -10385,7 +10387,7 @@ output_toc (file, x, labelno, mode)\n   else\n     abort ();\n \n-  STRIP_NAME_ENCODING (real_name, name);\n+  real_name = (*targetm.strip_name_encoding) (name);\n   if (TARGET_MINIMAL_TOC)\n     fputs (TARGET_32BIT ? \"\\t.long \" : DOUBLE_INT_ASM_OP, file);\n   else\n@@ -10557,7 +10559,7 @@ output_profile_hook (labelno)\n       rtx fun;\n \n       ASM_GENERATE_INTERNAL_LABEL (buf, \"LP\", labelno);\n-      STRIP_NAME_ENCODING (label_name, ggc_strdup (buf));\n+      label_name = (*targetm.strip_name_encoding) (ggc_strdup (buf));\n       fun = gen_rtx_SYMBOL_REF (Pmode, label_name);\n \n       emit_library_call (init_one_libfunc (RS6000_MCOUNT), 0, VOIDmode, 1,\n@@ -11075,7 +11077,8 @@ rs6000_elf_unique_section (decl, reloc)\n \t}\n     }\n \n-  STRIP_NAME_ENCODING (name, IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl)));\n+  name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n+  name = (*targetm.strip_name_encoding) (name);\n   prefix = prefixes[sec][DECL_ONE_ONLY (decl)];\n   len    = strlen (name) + strlen (prefix);\n   string = alloca (len + 1);\n@@ -11167,6 +11170,15 @@ rs6000_elf_encode_section_info (decl, first)\n     }\n }\n \n+static const char *\n+rs6000_elf_strip_name_encoding (str)\n+     const char *str;\n+{\n+  while (*str == '*' || *str == '@')\n+    str++;\n+  return str;\n+}\n+\n #endif /* USING_ELFOS_H */\n \n \f\n@@ -11432,7 +11444,7 @@ machopic_output_stub (file, symb, stub)\n   static int label = 0;\n \n   /* Lose our funky encoding stuff so it doesn't contaminate the stub.  */\n-  STRIP_NAME_ENCODING (symb, symb);\n+  symb = (*targetm.strip_name_encoding) (symb);\n \n   label += 1;\n \n@@ -11671,7 +11683,7 @@ rs6000_xcoff_select_section (exp, reloc, align)\n static void\n rs6000_xcoff_unique_section (decl, reloc)\n      tree decl;\n-     int reloc;\n+     int reloc ATTRIBUTE_UNUSED;\n {\n   const char *name;\n   char *string;\n@@ -11704,6 +11716,23 @@ rs6000_xcoff_select_rtx_section (mode, x, align)\n   else\n     read_only_private_data_section ();\n }\n+\n+/* Remove any trailing [DS] or the like from the symbol name.  */\n+\n+static const char *\n+rs6000_xcoff_strip_name_encoding (name)\n+     const char *name;\n+{\n+  size_t len;\n+  if (*name == '*')\n+    name++;\n+  len = strlen (name);\n+  if (name[len - 1] == ']')\n+    return ggc_alloc_string (name, len - 4);\n+  else\n+    return name;\n+}\n+\n #endif /* OBJECT_FORMAT_COFF */\n \n /* Note that this is also used for ELF64.  */"}, {"sha": "8aee2e22a857313a342344bb5b503b1e478f54a5", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=772c52657977a3d3bb3990d98a0b695c8eac6dc1", "patch": "@@ -625,7 +625,7 @@ extern int rs6000_pic_labelno;\n       {\t\t\t\t\t\t\t\t\t\\\n \tconst char *desc_name, *orig_name;\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-        STRIP_NAME_ENCODING (orig_name, NAME);\t\t\t\t\\\n+        orig_name = (*targetm.strip_name_encoding) (NAME);\t\t\\\n         desc_name = orig_name;\t\t\t\t\t\t\\\n \twhile (*desc_name == '.')\t\t\t\t\t\\\n \t  desc_name++;\t\t\t\t\t\t\t\\\n@@ -776,25 +776,14 @@ extern int fixuplabelno;\n /* Historically we have also supported stabs debugging.  */\n #define\tDBX_DEBUGGING_INFO\n \n-#undef\tTARGET_ENCODE_SECTION_INFO\n #define\tTARGET_ENCODE_SECTION_INFO  rs6000_elf_encode_section_info\n+#define\tTARGET_STRIP_NAME_ENCODING  rs6000_elf_strip_name_encoding\n \n /* The ELF version doesn't encode [DS] or whatever at the end of symbols.  */\n \n #define\tRS6000_OUTPUT_BASENAME(FILE, NAME)\t\\\n     assemble_name (FILE, NAME)\n \n-/* This macro gets just the user-specified name\n-   out of the string in a SYMBOL_REF.  Discard\n-   a leading * or @.  */\n-#define\tSTRIP_NAME_ENCODING(VAR,SYMBOL_NAME)\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  const char *_name = SYMBOL_NAME;\t\t\t\t\t\\\n-  while (*_name == '*' || *_name == '@')\t\t\t\t\\\n-    _name++;\t\t\t\t\t\t\t\t\\\n-  (VAR) = _name;\t\t\t\t\t\t\t\\\n-} while (0)\n-\n /* This is how to output a reference to a user-level label named NAME.\n    `assemble_name' uses this.  */\n "}, {"sha": "90f27276b6ad593f49598b6d2c620202080f1322", "filename": "gcc/config/rs6000/xcoff.h", "status": "modified", "additions": 3, "deletions": 29, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Frs6000%2Fxcoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Frs6000%2Fxcoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fxcoff.h?ref=772c52657977a3d3bb3990d98a0b695c8eac6dc1", "patch": "@@ -163,6 +163,7 @@ toc_section ()\t\t\t\t\t\t\\\n \n #define TARGET_ASM_SELECT_RTX_SECTION  rs6000_xcoff_select_rtx_section\n #define TARGET_ENCODE_SECTION_INFO rs6000_xcoff_encode_section_info\n+#define TARGET_STRIP_NAME_ENCODING rs6000_xcoff_strip_name_encoding\n \n /* FP save and restore routines.  */\n #define\tSAVE_FP_PREFIX \"._savef\"\n@@ -183,13 +184,8 @@ toc_section ()\t\t\t\t\t\t\\\n \n /* This outputs NAME to FILE up to the first null or '['.  */\n \n-#define RS6000_OUTPUT_BASENAME(FILE, NAME)\t\\\n-  {\t\t\t\t\t\t\\\n-    const char *_p;\t\t\t\t\\\n-\t\t\t\t\t\t\\\n-    STRIP_NAME_ENCODING (_p, (NAME));\t\t\\\n-    assemble_name ((FILE), _p);\t\t\t\\\n-  }\n+#define RS6000_OUTPUT_BASENAME(FILE, NAME) \\\n+  assemble_name ((FILE), (*targetm.strip_name_encoding) (NAME))\n \n /* This is how to output the definition of a user-level label named NAME,\n    such as the label on a static function or variable NAME.  */\n@@ -204,28 +200,6 @@ toc_section ()\t\t\t\t\t\t\\\n   do { fputs (\"\\t.globl \", FILE);\t\\\n        RS6000_OUTPUT_BASENAME (FILE, NAME); putc ('\\n', FILE);} while (0)\n \n-/* Remove any trailing [DS] or the like from the symbol name.  */\n-\n-#define STRIP_NAME_ENCODING(VAR,NAME)\t\t\t\\\n-  do\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\\\n-      const char *_name = (NAME);\t\t\t\\\n-      size_t _len;\t\t\t\t\t\\\n-      if (*_name == '*')\t\t\t\t\\\n-        _name++;\t\t\t\t\t\\\n-      _len = strlen (_name);\t\t\t\t\\\n-      if (_name[_len - 1] != ']')\t\t\t\\\n-\t(VAR) = _name;\t\t\t\t\t\\\n-      else\t\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\\\n-\t  char *_new_name = (char *) alloca (_len + 1);\t\\\n-\t  strcpy (_new_name, _name);\t\t\t\\\n-\t  _new_name[_len - 4] = '\\0';\t\t\t\\\n-\t  (VAR) = _new_name;\t\t\t\t\\\n-\t}\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\\\n-  while (0)\n-\n /* Output at beginning of assembler file.\n \n    Initialize the section names for the RS/6000 at this point."}, {"sha": "0dafbc32d11a0089874ef83907769a584b8f043e", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=772c52657977a3d3bb3990d98a0b695c8eac6dc1", "patch": "@@ -204,6 +204,7 @@ static bool sh_cannot_modify_jumps_p PARAMS ((void));\n static bool sh_ms_bitfield_layout_p PARAMS ((tree));\n \n static void sh_encode_section_info PARAMS ((tree, int));\n+static const char *sh_strip_name_encoding PARAMS ((const char *));\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ATTRIBUTE_TABLE\n@@ -242,6 +243,11 @@ static void sh_encode_section_info PARAMS ((tree, int));\n #undef TARGET_MS_BITFIELD_LAYOUT_P\n #define TARGET_MS_BITFIELD_LAYOUT_P sh_ms_bitfield_layout_p\n \n+#undef TARGET_ENCODE_SECTION_INFO\n+#define TARGET_ENCODE_SECTION_INFO sh_encode_section_info\n+#undef TARGET_STRIP_NAME_ENCODING\n+#define TARGET_STRIP_NAME_ENCODING sh_strip_name_encoding\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Print the operand address in x to the stream.  */\n@@ -6820,3 +6826,14 @@ sh_encode_section_info (decl, first)\n   if (TARGET_SH5 && first && TREE_CODE (decl) != FUNCTION_DECL)\n     XEXP (rtl, 0) = gen_datalabel_ref (symbol);\n }\n+\n+/* Undo the effects of the above.  */\n+\n+static const char *\n+sh_strip_name_encoding (str)\n+     const char *str;\n+{\n+  STRIP_DATALABEL_ENCODING (str, str);\n+  str += *str == '*';\n+  return str;\n+}"}, {"sha": "c8e0c08cf2e5ef4e75e98a01ddd9304b4ad75f08", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=772c52657977a3d3bb3990d98a0b695c8eac6dc1", "patch": "@@ -2681,9 +2681,6 @@ while (0)\n #define STRIP_DATALABEL_ENCODING(VAR, SYM_NAME) \\\n   (VAR) = (SYM_NAME) + (DATALABEL_SYMNAME_P (SYM_NAME) \\\n \t\t\t? strlen (SH_DATALABEL_ENCODING) : 0)\n-#define STRIP_NAME_ENCODING(VAR, SYM_NAME) \\\n-  STRIP_DATALABEL_ENCODING((VAR), (SYM_NAME)), \\\n-  (VAR) += (*(VAR) == '*')\n \n /* We can't directly access anything that contains a symbol,\n    nor can we indirect via the constant pool.  */"}, {"sha": "7a6b166aec771527d49ba4ecd3551618667705cb", "filename": "gcc/config/stormy16/stormy16.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.h?ref=772c52657977a3d3bb3990d98a0b695c8eac6dc1", "patch": "@@ -2489,10 +2489,6 @@ do {\t\t\t\t\t\t\t\\\n \n    This macro is irrelevant if there is no separate readonly data section.  */\n #define JUMP_TABLES_IN_TEXT_SECTION 1\n-\n-/* Decode SYM_NAME and store the real name part in VAR, sans the characters\n-   that encode section info.  */\n-/* #define STRIP_NAME_ENCODING(VAR, SYM_NAME) */\n \f\n /* Position Independent Code.  */\n "}, {"sha": "e65dae596cbe8e299b6fa66ef9c89bfe19e656f1", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=772c52657977a3d3bb3990d98a0b695c8eac6dc1", "patch": "@@ -61,6 +61,7 @@ static void v850_insert_attributes   PARAMS ((tree, tree *));\n static void v850_select_section PARAMS ((tree, int, unsigned HOST_WIDE_INT));\n static void v850_encode_data_area    PARAMS ((tree));\n static void v850_encode_section_info PARAMS ((tree, int));\n+static const char *v850_strip_name_encoding PARAMS ((const char *));\n \n /* True if the current function has anonymous arguments.  */\n int current_function_anonymous_args;\n@@ -104,6 +105,8 @@ static int v850_interrupt_p = FALSE;\n \n #undef TARGET_ENCODE_SECTION_INFO\n #define TARGET_ENCODE_SECTION_INFO v850_encode_section_info\n+#undef TARGET_STRIP_NAME_ENCODING\n+#define TARGET_STRIP_NAME_ENCODING v850_strip_name_encoding\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n@@ -2218,6 +2221,13 @@ v850_encode_section_info (decl, first)\n     v850_encode_data_area (decl);\n }\n \n+static const char *\n+v850_strip_name_encoding (str)\n+     const char *str;\n+{\n+  return str + (ENCODED_NAME_P (str) || *str == '*');\n+}\n+\n /* Return true if the given RTX is a register which can be restored\n    by a function epilogue.  */\n int"}, {"sha": "bb753adbd7ae939ff437132fac555a332954bbc8", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=772c52657977a3d3bb3990d98a0b695c8eac6dc1", "patch": "@@ -1194,13 +1194,8 @@ zbss_section ()\t\t\t\t\t\t\t\t\\\n    `assemble_name' uses this.  */\n \n #undef ASM_OUTPUT_LABELREF\n-#define ASM_OUTPUT_LABELREF(FILE, NAME)           \\\n-  do {                                            \\\n-  const char* real_name;                          \\\n-  STRIP_NAME_ENCODING (real_name, (NAME));        \\\n-  asm_fprintf (FILE, \"%U%s\", real_name);          \\\n-  } while (0)\n-\n+#define ASM_OUTPUT_LABELREF(FILE, NAME) \\\n+  asm_fprintf (FILE, \"%U%s\", (*targetm.strip_name_encoding) (NAME))\n \n /* Store in OUTPUT a string (made with alloca) containing\n    an assembler-name for a local static variable named NAME.\n@@ -1427,9 +1422,6 @@ extern union tree_node * GHS_current_section_names [(int) COUNT_OF_GHS_SECTION_K\n    || TDA_NAME_P (SYMBOL_NAME)         \\\n    || SDA_NAME_P (SYMBOL_NAME))\n \n-#define STRIP_NAME_ENCODING(VAR, SYMBOL_NAME) \\\n-     (VAR) = (SYMBOL_NAME) + (ENCODED_NAME_P (SYMBOL_NAME) || *(SYMBOL_NAME) == '*')\n-\n /* Define this if you have defined special-purpose predicates in the\n    file `MACHINE.c'.  This macro is called within an initializer of an\n    array of structures.  The first field in the structure is the name"}, {"sha": "86971843b9d132ab3a0140fed1b033dec7977e42", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=772c52657977a3d3bb3990d98a0b695c8eac6dc1", "patch": "@@ -4781,8 +4781,8 @@ The best way to modify the name string is by adding text to the\n beginning, with suitable punctuation to prevent any ambiguity.  Allocate\n the new name in @code{saveable_obstack}.  You will have to modify\n @code{ASM_OUTPUT_LABELREF} to remove and decode the added text and\n-output the name accordingly, and define @code{STRIP_NAME_ENCODING} to\n-access the original name string.\n+output the name accordingly, and define @code{TARGET_STRIP_NAME_ENCODING}\n+to access the original name string.\n \n You can check the information stored here into the @code{symbol_ref} in\n the definitions of the macros @code{GO_IF_LEGITIMATE_ADDRESS} and\n@@ -5765,12 +5765,6 @@ section, along with the assembler instructions.  Otherwise, the\n readonly data section is used.\n \n This macro is irrelevant if there is no separate readonly data section.\n-\n-@findex STRIP_NAME_ENCODING\n-@item STRIP_NAME_ENCODING (@var{var}, @var{sym_name})\n-Decode @var{sym_name} and store the real name part in @var{var}, sans\n-the characters that encode section info.  Define this macro if\n-@code{TARGET_ENCODE_SECTION_INFO} alters the symbol's name string.\n @end table\n \n @deftypefn {Target Hook} void TARGET_ASM_SELECT_SECTION (tree @var{exp}, int @var{reloc}, unsigned HOST_WIDE_INT @var{align})\n@@ -5838,6 +5832,12 @@ modified name string in the @code{symbol_ref} (if one bit is not\n enough information).\n @end deftypefn\n \n+@deftypefn {Target Hook} const char *TARGET_STRIP_NAME_ENCODING (const char *name)\n+Decode @var{name} and return the real name part, sans\n+the characters that @code{TARGET_ENCODE_SECTION_INFO}\n+may have added.\n+@end deftypefn\n+\n @node PIC\n @section Position Independent Code\n @cindex position independent code"}, {"sha": "80be6513721d0f43c313de98dea1c10e449d725e", "filename": "gcc/dwarf2asm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fdwarf2asm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fdwarf2asm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2asm.c?ref=772c52657977a3d3bb3990d98a0b695c8eac6dc1", "patch": "@@ -739,7 +739,7 @@ dw2_force_const_mem (x)\n   if (GET_CODE (x) != SYMBOL_REF)\n     abort ();\n \n-  STRIP_NAME_ENCODING (str, XSTR (x, 0));\n+  str = (* targetm.strip_name_encoding) (XSTR (x, 0));\n   node = splay_tree_lookup (indirect_pool, (splay_tree_key) str);\n   if (node)\n     decl = (tree) node->value;"}, {"sha": "e274f43bc26b235c267988cdbe7bd8fcf5bf9511", "filename": "gcc/output.h", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=772c52657977a3d3bb3990d98a0b695c8eac6dc1", "patch": "@@ -482,14 +482,6 @@ extern rtx this_is_asm_operands;\n /* User label prefix in effect for this compilation.  */\n extern const char *user_label_prefix;\n \n-/* This macro gets just the user-specified name\n-   out of the string in a SYMBOL_REF.  On most machines,\n-   we discard the * if any and that's all.  */\n-#ifndef STRIP_NAME_ENCODING\n-#define STRIP_NAME_ENCODING(VAR,SYMBOL_NAME) \\\n-  (VAR) = ((SYMBOL_NAME) + ((SYMBOL_NAME)[0] == '*'))\n-#endif\n-\n /* Default target function prologue and epilogue assembler output.  */\n extern void default_function_pro_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n \n@@ -552,6 +544,8 @@ extern void default_select_rtx_section PARAMS ((enum machine_mode, rtx,\n \t\t\t\t\t\tunsigned HOST_WIDE_INT));\n extern void default_elf_select_rtx_section PARAMS ((enum machine_mode, rtx,\n \t\t\t\t\t\t    unsigned HOST_WIDE_INT));\n+extern const char *default_strip_name_encoding PARAMS ((const char *));\n+\n /* Emit data for vtable gc for GNU binutils.  */\n extern void assemble_vtable_entry PARAMS ((struct rtx_def *, HOST_WIDE_INT));\n extern void assemble_vtable_inherit PARAMS ((struct rtx_def *,"}, {"sha": "465c47c285deee807c87ab1507ffc03ac15feaae", "filename": "gcc/system.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=772c52657977a3d3bb3990d98a0b695c8eac6dc1", "patch": "@@ -596,7 +596,7 @@ typedef char _Bool;\n \tMD_INIT_BUILTINS MD_EXPAND_BUILTIN ASM_OUTPUT_CONSTRUCTOR\t\\\n \tASM_OUTPUT_DESTRUCTOR SIGNED_CHAR_SPEC MAX_CHAR_TYPE_SIZE\t\\\n \tWCHAR_UNSIGNED UNIQUE_SECTION SELECT_SECTION SELECT_RTX_SECTION\t\\\n-\tENCODE_SECTION_INFO\n+\tENCODE_SECTION_INFO STRIP_NAME_ENCODING\n \n /* And other obsolete target macros, or macros that used to be in target\n    headers and were not used, and may be obsolete or may never have"}, {"sha": "40a3af0dcbda7c25e81299ccd9b6ab77a65f6dac", "filename": "gcc/target-def.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=772c52657977a3d3bb3990d98a0b695c8eac6dc1", "patch": "@@ -205,6 +205,10 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n #define TARGET_SECTION_TYPE_FLAGS default_section_type_flags\n #endif\n \n+#ifndef TARGET_STRIP_NAME_ENCODING\n+#define TARGET_STRIP_NAME_ENCODING default_strip_name_encoding\n+#endif\n+\n /* In hook.c.  */\n #define TARGET_CANNOT_MODIFY_JUMPS_P hook_void_bool_false\n #define TARGET_IN_SMALL_DATA_P hook_tree_bool_false\n@@ -233,7 +237,8 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n   TARGET_HAVE_CTORS_DTORS,\t\t\t\\\n   TARGET_CANNOT_MODIFY_JUMPS_P,\t\t\t\\\n   TARGET_IN_SMALL_DATA_P,\t\t\t\\\n-  TARGET_ENCODE_SECTION_INFO\t\t\t\\\n+  TARGET_ENCODE_SECTION_INFO,\t\t\t\\\n+  TARGET_STRIP_NAME_ENCODING\t\t\t\\\n }\n \n #include \"hooks.h\""}, {"sha": "1864d4a88f9e68fdb0b1ca6a396a0fff1b2983f6", "filename": "gcc/target.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=772c52657977a3d3bb3990d98a0b695c8eac6dc1", "patch": "@@ -247,6 +247,9 @@ struct gcc_target\n   /* Do something target-specific to record properties of the DECL into\n      the associated SYMBOL_REF.  */\n   void (* encode_section_info) PARAMS ((tree, int));\n+\n+  /* Undo the effects of encode_section_info on the symbol string.  */\n+  const char * (* strip_name_encoding) PARAMS ((const char *));\n };\n \n extern struct gcc_target targetm;"}, {"sha": "797b67689e53871789ddc775e8b29ca6ffd2eb47", "filename": "gcc/varasm.c", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=772c52657977a3d3bb3990d98a0b695c8eac6dc1", "patch": "@@ -1207,7 +1207,7 @@ assemble_start_function (decl, fnname)\n \t  const char *p;\n \t  char *name;\n \n-\t  STRIP_NAME_ENCODING (p, fnname);\n+\t  p = (* targetm.strip_name_encoding) (fnname);\n \t  name = permalloc (strlen (p) + 1);\n \t  strcpy (name, p);\n \n@@ -1527,7 +1527,7 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n       const char *p;\n       char *xname;\n \n-      STRIP_NAME_ENCODING (p, name);\n+      p = (* targetm.strip_name_encoding) (name);\n       xname = permalloc (strlen (p) + 1);\n       strcpy (xname, p);\n       first_global_object_name = xname;\n@@ -1786,7 +1786,7 @@ assemble_name (file, name)\n   const char *real_name;\n   tree id;\n \n-  STRIP_NAME_ENCODING (real_name, name);\n+  real_name = (* targetm.strip_name_encoding) (name);\n \n   id = maybe_get_identifier (real_name);\n   if (id)\n@@ -5477,7 +5477,7 @@ default_unique_section (decl, reloc)\n   plen = strlen (prefix);\n \n   name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n-  STRIP_NAME_ENCODING (name, name);\n+  name = (* targetm.strip_name_encoding) (name);\n   nlen = strlen (name);\n \n   string = alloca (nlen + plen + 1);\n@@ -5535,3 +5535,13 @@ default_elf_select_rtx_section (mode, x, align)\n \n   mergeable_constant_section (mode, align, 0);\n }\n+\n+/* By default, we do nothing for encode_section_info, so we need not\n+   do anything but discard the '*' marker.  */\n+\n+const char *\n+default_strip_name_encoding (str)\n+     const char *str;\n+{\n+  return str + (*str == '*');\n+}"}, {"sha": "e0265898a9ea6995715bcbe29bd85929c7dbda77", "filename": "gcc/xcoffout.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fxcoffout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772c52657977a3d3bb3990d98a0b695c8eac6dc1/gcc%2Fxcoffout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fxcoffout.c?ref=772c52657977a3d3bb3990d98a0b695c8eac6dc1", "patch": "@@ -32,6 +32,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"toplev.h\"\n #include \"output.h\"\n #include \"ggc.h\"\n+#include \"target.h\"\n \n #ifdef XCOFF_DEBUGGING_INFO\n "}]}