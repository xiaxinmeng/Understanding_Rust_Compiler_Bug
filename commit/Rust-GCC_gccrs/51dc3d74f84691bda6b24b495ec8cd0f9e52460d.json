{"sha": "51dc3d74f84691bda6b24b495ec8cd0f9e52460d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTFkYzNkNzRmODQ2OTFiZGE2YjI0YjQ5NWVjOGNkMGY5ZTUyNDYwZA==", "commit": {"author": {"name": "Joel Sherrill", "email": "joel.sherrill@oarcorp.com", "date": "2003-04-29T21:57:39Z"}, "committer": {"name": "Loren J. Rittle", "email": "ljrittle@gcc.gnu.org", "date": "2003-04-29T21:57:39Z"}, "message": "atomicity.h: New file.\n\n2003-04-29 Joel Sherrill  <joel.sherrill@OARcorp.com>\n\t   Loren J. Rittle <ljrittle@acm.org>\n\t   Martin v. Loewis  <martin@v.loewis.de>\n\n\t* config/cpu/i386/atomicity.h: New file.\n\nCo-Authored-By: Loren J. Rittle <ljrittle@acm.org>\nCo-Authored-By: Martin v. Loewis <martin@v.loewis.de>\n\nFrom-SVN: r66261", "tree": {"sha": "169fda86022dd5d6db7f97c1065d6c6496576092", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/169fda86022dd5d6db7f97c1065d6c6496576092"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/51dc3d74f84691bda6b24b495ec8cd0f9e52460d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51dc3d74f84691bda6b24b495ec8cd0f9e52460d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51dc3d74f84691bda6b24b495ec8cd0f9e52460d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51dc3d74f84691bda6b24b495ec8cd0f9e52460d/comments", "author": {"login": "joelsherrill", "id": 183688, "node_id": "MDQ6VXNlcjE4MzY4OA==", "avatar_url": "https://avatars.githubusercontent.com/u/183688?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joelsherrill", "html_url": "https://github.com/joelsherrill", "followers_url": "https://api.github.com/users/joelsherrill/followers", "following_url": "https://api.github.com/users/joelsherrill/following{/other_user}", "gists_url": "https://api.github.com/users/joelsherrill/gists{/gist_id}", "starred_url": "https://api.github.com/users/joelsherrill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joelsherrill/subscriptions", "organizations_url": "https://api.github.com/users/joelsherrill/orgs", "repos_url": "https://api.github.com/users/joelsherrill/repos", "events_url": "https://api.github.com/users/joelsherrill/events{/privacy}", "received_events_url": "https://api.github.com/users/joelsherrill/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0219237c53194d1820ab8b00c6af19f68c7862c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0219237c53194d1820ab8b00c6af19f68c7862c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0219237c53194d1820ab8b00c6af19f68c7862c8"}], "stats": {"total": 81, "additions": 81, "deletions": 0}, "files": [{"sha": "3aa4367e58216c1cc320f9a878d1367cb4da63b3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51dc3d74f84691bda6b24b495ec8cd0f9e52460d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51dc3d74f84691bda6b24b495ec8cd0f9e52460d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=51dc3d74f84691bda6b24b495ec8cd0f9e52460d", "patch": "@@ -1,3 +1,9 @@\n+2003-04-29 Joel Sherrill  <joel.sherrill@OARcorp.com>\n+\t   Loren J. Rittle <ljrittle@acm.org>\n+\t   Martin v. Loewis  <martin@v.loewis.de>\n+\n+\t* config/cpu/i386/atomicity.h: New file.\n+\n 2003-04-29  Paolo Carlini  <pcarlini@unitus.it>\n \n \t* include/bits/fstream.tcc (open): Change to single return."}, {"sha": "ac9f7705bbb0e2d633f3e17fa4cca37179e68203", "filename": "libstdc++-v3/config/cpu/i386/atomicity.h", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51dc3d74f84691bda6b24b495ec8cd0f9e52460d/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fi386%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51dc3d74f84691bda6b24b495ec8cd0f9e52460d/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fi386%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fi386%2Fatomicity.h?ref=51dc3d74f84691bda6b24b495ec8cd0f9e52460d", "patch": "@@ -0,0 +1,75 @@\n+// Low-level functions for atomic operations: x86, x >= 3 version  -*- C++ -*-\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#ifndef _BITS_ATOMICITY_H\n+#define _BITS_ATOMICITY_H\t1\n+\n+typedef int _Atomic_word;\n+\n+template <int __inst>\n+struct __Atomicity_lock\n+{\n+  static volatile _Atomic_word _S_atomicity_lock;\n+};\n+\n+template <int __inst>\n+volatile _Atomic_word __Atomicity_lock<__inst>::_S_atomicity_lock = 0;\n+\n+template volatile _Atomic_word __Atomicity_lock<0>::_S_atomicity_lock;\n+\n+static inline _Atomic_word \n+__attribute__ ((__unused__))\n+__exchange_and_add (volatile _Atomic_word *__mem, int __val)\n+{\n+  register _Atomic_word __result, __tmp = 1;\n+\n+  /* obtain the atomic exchange/add spin lock */\n+  do {\n+    __asm__ __volatile__ (\"xchgl %0,%1\"\n+\t\t\t  : \"+m\" (__Atomicity_lock<0>::_S_atomicity_lock),\n+\t\t\t    \"+r\" (__tmp));\n+  } while (__tmp);\n+\n+  __result = *__mem;\n+  *__mem += __val;\n+\n+  /* release spin lock */\n+  __Atomicity_lock<0>::_S_atomicity_lock = 0;\n+\n+  return __result;\n+}\n+\n+static inline void\n+__attribute__ ((__unused__))\n+__atomic_add (volatile _Atomic_word* __mem, int __val)\n+{\n+  __exchange_and_add (__mem, __val);\n+}\n+\n+#endif /* atomicity.h */"}]}