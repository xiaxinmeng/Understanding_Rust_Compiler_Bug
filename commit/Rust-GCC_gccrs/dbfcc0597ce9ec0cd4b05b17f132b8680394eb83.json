{"sha": "dbfcc0597ce9ec0cd4b05b17f132b8680394eb83", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGJmY2MwNTk3Y2U5ZWMwY2Q0YjA1YjE3ZjEzMmI4NjgwMzk0ZWI4Mw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-07-09T11:24:09Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-07-09T11:24:09Z"}, "message": "re PR middle-end/44852 (miscompilation (of e.g. newlib dtoa.c) after mem-ref2 merge)\n\n2010-07-09  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/44852\n\t* tree-ssa-alias.c: Include toplev.h for exact_log2.\n\t(indirect_ref_may_alias_decl_p): Properly handle negative offsets\n\tin MEM_REF.\n\t(indirect_refs_may_alias_p): Likewise.\n\t* Makefile.in (tree-ssa-alias.o): Add $(TOPLEV_H).\n\n\t* gcc.c-torture/execute/pr44852.c: New testcase.\n\nFrom-SVN: r161994", "tree": {"sha": "1fcafc2809dd670b86812169efbe8489bbd17817", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1fcafc2809dd670b86812169efbe8489bbd17817"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dbfcc0597ce9ec0cd4b05b17f132b8680394eb83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbfcc0597ce9ec0cd4b05b17f132b8680394eb83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbfcc0597ce9ec0cd4b05b17f132b8680394eb83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbfcc0597ce9ec0cd4b05b17f132b8680394eb83/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8bcc87780adc7e6501de6ba406484af1b7b29340", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bcc87780adc7e6501de6ba406484af1b7b29340", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bcc87780adc7e6501de6ba406484af1b7b29340"}], "stats": {"total": 83, "additions": 77, "deletions": 6}, "files": [{"sha": "9784a999c5e01a314fb9b133c360731732ed7cde", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbfcc0597ce9ec0cd4b05b17f132b8680394eb83/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbfcc0597ce9ec0cd4b05b17f132b8680394eb83/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dbfcc0597ce9ec0cd4b05b17f132b8680394eb83", "patch": "@@ -1,3 +1,12 @@\n+2010-07-09  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/44852\n+\t* tree-ssa-alias.c: Include toplev.h for exact_log2.\n+\t(indirect_ref_may_alias_decl_p): Properly handle negative offsets\n+\tin MEM_REF.\n+\t(indirect_refs_may_alias_p): Likewise.\n+\t* Makefile.in (tree-ssa-alias.o): Add $(TOPLEV_H).\n+\n 2010-07-09  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/44882"}, {"sha": "a807e8e9d4a8a3de721a25d7a518331ebcef03b0", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbfcc0597ce9ec0cd4b05b17f132b8680394eb83/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbfcc0597ce9ec0cd4b05b17f132b8680394eb83/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=dbfcc0597ce9ec0cd4b05b17f132b8680394eb83", "patch": "@@ -2592,7 +2592,7 @@ tree-ssa-alias.o : tree-ssa-alias.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(TREE_DUMP_H) $(TREE_PASS_H) $(PARAMS_H) $(BASIC_BLOCK_H) $(DIAGNOSTIC_H) \\\n    $(GIMPLE_H) $(VEC_H) \\\n    $(IPA_TYPE_ESCAPE_H) vecprim.h pointer-set.h alloc-pool.h \\\n-   tree-pretty-print.h\n+   tree-pretty-print.h $(TOPLEV_H)\n tree-ssa-reassoc.o : tree-ssa-reassoc.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(TREE_H) $(DIAGNOSTIC_H) $(TIMEVAR_H) \\\n    $(TM_H) coretypes.h $(TREE_DUMP_H) $(TREE_PASS_H) $(FLAGS_H) \\"}, {"sha": "332664e2bd1b69b41e3024d7e8185a7ffeeaf5b0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbfcc0597ce9ec0cd4b05b17f132b8680394eb83/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbfcc0597ce9ec0cd4b05b17f132b8680394eb83/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dbfcc0597ce9ec0cd4b05b17f132b8680394eb83", "patch": "@@ -1,3 +1,8 @@\n+2010-07-09  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/44852\n+\t* gcc.c-torture/execute/pr44852.c: New testcase.\n+\n 2010-07-09  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* gcc.target/x86_64/abi/asm-support.S (snapshot): Replace"}, {"sha": "440653e5f17b612b6bc29667a04853ba977ebc4f", "filename": "gcc/testsuite/gcc.c-torture/execute/pr44852.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbfcc0597ce9ec0cd4b05b17f132b8680394eb83/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr44852.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbfcc0597ce9ec0cd4b05b17f132b8680394eb83/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr44852.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr44852.c?ref=dbfcc0597ce9ec0cd4b05b17f132b8680394eb83", "patch": "@@ -0,0 +1,22 @@\n+__attribute__ ((__noinline__))\n+char *sf(char *s, char *s0)\n+{\n+  asm (\"\");\n+  while (*--s == '9')\n+    if (s == s0)\n+      {\n+\t*s = '0';\n+\tbreak;\n+      }\n+  ++*s++;\n+  return s;\n+}\n+\n+int main()\n+{\n+  char s[] = \"999999\";\n+  char *x = sf (s+2, s);\n+  if (x != s+1 || __builtin_strcmp (s, \"199999\") != 0)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "d73ff5965f05729c577debf08d67bf6d20283b8a", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 40, "deletions": 5, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbfcc0597ce9ec0cd4b05b17f132b8680394eb83/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbfcc0597ce9ec0cd4b05b17f132b8680394eb83/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=dbfcc0597ce9ec0cd4b05b17f132b8680394eb83", "patch": "@@ -30,6 +30,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ggc.h\"\n #include \"langhooks.h\"\n #include \"flags.h\"\n+#include \"toplev.h\"\n #include \"function.h\"\n #include \"tree-pretty-print.h\"\n #include \"tree-dump.h\"\n@@ -688,17 +689,29 @@ indirect_ref_may_alias_decl_p (tree ref1 ATTRIBUTE_UNUSED, tree base1,\n {\n   tree ptr1 = TREE_OPERAND (base1, 0);\n   tree ptrtype1;\n-  HOST_WIDE_INT offset1p = offset1;\n+  HOST_WIDE_INT offset1p = offset1, offset2p = offset2;\n \n+  /* The offset embedded in MEM_REFs can be negative.  Bias them\n+     so that the resulting offset adjustment is positive.  */\n   if (TREE_CODE (base1) == MEM_REF)\n-    offset1p = offset1 + mem_ref_offset (base1).low * BITS_PER_UNIT;\n+    {\n+      double_int moff = mem_ref_offset (base1);\n+      moff = double_int_lshift (moff,\n+\t\t\t\tBITS_PER_UNIT == 8\n+\t\t\t\t? 3 : exact_log2 (BITS_PER_UNIT),\n+\t\t\t\tHOST_BITS_PER_DOUBLE_INT, true);\n+      if (double_int_negative_p (moff))\n+\toffset2p += double_int_neg (moff).low;\n+      else\n+\toffset1p += moff.low;\n+    }\n \n   /* If only one reference is based on a variable, they cannot alias if\n      the pointer access is beyond the extent of the variable access.\n      (the pointer base cannot validly point to an offset less than zero\n      of the variable).\n      They also cannot alias if the pointer may not point to the decl.  */\n-  if (!ranges_overlap_p (MAX (0, offset1p), -1, offset2, max_size2))\n+  if (!ranges_overlap_p (MAX (0, offset1p), -1, offset2p, max_size2))\n     return false;\n   if (!ptr_deref_may_alias_decl_p (ptr1, base2))\n     return false;\n@@ -804,10 +817,32 @@ indirect_refs_may_alias_p (tree ref1 ATTRIBUTE_UNUSED, tree base1,\n   if ((!cfun || gimple_in_ssa_p (cfun))\n       && operand_equal_p (ptr1, ptr2, 0))\n     {\n+      /* The offset embedded in MEM_REFs can be negative.  Bias them\n+\t so that the resulting offset adjustment is positive.  */\n       if (TREE_CODE (base1) == MEM_REF)\n-\toffset1 += mem_ref_offset (base1).low * BITS_PER_UNIT;\n+\t{\n+\t  double_int moff = mem_ref_offset (base1);\n+\t  moff = double_int_lshift (moff,\n+\t\t\t\t    BITS_PER_UNIT == 8\n+\t\t\t\t    ? 3 : exact_log2 (BITS_PER_UNIT),\n+\t\t\t\t    HOST_BITS_PER_DOUBLE_INT, true);\n+\t  if (double_int_negative_p (moff))\n+\t    offset2 += double_int_neg (moff).low;\n+\t  else\n+\t    offset1 += moff.low;\n+\t}\n       if (TREE_CODE (base2) == MEM_REF)\n-\toffset2 += mem_ref_offset (base2).low * BITS_PER_UNIT;\n+\t{\n+\t  double_int moff = mem_ref_offset (base2);\n+\t  moff = double_int_lshift (moff,\n+\t\t\t\t    BITS_PER_UNIT == 8\n+\t\t\t\t    ? 3 : exact_log2 (BITS_PER_UNIT),\n+\t\t\t\t    HOST_BITS_PER_DOUBLE_INT, true);\n+\t  if (double_int_negative_p (moff))\n+\t    offset1 += double_int_neg (moff).low;\n+\t  else\n+\t    offset2 += moff.low;\n+\t}\n       return ranges_overlap_p (offset1, max_size1, offset2, max_size2);\n     }\n   if (!ptr_derefs_may_alias_p (ptr1, ptr2))"}]}