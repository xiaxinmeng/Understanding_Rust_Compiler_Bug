{"sha": "88efe45a92a6b6b3e0a1767143af61436f75052b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODhlZmU0NWE5MmE2YjZiM2UwYTE3NjcxNDNhZjYxNDM2Zjc1MDUyYg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2007-05-25T09:07:29Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2007-05-25T09:07:29Z"}, "message": "re PR tree-optimization/31982 (Missed forw prop with indirect ref and addr. (and char types or sizeof(type) == 1))\n\n2007-05-24  Richard Guenther  <rguenther@suse.de>\n        Andrew Pinski  <andrew_pinski@playstation.sony.com>\n\n\tPR tree-optimization/31982\n\t* tree-ssa-forwprop.c\n\t(forward_propagate_addr_into_variable_array_index): Handle arrays\n\twith element size one.\n\n\t* gcc.dg/tree-ssa/forwprop-2.c: New testcase.\n\nCo-Authored-By: Andrew Pinski <andrew_pinski@playstation.sony.com>\n\nFrom-SVN: r125058", "tree": {"sha": "6502eb3dfad884611a31270c8024502f2d16a26a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6502eb3dfad884611a31270c8024502f2d16a26a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88efe45a92a6b6b3e0a1767143af61436f75052b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88efe45a92a6b6b3e0a1767143af61436f75052b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88efe45a92a6b6b3e0a1767143af61436f75052b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88efe45a92a6b6b3e0a1767143af61436f75052b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "36032710357e5af5f3743c46c29c457e2b04ed05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36032710357e5af5f3743c46c29c457e2b04ed05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36032710357e5af5f3743c46c29c457e2b04ed05"}], "stats": {"total": 75, "additions": 56, "deletions": 19}, "files": [{"sha": "2342dad7d040b36e376172714e65be56d2ed1dad", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88efe45a92a6b6b3e0a1767143af61436f75052b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88efe45a92a6b6b3e0a1767143af61436f75052b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=88efe45a92a6b6b3e0a1767143af61436f75052b", "patch": "@@ -1,3 +1,10 @@\n+2007-05-25  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/31982\n+\t* tree-ssa-forwprop.c\n+\t(forward_propagate_addr_into_variable_array_index): Handle arrays\n+\twith element size one.\n+\n 2007-05-24  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \t* config/spu/spu.md (smulsi3_highpart): Unshare the rtl chain."}, {"sha": "c0cbf9b3158ded607856827331fa470805b7f78c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88efe45a92a6b6b3e0a1767143af61436f75052b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88efe45a92a6b6b3e0a1767143af61436f75052b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=88efe45a92a6b6b3e0a1767143af61436f75052b", "patch": "@@ -1,3 +1,9 @@\n+2007-05-25  Richard Guenther  <rguenther@suse.de>\n+\tAndrew Pinski  <andrew_pinski@playstation.sony.com>\n+\n+\tPR tree-optimization/31982\n+\t* gcc.dg/tree-ssa/forwprop-2.c: New testcase.\n+\n 2007-05-25  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/32047"}, {"sha": "95aa77eb3f7a72763c1fddee8ea8797477c9e94f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/forwprop-2.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88efe45a92a6b6b3e0a1767143af61436f75052b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88efe45a92a6b6b3e0a1767143af61436f75052b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-2.c?ref=88efe45a92a6b6b3e0a1767143af61436f75052b", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-forwprop\" }  */\n+\n+/* We should be able to optimize this to b->t[i] = 1 during\n+   early optimizations.  */\n+\n+struct a\n+{\n+  char t[10];\n+};\n+\n+struct a *b;\n+\n+void f(__SIZE_TYPE__ i)\n+{\n+  char *c = b->t;\n+  c[i] = 1;\n+}\n+\n+/* { dg-final { scan-tree-dump \"t\\\\\\[i.*\\\\\\] = 1;\" \"forwprop1\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump \"t\\\\\\[i.*\\\\\\] = 1;\" \"forwprop2\" } } */\n+/* { dg-final { cleanup-tree-dump \"forwprop?\" } } */"}, {"sha": "95f1c003c25b526aaab5df06a9e5be7e734f9113", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88efe45a92a6b6b3e0a1767143af61436f75052b/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88efe45a92a6b6b3e0a1767143af61436f75052b/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=88efe45a92a6b6b3e0a1767143af61436f75052b", "patch": "@@ -513,28 +513,30 @@ forward_propagate_addr_into_variable_array_index (tree offset, tree lhs,\n   if (TREE_CODE (offset) != SSA_NAME)\n     return false;\n \n-  /* Get the defining statement of the offset before type\n-     conversion.  */\n-  offset = SSA_NAME_DEF_STMT (offset);\n+  /* Try to find an expression for a proper index.  This is either\n+     a multiplication expression by the element size or just the\n+     ssa name we came along in case the element size is one.  */\n+  if (integer_onep (TYPE_SIZE_UNIT (TREE_TYPE (TREE_TYPE (lhs)))))\n+    index = offset;\n+  else\n+    {\n+      offset = SSA_NAME_DEF_STMT (offset);\n \n-  /* The statement which defines OFFSET before type conversion\n-     must be a simple GIMPLE_MODIFY_STMT.  */\n-  if (TREE_CODE (offset) != GIMPLE_MODIFY_STMT)\n-    return false;\n+      /* The RHS of the statement which defines OFFSET must be a\n+\t multiplication of an object by the size of the array elements.  */\n+      if (TREE_CODE (offset) != GIMPLE_MODIFY_STMT)\n+\treturn false;\n \n-  /* The RHS of the statement which defines OFFSET must be a\n-     multiplication of an object by the size of the array elements. \n-     This implicitly verifies that the size of the array elements\n-     is constant.  */\n-  offset = GIMPLE_STMT_OPERAND (offset, 1);\n-  if (TREE_CODE (offset) != MULT_EXPR\n-      || TREE_CODE (TREE_OPERAND (offset, 1)) != INTEGER_CST\n-      || !simple_cst_equal (TREE_OPERAND (offset, 1),\n-\t\t\t    TYPE_SIZE_UNIT (TREE_TYPE (TREE_TYPE (lhs)))))\n-    return false;\n+      offset = GIMPLE_STMT_OPERAND (offset, 1);\n+      if (TREE_CODE (offset) != MULT_EXPR\n+\t  || TREE_CODE (TREE_OPERAND (offset, 1)) != INTEGER_CST\n+\t  || !simple_cst_equal (TREE_OPERAND (offset, 1),\n+\t\t\t\tTYPE_SIZE_UNIT (TREE_TYPE (TREE_TYPE (lhs)))))\n+\treturn false;\n \n-  /* The first operand to the MULT_EXPR is the desired index.  */\n-  index = TREE_OPERAND (offset, 0);\n+      /* The first operand to the MULT_EXPR is the desired index.  */\n+      index = TREE_OPERAND (offset, 0);\n+    }\n \n   /* Replace the pointer addition with array indexing.  */\n   GIMPLE_STMT_OPERAND (use_stmt, 1) = unshare_expr (def_rhs);"}]}