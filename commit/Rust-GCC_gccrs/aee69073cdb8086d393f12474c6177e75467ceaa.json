{"sha": "aee69073cdb8086d393f12474c6177e75467ceaa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWVlNjkwNzNjZGI4MDg2ZDM5M2YxMjQ3NGM2MTc3ZTc1NDY3Y2VhYQ==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-06-03T20:40:28Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-06-03T20:40:28Z"}, "message": "c++: constrained nested partial specialization [PR92103]\n\nWhen determining the most specialized partial specialization of a\nprimary template that is nested inside a class template, we first\ntsubst the outer template arguments into the TEMPLATE_DECL of each\npartial specialization, and then check for satisfaction of each of the\nnew TEMPLATE_DECL's constraints.\n\nBut tsubst_template_decl does not currently guarantee that constraints\nfrom the original DECL_TEMPLATE_RESULT get reattached to the new\nDECL_TEMPLATE_RESULT.  In the testcase below, this leads to the\nconstraints_satisfied_p check in most_specialized_partial_spec to\ntrivially return true for each of the partial specializations.\n\nI'm not sure if such a guarantee would be desirable, but in this case we\ncan just check constraints_satisfied_p on the original TEMPLATE_DECL\ninstead of on the tsubsted TEMPLATE_DECL here, which is what this patch\ndoes (alongside some reorganizing).\n\ngcc/cp/ChangeLog:\n\n\tPR c++/92103\n\t* pt.c (most_specialized_partial_spec): Reorganize the loop over\n\tDECL_TEMPLATE_SPECIALIZATIONS.  Check constraints_satisfied_p on\n\tthe original template declaration, not on the tsubsted one.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/92103\n\t* g++.dg/cpp2a/concepts-partial-spec7.C: New test.", "tree": {"sha": "4492342ea2044fcc67e5ea4c1ff117d09be93475", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4492342ea2044fcc67e5ea4c1ff117d09be93475"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aee69073cdb8086d393f12474c6177e75467ceaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aee69073cdb8086d393f12474c6177e75467ceaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aee69073cdb8086d393f12474c6177e75467ceaa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aee69073cdb8086d393f12474c6177e75467ceaa/comments", "author": null, "committer": null, "parents": [{"sha": "3fb68f2e666d9de7e0326af9f43b12c9e98f19a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fb68f2e666d9de7e0326af9f43b12c9e98f19a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fb68f2e666d9de7e0326af9f43b12c9e98f19a6"}], "stats": {"total": 41, "additions": 32, "deletions": 9}, "files": [{"sha": "f5d1442a4004d9c00839dadd298a5a4650139350", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aee69073cdb8086d393f12474c6177e75467ceaa/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aee69073cdb8086d393f12474c6177e75467ceaa/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=aee69073cdb8086d393f12474c6177e75467ceaa", "patch": "@@ -24488,21 +24488,22 @@ most_specialized_partial_spec (tree target, tsubst_flags_t complain)\n \n   for (t = DECL_TEMPLATE_SPECIALIZATIONS (main_tmpl); t; t = TREE_CHAIN (t))\n     {\n-      tree spec_args;\n-      tree spec_tmpl = TREE_VALUE (t);\n+      const tree ospec_tmpl = TREE_VALUE (t);\n \n+      tree spec_tmpl;\n       if (outer_args)\n \t{\n \t  /* Substitute in the template args from the enclosing class.  */\n \t  ++processing_template_decl;\n-\t  spec_tmpl = tsubst (spec_tmpl, outer_args, tf_none, NULL_TREE);\n+\t  spec_tmpl = tsubst (ospec_tmpl, outer_args, tf_none, NULL_TREE);\n \t  --processing_template_decl;\n+\t  if (spec_tmpl == error_mark_node)\n+\t    return error_mark_node;\n \t}\n+      else\n+\tspec_tmpl = ospec_tmpl;\n \n-      if (spec_tmpl == error_mark_node)\n-\treturn error_mark_node;\n-\n-      spec_args = get_partial_spec_bindings (tmpl, spec_tmpl, args);\n+      tree spec_args = get_partial_spec_bindings (tmpl, spec_tmpl, args);\n       if (spec_args)\n \t{\n \t  if (outer_args)\n@@ -24511,9 +24512,9 @@ most_specialized_partial_spec (tree target, tsubst_flags_t complain)\n           /* Keep the candidate only if the constraints are satisfied,\n              or if we're not compiling with concepts.  */\n           if (!flag_concepts\n-              || constraints_satisfied_p (spec_tmpl, spec_args))\n+\t      || constraints_satisfied_p (ospec_tmpl, spec_args))\n             {\n-              list = tree_cons (spec_args, TREE_VALUE (t), list);\n+\t      list = tree_cons (spec_args, ospec_tmpl, list);\n               TREE_TYPE (list) = TREE_TYPE (t);\n             }\n \t}"}, {"sha": "5b3afce3bc7081dff745aece0215873690f76fff", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-partial-spec7.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aee69073cdb8086d393f12474c6177e75467ceaa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-partial-spec7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aee69073cdb8086d393f12474c6177e75467ceaa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-partial-spec7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-partial-spec7.C?ref=aee69073cdb8086d393f12474c6177e75467ceaa", "patch": "@@ -0,0 +1,22 @@\n+// PR c++/92103\n+// { dg-do compile { target c++20 } }\n+\n+template<int M>\n+struct traits\n+{\n+  template<int N>\n+    struct equal_to\n+    { static constexpr bool value = false; };\n+\n+  template<int N> requires (M == N)\n+    struct equal_to<N>\n+    { static constexpr bool value = true; };\n+\n+  template<int N> requires (M < 0) || (N < 0)\n+    struct equal_to<N>\n+    { };\n+};\n+\n+static_assert(traits<0>::equal_to<0>::value);\n+static_assert(!traits<0>::equal_to<1>::value);\n+static_assert(traits<-1>::equal_to<0>::value); // { dg-error \"not a member\" }"}]}