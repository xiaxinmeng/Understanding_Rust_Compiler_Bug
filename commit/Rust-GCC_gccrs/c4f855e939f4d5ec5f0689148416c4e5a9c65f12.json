{"sha": "c4f855e939f4d5ec5f0689148416c4e5a9c65f12", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzRmODU1ZTkzOWY0ZDVlYzVmMDY4OTE0ODQxNmM0ZTVhOWM2NWYxMg==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2015-08-13T17:06:14Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2015-08-13T17:06:14Z"}, "message": "[RTL-ifcvt] Allow PLUS+immediate expression in noce_try_store_flag_constants\n\n\t* ifcvt.c (noce_try_store_flag_constants): Handle PLUS-immediate\n\texpressions in A and B.\n\n\t* gcc.target/aarch64/cinc_common_1.c: New test.\n\nFrom-SVN: r226869", "tree": {"sha": "e685ff24cb587d4b60da1a55d574e0caa47ee177", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e685ff24cb587d4b60da1a55d574e0caa47ee177"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4f855e939f4d5ec5f0689148416c4e5a9c65f12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4f855e939f4d5ec5f0689148416c4e5a9c65f12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4f855e939f4d5ec5f0689148416c4e5a9c65f12", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4f855e939f4d5ec5f0689148416c4e5a9c65f12/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "42b7febc53cac744c7d0c0ae6e2dae0876b7d896", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42b7febc53cac744c7d0c0ae6e2dae0876b7d896", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42b7febc53cac744c7d0c0ae6e2dae0876b7d896"}], "stats": {"total": 141, "additions": 133, "deletions": 8}, "files": [{"sha": "f3262e5452ef13865b9ffda0010763fd304d7b7c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4f855e939f4d5ec5f0689148416c4e5a9c65f12/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4f855e939f4d5ec5f0689148416c4e5a9c65f12/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c4f855e939f4d5ec5f0689148416c4e5a9c65f12", "patch": "@@ -1,3 +1,8 @@\n+2015-08-13  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* ifcvt.c (noce_try_store_flag_constants): Handle PLUS-immediate\n+\texpressions in A and B.\n+\n 2015-08-13  Richard Biener  <rguenther@suse.de>\n \n \t* tree.c (nonnull_arg_p): Move from ..."}, {"sha": "a46efec605958453db941896262306f10fc937b0", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 60, "deletions": 8, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4f855e939f4d5ec5f0689148416c4e5a9c65f12/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4f855e939f4d5ec5f0689148416c4e5a9c65f12/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=c4f855e939f4d5ec5f0689148416c4e5a9c65f12", "patch": "@@ -1152,7 +1152,9 @@ noce_try_store_flag (struct noce_if_info *if_info)\n     }\n }\n \n-/* Convert \"if (test) x = a; else x = b\", for A and B constant.  */\n+/* Convert \"if (test) x = a; else x = b\", for A and B constant.\n+   Also allow A = y + c1, B = y + c2, with a common y between A\n+   and B.  */\n \n static int\n noce_try_store_flag_constants (struct noce_if_info *if_info)\n@@ -1163,14 +1165,31 @@ noce_try_store_flag_constants (struct noce_if_info *if_info)\n   HOST_WIDE_INT itrue, ifalse, diff, tmp;\n   int normalize;\n   bool can_reverse;\n-  machine_mode mode;\n+  machine_mode mode = GET_MODE (if_info->x);;\n+  rtx common = NULL_RTX;\n+\n+  rtx a = if_info->a;\n+  rtx b = if_info->b;\n+\n+  /* Handle cases like x := test ? y + 3 : y + 4.  */\n+  if (GET_CODE (a) == PLUS\n+      && GET_CODE (b) == PLUS\n+      && CONST_INT_P (XEXP (a, 1))\n+      && CONST_INT_P (XEXP (b, 1))\n+      && rtx_equal_p (XEXP (a, 0), XEXP (b, 0))\n+      && noce_operand_ok (XEXP (a, 0))\n+      && if_info->branch_cost >= 2)\n+    {\n+      common = XEXP (a, 0);\n+      a = XEXP (a, 1);\n+      b = XEXP (b, 1);\n+    }\n \n-  if (CONST_INT_P (if_info->a)\n-      && CONST_INT_P (if_info->b))\n+  if (CONST_INT_P (a)\n+      && CONST_INT_P (b))\n     {\n-      mode = GET_MODE (if_info->x);\n-      ifalse = INTVAL (if_info->a);\n-      itrue = INTVAL (if_info->b);\n+      ifalse = INTVAL (a);\n+      itrue = INTVAL (b);\n       bool subtract_flag_p = false;\n \n       diff = (unsigned HOST_WIDE_INT) itrue - ifalse;\n@@ -1203,6 +1222,11 @@ noce_try_store_flag_constants (struct noce_if_info *if_info)\n \t    {\n \t      reversep = can_reverse;\n \t      subtract_flag_p = !can_reverse;\n+\t      /* If we need to subtract the flag and we have PLUS-immediate\n+\t\t A and B then it is unlikely to be beneficial to play tricks\n+\t\t here.  */\n+\t      if (subtract_flag_p && common)\n+\t\treturn FALSE;\n \t    }\n \t  /* test ? 3 : 4\n \t     => can_reverse  | 3 + (test == 0)\n@@ -1211,6 +1235,11 @@ noce_try_store_flag_constants (struct noce_if_info *if_info)\n \t    {\n \t      reversep = can_reverse;\n \t      subtract_flag_p = !can_reverse;\n+\t      /* If we need to subtract the flag and we have PLUS-immediate\n+\t\t A and B then it is unlikely to be beneficial to play tricks\n+\t\t here.  */\n+\t      if (subtract_flag_p && common)\n+\t\treturn FALSE;\n \t    }\n \t  /* test ? 4 : 3\n \t     => 4 + (test != 0).  */\n@@ -1249,6 +1278,15 @@ noce_try_store_flag_constants (struct noce_if_info *if_info)\n \t}\n \n       start_sequence ();\n+\n+      /* If we have x := test ? x + 3 : x + 4 then move the original\n+\t x out of the way while we store flags.  */\n+      if (common && rtx_equal_p (common, if_info->x))\n+\t{\n+\t  common = gen_reg_rtx (mode);\n+\t  noce_emit_move_insn (common, if_info->x);\n+\t}\n+\n       target = noce_emit_store_flag (if_info, if_info->x, reversep, normalize);\n       if (! target)\n \t{\n@@ -1260,13 +1298,27 @@ noce_try_store_flag_constants (struct noce_if_info *if_info)\n \t =>   x = 3 + (test == 0);  */\n       if (diff == STORE_FLAG_VALUE || diff == -STORE_FLAG_VALUE)\n \t{\n+\t  /* Add the common part now.  This may allow combine to merge this\n+\t     with the store flag operation earlier into some sort of conditional\n+\t     increment/decrement if the target allows it.  */\n+\t  if (common)\n+\t    target = expand_simple_binop (mode, PLUS,\n+\t\t\t\t\t   target, common,\n+\t\t\t\t\t   target, 0, OPTAB_WIDEN);\n+\n \t  /* Always use ifalse here.  It should have been swapped with itrue\n \t     when appropriate when reversep is true.  */\n \t  target = expand_simple_binop (mode, subtract_flag_p ? MINUS : PLUS,\n \t\t\t\t\tgen_int_mode (ifalse, mode), target,\n \t\t\t\t\tif_info->x, 0, OPTAB_WIDEN);\n \t}\n-\n+      /* Other cases are not beneficial when the original A and B are PLUS\n+\t expressions.  */\n+      else if (common)\n+\t{\n+\t  end_sequence ();\n+\t  return FALSE;\n+\t}\n       /* if (test) x = 8; else x = 0;\n \t =>   x = (test != 0) << 3;  */\n       else if (ifalse == 0 && (tmp = exact_log2 (itrue)) >= 0)"}, {"sha": "4561032457bcec1fff4746d7121520ade4c7cf77", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4f855e939f4d5ec5f0689148416c4e5a9c65f12/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4f855e939f4d5ec5f0689148416c4e5a9c65f12/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c4f855e939f4d5ec5f0689148416c4e5a9c65f12", "patch": "@@ -1,3 +1,7 @@\n+2015-08-13  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/cinc_common_1.c: New test.\n+\n 2015-08-13  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/53421"}, {"sha": "d04126331a7456dc267fc999f12366acbddf7927", "filename": "gcc/testsuite/gcc.target/aarch64/cinc_common_1.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4f855e939f4d5ec5f0689148416c4e5a9c65f12/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcinc_common_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4f855e939f4d5ec5f0689148416c4e5a9c65f12/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcinc_common_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcinc_common_1.c?ref=c4f855e939f4d5ec5f0689148416c4e5a9c65f12", "patch": "@@ -0,0 +1,64 @@\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -O2 -fno-inline\" } */\n+\n+extern void abort (void);\n+\n+int\n+foosi (int x)\n+{\n+  return x > 100 ? x - 2 : x - 1;\n+}\n+\n+int\n+barsi (int x)\n+{\n+  return x > 100 ? x + 4 : x + 3;\n+}\n+\n+long\n+foodi (long x)\n+{\n+  return x > 100 ? x - 2 : x - 1;\n+}\n+\n+long\n+bardi (long x)\n+{\n+  return x > 100 ? x + 4 : x + 3;\n+}\n+\n+/* { dg-final { scan-assembler-times \"cs?inc\\tw\\[0-9\\]*\" 2 } } */\n+/* { dg-final { scan-assembler-times \"cs?inc\\tx\\[0-9\\]*\" 2 } } */\n+\n+int\n+main (void)\n+{\n+  if (foosi (105) != 103)\n+    abort ();\n+\n+  if (foosi (95) != 94)\n+    abort ();\n+\n+  if (barsi (105) != 109)\n+    abort ();\n+\n+  if (barsi (95) != 98)\n+    abort ();\n+\n+  if (foodi (105) != 103)\n+    abort ();\n+\n+  if (foodi (95) != 94)\n+    abort ();\n+\n+  if (bardi (105) != 109)\n+    abort ();\n+\n+  if (bardi (95) != 98)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-not \"csel\\tx\\[0-9\\]*.*\" } } */\n+/* { dg-final { scan-assembler-not \"csel\\tw\\[0-9\\]*.*\" } } */"}]}