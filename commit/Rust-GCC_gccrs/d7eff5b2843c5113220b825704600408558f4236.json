{"sha": "d7eff5b2843c5113220b825704600408558f4236", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDdlZmY1YjI4NDNjNTExMzIyMGI4MjU3MDQ2MDA0MDg1NThmNDIzNg==", "commit": {"author": {"name": "Aditya Kumar", "email": "aditya.k7@samsung.com", "date": "2016-01-21T02:13:05Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2016-01-21T02:13:05Z"}, "message": "check that all loops are valid in the combined region\n\nthe bug was exposed by rewriting an if condition into an assert in the computation\nof the loop iteration domains.\n\n\t* graphite-scop-detection.c (loop_is_valid_scop): Renamed loop_is_valid_in_scop.\n\t(scop_detection::harmful_stmt_in_region): Renamed harmful_loop_in_region.\n\tCall loop_is_valid_in_scop.\n\nCo-Authored-By: Sebastian Pop <s.pop@samsung.com>\n\nFrom-SVN: r232653", "tree": {"sha": "0ef1c4f80a48982d167e422a8c577a9a619f9f74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ef1c4f80a48982d167e422a8c577a9a619f9f74"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7eff5b2843c5113220b825704600408558f4236", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7eff5b2843c5113220b825704600408558f4236", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7eff5b2843c5113220b825704600408558f4236", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7eff5b2843c5113220b825704600408558f4236/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5d8368a71bf68c3524edf8b0be0b8e7cb8aae10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5d8368a71bf68c3524edf8b0be0b8e7cb8aae10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5d8368a71bf68c3524edf8b0be0b8e7cb8aae10"}], "stats": {"total": 63, "additions": 49, "deletions": 14}, "files": [{"sha": "f55177c377eb2fceba6853d888f2fb8b3b4ad3e9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7eff5b2843c5113220b825704600408558f4236/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7eff5b2843c5113220b825704600408558f4236/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d7eff5b2843c5113220b825704600408558f4236", "patch": "@@ -1,3 +1,10 @@\n+2016-01-21  Aditya Kumar  <aditya.k7@samsung.com>\n+\t    Sebastian Pop  <s.pop@samsung.com>\n+\n+\t* graphite-scop-detection.c (loop_is_valid_scop): Renamed loop_is_valid_in_scop.\n+\t(scop_detection::harmful_stmt_in_region): Renamed harmful_loop_in_region.\n+\tCall loop_is_valid_in_scop.\n+\n 2016-01-21  Aditya Kumar  <aditya.k7@samsung.com>\n \t    Sebastian Pop  <s.pop@samsung.com>\n "}, {"sha": "cd376d11bf18a4e77a5ce1185c2a10d1b3f0e211", "filename": "gcc/graphite-scop-detection.c", "status": "modified", "additions": 42, "deletions": 14, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7eff5b2843c5113220b825704600408558f4236/gcc%2Fgraphite-scop-detection.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7eff5b2843c5113220b825704600408558f4236/gcc%2Fgraphite-scop-detection.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-scop-detection.c?ref=d7eff5b2843c5113220b825704600408558f4236", "patch": "@@ -554,7 +554,7 @@ class scop_detection\n      region of code that can be represented in the polyhedral model.  SCOP\n      defines the region we analyse.  */\n \n-  bool loop_is_valid_scop (loop_p loop, sese_l scop) const;\n+  bool loop_is_valid_in_scop (loop_p loop, sese_l scop) const;\n \n   /* Return true when BEGIN is the preheader edge of a loop with a single exit\n      END.  */\n@@ -597,7 +597,7 @@ class scop_detection\n      Limit the number of bbs between adjacent loops to\n      PARAM_SCOP_MAX_NUM_BBS_BETWEEN_LOOPS.  */\n \n-  bool harmful_stmt_in_region (sese_l scop) const;\n+  bool harmful_loop_in_region (sese_l scop) const;\n \n   /* Return true only when STMT is simple enough for being handled by Graphite.\n      This depends on SCOP, as the parameters are initialized relatively to\n@@ -777,8 +777,9 @@ scop_detection::merge_sese (sese_l first, sese_l second) const\n   if (!second)\n     return first;\n \n-  DEBUG_PRINT (dp << \"[try-merging-sese] s1: \"; print_sese (dump_file, first);\n-\t       dp << \"[try-merging-sese] s2: \";\n+  DEBUG_PRINT (dp << \"[scop-detection] try merging sese s1: \";\n+\t       print_sese (dump_file, first);\n+\t       dp << \"[scop-detection] try merging sese s2: \";\n \t       print_sese (dump_file, second));\n \n   /* Assumption: Both the sese's should be at the same loop depth or one scop\n@@ -807,7 +808,7 @@ scop_detection::merge_sese (sese_l first, sese_l second) const\n \n   sese_l combined (entry, exit);\n \n-  DEBUG_PRINT (dp << \"checking combined sese: \";\n+  DEBUG_PRINT (dp << \"[scop-detection] checking combined sese: \";\n \t       print_sese (dump_file, combined));\n \n   /* FIXME: We could iterate to find the dom which dominates pdom, and pdom\n@@ -849,7 +850,7 @@ scop_detection::merge_sese (sese_l first, sese_l second) const\n     }\n \n   /* Analyze all the BBs in new sese.  */\n-  if (harmful_stmt_in_region (combined))\n+  if (harmful_loop_in_region (combined))\n     return invalid_sese;\n \n   DEBUG_PRINT (dp << \"[merged-sese] s1: \"; print_sese (dump_file, combined));\n@@ -877,7 +878,7 @@ scop_detection::build_scop_depth (sese_l s, loop_p loop)\n       return s;\n     }\n \n-  if (!loop_is_valid_scop (loop, s2))\n+  if (!loop_is_valid_in_scop (loop, s2))\n     return build_scop_depth (invalid_sese, loop->next);\n \n   return build_scop_breadth (s2, loop);\n@@ -954,7 +955,7 @@ scop_detection::can_represent_loop (loop_p loop, sese_l scop)\n    defines the region we analyse.  */\n \n bool\n-scop_detection::loop_is_valid_scop (loop_p loop, sese_l scop) const\n+scop_detection::loop_is_valid_in_scop (loop_p loop, sese_l scop) const\n {\n   if (!scop)\n     return false;\n@@ -1008,15 +1009,15 @@ scop_detection::add_scop (sese_l s)\n   /* Do not add scops with only one loop.  */\n   if (region_has_one_loop (s))\n     {\n-      DEBUG_PRINT (dp << \"[scop-detection-fail] Discarding one loop SCoP.\\n\";\n+      DEBUG_PRINT (dp << \"[scop-detection-fail] Discarding one loop SCoP: \";\n \t\t   print_sese (dump_file, s));\n       return;\n     }\n \n   if (get_exit_bb (s) == EXIT_BLOCK_PTR_FOR_FN (cfun))\n     {\n       DEBUG_PRINT (dp << \"[scop-detection-fail] \"\n-\t\t      << \"Discarding SCoP exiting to return.\";\n+\t\t      << \"Discarding SCoP exiting to return: \";\n \t\t   print_sese (dump_file, s));\n       return;\n     }\n@@ -1029,7 +1030,7 @@ scop_detection::add_scop (sese_l s)\n   remove_intersecting_scops (s);\n \n   scops.safe_push (s);\n-  DEBUG_PRINT (dp << \"Adding SCoP \"; print_sese (dump_file, s));\n+  DEBUG_PRINT (dp << \"[scop-detection] Adding SCoP: \"; print_sese (dump_file, s));\n }\n \n /* Return true when a statement in SCOP cannot be represented by Graphite.\n@@ -1038,7 +1039,7 @@ scop_detection::add_scop (sese_l s)\n    PARAM_SCOP_MAX_NUM_BBS_BETWEEN_LOOPS.  */\n \n bool\n-scop_detection::harmful_stmt_in_region (sese_l scop) const\n+scop_detection::harmful_loop_in_region (sese_l scop) const\n {\n   basic_block exit_bb = get_exit_bb (scop);\n   basic_block entry_bb = get_entry_bb (scop);\n@@ -1056,6 +1057,7 @@ scop_detection::harmful_stmt_in_region (sese_l scop) const\n       = get_dominated_to_depth (CDI_DOMINATORS, entry_bb, depth);\n   int i;\n   basic_block bb;\n+  bitmap loops = BITMAP_ALLOC (NULL);\n   FOR_EACH_VEC_ELT (dom, i, bb)\n     {\n       DEBUG_PRINT (dp << \"Visiting bb_\" << bb->index << \"\\n\");\n@@ -1072,16 +1074,42 @@ scop_detection::harmful_stmt_in_region (sese_l scop) const\n       if (bb->flags & BB_IRREDUCIBLE_LOOP)\n \t{\n \t  dom.release ();\n+\t  BITMAP_FREE (loops);\n \t  return true;\n \t}\n \n-      if (harmful_stmt_in_bb (scop, bb))\n+      /* Collect all loops in the current region.  */\n+      loop_p loop = bb->loop_father;\n+      if (loop_in_sese_p (loop, scop))\n+\tbitmap_set_bit (loops, loop->num);\n+      else\n \t{\n-\t  dom.release ();\n+\t  /* We only check for harmful statements in basic blocks not part of\n+\t     any loop fully contained in the scop: other bbs are checked below\n+\t     in loop_is_valid_in_scop.  */\n+\t  if (harmful_stmt_in_bb (scop, bb))\n+\t    return true;\n+\t}\n+\n+    }\n+\n+  /* Go through all loops and check that they are still valid in the combined\n+     scop.  */\n+  unsigned j;\n+  bitmap_iterator bi;\n+  EXECUTE_IF_SET_IN_BITMAP (loops, 0, j, bi)\n+    {\n+      loop_p loop = (*current_loops->larray)[j];\n+      gcc_assert (loop->num == (int) j);\n+\n+      if (!loop_is_valid_in_scop (loop, scop))\n+\t{\n+\t  BITMAP_FREE (loops);\n \t  return true;\n \t}\n     }\n \n+  BITMAP_FREE (loops);\n   dom.release ();\n   return false;\n }"}]}