{"sha": "7813d14ccc5089fc5ef8eceb5377f41ab6a9844d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzgxM2QxNGNjYzUwODlmYzVlZjhlY2ViNTM3N2Y0MWFiNmE5ODQ0ZA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2003-12-22T23:57:08Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-12-22T23:57:08Z"}, "message": "re PR c++/12862 (Conflicts Between typedefs/enums and Namespace Member Declarations)\n\n\t* c-common.c (flag_external_templates): Remove.\n\t(flag_alt_external_templates): Likewise.\n\t* c-common.h (flag_external_templates): Remove.\n\t(flag_alt_external_templates): Likewise.\n\t* c-opts.c (c_common_handle_option): Unsupport\n\t-falt-external-templates and -ftemplates.\n\t* doc/invoke.texi: Remove mention of -fexternal-templates and\n\t-falt-external-templates.\n\n\t* decl.c (start_function): Do not check\n\tflag_alt_external_templates or flag_external_templates.\n\t* decl2.c (warn_if_unknown_interface): Likewise.\n\t* lex.c (extract_interface_info): Likewise.\n\t* pt.c (lookup_template_class): Likewise.\n\n\tPR c++/12862\n\t* name-lookup.c (pushdecl): Look up all namespace-scope entities\n\tin their corresponding namespace.\n\n\t* g++.old-deja/g++.jason/template18.C: Remove.\n\t* g++.old-deja/g++.jason/template37.C: Likewise.\n\n\tPR c++/12862\n\t* g++.dg/lookup/ns1.C: New test.\n\nFrom-SVN: r74954", "tree": {"sha": "bfd19fff8d2b9d5fc60b710cb3426bd7f1df5b92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bfd19fff8d2b9d5fc60b710cb3426bd7f1df5b92"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7813d14ccc5089fc5ef8eceb5377f41ab6a9844d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7813d14ccc5089fc5ef8eceb5377f41ab6a9844d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7813d14ccc5089fc5ef8eceb5377f41ab6a9844d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7813d14ccc5089fc5ef8eceb5377f41ab6a9844d/comments", "author": null, "committer": null, "parents": [{"sha": "1c8cfe03512a84981824b03079a09237503e3898", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c8cfe03512a84981824b03079a09237503e3898", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c8cfe03512a84981824b03079a09237503e3898"}], "stats": {"total": 266, "additions": 61, "deletions": 205}, "files": [{"sha": "e0e2bd3ebc2f58e72c3acaeee1624327793abced", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7813d14ccc5089fc5ef8eceb5377f41ab6a9844d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7813d14ccc5089fc5ef8eceb5377f41ab6a9844d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7813d14ccc5089fc5ef8eceb5377f41ab6a9844d", "patch": "@@ -1,3 +1,14 @@\n+2003-12-22  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* c-common.c (flag_external_templates): Remove.\n+\t(flag_alt_external_templates): Likewise.\n+\t* c-common.h (flag_external_templates): Remove.\n+\t(flag_alt_external_templates): Likewise.\n+\t* c-opts.c (c_common_handle_option): Unsupport\n+\t-falt-external-templates and -ftemplates.\n+\t* doc/invoke.texi: Remove mention of -fexternal-templates and\n+\t-falt-external-templates.\n+\t\n 2003-12-22  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR target/13466"}, {"sha": "ce90433c85541a1828e5099dcc96775a21fa9d09", "filename": "gcc/c-common.c", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7813d14ccc5089fc5ef8eceb5377f41ab6a9844d/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7813d14ccc5089fc5ef8eceb5377f41ab6a9844d/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=7813d14ccc5089fc5ef8eceb5377f41ab6a9844d", "patch": "@@ -510,17 +510,6 @@ int flag_no_gnu_keywords;\n \n int flag_implement_inlines = 1;\n \n-/* Nonzero means do emit exported implementations of templates, instead of\n-   multiple static copies in each file that needs a definition.  */\n-\n-int flag_external_templates;\n-\n-/* Nonzero means that the decision to emit or not emit the implementation of a\n-   template depends on where the template is instantiated, rather than where\n-   it is defined.  */\n-\n-int flag_alt_external_templates;\n-\n /* Nonzero means that implicit instantiations will be emitted if needed.  */\n \n int flag_implicit_templates = 1;"}, {"sha": "e3ae91fb31105e062948f639e33defb2cd4cd02d", "filename": "gcc/c-common.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7813d14ccc5089fc5ef8eceb5377f41ab6a9844d/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7813d14ccc5089fc5ef8eceb5377f41ab6a9844d/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=7813d14ccc5089fc5ef8eceb5377f41ab6a9844d", "patch": "@@ -674,17 +674,6 @@ extern int flag_no_gnu_keywords;\n \n extern int flag_implement_inlines;\n \n-/* Nonzero means do emit exported implementations of templates, instead of\n-   multiple static copies in each file that needs a definition.  */\n-\n-extern int flag_external_templates;\n-\n-/* Nonzero means that the decision to emit or not emit the implementation of a\n-   template depends on where the template is instantiated, rather than where\n-   it is defined.  */\n-\n-extern int flag_alt_external_templates;\n-\n /* Nonzero means that implicit instantiations will be emitted if needed.  */\n \n extern int flag_implicit_templates;"}, {"sha": "59bce76607ba0141c2f321c3650a856b41aa8c09", "filename": "gcc/c-opts.c", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7813d14ccc5089fc5ef8eceb5377f41ab6a9844d/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7813d14ccc5089fc5ef8eceb5377f41ab6a9844d/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=7813d14ccc5089fc5ef8eceb5377f41ab6a9844d", "patch": "@@ -672,7 +672,9 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n       /* Fall through.  */\n \n     case OPT_fall_virtual:\n+    case OPT_falt_external_templates:\n     case OPT_fenum_int_equiv:\n+    case OPT_fexternal_templates:\n     case OPT_fguiding_decls:\n     case OPT_fhonor_std:\n     case OPT_fhuge_objects:\n@@ -697,15 +699,6 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n       flag_access_control = value;\n       break;\n \n-    case OPT_falt_external_templates:\n-      flag_alt_external_templates = value;\n-      if (value)\n-\tflag_external_templates = true;\n-    cp_deprecated:\n-      warning (\"switch \\\"%s\\\" is deprecated, please see documentation \"\n-\t       \"for details\", option->opt_text);\n-      break;\n-\n     case OPT_fasm:\n       flag_no_asm = !value;\n       break;\n@@ -799,10 +792,6 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n       flag_enforce_eh_specs = value;\n       break;\n \n-    case OPT_fexternal_templates:\n-      flag_external_templates = value;\n-      goto cp_deprecated;\n-\n     case OPT_ffixed_form:\n     case OPT_ffixed_line_length_:\n       /* Fortran front end options ignored when preprocessing only.  */"}, {"sha": "9e39313868a9dc41d5858ac99eef1fe1119123fa", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7813d14ccc5089fc5ef8eceb5377f41ab6a9844d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7813d14ccc5089fc5ef8eceb5377f41ab6a9844d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7813d14ccc5089fc5ef8eceb5377f41ab6a9844d", "patch": "@@ -1,5 +1,15 @@\n 2003-12-22  Mark Mitchell  <mark@codesourcery.com>\n \n+\t* decl.c (start_function): Do not check\n+\tflag_alt_external_templates or flag_external_templates.\n+\t* decl2.c (warn_if_unknown_interface): Likewise.\n+\t* lex.c (extract_interface_info): Likewise.\n+\t* pt.c (lookup_template_class): Likewise.\n+\n+\tPR c++/12862\n+\t* name-lookup.c (pushdecl): Look up all namespace-scope entities\n+\tin their corresponding namespace.\n+\n \tPR c++/12397\n \t* typeck.c (finish_class_member_access_expr): Don't tree\n \tIDENTIFIER_NODEs as non-dependent expressions."}, {"sha": "09b002201cc10e58cfa92dd28531429945e2c91e", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7813d14ccc5089fc5ef8eceb5377f41ab6a9844d/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7813d14ccc5089fc5ef8eceb5377f41ab6a9844d/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=7813d14ccc5089fc5ef8eceb5377f41ab6a9844d", "patch": "@@ -10310,8 +10310,7 @@ start_function (tree declspecs, tree declarator, tree attrs, int flags)\n      If it belongs to someone else's interface, it is also external.\n      This only affects inlines and template instantiations.  */\n   else if (interface_unknown == 0\n-\t   && (! DECL_TEMPLATE_INSTANTIATION (decl1)\n-\t       || flag_alt_external_templates))\n+\t   && ! DECL_TEMPLATE_INSTANTIATION (decl1))\n     {\n       if (DECL_DECLARED_INLINE_P (decl1) \n \t  || DECL_TEMPLATE_INSTANTIATION (decl1)\n@@ -10332,8 +10331,7 @@ start_function (tree declspecs, tree declarator, tree attrs, int flags)\n       DECL_INTERFACE_KNOWN (decl1) = 1;\n     }\n   else if (interface_unknown && interface_only\n-\t   && (! DECL_TEMPLATE_INSTANTIATION (decl1)\n-\t       || flag_alt_external_templates))\n+\t   && ! DECL_TEMPLATE_INSTANTIATION (decl1))\n     {\n       /* If MULTIPLE_SYMBOL_SPACES is defined and we saw a #pragma\n \t interface, we will have interface_only set but not"}, {"sha": "92b661d72989bed8dfdb61158a37c735cec43688", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7813d14ccc5089fc5ef8eceb5377f41ab6a9844d/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7813d14ccc5089fc5ef8eceb5377f41ab6a9844d/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=7813d14ccc5089fc5ef8eceb5377f41ab6a9844d", "patch": "@@ -167,23 +167,8 @@ warn_if_unknown_interface (tree decl)\n   if (already_warned++)\n     return;\n \n-  if (flag_alt_external_templates)\n-    {\n-      tree til = tinst_for_decl ();\n-      location_t saved_loc = input_location;\n-\n-      if (til)\n-\t{\n-\t  input_line = TINST_LINE (til);\n-\t  input_filename = TINST_FILE (til);\n-\t}\n-      warning (\"template `%#D' instantiated in file without #pragma interface\",\n-\t\t  decl);\n-      input_location = saved_loc;\n-    }\n-  else\n-    cp_warning_at (\"template `%#D' defined in file without #pragma interface\",\n-\t\t   decl);\n+  cp_warning_at (\"template `%#D' defined in file without #pragma interface\",\n+\t\t decl);\n }\n \n /* A subroutine of the parser, to handle a component list.  */"}, {"sha": "d22f5b063c1d49c5dca8d33f05e070631a67ba40", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7813d14ccc5089fc5ef8eceb5377f41ab6a9844d/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7813d14ccc5089fc5ef8eceb5377f41ab6a9844d/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=7813d14ccc5089fc5ef8eceb5377f41ab6a9844d", "patch": "@@ -436,18 +436,9 @@ cxx_init (void)\n void\n extract_interface_info (void)\n {\n-  struct c_fileinfo *finfo = 0;\n-\n-  if (flag_alt_external_templates)\n-    {\n-      tree til = tinst_for_decl ();\n-\n-      if (til)\n-\tfinfo = get_fileinfo (TINST_FILE (til));\n-    }\n-  if (!finfo)\n-    finfo = get_fileinfo (input_filename);\n+  struct c_fileinfo *finfo;\n \n+  finfo = get_fileinfo (input_filename);\n   interface_only = finfo->interface_only;\n   interface_unknown = finfo->interface_unknown;\n }"}, {"sha": "0be758f450d3398124346d9bf5e8cfb0a0847a2d", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7813d14ccc5089fc5ef8eceb5377f41ab6a9844d/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7813d14ccc5089fc5ef8eceb5377f41ab6a9844d/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=7813d14ccc5089fc5ef8eceb5377f41ab6a9844d", "patch": "@@ -590,8 +590,7 @@ pushdecl (tree x)\n \n       /* In case this decl was explicitly namespace-qualified, look it\n \t up in its namespace context.  */\n-      if (TREE_CODE (x) == VAR_DECL && DECL_NAMESPACE_SCOPE_P (x)\n-\t  && namespace_bindings_p ())\n+      if (DECL_NAMESPACE_SCOPE_P (x) && namespace_bindings_p ())\n \tt = namespace_binding (name, DECL_CONTEXT (x));\n       else\n \tt = lookup_name_current_level (name);"}, {"sha": "e7a886380c2f3145fda0bc93e2c07ced3fc8535e", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 58, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7813d14ccc5089fc5ef8eceb5377f41ab6a9844d/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7813d14ccc5089fc5ef8eceb5377f41ab6a9844d/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=7813d14ccc5089fc5ef8eceb5377f41ab6a9844d", "patch": "@@ -4485,19 +4485,7 @@ lookup_template_class (tree d1,\n \t is set up.  */\n       if (TREE_CODE (t) != ENUMERAL_TYPE)\n \tDECL_NAME (type_decl) = classtype_mangled_name (t);\n-      if (!is_partial_instantiation)\n-\t{\n-\t  /* For backwards compatibility; code that uses\n-\t     -fexternal-templates expects looking up a template to\n-\t     instantiate it.  I think DDD still relies on this.\n-\t     (jason 8/20/1998) */\n-\t  if (TREE_CODE (t) != ENUMERAL_TYPE\n-\t      && flag_external_templates\n-\t      && CLASSTYPE_INTERFACE_KNOWN (TREE_TYPE (template))\n-\t      && ! CLASSTYPE_INTERFACE_ONLY (TREE_TYPE (template)))\n-\t    add_pending_template (t);\n-\t}\n-      else\n+      if (is_partial_instantiation)\n \t/* If the type makes use of template parameters, the\n \t   code that generates debugging information will crash.  */\n \tDECL_IGNORED_P (TYPE_STUB_DECL (t)) = 1;\n@@ -5279,24 +5267,7 @@ instantiate_class_template (tree type)\n \targs = inner_args;\n     }\n \n-  if (flag_external_templates)\n-    {\n-      if (flag_alt_external_templates)\n-\t{\n-\t  CLASSTYPE_INTERFACE_ONLY (type) = interface_only;\n-\t  SET_CLASSTYPE_INTERFACE_UNKNOWN_X (type, interface_unknown);\n-\t}\n-      else\n-\t{\n-\t  CLASSTYPE_INTERFACE_ONLY (type) = CLASSTYPE_INTERFACE_ONLY (pattern);\n-\t  SET_CLASSTYPE_INTERFACE_UNKNOWN_X\n-\t    (type, CLASSTYPE_INTERFACE_UNKNOWN (pattern));\n-\t}\n-    }\n-  else\n-    {\n-      SET_CLASSTYPE_INTERFACE_UNKNOWN (type);\n-    }\n+  SET_CLASSTYPE_INTERFACE_UNKNOWN (type);\n \n   /* Set the input location to the template definition. This is needed\n      if tsubsting causes an error.  */\n@@ -8642,9 +8613,6 @@ instantiate_template (tree tmpl, tree targ_ptr, tsubst_flags_t complain)\n      template, not the most general template.  */\n   DECL_TI_TEMPLATE (fndecl) = tmpl;\n \n-  if (flag_external_templates)\n-    add_pending_template (fndecl);\n-\n   /* If we've just instantiated the main entry point for a function,\n      instantiate all the alternate entry points as well.  We do this\n      by cloning the instantiation of the main entry point, not by\n@@ -10529,9 +10497,6 @@ do_decl_instantiation (tree decl, tree storage)\n       return;\n     }\n \n-  if (flag_external_templates)\n-    return;\n-\n   if (storage == NULL_TREE)\n     ;\n   else if (storage == ridpointers[(int) RID_EXTERN])\n@@ -10600,11 +10565,6 @@ do_type_instantiation (tree t, tree storage, tsubst_flags_t complain)\n \n   complete_type (t);\n \n-  /* With -fexternal-templates, explicit instantiations are treated the same\n-     as implicit ones.  */\n-  if (flag_external_templates)\n-    return;\n-\n   if (!COMPLETE_TYPE_P (t))\n     {\n       if (complain & tf_error)\n@@ -10987,22 +10947,6 @@ instantiate_decl (tree d, int defer_ok)\n       else\n \trepo_template_used (d);\n \n-      if (flag_external_templates && ! DECL_INTERFACE_KNOWN (d))\n-\t{\n-\t  if (flag_alt_external_templates)\n-\t    {\n-\t      if (interface_unknown)\n-\t\twarn_if_unknown_interface (d);\n-\t    }\n-\t  else if (DECL_INTERFACE_KNOWN (code_pattern))\n-\t    {\n-\t      DECL_INTERFACE_KNOWN (d) = 1;\n-\t      DECL_NOT_REALLY_EXTERN (d) = ! DECL_EXTERNAL (code_pattern);\n-\t    }\n-\t  else\n-\t    warn_if_unknown_interface (code_pattern);\n-\t}\n-\n       if (at_eof)\n \timport_export_decl (d);\n     }"}, {"sha": "5d3583f391b4293185010e27bbe4db76166b14e9", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7813d14ccc5089fc5ef8eceb5377f41ab6a9844d/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7813d14ccc5089fc5ef8eceb5377f41ab6a9844d/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=7813d14ccc5089fc5ef8eceb5377f41ab6a9844d", "patch": "@@ -174,8 +174,7 @@ in the following sections.\n @gccoptlist{-fabi-version=@var{n}  -fno-access-control  -fcheck-new @gol\n -fconserve-space  -fno-const-strings @gol\n -fno-elide-constructors @gol\n--fno-enforce-eh-specs  -fexternal-templates @gol\n--falt-external-templates @gol\n+-fno-enforce-eh-specs @gol\n -ffor-scope  -fno-for-scope  -fno-gnu-keywords @gol\n -fno-implicit-templates @gol\n -fno-implicit-inline-templates @gol\n@@ -1336,24 +1335,6 @@ option violates the C++ standard, but may be useful for reducing code\n size in production builds, much like defining @samp{NDEBUG}.  The compiler\n will still optimize based on the exception specifications.\n \n-@item -fexternal-templates\n-@opindex fexternal-templates\n-\n-Cause @samp{#pragma interface} and @samp{implementation} to apply to\n-template instantiation; template instances are emitted or not according\n-to the location of the template definition.  @xref{Template\n-Instantiation}, for more information.\n-\n-This option is deprecated.\n-\n-@item -falt-external-templates\n-@opindex falt-external-templates\n-Similar to @option{-fexternal-templates}, but template instances are\n-emitted or not according to the place where they are first instantiated.\n-@xref{Template Instantiation}, for more information.\n-\n-This option is deprecated.\n-\n @item -ffor-scope\n @itemx -fno-for-scope\n @opindex ffor-scope"}, {"sha": "c96f5ec2a2ab37081ddf8453f410f9119ba355e1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7813d14ccc5089fc5ef8eceb5377f41ab6a9844d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7813d14ccc5089fc5ef8eceb5377f41ab6a9844d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7813d14ccc5089fc5ef8eceb5377f41ab6a9844d", "patch": "@@ -1,5 +1,11 @@\n 2003-12-22  Mark Mitchell  <mark@codesourcery.com>\n \n+\t* g++.old-deja/g++.jason/template18.C: Remove.\n+\t* g++.old-deja/g++.jason/template37.C: Likewise.\n+\n+\tPR c++/12862\n+\t* g++.dg/lookup/ns1.C: New test.\n+\n \tPR c++/12397\n \t* g++.dg/template/lookup3.C: New test.\n "}, {"sha": "feeaf751cadd35e6a1da0a22a56695c200b94ce0", "filename": "gcc/testsuite/g++.dg/lookup/ns1.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7813d14ccc5089fc5ef8eceb5377f41ab6a9844d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fns1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7813d14ccc5089fc5ef8eceb5377f41ab6a9844d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fns1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fns1.C?ref=7813d14ccc5089fc5ef8eceb5377f41ab6a9844d", "patch": "@@ -0,0 +1,22 @@\n+// PR c++/12862\n+\n+typedef int Thingo;\n+  \n+namespace A\n+{\n+    void\n+    Thingo();\n+}\n+  \n+void\n+A::Thingo()\n+{\n+  ;\n+}\n+  \n+int\n+main()\n+{\n+  A::Thingo();\n+  return 0;\n+}"}, {"sha": "bf293ed2b860efe0833b8496fa89230ff7ca5aba", "filename": "gcc/testsuite/g++.old-deja/g++.jason/template18.C", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8cfe03512a84981824b03079a09237503e3898/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Ftemplate18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8cfe03512a84981824b03079a09237503e3898/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Ftemplate18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Ftemplate18.C?ref=1c8cfe03512a84981824b03079a09237503e3898", "patch": "@@ -1,18 +0,0 @@\n-// { dg-do link }\n-// { dg-options \"-g -fno-inline -Wno-deprecated -fexternal-templates\" }\n-// GROUPS passed templates\n-// Bug: g++ emits template instances when it shouldn't.\n-// Suppressed-instantiation tests like this are known to break on\n-// Cygwin, because of the MULTIPLE_SYMBOL_SPACES stuff.  This is OK.\n-\n-\n-#pragma implementation \"irrelevant_file\"\n-#line 1 \"template18.h\"\n-#pragma interface\n-template <class T> inline T min (T a, T b) { return a<b?a:b; }\n-#line 13 \"template18.C\"\n-\n-main()\n-{\n-  min (1, 1); \t// { dg-error \"\" \"\" { target *-*-* } 0 } should produce an undefined symbol error.\n-}"}, {"sha": "23309a46b686236d30c0d9a96b2fdc7973ca4ec4", "filename": "gcc/testsuite/g++.old-deja/g++.jason/template37.C", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8cfe03512a84981824b03079a09237503e3898/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Ftemplate37.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8cfe03512a84981824b03079a09237503e3898/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Ftemplate37.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Ftemplate37.C?ref=1c8cfe03512a84981824b03079a09237503e3898", "patch": "@@ -1,40 +0,0 @@\n-// { dg-do run  }\n-// { dg-options \"-Wno-deprecated -fexternal-templates\" }\n-// { dg-warning \"switch.*deprecated\" \"\" { target *-*-* } 0 }\n-\n-// PRMS Id: 9930\n-// Test of -fexternal-templates hackery in new template code\n-\n-  #pragma implementation \"foo.hh\"\n-  #pragma interface \"foo.hh\"\n-\n-  template<class T>\n-  class ONE\n-  {\n-    public:\n-      static void func();\n-  };\n-\n-  template<class T>\n-  void ONE<T>::func()\n-  {\n-  }\n-\n-  template <>\n-  class ONE<int>\n-  {\n-    public:\n-      static void func();\n-  };\n-\n-  void ONE<int>::func()\n-  {\n-  }\n-\n-int main()\n-  {\n-    ONE<char>::func();\n-    ONE<int>::func();\n-\n-    return 0;\n-  }"}]}