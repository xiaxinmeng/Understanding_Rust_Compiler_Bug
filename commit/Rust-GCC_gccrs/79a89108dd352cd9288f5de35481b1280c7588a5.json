{"sha": "79a89108dd352cd9288f5de35481b1280c7588a5", "node_id": "C_kwDOANBUbNoAKDc5YTg5MTA4ZGQzNTJjZDkyODhmNWRlMzU0ODFiMTI4MGM3NTg4YTU", "commit": {"author": {"name": "Siddhesh Poyarekar", "email": "siddhesh@gotplt.org", "date": "2021-12-17T04:04:44Z"}, "committer": {"name": "Siddhesh Poyarekar", "email": "siddhesh@gotplt.org", "date": "2021-12-17T04:04:44Z"}, "message": "__builtin_dynamic_object_size: Recognize builtin\n\nRecognize the __builtin_dynamic_object_size builtin and add paths in the\nobject size path to deal with it, but treat it like\n__builtin_object_size for now.  Also add tests to provide the same\ntesting coverage for the new builtin name.\n\ngcc/ChangeLog:\n\n\t* builtins.def (BUILT_IN_DYNAMIC_OBJECT_SIZE): New builtin.\n\t* tree-object-size.h: Move object size type bits enum from\n\ttree-object-size.c and add new value OST_DYNAMIC.\n\t* builtins.c (expand_builtin, fold_builtin_2): Handle it.\n\t(fold_builtin_object_size): Handle new builtin and adjust for\n\tchange to compute_builtin_object_size.\n\t* tree-object-size.c: Include builtins.h.\n\t(compute_builtin_object_size): Adjust.\n\t(early_object_sizes_execute_one,\n\tdynamic_object_sizes_execute_one): New functions.\n\t(object_sizes_execute): Rename insert_min_max_p argument to\n\tearly.  Handle BUILT_IN_DYNAMIC_OBJECT_SIZE and call the new\n\tfunctions.\n\t* doc/extend.texi (__builtin_dynamic_object_size): Document new\n\tbuiltin.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/ext/builtin-dynamic-object-size1.C: New test.\n\t* g++.dg/ext/builtin-dynamic-object-size2.C: Likewise.\n\t* gcc.dg/builtin-dynamic-alloc-size.c: Likewise.\n\t* gcc.dg/builtin-dynamic-object-size-1.c: Likewise.\n\t* gcc.dg/builtin-dynamic-object-size-10.c: Likewise.\n\t* gcc.dg/builtin-dynamic-object-size-11.c: Likewise.\n\t* gcc.dg/builtin-dynamic-object-size-12.c: Likewise.\n\t* gcc.dg/builtin-dynamic-object-size-13.c: Likewise.\n\t* gcc.dg/builtin-dynamic-object-size-14.c: Likewise.\n\t* gcc.dg/builtin-dynamic-object-size-15.c: Likewise.\n\t* gcc.dg/builtin-dynamic-object-size-16.c: Likewise.\n\t* gcc.dg/builtin-dynamic-object-size-17.c: Likewise.\n\t* gcc.dg/builtin-dynamic-object-size-18.c: Likewise.\n\t* gcc.dg/builtin-dynamic-object-size-19.c: Likewise.\n\t* gcc.dg/builtin-dynamic-object-size-2.c: Likewise.\n\t* gcc.dg/builtin-dynamic-object-size-3.c: Likewise.\n\t* gcc.dg/builtin-dynamic-object-size-4.c: Likewise.\n\t* gcc.dg/builtin-dynamic-object-size-5.c: Likewise.\n\t* gcc.dg/builtin-dynamic-object-size-6.c: Likewise.\n\t* gcc.dg/builtin-dynamic-object-size-7.c: Likewise.\n\t* gcc.dg/builtin-dynamic-object-size-8.c: Likewise.\n\t* gcc.dg/builtin-dynamic-object-size-9.c: Likewise.\n\t* gcc.dg/builtin-object-size-16.c: Adjust to allow inclusion\n\tfrom builtin-dynamic-object-size-16.c.\n\t* gcc.dg/builtin-object-size-17.c: Likewise.\n\nSigned-off-by: Siddhesh Poyarekar <siddhesh@gotplt.org>", "tree": {"sha": "4aa9282ccfac93a496b2c43b67a4d508cbdc10e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4aa9282ccfac93a496b2c43b67a4d508cbdc10e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79a89108dd352cd9288f5de35481b1280c7588a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79a89108dd352cd9288f5de35481b1280c7588a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79a89108dd352cd9288f5de35481b1280c7588a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79a89108dd352cd9288f5de35481b1280c7588a5/comments", "author": {"login": "siddhesh", "id": 158582, "node_id": "MDQ6VXNlcjE1ODU4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/158582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/siddhesh", "html_url": "https://github.com/siddhesh", "followers_url": "https://api.github.com/users/siddhesh/followers", "following_url": "https://api.github.com/users/siddhesh/following{/other_user}", "gists_url": "https://api.github.com/users/siddhesh/gists{/gist_id}", "starred_url": "https://api.github.com/users/siddhesh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/siddhesh/subscriptions", "organizations_url": "https://api.github.com/users/siddhesh/orgs", "repos_url": "https://api.github.com/users/siddhesh/repos", "events_url": "https://api.github.com/users/siddhesh/events{/privacy}", "received_events_url": "https://api.github.com/users/siddhesh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "siddhesh", "id": 158582, "node_id": "MDQ6VXNlcjE1ODU4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/158582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/siddhesh", "html_url": "https://github.com/siddhesh", "followers_url": "https://api.github.com/users/siddhesh/followers", "following_url": "https://api.github.com/users/siddhesh/following{/other_user}", "gists_url": "https://api.github.com/users/siddhesh/gists{/gist_id}", "starred_url": "https://api.github.com/users/siddhesh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/siddhesh/subscriptions", "organizations_url": "https://api.github.com/users/siddhesh/orgs", "repos_url": "https://api.github.com/users/siddhesh/repos", "events_url": "https://api.github.com/users/siddhesh/events{/privacy}", "received_events_url": "https://api.github.com/users/siddhesh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "422f9eb7011b76c12ff00ffaee2bcc9cdddf16d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/422f9eb7011b76c12ff00ffaee2bcc9cdddf16d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/422f9eb7011b76c12ff00ffaee2bcc9cdddf16d5"}], "stats": {"total": 420, "additions": 378, "deletions": 42}, "files": [{"sha": "00f6c5552bf5e5bbd3b2fcafd70177ac65f8fd04", "filename": "gcc/builtins.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79a89108dd352cd9288f5de35481b1280c7588a5/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79a89108dd352cd9288f5de35481b1280c7588a5/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=79a89108dd352cd9288f5de35481b1280c7588a5", "patch": "@@ -178,7 +178,7 @@ static rtx expand_builtin_memory_chk (tree, rtx, machine_mode,\n \t\t\t\t      enum built_in_function);\n static void maybe_emit_chk_warning (tree, enum built_in_function);\n static void maybe_emit_sprintf_chk_warning (tree, enum built_in_function);\n-static tree fold_builtin_object_size (tree, tree);\n+static tree fold_builtin_object_size (tree, tree, enum built_in_function);\n \n unsigned HOST_WIDE_INT target_newline;\n unsigned HOST_WIDE_INT target_percent;\n@@ -7909,6 +7909,7 @@ expand_builtin (tree exp, rtx target, rtx subtarget, machine_mode mode,\n       return const0_rtx;\n \n     case BUILT_IN_OBJECT_SIZE:\n+    case BUILT_IN_DYNAMIC_OBJECT_SIZE:\n       return expand_builtin_object_size (exp);\n \n     case BUILT_IN_MEMCPY_CHK:\n@@ -9315,7 +9316,8 @@ fold_builtin_2 (location_t loc, tree expr, tree fndecl, tree arg0, tree arg1)\n       break;\n \n     case BUILT_IN_OBJECT_SIZE:\n-      return fold_builtin_object_size (arg0, arg1);\n+    case BUILT_IN_DYNAMIC_OBJECT_SIZE:\n+      return fold_builtin_object_size (arg0, arg1, fcode);\n \n     case BUILT_IN_ATOMIC_ALWAYS_LOCK_FREE:\n       return fold_builtin_atomic_always_lock_free (arg0, arg1);\n@@ -10253,7 +10255,7 @@ maybe_emit_sprintf_chk_warning (tree exp, enum built_in_function fcode)\n    if possible.  */\n \n static tree\n-fold_builtin_object_size (tree ptr, tree ost)\n+fold_builtin_object_size (tree ptr, tree ost, enum built_in_function fcode)\n {\n   tree bytes;\n   int object_size_type;\n@@ -10277,6 +10279,9 @@ fold_builtin_object_size (tree ptr, tree ost)\n   if (TREE_SIDE_EFFECTS (ptr))\n     return build_int_cst_type (size_type_node, object_size_type < 2 ? -1 : 0);\n \n+  if (fcode == BUILT_IN_DYNAMIC_OBJECT_SIZE)\n+    object_size_type |= OST_DYNAMIC;\n+\n   if (TREE_CODE (ptr) == ADDR_EXPR)\n     {\n       compute_builtin_object_size (ptr, object_size_type, &bytes);"}, {"sha": "a92948de2b806c0c100f0488da73329a4cbf6015", "filename": "gcc/builtins.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79a89108dd352cd9288f5de35481b1280c7588a5/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79a89108dd352cd9288f5de35481b1280c7588a5/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=79a89108dd352cd9288f5de35481b1280c7588a5", "patch": "@@ -972,6 +972,7 @@ DEF_BUILTIN_STUB (BUILT_IN_STRNCMP_EQ, \"__builtin_strncmp_eq\")\n \n /* Object size checking builtins.  */\n DEF_GCC_BUILTIN\t       (BUILT_IN_OBJECT_SIZE, \"object_size\", BT_FN_SIZE_CONST_PTR_INT, ATTR_CONST_NOTHROW_LEAF_LIST)\n+DEF_GCC_BUILTIN\t       (BUILT_IN_DYNAMIC_OBJECT_SIZE, \"dynamic_object_size\", BT_FN_SIZE_CONST_PTR_INT, ATTR_PURE_NOTHROW_LEAF_LIST)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_MEMCPY_CHK, \"__memcpy_chk\", BT_FN_PTR_PTR_CONST_PTR_SIZE_SIZE, ATTR_NOTHROW_NONNULL_LEAF)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_MEMMOVE_CHK, \"__memmove_chk\", BT_FN_PTR_PTR_CONST_PTR_SIZE_SIZE, ATTR_NOTHROW_NONNULL_LEAF)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_MEMPCPY_CHK, \"__mempcpy_chk\", BT_FN_PTR_PTR_CONST_PTR_SIZE_SIZE, ATTR_RETNONNULL_NOTHROW_LEAF)"}, {"sha": "f52384f7629995592a62e71b5a3338b7bea3100d", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79a89108dd352cd9288f5de35481b1280c7588a5/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79a89108dd352cd9288f5de35481b1280c7588a5/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=79a89108dd352cd9288f5de35481b1280c7588a5", "patch": "@@ -12713,6 +12713,7 @@ __atomic_store_n(&lockvar, 0, __ATOMIC_RELEASE|__ATOMIC_HLE_RELEASE);\n @node Object Size Checking\n @section Object Size Checking Built-in Functions\n @findex __builtin_object_size\n+@findex __builtin_dynamic_object_size\n @findex __builtin___memcpy_chk\n @findex __builtin___mempcpy_chk\n @findex __builtin___memmove_chk\n@@ -12780,6 +12781,18 @@ assert (__builtin_object_size (q, 1) == sizeof (var.b));\n @end smallexample\n @end deftypefn\n \n+@deftypefn {Built-in Function} {size_t} __builtin_dynamic_object_size (const void * @var{ptr}, int @var{type})\n+is similar to @code{__builtin_object_size} in that it returns a number of bytes\n+from @var{ptr} to the end of the object @var{ptr} pointer points to, except\n+that the size returned may not be a constant.  This results in successful\n+evaluation of object size estimates in a wider range of use cases and can be\n+more precise than @code{__builtin_object_size}, but it incurs a performance\n+penalty since it may add a runtime overhead on size computation.  Semantics of\n+@var{type} as well as return values in case it is not possible to determine\n+which objects @var{ptr} points to at compile time are the same as in the case\n+of @code{__builtin_object_size}.\n+@end deftypefn\n+\n There are built-in functions added for many common string operation\n functions, e.g., for @code{memcpy} @code{__builtin___memcpy_chk}\n built-in is provided.  This built-in has an additional last argument,"}, {"sha": "b11ac200751039ca734f242c4133f07a7fd78bfb", "filename": "gcc/testsuite/g++.dg/ext/builtin-dynamic-object-size1.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79a89108dd352cd9288f5de35481b1280c7588a5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin-dynamic-object-size1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79a89108dd352cd9288f5de35481b1280c7588a5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin-dynamic-object-size1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin-dynamic-object-size1.C?ref=79a89108dd352cd9288f5de35481b1280c7588a5", "patch": "@@ -0,0 +1,5 @@\n+// { dg-do run }\n+// { dg-options \"-O2\" }\n+\n+#define __builtin_object_size __builtin_dynamic_object_size\n+#include \"builtin-object-size1.C\""}, {"sha": "6e52cf38533050e870696826225a482688590ba3", "filename": "gcc/testsuite/g++.dg/ext/builtin-dynamic-object-size2.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79a89108dd352cd9288f5de35481b1280c7588a5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin-dynamic-object-size2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79a89108dd352cd9288f5de35481b1280c7588a5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin-dynamic-object-size2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin-dynamic-object-size2.C?ref=79a89108dd352cd9288f5de35481b1280c7588a5", "patch": "@@ -0,0 +1,5 @@\n+// { dg-do run }\n+// { dg-options \"-O2\" }\n+\n+#define __builtin_object_size __builtin_dynamic_object_size\n+#include \"builtin-object-size2.C\""}, {"sha": "9d0eadd6be44379fa0b7c3aa3348b103a1940c30", "filename": "gcc/testsuite/gcc.dg/builtin-dynamic-alloc-size.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79a89108dd352cd9288f5de35481b1280c7588a5/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-alloc-size.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79a89108dd352cd9288f5de35481b1280c7588a5/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-alloc-size.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-alloc-size.c?ref=79a89108dd352cd9288f5de35481b1280c7588a5", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile }\n+   { dg-require-effective-target alloca }\n+   { dg-additional-options \"-O2 -fdump-tree-optimized\" } */\n+\n+#define __builtin_object_size __builtin_dynamic_object_size\n+#include \"builtin-alloc-size.c\"\n+/* { dg-final { scan-tree-dump-not \"abort\" \"optimized\" } } */"}, {"sha": "7cc8b1c94884d6cbec3c105d06fe10213b8be50c", "filename": "gcc/testsuite/gcc.dg/builtin-dynamic-object-size-1.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79a89108dd352cd9288f5de35481b1280c7588a5/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79a89108dd352cd9288f5de35481b1280c7588a5/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-1.c?ref=79a89108dd352cd9288f5de35481b1280c7588a5", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-require-effective-target alloca } */\n+\n+#define __builtin_object_size __builtin_dynamic_object_size\n+#include \"builtin-object-size-1.c\""}, {"sha": "bc880a589aed9eaed553115adb8655437cff5f37", "filename": "gcc/testsuite/gcc.dg/builtin-dynamic-object-size-10.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79a89108dd352cd9288f5de35481b1280c7588a5/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79a89108dd352cd9288f5de35481b1280c7588a5/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-10.c?ref=79a89108dd352cd9288f5de35481b1280c7588a5", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-early_objsz-details\" } */\n+// { dg-skip-if \"packed attribute missing for drone_source_packet\" { \"epiphany-*-*\" } }\n+\n+#define __builtin_object_size __builtin_dynamic_object_size\n+#include \"builtin-object-size-10.c\"\n+\n+/* { dg-final { scan-tree-dump \"maximum object size 21\" \"early_objsz\" } } */\n+/* { dg-final { scan-tree-dump \"maximum subobject size 16\" \"early_objsz\" } } */"}, {"sha": "65dcec9fcaef1dbeffeaef171e68ca3eba2e7ef2", "filename": "gcc/testsuite/gcc.dg/builtin-dynamic-object-size-11.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79a89108dd352cd9288f5de35481b1280c7588a5/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79a89108dd352cd9288f5de35481b1280c7588a5/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-11.c?ref=79a89108dd352cd9288f5de35481b1280c7588a5", "patch": "@@ -0,0 +1,7 @@\n+/* PR48985 */\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu89\" } */\n+/* { dg-skip-if \"packed attribute missing for struct s\" { \"epiphany-*-*\" } } */\n+\n+#define __builtin_object_size __builtin_dynamic_object_size\n+#include \"builtin-object-size-11.c\""}, {"sha": "f0ce050a943f8d3e24e5bf427c77418454d3bcf3", "filename": "gcc/testsuite/gcc.dg/builtin-dynamic-object-size-12.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79a89108dd352cd9288f5de35481b1280c7588a5/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79a89108dd352cd9288f5de35481b1280c7588a5/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-12.c?ref=79a89108dd352cd9288f5de35481b1280c7588a5", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+#define __builtin_object_size __builtin_dynamic_object_size\n+#include \"builtin-object-size-12.c\""}, {"sha": "555e23522dc8f7b10dd0b8da2f0fd8be0c48cf39", "filename": "gcc/testsuite/gcc.dg/builtin-dynamic-object-size-13.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79a89108dd352cd9288f5de35481b1280c7588a5/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79a89108dd352cd9288f5de35481b1280c7588a5/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-13.c?ref=79a89108dd352cd9288f5de35481b1280c7588a5", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+#define __builtin_object_size __builtin_dynamic_object_size\n+#include \"builtin-object-size-13.c\""}, {"sha": "262072001914a1171fe9bc7bc22c9556fbf794ed", "filename": "gcc/testsuite/gcc.dg/builtin-dynamic-object-size-14.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79a89108dd352cd9288f5de35481b1280c7588a5/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79a89108dd352cd9288f5de35481b1280c7588a5/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-14.c?ref=79a89108dd352cd9288f5de35481b1280c7588a5", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+#define __builtin_object_size __builtin_dynamic_object_size\n+#include \"builtin-object-size-14.c\""}, {"sha": "cd8a941438dd0f4da4eb48e9b5429ccc4d7953d5", "filename": "gcc/testsuite/gcc.dg/builtin-dynamic-object-size-15.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79a89108dd352cd9288f5de35481b1280c7588a5/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79a89108dd352cd9288f5de35481b1280c7588a5/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-15.c?ref=79a89108dd352cd9288f5de35481b1280c7588a5", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+#define __builtin_object_size __builtin_dynamic_object_size\n+#include \"builtin-object-size-15.c\""}, {"sha": "cc775089410775aca14c1fbb722521ca4c74f7ca", "filename": "gcc/testsuite/gcc.dg/builtin-dynamic-object-size-16.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79a89108dd352cd9288f5de35481b1280c7588a5/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79a89108dd352cd9288f5de35481b1280c7588a5/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-16.c?ref=79a89108dd352cd9288f5de35481b1280c7588a5", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O0\" } */\n+\n+#define __builtin_object_size __builtin_dynamic_object_size\n+char ax2[];               /* { dg-warning \"assumed to have one element\" } */\n+#include \"builtin-object-size-16.c\""}, {"sha": "f5c57a8788d09e4814c19d70dcd2ee346cbd3569", "filename": "gcc/testsuite/gcc.dg/builtin-dynamic-object-size-17.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79a89108dd352cd9288f5de35481b1280c7588a5/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79a89108dd352cd9288f5de35481b1280c7588a5/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-17.c?ref=79a89108dd352cd9288f5de35481b1280c7588a5", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -fdump-tree-ssa\" } */\n+\n+char ax2[];               /* { dg-warning \"assumed to have one element\" } */\n+#define __builtin_object_size __builtin_dynamic_object_size\n+#include \"builtin-object-size-17.c\"\n+/* { dg-final { scan-tree-dump-not \"failure_on_line\" \"ssa\" } } */"}, {"sha": "70c1ebcff2126b948b9f6cf9ccce002aacd1c18d", "filename": "gcc/testsuite/gcc.dg/builtin-dynamic-object-size-18.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79a89108dd352cd9288f5de35481b1280c7588a5/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79a89108dd352cd9288f5de35481b1280c7588a5/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-18.c?ref=79a89108dd352cd9288f5de35481b1280c7588a5", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+/* __stpncpy_chk could return buf up to buf + 64, so\n+   the minimum object size might be far smaller than 64.  */\n+/* { dg-final { scan-tree-dump-not \"return 64;\" \"optimized\" } } */\n+\n+#define __builtin_object_size __builtin_dynamic_object_size\n+#include \"builtin-object-size-18.c\""}, {"sha": "44141a386072bea8fa48d5ff015be91d1cb52938", "filename": "gcc/testsuite/gcc.dg/builtin-dynamic-object-size-19.c", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79a89108dd352cd9288f5de35481b1280c7588a5/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79a89108dd352cd9288f5de35481b1280c7588a5/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-19.c?ref=79a89108dd352cd9288f5de35481b1280c7588a5", "patch": "@@ -0,0 +1,104 @@\n+/* PR tree-optimization/88372 - alloc_size attribute is ignored\n+   on function pointers { dg-do compile }\n+   { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+#define __builtin_object_size __builtin_dynamic_object_size\n+#include \"builtin-object-size-18.c\"\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+#define ATTR(...) __attribute__ ((__VA_ARGS__))\n+#define CONCAT(x, y) x ## y\n+#define CAT(x, y) CONCAT (x, y)\n+#define FAILNAME(name) CAT (call_ ## name ##_on_line_, __LINE__)\n+\n+#define FAIL(name) do {\t\t\t\t\\\n+    extern void FAILNAME (name) (void);\t\t\\\n+    FAILNAME (name)();\t\t\t\t\\\n+  } while (0)\n+\n+/* Macro to emit a call to function named\n+   call_in_true_branch_not_eliminated_on_line_NNN()\n+   for each call that's expected to be eliminated.  The dg-final\n+   scan-tree-dump-time directive at the bottom of the test verifies\n+   that no such call appears in output.  */\n+#define ELIM(expr)\t\t\t\t\t\t\t\\\n+  if (!(expr)) FAIL (in_true_branch_not_eliminated); else (void)0\n+\n+void sink (void*);\n+\n+#define T(alloc, n) do {\t\t\t\\\n+    void *p = alloc;\t\t\t\t\\\n+    sink (p);\t\t\t\t\t\\\n+    ELIM (n == __builtin_object_size (p, 0));\t\\\n+    ELIM (n == __builtin_object_size (p, 1));\t\\\n+    ELIM (n == __builtin_object_size (p, 2));\t\\\n+    ELIM (n == __builtin_object_size (p, 3));\t\\\n+  } while (0)\n+\n+\n+ATTR (alloc_size (1)) void* (*alloc_1_x)(size_t, size_t);\n+ATTR (alloc_size (2)) void* (*alloc_x_2)(size_t, size_t);\n+\n+/* Verify that things work when attribute alloc_size is applied\n+   to a typedef that is then used to declared a pointer.  */\n+typedef ATTR (alloc_size (1, 2)) void* (alloc_1_2_t)(size_t, size_t);\n+\n+void test_alloc_ptr (alloc_1_2_t *alloc_1_2)\n+{\n+  T (alloc_1_x (0, 0), 0);\n+  T (alloc_1_x (1, 0), 1);\n+  T (alloc_1_x (3, 0), 3);\n+  T (alloc_1_x (9, 5), 9);\n+\n+  T (alloc_x_2 (0, 0), 0);\n+  T (alloc_x_2 (1, 0), 0);\n+  T (alloc_x_2 (0, 1), 1);\n+  T (alloc_x_2 (9, 5), 5);\n+\n+  T (alloc_1_2 (0, 0), 0);\n+  T (alloc_1_2 (1, 0), 0);\n+  T (alloc_1_2 (0, 1), 0);\n+  T (alloc_1_2 (9, 5), 45);\n+}\n+\n+/* Verify that object size is detected even in indirect calls via\n+   function pointers to built-in allocation functions, even without\n+   explicit use of attribute alloc_size on the pointers.  */\n+\n+typedef void *(allocfn_1) (size_t);\n+typedef void *(allocfn_1_2) (size_t, size_t);\n+\n+static inline void *\n+call_alloc (allocfn_1 *fn1, allocfn_1_2 *fn2, size_t n1, size_t n2)\n+{\n+  return fn1 ? fn1 (n1) : fn2 (n1, n2);\n+}\n+\n+static inline void *\n+call_malloc (size_t n)\n+{\n+  return call_alloc (__builtin_malloc, 0, n, 0);\n+}\n+\n+static inline void *\n+call_calloc (size_t n1, size_t n2)\n+{\n+  return call_alloc (0, __builtin_calloc, n1, n2);\n+}\n+\n+void test_builtin_ptr (void)\n+{\n+  T (call_malloc (0), 0);\n+  T (call_malloc (1), 1);\n+  T (call_malloc (9), 9);\n+\n+  T (call_calloc (0, 0), 0);\n+  T (call_calloc (0, 1), 0);\n+  T (call_calloc (1, 0), 0);\n+  T (call_calloc (1, 1), 1);\n+  T (call_calloc (1, 3), 3);\n+  T (call_calloc (2, 3), 6);\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"not_eliminated\" \"optimized\" } } */"}, {"sha": "267dbf48ca7c2f4f0a79a03eed675c86c2f37dae", "filename": "gcc/testsuite/gcc.dg/builtin-dynamic-object-size-2.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79a89108dd352cd9288f5de35481b1280c7588a5/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79a89108dd352cd9288f5de35481b1280c7588a5/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-2.c?ref=79a89108dd352cd9288f5de35481b1280c7588a5", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-require-effective-target alloca } */\n+\n+#define __builtin_object_size __builtin_dynamic_object_size\n+#include \"builtin-object-size-2.c\""}, {"sha": "fb9dc56da7e31368b26097a28a630b8e6e6d12ae", "filename": "gcc/testsuite/gcc.dg/builtin-dynamic-object-size-3.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79a89108dd352cd9288f5de35481b1280c7588a5/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79a89108dd352cd9288f5de35481b1280c7588a5/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-3.c?ref=79a89108dd352cd9288f5de35481b1280c7588a5", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-require-effective-target alloca } */\n+\n+#define __builtin_object_size __builtin_dynamic_object_size\n+#include \"builtin-object-size-3.c\""}, {"sha": "870548b420690dfe116ca395c2fa49683f43b212", "filename": "gcc/testsuite/gcc.dg/builtin-dynamic-object-size-4.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79a89108dd352cd9288f5de35481b1280c7588a5/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79a89108dd352cd9288f5de35481b1280c7588a5/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-4.c?ref=79a89108dd352cd9288f5de35481b1280c7588a5", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-require-effective-target alloca } */\n+\n+#define __builtin_object_size __builtin_dynamic_object_size\n+#include \"builtin-object-size-4.c\""}, {"sha": "698b03c34be0d1c0e1a6114bb4a41acfd7a784ea", "filename": "gcc/testsuite/gcc.dg/builtin-dynamic-object-size-5.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79a89108dd352cd9288f5de35481b1280c7588a5/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79a89108dd352cd9288f5de35481b1280c7588a5/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-5.c?ref=79a89108dd352cd9288f5de35481b1280c7588a5", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile { target i?86-*-linux* i?86-*-gnu* x86_64-*-linux* } } */\n+/* { dg-options \"-O2\" } */\n+\n+#define __builtin_object_size __builtin_dynamic_object_size\n+#include \"builtin-object-size-5.c\"\n+\n+/* { dg-final { scan-assembler-not \"abort\" } } */"}, {"sha": "6a275ce5b37d3dbaded0d6277cda16579a1b82e3", "filename": "gcc/testsuite/gcc.dg/builtin-dynamic-object-size-6.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79a89108dd352cd9288f5de35481b1280c7588a5/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79a89108dd352cd9288f5de35481b1280c7588a5/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-6.c?ref=79a89108dd352cd9288f5de35481b1280c7588a5", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+#define __builtin_object_size __builtin_dynamic_object_size\n+#include \"builtin-object-size-6.c\""}, {"sha": "e2a65994687b65278942ef8ae55c51e6df0264fb", "filename": "gcc/testsuite/gcc.dg/builtin-dynamic-object-size-7.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79a89108dd352cd9288f5de35481b1280c7588a5/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79a89108dd352cd9288f5de35481b1280c7588a5/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-7.c?ref=79a89108dd352cd9288f5de35481b1280c7588a5", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+#define __builtin_object_size __builtin_dynamic_object_size\n+#include \"builtin-object-size-7.c\""}, {"sha": "e7af383d9b69d35a226dd5b1f917614585c8f248", "filename": "gcc/testsuite/gcc.dg/builtin-dynamic-object-size-8.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79a89108dd352cd9288f5de35481b1280c7588a5/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79a89108dd352cd9288f5de35481b1280c7588a5/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-8.c?ref=79a89108dd352cd9288f5de35481b1280c7588a5", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+#define __builtin_object_size __builtin_dynamic_object_size\n+#include \"builtin-object-size-8.c\""}, {"sha": "19021bc2ce93859e27a5311eafeb846bce6c78e1", "filename": "gcc/testsuite/gcc.dg/builtin-dynamic-object-size-9.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79a89108dd352cd9288f5de35481b1280c7588a5/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79a89108dd352cd9288f5de35481b1280c7588a5/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-9.c?ref=79a89108dd352cd9288f5de35481b1280c7588a5", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+#define __builtin_object_size __builtin_dynamic_object_size\n+#include \"builtin-object-size-9.c\""}, {"sha": "f26d5d97a5ef62225b31b502b58cfd3da5064628", "filename": "gcc/testsuite/gcc.dg/builtin-object-size-16.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79a89108dd352cd9288f5de35481b1280c7588a5/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79a89108dd352cd9288f5de35481b1280c7588a5/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-16.c?ref=79a89108dd352cd9288f5de35481b1280c7588a5", "patch": "@@ -54,7 +54,9 @@ static int nfails;\n typedef __SIZE_TYPE__ size_t;\n \n extern char ax[];\n+#ifndef __builtin_object_size\n char ax2[];               /* { dg-warning \"assumed to have one element\" } */\n+#endif\n \n extern char a0[0];\n static char a1[1];"}, {"sha": "28f8414636bdb20ff6d0f862ec478d13d48451d7", "filename": "gcc/testsuite/gcc.dg/builtin-object-size-17.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79a89108dd352cd9288f5de35481b1280c7588a5/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79a89108dd352cd9288f5de35481b1280c7588a5/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-17.c?ref=79a89108dd352cd9288f5de35481b1280c7588a5", "patch": "@@ -49,7 +49,9 @@\n typedef __SIZE_TYPE__ size_t;\n \n extern char ax[];\n+#ifndef __builtin_object_size\n char ax2[];               /* { dg-warning \"assumed to have one element\" } */\n+#endif\n \n extern char a0[0];\n static char a1[1];"}, {"sha": "71f6b747d056eca72e161f2a08e063821265c1f8", "filename": "gcc/tree-object-size.c", "status": "modified", "additions": 113, "deletions": 39, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79a89108dd352cd9288f5de35481b1280c7588a5/gcc%2Ftree-object-size.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79a89108dd352cd9288f5de35481b1280c7588a5/gcc%2Ftree-object-size.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-object-size.c?ref=79a89108dd352cd9288f5de35481b1280c7588a5", "patch": "@@ -34,6 +34,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-cfg.h\"\n #include \"stringpool.h\"\n #include \"attribs.h\"\n+#include \"builtins.h\"\n \n struct object_size_info\n {\n@@ -53,13 +54,6 @@ struct GTY(()) object_size\n   tree wholesize;\n };\n \n-enum\n-{\n-  OST_SUBOBJECT = 1,\n-  OST_MINIMUM = 2,\n-  OST_END = 4,\n-};\n-\n static tree compute_object_offset (const_tree, const_tree);\n static bool addr_object_size (struct object_size_info *,\n \t\t\t      const_tree, int, tree *, tree *t = NULL);\n@@ -760,8 +754,9 @@ compute_builtin_object_size (tree ptr, int object_size_type,\n       object_sizes_grow (object_size_type);\n       if (dump_file)\n \t{\n-\t  fprintf (dump_file, \"Computing %s %sobject size for \",\n+\t  fprintf (dump_file, \"Computing %s %s%sobject size for \",\n \t\t   (object_size_type & OST_MINIMUM) ? \"minimum\" : \"maximum\",\n+\t\t   (object_size_type & OST_DYNAMIC) ? \"dynamic \" : \"\",\n \t\t   (object_size_type & OST_SUBOBJECT) ? \"sub\" : \"\");\n \t  print_generic_expr (dump_file, ptr, dump_flags);\n \t  fprintf (dump_file, \":\\n\");\n@@ -850,9 +845,10 @@ compute_builtin_object_size (tree ptr, int object_size_type,\n \t\tprint_generic_expr (dump_file, ssa_name (i),\n \t\t\t\t    dump_flags);\n \t\tfprintf (dump_file,\n-\t\t\t \": %s %sobject size \",\n+\t\t\t \": %s %s%sobject size \",\n \t\t\t ((object_size_type & OST_MINIMUM) ? \"minimum\"\n \t\t\t  : \"maximum\"),\n+\t\t\t (object_size_type & OST_DYNAMIC) ? \"dynamic \" : \"\",\n \t\t\t (object_size_type & OST_SUBOBJECT) ? \"sub\" : \"\");\n \t\tprint_generic_expr (dump_file, object_sizes_get (&osi, i),\n \t\t\t\t    dump_flags);\n@@ -1404,8 +1400,85 @@ do_valueize (tree t)\n   return t;\n }\n \n+/* Process a __builtin_object_size or __builtin_dynamic_object_size call in\n+   CALL early for subobjects before any object information is lost due to\n+   optimization.  Insert a MIN or MAX expression of the result and\n+   __builtin_object_size at I so that it may be processed in the second pass.\n+   __builtin_dynamic_object_size is treated like __builtin_object_size here\n+   since we're only looking for constant bounds.  */\n+\n+static void\n+early_object_sizes_execute_one (gimple_stmt_iterator *i, gimple *call)\n+{\n+  tree ost = gimple_call_arg (call, 1);\n+  tree lhs = gimple_call_lhs (call);\n+  gcc_assert (lhs != NULL_TREE);\n+\n+  if (!tree_fits_uhwi_p (ost))\n+    return;\n+\n+  unsigned HOST_WIDE_INT object_size_type = tree_to_uhwi (ost);\n+  tree ptr = gimple_call_arg (call, 0);\n+\n+  if (object_size_type != 1 && object_size_type != 3)\n+    return;\n+\n+  if (TREE_CODE (ptr) != ADDR_EXPR && TREE_CODE (ptr) != SSA_NAME)\n+    return;\n+\n+  tree type = TREE_TYPE (lhs);\n+  tree bytes;\n+  if (!compute_builtin_object_size (ptr, object_size_type, &bytes)\n+      || !int_fits_type_p (bytes, type))\n+    return;\n+\n+  tree tem = make_ssa_name (type);\n+  gimple_call_set_lhs (call, tem);\n+  enum tree_code code = object_size_type & OST_MINIMUM ? MAX_EXPR : MIN_EXPR;\n+  tree cst = fold_convert (type, bytes);\n+  gimple *g = gimple_build_assign (lhs, code, tem, cst);\n+  gsi_insert_after (i, g, GSI_NEW_STMT);\n+  update_stmt (call);\n+}\n+\n+/* Attempt to fold one __builtin_dynamic_object_size call in CALL into an\n+   expression and insert it at I.  Return true if it succeeds.  */\n+\n+static bool\n+dynamic_object_sizes_execute_one (gimple_stmt_iterator *i, gimple *call)\n+{\n+  gcc_assert (gimple_call_num_args (call) == 2);\n+\n+  tree args[2];\n+  args[0] = gimple_call_arg (call, 0);\n+  args[1] = gimple_call_arg (call, 1);\n+\n+  location_t loc = EXPR_LOC_OR_LOC (args[0], input_location);\n+  tree result_type = gimple_call_return_type (as_a <gcall *> (call));\n+  tree result = fold_builtin_call_array (loc, result_type,\n+\t\t\t\t\t gimple_call_fn (call), 2, args);\n+\n+  if (!result)\n+    return false;\n+\n+  /* fold_builtin_call_array may wrap the result inside a\n+     NOP_EXPR.  */\n+  STRIP_NOPS (result);\n+  gimplify_and_update_call_from_tree (i, result);\n+\n+  if (dump_file && (dump_flags & TDF_DETAILS))\n+    {\n+      fprintf (dump_file, \"Simplified (dynamic)\\n  \");\n+      print_gimple_stmt (dump_file, call, 0, dump_flags);\n+      fprintf (dump_file, \" to \");\n+      print_generic_expr (dump_file, result);\n+      fprintf (dump_file, \"\\n\");\n+    }\n+  return true;\n+}\n+\n static unsigned int\n-object_sizes_execute (function *fun, bool insert_min_max_p)\n+object_sizes_execute (function *fun, bool early)\n {\n   basic_block bb;\n   FOR_EACH_BB_FN (bb, fun)\n@@ -1414,8 +1487,12 @@ object_sizes_execute (function *fun, bool insert_min_max_p)\n       for (i = gsi_start_bb (bb); !gsi_end_p (i); gsi_next (&i))\n \t{\n \t  tree result;\n+\t  bool dynamic = false;\n+\n \t  gimple *call = gsi_stmt (i);\n-\t  if (!gimple_call_builtin_p (call, BUILT_IN_OBJECT_SIZE))\n+\t  if (gimple_call_builtin_p (call, BUILT_IN_DYNAMIC_OBJECT_SIZE))\n+\t    dynamic = true;\n+\t  else if (!gimple_call_builtin_p (call, BUILT_IN_OBJECT_SIZE))\n \t    continue;\n \n \t  tree lhs = gimple_call_lhs (call);\n@@ -1424,42 +1501,39 @@ object_sizes_execute (function *fun, bool insert_min_max_p)\n \n \t  init_object_sizes ();\n \n-\t  /* If insert_min_max_p, only attempt to fold\n+\t  /* If early, only attempt to fold\n \t     __builtin_object_size (x, 1) and __builtin_object_size (x, 3),\n \t     and rather than folding the builtin to the constant if any,\n \t     create a MIN_EXPR or MAX_EXPR of the __builtin_object_size\n-\t     call result and the computed constant.  */\n-\t  if (insert_min_max_p)\n+\t     call result and the computed constant.  Do the same for\n+\t     __builtin_dynamic_object_size too.  */\n+\t  if (early)\n \t    {\n-\t      tree ost = gimple_call_arg (call, 1);\n-\t      if (tree_fits_uhwi_p (ost))\n+\t      early_object_sizes_execute_one (&i, call);\n+\t      continue;\n+\t    }\n+\n+\t  if (dynamic)\n+\t    {\n+\t      if (dynamic_object_sizes_execute_one (&i, call))\n+\t\tcontinue;\n+\t      else\n \t\t{\n-\t\t  unsigned HOST_WIDE_INT object_size_type = tree_to_uhwi (ost);\n-\t\t  tree ptr = gimple_call_arg (call, 0);\n-\t\t  if ((object_size_type & OST_SUBOBJECT)\n-\t\t      && (TREE_CODE (ptr) == ADDR_EXPR\n-\t\t\t  || TREE_CODE (ptr) == SSA_NAME))\n+\t\t  /* If we could not find a suitable size expression, lower to\n+\t\t     __builtin_object_size so that we may at least get a\n+\t\t     constant lower or higher estimate.  */\n+\t\t  tree bosfn = builtin_decl_implicit (BUILT_IN_OBJECT_SIZE);\n+\t\t  gimple_call_set_fndecl (call, bosfn);\n+\t\t  update_stmt (call);\n+\n+\t\t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t\t    {\n-\t\t      tree type = TREE_TYPE (lhs);\n-\t\t      tree bytes;\n-\t\t      if (compute_builtin_object_size (ptr, object_size_type,\n-\t\t\t\t\t\t       &bytes)\n-\t\t\t  && int_fits_type_p (bytes, type))\n-\t\t\t{\n-\t\t\t  tree tem = make_ssa_name (type);\n-\t\t\t  gimple_call_set_lhs (call, tem);\n-\t\t\t  enum tree_code code\n-\t\t\t    = (object_size_type & OST_MINIMUM\n-\t\t\t       ? MAX_EXPR : MIN_EXPR);\n-\t\t\t  tree cst = fold_convert (type, bytes);\n-\t\t\t  gimple *g\n-\t\t\t    = gimple_build_assign (lhs, code, tem, cst);\n-\t\t\t  gsi_insert_after (&i, g, GSI_NEW_STMT);\n-\t\t\t  update_stmt (call);\n-\t\t\t}\n+\t\t      print_generic_expr (dump_file, gimple_call_arg (call, 0),\n+\t\t\t\t\t  dump_flags);\n+\t\t      fprintf (dump_file,\n+\t\t\t       \": Retrying as __builtin_object_size\\n\");\n \t\t    }\n \t\t}\n-\t      continue;\n \t    }\n \n \t  result = gimple_fold_stmt_to_constant (call, do_valueize);"}, {"sha": "f4f438c10a832e7571b978b3c6ed0666e313ef47", "filename": "gcc/tree-object-size.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79a89108dd352cd9288f5de35481b1280c7588a5/gcc%2Ftree-object-size.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79a89108dd352cd9288f5de35481b1280c7588a5/gcc%2Ftree-object-size.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-object-size.h?ref=79a89108dd352cd9288f5de35481b1280c7588a5", "patch": "@@ -20,6 +20,16 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_TREE_OBJECT_SIZE_H\n #define GCC_TREE_OBJECT_SIZE_H\n \n+/* Bits in object_size_type.  */\n+\n+enum\n+{\n+  OST_SUBOBJECT = 1,\n+  OST_MINIMUM = 2,\n+  OST_DYNAMIC = 4,\n+  OST_END = 8,\n+};\n+\n extern void init_object_sizes (void);\n extern void fini_object_sizes (void);\n extern bool compute_builtin_object_size (tree, int, tree *);"}]}