{"sha": "fb82082db3dd75ba956e0c17991c8606bf1d8930", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmI4MjA4MmRiM2RkNzViYTk1NmUwYzE3OTkxYzg2MDZiZjFkODkzMA==", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@gcc.gnu.org", "date": "1999-08-21T11:56:24Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gcc.gnu.org", "date": "1999-08-21T11:56:24Z"}, "message": "natSystem.cc (getpwuid_adaptor): New overloaded function that detects the signature of getpwuid_r.\n\n* java/lang/natSystem.cc (getpwuid_adaptor): New overloaded\nfunction that detects the signature of getpwuid_r.\n(init_properties): Use it.\n* java/util/natDate.cc (ctime_adaptor): Likewise for ctime_r.\n(toString): Use it.\n\nFrom-SVN: r28790", "tree": {"sha": "77052244b29b3ddab482afe4823576d4ec70a359", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77052244b29b3ddab482afe4823576d4ec70a359"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb82082db3dd75ba956e0c17991c8606bf1d8930", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb82082db3dd75ba956e0c17991c8606bf1d8930", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb82082db3dd75ba956e0c17991c8606bf1d8930", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb82082db3dd75ba956e0c17991c8606bf1d8930/comments", "author": null, "committer": null, "parents": [{"sha": "5b33370d63acf843e6063a952db8d994c73bb0ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b33370d63acf843e6063a952db8d994c73bb0ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b33370d63acf843e6063a952db8d994c73bb0ec"}], "stats": {"total": 55, "additions": 53, "deletions": 2}, "files": [{"sha": "71c8579f8e0740c8446ba2f5b4b84f320fec36c5", "filename": "libjava/java/lang/natSystem.cc", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb82082db3dd75ba956e0c17991c8606bf1d8930/libjava%2Fjava%2Flang%2FnatSystem.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb82082db3dd75ba956e0c17991c8606bf1d8930/libjava%2Fjava%2Flang%2FnatSystem.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatSystem.cc?ref=fb82082db3dd75ba956e0c17991c8606bf1d8930", "patch": "@@ -231,6 +231,34 @@ java::lang::System::identityHashCode (jobject obj)\n #endif\n static char *default_file_encoding = DEFAULT_FILE_ENCODING;\n \n+#if HAVE_GETPWUID_R\n+/* Use overload resolution to find out the signature of getpwuid_r.  */\n+\n+  /* This is Posix getpwuid_r.  */\n+template <typename T_uid, typename T_passwd, typename T_buf, typename T_len>\n+static inline int\n+getpwuid_adaptor(int (*getpwuid_r)(T_uid user_id, T_passwd *pwd_r,\n+\t\t\t\t   T_buf *buf_r, T_len len_r,\n+\t\t\t\t   T_passwd **pwd_entry_ptr),\n+\t\t uid_t user_id, struct passwd *pwd_r,\n+\t\t char *buf_r, size_t len_r, struct passwd **pwd_entry)\n+{\n+  return getpwuid_r(user_id, pwd_r, buf_r, len_r, pwd_entry);\n+}\n+\n+/* This is used on IRIX 5.2.  */\n+template <typename T_uid, typename T_passwd, typename T_buf, typename T_len>\n+static inline int\n+getpwuid_adaptor(T_passwd * (*getpwuid_r)(T_uid user_id, T_passwd *pwd_r,\n+\t\t\t\t\t  T_buf *buf_r, T_len len_r),\n+\t\t uid_t user_id, struct passwd *pwd_r,\n+\t\t char *buf_r, size_t len_r, struct passwd **pwd_entry)\n+{\n+  *pwd_entry = getpwuid_r(user_id, pwd_r, buf_r, len_r);\n+  return (*pwd_entry == NULL) ? errno : 0;\n+}\n+#endif\n+\n void\n java::lang::System::init_properties (void)\n {\n@@ -293,7 +321,8 @@ java::lang::System::init_properties (void)\n \n   while (buf_r != NULL)\n     {\n-      int r = getpwuid_r (user_id, &pwd_r, buf_r, len_r, &pwd_entry);\n+      int r = getpwuid_adaptor\n+\t(getpwuid_r, user_id, &pwd_r, buf_r, len_r, &pwd_entry);\n       if (r == 0)\n \tbreak;\n       else if (r != ERANGE)"}, {"sha": "563f8c0cd8e9d5c3714c57e95b61cdaf4f63cc49", "filename": "libjava/java/util/natDate.cc", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb82082db3dd75ba956e0c17991c8606bf1d8930/libjava%2Fjava%2Futil%2FnatDate.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb82082db3dd75ba956e0c17991c8606bf1d8930/libjava%2Fjava%2Futil%2FnatDate.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FnatDate.cc?ref=fb82082db3dd75ba956e0c17991c8606bf1d8930", "patch": "@@ -28,13 +28,35 @@ details.  */\n #include <sys/time.h>\n #endif\n \n+#if HAVE_CTIME_R\n+/* Use overload resolution to find out the signature of ctime_r.  */\n+\n+  /* This is Posix ctime_r().  */\n+template <typename T_clock, typename T_buf, size_t buflen>\n+static inline char *\n+ctime_adaptor (char* (*ctime_r)(T_clock *clock, T_buf *buf),\n+\t       time_t *clock, char (&buf)[buflen])\n+{\n+  return ctime_r(clock, buf);\n+}\n+\n+/* This is an old-style ctime_r, used on IRIX 5.2.  */\n+template <typename T_clock, typename T_buf, typename T_buflen, size_t buflen>\n+static inline char *\n+ctime_adaptor (char* (*ctime_r)(T_clock *clock, T_buf *buf, T_buflen len),\n+\t       time_t *clock, char (&buf)[buflen])\n+{\n+  return ctime_r(clock, buf, buflen);\n+}\n+#endif\n+\n jstring\n java::util::Date::toString()\n {\n #ifdef HAVE_CTIME_R\n   time_t t = millis / 1000;\n   char buf[30];\n-  return JvNewStringLatin1 (ctime_r (&t, buf));\n+  return JvNewStringLatin1 (ctime_adaptor (ctime_r, &t, buf));\n #elif defined (HAVE_CTIME)\n   // FIXME: this isn't thread-safe.\n   time_t t = millis / 1000;"}]}