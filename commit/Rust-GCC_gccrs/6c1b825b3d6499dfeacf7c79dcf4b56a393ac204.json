{"sha": "6c1b825b3d6499dfeacf7c79dcf4b56a393ac204", "node_id": "C_kwDOANBUbNoAKDZjMWI4MjViM2Q2NDk5ZGZlYWNmN2M3OWRjZjRiNTZhMzkzYWMyMDQ", "commit": {"author": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2023-02-20T20:28:09Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2023-02-21T17:38:56Z"}, "message": "Fortran: improve checking of character length specification [PR96025]\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/96025\n\t* parse.cc (check_function_result_typed): Improve type check of\n\tspecification expression for character length and return status.\n\t(parse_spec): Use status from above.\n\t* resolve.cc (resolve_fntype): Prevent use of invalid specification\n\texpression for character length.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/96025\n\t* gfortran.dg/pr96025.f90: New test.", "tree": {"sha": "84d5965ba506d470b0154909d78c3c4a2e9d7db3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84d5965ba506d470b0154909d78c3c4a2e9d7db3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c1b825b3d6499dfeacf7c79dcf4b56a393ac204", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c1b825b3d6499dfeacf7c79dcf4b56a393ac204", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c1b825b3d6499dfeacf7c79dcf4b56a393ac204", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c1b825b3d6499dfeacf7c79dcf4b56a393ac204/comments", "author": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f77948c567f331015dfa4d695718c2211dab0816", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f77948c567f331015dfa4d695718c2211dab0816", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f77948c567f331015dfa4d695718c2211dab0816"}], "stats": {"total": 40, "additions": 28, "deletions": 12}, "files": [{"sha": "f1e55316e5bacbdada6350aedb2642b47a8c2c82", "filename": "gcc/fortran/parse.cc", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1b825b3d6499dfeacf7c79dcf4b56a393ac204/gcc%2Ffortran%2Fparse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1b825b3d6499dfeacf7c79dcf4b56a393ac204/gcc%2Ffortran%2Fparse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.cc?ref=6c1b825b3d6499dfeacf7c79dcf4b56a393ac204", "patch": "@@ -3974,21 +3974,30 @@ match_deferred_characteristics (gfc_typespec * ts)\n    For return types specified in a FUNCTION prefix, the IMPLICIT rules of the\n    scope are not yet parsed so this has to be delayed up to parse_spec.  */\n \n-static void\n+static bool\n check_function_result_typed (void)\n {\n   gfc_typespec ts;\n \n   gcc_assert (gfc_current_state () == COMP_FUNCTION);\n \n-  if (!gfc_current_ns->proc_name->result) return;\n+  if (!gfc_current_ns->proc_name->result)\n+    return true;\n \n   ts = gfc_current_ns->proc_name->result->ts;\n \n   /* Check type-parameters, at the moment only CHARACTER lengths possible.  */\n   /* TODO:  Extend when KIND type parameters are implemented.  */\n   if (ts.type == BT_CHARACTER && ts.u.cl && ts.u.cl->length)\n-    gfc_expr_check_typed (ts.u.cl->length, gfc_current_ns, true);\n+    {\n+      /* Reject invalid type of specification expression for length.  */\n+      if (ts.u.cl->length->ts.type != BT_INTEGER)\n+\t  return false;\n+\n+      gfc_expr_check_typed (ts.u.cl->length, gfc_current_ns, true);\n+    }\n+\n+  return true;\n }\n \n \n@@ -4096,10 +4105,7 @@ parse_spec (gfc_statement st)\n \t}\n \n       if (verify_now)\n-\t{\n-\t  check_function_result_typed ();\n-\t  function_result_typed = true;\n-\t}\n+\tfunction_result_typed = check_function_result_typed ();\n     }\n \n   switch (st)\n@@ -4110,10 +4116,7 @@ parse_spec (gfc_statement st)\n     case ST_IMPLICIT_NONE:\n     case ST_IMPLICIT:\n       if (!function_result_typed)\n-\t{\n-\t  check_function_result_typed ();\n-\t  function_result_typed = true;\n-\t}\n+\tfunction_result_typed = check_function_result_typed ();\n       goto declSt;\n \n     case ST_FORMAT:"}, {"sha": "427f901a4381a34d08cf0984d99cd055a4c3048b", "filename": "gcc/fortran/resolve.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1b825b3d6499dfeacf7c79dcf4b56a393ac204/gcc%2Ffortran%2Fresolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1b825b3d6499dfeacf7c79dcf4b56a393ac204/gcc%2Ffortran%2Fresolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.cc?ref=6c1b825b3d6499dfeacf7c79dcf4b56a393ac204", "patch": "@@ -17419,7 +17419,9 @@ resolve_fntype (gfc_namespace *ns)\n \t  }\n       }\n \n-  if (sym->ts.type == BT_CHARACTER)\n+  if (sym->ts.type == BT_CHARACTER\n+      && sym->ts.u.cl->length\n+      && sym->ts.u.cl->length->ts.type == BT_INTEGER)\n     gfc_traverse_expr (sym->ts.u.cl->length, sym, flag_fn_result_spec, 0);\n }\n "}, {"sha": "ce292bd9664c607c94cb428a7cf8778cb4bc98be", "filename": "gcc/testsuite/gfortran.dg/pr96025.f90", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1b825b3d6499dfeacf7c79dcf4b56a393ac204/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr96025.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1b825b3d6499dfeacf7c79dcf4b56a393ac204/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr96025.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr96025.f90?ref=6c1b825b3d6499dfeacf7c79dcf4b56a393ac204", "patch": "@@ -0,0 +1,11 @@\n+! { dg-do compile }\n+! PR fortran/96025 - ICE in expr_check_typed_help\n+! Contributed by G.Steinmetz\n+\n+program p\n+  print *, f()\n+contains\n+  character(char(1)) function f() ! { dg-error \"must be of INTEGER type\" }\n+    f = 'f'\n+  end\n+end"}]}