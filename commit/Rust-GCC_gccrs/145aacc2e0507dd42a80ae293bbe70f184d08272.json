{"sha": "145aacc2e0507dd42a80ae293bbe70f184d08272", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQ1YWFjYzJlMDUwN2RkNDJhODBhZTI5M2JiZTcwZjE4NGQwODI3Mg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-05-30T00:28:14Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-05-30T00:28:14Z"}, "message": "i386.c (USE_HIDDEN_LINKONCE): New.\n\n        * config/i386/i386.c (USE_HIDDEN_LINKONCE): New.\n        (get_pc_thunk_name): New.\n        (output_set_got): Use it.\n        (ix86_asm_file_end): If USE_HIDDEN_LINKONCE, emit get_pc thunks\n        into linkonce sections.\n\nFrom-SVN: r54031", "tree": {"sha": "9dafc5b96a11a677d8b1e4d4bef754e0501242b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9dafc5b96a11a677d8b1e4d4bef754e0501242b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/145aacc2e0507dd42a80ae293bbe70f184d08272", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/145aacc2e0507dd42a80ae293bbe70f184d08272", "html_url": "https://github.com/Rust-GCC/gccrs/commit/145aacc2e0507dd42a80ae293bbe70f184d08272", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/145aacc2e0507dd42a80ae293bbe70f184d08272/comments", "author": null, "committer": null, "parents": [{"sha": "a5b49bbc91202f8456cda56b3fd36d14b907b9d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5b49bbc91202f8456cda56b3fd36d14b907b9d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5b49bbc91202f8456cda56b3fd36d14b907b9d4"}], "stats": {"total": 71, "additions": 60, "deletions": 11}, "files": [{"sha": "888da82ad3881e20d9df1b311cdfa5534068ffe4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/145aacc2e0507dd42a80ae293bbe70f184d08272/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/145aacc2e0507dd42a80ae293bbe70f184d08272/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=145aacc2e0507dd42a80ae293bbe70f184d08272", "patch": "@@ -1,3 +1,11 @@\n+2002-05-29  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/i386/i386.c (USE_HIDDEN_LINKONCE): New.\n+\t(get_pc_thunk_name): New.\n+\t(output_set_got): Use it.\n+\t(ix86_asm_file_end): If USE_HIDDEN_LINKONCE, emit get_pc thunks\n+\tinto linkonce sections.\n+\n 2002-05-29  Jason Thorpe  <thorpej@wasabisystems.com>\n \n \t* config/sparc/netbsd-elf.h (TARGET_OS_CPP_BUILTINS): Define."}, {"sha": "1715ca02a2102565dd4dff1c94db999757b4faa8", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 52, "deletions": 11, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/145aacc2e0507dd42a80ae293bbe70f184d08272/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/145aacc2e0507dd42a80ae293bbe70f184d08272/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=145aacc2e0507dd42a80ae293bbe70f184d08272", "patch": "@@ -672,6 +672,7 @@ static rtx ix86_expand_int_compare PARAMS ((enum rtx_code, rtx, rtx));\n static enum rtx_code ix86_prepare_fp_compare_args PARAMS ((enum rtx_code,\n \t\t\t\t\t\t\t   rtx *, rtx *));\n static rtx get_thread_pointer PARAMS ((void));\n+static void get_pc_thunk_name PARAMS ((char [32], unsigned int));\n static rtx gen_push PARAMS ((rtx));\n static int memory_address_length PARAMS ((rtx addr));\n static int ix86_flags_dependant PARAMS ((rtx, rtx, enum attr_type));\n@@ -3898,8 +3899,29 @@ ix86_setup_frame_addresses ()\n   cfun->machine->accesses_prev_frame = 1;\n }\n \f\n+#if defined(HAVE_GAS_HIDDEN) && defined(SUPPORTS_ONE_ONLY)\n+# define USE_HIDDEN_LINKONCE 1\n+#else\n+# define USE_HIDDEN_LINKONCE 0\n+#endif\n+\n static int pic_labels_used;\n \n+/* Fills in the label name that should be used for a pc thunk for\n+   the given register.  */\n+\n+static void\n+get_pc_thunk_name (name, regno)\n+     char name[32];\n+     unsigned int regno;\n+{\n+  if (USE_HIDDEN_LINKONCE)\n+    sprintf (name, \"__i686.get_pc_thunk.%s\", reg_names[regno]);\n+  else\n+    ASM_GENERATE_INTERNAL_LABEL (name, \"LPR\", regno);\n+}\n+\n+\n /* This function generates code for -fpic that loads %ebx with\n    the return address of the caller and then returns.  */\n \n@@ -3912,18 +3934,37 @@ ix86_asm_file_end (file)\n \n   for (regno = 0; regno < 8; ++regno)\n     {\n+      char name[32];\n+\n       if (! ((pic_labels_used >> regno) & 1))\n \tcontinue;\n \n-      text_section ();\n+      get_pc_thunk_name (name, regno);\n+\n+      if (USE_HIDDEN_LINKONCE)\n+\t{\n+\t  tree decl;\n+\n+\t  decl = build_decl (FUNCTION_DECL, get_identifier (name),\n+\t\t\t     error_mark_node);\n+\t  TREE_PUBLIC (decl) = 1;\n+\t  TREE_STATIC (decl) = 1;\n+\t  DECL_ONE_ONLY (decl) = 1;\n \n-      /* This used to call ASM_DECLARE_FUNCTION_NAME() but since it's an\n-\t internal (non-global) label that's being emitted, it didn't make\n-\t sense to have .type information for local labels.   This caused\n-\t the SCO OpenServer 5.0.4 ELF assembler grief (why are you giving\n-\t me debug info for a label that you're declaring non-global?) this\n-\t was changed to call ASM_OUTPUT_LABEL() instead.  */\n-      ASM_OUTPUT_INTERNAL_LABEL (file, \"LPR\", regno);\n+\t  (*targetm.asm_out.unique_section) (decl, 0);\n+\t  named_section (decl, NULL, 0);\n+\n+\t  ASM_GLOBALIZE_LABEL (file, name);\n+\t  fputs (\"\\t.hidden\\t\", file);\n+\t  assemble_name (file, name);\n+\t  fputc ('\\n', file);\n+\t  ASM_DECLARE_FUNCTION_NAME (file, name, decl);\n+\t}\n+      else\n+\t{\n+\t  text_section ();\n+\t  ASM_OUTPUT_LABEL (file, name);\n+\t}\n \n       xops[0] = gen_rtx_REG (SImode, regno);\n       xops[1] = gen_rtx_MEM (SImode, stack_pointer_rtx);\n@@ -3960,11 +4001,11 @@ output_set_got (dest)\n     }\n   else\n     {\n-      char pic_label_name[32];\n-      ASM_GENERATE_INTERNAL_LABEL (pic_label_name, \"LPR\", REGNO (dest));\n+      char name[32];\n+      get_pc_thunk_name (name, REGNO (dest));\n       pic_labels_used |= 1 << REGNO (dest);\n \n-      xops[2] = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (pic_label_name));\n+      xops[2] = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (name));\n       xops[2] = gen_rtx_MEM (QImode, xops[2]);\n       output_asm_insn (\"call\\t%X2\", xops);\n     }"}]}