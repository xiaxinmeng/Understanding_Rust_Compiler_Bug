{"sha": "22d66adf5d3947f66386084992dc76ccb4b391d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjJkNjZhZGY1ZDM5NDdmNjYzODYwODQ5OTJkYzc2Y2NiNGIzOTFkNg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2004-10-07T07:55:39Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2004-10-07T07:55:39Z"}, "message": "re PR target/17862 (internal compiler error: in sparc_asm_function_prologue)\n\n\tPR target/17862\n\t* config/sparc/sparc.c (sparc_output_mi_thunk): Set\n\tcurrent_function_uses_only_leaf_regs as well as sparc_leaf_function_p.\n\n\t* config/sparc/sparc.c (sparc_gimplify_va_arg): Pass 'false' instead\n\tof 0 as 4th argument to pass_by_reference.\n\tCall build_va_arg_indirect_ref instead of build_fold_indirect_ref.\n\nFrom-SVN: r88674", "tree": {"sha": "62fdad25d1a48f556e211503301ef2a5bc8cf14a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62fdad25d1a48f556e211503301ef2a5bc8cf14a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22d66adf5d3947f66386084992dc76ccb4b391d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22d66adf5d3947f66386084992dc76ccb4b391d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22d66adf5d3947f66386084992dc76ccb4b391d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22d66adf5d3947f66386084992dc76ccb4b391d6/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "298321642abf4cd9023e6a2a7481835feef34d95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/298321642abf4cd9023e6a2a7481835feef34d95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/298321642abf4cd9023e6a2a7481835feef34d95"}], "stats": {"total": 22, "additions": 16, "deletions": 6}, "files": [{"sha": "b00fad99648cd9d29efaeb7e337c6d77cea186ca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d66adf5d3947f66386084992dc76ccb4b391d6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d66adf5d3947f66386084992dc76ccb4b391d6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=22d66adf5d3947f66386084992dc76ccb4b391d6", "patch": "@@ -1,3 +1,13 @@\n+2004-10-07  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\tPR target/17862\n+\t* config/sparc/sparc.c (sparc_output_mi_thunk): Set\n+\tcurrent_function_uses_only_leaf_regs as well as sparc_leaf_function_p.\n+\n+\t* config/sparc/sparc.c (sparc_gimplify_va_arg): Pass 'false' instead\n+\tof 0 as 4th argument to pass_by_reference.\n+\tCall build_va_arg_indirect_ref instead of build_fold_indirect_ref.\n+\n 2004-10-06  Eric Christopher  <echristo@redhat.com>\n \n \t* config/sh/sh.c (sh_dwarf_calling_convention): Fix renesas dwarf"}, {"sha": "69a2aaf4270d88535d18fb3175a1d8f416e69ebf", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d66adf5d3947f66386084992dc76ccb4b391d6/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d66adf5d3947f66386084992dc76ccb4b391d6/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=22d66adf5d3947f66386084992dc76ccb4b391d6", "patch": "@@ -6024,7 +6024,7 @@ sparc_gimplify_va_arg (tree valist, tree type, tree *pre_p, tree *post_p)\n   bool indirect;\n   tree ptrtype = build_pointer_type (type);\n \n-  if (pass_by_reference (NULL, TYPE_MODE (type), type, 0))\n+  if (pass_by_reference (NULL, TYPE_MODE (type), type, false))\n     {\n       indirect = true;\n       size = rsize = UNITS_PER_WORD;\n@@ -6044,7 +6044,7 @@ sparc_gimplify_va_arg (tree valist, tree type, tree *pre_p, tree *post_p)\n \t    align = 2 * UNITS_PER_WORD;\n \n \t  /* SPARC-V9 ABI states that structures up to 16 bytes in size\n-\t     are given whole slots as needed.  */\n+\t     are left-justified in their slots.  */\n \t  if (AGGREGATE_TYPE_P (type))\n \t    {\n \t      if (size == 0)\n@@ -6074,7 +6074,7 @@ sparc_gimplify_va_arg (tree valist, tree type, tree *pre_p, tree *post_p)\n   if (indirect)\n     {\n       addr = fold_convert (build_pointer_type (ptrtype), addr);\n-      addr = build_fold_indirect_ref (addr);\n+      addr = build_va_arg_indirect_ref (addr);\n     }\n   /* If the address isn't aligned properly for the type,\n      we may need to copy to a temporary.  \n@@ -6103,7 +6103,7 @@ sparc_gimplify_va_arg (tree valist, tree type, tree *pre_p, tree *post_p)\n   incr = build2 (MODIFY_EXPR, ptr_type_node, valist, incr);\n   gimplify_and_add (incr, post_p);\n \n-  return build_fold_indirect_ref (addr);\n+  return build_va_arg_indirect_ref (addr);\n }\n \f\n /* Return the string to output an unconditional branch to LABEL, which is\n@@ -8543,7 +8543,7 @@ sparc_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n     {\n       /* We will emit a regular sibcall below, so we need to instruct\n \t output_sibcall that we are in a leaf function.  */\n-      sparc_leaf_function_p = 1;\n+      sparc_leaf_function_p = current_function_uses_only_leaf_regs = 1;\n \n       /* This will cause final.c to invoke leaf_renumber_regs so we\n \t must behave as if we were in a not-yet-leafified function.  */\n@@ -8553,7 +8553,7 @@ sparc_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n     {\n       /* We will emit the sibcall manually below, so we will need to\n \t manually spill non-leaf registers.  */\n-      sparc_leaf_function_p = 0;\n+      sparc_leaf_function_p = current_function_uses_only_leaf_regs = 0;\n \n       /* We really are in a leaf function.  */\n       int_arg_first = SPARC_OUTGOING_INT_ARG_FIRST;"}]}