{"sha": "d61ae8dd9925ebc662f09837013e0a03bcc353f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDYxYWU4ZGQ5OTI1ZWJjNjYyZjA5ODM3MDEzZTBhMDNiY2MzNTNmNQ==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-11-17T13:46:53Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-11-17T13:46:53Z"}, "message": "re PR fortran/30285 (gfortran excessive memory usage with COMMON blocks in modules)\n\n\tPR fortran/30285\n\t* module.c (struct written_common, written_commons): New structure.\n\t(compare_written_commons, free_written_common, write_common_0):\n\tNew functions.\n\t(write_common): Call recursive function write_common_0.\n\nFrom-SVN: r130257", "tree": {"sha": "9383b4b9e23c0e7760d26dbdec31e5cefdd849c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9383b4b9e23c0e7760d26dbdec31e5cefdd849c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d61ae8dd9925ebc662f09837013e0a03bcc353f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d61ae8dd9925ebc662f09837013e0a03bcc353f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d61ae8dd9925ebc662f09837013e0a03bcc353f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d61ae8dd9925ebc662f09837013e0a03bcc353f5/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04901f81ae1db89496354eb88df80376bf053919", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04901f81ae1db89496354eb88df80376bf053919", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04901f81ae1db89496354eb88df80376bf053919"}], "stats": {"total": 124, "additions": 100, "deletions": 24}, "files": [{"sha": "ad4a9f9f93f2387adddb1b62fd4b21257b5dbd68", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d61ae8dd9925ebc662f09837013e0a03bcc353f5/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d61ae8dd9925ebc662f09837013e0a03bcc353f5/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=d61ae8dd9925ebc662f09837013e0a03bcc353f5", "patch": "@@ -1,3 +1,11 @@\n+2007-11-17  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/30285\n+\t* module.c (struct written_common, written_commons): New structure.\n+\t(compare_written_commons, free_written_common, write_common_0):\n+\tNew functions.\n+\t(write_common): Call recursive function write_common_0.\n+\n 2007-11-17  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/34108"}, {"sha": "b0962e0b542b2bd88074dd3ea2590bc8affb1544", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 92, "deletions": 24, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d61ae8dd9925ebc662f09837013e0a03bcc353f5/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d61ae8dd9925ebc662f09837013e0a03bcc353f5/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=d61ae8dd9925ebc662f09837013e0a03bcc353f5", "patch": "@@ -3767,51 +3767,119 @@ gfc_check_access (gfc_access specific_access, gfc_access default_access)\n }\n \n \n-/* Write a common block to the module.  */\n+/* A structure to remember which commons we've already written.  */\n+\n+struct written_common\n+{\n+  BBT_HEADER(written_common);\n+  const char *name, *label;\n+};\n+\n+static struct written_common *written_commons = NULL;\n+\n+/* Comparison function used for balancing the binary tree.  */\n+\n+static int\n+compare_written_commons (void *a1, void *b1)\n+{\n+  const char *aname = ((struct written_common *) a1)->name;\n+  const char *alabel = ((struct written_common *) a1)->label;\n+  const char *bname = ((struct written_common *) b1)->name;\n+  const char *blabel = ((struct written_common *) b1)->label;\n+  int c = strcmp (aname, bname);\n+\n+  return (c != 0 ? c : strcmp (alabel, blabel));\n+}\n+\n+/* Free a list of written commons.  */\n \n static void\n-write_common (gfc_symtree *st)\n+free_written_common (struct written_common *w)\n+{\n+  if (!w)\n+    return;\n+\n+  if (w->left)\n+    free_written_common (w->left);\n+  if (w->right)\n+    free_written_common (w->right);\n+\n+  gfc_free (w);\n+}\n+\n+/* Write a common block to the module -- recursive helper function.  */\n+\n+static void\n+write_common_0 (gfc_symtree *st)\n {\n   gfc_common_head *p;\n   const char * name;\n   int flags;\n   const char *label;\n+  struct written_common *w;\n+  bool write_me = true;\n \t      \n   if (st == NULL)\n     return;\n \n-  write_common (st->left);\n-  write_common (st->right);\n-\n-  mio_lparen ();\n+  write_common_0 (st->left);\n \n-  /* Write the unmangled name.  */\n+  /* We will write out the binding label, or the name if no label given.  */\n   name = st->n.common->name;\n-\n-  mio_pool_string (&name);\n-\n   p = st->n.common;\n-  mio_symbol_ref (&p->head);\n-  flags = p->saved ? 1 : 0;\n-  if (p->threadprivate) flags |= 2;\n-  mio_integer (&flags);\n-\n-  /* Write out whether the common block is bind(c) or not.  */\n-  mio_integer (&(p->is_bind_c));\n+  label = p->is_bind_c ? p->binding_label : p->name;\n \n-  /* Write out the binding label, or the com name if no label given.  */\n-  if (p->is_bind_c)\n+  /* Check if we've already output this common.  */\n+  w = written_commons;\n+  while (w)\n     {\n-      label = p->binding_label;\n-      mio_pool_string (&label);\n+      int c = strcmp (name, w->name);\n+      c = (c != 0 ? c : strcmp (label, w->label));\n+      if (c == 0)\n+\twrite_me = false;\n+\n+      w = (c < 0) ? w->left : w->right;\n     }\n-  else\n+\n+  if (write_me)\n     {\n-      label = p->name;\n+      /* Write the common to the module.  */\n+      mio_lparen ();\n+      mio_pool_string (&name);\n+\n+      mio_symbol_ref (&p->head);\n+      flags = p->saved ? 1 : 0;\n+      if (p->threadprivate)\n+\tflags |= 2;\n+      mio_integer (&flags);\n+\n+      /* Write out whether the common block is bind(c) or not.  */\n+      mio_integer (&(p->is_bind_c));\n+\n       mio_pool_string (&label);\n+      mio_rparen ();\n+\n+      /* Record that we have written this common.  */\n+      w = gfc_getmem (sizeof (struct written_common));\n+      w->name = p->name;\n+      w->label = label;\n+      gfc_insert_bbt (&written_commons, w, compare_written_commons);\n     }\n \n-  mio_rparen ();\n+  write_common_0 (st->right);\n+}\n+\n+\n+/* Write a common, by initializing the list of written commons, calling\n+   the recursive function write_common_0() and cleaning up afterwards.  */\n+\n+static void\n+write_common (gfc_symtree *st)\n+{\n+  written_commons = NULL;\n+  write_common_0 (st);\n+  free_written_common (written_commons);\n+  written_commons = NULL;\n }\n \n "}]}