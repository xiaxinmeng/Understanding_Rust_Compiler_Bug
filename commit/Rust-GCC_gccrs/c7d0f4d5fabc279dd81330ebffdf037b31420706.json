{"sha": "c7d0f4d5fabc279dd81330ebffdf037b31420706", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzdkMGY0ZDVmYWJjMjc5ZGQ4MTMzMGViZmZkZjAzN2IzMTQyMDcwNg==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2008-04-13T20:15:58Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2008-04-13T20:15:58Z"}, "message": "re PR libfortran/32972 (performance of pack/unpack)\n\n2008-04-13  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\tFrancois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n\n\tPR libfortran/32972\n\tPR libfortran/32512\n\tconfigure.ac:  Add test for uintptr_t.\n\tconfigure:  Regenerated.\n\tconfig.h.in:  Regenerated.\n\t* libgfortran.h: GFC_DTYPE_DERIVED_1:  New macro.\n\tGFC_DTYPE_DERIVED_2:  New macro.\n\tGFC_DTYPE_DERIVED_4:  New macro.\n\tGFC_DTYPE_DERIVED_8:  New macro.\n\tGFC_DTYPE_DERIVED_16:  New macro.\n\tGFC_UNALIGNED_2:  New macro.\n\tGFC_UNALIGNED_4:  New macro.\n\tGFC_UNALIGNED_8:  New macro.\n\tGFC_UNALIGNED_16:  New macro.\n\tintptr_t:  Define if we don't have it.\n\tuintptr_t:  Likewise.\n\t* runtime/backtrace.c (show_backtrace):  Use intptr_t.\n\t* intrinsics/signal.c (signal_sub):  Likewise.\n\t(signal_sub_int):  Likewise.\n\t(alarm_sub_int_i4):  Likewise.\n\t* intrinsics/spread_generic.c (spread):  Use the integer\n\troutines for handling derived types of sizes 1, 2, 4, 8 and 16\n\tif the alignment of all pointers is correct.\n\t(spread_scalar):  Likewise.\n\t* intrinsics/pack_generic.c (pack):  Likewise.\n\tUse GFD_DTYPE_TYPE_SIZE to avoid nested switch statements.\n\t* intrinsics/unpack_generic.c (unpack1):  Likewise.\n\t(unpack0):  Likewise.\n\t* runtime/in_pack_generic.c (internal_pack):  Likewise.\n\t* runtime/in_unpack_generic.c (internal_unpack):  Likewise.\n\n2008-04-13  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR libfortran/32972\n\tPR libfortran/32512\n\t* gfortran.dg/internal_pack_1.f90:  Add test for derived type.\n\t* gfortran.dg/intrinsic_spread_1.f90:  Likewise.\n\t* gfortran.dg/intrinsic_pack_1.f90:  Likewise.\n\t* gfortran.dg/intrinsic_unpack_1.f90:  Likewise.\n\n\nCo-Authored-By: Francois-Xavier Coudert <fxcoudert@gcc.gnu.org>\n\nFrom-SVN: r134245", "tree": {"sha": "e022b93b7ac1c858cd02bc0f837fdaae49b136ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e022b93b7ac1c858cd02bc0f837fdaae49b136ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7d0f4d5fabc279dd81330ebffdf037b31420706", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7d0f4d5fabc279dd81330ebffdf037b31420706", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7d0f4d5fabc279dd81330ebffdf037b31420706", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7d0f4d5fabc279dd81330ebffdf037b31420706/comments", "author": null, "committer": null, "parents": [{"sha": "92d4508a7db153423b0572047fa6947af569d4b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92d4508a7db153423b0572047fa6947af569d4b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92d4508a7db153423b0572047fa6947af569d4b6"}], "stats": {"total": 1171, "additions": 830, "deletions": 341}, "files": [{"sha": "aaa76f56ff8b720132b98416a7dbab97e2b7cd38", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7d0f4d5fabc279dd81330ebffdf037b31420706/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7d0f4d5fabc279dd81330ebffdf037b31420706/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c7d0f4d5fabc279dd81330ebffdf037b31420706", "patch": "@@ -1,3 +1,12 @@\n+2008-04-13  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR libfortran/32972\n+\tPR libfortran/32512\n+\t* gfortran.dg/internal_pack_1.f90:  Add test for derived type.\n+\t* gfortran.dg/intrinsic_spread_1.f90:  Likewise.\n+\t* gfortran.dg/intrinsic_pack_1.f90:  Likewise.\n+\t* gfortran.dg/intrinsic_unpack_1.f90:  Likewise.\n+\t\n 2008-04-13  Samuel Tardieu  <sam@rfc1149.net> \n \n \tPR ada/17985"}, {"sha": "aded78dc26ad56b68b8f5a74456b400efdff266c", "filename": "gcc/testsuite/gfortran.dg/internal_pack_1.f90", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7d0f4d5fabc279dd81330ebffdf037b31420706/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_pack_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7d0f4d5fabc279dd81330ebffdf037b31420706/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_pack_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_pack_1.f90?ref=c7d0f4d5fabc279dd81330ebffdf037b31420706", "patch": "@@ -11,6 +11,11 @@ program main\n   real(kind=8), dimension(3) :: r8\n   complex(kind=4), dimension(3) :: c4\n   complex(kind=8), dimension(3) :: c8\n+  type i8_t\n+     sequence\n+     integer(kind=8) :: v\n+  end type i8_t\n+  type(i8_t), dimension(3) :: d_i8\n \n   i1 = (/ -1, 1, -3 /)\n   call sub_i1(i1(1:3:2))\n@@ -46,6 +51,10 @@ program main\n   if (any(real(c8) /= (/ 3.0_4, 1.0_4, 2.0_4/))) call abort\n   if (any(aimag(c8) /= 0._4)) call abort\n \n+  d_i8%v = (/ -1, 1, -3 /)\n+  call sub_d_i8(d_i8(1:3:2))\n+  if (any(d_i8%v /= (/ 3, 1, 2 /))) call abort\n+\n end program main\n \n subroutine sub_i1(i)\n@@ -113,3 +122,15 @@ subroutine sub_c4(r)\n   r(1) = 3._4\n   r(2) = 2._4\n end subroutine sub_c4\n+\n+subroutine sub_d_i8(i)\n+  type i8_t\n+     sequence\n+     integer(kind=8) :: v\n+  end type i8_t\n+  type(i8_t), dimension(2) :: i\n+  if (i(1)%v /= -1) call abort\n+  if (i(2)%v /= -3) call abort\n+  i(1)%v = 3\n+  i(2)%v = 2\n+end subroutine sub_d_i8"}, {"sha": "22d110ba77c2fbc429523baaa755fc99989f7653", "filename": "gcc/testsuite/gfortran.dg/intrinsic_pack_1.f90", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7d0f4d5fabc279dd81330ebffdf037b31420706/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_pack_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7d0f4d5fabc279dd81330ebffdf037b31420706/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_pack_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_pack_1.f90?ref=c7d0f4d5fabc279dd81330ebffdf037b31420706", "patch": "@@ -29,6 +29,34 @@ program main\n   integer(kind=8), dimension(9) :: vi8\n   integer(kind=8), dimension(9) :: ri8\n \n+  type i1_t\n+    integer(kind=1) :: v\n+  end type i1_t\n+  type(i1_t), dimension(3,3) :: d_i1\n+  type(i1_t), dimension(9) :: d_vi1\n+  type(i1_t), dimension(9) :: d_ri1\n+\n+  type i4_t\n+    integer(kind=4) :: v\n+  end type i4_t\n+  type(i4_t), dimension(3,3) :: d_i4\n+  type(i4_t), dimension(9) :: d_vi4\n+  type(i4_t), dimension(9) :: d_ri4\n+\n+  d_vi1%v = (/(i+10,i=1,9)/)\n+  d_i1%v = reshape((/1_1, -1_1, 2_1, -2_1, 3_1, -3_1, 4_1, &\n+                    & -4_1, 5_1/), shape(i1))\n+  d_ri1 = pack(d_i1,d_i1%v>0,d_vi1)\n+  if (any(d_ri1%v /= (/1_1, 2_1, 3_1, 4_1, 5_1, 16_1, 17_1, 18_1, 19_1/))) &\n+       & call abort\n+\n+  d_vi4%v = (/(i+10,i=1,9)/)\n+  d_i4%v = reshape((/1_4, -1_4, 2_4, -2_4, 3_4, -3_4, 4_4, &\n+                    & -4_4, 5_4/), shape(d_i4))\n+  d_ri4 = pack(d_i4,d_i4%v>0,d_vi4)\n+  if (any(d_ri4%v /= (/1_4, 2_4, 3_4, 4_4, 5_4, 16_4, 17_4, 18_4, 19_4/))) &\n+       & call abort\n+\n   vr4 = (/(i+10,i=1,9)/)\n   r4 = reshape((/1.0_4, -3.0_4, 2.1_4, -4.21_4, 1.2_4, 0.98_4, -1.2_4, &\n   &              -7.1_4, -9.9_4, 0.3_4 /), shape(r4))"}, {"sha": "04e4c577ac62857efd748a47c73e8fb3c6339ece", "filename": "gcc/testsuite/gfortran.dg/intrinsic_spread_1.f90", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7d0f4d5fabc279dd81330ebffdf037b31420706/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_spread_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7d0f4d5fabc279dd81330ebffdf037b31420706/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_spread_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_spread_1.f90?ref=c7d0f4d5fabc279dd81330ebffdf037b31420706", "patch": "@@ -25,6 +25,14 @@ program foo\n    complex(kind=8), dimension (10) :: c_8\n    complex(kind=8), dimension (2, 3) :: ac_8\n    complex(kind=8), dimension (2, 2, 3) :: bc_8\n+   type i4_t\n+      integer(kind=4) :: v\n+   end type i4_t\n+   type(i4_t), dimension (10) :: it_4\n+   type(i4_t), dimension (2, 3) :: at_4\n+   type(i4_t), dimension (2, 2, 3) :: bt_4\n+   type(i4_t) :: iv_4\n+\n    character (len=200) line1, line2, line3\n \n    a_1 = reshape ((/1_1, 2_1, 3_1, 4_1, 5_1, 6_1/), (/2, 3/))\n@@ -159,6 +167,17 @@ program foo\n    c_8 = spread((1._8,-1._8),1,10)\n    if (any(c_8 /= (1._8,-1._8))) call abort\n \n+\n+   at_4%v = reshape ((/1_4, 2_4, 3_4, 4_4, 5_4, 6_4/), (/2, 3/))\n+   bt_4 = spread (at_4, 1, 2)\n+   if (any (bt_4%v .ne. reshape ((/1_4, 1_4, 2_4, 2_4, 3_4, 3_4, 4_4, &\n+        & 4_4, 5_4, 5_4, 6_4, 6_4/), (/2, 2, 3/)))) &\n+      call abort\n+   iv_4%v = 123_4\n+   it_4 = spread(iv_4,1,10)\n+   if (any(it_4%v /= 123_4)) call abort\n+\n+\n 9000 format(12I3)\n 9010 format(12F7.3)\n 9020 format(25F7.3)"}, {"sha": "47b9aef2e3f9c70bfb8ea01d0ad6047be373c127", "filename": "gcc/testsuite/gfortran.dg/intrinsic_unpack_1.f90", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7d0f4d5fabc279dd81330ebffdf037b31420706/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_unpack_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7d0f4d5fabc279dd81330ebffdf037b31420706/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_unpack_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_unpack_1.f90?ref=c7d0f4d5fabc279dd81330ebffdf037b31420706", "patch": "@@ -10,6 +10,12 @@ program intrinsic_unpack\n    real(kind=8), dimension(3,3) :: ar8, br8\n    complex(kind=4), dimension(3,3) :: ac4, bc4\n    complex(kind=8), dimension(3,3) :: ac8, bc8\n+   type i4_t\n+      integer(kind=4) :: v\n+   end type i4_t\n+   type(i4_t), dimension(3,3) :: at4, bt4\n+   type(i4_t), dimension(3) :: vt4\n+\n    logical, dimension(3, 3) :: mask\n    character(len=500) line1, line2\n    integer i\n@@ -116,4 +122,14 @@ program intrinsic_unpack\n         mask, ac8)\n    if (line1 .ne. line2) call abort\n \n+   at4%v = reshape ((/1, 0, 0, 0, 1, 0, 0, 0, 1/), (/3, 3/));\n+   vt4%v = (/2_4, 3_4, 4_4/)\n+   bt4 = unpack (vt4, mask, at4)\n+   if (any (bt4%v .ne. reshape ((/1, 2, 0, 3, 1, 0, 0, 0, 4/), (/3, 3/)))) &\n+      call abort\n+   bt4%v = -1\n+   bt4 = unpack (vt4, mask, i4_t(0_4))\n+   if (any (bt4%v .ne. reshape ((/0, 2, 0, 3, 0, 0, 0, 0, 4/), (/3, 3/)))) &\n+        call abort\n+\n end program"}, {"sha": "e228cf6db8cb56a6b1d7b8e68c92eae01a37ca6f", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7d0f4d5fabc279dd81330ebffdf037b31420706/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7d0f4d5fabc279dd81330ebffdf037b31420706/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=c7d0f4d5fabc279dd81330ebffdf037b31420706", "patch": "@@ -1,3 +1,37 @@\n+2008-04-13  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\tFrancois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR libfortran/32972\n+\tPR libfortran/32512\n+\tconfigure.ac:  Add test for uintptr_t.\n+\tconfigure:  Regenerated.\n+\tconfig.h.in:  Regenerated.\n+\t* libgfortran.h: GFC_DTYPE_DERIVED_1:  New macro.\n+\tGFC_DTYPE_DERIVED_2:  New macro.\n+\tGFC_DTYPE_DERIVED_4:  New macro.\n+\tGFC_DTYPE_DERIVED_8:  New macro.\n+\tGFC_DTYPE_DERIVED_16:  New macro.\n+\tGFC_UNALIGNED_2:  New macro.\n+\tGFC_UNALIGNED_4:  New macro.\n+\tGFC_UNALIGNED_8:  New macro.\n+\tGFC_UNALIGNED_16:  New macro.\n+\tintptr_t:  Define if we don't have it.\n+\tuintptr_t:  Likewise.\n+\t* runtime/backtrace.c (show_backtrace):  Use intptr_t.\n+\t* intrinsics/signal.c (signal_sub):  Likewise.\n+\t(signal_sub_int):  Likewise.\n+\t(alarm_sub_int_i4):  Likewise.\n+\t* intrinsics/spread_generic.c (spread):  Use the integer\n+\troutines for handling derived types of sizes 1, 2, 4, 8 and 16\n+\tif the alignment of all pointers is correct.\n+\t(spread_scalar):  Likewise.\n+\t* intrinsics/pack_generic.c (pack):  Likewise.\n+\tUse GFD_DTYPE_TYPE_SIZE to avoid nested switch statements.\n+\t* intrinsics/unpack_generic.c (unpack1):  Likewise.\n+\t(unpack0):  Likewise.\n+\t* runtime/in_pack_generic.c (internal_pack):  Likewise.\n+\t* runtime/in_unpack_generic.c (internal_unpack):  Likewise.\n+\n 2008-04-09  Jakub Jelinek  <jakub@redhat.com>\n \n \t* io/list_read.c (snprintf): Define if HAVE_SNPRINTF isn't defined."}, {"sha": "1f291a48e2773ad449bf6c3c39eccac37be8b66a", "filename": "libgfortran/config.h.in", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7d0f4d5fabc279dd81330ebffdf037b31420706/libgfortran%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7d0f4d5fabc279dd81330ebffdf037b31420706/libgfortran%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig.h.in?ref=c7d0f4d5fabc279dd81330ebffdf037b31420706", "patch": "@@ -744,6 +744,9 @@\n /* Define to 1 if you have the `ttyname' function. */\n #undef HAVE_TTYNAME\n \n+/* Define to 1 if the system has the type `uintptr_t'. */\n+#undef HAVE_UINTPTR_T\n+\n /* Define to 1 if you have the <unistd.h> header file. */\n #undef HAVE_UNISTD_H\n \n@@ -805,19 +808,19 @@\n /* Define to the version of this package. */\n #undef PACKAGE_VERSION\n \n-/* The size of `char', as computed by sizeof. */\n+/* The size of a `char', as computed by sizeof. */\n #undef SIZEOF_CHAR\n \n-/* The size of `int', as computed by sizeof. */\n+/* The size of a `int', as computed by sizeof. */\n #undef SIZEOF_INT\n \n-/* The size of `long', as computed by sizeof. */\n+/* The size of a `long', as computed by sizeof. */\n #undef SIZEOF_LONG\n \n-/* The size of `short', as computed by sizeof. */\n+/* The size of a `short', as computed by sizeof. */\n #undef SIZEOF_SHORT\n \n-/* The size of `void *', as computed by sizeof. */\n+/* The size of a `void *', as computed by sizeof. */\n #undef SIZEOF_VOID_P\n \n /* Define to 1 if you have the ANSI C header files. */\n@@ -835,5 +838,5 @@\n /* Define for large files, on AIX-style hosts. */\n #undef _LARGE_FILES\n \n-/* Define to `long int' if <sys/types.h> does not define. */\n+/* Define to `long' if <sys/types.h> does not define. */\n #undef off_t"}, {"sha": "c1e45c72592e0a28884452f738e64db5423178da", "filename": "libgfortran/configure", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7d0f4d5fabc279dd81330ebffdf037b31420706/libgfortran%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7d0f4d5fabc279dd81330ebffdf037b31420706/libgfortran%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure?ref=c7d0f4d5fabc279dd81330ebffdf037b31420706", "patch": "@@ -18815,6 +18815,71 @@ cat >>confdefs.h <<_ACEOF\n _ACEOF\n \n \n+fi\n+\n+echo \"$as_me:$LINENO: checking for uintptr_t\" >&5\n+echo $ECHO_N \"checking for uintptr_t... $ECHO_C\" >&6\n+if test \"${ac_cv_type_uintptr_t+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+$ac_includes_default\n+int\n+main ()\n+{\n+if ((uintptr_t *) 0)\n+  return 0;\n+if (sizeof (uintptr_t))\n+  return 0;\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n+  (eval $ac_compile) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest.$ac_objext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_cv_type_uintptr_t=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_cv_type_uintptr_t=no\n+fi\n+rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n+fi\n+echo \"$as_me:$LINENO: result: $ac_cv_type_uintptr_t\" >&5\n+echo \"${ECHO_T}$ac_cv_type_uintptr_t\" >&6\n+if test $ac_cv_type_uintptr_t = yes; then\n+\n+cat >>confdefs.h <<_ACEOF\n+#define HAVE_UINTPTR_T 1\n+_ACEOF\n+\n+\n fi\n \n "}, {"sha": "657ca4f6d9e91129d4632f7ce90adf7df8199b72", "filename": "libgfortran/configure.ac", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7d0f4d5fabc279dd81330ebffdf037b31420706/libgfortran%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7d0f4d5fabc279dd81330ebffdf037b31420706/libgfortran%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure.ac?ref=c7d0f4d5fabc279dd81330ebffdf037b31420706", "patch": "@@ -211,6 +211,7 @@ AC_CHECK_FUNCS(backtrace backtrace_symbols)\n \n # Check for types\n AC_CHECK_TYPES([intptr_t])\n+AC_CHECK_TYPES([uintptr_t])\n \n # Check libc for getgid, getpid, getuid\n AC_CHECK_LIB([c],[getgid],[AC_DEFINE([HAVE_GETGID],[1],[libc includes getgid])])"}, {"sha": "e282c916502e8dd5d066ff9068dd319379118d43", "filename": "libgfortran/intrinsics/pack_generic.c", "status": "modified", "additions": 114, "deletions": 68, "changes": 182, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7d0f4d5fabc279dd81330ebffdf037b31420706/libgfortran%2Fintrinsics%2Fpack_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7d0f4d5fabc279dd81330ebffdf037b31420706/libgfortran%2Fintrinsics%2Fpack_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fpack_generic.c?ref=c7d0f4d5fabc279dd81330ebffdf037b31420706", "patch": "@@ -313,101 +313,147 @@ void\n pack (gfc_array_char *ret, const gfc_array_char *array,\n       const gfc_array_l1 *mask, const gfc_array_char *vector)\n {\n-  int type;\n+  index_type type_size;\n   index_type size;\n \n-  type = GFC_DESCRIPTOR_TYPE (array);\n-  size = GFC_DESCRIPTOR_SIZE (array);\n+  type_size = GFC_DTYPE_TYPE_SIZE(array);\n \n-  switch(type)\n+  switch(type_size)\n     {\n-    case GFC_DTYPE_INTEGER:\n-    case GFC_DTYPE_LOGICAL:\n-      switch(size)\n-\t{\n-\tcase sizeof (GFC_INTEGER_1):\n-\t  pack_i1 ((gfc_array_i1 *) ret, (gfc_array_i1 *) array,\n-\t\t   (gfc_array_l1 *) mask, (gfc_array_i1 *) vector);\n-\t  return;\n+    case GFC_DTYPE_LOGICAL_1:\n+    case GFC_DTYPE_INTEGER_1:\n+    case GFC_DTYPE_DERIVED_1:\n+      pack_i1 ((gfc_array_i1 *) ret, (gfc_array_i1 *) array,\n+\t       (gfc_array_l1 *) mask, (gfc_array_i1 *) vector);\n+      return;\n \n-\tcase sizeof (GFC_INTEGER_2):\n-\t  pack_i2 ((gfc_array_i2 *) ret, (gfc_array_i2 *) array,\n-\t\t   (gfc_array_l1 *) mask, (gfc_array_i2 *) vector);\n-\t  return;\n+    case GFC_DTYPE_LOGICAL_2:\n+    case GFC_DTYPE_INTEGER_2:\n+      pack_i2 ((gfc_array_i2 *) ret, (gfc_array_i2 *) array,\n+\t       (gfc_array_l1 *) mask, (gfc_array_i2 *) vector);\n+      return;\n \n-\tcase sizeof (GFC_INTEGER_4):\n-\t  pack_i4 ((gfc_array_i4 *) ret, (gfc_array_i4 *) array,\n-\t\t   (gfc_array_l1 *) mask, (gfc_array_i4 *) vector);\n-\t  return;\n+    case GFC_DTYPE_LOGICAL_4:\n+    case GFC_DTYPE_INTEGER_4:\n \n-\tcase sizeof (GFC_INTEGER_8):\n-\t  pack_i8 ((gfc_array_i8 *) ret, (gfc_array_i8 *) array,\n-\t\t   (gfc_array_l1 *) mask, (gfc_array_i8 *) vector);\n-\t  return;\n+      pack_i4 ((gfc_array_i4 *) ret, (gfc_array_i4 *) array,\n+\t       (gfc_array_l1 *) mask, (gfc_array_i4 *) vector);\n+      return;\n+\n+    case GFC_DTYPE_LOGICAL_8:\n+    case GFC_DTYPE_INTEGER_8:\n+\n+      pack_i8 ((gfc_array_i8 *) ret, (gfc_array_i8 *) array,\n+\t       (gfc_array_l1 *) mask, (gfc_array_i8 *) vector);\n+      return;\n \n #ifdef HAVE_GFC_INTEGER_16\n-\tcase sizeof (GFC_INTEGER_16):\n-\t  pack_i16 ((gfc_array_i16 *) ret, (gfc_array_i16 *) array,\n-\t\t   (gfc_array_l1 *) mask, (gfc_array_i16 *) vector);\n-\t  return;\n+    case GFC_DTYPE_LOGICAL_16:\n+    case GFC_DTYPE_INTEGER_16:\n+\n+      pack_i16 ((gfc_array_i16 *) ret, (gfc_array_i16 *) array,\n+\t\t(gfc_array_l1 *) mask, (gfc_array_i16 *) vector);\n+      return;\n #endif\n-\t}\n-    case GFC_DTYPE_REAL:\n-      switch(size)\n-\t{\n-\tcase sizeof (GFC_REAL_4):\n-\t  pack_r4 ((gfc_array_r4 *) ret, (gfc_array_r4 *) array,\n-\t\t   (gfc_array_l1 *) mask, (gfc_array_r4 *) vector);\n-\t  return;\n+    case GFC_DTYPE_REAL_4:\n+      pack_r4 ((gfc_array_r4 *) ret, (gfc_array_r4 *) array,\n+\t       (gfc_array_l1 *) mask, (gfc_array_r4 *) vector);\n+      return;\n \n-\tcase sizeof (GFC_REAL_8):\n-\t  pack_r8 ((gfc_array_r8 *) ret, (gfc_array_r8 *) array,\n-\t\t   (gfc_array_l1 *) mask, (gfc_array_r8 *) vector);\n-\t  return;\n+    case GFC_DTYPE_REAL_8:\n+      pack_r8 ((gfc_array_r8 *) ret, (gfc_array_r8 *) array,\n+\t       (gfc_array_l1 *) mask, (gfc_array_r8 *) vector);\n+      return;\n \n #ifdef HAVE_GFC_REAL_10\n-\tcase sizeof (GFC_REAL_10):\n-\t  pack_r10 ((gfc_array_r10 *) ret, (gfc_array_r10 *) array,\n-\t\t    (gfc_array_l1 *) mask, (gfc_array_r10 *) vector);\n-\t  return;\n+    case GFC_DTYPE_REAL_10:\n+      pack_r10 ((gfc_array_r10 *) ret, (gfc_array_r10 *) array,\n+\t\t(gfc_array_l1 *) mask, (gfc_array_r10 *) vector);\n+      return;\n #endif\n \n #ifdef HAVE_GFC_REAL_16\n-\tcase sizeof (GFC_REAL_16):\n-\t  pack_r16 ((gfc_array_r16 *) ret, (gfc_array_r16 *) array,\n-\t\t    (gfc_array_l1 *) mask, (gfc_array_r16 *) vector);\n-\t  return;\n+    case GFC_DTYPE_REAL_16:\n+      pack_r16 ((gfc_array_r16 *) ret, (gfc_array_r16 *) array,\n+\t\t(gfc_array_l1 *) mask, (gfc_array_r16 *) vector);\n+      return;\n #endif\n-\t}\n-    case GFC_DTYPE_COMPLEX:\n-      switch(size)\n-\t{\n-\tcase sizeof (GFC_COMPLEX_4):\n-\t  pack_c4 ((gfc_array_c4 *) ret, (gfc_array_c4 *) array,\n-\t\t   (gfc_array_l1 *) mask, (gfc_array_c4 *) vector);\n-\t  return;\n+    case GFC_DTYPE_COMPLEX_4:\n+      pack_c4 ((gfc_array_c4 *) ret, (gfc_array_c4 *) array,\n+\t       (gfc_array_l1 *) mask, (gfc_array_c4 *) vector);\n+      return;\n \n-\tcase sizeof (GFC_COMPLEX_8):\n-\t  pack_c8 ((gfc_array_c8 *) ret, (gfc_array_c8 *) array,\n-\t\t   (gfc_array_l1 *) mask, (gfc_array_c8 *) vector);\n-\t  return;\n+    case GFC_DTYPE_COMPLEX_8:\n+      pack_c8 ((gfc_array_c8 *) ret, (gfc_array_c8 *) array,\n+\t       (gfc_array_l1 *) mask, (gfc_array_c8 *) vector);\n+      return;\n \n #ifdef HAVE_GFC_COMPLEX_10\n-\tcase sizeof (GFC_COMPLEX_10):\n-\t  pack_c10 ((gfc_array_c10 *) ret, (gfc_array_c10 *) array,\n-\t\t    (gfc_array_l1 *) mask, (gfc_array_c10 *) vector);\n-\t  return;\n+    case GFC_DTYPE_COMPLEX_10:\n+      pack_c10 ((gfc_array_c10 *) ret, (gfc_array_c10 *) array,\n+\t\t(gfc_array_l1 *) mask, (gfc_array_c10 *) vector);\n+      return;\n #endif\n \n #ifdef HAVE_GFC_COMPLEX_16\n-\tcase sizeof (GFC_COMPLEX_16):\n-\t  pack_c16 ((gfc_array_c16 *) ret, (gfc_array_c16 *) array,\n-\t\t    (gfc_array_l1 *) mask, (gfc_array_c16 *) vector);\n-\t  return;\n+    case GFC_DTYPE_COMPLEX_16:\n+      pack_c16 ((gfc_array_c16 *) ret, (gfc_array_c16 *) array,\n+\t\t(gfc_array_l1 *) mask, (gfc_array_c16 *) vector);\n+      return;\n #endif\n \n+      /* For derived types, let's check the actual alignment of the\n+\t data pointers.  If they are aligned, we can safely call\n+\t the unpack functions.  */\n+\n+    case GFC_DTYPE_DERIVED_2:\n+      if (GFC_UNALIGNED_2(ret->data) || GFC_UNALIGNED_2(array->data)\n+\t  || GFC_UNALIGNED_2(vector->data))\n+\tbreak;\n+      else\n+\t{\n+\t  pack_i2 ((gfc_array_i2 *) ret, (gfc_array_i2 *) array,\n+\t\t   (gfc_array_l1 *) mask, (gfc_array_i2 *) vector);\n+\t  return;\n+\t}\n+\n+    case GFC_DTYPE_DERIVED_4:\n+      if (GFC_UNALIGNED_4(ret->data) || GFC_UNALIGNED_4(array->data)\n+\t  || GFC_UNALIGNED_4(vector->data))\n+\tbreak;\n+      else\n+\t{\n+\t  pack_i4 ((gfc_array_i4 *) ret, (gfc_array_i4 *) array,\n+\t\t   (gfc_array_l1 *) mask, (gfc_array_i4 *) vector);\n+\t  return;\n+\t}\n+\n+    case GFC_DTYPE_DERIVED_8:\n+      if (GFC_UNALIGNED_8(ret->data) || GFC_UNALIGNED_8(array->data)\n+\t  || GFC_UNALIGNED_8(vector->data))\n+\tbreak;\n+      else\n+\t{\n+\t  pack_i8 ((gfc_array_i8 *) ret, (gfc_array_i8 *) array,\n+\t\t   (gfc_array_l1 *) mask, (gfc_array_i8 *) vector);\n \t}\n+\n+#ifdef HAVE_GFC_INTEGER_16\n+    case GFC_DTYPE_DERIVED_16:\n+      if (GFC_UNALIGNED_16(ret->data) || GFC_UNALIGNED_16(array->data)\n+\t  || GFC_UNALIGNED_16(vector->data))\n+\tbreak;\n+      else\n+\t{\n+\t  pack_i16 ((gfc_array_i16 *) ret, (gfc_array_i16 *) array,\n+\t\t   (gfc_array_l1 *) mask, (gfc_array_i16 *) vector);\n+\t  return;\n+\t}\n+#endif\n+\n     }\n+\n+  size = GFC_DESCRIPTOR_SIZE (array);\n   pack_internal (ret, array, mask, vector, size);\n }\n "}, {"sha": "bd03f6d1afe980acfbb2f07ba5c6b151d7d11add", "filename": "libgfortran/intrinsics/signal.c", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7d0f4d5fabc279dd81330ebffdf037b31420706/libgfortran%2Fintrinsics%2Fsignal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7d0f4d5fabc279dd81330ebffdf037b31420706/libgfortran%2Fintrinsics%2Fsignal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fsignal.c?ref=c7d0f4d5fabc279dd81330ebffdf037b31420706", "patch": "@@ -44,12 +44,6 @@ Boston, MA 02110-1301, USA.  */\n \n #include <errno.h>\n \n-#ifdef HAVE_INTPTR_T\n-# define INTPTR_T intptr_t\n-#else\n-# define INTPTR_T int\n-#endif\n-\n /* SIGNAL subroutine with PROCEDURE as handler  */\n extern void signal_sub (int *, void (*)(int), int *);\n iexport_proto(signal_sub);\n@@ -58,11 +52,11 @@ void\n signal_sub (int *number, void (*handler)(int), int *status)\n {\n #ifdef HAVE_SIGNAL\n-  INTPTR_T ret;\n+  intptr_t ret;\n \n   if (status != NULL)\n     {\n-      ret = (INTPTR_T) signal (*number, handler);\n+      ret = (intptr_t) signal (*number, handler);\n       *status = (int) ret;\n     }\n   else\n@@ -84,11 +78,11 @@ void\n signal_sub_int (int *number, int *handler, int *status)\n {\n #ifdef HAVE_SIGNAL\n-  INTPTR_T ptr = *handler, ret;\n+  intptr_t ptr = *handler, ret;\n \n   if (status != NULL)\n     {\n-      ret = (INTPTR_T) signal (*number, (void (*)(int)) ptr);\n+      ret = (intptr_t) signal (*number, (void (*)(int)) ptr);\n       *status = (int) ret;\n     }\n   else\n@@ -204,14 +198,14 @@ alarm_sub_int_i4 (int *seconds __attribute__ ((unused)),\n #if defined (SIGALRM) && defined (HAVE_ALARM) && defined (HAVE_SIGNAL)\n   if (status != NULL)\n     {\n-      if (signal (SIGALRM, (void (*)(int)) (INTPTR_T) *handler) == SIG_ERR)\n+      if (signal (SIGALRM, (void (*)(int)) (intptr_t) *handler) == SIG_ERR)\n \t*status = -1;\n       else\n \t*status = alarm (*seconds);\n     }\n   else\n     {\n-      signal (SIGALRM, (void (*)(int)) (INTPTR_T) *handler);\n+      signal (SIGALRM, (void (*)(int)) (intptr_t) *handler);\n       alarm (*seconds);\n     }\n #else\n@@ -234,14 +228,14 @@ alarm_sub_int_i8 (int *seconds __attribute__ ((unused)),\n #if defined (SIGALRM) && defined (HAVE_ALARM) && defined (HAVE_SIGNAL)\n   if (status != NULL)\n     {\n-      if (signal (SIGALRM, (void (*)(int)) (INTPTR_T) *handler) == SIG_ERR)\n+      if (signal (SIGALRM, (void (*)(int)) (intptr_t) *handler) == SIG_ERR)\n \t*status = -1;\n       else\n \t*status = alarm (*seconds);\n     }\n   else\n     {\n-      signal (SIGALRM, (void (*)(int)) (INTPTR_T) *handler);\n+      signal (SIGALRM, (void (*)(int)) (intptr_t) *handler);\n       alarm (*seconds);\n     }\n #else"}, {"sha": "e50598a97c32339fb62036278c3d74f2853b1ad3", "filename": "libgfortran/intrinsics/spread_generic.c", "status": "modified", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7d0f4d5fabc279dd81330ebffdf037b31420706/libgfortran%2Fintrinsics%2Fspread_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7d0f4d5fabc279dd81330ebffdf037b31420706/libgfortran%2Fintrinsics%2Fspread_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fspread_generic.c?ref=c7d0f4d5fabc279dd81330ebffdf037b31420706", "patch": "@@ -281,6 +281,7 @@ spread (gfc_array_char *ret, const gfc_array_char *source,\n   type_size = GFC_DTYPE_TYPE_SIZE(ret);\n   switch(type_size)\n     {\n+    case GFC_DTYPE_DERIVED_1:\n     case GFC_DTYPE_LOGICAL_1:\n     case GFC_DTYPE_INTEGER_1:\n       spread_i1 ((gfc_array_i1 *) ret, (gfc_array_i1 *) source,\n@@ -361,7 +362,49 @@ spread (gfc_array_char *ret, const gfc_array_char *source,\n       return;\n #endif\n \n+    case GFC_DTYPE_DERIVED_2:\n+      if (GFC_UNALIGNED_2(ret->data) || GFC_UNALIGNED_2(source->data))\n+\tbreak;\n+      else\n+\t{\n+\t  spread_i1 ((gfc_array_i1 *) ret, (gfc_array_i1 *) source,\n+\t\t     *along, *pncopies);\n+\t  return;\n+\t}\n+\n+    case GFC_DTYPE_DERIVED_4:\n+      if (GFC_UNALIGNED_4(ret->data) || GFC_UNALIGNED_4(source->data))\n+\tbreak;\n+      else\n+\t{\n+\t  spread_i4 ((gfc_array_i4 *) ret, (gfc_array_i4 *) source,\n+\t\t     *along, *pncopies);\n+\t  return;\n+\t}\n+\n+    case GFC_DTYPE_DERIVED_8:\n+      if (GFC_UNALIGNED_8(ret->data) || GFC_UNALIGNED_8(source->data))\n+\tbreak;\n+      else\n+\t{\n+\t  spread_i8 ((gfc_array_i8 *) ret, (gfc_array_i8 *) source,\n+\t\t     *along, *pncopies);\n+\t  return;\n+\t}\n+\n+#ifdef HAVE_GFC_INTEGER_16\n+    case GFC_DTYPE_DERIVED_16:\n+      if (GFC_UNALIGNED_16(ret->data) || GFC_UNALIGNED_16(source->data))\n+\tbreak;\n+      else\n+\t{\n+\t  spread_i16 ((gfc_array_i16 *) ret, (gfc_array_i16 *) source,\n+\t\t      *along, *pncopies);\n+\t  return;\n+\t}\n+#endif\n     }\n+\n   spread_internal (ret, source, along, pncopies, GFC_DESCRIPTOR_SIZE (source));\n }\n \n@@ -398,6 +441,7 @@ spread_scalar (gfc_array_char *ret, const char *source,\n   type_size = GFC_DTYPE_TYPE_SIZE(ret);\n   switch(type_size)\n     {\n+    case GFC_DTYPE_DERIVED_1:\n     case GFC_DTYPE_LOGICAL_1:\n     case GFC_DTYPE_INTEGER_1:\n       spread_scalar_i1 ((gfc_array_i1 *) ret, (GFC_INTEGER_1 *) source,\n@@ -478,6 +522,46 @@ spread_scalar (gfc_array_char *ret, const char *source,\n       return;\n #endif\n \n+    case GFC_DTYPE_DERIVED_2:\n+      if (GFC_UNALIGNED_2(ret->data) || GFC_UNALIGNED_2(source))\n+\tbreak;\n+      else\n+\t{\n+\t  spread_scalar_i2 ((gfc_array_i2 *) ret, (GFC_INTEGER_2 *) source,\n+\t\t\t    *along, *pncopies);\n+\t  return;\n+\t}\n+\n+    case GFC_DTYPE_DERIVED_4:\n+      if (GFC_UNALIGNED_4(ret->data) || GFC_UNALIGNED_4(source))\n+\tbreak;\n+      else\n+\t{\n+\t  spread_scalar_i4 ((gfc_array_i4 *) ret, (GFC_INTEGER_4 *) source,\n+\t\t\t    *along, *pncopies);\n+\t  return;\n+\t}\n+\n+    case GFC_DTYPE_DERIVED_8:\n+      if (GFC_UNALIGNED_8(ret->data) || GFC_UNALIGNED_8(source))\n+\tbreak;\n+      else\n+\t{\n+\t  spread_scalar_i8 ((gfc_array_i8 *) ret, (GFC_INTEGER_8 *) source,\n+\t\t\t    *along, *pncopies);\n+\t  return;\n+\t}\n+#ifdef HAVE_GFC_INTEGER_16\n+    case GFC_DTYPE_DERIVED_16:\n+      if (GFC_UNALIGNED_16(ret->data) || GFC_UNALIGNED_16(source))\n+\tbreak;\n+      else\n+\t{\n+\t  spread_scalar_i16 ((gfc_array_i16 *) ret, (GFC_INTEGER_16 *) source,\n+\t\t\t     *along, *pncopies);\n+\t  return;\n+\t}\n+#endif\n     }\n \n   spread_internal_scalar (ret, source, along, pncopies, GFC_DESCRIPTOR_SIZE (ret));"}, {"sha": "82607bd58979bfe286ee8100f0a81bbed487b44b", "filename": "libgfortran/intrinsics/unpack_generic.c", "status": "modified", "additions": 216, "deletions": 140, "changes": 356, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7d0f4d5fabc279dd81330ebffdf037b31420706/libgfortran%2Fintrinsics%2Funpack_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7d0f4d5fabc279dd81330ebffdf037b31420706/libgfortran%2Fintrinsics%2Funpack_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Funpack_generic.c?ref=c7d0f4d5fabc279dd81330ebffdf037b31420706", "patch": "@@ -196,102 +196,141 @@ void\n unpack1 (gfc_array_char *ret, const gfc_array_char *vector,\n \t const gfc_array_l1 *mask, const gfc_array_char *field)\n {\n-  int type;\n+  index_type type_size;\n   index_type size;\n \n-  type = GFC_DESCRIPTOR_TYPE (vector);\n+  type_size = GFC_DTYPE_TYPE_SIZE (vector);\n   size = GFC_DESCRIPTOR_SIZE (vector);\n \n-  switch(type)\n+  switch(type_size)\n     {\n-    case GFC_DTYPE_INTEGER:\n-    case GFC_DTYPE_LOGICAL:\n-      switch(size)\n-\t{\n-\tcase sizeof (GFC_INTEGER_1):\n-\t  unpack1_i1 ((gfc_array_i1 *) ret, (gfc_array_i1 *) vector,\n-\t\t      mask, (gfc_array_i1 *) field);\n-\t  return;\n-\n-\tcase sizeof (GFC_INTEGER_2):\n-\t  unpack1_i2 ((gfc_array_i2 *) ret, (gfc_array_i2 *) vector,\n-\t\t      mask, (gfc_array_i2 *) field);\n-\t  return;\n-\n-\tcase sizeof (GFC_INTEGER_4):\n-\t  unpack1_i4 ((gfc_array_i4 *) ret, (gfc_array_i4 *) vector,\n-\t\t      mask, (gfc_array_i4 *) field);\n-\t  return;\n-\n-\tcase sizeof (GFC_INTEGER_8):\n-\t  unpack1_i8 ((gfc_array_i8 *) ret, (gfc_array_i8 *) vector,\n-\t\t      mask, (gfc_array_i8 *) field);\n-\t  return;\n+    case GFC_DTYPE_LOGICAL_1:\n+    case GFC_DTYPE_INTEGER_1:\n+    case GFC_DTYPE_DERIVED_1:\n+      unpack1_i1 ((gfc_array_i1 *) ret, (gfc_array_i1 *) vector,\n+\t\t  mask, (gfc_array_i1 *) field);\n+      return;\n+\n+    case GFC_DTYPE_LOGICAL_2:\n+    case GFC_DTYPE_INTEGER_2:\n+      unpack1_i2 ((gfc_array_i2 *) ret, (gfc_array_i2 *) vector,\n+\t\t  mask, (gfc_array_i2 *) field);\n+      return;\n+\n+    case GFC_DTYPE_LOGICAL_4:\n+    case GFC_DTYPE_INTEGER_4:\n+      unpack1_i4 ((gfc_array_i4 *) ret, (gfc_array_i4 *) vector,\n+\t\t  mask, (gfc_array_i4 *) field);\n+      return;\n+\n+    case GFC_DTYPE_LOGICAL_8:\n+    case GFC_DTYPE_INTEGER_8:\n+      unpack1_i8 ((gfc_array_i8 *) ret, (gfc_array_i8 *) vector,\n+\t\t  mask, (gfc_array_i8 *) field);\n+      return;\n \n #ifdef HAVE_GFC_INTEGER_16\n-\tcase sizeof (GFC_INTEGER_16):\n-\t  unpack1_i16 ((gfc_array_i16 *) ret, (gfc_array_i16 *) vector,\n-\t\t       mask, (gfc_array_i16 *) field);\n-\t  return;\n+    case GFC_DTYPE_LOGICAL_16:\n+    case GFC_DTYPE_INTEGER_16:\n+      unpack1_i16 ((gfc_array_i16 *) ret, (gfc_array_i16 *) vector,\n+\t\t   mask, (gfc_array_i16 *) field);\n+      return;\n #endif\n-\t}\n-    case GFC_DTYPE_REAL:\n-      switch (size)\n-\t{\n-\tcase sizeof (GFC_REAL_4):\n-\t  unpack1_r4 ((gfc_array_r4 *) ret, (gfc_array_r4 *) vector,\n-\t\t      mask, (gfc_array_r4 *) field);\n-\t  return;\n+    case GFC_DTYPE_REAL_4:\n+      unpack1_r4 ((gfc_array_r4 *) ret, (gfc_array_r4 *) vector,\n+\t\t  mask, (gfc_array_r4 *) field);\n+      return;\n \n-\tcase sizeof (GFC_REAL_8):\n-\t  unpack1_r8 ((gfc_array_r8 *) ret, (gfc_array_r8 *) vector,\n-\t\t      mask, (gfc_array_r8 *) field);\n-\t  return;\n+    case GFC_DTYPE_REAL_8:\n+      unpack1_r8 ((gfc_array_r8 *) ret, (gfc_array_r8 *) vector,\n+\t\t  mask, (gfc_array_r8 *) field);\n+      return;\n \n #ifdef HAVE_GFC_REAL_10\n-\tcase sizeof (GFC_REAL_10):\n-\t  unpack1_r10 ((gfc_array_r10 *) ret, (gfc_array_r10 *) vector,\n-\t\t      mask, (gfc_array_r10 *) field);\n+    case GFC_DTYPE_REAL_10:\n+      unpack1_r10 ((gfc_array_r10 *) ret, (gfc_array_r10 *) vector,\n+\t\t   mask, (gfc_array_r10 *) field);\n \t  return;\n #endif\n \n #ifdef HAVE_GFC_REAL_16\n-\tcase sizeof (GFC_REAL_16):\n-\t  unpack1_r16 ((gfc_array_r16 *) ret, (gfc_array_r16 *) vector,\n-\t\t      mask, (gfc_array_r16 *) field);\n-\t  return;\n+    case GFC_DTYPE_REAL_16:\n+      unpack1_r16 ((gfc_array_r16 *) ret, (gfc_array_r16 *) vector,\n+\t\t   mask, (gfc_array_r16 *) field);\n+      return;\n #endif\n-\t}\n \n-    case GFC_DTYPE_COMPLEX:\n-      switch (size)\n-\t{\n-\tcase sizeof (GFC_COMPLEX_4):\n-\t  unpack1_c4 ((gfc_array_c4 *) ret, (gfc_array_c4 *) vector,\n-\t\t      mask, (gfc_array_c4 *) field);\n-\t  return;\n+    case GFC_DTYPE_COMPLEX_4:\n+      unpack1_c4 ((gfc_array_c4 *) ret, (gfc_array_c4 *) vector,\n+\t\t  mask, (gfc_array_c4 *) field);\n+      return;\n \n-\tcase sizeof (GFC_COMPLEX_8):\n-\t  unpack1_c8 ((gfc_array_c8 *) ret, (gfc_array_c8 *) vector,\n-\t\t      mask, (gfc_array_c8 *) field);\n-\t  return;\n+    case GFC_DTYPE_COMPLEX_8:\n+      unpack1_c8 ((gfc_array_c8 *) ret, (gfc_array_c8 *) vector,\n+\t\t  mask, (gfc_array_c8 *) field);\n+      return;\n \n #ifdef HAVE_GFC_COMPLEX_10\n-\tcase sizeof (GFC_COMPLEX_10):\n-\t  unpack1_c10 ((gfc_array_c10 *) ret, (gfc_array_c10 *) vector,\n-\t\t      mask, (gfc_array_c10 *) field);\n-\t  return;\n+    case GFC_DTYPE_COMPLEX_10:\n+      unpack1_c10 ((gfc_array_c10 *) ret, (gfc_array_c10 *) vector,\n+\t\t   mask, (gfc_array_c10 *) field);\n+      return;\n #endif\n \n #ifdef HAVE_GFC_COMPLEX_16\n-\tcase sizeof (GFC_COMPLEX_16):\n-\t  unpack1_c16 ((gfc_array_c16 *) ret, (gfc_array_c16 *) vector,\n-\t\t      mask, (gfc_array_c16 *) field);\n-\t  return;\n+    case GFC_DTYPE_COMPLEX_16:\n+      unpack1_c16 ((gfc_array_c16 *) ret, (gfc_array_c16 *) vector,\n+\t\t   mask, (gfc_array_c16 *) field);\n+      return;\n #endif\n+\n+    case GFC_DTYPE_DERIVED_2:\n+      if (GFC_UNALIGNED_2(ret->data) || GFC_UNALIGNED_2(vector->data)\n+\t  || GFC_UNALIGNED_2(field->data))\n+\tbreak;\n+      else\n+\t{\n+\t  unpack1_i2 ((gfc_array_i2 *) ret, (gfc_array_i2 *) vector,\n+\t\t      mask, (gfc_array_i2 *) field);\n+\t  return;\n+\t}\n+\n+    case GFC_DTYPE_DERIVED_4:\n+      if (GFC_UNALIGNED_4(ret->data) || GFC_UNALIGNED_4(vector->data)\n+\t  || GFC_UNALIGNED_4(field->data))\n+\tbreak;\n+      else\n+\t{\n+\t  unpack1_i4 ((gfc_array_i4 *) ret, (gfc_array_i4 *) vector,\n+\t\t      mask, (gfc_array_i4 *) field);\n+\t  return;\n+\t}\n+\n+    case GFC_DTYPE_DERIVED_8:\n+      if (GFC_UNALIGNED_8(ret->data) || GFC_UNALIGNED_8(vector->data)\n+\t  || GFC_UNALIGNED_8(field->data))\n+\tbreak;\n+      else\n+\t{\n+\t  unpack1_i8 ((gfc_array_i8 *) ret, (gfc_array_i8 *) vector,\n+\t\t      mask, (gfc_array_i8 *) field);\n+\t  return;\n \t}\n \n+#ifdef HAVE_GFC_INTEGER_16\n+    case GFC_DTYPE_DERIVED_16:\n+      if (GFC_UNALIGNED_16(ret->data) || GFC_UNALIGNED_16(vector->data)\n+\t  || GFC_UNALIGNED_16(field->data))\n+\tbreak;\n+      else\n+\t{\n+\t  unpack1_i16 ((gfc_array_i16 *) ret, (gfc_array_i16 *) vector,\n+\t\t       mask, (gfc_array_i16 *) field);\n+\t  return;\n+\t}\n+#endif\n     }\n+\n   unpack_internal (ret, vector, mask, field, size,\n \t\t   GFC_DESCRIPTOR_SIZE (field));\n }\n@@ -322,102 +361,139 @@ unpack0 (gfc_array_char *ret, const gfc_array_char *vector,\n {\n   gfc_array_char tmp;\n \n-  int type;\n+  index_type type_size;\n   index_type size;\n \n-  type = GFC_DESCRIPTOR_TYPE (vector);\n+  type_size = GFC_DTYPE_TYPE_SIZE (vector);\n   size = GFC_DESCRIPTOR_SIZE (vector);\n \n-  switch(type)\n+  switch(type_size)\n     {\n-    case GFC_DTYPE_INTEGER:\n-    case GFC_DTYPE_LOGICAL:\n-      switch(size)\n-\t{\n-\tcase sizeof (GFC_INTEGER_1):\n-\t  unpack0_i1 ((gfc_array_i1 *) ret, (gfc_array_i1 *) vector,\n-\t\t      mask, (GFC_INTEGER_1 *) field);\n-\t  return;\n-\n-\tcase sizeof (GFC_INTEGER_2):\n-\t  unpack0_i2 ((gfc_array_i2 *) ret, (gfc_array_i2 *) vector,\n-\t\t      mask, (GFC_INTEGER_2 *) field);\n-\t  return;\n-\n-\tcase sizeof (GFC_INTEGER_4):\n-\t  unpack0_i4 ((gfc_array_i4 *) ret, (gfc_array_i4 *) vector,\n-\t\t      mask, (GFC_INTEGER_4 *) field);\n-\t  return;\n-\n-\tcase sizeof (GFC_INTEGER_8):\n-\t  unpack0_i8 ((gfc_array_i8 *) ret, (gfc_array_i8 *) vector,\n-\t\t      mask, (GFC_INTEGER_8 *) field);\n-\t  return;\n+    case GFC_DTYPE_LOGICAL_1:\n+    case GFC_DTYPE_INTEGER_1:\n+    case GFC_DTYPE_DERIVED_1:\n+      unpack0_i1 ((gfc_array_i1 *) ret, (gfc_array_i1 *) vector,\n+\t\t  mask, (GFC_INTEGER_1 *) field);\n+      return;\n+\n+    case GFC_DTYPE_LOGICAL_2:\n+    case GFC_DTYPE_INTEGER_2:\n+      unpack0_i2 ((gfc_array_i2 *) ret, (gfc_array_i2 *) vector,\n+\t\t  mask, (GFC_INTEGER_2 *) field);\n+      return;\n+\n+    case GFC_DTYPE_LOGICAL_4:\n+    case GFC_DTYPE_INTEGER_4:\n+      unpack0_i4 ((gfc_array_i4 *) ret, (gfc_array_i4 *) vector,\n+\t\t  mask, (GFC_INTEGER_4 *) field);\n+      return;\n+\n+    case GFC_DTYPE_LOGICAL_8:\n+    case GFC_DTYPE_INTEGER_8:\n+      unpack0_i8 ((gfc_array_i8 *) ret, (gfc_array_i8 *) vector,\n+\t\t  mask, (GFC_INTEGER_8 *) field);\n+      return;\n \n #ifdef HAVE_GFC_INTEGER_16\n-\tcase sizeof (GFC_INTEGER_16):\n-\t  unpack0_i16 ((gfc_array_i16 *) ret, (gfc_array_i16 *) vector,\n-\t\t      mask, (GFC_INTEGER_16 *) field);\n-\t  return;\n+    case GFC_DTYPE_LOGICAL_16:\n+    case GFC_DTYPE_INTEGER_16:\n+      unpack0_i16 ((gfc_array_i16 *) ret, (gfc_array_i16 *) vector,\n+\t\t   mask, (GFC_INTEGER_16 *) field);\n+      return;\n #endif\n-\t}\n+    case GFC_DTYPE_REAL_4:\n+      unpack0_r4 ((gfc_array_r4 *) ret, (gfc_array_r4 *) vector,\n+\t\t  mask, (GFC_REAL_4 *) field);\n+      return;\n \n-    case GFC_DTYPE_REAL:\n-      switch(size)\n-\t{\n-\tcase sizeof (GFC_REAL_4):\n-\t  unpack0_r4 ((gfc_array_r4 *) ret, (gfc_array_r4 *) vector,\n-\t  \t      mask, (GFC_REAL_4 *) field);\n-\t  return;\n-\n-\tcase sizeof (GFC_REAL_8):\n-\t  unpack0_r8 ((gfc_array_r8 *) ret, (gfc_array_r8*) vector,\n-\t  \t      mask, (GFC_REAL_8  *) field);\n-\t  return;\n+    case GFC_DTYPE_REAL_8:\n+      unpack0_r8 ((gfc_array_r8 *) ret, (gfc_array_r8*) vector,\n+\t\t  mask, (GFC_REAL_8  *) field);\n+      return;\n \n #ifdef HAVE_GFC_REAL_10\n-\tcase sizeof (GFC_REAL_10):\n-\t  unpack0_r10 ((gfc_array_r10 *) ret, (gfc_array_r10 *) vector,\n-\t  \t      mask, (GFC_REAL_10 *) field);\n-\t  return;\n+    case GFC_DTYPE_REAL_10:\n+      unpack0_r10 ((gfc_array_r10 *) ret, (gfc_array_r10 *) vector,\n+\t\t   mask, (GFC_REAL_10 *) field);\n+      return;\n #endif\n \n #ifdef HAVE_GFC_REAL_16\n-\tcase sizeof (GFC_REAL_16):\n-\t  unpack0_r16 ((gfc_array_r16 *) ret, (gfc_array_r16 *) vector,\n-\t  \t      mask, (GFC_REAL_16 *) field);\n-\t  return;\n+    case GFC_DTYPE_REAL_16:\n+      unpack0_r16 ((gfc_array_r16 *) ret, (gfc_array_r16 *) vector,\n+\t\t   mask, (GFC_REAL_16 *) field);\n+      return;\n #endif\n-\t}\n \n-    case GFC_DTYPE_COMPLEX:\n-      switch(size)\n-\t{\n-\tcase sizeof (GFC_COMPLEX_4):\n-\t  unpack0_c4 ((gfc_array_c4 *) ret, (gfc_array_c4 *) vector,\n-\t  \t      mask, (GFC_COMPLEX_4 *) field);\n-\t  return;\n+    case GFC_DTYPE_COMPLEX_4:\n+      unpack0_c4 ((gfc_array_c4 *) ret, (gfc_array_c4 *) vector,\n+\t\t  mask, (GFC_COMPLEX_4 *) field);\n+      return;\n \n-\tcase sizeof (GFC_COMPLEX_8):\n-\t  unpack0_c8 ((gfc_array_c8 *) ret, (gfc_array_c8 *) vector,\n-\t  \t      mask, (GFC_COMPLEX_8 *) field);\n-\t  return;\n+    case GFC_DTYPE_COMPLEX_8:\n+      unpack0_c8 ((gfc_array_c8 *) ret, (gfc_array_c8 *) vector,\n+\t\t  mask, (GFC_COMPLEX_8 *) field);\n+      return;\n \n #ifdef HAVE_GFC_COMPLEX_10\n-\tcase sizeof (GFC_COMPLEX_10):\n-\t  unpack0_c10 ((gfc_array_c10 *) ret, (gfc_array_c10 *) vector,\n-\t  \t      mask, (GFC_COMPLEX_10 *) field);\n-\t  return;\n+    case GFC_DTYPE_COMPLEX_10:\n+      unpack0_c10 ((gfc_array_c10 *) ret, (gfc_array_c10 *) vector,\n+\t\t   mask, (GFC_COMPLEX_10 *) field);\n+      return;\n #endif\n \n #ifdef HAVE_GFC_COMPLEX_16\n-\tcase sizeof (GFC_COMPLEX_16):\n-\t  unpack0_c16 ((gfc_array_c16 *) ret, (gfc_array_c16 *) vector,\n-\t  \t      mask, (GFC_COMPLEX_16 *) field);\n-\t  return;\n+    case GFC_DTYPE_COMPLEX_16:\n+      unpack0_c16 ((gfc_array_c16 *) ret, (gfc_array_c16 *) vector,\n+\t\t   mask, (GFC_COMPLEX_16 *) field);\n+      return;\n #endif\n+    case GFC_DTYPE_DERIVED_2:\n+      if (GFC_UNALIGNED_2(ret->data) || GFC_UNALIGNED_2(vector->data)\n+\t  || GFC_UNALIGNED_2(field))\n+\tbreak;\n+      else\n+\t{\n+\t  unpack0_i2 ((gfc_array_i2 *) ret, (gfc_array_i2 *) vector,\n+\t\t      mask, (GFC_INTEGER_2 *) field);\n+\t  return;\n+\t}\n+\n+    case GFC_DTYPE_DERIVED_4:\n+      if (GFC_UNALIGNED_4(ret->data) || GFC_UNALIGNED_4(vector->data)\n+\t  || GFC_UNALIGNED_4(field))\n+\tbreak;\n+      else\n+\t{\n+\t  unpack0_i4 ((gfc_array_i4 *) ret, (gfc_array_i4 *) vector,\n+\t\t      mask, (GFC_INTEGER_4 *) field);\n+\t  return;\n+\t}\n+\n+    case GFC_DTYPE_DERIVED_8:\n+      if (GFC_UNALIGNED_8(ret->data) || GFC_UNALIGNED_8(vector->data)\n+\t  || GFC_UNALIGNED_8(field))\n+\tbreak;\n+      else\n+\t{\n+\t  unpack0_i8 ((gfc_array_i8 *) ret, (gfc_array_i8 *) vector,\n+\t\t      mask, (GFC_INTEGER_8 *) field);\n+\t  return;\n+\t}\n+#ifdef HAVE_GFC_INTEGER_16\n+    case GFC_DTYPE_DERIVED_16:\n+      if (GFC_UNALIGNED_16(ret->data) || GFC_UNALIGNED_16(vector->data)\n+\t  || GFC_UNALIGNED_16(field))\n+\tbreak;\n+      else\n+\t{\n+\t  unpack0_i16 ((gfc_array_i16 *) ret, (gfc_array_i16 *) vector,\n+\t\t       mask, (GFC_INTEGER_16 *) field);\n+\t  return;\n \t}\n+#endif\n     }\n+\n   memset (&tmp, 0, sizeof (tmp));\n   tmp.dtype = 0;\n   tmp.data = field;"}, {"sha": "c3c67a1ffdc2a8ea3261770f1e6fb98e0ea0646e", "filename": "libgfortran/libgfortran.h", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7d0f4d5fabc279dd81330ebffdf037b31420706/libgfortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7d0f4d5fabc279dd81330ebffdf037b31420706/libgfortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Flibgfortran.h?ref=c7d0f4d5fabc279dd81330ebffdf037b31420706", "patch": "@@ -71,6 +71,38 @@ typedef off_t gfc_offset;\n #endif\n \n \n+/* We use intptr_t and uintptr_t, which may not be always defined in\n+   system headers.  */\n+\n+#ifndef HAVE_INTPTR_T\n+#if __SIZEOF_POINTER__ == __SIZEOF_LONG__\n+#define intptr_t long\n+#elif __SIZEOF_POINTER__ == __SIZEOF_LONG_LONG__\n+#define intptr_t long long\n+#elif __SIZEOF_POINTER__ == __SIZEOF_INT__\n+#define intptr_t int\n+#elif __SIZEOF_POINTER__ == __SIZEOF_SHORT__\n+#define intptr_t short\n+#else\n+#error \"Pointer type with unexpected size\"\n+#endif\n+#endif\n+\n+#ifndef HAVE_UINTPTR_T\n+#if __SIZEOF_POINTER__ == __SIZEOF_LONG__\n+#define uintptr_t unsigned long\n+#elif __SIZEOF_POINTER__ == __SIZEOF_LONG_LONG__\n+#define uintptr_t unsigned long long\n+#elif __SIZEOF_POINTER__ == __SIZEOF_INT__\n+#define uintptr_t unsigned int\n+#elif __SIZEOF_POINTER__ == __SIZEOF_SHORT__\n+#define uintptr_t unsigned short\n+#else\n+#error \"Pointer type with unexpected size\"\n+#endif\n+#endif\n+\n+\n /* On mingw, work around the buggy Windows snprintf() by using the one\n    mingw provides, __mingw_snprintf().  We also provide a prototype for\n    __mingw_snprintf(), because the mingw headers currently don't have one.  */\n@@ -369,6 +401,32 @@ typedef GFC_ARRAY_DESCRIPTOR (GFC_MAX_DIMENSIONS, GFC_LOGICAL_16) gfc_array_l16;\n    | (sizeof(GFC_COMPLEX_16) << GFC_DTYPE_SIZE_SHIFT))\n #endif\n \n+#define GFC_DTYPE_DERIVED_1 ((GFC_DTYPE_DERIVED << GFC_DTYPE_TYPE_SHIFT) \\\n+   | (sizeof(GFC_INTEGER_1) << GFC_DTYPE_SIZE_SHIFT))\n+#define GFC_DTYPE_DERIVED_2 ((GFC_DTYPE_DERIVED << GFC_DTYPE_TYPE_SHIFT) \\\n+   | (sizeof(GFC_INTEGER_2) << GFC_DTYPE_SIZE_SHIFT))\n+#define GFC_DTYPE_DERIVED_4 ((GFC_DTYPE_DERIVED << GFC_DTYPE_TYPE_SHIFT) \\\n+   | (sizeof(GFC_INTEGER_4) << GFC_DTYPE_SIZE_SHIFT))\n+#define GFC_DTYPE_DERIVED_8 ((GFC_DTYPE_DERIVED << GFC_DTYPE_TYPE_SHIFT) \\\n+   | (sizeof(GFC_INTEGER_8) << GFC_DTYPE_SIZE_SHIFT))\n+#ifdef HAVE_GFC_INTEGER_16\n+#define GFC_DTYPE_DERIVED_16 ((GFC_DTYPE_DERIVED << GFC_DTYPE_TYPE_SHIFT) \\\n+   | (sizeof(GFC_INTEGER_16) << GFC_DTYPE_SIZE_SHIFT))\n+#endif\n+\n+/* Macros to determine the alignment of pointers.  */\n+\n+#define GFC_UNALIGNED_2(x) (((uintptr_t)(x)) & \\\n+\t\t\t    (__alignof__(GFC_INTEGER_2) - 1))\n+#define GFC_UNALIGNED_4(x) (((uintptr_t)(x)) & \\\n+\t\t\t    (__alignof__(GFC_INTEGER_4) - 1))\n+#define GFC_UNALIGNED_8(x) (((uintptr_t)(x)) & \\\n+\t\t\t    (__alignof__(GFC_INTEGER_8) - 1))\n+#ifdef HAVE_GFC_INTEGER_16\n+#define GFC_UNALIGNED_16(x) (((uintptr_t)(x)) & \\\n+\t\t\t     (__alignof__(GFC_INTEGER_16) - 1))\n+#endif\n+\n /* Runtime library include.  */\n #define stringize(x) expand_macro(x)\n #define expand_macro(x) # x"}, {"sha": "4a3388841f8ed02c99bda74b9c621fb3fa1e1976", "filename": "libgfortran/runtime/backtrace.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7d0f4d5fabc279dd81330ebffdf037b31420706/libgfortran%2Fruntime%2Fbacktrace.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7d0f4d5fabc279dd81330ebffdf037b31420706/libgfortran%2Fruntime%2Fbacktrace.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fbacktrace.c?ref=c7d0f4d5fabc279dd81330ebffdf037b31420706", "patch": "@@ -43,12 +43,6 @@ Boston, MA 02110-1301, USA.  */\n #include <unistd.h>\n #endif\n \n-#ifdef HAVE_INTPTR_T\n-# define INTPTR_T intptr_t\n-#else\n-# define INTPTR_T int\n-#endif\n-\n #ifdef HAVE_EXECINFO_H\n #include <execinfo.h>\n #endif\n@@ -158,7 +152,7 @@ show_backtrace (void)\n \n     /* Write the list of addresses in hexadecimal format.  */\n     for (i = 0; i < depth; i++)\n-      addr[i] = xtoa ((GFC_UINTEGER_LARGEST) (INTPTR_T) trace[i], addr_buf[i],\n+      addr[i] = xtoa ((GFC_UINTEGER_LARGEST) (intptr_t) trace[i], addr_buf[i],\n \t\t      sizeof (addr_buf[i]));\n \n     /* Don't output an error message if something goes wrong, we'll simply"}, {"sha": "79cbbd7df295d9c4f252d1932600c4bcdb654369", "filename": "libgfortran/runtime/in_pack_generic.c", "status": "modified", "additions": 64, "deletions": 49, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7d0f4d5fabc279dd81330ebffdf037b31420706/libgfortran%2Fruntime%2Fin_pack_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7d0f4d5fabc279dd81330ebffdf037b31420706/libgfortran%2Fruntime%2Fin_pack_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fin_pack_generic.c?ref=c7d0f4d5fabc279dd81330ebffdf037b31420706", "patch": "@@ -51,81 +51,96 @@ internal_pack (gfc_array_char * source)\n   int n;\n   int packed;\n   index_type size;\n-  int type;\n+  index_type type_size;\n \n   if (source->dim[0].stride == 0)\n     {\n       source->dim[0].stride = 1;\n       return source->data;\n     }\n \n-  type = GFC_DESCRIPTOR_TYPE (source);\n+  type_size = GFC_DTYPE_TYPE_SIZE(source);\n   size = GFC_DESCRIPTOR_SIZE (source);\n-  switch (type)\n+  switch (type_size)\n     {\n-    case GFC_DTYPE_INTEGER:\n-    case GFC_DTYPE_LOGICAL:\n-      switch (size)\n-\t{\n-\tcase sizeof (GFC_INTEGER_1):\n-\t  return internal_pack_1 ((gfc_array_i1 *) source);\n-\n-\tcase sizeof (GFC_INTEGER_2):\n-\t  return internal_pack_2 ((gfc_array_i2 *) source);\n-\n-\tcase sizeof (GFC_INTEGER_4):\n-\t  return internal_pack_4 ((gfc_array_i4 *) source);\n-\t  \n-\tcase sizeof (GFC_INTEGER_8):\n-\t  return internal_pack_8 ((gfc_array_i8 *) source);\n+    case GFC_DTYPE_INTEGER_1:\n+    case GFC_DTYPE_LOGICAL_1:\n+    case GFC_DTYPE_DERIVED_1:\n+      return internal_pack_1 ((gfc_array_i1 *) source);\n+\n+    case GFC_DTYPE_INTEGER_2:\n+    case GFC_DTYPE_LOGICAL_2:\n+      return internal_pack_2 ((gfc_array_i2 *) source);\n+\n+    case GFC_DTYPE_INTEGER_4:\n+    case GFC_DTYPE_LOGICAL_4:\n+      return internal_pack_4 ((gfc_array_i4 *) source);\n+\t\n+    case GFC_DTYPE_INTEGER_8:\n+    case GFC_DTYPE_LOGICAL_8:\n+      return internal_pack_8 ((gfc_array_i8 *) source);\n \n #if defined(HAVE_GFC_INTEGER_16)\n-\tcase sizeof (GFC_INTEGER_16):\n-\t  return internal_pack_16 ((gfc_array_i16 *) source);\n+    case GFC_DTYPE_INTEGER_16:\n+    case GFC_DTYPE_LOGICAL_16:\n+      return internal_pack_16 ((gfc_array_i16 *) source);\n #endif\n-\t}\n-      break;\n-\n-    case GFC_DTYPE_REAL:\n-      switch (size)\n-\t{\n-\tcase sizeof (GFC_REAL_4):\n-\t  return internal_pack_r4 ((gfc_array_r4 *) source);\n+    case GFC_DTYPE_REAL_4:\n+      return internal_pack_r4 ((gfc_array_r4 *) source);\n \n-\tcase sizeof (GFC_REAL_8):\n-\t  return internal_pack_r8 ((gfc_array_r8 *) source);\n+    case GFC_DTYPE_REAL_8:\n+      return internal_pack_r8 ((gfc_array_r8 *) source);\n \n #if defined (HAVE_GFC_REAL_10)\n-\tcase sizeof (GFC_REAL_10):\n-\t  return internal_pack_r10 ((gfc_array_r10 *) source);\n+    case GFC_DTYPE_REAL_10:\n+      return internal_pack_r10 ((gfc_array_r10 *) source);\n #endif\n \n #if defined (HAVE_GFC_REAL_16)\n-\tcase sizeof (GFC_REAL_16):\n-\t  return internal_pack_r16 ((gfc_array_r16 *) source);\n+    case GFC_DTYPE_REAL_16:\n+      return internal_pack_r16 ((gfc_array_r16 *) source);\n #endif\n-\t}\n-    case GFC_DTYPE_COMPLEX:\n-      switch (size)\n-\t{\n-\tcase sizeof (GFC_COMPLEX_4):\n-\t  return internal_pack_c4 ((gfc_array_c4 *) source);\n-\t  \n-\tcase sizeof (GFC_COMPLEX_8):\n-\t  return internal_pack_c8 ((gfc_array_c8 *) source);\n+    case GFC_DTYPE_COMPLEX_4:\n+      return internal_pack_c4 ((gfc_array_c4 *) source);\n+\t\n+    case GFC_DTYPE_COMPLEX_8:\n+      return internal_pack_c8 ((gfc_array_c8 *) source);\n \n #if defined (HAVE_GFC_COMPLEX_10)\n-\tcase sizeof (GFC_COMPLEX_10):\n-\t  return internal_pack_c10 ((gfc_array_c10 *) source);\n+    case GFC_DTYPE_COMPLEX_10:\n+      return internal_pack_c10 ((gfc_array_c10 *) source);\n #endif\n \n #if defined (HAVE_GFC_COMPLEX_16)\n-\tcase sizeof (GFC_COMPLEX_16):\n-\t  return internal_pack_c16 ((gfc_array_c16 *) source);\n+    case GFC_DTYPE_COMPLEX_16:\n+      return internal_pack_c16 ((gfc_array_c16 *) source);\n #endif\n \n-\t}\n-      break;\n+    case GFC_DTYPE_DERIVED_2:\n+      if (GFC_UNALIGNED_2(source->data))\n+\tbreak;\n+      else\n+\treturn internal_pack_2 ((gfc_array_i2 *) source);\n+\n+    case GFC_DTYPE_DERIVED_4:\n+      if (GFC_UNALIGNED_4(source->data))\n+\tbreak;\n+      else\n+\treturn internal_pack_4 ((gfc_array_i4 *) source);\n+\n+    case GFC_DTYPE_DERIVED_8:\n+      if (GFC_UNALIGNED_8(source->data))\n+\tbreak;\n+      else\n+\treturn internal_pack_8 ((gfc_array_i8 *) source);\n+\n+#ifdef HAVE_GFC_INTEGER_16\n+    case GFC_DTYPE_DERIVED_16:\n+      if (GFC_UNALIGNED_16(source->data))\n+\tbreak;\n+      else\n+\treturn internal_pack_16 ((gfc_array_i16 *) source);\n+#endif\n \n     default:\n       break;"}, {"sha": "81d1f0485eca5e44e610e3a400846827231562be", "filename": "libgfortran/runtime/in_unpack_generic.c", "status": "modified", "additions": 83, "deletions": 57, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7d0f4d5fabc279dd81330ebffdf037b31420706/libgfortran%2Fruntime%2Fin_unpack_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7d0f4d5fabc279dd81330ebffdf037b31420706/libgfortran%2Fruntime%2Fin_unpack_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fin_unpack_generic.c?ref=c7d0f4d5fabc279dd81330ebffdf037b31420706", "patch": "@@ -49,98 +49,124 @@ internal_unpack (gfc_array_char * d, const void * s)\n   const char *src;\n   int n;\n   int size;\n-  int type;\n+  int type_size;\n \n   dest = d->data;\n   /* This check may be redundant, but do it anyway.  */\n   if (s == dest || !s)\n     return;\n \n-  type = GFC_DESCRIPTOR_TYPE (d);\n-  size = GFC_DESCRIPTOR_SIZE (d);\n-  switch (type)\n+  type_size = GFC_DTYPE_TYPE_SIZE (d);\n+  switch (type_size)\n     {\n-    case GFC_DTYPE_INTEGER:\n-    case GFC_DTYPE_LOGICAL:\n-      switch (size)\n-\t{\n-\tcase sizeof (GFC_INTEGER_1):\n-\t  internal_unpack_1 ((gfc_array_i1 *) d, (const GFC_INTEGER_1 *) s);\n-\t  return;\n+    case GFC_DTYPE_INTEGER_1:\n+    case GFC_DTYPE_LOGICAL_1:\n+    case GFC_DTYPE_DERIVED_1:\n+      internal_unpack_1 ((gfc_array_i1 *) d, (const GFC_INTEGER_1 *) s);\n+      return;\n \n-\tcase sizeof (GFC_INTEGER_2):\n-\t  internal_unpack_2 ((gfc_array_i2 *) d, (const GFC_INTEGER_2 *) s);\n-\t  return;\n+    case GFC_DTYPE_INTEGER_2:\n+    case GFC_DTYPE_LOGICAL_2:\n+      internal_unpack_2 ((gfc_array_i2 *) d, (const GFC_INTEGER_2 *) s);\n+      return;\n \n-\tcase sizeof (GFC_INTEGER_4):\n-\t  internal_unpack_4 ((gfc_array_i4 *) d, (const GFC_INTEGER_4 *) s);\n-\t  return;\n+    case GFC_DTYPE_INTEGER_4:\n+    case GFC_DTYPE_LOGICAL_4:\n+      internal_unpack_4 ((gfc_array_i4 *) d, (const GFC_INTEGER_4 *) s);\n+      return;\n \n-\tcase sizeof (GFC_INTEGER_8):\n-\t  internal_unpack_8 ((gfc_array_i8 *) d, (const GFC_INTEGER_8 *) s);\n-\t  return;\n+    case GFC_DTYPE_INTEGER_8:\n+    case GFC_DTYPE_LOGICAL_8:\n+      internal_unpack_8 ((gfc_array_i8 *) d, (const GFC_INTEGER_8 *) s);\n+      return;\n \n #if defined (HAVE_GFC_INTEGER_16)\n-\tcase sizeof (GFC_INTEGER_16):\n-\t  internal_unpack_16 ((gfc_array_i16 *) d, (const GFC_INTEGER_16 *) s);\n-\t  return;\n+    case GFC_DTYPE_INTEGER_16:\n+    case GFC_DTYPE_LOGICAL_16:\n+      internal_unpack_16 ((gfc_array_i16 *) d, (const GFC_INTEGER_16 *) s);\n+      return;\n #endif\n-\t}\n-      break;\n-\n-    case GFC_DTYPE_REAL:\n-      switch (size)\n-\t{\n-\tcase sizeof (GFC_REAL_4):\n-\t  internal_unpack_r4 ((gfc_array_r4 *) d, (const GFC_REAL_4 *) s);\n-\t  return;\n+    case GFC_DTYPE_REAL_4:\n+      internal_unpack_r4 ((gfc_array_r4 *) d, (const GFC_REAL_4 *) s);\n+      return;\n \n-\tcase sizeof (GFC_REAL_8):\n-\t  internal_unpack_r8 ((gfc_array_r8 *) d, (const GFC_REAL_8 *) s);\n-\t  return;\n+    case GFC_DTYPE_REAL_8:\n+      internal_unpack_r8 ((gfc_array_r8 *) d, (const GFC_REAL_8 *) s);\n+      return;\n \n #if defined(HAVE_GFC_REAL_10)\n-\tcase sizeof (GFC_REAL_10):\n-\t  internal_unpack_r10 ((gfc_array_r10 *) d, (const GFC_REAL_10 *) s);\n-\t  return;\n+    case GFC_DTYPE_REAL_10:\n+      internal_unpack_r10 ((gfc_array_r10 *) d, (const GFC_REAL_10 *) s);\n+      return;\n #endif\n \n #if defined(HAVE_GFC_REAL_16)\n-\tcase sizeof (GFC_REAL_16):\n-\t  internal_unpack_r16 ((gfc_array_r16 *) d, (const GFC_REAL_16 *) s);\n-\t  return;\n+    case GFC_DTYPE_REAL_16:\n+      internal_unpack_r16 ((gfc_array_r16 *) d, (const GFC_REAL_16 *) s);\n+      return;\n #endif\n+    case GFC_DTYPE_COMPLEX_4:\n+      internal_unpack_c4 ((gfc_array_c4 *)d, (const GFC_COMPLEX_4 *)s);\n+      return;\n \n-\t}\n+    case GFC_DTYPE_COMPLEX_8:\n+      internal_unpack_c8 ((gfc_array_c8 *)d, (const GFC_COMPLEX_8 *)s);\n+      return;\n+\n+#if defined(HAVE_GFC_COMPLEX_10)\n+    case GFC_DTYPE_COMPLEX_10:\n+      internal_unpack_c10 ((gfc_array_c10 *) d, (const GFC_COMPLEX_10 *) s);\n+      return;\n+#endif\n \n-    case GFC_DTYPE_COMPLEX:\n-      switch (size) \n+#if defined(HAVE_GFC_COMPLEX_16)\n+    case GFC_DTYPE_COMPLEX_16:\n+      internal_unpack_c16 ((gfc_array_c16 *) d, (const GFC_COMPLEX_16 *) s);\n+      return;\n+#endif\n+    case GFC_DTYPE_DERIVED_2:\n+      if (GFC_UNALIGNED_2(d->data) || GFC_UNALIGNED_2(s))\n+\tbreak;\n+      else\n \t{\n-\tcase sizeof (GFC_COMPLEX_4):\n-\t  internal_unpack_c4 ((gfc_array_c4 *)d, (const GFC_COMPLEX_4 *)s);\n+\t  internal_unpack_2 ((gfc_array_i2 *) d, (const GFC_INTEGER_2 *) s);\n \t  return;\n-\n-\tcase sizeof (GFC_COMPLEX_8):\n-\t  internal_unpack_c8 ((gfc_array_c8 *)d, (const GFC_COMPLEX_8 *)s);\n+\t}\n+    case GFC_DTYPE_DERIVED_4:\n+      if (GFC_UNALIGNED_4(d->data) || GFC_UNALIGNED_4(s))\n+\tbreak;\n+      else\n+\t{\n+\t  internal_unpack_4 ((gfc_array_i4 *) d, (const GFC_INTEGER_4 *) s);\n \t  return;\n+\t}\n \n-#if defined(HAVE_GFC_COMPLEX_10)\n-\tcase sizeof (GFC_COMPLEX_10):\n-\t  internal_unpack_c10 ((gfc_array_c10 *) d, (const GFC_COMPLEX_10 *) s);\n+    case GFC_DTYPE_DERIVED_8:\n+      if (GFC_UNALIGNED_8(d->data) || GFC_UNALIGNED_8(s))\n+\tbreak;\n+      else\n+\t{\n+\t  internal_unpack_8 ((gfc_array_i8 *) d, (const GFC_INTEGER_8 *) s);\n \t  return;\n-#endif\n+\t}\n \n-#if defined(HAVE_GFC_COMPLEX_16)\n-\tcase sizeof (GFC_COMPLEX_16):\n-\t  internal_unpack_c16 ((gfc_array_c16 *) d, (const GFC_COMPLEX_16 *) s);\n+#ifdef HAVE_GFC_INTEGER_16\n+    case GFC_DTYPE_DERIVED_16:\n+      if (GFC_UNALIGNED_16(d->data) || GFC_UNALIGNED_16(s))\n+\tbreak;\n+      else\n+\t{\n+\t  internal_unpack_16 ((gfc_array_i16 *) d, (const GFC_INTEGER_16 *) s);\n \t  return;\n+\t}\n #endif\n \n-\t}\n     default:\n       break;\n     }\n \n+  size = GFC_DESCRIPTOR_SIZE (d);\n+\n   if (d->dim[0].stride == 0)\n     d->dim[0].stride = 1;\n "}]}