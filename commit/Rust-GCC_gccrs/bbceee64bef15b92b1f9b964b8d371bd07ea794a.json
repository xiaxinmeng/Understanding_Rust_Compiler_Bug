{"sha": "bbceee64bef15b92b1f9b964b8d371bd07ea794a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmJjZWVlNjRiZWYxNWI5MmIxZjliOTY0YjhkMzcxYmQwN2VhNzk0YQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2011-08-18T21:35:42Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2011-08-18T21:35:42Z"}, "message": "c-decl.c (shadow_tag_warned): Check for _Noreturn.\n\n\t* c-decl.c (shadow_tag_warned): Check for _Noreturn.\n\t(quals_from_declspecs): Assert _Noreturn not present.\n\t(grokdeclarator): Handle _Noreturn.\n\t(build_null_declspecs): Initialize noreturn_p.\n\t(declspecs_add_scspec): Handle RID_NORETURN.\n\t* c-parser.c (c_token_starts_declspecs, c_parser_declspecs)\n\t(c_parser_attributes): Handle RID_NORETURN.\n\t* c-tree.h (struct c_declspecs): Add noreturn_p.\n\t* ginclude/stdnoreturn.h: New.\n\t* Makefile.in (USER_H): Add stdnoreturn.h.\n\nc-family:\n\t* c-common.c (c_common_reswords): Add _Noreturn.\n\t(keyword_is_function_specifier): Handle RID_NORETURN.\n\t* c-common.h (RID_NORETURN): New.\n\ntestsuite:\n\t* gcc.dg/c1x-noreturn-1.c, gcc.dg/c1x-noreturn-2.c,\n\tgcc.dg/c1x-noreturn-3.c, gcc.dg/c1x-noreturn-4.c,\n\tgcc.dg/c1x-noreturn-5.c: New tests.\n\nFrom-SVN: r177881", "tree": {"sha": "7cac89ed01db35f3172a81cb7429efeb4d9798e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7cac89ed01db35f3172a81cb7429efeb4d9798e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bbceee64bef15b92b1f9b964b8d371bd07ea794a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbceee64bef15b92b1f9b964b8d371bd07ea794a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbceee64bef15b92b1f9b964b8d371bd07ea794a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbceee64bef15b92b1f9b964b8d371bd07ea794a/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32fe396e05443a67367a3c454b7c6d574ea7e58e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32fe396e05443a67367a3c454b7c6d574ea7e58e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32fe396e05443a67367a3c454b7c6d574ea7e58e"}], "stats": {"total": 283, "additions": 275, "deletions": 8}, "files": [{"sha": "14723eb314aeb629b5bfbe7bebab50c05017f13f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbceee64bef15b92b1f9b964b8d371bd07ea794a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbceee64bef15b92b1f9b964b8d371bd07ea794a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bbceee64bef15b92b1f9b964b8d371bd07ea794a", "patch": "@@ -1,3 +1,16 @@\n+2011-08-18  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-decl.c (shadow_tag_warned): Check for _Noreturn.\n+\t(quals_from_declspecs): Assert _Noreturn not present.\n+\t(grokdeclarator): Handle _Noreturn.\n+\t(build_null_declspecs): Initialize noreturn_p.\n+\t(declspecs_add_scspec): Handle RID_NORETURN.\n+\t* c-parser.c (c_token_starts_declspecs, c_parser_declspecs)\n+\t(c_parser_attributes): Handle RID_NORETURN.\n+\t* c-tree.h (struct c_declspecs): Add noreturn_p.\n+\t* ginclude/stdnoreturn.h: New.\n+\t* Makefile.in (USER_H): Add stdnoreturn.h.\n+\n 2011-08-18  Kirill Yukhin  <kirill.yukhin@intel.com>\n \n \t* common/config/i386/i386-common.c (OPTION_MASK_ISA_AVX2_SET): New."}, {"sha": "8c501dd2e53be6919a140d3533f002f41e43e60d", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbceee64bef15b92b1f9b964b8d371bd07ea794a/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbceee64bef15b92b1f9b964b8d371bd07ea794a/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=bbceee64bef15b92b1f9b964b8d371bd07ea794a", "patch": "@@ -373,6 +373,7 @@ USER_H = $(srcdir)/ginclude/float.h \\\n \t $(srcdir)/ginclude/stddef.h \\\n \t $(srcdir)/ginclude/varargs.h \\\n \t $(srcdir)/ginclude/stdfix.h \\\n+\t $(srcdir)/ginclude/stdnoreturn.h \\\n \t $(EXTRA_HEADERS)\n \n USER_H_INC_NEXT_PRE = @user_headers_inc_next_pre@"}, {"sha": "d824e12b5bbc51a30b1ca380cd1bc130e87bfaa7", "filename": "gcc/c-decl.c", "status": "modified", "additions": 33, "deletions": 6, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbceee64bef15b92b1f9b964b8d371bd07ea794a/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbceee64bef15b92b1f9b964b8d371bd07ea794a/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=bbceee64bef15b92b1f9b964b8d371bd07ea794a", "patch": "@@ -3714,6 +3714,12 @@ shadow_tag_warned (const struct c_declspecs *declspecs, int warned)\n       warned = 1;\n     }\n \n+  if (declspecs->noreturn_p)\n+    {\n+      error (\"%<_Noreturn%> in empty declaration\");\n+      warned = 1;\n+    }\n+\n   if (current_scope == file_scope && declspecs->storage_class == csc_auto)\n     {\n       error (\"%<auto%> in file-scope empty declaration\");\n@@ -3780,6 +3786,7 @@ quals_from_declspecs (const struct c_declspecs *specs)\n \t      && !specs->unsigned_p\n \t      && !specs->complex_p\n \t      && !specs->inline_p\n+\t      && !specs->noreturn_p\n \t      && !specs->thread_p);\n   return quals;\n }\n@@ -5734,6 +5741,8 @@ grokdeclarator (const struct c_declarator *declarator,\n \tC_TYPEDEF_EXPLICITLY_SIGNED (decl) = 1;\n       if (declspecs->inline_p)\n \tpedwarn (loc, 0,\"typedef %q+D declared %<inline%>\", decl);\n+      if (declspecs->noreturn_p)\n+\tpedwarn (loc, 0,\"typedef %q+D declared %<_Noreturn%>\", decl);\n \n       if (warn_cxx_compat && declarator->u.id != NULL_TREE)\n \t{\n@@ -5765,7 +5774,7 @@ grokdeclarator (const struct c_declarator *declarator,\n       /* Note that the grammar rejects storage classes in typenames\n \t and fields.  */\n       gcc_assert (storage_class == csc_none && !threadp\n-\t\t  && !declspecs->inline_p);\n+\t\t  && !declspecs->inline_p && !declspecs->noreturn_p);\n       if (pedantic && TREE_CODE (type) == FUNCTION_TYPE\n \t  && type_quals)\n \tpedwarn (loc, OPT_pedantic,\n@@ -5862,13 +5871,15 @@ grokdeclarator (const struct c_declarator *declarator,\n \tDECL_ARG_TYPE (decl) = promoted_type;\n \tif (declspecs->inline_p)\n \t  pedwarn (loc, 0, \"parameter %q+D declared %<inline%>\", decl);\n+\tif (declspecs->noreturn_p)\n+\t  pedwarn (loc, 0, \"parameter %q+D declared %<_Noreturn%>\", decl);\n       }\n     else if (decl_context == FIELD)\n       {\n \t/* Note that the grammar rejects storage classes in typenames\n \t   and fields.  */\n \tgcc_assert (storage_class == csc_none && !threadp\n-\t\t    && !declspecs->inline_p);\n+\t\t    && !declspecs->inline_p && !declspecs->noreturn_p);\n \n \t/* Structure field.  It may not be a function.  */\n \n@@ -5960,15 +5971,23 @@ grokdeclarator (const struct c_declarator *declarator,\n \tif (declspecs->default_int_p)\n \t  C_FUNCTION_IMPLICIT_INT (decl) = 1;\n \n-\t/* Record presence of `inline', if it is reasonable.  */\n+\t/* Record presence of `inline' and `_Noreturn', if it is\n+\t   reasonable.  */\n \tif (flag_hosted && MAIN_NAME_P (declarator->u.id))\n \t  {\n \t    if (declspecs->inline_p)\n \t      pedwarn (loc, 0, \"cannot inline function %<main%>\");\n+\t    if (declspecs->noreturn_p)\n+\t      pedwarn (loc, 0, \"%<main%> declared %<_Noreturn%>\");\n+\t  }\n+\telse\n+\t  {\n+\t    if (declspecs->inline_p)\n+\t      /* Record that the function is declared `inline'.  */\n+\t      DECL_DECLARED_INLINE_P (decl) = 1;\n+\t    if (declspecs->noreturn_p)\n+\t      TREE_THIS_VOLATILE (decl) = 1;\n \t  }\n-\telse if (declspecs->inline_p)\n-\t  /* Record that the function is declared `inline'.  */\n-\t  DECL_DECLARED_INLINE_P (decl) = 1;\n       }\n     else\n       {\n@@ -6004,6 +6023,8 @@ grokdeclarator (const struct c_declarator *declarator,\n \n \tif (declspecs->inline_p)\n \t  pedwarn (loc, 0, \"variable %q+D declared %<inline%>\", decl);\n+\tif (declspecs->noreturn_p)\n+\t  pedwarn (loc, 0, \"variable %q+D declared %<_Noreturn%>\", decl);\n \n \t/* At file scope, an initialized extern declaration may follow\n \t   a static declaration.  In that case, DECL_EXTERNAL will be\n@@ -8646,6 +8667,7 @@ build_null_declspecs (void)\n   ret->unsigned_p = false;\n   ret->complex_p = false;\n   ret->inline_p = false;\n+  ret->noreturn_p = false;\n   ret->thread_p = false;\n   ret->const_p = false;\n   ret->volatile_p = false;\n@@ -9367,6 +9389,11 @@ declspecs_add_scspec (struct c_declspecs *specs, tree scspec)\n       dupe = false;\n       specs->inline_p = true;\n       break;\n+    case RID_NORETURN:\n+      /* Duplicate _Noreturn is permitted.  */\n+      dupe = false;\n+      specs->noreturn_p = true;\n+      break;\n     case RID_THREAD:\n       dupe = specs->thread_p;\n       if (specs->storage_class == csc_auto)"}, {"sha": "9a8d953eec8e08051d9f85f476632d394e4344f9", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbceee64bef15b92b1f9b964b8d371bd07ea794a/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbceee64bef15b92b1f9b964b8d371bd07ea794a/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=bbceee64bef15b92b1f9b964b8d371bd07ea794a", "patch": "@@ -1,3 +1,9 @@\n+2011-08-18  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-common.c (c_common_reswords): Add _Noreturn.\n+\t(keyword_is_function_specifier): Handle RID_NORETURN.\n+\t* c-common.h (RID_NORETURN): New.\n+\n 2011-08-10  Artjoms Sinkarovs <artyom.shinakroff@gmail.com>\n \n \t* c-common.c (unsafe_conversion_p): New function. Check if it is"}, {"sha": "d4dceab30dad92835d4b12754f28588f0f4cac2b", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbceee64bef15b92b1f9b964b8d371bd07ea794a/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbceee64bef15b92b1f9b964b8d371bd07ea794a/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=bbceee64bef15b92b1f9b964b8d371bd07ea794a", "patch": "@@ -414,6 +414,7 @@ const struct c_common_resword c_common_reswords[] =\n   { \"_Accum\",           RID_ACCUM,     D_CONLY | D_EXT },\n   { \"_Sat\",             RID_SAT,       D_CONLY | D_EXT },\n   { \"_Static_assert\",   RID_STATIC_ASSERT, D_CONLY },\n+  { \"_Noreturn\",        RID_NORETURN,  D_CONLY },\n   { \"__FUNCTION__\",\tRID_FUNCTION_NAME, 0 },\n   { \"__PRETTY_FUNCTION__\", RID_PRETTY_FUNCTION_NAME, 0 },\n   { \"__alignof\",\tRID_ALIGNOF,\t0 },\n@@ -9793,6 +9794,7 @@ keyword_is_function_specifier (enum rid keyword)\n   switch (keyword)\n     {\n     case RID_INLINE:\n+    case RID_NORETURN:\n     case RID_VIRTUAL:\n     case RID_EXPLICIT:\n       return true;"}, {"sha": "a771c33033a1740c0ce1c4ac805f7036b2a6156a", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbceee64bef15b92b1f9b964b8d371bd07ea794a/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbceee64bef15b92b1f9b964b8d371bd07ea794a/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=bbceee64bef15b92b1f9b964b8d371bd07ea794a", "patch": "@@ -58,7 +58,7 @@ never after.\n /* Reserved identifiers.  This is the union of all the keywords for C,\n    C++, and Objective-C.  All the type modifiers have to be in one\n    block at the beginning, because they are used as mask bits.  There\n-   are 27 type modifiers; if we add many more we will have to redesign\n+   are 28 type modifiers; if we add many more we will have to redesign\n    the mask mechanism.  */\n \n enum rid\n@@ -69,6 +69,7 @@ enum rid\n   RID_UNSIGNED, RID_LONG,    RID_CONST, RID_EXTERN,\n   RID_REGISTER, RID_TYPEDEF, RID_SHORT, RID_INLINE,\n   RID_VOLATILE, RID_SIGNED,  RID_AUTO,  RID_RESTRICT,\n+  RID_NORETURN,\n \n   /* C extensions */\n   RID_COMPLEX, RID_THREAD, RID_SAT,"}, {"sha": "d0f8fba50eae136c1c098bd78416033c7d6bf106", "filename": "gcc/c-parser.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbceee64bef15b92b1f9b964b8d371bd07ea794a/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbceee64bef15b92b1f9b964b8d371bd07ea794a/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=bbceee64bef15b92b1f9b964b8d371bd07ea794a", "patch": "@@ -621,6 +621,7 @@ c_token_starts_declspecs (c_token *token)\n \tcase RID_REGISTER:\n \tcase RID_TYPEDEF:\n \tcase RID_INLINE:\n+\tcase RID_NORETURN:\n \tcase RID_AUTO:\n \tcase RID_THREAD:\n \tcase RID_UNSIGNED:\n@@ -2080,12 +2081,13 @@ c_parser_declspecs (c_parser *parser, struct c_declspecs *specs,\n \tcase RID_REGISTER:\n \tcase RID_TYPEDEF:\n \tcase RID_INLINE:\n+\tcase RID_NORETURN:\n \tcase RID_AUTO:\n \tcase RID_THREAD:\n \t  if (!scspec_ok)\n \t    goto out;\n \t  attrs_ok = true;\n-\t  /* TODO: Distinguish between function specifiers (inline)\n+\t  /* TODO: Distinguish between function specifiers (inline, noreturn)\n \t     and storage class specifiers, either here or in\n \t     declspecs_add_scspec.  */\n \t  declspecs_add_scspec (specs, c_parser_peek_token (parser)->value);\n@@ -3428,6 +3430,7 @@ c_parser_attributes (c_parser *parser)\n \t\tcase RID_TYPEDEF:\n \t\tcase RID_SHORT:\n \t\tcase RID_INLINE:\n+\t\tcase RID_NORETURN:\n \t\tcase RID_VOLATILE:\n \t\tcase RID_SIGNED:\n \t\tcase RID_AUTO:"}, {"sha": "cda5d06863a06e91ccee74697f0901db4d795f41", "filename": "gcc/c-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbceee64bef15b92b1f9b964b8d371bd07ea794a/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbceee64bef15b92b1f9b964b8d371bd07ea794a/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=bbceee64bef15b92b1f9b964b8d371bd07ea794a", "patch": "@@ -266,6 +266,8 @@ struct c_declspecs {\n   BOOL_BITFIELD complex_p : 1;\n   /* Whether \"inline\" was specified.  */\n   BOOL_BITFIELD inline_p : 1;\n+  /* Whether \"_Noreturn\" was speciied.  */\n+  BOOL_BITFIELD noreturn_p : 1;\n   /* Whether \"__thread\" was specified.  */\n   BOOL_BITFIELD thread_p : 1;\n   /* Whether \"const\" was specified.  */"}, {"sha": "c92537ce2d7795a340162aaa91ed4044173cc8a2", "filename": "gcc/ginclude/stdnoreturn.h", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbceee64bef15b92b1f9b964b8d371bd07ea794a/gcc%2Fginclude%2Fstdnoreturn.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbceee64bef15b92b1f9b964b8d371bd07ea794a/gcc%2Fginclude%2Fstdnoreturn.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fstdnoreturn.h?ref=bbceee64bef15b92b1f9b964b8d371bd07ea794a", "patch": "@@ -0,0 +1,31 @@\n+/* Copyright (C) 2011 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* ISO C1X: 7.23 _Noreturn <stdnoreturn.h>.  */\n+\n+#ifndef _STDNORETURN_H\n+#define _STDNORETURN_H\n+\n+#define noreturn _Noreturn\n+\n+#endif\t/* stdnoreturn.h */"}, {"sha": "47379668f8143e5db2a010abd5f11caa1fc976ef", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbceee64bef15b92b1f9b964b8d371bd07ea794a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbceee64bef15b92b1f9b964b8d371bd07ea794a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bbceee64bef15b92b1f9b964b8d371bd07ea794a", "patch": "@@ -1,3 +1,9 @@\n+2011-08-18  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/c1x-noreturn-1.c, gcc.dg/c1x-noreturn-2.c,\n+\tgcc.dg/c1x-noreturn-3.c, gcc.dg/c1x-noreturn-4.c,\n+\tgcc.dg/c1x-noreturn-5.c: New tests.\n+\n 2011-08-18  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc.dg/c1x-uni-string-1.c, gcc.dg/c1x-uni-string-2.c: New tests."}, {"sha": "d9c141d532617456ba1cdadfc2a259b894b5e2de", "filename": "gcc/testsuite/gcc.dg/c1x-noreturn-1.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbceee64bef15b92b1f9b964b8d371bd07ea794a/gcc%2Ftestsuite%2Fgcc.dg%2Fc1x-noreturn-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbceee64bef15b92b1f9b964b8d371bd07ea794a/gcc%2Ftestsuite%2Fgcc.dg%2Fc1x-noreturn-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc1x-noreturn-1.c?ref=bbceee64bef15b92b1f9b964b8d371bd07ea794a", "patch": "@@ -0,0 +1,59 @@\n+/* Test C1X _Noreturn.  Test valid code.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c1x -pedantic-errors\" } */\n+\n+_Noreturn void exit (int);\n+\n+_Noreturn int f1 (void);\n+\n+_Noreturn void f2 (void);\n+\n+static void _Noreturn f3 (void) { exit (0); }\n+\n+/* Returning from a noreturn function is undefined at runtime, not a\n+   constraint violation, but recommended practice is to diagnose if\n+   such a return appears possible.  */\n+\n+_Noreturn int\n+f4 (void)\n+{\n+  return 1; /* { dg-warning \"has a 'return' statement\" } */\n+  /* { dg-warning \"does return\" \"second warning\" { target *-*-* } 20 } */\n+}\n+\n+_Noreturn void\n+f5 (void)\n+{\n+  return; /* { dg-warning \"has a 'return' statement\" } */\n+  /* { dg-warning \"does return\" \"second warning\" { target *-*-* } 27 } */\n+}\n+\n+_Noreturn void\n+f6 (void)\n+{\n+} /* { dg-warning \"does return\" } */\n+\n+_Noreturn void\n+f7 (int a)\n+{\n+  if (a)\n+    exit (0);\n+} /* { dg-warning \"does return\" } */\n+\n+/* Declarations need not all have _Noreturn.  */\n+\n+void f2 (void);\n+\n+void f8 (void);\n+_Noreturn void f8 (void);\n+\n+/* Duplicate _Noreturn is OK.  */\n+_Noreturn _Noreturn void _Noreturn f9 (void);\n+\n+/* _Noreturn does not affect type compatibility.  */\n+\n+void (*fp) (void) = f5;\n+\n+/* noreturn is an ordinary identifier.  */\n+\n+int noreturn;"}, {"sha": "81972f1e8bef9ef1d1959731f428d5fef37c7733", "filename": "gcc/testsuite/gcc.dg/c1x-noreturn-2.c", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbceee64bef15b92b1f9b964b8d371bd07ea794a/gcc%2Ftestsuite%2Fgcc.dg%2Fc1x-noreturn-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbceee64bef15b92b1f9b964b8d371bd07ea794a/gcc%2Ftestsuite%2Fgcc.dg%2Fc1x-noreturn-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc1x-noreturn-2.c?ref=bbceee64bef15b92b1f9b964b8d371bd07ea794a", "patch": "@@ -0,0 +1,77 @@\n+/* Test C1X _Noreturn.  Test valid code using stdnoreturn.h.  */\n+/* { dg-do run } */\n+/* { dg-options \"-std=c1x -pedantic-errors\" } */\n+\n+#include <stdnoreturn.h>\n+\n+extern int strcmp (const char *, const char *);\n+\n+noreturn void exit (int);\n+noreturn void abort (void);\n+\n+noreturn int f1 (void);\n+\n+noreturn void f2 (void);\n+\n+static void noreturn f3 (void) { exit (0); }\n+\n+/* Returning from a noreturn function is undefined at runtime, not a\n+   constraint violation, but recommended practice is to diagnose if\n+   such a return appears possible.  */\n+\n+noreturn int\n+f4 (void)\n+{\n+  return 1; /* { dg-warning \"has a 'return' statement\" } */\n+  /* { dg-warning \"does return\" \"second warning\" { target *-*-* } 25 } */\n+}\n+\n+noreturn void\n+f5 (void)\n+{\n+  return; /* { dg-warning \"has a 'return' statement\" } */\n+  /* { dg-warning \"does return\" \"second warning\" { target *-*-* } 32 } */\n+}\n+\n+noreturn void\n+f6 (void)\n+{\n+} /* { dg-warning \"does return\" } */\n+\n+noreturn void\n+f7 (int a)\n+{\n+  if (a)\n+    exit (0);\n+} /* { dg-warning \"does return\" } */\n+\n+/* Declarations need not all have noreturn.  */\n+\n+void f2 (void);\n+\n+void f8 (void);\n+noreturn void f8 (void);\n+\n+/* Duplicate noreturn is OK.  */\n+noreturn noreturn void noreturn f9 (void);\n+\n+/* noreturn does not affect type compatibility.  */\n+\n+void (*fp) (void) = f5;\n+\n+#ifndef noreturn\n+#error \"noreturn not defined\"\n+#endif\n+\n+#define str(x) #x\n+#define xstr(x) str(x)\n+\n+const char *s = xstr(noreturn);\n+\n+int\n+main (void)\n+{\n+  if (strcmp (s, \"_Noreturn\") != 0)\n+    abort ();\n+  exit (0);\n+}"}, {"sha": "b12c23efafc3e2f2346988d2fcb59d23edbad854", "filename": "gcc/testsuite/gcc.dg/c1x-noreturn-3.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbceee64bef15b92b1f9b964b8d371bd07ea794a/gcc%2Ftestsuite%2Fgcc.dg%2Fc1x-noreturn-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbceee64bef15b92b1f9b964b8d371bd07ea794a/gcc%2Ftestsuite%2Fgcc.dg%2Fc1x-noreturn-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc1x-noreturn-3.c?ref=bbceee64bef15b92b1f9b964b8d371bd07ea794a", "patch": "@@ -0,0 +1,11 @@\n+/* Test C1X _Noreturn.  Test _Noreturn on main, hosted.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c1x -pedantic-errors -fhosted\" } */\n+\n+_Noreturn void exit (int);\n+\n+_Noreturn int\n+main (void) /* { dg-error \"'main' declared '_Noreturn'\" } */\n+{\n+  exit (0);\n+}"}, {"sha": "72dceafba192d3ca1e3662881a33aec3947a8cf9", "filename": "gcc/testsuite/gcc.dg/c1x-noreturn-4.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbceee64bef15b92b1f9b964b8d371bd07ea794a/gcc%2Ftestsuite%2Fgcc.dg%2Fc1x-noreturn-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbceee64bef15b92b1f9b964b8d371bd07ea794a/gcc%2Ftestsuite%2Fgcc.dg%2Fc1x-noreturn-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc1x-noreturn-4.c?ref=bbceee64bef15b92b1f9b964b8d371bd07ea794a", "patch": "@@ -0,0 +1,11 @@\n+/* Test C1X _Noreturn.  Test _Noreturn on main, freestanding.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c1x -pedantic-errors -ffreestanding\" } */\n+\n+_Noreturn void exit (int);\n+\n+_Noreturn int\n+main (void)\n+{\n+  exit (0);\n+}"}, {"sha": "73f22165cb051a1c18fcff67bbc645c8a929645d", "filename": "gcc/testsuite/gcc.dg/c1x-noreturn-5.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbceee64bef15b92b1f9b964b8d371bd07ea794a/gcc%2Ftestsuite%2Fgcc.dg%2Fc1x-noreturn-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbceee64bef15b92b1f9b964b8d371bd07ea794a/gcc%2Ftestsuite%2Fgcc.dg%2Fc1x-noreturn-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc1x-noreturn-5.c?ref=bbceee64bef15b92b1f9b964b8d371bd07ea794a", "patch": "@@ -0,0 +1,17 @@\n+/* Test C1X _Noreturn.  Test invalid uses.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c1x -pedantic-errors\" } */\n+\n+_Noreturn struct s; /* { dg-error \"empty declaration\" } */\n+\n+typedef _Noreturn void f (void); /* { dg-error \"typedef\" } */\n+\n+void g (_Noreturn void fp (void)); /* { dg-error \"parameter\" } */\n+\n+_Noreturn void (*p) (void); /* { dg-error \"variable\" } */\n+\n+struct t { int a; _Noreturn void (*f) (void); }; /* { dg-error \"expected\" } */\n+\n+int *_Noreturn *q; /* { dg-error \"expected\" } */\n+\n+int i = sizeof (_Noreturn int (*) (void)); /* { dg-error \"expected\" } */"}]}