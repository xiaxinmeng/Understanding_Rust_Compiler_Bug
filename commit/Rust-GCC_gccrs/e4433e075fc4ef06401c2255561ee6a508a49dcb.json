{"sha": "e4433e075fc4ef06401c2255561ee6a508a49dcb", "node_id": "C_kwDOANBUbNoAKGU0NDMzZTA3NWZjNGVmMDY0MDFjMjI1NTU2MWVlNmE1MDhhNDlkY2I", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2022-12-14T08:09:31Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2022-12-19T14:23:11Z"}, "message": "RISC-V: Add testcases for VSETVL PASS\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/rvv/rvv.exp: Adjust to enable tests for VSETVL PASS.\n\t* gcc.target/riscv/rvv/vsetvl/dump-1.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_single_block-1.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_single_block-10.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_single_block-11.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_single_block-12.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_single_block-13.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_single_block-14.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_single_block-15.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_single_block-16.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_single_block-17.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_single_block-18.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_single_block-19.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_single_block-2.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_single_block-3.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_single_block-4.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_single_block-5.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_single_block-6.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_single_block-7.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_single_block-8.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_single_block-9.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_single_vtype-1.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_single_vtype-2.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_single_vtype-3.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_single_vtype-4.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_single_vtype-5.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_single_vtype-6.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_single_vtype-7.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_single_vtype-8.c: New test.", "tree": {"sha": "e27be100e1bdcff59f4d6b42526655551be0151f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e27be100e1bdcff59f4d6b42526655551be0151f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4433e075fc4ef06401c2255561ee6a508a49dcb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4433e075fc4ef06401c2255561ee6a508a49dcb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4433e075fc4ef06401c2255561ee6a508a49dcb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4433e075fc4ef06401c2255561ee6a508a49dcb/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2c29fbebb9ea2e9e720a29d74b4e541e5c79953", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2c29fbebb9ea2e9e720a29d74b4e541e5c79953", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2c29fbebb9ea2e9e720a29d74b4e541e5c79953"}], "stats": {"total": 1672, "additions": 1672, "deletions": 0}, "files": [{"sha": "2ed29e226063692e08b8b333f9f5d26bb2ceb22c", "filename": "gcc/testsuite/gcc.target/riscv/rvv/rvv.exp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4433e075fc4ef06401c2255561ee6a508a49dcb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Frvv.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4433e075fc4ef06401c2255561ee6a508a49dcb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Frvv.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Frvv.exp?ref=e4433e075fc4ef06401c2255561ee6a508a49dcb", "patch": "@@ -42,6 +42,8 @@ dg-init\n set CFLAGS \"$DEFAULT_CFLAGS -march=$gcc_march -O3\"\n dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/base/*.\\[cS\\]]] \\\n \t\"\" $CFLAGS\n+gcc-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/vsetvl/*.\\[cS\\]]] \\\n+\t\"\" $CFLAGS\n \n # All done.\n dg-finish"}, {"sha": "fb4edb459a04bb02ef326892aff084916e88f5c3", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/dump-1.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4433e075fc4ef06401c2255561ee6a508a49dcb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fdump-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4433e075fc4ef06401c2255561ee6a508a49dcb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fdump-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fdump-1.c?ref=e4433e075fc4ef06401c2255561ee6a508a49dcb", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fdump-rtl-vsetvl-details\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, void * restrict in2, void * restrict out2,  int n, int cond)\n+{\n+  for (int i = 0; i < n; i++)\n+    {\n+      vuint16mf4_t v2;\n+      *(vuint16mf4_t*)(out + i + 1000) = v2;\n+      vbool32_t v4;\n+      *(vbool32_t*)(out + i + 3000) = v4;\n+      vbool16_t v5;\n+      *(vbool16_t*)(out + i + 4000) = v5;\n+      vbool8_t v6;\n+      *(vbool8_t*)(out + i + 5000) = v6;\n+      vbool4_t v7;\n+      *(vbool4_t*)(out + i + 6000) = v7;\n+      vbool2_t v8;\n+      *(vbool2_t*)(out + i + 7000) = v8;\n+      vbool1_t v9;\n+      *(vbool1_t*)(out + i + 8000) = v9;\n+      vuint32mf2_t v10;\n+      *(vuint32mf2_t*)(out + i + 100000) = v10;\n+    }\n+  \n+  for (int i = 0; i < n; i++) \n+    {\n+      vint8mf8_t v1 = *(vint8mf8_t*)(in + i + 100000);\n+      *(vint8mf8_t*)(out + i + 10) = v1;\n+    }\n+}"}, {"sha": "fb1258f826ed713a1819414e2d76b544a5ff18de", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_single_block-1.c", "status": "added", "additions": 154, "deletions": 0, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4433e075fc4ef06401c2255561ee6a508a49dcb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4433e075fc4ef06401c2255561ee6a508a49dcb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-1.c?ref=e4433e075fc4ef06401c2255561ee6a508a49dcb", "patch": "@@ -0,0 +1,154 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+/* Test insert-vsetvl PASS whether it's able to eliminate vsetvl for same vtype in VLMAX.  */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo1 (void * restrict in, void * restrict out)\n+{\n+  vbool64_t v1 = *(vbool64_t*)(in + 1);\n+  vbool64_t v2 = *(vbool64_t*)(in + 2);\n+  vbool64_t v3 = *(vbool64_t*)(in + 3);\n+  vbool64_t v4 = *(vbool64_t*)(in + 4);\n+  vbool64_t v5 = *(vbool64_t*)(in + 5);\n+  vbool64_t v6 = *(vbool64_t*)(in + 6);\n+  vbool64_t v7 = *(vbool64_t*)(in + 7);\n+  vbool64_t v8 = *(vbool64_t*)(in + 8);\n+  *(vbool64_t*)(out + 1) = v1;\n+  *(vbool64_t*)(out + 2) = v2;\n+  *(vbool64_t*)(out + 3) = v3;\n+  *(vbool64_t*)(out + 4) = v4;\n+  *(vbool64_t*)(out + 5) = v5;\n+  *(vbool64_t*)(out + 6) = v6;\n+  *(vbool64_t*)(out + 7) = v7;\n+  *(vbool64_t*)(out + 8) = v8;\n+}\n+\n+void foo2 (void * restrict in, void * restrict out)\n+{\n+  vbool32_t v1 = *(vbool32_t*)(in + 1);\n+  vbool32_t v2 = *(vbool32_t*)(in + 2);\n+  vbool32_t v3 = *(vbool32_t*)(in + 3);\n+  vbool32_t v4 = *(vbool32_t*)(in + 4);\n+  vbool32_t v5 = *(vbool32_t*)(in + 5);\n+  vbool32_t v6 = *(vbool32_t*)(in + 6);\n+  vbool32_t v7 = *(vbool32_t*)(in + 7);\n+  vbool32_t v8 = *(vbool32_t*)(in + 8);\n+  *(vbool32_t*)(out + 1) = v1;\n+  *(vbool32_t*)(out + 2) = v2;\n+  *(vbool32_t*)(out + 3) = v3;\n+  *(vbool32_t*)(out + 4) = v4;\n+  *(vbool32_t*)(out + 5) = v5;\n+  *(vbool32_t*)(out + 6) = v6;\n+  *(vbool32_t*)(out + 7) = v7;\n+  *(vbool32_t*)(out + 8) = v8;\n+}\n+\n+void foo3 (void * restrict in, void * restrict out)\n+{\n+  vbool16_t v1 = *(vbool16_t*)(in + 1);\n+  vbool16_t v2 = *(vbool16_t*)(in + 2);\n+  vbool16_t v3 = *(vbool16_t*)(in + 3);\n+  vbool16_t v4 = *(vbool16_t*)(in + 4);\n+  vbool16_t v5 = *(vbool16_t*)(in + 5);\n+  vbool16_t v6 = *(vbool16_t*)(in + 6);\n+  vbool16_t v7 = *(vbool16_t*)(in + 7);\n+  vbool16_t v8 = *(vbool16_t*)(in + 8);\n+  *(vbool16_t*)(out + 1) = v1;\n+  *(vbool16_t*)(out + 2) = v2;\n+  *(vbool16_t*)(out + 3) = v3;\n+  *(vbool16_t*)(out + 4) = v4;\n+  *(vbool16_t*)(out + 5) = v5;\n+  *(vbool16_t*)(out + 6) = v6;\n+  *(vbool16_t*)(out + 7) = v7;\n+  *(vbool16_t*)(out + 8) = v8;\n+}\n+\n+void foo4 (void * restrict in, void * restrict out)\n+{\n+  vbool8_t v1 = *(vbool8_t*)(in + 1);\n+  vbool8_t v2 = *(vbool8_t*)(in + 2);\n+  vbool8_t v3 = *(vbool8_t*)(in + 3);\n+  vbool8_t v4 = *(vbool8_t*)(in + 4);\n+  vbool8_t v5 = *(vbool8_t*)(in + 5);\n+  vbool8_t v6 = *(vbool8_t*)(in + 6);\n+  vbool8_t v7 = *(vbool8_t*)(in + 7);\n+  vbool8_t v8 = *(vbool8_t*)(in + 8);\n+  *(vbool8_t*)(out + 1) = v1;\n+  *(vbool8_t*)(out + 2) = v2;\n+  *(vbool8_t*)(out + 3) = v3;\n+  *(vbool8_t*)(out + 4) = v4;\n+  *(vbool8_t*)(out + 5) = v5;\n+  *(vbool8_t*)(out + 6) = v6;\n+  *(vbool8_t*)(out + 7) = v7;\n+  *(vbool8_t*)(out + 8) = v8;\n+}\n+\n+void foo5 (void * restrict in, void * restrict out)\n+{\n+  vbool4_t v1 = *(vbool4_t*)(in + 1);\n+  vbool4_t v2 = *(vbool4_t*)(in + 2);\n+  vbool4_t v3 = *(vbool4_t*)(in + 3);\n+  vbool4_t v4 = *(vbool4_t*)(in + 4);\n+  vbool4_t v5 = *(vbool4_t*)(in + 5);\n+  vbool4_t v6 = *(vbool4_t*)(in + 6);\n+  vbool4_t v7 = *(vbool4_t*)(in + 7);\n+  vbool4_t v8 = *(vbool4_t*)(in + 8);\n+  *(vbool4_t*)(out + 1) = v1;\n+  *(vbool4_t*)(out + 2) = v2;\n+  *(vbool4_t*)(out + 3) = v3;\n+  *(vbool4_t*)(out + 4) = v4;\n+  *(vbool4_t*)(out + 5) = v5;\n+  *(vbool4_t*)(out + 6) = v6;\n+  *(vbool4_t*)(out + 7) = v7;\n+  *(vbool4_t*)(out + 8) = v8;\n+}\n+\n+void foo6 (void * restrict in, void * restrict out)\n+{\n+  vbool2_t v1 = *(vbool2_t*)(in + 1);\n+  vbool2_t v2 = *(vbool2_t*)(in + 2);\n+  vbool2_t v3 = *(vbool2_t*)(in + 3);\n+  vbool2_t v4 = *(vbool2_t*)(in + 4);\n+  vbool2_t v5 = *(vbool2_t*)(in + 5);\n+  vbool2_t v6 = *(vbool2_t*)(in + 6);\n+  vbool2_t v7 = *(vbool2_t*)(in + 7);\n+  vbool2_t v8 = *(vbool2_t*)(in + 8);\n+  *(vbool2_t*)(out + 1) = v1;\n+  *(vbool2_t*)(out + 2) = v2;\n+  *(vbool2_t*)(out + 3) = v3;\n+  *(vbool2_t*)(out + 4) = v4;\n+  *(vbool2_t*)(out + 5) = v5;\n+  *(vbool2_t*)(out + 6) = v6;\n+  *(vbool2_t*)(out + 7) = v7;\n+  *(vbool2_t*)(out + 8) = v8;\n+}\n+\n+void foo7 (void * restrict in, void * restrict out)\n+{\n+  vbool1_t v1 = *(vbool1_t*)(in + 1);\n+  vbool1_t v2 = *(vbool1_t*)(in + 2);\n+  vbool1_t v3 = *(vbool1_t*)(in + 3);\n+  vbool1_t v4 = *(vbool1_t*)(in + 4);\n+  vbool1_t v5 = *(vbool1_t*)(in + 5);\n+  vbool1_t v6 = *(vbool1_t*)(in + 6);\n+  vbool1_t v7 = *(vbool1_t*)(in + 7);\n+  vbool1_t v8 = *(vbool1_t*)(in + 8);\n+  *(vbool1_t*)(out + 1) = v1;\n+  *(vbool1_t*)(out + 2) = v2;\n+  *(vbool1_t*)(out + 3) = v3;\n+  *(vbool1_t*)(out + 4) = v4;\n+  *(vbool1_t*)(out + 5) = v5;\n+  *(vbool1_t*)(out + 6) = v6;\n+  *(vbool1_t*)(out + 7) = v7;\n+  *(vbool1_t*)(out + 8) = v8;\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */"}, {"sha": "bdfb964cc01472dc55857a380f78120dc062ce84", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_single_block-10.c", "status": "added", "additions": 143, "deletions": 0, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4433e075fc4ef06401c2255561ee6a508a49dcb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4433e075fc4ef06401c2255561ee6a508a49dcb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-10.c?ref=e4433e075fc4ef06401c2255561ee6a508a49dcb", "patch": "@@ -0,0 +1,143 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f1 (void * restrict in, void * restrict out)\n+{\n+  vint16mf4_t v1 = *(vint16mf4_t*)(in + 1);\n+  vint8mf8_t v2;\n+  *(vint16mf4_t*)(out + 1) = v1;\n+  *(vint8mf8_t*)(out + 2) = v2;\n+}\n+\n+void f2 (void * restrict in, void * restrict out)\n+{\n+  vint16mf4_t v1 = *(vint16mf4_t*)(in + 1);\n+  vint32mf2_t v2;\n+  *(vint16mf4_t*)(out + 1) = v1;\n+  *(vint32mf2_t*)(out + 2) = v2;\n+}\n+\n+void f3 (void * restrict in, void * restrict out)\n+{\n+  vint16mf4_t v1 = *(vint16mf4_t*)(in + 1);\n+  vint64m1_t v2;\n+  *(vint16mf4_t*)(out + 1) = v1;\n+  *(vint64m1_t*)(out + 2) = v2;\n+}\n+\n+void f4 (void * restrict in, void * restrict out)\n+{\n+  vint16mf2_t v1 = *(vint16mf2_t*)(in + 1);\n+  vint8mf4_t v2;\n+  *(vint16mf2_t*)(out + 1) = v1;\n+  *(vint8mf4_t*)(out + 2) = v2;\n+}\n+\n+void f5 (void * restrict in, void * restrict out)\n+{\n+  vint16mf2_t v1 = *(vint16mf2_t*)(in + 1);\n+  vint32m1_t v2;\n+  *(vint16mf2_t*)(out + 1) = v1;\n+  *(vint32m1_t*)(out + 2) = v2;\n+}\n+\n+void f6 (void * restrict in, void * restrict out)\n+{\n+  vint16mf2_t v1 = *(vint16mf2_t*)(in + 1);\n+  vint64m2_t v2;\n+  *(vint16mf2_t*)(out + 1) = v1;\n+  *(vint64m2_t*)(out + 2) = v2;\n+}\n+\n+void f7 (void * restrict in, void * restrict out)\n+{\n+  vint16m1_t v1 = *(vint16m1_t*)(in + 1);\n+  vint8mf2_t v2;\n+  *(vint16m1_t*)(out + 1) = v1;\n+  *(vint8mf2_t*)(out + 2) = v2;\n+}\n+\n+void f8 (void * restrict in, void * restrict out)\n+{\n+  vint16m1_t v1 = *(vint16m1_t*)(in + 1);\n+  vint32m2_t v2;\n+  *(vint16m1_t*)(out + 1) = v1;\n+  *(vint32m2_t*)(out + 2) = v2;\n+}\n+\n+void f9 (void * restrict in, void * restrict out)\n+{\n+  vint16m1_t v1 = *(vint16m1_t*)(in + 1);\n+  vint64m4_t v2;\n+  *(vint16m1_t*)(out + 1) = v1;\n+  *(vint64m4_t*)(out + 2) = v2;\n+}\n+\n+void f10 (void * restrict in, void * restrict out)\n+{\n+  vint16m2_t v1 = *(vint16m2_t*)(in + 1);\n+  vint8m1_t v2;\n+  *(vint16m2_t*)(out + 1) = v1;\n+  *(vint8m1_t*)(out + 2) = v2;\n+}\n+\n+void f11 (void * restrict in, void * restrict out)\n+{\n+  vint16m2_t v1 = *(vint16m2_t*)(in + 1);\n+  vint32m4_t v2;\n+  *(vint16m2_t*)(out + 1) = v1;\n+  *(vint32m4_t*)(out + 2) = v2;\n+}\n+\n+void f12 (void * restrict in, void * restrict out)\n+{\n+  vint16m2_t v1 = *(vint16m2_t*)(in + 1);\n+  vint64m8_t v2;\n+  *(vint16m2_t*)(out + 1) = v1;\n+  *(vint64m8_t*)(out + 2) = v2;\n+}\n+\n+void f13 (void * restrict in, void * restrict out)\n+{\n+  vint16m4_t v1 = *(vint16m4_t*)(in + 1);\n+  vint8m2_t v2;\n+  *(vint16m4_t*)(out + 1) = v1;\n+  *(vint8m2_t*)(out + 2) = v2;\n+}\n+\n+void f14 (void * restrict in, void * restrict out)\n+{\n+  vint16m4_t v1 = *(vint16m4_t*)(in + 1);\n+  vint32m8_t v2;\n+  *(vint16m4_t*)(out + 1) = v1;\n+  *(vint32m8_t*)(out + 2) = v2;\n+}\n+\n+void f15 (void * restrict in, void * restrict out)\n+{\n+  vint16m8_t v1 = *(vint16m8_t*)(in + 1);\n+  vint8m4_t v2;\n+  *(vint16m8_t*)(out + 1) = v1;\n+  *(vint8m4_t*)(out + 2) = v2;\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+\n+/* { dg-final { scan-assembler-times {vsetvli} 15 { target { no-opts \"-O0\" } } } } */"}, {"sha": "17055f0f0bf09d7c08e244da27ad8ff9b028d665", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_single_block-11.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4433e075fc4ef06401c2255561ee6a508a49dcb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4433e075fc4ef06401c2255561ee6a508a49dcb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-11.c?ref=e4433e075fc4ef06401c2255561ee6a508a49dcb", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f1 (void * restrict in, void * restrict out)\n+{\n+  vint32mf2_t v1 = *(vint32mf2_t*)(in + 1);\n+  vint8mf8_t v2;\n+  *(vint32mf2_t*)(out + 1) = v1;\n+  *(vint8mf8_t*)(out + 2) = v2;\n+}\n+\n+void f2 (void * restrict in, void * restrict out)\n+{\n+  vint32mf2_t v1 = *(vint32mf2_t*)(in + 1);\n+  vint16mf4_t v2;\n+  *(vint32mf2_t*)(out + 1) = v1;\n+  *(vint16mf4_t*)(out + 2) = v2;\n+}\n+\n+void f3 (void * restrict in, void * restrict out)\n+{\n+  vint32mf2_t v1 = *(vint32mf2_t*)(in + 1);\n+  vint64m1_t v2;\n+  *(vint32mf2_t*)(out + 1) = v1;\n+  *(vint64m1_t*)(out + 2) = v2;\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+\n+/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\" } } } } */"}, {"sha": "1383995ac7214834e3f82560aa034d2f9cb01612", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_single_block-12.c", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4433e075fc4ef06401c2255561ee6a508a49dcb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4433e075fc4ef06401c2255561ee6a508a49dcb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-12.c?ref=e4433e075fc4ef06401c2255561ee6a508a49dcb", "patch": "@@ -0,0 +1,92 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f1 (void * restrict in, void * restrict out)\n+{\n+  vint8mf8_t v1 = *(vint8mf8_t*)(in + 1);\n+  vfloat32mf2_t v2;\n+  *(vint8mf8_t*)(out + 1) = v1;\n+  *(vfloat32mf2_t*)(out + 2) = v2;\n+}\n+\n+void f2 (void * restrict in, void * restrict out)\n+{\n+  vint8mf8_t v1 = *(vint8mf8_t*)(in + 1);\n+  vfloat64m1_t v2;\n+  *(vint8mf8_t*)(out + 1) = v1;\n+  *(vfloat64m1_t*)(out + 2) = v2;\n+}\n+\n+void f3 (void * restrict in, void * restrict out)\n+{\n+  vint8mf4_t v1 = *(vint8mf4_t*)(in + 1);\n+  vfloat32m1_t v2;\n+  *(vint8mf4_t*)(out + 1) = v1;\n+  *(vfloat32m1_t*)(out + 2) = v2;\n+}\n+\n+void f4 (void * restrict in, void * restrict out)\n+{\n+  vint8mf4_t v1 = *(vint8mf4_t*)(in + 1);\n+  vfloat64m2_t v2;\n+  *(vint8mf4_t*)(out + 1) = v1;\n+  *(vfloat64m2_t*)(out + 2) = v2;\n+}\n+\n+void f5 (void * restrict in, void * restrict out)\n+{\n+  vint8mf2_t v1 = *(vint8mf2_t*)(in + 1);\n+  vfloat32m2_t v2;\n+  *(vint8mf2_t*)(out + 1) = v1;\n+  *(vfloat32m2_t*)(out + 2) = v2;\n+}\n+\n+void f6 (void * restrict in, void * restrict out)\n+{\n+  vint8mf2_t v1 = *(vint8mf2_t*)(in + 1);\n+  vfloat64m4_t v2;\n+  *(vint8mf2_t*)(out + 1) = v1;\n+  *(vfloat64m4_t*)(out + 2) = v2;\n+}\n+\n+void f7 (void * restrict in, void * restrict out)\n+{\n+  vint8m1_t v1 = *(vint8m1_t*)(in + 1);\n+  vfloat32m4_t v2;\n+  *(vint8m1_t*)(out + 1) = v1;\n+  *(vfloat32m4_t*)(out + 2) = v2;\n+}\n+\n+void f8 (void * restrict in, void * restrict out)\n+{\n+  vint8m1_t v1 = *(vint8m1_t*)(in + 1);\n+  vfloat64m8_t v2;\n+  *(vint8m1_t*)(out + 1) = v1;\n+  *(vfloat64m8_t*)(out + 2) = v2;\n+}\n+\n+void f9 (void * restrict in, void * restrict out)\n+{\n+  vint8m2_t v1 = *(vint8m2_t*)(in + 1);\n+  vfloat32m8_t v2;\n+  *(vint8m2_t*)(out + 1) = v1;\n+  *(vfloat32m8_t*)(out + 2) = v2;\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+\n+/* { dg-final { scan-assembler-times {vsetvli} 9 { target { no-opts \"-O0\" } } } } */"}, {"sha": "ba4b5ef7c3b2443223fc23abf893f4262f80e3aa", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_single_block-13.c", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4433e075fc4ef06401c2255561ee6a508a49dcb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4433e075fc4ef06401c2255561ee6a508a49dcb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-13.c?ref=e4433e075fc4ef06401c2255561ee6a508a49dcb", "patch": "@@ -0,0 +1,89 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f1 (void * restrict in, void * restrict out)\n+{\n+  vint16mf4_t v1 = *(vint16mf4_t*)(in + 1);\n+  vfloat32mf2_t v2;\n+  *(vint16mf4_t*)(out + 1) = v1;\n+  *(vfloat32mf2_t*)(out + 2) = v2;\n+}\n+\n+void f2 (void * restrict in, void * restrict out)\n+{\n+  vint16mf4_t v1 = *(vint16mf4_t*)(in + 1);\n+  vfloat64m1_t v2;\n+  *(vint16mf4_t*)(out + 1) = v1;\n+  *(vfloat64m1_t*)(out + 2) = v2;\n+}\n+\n+void f3 (void * restrict in, void * restrict out)\n+{\n+  vint16mf2_t v1 = *(vint16mf2_t*)(in + 1);\n+  vfloat32m1_t v2;\n+  *(vint16mf2_t*)(out + 1) = v1;\n+  *(vfloat32m1_t*)(out + 2) = v2;\n+}\n+\n+void f4 (void * restrict in, void * restrict out)\n+{\n+  vint16mf2_t v1 = *(vint16mf2_t*)(in + 1);\n+  vfloat64m2_t v2;\n+  *(vint16mf2_t*)(out + 1) = v1;\n+  *(vfloat64m2_t*)(out + 2) = v2;\n+}\n+\n+void f5 (void * restrict in, void * restrict out)\n+{\n+  vint16m1_t v1 = *(vint16m1_t*)(in + 1);\n+  vfloat32m2_t v2;\n+  *(vint16m1_t*)(out + 1) = v1;\n+  *(vfloat32m2_t*)(out + 2) = v2;\n+}\n+\n+void f6 (void * restrict in, void * restrict out)\n+{\n+  vint16m1_t v1 = *(vint16m1_t*)(in + 1);\n+  vfloat64m4_t v2;\n+  *(vint16m1_t*)(out + 1) = v1;\n+  *(vfloat64m4_t*)(out + 2) = v2;\n+}\n+\n+void f7 (void * restrict in, void * restrict out)\n+{\n+  vint16m2_t v1 = *(vint16m2_t*)(in + 1);\n+  vfloat32m4_t v2;\n+  *(vint16m2_t*)(out + 1) = v1;\n+  *(vfloat32m4_t*)(out + 2) = v2;\n+}\n+\n+void f8 (void * restrict in, void * restrict out)\n+{\n+  vint16m2_t v1 = *(vint16m2_t*)(in + 1);\n+  vfloat64m8_t v2;\n+  *(vint16m2_t*)(out + 1) = v1;\n+  *(vfloat64m8_t*)(out + 2) = v2;\n+}\n+\n+void f9 (void * restrict in, void * restrict out)\n+{\n+  vint16m4_t v1 = *(vint16m4_t*)(in + 1);\n+  vfloat32m8_t v2;\n+  *(vint16m4_t*)(out + 1) = v1;\n+  *(vfloat32m8_t*)(out + 2) = v2;\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+\n+/* { dg-final { scan-assembler-times {vsetvli} 9 { target { no-opts \"-O0\" } } } } */"}, {"sha": "5f04c1929249f23cb6d09bcaa4ae0613152ed307", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_single_block-14.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4433e075fc4ef06401c2255561ee6a508a49dcb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4433e075fc4ef06401c2255561ee6a508a49dcb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-14.c?ref=e4433e075fc4ef06401c2255561ee6a508a49dcb", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f3 (void * restrict in, void * restrict out)\n+{\n+  vint32mf2_t v1 = *(vint32mf2_t*)(in + 1);\n+  vfloat64m1_t v2;\n+  *(vint32mf2_t*)(out + 1) = v1;\n+  *(vfloat64m1_t*)(out + 2) = v2;\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" } } } } */"}, {"sha": "8debc17248f3a10cf2dc609b1b5f3b50a0c4566a", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_single_block-15.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4433e075fc4ef06401c2255561ee6a508a49dcb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4433e075fc4ef06401c2255561ee6a508a49dcb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-15.c?ref=e4433e075fc4ef06401c2255561ee6a508a49dcb", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f1 (void * restrict in, void * restrict out)\n+{\n+  vfloat32mf2_t v1 = *(vfloat32mf2_t*)(in + 1);\n+  vint8mf8_t v2;\n+  *(vfloat32mf2_t*)(out + 1) = v1;\n+  *(vint8mf8_t*)(out + 2) = v2;\n+}\n+\n+void f2 (void * restrict in, void * restrict out)\n+{\n+  vfloat32mf2_t v1 = *(vfloat32mf2_t*)(in + 1);\n+  vint16mf4_t v2;\n+  *(vfloat32mf2_t*)(out + 1) = v1;\n+  *(vint16mf4_t*)(out + 2) = v2;\n+}\n+\n+void f3 (void * restrict in, void * restrict out)\n+{\n+  vfloat32mf2_t v1 = *(vfloat32mf2_t*)(in + 1);\n+  vint64m1_t v2;\n+  *(vfloat32mf2_t*)(out + 1) = v1;\n+  *(vint64m1_t*)(out + 2) = v2;\n+}\n+\n+void f4 (void * restrict in, void * restrict out)\n+{\n+  vfloat32mf2_t v1 = *(vfloat32mf2_t*)(in + 1);\n+  vfloat64m1_t v2;\n+  *(vfloat32mf2_t*)(out + 1) = v1;\n+  *(vfloat64m1_t*)(out + 2) = v2;\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" } } } } */\n+\n+/* { dg-final { scan-assembler-times {vsetvli} 4 { target { no-opts \"-O0\" } } } } */"}, {"sha": "c8913d8267d65078130ba63799022d5a6d25408c", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_single_block-16.c", "status": "added", "additions": 147, "deletions": 0, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4433e075fc4ef06401c2255561ee6a508a49dcb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4433e075fc4ef06401c2255561ee6a508a49dcb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-16.c?ref=e4433e075fc4ef06401c2255561ee6a508a49dcb", "patch": "@@ -0,0 +1,147 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f1 (void * restrict in, void * restrict out)\n+{\n+  vbool64_t v1 = *(vbool64_t*)(in + 1);\n+  vint16mf4_t v2;\n+  *(vbool64_t*)(out + 1) = v1;\n+  *(vint16mf4_t*)(out + 2) = v2;\n+}\n+\n+void f2 (void * restrict in, void * restrict out)\n+{\n+  vbool64_t v1 = *(vbool64_t*)(in + 1);\n+  vint32mf2_t v2;\n+  *(vbool64_t*)(out + 1) = v1;\n+  *(vint32mf2_t*)(out + 2) = v2;\n+}\n+\n+void f3 (void * restrict in, void * restrict out)\n+{\n+  vbool64_t v1 = *(vbool64_t*)(in + 1);\n+  vint64m1_t v2;\n+  *(vbool64_t*)(out + 1) = v1;\n+  *(vint64m1_t*)(out + 2) = v2;\n+}\n+\n+void f4 (void * restrict in, void * restrict out)\n+{\n+  vbool32_t v1 = *(vbool32_t*)(in + 1);\n+  vint16mf2_t v2;\n+  *(vbool32_t*)(out + 1) = v1;\n+  *(vint16mf2_t*)(out + 2) = v2;\n+}\n+\n+void f5 (void * restrict in, void * restrict out)\n+{\n+  vbool32_t v1 = *(vbool32_t*)(in + 1);\n+  vint32m1_t v2;\n+  *(vbool32_t*)(out + 1) = v1;\n+  *(vint32m1_t*)(out + 2) = v2;\n+}\n+\n+void f6 (void * restrict in, void * restrict out)\n+{\n+  vbool32_t v1 = *(vbool32_t*)(in + 1);\n+  vint64m2_t v2;\n+  *(vbool32_t*)(out + 1) = v1;\n+  *(vint64m2_t*)(out + 2) = v2;\n+}\n+\n+void f7 (void * restrict in, void * restrict out)\n+{\n+  vbool16_t v1 = *(vbool16_t*)(in + 1);\n+  vint16m1_t v2;\n+  *(vbool16_t*)(out + 1) = v1;\n+  *(vint16m1_t*)(out + 2) = v2;\n+}\n+\n+void f8 (void * restrict in, void * restrict out)\n+{\n+  vbool16_t v1 = *(vbool16_t*)(in + 1);\n+  vint32m2_t v2;\n+  *(vbool16_t*)(out + 1) = v1;\n+  *(vint32m2_t*)(out + 2) = v2;\n+}\n+\n+void f9 (void * restrict in, void * restrict out)\n+{\n+  vbool16_t v1 = *(vbool16_t*)(in + 1);\n+  vint64m4_t v2;\n+  *(vbool16_t*)(out + 1) = v1;\n+  *(vint64m4_t*)(out + 2) = v2;\n+}\n+\n+void f10 (void * restrict in, void * restrict out)\n+{\n+  vbool8_t v1 = *(vbool8_t*)(in + 1);\n+  vint16m2_t v2;\n+  *(vbool8_t*)(out + 1) = v1;\n+  *(vint16m2_t*)(out + 2) = v2;\n+}\n+\n+void f11 (void * restrict in, void * restrict out)\n+{\n+  vbool8_t v1 = *(vbool8_t*)(in + 1);\n+  vint32m4_t v2;\n+  *(vbool8_t*)(out + 1) = v1;\n+  *(vint32m4_t*)(out + 2) = v2;\n+}\n+\n+void f12 (void * restrict in, void * restrict out)\n+{\n+  vbool8_t v1 = *(vbool8_t*)(in + 1);\n+  vint64m8_t v2;\n+  *(vbool8_t*)(out + 1) = v1;\n+  *(vint64m8_t*)(out + 2) = v2;\n+}\n+\n+void f13 (void * restrict in, void * restrict out)\n+{\n+  vbool4_t v1 = *(vbool4_t*)(in + 1);\n+  vint16m4_t v2;\n+  *(vbool4_t*)(out + 1) = v1;\n+  *(vint16m4_t*)(out + 2) = v2;\n+}\n+\n+void f14 (void * restrict in, void * restrict out)\n+{\n+  vbool4_t v1 = *(vbool4_t*)(in + 1);\n+  vint32m8_t v2;\n+  *(vbool4_t*)(out + 1) = v1;\n+  *(vint32m8_t*)(out + 2) = v2;\n+}\n+\n+void f15 (void * restrict in, void * restrict out)\n+{\n+  vbool2_t v1 = *(vbool2_t*)(in + 1);\n+  vint16m8_t v2;\n+  *(vbool2_t*)(out + 1) = v1;\n+  *(vint16m8_t*)(out + 2) = v2;\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+\n+/* { dg-final { scan-assembler-times {vsetvli} 15 { target { no-opts \"-O0\" } } } } */"}, {"sha": "edb94218ede074b74d514967229765ed31aa471e", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_single_block-17.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4433e075fc4ef06401c2255561ee6a508a49dcb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4433e075fc4ef06401c2255561ee6a508a49dcb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-17.c?ref=e4433e075fc4ef06401c2255561ee6a508a49dcb", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo7 (void * restrict in, void * restrict out)\n+{\n+  vbool1_t v1 = *(vbool1_t*)(in + 1);\n+  vbool2_t v2 = *(vbool2_t*)(in + 2);\n+  vbool4_t v3 = *(vbool4_t*)(in + 3);\n+  vbool8_t v4 = *(vbool8_t*)(in + 4);\n+  vbool16_t v5 = *(vbool16_t*)(in + 5);\n+  vbool32_t v6 = *(vbool32_t*)(in + 6);\n+  vbool64_t v7 = *(vbool64_t*)(in + 7);\n+  *(vbool1_t*)(out + 1) = v1;\n+  *(vbool2_t*)(out + 2) = v2;\n+  *(vbool4_t*)(out + 3) = v3;\n+  *(vbool8_t*)(out + 4) = v4;\n+  *(vbool16_t*)(out + 5) = v5;\n+  *(vbool32_t*)(out + 6) = v6;\n+  *(vbool64_t*)(out + 7) = v7;\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" } } } } */\n+/* { dg-final { scan-assembler-times {vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 7 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" } } } } */\n+/* { dg-final { scan-assembler-times {vsm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 7 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" } } } } */"}, {"sha": "e547b94621b8f0915a4569751b84377d781a01d6", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_single_block-18.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4433e075fc4ef06401c2255561ee6a508a49dcb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4433e075fc4ef06401c2255561ee6a508a49dcb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-18.c?ref=e4433e075fc4ef06401c2255561ee6a508a49dcb", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out)\n+{\n+  vint8mf8_t v1 = *(vint8mf8_t*)(in + 1);\n+  vint16mf4_t v2 = *(vint16mf4_t*)(in + 2);\n+  vint32mf2_t v3 = *(vint32mf2_t*)(in + 3);\n+  vfloat32mf2_t v4 = *(vfloat32mf2_t*)(in + 4);\n+  \n+  vint8mf4_t v5 = *(vint8mf4_t*)(in + 5);\n+  vint16mf2_t v6 = *(vint16mf2_t*)(in + 6);\n+  \n+  vint8mf2_t v7 = *(vint8mf2_t*)(in + 7);\n+  \n+  *(vint8mf8_t*)(out + 1) = v1;\n+  *(vint16mf4_t*)(out + 2) = v2;\n+  *(vint32mf2_t*)(out + 3) = v3;\n+  *(vfloat32mf2_t*)(out + 4) = v4;\n+  \n+  *(vint8mf4_t*)(out + 5) = v5;\n+  *(vint16mf2_t*)(out + 6) = v6;\n+  \n+  *(vint8mf2_t*)(out + 7) = v7;\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" } } } } */"}, {"sha": "819e58281fec3c3e06c4c4293d7163a3cc11c35c", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_single_block-19.c", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4433e075fc4ef06401c2255561ee6a508a49dcb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4433e075fc4ef06401c2255561ee6a508a49dcb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-19.c?ref=e4433e075fc4ef06401c2255561ee6a508a49dcb", "patch": "@@ -0,0 +1,105 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out)\n+{\n+  vint8mf8_t v1 = *(vint8mf8_t*)(in + 1);\n+  vint16mf4_t v2;\n+  *(vint8mf8_t*)(out + 1) = v1;\n+  *(vint16mf4_t*)(out + 2) = v2;\n+  \n+  vint8mf8_t v3 = *(vint8mf8_t*)(in + 3);\n+  vint32mf2_t v4;\n+  *(vint8mf8_t*)(out + 3) = v3;\n+  *(vint32mf2_t*)(out + 4) = v4;\n+  \n+  vint8mf8_t v5 = *(vint8mf8_t*)(in + 5);\n+  vint64m1_t v6;\n+  *(vint8mf8_t*)(out + 5) = v5;\n+  *(vint64m1_t*)(out + 6) = v6;\n+  \n+  vint8mf4_t v7 = *(vint8mf4_t*)(in + 7);\n+  vint16mf2_t v8;\n+  *(vint8mf4_t*)(out + 7) = v7;\n+  *(vint16mf2_t*)(out + 8) = v8;\n+  \n+  vint8mf4_t v9 = *(vint8mf4_t*)(in + 9);\n+  vint32m1_t v10;\n+  *(vint8mf4_t*)(out + 9) = v9;\n+  *(vint32m1_t*)(out + 10) = v10;\n+  \n+  vint8mf4_t v11 = *(vint8mf4_t*)(in + 11);\n+  vint64m2_t v12;\n+  *(vint8mf4_t*)(out + 11) = v11;\n+  *(vint64m2_t*)(out + 12) = v12;\n+  \n+  vint8mf2_t v13 = *(vint8mf2_t*)(in + 13);\n+  vint16m1_t v14;\n+  *(vint8mf2_t*)(out + 13) = v13;\n+  *(vint16m1_t*)(out + 14) = v14;\n+  \n+  vint8mf2_t v15 = *(vint8mf2_t*)(in + 15);\n+  vint32m2_t v16;\n+  *(vint8mf2_t*)(out + 15) = v15;\n+  *(vint32m2_t*)(out + 16) = v16;\n+  \n+  vint8mf2_t v17 = *(vint8mf2_t*)(in + 17);\n+  vint64m4_t v18;\n+  *(vint8mf2_t*)(out + 17) = v17;\n+  *(vint64m4_t*)(out + 18) = v18;\n+  \n+  vint8m1_t v19 = *(vint8m1_t*)(in + 19);\n+  vint16m2_t v20;\n+  *(vint8m1_t*)(out + 19) = v19;\n+  *(vint16m2_t*)(out + 20) = v20;\n+  \n+  vint8m1_t v21 = *(vint8m1_t*)(in + 20);\n+  vint32m4_t v22;\n+  *(vint8m1_t*)(out + 20) = v21;\n+  *(vint32m4_t*)(out + 21) = v22;\n+  \n+  vint8m1_t v23 = *(vint8m1_t*)(in + 23);\n+  vint64m8_t v24;\n+  *(vint8m1_t*)(out + 21) = v23;\n+  *(vint64m8_t*)(out + 22) = v24;\n+  \n+  vint8m2_t v25 = *(vint8m2_t*)(in + 25);\n+  vint16m4_t v26;\n+  *(vint8m2_t*)(out + 25) = v25;\n+  *(vint16m4_t*)(out + 26) = v26;\n+  \n+  vint8m2_t v27 = *(vint8m2_t*)(in + 27);\n+  vint32m8_t v28;\n+  *(vint8m2_t*)(out + 27) = v27;\n+  *(vint32m8_t*)(out + 28) = v28;\n+  \n+  vint8m4_t v29 = *(vint8m4_t*)(in + 29);\n+  vint16m8_t v30;\n+  *(vint8m4_t*)(out + 29) = v29;\n+  *(vint16m8_t*)(out + 30) = v30;\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-O2\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-O2\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-O2\" } } } } */\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-O2\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-O2\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-O2\" } } } } */\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-O2\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-O2\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-O2\" } } } } */\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-O2\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-O2\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-O2\" } } } } */\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-O2\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-O2\" } } } } */\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-O2\" } } } } */\n+\n+/* { dg-final { scan-assembler-times {vsetvli} 15 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-O2\" } } } } */"}, {"sha": "5ee37e99a45dc0885f40ea02c85ffeaeb343094d", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_single_block-2.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4433e075fc4ef06401c2255561ee6a508a49dcb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4433e075fc4ef06401c2255561ee6a508a49dcb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-2.c?ref=e4433e075fc4ef06401c2255561ee6a508a49dcb", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+/* Test insert-vsetvl PASS whether it's able to eliminate vsetvl for same vtype in VLMAX.  */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo1 (void * restrict in, void * restrict out)\n+{\n+  vint8mf8_t v1 = *(vint8mf8_t*)(in + 1);\n+  vint8mf8_t v2 = *(vint8mf8_t*)(in + 2);\n+  vint8mf8_t v3 = *(vint8mf8_t*)(in + 3);\n+  vint8mf8_t v4 = *(vint8mf8_t*)(in + 4);\n+  vint8mf8_t v5 = *(vint8mf8_t*)(in + 5);\n+  vint8mf8_t v6 = *(vint8mf8_t*)(in + 6);\n+  vint8mf8_t v7 = *(vint8mf8_t*)(in + 7);\n+  vint8mf8_t v8 = *(vint8mf8_t*)(in + 8);\n+  *(vint8mf8_t*)(out + 1) = v1;\n+  *(vint8mf8_t*)(out + 2) = v2;\n+  *(vint8mf8_t*)(out + 3) = v3;\n+  *(vint8mf8_t*)(out + 4) = v4;\n+  *(vint8mf8_t*)(out + 5) = v5;\n+  *(vint8mf8_t*)(out + 6) = v6;\n+  *(vint8mf8_t*)(out + 7) = v7;\n+  *(vint8mf8_t*)(out + 8) = v8;\n+}\n+\n+void foo2 (void * restrict in, void * restrict out)\n+{\n+  vint8mf4_t v1 = *(vint8mf4_t*)(in + 1);\n+  vint8mf4_t v2 = *(vint8mf4_t*)(in + 2);\n+  vint8mf4_t v3 = *(vint8mf4_t*)(in + 3);\n+  vint8mf4_t v4 = *(vint8mf4_t*)(in + 4);\n+  vint8mf4_t v5 = *(vint8mf4_t*)(in + 5);\n+  vint8mf4_t v6 = *(vint8mf4_t*)(in + 6);\n+  vint8mf4_t v7 = *(vint8mf4_t*)(in + 7);\n+  vint8mf4_t v8 = *(vint8mf4_t*)(in + 8);\n+  *(vint8mf4_t*)(out + 1) = v1;\n+  *(vint8mf4_t*)(out + 2) = v2;\n+  *(vint8mf4_t*)(out + 3) = v3;\n+  *(vint8mf4_t*)(out + 4) = v4;\n+  *(vint8mf4_t*)(out + 5) = v5;\n+  *(vint8mf4_t*)(out + 6) = v6;\n+  *(vint8mf4_t*)(out + 7) = v7;\n+  *(vint8mf4_t*)(out + 8) = v8;\n+}\n+\n+void foo3 (void * restrict in, void * restrict out)\n+{\n+  vint8mf2_t v1 = *(vint8mf2_t*)(in + 1);\n+  vint8mf2_t v2 = *(vint8mf2_t*)(in + 2);\n+  vint8mf2_t v3 = *(vint8mf2_t*)(in + 3);\n+  vint8mf2_t v4 = *(vint8mf2_t*)(in + 4);\n+  vint8mf2_t v5 = *(vint8mf2_t*)(in + 5);\n+  vint8mf2_t v6 = *(vint8mf2_t*)(in + 6);\n+  vint8mf2_t v7 = *(vint8mf2_t*)(in + 7);\n+  vint8mf2_t v8 = *(vint8mf2_t*)(in + 8);\n+  *(vint8mf2_t*)(out + 1) = v1;\n+  *(vint8mf2_t*)(out + 2) = v2;\n+  *(vint8mf2_t*)(out + 3) = v3;\n+  *(vint8mf2_t*)(out + 4) = v4;\n+  *(vint8mf2_t*)(out + 5) = v5;\n+  *(vint8mf2_t*)(out + 6) = v6;\n+  *(vint8mf2_t*)(out + 7) = v7;\n+  *(vint8mf2_t*)(out + 8) = v8;\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */"}, {"sha": "ed3862753aba99df8437b1ae5e217a400f6a62ee", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_single_block-3.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4433e075fc4ef06401c2255561ee6a508a49dcb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4433e075fc4ef06401c2255561ee6a508a49dcb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-3.c?ref=e4433e075fc4ef06401c2255561ee6a508a49dcb", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+/* Test insert-vsetvl PASS whether it's able to eliminate vsetvl for same vtype in VLMAX.  */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo1 (void * restrict in, void * restrict out)\n+{\n+  vuint8mf8_t v1 = *(vuint8mf8_t*)(in + 1);\n+  vuint8mf8_t v2 = *(vuint8mf8_t*)(in + 2);\n+  vuint8mf8_t v3 = *(vuint8mf8_t*)(in + 3);\n+  vuint8mf8_t v4 = *(vuint8mf8_t*)(in + 4);\n+  vuint8mf8_t v5 = *(vuint8mf8_t*)(in + 5);\n+  vuint8mf8_t v6 = *(vuint8mf8_t*)(in + 6);\n+  vuint8mf8_t v7 = *(vuint8mf8_t*)(in + 7);\n+  vuint8mf8_t v8 = *(vuint8mf8_t*)(in + 8);\n+  *(vuint8mf8_t*)(out + 1) = v1;\n+  *(vuint8mf8_t*)(out + 2) = v2;\n+  *(vuint8mf8_t*)(out + 3) = v3;\n+  *(vuint8mf8_t*)(out + 4) = v4;\n+  *(vuint8mf8_t*)(out + 5) = v5;\n+  *(vuint8mf8_t*)(out + 6) = v6;\n+  *(vuint8mf8_t*)(out + 7) = v7;\n+  *(vuint8mf8_t*)(out + 8) = v8;\n+}\n+\n+void foo2 (void * restrict in, void * restrict out)\n+{\n+  vuint8mf4_t v1 = *(vuint8mf4_t*)(in + 1);\n+  vuint8mf4_t v2 = *(vuint8mf4_t*)(in + 2);\n+  vuint8mf4_t v3 = *(vuint8mf4_t*)(in + 3);\n+  vuint8mf4_t v4 = *(vuint8mf4_t*)(in + 4);\n+  vuint8mf4_t v5 = *(vuint8mf4_t*)(in + 5);\n+  vuint8mf4_t v6 = *(vuint8mf4_t*)(in + 6);\n+  vuint8mf4_t v7 = *(vuint8mf4_t*)(in + 7);\n+  vuint8mf4_t v8 = *(vuint8mf4_t*)(in + 8);\n+  *(vuint8mf4_t*)(out + 1) = v1;\n+  *(vuint8mf4_t*)(out + 2) = v2;\n+  *(vuint8mf4_t*)(out + 3) = v3;\n+  *(vuint8mf4_t*)(out + 4) = v4;\n+  *(vuint8mf4_t*)(out + 5) = v5;\n+  *(vuint8mf4_t*)(out + 6) = v6;\n+  *(vuint8mf4_t*)(out + 7) = v7;\n+  *(vuint8mf4_t*)(out + 8) = v8;\n+}\n+\n+void foo3 (void * restrict in, void * restrict out)\n+{\n+  vuint8mf2_t v1 = *(vuint8mf2_t*)(in + 1);\n+  vuint8mf2_t v2 = *(vuint8mf2_t*)(in + 2);\n+  vuint8mf2_t v3 = *(vuint8mf2_t*)(in + 3);\n+  vuint8mf2_t v4 = *(vuint8mf2_t*)(in + 4);\n+  vuint8mf2_t v5 = *(vuint8mf2_t*)(in + 5);\n+  vuint8mf2_t v6 = *(vuint8mf2_t*)(in + 6);\n+  vuint8mf2_t v7 = *(vuint8mf2_t*)(in + 7);\n+  vuint8mf2_t v8 = *(vuint8mf2_t*)(in + 8);\n+  *(vuint8mf2_t*)(out + 1) = v1;\n+  *(vuint8mf2_t*)(out + 2) = v2;\n+  *(vuint8mf2_t*)(out + 3) = v3;\n+  *(vuint8mf2_t*)(out + 4) = v4;\n+  *(vuint8mf2_t*)(out + 5) = v5;\n+  *(vuint8mf2_t*)(out + 6) = v6;\n+  *(vuint8mf2_t*)(out + 7) = v7;\n+  *(vuint8mf2_t*)(out + 8) = v8;\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */"}, {"sha": "d8f1a0ba04e7cf3bc33fa79372ccea34fca6c747", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_single_block-4.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4433e075fc4ef06401c2255561ee6a508a49dcb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4433e075fc4ef06401c2255561ee6a508a49dcb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-4.c?ref=e4433e075fc4ef06401c2255561ee6a508a49dcb", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+/* Test insert-vsetvl PASS whether it's able to eliminate vsetvl for same vtype in VLMAX.  */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo2 (void * restrict in, void * restrict out)\n+{\n+  vint16mf4_t v1 = *(vint16mf4_t*)(in + 1);\n+  vint16mf4_t v2 = *(vint16mf4_t*)(in + 2);\n+  vint16mf4_t v3 = *(vint16mf4_t*)(in + 3);\n+  vint16mf4_t v4 = *(vint16mf4_t*)(in + 4);\n+  vint16mf4_t v5 = *(vint16mf4_t*)(in + 5);\n+  vint16mf4_t v6 = *(vint16mf4_t*)(in + 6);\n+  vint16mf4_t v7 = *(vint16mf4_t*)(in + 7);\n+  vint16mf4_t v8 = *(vint16mf4_t*)(in + 8);\n+  *(vint16mf4_t*)(out + 1) = v1;\n+  *(vint16mf4_t*)(out + 2) = v2;\n+  *(vint16mf4_t*)(out + 3) = v3;\n+  *(vint16mf4_t*)(out + 4) = v4;\n+  *(vint16mf4_t*)(out + 5) = v5;\n+  *(vint16mf4_t*)(out + 6) = v6;\n+  *(vint16mf4_t*)(out + 7) = v7;\n+  *(vint16mf4_t*)(out + 8) = v8;\n+}\n+\n+void foo3 (void * restrict in, void * restrict out)\n+{\n+  vint16mf2_t v1 = *(vint16mf2_t*)(in + 1);\n+  vint16mf2_t v2 = *(vint16mf2_t*)(in + 2);\n+  vint16mf2_t v3 = *(vint16mf2_t*)(in + 3);\n+  vint16mf2_t v4 = *(vint16mf2_t*)(in + 4);\n+  vint16mf2_t v5 = *(vint16mf2_t*)(in + 5);\n+  vint16mf2_t v6 = *(vint16mf2_t*)(in + 6);\n+  vint16mf2_t v7 = *(vint16mf2_t*)(in + 7);\n+  vint16mf2_t v8 = *(vint16mf2_t*)(in + 8);\n+  *(vint16mf2_t*)(out + 1) = v1;\n+  *(vint16mf2_t*)(out + 2) = v2;\n+  *(vint16mf2_t*)(out + 3) = v3;\n+  *(vint16mf2_t*)(out + 4) = v4;\n+  *(vint16mf2_t*)(out + 5) = v5;\n+  *(vint16mf2_t*)(out + 6) = v6;\n+  *(vint16mf2_t*)(out + 7) = v7;\n+  *(vint16mf2_t*)(out + 8) = v8;\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */"}, {"sha": "293c818729ed21fc7d7c8df4a560b05f9b8c64c7", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_single_block-5.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4433e075fc4ef06401c2255561ee6a508a49dcb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4433e075fc4ef06401c2255561ee6a508a49dcb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-5.c?ref=e4433e075fc4ef06401c2255561ee6a508a49dcb", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+/* Test insert-vsetvl PASS whether it's able to eliminate vsetvl for same vtype in VLMAX.  */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo2 (void * restrict in, void * restrict out)\n+{\n+  vuint16mf4_t v1 = *(vuint16mf4_t*)(in + 1);\n+  vuint16mf4_t v2 = *(vuint16mf4_t*)(in + 2);\n+  vuint16mf4_t v3 = *(vuint16mf4_t*)(in + 3);\n+  vuint16mf4_t v4 = *(vuint16mf4_t*)(in + 4);\n+  vuint16mf4_t v5 = *(vuint16mf4_t*)(in + 5);\n+  vuint16mf4_t v6 = *(vuint16mf4_t*)(in + 6);\n+  vuint16mf4_t v7 = *(vuint16mf4_t*)(in + 7);\n+  vuint16mf4_t v8 = *(vuint16mf4_t*)(in + 8);\n+  *(vuint16mf4_t*)(out + 1) = v1;\n+  *(vuint16mf4_t*)(out + 2) = v2;\n+  *(vuint16mf4_t*)(out + 3) = v3;\n+  *(vuint16mf4_t*)(out + 4) = v4;\n+  *(vuint16mf4_t*)(out + 5) = v5;\n+  *(vuint16mf4_t*)(out + 6) = v6;\n+  *(vuint16mf4_t*)(out + 7) = v7;\n+  *(vuint16mf4_t*)(out + 8) = v8;\n+}\n+\n+void foo3 (void * restrict in, void * restrict out)\n+{\n+  vuint16mf2_t v1 = *(vuint16mf2_t*)(in + 1);\n+  vuint16mf2_t v2 = *(vuint16mf2_t*)(in + 2);\n+  vuint16mf2_t v3 = *(vuint16mf2_t*)(in + 3);\n+  vuint16mf2_t v4 = *(vuint16mf2_t*)(in + 4);\n+  vuint16mf2_t v5 = *(vuint16mf2_t*)(in + 5);\n+  vuint16mf2_t v6 = *(vuint16mf2_t*)(in + 6);\n+  vuint16mf2_t v7 = *(vuint16mf2_t*)(in + 7);\n+  vuint16mf2_t v8 = *(vuint16mf2_t*)(in + 8);\n+  *(vuint16mf2_t*)(out + 1) = v1;\n+  *(vuint16mf2_t*)(out + 2) = v2;\n+  *(vuint16mf2_t*)(out + 3) = v3;\n+  *(vuint16mf2_t*)(out + 4) = v4;\n+  *(vuint16mf2_t*)(out + 5) = v5;\n+  *(vuint16mf2_t*)(out + 6) = v6;\n+  *(vuint16mf2_t*)(out + 7) = v7;\n+  *(vuint16mf2_t*)(out + 8) = v8;\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */"}, {"sha": "b0473708439dc95f101b7a008fe5099a201c4233", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_single_block-6.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4433e075fc4ef06401c2255561ee6a508a49dcb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4433e075fc4ef06401c2255561ee6a508a49dcb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-6.c?ref=e4433e075fc4ef06401c2255561ee6a508a49dcb", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+/* Test insert-vsetvl PASS whether it's able to eliminate vsetvl for same vtype in VLMAX.  */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo3 (void * restrict in, void * restrict out)\n+{\n+  vint32mf2_t v1 = *(vint32mf2_t*)(in + 1);\n+  vint32mf2_t v2 = *(vint32mf2_t*)(in + 2);\n+  vint32mf2_t v3 = *(vint32mf2_t*)(in + 3);\n+  vint32mf2_t v4 = *(vint32mf2_t*)(in + 4);\n+  vint32mf2_t v5 = *(vint32mf2_t*)(in + 5);\n+  vint32mf2_t v6 = *(vint32mf2_t*)(in + 6);\n+  vint32mf2_t v7 = *(vint32mf2_t*)(in + 7);\n+  vint32mf2_t v8 = *(vint32mf2_t*)(in + 8);\n+  *(vint32mf2_t*)(out + 1) = v1;\n+  *(vint32mf2_t*)(out + 2) = v2;\n+  *(vint32mf2_t*)(out + 3) = v3;\n+  *(vint32mf2_t*)(out + 4) = v4;\n+  *(vint32mf2_t*)(out + 5) = v5;\n+  *(vint32mf2_t*)(out + 6) = v6;\n+  *(vint32mf2_t*)(out + 7) = v7;\n+  *(vint32mf2_t*)(out + 8) = v8;\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */"}, {"sha": "04d1930ee3e983a5e85e73720a4fa412fa681f12", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_single_block-7.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4433e075fc4ef06401c2255561ee6a508a49dcb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4433e075fc4ef06401c2255561ee6a508a49dcb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-7.c?ref=e4433e075fc4ef06401c2255561ee6a508a49dcb", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+/* Test insert-vsetvl PASS whether it's able to eliminate vsetvl for same vtype in VLMAX.  */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo3 (void * restrict in, void * restrict out)\n+{\n+  vuint32mf2_t v1 = *(vuint32mf2_t*)(in + 1);\n+  vuint32mf2_t v2 = *(vuint32mf2_t*)(in + 2);\n+  vuint32mf2_t v3 = *(vuint32mf2_t*)(in + 3);\n+  vuint32mf2_t v4 = *(vuint32mf2_t*)(in + 4);\n+  vuint32mf2_t v5 = *(vuint32mf2_t*)(in + 5);\n+  vuint32mf2_t v6 = *(vuint32mf2_t*)(in + 6);\n+  vuint32mf2_t v7 = *(vuint32mf2_t*)(in + 7);\n+  vuint32mf2_t v8 = *(vuint32mf2_t*)(in + 8);\n+  *(vuint32mf2_t*)(out + 1) = v1;\n+  *(vuint32mf2_t*)(out + 2) = v2;\n+  *(vuint32mf2_t*)(out + 3) = v3;\n+  *(vuint32mf2_t*)(out + 4) = v4;\n+  *(vuint32mf2_t*)(out + 5) = v5;\n+  *(vuint32mf2_t*)(out + 6) = v6;\n+  *(vuint32mf2_t*)(out + 7) = v7;\n+  *(vuint32mf2_t*)(out + 8) = v8;\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */"}, {"sha": "abfbc1b3b78d6bd61cbdaaa49a7df0b8cc4c7653", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_single_block-8.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4433e075fc4ef06401c2255561ee6a508a49dcb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4433e075fc4ef06401c2255561ee6a508a49dcb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-8.c?ref=e4433e075fc4ef06401c2255561ee6a508a49dcb", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+/* Test insert-vsetvl PASS whether it's able to eliminate vsetvl for same vtype in VLMAX.  */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo3 (void * restrict in, void * restrict out)\n+{\n+  vfloat32mf2_t v1 = *(vfloat32mf2_t*)(in + 1);\n+  vfloat32mf2_t v2 = *(vfloat32mf2_t*)(in + 2);\n+  vfloat32mf2_t v3 = *(vfloat32mf2_t*)(in + 3);\n+  vfloat32mf2_t v4 = *(vfloat32mf2_t*)(in + 4);\n+  vfloat32mf2_t v5 = *(vfloat32mf2_t*)(in + 5);\n+  vfloat32mf2_t v6 = *(vfloat32mf2_t*)(in + 6);\n+  vfloat32mf2_t v7 = *(vfloat32mf2_t*)(in + 7);\n+  vfloat32mf2_t v8 = *(vfloat32mf2_t*)(in + 8);\n+  *(vfloat32mf2_t*)(out + 1) = v1;\n+  *(vfloat32mf2_t*)(out + 2) = v2;\n+  *(vfloat32mf2_t*)(out + 3) = v3;\n+  *(vfloat32mf2_t*)(out + 4) = v4;\n+  *(vfloat32mf2_t*)(out + 5) = v5;\n+  *(vfloat32mf2_t*)(out + 6) = v6;\n+  *(vfloat32mf2_t*)(out + 7) = v7;\n+  *(vfloat32mf2_t*)(out + 8) = v8;\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */"}, {"sha": "6528c113a75d0f47e1dc5c4ef29c440d910586bb", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_single_block-9.c", "status": "added", "additions": 147, "deletions": 0, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4433e075fc4ef06401c2255561ee6a508a49dcb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4433e075fc4ef06401c2255561ee6a508a49dcb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_block-9.c?ref=e4433e075fc4ef06401c2255561ee6a508a49dcb", "patch": "@@ -0,0 +1,147 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f1 (void * restrict in, void * restrict out)\n+{\n+  vint8mf8_t v1 = *(vint8mf8_t*)(in + 1);\n+  vint16mf4_t v2;\n+  *(vint8mf8_t*)(out + 1) = v1;\n+  *(vint16mf4_t*)(out + 2) = v2;\n+}\n+\n+void f2 (void * restrict in, void * restrict out)\n+{\n+  vint8mf8_t v1 = *(vint8mf8_t*)(in + 1);\n+  vint32mf2_t v2;\n+  *(vint8mf8_t*)(out + 1) = v1;\n+  *(vint32mf2_t*)(out + 2) = v2;\n+}\n+\n+void f3 (void * restrict in, void * restrict out)\n+{\n+  vint8mf8_t v1 = *(vint8mf8_t*)(in + 1);\n+  vint64m1_t v2;\n+  *(vint8mf8_t*)(out + 1) = v1;\n+  *(vint64m1_t*)(out + 2) = v2;\n+}\n+\n+void f4 (void * restrict in, void * restrict out)\n+{\n+  vint8mf4_t v1 = *(vint8mf4_t*)(in + 1);\n+  vint16mf2_t v2;\n+  *(vint8mf4_t*)(out + 1) = v1;\n+  *(vint16mf2_t*)(out + 2) = v2;\n+}\n+\n+void f5 (void * restrict in, void * restrict out)\n+{\n+  vint8mf4_t v1 = *(vint8mf4_t*)(in + 1);\n+  vint32m1_t v2;\n+  *(vint8mf4_t*)(out + 1) = v1;\n+  *(vint32m1_t*)(out + 2) = v2;\n+}\n+\n+void f6 (void * restrict in, void * restrict out)\n+{\n+  vint8mf4_t v1 = *(vint8mf4_t*)(in + 1);\n+  vint64m2_t v2;\n+  *(vint8mf4_t*)(out + 1) = v1;\n+  *(vint64m2_t*)(out + 2) = v2;\n+}\n+\n+void f7 (void * restrict in, void * restrict out)\n+{\n+  vint8mf2_t v1 = *(vint8mf2_t*)(in + 1);\n+  vint16m1_t v2;\n+  *(vint8mf2_t*)(out + 1) = v1;\n+  *(vint16m1_t*)(out + 2) = v2;\n+}\n+\n+void f8 (void * restrict in, void * restrict out)\n+{\n+  vint8mf2_t v1 = *(vint8mf2_t*)(in + 1);\n+  vint32m2_t v2;\n+  *(vint8mf2_t*)(out + 1) = v1;\n+  *(vint32m2_t*)(out + 2) = v2;\n+}\n+\n+void f9 (void * restrict in, void * restrict out)\n+{\n+  vint8mf2_t v1 = *(vint8mf2_t*)(in + 1);\n+  vint64m4_t v2;\n+  *(vint8mf2_t*)(out + 1) = v1;\n+  *(vint64m4_t*)(out + 2) = v2;\n+}\n+\n+void f10 (void * restrict in, void * restrict out)\n+{\n+  vint8m1_t v1 = *(vint8m1_t*)(in + 1);\n+  vint16m2_t v2;\n+  *(vint8m1_t*)(out + 1) = v1;\n+  *(vint16m2_t*)(out + 2) = v2;\n+}\n+\n+void f11 (void * restrict in, void * restrict out)\n+{\n+  vint8m1_t v1 = *(vint8m1_t*)(in + 1);\n+  vint32m4_t v2;\n+  *(vint8m1_t*)(out + 1) = v1;\n+  *(vint32m4_t*)(out + 2) = v2;\n+}\n+\n+void f12 (void * restrict in, void * restrict out)\n+{\n+  vint8m1_t v1 = *(vint8m1_t*)(in + 1);\n+  vint64m8_t v2;\n+  *(vint8m1_t*)(out + 1) = v1;\n+  *(vint64m8_t*)(out + 2) = v2;\n+}\n+\n+void f13 (void * restrict in, void * restrict out)\n+{\n+  vint8m2_t v1 = *(vint8m2_t*)(in + 1);\n+  vint16m4_t v2;\n+  *(vint8m2_t*)(out + 1) = v1;\n+  *(vint16m4_t*)(out + 2) = v2;\n+}\n+\n+void f14 (void * restrict in, void * restrict out)\n+{\n+  vint8m2_t v1 = *(vint8m2_t*)(in + 1);\n+  vint32m8_t v2;\n+  *(vint8m2_t*)(out + 1) = v1;\n+  *(vint32m8_t*)(out + 2) = v2;\n+}\n+\n+void f15 (void * restrict in, void * restrict out)\n+{\n+  vint8m4_t v1 = *(vint8m4_t*)(in + 1);\n+  vint16m8_t v2;\n+  *(vint8m4_t*)(out + 1) = v1;\n+  *(vint16m8_t*)(out + 2) = v2;\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" } } } } */\n+\n+/* { dg-final { scan-assembler-times {vsetvli} 15 { target { no-opts \"-O0\" } } } } */"}, {"sha": "09f87d19cf9bf33361be833282c9de64747891e1", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_single_vtype-1.c", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4433e075fc4ef06401c2255561ee6a508a49dcb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_vtype-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4433e075fc4ef06401c2255561ee6a508a49dcb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_vtype-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_vtype-1.c?ref=e4433e075fc4ef06401c2255561ee6a508a49dcb", "patch": "@@ -0,0 +1,86 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* Check vsetvl instruction is hoisted outside the loop, so it should\n+   stay before label.  */\n+\n+void foo1 (void * restrict in, void * restrict out, int n)\n+{\n+  for (int i = 0; i < n; i++)\n+    {\n+      vbool64_t v = *(vbool64_t*)(in + i);\n+      *(vbool64_t*)(out + i) = v;\n+    }\n+}\n+\n+void foo2 (void * restrict in, void * restrict out, int n)\n+{\n+  for (int i = 0; i < n; i++)\n+    {\n+      vbool32_t v = *(vbool32_t*)(in + i);\n+      *(vbool32_t*)(out + i) = v;\n+    }\n+}\n+\n+void foo3 (void * restrict in, void * restrict out, int n)\n+{\n+  for (int i = 0; i < n; i++)\n+    {\n+      vbool16_t v = *(vbool16_t*)(in + i);\n+      *(vbool16_t*)(out + i) = v;\n+    }\n+}\n+\n+void foo4 (void * restrict in, void * restrict out, int n)\n+{\n+  for (int i = 0; i < n; i++)\n+    {\n+      vbool8_t v = *(vbool8_t*)(in + i);\n+      *(vbool8_t*)(out + i) = v;\n+    }\n+}\n+\n+void foo5 (void * restrict in, void * restrict out, int n)\n+{\n+  for (int i = 0; i < n; i++)\n+    {\n+      vbool4_t v = *(vbool4_t*)(in + i);\n+      *(vbool4_t*)(out + i) = v;\n+    }\n+}\n+\n+void foo6 (void * restrict in, void * restrict out, int n)\n+{\n+  for (int i = 0; i < n; i++)\n+    {\n+      vbool2_t v = *(vbool2_t*)(in + i);\n+      *(vbool2_t*)(out + i) = v;\n+    }\n+}\n+\n+void foo7 (void * restrict in, void * restrict out, int n)\n+{\n+  for (int i = 0; i < n; i++)\n+    {\n+      vbool1_t v = *(vbool1_t*)(in + i);\n+      *(vbool1_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "48ac62495d06a4ec260f6f19a8ac4e195f6471f8", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_single_vtype-2.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4433e075fc4ef06401c2255561ee6a508a49dcb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_vtype-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4433e075fc4ef06401c2255561ee6a508a49dcb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_vtype-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_vtype-2.c?ref=e4433e075fc4ef06401c2255561ee6a508a49dcb", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* Check vsetvl instruction is hoisted outside the loop, so it should\n+   stay before label.  */\n+\n+void foo1 (void * restrict in, void * restrict out, int n)\n+{\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint8mf8_t v = *(vint8mf8_t*)(in + i);\n+      *(vint8mf8_t*)(out + i) = v;\n+    }\n+}\n+\n+void foo2 (void * restrict in, void * restrict out, int n)\n+{\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint8mf4_t v = *(vint8mf4_t*)(in + i);\n+      *(vint8mf4_t*)(out + i) = v;\n+    }\n+}\n+\n+void foo3 (void * restrict in, void * restrict out, int n)\n+{\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint8mf2_t v = *(vint8mf2_t*)(in + i);\n+      *(vint8mf2_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "43492800c9dff02150edea27a040b325ea4fec15", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_single_vtype-3.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4433e075fc4ef06401c2255561ee6a508a49dcb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_vtype-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4433e075fc4ef06401c2255561ee6a508a49dcb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_vtype-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_vtype-3.c?ref=e4433e075fc4ef06401c2255561ee6a508a49dcb", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* Check vsetvl instruction is hoisted outside the loop, so it should\n+   stay before label.  */\n+\n+void foo1 (void * restrict in, void * restrict out, int n)\n+{\n+  for (int i = 0; i < n; i++)\n+    {\n+      vuint8mf8_t v = *(vuint8mf8_t*)(in + i);\n+      *(vuint8mf8_t*)(out + i) = v;\n+    }\n+}\n+\n+void foo2 (void * restrict in, void * restrict out, int n)\n+{\n+  for (int i = 0; i < n; i++)\n+    {\n+      vuint8mf4_t v = *(vuint8mf4_t*)(in + i);\n+      *(vuint8mf4_t*)(out + i) = v;\n+    }\n+}\n+\n+void foo3 (void * restrict in, void * restrict out, int n)\n+{\n+  for (int i = 0; i < n; i++)\n+    {\n+      vuint8mf2_t v = *(vuint8mf2_t*)(in + i);\n+      *(vuint8mf2_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "08c06b6080613e1525910b8ca8b314e1cc524a22", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_single_vtype-4.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4433e075fc4ef06401c2255561ee6a508a49dcb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_vtype-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4433e075fc4ef06401c2255561ee6a508a49dcb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_vtype-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_vtype-4.c?ref=e4433e075fc4ef06401c2255561ee6a508a49dcb", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* Check vsetvl instruction is hoisted outside the loop, so it should\n+   stay before label.  */\n+\n+void foo2 (void * restrict in, void * restrict out, int n)\n+{\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint16mf4_t v = *(vint16mf4_t*)(in + i);\n+      *(vint16mf4_t*)(out + i) = v;\n+    }\n+}\n+\n+void foo3 (void * restrict in, void * restrict out, int n)\n+{\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint16mf2_t v = *(vint16mf2_t*)(in + i);\n+      *(vint16mf2_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "d3c71a03756cad8f74dfb89dac122df334e812ba", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_single_vtype-5.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4433e075fc4ef06401c2255561ee6a508a49dcb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_vtype-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4433e075fc4ef06401c2255561ee6a508a49dcb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_vtype-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_vtype-5.c?ref=e4433e075fc4ef06401c2255561ee6a508a49dcb", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* Check vsetvl instruction is hoisted outside the loop, so it should\n+   stay before label.  */\n+\n+void foo2 (void * restrict in, void * restrict out, int n)\n+{\n+  for (int i = 0; i < n; i++)\n+    {\n+      vuint16mf4_t v = *(vuint16mf4_t*)(in + i);\n+      *(vuint16mf4_t*)(out + i) = v;\n+    }\n+}\n+\n+void foo3 (void * restrict in, void * restrict out, int n)\n+{\n+  for (int i = 0; i < n; i++)\n+    {\n+      vuint16mf2_t v = *(vuint16mf2_t*)(in + i);\n+      *(vuint16mf2_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "5986265e9bb8ebac6eb5bf4ecddaea74857abbbd", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_single_vtype-6.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4433e075fc4ef06401c2255561ee6a508a49dcb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_vtype-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4433e075fc4ef06401c2255561ee6a508a49dcb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_vtype-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_vtype-6.c?ref=e4433e075fc4ef06401c2255561ee6a508a49dcb", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* Check vsetvl instruction is hoisted outside the loop, so it should\n+   stay before label.  */\n+\n+void foo2 (void * restrict in, void * restrict out, int n)\n+{\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint32mf2_t v = *(vint32mf2_t*)(in + i);\n+      *(vint32mf2_t*)(out + i) = v;\n+    }\n+}\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "61728cfe7062e96bffab4fd0a4df4cbc3a85009d", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_single_vtype-7.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4433e075fc4ef06401c2255561ee6a508a49dcb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_vtype-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4433e075fc4ef06401c2255561ee6a508a49dcb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_vtype-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_vtype-7.c?ref=e4433e075fc4ef06401c2255561ee6a508a49dcb", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* Check vsetvl instruction is hoisted outside the loop, so it should\n+   stay before label.  */\n+\n+void foo2 (void * restrict in, void * restrict out, int n)\n+{\n+  for (int i = 0; i < n; i++)\n+    {\n+      vuint32mf2_t v = *(vuint32mf2_t*)(in + i);\n+      *(vuint32mf2_t*)(out + i) = v;\n+    }\n+}\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "82ce35b5fbc011bb6547fe03acf18c946ed26b2a", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_single_vtype-8.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4433e075fc4ef06401c2255561ee6a508a49dcb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_vtype-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4433e075fc4ef06401c2255561ee6a508a49dcb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_vtype-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_single_vtype-8.c?ref=e4433e075fc4ef06401c2255561ee6a508a49dcb", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* Check vsetvl instruction is hoisted outside the loop, so it should\n+   stay before label.  */\n+\n+void foo2 (void * restrict in, void * restrict out, int n)\n+{\n+  for (int i = 0; i < n; i++)\n+    {\n+      vfloat32mf2_t v = *(vfloat32mf2_t*)(in + i);\n+      *(vfloat32mf2_t*)(out + i) = v;\n+    }\n+}\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}]}