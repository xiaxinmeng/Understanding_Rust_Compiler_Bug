{"sha": "f99ffaa350319dd28bca797ed54abf8617e866ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjk5ZmZhYTM1MDMxOWRkMjhiY2E3OTdlZDU0YWJmODYxN2U4NjZhZA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2012-11-02T12:10:36Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2012-11-02T12:10:36Z"}, "message": "cfg-flags.def (ABNORMAL_CALL): Fix comment.\n\n\t* cfg-flags.def (ABNORMAL_CALL): Fix comment.\n\t(EH): Likewise.\n\t(SIBCALL): Likewise.\n\t* cfgrtl.c (rtl_verify_flow_info_1): Adjust error messages.\n\tDeal with EDGE_SIBCALL and fix the EDGE_ABNORMAL check.\n\nFrom-SVN: r193094", "tree": {"sha": "a0393256909d5ee902af286748f2b0fbdf7d191d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0393256909d5ee902af286748f2b0fbdf7d191d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f99ffaa350319dd28bca797ed54abf8617e866ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f99ffaa350319dd28bca797ed54abf8617e866ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f99ffaa350319dd28bca797ed54abf8617e866ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f99ffaa350319dd28bca797ed54abf8617e866ad/comments", "author": null, "committer": null, "parents": [{"sha": "5bcb3b4d80d9d973acafe9d5a1c12d151b4b99fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bcb3b4d80d9d973acafe9d5a1c12d151b4b99fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bcb3b4d80d9d973acafe9d5a1c12d151b4b99fa"}], "stats": {"total": 59, "additions": 40, "deletions": 19}, "files": [{"sha": "f0a6a97f91e2c2647caa749b2ad187b419daa6e3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99ffaa350319dd28bca797ed54abf8617e866ad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99ffaa350319dd28bca797ed54abf8617e866ad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f99ffaa350319dd28bca797ed54abf8617e866ad", "patch": "@@ -1,3 +1,11 @@\n+2012-11-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* cfg-flags.def (ABNORMAL_CALL): Fix comment.\n+\t(EH): Likewise.\n+\t(SIBCALL): Likewise.\n+\t* cfgrtl.c (rtl_verify_flow_info_1): Adjust error messages.\n+\tDeal with EDGE_SIBCALL and fix the EDGE_ABNORMAL check.\n+\n 2012-11-02  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/55147"}, {"sha": "e9e2dd604e653400712a898a039608d4761d1bbb", "filename": "gcc/cfg-flags.def", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99ffaa350319dd28bca797ed54abf8617e866ad/gcc%2Fcfg-flags.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99ffaa350319dd28bca797ed54abf8617e866ad/gcc%2Fcfg-flags.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfg-flags.def?ref=f99ffaa350319dd28bca797ed54abf8617e866ad", "patch": "@@ -115,13 +115,14 @@ DEF_EDGE_FLAG(FALLTHRU, 0)\n DEF_EDGE_FLAG(ABNORMAL, 1)\n \n /* Edge out of a basic block that ends with a CALL_INSN with abnormal\n-   exit, like an exception, or a sibcall.\n+   exit, like an exception or a non-local goto.\n+   ABNORMAL_CALL edges also have ABNORMAL set.\n    This flag is only used for the RTL CFG.  */\n DEF_EDGE_FLAG(ABNORMAL_CALL, 2)\n \n /* Exception edge.  Exception handling edges represent possible control\n-   transfers from a trapping instruction to an exception handler.  EH\n-   edges also have EDGE_ABNORMAL set.  */\n+   transfers from a trapping instruction to an exception handler.\n+   EH edges also have ABNORMAL set for the RTL CFG.  */\n DEF_EDGE_FLAG(EH, 3)\n \n /* Never merge blocks via this edge.  This is used for exception handling,\n@@ -158,6 +159,7 @@ DEF_EDGE_FLAG(EXECUTABLE, 10)\n DEF_EDGE_FLAG(CROSSING, 11)\n \n /* Edge from a sibcall CALL_INSN to exit.\n+   SIBCALL edges also have ABNORMAL set.\n    This flag is only used for the RTL CFG.  */\n DEF_EDGE_FLAG(SIBCALL, 12)\n "}, {"sha": "1f601e51d03acd589ba31796bc124006b03e7302", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 27, "deletions": 16, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99ffaa350319dd28bca797ed54abf8617e866ad/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99ffaa350319dd28bca797ed54abf8617e866ad/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=f99ffaa350319dd28bca797ed54abf8617e866ad", "patch": "@@ -2095,7 +2095,8 @@ rtl_verify_flow_info_1 (void)\n   /* Now check the basic blocks (boundaries etc.) */\n   FOR_EACH_BB_REVERSE (bb)\n     {\n-      int n_fallthru = 0, n_eh = 0, n_call = 0, n_abnormal = 0, n_branch = 0;\n+      int n_fallthru = 0, n_branch = 0, n_abnormal_call = 0, n_sibcall = 0;\n+      int n_eh = 0, n_abnormal = 0;\n       edge e, fallthru = NULL;\n       rtx note;\n       edge_iterator ei;\n@@ -2132,13 +2133,13 @@ rtl_verify_flow_info_1 (void)\n \t\t}\n \t      if (e->flags & EDGE_FALLTHRU)\n \t\t{\n-\t\t  error (\"fallthru edge crosses section boundary (bb %i)\",\n+\t\t  error (\"fallthru edge crosses section boundary in bb %i\",\n \t\t\t e->src->index);\n \t\t  err = 1;\n \t\t}\n \t      if (e->flags & EDGE_EH)\n \t\t{\n-\t\t  error (\"EH edge crosses section boundary (bb %i)\",\n+\t\t  error (\"EH edge crosses section boundary in bb %i\",\n \t\t\t e->src->index);\n \t\t  err = 1;\n \t\t}\n@@ -2158,22 +2159,26 @@ rtl_verify_flow_info_1 (void)\n \t    n_branch++;\n \n \t  if (e->flags & EDGE_ABNORMAL_CALL)\n-\t    n_call++;\n+\t    n_abnormal_call++;\n+\n+\t  if (e->flags & EDGE_SIBCALL)\n+\t    n_sibcall++;\n \n \t  if (e->flags & EDGE_EH)\n \t    n_eh++;\n-\t  else if (e->flags & EDGE_ABNORMAL)\n+\n+\t  if (e->flags & EDGE_ABNORMAL)\n \t    n_abnormal++;\n \t}\n \n       if (n_eh && !find_reg_note (BB_END (bb), REG_EH_REGION, NULL_RTX))\n \t{\n-\t  error (\"missing REG_EH_REGION note in the end of bb %i\", bb->index);\n+\t  error (\"missing REG_EH_REGION note at the end of bb %i\", bb->index);\n \t  err = 1;\n \t}\n       if (n_eh > 1)\n \t{\n-\t  error (\"too many eh edges %i\", bb->index);\n+\t  error (\"too many exception handling edges in bb %i\", bb->index);\n \t  err = 1;\n \t}\n       if (n_branch\n@@ -2186,29 +2191,35 @@ rtl_verify_flow_info_1 (void)\n \t}\n       if (n_fallthru && any_uncondjump_p (BB_END (bb)))\n \t{\n-\t  error (\"fallthru edge after unconditional jump %i\", bb->index);\n+\t  error (\"fallthru edge after unconditional jump in bb %i\", bb->index);\n \t  err = 1;\n \t}\n       if (n_branch != 1 && any_uncondjump_p (BB_END (bb)))\n \t{\n-\t  error (\"wrong number of branch edges after unconditional jump %i\",\n-\t\t bb->index);\n+\t  error (\"wrong number of branch edges after unconditional jump\"\n+\t\t \" in bb %i\", bb->index);\n \t  err = 1;\n \t}\n       if (n_branch != 1 && any_condjump_p (BB_END (bb))\n \t  && JUMP_LABEL (BB_END (bb)) != BB_HEAD (fallthru->dest))\n \t{\n-\t  error (\"wrong amount of branch edges after conditional jump %i\",\n-\t\t bb->index);\n+\t  error (\"wrong amount of branch edges after conditional jump\"\n+\t\t \" in bb %i\", bb->index);\n+\t  err = 1;\n+\t}\n+      if (n_abnormal_call && !CALL_P (BB_END (bb)))\n+\t{\n+\t  error (\"abnormal call edges for non-call insn in bb %i\", bb->index);\n \t  err = 1;\n \t}\n-      if (n_call && !CALL_P (BB_END (bb)))\n+      if (n_sibcall && !CALL_P (BB_END (bb)))\n \t{\n-\t  error (\"call edges for non-call insn in bb %i\", bb->index);\n+\t  error (\"sibcall edges for non-call insn in bb %i\", bb->index);\n \t  err = 1;\n \t}\n-      if (n_abnormal\n-\t  && (!CALL_P (BB_END (bb)) && n_call != n_abnormal)\n+      if (n_abnormal > n_eh\n+\t  && !(CALL_P (BB_END (bb))\n+\t       && n_abnormal == n_abnormal_call + n_sibcall)\n \t  && (!JUMP_P (BB_END (bb))\n \t      || any_condjump_p (BB_END (bb))\n \t      || any_uncondjump_p (BB_END (bb))))"}]}