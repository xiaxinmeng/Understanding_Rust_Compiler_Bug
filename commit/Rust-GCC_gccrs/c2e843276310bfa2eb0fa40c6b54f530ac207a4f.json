{"sha": "c2e843276310bfa2eb0fa40c6b54f530ac207a4f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzJlODQzMjc2MzEwYmZhMmViMGZhNDBjNmI1NGY1MzBhYzIwN2E0Zg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2017-01-24T17:07:36Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2017-01-24T17:07:36Z"}, "message": "Add \"__RTL\" to cc1\n\ngcc/c-family/ChangeLog:\n\t* c-common.c (c_common_reswords): Add \"__RTL\".\n\t* c-common.h (enum rid): Add RID_RTL.\n\ngcc/c/ChangeLog:\n\t* c-parser.c: Include \"read-rtl-function.h\" and\n\t\"run-rtl-passes.h\".\n\t(c_parser_declaration_or_fndef): Rename \"gimple-pass-list\" in\n\tgrammar to gimple-or-rtl-pass-list.  Add rtl-function-definition\n\tproduction.  Update for renaming of field \"gimple_pass\" to\n\t\"gimple_or_rtl_pass\".  If __RTL was seen, call\n\tc_parser_parse_rtl_body.  Convert a timevar_push/pop pair\n\tto an auto_timevar, to cope with early exit.\n\t(c_parser_declspecs): Update RID_GIMPLE handling for renaming of\n\tfield \"gimple_pass\" to \"gimple_or_rtl_pass\", and for renaming of\n\tc_parser_gimple_pass_list to c_parser_gimple_or_rtl_pass_list.\n\tHandle RID_RTL.\n\t(c_parser_parse_rtl_body): New function.\n\t* c-tree.h (enum c_declspec_word): Add cdw_rtl.\n\t(struct c_declspecs): Rename field \"gimple_pass\" to\n\t\"gimple_or_rtl_pass\".  Add field \"rtl_p\".\n\t* gimple-parser.c (c_parser_gimple_pass_list): Rename to...\n\t(c_parser_gimple_or_rtl_pass_list): ...this, updating accordingly.\n\t* gimple-parser.h (c_parser_gimple_pass_list): Rename to...\n\t(c_parser_gimple_or_rtl_pass_list): ...this.\n\ngcc/ChangeLog:\n\t* cfg.c (original_copy_tables_initialized_p): New function.\n\t* cfg.h (original_copy_tables_initialized_p): New decl.\n\t* cfgrtl.c (relink_block_chain): Guard the call to\n\tfree_original_copy_tables with a call to\n\toriginal_copy_tables_initialized_p.\n\t* cgraph.h (symtab_node::native_rtl_p): New decl.\n\t* cgraphunit.c (symtab_node::native_rtl_p): New function.\n\t(symtab_node::needed_p): Don't assert for early assembly output\n\tfor __RTL functions.\n\t(cgraph_node::finalize_function): Set \"force_output\" for __RTL\n\tfunctions.\n\t(cgraph_node::analyze): Bail out early for __RTL functions.\n\t(analyze_functions): Update assertion to support __RTL functions.\n\t(cgraph_node::expand): Bail out early for __RTL functions.\n\t* final.c (rest_of_clean_state): Don't call delete_tree_ssa for\n\t__RTL functions.\n\t* function.h (struct function): Update comment for field\n\t\"pass_startwith\".\n\t* gimple-expr.c: Include \"tree-pass.h\".\n\t(gimple_has_body_p): Return false for __RTL functions.\n\t* Makefile.in (OBJS): Add run-rtl-passes.o.\n\t* pass_manager.h (gcc::pass_manager::get_rest_of_compilation): New\n\taccessor.\n\t(gcc::pass_manager::get_clean_slate): New accessor.\n\t* passes.c: Include \"insn-addr.h\".\n\t(should_skip_pass_p): Add logging.  Update logic for running\n\t\"expand\" to be compatible with both __GIMPLE and __RTL.  Guard\n\tproperty-provider override so it is only done for gimple passes.\n\tDon't skip dfinit.\n\t(skip_pass): New function.\n\t(execute_one_pass): Call skip_pass when skipping passes.\n\t* read-md.c (md_reader::read_char): Support filtering\n\tthe input to a subset of line numbers.\n\t(md_reader::md_reader): Initialize fields\n\tm_first_line and m_last_line.\n\t(md_reader::read_file_fragment): New function.\n\t* read-md.h (md_reader::read_file_fragment): New decl.\n\t(md_reader::m_first_line): New field.\n\t(md_reader::m_last_line): New field.\n\t* read-rtl-function.c (function_reader::create_function): Only\n\tcreate cfun if it doesn't already exist.  Set PROP_rtl on cfun's\n\tcurr_properties.  Set DECL_INITIAL to a dummy block.\n\t(read_rtl_function_body_from_file_range): New function.\n\t* read-rtl-function.h (read_rtl_function_body_from_file_range):\n\tNew decl.\n\t* run-rtl-passes.c: New file.\n\t* run-rtl-passes.h: New file.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/rtl/aarch64/asr_div1.c: New test case.\n\t* gcc.dg/rtl/aarch64/pr71779.c: New test case.\n\t* gcc.dg/rtl/rtl.exp: New file.\n\t* gcc.dg/rtl/test.c: New file.\n\t* gcc.dg/rtl/truncated-rtl-file.c: New test case.\n\t* gcc.dg/rtl/unknown-rtx-code.c: New test case.\n\t* gcc.dg/rtl/x86_64/dfinit.c: New test case.\n\t* gcc.dg/rtl/x86_64/different-structs.c: New test case.\n\t* gcc.dg/rtl/x86_64/final.c: New test case.\n\t* gcc.dg/rtl/x86_64/into-cfglayout.c: New test case.\n\t* gcc.dg/rtl/x86_64/ira.c: New test case.\n\t* gcc.dg/rtl/x86_64/pro_and_epilogue.c: New test case.\n\t* gcc.dg/rtl/x86_64/test-multiple-fns.c: New test case.\n\t* gcc.dg/rtl/x86_64/test-return-const.c.after-expand.c: New test case.\n\t* gcc.dg/rtl/x86_64/test-return-const.c.before-fwprop.c: New test case.\n\t* gcc.dg/rtl/x86_64/test-rtl.c: New test case.\n\t* gcc.dg/rtl/x86_64/test_1.h: New file.\n\t* gcc.dg/rtl/x86_64/times-two.c.after-expand.c: New test case.\n\t* gcc.dg/rtl/x86_64/times-two.c.before-df.c: New test case.\n\t* gcc.dg/rtl/x86_64/times-two.h: New file.\n\t* gcc.dg/rtl/x86_64/vregs.c: New test case.\n\nFrom-SVN: r244878", "tree": {"sha": "3de19fa9c6316e31a6092997031d1600b7d4bfcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3de19fa9c6316e31a6092997031d1600b7d4bfcc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2e843276310bfa2eb0fa40c6b54f530ac207a4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2e843276310bfa2eb0fa40c6b54f530ac207a4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2e843276310bfa2eb0fa40c6b54f530ac207a4f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "82b239054da5fcae11d01a055c277258cd73f235", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82b239054da5fcae11d01a055c277258cd73f235", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82b239054da5fcae11d01a055c277258cd73f235"}], "stats": {"total": 1997, "additions": 1954, "deletions": 43}, "files": [{"sha": "22eeef5b2a43b88baabc307c3a792e50a1d6deb1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c2e843276310bfa2eb0fa40c6b54f530ac207a4f", "patch": "@@ -1,3 +1,53 @@\n+2017-01-24  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* cfg.c (original_copy_tables_initialized_p): New function.\n+\t* cfg.h (original_copy_tables_initialized_p): New decl.\n+\t* cfgrtl.c (relink_block_chain): Guard the call to\n+\tfree_original_copy_tables with a call to\n+\toriginal_copy_tables_initialized_p.\n+\t* cgraph.h (symtab_node::native_rtl_p): New decl.\n+\t* cgraphunit.c (symtab_node::native_rtl_p): New function.\n+\t(symtab_node::needed_p): Don't assert for early assembly output\n+\tfor __RTL functions.\n+\t(cgraph_node::finalize_function): Set \"force_output\" for __RTL\n+\tfunctions.\n+\t(cgraph_node::analyze): Bail out early for __RTL functions.\n+\t(analyze_functions): Update assertion to support __RTL functions.\n+\t(cgraph_node::expand): Bail out early for __RTL functions.\n+\t* final.c (rest_of_clean_state): Don't call delete_tree_ssa for\n+\t__RTL functions.\n+\t* function.h (struct function): Update comment for field\n+\t\"pass_startwith\".\n+\t* gimple-expr.c: Include \"tree-pass.h\".\n+\t(gimple_has_body_p): Return false for __RTL functions.\n+\t* Makefile.in (OBJS): Add run-rtl-passes.o.\n+\t* pass_manager.h (gcc::pass_manager::get_rest_of_compilation): New\n+\taccessor.\n+\t(gcc::pass_manager::get_clean_slate): New accessor.\n+\t* passes.c: Include \"insn-addr.h\".\n+\t(should_skip_pass_p): Add logging.  Update logic for running\n+\t\"expand\" to be compatible with both __GIMPLE and __RTL.  Guard\n+\tproperty-provider override so it is only done for gimple passes.\n+\tDon't skip dfinit.\n+\t(skip_pass): New function.\n+\t(execute_one_pass): Call skip_pass when skipping passes.\n+\t* read-md.c (md_reader::read_char): Support filtering\n+\tthe input to a subset of line numbers.\n+\t(md_reader::md_reader): Initialize fields\n+\tm_first_line and m_last_line.\n+\t(md_reader::read_file_fragment): New function.\n+\t* read-md.h (md_reader::read_file_fragment): New decl.\n+\t(md_reader::m_first_line): New field.\n+\t(md_reader::m_last_line): New field.\n+\t* read-rtl-function.c (function_reader::create_function): Only\n+\tcreate cfun if it doesn't already exist.  Set PROP_rtl on cfun's\n+\tcurr_properties.  Set DECL_INITIAL to a dummy block.\n+\t(read_rtl_function_body_from_file_range): New function.\n+\t* read-rtl-function.h (read_rtl_function_body_from_file_range):\n+\tNew decl.\n+\t* run-rtl-passes.c: New file.\n+\t* run-rtl-passes.h: New file.\n+\n 2017-01-24 Jeff Law  <law@redhat.com>\n \n \t* config/microblaze/microblaze.h (ASM_FORMAT_PRIVATE_NAME): Increase"}, {"sha": "821584a170312f358663cd2cd817bdecf50f5318", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=c2e843276310bfa2eb0fa40c6b54f530ac207a4f", "patch": "@@ -1433,6 +1433,7 @@ OBJS = \\\n \trtlhash.o \\\n \trtlanal.o \\\n \trtlhooks.o \\\n+\trun-rtl-passes.o \\\n \tsbitmap.o \\\n \tsched-deps.o \\\n \tsched-ebb.o \\"}, {"sha": "c9fe802d7e70a505d3e3e6a7331d4c2dd28a1989", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=c2e843276310bfa2eb0fa40c6b54f530ac207a4f", "patch": "@@ -1,3 +1,8 @@\n+2017-01-24  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* c-common.c (c_common_reswords): Add \"__RTL\".\n+\t* c-common.h (enum rid): Add RID_RTL.\n+\n 2017-01-20  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/64279"}, {"sha": "62b762bd388b9548acd642e73622213f4e0de265", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=c2e843276310bfa2eb0fa40c6b54f530ac207a4f", "patch": "@@ -437,6 +437,7 @@ const struct c_common_resword c_common_reswords[] =\n   { \"__volatile__\",\tRID_VOLATILE,\t0 },\n   { \"__GIMPLE\",\t\tRID_GIMPLE,\tD_CONLY },\n   { \"__PHI\",\t\tRID_PHI,\tD_CONLY },\n+  { \"__RTL\",\t\tRID_RTL,\tD_CONLY },\n   { \"alignas\",\t\tRID_ALIGNAS,\tD_CXXONLY | D_CXX11 | D_CXXWARN },\n   { \"alignof\",\t\tRID_ALIGNOF,\tD_CXXONLY | D_CXX11 | D_CXXWARN },\n   { \"asm\",\t\tRID_ASM,\tD_ASM },"}, {"sha": "9c288096cb4a37a9b7e5de5988e8d7e16ec0da9e", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=c2e843276310bfa2eb0fa40c6b54f530ac207a4f", "patch": "@@ -124,6 +124,9 @@ enum rid\n   /* \"__PHI\", for parsing PHI function in GIMPLE FE.  */\n   RID_PHI,\n \n+  /* \"__RTL\", for the RTL-parsing extension to the C frontend.  */\n+  RID_RTL,\n+\n   /* C11 */\n   RID_ALIGNAS, RID_GENERIC,\n "}, {"sha": "b17c179616d620cdff13df1cf324648575f613f1", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=c2e843276310bfa2eb0fa40c6b54f530ac207a4f", "patch": "@@ -1,3 +1,26 @@\n+2017-01-24  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* c-parser.c: Include \"read-rtl-function.h\" and\n+\t\"run-rtl-passes.h\".\n+\t(c_parser_declaration_or_fndef): Rename \"gimple-pass-list\" in\n+\tgrammar to gimple-or-rtl-pass-list.  Add rtl-function-definition\n+\tproduction.  Update for renaming of field \"gimple_pass\" to\n+\t\"gimple_or_rtl_pass\".  If __RTL was seen, call\n+\tc_parser_parse_rtl_body.  Convert a timevar_push/pop pair\n+\tto an auto_timevar, to cope with early exit.\n+\t(c_parser_declspecs): Update RID_GIMPLE handling for renaming of\n+\tfield \"gimple_pass\" to \"gimple_or_rtl_pass\", and for renaming of\n+\tc_parser_gimple_pass_list to c_parser_gimple_or_rtl_pass_list.\n+\tHandle RID_RTL.\n+\t(c_parser_parse_rtl_body): New function.\n+\t* c-tree.h (enum c_declspec_word): Add cdw_rtl.\n+\t(struct c_declspecs): Rename field \"gimple_pass\" to\n+\t\"gimple_or_rtl_pass\".  Add field \"rtl_p\".\n+\t* gimple-parser.c (c_parser_gimple_pass_list): Rename to...\n+\t(c_parser_gimple_or_rtl_pass_list): ...this, updating accordingly.\n+\t* gimple-parser.h (c_parser_gimple_pass_list): Rename to...\n+\t(c_parser_gimple_or_rtl_pass_list): ...this.\n+\n 2017-01-20  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/64279"}, {"sha": "5c152ab28b0c623b1b4cf2f21b2fb61e64f3db87", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 104, "deletions": 5, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=c2e843276310bfa2eb0fa40c6b54f530ac207a4f", "patch": "@@ -62,6 +62,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gcc-rich-location.h\"\n #include \"c-parser.h\"\n #include \"gimple-parser.h\"\n+#include \"read-rtl-function.h\"\n+#include \"run-rtl-passes.h\"\n \n /* We need to walk over decls with incomplete struct/union/enum types\n    after parsing the whole translation unit.\n@@ -1311,6 +1313,8 @@ static tree c_parser_array_notation (location_t, c_parser *, tree, tree);\n static tree c_parser_cilk_clause_vectorlength (c_parser *, tree, bool);\n static void c_parser_cilk_grainsize (c_parser *, bool *);\n \n+static void c_parser_parse_rtl_body (c_parser *parser, char *start_with_pass);\n+\n /* Parse a translation unit (C90 6.7, C99 6.9).\n \n    translation-unit:\n@@ -1547,7 +1551,11 @@ static void c_finish_oacc_routine (struct oacc_routine_data *, tree, bool);\n    GIMPLE:\n \n    gimple-function-definition:\n-     declaration-specifiers[opt] __GIMPLE (gimple-pass-list) declarator\n+     declaration-specifiers[opt] __GIMPLE (gimple-or-rtl-pass-list) declarator\n+       declaration-list[opt] compound-statement\n+\n+   rtl-function-definition:\n+     declaration-specifiers[opt] __RTL (gimple-or-rtl-pass-list) declarator\n        declaration-list[opt] compound-statement  */\n \n static void\n@@ -2045,7 +2053,7 @@ c_parser_declaration_or_fndef (c_parser *parser, bool fndef_ok,\n         tv = TV_PARSE_INLINE;\n       else\n         tv = TV_PARSE_FUNC;\n-      timevar_push (tv);\n+      auto_timevar at (g_timer, tv);\n \n       /* Parse old-style parameter declarations.  ??? Attributes are\n \t not allowed to start declaration specifiers here because of a\n@@ -2077,12 +2085,28 @@ c_parser_declaration_or_fndef (c_parser *parser, bool fndef_ok,\n          function body as GIMPLE.  */\n       if (specs->gimple_p)\n \t{\n-\t  cfun->pass_startwith = specs->gimple_pass;\n+\t  cfun->pass_startwith = specs->gimple_or_rtl_pass;\n \t  bool saved = in_late_binary_op;\n \t  in_late_binary_op = true;\n \t  c_parser_parse_gimple_body (parser);\n \t  in_late_binary_op = saved;\n \t}\n+      /* Similarly, if it was marked with __RTL, use the RTL parser now,\n+\t consuming the function body.  */\n+      else if (specs->rtl_p)\n+\t{\n+\t  c_parser_parse_rtl_body (parser, specs->gimple_or_rtl_pass);\n+\n+\t  /* Normally, store_parm_decls sets next_is_function_body,\n+\t     anticipating a function body.  We need a push_scope/pop_scope\n+\t     pair to flush out this state, or subsequent function parsing\n+\t     will go wrong.  */\n+\t  push_scope ();\n+\t  pop_scope ();\n+\n+\t  finish_function ();\n+\t  return;\n+\t}\n       else\n \t{\n \t  fnbody = c_parser_compound_statement (parser);\n@@ -2113,7 +2137,6 @@ c_parser_declaration_or_fndef (c_parser *parser, bool fndef_ok,\n       if (specs->gimple_p)\n \tDECL_SAVED_TREE (fndecl) = NULL_TREE;\n \n-      timevar_pop (tv);\n       break;\n     }\n }\n@@ -2605,7 +2628,13 @@ c_parser_declspecs (c_parser *parser, struct c_declspecs *specs,\n \t  c_parser_consume_token (parser);\n \t  specs->gimple_p = true;\n \t  specs->locations[cdw_gimple] = loc;\n-\t  specs->gimple_pass = c_parser_gimple_pass_list (parser);\n+\t  specs->gimple_or_rtl_pass = c_parser_gimple_or_rtl_pass_list (parser);\n+\t  break;\n+\tcase RID_RTL:\n+\t  c_parser_consume_token (parser);\n+\t  specs->rtl_p = true;\n+\t  specs->locations[cdw_rtl] = loc;\n+\t  specs->gimple_or_rtl_pass = c_parser_gimple_or_rtl_pass_list (parser);\n \t  break;\n \tdefault:\n \t  goto out;\n@@ -18296,4 +18325,74 @@ c_parser_array_notation (location_t loc, c_parser *parser, tree initial_index,\n   return value_tree;\n }\n \n+/* Parse the body of a function declaration marked with \"__RTL\".\n+\n+   The RTL parser works on the level of characters read from a\n+   FILE *, whereas c_parser works at the level of tokens.\n+   Square this circle by consuming all of the tokens up to and\n+   including the closing brace, recording the start/end of the RTL\n+   fragment, and reopening the file and re-reading the relevant\n+   lines within the RTL parser.\n+\n+   This requires the opening and closing braces of the C function\n+   to be on separate lines from the RTL they wrap.\n+\n+   Take ownership of START_WITH_PASS, if non-NULL.  */\n+\n+void\n+c_parser_parse_rtl_body (c_parser *parser, char *start_with_pass)\n+{\n+  if (!c_parser_require (parser, CPP_OPEN_BRACE, \"expected %<{%>\"))\n+    {\n+      free (start_with_pass);\n+      return;\n+    }\n+\n+  location_t start_loc = c_parser_peek_token (parser)->location;\n+\n+  /* Consume all tokens, up to the closing brace, handling\n+     matching pairs of braces in the rtl dump.  */\n+  int num_open_braces = 1;\n+  while (1)\n+    {\n+      switch (c_parser_peek_token (parser)->type)\n+\t{\n+\tcase CPP_OPEN_BRACE:\n+\t  num_open_braces++;\n+\t  break;\n+\tcase CPP_CLOSE_BRACE:\n+\t  if (--num_open_braces == 0)\n+\t    goto found_closing_brace;\n+\t  break;\n+\tcase CPP_EOF:\n+\t  error_at (start_loc, \"no closing brace\");\n+\t  free (start_with_pass);\n+\t  return;\n+\tdefault:\n+\t  break;\n+\t}\n+      c_parser_consume_token (parser);\n+    }\n+\n+ found_closing_brace:\n+  /* At the closing brace; record its location.  */\n+  location_t end_loc = c_parser_peek_token (parser)->location;\n+\n+  /* Consume the closing brace.  */\n+  c_parser_consume_token (parser);\n+\n+  /* Invoke the RTL parser.  */\n+  if (!read_rtl_function_body_from_file_range (start_loc, end_loc))\n+    {\n+      free (start_with_pass);\n+      return;\n+    }\n+\n+ /*  If a pass name was provided for START_WITH_PASS, run the backend\n+     accordingly now, on the cfun created above, transferring\n+     ownership of START_WITH_PASS.  */\n+  if (start_with_pass)\n+    run_rtl_passes (start_with_pass);\n+}\n+\n #include \"gt-c-c-parser.h\""}, {"sha": "13e40e6d55dba55bd61021977d484cc3053dff41", "filename": "gcc/c/c-tree.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Fc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Fc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-tree.h?ref=c2e843276310bfa2eb0fa40c6b54f530ac207a4f", "patch": "@@ -268,6 +268,7 @@ enum c_declspec_word {\n   cdw_alignas,\n   cdw_address_space,\n   cdw_gimple,\n+  cdw_rtl,\n   cdw_number_of_elements /* This one must always be the last\n \t\t\t    enumerator.  */\n };\n@@ -291,8 +292,8 @@ struct c_declspecs {\n      NULL; attributes (possibly from multiple lists) will be passed\n      separately.  */\n   tree attrs;\n-  /* The pass to start compiling a __GIMPLE function with.  */\n-  char *gimple_pass;\n+  /* The pass to start compiling a __GIMPLE or __RTL function with.  */\n+  char *gimple_or_rtl_pass;\n   /* The base-2 log of the greatest alignment required by an _Alignas\n      specifier, in bytes, or -1 if no such specifiers with nonzero\n      alignment.  */\n@@ -367,6 +368,8 @@ struct c_declspecs {\n   BOOL_BITFIELD alignas_p : 1;\n   /* Whether any __GIMPLE specifier was specified.  */\n   BOOL_BITFIELD gimple_p : 1;\n+  /* Whether any __RTL specifier was specified.  */\n+  BOOL_BITFIELD rtl_p : 1;\n   /* The address space that the declaration belongs to.  */\n   addr_space_t address_space;\n };"}, {"sha": "7feb6d09031309e95acbf3209a2c0563cf90c2d9", "filename": "gcc/c/gimple-parser.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Fc%2Fgimple-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Fc%2Fgimple-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fgimple-parser.c?ref=c2e843276310bfa2eb0fa40c6b54f530ac207a4f", "patch": "@@ -1118,18 +1118,18 @@ c_parser_gimple_label (c_parser *parser, gimple_seq *seq)\n   return;\n }\n \n-/* Parse gimple pass list.\n+/* Parse gimple/RTL pass list.\n \n-   gimple-pass-list:\n+   gimple-or-rtl-pass-list:\n      startwith(\"pass-name\")\n  */\n \n char *\n-c_parser_gimple_pass_list (c_parser *parser)\n+c_parser_gimple_or_rtl_pass_list (c_parser *parser)\n {\n   char *pass = NULL;\n \n-  /* Accept __GIMPLE.  */\n+  /* Accept __GIMPLE/__RTL.  */\n   if (c_parser_next_token_is_not (parser, CPP_OPEN_PAREN))\n     return NULL;\n   c_parser_consume_token (parser);"}, {"sha": "85cf13aa4c5a739bb712d3e198e7ba57036fbdfb", "filename": "gcc/c/gimple-parser.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Fc%2Fgimple-parser.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Fc%2Fgimple-parser.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fgimple-parser.h?ref=c2e843276310bfa2eb0fa40c6b54f530ac207a4f", "patch": "@@ -22,6 +22,6 @@ along with GCC; see the file COPYING3.  If not see\n \n /* Gimple parsing functions.  */\n extern void c_parser_parse_gimple_body (c_parser *);\n-extern char *c_parser_gimple_pass_list (c_parser *);\n+extern char *c_parser_gimple_or_rtl_pass_list (c_parser *);\n \n #endif"}, {"sha": "7a0e5bb16cb5f5e09315ad4636fdc1b5af0c6df7", "filename": "gcc/cfg.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Fcfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Fcfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfg.c?ref=c2e843276310bfa2eb0fa40c6b54f530ac207a4f", "patch": "@@ -1095,6 +1095,15 @@ free_original_copy_tables (void)\n   original_copy_bb_pool = NULL;\n }\n \n+/* Return true iff we have had a call to initialize_original_copy_tables\n+   without a corresponding call to free_original_copy_tables.  */\n+\n+bool\n+original_copy_tables_initialized_p (void)\n+{\n+  return original_copy_bb_pool != NULL;\n+}\n+\n /* Removes the value associated with OBJ from table TAB.  */\n \n static void"}, {"sha": "b44f1e11e35167295152682f5ff2417736f9ad07", "filename": "gcc/cfg.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Fcfg.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Fcfg.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfg.h?ref=c2e843276310bfa2eb0fa40c6b54f530ac207a4f", "patch": "@@ -110,6 +110,7 @@ extern void scale_bbs_frequencies_gcov_type (basic_block *, int, gcov_type,\n extern void initialize_original_copy_tables (void);\n extern void reset_original_copy_tables (void);\n extern void free_original_copy_tables (void);\n+extern bool original_copy_tables_initialized_p (void);\n extern void set_bb_original (basic_block, basic_block);\n extern basic_block get_bb_original (basic_block);\n extern void set_bb_copy (basic_block, basic_block);"}, {"sha": "cafa38d35b05263270ef52927ca63a6cdbfde603", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=c2e843276310bfa2eb0fa40c6b54f530ac207a4f", "patch": "@@ -3651,7 +3651,8 @@ relink_block_chain (bool stay_in_cfglayout_mode)\n   /* Maybe reset the original copy tables, they are not valid anymore\n      when we renumber the basic blocks in compact_blocks.  If we are\n      are going out of cfglayout mode, don't re-allocate the tables.  */\n-  free_original_copy_tables ();\n+  if (original_copy_tables_initialized_p ())\n+    free_original_copy_tables ();\n   if (stay_in_cfglayout_mode)\n     initialize_original_copy_tables ();\n "}, {"sha": "3889a3e1701bd2628dda754e6825205fb6a389c2", "filename": "gcc/cgraph.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=c2e843276310bfa2eb0fa40c6b54f530ac207a4f", "patch": "@@ -326,6 +326,10 @@ class GTY((desc (\"%h.type\"), tag (\"SYMTAB_SYMBOL\"),\n      configury. This function is used just during symbol creation.  */\n   bool needed_p (void);\n \n+  /* Return true if this symbol is a function from the C frontend specified\n+     directly in RTL form (with \"__RTL\").  */\n+  bool native_rtl_p () const;\n+\n   /* Return true when there are references to the node.  */\n   bool referred_to_p (bool include_self = true);\n "}, {"sha": "cc49c798515001cb792a07d7b7fe58df062543ca", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 38, "deletions": 3, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=c2e843276310bfa2eb0fa40c6b54f530ac207a4f", "patch": "@@ -217,6 +217,19 @@ static void handle_alias_pairs (void);\n /* Used for vtable lookup in thunk adjusting.  */\n static GTY (()) tree vtable_entry_type;\n \n+/* Return true if this symbol is a function from the C frontend specified\n+   directly in RTL form (with \"__RTL\").  */\n+\n+bool\n+symtab_node::native_rtl_p () const\n+{\n+  if (TREE_CODE (decl) != FUNCTION_DECL)\n+    return false;\n+  if (!DECL_STRUCT_FUNCTION (decl))\n+    return false;\n+  return DECL_STRUCT_FUNCTION (decl)->curr_properties & PROP_rtl;\n+}\n+\n /* Determine if symbol declaration is needed.  That is, visible to something\n    either outside this translation unit, something magic in the system\n    configury */\n@@ -225,8 +238,10 @@ symtab_node::needed_p (void)\n {\n   /* Double check that no one output the function into assembly file\n      early.  */\n-  gcc_checking_assert (!DECL_ASSEMBLER_NAME_SET_P (decl)\n-\t               || !TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (decl)));\n+  if (!native_rtl_p ())\n+      gcc_checking_assert\n+\t(!DECL_ASSEMBLER_NAME_SET_P (decl)\n+\t || !TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (decl)));\n \n   if (!definition)\n     return false;\n@@ -435,6 +450,14 @@ cgraph_node::finalize_function (tree decl, bool no_collect)\n       && !DECL_DISREGARD_INLINE_LIMITS (decl))\n     node->force_output = 1;\n \n+  /* __RTL functions were already output as soon as they were parsed (due\n+     to the large amount of global state in the backend).\n+     Mark such functions as \"force_output\" to reflect the fact that they\n+     will be in the asm file when considering the symbols they reference.\n+     The attempt to output them later on will bail out immediately.  */\n+  if (node->native_rtl_p ())\n+    node->force_output = 1;\n+\n   /* When not optimizing, also output the static functions. (see\n      PR24561), but don't do so for always_inline functions, functions\n      declared inline and nested functions.  These were optimized out\n@@ -568,6 +591,12 @@ cgraph_node::add_new_function (tree fndecl, bool lowered)\n void\n cgraph_node::analyze (void)\n {\n+  if (native_rtl_p ())\n+    {\n+      analyzed = true;\n+      return;\n+    }\n+\n   tree decl = this->decl;\n   location_t saved_loc = input_location;\n   input_location = DECL_SOURCE_LOCATION (decl);\n@@ -1226,7 +1255,8 @@ analyze_functions (bool first_time)\n \n \t  gcc_assert (!cnode->definition || cnode->thunk.thunk_p\n \t\t      || cnode->alias\n-\t\t      || gimple_has_body_p (decl));\n+\t\t      || gimple_has_body_p (decl)\n+\t\t      || cnode->native_rtl_p ());\n \t  gcc_assert (cnode->analyzed == cnode->definition);\n \t}\n       node->aux = NULL;\n@@ -1965,6 +1995,11 @@ cgraph_node::expand (void)\n   /* We ought to not compile any inline clones.  */\n   gcc_assert (!global.inlined_to);\n \n+  /* __RTL functions are compiled as soon as they are parsed, so don't\n+     do it again.  */\n+  if (native_rtl_p ())\n+    return;\n+\n   announce_function (decl);\n   process = 0;\n   gcc_assert (lowered);"}, {"sha": "24833815276530d744d83e8a20a7ba61b20717f3", "filename": "gcc/final.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=c2e843276310bfa2eb0fa40c6b54f530ac207a4f", "patch": "@@ -4699,7 +4699,8 @@ rest_of_clean_state (void)\n \n   free_bb_for_insn ();\n \n-  delete_tree_ssa (cfun);\n+  if (cfun->gimple_df)\n+    delete_tree_ssa (cfun);\n \n   /* We can reduce stack alignment on call site only when we are sure that\n      the function body just produced will be actually used in the final"}, {"sha": "0f34bcd612379788eb63d59ca2288d4b69001a50", "filename": "gcc/function.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=c2e843276310bfa2eb0fa40c6b54f530ac207a4f", "patch": "@@ -236,7 +236,7 @@ struct GTY(()) function {\n   /* The loops in this function.  */\n   struct loops *x_current_loops;\n \n-  /* Filled by the GIMPLE FE, pass to start compilation with.  */\n+  /* Filled by the GIMPLE and RTL FEs, pass to start compilation with.  */\n   char *pass_startwith;\n \n   /* The stack usage of this function.  */"}, {"sha": "2ee87c2c4908493467e6cb50db66ab9d5be562f4", "filename": "gcc/gimple-expr.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Fgimple-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Fgimple-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-expr.c?ref=c2e843276310bfa2eb0fa40c6b54f530ac207a4f", "patch": "@@ -34,6 +34,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"demangle.h\"\n #include \"hash-set.h\"\n #include \"rtl.h\"\n+#include \"tree-pass.h\"\n \n /* ----- Type related -----  */\n \n@@ -323,7 +324,7 @@ bool\n gimple_has_body_p (tree fndecl)\n {\n   struct function *fn = DECL_STRUCT_FUNCTION (fndecl);\n-  return (gimple_body (fndecl) || (fn && fn->cfg));\n+  return (gimple_body (fndecl) || (fn && fn->cfg && !(fn->curr_properties & PROP_rtl)));\n }\n \n /* Return a printable name for symbol DECL.  */"}, {"sha": "ae97cd411e216eec6f57749c911dbbf44b698778", "filename": "gcc/pass_manager.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Fpass_manager.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Fpass_manager.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpass_manager.h?ref=c2e843276310bfa2eb0fa40c6b54f530ac207a4f", "patch": "@@ -82,6 +82,12 @@ class pass_manager\n \n   opt_pass *get_pass_by_name (const char *name);\n \n+  opt_pass *get_rest_of_compilation () const\n+  {\n+    return pass_rest_of_compilation_1;\n+  }\n+  opt_pass *get_clean_slate () const { return pass_clean_state_1; }\n+\n public:\n   /* The root of the compilation pass tree, once constructed.  */\n   opt_pass *all_passes;"}, {"sha": "587c3be58c78867f8af3af9f8c571a562a6c1198", "filename": "gcc/passes.c", "status": "modified", "additions": 67, "deletions": 7, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=c2e843276310bfa2eb0fa40c6b54f530ac207a4f", "patch": "@@ -59,6 +59,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cfgrtl.h\"\n #include \"tree-ssa-live.h\"  /* For remove_unused_locals.  */\n #include \"tree-cfgcleanup.h\"\n+#include \"insn-addr.h\" /* for INSN_ADDRESSES_ALLOC.  */\n \n using namespace gcc;\n \n@@ -2315,26 +2316,82 @@ should_skip_pass_p (opt_pass *pass)\n   if (!cfun->pass_startwith)\n     return false;\n \n-  /* We can't skip the lowering phase yet -- ideally we'd\n-     drive that phase fully via properties.  */\n-  if (!(cfun->curr_properties & PROP_ssa))\n-    return false;\n+  /* For __GIMPLE functions, we have to at least start when we leave\n+     SSA.  Hence, we need to detect the \"expand\" pass, and stop skipping\n+     when we encounter it.  A cheap way to identify \"expand\" is it to\n+     detect the destruction of PROP_ssa.\n+     For __RTL functions, we invoke \"rest_of_compilation\" directly, which\n+     is after \"expand\", and hence we don't reach this conditional.  */\n+  if (pass->properties_destroyed & PROP_ssa)\n+    {\n+      if (!quiet_flag)\n+\tfprintf (stderr, \"starting anyway when leaving SSA: %s\\n\", pass->name);\n+      cfun->pass_startwith = NULL;\n+      return false;\n+    }\n \n   if (determine_pass_name_match (pass->name, cfun->pass_startwith))\n     {\n+      if (!quiet_flag)\n+\tfprintf (stderr, \"found starting pass: %s\\n\", pass->name);\n       cfun->pass_startwith = NULL;\n       return false;\n     }\n \n-  /* And also run any property provider.  */\n-  if (pass->properties_provided != 0)\n+  /* For GIMPLE passes, run any property provider (but continue skipping\n+     afterwards).\n+     We don't want to force running RTL passes that are property providers:\n+     \"expand\" is covered above, and the only pass other than \"expand\" that\n+     provides a property is \"into_cfglayout\" (PROP_cfglayout), which does\n+     too much for a dumped __RTL function.  */\n+  if (pass->type == GIMPLE_PASS\n+      && pass->properties_provided != 0)\n     return false;\n \n+  /* Don't skip df init; later RTL passes need it.  */\n+  if (strstr (pass->name, \"dfinit\") != NULL)\n+    return false;\n+\n+  if (!quiet_flag)\n+    fprintf (stderr, \"skipping pass: %s\\n\", pass->name);\n+\n   /* If we get here, then we have a \"startwith\" that we haven't seen yet;\n      skip the pass.  */\n   return true;\n }\n \n+/* Skip the given pass, for handling passes before \"startwith\"\n+   in __GIMPLE and__RTL-marked functions.\n+   In theory, this ought to be a no-op, but some of the RTL passes\n+   need additional processing here.  */\n+\n+static void\n+skip_pass (opt_pass *pass)\n+{\n+  /* Pass \"reload\" sets the global \"reload_completed\", and many\n+     things depend on this (e.g. instructions in .md files).  */\n+  if (strcmp (pass->name, \"reload\") == 0)\n+    reload_completed = 1;\n+\n+  /* The INSN_ADDRESSES vec is normally set up by\n+     shorten_branches; set it up for the benefit of passes that\n+     run after this.  */\n+  if (strcmp (pass->name, \"shorten\") == 0)\n+    INSN_ADDRESSES_ALLOC (get_max_uid ());\n+\n+  /* Update the cfg hooks as appropriate.  */\n+  if (strcmp (pass->name, \"into_cfglayout\") == 0)\n+    {\n+      cfg_layout_rtl_register_cfg_hooks ();\n+      cfun->curr_properties |= PROP_cfglayout;\n+    }\n+  if (strcmp (pass->name, \"outof_cfglayout\") == 0)\n+    {\n+      rtl_register_cfg_hooks ();\n+      cfun->curr_properties &= ~PROP_cfglayout;\n+    }\n+}\n+\n /* Execute PASS. */\n \n bool\n@@ -2375,7 +2432,10 @@ execute_one_pass (opt_pass *pass)\n     }\n \n   if (should_skip_pass_p (pass))\n-    return true;\n+    {\n+      skip_pass (pass);\n+      return true;\n+    }\n \n   /* Pass execution event trigger: useful to identify passes being\n      executed.  */"}, {"sha": "4036afa7a1cd34ca89a0bedc46bc4da36e2a06fb", "filename": "gcc/read-md.c", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Fread-md.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Fread-md.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fread-md.c?ref=c2e843276310bfa2eb0fa40c6b54f530ac207a4f", "patch": "@@ -411,6 +411,16 @@ md_reader::read_char (void)\n   else\n     m_read_md_colno++;\n \n+  /* If we're filtering lines, treat everything before the range of\n+     interest as a space, and as EOF for everything after.  */\n+  if (m_first_line && m_last_line)\n+    {\n+      if (m_read_md_lineno < m_first_line)\n+\treturn ' ';\n+      if (m_read_md_lineno > m_last_line)\n+\treturn EOF;\n+    }\n+\n   return ch;\n }\n \n@@ -991,7 +1001,9 @@ md_reader::md_reader (bool compact)\n   m_read_md_lineno (0),\n   m_read_md_colno (0),\n   m_first_dir_md_include (NULL),\n-  m_last_dir_md_include_ptr (&m_first_dir_md_include)\n+  m_last_dir_md_include_ptr (&m_first_dir_md_include),\n+  m_first_line (0),\n+  m_last_line (0)\n {\n   /* Set the global singleton pointer.  */\n   md_reader_ptr = this;\n@@ -1314,6 +1326,26 @@ md_reader::read_file (const char *filename)\n   return !have_error;\n }\n \n+/* Read FILENAME, filtering to just the given lines.  */\n+\n+bool\n+md_reader::read_file_fragment (const char *filename,\n+\t\t\t       int first_line,\n+\t\t\t       int last_line)\n+{\n+  m_read_md_filename = filename;\n+  m_read_md_file = fopen (m_read_md_filename, \"r\");\n+  if (m_read_md_file == 0)\n+    {\n+      perror (m_read_md_filename);\n+      return false;\n+    }\n+  m_first_line = first_line;\n+  m_last_line = last_line;\n+  handle_toplevel_file ();\n+  return !have_error;\n+}\n+\n /* class noop_reader : public md_reader */\n \n /* A dummy implementation which skips unknown directives.  */"}, {"sha": "fea70114603e671b84c2377e8834bdf0750150f5", "filename": "gcc/read-md.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Fread-md.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Fread-md.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fread-md.h?ref=c2e843276310bfa2eb0fa40c6b54f530ac207a4f", "patch": "@@ -111,6 +111,9 @@ class md_reader\n \n   bool read_md_files (int, const char **, bool (*) (const char *));\n   bool read_file (const char *filename);\n+  bool read_file_fragment (const char *filename,\n+\t\t\t   int first_line,\n+\t\t\t   int last_line);\n \n   /* A hook that handles a single .md-file directive, up to but not\n      including the closing ')'.  It takes two arguments: the file position\n@@ -245,6 +248,10 @@ class md_reader\n \n   /* A table of enum_type structures, hashed by name.  */\n   htab_t m_enum_types;\n+\n+  /* If non-zero, filter the input to just this subset of lines.  */\n+  int m_first_line;\n+  int m_last_line;\n };\n \n /* Global singleton; constrast with rtx_reader_ptr below.  */"}, {"sha": "bead85811e6b061ab0a2f366ff58ab2aca213688", "filename": "gcc/read-rtl-function.c", "status": "modified", "additions": 65, "deletions": 16, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Fread-rtl-function.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Fread-rtl-function.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fread-rtl-function.c?ref=c2e843276310bfa2eb0fa40c6b54f530ac207a4f", "patch": "@@ -475,22 +475,37 @@ function_reader::create_function ()\n   /* We start in cfgrtl mode, rather than cfglayout mode.  */\n   rtl_register_cfg_hooks ();\n \n-  /* Create cfun.  */\n-  tree fn_name = get_identifier (m_name ? m_name : \"test_1\");\n-  tree int_type = integer_type_node;\n-  tree return_type = int_type;\n-  tree arg_types[3] = {int_type, int_type, int_type};\n-  tree fn_type = build_function_type_array (return_type, 3, arg_types);\n-  tree fndecl = build_decl (UNKNOWN_LOCATION, FUNCTION_DECL, fn_name, fn_type);\n-  tree resdecl = build_decl (UNKNOWN_LOCATION, RESULT_DECL, NULL_TREE,\n-\t\t\t     return_type);\n-  DECL_ARTIFICIAL (resdecl) = 1;\n-  DECL_IGNORED_P (resdecl) = 1;\n-  DECL_RESULT (fndecl) = resdecl;\n-  allocate_struct_function (fndecl, false);\n-  /* This sets cfun.  */\n-\n-  current_function_decl = fndecl;\n+  /* When run from selftests or \"rtl1\", cfun is NULL.\n+     When run from \"cc1\" for a C function tagged with __RTL, cfun is the\n+     tagged function.  */\n+  if (!cfun)\n+    {\n+      tree fn_name = get_identifier (m_name ? m_name : \"test_1\");\n+      tree int_type = integer_type_node;\n+      tree return_type = int_type;\n+      tree arg_types[3] = {int_type, int_type, int_type};\n+      tree fn_type = build_function_type_array (return_type, 3, arg_types);\n+      tree fndecl = build_decl (UNKNOWN_LOCATION, FUNCTION_DECL, fn_name, fn_type);\n+      tree resdecl = build_decl (UNKNOWN_LOCATION, RESULT_DECL, NULL_TREE,\n+\t\t\t\t return_type);\n+      DECL_ARTIFICIAL (resdecl) = 1;\n+      DECL_IGNORED_P (resdecl) = 1;\n+      DECL_RESULT (fndecl) = resdecl;\n+      allocate_struct_function (fndecl, false);\n+      /* This sets cfun.  */\n+      current_function_decl = fndecl;\n+    }\n+\n+  gcc_assert (cfun);\n+  gcc_assert (current_function_decl);\n+  tree fndecl = current_function_decl;\n+\n+  /* Mark this function as being specified as __RTL.  */\n+  cfun->curr_properties |= PROP_rtl;\n+\n+  /* cc1 normally inits DECL_INITIAL (fndecl) to be error_mark_node.\n+     Create a dummy block for it.  */\n+  DECL_INITIAL (fndecl) = make_node (BLOCK);\n \n   cfun->curr_properties = (PROP_cfg | PROP_rtl);\n \n@@ -1582,6 +1597,40 @@ read_rtl_function_body (const char *path)\n   return true;\n }\n \n+/* Run the RTL dump parser on the range of lines between START_LOC and\n+   END_LOC (including those lines).  */\n+\n+bool\n+read_rtl_function_body_from_file_range (location_t start_loc,\n+\t\t\t\t\tlocation_t end_loc)\n+{\n+  expanded_location exploc_start = expand_location (start_loc);\n+  expanded_location exploc_end = expand_location (end_loc);\n+\n+  if (exploc_start.file != exploc_end.file)\n+    {\n+      error_at (end_loc, \"start/end of RTL fragment are in different files\");\n+      return false;\n+    }\n+  if (exploc_start.line >= exploc_end.line)\n+    {\n+      error_at (end_loc,\n+\t\t\"start of RTL fragment must be on an earlier line than end\");\n+      return false;\n+    }\n+\n+  initialize_rtl ();\n+  init_emit ();\n+  init_varasm_status ();\n+\n+  function_reader reader;\n+  if (!reader.read_file_fragment (exploc_start.file, exploc_start.line,\n+\t\t\t\t  exploc_end.line - 1))\n+    return false;\n+\n+  return true;\n+}\n+\n #if CHECKING_P\n \n namespace selftest {"}, {"sha": "10ceab85cffce5506c1c43cfe9f6a72d2eafe9cd", "filename": "gcc/read-rtl-function.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Fread-rtl-function.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Fread-rtl-function.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fread-rtl-function.h?ref=c2e843276310bfa2eb0fa40c6b54f530ac207a4f", "patch": "@@ -22,4 +22,7 @@ along with GCC; see the file COPYING3.  If not see\n \n extern bool read_rtl_function_body (const char *path);\n \n+extern bool read_rtl_function_body_from_file_range (location_t start_loc,\n+\t\t\t\t\t\t    location_t end_loc);\n+\n #endif /* GCC_READ_RTL_FUNCTION_H */"}, {"sha": "e1ac4bd0954f8ae0f65df7f8e7860e3e90a15526", "filename": "gcc/run-rtl-passes.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Frun-rtl-passes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Frun-rtl-passes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frun-rtl-passes.c?ref=c2e843276310bfa2eb0fa40c6b54f530ac207a4f", "patch": "@@ -0,0 +1,66 @@\n+/* run-rtl-passes.c - Run RTL passes directly from frontend\n+   Copyright (C) 2016-2017 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"target.h\"\n+#include \"rtl.h\"\n+#include \"function.h\"\n+#include \"basic-block.h\"\n+#include \"tree-pass.h\"\n+#include \"context.h\"\n+#include \"pass_manager.h\"\n+#include \"bitmap.h\"\n+#include \"df.h\"\n+#include \"regs.h\"\n+#include \"insn-attr-common.h\" /* for INSN_SCHEDULING.  */\n+#include \"insn-attr.h\" /* for init_sched_attrs.  */\n+#include \"run-rtl-passes.h\"\n+\n+/* Run the backend passes, starting at the given pass.\n+   Take ownership of INITIAL_PASS_NAME.  */\n+\n+void\n+run_rtl_passes (char *initial_pass_name)\n+{\n+  cfun->pass_startwith = initial_pass_name;\n+  max_regno = max_reg_num ();\n+\n+  /* Pass \"expand\" normally sets this up.  */\n+#ifdef INSN_SCHEDULING\n+  init_sched_attrs ();\n+#endif\n+\n+  bitmap_obstack_initialize (NULL);\n+  bitmap_obstack_initialize (&reg_obstack);\n+\n+  opt_pass *rest_of_compilation\n+    = g->get_passes ()->get_rest_of_compilation ();\n+  gcc_assert (rest_of_compilation);\n+  execute_pass_list (cfun, rest_of_compilation);\n+\n+  opt_pass *clean_slate = g->get_passes ()->get_clean_slate ();\n+  gcc_assert (clean_slate);\n+  execute_pass_list (cfun, clean_slate);\n+\n+  bitmap_obstack_release (&reg_obstack);\n+\n+  cfun->curr_properties |= PROP_rtl;\n+}"}, {"sha": "139030338e3f64c07bdb48438ccefd5fc8db6dee", "filename": "gcc/run-rtl-passes.h", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Frun-rtl-passes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Frun-rtl-passes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frun-rtl-passes.h?ref=c2e843276310bfa2eb0fa40c6b54f530ac207a4f", "patch": "@@ -0,0 +1,25 @@\n+/* run-rtl-passes.h - Run a subset of the RTL passes\n+   Copyright (C) 2016-2017 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_RUN_RTL_PASSES_H\n+#define GCC_RUN_RTL_PASSES_H\n+\n+extern void run_rtl_passes (char *initial_pass_name);\n+\n+#endif /* GCC_RUN_RTL_PASSES_H */"}, {"sha": "02118907eccf4c44dd4f612fb4838ac1f0cdbcd2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c2e843276310bfa2eb0fa40c6b54f530ac207a4f", "patch": "@@ -1,3 +1,27 @@\n+2017-01-24  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/rtl/aarch64/asr_div1.c: New test case.\n+\t* gcc.dg/rtl/aarch64/pr71779.c: New test case.\n+\t* gcc.dg/rtl/rtl.exp: New file.\n+\t* gcc.dg/rtl/test.c: New file.\n+\t* gcc.dg/rtl/truncated-rtl-file.c: New test case.\n+\t* gcc.dg/rtl/unknown-rtx-code.c: New test case.\n+\t* gcc.dg/rtl/x86_64/dfinit.c: New test case.\n+\t* gcc.dg/rtl/x86_64/different-structs.c: New test case.\n+\t* gcc.dg/rtl/x86_64/final.c: New test case.\n+\t* gcc.dg/rtl/x86_64/into-cfglayout.c: New test case.\n+\t* gcc.dg/rtl/x86_64/ira.c: New test case.\n+\t* gcc.dg/rtl/x86_64/pro_and_epilogue.c: New test case.\n+\t* gcc.dg/rtl/x86_64/test-multiple-fns.c: New test case.\n+\t* gcc.dg/rtl/x86_64/test-return-const.c.after-expand.c: New test case.\n+\t* gcc.dg/rtl/x86_64/test-return-const.c.before-fwprop.c: New test case.\n+\t* gcc.dg/rtl/x86_64/test-rtl.c: New test case.\n+\t* gcc.dg/rtl/x86_64/test_1.h: New file.\n+\t* gcc.dg/rtl/x86_64/times-two.c.after-expand.c: New test case.\n+\t* gcc.dg/rtl/x86_64/times-two.c.before-df.c: New test case.\n+\t* gcc.dg/rtl/x86_64/times-two.h: New file.\n+\t* gcc.dg/rtl/x86_64/vregs.c: New test case.\n+\n 2017-01-24  Bin Cheng  <bin.cheng@arm.com>\n \n \tPR tree-optimization/79159"}, {"sha": "a95c8c798a940de2670c40859562d83c5b728521", "filename": "gcc/testsuite/gcc.dg/rtl/aarch64/asr_div1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Faarch64%2Fasr_div1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Faarch64%2Fasr_div1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Faarch64%2Fasr_div1.c?ref=c2e843276310bfa2eb0fa40c6b54f530ac207a4f", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do compile { target aarch64-*-* } } */\n+/* { dg-options \"-mtune=cortex-a53 -fdump-rtl-combine -O2\" } */\n+\n+/* Taken from\n+     gcc/testsuite/gcc.dg/asr_div1.c -O2 -fdump-rtl-all -mtune=cortex-a53\n+   for aarch64, hand editing to the new format.  */\n+\n+int __RTL (startwith (\"combine\")) f1 (int n)\n+{\n+(function \"f1\"\n+  (param \"n\"\n+    (DECL_RTL (reg/v:SI <1> [ n ]))\n+    (DECL_RTL_INCOMING (reg:SI x0 [ n ]))\n+  ) ;; param \"n\"\n+  (insn-chain\n+    (block 2\n+      (edge-from entry (flags \"FALLTHRU\"))\n+      (cnote 6 [bb 2] NOTE_INSN_BASIC_BLOCK)\n+      (cinsn 8 (set (reg:DI <2>)\n+        (lshiftrt:DI (reg:DI <0>)\n+            (const_int 32)))\n+        \"../../src/gcc/testsuite/gcc.dg/asr_div1.c\":14\n+        (expr_list:REG_DEAD (reg:DI <0>)))\n+      (cinsn 9 (set (reg:SI <1>)\n+        (ashiftrt:SI (subreg:SI (reg:DI <2>) 0)\n+            (const_int 3)))\n+        \"../../src/gcc/testsuite/gcc.dg/asr_div1.c\":14\n+        (expr_list:REG_DEAD (reg:DI <2>)))\n+\n+      ;; Extra insn, to avoid all of the above from being deleted by DCE\n+      (insn 10 (use (reg/i:SI <1>)))\n+\n+      (edge-to exit (flags \"FALLTHRU\"))\n+    ) ;; block 2\n+  ) ;; insn-chain\n+) ;; function\n+}\n+\n+/* Verify that insns 8 and 9 get combined into a shift of 35 (0x23) */\n+/* { dg-final { scan-rtl-dump \"allowing combination of insns 8 and 9\" \"combine\" } } */\n+/* { dg-final { scan-rtl-dump \"modifying insn i3     9: r\\[0-9\\]+:SI#0=r\\[0-9\\]+:DI>>0x23\" \"combine\" } } */"}, {"sha": "9174abbb9c989afd591c174c67ea5a4caf34330d", "filename": "gcc/testsuite/gcc.dg/rtl/aarch64/pr71779.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Faarch64%2Fpr71779.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Faarch64%2Fpr71779.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Faarch64%2Fpr71779.c?ref=c2e843276310bfa2eb0fa40c6b54f530ac207a4f", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do compile { target aarch64-*-* } } */\n+/* { dg-options \"-fdump-rtl-cse1\" } */\n+\n+/* Dump taken from comment 2 of PR 71779, of\n+   \"...the relevant memory access coming out of expand\"\n+   hand-edited to the compact dump format.  */\n+\n+int __RTL (startwith (\"cse1\")) test (int n)\n+{\n+(function \"fragment\"\n+  (param \"n\"\n+    (DECL_RTL (reg/v:SI <1> [ n ]))\n+    (DECL_RTL_INCOMING (reg:SI x0 [ n ]))\n+  ) ;; param \"n\"\n+  (insn-chain\n+    (block 2\n+      (edge-from entry (flags \"FALLTHRU\"))\n+      (cnote 6 [bb 2] NOTE_INSN_BASIC_BLOCK)\n+\n+;; MEM[(struct isl_obj *)&obj1] = &isl_obj_map_vtable;\n+(insn 1045 (set (reg:SI <480>)\n+        (high:SI (symbol_ref:SI (\"isl_obj_map_vtable\")\n+                    [flags 0xc0]\n+                    <var_decl 0x7fa0363ea240 isl_obj_map_vtable>)))\n+     \"y.c\":12702)\n+(insn 1046 (set (reg/f:SI <479>)\n+        (lo_sum:SI (reg:SI <480>)\n+            (symbol_ref:SI (\"isl_obj_map_vtable\")\n+               [flags 0xc0]\n+               <var_decl 0x7fa0363ea240 isl_obj_map_vtable>)))\n+     \"y.c\":12702\n+     (expr_list:REG_EQUAL (symbol_ref:SI (\"isl_obj_map_vtable\")\n+                             [flags 0xc0]\n+                             <var_decl 0x7fa0363ea240 isl_obj_map_vtable>)))\n+(insn 1047 (set (reg:DI <481>)\n+        (subreg:DI (reg/f:SI <479>) 0)) \"y.c\":12702)\n+(insn 1048 (set (zero_extract:DI (reg/v:DI <191> [ obj1D.17368 ])\n+            (const_int 32)\n+            (const_int 0))\n+        (reg:DI <481>)) \"y.c\":12702)\n+;; Extra insn, to avoid all of the above from being deleted by DCE\n+(insn 1049 (set (mem:DI (reg:DI <191>) [1 i+0 S4 A32])\n+                         (const_int 1)))\n+      (edge-to exit (flags \"FALLTHRU\"))\n+    ) ;; block 2\n+  ) ;; insn-chain\n+) ;; function\n+}\n+\n+/* TODO: scan the dump.  */"}, {"sha": "70a6d8b15f27e18bec2fc86c04d179d5320bf0e2", "filename": "gcc/testsuite/gcc.dg/rtl/rtl.exp", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Frtl.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Frtl.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Frtl.exp?ref=c2e843276310bfa2eb0fa40c6b54f530ac207a4f", "patch": "@@ -0,0 +1,41 @@\n+#   Copyright (C) 2016-2017 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# GCC testsuite that uses the `dg.exp' driver.\n+\n+# Load support procs.\n+load_lib gcc-dg.exp\n+\n+# If a testcase doesn't have special options, use these.\n+global DEFAULT_RTLFLAGS\n+if ![info exists DEFAULT_RTLFLAGS] then {\n+    set DEFAULT_RTLFLAGS \"\"\n+    # -fdump-tree-rtl-raw\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Gather a list of all tests.\n+set tests [lsort [find $srcdir/$subdir *.c]]\n+\n+verbose \"rtl.exp tests: $tests\" 1\n+\n+# Main loop.\n+dg-runtest $tests \"\" $DEFAULT_RTLFLAGS\n+\n+# All done.\n+dg-finish"}, {"sha": "ebb8aefa0f9dda2bbb2a0e1eaf2428b8b0944fda", "filename": "gcc/testsuite/gcc.dg/rtl/test.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Ftest.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Ftest.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Ftest.c?ref=c2e843276310bfa2eb0fa40c6b54f530ac207a4f", "patch": "@@ -0,0 +1,31 @@\n+int test_1 (int i, int j, int k)\n+{\n+  if (i < j)\n+    return k + 4;\n+  else\n+    return -k;\n+}\n+\n+/* Example showing:\n+   - data structure\n+   - loop\n+   - call to \"abort\".  */\n+\n+struct foo\n+{\n+  int count;\n+  float *data;\n+};\n+\n+float test_2 (struct foo *lhs, struct foo *rhs)\n+{\n+  float result = 0.0f;\n+\n+  if (lhs->count != rhs->count)\n+    __builtin_abort ();\n+\n+  for (int i = 0; i < lhs->count; i++)\n+    result += lhs->data[i] * rhs->data[i];\n+\n+  return result;\n+}"}, {"sha": "4dd8214317bd9e14f6cbfcebdd4cc245f559e290", "filename": "gcc/testsuite/gcc.dg/rtl/truncated-rtl-file.c", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Ftruncated-rtl-file.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Ftruncated-rtl-file.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Ftruncated-rtl-file.c?ref=c2e843276310bfa2eb0fa40c6b54f530ac207a4f", "patch": "@@ -0,0 +1,2 @@\n+void __RTL test (void)\n+{ /* { dg-error \"no closing brace\" } */"}, {"sha": "dd252f1dc9902f63feba0472a669ed691ed23e26", "filename": "gcc/testsuite/gcc.dg/rtl/unknown-rtx-code.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Funknown-rtx-code.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Funknown-rtx-code.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Funknown-rtx-code.c?ref=c2e843276310bfa2eb0fa40c6b54f530ac207a4f", "patch": "@@ -0,0 +1,8 @@\n+void __RTL test (void)\n+{\n+  (function \"test\"\n+    (insn-chain\n+      (not-a-valid-kind-of-insn 1 0 0) ;; { dg-error \"unknown rtx code\" }\n+    ) ;; insn-chain\n+  ) ;; function\n+}"}, {"sha": "75ab0bc8022eb72384895a751f0860cb8745f934", "filename": "gcc/testsuite/gcc.dg/rtl/x86_64/dfinit.c", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Fx86_64%2Fdfinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Fx86_64%2Fdfinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Fx86_64%2Fdfinit.c?ref=c2e843276310bfa2eb0fa40c6b54f530ac207a4f", "patch": "@@ -0,0 +1,116 @@\n+/* { dg-do run { target x86_64-*-* } } */\n+/* { dg-options \"-fdump-rtl-dfinit\" } */\n+\n+#include \"test_1.h\"\n+\n+/* Lightly-modified dump of test.c.261r.split1 for x86_64.  */\n+\n+int __RTL (startwith (\"no-opt dfinit\")) test_1 (int i, int j, int k)\n+{\n+(function \"test_1\"\n+  (param \"i\"\n+    (DECL_RTL (mem/c:SI (plus:DI (reg/f:DI frame)\n+        (const_int -4)) [1 i+0 S4 A32]))\n+    (DECL_RTL_INCOMING (reg:SI di [ i ])))\n+  (param \"j\"\n+    (DECL_RTL (mem/c:SI (plus:DI (reg/f:DI frame)\n+        (const_int -8)) [1 j+0 S4 A32]))\n+    (DECL_RTL_INCOMING (reg:SI si [ j ])))\n+  (param \"k\"\n+    (DECL_RTL (mem/c:SI (plus:DI (reg/f:DI frame)\n+        (const_int -12)) [1 k+0 S4 A32]))\n+    (DECL_RTL_INCOMING (reg:SI dx [ k ])))\n+  (insn-chain\n+    (cnote 1 NOTE_INSN_DELETED)\n+    (block 2\n+      (edge-from entry (flags \"FALLTHRU\"))\n+      (cnote 6 [bb 2] NOTE_INSN_BASIC_BLOCK)\n+      (cinsn 2 (set (mem/c:SI (plus:DI (reg/f:DI frame)\n+                            (const_int -4)) [1 i+0 S4 A32])\n+                    (reg:SI di [ i ])) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":2)\n+      (cinsn 3 (set (mem/c:SI (plus:DI (reg/f:DI frame)\n+                            (const_int -8)) [1 j+0 S4 A32])\n+                    (reg:SI si [ j ])) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":2)\n+      (cinsn 4 (set (mem/c:SI (plus:DI (reg/f:DI frame)\n+                            (const_int -12)) [1 k+0 S4 A32])\n+                    (reg:SI dx [ k ])) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":2)\n+      (cnote 5 NOTE_INSN_FUNCTION_BEG)\n+      (cinsn 8 (set (reg:SI <2>)\n+                    (mem/c:SI (plus:DI (reg/f:DI frame)\n+                            (const_int -4)) [1 i+0 S4 A32])) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":3)\n+      (cinsn 9 (set (reg:CCGC flags)\n+                    (compare:CCGC (reg:SI <2>)\n+                        (mem/c:SI (plus:DI (reg/f:DI frame)\n+                                (const_int -8)) [1 j+0 S4 A32]))) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":3)\n+      (cjump_insn 10 (set (pc)\n+                    (if_then_else (ge (reg:CCGC flags)\n+                            (const_int 0))\n+                        (label_ref 16)\n+                        (pc))) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":3)\n+      (edge-to 3 (flags \"FALLTHRU\"))\n+      (edge-to 4)\n+    ) ;; block 2\n+    (block 3\n+      (edge-from 2 (flags \"FALLTHRU\"))\n+      (cnote 11 [bb 3] NOTE_INSN_BASIC_BLOCK)\n+      (cinsn 12 (set (reg:SI <3>)\n+                    (mem/c:SI (plus:DI (reg/f:DI frame)\n+                            (const_int -12)) [1 k+0 S4 A32])) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":4)\n+      (cinsn 13 (parallel [\n+                        (set (reg:SI <0> [ _1 ])\n+                            (plus:SI (reg:SI <3>)\n+                                (const_int 4)))\n+                        (clobber (reg:CC flags))\n+                    ]) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":4\n+                 (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI frame)\n+                                (const_int -12)) [1 k+0 S4 A32])\n+                        (const_int 4))))\n+      (cjump_insn 29 (set (pc)\n+                    (label_ref 20)) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":4)\n+      (edge-to 5)\n+    ) ;; block 3\n+    (cbarrier 30)\n+    (block 4\n+      (edge-from 2)\n+      (clabel 16 2)\n+      (cnote 17 [bb 4] NOTE_INSN_BASIC_BLOCK)\n+      (cinsn 18 (set (reg:SI <4>)\n+                    (mem/c:SI (plus:DI (reg/f:DI frame)\n+                            (const_int -12)) [1 k+0 S4 A32])) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":6)\n+      (cinsn 19 (parallel [\n+                        (set (reg:SI <0> [ _1 ])\n+                            (neg:SI (reg:SI <4>)))\n+                        (clobber (reg:CC flags))\n+                    ]) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":6\n+                 (expr_list:REG_EQUAL (neg:SI (mem/c:SI (plus:DI (reg/f:DI frame)\n+                                (const_int -12)) [1 k+0 S4 A32]))))\n+      (edge-to 5 (flags \"FALLTHRU\"))\n+    ) ;; block 4\n+    (block 5\n+      (edge-from 4 (flags \"FALLTHRU\"))\n+      (edge-from 3)\n+      (clabel 20 3)\n+      (cnote 21 [bb 5] NOTE_INSN_BASIC_BLOCK)\n+      (cinsn 22 (set (reg:SI <1> [ <retval> ])\n+                    (reg:SI <0> [ _1 ])))\n+      (cinsn 26 (set (reg/i:SI ax)\n+                    (reg:SI <1> [ <retval> ])) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":7)\n+      (cinsn 27 (use (reg/i:SI ax)) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":7)\n+      (edge-to exit (flags \"FALLTHRU\"))\n+    ) ;; block 5\n+  ) ;; insn-chain\n+  (crtl\n+    (return_rtx \n+      (reg/i:SI ax)\n+    ) ;; return_rtx\n+  ) ;; crtl\n+) ;; function \"test_1\"\n+}\n+\n+/* Verify that the dataflow information matches what cc1 would normally\n+   have generated.  In particular, in earlier versions of the RTL\n+   frontend, the exit block use of reg 0 (ax) wasn't picked up\n+   on, due to not setting up crtl->return_rtx based on\n+   DECL_RESULT (fndecl).  */\n+/* { dg-final { scan-rtl-dump \";;  exit block uses.*0 .ax. 6 .bp. 7 .sp. 20 .frame.\" \"dfinit\" } } */\n+/* { dg-final { scan-rtl-dump \";;  regs ever live.*0 .ax. 1 .dx. 4 .si. 5 .di. 17 .flags.\" \"dfinit\" } } */"}, {"sha": "90efaa78cd0d68cd9acbab7f87e3ea28c65587c4", "filename": "gcc/testsuite/gcc.dg/rtl/x86_64/different-structs.c", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Fx86_64%2Fdifferent-structs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Fx86_64%2Fdifferent-structs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Fx86_64%2Fdifferent-structs.c?ref=c2e843276310bfa2eb0fa40c6b54f530ac207a4f", "patch": "@@ -0,0 +1,81 @@\n+/* { dg-do compile { target x86_64-*-* } } */\n+\n+extern double sqrt(double x);\n+\n+struct foo\n+{\n+  double x;\n+  double y;\n+};\n+\n+struct bar\n+{\n+  double x;\n+  double y;\n+};\n+\n+double __RTL test (struct foo *f, const struct bar *b)\n+{\n+#if 0\n+  /* Result of \"expand\" on this C code, compiled for x86_64 with -Os.  */\n+  f->x += b->x;\n+  f->y += b->y;\n+  return sqrt (f->x * f->x + f->y * f->y);\n+#endif\n+(function \"test\"\n+  (insn-chain\n+    (cnote 1 NOTE_INSN_DELETED)\n+    (block 2\n+      (edge-from entry (flags \"FALLTHRU\"))\n+      (cnote 5 [bb 2] NOTE_INSN_BASIC_BLOCK)\n+      (cinsn 2 (set (reg/v/f:DI <10> [ f ])\n+                    (reg:DI di [ f ])) \"../../src/gcc/testsuite/gcc.dg/rtl/x86_64/different-structs.c\":18)\n+      (cinsn 3 (set (reg/v/f:DI <11> [ b ])\n+                    (reg:DI si [ b ])) \"../../src/gcc/testsuite/gcc.dg/rtl/x86_64/different-structs.c\":18)\n+      (cnote 4 NOTE_INSN_FUNCTION_BEG)\n+      (cinsn 7 (set (reg:DF <12>)\n+                    (mem:DF (reg/v/f:DI <10> [ f ]) [2 f_11(D)->x+0 S8 A64])) \"../../src/gcc/testsuite/gcc.dg/rtl/x86_64/different-structs.c\":21)\n+      (cinsn 8 (set (reg:DF <2> [ _3 ])\n+                    (plus:DF (reg:DF <12>)\n+                        (mem:DF (reg/v/f:DI <11> [ b ]) [2 b_12(D)->x+0 S8 A64]))) \"../../src/gcc/testsuite/gcc.dg/rtl/x86_64/different-structs.c\":21)\n+      (cinsn 9 (set (mem:DF (reg/v/f:DI <10> [ f ]) [2 f_11(D)->x+0 S8 A64])\n+                    (reg:DF <2> [ _3 ])) \"../../src/gcc/testsuite/gcc.dg/rtl/x86_64/different-structs.c\":21)\n+      (cinsn 10 (set (reg:DF <13>)\n+                    (mem:DF (plus:DI (reg/v/f:DI <10> [ f ])\n+                            (const_int 8)) [2 f_11(D)->y+0 S8 A64])) \"../../src/gcc/testsuite/gcc.dg/rtl/x86_64/different-structs.c\":22)\n+      (cinsn 11 (set (reg:DF <5> [ _6 ])\n+                    (plus:DF (reg:DF <13>)\n+                        (mem:DF (plus:DI (reg/v/f:DI <11> [ b ])\n+                                (const_int 8)) [2 b_12(D)->y+0 S8 A64]))) \"../../src/gcc/testsuite/gcc.dg/rtl/x86_64/different-structs.c\":22)\n+      (cinsn 12 (set (mem:DF (plus:DI (reg/v/f:DI <10> [ f ])\n+                            (const_int 8)) [2 f_11(D)->y+0 S8 A64])\n+                    (reg:DF <5> [ _6 ])) \"../../src/gcc/testsuite/gcc.dg/rtl/x86_64/different-structs.c\":22)\n+      (cinsn 13 (set (reg:DF <14>)\n+                    (mult:DF (reg:DF <2> [ _3 ])\n+                        (reg:DF <2> [ _3 ]))) \"../../src/gcc/testsuite/gcc.dg/rtl/x86_64/different-structs.c\":23)\n+      (cinsn 14 (set (reg:DF <15>)\n+                    (mult:DF (reg:DF <5> [ _6 ])\n+                        (reg:DF <5> [ _6 ]))) \"../../src/gcc/testsuite/gcc.dg/rtl/x86_64/different-structs.c\":23)\n+      (cinsn 15 (set (reg:DF <16>)\n+                    (plus:DF (reg:DF <14>)\n+                        (reg:DF <15>))) \"../../src/gcc/testsuite/gcc.dg/rtl/x86_64/different-structs.c\":23)\n+      (cinsn 16 (set (reg:DF xmm0)\n+                    (reg:DF <16>)) \"../../src/gcc/testsuite/gcc.dg/rtl/x86_64/different-structs.c\":23)\n+      (ccall_insn/j 17 (set (reg:DF xmm0)\n+                    (call (mem:QI (symbol_ref:DI (\"sqrt\") [flags 0x41]  <function_decl 0x7fa24e331d00 sqrt>) [0 __builtin_sqrt S1 A8])\n+                        (const_int 0))) \"../../src/gcc/testsuite/gcc.dg/rtl/x86_64/different-structs.c\":23\n+                 (expr_list:REG_CALL_DECL (symbol_ref:DI (\"sqrt\") [flags 0x41]  <function_decl 0x7fa24e331d00 sqrt>)\n+                    (expr_list:REG_EH_REGION (const_int 0)))\n+                (expr_list:DF (use (reg:DF xmm0))))\n+      (edge-to exit (flags \"ABNORMAL | SIBCALL\"))\n+    ) ;; block 2\n+    (cbarrier 18)\n+  ) ;; insn-chain\n+  (crtl\n+    (return_rtx \n+      (reg/i:DF xmm0)\n+    ) ;; return_rtx\n+  ) ;; crtl\n+) ;; function \"test\"\n+\n+}"}, {"sha": "ff84c683d5a0c04534cce50c5ece794cfc6f8c50", "filename": "gcc/testsuite/gcc.dg/rtl/x86_64/final.c", "status": "added", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Fx86_64%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Fx86_64%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Fx86_64%2Ffinal.c?ref=c2e843276310bfa2eb0fa40c6b54f530ac207a4f", "patch": "@@ -0,0 +1,133 @@\n+/* { dg-do compile { target x86_64-*-* } } */\n+/* { dg-options \"-fdump-rtl-final\" } */\n+\n+/* Lightly-modified dump of test.c.304r.dwarf2 for x86_64 target,\n+   with various NOTE_INSN_CFI deleted by hand for now.  */\n+\n+int __RTL (startwith (\"final\")) test_1 (int i, int j, int k)\n+{\n+(function \"test_1\"\n+  (param \"i\"\n+    (DECL_RTL (mem/c:SI (plus:DI (reg/f:DI frame)\n+        (const_int -4)) [1 i+0 S4 A32]))\n+    (DECL_RTL_INCOMING (reg:SI di [ i ])))\n+  (param \"j\"\n+    (DECL_RTL (mem/c:SI (plus:DI (reg/f:DI frame)\n+        (const_int -8)) [1 j+0 S4 A32]))\n+    (DECL_RTL_INCOMING (reg:SI si [ j ])))\n+  (param \"k\"\n+    (DECL_RTL (mem/c:SI (plus:DI (reg/f:DI frame)\n+        (const_int -12)) [1 k+0 S4 A32]))\n+    (DECL_RTL_INCOMING (reg:SI dx [ k ])))\n+  (insn-chain\n+    (cnote 1 NOTE_INSN_DELETED)\n+    (block 2\n+      (edge-from entry (flags \"FALLTHRU\"))\n+      (cnote 6 [bb 2] NOTE_INSN_BASIC_BLOCK)\n+      (cinsn/f 32 (set (mem:DI (pre_dec:DI (reg/f:DI sp)) [0  S8 A8])\n+                    (reg/f:DI bp)) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":2)\n+      (cinsn/f 33 (set (reg/f:DI bp)\n+                    (reg/f:DI sp)) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":2)\n+      (cinsn 34 (set (mem/v:BLK (0|scratch:DI) [0  A8])\n+                    (unspec:BLK [\n+                            (mem/v:BLK (reuse_rtx 0) [0  A8])\n+                        ] UNSPEC_MEMORY_BLOCKAGE)) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":2)\n+      (cnote 35 NOTE_INSN_PROLOGUE_END)\n+      (cinsn 2 (set (mem/c:SI (plus:DI (reg/f:DI bp)\n+                            (const_int -4)) [1 i+0 S4 A32])\n+                    (reg:SI di [ i ])) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":2)\n+      (cinsn 3 (set (mem/c:SI (plus:DI (reg/f:DI bp)\n+                            (const_int -8)) [1 j+0 S4 A32])\n+                    (reg:SI si [ j ])) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":2)\n+      (cinsn 4 (set (mem/c:SI (plus:DI (reg/f:DI bp)\n+                            (const_int -12)) [1 k+0 S4 A32])\n+                    (reg:SI dx [ k ])) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":2)\n+      (cnote 5 NOTE_INSN_FUNCTION_BEG)\n+      (cinsn 8 (set (reg:SI ax [89])\n+                    (mem/c:SI (plus:DI (reg/f:DI bp)\n+                            (const_int -4)) [1 i+0 S4 A32])) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":3)\n+      (cinsn 9 (set (reg:CCGC flags)\n+                    (compare:CCGC (reg:SI ax [89])\n+                        (mem/c:SI (plus:DI (reg/f:DI bp)\n+                                (const_int -8)) [1 j+0 S4 A32]))) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":3)\n+      (cjump_insn 10 (set (pc)\n+                    (if_then_else (ge (reg:CCGC flags)\n+                            (const_int 0))\n+                        (label_ref 16)\n+                        (pc))) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":3)\n+      (edge-to 3 (flags \"FALLTHRU\"))\n+      (edge-to 4)\n+    ) ;; block 2\n+    (block 3\n+      (edge-from 2 (flags \"FALLTHRU\"))\n+      (cnote 11 [bb 3] NOTE_INSN_BASIC_BLOCK)\n+      (cinsn 12 (set (reg:SI ax [90])\n+                    (mem/c:SI (plus:DI (reg/f:DI bp)\n+                            (const_int -12)) [1 k+0 S4 A32])) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":4)\n+      (cinsn 13 (parallel [\n+                        (set (reg:SI ax [orig:87 _1 ] [87])\n+                            (plus:SI (reg:SI ax [90])\n+                                (const_int 4)))\n+                        (clobber (reg:CC flags))\n+                    ]) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":4\n+                 (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI frame)\n+                                (const_int -12)) [1 k+0 S4 A32])\n+                        (const_int 4))))\n+      (cjump_insn 29 (set (pc)\n+                    (label_ref 20)) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":4)\n+      (edge-to 5)\n+    ) ;; block 3\n+    (cbarrier 30)\n+    (block 4\n+      (edge-from 2)\n+      (clabel 16 2)\n+      (cnote 17 [bb 4] NOTE_INSN_BASIC_BLOCK)\n+      (cinsn 18 (set (reg:SI ax [91])\n+                    (mem/c:SI (plus:DI (reg/f:DI bp)\n+                            (const_int -12)) [1 k+0 S4 A32])) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":6)\n+      (cinsn 19 (parallel [\n+                        (set (reg:SI ax [orig:87 _1 ] [87])\n+                            (neg:SI (reg:SI ax [91])))\n+                        (clobber (reg:CC flags))\n+                    ]) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":6\n+                 (expr_list:REG_EQUAL (neg:SI (mem/c:SI (plus:DI (reg/f:DI frame)\n+                                (const_int -12)) [1 k+0 S4 A32]))))\n+      (edge-to 5 (flags \"FALLTHRU\"))\n+    ) ;; block 4\n+    (block 5\n+      (edge-from 4 (flags \"FALLTHRU\"))\n+      (edge-from 3)\n+      (clabel 20 3)\n+      (cnote 21 [bb 5] NOTE_INSN_BASIC_BLOCK)\n+      (cinsn 27 (use (reg/i:SI ax)) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":7)\n+      (cnote 36 NOTE_INSN_EPILOGUE_BEG)\n+      (cinsn 37 (set (mem/v:BLK (1|scratch:DI) [0  A8])\n+                    (unspec:BLK [\n+                            (mem/v:BLK (reuse_rtx 1) [0  A8])\n+                        ] UNSPEC_MEMORY_BLOCKAGE)) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":7)\n+      (cinsn/f 38 (set (reg/f:DI bp)\n+                    (mem:DI (post_inc:DI (reg/f:DI sp)) [0  S8 A8])) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":7\n+                 (expr_list:REG_CFA_DEF_CFA (plus:DI (reg/f:DI sp)\n+                        (const_int 8))))\n+      (cjump_insn 39 (simple_return) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":7)\n+      (edge-to exit)\n+    ) ;; block 5\n+    (cbarrier 40)\n+    (cnote 31 NOTE_INSN_DELETED)\n+  ) ;; insn-chain\n+  (crtl\n+    (return_rtx \n+      (reg/i:SI ax)\n+    ) ;; return_rtx\n+  ) ;; crtl\n+) ;; function \"test_1\"\n+}\n+\n+/* Verify that asm was emitted.  */\n+/* { dg-final { scan-assembler \"test_1:\" } } */\n+/* { dg-final { scan-assembler \".cfi_startproc\" } } */\n+/* { dg-final { scan-assembler \".cfi_endproc\" } } */\n+\n+/* Verify that the \"simple_return\" was recognized.\n+   FIXME: this assumes i386.md.  */\n+/* { dg-final { scan-assembler \"ret\" } } */"}, {"sha": "d0a82ff6741429006dfe05d9fe8565b4b91e5149", "filename": "gcc/testsuite/gcc.dg/rtl/x86_64/into-cfglayout.c", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Fx86_64%2Finto-cfglayout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Fx86_64%2Finto-cfglayout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Fx86_64%2Finto-cfglayout.c?ref=c2e843276310bfa2eb0fa40c6b54f530ac207a4f", "patch": "@@ -0,0 +1,117 @@\n+/* { dg-do run { target x86_64-*-* } } */\n+/* { dg-options \"-fdump-rtl-into_cfglayout\" } */\n+\n+/* Lightly-modified dump of test.c.226r.vregs for x86_64.  */\n+\n+#include \"test_1.h\"\n+\n+int __RTL (startwith (\"into_cfglayout\")) test_1 (int i, int j, int k)\n+{\n+(function \"test_1\"\n+  (param \"i\"\n+    (DECL_RTL (mem/c:SI (plus:DI (reg/f:DI frame)\n+        (const_int -4)) [1 i+0 S4 A32]))\n+    (DECL_RTL_INCOMING (reg:SI di [ i ])))\n+  (param \"j\"\n+    (DECL_RTL (mem/c:SI (plus:DI (reg/f:DI frame)\n+        (const_int -8)) [1 j+0 S4 A32]))\n+    (DECL_RTL_INCOMING (reg:SI si [ j ])))\n+  (param \"k\"\n+    (DECL_RTL (mem/c:SI (plus:DI (reg/f:DI frame)\n+        (const_int -12)) [1 k+0 S4 A32]))\n+    (DECL_RTL_INCOMING (reg:SI dx [ k ])))\n+  (insn-chain\n+    (cnote 1 NOTE_INSN_DELETED)\n+    (block 2\n+      (edge-from entry (flags \"FALLTHRU\"))\n+      (cnote 6 [bb 2] NOTE_INSN_BASIC_BLOCK)\n+      (cinsn 2 (set (mem/c:SI (plus:DI (reg/f:DI frame)\n+                            (const_int -4)) [1 i+0 S4 A32])\n+                    (reg:SI di [ i ])) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":2)\n+      (cinsn 3 (set (mem/c:SI (plus:DI (reg/f:DI frame)\n+                            (const_int -8)) [1 j+0 S4 A32])\n+                    (reg:SI si [ j ])) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":2)\n+      (cinsn 4 (set (mem/c:SI (plus:DI (reg/f:DI frame)\n+                            (const_int -12)) [1 k+0 S4 A32])\n+                    (reg:SI dx [ k ])) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":2)\n+      (cnote 5 NOTE_INSN_FUNCTION_BEG)\n+      (cinsn 8 (set (reg:SI <2>)\n+                    (mem/c:SI (plus:DI (reg/f:DI frame)\n+                            (const_int -4)) [1 i+0 S4 A32])) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":3)\n+      (cinsn 9 (set (reg:CCGC flags)\n+                    (compare:CCGC (reg:SI <2>)\n+                        (mem/c:SI (plus:DI (reg/f:DI frame)\n+                                (const_int -8)) [1 j+0 S4 A32]))) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":3)\n+      (cjump_insn 10 (set (pc)\n+                    (if_then_else (ge (reg:CCGC flags)\n+                            (const_int 0))\n+                        (label_ref 16)\n+                        (pc))) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":3)\n+      (edge-to 4 (flags \"FALLTHRU\"))\n+      (edge-to 5)\n+    ) ;; block 2\n+    (block 4\n+      (edge-from 2 (flags \"FALLTHRU\"))\n+      (cnote 11 [bb 4] NOTE_INSN_BASIC_BLOCK)\n+      (cinsn 12 (set (reg:SI <3>)\n+                    (mem/c:SI (plus:DI (reg/f:DI frame)\n+                            (const_int -12)) [1 k+0 S4 A32])) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":4)\n+      (cinsn 13 (parallel [\n+                        (set (reg:SI <0> [ _1 ])\n+                            (plus:SI (reg:SI <3>)\n+                                (const_int 4)))\n+                        (clobber (reg:CC flags))\n+                    ]) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":4\n+                 (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI frame)\n+                                (const_int -12)) [1 k+0 S4 A32])\n+                        (const_int 4))))\n+      (cjump_insn 14 (set (pc)\n+                    (label_ref 20)) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":4)\n+      (edge-to 6)\n+    ) ;; block 4\n+    (cbarrier 15)\n+    (block 5\n+      (edge-from 2)\n+      (clabel 16 2)\n+      (cnote 17 [bb 5] NOTE_INSN_BASIC_BLOCK)\n+      (cinsn 18 (set (reg:SI <4>)\n+                    (mem/c:SI (plus:DI (reg/f:DI frame)\n+                            (const_int -12)) [1 k+0 S4 A32])) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":6)\n+      (cinsn 19 (parallel [\n+                        (set (reg:SI <0> [ _1 ])\n+                            (neg:SI (reg:SI <4>)))\n+                        (clobber (reg:CC flags))\n+                    ]) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":6\n+                 (expr_list:REG_EQUAL (neg:SI (mem/c:SI (plus:DI (reg/f:DI frame)\n+                                (const_int -12)) [1 k+0 S4 A32]))))\n+      (edge-to 6 (flags \"FALLTHRU\"))\n+    ) ;; block 5\n+    (block 6\n+      (edge-from 4)\n+      (edge-from 5 (flags \"FALLTHRU\"))\n+      (clabel 20 3)\n+      (cnote 21 [bb 6] NOTE_INSN_BASIC_BLOCK)\n+      (cinsn 22 (set (reg:SI <1> [ <retval> ])\n+                    (reg:SI <0> [ _1 ])))\n+      (cinsn 26 (set (reg/i:SI ax)\n+                    (reg:SI <1> [ <retval> ])) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":7)\n+      (cinsn 27 (use (reg/i:SI ax)) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":7)\n+      (edge-to exit (flags \"FALLTHRU\"))\n+    ) ;; block 6\n+  ) ;; insn-chain\n+  (crtl\n+    (return_rtx \n+      (reg/i:SI ax)\n+    ) ;; return_rtx\n+  ) ;; crtl\n+) ;; function \"test_1\"\n+}\n+\n+/* The conversion to cfglayout should eliminate unconditional jump\n+   instructions...  */\n+/* { dg-final { scan-rtl-dump \"Removing jump 14.\" \"into_cfglayout\" } }  */\n+/* { dg-final { scan-rtl-dump-not \"jump_insn 14\" \"into_cfglayout\" } }  */\n+/* { dg-final { scan-rtl-dump-not \"barrier\" \"into_cfglayout\" } }  */\n+\n+/* ...but conditional jumps should be preserved.  */\n+/* { dg-final { scan-rtl-dump \"jump_insn 10\" \"into_cfglayout\" } }  */"}, {"sha": "caf37b6503c33784e83085ce4af4ef26dedece89", "filename": "gcc/testsuite/gcc.dg/rtl/x86_64/ira.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Fx86_64%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Fx86_64%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Fx86_64%2Fira.c?ref=c2e843276310bfa2eb0fa40c6b54f530ac207a4f", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do run { target x86_64-*-* } } */\n+/* { dg-options \"-fdump-rtl-ira\" } */\n+\n+/* Lightly-modified dump of test.c.265r.asmcons for x86_64.  */\n+\n+#include \"test_1.h\"\n+\n+int __RTL (startwith (\"ira\")) test_1 (int i, int j, int k)\n+{\n+(function \"test_1\"\n+  (param \"i\"\n+    (DECL_RTL (mem/c:SI (plus:DI (reg/f:DI frame)\n+        (const_int -4)) [1 i+0 S4 A32]))\n+    (DECL_RTL_INCOMING (reg:SI di [ i ])))\n+  (param \"j\"\n+    (DECL_RTL (mem/c:SI (plus:DI (reg/f:DI frame)\n+        (const_int -8)) [1 j+0 S4 A32]))\n+    (DECL_RTL_INCOMING (reg:SI si [ j ])))\n+  (param \"k\"\n+    (DECL_RTL (mem/c:SI (plus:DI (reg/f:DI frame)\n+        (const_int -12)) [1 k+0 S4 A32]))\n+    (DECL_RTL_INCOMING (reg:SI dx [ k ])))\n+  (insn-chain\n+    (cnote 1 NOTE_INSN_DELETED)\n+    (block 2\n+      (edge-from entry (flags \"FALLTHRU\"))\n+      (cnote 6 [bb 2] NOTE_INSN_BASIC_BLOCK)\n+      (cinsn 2 (set (mem/c:SI (plus:DI (reg/f:DI frame)\n+                            (const_int -4)) [1 i+0 S4 A32])\n+                    (reg:SI di [ i ])) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":2)\n+      (cinsn 3 (set (mem/c:SI (plus:DI (reg/f:DI frame)\n+                            (const_int -8)) [1 j+0 S4 A32])\n+                    (reg:SI si [ j ])) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":2)\n+      (cinsn 4 (set (mem/c:SI (plus:DI (reg/f:DI frame)\n+                            (const_int -12)) [1 k+0 S4 A32])\n+                    (reg:SI dx [ k ])) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":2)\n+      (cnote 5 NOTE_INSN_FUNCTION_BEG)\n+      (cinsn 8 (set (reg:SI <2>)\n+                    (mem/c:SI (plus:DI (reg/f:DI frame)\n+                            (const_int -4)) [1 i+0 S4 A32])) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":3)\n+      (cinsn 9 (set (reg:CCGC flags)\n+                    (compare:CCGC (reg:SI <2>)\n+                        (mem/c:SI (plus:DI (reg/f:DI frame)\n+                                (const_int -8)) [1 j+0 S4 A32]))) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":3)\n+      (cjump_insn 10 (set (pc)\n+                    (if_then_else (ge (reg:CCGC flags)\n+                            (const_int 0))\n+                        (label_ref 16)\n+                        (pc))) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":3)\n+      (edge-to 3 (flags \"FALLTHRU\"))\n+      (edge-to 4)\n+    ) ;; block 2\n+    (block 3\n+      (edge-from 2 (flags \"FALLTHRU\"))\n+      (cnote 11 [bb 3] NOTE_INSN_BASIC_BLOCK)\n+      (cinsn 12 (set (reg:SI <3>)\n+                    (mem/c:SI (plus:DI (reg/f:DI frame)\n+                            (const_int -12)) [1 k+0 S4 A32])) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":4)\n+      (cinsn 13 (parallel [\n+                        (set (reg:SI <0> [ _1 ])\n+                            (plus:SI (reg:SI <3>)\n+                                (const_int 4)))\n+                        (clobber (reg:CC flags))\n+                    ]) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":4\n+                 (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI frame)\n+                                (const_int -12)) [1 k+0 S4 A32])\n+                        (const_int 4))))\n+      (cjump_insn 29 (set (pc)\n+                    (label_ref 20)) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":4)\n+      (edge-to 5)\n+    ) ;; block 3\n+    (cbarrier 30)\n+    (block 4\n+      (edge-from 2)\n+      (clabel 16 2)\n+      (cnote 17 [bb 4] NOTE_INSN_BASIC_BLOCK)\n+      (cinsn 18 (set (reg:SI <4>)\n+                    (mem/c:SI (plus:DI (reg/f:DI frame)\n+                            (const_int -12)) [1 k+0 S4 A32])) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":6)\n+      (cinsn 19 (parallel [\n+                        (set (reg:SI <0> [ _1 ])\n+                            (neg:SI (reg:SI <4>)))\n+                        (clobber (reg:CC flags))\n+                    ]) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":6\n+                 (expr_list:REG_EQUAL (neg:SI (mem/c:SI (plus:DI (reg/f:DI frame)\n+                                (const_int -12)) [1 k+0 S4 A32]))))\n+      (edge-to 5 (flags \"FALLTHRU\"))\n+    ) ;; block 4\n+    (block 5\n+      (edge-from 4 (flags \"FALLTHRU\"))\n+      (edge-from 3)\n+      (clabel 20 3)\n+      (cnote 21 [bb 5] NOTE_INSN_BASIC_BLOCK)\n+      (cinsn 22 (set (reg:SI <1> [ <retval> ])\n+                    (reg:SI <0> [ _1 ])))\n+      (cinsn 26 (set (reg/i:SI ax)\n+                    (reg:SI <1> [ <retval> ])) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":7)\n+      (cinsn 27 (use (reg/i:SI ax)) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":7)\n+      (edge-to exit (flags \"FALLTHRU\"))\n+    ) ;; block 5\n+  ) ;; insn-chain\n+  (crtl\n+    (return_rtx \n+      (reg/i:SI ax)\n+    ) ;; return_rtx\n+  ) ;; crtl\n+) ;; function \"test_1\"\n+}\n+\n+/* Verify that IRA was run.  */\n+/* { dg-final { scan-rtl-dump \"Building IRA IR\" \"ira\" } } */"}, {"sha": "4ba3d6e48d8b4de2f4fe80f41c9f25a53806cf64", "filename": "gcc/testsuite/gcc.dg/rtl/x86_64/pro_and_epilogue.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Fx86_64%2Fpro_and_epilogue.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Fx86_64%2Fpro_and_epilogue.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Fx86_64%2Fpro_and_epilogue.c?ref=c2e843276310bfa2eb0fa40c6b54f530ac207a4f", "patch": "@@ -0,0 +1,110 @@\n+/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-fdump-rtl-pro_and_epilogue\" } */\n+\n+/* Lightly-modified dump of test.c.274r.split2 for x86_64.  */\n+\n+int __RTL (startwith (\"pro_and_epilogue\")) test_1 (int i, int j, int k)\n+{\n+(function \"test_1\"\n+  (param \"i\"\n+    (DECL_RTL (mem/c:SI (plus:DI (reg/f:DI frame)\n+        (const_int -4)) [1 i+0 S4 A32]))\n+    (DECL_RTL_INCOMING (reg:SI di [ i ])))\n+  (param \"j\"\n+    (DECL_RTL (mem/c:SI (plus:DI (reg/f:DI frame)\n+        (const_int -8)) [1 j+0 S4 A32]))\n+    (DECL_RTL_INCOMING (reg:SI si [ j ])))\n+  (param \"k\"\n+    (DECL_RTL (mem/c:SI (plus:DI (reg/f:DI frame)\n+        (const_int -12)) [1 k+0 S4 A32]))\n+    (DECL_RTL_INCOMING (reg:SI dx [ k ])))\n+  (insn-chain\n+    (cnote 1 NOTE_INSN_DELETED)\n+    (block 2\n+      (edge-from entry (flags \"FALLTHRU\"))\n+      (cnote 6 [bb 2] NOTE_INSN_BASIC_BLOCK)\n+      (cinsn 2 (set (mem/c:SI (plus:DI (reg/f:DI bp)\n+                            (const_int -4)) [1 i+0 S4 A32])\n+                    (reg:SI di [ i ])) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":2)\n+      (cinsn 3 (set (mem/c:SI (plus:DI (reg/f:DI bp)\n+                            (const_int -8)) [1 j+0 S4 A32])\n+                    (reg:SI si [ j ])) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":2)\n+      (cinsn 4 (set (mem/c:SI (plus:DI (reg/f:DI bp)\n+                            (const_int -12)) [1 k+0 S4 A32])\n+                    (reg:SI dx [ k ])) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":2)\n+      (cnote 5 NOTE_INSN_FUNCTION_BEG)\n+      (cinsn 8 (set (reg:SI ax [89])\n+                    (mem/c:SI (plus:DI (reg/f:DI bp)\n+                            (const_int -4)) [1 i+0 S4 A32])) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":3)\n+      (cinsn 9 (set (reg:CCGC flags)\n+                    (compare:CCGC (reg:SI ax [89])\n+                        (mem/c:SI (plus:DI (reg/f:DI bp)\n+                                (const_int -8)) [1 j+0 S4 A32]))) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":3)\n+      (cjump_insn 10 (set (pc)\n+                    (if_then_else (ge (reg:CCGC flags)\n+                            (const_int 0))\n+                        (label_ref 16)\n+                        (pc))) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":3)\n+      (edge-to 3 (flags \"FALLTHRU\"))\n+      (edge-to 4)\n+    ) ;; block 2\n+    (block 3\n+      (edge-from 2 (flags \"FALLTHRU\"))\n+      (cnote 11 [bb 3] NOTE_INSN_BASIC_BLOCK)\n+      (cinsn 12 (set (reg:SI ax [90])\n+                    (mem/c:SI (plus:DI (reg/f:DI bp)\n+                            (const_int -12)) [1 k+0 S4 A32])) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":4)\n+      (cinsn 13 (parallel [\n+                        (set (reg:SI ax [orig:87 _1 ] [87])\n+                            (plus:SI (reg:SI ax [90])\n+                                (const_int 4)))\n+                        (clobber (reg:CC flags))\n+                    ]) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":4\n+                 (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI frame)\n+                                (const_int -12)) [1 k+0 S4 A32])\n+                        (const_int 4))))\n+      (cjump_insn 29 (set (pc)\n+                    (label_ref 20)) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":4)\n+      (edge-to 5)\n+    ) ;; block 3\n+    (cbarrier 30)\n+    (block 4\n+      (edge-from 2)\n+      (clabel 16 2)\n+      (cnote 17 [bb 4] NOTE_INSN_BASIC_BLOCK)\n+      (cinsn 18 (set (reg:SI ax [91])\n+                    (mem/c:SI (plus:DI (reg/f:DI bp)\n+                            (const_int -12)) [1 k+0 S4 A32])) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":6)\n+      (cinsn 19 (parallel [\n+                        (set (reg:SI ax [orig:87 _1 ] [87])\n+                            (neg:SI (reg:SI ax [91])))\n+                        (clobber (reg:CC flags))\n+                    ]) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":6\n+                 (expr_list:REG_EQUAL (neg:SI (mem/c:SI (plus:DI (reg/f:DI frame)\n+                                (const_int -12)) [1 k+0 S4 A32]))))\n+      (edge-to 5 (flags \"FALLTHRU\"))\n+    ) ;; block 4\n+    (block 5\n+      (edge-from 4 (flags \"FALLTHRU\"))\n+      (edge-from 3)\n+      (clabel 20 3)\n+      (cnote 21 [bb 5] NOTE_INSN_BASIC_BLOCK)\n+      (cinsn 27 (use (reg/i:SI ax)) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":7)\n+      (edge-to exit (flags \"FALLTHRU\"))\n+    ) ;; block 5\n+    (cnote 31 NOTE_INSN_DELETED)\n+  ) ;; insn-chain\n+  (crtl\n+    (return_rtx \n+      (reg/i:SI ax)\n+    ) ;; return_rtx\n+  ) ;; crtl\n+) ;; function \"test_1\"\n+}\n+\n+/* Verify that the prologue and epilogue were added.  */\n+/* { dg-final { scan-rtl-dump-times \"NOTE_INSN_PROLOGUE_END\" 1 \"pro_and_epilogue\" } }  */\n+\n+/* We expect a jump_insn to \"simple_return\".  */\n+/* { dg-final { scan-rtl-dump-times \"simple_return\" 2 \"pro_and_epilogue\" } }  */\n+"}, {"sha": "dff4a1b0f6b49a942301aec86d02b50dfa9201e9", "filename": "gcc/testsuite/gcc.dg/rtl/x86_64/test-multiple-fns.c", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Fx86_64%2Ftest-multiple-fns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Fx86_64%2Ftest-multiple-fns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Fx86_64%2Ftest-multiple-fns.c?ref=c2e843276310bfa2eb0fa40c6b54f530ac207a4f", "patch": "@@ -0,0 +1,105 @@\n+/* { dg-do run { target x86_64-*-* } } */\n+\n+/* Verify that we can have multiple __RTL functions in one test case.\n+   Each of these __RTL functions returns a const, dumped immediately after\n+   expand.  */\n+\n+extern void abort (void);\n+\n+int __RTL (startwith (\"vregs\")) test_return_42 (void)\n+{\n+  /* C code:\n+     return 42; */\n+(function \"test_return_42\"\n+  (insn-chain\n+    (cnote 1 NOTE_INSN_DELETED)\n+    (block 2\n+      (edge-from entry (flags \"FALLTHRU\"))\n+      (cnote 3 [bb 2] NOTE_INSN_BASIC_BLOCK)\n+      (cnote 2 NOTE_INSN_FUNCTION_BEG)\n+      (cinsn 5 (set (reg:SI <0> [ _1 ])\n+                    (const_int 42)) \"../../src/test-return-const.c\":3)\n+      (cinsn 8 (set (reg:SI <1> [ <retval> ])\n+                    (reg:SI <0> [ _1 ])) \"../../src/test-return-const.c\":3)\n+      (cinsn 12 (set (reg/i:SI ax)\n+                    (reg:SI <1> [ <retval> ])) \"../../src/test-return-const.c\":4)\n+      (cinsn 13 (use (reg/i:SI ax)) \"../../src/test-return-const.c\":4)\n+      (edge-to exit (flags \"FALLTHRU\"))\n+    ) ;; block 2\n+  ) ;; insn-chain\n+  (crtl\n+    (return_rtx \n+      (reg/i:SI ax)\n+    ) ;; return_rtx\n+  ) ;; crtl\n+) ;; function \"test_return_42\"\n+}\n+\n+int __RTL (startwith (\"vregs\")) test_return_43 (void)\n+{\n+  /* C code:\n+     return 43; */\n+(function \"test_return_43\"\n+  (insn-chain\n+    (cnote 1 NOTE_INSN_DELETED)\n+    (block 2\n+      (edge-from entry (flags \"FALLTHRU\"))\n+      (cnote 3 [bb 2] NOTE_INSN_BASIC_BLOCK)\n+      (cnote 2 NOTE_INSN_FUNCTION_BEG)\n+      (cinsn 5 (set (reg:SI <0> [ _1 ])\n+                    (const_int 43)) \"../../src/test-return-const.c\":3)\n+      (cinsn 8 (set (reg:SI <1> [ <retval> ])\n+                    (reg:SI <0> [ _1 ])) \"../../src/test-return-const.c\":3)\n+      (cinsn 12 (set (reg/i:SI ax)\n+                    (reg:SI <1> [ <retval> ])) \"../../src/test-return-const.c\":4)\n+      (cinsn 13 (use (reg/i:SI ax)) \"../../src/test-return-const.c\":4)\n+      (edge-to exit (flags \"FALLTHRU\"))\n+    ) ;; block 2\n+  ) ;; insn-chain\n+  (crtl\n+    (return_rtx \n+      (reg/i:SI ax)\n+    ) ;; return_rtx\n+  ) ;; crtl\n+) ;; function \"test_return_43\"\n+}\n+\n+int __RTL (startwith (\"vregs\")) test_return_44 (void)\n+{\n+  /* C code:\n+     return 44; */\n+(function \"test_return_44\"\n+  (insn-chain\n+    (cnote 1 NOTE_INSN_DELETED)\n+    (block 2\n+      (edge-from entry (flags \"FALLTHRU\"))\n+      (cnote 3 [bb 2] NOTE_INSN_BASIC_BLOCK)\n+      (cnote 2 NOTE_INSN_FUNCTION_BEG)\n+      (cinsn 5 (set (reg:SI <0> [ _1 ])\n+                    (const_int 44)) \"../../src/test-return-const.c\":3)\n+      (cinsn 8 (set (reg:SI <1> [ <retval> ])\n+                    (reg:SI <0> [ _1 ])) \"../../src/test-return-const.c\":3)\n+      (cinsn 12 (set (reg/i:SI ax)\n+                    (reg:SI <1> [ <retval> ])) \"../../src/test-return-const.c\":4)\n+      (cinsn 13 (use (reg/i:SI ax)) \"../../src/test-return-const.c\":4)\n+      (edge-to exit (flags \"FALLTHRU\"))\n+    ) ;; block 2\n+  ) ;; insn-chain\n+  (crtl\n+    (return_rtx \n+      (reg/i:SI ax)\n+    ) ;; return_rtx\n+  ) ;; crtl\n+) ;; function \"test_return_44\"\n+}\n+\n+int main (void)\n+{\n+  if (test_return_42 () != 42)\n+    abort ();\n+  if (test_return_43 () != 43)\n+    abort ();\n+  if (test_return_44 () != 44)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "6c1202d766703daf0dacf431d9e9fdad7af8d542", "filename": "gcc/testsuite/gcc.dg/rtl/x86_64/test-return-const.c.after-expand.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Fx86_64%2Ftest-return-const.c.after-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Fx86_64%2Ftest-return-const.c.after-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Fx86_64%2Ftest-return-const.c.after-expand.c?ref=c2e843276310bfa2eb0fa40c6b54f530ac207a4f", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do run { target x86_64-*-* } } */\n+\n+extern void abort (void);\n+\n+int __RTL (startwith (\"vregs\")) test_returning_constant (void)\n+{\n+  /* C code:\n+     return 42; */\n+(function \"test_returning_constant\"\n+  (insn-chain\n+    (cnote 1 NOTE_INSN_DELETED)\n+    (block 2\n+      (edge-from entry (flags \"FALLTHRU\"))\n+      (cnote 3 [bb 2] NOTE_INSN_BASIC_BLOCK)\n+      (cnote 2 NOTE_INSN_FUNCTION_BEG)\n+      (cinsn 5 (set (reg:SI <0> [ _1 ])\n+                    (const_int 42)) \"../../src/test-return-const.c\":3)\n+      (cinsn 8 (set (reg:SI <1> [ <retval> ])\n+                    (reg:SI <0> [ _1 ])) \"../../src/test-return-const.c\":3)\n+      (cinsn 12 (set (reg/i:SI ax)\n+                    (reg:SI <1> [ <retval> ])) \"../../src/test-return-const.c\":4)\n+      (cinsn 13 (use (reg/i:SI ax)) \"../../src/test-return-const.c\":4)\n+      (edge-to exit (flags \"FALLTHRU\"))\n+    ) ;; block 2\n+  ) ;; insn-chain\n+  (crtl\n+    (return_rtx \n+      (reg/i:SI ax)\n+    ) ;; return_rtx\n+  ) ;; crtl\n+) ;; function \"test_returning_constant\"\n+}\n+\n+int main (void)\n+{\n+  if (test_returning_constant () != 42)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "d83029e12d48dfd737a6794d2ccc5fe23e991060", "filename": "gcc/testsuite/gcc.dg/rtl/x86_64/test-return-const.c.before-fwprop.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Fx86_64%2Ftest-return-const.c.before-fwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Fx86_64%2Ftest-return-const.c.before-fwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Fx86_64%2Ftest-return-const.c.before-fwprop.c?ref=c2e843276310bfa2eb0fa40c6b54f530ac207a4f", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run { target x86_64-*-* } } */\n+/* { dg-options \"-fdump-rtl-fwprop1 -O2\" } */\n+\n+extern void abort (void);\n+\n+int __RTL (startwith (\"fwprop1\")) test_returning_constant (void)\n+{\n+  /* C code:\n+     return 42; */\n+(function \"test_returning_constant\"\n+  (insn-chain\n+    (block 2\n+      (edge-from entry (flags \"FALLTHRU\"))\n+      (cnote 3 [bb 2] NOTE_INSN_BASIC_BLOCK)\n+      (cnote 2 NOTE_INSN_FUNCTION_BEG)\n+      (cinsn 5 (set (reg:SI <0> [ <retval> ])\n+                    (const_int 42)) \"../../src/test-return-const.c\":3)\n+      (cinsn 9 (set (reg/i:SI ax)\n+                    (const_int 42)) \"../../src/test-return-const.c\":4\n+                 (expr_list:REG_DEAD (reg:SI <0> [ <retval> ])))\n+      (cinsn 10 (use (reg/i:SI ax)) \"../../src/test-return-const.c\":4)\n+      (edge-to exit (flags \"FALLTHRU\"))\n+    ) ;; block 2\n+  ) ;; insn-chain\n+  (crtl\n+    (return_rtx \n+      (reg/i:SI ax)\n+    ) ;; return_rtx\n+  ) ;; crtl\n+) ;; function \"test_returning_constant\"\n+}\n+\n+/* Verify that insn 5 is eliminated.  */\n+/* { dg-final { scan-rtl-dump \"deferring deletion of insn with uid = 5\" \"fwprop1\" } } */\n+/* { dg-final { scan-rtl-dump \"Deleted 1 trivially dead insns\" \"fwprop1\" } } */\n+\n+int main (void)\n+{\n+  if (test_returning_constant () != 42)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "4496868c5129f355fd0f4b22ec41e72595a0d161", "filename": "gcc/testsuite/gcc.dg/rtl/x86_64/test-rtl.c", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Fx86_64%2Ftest-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Fx86_64%2Ftest-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Fx86_64%2Ftest-rtl.c?ref=c2e843276310bfa2eb0fa40c6b54f530ac207a4f", "patch": "@@ -0,0 +1,101 @@\n+/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+\n+/* Test of embedding RTL dump in a C function, tagged with \"__RTL\".\n+\n+   This is a dump of test.c from immediately after \"expand\", for x86_64.  */\n+\n+int __RTL test_1 (int i, int j, int k)\n+{\n+  /*\n+    if (i < j)\n+      return k + 4;\n+    else\n+      return -k;\n+  */\n+(function \"test_1\"\n+  (insn-chain\n+    (cnote 1 NOTE_INSN_DELETED)\n+    (block 2\n+      (edge-from entry (flags \"FALLTHRU\"))\n+      (cnote 6 [bb 2] NOTE_INSN_BASIC_BLOCK)\n+      (cinsn 2 (set (mem/c:SI (plus:DI (reg/f:DI virtual-stack-vars)\n+                            (const_int -4)) [1 i+0 S4 A32])\n+                    (reg:SI di [ i ])) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":2)\n+      (cinsn 3 (set (mem/c:SI (plus:DI (reg/f:DI virtual-stack-vars)\n+                            (const_int -8)) [1 j+0 S4 A32])\n+                    (reg:SI si [ j ])) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":2)\n+      (cinsn 4 (set (mem/c:SI (plus:DI (reg/f:DI virtual-stack-vars)\n+                            (const_int -12)) [1 k+0 S4 A32])\n+                    (reg:SI dx [ k ])) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":2)\n+      (cnote 5 NOTE_INSN_FUNCTION_BEG)\n+      (cinsn 8 (set (reg:SI <2>)\n+                    (mem/c:SI (plus:DI (reg/f:DI virtual-stack-vars)\n+                            (const_int -4)) [1 i+0 S4 A32])) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":3)\n+      (cinsn 9 (set (reg:CCGC flags)\n+                    (compare:CCGC (reg:SI <2>)\n+                        (mem/c:SI (plus:DI (reg/f:DI virtual-stack-vars)\n+                                (const_int -8)) [1 j+0 S4 A32]))) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":3)\n+      (cjump_insn 10 (set (pc)\n+                    (if_then_else (ge (reg:CCGC flags)\n+                            (const_int 0))\n+                        (label_ref 16)\n+                        (pc))) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":3)\n+      (edge-to 4 (flags \"FALLTHRU\"))\n+      (edge-to 5)\n+    ) ;; block 2\n+    (block 4\n+      (edge-from 2 (flags \"FALLTHRU\"))\n+      (cnote 11 [bb 4] NOTE_INSN_BASIC_BLOCK)\n+      (cinsn 12 (set (reg:SI <3>)\n+                    (mem/c:SI (plus:DI (reg/f:DI virtual-stack-vars)\n+                            (const_int -12)) [1 k+0 S4 A32])) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":4)\n+      (cinsn 13 (parallel [\n+                        (set (reg:SI <0> [ _1 ])\n+                            (plus:SI (reg:SI <3>)\n+                                (const_int 4)))\n+                        (clobber (reg:CC flags))\n+                    ]) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":4\n+                 (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI virtual-stack-vars)\n+                                (const_int -12)) [1 k+0 S4 A32])\n+                        (const_int 4))))\n+      (cjump_insn 14 (set (pc)\n+                    (label_ref 20)) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":4)\n+      (edge-to 6)\n+    ) ;; block 4\n+    (cbarrier 15)\n+    (block 5\n+      (edge-from 2)\n+      (clabel 16 2)\n+      (cnote 17 [bb 5] NOTE_INSN_BASIC_BLOCK)\n+      (cinsn 18 (set (reg:SI <4>)\n+                    (mem/c:SI (plus:DI (reg/f:DI virtual-stack-vars)\n+                            (const_int -12)) [1 k+0 S4 A32])) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":6)\n+      (cinsn 19 (parallel [\n+                        (set (reg:SI <0> [ _1 ])\n+                            (neg:SI (reg:SI <4>)))\n+                        (clobber (reg:CC flags))\n+                    ]) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":6\n+                 (expr_list:REG_EQUAL (neg:SI (mem/c:SI (plus:DI (reg/f:DI virtual-stack-vars)\n+                                (const_int -12)) [1 k+0 S4 A32]))))\n+      (edge-to 6 (flags \"FALLTHRU\"))\n+    ) ;; block 5\n+    (block 6\n+      (edge-from 4)\n+      (edge-from 5 (flags \"FALLTHRU\"))\n+      (clabel 20 3)\n+      (cnote 21 [bb 6] NOTE_INSN_BASIC_BLOCK)\n+      (cinsn 22 (set (reg:SI <1> [ <retval> ])\n+                    (reg:SI <0> [ _1 ])))\n+      (cinsn 26 (set (reg/i:SI ax)\n+                    (reg:SI <1> [ <retval> ])) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":7)\n+      (cinsn 27 (use (reg/i:SI ax)) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":7)\n+      (edge-to exit (flags \"FALLTHRU\"))\n+    ) ;; block 6\n+  ) ;; insn-chain\n+  (crtl\n+    (return_rtx \n+      (reg/i:SI ax)\n+    ) ;; return_rtx\n+  ) ;; crtl\n+) ;; function \"test_1\"\n+}"}, {"sha": "a783ea868f01ea0d216fbc4987c6fea94cf073e6", "filename": "gcc/testsuite/gcc.dg/rtl/x86_64/test_1.h", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Fx86_64%2Ftest_1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Fx86_64%2Ftest_1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Fx86_64%2Ftest_1.h?ref=c2e843276310bfa2eb0fa40c6b54f530ac207a4f", "patch": "@@ -0,0 +1,16 @@\n+/* Shared test code for the various __RTL tests of test_1 that\n+   start at different passes.  */\n+\n+extern void abort (void);\n+extern int test_1 (int i, int j, int k);\n+\n+int main (void)\n+{\n+  if (test_1 (0, 0, 3) != -3)\n+    abort ();\n+\n+  if (test_1 (0, 1, 3) != 7)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "b8d143ee25b94d8b7660c7138dc30d98699b8fb3", "filename": "gcc/testsuite/gcc.dg/rtl/x86_64/times-two.c.after-expand.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Fx86_64%2Ftimes-two.c.after-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Fx86_64%2Ftimes-two.c.after-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Fx86_64%2Ftimes-two.c.after-expand.c?ref=c2e843276310bfa2eb0fa40c6b54f530ac207a4f", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-do run { target x86_64-*-* } } */\n+\n+extern void abort (void);\n+\n+int __RTL (startwith (\"vregs\")) times_two (int i)\n+{\n+  /* C function:\n+     return i * 2;  */\n+(function \"times_two\"\n+  (param \"i\"\n+    (DECL_RTL (mem/c:SI (plus:DI (reg/f:DI virtual-stack-vars)\n+                    (const_int -4)) [1 i+0 S4 A32]))\n+    (DECL_RTL_INCOMING (reg:SI di [ i ]))\n+  ) ;; param \"i\"\n+  (insn-chain\n+    (cnote 1 NOTE_INSN_DELETED)\n+    (block 2\n+      (edge-from entry (flags \"FALLTHRU\"))\n+      (cnote 4 [bb 2] NOTE_INSN_BASIC_BLOCK)\n+      (cinsn 2 (set (mem/c:SI (plus:DI (reg/f:DI virtual-stack-vars)\n+                            (const_int -4)) [1 i+0 S4 A32])\n+                    (reg:SI di [ i ])) \"../../src/times-two.c\":2\n+                 (nil))\n+      (cnote 3 NOTE_INSN_FUNCTION_BEG)\n+      (cinsn 6 (set (reg:SI <2>)\n+                    (mem/c:SI (plus:DI (reg/f:DI virtual-stack-vars)\n+                            (const_int -4)) [1 i+0 S4 A32])) \"../../src/times-two.c\":3\n+                 (nil))\n+      (cinsn 7 (parallel [\n+                        (set (reg:SI <0> [ _2 ])\n+                            (ashift:SI (reg:SI <2>)\n+                                (const_int 1)))\n+                        (clobber (reg:CC flags))\n+                    ]) \"../../src/times-two.c\":3\n+                 (expr_list:REG_EQUAL (ashift:SI (mem/c:SI (plus:DI (reg/f:DI virtual-stack-vars)\n+                                (const_int -4)) [1 i+0 S4 A32])\n+                        (const_int 1))\n+                    (nil)))\n+      (cinsn 10 (set (reg:SI <1> [ <retval> ])\n+                    (reg:SI <0> [ _2 ])) \"../../src/times-two.c\":3\n+                 (nil))\n+      (cinsn 14 (set (reg/i:SI ax)\n+                    (reg:SI <1> [ <retval> ])) \"../../src/times-two.c\":4\n+                 (nil))\n+      (cinsn 15 (use (reg/i:SI ax)) \"../../src/times-two.c\":4\n+                 (nil))\n+      (edge-to exit (flags \"FALLTHRU\"))\n+    ) ;; block 2\n+  ) ;; insn-chain\n+  (crtl\n+    (return_rtx \n+      (reg/i:SI ax)\n+    ) ;; return_rtx\n+  ) ;; crtl\n+) ;; function \"times_two\"\n+}\n+\n+int main (void)\n+{\n+  if (times_two (0) != 0)\n+    abort ();\n+\n+  if (times_two (1) != 2)\n+    abort ();\n+\n+  if (times_two (100) != 200)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "45f4961a5196b052685dc81840bd0e3f61de538d", "filename": "gcc/testsuite/gcc.dg/rtl/x86_64/times-two.c.before-df.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Fx86_64%2Ftimes-two.c.before-df.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Fx86_64%2Ftimes-two.c.before-df.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Fx86_64%2Ftimes-two.c.before-df.c?ref=c2e843276310bfa2eb0fa40c6b54f530ac207a4f", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do compile { target x86_64-*-* } } */\n+/* { dg-options \"-fdump-rtl-dfinit\" } */\n+\n+int __RTL (startwith (\"rtl-dfinit\")) times_two (int i)\n+{\n+  /* C function:\n+     return i * 2;  */\n+(function \"times_two\"\n+  (insn-chain\n+    (cnote 1 NOTE_INSN_DELETED)\n+    (block 2\n+      (edge-from entry (flags \"FALLTHRU\"))\n+      (cnote 4 [bb 2] NOTE_INSN_BASIC_BLOCK)\n+      (cinsn 2 (set (mem/c:SI (plus:DI (reg/f:DI frame)\n+                            (const_int -4)) [1 i+0 S4 A32])\n+                    (reg:SI di [ i ])) \"../../src/times-two.c\":2)\n+      (cnote 3 NOTE_INSN_FUNCTION_BEG)\n+      (cinsn 6 (set (reg:SI <2>)\n+                    (mem/c:SI (plus:DI (reg/f:DI frame)\n+                            (const_int -4)) [1 i+0 S4 A32])) \"../../src/times-two.c\":3)\n+      (cinsn 7 (parallel [\n+                        (set (reg:SI <0> [ _2 ])\n+                            (ashift:SI (reg:SI <2>)\n+                                (const_int 1)))\n+                        (clobber (reg:CC flags))\n+                    ]) \"../../src/times-two.c\":3\n+                 (expr_list:REG_EQUAL (ashift:SI (mem/c:SI (plus:DI (reg/f:DI frame)\n+                                (const_int -4)) [1 i+0 S4 A32])\n+                        (const_int 1))))\n+      (cinsn 10 (set (reg:SI <1> [ <retval> ])\n+                    (reg:SI <0> [ _2 ])) \"../../src/times-two.c\":3)\n+      (cinsn 14 (set (reg/i:SI ax)\n+                    (reg:SI <1> [ <retval> ])) \"../../src/times-two.c\":4)\n+      (cinsn 15 (use (reg/i:SI ax)) \"../../src/times-two.c\":4)\n+      (edge-to exit (flags \"FALLTHRU\"))\n+    ) ;; block 2\n+  ) ;; insn-chain\n+  (crtl\n+    (return_rtx \n+      (reg/i:SI ax)\n+    ) ;; return_rtx\n+  ) ;; crtl\n+) ;; function \"times_two\"\n+}\n+\n+/* Verify that the dataflow information matches what cc1 would have\n+   generated.  In particular, in earlier versions of the RTL\n+   frontend, the exit block use of reg 0 (ax) wasn't picked up\n+   on, due to not setting up crtl->return_rtx based on\n+   DECL_RESULT (fndecl).  */\n+\n+/* { dg-final { scan-rtl-dump \";;  exit block uses.*0 .ax. 6 .bp. 7 .sp. 20 .frame.\" \"dfinit\" } } */\n+\n+/* { dg-final { scan-rtl-dump \";;  regs ever live.*0 .ax. 5 .di. 17 .flags.\" \"dfinit\" } } */"}, {"sha": "3b89cb962f1b95d210960e67f90a3336e06af35c", "filename": "gcc/testsuite/gcc.dg/rtl/x86_64/times-two.h", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Fx86_64%2Ftimes-two.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Fx86_64%2Ftimes-two.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Fx86_64%2Ftimes-two.h?ref=c2e843276310bfa2eb0fa40c6b54f530ac207a4f", "patch": "@@ -0,0 +1,22 @@\n+/* Shared test code for the various __RTL tests of times_two that\n+   start at different passes.  */\n+\n+extern void abort (void);\n+int times_two (int i);\n+\n+int main (void)\n+{\n+  if (times_two (0) != 0)\n+    abort ();\n+\n+  if (times_two (1) != 2)\n+    abort ();\n+\n+  if (times_two (100) != 200)\n+    abort ();\n+\n+  if (times_two (-20) != -40)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "b97d606f22c397f720632e14e5bd76800317dca3", "filename": "gcc/testsuite/gcc.dg/rtl/x86_64/vregs.c", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Fx86_64%2Fvregs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e843276310bfa2eb0fa40c6b54f530ac207a4f/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Fx86_64%2Fvregs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Fx86_64%2Fvregs.c?ref=c2e843276310bfa2eb0fa40c6b54f530ac207a4f", "patch": "@@ -0,0 +1,112 @@\n+/* { dg-do run { target x86_64-*-* } } */\n+/* { dg-options \"-fdump-rtl-vregs\" } */\n+\n+/* Lightly-modified dump of test.c.225r.expand for x86_64.  */\n+\n+#include \"test_1.h\"\n+\n+int __RTL (startwith (\"vregs\")) test_1 (int i, int j, int k)\n+{\n+(function \"test_1\"\n+  (param \"i\"\n+    (DECL_RTL (mem/c:SI (plus:DI (reg/f:DI frame)\n+        (const_int -4)) [1 i+0 S4 A32]))\n+    (DECL_RTL_INCOMING (reg:SI di [ i ])))\n+  (param \"j\"\n+    (DECL_RTL (mem/c:SI (plus:DI (reg/f:DI frame)\n+        (const_int -8)) [1 j+0 S4 A32]))\n+    (DECL_RTL_INCOMING (reg:SI si [ j ])))\n+  (param \"k\"\n+    (DECL_RTL (mem/c:SI (plus:DI (reg/f:DI frame)\n+        (const_int -12)) [1 k+0 S4 A32]))\n+    (DECL_RTL_INCOMING (reg:SI dx [ k ])))\n+  (insn-chain\n+    (cnote 1 NOTE_INSN_DELETED)\n+    (block 2\n+      (edge-from entry (flags \"FALLTHRU\"))\n+      (cnote 6 [bb 2] NOTE_INSN_BASIC_BLOCK)\n+      (cinsn 2 (set (mem/c:SI (plus:DI (reg/f:DI virtual-stack-vars)\n+                            (const_int -4)) [1 i+0 S4 A32])\n+                    (reg:SI di [ i ])) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":2)\n+      (cinsn 3 (set (mem/c:SI (plus:DI (reg/f:DI virtual-stack-vars)\n+                            (const_int -8)) [1 j+0 S4 A32])\n+                    (reg:SI si [ j ])) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":2)\n+      (cinsn 4 (set (mem/c:SI (plus:DI (reg/f:DI virtual-stack-vars)\n+                            (const_int -12)) [1 k+0 S4 A32])\n+                    (reg:SI dx [ k ])) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":2)\n+      (cnote 5 NOTE_INSN_FUNCTION_BEG)\n+      (cinsn 8 (set (reg:SI <2>)\n+                    (mem/c:SI (plus:DI (reg/f:DI virtual-stack-vars)\n+                            (const_int -4)) [1 i+0 S4 A32])) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":3)\n+      (cinsn 9 (set (reg:CCGC flags)\n+                    (compare:CCGC (reg:SI <2>)\n+                        (mem/c:SI (plus:DI (reg/f:DI virtual-stack-vars)\n+                                (const_int -8)) [1 j+0 S4 A32]))) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":3)\n+      (cjump_insn 10 (set (pc)\n+                    (if_then_else (ge (reg:CCGC flags)\n+                            (const_int 0))\n+                        (label_ref 16)\n+                        (pc))) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":3)\n+      (edge-to 4 (flags \"FALLTHRU\"))\n+      (edge-to 5)\n+    ) ;; block 2\n+    (block 4\n+      (edge-from 2 (flags \"FALLTHRU\"))\n+      (cnote 11 [bb 4] NOTE_INSN_BASIC_BLOCK)\n+      (cinsn 12 (set (reg:SI <3>)\n+                    (mem/c:SI (plus:DI (reg/f:DI virtual-stack-vars)\n+                            (const_int -12)) [1 k+0 S4 A32])) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":4)\n+      (cinsn 13 (parallel [\n+                        (set (reg:SI <0> [ _1 ])\n+                            (plus:SI (reg:SI <3>)\n+                                (const_int 4)))\n+                        (clobber (reg:CC flags))\n+                    ]) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":4\n+                 (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI virtual-stack-vars)\n+                                (const_int -12)) [1 k+0 S4 A32])\n+                        (const_int 4))))\n+      (cjump_insn 14 (set (pc)\n+                    (label_ref 20)) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":4)\n+      (edge-to 6)\n+    ) ;; block 4\n+    (cbarrier 15)\n+    (block 5\n+      (edge-from 2)\n+      (clabel 16 2)\n+      (cnote 17 [bb 5] NOTE_INSN_BASIC_BLOCK)\n+      (cinsn 18 (set (reg:SI <4>)\n+                    (mem/c:SI (plus:DI (reg/f:DI virtual-stack-vars)\n+                            (const_int -12)) [1 k+0 S4 A32])) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":6)\n+      (cinsn 19 (parallel [\n+                        (set (reg:SI <0> [ _1 ])\n+                            (neg:SI (reg:SI <4>)))\n+                        (clobber (reg:CC flags))\n+                    ]) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":6\n+                 (expr_list:REG_EQUAL (neg:SI (mem/c:SI (plus:DI (reg/f:DI virtual-stack-vars)\n+                                (const_int -12)) [1 k+0 S4 A32]))))\n+      (edge-to 6 (flags \"FALLTHRU\"))\n+    ) ;; block 5\n+    (block 6\n+      (edge-from 4)\n+      (edge-from 5 (flags \"FALLTHRU\"))\n+      (clabel 20 3)\n+      (cnote 21 [bb 6] NOTE_INSN_BASIC_BLOCK)\n+      (cinsn 22 (set (reg:SI <1> [ <retval> ])\n+                    (reg:SI <0> [ _1 ])))\n+      (cinsn 26 (set (reg/i:SI ax)\n+                    (reg:SI <1> [ <retval> ])) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":7)\n+      (cinsn 27 (use (reg/i:SI ax)) \"../../src/gcc/testsuite/gcc.dg/rtl/test.c\":7)\n+      (edge-to exit (flags \"FALLTHRU\"))\n+    ) ;; block 6\n+  ) ;; insn-chain\n+  (crtl\n+    (return_rtx \n+      (reg/i:SI ax)\n+    ) ;; return_rtx\n+  ) ;; crtl\n+) ;; function \"test_1\"\n+}\n+\n+/* The 9 instances of \"virtual-stack-vars\" should now all be \"frame\".  */\n+/* { dg-final { scan-rtl-dump-times \"frame\" 9 \"vregs\" } }  */\n+/* { dg-final { scan-rtl-dump-not \"virtual-stack-vars\" \"vregs\" } }  */"}]}