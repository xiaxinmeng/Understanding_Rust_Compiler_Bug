{"sha": "1c9f675fd91d50b9c4eb944481ab6a59386a89c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM5ZjY3NWZkOTFkNTBiOWM0ZWI5NDQ0ODFhYjZhNTkzODZhODljNw==", "commit": {"author": {"name": "Ed Smith-Rowland", "email": "3dw4rd@verizon.net", "date": "2013-06-01T18:37:47Z"}, "committer": {"name": "Edward Smith-Rowland", "email": "emsr@gcc.gnu.org", "date": "2013-06-01T18:37:47Z"}, "message": "Implement N3642 - User-defined Literals for Standard Library Types\n\n2013-05-30  Ed Smith-Rowland  <3dw4rd@verizon.net>\n\n\tImplement N3642 - User-defined Literals for Standard Library Types\n\t* include/bits/parse_numbers.h: New.\n\t* include/std/chrono: Add duration literal operators.\n\t* include/bits/basic_string.h: Add string literal operators.\n\t* include/Makefile.in: Add parse_numbers.h.\n\t* include/Makefile.am: Ditto.\n\t* testsuite/20_util/duration/literals/values.cc: New.\n\t* testsuite/20_util/duration/literals/types.cc: New.\n\t* testsuite/20_util/duration/requirements/typedefs_neg1.cc: Adjust.\n\t* testsuite/20_util/duration/requirements/typedefs_neg2.cc: Adjust.\n\t* testsuite/20_util/duration/requirements/typedefs_neg3.cc: Adjust.\n\t* testsuite/21_strings/basic_string/literals/values.cc: New.\n\t* testsuite/21_strings/basic_string/literals/types.cc: New.\n\nFrom-SVN: r199584", "tree": {"sha": "097d9ec3dc554024a29227d76b6237d9cb0f1cdb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/097d9ec3dc554024a29227d76b6237d9cb0f1cdb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c9f675fd91d50b9c4eb944481ab6a59386a89c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c9f675fd91d50b9c4eb944481ab6a59386a89c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c9f675fd91d50b9c4eb944481ab6a59386a89c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c9f675fd91d50b9c4eb944481ab6a59386a89c7/comments", "author": {"login": "emsr", "id": 1936479, "node_id": "MDQ6VXNlcjE5MzY0Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1936479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emsr", "html_url": "https://github.com/emsr", "followers_url": "https://api.github.com/users/emsr/followers", "following_url": "https://api.github.com/users/emsr/following{/other_user}", "gists_url": "https://api.github.com/users/emsr/gists{/gist_id}", "starred_url": "https://api.github.com/users/emsr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emsr/subscriptions", "organizations_url": "https://api.github.com/users/emsr/orgs", "repos_url": "https://api.github.com/users/emsr/repos", "events_url": "https://api.github.com/users/emsr/events{/privacy}", "received_events_url": "https://api.github.com/users/emsr/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "38e55e5c36ae095d571ef7fec96e5a82d7c78c1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38e55e5c36ae095d571ef7fec96e5a82d7c78c1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38e55e5c36ae095d571ef7fec96e5a82d7c78c1c"}], "stats": {"total": 851, "additions": 848, "deletions": 3}, "files": [{"sha": "2ec47f74224ebae92d61b8690cfb20597c1cebd1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c9f675fd91d50b9c4eb944481ab6a59386a89c7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c9f675fd91d50b9c4eb944481ab6a59386a89c7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1c9f675fd91d50b9c4eb944481ab6a59386a89c7", "patch": "@@ -1,3 +1,19 @@\n+2013-05-30  Ed Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\tImplement N3642 - User-defined Literals for Standard Library Types\n+\t* include/bits/parse_numbers.h: New.\n+\t* include/std/chrono: Add duration literal operators.\n+\t* include/bits/basic_string.h: Add string literal operators.\n+\t* include/Makefile.in: Add parse_numbers.h.\n+\t* include/Makefile.am: Ditto.\n+\t* testsuite/20_util/duration/literals/values.cc: New.\n+\t* testsuite/20_util/duration/literals/types.cc: New.\n+\t* testsuite/20_util/duration/requirements/typedefs_neg1.cc: Adjust.\n+\t* testsuite/20_util/duration/requirements/typedefs_neg2.cc: Adjust.\n+\t* testsuite/20_util/duration/requirements/typedefs_neg3.cc: Adjust.\n+\t* testsuite/21_strings/basic_string/literals/values.cc: New.\n+\t* testsuite/21_strings/basic_string/literals/types.cc: New.\n+\n 2013-05-28  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* src/c++11/compatibility-chrono.cc (steady_clock::now()): If"}, {"sha": "f09300b8bee4c165534660830e892c131a2fcb7b", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c9f675fd91d50b9c4eb944481ab6a59386a89c7/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c9f675fd91d50b9c4eb944481ab6a59386a89c7/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=1c9f675fd91d50b9c4eb944481ab6a59386a89c7", "patch": "@@ -117,6 +117,7 @@ bits_headers = \\\n \t${bits_srcdir}/move.h \\\n \t${bits_srcdir}/ostream.tcc \\\n \t${bits_srcdir}/ostream_insert.h \\\n+\t${bits_srcdir}/parse_numbers.h \\\n \t${bits_srcdir}/postypes.h \\\n \t${bits_srcdir}/ptr_traits.h \\\n \t${bits_srcdir}/random.h \\"}, {"sha": "a090cad9fcefc582c699233db6f0ff58934e5e74", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c9f675fd91d50b9c4eb944481ab6a59386a89c7/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c9f675fd91d50b9c4eb944481ab6a59386a89c7/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=1c9f675fd91d50b9c4eb944481ab6a59386a89c7", "patch": "@@ -379,6 +379,7 @@ bits_headers = \\\n \t${bits_srcdir}/move.h \\\n \t${bits_srcdir}/ostream.tcc \\\n \t${bits_srcdir}/ostream_insert.h \\\n+\t${bits_srcdir}/parse_numbers.h \\\n \t${bits_srcdir}/postypes.h \\\n \t${bits_srcdir}/ptr_traits.h \\\n \t${bits_srcdir}/random.h \\"}, {"sha": "a249df237422f0e9693bc074f7deef7b768dcb38", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c9f675fd91d50b9c4eb944481ab6a59386a89c7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c9f675fd91d50b9c4eb944481ab6a59386a89c7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=1c9f675fd91d50b9c4eb944481ab6a59386a89c7", "patch": "@@ -3106,6 +3106,43 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n \n+#if __cplusplus > 201103L\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+inline namespace literals {\n+inline namespace string_literals {\n+\n+  inline basic_string<char>\n+  operator\"\" s(const char* __str, size_t __len)\n+  { return basic_string<char>{__str, __len}; }\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  inline basic_string<wchar_t>\n+  operator\"\" s(const wchar_t* __str, size_t __len)\n+  { return basic_string<wchar_t>{__str, __len}; }\n+#endif\n+\n+#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n+  inline basic_string<char16_t>\n+  operator\"\" s(const char16_t* __str, size_t __len)\n+  { return basic_string<char16_t>{__str, __len}; }\n+\n+  inline basic_string<char32_t>\n+  operator\"\" s(const char32_t* __str, size_t __len)\n+  { return basic_string<char32_t>{__str, __len}; }\n+#endif\n+\n+} // inline namespace string_literals\n+} // inline namespace literals\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace std\n+\n+#endif // __cplusplus > 201103L\n+\n #endif // C++11\n \n #endif /* _BASIC_STRING_H */"}, {"sha": "eaa3d27a18ac4c6c38ac579b907846b15070f09d", "filename": "libstdc++-v3/include/bits/parse_numbers.h", "status": "added", "additions": 417, "deletions": 0, "changes": 417, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c9f675fd91d50b9c4eb944481ab6a59386a89c7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fparse_numbers.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c9f675fd91d50b9c4eb944481ab6a59386a89c7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fparse_numbers.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fparse_numbers.h?ref=1c9f675fd91d50b9c4eb944481ab6a59386a89c7", "patch": "@@ -0,0 +1,417 @@\n+// Components for compile-time parsing of numbers -*- C++ -*-\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file bits/parse_numbers.h\n+ *  This is an internal header file, included by other library headers.\n+ *  Do not attempt to use it directly. @headername{chrono}\n+ */\n+\n+#ifndef _PARSE_NUMBERS_H\n+#define _PARSE_NUMBERS_H 1\n+\n+#pragma GCC system_header\n+\n+// From n3642.pdf except I added binary literals and digit separator '`'.\n+\n+#if __cplusplus > 201103L\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+namespace __parse_int {\n+\n+  template<unsigned _Base, char _Dig>\n+    struct _Digit;\n+\n+  template<unsigned _Base>\n+    struct _Digit<_Base, '0'>\n+    {\n+      static constexpr bool valid{true};\n+      static constexpr unsigned value{0};\n+    };\n+\n+  template<unsigned _Base>\n+    struct _Digit<_Base, '1'>\n+    {\n+      static constexpr bool valid{true};\n+      static constexpr unsigned value{1};\n+    };\n+\n+  template<unsigned _Base>\n+    struct _Digit<_Base, '2'>\n+    {\n+      static_assert(_Base > 2, \"invalid digit\");\n+      static constexpr bool valid{true};\n+      static constexpr unsigned value{2};\n+    };\n+\n+  template<unsigned _Base>\n+    struct _Digit<_Base, '3'>\n+    {\n+      static_assert(_Base > 3, \"invalid digit\");\n+      static constexpr bool valid{true};\n+      static constexpr unsigned value{3};\n+    };\n+\n+  template<unsigned _Base>\n+    struct _Digit<_Base, '4'>\n+    {\n+      static_assert(_Base > 4, \"invalid digit\");\n+      static constexpr bool valid{true};\n+      static constexpr unsigned value{4};\n+    };\n+\n+  template<unsigned _Base>\n+    struct _Digit<_Base, '5'>\n+    {\n+      static_assert(_Base > 5, \"invalid digit\");\n+      static constexpr bool valid{true};\n+      static constexpr unsigned value{5};\n+    };\n+\n+  template<unsigned _Base>\n+    struct _Digit<_Base, '6'>\n+    {\n+      static_assert(_Base > 6, \"invalid digit\");\n+      static constexpr bool valid{true};\n+      static constexpr unsigned value{6};\n+    };\n+\n+  template<unsigned _Base>\n+    struct _Digit<_Base, '7'>\n+    {\n+      static_assert(_Base > 7, \"invalid digit\");\n+      static constexpr bool valid{true};\n+      static constexpr unsigned value{7};\n+    };\n+\n+  template<unsigned _Base>\n+    struct _Digit<_Base, '8'>\n+    {\n+      static_assert(_Base > 8, \"invalid digit\");\n+      static constexpr bool valid{true};\n+      static constexpr unsigned value{8};\n+    };\n+\n+  template<unsigned _Base>\n+    struct _Digit<_Base, '9'>\n+    {\n+      static_assert(_Base > 9, \"invalid digit\");\n+      static constexpr bool valid{true};\n+      static constexpr unsigned value{9};\n+    };\n+\n+  template<unsigned _Base>\n+    struct _Digit<_Base, 'a'>\n+    {\n+      static_assert(_Base > 0xa, \"invalid digit\");\n+      static constexpr bool valid{true};\n+      static constexpr unsigned value{0xa};\n+    };\n+\n+  template<unsigned _Base>\n+    struct _Digit<_Base, 'A'>\n+    {\n+      static_assert(_Base > 0xa, \"invalid digit\");\n+      static constexpr bool valid{true};\n+      static constexpr unsigned value{0xa};\n+    };\n+\n+  template<unsigned _Base>\n+    struct _Digit<_Base, 'b'>\n+    {\n+      static_assert(_Base > 0xb, \"invalid digit\");\n+      static constexpr bool valid{true};\n+      static constexpr unsigned value{0xb};\n+    };\n+\n+  template<unsigned _Base>\n+    struct _Digit<_Base, 'B'>\n+    {\n+      static_assert(_Base > 0xb, \"invalid digit\");\n+      static constexpr bool valid{true};\n+      static constexpr unsigned value{0xb};\n+    };\n+\n+  template<unsigned _Base>\n+    struct _Digit<_Base, 'c'>\n+    {\n+      static_assert(_Base > 0xc, \"invalid digit\");\n+      static constexpr bool valid{true};\n+      static constexpr unsigned value{0xc};\n+    };\n+\n+  template<unsigned _Base>\n+    struct _Digit<_Base, 'C'>\n+    {\n+      static_assert(_Base > 0xc, \"invalid digit\");\n+      static constexpr bool valid{true};\n+      static constexpr unsigned value{0xc};\n+    };\n+\n+  template<unsigned _Base>\n+    struct _Digit<_Base, 'd'>\n+    {\n+      static_assert(_Base > 0xd, \"invalid digit\");\n+      static constexpr bool valid{true};\n+      static constexpr unsigned value{0xd};\n+    };\n+\n+  template<unsigned _Base>\n+    struct _Digit<_Base, 'D'>\n+    {\n+      static_assert(_Base > 0xd, \"invalid digit\");\n+      static constexpr bool valid{true};\n+      static constexpr unsigned value{0xd};\n+    };\n+\n+  template<unsigned _Base>\n+    struct _Digit<_Base, 'e'>\n+    {\n+      static_assert(_Base > 0xe, \"invalid digit\");\n+      static constexpr bool valid{true};\n+      static constexpr unsigned value{0xe};\n+    };\n+\n+  template<unsigned _Base>\n+    struct _Digit<_Base, 'E'>\n+    {\n+      static_assert(_Base > 0xe, \"invalid digit\");\n+      static constexpr bool valid{true};\n+      static constexpr unsigned value{0xe};\n+    };\n+\n+  template<unsigned _Base>\n+    struct _Digit<_Base, 'f'>\n+    {\n+      static_assert(_Base > 0xf, \"invalid digit\");\n+      static constexpr bool valid{true};\n+      static constexpr unsigned value{0xf};\n+    };\n+\n+  template<unsigned _Base>\n+    struct _Digit<_Base, 'F'>\n+    {\n+      static_assert(_Base > 0xf, \"invalid digit\");\n+      static constexpr bool valid{true};\n+      static constexpr unsigned value{0xf};\n+    };\n+\n+  //  Digit separator\n+  template<unsigned _Base>\n+    struct _Digit<_Base, '`'>\n+    {\n+      static constexpr bool valid{false};\n+      static constexpr unsigned value{0};\n+    };\n+\n+\n+//------------------------------------------------------------------------------\n+\n+  template<unsigned _Base, char _Dig, char... _Digs>\n+    struct _Digits_help\n+    {\n+      static constexpr unsigned\n+\tvalue{_Digit<_Base, _Dig>::valid ?\n+\t      1U + _Digits_help<_Base, _Digs...>::value :\n+\t      _Digits_help<_Base, _Digs...>::value};\n+    };\n+\n+  template<unsigned _Base, char _Dig>\n+    struct _Digits_help<_Base, _Dig>\n+    {\n+      static constexpr unsigned value{_Digit<_Base, _Dig>::valid ? 1U : 0U};\n+    };\n+\n+  template<unsigned _Base, char... _Digs>\n+    struct _Digits\n+    {\n+      static constexpr unsigned value{_Digits_help<_Base, _Digs...>::value};\n+    };\n+\n+  template<unsigned _Base>\n+    struct _Digits<_Base>\n+    {\n+      static constexpr unsigned value{0U};\n+    };\n+\n+//------------------------------------------------------------------------------\n+\n+  template<unsigned _Base, char _Dig, char... _Digs>\n+    struct _Power_help\n+    {\n+      static constexpr unsigned\n+\tvalue{_Digit<_Base, _Dig>::valid ?\n+\t      _Base * _Power_help<_Base, _Digs...>::value :\n+\t      _Power_help<_Base, _Digs...>::value};\n+    };\n+\n+  template<unsigned _Base, char _Dig>\n+    struct _Power_help<_Base, _Dig>\n+    {\n+      static constexpr unsigned value{_Digit<_Base, _Dig>::valid ? 1U : 0U};\n+    };\n+\n+  template<unsigned _Base, char... _Digs>\n+    struct _Power\n+    {\n+      static constexpr unsigned value{_Power_help<_Base, _Digs...>::value};\n+    };\n+\n+  template<unsigned _Base>\n+    struct _Power<_Base>\n+    {\n+      static constexpr unsigned value{0U};\n+    };\n+\n+//------------------------------------------------------------------------------\n+\n+  template<unsigned _Base, unsigned _Pow, char _Dig, char... _Digs>\n+    struct _Number_help\n+    {\n+      static constexpr unsigned\n+\tvalue{_Digit<_Base, _Dig>::valid ?\n+\t      _Pow * _Digit<_Base, _Dig>::value\n+\t      + _Number_help<_Base, _Pow / _Base, _Digs...>::value :\n+\t      _Number_help<_Base, _Pow, _Digs...>::value};\n+    };\n+\n+  template<unsigned _Base, unsigned _Pow, char _Dig>\n+    struct _Number_help<_Base, _Pow, _Dig>\n+    {\n+      //static_assert(_Pow == 1U, \"power should be one\");\n+      static constexpr unsigned\n+\tvalue{_Digit<_Base, _Dig>::valid ? _Digit<_Base, _Dig>::value : 0U};\n+    };\n+\n+  template<unsigned _Base, char... _Digs>\n+    struct _Number\n+    {\n+      static constexpr unsigned\n+\tvalue{_Number_help<_Base, _Power<_Base, _Digs...>::value,\n+\t\t\t   _Digs...>::value};\n+    };\n+\n+  template<unsigned _Base>\n+    struct _Number<_Base>\n+    {\n+      static constexpr unsigned value{0U};\n+    };\n+\n+//------------------------------------------------------------------------------\n+//  This _Parse_int is the same 'level' as the old _Base_dispatch.\n+\n+  template<char... _Digs>\n+    struct _Parse_int;\n+\n+  template<char... _Digs>\n+    struct _Parse_int<'0', 'b', _Digs...>\n+    {\n+      static constexpr unsigned long long\n+\tvalue{_Number<2U, _Digs...>::value};\n+    };\n+\n+  template<char... _Digs>\n+    struct _Parse_int<'0', 'B', _Digs...>\n+    {\n+      static constexpr unsigned long long\n+\tvalue{_Number<2U, _Digs...>::value};\n+    };\n+\n+  template<char... _Digs>\n+    struct _Parse_int<'0', 'x', _Digs...>\n+    {\n+      static constexpr unsigned long long\n+\tvalue{_Number<16U, _Digs...>::value};\n+    };\n+\n+  template<char... _Digs>\n+    struct _Parse_int<'0', 'X', _Digs...>\n+    {\n+      static constexpr unsigned long long\n+\tvalue{_Number<16U, _Digs...>::value};\n+    };\n+\n+  template<char... _Digs>\n+    struct _Parse_int<'0', _Digs...>\n+    {\n+      static constexpr unsigned long long\n+\tvalue{_Number<8U, _Digs...>::value};\n+    };\n+\n+  template<char... _Digs>\n+    struct _Parse_int\n+    {\n+      static constexpr unsigned long long\n+\tvalue{_Number<10U, _Digs...>::value};\n+    };\n+\n+} // namespace __parse_int\n+\n+\n+namespace __select_int {\n+\n+  template<unsigned long long _Val, typename... _Ints>\n+    struct _Select_int_base;\n+\n+  template<unsigned long long _Val, typename _IntType, typename... _Ints>\n+    struct _Select_int_base<_Val, _IntType, _Ints...>\n+    : integral_constant\n+      <\n+\ttypename conditional\n+\t<\n+\t  _Val <= static_cast<unsigned long long>\n+\t\t    (std::numeric_limits<_IntType>::max()),\n+\t  _IntType,\n+\t  typename _Select_int_base<_Val, _Ints...>::value_type\n+\t>::type,\n+\t_Val\n+      >\n+    { };\n+\n+  template<unsigned long long _Val>\n+    struct _Select_int_base<_Val> : integral_constant<unsigned long long, _Val>\n+    { };\n+\n+  template<char... _Digs>\n+    struct _Select_int\n+    : _Select_int_base<\n+\t__parse_int::_Parse_int<_Digs...>::value,\n+\tunsigned char,\n+\tunsigned short,\n+\tunsigned int,\n+\tunsigned long,\n+\tunsigned long long\n+      >\n+    { };\n+\n+} // namespace __select_int\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace std\n+\n+#endif // __cplusplus > 201103L\n+\n+#endif // _PARSE_NUMBERS_H"}, {"sha": "f4c4ef017e6c5d3077a4b36614eef1eb92d7634a", "filename": "libstdc++-v3/include/std/chrono", "status": "modified", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c9f675fd91d50b9c4eb944481ab6a59386a89c7/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c9f675fd91d50b9c4eb944481ab6a59386a89c7/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono?ref=1c9f675fd91d50b9c4eb944481ab6a59386a89c7", "patch": "@@ -39,6 +39,7 @@\n #include <type_traits>\n #include <limits>\n #include <ctime>\n+#include <bits/parse_numbers.h> // for literals support.\n \n #ifdef _GLIBCXX_USE_C99_STDINT_TR1\n \n@@ -786,4 +787,136 @@ _GLIBCXX_END_NAMESPACE_VERSION\n \n #endif // C++11\n \n+#if __cplusplus > 201103L\n+\n+#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+inline namespace literals {\n+inline namespace chrono_literals {\n+\n+  namespace __detail {\n+\n+    using namespace __parse_int;\n+\n+    template<unsigned long long _Val, typename _Dur>\n+      struct _Select_type\n+      : conditional<\n+\t  _Val <= static_cast<unsigned long long>\n+\t\t    (numeric_limits<typename _Dur::rep>::max()),\n+\t  _Dur, void>\n+      {\n+\tstatic constexpr typename _Select_type::type\n+\t  value{static_cast<typename _Select_type::type>(_Val)};\n+      };\n+\n+    template<unsigned long long _Val, typename _Dur>\n+      constexpr typename _Select_type<_Val, _Dur>::type\n+      _Select_type<_Val, _Dur>::value;\n+\n+  } // __detail\n+\n+  inline constexpr chrono::duration<long double, ratio<3600,1>>\n+  operator\"\" h(long double __hours)\n+  { return chrono::duration<long double, ratio<3600,1>>{__hours}; }\n+\n+  template <char... _Digits>\n+    inline constexpr typename\n+    __detail::_Select_type<__select_int::_Select_int<_Digits...>::value,\n+\t\t\t   chrono::hours>::type\n+    operator\"\" h()\n+    {\n+      return __detail::_Select_type<\n+\t\t\t__select_int::_Select_int<_Digits...>::value,\n+\t\t\tchrono::hours>::value;\n+    }\n+\n+  inline constexpr chrono::duration<long double, ratio<60,1>>\n+  operator\"\" min(long double __mins)\n+  { return chrono::duration<long double, ratio<60,1>>{__mins}; }\n+\n+  template <char... _Digits>\n+    inline constexpr typename\n+    __detail::_Select_type<__select_int::_Select_int<_Digits...>::value,\n+\t\t\t   chrono::minutes>::type\n+    operator\"\" min()\n+    {\n+      return __detail::_Select_type<\n+\t\t\t__select_int::_Select_int<_Digits...>::value,\n+\t\t\tchrono::minutes>::value;\n+    }\n+\n+  inline constexpr chrono::duration<long double>\n+  operator\"\" s(long double __secs)\n+  { return chrono::duration<long double>{__secs}; }\n+\n+  template <char... _Digits>\n+    inline constexpr typename\n+    __detail::_Select_type<__select_int::_Select_int<_Digits...>::value,\n+\t\t\t   chrono::seconds>::type\n+    operator\"\" s()\n+    {\n+      return __detail::_Select_type<\n+\t\t\t__select_int::_Select_int<_Digits...>::value,\n+\t\t\tchrono::seconds>::value;\n+    }\n+\n+  inline constexpr chrono::duration<long double, milli>\n+  operator\"\" ms(long double __msecs)\n+  { return chrono::duration<long double, milli>{__msecs}; }\n+\n+  template <char... _Digits>\n+    inline constexpr typename\n+    __detail::_Select_type<__select_int::_Select_int<_Digits...>::value,\n+\t\t\t   chrono::milliseconds>::type\n+    operator\"\" ms()\n+    {\n+      return __detail::_Select_type<\n+\t\t\t__select_int::_Select_int<_Digits...>::value,\n+\t\t\tchrono::milliseconds>::value;\n+    }\n+\n+  inline constexpr chrono::duration<long double, micro>\n+  operator\"\" us(long double __usecs)\n+  { return chrono::duration<long double, micro>{__usecs}; }\n+\n+  template <char... _Digits>\n+    inline constexpr typename\n+    __detail::_Select_type<__select_int::_Select_int<_Digits...>::value,\n+\t\t\t   chrono::microseconds>::type\n+    operator\"\" us()\n+    {\n+      return __detail::_Select_type<\n+\t\t\t__select_int::_Select_int<_Digits...>::value,\n+\t\t\tchrono::microseconds>::value;\n+    }\n+\n+  inline constexpr chrono::duration<long double, nano>\n+  operator\"\" ns(long double __nsecs)\n+  { return chrono::duration<long double, nano>{__nsecs}; }\n+\n+  template <char... _Digits>\n+    inline constexpr typename\n+    __detail::_Select_type<__select_int::_Select_int<_Digits...>::value,\n+\t\t\t   chrono::nanoseconds>::type\n+    operator\"\" ns()\n+    {\n+      return __detail::_Select_type<\n+\t\t\t__select_int::_Select_int<_Digits...>::value,\n+\t\t\tchrono::nanoseconds>::value;\n+    }\n+\n+} // inline namespace chrono_literals\n+} // inline namespace literals\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace std\n+\n+#endif //_GLIBCXX_USE_C99_STDINT_TR1\n+\n+#endif // __cplusplus > 201103L\n+\n #endif //_GLIBCXX_CHRONO"}, {"sha": "67ef2faf2927247821eb0893453859d122172a18", "filename": "libstdc++-v3/testsuite/20_util/duration/literals/types.cc", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c9f675fd91d50b9c4eb944481ab6a59386a89c7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fliterals%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c9f675fd91d50b9c4eb944481ab6a59386a89c7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fliterals%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fliterals%2Ftypes.cc?ref=1c9f675fd91d50b9c4eb944481ab6a59386a89c7", "patch": "@@ -0,0 +1,74 @@\n+// { dg-options \"-std=gnu++1y\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// NOTE: This makes use of the fact that we know how moveable\n+// is implemented on string (via swap). If the implementation changed\n+// this test may begin to fail.\n+\n+#include <chrono>\n+#include <type_traits>\n+\n+void\n+test03()\n+{\n+  using namespace std::literals::chrono_literals;\n+\n+  static_assert(std::is_same<decltype(1h), std::chrono::hours>::value,\n+\t\t\"1h is std::chrono::hours\");\n+\n+  static_assert(std::is_same<decltype(1.0h),\n+\tstd::chrono::duration<long double, std::ratio<3600L, 1L>>>::value,\n+\t\"1.0h is std::chrono::duration<long double, std::ratio<3600L, 1L>>\");\n+\n+  static_assert(std::is_same<decltype(1min), std::chrono::minutes>::value,\n+\t\t\"1min is std::chrono::minutes\");\n+\n+  static_assert(std::is_same<decltype(1.0min),\n+\tstd::chrono::duration<long double, std::ratio<60L, 1L>>>::value,\n+\t\"1.0min is std::chrono::duration<long double, std::ratio<60L, 1L>>\");\n+\n+  static_assert(std::is_same<decltype(1s), std::chrono::seconds>::value,\n+\t\t\"1s is std::chrono::seconds\");\n+\n+  static_assert(std::is_same<decltype(1.0s),\n+\tstd::chrono::duration<long double, std::ratio<1L, 1L>>>::value,\n+\t\"1.0s is std::chrono::duration<long double, std::ratio<1L, 1L>>\");\n+\n+  static_assert(std::is_same<decltype(1ms), std::chrono::milliseconds>::value,\n+\t\t\"1ms is std::chrono::milliseconds\");\n+\n+  static_assert(std::is_same<decltype(1.0ms),\n+\tstd::chrono::duration<long double, std::ratio<1L, 1000L>>>::value,\n+\t\"1.0ms is std::chrono::duration<long double, std::ratio<1L, 1000L>>\");\n+\n+  static_assert(std::is_same<decltype(1us), std::chrono::microseconds>::value,\n+\t\t\"1us is std::chrono::microseconds\");\n+\n+  static_assert(std::is_same<decltype(1.0us),\n+\tstd::chrono::duration<long double, std::ratio<1L, 1000000L>>>::value,\n+\t\"1.0us is std::chrono::duration<long double, std::ratio<1L, 1000000L>>\");\n+\n+  static_assert(std::is_same<decltype(1ns), std::chrono::nanoseconds>::value,\n+\t\t\"1ns is std::chrono::nanoseconds\");\n+\n+  static_assert(std::is_same<decltype(1.0ns),\n+\tstd::chrono::duration<long double, std::ratio<1L, 1000000000L>>>::value,\n+\t\"1.0ns is std::chrono::duration<long double, std::ratio<1L, 1000000000L>>\");\n+}"}, {"sha": "37bbbd02cb70292abd87c7b257d82419378b3e50", "filename": "libstdc++-v3/testsuite/20_util/duration/literals/values.cc", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c9f675fd91d50b9c4eb944481ab6a59386a89c7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fliterals%2Fvalues.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c9f675fd91d50b9c4eb944481ab6a59386a89c7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fliterals%2Fvalues.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fliterals%2Fvalues.cc?ref=1c9f675fd91d50b9c4eb944481ab6a59386a89c7", "patch": "@@ -0,0 +1,69 @@\n+// { dg-do run }\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// NOTE: This makes use of the fact that we know how moveable\n+// is implemented on string (via swap). If the implementation changed\n+// this test may begin to fail.\n+\n+#include <chrono>\n+#include <testsuite_hooks.h>\n+\n+void\n+test03()\n+{\n+  using namespace std::literals::chrono_literals;\n+\n+  auto jiffy = 23ns;\n+  VERIFY( jiffy == std::chrono::nanoseconds(23) );\n+  auto fjiffy = 23.0ns;\n+  VERIFY( (fjiffy == std::chrono::duration<long double, std::nano>(23.0L)) );\n+  auto blip = 14us;\n+  VERIFY( blip == std::chrono::microseconds(14) );\n+  auto fblip = 14.0us;\n+  VERIFY( (fblip == std::chrono::duration<long double, std::micro>(14.0L)) );\n+  auto bit = 77ms;\n+  VERIFY( bit == std::chrono::milliseconds(77) );\n+  auto fbit = 77.0ms;\n+  VERIFY( (fbit == std::chrono::duration<long double, std::milli>(77.0L)) );\n+  auto warmup = 33s;\n+  VERIFY( warmup == std::chrono::seconds(33) );\n+  auto fwarmup = 33.0s;\n+  VERIFY( (fwarmup == std::chrono::duration<long double, std::ratio<1,1>>(33.0L)) );\n+  auto classtime = 50min;\n+  VERIFY( classtime == std::chrono::minutes(50) );\n+  auto fclasstime = 50.0min;\n+  VERIFY( (fclasstime == std::chrono::duration<long double, std::ratio<60,1>>(50.0L)) );\n+  auto longtime = 1h + 30min;\n+  VERIFY( longtime == std::chrono::minutes(90) );\n+  auto flongtime = 1.0h + 30.0min;\n+  VERIFY( (flongtime == std::chrono::duration<long double, std::ratio<3600,1>>(1.0L)\n+\t\t      + std::chrono::duration<long double, std::ratio<60,1>>(30.0L)) );\n+  VERIFY( (flongtime == std::chrono::duration<long double, std::ratio<60,1>>(90.0L)) );\n+  auto workday = 8h;\n+  VERIFY( workday == std::chrono::hours(8) );\n+  auto fworkday = 8.0h;\n+  VERIFY( (fworkday == std::chrono::duration<long double, std::ratio<3600,1>>(8.0L)) );\n+}\n+\n+int\n+main()\n+{\n+  test03();\n+}"}, {"sha": "db4237991bfb50c2fb44f5b38bb268c63bee8bcb", "filename": "libstdc++-v3/testsuite/20_util/duration/requirements/typedefs_neg1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c9f675fd91d50b9c4eb944481ab6a59386a89c7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c9f675fd91d50b9c4eb944481ab6a59386a89c7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg1.cc?ref=1c9f675fd91d50b9c4eb944481ab6a59386a89c7", "patch": "@@ -31,5 +31,5 @@ void test01()\n   test_type d;\n }\n \n-// { dg-error \"rep cannot be a duration\" \"\" { target *-*-* } 245 }\n+// { dg-error \"rep cannot be a duration\" \"\" { target *-*-* } 246 }\n // { dg-error \"required from here\" \"\" { target *-*-* } 31 }"}, {"sha": "8da5dbff43171b94b0dd3ed243b04790527175f9", "filename": "libstdc++-v3/testsuite/20_util/duration/requirements/typedefs_neg2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c9f675fd91d50b9c4eb944481ab6a59386a89c7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c9f675fd91d50b9c4eb944481ab6a59386a89c7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg2.cc?ref=1c9f675fd91d50b9c4eb944481ab6a59386a89c7", "patch": "@@ -32,5 +32,5 @@ void test01()\n   test_type d;\t\t\t// { dg-error \"required from here\" }\n }\n \n-// { dg-error \"must be a specialization of ratio\" \"\" { target *-*-* } 246 }\n+// { dg-error \"must be a specialization of ratio\" \"\" { target *-*-* } 247 }\n // { dg-prune-output \"not a member\" }"}, {"sha": "4837f5d64fc760c142c5231a3a0c872057998396", "filename": "libstdc++-v3/testsuite/20_util/duration/requirements/typedefs_neg3.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c9f675fd91d50b9c4eb944481ab6a59386a89c7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c9f675fd91d50b9c4eb944481ab6a59386a89c7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg3.cc?ref=1c9f675fd91d50b9c4eb944481ab6a59386a89c7", "patch": "@@ -33,5 +33,5 @@ void test01()\n   test_type d;\n }\n \n-// { dg-error \"period must be positive\" \"\" { target *-*-* } 248 }\n+// { dg-error \"period must be positive\" \"\" { target *-*-* } 249 }\n // { dg-error \"required from here\" \"\" { target *-*-* } 33 }"}, {"sha": "677f5bf85601fa8531cfb2b821e19aaff59f3a3e", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/literals/types.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c9f675fd91d50b9c4eb944481ab6a59386a89c7/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fliterals%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c9f675fd91d50b9c4eb944481ab6a59386a89c7/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fliterals%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fliterals%2Ftypes.cc?ref=1c9f675fd91d50b9c4eb944481ab6a59386a89c7", "patch": "@@ -0,0 +1,47 @@\n+// { dg-options \"-std=gnu++1y\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// NOTE: This makes use of the fact that we know how moveable\n+// is implemented on string (via swap). If the implementation changed\n+// this test may begin to fail.\n+\n+#include <string>\n+#include <type_traits>\n+\n+void\n+test01()\n+{\n+  using namespace std::literals::string_literals;\n+\n+  static_assert(std::is_same<decltype(\"Hello\"s), std::string>::value,\n+\t\t\"\\\"Hello\\\"s is std::string\");\n+\n+  static_assert(std::is_same<decltype(u8\"Hello\"s), std::string>::value,\n+\t\t\"u8\\\"Hello\\\"s is std::string\");\n+\n+  static_assert(std::is_same<decltype(L\"Hello\"s), std::wstring>::value,\n+\t\t\"L\\\"Hello\\\"s is std::wstring\");\n+\n+  static_assert(std::is_same<decltype(u\"Hello\"s), std::u16string>::value,\n+\t\t\"u\\\"Hello\\\"s is std::u16string\");\n+\n+  static_assert(std::is_same<decltype(U\"Hello\"s), std::u32string>::value,\n+\t\t\"U\\\"Hello\\\"s is std::u32string\");\n+}"}, {"sha": "09285590e2a8a1c5b4f9cd4ea8f6663e28d55e4a", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/literals/values.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c9f675fd91d50b9c4eb944481ab6a59386a89c7/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fliterals%2Fvalues.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c9f675fd91d50b9c4eb944481ab6a59386a89c7/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fliterals%2Fvalues.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fliterals%2Fvalues.cc?ref=1c9f675fd91d50b9c4eb944481ab6a59386a89c7", "patch": "@@ -0,0 +1,50 @@\n+// { dg-do run }\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// NOTE: This makes use of the fact that we know how moveable\n+// is implemented on string (via swap). If the implementation changed\n+// this test may begin to fail.\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  using namespace std::literals::string_literals;\n+\n+  std::string planet = \"Mercury\"s;\n+  std::wstring wplanet = L\"Venus\"s;\n+  std::string u8planet = u8\"Mars\"s;\n+  std::u16string u16planet = u\"Juiter\"s;\n+  std::u32string u32planet = U\"Saturn\"s;\n+\n+  VERIFY( planet == std::string(\"Mercury\") );\n+  VERIFY( wplanet == std::wstring(L\"Venus\") );\n+  VERIFY( u8planet == std::string(u8\"Mars\") );\n+  VERIFY( u16planet == std::u16string(u\"Juiter\") );\n+  VERIFY( u32planet == std::u32string(U\"Saturn\") );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}]}