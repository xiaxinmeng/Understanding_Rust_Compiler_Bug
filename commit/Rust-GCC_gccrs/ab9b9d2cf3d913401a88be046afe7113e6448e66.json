{"sha": "ab9b9d2cf3d913401a88be046afe7113e6448e66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWI5YjlkMmNmM2Q5MTM0MDFhODhiZTA0NmFmZTcxMTNlNjQ0OGU2Ng==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2005-02-24T18:55:51Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2005-02-24T18:55:51Z"}, "message": "std_complex.h: _GLIBCXX_USE_C99_COMPLEX_MATH to _GLIBCXX_USE_C99_COMPLEX.\n\n\n2005-02-24  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/std/std_complex.h: _GLIBCXX_USE_C99_COMPLEX_MATH to\n\t_GLIBCXX_USE_C99_COMPLEX.\n\t* acinclude.m4: Same.\n\t* acconfig.h: Same.\n\t* configure: Regenerate.\n\t* config.h.in: Same.\n\nFrom-SVN: r95508", "tree": {"sha": "28bc565584b06554d597fd44b4152762d8f08f74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28bc565584b06554d597fd44b4152762d8f08f74"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab9b9d2cf3d913401a88be046afe7113e6448e66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab9b9d2cf3d913401a88be046afe7113e6448e66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab9b9d2cf3d913401a88be046afe7113e6448e66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab9b9d2cf3d913401a88be046afe7113e6448e66/comments", "author": null, "committer": null, "parents": [{"sha": "4961152d4362629a5d6892132bef11779052517b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4961152d4362629a5d6892132bef11779052517b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4961152d4362629a5d6892132bef11779052517b"}], "stats": {"total": 40, "additions": 25, "deletions": 15}, "files": [{"sha": "76757a8a7997d8236506175ce252a9280bed0b5b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab9b9d2cf3d913401a88be046afe7113e6448e66/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab9b9d2cf3d913401a88be046afe7113e6448e66/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ab9b9d2cf3d913401a88be046afe7113e6448e66", "patch": "@@ -1,3 +1,12 @@\n+2005-02-24  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/std/std_complex.h: _GLIBCXX_USE_C99_COMPLEX_MATH to\n+\t_GLIBCXX_USE_C99_COMPLEX.\n+\t* acinclude.m4: Same.\n+\t* acconfig.h: Same.\n+\t* configure: Regenerate.\n+\t* config.h.in: Same.\n+\t\n 2005-02-24  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/tr1/functional (mem_fn): Avoid _T, badname on"}, {"sha": "51d588430a35f5fe48179f24068ea42a2d25704b", "filename": "libstdc++-v3/acconfig.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab9b9d2cf3d913401a88be046afe7113e6448e66/libstdc%2B%2B-v3%2Facconfig.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab9b9d2cf3d913401a88be046afe7113e6448e66/libstdc%2B%2B-v3%2Facconfig.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facconfig.h?ref=ab9b9d2cf3d913401a88be046afe7113e6448e66", "patch": "@@ -20,7 +20,7 @@\n #undef _GLIBCXX_USE_C99_MATH\n \n // Define if C99 complex math functions should be used in std::complex.\n-#undef _GLIBCXX_USE_C99_COMPLEX_MATH\n+#undef _GLIBCXX_USE_C99_COMPLEX\n \n // Define if code specialized for wchar_t should be used.\n #undef _GLIBCXX_USE_WCHAR_T"}, {"sha": "4ef88ad4d55faf08163960e79085607690efa559", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab9b9d2cf3d913401a88be046afe7113e6448e66/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab9b9d2cf3d913401a88be046afe7113e6448e66/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=ab9b9d2cf3d913401a88be046afe7113e6448e66", "patch": "@@ -983,7 +983,7 @@ AC_DEFUN([GLIBCXX_ENABLE_C99], [\n   AC_MSG_RESULT($ac_c99_complex)\n \n   if test x\"$ac_c99_complex\" = x\"yes\"; then\n-    AC_DEFINE(_GLIBCXX_USE_C99_COMPLEX_MATH)\n+    AC_DEFINE(_GLIBCXX_USE_C99_COMPLEX)\n   fi\n \n   # Check for the existence in <stdio.h> of vscanf, et. al."}, {"sha": "76d32d1630fa15d681a9007a9bc1db4da15d0fd4", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab9b9d2cf3d913401a88be046afe7113e6448e66/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab9b9d2cf3d913401a88be046afe7113e6448e66/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=ab9b9d2cf3d913401a88be046afe7113e6448e66", "patch": "@@ -21,7 +21,7 @@\n #undef _GLIBCXX_USE_C99_MATH\n \n // Define if C99 complex math functions should be used in std::complex.\n-#undef _GLIBCXX_USE_C99_COMPLEX_MATH\n+#undef _GLIBCXX_USE_C99_COMPLEX\n \n // Define if code specialized for wchar_t should be used.\n #undef _GLIBCXX_USE_WCHAR_T"}, {"sha": "4b59bfe6916accfd743adf7e15be3f989d814068", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab9b9d2cf3d913401a88be046afe7113e6448e66/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab9b9d2cf3d913401a88be046afe7113e6448e66/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=ab9b9d2cf3d913401a88be046afe7113e6448e66", "patch": "@@ -8633,7 +8633,7 @@ echo \"${ECHO_T}$ac_c99_complex\" >&6\n \n   if test x\"$ac_c99_complex\" = x\"yes\"; then\n     cat >>confdefs.h <<\\_ACEOF\n-#define _GLIBCXX_USE_C99_COMPLEX_MATH 1\n+#define _GLIBCXX_USE_C99_COMPLEX 1\n _ACEOF\n \n   fi"}, {"sha": "b7d8a2acef6158bf2981e081046b08c2e1098b8c", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab9b9d2cf3d913401a88be046afe7113e6448e66/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab9b9d2cf3d913401a88be046afe7113e6448e66/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=ab9b9d2cf3d913401a88be046afe7113e6448e66", "patch": "@@ -455,6 +455,7 @@ tr1_headers = \\\n \t${tr1_srcdir}/unordered_set \\\n \t${tr1_srcdir}/unordered_map\n \n+\n # This is the common subset of files that all three \"C\" header models use.\n c_base_srcdir = $(C_INCLUDE_DIR)\n c_base_builddir = ."}, {"sha": "fb8122cfcad2bfcc5c4ce51921e480b01efd3c45", "filename": "libstdc++-v3/include/std/std_complex.h", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab9b9d2cf3d913401a88be046afe7113e6448e66/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_complex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab9b9d2cf3d913401a88be046afe7113e6448e66/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_complex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_complex.h?ref=ab9b9d2cf3d913401a88be046afe7113e6448e66", "patch": "@@ -561,7 +561,7 @@ namespace std\n       return __s * sqrt(__x * __x + __y * __y);\n     }\n \n-#if _GLIBCXX_USE_C99_COMPLEX_MATH\n+#if _GLIBCXX_USE_C99_COMPLEX\n   inline float\n   __complex_abs(__complex__ float __z) { return __builtin_cabsf(__z); }\n \n@@ -588,7 +588,7 @@ namespace std\n     __complex_arg(const complex<_Tp>& __z)\n     { return  atan2(__z.imag(), __z.real()); }\n \n-#if _GLIBCXX_USE_C99_COMPLEX_MATH\n+#if _GLIBCXX_USE_C99_COMPLEX\n   inline float\n   __complex_arg(__complex__ float __z) { return __builtin_cargf(__z); }\n \n@@ -666,7 +666,7 @@ namespace std\n       return complex<_Tp>(cos(__x) * cosh(__y), -sin(__x) * sinh(__y));\n     }\n \n-#if _GLIBCXX_USE_C99_COMPLEX_MATH\n+#if _GLIBCXX_USE_C99_COMPLEX\n   inline __complex__ float\n   __complex_cos(__complex__ float __z) { return __builtin_ccosf(__z); }\n \n@@ -696,7 +696,7 @@ namespace std\n       return complex<_Tp>(cosh(__x) * cos(__y), sinh(__x) * sin(__y));\n     }\n \n-#if _GLIBCXX_USE_C99_COMPLEX_MATH\n+#if _GLIBCXX_USE_C99_COMPLEX\n   inline __complex__ float\n   __complex_cosh(__complex__ float __z) { return __builtin_ccoshf(__z); }\n \n@@ -722,7 +722,7 @@ namespace std\n     __complex_exp(const complex<_Tp>& __z)\n     { return std::polar(exp(__z.real()), __z.imag()); }\n \n-#if _GLIBCXX_USE_C99_COMPLEX_MATH\n+#if _GLIBCXX_USE_C99_COMPLEX\n   inline __complex__ float\n   __complex_exp(__complex__ float __z) { return __builtin_cexpf(__z); }\n \n@@ -782,7 +782,7 @@ namespace std\n       return complex<_Tp>(sin(__x) * cosh(__y), cos(__x) * sinh(__y)); \n     }\n \n-#if _GLIBCXX_USE_C99_COMPLEX_MATH\n+#if _GLIBCXX_USE_C99_COMPLEX\n   inline __complex__ float\n   __complex_sin(__complex__ float __z) { return __builtin_csinf(__z); }\n \n@@ -812,7 +812,7 @@ namespace std\n       return complex<_Tp>(sinh(__x) * cos(__y), cosh(__x) * sin(__y));\n     }\n \n-#if _GLIBCXX_USE_C99_COMPLEX_MATH\n+#if _GLIBCXX_USE_C99_COMPLEX\n   inline __complex__ float\n   __complex_sinh(__complex__ float __z) { return __builtin_csinhf(__z); }      \n \n@@ -856,7 +856,7 @@ namespace std\n         }\n     }\n \n-#if _GLIBCXX_USE_C99_COMPLEX_MATH\n+#if _GLIBCXX_USE_C99_COMPLEX\n   inline __complex__ float\n   __complex_sqrt(__complex__ float __z) { return __builtin_csqrtf(__z); }\n \n@@ -883,7 +883,7 @@ namespace std\n     __complex_tan(const complex<_Tp>& __z)\n     { return std::sin(__z) / std::cos(__z); }\n \n-#if _GLIBCXX_USE_C99_COMPLEX_MATH\n+#if _GLIBCXX_USE_C99_COMPLEX\n   inline __complex__ float\n   __complex_tan(__complex__ float __z) { return __builtin_ctanf(__z); }\n \n@@ -911,7 +911,7 @@ namespace std\n     __complex_tanh(const complex<_Tp>& __z)\n     { return std::sinh(__z) / std::cosh(__z); }\n \n-#if _GLIBCXX_USE_C99_COMPLEX_MATH\n+#if _GLIBCXX_USE_C99_COMPLEX\n   inline __complex__ float\n   __complex_tanh(__complex__ float __z) { return __builtin_ctanhf(__z); }\n \n@@ -956,7 +956,7 @@ namespace std\n     __complex_pow(const complex<_Tp>& __x, const complex<_Tp>& __y)\n     { return __x == _Tp() ? _Tp() : std::exp(__y * std::log(__x)); }\n \n-#if _GLIBCXX_USE_C99_COMPLEX_MATH\n+#if _GLIBCXX_USE_C99_COMPLEX\n   inline __complex__ float\n   __complex_pow(__complex__ float __x, __complex__ float __y)\n   { return __builtin_cpowf(__x, __y); }"}]}