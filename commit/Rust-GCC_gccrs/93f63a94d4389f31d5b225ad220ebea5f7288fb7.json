{"sha": "93f63a94d4389f31d5b225ad220ebea5f7288fb7", "node_id": "C_kwDOANBUbNoAKDkzZjYzYTk0ZDQzODlmMzFkNWIyMjVhZDIyMGViZWE1ZjcyODhmYjc", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-06-24T09:20:58Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-06-30T14:57:17Z"}, "message": "resolver: Add base for resolving const generic parameters\n\nThis commit adds a base for resolving the type and default expression of\nconst generic parameters.\n\nFor now, there is no disambiguation happening. So we are still\nextremely limited.\n\nFor example, this structure gets its const generic parameter ignored and\nunresolved because it looks like a type: Despite us knowing for sure\nthat the default expression here WILL be a constant expression.\n\n```rust\nconst M: usize = 15;\nstruct Foo<const N: usize = M>;\n```", "tree": {"sha": "de1e4342203a3567c8a719c8d689a3a097abc71a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de1e4342203a3567c8a719c8d689a3a097abc71a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93f63a94d4389f31d5b225ad220ebea5f7288fb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93f63a94d4389f31d5b225ad220ebea5f7288fb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93f63a94d4389f31d5b225ad220ebea5f7288fb7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93f63a94d4389f31d5b225ad220ebea5f7288fb7/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49276efb07ef18098c0f72970acf523a1fc31eb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49276efb07ef18098c0f72970acf523a1fc31eb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49276efb07ef18098c0f72970acf523a1fc31eb8"}], "stats": {"total": 168, "additions": 74, "deletions": 94}, "files": [{"sha": "62518b6a40322423414a37b3fff881720985bee6", "filename": "gcc/rust/resolve/rust-ast-resolve-item.cc", "status": "modified", "additions": 29, "deletions": 66, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93f63a94d4389f31d5b225ad220ebea5f7288fb7/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93f63a94d4389f31d5b225ad220ebea5f7288fb7/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.cc?ref=93f63a94d4389f31d5b225ad220ebea5f7288fb7", "patch": "@@ -73,10 +73,8 @@ ResolveTraitItems::visit (AST::TraitItemFunc &func)\n \n   AST::TraitFunctionDecl &function = func.get_trait_function_decl ();\n   if (function.has_generics ())\n-    {\n-      for (auto &generic : function.get_generic_params ())\n-\tResolveGenericParam::go (generic.get ());\n-    }\n+    for (auto &generic : function.get_generic_params ())\n+      ResolveGenericParam::go (generic.get (), prefix, canonical_prefix);\n \n   if (function.has_return_type ())\n     ResolveType::go (function.get_return_type ().get ());\n@@ -122,10 +120,8 @@ ResolveTraitItems::visit (AST::TraitItemMethod &func)\n \n   AST::TraitMethodDecl &function = func.get_trait_method_decl ();\n   if (function.has_generics ())\n-    {\n-      for (auto &generic : function.get_generic_params ())\n-\tResolveGenericParam::go (generic.get ());\n-    }\n+    for (auto &generic : function.get_generic_params ())\n+      ResolveGenericParam::go (generic.get (), prefix, canonical_prefix);\n \n   if (function.has_return_type ())\n     ResolveType::go (function.get_return_type ().get ());\n@@ -210,10 +206,8 @@ ResolveItem::visit (AST::TypeAlias &alias)\n   resolver->get_type_scope ().push (scope_node_id);\n \n   if (alias.has_generics ())\n-    {\n-      for (auto &generic : alias.get_generic_params ())\n-\tResolveGenericParam::go (generic.get ());\n-    }\n+    for (auto &generic : alias.get_generic_params ())\n+      ResolveGenericParam::go (generic.get (), prefix, canonical_prefix);\n \n   if (alias.has_where_clause ())\n     ResolveWhereClause::Resolve (alias.get_where_clause ());\n@@ -274,12 +268,8 @@ ResolveItem::visit (AST::TupleStruct &struct_decl)\n   resolver->get_type_scope ().push (scope_node_id);\n \n   if (struct_decl.has_generics ())\n-    {\n-      for (auto &generic : struct_decl.get_generic_params ())\n-\t{\n-\t  ResolveGenericParam::go (generic.get ());\n-\t}\n-    }\n+    for (auto &generic : struct_decl.get_generic_params ())\n+      ResolveGenericParam::go (generic.get (), prefix, canonical_prefix);\n \n   if (struct_decl.has_where_clause ())\n     ResolveWhereClause::Resolve (struct_decl.get_where_clause ());\n@@ -313,12 +303,8 @@ ResolveItem::visit (AST::Enum &enum_decl)\n   resolver->get_type_scope ().push (scope_node_id);\n \n   if (enum_decl.has_generics ())\n-    {\n-      for (auto &generic : enum_decl.get_generic_params ())\n-\t{\n-\t  ResolveGenericParam::go (generic.get ());\n-\t}\n-    }\n+    for (auto &generic : enum_decl.get_generic_params ())\n+      ResolveGenericParam::go (generic.get (), prefix, cpath);\n \n   if (enum_decl.has_where_clause ())\n     ResolveWhereClause::Resolve (enum_decl.get_where_clause ());\n@@ -411,12 +397,8 @@ ResolveItem::visit (AST::StructStruct &struct_decl)\n   resolver->get_type_scope ().push (scope_node_id);\n \n   if (struct_decl.has_generics ())\n-    {\n-      for (auto &generic : struct_decl.get_generic_params ())\n-\t{\n-\t  ResolveGenericParam::go (generic.get ());\n-\t}\n-    }\n+    for (auto &generic : struct_decl.get_generic_params ())\n+      ResolveGenericParam::go (generic.get (), prefix, canonical_prefix);\n \n   if (struct_decl.has_where_clause ())\n     ResolveWhereClause::Resolve (struct_decl.get_where_clause ());\n@@ -450,12 +432,8 @@ ResolveItem::visit (AST::Union &union_decl)\n   resolver->get_type_scope ().push (scope_node_id);\n \n   if (union_decl.has_generics ())\n-    {\n-      for (auto &generic : union_decl.get_generic_params ())\n-\t{\n-\t  ResolveGenericParam::go (generic.get ());\n-\t}\n-    }\n+    for (auto &generic : union_decl.get_generic_params ())\n+      ResolveGenericParam::go (generic.get (), prefix, canonical_prefix);\n \n   if (union_decl.has_where_clause ())\n     ResolveWhereClause::Resolve (union_decl.get_where_clause ());\n@@ -523,10 +501,8 @@ ResolveItem::visit (AST::Function &function)\n   resolver->push_new_label_rib (resolver->get_type_scope ().peek ());\n \n   if (function.has_generics ())\n-    {\n-      for (auto &generic : function.get_generic_params ())\n-\tResolveGenericParam::go (generic.get ());\n-    }\n+    for (auto &generic : function.get_generic_params ())\n+      ResolveGenericParam::go (generic.get (), prefix, canonical_prefix);\n \n   // resolve any where clause items\n   if (function.has_where_clause ())\n@@ -566,12 +542,8 @@ ResolveItem::visit (AST::InherentImpl &impl_block)\n   resolve_visibility (impl_block.get_visibility ());\n \n   if (impl_block.has_generics ())\n-    {\n-      for (auto &generic : impl_block.get_generic_params ())\n-\t{\n-\t  ResolveGenericParam::go (generic.get ());\n-\t}\n-    }\n+    for (auto &generic : impl_block.get_generic_params ())\n+      ResolveGenericParam::go (generic.get (), prefix, canonical_prefix);\n \n   // resolve any where clause items\n   if (impl_block.has_where_clause ())\n@@ -657,10 +629,8 @@ ResolveItem::visit (AST::Method &method)\n   resolver->push_new_label_rib (resolver->get_type_scope ().peek ());\n \n   if (method.has_generics ())\n-    {\n-      for (auto &generic : method.get_generic_params ())\n-\tResolveGenericParam::go (generic.get ());\n-    }\n+    for (auto &generic : method.get_generic_params ())\n+      ResolveGenericParam::go (generic.get (), prefix, canonical_prefix);\n \n   // resolve any where clause items\n   if (method.has_where_clause ())\n@@ -719,12 +689,8 @@ ResolveItem::visit (AST::TraitImpl &impl_block)\n   resolver->push_new_type_rib (resolver->get_type_scope ().peek ());\n \n   if (impl_block.has_generics ())\n-    {\n-      for (auto &generic : impl_block.get_generic_params ())\n-\t{\n-\t  ResolveGenericParam::go (generic.get ());\n-\t}\n-    }\n+    for (auto &generic : impl_block.get_generic_params ())\n+      ResolveGenericParam::go (generic.get (), prefix, canonical_prefix);\n \n   // resolve any where clause items\n   if (impl_block.has_where_clause ())\n@@ -836,9 +802,7 @@ ResolveItem::visit (AST::Trait &trait)\n   CanonicalPath Self = CanonicalPath::get_big_self (trait.get_node_id ());\n \n   for (auto &generic : trait.get_generic_params ())\n-    {\n-      ResolveGenericParam::go (generic.get ());\n-    }\n+    ResolveGenericParam::go (generic.get (), prefix, canonical_prefix);\n \n   // Self is an implicit TypeParam so lets mark it as such\n   resolver->get_type_scope ().append_reference_for_def (\n@@ -900,7 +864,7 @@ ResolveItem::resolve_impl_item (AST::InherentImplItem *item,\n void\n ResolveItem::resolve_extern_item (AST::ExternalItem *item)\n {\n-  ResolveExternItem::go (item);\n+  ResolveExternItem::go (item, prefix, canonical_prefix);\n }\n \n static void\n@@ -1070,9 +1034,10 @@ ResolveImplItems::visit (AST::TypeAlias &alias)\n }\n \n void\n-ResolveExternItem::go (AST::ExternalItem *item)\n+ResolveExternItem::go (AST::ExternalItem *item, const CanonicalPath &prefix,\n+\t\t       const CanonicalPath &canonical_prefix)\n {\n-  ResolveExternItem resolver;\n+  ResolveExternItem resolver (prefix, canonical_prefix);\n   item->accept_vis (resolver);\n }\n \n@@ -1092,10 +1057,8 @@ ResolveExternItem::visit (AST::ExternalFunctionItem &function)\n \n   // resolve the generics\n   if (function.has_generics ())\n-    {\n-      for (auto &generic : function.get_generic_params ())\n-\tResolveGenericParam::go (generic.get ());\n-    }\n+    for (auto &generic : function.get_generic_params ())\n+      ResolveGenericParam::go (generic.get (), prefix, canonical_prefix);\n \n   if (function.has_return_type ())\n     ResolveType::go (function.get_return_type ().get ());"}, {"sha": "ce521f057f6846bc7247cee3967c97f238854d63", "filename": "gcc/rust/resolve/rust-ast-resolve-item.h", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93f63a94d4389f31d5b225ad220ebea5f7288fb7/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93f63a94d4389f31d5b225ad220ebea5f7288fb7/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h?ref=93f63a94d4389f31d5b225ad220ebea5f7288fb7", "patch": "@@ -118,13 +118,20 @@ class ResolveExternItem : public ResolverBase\n   using Rust::Resolver::ResolverBase::visit;\n \n public:\n-  static void go (AST::ExternalItem *item);\n+  static void go (AST::ExternalItem *item, const CanonicalPath &prefix,\n+\t\t  const CanonicalPath &canonical_prefix);\n \n   void visit (AST::ExternalFunctionItem &function) override;\n   void visit (AST::ExternalStaticItem &item) override;\n \n private:\n-  ResolveExternItem () : ResolverBase () {}\n+  ResolveExternItem (const CanonicalPath &prefix,\n+\t\t     const CanonicalPath &canonical_prefix)\n+    : ResolverBase (), prefix (prefix), canonical_prefix (canonical_prefix)\n+  {}\n+\n+  const CanonicalPath &prefix;\n+  const CanonicalPath &canonical_prefix;\n };\n \n } // namespace Resolver"}, {"sha": "1ce3df0891c5c278532862f9d830e8800351392d", "filename": "gcc/rust/resolve/rust-ast-resolve-stmt.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93f63a94d4389f31d5b225ad220ebea5f7288fb7/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93f63a94d4389f31d5b225ad220ebea5f7288fb7/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.cc?ref=93f63a94d4389f31d5b225ad220ebea5f7288fb7", "patch": "@@ -30,7 +30,7 @@ ResolveStmt::visit (AST::ExternBlock &extern_block)\n     {\n       ResolveToplevelExternItem::go (item.get (),\n \t\t\t\t     CanonicalPath::create_empty ());\n-      ResolveExternItem::go (item.get ());\n+      ResolveExternItem::go (item.get (), prefix, canonical_prefix);\n     }\n }\n "}, {"sha": "8867845521177fd8c11833deec745a216f0919d7", "filename": "gcc/rust/resolve/rust-ast-resolve-stmt.h", "status": "modified", "additions": 7, "deletions": 19, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93f63a94d4389f31d5b225ad220ebea5f7288fb7/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93f63a94d4389f31d5b225ad220ebea5f7288fb7/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h?ref=93f63a94d4389f31d5b225ad220ebea5f7288fb7", "patch": "@@ -111,9 +111,7 @@ class ResolveStmt : public ResolverBase\n     if (struct_decl.has_generics ())\n       {\n \tfor (auto &generic : struct_decl.get_generic_params ())\n-\t  {\n-\t    ResolveGenericParam::go (generic.get ());\n-\t  }\n+\t  ResolveGenericParam::go (generic.get (), prefix, canonical_prefix);\n       }\n \n     for (AST::TupleField &field : struct_decl.get_fields ())\n@@ -145,9 +143,7 @@ class ResolveStmt : public ResolverBase\n     if (enum_decl.has_generics ())\n       {\n \tfor (auto &generic : enum_decl.get_generic_params ())\n-\t  {\n-\t    ResolveGenericParam::go (generic.get ());\n-\t  }\n+\t  ResolveGenericParam::go (generic.get (), prefix, canonical_prefix);\n       }\n \n     for (auto &variant : enum_decl.get_variants ())\n@@ -271,9 +267,7 @@ class ResolveStmt : public ResolverBase\n     if (struct_decl.has_generics ())\n       {\n \tfor (auto &generic : struct_decl.get_generic_params ())\n-\t  {\n-\t    ResolveGenericParam::go (generic.get ());\n-\t  }\n+\t  ResolveGenericParam::go (generic.get (), prefix, canonical_prefix);\n       }\n \n     for (AST::StructField &field : struct_decl.get_fields ())\n@@ -308,12 +302,8 @@ class ResolveStmt : public ResolverBase\n     resolver->get_type_scope ().push (scope_node_id);\n \n     if (union_decl.has_generics ())\n-      {\n-\tfor (auto &generic : union_decl.get_generic_params ())\n-\t  {\n-\t    ResolveGenericParam::go (generic.get ());\n-\t  }\n-      }\n+      for (auto &generic : union_decl.get_generic_params ())\n+\tResolveGenericParam::go (generic.get (), prefix, canonical_prefix);\n \n     for (AST::StructField &field : union_decl.get_variants ())\n       {\n@@ -352,10 +342,8 @@ class ResolveStmt : public ResolverBase\n     resolver->push_new_label_rib (resolver->get_type_scope ().peek ());\n \n     if (function.has_generics ())\n-      {\n-\tfor (auto &generic : function.get_generic_params ())\n-\t  ResolveGenericParam::go (generic.get ());\n-      }\n+      for (auto &generic : function.get_generic_params ())\n+\tResolveGenericParam::go (generic.get (), prefix, canonical_prefix);\n \n     if (function.has_return_type ())\n       ResolveType::go (function.get_return_type ().get ());"}, {"sha": "946cdd4db1870b6e9510e731ef560ceacc1eebb6", "filename": "gcc/rust/resolve/rust-ast-resolve-type.h", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93f63a94d4389f31d5b225ad220ebea5f7288fb7/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93f63a94d4389f31d5b225ad220ebea5f7288fb7/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h?ref=93f63a94d4389f31d5b225ad220ebea5f7288fb7", "patch": "@@ -20,6 +20,7 @@\n #define RUST_AST_RESOLVE_TYPE_H\n \n #include \"rust-ast-resolve-base.h\"\n+#include \"rust-ast-resolve-expr.h\"\n #include \"rust-ast-full.h\"\n \n namespace Rust {\n@@ -146,17 +147,23 @@ class ResolveGenericParam : public ResolverBase\n   using Rust::Resolver::ResolverBase::visit;\n \n public:\n-  static NodeId go (AST::GenericParam *param)\n+  static NodeId go (AST::GenericParam *param, const CanonicalPath &prefix,\n+\t\t    const CanonicalPath &canonical_prefix)\n   {\n-    ResolveGenericParam resolver;\n+    ResolveGenericParam resolver (prefix, canonical_prefix);\n     param->accept_vis (resolver);\n     return resolver.resolved_node;\n   }\n \n-  void visit (AST::ConstGenericParam &) override\n+  void visit (AST::ConstGenericParam &param) override\n   {\n-    // For now do not do anything and accept everything.\n-    // FIXME: This needs to change soon!\n+    ResolveType::go (param.get_type ().get ());\n+\n+    if (param.has_default_value ())\n+      ResolveExpr::go (param.get_default_value ().get_expression ().get (),\n+\t\t       prefix, canonical_prefix);\n+\n+    ok = true;\n   }\n \n   void visit (AST::TypeParam &param) override\n@@ -188,7 +195,15 @@ class ResolveGenericParam : public ResolverBase\n   }\n \n private:\n-  ResolveGenericParam () : ResolverBase () {}\n+  ResolveGenericParam (const CanonicalPath &prefix,\n+\t\t       const CanonicalPath &canonical_prefix)\n+    : ResolverBase (), ok (false), prefix (prefix),\n+      canonical_prefix (canonical_prefix)\n+  {}\n+\n+  bool ok;\n+  const CanonicalPath &prefix;\n+  const CanonicalPath &canonical_prefix;\n };\n \n class ResolveWhereClause : public ResolverBase"}, {"sha": "8a3754da433fe66105cc909db88783c5618df637", "filename": "gcc/testsuite/rust/compile/const_generics_4.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93f63a94d4389f31d5b225ad220ebea5f7288fb7/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst_generics_4.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93f63a94d4389f31d5b225ad220ebea5f7288fb7/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst_generics_4.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst_generics_4.rs?ref=93f63a94d4389f31d5b225ad220ebea5f7288fb7", "patch": "@@ -0,0 +1,7 @@\n+// { dg-additional-options \"-w\" }\n+\n+const P: usize = 14;\n+\n+struct Foo<const N: usize = { M }>; // { dg-error \"failed to find name: M\" }\n+struct Bar<const N: usize = { P }>;\n+struct Baz<const N: NotAType = { P }>; // { dg-error \"failed to resolve TypePath: NotAType in this scope\" }"}]}