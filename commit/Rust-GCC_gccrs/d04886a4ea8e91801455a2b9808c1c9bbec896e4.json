{"sha": "d04886a4ea8e91801455a2b9808c1c9bbec896e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDA0ODg2YTRlYThlOTE4MDE0NTVhMmI5ODA4YzFjOWJiZWM4OTZlNA==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2021-08-03T20:45:38Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2021-08-03T22:34:38Z"}, "message": "Always check the result of expect_token while parsing\n\nWhen expect_token fails it produces an error and return a\nnullptr. Make sure to always check the result of expect_token so we\ndon't use a nullptr token and crash.\n\nResolves: https://github.com/Rust-GCC/gccrs/issues/603", "tree": {"sha": "3ae6e2c5147eb9f433bfe05bbf5d66850fc99f04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ae6e2c5147eb9f433bfe05bbf5d66850fc99f04"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d04886a4ea8e91801455a2b9808c1c9bbec896e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d04886a4ea8e91801455a2b9808c1c9bbec896e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d04886a4ea8e91801455a2b9808c1c9bbec896e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d04886a4ea8e91801455a2b9808c1c9bbec896e4/comments", "author": null, "committer": null, "parents": [{"sha": "c707190b29e1e5b2d20fa9d68dcd7f043659aed4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c707190b29e1e5b2d20fa9d68dcd7f043659aed4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c707190b29e1e5b2d20fa9d68dcd7f043659aed4"}], "stats": {"total": 27, "additions": 27, "deletions": 0}, "files": [{"sha": "acc9d06acd7ec5a9bc53a4457a051707dbc73925", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04886a4ea8e91801455a2b9808c1c9bbec896e4/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04886a4ea8e91801455a2b9808c1c9bbec896e4/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=d04886a4ea8e91801455a2b9808c1c9bbec896e4", "patch": "@@ -1898,6 +1898,9 @@ Parser<ManagedTokenSource>::parse_macro_match_fragment ()\n \n   // get MacroFragSpec for macro\n   const_TokenPtr t = expect_token (IDENTIFIER);\n+  if (t == nullptr)\n+    return nullptr;\n+\n   AST::MacroFragSpec frag = AST::get_frag_spec_from_str (t->get_str ());\n   if (frag == AST::INVALID)\n     {\n@@ -4325,6 +4328,9 @@ Parser<ManagedTokenSource>::parse_enum (AST::Visibility vis,\n \n   // parse enum name\n   const_TokenPtr enum_name_tok = expect_token (IDENTIFIER);\n+  if (enum_name_tok == nullptr)\n+    return nullptr;\n+\n   Identifier enum_name = enum_name_tok->get_str ();\n \n   // parse generic params (of enum container, not enum variants) if they exist\n@@ -4650,6 +4656,9 @@ Parser<ManagedTokenSource>::parse_static_item (AST::Visibility vis,\n     }\n \n   const_TokenPtr ident_tok = expect_token (IDENTIFIER);\n+  if (ident_tok == nullptr)\n+    return nullptr;\n+\n   Identifier ident = ident_tok->get_str ();\n \n   if (!skip_token (COLON))\n@@ -4700,6 +4709,9 @@ Parser<ManagedTokenSource>::parse_trait (AST::Visibility vis,\n \n   // parse trait name\n   const_TokenPtr ident_tok = expect_token (IDENTIFIER);\n+  if (ident_tok == nullptr)\n+    return nullptr;\n+\n   Identifier ident = ident_tok->get_str ();\n \n   // parse generic parameters (if they exist)\n@@ -4805,6 +4817,9 @@ Parser<ManagedTokenSource>::parse_trait_item ()\n \n \t// parse function or method name\n \tconst_TokenPtr ident_tok = expect_token (IDENTIFIER);\n+\tif (ident_tok == nullptr)\n+\t  return nullptr;\n+\n \tIdentifier ident = ident_tok->get_str ();\n \n \t// parse generic params\n@@ -4937,6 +4952,9 @@ Parser<ManagedTokenSource>::parse_trait_type (AST::AttrVec outer_attrs)\n   skip_token (TYPE);\n \n   const_TokenPtr ident_tok = expect_token (IDENTIFIER);\n+  if (ident_tok == nullptr)\n+    return nullptr;\n+\n   Identifier ident = ident_tok->get_str ();\n \n   std::vector<std::unique_ptr<AST::TypeParamBound>> bounds;\n@@ -4973,6 +4991,9 @@ Parser<ManagedTokenSource>::parse_trait_const (AST::AttrVec outer_attrs)\n \n   // parse constant item name\n   const_TokenPtr ident_tok = expect_token (IDENTIFIER);\n+  if (ident_tok == nullptr)\n+    return nullptr;\n+\n   Identifier ident = ident_tok->get_str ();\n \n   if (!skip_token (COLON))\n@@ -5338,6 +5359,9 @@ Parser<ManagedTokenSource>::parse_inherent_impl_function_or_method (\n \n   // parse function or method name\n   const_TokenPtr ident_tok = expect_token (IDENTIFIER);\n+  if (ident_tok == nullptr)\n+    return nullptr;\n+\n   Identifier ident = ident_tok->get_str ();\n \n   // parse generic params\n@@ -14210,6 +14234,9 @@ Parser<ManagedTokenSource>::parse_field_access_expr (\n   /* get field name identifier (assume that this is a field access expr and not\n    * await, for instance) */\n   const_TokenPtr ident_tok = expect_token (IDENTIFIER);\n+  if (ident_tok == nullptr)\n+    return nullptr;\n+\n   Identifier ident = ident_tok->get_str ();\n \n   Location locus = struct_expr->get_locus_slow ();"}]}