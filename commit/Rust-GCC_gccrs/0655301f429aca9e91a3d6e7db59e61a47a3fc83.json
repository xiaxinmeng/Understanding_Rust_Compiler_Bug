{"sha": "0655301f429aca9e91a3d6e7db59e61a47a3fc83", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDY1NTMwMWY0MjlhY2E5ZTkxYTNkNmU3ZGI1OWU2MWE0N2EzZmM4Mw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-06-20T23:47:35Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-06-20T23:47:35Z"}, "message": "m68k.md (zero_extendsidi2): Create expander; duplicate pattern and adjust constraints for coldfire.\n\n        * config/m68k/m68k.md (zero_extendsidi2): Create expander; duplicate\n        pattern and adjust constraints for coldfire.\n\nFrom-SVN: r54865", "tree": {"sha": "7b1d23aa7d0d4ff228306e910a9fa9c91ad129cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b1d23aa7d0d4ff228306e910a9fa9c91ad129cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0655301f429aca9e91a3d6e7db59e61a47a3fc83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0655301f429aca9e91a3d6e7db59e61a47a3fc83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0655301f429aca9e91a3d6e7db59e61a47a3fc83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0655301f429aca9e91a3d6e7db59e61a47a3fc83/comments", "author": null, "committer": null, "parents": [{"sha": "aa8dea091f83d726078a543040a5526819f21683", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa8dea091f83d726078a543040a5526819f21683", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa8dea091f83d726078a543040a5526819f21683"}], "stats": {"total": 42, "additions": 39, "deletions": 3}, "files": [{"sha": "13d7ba7d35a9806d041b4efbf6d8b8aa60e4443e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0655301f429aca9e91a3d6e7db59e61a47a3fc83/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0655301f429aca9e91a3d6e7db59e61a47a3fc83/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0655301f429aca9e91a3d6e7db59e61a47a3fc83", "patch": "@@ -1,3 +1,9 @@\n+2002-06-20  Richard Henderson  <rth@redhat.com>\n+\n+\tPR target/4041\n+\t* config/m68k/m68k.md (zero_extendsidi2): Create expander; duplicate\n+\tpattern and adjust constraints for coldfire.\n+\n 2002-06-20  Richard Henderson  <rth@redhat.com>\n \n \t* explow.c (probe_stack_range): Use gen_rtx_fmt_ee."}, {"sha": "16b6ca6da8695b68ffa58be6869a44abaa02c0f8", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 33, "deletions": 3, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0655301f429aca9e91a3d6e7db59e61a47a3fc83/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0655301f429aca9e91a3d6e7db59e61a47a3fc83/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=0655301f429aca9e91a3d6e7db59e61a47a3fc83", "patch": "@@ -1525,10 +1525,40 @@\n }\")\n \n ;; this is the canonical form for (lshiftrt:DI x 32)\n-(define_insn \"zero_extendsidi2\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm\")\n-    (zero_extend:DI (match_operand:SI 1 \"general_operand\" \"rm\")))]\n+(define_expand \"zero_extendsidi2\"\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n+    (zero_extend:DI (match_operand:SI 1 \"general_operand\" \"\")))]\n   \"\"\n+  \"\")\n+\n+(define_insn \"*zero_extendsidi2_cf\"\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,o\")\n+    (zero_extend:DI (match_operand:SI 1 \"general_operand\" \"ro,r\")))]\n+  \"TARGET_5200\"\n+  \"*\n+{\n+  CC_STATUS_INIT;\n+  if (GET_CODE (operands[0]) == REG)\n+    operands[2] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n+  else if (GET_CODE (XEXP (operands[0], 0)) == PRE_DEC)\n+    return \\\"move%.l %1,%0\\;clr%.l %0\\\";\n+  else if (GET_CODE (XEXP (operands[0], 0)) == POST_INC)\n+    return \\\"clr%.l %0\\;move%.l %1,%0\\\";\n+  else\n+    operands[2] = adjust_address (operands[0], SImode, 4);\n+  if (GET_CODE (operands[1]) != REG || GET_CODE (operands[2]) != REG\n+      || REGNO (operands[1]) != REGNO (operands[2]))\n+    output_asm_insn (\\\"move%.l %1,%2\\\", operands);\n+  if (ADDRESS_REG_P (operands[0]))\n+    return \\\"sub%.l %0,%0\\\";\n+  else\n+    return \\\"clr%.l %0\\\";\n+}\")\n+\n+(define_insn \"*zero_extendsidi2\"\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=ro\")\n+    (zero_extend:DI (match_operand:SI 1 \"general_operand\" \"ro\")))]\n+  \"!TARGET_5200\"\n   \"*\n {\n   CC_STATUS_INIT;"}]}