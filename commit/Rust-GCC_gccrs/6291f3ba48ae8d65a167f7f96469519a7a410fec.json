{"sha": "6291f3ba48ae8d65a167f7f96469519a7a410fec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjI5MWYzYmE0OGFlOGQ2NWExNjdmN2Y5NjQ2OTUxOWE3YTQxMGZlYw==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-07-05T06:49:54Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-07-05T06:49:54Z"}, "message": "re PR fortran/32526 (Spurious error: Name 'x' at (1) is an ambiguous reference to 'x' from module 'y')\n\n2007-07-05  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/32526\n\t* match.c (gfc_match_call): Check, in all cases, that a symbol\n\tis neither generic nor a subroutine before trying to add it as\n\ta subroutine.\n\n\tPR fortran/32613\n\t* match.c (gfc_match_do): Reset the implied_index attribute.\n\n2007-07-05  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/32526\n\t* gfortran.dg/interface_14.f90: New test.\n\n\tPR fortran/32613\n\t* gfortran.dg/do_iterator_2.f90: New test.\n\nFrom-SVN: r126354", "tree": {"sha": "541aab681e941c2570dcf444d7e8887b63a5810e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/541aab681e941c2570dcf444d7e8887b63a5810e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6291f3ba48ae8d65a167f7f96469519a7a410fec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6291f3ba48ae8d65a167f7f96469519a7a410fec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6291f3ba48ae8d65a167f7f96469519a7a410fec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6291f3ba48ae8d65a167f7f96469519a7a410fec/comments", "author": null, "committer": null, "parents": [{"sha": "200359e888d1230d8b0a2a2ba9731786856649c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/200359e888d1230d8b0a2a2ba9731786856649c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/200359e888d1230d8b0a2a2ba9731786856649c8"}], "stats": {"total": 146, "additions": 138, "deletions": 8}, "files": [{"sha": "7504c715eee907d5657a826527c19bf7643b10a7", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6291f3ba48ae8d65a167f7f96469519a7a410fec/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6291f3ba48ae8d65a167f7f96469519a7a410fec/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=6291f3ba48ae8d65a167f7f96469519a7a410fec", "patch": "@@ -1,3 +1,13 @@\n+2007-07-05  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/32526\n+\t* match.c (gfc_match_call): Check, in all cases, that a symbol\n+\tis neither generic nor a subroutine before trying to add it as\n+\ta subroutine.\n+\n+\tPR fortran/32613\n+\t* match.c (gfc_match_do): Reset the implied_index attribute.\n+\n 2007-07-04  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/31198"}, {"sha": "cbce358c014b3593cd0dbea6fccb7d43c69ba1ea", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6291f3ba48ae8d65a167f7f96469519a7a410fec/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6291f3ba48ae8d65a167f7f96469519a7a410fec/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=6291f3ba48ae8d65a167f7f96469519a7a410fec", "patch": "@@ -1500,6 +1500,7 @@ gfc_match_do (void)\n   if (m == MATCH_ERROR)\n     goto cleanup;\n \n+  iter.var->symtree->n.sym->attr.implied_index = 0;\n   gfc_check_do_variable (iter.var->symtree);\n \n   if (gfc_match_eos () != MATCH_YES)\n@@ -2296,16 +2297,22 @@ gfc_match_call (void)\n \n   sym = st->n.sym;\n \n-  if (sym->ns != gfc_current_ns\n-\t&& !sym->attr.generic\n-\t&& !sym->attr.subroutine\n-        && gfc_get_sym_tree (name, NULL, &st) == 1)\n-    return MATCH_ERROR;\n+  /* If it does not seem to be callable...  */\n+  if (!sym->attr.generic\n+\t&& !sym->attr.subroutine)\n+    {\n+      /* ...create a symbol in this scope...  */\n+      if (sym->ns != gfc_current_ns\n+\t    && gfc_get_sym_tree (name, NULL, &st) == 1)\n+        return MATCH_ERROR;\n \n-  sym = st->n.sym;\n+      if (sym != st->n.sym)\n+\tsym = st->n.sym;\n \n-  if (gfc_add_subroutine (&sym->attr, sym->name, NULL) == FAILURE)\n-    return MATCH_ERROR;\n+      /* ...and then to try to make the symbol into a subroutine.  */\n+      if (gfc_add_subroutine (&sym->attr, sym->name, NULL) == FAILURE)\n+\treturn MATCH_ERROR;\n+    }\n \n   gfc_set_sym_referenced (sym);\n "}, {"sha": "034f9cd2ac3e7055bf7766f5eb03343bdd8301e1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6291f3ba48ae8d65a167f7f96469519a7a410fec/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6291f3ba48ae8d65a167f7f96469519a7a410fec/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6291f3ba48ae8d65a167f7f96469519a7a410fec", "patch": "@@ -1,3 +1,11 @@\n+2007-07-05  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/32526\n+\t* gfortran.dg/interface_14.f90: New test.\n+\n+\tPR fortran/32613\n+\t* gfortran.dg/do_iterator_2.f90: New test.\n+\n 2007-07-04  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* gcc.dg/dfp/dfp-round.h (FE_DEC_TONEAREST): Redfined for BID."}, {"sha": "58b65f33f5f61d5b40fd09108ddcc8c55661a47a", "filename": "gcc/testsuite/gfortran.dg/do_iterator_2.f90", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6291f3ba48ae8d65a167f7f96469519a7a410fec/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_iterator_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6291f3ba48ae8d65a167f7f96469519a7a410fec/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_iterator_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_iterator_2.f90?ref=6291f3ba48ae8d65a167f7f96469519a7a410fec", "patch": "@@ -0,0 +1,32 @@\n+! { dg-do run }\n+! Tests the fix for pr32613 - see:\n+! http://groups.google.com/group/comp.lang.fortran/browse_thread/thread/495c154ee188d7f1/ea292134fe68b1d0#ea292134fe68b1d0\n+!\n+! Contributed by Al Greynolds <awgreynolds@earthlink.net>\n+!\n+program main\n+  call something\n+end\n+\n+subroutine something\n+!  integer i !correct results from gfortran depend on this statement (before fix)\n+  integer :: m = 0\n+  character lit*1, line*100\n+  lit(i) = line(i:i)\n+  i = 1\n+  n = 5\n+  line = 'PZ0R1'\n+  if (internal (0)) call abort ()\n+  if (m .ne. 5) call abort ()\n+contains\n+  logical function internal (j)\n+    intent(in) j\n+    do i = j, n\n+      k = index ('RE', lit (i))\n+      m = m + 1\n+      if (k == 0) cycle\n+      if (i+1 == n) exit\n+    enddo\n+    internal = (k == 0)\n+  end function\n+end"}, {"sha": "ea4345b04205bdcfd17089eb39a116a5513f06a1", "filename": "gcc/testsuite/gfortran.dg/interface_14.f90", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6291f3ba48ae8d65a167f7f96469519a7a410fec/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_14.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6291f3ba48ae8d65a167f7f96469519a7a410fec/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_14.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_14.f90?ref=6291f3ba48ae8d65a167f7f96469519a7a410fec", "patch": "@@ -0,0 +1,73 @@\n+! { dg-do compile }\n+! Checks the fix for a regression PR32526, which was caused by\n+! the patch for PR31494.  The problem here was that the symbol\n+! 'new' was determined to be ambiguous.\n+!\n+! Contributed by Michael Richmond <michael.a.richmond@nasa.gov>\n+!\n+    module P_Class\n+      implicit none\n+      private :: init_Personnel\n+      interface new\n+         module procedure init_Personnel\n+      end interface\n+      contains\n+         subroutine init_Personnel(this)\n+         integer, intent (in) :: this\n+         print *, \"init personnel\", this\n+         end subroutine init_Personnel\n+    end module P_Class\n+\n+    module S_Class\n+      use P_Class\n+      implicit none\n+      private :: init_Student\n+      type Student\n+         private\n+         integer :: personnel = 1\n+      end type Student\n+      interface new\n+         module procedure init_Student\n+      end interface\n+      contains\n+         subroutine init_Student(this)\n+         type (Student), intent (in) :: this\n+         call new(this%personnel)\n+         end subroutine init_Student\n+    end module S_Class\n+\n+    module T_Class\n+      use P_Class\n+      implicit none\n+      private :: init_Teacher\n+      type Teacher\n+         private\n+         integer :: personnel = 2\n+      end type Teacher\n+      interface new\n+         module procedure init_Teacher\n+      end interface\n+      contains\n+         subroutine init_Teacher(this)\n+         type (Teacher), intent (in) :: this\n+         call new(this%personnel)\n+         end subroutine init_Teacher\n+    end module T_Class\n+\n+    module poly_Class\n+      use S_Class\n+      use T_Class\n+    end module poly_Class\n+\n+    module D_Class\n+      use poly_Class\n+    end module D_Class\n+\n+      use D_Class\n+      type (Teacher) :: a\n+      type (Student) :: b\n+      call new (a)\n+      call new (b)\n+      end\n+\n+! { dg-final { cleanup-modules \"P_class S_Class T_Class D_Class poly_Class\" } }"}]}