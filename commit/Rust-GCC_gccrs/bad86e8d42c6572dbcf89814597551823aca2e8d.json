{"sha": "bad86e8d42c6572dbcf89814597551823aca2e8d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmFkODZlOGQ0MmM2NTcyZGJjZjg5ODE0NTk3NTUxODIzYWNhMmU4ZA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2017-01-06T14:15:20Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2017-01-06T14:15:20Z"}, "message": "passes.c: split out pass-skipping logic into subroutines\n\ngcc/ChangeLog:\n\t* passes.c (execute_one_pass): Split out pass-skipping logic\n\tinto...\n\t(determine_pass_name_match): ...this new function and...\n\t(should_skip_pass_p): ...this new function.\n\nFrom-SVN: r244160", "tree": {"sha": "82963fd6d4852b957b28e06ecf430bb561544a6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82963fd6d4852b957b28e06ecf430bb561544a6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bad86e8d42c6572dbcf89814597551823aca2e8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bad86e8d42c6572dbcf89814597551823aca2e8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bad86e8d42c6572dbcf89814597551823aca2e8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bad86e8d42c6572dbcf89814597551823aca2e8d/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5406184ce77c6362c5cd513b1c4f1c05b5046a6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5406184ce77c6362c5cd513b1c4f1c05b5046a6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5406184ce77c6362c5cd513b1c4f1c05b5046a6d"}], "stats": {"total": 104, "additions": 70, "deletions": 34}, "files": [{"sha": "4911025e7db4266337448e9b529bf19b24b00b89", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad86e8d42c6572dbcf89814597551823aca2e8d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad86e8d42c6572dbcf89814597551823aca2e8d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bad86e8d42c6572dbcf89814597551823aca2e8d", "patch": "@@ -1,3 +1,10 @@\n+2017-01-06  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* passes.c (execute_one_pass): Split out pass-skipping logic\n+\tinto...\n+\t(determine_pass_name_match): ...this new function and...\n+\t(should_skip_pass_p): ...this new function.\n+\n 2017-01-06  Nathan Sidwell  <nathan@acm.org>\n \n \t* ipa-visibility.c (function_and_variable_visibility): Reformat"}, {"sha": "31262edbd0991da8efb09f4b9ee9a2ff68c46fc9", "filename": "gcc/passes.c", "status": "modified", "additions": 63, "deletions": 34, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad86e8d42c6572dbcf89814597551823aca2e8d/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad86e8d42c6572dbcf89814597551823aca2e8d/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=bad86e8d42c6572dbcf89814597551823aca2e8d", "patch": "@@ -2273,6 +2273,67 @@ override_gate_status (opt_pass *pass, tree func, bool gate_status)\n   return gate_status;\n }\n \n+/* Determine if PASS_NAME matches CRITERION.\n+   Not a pure predicate, since it can update CRITERION, to support\n+   matching the Nth invocation of a pass.\n+   Subroutine of should_skip_pass_p.  */\n+\n+static bool\n+determine_pass_name_match (const char *pass_name, char *criterion)\n+{\n+  size_t namelen = strlen (pass_name);\n+  if (! strncmp (pass_name, criterion, namelen))\n+    {\n+      /* The following supports starting with the Nth invocation\n+\t of a pass (where N does not necessarily is equal to the\n+\t dump file suffix).  */\n+      if (criterion[namelen] == '\\0'\n+\t  || (criterion[namelen] == '1'\n+\t      && criterion[namelen + 1] == '\\0'))\n+\treturn true;\n+      else\n+\t{\n+\t  if (criterion[namelen + 1] == '\\0')\n+\t    --criterion[namelen];\n+\t  return false;\n+\t}\n+    }\n+  else\n+    return false;\n+}\n+\n+/* For skipping passes until \"startwith\" pass.\n+   Return true iff PASS should be skipped.\n+   Clear cfun->pass_startwith when encountering the \"startwith\" pass,\n+   so that all subsequent passes are run.  */\n+\n+static bool\n+should_skip_pass_p (opt_pass *pass)\n+{\n+  if (!cfun)\n+    return false;\n+  if (!cfun->pass_startwith)\n+    return false;\n+\n+  /* We can't skip the lowering phase yet -- ideally we'd\n+     drive that phase fully via properties.  */\n+  if (!(cfun->curr_properties & PROP_ssa))\n+    return false;\n+\n+  if (determine_pass_name_match (pass->name, cfun->pass_startwith))\n+    {\n+      cfun->pass_startwith = NULL;\n+      return false;\n+    }\n+\n+  /* And also run any property provider.  */\n+  if (pass->properties_provided != 0)\n+    return false;\n+\n+  /* If we get here, then we have a \"startwith\" that we haven't seen yet;\n+     skip the pass.  */\n+  return true;\n+}\n \n /* Execute PASS. */\n \n@@ -2313,40 +2374,8 @@ execute_one_pass (opt_pass *pass)\n       return false;\n     }\n \n-  /* For skipping passes until startwith pass */\n-  if (cfun\n-      && cfun->pass_startwith\n-      /* But we can't skip the lowering phase yet -- ideally we'd\n-         drive that phase fully via properties.  */\n-      && (cfun->curr_properties & PROP_ssa))\n-    {\n-      size_t namelen = strlen (pass->name);\n-      /* We have to at least start when we leave SSA.  */\n-      if (pass->properties_destroyed & PROP_ssa)\n-\tcfun->pass_startwith = NULL;\n-      else if (! strncmp (pass->name, cfun->pass_startwith, namelen))\n-\t{\n-\t  /* The following supports starting with the Nth invocation\n-\t     of a pass (where N does not necessarily is equal to the\n-\t     dump file suffix).  */\n-\t  if (cfun->pass_startwith[namelen] == '\\0'\n-\t      || (cfun->pass_startwith[namelen] == '1'\n-\t\t  && cfun->pass_startwith[namelen + 1] == '\\0'))\n-\t    cfun->pass_startwith = NULL;\n-\t  else\n-\t    {\n-\t      if (cfun->pass_startwith[namelen + 1] != '\\0')\n-\t\treturn true;\n-\t      --cfun->pass_startwith[namelen];\n-\t      return true;\n-\t    }\n-\t}\n-      /* And also run any property provider.  */\n-      else if (pass->properties_provided != 0)\n-\t;\n-      else\n-\treturn true;\n-    }\n+  if (should_skip_pass_p (pass))\n+    return true;\n \n   /* Pass execution event trigger: useful to identify passes being\n      executed.  */"}]}