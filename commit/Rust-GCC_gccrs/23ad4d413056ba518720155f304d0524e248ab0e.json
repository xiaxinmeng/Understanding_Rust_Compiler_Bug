{"sha": "23ad4d413056ba518720155f304d0524e248ab0e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjNhZDRkNDEzMDU2YmE1MTg3MjAxNTVmMzA0ZDA1MjRlMjQ4YWIwZQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-29T03:05:58Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-29T03:05:58Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r619", "tree": {"sha": "d3cfd5ef45715f71502f18ac04b920fd7d3a4be6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3cfd5ef45715f71502f18ac04b920fd7d3a4be6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23ad4d413056ba518720155f304d0524e248ab0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23ad4d413056ba518720155f304d0524e248ab0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23ad4d413056ba518720155f304d0524e248ab0e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23ad4d413056ba518720155f304d0524e248ab0e/comments", "author": null, "committer": null, "parents": [{"sha": "5c8bab4ab90f9dfbb65a5da313b5bba2222f2fa4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c8bab4ab90f9dfbb65a5da313b5bba2222f2fa4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c8bab4ab90f9dfbb65a5da313b5bba2222f2fa4"}], "stats": {"total": 11, "additions": 8, "deletions": 3}, "files": [{"sha": "bf028003569e8d77cdcb1bdf05b5e0aeaf53adb8", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23ad4d413056ba518720155f304d0524e248ab0e/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23ad4d413056ba518720155f304d0524e248ab0e/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=23ad4d413056ba518720155f304d0524e248ab0e", "patch": "@@ -188,8 +188,10 @@ layout_decl (decl, known_align)\n       DECL_SIZE (decl) = size_int (spec_size);\n     }\n   /* Force alignment required for the data type.\n-     But if the decl itself wants greater alignment, don't override that.  */\n-  else if (TYPE_ALIGN (type) > DECL_ALIGN (decl))\n+     But if the decl itself wants greater alignment, don't override that.\n+     Likewise, if the decl is packed, don't override it.  */\n+  else if (DECL_ALIGN (decl) == 0\n+\t   || (! DECL_PACKED (decl) &&  TYPE_ALIGN (type) > DECL_ALIGN (decl)))\n     DECL_ALIGN (decl) = TYPE_ALIGN (type);\n \n   /* See if we can use an ordinary integer mode for a bit-field.  */\n@@ -302,6 +304,7 @@ layout_record (rec)\n       record_align = MAX (record_align, desired_align);\n #else\n       if (PCC_BITFIELD_TYPE_MATTERS && TREE_TYPE (field) != error_mark_node\n+\t  && DECL_BIT_FIELD (field)\n \t  && ! integer_zerop (TYPE_SIZE (TREE_TYPE (field))))\n \t{\n \t  /* For these machines, a zero-length field does not\n@@ -350,6 +353,7 @@ layout_record (rec)\n       if (PCC_BITFIELD_TYPE_MATTERS\n \t  && TREE_CODE (field) == FIELD_DECL\n \t  && TREE_TYPE (field) != error_mark_node\n+\t  && DECL_BIT_FIELD (field)\n \t  && !DECL_PACKED (field)\n \t  && !integer_zerop (DECL_SIZE (field)))\n \t{\n@@ -371,6 +375,7 @@ layout_record (rec)\n       if (BITFIELD_NBYTES_LIMITED\n \t  && TREE_CODE (field) == FIELD_DECL\n \t  && TREE_TYPE (field) != error_mark_node\n+\t  && DECL_BIT_FIELD (field)\n \t  && !DECL_PACKED (field)\n \t  && !integer_zerop (DECL_SIZE (field)))\n \t{\n@@ -499,7 +504,7 @@ layout_union (rec)\n #ifdef PCC_BITFIELD_TYPE_MATTERS\n       /* On the m88000, a bit field of declare type `int'\n \t forces the entire union to have `int' alignment.  */\n-      if (PCC_BITFIELD_TYPE_MATTERS) \n+      if (PCC_BITFIELD_TYPE_MATTERS && DECL_BIT_FIELD (field))\n \tunion_align = MAX (union_align, TYPE_ALIGN (TREE_TYPE (field)));\n #endif\n "}]}