{"sha": "9e69be8c656d6bc4a6159e546c2297d28b844572", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWU2OWJlOGM2NTZkNmJjNGE2MTU5ZTU0NmMyMjk3ZDI4Yjg0NDU3Mg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-12-25T14:28:45Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-12-25T14:28:45Z"}, "message": "(set_nonzero_bits_and_sign_copies, nonzero_bits): Fix errors in\nSHORT_IMMEDIATES_SIGN_EXTEND code.\n\nFrom-SVN: r6315", "tree": {"sha": "a6ee34070916a92b0ece4bc1e3fc039eca36712b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6ee34070916a92b0ece4bc1e3fc039eca36712b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e69be8c656d6bc4a6159e546c2297d28b844572", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e69be8c656d6bc4a6159e546c2297d28b844572", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e69be8c656d6bc4a6159e546c2297d28b844572", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e69be8c656d6bc4a6159e546c2297d28b844572/comments", "author": null, "committer": null, "parents": [{"sha": "14d4a67a3239f8bd5ec0d1b327e6c3118cc5ce74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14d4a67a3239f8bd5ec0d1b327e6c3118cc5ce74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14d4a67a3239f8bd5ec0d1b327e6c3118cc5ce74"}], "stats": {"total": 12, "additions": 5, "deletions": 7}, "files": [{"sha": "8c27d898e3c68dab883211f2ed47a78196414704", "filename": "gcc/combine.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e69be8c656d6bc4a6159e546c2297d28b844572/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e69be8c656d6bc4a6159e546c2297d28b844572/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=9e69be8c656d6bc4a6159e546c2297d28b844572", "patch": "@@ -728,7 +728,7 @@ set_nonzero_bits_and_sign_copies (x, set)\n \t      && INTVAL (src) > 0\n \t      && 0 != (INTVAL (src)\n \t\t       & ((HOST_WIDE_INT) 1\n-\t\t\t  << GET_MODE_BITSIZE (GET_MODE (x)))))\n+\t\t\t  << (GET_MODE_BITSIZE (GET_MODE (x)) - 1))))\n \t    src = GEN_INT (INTVAL (src)\n \t\t\t   | ((HOST_WIDE_INT) (-1)\n \t\t\t      << GET_MODE_BITSIZE (GET_MODE (x))));\n@@ -6559,7 +6559,7 @@ nonzero_bits (x, mode)\n \t      && INTVAL (tem) > 0\n \t      && 0 != (INTVAL (tem)\n \t\t       & ((HOST_WIDE_INT) 1\n-\t\t\t  << GET_MODE_BITSIZE (GET_MODE (x)))))\n+\t\t\t  << (GET_MODE_BITSIZE (GET_MODE (x)) - 1))))\n \t    tem = GEN_INT (INTVAL (tem)\n \t\t\t   | ((HOST_WIDE_INT) (-1)\n \t\t\t      << GET_MODE_BITSIZE (GET_MODE (x))));\n@@ -6574,11 +6574,9 @@ nonzero_bits (x, mode)\n     case CONST_INT:\n #ifdef SHORT_IMMEDIATES_SIGN_EXTEND\n       /* If X is negative in MODE, sign-extend the value.  */\n-      if (INTVAL (x) > 0\n-\t  && 0 != (INTVAL (x)\n-\t\t   & ((HOST_WIDE_INT) 1 << GET_MODE_BITSIZE (GET_MODE (x)))))\n-\treturn (INTVAL (x)\n-\t\t| ((HOST_WIDE_INT) (-1) << GET_MODE_BITSIZE (GET_MODE (x))));\n+      if (INTVAL (x) > 0 && mode_width < BITS_PER_WORD\n+\t  && 0 != (INTVAL (x) & ((HOST_WIDE_INT) 1 << (mode_width - 1))))\n+\treturn (INTVAL (x) | ((HOST_WIDE_INT) (-1) << mode_width));\n #endif\n \n       return INTVAL (x);"}]}