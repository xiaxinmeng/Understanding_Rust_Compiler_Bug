{"sha": "0ab45e0ac560f36de6cbea1e1e44ac7149f6e2d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGFiNDVlMGFjNTYwZjM2ZGU2Y2JlYTFlMWU0NGFjNzE0OWY2ZTJkNA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-02-13T22:08:10Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-02-13T22:08:10Z"}, "message": "Initial revision\n\nFrom-SVN: r317", "tree": {"sha": "5a60b84eb6596c98b8910d0f77f8317eb007b048", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a60b84eb6596c98b8910d0f77f8317eb007b048"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ab45e0ac560f36de6cbea1e1e44ac7149f6e2d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ab45e0ac560f36de6cbea1e1e44ac7149f6e2d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ab45e0ac560f36de6cbea1e1e44ac7149f6e2d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ab45e0ac560f36de6cbea1e1e44ac7149f6e2d4/comments", "author": null, "committer": null, "parents": [{"sha": "66800bc446357dc1ea87a62b5cd97c0b83ef28a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66800bc446357dc1ea87a62b5cd97c0b83ef28a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66800bc446357dc1ea87a62b5cd97c0b83ef28a5"}], "stats": {"total": 391, "additions": 391, "deletions": 0}, "files": [{"sha": "8985e31c1ab4ae7ff461af3baa1e714cbe5f8609", "filename": "gcc/make-cc1.com", "status": "added", "additions": 391, "deletions": 0, "changes": 391, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ab45e0ac560f36de6cbea1e1e44ac7149f6e2d4/gcc%2Fmake-cc1.com", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ab45e0ac560f36de6cbea1e1e44ac7149f6e2d4/gcc%2Fmake-cc1.com", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmake-cc1.com?ref=0ab45e0ac560f36de6cbea1e1e44ac7149f6e2d4", "patch": "@@ -0,0 +1,391 @@\n+$! Set the def dir to proper place for use in batch. Works for interactive too.\n+$flnm = f$enviroment(\"PROCEDURE\")     ! get current procedure name\n+$set default 'f$parse(flnm,,,\"DEVICE\")''f$parse(flnm,,,\"DIRECTORY\")'\n+$!\n+$!\n+$! CAUTION: If you want to link gcc-cc1 to the sharable image library\n+$! VAXCRTL, see the notes in gcc.texinfo (or INSTALL) first.\n+$!\n+$!\tBuild a GNU compiler on VMS\n+$!\n+$!  First we figure out what needs to be done.  This is sort of like a limited\n+$! make facility - the command line options specify exactly what components\n+$! we want to build.  The following options are understood:\n+$!\n+$!\tLINK:\tAssume that the object modules for the selected compiler(s)\n+$!\t\thave already been compiled, perform link phase only.\n+$!\n+$!\tCC1:\tCompile and link \"C\" compiler.\n+$!\n+$!\tCC1PLUS:Compile and link \"C++\" compiler.\n+$!\n+$!\tCC1OBJ:\tCompile and link objective C compiler.\n+$!\n+$!\tALL:\tCompile and link all of the CC1 passes.\n+$!\n+$!\tINDEPENDENT:\n+$!\t\tCompile language independent source modules. (On by default).\n+$!\n+$!\tDEBUG:\tLink images with /debug.\n+$!\n+$! If you want to list more than one option, you should use a spaces to\n+$! separate them.\n+$!\n+$!\tAny one of the above options can be prefaced with a \"NO\".  For example,\n+$! if you had already built GCC, and you wanted to build G++, you could use the\n+$! \"CC1PLUS NOINDEPENDENT\" options, which would only compile the C++ language\n+$! specific source files, and then link the C++ compiler.\n+$!\n+$! If you do not specify which compiler you want to build, it is assumed that\n+$! you want to build GNU-C (\"CC1\").\n+$!\n+$p1 = p1+\" \"+p2+\" \"+p3+\" \"+p4+\" \"+p5+\" \"+p6+\" \"+p7 \n+$p1 = f$edit(p1,\"COMPRESS\")\n+$i=0\n+$DO_ALL = 0\n+$DO_LINK = 0\n+$DO_DEBUG = 0\n+$DO_CC1 = 0\n+$DO_CC1PLUS = 0\n+$DO_CC1OBJ = 0\n+$DO_INDEPENDENT = 1\n+$DO_DEFAULT = 1\n+$loop:\n+$string = f$element(i,\" \",p1)\n+$if string.eqs.\" \" then goto done\n+$flag = 1\n+$if string.eqs.\"CC1PLUS\" then DO_DEFAULT = 0\n+$if string.eqs.\"CC1OBJ\" then DO_DEFAULT = 0\n+$if f$extract(0,2,string).nes.\"NO\" then goto parse_option\n+$  string=f$extract(2,f$length(string)-2,string)\n+$  flag = 0\n+$parse_option:\n+$DO_'string' = flag\n+$i=i+1\n+$goto loop\n+$!\n+$done:\n+$if DO_DEFAULT.eq.1 then DO_CC1 = 1\n+$if DO_ALL.eq.1 then DO_CC1 = 1\n+$if DO_ALL.eq.1 then DO_CC1PLUS = 1\n+$if DO_ALL.eq.1 then DO_CC1OBJ = 1\n+$say:==write sys$Output\n+$say \"This command file will now perform the following actions:\n+$if DO_LINK.eq.1 then goto link_only\n+$if DO_CC1.eq.1 then say \"   Compile C specific object modules.\"\n+$if DO_CC1PLUS.eq.1 then say \"   Compile C++ specific object modules.\"\n+$if DO_CC1OBJ.eq.1 then say \"   Compile obj-C specific object modules.\"\n+$if DO_INDEPENDENT.eq.1 then say \"   Compile language independent object modules.\"\n+$link_only:\n+$if DO_CC1.eq.1 then \tsay \"   Link C compiler (gcc-cc1.exe).\"\n+$if DO_CC1PLUS.eq.1 then say \"   Link C++ compiler (gcc-cc1plus.exe).\"\n+$if DO_CC1OBJ.eq.1 then say \"   Link objective-C compiler (gcc-cc1obj.exe).\"\n+$if DO_DEBUG.eq.1 then say  \"   Link images to run under debugger.\"\n+$type sys$input\n+\n+\tNote: GCC 2.0 treats external variables differently than GCC 1.40 does.\n+Before you use GCC 2.0, you should obtain a version of the assembler which \n+contains the patches to work with GCC 2.0 (GCC-AS 1.38 does not contain \n+these patches - whatever comes after this probably will).\n+\n+\tIf you do not update the assembler, the compiler will still work,\n+but `extern const' variables will be treated as `extern'.  This will result\n+in linker warning messages about mismatched psect attributes, and these\n+variables will be placed in read/write storage.\n+\n+$!\n+$!\n+$!\n+$! CAUTION: If you want to link gcc-cc1 to the sharable image library\n+$! VAXCRTL, see the notes in gcc.texinfo (or INSTALL) first.\n+$!\n+$!\tBuild the GNU \"C\" compiler on VMS\n+$!   (To try to build with VAX C, replace `gcc' with `cc/noopt'\n+$!    and delete `cc1_options=\"-mpcc-alignment\"'.\n+$!    Also add `/sel' after `gcclib/lib' except in the last link.\n+$!    You also need to get alloca.mar from Bison\n+$!    and to make definitions for bzero, bcopy and bcmp.)\n+$!\n+$!\tC compiler\n+$!\n+$ CC\t:=\tgcc\n+$ BISON\t:=\tbison\n+$ RENAME :=\trename\n+$ LINK\t:=\tlink\n+$!\n+$!\tCompiler options\n+$!\n+$ CFLAGS =\t\"/debug/cc1_options=\"\"-mpcc-alignment\"\"/inc=([],[.config])\"\n+$!\n+$!\tLink options\n+$!\n+$ LDFLAGS :=\t/nomap\n+$ if DO_DEBUG.eq.1 then LDFLAGS :='LDFLAGS'/debug\n+$!\n+$!\tLink libraries\n+$!\n+$ LIBS :=\tgnu_cc:[000000]gcclib/libr,sys$share:vaxcrtl/libr\n+$!\n+$!\n+$!\n+$!\n+$! Language independent object and header files.\n+$!\n+$! create a linker options file that lists all of the language independent\n+$! object modules.\n+$!\n+$create independent.opt\n+!\n+! List of object files for the linker - these are language independent\n+! (i.e. the same files will be used for all of the compilers).\n+!\n+toplev,tree,print-tree,stor-layout,fold-const,varasm,rtl,rtlanal,expr,stmt\n+expmed,explow,optabs,emit-rtl,insn-emit,jump,cse,loop,flow,stupid,combine\n+regclass,local-alloc,global-alloc,reload,reload1,insn-peep,final,recog\n+insn-recog,insn-extract,insn-output,obstack,integrate,caller-save,calls\n+dwarfout,function,insn-attrtab,reorg,sched,sdbout,dbxout,unroll,reg-stack\n+aux-output,print-rtl,version\n+$!\n+$pur/nolog independent.opt\n+$!\n+$ if DO_LINK.eq.1 then goto compile_cc1\n+$if DO_INDEPENDENT.eq.0 THEN GOTO compile_cc1\n+$!\n+$! First build a couple of header files from the machine description\n+$! These are used by many of the source modules, so we build them now.\n+$!\n+$\t'CC 'CFLAGS rtl.c\n+$\t'CC 'CFLAGS obstack.c\n+$\t'CC 'CFLAGS print-rtl.c\n+$! Generate insn-attr.h\n+$\t'CC 'CFLAGS genattr.c\n+$\tlink 'LDFLAGS' genattr,rtl,obstack, 'LIBS'\n+$\tassign/user insn-attr.h sys$output:\n+$\tmcr sys$disk:[]genattr md\n+$! Generate insn-flags.h\n+$\t'CC 'CFLAGS genflags.c\n+$\tlink 'LDFLAGS' genflags,rtl,obstack, 'LIBS'\n+$\tassign/user insn-flags.h sys$output:\n+$\tmcr sys$disk:[]genflags md\n+$! Generate insn-codes.h\n+$\t'CC 'CFLAGS gencodes.c\n+$\tlink 'LDFLAGS' gencodes,rtl,obstack, 'LIBS'\n+$\tassign/user insn-codes.h sys$output:\n+$\tmcr sys$disk:[]gencodes md\n+$! Generate insn-config.h\n+$\t'CC 'CFLAGS genconfig.c\n+$\tlink 'LDFLAGS' genconfig,rtl,obstack, 'LIBS'\n+$\tassign/user insn-config.h sys$output:\n+$\tmcr sys$disk:[]genconfig md\n+$!\n+$! Now compile the source modules\n+$!\n+$\t'CC 'CFLAGS toplev.c\n+$\t'CC 'CFLAGS version.c\n+$\t'CC 'CFLAGS tree.c\n+$\t'CC 'CFLAGS print-tree.c\n+$\t'CC 'CFLAGS stor-layout.c\n+$\t'CC 'CFLAGS fold-const.c\n+$\t'CC 'CFLAGS varasm.c\n+$\t'CC 'CFLAGS expr.c\n+$\t'CC 'CFLAGS stmt.c\n+$\t'CC 'CFLAGS expmed.c\n+$\t'CC 'CFLAGS explow.c\n+$\t'CC 'CFLAGS optabs.c\n+$\t'CC 'CFLAGS rtlanal.c\n+$\t'CC 'CFLAGS emit-rtl.c\n+$! Generate insn-emit.c\n+$\t'CC 'CFLAGS genemit.c\n+$\tlink 'LDFLAGS' genemit,rtl,obstack, 'LIBS'\n+$\tassign/user insn-emit.c sys$output:\n+$\tmcr sys$disk:[]genemit md\n+$!\n+$\t'CC 'CFLAGS insn-emit.c\n+$\t'CC 'CFLAGS jump.c\n+$\t'CC 'CFLAGS cse.c\n+$\t'CC 'CFLAGS loop.c\n+$\t'CC 'CFLAGS flow.c\n+$\t'CC 'CFLAGS stupid.c\n+$\t'CC 'CFLAGS combine.c\n+$\t'CC 'CFLAGS regclass.c\n+$\t'CC 'CFLAGS local-alloc.c\n+$\t'CC 'CFLAGS global-alloc.c\n+$\t'CC 'CFLAGS reload.c\n+$\t'CC 'CFLAGS reload1.c\n+$! Generate insn-peep.c\n+$\t'CC 'CFLAGS genpeep.c\n+$\tlink 'LDFLAGS' genpeep,rtl,obstack, 'LIBS'\n+$\tassign/user insn-peep.c sys$output:\n+$\tmcr sys$disk:[]genpeep md\n+$!\n+$\t'CC 'CFLAGS insn-peep.c\n+$\t'CC 'CFLAGS final.c\n+$\t'CC 'CFLAGS recog.c\n+$! Generate insn-recog.c\n+$\t'CC 'CFLAGS genrecog.c\n+$\tlink 'LDFLAGS' genrecog,rtl,obstack, 'LIBS'\n+$\tassign/user insn-recog.c sys$output:\n+$\tmcr sys$disk:[]genrecog md\n+$!\n+$\t'CC 'CFLAGS insn-recog.c\n+$! Generate insn-extract.c\n+$\t'CC 'CFLAGS genextract.c\n+$\tlink 'LDFLAGS' genextract,rtl,obstack, 'LIBS'\n+$\tassign/user insn-extract.c sys$output:\n+$\tmcr sys$disk:[]genextract md\n+$!\n+$\t'CC 'CFLAGS insn-extract.c\n+$! Generate insn-output.c\n+$\t'CC 'CFLAGS genoutput.c\n+$ \tlink 'LDFLAGS' genoutput,rtl,obstack, 'LIBS'\n+$\tassign/user insn-output.c sys$output:\n+$\tmcr sys$disk:[]genoutput md\n+$!\n+$\t'CC 'CFLAGS insn-output.c\n+$\t'CC 'CFLAGS integrate.c\n+$\t'CC 'CFLAGS caller-save.c\n+$\t'CC 'CFLAGS calls.c\n+$\t'CC 'CFLAGS dwarfout.c\n+$\t'CC 'CFLAGS dbxout.c\n+$\t'CC 'CFLAGS reg-stack.c\n+$\t'CC 'CFLAGS function.c\n+$\t'CC 'CFLAGS reorg.c\n+$\t'CC 'CFLAGS sched.c\n+$\t'CC 'CFLAGS sdbout.c\n+$\t'CC 'CFLAGS unroll.c\n+$! Generate insn-attrtab.c\n+$\t'CC 'CFLAGS genattrtab.c\n+$\tlink 'LDFLAGS' genattrtab,rtl,rtlanal,obstack, 'LIBS'\n+$\tassign/user insn-attrtab.c sys$output:\n+$\tmcr sys$disk:[]genattrtab md\n+$\t'CC 'CFLAGS insn-attrtab.c\n+$\t'CC 'CFLAGS aux-output.c\n+$!\n+$compile_cc1:\n+$!\n+$! C language specific modules\n+$!\n+$if DO_CC1.eq.0 then goto compile_cc1plus\n+$if DO_LINK.eq.1 then goto link_cc1\n+$!\n+$\tif (f$search(\"C-PARSE.C\") .eqs. \"\") then goto gcc_bison\n+$\tif (f$cvtime(f$file_attributes(\"C-PARSE.Y\",\"RDT\")).les. -\n+ \t    f$cvtime(f$file_attributes(\"C-PARSE.C\",\"RDT\")))  -\n+\t\tthen goto gcc_nobison\n+$gcc_bison:  'BISON' /define /verbose c-parse.y\n+$\t 'RENAME' c-parse_tab.c c-parse.c\n+$\t 'RENAME' c-parse_tab.h c-parse.h\n+$gcc_nobison:\n+$\t'CC 'CFLAGS c-parse.c\n+$\t'CC 'CFLAGS c-lex.c\n+$\t'CC 'CFLAGS c-decl.c\n+$\t'CC 'CFLAGS c-typeck.c\n+$\t'CC 'CFLAGS c-convert.c\n+$\t'CC 'CFLAGS c-aux-info.c\n+$\t'CC 'CFLAGS c-common.c\n+$\t'CC 'CFLAGS c-lang.c\n+$!\n+$! CAUTION: If you want to link gcc-cc1 to the sharable image library\n+$! VAXCRTL, see the notes in gcc.texinfo (or INSTALL) first.\n+$!\n+$link_cc1:\n+$ link 'LDFLAGS' /exe=gcc-cc1  version.opt/opt,sys$input:/opt, -\n+\tindependent.opt/opt,'LIBS'\n+!\n+!\t\"CC1\" Linker options file\n+!\n+!\n+c-parse,c-decl,c-typeck,c-convert,c-aux-info,c-common,c-lang,c-lex\n+$!\n+$! C++ language specific modules\n+$!\n+$compile_cc1plus:\n+$!\n+$if DO_CC1PLUS.eq.0 then goto compile_cc1obj\n+$if DO_LINK.eq.1 then goto link_cc1plus\n+$!\n+$\tif (f$search(\"CP-PARSE.C\") .eqs. \"\") then goto cplus_bison\n+$\tif (f$cvtime(f$file_attributes(\"CP-PARSE.Y\",\"RDT\")).les. -\n+ \t    f$cvtime(f$file_attributes(\"CP-PARSE.C\",\"RDT\")))  -\n+  \t\tthen goto cplus_nobison\n+$cplus_bison:\n+$\t 'BISON' /define /verbose cp-parse.y\n+$\t 'RENAME' cp-parse_tab.c cp-parse.c\n+$\t 'RENAME' cp-parse_tab.h cp-parse.h\n+$cplus_nobison:\n+$!\n+$\t'CC 'CFLAGS cp-parse.c\n+$\t'CC 'CFLAGS cp-decl.c\n+$\t'CC 'CFLAGS cp-decl2.c\n+$\t'CC 'CFLAGS cp-typeck.c\n+$\t'CC 'CFLAGS cp-type2.c\n+$\t'CC 'CFLAGS cp-tree.c\n+$\t'CC 'CFLAGS cp-ptree.c\n+$\t'CC 'CFLAGS cp-cvt.c\n+$\t'CC 'CFLAGS cp-search.c\n+$\t'CC 'CFLAGS cp-lex.c\n+$\t'CC 'CFLAGS cp-gc.c\n+$\t'CC 'CFLAGS cp-call.c\n+$\t'CC 'CFLAGS cp-class.c\n+$\t'CC 'CFLAGS cp-init.c\n+$\t'CC 'CFLAGS cp-method.c\n+$\t'CC 'CFLAGS cp-except.c\n+$\t'CC 'CFLAGS cp-expr.c\n+$\t'CC 'CFLAGS cp-pt.c\n+$\t'CC 'CFLAGS cp-edsel.c\n+$\t'CC 'CFLAGS cp-xref.c\n+$\t'CC 'CFLAGS cp-spew.c\n+$\t'CC 'CFLAGS c-common.c\n+$!\n+$link_cc1plus:\n+$ link 'LDFLAGS' /exe=gcc-cc1plus  version.opt/opt,sys$input:/opt, -\n+\t\tindependent.opt/opt,'LIBS'\n+!\n+!\t\"CC1PLUS\" Linker options file\n+!\n+cp-parse,cp-decl,cp-decl2,cp-typeck,cp-type2,cp-tree\n+cp-ptree,cp-cvt,cp-search,cp-lex,cp-gc,cp-call,cp-class\n+cp-init,cp-method,cp-except,cp-expr,cp-pt,cp-edsel\n+cp-xref,cp-spew,c-common\n+$!\n+$! objective language specific modules\n+$!\n+$compile_cc1obj:\n+$if DO_CC1OBJ.eq.0 then goto all_done\n+$if DO_LINK.eq.1 then goto LINK_CC1OBJ\n+$!\n+$\tif (f$search(\"OBJC-PARSE.C\") .eqs. \"\") then goto objc_bison\n+$\tif (f$cvtime(f$file_attributes(\"OBJC-PARSE.Y\",\"RDT\")).les. -\n+ \t    f$cvtime(f$file_attributes(\"OBJC-PARSE.C\",\"RDT\")))  -\n+\t\tthen goto objc_nobison\n+$objc_bison:\n+$\t 'BISON' /define /verbose OBJC-PARSE.y\n+$\t 'RENAME' OBJC-PARSE_tab.c OBJC-PARSE.c\n+$\t 'RENAME' OBJC-PARSE_tab.h OBJC-PARSE.h\n+$objc_nobison:\n+$\t'CC 'CFLAGS objc-parse.c\n+$\t'CC 'CFLAGS objc-actions.c\n+$!\n+$! If have also built CC1, we do not need to recompile these modules.\n+$!\n+$if DO_CC1.eq.1 then goto LINK_CC1OBJ\n+$\t'CC 'CFLAGS c-lex.c\n+$\t'CC 'CFLAGS c-decl.c\n+$\t'CC 'CFLAGS c-typeck.c\n+$\t'CC 'CFLAGS c-convert.c\n+$\t'CC 'CFLAGS c-aux-info.c\n+$\t'CC 'CFLAGS c-common.c\n+$!\n+$!\n+$LINK_CC1OBJ:\n+$ link 'LDFLAGS' /exe=gcc-cc1obj version.opt/opt,sys$input:/opt, -\n+\tindependent.opt/opt,'LIBS'\n+!\n+!\t\"Objective C\" Linker options file\n+!\n+objc-parse,objc-actions,c-lex,c-decl,c-typeck,c-convert,c-aux-info,c-common\n+$!\n+$all_done:\n+$!\n+$!\tDone\n+$!"}]}