{"sha": "cf5fb4b0d5ef246c8aa90fea9439c696c8462b8f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Y1ZmI0YjBkNWVmMjQ2YzhhYTkwZmVhOTQzOWM2OTZjODQ2MmI4Zg==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2009-08-16T17:25:23Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2009-08-16T17:25:23Z"}, "message": "mips-protos.h (mips_push_asm_switch): New function.\n\ngcc/\n\t* config/mips/mips-protos.h (mips_push_asm_switch): New function.\n\t(mips_pop_asm_switch): Likewise.\n\t* config/mips/mips.c (set_noreorder, set_nomacro, set_noat): Replace\n\twith...\n\t(mips_noreorder, mips_nomacro, mips_noat): ...these new variables.\n\t(mips_push_asm_switch_1, mips_pop_asm_switch_1): New functions.\n\t(mips_push_asm_switch, mips_pop_asm_switch): Likewise.\n\t(mips_print_operand_punctuation): Use them.  Check mips_noreorder\n\tinstead of set_noreorder.\n\t(mips_output_function_prologue): Use the new functions.\n\t(mips_output_function_epilogue): Likewise.\n\t(mips_need_noat_wrapper_p): New function, split out from...\n\t(mips_final_prescan_insn, mips_final_postscan_insn): ...here.\n\tUse mips_push_asm_switch and mips_pop_asm_switch.\n\t* config/mips/mips.h (FUNCTION_PROFILER): Use mips_push_asm_switch\n\tand mips_pop_asm_switch.\n\t(ASM_OUTPUT_REG_POP): Likewise.\n\t(DBR_OUTPUT_SEQEND): Remove boilerplate comment.\n\tUse mips_pop_asm_switch.\n\t(mips_asm_switch): New structure.\n\t(set_noreorder, set_nomacro): Replace with...\n\t(mips_noreorder, mips_nomacro, mips_noat): ...these new variables.\n\t* config/mips/mips.md (fix_truncdfsi2_macro): Use mips_nomacro\n\tinstead of set_nomacro.\n\t(fix_truncsfsi2_macro): Likewise.\n\t(cprestore): Likewise.\n\t(hazard): Use mips_noreorder instead of set_noreorder.\n\t* config/mips/sdemtk.h (FUNCTION_PROFILER): As for mips.h.\n\nFrom-SVN: r150803", "tree": {"sha": "40aa6e7ef6e835d83f2311c82256d91172b93af3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40aa6e7ef6e835d83f2311c82256d91172b93af3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf5fb4b0d5ef246c8aa90fea9439c696c8462b8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf5fb4b0d5ef246c8aa90fea9439c696c8462b8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf5fb4b0d5ef246c8aa90fea9439c696c8462b8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf5fb4b0d5ef246c8aa90fea9439c696c8462b8f/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3eb96d01d4cd50c20e35521429b523fe96ea9cb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3eb96d01d4cd50c20e35521429b523fe96ea9cb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3eb96d01d4cd50c20e35521429b523fe96ea9cb3"}], "stats": {"total": 229, "additions": 144, "deletions": 85}, "files": [{"sha": "a965bb2f2a4968251e9495773d1b79e21825d87a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf5fb4b0d5ef246c8aa90fea9439c696c8462b8f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf5fb4b0d5ef246c8aa90fea9439c696c8462b8f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cf5fb4b0d5ef246c8aa90fea9439c696c8462b8f", "patch": "@@ -1,3 +1,34 @@\n+2009-08-16  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* config/mips/mips-protos.h (mips_push_asm_switch): New function.\n+\t(mips_pop_asm_switch): Likewise.\n+\t* config/mips/mips.c (set_noreorder, set_nomacro, set_noat): Replace\n+\twith...\n+\t(mips_noreorder, mips_nomacro, mips_noat): ...these new variables.\n+\t(mips_push_asm_switch_1, mips_pop_asm_switch_1): New functions.\n+\t(mips_push_asm_switch, mips_pop_asm_switch): Likewise.\n+\t(mips_print_operand_punctuation): Use them.  Check mips_noreorder\n+\tinstead of set_noreorder.\n+\t(mips_output_function_prologue): Use the new functions.\n+\t(mips_output_function_epilogue): Likewise.\n+\t(mips_need_noat_wrapper_p): New function, split out from...\n+\t(mips_final_prescan_insn, mips_final_postscan_insn): ...here.\n+\tUse mips_push_asm_switch and mips_pop_asm_switch.\n+\t* config/mips/mips.h (FUNCTION_PROFILER): Use mips_push_asm_switch\n+\tand mips_pop_asm_switch.\n+\t(ASM_OUTPUT_REG_POP): Likewise.\n+\t(DBR_OUTPUT_SEQEND): Remove boilerplate comment.\n+\tUse mips_pop_asm_switch.\n+\t(mips_asm_switch): New structure.\n+\t(set_noreorder, set_nomacro): Replace with...\n+\t(mips_noreorder, mips_nomacro, mips_noat): ...these new variables.\n+\t* config/mips/mips.md (fix_truncdfsi2_macro): Use mips_nomacro\n+\tinstead of set_nomacro.\n+\t(fix_truncsfsi2_macro): Likewise.\n+\t(cprestore): Likewise.\n+\t(hazard): Use mips_noreorder instead of set_noreorder.\n+\t* config/mips/sdemtk.h (FUNCTION_PROFILER): As for mips.h.\n+\n 2009-08-16  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/alpha/alpha.c (alpha_and_function): Handle NULL_RTX returned"}, {"sha": "d35025942216fd786d70675156f96e881f3aff39", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf5fb4b0d5ef246c8aa90fea9439c696c8462b8f/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf5fb4b0d5ef246c8aa90fea9439c696c8462b8f/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=cf5fb4b0d5ef246c8aa90fea9439c696c8462b8f", "patch": "@@ -254,6 +254,8 @@ extern void mips_conditional_register_usage (void);\n extern void mips_order_regs_for_local_alloc (void);\n extern HOST_WIDE_INT mips_debugger_offset (rtx, HOST_WIDE_INT);\n \n+extern void mips_push_asm_switch (struct mips_asm_switch *);\n+extern void mips_pop_asm_switch (struct mips_asm_switch *);\n extern void mips_print_operand (FILE *, rtx, int);\n extern void mips_print_operand_address (FILE *, rtx);\n extern void mips_output_external (FILE *, tree, const char *);"}, {"sha": "572d6e7d40cf62fc3037042a8350ac37519a3b61", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 85, "deletions": 46, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf5fb4b0d5ef246c8aa90fea9439c696c8462b8f/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf5fb4b0d5ef246c8aa90fea9439c696c8462b8f/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=cf5fb4b0d5ef246c8aa90fea9439c696c8462b8f", "patch": "@@ -440,9 +440,9 @@ int mips_dbx_regno[FIRST_PSEUDO_REGISTER];\n int mips_dwarf_regno[FIRST_PSEUDO_REGISTER];\n \n /* The nesting depth of the PRINT_OPERAND '%(', '%<' and '%[' constructs.  */\n-int set_noreorder;\n-int set_nomacro;\n-static int set_noat;\n+struct mips_asm_switch mips_noreorder = { \"reorder\", 0 };\n+struct mips_asm_switch mips_nomacro = { \"macro\", 0 };\n+struct mips_asm_switch mips_noat = { \"at\", 0 };\n \n /* True if we're writing out a branch-likely instruction rather than a\n    normal branch.  */\n@@ -6989,6 +6989,45 @@ mips_print_operand_reloc (FILE *file, rtx op, enum mips_symbol_context context,\n       fputc (')', file);\n }\n \n+/* Start a new block with the given asm switch enabled.  If we need\n+   to print a directive, emit PREFIX before it and SUFFIX after it.  */\n+\n+static void\n+mips_push_asm_switch_1 (struct mips_asm_switch *asm_switch,\n+\t\t\tconst char *prefix, const char *suffix)\n+{\n+  if (asm_switch->nesting_level == 0)\n+    fprintf (asm_out_file, \"%s.set\\tno%s%s\", prefix, asm_switch->name, suffix);\n+  asm_switch->nesting_level++;\n+}\n+\n+/* Likewise, but end a block.  */\n+\n+static void\n+mips_pop_asm_switch_1 (struct mips_asm_switch *asm_switch,\n+\t\t       const char *prefix, const char *suffix)\n+{\n+  gcc_assert (asm_switch->nesting_level);\n+  asm_switch->nesting_level--;\n+  if (asm_switch->nesting_level == 0)\n+    fprintf (asm_out_file, \"%s.set\\t%s%s\", prefix, asm_switch->name, suffix);\n+}\n+\n+/* Wrappers around mips_push_asm_switch_1 and mips_pop_asm_switch_1\n+   that either print a complete line or print nothing.  */\n+\n+void\n+mips_push_asm_switch (struct mips_asm_switch *asm_switch)\n+{\n+  mips_push_asm_switch_1 (asm_switch, \"\\t\", \"\\n\");\n+}\n+\n+void\n+mips_pop_asm_switch (struct mips_asm_switch *asm_switch)\n+{\n+  mips_pop_asm_switch_1 (asm_switch, \"\\t\", \"\\n\");\n+}\n+\n /* Print the text for PRINT_OPERAND punctation character CH to FILE.\n    The punctuation characters are:\n \n@@ -7019,36 +7058,27 @@ mips_print_operand_punctuation (FILE *file, int ch)\n   switch (ch)\n     {\n     case '(':\n-      if (set_noreorder++ == 0)\n-\tfputs (\".set\\tnoreorder\\n\\t\", file);\n+      mips_push_asm_switch_1 (&mips_noreorder, \"\", \"\\n\\t\");\n       break;\n \n     case ')':\n-      gcc_assert (set_noreorder > 0);\n-      if (--set_noreorder == 0)\n-\tfputs (\"\\n\\t.set\\treorder\", file);\n+      mips_pop_asm_switch_1 (&mips_noreorder, \"\\n\\t\", \"\");\n       break;\n \n     case '[':\n-      if (set_noat++ == 0)\n-\tfputs (\".set\\tnoat\\n\\t\", file);\n+      mips_push_asm_switch_1 (&mips_noat, \"\", \"\\n\\t\");\n       break;\n \n     case ']':\n-      gcc_assert (set_noat > 0);\n-      if (--set_noat == 0)\n-\tfputs (\"\\n\\t.set\\tat\", file);\n+      mips_pop_asm_switch_1 (&mips_noat, \"\\n\\t\", \"\");\n       break;\n \n     case '<':\n-      if (set_nomacro++ == 0)\n-\tfputs (\".set\\tnomacro\\n\\t\", file);\n+      mips_push_asm_switch_1 (&mips_nomacro, \"\", \"\\n\\t\");\n       break;\n \n     case '>':\n-      gcc_assert (set_nomacro > 0);\n-      if (--set_nomacro == 0)\n-\tfputs (\"\\n\\t.set\\tmacro\", file);\n+      mips_pop_asm_switch_1 (&mips_nomacro, \"\\n\\t\", \"\");\n       break;\n \n     case '*':\n@@ -7060,15 +7090,15 @@ mips_print_operand_punctuation (FILE *file, int ch)\n       break;\n \n     case '#':\n-      if (set_noreorder != 0)\n+      if (mips_noreorder.nesting_level > 0)\n \tfputs (\"\\n\\tnop\", file);\n       break;\n \n     case '/':\n       /* Print an extra newline so that the delayed insn is separated\n \t from the following ones.  This looks neater and is consistent\n \t with non-nop delayed sequences.  */\n-      if (set_noreorder != 0 && final_sequence == 0)\n+      if (mips_noreorder.nesting_level > 0 && final_sequence == 0)\n \tfputs (\"\\n\\tnop\\n\", file);\n       break;\n \n@@ -9267,14 +9297,23 @@ mips_output_function_prologue (FILE *file, HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n \t  output_asm_insn (\"sll\\t$2,16\", 0);\n \t  output_asm_insn (\"addu\\t$2,$3\", 0);\n \t}\n-      /* .cpload must be in a .set noreorder but not a .set nomacro block.  */\n-      else if (!cfun->machine->all_noreorder_p)\n-\toutput_asm_insn (\"%(.cpload\\t%^%)\", 0);\n       else\n-\toutput_asm_insn (\"%(.cpload\\t%^\\n\\t%<\", 0);\n+\t{\n+\t  /* .cpload must be in a .set noreorder but not a\n+\t     .set nomacro block.  */\n+\t  mips_push_asm_switch (&mips_noreorder);\n+\t  output_asm_insn (\".cpload\\t%^\", 0);\n+\t  if (!cfun->machine->all_noreorder_p)\n+\t    mips_pop_asm_switch (&mips_noreorder);\n+\t  else\n+\t    mips_push_asm_switch (&mips_nomacro);\n+\t}\n     }\n   else if (cfun->machine->all_noreorder_p)\n-    output_asm_insn (\"%(%<\", 0);\n+    {\n+      mips_push_asm_switch (&mips_noreorder);\n+      mips_push_asm_switch (&mips_nomacro);\n+    }\n \n   /* Tell the assembler which register we're using as the global\n      pointer.  This is needed for thunks, since they can use either\n@@ -9296,10 +9335,8 @@ mips_output_function_epilogue (FILE *file ATTRIBUTE_UNUSED,\n \n   if (cfun->machine->all_noreorder_p)\n     {\n-      /* Avoid using %>%) since it adds excess whitespace.  */\n-      output_asm_insn (\".set\\tmacro\", 0);\n-      output_asm_insn (\".set\\treorder\", 0);\n-      set_noreorder = set_nomacro = 0;\n+      mips_pop_asm_switch (&mips_nomacro);\n+      mips_pop_asm_switch (&mips_noreorder);\n     }\n \n   /* Get the function name the same way that toplev.c does before calling\n@@ -14763,36 +14800,38 @@ mips_at_reg_p (rtx *x, void *data ATTRIBUTE_UNUSED)\n   return REG_P (*x) && REGNO (*x) == AT_REGNUM;\n }\n \n+/* Return true if INSN needs to be wrapped in \".set noat\".\n+   INSN has NOPERANDS operands, stored in OPVEC.  */\n \n-/* Implement FINAL_PRESCAN_INSN.  */\n-\n-void\n-mips_final_prescan_insn (rtx insn, rtx *opvec, int noperands)\n+static bool\n+mips_need_noat_wrapper_p (rtx insn, rtx *opvec, int noperands)\n {\n   int i;\n \n-  /* We need to emit \".set noat\" before an instruction that accesses\n-     $1 (AT).  */\n   if (recog_memoized (insn) >= 0)\n     for (i = 0; i < noperands; i++)\n       if (for_each_rtx (&opvec[i], mips_at_reg_p, NULL))\n-\tif (set_noat++ == 0)\n-\t  fprintf (asm_out_file, \"\\t.set\\tnoat\\n\");\n+\treturn true;\n+  return false;\n+}\n+\n+/* Implement FINAL_PRESCAN_INSN.  */\n+\n+void\n+mips_final_prescan_insn (rtx insn, rtx *opvec, int noperands)\n+{\n+  if (mips_need_noat_wrapper_p (insn, opvec, noperands))\n+    mips_push_asm_switch (&mips_noat);\n }\n \n /* Implement TARGET_ASM_FINAL_POSTSCAN_INSN.  */\n \n static void\n-mips_final_postscan_insn (FILE *file, rtx insn, rtx *opvec, int noperands)\n+mips_final_postscan_insn (FILE *file ATTRIBUTE_UNUSED, rtx insn,\n+\t\t\t  rtx *opvec, int noperands)\n {\n-  int i;\n-\n-  /* Close any \".set noat\" block opened by mips_final_prescan_insn.  */\n-  if (recog_memoized (insn) >= 0)\n-    for (i = 0; i < noperands; i++)\n-      if (for_each_rtx (&opvec[i], mips_at_reg_p, NULL))\n-\tif (--set_noat == 0)\n-\t  fprintf (file, \"\\t.set\\tat\\n\");\n+  if (mips_need_noat_wrapper_p (insn, opvec, noperands))\n+    mips_pop_asm_switch (&mips_noat);\n }\n \f\n /* Initialize the GCC target structure.  */"}, {"sha": "76ab40a1e57b8a26ad784b843d986c7026c22a75", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 20, "deletions": 33, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf5fb4b0d5ef246c8aa90fea9439c696c8462b8f/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf5fb4b0d5ef246c8aa90fea9439c696c8462b8f/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=cf5fb4b0d5ef246c8aa90fea9439c696c8462b8f", "patch": "@@ -2364,7 +2364,7 @@ typedef struct mips_args {\n       else\t\t\t\t\t\t\t\t\\\n \tfprintf (FILE, \"\\tla\\t%s,_mcount\\n\", reg_names[GP_REG_FIRST + 3]); \\\n     }\t\t\t\t\t\t\t\t\t\\\n-  fprintf (FILE, \"\\t.set\\tnoat\\n\");\t\t\t\t\t\\\n+  mips_push_asm_switch (&mips_noat);\t\t\t\t\t\\\n   fprintf (FILE, \"\\tmove\\t%s,%s\\t\\t# save current return address\\n\",\t\\\n \t   reg_names[GP_REG_FIRST + 1], reg_names[GP_REG_FIRST + 31]);\t\\\n   /* _mcount treats $2 as the static chain register.  */\t\t\\\n@@ -2384,7 +2384,7 @@ typedef struct mips_args {\n     fprintf (FILE, \"\\tjalr\\t%s\\n\", reg_names[GP_REG_FIRST + 3]);\t\\\n   else\t\t\t\t\t\t\t\t\t\\\n     fprintf (FILE, \"\\tjal\\t_mcount\\n\");\t\t\t\t\t\\\n-  fprintf (FILE, \"\\t.set\\tat\\n\");\t\t\t\t\t\\\n+  mips_pop_asm_switch (&mips_noat);\t\t\t\t\t\\\n   /* _mcount treats $2 as the static chain register.  */\t\t\\\n   if (cfun->static_chain_decl != NULL)\t\t\t\t\t\\\n     fprintf (FILE, \"\\tmove\\t%s,%s\\n\", reg_names[STATIC_CHAIN_REGNUM],\t\\\n@@ -2778,32 +2778,13 @@ typedef struct mips_args {\n #define PRINT_OPERAND_PUNCT_VALID_P(CODE) mips_print_operand_punct[CODE]\n #define PRINT_OPERAND_ADDRESS mips_print_operand_address\n \n-/* A C statement, to be executed after all slot-filler instructions\n-   have been output.  If necessary, call `dbr_sequence_length' to\n-   determine the number of slots filled in a sequence (zero if not\n-   currently outputting a sequence), to decide how many no-ops to\n-   output, or whatever.\n-\n-   Don't define this macro if it has nothing to do, but it is\n-   helpful in reading assembly output if the extent of the delay\n-   sequence is made explicit (e.g. with white space).\n-\n-   Note that output routines for instructions with delay slots must\n-   be prepared to deal with not being output as part of a sequence\n-   (i.e.  when the scheduling pass is not run, or when no slot\n-   fillers could be found.)  The variable `final_sequence' is null\n-   when not processing a sequence, otherwise it contains the\n-   `sequence' rtx being output.  */\n-\n #define DBR_OUTPUT_SEQEND(STREAM)\t\t\t\t\t\\\n do\t\t\t\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n-    if (set_nomacro > 0 && --set_nomacro == 0)\t\t\t\t\\\n-      fputs (\"\\t.set\\tmacro\\n\", STREAM);\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-    if (set_noreorder > 0 && --set_noreorder == 0)\t\t\t\\\n-      fputs (\"\\t.set\\treorder\\n\", STREAM);\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n+    /* Undo the effect of '%*'.  */\t\t\t\t\t\\\n+    mips_pop_asm_switch (&mips_nomacro);\t\t\t\t\\\n+    mips_pop_asm_switch (&mips_noreorder);\t\t\t\t\\\n+    /* Emit a blank line after the delay slot for emphasis.  */\t\t\\\n     fputs (\"\\n\", STREAM);\t\t\t\t\t\t\\\n   }\t\t\t\t\t\t\t\t\t\\\n while (0)\n@@ -2996,19 +2977,15 @@ while (0)\n #define ASM_OUTPUT_REG_POP(STREAM,REGNO)\t\t\t\t\\\n do\t\t\t\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n-    if (! set_noreorder)\t\t\t\t\t\t\\\n-      fprintf (STREAM, \"\\t.set\\tnoreorder\\n\");\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n+    mips_push_asm_switch (&mips_noreorder);\t\t\t\t\\\n     fprintf (STREAM, \"\\t%s\\t%s,0(%s)\\n\\t%s\\t%s,%s,8\\n\",\t\t\t\\\n \t     TARGET_64BIT ? \"ld\" : \"lw\",\t\t\t\t\\\n \t     reg_names[REGNO],\t\t\t\t\t\t\\\n \t     reg_names[STACK_POINTER_REGNUM],\t\t\t\t\\\n \t     TARGET_64BIT ? \"daddu\" : \"addu\",\t\t\t\t\\\n \t     reg_names[STACK_POINTER_REGNUM],\t\t\t\t\\\n \t     reg_names[STACK_POINTER_REGNUM]);\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-    if (! set_noreorder)\t\t\t\t\t\t\\\n-      fprintf (STREAM, \"\\t.set\\treorder\\n\");\t\t\t\t\\\n+    mips_pop_asm_switch (&mips_noreorder);\t\t\t\t\\\n   }\t\t\t\t\t\t\t\t\t\\\n while (0)\n \n@@ -3406,13 +3383,23 @@ while (0)\n #define MIPS_SYNC_EXCHANGE_12_NONZERO_OP \"\\tor\\t%@,%@,%4\\n\"\n \n #ifndef USED_FOR_TARGET\n+/* Information about \".set noFOO; ...; .set FOO\" blocks.  */\n+struct mips_asm_switch {\n+  /* The FOO in the description above.  */\n+  const char *name;\n+\n+  /* The current block nesting level, or 0 if we aren't in a block.  */\n+  int nesting_level;\n+};\n+\n extern const enum reg_class mips_regno_to_class[];\n extern bool mips_hard_regno_mode_ok[][FIRST_PSEUDO_REGISTER];\n extern bool mips_print_operand_punct[256];\n extern const char *current_function_file; /* filename current function is in */\n extern int num_source_filenames;\t/* current .file # */\n-extern int set_noreorder;\t\t/* # of nested .set noreorder's  */\n-extern int set_nomacro;\t\t\t/* # of nested .set nomacro's  */\n+extern struct mips_asm_switch mips_noreorder;\n+extern struct mips_asm_switch mips_nomacro;\n+extern struct mips_asm_switch mips_noat;\n extern int mips_dbx_regno[];\n extern int mips_dwarf_regno[];\n extern bool mips_split_p[];"}, {"sha": "77f1fe769087bd4c5c440123629c3ec7c26bd34b", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf5fb4b0d5ef246c8aa90fea9439c696c8462b8f/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf5fb4b0d5ef246c8aa90fea9439c696c8462b8f/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=cf5fb4b0d5ef246c8aa90fea9439c696c8462b8f", "patch": "@@ -3204,7 +3204,7 @@\n    (clobber (match_scratch:DF 2 \"=d\"))]\n   \"TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT && !ISA_HAS_TRUNC_W\"\n {\n-  if (set_nomacro)\n+  if (mips_nomacro.nesting_level > 0)\n     return \".set\\tmacro\\;trunc.w.d %0,%1,%2\\;.set\\tnomacro\";\n   else\n     return \"trunc.w.d %0,%1,%2\";\n@@ -3241,7 +3241,7 @@\n    (clobber (match_scratch:SF 2 \"=d\"))]\n   \"TARGET_HARD_FLOAT && !ISA_HAS_TRUNC_W\"\n {\n-  if (set_nomacro)\n+  if (mips_nomacro.nesting_level > 0)\n     return \".set\\tmacro\\;trunc.w.s %0,%1,%2\\;.set\\tnomacro\";\n   else\n     return \"trunc.w.s %0,%1,%2\";\n@@ -4790,7 +4790,7 @@\n \t\t    UNSPEC_CPRESTORE)]\n   \"\"\n {\n-  if (set_nomacro && which_alternative == 1)\n+  if (mips_nomacro.nesting_level > 0 && which_alternative == 1)\n     return \".set\\tmacro\\;.cprestore\\t%0\\;.set\\tnomacro\";\n   else\n     return \".cprestore\\t%0\";\n@@ -6259,7 +6259,7 @@\n   [(const_int 1)]\n   \"\"\n   {\n-    if (set_noreorder)\n+    if (mips_noreorder.nesting_level > 0)\n       return \"nop\";\n     else\n       return \"#nop\";"}, {"sha": "27dab06f2982b5cd3eb0160f1bea8be977210853", "filename": "gcc/config/mips/sdemtk.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf5fb4b0d5ef246c8aa90fea9439c696c8462b8f/gcc%2Fconfig%2Fmips%2Fsdemtk.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf5fb4b0d5ef246c8aa90fea9439c696c8462b8f/gcc%2Fconfig%2Fmips%2Fsdemtk.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fsdemtk.h?ref=cf5fb4b0d5ef246c8aa90fea9439c696c8462b8f", "patch": "@@ -93,7 +93,7 @@ extern void mips_sync_icache (void *beg, unsigned long len);\n #undef FUNCTION_PROFILER\n #define FUNCTION_PROFILER(FILE, LABELNO)\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\t.set\\tnoat\\n\");\t\t\t\t\t\\\n+    mips_push_asm_switch (&mips_noat);\t\t\t\t\t\\\n     /* _mcount treats $2 as the static chain register.  */\t\t\\\n     if (cfun->static_chain_decl != NULL)\t\t\t\t\\\n       fprintf (FILE, \"\\tmove\\t%s,%s\\n\", reg_names[2],\t\t\t\\\n@@ -103,7 +103,7 @@ extern void mips_sync_icache (void *beg, unsigned long len);\n \t     reg_names[GP_REG_FIRST + (TARGET_MIPS16 ? 3 : 1)],\t\t\\\n \t     reg_names[GP_REG_FIRST + 31]);\t\t\t\t\\\n     fprintf (FILE, \"\\tjal\\t_mcount\\n\");\t\t\t\t\t\\\n-    fprintf (FILE, \"\\t.set\\tat\\n\");\t\t\t\t\t\\\n+    mips_pop_asm_switch (&mips_noat);\t\t\t\t\t\\\n     /* _mcount treats $2 as the static chain register.  */\t\t\\\n     if (cfun->static_chain_decl != NULL)\t\t\t\t\\\n       fprintf (FILE, \"\\tmove\\t%s,%s\\n\", reg_names[STATIC_CHAIN_REGNUM],\t\\"}]}