{"sha": "1fd3ef7f65b9a12b392c889568cbcde92abe5f5b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWZkM2VmN2Y2NWI5YTEyYjM5MmM4ODk1NjhjYmNkZTkyYWJlNWY1Yg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-05-06T17:32:34Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-05-06T17:32:34Z"}, "message": "(assign_parms): Use expr_size when appropriate.\n\nFrom-SVN: r7228", "tree": {"sha": "f00680f8cf241c0d6b15d1d9c917d2184b5d0dac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f00680f8cf241c0d6b15d1d9c917d2184b5d0dac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1fd3ef7f65b9a12b392c889568cbcde92abe5f5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fd3ef7f65b9a12b392c889568cbcde92abe5f5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fd3ef7f65b9a12b392c889568cbcde92abe5f5b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fd3ef7f65b9a12b392c889568cbcde92abe5f5b/comments", "author": null, "committer": null, "parents": [{"sha": "b8c21346e951e20db960b6ef4602f76677344c1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8c21346e951e20db960b6ef4602f76677344c1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8c21346e951e20db960b6ef4602f76677344c1b"}], "stats": {"total": 21, "additions": 7, "deletions": 14}, "files": [{"sha": "596916260f317685822d5254f606f06c0acd670b", "filename": "gcc/function.c", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fd3ef7f65b9a12b392c889568cbcde92abe5f5b/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fd3ef7f65b9a12b392c889568cbcde92abe5f5b/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=1fd3ef7f65b9a12b392c889568cbcde92abe5f5b", "patch": "@@ -3546,21 +3546,14 @@ assign_parms (fndecl, second_time)\n \n \t      if (TYPE_SIZE (type) == 0\n \t\t  || TREE_CODE (TYPE_SIZE (type)) != INTEGER_CST)\n-\t\t{\n-\t\t  /* This is a variable sized object.  */\n-\t\t  /* ??? Can we use expr_size here?  */\n-\t\t  rtx size_rtx = expand_expr (size_in_bytes (type), NULL_RTX,\n-\t\t\t\t\t      TYPE_MODE (sizetype), 0);\n-\n-\t\t  copy = gen_rtx (MEM, BLKmode,\n-\t\t\t\t  allocate_dynamic_stack_space (size_rtx, NULL_RTX,\n-\t\t\t\t\t\t\t\tTYPE_ALIGN (type)));\n-\t\t}\n+\t\t/* This is a variable sized object.  */\n+\t\tcopy = gen_rtx (MEM, BLKmode,\n+\t\t\t\tallocate_dynamic_stack_space\n+\t\t\t\t(expand_size (parm), NULL_RTX,\n+\t\t\t\t TYPE_ALIGN (type)));\n \t      else\n-\t\t{\n-\t\t  int size = int_size_in_bytes (type);\n-\t\t  copy = assign_stack_temp (TYPE_MODE (type), size, 1);\n-\t\t}\n+\t\tcopy = assign_stack_temp (TYPE_MODE (type),\n+\t\t\t\t\t  int_size_in_bytes (type), 1);\n \n \t      store_expr (parm, copy, 0);\n \t      emit_move_insn (parmreg, XEXP (copy, 0));"}]}