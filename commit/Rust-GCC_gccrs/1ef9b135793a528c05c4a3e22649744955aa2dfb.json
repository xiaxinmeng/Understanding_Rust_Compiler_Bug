{"sha": "1ef9b135793a528c05c4a3e22649744955aa2dfb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWVmOWIxMzU3OTNhNTI4YzA1YzRhM2UyMjY0OTc0NDk1NWFhMmRmYg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-07-20T14:42:02Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-07-20T14:42:02Z"}, "message": "aarch64: Tweak old vect-* tests to avoid new FAILs\n\nI'm not sure what these test were originally designed to test.\nvaddv and vmaxv seem to be testing for vectorisation, with associated\nscan-assembler tests.  But they use arm_neon.h functions to test\nthe results, which would presumably also trip many of the scans.\nThat was probably what the split into vect-fmax-fmin.c and\nvect-fmaxv-fminv-compile.c was supposed to avoid.\n\nAnyway, the tests started failing after the recent change to allow\nstaged reductions for epilogue loops.  And epilogues came into play\nbecause the reduction loops iterate LANES-1 rather than LANES times.\n(vmaxv was trying to iterate LANES times, but the gimple optimisers\noutsmarted it.  The other two explicitly had a count of LANES-1.)\n\nJust suppressing epilogues causes other issues for vaddv and vmaxv.\nThe easiest fix therefore seemed to be to use an asm to hide the\ninitial value of the vmaxv loop (so that it really does iterate\nLANES times) and then make the others match that style.\n\ngcc/testsuite/\n\tPR testsuite/101506\n\t* gcc.target/aarch64/vect-vmaxv.c: Use an asm to hide the\n\ttrue initial value of the reduction from the vectorizer.\n\t* gcc.target/aarch64/vect-vaddv.c: Likewise.  Make the vector\n\tloop operate on exactly LANES (rather than LANES-1) iterations.\n\t* gcc.target/aarch64/vect-fmaxv-fminv.x: Likewise.", "tree": {"sha": "7c103fb256b38fa1dd23e8d479866e9f5d4a5628", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c103fb256b38fa1dd23e8d479866e9f5d4a5628"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ef9b135793a528c05c4a3e22649744955aa2dfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ef9b135793a528c05c4a3e22649744955aa2dfb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ef9b135793a528c05c4a3e22649744955aa2dfb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ef9b135793a528c05c4a3e22649744955aa2dfb/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c4ae4ff46b1d7633f1e06f57d348b5817b8f640", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c4ae4ff46b1d7633f1e06f57d348b5817b8f640", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c4ae4ff46b1d7633f1e06f57d348b5817b8f640"}], "stats": {"total": 26, "additions": 15, "deletions": 11}, "files": [{"sha": "d3ba31c425a90bef4518b934fde7fb19ace47019", "filename": "gcc/testsuite/gcc.target/aarch64/vect-fmaxv-fminv.x", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ef9b135793a528c05c4a3e22649744955aa2dfb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fmaxv-fminv.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ef9b135793a528c05c4a3e22649744955aa2dfb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fmaxv-fminv.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fmaxv-fminv.x?ref=1ef9b135793a528c05c4a3e22649744955aa2dfb", "patch": "@@ -5,8 +5,9 @@ typedef double *__restrict__ pRF64;\n float maxv_f32 (pRF32 a)\n {\n   int i;\n-  float s = a[0];\n-  for (i=1;i<8;i++)\n+  float s;\n+  asm (\"\" : \"=w\" (s) : \"0\" (a[0]));\n+  for (i=0;i<8;i++)\n     s = (s > a[i] ? s :  a[i]);\n \n   return s;\n@@ -15,8 +16,9 @@ float maxv_f32 (pRF32 a)\n float minv_f32 (pRF32 a)\n {\n   int i;\n-  float s = a[0];\n-  for (i=1;i<16;i++)\n+  float s;\n+  asm (\"\" : \"=w\" (s) : \"0\" (a[0]));\n+  for (i=0;i<16;i++)\n     s = (s < a[i] ? s :  a[i]);\n \n   return s;\n@@ -25,8 +27,9 @@ float minv_f32 (pRF32 a)\n double maxv_f64 (pRF64 a)\n {\n   int i;\n-  double s = a[0];\n-  for (i=1;i<8;i++)\n+  double s;\n+  asm (\"\" : \"=w\" (s) : \"0\" (a[0]));\n+  for (i=0;i<8;i++)\n     s = (s > a[i] ? s :  a[i]);\n \n   return s;\n@@ -35,8 +38,9 @@ double maxv_f64 (pRF64 a)\n double minv_f64 (pRF64 a)\n {\n   int i;\n-  double s = a[0];\n-  for (i=1;i<16;i++)\n+  double s;\n+  asm (\"\" : \"=w\" (s) : \"0\" (a[0]));\n+  for (i=0;i<16;i++)\n     s = (s < a[i] ? s :  a[i]);\n \n   return s;"}, {"sha": "3a12ae9706afa99fbf861078b337cf234ff2c1f8", "filename": "gcc/testsuite/gcc.target/aarch64/vect-vaddv.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ef9b135793a528c05c4a3e22649744955aa2dfb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-vaddv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ef9b135793a528c05c4a3e22649744955aa2dfb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-vaddv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-vaddv.c?ref=1ef9b135793a528c05c4a3e22649744955aa2dfb", "patch": "@@ -57,8 +57,8 @@ test_vaddv##SUFFIX##_##TYPE##x##LANES##_t (void)\t\t\t\\\n   /* Calculate linearly.  */\t\t\t\t\t\t\\\n   for (i = 0; i < moves; i++)\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      out_l[i] = input_##TYPE[i];\t\t\t\t\t\\\n-      for (j = 1; j < LANES; j++)\t\t\t\t\t\\\n+      asm (\"\" : \"=r\" (out_l[i]) : \"0\" (0));\t\t\t\t\\\n+      for (j = 0; j < LANES; j++)\t\t\t\t\t\\\n \tout_l[i] += input_##TYPE[i + j];\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\"}, {"sha": "1bdea890d3e2b96c7137f271ece983ce6faf51e2", "filename": "gcc/testsuite/gcc.target/aarch64/vect-vmaxv.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ef9b135793a528c05c4a3e22649744955aa2dfb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-vmaxv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ef9b135793a528c05c4a3e22649744955aa2dfb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-vmaxv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-vmaxv.c?ref=1ef9b135793a528c05c4a3e22649744955aa2dfb", "patch": "@@ -36,7 +36,7 @@ test_v##MAXMIN##v##SUFFIX##_##TYPE##x##LANES##_t (void)\t\t\t\\\n   /* Calculate linearly.  */\t\t\t\t\t\t\\\n   for (i = 0; i < moves; i++)\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      out_l[i] = input_##TYPE[i];\t\t\t\t\t\\\n+      asm (\"\" : \"=r\" (out_l[i]) : \"0\" (input_##TYPE[i]));\t\t\\\n       for (j = 0; j < LANES; j++)\t\t\t\t\t\\\n \tout_l[i] = input_##TYPE[i + j] CMP_OP out_l[i]  ?\t\t\\\n \t  input_##TYPE[i + j] : out_l[i];\t\t\t\t\\"}]}