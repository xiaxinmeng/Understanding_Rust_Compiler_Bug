{"sha": "93e2382f2cf48b874a5f2ff6359f134878498b69", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTNlMjM4MmYyY2Y0OGI4NzRhNWYyZmY2MzU5ZjEzNDg3ODQ5OGI2OQ==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2000-08-21T14:30:38Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2000-08-21T14:30:38Z"}, "message": "c-tree.h (flag_hosted): Move declaration from here...\n\n\t* c-tree.h (flag_hosted): Move declaration from here...\n\t* c-common.h (flag_hosted): ... to here.\n\t(flag_noniso_default_format_attributes): New declaration.\n\t* c-decl.c (flag_noniso_default_format_attributes): New variable.\n\t(c_decode_option): Set it appropriately for options choosing\n\tlanguage standard variant.\n\t* c-common.c (init_function_format_info): Only provide default\n\tformat attributes if flag_hosted.  Only provide the gettext\n\tformats if flag_noniso_default_format_attributes.  Update\n\tcomments.\n\t(check_format_info): Disable treatment of %a as a scanf flag in\n\tC99 mode.\n\ncp:\n\t* decl.c (flag_hosted, flag_noniso_default_format_attributes): New\n\tvariables.\n\t* decl2.c (lang_decode_option): Disable gettext attributes for\n\t-ansi.\n\nFrom-SVN: r35843", "tree": {"sha": "cbd1a1410505f0820a83aa92687d31f4e159e3d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cbd1a1410505f0820a83aa92687d31f4e159e3d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93e2382f2cf48b874a5f2ff6359f134878498b69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93e2382f2cf48b874a5f2ff6359f134878498b69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93e2382f2cf48b874a5f2ff6359f134878498b69", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93e2382f2cf48b874a5f2ff6359f134878498b69/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3d360aad1dbc188c0f0bbe7d44a32bdb20cd62c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3d360aad1dbc188c0f0bbe7d44a32bdb20cd62c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3d360aad1dbc188c0f0bbe7d44a32bdb20cd62c"}], "stats": {"total": 124, "additions": 90, "deletions": 34}, "files": [{"sha": "5f289b4cdd397a3a90198b83cca6e6828402c1c8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93e2382f2cf48b874a5f2ff6359f134878498b69/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93e2382f2cf48b874a5f2ff6359f134878498b69/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=93e2382f2cf48b874a5f2ff6359f134878498b69", "patch": "@@ -1,3 +1,18 @@\n+2000-08-21  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* c-tree.h (flag_hosted): Move declaration from here...\n+\t* c-common.h (flag_hosted): ... to here.\n+\t(flag_noniso_default_format_attributes): New declaration.\n+\t* c-decl.c (flag_noniso_default_format_attributes): New variable.\n+\t(c_decode_option): Set it appropriately for options choosing\n+\tlanguage standard variant.\n+\t* c-common.c (init_function_format_info): Only provide default\n+\tformat attributes if flag_hosted.  Only provide the gettext\n+\tformats if flag_noniso_default_format_attributes.  Update\n+\tcomments.\n+\t(check_format_info): Disable treatment of %a as a scanf flag in\n+\tC99 mode.\n+\n 2000-08-21  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* c-common.c (scan_char_table): Add 'w' to flags for all formats"}, {"sha": "c0b9816c30192e11ddb03d1b17125e2b0e18c43a", "filename": "gcc/c-common.c", "status": "modified", "additions": 40, "deletions": 29, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93e2382f2cf48b874a5f2ff6359f134878498b69/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93e2382f2cf48b874a5f2ff6359f134878498b69/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=93e2382f2cf48b874a5f2ff6359f134878498b69", "patch": "@@ -1325,40 +1325,46 @@ static international_format_info *international_format_list = NULL;\n static void check_format_info\tPARAMS ((function_format_info *, tree));\n \n /* Initialize the table of functions to perform format checking on.\n-   The ANSI functions are always checked (whether <stdio.h> is\n+   The ISO C functions are always checked (whether <stdio.h> is\n    included or not), since it is common to call printf without\n    including <stdio.h>.  There shouldn't be a problem with this,\n-   since ANSI reserves these function names whether you include the\n-   header file or not.  In any case, the checking is harmless.\n+   since ISO C reserves these function names whether you include the\n+   header file or not.  In any case, the checking is harmless.  With\n+   -ffreestanding, these default attributes are disabled, and must be\n+   specified manually if desired.\n \n    Also initialize the name of function that modify the format string for\n    internationalization purposes.  */\n \n void\n init_function_format_info ()\n {\n-  record_function_format (get_identifier (\"printf\"), NULL_TREE,\n-\t\t\t  printf_format_type, 1, 2);\n-  record_function_format (get_identifier (\"fprintf\"), NULL_TREE,\n-\t\t\t  printf_format_type, 2, 3);\n-  record_function_format (get_identifier (\"sprintf\"), NULL_TREE,\n-\t\t\t  printf_format_type, 2, 3);\n-  record_function_format (get_identifier (\"scanf\"), NULL_TREE,\n-\t\t\t  scanf_format_type, 1, 2);\n-  record_function_format (get_identifier (\"fscanf\"), NULL_TREE,\n-\t\t\t  scanf_format_type, 2, 3);\n-  record_function_format (get_identifier (\"sscanf\"), NULL_TREE,\n-\t\t\t  scanf_format_type, 2, 3);\n-  record_function_format (get_identifier (\"vprintf\"), NULL_TREE,\n-\t\t\t  printf_format_type, 1, 0);\n-  record_function_format (get_identifier (\"vfprintf\"), NULL_TREE,\n-\t\t\t  printf_format_type, 2, 0);\n-  record_function_format (get_identifier (\"vsprintf\"), NULL_TREE,\n-\t\t\t  printf_format_type, 2, 0);\n-  record_function_format (get_identifier (\"strftime\"), NULL_TREE,\n-\t\t\t  strftime_format_type, 3, 0);\n-\n-  if (flag_isoc99)\n+  if (flag_hosted)\n+    {\n+      /* Functions from ISO/IEC 9899:1990.  */\n+      record_function_format (get_identifier (\"printf\"), NULL_TREE,\n+\t\t\t      printf_format_type, 1, 2);\n+      record_function_format (get_identifier (\"fprintf\"), NULL_TREE,\n+\t\t\t      printf_format_type, 2, 3);\n+      record_function_format (get_identifier (\"sprintf\"), NULL_TREE,\n+\t\t\t      printf_format_type, 2, 3);\n+      record_function_format (get_identifier (\"scanf\"), NULL_TREE,\n+\t\t\t      scanf_format_type, 1, 2);\n+      record_function_format (get_identifier (\"fscanf\"), NULL_TREE,\n+\t\t\t      scanf_format_type, 2, 3);\n+      record_function_format (get_identifier (\"sscanf\"), NULL_TREE,\n+\t\t\t      scanf_format_type, 2, 3);\n+      record_function_format (get_identifier (\"vprintf\"), NULL_TREE,\n+\t\t\t      printf_format_type, 1, 0);\n+      record_function_format (get_identifier (\"vfprintf\"), NULL_TREE,\n+\t\t\t      printf_format_type, 2, 0);\n+      record_function_format (get_identifier (\"vsprintf\"), NULL_TREE,\n+\t\t\t      printf_format_type, 2, 0);\n+      record_function_format (get_identifier (\"strftime\"), NULL_TREE,\n+\t\t\t      strftime_format_type, 3, 0);\n+    }\n+\n+  if (flag_hosted && flag_isoc99)\n     {\n       /* ISO C99 adds the snprintf and vscanf family functions.  */\n       record_function_format (get_identifier (\"snprintf\"), NULL_TREE,\n@@ -1373,9 +1379,13 @@ init_function_format_info ()\n \t\t\t      scanf_format_type, 2, 0);\n     }\n \n-  record_international_format (get_identifier (\"gettext\"), NULL_TREE, 1);\n-  record_international_format (get_identifier (\"dgettext\"), NULL_TREE, 2);\n-  record_international_format (get_identifier (\"dcgettext\"), NULL_TREE, 2);\n+  if (flag_hosted && flag_noniso_default_format_attributes)\n+    {\n+      /* Uniforum/GNU gettext functions, not in ISO C.  */\n+      record_international_format (get_identifier (\"gettext\"), NULL_TREE, 1);\n+      record_international_format (get_identifier (\"dgettext\"), NULL_TREE, 2);\n+      record_international_format (get_identifier (\"dcgettext\"), NULL_TREE, 2);\n+    }\n }\n \n /* Record information for argument format checking.  FUNCTION_IDENT is\n@@ -1872,7 +1882,8 @@ check_format_info (info, params)\n \t      if (pedantic && !flag_isoc99)\n \t\twarning (\"ISO C89 does not support the `hh' length modifier\");\n \t    }\n-\t  if (*format_chars == 'a' && info->format_type == scanf_format_type)\n+\t  if (*format_chars == 'a' && info->format_type == scanf_format_type\n+\t      && !flag_isoc99)\n \t    {\n \t      if (format_chars[1] == 's' || format_chars[1] == 'S'\n \t\t  || format_chars[1] == '[')"}, {"sha": "0fc84a58f6d833d9c6a6c98e61deeb3f1bfaf401", "filename": "gcc/c-common.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93e2382f2cf48b874a5f2ff6359f134878498b69/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93e2382f2cf48b874a5f2ff6359f134878498b69/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=93e2382f2cf48b874a5f2ff6359f134878498b69", "patch": "@@ -195,6 +195,15 @@ extern int flag_isoc99;\n \n extern int flag_digraphs;\n \n+/* Nonzero means environment is hosted (i.e., not freestanding) */\n+\n+extern int flag_hosted;\n+\n+/* Nonzero means add default format_arg attributes for functions not\n+   in ISO C.  */\n+\n+extern int flag_noniso_default_format_attributes;\n+\n /* Nonzero means warn about suggesting putting in ()'s.  */\n \n extern int warn_parentheses;"}, {"sha": "c9afb28ccd2ff7d9cf20abcae231d600232a132b", "filename": "gcc/c-decl.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93e2382f2cf48b874a5f2ff6359f134878498b69/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93e2382f2cf48b874a5f2ff6359f134878498b69/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=93e2382f2cf48b874a5f2ff6359f134878498b69", "patch": "@@ -345,6 +345,11 @@ int flag_digraphs = 1;\n \n int flag_hosted = 1;\n \n+/* Nonzero means add default format_arg attributes for functions not\n+   in ISO C.  */\n+\n+int flag_noniso_default_format_attributes = 1;\n+\n /* Nonzero means to allow single precision math even if we're generally\n    being traditional.  */\n int flag_allow_single_precision = 0;\n@@ -550,6 +555,7 @@ c_decode_option (argc, argv)\n \t  flag_writable_strings = 0;\n \t  flag_no_asm = 1;\n \t  flag_no_nonansi_builtin = 1;\n+\t  flag_noniso_default_format_attributes = 0;\n \t  flag_isoc99 = 0;\n \t}\n       else if (!strcmp (argstart, \"iso9899:199409\"))\n@@ -567,6 +573,7 @@ c_decode_option (argc, argv)\n \t  flag_writable_strings = 0;\n \t  flag_no_asm = 1;\n \t  flag_no_nonansi_builtin = 1;\n+\t  flag_noniso_default_format_attributes = 0;\n \t  flag_isoc99 = 1;\n \t  flag_digraphs = 1;\n \t  flag_isoc94 = 1;\n@@ -577,6 +584,7 @@ c_decode_option (argc, argv)\n \t  flag_writable_strings = 0;\n \t  flag_no_asm = 0;\n \t  flag_no_nonansi_builtin = 0;\n+\t  flag_noniso_default_format_attributes = 1;\n \t  flag_isoc99 = 0;\n \t  flag_digraphs = 1;\n \t  flag_isoc94 = 0;\n@@ -587,6 +595,7 @@ c_decode_option (argc, argv)\n \t  flag_writable_strings = 0;\n \t  flag_no_asm = 0;\n \t  flag_no_nonansi_builtin = 0;\n+\t  flag_noniso_default_format_attributes = 1;\n \t  flag_isoc99 = 1;\n \t  flag_digraphs = 1;\n \t  flag_isoc94 = 1;"}, {"sha": "f3ad275f35e26f73574f733be3168ba8be988481", "filename": "gcc/c-tree.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93e2382f2cf48b874a5f2ff6359f134878498b69/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93e2382f2cf48b874a5f2ff6359f134878498b69/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=93e2382f2cf48b874a5f2ff6359f134878498b69", "patch": "@@ -299,10 +299,6 @@ extern int flag_cond_mismatch;\n \n extern int flag_no_asm;\n \n-/* Nonzero means environment is hosted (i.e., not freestanding) */\n-\n-extern int flag_hosted;\n-\n /* Nonzero means warn about implicit declarations.  */\n \n extern int warn_implicit;"}, {"sha": "98fb6697fed0f16502da3b82269fc8e0599a728a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93e2382f2cf48b874a5f2ff6359f134878498b69/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93e2382f2cf48b874a5f2ff6359f134878498b69/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=93e2382f2cf48b874a5f2ff6359f134878498b69", "patch": "@@ -1,3 +1,10 @@\n+2000-08-21  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* decl.c (flag_hosted, flag_noniso_default_format_attributes): New\n+\tvariables.\n+\t* decl2.c (lang_decode_option): Disable gettext attributes for\n+\t-ansi.\n+\n 2000-08-21  Gabriel Dos Reis  <gdr@codesourcery.com>\n \n \t* lex.c (lang_init_options): Default diagnostic message maximum"}, {"sha": "d9e2e982d4cf0f1631ab819e84f1a2cba2961891", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93e2382f2cf48b874a5f2ff6359f134878498b69/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93e2382f2cf48b874a5f2ff6359f134878498b69/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=93e2382f2cf48b874a5f2ff6359f134878498b69", "patch": "@@ -345,6 +345,15 @@ int flag_isoc94;\n \n int flag_isoc99;\n \n+/* Nonzero means we are a hosted implementation for code shared with C.  */\n+\n+int flag_hosted = 1;\n+\n+/* Nonzero means add default format_arg attributes for functions not\n+   in ISO C.  */\n+\n+int flag_noniso_default_format_attributes = 1;\n+\n /* Nonzero means give `double' the same size as `float'.  */\n \n extern int flag_short_double;"}, {"sha": "31e42ae1dbdad99f3bbf6a959d5b8d958321f183", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93e2382f2cf48b874a5f2ff6359f134878498b69/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93e2382f2cf48b874a5f2ff6359f134878498b69/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=93e2382f2cf48b874a5f2ff6359f134878498b69", "patch": "@@ -822,7 +822,7 @@ lang_decode_option (argc, argv)\n     }\n   else if (!strcmp (p, \"-ansi\"))\n     flag_no_nonansi_builtin = 1, flag_ansi = 1,\n-    flag_no_gnu_keywords = 1;\n+    flag_noniso_default_format_attributes = 0, flag_no_gnu_keywords = 1;\n #ifdef SPEW_DEBUG\n   /* Undocumented, only ever used when you're invoking cc1plus by hand, since\n      it's probably safe to assume no sane person would ever want to use this"}]}