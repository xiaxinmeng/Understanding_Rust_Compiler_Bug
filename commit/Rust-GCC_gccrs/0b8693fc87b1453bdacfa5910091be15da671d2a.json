{"sha": "0b8693fc87b1453bdacfa5910091be15da671d2a", "node_id": "C_kwDOANBUbNoAKDBiODY5M2ZjODdiMTQ1M2JkYWNmYTU5MTAwOTFiZTE1ZGE2NzFkMmE", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2023-02-02T23:29:45Z"}, "committer": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2023-02-02T23:29:45Z"}, "message": "c: Update nullptr_t comparison checks\n\nWG14 has agreed to allow equality comparisons between pointers and\nnullptr_t values that are not null pointer constants (this was\npreviously an exceptional case where such nullptr_t values were\nhandled differently from null pointer constants; other places in the\nstandard allowed nullptr_t values, whether or not those values are\nnull pointer constants, in the same contexts as null pointer\nconstants); see the wording at the end of N3077.  Update GCC's\nimplementation to match this change.\n\nThere are also changes to allow null pointer constants of integer or\npointer type to be converted to nullptr_t (by assignment, cast or\nconversion as if by assignment), which I'll deal with separately.\n\nBootstrapped with no regressions for x86_64-pc-linux-gnu.\n\ngcc/c/\n\t* c-typeck.cc (build_binary_op): Allow comparisons between\n\tpointers and nullptr_t values that are not null pointer constants.\n\ngcc/testsuite/\n\t* gcc.dg/c2x-constexpr-3.c: Do not expect comparison of nullptr_t\n\tand pointer to be disallowed.\n\t* gcc.dg/c2x-nullptr-1.c: Test comparisons of nullptr_t and\n\tpointers are allowed.\n\t* gcc.dg/c2x-nullptr-3.c: Do not test that comparisons of\n\tnullptr_t and pointers are disallowed.", "tree": {"sha": "ddaefde49fa3590b4916c0ac602a661bbb5cb637", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ddaefde49fa3590b4916c0ac602a661bbb5cb637"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b8693fc87b1453bdacfa5910091be15da671d2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b8693fc87b1453bdacfa5910091be15da671d2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b8693fc87b1453bdacfa5910091be15da671d2a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b8693fc87b1453bdacfa5910091be15da671d2a/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07c87fce63541846ca2951e22dac04fcaa66475f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07c87fce63541846ca2951e22dac04fcaa66475f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07c87fce63541846ca2951e22dac04fcaa66475f"}], "stats": {"total": 41, "additions": 23, "deletions": 18}, "files": [{"sha": "224a9cbdc3d7625af3fde936a8fb78ea5e3c0970", "filename": "gcc/c/c-typeck.cc", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b8693fc87b1453bdacfa5910091be15da671d2a/gcc%2Fc%2Fc-typeck.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b8693fc87b1453bdacfa5910091be15da671d2a/gcc%2Fc%2Fc-typeck.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.cc?ref=0b8693fc87b1453bdacfa5910091be15da671d2a", "patch": "@@ -12749,12 +12749,16 @@ build_binary_op (location_t location, enum tree_code code,\n \t  && (code1 == INTEGER_TYPE || code1 == REAL_TYPE\n \t      || code1 == FIXED_POINT_TYPE || code1 == COMPLEX_TYPE))\n \tshort_compare = 1;\n-      else if (code0 == POINTER_TYPE && null_pointer_constant_p (orig_op1))\n+      else if (code0 == POINTER_TYPE\n+\t       && (code1 == NULLPTR_TYPE\n+\t\t   || null_pointer_constant_p (orig_op1)))\n \t{\n \t  maybe_warn_for_null_address (location, op0, code);\n \t  result_type = type0;\n \t}\n-      else if (code1 == POINTER_TYPE && null_pointer_constant_p (orig_op0))\n+      else if (code1 == POINTER_TYPE\n+\t       && (code0 == NULLPTR_TYPE\n+\t\t   || null_pointer_constant_p (orig_op0)))\n \t{\n \t  maybe_warn_for_null_address (location, op1, code);\n \t  result_type = type1;"}, {"sha": "44a3ed358e123a739a3239eea3a8a83ea5154995", "filename": "gcc/testsuite/gcc.dg/c2x-constexpr-3.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b8693fc87b1453bdacfa5910091be15da671d2a/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-constexpr-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b8693fc87b1453bdacfa5910091be15da671d2a/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-constexpr-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-constexpr-3.c?ref=0b8693fc87b1453bdacfa5910091be15da671d2a", "patch": "@@ -219,7 +219,6 @@ f0 ()\n   (constexpr signed char []) { u8\"\\xff\" }; /* { dg-error \"'constexpr' initializer not representable in type of object\" } */\n   constexpr typeof (nullptr) not_npc = nullptr;\n   int *ptr = 0;\n-  (void) (ptr == not_npc); /* { dg-error \"invalid operands\" } */\n   /* auto may only be used with another storage class specifier, such as\n      constexpr, if the type is inferred.  */\n   auto constexpr int a_c_t = 1; /* { dg-error \"'auto' used with 'constexpr'\" } */"}, {"sha": "04f9901bb121c95e169e45a4423426bdc0421b18", "filename": "gcc/testsuite/gcc.dg/c2x-nullptr-1.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b8693fc87b1453bdacfa5910091be15da671d2a/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-nullptr-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b8693fc87b1453bdacfa5910091be15da671d2a/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-nullptr-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-nullptr-1.c?ref=0b8693fc87b1453bdacfa5910091be15da671d2a", "patch": "@@ -141,6 +141,23 @@ test2 (int *p)\n   (void) (p != _Generic(0, int : nullptr));\n   (void) (_Generic(0, int : nullptr) == p);\n   (void) (_Generic(0, int : nullptr) != p);\n+\n+  /* \"(nullptr_t)nullptr\" has type nullptr_t but isn't an NPC; these\n+     comparisons are valid after C2X CD comments GB-071 and FR-073 were\n+     resolved by the wording in N3077.  */\n+  (void) ((nullptr_t)nullptr == p);\n+  (void) ((nullptr_t)nullptr != p);\n+  (void) (p == (nullptr_t)nullptr);\n+  (void) (p != (nullptr_t)nullptr);\n+  (void) (cmp () == p);\n+  (void) (cmp () != p);\n+  (void) (p == cmp ());\n+  (void) (p != cmp ());\n+  /* \"(void *)nullptr\" is not an NPC, either.  */\n+  (void) ((void *)nullptr == cmp ());\n+  (void) ((void *)nullptr != cmp ());\n+  (void) (cmp () == (void *)nullptr);\n+  (void) (cmp () != (void *)nullptr);\n }\n \n /* Test ?:.  */"}, {"sha": "591ab7e6158e3121b3c8f1232401d4fc691aa6f7", "filename": "gcc/testsuite/gcc.dg/c2x-nullptr-3.c", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b8693fc87b1453bdacfa5910091be15da671d2a/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-nullptr-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b8693fc87b1453bdacfa5910091be15da671d2a/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-nullptr-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-nullptr-3.c?ref=0b8693fc87b1453bdacfa5910091be15da671d2a", "patch": "@@ -19,21 +19,6 @@ test1 (int *p)\n   (void) (nullptr != 1); /* { dg-error \"invalid operands\" } */\n   (void) (1 != nullptr); /* { dg-error \"invalid operands\" } */\n   (void) (1 > nullptr); /* { dg-error \"invalid operands\" } */\n-\n-  /* \"(nullptr_t)nullptr\" has type nullptr_t but isn't an NPC.  */\n-  (void) ((nullptr_t)nullptr == p); /* { dg-error \"invalid operands\" } */\n-  (void) ((nullptr_t)nullptr != p); /* { dg-error \"invalid operands\" } */\n-  (void) (p == (nullptr_t)nullptr); /* { dg-error \"invalid operands\" } */\n-  (void) (p != (nullptr_t)nullptr); /* { dg-error \"invalid operands\" } */\n-  (void) (cmp () == p); /* { dg-error \"invalid operands\" } */\n-  (void) (cmp () != p); /* { dg-error \"invalid operands\" } */\n-  (void) (p == cmp ()); /* { dg-error \"invalid operands\" } */\n-  (void) (p != cmp ()); /* { dg-error \"invalid operands\" } */\n-  /* \"(void *)nullptr\" is not an NPC, either.  */\n-  (void) ((void *)nullptr == cmp ()); /* { dg-error \"invalid operands\" } */\n-  (void) ((void *)nullptr != cmp ()); /* { dg-error \"invalid operands\" } */\n-  (void) (cmp () == (void *)nullptr); /* { dg-error \"invalid operands\" } */\n-  (void) (cmp () != (void *)nullptr); /* { dg-error \"invalid operands\" } */\n }\n \n void"}]}