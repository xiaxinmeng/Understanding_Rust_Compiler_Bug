{"sha": "1ce8ee743ff570443f520e68afedea03ae664a64", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWNlOGVlNzQzZmY1NzA0NDNmNTIwZTY4YWZlZGVhMDNhZTY2NGE2NA==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.vnet.ibm.com", "date": "2015-09-10T14:04:28Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2015-09-10T14:04:28Z"}, "message": "S/390: Don't use vgm for v1ti and v1tf.\n\ngcc/ChangeLog:\n\n2015-09-10  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\t* config/s390/s390.c (s390_contiguous_bitmask_vector_p): Reject if\n\tthe vector element is bigger than 64 bit.\n\n\tgcc/testsuite/ChangeLog:\n\n2015-09-10  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\t* gcc.target/s390/vector/vec-genbytemask-1.c: Add check for V1TI\n\tinitialization with a byte mask.  No change expected here.\n\t* gcc.target/s390/vector/vec-genmask-1.c: Fix whitespace.\n\t* gcc.target/s390/vector/vec-genmask-2.c: Add check for V1TI\n\tinitialization with contigious bitmask.  Literal pool is expectd\n\tto be used here.\n\nFrom-SVN: r227637", "tree": {"sha": "9148db89d4a4a18aecee33599859564a427dcac2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9148db89d4a4a18aecee33599859564a427dcac2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ce8ee743ff570443f520e68afedea03ae664a64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ce8ee743ff570443f520e68afedea03ae664a64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ce8ee743ff570443f520e68afedea03ae664a64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ce8ee743ff570443f520e68afedea03ae664a64/comments", "author": null, "committer": null, "parents": [{"sha": "47b653bd9f7fa1a34bddeec249d8ca65e5a00c15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47b653bd9f7fa1a34bddeec249d8ca65e5a00c15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47b653bd9f7fa1a34bddeec249d8ca65e5a00c15"}], "stats": {"total": 42, "additions": 41, "deletions": 1}, "files": [{"sha": "14e8f5eeee0db697c397746646ab205b970a85a3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ce8ee743ff570443f520e68afedea03ae664a64/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ce8ee743ff570443f520e68afedea03ae664a64/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1ce8ee743ff570443f520e68afedea03ae664a64", "patch": "@@ -1,3 +1,8 @@\n+2015-09-10  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* config/s390/s390.c (s390_contiguous_bitmask_vector_p): Reject if\n+\tthe vector element is bigger than 64 bit.\n+\n 2015-09-10  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* config/s390/vx-builtins.md (\"vec_vmal<mode>\", \"vec_vmah<mode>\")"}, {"sha": "d276ab21ab3c3aaeebd455e6e915335f5b445d60", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ce8ee743ff570443f520e68afedea03ae664a64/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ce8ee743ff570443f520e68afedea03ae664a64/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=1ce8ee743ff570443f520e68afedea03ae664a64", "patch": "@@ -2265,6 +2265,11 @@ s390_contiguous_bitmask_vector_p (rtx op, int *start, int *end)\n     return false;\n \n   size = GET_MODE_UNIT_BITSIZE (GET_MODE (op));\n+\n+  /* We cannot deal with V1TI/V1TF. This would require a vgmq.  */\n+  if (size > 64)\n+    return false;\n+\n   mask = UINTVAL (elt);\n   if (s390_contiguous_bitmask_p (mask, size, start,\n \t\t\t\t end != NULL ? &length : NULL))"}, {"sha": "aee33f62db009724236e4c8d4a04263144d1cd09", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ce8ee743ff570443f520e68afedea03ae664a64/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ce8ee743ff570443f520e68afedea03ae664a64/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1ce8ee743ff570443f520e68afedea03ae664a64", "patch": "@@ -1,3 +1,12 @@\n+2015-09-10  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* gcc.target/s390/vector/vec-genbytemask-1.c: Add check for V1TI\n+\tinitialization with a byte mask.  No change expected here.\n+\t* gcc.target/s390/vector/vec-genmask-1.c: Fix whitespace.\n+\t* gcc.target/s390/vector/vec-genmask-2.c: Add check for V1TI\n+\tinitialization with contigious bitmask.  Literal pool is expectd\n+\tto be used here.\n+\n 2015-09-10  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \tPR target/67439"}, {"sha": "26c189af15d0df6aa25caa9e54c1ab93ba100442", "filename": "gcc/testsuite/gcc.target/s390/vector/vec-genbytemask-1.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ce8ee743ff570443f520e68afedea03ae664a64/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-genbytemask-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ce8ee743ff570443f520e68afedea03ae664a64/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-genbytemask-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-genbytemask-1.c?ref=1ce8ee743ff570443f520e68afedea03ae664a64", "patch": "@@ -1,11 +1,13 @@\n /* { dg-do run } */\n /* { dg-options \"-O3 -mzarch -march=z13 --save-temps\" } */\n /* { dg-require-effective-target vector } */\n+/* { dg-require-effective-target int128 } */\n \n typedef unsigned char     uv16qi __attribute__((vector_size(16)));\n typedef unsigned short     uv8hi __attribute__((vector_size(16)));\n typedef unsigned int       uv4si __attribute__((vector_size(16)));\n typedef unsigned long long uv2di __attribute__((vector_size(16)));\n+typedef unsigned __int128  uv1ti __attribute__((vector_size(16)));\n \n uv2di __attribute__((noinline))\n foo1 ()\n@@ -45,6 +47,13 @@ foo4 ()\n       0xff, 0, 0xff, 0,\n       0, 0xff, 0, 0xff };\n }\n+\n+uv1ti __attribute__((noinline))\n+foo5 ()\n+{\n+  return (uv1ti){ 0xff00ff00ff00ff00ULL };\n+}\n+\n /* { dg-final { scan-assembler-times \"vgbm\\t%v24,61605\" 1 } } */\n \n int\n@@ -64,6 +73,10 @@ main ()\n \n   if (foo4()[1] != 0xff)\n     __builtin_abort ();\n+\n+  if (foo5()[0] != 0xff00ff00ff00ff00ULL)\n+    __builtin_abort ();\n+\n   return 0;\n }\n "}, {"sha": "6093422fd0d7ca5a496e70a12989d25fa461d188", "filename": "gcc/testsuite/gcc.target/s390/vector/vec-genmask-1.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ce8ee743ff570443f520e68afedea03ae664a64/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-genmask-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ce8ee743ff570443f520e68afedea03ae664a64/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-genmask-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-genmask-1.c?ref=1ce8ee743ff570443f520e68afedea03ae664a64", "patch": "@@ -66,4 +66,3 @@ main ()\n     __builtin_abort ();\n   return 0;\n }\n-"}, {"sha": "46256e92531ea7c750e44baf74688e7b6d6bde14", "filename": "gcc/testsuite/gcc.target/s390/vector/vec-genmask-2.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ce8ee743ff570443f520e68afedea03ae664a64/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-genmask-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ce8ee743ff570443f520e68afedea03ae664a64/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-genmask-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-genmask-2.c?ref=1ce8ee743ff570443f520e68afedea03ae664a64", "patch": "@@ -1,10 +1,12 @@\n /* { dg-do compile } */\n /* { dg-options \"-O3 -mzarch -march=z13\" } */\n+/* { dg-require-effective-target int128 } */\n \n typedef unsigned char     uv16qi __attribute__((vector_size(16)));\n typedef unsigned short     uv8hi __attribute__((vector_size(16)));\n typedef unsigned int       uv4si __attribute__((vector_size(16)));\n typedef unsigned long long uv2di __attribute__((vector_size(16)));\n+typedef unsigned __int128  uv1ti __attribute__((vector_size(16)));\n \n /* The elements differ.  */\n uv2di __attribute__((noinline))\n@@ -43,4 +45,11 @@ foo4 ()\n       0x82, 0x82, 0x82, 0x82,\n       0x82, 0x82, 0x82, 0x82 };\n }\n+\n+/* We do not have vgmq.  */\n+uv1ti\n+foo5()\n+{\n+  return (uv1ti){ ((unsigned __int128)1 << 53) - 1 };\n+}\n /* { dg-final { scan-assembler-not \"vgm\" } } */"}]}