{"sha": "95dca4e7482fcb3ef65df55144ca306e270a8a02", "node_id": "C_kwDOANBUbNoAKDk1ZGNhNGU3NDgyZmNiM2VmNjVkZjU1MTQ0Y2EzMDZlMjcwYThhMDI", "commit": {"author": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-01-17T16:14:57Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-01-26T19:11:12Z"}, "message": "RISC-V: Use get_typenode_from_name to get fixed-width integer type nodes\n\n[u]int32_t are using different type between glibc and newlib, so getting\nthose node by int or long type isn't portable way, I also update all\nother fixed-width integer types to prevent this happened again in future :P\n\ngcc/ChangeLog:\n\n\t* config/riscv/riscv-vector-builtins.cc (register_builtin_types):\n\tUse get_typenode_from_name to get fixed-width integer type\n\tnodes.\n\t* config/riscv/riscv-vector-builtins.def: Update define with\n\tfixed-width integer type nodes.", "tree": {"sha": "6ff1e8b5be7dd0ca28ed1a6dfdb51fbc14320486", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ff1e8b5be7dd0ca28ed1a6dfdb51fbc14320486"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95dca4e7482fcb3ef65df55144ca306e270a8a02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95dca4e7482fcb3ef65df55144ca306e270a8a02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95dca4e7482fcb3ef65df55144ca306e270a8a02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95dca4e7482fcb3ef65df55144ca306e270a8a02/comments", "author": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb31b22751e66019c7a4f0d9d572cca795b78368", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb31b22751e66019c7a4f0d9d572cca795b78368", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb31b22751e66019c7a4f0d9d572cca795b78368"}], "stats": {"total": 95, "additions": 48, "deletions": 47}, "files": [{"sha": "e959ba393b4c92c102fd33c7e8cd633e6452ca4d", "filename": "gcc/config/riscv/riscv-vector-builtins.cc", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95dca4e7482fcb3ef65df55144ca306e270a8a02/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95dca4e7482fcb3ef65df55144ca306e270a8a02/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc?ref=95dca4e7482fcb3ef65df55144ca306e270a8a02", "patch": "@@ -346,14 +346,15 @@ register_builtin_type (vector_type_index type, tree eltype, machine_mode mode)\n static void\n register_builtin_types ()\n {\n-  /* int32_t/uint32_t defined as `long`/`unsigned long` in RV32,\n-     but intSI_type_node/unsigned_intSI_type_node is\n-     `int` and `unsigned int`, so use long_integer_type_node and\n-     long_unsigned_type_node here for type consistent.  */\n-  tree int32_type_node\n-    = TARGET_64BIT ? intSI_type_node : long_integer_type_node;\n-  tree unsigned_int32_type_node\n-    = TARGET_64BIT ? unsigned_intSI_type_node : long_unsigned_type_node;\n+  /* Get type node from get_typenode_from_name to prevent we have different type\n+     node define in different target libraries, e.g. int32_t defined as\n+     `long` in RV32/newlib-stdint, but `int` for RV32/glibc-stdint.h.\n+     NOTE: uint[16|32|64]_type_node already defined in tree.h.  */\n+  tree int8_type_node = get_typenode_from_name (INT8_TYPE);\n+  tree uint8_type_node = get_typenode_from_name (UINT8_TYPE);\n+  tree int16_type_node = get_typenode_from_name (INT16_TYPE);\n+  tree int32_type_node = get_typenode_from_name (INT32_TYPE);\n+  tree int64_type_node = get_typenode_from_name (INT64_TYPE);\n \n   machine_mode mode;\n #define DEF_RVV_TYPE(NAME, NCHARS, ABI_NAME, SCALAR_TYPE, VECTOR_MODE,         \\"}, {"sha": "89bd5f13995f1fa1085f40c5a48330eb6c20d964", "filename": "gcc/config/riscv/riscv-vector-builtins.def", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95dca4e7482fcb3ef65df55144ca306e270a8a02/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95dca4e7482fcb3ef65df55144ca306e270a8a02/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.def?ref=95dca4e7482fcb3ef65df55144ca306e270a8a02", "patch": "@@ -89,147 +89,147 @@ DEF_RVV_TYPE (vbool1_t, 13, __rvv_bool1_t, boolean, VNx64BI, VNx32BI, _b1, , , v\n \n /* LMUL = 1/8:\n    Only enble when TARGET_MIN_VLEN > 32 and machine mode = VNx1QImode.  */\n-DEF_RVV_TYPE (vint8mf8_t, 15, __rvv_int8mf8_t, intQI, VNx1QI, VOID, _i8mf8, _i8,\n+DEF_RVV_TYPE (vint8mf8_t, 15, __rvv_int8mf8_t, int8, VNx1QI, VOID, _i8mf8, _i8,\n \t      _e8mf8, vbool64_t)\n-DEF_RVV_TYPE (vuint8mf8_t, 16, __rvv_uint8mf8_t, unsigned_intQI, VNx1QI, VOID,\n+DEF_RVV_TYPE (vuint8mf8_t, 16, __rvv_uint8mf8_t, uint8, VNx1QI, VOID,\n \t      _u8mf8, _u8, _e8mf8, vbool64_t)\n /* LMUL = 1/4:\n    Machine mode = VNx2QImode when TARGET_MIN_VLEN > 32.\n    Machine mode = VNx1QImode when TARGET_MIN_VLEN = 32.  */\n-DEF_RVV_TYPE (vint8mf4_t, 15, __rvv_int8mf4_t, intQI, VNx2QI, VNx1QI, _i8mf4,\n+DEF_RVV_TYPE (vint8mf4_t, 15, __rvv_int8mf4_t, int8, VNx2QI, VNx1QI, _i8mf4,\n \t      _i8, _e8mf4, vbool32_t)\n-DEF_RVV_TYPE (vuint8mf4_t, 16, __rvv_uint8mf4_t, unsigned_intQI, VNx2QI, VNx1QI,\n+DEF_RVV_TYPE (vuint8mf4_t, 16, __rvv_uint8mf4_t, uint8, VNx2QI, VNx1QI,\n \t      _u8mf4, _u8, _e8mf4, vbool32_t)\n /* LMUL = 1/2:\n    Machine mode = VNx4QImode when TARGET_MIN_VLEN > 32.\n    Machine mode = VNx2QImode when TARGET_MIN_VLEN = 32.  */\n-DEF_RVV_TYPE (vint8mf2_t, 15, __rvv_int8mf2_t, intQI, VNx4QI, VNx2QI, _i8mf2,\n+DEF_RVV_TYPE (vint8mf2_t, 15, __rvv_int8mf2_t, int8, VNx4QI, VNx2QI, _i8mf2,\n \t      _i8, _e8mf2, vbool16_t)\n-DEF_RVV_TYPE (vuint8mf2_t, 16, __rvv_uint8mf2_t, unsigned_intQI, VNx4QI, VNx2QI,\n+DEF_RVV_TYPE (vuint8mf2_t, 16, __rvv_uint8mf2_t, uint8, VNx4QI, VNx2QI,\n \t      _u8mf2, _u8, _e8mf2, vbool16_t)\n /* LMUL = 1:\n    Machine mode = VNx8QImode when TARGET_MIN_VLEN > 32.\n    Machine mode = VNx4QImode when TARGET_MIN_VLEN = 32.  */\n-DEF_RVV_TYPE (vint8m1_t, 14, __rvv_int8m1_t, intQI, VNx8QI, VNx4QI, _i8m1, _i8,\n+DEF_RVV_TYPE (vint8m1_t, 14, __rvv_int8m1_t, int8, VNx8QI, VNx4QI, _i8m1, _i8,\n \t      _e8m1, vbool8_t)\n-DEF_RVV_TYPE (vuint8m1_t, 15, __rvv_uint8m1_t, unsigned_intQI, VNx8QI, VNx4QI,\n+DEF_RVV_TYPE (vuint8m1_t, 15, __rvv_uint8m1_t, uint8, VNx8QI, VNx4QI,\n \t      _u8m1, _u8, _e8m1, vbool8_t)\n /* LMUL = 2:\n    Machine mode = VNx16QImode when TARGET_MIN_VLEN > 32.\n    Machine mode = VNx8QImode when TARGET_MIN_VLEN = 32.  */\n-DEF_RVV_TYPE (vint8m2_t, 14, __rvv_int8m2_t, intQI, VNx16QI, VNx8QI, _i8m2, _i8,\n+DEF_RVV_TYPE (vint8m2_t, 14, __rvv_int8m2_t, int8, VNx16QI, VNx8QI, _i8m2, _i8,\n \t      _e8m2, vbool4_t)\n-DEF_RVV_TYPE (vuint8m2_t, 15, __rvv_uint8m2_t, unsigned_intQI, VNx16QI, VNx8QI,\n+DEF_RVV_TYPE (vuint8m2_t, 15, __rvv_uint8m2_t, uint8, VNx16QI, VNx8QI,\n \t      _u8m2, _u8, _e8m2, vbool4_t)\n /* LMUL = 4:\n    Machine mode = VNx32QImode when TARGET_MIN_VLEN > 32.\n    Machine mode = VNx16QImode when TARGET_MIN_VLEN = 32.  */\n-DEF_RVV_TYPE (vint8m4_t, 14, __rvv_int8m4_t, intQI, VNx32QI, VNx16QI, _i8m4,\n+DEF_RVV_TYPE (vint8m4_t, 14, __rvv_int8m4_t, int8, VNx32QI, VNx16QI, _i8m4,\n \t      _i8, _e8m4, vbool2_t)\n-DEF_RVV_TYPE (vuint8m4_t, 15, __rvv_uint8m4_t, unsigned_intQI, VNx32QI, VNx16QI,\n+DEF_RVV_TYPE (vuint8m4_t, 15, __rvv_uint8m4_t, uint8, VNx32QI, VNx16QI,\n \t      _u8m4, _u8, _e8m4, vbool2_t)\n /* LMUL = 8:\n    Machine mode = VNx64QImode when TARGET_MIN_VLEN > 32.\n    Machine mode = VNx32QImode when TARGET_MIN_VLEN = 32.  */\n-DEF_RVV_TYPE (vint8m8_t, 14, __rvv_int8m8_t, intQI, VNx64QI, VNx32QI, _i8m8,\n+DEF_RVV_TYPE (vint8m8_t, 14, __rvv_int8m8_t, int8, VNx64QI, VNx32QI, _i8m8,\n \t      _i8, _e8m8, vbool1_t)\n-DEF_RVV_TYPE (vuint8m8_t, 15, __rvv_uint8m8_t, unsigned_intQI, VNx64QI, VNx32QI,\n+DEF_RVV_TYPE (vuint8m8_t, 15, __rvv_uint8m8_t, uint8, VNx64QI, VNx32QI,\n \t      _u8m8, _u8, _e8m8, vbool1_t)\n \n /* LMUL = 1/4:\n    Only enble when TARGET_MIN_VLEN > 32 and machine mode = VNx1HImode.  */\n-DEF_RVV_TYPE (vint16mf4_t, 16, __rvv_int16mf4_t, intHI, VNx1HI, VOID, _i16mf4,\n+DEF_RVV_TYPE (vint16mf4_t, 16, __rvv_int16mf4_t, int16, VNx1HI, VOID, _i16mf4,\n \t      _i16, _e16mf4, vbool64_t)\n-DEF_RVV_TYPE (vuint16mf4_t, 17, __rvv_uint16mf4_t, unsigned_intHI, VNx1HI, VOID,\n+DEF_RVV_TYPE (vuint16mf4_t, 17, __rvv_uint16mf4_t, uint16, VNx1HI, VOID,\n \t      _u16mf4, _u16, _e16mf4, vbool64_t)\n /* LMUL = 1/2:\n    Machine mode = VNx2HImode when TARGET_MIN_VLEN > 32.\n    Machine mode = VNx1HImode when TARGET_MIN_VLEN = 32.  */\n-DEF_RVV_TYPE (vint16mf2_t, 16, __rvv_int16mf2_t, intHI, VNx2HI, VNx1HI, _i16mf2,\n+DEF_RVV_TYPE (vint16mf2_t, 16, __rvv_int16mf2_t, int16, VNx2HI, VNx1HI, _i16mf2,\n \t      _i16, _e16mf2, vbool32_t)\n-DEF_RVV_TYPE (vuint16mf2_t, 17, __rvv_uint16mf2_t, unsigned_intHI, VNx2HI,\n+DEF_RVV_TYPE (vuint16mf2_t, 17, __rvv_uint16mf2_t, uint16, VNx2HI,\n \t      VNx1HI, _u16mf2, _u16, _e16mf2, vbool32_t)\n /* LMUL = 1:\n    Machine mode = VNx4HImode when TARGET_MIN_VLEN > 32.\n    Machine mode = VNx2HImode when TARGET_MIN_VLEN = 32.  */\n-DEF_RVV_TYPE (vint16m1_t, 15, __rvv_int16m1_t, intHI, VNx4HI, VNx2HI, _i16m1,\n+DEF_RVV_TYPE (vint16m1_t, 15, __rvv_int16m1_t, int16, VNx4HI, VNx2HI, _i16m1,\n \t      _i16, _e16m1, vbool16_t)\n-DEF_RVV_TYPE (vuint16m1_t, 16, __rvv_uint16m1_t, unsigned_intHI, VNx4HI, VNx2HI,\n+DEF_RVV_TYPE (vuint16m1_t, 16, __rvv_uint16m1_t, uint16, VNx4HI, VNx2HI,\n \t      _u16m1, _u16, _e16m1, vbool16_t)\n /* LMUL = 2:\n    Machine mode = VNx8HImode when TARGET_MIN_VLEN > 32.\n    Machine mode = VNx4HImode when TARGET_MIN_VLEN = 32.  */\n-DEF_RVV_TYPE (vint16m2_t, 15, __rvv_int16m2_t, intHI, VNx8HI, VNx4HI, _i16m2,\n+DEF_RVV_TYPE (vint16m2_t, 15, __rvv_int16m2_t, int16, VNx8HI, VNx4HI, _i16m2,\n \t      _i16, _e16m2, vbool8_t)\n-DEF_RVV_TYPE (vuint16m2_t, 16, __rvv_uint16m2_t, unsigned_intHI, VNx8HI, VNx4HI,\n+DEF_RVV_TYPE (vuint16m2_t, 16, __rvv_uint16m2_t, uint16, VNx8HI, VNx4HI,\n \t      _u16m2, _u16, _e16m2, vbool8_t)\n /* LMUL = 4:\n    Machine mode = VNx16HImode when TARGET_MIN_VLEN > 32.\n    Machine mode = VNx8HImode when TARGET_MIN_VLEN = 32.  */\n-DEF_RVV_TYPE (vint16m4_t, 15, __rvv_int16m4_t, intHI, VNx16HI, VNx8HI, _i16m4,\n+DEF_RVV_TYPE (vint16m4_t, 15, __rvv_int16m4_t, int16, VNx16HI, VNx8HI, _i16m4,\n \t      _i16, _e16m4, vbool4_t)\n-DEF_RVV_TYPE (vuint16m4_t, 16, __rvv_uint16m4_t, unsigned_intHI, VNx16HI,\n+DEF_RVV_TYPE (vuint16m4_t, 16, __rvv_uint16m4_t, uint16, VNx16HI,\n \t      VNx8HI, _u16m4, _u16, _e16m4, vbool4_t)\n /* LMUL = 8:\n    Machine mode = VNx32HImode when TARGET_MIN_VLEN > 32.\n    Machine mode = VNx16HImode when TARGET_MIN_VLEN = 32.  */\n-DEF_RVV_TYPE (vint16m8_t, 15, __rvv_int16m8_t, intHI, VNx32HI, VNx16HI, _i16m8,\n+DEF_RVV_TYPE (vint16m8_t, 15, __rvv_int16m8_t, int16, VNx32HI, VNx16HI, _i16m8,\n \t      _i16, _e16m8, vbool2_t)\n-DEF_RVV_TYPE (vuint16m8_t, 16, __rvv_uint16m8_t, unsigned_intHI, VNx32HI,\n+DEF_RVV_TYPE (vuint16m8_t, 16, __rvv_uint16m8_t, uint16, VNx32HI,\n \t      VNx16HI, _u16m8, _u16, _e16m8, vbool2_t)\n \n /* LMUL = 1/2:\n    Only enble when TARGET_MIN_VLEN > 32 and machine mode = VNx1SImode.  */\n DEF_RVV_TYPE (vint32mf2_t, 16, __rvv_int32mf2_t, int32, VNx1SI, VOID, _i32mf2,\n \t      _i32, _e32mf2, vbool64_t)\n-DEF_RVV_TYPE (vuint32mf2_t, 17, __rvv_uint32mf2_t, unsigned_int32, VNx1SI, VOID,\n+DEF_RVV_TYPE (vuint32mf2_t, 17, __rvv_uint32mf2_t, uint32, VNx1SI, VOID,\n \t      _u32mf2, _u32, _e32mf2, vbool64_t)\n /* LMUL = 1:\n    Machine mode = VNx2SImode when TARGET_MIN_VLEN > 32.\n    Machine mode = VNx1SImode when TARGET_MIN_VLEN = 32.  */\n DEF_RVV_TYPE (vint32m1_t, 15, __rvv_int32m1_t, int32, VNx2SI, VNx1SI, _i32m1,\n \t      _i32, _e32m1, vbool32_t)\n-DEF_RVV_TYPE (vuint32m1_t, 16, __rvv_uint32m1_t, unsigned_int32, VNx2SI, VNx1SI,\n+DEF_RVV_TYPE (vuint32m1_t, 16, __rvv_uint32m1_t, uint32, VNx2SI, VNx1SI,\n \t      _u32m1, _u32, _e32m1, vbool32_t)\n /* LMUL = 2:\n    Machine mode = VNx4SImode when TARGET_MIN_VLEN > 32.\n    Machine mode = VNx2SImode when TARGET_MIN_VLEN = 32.  */\n DEF_RVV_TYPE (vint32m2_t, 15, __rvv_int32m2_t, int32, VNx4SI, VNx2SI, _i32m2,\n \t      _i32, _e32m2, vbool16_t)\n-DEF_RVV_TYPE (vuint32m2_t, 16, __rvv_uint32m2_t, unsigned_int32, VNx4SI, VNx2SI,\n+DEF_RVV_TYPE (vuint32m2_t, 16, __rvv_uint32m2_t, uint32, VNx4SI, VNx2SI,\n \t      _u32m2, _u32, _e32m2, vbool16_t)\n /* LMUL = 4:\n    Machine mode = VNx8SImode when TARGET_MIN_VLEN > 32.\n    Machine mode = VNx4SImode when TARGET_MIN_VLEN = 32.  */\n DEF_RVV_TYPE (vint32m4_t, 15, __rvv_int32m4_t, int32, VNx8SI, VNx4SI, _i32m4,\n \t      _i32, _e32m4, vbool8_t)\n-DEF_RVV_TYPE (vuint32m4_t, 16, __rvv_uint32m4_t, unsigned_int32, VNx8SI, VNx4SI,\n+DEF_RVV_TYPE (vuint32m4_t, 16, __rvv_uint32m4_t, uint32, VNx8SI, VNx4SI,\n \t      _u32m4, _u32, _e32m4, vbool8_t)\n /* LMUL = 8:\n    Machine mode = VNx16SImode when TARGET_MIN_VLEN > 32.\n    Machine mode = VNx8SImode when TARGET_MIN_VLEN = 32.  */\n DEF_RVV_TYPE (vint32m8_t, 15, __rvv_int32m8_t, int32, VNx16SI, VNx8SI, _i32m8,\n \t      _i32, _e32m8, vbool4_t)\n-DEF_RVV_TYPE (vuint32m8_t, 16, __rvv_uint32m8_t, unsigned_int32, VNx16SI,\n+DEF_RVV_TYPE (vuint32m8_t, 16, __rvv_uint32m8_t, uint32, VNx16SI,\n \t      VNx8SI, _u32m8, _u32, _e32m8, vbool4_t)\n \n /* SEW = 64:\n    Disable when TARGET_MIN_VLEN > 32.  */\n-DEF_RVV_TYPE (vint64m1_t, 15, __rvv_int64m1_t, intDI, VNx1DI, VOID, _i64m1,\n+DEF_RVV_TYPE (vint64m1_t, 15, __rvv_int64m1_t, int64, VNx1DI, VOID, _i64m1,\n \t      _i64, _e64m1, vbool64_t)\n-DEF_RVV_TYPE (vuint64m1_t, 16, __rvv_uint64m1_t, unsigned_intDI, VNx1DI, VOID,\n+DEF_RVV_TYPE (vuint64m1_t, 16, __rvv_uint64m1_t, uint64, VNx1DI, VOID,\n \t      _u64m1, _u64, _e64m1, vbool64_t)\n-DEF_RVV_TYPE (vint64m2_t, 15, __rvv_int64m2_t, intDI, VNx2DI, VOID, _i64m2,\n+DEF_RVV_TYPE (vint64m2_t, 15, __rvv_int64m2_t, int64, VNx2DI, VOID, _i64m2,\n \t      _i64, _e64m2, vbool32_t)\n-DEF_RVV_TYPE (vuint64m2_t, 16, __rvv_uint64m2_t, unsigned_intDI, VNx2DI, VOID,\n+DEF_RVV_TYPE (vuint64m2_t, 16, __rvv_uint64m2_t, uint64, VNx2DI, VOID,\n \t      _u64m2, _u64, _e64m2, vbool32_t)\n-DEF_RVV_TYPE (vint64m4_t, 15, __rvv_int64m4_t, intDI, VNx4DI, VOID, _i64m4,\n+DEF_RVV_TYPE (vint64m4_t, 15, __rvv_int64m4_t, int64, VNx4DI, VOID, _i64m4,\n \t      _i64, _e64m4, vbool16_t)\n-DEF_RVV_TYPE (vuint64m4_t, 16, __rvv_uint64m4_t, unsigned_intDI, VNx4DI, VOID,\n+DEF_RVV_TYPE (vuint64m4_t, 16, __rvv_uint64m4_t, uint64, VNx4DI, VOID,\n \t      _u64m4, _u64, _e64m4, vbool16_t)\n-DEF_RVV_TYPE (vint64m8_t, 15, __rvv_int64m8_t, intDI, VNx8DI, VOID, _i64m8,\n+DEF_RVV_TYPE (vint64m8_t, 15, __rvv_int64m8_t, int64, VNx8DI, VOID, _i64m8,\n \t      _i64, _e64m8, vbool8_t)\n-DEF_RVV_TYPE (vuint64m8_t, 16, __rvv_uint64m8_t, unsigned_intDI, VNx8DI, VOID,\n+DEF_RVV_TYPE (vuint64m8_t, 16, __rvv_uint64m8_t, uint64, VNx8DI, VOID,\n \t      _u64m8, _u64, _e64m8, vbool8_t)\n \n /* LMUL = 1/2:"}]}