{"sha": "76d6502fc99aa1a63eeb47ccca282992412c256a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzZkNjUwMmZjOTlhYTFhNjNlZWI0N2NjY2EyODI5OTI0MTJjMjU2YQ==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2009-06-18T12:30:19Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2009-06-18T12:30:19Z"}, "message": "fp16-compile-alt-1.c: New.\n\n2009-06-18  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tgcc/testsuite/\n\t* gcc.target/arm/fp16-compile-alt-1.c: New.\n\t* gcc.target/arm/fp16-compile-alt-2.c: New.\n\t* gcc.target/arm/fp16-compile-alt-3.c: New.\n\t* gcc.target/arm/fp16-compile-alt-4.c: New.\n\t* gcc.target/arm/fp16-compile-alt-5.c: New.\n\t* gcc.target/arm/fp16-compile-alt-6.c: New.\n\t* gcc.target/arm/fp16-compile-alt-7.c: New.\n\t* gcc.target/arm/fp16-compile-alt-8.c: New.\n\t* gcc.target/arm/fp16-compile-alt-9.c: New.\n\t* gcc.target/arm/fp16-compile-alt-10.c: New.\n\t* gcc.target/arm/fp16-compile-alt-11.c: New.\n\t* gcc.target/arm/fp16-compile-ieee-1.c: New.\n\t* gcc.target/arm/fp16-compile-ieee-2.c: New.\n\t* gcc.target/arm/fp16-compile-ieee-3.c: New.\n\t* gcc.target/arm/fp16-compile-ieee-4.c: New.\n\t* gcc.target/arm/fp16-compile-ieee-5.c: New.\n\t* gcc.target/arm/fp16-compile-ieee-6.c: New.\n\t* gcc.target/arm/fp16-compile-ieee-7.c: New.\n\t* gcc.target/arm/fp16-compile-ieee-8.c: New.\n\t* gcc.target/arm/fp16-compile-ieee-9.c: New.\n\t* gcc.target/arm/fp16-compile-ieee-10.c: New.\n\t* gcc.target/arm/fp16-compile-ieee-11.c: New.\n\t* gcc.target/arm/fp16-compile-none-1.c: New.\n\t* gcc.target/arm/fp16-compile-exprtype.c: New.\n\t* gcc.target/arm/fp16-compile-vcvt.c: New.\n\t* gcc.target/arm/fp16-builtins-1.c: New.\n\t* gcc.target/arm/fp16-rounding-alt-1.c: New.\n\t* gcc.target/arm/fp16-rounding-ieee-1.c: New.\n\t* gcc.target/arm/fp16-param-1.c: New.\n\t* gcc.target/arm/fp16-return-1.c: New.\n\t* gcc.target/arm/fp16-unprototyped-1.c: New.\n\t* gcc.target/arm/fp16-unprototyped-2.c: New.\n\t* gcc.target/arm/fp16-variadic-1.c: New.\n\t* gcc.dg/torture/arm-fp16-compile-assign.c: New.\n\t* gcc.dg/torture/arm-fp16-compile-convert.c: New.\n\t* gcc.dg/torture/arm-fp16-int-convert-alt.c: New.\n\t* gcc.dg/torture/arm-fp16-int-convert-ieee.c: New.\n\t* gcc.dg/torture/arm-fp16-ops.h: New.\n\t* gcc.dg/torture/arm-fp16-ops-1.c: New.\n\t* gcc.dg/torture/arm-fp16-ops-2.c: New.\n\t* gcc.dg/torture/arm-fp16-ops-3.c: New.\n\t* gcc.dg/torture/arm-fp16-ops-4.c: New.\n\t* gcc.dg/torture/arm-fp16-ops-5.c: New.\n\t* gcc.dg/torture/arm-fp16-ops-6.c: New.\n\t* gcc.dg/torture/arm-fp16-ops-7.c: New.\n\t* gcc.dg/torture/arm-fp16-ops-8.c: New.\n\t* g++.dg/ext/arm-fp16/fp16-overload-1.C: New.\n\t* g++.dg/ext/arm-fp16/fp16-return-1.C: New.\n\t* g++.dg/ext/arm-fp16/fp16-param-1.C: New.\n\t* g++.dg/ext/arm-fp16/fp16-mangle-1.C: New.\n\t* g++.dg/ext/arm-fp16/arm-fp16-ops.h: New.\n\t* g++.dg/ext/arm-fp16/arm-fp16-ops-1.C: New.\n\t* g++.dg/ext/arm-fp16/arm-fp16-ops-2.C: New.\n\t* g++.dg/ext/arm-fp16/arm-fp16-ops-3.C: New.\n\t* g++.dg/ext/arm-fp16/arm-fp16-ops-4.C: New.\n\t* g++.dg/ext/arm-fp16/arm-fp16-ops-5.C: New.\n\t* g++.dg/ext/arm-fp16/arm-fp16-ops-6.C: New.\n\t* g++.dg/ext/arm-fp16/arm-fp16-ops-7.C: New.\n\t* g++.dg/ext/arm-fp16/arm-fp16-ops-8.C: New.\n\nFrom-SVN: r148656", "tree": {"sha": "f7fd01b587e503e0f6304cd21005b8c26c080bb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f7fd01b587e503e0f6304cd21005b8c26c080bb6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76d6502fc99aa1a63eeb47ccca282992412c256a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76d6502fc99aa1a63eeb47ccca282992412c256a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76d6502fc99aa1a63eeb47ccca282992412c256a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76d6502fc99aa1a63eeb47ccca282992412c256a/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d9dd51dc46dd3edf0f217c4fc1f049800312d8f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9dd51dc46dd3edf0f217c4fc1f049800312d8f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9dd51dc46dd3edf0f217c4fc1f049800312d8f7"}], "stats": {"total": 1171, "additions": 1171, "deletions": 0}, "files": [{"sha": "09565f595eaecb54e6bccdcc91eeb96b728d4073", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=76d6502fc99aa1a63eeb47ccca282992412c256a", "patch": "@@ -1,3 +1,65 @@\n+2009-06-18  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* gcc.target/arm/fp16-compile-alt-1.c: New.\n+\t* gcc.target/arm/fp16-compile-alt-2.c: New.\n+\t* gcc.target/arm/fp16-compile-alt-3.c: New.\n+\t* gcc.target/arm/fp16-compile-alt-4.c: New.\n+\t* gcc.target/arm/fp16-compile-alt-5.c: New.\n+\t* gcc.target/arm/fp16-compile-alt-6.c: New.\n+\t* gcc.target/arm/fp16-compile-alt-7.c: New.\n+\t* gcc.target/arm/fp16-compile-alt-8.c: New.\n+\t* gcc.target/arm/fp16-compile-alt-9.c: New.\n+\t* gcc.target/arm/fp16-compile-alt-10.c: New.\n+\t* gcc.target/arm/fp16-compile-alt-11.c: New.\n+\t* gcc.target/arm/fp16-compile-ieee-1.c: New.\n+\t* gcc.target/arm/fp16-compile-ieee-2.c: New.\n+\t* gcc.target/arm/fp16-compile-ieee-3.c: New.\n+\t* gcc.target/arm/fp16-compile-ieee-4.c: New.\n+\t* gcc.target/arm/fp16-compile-ieee-5.c: New.\n+\t* gcc.target/arm/fp16-compile-ieee-6.c: New.\n+\t* gcc.target/arm/fp16-compile-ieee-7.c: New.\n+\t* gcc.target/arm/fp16-compile-ieee-8.c: New.\n+\t* gcc.target/arm/fp16-compile-ieee-9.c: New.\n+\t* gcc.target/arm/fp16-compile-ieee-10.c: New.\n+\t* gcc.target/arm/fp16-compile-ieee-11.c: New.\n+\t* gcc.target/arm/fp16-compile-none-1.c: New.\n+\t* gcc.target/arm/fp16-compile-exprtype.c: New.\n+\t* gcc.target/arm/fp16-compile-vcvt.c: New.\n+\t* gcc.target/arm/fp16-builtins-1.c: New.\n+\t* gcc.target/arm/fp16-rounding-alt-1.c: New.\n+\t* gcc.target/arm/fp16-rounding-ieee-1.c: New.\n+\t* gcc.target/arm/fp16-param-1.c: New.\n+\t* gcc.target/arm/fp16-return-1.c: New.\n+\t* gcc.target/arm/fp16-unprototyped-1.c: New.\n+\t* gcc.target/arm/fp16-unprototyped-2.c: New.\n+\t* gcc.target/arm/fp16-variadic-1.c: New.\n+\t* gcc.dg/torture/arm-fp16-compile-assign.c: New.\n+\t* gcc.dg/torture/arm-fp16-compile-convert.c: New.\n+\t* gcc.dg/torture/arm-fp16-int-convert-alt.c: New.\n+\t* gcc.dg/torture/arm-fp16-int-convert-ieee.c: New.\n+\t* gcc.dg/torture/arm-fp16-ops.h: New.\n+\t* gcc.dg/torture/arm-fp16-ops-1.c: New.\n+\t* gcc.dg/torture/arm-fp16-ops-2.c: New.\n+\t* gcc.dg/torture/arm-fp16-ops-3.c: New.\n+\t* gcc.dg/torture/arm-fp16-ops-4.c: New.\n+\t* gcc.dg/torture/arm-fp16-ops-5.c: New.\n+\t* gcc.dg/torture/arm-fp16-ops-6.c: New.\n+\t* gcc.dg/torture/arm-fp16-ops-7.c: New.\n+\t* gcc.dg/torture/arm-fp16-ops-8.c: New.\n+\t* g++.dg/ext/arm-fp16/fp16-overload-1.C: New.\n+\t* g++.dg/ext/arm-fp16/fp16-return-1.C: New.\n+\t* g++.dg/ext/arm-fp16/fp16-param-1.C: New.\n+\t* g++.dg/ext/arm-fp16/fp16-mangle-1.C: New.\n+\t* g++.dg/ext/arm-fp16/arm-fp16-ops.h: New.\n+\t* g++.dg/ext/arm-fp16/arm-fp16-ops-1.C: New.\n+\t* g++.dg/ext/arm-fp16/arm-fp16-ops-2.C: New.\n+\t* g++.dg/ext/arm-fp16/arm-fp16-ops-3.C: New.\n+\t* g++.dg/ext/arm-fp16/arm-fp16-ops-4.C: New.\n+\t* g++.dg/ext/arm-fp16/arm-fp16-ops-5.C: New.\n+\t* g++.dg/ext/arm-fp16/arm-fp16-ops-6.C: New.\n+\t* g++.dg/ext/arm-fp16/arm-fp16-ops-7.C: New.\n+\t* g++.dg/ext/arm-fp16/arm-fp16-ops-8.C: New.\n+\n 2009-06-18  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.dg/builtins-65.c: New test."}, {"sha": "0c601e68c418ef4ef5c7c632cb10709eb5df48e5", "filename": "gcc/testsuite/g++.dg/ext/arm-fp16/arm-fp16-ops-1.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Farm-fp16%2Farm-fp16-ops-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Farm-fp16%2Farm-fp16-ops-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Farm-fp16%2Farm-fp16-ops-1.C?ref=76d6502fc99aa1a63eeb47ccca282992412c256a", "patch": "@@ -0,0 +1,5 @@\n+/* Test various operators on __fp16 and mixed __fp16/float operands.  */\n+/* { dg-do run { target arm*-*-* } } */\n+/* { dg-options \"-mfp16-format=ieee\" } */\n+\n+#include \"arm-fp16-ops.h\""}, {"sha": "244e31082f94b47718536783a114304336d6d1c2", "filename": "gcc/testsuite/g++.dg/ext/arm-fp16/arm-fp16-ops-2.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Farm-fp16%2Farm-fp16-ops-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Farm-fp16%2Farm-fp16-ops-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Farm-fp16%2Farm-fp16-ops-2.C?ref=76d6502fc99aa1a63eeb47ccca282992412c256a", "patch": "@@ -0,0 +1,5 @@\n+/* Test various operators on __fp16 and mixed __fp16/float operands.  */\n+/* { dg-do run { target arm*-*-* } } */\n+/* { dg-options \"-mfp16-format=ieee -ffast-math\" } */\n+\n+#include \"arm-fp16-ops.h\""}, {"sha": "8f9ab64bc454047945088c829a101f4a7d188ea5", "filename": "gcc/testsuite/g++.dg/ext/arm-fp16/arm-fp16-ops-3.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Farm-fp16%2Farm-fp16-ops-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Farm-fp16%2Farm-fp16-ops-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Farm-fp16%2Farm-fp16-ops-3.C?ref=76d6502fc99aa1a63eeb47ccca282992412c256a", "patch": "@@ -0,0 +1,5 @@\n+/* Test various operators on __fp16 and mixed __fp16/float operands.  */\n+/* { dg-do run { target arm*-*-* } } */\n+/* { dg-options \"-mfp16-format=alternative\" } */\n+\n+#include \"arm-fp16-ops.h\""}, {"sha": "4877f392c060d704084197cb3bd66fe171283e95", "filename": "gcc/testsuite/g++.dg/ext/arm-fp16/arm-fp16-ops-4.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Farm-fp16%2Farm-fp16-ops-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Farm-fp16%2Farm-fp16-ops-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Farm-fp16%2Farm-fp16-ops-4.C?ref=76d6502fc99aa1a63eeb47ccca282992412c256a", "patch": "@@ -0,0 +1,5 @@\n+/* Test various operators on __fp16 and mixed __fp16/float operands.  */\n+/* { dg-do run { target arm*-*-* } } */\n+/* { dg-options \"-mfp16-format=alternative -ffast-math\" } */\n+\n+#include \"arm-fp16-ops.h\""}, {"sha": "6bc4cf6ea6511ff64cc97a646d5163ceff6b272e", "filename": "gcc/testsuite/g++.dg/ext/arm-fp16/arm-fp16-ops-5.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Farm-fp16%2Farm-fp16-ops-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Farm-fp16%2Farm-fp16-ops-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Farm-fp16%2Farm-fp16-ops-5.C?ref=76d6502fc99aa1a63eeb47ccca282992412c256a", "patch": "@@ -0,0 +1,14 @@\n+/* Test various operators on __fp16 and mixed __fp16/float operands.  */\n+/* { dg-do compile { target arm*-*-* } } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-mfp16-format=ieee -mfpu=neon-fp16 -mfloat-abi=softfp\" } */\n+\n+#include \"arm-fp16-ops.h\"\n+\n+/* We've specified options for hardware float, including fp16 support, so\n+   we should not see any calls to libfuncs here.  */\n+/* { dg-final { scan-assembler-not \"\\tbl\\t__.*hf2\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl\\t__.*hf3\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl\\t__gnu_h\\[a-z\\]*_ieee\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl\\t__gnu_h2f_ieee\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl\\t__gnu_f2h_ieee\" } } */"}, {"sha": "9401a5935c3d94cd7e03ad1b42bb51300f7e5a70", "filename": "gcc/testsuite/g++.dg/ext/arm-fp16/arm-fp16-ops-6.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Farm-fp16%2Farm-fp16-ops-6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Farm-fp16%2Farm-fp16-ops-6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Farm-fp16%2Farm-fp16-ops-6.C?ref=76d6502fc99aa1a63eeb47ccca282992412c256a", "patch": "@@ -0,0 +1,14 @@\n+/* Test various operators on __fp16 and mixed __fp16/float operands.  */\n+/* { dg-do compile { target arm*-*-* } } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-mfp16-format=ieee -ffast-math -mfpu=neon-fp16 -mfloat-abi=softfp\" } */\n+\n+#include \"arm-fp16-ops.h\"\n+\n+/* We've specified options for hardware float, including fp16 support, so\n+   we should not see any calls to libfuncs here.  */\n+/* { dg-final { scan-assembler-not \"\\tbl\\t__.*hf2\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl\\t__.*hf3\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl\\t__gnu_h\\[a-z\\]*_ieee\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl\\t__gnu_h2f_ieee\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl\\t__gnu_f2h_ieee\" } } */"}, {"sha": "debc193df93b7e83c05703a996e383a58e89ebcb", "filename": "gcc/testsuite/g++.dg/ext/arm-fp16/arm-fp16-ops-7.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Farm-fp16%2Farm-fp16-ops-7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Farm-fp16%2Farm-fp16-ops-7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Farm-fp16%2Farm-fp16-ops-7.C?ref=76d6502fc99aa1a63eeb47ccca282992412c256a", "patch": "@@ -0,0 +1,12 @@\n+/* Test various operators on __fp16 and mixed __fp16/float operands.  */\n+/* { dg-do compile { target arm*-*-* } } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-mfp16-format=ieee -mfpu=neon -mfloat-abi=softfp\" } */\n+\n+#include \"arm-fp16-ops.h\"\n+\n+/* We've specified options for hardware float, so we should not see any \n+   calls to libfuncs here except for those to the conversion functions.  */\n+/* { dg-final { scan-assembler-not \"\\tbl\\t__.*hf2\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl\\t__.*hf3\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl\\t__gnu_h\\[a-z\\]*_ieee\" } } */"}, {"sha": "a6e72388a1c54060aa2da2c06c6acb23bdcfdb8e", "filename": "gcc/testsuite/g++.dg/ext/arm-fp16/arm-fp16-ops-8.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Farm-fp16%2Farm-fp16-ops-8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Farm-fp16%2Farm-fp16-ops-8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Farm-fp16%2Farm-fp16-ops-8.C?ref=76d6502fc99aa1a63eeb47ccca282992412c256a", "patch": "@@ -0,0 +1,12 @@\n+/* Test various operators on __fp16 and mixed __fp16/float operands.  */\n+/* { dg-do compile { target arm*-*-* } } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-mfp16-format=ieee -ffast-math -mfpu=neon -mfloat-abi=softfp\" } */\n+\n+#include \"arm-fp16-ops.h\"\n+\n+/* We've specified options for hardware float, so we should not see any \n+   calls to libfuncs here except for those to the conversion functions.  */\n+/* { dg-final { scan-assembler-not \"\\tbl\\t__.*hf2\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl\\t__.*hf3\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl\\t__gnu_h\\[a-z\\]*_ieee\" } } */"}, {"sha": "320494ee71cf198879770e031daacac8deb64734", "filename": "gcc/testsuite/g++.dg/ext/arm-fp16/arm-fp16-ops.h", "status": "added", "additions": 135, "deletions": 0, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Farm-fp16%2Farm-fp16-ops.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Farm-fp16%2Farm-fp16-ops.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Farm-fp16%2Farm-fp16-ops.h?ref=76d6502fc99aa1a63eeb47ccca282992412c256a", "patch": "@@ -0,0 +1,135 @@\n+/* Test various operators on __fp16 and mixed __fp16/float operands.  */\n+\n+#include <assert.h>\n+\n+#define CHECK(e,r) assert ((e) == r)\n+#define CHECK2(e,r) (assert ((e) == r), temp = (e), assert (temp == r))\n+#define TEST(e) assert (e)\n+#define TESTNOT(e) assert (!(e))\n+\n+volatile __fp16 h0 = 0.0;\n+volatile __fp16 h1 = 1.0;\n+volatile __fp16 h42 = 42.0;\n+volatile __fp16 hm2 = -2.0;\n+volatile __fp16 temp;\n+\n+volatile float f0 = 0.0;\n+volatile float f1 = 1.0;\n+volatile float f42 = 42.0;\n+volatile float fm2 = -2.0;\n+\n+int main (void)\n+{\n+  TEST (h1);\n+  TESTNOT (h0);\n+  TEST (!h0);\n+  TESTNOT (!h1);\n+\n+  CHECK2 (-h1, -1.0);\n+  CHECK2 (+h1, 1.0);\n+\n+  CHECK (h1++, 1.0);\n+  CHECK (h1, 2.0);\n+  CHECK (++h1, 3.0);\n+  CHECK (h1, 3.0);\n+\n+  CHECK (--h1, 2.0);\n+  CHECK (h1, 2.0);\n+  CHECK (h1--, 2.0);\n+  CHECK (h1, 1.0);\n+\n+  CHECK2 (h42 * hm2, -84.0);\n+  CHECK2 (h42 * (__fp16) -2.0, -84.0);\n+  CHECK2 (h42 * fm2, -84.0);\n+  CHECK2 (f42 * hm2, -84.0);\n+\n+  CHECK2 (h42 / hm2, -21.0);\n+  CHECK2 (h42 / (__fp16) -2.0, -21.0);\n+  CHECK2 (h42 / fm2, -21.0);\n+  CHECK2 (f42 / hm2, -21.0);\n+\n+  CHECK2 (hm2 + h42, 40.0);\n+  CHECK2 ((__fp16)-2.0 + h42, 40.0);\n+  CHECK2 (hm2 + f42, 40.0);\n+  CHECK2 (fm2 + h42, 40.0);\n+\n+  CHECK2 (hm2 - h42, -44.0);\n+  CHECK2 ((__fp16)-2.0 - h42, -44.0);\n+  CHECK2 (hm2 - f42, -44.0);\n+  CHECK2 (fm2 - h42, -44.0);\n+\n+  TEST (hm2 < h42);\n+  TEST (hm2 < (__fp16)42.0);\n+  TEST (hm2 < f42);\n+  TEST (fm2 < h42);\n+\n+  TEST (h42 > hm2);\n+  TEST ((__fp16)42.0 > hm2);\n+  TEST (h42 > fm2);\n+  TEST (f42 > hm2);\n+\n+  TEST (hm2 <= h42);\n+  TEST (hm2 <= (__fp16)42.0);\n+  TEST (hm2 <= f42);\n+  TEST (fm2 <= h42);\n+\n+  TEST (h42 >= hm2);\n+  TEST (h42 >= (__fp16)-2.0);\n+  TEST (h42 >= fm2);\n+  TEST (f42 >= hm2);\n+\n+  TESTNOT (h1 == hm2);\n+  TEST (h1 == h1);\n+  TEST (h1 == (__fp16)1.0);\n+  TEST (h1 == f1);\n+  TEST (f1 == h1);\n+\n+  TEST (h1 != hm2);\n+  TESTNOT (h1 != h1);\n+  TESTNOT (h1 != (__fp16)1.0);\n+  TESTNOT (h1 != f1);\n+  TESTNOT (f1 != h1);\n+\n+  CHECK2 ((h1 ? hm2 : h42), -2.0);\n+  CHECK2 ((h0 ? hm2 : h42), 42.0);\n+\n+  CHECK (h0 = h42, 42.0);\n+  CHECK (h0, 42.0);\n+  CHECK (h0 = (__fp16)-2.0, -2.0);\n+  CHECK (h0, -2.0);\n+  CHECK (h0 = f0, 0.0);\n+  CHECK (h0, 0.0);\n+\n+  CHECK (h0 += h1, 1.0);\n+  CHECK (h0, 1.0);\n+  CHECK (h0 += (__fp16)1.0, 2.0);\n+  CHECK (h0, 2.0);\n+  CHECK (h0 += fm2, 0.0);\n+  CHECK (h0, 0.0);\n+\n+  CHECK (h0 -= h1, -1.0);\n+  CHECK (h0, -1.0);\n+  CHECK (h0 -= (__fp16)1.0, -2.0);\n+  CHECK (h0, -2.0);\n+  CHECK (h0 -= fm2, 0.0);\n+  CHECK (h0, 0.0);\n+\n+  h0 = hm2;\n+  CHECK (h0 *= hm2, 4.0);\n+  CHECK (h0, 4.0);\n+  CHECK (h0 *= (__fp16)-2.0, -8.0);\n+  CHECK (h0, -8.0);\n+  CHECK (h0 *= fm2, 16.0);\n+  CHECK (h0, 16.0);\n+\n+  CHECK (h0 /= hm2, -8.0);\n+  CHECK (h0, -8.0);\n+  CHECK (h0 /= (__fp16)-2.0, 4.0);\n+  CHECK (h0, 4.0);\n+  CHECK (h0 /= fm2, -2.0);\n+  CHECK (h0, -2.0);\n+\n+  CHECK ((h0, h1), 1.0);\n+\n+  return 0;\n+}"}, {"sha": "25a872af6d4c320cb5bb929d8a0b8810536d7a67", "filename": "gcc/testsuite/g++.dg/ext/arm-fp16/fp16-mangle-1.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Farm-fp16%2Ffp16-mangle-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Farm-fp16%2Ffp16-mangle-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Farm-fp16%2Ffp16-mangle-1.C?ref=76d6502fc99aa1a63eeb47ccca282992412c256a", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target arm*-*-* } } */\n+/* { dg-options \"-mfp16-format=ieee\" } */\n+\n+/* Test mangling */\n+\n+/* { dg-final { scan-assembler \"\\t.global\\t_Z1fPDh\" } } */\n+void f (__fp16 *x) { }\n+\n+/* { dg-final { scan-assembler \"\\t.global\\t_Z1gPDhS_\" } } */\n+void g (__fp16 *x, __fp16 *y) { }\n+\n+/* { dg-final { scan-assembler \"\\t.global\\t_ZN1SIDhDhE1iE\" } } */\n+template <typename T, typename U> struct S { static int i; }; \n+template <> int S<__fp16, __fp16>::i = 3;"}, {"sha": "bf0139d7cef111d91c5e8951ba646fe281341b70", "filename": "gcc/testsuite/g++.dg/ext/arm-fp16/fp16-overload-1.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Farm-fp16%2Ffp16-overload-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Farm-fp16%2Ffp16-overload-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Farm-fp16%2Ffp16-overload-1.C?ref=76d6502fc99aa1a63eeb47ccca282992412c256a", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target arm*-*-* } } */\n+/* { dg-options \"-mfp16-format=ieee\" } */\n+\n+/* __fp16 values are autoconverted to float and should therefore be treated\n+ * just like float for overloading purposes.  */\n+\n+extern int frobnify (float x);\n+extern int frobnify (double x);\n+\n+int g (void)\n+{\n+  return frobnify ((__fp16)1.0);\n+}\n+\n+/* { dg-final { scan-assembler \"_Z8frobnifyf\" } } */\n+/* { dg-final { scan-assembler-not \" _Z8frobnifyd\" } } */"}, {"sha": "03feb1a4d65d763e716aea5a951e3b12719b30df", "filename": "gcc/testsuite/g++.dg/ext/arm-fp16/fp16-param-1.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Farm-fp16%2Ffp16-param-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Farm-fp16%2Ffp16-param-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Farm-fp16%2Ffp16-param-1.C?ref=76d6502fc99aa1a63eeb47ccca282992412c256a", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile { target arm*-*-* } } */\n+/* { dg-options \"-mfp16-format=ieee\" } */\n+\n+/* Functions cannot have parameters of type __fp16.  */\n+extern void f (__fp16);\t\t/* { dg-error \"parameters cannot have __fp16 type\" } */\n+extern void (*pf) (__fp16);\t/* { dg-error \"parameters cannot have __fp16 type\" } */\n+\n+/* These should be OK.  */\n+extern void g (__fp16 *);\n+extern void (*pg) (__fp16 *);"}, {"sha": "406dfacd399db2ddce43dee18b8d3bc3952e58e7", "filename": "gcc/testsuite/g++.dg/ext/arm-fp16/fp16-return-1.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Farm-fp16%2Ffp16-return-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Farm-fp16%2Ffp16-return-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Farm-fp16%2Ffp16-return-1.C?ref=76d6502fc99aa1a63eeb47ccca282992412c256a", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile { target arm*-*-* } } */\n+/* { dg-options \"-mfp16-format=ieee\" } */\n+\n+/* Functions cannot return type __fp16.  */\n+extern __fp16 f (void);\t\t/* { dg-error \"cannot return __fp16\" } */\n+extern __fp16 (*pf) (void);\t/* { dg-error \"cannot return __fp16\" } */\n+\n+/* These should be OK.  */\n+extern __fp16 *g (void);\n+extern __fp16 *(*pg) (void);"}, {"sha": "d6143d2788136b00cf592570ae2add7ef34546b2", "filename": "gcc/testsuite/gcc.dg/torture/arm-fp16-compile-assign.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Farm-fp16-compile-assign.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Farm-fp16-compile-assign.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Farm-fp16-compile-assign.c?ref=76d6502fc99aa1a63eeb47ccca282992412c256a", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile { target arm*-*-* } } */\n+/* { dg-options \"-mfp16-format=ieee\" } */\n+\n+/* Test basic assignments and conversions for __fp16.  */\n+\n+__fp16 h0 = -1.0;\n+__fp16 h1 = 0.0;\n+__fp16 h2 = 1234.0;\n+__fp16 h3 = 42.0;\n+float f1 = 2.0;\n+float f2 = -999.9;\n+\n+void f (__fp16 *p)\n+{\n+  __fp16 t;\n+\n+  h0 = 1.0;\n+  h1 = h2;\n+  h2 = f1;\n+  f2 = h2;\n+\n+  t = *p;\n+  *p = h3;\n+  h3 = t;\n+}\n+\n+/* Make sure we are not falling through to undefined libcalls.  */\n+/* { dg-final { scan-assembler-not \"__truncsfhf\" } } */\n+/* { dg-final { scan-assembler-not \"__extendhfsf\" } } */"}, {"sha": "04341959f4fc3509cefec29f37bc41290c77b479", "filename": "gcc/testsuite/gcc.dg/torture/arm-fp16-compile-convert.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Farm-fp16-compile-convert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Farm-fp16-compile-convert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Farm-fp16-compile-convert.c?ref=76d6502fc99aa1a63eeb47ccca282992412c256a", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do compile { target arm*-*-* } } */\n+/* { dg-options \"-mfp16-format=ieee\" } */\n+\n+/* Test basic assignments and conversions for __fp16.  */\n+\n+__fp16 h1 = 0.0;\n+__fp16 h2 = 1234.0;\n+char c1 = 1;\n+char c2 = 2;\n+short s1 = 10;\n+short s2 = 20;\n+int i1 = -100;\n+int i2 = -200;\n+long long l1 = 1000.0;\n+long long l2 = 2000.0;\n+double d1 = -10000.0;\n+double d2 = -20000.0;\n+\n+void f (void)\n+{\n+  c1 = h1;\n+  h2 = c2;\n+\n+  h1 = s1;\n+  s2 = h2;\n+\n+  i1 = h1;\n+  h2 = i2;\n+\n+  h1 = l1;\n+  l2 = h2;\n+  \n+  d1 = h1;\n+  h2 = d2;\n+}\n+\n+/* Make sure we are not falling through to undefined libcalls.  */\n+/* { dg-final { scan-assembler-not \"__float.ihf\" } } */\n+/* { dg-final { scan-assembler-not \"__fixhf.i\" } } */\n+/* { dg-final { scan-assembler-not \"__trunc.fhf\" } } */\n+/* { dg-final { scan-assembler-not \"__extendhf.f\" } } */"}, {"sha": "bcd7aeff19e9c5a10c07b36e9902d392a8d63605", "filename": "gcc/testsuite/gcc.dg/torture/arm-fp16-int-convert-alt.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Farm-fp16-int-convert-alt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Farm-fp16-int-convert-alt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Farm-fp16-int-convert-alt.c?ref=76d6502fc99aa1a63eeb47ccca282992412c256a", "patch": "@@ -0,0 +1,17 @@\n+/* Test floating-point conversions.  Standard types and __fp16.  */\n+/* { dg-do run { target arm*-*-* } } */\n+/* { dg-options \"-mfp16-format=alternative\" } */\n+\n+#include \"fp-int-convert.h\"\n+#define FP16_MANT_DIG 11\n+\n+int\n+main (void)\n+{\n+  TEST_I_F(signed char, unsigned char, float, FP16_MANT_DIG);\n+  TEST_I_F(signed short, unsigned short, float, FP16_MANT_DIG);\n+  TEST_I_F(signed int, unsigned int, float, FP16_MANT_DIG);\n+  TEST_I_F(signed long, unsigned long, float, FP16_MANT_DIG);\n+  TEST_I_F(signed long long, unsigned long long, float, FP16_MANT_DIG);\n+  exit (0);\n+}"}, {"sha": "1314d4b0e6dbd7d4a329b68211b8f4ddd4f41880", "filename": "gcc/testsuite/gcc.dg/torture/arm-fp16-int-convert-ieee.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Farm-fp16-int-convert-ieee.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Farm-fp16-int-convert-ieee.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Farm-fp16-int-convert-ieee.c?ref=76d6502fc99aa1a63eeb47ccca282992412c256a", "patch": "@@ -0,0 +1,17 @@\n+/* Test floating-point conversions.  Standard types and __fp16.  */\n+/* { dg-do run { target arm*-*-* } } */\n+/* { dg-options \"-mfp16-format=ieee\" } */\n+\n+#include \"fp-int-convert.h\"\n+#define FP16_MANT_DIG 11\n+\n+int\n+main (void)\n+{\n+  TEST_I_F(signed char, unsigned char, float, FP16_MANT_DIG);\n+  TEST_I_F(signed short, unsigned short, float, FP16_MANT_DIG);\n+  TEST_I_F(signed int, unsigned int, float, FP16_MANT_DIG);\n+  TEST_I_F(signed long, unsigned long, float, FP16_MANT_DIG);\n+  TEST_I_F(signed long long, unsigned long long, float, FP16_MANT_DIG);\n+  exit (0);\n+}"}, {"sha": "0c601e68c418ef4ef5c7c632cb10709eb5df48e5", "filename": "gcc/testsuite/gcc.dg/torture/arm-fp16-ops-1.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Farm-fp16-ops-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Farm-fp16-ops-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Farm-fp16-ops-1.c?ref=76d6502fc99aa1a63eeb47ccca282992412c256a", "patch": "@@ -0,0 +1,5 @@\n+/* Test various operators on __fp16 and mixed __fp16/float operands.  */\n+/* { dg-do run { target arm*-*-* } } */\n+/* { dg-options \"-mfp16-format=ieee\" } */\n+\n+#include \"arm-fp16-ops.h\""}, {"sha": "244e31082f94b47718536783a114304336d6d1c2", "filename": "gcc/testsuite/gcc.dg/torture/arm-fp16-ops-2.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Farm-fp16-ops-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Farm-fp16-ops-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Farm-fp16-ops-2.c?ref=76d6502fc99aa1a63eeb47ccca282992412c256a", "patch": "@@ -0,0 +1,5 @@\n+/* Test various operators on __fp16 and mixed __fp16/float operands.  */\n+/* { dg-do run { target arm*-*-* } } */\n+/* { dg-options \"-mfp16-format=ieee -ffast-math\" } */\n+\n+#include \"arm-fp16-ops.h\""}, {"sha": "8f9ab64bc454047945088c829a101f4a7d188ea5", "filename": "gcc/testsuite/gcc.dg/torture/arm-fp16-ops-3.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Farm-fp16-ops-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Farm-fp16-ops-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Farm-fp16-ops-3.c?ref=76d6502fc99aa1a63eeb47ccca282992412c256a", "patch": "@@ -0,0 +1,5 @@\n+/* Test various operators on __fp16 and mixed __fp16/float operands.  */\n+/* { dg-do run { target arm*-*-* } } */\n+/* { dg-options \"-mfp16-format=alternative\" } */\n+\n+#include \"arm-fp16-ops.h\""}, {"sha": "4877f392c060d704084197cb3bd66fe171283e95", "filename": "gcc/testsuite/gcc.dg/torture/arm-fp16-ops-4.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Farm-fp16-ops-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Farm-fp16-ops-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Farm-fp16-ops-4.c?ref=76d6502fc99aa1a63eeb47ccca282992412c256a", "patch": "@@ -0,0 +1,5 @@\n+/* Test various operators on __fp16 and mixed __fp16/float operands.  */\n+/* { dg-do run { target arm*-*-* } } */\n+/* { dg-options \"-mfp16-format=alternative -ffast-math\" } */\n+\n+#include \"arm-fp16-ops.h\""}, {"sha": "6bc4cf6ea6511ff64cc97a646d5163ceff6b272e", "filename": "gcc/testsuite/gcc.dg/torture/arm-fp16-ops-5.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Farm-fp16-ops-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Farm-fp16-ops-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Farm-fp16-ops-5.c?ref=76d6502fc99aa1a63eeb47ccca282992412c256a", "patch": "@@ -0,0 +1,14 @@\n+/* Test various operators on __fp16 and mixed __fp16/float operands.  */\n+/* { dg-do compile { target arm*-*-* } } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-mfp16-format=ieee -mfpu=neon-fp16 -mfloat-abi=softfp\" } */\n+\n+#include \"arm-fp16-ops.h\"\n+\n+/* We've specified options for hardware float, including fp16 support, so\n+   we should not see any calls to libfuncs here.  */\n+/* { dg-final { scan-assembler-not \"\\tbl\\t__.*hf2\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl\\t__.*hf3\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl\\t__gnu_h\\[a-z\\]*_ieee\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl\\t__gnu_h2f_ieee\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl\\t__gnu_f2h_ieee\" } } */"}, {"sha": "9401a5935c3d94cd7e03ad1b42bb51300f7e5a70", "filename": "gcc/testsuite/gcc.dg/torture/arm-fp16-ops-6.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Farm-fp16-ops-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Farm-fp16-ops-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Farm-fp16-ops-6.c?ref=76d6502fc99aa1a63eeb47ccca282992412c256a", "patch": "@@ -0,0 +1,14 @@\n+/* Test various operators on __fp16 and mixed __fp16/float operands.  */\n+/* { dg-do compile { target arm*-*-* } } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-mfp16-format=ieee -ffast-math -mfpu=neon-fp16 -mfloat-abi=softfp\" } */\n+\n+#include \"arm-fp16-ops.h\"\n+\n+/* We've specified options for hardware float, including fp16 support, so\n+   we should not see any calls to libfuncs here.  */\n+/* { dg-final { scan-assembler-not \"\\tbl\\t__.*hf2\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl\\t__.*hf3\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl\\t__gnu_h\\[a-z\\]*_ieee\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl\\t__gnu_h2f_ieee\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl\\t__gnu_f2h_ieee\" } } */"}, {"sha": "debc193df93b7e83c05703a996e383a58e89ebcb", "filename": "gcc/testsuite/gcc.dg/torture/arm-fp16-ops-7.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Farm-fp16-ops-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Farm-fp16-ops-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Farm-fp16-ops-7.c?ref=76d6502fc99aa1a63eeb47ccca282992412c256a", "patch": "@@ -0,0 +1,12 @@\n+/* Test various operators on __fp16 and mixed __fp16/float operands.  */\n+/* { dg-do compile { target arm*-*-* } } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-mfp16-format=ieee -mfpu=neon -mfloat-abi=softfp\" } */\n+\n+#include \"arm-fp16-ops.h\"\n+\n+/* We've specified options for hardware float, so we should not see any \n+   calls to libfuncs here except for those to the conversion functions.  */\n+/* { dg-final { scan-assembler-not \"\\tbl\\t__.*hf2\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl\\t__.*hf3\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl\\t__gnu_h\\[a-z\\]*_ieee\" } } */"}, {"sha": "a6e72388a1c54060aa2da2c06c6acb23bdcfdb8e", "filename": "gcc/testsuite/gcc.dg/torture/arm-fp16-ops-8.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Farm-fp16-ops-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Farm-fp16-ops-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Farm-fp16-ops-8.c?ref=76d6502fc99aa1a63eeb47ccca282992412c256a", "patch": "@@ -0,0 +1,12 @@\n+/* Test various operators on __fp16 and mixed __fp16/float operands.  */\n+/* { dg-do compile { target arm*-*-* } } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-mfp16-format=ieee -ffast-math -mfpu=neon -mfloat-abi=softfp\" } */\n+\n+#include \"arm-fp16-ops.h\"\n+\n+/* We've specified options for hardware float, so we should not see any \n+   calls to libfuncs here except for those to the conversion functions.  */\n+/* { dg-final { scan-assembler-not \"\\tbl\\t__.*hf2\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl\\t__.*hf3\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl\\t__gnu_h\\[a-z\\]*_ieee\" } } */"}, {"sha": "320494ee71cf198879770e031daacac8deb64734", "filename": "gcc/testsuite/gcc.dg/torture/arm-fp16-ops.h", "status": "added", "additions": 135, "deletions": 0, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Farm-fp16-ops.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Farm-fp16-ops.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Farm-fp16-ops.h?ref=76d6502fc99aa1a63eeb47ccca282992412c256a", "patch": "@@ -0,0 +1,135 @@\n+/* Test various operators on __fp16 and mixed __fp16/float operands.  */\n+\n+#include <assert.h>\n+\n+#define CHECK(e,r) assert ((e) == r)\n+#define CHECK2(e,r) (assert ((e) == r), temp = (e), assert (temp == r))\n+#define TEST(e) assert (e)\n+#define TESTNOT(e) assert (!(e))\n+\n+volatile __fp16 h0 = 0.0;\n+volatile __fp16 h1 = 1.0;\n+volatile __fp16 h42 = 42.0;\n+volatile __fp16 hm2 = -2.0;\n+volatile __fp16 temp;\n+\n+volatile float f0 = 0.0;\n+volatile float f1 = 1.0;\n+volatile float f42 = 42.0;\n+volatile float fm2 = -2.0;\n+\n+int main (void)\n+{\n+  TEST (h1);\n+  TESTNOT (h0);\n+  TEST (!h0);\n+  TESTNOT (!h1);\n+\n+  CHECK2 (-h1, -1.0);\n+  CHECK2 (+h1, 1.0);\n+\n+  CHECK (h1++, 1.0);\n+  CHECK (h1, 2.0);\n+  CHECK (++h1, 3.0);\n+  CHECK (h1, 3.0);\n+\n+  CHECK (--h1, 2.0);\n+  CHECK (h1, 2.0);\n+  CHECK (h1--, 2.0);\n+  CHECK (h1, 1.0);\n+\n+  CHECK2 (h42 * hm2, -84.0);\n+  CHECK2 (h42 * (__fp16) -2.0, -84.0);\n+  CHECK2 (h42 * fm2, -84.0);\n+  CHECK2 (f42 * hm2, -84.0);\n+\n+  CHECK2 (h42 / hm2, -21.0);\n+  CHECK2 (h42 / (__fp16) -2.0, -21.0);\n+  CHECK2 (h42 / fm2, -21.0);\n+  CHECK2 (f42 / hm2, -21.0);\n+\n+  CHECK2 (hm2 + h42, 40.0);\n+  CHECK2 ((__fp16)-2.0 + h42, 40.0);\n+  CHECK2 (hm2 + f42, 40.0);\n+  CHECK2 (fm2 + h42, 40.0);\n+\n+  CHECK2 (hm2 - h42, -44.0);\n+  CHECK2 ((__fp16)-2.0 - h42, -44.0);\n+  CHECK2 (hm2 - f42, -44.0);\n+  CHECK2 (fm2 - h42, -44.0);\n+\n+  TEST (hm2 < h42);\n+  TEST (hm2 < (__fp16)42.0);\n+  TEST (hm2 < f42);\n+  TEST (fm2 < h42);\n+\n+  TEST (h42 > hm2);\n+  TEST ((__fp16)42.0 > hm2);\n+  TEST (h42 > fm2);\n+  TEST (f42 > hm2);\n+\n+  TEST (hm2 <= h42);\n+  TEST (hm2 <= (__fp16)42.0);\n+  TEST (hm2 <= f42);\n+  TEST (fm2 <= h42);\n+\n+  TEST (h42 >= hm2);\n+  TEST (h42 >= (__fp16)-2.0);\n+  TEST (h42 >= fm2);\n+  TEST (f42 >= hm2);\n+\n+  TESTNOT (h1 == hm2);\n+  TEST (h1 == h1);\n+  TEST (h1 == (__fp16)1.0);\n+  TEST (h1 == f1);\n+  TEST (f1 == h1);\n+\n+  TEST (h1 != hm2);\n+  TESTNOT (h1 != h1);\n+  TESTNOT (h1 != (__fp16)1.0);\n+  TESTNOT (h1 != f1);\n+  TESTNOT (f1 != h1);\n+\n+  CHECK2 ((h1 ? hm2 : h42), -2.0);\n+  CHECK2 ((h0 ? hm2 : h42), 42.0);\n+\n+  CHECK (h0 = h42, 42.0);\n+  CHECK (h0, 42.0);\n+  CHECK (h0 = (__fp16)-2.0, -2.0);\n+  CHECK (h0, -2.0);\n+  CHECK (h0 = f0, 0.0);\n+  CHECK (h0, 0.0);\n+\n+  CHECK (h0 += h1, 1.0);\n+  CHECK (h0, 1.0);\n+  CHECK (h0 += (__fp16)1.0, 2.0);\n+  CHECK (h0, 2.0);\n+  CHECK (h0 += fm2, 0.0);\n+  CHECK (h0, 0.0);\n+\n+  CHECK (h0 -= h1, -1.0);\n+  CHECK (h0, -1.0);\n+  CHECK (h0 -= (__fp16)1.0, -2.0);\n+  CHECK (h0, -2.0);\n+  CHECK (h0 -= fm2, 0.0);\n+  CHECK (h0, 0.0);\n+\n+  h0 = hm2;\n+  CHECK (h0 *= hm2, 4.0);\n+  CHECK (h0, 4.0);\n+  CHECK (h0 *= (__fp16)-2.0, -8.0);\n+  CHECK (h0, -8.0);\n+  CHECK (h0 *= fm2, 16.0);\n+  CHECK (h0, 16.0);\n+\n+  CHECK (h0 /= hm2, -8.0);\n+  CHECK (h0, -8.0);\n+  CHECK (h0 /= (__fp16)-2.0, 4.0);\n+  CHECK (h0, 4.0);\n+  CHECK (h0 /= fm2, -2.0);\n+  CHECK (h0, -2.0);\n+\n+  CHECK ((h0, h1), 1.0);\n+\n+  return 0;\n+}"}, {"sha": "868768028cd7e7800ed73a01535f007328ae67c0", "filename": "gcc/testsuite/gcc.target/arm/fp16-builtins-1.c", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-builtins-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-builtins-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-builtins-1.c?ref=76d6502fc99aa1a63eeb47ccca282992412c256a", "patch": "@@ -0,0 +1,92 @@\n+/* Test type-generic builtins with __fp16 arguments.\n+   Except as otherwise noted, they should behave exactly\n+   the same as those with float arguments.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-mfp16-format=ieee -std=gnu99\" } */\n+\n+#include <stdlib.h>\n+#include <math.h>\n+\n+volatile __fp16 h1, h2;\n+volatile float f1, f2;\n+\n+void\n+set1 (double x)\n+{\n+  h1 = x;\n+  f1 = h1;\n+}\n+\n+void\n+set2 (double x, double y)\n+{\n+  h1 = x;\n+  f1 = h1;\n+  h2 = y;\n+  f2 = h2;\n+}\n+\n+#define test1(p,x)\t\t\t\t\\\n+  set1 (x);\t\t\t\t\t\\\n+  hp = (p (h1) ? 1 : 0);\t\t\t\\\n+  fp = (p (f1) ? 1 : 0);\t\t\t\\\n+  if (hp ^ fp) abort ()\n+\n+#define test2(p,x,y)\t\t\t\t\\\n+  set2 (x,y);\t\t\t\t\t\\\n+  hp = (p (h1, h2) ? 1 : 0);\t\t\t\\\n+  fp = (p (f1, f2) ? 1 : 0);\t\t\t\\\n+  if (hp ^ fp) abort ()\n+\n+int\n+main (void)\n+{\n+  int hp, fp;\n+\n+  test1 (__builtin_isfinite, 17.0);\n+  test1 (__builtin_isfinite, INFINITY);\n+  test1 (__builtin_isinf, -0.5);\n+  test1 (__builtin_isinf, INFINITY);\n+  test1 (__builtin_isnan, 493.0);\n+  test1 (__builtin_isnan, NAN);\n+  test1 (__builtin_isnormal, 3.14159);\n+\n+  test2 (__builtin_isgreater, 5.0, 3.0);\n+  test2 (__builtin_isgreater, 3.0, 5.0);\n+  test2 (__builtin_isgreater, 73.5, 73.5);\n+  test2 (__builtin_isgreater, 1.0, NAN);\n+\n+  test2 (__builtin_isgreaterequal, 5.0, 3.0);\n+  test2 (__builtin_isgreaterequal, 3.0, 5.0);\n+  test2 (__builtin_isgreaterequal, 73.5, 73.5);\n+  test2 (__builtin_isgreaterequal, 1.0, NAN);\n+\n+  test2 (__builtin_isless, 5.0, 3.0);\n+  test2 (__builtin_isless, 3.0, 5.0);\n+  test2 (__builtin_isless, 73.5, 73.5);\n+  test2 (__builtin_isless, 1.0, NAN);\n+\n+  test2 (__builtin_islessequal, 5.0, 3.0);\n+  test2 (__builtin_islessequal, 3.0, 5.0);\n+  test2 (__builtin_islessequal, 73.5, 73.5);\n+  test2 (__builtin_islessequal, 1.0, NAN);\n+\n+  test2 (__builtin_islessgreater, 5.0, 3.0);\n+  test2 (__builtin_islessgreater, 3.0, 5.0);\n+  test2 (__builtin_islessgreater, 73.5, 73.5);\n+  test2 (__builtin_islessgreater, 1.0, NAN);\n+\n+  test2 (__builtin_isunordered, 5.0, 3.0);\n+  test2 (__builtin_isunordered, 3.0, 5.0);\n+  test2 (__builtin_isunordered, 73.5, 73.5);\n+  test2 (__builtin_isunordered, 1.0, NAN);\n+\n+  /* Test that __builtin_isnormal recognizes a denormalized __fp16 value,\n+     even if it's representable as a normalized float.  */\n+  h1 = 5.96046E-8;\n+  if (__builtin_isnormal (h1))\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "3abcd947a6f3ae33a6a567e759012ee0f8cabb8e", "filename": "gcc/testsuite/gcc.target/arm/fp16-compile-alt-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-alt-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-alt-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-alt-1.c?ref=76d6502fc99aa1a63eeb47ccca282992412c256a", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mfp16-format=alternative\" } */\n+\n+__fp16 xx = 0.0;\n+\n+/* { dg-final { scan-assembler \"\\t.eabi_attribute 38, 2\" } } */\n+/* { dg-final { scan-assembler \"\\t.size\\txx, 2\" } } */\n+/* { dg-final { scan-assembler \"\\t.space\\t2\" } } */"}, {"sha": "2e3d31fdf07b3a2e32289d0781e4ab638c9e514b", "filename": "gcc/testsuite/gcc.target/arm/fp16-compile-alt-10.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-alt-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-alt-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-alt-10.c?ref=76d6502fc99aa1a63eeb47ccca282992412c256a", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mfp16-format=alternative -pedantic -std=gnu99\" } */\n+\n+#include <math.h>\n+\n+/* NaNs are not representable in the alternative format; we should get a\n+   diagnostic.  */\n+__fp16 xx = NAN; /* { dg-warning \"overflow\" } */"}, {"sha": "62a7a3df5fff8605800a707988d15716842de40c", "filename": "gcc/testsuite/gcc.target/arm/fp16-compile-alt-11.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-alt-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-alt-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-alt-11.c?ref=76d6502fc99aa1a63eeb47ccca282992412c256a", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mfp16-format=alternative -pedantic -std=gnu99\" } */\n+\n+#include <math.h>\n+\n+/* Infinities are not representable in the alternative format;\n+   we should get a diagnostic, and the value set to the largest\n+   representable value.  */\n+/* 0x7fff = 32767 */\n+__fp16 xx = INFINITY; /* { dg-warning \"overflow\" } */\n+\n+/* { dg-final { scan-assembler \"\\t.size\\txx, 2\" } } */\n+/* { dg-final { scan-assembler \"\\t.short\\t32767\" } } */"}, {"sha": "b7fe99d53707c6c3fe70a390507064f69a1a8943", "filename": "gcc/testsuite/gcc.target/arm/fp16-compile-alt-2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-alt-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-alt-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-alt-2.c?ref=76d6502fc99aa1a63eeb47ccca282992412c256a", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mfp16-format=alternative\" } */\n+\n+/* Encoding taken from:  http://en.wikipedia.org/wiki/Half_precision */\n+/* 0x3c00 = 15360 */\n+__fp16 xx = 1.0;\n+\n+/* { dg-final { scan-assembler \"\\t.size\\txx, 2\" } } */\n+/* { dg-final { scan-assembler \"\\t.short\\t15360\" } } */"}, {"sha": "f325a84fe7732b0328a4f1bc3182d72fae35edc7", "filename": "gcc/testsuite/gcc.target/arm/fp16-compile-alt-3.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-alt-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-alt-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-alt-3.c?ref=76d6502fc99aa1a63eeb47ccca282992412c256a", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mfp16-format=alternative\" } */\n+\n+/* Encoding taken from:  http://en.wikipedia.org/wiki/Half_precision */\n+/* 0xc000 = 49152 */\n+__fp16 xx = -2.0;\n+\n+/* { dg-final { scan-assembler \"\\t.size\\txx, 2\" } } */\n+/* { dg-final { scan-assembler \"\\t.short\\t49152\" } } */"}, {"sha": "4b9b3311732830cd39fbb5c2a568dedbeef3d89f", "filename": "gcc/testsuite/gcc.target/arm/fp16-compile-alt-4.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-alt-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-alt-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-alt-4.c?ref=76d6502fc99aa1a63eeb47ccca282992412c256a", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mfp16-format=alternative\" } */\n+\n+/* Encoding taken from:  http://en.wikipedia.org/wiki/Half_precision */\n+/* 0x7bff = 31743 */\n+__fp16 xx = 65504.0;\n+\n+/* { dg-final { scan-assembler \"\\t.size\\txx, 2\" } } */\n+/* { dg-final { scan-assembler \"\\t.short\\t31743\" } } */"}, {"sha": "458f5073b3ffa694694c153f85c54a3687e7d8e7", "filename": "gcc/testsuite/gcc.target/arm/fp16-compile-alt-5.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-alt-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-alt-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-alt-5.c?ref=76d6502fc99aa1a63eeb47ccca282992412c256a", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mfp16-format=alternative\" } */\n+\n+/* Encoding taken from:  http://en.wikipedia.org/wiki/Half_precision */\n+/* 0x3555 = 13653 */\n+__fp16 xx = (1.0/3.0);\n+\n+/* { dg-final { scan-assembler \"\\t.size\\txx, 2\" } } */\n+/* { dg-final { scan-assembler \"\\t.short\\t13653\" } } */"}, {"sha": "dbb4a9999245d1a87ae34ed4a749c510da6a6c5b", "filename": "gcc/testsuite/gcc.target/arm/fp16-compile-alt-6.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-alt-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-alt-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-alt-6.c?ref=76d6502fc99aa1a63eeb47ccca282992412c256a", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mfp16-format=alternative\" } */\n+\n+/* This number is the maximum value representable in the alternative\n+   encoding.  */\n+/* 0x7fff = 32767 */\n+__fp16 xx = 131008.0;\n+\n+/* { dg-final { scan-assembler \"\\t.size\\txx, 2\" } } */\n+/* { dg-final { scan-assembler \"\\t.short\\t32767\" } } */"}, {"sha": "40940a63421e1a822fe255cc0d56ac1bb9fd63d3", "filename": "gcc/testsuite/gcc.target/arm/fp16-compile-alt-7.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-alt-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-alt-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-alt-7.c?ref=76d6502fc99aa1a63eeb47ccca282992412c256a", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mfp16-format=alternative -pedantic\" } */\n+\n+/* This number overflows the range of the alternative encoding.  Since this\n+   encoding doesn't have infinities, we should get a pedantic warning,\n+   and the value should be set to the largest representable value.  */\n+/* 0x7fff = 32767 */\n+__fp16 xx = 123456789.0;  /* { dg-warning \"overflow\" } */\n+\n+/* { dg-final { scan-assembler \"\\t.size\\txx, 2\" } } */\n+/* { dg-final { scan-assembler \"\\t.short\\t32767\" } } */"}, {"sha": "cbc0a3947e2255164b60a50584959158c683bb5b", "filename": "gcc/testsuite/gcc.target/arm/fp16-compile-alt-8.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-alt-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-alt-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-alt-8.c?ref=76d6502fc99aa1a63eeb47ccca282992412c256a", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mfp16-format=alternative\" } */\n+\n+/* Encoding taken from:  http://en.wikipedia.org/wiki/Half_precision */\n+/* This is the minimum normalized value.  */\n+/* 0x0400 = 1024 */\n+__fp16 xx = 6.10352E-5;\n+\n+/* { dg-final { scan-assembler \"\\t.size\\txx, 2\" } } */\n+/* { dg-final { scan-assembler \"\\t.short\\t1024\" } } */"}, {"sha": "6487c8d67dd0f5a78bf083aaed24b2a565f16772", "filename": "gcc/testsuite/gcc.target/arm/fp16-compile-alt-9.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-alt-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-alt-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-alt-9.c?ref=76d6502fc99aa1a63eeb47ccca282992412c256a", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mfp16-format=alternative\" } */\n+\n+/* Encoding taken from:  http://en.wikipedia.org/wiki/Half_precision */\n+/* This is the minimum denormalized value.  */\n+/* 0x0001 = 1 */\n+__fp16 xx = 5.96046E-8;\n+\n+/* { dg-final { scan-assembler \"\\t.size\\txx, 2\" } } */\n+/* { dg-final { scan-assembler \"\\t.short\\t1\" } } */"}, {"sha": "1d8953b489a28dc879f7ae04e496c850a1f21efc", "filename": "gcc/testsuite/gcc.target/arm/fp16-compile-exprtype.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-exprtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-exprtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-exprtype.c?ref=76d6502fc99aa1a63eeb47ccca282992412c256a", "patch": "@@ -0,0 +1,29 @@\n+/* Test that expressions involving __fp16 values have the right types.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-mfp16-format=ieee\" } */\n+\n+/* This produces a diagnostic if EXPR doesn't have type TYPE.  */\n+#define CHECK(expr,type)\t\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    type v;\t\t\t\t\t\\\n+    __typeof (expr) *p = &v;\t\t\t\\\n+  } while (0);\n+\n+volatile __fp16 f1;\n+volatile __fp16 f2;\n+\n+int\n+main (void)\n+{\n+  CHECK (f1, __fp16);\n+  CHECK (+f1, float);\n+  CHECK (-f1, float);\n+  CHECK (f1+f2, float);\n+  CHECK ((__fp16)(f1+f2), __fp16);\n+  CHECK ((__fp16)99.99, __fp16);\n+  CHECK ((f1+f2, f1), __fp16);\n+}\n+\n+\n+\n+"}, {"sha": "d5d0ba2e4fb311b0230fecc1f5445ae0cfc4e41b", "filename": "gcc/testsuite/gcc.target/arm/fp16-compile-ieee-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-ieee-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-ieee-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-ieee-1.c?ref=76d6502fc99aa1a63eeb47ccca282992412c256a", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mfp16-format=ieee\" } */\n+\n+__fp16 xx = 0.0;\n+\n+/* { dg-final { scan-assembler \"\\t.eabi_attribute 38, 1\" } } */\n+/* { dg-final { scan-assembler \"\\t.size\\txx, 2\" } } */\n+/* { dg-final { scan-assembler \"\\t.space\\t2\" } } */"}, {"sha": "51604374e365ef3d44c47dd21651465a6264d950", "filename": "gcc/testsuite/gcc.target/arm/fp16-compile-ieee-10.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-ieee-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-ieee-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-ieee-10.c?ref=76d6502fc99aa1a63eeb47ccca282992412c256a", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mfp16-format=ieee -std=gnu99\" } */\n+\n+#include <math.h>\n+\n+/* 0x7e00 = 32256 */\n+__fp16 xx = NAN;\n+\n+/* { dg-final { scan-assembler \"\\t.size\\txx, 2\" } } */\n+/* { dg-final { scan-assembler \"\\t.short\\t32256\" } } */"}, {"sha": "afab518b9c7b48994a7db203c48e14589d2a016c", "filename": "gcc/testsuite/gcc.target/arm/fp16-compile-ieee-11.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-ieee-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-ieee-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-ieee-11.c?ref=76d6502fc99aa1a63eeb47ccca282992412c256a", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mfp16-format=ieee -std=gnu99\" } */\n+\n+#include <math.h>\n+\n+/* 0x7c00 = 31744 */\n+__fp16 xx = INFINITY;\n+\n+/* { dg-final { scan-assembler \"\\t.size\\txx, 2\" } } */\n+/* { dg-final { scan-assembler \"\\t.short\\t31744\" } } */"}, {"sha": "35f2031c719891b24b41b2b4214c3ec04d135f65", "filename": "gcc/testsuite/gcc.target/arm/fp16-compile-ieee-2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-ieee-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-ieee-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-ieee-2.c?ref=76d6502fc99aa1a63eeb47ccca282992412c256a", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mfp16-format=ieee\" } */\n+\n+/* Encoding taken from:  http://en.wikipedia.org/wiki/Half_precision */\n+/* 0x3c00 = 15360 */\n+__fp16 xx = 1.0;\n+\n+/* { dg-final { scan-assembler \"\\t.size\\txx, 2\" } } */\n+/* { dg-final { scan-assembler \"\\t.short\\t15360\" } } */"}, {"sha": "90edd01198a5cee4d76c9bec212266583da0c1c1", "filename": "gcc/testsuite/gcc.target/arm/fp16-compile-ieee-3.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-ieee-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-ieee-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-ieee-3.c?ref=76d6502fc99aa1a63eeb47ccca282992412c256a", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mfp16-format=ieee\" } */\n+\n+/* Encoding taken from:  http://en.wikipedia.org/wiki/Half_precision */\n+/* 0xc000 = 49152 */\n+__fp16 xx = -2.0;\n+\n+/* { dg-final { scan-assembler \"\\t.size\\txx, 2\" } } */\n+/* { dg-final { scan-assembler \"\\t.short\\t49152\" } } */"}, {"sha": "20676d89db5d057b32380b0ab070dc147046d2ea", "filename": "gcc/testsuite/gcc.target/arm/fp16-compile-ieee-4.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-ieee-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-ieee-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-ieee-4.c?ref=76d6502fc99aa1a63eeb47ccca282992412c256a", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mfp16-format=ieee\" } */\n+\n+/* Encoding taken from:  http://en.wikipedia.org/wiki/Half_precision */\n+/* 0x7bff = 31743 */\n+__fp16 xx = 65504.0;\n+\n+/* { dg-final { scan-assembler \"\\t.size\\txx, 2\" } } */\n+/* { dg-final { scan-assembler \"\\t.short\\t31743\" } } */"}, {"sha": "aff9e1356d6a85c7faf5c5a5a215d94995e8e16f", "filename": "gcc/testsuite/gcc.target/arm/fp16-compile-ieee-5.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-ieee-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-ieee-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-ieee-5.c?ref=76d6502fc99aa1a63eeb47ccca282992412c256a", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mfp16-format=ieee\" } */\n+\n+/* Encoding taken from:  http://en.wikipedia.org/wiki/Half_precision */\n+/* 0x3555 = 13653 */\n+__fp16 xx = (1.0/3.0);\n+\n+/* { dg-final { scan-assembler \"\\t.size\\txx, 2\" } } */\n+/* { dg-final { scan-assembler \"\\t.short\\t13653\" } } */"}, {"sha": "c736e63a3ce226f9bcdcb1bf66240e58e74a743d", "filename": "gcc/testsuite/gcc.target/arm/fp16-compile-ieee-6.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-ieee-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-ieee-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-ieee-6.c?ref=76d6502fc99aa1a63eeb47ccca282992412c256a", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mfp16-format=ieee\" } */\n+\n+/* Encoding taken from:  http://en.wikipedia.org/wiki/Half_precision */\n+/* This number is too big and is represented as infinity.  */\n+/* 0x7c00 = 31744 */\n+__fp16 xx = 131008.0;\n+\n+/* { dg-final { scan-assembler \"\\t.size\\txx, 2\" } } */\n+/* { dg-final { scan-assembler \"\\t.short\\t31744\" } } */"}, {"sha": "93163772bbb3ca6fcdda304a32a124dd6e2c8e5e", "filename": "gcc/testsuite/gcc.target/arm/fp16-compile-ieee-7.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-ieee-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-ieee-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-ieee-7.c?ref=76d6502fc99aa1a63eeb47ccca282992412c256a", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mfp16-format=ieee -pedantic\" } */\n+\n+/* Encoding taken from:  http://en.wikipedia.org/wiki/Half_precision */\n+/* This number is too big and is represented as infinity.  */\n+/* We should *not* get an overflow warning here.  */\n+/* 0x7c00 = 31744 */\n+__fp16 xx = 123456789.0;\n+\n+/* { dg-final { scan-assembler \"\\t.size\\txx, 2\" } } */\n+/* { dg-final { scan-assembler \"\\t.short\\t31744\" } } */"}, {"sha": "a9646739f9175481ead663b3e219a5698a3d90f8", "filename": "gcc/testsuite/gcc.target/arm/fp16-compile-ieee-8.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-ieee-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-ieee-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-ieee-8.c?ref=76d6502fc99aa1a63eeb47ccca282992412c256a", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mfp16-format=ieee\" } */\n+\n+/* Encoding taken from:  http://en.wikipedia.org/wiki/Half_precision */\n+/* This is the minimum normalized value.  */\n+/* 0x0400 = 1024 */\n+__fp16 xx = 6.10352E-5;\n+\n+/* { dg-final { scan-assembler \"\\t.size\\txx, 2\" } } */\n+/* { dg-final { scan-assembler \"\\t.short\\t1024\" } } */"}, {"sha": "11b31ce40444943c094e51f46356bbfe3f5fd0cb", "filename": "gcc/testsuite/gcc.target/arm/fp16-compile-ieee-9.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-ieee-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-ieee-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-ieee-9.c?ref=76d6502fc99aa1a63eeb47ccca282992412c256a", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mfp16-format=ieee\" } */\n+\n+/* Encoding taken from:  http://en.wikipedia.org/wiki/Half_precision */\n+/* This is the minimum denormalized value.  */\n+/* 0x0001 = 1 */\n+__fp16 xx = 5.96046E-8;\n+\n+/* { dg-final { scan-assembler \"\\t.size\\txx, 2\" } } */\n+/* { dg-final { scan-assembler \"\\t.short\\t1\" } } */"}, {"sha": "ca2912333c50641675ea2857cd3e4e210cd2a84e", "filename": "gcc/testsuite/gcc.target/arm/fp16-compile-none-1.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-none-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-none-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-none-1.c?ref=76d6502fc99aa1a63eeb47ccca282992412c256a", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mfp16-format=none\" } */\n+\n+/* __fp16 type name is not recognized unless you explicitly enable it\n+   by selecting -mfp16-format=ieee or -mfp16-format=alternative.  */\n+__fp16 xx = 0.0;  /* { dg-error \"expected\" } */"}, {"sha": "01d1e826923bf64c714d22ddf422c89d76adac8c", "filename": "gcc/testsuite/gcc.target/arm/fp16-compile-vcvt.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-vcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-vcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-compile-vcvt.c?ref=76d6502fc99aa1a63eeb47ccca282992412c256a", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-mfp16-format=ieee -mfpu=neon-fp16 -mfloat-abi=softfp\" } */\n+\n+/* Test generation of VFP __fp16 instructions.  */\n+\n+__fp16 h1 = 0.0;\n+__fp16 h2 = 1234.0;\n+float f1 = 2.0;\n+float f2 = -999.9;\n+\n+void f (void)\n+{\n+  h1 = f1;\n+  f2 = h2;\n+}\n+\n+/* { dg-final { scan-assembler \"\\tvcvtb.f32.f16\" } } */\n+/* { dg-final { scan-assembler \"\\tvcvtb.f16.f32\" } } */"}, {"sha": "af4845f9fd5ba3cb06b2904d58eb8bcce50d3202", "filename": "gcc/testsuite/gcc.target/arm/fp16-param-1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-param-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-param-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-param-1.c?ref=76d6502fc99aa1a63eeb47ccca282992412c256a", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mfp16-format=ieee\" } */\n+\n+/* Functions cannot have parameters of type __fp16.  */\n+extern void f (__fp16);\t\t/* { dg-error \"parameters cannot have __fp16 type\" } */\n+extern void (*pf) (__fp16);\t/* { dg-error \"parameters cannot have __fp16 type\" } */\n+\n+/* These should be OK.  */\n+extern void g (__fp16 *);\n+extern void (*pg) (__fp16 *);"}, {"sha": "f763941268ab0bdce84aa94a5ea8a229ef971ec6", "filename": "gcc/testsuite/gcc.target/arm/fp16-return-1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-return-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-return-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-return-1.c?ref=76d6502fc99aa1a63eeb47ccca282992412c256a", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mfp16-format=ieee\" } */\n+\n+/* Functions cannot return type __fp16.  */\n+extern __fp16 f (void);\t\t/* { dg-error \"cannot return __fp16\" } */\n+extern __fp16 (*pf) (void);\t/* { dg-error \"cannot return __fp16\" } */\n+\n+/* These should be OK.  */\n+extern __fp16 *g (void);\n+extern __fp16 *(*pg) (void);"}, {"sha": "f50b4475f1902493decf9dc6f477392da27a72c6", "filename": "gcc/testsuite/gcc.target/arm/fp16-rounding-alt-1.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-rounding-alt-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-rounding-alt-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-rounding-alt-1.c?ref=76d6502fc99aa1a63eeb47ccca282992412c256a", "patch": "@@ -0,0 +1,47 @@\n+/* Test intermediate rounding of double to float and then to __fp16, using\n+   an example of a number that would round differently if it went directly\n+   from double to __fp16.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-mfp16-format=alternative\" } */\n+\n+#include <stdlib.h>\n+\n+/* The original double value.  */\n+#define ORIG 0x1.0020008p0\n+\n+/* The expected (double)((__fp16)((float)ORIG)) value.  */\n+#define ROUNDED 0x1.0000000p0\n+\n+typedef union u {\n+  __fp16 f;\n+  unsigned short h;\n+} ufh;\n+\n+ufh s = { ORIG };\n+ufh r = { ROUNDED };\n+\n+double d = ORIG;\n+\n+int\n+main (void)\n+{\n+  ufh x;\n+\n+  /* Test that the rounding is correct for static initializers.  */\n+  if (s.h != r.h)\n+    abort ();\n+\n+  /* Test that the rounding is correct for a casted constant expression\n+     not in a static initializer.  */\n+  x.f = (__fp16)ORIG;\n+  if (x.h != r.h)\n+    abort ();\n+\n+  /* Test that the rounding is correct for a runtime conversion.  */\n+  x.f = (__fp16)d;\n+  if (x.h != r.h)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "866d4d82403c8ff42126a820a8f0442181e3810a", "filename": "gcc/testsuite/gcc.target/arm/fp16-rounding-ieee-1.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-rounding-ieee-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-rounding-ieee-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-rounding-ieee-1.c?ref=76d6502fc99aa1a63eeb47ccca282992412c256a", "patch": "@@ -0,0 +1,47 @@\n+/* Test intermediate rounding of double to float and then to __fp16, using\n+   an example of a number that would round differently if it went directly\n+   from double to __fp16.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-mfp16-format=ieee\" } */\n+\n+#include <stdlib.h>\n+\n+/* The original double value.  */\n+#define ORIG 0x1.0020008p0\n+\n+/* The expected (double)((__fp16)((float)ORIG)) value.  */\n+#define ROUNDED 0x1.0000000p0\n+\n+typedef union u {\n+  __fp16 f;\n+  unsigned short h;\n+} ufh;\n+\n+ufh s = { ORIG };\n+ufh r = { ROUNDED };\n+\n+double d = ORIG;\n+\n+int\n+main (void)\n+{\n+  ufh x;\n+\n+  /* Test that the rounding is correct for static initializers.  */\n+  if (s.h != r.h)\n+    abort ();\n+\n+  /* Test that the rounding is correct for a casted constant expression\n+     not in a static initializer.  */\n+  x.f = (__fp16)ORIG;\n+  if (x.h != r.h)\n+    abort ();\n+\n+  /* Test that the rounding is correct for a runtime conversion.  */\n+  x.f = (__fp16)d;\n+  if (x.h != r.h)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "70c295648889afe91b1c4170cf9c3274dfa74f20", "filename": "gcc/testsuite/gcc.target/arm/fp16-unprototyped-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-unprototyped-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-unprototyped-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-unprototyped-1.c?ref=76d6502fc99aa1a63eeb47ccca282992412c256a", "patch": "@@ -0,0 +1,21 @@\n+/* Test promotion of __fp16 to double as arguments to unprototyped\n+   function in another compilation unit.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-mfp16-format=ieee\" } */\n+/* { dg-additional-sources \"fp16-unprototyped-2.c\" } */\n+\n+#include <stdlib.h>\n+\n+extern int f ();\n+\n+static __fp16 x = 42.0;\n+static __fp16 y = -42.0;\n+\n+int\n+main (void)\n+{\n+  if (!f (x, y))\n+    abort ();\n+  return 0;\n+}"}, {"sha": "0c0f9cda6ba9d0025afed49d949c88c161edfe86", "filename": "gcc/testsuite/gcc.target/arm/fp16-unprototyped-2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-unprototyped-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-unprototyped-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-unprototyped-2.c?ref=76d6502fc99aa1a63eeb47ccca282992412c256a", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mfp16-format=ieee\" } */\n+\n+extern int f ();\n+\n+int\n+f (double xx, double yy)\n+{\n+  if (xx == 42.0 && yy == -42.0)\n+    return 1;\n+  return 0;\n+}"}, {"sha": "52b438638a1763a4b729f13895c743e2b314d458", "filename": "gcc/testsuite/gcc.target/arm/fp16-variadic-1.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-variadic-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6502fc99aa1a63eeb47ccca282992412c256a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-variadic-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-variadic-1.c?ref=76d6502fc99aa1a63eeb47ccca282992412c256a", "patch": "@@ -0,0 +1,37 @@\n+/* Test promotion of __fp16 to double as arguments to variadic function.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-mfp16-format=ieee\" } */\n+\n+#include <stdlib.h>\n+#include <stdarg.h>\n+\n+extern int f (int n, ...);\n+\n+int \n+f (int n, ...)\n+{\n+  if (n == 2)\n+    {\n+      double xx, yy;\n+      va_list ap;\n+      va_start (ap, n);\n+      xx = va_arg (ap, double);\n+      yy = va_arg (ap, double);\n+      va_end (ap);\n+      if (xx == 42.0 && yy == -42.0)\n+\treturn 1;\n+    }\n+  return 0;\n+}\n+\n+static __fp16 x = 42.0;\n+static __fp16 y = -42.0;\n+\n+int\n+main (void)\n+{\n+  if (!f (2, x, y))\n+    abort ();\n+  return 0;\n+}"}]}