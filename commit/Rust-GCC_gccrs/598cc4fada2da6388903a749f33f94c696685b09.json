{"sha": "598cc4fada2da6388903a749f33f94c696685b09", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTk4Y2M0ZmFkYTJkYTYzODg5MDNhNzQ5ZjMzZjk0YzY5NjY4NWIwOQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2014-04-30T19:10:16Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2014-04-30T19:10:16Z"}, "message": "trans-decl.c (create_function_arglist): Add hidden coarray\n\n2014-04-30  Tobias Burnus  <burnus@net-b.de>\n\n        * trans-decl.c (create_function_arglist): Add hidden coarray\n        * arguments\n        also for polymorphic coarrays.\n        * trans-expr.c (gfc_conv_procedure_call): Pass hidden coarray\n        arguments also for polymorphic coarrays.\n\n2014-04-30  Tobias Burnus  <burnus@net-b.de>\n\n        * gfortran.dg/coarray_poly_7.f90\n        * gfortran.dg/coarray_poly_8.f90\n        * gfortran.dg/coarray_poly_9.f90\n\nFrom-SVN: r209953", "tree": {"sha": "6d0d108dfb8d8ecc0f1e634cfbea2ad283bd8327", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d0d108dfb8d8ecc0f1e634cfbea2ad283bd8327"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/598cc4fada2da6388903a749f33f94c696685b09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/598cc4fada2da6388903a749f33f94c696685b09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/598cc4fada2da6388903a749f33f94c696685b09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/598cc4fada2da6388903a749f33f94c696685b09/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2c060879af5a92b49c11e70004fcd377f6a5a3ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c060879af5a92b49c11e70004fcd377f6a5a3ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c060879af5a92b49c11e70004fcd377f6a5a3ea"}], "stats": {"total": 151, "additions": 127, "deletions": 24}, "files": [{"sha": "b991dc0b115ca0c56be10e1843d1927e28e2508f", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/598cc4fada2da6388903a749f33f94c696685b09/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/598cc4fada2da6388903a749f33f94c696685b09/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=598cc4fada2da6388903a749f33f94c696685b09", "patch": "@@ -1,3 +1,10 @@\n+2014-04-30  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* trans-decl.c (create_function_arglist): Add hidden coarray arguments\n+\talso for polymorphic coarrays.\n+\t* trans-expr.c (gfc_conv_procedure_call): Pass hidden coarray arguments\n+\talso for polymorphic coarrays.\n+\n 2014-04-30  Tobias Burnus  <burnus@net-b.de>\n \n \t* resolve.c (resolve_function): Don't do"}, {"sha": "ee6c7e3004d37705fc0d154f8ceb03cd021eb53f", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/598cc4fada2da6388903a749f33f94c696685b09/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/598cc4fada2da6388903a749f33f94c696685b09/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=598cc4fada2da6388903a749f33f94c696685b09", "patch": "@@ -2234,23 +2234,31 @@ create_function_arglist (gfc_symbol * sym)\n \n       /* Coarrays which are descriptorless or assumed-shape pass with\n \t -fcoarray=lib the token and the offset as hidden arguments.  */\n-      if (f->sym->attr.codimension\n-\t  && gfc_option.coarray == GFC_FCOARRAY_LIB\n-\t  && !f->sym->attr.allocatable)\n+      if (gfc_option.coarray == GFC_FCOARRAY_LIB\n+\t  && ((f->sym->ts.type != BT_CLASS && f->sym->attr.codimension\n+\t       && !f->sym->attr.allocatable)\n+\t      || (f->sym->ts.type == BT_CLASS\n+\t\t  && CLASS_DATA (f->sym)->attr.codimension\n+\t\t  && !CLASS_DATA (f->sym)->attr.allocatable)))\n \t{\n \t  tree caf_type;\n \t  tree token;\n \t  tree offset;\n \n \t  gcc_assert (f->sym->backend_decl != NULL_TREE\n \t\t      && !sym->attr.is_bind_c);\n-\t  caf_type = TREE_TYPE (f->sym->backend_decl);\n+\t  caf_type = f->sym->ts.type == BT_CLASS\n+\t\t     ? TREE_TYPE (CLASS_DATA (f->sym)->backend_decl)\n+\t\t     : TREE_TYPE (f->sym->backend_decl);\n \n \t  token = build_decl (input_location, PARM_DECL,\n \t\t\t      create_tmp_var_name (\"caf_token\"),\n \t\t\t      build_qualified_type (pvoid_type_node,\n \t\t\t\t\t\t    TYPE_QUAL_RESTRICT));\n-\t  if (f->sym->as->type == AS_ASSUMED_SHAPE)\n+\t  if ((f->sym->ts.type != BT_CLASS\n+\t       && f->sym->as->type != AS_DEFERRED)\n+\t      || (f->sym->ts.type == BT_CLASS\n+\t\t  && CLASS_DATA (f->sym)->as->type != AS_DEFERRED))\n \t    {\n \t      gcc_assert (DECL_LANG_SPECIFIC (f->sym->backend_decl) == NULL\n \t\t\t  || GFC_DECL_TOKEN (f->sym->backend_decl) == NULL_TREE);\n@@ -2275,7 +2283,10 @@ create_function_arglist (gfc_symbol * sym)\n \t\t\t       create_tmp_var_name (\"caf_offset\"),\n \t\t\t       gfc_array_index_type);\n \n-\t  if (f->sym->as->type == AS_ASSUMED_SHAPE)\n+\t  if ((f->sym->ts.type != BT_CLASS\n+\t       && f->sym->as->type != AS_DEFERRED)\n+\t      || (f->sym->ts.type == BT_CLASS\n+\t\t  && CLASS_DATA (f->sym)->as->type != AS_DEFERRED))\n \t    {\n \t      gcc_assert (GFC_DECL_CAF_OFFSET (f->sym->backend_decl)\n \t\t\t\t\t       == NULL_TREE);"}, {"sha": "6b9353767efc1e1e0a4d075b57df3ec8d5fbf2c4", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 31, "deletions": 18, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/598cc4fada2da6388903a749f33f94c696685b09/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/598cc4fada2da6388903a749f33f94c696685b09/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=598cc4fada2da6388903a749f33f94c696685b09", "patch": "@@ -4783,19 +4783,24 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \n       /* For descriptorless coarrays and assumed-shape coarray dummies, we\n \t pass the token and the offset as additional arguments.  */\n-      if (fsym && fsym->attr.codimension\n-\t  && gfc_option.coarray == GFC_FCOARRAY_LIB\n-\t  && !fsym->attr.allocatable\n-\t  && e == NULL)\n+      if (fsym && e == NULL && gfc_option.coarray == GFC_FCOARRAY_LIB\n+\t  && ((fsym->ts.type != BT_CLASS && fsym->attr.codimension\n+\t       && !fsym->attr.allocatable)\n+\t      || (fsym->ts.type == BT_CLASS\n+\t\t  && CLASS_DATA (fsym)->attr.codimension\n+\t\t  && !CLASS_DATA (fsym)->attr.allocatable)))\n \t{\n \t  /* Token and offset. */\n \t  vec_safe_push (stringargs, null_pointer_node);\n \t  vec_safe_push (stringargs, build_int_cst (gfc_array_index_type, 0));\n \t  gcc_assert (fsym->attr.optional);\n \t}\n-      else if (fsym && fsym->attr.codimension\n-\t       && !fsym->attr.allocatable\n-\t       && gfc_option.coarray == GFC_FCOARRAY_LIB)\n+      else if (fsym && gfc_option.coarray == GFC_FCOARRAY_LIB\n+\t       && ((fsym->ts.type != BT_CLASS && fsym->attr.codimension\n+\t\t    && !fsym->attr.allocatable)\n+\t\t   || (fsym->ts.type == BT_CLASS\n+\t\t       && CLASS_DATA (fsym)->attr.codimension\n+\t\t       && !CLASS_DATA (fsym)->attr.allocatable)))\n \t{\n \t  tree caf_decl, caf_type;\n \t  tree offset, tmp2;\n@@ -4837,22 +4842,30 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t      tmp = caf_decl;\n \t    }\n \n-          if (fsym->as->type == AS_ASSUMED_SHAPE\n-\t      || (fsym->as->type == AS_ASSUMED_RANK && !fsym->attr.pointer\n-\t\t  && !fsym->attr.allocatable))\n+          tmp2 = fsym->ts.type == BT_CLASS\n+\t\t ? gfc_class_data_get (parmse.expr) : parmse.expr;\n+          if ((fsym->ts.type != BT_CLASS\n+\t       && (fsym->as->type == AS_ASSUMED_SHAPE\n+\t\t   || fsym->as->type == AS_ASSUMED_RANK))\n+\t      || (fsym->ts.type == BT_CLASS\n+\t\t  && (CLASS_DATA (fsym)->as->type == AS_ASSUMED_SHAPE\n+\t\t      || CLASS_DATA (fsym)->as->type == AS_ASSUMED_RANK)))\n \t    {\n-\t      gcc_assert (POINTER_TYPE_P (TREE_TYPE (parmse.expr)));\n-\t      gcc_assert (GFC_DESCRIPTOR_TYPE_P (TREE_TYPE\n-\t\t\t\t\t\t   (TREE_TYPE (parmse.expr))));\n-\t      tmp2 = build_fold_indirect_ref_loc (input_location, parmse.expr);\n+\t      if (fsym->ts.type == BT_CLASS)\n+\t\tgcc_assert (!POINTER_TYPE_P (TREE_TYPE (tmp2)));\n+\t      else\n+\t\t{\n+\t\t  gcc_assert (POINTER_TYPE_P (TREE_TYPE (tmp2)));\n+\t\t  tmp2 = build_fold_indirect_ref_loc (input_location, tmp2);\n+\t\t}\n+\t      gcc_assert (GFC_DESCRIPTOR_TYPE_P (TREE_TYPE (tmp2)));\n \t      tmp2 = gfc_conv_descriptor_data_get (tmp2);\n \t    }\n-\t  else if (GFC_DESCRIPTOR_TYPE_P (TREE_TYPE (parmse.expr)))\n-\t    tmp2 = gfc_conv_descriptor_data_get (parmse.expr);\n+\t  else if (GFC_DESCRIPTOR_TYPE_P (TREE_TYPE (tmp2)))\n+\t    tmp2 = gfc_conv_descriptor_data_get (tmp2);\n \t  else\n \t    {\n-\t      gcc_assert (POINTER_TYPE_P (TREE_TYPE (parmse.expr)));\n-\t      tmp2 = parmse.expr;\n+\t      gcc_assert (POINTER_TYPE_P (TREE_TYPE (tmp2)));\n \t    }\n \n \t  tmp = fold_build2_loc (input_location, MINUS_EXPR,"}, {"sha": "c0c61b2cd9db94f14b53a0356e3335db7fb3e578", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/598cc4fada2da6388903a749f33f94c696685b09/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/598cc4fada2da6388903a749f33f94c696685b09/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=598cc4fada2da6388903a749f33f94c696685b09", "patch": "@@ -1,3 +1,9 @@\n+2014-04-30  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gfortran.dg/coarray_poly_7.f90\n+\t* gfortran.dg/coarray_poly_8.f90\n+\t* gfortran.dg/coarray_poly_9.f90\n+\n 2014-04-30  Tobias Burnus  <burnus@net-b.de>\n \n \t* gfortran.dg/coarray_lib_this_image_2.f90: Update dump."}, {"sha": "aeafa7eb3d66b2bf317f520485ac11ad8d3d9410", "filename": "gcc/testsuite/gfortran.dg/coarray_poly_6.f90", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/598cc4fada2da6388903a749f33f94c696685b09/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_poly_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/598cc4fada2da6388903a749f33f94c696685b09/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_poly_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_poly_6.f90?ref=598cc4fada2da6388903a749f33f94c696685b09", "patch": "@@ -0,0 +1,22 @@\n+! { dg-do compile }\n+! { dg-options \"-fcoarray=lib -fdump-tree-original\" }\n+!\n+  implicit none\n+  type t\n+  end type t\n+  class(t), allocatable :: y[:]\n+  call bar()\n+  call foo(y)\n+contains\n+  subroutine bar(x)\n+    class(t), optional :: x[*]\n+  end subroutine bar\n+  subroutine foo(x)\n+    class(t) :: x[*]\n+  end subroutine foo\n+end\n+! { dg-final { scan-tree-dump-times \"foo \\\\(struct __class_MAIN___T_0_1t & restrict x, void \\\\* restrict caf_token.., integer\\\\(kind=8\\\\) caf_offset..\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"bar \\\\(struct __class_MAIN___T_0_1t \\\\* x, void \\\\* restrict caf_token.., integer\\\\(kind=8\\\\) caf_offset..\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"bar \\\\(0B, 0B, 0\\\\);\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"foo \\\\(&class.., y._data._data.token, \\\\(integer\\\\(kind=8\\\\)\\\\) class..._data.data - \\\\(integer\\\\(kind=8\\\\)\\\\) y._data._data.data\\\\);\" 1 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}, {"sha": "f33ecbe84229b698104ce484d1798e4d66116f55", "filename": "gcc/testsuite/gfortran.dg/coarray_poly_7.f90", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/598cc4fada2da6388903a749f33f94c696685b09/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_poly_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/598cc4fada2da6388903a749f33f94c696685b09/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_poly_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_poly_7.f90?ref=598cc4fada2da6388903a749f33f94c696685b09", "patch": "@@ -0,0 +1,22 @@\n+! { dg-do compile }\n+! { dg-options \"-fcoarray=lib -fdump-tree-original\" }\n+!\n+  implicit none\n+  type t\n+  end type t\n+  class(t), allocatable :: y(:)[:]\n+  call bar()\n+  call foo(y)\n+contains\n+  subroutine bar(x)\n+    class(t), optional :: x(:)[*]\n+  end subroutine bar\n+  subroutine foo(x)\n+    class(t) :: x(:)[*]\n+  end subroutine foo\n+end\n+! { dg-final { scan-tree-dump-times \"foo \\\\(struct __class_MAIN___T_1_1t & restrict x, void \\\\* restrict caf_token.., integer\\\\(kind=8\\\\) caf_offset..\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"bar \\\\(struct __class_MAIN___T_1_1t \\\\* x, void \\\\* restrict caf_token.., integer\\\\(kind=8\\\\) caf_offset..\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"bar \\\\(0B, 0B, 0\\\\);\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"foo \\\\(&class.., y._data._data.token, \\\\(integer\\\\(kind=8\\\\)\\\\) class..._data.data - \\\\(integer\\\\(kind=8\\\\)\\\\) y._data._data.data\\\\);\" 1 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}, {"sha": "65ad29c6b302315f067c5abe9bb8f2cbbe891629", "filename": "gcc/testsuite/gfortran.dg/coarray_poly_8.f90", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/598cc4fada2da6388903a749f33f94c696685b09/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_poly_8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/598cc4fada2da6388903a749f33f94c696685b09/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_poly_8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_poly_8.f90?ref=598cc4fada2da6388903a749f33f94c696685b09", "patch": "@@ -0,0 +1,22 @@\n+! { dg-do compile }\n+! { dg-options \"-fcoarray=lib -fdump-tree-original\" }\n+!\n+  implicit none\n+  type t\n+  end type t\n+  class(t), allocatable :: y(:)[:]\n+  call bar()\n+  call foo(y)\n+contains\n+  subroutine bar(x)\n+    class(t), optional :: x(2)[*]\n+  end subroutine bar\n+  subroutine foo(x)\n+    class(t) :: x(2)[*]\n+  end subroutine foo\n+end\n+! { dg-final { scan-tree-dump-times \"foo \\\\(struct __class_MAIN___T_1_1t & restrict x, void \\\\* restrict caf_token.., integer\\\\(kind=8\\\\) caf_offset..\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"bar \\\\(struct __class_MAIN___T_1_1t \\\\* x, void \\\\* restrict caf_token.., integer\\\\(kind=8\\\\) caf_offset..\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"bar \\\\(0B, 0B, 0\\\\);\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"foo \\\\(&class.., y._data._data.token, \\\\(integer\\\\(kind=8\\\\)\\\\) class..._data.data - \\\\(integer\\\\(kind=8\\\\)\\\\) y._data._data.data\\\\);\" 1 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}]}