{"sha": "b329888265f674982705102d1bc6a3f976189f80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjMyOTg4ODI2NWY2NzQ5ODI3MDUxMDJkMWJjNmEzZjk3NjE4OWY4MA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2001-04-26T18:10:44Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2001-04-26T18:10:44Z"}, "message": "i386.md (abs/neg splitter): Fix calculation of sign bit for TFmodes\n\n\t* i386.md (abs/neg splitter): Fix calculation of sign bit for TFmodes\n\t(pushqi2_rex64, pushhi2_rex64): Add.\n\nFrom-SVN: r41599", "tree": {"sha": "ec908d18226f7aa2faa05b46dfb0bed8f22e9d04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec908d18226f7aa2faa05b46dfb0bed8f22e9d04"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b329888265f674982705102d1bc6a3f976189f80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b329888265f674982705102d1bc6a3f976189f80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b329888265f674982705102d1bc6a3f976189f80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b329888265f674982705102d1bc6a3f976189f80/comments", "author": null, "committer": null, "parents": [{"sha": "c10f3adf7b0c6c278566b7bda430f26ad2c5cf5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c10f3adf7b0c6c278566b7bda430f26ad2c5cf5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c10f3adf7b0c6c278566b7bda430f26ad2c5cf5d"}], "stats": {"total": 189, "additions": 182, "deletions": 7}, "files": [{"sha": "05ebf9fb53ddd7b1a05d163477f1f6bb5bea1943", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b329888265f674982705102d1bc6a3f976189f80/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b329888265f674982705102d1bc6a3f976189f80/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b329888265f674982705102d1bc6a3f976189f80", "patch": "@@ -1,3 +1,8 @@\n+Thu Apr 26 19:20:28 CEST 2001  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386.md (abs/neg splitter): Fix calculation of sign bit for TFmodes\n+\t(pushqi2_rex64, pushhi2_rex64): Add.\n+\n 2001-04-26  Andrew Haley  <aph@cambridge.redhat.com>\n \n \t* except.c (expand_eh_region_end_cleanup): Force pending stack"}, {"sha": "2233c1464afabfd20b3aebb177011e9fb17666c5", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 177, "deletions": 7, "changes": 184, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b329888265f674982705102d1bc6a3f976189f80/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b329888265f674982705102d1bc6a3f976189f80/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=b329888265f674982705102d1bc6a3f976189f80", "patch": "@@ -1826,6 +1826,15 @@\n   [(set_attr \"type\" \"push\")\n    (set_attr \"mode\" \"HI\")])\n \n+;; For 64BIT abi we always round up to 8 bytes.\n+(define_insn \"*pushhi2_rex64\"\n+  [(set (match_operand:HI 0 \"push_operand\" \"=X\")\n+\t(match_operand:HI 1 \"nonmemory_no_elim_operand\" \"ri\"))]\n+  \"TARGET_64BIT\"\n+  \"push{q}\\\\t%q1\"\n+  [(set_attr \"type\" \"push\")\n+   (set_attr \"mode\" \"QI\")])\n+\n (define_insn \"*movhi_1\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=*a,r,r,*a,r,m\")\n \t(match_operand:HI 1 \"general_operand\" \"i,r,rn,rm,rm,rn\"))]\n@@ -1985,6 +1994,15 @@\n   [(set_attr \"type\" \"push\")\n    (set_attr \"mode\" \"HI\")])\n \n+;; For 64BIT abi we always round up to 8 bytes.\n+(define_insn \"*pushqi2_rex64\"\n+  [(set (match_operand:QI 0 \"push_operand\" \"=X\")\n+\t(match_operand:QI 1 \"nonmemory_no_elim_operand\" \"ri\"))]\n+  \"TARGET_64BIT\"\n+  \"push{q}\\\\t%q1\"\n+  [(set_attr \"type\" \"push\")\n+   (set_attr \"mode\" \"QI\")])\n+\n ;; Situation is quite tricky about when to choose full sized (SImode) move\n ;; over QImode moves.  For Q_REG -> Q_REG move we use full size only for\n ;; partial register dependency machines (such as AMD Athlon), where QImode\n@@ -9308,7 +9326,82 @@\n \t\t   (neg:SF (match_operand:SF 1 \"nonimmediate_operand\" \"\")))\n \t      (clobber (reg:CC 17))])]\n   \"TARGET_80387\"\n-  \"ix86_expand_unary_operator (NEG, SFmode, operands); DONE;\")\n+  \"if (TARGET_SSE)\n+     {\n+       /* In case operand is in memory,  we will not use SSE.  */\n+       if (memory_operand (operands[0], VOIDmode)\n+\t   && rtx_equal_p (operands[0], operands[1]))\n+\t emit_insn (gen_negsf2_memory (operands[0], operands[1]));\n+       else\n+\t{\n+\t  /* Using SSE is tricky, since we need bitwise negation of -0\n+\t     in register.  */\n+\t  rtx reg = gen_reg_rtx (SFmode);\n+\t  emit_move_insn (reg,\n+\t\t\t  gen_lowpart (SFmode,\n+\t\t\t\t       trunc_int_for_mode (0x80000000,\n+\t\t\t\t\t\t\t   SImode)));\n+\t  emit_insn (gen_negsf2_ifs (operands[0], operands[1], reg));\n+\t}\n+       DONE;\n+     }\n+   ix86_expand_unary_operator (NEG, SFmode, operands); DONE;\")\n+\n+(define_insn \"negsf2_memory\"\n+  [(set (match_operand:SF 0 \"memory_operand\" \"=m\")\n+\t(neg:SF (match_operand:SF 1 \"memory_operand\" \"0\")))\n+   (clobber (reg:CC 17))]\n+  \"ix86_unary_operator_ok (NEG, SFmode, operands)\"\n+  \"#\")\n+\n+(define_insn \"negsf2_ifs\"\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=x#fr,x#fr,f#xr,r#xf\")\n+\t(neg:SF (match_operand:SF 1 \"nonimmediate_operand\" \"0,x#fr,0,0\")))\n+   (use (match_operand:SF 2 \"nonmemory_operand\" \"x#x,0#x,*X#x,*X#x\"))\n+   (clobber (reg:CC 17))]\n+  \"TARGET_SSE\"\n+  \"#\")\n+\n+(define_split\n+  [(set (match_operand:SF 0 \"memory_operand\" \"\")\n+\t(neg:SF (match_operand:SF 1 \"memory_operand\" \"\")))\n+   (use (match_operand:SF 2 \"\" \"\"))\n+   (clobber (reg:CC 17))]\n+  \"\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (neg:SF (match_dup 1)))\n+\t      (clobber (reg:CC 17))])])\n+\n+(define_split\n+  [(set (match_operand:SF 0 \"register_operand\" \"\")\n+\t(neg:SF (match_operand:SF 1 \"register_operand\" \"\")))\n+   (use (match_operand:SF 2 \"\" \"\"))\n+   (clobber (reg:CC 17))]\n+  \"reload_completed && !SSE_REG_P (operands[0])\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (neg:SF (match_dup 1)))\n+\t      (clobber (reg:CC 17))])])\n+\n+(define_split\n+  [(set (match_operand:SF 0 \"register_operand\" \"\")\n+\t(neg:SF (match_operand:SF 1 \"register_operand\" \"\")))\n+   (use (match_operand:SF 2 \"register_operand\" \"\"))\n+   (clobber (reg:CC 17))]\n+  \"reload_completed && SSE_REG_P (operands[0])\"\n+  [(set (subreg:TI (match_dup 0) 0)\n+\t(xor:TI (subreg:TI (match_dup 1) 0)\n+\t\t(subreg:TI (match_dup 2) 0)))]\n+  \"\n+{\n+  if (operands_match_p (operands[0], operands[2]))\n+    {\n+      rtx tmp;\n+      tmp = operands[1];\n+      operands[1] = operands[2];\n+      operands[2] = tmp;\n+    }\n+}\")\n+\n \n ;; Keep 'f' and 'r' in separate alternatives to avoid reload problems\n ;; because of secondary memory needed to reload from class FLOAT_INT_REGS\n@@ -9317,7 +9410,8 @@\n   [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=f#r,rm#f\")\n \t(neg:SF (match_operand:SF 1 \"nonimmediate_operand\" \"0,0\")))\n    (clobber (reg:CC 17))]\n-  \"TARGET_80387 && ix86_unary_operator_ok (NEG, SFmode, operands)\"\n+  \"TARGET_80387 && !TARGET_SSE\n+   && ix86_unary_operator_ok (NEG, SFmode, operands)\"\n   \"#\")\n \n (define_split\n@@ -9350,8 +9444,8 @@\n {\n   int size = GET_MODE_SIZE (GET_MODE (operands[1]));\n \n-  /* XFmode's size is 12, but only 10 bytes are used.  */\n-  if (size == 12)\n+  /* XFmode's size is 12, TFmode 16, but only 10 bytes are used.  */\n+  if (size >= 12)\n     size = 10;\n   operands[0] = gen_rtx_MEM (QImode, XEXP (operands[0], 0));\n   operands[0] = adj_offsettable_operand (operands[0], size - 1);\n@@ -9363,7 +9457,83 @@\n \t\t   (neg:DF (match_operand:DF 1 \"nonimmediate_operand\" \"\")))\n \t      (clobber (reg:CC 17))])]\n   \"TARGET_80387\"\n-  \"ix86_expand_unary_operator (NEG, DFmode, operands); DONE;\")\n+  \"if (TARGET_SSE)\n+     {\n+       /* In case operand is in memory,  we will not use SSE.  */\n+       if (memory_operand (operands[0], VOIDmode)\n+\t   && rtx_equal_p (operands[0], operands[1]))\n+\t emit_insn (gen_negdf2_memory (operands[0], operands[1]));\n+       else\n+\t{\n+\t  /* Using SSE is tricky, since we need bitwise negation of -0\n+\t     in register.  */\n+\t  rtx reg = gen_reg_rtx (DFmode);\n+#if HOST_BITS_PER_WIDE_INT >= 64\n+\t  rtx imm = GEN_INT (0x80000000);\n+#else\n+\t  rtx imm = immed_double_const (0, 0x80000000, DImode);\n+#endif\n+\t  emit_move_insn (reg, gen_lowpart (DFmode, imm));\n+\t  emit_insn (gen_negdf2_ifs (operands[0], operands[1], reg));\n+\t}\n+       DONE;\n+     }\n+   ix86_expand_unary_operator (NEG, DFmode, operands); DONE;\")\n+\n+(define_insn \"negdf2_memory\"\n+  [(set (match_operand:DF 0 \"memory_operand\" \"=m\")\n+\t(neg:DF (match_operand:DF 1 \"memory_operand\" \"0\")))\n+   (clobber (reg:CC 17))]\n+  \"ix86_unary_operator_ok (NEG, DFmode, operands)\"\n+  \"#\")\n+\n+(define_insn \"negdf2_ifs\"\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=x#fr,x#fr,f#xr,r#xf\")\n+\t(neg:DF (match_operand:DF 1 \"nonimmediate_operand\" \"0,x#fr,0,0\")))\n+   (use (match_operand:DF 2 \"nonmemory_operand\" \"x#x,0#x,*X#x,*X#x\"))\n+   (clobber (reg:CC 17))]\n+  \"TARGET_SSE\"\n+  \"#\")\n+\n+(define_split\n+  [(set (match_operand:DF 0 \"memory_operand\" \"\")\n+\t(neg:DF (match_operand:DF 1 \"memory_operand\" \"\")))\n+   (use (match_operand:DF 2 \"\" \"\"))\n+   (clobber (reg:CC 17))]\n+  \"\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (neg:DF (match_dup 1)))\n+\t      (clobber (reg:CC 17))])])\n+\n+(define_split\n+  [(set (match_operand:DF 0 \"register_operand\" \"\")\n+\t(neg:DF (match_operand:DF 1 \"register_operand\" \"\")))\n+   (use (match_operand:DF 2 \"\" \"\"))\n+   (clobber (reg:CC 17))]\n+  \"reload_completed && !SSE_REG_P (operands[0])\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (neg:DF (match_dup 1)))\n+\t      (clobber (reg:CC 17))])])\n+\n+(define_split\n+  [(set (match_operand:DF 0 \"register_operand\" \"\")\n+\t(neg:DF (match_operand:DF 1 \"register_operand\" \"\")))\n+   (use (match_operand:DF 2 \"register_operand\" \"\"))\n+   (clobber (reg:CC 17))]\n+  \"reload_completed && SSE_REG_P (operands[0])\"\n+  [(set (subreg:TI (match_dup 0) 0)\n+\t(xor:TI (subreg:TI (match_dup 1) 0)\n+\t\t(subreg:TI (match_dup 2) 0)))]\n+  \"\n+{\n+  if (operands_match_p (operands[0], operands[2]))\n+    {\n+      rtx tmp;\n+      tmp = operands[1];\n+      operands[1] = operands[2];\n+      operands[2] = tmp;\n+    }\n+}\")\n \n ;; Keep 'f' and 'r' in separate alternatives to avoid reload problems\n ;; because of secondary memory needed to reload from class FLOAT_INT_REGS\n@@ -9666,8 +9836,8 @@\n {\n   int size = GET_MODE_SIZE (GET_MODE (operands[1]));\n \n-  /* XFmode's size is 12, but only 10 bytes are used.  */\n-  if (size == 12)\n+  /* XFmode's size is 12, TFmode 16, but only 10 bytes are used.  */\n+  if (size >= 12)\n     size = 10;\n   operands[0] = gen_rtx_MEM (QImode, XEXP (operands[0], 0));\n   operands[0] = adj_offsettable_operand (operands[0], size - 1);"}]}