{"sha": "bdfd4e3106f5623ff3afdde1cd51d41879bd4dd3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmRmZDRlMzEwNmY1NjIzZmYzYWZkZGUxY2Q1MWQ0MTg3OWJkNGRkMw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-03-18T22:53:28Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-03-18T22:53:28Z"}, "message": "(HARD_REGNO_MODE_OK): Allow DImode in FP registers.\n\n(CONDITIONAL_REGISTER_USAGE): Delete ppcas mention from comment.\n(RTX_COSTS): Costs based upon processor_type enum.\n\nFrom-SVN: r6818", "tree": {"sha": "965fdc8073e8b5b8ab2ccf0f2a0ec348ce23d48a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/965fdc8073e8b5b8ab2ccf0f2a0ec348ce23d48a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bdfd4e3106f5623ff3afdde1cd51d41879bd4dd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdfd4e3106f5623ff3afdde1cd51d41879bd4dd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdfd4e3106f5623ff3afdde1cd51d41879bd4dd3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdfd4e3106f5623ff3afdde1cd51d41879bd4dd3/comments", "author": null, "committer": null, "parents": [{"sha": "c764f757d53ebb592795f8c59a95e252c51598bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c764f757d53ebb592795f8c59a95e252c51598bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c764f757d53ebb592795f8c59a95e252c51598bc"}], "stats": {"total": 52, "additions": 38, "deletions": 14}, "files": [{"sha": "0662d5562f203911fabdeaa1664a0db46b3494af", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 38, "deletions": 14, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdfd4e3106f5623ff3afdde1cd51d41879bd4dd3/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdfd4e3106f5623ff3afdde1cd51d41879bd4dd3/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=bdfd4e3106f5623ff3afdde1cd51d41879bd4dd3", "patch": "@@ -399,16 +399,19 @@ extern char *rs6000_cpu_string;\n    : ((GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD))\n \n /* Value is 1 if hard register REGNO can hold a value of machine-mode MODE.\n-   On RS/6000, the cpu registers can hold any mode but the float registers\n-   can hold only floating modes and CR register can only hold CC modes.  We\n-   cannot put DImode or TImode anywhere except general register and they\n-   must be able to fit within the register set.  */\n+   For POWER and PowerPC, the GPRs can hold any mode, but the float\n+   registers only can hold floating modes and DImode, and CR register only\n+   can hold CC modes.  We cannot put TImode anywhere except general\n+   register and it must be able to fit within the register set. */\n \n #define HARD_REGNO_MODE_OK(REGNO, MODE) \\\n-  (FP_REGNO_P (REGNO) ? GET_MODE_CLASS (MODE) == MODE_FLOAT\t\\\n+  (FP_REGNO_P (REGNO) ?\t\t\t\t\t\t\\\n+   (GET_MODE_CLASS (MODE) == MODE_FLOAT\t\t\t\t\\\n+    || (GET_MODE_CLASS (MODE) == MODE_INT\t\t\t\\\n+\t&& GET_MODE_SIZE (MODE) == 2 * UNITS_PER_WORD))\t\t\\\n    : CR_REGNO_P (REGNO) ? GET_MODE_CLASS (MODE) == MODE_CC\t\\\n-   : ! INT_REGNO_P (REGNO) ? (GET_MODE_CLASS (MODE) == MODE_INT  \\\n-\t\t\t      && GET_MODE_SIZE (MODE) <= UNITS_PER_WORD)  \\\n+   : ! INT_REGNO_P (REGNO) ? (GET_MODE_CLASS (MODE) == MODE_INT\t\\\n+\t\t\t      && GET_MODE_SIZE (MODE) <= UNITS_PER_WORD) \\\n    : 1)\n \n /* Value is 1 if it is a good idea to tie two pseudo registers\n@@ -465,8 +468,7 @@ extern char *rs6000_cpu_string;\n \n /* Define this macro to change register usage conditional on target flags.\n    Set MQ register fixed (already call_used) if not POWER architecture\n-   (RIOS1, RIOS2, and PPC601) so that it will not be allocated.\n-   Provide alternate register names for ppcas assembler */\n+   (RIOS1, RIOS2, RSC, and PPC601) so that it will not be allocated.  */\n \n #define CONDITIONAL_REGISTER_USAGE\t\t\t\t\t\\\n     if (!TARGET_POWER)\t\t\t\t\t\t\t\\\n@@ -1402,10 +1404,21 @@ struct rs6000_args {int words, fregno, nargs_prototype; };\n \n #define RTX_COSTS(X,CODE,OUTER_CODE)\t\t\t\\\n   case MULT:\t\t\t\t\t\t\\\n-    return (GET_CODE (XEXP (X, 1)) != CONST_INT\t\t\\\n-\t    ? COSTS_N_INSNS (5)\t\t\t\t\\\n-\t    : INTVAL (XEXP (X, 1)) >= -256 && INTVAL (XEXP (X, 1)) <= 255 \\\n-\t    ? COSTS_N_INSNS (3) : COSTS_N_INSNS (4));\t\\\n+  switch (rs6000_cpu)\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+    case PROCESSOR_RIOS1:\t\t\t\t\\\n+      return (GET_CODE (XEXP (X, 1)) != CONST_INT\t\\\n+\t      ? COSTS_N_INSNS (5)\t\t\t\\\n+\t      : INTVAL (XEXP (X, 1)) >= -256 && INTVAL (XEXP (X, 1)) <= 255 \\\n+\t      ? COSTS_N_INSNS (3) : COSTS_N_INSNS (4));\t\\\n+    case PROCESSOR_RIOS2:\t\t\t\t\\\n+      return COSTS_N_INSNS (2);\t\t\t\t\\\n+    case PROCESSOR_PPC601:\t\t\t\t\\\n+    case PROCESSOR_PPC603:\t\t\t\t\\\n+    case PROCESSOR_PPC604:\t\t\t\t\\\n+    case PROCESSOR_PPC620:\t\t\t\t\\\n+      return COSTS_N_INSNS (5);\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n   case DIV:\t\t\t\t\t\t\\\n   case MOD:\t\t\t\t\t\t\\\n     if (GET_CODE (XEXP (X, 1)) == CONST_INT\t\t\\\n@@ -1414,7 +1427,18 @@ struct rs6000_args {int words, fregno, nargs_prototype; };\n     /* otherwise fall through to normal divide.  */\t\\\n   case UDIV:\t\t\t\t\t\t\\\n   case UMOD:\t\t\t\t\t\t\\\n-    return COSTS_N_INSNS (19);\t\t\t\t\\\n+  switch (rs6000_cpu)\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+    case PROCESSOR_RIOS1:\t\t\t\t\\\n+      return COSTS_N_INSNS (19);\t\t\t\\\n+    case PROCESSOR_RIOS2:\t\t\t\t\\\n+      return COSTS_N_INSNS (13);\t\t\t\\\n+    case PROCESSOR_PPC601:\t\t\t\t\\\n+    case PROCESSOR_PPC603:\t\t\t\t\\\n+    case PROCESSOR_PPC604:\t\t\t\t\\\n+    case PROCESSOR_PPC620:\t\t\t\t\\\n+      return COSTS_N_INSNS (36);\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n   case MEM:\t\t\t\t\t\t\\\n     /* MEM should be slightly more expensive than (plus (reg) (const)) */ \\\n     return 5;"}]}