{"sha": "d43919bf887530dfcbf85a76d60f1a698641731d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQzOTE5YmY4ODc1MzBkZmNiZjg1YTc2ZDYwZjFhNjk4NjQxNzMxZA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-04-15T20:01:42Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-04-15T20:01:42Z"}, "message": "libstdc++: Add comparison operators to std::filesystem types\n\nSome more C++20 changes from P1614R2, \"The Mothership has Landed\".\n\n\t* include/bits/fs_dir.h (file_status): Define operator== for C++20.\n\t(directory_entry): Define operator<=> and remove redundant comparison\n\toperators for C++20.\n\t* include/bits/fs_fwd.h (space_info): Define operator== for C++20.\n\t* include/bits/fs_path.h (path): Define operator<=> and remove\n\tredundant comparison operators for C++20.\n\t* testsuite/27_io/filesystem/path/compare/compare.cc: Fix comment.\n\t* testsuite/27_io/filesystem/path/compare/lwg2936.cc: Likewise.\n\t* testsuite/27_io/filesystem/path/compare/path.cc: Likewise.\n\t* testsuite/27_io/filesystem/path/compare/strings.cc: Likewise.", "tree": {"sha": "fd0682814c8b6fd473f42e16c538703b11b0686e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd0682814c8b6fd473f42e16c538703b11b0686e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d43919bf887530dfcbf85a76d60f1a698641731d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d43919bf887530dfcbf85a76d60f1a698641731d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d43919bf887530dfcbf85a76d60f1a698641731d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d43919bf887530dfcbf85a76d60f1a698641731d/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eef00439e6723e089e74cd374474e0eac0a9f513", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eef00439e6723e089e74cd374474e0eac0a9f513", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eef00439e6723e089e74cd374474e0eac0a9f513"}], "stats": {"total": 232, "additions": 216, "deletions": 16}, "files": [{"sha": "f9e4c2d87dde708343662ade5f9a62fc2f1e1bf1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d43919bf887530dfcbf85a76d60f1a698641731d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d43919bf887530dfcbf85a76d60f1a698641731d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d43919bf887530dfcbf85a76d60f1a698641731d", "patch": "@@ -1,5 +1,16 @@\n 2020-04-15  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/bits/fs_dir.h (file_status): Define operator== for C++20.\n+\t(directory_entry): Define operator<=> and remove redundant comparison\n+\toperators for C++20.\n+\t* include/bits/fs_fwd.h (space_info): Define operator== for C++20.\n+\t* include/bits/fs_path.h (path): Define operator<=> and remove\n+\tredundant comparison operators for C++20.\n+\t* testsuite/27_io/filesystem/path/compare/compare.cc: Fix comment.\n+\t* testsuite/27_io/filesystem/path/compare/lwg2936.cc: Likewise.\n+\t* testsuite/27_io/filesystem/path/compare/path.cc: Likewise.\n+\t* testsuite/27_io/filesystem/path/compare/strings.cc: Likewise.\n+\n \t* include/bits/allocator.h (operator!=): Do not define for C++20.\n \t* include/bits/locale_classes.h (operator!=): Likewise.\n \t* include/bits/std_function.h (operator==(nullptr_t, const function&))"}, {"sha": "686dfce6e5fd9f6252a84e30251767fb0cfabe5e", "filename": "libstdc++-v3/include/bits/fs_dir.h", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d43919bf887530dfcbf85a76d60f1a698641731d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_dir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d43919bf887530dfcbf85a76d60f1a698641731d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_dir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_dir.h?ref=d43919bf887530dfcbf85a76d60f1a698641731d", "patch": "@@ -36,6 +36,10 @@\n # include <bits/unique_ptr.h>\n # include <bits/shared_ptr.h>\n \n+#if __cplusplus > 201703L\n+# include <compare>\t// std::strong_ordering\n+#endif\n+\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n@@ -72,6 +76,11 @@ namespace filesystem\n     void       type(file_type __ft) noexcept { _M_type = __ft; }\n     void       permissions(perms __prms) noexcept { _M_perms = __prms; }\n \n+#if __cpp_lib_three_way_comparison\n+    friend bool\n+    operator==(const file_status&, const file_status&) noexcept = default;\n+#endif\n+\n   private:\n     file_type\t_M_type;\n     perms\t_M_perms;\n@@ -272,18 +281,23 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     symlink_status(error_code& __ec) const noexcept\n     { return filesystem::symlink_status(_M_path, __ec); }\n \n-    bool\n-    operator< (const directory_entry& __rhs) const noexcept\n-    { return _M_path < __rhs._M_path; }\n-\n     bool\n     operator==(const directory_entry& __rhs) const noexcept\n     { return _M_path == __rhs._M_path; }\n \n+#if __cpp_lib_three_way_comparison\n+    strong_ordering\n+    operator<=>(const directory_entry& __rhs) const noexcept\n+    { return _M_path <=> __rhs._M_path; }\n+#else\n     bool\n     operator!=(const directory_entry& __rhs) const noexcept\n     { return _M_path != __rhs._M_path; }\n \n+    bool\n+    operator< (const directory_entry& __rhs) const noexcept\n+    { return _M_path < __rhs._M_path; }\n+\n     bool\n     operator<=(const directory_entry& __rhs) const noexcept\n     { return _M_path <= __rhs._M_path; }\n@@ -295,6 +309,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     bool\n     operator>=(const directory_entry& __rhs) const noexcept\n     { return _M_path >= __rhs._M_path; }\n+#endif\n \n   private:\n     friend class _Dir;"}, {"sha": "d94cc4149067096269cf2161db17e58249ea5a5e", "filename": "libstdc++-v3/include/bits/fs_fwd.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d43919bf887530dfcbf85a76d60f1a698641731d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_fwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d43919bf887530dfcbf85a76d60f1a698641731d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_fwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_fwd.h?ref=d43919bf887530dfcbf85a76d60f1a698641731d", "patch": "@@ -66,6 +66,10 @@ _GLIBCXX_END_NAMESPACE_CXX11\n     uintmax_t capacity;\n     uintmax_t free;\n     uintmax_t available;\n+\n+#if __cpp_impl_three_way_comparison >= 201907L\n+    friend bool operator==(const space_info&, const space_info&) = default;\n+#endif\n   };\n \n   enum class file_type : signed char {"}, {"sha": "ee6ab15cc4c222b42be117d51a98eb3b41092548", "filename": "libstdc++-v3/include/bits/fs_path.h", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d43919bf887530dfcbf85a76d60f1a698641731d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d43919bf887530dfcbf85a76d60f1a698641731d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h?ref=d43919bf887530dfcbf85a76d60f1a698641731d", "patch": "@@ -46,6 +46,10 @@\n #include <bits/shared_ptr.h>\n #include <bits/unique_ptr.h>\n \n+#if __cplusplus > 201703L\n+# include <compare>\n+#endif\n+\n #if defined(_WIN32) && !defined(__CYGWIN__)\n # define _GLIBCXX_FILESYSTEM_IS_WINDOWS 1\n # include <algorithm>\n@@ -451,6 +455,20 @@ namespace __detail\n \n     // non-member operators\n \n+    /// Compare paths\n+    friend bool operator==(const path& __lhs, const path& __rhs) noexcept\n+    { return __lhs.compare(__rhs) == 0; }\n+\n+#if __cpp_lib_three_way_comparison\n+    /// Compare paths\n+    friend strong_ordering\n+    operator<=>(const path& __lhs, const path& __rhs) noexcept\n+    { return __lhs.compare(__rhs) <=> 0; }\n+#else\n+    /// Compare paths\n+    friend bool operator!=(const path& __lhs, const path& __rhs) noexcept\n+    { return !(__lhs == __rhs); }\n+\n     /// Compare paths\n     friend bool operator<(const path& __lhs, const path& __rhs) noexcept\n     { return __lhs.compare(__rhs) < 0; }\n@@ -466,14 +484,7 @@ namespace __detail\n     /// Compare paths\n     friend bool operator>=(const path& __lhs, const path& __rhs) noexcept\n     { return !(__lhs < __rhs); }\n-\n-    /// Compare paths\n-    friend bool operator==(const path& __lhs, const path& __rhs) noexcept\n-    { return __lhs.compare(__rhs) == 0; }\n-\n-    /// Compare paths\n-    friend bool operator!=(const path& __lhs, const path& __rhs) noexcept\n-    { return !(__lhs == __rhs); }\n+#endif\n \n     /// Append one path to another\n     friend path operator/(const path& __lhs, const path& __rhs)"}, {"sha": "3c9974aeaccaf83440777615d804ec8f8162886f", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/compare/compare.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d43919bf887530dfcbf85a76d60f1a698641731d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fcompare%2Fcompare.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d43919bf887530dfcbf85a76d60f1a698641731d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fcompare%2Fcompare.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fcompare%2Fcompare.cc?ref=d43919bf887530dfcbf85a76d60f1a698641731d", "patch": "@@ -18,7 +18,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 8.4.8 path compare [path.compare]\n+// C++17 30.10.8.4.8 path compare [fs.path.compare]\n \n #include <filesystem>\n #include <testsuite_hooks.h>"}, {"sha": "b9978edd8f705dd4fe1b515a2f10e811b03e0f31", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/compare/lwg2936.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d43919bf887530dfcbf85a76d60f1a698641731d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fcompare%2Flwg2936.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d43919bf887530dfcbf85a76d60f1a698641731d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fcompare%2Flwg2936.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fcompare%2Flwg2936.cc?ref=d43919bf887530dfcbf85a76d60f1a698641731d", "patch": "@@ -18,7 +18,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 8.4.8 path compare [path.compare]\n+// C++17 30.10.8.4.8 path compare [fs.path.compare]\n \n #include <filesystem>\n #include <testsuite_hooks.h>"}, {"sha": "6f4166b641db823f64670ca07fd4775575521ba4", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/compare/path.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d43919bf887530dfcbf85a76d60f1a698641731d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fcompare%2Fpath.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d43919bf887530dfcbf85a76d60f1a698641731d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fcompare%2Fpath.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fcompare%2Fpath.cc?ref=d43919bf887530dfcbf85a76d60f1a698641731d", "patch": "@@ -18,7 +18,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 8.4.8 path compare [path.compare]\n+// C++17 30.10.8.4.8 path compare [fs.path.compare]\n \n #include <filesystem>\n #include <testsuite_hooks.h>"}, {"sha": "e9c900c49e4e6beb76532b3d1f7c5d3c06e709df", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/compare/strings.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d43919bf887530dfcbf85a76d60f1a698641731d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fcompare%2Fstrings.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d43919bf887530dfcbf85a76d60f1a698641731d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fcompare%2Fstrings.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fcompare%2Fstrings.cc?ref=d43919bf887530dfcbf85a76d60f1a698641731d", "patch": "@@ -18,7 +18,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 8.4.8 path compare [path.compare]\n+// C++17 30.10.8.4.8 path compare [fs.path.compare]\n \n #include <filesystem>\n #include <testsuite_hooks.h>"}, {"sha": "d9adfad0a3e66799f5b81785977eb0f7be30998a", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/nonmember/cmp.cc", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d43919bf887530dfcbf85a76d60f1a698641731d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fnonmember%2Fcmp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d43919bf887530dfcbf85a76d60f1a698641731d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fnonmember%2Fcmp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fnonmember%2Fcmp.cc?ref=d43919bf887530dfcbf85a76d60f1a698641731d", "patch": "@@ -0,0 +1,79 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do run { target c++17 } }\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// C++17 30.10.8.6 path non-member functions [fs.path.nonmember]\n+\n+#include <filesystem>\n+#include <testsuite_hooks.h>\n+#include <testsuite_fs.h>\n+\n+using std::filesystem::path;\n+\n+void\n+test01()\n+{\n+  path p(\"/foo/bar\");\n+  VERIFY( p == p );\n+  VERIFY( p == \"/foo//bar\" );\n+\n+  path q(\"/foo/baz\");\n+  VERIFY( p < q );\n+  VERIFY( q > p );\n+\n+  path r(\"/foo/bar/.\");\n+  VERIFY( p < r );\n+\n+  VERIFY( path(\"a/b/\") == path(\"a/b//\") );\n+}\n+\n+void\n+test02()\n+{\n+  const path p0 = \"/a/a/b/b\";\n+  for (const path& p : __gnu_test::test_paths)\n+  {\n+    VERIFY( p.compare(p) == 0 );\n+    int cmp = p.compare(p0);\n+    if (cmp == 0)\n+      VERIFY( p0 == p );\n+    else if (cmp < 0)\n+      VERIFY( p0 > p );\n+    else if (cmp > 0)\n+      VERIFY( p0 < p );\n+  }\n+}\n+\n+void\n+test03()\n+{\n+  VERIFY( path(\"/\") == path(\"////\") );\n+  VERIFY( path(\"/a\") > path(\"/\") );\n+  VERIFY( path(\"/\") < path(\"/a\") );\n+  VERIFY( path(\"/ab\") > path(\"/a\") );\n+  VERIFY( path(\"/ab\") > path(\"/a/b\") );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+}"}, {"sha": "34e8bf841c23ea6254a267a037fb0ea776decf5c", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/nonmember/cmp_c++20.cc", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d43919bf887530dfcbf85a76d60f1a698641731d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fnonmember%2Fcmp_c%2B%2B20.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d43919bf887530dfcbf85a76d60f1a698641731d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fnonmember%2Fcmp_c%2B%2B20.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fnonmember%2Fcmp_c%2B%2B20.cc?ref=d43919bf887530dfcbf85a76d60f1a698641731d", "patch": "@@ -0,0 +1,80 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// C++20 29.11.7.7 Non-member functions [fs.path.nonmember]\n+\n+#include <filesystem>\n+#include <testsuite_hooks.h>\n+#include <testsuite_fs.h>\n+\n+using std::filesystem::path;\n+\n+void\n+test01()\n+{\n+  path p(\"/foo/bar\");\n+  VERIFY( p == p );\n+  VERIFY( p == \"/foo//bar\" );\n+  VERIFY( std::is_eq(p <=> p) );\n+  VERIFY( std::is_eq(p <=> \"/foo//bar\") );\n+\n+  path q(\"/foo/baz\");\n+  VERIFY( p < q );\n+  VERIFY( q > p );\n+  VERIFY( std::is_lt(p <=> q) );\n+  VERIFY( std::is_gt(q <=> p) );\n+\n+  path r(\"/foo/bar/.\");\n+  VERIFY( p < r );\n+  VERIFY( std::is_lt(p <=> r) );\n+\n+  VERIFY( path(\"a/b/\") == path(\"a/b//\") );\n+  VERIFY( std::is_eq(path(\"a/b/\") <=> path(\"a/b//\")) );\n+}\n+\n+void\n+test02()\n+{\n+  const path p0 = \"/a/a/b/b\";\n+  for (const path& p : __gnu_test::test_paths)\n+  {\n+    VERIFY( std::is_eq(p <=> p) );\n+    VERIFY( (p <=> p0) == (p.compare(p0) <=> 0) );\n+    VERIFY( (p0 <=> p) == (p0.compare(p) <=> 0) );\n+  }\n+}\n+\n+void\n+test03()\n+{\n+  VERIFY( std::is_eq(path(\"/\") <=> path(\"////\")) );\n+  VERIFY( std::is_gt(path(\"/a\") <=> path(\"/\")) );\n+  VERIFY( std::is_lt(path(\"/\") <=> path(\"/a\")) );\n+  VERIFY( std::is_gt(path(\"/ab\") <=> path(\"/a\")) );\n+  VERIFY( std::is_gt(path(\"/ab\") <=> path(\"/a/b\")) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+}"}]}