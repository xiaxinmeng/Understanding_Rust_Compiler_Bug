{"sha": "f1a0e8300d7ee346adb69555ec4c930c89fb3997", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjFhMGU4MzAwZDdlZTM0NmFkYjY5NTU1ZWM0YzkzMGM4OWZiMzk5Nw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2011-07-23T20:06:42Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-07-23T20:06:42Z"}, "message": "dwarf2cfi: Populate CUR_ROW->REG_SAVE.\n\nTo be actually used by a subsequent patch.\n\n        * dwarf2cfi.c (update_row_reg_save): New.\n        (dwarf2out_frame_debug_cfa_expression): Use it.\n        (dwarf2out_frame_debug_cfa_restore): Likewise.\n        (reg_save): Likewise.  Do not emit DW_CFA_same_value.\n\nFrom-SVN: r176699", "tree": {"sha": "03bd5df20e665571b2f7a45ec0dda1af1b4571f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03bd5df20e665571b2f7a45ec0dda1af1b4571f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1a0e8300d7ee346adb69555ec4c930c89fb3997", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1a0e8300d7ee346adb69555ec4c930c89fb3997", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1a0e8300d7ee346adb69555ec4c930c89fb3997", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1a0e8300d7ee346adb69555ec4c930c89fb3997/comments", "author": null, "committer": null, "parents": [{"sha": "141618e22db496a7a1956672661ac15ea60f8ef9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/141618e22db496a7a1956672661ac15ea60f8ef9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/141618e22db496a7a1956672661ac15ea60f8ef9"}], "stats": {"total": 34, "additions": 32, "deletions": 2}, "files": [{"sha": "6277b1eee818f668e79c802b25ab7a2849f593b2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a0e8300d7ee346adb69555ec4c930c89fb3997/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a0e8300d7ee346adb69555ec4c930c89fb3997/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f1a0e8300d7ee346adb69555ec4c930c89fb3997", "patch": "@@ -1,3 +1,10 @@\n+2011-07-23  Richard Henderson  <rth@redhat.com>\n+\n+\t* dwarf2cfi.c (update_row_reg_save): New.\n+\t(dwarf2out_frame_debug_cfa_expression): Use it.\n+\t(dwarf2out_frame_debug_cfa_restore): Likewise.\n+\t(reg_save): Likewise.  Do not emit DW_CFA_same_value.\n+\n 2011-07-23  Richard Henderson  <rth@redhat.com>\n \n \t* dwarf2cfi.c (add_cfi_insn): Rename from cfi_insn.  Update all users."}, {"sha": "36fa7f86cf5f57f1f920164fe4775847379626b6", "filename": "gcc/dwarf2cfi.c", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a0e8300d7ee346adb69555ec4c930c89fb3997/gcc%2Fdwarf2cfi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a0e8300d7ee346adb69555ec4c930c89fb3997/gcc%2Fdwarf2cfi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2cfi.c?ref=f1a0e8300d7ee346adb69555ec4c930c89fb3997", "patch": "@@ -285,6 +285,17 @@ add_cfi (dw_cfi_ref cfi)\n     VEC_safe_push (dw_cfi_ref, gc, *add_cfi_vec, cfi);\n }\n \n+/* Perform ROW->REG_SAVE[COLUMN] = CFI.  CFI may be null, indicating\n+   that the register column is no longer saved.  */\n+\n+static void\n+update_row_reg_save (dw_cfi_row_ref row, unsigned column, dw_cfi_ref cfi)\n+{\n+  if (VEC_length (dw_cfi_ref, row->reg_save) <= column)\n+    VEC_safe_grow_cleared (dw_cfi_ref, gc, row->reg_save, column + 1);\n+  VEC_replace (dw_cfi_ref, row->reg_save, column, cfi);\n+}\n+\n /* This function fills in aa dw_cfa_location structure from a dwarf location\n    descriptor sequence.  */\n \n@@ -574,14 +585,21 @@ reg_save (unsigned int reg, unsigned int sreg, HOST_WIDE_INT offset)\n       cfi->dw_cfi_oprnd2.dw_cfi_offset = offset;\n     }\n   else if (sreg == reg)\n-    cfi->dw_cfi_opc = DW_CFA_same_value;\n+    {\n+      /* While we could emit something like DW_CFA_same_value or\n+\t DW_CFA_restore, we never expect to see something like that\n+\t in a prologue.  This is more likely to be a bug.  A backend\n+\t can always bypass this by using REG_CFA_RESTORE directly.  */\n+      gcc_unreachable ();\n+    }\n   else\n     {\n       cfi->dw_cfi_opc = DW_CFA_register;\n       cfi->dw_cfi_oprnd2.dw_cfi_reg_num = sreg;\n     }\n \n   add_cfi (cfi);\n+  update_row_reg_save (cur_row, reg, cfi);\n }\n \n /* Given a SET, calculate the amount of stack adjustment it\n@@ -1337,6 +1355,7 @@ dwarf2out_frame_debug_cfa_expression (rtx set)\n {\n   rtx src, dest, span;\n   dw_cfi_ref cfi = new_cfi ();\n+  unsigned regno;\n \n   dest = SET_DEST (set);\n   src = SET_SRC (set);\n@@ -1347,15 +1366,18 @@ dwarf2out_frame_debug_cfa_expression (rtx set)\n   span = targetm.dwarf_register_span (src);\n   gcc_assert (!span);\n \n+  regno = dwf_regno (src);\n+\n   cfi->dw_cfi_opc = DW_CFA_expression;\n-  cfi->dw_cfi_oprnd1.dw_cfi_reg_num = dwf_regno (src);\n+  cfi->dw_cfi_oprnd1.dw_cfi_reg_num = regno;\n   cfi->dw_cfi_oprnd2.dw_cfi_loc\n     = mem_loc_descriptor (XEXP (dest, 0), get_address_mode (dest),\n \t\t\t  GET_MODE (dest), VAR_INIT_STATUS_INITIALIZED);\n \n   /* ??? We'd like to use queue_reg_save, were the interface different,\n      and, as above, we could manage flushing for epilogues.  */\n   add_cfi (cfi);\n+  update_row_reg_save (cur_row, regno, cfi);\n }\n \n /* A subroutine of dwarf2out_frame_debug, process a REG_CFA_RESTORE note.  */\n@@ -1370,6 +1392,7 @@ dwarf2out_frame_debug_cfa_restore (rtx reg)\n   cfi->dw_cfi_oprnd1.dw_cfi_reg_num = regno;\n \n   add_cfi (cfi);\n+  update_row_reg_save (cur_row, regno, NULL);\n }\n \n /* A subroutine of dwarf2out_frame_debug, process a REG_CFA_WINDOW_SAVE."}]}