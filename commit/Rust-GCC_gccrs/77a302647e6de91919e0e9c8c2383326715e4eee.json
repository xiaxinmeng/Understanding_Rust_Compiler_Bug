{"sha": "77a302647e6de91919e0e9c8c2383326715e4eee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzdhMzAyNjQ3ZTZkZTkxOTE5ZTBlOWM4YzIzODMzMjY3MTVlNGVlZQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-04-24T19:10:55Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-04-24T19:10:55Z"}, "message": "tree-vrp.c (extract_range_from_binary_expr): Handle overflow from unsigned additions.\n\n2009-04-24  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-vrp.c (extract_range_from_binary_expr): Handle overflow\n\tfrom unsigned additions.\n\n\t* gcc.dg/tree-ssa/vrp48.c: New testcase.\n\nFrom-SVN: r146742", "tree": {"sha": "97a0566806e8184e997baf818e519cac788dd9bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97a0566806e8184e997baf818e519cac788dd9bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77a302647e6de91919e0e9c8c2383326715e4eee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77a302647e6de91919e0e9c8c2383326715e4eee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77a302647e6de91919e0e9c8c2383326715e4eee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77a302647e6de91919e0e9c8c2383326715e4eee/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2b6da65c33c24de56b95b42c5dd2c771c425ef7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b6da65c33c24de56b95b42c5dd2c771c425ef7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b6da65c33c24de56b95b42c5dd2c771c425ef7c"}], "stats": {"total": 45, "additions": 45, "deletions": 0}, "files": [{"sha": "f8ee86428cfabc4617788f69fbdd1c55109af9e0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77a302647e6de91919e0e9c8c2383326715e4eee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77a302647e6de91919e0e9c8c2383326715e4eee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=77a302647e6de91919e0e9c8c2383326715e4eee", "patch": "@@ -1,3 +1,8 @@\n+2009-04-24  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-vrp.c (extract_range_from_binary_expr): Handle overflow\n+\tfrom unsigned additions.\n+\n 2009-04-24  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-typeck.c (set_init_index): Allow array designators that are"}, {"sha": "e5b8fff0c84805e0df50860049e98f3913a3a171", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77a302647e6de91919e0e9c8c2383326715e4eee/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77a302647e6de91919e0e9c8c2383326715e4eee/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=77a302647e6de91919e0e9c8c2383326715e4eee", "patch": "@@ -1,3 +1,7 @@\n+2009-04-24  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.dg/tree-ssa/vrp48.c: New testcase.\n+\n 2009-04-24  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc.dg/array-const-1.c, gcc.dg/array-const-2.c,"}, {"sha": "a8cf8db320bda36c8d2cd14b4e4ca6a7b95f8a32", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp48.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77a302647e6de91919e0e9c8c2383326715e4eee/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp48.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77a302647e6de91919e0e9c8c2383326715e4eee/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp48.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp48.c?ref=77a302647e6de91919e0e9c8c2383326715e4eee", "patch": "@@ -0,0 +1,20 @@\n+extern void link_failure (void);\n+\n+static int __attribute__ ((noinline)) foo (int x)\n+{\n+  if (x >= 1)\n+    if (x <= 10)\n+      {\n+\tif (x < 1 || x > 10)\n+\t  link_failure ();\n+\tx = x + 1;\n+      }\n+  return x;\n+}\n+\n+int main (void)\n+{\n+  int i = foo (0);\n+  return 0;\n+}\n+"}, {"sha": "8464ffddd89cae9679bc46a6bc3734e25d8c1ef6", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77a302647e6de91919e0e9c8c2383326715e4eee/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77a302647e6de91919e0e9c8c2383326715e4eee/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=77a302647e6de91919e0e9c8c2383326715e4eee", "patch": "@@ -2248,6 +2248,22 @@ extract_range_from_binary_expr (value_range_t *vr,\n \t the same end of each range.  */\n       min = vrp_int_const_binop (code, vr0.min, vr1.min);\n       max = vrp_int_const_binop (code, vr0.max, vr1.max);\n+\n+      /* If both additions overflowed the range kind is still correct.\n+\t This happens regularly with subtracting something in unsigned\n+\t arithmetic.\n+         ???  See PR30318 for all the cases we do not handle.  */\n+      if (code == PLUS_EXPR\n+\t  && (TREE_OVERFLOW (min) && !is_overflow_infinity (min))\n+\t  && (TREE_OVERFLOW (max) && !is_overflow_infinity (max)))\n+\t{\n+\t  min = build_int_cst_wide (TREE_TYPE (min),\n+\t\t\t\t    TREE_INT_CST_LOW (min),\n+\t\t\t\t    TREE_INT_CST_HIGH (min));\n+\t  max = build_int_cst_wide (TREE_TYPE (max),\n+\t\t\t\t    TREE_INT_CST_LOW (max),\n+\t\t\t\t    TREE_INT_CST_HIGH (max));\n+\t}\n     }\n   else if (code == MULT_EXPR\n \t   || code == TRUNC_DIV_EXPR"}]}