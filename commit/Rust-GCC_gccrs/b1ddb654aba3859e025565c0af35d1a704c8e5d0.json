{"sha": "b1ddb654aba3859e025565c0af35d1a704c8e5d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjFkZGI2NTRhYmEzODU5ZTAyNTU2NWMwYWYzNWQxYTcwNGM4ZTVkMA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-02-27T15:25:33Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-02-27T15:25:33Z"}, "message": "re PR tree-optimization/84512 (Missed optimization: should be precalculated in compile-time)\n\n2018-02-27  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/84512\n\t* tree-vect-loop.c (vect_compute_single_scalar_iteration_cost):\n\tDo not use the estimate returned from record_stmt_cost for\n\tthe scalar iteration cost but sum properly using add_stmt_cost.\n\n\t* gcc.dg/tree-ssa/pr84512.c: New testcase.\n\nFrom-SVN: r258036", "tree": {"sha": "cf62b5231022071ef9708e731b1392bba45cd82d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf62b5231022071ef9708e731b1392bba45cd82d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1ddb654aba3859e025565c0af35d1a704c8e5d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1ddb654aba3859e025565c0af35d1a704c8e5d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1ddb654aba3859e025565c0af35d1a704c8e5d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1ddb654aba3859e025565c0af35d1a704c8e5d0/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c16d3e3c875cb00ff8cffbdf1aa58ab0932e767d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c16d3e3c875cb00ff8cffbdf1aa58ab0932e767d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c16d3e3c875cb00ff8cffbdf1aa58ab0932e767d"}], "stats": {"total": 62, "additions": 49, "deletions": 13}, "files": [{"sha": "d56af0f7363348a584ff0ef3c2e904c818c10094", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1ddb654aba3859e025565c0af35d1a704c8e5d0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1ddb654aba3859e025565c0af35d1a704c8e5d0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b1ddb654aba3859e025565c0af35d1a704c8e5d0", "patch": "@@ -1,3 +1,10 @@\n+2018-02-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/84512\n+\t* tree-vect-loop.c (vect_compute_single_scalar_iteration_cost):\n+\tDo not use the estimate returned from record_stmt_cost for\n+\tthe scalar iteration cost but sum properly using add_stmt_cost.\n+\n 2018-02-27  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/84466"}, {"sha": "5431093d456edb407f3fbb6af29bd0dabf428a4e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1ddb654aba3859e025565c0af35d1a704c8e5d0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1ddb654aba3859e025565c0af35d1a704c8e5d0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b1ddb654aba3859e025565c0af35d1a704c8e5d0", "patch": "@@ -1,3 +1,8 @@\n+2018-02-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/84512\n+\t* gcc.dg/tree-ssa/pr84512.c: New testcase.\n+\n 2018-02-27  Martin Liska  <mliska@suse.cz>\n \n \tPR gcov-profile/84548"}, {"sha": "288fa5dc4c8ba27c7f148b19b782e602e3cb84fd", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr84512.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1ddb654aba3859e025565c0af35d1a704c8e5d0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr84512.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1ddb654aba3859e025565c0af35d1a704c8e5d0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr84512.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr84512.c?ref=b1ddb654aba3859e025565c0af35d1a704c8e5d0", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -fdump-tree-optimized\" } */\n+\n+int foo()\n+{\n+  int a[10];\n+  for(int i = 0; i < 10; ++i)\n+    a[i] = i*i;\n+  int res = 0;\n+  for(int i = 0; i < 10; ++i)\n+    res += a[i];\n+  return res;\n+}\n+\n+/* { dg-final { scan-tree-dump \"return 285;\" \"optimized\" } } */"}, {"sha": "6585c85cfe039465cbe850926787a34af6cc079a", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 22, "deletions": 13, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1ddb654aba3859e025565c0af35d1a704c8e5d0/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1ddb654aba3859e025565c0af35d1a704c8e5d0/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=b1ddb654aba3859e025565c0af35d1a704c8e5d0", "patch": "@@ -1384,16 +1384,10 @@ vect_compute_single_scalar_iteration_cost (loop_vec_info loop_vinfo)\n {\n   struct loop *loop = LOOP_VINFO_LOOP (loop_vinfo);\n   basic_block *bbs = LOOP_VINFO_BBS (loop_vinfo);\n-  int nbbs = loop->num_nodes, factor, scalar_single_iter_cost = 0;\n+  int nbbs = loop->num_nodes, factor;\n   int innerloop_iters, i;\n \n-  /* Count statements in scalar loop.  Using this as scalar cost for a single\n-     iteration for now.\n-\n-     TODO: Add outer loop support.\n-\n-     TODO: Consider assigning different costs to different scalar\n-     statements.  */\n+  /* Gather costs for statements in the scalar loop.  */\n \n   /* FORNOW.  */\n   innerloop_iters = 1;\n@@ -1437,13 +1431,28 @@ vect_compute_single_scalar_iteration_cost (loop_vec_info loop_vinfo)\n           else\n             kind = scalar_stmt;\n \n-\t  scalar_single_iter_cost\n-\t    += record_stmt_cost (&LOOP_VINFO_SCALAR_ITERATION_COST (loop_vinfo),\n-\t\t\t\t factor, kind, stmt_info, 0, vect_prologue);\n+\t  record_stmt_cost (&LOOP_VINFO_SCALAR_ITERATION_COST (loop_vinfo),\n+\t\t\t    factor, kind, stmt_info, 0, vect_prologue);\n         }\n     }\n-  LOOP_VINFO_SINGLE_SCALAR_ITERATION_COST (loop_vinfo)\n-    = scalar_single_iter_cost;\n+\n+  /* Now accumulate cost.  */\n+  void *target_cost_data = init_cost (loop);\n+  stmt_info_for_cost *si;\n+  int j;\n+  FOR_EACH_VEC_ELT (LOOP_VINFO_SCALAR_ITERATION_COST (loop_vinfo),\n+\t\t    j, si)\n+    {\n+      struct _stmt_vec_info *stmt_info\n+\t= si->stmt ? vinfo_for_stmt (si->stmt) : NULL;\n+      (void) add_stmt_cost (target_cost_data, si->count,\n+\t\t\t    si->kind, stmt_info, si->misalign,\n+\t\t\t    vect_body);\n+    }\n+  unsigned dummy, body_cost = 0;\n+  finish_cost (target_cost_data, &dummy, &body_cost, &dummy);\n+  destroy_cost_data (target_cost_data);\n+  LOOP_VINFO_SINGLE_SCALAR_ITERATION_COST (loop_vinfo) = body_cost;\n }\n \n "}]}