{"sha": "806617595fdda9139fa496a55254c8c4baa7dc8d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODA2NjE3NTk1ZmRkYTkxMzlmYTQ5NmE1NTI1NGM4YzRiYWE3ZGM4ZA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2000-06-05T10:49:11Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2000-06-05T10:49:11Z"}, "message": "alias.c (get_alias_set): If compnent is addressable, use alias set of component.\n\n\t* alias.c (get_alias_set): If compnent is addressable, use alias\n\tset of component.\n\t* c-decl.c (init_decl_processing): Don't call record_component_aliases.\n\t(grokdeclarator): Likewise.\n\t* c-typeck.c (common_type): Likewise.\n\t* cp/decl.c (init_decl_processing): Don't call\n\trecord_component_aliases.\n\t* cp/tree.c (build_cplus_array_type_1): Likewise.\n\nFrom-SVN: r34400", "tree": {"sha": "9f67eb4e1929678165cca0bdac87bd07b4cc8236", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f67eb4e1929678165cca0bdac87bd07b4cc8236"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/806617595fdda9139fa496a55254c8c4baa7dc8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/806617595fdda9139fa496a55254c8c4baa7dc8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/806617595fdda9139fa496a55254c8c4baa7dc8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/806617595fdda9139fa496a55254c8c4baa7dc8d/comments", "author": null, "committer": null, "parents": [{"sha": "137e9760b7f573bd915366a4ba3ef61c6c075b87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/137e9760b7f573bd915366a4ba3ef61c6c075b87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/137e9760b7f573bd915366a4ba3ef61c6c075b87"}], "stats": {"total": 74, "additions": 46, "deletions": 28}, "files": [{"sha": "ed4b5fc421a78c453d5a08d39cc4fc7839006386", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/806617595fdda9139fa496a55254c8c4baa7dc8d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/806617595fdda9139fa496a55254c8c4baa7dc8d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=806617595fdda9139fa496a55254c8c4baa7dc8d", "patch": "@@ -1,3 +1,11 @@\n+Mon Jun  5 06:46:28 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* alias.c (get_alias_set): If compnent is addressable, use alias\n+\tset of component.\n+\t* c-decl.c (init_decl_processing): Don't call record_component_aliases.\n+\t(grokdeclarator): Likewise.\n+\t* c-typeck.c (common_type): Likewise.\n+\n 2000-06-04  Alex Samuel  <samuel@codesourcery.com>\n \n \t* Makefile.in (OBJS): Remove dyn_string.o"}, {"sha": "07f87015bcc50a4a7b6b52d46184706d7b684412", "filename": "gcc/alias.c", "status": "modified", "additions": 32, "deletions": 11, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/806617595fdda9139fa496a55254c8c4baa7dc8d/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/806617595fdda9139fa496a55254c8c4baa7dc8d/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=806617595fdda9139fa496a55254c8c4baa7dc8d", "patch": "@@ -344,11 +344,6 @@ get_alias_set (t)\n {\n   tree orig_t;\n   HOST_WIDE_INT set;\n-  HOST_WIDE_INT bitsize, bitpos;\n-  tree offset;\n-  enum machine_mode mode;\n-  int volatilep, unsignedp;\n-  unsigned int alignment;\n \n   /* If we're not doing any alias analysis, just assume everything\n      aliases everything else.  Also return 0 if this or its type is\n@@ -376,12 +371,38 @@ get_alias_set (t)\n       if ((set = lang_get_alias_set (t)) != -1)\n \treturn set;\n \n-      /* If this is a reference, go inside it and use the underlying\n-         object.  */\n-      if (TREE_CODE_CLASS (TREE_CODE (t)) == 'r')\n-\tt = get_inner_reference (t, &bitsize, &bitpos, &offset, &mode,\n-\t\t\t\t &unsignedp, &volatilep, &alignment);\n-\n+      /* Now loop the same way as get_inner_reference and get the alias\n+\t set to use.  Pick up the outermost object that we could have\n+\t a pointer to.  */\n+      while (1)\n+\t{\n+\t  /* Unnamed bitfields are not an addressable object.  */\n+\t  if (TREE_CODE (t) == BIT_FIELD_REF)\n+\t    ;\n+\t  else if (TREE_CODE (t) == COMPONENT_REF)\n+\t    {\n+\t      if (! DECL_NONADDRESSABLE_P (TREE_OPERAND (t, 1)))\n+\t\t/* Stop at an adressable decl.  */\n+\t\tbreak;\n+\t    }\n+\t  else if (TREE_CODE (t) == ARRAY_REF)\n+\t    {\n+\t      if (! TYPE_NONALIASED_COMPONENT\n+\t\t  (TREE_TYPE (TREE_OPERAND (t, 0))))\n+\t\t/* Stop at an addresssable array element.  */\n+\t\tbreak;\n+\t    }\n+\t  else if (TREE_CODE (t) != NON_LVALUE_EXPR\n+\t\t   && ! ((TREE_CODE (t) == NOP_EXPR\n+\t\t      || TREE_CODE (t) == CONVERT_EXPR)\n+\t\t     && (TYPE_MODE (TREE_TYPE (t))\n+\t\t\t == TYPE_MODE (TREE_TYPE (TREE_OPERAND (t, 0))))))\n+\t    /* Stop if not one of above and not mode-preserving conversion. */\n+\t    break;\n+\n+\t  t = TREE_OPERAND (t, 0);\n+\t}\n+\t\t   \n       if (TREE_CODE (t) == INDIRECT_REF)\n \t{\n \t  /* Check for accesses through restrict-qualified pointers.  */"}, {"sha": "75e50b5d7de0dbccad24777473250f4cef73f87f", "filename": "gcc/c-decl.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/806617595fdda9139fa496a55254c8c4baa7dc8d/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/806617595fdda9139fa496a55254c8c4baa7dc8d/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=806617595fdda9139fa496a55254c8c4baa7dc8d", "patch": "@@ -3023,10 +3023,6 @@ init_decl_processing ()\n   wchar_array_type_node\n     = build_array_type (wchar_type_node, array_domain_type);\n \n-  record_component_aliases (char_array_type_node);\n-  record_component_aliases (int_array_type_node);\n-  record_component_aliases (wchar_array_type_node);\n-\n   void_list_node = tree_cons (NULL_TREE, void_type_node, NULL_TREE);\n \n   default_function_type\n@@ -4405,7 +4401,6 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \t  type = build_array_type (type, itype);\n \t  if (type_quals)\n \t    type = c_build_qualified_type (type, type_quals);\n-\t  record_component_aliases (type);\n \n #if 0\t/* don't clear these; leave them set so that the array type\n \t   or the variable is itself const or volatile.  */\n@@ -4578,7 +4573,6 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n       && TREE_CODE (type) == ARRAY_TYPE && TYPE_DOMAIN (type) == 0)\n     {\n       type = build_array_type (TREE_TYPE (type), 0);\n-      record_component_aliases (type);\n       if (size_varies)\n \tC_TYPE_VARIABLE_SIZE (type) = 1;\n     }\n@@ -4691,7 +4685,6 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \t    type = build_array_type (c_build_qualified_type (TREE_TYPE (type),\n \t\t\t\t\t\t\t     type_quals),\n \t\t\t\t     TYPE_DOMAIN (type));\n-\t    record_component_aliases (type);\n #if 0 /* Leave the field const or volatile as well.  */\n \t    type_quals = TYPE_UNQUALIFIED;\n #endif\n@@ -4774,7 +4767,6 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \t    type = build_array_type (c_build_qualified_type (TREE_TYPE (type),\n \t\t\t\t\t\t\t     type_quals),\n \t\t\t\t     TYPE_DOMAIN (type));\n-\t    record_component_aliases (type);\n #if 0 /* Leave the variable const or volatile as well.  */\n \t    type_quals = TYPE_UNQUALIFIED;\n #endif"}, {"sha": "0f01c578d4d0d06518257603f65a731b7f1dd6e2", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/806617595fdda9139fa496a55254c8c4baa7dc8d/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/806617595fdda9139fa496a55254c8c4baa7dc8d/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=806617595fdda9139fa496a55254c8c4baa7dc8d", "patch": "@@ -313,7 +313,6 @@ common_type (t1, t2)\n \t  return build_type_attribute_variant (t2, attributes);\n \t/* Merge the element types, and have a size if either arg has one.  */\n \tt1 = build_array_type (elt, TYPE_DOMAIN (TYPE_DOMAIN (t1) ? t1 : t2));\n-\trecord_component_aliases (t1);\n \treturn build_type_attribute_variant (t1, attributes);\n       }\n "}, {"sha": "528f9bc38038493eee4ced549257a4d6b88fd889", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/806617595fdda9139fa496a55254c8c4baa7dc8d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/806617595fdda9139fa496a55254c8c4baa7dc8d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=806617595fdda9139fa496a55254c8c4baa7dc8d", "patch": "@@ -1,3 +1,8 @@\n+Mon Jun  5 06:48:55 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* decl.c (init_decl_processing): Don't call record_component_aliases.\n+\t* tree.c (build_cplus_array_type_1): Likewise.\n+\n 2000-06-04  Mark Mitchell  <mark@codesourcery.com>\n \n \t* ir.texi: Correct typo."}, {"sha": "60e8f9f6440f115df80d25c7c820b4110401cae5", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/806617595fdda9139fa496a55254c8c4baa7dc8d/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/806617595fdda9139fa496a55254c8c4baa7dc8d/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=806617595fdda9139fa496a55254c8c4baa7dc8d", "patch": "@@ -6478,9 +6478,6 @@ init_decl_processing ()\n   int_array_type_node\n     = build_array_type (integer_type_node, array_domain_type);\n \n-  record_component_aliases (char_array_type_node);\n-  record_component_aliases (int_array_type_node);\n-\n   if (flag_new_abi)\n     delta_type_node = ptrdiff_type_node;\n   else if (flag_huge_objects)\n@@ -6544,7 +6541,6 @@ init_decl_processing ()\n   /* This is for wide string constants.  */\n   wchar_array_type_node\n     = build_array_type (wchar_type_node, array_domain_type);\n-  record_component_aliases (wchar_array_type_node);\n \n   if (flag_vtable_thunks)\n     {"}, {"sha": "382e254c4f3eeb6ca7b2522d5caf3c5c21229b72", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/806617595fdda9139fa496a55254c8c4baa7dc8d/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/806617595fdda9139fa496a55254c8c4baa7dc8d/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=806617595fdda9139fa496a55254c8c4baa7dc8d", "patch": "@@ -500,10 +500,7 @@ build_cplus_array_type_1 (elt_type, index_type)\n       TYPE_DOMAIN (t) = index_type;\n     }\n   else\n-    {\n-      t = build_array_type (elt_type, index_type);\n-      record_component_aliases (t);\n-    }\n+    t = build_array_type (elt_type, index_type);\n \n   /* Push these needs up so that initialization takes place\n      more easily.  */"}]}