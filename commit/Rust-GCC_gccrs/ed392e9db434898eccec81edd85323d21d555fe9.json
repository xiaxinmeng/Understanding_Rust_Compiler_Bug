{"sha": "ed392e9db434898eccec81edd85323d21d555fe9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQzOTJlOWRiNDM0ODk4ZWNjZWM4MWVkZDg1MzIzZDIxZDU1NWZlOQ==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-06-28T11:27:23Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-06-30T01:07:46Z"}, "message": "The upper bits of FIXUPIMMS{S,D} should come from src1 not dest.\n\ngcc/ChangeLog:\n\n\tPR target/101248\n\t* config/i386/sse.md\n\t(avx512f_sfixupimm<mode><sd_maskz_name><round_saeonly_name>):\n\tRefined to ..\n\t(avx512f_sfixupimm<mode><maskz_scalar_name><round_saeonly_name>):\n\tthis.\n\t(avx512f_sfixupimm<mode>_mask<round_saeonly_name>\"): Refined.\n\t* config/i386/subst.md (maskz_scalar): New define_subst.\n\t(maskz_scalar_name): New subst_attr.\n\t(maskz_scalar_op5): Ditto.\n\t(round_saeonly_maskz_scalar_op5): Ditto.\n\t(round_saeonly_maskz_scalar_operand5): Ditto.\n\ngcc/testsuite/ChangeLog\n\n\tPR target/101248\n\t* gcc.target/i386/pr101248.c: New test.", "tree": {"sha": "ddd6233e01166f13b02024ad1ec9e74e361513a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ddd6233e01166f13b02024ad1ec9e74e361513a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed392e9db434898eccec81edd85323d21d555fe9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed392e9db434898eccec81edd85323d21d555fe9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed392e9db434898eccec81edd85323d21d555fe9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed392e9db434898eccec81edd85323d21d555fe9/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "652abe22205f268c90b3b15f28c56c030ef68a34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/652abe22205f268c90b3b15f28c56c030ef68a34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/652abe22205f268c90b3b15f28c56c030ef68a34"}], "stats": {"total": 152, "additions": 148, "deletions": 4}, "files": [{"sha": "d3f5a74f7638cc3b2324aa259a13576df34e8a20", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed392e9db434898eccec81edd85323d21d555fe9/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed392e9db434898eccec81edd85323d21d555fe9/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=ed392e9db434898eccec81edd85323d21d555fe9", "patch": "@@ -9942,7 +9942,7 @@\n   DONE;\n })\n \n-(define_insn \"avx512f_sfixupimm<mode><sd_maskz_name><round_saeonly_name>\"\n+(define_insn \"avx512f_sfixupimm<mode><maskz_scalar_name><round_saeonly_name>\"\n   [(set (match_operand:VF_128 0 \"register_operand\" \"=v\")\n \t(vec_merge:VF_128\n           (unspec:VF_128\n@@ -9951,10 +9951,10 @@\n \t     (match_operand:<sseintvecmode> 3 \"<round_saeonly_nimm_scalar_predicate>\" \"<round_saeonly_constraint>\")\n \t     (match_operand:SI 4 \"const_0_to_255_operand\")]\n \t    UNSPEC_FIXUPIMM)\n-\t  (match_dup 1)\n+\t  (match_dup 2)\n \t  (const_int 1)))]\n    \"TARGET_AVX512F\"\n-   \"vfixupimm<ssescalarmodesuffix>\\t{%4, <round_saeonly_sd_mask_op5>%3, %2, %0<sd_mask_op5>|%0<sd_mask_op5>, %2, %<iptr>3<round_saeonly_sd_mask_op5>, %4}\";\n+   \"vfixupimm<ssescalarmodesuffix>\\t{%4, <round_saeonly_maskz_scalar_op5>%3, %2, %0<maskz_scalar_op5>|%0<maskz_scalar_op5>, %2, %<iptr>3<round_saeonly_maskz_scalar_op5>, %4}\";\n    [(set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<ssescalarmode>\")])\n \n@@ -9968,7 +9968,7 @@\n \t\t(match_operand:<sseintvecmode> 3 \"<round_saeonly_nimm_scalar_predicate>\" \"<round_saeonly_constraint>\")\n \t\t(match_operand:SI 4 \"const_0_to_255_operand\")]\n \t       UNSPEC_FIXUPIMM)\n-\t    (match_dup 1)\n+\t    (match_dup 2)\n \t    (const_int 1))\n \t  (match_dup 1)\n \t  (match_operand:<avx512fmaskmode> 5 \"register_operand\" \"Yk\")))]"}, {"sha": "6614e044857704f35c7d15a5b206a845ab5f3b66", "filename": "gcc/config/i386/subst.md", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed392e9db434898eccec81edd85323d21d555fe9/gcc%2Fconfig%2Fi386%2Fsubst.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed392e9db434898eccec81edd85323d21d555fe9/gcc%2Fconfig%2Fi386%2Fsubst.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsubst.md?ref=ed392e9db434898eccec81edd85323d21d555fe9", "patch": "@@ -117,6 +117,25 @@\n \t (match_operand:<avx512fmaskmode> 3 \"register_operand\" \"Yk\")))\n ])\n \n+(define_subst_attr \"maskz_scalar_name\" \"maskz_scalar\" \"\" \"_maskz_1\")\n+(define_subst_attr \"maskz_scalar_op5\" \"maskz_scalar\" \"\" \"%{%6%}%N5\")\n+\n+(define_subst \"maskz_scalar\"\n+  [(set (match_operand:SUBST_V 0)\n+\t(vec_merge:SUBST_V\n+\t  (match_operand:SUBST_V 1)\n+\t  (match_operand:SUBST_V 2)\n+\t  (const_int 1)))]\n+  \"TARGET_AVX512F\"\n+  [(set (match_dup 0)\n+\t(vec_merge:SUBST_V\n+\t  (vec_merge:SUBST_V\n+\t    (match_dup 1)\n+\t    (match_operand:SUBST_V 3 \"const0_operand\" \"C\")\n+\t    (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk\"))\n+\t  (match_dup 2)\n+\t  (const_int 1)))])\n+\n (define_subst_attr \"round_name\" \"round\" \"\" \"_round\")\n (define_subst_attr \"round_mask_operand2\" \"mask\" \"%R2\" \"%R4\")\n (define_subst_attr \"round_mask_operand3\" \"mask\" \"%R3\" \"%R5\")\n@@ -163,6 +182,7 @@\n (define_subst_attr \"round_saeonly_mask_operand3\" \"mask\" \"%r3\" \"%r5\")\n (define_subst_attr \"round_saeonly_mask_operand4\" \"mask\" \"%r4\" \"%r6\")\n (define_subst_attr \"round_saeonly_mask_scalar_merge_operand4\" \"mask_scalar_merge\" \"%r4\" \"%r5\")\n+(define_subst_attr \"round_saeonly_maskz_scalar_operand5\" \"maskz_scalar\" \"%r5\" \"%r7\")\n (define_subst_attr \"round_saeonly_sd_mask_operand5\" \"sd\" \"%r5\" \"%r7\")\n (define_subst_attr \"round_saeonly_op2\" \"round_saeonly\" \"\" \"%r2\")\n (define_subst_attr \"round_saeonly_op3\" \"round_saeonly\" \"\" \"%r3\")\n@@ -175,6 +195,7 @@\n (define_subst_attr \"round_saeonly_mask_op4\" \"round_saeonly\" \"\" \"<round_saeonly_mask_operand4>\")\n (define_subst_attr \"round_saeonly_mask_scalar_merge_op4\" \"round_saeonly\" \"\" \"<round_saeonly_mask_scalar_merge_operand4>\")\n (define_subst_attr \"round_saeonly_sd_mask_op5\" \"round_saeonly\" \"\" \"<round_saeonly_sd_mask_operand5>\")\n+(define_subst_attr \"round_saeonly_maskz_scalar_op5\" \"round_saeonly\" \"\" \"<round_saeonly_maskz_scalar_operand5>\")\n (define_subst_attr \"round_saeonly_mask_arg3\" \"round_saeonly\" \"\" \", operands[<mask_expand_op3>]\")\n (define_subst_attr \"round_saeonly_constraint\" \"round_saeonly\" \"vm\" \"v\")\n (define_subst_attr \"round_saeonly_constraint2\" \"round_saeonly\" \"m\" \"v\")"}, {"sha": "f5ac94f5769500a7f369b860eebbc856848840d6", "filename": "gcc/testsuite/gcc.target/i386/pr101248.c", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed392e9db434898eccec81edd85323d21d555fe9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr101248.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed392e9db434898eccec81edd85323d21d555fe9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr101248.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr101248.c?ref=ed392e9db434898eccec81edd85323d21d555fe9", "patch": "@@ -0,0 +1,123 @@\n+/* PR target/101248  */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512vl -std=gnu99\" } */\n+/* { dg-require-effective-target avx512vl } */\n+/* { dg-require-effective-target c99_runtime } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 128\n+#define AVX512F_LEN_HALF 128\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+#include \"math_m_pi.h\"\n+#include \"float.h\"\n+\n+\n+static void\n+CALC (double *r, double dest, double src, long long tbl)\n+{\n+  switch (tbl & 0xf)\n+    {\n+    case 0:\n+      *r = dest;\n+      break;\n+    case 1:\n+      *r = src;\n+      break;\n+    case 2:\n+      *r = signbit (src) ? -NAN : NAN;\n+      break;\n+    case 3:\n+      *r = -NAN;\n+      break;\n+    case 4:\n+      *r = -INFINITY;\n+      break;\n+    case 5:\n+      *r = INFINITY;\n+      break;\n+    case 6:\n+      *r = signbit (src) ? -INFINITY : INFINITY;\n+      break;\n+    case 7:\n+      *r = 1.0 / -INFINITY;\n+      break;\n+    case 8:\n+      *r = 0.0;\n+      break;\n+    case 9:\n+      *r = -1.0;\n+      break;\n+    case 10:\n+      *r = 1.0;\n+      break;\n+    case 11:\n+      *r = 1.0 / 2.0;\n+      break;\n+    case 12:\n+      *r = 90.0;\n+      break;\n+    case 13:\n+      *r = M_PI_2;\n+      break;\n+    case 14:\n+      *r = DBL_MAX;\n+      break;\n+    case 15:\n+      *r = -DBL_MAX;\n+      break;\n+    default:\n+      abort ();\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i, j;\n+  UNION_TYPE (AVX512F_LEN, d) res1, res2, res3, s1;\n+  UNION_TYPE (AVX512F_LEN, i_q) s2;\n+  double res_ref[SIZE];\n+\n+\n+  float vals[2] = { -10, 10 };\n+  int controls[8] = {0, 0x11111111, 0x77777777, 0x88888888,\n+    0x99999999, 0xaaaaaaaa, 0xbbbbbbbb, 0xcccccccc};\n+\n+  MASK_TYPE mask = 1;\n+\n+  for (i = 0; i < 2; i++)\n+    {\n+      for (j = 0; j < SIZE; j++)\n+\t{\n+\t  s1.a[j] = vals[i];\n+\t  s2.a[j] = controls[j];\n+\t  res1.a[j] = DEFAULT_VALUE;\n+\t  res2.a[j] = DEFAULT_VALUE;\n+\t  res3.a[j] = DEFAULT_VALUE;\n+\n+\t  CALC (&res_ref[j], res1.a[j], s1.a[j], s2.a[j]);\n+\t}\n+\n+      res1.x = INTRINSIC (_fixupimm_pd) (res1.x, s1.x, s2.x, 0);\n+      res2.x = INTRINSIC (_mask_fixupimm_pd) (res2.x, mask, s1.x, s2.x, 0);\n+      res3.x = INTRINSIC (_maskz_fixupimm_pd) (mask, res3.x, s1.x, s2.x, 0);\n+\n+      if (UNION_CHECK (AVX512F_LEN, d) (res1, res_ref))\n+\tabort ();\n+\n+      MASK_MERGE(d) (res_ref, mask, SIZE);\n+      if (UNION_CHECK (AVX512F_LEN, d) (res2, res_ref))\n+\tabort ();\n+      MASK_ZERO(d) (res_ref, mask, SIZE);\n+      if (UNION_CHECK (AVX512F_LEN, d) (res3, res_ref))\n+\tabort ();\n+    }\n+}\n+\n+void\n+test_256 (void)\n+{}"}]}