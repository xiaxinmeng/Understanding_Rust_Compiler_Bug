{"sha": "8d0d1915d9f96a4c9d9418b21b38cfa9c386d7a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQwZDE5MTVkOWY5NmE0YzlkOTQxOGIyMWIzOGNmYTljMzg2ZDdhMw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2012-07-02T19:14:23Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2012-07-02T19:14:23Z"}, "message": "re PR c++/53524 (Bogus enum comparison warning)\n\n\tPR c++/53524\ngcc/cp/\n\t* call.c (build_conditional_expr_1): Don't warn about comparison of\n\ttwo enumerators before their enumeration is complete.\n\t(build_new_op_1): Call decay_conversion before warn_logical_operator.\n\t* decl.c (build_enumerator): Set DECL_CONTEXT of an enumerator to\n\tits enumeration.\n\t* decl2.c (mark_used): Call used_types_insert for enums.\n\t* semantics.c (finish_id_expression): Don't decay CONST_DECL.\n\t(finish_member_declaration): Don't change DECL_CONTEXT of enumerators.\n\t* class.c (check_field_decls): Don't change DECL_CONTEXT of enums.\n\t* typeck.c (convert_for_assignment): Don't decay CONST_DECL.\n\t(build_class_member_access_expr): Look through unscoped enums.\n\t* search.c (context_for_name_lookup): Look through unscoped enums.\n\t* pt.c (tsubst_copy_and_build): Don't decay CONST_DECL.\n\t(tsubst_copy): Use DECL_CONTEXT to find the enumeration.\n\t* tree.c (decl_linkage): Likewise.\n\t* cvt.c (ocp_convert): Check decayed expr for enum range warning.\ngcc/c-family/\n\t* c-common.c (get_priority): Call default_conversion.\n\nFrom-SVN: r189174", "tree": {"sha": "8becd43c0137d4c13ec1df45fe08c64cceb0a023", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8becd43c0137d4c13ec1df45fe08c64cceb0a023"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d0d1915d9f96a4c9d9418b21b38cfa9c386d7a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d0d1915d9f96a4c9d9418b21b38cfa9c386d7a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d0d1915d9f96a4c9d9418b21b38cfa9c386d7a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d0d1915d9f96a4c9d9418b21b38cfa9c386d7a3/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "531b10fcb0fe5c86576bda5fd201d8acc7db4525", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/531b10fcb0fe5c86576bda5fd201d8acc7db4525", "html_url": "https://github.com/Rust-GCC/gccrs/commit/531b10fcb0fe5c86576bda5fd201d8acc7db4525"}], "stats": {"total": 144, "additions": 90, "deletions": 54}, "files": [{"sha": "8b7c4b789b12317939134ac80353a6c9954e9138", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0d1915d9f96a4c9d9418b21b38cfa9c386d7a3/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0d1915d9f96a4c9d9418b21b38cfa9c386d7a3/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=8d0d1915d9f96a4c9d9418b21b38cfa9c386d7a3", "patch": "@@ -1,3 +1,8 @@\n+2012-07-02  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/53524\n+\t* c-common.c (get_priority): Call default_conversion.\n+\n 2012-07-01  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* c-pch.c (c_common_write_pch): Remove unused variables."}, {"sha": "2a528e22ff9014bcc7ef3d7868f4072a93eb10cb", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0d1915d9f96a4c9d9418b21b38cfa9c386d7a3/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0d1915d9f96a4c9d9418b21b38cfa9c386d7a3/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=8d0d1915d9f96a4c9d9418b21b38cfa9c386d7a3", "patch": "@@ -6587,11 +6587,12 @@ get_priority (tree args, bool is_destructor)\n     }\n \n   arg = TREE_VALUE (args);\n+  arg = default_conversion (arg);\n   if (!host_integerp (arg, /*pos=*/0)\n       || !INTEGRAL_TYPE_P (TREE_TYPE (arg)))\n     goto invalid;\n \n-  pri = tree_low_cst (TREE_VALUE (args), /*pos=*/0);\n+  pri = tree_low_cst (arg, /*pos=*/0);\n   if (pri < 0 || pri > MAX_INIT_PRIORITY)\n     goto invalid;\n "}, {"sha": "448dd5caa8ec04ecfe6d9e6d84e53f14aac66212", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0d1915d9f96a4c9d9418b21b38cfa9c386d7a3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0d1915d9f96a4c9d9418b21b38cfa9c386d7a3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8d0d1915d9f96a4c9d9418b21b38cfa9c386d7a3", "patch": "@@ -1,3 +1,23 @@\n+2012-07-02  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/53524\n+\t* call.c (build_conditional_expr_1): Don't warn about comparison of\n+\ttwo enumerators before their enumeration is complete.\n+\t(build_new_op_1): Call decay_conversion before warn_logical_operator.\n+\t* decl.c (build_enumerator): Set DECL_CONTEXT of an enumerator to\n+\tits enumeration.\n+\t* decl2.c (mark_used): Call used_types_insert for enums.\n+\t* semantics.c (finish_id_expression): Don't decay CONST_DECL.\n+\t(finish_member_declaration): Don't change DECL_CONTEXT of enumerators.\n+\t* class.c (check_field_decls): Don't change DECL_CONTEXT of enums.\n+\t* typeck.c (convert_for_assignment): Don't decay CONST_DECL.\n+\t(build_class_member_access_expr): Look through unscoped enums.\n+\t* search.c (context_for_name_lookup): Look through unscoped enums.\n+\t* pt.c (tsubst_copy_and_build): Don't decay CONST_DECL.\n+\t(tsubst_copy): Use DECL_CONTEXT to find the enumeration.\n+\t* tree.c (decl_linkage): Likewise.\n+\t* cvt.c (ocp_convert): Check decayed expr for enum range warning.\n+\n 2012-06-29  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* Make-lang.in: Remove tree-mudflap.o from CXX_AND_OBJCXX_OBJS."}, {"sha": "72394f4af60f6aed2c7aae8a95bfc7bf3b887d33", "filename": "gcc/cp/call.c", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0d1915d9f96a4c9d9418b21b38cfa9c386d7a3/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0d1915d9f96a4c9d9418b21b38cfa9c386d7a3/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=8d0d1915d9f96a4c9d9418b21b38cfa9c386d7a3", "patch": "@@ -4365,6 +4365,7 @@ build_conditional_expr_1 (tree arg1, tree arg2, tree arg3,\n   struct z_candidate *candidates = 0;\n   struct z_candidate *cand;\n   void *p;\n+  tree orig_arg2, orig_arg3;\n \n   /* As a G++ extension, the second argument to the conditional can be\n      omitted.  (So that `a ? : c' is roughly equivalent to `a ? a :\n@@ -4404,6 +4405,8 @@ build_conditional_expr_1 (tree arg1, tree arg2, tree arg3,\n      array-to-pointer (_conv.array_), and function-to-pointer\n      (_conv.func_) standard conversions are performed on the second\n      and third operands.  */\n+  orig_arg2 = arg2;\n+  orig_arg3 = arg3;\n   arg2_type = unlowered_expr_type (arg2);\n   arg3_type = unlowered_expr_type (arg3);\n   if (VOID_TYPE_P (arg2_type) || VOID_TYPE_P (arg3_type))\n@@ -4701,7 +4704,12 @@ build_conditional_expr_1 (tree arg1, tree arg2, tree arg3,\n       if (TREE_CODE (arg2_type) == ENUMERAL_TYPE\n \t  && TREE_CODE (arg3_type) == ENUMERAL_TYPE)\n         {\n-          if (complain & tf_warning)\n+\t  if (TREE_CODE (orig_arg2) == CONST_DECL\n+\t      && TREE_CODE (orig_arg3) == CONST_DECL\n+\t      && DECL_CONTEXT (orig_arg2) == DECL_CONTEXT (orig_arg3))\n+\t    /* Two enumerators from the same enumeration can have different\n+\t       types when the enumeration is still being defined.  */;\n+          else if (complain & tf_warning)\n             warning (OPT_Wenum_compare, \n                      \"enumeral mismatch in conditional expression: %qT vs %qT\",\n                      arg2_type, arg3_type);\n@@ -5221,16 +5229,20 @@ build_new_op_1 (location_t loc, enum tree_code code, int flags, tree arg1,\n \n \t  if (arg2)\n \t    {\n+\t      conv = cand->convs[1];\n+\t      if (conv->kind == ck_ref_bind)\n+\t\tconv = next_conversion (conv);\n+\t      else\n+\t\targ2 = decay_conversion (arg2, complain);\n+\n \t      /* We need to call warn_logical_operator before\n-\t\t converting arg2 to a boolean_type.  */\n+\t\t converting arg2 to a boolean_type, but after\n+\t\t decaying an enumerator to its value.  */\n \t      if (complain & tf_warning)\n \t\twarn_logical_operator (loc, code, boolean_type_node,\n \t\t\t\t       code_orig_arg1, arg1,\n \t\t\t\t       code_orig_arg2, arg2);\n \n-\t      conv = cand->convs[1];\n-\t      if (conv->kind == ck_ref_bind)\n-\t\tconv = next_conversion (conv);\n \t      arg2 = convert_like (conv, arg2, complain);\n \t    }\n \t  if (arg3)"}, {"sha": "264258c1dbc1a73495686303aedbd8c51cbdff6f", "filename": "gcc/cp/class.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0d1915d9f96a4c9d9418b21b38cfa9c386d7a3/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0d1915d9f96a4c9d9418b21b38cfa9c386d7a3/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=8d0d1915d9f96a4c9d9418b21b38cfa9c386d7a3", "patch": "@@ -3114,7 +3114,8 @@ check_field_decls (tree t, tree *access_decls,\n \n       /* If we've gotten this far, it's a data member, possibly static,\n \t or an enumerator.  */\n-      DECL_CONTEXT (x) = t;\n+      if (TREE_CODE (x) != CONST_DECL)\n+\tDECL_CONTEXT (x) = t;\n \n       /* When this goes into scope, it will be a non-local reference.  */\n       DECL_NONLOCAL (x) = 1;"}, {"sha": "9550f1580bb5cf0ad758bb1bd3dd6241a8446374", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0d1915d9f96a4c9d9418b21b38cfa9c386d7a3/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0d1915d9f96a4c9d9418b21b38cfa9c386d7a3/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=8d0d1915d9f96a4c9d9418b21b38cfa9c386d7a3", "patch": "@@ -741,8 +741,8 @@ ocp_convert (tree type, tree expr, int convtype, int flags,\n \t     values. Otherwise, the resulting enumeration value is\n \t     unspecified.  */\n \t  if ((complain & tf_warning)\n-\t      && TREE_CODE (expr) == INTEGER_CST\n-\t      && !int_fits_type_p (expr, ENUM_UNDERLYING_TYPE (type)))\n+\t      && TREE_CODE (e) == INTEGER_CST\n+\t      && !int_fits_type_p (e, ENUM_UNDERLYING_TYPE (type)))\n \t    warning_at (loc, OPT_Wconversion, \n \t\t\t\"the result of the conversion is unspecified because \"\n \t\t\t\"%qE is outside the range of type %qT\","}, {"sha": "18beaa9fc562f3ff8f7aba92bb89b9ccc7fedff9", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0d1915d9f96a4c9d9418b21b38cfa9c386d7a3/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0d1915d9f96a4c9d9418b21b38cfa9c386d7a3/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=8d0d1915d9f96a4c9d9418b21b38cfa9c386d7a3", "patch": "@@ -12570,7 +12570,7 @@ incremented enumerator value is too large for %<long%>\");\n        a function could mean local to a class method.  */\n     decl = build_decl (loc, CONST_DECL, name, type);\n   \n-  DECL_CONTEXT (decl) = FROB_CONTEXT (context);\n+  DECL_CONTEXT (decl) = enumtype;\n   TREE_CONSTANT (decl) = 1;\n   TREE_READONLY (decl) = 1;\n   DECL_INITIAL (decl) = value;"}, {"sha": "cbb1053b6ed25a924caf85c15dcab7d71cacb92f", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0d1915d9f96a4c9d9418b21b38cfa9c386d7a3/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0d1915d9f96a4c9d9418b21b38cfa9c386d7a3/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=8d0d1915d9f96a4c9d9418b21b38cfa9c386d7a3", "patch": "@@ -4205,6 +4205,10 @@ mark_used (tree decl)\n   if (DECL_CLONED_FUNCTION_P (decl))\n     TREE_USED (DECL_CLONED_FUNCTION (decl)) = 1;\n \n+  /* Mark enumeration types as used.  */\n+  if (TREE_CODE (decl) == CONST_DECL)\n+    used_types_insert (DECL_CONTEXT (decl));\n+\n   if (TREE_CODE (decl) == FUNCTION_DECL\n       && DECL_DELETED_FN (decl))\n     {"}, {"sha": "f8f416a3b9ecac8628277dc4366cb99f3d334e9f", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0d1915d9f96a4c9d9418b21b38cfa9c386d7a3/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0d1915d9f96a4c9d9418b21b38cfa9c386d7a3/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=8d0d1915d9f96a4c9d9418b21b38cfa9c386d7a3", "patch": "@@ -12128,7 +12128,7 @@ tsubst_copy (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t   When we instantiate f<7>::S::g(), say, lookup_name is not\n \t   clever enough to find f<7>::a.  */\n \tenum_type\n-\t  = tsubst_aggr_type (TREE_TYPE (t), args, complain, in_decl,\n+\t  = tsubst_aggr_type (DECL_CONTEXT (t), args, complain, in_decl,\n \t\t\t      /*entering_scope=*/0);\n \n \tfor (v = TYPE_VALUES (enum_type);\n@@ -14385,17 +14385,6 @@ tsubst_copy_and_build (tree t,\n \treturn stmt_expr;\n       }\n \n-    case CONST_DECL:\n-      t = tsubst_copy (t, args, complain, in_decl);\n-      /* As in finish_id_expression, we resolve enumeration constants\n-\t to their underlying values.  */\n-      if (TREE_CODE (t) == CONST_DECL && !processing_template_decl)\n-\t{\n-\t  used_types_insert (TREE_TYPE (t));\n-\t  return DECL_INITIAL (t);\n-\t}\n-      return t;\n-\n     case LAMBDA_EXPR:\n       {\n \ttree r = build_lambda_expr ();"}, {"sha": "d112c05713c49f4c9e74ff35c6b94873dac25cce", "filename": "gcc/cp/search.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0d1915d9f96a4c9d9418b21b38cfa9c386d7a3/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0d1915d9f96a4c9d9418b21b38cfa9c386d7a3/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=8d0d1915d9f96a4c9d9418b21b38cfa9c386d7a3", "patch": "@@ -579,7 +579,8 @@ context_for_name_lookup (tree decl)\n      declared.  */\n   tree context = DECL_CONTEXT (decl);\n \n-  while (context && TYPE_P (context) && ANON_AGGR_TYPE_P (context))\n+  while (context && TYPE_P (context)\n+\t && (ANON_AGGR_TYPE_P (context) || UNSCOPED_ENUM_P (context)))\n     context = TYPE_CONTEXT (context);\n   if (!context)\n     context = global_namespace;\n@@ -623,9 +624,7 @@ dfs_access_in_type (tree binfo, void *data)\n   else\n     {\n       /* First, check for an access-declaration that gives us more\n-\t access to the DECL.  The CONST_DECL for an enumeration\n-\t constant will not have DECL_LANG_SPECIFIC, and thus no\n-\t DECL_ACCESS.  */\n+\t access to the DECL.  */\n       if (DECL_LANG_SPECIFIC (decl) && !DECL_DISCRIMINATOR_P (decl))\n \t{\n \t  tree decl_access = purpose_member (type, DECL_ACCESS (decl));"}, {"sha": "f1a94c118725de71f4a1ab643fce75966582ebb2", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0d1915d9f96a4c9d9418b21b38cfa9c386d7a3/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0d1915d9f96a4c9d9418b21b38cfa9c386d7a3/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=8d0d1915d9f96a4c9d9418b21b38cfa9c386d7a3", "patch": "@@ -2631,8 +2631,10 @@ finish_member_declaration (tree decl)\n       TREE_PROTECTED (DECL_TEMPLATE_RESULT (decl)) = TREE_PROTECTED (decl);\n     }\n \n-  /* Mark the DECL as a member of the current class.  */\n-  DECL_CONTEXT (decl) = current_class_type;\n+  /* Mark the DECL as a member of the current class, unless it's\n+     a member of an enumeration.  */\n+  if (TREE_CODE (decl) != CONST_DECL)\n+    DECL_CONTEXT (decl) = current_class_type;\n \n   /* Check for bare parameter packs in the member variable declaration.  */\n   if (TREE_CODE (decl) == FIELD_DECL)\n@@ -3060,18 +3062,6 @@ finish_id_expression (tree id_expression,\n \t}\n       return r;\n     }\n-  /* Similarly, we resolve enumeration constants to their\n-     underlying values.  */\n-  else if (TREE_CODE (decl) == CONST_DECL)\n-    {\n-      *idk = CP_ID_KIND_NONE;\n-      if (!processing_template_decl)\n-\t{\n-\t  used_types_insert (TREE_TYPE (decl));\n-\t  return DECL_INITIAL (decl);\n-\t}\n-      return decl;\n-    }\n   else\n     {\n       bool dependent_p;\n@@ -3100,6 +3090,9 @@ finish_id_expression (tree id_expression,\n       if (!processing_template_decl)\n \t/* No names are dependent outside a template.  */\n \t;\n+      else if (TREE_CODE (decl) == CONST_DECL)\n+\t/* We don't want to treat enumerators as dependent.  */\n+\t;\n       /* A template-id where the name of the template was not resolved\n \t is definitely dependent.  */\n       else if (TREE_CODE (decl) == TEMPLATE_ID_EXPR\n@@ -3234,15 +3227,17 @@ finish_id_expression (tree id_expression,\n \t marked either below or after overload resolution.  */\n       if (TREE_CODE (decl) == VAR_DECL\n \t  || TREE_CODE (decl) == PARM_DECL\n+\t  || TREE_CODE (decl) == CONST_DECL\n \t  || TREE_CODE (decl) == RESULT_DECL)\n \tmark_used (decl);\n \n       /* Only certain kinds of names are allowed in constant\n-\t expression.  Enumerators and template parameters have already\n+\t expression.  Template parameters have already\n \t been handled above.  */\n       if (! error_operand_p (decl)\n \t  && integral_constant_expression_p\n \t  && ! decl_constant_var_p (decl)\n+\t  && TREE_CODE (decl) != CONST_DECL\n \t  && ! builtin_valid_in_constant_expr_p (decl))\n \t{\n \t  if (!allow_non_integral_constant_expression_p)"}, {"sha": "a03f8459da804d8d37de2b0d870a2d1fe7d86031", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0d1915d9f96a4c9d9418b21b38cfa9c386d7a3/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0d1915d9f96a4c9d9418b21b38cfa9c386d7a3/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=8d0d1915d9f96a4c9d9418b21b38cfa9c386d7a3", "patch": "@@ -3212,7 +3212,7 @@ decl_linkage (tree decl)\n   /* Linkage of a CONST_DECL depends on the linkage of the enumeration\n      type.  */\n   if (TREE_CODE (decl) == CONST_DECL)\n-    return decl_linkage (TYPE_NAME (TREE_TYPE (decl)));\n+    return decl_linkage (TYPE_NAME (DECL_CONTEXT (decl)));\n \n   /* Some things that are not TREE_PUBLIC have external linkage, too.\n      For example, on targets that don't have weak symbols, we make all"}, {"sha": "3bc3ead187a40070b66c30a0a44089a37ea4d3e8", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0d1915d9f96a4c9d9418b21b38cfa9c386d7a3/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0d1915d9f96a4c9d9418b21b38cfa9c386d7a3/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=8d0d1915d9f96a4c9d9418b21b38cfa9c386d7a3", "patch": "@@ -2199,7 +2199,7 @@ build_class_member_access_expr (tree object, tree member,\n   /* If MEMBER is from an anonymous aggregate, MEMBER_SCOPE will\n      presently be the anonymous union.  Go outwards until we find a\n      type related to OBJECT_TYPE.  */\n-  while (ANON_AGGR_TYPE_P (member_scope)\n+  while ((ANON_AGGR_TYPE_P (member_scope) || UNSCOPED_ENUM_P (member_scope))\n \t && !same_type_ignoring_top_level_qualifiers_p (member_scope,\n \t\t\t\t\t\t\tobject_type))\n     member_scope = TYPE_CONTEXT (member_scope);\n@@ -7582,10 +7582,6 @@ convert_for_assignment (tree type, tree rhs,\n       return error_mark_node;\n     }\n \n-  /* Simplify the RHS if possible.  */\n-  if (TREE_CODE (rhs) == CONST_DECL)\n-    rhs = DECL_INITIAL (rhs);\n-\n   if (c_dialect_objc ())\n     {\n       int parmno;"}, {"sha": "5d5a2ce4cf81babfc8693b66659184d0e62827d0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0d1915d9f96a4c9d9418b21b38cfa9c386d7a3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0d1915d9f96a4c9d9418b21b38cfa9c386d7a3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8d0d1915d9f96a4c9d9418b21b38cfa9c386d7a3", "patch": "@@ -1,3 +1,11 @@\n+2012-07-02  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/53524\n+\t* g++.dg/template/enum7.C: New.\n+\t* g++.dg/other/ptrmem10.C: Adjust.\n+\t* g++.dg/other/ptrmem11.C: Adjust.\n+\t* g++.dg/cpp0x/scoped_enum.C: Adjust.\n+\n 2012-07-02  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* gcc.dg/tree-ssa/pr36881.c: Fix test case to not expand as bit tests."}, {"sha": "4b0317cfbe023cd50acbe6b8d2f493b503800927", "filename": "gcc/testsuite/g++.dg/cpp0x/scoped_enum.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0d1915d9f96a4c9d9418b21b38cfa9c386d7a3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fscoped_enum.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0d1915d9f96a4c9d9418b21b38cfa9c386d7a3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fscoped_enum.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fscoped_enum.C?ref=8d0d1915d9f96a4c9d9418b21b38cfa9c386d7a3", "patch": "@@ -13,7 +13,7 @@ enum struct Color2 {\n   Blue,\n   Indigo = Green + 2,\n   Violet,\n-  Red // { dg-error \"redefinition\" }\n+  Red // { dg-error \"redeclaration\" }\n };\n \n enum Color {"}, {"sha": "ff8c8434115b72a1936379b2d1b75662debe7ba5", "filename": "gcc/testsuite/g++.dg/other/ptrmem10.C", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0d1915d9f96a4c9d9418b21b38cfa9c386d7a3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fptrmem10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0d1915d9f96a4c9d9418b21b38cfa9c386d7a3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fptrmem10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fptrmem10.C?ref=8d0d1915d9f96a4c9d9418b21b38cfa9c386d7a3", "patch": "@@ -3,7 +3,7 @@\n \n template <class C, void (C::*M) ()>\n static\n-void foo(void *obj)\t\t// { dg-message \"note\" }\n+void foo(void *obj)\n {\n   C *p = static_cast<C*>(obj);\n   (p->*M)();\n@@ -13,8 +13,7 @@ template <class C>\n static void\n bar(C *c, void (C::*m) ())\n {\n-  foo<C,m>((void *)c);// { dg-error \"(not a valid template arg|pointer-to-member|no matching fun|could not convert)\" }\n-  // { dg-message \"candidate\" \"candidate note\" { target *-*-* } 16 }\n+  foo<C,m>((void *)c);// { dg-error \"(not a valid template arg|pointer-to-member|no matching fun|could not convert|constant)\" }\n }\n \n struct S"}, {"sha": "e18abddd677a1397cc7864f6bf950ab65de29102", "filename": "gcc/testsuite/g++.dg/other/ptrmem11.C", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0d1915d9f96a4c9d9418b21b38cfa9c386d7a3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fptrmem11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0d1915d9f96a4c9d9418b21b38cfa9c386d7a3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fptrmem11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fptrmem11.C?ref=8d0d1915d9f96a4c9d9418b21b38cfa9c386d7a3", "patch": "@@ -5,7 +5,7 @@ struct A {};\n \n template <int A::* p>\n int\n-foo(A* q)\t\t\t// { dg-message \"note\" }\n+foo(A* q)\n {\n   return q->*p;\n }\n@@ -14,8 +14,7 @@ template <typename T>\n int\n bar(int T::* p)\n {\n-  return foo<p>(0);// { dg-error \"(not a valid template arg|no matching func|pointer-to-member|could not convert)\" }\n-  // { dg-message \"candidate\" \"candidate note\" { target *-*-* } 17 }\n+  return foo<p>(0);// { dg-error \"(not a valid template arg|no matching func|pointer-to-member|could not convert|constant)\" }\n }\n \n int i = bar<A>(0);"}, {"sha": "8c464a795d82cee405e9fb6bd4a2f3aed6d3e83f", "filename": "gcc/testsuite/g++.dg/template/enum7.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0d1915d9f96a4c9d9418b21b38cfa9c386d7a3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fenum7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0d1915d9f96a4c9d9418b21b38cfa9c386d7a3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fenum7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fenum7.C?ref=8d0d1915d9f96a4c9d9418b21b38cfa9c386d7a3", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/53524\n+\n+template <class T> struct A { enum EA { ea }; };\n+template <class T, class U> struct B {\n+  enum EB { eb1 = A<T>::ea, eb2 = A<U>::ea, eb3 = 0 ? eb1 : eb2  };\n+};\n+\n+B<int,char> b;"}]}