{"sha": "2a8428f804d9d2dfa6de65d4158f8930903405b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmE4NDI4ZjgwNGQ5ZDJkZmE2ZGU2NWQ0MTU4Zjg5MzA5MDM0MDViNw==", "commit": {"author": {"name": "Matthias Klose", "email": "doko@ubuntu.com", "date": "2009-04-26T14:11:58Z"}, "committer": {"name": "Matthias Klose", "email": "doko@gcc.gnu.org", "date": "2009-04-26T14:11:58Z"}, "message": "aot-compile.in: Print diagnostics for malformed or invalid class files.\n\n2009-04-26  Matthias Klose <doko@ubuntu.com>\n\n        * contrib/aot-compile.in: Print diagnostics for malformed or invalid\n        class files.\n        * contrib/generate-cacerts.pl.in: New.\n        * configure.ac (AC_CONFIG_FILES): Add generate-cacerts.pl.\n\nFrom-SVN: r146802", "tree": {"sha": "aec298c103ba694cc06634e6b17402159200b4eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aec298c103ba694cc06634e6b17402159200b4eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a8428f804d9d2dfa6de65d4158f8930903405b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a8428f804d9d2dfa6de65d4158f8930903405b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a8428f804d9d2dfa6de65d4158f8930903405b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a8428f804d9d2dfa6de65d4158f8930903405b7/comments", "author": {"login": "doko42", "id": 11258518, "node_id": "MDQ6VXNlcjExMjU4NTE4", "avatar_url": "https://avatars.githubusercontent.com/u/11258518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/doko42", "html_url": "https://github.com/doko42", "followers_url": "https://api.github.com/users/doko42/followers", "following_url": "https://api.github.com/users/doko42/following{/other_user}", "gists_url": "https://api.github.com/users/doko42/gists{/gist_id}", "starred_url": "https://api.github.com/users/doko42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/doko42/subscriptions", "organizations_url": "https://api.github.com/users/doko42/orgs", "repos_url": "https://api.github.com/users/doko42/repos", "events_url": "https://api.github.com/users/doko42/events{/privacy}", "received_events_url": "https://api.github.com/users/doko42/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4b97723d58875b0056b9158260d4902dcd261c7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b97723d58875b0056b9158260d4902dcd261c7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b97723d58875b0056b9158260d4902dcd261c7b"}], "stats": {"total": 135, "additions": 129, "deletions": 6}, "files": [{"sha": "878797a96fa4cde88ee74213994c8831015d26a8", "filename": "libjava/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a8428f804d9d2dfa6de65d4158f8930903405b7/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a8428f804d9d2dfa6de65d4158f8930903405b7/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=2a8428f804d9d2dfa6de65d4158f8930903405b7", "patch": "@@ -1,3 +1,10 @@\n+2009-04-26  Matthias Klose <doko@ubuntu.com>\n+\n+\t* contrib/aot-compile.in: Print diagnostics for malformed or invalid\n+\tclass files.\n+\t* contrib/generate-cacerts.pl.in: New.\n+\t* configure.ac (AC_CONFIG_FILES): Add generate-cacerts.pl.\n+\n 2009-04-24  Matthias Klose  <doko@ubuntu.com>\n \n \t* configure.ac: Create missing directory gnu/java/security/jce/prng."}, {"sha": "ffb46822ed7563dc6a374db31cbf3fef51bfd067", "filename": "libjava/configure", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a8428f804d9d2dfa6de65d4158f8930903405b7/libjava%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a8428f804d9d2dfa6de65d4158f8930903405b7/libjava%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure?ref=2a8428f804d9d2dfa6de65d4158f8930903405b7", "patch": "@@ -28312,7 +28312,7 @@ echo \"${ECHO_T}arch directory: ${host_cpu}\" >&6\n \n fi\n \n-                                                                                                              ac_config_files=\"$ac_config_files Makefile libgcj.pc libgcj.spec libgcj-test.spec gcj/Makefile include/Makefile testsuite/Makefile contrib/aotcompile.py contrib/aot-compile contrib/aot-compile-rpm contrib/rebuild-gcj-db\"\n+                                                                                                                        ac_config_files=\"$ac_config_files Makefile libgcj.pc libgcj.spec libgcj-test.spec gcj/Makefile include/Makefile testsuite/Makefile contrib/aotcompile.py contrib/aot-compile contrib/aot-compile-rpm contrib/generate-cacerts.pl contrib/rebuild-gcj-db\"\n \n \n if test ${multilib} = yes; then\n@@ -29562,6 +29562,7 @@ do\n   \"contrib/aotcompile.py\" ) CONFIG_FILES=\"$CONFIG_FILES contrib/aotcompile.py\" ;;\n   \"contrib/aot-compile\" ) CONFIG_FILES=\"$CONFIG_FILES contrib/aot-compile\" ;;\n   \"contrib/aot-compile-rpm\" ) CONFIG_FILES=\"$CONFIG_FILES contrib/aot-compile-rpm\" ;;\n+  \"contrib/generate-cacerts.pl\" ) CONFIG_FILES=\"$CONFIG_FILES contrib/generate-cacerts.pl\" ;;\n   \"contrib/rebuild-gcj-db\" ) CONFIG_FILES=\"$CONFIG_FILES contrib/rebuild-gcj-db\" ;;\n   \"scripts/jar\" ) CONFIG_FILES=\"$CONFIG_FILES scripts/jar\" ;;\n   \"include/platform.h\" ) CONFIG_LINKS=\"$CONFIG_LINKS include/platform.h:include/$PLATFORMH\" ;;"}, {"sha": "05d2371724d1ae1a0f8decea86563fd06e7b2ad0", "filename": "libjava/configure.ac", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a8428f804d9d2dfa6de65d4158f8930903405b7/libjava%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a8428f804d9d2dfa6de65d4158f8930903405b7/libjava%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure.ac?ref=2a8428f804d9d2dfa6de65d4158f8930903405b7", "patch": "@@ -1923,6 +1923,7 @@ testsuite/Makefile\n contrib/aotcompile.py\n contrib/aot-compile\n contrib/aot-compile-rpm\n+contrib/generate-cacerts.pl\n contrib/rebuild-gcj-db\n ])\n "}, {"sha": "9db08d2b59c744a474aef85dff76565bb29764aa", "filename": "libjava/contrib/aotcompile.py.in", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a8428f804d9d2dfa6de65d4158f8930903405b7/libjava%2Fcontrib%2Faotcompile.py.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a8428f804d9d2dfa6de65d4158f8930903405b7/libjava%2Fcontrib%2Faotcompile.py.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fcontrib%2Faotcompile.py.in?ref=2a8428f804d9d2dfa6de65d4158f8930903405b7", "patch": "@@ -177,11 +177,14 @@ class Job:\n     \n     def __init__(self, path):\n         self.path, self.classes, self.blocks = path, {}, None\n+        self.classnames = {}\n \n-    def addClass(self, bytes):\n+    def addClass(self, bytes, name):\n         \"\"\"Subclasses call this from their __init__ method for\n         every class they find.\"\"\"\n-        self.classes[md5.new(bytes).digest()] = bytes\n+        digest = md5.new(bytes).digest()\n+        self.classes[digest] = bytes\n+        self.classnames[digest] = name\n \n     def __makeBlocks(self):\n         \"\"\"Split self.classes into chunks that can be compiled to\n@@ -200,7 +203,12 @@ class Job:\n         if the job is subsetted.\"\"\"\n         names = {}\n         for hash, bytes in self.classes.items():\n-            name = classname(bytes)\n+            try:\n+                name = classname(bytes)\n+            except:\n+                warn(\"job %s: class %s malformed or not a valid class file\" \\\n+                     % (self.path, self.classnames[hash]))\n+                raise\n             if not names.has_key(name):\n                 names[name] = []\n             names[name].append(hash)\n@@ -302,7 +310,7 @@ class JarJob(Job):\n             if bytes.startswith(ZIPMAGIC):\n                 self._walk(zipfile.ZipFile(StringIO.StringIO(bytes)))\n             elif bytes.startswith(CLASSMAGIC):\n-                self.addClass(bytes)\n+                self.addClass(bytes, name)\n \n class DirJob(Job):\n     \"\"\"A Job whose origin was a directory of classfiles.\"\"\"\n@@ -319,7 +327,7 @@ class DirJob(Job):\n             fp = open(path, \"r\")\n             magic = fp.read(4)\n             if magic == CLASSMAGIC:\n-                self.addClass(magic + fp.read())\n+                self.addClass(magic + fp.read(), name)\n     \n def weed_jobs(jobs):\n     \"\"\"Remove any jarfiles that are completely contained within"}, {"sha": "b90f6efddc351213c841303f732b62d7d5ee5db1", "filename": "libjava/contrib/generate-cacerts.pl.in", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a8428f804d9d2dfa6de65d4158f8930903405b7/libjava%2Fcontrib%2Fgenerate-cacerts.pl.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a8428f804d9d2dfa6de65d4158f8930903405b7/libjava%2Fcontrib%2Fgenerate-cacerts.pl.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fcontrib%2Fgenerate-cacerts.pl.in?ref=2a8428f804d9d2dfa6de65d4158f8930903405b7", "patch": "@@ -0,0 +1,106 @@\n+#!/usr/bin/perl\n+\n+# Copyright (C) 2007, 2009 Free Software Foundation\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+\n+# generate-cacerts.pl generates a gkeytool keystore named 'cacerts'\n+# from OpenSSL's certificate bundle.\n+\n+# First extract each of OpenSSL's bundled certificates into its own\n+# aliased filename.\n+chomp($file=@ARGV[0]);\n+$file = \"/etc/pki/tls/cert.pem\" unless $file ne \"\";\n+open(CERTS, $file);\n+@certs = <CERTS>;\n+close(CERTS);\n+\n+$pem_file_number = 0;\n+$writing_cert = 0;\n+foreach $cert (@certs)\n+{\n+\t if ($cert eq \"-----BEGIN CERTIFICATE-----\\n\")\n+\t {\n+\t\t  if ($writing_cert != 0)\n+\t\t  {\n+\t\t\t\tdie \"$file is malformed.\";\n+\t\t  }\n+\t\t  $pem_file_number++;\n+\t\t  # Numbering each file guarantees that cert aliases will be\n+\t\t  # unique.\n+\t\t  $pem_file_name = \"$pem_file_number$cert_alias.pem\";\n+\t\t  $writing_cert = 1;\n+\t\t  open(PEM, \">$pem_file_name\");\n+\t\t  print PEM $cert;\n+\t }\n+\t elsif ($cert eq \"-----END CERTIFICATE-----\\n\")\n+\t {\n+\t\t  $writing_cert = 0;\n+\t\t  print PEM $cert;\n+\t\t  close(PEM);\n+\t }\n+\t elsif ($cert =~ /Issuer: /)\n+\t {\n+\t\t  # Generate an alias using the OU and CN attributes of the\n+\t\t  # Issuer field if both are present, otherwise use only the CN\n+\t\t  # attribute.  The Issuer field must have either the OU or the\n+\t\t  # CN attribute.\n+\t\t  $_ = $cert;\n+\t\t  if ($cert =~ /OU=/)\n+\t\t  {\n+\t\t\t\ts/Issuer:.*?OU=//;\n+\t\t\t\t# Remove other occurrences of OU=.\n+\t\t\t\ts/OU=.*CN=//;\n+\t\t\t\t# Remove CN= if there were not other occurrences of OU=.\n+\t\t\t\ts/CN=//;\n+\t\t  }\n+\t\t  elsif ($cert =~ /CN=/)\n+\t\t  {\n+\t\t\t\ts/Issuer:.*CN=//;\n+\t\t  }\n+\t\t  s/\\W//g;\n+\t\t  tr/A-Z/a-z/;\n+\t\t  $cert_alias = $_\n+\t }\n+\t else\n+\t {\n+\t\t  if ($writing_cert == 1)\n+\t\t  {\n+\t\t\t\tprint PEM $cert;\n+\t\t  }\n+\t }\n+}\n+\n+# Check that the correct number of .pem files were produced.\n+@pem_files = <*.pem>;\n+if (@pem_files != $pem_file_number)\n+{\n+\t die \"Number of .pem files produced does not match\".\n+\t\t  \" number of certs read from $file.\";\n+}\n+\n+# Now store each cert in the 'cacerts' file using gkeytool.\n+$certs_written_count = 0;\n+foreach $pem_file (@pem_files)\n+{\n+\t system \"yes | gkeytool@gcc_suffix@ -import -alias `basename $pem_file .pem`\".\n+\t\t  \" -keystore cacerts -storepass '' -file $pem_file\".\n+\t\t  \" 2>&1 >/dev/null\";\n+\t unlink($pem_file);\n+\t $certs_written_count++;\n+}\n+\n+# Check that the correct number of certs were added to the keystore.\n+if ($certs_written_count != $pem_file_number)\n+{\n+\t die \"Number of certs added to keystore does not match\".\n+\t\t  \" number of certs read from $file.\";\n+}"}]}