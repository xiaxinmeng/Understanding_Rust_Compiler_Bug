{"sha": "9fa264571da0247ed1b0d0d0e64897f7b3731c50", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZhMjY0NTcxZGEwMjQ3ZWQxYjBkMGQwZTY0ODk3ZjdiMzczMWM1MA==", "commit": {"author": {"name": "Steven Bosscher", "email": "stevenb@suse.de", "date": "2005-07-19T00:44:45Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2005-07-19T00:44:45Z"}, "message": "loop-init.c (rest_of_handle_loop2): Remove.\n\n\t* loop-init.c (rest_of_handle_loop2): Remove.\n\t(rtl_loop_init, rtl_loop_done, rtl_move_loop_invariants,\n\trtl_unswitch, rtl_unroll_and_peel_loops, rtl_doloop): New functions.\n\t(pass_rtl_loop_init, pass_rtl_loop_done,\n\tpass_rtl_move_loop_invariants, pass_rtl_unswitch,\n\tpass_rtl_unroll_and_peel_loops, pass_rtl_doloop): New passes.\n\t* tree-ssa-loop.c (pass_loop, pass_loop_init, pass_loop_done,\n\tpass_unswitch): Rename to pass_tree_loop, pass_tree_loop_init,\n\tpass_tree_loop_done, and pass_tree_unswitch.\n\t(gate_loop): Rename to gate_tree_loop.\n\t* passes.c (init_optimization_passes): Update for renamed tree\n\tloop passes.  Add the new loop2 passes as subpasses of loop2.\n\t* tree-pass.h: Add extern declarations for the new loop2 subpasses.\n\tUpdate for the renamed tree loop passes.\n\nFrom-SVN: r102149", "tree": {"sha": "c385557766dd5c60a8bac1e0c9af12556c6bcdb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c385557766dd5c60a8bac1e0c9af12556c6bcdb0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fa264571da0247ed1b0d0d0e64897f7b3731c50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fa264571da0247ed1b0d0d0e64897f7b3731c50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fa264571da0247ed1b0d0d0e64897f7b3731c50", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fa264571da0247ed1b0d0d0e64897f7b3731c50/comments", "author": null, "committer": null, "parents": [{"sha": "067b91227a62dd6dbf67d54d39221a07281f8b3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/067b91227a62dd6dbf67d54d39221a07281f8b3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/067b91227a62dd6dbf67d54d39221a07281f8b3d"}], "stats": {"total": 284, "additions": 233, "deletions": 51}, "files": [{"sha": "f599f04e594af416d70c5e2656984a00f23ada8e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fa264571da0247ed1b0d0d0e64897f7b3731c50/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fa264571da0247ed1b0d0d0e64897f7b3731c50/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9fa264571da0247ed1b0d0d0e64897f7b3731c50", "patch": "@@ -1,3 +1,20 @@\n+2005-07-19  Steven Bosscher  <stevenb@suse.de>\n+\n+\t* loop-init.c (rest_of_handle_loop2): Remove.\n+\t(rtl_loop_init, rtl_loop_done, rtl_move_loop_invariants,\n+\trtl_unswitch, rtl_unroll_and_peel_loops, rtl_doloop): New functions.\n+\t(pass_rtl_loop_init, pass_rtl_loop_done,\n+\tpass_rtl_move_loop_invariants, pass_rtl_unswitch,\n+\tpass_rtl_unroll_and_peel_loops, pass_rtl_doloop): New passes.\n+\t* tree-ssa-loop.c (pass_loop, pass_loop_init, pass_loop_done,\n+\tpass_unswitch): Rename to pass_tree_loop, pass_tree_loop_init,\n+\tpass_tree_loop_done, and pass_tree_unswitch.\n+\t(gate_loop): Rename to gate_tree_loop.\n+\t* passes.c (init_optimization_passes): Update for renamed tree\n+\tloop passes.  Add the new loop2 passes as subpasses of loop2.\n+\t* tree-pass.h: Add extern declarations for the new loop2 subpasses.\n+\tUpdate for the renamed tree loop passes.\n+\n 2005-07-18  Ian Lance Taylor  <ian@airs.com>\n \n \tPR middle-end/22057"}, {"sha": "0e0b0cf4c88fdbe6f0381c67d3e930a3682623d1", "filename": "gcc/loop-init.c", "status": "modified", "additions": 181, "deletions": 36, "changes": 217, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fa264571da0247ed1b0d0d0e64897f7b3731c50/gcc%2Floop-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fa264571da0247ed1b0d0d0e64897f7b3731c50/gcc%2Floop-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-init.c?ref=9fa264571da0247ed1b0d0d0e64897f7b3731c50", "patch": "@@ -1,4 +1,4 @@\n-/* Loop optimizer initialization routines.\n+/* Loop optimizer initialization routines and RTL loop optimization passes.\n    Copyright (C) 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -32,7 +32,9 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include \"timevar.h\"\n #include \"flags.h\"\n \n-/* Initialize loop optimizer.  */\n+\f\n+/* Initialize loop optimizer.  This is used by the tree and RTL loop\n+   optimizers.  */\n \n struct loops *\n loop_optimizer_init (FILE *dumpfile)\n@@ -119,7 +121,11 @@ loop_optimizer_finalize (struct loops *loops, FILE *dumpfile)\n   verify_flow_info ();\n #endif\n }\n+\n \f\n+/* Gate for the RTL loop superpass.  The actual passes are subpasses.\n+   See passes.c for more on that.  */\n+\n static bool\n gate_handle_loop2 (void)\n {\n@@ -131,45 +137,64 @@ gate_handle_loop2 (void)\n               || flag_branch_on_count_reg));\n }\n \n-/* Perform loop optimizations.  It might be better to do them a bit\n-   sooner, but we want the profile feedback to work more\n-   efficiently.  */\n-static void\n-rest_of_handle_loop2 (void)\n+struct tree_opt_pass pass_loop2 =\n {\n-  struct loops *loops;\n-  basic_block bb;\n+  \"loop2\",                              /* name */\n+  gate_handle_loop2, \t\t        /* gate */\n+  NULL,                                 /* execute */\n+  NULL,                                 /* sub */\n+  NULL,                                 /* next */\n+  0,                                    /* static_pass_number */\n+  TV_LOOP,                              /* tv_id */\n+  0,                                    /* properties_required */\n+  0,                                    /* properties_provided */\n+  0,                                    /* properties_destroyed */\n+  0,                                    /* todo_flags_start */\n+  TODO_dump_func |\n+  TODO_ggc_collect,                     /* todo_flags_finish */\n+  'L'                                   /* letter */\n+};\n \n+\f\n+/* Initialization of the RTL loop passes.  */\n+static void\n+rtl_loop_init (void)\n+{\n   if (dump_file)\n     dump_flow_info (dump_file);\n \n   /* Initialize structures for layout changes.  */\n   cfg_layout_initialize (0);\n \n-  loops = loop_optimizer_init (dump_file);\n-\n-  if (loops)\n-    {\n-      /* The optimizations:  */\n-      if (flag_move_loop_invariants)\n-        move_loop_invariants (loops);\n-\n-      if (flag_unswitch_loops)\n-        unswitch_loops (loops);\n+  current_loops = loop_optimizer_init (dump_file);\n+}\n \n-      if (flag_peel_loops || flag_unroll_loops)\n-        unroll_and_peel_loops (loops,\n-                               (flag_peel_loops ? UAP_PEEL : 0) |\n-                               (flag_unroll_loops ? UAP_UNROLL : 0) |\n-                               (flag_unroll_all_loops ? UAP_UNROLL_ALL : 0));\n+struct tree_opt_pass pass_rtl_loop_init =\n+{\n+  \"loopinit\",                           /* name */\n+  NULL,                                 /* gate */\n+  rtl_loop_init,                        /* execute */\n+  NULL,                                 /* sub */\n+  NULL,                                 /* next */\n+  0,                                    /* static_pass_number */\n+  TV_LOOP,                              /* tv_id */\n+  0,                                    /* properties_required */\n+  0,                                    /* properties_provided */\n+  0,                                    /* properties_destroyed */\n+  0,                                    /* todo_flags_start */\n+  TODO_dump_func,                       /* todo_flags_finish */\n+  'L'                                   /* letter */\n+};\n \n-#ifdef HAVE_doloop_end\n-      if (flag_branch_on_count_reg && HAVE_doloop_end)\n-        doloop_optimize_loops (loops);\n-#endif /* HAVE_doloop_end */\n+\f\n+/* Finalization of the RTL loop passes.  */\n+static void\n+rtl_loop_done (void)\n+{\n+  basic_block bb;\n \n-      loop_optimizer_finalize (loops, dump_file);\n-    }\n+  if (current_loops)\n+    loop_optimizer_finalize (current_loops, dump_file);\n \n   free_dominance_info (CDI_DOMINATORS);\n \n@@ -184,13 +209,15 @@ rest_of_handle_loop2 (void)\n   reg_scan (get_insns (), max_reg_num ());\n   if (dump_file)\n     dump_flow_info (dump_file);\n+\n+  current_loops = NULL;\n }\n \n-struct tree_opt_pass pass_loop2 =\n+struct tree_opt_pass pass_rtl_loop_done =\n {\n-  \"loop2\",                              /* name */\n-  gate_handle_loop2, \t\t        /* gate */\n-  rest_of_handle_loop2,      \t\t/* execute */\n+  \"loopdone\",                           /* name */\n+  NULL,                                 /* gate */\n+  rtl_loop_done,                        /* execute */\n   NULL,                                 /* sub */\n   NULL,                                 /* next */\n   0,                                    /* static_pass_number */\n@@ -199,8 +226,126 @@ struct tree_opt_pass pass_loop2 =\n   0,                                    /* properties_provided */\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n-  TODO_dump_func |\n-  TODO_ggc_collect,                     /* todo_flags_finish */\n+  TODO_dump_func,                       /* todo_flags_finish */\n+  'L'                                   /* letter */\n+};\n+\n+\f\n+/* Loop invariant code motion.  */\n+static void\n+rtl_move_loop_invariants (void)\n+{\n+  if (current_loops && flag_move_loop_invariants)\n+    move_loop_invariants (current_loops);\n+}\n+\n+struct tree_opt_pass pass_rtl_move_loop_invariants =\n+{\n+  \"loop_invariant\",                     /* name */\n+  NULL,                                 /* gate */\n+  rtl_move_loop_invariants,             /* execute */\n+  NULL,                                 /* sub */\n+  NULL,                                 /* next */\n+  0,                                    /* static_pass_number */\n+  TV_LOOP,                              /* tv_id */\n+  0,                                    /* properties_required */\n+  0,                                    /* properties_provided */\n+  0,                                    /* properties_destroyed */\n+  0,                                    /* todo_flags_start */\n+  TODO_dump_func,                       /* todo_flags_finish */\n+  'L'                                   /* letter */\n+};\n+\n+\f\n+/* Loop unswitching for RTL.  */\n+static void\n+rtl_unswitch (void)\n+{\n+  if (current_loops && flag_unswitch_loops)\n+    unswitch_loops (current_loops);\n+}\n+\n+struct tree_opt_pass pass_rtl_unswitch =\n+{\n+  \"loop_unswitch\",                      /* name */\n+  NULL,                                 /* gate */\n+  rtl_unswitch,                         /* execute */\n+  NULL,                                 /* sub */\n+  NULL,                                 /* next */\n+  0,                                    /* static_pass_number */\n+  TV_LOOP,                              /* tv_id */\n+  0,                                    /* properties_required */\n+  0,                                    /* properties_provided */\n+  0,                                    /* properties_destroyed */\n+  0,                                    /* todo_flags_start */\n+  TODO_dump_func,                       /* todo_flags_finish */\n+  'L'                                   /* letter */\n+};\n+\n+\f\n+/* Loop unswitching for RTL.  */\n+static void\n+rtl_unroll_and_peel_loops (void)\n+{\n+  if (current_loops\n+      && (flag_peel_loops || flag_unroll_loops || flag_unroll_all_loops))\n+    {\n+      int flags = 0;\n+\n+      if (flag_peel_loops)\n+\tflags |= UAP_PEEL;\n+      if (flag_unroll_loops)\n+\tflags |= UAP_UNROLL;\n+      if (flag_unroll_all_loops)\n+\tflags |= UAP_UNROLL_ALL;\n+\n+      unroll_and_peel_loops (current_loops, flags);\n+    }\n+}\n+\n+struct tree_opt_pass pass_rtl_unroll_and_peel_loops =\n+{\n+  \"loop_unroll\",                        /* name */\n+  NULL,                                 /* gate */\n+  rtl_unroll_and_peel_loops,            /* execute */\n+  NULL,                                 /* sub */\n+  NULL,                                 /* next */\n+  0,                                    /* static_pass_number */\n+  TV_LOOP,                              /* tv_id */\n+  0,                                    /* properties_required */\n+  0,                                    /* properties_provided */\n+  0,                                    /* properties_destroyed */\n+  0,                                    /* todo_flags_start */\n+  TODO_dump_func,                       /* todo_flags_finish */\n+  'L'                                   /* letter */\n+};\n+\n+\f\n+/* The doloop optimization.  */\n+static void\n+rtl_doloop (void)\n+{\n+#ifdef HAVE_doloop_end\n+  if (current_loops\n+      && (flag_branch_on_count_reg && HAVE_doloop_end))\n+    doloop_optimize_loops (current_loops);\n+#endif\n+}\n+\n+struct tree_opt_pass pass_rtl_doloop =\n+{\n+  \"loop_doloop\",                        /* name */\n+  NULL,                                 /* gate */\n+  rtl_doloop,                           /* execute */\n+  NULL,                                 /* sub */\n+  NULL,                                 /* next */\n+  0,                                    /* static_pass_number */\n+  TV_LOOP,                              /* tv_id */\n+  0,                                    /* properties_required */\n+  0,                                    /* properties_provided */\n+  0,                                    /* properties_destroyed */\n+  0,                                    /* todo_flags_start */\n+  TODO_dump_func,                       /* todo_flags_finish */\n   'L'                                   /* letter */\n };\n "}, {"sha": "efe3e5b94217a4e3f9f6c7347a8c678e4c87d7ff", "filename": "gcc/passes.c", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fa264571da0247ed1b0d0d0e64897f7b3731c50/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fa264571da0247ed1b0d0d0e64897f7b3731c50/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=9fa264571da0247ed1b0d0d0e64897f7b3731c50", "patch": "@@ -525,7 +525,7 @@ init_optimization_passes (void)\n   NEXT_PASS (pass_reassoc);\n   NEXT_PASS (pass_pre);\n   NEXT_PASS (pass_sink_code);\n-  NEXT_PASS (pass_loop);\n+  NEXT_PASS (pass_tree_loop);\n   NEXT_PASS (pass_dominator);\n   NEXT_PASS (pass_copy_prop);\n   NEXT_PASS (pass_cd_dce);\n@@ -553,11 +553,11 @@ init_optimization_passes (void)\n   NEXT_PASS (pass_cleanup_cfg_post_optimizing);\n   *p = NULL;\n \n-  p = &pass_loop.sub;\n-  NEXT_PASS (pass_loop_init);\n+  p = &pass_tree_loop.sub;\n+  NEXT_PASS (pass_tree_loop_init);\n   NEXT_PASS (pass_copy_prop);\n   NEXT_PASS (pass_lim);\n-  NEXT_PASS (pass_unswitch);\n+  NEXT_PASS (pass_tree_unswitch);\n   NEXT_PASS (pass_scev_cprop);\n   NEXT_PASS (pass_empty_loop);\n   NEXT_PASS (pass_record_bounds);\n@@ -571,9 +571,18 @@ init_optimization_passes (void)\n   NEXT_PASS (pass_lower_vector_ssa);\n   NEXT_PASS (pass_complete_unroll);\n   NEXT_PASS (pass_iv_optimize);\n-  NEXT_PASS (pass_loop_done);\n+  NEXT_PASS (pass_tree_loop_done);\n   *p = NULL;\n \n+  p = &pass_loop2.sub;\n+  NEXT_PASS (pass_rtl_loop_init);\n+  NEXT_PASS (pass_rtl_move_loop_invariants);\n+  NEXT_PASS (pass_rtl_unswitch);\n+  NEXT_PASS (pass_rtl_unroll_and_peel_loops);\n+  NEXT_PASS (pass_rtl_doloop);\n+  NEXT_PASS (pass_rtl_loop_done);\n+  *p = NULL;\n+  \n   p = &pass_rest_of_compilation.sub;\n   NEXT_PASS (pass_remove_unnecessary_notes);\n   NEXT_PASS (pass_init_function);\n@@ -592,6 +601,9 @@ init_optimization_passes (void)\n   NEXT_PASS (pass_profiling);\n   NEXT_PASS (pass_rtl_ifcvt);\n   NEXT_PASS (pass_tracer);\n+  /* Perform loop optimizations.  It might be better to do them a bit\n+     sooner, but we want the profile feedback to work more\n+     efficiently.  */\n   NEXT_PASS (pass_loop2);\n   NEXT_PASS (pass_web);\n   NEXT_PASS (pass_cse2);"}, {"sha": "e5056377f92419aaf3c71b4d1916bd161972d2b9", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fa264571da0247ed1b0d0d0e64897f7b3731c50/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fa264571da0247ed1b0d0d0e64897f7b3731c50/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=9fa264571da0247ed1b0d0d0e64897f7b3731c50", "patch": "@@ -222,10 +222,10 @@ extern struct tree_opt_pass pass_referenced_vars;\n extern struct tree_opt_pass pass_sra;\n extern struct tree_opt_pass pass_tail_recursion;\n extern struct tree_opt_pass pass_tail_calls;\n-extern struct tree_opt_pass pass_loop;\n-extern struct tree_opt_pass pass_loop_init;\n+extern struct tree_opt_pass pass_tree_loop;\n+extern struct tree_opt_pass pass_tree_loop_init;\n extern struct tree_opt_pass pass_lim;\n-extern struct tree_opt_pass pass_unswitch;\n+extern struct tree_opt_pass pass_tree_unswitch;\n extern struct tree_opt_pass pass_iv_canon;\n extern struct tree_opt_pass pass_scev_cprop;\n extern struct tree_opt_pass pass_empty_loop;\n@@ -234,7 +234,7 @@ extern struct tree_opt_pass pass_if_conversion;\n extern struct tree_opt_pass pass_vectorize;\n extern struct tree_opt_pass pass_complete_unroll;\n extern struct tree_opt_pass pass_iv_optimize;\n-extern struct tree_opt_pass pass_loop_done;\n+extern struct tree_opt_pass pass_tree_loop_done;\n extern struct tree_opt_pass pass_ch;\n extern struct tree_opt_pass pass_ccp;\n extern struct tree_opt_pass pass_build_ssa;\n@@ -316,7 +316,15 @@ extern struct tree_opt_pass pass_cfg;\n extern struct tree_opt_pass pass_profiling;\n extern struct tree_opt_pass pass_rtl_ifcvt;\n extern struct tree_opt_pass pass_tracer;\n+\n extern struct tree_opt_pass pass_loop2;\n+extern struct tree_opt_pass pass_rtl_loop_init;\n+extern struct tree_opt_pass pass_rtl_move_loop_invariants;\n+extern struct tree_opt_pass pass_rtl_unswitch;\n+extern struct tree_opt_pass pass_rtl_unroll_and_peel_loops;\n+extern struct tree_opt_pass pass_rtl_doloop;\n+extern struct tree_opt_pass pass_rtl_loop_done;\n+\n extern struct tree_opt_pass pass_web;\n extern struct tree_opt_pass pass_cse2;\n extern struct tree_opt_pass pass_life;"}, {"sha": "abfcf15bc763dccf603c6ed08a534053fe8a845a", "filename": "gcc/tree-ssa-loop.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fa264571da0247ed1b0d0d0e64897f7b3731c50/gcc%2Ftree-ssa-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fa264571da0247ed1b0d0d0e64897f7b3731c50/gcc%2Ftree-ssa-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop.c?ref=9fa264571da0247ed1b0d0d0e64897f7b3731c50", "patch": "@@ -61,15 +61,15 @@ tree_loop_optimizer_init (FILE *dump)\n /* The loop superpass.  */\n \n static bool\n-gate_loop (void)\n+gate_tree_loop (void)\n {\n   return flag_tree_loop_optimize != 0;\n }\n \n-struct tree_opt_pass pass_loop = \n+struct tree_opt_pass pass_tree_loop = \n {\n   \"loop\",\t\t\t\t/* name */\n-  gate_loop,\t\t\t\t/* gate */\n+  gate_tree_loop,\t\t\t/* gate */\n   NULL,\t\t\t\t\t/* execute */\n   NULL,\t\t\t\t\t/* sub */\n   NULL,\t\t\t\t\t/* next */\n@@ -98,7 +98,7 @@ tree_ssa_loop_init (void)\n   scev_initialize (current_loops);\n }\n   \n-struct tree_opt_pass pass_loop_init = \n+struct tree_opt_pass pass_tree_loop_init = \n {\n   \"loopinit\",\t\t\t\t/* name */\n   NULL,\t\t\t\t\t/* gate */\n@@ -166,7 +166,7 @@ gate_tree_ssa_loop_unswitch (void)\n   return flag_unswitch_loops != 0;\n }\n \n-struct tree_opt_pass pass_unswitch = \n+struct tree_opt_pass pass_tree_unswitch = \n {\n   \"unswitch\",\t\t\t\t/* name */\n   gate_tree_ssa_loop_unswitch,\t\t/* gate */\n@@ -454,7 +454,7 @@ tree_ssa_loop_done (void)\n   current_loops = NULL;\n }\n   \n-struct tree_opt_pass pass_loop_done = \n+struct tree_opt_pass pass_tree_loop_done = \n {\n   \"loopdone\",\t\t\t\t/* name */\n   NULL,\t\t\t\t\t/* gate */"}]}