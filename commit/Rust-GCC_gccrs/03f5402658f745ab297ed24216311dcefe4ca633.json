{"sha": "03f5402658f745ab297ed24216311dcefe4ca633", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDNmNTQwMjY1OGY3NDVhYjI5N2VkMjQyMTYzMTFkY2VmZTRjYTYzMw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2001-11-06T14:47:43Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-11-06T14:47:43Z"}, "message": "rtl.h (mem_for_const_double): New declaration.\n\n\t* rtl.h (mem_for_const_double): New declaration.\n\t* varasm.c (mem_for_const_double): New function.\n\t* config/convex/convex.md (movdf): Use it.\n\t* config/m68k/hp320.h (LEGITIMATE_PIC_OPERAND_P): Likewise.\n\t* config/m68k/linux.h, config/m68k/m68k.h: Likewise.\n\t* config/m68k/m68kv4.h: Likewise.\n\nFrom-SVN: r46808", "tree": {"sha": "f972cb555703b7e43d818f9f647b442e9974ef40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f972cb555703b7e43d818f9f647b442e9974ef40"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03f5402658f745ab297ed24216311dcefe4ca633", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03f5402658f745ab297ed24216311dcefe4ca633", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03f5402658f745ab297ed24216311dcefe4ca633", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03f5402658f745ab297ed24216311dcefe4ca633/comments", "author": null, "committer": null, "parents": [{"sha": "bfd82dbfc72ead366d2aec6401d1e1057342d710", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfd82dbfc72ead366d2aec6401d1e1057342d710", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfd82dbfc72ead366d2aec6401d1e1057342d710"}], "stats": {"total": 65, "additions": 47, "deletions": 18}, "files": [{"sha": "c62be21ecab1d82e07bd82c0fd2474d9a08c15f4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f5402658f745ab297ed24216311dcefe4ca633/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f5402658f745ab297ed24216311dcefe4ca633/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=03f5402658f745ab297ed24216311dcefe4ca633", "patch": "@@ -1,5 +1,12 @@\n Tue Nov  6 09:21:34 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n+\t* rtl.h (mem_for_const_double): New declaration.\n+\t* varasm.c (mem_for_const_double): New function.\n+\t* config/convex/convex.md (movdf): Use it.\n+\t* config/m68k/hp320.h (LEGITIMATE_PIC_OPERAND_P): Likewise.\n+\t* config/m68k/linux.h, config/m68k/m68k.h: Likewise.\n+\t* config/m68k/m68kv4.h: Likewise.\n+\n \t* config/alpha/alpha.h (SECONDARY_MEMORY_NEEDED): Adjust for addition\n \tof new GP reg classes.\n "}, {"sha": "3ff36edcd33b053fdba7dc1fef1d27d9f390fe88", "filename": "gcc/config/convex/convex.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f5402658f745ab297ed24216311dcefe4ca633/gcc%2Fconfig%2Fconvex%2Fconvex.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f5402658f745ab297ed24216311dcefe4ca633/gcc%2Fconfig%2Fconvex%2Fconvex.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fconvex%2Fconvex.md?ref=03f5402658f745ab297ed24216311dcefe4ca633", "patch": "@@ -206,7 +206,7 @@\n (define_insn \"\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=d\")\n \t(match_operand:DF 1 \"const_double_operand\" \"F\"))]\n-  \"CONST_DOUBLE_MEM (operands[1]) == const0_rtx\"\n+  \"mem_for_const_double (operands[1]) == 0\"\n   \"ld.u %u1,%0\\;ld.w %v1,%0\"\n   [(set_attr \"type\" \"xalu\")])\n "}, {"sha": "6bb86d3c559a1da06cdc6a7ece2166c5c85dc60e", "filename": "gcc/config/m68k/hp320.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f5402658f745ab297ed24216311dcefe4ca633/gcc%2Fconfig%2Fm68k%2Fhp320.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f5402658f745ab297ed24216311dcefe4ca633/gcc%2Fconfig%2Fm68k%2Fhp320.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fhp320.h?ref=03f5402658f745ab297ed24216311dcefe4ca633", "patch": "@@ -625,10 +625,11 @@ do { register int i;\t\t\t\\\n #undef LEGITIMATE_PIC_OPERAND_P\n #define LEGITIMATE_PIC_OPERAND_P(X) \\\n   ((! symbolic_operand (X, VOIDmode) \\\n-    && ! (GET_CODE (X) == CONST_DOUBLE && CONST_DOUBLE_MEM (X)\t\\\n-\t  && GET_CODE (CONST_DOUBLE_MEM (X)) == MEM\t\t\\\n-\t  && symbolic_operand (XEXP (CONST_DOUBLE_MEM (X), 0), VOIDmode))) \\\n-   || (GET_CODE (X) == SYMBOL_REF && SYMBOL_REF_FLAG (X))       \\\n+    && ! (GET_CODE (X) == CONST_DOUBLE && mem_for_const_double (X) != 0\t\\\n+\t  && GET_CODE (mem_for_const_double (X)) == MEM\t\t\t\\\n+\t  && symbolic_operand (XEXP (mem_for_const_double (X), 0),\t\\\n+\t\t\t       VOIDmode))) \t\t\t\t\\\n+   || (GET_CODE (X) == SYMBOL_REF && SYMBOL_REF_FLAG (X))       \t\\\n    || PCREL_GENERAL_OPERAND_OK)\n \n /* hpux8 and later have C++ compatible include files, so do not"}, {"sha": "256d790ccf9fdff6ed921c3a74aad07f4b0c876f", "filename": "gcc/config/m68k/linux.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f5402658f745ab297ed24216311dcefe4ca633/gcc%2Fconfig%2Fm68k%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f5402658f745ab297ed24216311dcefe4ca633/gcc%2Fconfig%2Fm68k%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Flinux.h?ref=03f5402658f745ab297ed24216311dcefe4ca633", "patch": "@@ -310,10 +310,11 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef LEGITIMATE_PIC_OPERAND_P\n #define LEGITIMATE_PIC_OPERAND_P(X) \\\n   ((! symbolic_operand (X, VOIDmode) \\\n-    && ! (GET_CODE (X) == CONST_DOUBLE && CONST_DOUBLE_MEM (X)\t\\\n-\t  && GET_CODE (CONST_DOUBLE_MEM (X)) == MEM\t\t\\\n-\t  && symbolic_operand (XEXP (CONST_DOUBLE_MEM (X), 0), VOIDmode))) \\\n-   || (GET_CODE (X) == SYMBOL_REF && SYMBOL_REF_FLAG (X))       \\\n+    && ! (GET_CODE (X) == CONST_DOUBLE && mem_for_const_double (X) != 0\t\\\n+\t  && GET_CODE (mem_for_const_double (X)) == MEM\t\t\t\\\n+\t  && symbolic_operand (XEXP (mem_for_const_double (X), 0),\t\\\n+\t\t\t       VOIDmode))) \t\t\t\t\\\n+   || (GET_CODE (X) == SYMBOL_REF && SYMBOL_REF_FLAG (X))       \t\\\n    || PCREL_GENERAL_OPERAND_OK)\n \n /* Turn off function cse if we are doing PIC. We always want function"}, {"sha": "fad64082b57dbd43ba6f26642825c49ac3172ccd", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f5402658f745ab297ed24216311dcefe4ca633/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f5402658f745ab297ed24216311dcefe4ca633/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=03f5402658f745ab297ed24216311dcefe4ca633", "patch": "@@ -1459,11 +1459,11 @@ __transfer_from_trampoline ()\t\t\t\t\t\\\n \n #define LEGITIMATE_PIC_OPERAND_P(X)\t\\\n   ((! symbolic_operand (X, VOIDmode)\t\t\t\t\\\n-    && ! (GET_CODE (X) == CONST_DOUBLE && CONST_DOUBLE_MEM (X)\t\\\n-\t  && GET_CODE (CONST_DOUBLE_MEM (X)) == MEM\t\t\\\n-\t  && symbolic_operand (XEXP (CONST_DOUBLE_MEM (X), 0),\t\\\n-\t\t\t       VOIDmode)))\t\t\t\\\n-   || (GET_CODE (X) == SYMBOL_REF && SYMBOL_REF_FLAG (X))\t\\\n+    && ! (GET_CODE (X) == CONST_DOUBLE && mem_for_const_double (X) != 0\t\\\n+\t  && GET_CODE (mem_for_const_double (X)) == MEM\t\t\t\\\n+\t  && symbolic_operand (XEXP (mem_for_const_double (X), 0),\t\\\n+\t\t\t       VOIDmode))) \t\t\t\t\\\n+   || (GET_CODE (X) == SYMBOL_REF && SYMBOL_REF_FLAG (X))\t\t\\\n    || PCREL_GENERAL_OPERAND_OK)\n \n /* The macros REG_OK_FOR..._P assume that the arg is a REG rtx"}, {"sha": "e10b6e5e506fd1f35d3e4e049d755a99174e484d", "filename": "gcc/config/m68k/m68kv4.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f5402658f745ab297ed24216311dcefe4ca633/gcc%2Fconfig%2Fm68k%2Fm68kv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f5402658f745ab297ed24216311dcefe4ca633/gcc%2Fconfig%2Fm68k%2Fm68kv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68kv4.h?ref=03f5402658f745ab297ed24216311dcefe4ca633", "patch": "@@ -278,10 +278,11 @@ int switch_table_difference_label_flag;\n #undef LEGITIMATE_PIC_OPERAND_P\n #define LEGITIMATE_PIC_OPERAND_P(X) \\\n   ((! symbolic_operand (X, VOIDmode) \\\n-    && ! (GET_CODE (X) == CONST_DOUBLE && CONST_DOUBLE_MEM (X)\t\\\n-\t  && GET_CODE (CONST_DOUBLE_MEM (X)) == MEM\t\t\\\n-\t  && symbolic_operand (XEXP (CONST_DOUBLE_MEM (X), 0), VOIDmode))) \\\n-   || (GET_CODE (X) == SYMBOL_REF && SYMBOL_REF_FLAG (X))       \\\n+    && ! (GET_CODE (X) == CONST_DOUBLE && mem_for_const_double (X) != 0\t\\\n+\t  && GET_CODE (mem_for_const_double (X)) == MEM\t\t\t\\\n+\t  && symbolic_operand (XEXP (mem_for_const_double (X), 0),\t\\\n+\t\t\t       VOIDmode))) \t\t\t\t\\\n+   || (GET_CODE (X) == SYMBOL_REF && SYMBOL_REF_FLAG (X))       \t\\\n    || PCREL_GENERAL_OPERAND_OK)\n \n /* Turn off function cse if we are doing PIC. We always want function call"}, {"sha": "872d70dbf776f16718967569a88bf4a4ff0d5db6", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f5402658f745ab297ed24216311dcefe4ca633/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f5402658f745ab297ed24216311dcefe4ca633/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=03f5402658f745ab297ed24216311dcefe4ca633", "patch": "@@ -1273,6 +1273,7 @@ extern rtx gen_sequence\t\t\tPARAMS ((void));\n \n /* In varasm.c  */\n extern rtx immed_double_const\t\tPARAMS ((HOST_WIDE_INT, HOST_WIDE_INT, enum machine_mode));\n+extern rtx mem_for_const_double\t\tPARAMS ((rtx));\n extern rtx force_const_mem\t\tPARAMS ((enum machine_mode, rtx));\n \n /* In varasm.c  */"}, {"sha": "064a6caa3f10128afe0a5369155c8853a61b23d7", "filename": "gcc/varasm.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f5402658f745ab297ed24216311dcefe4ca633/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f5402658f745ab297ed24216311dcefe4ca633/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=03f5402658f745ab297ed24216311dcefe4ca633", "patch": "@@ -3756,6 +3756,24 @@ record_constant_rtx (mode, x)\n   return ptr;\n }\n \f\n+/* Given a constant rtx X, return a MEM for the location in memory at which\n+   this constant has been placed.  Return 0 if it not has been placed yet.  */\n+\n+rtx\n+mem_for_const_double (x)\n+     rtx x;\n+{\n+  enum machine_mode mode = GET_MODE (x);\n+  struct constant_descriptor *desc;\n+\n+  for (desc = const_rtx_hash_table[const_hash_rtx (mode, x)]; desc;\n+       desc = desc->next)\n+    if (compare_constant_rtx (mode, x, desc))\n+      return desc->rtl;\n+\n+  return 0;\n+}\n+  \n /* Given a constant rtx X, make (or find) a memory constant for its value\n    and return a MEM rtx to refer to it in memory.  */\n "}]}