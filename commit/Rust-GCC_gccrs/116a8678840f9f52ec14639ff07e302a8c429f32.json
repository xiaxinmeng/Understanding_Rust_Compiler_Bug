{"sha": "116a8678840f9f52ec14639ff07e302a8c429f32", "node_id": "C_kwDOANBUbNoAKDExNmE4Njc4ODQwZjlmNTJlYzE0NjM5ZmYwN2UzMDJhOGM0MjlmMzI", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-03-22T05:06:23Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-03-23T03:14:12Z"}, "message": "RISC-V: Implement __riscv_vlenb PR109228\n\n__riscv_vlenb is defined in RVV intrinsic spec 0.11 and used in some project\nlike google/highway.\n\ngcc/ChangeLog:\n\n\tPR target/109228\n\t* config/riscv/riscv-vector-builtins-bases.cc (class vlenb): Add\n\t__riscv_vlenb support.\n\t(BASE): Ditto.\n\t* config/riscv/riscv-vector-builtins-bases.h: Ditto.\n\t* config/riscv/riscv-vector-builtins-functions.def (vlenb): Ditto.\n\t* config/riscv/riscv-vector-builtins-shapes.cc (struct vlenb_def): Ditto.\n\t(SHAPE): Ditto.\n\t* config/riscv/riscv-vector-builtins-shapes.h: Ditto.\n\t* config/riscv/riscv-vector-builtins.cc: Ditto.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/109228\n\t* gcc.target/riscv/rvv/base/vlenb-1.c: New test.", "tree": {"sha": "6540762627a5c13df40df96437a735e396c51c24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6540762627a5c13df40df96437a735e396c51c24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/116a8678840f9f52ec14639ff07e302a8c429f32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/116a8678840f9f52ec14639ff07e302a8c429f32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/116a8678840f9f52ec14639ff07e302a8c429f32", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/116a8678840f9f52ec14639ff07e302a8c429f32/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a481eed8fd01837cdf011ea9a17853505080a888", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a481eed8fd01837cdf011ea9a17853505080a888", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a481eed8fd01837cdf011ea9a17853505080a888"}], "stats": {"total": 98, "additions": 98, "deletions": 0}, "files": [{"sha": "52467bbc961fed9c004a69fb6af8417420ceb369", "filename": "gcc/config/riscv/riscv-vector-builtins-bases.cc", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/116a8678840f9f52ec14639ff07e302a8c429f32/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/116a8678840f9f52ec14639ff07e302a8c429f32/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc?ref=116a8678840f9f52ec14639ff07e302a8c429f32", "patch": "@@ -1658,6 +1658,21 @@ class vleff : public function_base\n   }\n };\n \n+/* Implements vlenb.  */\n+class vlenb : public function_base\n+{\n+public:\n+  bool apply_vl_p () const override { return false; }\n+\n+  rtx expand (function_expander &e) const override\n+  {\n+    machine_mode mode = GET_MODE (e.target);\n+    rtx vlenb = gen_int_mode (BYTES_PER_RISCV_VECTOR, mode);\n+    emit_move_insn (e.target, vlenb);\n+    return e.target;\n+  }\n+};\n+\n static CONSTEXPR const vsetvl<false> vsetvl_obj;\n static CONSTEXPR const vsetvl<true> vsetvlmax_obj;\n static CONSTEXPR const loadstore<false, LST_UNIT_STRIDE, false> vle_obj;\n@@ -1868,6 +1883,7 @@ static CONSTEXPR const vset vset_obj;\n static CONSTEXPR const vget vget_obj;\n static CONSTEXPR const read_vl read_vl_obj;\n static CONSTEXPR const vleff vleff_obj;\n+static CONSTEXPR const vlenb vlenb_obj;\n \n /* Declare the function base NAME, pointing it to an instance\n    of class <NAME>_obj.  */\n@@ -2084,5 +2100,6 @@ BASE (vset)\n BASE (vget)\n BASE (read_vl)\n BASE (vleff)\n+BASE (vlenb)\n \n } // end namespace riscv_vector"}, {"sha": "0196f80b69e21a4a7c5aa17fe1ba8880a03cfd5a", "filename": "gcc/config/riscv/riscv-vector-builtins-bases.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/116a8678840f9f52ec14639ff07e302a8c429f32/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/116a8678840f9f52ec14639ff07e302a8c429f32/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.h?ref=116a8678840f9f52ec14639ff07e302a8c429f32", "patch": "@@ -240,6 +240,7 @@ extern const function_base *const vset;\n extern const function_base *const vget;\n extern const function_base *const read_vl;\n extern const function_base *const vleff;\n+extern const function_base *const vlenb;\n }\n \n } // end namespace riscv_vector"}, {"sha": "3f1513cb9fd75e08fdb4458bd0a5f7883ef590ee", "filename": "gcc/config/riscv/riscv-vector-builtins-functions.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/116a8678840f9f52ec14639ff07e302a8c429f32/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-functions.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/116a8678840f9f52ec14639ff07e302a8c429f32/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-functions.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-functions.def?ref=116a8678840f9f52ec14639ff07e302a8c429f32", "patch": "@@ -38,6 +38,7 @@ along with GCC; see the file COPYING3. If not see\n \n /* Internal helper functions for gimple fold use.  */\n DEF_RVV_FUNCTION (read_vl, read_vl, none_preds, p_none_void_ops)\n+DEF_RVV_FUNCTION (vlenb, vlenb, none_preds, ul_none_void_ops)\n \n /* 6. Configuration-Setting Instructions.  */\n "}, {"sha": "0682f81400ac4343001b69b4f9e2452b8b6ca28c", "filename": "gcc/config/riscv/riscv-vector-builtins-shapes.cc", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/116a8678840f9f52ec14639ff07e302a8c429f32/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/116a8678840f9f52ec14639ff07e302a8c429f32/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.cc?ref=116a8678840f9f52ec14639ff07e302a8c429f32", "patch": "@@ -553,6 +553,30 @@ struct fault_load_def : public build_base\n   }\n };\n \n+/* vlenb_def class.  */\n+struct vlenb_def : public function_shape\n+{\n+  void build (function_builder &b,\n+\t      const function_group_info &group) const override\n+  {\n+    auto_vec<tree> argument_types;\n+    function_instance function_instance (group.base_name, *group.base,\n+\t\t\t\t\t *group.shape, group.ops_infos.types[0],\n+\t\t\t\t\t group.preds[0], &group.ops_infos);\n+    b.add_unique_function (function_instance, (*group.shape),\n+\t\t\t   long_unsigned_type_node, argument_types);\n+  }\n+\n+  char *get_name (function_builder &b, const function_instance &instance,\n+\t\t  bool overloaded_p) const override\n+  {\n+    if (overloaded_p)\n+      return nullptr;\n+    b.append_base_name (instance.base_name);\n+    return b.finish_name ();\n+  }\n+};\n+\n SHAPE(vsetvl, vsetvl)\n SHAPE(vsetvl, vsetvlmax)\n SHAPE(loadstore, loadstore)\n@@ -572,5 +596,6 @@ SHAPE(vset, vset)\n SHAPE(vget, vget)\n SHAPE(read_vl, read_vl)\n SHAPE(fault_load, fault_load)\n+SHAPE(vlenb, vlenb)\n \n } // end namespace riscv_vector"}, {"sha": "aee2f94b04c433000207d11f8b00b9e30b44ab7d", "filename": "gcc/config/riscv/riscv-vector-builtins-shapes.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/116a8678840f9f52ec14639ff07e302a8c429f32/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/116a8678840f9f52ec14639ff07e302a8c429f32/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.h?ref=116a8678840f9f52ec14639ff07e302a8c429f32", "patch": "@@ -43,6 +43,7 @@ extern const function_shape *const vset;\n extern const function_shape *const vget;\n extern const function_shape *const read_vl;\n extern const function_shape *const fault_load;\n+extern const function_shape *const vlenb;\n }\n \n } // end namespace riscv_vector"}, {"sha": "bd16fe9db7d595274a63dde8f894fb734f672029", "filename": "gcc/config/riscv/riscv-vector-builtins.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/116a8678840f9f52ec14639ff07e302a8c429f32/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/116a8678840f9f52ec14639ff07e302a8c429f32/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc?ref=116a8678840f9f52ec14639ff07e302a8c429f32", "patch": "@@ -2130,6 +2130,13 @@ static CONSTEXPR const rvv_op_info p_none_void_ops\n      rvv_arg_type_info (RVV_BASE_size), /* Return type */\n      void_args /* Args */};\n \n+/* A static operand information for unsigned long func () function registration. */\n+static CONSTEXPR const rvv_op_info ul_none_void_ops\n+  = {none_ops,\t\t\t\t/* Types */\n+     OP_TYPE_none,\t\t\t/* Suffix */\n+     rvv_arg_type_info (RVV_BASE_unsigned_long), /* Return type */\n+     void_args /* Args */};\n+\n /* A list of all RVV base function types.  */\n static CONSTEXPR const function_type_info function_types[] = {\n #define DEF_RVV_TYPE_INDEX(VECTOR, MASK, SIGNED, UNSIGNED, EEW8_INDEX, EEW16_INDEX, \\"}, {"sha": "a02fe9e98c4a01436799f2c52e143326b2d1065a", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vlenb-1.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/116a8678840f9f52ec14639ff07e302a8c429f32/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlenb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/116a8678840f9f52ec14639ff07e302a8c429f32/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlenb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlenb-1.c?ref=116a8678840f9f52ec14639ff07e302a8c429f32", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f0 (char *x, char * p1, char * p2, char * p3) {\n+  vbool32_t bp1 = *(vbool32_t*)p1;\n+  vbool32_t bp2 = *(vbool32_t*)p2;\n+  vbool32_t bp3 = *(vbool32_t*)p3;\n+  asm volatile (\"\":::\"memory\");\n+  *(vbool32_t *)(x + (__riscv_vlenb())) = bp2;  \n+  *(vbool32_t *)(x) = bp1;             \n+  *(vbool32_t *)(x + (__riscv_vlenb())*2) = bp3;\n+}\n+\n+void f1 (char *x, char * p1, char * p2, char * p3) {\n+  vbool32_t bp1 = *(vbool32_t*)p1;\n+  vbool32_t bp2 = *(vbool32_t*)p2;\n+  vbool32_t bp3 = *(vbool32_t*)p3;\n+  asm volatile (\"\":::\"memory\");\n+  *(vbool32_t *)(x + (__riscv_vlenb() / 2)) = bp2;  \n+  *(vbool32_t *)(x) = bp1;             \n+  *(vbool32_t *)(x + (__riscv_vlenb() / 2)*2) = bp3;\n+}\n+\n+void f2 (char *x, char * p1, char * p2, char * p3) {\n+  vbool32_t bp1 = *(vbool32_t*)p1;\n+  vbool32_t bp2 = *(vbool32_t*)p2;\n+  vbool32_t bp3 = *(vbool32_t*)p3;\n+  asm volatile (\"\":::\"memory\");\n+  *(vbool32_t *)(x + (__riscv_vlenb() / 4)) = bp2;  \n+  *(vbool32_t *)(x) = bp1;             \n+  *(vbool32_t *)(x + (__riscv_vlenb() / 4)*2) = bp3;\n+}\n+\n+void f3 (char *x, char * p1, char * p2, char * p3) {\n+  vbool32_t bp1 = *(vbool32_t*)p1;\n+  vbool32_t bp2 = *(vbool32_t*)p2;\n+  vbool32_t bp3 = *(vbool32_t*)p3;\n+  asm volatile (\"\":::\"memory\");\n+  *(vbool32_t *)(x + (__riscv_vlenb() / 4)) = bp2;  \n+  *(vbool32_t *)(x) = bp1;             \n+  *(vbool32_t *)(x + (__riscv_vlenb() / 4)*2) = bp3;\n+}\n+\n+/* { dg-final { scan-assembler-times {vsm\\.v} 12 } } */"}]}