{"sha": "42bace41fde0f50013e0522a3a00f8ae89313d65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDJiYWNlNDFmZGUwZjUwMDEzZTA1MjJhM2EwMGY4YWU4OTMxM2Q2NQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2012-09-28T12:20:54Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2012-09-28T12:20:54Z"}, "message": "re PR target/54716 (Select best typed instruction for bitwise operations)\n\n\tPR target/54716\n\t* config/i386/predicates.md (nonimmediate_or_const_vector_operand):\n\tNew predicate.\n\t* config/i386/i386.c (ix86_expand_vector_logical_operator): New\n\tfunction.\n\t* config/i386/i386-protos.h (ix86_expand_vector_logical_operator): New\n\tprototype.\n\t* config/i386/sse.md (<code><mode>3 VI logic): Use it.\n\n\t* gcc.target/i386/xorps-sse2.c: Remove xfails.\n\nFrom-SVN: r191827", "tree": {"sha": "191174cd60ee183ab1de1c266212f0c34a9516fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/191174cd60ee183ab1de1c266212f0c34a9516fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/42bace41fde0f50013e0522a3a00f8ae89313d65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42bace41fde0f50013e0522a3a00f8ae89313d65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42bace41fde0f50013e0522a3a00f8ae89313d65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42bace41fde0f50013e0522a3a00f8ae89313d65/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4a2c20ccfabd9bcfe0293c274312a424971d0bc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a2c20ccfabd9bcfe0293c274312a424971d0bc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a2c20ccfabd9bcfe0293c274312a424971d0bc0"}], "stats": {"total": 109, "additions": 104, "deletions": 5}, "files": [{"sha": "6f2fb9f40770c1aa0218a123675abc0457e117ae", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42bace41fde0f50013e0522a3a00f8ae89313d65/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42bace41fde0f50013e0522a3a00f8ae89313d65/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=42bace41fde0f50013e0522a3a00f8ae89313d65", "patch": "@@ -1,5 +1,14 @@\n 2012-09-28  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/54716\n+\t* config/i386/predicates.md (nonimmediate_or_const_vector_operand):\n+\tNew predicate.\n+\t* config/i386/i386.c (ix86_expand_vector_logical_operator): New\n+\tfunction.\n+\t* config/i386/i386-protos.h (ix86_expand_vector_logical_operator): New\n+\tprototype.\n+\t* config/i386/sse.md (<code><mode>3 VI logic): Use it.\n+\n \tPR tree-optimization/54713\n \t* fold-const.c (vec_cst_ctor_to_array): Give up if vector CONSTRUCTOR\n \thas vector elements."}, {"sha": "2002bfcef5bc5b1f7def4e04a79b080fc88850a0", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42bace41fde0f50013e0522a3a00f8ae89313d65/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42bace41fde0f50013e0522a3a00f8ae89313d65/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=42bace41fde0f50013e0522a3a00f8ae89313d65", "patch": "@@ -91,6 +91,8 @@ extern void ix86_fixup_binary_operands_no_copy (enum rtx_code,\n \t\t\t\t\t\tenum machine_mode, rtx[]);\n extern void ix86_expand_binary_operator (enum rtx_code,\n \t\t\t\t\t enum machine_mode, rtx[]);\n+extern void ix86_expand_vector_logical_operator (enum rtx_code,\n+\t\t\t\t\t\t enum machine_mode, rtx[]);\n extern bool ix86_binary_operator_ok (enum rtx_code, enum machine_mode, rtx[]);\n extern bool ix86_avoid_lea_for_add (rtx, rtx[]);\n extern bool ix86_use_lea_for_mov (rtx, rtx[]);"}, {"sha": "de9c68718788448da37a66df75262a8347a25b70", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42bace41fde0f50013e0522a3a00f8ae89313d65/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42bace41fde0f50013e0522a3a00f8ae89313d65/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=42bace41fde0f50013e0522a3a00f8ae89313d65", "patch": "@@ -16490,6 +16490,82 @@ ix86_expand_binary_operator (enum rtx_code code, enum machine_mode mode,\n     emit_move_insn (operands[0], dst);\n }\n \n+/* Expand vector logical operation CODE (AND, IOR, XOR) in MODE with\n+   the given OPERANDS.  */\n+\n+void\n+ix86_expand_vector_logical_operator (enum rtx_code code, enum machine_mode mode,\n+\t\t\t\t     rtx operands[])\n+{\n+  rtx op1 = NULL_RTX, op2 = NULL_RTX;\n+  if (GET_CODE (operands[1]) == SUBREG)\n+    {\n+      op1 = operands[1];\n+      op2 = operands[2];\n+    }\n+  else if (GET_CODE (operands[2]) == SUBREG)\n+    {\n+      op1 = operands[2];\n+      op2 = operands[1];\n+    }\n+  /* Optimize (__m128i) d | (__m128i) e and similar code\n+     when d and e are float vectors into float vector logical\n+     insn.  In C/C++ without using intrinsics there is no other way\n+     to express vector logical operation on float vectors than\n+     to cast them temporarily to integer vectors.  */\n+  if (op1\n+      && !TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\n+      && ((GET_CODE (op2) == SUBREG || GET_CODE (op2) == CONST_VECTOR))\n+      && GET_MODE_CLASS (GET_MODE (SUBREG_REG (op1))) == MODE_VECTOR_FLOAT\n+      && GET_MODE_SIZE (GET_MODE (SUBREG_REG (op1))) == GET_MODE_SIZE (mode)\n+      && SUBREG_BYTE (op1) == 0\n+      && (GET_CODE (op2) == CONST_VECTOR\n+\t  || (GET_MODE (SUBREG_REG (op1)) == GET_MODE (SUBREG_REG (op2))\n+\t      && SUBREG_BYTE (op2) == 0))\n+      && can_create_pseudo_p ())\n+    {\n+      rtx dst;\n+      switch (GET_MODE (SUBREG_REG (op1)))\n+\t{\n+\tcase V4SFmode:\n+\tcase V8SFmode:\n+\tcase V2DFmode:\n+\tcase V4DFmode:\n+\t  dst = gen_reg_rtx (GET_MODE (SUBREG_REG (op1)));\n+\t  if (GET_CODE (op2) == CONST_VECTOR)\n+\t    {\n+\t      op2 = gen_lowpart (GET_MODE (dst), op2);\n+\t      op2 = force_reg (GET_MODE (dst), op2);\n+\t    }\n+\t  else\n+\t    {\n+\t      op1 = operands[1];\n+\t      op2 = SUBREG_REG (operands[2]);\n+\t      if (!nonimmediate_operand (op2, GET_MODE (dst)))\n+\t\top2 = force_reg (GET_MODE (dst), op2);\n+\t    }\n+\t  op1 = SUBREG_REG (op1);\n+\t  if (!nonimmediate_operand (op1, GET_MODE (dst)))\n+\t    op1 = force_reg (GET_MODE (dst), op1);\n+\t  emit_insn (gen_rtx_SET (VOIDmode, dst,\n+\t\t\t\t  gen_rtx_fmt_ee (code, GET_MODE (dst),\n+\t\t\t\t\t\t  op1, op2)));\n+\t  emit_move_insn (operands[0], gen_lowpart (mode, dst));\n+\t  return;\n+\tdefault:\n+\t  break;\n+\t}\n+    }\n+  if (!nonimmediate_operand (operands[1], mode))\n+    operands[1] = force_reg (mode, operands[1]);\n+  if (!nonimmediate_operand (operands[2], mode))\n+    operands[2] = force_reg (mode, operands[2]);\n+  ix86_fixup_binary_operands_no_copy (code, mode, operands);\n+  emit_insn (gen_rtx_SET (VOIDmode, operands[0],\n+\t\t\t  gen_rtx_fmt_ee (code, mode, operands[1],\n+\t\t\t\t\t  operands[2])));\n+}\n+\n /* Return TRUE or FALSE depending on whether the binary operator meets the\n    appropriate constraints.  */\n "}, {"sha": "6cf5651814a087e1bc609af4d96240839c17be98", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42bace41fde0f50013e0522a3a00f8ae89313d65/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42bace41fde0f50013e0522a3a00f8ae89313d65/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=42bace41fde0f50013e0522a3a00f8ae89313d65", "patch": "@@ -777,6 +777,12 @@\n   (ior (match_operand 0 \"nonimmediate_operand\")\n        (match_operand 0 \"const0_operand\")))\n \n+;; Return true when OP is either nonimmediate operand, or any\n+;; CONST_VECTOR.\n+(define_predicate \"nonimmediate_or_const_vector_operand\"\n+  (ior (match_operand 0 \"nonimmediate_operand\")\n+       (match_code \"const_vector\")))\n+\n ;; Return true when OP is nonimmediate or standard SSE constant.\n (define_predicate \"nonimmediate_or_sse_const_operand\"\n   (match_operand 0 \"general_operand\")"}, {"sha": "d7fadd0df1f343f2944a10feba653ec3b11908f8", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42bace41fde0f50013e0522a3a00f8ae89313d65/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42bace41fde0f50013e0522a3a00f8ae89313d65/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=42bace41fde0f50013e0522a3a00f8ae89313d65", "patch": "@@ -6264,10 +6264,13 @@\n (define_expand \"<code><mode>3\"\n   [(set (match_operand:VI 0 \"register_operand\")\n \t(any_logic:VI\n-\t  (match_operand:VI 1 \"nonimmediate_operand\")\n-\t  (match_operand:VI 2 \"nonimmediate_operand\")))]\n+\t  (match_operand:VI 1 \"nonimmediate_or_const_vector_operand\")\n+\t  (match_operand:VI 2 \"nonimmediate_or_const_vector_operand\")))]\n   \"TARGET_SSE\"\n-  \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n+{\n+  ix86_expand_vector_logical_operator (<CODE>, <MODE>mode, operands);\n+  DONE;\n+})\n \n (define_insn \"*<code><mode>3\"\n   [(set (match_operand:VI 0 \"register_operand\" \"=x,x\")"}, {"sha": "9802c10e4840515a092105d20eca800d49c70ee7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42bace41fde0f50013e0522a3a00f8ae89313d65/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42bace41fde0f50013e0522a3a00f8ae89313d65/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=42bace41fde0f50013e0522a3a00f8ae89313d65", "patch": "@@ -1,5 +1,8 @@\n 2012-09-28  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/54716\n+\t* gcc.target/i386/xorps-sse2.c: Remove xfails.\n+\n \tPR tree-optimization/54713\n \t* gcc.c-torture/compile/pr54713-1.c: New test.\n \t* gcc.c-torture/compile/pr54713-2.c: New test."}, {"sha": "b9576d9700f08ff436b39f27112171ece9e6028a", "filename": "gcc/testsuite/gcc.target/i386/xorps-sse2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42bace41fde0f50013e0522a3a00f8ae89313d65/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxorps-sse2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42bace41fde0f50013e0522a3a00f8ae89313d65/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxorps-sse2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxorps-sse2.c?ref=42bace41fde0f50013e0522a3a00f8ae89313d65", "patch": "@@ -1,8 +1,8 @@\n /* Test that we generate xorps when the result is used in FP math.  */\n /* { dg-do compile } */\n /* { dg-options \"-O -msse2 -mno-sse3\" } */\n-/* { dg-final { scan-assembler \"xorps\\[ \\t\\]\" { xfail *-*-* } } } */\n-/* { dg-final { scan-assembler-not \"pxor\" { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler \"xorps\\[ \\t\\]\" } } */\n+/* { dg-final { scan-assembler-not \"pxor\" } } */\n \n #define vector __attribute__ ((vector_size (16)))\n "}]}