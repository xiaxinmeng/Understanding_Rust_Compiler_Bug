{"sha": "24a7799ea4d03dd01fe537ac2da65b41f6039bae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjRhNzc5OWVhNGQwM2RkMDFmZTUzN2FjMmRhNjViNDFmNjAzOWJhZQ==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@st.com", "date": "2006-07-17T14:44:48Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2006-07-17T14:44:48Z"}, "message": "re PR other/28251 (dumped addresses makes diffing dumps unusable)\n\ngcc:\n\tPR other/28251\n\t* tree.h (dump_addr): Declare.\n\t* print-tree.c (dump_addr): New function.\n\t(print_node_brief, print_node): Use it.\n\t* print-rtl.c (print_rtx): Likewise.\n\t* common.opt (-fdump-noaddr): New option.\n\t* doc/invoke.texi (-fdump-noaddr): Document.\n\t* loop-unroll.c (si_info_hash): Make hash independent of addresses.\n\t(ve_info_hash): Likewise.\ngcc/testsuite:\n\tPR other/28251\n\tgcc.c-torture/unsorted/dump-noaddr.c: New test.\n\tgcc.c-torture/unsorted/dump-noaddr.x: New driver.\n\nFrom-SVN: r115519", "tree": {"sha": "ff661fb5805de209002f680c01355880f73d6feb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff661fb5805de209002f680c01355880f73d6feb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24a7799ea4d03dd01fe537ac2da65b41f6039bae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24a7799ea4d03dd01fe537ac2da65b41f6039bae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24a7799ea4d03dd01fe537ac2da65b41f6039bae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24a7799ea4d03dd01fe537ac2da65b41f6039bae/comments", "author": null, "committer": null, "parents": [{"sha": "9d335249c9fe3535dfbb0af94617d32890d74702", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d335249c9fe3535dfbb0af94617d32890d74702", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d335249c9fe3535dfbb0af94617d32890d74702"}], "stats": {"total": 184, "additions": 159, "deletions": 25}, "files": [{"sha": "3262d052ef8459176daf3916059a69c7fc220cf2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a7799ea4d03dd01fe537ac2da65b41f6039bae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a7799ea4d03dd01fe537ac2da65b41f6039bae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=24a7799ea4d03dd01fe537ac2da65b41f6039bae", "patch": "@@ -1,3 +1,15 @@\n+2006-07-17  J\"orn Rennecke  <joern.rennecke@st.com>\n+\n+\tPR other/28251\n+\t* tree.h (dump_addr): Declare.\n+\t* print-tree.c (dump_addr): New function.\n+\t(print_node_brief, print_node): Use it.\n+\t* print-rtl.c (print_rtx): Likewise.\n+\t* common.opt (-fdump-noaddr): New option.\n+\t* doc/invoke.texi (-fdump-noaddr): Document.\n+\t* loop-unroll.c (si_info_hash): Make hash independent of addresses.\n+\t(ve_info_hash): Likewise.\n+\n 2006-07-13  Andrew Haley  <aph@redhat.com>\n \n \tPR tree-optimization/19505"}, {"sha": "204560f5fbae1d836e6b8973c9c257fb09236715", "filename": "gcc/common.opt", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a7799ea4d03dd01fe537ac2da65b41f6039bae/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a7799ea4d03dd01fe537ac2da65b41f6039bae/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=24a7799ea4d03dd01fe537ac2da65b41f6039bae", "patch": "@@ -381,9 +381,13 @@ fdump-\n Common Joined RejectNegative\n -fdump-<type>\tDump various compiler internals to a file\n \n+fdump-noaddr\n+Common Report Var(flag_dump_noaddr)\n+Suppress output of addresses in debugging dumps\n+\n fdump-unnumbered\n Common Report Var(flag_dump_unnumbered) VarExists\n-Suppress output of instruction numbers and line number notes in debugging dumps\n+Suppress output of instruction numbers, line number notes and addresses in debugging dumps\n \n fearly-inlining\n Common Report Var(flag_early_inlining) Init(1)"}, {"sha": "32fe747b4da639cb7609da0ff11c25e59c998418", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a7799ea4d03dd01fe537ac2da65b41f6039bae/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a7799ea4d03dd01fe537ac2da65b41f6039bae/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=24a7799ea4d03dd01fe537ac2da65b41f6039bae", "patch": "@@ -262,7 +262,7 @@ Objective-C and Objective-C++ Dialects}.\n @item Debugging Options\n @xref{Debugging Options,,Options for Debugging Your Program or GCC}.\n @gccoptlist{-d@var{letters}  -dumpspecs  -dumpmachine  -dumpversion @gol\n--fdump-unnumbered  -fdump-translation-unit@r{[}-@var{n}@r{]} @gol\n+-fdump-noaddr -fdump-unnumbered  -fdump-translation-unit@r{[}-@var{n}@r{]} @gol\n -fdump-class-hierarchy@r{[}-@var{n}@r{]} @gol\n -fdump-ipa-all -fdump-ipa-cgraph @gol\n -fdump-tree-all @gol\n@@ -4005,10 +4005,17 @@ with @samp{r} (@option{-fdump-rtl-expand}).\n Dump debugging information during parsing, to standard error.\n @end table\n \n+@item -fdump-noaddr\n+@opindex fdump-noaddr\n+When doing debugging dumps (see @option{-d} option above), suppress\n+address output.  This makes it more feasible to use diff on debugging\n+dumps for compiler invocations with different compiler binaries and/or\n+different text / bss / data / heap / stack / dso start locations.\n+\n @item -fdump-unnumbered\n @opindex fdump-unnumbered\n When doing debugging dumps (see @option{-d} option above), suppress instruction\n-numbers and line number note output.  This makes it more feasible to\n+numbers, line number note and address output.  This makes it more feasible to\n use diff on debugging dumps for compiler invocations with different\n options, in particular with and without @option{-g}.\n "}, {"sha": "711b02161abc2f2725544b6cd6eabecbde6eec85", "filename": "gcc/loop-unroll.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a7799ea4d03dd01fe537ac2da65b41f6039bae/gcc%2Floop-unroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a7799ea4d03dd01fe537ac2da65b41f6039bae/gcc%2Floop-unroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-unroll.c?ref=24a7799ea4d03dd01fe537ac2da65b41f6039bae", "patch": "@@ -1466,7 +1466,7 @@ unroll_loop_stupid (struct loops *loops, struct loop *loop)\n static hashval_t\n si_info_hash (const void *ivts)\n {\n-  return htab_hash_pointer (((struct iv_to_split *) ivts)->insn);\n+  return (hashval_t) INSN_UID (((struct iv_to_split *) ivts)->insn);\n }\n \n /* An equality functions for information about insns to split.  */\n@@ -1485,7 +1485,7 @@ si_info_eq (const void *ivts1, const void *ivts2)\n static hashval_t\n ve_info_hash (const void *ves)\n {\n-  return htab_hash_pointer (((struct var_to_expand *) ves)->insn);\n+  return (hashval_t) INSN_UID (((struct var_to_expand *) ves)->insn);\n }\n \n /* Return true if IVTS1 and IVTS2 (which are really both of type "}, {"sha": "a9c1a932bdedc3b7653ca029281985b99e2b6289", "filename": "gcc/print-rtl.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a7799ea4d03dd01fe537ac2da65b41f6039bae/gcc%2Fprint-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a7799ea4d03dd01fe537ac2da65b41f6039bae/gcc%2Fprint-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-rtl.c?ref=24a7799ea4d03dd01fe537ac2da65b41f6039bae", "patch": "@@ -283,12 +283,9 @@ print_rtx (rtx in_rtx)\n \n \t      case NOTE_INSN_BLOCK_BEG:\n \t      case NOTE_INSN_BLOCK_END:\n-\t\tfprintf (outfile, \" \");\n-\t\tif (flag_dump_unnumbered)\n-\t\t  fprintf (outfile, \"#\");\n-\t\telse\n-\t\t  fprintf (outfile, \"%p\",\n-\t\t\t   (char *) NOTE_BLOCK (in_rtx));\n+#ifndef GENERATOR_FILE\n+\t\tdump_addr (outfile, \" \", NOTE_BLOCK (in_rtx));\n+#endif\n \t\tsawclose = 1;\n \t\tbreak;\n \n@@ -539,7 +536,9 @@ print_rtx (rtx in_rtx)\n \tbreak;\n \n       case 't':\n-\tfprintf (outfile, \" %p\", (void *) XTREE (in_rtx, i));\n+#ifndef GENERATOR_FILE\n+\tdump_addr (outfile, \" \", XTREE (in_rtx, i));\n+#endif\n \tbreak;\n \n       case '*':"}, {"sha": "b207fe30a5430f97d27d398d89c974b068694c7a", "filename": "gcc/print-tree.c", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a7799ea4d03dd01fe537ac2da65b41f6039bae/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a7799ea4d03dd01fe537ac2da65b41f6039bae/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=24a7799ea4d03dd01fe537ac2da65b41f6039bae", "patch": "@@ -57,6 +57,16 @@ debug_tree (tree node)\n   putc ('\\n', stderr);\n }\n \n+/* Print PREFIX and ADDR to FILE.  */\n+void\n+dump_addr (FILE *file, const char *prefix, void *addr)\n+{\n+  if (flag_dump_noaddr || flag_dump_unnumbered)\n+    fprintf (file, \"%s#\", prefix);\n+  else\n+    fprintf (file, \"%s%p\", prefix, addr);\n+}\n+\n /* Print a node in brief fashion, with just the code, address and name.  */\n \n void\n@@ -73,8 +83,8 @@ print_node_brief (FILE *file, const char *prefix, tree node, int indent)\n      name if any.  */\n   if (indent > 0)\n     fprintf (file, \" \");\n-  fprintf (file, \"%s <%s %p\",\n-\t   prefix, tree_code_name[(int) TREE_CODE (node)], (char *) node);\n+  fprintf (file, \"%s <%s\", prefix, tree_code_name[(int) TREE_CODE (node)]);\n+  dump_addr (file, \" \", node);\n \n   if (class == tcc_declaration)\n     {\n@@ -218,8 +228,8 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n   indent_to (file, indent);\n \n   /* Print the slot this node is in, and its code, and address.  */\n-  fprintf (file, \"%s <%s %p\",\n-\t   prefix, tree_code_name[(int) TREE_CODE (node)], (void *) node);\n+  fprintf (file, \"%s <%s\", prefix, tree_code_name[(int) TREE_CODE (node)]);\n+  dump_addr (file, \" \", node);\n \n   /* Print the name, if any.  */\n   if (class == tcc_declaration)\n@@ -505,8 +515,7 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n \t       && DECL_STRUCT_FUNCTION (node) != 0)\n \t{\n \t  indent_to (file, indent + 4);\n-\t  fprintf (file, \"saved-insns %p\",\n-\t\t   (void *) DECL_STRUCT_FUNCTION (node));\n+\t  dump_addr (file, \"saved-insns \", DECL_STRUCT_FUNCTION (node));\n \t}\n \n       if ((TREE_CODE (node) == VAR_DECL || TREE_CODE (node) == PARM_DECL)\n@@ -778,15 +787,16 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n \t  break;\n \n     \tcase STATEMENT_LIST:\n-\t  fprintf (file, \" head %p tail %p stmts\",\n-\t\t   (void *) node->stmt_list.head, (void *) node->stmt_list.tail);\n+\t  dump_addr (file, \" head \", node->stmt_list.head);\n+\t  dump_addr (file, \" tail \", node->stmt_list.tail);\n+\t  fprintf (file, \" stmts\");\n \t  {\n \t    tree_stmt_iterator i;\n \t    for (i = tsi_start (node); !tsi_end_p (i); tsi_next (&i))\n \t      {\n \t\t/* Not printing the addresses of the (not-a-tree)\n \t\t   'struct tree_stmt_list_node's.  */\n-\t\tfprintf (file, \" %p\", (void *)tsi_stmt (i));\n+\t\tdump_addr (file, \" \", tsi_stmt (i));\n \t      }\n \t    fprintf (file, \"\\n\");\n \t    for (i = tsi_start (node); !tsi_end_p (i); tsi_next (&i))\n@@ -826,11 +836,9 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n \t    {\n \t      indent_to (file, indent + 3);\n \t      if (SSA_NAME_PTR_INFO (node))\n-\t\tfprintf (file, \" ptr-info %p\",\n-\t\t\t (void *) SSA_NAME_PTR_INFO (node));\n+\t\tdump_addr (file, \" ptr-info \", SSA_NAME_PTR_INFO (node));\n \t      if (SSA_NAME_VALUE (node))\n-\t\tfprintf (file, \" value %p\",\n-\t\t\t (void *) SSA_NAME_VALUE (node));\n+\t\tdump_addr (file, \" value \", SSA_NAME_VALUE (node));\n \t    }\n \t  break;\n "}, {"sha": "9b500c5f1d1c965983caaeabc934bdebb6904668", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a7799ea4d03dd01fe537ac2da65b41f6039bae/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a7799ea4d03dd01fe537ac2da65b41f6039bae/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=24a7799ea4d03dd01fe537ac2da65b41f6039bae", "patch": "@@ -1,3 +1,9 @@\n+2006-07-17  J\"orn Rennecke  <joern.rennecke@st.com>\n+\n+\tPR other/28251\n+\tgcc.c-torture/unsorted/dump-noaddr.c: New test.\n+\tgcc.c-torture/unsorted/dump-noaddr.x: New driver.\n+\n 2006-07-17  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/28238"}, {"sha": "11dd78b8f69a3ba8edbc31c4c4b27f398038738d", "filename": "gcc/testsuite/gcc.c-torture/unsorted/dump-noaddr.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a7799ea4d03dd01fe537ac2da65b41f6039bae/gcc%2Ftestsuite%2Fgcc.c-torture%2Funsorted%2Fdump-noaddr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a7799ea4d03dd01fe537ac2da65b41f6039bae/gcc%2Ftestsuite%2Fgcc.c-torture%2Funsorted%2Fdump-noaddr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Funsorted%2Fdump-noaddr.c?ref=24a7799ea4d03dd01fe537ac2da65b41f6039bae", "patch": "@@ -0,0 +1,48 @@\n+#if MASK & 1\n+#define t16(x) x x x x x x x x x x x x x x x x\n+#define M (sizeof (t16(t16(t16(t16(t16(\" \")))))) - 1)\n+#endif\n+#if MASK & 2\n+#define M 1048576\n+#endif\n+\n+typedef struct s {\n+  int c;\n+  void *vp;\n+  struct s *s;\n+}s;\n+\n+typedef int (*fpt) (const char *, void *, int *);\n+\n+int M_var = M;\n+\n+extern void exit (int);\n+\n+int\n+f (int start, int end, int *a, int *b, int c, s *sp)\n+{\n+  int count = 0;\n+  int i;\n+\n+  for (i = start; i <= end; i++)\n+    {\n+      a[i] = b[i] + c;\n+      count ++;\n+    }\n+  (*(fpt)sp->s->vp) (\"Hello World!\\n\", &exit, &M_var);\n+  return count;\n+}\n+\n+int\n+g (int i)\n+{\n+  switch (i)\n+    {\n+    case 1: return 42;\n+    case 2: return 60;\n+    case 3: return 7;\n+    case 4: return 3;\n+    case 5: return M;\n+    default: return 0;\n+    }\n+}"}, {"sha": "f0155ddb883158ab354d49388920fc1632b9d447", "filename": "gcc/testsuite/gcc.c-torture/unsorted/dump-noaddr.x", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a7799ea4d03dd01fe537ac2da65b41f6039bae/gcc%2Ftestsuite%2Fgcc.c-torture%2Funsorted%2Fdump-noaddr.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a7799ea4d03dd01fe537ac2da65b41f6039bae/gcc%2Ftestsuite%2Fgcc.c-torture%2Funsorted%2Fdump-noaddr.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Funsorted%2Fdump-noaddr.x?ref=24a7799ea4d03dd01fe537ac2da65b41f6039bae", "patch": "@@ -0,0 +1,49 @@\n+# This checks if -fdump-noaddr dumps are done consistently.\n+proc dump_compare { src options } {\n+    global srcdir subdir\n+    global tmpdir\n+    \n+    exec echo $src\n+    \n+    global torture_with_loops\n+    set option_list $torture_with_loops\n+    set dumpbase dump-noaddr\n+    # ??? passing -dumpbase to the gcc driver doesn't work, since it will pass\n+    # another -dumpbase option to override it.\n+    # loop through all the options\n+    foreach option $option_list {\n+#\tc-torture-compile ${dumpbase}_1 \"$option $options -DMASK=1 -x c -da -fdump-tree-all\"\n+#\tc-torture-compile ${dumpbase}_2 \"$option $options -DMASK=2 -x c -da -fdump-tree-all\"\n+#\tc-torture-compile ${dumpbase}_3 \"$option $options -DMASK=3 -x c -da -fdump-tree-all\"\n+\tfile delete -force dump1\n+\tfile delete -force dump2\n+\tfile mkdir dump1\n+\tfile mkdir dump2\n+\tcd dump1\n+\tc-torture-compile $src \"$option $options -DMASK=1 -x c --param ggc-min-heapsize=1 -da -fdump-tree-all -fdump-noaddr\"\n+\tcd ../dump2\n+\tc-torture-compile $src \"$option $options -DMASK=2 -x c -da -fdump-tree-all -fdump-noaddr\"\n+\tcd ..\n+\tforeach dump1 [lsort [glob -nocomplain dump1/*]] {\n+\t    regsub dump1/ $dump1 dump2/ dump2\n+\t    set dumptail [file tail $dump1]\n+\t    #puts \"$option $dump1\"\n+\t    set tmp [ diff \"$dump1\" \"$dump2\" ]\n+\t    if { $tmp == 0 } {\n+\t\tuntested \"$option $dumptail comparison\"\n+\t    } elseif { $tmp == 1 } {\n+\t\tpass \"$option $dumptail comparison\"\n+\t    } else {\n+\t\tfail \"$option $dumptail comparison\"\n+\t    }\n+\t    #exec diff $dump1 $dump2\n+\t}\n+    }\n+    file delete -force dump1\n+    file delete -force dump2\n+}\n+\n+catch {dump_compare $src $options} result\n+puts $result\n+verbose result\n+return 1"}, {"sha": "12e2f592b32f24b089c797b85d0fbbc994319544", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a7799ea4d03dd01fe537ac2da65b41f6039bae/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a7799ea4d03dd01fe537ac2da65b41f6039bae/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=24a7799ea4d03dd01fe537ac2da65b41f6039bae", "patch": "@@ -4340,6 +4340,7 @@ extern void print_rtl (FILE *, rtx);\n /* In print-tree.c */\n extern void debug_tree (tree);\n #ifdef BUFSIZ\n+extern void dump_addr (FILE*, const char *, void *);\n extern void print_node (FILE *, const char *, tree, int);\n extern void print_node_brief (FILE *, const char *, tree, int);\n extern void indent_to (FILE *, int);"}]}