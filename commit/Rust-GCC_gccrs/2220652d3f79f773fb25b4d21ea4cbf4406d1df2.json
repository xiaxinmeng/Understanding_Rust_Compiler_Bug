{"sha": "2220652d3f79f773fb25b4d21ea4cbf4406d1df2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjIyMDY1MmQzZjc5Zjc3M2ZiMjViNGQyMWVhNGNiZjQ0MDZkMWRmMg==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-01-05T14:45:20Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-01-05T14:45:20Z"}, "message": "re PR fortran/23232 ([4.1 only] DATA implied DO variables)\n\n2007-01-05  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/23232\n\t* decl.c (gfc_in_match_data, gfc_set_in_match_data): New\n\tfunctions to signal that a DATA statement is being matched.\n\t(gfc_match_data): Call gfc_set_in_match_data on entry and on\n\texit.\n\t* gfortran.h : Add prototypes for above.\n\t* expr.c (check_init_expr): Avoid check on parameter or\n\tvariable if gfc_in_match_data is true.\n\t(gfc_match_init_expr): Do not call error on non-reduction of\n\texpression if gfc_in_match_data is true.\n\n\tPR fortran/27996\n\tPR fortran/27998\n\t* decl.c (gfc_set_constant_character_len): Add boolean arg to\n\tflag array constructor resolution.  Warn if string is being\n\ttruncated.  Standard dependent error if string is padded. Set\n\tnew arg to false for all three calls to\n\tgfc_set_constant_character_len.\n\t* match.h : Add boolean arg to prototype for\n\tgfc_set_constant_character_len.\n\t* gfortran.h : Add warn_character_truncation to gfc_options.\n\t* options.c (set_Wall): Set warn_character_truncation if -Wall\n\tis set.\n\t* resolve.c (resolve_code): Warn if rhs string in character\n\tassignment has to be truncated.\n\t* array.c (gfc_resolve_character_array_constructor): Set new\n\targument to true for call to gfc_set_constant_character_len.\n\n2007-01-05  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/23232\n\t* gfortran.dg/data_implied_do_1.f90: New test.\n\n\tPR fortran/27996\n\tPR fortran/27998\n\t* gfortran.dg/char_length_1.f90: New test.\n\nFrom-SVN: r120485", "tree": {"sha": "2999345f4ce5653de4bd004643e637f2cce6e449", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2999345f4ce5653de4bd004643e637f2cce6e449"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2220652d3f79f773fb25b4d21ea4cbf4406d1df2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2220652d3f79f773fb25b4d21ea4cbf4406d1df2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2220652d3f79f773fb25b4d21ea4cbf4406d1df2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2220652d3f79f773fb25b4d21ea4cbf4406d1df2/comments", "author": null, "committer": null, "parents": [{"sha": "4b322f430a748cc600d3ef66865a24d7c1b743d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b322f430a748cc600d3ef66865a24d7c1b743d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b322f430a748cc600d3ef66865a24d7c1b743d5"}], "stats": {"total": 218, "additions": 193, "deletions": 25}, "files": [{"sha": "0d9ade0da9d8fad37107b5684c9763399c32f762", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2220652d3f79f773fb25b4d21ea4cbf4406d1df2/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2220652d3f79f773fb25b4d21ea4cbf4406d1df2/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=2220652d3f79f773fb25b4d21ea4cbf4406d1df2", "patch": "@@ -1,3 +1,33 @@\n+2007-01-05  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/23232\n+\t* decl.c (gfc_in_match_data, gfc_set_in_match_data): New\n+\tfunctions to signal that a DATA statement is being matched.\n+\t(gfc_match_data): Call gfc_set_in_match_data on entry and on\n+\texit.\n+\t* gfortran.h : Add prototypes for above.\n+\t* expr.c (check_init_expr): Avoid check on parameter or\n+\tvariable if gfc_in_match_data is true.\n+\t(gfc_match_init_expr): Do not call error on non-reduction of\n+\texpression if gfc_in_match_data is true.\n+\n+\tPR fortran/27996\n+\tPR fortran/27998\n+\t* decl.c (gfc_set_constant_character_len): Add boolean arg to\n+\tflag array constructor resolution.  Warn if string is being\n+\ttruncated.  Standard dependent error if string is padded. Set\n+\tnew arg to false for all three calls to\n+\tgfc_set_constant_character_len.\n+\t* match.h : Add boolean arg to prototype for\n+\tgfc_set_constant_character_len.\n+\t* gfortran.h : Add warn_character_truncation to gfc_options.\n+\t* options.c (set_Wall): Set warn_character_truncation if -Wall\n+\tis set.\n+\t* resolve.c (resolve_code): Warn if rhs string in character\n+\tassignment has to be truncated.\n+\t* array.c (gfc_resolve_character_array_constructor): Set new\n+\targument to true for call to gfc_set_constant_character_len.\n+\n 2007-01-05  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/29624"}, {"sha": "d3606f52d817f8a972a8377923a4c94dc9194fc0", "filename": "gcc/fortran/array.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2220652d3f79f773fb25b4d21ea4cbf4406d1df2/gcc%2Ffortran%2Farray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2220652d3f79f773fb25b4d21ea4cbf4406d1df2/gcc%2Ffortran%2Farray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farray.c?ref=2220652d3f79f773fb25b4d21ea4cbf4406d1df2", "patch": "@@ -1587,7 +1587,7 @@ gfc_resolve_character_array_constructor (gfc_expr * expr)\n \t  /* Update the element constructors.  */\n \t  for (p = expr->value.constructor; p; p = p->next)\n \t    if (p->expr->expr_type == EXPR_CONSTANT)\n-\t      gfc_set_constant_character_len (max_length, p->expr);\n+\t      gfc_set_constant_character_len (max_length, p->expr, true);\n \t}\n     }\n }"}, {"sha": "b2f401f6efb992eb9620a8c2702c3caf89965c81", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 35, "deletions": 4, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2220652d3f79f773fb25b4d21ea4cbf4406d1df2/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2220652d3f79f773fb25b4d21ea4cbf4406d1df2/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=2220652d3f79f773fb25b4d21ea4cbf4406d1df2", "patch": "@@ -74,6 +74,20 @@ gfc_symbol *gfc_new_block;\n \n /********************* DATA statement subroutines *********************/\n \n+static bool in_match_data = false;\n+\n+bool\n+gfc_in_match_data (void)\n+{\n+  return in_match_data;\n+}\n+\n+void\n+gfc_set_in_match_data (bool set_value)\n+{\n+  in_match_data = set_value;\n+}\n+\n /* Free a gfc_data_variable structure and everything beneath it.  */\n \n static void\n@@ -455,6 +469,8 @@ gfc_match_data (void)\n   gfc_data *new;\n   match m;\n \n+  gfc_set_in_match_data (true);\n+\n   for (;;)\n     {\n       new = gfc_get_data ();\n@@ -477,6 +493,8 @@ gfc_match_data (void)\n       gfc_match_char (',');\t/* Optional comma */\n     }\n \n+  gfc_set_in_match_data (false);\n+\n   if (gfc_pure (NULL))\n     {\n       gfc_error (\"DATA statement at %C is not allowed in a PURE procedure\");\n@@ -486,6 +504,7 @@ gfc_match_data (void)\n   return MATCH_YES;\n \n cleanup:\n+  gfc_set_in_match_data (false);\n   gfc_free_data (new);\n   return MATCH_ERROR;\n }\n@@ -743,7 +762,7 @@ build_sym (const char *name, gfc_charlen * cl,\n    truncated.  */\n \n void\n-gfc_set_constant_character_len (int len, gfc_expr * expr)\n+gfc_set_constant_character_len (int len, gfc_expr * expr, bool array)\n {\n   char * s;\n   int slen;\n@@ -758,6 +777,18 @@ gfc_set_constant_character_len (int len, gfc_expr * expr)\n       memcpy (s, expr->value.character.string, MIN (len, slen));\n       if (len > slen)\n \tmemset (&s[slen], ' ', len - slen);\n+\n+      if (gfc_option.warn_character_truncation && slen > len)\n+\tgfc_warning_now (\"CHARACTER expression at %L is being truncated \"\n+\t\t\t \"(%d/%d)\", &expr->where, slen, len);\n+\n+      /* Apply the standard by 'hand' otherwise it gets cleared for\n+\t initializers.  */\n+      if (array && slen < len && !(gfc_option.allow_std & GFC_STD_GNU))\n+\tgfc_error_now (\"The CHARACTER elements of the array constructor \"\n+\t\t       \"at %L must have the same length (%d/%d)\",\n+\t\t        &expr->where, slen, len);\n+\n       s[len] = '\\0';\n       gfc_free (expr->value.character.string);\n       expr->value.character.string = s;\n@@ -909,13 +940,13 @@ add_init_expr_to_sym (const char *name, gfc_expr ** initp,\n \t      gfc_constructor * p;\n \n \t      if (init->expr_type == EXPR_CONSTANT)\n-\t\tgfc_set_constant_character_len (len, init);\n+\t\tgfc_set_constant_character_len (len, init, false);\n \t      else if (init->expr_type == EXPR_ARRAY)\n \t\t{\n \t\t  gfc_free_expr (init->ts.cl->length);\n \t\t  init->ts.cl->length = gfc_copy_expr (sym->ts.cl->length);\n \t\t  for (p = init->value.constructor; p; p = p->next)\n-\t\t    gfc_set_constant_character_len (len, p->expr);\n+\t\t    gfc_set_constant_character_len (len, p->expr, false);\n \t\t}\n \t    }\n \t}\n@@ -4025,7 +4056,7 @@ do_parm (void)\n       && init->ts.type == BT_CHARACTER\n       && init->ts.kind == 1)\n     gfc_set_constant_character_len (\n-      mpz_get_si (sym->ts.cl->length->value.integer), init);\n+      mpz_get_si (sym->ts.cl->length->value.integer), init, false);\n \n   sym->value = init;\n   return MATCH_YES;"}, {"sha": "1146bd117961c938eb676b58e177eebbb973712d", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2220652d3f79f773fb25b4d21ea4cbf4406d1df2/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2220652d3f79f773fb25b4d21ea4cbf4406d1df2/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=2220652d3f79f773fb25b4d21ea4cbf4406d1df2", "patch": "@@ -1829,6 +1829,9 @@ check_init_expr (gfc_expr * e)\n \t  break;\n \t}\n \n+      if (gfc_in_match_data ())\n+\tbreak;\n+\n       gfc_error (\"Parameter '%s' at %L has not been declared or is \"\n \t\t \"a variable, which does not reduce to a constant \"\n \t\t \"expression\", e->symtree->n.sym->name, &e->where);\n@@ -1912,7 +1915,8 @@ gfc_match_init_expr (gfc_expr ** result)\n   /* Not all inquiry functions are simplified to constant expressions\n      so it is necessary to call check_inquiry again.  */ \n   if (!gfc_is_constant_expr (expr)\n-\t&& check_inquiry (expr, 1) == FAILURE)\n+\t&& check_inquiry (expr, 1) == FAILURE\n+\t&& !gfc_in_match_data ())\n     {\n       gfc_error (\"Initialization expression didn't reduce %C\");\n       return MATCH_ERROR;"}, {"sha": "695d26d817d986ac284c5de4744bfb0435d105df", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2220652d3f79f773fb25b4d21ea4cbf4406d1df2/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2220652d3f79f773fb25b4d21ea4cbf4406d1df2/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=2220652d3f79f773fb25b4d21ea4cbf4406d1df2", "patch": "@@ -1637,6 +1637,7 @@ typedef struct\n   int warn_surprising;\n   int warn_tabs;\n   int warn_underflow;\n+  int warn_character_truncation;\n   int max_errors;\n \n   int flag_all_intrinsics;\n@@ -1713,6 +1714,10 @@ void gfc_assign_data_value (gfc_expr *, gfc_expr *, mpz_t);\n void gfc_assign_data_value_range (gfc_expr *, gfc_expr *, mpz_t, mpz_t);\n void gfc_advance_section (mpz_t *, gfc_array_ref *, mpz_t *);\n \n+/* decl.c */\n+bool gfc_in_match_data (void);\n+void gfc_set_in_match_data (bool);\n+\n /* scanner.c */\n void gfc_scanner_done_1 (void);\n void gfc_scanner_init_1 (void);"}, {"sha": "3c8089af5662f5140def48fcb5824612c1891a80", "filename": "gcc/fortran/match.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2220652d3f79f773fb25b4d21ea4cbf4406d1df2/gcc%2Ffortran%2Fmatch.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2220652d3f79f773fb25b4d21ea4cbf4406d1df2/gcc%2Ffortran%2Fmatch.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.h?ref=2220652d3f79f773fb25b4d21ea4cbf4406d1df2", "patch": "@@ -130,7 +130,7 @@ match gfc_match_derived_decl (void);\n match gfc_match_implicit_none (void);\n match gfc_match_implicit (void);\n \n-void gfc_set_constant_character_len (int, gfc_expr *);\n+void gfc_set_constant_character_len (int, gfc_expr *, bool);\n \n /* Matchers for attribute declarations */\n match gfc_match_allocatable (void);"}, {"sha": "da8db65dbb160f487482f940a929794647e8fc7e", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2220652d3f79f773fb25b4d21ea4cbf4406d1df2/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2220652d3f79f773fb25b4d21ea4cbf4406d1df2/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=2220652d3f79f773fb25b4d21ea4cbf4406d1df2", "patch": "@@ -309,6 +309,7 @@ set_Wall (void)\n   gfc_option.warn_surprising = 1;\n   gfc_option.warn_tabs = 0;\n   gfc_option.warn_underflow = 1;\n+  gfc_option.warn_character_truncation = 1;\n \n   set_Wunused (1);\n   warn_return_type = 1;"}, {"sha": "44236e576b6248fc06b720db8dc16a5ecefab94c", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 73, "deletions": 18, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2220652d3f79f773fb25b4d21ea4cbf4406d1df2/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2220652d3f79f773fb25b4d21ea4cbf4406d1df2/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=2220652d3f79f773fb25b4d21ea4cbf4406d1df2", "patch": "@@ -5084,6 +5084,28 @@ resolve_code (gfc_code * code, gfc_namespace * ns)\n \t      goto call;\n \t    }\n \n+\t  if (code->expr->ts.type == BT_CHARACTER\n+\t\t&& gfc_option.warn_character_truncation)\n+\t    {\n+\t      int llen = 0, rlen = 0;\n+\t      gfc_symbol *sym;\n+\t      sym = code->expr->symtree->n.sym;\n+\t      if (sym->ts.cl->length->expr_type == EXPR_CONSTANT)\n+\t\tllen = mpz_get_si (sym->ts.cl->length->value.integer);\n+\n+\t      if (code->expr2->expr_type == EXPR_CONSTANT)\n+\t\trlen = code->expr2->value.character.length;\n+\n+\t      else if (code->expr2->ts.cl != NULL\n+\t\t    && code->expr2->ts.cl->length != NULL\n+\t\t    && code->expr2->ts.cl->length->expr_type == EXPR_CONSTANT)\n+\t\trlen = mpz_get_si (code->expr2->ts.cl->length->value.integer);\n+\n+\t      if (rlen && llen && rlen > llen)\n+\t\tgfc_warning_now (\"rhs of CHARACTER assignment at %L will \"\n+\t\t\t\t \"be truncated (%d/%d)\", &code->loc, rlen, llen);\n+\t    }\n+\n \t  if (gfc_pure (NULL))\n \t    {\n \t      if (gfc_impure_variable (code->expr->symtree->n.sym))\n@@ -6435,17 +6457,47 @@ traverse_data_list (gfc_data_variable * var, locus * where)\n {\n   mpz_t trip;\n   iterator_stack frame;\n-  gfc_expr *e;\n+  gfc_expr *e, *start, *end, *step;\n+  try retval = SUCCESS;\n \n   mpz_init (frame.value);\n \n-  mpz_init_set (trip, var->iter.end->value.integer);\n-  mpz_sub (trip, trip, var->iter.start->value.integer);\n-  mpz_add (trip, trip, var->iter.step->value.integer);\n+  start = gfc_copy_expr (var->iter.start);\n+  end = gfc_copy_expr (var->iter.end);\n+  step = gfc_copy_expr (var->iter.step);\n+\n+  if (gfc_simplify_expr (start, 1) == FAILURE\n+\t|| start->expr_type != EXPR_CONSTANT)\n+    {\n+      gfc_error (\"iterator start at %L does not simplify\",\n+\t\t &start->where);\n+      retval = FAILURE;\n+      goto cleanup;\n+    }\n+  if (gfc_simplify_expr (end, 1) == FAILURE\n+\t||  end->expr_type != EXPR_CONSTANT)\n+    {\n+      gfc_error (\"iterator end at %L does not simplify\",\n+\t\t &end->where);\n+      retval = FAILURE;\n+      goto cleanup;\n+    }\n+  if (gfc_simplify_expr (step, 1) == FAILURE\n+\t||  step->expr_type != EXPR_CONSTANT)\n+    {\n+      gfc_error (\"iterator step at %L does not simplify\",\n+\t\t &step->where);\n+      retval = FAILURE;\n+      goto cleanup;\n+    }\n+\n+  mpz_init_set (trip, end->value.integer);\n+  mpz_sub (trip, trip, start->value.integer);\n+  mpz_add (trip, trip, step->value.integer);\n \n-  mpz_div (trip, trip, var->iter.step->value.integer);\n+  mpz_div (trip, trip, step->value.integer);\n \n-  mpz_set (frame.value, var->iter.start->value.integer);\n+  mpz_set (frame.value, start->value.integer);\n \n   frame.prev = iter_stack;\n   frame.variable = var->iter.var->symtree;\n@@ -6456,26 +6508,34 @@ traverse_data_list (gfc_data_variable * var, locus * where)\n       if (traverse_data_var (var->list, where) == FAILURE)\n \t{\n \t  mpz_clear (trip);\n-\t  return FAILURE;\n+\t  retval = FAILURE;\n+\t  goto cleanup;\n \t}\n \n       e = gfc_copy_expr (var->expr);\n       if (gfc_simplify_expr (e, 1) == FAILURE)\n-        {\n-          gfc_free_expr (e);\n-          return FAILURE;\n-        }\n+\t{\n+\t  gfc_free_expr (e);\n+\t  mpz_clear (trip);\n+\t  retval = FAILURE;\n+\t  goto cleanup;\n+\t}\n \n-      mpz_add (frame.value, frame.value, var->iter.step->value.integer);\n+      mpz_add (frame.value, frame.value, step->value.integer);\n \n       mpz_sub_ui (trip, trip, 1);\n     }\n \n   mpz_clear (trip);\n+cleanup:\n   mpz_clear (frame.value);\n \n+  gfc_free_expr (start);\n+  gfc_free_expr (end);\n+  gfc_free_expr (step);\n+\n   iter_stack = frame.prev;\n-  return SUCCESS;\n+  return retval;\n }\n \n \n@@ -6520,11 +6580,6 @@ resolve_data_variables (gfc_data_variable * d)\n \t  if (gfc_resolve_iterator (&d->iter, false) == FAILURE)\n \t    return FAILURE;\n \n-\t  if (d->iter.start->expr_type != EXPR_CONSTANT\n-\t      || d->iter.end->expr_type != EXPR_CONSTANT\n-\t      || d->iter.step->expr_type != EXPR_CONSTANT)\n-\t    gfc_internal_error (\"resolve_data_variables(): Bad iterator\");\n-\n \t  if (resolve_data_variables (d->list) == FAILURE)\n \t    return FAILURE;\n \t}"}, {"sha": "49786c58eccae82a101c9cabb91e8df31897575a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2220652d3f79f773fb25b4d21ea4cbf4406d1df2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2220652d3f79f773fb25b4d21ea4cbf4406d1df2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2220652d3f79f773fb25b4d21ea4cbf4406d1df2", "patch": "@@ -1,3 +1,12 @@\n+2007-01-05  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/23232\n+\t* gfortran.dg/data_implied_do_1.f90: New test.\n+\n+\tPR fortran/27996\n+\tPR fortran/27998\n+\t* gfortran.dg/char_length_1.f90: New test.\n+\n 2007-01-05  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/28116"}, {"sha": "e372343d0b2625bd5ab7b4aa938be4cde1f73ca1", "filename": "gcc/testsuite/gfortran.dg/char_length_1.f90", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2220652d3f79f773fb25b4d21ea4cbf4406d1df2/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_length_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2220652d3f79f773fb25b4d21ea4cbf4406d1df2/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_length_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_length_1.f90?ref=2220652d3f79f773fb25b4d21ea4cbf4406d1df2", "patch": "@@ -0,0 +1,18 @@\n+! { dg-do compile }\n+! { dg-options \"-Wall -std=f2003\" }\n+! Tests the patch for PR27996 and PR27998, in which warnings\n+! or errors were not emitted when the length of character\n+! constants was changed silently.\n+!\n+! Contributed by Tobias Burnus <tobias.burnus@physik.fu-berlin.de> \n+!\n+program test\n+  character(10) :: a(3)\n+  character(10) :: b(3)= &\n+       (/ 'Takata ', 'Tanaka', 'Hayashi' /) ! { dg-error \"same length\" }\n+  character(4) :: c = \"abcde\"  ! { dg-warning \"being truncated\" }\n+  a =  (/ 'Takata', 'Tanaka ', 'Hayashi' /) ! { dg-error \"same length\" }\n+  a =  (/ 'Takata ', 'Tanaka ', 'Hayashi' /)\n+  b = \"abc\"\n+  c = \"abcdefg\"   ! { dg-warning \"will be truncated\" }\n+end program test"}, {"sha": "1cc977c343a4271e7df6b1b4a29020fd1d5c7531", "filename": "gcc/testsuite/gfortran.dg/data_implied_do_1.f90", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2220652d3f79f773fb25b4d21ea4cbf4406d1df2/gcc%2Ftestsuite%2Fgfortran.dg%2Fdata_implied_do_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2220652d3f79f773fb25b4d21ea4cbf4406d1df2/gcc%2Ftestsuite%2Fgfortran.dg%2Fdata_implied_do_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdata_implied_do_1.f90?ref=2220652d3f79f773fb25b4d21ea4cbf4406d1df2", "patch": "@@ -0,0 +1,15 @@\n+! { dg-do run }\n+! Test of the patch for PR23232, in which implied do loop\n+! variables were not permitted in DATA statements.\n+! \n+! Contributed by Roger Ferrer Ib\ufffd\ufffdez <rofi@ya.com> \n+!\n+PROGRAM p\n+  REAL :: TWO_ARRAY (3, 3)\n+  INTEGER :: K, J\n+  DATA ((TWO_ARRAY (K, J), K = 1, J-1), J = 1, 3) /3 * 1.0/\n+  DATA ((TWO_ARRAY (K, J), K = J, 3), J = 1, 3) /6 * 2.0/\n+  if (any (reshape (two_array, (/9/)) &\n+      .ne. (/2.0,2.0,2.0,1.0,2.0,2.0,1.0,1.0,2.0/))) call abort ()\n+END PROGRAM\n+"}]}