{"sha": "e6789bef7a31aac7b091379c1cd1df6cf383ac87", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY3ODliZWY3YTMxYWFjN2IwOTEzNzljMWNkMWRmNmNmMzgzYWM4Nw==", "commit": {"author": {"name": "Keith Seitz", "email": "keiths@redhat.com", "date": "2006-09-01T17:42:23Z"}, "committer": {"name": "Keith Seitz", "email": "kseitz@gcc.gnu.org", "date": "2006-09-01T17:42:23Z"}, "message": "jvm.h (_Jv_JVMTI_Init): Declare.\n\n        * include/jvm.h (_Jv_JVMTI_Init): Declare.\n        * jvmti.cc (_Jv_JVMTI_Init): New function.\n        * prims.cc (_Jv_CreateJavaVM): Initialize JVMTI.\n\n        * jvmti.cc (ILLEGAL_ARGUMENT): New macro.\n        (_Jv_JVMTI_Allocate): Use ILLEGAL_ARUMENT.\n\n        * jvmti.cc (_jvmtiEnvironments): New linked list of\n        JVMTI environments.\n        (FOREACH_ENVIRONMENT): New macro.\n        (_envListLock): New object to act as synchronization lock\n        for _jvmtiEnvironments.\n        (_Jv_JVMTI_DisposeEnvironment): Check for NULL environment.\n        Remove the environment from the list of known environments.\n        (_Jv_GetJVMTIEnv): Add the new environment to the list\n        of known environments.\n\nFrom-SVN: r116635", "tree": {"sha": "14cb0bf672d27c20af811784d0d98343be4498ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14cb0bf672d27c20af811784d0d98343be4498ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6789bef7a31aac7b091379c1cd1df6cf383ac87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6789bef7a31aac7b091379c1cd1df6cf383ac87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6789bef7a31aac7b091379c1cd1df6cf383ac87", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6789bef7a31aac7b091379c1cd1df6cf383ac87/comments", "author": {"login": "shtiek", "id": 107581324, "node_id": "U_kgDOBmmPjA", "avatar_url": "https://avatars.githubusercontent.com/u/107581324?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shtiek", "html_url": "https://github.com/shtiek", "followers_url": "https://api.github.com/users/shtiek/followers", "following_url": "https://api.github.com/users/shtiek/following{/other_user}", "gists_url": "https://api.github.com/users/shtiek/gists{/gist_id}", "starred_url": "https://api.github.com/users/shtiek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shtiek/subscriptions", "organizations_url": "https://api.github.com/users/shtiek/orgs", "repos_url": "https://api.github.com/users/shtiek/repos", "events_url": "https://api.github.com/users/shtiek/events{/privacy}", "received_events_url": "https://api.github.com/users/shtiek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "39ac09770991ae0a9052fd0865159b0b17d22a3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39ac09770991ae0a9052fd0865159b0b17d22a3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39ac09770991ae0a9052fd0865159b0b17d22a3d"}], "stats": {"total": 99, "additions": 95, "deletions": 4}, "files": [{"sha": "b880c56ec07e38741482506d02fdcdebd403bbdd", "filename": "libjava/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6789bef7a31aac7b091379c1cd1df6cf383ac87/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6789bef7a31aac7b091379c1cd1df6cf383ac87/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=e6789bef7a31aac7b091379c1cd1df6cf383ac87", "patch": "@@ -1,3 +1,22 @@\n+2006-09-01  Keith Seitz  <keiths@redhat.com>\n+\n+\t* include/jvm.h (_Jv_JVMTI_Init): Declare.\n+\t* jvmti.cc (_Jv_JVMTI_Init): New function.\n+\t* prims.cc (_Jv_CreateJavaVM): Initialize JVMTI.\n+\n+\t* jvmti.cc (ILLEGAL_ARGUMENT): New macro.\n+\t(_Jv_JVMTI_Allocate): Use ILLEGAL_ARUMENT.\n+\n+\t* jvmti.cc (_jvmtiEnvironments): New linked list of\n+\tJVMTI environments.\n+\t(FOREACH_ENVIRONMENT): New macro.\n+\t(_envListLock): New object to act as synchronization lock\n+\tfor _jvmtiEnvironments.\n+\t(_Jv_JVMTI_DisposeEnvironment): Check for NULL environment.\n+\tRemove the environment from the list of known environments.\n+\t(_Jv_GetJVMTIEnv): Add the new environment to the list\n+\tof known environments.\n+\n 2006-09-01  Gary Benson  <gbenson@redhat.com>\n \n \t* java/net/InetAddress.java (getLocalHost): Refactor to avoid"}, {"sha": "88b45be983db61315d91b2563afa2d33997dcb58", "filename": "libjava/include/jvm.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6789bef7a31aac7b091379c1cd1df6cf383ac87/libjava%2Finclude%2Fjvm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6789bef7a31aac7b091379c1cd1df6cf383ac87/libjava%2Finclude%2Fjvm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjvm.h?ref=e6789bef7a31aac7b091379c1cd1df6cf383ac87", "patch": "@@ -573,10 +573,13 @@ void _Jv_FreeJNIEnv (_Jv_JNIEnv *);\n struct _Jv_JavaVM;\n _Jv_JavaVM *_Jv_GetJavaVM (); \n \n-/* Get the JVMTI environment */\n+/* Get a JVMTI environment */\n struct _Jv_JVMTIEnv;\n _Jv_JVMTIEnv *_Jv_GetJVMTIEnv (void);\n \n+/* Initialize JVMTI */\n+extern void _Jv_JVMTI_Init (void);\n+\n // Some verification functions from defineclass.cc.\n bool _Jv_VerifyFieldSignature (_Jv_Utf8Const*sig);\n bool _Jv_VerifyMethodSignature (_Jv_Utf8Const*sig);"}, {"sha": "d2d8f52f5b5c87a7d5265613c843522c44419a78", "filename": "libjava/jvmti.cc", "status": "modified", "additions": 71, "deletions": 3, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6789bef7a31aac7b091379c1cd1df6cf383ac87/libjava%2Fjvmti.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6789bef7a31aac7b091379c1cd1df6cf383ac87/libjava%2Fjvmti.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjvmti.cc?ref=e6789bef7a31aac7b091379c1cd1df6cf383ac87", "patch": "@@ -22,6 +22,7 @@ details.  */\n #include <gnu/gcj/runtime/BootClassLoader.h>\n #include <java/lang/Class.h>\n #include <java/lang/ClassLoader.h>\n+#include <java/lang/Object.h>\n #include <java/lang/Thread.h>\n #include <java/lang/Throwable.h>\n #include <java/lang/VMClassLoader.h>\n@@ -39,6 +40,20 @@ struct _Jv_rawMonitorID\n   _Jv_ConditionVariable_t condition;\n };\n \n+/* A simple linked list of all JVMTI environments. Since\n+   events must be delivered to environments in the order\n+   in which the environments were created, new environments\n+   are added to the end of the list. */\n+struct jvmti_env_list\n+{\n+  jvmtiEnv *env;\n+  struct jvmti_env_list *next;\n+};\n+static struct jvmti_env_list *_jvmtiEnvironments = NULL;\n+static java::lang::Object *_envListLock = NULL;\n+#define FOREACH_ENVIRONMENT(Ele) \\\n+  for (Ele = _jvmtiEnvironments; Ele != NULL; Ele = Ele->next)\n+\n // Some commonly-used checks\n \n #define THREAD_DEFAULT_TO_CURRENT(jthread)\t\t\t\t\\\n@@ -58,6 +73,9 @@ struct _Jv_rawMonitorID\n #define NULL_CHECK(Ptr)\t\t\t\t\t\\\n   if (Ptr == NULL) return JVMTI_ERROR_NULL_POINTER;\n \n+#define ILLEGAL_ARGUMENT(Cond)\t\t\t\t\\\n+  if ((Cond)) return JVMTI_ERROR_ILLEGAL_ARGUMENT\n+\n static jvmtiError JNICALL\n _Jv_JVMTI_SuspendThread (MAYBE_UNUSED jvmtiEnv *env, jthread thread)\n {\n@@ -195,8 +213,7 @@ static jvmtiError JNICALL\n _Jv_JVMTI_Allocate (MAYBE_UNUSED jvmtiEnv *env, jlong size,\n \t\t    unsigned char **result)\n {\n-  if (size < 0)\n-    return JVMTI_ERROR_ILLEGAL_ARGUMENT;\n+  ILLEGAL_ARGUMENT (size < 0);\n   NULL_CHECK (result);\n   if (size == 0)\n     *result = NULL;\n@@ -437,7 +454,32 @@ _Jv_JVMTI_GetJNIFunctionTable (MAYBE_UNUSED jvmtiEnv *env,\n static jvmtiError JNICALL\n _Jv_JVMTI_DisposeEnvironment (jvmtiEnv *env)\n {\n-  // All we need to do is free memory allocated by _Jv_GetJVMTIEnv\n+  NULL_CHECK (env);\n+\n+  if (_jvmtiEnvironments == NULL)\n+    return JVMTI_ERROR_INVALID_ENVIRONMENT;\n+  else\n+    {\n+      JvSynchronize dummy (_envListLock);\n+      if (_jvmtiEnvironments->env == env)\n+\t{\n+\t  _Jv_Free (_jvmtiEnvironments);\n+\t  _jvmtiEnvironments = _jvmtiEnvironments->next;\n+\t}\n+      else\n+\t{\n+\t  struct jvmti_env_list *e = _jvmtiEnvironments; \n+\t  while (e->next != NULL && e->next->env != env)\n+\t    e = e->next;\n+\t  if (e->next == NULL)\n+\t    return JVMTI_ERROR_INVALID_ENVIRONMENT;\n+\n+\t  struct jvmti_env_list *next = e->next->next;\n+\t  _Jv_Free (e->next);\n+\t  e->next = next;\n+\t}\n+    }\n+\n   _Jv_Free (env);\n   return JVMTI_ERROR_NONE;\n }\n@@ -750,5 +792,31 @@ _Jv_GetJVMTIEnv (void)\n   _Jv_JVMTIEnv *env\n     = (_Jv_JVMTIEnv *) _Jv_MallocUnchecked (sizeof (_Jv_JVMTIEnv));\n   env->p = &_Jv_JVMTI_Interface;\n+\n+  {\n+    JvSynchronize dummy (_envListLock);\n+    struct jvmti_env_list *element\n+      = (struct jvmti_env_list *) _Jv_MallocUnchecked (sizeof (struct jvmti_env_list));\n+    element->env = env;\n+    element->next = NULL;\n+\n+    if (_jvmtiEnvironments == NULL)\n+      _jvmtiEnvironments = element;\n+    else\n+      {\n+\tstruct jvmti_env_list *e;\n+\tfor (e = _jvmtiEnvironments; e->next != NULL; e = e->next)\n+\t  ;\n+\te->next = element;\n+      }\n+  }\n+\n   return env;\n }\n+\n+void\n+_Jv_JVMTI_Init ()\n+{\n+  _jvmtiEnvironments = NULL;\n+  _envListLock = new java::lang::Object ();\n+}"}, {"sha": "3db82c19fa7fa481cb0966a7c0ab044fcc18a18b", "filename": "libjava/prims.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6789bef7a31aac7b091379c1cd1df6cf383ac87/libjava%2Fprims.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6789bef7a31aac7b091379c1cd1df6cf383ac87/libjava%2Fprims.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fprims.cc?ref=e6789bef7a31aac7b091379c1cd1df6cf383ac87", "patch": "@@ -1484,6 +1484,7 @@ _Jv_CreateJavaVM (JvVMInitArgs* vm_args)\n   _Jv_platform_initialize ();\n \n   _Jv_JNI_Init ();\n+  _Jv_JVMTI_Init ();\n \n   _Jv_GCInitializeFinalizers (&::gnu::gcj::runtime::FinalizerThread::finalizerReady);\n "}]}