{"sha": "7f3af6d379c17fc35e3e2ec3151ae98862191f7c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2YzYWY2ZDM3OWMxN2ZjMzVlM2UyZWMzMTUxYWU5ODg2MjE5MWY3Yw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2014-01-18T12:42:10Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2014-01-18T12:42:10Z"}, "message": "i386.c (ix86_adjust_cost): Reorder PROCESSOR_K8 and PROCESSOR_ATHLON to simplify code.\n\n\t* config/i386/i386.c (ix86_adjust_cost): Reorder PROCESSOR_K8\n\tand PROCESSOR_ATHLON to simplify code.  Move \"memory\" calculation.\n\n\t* config/i386/i386.md (*swap<mode>): Rename from swap<mode>.\n\nFrom-SVN: r206753", "tree": {"sha": "e7f2e30454af4e78877467f358c9ed2610df4757", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7f2e30454af4e78877467f358c9ed2610df4757"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f3af6d379c17fc35e3e2ec3151ae98862191f7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f3af6d379c17fc35e3e2ec3151ae98862191f7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f3af6d379c17fc35e3e2ec3151ae98862191f7c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f3af6d379c17fc35e3e2ec3151ae98862191f7c/comments", "author": null, "committer": null, "parents": [{"sha": "fa5d6c752e9b9bf26be73a5da4e68ff243f0ac32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa5d6c752e9b9bf26be73a5da4e68ff243f0ac32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa5d6c752e9b9bf26be73a5da4e68ff243f0ac32"}], "stats": {"total": 70, "additions": 36, "deletions": 34}, "files": [{"sha": "379ef8eb5480f397aef035ff6c4ab245a6efe0f7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f3af6d379c17fc35e3e2ec3151ae98862191f7c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f3af6d379c17fc35e3e2ec3151ae98862191f7c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7f3af6d379c17fc35e3e2ec3151ae98862191f7c", "patch": "@@ -1,3 +1,12 @@\n+2014-01-18  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (ix86_adjust_cost): Reorder PROCESSOR_K8\n+\tand PROCESSOR_ATHLON to simplify code.  Move \"memory\" calculation.\n+\n+2014-01-18  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*swap<mode>): Rename from swap<mode>.\n+\n 2014-01-18  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/58944\n@@ -12,8 +21,7 @@\n \n 2014-01-17  H.J. Lu  <hongjiu.lu@intel.com>\n \n-\t* config/i386/i386.c (ix86_split_lea_for_addr): Fix a comment\n-\ttypo.\n+\t* config/i386/i386.c (ix86_split_lea_for_addr): Fix a comment typo.\n \n 2014-01-17  John David Anglin  <danglin@gcc.gnu.org>\n \n@@ -92,8 +100,8 @@\n \t* config/i386/i386.h (TARGET_INTEL): New.\n \t(TARGET_AVOID_LEA_FOR_ADDR): Likewise.\n \t(processor_type): Add PROCESSOR_INTEL.\n-\t* config/i386/x86-tune.def: Support m_INTEL. Duplicate\n-\tm_SILVERMONT.  Add X86_TUNE_AVOID_LEA_FOR_ADDR.\n+\t* config/i386/x86-tune.def: Support m_INTEL. Duplicate m_SILVERMONT.\n+\tAdd X86_TUNE_AVOID_LEA_FOR_ADDR.\n \n 2014-01-17  Marek Polacek  <polacek@redhat.com>\n \n@@ -233,16 +241,14 @@\n \t* expr.c (expand_expr_real_1): Handle init == NULL_TREE.\n \n \tPR target/59839\n-\t* config/i386/i386.c (ix86_expand_builtin): If target doesn't\n-\tsatisfy operand 0 predicate for gathers, use a new pseudo as\n-\tsubtarget.\n+\t* config/i386/i386.c (ix86_expand_builtin): If target doesn't satisfy\n+\toperand 0 predicate for gathers, use a new pseudo as subtarget.\n \n 2014-01-16  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR middle-end/59609\n-\t* lra-constraints.c (process_alt_operands): Add printing debug\n-\tinfo.  Check absence of input/output reloads for matched operands\n-\ttoo.\n+\t* lra-constraints.c (process_alt_operands): Add printing debug info.\n+\tCheck absence of input/output reloads for matched operands too.\n \n 2014-01-16  Vladimir Makarov  <vmakarov@redhat.com>\n \n@@ -287,8 +293,7 @@\n \t(output_constructor_regular_field): Likewise.  Also do not\n \tcomplain if the total number of bytes emitted is now greater\n \tthan the expected fieldpos.\n-\t* output.h (output_constant): Update prototype and descriptive\n-\tcomment.\n+\t* output.h (output_constant): Update prototype and descriptive comment.\n \n 2014-01-16  Marek Polacek  <polacek@redhat.com>\n \n@@ -785,12 +790,10 @@\n \t(partition_stack_vars): Likewise.\n \t* asan.c (asan_emit_stack_protection): Optionally disable\n \tafter return stack usage.\n-\t(instrument_derefs): Optionally disable memory\n-\taccess instrumentation.\n+\t(instrument_derefs): Optionally disable memory access instrumentation.\n \t(instrument_builtin_call): Likewise.\n \t(instrument_strlen_call): Likewise.\n-\t(asan_protect_global): Optionally disable\n-\tglobal variables protection.\n+\t(asan_protect_global): Optionally disable global variables protection.\n \t* doc/invoke.texi: Added doc for new options.\n \t* params.def: Added new options.\n \t* params.h: Likewise.\n@@ -1082,8 +1085,7 @@\n 2014-01-03  Andreas Schwab  <schwab@linux-m68k.org>\n \n \t* config/m68k/m68k.c (handle_move_double): Handle pushes with\n-\toverlapping registers also for registers other than the stack\n-\tpointer.\n+\toverlapping registers also for registers other than the stack pointer.\n \n 2014-01-03  Marek Polacek  <polacek@redhat.com>\n "}, {"sha": "ff210c8009d8f403057c933bc0790adb130a7a26", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f3af6d379c17fc35e3e2ec3151ae98862191f7c/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f3af6d379c17fc35e3e2ec3151ae98862191f7c/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=7f3af6d379c17fc35e3e2ec3151ae98862191f7c", "patch": "@@ -25491,8 +25491,6 @@ ix86_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n       break;\n \n     case PROCESSOR_PENTIUMPRO:\n-      memory = get_attr_memory (insn);\n-\n       /* INT->FP conversion is expensive.  */\n       if (get_attr_fp_int_src (dep_insn))\n \tcost += 5;\n@@ -25505,6 +25503,8 @@ ix86_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n \t  && MEM_P (SET_DEST (set2)))\n \tcost += 1;\n \n+      memory = get_attr_memory (insn);\n+\n       /* Show ability of reorder buffer to hide latency of load by executing\n \t in parallel with previous instruction in case\n \t previous instruction is not needed to compute the address.  */\n@@ -25522,10 +25522,8 @@ ix86_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n       break;\n \n     case PROCESSOR_K6:\n-      memory = get_attr_memory (insn);\n-\n-      /* The esp dependency is resolved before the instruction is really\n-         finished.  */\n+     /* The esp dependency is resolved before\n+\tthe instruction is really finished.  */\n       if ((insn_type == TYPE_PUSH || insn_type == TYPE_POP)\n \t  && (dep_insn_type == TYPE_PUSH || dep_insn_type == TYPE_POP))\n \treturn 1;\n@@ -25534,6 +25532,8 @@ ix86_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n       if (get_attr_fp_int_src (dep_insn))\n \tcost += 5;\n \n+      memory = get_attr_memory (insn);\n+\n       /* Show ability of reorder buffer to hide latency of load by executing\n \t in parallel with previous instruction in case\n \t previous instruction is not needed to compute the address.  */\n@@ -25552,8 +25552,6 @@ ix86_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n \t}\n       break;\n \n-    case PROCESSOR_ATHLON:\n-    case PROCESSOR_K8:\n     case PROCESSOR_AMDFAM10:\n     case PROCESSOR_BDVER1:\n     case PROCESSOR_BDVER2:\n@@ -25562,13 +25560,15 @@ ix86_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n     case PROCESSOR_BTVER1:\n     case PROCESSOR_BTVER2:\n     case PROCESSOR_GENERIC:\n-      memory = get_attr_memory (insn);\n-\n       /* Stack engine allows to execute push&pop instructions in parall.  */\n-      if (((insn_type == TYPE_PUSH || insn_type == TYPE_POP)\n-\t   && (dep_insn_type == TYPE_PUSH || dep_insn_type == TYPE_POP))\n-\t  && (!TARGET_ATHLON && !TARGET_K8))\n+      if ((insn_type == TYPE_PUSH || insn_type == TYPE_POP)\n+\t  && (dep_insn_type == TYPE_PUSH || dep_insn_type == TYPE_POP))\n \treturn 0;\n+      /* FALLTHRU */\n+\n+    case PROCESSOR_ATHLON:\n+    case PROCESSOR_K8:\n+      memory = get_attr_memory (insn);\n \n       /* Show ability of reorder buffer to hide latency of load by executing\n \t in parallel with previous instruction in case\n@@ -25600,13 +25600,13 @@ ix86_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n     case PROCESSOR_NEHALEM:\n     case PROCESSOR_SANDYBRIDGE:\n     case PROCESSOR_HASWELL:\n-      memory = get_attr_memory (insn);\n-\n       /* Stack engine allows to execute push&pop instructions in parall.  */\n       if ((insn_type == TYPE_PUSH || insn_type == TYPE_POP)\n \t  && (dep_insn_type == TYPE_PUSH || dep_insn_type == TYPE_POP))\n \treturn 0;\n \n+      memory = get_attr_memory (insn);\n+\n       /* Show ability of reorder buffer to hide latency of load by executing\n \t in parallel with previous instruction in case\n \t previous instruction is not needed to compute the address.  */"}, {"sha": "e30f389be1d28d1179ec51a19b7367f4f0da348a", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f3af6d379c17fc35e3e2ec3151ae98862191f7c/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f3af6d379c17fc35e3e2ec3151ae98862191f7c/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=7f3af6d379c17fc35e3e2ec3151ae98862191f7c", "patch": "@@ -2466,7 +2466,7 @@\n    (set_attr \"memory\" \"load\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"swap<mode>\"\n+(define_insn \"*swap<mode>\"\n   [(set (match_operand:SWI48 0 \"register_operand\" \"+r\")\n \t(match_operand:SWI48 1 \"register_operand\" \"+r\"))\n    (set (match_dup 1)"}]}