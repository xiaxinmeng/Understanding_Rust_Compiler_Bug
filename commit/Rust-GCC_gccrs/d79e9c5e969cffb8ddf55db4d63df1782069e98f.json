{"sha": "d79e9c5e969cffb8ddf55db4d63df1782069e98f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDc5ZTljNWU5NjljZmZiOGRkZjU1ZGI0ZDYzZGYxNzgyMDY5ZTk4Zg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-09-30T22:27:44Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-09-30T22:27:44Z"}, "message": "compiler: change escape maps to hash tables\n    \n    Also use just one table lookup, not two.\n    \n    Reviewed-on: https://go-review.googlesource.com/c/gofrontend/+/197759\n\nFrom-SVN: r276382", "tree": {"sha": "773a3cf6c492ef19cafd3a41abcd9471f1340e02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/773a3cf6c492ef19cafd3a41abcd9471f1340e02"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d79e9c5e969cffb8ddf55db4d63df1782069e98f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d79e9c5e969cffb8ddf55db4d63df1782069e98f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d79e9c5e969cffb8ddf55db4d63df1782069e98f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d79e9c5e969cffb8ddf55db4d63df1782069e98f/comments", "author": null, "committer": null, "parents": [{"sha": "6ba3c0f71767c2c98d21cda5add80ef03ecd3e37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ba3c0f71767c2c98d21cda5add80ef03ecd3e37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ba3c0f71767c2c98d21cda5add80ef03ecd3e37"}], "stats": {"total": 62, "additions": 31, "deletions": 31}, "files": [{"sha": "f7c45eeb0d38d83473c9d2d2818d7571d6146b36", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d79e9c5e969cffb8ddf55db4d63df1782069e98f/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d79e9c5e969cffb8ddf55db4d63df1782069e98f/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=d79e9c5e969cffb8ddf55db4d63df1782069e98f", "patch": "@@ -1,4 +1,4 @@\n-10a1671d94ddc0c39f2f4b039e5ea33358f414c0\n+07faafda5fbd66a710153814f30d93c91461e7cb\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "bfd1a39d7e4e4a122637b27ecac52f65fa60ed2e", "filename": "gcc/go/gofrontend/escape.cc", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d79e9c5e969cffb8ddf55db4d63df1782069e98f/gcc%2Fgo%2Fgofrontend%2Fescape.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d79e9c5e969cffb8ddf55db4d63df1782069e98f/gcc%2Fgo%2Fgofrontend%2Fescape.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fescape.cc?ref=d79e9c5e969cffb8ddf55db4d63df1782069e98f", "patch": "@@ -579,51 +579,48 @@ Node::is_sink() const\n   return false;\n }\n \n-std::map<Named_object*, Node*> Node::objects;\n-std::map<Expression*, Node*> Node::expressions;\n-std::map<Statement*, Node*> Node::statements;\n+Unordered_map(Named_object*, Node*) Node::objects;\n+Unordered_map(Expression*, Node*) Node::expressions;\n+Unordered_map(Statement*, Node*) Node::statements;\n std::vector<Node*> Node::indirects;\n \n // Make a object node or return a cached node for this object.\n \n Node*\n Node::make_node(Named_object* no)\n {\n-  if (Node::objects.find(no) != Node::objects.end())\n-    return Node::objects[no];\n-\n-  Node* n = new Node(no);\n-  std::pair<Named_object*, Node*> val(no, n);\n-  Node::objects.insert(val);\n-  return n;\n+  std::pair<Named_object*, Node*> val(no, NULL);\n+  std::pair<Unordered_map(Named_object*, Node*)::iterator, bool> ins =\n+    Node::objects.insert(val);\n+  if (ins.second)\n+    ins.first->second = new Node(no);\n+  return ins.first->second;\n }\n \n // Make an expression node or return a cached node for this expression.\n \n Node*\n Node::make_node(Expression* e)\n {\n-  if (Node::expressions.find(e) != Node::expressions.end())\n-    return Node::expressions[e];\n-\n-  Node* n = new Node(e);\n-  std::pair<Expression*, Node*> val(e, n);\n-  Node::expressions.insert(val);\n-  return n;\n+  std::pair<Expression*, Node*> val(e, NULL);\n+  std::pair<Unordered_map(Expression*, Node*)::iterator, bool> ins =\n+    Node::expressions.insert(val);\n+  if (ins.second)\n+    ins.first->second = new Node(e);\n+  return ins.first->second;\n }\n \n // Make a statement node or return a cached node for this statement.\n \n Node*\n Node::make_node(Statement* s)\n {\n-  if (Node::statements.find(s) != Node::statements.end())\n-    return Node::statements[s];\n-\n-  Node* n = new Node(s);\n-  std::pair<Statement*, Node*> val(s, n);\n-  Node::statements.insert(val);\n-  return n;\n+  std::pair<Statement*, Node*> val(s, NULL);\n+  std::pair<Unordered_map(Statement*, Node*)::iterator, bool> ins =\n+    Node::statements.insert(val);\n+  if (ins.second)\n+    ins.first->second = new Node(s);\n+  return ins.first->second;\n }\n \n // Make an indirect node with given child.\n@@ -3447,19 +3444,22 @@ Gogo::reclaim_escape_nodes()\n void\n Node::reclaim_nodes()\n {\n-  for (std::map<Named_object*, Node*>::iterator p = Node::objects.begin();\n+  for (Unordered_map(Named_object*, Node*)::iterator p =\n+\t Node::objects.begin();\n        p != Node::objects.end();\n        ++p)\n     delete p->second;\n   Node::objects.clear();\n \n-  for (std::map<Expression*, Node*>::iterator p = Node::expressions.begin();\n+  for (Unordered_map(Expression*, Node*)::iterator p =\n+\t Node::expressions.begin();\n        p != Node::expressions.end();\n        ++p)\n     delete p->second;\n   Node::expressions.clear();\n \n-  for (std::map<Statement*, Node*>::iterator p = Node::statements.begin();\n+  for (Unordered_map(Statement*, Node*)::iterator p =\n+\t Node::statements.begin();\n        p != Node::statements.end();\n        ++p)\n     delete p->second;"}, {"sha": "e97b5298b7451ade5c793f4ebab29c6246d444dd", "filename": "gcc/go/gofrontend/escape.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d79e9c5e969cffb8ddf55db4d63df1782069e98f/gcc%2Fgo%2Fgofrontend%2Fescape.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d79e9c5e969cffb8ddf55db4d63df1782069e98f/gcc%2Fgo%2Fgofrontend%2Fescape.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fescape.h?ref=d79e9c5e969cffb8ddf55db4d63df1782069e98f", "patch": "@@ -329,9 +329,9 @@ class Node\n   Node* child_;\n \n   // Cache all the Nodes created via Node::make_node to make the API simpler.\n-  static std::map<Named_object*, Node*> objects;\n-  static std::map<Expression*, Node*> expressions;\n-  static std::map<Statement*, Node*> statements;\n+  static Unordered_map(Named_object*, Node*) objects;\n+  static Unordered_map(Expression*, Node*) expressions;\n+  static Unordered_map(Statement*, Node*) statements;\n \n   // Collection of all NODE_INDIRECT Nodes, used for reclaiming memory. This\n   // is not a cache -- each make_indirect_node will make a fresh Node."}]}