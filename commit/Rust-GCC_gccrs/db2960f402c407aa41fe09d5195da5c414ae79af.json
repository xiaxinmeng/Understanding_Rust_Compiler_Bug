{"sha": "db2960f402c407aa41fe09d5195da5c414ae79af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGIyOTYwZjQwMmM0MDdhYTQxZmUwOWQ1MTk1ZGE1YzQxNGFlNzlhZg==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2007-09-05T14:24:54Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2007-09-05T14:24:54Z"}, "message": "Add target hook invoked when cfun changes.\n\n2007-09-05  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tgcc/\n\tAdd target hook invoked when cfun changes.\n\n\t* doc/tm.texi (TARGET_SET_CURRENT_FUNCTION): Document.\n\t* target.h (struct gcc_target): Add set_current_function.\n\t* target-def.h (TARGET_SET_CURRENT_FUNCTION): Define.\n\t(TARGET_INITIALIZER): Add initializer for set_current_function.\n\t* tree.h (push_struct_function): New.\n\t* tree-inline.h (push_cfun, pop_cfun): Move declarations to...\n\t* function.h: Here.\n\t(set_cfun): Declare.\n\t* tree-inline.c (cfun_stack, push_cfun, pop_cfun): Moved to...\n\t* function.c:  Here.\n\t(push_function_context_to): Use allocate_struct_function\n\tto create null context, not init_dummy_function_start.  Use set_cfun.\n\t(pop_function_context_from): Use set_cfun.\n\t(in_dummy_function): New.\n\t(invoke_set_current_function_hook): New.\n\t(set_cfun): New.\n\t(push_cfun, pop_cfun): Use set_cfun.\n\t(push_struct_function): New.\n\t(allocate_struct_function): Call invoke_set_current_function_hook\n\tbefore returning.\n\t(prepare_function_start): Don't set cfun here.  Remove unused\n\targument; fix all callers.\n\t(init_dummy_function_start): Fiddle with in_dummy_function.  Call\n\tpush_struct_function.\n\t(init_function_start): Set cfun here.\n\t(expand_dummy_function_end): Fiddle with in_dummy_function.  Pop cfun.\n\t* omp-low.c (create_omp_child_function): Use push_struct_function\n\tand pop_cfun to save/restore state.\n\t(expand_omp_parallel): Remove unused saved_cfun variable.\n\t* cgraphunit.c (ipa_passes): Use set_cfun.\n\t* gimple-low.c (record_vars_into): Use push_cfun/pop_cfun here.\n\t* dwarf2out.c (dwarf2out_abstract_function): Likewise.\n\t* matrix-reorg.c (transform_allocation_sites): Likewise.\n\t(matrix_reorg): Use set_cfun.\n\t* gimplify.c (gimplify_function_tree): Use push_cfun/pop_cfun here.\n\t* tree-optimize.c (tree_rest_of_compilation): Remove one redundant\n\tassignment to cfun; use set_cfun for the other.\n\t* tree-cfg.c (move_sese_region_to_fn): Use set_cfun.\n\t(dump_function_to_file): Use push_cfun/pop_cfun here.\n\t* c-decl.c (finish_function): Use set_cfun.\n\n\tgcc/ada/\n\t* trans.c (Compilation_unit_to_gnu): Use set_cfun.\n\t* utils.c (end_subprog_body): Likewise.\n\n\tgcc/cp/\n\t* decl.c (finish_function): Use set_cfun.\n\t* method.c (use_thunk): Likewise.\n\n\tgcc/fortran/\n\t* trans-decl.c (build_entry_thunks): Use set_cfun.\n\t(gfc_generate_function_code): Likewise.\n\n\tgcc/java/\n\t* decl.c (finish_method): Use set_cfun.\n\n\tgcc/treelang/\n\t* treetree.c (tree_code_create_function_wrapup):  Use set_cfun.\n\nFrom-SVN: r128132", "tree": {"sha": "62913df8af7e441af79b5b56d4d9cfe14bbd53e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62913df8af7e441af79b5b56d4d9cfe14bbd53e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db2960f402c407aa41fe09d5195da5c414ae79af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db2960f402c407aa41fe09d5195da5c414ae79af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db2960f402c407aa41fe09d5195da5c414ae79af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db2960f402c407aa41fe09d5195da5c414ae79af/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e643dc23733beeb665a6841f8afe54b80388a459", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e643dc23733beeb665a6841f8afe54b80388a459", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e643dc23733beeb665a6841f8afe54b80388a459"}], "stats": {"total": 337, "additions": 242, "deletions": 95}, "files": [{"sha": "cf5891362905d47d74ebcf0957a550e1b480d9fe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db2960f402c407aa41fe09d5195da5c414ae79af/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db2960f402c407aa41fe09d5195da5c414ae79af/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=db2960f402c407aa41fe09d5195da5c414ae79af", "patch": "@@ -1,3 +1,48 @@\n+2007-09-05  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\tAdd target hook invoked when cfun changes.\n+\n+\t* doc/tm.texi (TARGET_SET_CURRENT_FUNCTION): Document.\n+\t* target.h (struct gcc_target): Add set_current_function.\n+\t* target-def.h (TARGET_SET_CURRENT_FUNCTION): Define.\n+\t(TARGET_INITIALIZER): Add initializer for set_current_function.\n+\t* tree.h (push_struct_function): New.\n+\t* tree-inline.h (push_cfun, pop_cfun): Move declarations to...\n+\t* function.h: Here.\n+\t(set_cfun): Declare.\n+\t* tree-inline.c (cfun_stack, push_cfun, pop_cfun): Moved to...\n+\t* function.c:  Here.\n+\t(push_function_context_to): Use allocate_struct_function\n+\tto create null context, not init_dummy_function_start.  Use set_cfun.\n+\t(pop_function_context_from): Use set_cfun.\n+\t(in_dummy_function): New.\n+\t(invoke_set_current_function_hook): New.\n+\t(set_cfun): New.\n+\t(push_cfun, pop_cfun): Use set_cfun.\n+\t(push_struct_function): New.\n+\t(allocate_struct_function): Call invoke_set_current_function_hook\n+\tbefore returning.\n+\t(prepare_function_start): Don't set cfun here.  Remove unused\n+\targument; fix all callers.\n+\t(init_dummy_function_start): Fiddle with in_dummy_function.  Call\n+\tpush_struct_function.\n+\t(init_function_start): Set cfun here.\n+\t(expand_dummy_function_end): Fiddle with in_dummy_function.  Pop cfun.\n+\t* omp-low.c (create_omp_child_function): Use push_struct_function\n+\tand pop_cfun to save/restore state.\n+\t(expand_omp_parallel): Remove unused saved_cfun variable.\n+\t* cgraphunit.c (ipa_passes): Use set_cfun.\n+\t* gimple-low.c (record_vars_into): Use push_cfun/pop_cfun here.\n+\t* dwarf2out.c (dwarf2out_abstract_function): Likewise.\n+\t* matrix-reorg.c (transform_allocation_sites): Likewise.\n+\t(matrix_reorg): Use set_cfun.\n+\t* gimplify.c (gimplify_function_tree): Use push_cfun/pop_cfun here.\n+\t* tree-optimize.c (tree_rest_of_compilation): Remove one redundant\n+\tassignment to cfun; use set_cfun for the other.\n+\t* tree-cfg.c (move_sese_region_to_fn): Use set_cfun.\n+\t(dump_function_to_file): Use push_cfun/pop_cfun here.\n+\t* c-decl.c (finish_function): Use set_cfun.\n+\n 2007-09-05  Kenneth Zadeck <zadeck@naturalbridge.com>\n \n \t* regrename.c (rerename_optimize):  Use deferred rescanning and"}, {"sha": "30eab6919f972f988c40336583b9fc4e1c8ba3e8", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db2960f402c407aa41fe09d5195da5c414ae79af/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db2960f402c407aa41fe09d5195da5c414ae79af/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=db2960f402c407aa41fe09d5195da5c414ae79af", "patch": "@@ -1,3 +1,8 @@\n+2007-09-05  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* trans.c (Compilation_unit_to_gnu): Use set_cfun.\n+\t* utils.c (end_subprog_body): Likewise.\n+\n 2007-09-03  Nick Clifton  <nickc@redhat.com>\n \n \t* Make-lang.in: Change copyright header to refer to version 3 of"}, {"sha": "4d79cb3f9b6b26c2568859e4b0f5f22fe1224c69", "filename": "gcc/ada/trans.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db2960f402c407aa41fe09d5195da5c414ae79af/gcc%2Fada%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db2960f402c407aa41fe09d5195da5c414ae79af/gcc%2Fada%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftrans.c?ref=db2960f402c407aa41fe09d5195da5c414ae79af", "patch": "@@ -2874,7 +2874,7 @@ Compilation_Unit_to_gnu (Node_Id gnat_node)\n   DECL_ELABORATION_PROC_P (gnu_elab_proc_decl) = 1;\n   allocate_struct_function (gnu_elab_proc_decl);\n   Sloc_to_locus (Sloc (gnat_unit_entity), &cfun->function_end_locus);\n-  cfun = 0;\n+  set_cfun (NULL);\n \n   /* For a body, first process the spec if there is one. */\n   if (Nkind (Unit (gnat_node)) == N_Package_Body"}, {"sha": "6a4cc3c7669d0171b011c313560d0dfc17ca2075", "filename": "gcc/ada/utils.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db2960f402c407aa41fe09d5195da5c414ae79af/gcc%2Fada%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db2960f402c407aa41fe09d5195da5c414ae79af/gcc%2Fada%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils.c?ref=db2960f402c407aa41fe09d5195da5c414ae79af", "patch": "@@ -2119,7 +2119,7 @@ end_subprog_body (tree body)\n   DECL_SAVED_TREE (fndecl) = body;\n \n   current_function_decl = DECL_CONTEXT (fndecl);\n-  cfun = NULL;\n+  set_cfun (NULL);\n \n   /* We cannot track the location of errors past this point.  */\n   error_gnat_node = Empty;"}, {"sha": "bb790a2b7bb01ad51b2757cd4f3bc8881ec65042", "filename": "gcc/c-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db2960f402c407aa41fe09d5195da5c414ae79af/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db2960f402c407aa41fe09d5195da5c414ae79af/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=db2960f402c407aa41fe09d5195da5c414ae79af", "patch": "@@ -6820,7 +6820,7 @@ finish_function (void)\n   /* We're leaving the context of this function, so zap cfun.\n      It's still in DECL_STRUCT_FUNCTION, and we'll restore it in\n      tree_rest_of_compilation.  */\n-  cfun = NULL;\n+  set_cfun (NULL);\n   current_function_decl = NULL;\n }\n \f"}, {"sha": "61d834dd13565ef50758f64114df48fdcaa8bf32", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db2960f402c407aa41fe09d5195da5c414ae79af/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db2960f402c407aa41fe09d5195da5c414ae79af/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=db2960f402c407aa41fe09d5195da5c414ae79af", "patch": "@@ -1264,7 +1264,7 @@ cgraph_preserve_function_body_p (tree decl)\n static void\n ipa_passes (void)\n {\n-  cfun = NULL;\n+  set_cfun (NULL);\n   current_function_decl = NULL;\n   tree_register_cfg_hooks ();\n   bitmap_obstack_initialize (NULL);"}, {"sha": "5971bb873df9cde5a9085e7dbb8ce1a8e90e21fa", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db2960f402c407aa41fe09d5195da5c414ae79af/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db2960f402c407aa41fe09d5195da5c414ae79af/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=db2960f402c407aa41fe09d5195da5c414ae79af", "patch": "@@ -11744,7 +11744,7 @@ finish_function (int flags)\n \n   /* We're leaving the context of this function, so zap cfun.  It's still in\n      DECL_STRUCT_FUNCTION, and we'll restore it in tree_rest_of_compilation.  */\n-  cfun = NULL;\n+  set_cfun (NULL);\n   current_function_decl = NULL;\n \n   /* If this is an in-class inline definition, we may have to pop the"}, {"sha": "2130454a05a28afbd26a72d3a15c34d8d7a2ec7b", "filename": "gcc/cp/method.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db2960f402c407aa41fe09d5195da5c414ae79af/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db2960f402c407aa41fe09d5195da5c414ae79af/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=db2960f402c407aa41fe09d5195da5c414ae79af", "patch": "@@ -446,7 +446,7 @@ use_thunk (tree thunk_fndecl, bool emit_p)\n       assemble_end_function (thunk_fndecl, fnname);\n       init_insn_lengths ();\n       current_function_decl = 0;\n-      cfun = 0;\n+      set_cfun (NULL);\n       TREE_ASM_WRITTEN (thunk_fndecl) = 1;\n     }\n   else"}, {"sha": "4f8c0297d1ea132f3ae05e1a4718ac79c3e6031d", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db2960f402c407aa41fe09d5195da5c414ae79af/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db2960f402c407aa41fe09d5195da5c414ae79af/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=db2960f402c407aa41fe09d5195da5c414ae79af", "patch": "@@ -10139,6 +10139,23 @@ The default value of this hook is @code{NULL}, which disables any special\n allocation.\n @end deftypefn\n \n+@deftypefn {Target Hook} void TARGET_SET_CURRENT_FUNCTION (tree @var{decl})\n+The compiler invokes this hook whenever it changes its current function \n+context (@code{cfun}).  You can define this function if\n+the back end needs to perform any initialization or reset actions on a\n+per-function basis.  For example, it may be used to implement function\n+attributes that affect register usage or code generation patterns.\n+The argument @var{decl} is the declaration for the new function context,\n+and may be null to indicate that the compiler has left a function context\n+and is returning to processing at the top level.\n+The default hook function does nothing.\n+\n+GCC sets @code{cfun} to a dummy function context during initialization of\n+some parts of the back end.  The hook function is not invoked in this\n+situation; you need not worry about the hook being invoked recursively,\n+or when the back end is in a partially-initialized state.\n+@end deftypefn\n+\n @defmac TARGET_OBJECT_SUFFIX\n Define this macro to be a C string representing the suffix for object\n files on your target machine.  If you do not define this macro, GCC will"}, {"sha": "527de82dd5d5f7d530eb7c4d4b44e01fa5d27d37", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db2960f402c407aa41fe09d5195da5c414ae79af/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db2960f402c407aa41fe09d5195da5c414ae79af/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=db2960f402c407aa41fe09d5195da5c414ae79af", "patch": "@@ -11971,7 +11971,6 @@ dwarf2out_abstract_function (tree decl)\n {\n   dw_die_ref old_die;\n   tree save_fn;\n-  struct function *save_cfun;\n   tree context;\n   int was_abstract = DECL_ABSTRACT (decl);\n \n@@ -11995,17 +11994,16 @@ dwarf2out_abstract_function (tree decl)\n \n   /* Pretend we've just finished compiling this function.  */\n   save_fn = current_function_decl;\n-  save_cfun = cfun;\n   current_function_decl = decl;\n-  cfun = DECL_STRUCT_FUNCTION (decl);\n+  push_cfun (DECL_STRUCT_FUNCTION (decl));\n \n   set_decl_abstract_flags (decl, 1);\n   dwarf2out_decl (decl);\n   if (! was_abstract)\n     set_decl_abstract_flags (decl, 0);\n \n   current_function_decl = save_fn;\n-  cfun = save_cfun;\n+  pop_cfun ();\n }\n \n /* Helper function of premark_used_types() which gets called through"}, {"sha": "45bbac9ec82a73301c27f8e81e7cc67b3587e18c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db2960f402c407aa41fe09d5195da5c414ae79af/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db2960f402c407aa41fe09d5195da5c414ae79af/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=db2960f402c407aa41fe09d5195da5c414ae79af", "patch": "@@ -1,3 +1,8 @@\n+2007-09-05  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* trans-decl.c (build_entry_thunks): Use set_cfun.\n+\t(gfc_generate_function_code): Likewise.\n+\n 2007-09-05  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/31564"}, {"sha": "926a23924cea2e0e0b743c4b1a7b270c9a52a4fe", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db2960f402c407aa41fe09d5195da5c414ae79af/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db2960f402c407aa41fe09d5195da5c414ae79af/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=db2960f402c407aa41fe09d5195da5c414ae79af", "patch": "@@ -1727,7 +1727,7 @@ build_entry_thunks (gfc_namespace * ns)\n       /* We're leaving the context of this function, so zap cfun.\n \t It's still in DECL_STRUCT_FUNCTION, and we'll restore it in\n \t tree_rest_of_compilation.  */\n-      cfun = NULL;\n+      set_cfun (NULL);\n \n       current_function_decl = NULL_TREE;\n \n@@ -3341,7 +3341,7 @@ gfc_generate_function_code (gfc_namespace * ns)\n   /* We're leaving the context of this function, so zap cfun.\n      It's still in DECL_STRUCT_FUNCTION, and we'll restore it in\n      tree_rest_of_compilation.  */\n-  cfun = NULL;\n+  set_cfun (NULL);\n \n   if (old_context)\n     {"}, {"sha": "a2956b363a974fecaf0a5dffcd6e18bf2f485419", "filename": "gcc/function.c", "status": "modified", "additions": 113, "deletions": 32, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db2960f402c407aa41fe09d5195da5c414ae79af/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db2960f402c407aa41fe09d5195da5c414ae79af/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=db2960f402c407aa41fe09d5195da5c414ae79af", "patch": "@@ -209,7 +209,7 @@ static void emit_return_into_block (basic_block);\n #if defined(HAVE_epilogue) && defined(INCOMING_RETURN_ADDR_RTX)\n static rtx keep_stack_depressed (rtx);\n #endif\n-static void prepare_function_start (tree);\n+static void prepare_function_start (void);\n static void do_clobber_return_reg (rtx, void *);\n static void do_use_return_reg (rtx, void *);\n static void set_insn_locators (rtx, int) ATTRIBUTE_UNUSED;\n@@ -244,15 +244,15 @@ push_function_context_to (tree context ATTRIBUTE_UNUSED)\n   struct function *p;\n \n   if (cfun == 0)\n-    init_dummy_function_start ();\n+    allocate_struct_function (NULL);\n   p = cfun;\n \n   p->outer = outer_function_chain;\n   outer_function_chain = p;\n \n   lang_hooks.function.enter_nested (p);\n \n-  cfun = 0;\n+  set_cfun (NULL);\n }\n \n void\n@@ -269,7 +269,7 @@ pop_function_context_from (tree context ATTRIBUTE_UNUSED)\n {\n   struct function *p = outer_function_chain;\n \n-  cfun = p;\n+  set_cfun (p);\n   outer_function_chain = p->outer;\n \n   current_function_decl = p->decl;\n@@ -3781,6 +3781,61 @@ debug_find_var_in_block_tree (tree var, tree block)\n   return NULL_TREE;\n }\n \f\n+/* Keep track of whether we're in a dummy function context.  If we are,\n+   we don't want to invoke the set_current_function hook, because we'll\n+   get into trouble if the hook calls target_reinit () recursively or\n+   when the initial initialization is not yet complete.  */\n+\n+static bool in_dummy_function;\n+\n+/* Invoke the target hook when setting cfun.  */\n+\n+static void\n+invoke_set_current_function_hook (tree fndecl)\n+{\n+  if (!in_dummy_function)\n+    targetm.set_current_function (fndecl);\n+}\n+\n+/* cfun should never be set directly; use this function.  */\n+\n+void\n+set_cfun (struct function *new_cfun)\n+{\n+  if (cfun != new_cfun)\n+    {\n+      cfun = new_cfun;\n+      invoke_set_current_function_hook (new_cfun ? new_cfun->decl : NULL_TREE);\n+    }\n+}\n+\n+/* Keep track of the cfun stack.  */\n+\n+typedef struct function *function_p;\n+\n+DEF_VEC_P(function_p);\n+DEF_VEC_ALLOC_P(function_p,heap);\n+\n+/* Initialized with NOGC, making this poisonous to the garbage collector.  */\n+\n+static VEC(function_p,heap) *cfun_stack;\n+\n+/* Push the current cfun onto the stack, and set cfun to new_cfun.  */\n+\n+void\n+push_cfun (struct function *new_cfun)\n+{\n+  VEC_safe_push (function_p, heap, cfun_stack, cfun);\n+  set_cfun (new_cfun);\n+}\n+\n+/* Pop cfun from the stack.  */\n+\n+void\n+pop_cfun (void)\n+{\n+  set_cfun (VEC_pop (function_p, cfun_stack));\n+}\n \n /* Return value of funcdef and increase it.  */\n int\n@@ -3790,7 +3845,13 @@ get_next_funcdef_no (void)\n }\n \n /* Allocate a function structure for FNDECL and set its contents\n-   to the defaults.  */\n+   to the defaults.  Set cfun to the newly-allocated object.\n+   Some of the helper functions invoked during initialization assume\n+   that cfun has already been set.  Therefore, assign the new object\n+   directly into cfun and invoke the back end hook explicitly at the\n+   very end, rather than initializing a temporary and calling set_cfun\n+   on it.\n+*/\n \n void\n allocate_struct_function (tree fndecl)\n@@ -3813,42 +3874,50 @@ allocate_struct_function (tree fndecl)\n   if (init_machine_status)\n     cfun->machine = (*init_machine_status) ();\n \n-  if (fndecl == NULL)\n-    return;\n-\n-  DECL_STRUCT_FUNCTION (fndecl) = cfun;\n-  cfun->decl = fndecl;\n-\n-  result = DECL_RESULT (fndecl);\n-  if (aggregate_value_p (result, fndecl))\n+  if (fndecl != NULL)\n     {\n+      DECL_STRUCT_FUNCTION (fndecl) = cfun;\n+      cfun->decl = fndecl;\n+\n+      result = DECL_RESULT (fndecl);\n+      if (aggregate_value_p (result, fndecl))\n+\t{\n #ifdef PCC_STATIC_STRUCT_RETURN\n-      current_function_returns_pcc_struct = 1;\n+\t  current_function_returns_pcc_struct = 1;\n #endif\n-      current_function_returns_struct = 1;\n+\t  current_function_returns_struct = 1;\n+\t}\n+\n+      current_function_stdarg\n+\t= (fntype\n+\t   && TYPE_ARG_TYPES (fntype) != 0\n+\t   && (TREE_VALUE (tree_last (TYPE_ARG_TYPES (fntype)))\n+\t       != void_type_node));\n+      \n+      /* Assume all registers in stdarg functions need to be saved.  */\n+      cfun->va_list_gpr_size = VA_LIST_MAX_GPR_SIZE;\n+      cfun->va_list_fpr_size = VA_LIST_MAX_FPR_SIZE;\n     }\n \n-  current_function_stdarg\n-    = (fntype\n-       && TYPE_ARG_TYPES (fntype) != 0\n-       && (TREE_VALUE (tree_last (TYPE_ARG_TYPES (fntype)))\n-\t   != void_type_node));\n+  invoke_set_current_function_hook (fndecl);\n+}\n+\n+/* This is like allocate_struct_function, but pushes a new cfun for FNDECL\n+   instead of just setting it.  */\n \n-  /* Assume all registers in stdarg functions need to be saved.  */\n-  cfun->va_list_gpr_size = VA_LIST_MAX_GPR_SIZE;\n-  cfun->va_list_fpr_size = VA_LIST_MAX_FPR_SIZE;\n+void\n+push_struct_function (tree fndecl)\n+{\n+  VEC_safe_push (function_p, heap, cfun_stack, cfun);\n+  allocate_struct_function (fndecl);\n }\n \n /* Reset cfun, and other non-struct-function variables to defaults as\n    appropriate for emitting rtl at the start of a function.  */\n \n static void\n-prepare_function_start (tree fndecl)\n+prepare_function_start (void)\n {\n-  if (fndecl && DECL_STRUCT_FUNCTION (fndecl))\n-    cfun = DECL_STRUCT_FUNCTION (fndecl);\n-  else\n-    allocate_struct_function (fndecl);\n   init_emit ();\n   init_varasm_status (cfun);\n   init_expr ();\n@@ -3873,11 +3942,16 @@ prepare_function_start (tree fndecl)\n \n /* Initialize the rtl expansion mechanism so that we can do simple things\n    like generate sequences.  This is used to provide a context during global\n-   initialization of some passes.  */\n+   initialization of some passes.  You must call expand_dummy_function_end\n+   to exit this context.  */\n+\n void\n init_dummy_function_start (void)\n {\n-  prepare_function_start (NULL);\n+  gcc_assert (!in_dummy_function);\n+  in_dummy_function = true;\n+  push_struct_function (NULL_TREE);\n+  prepare_function_start ();\n }\n \n /* Generate RTL for the start of the function SUBR (a FUNCTION_DECL tree node)\n@@ -3887,7 +3961,11 @@ init_dummy_function_start (void)\n void\n init_function_start (tree subr)\n {\n-  prepare_function_start (subr);\n+  if (subr && DECL_STRUCT_FUNCTION (subr))\n+    set_cfun (DECL_STRUCT_FUNCTION (subr));\n+  else\n+    allocate_struct_function (subr);\n+  prepare_function_start ();\n \n   /* Warn if this value is an aggregate type,\n      regardless of which calling convention we are using for it.  */\n@@ -4201,6 +4279,8 @@ expand_function_start (tree subr)\n void\n expand_dummy_function_end (void)\n {\n+  gcc_assert (in_dummy_function);\n+\n   /* End any sequences that failed to be closed due to syntax errors.  */\n   while (in_sequence_p ())\n     end_sequence ();\n@@ -4210,7 +4290,8 @@ expand_dummy_function_end (void)\n \n   free_after_parsing (cfun);\n   free_after_compilation (cfun);\n-  cfun = 0;\n+  pop_cfun ();\n+  in_dummy_function = false;\n }\n \n /* Call DOIT for each hard register used as a return value from"}, {"sha": "1317d81f4e673ef1d4148f75e315c78602a5d356", "filename": "gcc/function.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db2960f402c407aa41fe09d5195da5c414ae79af/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db2960f402c407aa41fe09d5195da5c414ae79af/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=db2960f402c407aa41fe09d5195da5c414ae79af", "patch": "@@ -474,6 +474,11 @@ extern int virtuals_instantiated;\n /* Nonzero if at least one trampoline has been created.  */\n extern int trampolines_created;\n \n+/* cfun shouldn't be set directly; use one of these functions instead.  */\n+extern void set_cfun (struct function *new_cfun);\n+extern void push_cfun (struct function *new_cfun);\n+extern void pop_cfun (void);\n+\n /* For backward compatibility... eventually these should all go away.  */\n #define current_function_pops_args (cfun->pops_args)\n #define current_function_returns_struct (cfun->returns_struct)"}, {"sha": "69aa2bf2744294168fa1ce1a404660c0cda2ef45", "filename": "gcc/gimple-low.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db2960f402c407aa41fe09d5195da5c414ae79af/gcc%2Fgimple-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db2960f402c407aa41fe09d5195da5c414ae79af/gcc%2Fgimple-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-low.c?ref=db2960f402c407aa41fe09d5195da5c414ae79af", "patch": "@@ -718,10 +718,8 @@ lower_builtin_setjmp (tree_stmt_iterator *tsi)\n void\n record_vars_into (tree vars, tree fn)\n {\n-  struct function *saved_cfun = cfun;\n-\n   if (fn != current_function_decl)\n-    cfun = DECL_STRUCT_FUNCTION (fn);\n+    push_cfun (DECL_STRUCT_FUNCTION (fn));\n \n   for (; vars; vars = TREE_CHAIN (vars))\n     {\n@@ -742,7 +740,7 @@ record_vars_into (tree vars, tree fn)\n     }\n \n   if (fn != current_function_decl)\n-    cfun = saved_cfun;\n+    pop_cfun ();\n }\n \n "}, {"sha": "5c376ac5060129b15481faa0f56d81b17a62e92c", "filename": "gcc/gimplify.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db2960f402c407aa41fe09d5195da5c414ae79af/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db2960f402c407aa41fe09d5195da5c414ae79af/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=db2960f402c407aa41fe09d5195da5c414ae79af", "patch": "@@ -6466,9 +6466,10 @@ gimplify_function_tree (tree fndecl)\n \n   oldfn = current_function_decl;\n   current_function_decl = fndecl;\n-  cfun = DECL_STRUCT_FUNCTION (fndecl);\n-  if (cfun == NULL)\n-    allocate_struct_function (fndecl);\n+  if (DECL_STRUCT_FUNCTION (fndecl))\n+    push_cfun (DECL_STRUCT_FUNCTION (fndecl));\n+  else\n+    push_struct_function (fndecl);\n \n   for (parm = DECL_ARGUMENTS (fndecl); parm ; parm = TREE_CHAIN (parm))\n     {\n@@ -6520,7 +6521,7 @@ gimplify_function_tree (tree fndecl)\n \n   cfun->gimplified = true;\n   current_function_decl = oldfn;\n-  cfun = oldfn ? DECL_STRUCT_FUNCTION (oldfn) : NULL;\n+  pop_cfun ();\n }\n \f\n /* Expands EXPR to list of gimple statements STMTS.  If SIMPLE is true,"}, {"sha": "3e8a3a490ac5cf3129f1192312ccd55644f751d4", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db2960f402c407aa41fe09d5195da5c414ae79af/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db2960f402c407aa41fe09d5195da5c414ae79af/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=db2960f402c407aa41fe09d5195da5c414ae79af", "patch": "@@ -1,3 +1,7 @@\n+2007-09-05  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* decl.c (finish_method): Use set_cfun.\n+\n 2007-09-04  Andrew Haley  <aph@redhat.com>\n \n \t* decl.c (java_init_decl_processing): Call \"__cxa_end_cleanup\""}, {"sha": "594ccf13d0c7289ba3aae5aaec7e41529271beb2", "filename": "gcc/java/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db2960f402c407aa41fe09d5195da5c414ae79af/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db2960f402c407aa41fe09d5195da5c414ae79af/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=db2960f402c407aa41fe09d5195da5c414ae79af", "patch": "@@ -1848,7 +1848,7 @@ finish_method (tree fndecl)\n   /* Store the end of the function, so that we get good line number\n      info for the epilogue.  */\n   if (DECL_STRUCT_FUNCTION (fndecl))\n-    cfun = DECL_STRUCT_FUNCTION (fndecl);\n+    set_cfun (DECL_STRUCT_FUNCTION (fndecl));\n   else\n     allocate_struct_function (fndecl);\n #ifdef USE_MAPPED_LOCATION"}, {"sha": "f70b048cd64db61b7432d2eb8909f42e2b1c91a2", "filename": "gcc/matrix-reorg.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db2960f402c407aa41fe09d5195da5c414ae79af/gcc%2Fmatrix-reorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db2960f402c407aa41fe09d5195da5c414ae79af/gcc%2Fmatrix-reorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatrix-reorg.c?ref=db2960f402c407aa41fe09d5195da5c414ae79af", "patch": "@@ -2045,7 +2045,7 @@ transform_allocation_sites (void **slot, void *data ATTRIBUTE_UNUSED)\n   /* To be able to produce gimple temporaries.  */\n   oldfn = current_function_decl;\n   current_function_decl = mi->allocation_function_decl;\n-  cfun = DECL_STRUCT_FUNCTION (mi->allocation_function_decl);\n+  push_cfun (DECL_STRUCT_FUNCTION (mi->allocation_function_decl));\n \n   /* Set the dimension sizes as follows:\n      DIM_SIZE[i] = DIM_SIZE[n] * ... * DIM_SIZE[i]\n@@ -2169,13 +2169,13 @@ transform_allocation_sites (void **slot, void *data ATTRIBUTE_UNUSED)\n       gcc_assert (e);\n       cgraph_remove_edge (e);\n       current_function_decl = mi->free_stmts[i].func;\n-      cfun = DECL_STRUCT_FUNCTION (mi->free_stmts[i].func);\n+      set_cfun (DECL_STRUCT_FUNCTION (mi->free_stmts[i].func));\n       bsi = bsi_for_stmt (mi->free_stmts[i].stmt);\n       bsi_remove (&bsi, true);\n     }\n   /* Return to the previous situation.  */\n   current_function_decl = oldfn;\n-  cfun = oldfn ? DECL_STRUCT_FUNCTION (oldfn) : NULL;\n+  pop_cfun ();\n   return 1;\n \n }\n@@ -2304,7 +2304,7 @@ matrix_reorg (void)\n   htab_traverse (matrices_to_reorg, dump_matrix_reorg_analysis, NULL);\n \n   current_function_decl = NULL;\n-  cfun = NULL;\n+  set_cfun (NULL);\n   matrices_to_reorg = NULL;\n   return 0;\n }"}, {"sha": "c1ab3f311932bf4a1453983a4b81a1ed9f76b827", "filename": "gcc/omp-low.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db2960f402c407aa41fe09d5195da5c414ae79af/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db2960f402c407aa41fe09d5195da5c414ae79af/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=db2960f402c407aa41fe09d5195da5c414ae79af", "patch": "@@ -1144,10 +1144,10 @@ create_omp_child_function (omp_context *ctx)\n   /* Allocate memory for the function structure.  The call to \n      allocate_struct_function clobbers CFUN, so we need to restore\n      it afterward.  */\n-  allocate_struct_function (decl);\n+  push_struct_function (decl);\n   DECL_SOURCE_LOCATION (decl) = EXPR_LOCATION (ctx->stmt);\n   cfun->function_end_locus = EXPR_LOCATION (ctx->stmt);\n-  cfun = ctx->cb.src_cfun;\n+  pop_cfun ();\n }\n \n \n@@ -2403,7 +2403,7 @@ static void\n expand_omp_parallel (struct omp_region *region)\n {\n   basic_block entry_bb, exit_bb, new_bb;\n-  struct function *child_cfun, *saved_cfun;\n+  struct function *child_cfun;\n   tree child_fn, block, t, ws_args;\n   block_stmt_iterator si;\n   tree entry_stmt;\n@@ -2413,7 +2413,6 @@ expand_omp_parallel (struct omp_region *region)\n   entry_stmt = last_stmt (region->entry);\n   child_fn = OMP_PARALLEL_FN (entry_stmt);\n   child_cfun = DECL_STRUCT_FUNCTION (child_fn);\n-  saved_cfun = cfun;\n \n   entry_bb = region->entry;\n   exit_bb = region->exit;"}, {"sha": "c195af2004e10f72f91944206b5d99952da8358c", "filename": "gcc/target-def.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db2960f402c407aa41fe09d5195da5c414ae79af/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db2960f402c407aa41fe09d5195da5c414ae79af/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=db2960f402c407aa41fe09d5195da5c414ae79af", "patch": "@@ -479,6 +479,10 @@\n #define TARGET_MANGLE_TYPE hook_constcharptr_const_tree_null\n #define TARGET_ALLOCATE_INITIAL_VALUE NULL\n \n+#ifndef TARGET_SET_CURRENT_FUNCTION\n+#define TARGET_SET_CURRENT_FUNCTION hook_void_tree\n+#endif\n+\n #ifndef TARGET_INIT_LIBFUNCS\n #define TARGET_INIT_LIBFUNCS hook_void_void\n #endif\n@@ -720,6 +724,7 @@\n   TARGET_MAX_ANCHOR_OFFSET,\t\t\t\\\n   TARGET_USE_ANCHORS_FOR_SYMBOL_P,\t\t\\\n   TARGET_FUNCTION_OK_FOR_SIBCALL,\t\t\\\n+  TARGET_SET_CURRENT_FUNCTION,\t\t\t\\\n   TARGET_IN_SMALL_DATA_P,\t\t\t\\\n   TARGET_BINDS_LOCAL_P,\t\t\t\t\\\n   TARGET_MANGLE_DECL_ASSEMBLER_NAME,\t\t\\"}, {"sha": "bf76402eaa5fb787b2f555a3cf7ed5bd823fc7ce", "filename": "gcc/target.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db2960f402c407aa41fe09d5195da5c414ae79af/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db2960f402c407aa41fe09d5195da5c414ae79af/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=db2960f402c407aa41fe09d5195da5c414ae79af", "patch": "@@ -570,6 +570,11 @@ struct gcc_target\n      this is an indirect call.  */\n   bool (*function_ok_for_sibcall) (tree decl, tree exp);\n \n+  /* Establish appropriate back-end context for processing the function\n+     FNDECL.  The argument might be NULL to indicate processing at top\n+     level, outside of any function scope.  */\n+  void (*set_current_function) (tree fndecl);\n+\n   /* True if EXP should be placed in a \"small data\" section.  */\n   bool (* in_small_data_p) (const_tree);\n "}, {"sha": "95f27141c0fba5449690b5003e16669b2e3cac28", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db2960f402c407aa41fe09d5195da5c414ae79af/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db2960f402c407aa41fe09d5195da5c414ae79af/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=db2960f402c407aa41fe09d5195da5c414ae79af", "patch": "@@ -5582,7 +5582,7 @@ move_sese_region_to_fn (struct function *dest_cfun, basic_block entry_bb,\n \n   /* Switch context to the child function to initialize DEST_FN's CFG.  */\n   gcc_assert (dest_cfun->cfg == NULL);\n-  cfun = dest_cfun;\n+  set_cfun (dest_cfun);\n \n   init_empty_tree_cfg ();\n \n@@ -5605,7 +5605,7 @@ move_sese_region_to_fn (struct function *dest_cfun, basic_block entry_bb,\n \t}\n     }\n \n-  cfun = saved_cfun;\n+  set_cfun (saved_cfun);\n \n   /* Move blocks from BBS into DEST_CFUN.  */\n   gcc_assert (VEC_length (basic_block, bbs) >= 2);\n@@ -5655,11 +5655,11 @@ move_sese_region_to_fn (struct function *dest_cfun, basic_block entry_bb,\n \n      FIXME, this is silly.  The CFG ought to become a parameter to\n      these helpers.  */\n-  cfun = dest_cfun;\n+  set_cfun (dest_cfun);\n   make_edge (ENTRY_BLOCK_PTR, entry_bb, EDGE_FALLTHRU);\n   if (exit_bb)\n     make_edge (exit_bb,  EXIT_BLOCK_PTR, 0);\n-  cfun = saved_cfun;\n+  set_cfun (saved_cfun);\n \n   /* Back in the original function, the SESE region has disappeared,\n      create a new basic block in its place.  */\n@@ -5695,7 +5695,6 @@ dump_function_to_file (tree fn, FILE *file, int flags)\n   bool ignore_topmost_bind = false, any_var = false;\n   basic_block bb;\n   tree chain;\n-  struct function *saved_cfun;\n \n   fprintf (file, \"%s (\", lang_hooks.decl_printable_name (fn, 2));\n \n@@ -5720,8 +5719,7 @@ dump_function_to_file (tree fn, FILE *file, int flags)\n     }\n \n   /* Switch CFUN to point to FN.  */\n-  saved_cfun = cfun;\n-  cfun = DECL_STRUCT_FUNCTION (fn);\n+  push_cfun (DECL_STRUCT_FUNCTION (fn));\n \n   /* When GIMPLE is lowered, the variables are no longer available in\n      BIND_EXPRs, so display them separately.  */\n@@ -5792,7 +5790,7 @@ dump_function_to_file (tree fn, FILE *file, int flags)\n   fprintf (file, \"\\n\\n\");\n \n   /* Restore CFUN.  */\n-  cfun = saved_cfun;\n+  pop_cfun ();\n }\n \n "}, {"sha": "b655b79ac01d2b8168fc1cde398a9d6c4ddd826d", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db2960f402c407aa41fe09d5195da5c414ae79af/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db2960f402c407aa41fe09d5195da5c414ae79af/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=db2960f402c407aa41fe09d5195da5c414ae79af", "patch": "@@ -2333,27 +2333,6 @@ init_inline_once (void)\n   eni_time_weights.omp_cost = 40;\n }\n \n-typedef struct function *function_p;\n-\n-DEF_VEC_P(function_p);\n-DEF_VEC_ALLOC_P(function_p,heap);\n-\n-/* Initialized with NOGC, making this poisonous to the garbage collector.  */\n-static VEC(function_p,heap) *cfun_stack;\n-\n-void\n-push_cfun (struct function *new_cfun)\n-{\n-  VEC_safe_push (function_p, heap, cfun_stack, cfun);\n-  cfun = new_cfun;\n-}\n-\n-void\n-pop_cfun (void)\n-{\n-  cfun = VEC_pop (function_p, cfun_stack);\n-}\n-\n /* Install new lexical TREE_BLOCK underneath 'current_block'.  */\n static void\n add_lexical_block (tree current_block, tree new_block)"}, {"sha": "574b1d70040f80c1b922066b9bb1b208be234377", "filename": "gcc/tree-inline.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db2960f402c407aa41fe09d5195da5c414ae79af/gcc%2Ftree-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db2960f402c407aa41fe09d5195da5c414ae79af/gcc%2Ftree-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.h?ref=db2960f402c407aa41fe09d5195da5c414ae79af", "patch": "@@ -134,8 +134,6 @@ tree copy_tree_r (tree *, int *, void *);\n void clone_body (tree, tree, void *);\n void save_body (tree, tree *, tree *);\n int estimate_move_cost (tree type);\n-void push_cfun (struct function *new_cfun);\n-void pop_cfun (void);\n int estimate_num_insns (tree expr, eni_weights *);\n bool tree_versionable_function_p (tree);\n void tree_function_versioning (tree, tree, varray_type, bool);"}, {"sha": "e367bb7b44517518b05ced8aae7dc2ee25a68cfc", "filename": "gcc/tree-optimize.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db2960f402c407aa41fe09d5195da5c414ae79af/gcc%2Ftree-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db2960f402c407aa41fe09d5195da5c414ae79af/gcc%2Ftree-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-optimize.c?ref=db2960f402c407aa41fe09d5195da5c414ae79af", "patch": "@@ -387,7 +387,6 @@ tree_rest_of_compilation (tree fndecl)\n \n   /* Initialize the RTL code for the function.  */\n   current_function_decl = fndecl;\n-  cfun = DECL_STRUCT_FUNCTION (fndecl);\n   saved_loc = input_location;\n   input_location = DECL_SOURCE_LOCATION (fndecl);\n   init_function_start (fndecl);\n@@ -410,7 +409,7 @@ tree_rest_of_compilation (tree fndecl)\n   bitmap_obstack_release (NULL);\n   \n   DECL_SAVED_TREE (fndecl) = NULL;\n-  cfun = 0;\n+  set_cfun (NULL);\n \n   /* If requested, warn about function definitions where the function will\n      return a value (usually of some struct or union type) which itself will"}, {"sha": "5fda4d4b3a18a173dd56233ed7f045199afde07a", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db2960f402c407aa41fe09d5195da5c414ae79af/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db2960f402c407aa41fe09d5195da5c414ae79af/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=db2960f402c407aa41fe09d5195da5c414ae79af", "patch": "@@ -4859,6 +4859,7 @@ extern void init_dummy_function_start (void);\n extern void expand_dummy_function_end (void);\n extern unsigned int init_function_for_compilation (void);\n extern void allocate_struct_function (tree);\n+extern void push_struct_function (tree fndecl);\n extern void init_function_start (tree);\n extern bool use_register_for_decl (const_tree);\n extern void generate_setjmp_warnings (void);"}, {"sha": "8c464d69940c8718bb0aa5e1b6da70ceefa47d9a", "filename": "gcc/treelang/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db2960f402c407aa41fe09d5195da5c414ae79af/gcc%2Ftreelang%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db2960f402c407aa41fe09d5195da5c414ae79af/gcc%2Ftreelang%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2FChangeLog?ref=db2960f402c407aa41fe09d5195da5c414ae79af", "patch": "@@ -1,3 +1,7 @@\n+2007-09-05  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* treetree.c (tree_code_create_function_wrapup):  Use set_cfun.\n+\n 2007-08-21  Paul Brook  <paul@codesourcery.com>\n \t    Nathan Sidwell  <nathan@codesourcery.com>\n \t    Mark Mitchell  <mark@codesourcery.com>"}, {"sha": "dd4489b42a82d73575c318753de39a8d34603154", "filename": "gcc/treelang/treetree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db2960f402c407aa41fe09d5195da5c414ae79af/gcc%2Ftreelang%2Ftreetree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db2960f402c407aa41fe09d5195da5c414ae79af/gcc%2Ftreelang%2Ftreetree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Ftreetree.c?ref=db2960f402c407aa41fe09d5195da5c414ae79af", "patch": "@@ -473,7 +473,7 @@ tree_code_create_function_wrapup (location_t loc)\n \n   /* We are not inside of any scope now.  */\n   current_function_decl = NULL_TREE;\n-  cfun = NULL;\n+  set_cfun (NULL);\n \n   /* Pass the current function off to the middle end.  */\n   (void)cgraph_node (fn_decl);"}]}