{"sha": "9f5d8a89738cd157205762d2e17b2bbc68b8333c", "node_id": "C_kwDOANBUbNoAKDlmNWQ4YTg5NzM4Y2QxNTcyMDU3NjJkMmUxN2IyYmJjNjhiODMzM2M", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-04-11T15:09:28Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-04-11T15:18:02Z"}, "message": "ast: Translate visibilities properly when lowering AST nodes\n\nPreviously, the lowering code would simply create public\n`HIR::Visibility`s for every AST Node being lowered. We now call\n`translate_visibility()` properly to perform the necessary conversions", "tree": {"sha": "3e2a16bbe5f3fde886aaf43b59da98b03aa3c17f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e2a16bbe5f3fde886aaf43b59da98b03aa3c17f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f5d8a89738cd157205762d2e17b2bbc68b8333c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f5d8a89738cd157205762d2e17b2bbc68b8333c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f5d8a89738cd157205762d2e17b2bbc68b8333c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f5d8a89738cd157205762d2e17b2bbc68b8333c/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d806eba2b6b9726455861ecab9705cb123f0df7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d806eba2b6b9726455861ecab9705cb123f0df7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d806eba2b6b9726455861ecab9705cb123f0df7"}], "stats": {"total": 72, "additions": 37, "deletions": 35}, "files": [{"sha": "f08f2f0c515fee3306dbb764f4b8dad8519e7a9b", "filename": "gcc/rust/ast/rust-item.h", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f5d8a89738cd157205762d2e17b2bbc68b8333c/gcc%2Frust%2Fast%2Frust-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f5d8a89738cd157205762d2e17b2bbc68b8333c/gcc%2Frust%2Fast%2Frust-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-item.h?ref=9f5d8a89738cd157205762d2e17b2bbc68b8333c", "patch": "@@ -632,7 +632,7 @@ struct Visibility\n     : public_vis_type (public_vis_type), in_path (std::move (in_path))\n   {}\n \n-  PublicVisType get_public_vis_type () { return public_vis_type; }\n+  PublicVisType get_public_vis_type () const { return public_vis_type; }\n \n   // Returns whether visibility is in an error state.\n   bool is_error () const\n@@ -884,6 +884,8 @@ class Method : public InherentImplItem, public TraitImplItem\n \n   FunctionQualifiers get_qualifiers () { return qualifiers; }\n \n+  const Visibility &get_visibility () const { return vis; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object\n    * rather than base */\n@@ -941,8 +943,8 @@ class VisItem : public Item\n   std::string as_string () const override;\n \n   // TODO: this mutable getter seems really dodgy. Think up better way.\n-  Visibility &get_vis () { return visibility; }\n-  const Visibility &get_vis () const { return visibility; }\n+  Visibility &get_visibility () { return visibility; }\n+  const Visibility &get_visibility () const { return visibility; }\n \n   std::vector<Attribute> &get_outer_attrs () { return outer_attrs; }\n   const std::vector<Attribute> &get_outer_attrs () const { return outer_attrs; }\n@@ -1896,7 +1898,7 @@ struct StructField\n     return field_type;\n   }\n \n-  Visibility get_visibility () const { return visibility; }\n+  const Visibility &get_visibility () const { return visibility; }\n \n   NodeId get_node_id () const { return node_id; }\n };\n@@ -2030,6 +2032,8 @@ struct TupleField\n \n   NodeId get_node_id () const { return node_id; }\n \n+  const Visibility &get_visibility () const { return visibility; }\n+\n   Location get_locus () const { return locus; }\n \n   // TODO: this mutable getter seems really dodgy. Think up better way.\n@@ -3921,6 +3925,8 @@ class ExternalStaticItem : public ExternalItem\n \n   Identifier get_identifier () const { return item_name; }\n \n+  const Visibility &get_visibility () const { return visibility; }\n+\n   bool is_mut () const { return has_mut; }\n \n protected:\n@@ -4083,6 +4089,8 @@ class ExternalFunctionItem : public ExternalItem\n \n   Location get_locus () const { return locus; }\n \n+  const Visibility &get_visibility () const { return visibility; }\n+\n   ExternalFunctionItem (\n     Identifier item_name,\n     std::vector<std::unique_ptr<GenericParam>> generic_params,"}, {"sha": "7cc214ce2495b5ec1ef32bbbad6dfb682e40fda6", "filename": "gcc/rust/backend/rust-compile-implitem.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f5d8a89738cd157205762d2e17b2bbc68b8333c/gcc%2Frust%2Fbackend%2Frust-compile-implitem.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f5d8a89738cd157205762d2e17b2bbc68b8333c/gcc%2Frust%2Fbackend%2Frust-compile-implitem.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-implitem.cc?ref=9f5d8a89738cd157205762d2e17b2bbc68b8333c", "patch": "@@ -84,8 +84,8 @@ CompileTraitItem::visit (HIR::TraitItemFunc &func)\n     &canonical_path);\n   rust_assert (ok);\n \n-  // FIXME: Get from lowering the item's visibility instead\n-  auto vis = HIR::Visibility::create_public ();\n+  // FIXME: How do we get the proper visibility here?\n+  auto vis = HIR::Visibility (HIR::Visibility::VisType::PUBLIC);\n   HIR::TraitFunctionDecl &function = func.get_decl ();\n   tree fndecl\n     = compile_function (ctx, function.get_function_name (),"}, {"sha": "1914ce64d0949a1b8dfa09d6fd716e7e9c54a717", "filename": "gcc/rust/hir/rust-ast-lower-enumitem.h", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f5d8a89738cd157205762d2e17b2bbc68b8333c/gcc%2Frust%2Fhir%2Frust-ast-lower-enumitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f5d8a89738cd157205762d2e17b2bbc68b8333c/gcc%2Frust%2Fhir%2Frust-ast-lower-enumitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-enumitem.h?ref=9f5d8a89738cd157205762d2e17b2bbc68b8333c", "patch": "@@ -19,6 +19,7 @@\n #ifndef RUST_AST_LOWER_ENUMITEM\n #define RUST_AST_LOWER_ENUMITEM\n \n+#include \"rust-ast-lower.h\"\n #include \"rust-diagnostics.h\"\n \n #include \"rust-ast-lower-base.h\"\n@@ -51,7 +52,7 @@ class ASTLoweringEnumItem : public ASTLoweringBase\n     if (item.has_visibility ())\n       rust_error_at (item.get_locus (),\n \t\t     \"visibility qualifier %qs not allowed on enum item\",\n-\t\t     item.get_vis ().as_string ().c_str ());\n+\t\t     item.get_visibility ().as_string ().c_str ());\n \n     translated = new HIR::EnumItem (mapping, item.get_identifier (),\n \t\t\t\t    item.get_outer_attrs (), item.get_locus ());\n@@ -73,12 +74,12 @@ class ASTLoweringEnumItem : public ASTLoweringBase\n     if (item.has_visibility ())\n       rust_error_at (item.get_locus (),\n \t\t     \"visibility qualifier %qs not allowed on enum item\",\n-\t\t     item.get_vis ().as_string ().c_str ());\n+\t\t     item.get_visibility ().as_string ().c_str ());\n \n     std::vector<HIR::TupleField> fields;\n     for (auto &field : item.get_tuple_fields ())\n       {\n-\tHIR::Visibility vis = HIR::Visibility::create_public ();\n+\tHIR::Visibility vis = translate_visibility (field.get_visibility ());\n \tHIR::Type *type\n \t  = ASTLoweringType::translate (field.get_field_type ().get ());\n \n@@ -117,12 +118,12 @@ class ASTLoweringEnumItem : public ASTLoweringBase\n     if (item.has_visibility ())\n       rust_error_at (item.get_locus (),\n \t\t     \"visibility qualifier %qs not allowed on enum item\",\n-\t\t     item.get_vis ().as_string ().c_str ());\n+\t\t     item.get_visibility ().as_string ().c_str ());\n \n     std::vector<HIR::StructField> fields;\n     for (auto &field : item.get_struct_fields ())\n       {\n-\tHIR::Visibility vis = HIR::Visibility::create_public ();\n+\tHIR::Visibility vis = translate_visibility (field.get_visibility ());\n \tHIR::Type *type\n \t  = ASTLoweringType::translate (field.get_field_type ().get ());\n \n@@ -165,7 +166,7 @@ class ASTLoweringEnumItem : public ASTLoweringBase\n     if (item.has_visibility ())\n       rust_error_at (item.get_locus (),\n \t\t     \"visibility qualifier %qs not allowed on enum item\",\n-\t\t     item.get_vis ().as_string ().c_str ());\n+\t\t     item.get_visibility ().as_string ().c_str ());\n \n     HIR::Expr *expr = ASTLoweringExpr::translate (item.get_expr ().get ());\n     translated"}, {"sha": "1dfecb94fccd5b717249a5b484b1535ae7ca6a97", "filename": "gcc/rust/hir/rust-ast-lower-extern.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f5d8a89738cd157205762d2e17b2bbc68b8333c/gcc%2Frust%2Fhir%2Frust-ast-lower-extern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f5d8a89738cd157205762d2e17b2bbc68b8333c/gcc%2Frust%2Fhir%2Frust-ast-lower-extern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-extern.h?ref=9f5d8a89738cd157205762d2e17b2bbc68b8333c", "patch": "@@ -21,6 +21,7 @@\n \n #include \"rust-ast-lower-base.h\"\n #include \"rust-ast-lower-type.h\"\n+#include \"rust-ast-lower.h\"\n \n namespace Rust {\n namespace HIR {\n@@ -39,7 +40,7 @@ class ASTLoweringExternItem : public ASTLoweringBase\n \n   void visit (AST::ExternalStaticItem &item) override\n   {\n-    HIR::Visibility vis = HIR::Visibility::create_public ();\n+    HIR::Visibility vis = translate_visibility (item.get_visibility ());\n     HIR::Type *static_type\n       = ASTLoweringType::translate (item.get_type ().get ());\n \n@@ -65,7 +66,7 @@ class ASTLoweringExternItem : public ASTLoweringBase\n   {\n     std::vector<std::unique_ptr<HIR::WhereClauseItem> > where_clause_items;\n     HIR::WhereClause where_clause (std::move (where_clause_items));\n-    HIR::Visibility vis = HIR::Visibility::create_public ();\n+    HIR::Visibility vis = translate_visibility (function.get_visibility ());\n \n     std::vector<std::unique_ptr<HIR::GenericParam> > generic_params;\n     if (function.has_generics ())"}, {"sha": "64803f3056aa79f0bdc98ea5ce503722f3ee5173", "filename": "gcc/rust/hir/rust-ast-lower-implitem.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f5d8a89738cd157205762d2e17b2bbc68b8333c/gcc%2Frust%2Fhir%2Frust-ast-lower-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f5d8a89738cd157205762d2e17b2bbc68b8333c/gcc%2Frust%2Fhir%2Frust-ast-lower-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-implitem.h?ref=9f5d8a89738cd157205762d2e17b2bbc68b8333c", "patch": "@@ -56,7 +56,7 @@ class ASTLowerImplItem : public ASTLoweringBase\n   {\n     std::vector<std::unique_ptr<HIR::WhereClauseItem> > where_clause_items;\n     HIR::WhereClause where_clause (std::move (where_clause_items));\n-    HIR::Visibility vis = HIR::Visibility::create_public ();\n+    HIR::Visibility vis = translate_visibility (alias.get_visibility ());\n \n     std::vector<std::unique_ptr<HIR::GenericParam> > generic_params;\n     if (alias.has_generics ())\n@@ -87,7 +87,7 @@ class ASTLowerImplItem : public ASTLoweringBase\n \n   void visit (AST::ConstantItem &constant) override\n   {\n-    HIR::Visibility vis = HIR::Visibility::create_public ();\n+    HIR::Visibility vis = translate_visibility (constant.get_visibility ());\n \n     HIR::Type *type = ASTLoweringType::translate (constant.get_type ().get ());\n     HIR::Expr *expr = ASTLoweringExpr::translate (constant.get_expr ().get ());\n@@ -120,7 +120,7 @@ class ASTLowerImplItem : public ASTLoweringBase\n     HIR::WhereClause where_clause (std::move (where_clause_items));\n     HIR::FunctionQualifiers qualifiers\n       = lower_qualifiers (function.get_qualifiers ());\n-    HIR::Visibility vis = HIR::Visibility::create_public ();\n+    HIR::Visibility vis = translate_visibility (function.get_visibility ());\n \n     // need\n     std::vector<std::unique_ptr<HIR::GenericParam> > generic_params;\n@@ -204,7 +204,7 @@ class ASTLowerImplItem : public ASTLoweringBase\n     HIR::WhereClause where_clause (std::move (where_clause_items));\n     HIR::FunctionQualifiers qualifiers\n       = lower_qualifiers (method.get_qualifiers ());\n-    HIR::Visibility vis = HIR::Visibility::create_public ();\n+    HIR::Visibility vis = translate_visibility (method.get_visibility ());\n \n     // need\n     std::vector<std::unique_ptr<HIR::GenericParam> > generic_params;"}, {"sha": "3ce77b4d9ca33f37a1f7ed29412eed5451c0ed7a", "filename": "gcc/rust/hir/rust-ast-lower-stmt.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f5d8a89738cd157205762d2e17b2bbc68b8333c/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f5d8a89738cd157205762d2e17b2bbc68b8333c/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h?ref=9f5d8a89738cd157205762d2e17b2bbc68b8333c", "patch": "@@ -85,7 +85,7 @@ class ASTLoweringStmt : public ASTLoweringBase\n \n   void visit (AST::ConstantItem &constant) override\n   {\n-    HIR::Visibility vis = HIR::Visibility::create_public ();\n+    HIR::Visibility vis = translate_visibility (constant.get_visibility ());\n \n     HIR::Type *type = ASTLoweringType::translate (constant.get_type ().get ());\n     HIR::Expr *expr = ASTLoweringExpr::translate (constant.get_expr ().get ());\n@@ -148,12 +148,12 @@ class ASTLoweringStmt : public ASTLoweringBase\n \n     std::vector<std::unique_ptr<HIR::WhereClauseItem>> where_clause_items;\n     HIR::WhereClause where_clause (std::move (where_clause_items));\n-    HIR::Visibility vis = HIR::Visibility::create_public ();\n+    HIR::Visibility vis = translate_visibility (struct_decl.get_visibility ());\n \n     std::vector<HIR::TupleField> fields;\n     for (AST::TupleField &field : struct_decl.get_fields ())\n       {\n-\tHIR::Visibility vis = HIR::Visibility::create_public ();\n+\tHIR::Visibility vis = translate_visibility (field.get_visibility ());\n \tHIR::Type *type\n \t  = ASTLoweringType::translate (field.get_field_type ().get ());\n \n@@ -199,13 +199,13 @@ class ASTLoweringStmt : public ASTLoweringBase\n \n     std::vector<std::unique_ptr<HIR::WhereClauseItem>> where_clause_items;\n     HIR::WhereClause where_clause (std::move (where_clause_items));\n-    HIR::Visibility vis = HIR::Visibility::create_public ();\n+    HIR::Visibility vis = translate_visibility (struct_decl.get_visibility ());\n \n     bool is_unit = struct_decl.is_unit_struct ();\n     std::vector<HIR::StructField> fields;\n     for (AST::StructField &field : struct_decl.get_fields ())\n       {\n-\tHIR::Visibility vis = HIR::Visibility::create_public ();\n+\tHIR::Visibility vis = translate_visibility (field.get_visibility ());\n \tHIR::Type *type\n \t  = ASTLoweringType::translate (field.get_field_type ().get ());\n \n@@ -255,12 +255,12 @@ class ASTLoweringStmt : public ASTLoweringBase\n \n     std::vector<std::unique_ptr<HIR::WhereClauseItem>> where_clause_items;\n     HIR::WhereClause where_clause (std::move (where_clause_items));\n-    HIR::Visibility vis = HIR::Visibility::create_public ();\n+    HIR::Visibility vis = translate_visibility (union_decl.get_visibility ());\n \n     std::vector<HIR::StructField> variants;\n     for (AST::StructField &variant : union_decl.get_variants ())\n       {\n-\tHIR::Visibility vis = HIR::Visibility::create_public ();\n+\tHIR::Visibility vis = translate_visibility (variant.get_visibility ());\n \tHIR::Type *type\n \t  = ASTLoweringType::translate (variant.get_field_type ().get ());\n \n@@ -308,7 +308,7 @@ class ASTLoweringStmt : public ASTLoweringBase\n \n     std::vector<std::unique_ptr<HIR::WhereClauseItem>> where_clause_items;\n     HIR::WhereClause where_clause (std::move (where_clause_items));\n-    HIR::Visibility vis = HIR::Visibility::create_public ();\n+    HIR::Visibility vis = translate_visibility (enum_decl.get_visibility ());\n \n     // bool is_unit = enum_decl.is_zero_variant ();\n     std::vector<std::unique_ptr<HIR::EnumItem>> items;\n@@ -358,7 +358,7 @@ class ASTLoweringStmt : public ASTLoweringBase\n     HIR::WhereClause where_clause (std::move (where_clause_items));\n     HIR::FunctionQualifiers qualifiers\n       = lower_qualifiers (function.get_qualifiers ());\n-    HIR::Visibility vis = HIR::Visibility::create_public ();\n+    HIR::Visibility vis = translate_visibility (function.get_visibility ());\n \n     // need\n     std::vector<std::unique_ptr<HIR::GenericParam>> generic_params;"}, {"sha": "0c361e00ecd27c19c37fc5b2f448e73fea85821a", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f5d8a89738cd157205762d2e17b2bbc68b8333c/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f5d8a89738cd157205762d2e17b2bbc68b8333c/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=9f5d8a89738cd157205762d2e17b2bbc68b8333c", "patch": "@@ -582,14 +582,6 @@ struct Visibility\n     return Visibility (ERROR, AST::SimplePath::create_empty ());\n   }\n \n-  // Creates a public visibility.\n-  // FIXME: Remove this function: We should not be calling it anymore and\n-  // instead we should be using `translate_visibility`\n-  static Visibility create_public ()\n-  {\n-    return Visibility (ERROR, AST::SimplePath::create_empty ());\n-  }\n-\n   VisType get_vis_type () const { return vis_type; }\n \n   std::string as_string () const;"}]}