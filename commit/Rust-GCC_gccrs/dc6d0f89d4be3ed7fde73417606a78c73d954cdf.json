{"sha": "dc6d0f89d4be3ed7fde73417606a78c73d954cdf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGM2ZDBmODlkNGJlM2VkN2ZkZTczNDE3NjA2YTc4YzczZDk1NGNkZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-02-13T07:17:07Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-02-13T07:17:07Z"}, "message": "i386: Fix k*shift* intrinsics [PR93673]\n\nAs mentioned in the PR, the intrinsics allow counts from 0 to 255, but\nwe actually reject values from 128 to 255.  That is because QImode\nCONST_INTs can be only -128 to 127.  Fixed by using const_0_to_255_operand\nand dropping the modes for the operands with those predicates\n(the IL actually contains the CONST_INT which has VOIDmode).\n\n2020-02-13  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/93673\n\t* config/i386/sse.md (k<code><mode>): Drop mode from last operand and\n\tuse const_0_to_255_operand predicate instead of immediate_operand.\n\t(avx512dq_fpclass<mode><mask_scalar_merge_name>,\n\tavx512dq_vmfpclass<mode><mask_scalar_merge_name>,\n\tvgf2p8affineinvqb_<mode><mask_name>,\n\tvgf2p8affineqb_<mode><mask_name>): Drop mode from\n\tconst_0_to_255_operand predicated operands.\n\n\t* gcc.target/i386/avx512f-pr93673.c: New test.\n\t* gcc.target/i386/avx512dq-pr93673.c: New test.\n\t* gcc.target/i386/avx512bw-pr93673.c: New test.", "tree": {"sha": "44ad40e0e78ecd109cdfee1d6a5d61a6e139d840", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44ad40e0e78ecd109cdfee1d6a5d61a6e139d840"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc6d0f89d4be3ed7fde73417606a78c73d954cdf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc6d0f89d4be3ed7fde73417606a78c73d954cdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc6d0f89d4be3ed7fde73417606a78c73d954cdf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc6d0f89d4be3ed7fde73417606a78c73d954cdf/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74ddc9b8e550c6138862f9ca1eec4374d46667fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74ddc9b8e550c6138862f9ca1eec4374d46667fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74ddc9b8e550c6138862f9ca1eec4374d46667fc"}], "stats": {"total": 96, "additions": 91, "deletions": 5}, "files": [{"sha": "252e820bce4bbac0f8fe1f9b38db15c605cb83b6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6d0f89d4be3ed7fde73417606a78c73d954cdf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6d0f89d4be3ed7fde73417606a78c73d954cdf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dc6d0f89d4be3ed7fde73417606a78c73d954cdf", "patch": "@@ -1,3 +1,14 @@\n+2020-02-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/93673\n+\t* config/i386/sse.md (k<code><mode>): Drop mode from last operand and\n+\tuse const_0_to_255_operand predicate instead of immediate_operand.\n+\t(avx512dq_fpclass<mode><mask_scalar_merge_name>,\n+\tavx512dq_vmfpclass<mode><mask_scalar_merge_name>,\n+\tvgf2p8affineinvqb_<mode><mask_name>,\n+\tvgf2p8affineqb_<mode><mask_name>): Drop mode from\n+\tconst_0_to_255_operand predicated operands.\n+\n 2020-02-12  Jeff Law  <law@redhat.com>\n \n \t* config/h8300/h8300.md (comparison shortening peepholes): Use"}, {"sha": "ee1f138d1af926f198511483de9c7a7f72bb6be3", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6d0f89d4be3ed7fde73417606a78c73d954cdf/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6d0f89d4be3ed7fde73417606a78c73d954cdf/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=dc6d0f89d4be3ed7fde73417606a78c73d954cdf", "patch": "@@ -1650,7 +1650,7 @@\n   [(set (match_operand:SWI1248_AVX512BWDQ 0 \"register_operand\" \"=k\")\n \t(any_lshift:SWI1248_AVX512BWDQ\n \t  (match_operand:SWI1248_AVX512BWDQ 1 \"register_operand\" \"k\")\n-\t  (match_operand:QI 2 \"immediate_operand\" \"n\")))\n+\t  (match_operand 2 \"const_0_to_255_operand\" \"n\")))\n    (unspec [(const_int 0)] UNSPEC_MASKOP)]\n   \"TARGET_AVX512F\"\n   \"k<mshift><mskmodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n@@ -22024,7 +22024,7 @@\n   [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=k\")\n           (unspec:<avx512fmaskmode>\n             [(match_operand:VF_AVX512VL 1 \"vector_operand\" \"vm\")\n-             (match_operand:QI 2 \"const_0_to_255_operand\" \"n\")]\n+             (match_operand 2 \"const_0_to_255_operand\" \"n\")]\n              UNSPEC_FPCLASS))]\n    \"TARGET_AVX512DQ\"\n    \"vfpclass<ssemodesuffix><vecmemsuffix>\\t{%2, %1, %0<mask_scalar_merge_operand3>|%0<mask_scalar_merge_operand3>, %1, %2}\";\n@@ -22038,7 +22038,7 @@\n \t(and:<avx512fmaskmode>\n \t  (unspec:<avx512fmaskmode>\n \t    [(match_operand:VF_128 1 \"nonimmediate_operand\" \"vm\")\n-             (match_operand:QI 2 \"const_0_to_255_operand\" \"n\")]\n+             (match_operand 2 \"const_0_to_255_operand\" \"n\")]\n \t    UNSPEC_FPCLASS)\n \t  (const_int 1)))]\n    \"TARGET_AVX512DQ\"\n@@ -22645,7 +22645,7 @@\n \t(unspec:VI1_AVX512F\n \t  [(match_operand:VI1_AVX512F 1 \"register_operand\" \"0,v\")\n \t   (match_operand:VI1_AVX512F 2 \"vector_operand\" \"xBm,vm\")\n-\t   (match_operand:QI 3 \"const_0_to_255_operand\" \"n,n\")]\n+\t   (match_operand 3 \"const_0_to_255_operand\" \"n,n\")]\n \t  UNSPEC_GF2P8AFFINEINV))]\n   \"TARGET_GFNI\"\n   \"@\n@@ -22662,7 +22662,7 @@\n \t(unspec:VI1_AVX512F\n \t  [(match_operand:VI1_AVX512F 1 \"register_operand\" \"0,v\")\n \t   (match_operand:VI1_AVX512F 2 \"vector_operand\" \"xBm,vm\")\n-\t   (match_operand:QI 3 \"const_0_to_255_operand\" \"n,n\")]\n+\t   (match_operand 3 \"const_0_to_255_operand\" \"n,n\")]\n \t  UNSPEC_GF2P8AFFINE))]\n   \"TARGET_GFNI\"\n   \"@"}, {"sha": "9aa49fa2e4584db228742a9a3116b65c8d78e07d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6d0f89d4be3ed7fde73417606a78c73d954cdf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6d0f89d4be3ed7fde73417606a78c73d954cdf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dc6d0f89d4be3ed7fde73417606a78c73d954cdf", "patch": "@@ -1,5 +1,10 @@\n 2020-02-13  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/93673\n+\t* gcc.target/i386/avx512f-pr93673.c: New test.\n+\t* gcc.target/i386/avx512dq-pr93673.c: New test.\n+\t* gcc.target/i386/avx512bw-pr93673.c: New test.\n+\n \t* g++.dg/analyzer/pr93212.C: Require c++14 rather than c++11.\n \n 2020-02-12  Iain Sandoe  <iain@sandoe.co.uk>"}, {"sha": "dc87ed20d1d9666bd3104955fd377a414ffd16b0", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-pr93673.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6d0f89d4be3ed7fde73417606a78c73d954cdf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr93673.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6d0f89d4be3ed7fde73417606a78c73d954cdf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr93673.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr93673.c?ref=dc6d0f89d4be3ed7fde73417606a78c73d954cdf", "patch": "@@ -0,0 +1,30 @@\n+/* PR target/93673 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512bw\" } */\n+\n+#include <x86intrin.h>\n+\n+void\n+foo (__mmask32 *c, __mmask64 *d)\n+{\n+  c[0] = _kshiftli_mask32 (c[0], 0);\n+  c[1] = _kshiftri_mask32 (c[1], 0);\n+  c[2] = _kshiftli_mask32 (c[2], 1);\n+  c[3] = _kshiftri_mask32 (c[3], 1);\n+  c[4] = _kshiftli_mask32 (c[4], 31);\n+  c[5] = _kshiftri_mask32 (c[5], 31);\n+  c[6] = _kshiftli_mask32 (c[6], 0x7f);\n+  c[7] = _kshiftri_mask32 (c[7], 0x7f);\n+  c[8] = _kshiftli_mask32 (c[8], 0xff);\n+  c[9] = _kshiftri_mask32 (c[9], 0xff);\n+  d[0] = _kshiftli_mask64 (d[0], 0);\n+  d[1] = _kshiftri_mask64 (d[1], 0);\n+  d[2] = _kshiftli_mask64 (d[2], 1);\n+  d[3] = _kshiftri_mask64 (d[3], 1);\n+  d[4] = _kshiftli_mask64 (d[4], 63);\n+  d[5] = _kshiftri_mask64 (d[5], 63);\n+  d[6] = _kshiftli_mask64 (d[6], 0x7f);\n+  d[7] = _kshiftri_mask64 (d[7], 0x7f);\n+  d[8] = _kshiftli_mask64 (d[8], 0xff);\n+  d[9] = _kshiftri_mask64 (d[9], 0xff);\n+}"}, {"sha": "3ae1674e4a401e2346b68744794e80ffd99b0d5e", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-pr93673.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6d0f89d4be3ed7fde73417606a78c73d954cdf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-pr93673.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6d0f89d4be3ed7fde73417606a78c73d954cdf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-pr93673.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-pr93673.c?ref=dc6d0f89d4be3ed7fde73417606a78c73d954cdf", "patch": "@@ -0,0 +1,20 @@\n+/* PR target/93673 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512dq\" } */\n+\n+#include <x86intrin.h>\n+\n+void\n+foo (__mmask8 *a)\n+{\n+  a[0] = _kshiftli_mask8 (a[0], 0);\n+  a[1] = _kshiftri_mask8 (a[1], 0);\n+  a[2] = _kshiftli_mask8 (a[2], 1);\n+  a[3] = _kshiftri_mask8 (a[3], 1);\n+  a[4] = _kshiftli_mask8 (a[4], 7);\n+  a[5] = _kshiftri_mask8 (a[5], 7);\n+  a[6] = _kshiftli_mask8 (a[6], 0x7f);\n+  a[7] = _kshiftri_mask8 (a[7], 0x7f);\n+  a[8] = _kshiftli_mask8 (a[8], 0xff);\n+  a[9] = _kshiftri_mask8 (a[9], 0xff);\n+}"}, {"sha": "963823c8a78a514a857b5bbe15bed6b9d0b97a74", "filename": "gcc/testsuite/gcc.target/i386/avx512f-pr93673.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6d0f89d4be3ed7fde73417606a78c73d954cdf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr93673.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6d0f89d4be3ed7fde73417606a78c73d954cdf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr93673.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr93673.c?ref=dc6d0f89d4be3ed7fde73417606a78c73d954cdf", "patch": "@@ -0,0 +1,20 @@\n+/* PR target/93673 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+\n+#include <x86intrin.h>\n+\n+void\n+foo (__mmask16 *b)\n+{\n+  b[0] = _kshiftli_mask16 (b[0], 0);\n+  b[1] = _kshiftri_mask16 (b[1], 0);\n+  b[2] = _kshiftli_mask16 (b[2], 1);\n+  b[3] = _kshiftri_mask16 (b[3], 1);\n+  b[4] = _kshiftli_mask16 (b[4], 15);\n+  b[5] = _kshiftri_mask16 (b[5], 15);\n+  b[6] = _kshiftli_mask16 (b[6], 0x7f);\n+  b[7] = _kshiftri_mask16 (b[7], 0x7f);\n+  b[8] = _kshiftli_mask16 (b[8], 0xff);\n+  b[9] = _kshiftri_mask16 (b[9], 0xff);\n+}"}]}