{"sha": "31534ac26e0ec1deeb648b2548dbbe17574ea78c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzE1MzRhYzI2ZTBlYzFkZWViNjQ4YjI1NDhkYmJlMTc1NzRlYTc4Yw==", "commit": {"author": {"name": "Siddhesh Poyarekar", "email": "siddhesh@gotplt.org", "date": "2021-07-28T10:13:47Z"}, "committer": {"name": "Siddhesh Poyarekar", "email": "siddhesh@gotplt.org", "date": "2021-07-28T12:13:26Z"}, "message": "analyzer: Handle strdup builtins\n\nConsolidate allocator builtin handling and add support for\n__builtin_strdup and __builtin_strndup.\n\ngcc/analyzer/ChangeLog:\n\n\t* analyzer.cc (is_named_call_p, is_std_named_call_p): Make\n\tfirst argument a const_tree.\n\t* analyzer.h (is_named_call_p, -s_std_named_call_p): Likewise.\n\t* sm-malloc.cc (known_allocator_p): New function.\n\t(malloc_state_machine::on_stmt): Use it.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/analyzer/strdup-1.c (test_4, test_5, test_6): New\n\ttests.", "tree": {"sha": "67774fc3af199a51173eb4f0f477bfb6181b5c3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67774fc3af199a51173eb4f0f477bfb6181b5c3c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31534ac26e0ec1deeb648b2548dbbe17574ea78c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31534ac26e0ec1deeb648b2548dbbe17574ea78c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31534ac26e0ec1deeb648b2548dbbe17574ea78c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31534ac26e0ec1deeb648b2548dbbe17574ea78c/comments", "author": {"login": "siddhesh", "id": 158582, "node_id": "MDQ6VXNlcjE1ODU4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/158582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/siddhesh", "html_url": "https://github.com/siddhesh", "followers_url": "https://api.github.com/users/siddhesh/followers", "following_url": "https://api.github.com/users/siddhesh/following{/other_user}", "gists_url": "https://api.github.com/users/siddhesh/gists{/gist_id}", "starred_url": "https://api.github.com/users/siddhesh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/siddhesh/subscriptions", "organizations_url": "https://api.github.com/users/siddhesh/orgs", "repos_url": "https://api.github.com/users/siddhesh/repos", "events_url": "https://api.github.com/users/siddhesh/events{/privacy}", "received_events_url": "https://api.github.com/users/siddhesh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "siddhesh", "id": 158582, "node_id": "MDQ6VXNlcjE1ODU4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/158582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/siddhesh", "html_url": "https://github.com/siddhesh", "followers_url": "https://api.github.com/users/siddhesh/followers", "following_url": "https://api.github.com/users/siddhesh/following{/other_user}", "gists_url": "https://api.github.com/users/siddhesh/gists{/gist_id}", "starred_url": "https://api.github.com/users/siddhesh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/siddhesh/subscriptions", "organizations_url": "https://api.github.com/users/siddhesh/orgs", "repos_url": "https://api.github.com/users/siddhesh/repos", "events_url": "https://api.github.com/users/siddhesh/events{/privacy}", "received_events_url": "https://api.github.com/users/siddhesh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84606efb0c6b1c1598d5ec6b05544e71596663b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84606efb0c6b1c1598d5ec6b05544e71596663b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84606efb0c6b1c1598d5ec6b05544e71596663b5"}], "stats": {"total": 76, "additions": 60, "deletions": 16}, "files": [{"sha": "b845b86cfe1bb037d8e407ce03f0907a1ba730f4", "filename": "gcc/analyzer/analyzer.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31534ac26e0ec1deeb648b2548dbbe17574ea78c/gcc%2Fanalyzer%2Fanalyzer.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31534ac26e0ec1deeb648b2548dbbe17574ea78c/gcc%2Fanalyzer%2Fanalyzer.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fanalyzer.cc?ref=31534ac26e0ec1deeb648b2548dbbe17574ea78c", "patch": "@@ -240,7 +240,7 @@ is_special_named_call_p (const gcall *call, const char *funcname,\n    Compare with special_function_p in calls.c.  */\n \n bool\n-is_named_call_p (tree fndecl, const char *funcname)\n+is_named_call_p (const_tree fndecl, const char *funcname)\n {\n   gcc_assert (fndecl);\n   gcc_assert (funcname);\n@@ -292,7 +292,7 @@ is_std_function_p (const_tree fndecl)\n /* Like is_named_call_p, but look for std::FUNCNAME.  */\n \n bool\n-is_std_named_call_p (tree fndecl, const char *funcname)\n+is_std_named_call_p (const_tree fndecl, const char *funcname)\n {\n   gcc_assert (fndecl);\n   gcc_assert (funcname);\n@@ -314,7 +314,7 @@ is_std_named_call_p (tree fndecl, const char *funcname)\n    arguments?  */\n \n bool\n-is_named_call_p (tree fndecl, const char *funcname,\n+is_named_call_p (const_tree fndecl, const char *funcname,\n \t\t const gcall *call, unsigned int num_args)\n {\n   gcc_assert (fndecl);\n@@ -332,7 +332,7 @@ is_named_call_p (tree fndecl, const char *funcname,\n /* Like is_named_call_p, but check for std::FUNCNAME.  */\n \n bool\n-is_std_named_call_p (tree fndecl, const char *funcname,\n+is_std_named_call_p (const_tree fndecl, const char *funcname,\n \t\t     const gcall *call, unsigned int num_args)\n {\n   gcc_assert (fndecl);"}, {"sha": "8de5d60821fd7c86bf68e3bd7dbc8edfb74daec9", "filename": "gcc/analyzer/analyzer.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31534ac26e0ec1deeb648b2548dbbe17574ea78c/gcc%2Fanalyzer%2Fanalyzer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31534ac26e0ec1deeb648b2548dbbe17574ea78c/gcc%2Fanalyzer%2Fanalyzer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fanalyzer.h?ref=31534ac26e0ec1deeb648b2548dbbe17574ea78c", "patch": "@@ -220,11 +220,11 @@ enum access_direction\n \n extern bool is_special_named_call_p (const gcall *call, const char *funcname,\n \t\t\t\t     unsigned int num_args);\n-extern bool is_named_call_p (tree fndecl, const char *funcname);\n-extern bool is_named_call_p (tree fndecl, const char *funcname,\n+extern bool is_named_call_p (const_tree fndecl, const char *funcname);\n+extern bool is_named_call_p (const_tree fndecl, const char *funcname,\n \t\t\t     const gcall *call, unsigned int num_args);\n-extern bool is_std_named_call_p (tree fndecl, const char *funcname);\n-extern bool is_std_named_call_p (tree fndecl, const char *funcname,\n+extern bool is_std_named_call_p (const_tree fndecl, const char *funcname);\n+extern bool is_std_named_call_p (const_tree fndecl, const char *funcname,\n \t\t\t\t const gcall *call, unsigned int num_args);\n extern bool is_setjmp_call_p (const gcall *call);\n extern bool is_longjmp_call_p (const gcall *call);"}, {"sha": "4f07d1f9257c345f4cc1c1524073c986d1fabbd6", "filename": "gcc/analyzer/sm-malloc.cc", "status": "modified", "additions": 33, "deletions": 8, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31534ac26e0ec1deeb648b2548dbbe17574ea78c/gcc%2Fanalyzer%2Fsm-malloc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31534ac26e0ec1deeb648b2548dbbe17574ea78c/gcc%2Fanalyzer%2Fsm-malloc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-malloc.cc?ref=31534ac26e0ec1deeb648b2548dbbe17574ea78c", "patch": "@@ -1526,6 +1526,38 @@ malloc_state_machine::get_or_create_deallocator (tree deallocator_fndecl)\n   return d;\n }\n \n+/* Try to identify the function declaration either by name or as a known malloc\n+   builtin.  */\n+\n+static bool\n+known_allocator_p (const_tree fndecl, const gcall *call)\n+{\n+  /* Either it is a function we know by name and number of arguments... */\n+  if (is_named_call_p (fndecl, \"malloc\", call, 1)\n+      || is_named_call_p (fndecl, \"calloc\", call, 2)\n+      || is_std_named_call_p (fndecl, \"malloc\", call, 1)\n+      || is_std_named_call_p (fndecl, \"calloc\", call, 2)\n+      || is_named_call_p (fndecl, \"strdup\", call, 1)\n+      || is_named_call_p (fndecl, \"strndup\", call, 2))\n+    return true;\n+\n+  /* ... or it is a builtin allocator that allocates objects freed with\n+     __builtin_free.  */\n+  if (fndecl_built_in_p (fndecl))\n+    switch (DECL_FUNCTION_CODE (fndecl))\n+      {\n+      case BUILT_IN_MALLOC:\n+      case BUILT_IN_CALLOC:\n+      case BUILT_IN_STRDUP:\n+      case BUILT_IN_STRNDUP:\n+\treturn true;\n+      default:\n+\tbreak;\n+      }\n+\n+  return false;\n+}\n+\n /* Implementation of state_machine::on_stmt vfunc for malloc_state_machine.  */\n \n bool\n@@ -1536,14 +1568,7 @@ malloc_state_machine::on_stmt (sm_context *sm_ctxt,\n   if (const gcall *call = dyn_cast <const gcall *> (stmt))\n     if (tree callee_fndecl = sm_ctxt->get_fndecl_for_call (call))\n       {\n-\tif (is_named_call_p (callee_fndecl, \"malloc\", call, 1)\n-\t    || is_named_call_p (callee_fndecl, \"calloc\", call, 2)\n-\t    || is_std_named_call_p (callee_fndecl, \"malloc\", call, 1)\n-\t    || is_std_named_call_p (callee_fndecl, \"calloc\", call, 2)\n-\t    || is_named_call_p (callee_fndecl, \"__builtin_malloc\", call, 1)\n-\t    || is_named_call_p (callee_fndecl, \"__builtin_calloc\", call, 2)\n-\t    || is_named_call_p (callee_fndecl, \"strdup\", call, 1)\n-\t    || is_named_call_p (callee_fndecl, \"strndup\", call, 2))\n+\tif (known_allocator_p (callee_fndecl, call))\n \t  {\n \t    on_allocator_call (sm_ctxt, call, &m_free);\n \t    return true;"}, {"sha": "9ac3921af21271f5d2ea4173c8f40adae8877fab", "filename": "gcc/testsuite/gcc.dg/analyzer/strdup-1.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31534ac26e0ec1deeb648b2548dbbe17574ea78c/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fstrdup-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31534ac26e0ec1deeb648b2548dbbe17574ea78c/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fstrdup-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fstrdup-1.c?ref=31534ac26e0ec1deeb648b2548dbbe17574ea78c", "patch": "@@ -14,8 +14,27 @@ void test_2 (const char *s)\n   char *p = strdup (s);\n   free (p);\n }\n+\n void test_3 (const char *s)\n {\n   char *p = strdup (s); /* { dg-message \"this call could return NULL\" } */\n   requires_nonnull (p); /* { dg-warning \"use of possibly-NULL 'p'\" } */\n }\n+\n+/* Repeat tests for __builtin_strdup.  */\n+void test_4 (const char *s)\n+{\n+  char *p = __builtin_strdup (s); /* { dg-message \"allocated here\" } */\n+} /* { dg-warning \"leak of 'p'\" } */\n+\n+void test_5 (const char *s)\n+{\n+  char *p = __builtin_strdup (s);\n+  free (p);\n+}\n+\n+void test_6 (const char *s)\n+{\n+  char *p = __builtin_strdup (s); /* { dg-message \"this call could return NULL\" } */\n+  requires_nonnull (p); /* { dg-warning \"use of possibly-NULL 'p'\" } */\n+}"}]}