{"sha": "0dce1c0fcb90265b98cb72aa086b40b0edd75d08", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGRjZTFjMGZjYjkwMjY1Yjk4Y2I3MmFhMDg2YjQwYjBlZGQ3NWQwOA==", "commit": {"author": {"name": "Arnaud Vandyck", "email": "arnaud.vandyck@ulg.ac.be", "date": "2004-01-22T21:41:53Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-01-22T21:41:53Z"}, "message": "2004-01-22  Arnaud Vandyck  <arnaud.vandyck@ulg.ac.be>\n            Michael Koch  <konqueror@gmx.de>\n\n\t* javax/swing/table/DefaultTableCellRenderer.java\n\t(DefaultTableCellRenderer): Added javadoc for the class and for\n\tthe constructor, Border instance, create an EmptyBorder.\n\t(UIResource): Removed the comment at the end of the class\n\t(setForeground): New method.\n\t(setBackground): New method.\n\t(updateUI): New method.\n\t(getTableCellRendererComponent): Rewritten with the help of\n\tdvholten and Stephane Meslin-Weber.\n\t(validate): New method.\n\t(repaint): New method.\n\t(firePropertyChange): New method.\n\t(setValue): New method.\n\nCo-Authored-By: Michael Koch <konqueror@gmx.de>\n\nFrom-SVN: r76372", "tree": {"sha": "2421f5ffa29be1c61f75735598867406fe04b968", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2421f5ffa29be1c61f75735598867406fe04b968"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0dce1c0fcb90265b98cb72aa086b40b0edd75d08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dce1c0fcb90265b98cb72aa086b40b0edd75d08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0dce1c0fcb90265b98cb72aa086b40b0edd75d08", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dce1c0fcb90265b98cb72aa086b40b0edd75d08/comments", "author": null, "committer": null, "parents": [{"sha": "c8796654d22732b068a00d1c9d07abd2e989033d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8796654d22732b068a00d1c9d07abd2e989033d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8796654d22732b068a00d1c9d07abd2e989033d"}], "stats": {"total": 165, "additions": 159, "deletions": 6}, "files": [{"sha": "4eb9edbf2acbdf5c86aa480ea8d24ac93fabda98", "filename": "libjava/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dce1c0fcb90265b98cb72aa086b40b0edd75d08/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dce1c0fcb90265b98cb72aa086b40b0edd75d08/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=0dce1c0fcb90265b98cb72aa086b40b0edd75d08", "patch": "@@ -1,3 +1,20 @@\n+2004-01-22  Arnaud Vandyck  <arnaud.vandyck@ulg.ac.be>\n+            Michael Koch  <konqueror@gmx.de>\n+\n+\t* javax/swing/table/DefaultTableCellRenderer.java\n+\t(DefaultTableCellRenderer): Added javadoc for the class and for\n+\tthe constructor, Border instance, create an EmptyBorder.\n+\t(UIResource): Removed the comment at the end of the class\n+\t(setForeground): New method.\n+\t(setBackground): New method.\n+\t(updateUI): New method.\n+\t(getTableCellRendererComponent): Rewritten with the help of\n+\tdvholten and Stephane Meslin-Weber.\n+\t(validate): New method.\n+\t(repaint): New method.\n+\t(firePropertyChange): New method.\n+\t(setValue): New method.\n+\n 2004-01-22  Thomas Fitzsimmons  <fitzsim@redhat.com>\n \n \t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkWindowPeer.c"}, {"sha": "6bd0ff57f591a4278387caf8918de06801639354", "filename": "libjava/javax/swing/table/DefaultTableCellRenderer.java", "status": "modified", "additions": 142, "deletions": 6, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dce1c0fcb90265b98cb72aa086b40b0edd75d08/libjava%2Fjavax%2Fswing%2Ftable%2FDefaultTableCellRenderer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dce1c0fcb90265b98cb72aa086b40b0edd75d08/libjava%2Fjavax%2Fswing%2Ftable%2FDefaultTableCellRenderer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Ftable%2FDefaultTableCellRenderer.java?ref=0dce1c0fcb90265b98cb72aa086b40b0edd75d08", "patch": "@@ -1,5 +1,5 @@\n /* DefaultTableCellRenderer.java\n-   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2004 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -35,40 +35,176 @@\n obligated to do so.  If you do not wish to do so, delete this\n exception statement from your version. */\n \n-\n package javax.swing.table;\n \n+import java.awt.Color;\n import java.awt.Component;\n+import java.awt.Rectangle;\n import java.io.Serializable;\n import javax.swing.JLabel;\n import javax.swing.JTable;\n import javax.swing.border.Border;\n+import javax.swing.border.EmptyBorder;\n \n /**\n- * STUBBED\n+ * Class to display every cells.\n  */\n public class DefaultTableCellRenderer extends JLabel\n   implements TableCellRenderer, Serializable\n {\n   static final long serialVersionUID = 7878911414715528324L;\n \n+  protected static Border noFocusBorder;\n+\n   public static class UIResource extends DefaultTableCellRenderer\n     implements javax.swing.plaf.UIResource\n   {\n     public UIResource()\n     {\n     }\n-  } // class UIResource\n+  }\n \n+  /**\n+   * Creates a default table cell renderer with an empty border.\n+   */\n   public DefaultTableCellRenderer()\n   {\n+    super();\n+    this.noFocusBorder = new EmptyBorder(0, 0, 0, 0);\n+  }\n+\n+  /**\n+   * Assign the unselected-foreground.\n+   *\n+   * @param c the color to assign\n+   */\n+  public void setForeground(Color c)\n+  {\n+    super.setForeground(c);\n+  }\n+\n+  /**\n+   * Assign the unselected-background.\n+   *\n+   * @param c the color to assign\n+   */\n+  public void setBackground(Color c)\n+  {\n+    super.setBackground(c);\n   }\n \n+  /**\n+   * Look and feel has changed.\n+   *\n+   * <p>Replaces the current UI object with the  latest version from\n+   * the UIManager.</p>\n+   */\n+  public void updateUI()\n+  {\n+    super.updateUI();\n+  }\n+\n+  /**\n+   * Get the string value of the object and pass it to setText().\n+   *\n+   * @param table the JTable\n+   * @param value the value of the object\n+   * @param isSelected is the cell selected?\n+   * @param hasFocus has the cell the focus?\n+   * @param row the row to render\n+   * @param column the cell to render\n+   * \n+   * @return this component (the default table cell renderer)\n+   */\n   public Component getTableCellRendererComponent(JTable table, Object value,\n                                                  boolean isSelected,\n                                                  boolean hasFocus,\n                                                  int row, int column)\n   {\n-    return null;\n+    if (value!=null)\n+      super.setText(value.toString());\n+    \n+    return this;\n+  }\n+\n+  /**\n+   * Overriden for performance.\n+   *\n+   * <p>This method needs to be overridden in a subclass to actually\n+   * do something.</p>\n+   *\n+   * @return always true\n+   */\n+  public boolean isOpaque()\n+  {\n+    return true;\n+  }\n+\n+  /**\n+   * Overriden for performance.\n+   *\n+   * <p>This method needs to be overridden in a subclass to actually\n+   * do something.</p>\n+   */\n+  public void validate()\n+  {\n+    // Does nothing.\n+  }\n+\n+  /**\n+   * Overriden for performance.\n+   *\n+   * <p>This method needs to be overridden in a subclass to actually\n+   * do something.</p>\n+   */\n+  public void repaint(long tm, int x, int y, int width, int height)\n+  {\n+    // Does nothing.\n+  }\n+\n+  /**\n+   * Overriden for performance.\n+   *\n+   * <p>This method needs to be overridden in a subclass to actually\n+   * do something.</p>\n+   */\n+  public void repaint(Rectangle r)\n+  {\n+    // Does nothing.\n+  }\n+\n+  /**\n+   * Overriden for performance.\n+   *\n+   * <p>This method needs to be overridden in a subclass to actually\n+   * do something.</p>\n+   */\n+  public void firePropertyChange(String propertyName, Object oldValue,\n+                                 Object newValue)\n+  {\n+    // Does nothing.\n+  }\n+\n+  /**\n+   * Overriden for performance.\n+   *\n+   * <p>This method needs to be overridden in a subclass to actually\n+   * do something.</p>\n+   */\n+  public void firePropertyChange(String propertyName, boolean oldValue,\n+\t\t                 boolean newValue)\n+  {\n+    // Does nothing.\n+  }\n+\n+  /**\n+   * Sets the String for this cell.\n+   * \n+   * @param value the string value for this cell; if value is null it\n+   * sets the text value to an empty string\n+   */\n+  protected void setValue(Object value)\n+  {\n+    super.setText((value!=null) ? value.toString() : \"\");\n   }\n-} // class DefaultTableCellRenderer\n+}"}]}