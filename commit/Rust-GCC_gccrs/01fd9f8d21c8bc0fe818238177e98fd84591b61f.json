{"sha": "01fd9f8d21c8bc0fe818238177e98fd84591b61f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDFmZDlmOGQyMWM4YmMwZmU4MTgyMzgxNzdlOThmZDg0NTkxYjYxZg==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2018-10-21T10:23:58Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2018-10-21T10:23:58Z"}, "message": "i386: Add missing AVX512VL or/xor intrinsics\n\ngcc/\n\n\tPR target/87662\n\t* i386/avx512vlintrin.h (_mm256_or_epi32): New.\n\t(_mm_or_epi32): Likewise.\n\t(_mm256_xor_epi32): Likewise.\n\t(_mm_xor_epi32): Likewise.\n\t(_mm256_or_epi64): Likewise.\n\t(_mm_or_epi64): Likewise.\n\t(_mm256_xor_epi64): Likewise.\n\t(_mm_xor_epi64): Likewise.\n\ngcc/testsuite/\n\n\tPR target/87662\n\t* gcc.target/i386/pr87662.c\n\nFrom-SVN: r265350", "tree": {"sha": "db5f82871e37a0c03780f5a6ec0c563bc3f85f61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db5f82871e37a0c03780f5a6ec0c563bc3f85f61"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01fd9f8d21c8bc0fe818238177e98fd84591b61f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01fd9f8d21c8bc0fe818238177e98fd84591b61f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01fd9f8d21c8bc0fe818238177e98fd84591b61f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01fd9f8d21c8bc0fe818238177e98fd84591b61f/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "69862942e10601b92718647ce27f8199d2b36bf0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69862942e10601b92718647ce27f8199d2b36bf0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69862942e10601b92718647ce27f8199d2b36bf0"}], "stats": {"total": 141, "additions": 141, "deletions": 0}, "files": [{"sha": "4d85691003442dafe479d0de48aad52764c30646", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01fd9f8d21c8bc0fe818238177e98fd84591b61f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01fd9f8d21c8bc0fe818238177e98fd84591b61f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=01fd9f8d21c8bc0fe818238177e98fd84591b61f", "patch": "@@ -1,3 +1,15 @@\n+2018-10-21  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/87662\n+\t* i386/avx512vlintrin.h (_mm256_or_epi32): New.\n+\t(_mm_or_epi32): Likewise.\n+\t(_mm256_xor_epi32): Likewise.\n+\t(_mm_xor_epi32): Likewise.\n+\t(_mm256_or_epi64): Likewise.\n+\t(_mm_or_epi64): Likewise.\n+\t(_mm256_xor_epi64): Likewise.\n+\t(_mm_xor_epi64): Likewise.\n+\n 2018-10-20  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/72782"}, {"sha": "a4fb0b0ac0029158b86eb7e3f32a1d92c26cb1d1", "filename": "gcc/config/i386/avx512vlintrin.h", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01fd9f8d21c8bc0fe818238177e98fd84591b61f/gcc%2Fconfig%2Fi386%2Favx512vlintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01fd9f8d21c8bc0fe818238177e98fd84591b61f/gcc%2Fconfig%2Fi386%2Favx512vlintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512vlintrin.h?ref=01fd9f8d21c8bc0fe818238177e98fd84591b61f", "patch": "@@ -4855,6 +4855,12 @@ _mm256_maskz_or_epi32 (__mmask8 __U, __m256i __A, __m256i __B)\n \t\t\t\t\t\t(__mmask8) __U);\n }\n \n+extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_or_epi32 (__m256i __A, __m256i __B)\n+{\n+  return (__m256i) ((__v8su)__A | (__v8su)__B);\n+}\n+\n extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask_or_epi32 (__m128i __W, __mmask8 __U, __m128i __A, __m128i __B)\n@@ -4876,6 +4882,12 @@ _mm_maskz_or_epi32 (__mmask8 __U, __m128i __A, __m128i __B)\n \t\t\t\t\t\t(__mmask8) __U);\n }\n \n+extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_or_epi32 (__m128i __A, __m128i __B)\n+{\n+  return (__m128i) ((__v4su)__A | (__v4su)__B);\n+}\n+\n extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_mask_xor_epi32 (__m256i __W, __mmask8 __U, __m256i __A,\n@@ -4898,6 +4910,12 @@ _mm256_maskz_xor_epi32 (__mmask8 __U, __m256i __A, __m256i __B)\n \t\t\t\t\t\t (__mmask8) __U);\n }\n \n+extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_xor_epi32 (__m256i __A, __m256i __B)\n+{\n+  return (__m256i) ((__v8su)__A ^ (__v8su)__B);\n+}\n+\n extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask_xor_epi32 (__m128i __W, __mmask8 __U, __m128i __A,\n@@ -4920,6 +4938,12 @@ _mm_maskz_xor_epi32 (__mmask8 __U, __m128i __A, __m128i __B)\n \t\t\t\t\t\t (__mmask8) __U);\n }\n \n+extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_xor_epi32 (__m128i __A, __m128i __B)\n+{\n+  return (__m128i) ((__v4su)__A ^ (__v4su)__B);\n+}\n+\n extern __inline __m128\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask_cvtpd_ps (__m128 __W, __mmask8 __U, __m128d __A)\n@@ -7340,6 +7364,12 @@ _mm256_maskz_or_epi64 (__mmask8 __U, __m256i __A, __m256i __B)\n \t\t\t\t\t\t(__mmask8) __U);\n }\n \n+extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_or_epi64 (__m256i __A, __m256i __B)\n+{\n+  return (__m256i) ((__v4du)__A | (__v4du)__B);\n+}\n+\n extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask_or_epi64 (__m128i __W, __mmask8 __U, __m128i __A, __m128i __B)\n@@ -7361,6 +7391,12 @@ _mm_maskz_or_epi64 (__mmask8 __U, __m128i __A, __m128i __B)\n \t\t\t\t\t\t(__mmask8) __U);\n }\n \n+extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_or_epi64 (__m128i __A, __m128i __B)\n+{\n+  return (__m128i) ((__v2du)__A | (__v2du)__B);\n+}\n+\n extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_mask_xor_epi64 (__m256i __W, __mmask8 __U, __m256i __A,\n@@ -7383,6 +7419,12 @@ _mm256_maskz_xor_epi64 (__mmask8 __U, __m256i __A, __m256i __B)\n \t\t\t\t\t\t (__mmask8) __U);\n }\n \n+extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_xor_epi64 (__m256i __A, __m256i __B)\n+{\n+  return (__m256i) ((__v4du)__A ^ (__v4du)__B);\n+}\n+\n extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask_xor_epi64 (__m128i __W, __mmask8 __U, __m128i __A,\n@@ -7405,6 +7447,12 @@ _mm_maskz_xor_epi64 (__mmask8 __U, __m128i __A, __m128i __B)\n \t\t\t\t\t\t (__mmask8) __U);\n }\n \n+extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_xor_epi64 (__m128i __A, __m128i __B)\n+{\n+  return (__m128i) ((__v2du)__A ^ (__v2du)__B);\n+}\n+\n extern __inline __m256d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_mask_max_pd (__m256d __W, __mmask8 __U, __m256d __A,"}, {"sha": "c0d1ad26b23d053f1456900610f778fefaf7722f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01fd9f8d21c8bc0fe818238177e98fd84591b61f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01fd9f8d21c8bc0fe818238177e98fd84591b61f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=01fd9f8d21c8bc0fe818238177e98fd84591b61f", "patch": "@@ -1,3 +1,8 @@\n+2018-10-21  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/87662\n+\t* gcc.target/i386/pr87662.c\n+\n 2018-10-20  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/72782"}, {"sha": "c9110a04440211f3bc7236f106695577af364c04", "filename": "gcc/testsuite/gcc.target/i386/pr87662.c", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01fd9f8d21c8bc0fe818238177e98fd84591b61f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87662.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01fd9f8d21c8bc0fe818238177e98fd84591b61f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87662.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87662.c?ref=01fd9f8d21c8bc0fe818238177e98fd84591b61f", "patch": "@@ -0,0 +1,76 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mavx512vl\" } */\n+/* { dg-final { scan-assembler-times \"vpord\\[^\\n\\r\\]*ymm16\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpord\\[^\\n\\r\\]*xmm16\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vporq\\[^\\n\\r\\]*ymm16\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vporq\\[^\\n\\r\\]*xmm16\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpxord\\[^\\n\\r\\]*ymm16\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpxord\\[^\\n\\r\\]*xmm16\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpxorq\\[^\\n\\r\\]*ymm16\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpxorq\\[^\\n\\r\\]*xmm16\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+__m256i\n+foo1 (__m256i x, __m256i y)\n+{\n+  register __m256i z __asm (\"xmm16\") = y;\n+  asm volatile (\"\" : \"+v\" (z));\n+  return _mm256_or_epi32 (x, z);\n+}\n+\n+__m256i\n+foo2 (__m256i x, __m256i y)\n+{\n+  register __m256i z __asm (\"xmm16\") = y;\n+  asm volatile (\"\" : \"+v\" (z));\n+  return _mm256_xor_epi32 (x, z);\n+}\n+\n+__m128i\n+foo3 (__m128i x, __m128i y)\n+{\n+  register __m128i z __asm (\"xmm16\") = y;\n+  asm volatile (\"\" : \"+v\" (z));\n+  return _mm_or_epi32 (x, z);\n+}\n+\n+__m128i\n+foo4 (__m128i x, __m128i y)\n+{\n+  register __m128i z __asm (\"xmm16\") = y;\n+  asm volatile (\"\" : \"+v\" (z));\n+  return _mm_xor_epi32 (x, z);\n+}\n+\n+__m256i\n+foo5 (__m256i x, __m256i y)\n+{\n+  register __m256i z __asm (\"xmm16\") = y;\n+  asm volatile (\"\" : \"+v\" (z));\n+  return _mm256_or_epi64 (x, z);\n+}\n+\n+__m256i\n+foo6 (__m256i x, __m256i y)\n+{\n+  register __m256i z __asm (\"xmm16\") = y;\n+  asm volatile (\"\" : \"+v\" (z));\n+  return _mm256_xor_epi64 (x, z);\n+}\n+\n+__m128i\n+foo7 (__m128i x, __m128i y)\n+{\n+  register __m128i z __asm (\"xmm16\") = y;\n+  asm volatile (\"\" : \"+v\" (z));\n+  return _mm_or_epi64 (x, z);\n+}\n+\n+__m128i\n+foo8 (__m128i x, __m128i y)\n+{\n+  register __m128i z __asm (\"xmm16\") = y;\n+  asm volatile (\"\" : \"+v\" (z));\n+  return _mm_xor_epi64 (x, z);\n+}"}]}