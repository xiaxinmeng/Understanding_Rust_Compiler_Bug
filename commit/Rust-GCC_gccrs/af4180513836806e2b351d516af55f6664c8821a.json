{"sha": "af4180513836806e2b351d516af55f6664c8821a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWY0MTgwNTEzODM2ODA2ZTJiMzUxZDUxNmFmNTVmNjY2NGM4ODIxYQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-12-02T16:27:53Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-12-02T16:31:37Z"}, "message": "c++: RTTI accessors for modules\n\nThe module machinery needs to serialize tinfo types and vars by\nmeaning, not literally.  This adds the necessary pieces to rtti.\n\n\tgcc/cp/\n\t* cp-tree.h (DECL_TINFO_P): Also for TYPE_DECLs.\n\t(get_tinfo_decl_direct): Declare.\n\t(get_pseudo_tinfo_index, get_pseudo_tinfo_type): Declare.\n\t* rtti.c (get_tinfo_decl_direct): Externalize.\n\t(get_tinfo_desc): Set DECL_TINFO_P on the typedef.\n\t(get_pseudo_tinfo_index, get_pseudo_tinfo_type): New.", "tree": {"sha": "2de09dabbac976aaf8d8a1a1c3e3ecb6de8f0b36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2de09dabbac976aaf8d8a1a1c3e3ecb6de8f0b36"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af4180513836806e2b351d516af55f6664c8821a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af4180513836806e2b351d516af55f6664c8821a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af4180513836806e2b351d516af55f6664c8821a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af4180513836806e2b351d516af55f6664c8821a/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5bd5d85117ce968e68d41a746f917a63ed8e6ae6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bd5d85117ce968e68d41a746f917a63ed8e6ae6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bd5d85117ce968e68d41a746f917a63ed8e6ae6"}], "stats": {"total": 42, "additions": 38, "deletions": 4}, "files": [{"sha": "d69110f7ab6c629bf9378416a63f2ba066ae05fe", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af4180513836806e2b351d516af55f6664c8821a/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af4180513836806e2b351d516af55f6664c8821a/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=af4180513836806e2b351d516af55f6664c8821a", "patch": "@@ -494,7 +494,7 @@ extern GTY(()) tree cp_global_trees[CPTI_MAX];\n    4: IDENTIFIER_MARKED (IDENTIFIER_NODEs)\n       TREE_HAS_CONSTRUCTOR (in INDIRECT_REF, SAVE_EXPR, CONSTRUCTOR,\n \t  CALL_EXPR, or FIELD_DECL).\n-      DECL_TINFO_P (in VAR_DECL)\n+      DECL_TINFO_P (in VAR_DECL, TYPE_DECL)\n       FUNCTION_REF_QUALIFIED (in FUNCTION_TYPE, METHOD_TYPE)\n       OVL_LOOKUP_P (in OVERLOAD)\n       LOOKUP_FOUND_P (in RECORD_TYPE, UNION_TYPE, ENUMERAL_TYPE, NAMESPACE_DECL)\n@@ -3350,7 +3350,8 @@ struct GTY(()) lang_decl {\n \n /* 1 iff VAR_DECL node NODE is a type-info decl.  This flag is set for\n    both the primary typeinfo object and the associated NTBS name.  */\n-#define DECL_TINFO_P(NODE) TREE_LANG_FLAG_4 (VAR_DECL_CHECK (NODE))\n+#define DECL_TINFO_P(NODE)\t\t\t\\\n+  TREE_LANG_FLAG_4 (TREE_CHECK2 (NODE,VAR_DECL,TYPE_DECL))\n \n /* 1 iff VAR_DECL node NODE is virtual table or VTT.  We forward to\n    DECL_VIRTUAL_P from the common code, as that has the semantics we\n@@ -7025,13 +7026,16 @@ extern GTY(()) vec<tree, va_gc> *unemitted_tinfo_decls;\n \n extern void init_rtti_processing\t\t(void);\n extern tree build_typeid\t\t\t(tree, tsubst_flags_t);\n+extern tree get_tinfo_decl_direct\t        (tree, tree, int);\n extern tree get_tinfo_decl\t\t\t(tree);\n extern tree get_typeid\t\t\t\t(tree, tsubst_flags_t);\n extern tree build_headof\t\t\t(tree);\n extern tree build_dynamic_cast\t\t\t(location_t, tree, tree,\n \t\t\t\t\t\t tsubst_flags_t);\n extern void emit_support_tinfos\t\t\t(void);\n extern bool emit_tinfo_decl\t\t\t(tree);\n+extern unsigned get_pseudo_tinfo_index\t\t(tree);\n+extern tree get_pseudo_tinfo_type\t\t(unsigned);\n \n /* in search.c */\n extern bool accessible_base_p\t\t\t(tree, tree, bool);"}, {"sha": "d6288622246d68e60351ca4272c7d1af5b485db5", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af4180513836806e2b351d516af55f6664c8821a/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af4180513836806e2b351d516af55f6664c8821a/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=af4180513836806e2b351d516af55f6664c8821a", "patch": "@@ -123,7 +123,6 @@ static GTY (()) vec<tinfo_s, va_gc> *tinfo_descs;\n \n static tree ifnonnull (tree, tree, tsubst_flags_t);\n static tree tinfo_name (tree, bool);\n-static tree get_tinfo_decl_direct (tree type, tree name, int pseudo_ix);\n static tree build_dynamic_cast_1 (location_t, tree, tree, tsubst_flags_t);\n static tree throw_bad_cast (void);\n static tree throw_bad_typeid (void);\n@@ -431,7 +430,7 @@ get_tinfo_decl (tree type)\n /* Get or create a tinfo VAR_DECL directly from the provided information.\n    The caller must have already checked it is valid to do so.  */\n \n-static tree\n+tree\n get_tinfo_decl_direct (tree type, tree name, int pseudo_ix)\n {\n   /* For a class type, the variable is cached in the type node\n@@ -1479,6 +1478,7 @@ get_tinfo_desc (unsigned ix)\n   finish_builtin_struct (pseudo_type, pseudo_name, fields, NULL_TREE);\n   CLASSTYPE_AS_BASE (pseudo_type) = pseudo_type;\n   DECL_CONTEXT (TYPE_NAME (pseudo_type)) = FROB_CONTEXT (global_namespace);\n+  DECL_TINFO_P (TYPE_NAME (pseudo_type)) = true;\n   xref_basetypes (pseudo_type, /*bases=*/NULL_TREE);\n \n   res->type = cp_build_qualified_type (pseudo_type, TYPE_QUAL_CONST);\n@@ -1491,6 +1491,36 @@ get_tinfo_desc (unsigned ix)\n   return res;\n }\n \n+/* Return an identifying index for the pseudo type_info TYPE.\n+   We wrote the index at the end of the name, so just scan it from\n+   there.  This isn't critical, as it's only on the first use of this\n+   type during module stream out.  */\n+\n+unsigned\n+get_pseudo_tinfo_index (tree type)\n+{\n+  tree name = DECL_NAME (TYPE_NAME (type));\n+  unsigned ix = 0, scale = 1;\n+  size_t len = IDENTIFIER_LENGTH (name);\n+  const char *ptr = IDENTIFIER_POINTER (name) + len;\n+\n+  for (; *--ptr != '_'; scale *= 10)\n+    {\n+      len--;\n+      gcc_checking_assert (len && ISDIGIT (*ptr));\n+      ix += (*ptr - '0') * scale;\n+    }\n+\n+  gcc_assert (len != IDENTIFIER_LENGTH (name));\n+  return ix;\n+}\n+\n+tree\n+get_pseudo_tinfo_type (unsigned ix)\n+{\n+  return get_tinfo_desc (ix)->type;\n+}\n+\n /* We lazily create the type info types.  */\n \n static void"}]}