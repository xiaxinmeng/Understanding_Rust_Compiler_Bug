{"sha": "babaa0e521c3eaf50227a8c6933c4dc4e2a7ff34", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmFiYWEwZTUyMWMzZWFmNTAyMjdhOGM2OTMzYzRkYzRlMmE3ZmYzNA==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-03-02T09:18:26Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-17T08:04:28Z"}, "message": "AVX512FP16: Add testcase for vcvtsh2si/vcvtsh2usi/vcvtsi2sh/vcvtusi2sh.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx512fp16-helper.h (V512): Add int32\n\tcomponent.\n\t* gcc.target/i386/avx512fp16-vcvtsh2si-1a.c: New test.\n\t* gcc.target/i386/avx512fp16-vcvtsh2si-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcvtsh2si64-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcvtsh2si64-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcvtsh2usi-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcvtsh2usi-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcvtsh2usi64-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcvtsh2usi64-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcvtsi2sh-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcvtsi2sh-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcvtsi2sh64-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcvtsi2sh64-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcvtusi2sh-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcvtusi2sh-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcvtusi2sh64-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcvtusi2sh64-1b.c: Ditto.", "tree": {"sha": "d2dfa85becb1463190f6a5a840a9530359f4b6c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2dfa85becb1463190f6a5a840a9530359f4b6c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/babaa0e521c3eaf50227a8c6933c4dc4e2a7ff34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/babaa0e521c3eaf50227a8c6933c4dc4e2a7ff34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/babaa0e521c3eaf50227a8c6933c4dc4e2a7ff34", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/babaa0e521c3eaf50227a8c6933c4dc4e2a7ff34/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3069a2e599700a40ae03569b54b9a562dc919510", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3069a2e599700a40ae03569b54b9a562dc919510", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3069a2e599700a40ae03569b54b9a562dc919510"}], "stats": {"total": 509, "additions": 509, "deletions": 0}, "files": [{"sha": "cf1c536d9f7aa01e210e1ba430d18b8e1fdf63fb", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-helper.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/babaa0e521c3eaf50227a8c6933c4dc4e2a7ff34/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-helper.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/babaa0e521c3eaf50227a8c6933c4dc4e2a7ff34/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-helper.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-helper.h?ref=babaa0e521c3eaf50227a8c6933c4dc4e2a7ff34", "patch": "@@ -34,6 +34,7 @@ typedef union\n   __m128i\t  xmmi[4];\n   unsigned short  u16[32];\n   unsigned int    u32[16];\n+  int\t\t  i32[16];\n   long long\t  s64[8];\n   unsigned long long u64[8];\n   float           f32[16];"}, {"sha": "f29c953572d76f214ce585c64a2b67c798873263", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvtsh2si-1a.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/babaa0e521c3eaf50227a8c6933c4dc4e2a7ff34/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtsh2si-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/babaa0e521c3eaf50227a8c6933c4dc4e2a7ff34/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtsh2si-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtsh2si-1a.c?ref=babaa0e521c3eaf50227a8c6933c4dc4e2a7ff34", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtsh2si\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%eax\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtsh2si\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%eax\" 1 } } */\n+\n+\n+#include <immintrin.h>\n+\n+volatile __m128h x1;\n+volatile int res1;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res1 = _mm_cvtsh_i32 (x1);\n+  res1 = _mm_cvt_roundsh_i32 (x1, 8);\n+}"}, {"sha": "89c492cfc44f41ee54385c1955ab55db2ff7c2a0", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvtsh2si-1b.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/babaa0e521c3eaf50227a8c6933c4dc4e2a7ff34/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtsh2si-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/babaa0e521c3eaf50227a8c6933c4dc4e2a7ff34/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtsh2si-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtsh2si-1b.c?ref=babaa0e521c3eaf50227a8c6933c4dc4e2a7ff34", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS 2\n+\n+void NOINLINE\n+emulate_cvtph2_d(V512 * dest, V512 op1,\n+\t\t __mmask32 k, int zero_mask)\n+{\n+  V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+  int i;\n+  __mmask16 m1, m2;\n+\n+  m1 = k & 0xffff;\n+\n+  unpack_ph_2twops(op1, &v1, &v2);\n+\n+  for (i = 0; i < 16; i++) {\n+    if (((1 << i) & m1) == 0) {\n+      if (zero_mask) {\n+\tv5.u32[i] = 0;\n+      }\n+      else {\n+\tv5.u32[i] = dest->u32[i];\n+      }\n+    }\n+    else {\n+      v5.u32[i] = v1.f32[i];\n+\n+    }\n+  }\n+  *dest = v5;\n+}\n+\n+void\n+test_512 (void)\n+{\n+  V512 res;\n+  V512 exp;\n+  \n+  init_src();\n+  emulate_cvtph2_d(&exp, src1,  NET_MASK, 0);\n+  res.i32[0] = _mm_cvt_roundsh_i32(src1.xmmh[0], _ROUND_NINT);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_cvt_roundsh_i32\");\n+\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+}\n+"}, {"sha": "0289ebf95ea11867dc64efff70755bddbe5dd630", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvtsh2si64-1a.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/babaa0e521c3eaf50227a8c6933c4dc4e2a7ff34/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtsh2si64-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/babaa0e521c3eaf50227a8c6933c4dc4e2a7ff34/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtsh2si64-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtsh2si64-1a.c?ref=babaa0e521c3eaf50227a8c6933c4dc4e2a7ff34", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtsh2si\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%rax\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtsh2si\\[ \\\\t\\]+\\{rz-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%rax\" 1 } } */\n+\n+\n+#include <immintrin.h>\n+\n+volatile __m128h x1;\n+volatile long long res2;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res2 = _mm_cvtsh_i64 (x1);\n+  res2 = _mm_cvt_roundsh_i64 (x1, 11);\n+}"}, {"sha": "6a5e836fd7f0fade161e48828453b158fcb29e3d", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvtsh2si64-1b.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/babaa0e521c3eaf50227a8c6933c4dc4e2a7ff34/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtsh2si64-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/babaa0e521c3eaf50227a8c6933c4dc4e2a7ff34/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtsh2si64-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtsh2si64-1b.c?ref=babaa0e521c3eaf50227a8c6933c4dc4e2a7ff34", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run { target { { ! ia32 } && avx512fp16 } } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS 4\n+\n+void NOINLINE\n+emulate_cvtph2_q(V512 * dest, V512 op1,\n+\t\t __mmask32 k, int zero_mask)\n+{\n+  V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+  int i;\n+  __mmask16 m1, m2;\n+\n+  m1 = k & 0xffff;\n+\n+  unpack_ph_2twops(op1, &v1, &v2);\n+\n+  for (i = 0; i < 8; i++) {\n+    if (((1 << i) & m1) == 0) {\n+      if (zero_mask) {\n+\tv5.u64[i] = 0;\n+      }\n+      else {\n+\tv5.u64[i] = dest->u64[i];\n+      }\n+    }\n+    else {\n+      v5.u64[i] = v1.f32[i];\n+    }\n+  }\n+  *dest = v5;\n+}\n+\n+void\n+test_512 (void)\n+{\n+  V512 res;\n+  V512 exp;\n+  \n+  init_src();\n+  emulate_cvtph2_q(&exp, src1,  NET_MASK, 0);\n+  res.s64[0] = _mm_cvt_roundsh_i64(src1.xmmh[0], _ROUND_NINT);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_cvt_roundsh_i64\");\n+\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+}\n+"}, {"sha": "7d00867247e91fad74fc5a2538903e385ecd3e37", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvtsh2usi-1a.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/babaa0e521c3eaf50227a8c6933c4dc4e2a7ff34/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtsh2usi-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/babaa0e521c3eaf50227a8c6933c4dc4e2a7ff34/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtsh2usi-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtsh2usi-1a.c?ref=babaa0e521c3eaf50227a8c6933c4dc4e2a7ff34", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtsh2usi\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%eax\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtsh2usi\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%eax\" 1 } } */\n+\n+\n+#include <immintrin.h>\n+\n+volatile __m128h x1;\n+volatile unsigned int res1;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res1 = _mm_cvtsh_u32 (x1);\n+  res1 = _mm_cvt_roundsh_u32 (x1, 8);\n+}"}, {"sha": "466ce6ead8337427c846936f353f04e7dbf1bf5c", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvtsh2usi-1b.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/babaa0e521c3eaf50227a8c6933c4dc4e2a7ff34/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtsh2usi-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/babaa0e521c3eaf50227a8c6933c4dc4e2a7ff34/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtsh2usi-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtsh2usi-1b.c?ref=babaa0e521c3eaf50227a8c6933c4dc4e2a7ff34", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS 2\n+\n+void NOINLINE\n+emulate_cvtph2_d(V512 * dest, V512 op1,\n+\t\t __mmask32 k, int zero_mask)\n+{\n+  V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+  int i;\n+  __mmask16 m1, m2;\n+\n+  m1 = k & 0xffff;\n+\n+  unpack_ph_2twops(op1, &v1, &v2);\n+\n+  for (i = 0; i < 16; i++) {\n+    if (((1 << i) & m1) == 0) {\n+      if (zero_mask) {\n+\tv5.u32[i] = 0;\n+      }\n+      else {\n+\tv5.u32[i] = dest->u32[i];\n+      }\n+    }\n+    else {\n+      v5.u32[i] = v1.f32[i];\n+\n+    }\n+  }\n+  *dest = v5;\n+}\n+\n+void\n+test_512 (void)\n+{\n+  V512 res;\n+  V512 exp;\n+  \n+  init_src();\n+  emulate_cvtph2_d(&exp, src1,  NET_MASK, 0);\n+  res.u32[0] = _mm_cvt_roundsh_i32(src1.xmmh[0], _ROUND_NINT);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_cvt_roundsh_u32\");\n+\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+}\n+"}, {"sha": "363252d8d5d2643061ad44e6729fe159f7cac942", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvtsh2usi64-1a.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/babaa0e521c3eaf50227a8c6933c4dc4e2a7ff34/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtsh2usi64-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/babaa0e521c3eaf50227a8c6933c4dc4e2a7ff34/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtsh2usi64-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtsh2usi64-1a.c?ref=babaa0e521c3eaf50227a8c6933c4dc4e2a7ff34", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile  { target { ! ia32 } } } */\n+/* { dg-options \"-mavx512fp16 -O2 \" } */\n+/* { dg-final { scan-assembler-times \"vcvtsh2usi\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%rax\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtsh2usi\\[ \\\\t\\]+\\{rz-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%rax\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128h x1;\n+volatile unsigned long long res2;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res2 = _mm_cvtsh_u64 (x1);\n+  res2 = _mm_cvt_roundsh_u64 (x1, 11);\n+}"}, {"sha": "74643ae2bd68c0b8fd19a59d417f5cf41cd8d776", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvtsh2usi64-1b.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/babaa0e521c3eaf50227a8c6933c4dc4e2a7ff34/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtsh2usi64-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/babaa0e521c3eaf50227a8c6933c4dc4e2a7ff34/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtsh2usi64-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtsh2usi64-1b.c?ref=babaa0e521c3eaf50227a8c6933c4dc4e2a7ff34", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do run  { target { { ! ia32 } && avx512fp16 } } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS 4\n+\n+void NOINLINE\n+emulate_cvtph2_q(V512 * dest, V512 op1,\n+\t\t __mmask32 k, int zero_mask)\n+{\n+  V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+  int i;\n+  __mmask16 m1, m2;\n+\n+  m1 = k & 0xffff;\n+\n+  unpack_ph_2twops(op1, &v1, &v2);\n+\n+  for (i = 0; i < 8; i++) {\n+    if (((1 << i) & m1) == 0) {\n+      if (zero_mask) {\n+\tv5.u64[i] = 0;\n+      }\n+      else {\n+\tv5.u64[i] = dest->u64[i];\n+      }\n+    }\n+    else {\n+      v5.u64[i] = v1.f32[i];\n+    }\n+  }\n+  *dest = v5;\n+}\n+\n+void\n+test_512 (void)\n+{\n+  V512 res;\n+  V512 exp;\n+  \n+  init_src();\n+  emulate_cvtph2_q(&exp, src1,  NET_MASK, 0);\n+  res.u64[0] = _mm_cvt_roundsh_i64(src1.xmmh[0], _ROUND_NINT);\n+  check_results(&res, &exp, 4, \"_mm_cvt_roundsh_u64\");\n+\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+}\n+"}, {"sha": "19d1b967be8ae3a4bc2e19dcf4164145ba1a9dd9", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvtsi2sh-1a.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/babaa0e521c3eaf50227a8c6933c4dc4e2a7ff34/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtsi2sh-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/babaa0e521c3eaf50227a8c6933c4dc4e2a7ff34/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtsi2sh-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtsi2sh-1a.c?ref=babaa0e521c3eaf50227a8c6933c4dc4e2a7ff34", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtsi2shl\\[ \\\\t\\]+\\[^%\\n\\]*%e\\[^\\{\\n\\]*\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtsi2shl\\[ \\\\t\\]+\\[^%\\n\\]*%e\\[^\\{\\n\\]*\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128h x;\n+volatile int n;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm_cvti32_sh (x, n);\n+  x = _mm_cvt_roundi32_sh (x, n, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+}"}, {"sha": "d9c9a853a176869c064f58326cd2f45e4572a146", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvtsi2sh-1b.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/babaa0e521c3eaf50227a8c6933c4dc4e2a7ff34/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtsi2sh-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/babaa0e521c3eaf50227a8c6933c4dc4e2a7ff34/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtsi2sh-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtsi2sh-1b.c?ref=babaa0e521c3eaf50227a8c6933c4dc4e2a7ff34", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS 8\n+\n+void NOINLINE\n+emulate_vcvtsi2sh(V512 *dest, V512 op1, \n+\t\t  int value_32, __int64_t value_64, int bits)\n+{\n+  V512 v1,v2,v5,v6;\n+  unpack_ph_2twops(op1, &v1, &v2);\n+  if (bits == 32)\n+    v5.xmm[0] = _mm_cvt_roundi32_ss (v1.xmm[0], value_32, _ROUND_NINT);\n+#ifdef __x86_64__\n+  else \n+    v5.xmm[0] = _mm_cvt_roundi64_ss (v1.xmm[0], value_64, _ROUND_NINT);\n+#endif\n+  v5.xmm[1] = v1.xmm[1]; \n+  *dest = pack_twops_2ph(v5, v6);\n+}\n+\n+void\n+test_512 (void)\n+{\n+  V512 res;\n+  V512 exp;\n+  \n+  init_src();\n+  emulate_vcvtsi2sh(&exp, src1, 99, 0, 32);\n+  res.xmmh[0] = _mm_cvt_roundi32_sh(src1.xmmh[0], 99, _ROUND_NINT);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_cvt_roundi32_sh\");\n+\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+}\n+"}, {"sha": "7781e363ffe2dd9b1308cb4be1cc75382b62f602", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvtsi2sh64-1a.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/babaa0e521c3eaf50227a8c6933c4dc4e2a7ff34/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtsi2sh64-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/babaa0e521c3eaf50227a8c6933c4dc4e2a7ff34/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtsi2sh64-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtsi2sh64-1a.c?ref=babaa0e521c3eaf50227a8c6933c4dc4e2a7ff34", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtsi2shq\\[ \\\\t\\]+\\[^%\\n\\]*%r\\[^\\{\\n\\]*\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtsi2shq\\[ \\\\t\\]+\\[^%\\n\\]*%r\\[^\\{\\n\\]*\\{ru-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128h x;\n+volatile long long n;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm_cvti64_sh (x, n);\n+  x = _mm_cvt_roundi64_sh (x, n, _MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC);\n+}"}, {"sha": "6f66a87a8e7bb128b211430166dd1f01a3ef7693", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvtsi2sh64-1b.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/babaa0e521c3eaf50227a8c6933c4dc4e2a7ff34/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtsi2sh64-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/babaa0e521c3eaf50227a8c6933c4dc4e2a7ff34/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtsi2sh64-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtsi2sh64-1b.c?ref=babaa0e521c3eaf50227a8c6933c4dc4e2a7ff34", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run { target { { ! ia32 } && avx512fp16 } } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS 8\n+\n+void NOINLINE\n+emulate_vcvtsi2sh(V512 *dest, V512 op1, \n+\t\t  int value_32, __int64_t value_64, int bits)\n+{\n+  V512 v1,v2,v5,v6;\n+  unpack_ph_2twops(op1, &v1, &v2);\n+  if (bits == 32)\n+    v5.xmm[0] = _mm_cvt_roundi32_ss (v1.xmm[0], value_32, _ROUND_NINT);\n+#ifdef __x86_64__\n+  else \n+    v5.xmm[0] = _mm_cvt_roundi64_ss (v1.xmm[0], value_64, _ROUND_NINT);\n+#endif\n+  v5.xmm[1] = v1.xmm[1]; \n+  *dest = pack_twops_2ph(v5, v6);\n+}\n+\n+void\n+test_512 (void)\n+{\n+  V512 res;\n+  V512 exp;\n+  \n+  init_src();\n+  emulate_vcvtsi2sh(&exp, src1, 0, 99, 64);\n+  res.xmmh[0] = _mm_cvt_roundi64_sh(src1.xmmh[0], 99, _ROUND_NINT);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_cvt_roundi64_sh\");\n+\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+}\n+"}, {"sha": "3b6d095dff8b11c68c67cd4bf8d1288ffb16e300", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvtusi2sh-1a.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/babaa0e521c3eaf50227a8c6933c4dc4e2a7ff34/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtusi2sh-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/babaa0e521c3eaf50227a8c6933c4dc4e2a7ff34/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtusi2sh-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtusi2sh-1a.c?ref=babaa0e521c3eaf50227a8c6933c4dc4e2a7ff34", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtusi2shl\\[ \\\\t\\]+\\[^%\\n\\]*%e\\[^\\{\\n\\]*\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtusi2shl\\[ \\\\t\\]+\\[^%\\n\\]*%e\\[^\\{\\n\\]*\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128h x;\n+volatile unsigned n;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm_cvtu32_sh (x, n);\n+  x = _mm_cvt_roundu32_sh (x, n, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+}"}, {"sha": "d339f0a40433df24b05e7fbe8562b2135701bda0", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvtusi2sh-1b.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/babaa0e521c3eaf50227a8c6933c4dc4e2a7ff34/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtusi2sh-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/babaa0e521c3eaf50227a8c6933c4dc4e2a7ff34/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtusi2sh-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtusi2sh-1b.c?ref=babaa0e521c3eaf50227a8c6933c4dc4e2a7ff34", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS 8\n+\n+void NOINLINE\n+emulate_vcvtusi2sh(V512 *dest, V512 op1, \n+\t\t   int value_32, __int64_t value_64, int bits)\n+{\n+  V512 v1,v2,v5,v6;\n+  unpack_ph_2twops(op1, &v1, &v2);\n+  if (bits == 32)\n+    v5.xmm[0] = _mm_cvt_roundu32_ss (v1.xmm[0], value_32, _ROUND_NINT);\n+#ifdef __x86_64__\n+  else \n+    v5.xmm[0] = _mm_cvt_roundu64_ss (v1.xmm[0], value_64, _ROUND_NINT);\n+#endif\n+  v5.xmm[1] = v1.xmm[1]; \n+  *dest = pack_twops_2ph(v5, v6);\n+}\n+\n+void\n+test_512 (void)\n+{\n+  V512 res;\n+  V512 exp;\n+  \n+  init_src();\n+  emulate_vcvtusi2sh(&exp, src1, 99, 0, 32);\n+  res.xmmh[0] = _mm_cvt_roundu32_sh(src1.xmmh[0], 99, _ROUND_NINT);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_cvt_roundu32_sh\");\n+\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+}\n+"}, {"sha": "30fcdc2b3b42fa4919df91a35b34c12fd7fa350b", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvtusi2sh64-1a.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/babaa0e521c3eaf50227a8c6933c4dc4e2a7ff34/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtusi2sh64-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/babaa0e521c3eaf50227a8c6933c4dc4e2a7ff34/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtusi2sh64-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtusi2sh64-1a.c?ref=babaa0e521c3eaf50227a8c6933c4dc4e2a7ff34", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtusi2shq\\[ \\\\t\\]+\\[^%\\n\\]*%r\\[^\\{\\n\\]*\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtusi2shq\\[ \\\\t\\]+\\[^%\\n\\]*%r\\[^\\{\\n\\]*\\{ru-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128h x;\n+volatile unsigned long long n;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm_cvtu64_sh (x, n);\n+  x = _mm_cvt_roundu64_sh (x, n, _MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC);\n+}"}, {"sha": "20e711e1b0e561e3f93299668923e2633b26a1ac", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvtusi2sh64-1b.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/babaa0e521c3eaf50227a8c6933c4dc4e2a7ff34/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtusi2sh64-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/babaa0e521c3eaf50227a8c6933c4dc4e2a7ff34/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtusi2sh64-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtusi2sh64-1b.c?ref=babaa0e521c3eaf50227a8c6933c4dc4e2a7ff34", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run { target { { ! ia32 } && avx512fp16 } } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS 8\n+\n+void NOINLINE\n+emulate_vcvtusi2sh(V512 *dest, V512 op1, \n+\t\t   int value_32, __int64_t value_64, int bits)\n+{\n+  V512 v1,v2,v5,v6;\n+  unpack_ph_2twops(op1, &v1, &v2);\n+  if (bits == 32)\n+    v5.xmm[0] = _mm_cvt_roundu32_ss (v1.xmm[0], value_32, _ROUND_NINT);\n+#ifdef __x86_64__\n+  else \n+    v5.xmm[0] = _mm_cvt_roundu64_ss (v1.xmm[0], value_64, _ROUND_NINT);\n+#endif\n+  v5.xmm[1] = v1.xmm[1]; \n+  *dest = pack_twops_2ph(v5, v6);\n+}\n+\n+void\n+test_512 (void)\n+{\n+  V512 res;\n+  V512 exp;\n+  \n+  init_src();\n+  emulate_vcvtusi2sh(&exp, src1, 0, 99, 64);\n+  res.xmmh[0] = _mm_cvt_roundu64_sh(src1.xmmh[0], 99, _ROUND_NINT);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_cvt_roundu64_sh\");\n+\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+}\n+"}]}