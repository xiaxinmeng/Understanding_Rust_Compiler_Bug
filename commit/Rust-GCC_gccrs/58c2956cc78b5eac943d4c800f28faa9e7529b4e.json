{"sha": "58c2956cc78b5eac943d4c800f28faa9e7529b4e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NThjMjk1NmNjNzhiNWVhYzk0M2Q0YzgwMGYyOGZhYTllNzUyOWI0ZQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2002-04-18T10:39:41Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2002-04-18T10:39:41Z"}, "message": "fold-const.c (fold): Convert (T)(x&c) into ((T)x&(T)c) for integer constant c (if...\n\n\t* fold-const.c (fold) [NOP_EXPR]: Convert (T)(x&c) into ((T)x&(T)c)\n\tfor integer constant c (if x has unsigned type or sign bit is not\n\tset in c).  This folds the zero/sign extension into the bit-wise and\n\toperation.\n\n\t* gcc.c-torture/compile/20020415-1.c: New.\n\nCo-Authored-By: Jakub Jelinek <jakub@redhat.com>\n\nFrom-SVN: r52465", "tree": {"sha": "0bdc385dfefe6169060b519e747fd90bf8ebb371", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0bdc385dfefe6169060b519e747fd90bf8ebb371"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58c2956cc78b5eac943d4c800f28faa9e7529b4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58c2956cc78b5eac943d4c800f28faa9e7529b4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58c2956cc78b5eac943d4c800f28faa9e7529b4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58c2956cc78b5eac943d4c800f28faa9e7529b4e/comments", "author": null, "committer": null, "parents": [{"sha": "692efa8ed557524d30dc66687c3f5c58de1be9e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/692efa8ed557524d30dc66687c3f5c58de1be9e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/692efa8ed557524d30dc66687c3f5c58de1be9e3"}], "stats": {"total": 77, "additions": 77, "deletions": 0}, "files": [{"sha": "bacaa1a100daaf1d852bd2d5924cae2f6ce50d46", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58c2956cc78b5eac943d4c800f28faa9e7529b4e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58c2956cc78b5eac943d4c800f28faa9e7529b4e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=58c2956cc78b5eac943d4c800f28faa9e7529b4e", "patch": "@@ -1,3 +1,11 @@\n+2002-04-18  Roger Sayle  <roger@eyesopen.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* fold-const.c (fold) [NOP_EXPR]: Convert (T)(x&c) into ((T)x&(T)c)\n+\tfor integer constant c (if x has unsigned type or sign bit is not\n+\tset in c).  This folds the zero/sign extension into the bit-wise and\n+\toperation.\n+\n 2002-04-18  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/6205"}, {"sha": "2521413925240bf5b4937681ddac1a45879ba1d2", "filename": "gcc/fold-const.c", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58c2956cc78b5eac943d4c800f28faa9e7529b4e/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58c2956cc78b5eac943d4c800f28faa9e7529b4e/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=58c2956cc78b5eac943d4c800f28faa9e7529b4e", "patch": "@@ -4695,6 +4695,49 @@ fold (expr)\n \t  TREE_USED (t) = 1;\n \t  return t;\n \t}\n+\n+      /* Convert (T)(x & c) into (T)x & (T)c, if c is an integer\n+\t constants (if x has signed type, the sign bit cannot be set\n+\t in c).  This folds extension into the BIT_AND_EXPR.  */\n+      if (INTEGRAL_TYPE_P (TREE_TYPE (t))\n+\t  && TREE_CODE (TREE_OPERAND (t, 0)) == BIT_AND_EXPR\n+\t  && TREE_CODE (TREE_OPERAND (TREE_OPERAND (t, 0), 1)) == INTEGER_CST)\n+\t{\n+\t  tree and = TREE_OPERAND (t, 0);\n+\t  tree and0 = TREE_OPERAND (and, 0), and1 = TREE_OPERAND (and, 1);\n+\t  int change = 0;\n+\n+\t  if (TREE_UNSIGNED (TREE_TYPE (and))\n+\t      || (TYPE_PRECISION (TREE_TYPE (t))\n+\t\t  <= TYPE_PRECISION (TREE_TYPE (and))))\n+\t    change = 1;\n+\t  else if (TYPE_PRECISION (TREE_TYPE (and1))\n+\t\t   <= HOST_BITS_PER_WIDE_INT\n+\t\t   && host_integerp (and1, 1))\n+\t    {\n+\t      unsigned HOST_WIDE_INT cst;\n+\n+\t      cst = tree_low_cst (and1, 1);\n+\t      cst &= (HOST_WIDE_INT) -1\n+\t\t     << (TYPE_PRECISION (TREE_TYPE (and1)) - 1);\n+\t      change = (cst == 0);\n+#ifdef LOAD_EXTEND_OP\n+\t      if (change\n+\t\t  && (LOAD_EXTEND_OP (TYPE_MODE (TREE_TYPE (and0)))\n+\t\t      == ZERO_EXTEND))\n+\t\t{\n+\t\t  tree uns = unsigned_type (TREE_TYPE (and0));\n+\t\t  and0 = convert (uns, and0);\n+\t  \t  and1 = convert (uns, and1);\n+\t\t}\n+#endif\n+\t    }\n+\t  if (change)\n+\t    return fold (build (BIT_AND_EXPR, TREE_TYPE (t),\n+\t\t\t\tconvert (TREE_TYPE (t), and0),\n+\t\t\t\tconvert (TREE_TYPE (t), and1)));\n+\t}\n+\n       if (!wins)\n \t{\n \t  TREE_CONSTANT (t) = TREE_CONSTANT (arg0);"}, {"sha": "8798cc1eb69933bbe210bd2a272b90b802fac43e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58c2956cc78b5eac943d4c800f28faa9e7529b4e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58c2956cc78b5eac943d4c800f28faa9e7529b4e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=58c2956cc78b5eac943d4c800f28faa9e7529b4e", "patch": "@@ -1,3 +1,7 @@\n+2002-04-18  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* gcc.c-torture/compile/20020415-1.c: New.\n+\n 2002-04-18  David S. Miller  <davem@redhat.com>\n \n \t* gcc.c-torture/execute/20020418-1.c: New test."}, {"sha": "95cdc1eafeb5afa0926365eb4aeee874be8f0062", "filename": "gcc/testsuite/gcc.c-torture/compile/20020415-1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58c2956cc78b5eac943d4c800f28faa9e7529b4e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20020415-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58c2956cc78b5eac943d4c800f28faa9e7529b4e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20020415-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20020415-1.c?ref=58c2956cc78b5eac943d4c800f28faa9e7529b4e", "patch": "@@ -0,0 +1,22 @@\n+/* Check that floating point casts of integer operations don't ICE.  */\n+/* The first of these routines caused problems for a patch, that wasn't\n+   otherwise caught by a full bootstrap, the regression test suite or\n+   SPEC CPU2000.  */\n+\n+double\n+andop (unsigned int x)\n+{\n+  return x & 1;\n+}\n+\n+double\n+orop (unsigned int x)\n+{\n+  return x | 1;\n+}\n+\n+double\n+notop (unsigned int x)\n+{\n+  return ~x;\n+}"}]}