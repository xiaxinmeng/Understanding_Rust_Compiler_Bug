{"sha": "1021b72bf6542f3c08e5404b65063216ee1b06f7", "node_id": "C_kwDOANBUbNoAKDEwMjFiNzJiZjY1NDJmM2MwOGU1NDA0YjY1MDYzMjE2ZWUxYjA2Zjc", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-01-05T09:14:52Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-01-05T10:56:36Z"}, "message": "tree-optimization/103816 - detect offset overflow in SLP group analysis\n\nThis makes sure to detect overflow when computing DR_GROUP_GAP\nand DR_GROUP_SIZE more thoroughly so artificial testcases like the\nadded one are not fooling the existing check.\n\n2022-01-05  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/103816\n\t* tree-vect-data-refs.c (vect_analyze_group_access_1): Also\n\tcheck DR_GROUP_GAP compute for overflow and representability.\n\n\t* gcc.dg/torture/pr103816.c: New testcase.", "tree": {"sha": "95640fc940dbfa2256cedfcb893632052a2619c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95640fc940dbfa2256cedfcb893632052a2619c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1021b72bf6542f3c08e5404b65063216ee1b06f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1021b72bf6542f3c08e5404b65063216ee1b06f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1021b72bf6542f3c08e5404b65063216ee1b06f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1021b72bf6542f3c08e5404b65063216ee1b06f7/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4c2e62d60f47d47cdd94951e16b0de50495cdab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4c2e62d60f47d47cdd94951e16b0de50495cdab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4c2e62d60f47d47cdd94951e16b0de50495cdab"}], "stats": {"total": 25, "additions": 24, "deletions": 1}, "files": [{"sha": "769036a1af86db6727b9eab4511288f386291cc7", "filename": "gcc/testsuite/gcc.dg/torture/pr103816.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1021b72bf6542f3c08e5404b65063216ee1b06f7/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr103816.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1021b72bf6542f3c08e5404b65063216ee1b06f7/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr103816.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr103816.c?ref=1021b72bf6542f3c08e5404b65063216ee1b06f7", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-w\" } */\n+\n+extern struct {\n+  unsigned char a;\n+  unsigned char b;\n+  unsigned char c;\n+  unsigned char d;\n+} g[];\n+void main() { g[0].b = (g[0].b & g[4].b) * g[2305843009213693952ULL].c; }"}, {"sha": "dd20ed974af3cee00ca215a15945620ddb8881a7", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1021b72bf6542f3c08e5404b65063216ee1b06f7/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1021b72bf6542f3c08e5404b65063216ee1b06f7/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=1021b72bf6542f3c08e5404b65063216ee1b06f7", "patch": "@@ -2721,7 +2721,20 @@ vect_analyze_group_access_1 (vec_info *vinfo, dr_vec_info *dr_info)\n           /* Check that the distance between two accesses is equal to the type\n              size. Otherwise, we have gaps.  */\n           diff = (TREE_INT_CST_LOW (DR_INIT (data_ref))\n-                  - TREE_INT_CST_LOW (prev_init)) / type_size;\n+\t\t  - TREE_INT_CST_LOW (prev_init)) / type_size;\n+\t  if (diff < 1 || diff > UINT_MAX)\n+\t    {\n+\t      /* For artificial testcases with array accesses with large\n+\t\t constant indices we can run into overflow issues which\n+\t\t can end up fooling the groupsize constraint below so\n+\t\t check the individual gaps (which are represented as\n+\t\t unsigned int) as well.  */\n+\t      if (dump_enabled_p ())\n+\t\tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n+\t\t\t\t \"interleaved access with gap larger \"\n+\t\t\t\t \"than representable\\n\");\n+\t      return false;\n+\t    }\n \t  if (diff != 1)\n \t    {\n \t      /* FORNOW: SLP of accesses with gaps is not supported.  */"}]}