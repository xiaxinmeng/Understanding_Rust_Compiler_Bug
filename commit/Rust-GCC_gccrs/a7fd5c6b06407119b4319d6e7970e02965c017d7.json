{"sha": "a7fd5c6b06407119b4319d6e7970e02965c017d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTdmZDVjNmIwNjQwNzExOWI0MzE5ZDZlNzk3MGUwMjk2NWMwMTdkNw==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2012-01-30T19:38:07Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2012-01-30T19:38:07Z"}, "message": "avr.md: Resolve all AS1 and AS2 macros.\n\n\t* config/avr/avr.md: Resolve all AS1 and AS2 macros.\n\tTransform all \"* quoted-c-code\" to { c-code }.\n\tRemove redundant test for \"optimize\" in combine patterns.\n\tMove (include \"avr-dimode.md\") to end of file.\n\nFrom-SVN: r183739", "tree": {"sha": "480a559884ae2e65314464b2ec20e714c54916de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/480a559884ae2e65314464b2ec20e714c54916de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7fd5c6b06407119b4319d6e7970e02965c017d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7fd5c6b06407119b4319d6e7970e02965c017d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7fd5c6b06407119b4319d6e7970e02965c017d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7fd5c6b06407119b4319d6e7970e02965c017d7/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03beeffe5587e24ee2be57cdb5ed8469355c6ed4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03beeffe5587e24ee2be57cdb5ed8469355c6ed4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03beeffe5587e24ee2be57cdb5ed8469355c6ed4"}], "stats": {"total": 178, "additions": 100, "deletions": 78}, "files": [{"sha": "57e3a20b361a19589f93f3307b049433973bc229", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7fd5c6b06407119b4319d6e7970e02965c017d7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7fd5c6b06407119b4319d6e7970e02965c017d7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a7fd5c6b06407119b4319d6e7970e02965c017d7", "patch": "@@ -1,3 +1,10 @@\n+2012-01-30  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\t* config/avr/avr.md: Resolve all AS1 and AS2 macros.\n+\tTransform all \"* quoted-c-code\" to { c-code }.\n+\tRemove redundant test for \"optimize\" in combine patterns.\n+\tMove (include \"avr-dimode.md\") to end of file.\n+\n 2012-01-30  Bin Cheng  <bin.cheng@arm.com>\n \n \tPR target/51835"}, {"sha": "0ea30b45609d2b84ef907a22c7e3525583ee3e6d", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 93, "deletions": 78, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7fd5c6b06407119b4319d6e7970e02965c017d7/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7fd5c6b06407119b4319d6e7970e02965c017d7/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=a7fd5c6b06407119b4319d6e7970e02965c017d7", "patch": "@@ -1152,7 +1152,7 @@\n       };\n \n     if (*asm_code[which_alternative])\n-      return asm_code [which_alternative];\n+      return asm_code[which_alternative];\n \n     return avr_out_plus (operands, NULL, NULL);\n   }\n@@ -1221,7 +1221,7 @@\n       };\n \n     if (*asm_code[which_alternative])\n-      return asm_code [which_alternative];\n+      return asm_code[which_alternative];\n \n     return avr_out_plus (operands, NULL, NULL);\n   }\n@@ -1346,13 +1346,13 @@\n \t(mult:QI (match_operand:QI 1 \"register_operand\" \"\")\n \t\t (match_operand:QI 2 \"register_operand\" \"\")))]\n   \"\"\n-  \"{\n-  if (!AVR_HAVE_MUL)\n-    {\n-      emit_insn (gen_mulqi3_call (operands[0], operands[1], operands[2]));\n-      DONE;\n-    }\n-}\")\n+  {\n+    if (!AVR_HAVE_MUL)\n+      {\n+        emit_insn (gen_mulqi3_call (operands[0], operands[1], operands[2]));\n+        DONE;\n+      }\n+  })\n \n (define_insn \"*mulqi3_enh\"\n   [(set (match_operand:QI 0 \"register_operand\" \"=r\")\n@@ -4381,7 +4381,9 @@\n \t (label_ref (match_operand 3 \"\" \"\"))\n \t (pc)))]\n   \"\"\n-  \"* return avr_out_sbxx_branch (insn, operands);\"\n+  {\n+    return avr_out_sbxx_branch (insn, operands);\n+  }\n   [(set (attr \"length\")\n \t(if_then_else (and (ge (minus (pc) (match_dup 3)) (const_int -2046))\n \t\t\t   (le (minus (pc) (match_dup 3)) (const_int 2046)))\n@@ -4559,8 +4561,9 @@\n                       (label_ref (match_operand 0 \"\" \"\"))\n                       (pc)))]\n   \"\"\n-  \"*\n-   return ret_cond_branch (operands[1], avr_jump_mode (operands[0],insn), 0);\"\n+  {\n+    return ret_cond_branch (operands[1], avr_jump_mode (operands[0], insn), 0);\n+  }\n   [(set_attr \"type\" \"branch1\")\n    (set_attr \"cc\" \"clobber\")])\n \n@@ -4574,8 +4577,9 @@\n                       (pc)\n                       (label_ref (match_operand 0 \"\" \"\"))))]\n   \"\"\n-  \"*\n-   return ret_cond_branch (operands[1], avr_jump_mode (operands[0], insn), 1);\"\n+  {\n+    return ret_cond_branch (operands[1], avr_jump_mode (operands[0], insn), 1);\n+  }\n   [(set_attr \"type\" \"branch1\")\n    (set_attr \"cc\" \"clobber\")])\n \n@@ -4587,8 +4591,9 @@\n                       (pc)\n                       (label_ref (match_operand 0 \"\" \"\"))))]\n   \"\"\n-  \"*\n-   return ret_cond_branch (operands[1], avr_jump_mode (operands[0], insn), 1);\"\n+  {\n+    return ret_cond_branch (operands[1], avr_jump_mode (operands[0], insn), 1);\n+  }\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"cc\" \"clobber\")])\n \n@@ -4769,10 +4774,9 @@\n \t      (use (label_ref (match_dup 3)))\n \t      (clobber (match_dup 6))])]\n   \"\"\n-  \"\n-{\n-  operands[6] = gen_reg_rtx (HImode);\n-}\")\n+  {\n+    operands[6] = gen_reg_rtx (HImode);\n+  })\n \n \n ;; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -4791,7 +4795,7 @@\n   [(set (mem:QI (match_operand 0 \"low_io_address_operand\" \"n\"))\n         (and:QI (mem:QI (match_dup 0))\n                 (match_operand:QI 1 \"single_zero_operand\" \"n\")))]\n-  \"optimize > 0\"\n+  \"\"\n   {\n     operands[2] = GEN_INT (exact_log2 (~INTVAL (operands[1]) & 0xff));\n     return \"cbi %i0,%2\";\n@@ -4803,7 +4807,7 @@\n   [(set (mem:QI (match_operand 0 \"low_io_address_operand\" \"n\"))\n         (ior:QI (mem:QI (match_dup 0))\n                 (match_operand:QI 1 \"single_one_operand\" \"n\")))]\n-  \"optimize > 0\"\n+  \"\"\n   {\n     operands[2] = GEN_INT (exact_log2 (INTVAL (operands[1]) & 0xff));\n     return \"sbi %i0,%2\";\n@@ -4823,8 +4827,10 @@\n \t\t\t  (const_int 0)])\n \t (label_ref (match_operand 3 \"\" \"\"))\n \t (pc)))]\n-  \"(optimize > 0)\"\n-  \"* return avr_out_sbxx_branch (insn, operands);\"\n+  \"\"\n+  {\n+    return avr_out_sbxx_branch (insn, operands);\n+  }\n   [(set (attr \"length\")\n \t(if_then_else (and (ge (minus (pc) (match_dup 3)) (const_int -2046))\n                            (le (minus (pc) (match_dup 3)) (const_int 2046)))\n@@ -4843,7 +4849,7 @@\n \t\t\t  (const_int 0)])\n \t (label_ref (match_operand 2 \"\" \"\"))\n \t (pc)))]\n-  \"(optimize > 0)\"\n+  \"\"\n {\n   operands[3] = operands[2];\n   operands[2] = GEN_INT (7);\n@@ -4870,8 +4876,10 @@\n \t\t\t  (const_int 0)])\n \t (label_ref (match_operand 3 \"\" \"\"))\n \t (pc)))]\n-  \"(optimize > 0)\"\n-  \"* return avr_out_sbxx_branch (insn, operands);\"\n+  \"\"\n+  {\n+    return avr_out_sbxx_branch (insn, operands);\n+  }\n   [(set (attr \"length\")\n \t(if_then_else (and (ge (minus (pc) (match_dup 3)) (const_int -2046))\n                            (le (minus (pc) (match_dup 3)) (const_int 2045)))\n@@ -4889,7 +4897,7 @@\n \t\t\t  (const_int 0)])\n \t (label_ref (match_operand 2 \"\" \"\"))\n \t (pc)))]\n-  \"(optimize > 0)\"\n+  \"\"\n {\n   operands[3] = operands[2];\n   operands[2] = GEN_INT (7);\n@@ -4924,26 +4932,27 @@\n   {\n     CC_STATUS_INIT;\n     if (test_hard_reg_class (ADDW_REGS, operands[0]))\n-      output_asm_insn (AS2 (sbiw,%0,1) CR_TAB\n-                       AS2 (sbc,%C0,__zero_reg__) CR_TAB\n-                       AS2 (sbc,%D0,__zero_reg__) \"\\n\", operands);\n+      output_asm_insn (\"sbiw %0,1\" CR_TAB\n+                       \"sbc %C0,__zero_reg__\" CR_TAB\n+                       \"sbc %D0,__zero_reg__\", operands);\n     else\n-      output_asm_insn (AS2 (subi,%A0,1) CR_TAB\n-                       AS2 (sbc,%B0,__zero_reg__) CR_TAB\n-                       AS2 (sbc,%C0,__zero_reg__) CR_TAB\n-                       AS2 (sbc,%D0,__zero_reg__) \"\\n\", operands);\n+      output_asm_insn (\"subi %A0,1\" CR_TAB\n+                       \"sbc %B0,__zero_reg__\" CR_TAB\n+                       \"sbc %C0,__zero_reg__\" CR_TAB\n+                       \"sbc %D0,__zero_reg__\", operands);\n \n     switch (avr_jump_mode (operands[2], insn))\n       {\n       case 1:\n-        return AS1 (brcc,%2);\n+        return \"brcc %2\";\n       case 2:\n-        return (AS1 (brcs,.+2) CR_TAB\n-                AS1 (rjmp,%2));\n+        return \"brcs .+2\\;rjmp %2\";\n+      case 3:\n+        return \"brcs .+4\\;jmp %2\";\n       }\n \n-    return (AS1 (brcs,.+4) CR_TAB\n-            AS1 (jmp,%2));\n+    gcc_unreachable();\n+    return \"\";\n   })\n \n (define_peephole\n@@ -4960,25 +4969,27 @@\n \t\t      (label_ref (match_operand 2 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n-  \"*\n-{\n-  CC_STATUS_INIT;\n-  if (test_hard_reg_class (ADDW_REGS, operands[0]))\n-    output_asm_insn (AS2 (sbiw,%0,1), operands);\n-  else\n-    output_asm_insn (AS2 (subi,%A0,1) CR_TAB\n-\t\t     AS2 (sbc,%B0,__zero_reg__) \\\"\\\\n\\\", operands);\n-  switch (avr_jump_mode (operands[2],insn))\n-  {\n-    case 1:\n-      return AS1 (brcc,%2);\n-    case 2:\n-      return (AS1 (brcs,.+2) CR_TAB\n-              AS1 (rjmp,%2));\n-  }\n-  return (AS1 (brcs,.+4) CR_TAB\n-          AS1 (jmp,%2));\n-}\")\n+  {\n+    CC_STATUS_INIT;\n+    if (test_hard_reg_class (ADDW_REGS, operands[0]))\n+      output_asm_insn (\"sbiw %0,1\", operands);\n+    else\n+      output_asm_insn (\"subi %A0,1\" CR_TAB\n+                       \"sbc %B0,__zero_reg__\", operands);\n+\n+    switch (avr_jump_mode (operands[2], insn))\n+      {\n+      case 1:\n+        return \"brcc %2\";\n+      case 2:\n+        return \"brcs .+2\\;rjmp %2\";\n+      case 3:\n+        return \"brcs .+4\\;jmp %2\";\n+      }\n+\n+    gcc_unreachable();\n+    return \"\";\n+  })\n \n (define_peephole\n   [(set (match_operand:QI 0 \"d_register_operand\" \"\")\n@@ -4992,23 +5003,26 @@\n \t\t      (label_ref (match_operand 1 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n-  \"*\n-{\n-  CC_STATUS_INIT;\n-  cc_status.value1 = operands[0];\n-  cc_status.flags |= CC_OVERFLOW_UNUSABLE;\n-  output_asm_insn (AS2 (subi,%A0,1), operands);\n-  switch (avr_jump_mode (operands[1],insn))\n-  {\n-    case 1:\n-      return AS1 (brcc,%1);\n-    case 2:\n-      return (AS1 (brcs,.+2) CR_TAB\n-              AS1 (rjmp,%1));\n-  }\n-  return (AS1 (brcs,.+4) CR_TAB\n-          AS1 (jmp,%1));\n-}\")\n+  {\n+    CC_STATUS_INIT;\n+    cc_status.value1 = operands[0];\n+    cc_status.flags |= CC_OVERFLOW_UNUSABLE;\n+\n+    output_asm_insn (\"subi %A0,1\", operands);\n+\n+    switch (avr_jump_mode (operands[1], insn))\n+      {\n+      case 1:\n+        return \"brcc %1\";\n+      case 2:\n+        return \"brcs .+2\\;rjmp %1\";\n+      case 3:\n+        return \"brcs .+4\\;jmp %1\";\n+      }\n+\n+    gcc_unreachable();\n+    return \"\";\n+  })\n \n \n (define_peephole ; \"*cpse.eq\"\n@@ -5947,8 +5961,6 @@\n     operands[4] = simplify_gen_subreg (QImode, operands[0], HImode, 1);\n   })\n \n-(include \"avr-dimode.md\")\n-\n (define_insn_and_split \"*extzv.qihi2\"\n   [(set (match_operand:HI 0 \"register_operand\"                      \"=r\")\n         (zero_extend:HI \n@@ -5968,3 +5980,6 @@\n     operands[3] = simplify_gen_subreg (QImode, operands[0], HImode, 0);\n     operands[4] = simplify_gen_subreg (QImode, operands[0], HImode, 1);\n   })\n+\n+\f\n+(include \"avr-dimode.md\")"}]}