{"sha": "3947e2f9840de6201a06267c05fea6f1eb47256a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzk0N2UyZjk4NDBkZTYyMDFhMDYyNjdjMDVmZWE2ZjFlYjQ3MjU2YQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1998-10-07T10:08:16Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1998-10-07T10:08:16Z"}, "message": "gcse.c (pre_insert_insn): When a call ends a bb, insert the new insns before the argument regs are loaded.\n\n        * gcse.c (pre_insert_insn): When a call ends a bb, insert\n        the new insns before the argument regs are loaded.\n\nFrom-SVN: r22891", "tree": {"sha": "a34a4f033edaaa12f4f9be06f703587f12853c6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a34a4f033edaaa12f4f9be06f703587f12853c6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3947e2f9840de6201a06267c05fea6f1eb47256a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3947e2f9840de6201a06267c05fea6f1eb47256a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3947e2f9840de6201a06267c05fea6f1eb47256a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3947e2f9840de6201a06267c05fea6f1eb47256a/comments", "author": null, "committer": null, "parents": [{"sha": "8173d47720e759d93a951bb1c2cbcb62ca1d639e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8173d47720e759d93a951bb1c2cbcb62ca1d639e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8173d47720e759d93a951bb1c2cbcb62ca1d639e"}], "stats": {"total": 71, "additions": 63, "deletions": 8}, "files": [{"sha": "e6ff59387965f5925e5e79c25a9f67c40b4604dd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3947e2f9840de6201a06267c05fea6f1eb47256a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3947e2f9840de6201a06267c05fea6f1eb47256a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3947e2f9840de6201a06267c05fea6f1eb47256a", "patch": "@@ -1,3 +1,8 @@\n+Wed Oct  7 10:07:29 1998  Richard Henderson  <rth@cygnus.com>\n+\n+\t* gcse.c (pre_insert_insn): When a call ends a bb, insert\n+\tthe new insns before the argument regs are loaded.\n+\n Wed Oct  7 12:55:26 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* Makefile.in (c-gperf.h): Add -L KR-C -F ', 0, 0' flags to gperf."}, {"sha": "463959d520ac58661813c04e400c8212b1661353", "filename": "gcc/gcse.c", "status": "modified", "additions": 58, "deletions": 8, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3947e2f9840de6201a06267c05fea6f1eb47256a/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3947e2f9840de6201a06267c05fea6f1eb47256a/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=3947e2f9840de6201a06267c05fea6f1eb47256a", "patch": "@@ -4373,22 +4373,72 @@ pre_insert_insn (expr, bb)\n       add_label_notes (SET_SRC (pat), new_insn);\n       if (BLOCK_HEAD (bb) == insn)\n \tBLOCK_HEAD (bb) = new_insn;\n-      /* Keep block number table up to date.  */\n-      set_block_num (new_insn, bb);\n-      /* Keep register set table up to date.  */\n-      record_one_set (regno, new_insn);\n+    }\n+  /* Likewise if the last insn is a call, as will happen in the presence\n+     of exception handling.  */\n+  else if (GET_CODE (insn) == CALL_INSN)\n+    {\n+      HARD_REG_SET parm_regs;\n+      int nparm_regs;\n+      rtx p;\n+\n+      /* Keeping in mind SMALL_REGISTER_CLASSES and parameters in registers,\n+\t we search backward and place the instructions before the first\n+\t parameter is loaded.  Do this for everyone for consistency and a\n+\t presumtion that we'll get better code elsewhere as well.  */\n+\n+      /* It should always be the case that we can put these instructions\n+\t anywhere in the basic block.  Check this.  */\n+      if (!TEST_BIT (pre_antloc[bb], expr->bitmap_index)\n+\t  && !TEST_BIT (pre_transp[bb], expr->bitmap_index))\n+\tabort ();\n+\n+      /* Since different machines initialize their parameter registers\n+\t in different orders, assume nothing.  Collect the set of all\n+\t parameter registers.  */\n+      CLEAR_HARD_REG_SET (parm_regs);\n+      nparm_regs = 0;\n+      for (p = CALL_INSN_FUNCTION_USAGE (insn); p ; p = XEXP (p, 1))\n+\tif (GET_CODE (XEXP (p, 0)) == USE\n+\t    && GET_CODE (XEXP (XEXP (p, 0), 0)) == REG)\n+\t  {\n+\t    int regno = REGNO (XEXP (XEXP (p, 0), 0));\n+\t    if (regno >= FIRST_PSEUDO_REGISTER)\n+\t      abort();\n+\t    SET_HARD_REG_BIT (parm_regs, regno);\n+\t    nparm_regs++;\n+\t  }\n+\n+      /* Search backward for the first set of a register in this set.  */\n+      while (nparm_regs && BLOCK_HEAD (bb) != insn)\n+\t{\n+\t  insn = PREV_INSN (insn);\n+\t  p = single_set (insn);\n+\t  if (p && GET_CODE (SET_DEST (p)) == REG\n+\t      && REGNO (SET_DEST (p)) < FIRST_PSEUDO_REGISTER\n+\t      && TEST_HARD_REG_BIT (parm_regs, REGNO (SET_DEST (p))))\n+\t    {\n+\t      CLEAR_HARD_REG_BIT (parm_regs, REGNO (SET_DEST (p)));\n+\t      nparm_regs--;\n+\t    }\n+\t}\n+      \n+      new_insn = emit_insn_before (pat, insn);\n+      if (BLOCK_HEAD (bb) == insn)\n+\tBLOCK_HEAD (bb) = new_insn;\n     }\n   else\n     {\n       new_insn = emit_insn_after (pat, insn);\n       add_label_notes (SET_SRC (pat), new_insn);\n       BLOCK_END (bb) = new_insn;\n-      /* Keep block number table up to date.  */\n-      set_block_num (new_insn, bb);\n-      /* Keep register set table up to date.  */\n-      record_one_set (regno, new_insn);\n     }\n \n+  /* Keep block number table up to date.  */\n+  set_block_num (new_insn, bb);\n+  /* Keep register set table up to date.  */\n+  record_one_set (regno, new_insn);\n+\n   gcse_create_count++;\n \n   if (gcse_file)"}]}