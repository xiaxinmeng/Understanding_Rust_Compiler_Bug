{"sha": "293166bea0bfdc9a54f18ebe95b9ddd7e79adf4f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjkzMTY2YmVhMGJmZGM5YTU0ZjE4ZWJlOTViOWRkZDdlNzlhZGY0Zg==", "commit": {"author": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1995-04-10T21:39:56Z"}, "committer": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1995-04-10T21:39:56Z"}, "message": "(find_reloads, case 'E'): : Make this work like\nconstraint character `F' when REAL_ARITHMETIC is defined.\n\nFrom-SVN: r9356", "tree": {"sha": "d8e6e6f802dca8cbf92dfb01f4d18e4abae9819b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8e6e6f802dca8cbf92dfb01f4d18e4abae9819b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/293166bea0bfdc9a54f18ebe95b9ddd7e79adf4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/293166bea0bfdc9a54f18ebe95b9ddd7e79adf4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/293166bea0bfdc9a54f18ebe95b9ddd7e79adf4f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/293166bea0bfdc9a54f18ebe95b9ddd7e79adf4f/comments", "author": null, "committer": null, "parents": [{"sha": "7ac2547f82c125a74adf4e810d49cd2eb791c46a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ac2547f82c125a74adf4e810d49cd2eb791c46a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ac2547f82c125a74adf4e810d49cd2eb791c46a"}], "stats": {"total": 4, "additions": 3, "deletions": 1}, "files": [{"sha": "b9d955bf538bc30f3ac49b5b5c616984c5277eca", "filename": "gcc/reload.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/293166bea0bfdc9a54f18ebe95b9ddd7e79adf4f/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/293166bea0bfdc9a54f18ebe95b9ddd7e79adf4f/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=293166bea0bfdc9a54f18ebe95b9ddd7e79adf4f", "patch": "@@ -2849,12 +2849,14 @@ find_reloads (insn, replace, ind_levels, live_known, reload_reg_p)\n \t\tbreak;\n \n \t      case 'E':\n+#ifndef REAL_ARITHMETIC\n \t\t/* Match any floating double constant, but only if\n \t\t   we can examine the bits of it reliably.  */\n \t\tif ((HOST_FLOAT_FORMAT != TARGET_FLOAT_FORMAT\n \t\t     || HOST_BITS_PER_WIDE_INT != BITS_PER_WORD)\n \t\t    && GET_MODE (operand) != VOIDmode && ! flag_pretend_float)\n \t\t  break;\n+#endif\n \t\tif (GET_CODE (operand) == CONST_DOUBLE)\n \t\t  win = 1;\n \t\tbreak;\n@@ -2997,7 +2999,7 @@ find_reloads (insn, replace, ind_levels, live_known, reload_reg_p)\n \t      /* If this is a constant that is reloaded into the desired\n \t\t class by copying it to memory first, count that as another\n \t\t reload.  This is consistent with other code and is\n-\t\t required to avoid chosing another alternative when\n+\t\t required to avoid choosing another alternative when\n \t\t the constant is moved into memory by this function on\n \t\t an early reload pass.  Note that the test here is \n \t\t precisely the same as in the code below that calls"}]}