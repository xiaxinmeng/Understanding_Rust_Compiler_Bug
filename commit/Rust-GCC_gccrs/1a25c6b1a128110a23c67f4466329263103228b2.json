{"sha": "1a25c6b1a128110a23c67f4466329263103228b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWEyNWM2YjFhMTI4MTEwYTIzYzY3ZjQ0NjYzMjkyNjMxMDMyMjhiMg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-10-05T11:30:52Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-10-05T11:30:52Z"}, "message": "Remove remaining uses of REAL_VALUES_IDENTICAL\n\nThis patch continues the removal of real-related macros.\nWe already had both the old-style REAL_VALUES_IDENTICAL and the\nnew-style real_identical, so this patch replaces all remaining\nuses of the former with the latter.\n\nBootstrapped & regression-tested on x86_64-linux-gnu.  Also tested by\nbuilding one target per CPU directory and checking that there were\nno new warnings and no changes in testsuite output at -O2.\n\ngcc/\n\t* real.h (REAL_VALUES_IDENTICAL): Delete.\n\t* config/m68k/m68k.c (standard_68881_constant_p): Use real_identical\n\tinstead of REAL_VALUES_IDENTICAL.\n\t* fold-const.c (operand_equal_p): Likewise.\n\t* ipa-icf.c (sem_variable::equals): Likewise.\n\t* tree-complex.c (some_nonzerop): Likewise.\n\t(expand_complex_multiplication): Likewise.\n\t* tree.c (simple_cst_equal): Likewise.\n\t* varasm.c (compare_constant): Likewise.\n---\n gcc/config/m68k/m68k.c | 5 ++---\n gcc/fold-const.c       | 3 +--\n gcc/ipa-icf.c          | 4 ++--\n gcc/real.h             | 1 -\n gcc/tree-complex.c     | 4 ++--\n gcc/tree.c             | 2 +-\n gcc/varasm.c           | 2 +-\n 7 files changed, 9 insertions(+), 12 deletions(-)\n\nFrom-SVN: r228474", "tree": {"sha": "1068d016c93593ad53a56bc3bb207bd66de9e5aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1068d016c93593ad53a56bc3bb207bd66de9e5aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a25c6b1a128110a23c67f4466329263103228b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a25c6b1a128110a23c67f4466329263103228b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a25c6b1a128110a23c67f4466329263103228b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a25c6b1a128110a23c67f4466329263103228b2/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "624d31fe0135b7b33529f4e8fae88a4877bfc204", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/624d31fe0135b7b33529f4e8fae88a4877bfc204", "html_url": "https://github.com/Rust-GCC/gccrs/commit/624d31fe0135b7b33529f4e8fae88a4877bfc204"}], "stats": {"total": 42, "additions": 30, "deletions": 12}, "files": [{"sha": "6493e38363293b9aa6a85e38d769d9f644ef1791", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a25c6b1a128110a23c67f4466329263103228b2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a25c6b1a128110a23c67f4466329263103228b2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1a25c6b1a128110a23c67f4466329263103228b2", "patch": "@@ -1,3 +1,24 @@\n+2015-10-05  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* real.h (REAL_VALUES_IDENTICAL): Delete.\n+\t* config/m68k/m68k.c (standard_68881_constant_p): Use real_identical\n+\tinstead of REAL_VALUES_IDENTICAL.\n+\t* fold-const.c (operand_equal_p): Likewise.\n+\t* ipa-icf.c (sem_variable::equals): Likewise.\n+\t* tree-complex.c (some_nonzerop): Likewise.\n+\t(expand_complex_multiplication): Likewise.\n+\t* tree.c (simple_cst_equal): Likewise.\n+\t* varasm.c (compare_constant): Likewise.\n+---\n+ gcc/config/m68k/m68k.c | 5 ++---\n+ gcc/fold-const.c       | 3 +--\n+ gcc/ipa-icf.c          | 4 ++--\n+ gcc/real.h             | 1 -\n+ gcc/tree-complex.c     | 4 ++--\n+ gcc/tree.c             | 2 +-\n+ gcc/varasm.c           | 2 +-\n+ 7 files changed, 9 insertions(+), 12 deletions(-)\n+\n 2015-10-05  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* real.h (real_equal): Declare."}, {"sha": "487cbf4b573dcf21bdd0560990de992a1aae3698", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a25c6b1a128110a23c67f4466329263103228b2/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a25c6b1a128110a23c67f4466329263103228b2/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=1a25c6b1a128110a23c67f4466329263103228b2", "patch": "@@ -4336,11 +4336,10 @@ standard_68881_constant_p (rtx x)\n \n   REAL_VALUE_FROM_CONST_DOUBLE (r, x);\n \n-  /* Use REAL_VALUES_IDENTICAL instead of real_equal so that -0.0\n-     is rejected.  */\n+  /* Use real_identical instead of real_equal so that -0.0 is rejected.  */\n   for (i = 0; i < 6; i++)\n     {\n-      if (REAL_VALUES_IDENTICAL (r, values_68881[i]))\n+      if (real_identical (&r, &values_68881[i]))\n         return (codes_68881[i]);\n     }\n   "}, {"sha": "1c72af639e878dfd289fc465fd28225cc5aca8e7", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a25c6b1a128110a23c67f4466329263103228b2/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a25c6b1a128110a23c67f4466329263103228b2/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=1a25c6b1a128110a23c67f4466329263103228b2", "patch": "@@ -2815,8 +2815,7 @@ operand_equal_p (const_tree arg0, const_tree arg1, unsigned int flags)\n \t\t\t\t       TREE_FIXED_CST (arg1));\n \n       case REAL_CST:\n-\tif (REAL_VALUES_IDENTICAL (TREE_REAL_CST (arg0),\n-\t\t\t\t   TREE_REAL_CST (arg1)))\n+\tif (real_identical (&TREE_REAL_CST (arg0), &TREE_REAL_CST (arg1)))\n \t  return 1;\n \n "}, {"sha": "b0762227539c7cf97dde3dc9a4955e0a879040d2", "filename": "gcc/ipa-icf.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a25c6b1a128110a23c67f4466329263103228b2/gcc%2Fipa-icf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a25c6b1a128110a23c67f4466329263103228b2/gcc%2Fipa-icf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-icf.c?ref=1a25c6b1a128110a23c67f4466329263103228b2", "patch": "@@ -2030,8 +2030,8 @@ sem_variable::equals (tree t1, tree t2)\n       /* Real constants are the same only if the same width of type.  */\n       if (TYPE_PRECISION (TREE_TYPE (t1)) != TYPE_PRECISION (TREE_TYPE (t2)))\n         return return_false_with_msg (\"REAL_CST precision mismatch\");\n-      return return_with_debug (REAL_VALUES_IDENTICAL (TREE_REAL_CST (t1),\n-\t\t\t\t\t\t       TREE_REAL_CST (t2)));\n+      return return_with_debug (real_identical (&TREE_REAL_CST (t1),\n+\t\t\t\t\t\t&TREE_REAL_CST (t2)));\n     case VECTOR_CST:\n       {\n \tunsigned i;"}, {"sha": "dbb13ae1c521441fdb7eca13b24ff4d5f4f66630", "filename": "gcc/real.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a25c6b1a128110a23c67f4466329263103228b2/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a25c6b1a128110a23c67f4466329263103228b2/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=1a25c6b1a128110a23c67f4466329263103228b2", "patch": "@@ -333,7 +333,6 @@ extern const struct real_format arm_half_format;\n #define REAL_ARITHMETIC(value, code, d1, d2) \\\n   real_arithmetic (&(value), code, &(d1), &(d2))\n \n-#define REAL_VALUES_IDENTICAL(x, y)\treal_identical (&(x), &(y))\n #define REAL_VALUES_LESS(x, y)\t\treal_compare (LT_EXPR, &(x), &(y))\n \n /* Determine whether a floating-point value X is infinite.  */"}, {"sha": "93c0a5416e3648198784c262d90fcd66b15c53d0", "filename": "gcc/tree-complex.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a25c6b1a128110a23c67f4466329263103228b2/gcc%2Ftree-complex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a25c6b1a128110a23c67f4466329263103228b2/gcc%2Ftree-complex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-complex.c?ref=1a25c6b1a128110a23c67f4466329263103228b2", "patch": "@@ -118,7 +118,7 @@ some_nonzerop (tree t)\n      cannot be treated the same as operations with a real or imaginary\n      operand if we care about the signs of zeros in the result.  */\n   if (TREE_CODE (t) == REAL_CST && !flag_signed_zeros)\n-    zerop = REAL_VALUES_IDENTICAL (TREE_REAL_CST (t), dconst0);\n+    zerop = real_identical (&TREE_REAL_CST (t), &dconst0);\n   else if (TREE_CODE (t) == FIXED_CST)\n     zerop = fixed_zerop (t);\n   else if (TREE_CODE (t) == INTEGER_CST)\n@@ -1021,7 +1021,7 @@ expand_complex_multiplication (gimple_stmt_iterator *gsi, tree inner_type,\n     case PAIR (ONLY_IMAG, ONLY_REAL):\n       rr = ar;\n       if (TREE_CODE (ai) == REAL_CST\n-\t  && REAL_VALUES_IDENTICAL (TREE_REAL_CST (ai), dconst1))\n+\t  && real_identical (&TREE_REAL_CST (ai), &dconst1))\n \tri = br;\n       else\n \tri = gimplify_build2 (gsi, MULT_EXPR, inner_type, ai, br);"}, {"sha": "bfcf3746da2b56766ac8c06f58af52eee4ad4283", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a25c6b1a128110a23c67f4466329263103228b2/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a25c6b1a128110a23c67f4466329263103228b2/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=1a25c6b1a128110a23c67f4466329263103228b2", "patch": "@@ -7362,7 +7362,7 @@ simple_cst_equal (const_tree t1, const_tree t2)\n       return wi::to_widest (t1) == wi::to_widest (t2);\n \n     case REAL_CST:\n-      return REAL_VALUES_IDENTICAL (TREE_REAL_CST (t1), TREE_REAL_CST (t2));\n+      return real_identical (&TREE_REAL_CST (t1), &TREE_REAL_CST (t2));\n \n     case FIXED_CST:\n       return FIXED_VALUES_IDENTICAL (TREE_FIXED_CST (t1), TREE_FIXED_CST (t2));"}, {"sha": "a5bb2b5912a1107ff72b799a9191483fa2d6690e", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a25c6b1a128110a23c67f4466329263103228b2/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a25c6b1a128110a23c67f4466329263103228b2/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=1a25c6b1a128110a23c67f4466329263103228b2", "patch": "@@ -3076,7 +3076,7 @@ compare_constant (const tree t1, const tree t2)\n       if (TYPE_PRECISION (TREE_TYPE (t1)) != TYPE_PRECISION (TREE_TYPE (t2)))\n \treturn 0;\n \n-      return REAL_VALUES_IDENTICAL (TREE_REAL_CST (t1), TREE_REAL_CST (t2));\n+      return real_identical (&TREE_REAL_CST (t1), &TREE_REAL_CST (t2));\n \n     case FIXED_CST:\n       /* Fixed constants are the same only if the same width of type.  */"}]}