{"sha": "2403d3d7a5e4878f211d868fd4b76a4b70ce2a54", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQwM2QzZDdhNWU0ODc4ZjIxMWQ4NjhmZDRiNzZhNGI3MGNlMmE1NA==", "commit": {"author": {"name": "Kelvin Nilsen", "email": "kelvin@gcc.gnu.org", "date": "2020-05-11T16:01:32Z"}, "committer": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2020-05-11T16:01:32Z"}, "message": "rs6000: Add scalar cfuged instruction\n\nAdd the centifuge-doubleword instruction and built-in access.\n\n[gcc]\n\n2020-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\n\t* config/rs6000/rs6000-builtin.def (BU_FUTURE_MISC_0): New\n\t#define.\n\t(BU_FUTURE_MISC_1): Likewise.\n\t(BU_FUTURE_MISC_2): Likewise.\n\t(BU_FUTURE_MISC_3): Likewise.\n\t(__builtin_cfuged): New built-in function definition.\n\t* config/rs6000/rs6000.md (UNSPEC_CFUGED): New constant.\n\t(cfuged): New insn.\n\t* doc/extend.texi (Basic PowerPC Built-in Functions Available for\n\ta Future Architecture): New subsubsection.\n\n[gcc/testsuite]\n\n2020-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\n\t* gcc.target.powerpc/cfuged-0.c: New test.\n\t* gcc.target.powerpc/cfuged-1.c: New test.", "tree": {"sha": "9228482ac0ba952e4b3d733fa58a15118caf2c5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9228482ac0ba952e4b3d733fa58a15118caf2c5c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2403d3d7a5e4878f211d868fd4b76a4b70ce2a54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2403d3d7a5e4878f211d868fd4b76a4b70ce2a54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2403d3d7a5e4878f211d868fd4b76a4b70ce2a54", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2403d3d7a5e4878f211d868fd4b76a4b70ce2a54/comments", "author": null, "committer": null, "parents": [{"sha": "84f4954c38228e4cb3e6f0b5471883e6c2523631", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84f4954c38228e4cb3e6f0b5471883e6c2523631", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84f4954c38228e4cb3e6f0b5471883e6c2523631"}], "stats": {"total": 187, "additions": 187, "deletions": 0}, "files": [{"sha": "1440b2f13619204b736ab711c2706be453a73428", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2403d3d7a5e4878f211d868fd4b76a4b70ce2a54/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2403d3d7a5e4878f211d868fd4b76a4b70ce2a54/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2403d3d7a5e4878f211d868fd4b76a4b70ce2a54", "patch": "@@ -1,3 +1,16 @@\n+2020-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\n+\t* config/rs6000/rs6000-builtin.def (BU_FUTURE_MISC_0): New\n+\t#define.\n+\t(BU_FUTURE_MISC_1): Likewise.\n+\t(BU_FUTURE_MISC_2): Likewise.\n+\t(BU_FUTURE_MISC_3): Likewise.\n+\t(__builtin_cfuged): New built-in function definition.\n+\t* config/rs6000/rs6000.md (UNSPEC_CFUGED): New constant.\n+\t(cfuged): New insn.\n+\t* doc/extend.texi (Basic PowerPC Built-in Functions Available for\n+\ta Future Architecture): New subsubsection.\n+\n 2020-05-11  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/95049"}, {"sha": "afc8487515f431a7b590fc68b030e58610e31ef9", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2403d3d7a5e4878f211d868fd4b76a4b70ce2a54/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2403d3d7a5e4878f211d868fd4b76a4b70ce2a54/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=2403d3d7a5e4878f211d868fd4b76a4b70ce2a54", "patch": "@@ -993,6 +993,40 @@\n \t\t     | RS6000_BTC_TERNARY),\t\t\t\t\\\n \t\t    CODE_FOR_nothing)\t\t\t/* ICODE */\n \n+/* Miscellaneous (non-vector) builtins for instructions which may be\n+   added at some point in the future.  */\n+\n+#define BU_FUTURE_MISC_0(ENUM, NAME, ATTR, ICODE)\t\t\t\\\n+  RS6000_BUILTIN_0 (FUTURE_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n+\t\t    \"__builtin_\" NAME,\t\t\t/* NAME */\t\\\n+\t\t    RS6000_BTM_FUTURE,\t\t\t/* MASK */\t\\\n+\t\t    (RS6000_BTC_ ## ATTR\t\t/* ATTR */\t\\\n+\t\t     | RS6000_BTC_SPECIAL),\t\t\t\t\\\n+\t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n+\n+#define BU_FUTURE_MISC_1(ENUM, NAME, ATTR, ICODE)\t\t\t\\\n+  RS6000_BUILTIN_1 (FUTURE_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n+\t\t    \"__builtin_\" NAME,\t\t\t/* NAME */\t\\\n+\t\t    RS6000_BTM_FUTURE,\t\t\t/* MASK */\t\\\n+\t\t    (RS6000_BTC_ ## ATTR\t\t/* ATTR */\t\\\n+\t\t     | RS6000_BTC_UNARY),\t\t\t\t\\\n+\t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n+\n+#define BU_FUTURE_MISC_2(ENUM, NAME, ATTR, ICODE)\t\t\t\\\n+  RS6000_BUILTIN_2 (FUTURE_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n+\t\t    \"__builtin_\" NAME,\t\t\t/* NAME */\t\\\n+\t\t    RS6000_BTM_FUTURE,\t\t\t/* MASK */\t\\\n+\t\t    (RS6000_BTC_ ## ATTR\t\t/* ATTR */\t\\\n+\t\t     | RS6000_BTC_BINARY),\t\t\t\t\\\n+\t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n+\n+#define BU_FUTURE_MISC_3(ENUM, NAME, ATTR, ICODE)\t\t\t\\\n+  RS6000_BUILTIN_3 (FUTURE_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n+\t\t    \"__builtin_\" NAME,\t\t\t/* NAME */\t\\\n+\t\t    RS6000_BTM_FUTURE,\t\t\t/* MASK */\t\\\n+\t\t    (RS6000_BTC_ ## ATTR\t\t/* ATTR */\t\\\n+\t\t     | RS6000_BTC_TERNARY),\t\t\t\t\\\n+\t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n #endif\n \n \f\n@@ -2539,6 +2573,9 @@ BU_P9_OVERLOAD_2 (CMPRB,\t\"byte_in_range\")\n BU_P9_OVERLOAD_2 (CMPRB2,\t\"byte_in_either_range\")\n BU_P9_OVERLOAD_2 (CMPEQB,\t\"byte_in_set\")\n \f\n+/* Future architecture scalar built-ins.  */\n+BU_FUTURE_MISC_2 (CFUGED, \"cfuged\", CONST, cfuged)\n+\n /* Future architecture vector built-ins.  */\n BU_FUTURE_V_2 (VCLZDM, \"vclzdm\", CONST, vclzdm)\n BU_FUTURE_V_2 (VCTZDM, \"vctzdm\", CONST, vctzdm)"}, {"sha": "1ceb393efdeadf2965547ff5dcff86f94e0650df", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2403d3d7a5e4878f211d868fd4b76a4b70ce2a54/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2403d3d7a5e4878f211d868fd4b76a4b70ce2a54/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=2403d3d7a5e4878f211d868fd4b76a4b70ce2a54", "patch": "@@ -148,6 +148,7 @@\n    UNSPEC_SI_FROM_SF\n    UNSPEC_PLTSEQ\n    UNSPEC_PLT16_HA\n+   UNSPEC_CFUGED\n   ])\n \n ;;\n@@ -2453,6 +2454,15 @@\n   \"prty<wd> %0,%1\"\n   [(set_attr \"type\" \"popcnt\")])\n \n+(define_insn \"cfuged\"\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n+\t(unspec:DI [(match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n+\t\t    (match_operand:DI 2 \"gpc_reg_operand\" \"r\")]\n+\t UNSPEC_CFUGED))]\n+   \"TARGET_FUTURE && TARGET_64BIT\"\n+   \"cfuged %0,%1,%2\"\n+   [(set_attr \"type\" \"integer\")])\n+\n (define_insn \"cmpb<mode>3\"\n   [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\")\n \t(unspec:GPR [(match_operand:GPR 1 \"gpc_reg_operand\" \"r\")"}, {"sha": "8b5a51a6973a024ca8f9d74703673b47b792bd1a", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2403d3d7a5e4878f211d868fd4b76a4b70ce2a54/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2403d3d7a5e4878f211d868fd4b76a4b70ce2a54/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=2403d3d7a5e4878f211d868fd4b76a4b70ce2a54", "patch": "@@ -16980,6 +16980,7 @@ implementing assertions.\n * Basic PowerPC Built-in Functions Available on ISA 2.06::\n * Basic PowerPC Built-in Functions Available on ISA 2.07::\n * Basic PowerPC Built-in Functions Available on ISA 3.0::\n+* Basic PowerPC Built-in Functions Available for a Future Architecture::\n @end menu\n \n This section describes PowerPC built-in functions that do not require\n@@ -17533,6 +17534,27 @@ the FPSCR.  The instruction is a lower latency version of the @code{mffs}\n instruction.  If the @code{mffsl} instruction is not available, then the\n builtin uses the older @code{mffs} instruction to read the FPSCR.\n \n+@node Basic PowerPC Built-in Functions Available for a Future Architecture\n+@subsubsection Basic PowerPC Built-in Functions Available for a Future Architecture\n+\n+The basic built-in functions described in this section are\n+available on the PowerPC family of processors starting with a\n+hypothetical CPU which may or may not be available in the future, as\n+requested by specifying @option{-mcpu=future} on the command line.\n+Unless explicitly disabled on the command line,\n+specifying @option{-mcpu=future} has the effect of enabling all the\n+same options as for @option{-mcpu=power9}.\n+\n+The following built-in functions are available on Linux 64-bit systems\n+that use a future architecture instruction set (@option{-mcpu=future}):\n+\n+@smallexample\n+@exdent unsigned long long int\n+@exdent __builtin_cfuged (unsigned long long int, unsigned long long int)\n+@end smallexample\n+Perform a 64-bit centrifuge operation, as if implemented by the Future\n+@code{cfuged} instruction.\n+@findex __builtin_cfuged\n \n @node PowerPC AltiVec/VSX Built-in Functions\n @subsection PowerPC AltiVec/VSX Built-in Functions"}, {"sha": "ed9b0d5505246c4cb2f3e6714e5de0b3d0933221", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2403d3d7a5e4878f211d868fd4b76a4b70ce2a54/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2403d3d7a5e4878f211d868fd4b76a4b70ce2a54/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2403d3d7a5e4878f211d868fd4b76a4b70ce2a54", "patch": "@@ -1,3 +1,8 @@\n+2020-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\n+\t* gcc.target.powerpc/cfuged-0.c: New test.\n+\t* gcc.target.powerpc/cfuged-1.c: New test.\n+\n 2020-05-11  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/95049"}, {"sha": "6c2d5c7a55e8770b2952781eaf34046cca697a75", "filename": "gcc/testsuite/gcc.target/powerpc/cfuged-0.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2403d3d7a5e4878f211d868fd4b76a4b70ce2a54/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcfuged-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2403d3d7a5e4878f211d868fd4b76a4b70ce2a54/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcfuged-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcfuged-0.c?ref=2403d3d7a5e4878f211d868fd4b76a4b70ce2a54", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+extern void abort (void);\n+\n+unsigned long long int\n+do_cfuged (unsigned long long int source, unsigned long long int mask)\n+{\n+  return __builtin_cfuged (source, mask);\n+}\n+\n+int main (int argc, char *argv [])\n+{\n+  unsigned long long int sources [4], masks [4];\n+  unsigned long long int results [4][4] = {\n+    /* sources[0] with each of masks [0 .. 3] */\n+    {0x7e3ca5f0ll, 0xa5f07e3cll, 0xaf7350ecll, 0x50ecaf73ll },\n+    /* sources[1] with each of masks [0 .. 3] */\n+    { 0xa5f07e3cll,  0x7e3ca5f0ll, 0x73afec50ll, 0xec5073afll },\n+    /* sources[2] with each of masks [0 .. 3] */\n+    { 0xf07e3ca5ll, 0x3ca5f07ell, 0x3af7c50ell, 0xc50e3af7ll },\n+    /* sources[3] with each of masks [0 .. 3] */\n+    { 0xe7c35a0fll, 0x5a0fe7c3ll, 0x50ecaf73ll, 0xaf7350ecll },\n+  };\n+\n+  sources[0] = 0xa5f07e3cll;\n+  sources[1] = 0x7e3ca5f0ll;\n+  sources[2] = 0x3ca5f07ell;\n+  sources[3] = 0x5a0fe7c3ll;\n+\n+  masks[0] = 0xffff0000ll;\n+  masks[1] = 0x0000ffffll;\n+  masks[2] = 0x0f0f0f0fll;\n+  masks[3] = 0xf0f0f0f0ll;\n+\n+  unsigned long long int result;\n+\n+  for (int i = 0; i < 4; i++)\n+    {\n+      for (int j = 0; j < 4; j++)\n+\t{\n+\t  if (do_cfuged (sources[i], masks[j]) != results [i][j])\n+\t    abort ();\n+\t}\n+    }\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\mcfuged\\M} } } */"}, {"sha": "83bf2ae14993478e7db5e42122dd6214be0f6bc4", "filename": "gcc/testsuite/gcc.target/powerpc/cfuged-1.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2403d3d7a5e4878f211d868fd4b76a4b70ce2a54/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcfuged-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2403d3d7a5e4878f211d868fd4b76a4b70ce2a54/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcfuged-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcfuged-1.c?ref=2403d3d7a5e4878f211d868fd4b76a4b70ce2a54", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+extern void abort (void);\n+\n+unsigned long long int\n+do_cfuged (unsigned long long int source, unsigned long long int mask)\n+{\n+  return __builtin_cfuged (source, mask);\n+}\n+\n+int main (int argc, char *argv [])\n+{\n+  unsigned long long int sources [4], masks [4];\n+  unsigned long long int results [4][4] = {\n+    /* sources[0] with each of masks [0 .. 3] */\n+    {0x7e3ca5f0ll, 0xa5f07e3cll, 0xaf7350ecll, 0x50ecaf73ll },\n+    /* sources[1] with each of masks [0 .. 3] */\n+    { 0xa5f07e3cll,  0x7e3ca5f0ll, 0x73afec50ll, 0xec5073afll },\n+    /* sources[2] with each of masks [0 .. 3] */\n+    { 0xf07e3ca5ll, 0x3ca5f07ell, 0x3af7c50ell, 0xc50e3af7ll },\n+    /* sources[3] with each of masks [0 .. 3] */\n+    { 0xe7c35a0fll, 0x5a0fe7c3ll, 0x50ecaf73ll, 0xaf7350ecll },\n+  };\n+\n+  sources[0] = 0xa5f07e3cll;\n+  sources[1] = 0x7e3ca5f0ll;\n+  sources[2] = 0x3ca5f07ell;\n+  sources[3] = 0x5a0fe7c3ll;\n+\n+  masks[0] = 0xffff0000ll;\n+  masks[1] = 0x0000ffffll;\n+  masks[2] = 0x0f0f0f0fll;\n+  masks[3] = 0xf0f0f0f0ll;\n+\n+  unsigned long long int result;\n+\n+  for (int i = 0; i < 4; i++)\n+    {\n+      for (int j = 0; j < 4; j++)\n+\t{\n+\t  if (do_cfuged (sources[i], masks[j]) != results [i][j])\n+\t    abort ();\n+\t}\n+    }\n+\n+  return 0;\n+}"}]}