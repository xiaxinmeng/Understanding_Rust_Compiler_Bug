{"sha": "759915cada85b5c050dc2d46fa75ac522bd81f71", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzU5OTE1Y2FkYTg1YjVjMDUwZGMyZDQ2ZmE3NWFjNTIyYmQ4MWY3MQ==", "commit": {"author": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2005-10-06T00:05:33Z"}, "committer": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2005-10-06T00:05:33Z"}, "message": "md.texi (Standard Names): Fix name of pushm1 pattern.\n\n2005-10-05  Eric Christopher  <echristo@apple.com>\n\n        * doc/md.texi (Standard Names): Fix name of pushm1 pattern.\n\nFrom-SVN: r105023", "tree": {"sha": "e46da488216d900c46a23ec5c0b83710dc308375", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e46da488216d900c46a23ec5c0b83710dc308375"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/759915cada85b5c050dc2d46fa75ac522bd81f71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/759915cada85b5c050dc2d46fa75ac522bd81f71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/759915cada85b5c050dc2d46fa75ac522bd81f71", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/759915cada85b5c050dc2d46fa75ac522bd81f71/comments", "author": null, "committer": null, "parents": [{"sha": "bf7e247271fe1ae00a94d1d4ba8e26db9767d5cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf7e247271fe1ae00a94d1d4ba8e26db9767d5cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf7e247271fe1ae00a94d1d4ba8e26db9767d5cb"}], "stats": {"total": 84, "additions": 44, "deletions": 40}, "files": [{"sha": "7ea9415c1a087ca6f6e6a4932f3ad45968ed916f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 27, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/759915cada85b5c050dc2d46fa75ac522bd81f71/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/759915cada85b5c050dc2d46fa75ac522bd81f71/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=759915cada85b5c050dc2d46fa75ac522bd81f71", "patch": "@@ -1,3 +1,7 @@\n+2005-10-05  Eric Christopher  <echristo@apple.com>\n+\n+\t* doc/md.texi (Standard Names): Fix name of pushm1 pattern.\n+\n 2005-10-05  Richard Henderson  <rth@redhat.com>\n \n \tPR 23714\n@@ -53,20 +57,20 @@\n \topbuild_num_elems, opbuild_append_real, opbuild_append_virtual,\n \topbuild_first, opbuild_next, opbuild_elem_real, opbuild_elem_virtual,\n \topbuild_elem_uid, opbuild_clear, opbuild_remove_elem): Delete.\n-\t(get_name_decl): New.  Return DECL_UID of base variable. \n+\t(get_name_decl): New.  Return DECL_UID of base variable.\n \t(operand_build_cmp): New.  qsort comparison routine.\n \t(operand_build_sort_virtual): New.  Sort virtual build vector.\n \t(init_ssa_operands, fini_ssa_operands): Use VEC routines.\n \t(FINALIZE_OPBUILD_BASE, FINALIZE_OPBUILD_ELEM): Use VEC_Index.\n \t(FINALIZE_BASE): Use get_name_decl.\n \t(finalize_ssa_defs, finalize_ssa_uses, cleanup_v_may_defs,\n \tfinalize_ssa_v_may_defs, finalize_ssa_vuses, finalize_ssa_v_must_defs,\n-\t(start_ssa_stmt_operands, append_def, append_use, append_vuse, \n-\tappend_v_may_def, append_v_must_def): Replace opbuild_* routines with \n+\t(start_ssa_stmt_operands, append_def, append_use, append_vuse,\n+\tappend_v_may_def, append_v_must_def): Replace opbuild_* routines with\n \tdirect VEC_* manipulations.\n \t(build_ssa_operands): Call operand_build_sort_virtual.\n \t(copy_virtual_operand, create_ssa_artficial_load_stmt,\n-\tadd_call_clobber_ops, add_call_read_ops): Replace opbuild_* routines \n+\tadd_call_clobber_ops, add_call_read_ops): Replace opbuild_* routines\n \twith direct VEC_* manipulations.\n \t* tree-ssa-opfinalize.h (FINALIZE_FUNC): Replace opbuild_* routines\n \twith direct VEC manipulations.\n@@ -101,7 +105,7 @@\n \n \t* c-common.c (vector_types_convertible_p): Check TYPE_PRECISION for\n \treal types.\n-\t\n+\n 2005-10-04  Steve Ellcey  <sje@cup.hp.com>\n \n \t* tree-vect-transform.c (vect_create_epilog_for_reduction):\n@@ -281,7 +285,7 @@\n \n 2005-09-30  Richard Earnshaw  <richard.earnshaw@arm.com>\n \n-\t* arm.md (movqi): On thumb when optimizing, handle loading from \n+\t* arm.md (movqi): On thumb when optimizing, handle loading from\n \tmemory by describing this as taking a subreg of a zero-extended load\n \tinto an SImode register.\n \t(movhi): Likewise.\n@@ -335,7 +339,7 @@\n \twrapup_global_declaration_2 call returned true, restart the loop.\n \n 2005-09-29  Daniel Berlin  <dberlin@dberlin.org>\n-\t\n+\n \tFix PR tree-optimization/24117\n \t* tree-ssa-structalias.c (find_func_aliases): Strip nops\n \tbefore considering whether to use anyoffset.\n@@ -455,7 +459,7 @@\n \tPR tree-optimization/23625\n \t* tree-flow-inline.h (bsi_after_labels): Remove, first statement is\n \tLABEL_EXPR, assertion check.\n-\t\n+\n 2005-09-27  J\"orn Rennecke <joern.rennecke@st.com>\n \n \t* optabs.c (no_conflict_move_test): Check if a result of a\n@@ -513,11 +517,11 @@\n \t(t_bool): New enum.\n \t(follow_ssa_edge, follow_ssa_edge_in_rhs,\n \tfollow_ssa_edge_in_condition_phi_branch,\n-\tfollow_ssa_edge_in_condition_phi, follow_ssa_edge_inner_loop_phi): \n+\tfollow_ssa_edge_in_condition_phi, follow_ssa_edge_inner_loop_phi):\n \tChange return type to t_bool.  Use a parameter to limit the size of\n-\ttrees that are walked before stopping \n+\ttrees that are walked before stopping\n \t(analyze_evolution_in_loop): Initialize the limit to 0.\n-\t(follow_ssa_edge): Give up by returning t_dont_know if the limit \n+\t(follow_ssa_edge): Give up by returning t_dont_know if the limit\n \texceeds PARAM_SCEV_MAX_EXPR_SIZE.\n \n 2005-09-26  Uros Bizjak  <uros@kss-loka.si>\n@@ -695,7 +699,7 @@\n \testimate_only  is true.\n \t* tree-flow.h (ref_contains_indirect_ref): New prototype.\n \t* tree-flow-inline.h (ref_contains_indirect_ref): Moved from\n-\ttree-ssa-structalias.c \n+\ttree-ssa-structalias.c\n \t* tree-ssa-loop-niter.c (infer_loop_bounds_from_undefined): Use\n \tref_contains_indirect_ref.\n \t* tree-ssa-structalias.c (ref_contains_indirect_ref): Moved.\n@@ -848,7 +852,7 @@\n \t* tree.h (swap_tree_operands): Declare.\n \t* tree-vectorizer.c (vect_is_simple_reduction): Remove ATTRIBUTE_UNUSED.\n \tCall swap_tree_operands.\n-\t\n+\n 2005-09-19  Richard Henderson  <rth@redhat.com>\n \n \t* tree-flow.h (merge_alias_info): Declare.\n@@ -904,8 +908,8 @@\n \n \t* except.c (struct eh_status): Turn region_array into vec.\n \t(expand_resx_expr, collect_eh_region_array, remove_unreachable_regions,\n-\tconvert_from_eh_region_ranges, find_exception_handler_labels, \n-\tcurrent_function_has_exception_handlers, assign_filter_values, \n+\tconvert_from_eh_region_ranges, find_exception_handler_labels,\n+\tcurrent_function_has_exception_handlers, assign_filter_values,\n \tbuild_post_landing_pads, dw2_build_landing_pads,\n \tsjlj_find_directly_reachable_regions, sjlj_mark_call_sites,\n \tsjlj_emit_dispatch_table, remove_eh_handler, for_each_eh_region,\n@@ -975,7 +979,7 @@\n \t* tree-data-ref.h (estimate_iters_using_array): Prototype\n \t* tree-ssa-loop-niter.c (infer_loop_bounds_from_undefined):\n \tUse estimate_iters_using_array instead of analyze_array.\n-\t\n+\n 2005-09-15  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* tree-nested.c (get_frame_type): Mark the \"non-local frame structure\"\n@@ -1094,9 +1098,9 @@\n \n 2005-09-12  Andrew Pinski  <pinskia@physics.uc.edu>\n \n-\t* tree-ssa-dse.c (dse_optimize_stmt): Fix up all of V_MAY_DEF and \n+\t* tree-ssa-dse.c (dse_optimize_stmt): Fix up all of V_MAY_DEF and\n \tV_MUST_DEF instead of just the first_use_p.\n-\tDon't mark the virtual variables for renaming on the statement which \n+\tDon't mark the virtual variables for renaming on the statement which\n \tis being removed.\n \t(pass_dse): Remove TODO_update_ssa.\n \n@@ -1183,7 +1187,7 @@\n \n 2005-09-09  Sebastian Pop  <pop@cri.ensmp.fr>\n \n-\t* tree-chrec.c (evolution_function_is_invariant_rec_p): Use \n+\t* tree-chrec.c (evolution_function_is_invariant_rec_p): Use\n \tCHREC_LEFT and CHREC_RIGHT for accessing chrec components instead\n \tof wrongly accessing operands.\n \n@@ -1267,7 +1271,7 @@\n \t* config/s390/s390.c (s390_sr_alias_set): Variable removed.\n \t(override_options): Setting s390_sr_alias_set removed.\n \t(save_fpr, save_gprs): Set alias set to vararg or frame.\n-\t(restore_fpr, restore_gprs, s390_emit_prologue): Replace \n+\t(restore_fpr, restore_gprs, s390_emit_prologue): Replace\n \ts390_sr_alias_set with get_frame_alias_set ().\n \t(s390_gimplify_va_arg): Replace s390_sr_alias_set with\n \tget_varargs_alias_set ().\n@@ -1297,7 +1301,7 @@\n 2005-09-07  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n \t* reload1.c (fixup_eh_region_note): Remove assertion.\n-\t(fixup_abnormal_edges): Reverted removal of call to \n+\t(fixup_abnormal_edges): Reverted removal of call to\n \tfind_many_sub_basic_blocks made on 2005-08-31.\n \n 2005-09-07  Richard Henderson  <rth@redhat.com>\n@@ -1403,7 +1407,7 @@\n \n 2005-09-06  Saurabh Verma  <saurabh.verma@codito.com>\n \n-\t* simplify-rtx.c (simplify_binary_operation_1): Correct the \n+\t* simplify-rtx.c (simplify_binary_operation_1): Correct the\n \tcondition for detecting cases like (a&a) and (a^a).\n \n 2005-09-06  Keith Besaw  <kbesaw@us.ibm.com>\n@@ -1444,7 +1448,7 @@\n \n 2005-09-06  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n-\t* gcse.c (try_replace_reg): Disallow REG_EQUAL notes for \n+\t* gcse.c (try_replace_reg): Disallow REG_EQUAL notes for\n \tSTRICT_LOW_PART SETs.\n \n 2005-09-06  Alan Modra  <amodra@bigpond.net.au>\n@@ -1740,8 +1744,8 @@\n \n 2005-08-31  Fariborz Jahanian <fjahanian@apple.com>\n \n-\t* expr.c (expand_expr_real_1): Compare size of address \n-\tmode to target's address mode size in deciding expansion of \n+\t* expr.c (expand_expr_real_1): Compare size of address\n+\tmode to target's address mode size in deciding expansion of\n \tthe constant address.\n \n 2005-08-31  Richard Guenther  <rguenther@suse.de>\n@@ -2124,7 +2128,7 @@\n 2005-08-23  Sebastian Pop  <pop@cri.ensmp.fr>\n \n \tPR tree-optimization/23511\n-\t* tree-ssa-loop-niter.c (infer_loop_bounds_from_undefined): Don't \n+\t* tree-ssa-loop-niter.c (infer_loop_bounds_from_undefined): Don't\n \thandle cases where TYPE_MIN_VALUE or TYPE_MAX_VALUE are NULL_TREE.\n \n 2005-08-23  Jakub Jelinek  <jakub@redhat.com>\n@@ -2242,7 +2246,7 @@\n \tto use scalar_initial_def here. Create an epilog adjustment only if\n \tscalar_initial_def is not NULL.\n \n-\t(vectorizable_reduction): Remove assert. \n+\t(vectorizable_reduction): Remove assert.\n \n 2005-08-20  H.J. Lu  <hongjiu.lu@intel.com>\n "}, {"sha": "8bbc2d889ae2a1e2ada714851f15d57e5c252231", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/759915cada85b5c050dc2d46fa75ac522bd81f71/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/759915cada85b5c050dc2d46fa75ac522bd81f71/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=759915cada85b5c050dc2d46fa75ac522bd81f71", "patch": "@@ -3029,8 +3029,8 @@ specify field index and operand 0 place to store value into.\n Initialize the vector to given values.  Operand 0 is the vector to initialize\n and operand 1 is parallel containing values for individual fields.\n \n-@cindex @code{push@var{m}} instruction pattern\n-@item @samp{push@var{m}}\n+@cindex @code{push@var{m}1} instruction pattern\n+@item @samp{push@var{m}1}\n Output a push instruction.  Operand 0 is value to push.  Used only when\n @code{PUSH_ROUNDING} is defined.  For historical reason, this pattern may be\n missing and in such case an @code{mov} expander is used instead, with a\n@@ -3072,36 +3072,36 @@ it is unspecified which of the two operands is returned as the result.\n @cindex @code{reduc_smax_@var{m}} instruction pattern\n @item @samp{reduc_smin_@var{m}}, @samp{reduc_smax_@var{m}}\n Find the signed minimum/maximum of the elements of a vector. The vector is\n-operand 1, and the scalar result is stored in the least significant bits of \n-operand 0 (also a vector). The output and input vector should have the same \n+operand 1, and the scalar result is stored in the least significant bits of\n+operand 0 (also a vector). The output and input vector should have the same\n modes.\n \n @cindex @code{reduc_umin_@var{m}} instruction pattern\n @cindex @code{reduc_umax_@var{m}} instruction pattern\n @item @samp{reduc_umin_@var{m}}, @samp{reduc_umax_@var{m}}\n Find the unsigned minimum/maximum of the elements of a vector. The vector is\n-operand 1, and the scalar result is stored in the least significant bits of \n-operand 0 (also a vector). The output and input vector should have the same \n+operand 1, and the scalar result is stored in the least significant bits of\n+operand 0 (also a vector). The output and input vector should have the same\n modes.\n \n @cindex @code{reduc_splus_@var{m}} instruction pattern\n @item @samp{reduc_splus_@var{m}}\n-Compute the sum of the signed elements of a vector. The vector is operand 1, \n-and the scalar result is stored in the least significant bits of operand 0 \n+Compute the sum of the signed elements of a vector. The vector is operand 1,\n+and the scalar result is stored in the least significant bits of operand 0\n (also a vector). The output and input vector should have the same modes.\n \n @cindex @code{reduc_uplus_@var{m}} instruction pattern\n @item @samp{reduc_uplus_@var{m}}\n-Compute the sum of the unsigned elements of a vector. The vector is operand 1, \n-and the scalar result is stored in the least significant bits of operand 0 \n+Compute the sum of the unsigned elements of a vector. The vector is operand 1,\n+and the scalar result is stored in the least significant bits of operand 0\n (also a vector). The output and input vector should have the same modes.\n \n @cindex @code{vec_shl_@var{m}} instruction pattern\n @cindex @code{vec_shr_@var{m}} instruction pattern\n @item @samp{vec_shl_@var{m}}, @samp{vec_shr_@var{m}}\n Whole vector left/right shift in bits.\n Operand 1 is a vector to be shifted.\n-Operand 2 is an integer shift amount in bits. \n+Operand 2 is an integer shift amount in bits.\n Operand 0 is where the resulting shifted vector is stored.\n The output and input vectors should have the same modes.\n \n@@ -4277,7 +4277,7 @@ will be emitted, followed by a store of the value to the memory operand.\n This pattern, if defined, moves a @code{Pmode} value from the memory\n in operand 1 to the memory in operand 0 without leaving the value in\n a register afterward.  This is to avoid leaking the value some place\n-that an attacker might use to rewrite the stack guard slot after \n+that an attacker might use to rewrite the stack guard slot after\n having clobbered it.\n \n If this pattern is not defined, then a plain move pattern is generated.\n@@ -4493,7 +4493,7 @@ Registers used to store the condition code value should have a mode that\n is in class @code{MODE_CC}.  Normally, it will be @code{CCmode}.  If\n additional modes are required (as for the add example mentioned above in\n the SPARC), define them in @file{@var{machine}-modes.def}\n-(@pxref{Condition Code}).  Also define @code{SELECT_CC_MODE} to choose \n+(@pxref{Condition Code}).  Also define @code{SELECT_CC_MODE} to choose\n a mode given an operand of a compare.\n \n If it is known during RTL generation that a different mode will be"}]}