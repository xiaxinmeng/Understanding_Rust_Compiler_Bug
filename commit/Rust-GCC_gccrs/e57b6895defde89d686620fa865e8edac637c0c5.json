{"sha": "e57b6895defde89d686620fa865e8edac637c0c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTU3YjY4OTVkZWZkZTg5ZDY4NjYyMGZhODY1ZThlZGFjNjM3YzBjNQ==", "commit": {"author": {"name": "lrh2000", "email": "lrh2000@pku.edu.cn", "date": "2021-04-24T06:53:14Z"}, "committer": {"name": "lrh2000", "email": "lrh2000@pku.edu.cn", "date": "2021-04-25T15:51:33Z"}, "message": "Clean up the compilation of block expressions", "tree": {"sha": "16a2d2653fcde3c638d02ccb13492c2a341ff762", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16a2d2653fcde3c638d02ccb13492c2a341ff762"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e57b6895defde89d686620fa865e8edac637c0c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e57b6895defde89d686620fa865e8edac637c0c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e57b6895defde89d686620fa865e8edac637c0c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e57b6895defde89d686620fa865e8edac637c0c5/comments", "author": {"login": "lrh2000", "id": 41988959, "node_id": "MDQ6VXNlcjQxOTg4OTU5", "avatar_url": "https://avatars.githubusercontent.com/u/41988959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lrh2000", "html_url": "https://github.com/lrh2000", "followers_url": "https://api.github.com/users/lrh2000/followers", "following_url": "https://api.github.com/users/lrh2000/following{/other_user}", "gists_url": "https://api.github.com/users/lrh2000/gists{/gist_id}", "starred_url": "https://api.github.com/users/lrh2000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lrh2000/subscriptions", "organizations_url": "https://api.github.com/users/lrh2000/orgs", "repos_url": "https://api.github.com/users/lrh2000/repos", "events_url": "https://api.github.com/users/lrh2000/events{/privacy}", "received_events_url": "https://api.github.com/users/lrh2000/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lrh2000", "id": 41988959, "node_id": "MDQ6VXNlcjQxOTg4OTU5", "avatar_url": "https://avatars.githubusercontent.com/u/41988959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lrh2000", "html_url": "https://github.com/lrh2000", "followers_url": "https://api.github.com/users/lrh2000/followers", "following_url": "https://api.github.com/users/lrh2000/following{/other_user}", "gists_url": "https://api.github.com/users/lrh2000/gists{/gist_id}", "starred_url": "https://api.github.com/users/lrh2000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lrh2000/subscriptions", "organizations_url": "https://api.github.com/users/lrh2000/orgs", "repos_url": "https://api.github.com/users/lrh2000/repos", "events_url": "https://api.github.com/users/lrh2000/events{/privacy}", "received_events_url": "https://api.github.com/users/lrh2000/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "041003da86f895ba5b00ae4a683996131d0441bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/041003da86f895ba5b00ae4a683996131d0441bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/041003da86f895ba5b00ae4a683996131d0441bf"}], "stats": {"total": 82, "additions": 36, "deletions": 46}, "files": [{"sha": "48935418d84b590635bc505066dea35050e9f184", "filename": "gcc/rust/backend/rust-compile.cc", "status": "modified", "additions": 23, "deletions": 46, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e57b6895defde89d686620fa865e8edac637c0c5/gcc%2Frust%2Fbackend%2Frust-compile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e57b6895defde89d686620fa865e8edac637c0c5/gcc%2Frust%2Fbackend%2Frust-compile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile.cc?ref=e57b6895defde89d686620fa865e8edac637c0c5", "patch": "@@ -234,32 +234,19 @@ CompileBlock::visit (HIR::BlockExpr &expr)\n   for (auto &s : expr.get_statements ())\n     {\n       auto compiled_expr = CompileStmt::Compile (s.get (), ctx);\n-      if (compiled_expr == nullptr)\n-\tcontinue;\n-\n-      if (result == nullptr)\n+      if (compiled_expr != nullptr)\n \t{\n-\t  Bstatement *final_stmt\n+\t  Bstatement *compiled_stmt\n \t    = ctx->get_backend ()->expression_statement (fnctx.fndecl,\n \t\t\t\t\t\t\t compiled_expr);\n-\t  ctx->add_statement (final_stmt);\n-\t}\n-      else\n-\t{\n-\t  Bexpression *result_reference\n-\t    = ctx->get_backend ()->var_expression (result,\n-\t\t\t\t\t\t   s->get_locus_slow ());\n-\n-\t  Bstatement *assignment = ctx->get_backend ()->assignment_statement (\n-\t    fnctx.fndecl, result_reference, compiled_expr, expr.get_locus ());\n-\t  ctx->add_statement (assignment);\n+\t  ctx->add_statement (compiled_stmt);\n \t}\n     }\n \n   if (expr.has_expr ())\n     {\n-      // the previous passes will ensure this is a valid return\n-      // dead code elimination should remove any bad trailing expressions\n+      // the previous passes will ensure this is a valid return or\n+      // a valid trailing expression\n       Bexpression *compiled_expr = CompileExpr::Compile (expr.expr.get (), ctx);\n       if (compiled_expr != nullptr)\n \t{\n@@ -388,16 +375,31 @@ HIRCompileBase::compile_function_body (\n   for (auto &s : function_body->get_statements ())\n     {\n       auto compiled_expr = CompileStmt::Compile (s.get (), ctx);\n+      if (compiled_expr != nullptr)\n+\t{\n+\t  Bstatement *compiled_stmt\n+\t    = ctx->get_backend ()->expression_statement (fndecl, compiled_expr);\n+\t  ctx->add_statement (compiled_stmt);\n+\t}\n+    }\n+\n+  if (function_body->has_expr ())\n+    {\n+      // the previous passes will ensure this is a valid return\n+      // or a valid trailing expression\n+      Bexpression *compiled_expr\n+\t= CompileExpr::Compile (function_body->expr.get (), ctx);\n+\n       if (compiled_expr != nullptr)\n \t{\n \t  if (has_return_type)\n \t    {\n \t      std::vector<Bexpression *> retstmts;\n \t      retstmts.push_back (compiled_expr);\n \n-\t      auto ret\n-\t\t= ctx->get_backend ()->return_statement (fndecl, retstmts,\n-\t\t\t\t\t\t\t s->get_locus_slow ());\n+\t      auto ret = ctx->get_backend ()->return_statement (\n+\t\tfndecl, retstmts,\n+\t\tfunction_body->get_final_expr ()->get_locus_slow ());\n \t      ctx->add_statement (ret);\n \t    }\n \t  else\n@@ -409,31 +411,6 @@ HIRCompileBase::compile_function_body (\n \t    }\n \t}\n     }\n-\n-  if (function_body->has_expr ())\n-    {\n-      // the previous passes will ensure this is a valid return\n-      // dead code elimination should remove any bad trailing expressions\n-      Bexpression *compiled_expr\n-\t= CompileExpr::Compile (function_body->expr.get (), ctx);\n-\n-      if (has_return_type && compiled_expr)\n-\t{\n-\t  std::vector<Bexpression *> retstmts;\n-\t  retstmts.push_back (compiled_expr);\n-\n-\t  auto ret = ctx->get_backend ()->return_statement (\n-\t    fndecl, retstmts,\n-\t    function_body->get_final_expr ()->get_locus_slow ());\n-\t  ctx->add_statement (ret);\n-\t}\n-      else if (compiled_expr)\n-\t{\n-\t  Bstatement *final_stmt\n-\t    = ctx->get_backend ()->expression_statement (fndecl, compiled_expr);\n-\t  ctx->add_statement (final_stmt);\n-\t}\n-    }\n }\n \n } // namespace Compile"}, {"sha": "d561f8cab593403deab46e453e87d9e225408b10", "filename": "gcc/testsuite/rust.test/execute/block_expr1.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e57b6895defde89d686620fa865e8edac637c0c5/gcc%2Ftestsuite%2Frust.test%2Fexecute%2Fblock_expr1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e57b6895defde89d686620fa865e8edac637c0c5/gcc%2Ftestsuite%2Frust.test%2Fexecute%2Fblock_expr1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fexecute%2Fblock_expr1.rs?ref=e57b6895defde89d686620fa865e8edac637c0c5", "patch": "@@ -0,0 +1,8 @@\n+fn main() -> i32 {\n+    let ret = {\n+        1;\n+        2;\n+        0\n+    };\n+    ret\n+}"}, {"sha": "0a093d8858777a96e23bb5220095af7de1d5fc9e", "filename": "gcc/testsuite/rust.test/execute/func1.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e57b6895defde89d686620fa865e8edac637c0c5/gcc%2Ftestsuite%2Frust.test%2Fexecute%2Ffunc1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e57b6895defde89d686620fa865e8edac637c0c5/gcc%2Ftestsuite%2Frust.test%2Fexecute%2Ffunc1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fexecute%2Ffunc1.rs?ref=e57b6895defde89d686620fa865e8edac637c0c5", "patch": "@@ -0,0 +1,5 @@\n+fn main() -> i32 {\n+    1;\n+    2;\n+    0\n+}"}]}