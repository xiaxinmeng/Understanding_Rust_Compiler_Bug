{"sha": "42b4e87d317377d6dcbb25ee2523da4a0c42478a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDJiNGU4N2QzMTczNzdkNmRjYmIyNWVlMjUyM2RhNGEwYzQyNDc4YQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-08-14T09:28:49Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-08-14T09:28:49Z"}, "message": "[AArch64] Add support for SVE absolute comparisons\n\nThis patch adds support for floating-point absolute comparisons\nFACLT and FACLE (aliased as FACGT and FACGE with swapped operands).\n\n2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/iterators.md (SVE_COND_FP_ABS_CMP): New iterator.\n\t* config/aarch64/aarch64-sve.md (*aarch64_pred_fac<cmp_op><mode>):\n\tNew pattern.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/vcond_21.c: New test.\n\t* gcc.target/aarch64/sve/vcond_21_run.c: Likewise.\n\nFrom-SVN: r274443", "tree": {"sha": "bb9e10872a5d2bdb3bd1a76afbc495e1336cce2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb9e10872a5d2bdb3bd1a76afbc495e1336cce2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/42b4e87d317377d6dcbb25ee2523da4a0c42478a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42b4e87d317377d6dcbb25ee2523da4a0c42478a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42b4e87d317377d6dcbb25ee2523da4a0c42478a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42b4e87d317377d6dcbb25ee2523da4a0c42478a/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "88a37c4d72899c5a3f5a7b2bca0ae0096f3270a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88a37c4d72899c5a3f5a7b2bca0ae0096f3270a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88a37c4d72899c5a3f5a7b2bca0ae0096f3270a3"}], "stats": {"total": 125, "additions": 123, "deletions": 2}, "files": [{"sha": "401b2bcb6fc91868e6605719f9d7aa1ae8a7eab1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42b4e87d317377d6dcbb25ee2523da4a0c42478a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42b4e87d317377d6dcbb25ee2523da4a0c42478a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=42b4e87d317377d6dcbb25ee2523da4a0c42478a", "patch": "@@ -1,3 +1,9 @@\n+2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/iterators.md (SVE_COND_FP_ABS_CMP): New iterator.\n+\t* config/aarch64/aarch64-sve.md (*aarch64_pred_fac<cmp_op><mode>):\n+\tNew pattern.\n+\n 2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n \t    Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n "}, {"sha": "b9ef8dd2a3ab906a68392cec457555a18ec0a211", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 42, "deletions": 2, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42b4e87d317377d6dcbb25ee2523da4a0c42478a/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42b4e87d317377d6dcbb25ee2523da4a0c42478a/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=42b4e87d317377d6dcbb25ee2523da4a0c42478a", "patch": "@@ -94,7 +94,8 @@\n ;; ---- [INT,FP] Compare and select\n ;; ---- [INT] Comparisons\n ;; ---- [INT] While tests\n-;; ---- [FP] Comparisons\n+;; ---- [FP] Direct comparisons\n+;; ---- [FP] Absolute comparisons\n ;; ---- [PRED] Test bits\n ;;\n ;; == Reductions\n@@ -3364,7 +3365,7 @@\n )\n \n ;; -------------------------------------------------------------------------\n-;; ---- [FP] Comparisons\n+;; ---- [FP] Direct comparisons\n ;; -------------------------------------------------------------------------\n ;; Includes:\n ;; - FCMEQ\n@@ -3473,6 +3474,45 @@\n \t  UNSPEC_COND_FCMUO))]\n )\n \n+;; -------------------------------------------------------------------------\n+;; ---- [FP] Absolute comparisons\n+;; -------------------------------------------------------------------------\n+;; Includes:\n+;; - FACGE\n+;; - FACGT\n+;; - FACLE\n+;; - FACLT\n+;; -------------------------------------------------------------------------\n+\n+;; Predicated floating-point absolute comparisons.\n+(define_insn_and_rewrite \"*aarch64_pred_fac<cmp_op><mode>\"\n+  [(set (match_operand:<VPRED> 0 \"register_operand\" \"=Upa\")\n+\t(unspec:<VPRED>\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl\")\n+\t   (match_operand:SI 4 \"aarch64_sve_ptrue_flag\")\n+\t   (unspec:SVE_F\n+\t     [(match_operand 5)\n+\t      (match_operand:SI 6 \"aarch64_sve_gp_strictness\")\n+\t      (match_operand:SVE_F 2 \"register_operand\" \"w\")]\n+\t     UNSPEC_COND_FABS)\n+\t   (unspec:SVE_F\n+\t     [(match_operand 7)\n+\t      (match_operand:SI 8 \"aarch64_sve_gp_strictness\")\n+\t      (match_operand:SVE_F 3 \"register_operand\" \"w\")]\n+\t     UNSPEC_COND_FABS)]\n+\t  SVE_COND_FP_ABS_CMP))]\n+  \"TARGET_SVE\n+   && aarch64_sve_pred_dominates_p (&operands[5], operands[1])\n+   && aarch64_sve_pred_dominates_p (&operands[7], operands[1])\"\n+  \"fac<cmp_op>\\t%0.<Vetype>, %1/z, %2.<Vetype>, %3.<Vetype>\"\n+  \"&& (!rtx_equal_p (operands[1], operands[5])\n+       || !rtx_equal_p (operands[1], operands[7]))\"\n+  {\n+    operands[5] = copy_rtx (operands[1]);\n+    operands[7] = copy_rtx (operands[1]);\n+  }\n+)\n+\n ;; -------------------------------------------------------------------------\n ;; ---- [PRED] Test bits\n ;; -------------------------------------------------------------------------"}, {"sha": "bc43f736d229a79cb30baa35ef0ed8ebda1f4971", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42b4e87d317377d6dcbb25ee2523da4a0c42478a/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42b4e87d317377d6dcbb25ee2523da4a0c42478a/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=42b4e87d317377d6dcbb25ee2523da4a0c42478a", "patch": "@@ -1709,6 +1709,11 @@\n \t\t\t\t\t UNSPEC_COND_FCMLT\n \t\t\t\t\t UNSPEC_COND_FCMNE])\n \n+(define_int_iterator SVE_COND_FP_ABS_CMP [UNSPEC_COND_FCMGE\n+\t\t\t\t\t  UNSPEC_COND_FCMGT\n+\t\t\t\t\t  UNSPEC_COND_FCMLE\n+\t\t\t\t\t  UNSPEC_COND_FCMLT])\n+\n (define_int_iterator FCADD [UNSPEC_FCADD90\n \t\t\t    UNSPEC_FCADD270])\n "}, {"sha": "5f4332b8b7a4efab222e29d8afcfdbf6a481305a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42b4e87d317377d6dcbb25ee2523da4a0c42478a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42b4e87d317377d6dcbb25ee2523da4a0c42478a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=42b4e87d317377d6dcbb25ee2523da4a0c42478a", "patch": "@@ -1,3 +1,8 @@\n+2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/vcond_21.c: New test.\n+\t* gcc.target/aarch64/sve/vcond_21_run.c: Likewise.\n+\n 2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n \t    Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n "}, {"sha": "d5df2e1992bc786f736a854eac4eb948e3774f19", "filename": "gcc/testsuite/gcc.target/aarch64/sve/vcond_21.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42b4e87d317377d6dcbb25ee2523da4a0c42478a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42b4e87d317377d6dcbb25ee2523da4a0c42478a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_21.c?ref=42b4e87d317377d6dcbb25ee2523da4a0c42478a", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#define DEF_LOOP(TYPE, ABS, NAME, OP)\t\t\t\\\n+  void\t\t\t\t\t\t\t\\\n+  test_##TYPE##_##NAME (TYPE *restrict r,\t\t\\\n+\t\t\tTYPE *restrict a,\t\t\\\n+\t\t\tTYPE *restrict b, int n)\t\\\n+  {\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\\\n+      r[i] = ABS (a[i]) OP ABS (b[i]) ? 1.0 : 0.0;\t\\\n+  }\n+\n+#define TEST_TYPE(T, TYPE, ABS)\t\t\t\\\n+  T (TYPE, ABS, lt, <)\t\t\t\t\\\n+  T (TYPE, ABS, le, <=)\t\t\t\t\\\n+  T (TYPE, ABS, ge, >=)\t\t\t\t\\\n+  T (TYPE, ABS, gt, >)\n+\n+#define TEST_ALL(T)\t\t\t\t\\\n+  TEST_TYPE (T, _Float16, __builtin_fabsf16)\t\\\n+  TEST_TYPE (T, float, __builtin_fabsf)\t\t\\\n+  TEST_TYPE (T, double, __builtin_fabs)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tfac[lg]t\\tp[0-9]+\\.h, p[0-7]/z, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tfac[lg]e\\tp[0-9]+\\.h, p[0-7]/z, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfac[lg]t\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tfac[lg]e\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfac[lg]t\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tfac[lg]e\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d\\n} 2 } } */"}, {"sha": "15c5513248510a9556403c9015afbdba291e4e56", "filename": "gcc/testsuite/gcc.target/aarch64/sve/vcond_21_run.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42b4e87d317377d6dcbb25ee2523da4a0c42478a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_21_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42b4e87d317377d6dcbb25ee2523da4a0c42478a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_21_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_21_run.c?ref=42b4e87d317377d6dcbb25ee2523da4a0c42478a", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"vcond_21.c\"\n+\n+#define N 97\n+\n+#define TEST_LOOP(TYPE, ABS, NAME, OP)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE r[N], a[N], b[N];\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = i % 5 * (i & 1 ? -1 : 1);\t\t\t\\\n+\tb[i] = i % 9 * (i & 2 ? -1 : 1);\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##TYPE##_##NAME (r, a, b, N);\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tif (r[i] != (ABS (a[i]) OP ABS (b[i]) ? 1.0 : 0.0))\t\\\n+\t  __builtin_abort ();\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\n+\n+int __attribute__ ((optimize (1)))\n+main (int argc, char **argv)\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}]}