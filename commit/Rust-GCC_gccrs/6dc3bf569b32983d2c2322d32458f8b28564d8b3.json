{"sha": "6dc3bf569b32983d2c2322d32458f8b28564d8b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmRjM2JmNTY5YjMyOTgzZDJjMjMyMmQzMjQ1OGY4YjI4NTY0ZDhiMw==", "commit": {"author": {"name": "Michael Matz", "email": "matz@suse.de", "date": "2009-11-26T13:49:35Z"}, "committer": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2009-11-26T13:49:35Z"}, "message": "builtins.c (expand_builtin_printf, [...]): Remove.\n\n        * builtins.c (expand_builtin_printf, expand_builtin_fprintf,\n        expand_builtin_sprintf): Remove.\n        (expand_builtin): Don't call them.\n\nFrom-SVN: r154673", "tree": {"sha": "e012d4f74c5f84fda567e7ff754061b5caa419a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e012d4f74c5f84fda567e7ff754061b5caa419a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6dc3bf569b32983d2c2322d32458f8b28564d8b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dc3bf569b32983d2c2322d32458f8b28564d8b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6dc3bf569b32983d2c2322d32458f8b28564d8b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dc3bf569b32983d2c2322d32458f8b28564d8b3/comments", "author": {"login": "susematz", "id": 4117296, "node_id": "MDQ6VXNlcjQxMTcyOTY=", "avatar_url": "https://avatars.githubusercontent.com/u/4117296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/susematz", "html_url": "https://github.com/susematz", "followers_url": "https://api.github.com/users/susematz/followers", "following_url": "https://api.github.com/users/susematz/following{/other_user}", "gists_url": "https://api.github.com/users/susematz/gists{/gist_id}", "starred_url": "https://api.github.com/users/susematz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/susematz/subscriptions", "organizations_url": "https://api.github.com/users/susematz/orgs", "repos_url": "https://api.github.com/users/susematz/repos", "events_url": "https://api.github.com/users/susematz/events{/privacy}", "received_events_url": "https://api.github.com/users/susematz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d9b99b4ceb2c9858bd702ad902eafc3f9b9a7714", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9b99b4ceb2c9858bd702ad902eafc3f9b9a7714", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9b99b4ceb2c9858bd702ad902eafc3f9b9a7714"}], "stats": {"total": 319, "additions": 6, "deletions": 313}, "files": [{"sha": "1ba6dd629bd092d47bb8c308865f0a21ce5638c0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc3bf569b32983d2c2322d32458f8b28564d8b3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc3bf569b32983d2c2322d32458f8b28564d8b3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6dc3bf569b32983d2c2322d32458f8b28564d8b3", "patch": "@@ -1,3 +1,9 @@\n+2009-11-26  Michael Matz  <matz@suse.de>\n+\n+\t* builtins.c (expand_builtin_printf, expand_builtin_fprintf,\n+\texpand_builtin_sprintf): Remove.\n+\t(expand_builtin): Don't call them.\n+\n 2009-11-26  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-dce.c (perform_tree_ssa_dce): Allocate visited bitmap."}, {"sha": "df38f5ecc6e37010468e077a88206739f092fd11", "filename": "gcc/builtins.c", "status": "modified", "additions": 0, "deletions": 313, "changes": 313, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc3bf569b32983d2c2322d32458f8b28564d8b3/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc3bf569b32983d2c2322d32458f8b28564d8b3/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=6dc3bf569b32983d2c2322d32458f8b28564d8b3", "patch": "@@ -132,9 +132,6 @@ static rtx expand_builtin_strlen (tree, rtx, enum machine_mode);\n static rtx expand_builtin_alloca (tree, rtx);\n static rtx expand_builtin_unop (enum machine_mode, tree, rtx, rtx, optab);\n static rtx expand_builtin_frame_address (tree, tree);\n-static rtx expand_builtin_printf (tree, rtx, enum machine_mode, bool);\n-static rtx expand_builtin_fprintf (tree, rtx, enum machine_mode, bool);\n-static rtx expand_builtin_sprintf (tree, rtx, enum machine_mode);\n static tree stabilize_va_list_loc (location_t, tree, int);\n static rtx expand_builtin_expect (tree, rtx);\n static tree fold_builtin_constant_p (tree);\n@@ -4983,286 +4980,6 @@ build_string_literal (int len, const char *str)\n   return t;\n }\n \n-/* Expand EXP, a call to printf or printf_unlocked.\n-   Return NULL_RTX if a normal call should be emitted rather than transforming\n-   the function inline.  If convenient, the result should be placed in\n-   TARGET with mode MODE.  UNLOCKED indicates this is a printf_unlocked\n-   call.  */\n-static rtx\n-expand_builtin_printf (tree exp, rtx target, enum machine_mode mode,\n-\t\t       bool unlocked)\n-{\n-  /* If we're using an unlocked function, assume the other unlocked\n-     functions exist explicitly.  */\n-  tree const fn_putchar = unlocked ? built_in_decls[BUILT_IN_PUTCHAR_UNLOCKED]\n-    : implicit_built_in_decls[BUILT_IN_PUTCHAR];\n-  tree const fn_puts = unlocked ? built_in_decls[BUILT_IN_PUTS_UNLOCKED]\n-    : implicit_built_in_decls[BUILT_IN_PUTS];\n-  const char *fmt_str;\n-  tree fn = 0;\n-  tree fmt, arg;\n-  int nargs = call_expr_nargs (exp);\n-\n-  /* If the return value is used, don't do the transformation.  */\n-  if (target != const0_rtx)\n-    return NULL_RTX;\n-\n-  /* Verify the required arguments in the original call.  */\n-  if (nargs == 0)\n-    return NULL_RTX;\n-  fmt = CALL_EXPR_ARG (exp, 0);\n-  if (! POINTER_TYPE_P (TREE_TYPE (fmt)))\n-    return NULL_RTX;\n-\n-  /* Check whether the format is a literal string constant.  */\n-  fmt_str = c_getstr (fmt);\n-  if (fmt_str == NULL)\n-    return NULL_RTX;\n-\n-  if (!init_target_chars ())\n-    return NULL_RTX;\n-\n-  /* If the format specifier was \"%s\\n\", call __builtin_puts(arg).  */\n-  if (strcmp (fmt_str, target_percent_s_newline) == 0)\n-    {\n-      if ((nargs != 2)\n-\t  || ! POINTER_TYPE_P (TREE_TYPE (CALL_EXPR_ARG (exp, 1))))\n-\treturn NULL_RTX;\n-      if (fn_puts)\n-\tfn = build_call_nofold (fn_puts, 1, CALL_EXPR_ARG (exp, 1));\n-    }\n-  /* If the format specifier was \"%c\", call __builtin_putchar(arg).  */\n-  else if (strcmp (fmt_str, target_percent_c) == 0)\n-    {\n-      if ((nargs != 2)\n-\t  || TREE_CODE (TREE_TYPE (CALL_EXPR_ARG (exp, 1))) != INTEGER_TYPE)\n-\treturn NULL_RTX;\n-      if (fn_putchar)\n-\tfn = build_call_nofold (fn_putchar, 1, CALL_EXPR_ARG (exp, 1));\n-    }\n-  else\n-    {\n-      /* We can't handle anything else with % args or %% ... yet.  */\n-      if (strchr (fmt_str, target_percent))\n-\treturn NULL_RTX;\n-\n-      if (nargs > 1)\n-\treturn NULL_RTX;\n-\n-      /* If the format specifier was \"\", printf does nothing.  */\n-      if (fmt_str[0] == '\\0')\n-\treturn const0_rtx;\n-      /* If the format specifier has length of 1, call putchar.  */\n-      if (fmt_str[1] == '\\0')\n-\t{\n-\t  /* Given printf(\"c\"), (where c is any one character,)\n-\t     convert \"c\"[0] to an int and pass that to the replacement\n-\t     function.  */\n-\t  arg = build_int_cst (NULL_TREE, fmt_str[0]);\n-\t  if (fn_putchar)\n-\t    fn = build_call_nofold (fn_putchar, 1, arg);\n-\t}\n-      else\n-\t{\n-\t  /* If the format specifier was \"string\\n\", call puts(\"string\").  */\n-\t  size_t len = strlen (fmt_str);\n-\t  if ((unsigned char)fmt_str[len - 1] == target_newline)\n-\t    {\n-\t      /* Create a NUL-terminated string that's one char shorter\n-\t\t than the original, stripping off the trailing '\\n'.  */\n-\t      char *newstr = XALLOCAVEC (char, len);\n-\t      memcpy (newstr, fmt_str, len - 1);\n-\t      newstr[len - 1] = 0;\n-\t      arg = build_string_literal (len, newstr);\n-\t      if (fn_puts)\n-\t\tfn = build_call_nofold (fn_puts, 1, arg);\n-\t    }\n-\t  else\n-\t    /* We'd like to arrange to call fputs(string,stdout) here,\n-\t       but we need stdout and don't have a way to get it yet.  */\n-\t    return NULL_RTX;\n-\t}\n-    }\n-\n-  if (!fn)\n-    return NULL_RTX;\n-  gcc_assert (TREE_CODE (fn) == CALL_EXPR);\n-  CALL_EXPR_TAILCALL (fn) = CALL_EXPR_TAILCALL (exp);\n-  return expand_expr (fn, target, mode, EXPAND_NORMAL);\n-}\n-\n-/* Expand EXP, a call to fprintf or fprintf_unlocked.\n-   Return NULL_RTX if a normal call should be emitted rather than transforming\n-   the function inline.  If convenient, the result should be placed in\n-   TARGET with mode MODE.  UNLOCKED indicates this is a fprintf_unlocked\n-   call.  */\n-static rtx\n-expand_builtin_fprintf (tree exp, rtx target, enum machine_mode mode,\n-\t\t\tbool unlocked)\n-{\n-  /* If we're using an unlocked function, assume the other unlocked\n-     functions exist explicitly.  */\n-  tree const fn_fputc = unlocked ? built_in_decls[BUILT_IN_FPUTC_UNLOCKED]\n-    : implicit_built_in_decls[BUILT_IN_FPUTC];\n-  tree const fn_fputs = unlocked ? built_in_decls[BUILT_IN_FPUTS_UNLOCKED]\n-    : implicit_built_in_decls[BUILT_IN_FPUTS];\n-  const char *fmt_str;\n-  tree fn = 0;\n-  tree fmt, fp, arg;\n-  int nargs = call_expr_nargs (exp);\n-\n-  /* If the return value is used, don't do the transformation.  */\n-  if (target != const0_rtx)\n-    return NULL_RTX;\n-\n-  /* Verify the required arguments in the original call.  */\n-  if (nargs < 2)\n-    return NULL_RTX;\n-  fp = CALL_EXPR_ARG (exp, 0);\n-  if (! POINTER_TYPE_P (TREE_TYPE (fp)))\n-    return NULL_RTX;\n-  fmt = CALL_EXPR_ARG (exp, 1);\n-  if (! POINTER_TYPE_P (TREE_TYPE (fmt)))\n-    return NULL_RTX;\n-\n-  /* Check whether the format is a literal string constant.  */\n-  fmt_str = c_getstr (fmt);\n-  if (fmt_str == NULL)\n-    return NULL_RTX;\n-\n-  if (!init_target_chars ())\n-    return NULL_RTX;\n-\n-  /* If the format specifier was \"%s\", call __builtin_fputs(arg,fp).  */\n-  if (strcmp (fmt_str, target_percent_s) == 0)\n-    {\n-      if ((nargs != 3)\n-\t  || ! POINTER_TYPE_P (TREE_TYPE (CALL_EXPR_ARG (exp, 2))))\n-\treturn NULL_RTX;\n-      arg = CALL_EXPR_ARG (exp, 2);\n-      if (fn_fputs)\n-\tfn = build_call_nofold (fn_fputs, 2, arg, fp);\n-    }\n-  /* If the format specifier was \"%c\", call __builtin_fputc(arg,fp).  */\n-  else if (strcmp (fmt_str, target_percent_c) == 0)\n-    {\n-      if ((nargs != 3)\n-\t  || TREE_CODE (TREE_TYPE (CALL_EXPR_ARG (exp, 2))) != INTEGER_TYPE)\n-\treturn NULL_RTX;\n-      arg = CALL_EXPR_ARG (exp, 2);\n-      if (fn_fputc)\n-\tfn = build_call_nofold (fn_fputc, 2, arg, fp);\n-    }\n-  else\n-    {\n-      /* We can't handle anything else with % args or %% ... yet.  */\n-      if (strchr (fmt_str, target_percent))\n-\treturn NULL_RTX;\n-\n-      if (nargs > 2)\n-\treturn NULL_RTX;\n-\n-      /* If the format specifier was \"\", fprintf does nothing.  */\n-      if (fmt_str[0] == '\\0')\n-\t{\n-\t  /* Evaluate and ignore FILE* argument for side-effects.  */\n-\t  expand_expr (fp, const0_rtx, VOIDmode, EXPAND_NORMAL);\n-\t  return const0_rtx;\n-\t}\n-\n-      /* When \"string\" doesn't contain %, replace all cases of\n-\t fprintf(stream,string) with fputs(string,stream).  The fputs\n-\t builtin will take care of special cases like length == 1.  */\n-      if (fn_fputs)\n-\tfn = build_call_nofold (fn_fputs, 2, fmt, fp);\n-    }\n-\n-  if (!fn)\n-    return NULL_RTX;\n-  gcc_assert (TREE_CODE (fn) == CALL_EXPR);\n-  CALL_EXPR_TAILCALL (fn) = CALL_EXPR_TAILCALL (exp);\n-  return expand_expr (fn, target, mode, EXPAND_NORMAL);\n-}\n-\n-/* Expand a call EXP to sprintf.  Return NULL_RTX if\n-   a normal call should be emitted rather than expanding the function\n-   inline.  If convenient, the result should be placed in TARGET with\n-   mode MODE.  */\n-\n-static rtx\n-expand_builtin_sprintf (tree exp, rtx target, enum machine_mode mode)\n-{\n-  tree dest, fmt;\n-  const char *fmt_str;\n-  int nargs = call_expr_nargs (exp);\n-\n-  /* Verify the required arguments in the original call.  */\n-  if (nargs < 2)\n-    return NULL_RTX;\n-  dest = CALL_EXPR_ARG (exp, 0);\n-  if (! POINTER_TYPE_P (TREE_TYPE (dest)))\n-    return NULL_RTX;\n-  fmt = CALL_EXPR_ARG (exp, 0);\n-  if (! POINTER_TYPE_P (TREE_TYPE (fmt)))\n-    return NULL_RTX;\n-\n-  /* Check whether the format is a literal string constant.  */\n-  fmt_str = c_getstr (fmt);\n-  if (fmt_str == NULL)\n-    return NULL_RTX;\n-\n-  if (!init_target_chars ())\n-    return NULL_RTX;\n-\n-  /* If the format doesn't contain % args or %%, use strcpy.  */\n-  if (strchr (fmt_str, target_percent) == 0)\n-    {\n-      tree fn = implicit_built_in_decls[BUILT_IN_STRCPY];\n-      tree exp;\n-\n-      if ((nargs > 2) || ! fn)\n-\treturn NULL_RTX;\n-      expand_expr (build_call_nofold (fn, 2, dest, fmt),\n-\t\t   const0_rtx, VOIDmode, EXPAND_NORMAL);\n-      if (target == const0_rtx)\n-\treturn const0_rtx;\n-      exp = build_int_cst (NULL_TREE, strlen (fmt_str));\n-      return expand_expr (exp, target, mode, EXPAND_NORMAL);\n-    }\n-  /* If the format is \"%s\", use strcpy if the result isn't used.  */\n-  else if (strcmp (fmt_str, target_percent_s) == 0)\n-    {\n-      tree fn, arg, len;\n-      fn = implicit_built_in_decls[BUILT_IN_STRCPY];\n-\n-      if (! fn)\n-\treturn NULL_RTX;\n-      if (nargs != 3)\n-\treturn NULL_RTX;\n-      arg = CALL_EXPR_ARG (exp, 2);\n-      if (! POINTER_TYPE_P (TREE_TYPE (arg)))\n-\treturn NULL_RTX;\n-\n-      if (target != const0_rtx)\n-\t{\n-\t  len = c_strlen (arg, 1);\n-\t  if (! len || TREE_CODE (len) != INTEGER_CST)\n-\t    return NULL_RTX;\n-\t}\n-      else\n-\tlen = NULL_TREE;\n-\n-      expand_expr (build_call_nofold (fn, 2, dest, arg),\n-\t\t   const0_rtx, VOIDmode, EXPAND_NORMAL);\n-\n-      if (target == const0_rtx)\n-\treturn const0_rtx;\n-      return expand_expr (len, target, mode, EXPAND_NORMAL);\n-    }\n-\n-  return NULL_RTX;\n-}\n-\n /* Expand a call to either the entry or exit function profiler.  */\n \n static rtx\n@@ -6365,36 +6082,6 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n       expand_builtin_unreachable ();\n       return const0_rtx;\n \n-    case BUILT_IN_PRINTF:\n-      target = expand_builtin_printf (exp, target, mode, false);\n-      if (target)\n-\treturn target;\n-      break;\n-\n-    case BUILT_IN_PRINTF_UNLOCKED:\n-      target = expand_builtin_printf (exp, target, mode, true);\n-      if (target)\n-\treturn target;\n-      break;\n-\n-    case BUILT_IN_FPRINTF:\n-      target = expand_builtin_fprintf (exp, target, mode, false);\n-      if (target)\n-\treturn target;\n-      break;\n-\n-    case BUILT_IN_FPRINTF_UNLOCKED:\n-      target = expand_builtin_fprintf (exp, target, mode, true);\n-      if (target)\n-\treturn target;\n-      break;\n-\n-    case BUILT_IN_SPRINTF:\n-      target = expand_builtin_sprintf (exp, target, mode);\n-      if (target)\n-\treturn target;\n-      break;\n-\n     CASE_FLT_FN (BUILT_IN_SIGNBIT):\n     case BUILT_IN_SIGNBITD32:\n     case BUILT_IN_SIGNBITD64:"}]}