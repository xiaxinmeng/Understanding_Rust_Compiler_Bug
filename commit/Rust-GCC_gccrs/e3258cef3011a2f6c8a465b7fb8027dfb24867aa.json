{"sha": "e3258cef3011a2f6c8a465b7fb8027dfb24867aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTMyNThjZWYzMDExYTJmNmM4YTQ2NWI3ZmI4MDI3ZGZiMjQ4NjdhYQ==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "amylaar@cygnus.co.uk", "date": "1998-02-13T02:26:25Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "1998-02-13T02:26:25Z"}, "message": "* combine.c (can_combine_p): Handle USEs in PARALLELs.\n\nFrom-SVN: r17899", "tree": {"sha": "23dc9186cf59d6ee728733933384672b2b8c31b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23dc9186cf59d6ee728733933384672b2b8c31b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3258cef3011a2f6c8a465b7fb8027dfb24867aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3258cef3011a2f6c8a465b7fb8027dfb24867aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3258cef3011a2f6c8a465b7fb8027dfb24867aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3258cef3011a2f6c8a465b7fb8027dfb24867aa/comments", "author": null, "committer": null, "parents": [{"sha": "2dbfb4181cac4d7da8fa16a00139c432cce6de62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dbfb4181cac4d7da8fa16a00139c432cce6de62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dbfb4181cac4d7da8fa16a00139c432cce6de62"}], "stats": {"total": 41, "additions": 41, "deletions": 0}, "files": [{"sha": "60da151fc97b3cd9185beefba9c99990224d5da9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3258cef3011a2f6c8a465b7fb8027dfb24867aa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3258cef3011a2f6c8a465b7fb8027dfb24867aa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e3258cef3011a2f6c8a465b7fb8027dfb24867aa", "patch": "@@ -1,3 +1,7 @@\n+Fri Feb 13 10:21:41 1998  J\"orn Rennecke <amylaar@cygnus.co.uk>\n+\n+        * combine.c (can_combine_p): Handle USEs in PARALLELs.\n+\n Fri Feb 13 01:34:14 1998  H.J. Lu  (hjl@gnu.org)\n \n \t* config/linux.h (LIB_SPEC): Add -lc for -shared if"}, {"sha": "615a28b07148625d191d508a54a669a10907dae6", "filename": "gcc/combine.c", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3258cef3011a2f6c8a465b7fb8027dfb24867aa/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3258cef3011a2f6c8a465b7fb8027dfb24867aa/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=e3258cef3011a2f6c8a465b7fb8027dfb24867aa", "patch": "@@ -860,6 +860,43 @@ can_combine_p (insn, i3, pred, succ, pdest, psrc)\n \n \t  switch (GET_CODE (elt))\n \t    {\n+\t    /* This is important to combine floating point insns\n+\t       for the SH4 port.  */\n+\t    case USE:\n+\t      /* Combining an isolated USE doesn't make sense.\n+\t\t We depend here on combinable_i3_pat to reject them.  */\n+\t      /* The code below this loop only verifies that the inputs of\n+\t\t the SET in INSN do not change.  We call reg_set_between_p\n+\t\t to verify that the REG in the USE does not change betweeen\n+\t\t I3 and INSN.\n+\t\t If the USE in INSN was for a pseudo register, the matching\n+\t\t insn pattern will likely match any register; combining this\n+\t\t with any other USE would only be safe if we knew that the\n+\t\t used registers have identical values, or if there was\n+\t\t something to tell them apart, e.g. different modes.  For\n+\t\t now, we forgo such compilcated tests and simply disallow\n+\t\t combining of USES of pseudo registers with any other USE.  */\n+\t      if (GET_CODE (XEXP (elt, 0)) == REG\n+\t\t  && GET_CODE (PATTERN (i3)) == PARALLEL)\n+\t\t{\n+\t\t  rtx i3pat = PATTERN (i3);\n+\t\t  int i = XVECLEN (i3pat, 0) - 1;\n+\t\t  int regno = REGNO (XEXP (elt, 0));\n+\t\t  do\n+\t\t    {\n+\t\t      rtx i3elt = XVECEXP (i3pat, 0, i);\n+\t\t      if (GET_CODE (i3elt) == USE\n+\t\t\t  && GET_CODE (XEXP (i3elt, 0)) == REG\n+\t\t\t  && (REGNO (XEXP (i3elt, 0)) == regno\n+\t\t\t      ? reg_set_between_p (XEXP (elt, 0),\n+\t\t\t\t\t\t   PREV_INSN (insn), i3)\n+\t\t\t      : regno >= FIRST_PSEUDO_REGISTER))\n+\t\t\treturn 0;\n+\t\t    }\n+\t\t  while (--i >= 0);\n+\t\t}\n+\t      break;\n+\n \t      /* We can ignore CLOBBERs.  */\n \t    case CLOBBER:\n \t      break;"}]}