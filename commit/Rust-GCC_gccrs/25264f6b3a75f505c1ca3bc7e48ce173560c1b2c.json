{"sha": "25264f6b3a75f505c1ca3bc7e48ce173560c1b2c", "node_id": "C_kwDOANBUbNoAKDI1MjY0ZjZiM2E3NWY1MDVjMWNhM2JjN2U0OGNlMTczNTYwYzFiMmM", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-04-12T21:14:05Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-04-12T22:25:17Z"}, "message": "libstdc++: Fix some AIX test failures\n\nAIX <sys/thread.h> defines struct tstate with non-reserved names, so\nadjust the 17_intro/names.cc test. It also defines struct user, which\nconflicts with namespace user in some tests.\n\nReplacing the global operator new doesn't work on AIX the same way as it\ndoes for ELF, so skip some tests that depend on replacing it.\n\nAdd missing DG directives to synchronized_value test so it doesn't run\nfor the single-threaded AIX multilib.\n\nlibstdc++-v3/ChangeLog:\n\n\t* testsuite/17_intro/names.cc [_AIX]: Do not define policy.\n\t* testsuite/19_diagnostics/error_code/cons/lwg3629.cc: Rename\n\tnamespace to avoid clashing with libc struct.\n\t* testsuite/19_diagnostics/error_condition/cons/lwg3629.cc:\n\tLikewise.\n\t* testsuite/23_containers/unordered_map/96088.cc: Skip on AIX.\n\t* testsuite/23_containers/unordered_multimap/96088.cc: Likewise.\n\t* testsuite/23_containers/unordered_multiset/96088.cc: Likewise.\n\t* testsuite/23_containers/unordered_set/96088.cc: Likewise.\n\t* testsuite/experimental/synchronized_value.cc: Require gthreads\n\tand add missing option for pthreads targets.", "tree": {"sha": "610639f1425f86ac0ed0f6d69895a57938268005", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/610639f1425f86ac0ed0f6d69895a57938268005"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25264f6b3a75f505c1ca3bc7e48ce173560c1b2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25264f6b3a75f505c1ca3bc7e48ce173560c1b2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25264f6b3a75f505c1ca3bc7e48ce173560c1b2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25264f6b3a75f505c1ca3bc7e48ce173560c1b2c/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d339e9802f758e051b0a1ef6db732ff846cbf4e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d339e9802f758e051b0a1ef6db732ff846cbf4e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d339e9802f758e051b0a1ef6db732ff846cbf4e3"}], "stats": {"total": 44, "additions": 26, "deletions": 18}, "files": [{"sha": "eb4d064177c8b5bda6a05e7b032486efa7c24dc9", "filename": "libstdc++-v3/testsuite/17_intro/names.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25264f6b3a75f505c1ca3bc7e48ce173560c1b2c/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fnames.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25264f6b3a75f505c1ca3bc7e48ce173560c1b2c/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fnames.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fnames.cc?ref=25264f6b3a75f505c1ca3bc7e48ce173560c1b2c", "patch": "@@ -243,6 +243,8 @@\n #undef v\n // <sys/timer.h> defines trb::func and cputime_tmr::func\n #undef func\n+// <sys/thread.h> defines tstate::policy\n+#undef policy\n #endif\n \n #ifdef __APPLE__"}, {"sha": "bd7c6ce3d9e35eb581ce181412991c72f3faa731", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_code/cons/lwg3629.cc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25264f6b3a75f505c1ca3bc7e48ce173560c1b2c/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Fcons%2Flwg3629.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25264f6b3a75f505c1ca3bc7e48ce173560c1b2c/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Fcons%2Flwg3629.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Fcons%2Flwg3629.cc?ref=25264f6b3a75f505c1ca3bc7e48ce173560c1b2c", "patch": "@@ -3,18 +3,18 @@\n // 3629. make_error_code and make_error_condition are customization points\n // Verify that make_error_code is looked up using ADL only.\n \n-namespace user\n+namespace User\n {\n   struct E1;\n }\n \n // N.B. not in associated namespace of E1, and declared before <system_error>.\n-user::E1 make_error_code(user::E1);\n+User::E1 make_error_code(User::E1);\n \n #include <future> // declares std::make_error_code(future_errc)\n #include <system_error>\n \n-namespace user\n+namespace User\n {\n   struct E1\n   {\n@@ -32,17 +32,17 @@ namespace user\n   };\n }\n \n-template<> struct std::is_error_code_enum<user::E1> : std::true_type { };\n-template<> struct std::is_error_code_enum<user::E2> : std::true_type { };\n-template<> struct std::is_error_code_enum<user::E3> : std::true_type { };\n+template<> struct std::is_error_code_enum<User::E1> : std::true_type { };\n+template<> struct std::is_error_code_enum<User::E2> : std::true_type { };\n+template<> struct std::is_error_code_enum<User::E3> : std::true_type { };\n \n // ::make_error_code(E1) should not be found by name lookup.\n-std::error_code e1( user::E1{} ); // { dg-error \"here\" }\n+std::error_code e1( User::E1{} ); // { dg-error \"here\" }\n \n // std::make_error_code(future_errc) should not be found by name lookup.\n-std::error_code e2( user::E2{} ); // { dg-error \"here\" }\n+std::error_code e2( User::E2{} ); // { dg-error \"here\" }\n \n // std::make_error_code(errc) should not be found by name lookup.\n-std::error_code e3( user::E3{} ); // { dg-error \"here\" }\n+std::error_code e3( User::E3{} ); // { dg-error \"here\" }\n \n // { dg-error \"use of deleted function\" \"\" { target *-*-* } 0 }"}, {"sha": "d72163b1a073f5362a4c65f0c78a31463977a62b", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_condition/cons/lwg3629.cc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25264f6b3a75f505c1ca3bc7e48ce173560c1b2c/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Fcons%2Flwg3629.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25264f6b3a75f505c1ca3bc7e48ce173560c1b2c/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Fcons%2Flwg3629.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Fcons%2Flwg3629.cc?ref=25264f6b3a75f505c1ca3bc7e48ce173560c1b2c", "patch": "@@ -3,18 +3,18 @@\n // 3629. make_error_code and make_error_condition are customization points\n // Verify that make_error_condition is looked up using ADL only.\n \n-namespace user\n+namespace User\n {\n   struct E1;\n }\n \n // N.B. not in associated namespace of E1, and declared before <system_error>.\n-user::E1 make_error_condition(user::E1);\n+User::E1 make_error_condition(User::E1);\n \n #include <future> // declares std::make_error_condition(future_errc)\n #include <system_error>\n \n-namespace user\n+namespace User\n {\n   struct E1\n   {\n@@ -32,17 +32,17 @@ namespace user\n   };\n }\n \n-template<> struct std::is_error_condition_enum<user::E1> : std::true_type { };\n-template<> struct std::is_error_condition_enum<user::E2> : std::true_type { };\n-template<> struct std::is_error_condition_enum<user::E3> : std::true_type { };\n+template<> struct std::is_error_condition_enum<User::E1> : std::true_type { };\n+template<> struct std::is_error_condition_enum<User::E2> : std::true_type { };\n+template<> struct std::is_error_condition_enum<User::E3> : std::true_type { };\n \n // ::make_error_condition(E1) should not be found by name lookup.\n-std::error_condition e1( user::E1{} ); // { dg-error \"here\" }\n+std::error_condition e1( User::E1{} ); // { dg-error \"here\" }\n \n // std::make_error_condition(future_errc) should not be found by name lookup.\n-std::error_condition e2( user::E2{} ); // { dg-error \"here\" }\n+std::error_condition e2( User::E2{} ); // { dg-error \"here\" }\n \n // std::make_error_condition(errc) should not be found by name lookup.\n-std::error_condition e3( user::E3{} ); // { dg-error \"here\" }\n+std::error_condition e3( User::E3{} ); // { dg-error \"here\" }\n \n // { dg-error \"use of deleted function\" \"\" { target *-*-* } 0 }"}, {"sha": "c6d50c20fbf6593a340e7e818eac9533e5295fcb", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/96088.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25264f6b3a75f505c1ca3bc7e48ce173560c1b2c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2F96088.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25264f6b3a75f505c1ca3bc7e48ce173560c1b2c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2F96088.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2F96088.cc?ref=25264f6b3a75f505c1ca3bc7e48ce173560c1b2c", "patch": "@@ -1,5 +1,6 @@\n // { dg-do run { target c++17 } }\n // { dg-require-effective-target std_allocator_new }\n+// { dg-xfail-run-if \"AIX operator new\" { powerpc-ibm-aix* } }\n \n // Copyright (C) 2021-2023 Free Software Foundation, Inc.\n //"}, {"sha": "214bc91a559a0c5995d8a494c2bb212b18c8a349", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/96088.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25264f6b3a75f505c1ca3bc7e48ce173560c1b2c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2F96088.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25264f6b3a75f505c1ca3bc7e48ce173560c1b2c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2F96088.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2F96088.cc?ref=25264f6b3a75f505c1ca3bc7e48ce173560c1b2c", "patch": "@@ -1,5 +1,6 @@\n // { dg-do run { target c++17 } }\n // { dg-require-effective-target std_allocator_new }\n+// { dg-xfail-run-if \"AIX operator new\" { powerpc-ibm-aix* } }\n \n // Copyright (C) 2021-2023 Free Software Foundation, Inc.\n //"}, {"sha": "838ce8d5bc531767b1c1533d068b13f41540c897", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multiset/96088.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25264f6b3a75f505c1ca3bc7e48ce173560c1b2c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2F96088.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25264f6b3a75f505c1ca3bc7e48ce173560c1b2c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2F96088.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2F96088.cc?ref=25264f6b3a75f505c1ca3bc7e48ce173560c1b2c", "patch": "@@ -1,5 +1,6 @@\n // { dg-do run { target c++17 } }\n // { dg-require-effective-target std_allocator_new }\n+// { dg-xfail-run-if \"AIX operator new\" { powerpc-ibm-aix* } }\n \n // Copyright (C) 2021-2023 Free Software Foundation, Inc.\n //"}, {"sha": "0f7dce2b38c52f52cc6edb96d0b8dec75e191bba", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/96088.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25264f6b3a75f505c1ca3bc7e48ce173560c1b2c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2F96088.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25264f6b3a75f505c1ca3bc7e48ce173560c1b2c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2F96088.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2F96088.cc?ref=25264f6b3a75f505c1ca3bc7e48ce173560c1b2c", "patch": "@@ -1,5 +1,6 @@\n // { dg-do run { target c++17 } }\n // { dg-require-effective-target std_allocator_new }\n+// { dg-xfail-run-if \"AIX operator new\" { powerpc-ibm-aix* } }\n \n // Copyright (C) 2021-2023 Free Software Foundation, Inc.\n //"}, {"sha": "a7e556c14ead21ede5d92f1a90a9d801ffa0b016", "filename": "libstdc++-v3/testsuite/experimental/synchronized_value.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25264f6b3a75f505c1ca3bc7e48ce173560c1b2c/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsynchronized_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25264f6b3a75f505c1ca3bc7e48ce173560c1b2c/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsynchronized_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsynchronized_value.cc?ref=25264f6b3a75f505c1ca3bc7e48ce173560c1b2c", "patch": "@@ -1,4 +1,6 @@\n // { dg-do run { target c++17 } }\n+// { dg-additional-options \"-pthread\" { target pthread } }\n+// { dg-require-gthreads \"\" }\n \n #include <experimental/synchronized_value>\n #include <testsuite_hooks.h>"}]}